composite_setup_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	composite_setup_complete, .-composite_setup_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_disable, %function
diag_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #108
	mov	r4, r0
	str	r6, [sp, #8]
	mov	r0, r5
	mov	r6, #0
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r6, [r4, #112]
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #124]
	cmp	r3, r6
	beq	.L4
	ldr	r5, [r3, #12]
	cmp	r5, r6
	beq	.L4
	mov	r2, r6
	mov	r1, #1
	ldr	r0, [r3, #16]
	blx	r5
.L4:
	ldr	r0, [r4, #88]
	mov	r5, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #88]
	str	r5, [r3]
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #84]
	str	r5, [r3]
	ldr	r3, [r4, #124]
	cmp	r3, r5
	strne	r5, [r3, #20]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	diag_function_disable, .-diag_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_reset_stats, %function
debug_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {lr}
	str	lr, [sp, #-4]!
	movw	lr, #:lower16:.LANCHOR0
	movt	lr, #:upper16:.LANCHOR0
	ldr	r3, [lr]
	cmp	lr, r3
	beq	.L17
	sub	r3, r3, #4
	mov	ip, #0
.L19:
	ldr	r1, [r3, #20]
	cmp	r1, #0
	beq	.L18
	str	ip, [r1, #128]
	str	ip, [r1, #132]
	str	ip, [r1, #136]
.L18:
	ldr	r3, [r3, #4]
	cmp	lr, r3
	sub	r3, r3, #4
	bne	.L19
.L17:
	mov	r0, r2
	ldr	pc, [sp], #4
	.fnend
	.size	debug_reset_stats, .-debug_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_open, %function
debug_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	debug_open, .-debug_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_eps_disable, %function
qdss_eps_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrb	r3, [r0, #192]	@ zero_extendqisi2
	tst	r3, #2
	beq	.L27
	ldr	r0, [r0, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #192]	@ zero_extendqisi2
	bfc	r2, #1, #1
	uxtb	r3, r2
	strb	r2, [r4, #192]
.L27:
	tst	r3, #4
	beq	.L28
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #192]	@ zero_extendqisi2
	bfc	r2, #2, #1
	uxtb	r3, r2
	strb	r2, [r4, #192]
.L28:
	tst	r3, #1
	beq	.L26
	ldr	r0, [r4, #108]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r4, #192]
.L26:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	qdss_eps_disable, .-qdss_eps_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_txcommand_complete, %function
rmnet_txcommand_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	add	r5, r4, #164
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #440]
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #440]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
	.fnend
	.size	rmnet_txcommand_complete, .-rmnet_txcommand_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_debug_reset_stats, %function
rmnet_smd_debug_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	add	r5, r4, #164
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r3, #0
	mov	r1, r0
	mov	r0, r5
	str	r3, [r4, #424]
	str	r3, [r4, #428]
	str	r3, [r4, #432]
	str	r3, [r4, #436]
	str	r3, [r4, #440]
	str	r3, [r4, #444]
	str	r3, [r4, #448]
	str	r3, [r4, #452]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, r6
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_smd_debug_reset_stats, .-rmnet_smd_debug_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_debug_open, %function
rmnet_smd_debug_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	rmnet_smd_debug_open, .-rmnet_smd_debug_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_set_modem_cbits_w, %function
rmnet_sdio_set_modem_cbits_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #-12]
	bx	lr
	.fnend
	.size	rmnet_sdio_set_modem_cbits_w, .-rmnet_sdio_set_modem_cbits_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_disconnect_work, %function
rmnet_sdio_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	rmnet_sdio_disconnect_work, .-rmnet_sdio_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_reset_stats, %function
rmnet_sdio_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #124]
	mov	r1, #0
	mov	r0, r2
	str	r1, [r3, #328]
	str	r1, [r3, #356]
	str	r1, [r3, #360]
	str	r1, [r3, #364]
	str	r1, [r3, #368]
	str	r1, [r3, #372]
	bx	lr
	.fnend
	.size	rmnet_sdio_reset_stats, .-rmnet_sdio_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_suspend, %function
rmnet_mux_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #372]
	cmp	r3, #0
	beq	.L48
	ldr	r3, [r0, #352]
	bic	r3, r3, #2
	str	r3, [r0, #352]
.L48:
	bx	lr
	.fnend
	.size	rmnet_mux_suspend, .-rmnet_mux_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_unbind, %function
rmnet_mux_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #0
	str	r3, [r1, #172]
	bx	lr
	.fnend
	.size	rmnet_mux_unbind, .-rmnet_mux_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_reset_stats, %function
rmnet_mux_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #124]
	mov	r1, #0
	mov	r0, r2
	str	r1, [r3, #312]
	str	r1, [r3, #400]
	str	r1, [r3, #404]
	str	r1, [r3, #408]
	str	r1, [r3, #412]
	str	r1, [r3, #416]
	str	r1, [r3, #420]
	str	r1, [r3, #424]
	bx	lr
	.fnend
	.size	rmnet_mux_reset_stats, .-rmnet_mux_reset_stats
	.align	2
	.global	usb_rmnet_mux_ctrl_release
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_release, %function
usb_rmnet_mux_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	mov	r4, #0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r1, #124]
	add	r6, r7, #368
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r4, [r7, #356]
	mov	r0, r6
	str	r4, [r5, #124]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	usb_rmnet_mux_ctrl_release, .-usb_rmnet_mux_ctrl_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_disable, %function
audio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldrb	r3, [r0, #152]	@ zero_extendqisi2
	cmp	r3, #0
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	strb	r3, [r4, #152]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	audio_disable, .-audio_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_close, %function
audio_pcm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #8]
	add	r5, r6, #108
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r4, [r6, #92]
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	audio_pcm_close, .-audio_pcm_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_prepare, %function
audio_pcm_prepare:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	ip, r0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r1, [ip, #212]
	mov	lr, #0
	mov	r0, lr
	ldr	r4, [r1, #60]
	ldr	r2, [r1, #80]
	ldr	r3, [r1, #200]
	mul	r2, r2, r4
	str	lr, [r3, #128]
	lsr	r2, r2, #3
	str	r2, [r3, #124]
	ldr	r2, [r1, #540]
	str	r2, [r3, #112]
	ldr	ip, [ip, #212]
	ldr	lr, [ip, #68]
	ldr	r1, [ip, #80]
	str	r2, [r3, #120]
	mul	r1, r1, lr
	add	r2, r2, r1, lsr #3
	str	r2, [r3, #116]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	audio_pcm_prepare, .-audio_pcm_prepare
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_pointer, %function
audio_pcm_pointer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #212]
	ldr	r0, [r3, #80]
	ldr	r2, [r3, #200]
	ldr	r1, [r2, #112]
	ldr	r3, [r2, #120]
	sub	r3, r3, r1
	lsl	r3, r3, #3
	udiv	r0, r3, r0
	bx	lr
	.fnend
	.size	audio_pcm_pointer, .-audio_pcm_pointer
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_ioctl, %function
ffs_ep0_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #26496
	ldr	r0, [r0, #124]
	cmp	r1, ip
	beq	.L85
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L79
	ldr	r3, [r0]
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L79
	bx	r3
.L85:
	mov	r3, r2
	ldr	r2, [r0, #132]
	cmp	r2, #0
	beq	.L76
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	r1, [r2, #8]
	ldr	lr, [r2, #32]
	ldrh	r1, [r1, #178]
	cmp	r1, #0
	beq	.L77
	uxtb	r2, r3
	mov	ip, lr
.L75:
	mov	r3, ip
	ldrsh	r0, [r3], #2
	cmp	r0, #0
	blt	.L74
	cmp	r0, r2
	beq	.L86
.L74:
	subs	r1, r1, #1
	mov	ip, r3
	bne	.L75
.L77:
	mvn	r0, #32
	ldr	pc, [sp], #4
.L86:
	sub	r0, ip, lr
	asr	r0, r0, #1
	ldr	pc, [sp], #4
.L79:
	mvn	r0, #24
	bx	lr
.L76:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	ffs_ep0_ioctl, .-ffs_ep0_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_writes_finished, %function
gs_writes_finished:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irq
	ldr	r3, [r5, #4]
	cmp	r3, #0
	moveq	r4, #1
	beq	.L88
	ldr	r2, [r5, #92]
	ldr	r1, [r5, #100]
	ldr	r3, [r5, #104]
	add	r4, r3, r2
	sub	r3, r4, r1
	udiv	r4, r3, r2
	mls	r4, r2, r4, r3
	clz	r4, r4
	lsr	r4, r4, #5
.L88:
	mov	r0, r5
	bl	_raw_spin_unlock_irq
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_writes_finished, .-gs_writes_finished
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_write_room, %function
gs_write_room:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #272]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #4]
	mov	r1, r0
	cmp	r3, #0
	moveq	r5, r3
	beq	.L92
	ldr	r2, [r4, #92]
	ldr	r3, [r4, #100]
	ldr	r0, [r4, #104]
	add	r3, r3, r2
	sub	r3, r3, r0
	sub	r3, r3, #1
	udiv	r5, r3, r2
	mls	r5, r2, r5, r3
.L92:
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_write_room, .-gs_write_room
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_chars_in_buffer, %function
gs_chars_in_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r4, [r0, #272]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #92]
	mov	r1, r0
	mov	r0, r4
	ldr	ip, [r4, #100]
	ldr	r3, [r4, #104]
	add	r3, r3, r2
	sub	r3, r3, ip
	udiv	r4, r3, r2
	mls	r4, r2, r4, r3
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gs_chars_in_buffer, .-gs_chars_in_buffer
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_break_ctl, %function
gs_break_ctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r5, [r0, #272]
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r0, [r5, #4]
	cmp	r0, #0
	moveq	r4, r0
	beq	.L98
	ldr	r4, [r0, #124]
	cmp	r4, #0
	beq	.L98
	mov	r1, r6
	blx	r4
	mov	r4, r0
.L98:
	mov	r0, r5
	bl	_raw_spin_unlock_irq
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_break_ctl, .-gs_break_ctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_tiocmget, %function
gs_tiocmget:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #272]
	mov	r0, r6
	bl	_raw_spin_lock_irq
	ldr	r5, [r6, #4]
	cmp	r5, #0
	mvneq	r4, #18
	beq	.L103
	ldr	r4, [r5, #108]
	cmp	r4, #0
	beq	.L104
	mov	r0, r5
	blx	r4
	cmp	r0, #0
	movne	r4, #2
	moveq	r4, #0
.L104:
	ldr	r3, [r5, #112]
	cmp	r3, #0
	beq	.L106
	mov	r0, r5
	blx	r3
	cmp	r0, #0
	orrne	r4, r4, #4
.L106:
	ldrh	r3, [r5, #104]
	tst	r3, #64
	orrne	r4, r4, #64
	tst	r3, #128
	orrne	r4, r4, #128
.L103:
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_tiocmget, .-gs_tiocmget
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_tiocmset, %function
gs_tiocmset:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r2
	strd	r8, [sp, #16]
	mov	r8, r1
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r7, [r0, #272]
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r4, [r7, #4]
	cmp	r4, #0
	beq	.L129
	ands	r5, r8, #128
	and	r9, r6, #128
	beq	.L126
	ldr	r5, [r4, #132]
	cmp	r5, #0
	beq	.L127
	ldrh	r3, [r4, #104]
	mov	r1, #1
	mov	r0, r4
	orr	r3, r3, #128
	strh	r3, [r4, #104]	@ movhi
	blx	r5
	mov	r5, r0
.L126:
	cmp	r9, #0
	beq	.L127
	ldr	r2, [r4, #132]
	cmp	r2, #0
	beq	.L127
	ldrh	r3, [r4, #104]
	mov	r1, #0
	mov	r0, r4
	bic	r3, r3, #128
	strh	r3, [r4, #104]	@ movhi
	blx	r2
	mov	r5, r0
.L127:
	tst	r8, #64
	and	r6, r6, #64
	bne	.L151
.L128:
	cmp	r6, #0
	beq	.L125
	ldr	r2, [r4, #128]
	cmp	r2, #0
	beq	.L125
	ldrh	r3, [r4, #104]
	mov	r0, r4
	mov	r1, #0
	bic	r3, r3, #64
	strh	r3, [r4, #104]	@ movhi
	blx	r2
	mov	r5, r0
.L125:
	mov	r0, r7
	bl	_raw_spin_unlock_irq
	ldrd	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L151:
	ldr	r2, [r4, #128]
	cmp	r2, #0
	beq	.L125
	ldrh	r3, [r4, #104]
	mov	r1, #1
	mov	r0, r4
	orr	r3, r3, #64
	strh	r3, [r4, #104]	@ movhi
	blx	r2
	mov	r5, r0
	b	.L128
.L129:
	mvn	r5, #18
	b	.L125
	.fnend
	.size	gs_tiocmset, .-gs_tiocmset
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_write_reset, %function
debug_write_reset:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	mov	r3, #0
	mov	r1, r0
	mov	r0, r4
	str	r3, [r4, #128]
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	debug_write_reset, .-debug_write_reset
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_sdio_reset_stats, %function
debug_sdio_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r7]
	str	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #28]
	cmp	r3, #0
	beq	.L155
	mov	r5, #0
	add	r6, r7, #4
	mov	r9, r5
.L156:
	ldr	r4, [r6, #20]
	add	r5, r5, #1
	add	r6, r6, #104
	add	r8, r4, #4
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r9, [r4, #184]
	mov	r0, r8
	str	r9, [r4, #188]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7]
	cmp	r5, r3
	bcc	.L156
.L155:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	debug_sdio_reset_stats, .-debug_sdio_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_smd_reset_stats, %function
debug_smd_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r7, #212]
	str	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #28]
	cmp	r3, #0
	beq	.L163
	mov	r5, #0
	add	r6, r7, #216
	mov	r9, r5
.L164:
	ldr	r4, [r6, #20]
	add	r5, r5, #1
	add	r6, r6, #104
	add	r8, r4, #4
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r9, [r4, #168]
	mov	r0, r8
	str	r9, [r4, #172]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7, #212]
	cmp	r5, r3
	bcc	.L164
.L163:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	debug_smd_reset_stats, .-debug_smd_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_wake_cb, %function
gbam_wake_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #16]
	ldr	r3, [r3, #128]
	ldr	r0, [r3]
	ldr	r3, [r0]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L171
	bx	r3
.L171:
	mvn	r0, #94
	bx	lr
	.fnend
	.size	gbam_wake_cb, .-gbam_wake_cb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_reset_stats, %function
gbam_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r3, #424]
	cmp	r2, #0
	ble	.L173
	ldr	r4, [r3, #428]
	cmp	r4, #0
	beq	.L173
	add	r5, r4, #4
	add	r6, r4, #8
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #240]
	str	r3, [r4, #244]
	str	r3, [r4, #248]
	str	r3, [r4, #260]
	str	r3, [r4, #264]
	str	r3, [r4, #268]
	str	r3, [r4, #272]
	str	r3, [r4, #276]
	str	r3, [r4, #280]
	bl	_raw_spin_unlock
	mov	r1, r8
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L173:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	gbam_reset_stats, .-gbam_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_reset_stats, %function
gsmd_ctrl_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	ldr	r5, .L187
	strd	r6, [sp, #8]
	mov	r7, #0
	strd	r8, [sp, #16]
	mov	r9, r2
	str	r10, [sp, #24]
	add	r8, r5, #504
	str	lr, [sp, #28]
.L181:
	ldr	r4, [r5]
	add	r5, r5, #84
	cmp	r4, #0
	add	r6, r4, #108
	mov	r0, r6
	beq	.L180
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r7, [r4, #92]
	mov	r0, r6
	str	r7, [r4, #96]
	bl	_raw_spin_unlock_irqrestore
.L180:
	cmp	r5, r8
	bne	.L181
	mov	r0, r9
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L188:
	.align	2
.L187:
	.word	.LANCHOR1+512
	.fnend
	.size	gsmd_ctrl_reset_stats, .-gsmd_ctrl_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_open, %function
rmnet_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r3, [r4, #1016]
	str	lr, [sp, #12]
	add	r2, r3, #16
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r5, [r2]
	add	r5, r5, #1
	strex	r0, r5, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r5, #1
	bne	.L190
	ldr	r0, [r4, #1016]
	str	r0, [r1, #124]
	add	r0, r0, #52
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1016]
	mov	r1, r0
	strb	r5, [r3, #4]
	add	r0, r3, #52
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
.L189:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L190:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #15
	b	.L189
	.fnend
	.size	rmnet_ctrl_open, .-rmnet_ctrl_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_release, %function
rmnet_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #124]
	add	r6, r4, #52
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	strb	r5, [r4, #4]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	add	r3, r4, #16
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_ctrl_release, .-rmnet_ctrl_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_receive, %function
ghsic_ctrl_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	subs	r4, r0, #0
	str	lr, [sp, #4]
	moveq	r0, r4
	beq	.L195
	ldr	r3, [r4, #52]
	cmp	r3, #0
	beq	.L198
	ldr	r0, [r4, #8]
	blx	r3
	ldr	r3, [r4, #100]
	add	r3, r3, #1
	str	r3, [r4, #100]
.L195:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L198:
	mov	r0, r3
	b	.L195
	.fnend
	.size	ghsic_ctrl_receive, .-ghsic_ctrl_receive
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_status, %function
ghsic_ctrl_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #8]
	str	r1, [r0, #92]
	cmp	r3, #0
	beq	.L200
	ldr	r2, [r3, #136]
	cmp	r2, #0
	beq	.L200
	mov	r0, r3
	bx	r2
.L200:
	bx	lr
	.fnend
	.size	ghsic_ctrl_status, .-ghsic_ctrl_status
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_reset_stats, %function
gctrl_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	str	r10, [sp, #24]
	mov	r10, r2
	ldr	r3, [r9, #1020]
	str	lr, [sp, #28]
	cmp	r3, #0
	beq	.L209
	mov	r5, #0
	add	r6, r9, #1024
	mov	r8, r5
.L211:
	ldr	r4, [r6]
	add	r5, r5, #1
	add	r6, r6, #104
	cmp	r4, #0
	add	r7, r4, #4
	mov	r0, r7
	beq	.L210
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r8, [r4, #96]
	mov	r0, r7
	str	r8, [r4, #100]
	str	r8, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
.L210:
	ldr	r3, [r9, #1020]
	cmp	r5, r3
	bcc	.L211
.L209:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	gctrl_reset_stats, .-gctrl_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_reset_stats, %function
ghsic_data_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	movw	r10, #:lower16:.LANCHOR1
	mov	fp, r2
	movt	r10, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r10, #1440]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	cmp	r3, #0
	beq	.L221
	ldr	r7, .L232
	mov	r6, #0
	mov	r5, r6
.L223:
	ldr	r4, [r7]
	add	r6, r6, #1
	add	r7, r7, #104
	cmp	r4, #0
	add	r8, r4, #80
	add	r9, r4, #48
	mov	r0, r8
	beq	.L222
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #188]
	mov	r0, r8
	str	r5, [r4, #204]
	str	r5, [r4, #208]
	str	r5, [r4, #212]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #192]
	mov	r0, r9
	str	r5, [r4, #196]
	str	r5, [r4, #200]
	str	r5, [r4, #216]
	bl	_raw_spin_unlock_irqrestore
.L222:
	ldr	r3, [r10, #1440]
	cmp	r6, r3
	bcc	.L223
.L221:
	mov	r0, fp
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L233:
	.align	2
.L232:
	.word	.LANCHOR1+1444
	.fnend
	.size	ghsic_data_reset_stats, .-ghsic_data_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_reset_stats, %function
ghsuart_ctrl_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r7, #1860]
	str	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #28]
	cmp	r3, #0
	beq	.L235
	ldr	r6, .L246
	mov	r5, #0
	mov	r9, r5
.L237:
	ldr	r4, [r6]
	add	r5, r5, #1
	add	r6, r6, #84
	cmp	r4, #0
	add	r8, r4, #8
	mov	r0, r8
	beq	.L236
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r9, [r4, #96]
	mov	r0, r8
	str	r9, [r4, #100]
	str	r9, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
.L236:
	ldr	r3, [r7, #1860]
	cmp	r5, r3
	bcc	.L237
.L235:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L247:
	.align	2
.L246:
	.word	.LANCHOR1+1864
	.fnend
	.size	ghsuart_ctrl_reset_stats, .-ghsuart_ctrl_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_reset_stats, %function
ghsuart_data_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r7, #2032]
	strd	r10, [sp, #24]
	mov	fp, r2
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	cmp	r3, #0
	beq	.L249
	ldr	r6, .L260
	mov	r5, #0
	mov	r9, r5
.L251:
	ldr	r4, [r6]
	add	r5, r5, #1
	add	r6, r6, #84
	cmp	r4, #0
	add	r8, r4, #104
	add	r10, r4, #72
	mov	r0, r8
	beq	.L250
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r9, [r4, #204]
	mov	r0, r8
	str	r9, [r4, #212]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r9, [r4, #208]
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
.L250:
	ldr	r3, [r7, #2032]
	cmp	r5, r3
	bcc	.L251
.L249:
	mov	r0, fp
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L261:
	.align	2
.L260:
	.word	.LANCHOR1+2036
	.fnend
	.size	ghsuart_data_reset_stats, .-ghsuart_data_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_open, %function
modem_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, r2
	str	r2, [r3, #2204]
	bx	lr
	.fnend
	.size	modem_open, .-modem_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_poll, %function
modem_poll:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r2, r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	beq	.L264
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L264
	ldr	r1, .L275
	blx	r3
.L264:
	movw	r3, #:lower16:.LANCHOR1
	ldr	r4, [sp]
	add	sp, sp, #4
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #2204]
	cmp	r0, #0
	movne	r0, #65
	ldr	pc, [sp], #4
.L276:
	.align	2
.L275:
	.word	.LANCHOR1+2208
	.fnend
	.size	modem_poll, .-modem_poll
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_open, %function
ccid_bulk_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r3, #2220]
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L279
	ldr	r5, [r4, #152]
	cmp	r5, #0
	bne	.L280
	mov	r3, #1
	add	r7, r4, #92
	str	r5, [r4, #148]
	mov	r6, r1
	mov	r0, r7
	str	r3, [r4, #152]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r4, [r6, #124]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
.L277:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L280:
	mvn	r0, #15
	b	.L277
.L279:
	mvn	r0, #18
	b	.L277
	.fnend
	.size	ccid_bulk_open, .-ccid_bulk_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_release, %function
ccid_bulk_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #124]
	mov	r3, #0
	mov	r0, r3
	str	r3, [r2, #152]
	bx	lr
	.fnend
	.size	ccid_bulk_release, .-ccid_bulk_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_ctrl_open, %function
ccid_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r3, #2220]
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L285
	ldr	r5, [r4, #116]
	cmp	r5, #0
	bne	.L286
	mov	r3, #1
	add	r7, r4, #92
	mov	r6, r1
	mov	r0, r7
	str	r3, [r4, #116]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r4, [r6, #124]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
.L283:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L286:
	mvn	r0, #15
	b	.L283
.L285:
	mvn	r0, #18
	b	.L283
	.fnend
	.size	ccid_ctrl_open, .-ccid_ctrl_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_ctrl_release, %function
ccid_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #124]
	mov	r3, #0
	mov	r0, r3
	str	r3, [r2, #116]
	bx	lr
	.fnend
	.size	ccid_ctrl_release, .-ccid_ctrl_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_disable, %function
f_midi_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	bx	r3
	.fnend
	.size	f_midi_disable, .-f_midi_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_snd_free, %function
f_midi_snd_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_snd_free, .-f_midi_snd_free
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_in_open, %function
f_midi_in_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #12]
	ldr	r2, [r0, #28]
	ldr	r2, [r2, #200]
	add	r3, r2, r3, lsl #2
	ldr	r1, [r3, #232]
	cmp	r1, #0
	beq	.L294
	str	r0, [r3, #104]
	ldr	r3, [r0, #12]
	mov	r1, #0
	mov	r0, r1
	add	r3, r3, #58
	ldr	r3, [r2, r3, lsl #2]
	strb	r1, [r3, #9]
	bx	lr
.L294:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	f_midi_in_open, .-f_midi_in_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_out_open, %function
f_midi_out_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #12]
	mov	r2, r0
	ldr	r1, [r0, #28]
	cmp	r3, #15
	ldr	r1, [r1, #200]
	addle	r3, r3, #42
	movle	r0, #0
	mvngt	r0, #21
	strle	r2, [r1, r3, lsl #2]
	bx	lr
	.fnend
	.size	f_midi_out_open, .-f_midi_out_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_response_available, %function
rndis_response_available:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #176
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r1, [r0, #172]
	ldr	ip, [r1]
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	beq	.L309
.L298:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L309:
	ldr	r2, [r0, #168]
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L298
	mov	r4, r0
	mov	r0, #0
	str	r3, [ip]
	mov	r2, #32
	str	r0, [ip, #4]
	ldr	r0, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L298
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L298
	.fnend
	.size	rndis_response_available, .-rndis_response_available
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_response_complete, %function
rndis_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r4, [r1, #32]
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r4, #20]
	cmp	r3, #0
	beq	.L310
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L310
	ldr	r3, [r1, #44]
	cmn	r3, #108
	beq	.L315
	cmn	r3, #104
	beq	.L315
	ldr	r3, [r4, #168]
	cmp	r3, r0
	beq	.L333
.L310:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L315:
	mov	r3, #0
	str	r3, [r4, #176]
	b	.L310
.L333:
	add	r5, r4, #176
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L310
	ldr	r0, [r4, #168]
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L310
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L310
	.fnend
	.size	rndis_response_complete, .-rndis_response_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_do_notify, %function
ecm_qc_do_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #148]
	cmp	r5, #0
	beq	.L334
	ldrb	r2, [r0, #152]	@ zero_extendqisi2
	ldr	r3, [r5]
	cmp	r2, #1
	beq	.L338
	bcc	.L334
	cmp	r2, #2
	bne	.L337
	ldr	ip, [r0, #20]
	mov	r2, #0
	mov	r1, #8
	mov	r4, #42
	mov	lr, #16
	ldr	ip, [ip, #24]
	strb	r4, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	strb	r1, [r3, #6]
	strb	r2, [r3, #7]
	ldr	r1, [r5]
	str	lr, [r5, #4]
	ldr	r2, [ip]
	ldr	ip, [r2, #20]
	cmp	ip, #2
	movls	r2, #28672
	movtls	r2, 148
	bls	.L342
	ldr	lr, [r2, #16]
	mov	ip, #0
	mov	r2, #28672
	movt	ip, 6500
	movt	r2, 148
	cmp	lr, #3
	moveq	r2, ip
.L342:
	mov	ip, #0
	str	r2, [r1, #8]
	str	r2, [r1, #12]
	strb	ip, [r0, #152]
.L337:
	mov	r4, r0
	mvn	r0, #94
	mov	ip, #0
	mov	r2, #32
	strb	r0, [r3]
	ldrb	r0, [r4, #120]	@ zero_extendqisi2
	mov	r1, r5
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #144]
	str	ip, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r4, #148]
.L334:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L338:
	mov	ip, #0
	strb	ip, [r3, #1]
	ldrb	r1, [r0, #153]	@ zero_extendqisi2
	cmp	r1, ip
	strbne	r2, [r3, #2]
	mov	r2, #0
	strbne	ip, [r3, #3]
	mov	ip, #8
	strbeq	r1, [r3, #2]
	strbeq	r1, [r3, #3]
	mov	r1, #2
	strb	r2, [r3, #6]
	strb	r2, [r3, #7]
	str	ip, [r5, #4]
	strb	r1, [r0, #152]
	b	.L337
	.fnend
	.size	ecm_qc_do_notify, .-ecm_qc_do_notify
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_notify_complete, %function
ecm_qc_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r1, #32]
	ldr	r3, [r1, #44]
	cmn	r3, #108
	beq	.L349
	cmn	r3, #104
	beq	.L349
	str	r1, [r0, #148]
	b	ecm_qc_do_notify
.L349:
	mov	r3, #0
	str	r1, [r0, #148]
	strb	r3, [r0, #152]
	b	ecm_qc_do_notify
	.fnend
	.size	ecm_qc_notify_complete, .-ecm_qc_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_get_alt, %function
ecm_qc_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #120]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L358
	ldr	r3, [r0, #88]
	ldr	r0, [r3]
	adds	r0, r0, #0
	movne	r0, #1
	bx	lr
.L358:
	mov	r0, #0
	bx	lr
	.fnend
	.size	ecm_qc_get_alt, .-ecm_qc_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_open, %function
ecm_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r2, #1
	strb	r2, [r0, #152]
	strb	r2, [r0, #153]
	b	ecm_qc_do_notify
	.fnend
	.size	ecm_qc_open, .-ecm_qc_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_close, %function
ecm_qc_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r1, #0
	mov	r2, #1
	strb	r2, [r0, #152]
	strb	r1, [r0, #153]
	b	ecm_qc_do_notify
	.fnend
	.size	ecm_qc_close, .-ecm_qc_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_get_alt, %function
mbim_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #196]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L363
	ldrb	r3, [r0, #197]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L364
	ldrb	r0, [r0, #198]	@ zero_extendqisi2
	bx	lr
.L363:
	mov	r0, #0
	bx	lr
.L364:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	mbim_get_alt, .-mbim_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_do_notify, %function
ecm_do_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #168]
	cmp	r5, #0
	beq	.L365
	ldrb	r2, [r0, #172]	@ zero_extendqisi2
	ldr	r3, [r5]
	cmp	r2, #1
	beq	.L369
	bcc	.L365
	cmp	r2, #2
	bne	.L368
	ldr	ip, [r0, #20]
	mov	r2, #0
	mov	r1, #8
	mov	r4, #42
	mov	lr, #16
	ldr	ip, [ip, #24]
	strb	r4, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	strb	r1, [r3, #6]
	strb	r2, [r3, #7]
	ldr	r1, [r5]
	str	lr, [r5, #4]
	ldr	r2, [ip]
	ldr	ip, [r2, #20]
	cmp	ip, #4
	bls	.L373
	ldr	ip, [r2, #16]
	cmp	ip, #5
	beq	.L381
.L375:
	mov	lr, #0
	mov	r2, #28672
	movt	lr, 6500
	cmp	ip, #3
	movt	r2, 148
	moveq	r2, lr
.L374:
	mov	ip, #0
	str	r2, [r1, #8]
	str	r2, [r1, #12]
	strb	ip, [r0, #172]
.L368:
	mov	r4, r0
	mvn	r0, #94
	mov	ip, #0
	mov	r2, #32
	strb	r0, [r3]
	ldrb	r0, [r4, #148]	@ zero_extendqisi2
	mov	r1, r5
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #164]
	str	ip, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r4, #168]
.L365:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L369:
	mov	ip, #0
	strb	ip, [r3, #1]
	ldrb	r1, [r0, #173]	@ zero_extendqisi2
	cmp	r1, ip
	strbne	r2, [r3, #2]
	mov	r2, #0
	strbne	ip, [r3, #3]
	mov	ip, #8
	strbeq	r1, [r3, #2]
	strbeq	r1, [r3, #3]
	mov	r1, #2
	strb	r2, [r3, #6]
	strb	r2, [r3, #7]
	str	ip, [r5, #4]
	strb	r1, [r0, #172]
	b	.L368
.L373:
	cmp	ip, #2
	movls	r2, #28672
	movtls	r2, 148
	bls	.L374
	ldr	ip, [r2, #16]
	b	.L375
.L381:
	mov	r2, #0
	movt	r2, 13000
	b	.L374
	.fnend
	.size	ecm_do_notify, .-ecm_do_notify
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_notify_complete, %function
ecm_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r1, #32]
	ldr	r3, [r1, #44]
	cmn	r3, #108
	beq	.L384
	cmn	r3, #104
	beq	.L384
	str	r1, [r0, #168]
	b	ecm_do_notify
.L384:
	mov	r3, #0
	str	r1, [r0, #168]
	strb	r3, [r0, #172]
	b	ecm_do_notify
	.fnend
	.size	ecm_notify_complete, .-ecm_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_get_alt, %function
ecm_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #148]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L393
	ldr	r3, [r0, #88]
	ldr	r0, [r3]
	adds	r0, r0, #0
	movne	r0, #1
	bx	lr
.L393:
	mov	r0, #0
	bx	lr
	.fnend
	.size	ecm_get_alt, .-ecm_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_open, %function
ecm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r2, #1
	strb	r2, [r0, #172]
	strb	r2, [r0, #173]
	b	ecm_do_notify
	.fnend
	.size	ecm_open, .-ecm_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_close, %function
ecm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r1, #0
	mov	r2, #1
	strb	r2, [r0, #172]
	strb	r1, [r0, #173]
	b	ecm_do_notify
	.fnend
	.size	ecm_close, .-ecm_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ueth_change_mtu, %function
ueth_change_mtu:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #1152
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1156]
	mov	r1, r0
	cmp	r3, #0
	bne	.L398
	sub	r0, r6, #15
	movw	r2, #1499
	cmp	r0, r2
	bhi	.L399
	str	r6, [r4, #356]
	mov	r4, r3
.L397:
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L398:
	mvn	r4, #15
	b	.L397
.L399:
	mvn	r4, #33
	b	.L397
	.fnend
	.size	ueth_change_mtu, .-ueth_change_mtu
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ueth_qc_change_mtu, %function
ueth_qc_change_mtu:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #1152
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1156]
	mov	r1, r0
	cmp	r3, #0
	bne	.L403
	sub	r0, r6, #15
	movw	r2, #1499
	cmp	r0, r2
	bhi	.L404
	str	r6, [r4, #356]
	mov	r4, r3
.L402:
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L403:
	mvn	r4, #15
	b	.L402
.L404:
	mvn	r4, #33
	b	.L402
	.fnend
	.size	ueth_qc_change_mtu, .-ueth_qc_change_mtu
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_qc_start_xmit, %function
eth_qc_start_xmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	eth_qc_start_xmit, .-eth_qc_start_xmit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_get_alt, %function
f_audio_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldrb	r2, [r3, #16]	@ zero_extendqisi2
	cmp	r2, r1
	beq	.L411
	ldrb	r3, [r3, #17]	@ zero_extendqisi2
	cmp	r3, r1
	ldrbeq	r0, [r0, #249]	@ zero_extendqisi2
	movne	r0, #0
	bx	lr
.L411:
	ldrb	r0, [r0, #248]	@ zero_extendqisi2
	bx	lr
	.fnend
	.size	f_audio_get_alt, .-f_audio_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_disable, %function
f_audio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	strb	r2, [r3, #2224]
	bx	lr
	.fnend
	.size	f_audio_disable, .-f_audio_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	generic_set_cmd, %function
generic_set_cmd:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	add	r1, r1, #4
	str	r2, [r0, r1, lsl #2]
	mov	r0, #0
	bx	lr
	.fnend
	.size	generic_set_cmd, .-generic_set_cmd
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	generic_get_cmd, %function
generic_get_cmd:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	add	r1, r1, #4
	ldr	r0, [r0, r1, lsl #2]
	bx	lr
	.fnend
	.size	generic_get_cmd, .-generic_get_cmd
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_out_max_packet_size_store, %function
conn_gadget_out_max_packet_size_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r3
	bx	lr
	.fnend
	.size	conn_gadget_out_max_packet_size_store, .-conn_gadget_out_max_packet_size_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_do_notify, %function
ncm_do_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #168]
	cmp	r5, #0
	beq	.L416
	ldrb	r2, [r0, #172]	@ zero_extendqisi2
	ldr	r3, [r5]
	cmp	r2, #1
	beq	.L420
	bcc	.L416
	cmp	r2, #2
	bne	.L419
	ldr	ip, [r0, #20]
	mov	r2, #0
	mov	r1, #8
	mov	r4, #42
	mov	lr, #16
	ldr	ip, [ip, #24]
	strb	r4, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	strb	r1, [r3, #6]
	strb	r2, [r3, #7]
	ldr	r1, [r5]
	str	lr, [r5, #4]
	ldr	r2, [ip]
	ldr	ip, [r2, #20]
	cmp	ip, #2
	movls	r2, #28672
	movtls	r2, 148
	bls	.L424
	ldr	lr, [r2, #16]
	mov	ip, #0
	mov	r2, #28672
	movt	ip, 6500
	movt	r2, 148
	cmp	lr, #3
	moveq	r2, ip
.L424:
	mov	ip, #1
	str	r2, [r1, #8]
	str	r2, [r1, #12]
	strb	ip, [r0, #172]
.L419:
	mvn	r1, #94
	mov	r4, r0
	mov	r2, #0
	add	r6, r0, #188
	strb	r1, [r3]
	ldrb	r1, [r4, #148]	@ zero_extendqisi2
	mov	r0, r6
	strh	r1, [r3, #4]	@ unaligned
	str	r2, [r4, #168]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #164]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r7, #0
	strlt	r5, [r4, #168]
.L416:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L420:
	mov	ip, #0
	strb	ip, [r3, #1]
	ldrb	r1, [r0, #173]	@ zero_extendqisi2
	cmp	r1, ip
	strbne	r2, [r3, #2]
	mov	r2, #0
	strbeq	r1, [r3, #2]
	strbeq	r1, [r3, #3]
	mov	r1, #8
	strbne	ip, [r3, #3]
	strb	r2, [r3, #6]
	strb	r2, [r3, #7]
	str	r1, [r5, #4]
	strb	r2, [r0, #172]
	b	.L419
	.fnend
	.size	ncm_do_notify, .-ncm_do_notify
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_notify_complete, %function
ncm_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r4, [r1, #32]
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	add	r6, r4, #188
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r5, #44]
	cmn	r3, #108
	beq	.L431
	cmn	r3, #104
	beq	.L431
.L430:
	mov	r0, r4
	str	r5, [r4, #168]
	bl	ncm_do_notify
	ldrd	r4, [sp]
	mov	r0, r6
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L431:
	mov	r3, #0
	strb	r3, [r4, #172]
	b	.L430
	.fnend
	.size	ncm_notify_complete, .-ncm_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_ep0out_complete, %function
ncm_ep0out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r2, #0
	ldr	ip, [r1, #32]
	ldr	r3, [r1, #44]
	str	r2, [r1, #32]
	cmp	r3, r2
	beq	.L443
.L440:
	ldr	r3, [r0, #8]
	mov	r1, #1
	ldr	r3, [r3, #24]
	bx	r3
.L443:
	ldr	r3, [r1, #4]
	ldr	r2, [r1, #48]
	cmp	r2, r3
	bne	.L440
	ldr	r3, [r1]
	ldr	r3, [r3]	@ unaligned
	cmp	r3, #2048
	bcc	.L440
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	ldr	r2, [r2, #24]
	cmp	r2, r3
	bcc	.L440
	str	r3, [ip, #112]
	bx	lr
	.fnend
	.size	ncm_ep0out_complete, .-ncm_ep0out_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_get_alt, %function
ncm_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #148]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L446
	ldr	r3, [r0, #88]
	ldr	r0, [r3]
	adds	r0, r0, #0
	movne	r0, #1
	bx	lr
.L446:
	mov	r0, #0
	bx	lr
	.fnend
	.size	ncm_get_alt, .-ncm_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_open, %function
ncm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #188
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock
	mov	r3, #1
	mov	r2, #2
	mov	r0, r4
	strb	r2, [r4, #172]
	strb	r3, [r4, #173]
	bl	ncm_do_notify
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
	.fnend
	.size	ncm_open, .-ncm_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_close, %function
ncm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #188
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock
	mov	r3, #0
	mov	r2, #2
	mov	r0, r4
	strb	r2, [r4, #172]
	strb	r3, [r4, #173]
	bl	ncm_do_notify
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
	.fnend
	.size	ncm_close, .-ncm_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_function_unbind_config, %function
audio_source_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mvn	r2, #0
	str	r2, [r3]
	str	r2, [r3, #4]
	bx	lr
	.fnend
	.size	audio_source_function_unbind_config, .-audio_source_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	uasp_function_bind_config, %function
uasp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mvn	r0, #18
	bx	lr
	.fnend
	.size	uasp_function_bind_config, .-uasp_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_unbind_config, %function
android_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	ip, .L469
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	mov	r5, r0
	str	lr, [sp, #12]
	ldr	r3, [r3, #2228]
	ldr	r1, [r0, #24]
	cmp	r3, ip
	beq	.L454
	sub	r2, r3, #520
	ldr	r3, [r3, #-512]
	cmp	r1, r3
	bne	.L455
	b	.L454
.L456:
	ldr	r3, [r3, #-512]
	cmp	r1, r3
	beq	.L454
.L455:
	ldr	r3, [r2, #520]
	cmp	r3, ip
	sub	r2, r3, #520
	bne	.L456
.L454:
	ldr	r3, [r1]
	mov	r6, r5
	ldrb	r2, [r3, #378]	@ zero_extendqisi2
	cmp	r2, #0
	movne	r2, #0
	strbne	r2, [r3, #378]
	ldr	r4, [r6, #112]!
	cmp	r6, r4
	sub	r4, r4, #4
	beq	.L453
.L460:
	ldr	r0, [r4]
	mov	r1, r5
	ldr	r3, [r0, #44]
	cmp	r3, #0
	beq	.L459
	blx	r3
.L459:
	ldr	r4, [r4, #4]
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L460
.L453:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L470:
	.align	2
.L469:
	.word	.LANCHOR1+2228
	.fnend
	.size	android_unbind_config, .-android_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_buf_put, %function
gs_buf_put:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	ip, [r0]
	ldr	r3, [r0, #8]
	ldr	lr, [r0, #12]
	add	r3, r3, ip
	sub	r3, r3, lr
	sub	r3, r3, #1
	udiv	r2, r3, ip
	mls	r0, ip, r2, r3
	cmp	r5, r0
	bls	.L472
	cmp	r0, #0
	bne	.L480
.L471:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L480:
	mov	r5, r0
.L472:
	ldr	r7, [r4, #4]
	add	ip, r7, ip
	sub	r7, ip, lr
	cmp	r7, r5
	bcc	.L481
	mov	r1, r6
	mov	r0, lr
	mov	r2, r5
	bl	memcpy
	cmp	r7, r5
	bhi	.L482
	ldr	r3, [r4, #4]
	mov	r0, r5
	str	r3, [r4, #12]
	b	.L471
.L481:
	mov	r0, lr
	mov	r2, r7
	mov	r1, r6
	sub	r8, r5, r7
	bl	memcpy
	mov	r2, r8
	add	r1, r6, r7
	ldr	r0, [r4, #4]
	bl	memcpy
	ldr	r2, [r4, #4]
	mov	r0, r5
	add	r2, r2, r8
	str	r2, [r4, #12]
	b	.L471
.L482:
	ldr	r3, [r4, #12]
	mov	r0, r5
	add	r5, r3, r5
	str	r5, [r4, #12]
	b	.L471
	.fnend
	.size	gs_buf_put, .-gs_buf_put
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_put_char, %function
gs_put_char:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #272]
	.pad #8
	sub	sp, sp, #8
	add	r5, sp, #8
	strb	r1, [r5, #-1]!
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r1, r5
	mov	r2, #1
	add	r0, r4, #92
	bl	gs_buf_put
	mov	r5, r0
	mov	r1, r6
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_put_char, .-gs_put_char
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_set_endpoint_complete, %function
audio_set_endpoint_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r3, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	ldr	r5, [r1, #32]
	ldr	r4, [r1, #44]
	str	r3, [sp, #4]
	cmp	r4, r3
	bne	.L485
	ldr	r6, [r5, #272]
	cmp	r6, r3
	beq	.L485
	ldm	r1, {r1, r2}
	add	r0, sp, #4
	bl	memcpy
	ldr	r2, [sp, #4]
	mov	r0, r6
	ldrb	r1, [r5, #268]	@ zero_extendqisi2
	ldr	r3, [r6, #36]
	blx	r3
	str	r4, [r5, #272]
.L485:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	audio_set_endpoint_complete, .-audio_set_endpoint_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_function_init, %function
midi_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L497
	mov	r4, r0
	mov	r2, #8
	mov	r0, r3
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4, #4]
	beq	.L495
.L493:
	mvn	r2, #0
	mov	r0, #0
	str	r2, [r3]
	str	r2, [r3, #4]
.L491:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L497:
	mov	r2, #16
	mov	r3, r2
	str	r2, [r0, #4]
	b	.L493
.L495:
	mvn	r0, #11
	b	.L491
	.fnend
	.size	midi_function_init, .-midi_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_function_init, %function
ecm_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L505
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, #6
	mov	r4, r0
	movw	r1, #32976
	mov	r0, r3
	str	lr, [sp, #4]
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	mvneq	r3, #11
	movne	r3, #0
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, r3
	ldr	pc, [sp], #4
.L505:
	mov	r2, #16
	str	r2, [r0, #4]
	mov	r0, r3
	bx	lr
	.fnend
	.size	ecm_function_init, .-ecm_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_function_init, %function
rndis_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L513
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, #272
	mov	r4, r0
	movw	r1, #32976
	mov	r0, r3
	str	lr, [sp, #4]
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	mvneq	r3, #11
	movne	r3, #0
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, r3
	ldr	pc, [sp], #4
.L513:
	mov	r2, #16
	str	r2, [r0, #4]
	mov	r0, r3
	bx	lr
	.fnend
	.size	rndis_function_init, .-rndis_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_function_init, %function
audio_source_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L517
	mov	r2, #8
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L520
.L515:
	mvn	r2, #0
	mov	r0, #0
	str	r2, [r3]
	str	r2, [r3, #4]
	str	r3, [r4, #4]
.L514:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L517:
	mov	r3, #16
	b	.L515
.L520:
	mvn	r0, #11
	b	.L514
	.fnend
	.size	audio_source_function_init, .-audio_source_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_request_new, %function
adb_request_new:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	mov	r6, r1
	mov	r1, #208
	str	lr, [sp, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L521
	mov	r0, r6
	mov	r1, #208
	bl	__kmalloc
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L527
.L521:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L527:
	ldr	r2, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L521
	.fnend
	.size	adb_request_new, .-adb_request_new
	.set	conn_gadget_request_new,adb_request_new
	.set	acc_request_new,adb_request_new
	.set	mtp_request_new,adb_request_new
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_alloc_ep_req, %function
midi_alloc_ep_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	mov	r1, #32
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L528
	mov	r0, r5
	mov	r1, #32
	str	r5, [r4, #4]
	bl	__kmalloc
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L534
.L528:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L534:
	ldr	r2, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L528
	.fnend
	.size	midi_alloc_ep_req, .-midi_alloc_ep_req
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_unbind, %function
ccid_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	ldr	r3, [r0, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L536
	ldr	r0, [r1, #8]
	bl	kfree
.L536:
	ldr	r0, [r4, #16]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	ccid_function_unbind, .-ccid_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_alloc_ctrl_pkt, %function
rmnet_mux_alloc_ctrl_pkt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	orr	r6, r1, #32768
	str	lr, [sp, #12]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L543
	mov	r2, #16
	mov	r1, r6
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L538
.L539:
	mov	r1, r6
	mov	r0, r5
	bl	__kmalloc
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	strne	r5, [r4, #4]
	beq	.L549
.L538:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L543:
	mov	r4, #16
	b	.L539
.L549:
	mov	r0, r4
	mov	r4, r3
	bl	kfree
	b	.L538
	.fnend
	.size	rmnet_mux_alloc_ctrl_pkt, .-rmnet_mux_alloc_ctrl_pkt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_receive, %function
ghsuart_ctrl_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r0, #0
	str	r6, [sp, #8]
	moveq	r4, r5
	mov	r6, r1
	str	lr, [sp, #12]
	beq	.L551
	ldr	r3, [r5, #68]
	cmp	r3, #0
	beq	.L553
	ldr	r0, [r5, #12]
	blx	r3
	ldr	r3, [r5, #100]
	mov	r4, r0
	add	r3, r3, #1
	str	r3, [r5, #100]
.L551:
	mov	r0, r6
	bl	kfree
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L553:
	mov	r4, r3
	b	.L551
	.fnend
	.size	ghsuart_ctrl_receive, .-ghsuart_ctrl_receive
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_alloc_ctrl_pkt, %function
mbim_alloc_ctrl_pkt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L560
	mov	r2, #16
	orr	r1, r1, #32768
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L564
.L556:
	mov	r1, r6
	mov	r0, r5
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	strne	r5, [r4, #4]
	beq	.L565
.L555:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L560:
	mov	r4, #16
	b	.L556
.L564:
	mvn	r4, #11
	b	.L555
.L565:
	mov	r0, r4
	mvn	r4, #11
	bl	kfree
	b	.L555
	.fnend
	.size	mbim_alloc_ctrl_pkt, .-mbim_alloc_ctrl_pkt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_function_cleanup, %function
ecm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_function_cleanup, .-ecm_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_function_cleanup, %function
rndis_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	b	ecm_function_cleanup
	.fnend
	.size	rndis_function_cleanup, .-rndis_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_function_cleanup, %function
mass_storage_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	b	ecm_function_cleanup
	.fnend
	.size	mass_storage_function_cleanup, .-mass_storage_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_function_cleanup, %function
midi_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #4]
	b	kfree
	.fnend
	.size	midi_function_cleanup, .-midi_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_function_cleanup, %function
audio_source_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	b	midi_function_cleanup
	.fnend
	.size	audio_source_function_cleanup, .-audio_source_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_unbind, %function
frmnet_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L576
.L573:
	cmp	r3, #2
	bls	.L574
	ldr	r0, [r4, #8]
	bl	kfree
.L574:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r5, [r4, #136]
	ldr	r6, [r4, #140]
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [sp, #8]
	ldr	r0, [r4]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
.L576:
	mov	r5, r0
	ldr	r0, [r1, #12]
	bl	kfree
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L573
	.fnend
	.size	frmnet_unbind, .-frmnet_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	find_ep, %function
find_ep:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r5, #8]!
	cmp	r5, r4
	beq	.L580
	mov	r6, r1
	sub	r4, r4, #12
	b	.L579
.L586:
	ldr	r4, [r4, #12]
	cmp	r5, r4
	sub	r4, r4, #12
	beq	.L580
.L579:
	mov	r1, r6
	ldr	r0, [r4, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L586
.L577:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L580:
	mov	r4, #0
	b	.L577
	.fnend
	.size	find_ep, .-find_ep
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_notify_complete, %function
rmnet_smd_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r5, #84]
	cmn	r2, #104
	beq	.L589
	cmp	r2, #0
	mov	r6, r0
	mov	r4, r1
	beq	.L590
	cmn	r2, #108
	beq	.L589
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC0
	movt	r1, #:upper16:.LC0
	add	r0, r0, #32
	bl	dev_err
.L590:
	ldr	r3, [r5, #96]
	cmp	r3, r6
	beq	.L611
.L587:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L611:
	add	r6, r5, #172
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L587
	ldr	r0, [r5, #96]
	mov	r2, #32
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L587
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC1
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC1
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
.L589:
	mov	r3, #0
	str	r3, [r5, #172]
	b	.L587
	.fnend
	.size	rmnet_smd_notify_complete, .-rmnet_smd_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_notify_complete, %function
rmnet_sdio_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r4, #84]
	cmn	r2, #104
	beq	.L614
	cmp	r2, #0
	mov	r5, r1
	beq	.L615
	cmn	r2, #108
	beq	.L614
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC2
	movt	r1, #:upper16:.LC2
	add	r0, r0, #32
	bl	dev_err
.L615:
	ldr	r3, [r4, #324]
	tst	r3, #2
	beq	.L612
	add	r6, r4, #196
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L612
	ldr	r0, [r4, #96]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L636
.L612:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L614:
	mov	r3, #0
	str	r3, [r4, #196]
	b	.L612
.L636:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC3
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC3
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
	.fnend
	.size	rmnet_sdio_notify_complete, .-rmnet_sdio_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_setup, %function
ecm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r3, #17185
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	ip, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	ldrh	r2, [r1]	@ unaligned
	ldrh	lr, [r1, #4]	@ unaligned
	ldrh	r6, [r1, #2]	@ unaligned
	ldr	r5, [ip, #24]
	cmp	r2, r3
	ldrh	ip, [r1, #6]	@ unaligned
	ldr	r3, [r5, #4]
	bne	.L642
	cmp	ip, #0
	bne	.L642
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, lr
	bne	.L642
	strh	r6, [r0, #98]	@ movhi
	ldrb	r0, [r3, #26]	@ zero_extendqisi2
	mov	r4, r1
	str	ip, [r3, #4]
	mov	r1, r3
	mov	r2, #32
	bfi	r0, ip, #1, #1
	strb	r0, [r3, #26]
	ldr	r3, [r5]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	blt	.L645
.L637:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L645:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC4
	str	r6, [sp]
	movt	r1, #:upper16:.LC4
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	ldrb	r2, [r4]	@ zero_extendqisi2
	add	r0, r0, #32
	bl	dev_err
	b	.L637
.L642:
	mvn	r6, #94
	b	.L637
	.fnend
	.size	ecm_setup, .-ecm_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_notify_complete, %function
rmnet_mux_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r4, #84]
	cmn	r2, #104
	beq	.L648
	cmp	r2, #0
	mov	r5, r1
	beq	.L649
	cmn	r2, #108
	beq	.L648
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC5
	movt	r1, #:upper16:.LC5
	add	r0, r0, #32
	bl	dev_err
.L649:
	add	r6, r4, #376
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L646
	ldr	r0, [r4, #96]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L667
.L646:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L667:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC3
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC3
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
.L648:
	mov	r3, #0
	str	r3, [r4, #376]
	b	.L646
	.fnend
	.size	rmnet_mux_notify_complete, .-rmnet_mux_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_suspend, %function
composite_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r0
	add	r0, r0, #32
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	ldr	r2, [r0, #12]
	mov	r5, r0
	cmp	r2, #0
	beq	.L669
	mov	r3, r2
	ldr	r4, [r3, #36]!
	cmp	r4, r3
	sub	r4, r4, #72
	beq	.L669
.L671:
	ldr	r3, [r4, #56]
	mov	r0, r4
	cmp	r3, #0
	beq	.L670
	blx	r3
	ldr	r2, [r5, #12]
.L670:
	ldr	r4, [r4, #72]
	add	r3, r2, #36
	cmp	r4, r3
	sub	r4, r4, #72
	bne	.L671
.L669:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2236]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L672
	mov	r0, r5
	blx	r3
.L672:
	ldrb	r3, [r5, #16]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #16]
	ldr	r3, [r6]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L668
	mov	r0, r6
	ldrd	r4, [sp]
	mov	r1, #2
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	bx	r3
.L668:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	composite_suspend, .-composite_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_resume, %function
composite_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r0
	add	r0, r0, #32
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	movw	r3, #:lower16:.LANCHOR1
	mov	r5, r0
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2236]
	ldr	r3, [r3, #40]
	cmp	r3, #0
	beq	.L686
	blx	r3
.L686:
	ldr	r2, [r5, #12]
	cmp	r2, #0
	beq	.L688
	mov	r3, r2
	ldr	r4, [r3, #36]!
	cmp	r3, r4
	sub	r4, r4, #72
	beq	.L689
.L691:
	ldr	r3, [r4, #60]
	mov	r0, r4
	cmp	r3, #0
	beq	.L690
	blx	r3
	ldr	r2, [r5, #12]
.L690:
	ldr	r4, [r4, #72]
	add	r3, r2, #36
	cmp	r4, r3
	sub	r4, r4, #72
	bne	.L691
.L689:
	ldrb	r3, [r2, #23]	@ zero_extendqisi2
	cmp	r3, #0
	ldrne	r1, [r5, #64]
	moveq	r1, #500
	mulne	r1, r1, r3
	ldr	r3, [r6]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L688
	mov	r0, r6
	blx	r3
.L688:
	ldrb	r3, [r5, #16]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r5, #16]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	composite_resume, .-composite_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_ethaddr_store, %function
rndis_ethaddr_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	movw	r5, #52429
	str	r6, [sp, #8]
	movt	r5, 52428
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	ldr	ip, [r0, #4]
	mov	r2, #0
	mov	r0, #2
	mov	r1, r2
	ldr	r3, .L713
	str	r0, [ip]
	strh	r2, [ip, #4]	@ movhi
	b	.L707
.L708:
	sub	r2, r1, r2
	add	r1, r1, #1
	add	r2, r2, #1
	cmp	r1, #256
	ldrb	lr, [ip, r2]	@ zero_extendqisi2
	eor	r0, r0, lr
	strb	r0, [ip, r2]
	beq	.L711
.L707:
	umull	r0, r2, r5, r1
	ldrb	r0, [r3], #1	@ zero_extendqisi2
	lsr	r2, r2, #2
	cmp	r0, #0
	add	r2, r2, r2, lsl #2
	bne	.L708
.L711:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L714:
	.align	2
.L713:
	.word	.LANCHOR1+2240
	.fnend
	.size	rndis_ethaddr_store, .-rndis_ethaddr_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	free_reqs, %function
free_reqs:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r7, #100]!
	cmp	r4, r7
	ldr	r5, [r4]
	bne	.L717
	b	.L716
.L720:
	mov	r5, r3
.L717:
	mov	r0, r4
	sub	r4, r4, #36
	bl	list_del
	ldr	r0, [r6, #88]
	mov	r1, r4
	mov	r4, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r5
	ldr	r3, [r5]
	bne	.L720
.L716:
	mov	r7, r6
	ldr	r4, [r7, #92]!
	cmp	r4, r7
	ldr	r5, [r4]
	bne	.L719
	b	.L715
.L721:
	mov	r5, r3
.L719:
	mov	r0, r4
	sub	r4, r4, #36
	bl	list_del
	ldr	r0, [r6, #84]
	mov	r1, r4
	mov	r4, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r5
	ldr	r3, [r5]
	bne	.L721
.L715:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	free_reqs, .-free_reqs
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_unbind, %function
diag_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L731
	cmp	r3, #2
	bhi	.L732
.L725:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r3, [r4, #124]
	cmp	r3, #0
	beq	.L726
	ldr	r2, [r3, #20]
	cmp	r2, r4
	moveq	r2, #0
	streq	r2, [r3, #20]
.L726:
	add	r0, r4, #140
	add	r5, r4, #108
	bl	list_del
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r0, r4
	bl	free_reqs
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
.L731:
	mov	r5, r0
	ldr	r0, [r1, #12]
	bl	kfree
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L725
.L732:
	ldr	r0, [r4, #8]
	bl	kfree
	b	.L725
	.fnend
	.size	diag_function_unbind, .-diag_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_free_buf, %function
rmnet_smd_free_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r3, #0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	mov	r8, r0
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	str	r3, [r0, #424]
	str	r3, [r0, #428]
	str	r3, [r0, #432]
	str	r3, [r0, #436]
	str	r3, [r0, #440]
	str	r3, [r0, #444]
	str	r3, [r0, #448]
	str	r3, [r0, #452]
	ldr	r4, [r8, #140]!
	cmp	r4, r8
	ldr	r5, [r4]
	beq	.L734
.L735:
	mov	r0, r4
	sub	r9, r4, #36
	bl	list_del
	ldr	r7, [r6, #88]
	ldr	r0, [r4, #-36]
	mov	r4, r5
	bl	kfree
	mov	r1, r9
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r8, r5
	ldr	r5, [r5]
	bne	.L735
.L734:
	mov	r8, r6
	ldr	r4, [r8, #148]!
	cmp	r4, r8
	ldr	r5, [r4]
	beq	.L736
.L737:
	mov	r0, r4
	sub	r9, r4, #36
	bl	list_del
	ldr	r7, [r6, #92]
	ldr	r0, [r4, #-36]
	mov	r4, r5
	bl	kfree
	mov	r1, r9
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r8, r5
	ldr	r5, [r5]
	bne	.L737
.L736:
	mov	r8, r6
	ldr	r4, [r8, #108]!
	cmp	r4, r8
	ldr	r5, [r4]
	beq	.L738
.L739:
	mov	r0, r4
	sub	r7, r4, #8
	bl	list_del
	ldr	r0, [r4, #-8]
	mov	r4, r5
	bl	kfree
	mov	r0, r7
	bl	kfree
	cmp	r8, r5
	ldr	r5, [r5]
	bne	.L739
.L738:
	mov	r8, r6
	ldr	r4, [r8, #116]!
	cmp	r4, r8
	ldr	r5, [r4]
	beq	.L740
.L741:
	mov	r0, r4
	sub	r7, r4, #8
	bl	list_del
	ldr	r0, [r4, #-8]
	mov	r4, r5
	bl	kfree
	mov	r0, r7
	bl	kfree
	cmp	r8, r5
	ldr	r5, [r5]
	bne	.L741
.L740:
	ldrd	r4, [r6, #96]
	ldr	r0, [r5]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	rmnet_smd_free_buf, .-rmnet_smd_free_buf
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_control_rx_work, %function
rmnet_sdio_control_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #32
	strd	r8, [sp, #16]
	sub	r8, r0, #112
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r9, [r0, #-136]
	b	.L750
.L753:
	bl	list_del
	ldr	r3, [r5, #-104]
	mov	r1, r10
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r5, #-104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-4]
	cmn	r3, #19
	bne	.L752
	ldr	r3, [r5, #152]
	add	r3, r3, #1
	str	r3, [r5, #152]
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r7
	bl	kfree
.L750:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #-112]
	mov	r10, r0
	cmp	r4, r8
	mov	r0, r4
	sub	r7, r4, #8
	bne	.L753
.L748:
	mov	r1, r10
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L752:
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC6
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC6
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	r0, r0, #32
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	dev_err
	.fnend
	.size	rmnet_sdio_control_rx_work, .-rmnet_sdio_control_rx_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_req_get, %function
audio_req_get:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #108
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r0, r4
	ldr	r4, [r0, #96]!
	cmp	r4, r0
	beq	.L756
	mov	r0, r4
	sub	r4, r4, #36
	bl	list_del
.L755:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L756:
	mov	r4, #0
	b	.L755
	.fnend
	.size	audio_req_get, .-audio_req_get
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_free_requests, %function
gbam_free_requests:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1]
	cmp	r1, r4
	beq	.L758
	mov	r5, r1
	mov	r6, r0
.L760:
	mov	r0, r4
	sub	r4, r4, #36
	bl	list_del
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r4, [r5]
	cmp	r5, r4
	bne	.L760
.L758:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gbam_free_requests, .-gbam_free_requests
	.set	ghsuart_data_free_requests,gbam_free_requests
	.set	ghsic_data_free_requests,gbam_free_requests
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	req_get, %function
req_get:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #88
	mov	r4, r1
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4]
	mov	r6, r0
	cmp	r4, r3
	beq	.L765
	mov	r0, r3
	sub	r4, r3, #36
	bl	list_del
.L764:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L765:
	mov	r4, #0
	b	.L764
	.fnend
	.size	req_get, .-req_get
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_req_get, %function
mtp_req_get:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #88
	mov	r4, r1
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4]
	mov	r6, r0
	cmp	r4, r3
	beq	.L769
	mov	r0, r3
	sub	r4, r3, #36
	bl	list_del
.L768:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L769:
	mov	r4, #0
	b	.L768
	.fnend
	.size	mtp_req_get, .-mtp_req_get
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_req_get, %function
ccid_req_get:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #92
	mov	r4, r1
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4]
	mov	r6, r0
	cmp	r4, r3
	beq	.L773
	mov	r0, r3
	sub	r4, r3, #36
	bl	list_del
.L772:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L773:
	mov	r4, #0
	b	.L772
	.fnend
	.size	ccid_req_get, .-ccid_req_get
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_purge_responses, %function
frmnet_purge_responses:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	add	r7, r0, #144
	strd	r8, [sp, #16]
	add	r8, r0, #132
	mov	r0, r8
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r6, #144]
	mov	r9, r0
	cmp	r7, r4
	beq	.L776
.L777:
	mov	r0, r4
	sub	r5, r4, #8
	bl	list_del
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r5
	bl	kfree
	ldr	r4, [r6, #144]
	cmp	r4, r7
	bne	.L777
.L776:
	mov	r3, #0
	mov	r1, r9
	mov	r0, r8
	str	r3, [r6, #152]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	frmnet_purge_responses, .-frmnet_purge_responses
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_ctrl_response_available, %function
frmnet_ctrl_response_available:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r5, r0, #132
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0, #140]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #120]
	cmp	r6, #0
	clz	r3, r3
	lsr	r3, r3, #5
	moveq	r3, #1
	cmp	r3, #0
	bne	.L789
	ldr	r2, [r6]
	cmp	r2, #0
	beq	.L789
	ldr	r2, [r4, #152]
	add	r2, r2, #1
	cmp	r2, #1
	str	r2, [r4, #152]
	beq	.L783
.L789:
	mov	r1, r0
.L788:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L783:
	ldr	ip, [r6]
	mvn	lr, #94
	mov	r1, r0
	mov	r0, r5
	strb	lr, [ip]
	strb	r2, [ip, #1]
	strb	r3, [ip, #2]
	strb	r3, [ip, #3]
	ldrh	r2, [r4, #112]
	strh	r2, [ip, #4]	@ unaligned
	strb	r3, [ip, #6]
	strb	r3, [ip, #7]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r0, [r4, #136]
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L790
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L790:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r3, r4
	mov	r7, r0
	ldr	r6, [r3, #144]!
	cmp	r6, r3
	beq	.L785
	ldr	r3, [r4, #152]
	cmp	r3, #0
	beq	.L785
	sub	r3, r3, #1
	mov	r0, r6
	str	r3, [r4, #152]
	sub	r4, r6, #8
	bl	list_del
	ldr	r0, [r6, #-8]
	bl	kfree
	mov	r0, r4
	bl	kfree
.L785:
	mov	r1, r7
	b	.L788
	.fnend
	.size	frmnet_ctrl_response_available, .-frmnet_ctrl_response_available
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_setup, %function
rmnet_mux_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r2, [r0, #20]
	ldr	r3, [r0, #372]
	ldrh	r8, [r1, #2]	@ unaligned
	ldrh	r6, [r1, #6]	@ unaligned
	ldr	r7, [r2, #24]
	cmp	r3, #0
	ldr	r5, [r7, #4]
	beq	.L799
	ldrh	r3, [r1]	@ unaligned
	movw	r2, #8482
	mov	r4, r0
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r2
	beq	.L793
	movw	r2, #41217
	cmp	r3, r2
	beq	.L794
	cmp	r3, #8448
	beq	.L804
.L801:
	mvn	r4, #94
.L791:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L794:
	cmp	r8, #0
	bne	.L801
	add	r8, r0, #368
	mov	r0, r8
	bl	_raw_spin_lock
	mov	r3, r4
	ldr	r9, [r3, #340]!
	cmp	r9, r3
	beq	.L805
	mov	r0, r9
	sub	r10, r9, #8
	bl	list_del
	ldr	r3, [r4, #348]
	mov	r0, r8
	sub	r3, r3, #1
	str	r3, [r4, #348]
	bl	_raw_spin_unlock
	ldmdb	r9, {r1, r8}
	ldr	r0, [r5]
	cmp	r6, r8
	movcc	r8, r6
	mov	r2, r8
	bl	memcpy
	movw	r3, #:lower16:rmnet_mux_response_complete
	str	r4, [r5, #32]
	movt	r3, #:upper16:rmnet_mux_response_complete
	str	r3, [r5, #28]
	ldr	r0, [r9, #-8]
	bl	kfree
	mov	r0, r10
	bl	kfree
	ldr	r3, [r4, #416]
	cmp	r8, r6
	movge	r6, #0
	movlt	r6, #1
	add	r3, r3, #1
	str	r3, [r4, #416]
.L796:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	r8, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfi	r3, r6, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L791
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC7
	mov	r2, r4
	movt	r1, #:upper16:.LC7
	add	r0, r0, #32
	bl	dev_err
	b	.L791
.L804:
	movw	r3, #:lower16:rmnet_mux_command_complete
	mov	r8, r6
	str	r0, [r5, #32]
	movt	r3, #:upper16:rmnet_mux_command_complete
	mov	r6, #0
	str	r3, [r5, #28]
	b	.L796
.L793:
	ldr	r3, [r0, #352]
	adds	r6, r6, #0
	movne	r6, #1
	ands	r8, r8, #1
	movne	r8, #0
	orrne	r3, r3, #2
	biceq	r3, r3, #2
	str	r3, [r0, #352]
	b	.L796
.L799:
	mvn	r4, #106
	b	.L791
.L805:
	mov	r0, r8
	mvn	r4, #94
	bl	_raw_spin_unlock
	b	.L791
	.fnend
	.size	rmnet_mux_setup, .-rmnet_mux_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_free_requests, %function
gs_free_requests:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	mov	r8, r2
	str	lr, [sp, #20]
	b	.L808
.L809:
	bl	list_del
	ldr	r0, [r4, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r8, #0
	bne	.L813
.L808:
	ldr	r4, [r5]
	cmp	r5, r4
	mov	r0, r4
	sub	r7, r4, #36
	bne	.L809
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L813:
	ldr	r3, [r8]
	sub	r3, r3, #1
	str	r3, [r8]
	b	.L808
	.fnend
	.size	gs_free_requests, .-gs_free_requests
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_write_complete, %function
diag_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0]
	ldr	r6, [r1, #32]
	ldr	r2, [r5, #136]
	sub	ip, r2, #1
	str	ip, [r5, #136]
	ldr	ip, [r1, #44]
	cmp	ip, #0
	bne	.L815
	ldrh	r0, [r0, #20]
	ldr	ip, [r1, #4]
	cmp	ip, r0
	bcc	.L815
	udiv	lr, ip, r0
	mls	r0, r0, lr, ip
	cmp	r0, #0
	bne	.L815
	str	r2, [r5, #136]
	ldr	ip, [r1, #48]
	mov	r2, #32
	str	r0, [r1, #4]
	str	ip, [r6, #8]
	ldr	r3, [r1, #44]
	str	r3, [r6, #12]
	ldr	r0, [r5, #88]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	r3, [r0, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #16]
	bx	r3
.L815:
	add	r7, r5, #108
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	add	r2, r5, #100
	ldr	r1, [r5, #104]
	add	r0, r4, #36
	bl	__list_add
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L828
.L816:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #124]
	cmp	r3, #0
	beq	.L814
	ldr	lr, [r3, #12]
	cmp	lr, #0
	beq	.L814
	mov	r2, r6
	ldr	r0, [r3, #16]
	mov	r1, #2
	ldrd	r4, [sp]
	mov	r3, lr
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L828:
	ldr	r3, [r4, #48]
	str	r3, [r6, #8]
	ldr	r3, [r4, #44]
	str	r3, [r6, #12]
	b	.L816
.L814:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	diag_write_complete, .-diag_write_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_read_complete, %function
diag_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r1, #32]
	ldr	r3, [r1, #48]
	ldr	r4, [r0]
	str	r3, [r6, #8]
	ldr	r3, [r1, #44]
	add	r7, r4, #108
	mov	r0, r7
	str	r3, [r6, #12]
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	add	r2, r4, #92
	ldr	r1, [r4, #96]
	add	r0, r5, #36
	bl	__list_add
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r4, #124]
	ldr	r3, [r4, #132]
	cmp	r1, #0
	add	r3, r3, #1
	str	r3, [r4, #132]
	beq	.L829
	ldr	r3, [r1, #12]
	cmp	r3, #0
	beq	.L829
	mov	r2, r6
	ldr	r0, [r1, #16]
	mov	r1, #3
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L829:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	diag_read_complete, .-diag_read_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_ctrl_write_complete, %function
qdss_ctrl_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0]
	ldr	r2, [r1, #44]
	ldr	r6, [r1, #32]
	cmp	r2, #0
	bne	.L839
	ldrh	r2, [r0, #20]
	ldr	r0, [r1, #4]
	cmp	r0, r2
	bcc	.L839
	udiv	ip, r0, r2
	mls	r2, r2, ip, r0
	cmp	r2, #0
	bne	.L839
	ldr	r0, [r1, #48]
	str	r2, [r1, #4]
	mov	r2, #32
	str	r0, [r6, #8]
	ldr	r3, [r1, #44]
	str	r3, [r6, #12]
	ldr	r0, [r5, #104]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	r3, [r0, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #16]
	bx	r3
.L839:
	add	r7, r5, #188
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	add	r2, r5, #148
	ldr	r1, [r5, #152]
	add	r0, r4, #36
	bl	__list_add
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L846
.L840:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	lr, [r5, #124]
	cmp	lr, #0
	beq	.L838
	mov	r2, r6
	mov	ip, lr
	ldr	r0, [r5, #128]
	ldrd	r4, [sp]
	mov	r3, #0
	mov	r1, #4
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	ip	@ indirect register sibling call
.L846:
	ldr	r3, [r4, #48]
	str	r3, [r6, #8]
	ldr	r3, [r4, #44]
	str	r3, [r6, #12]
	b	.L840
.L838:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	qdss_ctrl_write_complete, .-qdss_ctrl_write_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_ctrl_read_complete, %function
qdss_ctrl_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r1, #32]
	ldr	r3, [r1, #48]
	ldr	r4, [r0]
	str	r3, [r6, #8]
	ldr	r3, [r1, #44]
	add	r7, r4, #188
	mov	r0, r7
	str	r3, [r6, #12]
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	add	r2, r4, #140
	ldr	r1, [r4, #144]
	add	r0, r5, #36
	bl	__list_add
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	lr, [r4, #124]
	cmp	lr, #0
	beq	.L847
	mov	r2, r6
	mov	ip, lr
	ldr	r0, [r4, #128]
	ldrd	r4, [sp]
	mov	r3, #0
	mov	r1, #2
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	ip	@ indirect register sibling call
.L847:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	qdss_ctrl_read_complete, .-qdss_ctrl_read_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_req_put, %function
audio_req_put:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r5, r0, #108
	mov	r4, r0
	mov	r0, r5
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	ldr	r1, [r4, #100]
	add	r0, r7, #36
	add	r2, r4, #96
	bl	__list_add
	ldr	r8, [sp, #16]
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	audio_req_put, .-audio_req_put
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_req_put, %function
ccid_req_put:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r4, r0, #92
	mov	r0, r4
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	mov	r6, r2
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	ldr	r1, [r7, #4]
	add	r0, r6, #36
	mov	r2, r7
	bl	__list_add
	ldrd	r6, [sp, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	ccid_req_put, .-ccid_req_put
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_req_put, %function
mtp_req_put:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r4, r0, #88
	mov	r0, r4
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	mov	r6, r2
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	ldr	r1, [r7, #4]
	add	r0, r6, #36
	mov	r2, r7
	bl	__list_add
	ldrd	r6, [sp, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	mtp_req_put, .-mtp_req_put
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	req_put, %function
req_put:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r4, r0, #88
	mov	r0, r4
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	mov	r6, r2
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	ldr	r1, [r7, #4]
	add	r0, r6, #36
	mov	r2, r7
	bl	__list_add
	ldrd	r6, [sp, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	req_put, .-req_put
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_start_rx, %function
rmnet_smd_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #164
	strd	r8, [sp, #16]
	add	r9, r0, #148
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r10, [r0, #84]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	b	.L859
.L861:
	bl	list_del
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #88]
	mov	r1, r8
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	r8, #0
	mov	r7, r0
	bne	.L865
.L859:
	ldr	r4, [r5, #148]
	cmp	r9, r4
	mov	r0, r4
	sub	r8, r4, #36
	bne	.L861
.L860:
	mov	r1, r7
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L865:
	ldr	r0, [r10]
	movw	r1, #:lower16:.LC8
	mov	r2, r8
	movt	r1, #:upper16:.LC8
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r9
	mov	r0, r4
	ldr	r1, [r5, #152]
	bl	__list_add
	b	.L860
	.fnend
	.size	rmnet_smd_start_rx, .-rmnet_smd_start_rx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	prealloc, %function
prealloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #0
	beq	.L892
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	sub	r2, r2, #1
	strd	r6, [sp, #8]
	mov	r6, r1
	mov	r7, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0]
	cmp	r0, r4
	sub	r4, r4, #36
	bne	.L868
	b	.L895
.L871:
	cmn	r5, #1
	mov	r2, r5
	beq	.L870
.L868:
	ldr	r4, [r4, #36]
	sub	r5, r2, #1
	cmp	r7, r4
	sub	r4, r4, #36
	bne	.L871
	ldr	r3, [r6, #28]
	cmp	r2, #0
	ldrb	r4, [r3, #2]	@ zero_extendqisi2
	lsr	r4, r4, #7
	beq	.L872
.L878:
	movw	r9, #:lower16:rx_complete
	movw	r8, #:lower16:tx_complete
	movt	r9, #:upper16:rx_complete
	movt	r8, #:upper16:tx_complete
	b	.L877
.L873:
	cmp	r4, #0
	moveq	r2, r9
	movne	r2, r8
	str	r2, [r3, #28]
	ldr	r2, [r7]
	bl	__list_add
	cmp	r5, #0
	sub	r5, r5, #1
	beq	.L872
.L877:
	ldr	r3, [r6, #8]
	mov	r1, #32
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r1, r7
	add	r0, r3, #36
	bne	.L873
	ldr	r3, [r7]
	cmp	r7, r3
	beq	.L867
.L872:
	mov	r0, #0
.L866:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L870:
	mov	r0, r4
	ldr	r5, [r0, #36]!
	bl	list_del
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	sub	r4, r5, #36
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r5
	bne	.L870
	b	.L872
.L895:
	ldr	r3, [r1, #28]
	mov	r5, r2
	ldrb	r4, [r3, #2]	@ zero_extendqisi2
	lsr	r4, r4, #7
	b	.L878
.L867:
	mvn	r0, #11
	b	.L866
.L892:
	mvn	r0, #11
	bx	lr
	.fnend
	.size	prealloc, .-prealloc
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_start_rx, %function
rmnet_mux_smd_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #368
	strd	r8, [sp, #16]
	add	r9, r0, #112
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r10, [r0, #84]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	b	.L897
.L899:
	bl	list_del
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #88]
	mov	r1, r8
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	r8, #0
	mov	r7, r0
	bne	.L903
.L897:
	ldr	r4, [r5, #112]
	cmp	r9, r4
	mov	r0, r4
	sub	r8, r4, #36
	bne	.L899
.L898:
	mov	r1, r7
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L903:
	ldr	r0, [r10]
	movw	r1, #:lower16:.LC8
	mov	r2, r8
	movt	r1, #:upper16:.LC8
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r9
	mov	r0, r4
	ldr	r1, [r5, #116]
	bl	__list_add
	b	.L898
	.fnend
	.size	rmnet_mux_smd_start_rx, .-rmnet_mux_smd_start_rx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_start_rx, %function
gs_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r8, r0, #32
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #4]
	.pad #4
	sub	sp, sp, #4
	ldr	r5, [r0, #32]
	ldr	r3, [r0, #40]
	ldr	r6, [r2, #92]
	cmp	r5, r8
	beq	.L905
	ldr	r2, [r0, #8]
	cmp	r2, #0
	beq	.L905
	cmp	r3, #7
	bgt	.L905
	mov	r4, r0
	mov	r9, #4096
	b	.L906
.L907:
	cmp	r10, #0
	ldr	r5, [r4, #32]
	bne	.L917
	ldr	r3, [r4, #40]
	cmp	r8, r5
	add	r3, r3, #1
	str	r3, [r4, #40]
	beq	.L905
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L905
	cmp	r3, #7
	bgt	.L905
.L906:
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del
	mov	r0, r4
	str	r9, [r5, #-32]
	mov	fp, r5
	bl	_raw_spin_unlock
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r2, #32
	mov	r0, r6
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r4
	bl	_raw_spin_lock
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L907
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #40]
.L905:
	mov	r0, r3
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L917:
	mov	r2, r5
	mov	r1, r8
	mov	r0, fp
	bl	__list_add
	ldr	r3, [r4, #40]
	b	.L905
	.fnend
	.size	gs_start_rx, .-gs_start_rx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_hw_params, %function
audio_pcm_hw_params:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #284]
	movw	r2, #44100
	ldr	ip, [r1, #296]
	cmp	r3, #2
	cmpeq	ip, r2
	bne	.L924
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r5, r0, #176
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	ip, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [ip]
	ldr	lr, [r3, #496]
	ldrd	r2, [lr, #248]
	orrs	r3, r2, r3
	beq	.L934
.L920:
	mov	r3, #2
	mov	lr, #0
	add	r2, r0, #188
	str	r3, [r0, #176]
	ldr	r3, [ip]
	ldr	r3, [r3, #496]
	str	r3, [r0, #180]
	str	lr, [r0, #196]
	ldr	r3, [ip]
	ldr	lr, [r1, #380]
	ldr	r3, [r3, #496]
	cmp	r3, #0
	beq	.L921
	ldr	ip, [r3, #276]
	cmp	ip, #0
	beq	.L921
.L922:
	mov	r6, #0
	mov	r4, r0
	mov	r7, r1
	mov	r0, r3
	str	r6, [sp]
	mov	r1, lr
	mov	r3, #208
	ldr	r8, [ip]
	blx	r8
	cmp	r0, r6
	str	r0, [r4, #184]
	beq	.L926
	ldr	r2, [r7, #380]
	cmp	r5, r6
	ldr	r3, [r4, #212]
	str	r2, [r4, #192]
	beq	.L923
	str	r5, [r3, #552]
	ldr	r2, [r4, #184]
	mov	r0, r6
	str	r2, [r3, #540]
	ldr	r2, [r4, #188]
	str	r2, [r3, #544]
	ldr	r2, [r4, #192]
	str	r2, [r3, #548]
.L918:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L934:
	mvn	r2, #0
	mov	r3, #0
	strd	r2, [lr, #248]
	ldr	ip, [r0]
	b	.L920
.L921:
	movw	ip, #:lower16:arm_dma_ops
	movt	ip, #:upper16:arm_dma_ops
	cmp	ip, #0
	bne	.L922
	.syntax divided
@ 175 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/dma-mapping.h" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/dma-mapping.h"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 175, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L923:
	mov	r0, r5
	str	r5, [r3, #540]
	str	r5, [r3, #544]
	str	r5, [r3, #548]
	str	r5, [r3, #552]
	b	.L918
.L924:
	mvn	r0, #21
	bx	lr
.L926:
	mvn	r0, #11
	b	.L918
	.fnend
	.size	audio_pcm_hw_params, .-audio_pcm_hw_params
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_eps_disable, %function
ffs_func_eps_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r7, #0
	strd	r8, [sp, #16]
	mov	r9, r0
	mov	r8, #1
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #8]
	ldr	r4, [r0, #12]
	add	r0, r3, #24
	ldr	r5, [r3, #208]
	ldrh	r6, [r3, #180]
	add	r4, r4, #28
	bl	_raw_spin_lock_irqsave
	mov	r10, r0
.L937:
	str	r8, [r5, #32]
	ldr	r3, [r4, #-28]
	subs	r0, r3, #0
	beq	.L936
	ldr	r3, [r3, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #-28]
	str	r7, [r3]
.L936:
	subs	r6, r6, #1
	str	r7, [r5, #40]
	add	r4, r4, #28
	add	r5, r5, #56
	bne	.L937
	ldr	r0, [r9, #8]
	mov	r1, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	r0, r0, #24
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	ffs_func_eps_disable, .-ffs_func_eps_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_do_descs, %function
ffs_do_descs:
	.fnstart
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	subs	r9, r0, #0
	mov	r8, r3
	str	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #28]
	beq	.L957
	mov	r4, r1
	mov	r7, r2
	mov	r6, #0
.L954:
	mov	r2, r4
	mov	r1, r6
	ldr	r3, [sp, #32]
	mov	r0, #0
	blx	r8
	cmp	r0, #0
	blt	.L943
	cmp	r4, #0
	beq	.L956
	cmp	r7, #1
	bls	.L965
	ldrb	r5, [r4]	@ zero_extendqisi2
	cmp	r5, r7
	bhi	.L965
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	sub	r3, r3, #4
	cmp	r3, #44
	ldrls	pc, [pc, r3, asl #2]
	b	.L965
.L948:
	.word	.L947
	.word	.L949
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L950
	.word	.L965
	.word	.L951
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L965
	.word	.L952
.L952:
	cmp	r5, #6
	beq	.L955
.L965:
	mvn	r0, #21
.L943:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L950:
	cmp	r5, #5
	bne	.L965
.L955:
	add	r6, r6, #1
	sub	r7, r7, r5
	cmp	r9, r6
	add	r4, r4, r5
	bne	.L954
.L944:
	mov	r2, #0
	mov	r1, r9
	ldr	r3, [sp, #32]
	mov	r0, r2
	blx	r8
	cmp	r0, #0
	blt	.L943
.L956:
	sub	r0, r10, r7
	b	.L943
.L949:
	sub	r3, r5, #7
	tst	r3, #253
	bne	.L965
	ldrb	r3, [r4, #2]	@ zero_extendqisi2
	tst	r3, #15
	beq	.L965
	mov	r2, r4
	add	r1, r4, #2
	ldr	r3, [sp, #32]
	mov	r0, #3
	blx	r8
	cmp	r0, #0
	bge	.L955
	b	.L943
.L947:
	cmp	r5, #9
	bne	.L965
	mov	r2, r4
	add	r1, r4, #2
	ldr	r3, [sp, #32]
	mov	r0, #1
	blx	r8
	cmp	r0, #0
	blt	.L943
	ldrb	r3, [r4, #8]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L955
	mov	r2, r4
	add	r1, r4, #8
	ldr	r3, [sp, #32]
	mov	r0, #2
	blx	r8
	cmp	r0, #0
	bge	.L955
	b	.L943
.L951:
	cmp	r5, #8
	bne	.L965
	ldrb	r3, [r4, #7]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L955
	mov	r2, r4
	add	r1, r4, #7
	ldr	r3, [sp, #32]
	mov	r0, #2
	blx	r8
	cmp	r0, #0
	bge	.L955
	b	.L943
.L957:
	mov	r7, r2
	b	.L944
	.fnend
	.size	ffs_do_descs, .-ffs_do_descs
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_open, %function
ffs_ep0_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	ldr	r2, [r3, #92]
	cmp	r2, #3
	beq	.L976
	add	r2, r3, #84
	str	r3, [r1, #124]
	.syntax divided
@ 45 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	add	r2, r3, #88
	.syntax divided
@ 45 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #0
	bx	lr
.L976:
	mvn	r0, #15
	bx	lr
	.fnend
	.size	ffs_ep0_open, .-ffs_ep0_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	__ffs_func_bind_do_nums, %function
__ffs_func_bind_do_nums:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #2
	beq	.L979
	cmp	r0, #3
	beq	.L980
	cmp	r0, #1
	beq	.L997
.L996:
	mov	r0, #0
	bx	lr
.L997:
	ldrb	r0, [r1]	@ zero_extendqisi2
	ldr	r2, [r3, #32]
	lsl	r0, r0, #1
	ldrsh	r2, [r2, r0]
	cmp	r2, #0
	uxtbge	r3, r2
	blt	.L998
	strb	r3, [r1]
.L999:
	mov	r0, #0
	bx	lr
.L980:
	ldrb	r2, [r2, #1]	@ zero_extendqisi2
	cmp	r2, #5
	beq	.L996
	ldrb	r2, [r1]	@ zero_extendqisi2
	ldr	r0, [r3, #12]
	and	r3, r2, #15
	sub	r3, r3, #1
	rsb	r3, r3, r3, lsl #3
	lsl	r3, r3, #2
	ldr	r2, [r0, r3]
	add	r3, r0, r3
	cmp	r2, #0
	beq	.L988
	ldr	r2, [r3, #8]
	cmp	r2, #0
	ldreq	r2, [r3, #12]
	ldrb	r3, [r2, #2]	@ zero_extendqisi2
	strb	r3, [r1]
	b	.L999
.L979:
	ldr	r2, [r3, #8]
	ldrb	r3, [r1]	@ zero_extendqisi2
	ldr	r2, [r2, #188]
	sub	r3, r3, #-536870911
	ldr	r2, [r2]
	ldr	r2, [r2, #4]
	ldrb	r3, [r2, r3, lsl #3]	@ zero_extendqisi2
	strb	r3, [r1]
	b	.L999
.L998:
	mov	ip, r3
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	ldr	lr, [ip], #36
	ldrb	r2, [lr, #44]	@ zero_extendqisi2
	cmp	r2, #15
	mvnhi	r0, #18
	bhi	.L977
	add	r5, r2, #12
	add	r4, r2, #1
	str	ip, [lr, r5, lsl #2]
	strb	r4, [lr, #44]
	ldr	ip, [r3, #32]
	strh	r2, [ip, r0]	@ movhi
	ldr	r3, [r3, #32]
	ldrsh	r2, [r3, r0]
	mov	r0, #0
	uxtb	r3, r2
	strb	r3, [r1]
.L977:
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L988:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	__ffs_func_bind_do_nums, .-__ffs_func_bind_do_nums
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_open, %function
ffs_epfile_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r2, [r0, #328]
	ldr	r3, [r2, #36]
	ldr	r3, [r3, #92]
	cmp	r3, #2
	bne	.L1004
	str	r2, [r1, #124]
	ldr	r3, [r2, #36]
	add	r1, r3, #84
	.syntax divided
@ 45 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r0, [r1]
	add	r0, r0, #1
	strex	ip, r0, [r1]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	add	r1, r3, #88
	.syntax divided
@ 45 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r0, [r1]
	add	r0, r0, #1
	strex	ip, r0, [r1]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
	mov	r0, r3
	str	r3, [r2, #32]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1004:
	movw	r0, #:lower16:.LC9
	movw	r1, #946
	movt	r0, #:upper16:.LC9
	bl	warn_slowpath_null
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
	.fnend
	.size	ffs_epfile_open, .-ffs_epfile_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	do_mode_sense, %function
do_mode_sense:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r3, [r0, #77]	@ zero_extendqisi2
	ldrb	r8, [r0, #76]	@ zero_extendqisi2
	ldr	r7, [r0, #104]
	ldr	r5, [r1]
	tst	r3, #247
	bne	.L1015
	ldrb	r4, [r0, #78]	@ zero_extendqisi2
	lsr	r9, r4, #6
	and	r4, r4, #63
	cmp	r9, #3
	moveq	r3, #14592
	mvneq	r0, #21
	movteq	r3, 5
	streq	r3, [r7, #28]
	beq	.L1005
	mov	r1, #8
	mov	r0, r5
	bl	__memzero
	sub	r3, r4, #63
	cmp	r8, #26
	ldrb	r2, [r7, #24]	@ zero_extendqisi2
	clz	r3, r3
	lsr	r3, r3, #5
	beq	.L1021
	lsl	r2, r2, #6
	add	r6, r5, #8
	bic	r2, r2, #127
	movw	r10, #65535
	strb	r2, [r5, #3]
.L1010:
	cmp	r4, #8
	orreq	r3, r3, #1
	cmp	r3, #0
	bne	.L1022
	cmp	r4, #42
	beq	.L1014
.L1015:
	mov	r3, #9216
	mvn	r0, #21
	movt	r3, 5
	str	r3, [r7, #28]
.L1005:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1021:
	lsl	r2, r2, #6
	add	r6, r5, #4
	mov	r10, #255
	bic	r2, r2, #127
	strb	r2, [r5, #2]
	b	.L1010
.L1022:
	mov	r3, #10
	mov	r2, #8
	mov	r1, r3
	add	r0, r6, #2
	strb	r2, [r6]
	strb	r3, [r6, #1]
	bl	__memzero
	cmp	r9, #1
	beq	.L1012
	mvn	r3, #0
	mov	r2, #4
	strb	r2, [r6, #2]
	strb	r3, [r6, #4]
	strb	r3, [r6, #5]
	strb	r3, [r6, #8]
	strb	r3, [r6, #9]
	strb	r3, [r6, #10]
	strb	r3, [r6, #11]
.L1012:
	add	r0, r6, #12
.L1013:
	sub	r0, r0, r5
	cmp	r10, r0
	blt	.L1015
	cmp	r8, #26
	subeq	r3, r0, #1
	strbeq	r3, [r5]
	beq	.L1005
	sub	r3, r0, #2
	uxth	r3, r3
	lsr	r2, r3, #8
	strb	r2, [r5]
	strb	r3, [r5, #1]
	b	.L1005
.L1014:
	mov	r3, #26
	add	r0, r6, #2
	strb	r4, [r6]
	mov	r1, r3
	strb	r3, [r6, #1]
	bl	__memzero
	mov	r3, #2
	mov	r1, #4
	mov	r2, #40
	add	r0, r6, #28
	strb	r3, [r6, #2]
	strb	r3, [r6, #3]
	strb	r1, [r6, #4]
	strb	r2, [r6, #6]
	b	.L1013
	.fnend
	.size	do_mode_sense, .-do_mode_sense
	.align	2
	.global	usb_rmnet_mux_ctrl_open
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_open, %function
usb_rmnet_mux_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r3, #2496]
	add	r6, r5, #368
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #356]
	mov	r1, r0
	cmp	r4, #0
	bne	.L1027
	mov	r3, #1
	mov	r0, r6
	str	r3, [r5, #356]
	str	r5, [r7, #124]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
.L1023:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1027:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	movw	r1, #:lower16:.LANCHOR2
	movw	r0, #:lower16:.LC10
	movt	r1, #:upper16:.LANCHOR2
	movt	r0, #:upper16:.LC10
	bl	printk
	mvn	r0, #15
	b	.L1023
	.fnend
	.size	usb_rmnet_mux_ctrl_open, .-usb_rmnet_mux_ctrl_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_setup, %function
audio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #20]
	ldrb	r2, [r1]	@ zero_extendqisi2
	ldr	r0, [r3, #24]
	cmp	r2, #34
	ldr	r3, [r0, #4]
	beq	.L1030
	cmp	r2, #162
	bne	.L1038
	ldrh	ip, [r1, #2]	@ unaligned
	ldrb	r2, [r1, #1]	@ zero_extendqisi2
	ldr	r1, [r3]
	cmp	ip, #256
	bne	.L1038
	sub	r2, r2, #129
	cmp	r2, #3
	bhi	.L1038
	mov	r4, #68
	mvn	lr, #83
	mov	ip, #0
	mov	r2, #3
	strb	r4, [r1]
	strb	lr, [r1, #1]
	strb	ip, [r1, #2]
.L1033:
	ldrb	lr, [r3, #26]	@ zero_extendqisi2
	movw	ip, #:lower16:audio_control_complete
	str	r2, [r3, #4]
	movt	ip, #:upper16:audio_control_complete
	mov	r1, r3
	mov	r2, #32
	str	ip, [r3, #28]
	bfc	lr, #1, #1
	strb	lr, [r3, #26]
	ldr	r3, [r0]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L1028
	movw	r0, #:lower16:.LC11
	mov	r1, r4
	movt	r0, #:upper16:.LC11
	bl	printk
	b	.L1028
.L1030:
	ldrb	ip, [r1, #1]	@ zero_extendqisi2
	ldrh	r2, [r1, #6]	@ unaligned
	sub	r1, ip, #1
	cmp	r1, #3
	bls	.L1033
.L1038:
	mvn	r4, #94
.L1028:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	audio_setup, .-audio_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_start_rx, %function
gsmd_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	subs	r5, r0, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	beq	.L1055
	add	r6, r5, #4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #68]
	mov	r7, r0
	cmp	r3, #0
	beq	.L1043
	add	r9, r5, #12
	mov	r10, #2048
	ldr	r8, [r3, #92]
	b	.L1044
.L1057:
	ldr	r4, [r5, #12]
	cmp	r9, r4
	mov	r0, r4
	sub	fp, r4, #36
	beq	.L1043
	bl	list_del
	mov	r1, r7
	mov	r0, r6
	str	r10, [r4, #-32]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r8, #8]
	mov	r1, fp
	mov	r2, #208
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	fp, #0
	mov	r7, r0
	bne	.L1056
.L1044:
	ldr	r3, [r5, #72]
	ldr	r3, [r3, #8]
	tst	r3, #1
	bne	.L1057
.L1043:
	mov	r1, r7
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L1056:
	movw	r0, #:lower16:.LC13
	mov	r2, r5
	ldr	r1, .L1058
	ldr	r3, [r5]
	movt	r0, #:upper16:.LC13
	bl	printk
	mov	r2, r9
	mov	r0, r4
	ldr	r1, [r5, #16]
	bl	__list_add
	b	.L1043
.L1055:
	ldr	r1, .L1058
	movw	r0, #:lower16:.LC12
	movt	r0, #:upper16:.LC12
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L1059:
	.align	2
.L1058:
	.word	.LANCHOR2+24
	.fnend
	.size	gsmd_start_rx, .-gsmd_start_rx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_stop, %function
gbam_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L1074
	add	r5, r0, #8
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L1075
	ldr	r0, [r3, #84]
	ldr	r1, [r4, #116]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	subs	r2, r0, #0
	bne	.L1076
.L1065:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L1074:
	add	r5, r0, #4
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L1077
	ldr	r0, [r3, #88]
	ldr	r1, [r4, #112]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	subs	r2, r0, #0
	beq	.L1065
	movw	r0, #:lower16:.LC15
	ldr	r1, .L1078
	movt	r0, #:upper16:.LC15
	bl	printk
	b	.L1065
.L1076:
	movw	r0, #:lower16:.LC15
	ldr	r1, .L1078+4
	movt	r0, #:upper16:.LC15
	bl	printk
	b	.L1065
.L1075:
	mov	r0, r5
	bl	_raw_spin_unlock
	ldr	r1, .L1078+4
	movw	r0, #:lower16:.LC14
.L1073:
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC14
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L1077:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC14
	ldr	r1, .L1078
	b	.L1073
.L1079:
	.align	2
.L1078:
	.word	.LANCHOR2+40
	.word	.LANCHOR2+64
	.fnend
	.size	gbam_stop, .-gbam_stop
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_start_endless_rx, %function
gbam_start_endless_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #4
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L1087
	ldr	r0, [r3, #88]
	mov	r2, #32
	ldr	r1, [r4, #112]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L1088
.L1082:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L1087:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC14
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC14
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, .L1089
	b	printk
.L1088:
	movw	r0, #:lower16:.LC16
	ldr	r1, .L1089
	movt	r0, #:upper16:.LC16
	bl	printk
	b	.L1082
.L1090:
	.align	2
.L1089:
	.word	.LANCHOR2+88
	.fnend
	.size	gbam_start_endless_rx, .-gbam_start_endless_rx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_start_endless_tx, %function
gbam_start_endless_tx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #8
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L1098
	ldr	r0, [r3, #84]
	mov	r2, #32
	ldr	r1, [r4, #116]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L1099
.L1093:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L1098:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC14
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC14
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, .L1100
	b	printk
.L1099:
	movw	r0, #:lower16:.LC16
	ldr	r1, .L1100
	movt	r0, #:upper16:.LC16
	bl	printk
	b	.L1093
.L1101:
	.align	2
.L1100:
	.word	.LANCHOR2+112
	.fnend
	.size	gbam_start_endless_tx, .-gbam_start_endless_tx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_start, %function
gbam_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #0
	beq	.L1104
	b	gbam_start_endless_tx
.L1104:
	b	gbam_start_endless_rx
	.fnend
	.size	gbam_start, .-gbam_start
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_send_cpkt_tomodem, %function
ghsic_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	ip, r0
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r3, #1020]
	cmp	r0, r1
	bcs	.L1112
	mov	r4, r2
	mov	r2, #104
	mla	r3, r2, r0, r3
	ldr	r5, [r3, #1024]
	cmp	r5, #0
	beq	.L1113
	mov	r1, #32
	mov	r0, r4
	bl	__kmalloc
	subs	r7, r0, #0
	beq	.L1110
	mov	r2, r4
	mov	r1, r6
	bl	memcpy
	ldr	r0, [r5, #84]
	ands	r4, r0, #1
	beq	.L1114
	ldr	r3, [r5, #96]
	mov	r4, #0
	add	r3, r3, #1
	str	r3, [r5, #96]
.L1105:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1114:
	ldr	r3, [r5, #104]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r5, #104]
	bl	kfree
	b	.L1105
.L1110:
	mvn	r4, #11
	b	.L1105
.L1113:
	movw	r0, #:lower16:.LC12
	ldr	r1, .L1115
	mvn	r4, #18
	movt	r0, #:upper16:.LC12
	bl	printk
	b	.L1105
.L1112:
	movw	r0, #:lower16:.LC17
	mov	r2, ip
	ldr	r1, .L1115
	movt	r0, #:upper16:.LC17
	mvn	r4, #18
	bl	printk
	b	.L1105
.L1116:
	.align	2
.L1115:
	.word	.LANCHOR2+136
	.fnend
	.size	ghsic_send_cpkt_tomodem, .-ghsic_send_cpkt_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_setup, %function
ecm_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movw	r3, #17185
	str	lr, [sp, #8]
	ldr	ip, [r0, #20]
	.pad #12
	sub	sp, sp, #12
	ldrh	r2, [r1]	@ unaligned
	ldrh	r4, [r1, #4]	@ unaligned
	ldrh	r5, [r1, #2]	@ unaligned
	ldr	lr, [ip, #24]
	cmp	r2, r3
	ldrh	ip, [r1, #6]	@ unaligned
	ldr	r3, [lr, #4]
	bne	.L1122
	cmp	ip, #0
	bne	.L1122
	ldrb	r2, [r0, #120]	@ zero_extendqisi2
	cmp	r2, r4
	bne	.L1122
	strh	r5, [r0, #98]	@ movhi
	ldrb	r0, [r3, #26]	@ zero_extendqisi2
	mov	r4, r1
	str	ip, [r3, #4]
	mov	r1, r3
	mov	r2, #32
	bfi	r0, ip, #1, #1
	strb	r0, [r3, #26]
	ldr	r3, [lr]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	blt	.L1125
.L1117:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L1122:
	mvn	r5, #94
	b	.L1117
.L1125:
	movw	r0, #:lower16:.LC18
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	str	r5, [sp]
	ldr	r1, .L1126
	movt	r0, #:upper16:.LC18
	ldrb	r2, [r4]	@ zero_extendqisi2
	bl	printk
	b	.L1117
.L1127:
	.align	2
.L1126:
	.word	.LANCHOR2+160
	.fnend
	.size	ecm_qc_setup, .-ecm_qc_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_ep0out_complete, %function
mbim_ep0out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r3, #0
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r1, #32]
	ldr	r2, [r1, #44]
	str	r3, [r1, #32]
	cmp	r2, r3
	bne	.L1129
	ldr	ip, [r1, #4]
	ldr	r3, [r1, #48]
	cmp	r3, ip
	bne	.L1129
	cmp	r3, #4
	beq	.L1141
	cmp	r3, #8
	bne	.L1135
	ldr	r3, [r1]
	ldr	r2, [r3]	@ unaligned
	cmp	r2, #2048
	bcc	.L1136
	movw	r1, #:lower16:.LANCHOR0
	movt	r1, #:upper16:.LANCHOR0
	ldr	r1, [r1, #52]
	cmp	r1, r2
	bcc	.L1136
	ldrb	r1, [r3, #5]	@ zero_extendqisi2
	ldrb	r3, [r3, #4]	@ zero_extendqisi2
	orr	r3, r3, r1, lsl #8
	strh	r3, [r0, #228]	@ movhi
.L1134:
	str	r2, [r0, #224]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1141:
	ldr	r3, [r1]
	ldr	r2, [r3]	@ unaligned
	cmp	r2, #2048
	bcc	.L1136
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #52]
	cmp	r3, r2
	bcs	.L1134
.L1136:
	movw	r0, #:lower16:.LC20
	ldr	r1, .L1142
	movt	r0, #:upper16:.LC20
	bl	printk
.L1131:
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
	ldr	r2, .L1142
	movw	r0, #:lower16:.LC22
	ldr	r4, [sp]
	movt	r0, #:upper16:.LC22
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	mov	r1, r2
	b	printk
.L1129:
	movw	r0, #:lower16:.LC19
	ldr	r1, .L1142
	movt	r0, #:upper16:.LC19
	bl	printk
	b	.L1131
.L1135:
	movw	r0, #:lower16:.LC21
	ldr	r1, .L1142
	movt	r0, #:upper16:.LC21
	bl	printk
	b	.L1131
.L1143:
	.align	2
.L1142:
	.word	.LANCHOR2+176
	.fnend
	.size	mbim_ep0out_complete, .-mbim_ep0out_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_stop, %function
bam_data_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #4]
	beq	.L1160
	cmp	r3, #0
	beq	.L1144
	ldr	r3, [r3, #8]
	ldr	r1, [r0, #40]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r3, [r2, #20]
	blx	r3
	subs	r3, r0, #0
	bne	.L1161
.L1144:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1160:
	cmp	r3, #0
	beq	.L1144
	ldr	r3, [r3, #12]
	ldr	r1, [r0, #36]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r3, [r2, #20]
	blx	r3
	subs	r3, r0, #0
	ldrne	r2, .L1162
	beq	.L1144
.L1159:
	movw	r0, #:lower16:.LC23
	ldr	r4, [sp]
	mov	r1, r2
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC23
	add	sp, sp, #8
	b	printk
.L1161:
	ldr	r2, .L1162+4
	b	.L1159
.L1163:
	.align	2
.L1162:
	.word	.LANCHOR2+200
	.word	.LANCHOR2+228
	.fnend
	.size	bam_data_stop, .-bam_data_stop
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_start_endless_rx, %function
bam_data_start_endless_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, [r0, #4]
	cmp	r2, #0
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r3, r0
	str	lr, [sp, #4]
	ldr	r0, [r2, #12]
	mov	r2, #32
	ldr	r1, [r3, #36]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L1175
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1175:
	movw	r0, #:lower16:.LC16
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC16
	add	sp, sp, #8
	ldr	r1, .L1176
	b	printk
.L1177:
	.align	2
.L1176:
	.word	.LANCHOR2+256
	.fnend
	.size	bam_data_start_endless_rx, .-bam_data_start_endless_rx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_start_endless_tx, %function
bam_data_start_endless_tx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, [r0, #4]
	cmp	r2, #0
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r3, r0
	str	lr, [sp, #4]
	ldr	r0, [r2, #8]
	mov	r2, #32
	ldr	r1, [r3, #40]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L1189
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1189:
	movw	r0, #:lower16:.LC16
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC16
	add	sp, sp, #8
	ldr	r1, .L1190
	b	printk
.L1191:
	.align	2
.L1190:
	.word	.LANCHOR2+284
	.fnend
	.size	bam_data_start_endless_tx, .-bam_data_start_endless_tx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_start, %function
bam_data_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #0
	beq	.L1194
	b	bam_data_start_endless_tx
.L1194:
	b	bam_data_start_endless_rx
	.fnend
	.size	bam_data_start, .-bam_data_start
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_response_complete, %function
rndis_qc_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r1, #44]
	ldr	r2, [r5, #20]
	cmp	r2, #0
	beq	.L1196
	ldr	r2, [r2, #24]
	cmp	r2, #0
	beq	.L1196
	cmn	r3, #104
	beq	.L1199
	cmp	r3, #0
	mov	r6, r0
	mov	r4, r1
	bne	.L1224
.L1200:
	ldr	r3, [r5, #156]
	cmp	r3, r6
	beq	.L1225
.L1195:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1224:
	cmn	r3, #108
	beq	.L1199
	ldr	r1, [r1, #4]
	movw	r0, #:lower16:.LC25
	ldr	ip, [r4, #48]
	movt	r0, #:upper16:.LC25
	ldr	r2, [r6, #4]
	str	ip, [sp]
	str	r1, [sp, #4]
	ldr	r1, .L1226
	bl	printk
	b	.L1200
.L1199:
	mov	r3, #0
	str	r3, [r5, #164]
	b	.L1195
.L1225:
	add	r6, r5, #164
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L1195
	ldr	r0, [r5, #156]
	mov	r1, r4
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L1195
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L1195
.L1196:
	ldr	r2, .L1226
	movw	r0, #:lower16:.LC24
	movt	r0, #:upper16:.LC24
	mov	r1, r2
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L1227:
	.align	2
.L1226:
	.word	.LANCHOR2+312
	.fnend
	.size	rndis_qc_response_complete, .-rndis_qc_response_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_response_available, %function
rndis_qc_response_available:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #164
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r1, [r0, #160]
	ldr	ip, [r1]
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L1228
	mov	r4, r0
	mov	r0, #0
	str	r3, [ip]
	mov	r2, #32
	str	r0, [ip, #4]
	ldr	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L1236
.L1228:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1236:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r1, r3, [r5]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC26
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC26
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, .L1237
	b	printk
.L1238:
	.align	2
.L1237:
	.word	.LANCHOR2+340
	.fnend
	.size	rndis_qc_response_available, .-rndis_qc_response_available
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_buffer_alloc, %function
f_audio_buffer_alloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L1242
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L1244
.L1240:
	mov	r0, r5
	movw	r1, #32800
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	beq	.L1245
.L1239:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1242:
	mov	r4, #16
	b	.L1240
.L1245:
	movw	r0, #:lower16:.LC28
	ldr	r1, .L1246
	movt	r0, #:upper16:.LC28
	bl	printk
	mov	r0, r4
	mvn	r4, #11
	bl	kfree
	b	.L1239
.L1244:
	movw	r0, #:lower16:.LC27
	ldr	r1, .L1246
	mvn	r4, #11
	movt	r0, #:upper16:.LC27
	bl	printk
	b	.L1239
.L1247:
	.align	2
.L1246:
	.word	.LANCHOR2+368
	.fnend
	.size	f_audio_buffer_alloc, .-f_audio_buffer_alloc
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_setup, %function
f_audio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #20]
	.pad #24
	sub	sp, sp, #24
	ldrb	r2, [r1]	@ zero_extendqisi2
	ldrh	ip, [r1, #4]	@ unaligned
	ldrh	lr, [r1, #2]	@ unaligned
	ldr	r6, [r3, #24]
	cmp	r2, #34
	ldrh	r5, [r1, #6]	@ unaligned
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	ldr	r4, [r6, #4]
	beq	.L1250
	bls	.L1307
	cmp	r2, #161
	beq	.L1253
	cmp	r2, #162
	bne	.L1249
	ldr	r2, [r7, #260]!
	and	ip, ip, #127
	lsr	lr, lr, #8
	cmp	r7, r2
	beq	.L1270
	ldrb	r1, [r2, #16]	@ zero_extendqisi2
	cmp	r1, ip
	bne	.L1290
.L1282:
	ldr	ip, [r2, #8]!
	cmp	r2, ip
	beq	.L1270
	ldrb	r1, [ip, #12]	@ zero_extendqisi2
	cmp	r1, lr
	beq	.L1285
.L1289:
	ldr	ip, [ip]
	cmp	r2, ip
	beq	.L1270
	ldrb	r1, [ip, #12]	@ zero_extendqisi2
	cmp	lr, r1
	bne	.L1289
.L1285:
	and	r3, r3, #15
	sub	r2, r3, #1
	cmp	r2, #3
	bhi	.L1270
	add	r3, r3, #4
	add	r1, sp, #24
	ldr	r0, [r4]
	ldr	r3, [ip, r3, lsl #2]
	mov	r2, r5
	str	r3, [r1, #-4]!
	bl	memcpy
	b	.L1262
.L1253:
	ldr	r2, [r0, #252]!
	mvn	r1, #94
	lsr	ip, ip, #8
	str	r1, [sp, #20]
	cmp	r2, r0
	beq	.L1263
	ldrb	r1, [r2, #16]	@ zero_extendqisi2
	cmp	r1, ip
	bne	.L1265
	b	.L1264
.L1268:
	ldrb	r1, [r2, #16]	@ zero_extendqisi2
	cmp	ip, r1
	beq	.L1264
.L1265:
	ldr	r2, [r2]
	cmp	r2, r0
	bne	.L1268
.L1263:
	movw	r3, #:lower16:f_audio_complete
	mov	r2, r5
	ldr	r0, [r4]
	movt	r3, #:upper16:f_audio_complete
	add	r1, sp, #20
	str	r3, [r4, #28]
	str	r7, [r4, #32]
	bl	memcpy
.L1262:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r5, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	orr	r3, r3, #2
	strb	r3, [r4, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L1308
.L1248:
	mov	r0, r4
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1283:
	ldrb	r1, [r2, #16]	@ zero_extendqisi2
	cmp	ip, r1
	beq	.L1282
.L1290:
	ldr	r2, [r2]
	cmp	r7, r2
	bne	.L1283
	b	.L1270
.L1307:
	cmp	r2, #33
	bne	.L1249
	mov	r8, r0
	lsr	ip, ip, #8
	ldr	r2, [r8, #252]!
	and	r3, r3, #15
	cmp	r2, r8
	beq	.L1255
	ldrb	r1, [r2, #16]	@ zero_extendqisi2
	cmp	r1, ip
	bne	.L1257
	b	.L1256
.L1261:
	ldrb	r0, [r2, #16]	@ zero_extendqisi2
	cmp	ip, r0
	beq	.L1256
.L1257:
	ldr	r2, [r2]
	cmp	r2, r8
	bne	.L1261
.L1255:
	movw	r2, #:lower16:f_audio_complete
	strb	r3, [r7, #268]
	movt	r2, #:upper16:f_audio_complete
	str	r2, [r4, #28]
	str	r7, [r4, #32]
	b	.L1262
.L1250:
	mov	r1, r0
	and	ip, ip, #127
	ldr	r2, [r1, #260]!
	lsr	lr, lr, #8
	cmp	r1, r2
	beq	.L1270
	ldrb	r0, [r2, #16]	@ zero_extendqisi2
	cmp	r0, ip
	bne	.L1279
.L1271:
	ldr	r0, [r2, #8]!
	cmp	r0, r2
	beq	.L1270
	ldrb	r1, [r0, #12]	@ zero_extendqisi2
	cmp	r1, lr
	beq	.L1274
.L1278:
	ldr	r0, [r0]
	cmp	r0, r2
	beq	.L1270
	ldrb	r1, [r0, #12]	@ zero_extendqisi2
	cmp	lr, r1
	bne	.L1278
.L1274:
	ands	r3, r3, #15
	beq	.L1276
	cmp	r3, #4
	bls	.L1277
	cmp	r3, #5
	bne	.L1276
.L1270:
	movw	r0, #:lower16:.LC32
	ldr	r1, .L1309
	mvn	r4, #94
	movt	r0, #:upper16:.LC32
	bl	printk
	b	.L1248
.L1272:
	ldrb	r0, [r2, #16]	@ zero_extendqisi2
	cmp	ip, r0
	beq	.L1271
.L1279:
	ldr	r2, [r2]
	cmp	r1, r2
	bne	.L1272
	b	.L1270
.L1264:
	ldr	r0, [r2, #8]!
	cmp	r0, r2
	beq	.L1263
	lsr	lr, lr, #8
	b	.L1267
.L1266:
	ldr	r0, [r0]
	cmp	r0, r2
	beq	.L1263
.L1267:
	ldrb	r1, [r0, #12]	@ zero_extendqisi2
	cmp	r1, lr
	bne	.L1266
	ldr	r8, [r0, #40]
	cmp	r8, #0
	beq	.L1266
	and	r1, r3, #15
	blx	r8
	str	r0, [sp, #20]
	b	.L1263
.L1256:
	ldr	r0, [r2, #8]!
	cmp	r0, r2
	beq	.L1255
	ldrb	r1, [r0, #12]	@ zero_extendqisi2
	lsr	lr, lr, #8
	cmp	r1, lr
	bne	.L1259
	b	.L1258
.L1260:
	ldrb	ip, [r0, #12]	@ zero_extendqisi2
	cmp	lr, ip
	beq	.L1258
.L1259:
	ldr	r0, [r0]
	cmp	r0, r2
	bne	.L1260
	b	.L1255
.L1277:
	movw	r2, #:lower16:audio_set_endpoint_complete
	strb	r3, [r7, #268]
	movt	r2, #:upper16:audio_set_endpoint_complete
	str	r0, [r7, #272]
	str	r2, [r4, #28]
	str	r7, [r4, #32]
	b	.L1262
.L1258:
	str	r0, [r7, #272]
	b	.L1255
.L1249:
	movw	r0, #:lower16:.LC30
	ldr	r1, .L1309
	str	lr, [sp]
	str	ip, [sp, #4]
	movt	r0, #:upper16:.LC30
	str	r5, [sp, #8]
	bl	printk
	b	.L1270
.L1308:
	movw	r0, #:lower16:.LC31
	mov	r2, r4
	ldr	r1, .L1309
	movt	r0, #:upper16:.LC31
	bl	printk
	b	.L1248
.L1276:
	movw	r0, #:lower16:.LC29
	ldr	r1, .L1309+4
	movt	r0, #:upper16:.LC29
	bl	printk
	b	.L1270
.L1310:
	.align	2
.L1309:
	.word	.LANCHOR2+416
	.word	.LANCHOR2+392
	.fnend
	.size	f_audio_setup, .-f_audio_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_release, %function
conn_gadget_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r0, #:lower16:.LC33
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC33
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	printk
	ldr	r0, [r4, #2500]
	add	r0, r0, #88
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	ldr	r0, [r4, #2500]
	mov	r3, r0
	ldr	ip, [r3, #136]!
	cmp	ip, r3
	bne	.L1316
.L1312:
	add	r0, r0, #88
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #2500]
	mov	r0, #0
	add	r2, r3, #116
	str	r0, [r3, #216]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	ip, r1, [r2]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1316:
	ldr	r6, [ip]
	sub	r3, ip, #36
	movw	r7, #:lower16:.LC34
	mov	r5, r3
	movt	r7, #:upper16:.LC34
	sub	r6, r6, #36
.L1313:
	add	r0, r0, #88
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	bl	printk
	ldr	r3, [r4, #2500]
	mov	r1, r5
	mov	r5, r6
	ldr	r0, [r3, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r0, [r4, #2500]
	add	r0, r0, #88
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	ldr	r0, [r4, #2500]
	ldr	r3, [r6, #36]!
	add	r2, r0, #136
	cmp	r6, r2
	sub	r6, r3, #36
	beq	.L1312
	b	.L1313
	.fnend
	.size	conn_gadget_release, .-conn_gadget_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_setup, %function
ncm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r1
	movw	ip, #8586
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldrh	r3, [r1]	@ unaligned
	mov	lr, r0
	ldrh	r7, [r1, #4]	@ unaligned
	.pad #12
	sub	sp, sp, #12
	ldrh	r2, [r1, #6]	@ unaligned
	ldr	r1, [r0, #20]
	rev16	r3, r3
	ldrh	r0, [r4, #2]	@ unaligned
	uxth	r3, r3
	ldr	r5, [r1, #24]
	cmp	r3, ip
	uxth	r1, r0
	ldr	r6, [r5, #4]
	beq	.L1319
	bls	.L1364
	movw	r0, #41349
	cmp	r3, r0
	beq	.L1326
	bhi	.L1327
	movw	r0, #41344
	cmp	r3, r0
	beq	.L1328
	movw	r0, #41347
	cmp	r3, r0
	bne	.L1360
	adds	r1, r1, #0
	movne	r1, #1
	cmp	r2, #1
	movhi	r2, r1
	orrls	r2, r1, #1
	cmp	r2, #0
	bne	.L1360
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1360
	ldr	r3, [lr, #176]
	mov	r1, #2
	ldr	ip, .L1368
	ldr	r0, [r6]
	subs	r3, r3, ip
	movne	r3, #1
	strb	r3, [r0]
	strb	r2, [r0, #1]
	b	.L1332
.L1364:
	movw	ip, #8580
	cmp	r3, ip
	beq	.L1321
	bls	.L1365
	movw	r0, #8582
	cmp	r3, r0
	beq	.L1324
	movw	r0, #8584
	cmp	r3, r0
	bne	.L1360
	cmp	r1, #0
	cmpeq	r2, #2
	bne	.L1360
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1360
	movw	r3, #:lower16:ncm_setdgram_complete
	mov	r1, #2
	str	lr, [r6, #32]
	movt	r3, #:upper16:ncm_setdgram_complete
	str	r3, [r6, #28]
.L1332:
	ldrb	r3, [r6, #26]	@ zero_extendqisi2
	str	r1, [r6, #4]
	mov	r2, #32
	mov	r1, r6
	bfc	r3, #1, #1
	strb	r3, [r6, #26]
	ldr	r3, [r5]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	blt	.L1366
.L1317:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L1327:
	movw	r0, #41351
	cmp	r3, r0
	beq	.L1330
	movw	r0, #41353
	cmp	r3, r0
	bne	.L1360
	adds	r1, r1, #0
	movne	r1, #1
	cmp	r2, #1
	movhi	r2, r1
	orrls	r2, r1, #1
	cmp	r2, #0
	bne	.L1360
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1360
	ldrb	r0, [lr, #180]	@ zero_extendqisi2
	mov	r1, #2
	ldr	r3, [r6]
	strb	r0, [r3]
	strb	r2, [r3, #1]
	b	.L1332
.L1330:
	adds	r1, r1, #0
	movne	r1, #1
	cmp	r2, #1
	orrls	r1, r1, #1
	cmp	r1, #0
	bne	.L1360
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	beq	.L1367
.L1360:
	mvn	r6, #94
	b	.L1317
.L1324:
	cmp	r1, #0
	cmpeq	r2, #4
	bne	.L1360
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1360
	movw	r3, #:lower16:ncm_ep0out_complete
	mov	r1, #4
	str	lr, [r6, #32]
	movt	r3, #:upper16:ncm_ep0out_complete
	str	r3, [r6, #28]
	b	.L1332
.L1328:
	adds	r1, r1, #0
	movne	r1, #1
	cmp	r2, #0
	moveq	r1, #1
	cmp	r1, #0
	bne	.L1360
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1360
	cmp	r2, #28
	ldr	r1, .L1368+4
	movcc	r7, r2
	movcs	r7, #28
	ldr	r0, [r6]
	mov	r2, r7
	bl	memcpy
	mov	r1, r7
	b	.L1332
.L1366:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC36
	str	r6, [sp]
	movt	r1, #:upper16:.LC36
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	ldrb	r2, [r4]	@ zero_extendqisi2
	add	r0, r0, #32
	bl	dev_err
	b	.L1317
.L1365:
	movw	r1, #8515
	cmp	r3, r1
	bne	.L1360
	cmp	r2, #0
	bne	.L1360
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1360
	mov	r1, r2
	strh	r0, [lr, #98]	@ movhi
	b	.L1332
.L1321:
	cmp	r2, #0
	bne	.L1360
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1360
	cmp	r1, #0
	beq	.L1333
	cmp	r1, #1
	bne	.L1360
	ldr	r3, .L1368+8
	mov	r1, r2
	str	r3, [lr, #176]
	b	.L1332
.L1326:
	adds	r1, r1, #0
	movne	r1, #1
	cmp	r2, #3
	orrls	r1, r1, #1
	cmp	r1, #0
	bne	.L1360
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1360
	ldr	r2, [lr, #112]
	mov	r1, #4
	ldr	r3, [r6]
	lsr	r0, r2, #16
	ubfx	ip, r2, #8, #8
	strb	r2, [r3]
	lsr	r2, r0, #8
	strb	ip, [r3, #1]
	strb	r0, [r3, #2]
	strb	r2, [r3, #3]
	b	.L1332
.L1319:
	cmp	r2, #0
	bne	.L1360
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1360
	cmp	r1, #0
	beq	.L1335
	cmp	r1, #1
	bne	.L1360
	mov	ip, #16777216
	strb	r1, [lr, #180]
.L1337:
	ldr	r0, [lr, #176]
	mov	r1, #0
	ldr	r2, [r0, #4]
	bic	r2, r2, #16777216
	str	r2, [r0, #4]
	ldr	r2, [lr, #176]
	ldr	r3, [r2, #4]
	orr	r3, r3, ip
	str	r3, [r2, #4]
	b	.L1332
.L1335:
	mov	ip, r1
	strb	r1, [lr, #180]
	b	.L1337
.L1333:
	ldr	r3, .L1368
	str	r3, [lr, #176]
	b	.L1332
.L1367:
	ldrh	r2, [lr, #182]
	movw	r0, #:lower16:.LC35
	ldr	r3, [r6]
	movt	r0, #:upper16:.LC35
	ldr	r1, .L1368+12
	lsr	ip, r2, #8
	strb	r2, [r3]
	strb	ip, [r3, #1]
	ldrh	r2, [lr, #182]
	bl	printk
	mov	r1, #2
	b	.L1332
.L1369:
	.align	2
.L1368:
	.word	.LANCHOR0+76
	.word	.LANCHOR0+20
	.word	.LANCHOR0+120
	.word	.LANCHOR2+432
	.fnend
	.size	ncm_setup, .-ncm_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_setdgram_complete, %function
ncm_setdgram_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR0
	str	r6, [sp, #8]
	mov	r5, #0
	str	lr, [sp, #12]
	ldr	r2, [r3, #24]
	ldr	r0, [r3, #36]
	ldr	ip, [r1, #32]
	str	r5, [r1, #32]
	ldr	lr, [r1, #44]
	cmp	r0, r2
	movcs	r0, r2
	cmp	lr, r5
	bne	.L1371
	ldr	r2, [r1, #4]
	ldr	lr, [r1, #48]
	cmp	lr, r2
	bne	.L1371
	ldr	r1, [r1]
	movw	lr, #7500
	ldrb	r5, [r1, #1]	@ zero_extendqisi2
	ldrb	r2, [r1]	@ zero_extendqisi2
	orr	r2, r2, r5, lsl #8
	sub	r1, r2, #1504
	sub	r1, r1, #10
	cmp	r1, lr
	bhi	.L1381
	ldrh	r1, [r3, #44]
	add	r3, r1, #11
	rsb	r1, r1, #0
	and	r3, r3, r1
	add	r3, r3, #12
	add	r3, r3, r2
	cmp	r3, r0
	bhi	.L1382
	ldr	r3, [ip, #184]
	strh	r2, [ip, #182]	@ movhi
	movw	r0, #:lower16:.LC41
	movt	r0, #:upper16:.LC41
	cmp	r3, #0
	subne	r1, r2, #14
	strne	r1, [r3, #356]
	ldr	r1, .L1383
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L1382:
	movw	r0, #:lower16:.LC39
	ldr	r1, .L1383
	movt	r0, #:upper16:.LC39
	bl	printk
	movw	r0, #:lower16:.LC40
	movt	r0, #:upper16:.LC40
	bl	printk
.L1373:
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #24]
	bx	r3
.L1371:
	movw	r0, #:lower16:.LC37
	ldr	r1, .L1383
	movt	r0, #:upper16:.LC37
	bl	printk
	b	.L1373
.L1381:
	movw	r0, #:lower16:.LC38
	ldr	r1, .L1383
	movt	r0, #:upper16:.LC38
	bl	printk
	b	.L1373
.L1384:
	.align	2
.L1383:
	.word	.LANCHOR2+444
	.fnend
	.size	ncm_setdgram_complete, .-ncm_setdgram_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_enable_function, %function
android_enable_function:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r9, r2
	movw	r8, #:lower16:.LC42
	strd	r10, [sp, #24]
	movt	r8, #:upper16:.LC42
	mov	fp, r0
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r6, [r0, #4]
	ldr	r2, [r0, #8]
	mov	r10, r1
	ldr	r3, [r0, #44]
	sub	r6, r6, #4
	str	r3, [sp]
	ldr	r3, [r2]
	str	r3, [sp, #4]
.L1386:
	ldr	r5, [r6, #4]!
	mov	r0, r9
	cmp	r5, #0
	beq	.L1397
	ldr	r4, [r5]
	mov	r1, r4
	bl	strcmp
	subs	r7, r0, #0
	bne	.L1386
	ldr	r1, [r5, #20]
	cmp	r1, fp
	cmpne	r1, #0
	bne	.L1398
	movw	r2, #:lower16:kmalloc_caches
	movt	r2, #:upper16:kmalloc_caches
	ldr	r0, [r2, #24]
	cmp	r0, #0
	beq	.L1394
	mov	r2, #12
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L1399
.L1389:
	str	fp, [r5, #20]
	add	r2, r10, #112
	str	r5, [r0], #4
	ldr	r1, [r10, #116]
	bl	__list_add
	ldr	r2, [sp]
	ldr	r6, [r5]
	ldr	r3, [r2, #44]
	cmp	r3, #0
	ble	.L1385
	add	r3, r3, r3, lsl #2
	add	r4, r2, #12
	add	r5, r4, r3, lsl #1
	b	.L1392
.L1391:
	cmp	r4, r5
	beq	.L1385
.L1392:
	mov	r1, r4
	mov	r0, r6
	bl	strcmp
	cmp	r0, #0
	add	r4, r4, #10
	bne	.L1391
	ldr	r2, [sp, #4]
	mov	r3, #1
	mov	r7, r0
	strb	r3, [r2, #378]
.L1385:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1394:
	mov	r0, #16
	b	.L1389
.L1397:
	mvn	r7, #21
	b	.L1385
.L1398:
	mov	r2, r4
	ldr	r1, .L1400
	mov	r0, r8
	bl	printk
	b	.L1386
.L1399:
	movw	r0, #:lower16:.LC43
	ldr	r1, .L1400
	mvn	r7, #11
	movt	r0, #:upper16:.LC43
	bl	printk
	b	.L1385
.L1401:
	.align	2
.L1400:
	.word	.LANCHOR2+468
	.fnend
	.size	android_enable_function, .-android_enable_function
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_set_string, %function
acc_complete_set_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r1, #44]
	ldr	r0, [r0]
	ldr	r6, [r1, #48]
	cmp	r3, #0
	movwne	r0, #:lower16:.LC44
	movne	r1, r3
	movtne	r0, #:upper16:.LC44
	bne	.L1417
	ldr	r3, [r0, #1640]
	cmp	r3, #5
	ldrls	pc, [pc, r3, asl #2]
	b	.L1404
.L1406:
	.word	.L1405
	.word	.L1407
	.word	.L1408
	.word	.L1409
	.word	.L1410
	.word	.L1411
.L1411:
	add	r7, r0, #1376
	add	r7, r7, #5
.L1412:
	cmp	r7, #0
	beq	.L1404
	add	r4, r0, #88
	mov	r5, r1
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	cmp	r6, #255
	mov	r8, r0
	ldr	r1, [r5]
	movge	r6, #255
	mov	r0, r7
	mov	r2, r6
	bl	memcpy
	mov	r3, #0
	mov	r1, r8
	mov	r0, r4
	strb	r3, [r7, r6]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L1405:
	add	r7, r0, #101
	b	.L1412
.L1407:
	add	r7, r0, #356
	add	r7, r7, #1
	b	.L1412
.L1408:
	add	r7, r0, #612
	add	r7, r7, #1
	b	.L1412
.L1409:
	add	r7, r0, #868
	add	r7, r7, #1
	b	.L1412
.L1410:
	add	r7, r0, #1120
	add	r7, r7, #5
	b	.L1412
.L1404:
	movw	r0, #:lower16:.LC45
	mov	r1, r3
	movt	r0, #:upper16:.LC45
.L1417:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
	.fnend
	.size	acc_complete_set_string, .-acc_complete_set_string
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_release, %function
acc_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r0, #:lower16:.LC46
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC46
	str	lr, [sp, #4]
	bl	printk
	ldr	r3, [r4, #2504]
	add	r3, r3, #1648
	add	r3, r3, #4
	.syntax divided
@ 37 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r2, #0
	.syntax divided
@ 52 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@	__xchg4
1:	ldrex	r1, [r3]
	strex	r0, r2, [r3]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 98 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, r2
	beq	.L1421
.L1419:
	ldr	r3, [r4, #2504]
	mov	r0, #0
	ldrb	r2, [r3, #100]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #100]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1421:
	movw	r0, #:lower16:.LC47
	movw	r1, #799
	movt	r0, #:upper16:.LC47
	bl	warn_slowpath_null
	b	.L1419
	.fnend
	.size	acc_release, .-acc_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_open, %function
acc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC48
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	movt	r0, #:upper16:.LC48
	str	lr, [sp, #4]
	bl	printk
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r3, [r2, #2504]
	add	r3, r3, #1648
	add	r3, r3, #4
	.syntax divided
@ 37 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #1
	.syntax divided
@ 52 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@	__xchg4
1:	ldrex	ip, [r3]
	strex	r1, r0, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 98 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	ip, #0
	bne	.L1424
	ldr	r3, [r2, #2504]
	mov	r0, ip
	ldrb	r2, [r3, #100]	@ zero_extendqisi2
	bfi	r2, ip, #1, #1
	strb	r2, [r3, #100]
	str	r3, [r4, #124]
.L1422:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1424:
	mvn	r0, #15
	b	.L1422
	.fnend
	.size	acc_open, .-acc_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	sua_version_info_store, %function
sua_version_info_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	ldr	r6, [r0, #4]
	cmp	r4, #100
	mov	r1, r5
	movls	r2, r4
	movhi	r2, #100
	ldr	r0, [r6, #96]
	add	r0, r0, #235
	bl	memcpy
	ldr	ip, [r6, #96]
	movw	r0, #:lower16:.LC49
	mov	r2, r5
	ldr	r1, .L1430
	mov	r3, #4
	movt	r0, #:upper16:.LC49
	add	ip, ip, #235
	str	ip, [sp]
	bl	printk
	mov	r0, r4
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1431:
	.align	2
.L1430:
	.word	.LANCHOR2+492
	.fnend
	.size	sua_version_info_store, .-sua_version_info_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_release_dev, %function
rndis_qc_release_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC50
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r1, .L1437
	movw	r4, #:lower16:.LANCHOR1
	movt	r0, #:upper16:.LC50
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	movt	r4, #:upper16:.LANCHOR1
	bl	printk
	ldr	r0, .L1437+4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #2512]
	mov	r5, r0
	cmp	r3, #0
	beq	.L1436
	add	r2, r3, #152
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, .L1437+4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
.L1432:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1436:
	movw	r0, #:lower16:.LC51
	ldr	r1, .L1437
	movt	r0, #:upper16:.LC51
	bl	printk
	ldr	r0, .L1437+4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #18
	b	.L1432
.L1438:
	.align	2
.L1437:
	.word	.LANCHOR2+516
	.word	.LANCHOR1+2508
	.fnend
	.size	rndis_qc_release_dev, .-rndis_qc_release_dev
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_open_dev, %function
rndis_qc_open_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC52
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	str	r6, [sp, #8]
	movt	r0, #:upper16:.LC52
	mov	r6, r1
	ldr	r1, .L1445
	str	lr, [sp, #12]
	movt	r4, #:upper16:.LANCHOR1
	bl	printk
	ldr	r0, .L1445+4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #2512]
	mov	r5, r0
	cmp	r3, #0
	beq	.L1444
	add	r2, r3, #152
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #1
	bne	.L1442
	ldr	r3, [r4, #2512]
	mov	r1, r5
	ldr	r0, .L1445+4
	str	r3, [r6, #124]
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC54
	ldr	r1, .L1445
	movt	r0, #:upper16:.LC54
	bl	printk
	mov	r0, #0
.L1439:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1444:
	movw	r0, #:lower16:.LC53
	ldr	r1, .L1445
	movt	r0, #:upper16:.LC53
	bl	printk
	ldr	r0, .L1445+4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #18
	b	.L1439
.L1442:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC55
	ldr	r1, .L1445
	movt	r0, #:upper16:.LC55
	bl	printk
	ldr	r0, .L1445+4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #15
	b	.L1439
.L1446:
	.align	2
.L1445:
	.word	.LANCHOR2+540
	.word	.LANCHOR1+2508
	.fnend
	.size	rndis_qc_open_dev, .-rndis_qc_open_dev
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_release, %function
mtp_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC56
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r0, #:upper16:.LC56
	str	lr, [sp, #4]
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2516]
	add	r2, r3, #108
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
	.fnend
	.size	mtp_release, .-mtp_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_open, %function
mtp_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC57
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	movt	r0, #:upper16:.LC57
	str	lr, [sp, #4]
	bl	printk
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r3, [r2, #2516]
	add	r0, r3, #108
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	ip, [r0]
	add	ip, ip, #1
	strex	r1, ip, [r0]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	ip, #1
	bne	.L1450
	ldr	r3, [r2, #2516]
	mov	r0, #0
	ldr	r2, [r3, #104]
	cmp	r2, #0
	strne	ip, [r3, #104]
	str	r3, [r4, #124]
.L1449:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1450:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r0]
	sub	r2, r2, #1
	strex	r1, r2, [r0]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #15
	b	.L1449
	.fnend
	.size	mtp_open, .-mtp_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_notify_complete, %function
ccid_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r1, [r1, #44]
	cmn	r1, #104
	beq	.L1455
	cmp	r1, #0
	beq	.L1455
	cmn	r1, #108
	beq	.L1455
	movw	r0, #:lower16:.LC58
	movt	r0, #:upper16:.LC58
	b	printk
.L1455:
	bx	lr
	.fnend
	.size	ccid_notify_complete, .-ccid_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_setup, %function
frmnet_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #120]
	.pad #20
	sub	sp, sp, #20
	ldr	r7, [r0, #128]
	ldrh	r9, [r1, #2]	@ unaligned
	ldrh	r6, [r1, #6]	@ unaligned
	cmp	r3, #0
	ldr	r5, [r7, #4]
	beq	.L1474
	ldrh	ip, [r1]	@ unaligned
	movw	r3, #8482
	mov	r4, r0
	mov	r8, r1
	rev16	ip, ip
	uxth	ip, ip
	cmp	ip, r3
	beq	.L1469
	movw	r3, #41217
	cmp	ip, r3
	beq	.L1470
	cmp	ip, #8448
	beq	.L1480
.L1476:
	mvn	r4, #94
.L1467:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1470:
	cmp	r9, #0
	bne	.L1476
	ldrh	r3, [r1, #4]	@ unaligned
	add	r10, r0, #132
	mov	r0, r10
	str	r3, [sp, #12]
	bl	_raw_spin_lock
	mov	ip, r4
	ldr	fp, [ip, #144]!
	cmp	fp, ip
	beq	.L1481
	mov	r0, fp
	sub	r8, fp, #8
	bl	list_del
	mov	r0, r10
	bl	_raw_spin_unlock
	ldmdb	fp, {r1, r4}
	ldr	r0, [r5]
	cmp	r6, r4
	movcc	r4, r6
	cmp	r4, r6
	mov	r2, r4
	movge	r6, #0
	movlt	r6, #1
	bl	memcpy
	ldr	r0, [fp, #-8]
	bl	kfree
	mov	r0, r8
	bl	kfree
.L1472:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	r4, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfi	r3, r6, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L1467
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC60
	mov	r2, r4
	movt	r1, #:upper16:.LC60
	add	r0, r0, #32
	bl	dev_err
	b	.L1467
.L1480:
	movw	r3, #:lower16:frmnet_cmd_complete
	mov	r4, r6
	str	r0, [r5, #32]
	movt	r3, #:upper16:frmnet_cmd_complete
	mov	r6, #0
	str	r3, [r5, #28]
	b	.L1472
.L1469:
	ldr	r8, [r0, #100]
	adds	r6, r6, #0
	movne	r6, #1
	cmp	r8, #0
	beq	.L1477
	ldrb	r1, [r0, #116]	@ zero_extendqisi2
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, r9
	movt	r3, #:upper16:.LANCHOR1
	mov	r4, #0
	add	r1, r1, r1, lsl #1
	add	r3, r3, r1, lsl #3
	ldrb	r1, [r3, #2532]	@ zero_extendqisi2
	blx	r8
	b	.L1472
.L1474:
	mvn	r4, #106
	b	.L1467
.L1477:
	mov	r4, r8
	b	.L1472
.L1481:
	ldr	r3, [sp, #12]
	movw	r0, #:lower16:.LC59
	mvn	r4, #94
	ldrb	r2, [r8, #1]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC59
	str	r3, [sp]
	mov	r3, r9
	ldrb	r1, [r8]	@ zero_extendqisi2
	str	r6, [sp, #4]
	bl	printk
	mov	r0, r10
	bl	_raw_spin_unlock
	b	.L1467
	.fnend
	.size	frmnet_setup, .-frmnet_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_notify_complete, %function
frmnet_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r1, #44]
	ldr	r4, [r5, #32]
	cmn	r1, #104
	beq	.L1484
	cmp	r1, #0
	bne	.L1509
.L1485:
	ldr	r3, [r4, #124]
	cmp	r3, #0
	bne	.L1510
.L1482:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1509:
	cmn	r1, #108
	bne	.L1505
.L1484:
	add	r5, r4, #132
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r3, #0
	mov	r0, r5
	str	r3, [r4, #152]
.L1507:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L1510:
	add	r6, r4, #132
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #152]
	cmp	r3, #0
	beq	.L1488
	sub	r3, r3, #1
	mov	r1, r0
	cmp	r3, #0
	mov	r0, r6
	str	r3, [r4, #152]
	beq	.L1507
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #136]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L1482
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r3, r4
	mov	r7, r0
	ldr	r5, [r3, #144]!
	cmp	r5, r3
	beq	.L1491
	ldr	r2, [r4, #152]
	cmp	r2, #0
	beq	.L1492
	sub	r2, r2, #1
	mov	r0, r5
	str	r2, [r4, #152]
	sub	r4, r5, #8
	bl	list_del
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r4
	bl	kfree
.L1491:
	mov	r1, r7
	b	.L1508
.L1488:
	mov	r1, r0
.L1508:
	mov	r0, r6
	b	.L1507
.L1505:
	movw	r0, #:lower16:.LC61
	movt	r0, #:upper16:.LC61
	bl	printk
	b	.L1485
.L1492:
	movw	r0, #:lower16:.LC62
	ldr	r1, .L1511
	movt	r0, #:upper16:.LC62
	bl	printk
	b	.L1491
.L1512:
	.align	2
.L1511:
	.word	.LANCHOR2+560
	.fnend
	.size	frmnet_notify_complete, .-frmnet_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_function_ctrlrequest, %function
mbim_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r1, #12]
	ldrh	r5, [r2, #6]	@ unaligned
	cmp	r3, #0
	bne	.L1522
	movw	r0, #:lower16:.LANCHOR0
	movt	r0, #:upper16:.LANCHOR0
	ldrb	r3, [r0, #190]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L1522
	ldrb	r3, [r2]	@ zero_extendqisi2
	mov	r4, r1
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #128
	beq	.L1524
	ldrh	r2, [r2, #4]	@ unaligned
	cmp	r3, #192
	cmpeq	r1, #165
	moveq	r3, #1
	movne	r3, #0
	cmp	r2, #4
	movne	r3, #0
	andeq	r3, r3, #1
	cmp	r3, #0
	beq	.L1522
	ldr	r3, [r4, #4]
	cmp	r5, #40
	add	r1, r0, #164
	movcc	r6, r5
	movcs	r6, #40
	mov	r2, r6
	ldr	r0, [r3]
	bl	memcpy
.L1516:
	ldr	r3, [r4, #4]
	cmp	r5, r6
	mov	r2, #32
	movle	r5, #0
	movgt	r5, #1
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfi	r1, r5, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r4, #4]
	str	r6, [r3, #4]
	ldr	r3, [r4]
	ldr	r1, [r4, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	blt	.L1525
.L1513:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1524:
	cmp	r1, #6
	beq	.L1526
.L1522:
	mvn	r6, #94
	b	.L1513
.L1526:
	ldrh	r3, [r2, #2]	@ unaligned
	lsr	r2, r3, #8
	cmp	r2, #3
	bne	.L1522
	uxtb	r3, r3
	cmp	r3, #238
	bne	.L1522
	ldr	r3, [r4, #4]
	cmp	r5, #18
	add	r1, r0, #204
	movcc	r6, r5
	movcs	r6, #18
	mov	r2, r6
	ldr	r0, [r3]
	bl	memcpy
	b	.L1516
.L1525:
	movw	r0, #:lower16:.LC63
	ldr	r1, .L1527
	movt	r0, #:upper16:.LC63
	bl	printk
	b	.L1513
.L1528:
	.align	2
.L1527:
	.word	.LANCHOR2+584
	.fnend
	.size	mbim_function_ctrlrequest, .-mbim_function_ctrlrequest
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_release, %function
mbim_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC64
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r1, .L1531
	movt	r0, #:upper16:.LC64
	str	lr, [sp, #4]
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2592]
	add	r2, r3, #92
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
.L1532:
	.align	2
.L1531:
	.word	.LANCHOR2+604
	.fnend
	.size	mbim_release, .-mbim_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_open, %function
mbim_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r0, #:lower16:.LC65
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r1
	movt	r0, #:upper16:.LC65
	ldr	r1, .L1542
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	printk
	ldr	r3, [r4, #2592]
	cmp	r3, #0
	beq	.L1540
	add	r2, r3, #92
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #1
	bne	.L1536
	movw	r0, #:lower16:.LC67
	ldr	r1, .L1542
	movt	r0, #:upper16:.LC67
	bl	printk
	ldr	r3, [r4, #2592]
	ldr	r2, [r3, #88]
	cmp	r2, #0
	beq	.L1541
.L1538:
	mov	r4, #0
	movw	r0, #:lower16:.LC69
	str	r3, [r5, #124]
	movt	r0, #:upper16:.LC69
	ldr	r1, .L1542
	str	r4, [r3, #232]
	bl	printk
	mov	r0, r4
.L1533:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1536:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC55
	ldr	r1, .L1542
	movt	r0, #:upper16:.LC55
	bl	printk
	mvn	r0, #15
	b	.L1533
.L1540:
	movw	r0, #:lower16:.LC66
	ldr	r1, .L1542
	movt	r0, #:upper16:.LC66
	bl	printk
	mvn	r0, #18
	b	.L1533
.L1541:
	movw	r0, #:lower16:.LC68
	ldr	r1, .L1542
	movt	r0, #:upper16:.LC68
	bl	printk
	ldr	r3, [r4, #2592]
	b	.L1538
.L1543:
	.align	2
.L1542:
	.word	.LANCHOR2+620
	.fnend
	.size	mbim_open, .-mbim_open
	.align	2
	.global	gsdio_tx_pull
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_tx_pull, %function
gsdio_tx_pull:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	sub	r8, r0, #60
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #36]
	.pad #8
	sub	sp, sp, #8
	cmp	r3, #0
	beq	.L1555
	sub	r5, r0, #56
	sub	r7, r0, #8
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r6, [r4, #-8]
	cmp	r7, r6
	beq	.L1549
	ldr	r3, [r4, #48]
	cmp	r3, #0
	bne	.L1556
.L1549:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irq
.L1555:
	movw	r0, #:lower16:.LC70
	ldr	r1, .L1559
	movt	r0, #:upper16:.LC70
	bl	printk
	cmp	r8, #0
	beq	.L1557
	ldr	r3, [r4, #60]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L1544
.L1548:
	b	.L1548
.L1544:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1556:
	ldr	r3, [r4, #36]
	mov	r0, r6
	sub	r10, r6, #36
	ldr	r9, [r3, #88]
	bl	list_del
	ldr	r3, [r4, #16]
	mov	r0, r5
	sub	r3, r3, #1
	str	r3, [r4, #16]
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	_raw_spin_lock_irq
	mvn	r1, #18
	movw	r0, #:lower16:.LC71
	ldr	r3, [r4, #-60]
	mov	r2, r8
	movt	r0, #:upper16:.LC71
	str	r1, [sp]
	ldr	r1, .L1559
	bl	printk
	ldr	r3, [r4, #36]
	cmp	r3, #0
	beq	.L1558
	mov	r1, r7
	mov	r0, r6
	ldr	r2, [r4, #-8]
	bl	__list_add
	ldr	r3, [r4, #16]
	add	r3, r3, #1
	str	r3, [r4, #16]
	b	.L1549
.L1557:
	ldr	r1, .L1559+4
	movw	r0, #:lower16:.LC12
	movt	r0, #:upper16:.LC12
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L1558:
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r9, #8]
	mov	r1, r10
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	b	.L1549
.L1560:
	.align	2
.L1559:
	.word	.LANCHOR2+632
	.word	.LANCHOR2+648
	.fnend
	.size	gsdio_tx_pull, .-gsdio_tx_pull
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_open_work, %function
gsdio_open_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r2, r0
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	r1, .L1563
	ldr	ip, [r2, #-4]
	.pad #12
	sub	sp, sp, #12
	movw	r0, #:lower16:.LC72
	ldr	r3, [r2, #-124]!
	movt	r0, #:upper16:.LC72
	ldr	ip, [ip]
	str	ip, [sp]
	bl	printk
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L1564:
	.align	2
.L1563:
	.word	.LANCHOR2+668
	.fnend
	.size	gsdio_open_work, .-gsdio_open_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ep0_queue, %function
ep0_queue:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r2, #32
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r0, #48]
	ldr	r1, [r4, #52]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	ldr	r3, [r4, #48]
	cmp	r0, #0
	cmnne	r0, #108
	mov	r5, r0
	str	r4, [r3]
	beq	.L1565
	mov	r3, r0
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC73
	ldr	r2, [r4, #48]
	movt	r1, #:upper16:.LC73
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_warn
.L1565:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ep0_queue, .-ep0_queue
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	start_transfer, %function
start_transfer:
	.fnstart
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	mov	r4, r1
	strd	r6, [sp, #8]
	ldr	r6, [sp, #24]
	mov	r7, r3
	str	r8, [sp, #16]
	mov	r8, r2
	str	lr, [sp, #20]
	ldr	r0, [r0, #88]
	add	r0, r0, #44
	bl	_raw_spin_lock_irq
	mov	r2, #1
	mov	r3, #2
	str	r2, [r7]
	str	r3, [r6]
	ldr	r0, [r5, #88]
	add	r0, r0, #44
	bl	_raw_spin_unlock_irq
	ldr	r3, [r4, #8]
	mov	r1, r8
	mov	r0, r4
	mov	r2, #208
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L1571
	mov	r2, #0
	cmn	r3, #108
	str	r2, [r7]
	str	r2, [r6]
	beq	.L1571
	cmn	r3, #95
	bne	.L1575
	ldr	r2, [r8, #4]
	cmp	r2, #0
	beq	.L1571
.L1575:
	ldr	r0, [r5, #84]
	movw	r1, #:lower16:.LC73
	ldr	r2, [r4, #4]
	movt	r1, #:upper16:.LC73
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_warn
.L1571:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	start_transfer, .-start_transfer
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	start_out_transfer, %function
start_out_transfer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r4, [r0, #8]
	.pad #8
	sub	sp, sp, #8
	cmp	r4, #0
	beq	.L1584
	add	ip, r1, #4
	ldr	r2, [r1, #24]
	add	r3, r1, #28
	ldr	r1, [r4, #104]
	mov	r0, r4
	str	ip, [sp]
	bl	start_transfer
	mov	r0, #1
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1584:
	ldr	r0, [r0]
	movw	r1, #:lower16:.LC74
	movw	r3, #805
	ldr	r2, .L1587
	movt	r1, #:upper16:.LC74
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC75
	movw	r1, #550
	movt	r0, #:upper16:.LC75
	bl	warn_slowpath_null
	mov	r0, r4
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1588:
	.align	2
.L1587:
	.word	.LANCHOR2+684
	.fnend
	.size	start_out_transfer, .-start_out_transfer
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	start_in_transfer, %function
start_in_transfer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r4, [r0, #8]
	.pad #8
	sub	sp, sp, #8
	cmp	r4, #0
	beq	.L1590
	add	ip, r1, #4
	ldr	r2, [r1, #16]
	add	r3, r1, #20
	ldr	r1, [r4, #100]
	mov	r0, r4
	str	ip, [sp]
	bl	start_transfer
	mov	r0, #1
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1590:
	ldr	r0, [r0]
	movw	r1, #:lower16:.LC74
	mov	r3, #796
	ldr	r2, .L1593
	movt	r1, #:upper16:.LC74
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC75
	movw	r1, #550
	movt	r0, #:upper16:.LC75
	bl	warn_slowpath_null
	mov	r0, r4
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1594:
	.align	2
.L1593:
	.word	.LANCHOR2+704
	.fnend
	.size	start_in_transfer, .-start_in_transfer
	.section	.text.unlikely,"ax",%progbits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	override_id, %function
override_id:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	mov	r4, r1
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L1596
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bls	.L1597
	ldr	r0, [r0]
	movw	r1, #:lower16:.LC76
	movt	r1, #:upper16:.LC76
	add	r0, r0, #32
	bl	dev_warn
	b	.L1596
.L1597:
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r0, #48]
	strb	r3, [r1]
.L1596:
	ldrb	r0, [r4]	@ zero_extendqisi2
	pop	{r4, pc}
	.fnend
	.size	override_id, .-override_id
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_response_complete, %function
rmnet_sdio_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	cmn	r3, #104
	bxeq	lr
	cmp	r3, #0
	bxeq	lr
	cmn	r3, #108
	bxeq	lr
	mov	ip, r1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC77
	str	lr, [sp, #4]
	ldr	r2, [r0, #4]
	.pad #8
	sub	sp, sp, #8
	ldr	r4, [ip, #32]
	movt	r1, #:upper16:.LC77
	ldr	lr, [ip, #4]
	ldr	ip, [ip, #48]
	ldr	r0, [r4, #84]
	ldr	r0, [r0]
	stm	sp, {ip, lr}
	add	r0, r0, #32
	bl	_dev_info
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_sdio_response_complete, .-rmnet_sdio_response_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_response_complete, %function
rmnet_mux_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	cmn	r3, #104
	bxeq	lr
	cmp	r3, #0
	bxeq	lr
	cmn	r3, #108
	bxeq	lr
	mov	ip, r1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC78
	str	lr, [sp, #4]
	ldr	r2, [r0, #4]
	.pad #8
	sub	sp, sp, #8
	ldr	r4, [ip, #32]
	movt	r1, #:upper16:.LC78
	ldr	lr, [ip, #4]
	ldr	ip, [ip, #48]
	ldr	r0, [r4, #84]
	ldr	r0, [r0]
	stm	sp, {ip, lr}
	add	r0, r0, #32
	bl	_dev_info
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_mux_response_complete, .-rmnet_mux_response_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_show_suspended, %function
composite_show_suspended:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldrb	r2, [r0, #16]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC79
	mov	r0, r4
	movt	r1, #:upper16:.LC79
	and	r2, r2, #1
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	composite_show_suspended, .-composite_show_suspended
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb30en_show, %function
usb30en_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movw	r1, #:lower16:.LC80
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, r2
	movt	r1, #:upper16:.LC80
	ldrb	r2, [r3, #2596]	@ zero_extendqisi2
	b	sprintf
	.fnend
	.size	usb30en_show, .-usb30en_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_show_ro, %function
fsg_show_ro:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r3, r0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	ldr	r2, [r3, #-48]
	movw	r1, #:lower16:.LC79
	movt	r1, #:upper16:.LC79
	cmp	r2, #0
	ldrb	r2, [r3, #-24]	@ zero_extendqisi2
	ubfxne	r2, r2, #1, #1
	andeq	r2, r2, #1
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	fsg_show_ro, .-fsg_show_ro
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_show_nofua, %function
fsg_show_nofua:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC81
	str	lr, [sp, #4]
	ldrb	r3, [r0, #-24]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC81
	mov	r0, r2
	lsr	r2, r3, #7
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	fsg_show_nofua, .-fsg_show_nofua
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_show_cdrom, %function
fsg_show_cdrom:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC79
	str	lr, [sp, #4]
	ldrb	r3, [r0, #-24]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC79
	mov	r0, r2
	ubfx	r2, r3, #3, #1
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	fsg_show_cdrom, .-fsg_show_cdrom
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	sua_version_info_show, %function
sua_version_info_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r1, #:lower16:.LC82
	mov	r0, r4
	movt	r1, #:upper16:.LC82
	ldr	r2, [r3, #96]
	add	r2, r2, #235
	bl	sprintf
	mov	r5, r0
	movw	r0, #:lower16:.LC83
	ldr	r1, .L1644
	mov	r2, r4
	movt	r0, #:upper16:.LC83
	bl	printk
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1645:
	.align	2
.L1644:
	.word	.LANCHOR2+724
	.fnend
	.size	sua_version_info_show, .-sua_version_info_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_product_show, %function
mass_storage_product_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r1, #:lower16:.LC84
	mov	r0, r4
	movt	r1, #:upper16:.LC84
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r2, [r3, #96]
	add	r2, r2, #218
	b	sprintf
	.fnend
	.size	mass_storage_product_show, .-mass_storage_product_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_vendor_show, %function
mass_storage_vendor_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r1, #:lower16:.LC84
	mov	r0, r4
	movt	r1, #:upper16:.LC84
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r2, [r3, #96]
	add	r2, r2, #209
	b	sprintf
	.fnend
	.size	mass_storage_vendor_show, .-mass_storage_vendor_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_instances_show, %function
acm_instances_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r1, #:lower16:.LC79
	mov	r0, r4
	movt	r1, #:upper16:.LC79
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r2, [r3]
	b	sprintf
	.fnend
	.size	acm_instances_show, .-acm_instances_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_alsa_show, %function
midi_alsa_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r1, #:lower16:.LC85
	mov	r0, r4
	movt	r1, #:upper16:.LC85
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldrd	r2, [r3]
	b	sprintf
	.fnend
	.size	midi_alsa_show, .-midi_alsa_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_disconnect, %function
composite_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r0, r0, #32
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	mov	r8, r0
	mov	r0, #0
	bl	set_string_mode
	movw	r0, #:lower16:.LC86
	ldr	r1, .L1674
	add	r5, r8, #60
	movt	r0, #:upper16:.LC86
	bl	printk
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r8, #12]
	mov	r6, r0
	cmp	r3, #0
	beq	.L1655
	ldr	r4, [r3, #36]!
	cmp	r4, r3
	sub	r4, r4, #72
	beq	.L1656
	mov	r7, #0
.L1658:
	ldr	r3, [r4, #48]
	mov	r0, r4
	cmp	r3, #0
	beq	.L1657
	blx	r3
.L1657:
	str	r7, [r4, #80]
	ldr	r3, [r8, #12]
	ldr	r4, [r4, #72]
	add	r3, r3, #36
	cmp	r4, r3
	sub	r4, r4, #72
	bne	.L1658
.L1656:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2236]
	str	r2, [r8, #12]
	str	r2, [r8, #56]
	ldr	r3, [r3, #32]
	cmp	r3, r2
	beq	.L1660
.L1659:
	mov	r0, r8
	blx	r3
.L1661:
	ldr	r3, [r8, #56]
	cmp	r3, #0
	beq	.L1660
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC87
	movt	r1, #:upper16:.LC87
	add	r0, r0, #32
	bl	_dev_info
	mov	r3, #0
	str	r3, [r8, #56]
.L1660:
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L1655:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2236]
	ldr	r3, [r3, #32]
	cmp	r3, #0
	bne	.L1659
	b	.L1661
.L1675:
	.align	2
.L1674:
	.word	.LANCHOR2+748
	.fnend
	.size	composite_disconnect, .-composite_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	count_configs, %function
count_configs:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	movls	r6, #0
	movls	r7, r6
	bls	.L1677
	ldr	r6, [r3, #16]
	cmp	r6, #3
	beq	.L1686
	sub	r6, r6, #5
	mov	r7, #0
	clz	r6, r6
	lsr	r6, r6, #5
.L1678:
	cmp	r1, #6
	eoreq	r7, r7, #1
.L1677:
	mov	r5, r0
	ldr	r4, [r5, #36]!
	cmp	r5, r4
	sub	r4, r4, #28
	moveq	r0, #0
	beq	.L1676
	mov	r3, #0
	b	.L1684
.L1700:
	tst	r2, #1
	beq	.L1681
.L1682:
	bl	count_multi_config
	mov	r3, r0
.L1681:
	ldr	r4, [r4, #28]
	cmp	r5, r4
	sub	r4, r4, #28
	beq	.L1699
.L1684:
	cmp	r6, #0
	mov	r0, r4
	ldrb	r2, [r4, #45]	@ zero_extendqisi2
	add	r1, r3, #1
	bne	.L1700
	cmp	r7, #0
	beq	.L1683
	tst	r2, #2
	bne	.L1682
	ldr	r4, [r4, #28]
	cmp	r5, r4
	sub	r4, r4, #28
	bne	.L1684
.L1699:
	mov	r0, r3
.L1676:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1683:
	tst	r2, #4
	bne	.L1682
	b	.L1681
.L1686:
	mov	r7, #1
	mov	r6, #0
	b	.L1678
	.fnend
	.size	count_configs, .-count_configs
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_qc_stop, %function
eth_qc_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r0, #576]
	ldr	r6, [r0, #1156]
	cmp	r1, #0
	beq	.L1713
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
.L1704:
	add	r5, r4, #1152
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1156]
	mov	r7, r0
	cmp	r3, #0
	beq	.L1703
	ldr	r3, [r6, #116]
	cmp	r3, #0
	beq	.L1703
	mov	r0, r6
	blx	r3
.L1703:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1713:
	movw	r0, #:lower16:.LC88
	movw	r1, #1847
	movt	r0, #:upper16:.LC88
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC89
	movt	r0, #:upper16:.LC89
	bl	printk
	b	.L1704
	.fnend
	.size	eth_qc_stop, .-eth_qc_stop
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_send_cpkt_tomodem, %function
ghsuart_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	ip, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r3, #1860]
	cmp	r0, r1
	bcs	.L1725
	mov	r1, #84
	mla	r3, r1, r0, r3
	ldr	r4, [r3, #1864]
	cmp	r4, #0
	beq	.L1726
	ldr	r0, [r4, #88]
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	beq	.L1727
	mov	r1, #32
	mov	r0, r2
	mov	r6, r2
	bl	__kmalloc
	subs	r7, r0, #0
	mvneq	r0, #11
	beq	.L1714
	mov	r2, r6
	mov	r1, r5
	bl	memcpy
	ldr	r1, .L1729
	ldr	r0, .L1729+4
	bl	___ratelimit
	cmp	r0, #0
	bne	.L1728
.L1719:
	ldr	r3, [r4, #104]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #104]
	bl	kfree
	mvn	r0, #18
.L1714:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1727:
	ldr	r3, [r4, #104]
	add	r3, r3, #1
	str	r3, [r4, #104]
	b	.L1714
.L1726:
	movw	r0, #:lower16:.LC12
	ldr	r1, .L1729
	movt	r0, #:upper16:.LC12
	bl	printk
	mvn	r0, #18
	b	.L1714
.L1725:
	movw	r0, #:lower16:.LC17
	mov	r2, ip
	ldr	r1, .L1729
	movt	r0, #:upper16:.LC17
	bl	printk
	mvn	r0, #18
	b	.L1714
.L1728:
	movw	r0, #:lower16:.LC90
	mvn	r2, #18
	ldr	r1, .L1729
	movt	r0, #:upper16:.LC90
	bl	printk
	b	.L1719
.L1730:
	.align	2
.L1729:
	.word	.LANCHOR2+772
	.word	.LANCHOR0+224
	.fnend
	.size	ghsuart_send_cpkt_tomodem, .-ghsuart_send_cpkt_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_disable, %function
qdss_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #188
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #92]
	mov	r1, r0
	cmp	r3, #0
	beq	.L1734
	mov	r3, #0
	mov	r0, r5
	str	r3, [r4, #92]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	bl	qdss_eps_disable
	ldr	r6, [sp, #8]
	add	r2, r4, #172
	mov	r0, #4
	ldr	r1, [r4, #196]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on
.L1734:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	qdss_disable, .-qdss_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_disable, %function
rmnet_smd_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	mov	r3, #0
	str	lr, [sp, #4]
	ldr	r0, [r0, #96]
	str	r3, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L1736
	blx	r2
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
.L1736:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L1737
	blx	r2
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
.L1737:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L1738
	blx	r2
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
.L1738:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	lr, [sp, #4]
	add	r2, r4, #408
	mov	r0, #4
	ldr	r1, [r4, #388]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	queue_work_on
	.fnend
	.size	rmnet_smd_disable, .-rmnet_smd_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_ch_probe, %function
rmnet_smd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, #4
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r3, #2600]
	ldr	r1, [r3, #388]
	add	r2, r3, #392
	bl	queue_work_on
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_smd_ch_probe, .-rmnet_smd_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_read_complete, %function
gs_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r5, #48]
	mov	r6, r0
	add	r2, r4, #48
	add	r0, r5, #36
	ldr	r1, [r4, #52]
	ldr	r3, [r4, #128]
	add	r3, r3, ip
	str	r3, [r4, #128]
	bl	__list_add
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #60
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #2604]
	bl	queue_work_on
	ldr	lr, [sp, #12]
	mov	r1, r6
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	gs_read_complete, .-gs_read_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_unthrottle, %function
gs_unthrottle:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #272]
	cmp	r4, #0
	beq	.L1753
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #4]
	mov	r5, r0
	cmp	r3, #0
	beq	.L1755
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #60
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #2604]
	bl	queue_work_on
.L1755:
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L1753:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_unthrottle, .-gs_unthrottle
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_resume, %function
android_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	add	r0, r0, #32
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	movw	r3, #:lower16:.LANCHOR1
	ldr	r2, .L1770
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2228]
	cmp	r3, r2
	sub	r4, r3, #520
	bne	.L1763
	b	.L1761
.L1769:
	ldr	r3, [r4, #520]
	cmp	r3, r2
	sub	r4, r3, #520
	beq	.L1761
.L1763:
	ldr	r3, [r3, #-512]
	cmp	r0, r3
	bne	.L1769
.L1761:
	add	r5, r0, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r4, #50]	@ zero_extendqisi2
	mov	r7, r0
	cmp	r3, #0
	beq	.L1764
	mov	r0, #0
	movw	r3, #:lower16:system_wq
	movt	r3, #:upper16:system_wq
	add	r2, r4, #180
	strb	r0, [r4, #50]
	ldr	r1, [r3]
	mov	r0, #4
	bl	queue_work_on
.L1764:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, r6
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	composite_resume
.L1771:
	.align	2
.L1770:
	.word	.LANCHOR1+2228
	.fnend
	.size	android_resume, .-android_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_suspend, %function
android_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	add	r0, r0, #32
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	movw	r3, #:lower16:.LANCHOR1
	ldr	r2, .L1779
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2228]
	cmp	r3, r2
	sub	r4, r3, #520
	bne	.L1775
	b	.L1773
.L1778:
	ldr	r3, [r4, #520]
	cmp	r3, r2
	sub	r4, r3, #520
	beq	.L1773
.L1775:
	ldr	r3, [r3, #-512]
	cmp	r0, r3
	bne	.L1778
.L1773:
	add	r5, r0, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r4, #50]	@ zero_extendqisi2
	mov	r7, r0
	cmp	r3, #0
	bne	.L1776
	mov	r0, #1
	movw	r3, #:lower16:system_wq
	movt	r3, #:upper16:system_wq
	add	r2, r4, #180
	strb	r0, [r4, #50]
	ldr	r1, [r3]
	mov	r0, #4
	bl	queue_work_on
.L1776:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, r6
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	composite_suspend
.L1780:
	.align	2
.L1779:
	.word	.LANCHOR1+2228
	.fnend
	.size	android_suspend, .-android_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	kill_all_hid_devices, %function
kill_all_hid_devices:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	add	r7, r0, #88
	mov	r6, r0
	strd	r8, [sp, #16]
	add	r9, r0, #1760
	mov	r0, r7
	str	r10, [sp, #24]
	add	r9, r9, #8
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r6, #1768]
	mov	r8, r0
	cmp	r5, r9
	ldr	r4, [r5]
	beq	.L1782
	add	r10, r6, #1776
	add	r10, r10, #8
	b	.L1783
.L1786:
	mov	r4, r3
.L1783:
	mov	r0, r5
	bl	list_del
	mov	r0, r5
	mov	r1, r10
	ldr	r2, [r6, #1784]
	bl	__list_add
	cmp	r9, r4
	mov	r5, r4
	ldr	r3, [r4]
	bne	.L1786
.L1782:
	mov	r9, r6
	ldr	r5, [r9, #1776]!
	cmp	r5, r9
	ldr	r4, [r5]
	beq	.L1784
	add	r10, r9, #8
	b	.L1785
.L1787:
	mov	r4, r3
.L1785:
	mov	r0, r5
	bl	list_del
	mov	r0, r5
	mov	r1, r10
	ldr	r2, [r6, #1784]
	bl	__list_add
	cmp	r9, r4
	mov	r5, r4
	ldr	r3, [r4]
	bne	.L1787
.L1784:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:system_wq
	add	r2, r6, #1744
	ldrd	r4, [sp]
	movt	r3, #:upper16:system_wq
	ldrd	r6, [sp, #8]
	add	r2, r2, #8
	ldrd	r8, [sp, #16]
	mov	r0, #4
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, [r3]
	b	queue_work_on
	.fnend
	.size	kill_all_hid_devices, .-kill_all_hid_devices
	.align	2
	.global	gsdio_write_complete
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_write_complete, %function
gsdio_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	.pad #8
	sub	sp, sp, #8
	cmp	r4, #0
	beq	.L1801
	add	r6, r4, #4
	mov	r7, r0
	mov	r0, r6
	mov	r5, r1
	bl	_raw_spin_lock_irqsave
	mov	r1, r4
	mov	r8, r0
	ldr	r2, [r1, #52]!
	add	r0, r5, #36
	bl	__list_add
	ldr	r3, [r4, #76]
	add	r3, r3, #1
	str	r3, [r4, #76]
	ldr	r3, [r5, #44]
	cmn	r3, #108
	beq	.L1792
	cmp	r3, #0
	bne	.L1802
.L1793:
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #60
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #2608]
	bl	queue_work_on
.L1792:
	mov	r1, r8
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L1802:
	ldr	ip, [r7, #4]
	movw	r0, #:lower16:.LC91
	mov	r2, r4
	ldr	r1, .L1803
	movt	r0, #:upper16:.LC91
	str	ip, [sp]
	str	r3, [sp, #4]
	ldr	r3, [r4]
	bl	printk
	b	.L1793
.L1801:
	ldr	r1, .L1803
	movw	r0, #:lower16:.LC12
	movt	r0, #:upper16:.LC12
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L1804:
	.align	2
.L1803:
	.word	.LANCHOR2+800
	.fnend
	.size	gsdio_write_complete, .-gsdio_write_complete
	.align	2
	.global	gsdio_ctrl_notify_modem
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ctrl_notify_modem, %function
gsdio_ctrl_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r3, [r4]
	str	lr, [sp, #12]
	cmp	r1, r3
	bcs	.L1818
	cmp	r0, #0
	beq	.L1819
	mov	r3, #104
	lsl	r2, r2, #1
	mla	r1, r3, r1, r4
	and	r3, r2, #2
	ldr	r5, [r1, #24]
	ldr	r2, [r5, #180]
	cmp	r2, r3
	beq	.L1805
	ldr	r2, [r5, #108]
	str	r3, [r5, #180]
	cmp	r2, #0
	beq	.L1820
	cmp	r3, #0
	beq	.L1810
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L1810
	ldr	r1, [r5, #176]
	blx	r3
.L1810:
	add	r2, r5, #80
	ldr	r1, [r4, #2608]
	mov	r0, #4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on
.L1805:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1819:
	movw	r0, #:lower16:.LC93
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC93
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, .L1821
	b	printk
.L1818:
	movw	r0, #:lower16:.LC92
	mov	r2, r1
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC92
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, .L1821
	b	printk
.L1820:
	movw	r0, #:lower16:.LC94
	mov	r2, r5
	ldr	r3, [r5]
	ldr	r1, .L1821
	movt	r0, #:upper16:.LC94
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L1822:
	.align	2
.L1821:
	.word	.LANCHOR2+824
	.fnend
	.size	gsdio_ctrl_notify_modem, .-gsdio_ctrl_notify_modem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_write_complete, %function
gsmd_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r7, [r0]
	.pad #12
	sub	sp, sp, #12
	cmp	r7, #0
	beq	.L1835
	add	r6, r7, #4
	mov	r5, r0
	mov	r0, r6
	mov	r4, r1
	bl	_raw_spin_lock
	ldr	r3, [r7, #72]
	ldr	r3, [r3, #8]
	tst	r3, #1
	beq	.L1825
	ldr	r3, [r4, #44]
	cmn	r3, #108
	beq	.L1825
	cmp	r3, #0
	bne	.L1836
.L1827:
	mov	r1, r7
	add	r0, r4, #36
	ldr	r2, [r1, #44]!
	bl	__list_add
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r7, #52
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #2612]
	bl	queue_work_on
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock
.L1825:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r4]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	bx	r3	@ indirect register sibling call
.L1835:
	ldr	r1, .L1837
	movw	r0, #:lower16:.LC12
	movt	r0, #:upper16:.LC12
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	printk
.L1836:
	ldr	ip, [r5, #4]
	movw	r0, #:lower16:.LC91
	mov	r2, r7
	ldr	r1, .L1837
	movt	r0, #:upper16:.LC91
	str	ip, [sp]
	str	r3, [sp, #4]
	ldr	r3, [r7]
	bl	printk
	b	.L1827
.L1838:
	.align	2
.L1837:
	.word	.LANCHOR2+848
	.fnend
	.size	gsmd_write_complete, .-gsmd_write_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_read_complete, %function
gsmd_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0]
	cmp	r7, #0
	beq	.L1847
	add	r6, r7, #4
	mov	r5, r0
	mov	r0, r6
	mov	r4, r1
	bl	_raw_spin_lock
	ldr	r3, [r7, #72]
	ldr	r3, [r3, #8]
	tst	r3, #1
	beq	.L1841
	ldr	r3, [r4, #44]
	cmn	r3, #108
	beq	.L1841
	add	r0, r4, #36
	add	r2, r7, #20
	ldr	r1, [r7, #24]
	bl	__list_add
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r7, #28
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #2612]
	bl	queue_work_on
	ldrd	r4, [sp]
	mov	r0, r6
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L1841:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r4]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L1847:
	movw	r0, #:lower16:.LC12
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC12
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L1848
	b	printk
.L1849:
	.align	2
.L1848:
	.word	.LANCHOR2+868
	.fnend
	.size	gsmd_read_complete, .-gsmd_read_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_set_hid_report_desc, %function
acc_complete_set_hid_report_desc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	ldr	r3, [r1, #44]
	ldr	r5, [r1, #48]
	ldr	r6, [r4, #12]
	cmp	r3, #0
	bne	.L1854
	ldr	r0, [r4, #20]
	mov	r2, r5
	ldr	r3, [r4, #28]
	ldr	r1, [r1]
	add	r0, r0, r3
	bl	memcpy
	ldr	r3, [r4, #24]
	ldr	r2, [r4, #28]
	add	r5, r5, r2
	cmp	r5, r3
	str	r5, [r4, #28]
	beq	.L1855
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1855:
	movw	r3, #:lower16:system_wq
	add	r2, r6, #1744
	ldrd	r4, [sp]
	movt	r3, #:upper16:system_wq
	ldr	r6, [sp, #8]
	add	r2, r2, #8
	ldr	lr, [sp, #12]
	mov	r0, #4
	add	sp, sp, #16
	ldr	r1, [r3]
	b	queue_work_on
.L1854:
	movw	r0, #:lower16:.LC95
	ldrd	r4, [sp]
	mov	r1, r3
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC95
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
	.fnend
	.size	acc_complete_set_hid_report_desc, .-acc_complete_set_hid_report_desc
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_setup, %function
rmnet_sdio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r0, #192]
	ldrh	r8, [r1, #2]	@ unaligned
	ldrh	r6, [r1, #6]	@ unaligned
	ldr	r7, [r2, #24]
	cmp	r3, #0
	ldr	r5, [r7, #4]
	beq	.L1865
	ldrh	r3, [r1]	@ unaligned
	movw	r2, #8482
	mov	r9, r1
	mov	r4, r0
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r2
	beq	.L1858
	movw	r2, #41217
	cmp	r3, r2
	beq	.L1859
	cmp	r3, #8448
	beq	.L1870
.L1867:
	mvn	r4, #94
.L1856:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1859:
	cmp	r8, #0
	bne	.L1867
	ldrh	r3, [r1, #4]	@ unaligned
	add	r10, r0, #188
	mov	r0, r10
	str	r3, [sp, #20]
	bl	_raw_spin_lock
	mov	r2, r4
	ldr	fp, [r2, #120]!
	cmp	fp, r2
	beq	.L1871
	mov	r0, fp
	sub	r9, fp, #8
	bl	list_del
	ldr	r2, [r4, #128]
	mov	r0, r10
	sub	r2, r2, #1
	str	r2, [r4, #128]
	bl	_raw_spin_unlock
	ldmdb	fp, {r1, r8}
	ldr	r0, [r5]
	cmp	r6, r8
	movcc	r8, r6
	mov	r2, r8
	bl	memcpy
	movw	r2, #:lower16:rmnet_sdio_response_complete
	str	r4, [r5, #32]
	movt	r2, #:upper16:rmnet_sdio_response_complete
	str	r2, [r5, #28]
	ldr	r0, [fp, #-8]
	bl	kfree
	mov	r0, r9
	bl	kfree
	ldr	r3, [r4, #368]
	cmp	r8, r6
	movge	r6, #0
	movlt	r6, #1
	add	r3, r3, #1
	str	r3, [r4, #368]
.L1861:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	r8, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfi	r3, r6, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L1856
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC60
	mov	r2, r4
	movt	r1, #:upper16:.LC60
	add	r0, r0, #32
	bl	dev_err
	b	.L1856
.L1870:
	movw	r3, #:lower16:rmnet_sdio_command_complete
	mov	r8, r6
	str	r0, [r5, #32]
	movt	r3, #:upper16:rmnet_sdio_command_complete
	mov	r6, #0
	str	r3, [r5, #28]
	b	.L1861
.L1858:
	ldr	r3, [r0, #332]
	tst	r8, #1
	add	r2, r0, #336
	mov	r8, #0
	orrne	r3, r3, #2
	biceq	r3, r3, #2
	str	r3, [r0, #332]
	mov	r0, #4
	ldr	r1, [r4, #200]
	bl	queue_work_on
	subs	r6, r6, r8
	movne	r6, #1
	b	.L1861
.L1865:
	mvn	r4, #106
	b	.L1856
.L1871:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC96
	str	r8, [sp]
	ldr	r2, [sp, #20]
	movt	r1, #:upper16:.LC96
	mvn	r4, #94
	ldrb	r3, [r9, #1]	@ zero_extendqisi2
	add	r0, r0, #32
	str	r2, [sp, #4]
	ldrb	r2, [r9]	@ zero_extendqisi2
	str	r6, [sp, #8]
	bl	_dev_info
	mov	r0, r10
	bl	_raw_spin_unlock
	b	.L1856
	.fnend
	.size	rmnet_sdio_setup, .-rmnet_sdio_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_disconnect, %function
android_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	add	r0, r0, #32
	str	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	ldr	r3, [r6, #2228]
	mov	r2, r0
	ldr	r1, .L1878
	sub	r4, r3, #520
	cmp	r3, r1
	bne	.L1875
	b	.L1873
.L1877:
	ldr	r3, [r4, #520]
	cmp	r3, r1
	sub	r4, r3, #520
	beq	.L1873
.L1875:
	ldr	r3, [r3, #-512]
	cmp	r2, r3
	bne	.L1877
.L1873:
	mov	r0, r5
	add	r5, r2, #60
	bl	composite_disconnect
	ldr	r0, [r6, #2504]
	bl	kill_all_hid_devices
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r2, #0
	movw	r3, #:lower16:system_wq
	movt	r3, #:upper16:system_wq
	mov	r6, r0
	strb	r2, [r4, #48]
	ldr	r1, [r3]
	add	r2, r4, #180
	mov	r0, #4
	bl	queue_work_on
	ldr	lr, [sp, #12]
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L1879:
	.align	2
.L1878:
	.word	.LANCHOR1+2228
	.fnend
	.size	android_disconnect, .-android_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_probe, %function
ghsuart_ctrl_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r2, #:lower16:.LANCHOR1
	mov	r1, #84
	str	r6, [sp, #8]
	movt	r2, #:upper16:.LANCHOR1
	str	lr, [sp, #12]
	ldr	r3, [r0, #4]
	mov	r0, #1
	mla	r3, r1, r3, r2
	ldr	r4, [r3, #1864]
	add	r1, r4, #88
	add	r5, r4, #8
	bl	_set_bit
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r6, r0
	cmp	r3, #0
	beq	.L1881
	add	r2, r4, #36
	mov	r0, #4
	ldr	r1, [r4, #32]
	bl	queue_work_on
.L1881:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ghsuart_ctrl_probe, .-ghsuart_ctrl_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_probe, %function
ghsuart_data_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r2, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r0, #4]
	ldr	r1, [r2, #2032]
	cmp	r1, r3
	bls	.L1891
	mov	r1, #84
	mov	r0, #1
	mla	r2, r1, r3, r2
	ldr	r4, [r2, #2036]
	add	r1, r4, #188
	bl	_set_bit
	ldr	r0, [r4, #4]
	cmp	r0, #0
	beq	.L1886
	add	r2, r4, #112
	mov	r0, #4
	ldr	r1, [r4, #108]
	bl	queue_work_on
	mov	r0, #0
.L1886:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1891:
	movw	r0, #:lower16:.LC97
	mov	r2, r3
	ldr	r1, .L1892
	movt	r0, #:upper16:.LC97
	bl	printk
	mvn	r0, #21
	b	.L1886
.L1893:
	.align	2
.L1892:
	.word	.LANCHOR2+888
	.fnend
	.size	ghsuart_data_probe, .-ghsuart_data_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_suspend, %function
ecm_qc_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, #4
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #2616]
	ldr	r1, [r3, #2620]
	add	r2, r2, #200
	b	queue_work_on
	.fnend
	.size	ecm_qc_suspend, .-ecm_qc_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_suspend, %function
rndis_qc_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	b	ecm_qc_suspend
	.fnend
	.size	rndis_qc_suspend, .-rndis_qc_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_suspend, %function
mbim_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC98
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r1, .L1898
	movt	r0, #:upper16:.LC98
	str	lr, [sp, #4]
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	ldr	r4, [sp]
	mov	r0, #4
	movt	r3, #:upper16:.LANCHOR1
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r2, [r3, #2616]
	ldr	r1, [r3, #2620]
	add	r2, r2, #200
	b	queue_work_on
.L1899:
	.align	2
.L1898:
	.word	.LANCHOR2+908
	.fnend
	.size	mbim_suspend, .-mbim_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_resume, %function
ecm_qc_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, #4
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #2616]
	ldr	r1, [r3, #2620]
	add	r2, r2, #216
	b	queue_work_on
	.fnend
	.size	ecm_qc_resume, .-ecm_qc_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_resume, %function
rndis_qc_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	b	ecm_qc_resume
	.fnend
	.size	rndis_qc_resume, .-rndis_qc_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_resume, %function
mbim_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC99
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r1, .L1904
	movt	r0, #:upper16:.LC99
	str	lr, [sp, #4]
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	ldr	r4, [sp]
	mov	r0, #4
	movt	r3, #:upper16:.LANCHOR1
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r2, [r3, #2616]
	ldr	r1, [r3, #2620]
	add	r2, r2, #216
	b	queue_work_on
.L1905:
	.align	2
.L1904:
	.word	.LANCHOR2+924
	.fnend
	.size	mbim_resume, .-mbim_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_debug_read_stats, %function
rmnet_smd_debug_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 184
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #:lower16:kmalloc_caches
	strd	r6, [sp, #8]
	movt	r5, #:upper16:kmalloc_caches
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #260
	sub	sp, sp, #260
	str	r1, [sp, #84]
	strd	r2, [sp, #88]
	add	lr, r4, #260
	add	ip, r4, #324
	ldrd	r2, [lr]
	ldrd	r0, [lr, #8]
	ldrd	r6, [ip]
	strd	r2, [sp, #128]
	ldrd	r2, [lr, #16]
	strd	r0, [sp, #136]
	ldrd	r0, [lr, #24]
	strd	r2, [sp, #144]
	ldrd	r2, [lr, #32]
	strd	r0, [sp, #152]
	ldrd	r0, [lr, #40]
	strd	r6, [sp, #192]
	ldrd	r6, [ip, #24]
	strd	r2, [sp, #160]
	ldrd	r2, [lr, #48]
	strd	r0, [sp, #168]
	ldrd	r0, [lr, #56]
	strd	r2, [sp, #176]
	ldrd	r2, [ip, #8]
	strd	r0, [sp, #184]
	ldrd	r0, [ip, #16]
	strd	r2, [sp, #200]
	ldrd	r2, [ip, #32]
	strd	r0, [sp, #208]
	ldrd	r0, [ip, #40]
	strd	r6, [sp, #216]
	ldrd	r6, [ip, #48]
	strd	r2, [sp, #224]
	ldrd	r2, [ip, #56]
	strd	r0, [sp, #232]
	ldr	r0, [r5, #36]
	strd	r6, [sp, #240]
	strd	r2, [sp, #248]
	cmp	r0, #0
	beq	.L1909
	mov	r2, #512
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L1912
.L1907:
	add	r10, r4, #164
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	lr, [r4, #168]
	ldr	r3, [r4, #440]
	ldr	r2, [r4, #444]
	ldr	r8, [r4, #424]
	ldr	r9, [r4, #428]
	ldr	r7, [r4, #432]
	ldr	ip, [r4, #448]
	strd	r2, [sp, #72]
	ldr	r3, [sp, #172]
	ldr	r2, [sp, #236]
	sub	r1, r9, r8
	ldr	r6, [r4, #436]
	str	r0, [sp, #112]
	ldr	r0, [r4, #260]
	str	ip, [sp, #80]
	ldr	fp, [r4, #452]
	str	lr, [sp, #96]
	strd	r2, [sp, #116]
	str	r1, [sp, #124]
	bl	smd_read_avail
	str	r0, [sp, #100]
	ldr	r0, [r4, #260]
	bl	smd_write_avail
	str	r0, [sp, #104]
	ldr	r0, [r4, #324]
	bl	smd_read_avail
	str	r0, [sp, #108]
	ldr	r0, [r4, #324]
	sub	r4, r7, r6
	bl	smd_write_avail
	ldr	r3, [sp, #76]
	str	r8, [sp, #12]
	ldr	ip, [sp, #80]
	str	r6, [sp, #24]
	ldr	r2, [sp, #116]
	str	r4, [sp, #28]
	ldr	r6, [sp, #72]
	ldr	r1, [sp, #96]
	sub	ip, ip, fp
	ldr	r4, [sp, #76]
	str	r2, [sp]
	ldr	r2, [sp, #72]
	str	r0, [sp, #68]
	mov	r0, r5
	str	ip, [sp, #52]
	ldr	ip, [sp, #100]
	stmib	sp, {r1, r9}
	ldr	r1, [sp, #124]
	sub	lr, r2, r3
	movw	r2, #:lower16:.LC100
	ldr	r3, [sp, #120]
	movt	r2, #:upper16:.LC100
	str	ip, [sp, #56]
	ldr	ip, [sp, #104]
	str	lr, [sp, #40]
	ldr	lr, [sp, #80]
	str	r1, [sp, #16]
	mov	r1, #512
	str	r7, [sp, #20]
	str	r6, [sp, #32]
	str	ip, [sp, #60]
	ldr	ip, [sp, #108]
	str	r4, [sp, #36]
	str	lr, [sp, #44]
	str	fp, [sp, #48]
	str	ip, [sp, #64]
	bl	scnprintf
	mov	r4, r0
	ldr	r1, [sp, #112]
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	str	r4, [sp]
	mov	r3, r5
	ldrd	r0, [sp, #84]
	ldr	r2, [sp, #92]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L1906:
	mov	r0, r4
	add	sp, sp, #260
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1909:
	mov	r5, #16
	b	.L1907
.L1912:
	mvn	r4, #11
	b	.L1906
	.fnend
	.size	rmnet_smd_debug_read_stats, .-rmnet_smd_debug_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_read_stats, %function
rmnet_sdio_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:kmalloc_caches
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	ip, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r8, r2
	mov	r9, r3
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #124]
	.pad #64
	sub	sp, sp, #64
	ldr	r0, [ip, #40]
	cmp	r0, #0
	beq	.L1916
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L1919
.L1914:
	add	r6, r4, #188
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r1, [r4, #196]
	movw	r2, #:lower16:.LC101
	mov	r10, r0
	ldr	ip, [r4, #324]
	movt	r2, #:upper16:.LC101
	mov	r0, r5
	ldr	r3, [r4, #356]
	str	ip, [sp, #56]
	ldr	ip, [r4, #320]
	str	r1, [sp, #48]
	mov	r1, #4096
	str	ip, [sp, #52]
	ldr	ip, [r4, #128]
	str	ip, [sp, #44]
	ldr	ip, [r4, #368]
	str	ip, [sp, #40]
	ldr	ip, [r4, #332]
	str	ip, [sp, #36]
	ldr	ip, [r4, #116]
	str	ip, [sp, #32]
	ldr	ip, [r4, #372]
	str	ip, [sp, #28]
	ldr	ip, [r4, #328]
	str	ip, [sp, #24]
	ldr	ip, [r4, #180]
	str	ip, [sp, #20]
	ldr	ip, [r4, #168]
	str	ip, [sp, #16]
	ldr	ip, [r4, #360]
	str	ip, [sp, #12]
	ldr	ip, [r4, #364]
	str	ip, [sp, #8]
	ldr	ip, [r4, #152]
	str	ip, [sp, #4]
	ldr	ip, [r4, #140]
	str	ip, [sp]
	bl	scnprintf
	mov	r4, r0
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	str	r4, [sp]
	mov	r2, r9
	mov	r1, r8
	mov	r0, r7
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L1913:
	mov	r0, r4
	add	sp, sp, #64
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1916:
	mov	r5, #16
	b	.L1914
.L1919:
	mvn	r4, #11
	b	.L1913
	.fnend
	.size	rmnet_sdio_read_stats, .-rmnet_sdio_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_read_stats, %function
rmnet_mux_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	ip, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r8, r2
	mov	r9, r3
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #92
	sub	sp, sp, #92
	ldr	r0, [ip, #40]
	cmp	r0, #0
	beq	.L1924
	mov	r2, #1024
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L1928
.L1921:
	add	r6, r4, #368
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #208]
	ldr	r2, [r4, #364]
	ldr	fp, [r4, #404]
	ldr	r1, [r4, #408]
	str	r3, [sp, #60]
	ldr	r3, [r4, #232]
	str	r0, [sp, #84]
	ldr	r0, [r4, #412]
	sub	r2, r2, #1
	cmp	r2, #9
	ldr	r10, [r4, #416]
	movwhi	ip, #:lower16:.LC102
	ldr	lr, [r4, #424]
	str	r3, [sp, #64]
	ldr	r3, [r4, #312]
	movthi	ip, #:upper16:.LC102
	str	r3, [sp, #68]
	ldr	r3, [r4, #336]
	str	r0, [sp, #72]
	ldr	r0, [r4, #420]
	str	r3, [sp, #76]
	ldr	r3, [r4, #348]
	str	r3, [sp, #80]
	ldr	r3, [r4, #352]
	str	r3, [sp, #56]
	ldr	r3, [r4, #400]
	bls	.L1929
.L1923:
	ldr	r4, [r4, #356]
	movw	r2, #:lower16:.LC103
	str	fp, [sp]
	str	r10, [sp, #12]
	ldr	r10, [sp, #56]
	movt	r2, #:upper16:.LC103
	str	lr, [sp, #36]
	ldr	lr, [sp, #76]
	strd	r0, [sp, #4]
	mov	r1, #1024
	mov	r0, r5
	str	r10, [sp, #16]
	ldr	r10, [sp, #60]
	str	ip, [sp, #48]
	str	r4, [sp, #52]
	str	r10, [sp, #20]
	ldr	r10, [sp, #64]
	str	lr, [sp, #40]
	ldr	lr, [sp, #80]
	str	r10, [sp, #24]
	ldr	r10, [sp, #68]
	str	r10, [sp, #28]
	ldr	r10, [sp, #72]
	str	lr, [sp, #44]
	str	r10, [sp, #32]
	bl	scnprintf
	mov	r4, r0
	ldr	r1, [sp, #84]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	str	r4, [sp]
	mov	r2, r9
	mov	r1, r8
	mov	r0, r7
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L1920:
	mov	r0, r4
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1929:
	movw	ip, #:lower16:.LANCHOR2
	movt	ip, #:upper16:.LANCHOR2
	add	r2, ip, r2, lsl #2
	ldr	ip, [r2, #936]
	b	.L1923
.L1924:
	mov	r5, #16
	b	.L1921
.L1928:
	mvn	r4, #11
	b	.L1920
	.fnend
	.size	rmnet_mux_read_stats, .-rmnet_mux_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_read_status, %function
debug_read_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r0, #124]
	.pad #20
	sub	sp, sp, #20
	ldmib	r5, {r7, r8}
	cmp	r7, #0
	cmpne	r8, #0
	beq	.L1943
	mov	fp, r3
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	mov	r9, r1
	ldr	r0, [r3, #36]
	mov	r10, r2
	cmp	r0, #0
	beq	.L1936
	mov	r2, #512
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L1944
.L1933:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:.LC105
	mov	r1, #512
	ldr	r3, [r5, #128]
	movt	r2, #:upper16:.LC105
	str	r0, [sp, #12]
	mov	r0, r6
	bl	scnprintf
	movw	r2, #:lower16:.LC106
	rsb	r1, r0, #512
	ldr	r3, [r5, #132]
	mov	r4, r0
	movt	r2, #:upper16:.LC106
	add	r0, r6, r0
	bl	scnprintf
	ldr	ip, [r5, #128]
	add	r4, r4, r0
	movw	r2, #:lower16:.LC107
	ldr	r3, [r5, #132]
	rsb	r1, r4, #512
	add	r0, r6, r4
	movt	r2, #:upper16:.LC107
	sub	r3, ip, r3
	bl	scnprintf
	add	r4, r4, r0
	movw	r2, #:lower16:.LC108
	ldr	r3, [r5, #136]
	rsb	r1, r4, #512
	add	r0, r6, r4
	movt	r2, #:upper16:.LC108
	bl	scnprintf
	add	r4, r4, r0
	movw	r2, #:lower16:.LC109
	ldr	r3, [r5, #140]
	rsb	r1, r4, #512
	add	r0, r6, r4
	movt	r2, #:upper16:.LC109
	bl	scnprintf
	ldr	ip, [r5, #136]
	add	r4, r4, r0
	movw	r2, #:lower16:.LC110
	ldr	r3, [r5, #140]
	rsb	r1, r4, #512
	add	r0, r6, r4
	movt	r2, #:upper16:.LC110
	sub	r3, ip, r3
	bl	scnprintf
	add	r4, r4, r0
	movw	r2, #:lower16:.LC111
	ldr	r3, [r8, #156]
	rsb	r1, r4, #512
	add	r0, r6, r4
	movt	r2, #:upper16:.LC111
	bl	scnprintf
	ldr	r3, [r7, #108]
	add	r4, r4, r0
	cmp	r3, #0
	beq	.L1934
	mov	r0, r7
	blx	r3
	cmp	r0, #0
	movw	r2, #:lower16:.LC112
	rsb	r1, r4, #512
	add	r0, r6, r4
	movne	r3, #2
	moveq	r3, #0
	movt	r2, #:upper16:.LC112
	bl	scnprintf
	add	r4, r4, r0
.L1934:
	mov	r0, r5
	ldr	r1, [sp, #12]
	bl	_raw_spin_unlock_irqrestore
	str	r4, [sp]
	mov	r2, fp
	mov	r1, r10
	mov	r0, r9
	mov	r3, r6
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r6
	bl	kfree
.L1930:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1936:
	mov	r6, #16
	b	.L1933
.L1944:
	mvn	r4, #11
	b	.L1930
.L1943:
	movw	r0, #:lower16:.LC104
	mvn	r4, #21
	movt	r0, #:upper16:.LC104
	bl	printk
	b	.L1930
	.fnend
	.size	debug_read_status, .-debug_read_status
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_sdio_read_stats, %function
debug_sdio_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #68
	sub	sp, sp, #68
	str	r1, [sp, #52]
	strd	r2, [sp, #56]
	cmp	r0, #0
	beq	.L1951
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r10, r0, #0
	beq	.L1955
.L1946:
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	ldr	r5, [r8]
	cmp	r5, #0
	beq	.L1949
	mov	r5, #0
	movw	r3, #:lower16:.LC113
	movt	r3, #:upper16:.LC113
	mov	r6, r5
	add	r7, r8, #4
	str	r3, [sp, #48]
.L1948:
	ldr	r4, [r7, #20]
	add	r7, r7, #104
	add	r9, r4, #4
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r4, #112]
	mov	r3, r6
	rsb	r1, r5, #4096
	mov	fp, r0
	ldr	r2, [sp, #48]
	add	r0, r10, r5
	add	r6, r6, #1
	str	ip, [sp, #40]
	ldr	ip, [r4, #108]
	str	ip, [sp, #36]
	ldr	ip, [r4, #8]
	str	ip, [sp, #32]
	ldr	ip, [r4, #76]
	str	ip, [sp, #28]
	ldr	ip, [r4, #48]
	str	ip, [sp, #24]
	ldr	ip, [r4, #44]
	str	ip, [sp, #20]
	ldr	ip, [r4, #176]
	str	ip, [sp, #16]
	ldr	ip, [r4, #180]
	str	ip, [sp, #12]
	ldr	ip, [r4, #188]
	str	ip, [sp, #8]
	ldr	ip, [r4, #184]
	stm	sp, {r4, ip}
	bl	scnprintf
	add	r5, r5, r0
	mov	r1, fp
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r8]
	cmp	r6, r3
	bcc	.L1948
.L1949:
	mov	r3, r10
	ldrd	r0, [sp, #52]
	str	r5, [sp]
	ldr	r2, [sp, #60]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r10
	bl	kfree
.L1945:
	mov	r0, r4
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1951:
	mov	r10, #16
	b	.L1946
.L1955:
	mvn	r4, #11
	b	.L1945
	.fnend
	.size	debug_sdio_read_stats, .-debug_sdio_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_smd_read_stats, %function
debug_smd_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #36]
	.pad #92
	sub	sp, sp, #92
	str	r1, [sp, #76]
	strd	r2, [sp, #80]
	cmp	r0, #0
	beq	.L1963
	mov	r2, #512
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	str	r3, [sp, #64]
	beq	.L1969
.L1957:
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	ldr	r3, [r7, #212]
	cmp	r3, #0
	beq	.L1961
	add	fp, r7, #216
	mov	r6, #0
	movw	r3, #:lower16:.LC114
	mov	r8, fp
	movt	r3, #:upper16:.LC114
	mov	r9, r6
	mov	fp, r7
	str	r3, [sp, #72]
.L1960:
	ldr	r3, [sp, #64]
	ldr	r7, [r8, #20]
	add	r3, r3, r9
	add	r5, r7, #4
	ldr	r10, [r7, #72]
	str	r3, [sp, #44]
	rsb	r3, r9, #512
	mov	r0, r5
	str	r3, [sp, #48]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r7, #8]
	ldr	r4, [r10]
	str	r3, [sp, #60]
	ldr	r3, [r7, #160]
	cmp	r4, #0
	moveq	lr, r4
	str	r3, [sp, #52]
	ldr	r3, [r7, #164]
	str	r0, [sp, #68]
	mov	r0, r4
	str	r3, [sp, #56]
	ldr	r3, [r7, #168]
	ldr	r7, [r7, #172]
	str	r3, [sp, #48]
	beq	.L1959
	bl	smd_read_avail
	ldr	lr, [r10]
	mov	r4, r0
	cmp	lr, #0
	mov	r0, lr
	beq	.L1959
	bl	smd_write_avail
	mov	lr, r0
.L1959:
	ldr	ip, [r10, #8]
	rsb	r1, r9, #512
	add	r8, r8, #104
	ldr	r10, [r10, #8]
	str	r7, [sp]
	ldr	r0, [sp, #44]
	str	r4, [sp, #20]
	ldr	r7, [sp, #52]
	ldr	r3, [sp, #48]
	and	ip, ip, #1
	ubfx	r10, r10, #1, #1
	ldr	r2, [sp, #72]
	str	lr, [sp, #24]
	str	r7, [sp, #8]
	ldr	r7, [sp, #56]
	str	r3, [sp, #4]
	mov	r3, r6
	add	r6, r6, #1
	str	ip, [sp, #28]
	str	r7, [sp, #12]
	ldr	r7, [sp, #60]
	str	r10, [sp, #32]
	str	r7, [sp, #16]
	bl	scnprintf
	add	r9, r9, r0
	ldr	r1, [sp, #68]
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [fp, #212]
	cmp	r6, r3
	bcc	.L1960
	mov	r3, r9
.L1961:
	ldr	r5, [sp, #64]
	str	r3, [sp]
	ldrd	r0, [sp, #76]
	ldr	r2, [sp, #84]
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L1956:
	mov	r0, r4
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1963:
	mov	r3, #16
	str	r3, [sp, #64]
	b	.L1957
.L1969:
	mvn	r4, #11
	b	.L1956
	.fnend
	.size	debug_smd_read_stats, .-debug_smd_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_read_stats, %function
gbam_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r1
	mov	r9, r2
	strd	r10, [sp, #24]
	mov	r10, r3
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #68
	sub	sp, sp, #68
	cmp	r0, #0
	beq	.L1976
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L1980
.L1971:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #424]
	cmp	r2, #0
	ble	.L1981
	ldr	r4, [r3, #428]
	cmp	r4, #0
	beq	.L1974
	add	r6, r4, #4
	add	r7, r4, #8
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r0, [r4, #20]
	add	ip, r4, #20
	movw	r2, #:lower16:.LC115
	ldr	r1, [r4, #20]
	movt	r2, #:upper16:.LC115
	mov	r3, #0
	ubfx	r0, r0, #1, #1
	ubfx	r1, r1, #2, #1
	strd	r0, [sp, #52]
	ldr	lr, [r4, #68]
	mov	r1, #1024
	mov	r0, r5
	str	lr, [sp, #48]
	ldr	lr, [r4, #44]
	str	lr, [sp, #44]
	ldr	lr, [r4, #280]
	str	lr, [sp, #40]
	ldr	lr, [r4, #276]
	str	lr, [sp, #36]
	ldr	lr, [r4, #272]
	str	lr, [sp, #32]
	ldr	lr, [r4, #268]
	str	lr, [sp, #28]
	ldr	lr, [r4, #248]
	str	lr, [sp, #24]
	ldr	lr, [r4, #244]
	str	lr, [sp, #20]
	ldr	lr, [r4, #240]
	str	lr, [sp, #16]
	ldr	lr, [r4, #260]
	str	lr, [sp, #12]
	ldr	lr, [r4, #264]
	stm	sp, {r4, ip, lr}
	bl	scnprintf
	mov	r4, r0
	mov	r0, r7
	bl	_raw_spin_unlock
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L1974:
	str	r4, [sp]
	mov	r2, r10
	mov	r1, r9
	mov	r0, r8
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L1970:
	mov	r0, r4
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1981:
	mov	r4, #0
	b	.L1974
.L1976:
	mov	r5, #16
	b	.L1971
.L1980:
	mvn	r4, #11
	b	.L1970
	.fnend
	.size	gbam_read_stats, .-gbam_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_read_stats, %function
gsmd_ctrl_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #92
	sub	sp, sp, #92
	str	r1, [sp, #76]
	strd	r2, [sp, #80]
	cmp	r0, #0
	beq	.L1990
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	str	r3, [sp, #60]
	beq	.L2001
.L1983:
	ldr	r4, .L2002
	mov	r10, #0
	movw	r3, #:lower16:.LC117
	movw	r2, #:lower16:.LC116
	movw	r1, #:lower16:.LC118
	movt	r3, #:upper16:.LC117
	movt	r2, #:upper16:.LC116
	movt	r1, #:upper16:.LC118
	mov	fp, r10
	str	r3, [sp, #64]
	str	r2, [sp, #68]
	str	r1, [sp, #72]
.L1988:
	ldr	r9, [r4]
	ldr	r3, [sp, #60]
	cmp	r9, #0
	add	r6, r9, #108
	add	r8, r3, r10
	rsb	r3, r10, #1024
	mov	r0, r6
	str	r3, [sp, #40]
	beq	.L1985
	bl	_raw_spin_lock_irqsave
	ldr	lr, [sp, #68]
	str	r0, [sp, #52]
	ldr	r3, [r9, #92]
	ldr	ip, [r9, #88]
	ldr	r2, [r9]
	ldr	r1, [r9, #8]
	str	r3, [sp, #44]
	ldr	r3, [sp, #64]
	cmp	ip, #0
	ldr	r5, [r9, #8]
	movne	r3, lr
	cmp	r2, #0
	mov	r7, r2
	mov	ip, r2
	str	r3, [sp, #48]
	ldr	r3, [r9, #96]
	mov	r0, r2
	ubfx	r5, r5, #1, #1
	str	r3, [sp, #40]
	and	r3, r1, #1
	str	r3, [sp, #56]
	beq	.L1987
	bl	smd_read_avail
	ldr	ip, [r9]
	mov	r7, r0
	cmp	ip, #0
	mov	r0, ip
	beq	.L1987
	bl	smd_write_avail
	mov	ip, r0
.L1987:
	ldr	lr, [sp, #40]
	rsb	r1, r10, #1024
	mov	r0, r8
	mov	r3, fp
	ldr	r2, [sp, #72]
	str	r9, [sp]
	stmib	sp, {r9, lr}
	ldr	lr, [sp, #44]
	str	r5, [sp, #24]
	str	r7, [sp, #28]
	str	ip, [sp, #32]
	str	lr, [sp, #12]
	ldr	lr, [sp, #48]
	str	lr, [sp, #16]
	ldr	lr, [sp, #56]
	str	lr, [sp, #20]
	bl	scnprintf
	add	r10, r10, r0
	ldr	r1, [sp, #52]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L1985:
	add	fp, fp, #1
	add	r4, r4, #84
	cmp	fp, #6
	bne	.L1988
	ldr	r5, [sp, #60]
	str	r10, [sp]
	ldrd	r0, [sp, #76]
	ldr	r2, [sp, #84]
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L1982:
	mov	r0, r4
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1990:
	mov	r3, #16
	str	r3, [sp, #60]
	b	.L1983
.L2001:
	mvn	r4, #11
	b	.L1982
.L2003:
	.align	2
.L2002:
	.word	.LANCHOR1+512
	.fnend
	.size	gsmd_ctrl_read_stats, .-gsmd_ctrl_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_read_stats, %function
gctrl_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #68
	sub	sp, sp, #68
	str	r1, [sp, #52]
	strd	r2, [sp, #56]
	cmp	r0, #0
	beq	.L2012
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r10, r0, #0
	beq	.L2020
.L2005:
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	ldr	r3, [r9, #1020]
	cmp	r3, #0
	beq	.L2010
	mov	r5, #0
	movw	r3, #:lower16:.LC117
	str	r10, [sp, #36]
	movw	r2, #:lower16:.LC116
	movw	r1, #:lower16:.LC119
	movt	r3, #:upper16:.LC117
	movt	r2, #:upper16:.LC116
	movt	r1, #:upper16:.LC119
	mov	r7, r5
	add	r6, r9, #1024
	str	r3, [sp, #40]
	str	r2, [sp, #44]
	str	r1, [sp, #48]
.L2009:
	ldr	r4, [r6]
	mov	r3, r5
	cmp	r4, #0
	add	r8, r4, #4
	mov	r0, r8
	beq	.L2007
	bl	_raw_spin_lock_irqsave
	ldr	lr, [r4, #84]
	mov	fp, r0
	ldr	ip, [r4, #84]
	ldr	r3, [sp, #36]
	ldr	r2, [r4, #96]
	ldr	r10, [r4, #104]
	and	lr, lr, #1
	ubfx	ip, ip, #1, #1
	ldr	r1, [r4, #100]
	add	r0, r3, r5
	ldr	r3, [r4, #88]
	str	r7, [sp]
	str	r4, [sp, #4]
	str	ip, [sp, #28]
	ldr	ip, [sp, #44]
	str	r1, [sp, #8]
	rsb	r1, r5, #1024
	str	r10, [sp, #16]
	ldr	r10, [sp, #40]
	cmp	r3, #0
	str	r2, [sp, #12]
	ldr	r2, [sp, #48]
	movne	r10, ip
	str	r10, [sp, #20]
	ldr	r3, [r6, #24]
	str	lr, [sp, #24]
	bl	scnprintf
	add	r5, r5, r0
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r3, r5
.L2007:
	ldr	r2, [r9, #1020]
	add	r7, r7, #1
	add	r6, r6, #104
	cmp	r7, r2
	bcc	.L2009
	ldr	r10, [sp, #36]
.L2010:
	str	r3, [sp]
	ldrd	r0, [sp, #52]
	mov	r3, r10
	ldr	r2, [sp, #60]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r10
	bl	kfree
.L2004:
	mov	r0, r4
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2012:
	mov	r10, #16
	b	.L2005
.L2020:
	mvn	r4, #11
	b	.L2004
	.fnend
	.size	gctrl_read_stats, .-gctrl_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_read_stats, %function
ghsic_data_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #48]
	.pad #76
	sub	sp, sp, #76
	str	r1, [sp, #60]
	strd	r2, [sp, #64]
	cmp	r0, #0
	beq	.L2028
	mov	r2, #4096
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	fp, r0, #0
	beq	.L2035
.L2022:
	movw	r10, #:lower16:.LANCHOR1
	movt	r10, #:upper16:.LANCHOR1
	ldr	r3, [r10, #1440]
	cmp	r3, #0
	beq	.L2026
	ldr	r7, .L2036
	mov	r5, #0
	movw	r3, #:lower16:.LC120
	movw	r2, #:lower16:.LC121
	movt	r3, #:upper16:.LC120
	str	r10, [sp, #48]
	movt	r2, #:upper16:.LC121
	mov	r6, r5
	str	r3, [sp, #52]
	str	r2, [sp, #56]
.L2025:
	ldr	r4, [r7]
	mov	r3, r5
	cmp	r4, #0
	add	r8, r4, #80
	add	r9, r4, #48
	mov	r0, r8
	beq	.L2024
	bl	_raw_spin_lock_irqsave
	ldr	lr, [r4, #180]
	rsb	r1, r5, #4096
	str	r0, [sp, #44]
	ldr	ip, [r4, #180]
	add	r0, fp, r5
	ldr	r3, [r4, #164]
	ldr	r2, [sp, #52]
	and	lr, lr, #1
	ubfx	ip, ip, #1, #1
	ubfx	r3, r3, #1, #1
	str	r3, [sp, #36]
	ldr	r10, [r4, #208]
	ldr	r3, [r7, #24]
	str	r10, [sp, #32]
	ldr	r10, [r4, #204]
	str	r10, [sp, #28]
	ldr	r10, [r4, #72]
	str	r10, [sp, #24]
	ldr	r10, [r4, #212]
	str	r10, [sp, #20]
	ldr	r10, [r4, #188]
	str	r6, [sp]
	stmib	sp, {r4, lr}
	str	ip, [sp, #12]
	str	r10, [sp, #16]
	bl	scnprintf
	add	r5, r0, r5
	ldr	r1, [sp, #44]
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r4, #164]
	rsb	r1, r5, #4096
	mov	r8, r0
	ldr	r3, [r4, #192]
	add	r0, fp, r5
	ldr	r2, [sp, #56]
	ubfx	ip, ip, #2, #1
	str	ip, [sp, #16]
	ldr	ip, [r4, #216]
	str	ip, [sp, #12]
	ldr	ip, [r4, #200]
	str	ip, [sp, #8]
	ldr	ip, [r4, #196]
	str	ip, [sp, #4]
	ldr	ip, [r4, #40]
	str	ip, [sp]
	bl	scnprintf
	add	r5, r5, r0
	mov	r1, r8
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r3, r5
.L2024:
	ldr	r2, [sp, #48]
	add	r6, r6, #1
	add	r7, r7, #104
	ldr	r2, [r2, #1440]
	cmp	r6, r2
	bcc	.L2025
.L2026:
	str	r3, [sp]
	ldrd	r0, [sp, #60]
	mov	r3, fp
	ldr	r2, [sp, #68]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, fp
	bl	kfree
.L2021:
	mov	r0, r4
	add	sp, sp, #76
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2028:
	mov	fp, #16
	b	.L2022
.L2035:
	mvn	r4, #11
	b	.L2021
.L2037:
	.align	2
.L2036:
	.word	.LANCHOR1+1444
	.fnend
	.size	ghsic_data_read_stats, .-ghsic_data_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_read_stats, %function
ghsuart_ctrl_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #52
	sub	sp, sp, #52
	str	r1, [sp, #36]
	strd	r2, [sp, #40]
	cmp	r0, #0
	beq	.L2046
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r9, r0, #0
	beq	.L2054
.L2039:
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	ldr	r2, [r7, #1860]
	cmp	r2, #0
	beq	.L2044
	ldr	r6, .L2055
	mov	r4, #0
	movw	r10, #:lower16:.LC117
	movw	r3, #:lower16:.LC116
	movw	fp, #:lower16:.LC122
	movt	r10, #:upper16:.LC117
	movt	r3, #:upper16:.LC116
	movt	fp, #:upper16:.LC122
	mov	r5, r4
	str	r3, [sp, #24]
	strd	r10, [sp, #28]
.L2043:
	ldr	fp, [r6]
	mov	r2, r4
	add	r6, r6, #84
	cmp	fp, #0
	add	r8, fp, #8
	mov	r0, r8
	beq	.L2041
	bl	_raw_spin_lock_irqsave
	ldr	ip, [fp, #92]
	mov	r10, r0
	add	r0, r9, r4
	ldr	lr, [sp, #24]
	ldr	r2, [fp, #96]
	ldr	r1, [fp, #100]
	ldr	r3, [fp, #104]
	str	fp, [sp]
	cmp	ip, #0
	ldr	fp, [sp, #28]
	movne	fp, lr
	stmib	sp, {r1, r2, r3}
	rsb	r1, r4, #1024
	ldr	r2, [sp, #32]
	mov	r3, r5
	str	fp, [sp, #16]
	bl	scnprintf
	add	r4, r4, r0
	mov	r1, r10
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r4
.L2041:
	ldr	r3, [r7, #1860]
	add	r5, r5, #1
	cmp	r5, r3
	bcc	.L2043
.L2044:
	str	r2, [sp]
	mov	r3, r9
	ldrd	r0, [sp, #36]
	ldr	r2, [sp, #44]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r9
	bl	kfree
.L2038:
	mov	r0, r4
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2046:
	mov	r9, #16
	b	.L2039
.L2054:
	mvn	r4, #11
	b	.L2038
.L2056:
	.align	2
.L2055:
	.word	.LANCHOR1+1864
	.fnend
	.size	ghsuart_ctrl_read_stats, .-ghsuart_ctrl_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_read_stats, %function
ghsuart_data_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #76
	sub	sp, sp, #76
	str	r1, [sp, #60]
	strd	r2, [sp, #64]
	cmp	r0, #0
	beq	.L2064
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	fp, r0, #0
	beq	.L2071
.L2058:
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	ldr	r3, [r8, #2032]
	cmp	r3, #0
	beq	.L2062
	ldr	r7, .L2072
	mov	r5, #0
	movw	r3, #:lower16:.LC123
	movw	r2, #:lower16:.LC124
	movt	r3, #:upper16:.LC123
	str	r8, [sp, #48]
	movt	r2, #:upper16:.LC124
	mov	r6, r5
	str	r3, [sp, #52]
	str	r2, [sp, #56]
.L2061:
	ldr	r4, [r7]
	mov	r3, r5
	cmp	r4, #0
	add	r8, r4, #104
	add	r9, r4, #72
	mov	r0, r8
	beq	.L2060
	bl	_raw_spin_lock_irqsave
	ldr	lr, [r4, #188]
	str	r0, [sp, #44]
	add	r0, fp, r5
	ldr	ip, [r4, #188]
	ldr	r1, [r4, #188]
	ldr	r2, [r4, #184]
	and	lr, lr, #1
	ldr	r3, [r7, #24]
	ubfx	ip, ip, #1, #1
	ubfx	r1, r1, #2, #1
	ubfx	r2, r2, #1, #1
	str	r2, [sp, #32]
	ldr	r2, [r4, #96]
	str	r2, [sp, #28]
	ldr	r10, [r4, #212]
	ldr	r2, [sp, #52]
	str	r10, [sp, #24]
	ldr	r10, [r4, #204]
	str	r6, [sp]
	stmib	sp, {r4, lr}
	str	ip, [sp, #12]
	str	r1, [sp, #16]
	rsb	r1, r5, #1024
	str	r10, [sp, #20]
	bl	scnprintf
	add	r5, r0, r5
	ldr	r1, [sp, #44]
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r4, #184]
	rsb	r1, r5, #1024
	mov	r8, r0
	ldr	r3, [r4, #208]
	add	r0, fp, r5
	ldr	r2, [sp, #56]
	ubfx	ip, ip, #2, #1
	str	ip, [sp, #4]
	ldr	ip, [r4, #64]
	str	ip, [sp]
	bl	scnprintf
	add	r5, r5, r0
	mov	r1, r8
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r3, r5
.L2060:
	ldr	r2, [sp, #48]
	add	r6, r6, #1
	add	r7, r7, #84
	ldr	r2, [r2, #2032]
	cmp	r6, r2
	bcc	.L2061
.L2062:
	str	r3, [sp]
	ldrd	r0, [sp, #60]
	mov	r3, fp
	ldr	r2, [sp, #68]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, fp
	bl	kfree
.L2057:
	mov	r0, r4
	add	sp, sp, #76
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2064:
	mov	fp, #16
	b	.L2058
.L2071:
	mvn	r4, #11
	b	.L2057
.L2073:
	.align	2
.L2072:
	.word	.LANCHOR1+2036
	.fnend
	.size	ghsuart_data_read_stats, .-ghsuart_data_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_read_stats, %function
debug_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	strd	r8, [sp, #16]
	mov	r9, r1
	ldr	r4, [r6]
	strd	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #32]
	mov	fp, r3
	.pad #28
	sub	sp, sp, #28
	cmp	r6, r4
	moveq	lr, #0
	beq	.L2075
	movw	r8, #:lower16:debug_buffer
	movw	r7, #:lower16:.LC125
	sub	r4, r4, #4
	movt	r8, #:upper16:debug_buffer
	movt	r7, #:upper16:.LC125
	mov	r5, #0
.L2077:
	ldr	ip, [r4, #20]
	rsb	r1, r5, #4096
	add	r0, r8, r5
	mov	r2, r7
	mov	lr, r5
	cmp	ip, #0
	beq	.L2076
	ldr	lr, [ip, #136]
	ldr	r3, [r4]
	str	lr, [sp, #16]
	ldr	lr, [ip, #132]
	str	lr, [sp, #12]
	ldr	lr, [ip, #128]
	str	lr, [sp, #8]
	ldr	lr, [ip, #84]
	ldr	lr, [lr, #4]
	str	lr, [sp, #4]
	ldr	ip, [ip, #88]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	scnprintf
	add	r5, r5, r0
	mov	lr, r5
.L2076:
	ldr	r4, [r4, #4]
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L2077
.L2075:
	movw	r3, #:lower16:debug_buffer
	mov	r2, fp
	str	lr, [sp]
	mov	r1, r10
	mov	r0, r9
	movt	r3, #:upper16:debug_buffer
	bl	simple_read_from_buffer
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
	.fnend
	.size	debug_read_stats, .-debug_read_stats
	.section	.exit.text,"ax",%progbits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_exit, %function
gether_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #2624]
	b	destroy_workqueue
	.fnend
	.size	gether_exit, .-gether_exit
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_function_cleanup, %function
qdss_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR0
	movt	r7, #:upper16:.LANCHOR0
	str	r8, [sp, #16]
	ldr	r5, [r7, #248]!
	str	lr, [sp, #20]
	cmp	r5, r7
	ldr	r4, [r5]
	beq	.L2085
	ldr	r6, .L2091
	b	.L2088
.L2087:
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, r7
	mov	r5, r4
	ldr	r3, [r4]
	beq	.L2085
	mov	r4, r3
.L2088:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	ldr	r0, [r5, #80]
	bl	destroy_workqueue
	ldr	r3, [r5, #12]
	cmp	r3, #0
	bne	.L2087
	mov	r0, r5
	bl	list_del
	sub	r0, r5, #116
	bl	kfree
	b	.L2087
.L2085:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2092:
	.align	2
.L2091:
	.word	.LANCHOR1+2628
	.fnend
	.size	qdss_function_cleanup, .-qdss_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_command_complete, %function
rmnet_smd_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r8, [r4, #84]
	cmp	r2, #0
	blt	.L2101
	add	r6, r4, #164
	mov	r5, r1
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r2, [r4, #308]
	ldr	r3, [r4, #448]
	cmp	r2, #0
	add	r3, r3, #1
	str	r3, [r4, #448]
	beq	.L2102
.L2095:
	mov	r3, r4
	ldr	r7, [r3, #108]!
	cmp	r7, r3
	beq	.L2103
	mov	r0, r7
	bl	list_del
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r1, [r5]
	ldr	r2, [r5, #48]
	ldr	r0, [r7, #-8]
	bl	memcpy
	ldr	r3, [r5, #48]
	mov	r0, r6
	str	r3, [r7, #-4]
	bl	_raw_spin_lock
	mov	r0, r7
	add	r2, r4, #124
	ldr	r1, [r4, #128]
	bl	__list_add
	mov	r0, r6
.L2100:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L2102:
	ldr	r0, [r4, #260]
	bl	smd_write_avail
	ldr	r3, [r5, #48]
	cmp	r0, r3
	strcc	r3, [r4, #308]
	bcc	.L2095
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r4, #260]
	ldr	r1, [r5]
	ldr	r2, [r5, #48]
	bl	smd_write
	ldr	r3, [r5, #48]
	cmp	r3, r0
	beq	.L2097
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC127
	movt	r1, #:upper16:.LC127
	add	r0, r0, #32
	bl	dev_err
.L2097:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r4, #452]
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #452]
	b	.L2100
.L2101:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC126
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC126
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
.L2103:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC128
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC128
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
	.fnend
	.size	rmnet_smd_command_complete, .-rmnet_smd_command_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_complete_epout, %function
rmnet_smd_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	add	r7, r1, #36
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r1, #44]
	ldr	r8, [r4, #84]
	add	r6, r4, #164
	cmn	r3, #104
	beq	.L2120
	cmp	r3, #0
	mov	r5, r1
	beq	.L2107
	cmn	r3, #108
	beq	.L2120
	ldr	r2, [r0, #4]
	movw	r1, #:lower16:.LC129
	ldr	r0, [r8]
	movt	r1, #:upper16:.LC129
	ldr	lr, [r5, #4]
	ldr	ip, [r5, #48]
	add	r0, r0, #32
	stm	sp, {ip, lr}
	bl	dev_err
.L2120:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r1, [r4, #152]
	mov	r0, r7
	add	r2, r4, #148
.L2119:
	bl	__list_add
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L2107:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r2, [r4, #372]
	ldr	r3, [r4, #432]
	cmp	r2, #0
	add	r3, r3, #1
	str	r3, [r4, #432]
	bne	.L2108
	ldr	r0, [r4, #324]
	bl	smd_write_avail
	ldr	r3, [r5, #48]
	cmp	r0, r3
	strcc	r3, [r4, #372]
	bcc	.L2108
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r4, #324]
	ldr	r1, [r5]
	ldr	r2, [r5, #48]
	bl	smd_write
	ldr	r3, [r5, #48]
	cmp	r3, r0
	beq	.L2110
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC130
	movt	r1, #:upper16:.LC130
	add	r0, r0, #32
	bl	dev_err
.L2110:
	mov	r0, r6
	bl	_raw_spin_lock
	mov	r0, r7
	add	r2, r4, #148
	ldr	r1, [r4, #152]
	ldr	r3, [r4, #436]
	add	r3, r3, #1
	str	r3, [r4, #436]
	bl	__list_add
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r0, r4
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	rmnet_smd_start_rx
.L2108:
	mov	r0, r7
	add	r2, r4, #156
	ldr	r1, [r4, #160]
	b	.L2119
	.fnend
	.size	rmnet_smd_complete_epout, .-rmnet_smd_complete_epout
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_data_rx_tlet, %function
rmnet_data_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #164
	strd	r8, [sp, #16]
	add	r8, r0, #156
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r10, [r0, #84]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #156]
	mov	r7, r0
	cmp	r8, r4
	beq	.L2126
	add	r9, r5, #148
	b	.L2122
.L2124:
	bl	list_del
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r4, #-36]
	ldr	r2, [r4, #12]
	ldr	r0, [r5, #324]
	bl	smd_write
	mov	fp, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r7, r0
	mov	r2, r9
	mov	r0, r4
	cmp	r3, fp
	bne	.L2129
	ldr	r1, [r5, #152]
	ldr	r3, [r5, #436]
	add	r3, r3, #1
	str	r3, [r5, #436]
	bl	__list_add
	ldr	r4, [r5, #156]
	cmp	r4, r8
	beq	.L2126
.L2122:
	ldr	r0, [r5, #324]
	bl	smd_write_avail
	ldr	r3, [r4, #12]
	cmp	r0, r3
	mov	r0, r4
	bcs	.L2124
	str	r3, [r5, #372]
.L2123:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	rmnet_smd_start_rx
.L2126:
	mov	r3, #0
	str	r3, [r5, #372]
	b	.L2123
.L2129:
	ldr	r0, [r10]
	movw	r1, #:lower16:.LC131
	movt	r1, #:upper16:.LC131
	add	r0, r0, #32
	bl	dev_err
	b	.L2123
	.fnend
	.size	rmnet_data_rx_tlet, .-rmnet_data_rx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_control_rx_tlet, %function
rmnet_control_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #164
	add	r7, r0, #124
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r0, #84]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #124]
	mov	r10, r0
	cmp	r7, r5
	beq	.L2135
	add	r8, r4, #108
	b	.L2131
.L2133:
	bl	list_del
	ldr	r3, [r4, #448]
	mov	r1, r10
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #448]
	bl	_raw_spin_unlock_irqrestore
	ldmdb	r5, {r1, r2}
	ldr	r0, [r4, #260]
	bl	smd_write
	mov	fp, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #-4]
	mov	r10, r0
	mov	r2, r8
	mov	r0, r5
	cmp	r3, fp
	bne	.L2138
	ldr	r1, [r4, #112]
	ldr	r3, [r4, #452]
	add	r3, r3, #1
	str	r3, [r4, #452]
	bl	__list_add
	ldr	r5, [r4, #124]
	cmp	r5, r7
	beq	.L2135
.L2131:
	ldr	r0, [r4, #260]
	bl	smd_write_avail
	ldr	r3, [r5, #-4]
	cmp	r0, r3
	mov	r0, r5
	bge	.L2133
	str	r3, [r4, #308]
.L2132:
	mov	r1, r10
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L2135:
	mov	r3, #0
	str	r3, [r4, #308]
	b	.L2132
.L2138:
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC127
	movt	r1, #:upper16:.LC127
	add	r0, r0, #32
	bl	dev_err
	b	.L2132
	.fnend
	.size	rmnet_control_rx_tlet, .-rmnet_control_rx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_write_w, %function
grmnet_ctrl_smd_write_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r6, [r0, #16]
	add	r6, r6, #108
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r0, [r5, #-68]
	cmp	r0, #0
	beq	.L2140
	ldr	r4, [r5, #-28]
	sub	r8, r5, #28
	cmp	r8, r4
	bne	.L2141
	b	.L2140
.L2149:
	bl	list_del
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldmdb	r4, {r1, r2}
	ldr	r0, [r5, #-68]
	bl	smd_write
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-4]
	mov	r7, r0
	cmp	r3, r10
	bne	.L2148
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r9
	bl	kfree
	ldr	r0, [r5, #-68]
	ldr	r3, [r5, #24]
	cmp	r0, #0
	add	r3, r3, #1
	str	r3, [r5, #24]
	beq	.L2140
	ldr	r4, [r5, #-28]
	cmp	r8, r4
	beq	.L2140
.L2141:
	bl	smd_write_avail
	ldr	r3, [r4, #-4]
	sub	r9, r4, #8
	cmp	r0, r3
	mov	r0, r4
	bge	.L2149
.L2140:
	mov	r1, r7
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L2148:
	movw	r0, #:lower16:.LC132
	mov	r2, r10
	ldr	r1, .L2150
	movt	r0, #:upper16:.LC132
	bl	printk
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r9
	bl	kfree
	b	.L2140
.L2151:
	.align	2
.L2150:
	.word	.LANCHOR2+976
	.fnend
	.size	grmnet_ctrl_smd_write_w, .-grmnet_ctrl_smd_write_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_data_rx_tlet, %function
rmnet_mux_smd_data_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #368
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r10, [r0, #84]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #372]
	mov	r7, r0
	cmp	r3, #0
	beq	.L2153
	ldr	r4, [r5, #120]
	add	r8, r5, #120
	cmp	r8, r4
	beq	.L2154
	add	r9, r5, #112
	b	.L2155
.L2156:
	bl	list_del
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r4, #-36]
	ldr	r2, [r4, #12]
	ldr	r0, [r5, #128]
	bl	smd_write
	mov	fp, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r7, r0
	mov	r2, r9
	mov	r0, r4
	cmp	r3, fp
	bne	.L2164
	ldr	r1, [r5, #116]
	ldr	r3, [r5, #400]
	add	r3, r3, #1
	str	r3, [r5, #400]
	bl	__list_add
	ldr	r3, [r5, #372]
	cmp	r3, #0
	beq	.L2153
	ldr	r4, [r5, #120]
	cmp	r4, r8
	beq	.L2154
.L2155:
	ldr	r0, [r5, #128]
	bl	smd_write_avail
	ldr	r3, [r4, #12]
	cmp	r0, r3
	mov	r0, r4
	bcs	.L2156
	str	r3, [r5, #176]
.L2153:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	rmnet_mux_smd_start_rx
.L2154:
	mov	r3, #0
	str	r3, [r5, #176]
	b	.L2153
.L2164:
	ldr	r0, [r10]
	movw	r1, #:lower16:.LC133
	movt	r1, #:upper16:.LC133
	add	r0, r0, #32
	bl	dev_err
	b	.L2153
	.fnend
	.size	rmnet_mux_smd_data_rx_tlet, .-rmnet_mux_smd_data_rx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_complete_epout, %function
rmnet_mux_smd_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r4, [r1, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r4, #364]
	cmp	r3, #0
	beq	.L2183
	ldr	r3, [r1, #44]
	add	r8, r1, #36
	add	r6, r4, #368
	ldr	r9, [r4, #84]
	cmn	r3, #104
	beq	.L2182
	cmp	r3, #0
	beq	.L2169
	cmn	r3, #108
	beq	.L2182
	ldr	r2, [r0, #4]
	movw	r1, #:lower16:.LC134
	ldr	r0, [r9]
	movt	r1, #:upper16:.LC134
	ldr	lr, [r5, #4]
	ldr	ip, [r5, #48]
	add	r0, r0, #32
	stm	sp, {ip, lr}
	bl	dev_err
.L2182:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r1, [r4, #116]
	mov	r0, r8
	add	r2, r4, #112
.L2181:
	bl	__list_add
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	_raw_spin_unlock
.L2169:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r4, #176]
	cmp	r3, #0
	bne	.L2170
	ldr	r0, [r4, #128]
	bl	smd_write_avail
	ldr	r3, [r5, #48]
	cmp	r0, r3
	strcc	r3, [r4, #176]
	bcs	.L2184
.L2170:
	mov	r0, r8
	add	r2, r4, #120
	ldr	r1, [r4, #124]
	b	.L2181
.L2183:
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	bx	r3	@ indirect register sibling call
.L2184:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r4, #128]
	ldr	r1, [r5]
	ldr	r2, [r5, #48]
	bl	smd_write
	ldr	r3, [r5, #48]
	cmp	r3, r0
	beq	.L2172
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC135
	movt	r1, #:upper16:.LC135
	add	r0, r0, #32
	bl	dev_err
.L2172:
	ldr	r3, [r4, #400]
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #400]
	bl	_raw_spin_lock
	mov	r0, r8
	add	r2, r4, #112
	ldr	r1, [r4, #116]
	bl	__list_add
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	rmnet_mux_smd_start_rx
	.fnend
	.size	rmnet_mux_smd_complete_epout, .-rmnet_mux_smd_complete_epout
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_complete_epin, %function
rmnet_smd_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	add	r7, r1, #36
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	add	r6, r4, #140
	add	r5, r4, #164
	cmn	r2, #104
	beq	.L2187
	cmp	r2, #0
	beq	.L2188
	cmn	r2, #108
	beq	.L2187
	ldr	r3, [r4, #84]
	movw	r1, #:lower16:.LC136
	movt	r1, #:upper16:.LC136
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L2188:
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #140]
	cmp	r3, r6
	beq	.L2205
	mov	r2, r6
	mov	r0, r7
	ldr	r1, [r4, #144]
	bl	__list_add
	ldr	r3, [r4, #424]
	add	r3, r3, #1
	str	r3, [r4, #424]
.L2192:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L2205:
	mov	r2, r6
	mov	r0, r7
	ldr	r1, [r4, #144]
	bl	__list_add
	ldr	r3, [r4, #424]
	add	r1, r4, #332
	mov	r0, #0
	add	r6, r4, #328
	add	r3, r3, #1
	str	r3, [r4, #424]
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L2192
	mov	r0, r6
	bl	__tasklet_schedule
	b	.L2192
.L2187:
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r2, r6
	mov	r0, r7
	ldr	r1, [r4, #144]
	bl	__list_add
	b	.L2192
	.fnend
	.size	rmnet_smd_complete_epin, .-rmnet_smd_complete_epin
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_complete_epin, %function
rmnet_mux_smd_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r1, #32]
	ldr	r3, [r5, #364]
	cmp	r3, #0
	beq	.L2224
	ldr	r2, [r1, #44]
	add	r7, r5, #104
	add	r6, r5, #368
	add	r4, r1, #36
	cmn	r2, #104
	beq	.L2209
	cmp	r2, #0
	beq	.L2210
	cmn	r2, #108
	beq	.L2209
	ldr	r3, [r5, #84]
	movw	r1, #:lower16:.LC137
	movt	r1, #:upper16:.LC137
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L2210:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r5, #104]
	mov	r2, r7
	cmp	r3, r7
	beq	.L2211
	mov	r0, r4
	ldr	r1, [r5, #108]
	bl	__list_add
.L2212:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L2224:
	mov	r6, r0
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L2209:
	mov	r0, r6
	bl	_raw_spin_lock
	mov	r2, r7
	mov	r0, r4
	ldr	r1, [r5, #108]
	bl	__list_add
	b	.L2212
.L2211:
	mov	r0, r4
	ldr	r1, [r5, #108]
	bl	__list_add
	add	r1, r5, #136
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r0, r5, #132
	bne	.L2212
	bl	__tasklet_schedule
	b	.L2212
	.fnend
	.size	rmnet_mux_smd_complete_epin, .-rmnet_mux_smd_complete_epin
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_setup, %function
rmnet_smd_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r0, #168]
	ldrh	r9, [r1, #2]	@ unaligned
	ldrh	r6, [r1, #6]	@ unaligned
	ldr	r8, [r2, #24]
	cmp	r3, #0
	ldr	r7, [r8, #4]
	beq	.L2236
	ldrh	r3, [r1]	@ unaligned
	movw	r2, #8482
	mov	r5, r1
	mov	r4, r0
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r2
	beq	.L2227
	movw	r2, #41217
	cmp	r3, r2
	beq	.L2228
	cmp	r3, #8448
	beq	.L2241
.L2238:
	mvn	r6, #94
.L2225:
	mov	r0, r6
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2228:
	cmp	r9, #0
	bne	.L2238
	ldrh	r3, [r1, #4]	@ unaligned
	add	r10, r0, #164
	mov	r0, r10
	str	r3, [sp, #20]
	bl	_raw_spin_lock
	mov	r2, r4
	ldr	fp, [r2, #132]!
	cmp	fp, r2
	beq	.L2242
	mov	r0, fp
	bl	list_del
	mov	r0, r10
	bl	_raw_spin_unlock
	ldmdb	fp, {r1, r2}
	ldr	r0, [r7]
	bl	memcpy
	mov	r0, r10
	ldr	r6, [fp, #-4]
	bl	_raw_spin_lock
	ldr	r1, [r4, #116]
	add	r2, r4, #116
	mov	r0, fp
	cmp	r2, r1
	ldr	r1, [r4, #120]
	beq	.L2232
	bl	__list_add
.L2233:
	mov	r0, r10
	bl	_raw_spin_unlock
	movw	r3, #:lower16:rmnet_txcommand_complete
	str	r4, [r7, #32]
	movt	r3, #:upper16:rmnet_txcommand_complete
	str	r3, [r7, #28]
	b	.L2234
.L2241:
	movw	r3, #:lower16:rmnet_smd_command_complete
	str	r0, [r7, #32]
	movt	r3, #:upper16:rmnet_smd_command_complete
	str	r3, [r7, #28]
.L2230:
	ldrb	r3, [r7, #26]	@ zero_extendqisi2
	str	r6, [r7, #4]
	mov	r1, r7
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r7, #26]
	ldr	r3, [r8]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	bge	.L2225
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC60
	mov	r2, r6
	movt	r1, #:upper16:.LC60
	add	r0, r0, #32
	bl	dev_err
	b	.L2225
.L2227:
	ands	r1, r9, #1
	ldr	r0, [r0, #260]
	movne	r2, #0
	movne	r1, #2
	moveq	r2, #2
	bl	smd_tiocmset
	mov	r6, r0
.L2234:
	cmp	r6, #0
	bge	.L2230
	b	.L2225
.L2232:
	bl	__list_add
	mov	r0, r9
	add	r1, r4, #268
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r0, r4, #264
	bne	.L2233
	bl	__tasklet_schedule
	b	.L2233
.L2236:
	mvn	r6, #106
	b	.L2225
.L2242:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC96
	str	r9, [sp]
	ldr	r2, [sp, #20]
	movt	r1, #:upper16:.LC96
	ldrb	r3, [r5, #1]	@ zero_extendqisi2
	add	r0, r0, #32
	str	r2, [sp, #4]
	ldrb	r2, [r5]	@ zero_extendqisi2
	str	r6, [sp, #8]
	mvn	r6, #94
	bl	_dev_info
	mov	r0, r10
	bl	_raw_spin_unlock
	b	.L2225
	.fnend
	.size	rmnet_smd_setup, .-rmnet_smd_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_unbind, %function
rmnet_smd_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	add	r0, r1, #284
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	bl	tasklet_kill
	add	r0, r4, #264
	bl	tasklet_kill
	add	r0, r4, #348
	bl	tasklet_kill
	add	r0, r4, #328
	bl	tasklet_kill
	ldr	r0, [r4, #388]
	bl	flush_workqueue
	mov	r0, r4
	bl	rmnet_smd_free_buf
	mov	r3, #0
	ldr	r0, [r4, #388]
	str	r3, [r4, #88]
	str	r3, [r4, #92]
	str	r3, [r4, #96]
	bl	destroy_workqueue
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #2632]
	bl	debugfs_remove_recursive
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	rmnet_smd_unbind, .-rmnet_smd_unbind
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_exit, %function
ghsuart_ctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #2636]
	b	debugfs_remove_recursive
	.fnend
	.size	ghsuart_ctrl_exit, .-ghsuart_ctrl_exit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_exit, %function
ghsuart_data_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #2640]
	b	debugfs_remove_recursive
	.fnend
	.size	ghsuart_data_exit, .-ghsuart_data_exit
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_cleanup, %function
diag_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR0
	str	r8, [sp, #16]
	movt	r7, #:upper16:.LANCHOR0
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	ldr	r0, [r3, #2644]
	bl	debugfs_remove_recursive
	ldr	r5, [r7]
	cmp	r5, r7
	ldr	r4, [r5]
	beq	.L2247
	ldr	r6, .L2253
	b	.L2250
.L2249:
	mov	r0, r6
	mov	r5, r4
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, r7
	ldr	r3, [r4]
	beq	.L2247
	mov	r4, r3
.L2250:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #12]
	mov	r1, r0
	cmp	r3, #0
	bne	.L2249
	mov	r0, r5
	sub	r8, r5, #4
	str	r1, [sp, #4]
	bl	list_del
	mov	r0, r8
	bl	kfree
	ldr	r1, [sp, #4]
	b	.L2249
.L2247:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2254:
	.align	2
.L2253:
	.word	.LANCHOR1+2648
	.fnend
	.size	diag_function_cleanup, .-diag_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_function_cleanup, %function
rmnet_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r3, [r4, #2652]
	str	lr, [sp, #12]
	cmp	r3, #0
	beq	.L2256
	ldr	r6, .L2263
	mov	r5, #0
.L2257:
	ldr	r0, [r6, #20]
	add	r5, r5, #1
	add	r6, r6, #24
	bl	kfree
	ldr	r3, [r4, #2652]
	cmp	r5, r3
	bcc	.L2257
.L2256:
	ldr	r0, [r4, #2656]
	bl	debugfs_remove_recursive
	mov	r3, #0
	ldr	r6, [sp, #8]
	str	r3, [r4, #2652]
	str	r3, [r4, #2660]
	str	r3, [r4, #2664]
	str	r3, [r4, #2668]
	str	r3, [r4, #2672]
	str	r3, [r4, #2676]
	str	r3, [r4, #2680]
	str	r3, [r4, #2684]
	str	r3, [r4, #2688]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2264:
	.align	2
.L2263:
	.word	.LANCHOR1+2520
	.fnend
	.size	rmnet_function_cleanup, .-rmnet_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_data_tx_tlet, %function
rmnet_data_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #164
	strd	r8, [sp, #16]
	add	r8, r0, #140
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r0, #84]
	b	.L2269
.L2277:
	ldr	r0, [r4, #324]
	bl	smd_read_avail
	cmp	r0, r7
	mov	r0, r6
	blt	.L2265
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #140]
	mov	r10, r0
	cmp	r8, r5
	mov	r0, r5
	sub	fp, r5, #36
	beq	.L2275
	bl	list_del
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r7
	ldr	r1, [r5, #-36]
	ldr	r0, [r4, #324]
	bl	smd_read
	str	r0, [r5, #-32]
	ldr	r0, [r4, #92]
	mov	r2, #32
	mov	r1, fp
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	mov	r0, r6
	bne	.L2276
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #428]
	mov	r1, r0
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #428]
	bl	_raw_spin_unlock_irqrestore
.L2269:
	ldr	r0, [r4, #324]
	bl	smd_cur_packet_size
	subs	r7, r0, #0
	bne	.L2277
.L2265:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2275:
	mov	r1, r10
.L2274:
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L2276:
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC138
	movt	r1, #:upper16:.LC138
	add	r0, r0, #32
	bl	dev_err
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r1, [r4, #144]
	mov	r2, r8
	mov	r0, r5
	bl	__list_add
	mov	r1, r7
	b	.L2274
	.fnend
	.size	rmnet_data_tx_tlet, .-rmnet_data_tx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_control_tx_tlet, %function
rmnet_control_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #:lower16:.LC1
	mov	r4, r0
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LC1
	add	r6, r0, #164
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #84]
	.pad #12
	sub	sp, sp, #12
	str	r3, [sp]
	str	r2, [sp, #4]
.L2283:
	add	r8, r4, #116
.L2282:
	add	r7, r4, #132
.L2281:
	ldr	r0, [r4, #260]
	add	r5, r4, #172
	bl	smd_cur_packet_size
	subs	r9, r0, #0
	beq	.L2278
	ldr	r0, [r4, #260]
	bl	smd_read_avail
	cmp	r0, r9
	mov	r0, r6
	blt	.L2278
	bl	_raw_spin_lock_irqsave
	ldr	r10, [r4, #116]
	mov	fp, r0
	cmp	r10, r8
	mov	r0, r10
	beq	.L2290
	bl	list_del
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r9
	ldr	r1, [r10, #-8]
	ldr	r0, [r4, #260]
	bl	smd_read
	str	r0, [r10, #-4]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r2, r7
	ldr	r1, [r4, #136]
	ldr	r3, [r4, #444]
	mov	r0, r10
	add	r3, r3, #1
	str	r3, [r4, #444]
	bl	__list_add
	mov	r1, r9
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r9, [r4, #84]
	ldr	r3, [r4, #100]
	ldr	r3, [r3]
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r5]
	add	r2, r2, #1
	strex	r1, r2, [r5]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #1
	bne	.L2281
	mov	r1, #0
	mvn	r0, #94
	strb	r0, [r3]
	strb	r2, [r3, #1]
	mov	r2, #32
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	r0, [r4, #104]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	strb	r1, [r3, #6]
	strb	r1, [r3, #7]
	ldrd	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bge	.L2282
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r1, r3, [r5]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r9]
	ldr	r1, [sp]
	add	r0, r0, #32
	bl	dev_err
	b	.L2283
.L2278:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2290:
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LC139
	movt	r1, #:upper16:.LC139
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mov	r1, fp
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_control_tx_tlet, .-rmnet_control_tx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_tx_pull, %function
gsmd_tx_pull:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r3, r0, #52
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #48
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r7, [r0, #20]
	mov	r0, r6
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irq
	ldr	r3, [r5, #16]
	cmp	r3, #0
	beq	.L2319
	ldr	r0, [r7]
	sub	r9, r5, #8
	ldr	r8, [r3, #88]
	cmp	r0, #0
	beq	.L2301
	ldr	r3, [r5, #-8]
	cmp	r3, r9
	bne	.L2306
	b	.L2301
.L2321:
	ldr	r4, [r5, #-8]
	mov	r0, r4
	sub	fp, r4, #36
	bl	list_del
	cmp	r10, #2048
	ldr	r1, [r4, #-36]
	movlt	r2, r10
	movge	r2, #2048
	ldr	r0, [r7]
	bl	smd_read
	str	r0, [r4, #-32]
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	ldr	r3, [r8, #8]
	mov	r1, fp
	mov	r2, #208
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irq
	cmp	r10, #0
	bne	.L2320
	ldr	r2, [r4, #-32]
	ldr	r3, [r5, #120]
	add	r3, r3, r2
	str	r3, [r5, #120]
	ldr	r0, [r7]
	cmp	r0, #0
	beq	.L2305
	ldr	r3, [r5, #-8]
	cmp	r9, r3
	beq	.L2305
.L2306:
	bl	smd_read_avail
	subs	r10, r0, #0
	bne	.L2321
.L2305:
	ldr	r3, [r5, #16]
	cmp	r3, #0
	bne	.L2301
.L2307:
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq
.L2301:
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L2307
	ldr	r3, [r5, #-8]
	cmp	r9, r3
	beq	.L2307
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, r5
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #2612]
	bl	queue_work_on
	b	.L2307
.L2319:
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	sub	r3, r5, #52
	cmp	r3, #0
	beq	.L2291
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
	cmp	r0, #0
	bne	.L2296
	b	.L2291
.L2297:
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
	bl	smd_read
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
.L2296:
	bl	smd_read_avail
	subs	r2, r0, #0
	mov	r1, #0
	bne	.L2297
.L2291:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2320:
	movw	r0, #:lower16:.LC140
	ldr	r3, [r5, #-52]
	str	r10, [sp]
	movt	r0, #:upper16:.LC140
	ldr	r1, .L2323
	ldr	r2, [sp, #12]
	bl	printk
	ldr	r3, [r5, #16]
	cmp	r3, #0
	beq	.L2322
	mov	r0, r4
	mov	r1, r9
	ldr	r2, [r5, #-8]
	bl	__list_add
	b	.L2305
.L2322:
	ldr	r0, [r4, #-36]
	bl	kfree
	ldr	r3, [r8, #8]
	mov	r1, fp
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	b	.L2305
.L2324:
	.align	2
.L2323:
	.word	.LANCHOR2+1000
	.fnend
	.size	gsmd_tx_pull, .-gsmd_tx_pull
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_data_tx_tlet, %function
rmnet_mux_smd_data_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r0, #84]
	ldr	r3, [r0, #372]
	cmp	r3, #0
	beq	.L2325
	mov	r4, r0
	add	r7, r0, #368
	add	r8, r0, #104
	b	.L2329
.L2341:
	ldr	r0, [r4, #128]
	bl	smd_read_avail
	cmp	r0, r6
	mov	r0, r7
	blt	.L2325
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #104]
	mov	r10, r0
	cmp	r8, r5
	mov	r0, r5
	sub	fp, r5, #36
	beq	.L2339
	bl	list_del
	mov	r1, r10
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r6
	ldr	r1, [r5, #-36]
	ldr	r0, [r4, #128]
	bl	smd_read
	str	r0, [r5, #-32]
	ldr	r0, [r4, #92]
	mov	r1, fp
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L2340
	ldr	r2, [r4, #372]
	ldr	r3, [r4, #408]
	cmp	r2, #0
	add	r3, r3, #1
	str	r3, [r4, #408]
	beq	.L2325
.L2329:
	ldr	r0, [r4, #128]
	bl	smd_cur_packet_size
	subs	r6, r0, #0
	bne	.L2341
.L2325:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2339:
	mov	r1, r10
.L2338:
	mov	r0, r7
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L2340:
	ldr	r3, [r9]
	movw	r1, #:lower16:.LC138
	mov	r2, r0
	movt	r1, #:upper16:.LC138
	add	r0, r3, #32
	bl	dev_err
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	ldr	r1, [r4, #108]
	mov	r2, r8
	mov	r0, r5
	bl	__list_add
	mov	r1, r6
	b	.L2338
	.fnend
	.size	rmnet_mux_smd_data_tx_tlet, .-rmnet_mux_smd_data_tx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_disconnect_work, %function
gsmd_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #-56]
	ldr	r0, [r3]
	bl	smd_close
	ldr	r3, [r4, #-56]
	mov	r2, #0
	str	r2, [r3]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gsmd_disconnect_work, .-gsmd_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_disconnect_work, %function
rmnet_smd_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	sub	r0, r0, #124
	strd	r6, [sp, #8]
	mov	r5, #0
	mov	r7, r4
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	tasklet_kill
	sub	r0, r4, #144
	bl	tasklet_kill
	sub	r0, r4, #60
	bl	tasklet_kill
	sub	r0, r4, #80
	bl	tasklet_kill
	ldr	r0, [r4, #-148]
	bl	smd_close
	str	r5, [r4, #-104]
	ldr	r0, [r4, #-84]
	bl	smd_close
	str	r5, [r4, #-236]
	str	r5, [r4, #-40]
	ldr	r6, [r7, #-252]!
	cmp	r6, r7
	ldr	r5, [r6]
	beq	.L2345
	sub	r8, r4, #260
.L2346:
	mov	r0, r6
	bl	list_del
	mov	r0, r6
	mov	r2, r8
	ldr	r1, [r4, #-256]
	bl	__list_add
	cmp	r7, r5
	mov	r6, r5
	ldr	r5, [r5]
	bne	.L2346
.L2345:
	mov	r7, r4
	ldr	r6, [r7, #-284]!
	cmp	r6, r7
	ldr	r5, [r6]
	beq	.L2347
	sub	r8, r4, #300
.L2348:
	mov	r0, r6
	bl	list_del
	mov	r0, r6
	mov	r2, r8
	ldr	r1, [r4, #-296]
	bl	__list_add
	cmp	r7, r5
	mov	r6, r5
	ldr	r5, [r5]
	bne	.L2348
.L2347:
	mov	r7, r4
	ldr	r6, [r7, #-276]!
	cmp	r6, r7
	ldr	r5, [r6]
	beq	.L2349
	sub	r8, r4, #292
.L2350:
	mov	r0, r6
	bl	list_del
	mov	r0, r6
	mov	r2, r8
	ldr	r1, [r4, #-288]
	bl	__list_add
	cmp	r7, r5
	mov	r6, r5
	ldr	r5, [r5]
	bne	.L2350
.L2349:
	ldrb	r3, [r4, #-152]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L2344
	sub	r0, r4, #232
	bl	platform_driver_unregister
	mov	r3, #0
	strb	r3, [r4, #-152]
.L2344:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_smd_disconnect_work, .-rmnet_smd_disconnect_work
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	cleanup, %function
cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, .L2360
	b	platform_driver_unregister
.L2361:
	.align	2
.L2360:
	.word	.LANCHOR0+256
	.fnend
	.size	cleanup, .-cleanup
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_connect_work, %function
rmnet_smd_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	sub	r2, r0, #132
	movw	r3, #:lower16:rmnet_smd_event_notify
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR0
	mov	r1, r2
	movt	r6, #:upper16:.LANCHOR0
	str	r8, [sp, #16]
	mov	r4, r0
	str	lr, [sp, #20]
	movt	r3, #:upper16:rmnet_smd_event_notify
	ldr	r8, [r0, #-308]
	.pad #24
	sub	sp, sp, #24
	ldr	r0, [r6, #336]
	bl	smd_open
	subs	r2, r0, #0
	bne	.L2374
	ldr	r3, [r4, #-88]
	ands	r3, r3, #1
	bne	.L2366
	mov	r2, sp
	str	r3, [sp, #4]
	add	r5, sp, #4
	bic	r1, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r1, r1, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r1, #12]
	add	r1, sp, #16
	sub	r7, r4, #80
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L2368
.L2375:
	bl	schedule
.L2368:
	mov	r2, #2
	mov	r1, r5
	mov	r0, r7
	bl	prepare_to_wait
	ldr	r3, [r4, #-88]
	tst	r3, #1
	beq	.L2375
	mov	r1, r5
	mov	r0, r7
	bl	finish_wait
.L2366:
	sub	r2, r4, #68
	movw	r3, #:lower16:rmnet_smd_event_notify
	ldr	r0, [r6, #340]
	mov	r1, r2
	movt	r3, #:upper16:rmnet_smd_event_notify
	bl	smd_open
	cmp	r0, #0
	bne	.L2376
	ldr	r3, [r4, #-24]
	ands	r3, r3, #1
	bne	.L2370
	mov	r2, sp
	str	r3, [sp, #4]
	add	r5, sp, #4
	bic	r1, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r1, r1, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r1, #12]
	add	r1, sp, #16
	sub	r6, r4, #16
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L2372
.L2377:
	bl	schedule
.L2372:
	mov	r2, #2
	mov	r1, r5
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r3, [r4, #-24]
	tst	r3, #1
	beq	.L2377
	mov	r1, r5
	mov	r0, r6
	bl	finish_wait
.L2370:
	mov	r3, #1
	sub	r0, r4, #392
	str	r3, [r4, #-224]
	bl	rmnet_smd_start_rx
.L2362:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2374:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC141
	movt	r1, #:upper16:.LC141
	add	r0, r0, #32
	bl	dev_err
	ldrb	r3, [r4, #-136]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L2362
	sub	r0, r4, #216
	bl	platform_driver_register
	subs	r3, r0, #0
	moveq	r3, #1
	strbeq	r3, [r4, #-136]
	beq	.L2362
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC142
	movt	r1, #:upper16:.LC142
	ldr	r2, [r4, #-196]
	add	r0, r0, #32
	bl	dev_err
	b	.L2362
.L2376:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC143
	movt	r1, #:upper16:.LC143
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #-132]
	bl	smd_close
	b	.L2362
	.fnend
	.size	rmnet_smd_connect_work, .-rmnet_smd_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_read_w, %function
grmnet_ctrl_smd_read_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #32]
	.pad #36
	sub	sp, sp, #36
	add	r10, r3, #108
	str	r3, [sp, #4]
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	ldr	r0, [r4, #-52]
	cmp	r0, #0
	beq	.L2379
	mov	r3, sp
	bic	r9, r3, #8128
	bic	r9, r9, #63
.L2390:
	bl	smd_cur_packet_size
	subs	r7, r0, #0
	ble	.L2379
	mov	r1, r5
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	mov	r1, #208
	mov	r0, r7
	bl	__kmalloc
	subs	r8, r0, #0
	beq	.L2378
	mov	r5, #0
.L2388:
	ldr	r0, [r4, #-52]
	bl	smd_read_avail
	subs	fp, r0, #0
	bne	.L2381
	ldr	r3, [r4, #-52]
	cmp	r3, #0
	beq	.L2382
	ldr	r0, [r9, #12]
	movw	r3, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r3, #:upper16:autoremove_wake_function
	sub	r6, r4, #28
	str	fp, [sp, #12]
	str	r1, [sp, #24]
	str	r0, [sp, #16]
	str	r3, [sp, #20]
	str	r1, [sp, #28]
	b	.L2384
.L2412:
	ldr	r3, [r4, #-52]
	cmp	r3, #0
	beq	.L2383
	bl	schedule
.L2384:
	mov	r2, #2
	add	r1, sp, #12
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r0, [r4, #-52]
	bl	smd_read_avail
	subs	fp, r0, #0
	beq	.L2412
.L2383:
	add	r1, sp, #12
	mov	r0, r6
	bl	finish_wait
.L2381:
	cmp	fp, #0
	ldr	r3, [r4, #-52]
	blt	.L2382
	cmp	r3, #0
	beq	.L2382
	add	r1, fp, r5
	cmp	r1, r7
	bgt	.L2413
	mov	r2, fp
	mov	r0, r3
	add	r1, r8, r5
	bl	smd_read
	subs	r2, r0, #0
	ble	.L2414
	add	r5, r5, r2
	cmp	r7, r5
	bgt	.L2388
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #4]
	mov	r5, r0
	ldr	r0, [r3, #104]
	cmp	r0, #0
	beq	.L2389
	ldr	r3, [r0, #92]
	cmp	r3, #0
	beq	.L2389
	mov	r2, r7
	mov	r1, r8
	blx	r3
	ldr	r3, [r4, #44]
	add	r3, r3, #1
	str	r3, [r4, #44]
.L2389:
	mov	r0, r8
	bl	kfree
	ldr	r0, [r4, #-52]
	cmp	r0, #0
	bne	.L2390
.L2379:
	mov	r1, r5
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
.L2378:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2382:
	movw	r0, #:lower16:.LC144
	ldr	r1, .L2415
	mov	r2, fp
	movt	r0, #:upper16:.LC144
	bl	printk
	mov	r0, r8
	bl	kfree
	b	.L2378
.L2414:
	movw	r0, #:lower16:.LC146
	ldr	r1, .L2415
	movt	r0, #:upper16:.LC146
	bl	printk
	mov	r0, r8
	bl	kfree
	b	.L2378
.L2413:
	movw	r0, #:lower16:.LC145
	ldr	r1, .L2415
	movt	r0, #:upper16:.LC145
	bl	printk
	mov	r0, r8
	bl	kfree
	b	.L2378
.L2416:
	.align	2
.L2415:
	.word	.LANCHOR2+1016
	.fnend
	.size	grmnet_ctrl_smd_read_w, .-grmnet_ctrl_smd_read_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_reset_function_queue, %function
mbim_reset_function_queue:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #204
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock
	mov	r1, #32
	mov	r0, #0
	bl	mbim_alloc_ctrl_pkt
	cmp	r0, #0
	beq	.L2420
	add	r2, r4, #208
	ldr	r1, [r4, #212]
	add	r0, r0, #8
	bl	__list_add
	mov	r0, r5
	bl	_raw_spin_unlock
	ldr	r6, [sp, #8]
	add	r0, r4, #108
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L2420:
	ldr	r2, .L2421
	movw	r0, #:lower16:.LC147
	movt	r0, #:upper16:.LC147
	mov	r1, r2
	bl	printk
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L2422:
	.align	2
.L2421:
	.word	.LANCHOR2+1040
	.fnend
	.size	mbim_reset_function_queue, .-mbim_reset_function_queue
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fmbim_reset_cmd_complete, %function
fmbim_reset_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r1, #32]
	b	mbim_reset_function_queue
	.fnend
	.size	fmbim_reset_cmd_complete, .-fmbim_reset_cmd_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fmbim_cmd_complete, %function
fmbim_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r1, #32]
	ldr	r7, [r1, #48]
	cmp	r5, #0
	beq	.L2430
	ldr	r2, [r1, #44]
	cmp	r2, #0
	blt	.L2431
	mov	r4, r1
	mov	r0, r7
	mov	r1, #32
	bl	mbim_alloc_ctrl_pkt
	subs	r6, r0, #0
	beq	.L2432
	ldr	r0, [r6], #8
	mov	r2, r7
	ldr	r1, [r4]
	add	r4, r5, #204
	bl	memcpy
	mov	r0, r4
	bl	_raw_spin_lock
	add	r2, r5, #208
	ldr	r1, [r5, #212]
	mov	r0, r6
	bl	__list_add
	mov	r0, r4
	bl	_raw_spin_unlock
	ldrd	r6, [sp, #8]
	add	r0, r5, #108
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
.L2430:
	ldr	r1, .L2433
	movw	r0, #:lower16:.LC148
	movt	r0, #:upper16:.LC148
.L2429:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L2432:
	movw	r0, #:lower16:.LC150
	ldr	r1, .L2433
	movt	r0, #:upper16:.LC150
	b	.L2429
.L2431:
	movw	r0, #:lower16:.LC149
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC149
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L2433
	b	printk
.L2434:
	.align	2
.L2433:
	.word	.LANCHOR2+1068
	.fnend
	.size	fmbim_cmd_complete, .-fmbim_cmd_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_disable, %function
conn_gadget_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC151
	str	r6, [sp, #8]
	movt	r0, #:upper16:.LC151
	mov	r5, #1
	str	lr, [sp, #12]
	ldr	r1, [r4, #84]
	mov	r6, #0
	bl	printk
	ldr	r3, [r4, #92]
	str	r5, [r4, #104]
	ldr	r2, [r4, #100]
	str	r6, [r4, #100]
	mov	r0, r3
	str	r2, [r4, #212]
	ldr	r3, [r3, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, r6
	mov	r2, r5
	add	r0, r4, #200
	mov	r1, #3
	bl	__wake_up
	ldr	lr, [sp, #12]
	mov	r3, r6
	mov	r2, r5
	add	r0, r4, #144
	mov	r1, #3
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #16
	b	__wake_up
	.fnend
	.size	conn_gadget_function_disable, .-conn_gadget_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_function_disable, %function
acc_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrb	r3, [r0, #100]	@ zero_extendqisi2
	ldr	r2, [r0, #92]
	and	r3, r3, #254
	orr	r3, r3, #2
	mov	r0, r2
	strb	r3, [r4, #100]
	ldr	r3, [r2, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	lr, [sp, #4]
	add	r0, r4, #1664
	mov	r3, #0
	ldr	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	add	sp, sp, #8
	b	__wake_up
	.fnend
	.size	acc_function_disable, .-acc_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_out, %function
acc_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #2504]
	str	r2, [r0, #1696]
	ldr	r3, [r1, #44]
	cmn	r3, #108
	bne	.L2440
	ldrb	r3, [r0, #100]	@ zero_extendqisi2
	and	r3, r3, #254
	orr	r3, r3, #2
	strb	r3, [r0, #100]
.L2440:
	add	r0, r0, #1664
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	b	__wake_up
	.fnend
	.size	acc_complete_out, .-acc_complete_out
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_in, %function
acc_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, r1
	movw	r3, #:lower16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r1, [r1, #44]
	movt	r3, #:upper16:.LANCHOR1
	ldr	r4, [r3, #2504]
	cmn	r1, #108
	bne	.L2442
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	and	r3, r3, #254
	orr	r3, r3, #2
	strb	r3, [r4, #100]
.L2442:
	add	r1, r4, #1648
	mov	r0, r4
	add	r1, r1, #8
	bl	req_put
	add	r0, r4, #1664
	mov	r3, #0
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	r0, r0, #12
	mov	r2, #1
	mov	r1, #3
	add	sp, sp, #8
	b	__wake_up
	.fnend
	.size	acc_complete_in, .-acc_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_ctrlrequest, %function
mtp_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r1, [r2]	@ zero_extendqisi2
	ldrh	r6, [r2, #2]	@ unaligned
	ldrh	r5, [r2, #6]	@ unaligned
	cmp	r1, #128
	beq	.L2465
	and	r0, r1, #96
	ldrh	r3, [r2, #4]	@ unaligned
	cmp	r0, #64
	beq	.L2466
	cmp	r0, #32
	bne	.L2462
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r7, [r2, #2516]
	cmp	r1, #100
	beq	.L2467
	cmp	r1, #103
	bne	.L2462
	orrs	r3, r3, r6
	bne	.L2462
	ldr	r2, [r4, #4]
	mov	r3, #4
	add	r6, r7, #88
	mov	r0, r6
	ldr	r8, [r2]
	strh	r3, [r8]	@ movhi
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r7, #104]
	mov	r1, r0
	mov	r0, r6
	cmp	r3, #3
	movweq	r3, #8217
	movwne	r3, #8193
	strh	r3, [r8, #2]	@ movhi
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #4
	cmp	r5, r0
	mov	r6, r0
	movls	r5, #0
	movhi	r5, #1
.L2447:
	ldr	r3, [r4, #4]
	mov	r2, #32
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfi	r1, r5, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r4, #4]
	str	r0, [r3, #4]
	ldr	r3, [r4]
	ldr	r1, [r4, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L2468
.L2444:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2466:
	ldrb	r2, [r2, #1]	@ zero_extendqisi2
	cmp	r2, #1
	bne	.L2462
	tst	r1, #128
	beq	.L2462
	sub	r3, r3, #4
	cmp	r3, #1
	bhi	.L2462
	ldr	r1, .L2471
	cmp	r5, #40
	ldr	r3, [r4, #4]
	movcc	r6, r5
	movcs	r6, #40
.L2464:
	mov	r2, r6
	ldr	r0, [r3]
	bl	memcpy
	cmp	r6, r5
	mov	r0, r6
	movge	r5, #0
	movlt	r5, #1
	b	.L2447
.L2467:
	orrs	r6, r3, r6
	beq	.L2469
.L2462:
	mvn	r6, #94
	b	.L2444
.L2465:
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #6
	bne	.L2462
	lsr	r3, r6, #8
	cmp	r3, #3
	bne	.L2462
	uxtb	r6, r6
	cmp	r6, #238
	bne	.L2462
	cmp	r5, #18
	ldr	r1, .L2471+4
	movcc	r6, r5
	movcs	r6, #18
	ldr	r3, [r4, #4]
	b	.L2464
.L2468:
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC152
	movt	r1, #:upper16:.LC152
	ldr	r2, .L2471+8
	add	r0, r0, #32
	bl	dev_err
	b	.L2444
.L2469:
	add	r8, r7, #88
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r7, #104]
	mov	r9, r0
	cmp	r3, #2
	beq	.L2470
.L2450:
	mov	r0, r8
	mov	r1, r9
	mov	r6, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	mov	r5, #0
	b	.L2447
.L2470:
	mov	r10, #3
	mov	r3, r6
	mov	r1, r10
	add	r0, r7, #132
	mov	r2, #1
	str	r10, [r7, #104]
	bl	__wake_up
	mov	r3, r6
	mov	r1, r10
	add	r0, r7, #144
	mov	r2, #1
	bl	__wake_up
	b	.L2450
.L2472:
	.align	2
.L2471:
	.word	.LANCHOR0+364
	.word	.LANCHOR0+344
	.word	.LANCHOR2+1088
	.fnend
	.size	mtp_function_ctrlrequest, .-mtp_function_ctrlrequest
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_disable, %function
mtp_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, #0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	str	r5, [r0, #104]
	ldr	r0, [r0, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r6, [sp, #8]
	mov	r3, r5
	add	r0, r4, #132
	mov	r2, #1
	ldrd	r4, [sp]
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
	.fnend
	.size	mtp_function_disable, .-mtp_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_complete_intr, %function
mtp_complete_intr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, r1
	movw	r3, #:lower16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r1, [r1, #44]
	movt	r3, #:upper16:.LANCHOR1
	ldr	r4, [r3, #2516]
	cmp	r1, #0
	movne	r3, #4
	add	r1, r4, #124
	mov	r0, r4
	strne	r3, [r4, #104]
	bl	mtp_req_put
	ldr	lr, [sp, #4]
	add	r0, r4, #156
	mov	r3, #0
	ldr	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	add	sp, sp, #8
	b	__wake_up
	.fnend
	.size	mtp_complete_intr, .-mtp_complete_intr
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_complete_out, %function
mtp_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #2516]
	str	r2, [r0, #176]
	ldr	r3, [r1, #44]
	add	r0, r0, #132
	mov	r2, #1
	mov	r1, #3
	cmp	r3, #0
	movne	r3, #4
	strne	r3, [r0, #-28]
	mov	r3, #0
	b	__wake_up
	.fnend
	.size	mtp_complete_out, .-mtp_complete_out
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_complete_in, %function
mtp_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, r1
	movw	r3, #:lower16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r1, [r1, #44]
	movt	r3, #:upper16:.LANCHOR1
	ldr	r4, [r3, #2516]
	cmp	r1, #0
	movne	r3, #4
	add	r1, r4, #116
	mov	r0, r4
	strne	r3, [r4, #104]
	bl	mtp_req_put
	ldr	lr, [sp, #4]
	add	r0, r4, #144
	mov	r3, #0
	ldr	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	add	sp, sp, #8
	b	__wake_up
	.fnend
	.size	mtp_complete_in, .-mtp_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_setup, %function
ccid_function_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	ip, [r0, #20]
	ldr	r2, [r0, #96]
	ldrh	r3, [r1, #6]	@ unaligned
	ldr	r4, [ip, #24]
	cmp	r2, #0
	ldr	lr, [r4, #4]
	beq	.L2498
	ldrh	r2, [r1]	@ unaligned
	mov	ip, r0
	movw	r0, #41218
	rev16	r2, r2
	uxth	r2, r2
	cmp	r2, r0
	beq	.L2494
	movw	r0, #41219
	cmp	r2, r0
	beq	.L2495
	movw	r0, #8449
	cmp	r2, r0
	beq	.L2505
.L2502:
	mvn	r4, #94
.L2493:
.L2492:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2495:
	ldr	r2, [lr, #4]
	cmp	r3, r2
	bhi	.L2502
	movw	r2, #:lower16:.LANCHOR0
	ldr	r1, [lr]
	cmp	r3, #4
	movt	r2, #:upper16:.LANCHOR0
	movcs	r3, #4
	ldr	r2, [r2, #423]	@ unaligned
	str	r2, [r1]
.L2497:
	str	r3, [lr, #4]
	ldr	r3, [r4]
	mov	r1, lr
	mov	r2, #32
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L2492
	movw	r0, #:lower16:.LC153
	mov	r1, r4
	movt	r0, #:upper16:.LC153
	bl	printk
	b	.L2492
.L2505:
	cmp	r3, #0
	bne	.L2502
	ldrh	lr, [r1, #2]	@ unaligned
	mov	r1, #1
	add	r0, ip, #128
	mov	r2, r1
	mov	r4, r3
	strb	r1, [ip, #140]
	lsr	r5, lr, #8
	strb	lr, [ip, #141]
	str	r1, [ip, #144]
	mov	r1, #3
	strb	r5, [ip, #142]
	strb	r3, [ip, #143]
	bl	__wake_up
	b	.L2492
.L2494:
	ldr	r2, [lr, #4]
	cmp	r3, r2
	bhi	.L2502
	movw	r2, #:lower16:.LANCHOR0
	ldr	r1, [lr]
	cmp	r3, #4
	movt	r2, #:upper16:.LANCHOR0
	movcs	r3, #4
	ldr	r2, [r2, #414]	@ unaligned
	str	r2, [r1]
	b	.L2497
.L2498:
	mvn	r4, #106
	b	.L2492
	.fnend
	.size	ccid_function_setup, .-ccid_function_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_complete_in, %function
ccid_bulk_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, r1
	movw	r3, #:lower16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r1, [r1, #44]
	movt	r3, #:upper16:.LANCHOR1
	ldr	r4, [r3, #2220]
	cmp	r1, #0
	movne	r3, #1
	add	r1, r4, #192
	mov	r0, r4
	strne	r3, [r4, #148]
	bl	ccid_req_put
	ldr	lr, [sp, #4]
	add	r0, r4, #172
	mov	r3, #0
	ldr	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	add	sp, sp, #8
	b	__wake_up
	.fnend
	.size	ccid_bulk_complete_in, .-ccid_bulk_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_complete_out, %function
ccid_bulk_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #44]
	movw	r3, #:lower16:.LANCHOR1
	mov	ip, #1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #2220]
	cmp	r2, #0
	mov	r2, ip
	movne	r3, #1
	add	r0, r1, #160
	str	ip, [r1, #188]
	strne	r3, [r1, #148]
	mov	r3, #0
	mov	r1, #3
	b	__wake_up
	.fnend
	.size	ccid_bulk_complete_out, .-ccid_bulk_complete_out
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_disable, %function
adb_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, #0
	mov	r4, r0
	str	r6, [sp, #8]
	mov	r6, #1
	str	lr, [sp, #12]
	str	r5, [r0, #100]
	strb	r5, [r0, #160]
	ldr	r0, [r0, #92]
	str	r6, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	lr, [sp, #12]
	mov	r3, r5
	mov	r2, r6
	add	r0, r4, #128
	mov	r1, #3
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #16
	b	__wake_up
	.fnend
	.size	adb_function_disable, .-adb_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_complete_out, %function
adb_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #2692]
	str	r2, [r0, #156]
	ldr	r3, [r1, #44]
	add	r0, r0, #128
	mov	r1, #3
	cmp	r3, #0
	cmnne	r3, #104
	mov	r3, #0
	strne	r2, [r0, #-24]
	mov	r2, #1
	b	__wake_up
	.fnend
	.size	adb_complete_out, .-adb_complete_out
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_command_complete, %function
rmnet_mux_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r8, [r5, #84]
	cmp	r2, #0
	blt	.L2530
	mov	r4, r1
	mov	r1, #32
	ldr	r7, [r4, #48]
	mov	r0, r7
	bl	rmnet_mux_alloc_ctrl_pkt
	subs	r6, r0, #0
	beq	.L2531
	add	r8, r5, #368
	mov	r0, r8
	bl	_raw_spin_lock
	ldr	r3, [r5, #356]
	cmp	r3, #0
	bne	.L2527
	mov	r0, r8
	bl	_raw_spin_unlock
	ldr	r0, [r6]
	bl	kfree
	mov	r0, r6
	bl	kfree
	ldr	r3, [r5, #424]
	ldr	r1, .L2533
	ldr	r0, .L2533+4
	add	r3, r3, #1
	str	r3, [r5, #424]
	bl	___ratelimit
	cmp	r0, #0
	bne	.L2532
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2530:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC154
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC154
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
.L2527:
	ldr	r0, [r6], #8
	mov	r2, r7
	ldr	r1, [r4]
	bl	memcpy
	add	r2, r5, #316
	ldr	r1, [r5, #320]
	mov	r0, r6
	bl	__list_add
	ldr	r3, [r5, #336]
	mov	r0, r8
	add	r3, r3, #1
	str	r3, [r5, #336]
	bl	_raw_spin_unlock
	ldrd	r6, [sp, #8]
	add	r0, r5, #324
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
.L2531:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC155
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC155
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
.L2532:
	movw	r0, #:lower16:.LC156
	ldr	r2, [r5, #424]
	ldr	r1, .L2533
	movt	r0, #:upper16:.LC156
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L2534:
	.align	2
.L2533:
	.word	.LANCHOR2+1104
	.word	.LANCHOR0+460
	.fnend
	.size	rmnet_mux_command_complete, .-rmnet_mux_command_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_setup, %function
acm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	movw	r0, #8482
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r1]	@ unaligned
	ldr	ip, [r5, #20]
	ldrh	lr, [r1, #4]	@ unaligned
	ldrh	r2, [r1, #6]	@ unaligned
	rev16	r3, r3
	uxth	r3, r3
	ldr	r6, [ip, #24]
	cmp	r3, r0
	ldr	r4, [r6, #4]
	beq	.L2537
	movw	r1, #41249
	cmp	r3, r1
	beq	.L2538
	movw	r1, #8480
	cmp	r3, r1
	beq	.L2548
.L2545:
	mvn	r4, #94
.L2535:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2548:
	cmp	r2, #7
	bne	.L2545
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	cmp	r3, lr
	bne	.L2545
	ldr	r1, [r6]
	mov	r7, r2
	movw	r3, #:lower16:acm_complete_set_line_coding
	movt	r3, #:upper16:acm_complete_set_line_coding
	ldr	r2, [r1, #4]
	str	r5, [r2]
	str	r3, [r4, #28]
.L2540:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r7, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r4, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L2535
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC157
	mov	r3, r4
	ldrb	r2, [r5, #146]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC157
	add	r0, r0, #32
	bl	dev_err
	b	.L2535
.L2538:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	cmp	r3, lr
	bne	.L2545
	cmp	r2, #7
	add	r1, r5, #160
	ldr	r0, [r4]
	movcc	r7, r2
	movcs	r7, #7
	mov	r2, r7
	bl	memcpy
	b	.L2540
.L2537:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	cmp	r3, lr
	bne	.L2545
	ldrh	lr, [r1, #2]	@ unaligned
	movw	ip, #:lower16:.LANCHOR1
	mov	r3, #1
	movt	ip, #:upper16:.LANCHOR1
	mov	r2, r3
	mov	r1, r3
	add	r0, ip, #2208
	str	r3, [ip, #2204]
	mov	r3, #0
	strh	lr, [r5, #168]	@ movhi
	uxth	lr, lr
	mov	r7, r3
	str	lr, [ip, #2696]
	bl	__wake_up
	b	.L2540
	.fnend
	.size	acm_setup, .-acm_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_event_notify, %function
rmnet_smd_event_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #2
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #48]
	beq	.L2551
	cmp	r1, #3
	beq	.L2552
	cmp	r1, #1
	beq	.L2567
.L2549:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2567:
	ldr	r3, [r0, #20]
	ldr	r3, [r3, #168]
	cmp	r3, #0
	beq	.L2549
	cmp	r5, #0
	ldr	r0, [r0]
	bne	.L2568
.L2555:
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L2549
	add	r4, r4, #4
	mov	r0, #0
	add	r1, r4, #4
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L2549
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__tasklet_schedule
.L2552:
	add	r1, r0, #44
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_clear_bit
.L2551:
	add	r1, r0, #44
	mov	r0, #0
	bl	_set_bit
	ldr	r6, [sp, #8]
	add	r0, r4, #52
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L2568:
	bl	smd_write_avail
	cmp	r0, r5
	bge	.L2556
.L2566:
	ldr	r0, [r4]
	b	.L2555
.L2556:
	add	r1, r4, #28
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r0, r4, #24
	bne	.L2566
	bl	__tasklet_schedule
	b	.L2566
	.fnend
	.size	rmnet_smd_event_notify, .-rmnet_smd_event_notify
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_notify, %function
grmnet_ctrl_smd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #2
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	beq	.L2571
	cmp	r1, #3
	beq	.L2572
	cmp	r1, #1
	beq	.L2603
.L2570:
	add	r0, r5, #24
	mov	r3, #0
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	mov	r2, #1
	mov	r1, #3
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up
.L2603:
	ldr	r0, [r0]
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L2574
	ldr	r2, [r5, #28]
	add	r3, r5, #28
	cmp	r2, r3
	beq	.L2604
.L2574:
	ldr	r0, [r5]
	bl	smd_write_avail
	cmp	r0, #0
	beq	.L2570
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r5, #68
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #2700]
	bl	queue_work_on
	b	.L2570
.L2572:
	add	r1, r0, #8
	mov	r0, #0
	bl	_clear_bit
	cmp	r5, #0
	beq	.L2577
	ldr	r0, [r5, #104]
	cmp	r0, #0
	beq	.L2577
	ldr	r3, [r0, #104]
	cmp	r3, #0
	beq	.L2577
	blx	r3
.L2577:
	add	r8, r5, #108
	add	r7, r5, #40
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #40]
	mov	r9, r0
	cmp	r4, r7
	beq	.L2578
.L2579:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
	ldr	r4, [r5, #40]
	cmp	r4, r7
	bne	.L2579
.L2578:
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L2570
.L2571:
	add	r1, r0, #8
	mov	r0, #0
	bl	_set_bit
	cmp	r5, #0
	beq	.L2570
	ldr	r0, [r5, #104]
	cmp	r0, #0
	beq	.L2570
	ldr	r3, [r0, #108]
	cmp	r3, #0
	beq	.L2570
	blx	r3
	b	.L2570
.L2604:
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r5, #52
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #2700]
	bl	queue_work_on
	b	.L2574
	.fnend
	.size	grmnet_ctrl_smd_notify, .-grmnet_ctrl_smd_notify
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_disconnect_w, %function
gctrl_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #52]
	tst	r3, #1
	bne	.L2607
	bx	lr
.L2607:
	add	r1, r0, #52
	mov	r0, #0
	b	_clear_bit
	.fnend
	.size	gctrl_disconnect_w, .-gctrl_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_disconnect_w, %function
ghsic_data_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #76]
	tst	r3, #1
	bne	.L2610
	bx	lr
.L2610:
	add	r1, r0, #76
	mov	r0, #0
	b	_clear_bit
	.fnend
	.size	ghsic_data_disconnect_w, .-ghsic_data_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_remove, %function
ghsuart_ctrl_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r2, #:lower16:.LANCHOR1
	mov	r1, #84
	str	r6, [sp, #8]
	movt	r2, #:upper16:.LANCHOR1
	str	lr, [sp, #12]
	ldr	r3, [r0, #4]
	mla	r3, r1, r3, r2
	ldr	r4, [r3, #1864]
	add	r6, r4, #8
	add	r5, r4, #88
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r4, #12]
	mov	r1, r0
	mov	r0, r6
	cmp	r4, #0
	beq	.L2619
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L2614
	mov	r0, r4
	blx	r3
.L2614:
	mov	r1, r5
	mov	r0, #0
	bl	_clear_bit
	mov	r1, r5
	mov	r0, #2
	bl	_clear_bit
.L2613:
	mov	r1, r5
	mov	r0, #1
	bl	_clear_bit
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2619:
	bl	_raw_spin_unlock_irqrestore
	b	.L2613
	.fnend
	.size	ghsuart_ctrl_remove, .-ghsuart_ctrl_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_out_trigger, %function
f_midi_out_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #28]
	cmp	r1, #0
	ldr	r0, [r0, #12]
	ldr	r1, [r3, #200]
	add	r1, r1, #296
	bne	.L2622
	b	_clear_bit
.L2622:
	b	_set_bit
	.fnend
	.size	f_midi_out_trigger, .-f_midi_out_trigger
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_notify, %function
rmnet_mux_smd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #2
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #176]
	beq	.L2625
	cmp	r1, #3
	beq	.L2626
	cmp	r1, #1
	beq	.L2641
.L2623:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2641:
	ldr	r3, [r0, #372]
	cmp	r3, #0
	beq	.L2623
	cmp	r5, #0
	ldr	r0, [r0, #128]
	bne	.L2642
.L2629:
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L2623
	add	r1, r4, #136
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r0, r4, #132
	bne	.L2623
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__tasklet_schedule
.L2626:
	add	r1, r0, #172
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_clear_bit
.L2625:
	add	r1, r0, #172
	mov	r0, #0
	bl	_set_bit
	ldr	r6, [sp, #8]
	add	r0, r4, #180
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L2642:
	bl	smd_write_avail
	cmp	r0, r5
	bge	.L2630
.L2640:
	ldr	r0, [r4, #128]
	b	.L2629
.L2630:
	add	r1, r4, #156
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r0, r4, #152
	bne	.L2640
	bl	__tasklet_schedule
	b	.L2640
	.fnend
	.size	rmnet_mux_smd_notify, .-rmnet_mux_smd_notify
	.section	.init.text,"ax",%progbits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_init, %function
gsmd_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC158
	push	{r4, lr}
	.save {r4, lr}
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	movt	r0, #:upper16:.LC158
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmn	r0, #4096
	movt	r3, #:upper16:.LANCHOR1
	mov	r4, r3
	str	r0, [r3, #2704]
	bhi	.L2645
	ldr	ip, .L2652
	mov	r2, r0
	movw	r0, #:lower16:.LC159
	movt	r0, #:upper16:.LC159
	mov	r3, #0
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	str	r0, [r4, #2708]
	beq	.L2646
	cmn	r0, #4096
	bls	.L2645
.L2646:
	ldr	r0, [r4, #2704]
	bl	debugfs_remove
.L2645:
	mov	r3, #0
	mov	r0, r3
	strb	r3, [r4, #2712]
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L2653:
	.align	2
.L2652:
	.word	.LANCHOR2+1132
	.fnend
	.size	gsmd_ctrl_init, .-gsmd_ctrl_init
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_exit, %function
gsmd_ctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #2708]
	bl	debugfs_remove
	ldr	r0, [r4, #2704]
	pop	{r4, lr}
	b	debugfs_remove
	.fnend
	.size	gsmd_ctrl_exit, .-gsmd_ctrl_exit
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_init, %function
gctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC160
	push	{r4, lr}
	.save {r4, lr}
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	movt	r0, #:upper16:.LC160
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmn	r0, #4096
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #2716]
	bhi	.L2658
	ldr	ip, .L2665
	mov	r2, r0
	movw	r0, #:lower16:.LC159
	mov	r4, r3
	movt	r0, #:upper16:.LC159
	mov	r3, #0
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	str	r0, [r4, #2720]
	beq	.L2659
	cmn	r0, #4096
	bls	.L2658
.L2659:
	ldr	r0, [r4, #2716]
	bl	debugfs_remove
.L2658:
	mov	r0, #0
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L2666:
	.align	2
.L2665:
	.word	.LANCHOR2+1240
	.fnend
	.size	gctrl_init, .-gctrl_init
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_exit, %function
gctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #2720]
	bl	debugfs_remove
	ldr	r0, [r4, #2716]
	pop	{r4, lr}
	b	debugfs_remove
	.fnend
	.size	gctrl_exit, .-gctrl_exit
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_init, %function
ghsic_data_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC161
	push	{r4, r5, lr}
	.save {r4, r5, lr}
	mov	r1, #0
	.pad #12
	sub	sp, sp, #12
	movt	r0, #:upper16:.LC161
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmn	r0, #4096
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #2724]
	bhi	.L2671
	ldr	r5, .L2683
	mov	r2, r0
	movw	r0, #:lower16:.LC159
	mov	r4, r3
	movt	r0, #:upper16:.LC159
	mov	r3, #0
	mov	r1, #292
	str	r5, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	str	r0, [r4, #2728]
	beq	.L2674
	cmn	r0, #4096
	ldr	r2, [r4, #2724]
	bhi	.L2674
	add	r5, r5, #108
	movw	r0, #:lower16:.LC162
	movt	r0, #:upper16:.LC162
	mov	r3, #0
	mov	r1, #420
	str	r5, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	str	r0, [r4, #2732]
	beq	.L2674
	cmn	r0, #4096
	bls	.L2671
.L2674:
	ldr	r0, [r4, #2724]
	bl	debugfs_remove
.L2671:
	mov	r0, #0
	add	sp, sp, #12
	@ sp needed
	pop	{r4, r5, pc}
.L2684:
	.align	2
.L2683:
	.word	.LANCHOR2+1348
	.fnend
	.size	ghsic_data_init, .-ghsic_data_init
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_exit, %function
ghsic_data_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #2728]
	bl	debugfs_remove
	ldr	r0, [r4, #2732]
	bl	debugfs_remove
	ldr	r0, [r4, #2724]
	pop	{r4, lr}
	b	debugfs_remove
	.fnend
	.size	ghsic_data_exit, .-ghsic_data_exit
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_init, %function
ghsuart_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC163
	push	{r4, lr}
	.save {r4, lr}
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	movt	r0, #:upper16:.LC163
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmp	r0, #0
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #2636]
	beq	.L2691
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L2691
	ldr	ip, .L2697
	movw	r0, #:lower16:.LC159
	mov	r4, r3
	movt	r0, #:upper16:.LC159
	mov	r3, #0
	mov	r1, #420
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L2689
	cmn	r0, #4096
	movls	r0, #0
	bls	.L2687
.L2689:
	ldr	r0, [r4, #2636]
	bl	debugfs_remove
	mov	r3, #0
	mvn	r0, #18
	str	r3, [r4, #2636]
	b	.L2687
.L2691:
	mvn	r0, #18
.L2687:
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L2698:
	.align	2
.L2697:
	.word	.LANCHOR2+1564
	.fnend
	.size	ghsuart_ctrl_init, .-ghsuart_ctrl_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_init, %function
ghsuart_data_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC164
	push	{r4, lr}
	.save {r4, lr}
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	movt	r0, #:upper16:.LC164
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmp	r0, #0
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #2640]
	beq	.L2703
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L2703
	ldr	ip, .L2709
	movw	r0, #:lower16:.LC159
	mov	r4, r3
	movt	r0, #:upper16:.LC159
	mov	r3, #0
	mov	r1, #420
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L2701
	cmn	r0, #4096
	movls	r0, #0
	bls	.L2699
.L2701:
	ldr	r0, [r4, #2640]
	bl	debugfs_remove
	mvn	r0, #18
	b	.L2699
.L2703:
	mvn	r0, #18
.L2699:
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L2710:
	.align	2
.L2709:
	.word	.LANCHOR2+1672
	.fnend
	.size	ghsuart_data_init, .-ghsuart_data_init
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_init, %function
diag_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC165
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	movt	r0, #:upper16:.LC165
	add	r3, r4, #2736
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	str	r3, [r4, #2736]
	str	r3, [r4, #2740]
	bl	debugfs_create_dir
	cmp	r0, #0
	str	r0, [r4, #2644]
	beq	.L2713
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L2713
	ldr	ip, .L2720
	movw	r0, #:lower16:.LC159
	mov	r3, #0
	movt	r0, #:upper16:.LC159
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L2715
	cmn	r0, #4096
	bhi	.L2715
.L2713:
	mov	r0, #0
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L2715:
	ldr	r0, [r4, #2644]
	bl	debugfs_remove
	mov	r3, #0
	str	r3, [r4, #2644]
	b	.L2713
.L2721:
	.align	2
.L2720:
	.word	.LANCHOR2+1780
	.fnend
	.size	diag_function_init, .-diag_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_free_buf, %function
rmnet_sdio_free_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #188
	strd	r8, [sp, #16]
	mov	r9, #0
	strd	r10, [sp, #24]
	mov	r10, r0
	mov	r0, r6
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave
	str	r9, [r4, #328]
	str	r9, [r4, #356]
	str	r9, [r4, #360]
	str	r9, [r4, #364]
	str	r9, [r4, #368]
	str	r9, [r4, #372]
	ldr	r5, [r10, #132]!
	str	r0, [sp, #4]
	cmp	r5, r10
	ldr	r8, [r5]
	beq	.L2723
.L2724:
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del
	ldr	r3, [r4, #140]
	mov	r0, #0
	sub	r3, r3, #1
	str	r3, [r4, #140]
	str	r9, [r5, #-36]
	ldr	fp, [r4, #88]
	mov	r5, r8
	bl	kfree
	mov	r1, r7
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r10, r8
	ldr	r8, [r8]
	bne	.L2724
.L2723:
	mov	r9, r4
	ldr	r5, [r9, #160]!
	cmp	r5, r9
	ldr	r8, [r5]
	beq	.L2725
	mov	r10, #0
.L2726:
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del
	ldr	r3, [r4, #168]
	mov	r0, #0
	sub	r3, r3, #1
	str	r3, [r4, #168]
	str	r10, [r5, #-36]
	ldr	fp, [r4, #92]
	mov	r5, r8
	bl	kfree
	mov	r1, r7
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r9, r8
	ldr	r8, [r8]
	bne	.L2726
.L2725:
	mov	r9, r4
	ldr	r5, [r9, #108]!
	cmp	r5, r9
	ldr	r8, [r5]
	beq	.L2727
.L2728:
	mov	r0, r5
	sub	r10, r5, #8
	bl	list_del
	ldr	r3, [r4, #116]
	sub	r3, r3, #1
	str	r3, [r4, #116]
	ldr	r0, [r5, #-8]
	mov	r5, r8
	bl	kfree
	mov	r0, r10
	bl	kfree
	cmp	r9, r8
	ldr	r8, [r8]
	bne	.L2728
.L2727:
	mov	r9, r4
	ldr	r5, [r9, #120]!
	cmp	r5, r9
	ldr	r8, [r5]
	beq	.L2729
.L2730:
	mov	r0, r5
	sub	r10, r5, #8
	bl	list_del
	ldr	r3, [r4, #128]
	sub	r3, r3, #1
	str	r3, [r4, #128]
	ldr	r0, [r5, #-8]
	mov	r5, r8
	bl	kfree
	mov	r0, r10
	bl	kfree
	cmp	r9, r8
	ldr	r8, [r8]
	bne	.L2730
.L2729:
	ldr	r3, [r4, #144]
	add	r5, r4, #144
	cmp	r5, r3
	beq	.L2731
	mov	r8, #0
	b	.L2732
.L2748:
	ldr	r2, [r4, #152]
	sub	r2, r2, #1
	str	r2, [r4, #152]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #144]
	cmp	r3, r5
	beq	.L2731
.L2732:
	subs	r0, r3, #0
	bne	.L2748
.L2731:
	ldr	r3, [r4, #172]
	add	r5, r4, #172
	cmp	r3, r5
	beq	.L2733
	mov	r8, #0
	b	.L2734
.L2749:
	ldr	r2, [r4, #180]
	sub	r2, r2, #1
	str	r2, [r4, #180]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #172]
	cmp	r3, r5
	beq	.L2733
.L2734:
	subs	r0, r3, #0
	bne	.L2749
.L2733:
	ldrd	r4, [r4, #96]
	ldr	r0, [r5]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r1, [sp, #4]
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_sdio_free_buf, .-rmnet_sdio_free_buf
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_disable, %function
rmnet_sdio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #192]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r0, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r4
	str	r5, [r4, #192]
	str	r5, [r4, #196]
	bl	rmnet_sdio_free_buf
	add	r2, r4, #204
	ldr	r1, [r4, #200]
	mov	r0, #4
	bl	queue_work_on
	str	r5, [r4, #332]
	add	r2, r4, #336
	ldr	r1, [r4, #200]
	mov	r0, #4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on
	.fnend
	.size	rmnet_sdio_disable, .-rmnet_sdio_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_complete_epin, %function
rmnet_sdio_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r4, [r0]
	ldr	r2, [r1, #44]
	ldr	r6, [r1, #32]
	cmn	r2, #104
	beq	.L2757
	cmp	r2, #0
	beq	.L2757
	cmn	r2, #108
	beq	.L2757
	ldr	r3, [r4, #84]
	movw	r1, #:lower16:.LC136
	movt	r1, #:upper16:.LC136
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L2757:
	add	r7, r4, #188
	add	r8, r4, #132
	mov	r0, r7
	bl	_raw_spin_lock
	mov	r2, r8
	ldr	r1, [r4, #136]
	add	r0, r5, #36
	bl	__list_add
	ldr	r3, [r4, #140]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #140]
	bl	_raw_spin_unlock
	mov	r0, r6
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #192]
	cmp	r3, #0
	beq	.L2755
	ldr	r3, [r4, #320]
	tst	r3, #2
	bne	.L2790
.L2755:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2790:
	ldr	r3, [r4, #84]
	mov	r0, r7
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #132]
	str	r0, [sp, #8]
	cmp	r8, r3
	beq	.L2760
	ldr	r5, [r4, #144]
	add	r3, r4, #144
	str	r3, [sp, #4]
	cmp	r5, r3
	beq	.L2760
	mov	r9, #0
	b	.L2762
.L2792:
	ldr	r3, [r4, #152]
	sub	r3, r3, #1
	str	r3, [r4, #152]
	ldrd	r2, [r5]
	str	r9, [r5]
	str	r9, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r6, [r4, #132]
	str	r5, [r6, #-4]
	ldr	r3, [r5, #172]
	mov	r0, r6
	sub	r10, r6, #36
	str	r3, [r6, #-36]
	ldr	r3, [r5, #80]
	str	r3, [r6, #-32]
	bl	list_del
	ldr	r3, [r4, #140]
	mov	r0, r7
	sub	r3, r3, #1
	str	r3, [r4, #140]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #92]
	mov	r1, r10
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	fp, #0
	bne	.L2791
	ldr	r2, [r4, #132]
	ldr	r3, [r4, #356]
	cmp	r8, r2
	add	r3, r3, #1
	str	r3, [r4, #356]
	beq	.L2760
	ldr	r5, [r4, #144]
	ldr	r3, [sp, #4]
	cmp	r5, r3
	beq	.L2760
.L2762:
	cmp	r5, #0
	bne	.L2792
.L2760:
	ldr	r1, [sp, #8]
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L2791:
	ldr	r0, [r4, #192]
	cmp	r0, #0
	beq	.L2765
	ldr	r3, [sp, #12]
	movw	r1, #:lower16:.LC138
	mov	r2, fp
	movt	r1, #:upper16:.LC138
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r8
	mov	r0, r6
	ldr	r1, [r4, #136]
	bl	__list_add
	ldr	r3, [r4, #140]
	ldr	r2, [r4, #144]
	add	r3, r3, #1
	str	r3, [r4, #140]
	ldr	r3, [sp, #4]
	str	r2, [r5]
	str	r3, [r5, #4]
	str	r5, [r4, #144]
	str	r5, [r2, #4]
	ldr	r3, [r4, #152]
	add	r3, r3, #1
	str	r3, [r4, #152]
	b	.L2760
.L2765:
	str	r0, [r6, #-36]
	ldr	r4, [r4, #92]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r5
	bl	dev_kfree_skb_any
	b	.L2760
	.fnend
	.size	rmnet_sdio_complete_epin, .-rmnet_sdio_complete_epin
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_data_rx_work, %function
rmnet_sdio_data_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r8, [r0, #-152]
	ldr	r3, [r0, #84]
	tst	r3, #2
	beq	.L2800
	sub	r6, r0, #48
	mov	r4, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r3, r4
	mov	r7, r0
	ldr	r5, [r3, #-64]!
	cmp	r5, r3
	beq	.L2795
	cmp	r5, #0
	beq	.L2795
	ldr	r3, [r4, #-56]
	mov	ip, #0
	mov	r1, r0
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r4, #-56]
	ldrd	r2, [r5]
	str	ip, [r5]
	str	ip, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC167
	movt	r1, #:upper16:.LC167
	add	r0, r0, #32
	bl	dev_err
	mov	r0, r5
	bl	dev_kfree_skb_any
.L2795:
	mov	r1, r7
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L2800:
	movw	r0, #:lower16:.LC166
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC166
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L2801
	b	printk
.L2802:
	.align	2
.L2801:
	.word	.LANCHOR2+1888
	.fnend
	.size	rmnet_sdio_data_rx_work, .-rmnet_sdio_data_rx_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_write_data_tohost, %function
gbam_write_data_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	add	r8, r0, #8
	strd	r10, [sp, #24]
	mov	r0, r8
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #12]
	str	r0, [sp, #12]
	cmp	r3, #0
	moveq	r1, r0
	beq	.L2822
	ldr	r2, [r6, #28]
	add	r1, r6, #28
	ldr	r10, [r3, #84]
	str	r1, [sp, #4]
	cmp	r2, r1
	beq	.L2806
	ldr	r4, [r6, #36]
	add	r3, r6, #36
	str	r3, [sp, #8]
	cmp	r3, r4
	beq	.L2806
	movw	r9, #:lower16:.LANCHOR1
	movw	fp, #:lower16:.LANCHOR0
	movt	r9, #:upper16:.LANCHOR1
	movt	fp, #:upper16:.LANCHOR0
	mov	r7, #0
	b	.L2808
.L2824:
	ldr	r2, [r6, #44]
	ldr	r3, [r9, #2744]
	sub	r2, r2, #1
	add	r3, r3, #1
	str	r2, [r6, #44]
	ldm	r4, {r1, r2}
	str	r7, [r4]
	str	r7, [r4, #4]
	str	r3, [r9, #2744]
	str	r2, [r1, #4]
	str	r1, [r2]
	ldr	r5, [r6, #28]
	str	r4, [r5, #-4]
	ldr	r2, [r4, #172]
	sub	r1, r5, #36
	mov	r0, r5
	str	r2, [r5, #-36]
	ldr	r2, [r4, #80]
	str	r2, [r5, #-32]
	ldr	r2, [fp, #484]
	cmp	r3, r2
	ldrb	r3, [r5, #-10]	@ zero_extendqisi2
	bfieq	r3, r7, #0, #1
	orrne	r3, r3, #1
	strbeq	r3, [r5, #-10]
	strbne	r3, [r5, #-10]
	streq	r7, [r9, #2744]
	str	r1, [sp]
	ldrb	r3, [r5, #-10]	@ zero_extendqisi2
	orr	r3, r3, #2
	strb	r3, [r5, #-10]
	bl	list_del
	mov	r0, r8
	bl	_raw_spin_unlock
	ldr	r3, [r10, #8]
	mov	r2, #32
	mov	r0, r10
	ldr	r1, [sp]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r2, r0
	mov	r0, r8
	str	r2, [sp]
	bl	_raw_spin_lock
	ldr	r2, [sp]
	cmp	r2, #0
	bne	.L2823
	ldr	r2, [r6, #28]
	ldr	r3, [r6, #264]
	ldr	r1, [sp, #4]
	add	r3, r3, #1
	cmp	r2, r1
	str	r3, [r6, #264]
	beq	.L2806
	ldr	r4, [r6, #36]
	ldr	r3, [sp, #8]
	cmp	r4, r3
	beq	.L2806
.L2808:
	cmp	r4, #0
	bne	.L2824
.L2806:
	ldr	r1, [sp, #12]
.L2822:
	mov	r0, r8
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L2823:
	movw	r0, #:lower16:.LC168
	ldr	r1, .L2825
	movt	r0, #:upper16:.LC168
	bl	printk
	ldr	r1, [sp, #4]
	mov	r0, r5
	ldr	r2, [r6, #28]
	bl	__list_add
	mov	r0, r4
	bl	dev_kfree_skb_any
	b	.L2806
.L2826:
	.align	2
.L2825:
	.word	.LANCHOR2+1912
	.fnend
	.size	gbam_write_data_tohost, .-gbam_write_data_tohost
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_write_data_tohost_w, %function
gbam_write_data_tohost_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #-20]
	b	gbam_write_data_tohost
	.fnend
	.size	gbam_write_data_tohost_w, .-gbam_write_data_tohost_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_free_buffers, %function
gbam_free_buffers:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	add	r5, r0, #4
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #8
	mov	r0, r5
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r4, #0
	beq	.L2829
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L2829
	ldr	r0, [r3, #84]
	add	r1, r4, #28
	add	r8, r4, #36
	bl	gbam_free_requests
	ldr	r3, [r4, #12]
	add	r1, r4, #52
	ldr	r0, [r3, #88]
	bl	gbam_free_requests
	ldr	r3, [r4, #36]
	cmp	r8, r3
	beq	.L2830
	mov	r9, #0
	b	.L2831
.L2848:
	ldr	r2, [r4, #44]
	sub	r2, r2, #1
	str	r2, [r4, #44]
	ldm	r3, {r1, r2}
	str	r9, [r3]
	str	r9, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #36]
	cmp	r3, r8
	beq	.L2830
.L2831:
	subs	r0, r3, #0
	bne	.L2848
.L2830:
	ldr	r3, [r4, #60]
	add	r8, r4, #60
	cmp	r3, r8
	beq	.L2829
	mov	r9, #0
	b	.L2832
.L2849:
	ldr	r2, [r4, #68]
	sub	r2, r2, #1
	str	r2, [r4, #68]
	ldm	r3, {r1, r2}
	str	r9, [r3]
	str	r9, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #60]
	cmp	r3, r8
	beq	.L2829
.L2832:
	subs	r0, r3, #0
	bne	.L2849
.L2829:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldrd	r8, [sp, #16]
	mov	r1, r7
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	gbam_free_buffers, .-gbam_free_buffers
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_epin_complete, %function
gbam_epin_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
	ldr	r2, [r1, #44]
	ldr	r7, [r1, #32]
	cmn	r2, #104
	beq	.L2852
	cmp	r2, #0
	bne	.L2866
.L2853:
	mov	r0, r7
	bl	dev_kfree_skb_any
	cmp	r6, #0
	beq	.L2850
	add	r5, r6, #8
	mov	r0, r5
	bl	_raw_spin_lock
	add	r2, r6, #28
	ldr	r1, [r6, #32]
	add	r0, r4, #36
	bl	__list_add
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r6, #96
	ldrd	r4, [sp]
	movt	r3, #:upper16:.LANCHOR1
	ldrd	r6, [sp, #8]
	mov	r0, #4
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, [r3, #2748]
	b	queue_work_on
.L2866:
	cmn	r2, #108
	bne	.L2864
.L2852:
	mov	r0, r7
	bl	dev_kfree_skb_any
	ldr	r3, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L2850:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2864:
	movw	r0, #:lower16:.LC169
	ldr	r1, .L2867
	movt	r0, #:upper16:.LC169
	bl	printk
	b	.L2853
.L2868:
	.align	2
.L2867:
	.word	.LANCHOR2+1936
	.fnend
	.size	gbam_epin_complete, .-gbam_epin_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_receive, %function
ghsic_data_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	subs	r4, r0, #0
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L2870
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L2870
	add	r6, r4, #48
	add	r7, r4, #136
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #36]
	add	r1, r4, #32
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	mov	r8, r0
	stm	r5, {r1, r3}
	str	r5, [r3]
	ldr	r3, [r4, #40]
	ldr	r1, [r2, #488]
	str	r5, [r4, #36]
	add	r3, r3, #1
	cmp	r1, #0
	str	r3, [r4, #40]
	beq	.L2873
	ldr	r2, [r2, #492]
	cmp	r2, r3
	bls	.L2881
.L2873:
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r7
	mov	r0, #4
	ldr	r1, [r4, #84]
	bl	queue_work_on
	mov	r0, #0
.L2869:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2870:
	mov	r0, r5
	bl	dev_kfree_skb_any
	mvn	r0, #106
	b	.L2869
.L2881:
	add	r1, r4, #164
	mov	r0, #2
	bl	_set_bit
	ldr	r3, [r4, #196]
	mov	r1, r8
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #196]
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r7
	mov	r0, #4
	ldr	r1, [r4, #84]
	bl	queue_work_on
	mvn	r0, #15
	b	.L2869
	.fnend
	.size	ghsic_data_receive, .-ghsic_data_receive
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_start_xmit, %function
eth_start_xmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	add	r6, r1, #1152
	mov	r7, r0
	strd	r8, [sp, #16]
	mov	r0, r6
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #1156]
	mov	r1, r0
	cmp	r3, #0
	beq	.L2945
	ldr	r9, [r3, #88]
	mov	r0, r6
	ldrh	r10, [r3, #98]
	ldrb	r3, [r3, #124]	@ zero_extendqisi2
	str	r3, [sp]
	bl	_raw_spin_unlock_irqrestore
	cmp	r9, #0
	beq	.L2884
	add	r8, r5, #1168
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp]
	str	r0, [sp, #4]
	cmp	r3, #0
	beq	.L2887
	ldr	r3, [r5, #1200]
	cmp	r3, #0
	beq	.L2946
.L2887:
	mov	r0, r8
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore
	tst	r10, #1
	bne	.L2894
	ldr	r2, [r7, #172]
	ldrb	r3, [r2]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L2894
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	ldrb	ip, [r2, #2]	@ zero_extendqisi2
	ldrb	r0, [r2, #3]	@ zero_extendqisi2
	and	r3, r3, r1
	ldrb	r1, [r2, #4]	@ zero_extendqisi2
	ldrb	r2, [r2, #5]	@ zero_extendqisi2
	and	r3, r3, ip
	and	r3, r3, r0
	and	r3, r3, r1
	and	r3, r3, r2
	cmp	r3, #255
	movne	r3, #2
	moveq	r3, #8
	tst	r3, r10
	beq	.L2884
.L2894:
	mov	r0, r8
	add	r4, r6, #20
	bl	_raw_spin_lock_irqsave
	ldr	fp, [r5, #1172]
	mov	r10, r0
	cmp	r4, fp
	beq	.L2947
	sub	r3, fp, #36
	mov	r0, fp
	str	r3, [sp, #4]
	bl	list_del
	ldr	r2, [r5, #1172]
	cmp	r4, r2
	beq	.L2948
.L2897:
	mov	r1, r10
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r5, #1232]
	mov	r10, r0
	cmp	r2, #0
	beq	.L2899
	ldr	r0, [r5, #1156]
	cmp	r0, #0
	beq	.L2900
	mov	r1, r7
	blx	r2
	mov	r7, r0
.L2900:
	cmp	r7, #0
	beq	.L2949
.L2899:
	ldr	r3, [sp]
	cmp	r3, #0
	beq	.L2902
	ldr	ip, [fp, #-36]
	ldr	r1, [r5, #1156]
	ldr	r0, [fp, #-32]
	ldr	r2, [r5, #1220]
	ldr	r1, [r1, #144]
	add	r0, ip, r0
	bl	memcpy
	ldr	ip, [r5, #1220]
	mov	r1, r10
	mov	r0, r6
	ldr	r2, [fp, #-32]
	add	r2, r2, ip
	str	r2, [fp, #-32]
	bl	_raw_spin_unlock_irqrestore
	ldr	ip, [fp, #-36]
	ldr	r0, [fp, #-32]
	ldr	r2, [r7, #80]
	ldr	r1, [r7, #172]
	add	r0, ip, r0
	bl	memcpy
	ldr	r1, [r7, #80]
	mov	r0, r7
	ldr	r2, [fp, #-32]
	add	r2, r2, r1
	mov	r10, r2
	str	r2, [fp, #-32]
	bl	dev_kfree_skb_any
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r5, #1196]
	mov	r6, r0
	ldr	r1, [r5, #1228]
	add	r2, r2, #1
	cmp	r2, r1
	str	r2, [r5, #1196]
	ldr	r2, [r5, #1192]
	bcs	.L2904
	cmp	r2, #5
	bgt	.L2950
.L2904:
	add	r2, r2, #1
	mov	ip, #0
	mov	r1, r6
	mov	r0, r8
	str	r2, [r5, #1192]
	str	ip, [r5, #1196]
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [r5, #1156]
	ldrb	r1, [r2, #104]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L2951
.L2906:
	ldrb	r2, [fp, #-10]	@ zero_extendqisi2
	orr	r2, r2, #2
	strb	r2, [fp, #-10]
.L2907:
	ldrb	r2, [fp, #-10]	@ zero_extendqisi2
	tst	r2, #2
	beq	.L2908
	ldrb	r1, [r5, #1276]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L2908
	ldrh	r0, [r9, #20]
	sdiv	r1, r10, r0
	mls	r1, r0, r1, r10
	cmp	r1, #0
	bne	.L2908
	bfi	r2, r1, #1, #1
	add	r10, r10, #1
	strb	r2, [fp, #-10]
.L2908:
	str	r10, [fp, #-32]
	ldr	r2, [r5, #1164]
	ldr	r1, [r2, #20]
	cmp	r1, #2
	bls	.L2909
	ldr	r2, [r2, #16]
	sub	r2, r2, #3
	bics	r2, r2, #2
	beq	.L2952
.L2909:
	ldrb	r2, [fp, #-10]	@ zero_extendqisi2
	bfc	r2, #0, #1
	strb	r2, [fp, #-10]
.L2911:
	ldr	ip, [r9, #8]
	sub	r1, fp, #36
	mov	r0, r9
	mov	r2, #32
	ldr	r6, [ip, #16]
	blx	r6
	cmp	r0, #0
	bne	.L2941
	movw	r3, #:lower16:jiffies
	movt	r3, #:upper16:jiffies
	ldr	r3, [r3]
	str	r3, [r5, #604]
	b	.L2882
.L2945:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L2884:
	mov	r0, r7
	bl	dev_kfree_skb_any
	mov	r0, #0
.L2882:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2902:
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r10, [r7, #80]
	ldr	r2, [r7, #172]
	str	r2, [fp, #-36]
	str	r7, [fp, #-4]
	ldr	r2, [r5, #1156]
	ldrb	r1, [r2, #104]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L2906
.L2951:
	ldr	r2, [r2, #112]
	cmp	r2, r10
	bne	.L2906
	ldrh	r1, [r9, #20]
	sdiv	r2, r10, r1
	mls	r2, r1, r2, r10
	cmp	r2, #0
	bne	.L2906
	ldrb	r1, [fp, #-10]	@ zero_extendqisi2
	bfi	r1, r2, #1, #1
	strb	r1, [fp, #-10]
	b	.L2907
.L2941:
	ldr	r3, [sp]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [fp, #-32]
	beq	.L2953
.L2901:
	ldr	r1, [r5, #1160]
	mov	r0, r8
	ldr	r2, [r1, #260]
	add	r2, r2, #1
	str	r2, [r1, #260]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r5, #1172]
	mov	r6, r0
	cmp	r4, r2
	beq	.L2954
.L2914:
	ldr	r1, [r5, #1176]
	mov	r2, r4
.L2944:
	mov	r0, fp
	bl	__list_add
	mov	r0, r8
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L2882
.L2948:
	ldr	r1, [r5, #576]
	cmp	r1, #0
	beq	.L2955
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
	b	.L2897
.L2946:
	ldr	r0, [r5, #1160]
	add	fp, r6, #20
	ldr	r4, [r5, #1172]
	ldr	r1, [r5, #1228]
	ldr	r0, [r0, #356]
	cmp	r4, fp
	add	r0, r0, #80
	mul	r1, r1, r0
	str	r1, [r5, #1200]
	bne	.L2889
	b	.L2887
.L2890:
	str	r3, [r4, #-4]
	ldr	r4, [r4]
	cmp	r4, fp
	beq	.L2887
.L2889:
	ldr	r2, [r4, #-36]
	cmp	r2, #0
	bne	.L2890
	movw	r1, #32800
	ldr	r0, [r5, #1200]
	bl	__kmalloc
	cmp	r0, #0
	mov	r3, #0
	str	r0, [r4, #-36]
	bne	.L2890
.L2891:
	ldr	r6, [r5, #1172]
	str	r0, [r5, #1200]
	cmp	r6, fp
	beq	.L2892
	mov	r4, r0
.L2893:
	ldr	r0, [r6, #-36]
	bl	kfree
	str	r4, [r6, #-36]
	ldr	r6, [r6]
	cmp	r6, fp
	bne	.L2893
.L2892:
	mov	r0, r8
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #11
	b	.L2882
.L2952:
	movw	r0, #:lower16:.LANCHOR0
	ldr	r1, [r5, #1188]
	movt	r0, #:upper16:.LANCHOR0
	ldr	r0, [r0, #496]
	add	r1, r1, #1
	cmp	r1, r0, lsr #1
	str	r1, [r5, #1188]
	beq	.L2956
	ldrb	r2, [fp, #-10]	@ zero_extendqisi2
	orr	r2, r2, #1
	strb	r2, [fp, #-10]
	b	.L2911
.L2953:
	mov	r0, r7
	bl	dev_kfree_skb_any
	b	.L2901
.L2947:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #16
	b	.L2882
.L2949:
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L2901
.L2954:
	ldr	r1, [r5, #576]
	mov	r0, #0
	add	r1, r1, #80
	bl	_clear_bit
	b	.L2914
.L2950:
	mov	r1, r4
	ldr	r2, [r5, #1172]
	b	.L2944
.L2956:
	ldrb	r1, [fp, #-10]	@ zero_extendqisi2
	bfi	r1, r2, #0, #1
	strb	r1, [fp, #-10]
	str	r2, [r5, #1188]
	b	.L2911
.L2955:
	movw	r0, #:lower16:.LC88
	movw	r1, #1847
	movt	r0, #:upper16:.LC88
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC89
	movt	r0, #:upper16:.LC89
	bl	printk
	b	.L2897
	.fnend
	.size	eth_start_xmit, .-eth_start_xmit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_disconnect_work, %function
rmnet_mux_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #-20]
	cmp	r3, #3
	beq	.L2993
.L2958:
	sub	r6, r4, #16
	sub	r8, r4, #192
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #-192]
	mov	r7, r0
	cmp	r8, r5
	beq	.L2959
	mov	r9, #0
.L2960:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	str	r9, [r5, #-36]
	ldr	r5, [r4, #-296]
	mov	r0, #0
	bl	kfree
	mov	r1, r10
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #-192]
	cmp	r8, r5
	bne	.L2960
.L2959:
	ldr	r5, [r4, #-168]
	sub	r8, r4, #168
	cmp	r8, r5
	beq	.L2961
	mov	r9, #0
.L2962:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	str	r9, [r5, #-36]
	ldr	r5, [r4, #-292]
	mov	r0, #0
	bl	kfree
	mov	r1, r10
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #-168]
	cmp	r8, r5
	bne	.L2962
.L2961:
	ldr	r3, [r4, #-184]
	sub	r5, r4, #184
	cmp	r3, r5
	beq	.L2963
	mov	r8, #0
	b	.L2964
.L2994:
	ldr	r2, [r4, #-176]
	sub	r2, r2, #1
	str	r2, [r4, #-176]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #-184]
	cmp	r3, r5
	beq	.L2963
.L2964:
	subs	r0, r3, #0
	bne	.L2994
.L2963:
	ldr	r3, [r4, #-160]
	sub	r5, r4, #160
	cmp	r5, r3
	beq	.L2965
	mov	r8, #0
	b	.L2966
.L2995:
	ldr	r2, [r4, #-152]
	sub	r2, r2, #1
	str	r2, [r4, #-152]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #-160]
	cmp	r3, r5
	beq	.L2965
.L2966:
	subs	r0, r3, #0
	bne	.L2995
.L2965:
	ldr	r5, [r4, #-280]
	sub	r9, r4, #280
	cmp	r9, r5
	beq	.L2967
.L2968:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	ldr	r8, [r4, #-296]
	ldr	r0, [r5, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #-280]
	cmp	r9, r5
	bne	.L2968
.L2967:
	ldr	r5, [r4, #-272]
	sub	r9, r4, #272
	cmp	r9, r5
	beq	.L2969
.L2970:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	ldr	r8, [r4, #-292]
	ldr	r0, [r5, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #-272]
	cmp	r9, r5
	bne	.L2970
.L2969:
	ldr	r5, [r4, #-264]
	sub	r9, r4, #264
	cmp	r5, r9
	beq	.L2971
.L2972:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	ldr	r8, [r4, #-292]
	ldr	r0, [r5, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #-264]
	cmp	r9, r5
	bne	.L2972
.L2971:
	ldr	r5, [r4, #-68]
	sub	r9, r4, #68
	cmp	r9, r5
	beq	.L2973
.L2974:
	mov	r0, r5
	sub	r8, r5, #8
	bl	list_del
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r8
	bl	kfree
	ldr	r5, [r4, #-68]
	ldr	r3, [r4, #-48]
	cmp	r9, r5
	sub	r3, r3, #1
	str	r3, [r4, #-48]
	bne	.L2974
.L2973:
	ldr	r5, [r4, #-44]
	sub	r9, r4, #44
	cmp	r9, r5
	beq	.L2975
.L2976:
	mov	r0, r5
	sub	r8, r5, #8
	bl	list_del
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r8
	bl	kfree
	ldr	r5, [r4, #-44]
	ldr	r3, [r4, #-36]
	cmp	r9, r5
	sub	r3, r3, #1
	str	r3, [r4, #-36]
	bne	.L2976
.L2975:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r1, #0
	sub	r0, r4, #60
	mov	r3, r1
	mov	r2, #1
	str	r1, [r4, #-20]
	mov	r1, #3
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up
.L2993:
	sub	r0, r0, #232
	bl	tasklet_kill
	sub	r0, r4, #252
	bl	tasklet_kill
	b	.L2958
	.fnend
	.size	rmnet_mux_disconnect_work, .-rmnet_mux_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_sdio_data_rx_work, %function
rmnet_mux_sdio_data_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #128
	strd	r8, [sp, #16]
	sub	r8, r0, #16
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r0, #-156]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #-16]
	mov	fp, r0
	cmp	r8, r4
	beq	.L2997
	movw	r7, #:lower16:.LC170
	mov	r10, #0
	movt	r7, #:upper16:.LC170
	b	.L2998
.L3004:
	ldr	r3, [r5, #-8]
	sub	r3, r3, #1
	str	r3, [r5, #-8]
	ldrd	r2, [r4]
	str	r10, [r4]
	str	r10, [r4, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	ldr	r0, [r9]
	mov	r1, r7
	add	r0, r0, #32
	bl	dev_err
	mov	r0, r4
	bl	dev_kfree_skb_any
	ldr	r4, [r5, #-16]
	cmp	r8, r4
	beq	.L2997
.L2998:
	cmp	r4, #0
	mov	r1, fp
	mov	r0, r6
	bne	.L3004
.L2997:
	mov	r1, fp
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_mux_sdio_data_rx_work, .-rmnet_mux_sdio_data_rx_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_sdio_complete_epin, %function
rmnet_mux_sdio_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0]
	.pad #20
	sub	sp, sp, #20
	ldr	r8, [r1, #32]
	ldr	r7, [r4, #364]
	cmp	r7, #0
	beq	.L3036
	ldr	r2, [r1, #44]
	cmn	r2, #104
	beq	.L3008
	cmp	r2, #0
	beq	.L3008
	cmn	r2, #108
	beq	.L3008
	ldr	r3, [r4, #84]
	movw	r1, #:lower16:.LC137
	movt	r1, #:upper16:.LC137
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L3008:
	add	r7, r4, #368
	add	r10, r4, #192
	mov	r0, r7
	bl	_raw_spin_lock
	mov	r2, r10
	ldr	r1, [r4, #196]
	add	r0, r5, #36
	bl	__list_add
	mov	r0, r7
	bl	_raw_spin_unlock
	mov	r0, r8
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #372]
	cmp	r3, #0
	bne	.L3037
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3037:
	ldr	r3, [r4, #84]
	mov	r0, r7
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #192]
	str	r0, [sp, #8]
	cmp	r10, r3
	beq	.L3011
	ldr	r5, [r4, #200]
	add	r3, r4, #200
	str	r3, [sp, #4]
	cmp	r5, r3
	beq	.L3011
	mov	r8, #0
	b	.L3013
.L3039:
	ldr	r3, [r4, #208]
	sub	r3, r3, #1
	str	r3, [r4, #208]
	ldrd	r2, [r5]
	str	r8, [r5]
	str	r8, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r6, [r4, #192]
	str	r5, [r6, #-4]
	ldr	r3, [r5, #172]
	mov	r0, r6
	sub	fp, r6, #36
	str	r3, [r6, #-36]
	ldr	r3, [r5, #80]
	str	r3, [r6, #-32]
	bl	list_del
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r0, [r4, #92]
	mov	r1, fp
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	r9, #0
	bne	.L3038
	ldr	r2, [r4, #192]
	ldr	r3, [r4, #408]
	cmp	r10, r2
	add	r3, r3, #1
	str	r3, [r4, #408]
	beq	.L3011
	ldr	r5, [r4, #200]
	ldr	r3, [sp, #4]
	cmp	r5, r3
	beq	.L3011
.L3013:
	cmp	r5, #0
	bne	.L3039
.L3011:
	ldr	r1, [sp, #8]
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L3036:
	mov	r6, r0
	mov	r0, r8
	bl	dev_kfree_skb_any
	mov	r0, r7
	str	r7, [r5]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	bx	r3	@ indirect register sibling call
.L3038:
	ldr	r0, [r4, #372]
	mov	r3, r9
	mov	r9, fp
	cmp	r0, #0
	beq	.L3016
	mov	r2, r3
	ldr	r3, [sp, #12]
	movw	r1, #:lower16:.LC138
	movt	r1, #:upper16:.LC138
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r10
	mov	r0, r6
	ldr	r1, [r4, #196]
	bl	__list_add
	ldr	r2, [sp, #4]
	ldr	r3, [r4, #200]
	str	r3, [r5]
	str	r2, [r5, #4]
	str	r5, [r4, #200]
	str	r5, [r3, #4]
	ldr	r3, [r4, #208]
	add	r3, r3, #1
	str	r3, [r4, #208]
	b	.L3011
.L3016:
	str	r0, [r6, #-36]
	ldr	r4, [r4, #92]
	bl	kfree
	mov	r1, r9
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r5
	bl	dev_kfree_skb_any
	b	.L3011
	.fnend
	.size	rmnet_mux_sdio_complete_epin, .-rmnet_mux_sdio_complete_epin
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_sdio_rx_submit, %function
rmnet_mux_sdio_rx_submit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mvn	r3, #0
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r1, r2
	mov	r6, r2
	mov	r7, r0
	mov	r2, #0
	str	r8, [sp, #16]
	movw	r0, #2056
	str	lr, [sp, #20]
	bl	__alloc_skb
	subs	r4, r0, #0
	beq	.L3042
	ldr	r0, [r4, #160]
	mov	ip, #2048
	mov	r1, r5
	ldr	r3, [r4, #172]
	mov	r2, r6
	add	r0, r0, #8
	add	r3, r3, #8
	str	r0, [r4, #160]
	str	r3, [r4, #172]
	stm	r5, {r3, ip}
	str	r4, [r5, #32]
	ldr	r0, [r7, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	beq	.L3040
	mov	r0, r4
	bl	dev_kfree_skb_any
.L3040:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3042:
	mvn	r5, #11
	b	.L3040
	.fnend
	.size	rmnet_mux_sdio_rx_submit, .-rmnet_mux_sdio_rx_submit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_sdio_complete_epout, %function
rmnet_mux_sdio_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	r7, [r1, #32]
	ldr	r8, [r4, #364]
	cmp	r8, #0
	beq	.L3064
	ldr	r3, [r1, #44]
	ldr	r8, [r4, #84]
	cmn	r3, #104
	beq	.L3050
	cmp	r3, #0
	beq	.L3051
	cmn	r3, #108
	beq	.L3050
	ldr	r2, [r0, #4]
	movw	r1, #:lower16:.LC134
	add	r6, r4, #368
	ldr	lr, [r5, #4]
	movt	r1, #:upper16:.LC134
	ldr	ip, [r5, #48]
	ldr	r0, [r8]
	stm	sp, {ip, lr}
	add	r0, r0, #32
	bl	dev_err
	mov	r0, r7
	bl	dev_kfree_skb_any
	mov	r0, r6
	bl	_raw_spin_lock
.L3052:
	movw	r3, #:lower16:.LANCHOR0
	ldr	r2, [r4, #312]
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #500]
	cmp	r2, r3
	bcs	.L3065
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r2, #32
	mov	r1, r5
	mov	r0, r4
	bl	rmnet_mux_sdio_rx_submit
	subs	r2, r0, #0
	bne	.L3066
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3051:
	ldr	r1, [r1, #48]
	mov	r0, r7
	add	r6, r4, #368
	bl	skb_put
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r4, #228]
	add	r1, r4, #224
	add	r2, r4, #240
	mov	r0, #4
	stm	r7, {r1, r3}
	str	r7, [r3]
	ldr	r3, [r4, #232]
	str	r7, [r4, #228]
	ldr	r1, [r4, #380]
	add	r3, r3, #1
	str	r3, [r4, #232]
	bl	queue_work_on
	b	.L3052
.L3064:
	mov	r0, r7
	bl	dev_kfree_skb_any
	mov	r0, r8
	str	r8, [r5]
.L3063:
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L3050:
	mov	r0, r7
	bl	dev_kfree_skb_any
	mov	r3, #0
	mov	r0, r3
	str	r3, [r5]
	b	.L3063
.L3065:
	ldr	r1, [r4, #220]
	add	r0, r5, #36
	add	r2, r4, #216
	bl	__list_add
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L3066:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC171
	movt	r1, #:upper16:.LC171
	add	r0, r0, #32
	bl	dev_err
	ldr	r1, [r4, #220]
	add	r0, r5, #36
	add	r2, r4, #216
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__list_add
	.fnend
	.size	rmnet_mux_sdio_complete_epout, .-rmnet_mux_sdio_complete_epout
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_unbind, %function
rmnet_sdio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	add	r0, r1, #252
	mov	r4, r1
	str	lr, [sp, #4]
	bl	cancel_delayed_work_sync
	ldr	r0, [r4, #200]
	bl	destroy_workqueue
	ldr	r2, [r4, #320]
	mov	r3, #0
	str	r3, [r4, #88]
	str	r3, [r4, #92]
	tst	r2, #2
	str	r3, [r4, #96]
	bne	.L3077
.L3068:
	ldr	r3, [r4, #324]
	tst	r3, #2
	beq	.L3069
	add	r1, r4, #324
	mov	r0, #1
	bl	_clear_bit
.L3069:
	ldr	r0, [r4, #352]
	bl	debugfs_remove_recursive
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
.L3077:
	add	r1, r4, #320
	mov	r0, #1
	bl	_clear_bit
	b	.L3068
	.fnend
	.size	rmnet_sdio_unbind, .-rmnet_sdio_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_connect_w, %function
grmnet_ctrl_smd_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #-104]
	tst	r3, #2
	bne	.L3079
	ldr	r3, [r0, #-104]
	tst	r3, #4
	beq	.L3088
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3088:
	sub	r1, r0, #104
	mov	r0, #2
	ldr	r4, [r4, #-12]
	bl	_set_bit
	ldr	r0, .L3089
	mov	r3, #84
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	mla	r0, r3, r4, r0
	ldrd	r4, [sp]
	add	sp, sp, #24
	add	r0, r0, #4
	b	platform_driver_register
.L3079:
	sub	r2, r0, #112
	movw	r3, #:lower16:grmnet_ctrl_smd_notify
	ldr	r0, [r0, #-108]
	movt	r3, #:upper16:grmnet_ctrl_smd_notify
	mov	r1, r2
	bl	smd_open
	subs	r3, r0, #0
	beq	.L3081
	cmn	r3, #11
	bne	.L3082
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, #250
	movt	r3, #:upper16:.LANCHOR1
	ldr	r5, [r3, #2700]
	bl	msecs_to_jiffies
	mov	r3, r0
	mov	r2, r4
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	mov	r0, #4
	mov	r1, r5
	ldrd	r4, [sp]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	queue_delayed_work_on
.L3081:
	sub	r5, r4, #4
	ldr	r6, [r4, #-24]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-8]
	mov	r7, r0
	cmp	r3, #0
	beq	.L3083
	orr	r2, r6, #4
	mov	r1, r6
	ldr	r0, [r4, #-112]
	mvn	r2, r2
	bl	smd_tiocmset
.L3083:
	mov	r1, r7
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L3082:
	movw	r0, #:lower16:.LC172
	ldr	r2, [r4, #-108]
	ldr	r1, .L3089+4
	movt	r0, #:upper16:.LC172
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L3090:
	.align	2
.L3089:
	.word	.LANCHOR1+512
	.word	.LANCHOR2+1956
	.fnend
	.size	grmnet_ctrl_smd_connect_w, .-grmnet_ctrl_smd_connect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_open_sdio_work, %function
rmnet_mux_open_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #2752]
	cmp	r2, #90
	bgt	.L3095
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	add	r2, r2, #1
	str	r6, [sp, #8]
	mov	r0, #2000
	str	lr, [sp, #12]
	ldr	r5, [r4, #124]
	str	r2, [r3, #2752]
	bl	msecs_to_jiffies
	mov	r3, r0
	mov	r2, r4
	ldr	r6, [sp, #8]
	mov	r1, r5
	mov	r0, #4
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_delayed_work_on
.L3095:
	ldr	r3, [r0, #-172]
	movw	r1, #:lower16:.LC173
	movt	r1, #:upper16:.LC173
	ldr	r0, [r3]
	add	r0, r0, #32
	b	dev_err
	.fnend
	.size	rmnet_mux_open_sdio_work, .-rmnet_mux_open_sdio_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_start_rx, %function
gbam_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	add	r7, r0, #4
	mov	r6, r0
	strd	r8, [sp, #16]
	mov	r0, r7
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #12]
	mov	r8, r0
	cmp	r3, #0
	beq	.L3100
	movw	r5, #:lower16:.LANCHOR0
	ldr	r9, [r3, #88]
	add	r3, r6, #52
	movt	r5, #:upper16:.LANCHOR0
	str	r3, [sp, #4]
.L3098:
	ldr	r4, [r6, #52]
	mvn	r3, #0
	mov	r2, #0
	ldr	r0, [sp, #4]
	mov	r1, #32
	sub	r10, r4, #36
	cmp	r0, r4
	beq	.L3100
	ldr	r0, [r5, #504]
	cmp	r0, #0
	beq	.L3099
	ldr	r0, [r5, #508]
	ldr	ip, [r6, #68]
	cmp	ip, r0
	bcs	.L3100
.L3099:
	ldr	r0, [r5, #512]
	add	r0, r0, #8
	bl	__alloc_skb
	subs	fp, r0, #0
	mov	r0, r4
	beq	.L3100
	ldr	r1, [fp, #160]
	ldr	r2, [fp, #172]
	add	r1, r1, #8
	add	r2, r2, #8
	str	r1, [fp, #160]
	str	r2, [fp, #172]
	bl	list_del
	ldr	r2, [fp, #172]
	mov	r1, r8
	mov	r0, r7
	str	r2, [r4, #-36]
	ldr	r2, [r5, #512]
	str	r2, [r4, #-32]
	str	fp, [r4, #-4]
	bl	_raw_spin_unlock_irqrestore
	ldr	ip, [r9, #8]
	mov	r2, #32
	mov	r1, r10
	mov	r0, r9
	ldr	r8, [ip, #16]
	blx	r8
	str	r0, [sp]
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp]
	mov	r8, r0
	cmp	r3, #0
	bne	.L3118
	ldr	r3, [r6, #12]
	cmp	r3, #0
	bne	.L3098
.L3100:
	mov	r1, r8
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L3118:
	mov	r0, fp
	bl	dev_kfree_skb_any
	ldr	r0, .L3121
	bl	__printk_ratelimit
	cmp	r0, #0
	bne	.L3119
.L3102:
	ldr	r3, [r6, #12]
	cmp	r3, #0
	bne	.L3120
	ldr	r3, [r9, #8]
	mov	r1, r10
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	b	.L3100
.L3120:
	mov	r0, r4
	ldr	r2, [r6, #52]
	ldr	r1, [sp, #4]
	bl	__list_add
	b	.L3100
.L3119:
	movw	r0, #:lower16:.LC174
	ldr	r1, .L3121
	ldr	r2, [sp]
	movt	r0, #:upper16:.LC174
	bl	printk
	b	.L3102
.L3122:
	.align	2
.L3121:
	.word	.LANCHOR2+1984
	.fnend
	.size	gbam_start_rx, .-gbam_start_rx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_epout_complete, %function
gbam_epout_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r0]
	ldr	r6, [r1, #44]
	ldr	r8, [r1, #32]
	cmn	r6, #104
	beq	.L3125
	cmp	r6, #0
	beq	.L3126
	cmn	r6, #108
	beq	.L3125
	ldr	r0, .L3154
	bl	__printk_ratelimit
	cmp	r0, #0
	bne	.L3152
.L3128:
	mov	r0, r8
	add	r9, r5, #4
	bl	dev_kfree_skb_any
	mov	r0, r9
	bl	_raw_spin_lock
.L3127:
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldr	r3, [r6, #504]
	cmp	r3, #0
	beq	.L3129
	ldr	r2, [r5, #68]
	ldr	r3, [r6, #508]
	cmp	r2, r3
	bcc	.L3129
	ldr	r3, [r5, #276]
	cmp	r3, #0
	bne	.L3151
	ldr	r3, [r5, #272]
	mov	r2, #1
	str	r2, [r5, #276]
	add	r3, r3, r2
	str	r3, [r5, #272]
.L3151:
	ldr	r1, [r5, #56]
	add	r0, r4, #36
	add	r2, r5, #52
	bl	__list_add
	mov	r0, r9
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	_raw_spin_unlock
.L3125:
	mov	r0, r8
	bl	dev_kfree_skb_any
	mov	r3, #0
	mov	r1, r4
	mov	r0, r7
	str	r3, [r4]
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	bx	r3	@ indirect register sibling call
.L3129:
	mov	r0, r9
	bl	_raw_spin_unlock
	ldr	r0, [r6, #512]
	mvn	r3, #0
	mov	r2, #0
	mov	r1, #32
	add	r0, r0, #8
	bl	__alloc_skb
	subs	r8, r0, #0
	beq	.L3133
	ldr	ip, [r8, #160]
	mov	r0, r7
	mov	r2, #32
	ldr	r3, [r8, #172]
	mov	r1, r4
	add	ip, ip, #8
	add	r3, r3, #8
	str	ip, [r8, #160]
	str	r3, [r8, #172]
	str	r3, [r4]
	ldr	r3, [r6, #512]
	str	r3, [r4, #4]
	str	r8, [r4, #32]
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	bne	.L3153
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L3126:
	ldr	r1, [r1, #48]
	mov	r0, r8
	add	r9, r5, #4
	bl	skb_put
	mov	r0, r9
	bl	_raw_spin_lock
	ldr	r0, [r5, #64]
	add	r2, r5, #60
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r2, [r8]
	ldr	r1, [r3, #2748]
	add	r2, r5, #80
	str	r0, [r8, #4]
	str	r8, [r0]
	ldr	r3, [r5, #68]
	mov	r0, #4
	str	r8, [r5, #64]
	add	r3, r3, #1
	str	r3, [r5, #68]
	bl	queue_work_on
	b	.L3127
.L3153:
	mov	r0, r8
	bl	dev_kfree_skb_any
	ldr	r0, .L3154
	bl	__printk_ratelimit
	cmp	r0, #0
	beq	.L3133
	movw	r0, #:lower16:.LC176
	mov	r2, r6
	ldr	r1, .L3154
	movt	r0, #:upper16:.LC176
	bl	printk
.L3133:
	mov	r0, r9
	bl	_raw_spin_lock
	b	.L3151
.L3152:
	ldr	r1, [r4, #4]
	movw	r0, #:lower16:.LC175
	mov	r3, r6
	ldr	ip, [r4, #48]
	movt	r0, #:upper16:.LC175
	ldr	r2, [r7, #4]
	str	ip, [sp]
	str	r1, [sp, #4]
	ldr	r1, .L3154
	bl	printk
	b	.L3128
.L3155:
	.align	2
.L3154:
	.word	.LANCHOR2+2000
	.fnend
	.size	gbam_epout_complete, .-gbam_epout_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_ioctl, %function
usb_rmnet_mux_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #65024
	movt	r3, 32772
	cmp	r1, r3
	bne	.L3158
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3160
	mov	r0, #4
	bx	lr
.L3160:
	ldr	r1, [r0, #124]
	mov	r0, r2
	mov	r2, #4
	add	r1, r1, #352
	b	__copy_to_user
.L3158:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	usb_rmnet_mux_ctrl_ioctl, .-usb_rmnet_mux_ctrl_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_ioctl, %function
acc_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #19714
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, 16640
	str	r6, [sp, #8]
	cmp	r1, r3
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	beq	.L3163
	bls	.L3177
	movw	r3, #19716
	movt	r3, 16640
	cmp	r1, r3
	beq	.L3168
	bcc	.L3169
	movw	r3, #19717
	movt	r3, 16640
	cmp	r1, r3
	beq	.L3170
	movw	r3, #19718
	movt	r3, 16640
	cmp	r1, r3
	addeq	r4, r4, #1376
	addeq	r4, r4, #5
	bne	.L3175
.L3172:
	cmp	r4, #0
	beq	.L3175
	mov	r0, r4
	mov	r6, r2
	bl	strlen
	mov	r3, sp
	add	r5, r0, #1
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3178
.L3173:
	mvn	r0, #13
	b	.L3161
.L3177:
	movw	r3, #19720
	cmp	r1, r3
	beq	.L3165
	movw	r3, #19713
	movt	r3, 16640
	cmp	r1, r3
	beq	.L3166
	movw	r3, #19719
	cmp	r1, r3
	beq	.L3179
.L3175:
	mvn	r0, #21
.L3161:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3166:
	add	r4, r4, #101
	b	.L3172
.L3170:
	add	r4, r4, #1120
	add	r4, r4, #5
	b	.L3172
.L3178:
	mov	r1, r4
	mov	r0, r6
	mov	r2, r5
	bl	__copy_to_user
	cmp	r0, #0
	bne	.L3173
	mov	r0, r5
	b	.L3161
.L3169:
	add	r4, r4, #612
	add	r4, r4, #1
	b	.L3172
.L3165:
	ldr	r0, [r4, #1648]
	b	.L3161
.L3179:
	ldr	r0, [r4, #1644]
	b	.L3161
.L3168:
	add	r4, r4, #868
	add	r4, r4, #1
	b	.L3172
.L3163:
	add	r4, r4, #356
	add	r4, r4, #1
	b	.L3172
	.fnend
	.size	acc_ioctl, .-acc_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_ioctl, %function
ffs_epfile_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	ldr	r0, [r4, #36]
	ldr	r3, [r0, #92]
	cmp	r3, #2
	bne	.L3201
	add	r0, r0, #24
	mov	r5, r1
	mov	r6, r2
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #40]
	cmp	r3, #0
	mvneq	r5, #18
	beq	.L3183
	movw	r2, #26371
	cmp	r5, r2
	beq	.L3184
	bhi	.L3185
	movw	r2, #26369
	cmp	r5, r2
	beq	.L3186
	movw	r2, #26370
	cmp	r5, r2
	bne	.L3196
	ldr	r0, [r3]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L3198
	mov	r5, #0
	blx	r3
.L3183:
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
.L3180:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3185:
	movw	r2, #26497
	cmp	r5, r2
	beq	.L3188
	movw	r2, #26498
	movt	r2, 32777
	cmp	r5, r2
	bne	.L3196
	ldr	r0, [r4, #36]
	ldr	r2, [r0]
	ldr	r2, [r2, #16]
	cmp	r2, #3
	moveq	r2, #1
	beq	.L3192
	cmp	r2, #5
	moveq	r2, #2
	movne	r2, #0
.L3192:
	add	r2, r2, #2
	add	r0, r0, #24
	ldr	r5, [r3, r2, lsl #2]
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, #9; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L3194
	mov	r1, r5
	mov	r0, r6
	mov	r2, #9
	bl	__copy_to_user
	cmp	r0, #0
	bne	.L3194
.L3196:
	mvn	r5, #24
	b	.L3183
.L3188:
	ldrb	r5, [r3, #20]	@ zero_extendqisi2
	b	.L3183
.L3186:
	ldr	r0, [r3]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #32]
	cmp	r3, #0
	beq	.L3197
	blx	r3
	mov	r5, r0
	b	.L3183
.L3184:
	ldr	r0, [r3]
	mov	r1, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	mov	r5, r0
	b	.L3183
.L3201:
	movw	r0, #:lower16:.LC9
	movw	r1, #978
	movt	r0, #:upper16:.LC9
	mvn	r5, #18
	bl	warn_slowpath_null
	b	.L3180
.L3194:
	mvn	r5, #13
	b	.L3180
.L3197:
	mvn	r5, #94
	b	.L3183
.L3198:
	mov	r5, r3
	b	.L3183
	.fnend
	.size	ffs_epfile_ioctl, .-ffs_epfile_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_ioctl, %function
rmnet_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	ldr	r4, [r0, #124]
	.pad #12
	sub	sp, sp, #12
	add	r5, r4, #28
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r0, r3, [r5]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L3203
	movw	r3, #29186
	mov	r0, r2
	movt	r3, 32772
	cmp	r1, r3
	bne	.L3213
	ldr	r2, [r4, #12]
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	str	r2, [sp, #4]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r0, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3207
.L3209:
	movw	r0, #:lower16:.LC177
	movt	r0, #:upper16:.LC177
	bl	printk
	mvn	r0, #13
.L3208:
	ldr	r3, [r4, #12]
.L3210:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L3202:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L3207:
	mov	r2, #4
	add	r1, sp, r2
	bl	__copy_to_user
	cmp	r0, #0
	beq	.L3208
	b	.L3209
.L3203:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #15
	b	.L3202
.L3213:
	movw	r0, #:lower16:.LC178
	movt	r0, #:upper16:.LC178
	bl	printk
	mvn	r0, #21
	b	.L3210
	.fnend
	.size	rmnet_ctrl_ioctl, .-rmnet_ctrl_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_bind_status_copy_to_user, %function
conn_gadget_bind_status_copy_to_user:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {lr}
	str	lr, [sp, #-4]!
	.pad #12
	sub	sp, sp, #12
	cmp	r1, #0
	mov	r3, sp
	movne	r2, #1
	moveq	r2, #2
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	str	r2, [sp, #4]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r0, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	mov	r2, #4
	beq	.L3225
.L3216:
	movw	r0, #:lower16:.LC179
	ldr	r1, .L3226
	movt	r0, #:upper16:.LC179
	bl	printk
	mvn	r2, #13
	mov	r0, r2
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L3225:
	add	r1, sp, r2
	bl	__copy_to_user
	subs	r2, r0, #0
	bne	.L3216
	mov	r0, r2
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L3227:
	.align	2
.L3226:
	.word	.LANCHOR2+2020
	.fnend
	.size	conn_gadget_bind_status_copy_to_user, .-conn_gadget_bind_status_copy_to_user
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_ioctl, %function
rndis_qc_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r3, #0
	movw	r4, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	ldr	r0, .L3247
	movt	r4, #:upper16:.LANCHOR1
	str	r8, [sp, #16]
	mov	r7, r2
	mov	r8, r1
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	strb	r3, [sp, #3]
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #2512]
	mov	r6, r0
	cmp	r3, #0
	beq	.L3244
	ldrb	r0, [r3, #132]	@ zero_extendqisi2
	add	r2, r3, #148
	ldr	r1, [r3, #136]
	strb	r0, [sp, #3]
	str	r1, [sp, #4]
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r5, [r2]
	add	r5, r5, #1
	strex	r1, r5, [r2]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r5, #1
	beq	.L3245
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r5, #15
.L3230:
	mov	r1, r6
	ldr	r0, .L3247
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3244:
	movw	r0, #:lower16:.LC51
	ldr	r1, .L3247+4
	mvn	r5, #18
	movt	r0, #:upper16:.LC51
	bl	printk
	b	.L3230
.L3245:
	mov	r1, r6
	ldr	r0, .L3247
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC180
	mov	r2, r8
	ldr	r1, .L3247+4
	movt	r0, #:upper16:.LC180
	bl	printk
	movw	r3, #26881
	movt	r3, 32769
	cmp	r8, r3
	beq	.L3233
	movw	r3, #26882
	movt	r3, 32772
	cmp	r8, r3
	bne	.L3246
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3239
.L3240:
	movw	r0, #:lower16:.LC181
	ldr	r1, .L3247+4
	mvn	r5, #13
	movt	r0, #:upper16:.LC181
	bl	printk
.L3238:
	ldr	r0, .L3247
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #2512]
	mov	r6, r0
	cmp	r3, #0
	beq	.L3244
	add	r2, r3, #148
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L3230
.L3239:
	mov	r2, #4
	mov	r0, r7
	add	r1, sp, r2
	bl	__copy_to_user
	cmp	r0, #0
	bne	.L3240
	mov	r5, r0
	b	.L3238
.L3246:
	movw	r0, #:lower16:.LC183
	ldr	r1, .L3247+4
	mvn	r5, #21
	movt	r0, #:upper16:.LC183
	bl	printk
	b	.L3238
.L3233:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #1; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3235
.L3237:
	movw	r0, #:lower16:.LC181
	ldr	r1, .L3247+4
	mvn	r5, #13
	movt	r0, #:upper16:.LC181
	bl	printk
.L3236:
	movw	r0, #:lower16:.LC182
	ldrb	r2, [sp, #3]	@ zero_extendqisi2
	ldr	r1, .L3247+4
	movt	r0, #:upper16:.LC182
	bl	printk
	b	.L3238
.L3235:
	mov	r2, r5
	mov	r0, r7
	add	r1, sp, #3
	bl	__copy_to_user
	cmp	r0, #0
	bne	.L3237
	mov	r5, r0
	b	.L3236
.L3248:
	.align	2
.L3247:
	.word	.LANCHOR1+2508
	.word	.LANCHOR2+2060
	.fnend
	.size	rndis_qc_ioctl, .-rndis_qc_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_ioctl, %function
mbim_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	add	r5, r4, #96
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r0, r3, [r5]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L3250
	movw	r3, #28419
	movt	r3, 32770
	cmp	r1, r3
	beq	.L3252
	movw	r3, #28418
	movt	r3, 32772
	cmp	r1, r3
	bne	.L3264
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3255
.L3257:
	movw	r0, #:lower16:.LC181
	ldr	r1, .L3265
	mvn	r6, #13
	movt	r0, #:upper16:.LC181
	bl	printk
.L3256:
	movw	r0, #:lower16:.LC184
	ldr	r1, .L3265
	ldr	r2, [r4, #224]
	movt	r0, #:upper16:.LC184
	bl	printk
	b	.L3258
.L3264:
	movw	r0, #:lower16:.LC186
	ldr	r1, .L3265
	mvn	r6, #21
	movt	r0, #:upper16:.LC186
	bl	printk
.L3258:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L3249:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3252:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3259
.L3261:
	movw	r0, #:lower16:.LC181
	ldr	r1, .L3265
	mvn	r6, #13
	movt	r0, #:upper16:.LC181
	bl	printk
.L3260:
	movw	r0, #:lower16:.LC185
	ldrh	r2, [r4, #228]
	ldr	r1, .L3265
	movt	r0, #:upper16:.LC185
	bl	printk
	b	.L3258
.L3255:
	mov	r0, r2
	add	r1, r4, #224
	mov	r2, #4
	bl	__copy_to_user
	subs	r6, r0, #0
	beq	.L3256
	b	.L3257
.L3259:
	mov	r0, r2
	add	r1, r4, #228
	mov	r2, #2
	bl	__copy_to_user
	subs	r6, r0, #0
	beq	.L3260
	b	.L3261
.L3250:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r6, #15
	b	.L3249
.L3266:
	.align	2
.L3265:
	.word	.LANCHOR2+2076
	.fnend
	.size	mbim_ioctl, .-mbim_ioctl
	.align	2
	.global	usb_rmnet_mux_ctrl_read
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_read, %function
usb_rmnet_mux_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r9, r1
	str	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #28]
	.pad #32
	sub	sp, sp, #32
	ldr	r4, [r0, #124]
	mov	r3, sp
	bic	r8, r3, #8128
	bic	r8, r8, #63
.L3268:
	ldr	r3, [r4, #372]
	cmp	r3, #0
	beq	.L3277
	add	r6, r4, #368
	add	r5, r4, #316
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r4, #316]
	mov	r1, r0
	cmp	r5, r7
	bne	.L3270
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #316]
	cmp	r5, r3
	bne	.L3268
	ldr	r3, [r4, #372]
	cmp	r3, #0
	beq	.L3268
	ldr	r0, [r8, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r2, #:upper16:autoremove_wake_function
	mov	r3, #0
	add	r6, r4, #324
	str	r3, [sp, #12]
	str	r0, [sp, #16]
	str	r2, [sp, #20]
	str	r1, [sp, #24]
	str	r1, [sp, #28]
	b	.L3274
.L3287:
	bl	schedule
.L3274:
	mov	r2, #1
	add	r1, sp, #12
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r3, [r4, #316]
	cmp	r5, r3
	bne	.L3272
	ldr	r3, [r4, #372]
	cmp	r3, #0
	beq	.L3272
	ldr	r3, [r8, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3287
	mov	r5, #65024
	add	r1, sp, #12
	mov	r0, r6
	movt	r5, 65535
	bl	finish_wait
.L3267:
	mov	r0, r5
	add	sp, sp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L3277:
	mvn	r5, #18
	b	.L3267
.L3272:
	add	r1, sp, #12
	mov	r0, r6
	bl	finish_wait
	b	.L3268
.L3270:
	ldr	r3, [r7, #-4]
	sub	r8, r7, #8
	cmp	r3, r10
	bhi	.L3288
	mov	r0, r7
	str	r1, [sp, #4]
	bl	list_del
	ldr	r3, [r4, #336]
	mov	r0, r6
	ldr	r1, [sp, #4]
	sub	r3, r3, #1
	str	r3, [r4, #336]
	bl	_raw_spin_unlock_irqrestore
	mov	r3, sp
	ldr	r5, [r7, #-4]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r9, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	mov	r0, r5
	beq	.L3289
.L3276:
	ldr	r3, [r4, #420]
	cmp	r0, #0
	movne	r5, r0
	add	r3, r3, #1
	str	r3, [r4, #420]
	ldr	r0, [r7, #-8]
	bl	kfree
	mov	r0, r8
	bl	kfree
	b	.L3267
.L3289:
	mov	r0, r9
	mov	r2, r5
	ldr	r1, [r7, #-8]
	bl	__copy_to_user
	b	.L3276
.L3288:
	mov	r0, r6
	mvn	r5, #11
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC187
	mov	r3, r10
	ldr	r1, .L3290
	ldr	r2, [r7, #-4]
	movt	r0, #:upper16:.LC187
	bl	printk
	b	.L3267
.L3291:
	.align	2
.L3290:
	.word	.LANCHOR2+2088
	.fnend
	.size	usb_rmnet_mux_ctrl_read, .-usb_rmnet_mux_ctrl_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_read, %function
rmnet_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r2, #2048
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	fp, r2
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r4, [r0, #124]
	str	r1, [sp]
	bhi	.L3308
	add	r9, r4, #20
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r9]
	add	r3, r3, #1
	strex	r2, r3, [r9]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L3295
	mov	r3, sp
	add	r7, r4, #44
	bic	r8, r3, #8128
	add	r6, r4, #52
	bic	r8, r8, #63
	b	.L3298
.L3310:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r10, [r4, #44]
	cmp	r10, r7
	beq	.L3309
.L3298:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #44]
	mov	r1, r0
	cmp	r5, r7
	beq	.L3310
	mov	r0, r5
	str	r1, [sp, #4]
	sub	r7, r5, #8
	bl	list_del
	ldr	r1, [sp, #4]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r5, #-4]
	cmp	r1, fp
	bhi	.L3311
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r9]
	sub	r3, r3, #1
	strex	r2, r3, [r9]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	ldr	r2, [r5, #-4]
	bic	r3, r3, #8128
	ldr	r0, [sp]
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r0, r2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3312
.L3303:
	cmp	r2, #0
	ldreq	r4, [r5, #-4]
	bne	.L3313
.L3305:
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r7
	bl	kfree
.L3292:
	mov	r0, r4
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3309:
	ldr	ip, [r8, #12]
	movw	r1, #:lower16:autoremove_wake_function
	add	r0, sp, #24
	movt	r1, #:upper16:autoremove_wake_function
	mov	r2, #0
	add	r5, r4, #32
	str	r2, [sp, #12]
	str	ip, [sp, #16]
	str	r1, [sp, #20]
	str	r0, [sp, #24]
	str	r0, [sp, #28]
	b	.L3301
.L3314:
	bl	schedule
.L3301:
	mov	r2, #1
	add	r1, sp, #12
	mov	r0, r5
	bl	prepare_to_wait
	ldr	r2, [r4, #44]
	cmp	r10, r2
	bne	.L3299
	ldr	r2, [r8, #12]
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	tst	r2, #1
	beq	.L3314
	add	r1, sp, #12
	mov	r0, r5
	bl	finish_wait
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r9]
	sub	r3, r3, #1
	strex	r2, r3, [r9]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r4, #65024
	movt	r4, 65535
	b	.L3292
.L3299:
	add	r1, sp, #12
	mov	r0, r5
	bl	finish_wait
	b	.L3298
.L3312:
	ldr	r1, [r5, #-8]
	bl	__copy_to_user
	mov	r2, r0
	b	.L3303
.L3313:
	movw	r0, #:lower16:.LC191
	mov	r1, r2
	movt	r0, #:upper16:.LC191
	mvn	r4, #13
	bl	printk
	b	.L3305
.L3311:
	movw	r0, #:lower16:.LC190
	mov	r2, fp
	movt	r0, #:upper16:.LC190
	bl	printk
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r9]
	sub	r3, r3, #1
	strex	r2, r3, [r9]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r5, #-8]
	mvn	r4, #11
	bl	kfree
	mov	r0, r7
	bl	kfree
	b	.L3292
.L3295:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r9]
	sub	r3, r3, #1
	strex	r2, r3, [r9]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC189
	mvn	r4, #15
	movt	r0, #:upper16:.LC189
	bl	printk
	b	.L3292
.L3308:
	movw	r0, #:lower16:.LC188
	mov	r1, r2
	movt	r0, #:upper16:.LC188
	mov	r2, #2048
	bl	printk
	mvn	r4, #21
	b	.L3292
	.fnend
	.size	rmnet_ctrl_read, .-rmnet_ctrl_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_ioctl, %function
conn_gadget_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r3, #29441
	ubfx	r4, r1, #8, #8
	movw	ip, #29442
	strd	r6, [sp, #8]
	movt	r3, 32772
	str	lr, [sp, #16]
	mov	lr, #29440
	.pad #44
	sub	sp, sp, #44
	movt	ip, 32772
	mov	r0, #0
	movt	lr, 32772
	cmp	r4, #115
	str	lr, [sp, #4]
	str	r3, [sp, #8]
	str	ip, [sp, #12]
	str	r0, [sp, #16]
	bne	.L3346
	mov	r5, r2
	uxtb	r2, r1
	cmp	r2, #2
	bhi	.L3347
	ubfx	r2, r1, #16, #14
	cmp	r2, #0
	beq	.L3348
	cmp	r1, #0
	bge	.L3349
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r4, [r2, #2500]
	cmp	r4, #0
	beq	.L3350
	cmp	r1, r3
	beq	.L3322
	cmp	r1, ip
	beq	.L3323
	cmp	r1, lr
	movne	r4, r0
	beq	.L3351
.L3315:
	mov	r0, r4
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L3323:
	ldr	r1, [r4, #100]
	mov	r0, r5
	bl	conn_gadget_bind_status_copy_to_user
	subs	r4, r0, #0
	beq	.L3315
	movw	r0, #:lower16:.LC200
	mov	r2, r4
	ldr	r1, .L3354
	movt	r0, #:upper16:.LC200
	bl	printk
	b	.L3315
.L3351:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r5, #16; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	movne	r4, #16
	beq	.L3352
.L3325:
	movw	r0, #:lower16:.LC197
	mov	r2, r4
	ldr	r1, .L3354
	movt	r0, #:upper16:.LC197
	mvn	r4, #13
	bl	printk
	b	.L3315
.L3322:
	ldr	r1, [r4, #100]
	ldr	r3, [r4, #212]
	cmp	r3, r1
	beq	.L3326
.L3345:
	str	r1, [r4, #212]
	mov	r0, r5
	bl	conn_gadget_bind_status_copy_to_user
	subs	r4, r0, #0
	beq	.L3315
	movw	r0, #:lower16:.LC199
	mov	r2, r4
	ldr	r1, .L3354
	movt	r0, #:upper16:.LC199
	bl	printk
	b	.L3315
.L3326:
	ldr	r3, [r4, #216]
	cmp	r3, #0
	bne	.L3328
	mov	r2, sp
	str	r3, [sp, #20]
	add	r1, sp, #32
	bic	r6, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r6, r6, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r6, #12]
	add	r7, r4, #200
	str	r0, [sp, #24]
	str	r2, [sp, #28]
	str	r1, [sp, #32]
	str	r1, [sp, #36]
	b	.L3331
.L3353:
	bl	schedule
.L3331:
	mov	r2, #1
	add	r1, sp, #20
	mov	r0, r7
	bl	prepare_to_wait
	ldr	r3, [r4, #100]
	ldr	r2, [r4, #212]
	cmp	r2, r3
	bne	.L3329
	ldr	r3, [r4, #216]
	cmp	r3, #0
	bne	.L3330
	ldr	r3, [r6, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3353
.L3329:
	add	r1, sp, #20
	mov	r0, r7
	bl	finish_wait
	ldr	r1, [r4, #100]
	b	.L3345
.L3352:
	mov	r0, r5
	mov	r2, #16
	add	r1, sp, #4
	bl	__copy_to_user
	subs	r4, r0, #0
	beq	.L3315
	b	.L3325
.L3330:
	add	r1, sp, #20
	mov	r0, r7
	bl	finish_wait
	ldr	r3, [r4, #100]
	str	r3, [r4, #212]
.L3328:
	movw	r0, #:lower16:.LC198
	ldr	r1, .L3354
	mvn	r4, #3
	movt	r0, #:upper16:.LC198
	bl	printk
	b	.L3315
.L3348:
	movw	r0, #:lower16:.LC194
	ldr	r1, .L3354
	mvn	r4, #21
	movt	r0, #:upper16:.LC194
	bl	printk
	b	.L3315
.L3347:
	movw	r0, #:lower16:.LC193
	ldr	r1, .L3354
	mvn	r4, #24
	movt	r0, #:upper16:.LC193
	bl	printk
	b	.L3315
.L3350:
	movw	r0, #:lower16:.LC196
	ldr	r1, .L3354
	mvn	r4, #18
	movt	r0, #:upper16:.LC196
	bl	printk
	b	.L3315
.L3349:
	movw	r0, #:lower16:.LC195
	ldr	r1, .L3354
	mvn	r4, #21
	movt	r0, #:upper16:.LC195
	bl	printk
	b	.L3315
.L3346:
	movw	r0, #:lower16:.LC192
	mov	r2, r4
	ldr	r1, .L3354
	movt	r0, #:upper16:.LC192
	mvn	r4, #21
	bl	printk
	b	.L3315
.L3355:
	.align	2
.L3354:
	.word	.LANCHOR2+2112
	.fnend
	.size	conn_gadget_ioctl, .-conn_gadget_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_read, %function
acc_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #124]
	.pad #24
	sub	sp, sp, #24
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	tst	r3, #2
	bne	.L3371
	cmp	r2, #16384
	mov	r8, r1
	movcc	r6, r2
	movcs	r6, #16384
	ands	r3, r3, #1
	bne	.L3358
	mov	r2, sp
	str	r3, [sp, #4]
	add	r1, sp, #16
	bic	r7, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r7, r7, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r7, #12]
	add	r5, sp, #4
	add	r9, r4, #1664
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L3361
.L3377:
	bl	schedule
.L3361:
	mov	r2, #1
	mov	r1, r5
	mov	r0, r9
	bl	prepare_to_wait
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	tst	r3, #1
	bne	.L3359
	ldr	r3, [r7, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3377
	mov	r4, #65024
	mov	r1, r5
	mov	r0, r9
	movt	r4, 65535
	bl	finish_wait
.L3356:
	mov	r0, r4
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L3359:
	mov	r1, r5
	mov	r0, r9
	bl	finish_wait
.L3358:
	ldr	r10, [r4, #1688]
	ldr	r3, [r4, #1696]
	cmp	r3, #0
	bne	.L3362
.L3363:
	str	r6, [r10, #4]
	ldr	r0, [r4, #96]
	mov	r3, #0
	mov	r2, #208
	mov	r1, r10
	str	r3, [r4, #1696]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L3368
	ldr	r3, [r4, #1696]
	cmp	r3, #0
	bne	.L3362
	mov	r2, sp
	str	r3, [sp, #4]
	add	r1, sp, #16
	bic	r7, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r7, r7, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r7, #12]
	add	r5, sp, #4
	add	r9, r4, #1664
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L3367
.L3378:
	bl	schedule
.L3367:
	mov	r2, #1
	mov	r1, r5
	mov	r0, r9
	bl	prepare_to_wait
	ldr	r3, [r4, #1696]
	cmp	r3, #0
	bne	.L3365
	ldr	r3, [r7, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3378
	mov	r1, r5
	mov	r0, r9
	bl	finish_wait
	ldr	r0, [r4, #96]
	mov	r1, r10
	mov	r4, #65024
	movt	r4, 65535
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L3356
.L3365:
	mov	r1, r5
	mov	r0, r9
	bl	finish_wait
.L3362:
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	mov	r2, #0
	str	r2, [r4, #1696]
	tst	r3, #1
	beq	.L3368
	ldr	r2, [r10, #48]
	cmp	r2, #0
	bne	.L3369
	ldr	r10, [r4, #1688]
	b	.L3363
.L3369:
	mov	r3, sp
	cmp	r2, r6
	bic	r3, r3, #8128
	movcs	r2, r6
	bic	r3, r3, #63
	mov	r4, r2
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r8, r2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3379
.L3370:
	cmp	r2, #0
	mvnne	r4, #13
	b	.L3356
.L3379:
	mov	r0, r8
	ldr	r1, [r10]
	bl	__copy_to_user
	mov	r2, r0
	b	.L3370
.L3371:
	mvn	r4, #18
	b	.L3356
.L3368:
	mvn	r4, #4
	b	.L3356
	.fnend
	.size	acc_read, .-acc_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_read, %function
mtp_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #32]
	ldr	fp, [r0, #124]
	.pad #36
	sub	sp, sp, #36
	str	r1, [sp, #4]
	ldr	r2, [fp, #104]
	cmp	r2, #0
	bne	.L3381
	mov	r3, sp
	str	r2, [sp, #12]
	movw	r1, #:lower16:autoremove_wake_function
	bic	r4, r3, #8128
	add	r0, sp, #24
	bic	r4, r4, #63
	movt	r1, #:upper16:autoremove_wake_function
	ldr	ip, [r4, #12]
	add	r5, sp, #12
	add	r6, fp, #132
	str	ip, [sp, #16]
	str	r1, [sp, #20]
	str	r0, [sp, #24]
	str	r0, [sp, #28]
	b	.L3384
.L3425:
	bl	schedule
.L3384:
	mov	r2, #1
	mov	r1, r5
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r2, [fp, #104]
	cmp	r2, #0
	bne	.L3382
	ldr	r2, [r4, #12]
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	tst	r2, #1
	beq	.L3425
	mov	r1, r5
	mov	r0, r6
	mov	r10, #65024
	add	r8, fp, #88
	bl	finish_wait
	movt	r10, 65535
	b	.L3388
.L3382:
	mov	r1, r5
	mov	r0, r6
	bl	finish_wait
.L3381:
	ldr	r0, [fp, #96]
	movw	r2, #:lower16:.LANCHOR0
	sub	r6, r10, #1
	movt	r2, #:upper16:.LANCHOR0
	ldr	r1, [r2, #516]
	ldrh	r2, [r0, #20]
	add	r6, r6, r2
	rsb	r2, r2, #0
	and	r6, r6, r2
	cmp	r6, r1
	bhi	.L3402
	add	r8, fp, #88
	mov	r0, r8
	bl	_raw_spin_lock_irq
	ldr	r2, [fp, #104]
	cmp	r2, #3
	beq	.L3426
	mov	r2, #2
	mov	r0, r8
	str	r2, [fp, #104]
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	bic	r7, r3, #8128
	bic	r7, r7, #63
	b	.L3387
.L3428:
	cmp	r2, #3
	beq	.L3391
.L3390:
	cmp	r2, #2
	bne	.L3405
	ldr	r2, [r4, #48]
	cmp	r2, #0
	bne	.L3427
.L3387:
	ldr	r4, [fp, #168]
	mov	ip, #0
	mov	r2, #208
	str	r6, [r4, #4]
	mov	r1, r4
	ldr	r0, [fp, #96]
	str	ip, [fp, #176]
	ldr	ip, [r0, #8]
	ldr	r5, [ip, #16]
	blx	r5
	cmp	r0, #0
	blt	.L3405
	ldr	r2, [fp, #104]
	ldr	r1, [fp, #176]
	cmp	r1, #0
	bne	.L3428
	cmp	r2, #2
	beq	.L3392
	cmp	r2, #3
	beq	.L3396
.L3405:
	mvn	r10, #4
.L3388:
	mov	r0, r8
	bl	_raw_spin_lock_irq
	ldr	r2, [fp, #104]
	cmp	r2, #3
	mvneq	r10, #124
	beq	.L3399
	cmp	r2, #0
	movne	r2, #1
	strne	r2, [fp, #104]
.L3399:
	mov	r0, r8
	bl	_raw_spin_unlock_irq
.L3380:
	mov	r0, r10
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3392:
	ldr	ip, [r7, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r0, sp, #24
	movt	r2, #:upper16:autoremove_wake_function
	add	r5, sp, #12
	str	r1, [sp, #12]
	add	r9, fp, #132
	str	ip, [sp, #16]
	str	r2, [sp, #20]
	str	r0, [sp, #24]
	str	r0, [sp, #28]
	b	.L3395
.L3429:
	bl	schedule
.L3395:
	mov	r2, #1
	mov	r1, r5
	mov	r0, r9
	bl	prepare_to_wait
	ldr	r2, [fp, #176]
	cmp	r2, #0
	bne	.L3393
	ldr	r2, [fp, #104]
	cmp	r2, #2
	bne	.L3393
	ldr	r2, [r7, #12]
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	tst	r2, #1
	beq	.L3429
	mov	r1, r5
	mov	r0, r9
	bl	finish_wait
	ldr	r2, [fp, #104]
	cmp	r2, #3
	beq	.L3400
	ldr	r0, [fp, #96]
	mov	r1, r4
	mov	r10, #65024
	movt	r10, 65535
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #20]
	blx	r2
	b	.L3388
.L3393:
	mov	r1, r5
	mov	r0, r9
	bl	finish_wait
	ldr	r2, [fp, #104]
	cmp	r2, #3
	bne	.L3390
.L3400:
	ldr	r2, [fp, #176]
	cmp	r2, #0
	bne	.L3391
.L3396:
	ldr	r0, [fp, #96]
	mov	r1, r4
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #20]
	blx	r2
.L3391:
	mov	r0, r8
	mvn	r10, #124
	bl	_raw_spin_lock_irq
	mov	r2, #3
	mov	r0, r8
	str	r2, [fp, #104]
	bl	_raw_spin_unlock_irq
	b	.L3388
.L3427:
	mov	r3, sp
	cmp	r2, r10
	bic	r1, r3, #8128
	movcc	r10, r2
	ldr	r3, [sp, #4]
	bic	r1, r1, #63
	ldr	r2, [r1, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r3, r10; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	movne	r0, r10
	beq	.L3430
.L3398:
	cmp	r0, #0
	mvnne	r10, #13
	b	.L3388
.L3430:
	mov	r0, r3
	mov	r2, r10
	ldr	r1, [r4]
	bl	__copy_to_user
	b	.L3398
.L3402:
	mvn	r10, #21
	b	.L3380
.L3426:
	mov	r2, #1
	mov	r0, r8
	mvn	r10, #124
	str	r2, [fp, #104]
	bl	_raw_spin_unlock_irq
	b	.L3380
	.fnend
	.size	mtp_read, .-mtp_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_ctrl_read, %function
ccid_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #124]
	.pad #24
	sub	sp, sp, #24
	ldr	r3, [r5, #96]
	cmp	r3, #0
	beq	.L3438
	ldr	r3, [r5, #144]
	cmp	r2, #4
	mov	r7, r1
	movcc	r4, r2
	movcs	r4, #4
	cmp	r3, #0
	bne	.L3434
	mov	r2, sp
	str	r3, [sp, #4]
	add	r1, sp, #16
	bic	r6, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r6, r6, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r6, #12]
	add	r8, r5, #128
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L3437
.L3446:
	bl	schedule
.L3437:
	mov	r2, #1
	add	r1, sp, #4
	mov	r0, r8
	bl	prepare_to_wait
	ldr	r3, [r5, #144]
	cmp	r3, #0
	bne	.L3435
	ldr	r3, [r6, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3446
	mov	r0, r8
	add	r1, sp, #4
	bl	finish_wait
	mov	r0, #65024
	movt	r0, 65535
	b	.L3431
.L3435:
	add	r1, sp, #4
	mov	r0, r8
	bl	finish_wait
.L3434:
	ldr	r3, [r5, #96]
	mov	r2, #0
	str	r2, [r5, #144]
	cmp	r3, r2
	beq	.L3438
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	movne	r0, r4
	beq	.L3447
.L3439:
	cmp	r0, #0
	moveq	r0, r4
	mvnne	r0, #13
.L3431:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3447:
	add	r1, r5, #140
	mov	r0, r7
	mov	r2, r4
	bl	__copy_to_user
	b	.L3439
.L3438:
	mvn	r0, #18
	b	.L3431
	.fnend
	.size	ccid_ctrl_read, .-ccid_ctrl_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_read, %function
modem_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #32]
	tst	r3, #2048
	bne	.L3456
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r2, #57344
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	mov	r5, r1
	ldr	r3, [r4, #2204]
	str	lr, [sp, #12]
	.pad #24
	sub	sp, sp, #24
	movt	r2, 65535
	mov	r1, sp
	and	r1, r1, r2
	cmp	r3, #0
	bne	.L3450
	str	r3, [sp, #4]
	movw	r0, #:lower16:autoremove_wake_function
	mov	r6, r1
	str	r3, [sp, #8]
	movt	r0, #:upper16:autoremove_wake_function
	str	r3, [sp, #12]
	str	r0, [sp, #12]
	str	r3, [sp, #16]
	str	r3, [sp, #20]
	ldr	r2, [r1, #12]
	add	r3, sp, #16
	str	r2, [sp, #8]
	str	r3, [sp, #16]
	str	r3, [sp, #20]
	b	.L3453
.L3461:
	bl	schedule
.L3453:
	mov	r2, #1
	add	r1, sp, #4
	ldr	r0, .L3462
	bl	prepare_to_wait
	ldr	r3, [r4, #2204]
	cmp	r3, #0
	bne	.L3451
	ldr	r3, [r6, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3461
	ldr	r0, .L3462
	add	r1, sp, #4
	bl	finish_wait
	mov	r0, #65024
	movt	r0, 65535
	b	.L3448
.L3451:
	add	r1, sp, #4
	ldr	r0, .L3462
	bl	finish_wait
	mov	r3, sp
	bic	r1, r3, #8128
	bic	r1, r1, #63
.L3450:
	ldr	r3, [r1, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r5, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L3455
	mov	r0, r5
	mov	r2, #4
	ldr	r1, .L3462+4
	bl	__copy_to_user
	cmp	r0, #0
	bne	.L3455
	str	r0, [r4, #2204]
	mov	r0, #4
.L3448:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3455:
	mvn	r0, #13
	b	.L3448
.L3456:
	mvn	r0, #10
	bx	lr
.L3463:
	.align	2
.L3462:
	.word	.LANCHOR1+2208
	.word	.LANCHOR1+2696
	.fnend
	.size	modem_read, .-modem_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_read, %function
adb_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r3, #2692]
	.pad #28
	sub	sp, sp, #28
	ldr	r4, [r0, #124]
	cmp	r3, #0
	beq	.L3484
	cmp	r2, #4096
	bhi	.L3485
	add	r7, r4, #108
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r7]
	add	r3, r3, #1
	strex	r0, r3, [r7]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L3496
	mov	r3, sp
	mov	r6, r2
	bic	r5, r3, #8128
	mov	r8, r1
	bic	r5, r5, #63
	b	.L3467
.L3499:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3472
	ldr	r3, [r4, #100]
	cmp	r3, #0
	beq	.L3498
.L3467:
	ldr	r3, [r4, #100]
	cmp	r3, #0
	beq	.L3499
.L3472:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3481
	mov	r3, sp
	bic	r9, r3, #8128
	bic	r9, r9, #63
	b	.L3474
.L3477:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3481
	ldr	r3, [r5, #48]
	cmp	r3, #0
	bne	.L3500
.L3474:
	ldr	r5, [r4, #152]
	mov	r1, #4096
	mov	r3, #0
	mov	r2, #32
	str	r1, [r5, #4]
	ldr	r0, [r4, #96]
	mov	r1, r5
	str	r3, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L3501
	ldr	r3, [r4, #156]
	cmp	r3, #0
	bne	.L3477
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3477
	ldr	r0, [r9, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #16
	movt	r2, #:upper16:autoremove_wake_function
	add	r10, sp, #4
	str	r3, [sp, #4]
	add	fp, r4, #128
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L3480
.L3502:
	bl	schedule
.L3480:
	mov	r2, #1
	mov	r1, r10
	mov	r0, fp
	bl	prepare_to_wait
	ldr	r3, [r4, #156]
	cmp	r3, #0
	bne	.L3478
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3478
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3502
	mov	r1, r10
	mov	r0, fp
	bl	finish_wait
	ldr	r0, [r4, #96]
	mov	r1, r5
	mov	r6, #65024
	movt	r6, 65535
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L3483
.L3503:
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #140
	bl	__wake_up
	b	.L3483
.L3481:
	mvn	r6, #4
.L3475:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3503
.L3483:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L3464:
	mov	r0, r6
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3498:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3467
	ldr	r0, [r5, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #16
	movt	r2, #:upper16:autoremove_wake_function
	add	r10, sp, #4
	str	r3, [sp, #4]
	add	r9, r4, #128
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L3471
.L3504:
	bl	schedule
.L3471:
	mov	r2, #1
	mov	r1, r10
	mov	r0, r9
	bl	prepare_to_wait
	ldr	r3, [r4, #100]
	cmp	r3, #0
	bne	.L3469
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3469
	ldr	r3, [r5, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3504
	mov	r1, r10
	mov	r0, r9
	bl	finish_wait
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r6, #65024
	movt	r6, 65535
	b	.L3464
.L3478:
	mov	r1, r10
	mov	r0, fp
	bl	finish_wait
	b	.L3477
.L3501:
	mov	r3, #1
	mvn	r6, #4
	str	r3, [r4, #104]
	b	.L3475
.L3500:
	mov	r2, sp
	cmp	r3, r6
	bic	r1, r2, #8128
	movcc	r2, r3
	bic	r1, r1, #63
	movcs	r2, r6
	ldr	r3, [r1, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r8, r2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3505
.L3482:
	cmp	r2, #0
	mvnne	r6, #13
	b	.L3475
.L3505:
	mov	r0, r8
	ldr	r1, [r5]
	bl	__copy_to_user
	mov	r2, r0
	b	.L3482
.L3496:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r6, #15
	b	.L3464
.L3485:
	mvn	r6, #21
	b	.L3464
.L3469:
	mov	r1, r10
	mov	r0, r9
	bl	finish_wait
	b	.L3467
.L3484:
	mvn	r6, #18
	b	.L3464
	.fnend
	.size	adb_read, .-adb_read
	.align	2
	.global	usb_rmnet_mux_ctrl_write
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_write, %function
usb_rmnet_mux_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #124]
	ldr	r3, [r4, #372]
	cmp	r3, #0
	beq	.L3517
	cmp	r2, #0
	mov	r5, r2
	mov	r6, r1
	beq	.L3519
	cmp	r2, #4096
	bhi	.L3520
	mov	r1, #208
	mov	r0, r2
	bl	rmnet_mux_alloc_ctrl_pkt
	subs	r8, r0, #0
	beq	.L3521
	mov	r3, sp
	ldr	r0, [r8]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3522
	mov	r1, r5
	mov	r6, r5
	bl	__memzero
.L3512:
	subs	r7, r6, #0
	bne	.L3523
	add	r7, r4, #368
	add	r9, r4, #376
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #348]
	mov	r1, r4
	mov	r10, r0
	add	r0, r8, #8
	add	r3, r3, #1
	str	r3, [r4, #348]
	ldr	r2, [r1, #340]!
	bl	__list_add
	mov	r0, r7
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore
	ldr	r7, [r4, #84]
	ldr	r3, [r4, #100]
	ldr	r3, [r3]
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r9]
	add	r2, r2, #1
	strex	r1, r2, [r9]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #1
	bne	.L3515
	mvn	r1, #94
	strb	r1, [r3]
	strb	r2, [r3, #1]
	mov	r2, #32
	strb	r6, [r3, #2]
	strb	r6, [r3, #3]
	ldrb	r1, [r4, #360]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	strb	r6, [r3, #6]
	strb	r6, [r3, #7]
	ldrd	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	blt	.L3524
.L3515:
	mov	r7, r5
.L3506:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L3522:
	mov	r1, r6
	mov	r2, r5
	bl	__copy_from_user
	mov	r6, r0
	b	.L3512
.L3524:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r9]
	sub	r3, r3, #1
	strex	r1, r3, [r9]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC205
	movt	r1, #:upper16:.LC205
	add	r0, r0, #32
	bl	dev_err
	b	.L3515
.L3517:
	mvn	r7, #18
	b	.L3506
.L3521:
	movw	r0, #:lower16:.LC203
	ldr	r1, .L3525
	mvn	r7, #11
	movt	r0, #:upper16:.LC203
	bl	printk
	b	.L3506
.L3520:
	movw	r0, #:lower16:.LC202
	mov	r3, r2
	ldr	r1, .L3525
	movt	r0, #:upper16:.LC202
	mov	r2, #4096
	bl	printk
	mvn	r7, #11
	b	.L3506
.L3519:
	movw	r0, #:lower16:.LC201
	ldr	r1, .L3525
	mvn	r7, #18
	movt	r0, #:upper16:.LC201
	bl	printk
	b	.L3506
.L3523:
	movw	r0, #:lower16:.LC204
	mov	r2, r7
	ldr	r1, .L3525
	movt	r0, #:upper16:.LC204
	bl	printk
	ldr	r0, [r8]
	bl	kfree
	mov	r0, r8
	bl	kfree
	b	.L3506
.L3526:
	.align	2
.L3525:
	.word	.LANCHOR2+2132
	.fnend
	.size	usb_rmnet_mux_ctrl_write, .-usb_rmnet_mux_ctrl_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_write, %function
rmnet_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r3, r2, #1
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	cmp	r3, #2048
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #124]
	bcs	.L3538
	mov	r7, r1
	mov	r5, r2
	add	r6, r4, #24
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r6]
	add	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L3529
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L3547
	mov	r1, #208
	mov	r0, r5
	bl	__kmalloc
	subs	r8, r0, #0
	beq	.L3548
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3549
	mov	r1, r5
	bl	__memzero
	mov	r1, r5
.L3534:
	cmp	r1, #0
	bne	.L3550
	add	r9, r4, #52
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r10, r0
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L3536
	ldr	r3, [r0, #92]
	cmp	r3, #0
	beq	.L3536
	mov	r2, r5
	mov	r1, r8
	blx	r3
	subs	r7, r0, #0
	bne	.L3551
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	kfree
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r7, r5
.L3527:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L3549:
	mov	r1, r7
	mov	r2, r5
	bl	__copy_from_user
	mov	r1, r0
	b	.L3534
.L3538:
	mvn	r7, #21
	b	.L3527
.L3547:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #31
	b	.L3527
.L3536:
	movw	r0, #:lower16:.LC210
	movt	r0, #:upper16:.LC210
	bl	printk
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	kfree
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #21
	b	.L3527
.L3550:
	movw	r0, #:lower16:.LC208
	movt	r0, #:upper16:.LC208
	bl	printk
	mov	r0, r8
	bl	kfree
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #13
	b	.L3527
.L3551:
	movw	r0, #:lower16:.LC209
	mov	r1, r7
	movt	r0, #:upper16:.LC209
	bl	printk
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	kfree
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L3527
.L3529:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC206
	mvn	r7, #15
	movt	r0, #:upper16:.LC206
	bl	printk
	b	.L3527
.L3548:
	movw	r0, #:lower16:.LC207
	movt	r0, #:upper16:.LC207
	bl	printk
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #11
	b	.L3527
	.fnend
	.size	rmnet_ctrl_write, .-rmnet_ctrl_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_ctrl_ioctl, %function
ccid_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r3, #17154
	str	r6, [sp, #8]
	movt	r3, 16388
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	cmp	r1, r3
	ldr	r5, [r4, #112]
	ldr	r0, [r5]
	beq	.L3554
	movw	r3, #17155
	movt	r3, 32772
	cmp	r1, r3
	beq	.L3555
	movw	r3, #17153
	movt	r3, 16388
	cmp	r1, r3
	beq	.L3567
.L3553:
	ldr	r0, [r4, #100]
	mov	r1, r5
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L3568
.L3563:
	mov	r4, #0
.L3552:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3567:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L3560
	mov	r1, r2
	mov	r2, #4
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L3566
	mov	r3, #2
	str	r3, [r5, #4]
	ldr	r5, [r4, #112]
	b	.L3553
.L3555:
	mov	r3, sp
	add	r1, r4, #200
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r0, r2, #4; sbcccs r0, r0, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L3566
	mov	r0, r2
	mov	r2, #4
	bl	__copy_to_user
	cmp	r0, #0
	beq	.L3563
.L3566:
	mvn	r4, #13
	b	.L3552
.L3554:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L3560
	mov	r1, r2
	mov	r2, #4
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L3566
	mov	r3, #4
	str	r3, [r5, #4]
	ldr	r5, [r4, #112]
	b	.L3553
.L3560:
	mov	r1, #4
	bl	__memzero
	b	.L3566
.L3568:
	movw	r0, #:lower16:.LC211
	mov	r1, r4
	movt	r0, #:upper16:.LC211
	bl	printk
	b	.L3552
	.fnend
	.size	ccid_ctrl_ioctl, .-ccid_ctrl_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_write, %function
acc_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #36
	sub	sp, sp, #36
	str	r2, [sp]
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	and	r2, r3, #3
	cmp	r2, #1
	bne	.L3585
	cmp	r5, #0
	beq	.L3569
	tst	r3, #1
	beq	.L3573
	movw	r3, #:lower16:autoremove_wake_function
	add	r7, r4, #1648
	movt	r3, #:upper16:autoremove_wake_function
	mov	r9, #57344
	mov	r6, r1
	add	r7, r7, #8
	movt	r9, 65535
	str	r3, [sp, #4]
	b	.L3572
.L3600:
	ldrb	r2, [fp, #26]	@ zero_extendqisi2
	mov	r8, #16384
	bfc	r2, #1, #1
	strb	r2, [fp, #26]
.L3579:
	mov	r3, sp
	ldr	r0, [fp]
	and	r2, r3, r9
	ldr	r2, [r2, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r6, r8; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	bne	.L3580
	mov	r2, r8
	mov	r1, r6
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L3581
	str	r8, [fp, #4]
	ldr	r0, [r4, #92]
	mov	r2, #208
	mov	r1, fp
	ldr	ip, [r0, #8]
	ldr	r10, [ip, #16]
	blx	r10
	cmp	r0, #0
	blt	.L3590
	subs	r5, r5, r8
	add	r6, r6, r8
	beq	.L3569
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L3573
.L3572:
	mov	r1, r7
	mov	r0, r4
	bl	req_get
	subs	fp, r0, #0
	beq	.L3599
.L3574:
	cmp	r5, #16384
	bhi	.L3600
	ldr	r2, [r4, #92]
	mov	r8, r5
	ldrb	r1, [fp, #26]	@ zero_extendqisi2
	ldrh	r0, [r2, #20]
	udiv	r2, r5, r0
	mls	r2, r0, r2, r5
	clz	r2, r2
	lsr	r2, r2, #5
	bfi	r1, r2, #1, #1
	strb	r1, [fp, #26]
	b	.L3579
.L3580:
	mov	r1, r8
	bl	__memzero
.L3581:
	mvn	r3, #13
	str	r3, [sp]
.L3583:
	mov	r2, fp
	mov	r1, r7
	mov	r0, r4
	bl	req_put
.L3569:
	ldr	r0, [sp]
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3599:
	ldrb	r2, [r4, #100]	@ zero_extendqisi2
	ands	r2, r2, #1
	beq	.L3587
	mov	r3, sp
	ldr	r1, [sp, #4]
	str	fp, [sp, #12]
	and	r2, r3, r9
	str	fp, [sp, #16]
	add	r3, sp, #24
	str	fp, [sp, #20]
	mov	r10, r2
	add	r8, r4, #1664
	add	r8, r8, #12
	str	fp, [sp, #24]
	str	fp, [sp, #28]
	ldr	r2, [r2, #12]
	str	r2, [sp, #16]
	str	r1, [sp, #20]
	str	r3, [sp, #24]
	str	r3, [sp, #28]
	b	.L3577
.L3601:
	bl	schedule
.L3577:
	mov	r2, #1
	add	r1, sp, #12
	mov	r0, r8
	bl	prepare_to_wait
	mov	r1, r7
	mov	r0, r4
	bl	req_get
	cmp	r0, #0
	bne	.L3575
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	ands	r3, r3, #1
	beq	.L3598
	ldr	r3, [r10, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3601
	mov	r3, #65024
	movt	r3, 65535
.L3598:
	add	r1, sp, #12
	mov	r0, r8
	str	r3, [sp]
	bl	finish_wait
	b	.L3569
.L3575:
	mov	fp, r0
	add	r1, sp, #12
	mov	r0, r8
	bl	finish_wait
	b	.L3574
.L3587:
	str	r2, [sp]
	b	.L3569
.L3573:
	mvn	r3, #4
	str	r3, [sp]
	b	.L3569
.L3590:
	mvn	r3, #4
	str	r3, [sp]
	b	.L3583
.L3585:
	mvn	r3, #18
	str	r3, [sp]
	b	.L3569
	.fnend
	.size	acc_write, .-acc_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_write, %function
mtp_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #44
	sub	sp, sp, #44
	add	r3, r4, #88
	mov	r0, r3
	strd	r2, [sp]
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #104]
	cmp	r3, #3
	beq	.L3638
	cmp	r3, #0
	beq	.L3639
	mov	r3, #2
	ldr	r0, [sp, #4]
	str	r3, [r4, #104]
	bl	_raw_spin_unlock_irq
	ldr	r3, [r4, #92]
	ldrh	r3, [r3, #20]
	sub	r3, r3, #1
	tst	r3, r5
	moveq	r7, #1
	movne	r7, #0
	orrs	r3, r7, r5
	beq	.L3606
	mov	r3, #57344
	movw	r2, #:lower16:autoremove_wake_function
	movt	r3, 65535
	movt	r2, #:upper16:autoremove_wake_function
	str	r3, [sp, #8]
	str	r2, [sp, #12]
	b	.L3618
.L3608:
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	ldr	r9, [r2, #520]
	cmp	r9, r5
	movcs	r9, r5
	cmp	r9, #0
	bne	.L3640
.L3614:
	str	r9, [fp, #4]
	ldr	r0, [r4, #92]
	mov	r2, #208
	mov	r1, fp
	ldr	ip, [r0, #8]
	ldr	r10, [ip, #16]
	blx	r10
	cmp	r0, #0
	blt	.L3625
	sub	r5, r5, r9
	add	r8, r8, r9
	orrs	r3, r7, r5
	beq	.L3606
.L3618:
	ldr	r3, [r4, #104]
	cmp	r5, #0
	moveq	r7, #0
	cmp	r3, #2
	bne	.L3621
	add	r6, r4, #116
	mov	r0, r4
	mov	r1, r6
	bl	mtp_req_get
	subs	fp, r0, #0
	bne	.L3608
	ldr	r2, [r4, #104]
	cmp	r2, #2
	bne	.L3622
	ldr	r2, [sp, #8]
	mov	r3, sp
	str	fp, [sp, #20]
	str	fp, [sp, #24]
	ldr	r1, [sp, #12]
	add	r9, r4, #144
	str	fp, [sp, #28]
	and	r2, r3, r2
	add	r3, sp, #32
	str	fp, [sp, #32]
	mov	r10, r2
	str	fp, [sp, #36]
	ldr	r2, [r2, #12]
	str	r2, [sp, #24]
	str	r1, [sp, #28]
	str	r3, [sp, #32]
	str	r3, [sp, #36]
	b	.L3611
.L3641:
	bl	schedule
.L3611:
	mov	r2, #1
	add	r1, sp, #20
	mov	r0, r9
	bl	prepare_to_wait
	mov	r1, r6
	mov	r0, r4
	bl	mtp_req_get
	cmp	r0, #0
	bne	.L3609
	ldr	r3, [r4, #104]
	cmp	r3, #2
	bne	.L3623
	ldr	r3, [r10, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3641
	mov	r3, #65024
	movt	r3, 65535
	str	r3, [sp]
.L3610:
	add	r1, sp, #20
	mov	r0, r9
	bl	finish_wait
.L3606:
	ldr	r0, [sp, #4]
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #104]
	cmp	r3, #3
	beq	.L3626
	cmp	r3, #0
	movne	r3, #1
	strne	r3, [r4, #104]
.L3619:
	ldr	r0, [sp, #4]
	bl	_raw_spin_unlock_irq
.L3602:
	ldr	r0, [sp]
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3640:
	ldr	r2, [sp, #8]
	mov	r3, sp
	ldr	r0, [fp]
	and	r2, r3, r2
	ldr	r2, [r2, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r8, r9; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	bne	.L3615
	mov	r2, r9
	mov	r1, r8
	bl	__copy_from_user
	cmp	r0, #0
	beq	.L3614
	b	.L3616
.L3615:
	mov	r1, r9
	bl	__memzero
.L3616:
	mvn	r3, #13
	str	r3, [sp]
.L3617:
	mov	r2, fp
	mov	r1, r6
	mov	r0, r4
	bl	mtp_req_put
	b	.L3606
.L3609:
	mov	fp, r0
	add	r1, sp, #20
	mov	r0, r9
	bl	finish_wait
	b	.L3608
.L3623:
	str	r0, [sp]
	b	.L3610
.L3622:
	str	fp, [sp]
	b	.L3606
.L3626:
	mvn	r3, #124
	str	r3, [sp]
	b	.L3619
.L3621:
	mvn	r3, #4
	str	r3, [sp]
	b	.L3606
.L3625:
	mvn	r3, #4
	str	r3, [sp]
	b	.L3617
.L3639:
	mvn	r3, #18
	ldr	r0, [sp, #4]
	str	r3, [sp]
	bl	_raw_spin_unlock_irq
	b	.L3602
.L3638:
	mov	r3, #1
	mvn	r2, #124
	ldr	r0, [sp, #4]
	str	r3, [r4, #104]
	str	r2, [sp]
	bl	_raw_spin_unlock_irq
	b	.L3602
	.fnend
	.size	mtp_write, .-mtp_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_prepare_buffer, %function
ffs_prepare_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r4, r1, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L3644
	mov	r5, r0
	mov	r1, #208
	mov	r0, r4
	bl	__kmalloc
	subs	r6, r0, #0
	beq	.L3645
	mov	r2, r4
	mov	r1, r5
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L3650
.L3642:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3644:
	mov	r6, r4
	b	.L3642
.L3645:
	mvn	r6, #11
	b	.L3642
.L3650:
	mov	r0, r6
	mvn	r6, #13
	bl	kfree
	b	.L3642
	.fnend
	.size	ffs_prepare_buffer, .-ffs_prepare_buffer
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_get_drvinfo, %function
eth_get_drvinfo:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	movw	r1, #:lower16:.LC212
	mov	r5, r0
	movt	r1, #:upper16:.LC212
	str	r6, [sp, #8]
	add	r0, r4, #4
	mov	r2, #32
	str	lr, [sp, #12]
	bl	strlcpy
	movw	r1, #:lower16:.LC213
	add	r0, r4, #36
	movt	r1, #:upper16:.LC213
	mov	r2, #32
	bl	strlcpy
	ldr	r3, [r5, #1164]
	add	r0, r4, #68
	mov	r2, #32
	ldr	r1, [r3, #28]
	bl	strlcpy
	ldr	r3, [r5, #1164]
	add	r0, r4, #100
	mov	r2, #32
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, [r3, #76]
	cmp	r1, #0
	ldreq	r1, [r3, #40]
	b	strlcpy
	.fnend
	.size	eth_get_drvinfo, .-eth_get_drvinfo
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_qc_get_drvinfo, %function
eth_qc_get_drvinfo:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	movw	r1, #:lower16:.LC214
	mov	r5, r0
	movt	r1, #:upper16:.LC214
	str	r6, [sp, #8]
	add	r0, r4, #4
	mov	r2, #32
	str	lr, [sp, #12]
	bl	strlcpy
	movw	r1, #:lower16:.LC213
	add	r0, r4, #36
	movt	r1, #:upper16:.LC213
	mov	r2, #32
	bl	strlcpy
	ldr	r3, [r5, #1164]
	add	r0, r4, #68
	mov	r2, #32
	ldr	r1, [r3, #28]
	bl	strlcpy
	ldr	r3, [r5, #1164]
	add	r0, r4, #100
	mov	r2, #32
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, [r3, #76]
	cmp	r1, #0
	ldreq	r1, [r3, #40]
	b	strlcpy
	.fnend
	.size	eth_qc_get_drvinfo, .-eth_qc_get_drvinfo
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	pm_qos_store, %function
pm_qos_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	mov	r4, r3
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	add	r0, r0, #52
	mov	r1, r5
	mov	r2, #5
	bl	strlcpy
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	pm_qos_store, .-pm_qos_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_transports_store, %function
ecm_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L3661
	mov	r2, #50
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3662:
	.align	2
.L3661:
	.word	.LANCHOR1+2756
	.fnend
	.size	ecm_transports_store, .-ecm_transports_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_update_pid_and_serial_num, %function
usb_diag_update_pid_and_serial_num:
	.fnstart
	@ args = 0, pretend = 0, frame = 144
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r4, #:lower16:__stack_chk_guard
	movw	r5, #:lower16:.LANCHOR1
	movt	r4, #:upper16:__stack_chk_guard
	strd	r6, [sp, #8]
	mov	r2, #140
	ldr	r3, [r4]
	str	lr, [sp, #16]
	.pad #148
	sub	sp, sp, #148
	movt	r5, #:upper16:.LANCHOR1
	mov	r7, r0
	mov	r6, r1
	mov	r0, sp
	mov	r1, #0
	str	r3, [sp, #140]
	bl	memset
	ldr	r3, [r5, #2808]
	cmp	r3, #0
	beq	.L3669
	movw	r3, #10505
	cmp	r6, #0
	str	r7, [sp]
	movt	r3, 28995
	str	r3, [sp, #132]
	beq	.L3672
	movw	r3, #21364
	mov	r1, r6
	movt	r3, 24980
	mov	r2, #128
	add	r0, sp, #4
	str	r3, [sp, #136]
	bl	strlcpy
.L3666:
	ldr	r2, [r5, #2808]
	mov	r3, sp
	add	r0, sp, #140
	sub	r2, r2, #4
.L3667:
	ldr	r1, [r3], #4
	cmp	r3, r0
	str	r1, [r2, #4]!
	bne	.L3667
	mov	r0, #0
.L3663:
	ldr	r2, [sp, #140]
	ldr	r3, [r4]
	cmp	r2, r3
	bne	.L3673
	add	sp, sp, #148
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L3672:
	mov	r1, #128
	add	r0, sp, #4
	bl	__memzero
	b	.L3666
.L3669:
	mvn	r0, #18
	b	.L3663
.L3673:
	bl	__stack_chk_fail
	.fnend
	.size	usb_diag_update_pid_and_serial_num, .-usb_diag_update_pid_and_serial_num
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	clients_store, %function
clients_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L3676
	mov	r2, #32
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3677:
	.align	2
.L3676:
	.word	.LANCHOR1+2812
	.fnend
	.size	clients_store, .-clients_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_xport_names_store, %function
rmnet_xport_names_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L3680
	mov	r2, #50
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3681:
	.align	2
.L3680:
	.word	.LANCHOR1+2844
	.fnend
	.size	rmnet_xport_names_store, .-rmnet_xport_names_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_transports_store, %function
rmnet_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L3684
	mov	r2, #50
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3685:
	.align	2
.L3684:
	.word	.LANCHOR1+2896
	.fnend
	.size	rmnet_transports_store, .-rmnet_transports_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_transports_store, %function
mbim_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L3688
	mov	r2, #50
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3689:
	.align	2
.L3688:
	.word	.LANCHOR1+2948
	.fnend
	.size	mbim_transports_store, .-mbim_transports_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_send, %function
audio_send:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	add	r0, r0, #108
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	str	r0, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #92]
	cmp	r3, #0
	beq	.L3712
	ldr	r2, [r5, #120]
	mov	r1, r0
	ldr	r0, [sp, #4]
	cmp	r2, #0
	beq	.L3710
	ldr	r9, [r3, #212]
	movw	r4, #44100
	bl	_raw_spin_unlock_irqrestore
	add	r0, sp, #16
	adr	fp, .L3717
	ldrd	r10, [fp]
	bl	ktime_get
	ldr	r2, [sp, #16]
	mov	ip, #0
	ldr	r3, [r5, #136]
	mov	r1, ip
	mov	lr, ip
	ldr	r8, [r5, #140]
	ldr	r0, [sp, #20]
	subs	r6, r2, r3
	sbc	r7, r0, r8
	ldr	r8, [r5, #144]
	.syntax divided
@ 350 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_audio_source.c" 1
	umull	r2, r3, r10, r6
	mov	r2, #0
@ 0 "" 2
@ 350 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_audio_source.c" 1
	umlal	r3, r2, fp, r6
	umlal	r3, r1, r10, r7
	mov	r3, #0
	adds	r2, r1, r2
	adc	r3, r3, #0
	umlal	r2, r3, fp, r7
@ 0 "" 2
	.arm
	.syntax unified
	lsr	r0, r2, #18
	mov	r7, r3
	adr	fp, .L3717+8
	ldrd	r10, [fp]
	lsr	r2, r7, #18
	orr	r0, r0, r7, lsl #14
	mov	r6, #440
	mov	r7, #0
	umull	r0, r1, r0, r4
	mla	r1, r4, r2, r1
	.syntax divided
@ 352 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_audio_source.c" 1
	umull	r2, r3, r10, r0
	cmn	r2, r10
	adcs	r3, r3, fp
	adc	r2, ip, #0
@ 0 "" 2
@ 352 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_audio_source.c" 1
	umlal	r3, r2, fp, r0
	umlal	r3, lr, r10, r1
	mov	r3, #0
	adds	r2, lr, r2
	adc	r3, r3, #0
	umlal	r2, r3, fp, r1
@ 0 "" 2
	.arm
	.syntax unified
	lsr	r2, r2, #9
	mov	fp, r3
	lsr	r1, fp, #9
	orr	r2, r2, fp, lsl #23
	subs	r3, r2, r8
	str	r3, [sp, #8]
	ldr	r3, [r5, #148]
	sbc	r3, r1, r3
	str	r3, [sp, #12]
	ldrd	r10, [sp, #8]
	cmp	r6, r10
	sbcs	r3, r7, fp
	blt	.L3713
	ldrd	r2, [sp, #8]
	cmp	r2, #1
	sbcs	r3, r3, #0
	bge	.L3707
	mov	r10, #44
	mov	fp, #0
	b	.L3703
.L3716:
	sub	r8, r8, r1
	mov	r2, r8
	bl	memcpy
	cmp	r4, r8
	mov	r3, r8
	ble	.L3700
	ldr	r0, [r6]
	sub	r3, r4, r8
	mov	r2, r3
	ldr	r1, [r5, #112]
	str	r3, [sp, #8]
	add	r0, r0, r8
	bl	memcpy
	ldr	r3, [sp, #8]
	ldr	r2, [r5, #112]
	add	r2, r2, r3
	str	r2, [r5, #120]
.L3701:
	mov	r1, r7
	ldr	r0, [sp, #4]
	str	r4, [r6, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #104]
	mov	r2, #32
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L3714
	ldr	r0, [r9, #80]
	lsl	r4, r4, #3
	mov	r1, #0
	ldr	r3, [r5, #144]
	ldr	r2, [r5, #148]
	udiv	r4, r4, r0
	subs	r10, r10, r4
	sbc	fp, fp, r1
	adds	r4, r3, r4
	adc	r3, r2, r1
	cmp	r10, #1
	sbcs	r2, fp, #0
	str	r4, [r5, #144]
	str	r3, [r5, #148]
	blt	.L3715
.L3703:
	mov	r0, r5
	bl	audio_req_get
	mov	r6, r0
	ldr	r0, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #92]
	mov	r7, r0
	cmp	r3, #0
	beq	.L3711
	ldr	r1, [r5, #120]
	cmp	r1, #0
	beq	.L3711
	cmp	r6, #0
	beq	.L3711
	ldr	r4, [r9, #80]
	ldr	r8, [r5, #116]
	ldr	r0, [r6]
	mul	r4, r10, r4
	lsr	r4, r4, #3
	cmp	r4, #256
	movcs	r4, #256
	add	r3, r1, r4
	cmp	r8, r3
	bcc	.L3716
	mov	r2, r4
	str	r4, [sp, #8]
	bl	memcpy
	ldr	r3, [sp, #8]
.L3700:
	ldr	r1, [r5, #116]
	ldr	r2, [r5, #120]
	add	r3, r2, r3
	cmp	r3, r1
	str	r3, [r5, #120]
	ldrcs	r3, [r5, #112]
	strcs	r3, [r5, #120]
	b	.L3701
.L3711:
	ldr	r0, [sp, #4]
	mov	r1, r7
.L3710:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L3713:
	subs	r2, r2, #44
	mov	r10, #44
	sbc	r1, r1, #0
	mov	fp, #0
	str	r2, [r5, #144]
	str	r1, [r5, #148]
	b	.L3703
.L3712:
	mov	r1, r0
	ldr	r0, [sp, #4]
	b	.L3710
.L3715:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3707:
	ldrd	r10, [sp, #8]
	b	.L3703
.L3714:
	mov	r1, r0
	movw	r0, #:lower16:.LC215
	movt	r0, #:upper16:.LC215
	bl	printk
	mov	r1, r6
	mov	r0, r5
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	audio_req_put
.L3718:
	.align	3
.L3717:
	.word	-675924773
	.word	1125899906
	.word	-1924145349
	.word	-2095944041
	.fnend
	.size	audio_send, .-audio_send
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_playback_trigger, %function
audio_pcm_playback_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r3, [r0, #212]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r3, #200]
	cmp	r1, #6
	ldrls	pc, [pc, r1, asl #2]
	b	.L3724
.L3722:
	.word	.L3721
	.word	.L3723
	.word	.L3724
	.word	.L3724
	.word	.L3724
	.word	.L3721
	.word	.L3723
.L3723:
	mov	r0, sp
	mov	r6, #0
	bl	ktime_get
	ldrd	r2, [sp]
	mov	r7, #0
	mov	r0, r5
	strd	r2, [r5, #136]
	strd	r6, [r5, #144]
	bl	audio_send
	mov	r0, #0
.L3719:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L3721:
	add	r6, r5, #108
	mov	r4, #0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r4, [r5, #112]
	mov	r0, r6
	str	r4, [r5, #116]
	str	r4, [r5, #120]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	b	.L3719
.L3724:
	mvn	r0, #21
	b	.L3719
	.fnend
	.size	audio_pcm_playback_trigger, .-audio_pcm_playback_trigger
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_open, %function
audio_pcm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L3728
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	strd	r10, [sp, #20]
	str	lr, [sp, #28]
	ldrd	r2, [ip, #8]
	ldr	r8, [r0, #8]
	ldr	r6, [r0, #212]
	ldrd	r0, [ip]
	ldrd	r4, [ip, #16]
	ldrd	r10, [ip, #48]
	add	lr, r6, #208
	str	r8, [r6, #200]
	strd	r2, [r6, #216]
	ldrd	r2, [ip, #32]
	strd	r0, [r6, #208]
	ldrd	r0, [ip, #24]
	strd	r4, [r6, #224]
	ldrd	r4, [ip, #40]
	strd	r2, [r6, #240]
	ldrd	r2, [ip, #56]
	strd	r0, [r6, #232]
	mov	r0, r6
	strd	r4, [r6, #248]
	strd	r10, [lr, #48]
	strd	r2, [lr, #56]
	bl	snd_pcm_limit_hw_rates
	mov	r3, #2
	mov	r0, #0
	str	r3, [r6, #240]
	str	r7, [r8, #92]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldrd	r10, [sp, #20]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L3729:
	.align	2
.L3728:
	.word	.LANCHOR2+2160
	.fnend
	.size	audio_pcm_open, .-audio_pcm_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_unbind, %function
audio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	b	.L3731
.L3732:
	ldr	r5, [r6, #104]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L3731:
	mov	r0, r6
	bl	audio_req_get
	subs	r4, r0, #0
	bne	.L3732
	ldr	r0, [r6, #84]
	bl	snd_card_free_when_closed
	str	r4, [r6, #84]
	str	r4, [r6, #88]
	str	r4, [r6, #92]
	str	r4, [r6, #104]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	audio_unbind, .-audio_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_data_complete, %function
audio_data_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	mov	r0, r4
	bl	audio_req_put
	ldr	r3, [r4, #112]
	cmp	r3, #0
	beq	.L3734
	ldr	r6, [r5, #44]
	cmp	r6, #0
	bne	.L3734
	ldrd	r2, [r4, #124]
	ldr	r1, [r5, #48]
	add	r3, r3, r1
	cmp	r3, r2
	str	r3, [r4, #128]
	bcs	.L3741
.L3736:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	audio_send
.L3734:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3741:
	ldr	r0, [r4, #92]
	bl	snd_pcm_period_elapsed
	str	r6, [r4, #128]
	b	.L3736
	.fnend
	.size	audio_data_complete, .-audio_data_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_close, %function
gs_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #272]
	.pad #24
	sub	sp, sp, #24
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #12]
	cmp	r3, #1
	beq	.L3743
	cmp	r3, #0
	subne	r3, r3, #1
	strne	r3, [r4, #12]
	beq	.L3766
.L3745:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3766:
	movw	r0, #:lower16:.LC216
	movw	r1, #905
	movt	r0, #:upper16:.LC216
	bl	warn_slowpath_null
	b	.L3745
.L3743:
	ldr	r0, [r4, #4]
	mov	r2, #0
	str	r2, [r4, #12]
	strb	r3, [r4, #16]
	cmp	r0, r2
	beq	.L3756
	ldr	r3, [r0, #120]
	cmp	r3, #0
	beq	.L3748
	blx	r3
	ldr	r1, [r4, #92]
	ldr	r2, [r4, #100]
	ldr	r0, [r4, #104]
	add	r3, r0, r1
	sub	r3, r3, r2
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	bne	.L3752
.L3757:
	str	r0, [r4, #100]
.L3747:
	mov	ip, #0
	mov	r2, #1
	mov	r3, ip
	mov	r1, r2
	str	ip, [r5, #272]
	add	r0, r4, #20
	str	ip, [r4, #8]
	strb	ip, [r4, #16]
	bl	__wake_up
	b	.L3745
.L3748:
	ldr	r1, [r4, #92]
	ldr	r2, [r4, #100]
	ldr	r0, [r4, #104]
	add	r3, r0, r1
	sub	r3, r3, r2
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	beq	.L3757
.L3752:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	mov	r0, r4
	bl	gs_writes_finished
	cmp	r0, #0
	bne	.L3751
	mov	r3, sp
	str	r0, [sp, #4]
	movw	r2, #:lower16:autoremove_wake_function
	bic	r3, r3, #8128
	movt	r2, #:upper16:autoremove_wake_function
	bic	r3, r3, #63
	add	r8, r4, #108
	ldr	r1, [r3, #12]
	mov	r6, r3
	movw	r7, #1500
	add	r3, sp, #16
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	str	r3, [sp, #16]
	str	r3, [sp, #20]
.L3755:
	mov	r2, #1
	add	r1, sp, #4
	mov	r0, r8
	bl	prepare_to_wait
	mov	r0, r4
	bl	gs_writes_finished
	cmp	r0, #0
	mov	r0, r7
	bne	.L3753
	ldr	r3, [r6, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L3753
	bl	schedule_timeout
	subs	r7, r0, #0
	bne	.L3755
	mov	r0, r4
	bl	gs_writes_finished
.L3753:
	add	r1, sp, #4
	mov	r0, r8
	bl	finish_wait
.L3751:
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L3756
	ldr	r0, [r4, #104]
	b	.L3757
.L3756:
	ldr	r0, [r4, #96]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #96]
	b	.L3747
	.fnend
	.size	gs_close, .-gs_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_aliases_show, %function
ffs_aliases_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	ldr	r5, [r3, #2228]
	sub	r4, r5, #496
	mov	r0, r4
	bl	mutex_lock
	movw	r1, #:lower16:.LC84
	sub	r2, r5, #324
	mov	r0, r6
	movt	r1, #:upper16:.LC84
	bl	sprintf
	mov	r5, r0
	mov	r0, r4
	bl	mutex_unlock
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ffs_aliases_show, .-ffs_aliases_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_ctrlrequest, %function
acc_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r3, #:lower16:.LANCHOR1
	mov	r5, r0
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	ip, [r1]	@ zero_extendqisi2
	ldrb	r2, [r1, #1]	@ zero_extendqisi2
	ldr	r4, [r3, #2504]
	cmp	ip, #64
	beq	.L3828
	cmp	r2, #51
	cmpeq	ip, #192
	bne	.L3812
	ldr	r3, [r5, #4]
	mov	r6, #2
	mov	r1, #256
	add	r0, r4, #101
	ldr	r3, [r3]
	strh	r6, [r3]	@ movhi
	bl	__memzero
	add	r0, r4, #356
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r4, #612
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r4, #868
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r4, #1120
	mov	r1, #256
	add	r0, r0, #5
	bl	__memzero
	add	r0, r4, #1376
	mov	r1, #256
	add	r0, r0, #5
	bl	__memzero
	mov	r2, #0
	mov	r3, r6
	str	r2, [r4, #1644]
	str	r2, [r4, #1648]
.L3772:
	ldr	r1, [r5, #4]
	mov	r2, #32
	ldrb	r0, [r1, #26]	@ zero_extendqisi2
	bfc	r0, #1, #1
	strb	r0, [r1, #26]
	ldr	r1, [r5, #4]
	str	r3, [r1, #4]
	ldr	r3, [r5]
	ldr	r1, [r5, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L3829
.L3769:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L3828:
	cmp	r2, #53
	beq	.L3830
	cmp	r2, #52
	ldrh	r7, [r1, #4]	@ unaligned
	ldrh	r6, [r1, #6]	@ unaligned
	beq	.L3831
	cmp	r2, #58
	cmpeq	r7, #0
	ldrh	r8, [r1, #2]	@ unaligned
	moveq	r3, #1
	movne	r3, #0
	cmp	r6, #0
	movne	r3, #0
	cmp	r3, #0
	movne	r3, #0
	strne	r8, [r4, #1648]
	bne	.L3772
	cmp	r2, #54
	beq	.L3832
	cmp	r2, #55
	beq	.L3833
	cmp	r2, #56
	beq	.L3834
	cmp	r2, #57
	bne	.L3812
	add	r9, r4, #88
	add	r4, r4, #1760
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r4, #8]
	add	r4, r4, #8
	cmp	r4, r7
	bne	.L3809
	b	.L3806
.L3835:
	ldr	r7, [r7]
	cmp	r4, r7
	beq	.L3806
.L3809:
	ldr	r3, [r7, #16]
	cmp	r8, r3
	bne	.L3835
	mov	r1, r0
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L3827
	ldr	r1, [r5, #4]
	movw	r2, #:lower16:acc_complete_send_hid_event
	mov	r3, r6
	movt	r2, #:upper16:acc_complete_send_hid_event
	str	r7, [r1, #32]
	ldr	r1, [r5, #4]
	str	r2, [r1, #28]
	b	.L3772
.L3829:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC217
	movt	r1, #:upper16:.LC217
	ldr	r2, .L3842
	add	r0, r0, #32
	bl	dev_err
	b	.L3769
.L3831:
	str	r7, [r4, #1640]
	ldr	r1, [r0]
	movw	r2, #:lower16:acc_complete_set_string
	movt	r2, #:upper16:acc_complete_set_string
	mov	r3, r6
	ldr	r1, [r1, #4]
	str	r4, [r1]
	ldr	r1, [r0, #4]
	str	r2, [r1, #28]
	b	.L3772
.L3812:
.L3777:
	mvn	r4, #94
	b	.L3769
.L3830:
	mov	r3, #1
	mov	r0, #200
	str	r3, [r4, #1644]
	bl	msecs_to_jiffies
	movw	r1, #:lower16:system_wq
	add	r2, r4, #1696
	movt	r1, #:upper16:system_wq
	mov	r3, r0
	add	r2, r2, #4
	mov	r0, #4
	ldr	r1, [r1]
	bl	queue_delayed_work_on
	mov	r3, #0
	b	.L3772
.L3806:
	mov	r1, r0
	mov	r0, r9
	mvn	r4, #21
	bl	_raw_spin_unlock_irqrestore
	b	.L3769
.L3832:
	cmp	r7, #0
	beq	.L3827
	add	r9, r4, #88
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #1768]
	add	r2, r4, #1760
	mov	r10, r0
	add	r2, r2, #8
	cmp	r2, r6
	bne	.L3781
	b	.L3778
.L3836:
	ldr	r6, [r6]
	cmp	r2, r6
	beq	.L3778
.L3781:
	ldr	r3, [r6, #16]
	cmp	r8, r3
	bne	.L3836
	cmp	r6, #0
	beq	.L3778
.L3782:
	mov	r0, r6
	bl	__list_del_entry
	add	r1, r4, #1776
	mov	r0, r6
	ldr	r2, [r4, #1784]
	add	r1, r1, #8
	bl	__list_add
.L3783:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L3810
	mov	r2, #32
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L3788
.L3787:
	movw	r1, #32800
	mov	r0, r7
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r6, #20]
	beq	.L3837
	mov	r1, r4
	mov	r0, r6
	str	r4, [r6, #12]
	str	r8, [r6, #16]
	str	r7, [r6, #24]
	ldr	r2, [r1, #1776]!
	bl	__list_add
	mov	r1, r10
	mov	r0, r9
.L3826:
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:system_wq
	add	r2, r4, #1744
	movt	r3, #:upper16:system_wq
	add	r2, r2, #8
	ldr	r1, [r3]
	mov	r0, #4
	bl	queue_work_on
	mov	r3, #0
	b	.L3772
.L3833:
	add	r7, r4, #88
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #1768]
	add	r2, r4, #1760
	mov	r9, r0
	add	r2, r2, #8
	cmp	r2, r6
	bne	.L3794
	b	.L3791
.L3838:
	ldr	r6, [r6]
	cmp	r2, r6
	beq	.L3791
.L3794:
	ldr	r3, [r6, #16]
	cmp	r8, r3
	bne	.L3838
	cmp	r6, #0
	beq	.L3791
.L3795:
	mov	r0, r6
	bl	__list_del_entry
	add	r1, r4, #1776
	mov	r0, r6
	ldr	r2, [r4, #1784]
	add	r1, r1, #8
	bl	__list_add
	mov	r1, r9
	mov	r0, r7
	b	.L3826
.L3834:
	add	r10, r4, #88
	add	r4, r4, #1776
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r4]
	mov	r1, r0
	cmp	r4, r9
	bne	.L3804
	b	.L3801
.L3839:
	ldr	r9, [r9]
	cmp	r4, r9
	beq	.L3801
.L3804:
	ldr	r3, [r9, #16]
	cmp	r8, r3
	bne	.L3839
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	cmp	r9, #0
	beq	.L3827
	ldr	r3, [r9, #28]
	cmp	r3, r7
	bne	.L3827
	ldr	r3, [r9, #24]
	add	r7, r6, r7
	cmp	r7, r3
	bgt	.L3827
	ldr	r1, [r5, #4]
	movw	r2, #:lower16:acc_complete_set_hid_report_desc
	mov	r3, r6
	movt	r2, #:upper16:acc_complete_set_hid_report_desc
	str	r9, [r1, #32]
	ldr	r1, [r5, #4]
	str	r2, [r1, #28]
	b	.L3772
.L3810:
	mov	r6, #16
	b	.L3787
.L3801:
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
.L3827:
	mvn	r4, #21
	b	.L3769
.L3778:
	ldr	r6, [r4, #1776]
	add	r2, r4, #1776
	cmp	r2, r6
	bne	.L3786
	b	.L3783
.L3840:
	ldr	r6, [r6]
	cmp	r2, r6
	beq	.L3783
.L3786:
	ldr	r3, [r6, #16]
	cmp	r8, r3
	bne	.L3840
	cmp	r6, #0
	beq	.L3783
	b	.L3782
.L3791:
	ldr	r6, [r4, #1776]
	add	r2, r4, #1776
	cmp	r2, r6
	bne	.L3799
	b	.L3796
.L3841:
	ldr	r6, [r6]
	cmp	r2, r6
	beq	.L3796
.L3799:
	ldr	r3, [r6, #16]
	cmp	r8, r3
	bne	.L3841
	cmp	r6, #0
	bne	.L3795
.L3796:
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mvn	r4, #21
	b	.L3769
.L3837:
	mov	r0, r6
	bl	kfree
.L3788:
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	mvn	r4, #11
	b	.L3769
.L3843:
	.align	2
.L3842:
	.word	.LANCHOR2+2224
	.fnend
	.size	acc_ctrlrequest, .-acc_ctrlrequest
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	accessory_function_ctrlrequest, %function
accessory_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r1
	mov	r1, r2
	b	acc_ctrlrequest
	.fnend
	.size	accessory_function_ctrlrequest, .-accessory_function_ctrlrequest
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_rx_push, %function
gsmd_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #24
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	sub	r10, r0, #28
	str	lr, [sp, #32]
	ldr	r6, [r0, #44]
	.pad #20
	sub	sp, sp, #20
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r0, [r6]
	cmp	r0, #0
	beq	.L3848
	ldr	r5, [r4, #-8]
	sub	r9, r4, #8
	cmp	r9, r5
	beq	.L3848
	movw	r8, #:lower16:.LC218
	mov	fp, #0
	movt	r8, #:upper16:.LC218
	str	r8, [sp, #12]
.L3854:
	ldr	r3, [r5, #8]
	cmn	r3, #108
	beq	.L3848
	cmp	r3, #0
	bne	.L3881
.L3849:
	bl	smd_write_avail
	cmp	r0, #0
	beq	.L3848
	ldr	r8, [r5, #12]
	cmp	r8, #0
	beq	.L3850
	ldr	r2, [r4, #-20]
	ldr	r1, [r5, #-36]
	ldr	r0, [r6]
	cmp	r2, #0
	subne	r8, r8, r2
	addne	r1, r1, r2
	mov	r2, r8
	bl	smd_write
	cmp	r0, #0
	blt	.L3882
	cmp	r0, r8
	bne	.L3883
	ldr	r2, [r4, #140]
	add	r3, r2, r8
	str	r3, [r4, #140]
.L3850:
	mov	r0, r5
	str	fp, [r4, #-20]
	bl	__list_del_entry
	mov	r1, r4
	mov	r0, r5
	ldr	r2, [r1, #-16]!
	bl	__list_add
	ldr	r0, [r6]
	cmp	r0, #0
	beq	.L3848
	ldr	r5, [r4, #-8]
	cmp	r5, r9
	bne	.L3854
.L3848:
	mov	r0, r7
	bl	_raw_spin_unlock_irq
	mov	r0, r10
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gsmd_start_rx
.L3883:
	ldr	r3, [r4, #-20]
	add	r2, r3, r0
	str	r2, [r4, #-20]
	b	.L3848
.L3881:
	str	r3, [sp]
	mov	r2, r10
	ldr	r1, .L3884
	ldr	r0, [sp, #12]
	ldr	r3, [r4, #-28]
	bl	printk
	ldr	r0, [r6]
	b	.L3849
.L3882:
	mov	r2, r0
	movw	r0, #:lower16:.LC219
	ldr	r1, .L3884
	movt	r0, #:upper16:.LC219
	bl	printk
	b	.L3848
.L3885:
	.align	2
.L3884:
	.word	.LANCHOR2+2240
	.fnend
	.size	gsmd_rx_push, .-gsmd_rx_push
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_rx_push, %function
gs_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r3, r0, #60
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	sub	r9, r0, #12
	mov	r0, r3
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	str	r3, [sp]
	bl	_raw_spin_lock_irq
	ldr	r7, [r4, #-52]
	ldr	r5, [r4, #-12]
	cmp	r9, r5
	beq	.L3887
	mov	r8, #0
	movw	r3, #:lower16:.LC220
	movt	r3, #:upper16:.LC220
	mov	r10, r8
	mov	fp, r8
	str	r3, [sp, #4]
.L3896:
	cmp	r7, #0
	beq	.L3888
	ldr	r3, [r7, #156]
	tst	r3, #1
	bne	.L3889
	ldr	r2, [r5, #8]
	cmn	r2, #108
	moveq	r10, #1
	beq	.L3891
	cmp	r2, #0
	bne	.L3926
.L3891:
	ldr	r6, [r5, #12]
	cmp	r6, #0
	beq	.L3888
	ldr	r3, [r4, #-4]
	mov	r2, #0
	mov	r0, r7
	ldr	r1, [r5, #-36]
	cmp	r3, #0
	subne	r6, r6, r3
	addne	r1, r1, r3
	mov	r3, r6
	bl	tty_insert_flip_string_fixed_flag
	ldr	r3, [r4, #72]
	cmp	r0, #0
	movne	r8, #1
	cmp	r0, r6
	add	r3, r3, r0
	str	r3, [r4, #72]
	bne	.L3927
	str	fp, [r4, #-4]
.L3888:
	mov	r0, r5
	bl	__list_del_entry
	mov	r1, r4
	mov	r0, r5
	ldr	r2, [r1, #-28]!
	bl	__list_add
	ldr	r3, [r4, #-20]
	ldr	r5, [r4, #-12]
	sub	r3, r3, #1
	cmp	r9, r5
	str	r3, [r4, #-20]
	bne	.L3896
	cmp	r7, #0
	moveq	r8, #0
	andne	r8, r8, #1
	cmp	r8, #0
	bne	.L3903
.L3900:
	cmp	r10, #0
	bne	.L3902
.L3887:
	ldr	r3, [r4, #-56]
	cmp	r3, #0
	beq	.L3902
	ldr	r0, [sp]
	bl	gs_start_rx
.L3902:
	ldr	r0, [sp]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq
.L3927:
	ldr	r3, [r4, #-4]
	add	r0, r3, r0
	str	r0, [r4, #-4]
.L3889:
	cmp	r8, #0
	bne	.L3903
	ldr	r3, [r4, #-12]
	cmp	r9, r3
	beq	.L3900
	ldr	r3, [r7, #156]
	tst	r3, #1
	bne	.L3900
	movw	r0, #:lower16:.LC221
	ldrb	r1, [r4, #-43]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC221
	bl	printk
	b	.L3900
.L3903:
	mov	r0, r7
	bl	tty_flip_buffer_push
	ldr	r3, [r4, #-12]
	cmp	r9, r3
	beq	.L3900
	ldr	r3, [r7, #156]
	tst	r3, #1
	bne	.L3900
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, r4
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #2604]
	bl	queue_work_on
	b	.L3900
.L3926:
	ldrb	r1, [r4, #-43]	@ zero_extendqisi2
	ldr	r0, [sp, #4]
	bl	printk
	b	.L3891
	.fnend
	.size	gs_rx_push, .-gs_rx_push
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	remote_wakeup_show, %function
remote_wakeup_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #516]
	cmp	r3, #0
	moveq	r0, r3
	beq	.L3928
	ldr	r3, [r0, #508]
	movw	r2, #:lower16:.LC79
	mov	r1, #4096
	movt	r2, #:upper16:.LC79
	mov	r0, r4
	ldrb	r3, [r3, #-98]	@ zero_extendqisi2
	ubfx	r3, r3, #5, #1
	bl	snprintf
	mov	r0, #2
.L3928:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	remote_wakeup_show, .-remote_wakeup_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	state_show, %function
state_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	ldr	r4, [r0, #8]
	cmp	r4, #0
	movweq	r4, #:lower16:.LC223
	movteq	r4, #:upper16:.LC223
	beq	.L3933
	add	r7, r4, #60
	mov	r5, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r1, r0
	cmp	r3, #0
	movwne	r4, #:lower16:.LC222
	movtne	r4, #:upper16:.LC222
	beq	.L3939
.L3934:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L3933:
	movw	r0, #:lower16:.LC225
	mov	r2, r4
	ldr	r1, .L3940
	movt	r0, #:upper16:.LC225
	bl	printk
	movw	r2, #:lower16:.LC84
	mov	r3, r4
	ldrd	r4, [sp]
	mov	r0, r6
	movt	r2, #:upper16:.LC84
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	mov	r1, #4096
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	snprintf
.L3939:
	ldrb	r2, [r5, #48]	@ zero_extendqisi2
	movw	r3, #:lower16:.LC224
	movw	r4, #:lower16:.LC223
	movt	r3, #:upper16:.LC224
	movt	r4, #:upper16:.LC223
	cmp	r2, #0
	movne	r4, r3
	b	.L3934
.L3941:
	.align	2
.L3940:
	.word	.LANCHOR2+2256
	.fnend
	.size	state_show, .-state_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	pm_qos_show, %function
pm_qos_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	movw	r2, #:lower16:.LC84
	add	r3, r0, #52
	ldr	lr, [sp, #4]
	mov	r0, r4
	movt	r2, #:upper16:.LC84
	ldr	r4, [sp]
	mov	r1, #4096
	add	sp, sp, #8
	b	snprintf
	.fnend
	.size	pm_qos_show, .-pm_qos_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	enable_show, %function
enable_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	mov	r4, r0
	movw	r0, #:lower16:.LC226
	ldr	r1, .L3946
	ldrb	r2, [r4, #16]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC226
	bl	printk
	movw	r2, #:lower16:.LC79
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	mov	r0, r5
	movt	r2, #:upper16:.LC79
	mov	r1, #4096
	bl	snprintf
	ldrd	r4, [sp]
	mov	r0, #2
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3947:
	.align	2
.L3946:
	.word	.LANCHOR2+2268
	.fnend
	.size	enable_show, .-enable_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	functions_show, %function
functions_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	add	r3, r0, #24
	mov	r9, r0
	mov	r0, r3
	str	r3, [sp, #4]
	bl	mutex_lock
	ldr	r7, [r9, #508]!
	cmp	r9, r7
	beq	.L3960
	movw	r8, #:lower16:.LC227
	sub	r7, r7, #120
	mov	r5, r10
	movt	r8, #:upper16:.LC227
	mov	fp, #58
.L3949:
	mov	r6, r7
	ldr	r4, [r6, #112]!
	cmp	r6, r4
	sub	r4, r4, #4
	beq	.L3952
.L3953:
	ldr	r3, [r4]
	mov	r0, r5
	mov	r2, r8
	mov	r1, #4096
	ldr	r3, [r3]
	bl	snprintf
	ldr	r4, [r4, #4]
	add	r5, r5, r0
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L3953
.L3952:
	ldr	r7, [r7, #120]
	cmp	r9, r7
	sub	r7, r7, #120
	beq	.L3961
	cmp	r10, r5
	strbne	fp, [r5, #-1]
	b	.L3949
.L3961:
	ldr	r0, [sp, #4]
	bl	mutex_unlock
	cmp	r10, r5
	sub	r0, r5, r10
	beq	.L3948
	mov	r3, #10
	strb	r3, [r5, #-1]
.L3948:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3960:
	ldr	r0, [sp, #4]
	bl	mutex_unlock
	mov	r0, #0
	b	.L3948
	.fnend
	.size	functions_show, .-functions_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iSerial_show, %function
iSerial_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC228
	ldr	r3, .L3963
	movt	r2, #:upper16:.LC228
	mov	r1, #4096
	b	snprintf
.L3964:
	.align	2
.L3963:
	.word	.LANCHOR1+2240
	.fnend
	.size	iSerial_show, .-iSerial_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iProduct_show, %function
iProduct_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC228
	ldr	r3, .L3966
	movt	r2, #:upper16:.LC228
	mov	r1, #4096
	b	snprintf
.L3967:
	.align	2
.L3966:
	.word	.LANCHOR1+3000
	.fnend
	.size	iProduct_show, .-iProduct_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iManufacturer_show, %function
iManufacturer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC228
	ldr	r3, .L3969
	movt	r2, #:upper16:.LC228
	mov	r1, #4096
	b	snprintf
.L3970:
	.align	2
.L3969:
	.word	.LANCHOR1+3256
	.fnend
	.size	iManufacturer_show, .-iManufacturer_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceProtocol_show, %function
bDeviceProtocol_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC79
	ldrb	r3, [r3, #530]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC79
	mov	r1, #4096
	b	snprintf
	.fnend
	.size	bDeviceProtocol_show, .-bDeviceProtocol_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceSubClass_show, %function
bDeviceSubClass_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC79
	ldrb	r3, [r3, #529]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC79
	mov	r1, #4096
	b	snprintf
	.fnend
	.size	bDeviceSubClass_show, .-bDeviceSubClass_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceClass_show, %function
bDeviceClass_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC79
	ldrb	r3, [r3, #528]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC79
	mov	r1, #4096
	b	snprintf
	.fnend
	.size	bDeviceClass_show, .-bDeviceClass_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bcdDevice_show, %function
bcdDevice_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3976
	mov	r0, r2
	movw	r2, #:lower16:.LC229
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r2, #:upper16:.LC229
	mov	r1, #4096
	str	lr, [sp, #4]
	ldrh	r3, [r3, #12]
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
.L3977:
	.align	2
.L3976:
	.word	.LANCHOR0+524
	.fnend
	.size	bcdDevice_show, .-bcdDevice_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	idProduct_show, %function
idProduct_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3980
	mov	r0, r2
	movw	r2, #:lower16:.LC229
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r2, #:upper16:.LC229
	mov	r1, #4096
	str	lr, [sp, #4]
	ldrh	r3, [r3, #10]
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
.L3981:
	.align	2
.L3980:
	.word	.LANCHOR0+524
	.fnend
	.size	idProduct_show, .-idProduct_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	idVendor_show, %function
idVendor_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3984
	mov	r0, r2
	movw	r2, #:lower16:.LC229
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r2, #:upper16:.LC229
	mov	r1, #4096
	str	lr, [sp, #4]
	ldrh	r3, [r3, #8]
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
.L3985:
	.align	2
.L3984:
	.word	.LANCHOR0+524
	.fnend
	.size	idVendor_show, .-idVendor_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_pcm_show, %function
audio_source_pcm_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	ldr	ip, [r0, #4]
	movw	r2, #:lower16:.LC85
	mov	r1, #4096
	movt	r2, #:upper16:.LC85
	mov	r0, r4
	ldm	ip, {r3, ip}
	str	ip, [sp]
	bl	snprintf
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	audio_source_pcm_show, .-audio_source_pcm_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_inquiry_show, %function
mass_storage_inquiry_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC84
	mov	r0, r4
	movt	r2, #:upper16:.LC84
	ldr	r4, [sp]
	mov	r1, #4096
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r3, #96]
	add	r3, r3, #180
	b	snprintf
	.fnend
	.size	mass_storage_inquiry_show, .-mass_storage_inquiry_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_ethaddr_show, %function
ecm_ethaddr_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #24
	sub	sp, sp, #24
	bl	dev_get_drvdata
	ldr	ip, [r0, #4]
	movw	r2, #:lower16:.LC230
	mov	r1, #4096
	movt	r2, #:upper16:.LC230
	mov	r0, r4
	ldrb	lr, [ip, #5]	@ zero_extendqisi2
	ldrb	r3, [ip]	@ zero_extendqisi2
	str	lr, [sp, #16]
	ldrb	lr, [ip, #4]	@ zero_extendqisi2
	str	lr, [sp, #12]
	ldrb	lr, [ip, #3]	@ zero_extendqisi2
	str	lr, [sp, #8]
	ldrb	lr, [ip, #2]	@ zero_extendqisi2
	str	lr, [sp, #4]
	ldrb	ip, [ip, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	snprintf
	mov	r0, #18
	add	sp, sp, #24
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_ethaddr_show, .-ecm_ethaddr_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_transports_show, %function
ecm_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC84
	ldr	r3, .L3993
	movt	r2, #:upper16:.LC84
	mov	r1, #4096
	b	snprintf
.L3994:
	.align	2
.L3993:
	.word	.LANCHOR1+2756
	.fnend
	.size	ecm_transports_show, .-ecm_transports_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_max_pkt_per_xfer_show, %function
rndis_max_pkt_per_xfer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC79
	mov	r0, r4
	movt	r2, #:upper16:.LC79
	ldr	r4, [sp]
	mov	r1, #4096
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldrb	r3, [r3, #12]	@ zero_extendqisi2
	b	snprintf
	.fnend
	.size	rndis_max_pkt_per_xfer_show, .-rndis_max_pkt_per_xfer_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_vendorID_show, %function
rndis_vendorID_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC229
	mov	r0, r4
	movt	r2, #:upper16:.LC229
	ldr	r4, [sp]
	mov	r1, #4096
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r3, #8]
	b	snprintf
	.fnend
	.size	rndis_vendorID_show, .-rndis_vendorID_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_ethaddr_show, %function
rndis_ethaddr_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #24
	sub	sp, sp, #24
	bl	dev_get_drvdata
	ldr	ip, [r0, #4]
	movw	r2, #:lower16:.LC230
	mov	r1, #4096
	movt	r2, #:upper16:.LC230
	mov	r0, r4
	ldrb	lr, [ip, #5]	@ zero_extendqisi2
	ldrb	r3, [ip]	@ zero_extendqisi2
	str	lr, [sp, #16]
	ldrb	lr, [ip, #4]	@ zero_extendqisi2
	str	lr, [sp, #12]
	ldrb	lr, [ip, #3]	@ zero_extendqisi2
	str	lr, [sp, #8]
	ldrb	lr, [ip, #2]	@ zero_extendqisi2
	str	lr, [sp, #4]
	ldrb	ip, [ip, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	snprintf
	mov	r0, #18
	add	sp, sp, #24
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_ethaddr_show, .-rndis_ethaddr_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_wceis_show, %function
rndis_wceis_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC79
	mov	r0, r4
	movt	r2, #:upper16:.LC79
	mov	r1, #4096
	ldrb	r3, [r3, #269]	@ zero_extendqisi2
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_wceis_show, .-rndis_wceis_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_manufacturer_show, %function
rndis_manufacturer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC84
	mov	r0, r4
	movt	r2, #:upper16:.LC84
	ldr	r4, [sp]
	mov	r1, #4096
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	add	r3, r3, #13
	b	snprintf
	.fnend
	.size	rndis_manufacturer_show, .-rndis_manufacturer_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_xport_names_show, %function
rmnet_xport_names_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC84
	ldr	r3, .L4006
	movt	r2, #:upper16:.LC84
	mov	r1, #4096
	b	snprintf
.L4007:
	.align	2
.L4006:
	.word	.LANCHOR1+2844
	.fnend
	.size	rmnet_xport_names_show, .-rmnet_xport_names_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_transports_show, %function
rmnet_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC84
	ldr	r3, .L4009
	movt	r2, #:upper16:.LC84
	mov	r1, #4096
	b	snprintf
.L4010:
	.align	2
.L4009:
	.word	.LANCHOR1+2896
	.fnend
	.size	rmnet_transports_show, .-rmnet_transports_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_transports_show, %function
mbim_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC84
	ldr	r3, .L4012
	movt	r2, #:upper16:.LC84
	mov	r1, #4096
	b	snprintf
.L4013:
	.align	2
.L4012:
	.word	.LANCHOR1+2948
	.fnend
	.size	mbim_transports_show, .-mbim_transports_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ch_probe, %function
gsdio_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	movw	r10, #:lower16:.LANCHOR1
	movt	r10, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r9, [r10]
	str	lr, [sp, #28]
	ldr	r8, [r0]
	cmp	r9, #0
	beq	.L4015
	add	r4, r10, #4
	mov	r5, #0
	b	.L4018
.L4016:
	cmp	r9, r5
	beq	.L4015
.L4018:
	ldr	r6, [r4, #20]
	mov	r2, #9
	mov	r1, r8
	add	r5, r5, #1
	add	r4, r4, #104
	ldr	r3, [r6, #120]
	ldr	r0, [r3]
	bl	strncmp
	subs	r7, r0, #0
	bne	.L4016
	mov	r3, #1
	ldr	r4, [r10, #2608]
	movw	r0, #10000
	str	r3, [r6, #112]
	bl	msecs_to_jiffies
	mov	r3, r0
	mov	r1, r4
	mov	r0, #4
	add	r2, r6, #124
	bl	queue_delayed_work_on
.L4014:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4015:
	movw	r0, #:lower16:.LC231
	mov	r2, r8
	ldr	r1, .L4024
	movt	r0, #:upper16:.LC231
	mvn	r7, #18
	bl	printk
	b	.L4014
.L4025:
	.align	2
.L4024:
	.word	.LANCHOR2+2280
	.fnend
	.size	gsdio_ch_probe, .-gsdio_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ch_remove, %function
gsmd_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r7, [r4, #212]
	ldr	r8, [r0]
	cmp	r7, #0
	beq	.L4029
	add	r4, r4, #216
	mov	r5, #0
	b	.L4030
.L4028:
	cmp	r7, r5
	beq	.L4029
.L4030:
	ldr	r3, [r4, #20]
	mov	r2, #20
	mov	r1, r8
	add	r5, r5, #1
	add	r4, r4, #104
	ldr	r6, [r3, #72]
	ldr	r0, [r6, #4]
	bl	strncmp
	subs	r9, r0, #0
	bne	.L4028
	add	r4, r6, #8
	mov	r0, #1
	mov	r1, r4
	bl	_clear_bit
	mov	r0, r9
	mov	r1, r4
	bl	_clear_bit
	ldr	r0, [r6]
	cmp	r0, #0
	beq	.L4029
	bl	smd_close
	str	r9, [r6]
.L4029:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	gsmd_ch_remove, .-gsmd_ch_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ch_probe, %function
gsmd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	movw	fp, #:lower16:.LANCHOR1
	strd	r8, [sp, #16]
	movt	fp, #:upper16:.LANCHOR1
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r0]
	ldr	r8, [fp, #212]
	cmp	r8, #0
	beq	.L4040
	add	r4, fp, #216
	mov	r5, #0
	b	.L4043
.L4041:
	cmp	r5, r8
	beq	.L4040
.L4043:
	ldr	r6, [r4, #20]
	mov	r2, #20
	mov	r1, r9
	add	r5, r5, #1
	add	r4, r4, #104
	ldr	r7, [r6, #72]
	ldr	r0, [r7, #4]
	bl	strncmp
	subs	r10, r0, #0
	bne	.L4041
	add	r1, r7, #8
	mov	r0, #1
	add	r4, r6, #4
	bl	_set_bit
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #68]
	mov	r5, r0
	cmp	r3, #0
	beq	.L4042
	ldr	r7, [fp, #2612]
	mov	r0, r10
	bl	msecs_to_jiffies
	mov	r3, r0
	add	r2, r6, #76
	mov	r0, #4
	mov	r1, r7
	bl	queue_delayed_work_on
.L4042:
	mov	r1, r5
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
.L4040:
	mov	r0, #0
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
	.fnend
	.size	gsmd_ch_probe, .-gsmd_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_ch_probe, %function
gbam_data_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	ldr	r3, [r4, #424]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r0]
	cmp	r3, #0
	ble	.L4053
	movw	r0, #:lower16:.LC232
	mov	r2, #20
	movt	r0, #:upper16:.LC232
	bl	strncmp
	cmp	r0, #0
	beq	.L4059
.L4053:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4059:
	ldr	r5, [r4, #428]
	mov	r0, #2
	add	r1, r5, #20
	add	r6, r5, #4
	bl	_set_bit
	mov	r0, r6
	add	r7, r5, #8
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L4054
	add	r2, r5, #284
	mov	r0, #4
	ldr	r1, [r4, #2748]
	bl	queue_work_on
.L4054:
	mov	r0, r7
	bl	_raw_spin_unlock
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L4053
	.fnend
	.size	gbam_data_ch_probe, .-gbam_data_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_ch_remove, %function
grmnet_ctrl_smd_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r4, .L4074
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
	add	r7, r4, #504
.L4064:
	ldr	r5, [r4]
	mov	r2, #20
	mov	r1, r6
	add	r4, r4, #84
	cmp	r5, #0
	beq	.L4061
	ldr	r0, [r5, #4]
	bl	strncmp
	subs	r8, r0, #0
	beq	.L4073
.L4061:
	cmp	r4, r7
	bne	.L4064
.L4063:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4073:
	add	r4, r5, #8
	mov	r0, #1
	mov	r1, r4
	bl	_clear_bit
	mov	r0, r8
	mov	r1, r4
	bl	_clear_bit
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L4063
	bl	smd_close
	str	r8, [r5]
	b	.L4063
.L4075:
	.align	2
.L4074:
	.word	.LANCHOR1+512
	.fnend
	.size	grmnet_ctrl_smd_ch_remove, .-grmnet_ctrl_smd_ch_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_ch_probe, %function
grmnet_ctrl_smd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r4, .L4090
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
	add	r7, r4, #504
.L4080:
	ldr	r5, [r4]
	mov	r2, #20
	mov	r1, r6
	add	r4, r4, #84
	cmp	r5, #0
	beq	.L4077
	ldr	r0, [r5, #4]
	bl	strncmp
	subs	r8, r0, #0
	beq	.L4089
.L4077:
	cmp	r4, r7
	bne	.L4080
.L4079:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4089:
	add	r4, r5, #8
	mov	r0, #2
	mov	r1, r4
	add	r6, r5, #108
	bl	_clear_bit
	mov	r1, r4
	mov	r0, #1
	bl	_set_bit
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #104]
	mov	r4, r0
	cmp	r3, #0
	beq	.L4078
	movw	r1, #:lower16:.LANCHOR1
	mov	r3, r8
	movt	r1, #:upper16:.LANCHOR1
	add	r2, r5, #112
	mov	r0, #4
	ldr	r1, [r1, #2700]
	bl	queue_delayed_work_on
.L4078:
	mov	r1, r4
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L4079
.L4091:
	.align	2
.L4090:
	.word	.LANCHOR1+512
	.fnend
	.size	grmnet_ctrl_smd_ch_probe, .-grmnet_ctrl_smd_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_get_port_id, %function
ghsic_ctrl_get_port_id:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r4, #1020]
	cmp	r7, #0
	beq	.L4095
	mov	r6, r0
	add	r4, r4, #1024
	mov	r5, #0
	b	.L4094
.L4101:
	add	r5, r5, #1
	cmp	r5, r7
	beq	.L4095
.L4094:
	ldr	r3, [r4]
	mov	r2, #20
	mov	r1, r6
	add	r4, r4, #104
	ldr	r0, [r3, #64]
	bl	strncmp
	cmp	r0, #0
	bne	.L4101
.L4092:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4095:
	mvn	r5, #21
	b	.L4092
	.fnend
	.size	ghsic_ctrl_get_port_id, .-ghsic_ctrl_get_port_id
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_remove, %function
ghsic_ctrl_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r0]
	bl	ghsic_ctrl_get_port_id
	subs	r3, r0, #0
	blt	.L4103
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r1, [r2, #1020]
	cmp	r3, r1
	bcs	.L4103
	mov	r1, #104
	mla	r3, r1, r3, r2
	ldr	r4, [r3, #1024]
	add	r6, r4, #4
	add	r7, r4, #84
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #8]
	mov	r1, r0
	cmp	r5, #0
	beq	.L4116
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L4117
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #92]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #104]
	cmp	r3, #0
	beq	.L4110
.L4109:
	mov	r0, r5
	blx	r3
.L4110:
	mov	r1, r7
	mov	r0, #0
	bl	_clear_bit
.L4107:
	mov	r0, #1
	mov	r1, r7
	bl	_clear_bit
	mov	r0, #0
.L4102:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4117:
	str	r3, [r4, #92]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #120]
	cmp	r3, #0
	bne	.L4109
	b	.L4110
.L4116:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L4107
.L4103:
	movw	r0, #:lower16:.LC97
	mov	r2, r3
	ldr	r1, .L4118
	movt	r0, #:upper16:.LC97
	bl	printk
	mvn	r0, #21
	b	.L4102
.L4119:
	.align	2
.L4118:
	.word	.LANCHOR2+2296
	.fnend
	.size	ghsic_ctrl_remove, .-ghsic_ctrl_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_probe, %function
ghsic_ctrl_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r0]
	bl	ghsic_ctrl_get_port_id
	subs	r3, r0, #0
	blt	.L4121
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r1, [r2, #1020]
	cmp	r3, r1
	bcs	.L4121
	mov	r1, #104
	mov	r0, #1
	mla	r3, r1, r3, r2
	ldr	r4, [r3, #1024]
	add	r1, r4, #84
	add	r5, r4, #4
	bl	_set_bit
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #8]
	mov	r6, r0
	cmp	r3, #0
	beq	.L4124
	add	r2, r4, #16
	mov	r0, #4
	ldr	r1, [r4, #12]
	bl	queue_work_on
.L4124:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
.L4120:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4121:
	movw	r0, #:lower16:.LC97
	mov	r2, r3
	ldr	r1, .L4129
	movt	r0, #:upper16:.LC97
	bl	printk
	mvn	r0, #21
	b	.L4120
.L4130:
	.align	2
.L4129:
	.word	.LANCHOR2+2316
	.fnend
	.size	ghsic_ctrl_probe, .-ghsic_ctrl_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_get_port_id, %function
ghsic_data_get_port_id:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r3, #1440]
	cmp	r7, #0
	beq	.L4134
	mov	r6, r0
	ldr	r5, .L4141
	mov	r4, #0
	b	.L4133
.L4140:
	add	r4, r4, #1
	cmp	r4, r7
	beq	.L4134
.L4133:
	ldr	r3, [r5]
	mov	r2, #20
	mov	r1, r6
	add	r5, r5, #104
	ldr	r0, [r3, #160]
	bl	strncmp
	cmp	r0, #0
	bne	.L4140
.L4131:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4134:
	mvn	r4, #21
	b	.L4131
.L4142:
	.align	2
.L4141:
	.word	.LANCHOR1+1444
	.fnend
	.size	ghsic_data_get_port_id, .-ghsic_data_get_port_id
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_probe, %function
ghsic_data_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r0, [r0]
	movt	r4, #:upper16:.LANCHOR1
	bl	ghsic_data_get_port_id
	subs	r2, r0, #0
	ldr	r3, [r4, #1440]
	blt	.L4144
	cmp	r3, r2
	bls	.L4144
	mov	r3, #104
	mov	r0, #1
	mla	r2, r3, r2, r4
	ldr	r4, [r2, #1444]
	add	r1, r4, #180
	bl	_set_bit
	ldr	r0, [r4, #4]
	cmp	r0, #0
	beq	.L4143
	add	r2, r4, #88
	mov	r0, #4
	ldr	r1, [r4, #84]
	bl	queue_work_on
	mov	r0, #0
.L4143:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4144:
	movw	r0, #:lower16:.LC97
	ldr	r1, .L4149
	movt	r0, #:upper16:.LC97
	bl	printk
	mvn	r0, #21
	b	.L4143
.L4150:
	.align	2
.L4149:
	.word	.LANCHOR2+2336
	.fnend
	.size	ghsic_data_probe, .-ghsic_data_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_notify_modem, %function
gsmd_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR1
	movt	ip, #:upper16:.LANCHOR1
	ldr	r3, [ip, #212]
	cmp	r1, r3
	bcs	.L4184
	cmp	r0, #0
	beq	.L4185
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ands	r3, r2, #1
	str	r6, [sp, #8]
	movne	r3, #2
	tst	r2, #2
	str	lr, [sp, #12]
	mov	lr, #104
	orrne	r3, r3, #4
	mla	r1, lr, r1, ip
	ldr	r4, [r1, #236]
	ldr	r2, [r4, #160]
	cmp	r2, r3
	beq	.L4151
	ldr	r2, [r4, #72]
	str	r3, [r4, #160]
	ldr	r1, [r2, #8]
	tst	r1, #1
	beq	.L4151
	tst	r3, #2
	ldr	r2, [r2]
	bne	.L4186
.L4159:
	mov	r0, r2
	ldrd	r4, [sp]
	mvn	r2, r3
	ldr	r6, [sp, #8]
	mov	r1, r3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	smd_tiocmset
.L4151:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4186:
	mov	r5, r0
	mov	r0, r2
	bl	smd_tiocmget
	ands	r1, r0, #128
	movne	r1, #8
	tst	r0, #64
	orrne	r1, r1, #1
	tst	r0, #256
	orrne	r1, r1, #2
	str	r1, [r4, #164]
	ldr	r3, [r5, #136]
	cmp	r3, #0
	beq	.L4183
	ldr	r0, [r4, #68]
	blx	r3
.L4183:
	ldr	r2, [r4, #72]
	ldr	r3, [r4, #160]
	ldr	r2, [r2]
	b	.L4159
.L4184:
	movw	r0, #:lower16:.LC92
	mov	r2, r1
	ldr	r1, .L4187
	movt	r0, #:upper16:.LC92
	b	printk
.L4185:
	movw	r0, #:lower16:.LC93
	ldr	r1, .L4187
	movt	r0, #:upper16:.LC93
	b	printk
.L4188:
	.align	2
.L4187:
	.word	.LANCHOR2+2356
	.fnend
	.size	gsmd_notify_modem, .-gsmd_notify_modem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_ch_remove, %function
gbam_data_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	movw	fp, #:lower16:.LANCHOR1
	strd	r8, [sp, #16]
	movt	fp, #:upper16:.LANCHOR1
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r2, [fp, #424]
	cmp	r2, #0
	ble	.L4190
	mov	r4, #0
	movw	r6, #:lower16:.LC232
	mov	r5, r0
	mov	r9, r4
	mov	r8, r4
	movt	r6, #:upper16:.LC232
.L4195:
	mov	r2, #20
	mov	r0, r6
	ldr	r1, [r5]
	bl	strncmp
	cmp	r0, #0
	beq	.L4213
.L4191:
	ldr	r2, [fp, #424]
	add	r4, r4, #1
	cmp	r2, r4
	bgt	.L4195
.L4190:
	mov	r0, #0
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4213:
	mov	r2, #84
	ldr	r3, .L4214
	mul	r2, r2, r4
	ldr	r7, [r2, r3]
	add	r3, r7, #8
	add	r10, r7, #4
	mov	r0, r10
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	str	r0, [sp, #4]
	add	r0, r7, #8
	bl	_raw_spin_lock
	ldr	r2, [r7, #12]
	cmp	r2, #0
	ldrdne	r8, [r2, #84]
.L4192:
	add	r0, r7, #8
	bl	_raw_spin_unlock
	ldr	r1, [sp, #4]
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	cmp	r8, #0
	beq	.L4193
	ldr	r2, [r8, #8]
	ldr	r2, [r2, #36]
	cmp	r2, #0
	beq	.L4193
	mov	r0, r8
	blx	r2
.L4193:
	cmp	r9, #0
	beq	.L4194
	ldr	r2, [r9, #8]
	ldr	r2, [r2, #36]
	cmp	r2, #0
	beq	.L4194
	mov	r0, r9
	blx	r2
.L4194:
	mov	r0, r7
	add	r10, r7, #20
	bl	gbam_free_buffers
	ldr	r0, [r7, #24]
	bl	msm_bam_dmux_close
	mov	r2, #0
	mov	r1, r10
	mov	r0, #2
	str	r2, [r7, #240]
	bl	_clear_bit
	mov	r1, r10
	mov	r0, #1
	bl	_clear_bit
	b	.L4191
.L4215:
	.align	2
.L4214:
	.word	.LANCHOR1+428
	.fnend
	.size	gbam_data_ch_remove, .-gbam_data_ch_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_write_tobam, %function
gbam_data_write_tobam:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r0, #-4]
	.pad #12
	sub	sp, sp, #12
	add	r6, r5, #4
	str	r5, [sp, #4]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #12]
	mov	fp, r0
	cmp	r3, #0
	beq	.L4217
	movw	r10, #:lower16:.LANCHOR0
	sub	r7, r4, #20
	ldr	r3, [r4, #160]
	movt	r10, #:upper16:.LANCHOR0
	mov	r9, #0
	b	.L4218
.L4233:
	str	r3, [r4, #-12]
	ldrd	r2, [r5]
	str	r9, [r5]
	str	r9, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r2, [r4, #160]
	ldr	r3, [r4, #180]
	add	r2, r2, #1
	add	r3, r3, #1
	str	r2, [r4, #160]
	str	r3, [r4, #180]
	bl	_raw_spin_unlock_irqrestore
	mov	r1, r5
	ldr	r0, [r4, #-56]
	bl	msm_bam_dmux_write
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	r8, #0
	mov	fp, r0
	bne	.L4232
	ldr	r3, [r4, #160]
	ldr	r2, [r4, #200]
	cmp	r3, r2
	strhi	r3, [r4, #200]
.L4218:
	ldr	ip, [r10, #544]
	mov	r1, fp
	mov	r0, r6
	ldr	r2, [r4, #-12]
	cmp	ip, r3
	sub	r3, r2, #1
	bls	.L4219
	ldr	r5, [r4, #-20]
	cmp	r5, r7
	beq	.L4219
	cmp	r5, #0
	bne	.L4233
.L4219:
	mov	r1, fp
	mov	r0, r6
	str	r2, [sp]
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [sp]
	ldr	r3, [r10, #548]
	cmp	r3, r2
	bls	.L4216
	ldr	r3, [r4, #196]
	cmp	r3, #0
	beq	.L4224
	ldr	r3, [r4, #188]
	mov	r2, #0
	str	r2, [r4, #196]
	add	r3, r3, #1
	str	r3, [r4, #188]
.L4224:
	ldr	r0, [sp, #4]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gbam_start_rx
.L4216:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4232:
	ldr	r1, [r4, #160]
	mov	r0, r5
	ldr	r2, [r4, #168]
	ldr	r3, [r4, #180]
	sub	r1, r1, #1
	add	r2, r2, #1
	sub	r3, r3, #1
	str	r1, [r4, #160]
	str	r2, [r4, #168]
	str	r3, [r4, #180]
	bl	dev_kfree_skb_any
	ldr	r2, [r4, #-12]
	b	.L4219
.L4217:
	mov	r1, r0
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	gbam_data_write_tobam, .-gbam_data_write_tobam
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam2bam_resume_work, %function
gbam2bam_resume_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r2, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	mov	r1, r2
	ldrb	r0, [r0, #-203]	@ zero_extendqisi2
	bl	usb_bam_register_wake_cb
	ldr	r3, [r4, #-200]
	cmp	r3, #7
	beq	.L4237
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4237:
	sub	r0, r4, #196
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	usb_bam_resume
	.fnend
	.size	gbam2bam_resume_work, .-gbam2bam_resume_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam2bam_data_resume_work, %function
bam2bam_data_resume_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r2, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	mov	r1, r2
	ldrb	r0, [r0, #-163]	@ zero_extendqisi2
	bl	usb_bam_register_wake_cb
	ldr	r3, [r4, #-156]
	cmp	r3, #7
	beq	.L4241
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4241:
	sub	r0, r4, #152
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	usb_bam_resume
	.fnend
	.size	bam2bam_data_resume_work, .-bam2bam_data_resume_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam2bam_suspend_work, %function
gbam2bam_suspend_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r1, #:lower16:gbam_wake_cb
	sub	r5, r0, #316
	mov	r4, r0
	str	r6, [sp, #8]
	movt	r1, #:upper16:gbam_wake_cb
	str	lr, [sp, #12]
	mov	r2, r5
	ldrb	r0, [r0, #-187]	@ zero_extendqisi2
	bl	usb_bam_register_wake_cb
	ldr	r3, [r4, #-184]
	cmp	r3, #7
	beq	.L4245
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4245:
	movw	r1, #:lower16:gbam_stop
	movw	r0, #:lower16:gbam_start
	mov	r2, r5
	movt	r1, #:upper16:gbam_stop
	movt	r0, #:upper16:gbam_start
	bl	usb_bam_register_start_stop_cbs
	ldr	r6, [sp, #8]
	sub	r0, r4, #180
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	usb_bam_suspend
	.fnend
	.size	gbam2bam_suspend_work, .-gbam2bam_suspend_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam2bam_data_suspend_work, %function
bam2bam_data_suspend_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r1, #:lower16:bam_data_wake_cb
	sub	r5, r0, #200
	mov	r4, r0
	str	r6, [sp, #8]
	movt	r1, #:upper16:bam_data_wake_cb
	str	lr, [sp, #12]
	mov	r2, r5
	ldrb	r0, [r0, #-147]	@ zero_extendqisi2
	bl	usb_bam_register_wake_cb
	ldr	r3, [r4, #-140]
	cmp	r3, #7
	beq	.L4249
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4249:
	movw	r1, #:lower16:bam_data_stop
	movw	r0, #:lower16:bam_data_start
	mov	r2, r5
	movt	r1, #:upper16:bam_data_stop
	movt	r0, #:upper16:bam_data_start
	bl	usb_bam_register_start_stop_cbs
	ldr	r6, [sp, #8]
	sub	r0, r4, #136
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	usb_bam_suspend
	.fnend
	.size	bam2bam_data_suspend_work, .-bam2bam_data_suspend_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam2bam_connect_work, %function
gbam2bam_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	sub	r5, r0, #284
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #-152]
	.pad #4
	sub	sp, sp, #4
	cmp	r3, #6
	beq	.L4270
	cmp	r3, #7
	beq	.L4271
.L4253:
	sub	r7, r4, #280
	sub	r8, r4, #276
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r0, r8
	bl	_raw_spin_lock
	ldr	r3, [r4, #-272]
	cmp	r3, #0
	beq	.L4272
	ldr	r0, [r3, #88]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r4, #-172]
	beq	.L4273
	str	r5, [r0, #32]
	ldr	r2, [r4, #-172]
	movw	r3, #:lower16:gbam_endless_rx_complete
	movt	r3, #:upper16:gbam_endless_rx_complete
	mov	fp, #0
	movw	r10, #65439
	mov	r6, #32
	movt	r10, 65534
	movt	r6, 1
	str	r3, [r2, #28]
	ldr	r3, [r4, #-172]
	mov	r1, #32
	str	fp, [r3, #4]
	ldr	r2, [r4, #-172]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r3, [r4, #-172]
	ldr	r2, [r4, #-164]
	and	r2, r2, r10
	orr	r2, r2, r6
	str	r2, [r3, #52]
	ldr	r3, [r4, #-272]
	ldr	r0, [r3, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	str	r0, [r4, #-168]
	mov	r0, r8
	bl	_raw_spin_unlock
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-168]
	cmp	r3, fp
	beq	.L4269
	str	r5, [r3, #32]
	ldr	r2, [r4, #-168]
	movw	r3, #:lower16:gbam_endless_tx_complete
	movt	r3, #:upper16:gbam_endless_tx_complete
	mov	r0, r5
	str	r3, [r2, #28]
	ldr	r3, [r4, #-168]
	str	fp, [r3, #4]
	ldr	r2, [r4, #-168]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r2, [r4, #-168]
	ldr	r3, [r4, #-160]
	and	r3, r3, r10
	orr	r3, r3, r6
	str	r3, [r2, #52]
	bl	gbam_start_endless_rx
	mov	r0, r5
	bl	gbam_start_endless_tx
	ldr	r3, [r4, #-152]
	cmp	r3, #6
	beq	.L4274
.L4250:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4274:
	ldr	r3, [r4, #-284]
	cmp	r3, #0
	bne	.L4250
	movw	r0, #:lower16:gbam_peer_reset_cb
	mov	r1, r5
	movt	r0, #:upper16:gbam_peer_reset_cb
	bl	usb_bam_register_peer_reset_cb
	mov	r0, #1
	bl	usb_bam_client_ready
	subs	r2, r0, #0
	beq	.L4250
	ldr	r1, .L4276
	movw	r0, #:lower16:.LC237
	movt	r0, #:upper16:.LC237
.L4267:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L4270:
	bl	usb_bam_reset_complete
	sub	r1, r4, #164
	ldrb	r0, [r4, #-156]	@ zero_extendqisi2
	bl	usb_bam_connect
	subs	r2, r0, #0
	bne	.L4275
	sub	r1, r4, #160
	ldrb	r0, [r4, #-155]	@ zero_extendqisi2
	bl	usb_bam_connect
	subs	r2, r0, #0
	beq	.L4253
	movw	r0, #:lower16:.LC234
	ldr	r1, .L4276
	movt	r0, #:upper16:.LC234
	b	.L4267
.L4272:
	mov	r0, r8
	bl	_raw_spin_unlock
	mov	r1, r9
	mov	r0, r7
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L4273:
	mov	r0, r8
	bl	_raw_spin_unlock
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L4269:
	ldr	r1, .L4276
	movw	r0, #:lower16:.LC236
	movt	r0, #:upper16:.LC236
.L4268:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L4271:
	movw	r0, #:lower16:.LC235
	ldr	r1, .L4276
	movt	r0, #:upper16:.LC235
	b	.L4268
.L4275:
	movw	r0, #:lower16:.LC233
	ldr	r1, .L4276
	movt	r0, #:upper16:.LC233
	b	.L4267
.L4277:
	.align	2
.L4276:
	.word	.LANCHOR2+2376
	.fnend
	.size	gbam2bam_connect_work, .-gbam2bam_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam2bam_data_connect_work, %function
bam2bam_data_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	sub	r5, r0, #168
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #-108]
	cmp	r3, #7
	bne	.L4279
	ldr	r3, [r0, #-112]
	cmp	r3, #1
	beq	.L4310
	cmp	r3, #0
	mov	r2, #5
	mov	r3, #0
	str	r3, [r0, #-92]
	str	r2, [r0, #-80]
	beq	.L4311
.L4281:
	sub	r6, r4, #104
	mov	r0, r6
	bl	usb_bam_connect_ipa
	subs	r3, r0, #0
	bne	.L4309
	ldr	r3, [r4, #-112]
	mov	r2, #17
	mov	r1, #1
	str	r1, [r4, #-92]
	str	r2, [r4, #-80]
	cmp	r3, #0
	beq	.L4312
.L4283:
	mov	r0, r6
	bl	usb_bam_connect_ipa
	subs	r3, r0, #0
	bne	.L4309
	ldr	r3, [r4, #-112]
	cmp	r3, #1
	beq	.L4313
.L4285:
	ldr	r3, [r4, #-164]
	cmp	r3, #0
	beq	.L4314
	ldr	r0, [r3, #12]
	cmp	r0, #0
	beq	.L4315
	ldr	r3, [r0, #8]
	mov	r1, #208
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r4, #-132]
	beq	.L4278
	str	r5, [r0, #32]
	ldr	r2, [r4, #-132]
	movw	r3, #:lower16:bam_data_endless_rx_complete
	movt	r3, #:upper16:bam_data_endless_rx_complete
	mov	r8, #0
	movw	r7, #65439
	mov	r6, #32
	movt	r7, 65534
	movt	r6, 1
	str	r3, [r2, #28]
	ldr	r3, [r4, #-132]
	mov	r1, #208
	str	r8, [r3, #4]
	ldr	r2, [r4, #-132]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r2, [r4, #-132]
	ldr	r3, [r4, #-124]
	and	r3, r3, r7
	orr	r3, r3, r6
	str	r3, [r2, #52]
	ldr	r3, [r4, #-164]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, r8
	str	r0, [r4, #-128]
	beq	.L4278
	str	r5, [r0, #32]
	ldr	r2, [r4, #-128]
	movw	r3, #:lower16:bam_data_endless_tx_complete
	movt	r3, #:upper16:bam_data_endless_tx_complete
	mov	r0, r5
	str	r3, [r2, #28]
	ldr	r3, [r4, #-128]
	str	r8, [r3, #4]
	ldr	r2, [r4, #-128]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r2, [r4, #-128]
	ldr	r3, [r4, #-120]
	and	r7, r7, r3
	orr	r6, r7, r6
	str	r6, [r2, #52]
	bl	bam_data_start_endless_rx
	mov	r0, r5
	bl	bam_data_start_endless_tx
	ldr	r3, [r4, #-108]
	cmp	r3, #7
	beq	.L4278
	movw	r0, #:lower16:bam_data_peer_reset_cb
	mov	r1, r5
	movt	r0, #:upper16:bam_data_peer_reset_cb
	bl	usb_bam_register_peer_reset_cb
	mov	r0, #1
	bl	usb_bam_client_ready
	subs	r3, r0, #0
	bne	.L4316
.L4278:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4311:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #3512]
	str	r2, [r0, #-12]
	ldr	r3, [r3, #3532]
	str	r3, [r0, #-16]
	b	.L4281
.L4312:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #3516]
	str	r2, [r4, #-12]
	ldr	r3, [r3, #3532]
	str	r3, [r4, #-16]
	b	.L4283
.L4279:
	bl	usb_bam_reset_complete
	sub	r1, r4, #124
	ldrb	r0, [r4, #-116]	@ zero_extendqisi2
	bl	usb_bam_connect
	subs	r2, r0, #0
	bne	.L4317
	sub	r1, r4, #120
	ldrb	r0, [r4, #-115]	@ zero_extendqisi2
	bl	usb_bam_connect
	subs	r2, r0, #0
	beq	.L4285
	ldr	r1, .L4318
	movw	r0, #:lower16:.LC234
	movt	r0, #:upper16:.LC234
.L4308:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L4316:
	ldr	r2, .L4318
	movw	r0, #:lower16:.LC243
	movt	r0, #:upper16:.LC243
.L4306:
	ldrd	r4, [sp]
	mov	r1, r2
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L4314:
	ldr	r1, .L4318
	movw	r0, #:lower16:.LC241
	movt	r0, #:upper16:.LC241
.L4307:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L4309:
	movw	r0, #:lower16:.LC239
	ldr	r2, .L4318
	movt	r0, #:upper16:.LC239
	b	.L4306
.L4315:
	movw	r0, #:lower16:.LC242
	ldr	r1, .L4318
	movt	r0, #:upper16:.LC242
	b	.L4307
.L4313:
	ldr	r2, .L4318
	movw	r0, #:lower16:.LC240
	movt	r0, #:upper16:.LC240
.L4305:
	mov	r1, r2
	b	.L4308
.L4317:
	movw	r0, #:lower16:.LC233
	ldr	r1, .L4318
	movt	r0, #:upper16:.LC233
	b	.L4308
.L4310:
	movw	r0, #:lower16:.LC238
	ldr	r2, .L4318
	movt	r0, #:upper16:.LC238
	b	.L4305
.L4319:
	.align	2
.L4318:
	.word	.LANCHOR2+2400
	.fnend
	.size	bam2bam_data_connect_work, .-bam2bam_data_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_peer_reset_cb, %function
gbam_peer_reset_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #12]
	cmp	r3, #0
	beq	.L4321
	ldr	r2, [r3, #84]
	cmp	r2, #0
	beq	.L4321
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L4321
	ldr	r0, [r3, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	ldr	r0, [r3, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #12]
	mov	r3, #0
	mov	r0, r3
	ldr	r2, [r2, #84]
	str	r3, [r2]
	ldr	r2, [r4, #12]
	ldr	r2, [r2, #88]
	str	r3, [r2]
	bl	usb_bam_a2_reset
	subs	r2, r0, #0
	bne	.L4343
.L4322:
	ldr	r3, [r4, #12]
	ldr	r3, [r3, #84]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	ldr	r3, [r4, #12]
	bne	.L4344
	ldr	r3, [r3, #84]
	str	r4, [r3]
	ldr	r3, [r4, #12]
	ldr	r3, [r3, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	ldr	r3, [r4, #12]
	bne	.L4345
	ldr	r3, [r3, #88]
	mov	r0, r4
	str	r4, [r3]
	bl	gbam_start_endless_rx
	mov	r0, r4
	bl	gbam_start_endless_tx
.L4323:
	ldr	r3, [r4, #132]
	cmp	r3, #6
	beq	.L4346
.L4329:
	mov	r5, #0
.L4320:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4321:
	mov	r0, #0
	bl	usb_bam_a2_reset
	subs	r2, r0, #0
	beq	.L4323
	movw	r0, #:lower16:.LC244
	ldr	r1, .L4347
	movt	r0, #:upper16:.LC244
	bl	printk
	ldr	r3, [r4, #132]
	cmp	r3, #6
	bne	.L4329
.L4346:
	ldr	r5, [r4]
	cmp	r5, #0
	bne	.L4329
	mov	r1, r5
	mov	r0, r5
	bl	usb_bam_register_peer_reset_cb
	b	.L4320
.L4345:
	movw	r0, #:lower16:.LC246
	ldr	r2, [r3, #88]
	movt	r0, #:upper16:.LC246
	ldr	r1, .L4347
	bl	printk
	ldr	r3, [r4, #12]
	mov	r2, #0
	ldr	r3, [r3, #84]
	str	r2, [r3]
	b	.L4320
.L4344:
	movw	r0, #:lower16:.LC245
	ldr	r1, .L4347
	ldr	r2, [r3, #84]
	movt	r0, #:upper16:.LC245
	bl	printk
	b	.L4320
.L4343:
	movw	r0, #:lower16:.LC244
	ldr	r1, .L4347
	movt	r0, #:upper16:.LC244
	bl	printk
	b	.L4322
.L4348:
	.align	2
.L4347:
	.word	.LANCHOR2+2428
	.fnend
	.size	gbam_peer_reset_cb, .-gbam_peer_reset_cb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_peer_reset_cb, %function
bam_data_peer_reset_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, #0
	str	lr, [sp, #4]
	bl	usb_bam_a2_reset
	subs	r4, r0, #0
	bne	.L4353
	mov	r1, r4
	bl	usb_bam_register_peer_reset_cb
.L4349:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4353:
	ldr	r2, .L4354
	movw	r0, #:lower16:.LC247
	mov	r3, r4
	movt	r0, #:upper16:.LC247
	mov	r1, r2
	bl	printk
	b	.L4349
.L4355:
	.align	2
.L4354:
	.word	.LANCHOR2+2448
	.fnend
	.size	bam_data_peer_reset_cb, .-bam_data_peer_reset_cb
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_init, %function
gqti_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	push	{r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L4359
	mov	r2, #56
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	bne	.L4357
	movw	r0, #:lower16:.LC248
	mvn	r7, #11
	movt	r0, #:upper16:.LC248
	bl	printk
	b	.L4356
.L4359:
	mov	r4, #16
.L4357:
	mov	r5, #0
	add	r3, r4, #44
	ldr	r2, .L4364
	movw	r1, #:lower16:.LC249
	movw	r6, #:lower16:.LANCHOR1
	movt	r1, #:upper16:.LC249
	add	r0, r4, #32
	str	r5, [r4, #8]
	movt	r6, #:upper16:.LANCHOR1
	str	r5, [r4, #12]
	str	r5, [r4, #16]
	str	r5, [r4, #20]
	str	r5, [r4, #24]
	str	r5, [r4, #28]
	str	r3, [r4, #44]
	str	r3, [r4, #48]
	str	r5, [r4, #52]
	bl	__init_waitqueue_head
	ldr	r0, .L4364+4
	str	r4, [r6, #1016]
	bl	misc_register
	subs	r7, r0, #0
	beq	.L4356
	movw	r0, #:lower16:.LC250
	movt	r0, #:upper16:.LC250
	bl	printk
	mov	r0, r4
	bl	kfree
	str	r5, [r6, #1016]
.L4356:
	mov	r0, r7
	pop	{r4, r5, r6, r7, r8, pc}
.L4365:
	.align	2
.L4364:
	.word	.LANCHOR1+3540
	.word	.LANCHOR0+552
	.fnend
	.size	gqti_ctrl_init, .-gqti_ctrl_init
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	accessory_function_init, %function
accessory_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r3, #44]
	cmp	r0, #0
	beq	.L4370
	mov	r2, #1792
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L4376
.L4367:
	mov	r7, #0
	movw	r1, #:lower16:.LC251
	ldr	r2, .L4378
	movt	r1, #:upper16:.LC251
	add	r0, r4, #1664
	str	r7, [r4, #88]
	mov	r6, #65024
	movw	r5, #:lower16:.LANCHOR1
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC252
	add	r0, r4, #1664
	ldr	r2, .L4378
	movt	r1, #:upper16:.LC252
	add	r0, r0, #12
	bl	__init_waitqueue_head
	add	r0, r4, #1648
	add	r2, r4, #1760
	str	r7, [r4, #1652]
	add	r0, r0, #8
	add	ip, r4, #1776
	add	r1, r4, #1696
	movw	r3, #:lower16:acc_start_work
	add	ip, ip, #8
	add	lr, r4, #1776
	str	r0, [r4, #1656]
	add	r2, r2, #8
	add	r1, r1, #8
	str	r0, [r4, #1660]
	movt	r6, 65535
	movt	r3, #:upper16:acc_start_work
	add	r0, r4, #1712
	movt	r5, #:upper16:.LANCHOR1
	str	r6, [r4, #1700]
	add	r0, r0, #4
	str	r1, [r4, #1704]
	str	r1, [r4, #1708]
	mov	r1, r7
	str	r3, [r4, #1712]
	mov	r3, r7
	str	r2, [r4, #1768]
	str	r2, [r4, #1772]
	mov	r2, r7
	str	lr, [r4, #1776]
	str	lr, [r4, #1780]
	str	ip, [r4, #1784]
	str	ip, [r4, #1788]
	bl	init_timer_key
	movw	ip, #:lower16:delayed_work_timer_fn
	add	r1, r4, #1696
	ldr	r0, .L4378+4
	add	r3, r4, #1744
	movw	r2, #:lower16:acc_hid_work
	str	r6, [r4, #1752]
	add	r3, r3, #12
	movt	ip, #:upper16:delayed_work_timer_fn
	str	r4, [r5, #2504]
	add	r1, r1, #4
	movt	r2, #:upper16:acc_hid_work
	str	ip, [r4, #1732]
	str	r1, [r4, #1736]
	str	r3, [r4, #1756]
	str	r3, [r4, #1760]
	str	r2, [r4, #1764]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L4377
.L4366:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4370:
	mov	r4, #16
	b	.L4367
.L4376:
	mvn	r5, #11
	b	.L4366
.L4377:
.L4369:
	mov	r0, r4
	bl	kfree
	movw	r0, #:lower16:.LC253
	movt	r0, #:upper16:.LC253
	bl	printk
	b	.L4366
.L4379:
	.align	2
.L4378:
	.word	.LANCHOR1+3540
	.word	.LANCHOR0+588
	.fnend
	.size	accessory_function_init, .-accessory_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_function_init, %function
rndis_qc_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r0, [r3, #36]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4, #4]
	beq	.L4382
	mov	r2, #272
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	mvneq	r4, #11
	beq	.L4380
.L4382:
	movw	r0, #:lower16:.LC254
	ldr	r1, .L4390
	movt	r0, #:upper16:.LC254
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	ldr	r0, .L4390+4
	movt	r3, #:upper16:.LANCHOR1
	str	r2, [r3, #2508]
	bl	misc_register
	subs	r4, r0, #0
	bne	.L4389
.L4380:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4389:
	movw	r0, #:lower16:.LC255
	ldr	r1, .L4390
	movt	r0, #:upper16:.LC255
	bl	printk
	b	.L4380
.L4391:
	.align	2
.L4390:
	.word	.LANCHOR2+2472
	.word	.LANCHOR0+624
	.fnend
	.size	rndis_qc_function_init, .-rndis_qc_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_init, %function
mtp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r3, #32]
	.pad #8
	sub	sp, sp, #8
	cmp	r0, #0
	beq	.L4397
	mov	r2, #256
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L4404
.L4393:
	mov	r5, #0
	movw	r1, #:lower16:.LC251
	ldr	r2, .L4406
	movt	r1, #:upper16:.LC251
	add	r0, r4, #132
	str	r5, [r4, #88]
	movw	r6, #:lower16:.LANCHOR1
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC252
	ldr	r2, .L4406
	add	r0, r4, #144
	movt	r1, #:upper16:.LC252
	movt	r6, #:upper16:.LANCHOR1
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC256
	ldr	r2, .L4406
	add	r0, r4, #156
	movt	r1, #:upper16:.LC256
	bl	__init_waitqueue_head
	add	r0, r4, #116
	movw	r2, #:lower16:.LC257
	str	r5, [r4, #108]
	add	r3, r4, #124
	movt	r2, #:upper16:.LC257
	str	r5, [r4, #112]
	str	r0, [r4, #116]
	mov	r1, #10
	str	r0, [r4, #120]
	movw	r0, #:lower16:.LC228
	movt	r1, 2
	str	r3, [r4, #124]
	movt	r0, #:upper16:.LC228
	str	r3, [r4, #128]
	mov	r3, r5
	str	r5, [sp]
	str	r2, [sp, #4]
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #180]
	beq	.L4399
	mov	r2, #65024
	movw	r1, #:lower16:send_file_work
	ldr	r0, .L4406+4
	movw	r3, #:lower16:receive_file_work
	movt	r2, 65535
	str	r4, [r6, #2516]
	add	lr, r4, #188
	add	ip, r4, #204
	movt	r1, #:upper16:send_file_work
	movt	r3, #:upper16:receive_file_work
	str	r2, [r4, #184]
	str	lr, [r4, #188]
	str	lr, [r4, #192]
	str	r1, [r4, #196]
	str	r2, [r4, #200]
	str	ip, [r4, #204]
	str	ip, [r4, #208]
	str	r3, [r4, #212]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L4405
.L4392:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4397:
	mov	r4, #16
	b	.L4393
.L4404:
	mvn	r5, #11
	b	.L4392
.L4405:
.L4396:
	ldr	r0, [r4, #180]
	bl	destroy_workqueue
.L4395:
	mov	r3, #0
	mov	r0, r4
	str	r3, [r6, #2516]
	bl	kfree
	movw	r0, #:lower16:.LC258
	movt	r0, #:upper16:.LC258
	bl	printk
	b	.L4392
.L4399:
	mvn	r5, #11
	b	.L4395
.L4407:
	.align	2
.L4406:
	.word	.LANCHOR1+3540
	.word	.LANCHOR0+660
	.fnend
	.size	mtp_function_init, .-mtp_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_init, %function
adb_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:kmalloc_caches
	mov	r5, r0
	movt	r4, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r4, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5, #4]
	beq	.L4410
	mov	r2, #8
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5, #4]
	beq	.L4413
.L4410:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L4415
	mov	r2, #164
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L4413
.L4412:
	mov	r5, #0
	movw	r1, #:lower16:.LC251
	ldr	r2, .L4424
	movt	r1, #:upper16:.LC251
	add	r0, r4, #128
	str	r5, [r4, #88]
	movw	r6, #:lower16:.LANCHOR1
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC252
	ldr	r2, .L4424
	add	r0, r4, #140
	movt	r1, #:upper16:.LC252
	movt	r6, #:upper16:.LANCHOR1
	bl	__init_waitqueue_head
	add	r3, r4, #120
	mov	r2, #1
	str	r5, [r4, #108]
	str	r5, [r4, #112]
	ldr	r0, .L4424+4
	str	r5, [r4, #116]
	str	r3, [r4, #120]
	str	r3, [r4, #124]
	strb	r2, [r4, #161]
	str	r4, [r6, #2692]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L4423
.L4408:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4415:
	mov	r4, #16
	b	.L4412
.L4413:
	mvn	r5, #11
	b	.L4408
.L4423:
.L4414:
	mov	r0, r4
	bl	kfree
	movw	r0, #:lower16:.LC259
	movt	r0, #:upper16:.LC259
	bl	printk
	b	.L4408
.L4425:
	.align	2
.L4424:
	.word	.LANCHOR1+3540
	.word	.LANCHOR0+696
	.fnend
	.size	adb_function_init, .-adb_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_sdio_function_init, %function
rmnet_smd_sdio_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r3, #36]
	.pad #8
	sub	sp, sp, #8
	cmp	r0, #0
	beq	.L4433
	mov	r2, #428
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L4437
.L4427:
	movw	r2, #:lower16:.LC260
	mov	r5, #0
	movt	r2, #:upper16:.LC260
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	mov	r1, #10
	str	r5, [sp]
	movw	r0, #:lower16:.LC228
	str	r2, [sp, #4]
	mov	r3, r5
	movt	r1, 2
	movt	r0, #:upper16:.LC228
	str	r4, [r6, #2496]
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #380]
	beq	.L4435
	mov	r7, #65024
	movw	r3, #:lower16:rmnet_mux_disconnect_work
	str	r5, [r4, #176]
	movt	r3, #:upper16:rmnet_mux_disconnect_work
	movt	r7, 65535
	str	r5, [r4, #368]
	add	r0, r4, #388
	movw	r1, #:lower16:rmnet_mux_smd_data_rx_tlet
	str	r5, [r4, #372]
	movt	r1, #:upper16:rmnet_mux_smd_data_rx_tlet
	mov	r2, r4
	str	r5, [r4, #376]
	str	r7, [r4, #384]
	add	r8, r4, #104
	str	r0, [r4, #388]
	str	r0, [r4, #392]
	add	r0, r4, #152
	str	r3, [r4, #396]
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_mux_smd_data_tx_tlet
	mov	r2, r4
	add	r0, r4, #132
	movt	r1, #:upper16:rmnet_mux_smd_data_tx_tlet
	bl	tasklet_init
	movw	r1, #:lower16:.LC261
	ldr	r2, .L4439
	add	r0, r4, #180
	movt	r1, #:upper16:.LC261
	bl	__init_waitqueue_head
	movw	r2, #:lower16:rmnet_mux_sdio_data_rx_work
	movw	ip, #:lower16:rmnet_mux_open_sdio_work
	str	r8, [r4, #104]
	movt	r2, #:upper16:rmnet_mux_sdio_data_rx_work
	movt	ip, #:upper16:rmnet_mux_open_sdio_work
	str	r8, [r4, #108]
	add	r1, r4, #112
	add	r0, r4, #260
	add	r3, r4, #120
	str	r1, [r4, #112]
	str	r2, [r4, #252]
	add	r2, r4, #244
	str	r1, [r4, #116]
	mov	r1, r5
	str	r3, [r4, #120]
	str	r3, [r4, #124]
	mov	r3, r5
	str	r7, [r4, #240]
	str	r2, [r4, #244]
	str	r2, [r4, #248]
	mov	r2, r5
	str	r7, [r4, #256]
	add	r7, r4, #192
	str	r0, [r4, #260]
	str	r0, [r4, #264]
	add	r0, r4, #272
	str	ip, [r4, #268]
	bl	init_timer_key
	mov	r3, r7
	add	r1, r4, #216
	movw	r0, #:lower16:delayed_work_timer_fn
	add	ip, r4, #316
	add	lr, r4, #256
	add	r2, r4, #224
	str	r3, [r4, #192]
	movt	r0, #:upper16:delayed_work_timer_fn
	add	r7, r4, #200
	str	r3, [r4, #196]
	add	r3, r4, #340
	str	r7, [r4, #200]
	str	r1, [r4, #216]
	str	r1, [r4, #220]
	movw	r1, #:lower16:.LC262
	str	r7, [r4, #204]
	movt	r1, #:upper16:.LC262
	str	r5, [r4, #208]
	str	r5, [r4, #212]
	str	r2, [r4, #224]
	str	r2, [r4, #228]
	ldr	r2, .L4439
	str	r5, [r4, #232]
	str	r5, [r4, #236]
	str	r0, [r4, #288]
	add	r0, r4, #324
	str	lr, [r4, #292]
	str	ip, [r4, #316]
	str	ip, [r4, #320]
	str	r3, [r4, #340]
	str	r3, [r4, #344]
	bl	__init_waitqueue_head
	ldr	r0, .L4439+4
	bl	misc_register
	subs	r5, r0, #0
	bne	.L4430
	movw	r0, #:lower16:.LC263
	mov	r1, r5
	movt	r0, #:upper16:.LC263
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r6, #3540]
	beq	.L4426
	cmn	r0, #4096
	bhi	.L4426
	ldr	ip, .L4439+8
	movw	r0, #:lower16:.LC159
	mov	r3, r4
	movt	r0, #:upper16:.LC159
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L4438
.L4426:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4430:
	movw	r0, #:lower16:.LC264
	ldr	r1, .L4439+12
	movt	r0, #:upper16:.LC264
	bl	printk
	ldr	r0, [r4, #380]
	bl	destroy_workqueue
.L4429:
	mov	r0, r4
	bl	kfree
	b	.L4426
.L4433:
	mov	r4, #16
	b	.L4427
.L4435:
	mvn	r5, #11
	b	.L4429
.L4438:
	ldr	r0, [r6, #3540]
	bl	debugfs_remove
	str	r5, [r6, #3540]
	b	.L4426
.L4437:
	mvn	r5, #11
	b	.L4426
.L4440:
	.align	2
.L4439:
	.word	.LANCHOR1+3540
	.word	.LANCHOR0+732
	.word	.LANCHOR2+2516
	.word	.LANCHOR2+2488
	.fnend
	.size	rmnet_smd_sdio_function_init, .-rmnet_smd_sdio_function_init
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_cleanup, %function
gqti_ctrl_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, .L4443
	bl	misc_deregister
	ldr	r0, [r4, #1016]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #1016]
	pop	{r4, pc}
.L4444:
	.align	2
.L4443:
	.word	.LANCHOR0+552
	.fnend
	.size	gqti_ctrl_cleanup, .-gqti_ctrl_cleanup
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	accessory_function_cleanup, %function
accessory_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	ldr	r0, .L4447
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	bl	misc_deregister
	ldr	r0, [r4, #2504]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #2504]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4448:
	.align	2
.L4447:
	.word	.LANCHOR0+588
	.fnend
	.size	accessory_function_cleanup, .-accessory_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_function_cleanup, %function
ncm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r0
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, .L4451
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	misc_deregister
	ldr	r0, [r4, #3544]
	bl	kfree
	ldr	r0, [r5, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r5, #4]
	str	r3, [r4, #3544]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4452:
	.align	2
.L4451:
	.word	.LANCHOR0+768
	.fnend
	.size	ncm_function_cleanup, .-ncm_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_function_cleanup, %function
rndis_qc_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movw	r0, #:lower16:.LC265
	ldr	r1, .L4455
	movt	r0, #:upper16:.LC265
	str	lr, [sp, #4]
	bl	printk
	ldr	r0, .L4455+4
	bl	misc_deregister
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	ldr	r0, [r4, #4]
	movt	r3, #:upper16:.LANCHOR1
	str	r2, [r3, #2512]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
.L4456:
	.align	2
.L4455:
	.word	.LANCHOR2+2624
	.word	.LANCHOR0+624
	.fnend
	.size	rndis_qc_function_cleanup, .-rndis_qc_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_cleanup, %function
mtp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r5, [r4, #2516]
	str	lr, [sp, #12]
	cmp	r5, #0
	beq	.L4457
	ldr	r0, .L4460
	bl	misc_deregister
	ldr	r0, [r5, #180]
	bl	destroy_workqueue
	mov	r3, #0
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	str	r3, [r4, #2516]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	kfree
.L4457:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4461:
	.align	2
.L4460:
	.word	.LANCHOR0+660
	.fnend
	.size	mtp_function_cleanup, .-mtp_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_cleanup, %function
ccid_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR0
	str	lr, [sp, #4]
	add	r0, r4, #804
	bl	misc_deregister
	add	r0, r4, #840
	bl	misc_deregister
	movw	r3, #:lower16:.LANCHOR1
	ldr	r4, [sp]
	movt	r3, #:upper16:.LANCHOR1
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r0, [r3, #2220]
	b	kfree
	.fnend
	.size	ccid_function_cleanup, .-ccid_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_cleanup, %function
adb_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r0
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, .L4466
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	misc_deregister
	ldr	r0, [r4, #2692]
	bl	kfree
	mov	r3, #0
	ldr	r0, [r5, #4]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	str	r3, [r4, #2692]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	kfree
.L4467:
	.align	2
.L4466:
	.word	.LANCHOR0+696
	.fnend
	.size	adb_function_cleanup, .-adb_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_sdio_function_cleanup, %function
rmnet_smd_sdio_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r4, [r3, #2496]
	ldr	r0, [r3, #3540]
	bl	debugfs_remove_recursive
	ldr	r0, .L4470
	bl	misc_deregister
	ldr	r0, [r4, #128]
	bl	smd_close
	ldr	r0, [r4, #380]
	bl	destroy_workqueue
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
.L4471:
	.align	2
.L4470:
	.word	.LANCHOR0+732
	.fnend
	.size	rmnet_smd_sdio_function_cleanup, .-rmnet_smd_sdio_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_function_cleanup, %function
mbim_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r0, #:lower16:.LC266
	movw	r4, #:lower16:.LANCHOR1
	ldr	r1, .L4478
	movt	r0, #:upper16:.LC266
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	printk
	ldr	r3, [r4, #3548]
	cmp	r3, #0
	beq	.L4473
	ldr	r0, [r4, #3552]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #3552]
.L4473:
	mov	r5, #0
	ldr	r0, .L4478+4
	str	r5, [r4, #3548]
	bl	misc_deregister
	ldr	r6, [sp, #8]
	str	r5, [r4, #2592]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4479:
	.align	2
.L4478:
	.word	.LANCHOR2+2644
	.word	.LANCHOR0+876
	.fnend
	.size	mbim_function_cleanup, .-mbim_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_io_complete, %function
ffs_epfile_io_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L4480
	ldr	r2, [r3, #4]
	cmp	r2, #0
	beq	.L4480
	ldr	r2, [r1, #32]
	cmp	r2, #0
	beq	.L4480
	ldr	r2, [r1, #44]
	cmp	r2, #0
	ldreq	r2, [r1, #48]
	str	r2, [r3, #24]
	ldr	r0, [r1, #32]
	b	complete
.L4480:
	bx	lr
	.fnend
	.size	ffs_epfile_io_complete, .-ffs_epfile_io_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_transmit, %function
f_midi_transmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #88]
	.pad #20
	sub	sp, sp, #20
	cmp	r3, #0
	str	r3, [sp, #4]
	beq	.L4492
	cmp	r1, #0
	mov	r10, r0
	mov	r5, r1
	beq	.L4539
.L4494:
	mov	r1, #0
	movw	r3, #:lower16:f_midi_complete
	movt	r3, #:upper16:f_midi_complete
	mov	r2, r1
	add	r7, r10, #100
	add	r9, r10, #228
	str	r1, [r5, #4]
	add	fp, r10, #164
	str	r3, [r5, #28]
.L4526:
	ldr	r4, [r9, #4]!
	ldr	r6, [r7, #4]!
	cmp	r4, #0
	beq	.L4495
	ldr	r3, [r4, #4]
	cmp	r6, #0
	cmpne	r3, #0
	beq	.L4495
	ldr	r1, [r10, #336]
	add	r3, r2, #3
	cmp	r1, r3
	bls	.L4495
.L4525:
	mov	r2, #1
	add	r1, sp, #15
	mov	r0, r6
	bl	snd_rawmidi_transmit
	cmp	r0, #1
	bne	.L4540
	ldrb	r3, [r4, #8]	@ zero_extendqisi2
	ldrb	r1, [sp, #15]	@ zero_extendqisi2
	lsl	r3, r3, #4
	cmp	r1, #247
	uxtb	r3, r3
	bhi	.L4541
	cmp	r1, #239
	bls	.L4499
	sub	r2, r1, #241
	cmp	r2, #6
	ldrls	pc, [pc, r2, asl #2]
	b	.L4500
.L4502:
	.word	.L4501
	.word	.L4503
	.word	.L4501
	.word	.L4507
	.word	.L4507
	.word	.L4505
	.word	.L4506
.L4506:
	ldrb	r2, [r4, #9]	@ zero_extendqisi2
	cmp	r2, #5
	beq	.L4508
	cmp	r2, #6
	bne	.L4542
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	orr	r3, r3, #7
	mvn	r0, #8
	ldrb	ip, [r4, #11]	@ zero_extendqisi2
	ldr	r2, [r5]
	ldr	r1, [r5, #4]
.L4537:
	strb	r3, [r2, r1]
	add	r3, r2, r1
	add	r1, r1, #4
	strb	lr, [r3, #1]
	strb	ip, [r3, #2]
	strb	r0, [r3, #3]
	str	r1, [r5, #4]
.L4507:
	mov	r3, #0
	strb	r3, [r4, #9]
	ldr	r2, [r5, #4]
.L4498:
	ldr	r3, [r10, #336]
	add	r1, r2, #3
	cmp	r1, r3
	bcc	.L4525
.L4495:
	cmp	r7, fp
	bne	.L4526
.L4545:
	cmp	r2, #0
	beq	.L4527
	ldr	r0, [sp, #4]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
.L4492:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4503:
	mov	r2, #2
	mvn	r3, #13
	strb	r2, [r4, #9]
	strb	r3, [r4, #10]
	ldr	r2, [r5, #4]
	b	.L4498
.L4501:
	mov	r3, #1
	strb	r3, [r4, #9]
	strb	r1, [r4, #10]
	ldr	r2, [r5, #4]
	b	.L4498
.L4500:
	mov	r2, #5
	mvn	r3, #15
	strb	r2, [r4, #9]
	strb	r3, [r4, #10]
	ldr	r2, [r5, #4]
	b	.L4498
.L4505:
	ldr	r2, [r5]
	orr	r3, r3, #5
	mov	r0, #0
	ldr	r1, [r5, #4]
	mvn	ip, #9
	strb	r3, [r2, r1]
	add	r3, r2, r1
	add	r1, r1, #4
	strb	ip, [r3, #1]
	strb	r0, [r3, #2]
	strb	r0, [r3, #3]
	str	r1, [r5, #4]
	strb	r0, [r4, #9]
	ldr	r2, [r5, #4]
	b	.L4498
.L4541:
	ldm	r5, {r0, r2}
	orr	r3, r3, #15
	mov	ip, #0
	strb	r3, [r0, r2]
	add	r0, r0, r2
	add	r2, r2, #4
	strb	r1, [r0, #1]
	strb	ip, [r0, #2]
	strb	ip, [r0, #3]
	str	r2, [r5, #4]
	b	.L4498
.L4499:
	tst	r1, #128
	bne	.L4543
	ldrb	r2, [r4, #9]	@ zero_extendqisi2
	sub	r2, r2, #1
	cmp	r2, #5
	ldrls	pc, [pc, r2, asl #2]
	b	.L4538
.L4515:
	.word	.L4514
	.word	.L4516
	.word	.L4517
	.word	.L4518
	.word	.L4519
	.word	.L4520
.L4520:
	ldr	r0, [r5]
	orr	r3, r3, #4
	ldr	r8, [r5]
	ldr	r2, [r5, #4]
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	ldrb	ip, [r4, #11]	@ zero_extendqisi2
	add	r0, r0, r2
	strb	r3, [r8, r2]
	add	r2, r2, #4
	mov	r3, #4
	strb	lr, [r0, #1]
	strb	ip, [r0, #2]
	strb	r1, [r0, #3]
	str	r2, [r5, #4]
	strb	r3, [r4, #9]
.L4538:
	ldr	r2, [r5, #4]
	b	.L4498
.L4519:
	mov	r3, #6
	strb	r3, [r4, #9]
	strb	r1, [r4, #11]
	ldr	r2, [r5, #4]
	b	.L4498
.L4518:
	mov	r3, #5
	strb	r3, [r4, #9]
	strb	r1, [r4, #10]
	ldr	r2, [r5, #4]
	b	.L4498
.L4517:
	ldrb	ip, [r4, #10]	@ zero_extendqisi2
	cmp	ip, #239
	bls	.L4544
	orr	r3, r3, #3
	mov	r8, r3
	mov	r3, #0
	strb	r3, [r4, #9]
.L4524:
	ldrd	r2, [r5]
	ldrb	lr, [r4, #11]	@ zero_extendqisi2
	add	r0, r2, r3
	strb	r8, [r2, r3]
	add	r2, r3, #4
	strb	ip, [r0, #1]
	strb	lr, [r0, #2]
	strb	r1, [r0, #3]
	str	r2, [r5, #4]
	b	.L4498
.L4516:
	mov	r3, #3
	strb	r3, [r4, #9]
	strb	r1, [r4, #11]
	ldr	r2, [r5, #4]
	b	.L4498
.L4514:
	ldrb	ip, [r4, #10]	@ zero_extendqisi2
	mov	lr, #0
	cmp	ip, #239
	movhi	r2, #0
	orrls	r3, r3, ip, lsr #4
	orrhi	r3, r3, #2
	strbhi	r2, [r4, #9]
	ldm	r5, {r0, r2}
	strb	r3, [r0, r2]
	add	r0, r0, r2
	add	r2, r2, #4
	strb	ip, [r0, #1]
	strb	r1, [r0, #2]
	strb	lr, [r0, #3]
	str	r2, [r5, #4]
	b	.L4498
.L4543:
	add	r3, r1, #64
	strb	r1, [r4, #10]
	uxtb	r3, r3
	cmp	r3, #31
	movhi	r3, #2
	strbls	r0, [r4, #9]
	strbhi	r3, [r4, #9]
	ldr	r2, [r5, #4]
	b	.L4498
.L4540:
	mov	r3, #0
	cmp	r7, fp
	str	r3, [r4, #4]
	ldr	r2, [r5, #4]
	bne	.L4526
	b	.L4545
.L4542:
	cmp	r2, #4
	bne	.L4507
	ldr	r2, [r5]
	orr	r3, r3, #5
	mov	r0, #0
	ldr	r1, [r5, #4]
	mvn	ip, #8
	strb	r3, [r2, r1]
	add	r3, r2, r1
	add	r1, r1, #4
	strb	ip, [r3, #1]
	strb	r0, [r3, #2]
	strb	r0, [r3, #3]
	str	r1, [r5, #4]
	b	.L4507
.L4544:
	mov	r2, #2
	orr	r3, r3, ip, lsr #4
	strb	r2, [r4, #9]
	mov	r8, r3
	b	.L4524
.L4508:
	orr	r3, r3, #6
	mvn	ip, #8
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	mov	r0, #0
	ldr	r2, [r5]
	ldr	r1, [r5, #4]
	b	.L4537
.L4539:
	mov	r0, r3
	ldr	r1, [r10, #336]
	bl	midi_alloc_ep_req
	subs	r5, r0, #0
	bne	.L4494
	ldr	r0, [r10, #84]
	movw	r1, #:lower16:.LC267
	movt	r1, #:upper16:.LC267
	add	r0, r0, #32
	bl	dev_err
	b	.L4492
.L4527:
	ldr	r0, [r5]
	bl	kfree
	ldr	r0, [sp, #4]
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	b	.L4492
	.fnend
	.size	f_midi_transmit, .-f_midi_transmit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_in_tasklet, %function
f_midi_in_tasklet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r1, #0
	b	f_midi_transmit
	.fnend
	.size	f_midi_in_tasklet, .-f_midi_in_tasklet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_handle_out_data, %function
f_midi_handle_out_data:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r1]
	ldr	r2, [r1, #48]
	cmp	r2, #3
	bls	.L4547
	movw	r8, #:lower16:.LANCHOR2
	add	r4, r5, #1
	mov	r7, r0
	mov	r6, r1
	movt	r8, #:upper16:.LANCHOR2
	rsb	r5, r5, #6
	b	.L4550
.L4549:
	add	r3, r5, r4
	add	r4, r4, #4
	cmp	r2, r3
	bls	.L4547
.L4550:
	ldrb	r3, [r4, #-1]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L4549
	ldr	r1, [r7]
	lsr	ip, r3, #4
	add	r0, ip, #42
	ldr	r0, [r1, r0, lsl #2]
	cmp	r0, #0
	beq	.L4549
	ldr	r1, [r1, #296]
	lsr	r1, r1, ip
	tst	r1, #1
	beq	.L4549
	and	r3, r3, #15
	mov	r1, r4
	add	r3, r8, r3
	ldrb	r2, [r3, #2660]	@ zero_extendqisi2
	bl	snd_rawmidi_receive
	ldr	r2, [r6, #48]
	add	r3, r5, r4
	add	r4, r4, #4
	cmp	r2, r3
	bhi	.L4550
.L4547:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	f_midi_handle_out_data, .-f_midi_handle_out_data
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_complete, %function
f_midi_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r1, #44]
	ldr	ip, [r2, #20]
	cmn	r3, #103
	ldr	r6, [ip, #24]
	bgt	.L4564
	cmn	r3, #104
	bge	.L4565
	cmn	r3, #108
	bne	.L4563
.L4565:
	ldr	r3, [r2, #92]
	cmp	r3, r4
	beq	.L4574
.L4568:
	ldr	r0, [r5]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r3, [r3, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	bx	r3	@ indirect register sibling call
.L4564:
	cmp	r3, #0
	bne	.L4563
	ldr	r3, [r2, #92]
	cmp	r3, r0
	beq	.L4575
	ldr	r3, [r2, #88]
	cmp	r3, r0
	beq	.L4576
.L4563:
	ldr	r3, [r4, #8]
	mov	r2, #32
	mov	r1, r5
	mov	r0, r4
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L4577
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4577:
	ldr	ip, [r6]
	movw	r1, #:lower16:.LC268
	ldr	r3, [r5, #4]
	movt	r1, #:upper16:.LC268
	str	r0, [sp]
	ldr	r2, [r4, #4]
	add	r0, ip, #32
	bl	dev_err
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldr	r3, [r3, #24]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	bx	r3
.L4574:
	mov	r1, r5
	mov	r0, r4
	bl	f_midi_handle_out_data
	b	.L4568
.L4575:
	bl	f_midi_handle_out_data
	b	.L4563
.L4576:
	mov	r0, r2
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	f_midi_transmit
	.fnend
	.size	f_midi_complete, .-f_midi_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_in_trigger, %function
f_midi_in_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #12]
	ldr	r2, [r0, #28]
	add	r3, r3, #58
	ldr	r2, [r2, #200]
	ldr	r3, [r2, r3, lsl #2]
	cmp	r3, #0
	bxeq	lr
	cmp	r1, #0
	str	r1, [r3, #4]
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	add	r1, r2, #304
	mov	r0, #0
	add	r4, r2, #300
	str	lr, [sp, #4]
	bl	_test_and_set_bit
	cmp	r0, #0
	beq	.L4589
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4589:
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	__tasklet_hi_schedule
	.fnend
	.size	f_midi_in_trigger, .-f_midi_in_trigger
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	tx_complete, %function
tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r3, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0]
	cmp	r4, #0
	bne	.L4591
.L4632:
	ldr	r3, [r3, #8]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L4591:
	ldr	ip, [r4, #4]
	cmp	ip, #0
	beq	.L4632
	ldr	r3, [r1, #44]
	mov	r5, r1
	ldr	r7, [r4, #8]
	cmn	r3, #104
	beq	.L4613
	cmp	r3, #0
	beq	.L4595
	cmn	r3, #108
	beq	.L4613
	ldr	r3, [r7, #252]
	add	r3, r3, #1
	str	r3, [r7, #252]
	ldr	r1, [r4, #8]
.L4594:
	ldr	r3, [r1, #236]
	add	r6, r4, #16
	add	r8, r4, #20
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r1, #236]
	bl	_raw_spin_lock
	mov	r2, r8
	add	r0, r5, #36
	ldr	r1, [r4, #24]
	bl	__list_add
	ldr	r3, [r4, #4]
	ldr	r9, [r5, #32]
	ldrb	r3, [r3, #124]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L4612
	cmp	r9, #0
	beq	.L4633
	ldr	r0, [r4, #48]
	cmp	r0, #0
	beq	.L4612
	movw	r1, #32800
	bl	__kmalloc
	mov	r3, #0
	str	r0, [r5]
	str	r3, [r5, #32]
.L4607:
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r0, r9
	bl	dev_kfree_skb_any
.L4606:
	ldr	r3, [r4, #8]
	ldr	r0, [r3, #164]
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	beq	.L4634
.L4590:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4595:
	ldrb	r1, [r1, #26]	@ zero_extendqisi2
	ldr	r3, [r5, #4]
	ldr	r0, [r7, #244]
	tst	r1, #2
	subeq	r3, r3, #1
	add	r3, r3, r0
	str	r3, [r7, #244]
	ldr	r1, [r4, #8]
	b	.L4594
.L4612:
	mov	r3, #0
	str	r3, [r5]
	b	.L4607
.L4634:
	ldr	r4, [r3, #576]
	add	r1, r4, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L4590
	ldr	r0, [r4, #4]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__netif_schedule
.L4613:
	mov	r1, r7
	b	.L4594
.L4633:
	ldr	r3, [r4, #40]
	sub	r3, r3, #1
	str	r3, [r4, #40]
	str	r9, [r5, #4]
	ldr	r5, [r4, #20]
	cmp	r8, r5
	beq	.L4631
	ldr	r3, [r4, #4]
	mov	r0, r5
	ldr	r9, [r3, #88]
	bl	list_del
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r3, [r5, #-32]
	cmp	r3, #0
	beq	.L4600
	ldr	r2, [r4, #4]
	mov	r1, r3
	ldrb	r0, [r2, #104]	@ zero_extendqisi2
	cmp	r0, #0
	beq	.L4601
	ldr	r2, [r2, #112]
	cmp	r3, r2
	beq	.L4635
.L4601:
	ldrb	r2, [r5, #-10]	@ zero_extendqisi2
	orr	r2, r2, #2
	strb	r2, [r5, #-10]
.L4602:
	ldrb	r2, [r5, #-10]	@ zero_extendqisi2
	tst	r2, #2
	beq	.L4603
	ldrb	r0, [r4, #124]	@ zero_extendqisi2
	cmp	r0, #0
	bne	.L4603
	ldrh	ip, [r9, #20]
	sdiv	r0, r3, ip
	mls	r0, ip, r0, r3
	cmp	r0, #0
	bne	.L4603
	bfi	r2, r0, #1, #1
	add	r1, r3, #1
	strb	r2, [r5, #-10]
.L4603:
	str	r1, [r5, #-32]
	ldr	r3, [r9, #8]
	mov	r2, #32
	mov	r0, r9
	sub	r1, r5, #36
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L4636
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r4, #40]
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #40]
	bl	_raw_spin_unlock
	movw	r3, #:lower16:jiffies
	movt	r3, #:upper16:jiffies
	ldr	r3, [r3]
	str	r3, [r7, #604]
	b	.L4606
.L4600:
	mov	r0, r6
.L4630:
	bl	_raw_spin_lock
	mov	r2, r8
	mov	r0, r5
	ldr	r1, [r4, #24]
	bl	__list_add
.L4631:
	mov	r0, r6
	bl	_raw_spin_unlock
	b	.L4606
.L4635:
	ldrh	r0, [r9, #20]
	sdiv	r2, r3, r0
	mls	r2, r0, r2, r3
	cmp	r2, #0
	bne	.L4601
	ldrb	r0, [r5, #-10]	@ zero_extendqisi2
	bfi	r0, r2, #1, #1
	strb	r0, [r5, #-10]
	b	.L4602
.L4636:
	movw	r0, #:lower16:.LC269
	ldr	r1, .L4637
	movt	r0, #:upper16:.LC269
	bl	printk
	mov	r3, #0
	mov	r0, r6
	str	r3, [r5, #-32]
	b	.L4630
.L4638:
	.align	2
.L4637:
	.word	.LANCHOR2+2676
	.fnend
	.size	tx_complete, .-tx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_qc_open, %function
eth_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r0, #1160]
	ldr	r5, [r0, #164]
	ubfx	r5, r5, #2, #1
	cmp	r5, #0
	beq	.L4654
.L4641:
	add	r5, r4, #1152
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r0, [r4, #1156]
	cmp	r0, #0
	beq	.L4643
	ldr	r3, [r0, #112]
	cmp	r3, #0
	beq	.L4643
	blx	r3
.L4643:
	mov	r0, r5
	bl	_raw_spin_unlock_irq
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4654:
	bl	netif_carrier_off
	ldr	r0, [r4, #1160]
	bl	netif_carrier_on
	ldr	r3, [r4, #1160]
	mov	r0, r5
	ldr	r5, [r3, #576]
	add	r1, r5, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L4641
	ldr	r0, [r5, #4]
	bl	__netif_schedule
	b	.L4641
	.fnend
	.size	eth_qc_open, .-eth_qc_open
	.align	2
	.global	rndis_rm_hdr
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_rm_hdr, %function
rndis_rm_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR1
	mov	r8, r2
	movt	r9, #:upper16:.LANCHOR1
	str	lr, [sp, #24]
	ldr	ip, [r1, #80]
	ldr	r3, [r9, #3560]
	.pad #12
	sub	sp, sp, #12
	cmp	ip, r3
	strhi	ip, [r9, #3560]
	bhi	.L4657
	cmp	ip, #0
	beq	.L4671
.L4657:
	cmp	ip, #43
	bls	.L4659
	ldr	r3, [r4, #172]
	ldr	r6, [r3, #4]	@ unaligned
	ldr	r1, [r3, #8]	@ unaligned
	ldr	r5, [r3, #12]	@ unaligned
	ldr	lr, [r3]	@ unaligned
	cmp	ip, r6
	bcc	.L4660
	add	r3, r5, r1
	add	r3, r3, #8
	cmp	r3, r6
	bhi	.L4660
	cmp	lr, #1
	bne	.L4661
	mov	r7, #0
	b	.L4662
.L4676:
	cmp	r2, r5
	beq	.L4666
	bl	skb_clone
	sub	r1, r6, #44
	subs	r6, r0, #0
	mov	r0, r4
	beq	.L4675
	bl	skb_pull
	mov	r1, r5
	mov	r0, r6
	bl	skb_trim
	mov	r1, r6
	mov	r0, r8
	bl	skb_queue_tail
	ldr	ip, [r4, #80]
	cmp	ip, #0
	beq	.L4658
	cmp	ip, #43
	bls	.L4659
	ldr	r0, [r4, #172]
	ldr	r6, [r0, #4]	@ unaligned
	ldr	r1, [r0, #8]	@ unaligned
	ldr	r5, [r0, #12]	@ unaligned
	ldr	lr, [r0]	@ unaligned
	cmp	ip, r6
	add	r2, r1, r5
	bcc	.L4660
	add	r2, r2, #8
	cmp	r2, r6
	bhi	.L4660
	cmp	lr, #1
	bne	.L4661
.L4662:
	add	r1, r1, #8
	mov	r0, r4
	bl	skb_pull
	ldr	r3, [r4, #80]
	mov	r1, #32
	mov	r0, r4
	add	r7, r7, #1
	cmp	r3, r5
	sub	r2, r3, #1
	bne	.L4676
.L4666:
	mov	r1, r5
	mov	r0, r4
	bl	skb_trim
.L4658:
	ldr	r3, [r9, #3564]
	mov	r0, r8
	mov	r1, r4
	cmp	r3, r7
	strlt	r7, [r9, #3564]
	bl	skb_queue_tail
	mov	r0, #0
.L4655:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L4671:
	mov	r7, ip
	b	.L4658
.L4660:
	movw	r0, #:lower16:.LC271
	mov	r3, r1
	stm	sp, {r5, ip}
	mov	r2, r6
	mov	r1, lr
	movt	r0, #:upper16:.LC271
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #74
	b	.L4655
.L4659:
	movw	r0, #:lower16:.LC270
	mov	r1, ip
	mov	r2, #44
	movt	r0, #:upper16:.LC270
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #21
	b	.L4655
.L4675:
	movw	r0, #:lower16:.LC272
	ldr	r1, .L4677
	movt	r0, #:upper16:.LC272
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #11
	b	.L4655
.L4661:
	movw	r0, #:lower16:.LC271
	mov	r3, r1
	stm	sp, {r5, ip}
	mov	r2, r6
	mov	r1, lr
	movt	r0, #:upper16:.LC271
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #21
	b	.L4655
.L4678:
	.align	2
.L4677:
	.word	.LANCHOR2+2688
	.fnend
	.size	rndis_rm_hdr, .-rndis_rm_hdr
	.align	2
	.global	rndis_qc_rm_hdr
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_rm_hdr, %function
rndis_qc_rm_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #172]
	ldr	r3, [r5]	@ unaligned
	cmp	r3, #1
	bne	.L4684
	ldr	r1, [r5, #8]	@ unaligned
	mov	r0, r4
	mov	r6, r2
	add	r1, r1, #8
	bl	skb_pull
	cmp	r0, #0
	beq	.L4685
	ldr	r1, [r5, #12]	@ unaligned
	mov	r0, r4
	bl	skb_trim
	mov	r0, r6
	mov	r1, r4
	bl	skb_queue_tail
	mov	r0, #0
.L4679:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4684:
	mov	r0, r1
	bl	dev_kfree_skb_any
	mvn	r0, #21
	b	.L4679
.L4685:
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #74
	b	.L4679
	.fnend
	.size	rndis_qc_rm_hdr, .-rndis_qc_rm_hdr
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_proc_open, %function
rndis_proc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #-20]
	mov	r0, r1
	movw	r1, #:lower16:rndis_proc_show
	movt	r1, #:upper16:rndis_proc_show
	ldr	r2, [r3, #44]
	b	single_open
	.fnend
	.size	rndis_proc_open, .-rndis_proc_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_proc_show, %function
rndis_proc_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r1, #:lower16:.LC274
	movw	r3, #:lower16:.LC273
	strd	r6, [sp, #8]
	movt	r1, #:upper16:.LC274
	movt	r3, #:upper16:.LC273
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	ip, [r0, #76]
	.pad #44
	sub	sp, sp, #44
	ldrb	r4, [ip, #1]	@ zero_extendqisi2
	ldr	lr, [ip, #4]
	ldrb	r2, [ip]	@ zero_extendqisi2
	cmp	r4, #0
	moveq	r3, r1
	cmp	lr, #2
	movwhi	r7, #:lower16:.LC275
	movthi	r7, #:upper16:.LC275
	bhi	.L4689
	movw	r1, #:lower16:.LANCHOR2
	movt	r1, #:upper16:.LANCHOR2
	add	r1, r1, lr, lsl #2
	ldr	r7, [r1, #2704]
.L4689:
	ldr	r8, [ip, #8]
	ldr	r1, [ip, #16]
	cmp	r1, #0
	bne	.L4693
	ldr	r1, [ip, #12]
	mov	r6, #100
	movw	r5, #:lower16:.LC277
	movt	r5, #:upper16:.LC277
	mul	r6, r6, r1
.L4690:
	movw	lr, #:lower16:.LANCHOR1
	ldrb	r4, [ip, #36]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC278
	movt	lr, #:upper16:.LANCHOR1
	movt	r1, #:upper16:.LC278
	ldr	r9, [lr, #3560]
	ldr	lr, [lr, #3564]
	str	r9, [sp, #28]
	str	r4, [sp, #32]
	str	lr, [sp, #36]
	ldr	lr, [ip, #28]
	ldr	lr, [lr, #356]
	add	lr, lr, #80
	mul	lr, r4, lr
	str	lr, [sp, #24]
	ldr	lr, [ip, #40]
	str	lr, [sp, #20]
	ldr	ip, [ip, #32]
	stm	sp, {r7, r8}
	str	r6, [sp, #8]
	str	r5, [sp, #12]
	str	ip, [sp, #16]
	bl	seq_printf
	mov	r0, #0
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L4693:
	movw	r5, #:lower16:.LC276
	mov	r6, #0
	movt	r5, #:upper16:.LC276
	b	.L4690
	.fnend
	.size	rndis_proc_show, .-rndis_proc_show
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	get_ether_addr, %function
get_ether_addr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, r9, r10, lr}
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	subs	r5, r0, #0
	mov	r4, r1
	subne	r6, r1, #1
	addne	r9, r1, #5
	bne	.L4699
.L4700:
	mov	r0, r4
	mov	r1, #6
	bl	get_random_bytes
	ldrb	r3, [r4]	@ zero_extendqisi2
	mov	r0, #1
	bic	r3, r3, #1
	orr	r3, r3, #2
	strb	r3, [r4]
	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
.L4699:
	ldrb	r3, [r5]	@ zero_extendqisi2
	mov	r8, r5
	cmp	r3, #58
	cmpne	r3, #46
	addeq	r8, r5, #1
	mov	r5, r8
	ldrb	r0, [r5], #2	@ zero_extendqisi2
	bl	hex_to_bin
	mov	r7, r0
	ldrb	r0, [r8, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, r7, lsl #4
	strb	r0, [r6, #1]!
	cmp	r9, r6
	bne	.L4699
	ldrb	r3, [r4]	@ zero_extendqisi2
	ands	r0, r3, #1
	bne	.L4700
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	ldrb	lr, [r4, #2]	@ zero_extendqisi2
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	ldrb	r1, [r4, #4]	@ zero_extendqisi2
	orr	r3, r3, r2
	ldrb	r2, [r4, #5]	@ zero_extendqisi2
	orr	r3, r3, lr
	orr	r3, r3, ip
	orr	r3, r3, r1
	orrs	r3, r3, r2
	beq	.L4700
	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
	.fnend
	.size	get_ether_addr, .-get_ether_addr
	.set	get_qc_ether_addr,get_ether_addr
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gaudio_close_snd_dev, %function
gaudio_close_snd_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #92]
	cmp	r0, #0
	beq	.L4708
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #1024]
	bl	filp_close
.L4708:
	ldr	r0, [r4, #120]
	cmp	r0, #0
	beq	.L4709
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #1024]
	bl	filp_close
.L4709:
	ldr	r0, [r4, #148]
	cmp	r0, #0
	beq	.L4710
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #1024]
	bl	filp_close
.L4710:
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
	.fnend
	.size	gaudio_close_snd_dev, .-gaudio_close_snd_dev
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_lun_open, %function
fsg_lun_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r2, [r0, #24]	@ zero_extendqisi2
	.pad #4
	sub	sp, sp, #4
	ands	r2, r2, #1
	beq	.L4722
.L4724:
	mov	r2, #0
	mov	r1, #131072
	mov	r0, r7
	mov	r6, #1
	bl	filp_open
	mov	r4, r0
	cmn	r4, #4096
	bhi	.L4768
.L4725:
	ldr	r3, [r4, #12]
	ldr	r2, [r4, #36]
	tst	r2, #2
	moveq	r6, #1
	cmp	r3, #0
	beq	.L4728
	ldr	r2, [r3, #32]
	cmp	r2, #0
	beq	.L4728
	ldrh	r3, [r2]
	and	r3, r3, #61440
	sub	r3, r3, #24576
	tst	r3, #53248
	beq	.L4729
.L4728:
	movw	r1, #:lower16:.LC280
	mov	r2, r7
	add	r0, r5, #48
	movt	r1, #:upper16:.LC280
	mvn	r7, #21
	bl	_dev_info
.L4730:
	mov	r3, sp
	mov	r0, r4
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #1024]
	bl	filp_close
.L4721:
	mov	r0, r7
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4729:
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L4731
	ldr	r1, [r3, #8]
	cmp	r1, #0
	beq	.L4769
.L4732:
	ldr	r1, [r3, #12]
	cmp	r1, #0
	beq	.L4770
.L4733:
	ldr	r3, [r2, #32]
	ldr	r3, [r3]
.L4767:
	ldr	r1, [r3, #104]
	tst	r1, #1
	bne	.L4735
	.syntax divided
@ 165 "/home/Jprimero15/hlte/lolz/include/linux/seqlock.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldrd	r8, [r3, #96]
	.syntax divided
@ 221 "/home/Jprimero15/hlte/lolz/include/linux/seqlock.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r3, #104]
	cmp	r0, r1
	bne	.L4767
	cmp	r8, #0
	sbcs	r3, r9, #0
	blt	.L4771
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	tst	r3, #8
	beq	.L4738
	lsr	r2, r8, #11
	mov	r1, #11
	movw	r10, #65502
	orr	r2, r2, r9, lsl #21
	movt	r10, 255
	str	r1, [r5, #40]
	asr	r3, r9, r1
	mov	fp, #0
	cmp	r10, r2
	mov	r0, #2048
	sbcs	r1, fp, r3
	str	r0, [r5, #44]
	blt	.L4739
	mov	r0, #300
	mov	r1, #0
.L4740:
	cmp	r2, r0
	sbcs	r1, r3, r1
	blt	.L4772
.L4745:
	add	r1, r4, #28
	.syntax divided
@ 45 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r0, [r1]
	add	r0, r0, #1
	strex	ip, r0, [r1]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldrb	r1, [r5, #24]	@ zero_extendqisi2
	mov	r7, #0
	str	r4, [r5]
	strd	r8, [r5, #8]
	strd	r2, [r5, #16]
	bfi	r1, r6, #1, #1
	strb	r1, [r5, #24]
	b	.L4730
.L4722:
	mov	r1, #2
	mov	r0, r7
	movt	r1, 2
	bl	filp_open
	cmn	r0, #30
	cmnne	r0, #13
	mov	r4, r0
	moveq	r6, #1
	movne	r6, #0
	beq	.L4724
	cmn	r4, #4096
	bls	.L4725
.L4768:
	movw	r1, #:lower16:.LC279
	mov	r2, r7
	add	r0, r5, #48
	movt	r1, #:upper16:.LC279
	mov	r7, r4
	bl	_dev_info
	b	.L4721
.L4769:
	ldr	r1, [r3, #16]
	cmp	r1, #0
	bne	.L4732
.L4731:
	movw	r1, #:lower16:.LC281
	mov	r2, r7
	add	r0, r5, #48
	movt	r1, #:upper16:.LC281
	bl	_dev_info
	mvn	r7, #21
	b	.L4730
.L4738:
	ldr	r3, [r2, #312]
	cmp	r3, #0
	beq	.L4741
	ldr	r3, [r3, #88]
	ldr	r3, [r3, #492]
	cmp	r3, #0
	moveq	r3, #512
	beq	.L4742
	add	r3, r3, #776
	ldrh	r3, [r3]
	cmp	r3, #0
	moveq	r3, #512
.L4742:
	mov	r1, #8
	str	r3, [r5, #44]
.L4743:
	lsr	r3, r3, #1
	add	r1, r1, #1
	cmp	r3, #256
	bhi	.L4743
	str	r1, [r5, #40]
.L4744:
	rsb	r0, r1, #32
	lsr	r2, r8, r1
	subs	ip, r1, #32
	orr	r2, r2, r9, lsl r0
	mov	r0, #1
	asr	r3, r9, r1
	orrpl	r2, r2, r9, asr ip
	mov	r1, #0
	b	.L4740
.L4770:
	ldr	r3, [r3, #20]
	cmp	r3, #0
	moveq	r6, #1
	b	.L4733
.L4772:
	movw	r1, #:lower16:.LC285
	mov	r2, r7
	add	r0, r5, #48
	movt	r1, #:upper16:.LC285
	bl	_dev_info
	mvn	r7, #524
	b	.L4730
.L4771:
	movw	r1, #:lower16:.LC282
	mov	r2, r7
	add	r0, r5, #48
	movt	r1, #:upper16:.LC282
	mov	r7, r8
	bl	_dev_info
	b	.L4730
.L4739:
	add	r3, r5, #48
	movw	r1, #:lower16:.LC283
	mov	r2, r7
	mov	r0, r3
	movt	r1, #:upper16:.LC283
	mov	r7, r3
	bl	_dev_info
	movw	r2, #65502
	movw	r1, #:lower16:.LC284
	movt	r2, 255
	mov	r0, r7
	movt	r1, #:upper16:.LC284
	bl	_dev_info
	mov	r2, r10
	mov	r3, fp
	b	.L4745
.L4735:
	.syntax divided
@ 147 "/home/Jprimero15/hlte/lolz/include/linux/seqlock.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	b	.L4767
.L4741:
	mov	r3, #512
	mov	r1, #9
	str	r1, [r5, #40]
	str	r3, [r5, #44]
	b	.L4744
	.fnend
	.size	fsg_lun_open, .-fsg_lun_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_cleanup, %function
conn_gadget_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC286
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r1, .L4781
	movt	r0, #:upper16:.LC286
	str	lr, [sp, #4]
	movw	r4, #:lower16:.LANCHOR1
	bl	printk
	movw	r0, #:lower16:.LC287
	movt	r4, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC287
	bl	printk
	ldr	r3, [r4, #2500]
	cmp	r3, #0
	beq	.L4780
	ldr	r0, .L4781+4
	bl	misc_deregister
	ldr	r0, [r4, #2500]
	ldr	r3, [r0, #188]
	cmp	r3, #0
	beq	.L4775
	mov	r0, r3
	bl	vfree
	ldr	r0, [r4, #2500]
.L4775:
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #2500]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4780:
	movw	r0, #:lower16:.LC288
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC288
	add	sp, sp, #8
	ldr	r1, .L4781+8
	b	printk
.L4782:
	.align	2
.L4781:
	.word	.LANCHOR2+2716
	.word	.LANCHOR0+912
	.word	.LANCHOR2+2748
	.fnend
	.size	conn_gadget_function_cleanup, .-conn_gadget_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_init, %function
conn_gadget_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC289
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r1, .L4800
	movt	r0, #:upper16:.LC289
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	printk
	movw	r0, #:lower16:.LC290
	movt	r0, #:upper16:.LC290
	bl	printk
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L4789
	mov	r2, #220
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L4797
.L4784:
	mov	r6, #0
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	movw	r1, #:lower16:.LC251
	add	r2, r5, #3568
	movt	r1, #:upper16:.LC251
	str	r6, [r4, #88]
	add	r0, r4, #144
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC252
	add	r2, r5, #3568
	movt	r1, #:upper16:.LC252
	add	r0, r4, #156
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC292
	add	r2, r5, #3568
	movt	r1, #:upper16:.LC292
	add	r0, r4, #200
	bl	__init_waitqueue_head
	add	r1, r4, #128
	add	r0, r4, #120
	str	r6, [r4, #108]
	add	r2, r4, #136
	mov	r3, #262144
	str	r6, [r4, #112]
	mov	ip, #4096
	str	r6, [r4, #116]
	str	r0, [r4, #120]
	strd	r0, [r4, #124]
	mov	r0, r3
	str	r1, [r4, #132]
	str	r2, [r4, #136]
	str	r2, [r4, #140]
	str	ip, [r4, #192]
	str	r3, [r4, #196]
	str	r6, [r4, #216]
	bl	vmalloc
	cmp	r0, r6
	mov	r1, r0
	str	r0, [r4, #188]
	beq	.L4798
	mov	r3, #1
	ldr	r2, [r4, #196]
	add	r0, r4, #168
	bl	__kfifo_init
	ldr	r0, .L4800+4
	str	r4, [r5, #2500]
	bl	misc_register
	subs	r6, r0, #0
	bne	.L4799
.L4783:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4789:
	mov	r4, #16
	b	.L4784
.L4799:
	movw	r0, #:lower16:.LC294
	mov	r2, r6
	ldr	r1, .L4800+8
	movt	r0, #:upper16:.LC294
	bl	printk
.L4787:
	ldr	r0, [r4, #188]
	cmp	r0, #0
	beq	.L4788
	bl	vfree
.L4788:
	mov	r3, #0
	mov	r0, r4
	str	r3, [r5, #2500]
	bl	kfree
	movw	r0, #:lower16:.LC295
	ldr	r1, .L4800+8
	movt	r0, #:upper16:.LC295
	bl	printk
	b	.L4783
.L4798:
	movw	r0, #:lower16:.LC293
	ldr	r1, .L4800+8
	mvn	r6, #11
	movt	r0, #:upper16:.LC293
	bl	printk
	b	.L4787
.L4797:
	movw	r0, #:lower16:.LC291
	mvn	r6, #11
	movt	r0, #:upper16:.LC291
	bl	printk
	b	.L4783
.L4801:
	.align	2
.L4800:
	.word	.LANCHOR2+2768
	.word	.LANCHOR0+912
	.word	.LANCHOR2+2796
	.fnend
	.size	conn_gadget_function_init, .-conn_gadget_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_usb_buffer_size_store, %function
conn_gadget_usb_buffer_size_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r6, r3
	str	lr, [sp, #16]
	ldr	r3, [r5, #2500]
	.pad #12
	sub	sp, sp, #12
	cmp	r3, #0
	beq	.L4812
	ldr	r3, [r3, #100]
	cmp	r3, #0
	bne	.L4813
	movw	r1, #:lower16:.LC297
	mov	r0, r2
	movt	r1, #:upper16:.LC297
	add	r2, sp, #4
	bl	sscanf
	ldr	r4, [sp, #4]
	lsl	r4, r4, #16
	mov	r0, r4
	bl	vmalloc
	subs	r7, r0, #0
	beq	.L4814
	ldr	ip, [r5, #2500]
	ldr	r0, [ip, #188]
	cmp	r0, #0
	beq	.L4807
	bl	vfree
	ldr	ip, [r5, #2500]
.L4807:
	ldr	lr, [sp, #4]
	mov	r5, #0
	mov	r0, ip
	mov	r1, r7
	mov	r2, r4
	str	r5, [ip, #172]
	mov	r3, #1
	str	r7, [ip, #188]
	lsl	lr, lr, #10
	str	lr, [ip, #192]
	str	r4, [ip, #196]
	str	r5, [r0, #168]!
	bl	__kfifo_init
.L4802:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L4812:
	movw	r0, #:lower16:.LC196
	ldr	r1, .L4815
	movt	r0, #:upper16:.LC196
	bl	printk
	b	.L4802
.L4814:
	movw	r0, #:lower16:.LC298
	ldr	r1, .L4815
	movt	r0, #:upper16:.LC298
	bl	printk
	b	.L4802
.L4813:
	movw	r0, #:lower16:.LC296
	ldr	r1, .L4815
	movt	r0, #:upper16:.LC296
	bl	printk
	b	.L4802
.L4816:
	.align	2
.L4815:
	.word	.LANCHOR2+2816
	.fnend
	.size	conn_gadget_usb_buffer_size_store, .-conn_gadget_usb_buffer_size_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	remote_wakeup_store, %function
remote_wakeup_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r3
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	add	r2, sp, #8
	mov	r3, #0
	movw	r1, #:lower16:.LC297
	mov	r4, r0
	str	r3, [r2, #-4]!
	mov	r0, r6
	movt	r1, #:upper16:.LC297
	bl	sscanf
	mov	r0, r4
	ldr	r3, [sp, #4]
	ldr	r2, [r0, #508]!
	cmp	r0, r2
	beq	.L4818
	sub	r2, r2, #120
.L4821:
	ldrb	r1, [r2, #22]	@ zero_extendqisi2
	cmp	r3, #0
	orrne	r1, r1, #32
	biceq	r1, r1, #32
	strb	r1, [r2, #22]
	ldr	r2, [r2, #120]
	cmp	r0, r2
	sub	r2, r2, #120
	bne	.L4821
.L4818:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	remote_wakeup_store, .-remote_wakeup_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceProtocol_store, %function
bDeviceProtocol_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC79
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC79
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L4826
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strb	r2, [r3, #530]
.L4824:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4826:
	mvn	r0, #0
	b	.L4824
	.fnend
	.size	bDeviceProtocol_store, .-bDeviceProtocol_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceSubClass_store, %function
bDeviceSubClass_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC79
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC79
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L4830
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strb	r2, [r3, #529]
.L4828:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4830:
	mvn	r0, #0
	b	.L4828
	.fnend
	.size	bDeviceSubClass_store, .-bDeviceSubClass_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceClass_store, %function
bDeviceClass_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC79
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC79
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L4834
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strb	r2, [r3, #528]
.L4832:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4834:
	mvn	r0, #0
	b	.L4832
	.fnend
	.size	bDeviceClass_store, .-bDeviceClass_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bcdDevice_store, %function
bcdDevice_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC229
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC229
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L4838
	ldr	r3, .L4840
	mov	r0, r4
	ldr	r2, [sp, #4]
	strh	r2, [r3, #12]	@ movhi
.L4836:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4838:
	mvn	r0, #0
	b	.L4836
.L4841:
	.align	2
.L4840:
	.word	.LANCHOR0+524
	.fnend
	.size	bcdDevice_store, .-bcdDevice_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	idProduct_store, %function
idProduct_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC229
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC229
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L4844
	ldr	r3, .L4846
	mov	r0, r4
	ldr	r2, [sp, #4]
	strh	r2, [r3, #10]	@ movhi
.L4842:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4844:
	mvn	r0, #0
	b	.L4842
.L4847:
	.align	2
.L4846:
	.word	.LANCHOR0+524
	.fnend
	.size	idProduct_store, .-idProduct_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	idVendor_store, %function
idVendor_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC229
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC229
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L4850
	ldr	r3, .L4852
	mov	r0, r4
	ldr	r2, [sp, #4]
	strh	r2, [r3, #8]	@ movhi
.L4848:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4850:
	mvn	r0, #0
	b	.L4848
.L4853:
	.align	2
.L4852:
	.word	.LANCHOR0+524
	.fnend
	.size	idVendor_store, .-idVendor_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_product_store, %function
mass_storage_product_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r4, #16
	ldr	r5, [r0, #4]
	bhi	.L4857
	ldr	r2, [r5, #96]
	movw	r1, #:lower16:.LC228
	mov	r0, r6
	movt	r1, #:upper16:.LC228
	add	r2, r2, #218
	bl	sscanf
	cmp	r0, #1
	beq	.L4859
.L4857:
	mvn	r0, #21
.L4854:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4859:
	ldr	r2, [r5, #96]
	movw	r0, #:lower16:.LC299
	movt	r0, #:upper16:.LC299
	ldr	r1, .L4860
	add	r2, r2, #218
	bl	printk
	mov	r0, r4
	b	.L4854
.L4861:
	.align	2
.L4860:
	.word	.LANCHOR2+2852
	.fnend
	.size	mass_storage_product_store, .-mass_storage_product_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_vendor_store, %function
mass_storage_vendor_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r4, #8
	ldr	r5, [r0, #4]
	bhi	.L4865
	ldr	r2, [r5, #96]
	movw	r1, #:lower16:.LC228
	mov	r0, r6
	movt	r1, #:upper16:.LC228
	add	r2, r2, #209
	bl	sscanf
	cmp	r0, #1
	beq	.L4867
.L4865:
	mvn	r0, #21
.L4862:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4867:
	ldr	r2, [r5, #96]
	movw	r0, #:lower16:.LC300
	movt	r0, #:upper16:.LC300
	ldr	r1, .L4868
	add	r2, r2, #209
	bl	printk
	mov	r0, r4
	b	.L4862
.L4869:
	.align	2
.L4868:
	.word	.LANCHOR2+2880
	.fnend
	.size	mass_storage_vendor_store, .-mass_storage_vendor_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_inquiry_store, %function
mass_storage_inquiry_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r4, #28
	ldr	r3, [r0, #4]
	bhi	.L4873
	ldr	r2, [r3, #96]
	movw	r1, #:lower16:.LC301
	mov	r0, r5
	movt	r1, #:upper16:.LC301
	add	r2, r2, #180
	bl	sscanf
	cmp	r0, #1
	bne	.L4873
	mov	r0, r4
.L4870:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4873:
	mvn	r0, #21
	b	.L4870
	.fnend
	.size	mass_storage_inquiry_store, .-mass_storage_inquiry_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_ethaddr_store, %function
ecm_ethaddr_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r2
	mov	r4, r3
	str	lr, [sp, #8]
	.pad #20
	sub	sp, sp, #20
	bl	dev_get_drvdata
	ldr	r2, [r0, #4]
	mov	r0, r5
	movw	r1, #:lower16:.LC230
	movt	r1, #:upper16:.LC230
	add	r3, r2, #3
	add	ip, r2, #5
	add	r5, r2, #4
	add	lr, r2, #2
	str	lr, [sp]
	stmib	sp, {r3, r5, ip}
	add	r3, r2, #1
	bl	sscanf
	cmp	r0, #6
	moveq	r0, r4
	mvnne	r0, #21
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_ethaddr_store, .-ecm_ethaddr_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_max_pkt_per_xfer_store, %function
rndis_max_pkt_per_xfer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	movw	r1, #:lower16:.LC297
	ldr	r6, [r0, #4]
	add	r2, sp, #4
	movt	r1, #:upper16:.LC297
	mov	r0, r5
	bl	sscanf
	cmp	r0, #1
	ldreq	r3, [sp, #4]
	moveq	r0, r4
	mvnne	r0, #21
	strbeq	r3, [r6, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_max_pkt_per_xfer_store, .-rndis_max_pkt_per_xfer_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_vendorID_store, %function
rndis_vendorID_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	movw	r1, #:lower16:.LC302
	ldr	r6, [r0, #4]
	add	r2, sp, #4
	movt	r1, #:upper16:.LC302
	mov	r0, r5
	bl	sscanf
	cmp	r0, #1
	ldreq	r3, [sp, #4]
	moveq	r0, r4
	mvnne	r0, #21
	streq	r3, [r6, #8]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_vendorID_store, .-rndis_vendorID_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_wceis_store, %function
rndis_wceis_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	mov	r4, r3
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	movw	r1, #:lower16:.LC297
	ldr	r6, [r0, #4]
	add	r2, sp, #4
	movt	r1, #:upper16:.LC297
	mov	r0, r5
	bl	sscanf
	cmp	r0, #1
	bne	.L4889
	ldr	r3, [sp, #4]
	mov	r0, r4
	adds	r3, r3, #0
	movne	r3, #1
	strb	r3, [r6, #269]
.L4887:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4889:
	mvn	r0, #21
	b	.L4887
	.fnend
	.size	rndis_wceis_store, .-rndis_wceis_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_manufacturer_store, %function
rndis_manufacturer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r4, #255
	ldr	r2, [r0, #4]
	bhi	.L4893
	movw	r1, #:lower16:.LC303
	add	r2, r2, #13
	mov	r0, r5
	movt	r1, #:upper16:.LC303
	bl	sscanf
	cmp	r0, #1
	moveq	r0, r4
	mvnne	r0, #0
.L4891:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4893:
	mvn	r0, #21
	b	.L4891
	.fnend
	.size	rndis_manufacturer_store, .-rndis_manufacturer_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_instances_store, %function
acm_instances_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r3
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	movw	r1, #:lower16:.LC297
	ldr	r4, [r0, #4]
	add	r2, sp, #4
	movt	r1, #:upper16:.LC297
	mov	r0, r6
	bl	sscanf
	ldr	r2, [sp, #4]
	mov	r0, r5
	cmp	r2, #4
	movge	r2, #4
	str	r2, [r4]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	acm_instances_store, .-acm_instances_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_unwrap_ntb, %function
ncm_unwrap_ntb:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r7, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r0, #176]
	.pad #44
	sub	sp, sp, #44
	ldr	r3, [r1, #172]
	ldrb	r0, [r0, #180]	@ zero_extendqisi2
	ldr	r1, [r6]
	ldr	r2, [r3]	@ unaligned
	cmp	r0, #0
	moveq	r8, #0
	movne	r8, #4
	cmp	r1, r2
	bne	.L4951
	ldrb	r0, [r3, #5]	@ zero_extendqisi2
	ldrb	r1, [r3, #4]	@ zero_extendqisi2
	ldr	r2, [r6, #8]
	orr	r1, r1, r0, lsl #8
	cmp	r1, r2
	bne	.L4952
	ldr	r0, [r6, #24]
	add	lr, r3, #8
	cmp	r0, #1
	beq	.L4904
	cmp	r0, #2
	ldreq	ip, [r3, #8]	@ unaligned
	bne	.L4946
.L4906:
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	ldr	r2, [r2, #36]
	cmp	r2, ip
	bcc	.L4953
	ldr	r2, [r6, #28]
	add	ip, lr, r0, lsl #1
	cmp	r2, #1
	beq	.L4909
	cmp	r2, #2
	ldreq	r2, [ip]	@ unaligned
	bne	.L4946
.L4911:
	cmp	r1, r2
	movls	r1, #0
	movhi	r1, #1
	ands	r0, r2, #3
	movne	r0, r1
	cmp	r0, #0
	bne	.L4954
	add	r3, r3, r2
	ldr	r1, [r6, #4]
	ldr	r2, [r3]	@ unaligned
	cmp	r1, r2
	beq	.L4913
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC310
	mvn	r5, #21
	movt	r1, #:upper16:.LC310
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L4901
.L4952:
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC307
	mvn	r5, #21
	movt	r1, #:upper16:.LC307
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
.L4901:
	mov	r0, r7
	bl	skb_queue_purge
	mov	r0, r4
	bl	dev_kfree_skb_any
.L4898:
	mov	r0, r5
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4951:
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC304
	mvn	r5, #21
	ldr	r2, [r4, #80]
	movt	r1, #:upper16:.LC304
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	ldr	r0, [r4, #172]
	mov	ip, #0
	mov	r3, #32
	mov	r2, #1
	movw	r1, #:lower16:.LC305
	movt	r1, #:upper16:.LC305
	str	r2, [sp]
	stmib	sp, {r0, r3, ip}
	movw	r0, #:lower16:.LC306
	movt	r0, #:upper16:.LC306
	bl	print_hex_dump
	b	.L4901
.L4904:
	ldrb	r2, [r3, #9]	@ zero_extendqisi2
	ldrb	ip, [r3, #8]	@ zero_extendqisi2
	orr	ip, ip, r2, lsl #8
	b	.L4906
.L4909:
	ldrb	ip, [ip, #1]	@ zero_extendqisi2
	ldrb	r2, [lr, r0, lsl #1]	@ zero_extendqisi2
	orr	r2, r2, ip, lsl #8
	b	.L4911
.L4953:
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC308
	mvn	r5, #21
	movt	r1, #:upper16:.LC308
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L4901
.L4913:
	ldrb	r0, [r3, #5]	@ zero_extendqisi2
	ldrb	r2, [r3, #4]	@ zero_extendqisi2
	ldr	ip, [r6, #12]
	ldr	r1, [r6, #20]
	orr	r2, r2, r0, lsl #8
	add	r0, ip, r1, lsl #3
	cmp	r0, r2
	bhi	.L4914
	ldr	lr, [r6, #16]
	udiv	r0, r2, lr
	mls	r0, lr, r0, r2
	cmp	r0, #0
	bne	.L4914
	sub	r2, r2, ip
	ldr	r0, [r6, #32]
	cmp	r1, #1
	ldr	lr, [r6, #40]
	add	r3, r3, #6
	str	r2, [sp, #16]
	ldr	r2, [r6, #36]
	add	r0, r0, lr
	add	r0, r0, r2
	add	ip, r3, r0, lsl #1
	beq	.L4917
	cmp	r1, #2
	bne	.L4946
	mov	r2, ip
	ldr	fp, [ip, #4]	@ unaligned
	mov	r0, #4
	ldr	r3, [r2], #4	@ unaligned
.L4919:
	add	r2, r2, r0
	add	r0, r8, #14
	ldr	r9, [sp, #16]
	str	r7, [sp, #16]
	mov	r7, r2
	str	r4, [sp, #20]
	str	r6, [sp, #24]
	str	r5, [sp, #28]
	str	r0, [sp, #32]
	b	.L4928
.L4959:
	cmp	r1, #2
	bne	.L4946
	mov	r2, r7
	ldr	r5, [r7, #4]	@ unaligned
	mov	r1, #4
	ldr	r6, [r2], #4	@ unaligned
.L4925:
	clz	r4, r5
	cmp	r6, #0
	lsr	r4, r4, #5
	moveq	r4, #1
	add	r7, r2, r1
	cmp	r4, #0
	bne	.L4926
	mov	r1, #32
	ldr	r0, [sp, #20]
	str	r3, [sp, #36]
	bl	skb_clone
	subs	r10, r0, #0
	ldr	r3, [sp, #36]
	beq	.L4955
	mov	r1, r3
	bl	skb_pull
	cmp	r0, #0
	beq	.L4956
	sub	r1, fp, r8
	mov	r0, r10
	bl	skb_trim
	ldr	r0, [sp, #16]
	mov	r1, r10
	mov	fp, r5
	bl	skb_queue_tail
	ldr	r3, [sp, #24]
	ldr	r1, [r3, #20]
	mov	r3, r6
	lsl	r2, r1, #2
	sub	r9, r9, r2
	cmp	r2, r9
	bcs	.L4950
.L4928:
	ldr	r2, [sp, #32]
	cmp	fp, r2
	bcc	.L4957
	ldr	r2, [sp, #28]
	ldrb	r2, [r2, #180]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L4958
.L4921:
	cmp	r1, #1
	bne	.L4959
	mov	r2, r7
	ldrb	ip, [r7, #1]	@ zero_extendqisi2
	mov	r1, #2
	ldrb	r6, [r2], #2	@ zero_extendqisi2
	ldrb	r0, [r7, #3]	@ zero_extendqisi2
	ldrb	r5, [r7, #2]	@ zero_extendqisi2
	orr	r6, r6, ip, lsl #8
	orr	r5, r5, r0, lsl #8
	b	.L4925
.L4914:
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC311
	movt	r1, #:upper16:.LC311
.L4949:
	ldr	r3, [r3, #24]
	mvn	r5, #21
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L4901
.L4926:
	mov	r1, r3
	ldr	r7, [sp, #16]
	ldr	r4, [sp, #20]
	mov	r0, r4
	bl	skb_pull
	cmp	r0, #0
	bne	.L4960
.L4931:
	mvn	r5, #74
	b	.L4901
.L4958:
	ldr	r2, [sp, #20]
	add	ip, r3, fp
	mvn	r0, #0
	sub	ip, ip, r8
	str	r3, [sp, #36]
	ldr	r1, [r2, #172]
	sub	r2, fp, r8
	ldr	r4, [r1, ip]	@ unaligned
	add	r1, r1, r3
	bl	crc32_le
	mvn	r0, r0
	cmp	r0, r4
	bne	.L4945
	ldr	r3, [sp, #24]
	ldr	r1, [r3, #20]
	ldr	r3, [sp, #36]
	b	.L4921
.L4954:
	movw	r1, #:lower16:.LC309
	ldr	r3, [r5, #20]
	movt	r1, #:upper16:.LC309
	b	.L4949
.L4917:
	ldrb	r9, [r3, r0, lsl #1]	@ zero_extendqisi2
	add	r2, ip, #2
	mov	r0, #2
	ldrb	r10, [ip, #1]	@ zero_extendqisi2
	ldrb	lr, [ip, #3]	@ zero_extendqisi2
	ldrb	ip, [ip, #2]	@ zero_extendqisi2
	orr	r3, r9, r10, lsl #8
	orr	fp, ip, lr, lsl #8
	b	.L4919
.L4960:
	sub	r1, fp, r8
	mov	r0, r4
	bl	skb_trim
	mov	r1, r4
	mov	r0, r7
	bl	skb_queue_tail
.L4950:
	mov	r5, #0
	b	.L4898
.L4957:
	movw	r1, #:lower16:.LC312
	mov	r2, fp
	ldr	r7, [sp, #16]
	ldr	r5, [sp, #28]
	movt	r1, #:upper16:.LC312
	ldr	r4, [sp, #20]
	ldr	r0, [r5, #20]
	mvn	r5, #21
	ldr	r3, [r0, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L4901
.L4955:
	mvn	r5, #21
	ldr	r7, [sp, #16]
	ldr	r4, [sp, #20]
	b	.L4901
.L4945:
	movw	r1, #:lower16:.LC313
	ldr	r7, [sp, #16]
	ldr	r5, [sp, #28]
	movt	r1, #:upper16:.LC313
	ldr	r4, [sp, #20]
	ldr	r3, [r5, #20]
	mvn	r5, #21
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L4901
.L4946:
	.syntax divided
@ 463 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_ncm.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_ncm.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 463, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L4956:
	ldr	r7, [sp, #16]
	ldr	r4, [sp, #20]
	b	.L4931
	.fnend
	.size	ncm_unwrap_ntb, .-ncm_unwrap_ntb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_wrap_ntb, %function
ncm_wrap_ntb:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r0
	movw	r0, #:lower16:.LANCHOR0
	strd	r10, [sp, #24]
	movt	r0, #:upper16:.LANCHOR0
	mov	r10, r1
	str	lr, [sp, #32]
	ldr	r5, [r8, #176]
	.pad #20
	sub	sp, sp, #20
	ldrh	ip, [r0, #32]
	ldrh	r1, [r0, #28]
	ldrh	r0, [r0, #30]
	ldr	r7, [r5, #8]
	ldr	r3, [r5, #12]
	sub	r2, ip, #1
	rsb	ip, ip, #0
	ldr	lr, [r5, #20]
	sub	r4, r1, #1
	rsb	r1, r1, #0
	add	r2, r2, r7
	and	r2, r2, ip
	ldrb	ip, [r8, #180]	@ zero_extendqisi2
	add	r3, r3, lr, lsl #3
	sub	r7, r2, r7
	add	r3, r3, r2
	ldr	r2, [r10, #80]
	add	r4, r4, r3
	cmp	ip, #0
	and	r4, r4, r1
	ldr	r1, [r8, #112]
	add	r4, r4, r0
	moveq	r0, #0
	sub	r3, r4, r3
	movne	r0, #4
	add	r2, r4, r2
	str	r3, [sp, #4]
	add	r3, r2, r0
	cmp	r3, r1
	str	r0, [sp, #8]
	bhi	.L5000
	bcc	.L5001
.L4988:
	mov	r9, #0
.L4965:
	mov	r3, #32
	mov	r2, r9
	mov	r1, r4
	mov	r0, r10
	bl	skb_copy_expand
	mov	r6, r0
	mov	r0, r10
	bl	dev_kfree_skb_any
	cmp	r6, #0
	beq	.L5002
	mov	r1, r4
	mov	r0, r6
	bl	skb_push
	cmp	r4, #0
	mov	r10, r0
	bne	.L5003
.L4967:
	ldr	r3, [r5]
	add	ip, r10, #8
	lsr	r2, r3, #16
	strb	r3, [r10]
	ubfx	r1, r3, #8, #8
	lsr	r3, r2, #8
	strb	r1, [r10, #1]
	strb	r2, [r10, #2]
	strb	r3, [r10, #3]
	ldr	r3, [r5, #8]
	ubfx	r2, r3, #8, #8
	strb	r3, [r10, #4]
	strb	r2, [r10, #5]
	ldr	r0, [r5, #24]
	ldr	r3, [r6, #80]
	cmp	r0, #1
	add	r3, r9, r3
	beq	.L4969
	cmp	r0, #2
	bne	.L4998
	lsr	r2, r3, #16
	ubfx	r1, r3, #8, #8
	strb	r3, [r10, #8]
	lsr	r3, r2, #8
	strb	r1, [r10, #9]
	strb	r2, [r10, #10]
	strb	r3, [r10, #11]
.L4971:
	ldr	r2, [r5, #8]
	add	r1, ip, r0, lsl #1
	ldr	r3, [r5, #28]
	add	r2, r7, r2
	cmp	r3, #1
	beq	.L4973
	cmp	r3, #2
	bne	.L4998
	lsr	lr, r2, #16
	ubfx	r10, r2, #8, #8
	lsr	fp, lr, #8
	strb	lr, [r1, #2]
	strb	fp, [r1, #3]
	strb	r2, [ip, r0, lsl #1]
	strb	r10, [r1, #1]
.L4975:
	ldr	r0, [r5, #4]
	add	r3, r7, r3, lsl #1
	uxth	r10, r4
	add	r2, r1, r3
	add	fp, r2, #6
	lsr	r7, r0, #16
	ubfx	ip, r0, #8, #8
	lsr	lr, r7, #8
	strb	r7, [r2, #2]
	strb	lr, [r2, #3]
	strb	r0, [r1, r3]
	ldr	r1, [sp, #4]
	strb	ip, [r2, #1]
	ldr	r3, [r5, #8]
	sub	r3, r10, r3
	sub	r3, r3, r1
	uxth	r3, r3
	lsr	r1, r3, #8
	strb	r3, [r2, #4]
	strb	r1, [r2, #5]
	ldrb	r1, [r8, #180]	@ zero_extendqisi2
	ldr	r7, [r5, #32]
	ldr	r3, [r5, #36]
	ldr	r2, [r5, #40]
	cmp	r1, #0
	add	r7, r7, r2
	add	r7, r7, r3
	add	r8, fp, r7, lsl #1
	bne	.L5004
.L4976:
	ldr	r2, [r5, #20]
	cmp	r2, #1
	beq	.L4978
	cmp	r2, #2
	bne	.L4998
	lsr	r3, r4, #16
	lsr	r10, r10, #8
	lsr	r1, r3, #8
	strb	r3, [r8, #2]
	strb	r1, [r8, #3]
	strb	r4, [fp, r7, lsl #1]
	strb	r10, [r8, #1]
.L4980:
	ldr	r0, [r5, #20]
	add	r1, r8, r2, lsl #1
	ldr	r3, [r6, #80]
	cmp	r0, #1
	sub	r4, r3, r4
	beq	.L4982
	cmp	r0, #2
	bne	.L4998
	lsr	r3, r4, #16
	ubfx	r0, r4, #8, #8
	lsr	ip, r3, #8
	strb	r3, [r1, #2]
	strb	ip, [r1, #3]
	strb	r4, [r8, r2, lsl #1]
	strb	r0, [r1, #1]
.L4984:
	cmp	r9, #0
	bne	.L4985
.L4961:
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5001:
	ldr	r2, [r8, #88]
	ldr	r2, [r2, #28]
	ldrh	r1, [r2, #4]	@ unaligned
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	bne	.L4988
	movw	r0, #:lower16:.LC314
	mov	r9, #1
	movt	r0, #:upper16:.LC314
	bl	printk
	b	.L4965
.L4969:
	ubfx	r2, r3, #8, #8
	strb	r3, [r10, #8]
	strb	r2, [r10, #9]
	b	.L4971
.L4982:
	ubfx	r3, r4, #8, #8
	strb	r4, [r8, r2, lsl #1]
	strb	r3, [r1, #1]
	b	.L4984
.L4978:
	lsr	r10, r10, #8
	strb	r4, [fp, r7, lsl #1]
	strb	r10, [r8, #1]
	b	.L4980
.L4973:
	ubfx	lr, r2, #8, #8
	strb	r2, [ip, r0, lsl #1]
	strb	lr, [r1, #1]
	b	.L4975
.L5004:
	ldr	r2, [r6, #80]
	mvn	r0, #0
	ldr	r1, [r6, #172]
	sub	r2, r2, r4
	add	r1, r1, r4
	bl	crc32_le
	mvn	r2, r0
	ldr	lr, [r6, #80]
	ldr	r3, [r6, #172]
	lsr	ip, r2, #16
	ubfx	r0, r2, #8, #8
	ldr	r1, [sp, #8]
	str	r0, [sp, #12]
	lsr	r0, ip, #8
	str	r3, [sp, #4]
	add	r3, r3, lr
	str	r0, [sp, #8]
	mov	r0, r6
	strb	ip, [r3, #2]
	ldr	ip, [sp, #8]
	strb	ip, [r3, #3]
	ldr	ip, [sp, #4]
	strb	r2, [ip, lr]
	ldr	r2, [sp, #12]
	strb	r2, [r3, #1]
	bl	skb_put
	b	.L4976
.L5003:
	mov	r1, r4
	bl	__memzero
	b	.L4967
.L5000:
	mov	r0, r10
	mov	r6, #0
	bl	dev_kfree_skb_any
	b	.L4961
.L4998:
	.syntax divided
@ 445 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_ncm.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_ncm.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 445, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L4985:
	mov	r1, #1
	mov	r0, r6
	bl	skb_put
	mov	r1, #1
	bl	__memzero
	movw	r0, #:lower16:.LC316
	ldr	r1, .L5005
	ldr	r2, [r6, #80]
	movt	r0, #:upper16:.LC316
	bl	printk
	b	.L4961
.L5002:
	movw	r0, #:lower16:.LC315
	movt	r0, #:upper16:.LC315
	bl	printk
	b	.L4961
.L5006:
	.align	2
.L5005:
	.word	.LANCHOR2+2908
	.fnend
	.size	ncm_wrap_ntb, .-ncm_wrap_ntb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_start_work, %function
acc_start_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR0
	.save {lr}
	str	lr, [sp, #-4]!
	movw	r3, #:lower16:.LC317
	movt	r2, #:upper16:.LANCHOR0
	.pad #12
	sub	sp, sp, #12
	ldr	r0, [r2, #612]
	movt	r3, #:upper16:.LC317
	mov	ip, #0
	mov	r1, #2
	mov	r2, sp
	stm	sp, {r3, ip}
	add	r0, r0, #8
	bl	kobject_uevent_env
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
	.fnend
	.size	acc_start_work, .-acc_start_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_work, %function
ncm_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LC318
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	ip, #0
	str	lr, [sp, #4]
	movt	r2, #:upper16:.LC318
	.pad #16
	sub	sp, sp, #16
	movw	r3, #:lower16:.LC319
	movw	r4, #:lower16:.LANCHOR1
	ldr	r1, .L5013
	movt	r3, #:upper16:.LC319
	movt	r4, #:upper16:.LANCHOR1
	stm	sp, {r2, ip}
	movw	r0, #:lower16:.LC320
	ldrb	r2, [r4, #3568]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC320
	str	r3, [sp, #8]
	str	ip, [sp, #12]
	bl	printk
	ldrb	r3, [r4, #3568]	@ zero_extendqisi2
	mov	r1, #2
	cmp	r3, #0
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	addeq	r2, sp, #8
	ldr	r0, [r3, #792]
	movne	r2, sp
	add	r0, r0, #8
	bl	kobject_uevent_env
	add	sp, sp, #16
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5014:
	.align	2
.L5013:
	.word	.LANCHOR2+2924
	.fnend
	.size	ncm_work, .-ncm_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_cleanup_functions, %function
android_cleanup_functions:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	sub	r6, r0, #4
	movt	r7, #:upper16:.LANCHOR1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.L5016:
	ldr	r4, [r6, #4]!
	cmp	r4, #0
	beq	.L5035
.L5020:
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L5016
	ldr	r1, [r3, #288]
	ldr	r0, [r7, #3572]
	bl	device_destroy
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #28]
	cmp	r3, #0
	beq	.L5018
	mov	r0, r4
	blx	r3
.L5018:
	ldr	r5, [r4, #16]
	cmp	r5, #0
	beq	.L5016
	ldr	r1, [r5]
	add	r5, r5, #4
	cmp	r1, #0
	beq	.L5016
.L5019:
	ldr	r0, [r4, #8]
	bl	device_remove_file
	ldr	r1, [r5], #4
	cmp	r1, #0
	bne	.L5019
	ldr	r4, [r6, #4]!
	cmp	r4, #0
	bne	.L5020
.L5035:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	android_cleanup_functions, .-android_cleanup_functions
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_usb_unbind, %function
android_usb_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r5, #:lower16:.LANCHOR1
	ldr	r2, .L5042
	movt	r5, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r3, [r5, #2228]
	str	lr, [sp, #12]
	cmp	r3, r2
	sub	r4, r3, #520
	bne	.L5039
	b	.L5037
.L5041:
	ldr	r3, [r4, #520]
	cmp	r3, r2
	sub	r4, r3, #520
	beq	.L5037
.L5039:
	ldr	r3, [r3, #-512]
	cmp	r0, r3
	bne	.L5041
.L5037:
	movw	r0, #:lower16:.LC86
	ldr	r1, .L5042+4
	mov	r6, #0
	movt	r0, #:upper16:.LC86
	bl	printk
	mov	r3, #48
	add	r0, r4, #180
	strb	r3, [r5, #2240]
	strb	r6, [r5, #3000]
	strb	r6, [r5, #3256]
	bl	cancel_work_sync
	ldr	r0, [r4, #4]
	bl	android_cleanup_functions
	ldrd	r4, [sp]
	mov	r0, r6
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5043:
	.align	2
.L5042:
	.word	.LANCHOR1+2228
	.word	.LANCHOR2+2936
	.fnend
	.size	android_usb_unbind, .-android_usb_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_destroy_device, %function
android_destroy_device:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR0
	mov	r5, r0
	movt	r4, #:upper16:.LANCHOR0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r1, [r4, #948]
	cmp	r1, #0
	beq	.L5045
	add	r4, r4, #952
.L5046:
	ldr	r0, [r5, #12]
	bl	device_remove_file
	ldr	r1, [r4], #4
	cmp	r1, #0
	bne	.L5046
.L5045:
	ldr	r2, [r5, #12]
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r0, [r3, #3572]
	ldr	r1, [r2, #288]
	b	device_destroy
	.fnend
	.size	android_destroy_device, .-android_destroy_device
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_remove, %function
android_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	ldr	r6, .L5082
	str	r8, [sp, #16]
	movt	r7, #:upper16:.LANCHOR1
	str	lr, [sp, #20]
	ldr	r8, [r0, #88]
	ldr	r1, [r7, #2228]
	cmp	r8, #0
	ldrbne	r2, [r8, #8]	@ zero_extendqisi2
	moveq	r2, r8
	cmp	r1, r6
	sub	r4, r1, #520
	mov	r5, r1
	beq	.L5054
	ldr	r3, [r1, #-476]
	cmp	r3, #0
	beq	.L5054
	ldrb	r3, [r3, #8]	@ zero_extendqisi2
	cmp	r2, r3
	bne	.L5055
	b	.L5054
.L5056:
	ldr	r3, [r3, #-476]
	cmp	r3, #0
	beq	.L5054
	ldrb	r3, [r3, #8]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L5054
.L5055:
	ldr	r3, [r4, #520]
	cmp	r3, r6
	mov	r5, r3
	sub	r4, r3, #520
	bne	.L5056
.L5054:
	cmp	r4, #0
	beq	.L5057
	mov	r0, r4
	bl	android_destroy_device
	cmp	r8, #0
	beq	.L5058
	ldr	r3, [r8, #4]
	cmp	r3, #0
	bne	.L5080
.L5058:
	mov	r0, r5
	bl	list_del
	ldr	r3, [r7, #3576]
	mov	r0, r4
	sub	r3, r3, #1
	str	r3, [r7, #3576]
	bl	kfree
	ldr	r1, [r7, #2228]
.L5057:
	cmp	r1, r6
	beq	.L5081
.L5060:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5080:
	add	r0, r4, #60
	bl	pm_qos_remove_request
	b	.L5058
.L5081:
	ldr	r0, [r7, #3572]
	bl	class_destroy
	ldr	r3, .L5082+4
	mov	r2, #0
	ldr	r0, [r7, #2236]
	str	r2, [r7, #3572]
	cmp	r0, r3
	bne	.L5060
	add	r0, r0, #44
	bl	usb_gadget_unregister_driver
	b	.L5060
.L5083:
	.align	2
.L5082:
	.word	.LANCHOR1+2228
	.word	.LANCHOR0+1024
	.fnend
	.size	android_remove, .-android_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	macos_show, %function
macos_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	ldr	r3, [r0, #8]
	cmp	r3, #0
	beq	.L5085
	ldr	r0, [r3]
	bl	sec_get_ss_host_available
	mov	r4, r0
	bl	get_host_os_type
	cmp	r4, #1
	cmpeq	r0, #1
	mov	r3, r0
	movne	r6, #1
	beq	.L5090
.L5086:
	movw	r0, #:lower16:.LC322
	ldr	r1, .L5091
	mov	r2, r4
	movt	r0, #:upper16:.LC322
	bl	printk
.L5087:
	movw	r1, #:lower16:.LC79
	mov	r2, r6
	mov	r0, r5
	movt	r1, #:upper16:.LC79
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	sprintf
.L5085:
	movw	r0, #:lower16:.LC323
	ldr	r1, .L5091
	mvn	r6, #0
	movt	r0, #:upper16:.LC323
	bl	printk
	b	.L5087
.L5090:
	movw	r0, #:lower16:.LC321
	ldr	r1, .L5091
	str	r3, [sp, #4]
	movt	r0, #:upper16:.LC321
	mov	r6, #0
	bl	printk
	ldr	r3, [sp, #4]
	b	.L5086
.L5092:
	.align	2
.L5091:
	.word	.LANCHOR2+2956
	.fnend
	.size	macos_show, .-macos_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ss_host_available_show, %function
ss_host_available_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	ldr	r3, [r0, #8]
	cmp	r3, #0
	beq	.L5094
	ldr	r0, [r3]
	bl	sec_get_ss_host_available
	mov	r5, r0
	bl	get_host_os_type
	cmp	r5, #1
	cmpeq	r0, #1
	mov	r3, r0
	moveq	r4, #1
	movne	r4, #0
	beq	.L5099
.L5095:
	movw	r0, #:lower16:.LC322
	ldr	r1, .L5100
	mov	r2, r5
	movt	r0, #:upper16:.LC322
	bl	printk
.L5096:
	movw	r1, #:lower16:.LC79
	mov	r2, r4
	mov	r0, r6
	movt	r1, #:upper16:.LC79
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	sprintf
.L5094:
	movw	r0, #:lower16:.LC323
	ldr	r1, .L5100
	mvn	r4, #0
	movt	r0, #:upper16:.LC323
	bl	printk
	b	.L5096
.L5099:
	movw	r0, #:lower16:.LC321
	ldr	r1, .L5100
	str	r3, [sp, #4]
	movt	r0, #:upper16:.LC321
	mov	r4, #1
	bl	printk
	ldr	r3, [sp, #4]
	b	.L5095
.L5101:
	.align	2
.L5100:
	.word	.LANCHOR2+2968
	.fnend
	.size	ss_host_available_show, .-ss_host_available_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iSerial_store, %function
iSerial_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L5104
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L5109
	mov	r2, #256
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	ldr	r0, .L5109
	bl	strim
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5104:
	mvn	r0, #21
	bx	lr
.L5110:
	.align	2
.L5109:
	.word	.LANCHOR1+2240
	.fnend
	.size	iSerial_store, .-iSerial_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iProduct_store, %function
iProduct_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L5113
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L5118
	mov	r2, #256
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	ldr	r0, .L5118
	bl	strim
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5113:
	mvn	r0, #21
	bx	lr
.L5119:
	.align	2
.L5118:
	.word	.LANCHOR1+3000
	.fnend
	.size	iProduct_store, .-iProduct_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iManufacturer_store, %function
iManufacturer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L5122
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L5127
	mov	r2, #256
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	ldr	r0, .L5127
	bl	strim
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5122:
	mvn	r0, #21
	bx	lr
.L5128:
	.align	2
.L5127:
	.word	.LANCHOR1+3256
	.fnend
	.size	iManufacturer_store, .-iManufacturer_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_aliases_store, %function
ffs_aliases_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 264
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r4, #:lower16:__stack_chk_guard
	movt	r1, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r4, #:upper16:__stack_chk_guard
	str	r8, [sp, #16]
	mov	r5, r3
	ldr	r3, [r4]
	str	lr, [sp, #20]
	ldr	r6, [r1, #2228]
	.pad #264
	sub	sp, sp, #264
	mov	r8, r2
	str	r3, [sp, #260]
	sub	r7, r6, #496
	mov	r0, r7
	bl	mutex_lock
	ldrb	r3, [r6, #-504]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L5134
	mov	r1, r8
	mov	r2, #256
	add	r0, sp, #4
	bl	strlcpy
	add	r0, sp, #4
	bl	strim
	mov	r1, r0
	mov	r2, #256
	sub	r0, r6, #324
	bl	strlcpy
	mov	r0, r7
	bl	mutex_unlock
	mov	r0, r5
.L5129:
	ldr	r2, [sp, #260]
	ldr	r3, [r4]
	cmp	r2, r3
	bne	.L5135
	add	sp, sp, #264
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5134:
	mov	r0, r7
	bl	mutex_unlock
	mvn	r0, #15
	b	.L5129
.L5135:
	bl	__stack_chk_fail
	.fnend
	.size	ffs_aliases_store, .-ffs_aliases_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	functions_store, %function
functions_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 552
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r1, #:lower16:__stack_chk_guard
	strd	r6, [sp, #8]
	movt	r1, #:upper16:__stack_chk_guard
	mov	r6, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #556
	sub	sp, sp, #556
	str	r3, [sp, #16]
	ldr	r3, [r1]
	str	r1, [sp, #20]
	str	r3, [sp, #548]
	bl	dev_get_drvdata
	add	r3, r0, #24
	mov	r8, r0
	add	fp, r0, #508
	mov	r0, r3
	str	r3, [sp, #12]
	bl	mutex_lock
	ldrb	r5, [r8, #16]	@ zero_extendqisi2
	cmp	r5, #0
	bne	.L5179
	ldr	r4, [r8, #508]
	cmp	fp, r4
	sub	r4, r4, #120
	beq	.L5140
.L5139:
	mov	r9, r4
	ldr	r7, [r9, #112]!
	cmp	r9, r7
	beq	.L5142
.L5141:
	mov	r0, r7
	ldr	r3, [r7, #-4]!
	str	r5, [r3, #20]
	bl	list_del
	mov	r0, r7
	bl	kfree
	ldr	r7, [r4, #112]
	cmp	r7, r9
	bne	.L5141
.L5142:
	ldr	r3, [r4, #120]
	str	r9, [r4, #112]
	str	r9, [r4, #116]
	cmp	fp, r3
	sub	r4, r3, #120
	bne	.L5139
.L5140:
	mov	r1, r6
	mov	r2, #256
	add	r0, sp, #36
	movw	r5, #:lower16:.LC326
	bl	strlcpy
	add	r0, sp, #36
	movt	r5, #:upper16:.LC326
	bl	strim
	movw	r3, #:lower16:.LC324
	cmp	r0, #0
	str	fp, [sp]
	movt	r3, #:upper16:.LC324
	mov	r9, #0
	stmib	sp, {r3, fp}
	str	r0, [sp, #28]
	beq	.L5180
.L5156:
	add	r0, sp, #28
	ldr	r1, [sp, #4]
	bl	strsep
	cmp	r0, #0
	str	r0, [sp, #24]
	beq	.L5144
	ldr	r3, [sp]
	ldr	r2, [sp, #8]
	ldr	r3, [r3]
	cmp	r3, r2
	beq	.L5145
	sub	r10, r3, #120
	str	r3, [sp]
.L5146:
	cmp	r0, #0
	movw	fp, #:lower16:.LC329
	movt	fp, #:upper16:.LC329
	beq	.L5144
.L5155:
	mov	r1, r5
	add	r0, sp, #24
	add	r7, sp, #292
	bl	strsep
	mov	r6, r0
	mov	r2, #256
	mov	r0, r7
	add	r1, r8, #196
	bl	strlcpy
	add	r4, sp, #552
	str	r7, [r4, #-520]!
.L5151:
	mov	r1, r5
	mov	r0, r4
	bl	strsep
	subs	r1, r0, #0
	beq	.L5149
	mov	r0, r6
	bl	strcmp
	cmp	r0, #0
	beq	.L5150
.L5149:
	ldr	r3, [sp, #32]
	cmp	r3, #0
	bne	.L5151
	mov	r2, r6
	mov	r1, r10
	mov	r0, r8
	bl	android_enable_function
	cmp	r0, #0
	bne	.L5181
.L5154:
	ldr	r0, [sp, #24]
	cmp	r0, #0
	bne	.L5155
.L5144:
	ldr	r0, [sp, #28]
	cmp	r0, #0
	bne	.L5156
.L5180:
	ldr	r5, [sp]
	ldr	fp, [sp, #8]
	ldr	r4, [r5]
	cmp	r4, fp
	beq	.L5157
.L5158:
	mov	r0, r4
	sub	r4, r4, #120
	bl	list_del
	ldr	r3, [r8, #516]
	mov	r0, r4
	sub	r3, r3, #1
	str	r3, [r8, #516]
	bl	kfree
	ldr	r4, [r5]
	cmp	r4, fp
	bne	.L5158
.L5157:
	ldr	r0, [sp, #12]
	bl	mutex_unlock
	ldr	r0, [sp, #16]
.L5136:
	ldr	r3, [sp, #20]
	ldr	r2, [sp, #548]
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L5182
	add	sp, sp, #556
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5150:
	cmp	r9, #0
	beq	.L5183
.L5160:
	mov	r9, #1
	b	.L5154
.L5183:
	movw	r2, #:lower16:.LC327
	mov	r1, r10
	movt	r2, #:upper16:.LC327
	mov	r0, r8
	bl	android_enable_function
	subs	r2, r0, #0
	beq	.L5160
	movw	r0, #:lower16:.LC328
	ldr	r1, .L5185
	movt	r0, #:upper16:.LC328
	bl	printk
	b	.L5154
.L5145:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L5163
	mov	r2, #128
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r10, r0, #0
	beq	.L5184
.L5147:
	ldr	ip, [r8]
	movw	r1, #:lower16:android_unbind_config
	add	r3, r10, #112
	ldr	r2, [r8, #516]
	movt	r1, #:upper16:android_unbind_config
	mov	r0, #12480
	add	r2, r2, #1
	str	r2, [r8, #516]
	ldr	r2, [sp, #8]
	str	ip, [r10]
	str	r1, [r10, #12]
	ldr	r1, [r8, #516]
	strb	r1, [r10, #20]
	strh	r0, [r10, #22]	@ movhi
	add	r0, r10, #120
	str	r3, [r10, #112]
	str	r3, [r10, #116]
	ldr	r1, [r8, #512]
	bl	__list_add
	ldr	r3, [sp]
	ldr	r0, [sp, #24]
	ldr	r3, [r3]
	str	r3, [sp]
	b	.L5146
.L5163:
	mov	r10, #16
	b	.L5147
.L5182:
	bl	__stack_chk_fail
.L5181:
	mov	r3, r0
	mov	r2, r6
	ldr	r1, .L5185
	mov	r0, fp
	bl	printk
	b	.L5154
.L5179:
	ldr	r0, [sp, #12]
	bl	mutex_unlock
	mvn	r0, #15
	b	.L5136
.L5184:
	ldr	r2, .L5185+4
	movw	r0, #:lower16:.LC325
	mvn	r10, #11
	movt	r0, #:upper16:.LC325
	mov	r1, r2
	bl	printk
	ldr	r3, [sp]
	ldr	r0, [sp, #24]
	ldr	r3, [r3]
	str	r3, [sp]
	b	.L5146
.L5186:
	.align	2
.L5185:
	.word	.LANCHOR2+3016
	.word	.LANCHOR2+2992
	.fnend
	.size	functions_store, .-functions_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_bind, %function
android_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r1, .L5276
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	ldr	r4, [r8, #2232]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	fp, [r0]
	movw	r0, #:lower16:.LC330
	movt	r0, #:upper16:.LC330
	str	r7, [r4, #-512]
	bl	printk
	ldr	r3, [fp]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L5188
	mov	r1, #0
	mov	r0, fp
	blx	r3
.L5188:
	ldr	r3, [r8, #3576]
	cmp	r3, #1
	beq	.L5189
.L5195:
	ldrb	r3, [r7, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L5191
	add	r2, r3, #1
	movw	r4, #:lower16:.LANCHOR0
	uxtb	r2, r2
	movt	r4, #:upper16:.LANCHOR0
	cmp	r2, #254
	strb	r2, [r4, #538]
	strb	r2, [r4, #1156]
	strb	r2, [r7, #48]
	beq	.L5191
	add	r3, r3, #2
	movw	r1, #:lower16:.LC335
	ldr	r0, .L5276+4
	uxtb	r3, r3
	movt	r1, #:upper16:.LC335
	mov	r2, #255
	strb	r3, [r7, #48]
	strb	r3, [r4, #1164]
	strb	r3, [r4, #539]
	bl	strlcpy
	movw	r1, #:lower16:.LC335
	mov	r2, #255
	ldr	r0, .L5276+8
	movt	r1, #:upper16:.LC335
	bl	strlcpy
	movw	r1, #:lower16:.LC336
	mov	r2, #255
	ldr	r0, .L5276+12
	movt	r1, #:upper16:.LC336
	bl	strlcpy
	ldrb	r3, [r7, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L5191
	add	r3, r3, #1
	movw	r0, #:lower16:.LC337
	uxtb	r3, r3
	movt	r0, #:upper16:.LC337
	strb	r3, [r7, #48]
	ldr	r5, [fp, #28]
	strb	r3, [r4, #540]
	strb	r3, [r4, #1172]
	mov	r1, r5
	bl	strcmp
	cmp	r0, #0
	bne	.L5272
	movw	r3, #513
.L5211:
	ldr	r2, .L5276+16
	strh	r3, [r2, #12]	@ movhi
.L5212:
	mov	r3, #4
	mov	r6, #0
	str	r3, [r8, #3580]
.L5187:
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5272:
	movw	r0, #:lower16:.LC338
	mov	r1, r5
	movt	r0, #:upper16:.LC338
	bl	strcmp
	cmp	r0, #0
	beq	.L5215
	movw	r0, #:lower16:.LC339
	mov	r1, r5
	movt	r0, #:upper16:.LC339
	bl	strcmp
	cmp	r0, #0
	beq	.L5216
	movw	r0, #:lower16:.LC340
	mov	r1, r5
	movt	r0, #:upper16:.LC340
	bl	strcmp
	cmp	r0, #0
	beq	.L5217
	movw	r0, #:lower16:.LC341
	mov	r1, r5
	movt	r0, #:upper16:.LC341
	bl	strcmp
	cmp	r0, #0
	beq	.L5218
	movw	r0, #:lower16:.LC342
	mov	r1, r5
	movt	r0, #:upper16:.LC342
	bl	strcmp
	cmp	r0, #0
	beq	.L5219
	movw	r0, #:lower16:.LC343
	mov	r1, r5
	movt	r0, #:upper16:.LC343
	bl	strcmp
	cmp	r0, #0
	beq	.L5220
	movw	r0, #:lower16:.LC344
	mov	r1, r5
	movt	r0, #:upper16:.LC344
	bl	strcmp
	cmp	r0, #0
	beq	.L5221
	movw	r0, #:lower16:.LC345
	mov	r1, r5
	movt	r0, #:upper16:.LC345
	bl	strcmp
	cmp	r0, #0
	beq	.L5222
	movw	r0, #:lower16:.LC346
	mov	r1, r5
	movt	r0, #:upper16:.LC346
	bl	strcmp
	cmp	r0, #0
	beq	.L5223
	movw	r0, #:lower16:.LC347
	mov	r1, r5
	movt	r0, #:upper16:.LC347
	bl	strcmp
	cmp	r0, #0
	beq	.L5224
	movw	r0, #:lower16:.LC348
	mov	r1, r5
	movt	r0, #:upper16:.LC348
	bl	strcmp
	cmp	r0, #0
	beq	.L5225
	movw	r0, #:lower16:.LC349
	mov	r1, r5
	movt	r0, #:upper16:.LC349
	bl	strcmp
	cmp	r0, #0
	beq	.L5226
	movw	r0, #:lower16:.LC350
	mov	r1, r5
	movt	r0, #:upper16:.LC350
	bl	strcmp
	cmp	r0, #0
	beq	.L5227
	movw	r0, #:lower16:.LC351
	mov	r1, r5
	movt	r0, #:upper16:.LC351
	bl	strcmp
	cmp	r0, #0
	beq	.L5228
	movw	r0, #:lower16:.LC352
	mov	r1, r5
	movt	r0, #:upper16:.LC352
	bl	strcmp
	cmp	r0, #0
	beq	.L5229
	movw	r0, #:lower16:.LC353
	mov	r1, r5
	movt	r0, #:upper16:.LC353
	bl	strcmp
	cmp	r0, #0
	beq	.L5230
	movw	r0, #:lower16:.LC354
	mov	r1, r5
	movt	r0, #:upper16:.LC354
	bl	strcmp
	cmp	r0, #0
	beq	.L5231
	movw	r0, #:lower16:.LC355
	mov	r1, r5
	movt	r0, #:upper16:.LC355
	bl	strcmp
	cmp	r0, #0
	beq	.L5232
	movw	r0, #:lower16:.LC356
	mov	r1, r5
	movt	r0, #:upper16:.LC356
	bl	strcmp
	cmp	r0, #0
	beq	.L5233
	movw	r0, #:lower16:.LC357
	mov	r1, r5
	movt	r0, #:upper16:.LC357
	bl	strcmp
	cmp	r0, #0
	beq	.L5234
	movw	r0, #:lower16:.LC358
	mov	r1, r5
	movt	r0, #:upper16:.LC358
	bl	strcmp
	cmp	r0, #0
	beq	.L5235
	movw	r0, #:lower16:.LC359
	mov	r1, r5
	movt	r0, #:upper16:.LC359
	bl	strcmp
	cmp	r0, #0
	beq	.L5236
	movw	r0, #:lower16:.LC360
	mov	r1, r5
	movt	r0, #:upper16:.LC360
	bl	strcmp
	cmp	r0, #0
	beq	.L5237
	movw	r0, #:lower16:.LC361
	mov	r1, r5
	movt	r0, #:upper16:.LC361
	bl	strcmp
	cmp	r0, #0
	beq	.L5238
	movw	r0, #:lower16:.LC362
	mov	r1, r5
	movt	r0, #:upper16:.LC362
	bl	strcmp
	cmp	r0, #0
	beq	.L5239
	movw	r0, #:lower16:.LC363
	mov	r1, r5
	movt	r0, #:upper16:.LC363
	bl	strcmp
	cmp	r0, #0
	moveq	r3, #564
	beq	.L5211
	ldr	r2, .L5276+20
	movw	r0, #:lower16:.LC364
	mov	r3, r5
	movt	r0, #:upper16:.LC364
	sub	r1, r2, #40
	bl	printk
	movw	r3, #39321
	add	r2, r4, #524
	movt	r3, 65535
	strh	r3, [r2, #12]	@ movhi
	b	.L5212
.L5215:
	movw	r3, #514
	b	.L5211
.L5189:
	ldr	r1, [r4, #-516]
	ldr	r3, [r8, #2228]
	ldr	r2, .L5276+24
	mov	r0, r1
	sub	r1, r3, #520
	cmp	r3, r2
	str	r1, [sp, #8]
	beq	.L5192
	ldr	r3, [r3, #-512]
	cmp	r7, r3
	ldrne	r1, [sp, #8]
	bne	.L5193
	b	.L5192
.L5196:
	ldr	r3, [r3, #-512]
	cmp	r7, r3
	beq	.L5270
.L5193:
	ldr	r3, [r1, #520]
	cmp	r3, r2
	sub	r1, r3, #520
	bne	.L5196
.L5270:
	str	r1, [sp, #8]
.L5192:
	ldr	r4, [r0]
	cmp	r4, #0
	beq	.L5195
	movw	r5, #:lower16:.LC331
	mov	r9, #1
	str	fp, [sp, #12]
	movt	r5, #:upper16:.LC331
	mov	r10, r0
.L5194:
	mov	r1, r5
	mov	r0, #208
	ldr	r2, [r4]
	bl	kasprintf
	cmp	r0, #0
	mov	r3, #0
	str	r0, [r4, #12]
	str	r3, [r4, #20]
	ldr	r3, [sp, #8]
	beq	.L5197
	ldr	r1, [r3, #12]
	mov	r2, r9
	str	r0, [sp]
	mov	r3, r4
	ldr	r0, [r8, #3572]
	bl	device_create
	cmn	r0, #4096
	str	r0, [r4, #8]
	bhi	.L5273
	ldr	r3, [r4, #24]
	cmp	r3, #0
	beq	.L5200
	mov	r1, r7
	mov	r0, r4
	blx	r3
	cmp	r0, #0
	bne	.L5274
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L5204
	ldr	r1, [r2]
	add	r6, r2, #4
	cmp	r1, #0
	bne	.L5271
	b	.L5204
.L5275:
	cmp	r0, #0
	bne	.L5267
	mov	r6, fp
.L5271:
	ldr	r0, [r4, #8]
.L5208:
	mov	fp, r6
	bl	device_create_file
	ldr	r1, [fp], #4
	cmp	r1, #0
	bne	.L5275
	cmp	r0, #0
	bne	.L5267
.L5204:
	add	r9, r9, #1
	add	r3, r10, r9, lsl #2
	ldr	r4, [r3, #-4]
	cmp	r4, #0
	bne	.L5194
	ldr	fp, [sp, #12]
	b	.L5195
.L5216:
	movw	r3, #515
	b	.L5211
.L5267:
	ldr	r2, .L5276+28
	mov	r10, r6
	mov	r6, r0
	movw	r0, #:lower16:.LC334
	ldr	r3, [r4]
	sub	r7, r10, #4
	movt	r0, #:upper16:.LC334
	mov	r1, r2
	bl	printk
	ldr	r3, [r4, #16]
	ldr	r1, [fp, #-8]
	cmp	r7, r3
	beq	.L5210
.L5209:
	ldr	r0, [r4, #8]
	bl	device_remove_file
	ldr	r1, [r7], #-4
	ldr	r3, [r4, #16]
	cmp	r7, r3
	bne	.L5209
.L5210:
	ldr	r3, [r4, #28]
	cmp	r3, #0
	beq	.L5202
	mov	r0, r4
	blx	r3
.L5202:
	ldr	r3, [r4, #8]
	ldr	r0, [r8, #3572]
	ldr	r1, [r3, #288]
	bl	device_destroy
	mov	r3, #0
	ldr	r0, [r4, #12]
	str	r3, [r4, #8]
	bl	kfree
	ldr	r3, [sp, #8]
	ldr	r0, [r3, #4]
	bl	android_cleanup_functions
	b	.L5187
.L5273:
	ldr	r2, .L5276+28
	movw	r0, #:lower16:.LC332
	ldr	r3, [r4, #12]
	movt	r0, #:upper16:.LC332
	ldr	fp, [sp, #12]
	mov	r1, r2
	bl	printk
	mov	r3, #0
	ldr	r6, [r4, #8]
	ldr	r0, [r4, #12]
	str	r3, [r4, #8]
	bl	kfree
	ldr	r3, [sp, #8]
	ldr	r0, [r3, #4]
	bl	android_cleanup_functions
	cmp	r6, #0
	beq	.L5195
	b	.L5187
.L5200:
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L5204
	ldr	r1, [r2]
	add	r6, r2, #4
	cmp	r1, #0
	bne	.L5208
	b	.L5204
.L5191:
	mvn	r6, #18
	b	.L5187
.L5217:
	movw	r3, #518
	b	.L5211
.L5218:
	mov	r3, #520
	b	.L5211
.L5197:
	ldr	r0, [r3, #4]
	mvn	r6, #11
	bl	android_cleanup_functions
	b	.L5187
.L5219:
	movw	r3, #529
	b	.L5211
.L5220:
	movw	r3, #530
	b	.L5211
.L5221:
	movw	r3, #531
	b	.L5211
.L5222:
	mov	r3, #532
	b	.L5211
.L5223:
	movw	r3, #534
	b	.L5211
.L5224:
	mov	r3, #536
	b	.L5211
.L5274:
	ldr	r2, .L5276+28
	mov	r6, r0
	movw	r0, #:lower16:.LC333
	ldr	r3, [r4]
	movt	r0, #:upper16:.LC333
	mov	r1, r2
	bl	printk
	b	.L5202
.L5225:
	movw	r3, #537
	b	.L5211
.L5238:
	movw	r3, #562
	b	.L5211
.L5237:
	movw	r3, #561
	b	.L5211
.L5236:
	mov	r3, #560
	b	.L5211
.L5235:
	movw	r3, #553
	b	.L5211
.L5234:
	mov	r3, #552
	b	.L5211
.L5233:
	movw	r3, #551
	b	.L5211
.L5239:
	movw	r3, #563
	b	.L5211
.L5226:
	mov	r3, #544
	b	.L5211
.L5228:
	movw	r3, #546
	b	.L5211
.L5227:
	movw	r3, #545
	b	.L5211
.L5232:
	movw	r3, #550
	b	.L5211
.L5231:
	movw	r3, #549
	b	.L5211
.L5230:
	mov	r3, #548
	b	.L5211
.L5229:
	movw	r3, #547
	b	.L5211
.L5277:
	.align	2
.L5276:
	.word	.LANCHOR2+3032
	.word	.LANCHOR1+3256
	.word	.LANCHOR1+3000
	.word	.LANCHOR1+2240
	.word	.LANCHOR0+524
	.word	.LANCHOR2+3072
	.word	.LANCHOR1+2228
	.word	.LANCHOR2+3048
	.fnend
	.size	android_bind, .-android_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_work, %function
android_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r1, #:lower16:.LC365
	movw	r2, #:lower16:.LC366
	strd	r6, [sp, #8]
	movt	r1, #:upper16:.LC365
	movt	r2, #:upper16:.LC366
	strd	r8, [sp, #16]
	movw	r3, #:lower16:.LC368
	movw	ip, #:lower16:.LC367
	strd	r10, [sp, #24]
	movt	r3, #:upper16:.LC368
	movt	ip, #:upper16:.LC367
	str	lr, [sp, #32]
	ldr	r5, [r0, #-172]
	.pad #68
	sub	sp, sp, #68
	mov	r4, r0
	str	r1, [sp, #16]
	movw	r1, #:lower16:.LC369
	str	r2, [sp, #24]
	movw	r2, #:lower16:.LC370
	movt	r1, #:upper16:.LC369
	movt	r2, #:upper16:.LC370
	add	r6, r5, #60
	str	ip, [sp, #32]
	str	r3, [sp, #40]
	mov	r3, #0
	mov	r0, r6
	str	r3, [sp, #20]
	str	r3, [sp, #28]
	str	r3, [sp, #36]
	str	r3, [sp, #44]
	str	r1, [sp, #48]
	str	r3, [sp, #52]
	strd	r2, [sp, #56]
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r4, #-129]	@ zero_extendqisi2
	mov	r9, r0
	ldrb	r7, [r4, #-130]	@ zero_extendqisi2
	cmp	r3, r7
	ldr	r3, [r5, #12]
	beq	.L5279
	cmp	r3, #0
	beq	.L5340
	movw	r1, #:lower16:.LC371
	mov	r2, #3
	movt	r1, #:upper16:.LC371
	sub	r0, r4, #128
	bl	strncmp
	cmp	r0, #0
	eorne	r10, r7, #1
	mvneq	r10, #0
	cmp	r7, #0
	beq	.L5341
	movw	r5, #:lower16:.LANCHOR1
	mov	r3, #3
	movt	r5, #:upper16:.LANCHOR1
	add	r8, sp, #40
	str	r3, [r5, #3584]
.L5298:
	ldrb	r3, [r4, #-132]	@ zero_extendqisi2
	mov	r1, r9
	mov	r0, r6
	strb	r3, [r4, #-131]
	strb	r7, [r4, #-129]
	bl	_raw_spin_unlock_irqrestore
	cmn	r10, #1
	beq	.L5285
	ldr	r2, [r4, #-136]
	cmp	r2, #0
	addne	r3, sp, #24
	beq	.L5285
.L5289:
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldr	r1, [r6, #1188]
	cmp	r1, r10
	beq	.L5288
	ldr	r1, [r2, #4]
	cmp	r1, #0
	beq	.L5288
.L5309:
	cmp	r10, #0
	sub	r0, r4, #120
	str	r3, [sp, #12]
	addne	r1, r1, #1
	mvneq	r1, #0
	bl	pm_qos_update_request
	ldr	r3, [sp, #12]
	str	r10, [r6, #1188]
.L5288:
	cmp	r8, r3
	bne	.L5285
.L5290:
	ldr	r2, [r5, #3588]
	cmp	r2, #0
	bne	.L5342
	ldr	r2, [r5, #3584]
	sub	r2, r2, #3
	cmp	r2, #1
	bhi	.L5307
.L5339:
	mov	r8, r3
	b	.L5303
.L5279:
	cmp	r3, #0
	ldrb	fp, [r4, #-132]	@ zero_extendqisi2
	beq	.L5280
	movw	r5, #:lower16:.LANCHOR1
	mov	r3, #2
	strb	fp, [r4, #-131]
	movt	r5, #:upper16:.LANCHOR1
	mov	r1, r0
	mov	r0, r6
	str	r3, [r5, #3584]
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [r5, #3588]
	cmp	r6, #2
	beq	.L5284
	add	r8, sp, #32
.L5285:
	ldr	r3, [r5, #3584]
	sub	r3, r3, #3
	cmp	r3, #1
	bls	.L5303
	ldr	r0, [r4, #-168]
	mov	r2, r8
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env
.L5304:
	ldr	r3, [r5, #3584]
	str	r3, [r5, #3588]
.L5303:
	ldr	r2, .L5343
	movw	r0, #:lower16:.LC373
	movt	r0, #:upper16:.LC373
	ldr	r3, [r8]
	mov	r1, r2
	bl	printk
.L5278:
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5341:
	movw	r5, #:lower16:.LANCHOR1
	mov	r3, #4
	movt	r5, #:upper16:.LANCHOR1
	add	r8, sp, #48
	str	r3, [r5, #3584]
	b	.L5298
.L5340:
	ldrb	fp, [r4, #-132]	@ zero_extendqisi2
.L5280:
	ldrb	r3, [r4, #-131]	@ zero_extendqisi2
	cmp	r3, fp
	beq	.L5286
	cmp	fp, #0
	movw	r5, #:lower16:.LANCHOR1
	bne	.L5287
	movt	r5, #:upper16:.LANCHOR1
	add	r8, sp, #16
	add	r3, sp, #24
	str	fp, [r5, #3584]
.L5300:
	mov	r1, r9
	mov	r0, r6
	strb	fp, [r4, #-131]
	strb	r7, [r4, #-129]
	str	r3, [sp, #12]
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [r4, #-136]
	ldr	r3, [sp, #12]
	cmp	r2, #0
	movne	r10, #0
	bne	.L5289
	b	.L5288
.L5342:
	ldr	r2, .L5343
	movw	r0, #:lower16:.LC374
	str	r3, [sp, #12]
	movt	r0, #:upper16:.LC374
	mov	r1, r2
	bl	printk
	ldr	r0, [r4, #-168]
	add	r2, sp, #16
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env
	ldr	r2, [r5, #3584]
	ldr	r3, [sp, #12]
	sub	r2, r2, #3
	cmp	r2, #1
	bls	.L5339
.L5307:
	ldr	r0, [r4, #-168]
	mov	r2, r3
	mov	r1, #2
	str	r3, [sp, #12]
	add	r0, r0, #8
	bl	kobject_uevent_env
	ldr	r0, [r4, #-168]
	add	r2, sp, #56
	mov	r1, #2
	ldr	r3, [sp, #12]
	add	r0, r0, #8
	mov	r8, r3
	bl	kobject_uevent_env
	b	.L5304
.L5286:
	mov	r1, r9
	mov	r0, r6
	strb	r7, [r4, #-129]
	bl	_raw_spin_unlock_irqrestore
	ldrb	r1, [r4, #-131]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC372
	ldr	r2, .L5343
	movt	r0, #:upper16:.LC372
	ldr	ip, [r5, #12]
	ldrb	r3, [r4, #-132]	@ zero_extendqisi2
	stm	sp, {r1, ip}
	mov	r1, r2
	bl	printk
	b	.L5278
.L5287:
	mov	r10, #1
	movt	r5, #:upper16:.LANCHOR1
	movw	r1, #:lower16:.LC371
	mov	r2, #3
	movt	r1, #:upper16:.LC371
	sub	r0, r4, #128
	str	r10, [r5, #3584]
	bl	strncmp
	cmp	r0, #0
	addeq	r3, sp, #24
	moveq	r8, r3
	beq	.L5300
	mov	r1, r9
	mov	r0, r6
	strb	r10, [r4, #-131]
	strb	r7, [r4, #-129]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-136]
	cmp	r3, #0
	beq	.L5338
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldr	r2, [r6, #1188]
	cmp	r2, #1
	beq	.L5338
	ldr	r1, [r3, #4]
	cmp	r1, #0
	addne	r3, sp, #24
	movne	r8, r3
	bne	.L5309
.L5338:
	add	r3, sp, #24
	b	.L5290
.L5284:
	ldr	r2, .L5343
	movw	r0, #:lower16:.LC374
	movt	r0, #:upper16:.LC374
	mov	r1, r2
	bl	printk
	ldr	r0, [r4, #-168]
	add	r2, sp, #16
	mov	r1, r6
	add	r0, r0, #8
	bl	kobject_uevent_env
	ldr	r3, [r5, #3584]
	sub	r3, r3, #3
	cmp	r3, #1
	addls	r8, sp, #32
	bls	.L5303
	ldr	r0, [r4, #-168]
	add	r2, sp, #32
	mov	r1, r6
	mov	r8, r2
	add	r0, r0, #8
	bl	kobject_uevent_env
	b	.L5304
.L5344:
	.align	2
.L5343:
	.word	.LANCHOR2+3088
	.fnend
	.size	android_work, .-android_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_send_hid_event, %function
acc_complete_send_hid_event:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, [r1, #32]
	ldr	ip, [r1, #44]
	ldr	r3, [r1, #48]
	cmp	ip, #0
	bne	.L5349
	mov	r2, r1
	.save {lr}
	str	lr, [sp, #-4]!
	mov	lr, #1
	.pad #12
	sub	sp, sp, #12
	ldr	r2, [r2]
	mov	r1, ip
	ldr	r0, [r0, #8]
	str	lr, [sp]
	bl	hid_report_raw_event
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L5349:
	movw	r0, #:lower16:.LC375
	mov	r1, ip
	movt	r0, #:upper16:.LC375
	b	printk
	.fnend
	.size	acc_complete_send_hid_event, .-acc_complete_send_hid_event
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_work, %function
acc_hid_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r7, [r3, #2504]
	.pad #28
	sub	sp, sp, #28
	add	r9, sp, #8
	str	r9, [sp, #8]
	add	r6, r7, #88
	mov	r8, r7
	str	r9, [sp, #12]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r8, #1776]!
	mov	r10, r0
	cmp	r5, r8
	ldr	r4, [r5]
	bne	.L5353
	b	.L5351
.L5352:
	cmp	r4, r8
	mov	r5, r4
	ldr	r3, [r4]
	beq	.L5351
.L5366:
	mov	r4, r3
.L5353:
	ldr	r3, [r5, #24]
	ldr	r2, [r5, #28]
	cmp	r2, r3
	bne	.L5352
	mov	r0, r5
	bl	__list_del_entry
	ldr	r2, [sp, #8]
	mov	r0, r5
	mov	r1, r9
	bl	__list_add
	cmp	r4, r8
	mov	r5, r4
	ldr	r3, [r4]
	bne	.L5366
.L5351:
	ldr	r2, [r7, #1784]
	add	r3, r7, #1776
	add	r3, r3, #8
	cmp	r3, r2
	addeq	r8, sp, #16
	streq	r8, [sp, #16]
	streq	r8, [sp, #20]
	beq	.L5355
	ldr	r1, [r7, #1788]
	add	r8, sp, #24
	str	r2, [r8, #-8]!
	str	r1, [sp, #20]
	str	r8, [r2, #4]
	ldr	r2, [sp, #20]
	str	r8, [r2]
	str	r3, [r7, #1784]
	str	r3, [r7, #1788]
.L5355:
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r4, [sp, #8]
	cmp	r4, r9
	ldr	r5, [r4]
	beq	.L5356
	movw	r3, #:lower16:.LC377
	add	r10, r7, #1760
	movt	r3, #:upper16:.LC377
	add	r10, r10, #8
	str	r3, [sp, #4]
	b	.L5362
.L5367:
	mov	r5, r3
.L5362:
	bl	hid_allocate_device
	cmn	r0, #4096
	movw	r2, #:lower16:.LANCHOR0
	ldr	ip, .L5375
	mov	fp, r0
	mvn	r1, #0
	movt	r2, #:upper16:.LANCHOR0
	mov	lr, #3
	bhi	.L5373
	ldr	r2, [r2, #612]
	strh	lr, [r0, #32]	@ movhi
	str	r1, [r0, #36]
	str	r1, [r0, #40]
	str	r2, [r0, #3200]
	str	ip, [r0, #3548]
	str	r4, [r0, #3848]
	bl	hid_add_device
	subs	r1, r0, #0
	streq	fp, [r4, #8]
	bne	.L5374
.L5359:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	mov	r0, r4
	bl	__list_del_entry
	mov	r0, r4
	mov	r1, r10
	ldr	r2, [r7, #1768]
	bl	__list_add
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L5361:
	cmp	r5, r9
	mov	r4, r5
	ldr	r3, [r5]
	bne	.L5367
.L5356:
	ldr	r4, [sp, #16]
	cmp	r4, r8
	ldr	r5, [r4]
	beq	.L5350
.L5365:
	mov	r0, r4
	bl	list_del
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L5364
	bl	hid_destroy_device
.L5364:
	ldr	r0, [r4, #20]
	bl	kfree
	mov	r0, r4
	mov	r4, r5
	bl	kfree
	cmp	r5, r8
	ldr	r5, [r5]
	bne	.L5365
.L5350:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5373:
	cmp	r0, #0
	beq	.L5359
	b	.L5358
.L5374:
	movw	r0, #:lower16:.LC376
	movt	r0, #:upper16:.LC376
	bl	printk
	mov	r0, fp
	bl	hid_destroy_device
.L5358:
	mov	r1, r4
	ldr	r0, [sp, #4]
	bl	printk
	ldr	r0, [r4, #20]
	bl	kfree
	mov	r0, r4
	bl	kfree
	b	.L5361
.L5376:
	.align	2
.L5375:
	.word	.LANCHOR0+1192
	.fnend
	.size	acc_hid_work, .-acc_hid_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_parse, %function
acc_hid_parse:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #3848]
	ldr	r1, [r3, #20]
	ldr	r2, [r3, #24]
	bl	hid_parse_report
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
	.fnend
	.size	acc_hid_parse, .-acc_hid_parse
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	raise_exception, %function
raise_exception:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r5, r0, #44
	mov	r4, r0
	mov	r0, r5
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	mov	r7, r0
	cmp	r3, r6
	bgt	.L5381
	ldr	r3, [r4, #56]
	str	r6, [r4, #112]
	ldr	r2, [r4, #168]
	str	r3, [r4, #116]
	cmp	r2, #0
	beq	.L5381
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L5381:
	mov	r1, r7
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	raise_exception, .-raise_exception
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_disable, %function
fsg_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrb	r3, [r0, #94]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L5388
	ldr	r0, [r0, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	mov	r1, #0
	ldr	r2, [r4, #100]
	bfc	r3, #0, #1
	strb	r3, [r4, #94]
	str	r1, [r2]
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
.L5388:
	tst	r3, #2
	beq	.L5389
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	mov	r1, #0
	ldr	r2, [r4, #104]
	bfc	r3, #1, #1
	strb	r3, [r4, #94]
	str	r1, [r2]
.L5389:
	ldr	r3, [r4, #88]
	mov	r2, #0
	mov	r1, #4
	str	r2, [r3, #12]
	ldr	r0, [r4, #88]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	raise_exception
	.fnend
	.size	fsg_disable, .-fsg_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_setup, %function
fsg_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #88]
	ldrh	lr, [r1, #4]	@ unaligned
	ldrh	r6, [r1, #2]	@ unaligned
	ldrh	r5, [r1, #6]	@ unaligned
	ldr	r2, [r3, #8]
	ldr	r0, [r3, #52]
	cmp	r2, #0
	beq	.L5398
	ldr	r2, [r3, #56]
	mov	ip, #0
	add	r2, r2, #1
	str	r2, [r3, #56]
	str	ip, [r0, #4]
	str	ip, [r0, #32]
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	cmp	r3, #254
	beq	.L5400
	cmp	r3, #255
	bne	.L5407
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r3, #33
	bne	.L5407
	ldrh	r3, [r4, #92]
	cmp	r3, lr
	bne	.L5409
	orrs	r3, r6, r5
	bne	.L5409
	ldr	r0, [r4, #88]
	mov	r1, #2
	bl	raise_exception
	ldr	r2, [r4, #88]
	movw	r3, #1255
	movw	r0, #32767
	ldr	r2, [r2, #4]
	cmp	r2, #0
	moveq	r0, r3
	b	.L5397
.L5407:
	mvn	r0, #94
.L5397:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5400:
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r3, #161
	bne	.L5407
	ldrh	r3, [r4, #92]
	cmp	r3, lr
	bne	.L5409
	cmp	r5, #1
	cmpeq	r6, #0
	bne	.L5409
	ldr	r3, [r4, #88]
	mov	r2, #1
	ldr	r1, [r0]
	ldr	r3, [r3, #92]
	sub	r3, r3, #1
	strb	r3, [r1]
	str	r2, [r0, #4]
	ldr	r0, [r4, #88]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	ep0_queue
.L5398:
	ldr	r0, [r3]
	movw	r1, #:lower16:.LC74
	movw	r3, #706
	movt	r1, #:upper16:.LC74
	ldr	r2, .L5412
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC75
	movw	r1, #550
	movt	r0, #:upper16:.LC75
	bl	warn_slowpath_null
	mvn	r0, #94
	b	.L5397
.L5409:
	mvn	r0, #32
	b	.L5397
.L5413:
	.align	2
.L5412:
	.word	.LANCHOR2+3104
	.fnend
	.size	fsg_setup, .-fsg_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_show_file, %function
fsg_show_file:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	mov	r6, r0
	bl	down_read
	ldr	r0, [r4, #-48]
	cmp	r0, #0
	moveq	r4, r0
	strbeq	r0, [r5]
	beq	.L5417
	add	r0, r0, #8
	movw	r2, #4095
	mov	r1, r5
	bl	d_path
	cmn	r0, #4096
	mov	r4, r0
	bhi	.L5417
	bl	strlen
	mov	r7, r0
	mov	r2, r0
	mov	r1, r4
	mov	r0, r5
	bl	memmove
	add	r4, r7, #1
	mov	r2, #10
	mov	r3, #0
	strb	r2, [r5, r7]
	strb	r3, [r5, r4]
.L5417:
	mov	r0, r6
	bl	up_read
	ldrd	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	fsg_show_file, .-fsg_show_file
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_store_ro, %function
fsg_store_ro:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r2
	strd	r6, [sp, #8]
	mov	r7, r3
	mov	r6, r0
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	mov	r5, r0
	add	r2, sp, #4
	mov	r0, r4
	mov	r1, #2
	bl	kstrtouint
	subs	r4, r0, #0
	beq	.L5424
.L5419:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L5424:
	mov	r0, r5
	bl	down_read
	ldr	r3, [r6, #-48]
	cmp	r3, #0
	mvnne	r4, #15
	beq	.L5425
.L5421:
	mov	r0, r5
	bl	up_read
	b	.L5419
.L5425:
	ldr	r2, [sp, #4]
	mov	r4, r7
	ldrb	r3, [r6, #-24]	@ zero_extendqisi2
	and	r2, r2, #1
	bfi	r3, r2, #1, #1
	bfi	r3, r2, #0, #1
	strb	r3, [r6, #-24]
	b	.L5421
	.fnend
	.size	fsg_store_ro, .-fsg_store_ro
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_store_cdrom, %function
fsg_store_cdrom:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r2
	strd	r6, [sp, #8]
	mov	r7, r3
	mov	r6, r0
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	mov	r5, r0
	add	r2, sp, #4
	mov	r0, r4
	mov	r1, #2
	bl	kstrtouint
	subs	r4, r0, #0
	beq	.L5431
.L5426:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L5431:
	mov	r0, r5
	bl	down_read
	ldr	r3, [r6, #-48]
	cmp	r3, #0
	mvnne	r4, #15
	beq	.L5432
.L5428:
	mov	r0, r5
	bl	up_read
	b	.L5426
.L5432:
	ldrb	r3, [r6, #-24]	@ zero_extendqisi2
	mov	r4, r7
	ldr	r2, [sp, #4]
	bfi	r3, r2, #3, #1
	strb	r3, [r6, #-24]
	b	.L5428
	.fnend
	.size	fsg_store_cdrom, .-fsg_store_cdrom
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_lun_fsync_sub, %function
fsg_lun_fsync_sub:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #24]	@ zero_extendqisi2
	ldr	r0, [r0]
	ubfx	r3, r3, #1, #1
	cmp	r0, #0
	moveq	r3, #1
	cmp	r3, #0
	beq	.L5435
	mov	r0, #0
	bx	lr
.L5435:
	mov	r1, #1
	b	vfs_fsync
	.fnend
	.size	fsg_lun_fsync_sub, .-fsg_lun_fsync_sub
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_store_nofua, %function
fsg_store_nofua:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r1, #2
	mov	r4, r0
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r2
	add	r2, sp, #4
	mov	r5, r3
	bl	kstrtouint
	cmp	r0, #0
	bne	.L5436
	ldr	r3, [sp, #4]
	cmp	r3, #0
	beq	.L5440
.L5438:
	ldrb	r2, [r4, #-24]	@ zero_extendqisi2
	mov	r0, r5
	bfi	r2, r3, #7, #1
	strb	r2, [r4, #-24]
.L5436:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L5440:
	ldrsb	r2, [r4, #-24]
	cmp	r2, #0
	bge	.L5438
	sub	r0, r4, #48
	bl	fsg_lun_fsync_sub
	ldr	r3, [sp, #4]
	b	.L5438
	.fnend
	.size	fsg_store_nofua, .-fsg_store_nofua
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_common_release, %function
fsg_common_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	sub	r7, r0, #336
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #-224]
	cmp	r3, #7
	beq	.L5442
	mov	r0, r7
	mov	r1, #6
	bl	raise_exception
	sub	r0, r6, #184
	bl	wait_for_completion
.L5442:
	ldr	r0, [r6, #-236]
	cmp	r0, #0
	beq	.L5443
	ldr	r5, [r6, #-244]
	cmp	r5, #0
	beq	.L5444
	ldr	r8, .L5465
	add	r4, r0, #48
	add	r10, r8, #16
	add	r9, r8, #32
.L5446:
	mov	r1, r8
	mov	r0, r4
	bl	device_remove_file
	mov	r1, r10
	mov	r0, r4
	bl	device_remove_file
	mov	r1, r9
	mov	r0, r4
	bl	device_remove_file
	mov	r0, r4
	ldr	r1, .L5465+4
	bl	device_remove_file
	ldr	r3, [r4, #-48]
	subs	r0, r3, #0
	beq	.L5445
	bl	fput
	mov	r3, #0
	str	r3, [r4, #-48]
.L5445:
	mov	r0, r4
	add	r4, r4, #392
	bl	device_unregister
	subs	r5, r5, #1
	bne	.L5446
	ldr	r0, [r6, #-236]
.L5444:
	bl	kfree
.L5443:
	ldr	r5, [r6, #-268]
	add	r4, r5, #32
	add	r5, r5, #160
.L5447:
	ldr	r0, [r4, #-32]
	add	r4, r4, #32
	bl	kfree
	cmp	r4, r5
	bne	.L5447
	ldr	r0, [r6, #-268]
	bl	kfree
	ldrb	r3, [r6, #-192]	@ zero_extendqisi2
	tst	r3, #2
	bne	.L5464
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L5464:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	kfree
.L5466:
	.align	2
.L5465:
	.word	.LANCHOR0+1220
	.word	.LANCHOR0+1268
	.fnend
	.size	fsg_common_release, .-fsg_common_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_store_file, %function
fsg_store_file:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	mov	r5, r3
	strd	r6, [sp, #8]
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	ldrb	r3, [r4, #-24]	@ zero_extendqisi2
	mov	r6, r0
	tst	r3, #16
	beq	.L5468
	ldr	r3, [r4, #-48]
	cmp	r3, #0
	bne	.L5478
.L5468:
	cmp	r5, #0
	bne	.L5486
	mov	r0, r6
	bl	down_write
	ldr	r0, [r4, #-48]
	cmp	r0, #0
	beq	.L5475
	bl	fput
	mov	r3, #14848
	str	r5, [r4, #-48]
	movt	r3, 2
	str	r3, [r4, #-12]
.L5475:
	mov	r0, r6
	bl	up_write
.L5474:
	mov	r7, r5
.L5467:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5486:
	sub	r3, r5, #1
	ldrb	r2, [r7, r3]	@ zero_extendqisi2
	cmp	r2, #10
	beq	.L5487
	mov	r0, r6
	bl	down_write
	ldr	r0, [r4, #-48]
	cmp	r0, #0
	beq	.L5473
.L5472:
	bl	fput
	mov	r3, #14848
	mov	r2, #0
	movt	r3, 2
	str	r2, [r4, #-48]
	str	r3, [r4, #-12]
.L5473:
	ldrb	r3, [r7]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L5475
	mov	r1, r7
	sub	r0, r4, #48
	bl	fsg_lun_open
	subs	r7, r0, #0
	bne	.L5476
	mov	r3, #10240
	mov	r0, r6
	movt	r3, 6
	str	r3, [r4, #-12]
	bl	up_write
	b	.L5474
.L5487:
	mov	r2, #0
	mov	r0, r6
	strb	r2, [r7, r3]
	bl	down_write
	ldr	r0, [r4, #-48]
	cmp	r0, #0
	beq	.L5473
	b	.L5472
.L5476:
	mov	r0, r6
	bl	up_write
	cmp	r7, #0
	blt	.L5467
	b	.L5474
.L5478:
	mvn	r7, #15
	b	.L5467
	.fnend
	.size	fsg_store_file, .-fsg_store_file
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	send_message, %function
send_message:
	.fnstart
	@ args = 0, pretend = 0, frame = 264
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	ldr	r1, .L5496
	strd	r6, [sp, #8]
	mov	r2, r4
	strd	r8, [sp, #16]
	movw	r9, #:lower16:__stack_chk_guard
	movt	r9, #:upper16:__stack_chk_guard
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r9]
	.pad #264
	sub	sp, sp, #264
	ldr	r8, [r0]
	movw	r0, #:lower16:.LC378
	movt	r0, #:upper16:.LC378
	str	r3, [sp, #260]
	bl	printk
	cmp	r8, #0
	moveq	r0, r8
	beq	.L5488
	movw	r1, #:lower16:.LC379
	mov	r3, r4
	movt	r1, #:upper16:.LC379
	add	r10, sp, #140
	ldrd	r6, [r1]
	add	ip, sp, #20
	movw	r2, #:lower16:.LC380
	ldrd	r4, [r1, #8]
	movt	r2, #:upper16:.LC380
	ldrd	r0, [r1, #16]
	strd	r0, [sp]
	mov	r0, r10
	mov	r1, #120
	strd	r4, [sp, #28]
	ldrd	r4, [sp]
	str	ip, [sp, #8]
	strd	r6, [sp, #20]
	strd	r4, [sp, #36]
	bl	snprintf
	ldr	r0, [r8, #356]
	mov	r3, #0
	str	r10, [sp, #12]
	str	r3, [sp, #16]
	cmp	r0, r3
	beq	.L5490
.L5491:
	add	r0, r8, #40
	add	r2, sp, #8
	mov	r1, #2
	bl	kobject_uevent_env
	mov	r0, #0
.L5488:
	ldr	r2, [sp, #260]
	ldr	r3, [r9]
	cmp	r2, r3
	bne	.L5495
	add	sp, sp, #264
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L5490:
	movw	r1, #:lower16:.LC381
	ldr	r2, .L5496+4
	movt	r1, #:upper16:.LC381
	bl	__class_create
	cmn	r0, #4096
	str	r0, [r8, #356]
	mvnhi	r0, #0
	bls	.L5491
	b	.L5488
.L5495:
	bl	__stack_chk_fail
.L5497:
	.align	2
.L5496:
	.word	.LANCHOR2+3116
	.word	.LANCHOR1+3592
	.fnend
	.size	send_message, .-send_message
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bulk_out_complete, %function
bulk_out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, [r1, #44]
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	ldr	r6, [r1, #32]
	str	lr, [sp, #12]
	ldr	r4, [r0]
	cmn	r2, #104
	beq	.L5508
.L5499:
	.syntax divided
@ 689 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r2, #0
	mov	r3, #1
	str	r3, [r6, #4]
	str	r2, [r6, #28]
	.syntax divided
@ 607 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r4, #168]
	str	r3, [r4, #148]
	cmp	r0, r2
	beq	.L5500
	bl	wake_up_process
.L5500:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L5508:
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5499
	blx	r3
	b	.L5499
	.fnend
	.size	bulk_out_complete, .-bulk_out_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bulk_in_complete, %function
bulk_in_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, [r1, #44]
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	ldr	r6, [r1, #32]
	str	lr, [sp, #12]
	ldr	r4, [r0]
	cmn	r2, #104
	beq	.L5519
.L5510:
	.syntax divided
@ 668 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r3, #0
	str	r3, [r6, #4]
	str	r3, [r6, #20]
	.syntax divided
@ 607 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r4, #168]
	mov	r3, #1
	str	r3, [r4, #148]
	cmp	r0, #0
	beq	.L5511
	bl	wake_up_process
.L5511:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L5519:
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5510
	blx	r3
	b	.L5510
	.fnend
	.size	bulk_in_complete, .-bulk_in_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	sleep_thread, %function
sleep_thread:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, #57344
	strd	r6, [sp, #8]
	movw	r7, #:lower16:system_freezing_cnt
	movt	r5, 65535
	strd	r8, [sp, #16]
	add	r6, r0, #44
	mov	r8, r0
	str	r10, [sp, #24]
	movt	r7, #:upper16:system_freezing_cnt
	mov	r9, #1
	str	lr, [sp, #28]
	b	.L5525
.L5521:
	str	r9, [r0]
	.syntax divided
@ 819 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	mov	r0, r6
	and	r3, r3, r5
	ldr	r2, [r3, #12]
	ldr	r3, [r2, #4]
	ldr	r3, [r3]
	ands	r4, r3, #1
	bne	.L5526
	bl	_raw_spin_lock_irq
	ldr	r3, [r8, #148]
	mov	r0, r6
	cmp	r3, #0
	bne	.L5532
	bl	_raw_spin_unlock_irq
	bl	schedule
.L5525:
	ldr	r3, [r7]
	mov	r2, sp
	and	r2, r2, r5
	ldr	r0, [r2, #12]
	cmp	r3, #0
	beq	.L5521
	bl	freezing_slow_path
	cmp	r0, #0
	mov	r3, sp
	and	r3, r3, r5
	bne	.L5522
	ldr	r0, [r3, #12]
	b	.L5521
.L5522:
	mov	r0, #0
	bl	__refrigerator
	mov	r3, sp
	and	r3, r3, r5
	ldr	r0, [r3, #12]
	b	.L5521
.L5526:
	mvn	r4, #3
.L5523:
	mov	r5, #0
	mov	r0, r6
	str	r5, [r2]
	bl	_raw_spin_lock_irq
	mov	r0, r6
	str	r5, [r8, #148]
	bl	_raw_spin_unlock_irq
	.syntax divided
@ 836 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L5532:
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	and	r5, r5, r3
	ldr	r2, [r5, #12]
	b	.L5523
	.fnend
	.size	sleep_thread, .-sleep_thread
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	send_status, %function
send_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r4, r0, #44
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #104]
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r6, [r5, #60]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L5536
	b	.L5534
.L5553:
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L5534
.L5536:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	sleep_thread
	subs	r3, r0, #0
	mov	r0, r4
	beq	.L5553
.L5533:
	ldrd	r4, [sp]
	mov	r0, r3
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5534:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	cmp	r7, #0
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	beq	.L5537
	tst	r3, #4
	ldr	r1, [r7, #28]
	movne	r1, #2
	beq	.L5554
.L5538:
	ldr	r3, [r6]
	movw	r0, #21333
	movw	r2, #:lower16:.LANCHOR1
	movt	r0, 21314
	movt	r2, #:upper16:.LANCHOR1
	ldr	ip, [r2, #3592]
	str	r0, [r3]
	ldr	r0, [r5, #132]
	cmp	ip, #0
	str	r0, [r3, #4]
	ldr	r0, [r5, #136]
	str	r0, [r3, #8]
	streq	ip, [r3, #8]
	beq	.L5542
	ldr	r0, [r5, #136]
	mov	ip, #0
	str	ip, [r2, #3592]
	str	r0, [r3, #8]
.L5542:
	strb	r1, [r3, #12]
	ldr	r3, [r6, #16]
	mov	r2, #13
	mov	r0, r5
	mov	r1, r6
	str	r2, [r3, #4]
	ldr	r3, [r6, #16]
	ldrb	r2, [r3, #26]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #26]
	bl	start_in_transfer
	cmp	r0, #0
	ldrne	r2, [r6, #8]
	movne	r3, #0
	mvneq	r3, #4
	strne	r2, [r5, #60]
	b	.L5533
.L5554:
	adds	r1, r1, #0
	movne	r1, #1
	b	.L5538
.L5537:
	tst	r3, #16
	and	r3, r3, #4
	beq	.L5540
	cmp	r3, #0
	moveq	r1, #0
	movne	r1, #2
	b	.L5538
.L5540:
	cmp	r3, #0
	moveq	r1, #1
	movne	r1, #2
	b	.L5538
	.fnend
	.size	send_status, .-send_status
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	halt_bulk_in_endpoint, %function
halt_bulk_in_endpoint:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, #1
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #100]
	b	.L5568
.L5560:
	cmn	r0, #11
	bne	.L5569
	mov	r0, #100
	bl	msleep_interruptible
	cmp	r0, #0
	mov	r1, #1
	bne	.L5562
	ldr	r0, [r4, #100]
.L5568:
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	cmp	r0, #0
	bne	.L5560
.L5567:
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
.L5569:
	ldr	r3, [r4, #84]
	movw	r1, #:lower16:.LC382
	mov	r2, r0
	movt	r1, #:upper16:.LC382
	add	r0, r3, #32
	bl	dev_warn
	b	.L5567
.L5562:
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #3
	ldr	pc, [sp], #4
	.fnend
	.size	halt_bulk_in_endpoint, .-halt_bulk_in_endpoint
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	do_read, %function
do_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r3, [r0, #76]	@ zero_extendqisi2
	.pad #36
	sub	sp, sp, #36
	ldrb	r2, [r0, #77]	@ zero_extendqisi2
	ldrb	ip, [r0, #78]	@ zero_extendqisi2
	ldr	r7, [r0, #104]
	cmp	r3, #8
	ldrb	r3, [r0, #79]	@ zero_extendqisi2
	beq	.L5606
	tst	r2, #231
	ldr	r1, [r0, #78]	@ unaligned
	movne	r2, #9216
	mvnne	r3, #21
	movtne	r2, 5
	rev	r1, r1
	strne	r2, [r7, #28]
	bne	.L5570
.L5572:
	ldrd	r2, [r7, #16]
	mov	r5, #0
	cmp	r1, r2
	sbcs	r3, r5, r3
	movge	r2, #8448
	mvnge	r3, #21
	movtge	r2, 5
	strge	r2, [r7, #28]
	bge	.L5570
	ldr	r3, [r7, #40]
	mov	r4, #0
	mov	r5, #0
	ldr	r8, [r0, #128]
	strd	r4, [sp]
	sub	r2, r3, #32
	cmp	r8, #0
	lsl	r2, r1, r2
	str	r2, [sp, #4]
	rsb	r2, r3, #32
	lsl	r3, r1, r3
	ldr	ip, [sp, #4]
	str	r3, [sp]
	orr	r2, ip, r1, lsr r2
	str	r2, [sp, #4]
	beq	.L5575
	mov	r3, sp
	mov	r5, r0
	bic	r9, r3, #8128
	add	r4, r0, #44
	bic	r9, r9, #63
.L5585:
	mov	r0, r4
	ldrd	r10, [r7, #8]
	bl	_raw_spin_lock_irq
	ldr	r6, [r5, #60]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L5577
	b	.L5576
.L5607:
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L5576
.L5577:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	sleep_thread
	subs	r3, r0, #0
	mov	r0, r4
	beq	.L5607
.L5570:
	mov	r0, r3
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5576:
	ldrd	r2, [sp]
	subs	r1, r10, r2
	sbc	r3, fp, r3
	cmp	r8, #16384
	str	r1, [sp, #16]
	str	r3, [sp, #20]
	movcc	r3, r8
	movcs	r3, #16384
	str	r3, [sp, #8]
	mov	r3, #0
	str	r3, [sp, #12]
	ldrd	r0, [sp, #8]
	ldrd	r2, [sp, #16]
	cmp	r2, r0
	sbcs	r1, r3, r1
	blt	.L5608
.L5578:
	mov	r0, r4
	ldr	r10, [sp, #8]
	bl	_raw_spin_unlock_irq
	ldr	r3, [sp, #8]
	cmp	r3, #0
	beq	.L5609
	ldrd	r0, [sp]
	add	r3, sp, #32
	ldr	r2, [sp, #8]
	strd	r0, [r3, #-8]!
	ldr	r1, [r6]
	ldr	r0, [r7]
	bl	vfs_read
	ldr	r3, [r9, #12]
	mov	fp, r0
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r3, r3, #1
	bne	.L5587
	cmp	r0, #0
	blt	.L5581
	cmp	r0, r10
	ldr	r3, [r5, #136]
	bcs	.L5582
	ldr	r2, [r7, #44]
	mov	r0, r4
	rsb	r2, r2, #0
	and	fp, fp, r2
	sub	r1, r3, fp
	ldrd	r2, [sp]
	sub	r8, r8, fp
	str	r1, [r5, #136]
	adds	r2, r2, fp
	adc	r3, r3, fp, asr #31
	strd	r2, [sp]
	bl	_raw_spin_lock_irq
	ldr	r2, [r6, #16]
	mov	r3, #1
	mov	r0, r4
	str	fp, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq
	cmp	fp, r10
	bcc	.L5586
.L5583:
	cmp	r8, #0
	beq	.L5575
	ldr	r3, [r6, #16]
	mov	r1, r6
	mov	r0, r5
	ldrb	r2, [r3, #26]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #26]
	bl	start_in_transfer
	cmp	r0, #0
	beq	.L5575
	ldr	r3, [r6, #8]
	str	r3, [r5, #60]
	b	.L5585
.L5608:
	strd	r2, [sp, #8]
	b	.L5578
.L5581:
	mov	r0, r4
	str	r3, [sp, #8]
	bl	_raw_spin_lock_irq
	ldr	r3, [sp, #8]
	mov	r2, #1
	mov	r0, r4
	ldr	r1, [r6, #16]
	str	r3, [r1, #4]
	str	r2, [r6, #4]
	bl	_raw_spin_unlock_irq
.L5586:
	ldr	r3, [r7, #40]
	mov	r2, #4352
	ldrd	r4, [sp]
	movt	r2, 3
	str	r2, [r7, #28]
	subs	r1, r3, #32
	lsr	r2, r4, r3
	rsb	r3, r3, #32
	orr	r2, r2, r5, lsl r3
	movpl	r3, r5
	orrpl	r2, r2, r3, asr r1
	ldrb	r1, [r7, #24]	@ zero_extendqisi2
	mvn	r3, #4
	str	r2, [r7, #32]
	orr	r2, r1, #64
	strb	r2, [r7, #24]
	b	.L5570
.L5606:
	orr	r1, r3, #134217728
	orr	r1, r1, r2, lsl #16
	orr	r1, r1, ip, lsl #8
	bic	r1, r1, #-16777216
	b	.L5572
.L5582:
	sub	r1, r3, r0
	ldrd	r2, [sp]
	mov	r0, r4
	sub	r8, r8, fp
	str	r1, [r5, #136]
	adds	r2, r2, fp
	adc	r3, r3, fp, asr #31
	strd	r2, [sp]
	bl	_raw_spin_lock_irq
	ldr	r2, [r6, #16]
	mov	r3, #1
	mov	r0, r4
	str	fp, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq
	b	.L5583
.L5575:
	mvn	r3, #4
	b	.L5570
.L5587:
	mvn	r3, #3
	b	.L5570
.L5609:
	ldr	r3, [r7, #40]
	mov	r2, #8448
	mov	r0, r4
	ldrd	r8, [sp]
	movt	r2, 5
	str	r2, [r7, #28]
	subs	r1, r3, #32
	lsr	r2, r8, r3
	rsb	r3, r3, #32
	orr	r2, r2, r9, lsl r3
	movpl	r3, r9
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r7, #24]	@ zero_extendqisi2
	str	r2, [r7, #32]
	orr	r3, r3, #64
	strb	r3, [r7, #24]
	bl	_raw_spin_lock_irq
	ldr	r2, [r6, #16]
	mov	r3, #1
	mov	r1, #0
	mov	r0, r4
	str	r1, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq
	mvn	r3, #4
	b	.L5570
	.fnend
	.size	do_read, .-do_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	send_file_work, %function
send_file_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #60
	sub	sp, sp, #60
	.syntax divided
@ 751 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r1, [r0, #32]
	ldrd	r8, [r0, #48]
	ldrd	r2, [r0, #40]
	str	r1, [sp, #4]
	cmp	r8, #0
	sbcs	r1, r9, #0
	strd	r2, [sp, #24]
	mvnlt	r3, #21
	strlt	r3, [r0, #68]
	blt	.L5610
	ldr	r4, [r0, #56]
	cmp	r4, #0
	bne	.L5652
.L5613:
	ldr	r3, [r0, #-92]
	mov	r6, r0
	ldrh	r3, [r3, #20]
	sub	r3, r3, #1
	asr	r1, r3, #31
	and	r3, r3, r8
	and	r2, r1, r9
	orrs	r3, r3, r2
	moveq	r7, #1
	movne	r7, #0
	cmp	r8, #1
	sbcs	r3, r9, #0
	movlt	r3, r7
	orrge	r3, r7, #1
	cmp	r3, #0
	beq	.L5614
	mov	r3, sp
	sub	fp, r6, #68
	bic	r10, r3, #8128
	sub	r3, r6, #184
	bic	r10, r10, #63
	str	r3, [sp]
	str	fp, [sp, #20]
	b	.L5627
.L5616:
	ldr	r2, [r6, #-80]
	cmp	r2, #3
	beq	.L5621
.L5656:
	cmp	r5, #0
	beq	.L5618
	movw	r2, #:lower16:.LANCHOR0
	mov	r1, #0
	ldr	r3, [r5]
	movt	r2, #:upper16:.LANCHOR0
	ldr	r2, [r2, #520]
	cmp	r2, r8
	sbcs	r1, r1, r9
	movge	r2, r8
	cmp	r4, #0
	beq	.L5624
	mov	r1, #2
	str	r8, [r3]
	strh	r1, [r3, #4]	@ movhi
	ldrh	r1, [r6, #60]
	strh	r1, [r3, #6]	@ movhi
	ldr	r1, [r6, #64]
	str	r1, [r3, #8]
	ldr	r3, [r5]
.L5624:
	add	r1, r3, r4
	sub	r2, r2, r4
	ldr	r0, [sp, #4]
	add	r3, sp, #24
	bl	vfs_read
	subs	r3, r0, #0
	blt	.L5625
	add	r4, r4, r3
	mov	r2, #208
	mov	r1, r5
	str	r4, [r5, #4]
	ldr	r0, [r6, #-92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L5653
	subs	r8, r8, r4
	and	r3, r7, #1
	sbc	r9, r9, r4, asr #31
	cmp	r8, #1
	mov	r4, #0
	sbcs	r2, r9, #0
	orrge	r3, r3, #1
	cmp	r3, r4
	beq	.L5614
.L5627:
	orrs	r3, r8, r9
	mov	r1, fp
	ldr	r0, [sp]
	moveq	r7, #0
	bl	mtp_req_get
	subs	r5, r0, #0
	movne	r3, #0
	bne	.L5616
	ldr	r3, [r6, #-80]
	cmp	r3, #2
	bne	.L5654
	ldr	r1, [r10, #12]
	movw	r3, #:lower16:autoremove_wake_function
	add	r2, sp, #48
	sub	r0, r6, #40
	movt	r3, #:upper16:autoremove_wake_function
	strd	r8, [sp, #8]
	mov	r9, r7
	mov	r7, r4
	ldr	r4, [sp]
	str	r0, [sp, #16]
	str	r5, [sp, #36]
	mov	r5, r0
	str	r1, [sp, #40]
	str	r3, [sp, #44]
	str	r2, [sp, #48]
	str	r2, [sp, #52]
	b	.L5620
.L5655:
	bl	schedule
.L5620:
	mov	r2, #1
	add	r1, sp, #36
	mov	r0, r5
	bl	prepare_to_wait
	mov	r1, fp
	mov	r0, r4
	bl	mtp_req_get
	cmp	r0, #0
	bne	.L5632
	ldr	r3, [r6, #-80]
	cmp	r3, #2
	bne	.L5632
	ldr	r3, [r10, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L5655
	mov	r4, r7
	mov	r7, r9
	ldrd	r8, [sp, #8]
	mov	r3, #65024
	mov	r5, r0
	movt	r3, 65535
.L5619:
	add	r1, sp, #36
	ldr	r0, [sp, #16]
	str	r3, [sp, #8]
	bl	finish_wait
	ldr	r2, [r6, #-80]
	ldr	r3, [sp, #8]
	cmp	r2, #3
	bne	.L5656
.L5621:
	cmp	r5, #0
	beq	.L5628
	mvn	r3, #124
.L5625:
	mov	r2, r5
	ldr	r0, [sp]
	str	r3, [sp, #4]
	ldr	r1, [sp, #20]
	bl	mtp_req_put
	ldr	r3, [sp, #4]
.L5618:
	str	r3, [r6, #68]
	.syntax divided
@ 841 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
.L5610:
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5632:
	mov	r4, r7
	mov	r5, r0
	mov	r7, r9
	mov	r3, #0
	ldrd	r8, [sp, #8]
	b	.L5619
.L5652:
	adds	r8, r8, #12
	mov	r4, #12
	adc	r9, r9, #0
	b	.L5613
.L5654:
	cmp	r3, #3
	beq	.L5628
.L5614:
	mov	r3, #0
	str	r3, [r6, #68]
	.syntax divided
@ 841 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	b	.L5610
.L5653:
	ldr	r3, [r6, #-80]
	cmp	r3, #0
	mvneq	r3, #4
	beq	.L5625
	mov	r2, #4
	mvn	r3, #4
	str	r2, [r6, #-80]
	b	.L5625
.L5628:
	mvn	r3, #124
	b	.L5618
	.fnend
	.size	send_file_work, .-send_file_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	do_write, %function
do_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r0, #104]
	.pad #68
	sub	sp, sp, #68
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	tst	r3, #2
	movne	r3, #9984
	mvnne	r0, #21
	movtne	r3, 7
	strne	r3, [r6, #28]
	bne	.L5657
	mov	r4, r0
	ldr	r0, [r6]
	add	r0, r0, #20
	bl	_raw_spin_lock
	ldr	r2, [r6]
	ldr	r3, [r2, #32]
	bic	r3, r3, #1048576
	bic	r3, r3, #4096
	str	r3, [r2, #32]
	ldr	r0, [r6]
	add	r0, r0, #20
	bl	_raw_spin_unlock
	ldrb	r3, [r4, #76]	@ zero_extendqisi2
	cmp	r3, #10
	beq	.L5714
	ldrb	r3, [r4, #77]	@ zero_extendqisi2
	ldr	r5, [r4, #78]	@ unaligned
	tst	r3, #231
	movne	r3, #9216
	rev	r5, r5
	movtne	r3, 5
	mvnne	r0, #21
	strne	r3, [r6, #28]
	bne	.L5657
	ldrsb	r2, [r6, #24]
	cmp	r2, #0
	blt	.L5661
	tst	r3, #8
	bne	.L5715
.L5661:
	ldrd	r2, [r6, #16]
	mov	r1, #0
	mov	r0, r5
	cmp	r5, r2
	sbcs	r3, r1, r3
	movge	r3, #8448
	mvnge	r0, #21
	movtge	r3, 5
	strge	r3, [r6, #28]
	bge	.L5657
	ldr	r3, [r6, #40]
	ldr	r9, [r4, #128]
	sub	r2, r3, #32
	lsl	r10, r5, r3
	lsl	fp, r5, r2
	str	r9, [sp, #40]
	cmp	r9, #0
	rsb	r2, r3, #32
	orr	fp, fp, r5, lsr r2
	beq	.L5665
	mov	r3, #57344
	strd	r10, [sp, #16]
	movw	r2, #3074
	movw	r1, #:lower16:.LANCHOR1
	strd	r10, [sp, #32]
	movt	r3, 65535
	movt	r2, 3
	movt	r1, #:upper16:.LANCHOR1
	mov	r8, #1
	str	r3, [sp, #44]
	str	r1, [sp, #48]
	str	r2, [sp, #52]
.L5664:
	ldr	r5, [r4, #60]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L5666
.L5717:
	cmp	r8, #0
	beq	.L5667
	ldrd	r2, [r6, #8]
	ldrd	r0, [sp, #16]
	cmp	r0, r2
	sbcs	r3, r1, r3
	bge	.L5716
	ldrd	r0, [sp, #16]
	cmp	r9, #16384
	ldr	r2, [r4, #140]
	movcc	r3, r9
	movcs	r3, #16384
	adds	r0, r0, r3
	sub	r2, r2, r3
	adc	r1, r1, #0
	subs	r9, r9, r3
	str	r2, [r4, #140]
	movne	r8, #1
	moveq	r8, #0
	str	r3, [r5, #12]
	strd	r0, [sp, #16]
	ldr	r1, [r4, #108]
	mov	r0, r4
	udiv	r2, r3, r1
	mls	r2, r1, r2, r3
	cmp	r2, #0
	addne	r3, r3, r1
	mov	r1, r5
	subne	r3, r3, r2
	ldr	r2, [r5, #24]
	str	r3, [r2, #4]
	bl	start_out_transfer
	cmp	r0, #0
	beq	.L5665
	ldr	r3, [r5, #8]
	str	r3, [r4, #60]
	ldr	r5, [r4, #60]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L5717
.L5666:
	ldr	r5, [r4, #64]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L5672
	cmp	r8, #0
	beq	.L5665
.L5673:
	mov	r0, r4
	bl	sleep_thread
	cmp	r0, #0
	beq	.L5664
.L5657:
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5667:
	ldr	r5, [r4, #64]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L5665
.L5672:
	cmp	r3, #1
	bne	.L5673
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L5673
	.syntax divided
@ 1354 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r2, [r5, #8]
	mov	r3, #0
	str	r2, [r4, #64]
	ldr	r2, [r5, #24]
	str	r3, [r5, #4]
	ldr	r3, [r2, #44]
	cmp	r3, #0
	bne	.L5718
	ldrd	r10, [sp, #32]
	ldr	r3, [r6, #8]
	ldr	ip, [r6, #12]
	ldr	r2, [r2, #48]
	subs	r1, r3, r10
	sbc	lr, ip, fp
	str	r1, [sp, #24]
	mov	r1, #0
	str	lr, [sp, #28]
	ldrd	r10, [sp, #24]
	cmp	r10, r2
	sbcs	r1, fp, r1
	blt	.L5719
.L5676:
	ldr	r7, [r6, #44]
	ldr	r3, [r5, #12]
	rsb	r7, r7, #0
	cmp	r3, r2
	andls	r7, r7, r3
	andhi	r7, r7, r2
	cmp	r7, #0
	bne	.L5720
	ldr	r2, [r5, #24]
	ldr	r2, [r2, #48]
	cmp	r3, r2
	bls	.L5664
.L5690:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	mvn	r0, #4
	orr	r3, r3, #8
	strb	r3, [r4, #144]
	b	.L5657
.L5720:
	ldrd	r10, [sp, #32]
	add	r3, sp, #64
	mov	r2, r7
	strd	r10, [r3, #-8]!
	ldr	r1, [r5]
	ldr	r0, [r6]
	bl	vfs_write
	ldr	r2, [sp, #44]
	mov	r3, sp
	and	r3, r3, r2
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L5692
	cmp	r0, #0
	blt	.L5678
	cmp	r0, r7
	ldr	r3, [r4, #136]
	bcc	.L5721
	ldrd	r10, [sp, #32]
	sub	r3, r3, r0
	ldr	r2, [sp, #40]
	str	r3, [r4, #136]
	adds	r10, r10, r0
	adc	fp, fp, r0, asr #31
	sub	r2, r2, r0
	strd	r10, [sp, #32]
	str	r2, [sp, #40]
.L5680:
	cmp	r0, r7
	bne	.L5713
	ldr	r3, [sp, #48]
	ldr	r3, [r3, #3596]
	cmp	r3, #0
	bne	.L5713
	ldr	r3, [sp, #48]
	ldr	r3, [r3, #3592]
	cmp	r3, #0
	bne	.L5665
	ldr	r3, [r4, #68]
	ldrd	r10, [sp, #32]
	add	r1, r3, #128
.L5686:
	ldr	r2, [r3, #4]
	add	r3, r3, #32
	cmp	r2, #2
	beq	.L5722
	cmp	r3, r1
	bne	.L5686
	cmp	r9, #0
	strd	r10, [sp, #32]
	bne	.L5713
	ldr	r2, [sp, #48]
	mov	r3, #1
	mov	r0, r4
	str	r3, [r2, #3596]
	bl	send_status
.L5713:
	ldr	r2, [r5, #12]
.L5682:
	ldr	r3, [r5, #24]
	ldr	r3, [r3, #48]
	cmp	r3, r2
	bcc	.L5690
	ldr	r3, [sp, #40]
	cmp	r3, #0
	bne	.L5664
.L5665:
	mvn	r0, #4
	b	.L5657
.L5716:
	ldr	r3, [r6, #40]
	mov	r2, #8448
	mov	r10, r0
	movt	r2, 5
	mov	fp, r1
	mov	r8, #0
	str	r2, [r6, #28]
	subs	r1, r3, #32
	lsr	r2, r10, r3
	rsb	r3, r3, #32
	orr	r2, r2, fp, lsl r3
	movpl	r3, fp
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	str	r2, [r6, #32]
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	b	.L5664
.L5719:
	ldrd	r10, [sp, #32]
	movw	r1, #:lower16:.LC383
	add	r0, r6, #48
	movt	r1, #:upper16:.LC383
	strd	r10, [sp]
	str	r3, [sp, #8]
	str	ip, [sp, #12]
	bl	dev_err
	ldr	r2, [r6, #8]
	sub	r2, r2, r10
	b	.L5676
.L5721:
	ldr	r2, [r6, #44]
	rsb	r2, r2, #0
	and	r2, r2, r0
	adds	r10, r10, r2
	mov	r0, r2
	adc	fp, fp, r2, asr #31
	sub	r3, r3, r2
	cmp	r2, r7
	ldr	r2, [sp, #40]
	str	r3, [r4, #136]
	strd	r10, [sp, #32]
	sub	r2, r2, r0
	str	r2, [sp, #40]
	bcs	.L5680
.L5678:
	ldr	r3, [r6, #40]
	ldrd	r10, [sp, #32]
	ldr	r2, [sp, #52]
	subs	r1, r3, #32
	str	r2, [r6, #28]
	lsr	r2, r10, r3
	rsb	r3, r3, #32
	orr	r2, r2, fp, lsl r3
	movpl	r3, fp
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	mov	r1, #1
	str	r2, [r6, #32]
	ldr	r2, [sp, #48]
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	str	r1, [r2, #3592]
	ldr	r2, [r5, #12]
	b	.L5682
.L5714:
	ldrb	r5, [r4, #79]	@ zero_extendqisi2
	ldrb	r2, [r4, #77]	@ zero_extendqisi2
	ldrb	r3, [r4, #78]	@ zero_extendqisi2
	orr	r5, r5, #167772160
	orr	r5, r5, r2, lsl #16
	orr	r5, r5, r3, lsl #8
	bic	r5, r5, #-16777216
	b	.L5661
.L5715:
	ldr	r0, [r6]
	add	r0, r0, #20
	bl	_raw_spin_lock
	ldr	r2, [r6]
	ldr	r3, [r2, #32]
	orr	r3, r3, #1048576
	orr	r3, r3, #4096
	str	r3, [r2, #32]
	ldr	r0, [r6]
	add	r0, r0, #20
	bl	_raw_spin_unlock
	b	.L5661
.L5692:
	mvn	r0, #3
	b	.L5657
.L5718:
	ldr	r3, [r6, #40]
	mov	r2, #2048
	mvn	r0, #4
	ldrd	r10, [sp, #32]
	movt	r2, 4
	str	r2, [r6, #28]
	subs	r1, r3, #32
	lsr	r2, r10, r3
	rsb	r3, r3, #32
	orr	r2, r2, fp, lsl r3
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	orrpl	r2, r2, fp, asr r1
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	str	r2, [r6, #32]
	b	.L5657
.L5722:
	ldr	r2, [r5, #12]
	strd	r10, [sp, #32]
	b	.L5682
	.fnend
	.size	do_write, .-do_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	receive_file_work, %function
receive_file_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	.syntax divided
@ 858 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r10, [r0, #16]
	ldrd	r6, [r0, #32]
	ldrd	r2, [r0, #24]
	cmp	r6, #0
	sbcs	r1, r7, #0
	strd	r2, [sp]
	mvnlt	r3, #21
	strlt	r3, [r0, #52]
	blt	.L5723
	mov	r3, sp
	mov	r8, #0
	bic	r9, r3, #8128
	mov	r5, r0
	mov	fp, r8
	bic	r9, r9, #63
	b	.L5724
.L5759:
	cmp	r6, r3
	mov	r0, r3
	sbcs	r3, r7, ip
	movlt	r0, r6
	mov	r3, r0
	str	r0, [r4, #48]
.L5740:
	subs	r6, r6, r3
	sbc	r7, r7, #0
.L5741:
	cmp	r2, r3
	movhi	r6, #0
	movhi	r7, #0
.L5732:
	mov	fp, r4
.L5724:
	cmp	r6, #1
	sbcs	r3, r7, #0
	movge	r3, #1
	movlt	r3, #0
	cmp	fp, #0
	movne	r3, #1
	cmp	r3, #0
	beq	.L5756
	cmp	r6, #1
	sbcs	r3, r7, #0
	blt	.L5726
	add	r3, r8, #42
	movw	r2, #:lower16:.LANCHOR0
	add	r3, r5, r3, lsl #2
	movt	r2, #:upper16:.LANCHOR0
	ldr	r1, [r2, #516]
	mov	ip, #0
	ldr	r4, [r3, #-200]
	mov	r2, #208
	eor	r8, r8, #1
	str	r1, [r4, #4]
	ldr	r0, [r5, #-104]
	mov	r1, r4
	str	ip, [r5, #-24]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L5755
	cmp	fp, #0
	beq	.L5730
	mov	r3, sp
	mov	r0, r10
	ldr	r1, [fp]
	ldr	r2, [fp, #48]
	bl	vfs_write
	ldr	r3, [fp, #48]
	cmp	r3, r0
	bne	.L5755
.L5730:
	cmp	r4, #0
	beq	.L5732
	ldr	r3, [r5, #-96]
	ldr	r2, [r5, #-24]
	cmp	r2, #0
	bne	.L5733
	cmp	r3, #2
	beq	.L5757
.L5733:
	cmp	r3, #0
	cmpne	r3, #3
	moveq	ip, #1
	movne	ip, #0
	beq	.L5758
	ldr	r2, [r4, #4]
	mov	r1, #0
	ldr	r3, [r4, #48]
	cmp	r6, r2
	sbcs	r1, r7, r1
	blt	.L5759
	mov	r1, #0
	mvn	r0, #0
	cmp	r7, r1
	cmpeq	r6, r0
	beq	.L5741
	b	.L5740
.L5755:
	ldr	r3, [r5, #-96]
	cmp	r3, #0
	movne	r3, #4
	mvneq	r6, #4
	mvnne	r6, #4
	strne	r3, [r5, #-96]
.L5729:
	str	r6, [r5, #52]
	.syntax divided
@ 946 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
.L5723:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5726:
	mov	r3, sp
	mov	r0, r10
	ldr	r1, [fp]
	ldr	r2, [fp, #48]
	bl	vfs_write
	ldr	r3, [fp, #48]
	cmp	r3, r0
	bne	.L5755
	mov	r4, #0
	b	.L5732
.L5757:
	ldr	r0, [r9, #12]
	movw	r3, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r3, #:upper16:autoremove_wake_function
	sub	fp, r5, #68
	str	r2, [sp, #12]
	str	r1, [sp, #24]
	str	r0, [sp, #16]
	str	r3, [sp, #20]
	str	r1, [sp, #28]
	b	.L5735
.L5760:
	bl	schedule
.L5735:
	mov	r2, #1
	add	r1, sp, #12
	mov	r0, fp
	bl	prepare_to_wait
	ldr	r3, [r5, #-24]
	cmp	r3, #0
	bne	.L5734
	ldr	r3, [r5, #-96]
	cmp	r3, #2
	bne	.L5734
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L5760
.L5734:
	add	r1, sp, #12
	mov	r0, fp
	bl	finish_wait
	ldr	r3, [r5, #-96]
	b	.L5733
.L5756:
	mov	r6, r3
	b	.L5729
.L5758:
	ldr	r2, [r5, #-24]
	cmp	r3, #0
	mvnne	r6, #124
	mvneq	r6, #4
	cmp	r2, #0
	bne	.L5729
	ldr	r0, [r5, #-104]
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L5729
	.fnend
	.size	receive_file_work, .-receive_file_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_ioctl, %function
mtp_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #44
	sub	sp, sp, #44
	add	r5, r4, #112
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r0, r3, [r5]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L5762
	movw	r3, #19713
	mov	r8, r2
	movt	r3, 16416
	mov	r6, r1
	cmp	r1, r3
	bhi	.L5764
	mov	r3, #19712
	movt	r3, 16416
	cmp	r1, r3
	bcs	.L5765
	movw	r3, #19715
	movt	r3, 16392
	cmp	r1, r3
	bne	.L5763
	mov	r6, #57344
	mov	r3, sp
	movt	r6, 65535
	and	r3, r3, r6
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r8, #8; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L5779
	mov	r1, r8
	mov	r2, #8
	mov	r0, sp
	bl	__copy_from_user
	cmp	r0, #0
	mvnne	r6, #13
	bne	.L5778
	ldr	r9, [sp]
	cmp	r9, #28
	bhi	.L5795
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L5796
	mov	r0, #1000
	add	r7, r4, #124
	bl	msecs_to_jiffies
	mov	r10, r0
	mov	r1, r7
	mov	r0, r4
	bl	mtp_req_get
	subs	r8, r0, #0
	beq	.L5817
.L5782:
	mov	r3, sp
	ldr	r1, [sp, #4]
	bic	r3, r3, #8128
	ldr	r0, [r8]
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r1, r9; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L5818
	cmp	r9, #0
	bne	.L5819
.L5790:
	str	r9, [r8, #4]
	ldr	r0, [r4, #100]
	mov	r2, #208
	mov	r1, r8
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	beq	.L5778
	mov	r2, r8
	mov	r1, r7
	mov	r0, r4
	bl	mtp_req_put
	b	.L5778
.L5764:
	movw	r3, #19716
	movt	r3, 16416
	cmp	r1, r3
	beq	.L5765
.L5763:
	add	r7, r4, #88
	mvn	r6, #21
.L5777:
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #104]
	cmp	r3, #3
	mvneq	r6, #124
	beq	.L5791
	cmp	r3, #0
	movne	r3, #1
	strne	r3, [r4, #104]
.L5791:
	mov	r0, r7
	bl	_raw_spin_unlock_irq
.L5778:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L5761:
	mov	r0, r6
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5765:
	add	r7, r4, #88
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #104]
	cmp	r3, #3
	beq	.L5820
	cmp	r3, #0
	beq	.L5821
	mov	r3, #2
	mov	r0, r7
	str	r3, [r4, #104]
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r8, #32; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L5771
	mov	r1, r8
	mov	r2, #32
	add	r0, sp, #8
	bl	__copy_from_user
	subs	r9, r0, #0
	mvnne	r6, #13
	bne	.L5777
	ldr	r0, [sp, #8]
	bl	fget
	subs	r8, r0, #0
	mvneq	r6, #8
	beq	.L5777
	str	r8, [r4, #216]
	ldrd	r2, [sp, #16]
	strd	r2, [r4, #224]
	ldrd	r2, [sp, #24]
	strd	r2, [r4, #232]
	.syntax divided
@ 1028 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	movw	r3, #19716
	movt	r3, 16416
	cmp	r6, r3
	beq	.L5822
	mov	r3, #19712
	movt	r3, 16416
	cmp	r6, r3
	addeq	r2, r4, #184
	addne	r2, r4, #200
	streq	r9, [r4, #240]
.L5775:
	ldr	r1, [r4, #180]
	mov	r0, #4
	bl	queue_work_on
	ldr	r0, [r4, #180]
	bl	flush_workqueue
	mov	r0, r8
	bl	fput
	.syntax divided
@ 1052 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r6, [r4, #252]
	b	.L5777
.L5779:
	mov	r1, #8
	mov	r0, sp
	bl	__memzero
	mvn	r6, #13
	b	.L5778
.L5821:
	mov	r0, r7
	mvn	r6, #18
	bl	_raw_spin_unlock_irq
	b	.L5778
.L5820:
	mov	r3, #1
	mov	r0, r7
	mvn	r6, #124
	str	r3, [r4, #104]
	bl	_raw_spin_unlock_irq
	b	.L5778
.L5771:
	mov	r1, #32
	add	r0, sp, #8
	bl	__memzero
	mvn	r6, #13
	b	.L5777
.L5796:
	mvn	r6, #18
	b	.L5778
.L5762:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r6, #15
	b	.L5761
.L5818:
	mov	r2, r9
	bl	__copy_from_user
	cmp	r0, #0
	beq	.L5790
.L5789:
	mov	r2, r8
	mov	r1, r7
	mov	r0, r4
	mvn	r6, #13
	bl	mtp_req_put
	b	.L5778
.L5817:
	mov	r3, sp
	str	r8, [sp, #8]
	add	fp, r4, #156
	and	r6, r6, r3
	str	r8, [sp, #12]
	movw	r3, #:lower16:autoremove_wake_function
	str	r8, [sp, #16]
	movt	r3, #:upper16:autoremove_wake_function
	str	r8, [sp, #20]
	str	r8, [sp, #24]
	ldr	r2, [r6, #12]
	strd	r2, [sp, #12]
	add	r3, sp, #20
	str	r3, [sp, #20]
	str	r3, [sp, #24]
.L5785:
	mov	r2, #1
	add	r1, sp, #8
	mov	r0, fp
	bl	prepare_to_wait
	mov	r1, r7
	mov	r0, r4
	bl	mtp_req_get
	subs	r8, r0, #0
	mov	r0, r10
	bne	.L5783
	ldr	r3, [r6, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L5784
	bl	schedule_timeout
	subs	r10, r0, #0
	bne	.L5785
.L5786:
	mov	r1, r7
	mov	r0, r4
	bl	mtp_req_get
	mov	r8, r0
	add	r1, sp, #8
	mov	r0, fp
	bl	finish_wait
	cmp	r8, #0
	bne	.L5782
.L5816:
	mvn	r6, #61
	b	.L5778
.L5819:
	mov	r1, r9
	bl	__memzero
	b	.L5789
.L5822:
	mov	r3, #1
	add	r2, r4, #184
	str	r3, [r4, #240]
	ldrh	r3, [sp, #32]
	strh	r3, [r4, #244]	@ movhi
	ldr	r3, [sp, #36]
	str	r3, [r4, #248]
	b	.L5775
.L5784:
	add	r1, sp, #8
	mov	r0, fp
	bl	finish_wait
	b	.L5816
.L5795:
	mvn	r6, #21
	b	.L5778
.L5783:
	cmp	r10, #0
	beq	.L5786
	add	r1, sp, #8
	mov	r0, fp
	bl	finish_wait
	b	.L5782
	.fnend
	.size	mtp_ioctl, .-mtp_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfiles_destroy, %function
ffs_epfiles_destroy:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	subs	r5, r1, #0
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L5829
	ldr	r3, [r0]
	cmp	r3, #1
	bne	.L5825
	ldr	r2, [r0, #24]
	add	r3, r0, #24
	cmp	r2, r3
	bne	.L5825
	mov	r4, r0
	mov	r7, #0
.L5826:
	ldr	r0, [r4, #44]
	cmp	r0, #0
	beq	.L5827
	bl	d_delete
	ldr	r0, [r4, #44]
	bl	dput
	str	r7, [r4, #44]
.L5827:
	subs	r5, r5, #1
	add	r4, r4, #56
	beq	.L5829
	ldr	r3, [r4]
	cmp	r3, #1
	bne	.L5825
	ldr	r2, [r4, #24]
	add	r3, r4, #24
	cmp	r2, r3
	beq	.L5826
.L5825:
	.syntax divided
@ 1522 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1523, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L5829:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	kfree
	.fnend
	.size	ffs_epfiles_destroy, .-ffs_epfiles_destroy
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_cleanup, %function
ffs_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movw	r0, #:lower16:.LC384
	movt	r0, #:upper16:.LC384
	str	lr, [sp, #4]
	bl	printk
	ldr	r0, .L5837
	bl	unregister_filesystem
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
.L5838:
	.align	2
.L5837:
	.word	.LANCHOR0+1284
	.fnend
	.size	ffs_function_cleanup, .-ffs_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	__ffs_ep0_queue_wait, %function
__ffs_ep0_queue_wait:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	add	r0, r0, #116
	strd	r6, [sp, #8]
	mov	r6, r2
	mov	r7, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r0, #-2]
	ldr	r5, [r0, #-88]
	cmp	r3, r2
	ldrb	r2, [r5, #26]	@ zero_extendqisi2
	movls	r3, #0
	movhi	r3, #1
	bfi	r2, r3, #1, #1
	strb	r2, [r5, #26]
	bl	_raw_spin_unlock_irq
	cmp	r7, #0
	str	r7, [r5]
	str	r6, [r5, #4]
	beq	.L5844
.L5840:
	ldr	r3, [r4]
	mov	r0, #0
	mov	r2, #32
	mov	r1, r5
	str	r0, [r4, #32]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L5839
	add	r0, r4, #32
	bl	wait_for_completion_interruptible
	subs	r3, r0, #0
	bne	.L5845
	ldr	r0, [r4, #48]
	str	r3, [r4, #96]
.L5839:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5844:
	movw	r3, #47806
	movt	r3, 57005
	str	r3, [r5]
	b	.L5840
.L5845:
	ldr	r3, [r4]
	mov	r1, r5
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	mvn	r0, #3
	b	.L5839
	.fnend
	.size	__ffs_ep0_queue_wait, .-__ffs_ep0_queue_wait
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_complete, %function
ffs_ep0_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r1, #32]
	add	r0, r0, #32
	b	complete_all
	.fnend
	.size	ffs_ep0_complete, .-ffs_ep0_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_sb_make_inode, %function
ffs_sb_make_inode:
	.fnstart
	@ args = 4, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r2
	mov	r6, r3
	str	r8, [sp, #16]
	mov	r8, r1
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	ldr	r5, [sp, #32]
	bl	new_inode
	subs	r4, r0, #0
	beq	.L5847
	mov	r0, sp
	bl	current_kernel_time
	bl	get_next_ino
	str	r0, [r4, #40]
	ldrh	r1, [r5]
	cmp	r7, #0
	ldrd	r2, [sp]
	strh	r1, [r4]	@ movhi
	ldr	r1, [r5, #4]
	str	r1, [r4, #4]
	ldr	r1, [r5, #8]
	strne	r7, [r4, #200]
	cmp	r6, #0
	strne	r6, [r4, #24]
	str	r1, [r4, #8]
	strd	r2, [r4, #52]
	strd	r2, [r4, #60]
	strd	r2, [r4, #68]
	str	r8, [r4, #328]
.L5847:
	mov	r0, r4
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	ffs_sb_make_inode, .-ffs_sb_make_inode
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_sb_create_file, %function
ffs_sb_create_file:
	.fnstart
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r2
	mov	r9, r3
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	ldr	r0, [r0, #60]
	ldr	r5, [r4, #616]
	ldr	r7, [sp, #40]
	bl	d_alloc_name
	subs	r6, r0, #0
	beq	.L5864
	add	r5, r5, #196
	mov	r0, r4
	mov	r2, r9
	mov	r1, r8
	mov	r3, #0
	str	r5, [sp]
	bl	ffs_sb_make_inode
	subs	r4, r0, #0
	beq	.L5869
	mov	r1, r4
	mov	r0, r6
	bl	d_instantiate
	mov	r0, r6
	bl	d_rehash
	cmp	r7, #0
	strne	r6, [r7]
.L5861:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L5864:
	mov	r4, r6
	b	.L5861
.L5869:
	mov	r0, r6
	bl	dput
	b	.L5861
	.fnend
	.size	ffs_sb_create_file, .-ffs_sb_create_file
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_sb_fill, %function
ffs_sb_fill:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	mov	r7, r1
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r3, #32]
	.pad #8
	sub	sp, sp, #8
	cmp	r0, #0
	beq	.L5874
	mov	r2, #212
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	bne	.L5871
.L5872:
	mvn	r0, #11
.L5870:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L5874:
	mov	r4, #16
.L5871:
	mov	r5, #0
	mov	r8, #1
	ldr	r2, .L5883
	movw	r1, #:lower16:.LC385
	add	r0, r4, #4
	ldr	r9, .L5883+4
	movt	r1, #:upper16:.LC385
	str	r8, [r4, #84]
	mov	r10, #12
	str	r5, [r4, #88]
	str	r5, [r4, #92]
	bl	__mutex_init
	movw	r1, #:lower16:.LC386
	ldr	r2, .L5883
	add	r0, r4, #116
	movt	r1, #:upper16:.LC386
	str	r5, [r4, #24]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC387
	ldr	r2, .L5883
	add	r0, r4, #36
	movt	r1, #:upper16:.LC387
	str	r5, [r4, #32]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC387
	ldr	r2, .L5883
	add	r0, r4, #72
	movt	r1, #:upper16:.LC387
	str	r5, [r4, #68]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC387
	ldr	r2, .L5883
	add	r0, r4, #56
	movt	r1, #:upper16:.LC387
	str	r5, [r4, #52]
	bl	__init_waitqueue_head
	strh	r8, [r4, #106]	@ movhi
	movw	ip, #29537
	mov	lr, #4096
	str	r6, [r4, #192]
	ldr	r3, [r7, #16]
	movt	ip, 2660
	movw	r2, #:lower16:simple_dir_operations
	movt	r2, #:upper16:simple_dir_operations
	str	r3, [r4, #136]
	ldrd	r0, [r7]
	movw	r3, #:lower16:simple_dir_inode_operations
	movt	r3, #:upper16:simple_dir_inode_operations
	strd	r0, [r4, #196]
	ldr	r1, [r7, #8]
	mov	r0, r6
	str	r1, [r4, #204]
	mov	r1, r5
	strb	r10, [r6, #13]
	str	lr, [r6, #16]
	str	r9, [r6, #36]
	str	ip, [r6, #56]
	str	r4, [r6, #616]
	str	r8, [r6, #628]
	ldrh	ip, [r7, #12]
	str	r7, [sp]
	strh	ip, [r7]	@ movhi
	bl	ffs_sb_make_inode
	bl	d_make_root
	cmp	r0, r5
	str	r0, [r6, #60]
	beq	.L5872
	movw	r1, #:lower16:.LC388
	add	r3, r9, #104
	str	r5, [sp]
	mov	r2, r4
	mov	r0, r6
	movt	r1, #:upper16:.LC388
	bl	ffs_sb_create_file
	cmp	r0, r5
	movne	r0, r5
	bne	.L5870
	b	.L5872
.L5884:
	.align	2
.L5883:
	.word	.LANCHOR1+3600
	.word	.LANCHOR2+3132
	.fnend
	.size	ffs_sb_fill, .-ffs_sb_fill
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_init, %function
ffs_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4, #4]
	beq	.L5887
	mov	r2, #12
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	mvneq	r4, #11
	beq	.L5885
.L5887:
	ldr	r0, .L5892
	bl	register_filesystem
	subs	r4, r0, #0
	bne	.L5889
	movw	r0, #:lower16:.LC389
	movt	r0, #:upper16:.LC389
	bl	printk
.L5885:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5889:
	movw	r0, #:lower16:.LC390
	mov	r1, r4
	movt	r0, #:upper16:.LC390
	bl	printk
	b	.L5885
.L5893:
	.align	2
.L5892:
	.word	.LANCHOR0+1284
	.fnend
	.size	ffs_function_init, .-ffs_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	clear_desc, %function
clear_desc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	cmp	r3, #4
	bls	.L5895
	mov	r4, r0
	ldr	r0, [r1, #12]
	cmp	r0, #0
	beq	.L5896
	bl	kfree
	ldr	r3, [r4, #20]
.L5895:
	cmp	r3, #2
	bhi	.L5896
.L5894:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5896:
	ldr	r0, [r5, #8]
	cmp	r0, #0
	beq	.L5894
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
	.fnend
	.size	clear_desc, .-clear_desc
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_unbind, %function
qdss_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #24]
	ldr	r0, [r1, #196]
	ldr	r5, [r3]
	bl	flush_workqueue
	movw	r0, #:lower16:.LC361
	movt	r0, #:upper16:.LC361
	ldr	r1, [r5, #28]
	bl	strcmp
	subs	r1, r0, #0
	beq	.L5920
.L5906:
	ldr	r3, [r4, #104]
	mov	r1, r4
	mov	r0, r5
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #100]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #108]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	clear_desc
.L5920:
	ldr	r0, [r4, #108]
	bl	dwc3_tx_fifo_resize_request
	b	.L5906
	.fnend
	.size	qdss_unbind, .-qdss_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_suspend, %function
rmnet_sdio_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #192]
	mov	r3, r0
	cmp	r2, #0
	bne	.L5923
	bx	lr
.L5923:
	add	r2, r0, #336
	ldr	r1, [r3, #200]
	mov	r0, #4
	ldr	ip, [r3, #332]
	bic	ip, ip, #2
	str	ip, [r3, #332]
	b	queue_work_on
	.fnend
	.size	rmnet_sdio_suspend, .-rmnet_sdio_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_hw_free, %function
audio_pcm_hw_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r4, r0
	str	lr, [sp, #8]
	ldr	r2, [r0, #184]
	.pad #12
	sub	sp, sp, #12
	cmp	r2, #0
	beq	.L5925
	ldr	r0, [r0]
	ldr	r3, [r4, #188]
	ldr	r1, [r4, #192]
	ldr	r0, [r0]
	ldr	r0, [r0, #496]
	cmp	r0, #0
	beq	.L5926
	ldr	ip, [r0, #276]
	cmp	ip, #0
	beq	.L5926
.L5927:
	mov	lr, #0
	str	lr, [sp]
	ldr	r5, [ip, #4]
	blx	r5
.L5925:
	mov	r3, #0
	mov	r0, r3
	str	r3, [r4, #184]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L5926:
	movw	ip, #:lower16:arm_dma_ops
	movt	ip, #:upper16:arm_dma_ops
	cmp	ip, #0
	bne	.L5927
	.syntax divided
@ 206 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/dma-mapping.h" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/dma-mapping.h"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 206, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
	.fnend
	.size	audio_pcm_hw_free, .-audio_pcm_hw_free
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	__ffs_data_do_entity, %function
__ffs_data_do_entity:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #2
	beq	.L5938
	cmp	r0, #3
	beq	.L5939
	cmp	r0, #1
	beq	.L5941
	mov	r0, #0
	bx	lr
.L5941:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #178]
	cmp	r1, r2
	addls	r2, r2, #1
	strhls	r2, [r3, #178]	@ movhi
	bx	lr
.L5939:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #180]
	and	r2, r2, #15
	cmp	r2, r1
	strhgt	r2, [r3, #180]	@ movhi
	bx	lr
.L5938:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #176]
	cmp	r1, r2
	strhcc	r2, [r3, #176]	@ movhi
	bx	lr
	.fnend
	.size	__ffs_data_do_entity, .-__ffs_data_do_entity
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_unthrottle_tx, %function
ghsic_data_unthrottle_tx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r4, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L5942
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L5951
.L5942:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5951:
	add	r5, r4, #80
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #208]
	mov	r1, r0
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #208]
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	add	r2, r4, #120
	mov	r0, #4
	ldr	r1, [r4, #84]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on
	.fnend
	.size	ghsic_data_unthrottle_tx, .-ghsic_data_unthrottle_tx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_complete_set_line_coding, %function
acm_complete_set_line_coding:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r1, #44]
	cmp	r3, #0
	bne	.L5952
	ldr	r3, [r1, #48]
	cmp	r3, #7
	beq	.L5954
	ldr	r3, [r0, #8]
	mov	r1, #1
	ldr	r3, [r3, #24]
	bx	r3
.L5954:
	ldr	r3, [r1]
	ldr	r1, [r0]
	ldr	r0, [r3]	@ unaligned
	add	r2, r1, #160
	str	r0, [r1, #160]
	ldrh	r1, [r3, #4]	@ unaligned
	strh	r1, [r2, #4]	@ movhi
	ldrb	r3, [r3, #6]	@ zero_extendqisi2
	strb	r3, [r2, #6]
.L5952:
	bx	lr
	.fnend
	.size	acm_complete_set_line_coding, .-acm_complete_set_line_coding
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_probe, %function
acc_hid_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	hid_open_report
	subs	r5, r0, #0
	bne	.L5955
	ldr	r3, [r4, #3548]
	mov	r0, r4
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	beq	.L5961
.L5955:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5961:
	mov	r1, #45
	mov	r0, r4
	bl	hid_connect
	subs	r5, r0, #0
	beq	.L5955
	ldr	r3, [r4, #3548]
	mov	r0, r4
	ldr	r3, [r3, #4]
	blx	r3
	b	.L5955
	.fnend
	.size	acc_hid_probe, .-acc_hid_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_free_ctrl_pkt.part.9, %function
mbim_free_ctrl_pkt.part.9:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0]
	bl	kfree
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	mbim_free_ctrl_pkt.part.9, .-mbim_free_ctrl_pkt.part.9
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_clear_queues, %function
mbim_clear_queues:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	add	r7, r0, #204
	mov	r6, r0
	str	r8, [sp, #16]
	mov	r8, r0
	mov	r0, r7
	str	lr, [sp, #20]
	bl	_raw_spin_lock
	ldr	r0, [r8, #208]!
	cmp	r0, r8
	ldr	r4, [r0]
	bne	.L5967
	b	.L5965
.L5971:
	mov	r4, r3
.L5967:
	sub	r5, r0, #8
	bl	list_del
	cmp	r5, #0
	mov	r0, r5
	beq	.L5966
	bl	mbim_free_ctrl_pkt.part.9
.L5966:
	cmp	r8, r4
	mov	r0, r4
	ldr	r3, [r4]
	bne	.L5971
.L5965:
	ldr	r0, [r6, #216]!
	cmp	r0, r6
	ldr	r4, [r0]
	bne	.L5970
	b	.L5968
.L5972:
	mov	r4, r3
.L5970:
	sub	r5, r0, #8
	bl	list_del
	cmp	r5, #0
	mov	r0, r5
	beq	.L5969
	bl	mbim_free_ctrl_pkt.part.9
.L5969:
	cmp	r6, r4
	mov	r0, r4
	ldr	r3, [r4]
	bne	.L5972
.L5968:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
	.fnend
	.size	mbim_clear_queues, .-mbim_clear_queues
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_notify_complete, %function
mbim_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r1]
	ldr	r4, [r1, #32]
	add	r6, r4, #204
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r5, #44]
	cmn	r3, #104
	beq	.L5982
	cmp	r3, #0
	bne	.L6006
	add	r3, r4, #168
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r3, [r4, #168]
.L5984:
	ldr	r5, [r4, #160]
	cmp	r5, #0
	beq	.L5986
	ldrb	r3, [r4, #164]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L5988
	cmp	r3, #3
	bne	.L6007
	ldr	r3, [r4, #168]
	cmp	r3, #0
	ble	.L5986
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r4, #156]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r5, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r5, #0
	bne	.L6008
.L5986:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L5988:
	ldr	r3, [r4, #168]
	cmp	r3, #0
	ble	.L5986
	movw	r0, #:lower16:.LC393
	ldr	r1, .L6009
	movt	r0, #:upper16:.LC393
	bl	printk
	b	.L5986
.L6007:
	ldr	r3, [r5]
	mvn	r2, #94
	add	r7, r4, #168
	strb	r2, [r3]
	ldrb	r2, [r4, #196]	@ zero_extendqisi2
	strh	r2, [r3, #4]	@ unaligned
	.syntax divided
@ 45 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r3, [r7]
	add	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, r6
	ldr	r3, [r4, #168]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #156]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r5, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r5, #0
	beq	.L5986
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC395
	mov	r2, r5
	ldr	r1, .L6009
	movt	r0, #:upper16:.LC395
	bl	printk
	b	.L5986
.L6006:
	cmn	r3, #108
	beq	.L5982
	movw	r0, #:lower16:.LC392
	ldrb	r2, [r7, #1]	@ zero_extendqisi2
	ldr	r1, .L6009+4
	movt	r0, #:upper16:.LC392
	bl	printk
	b	.L5984
.L5982:
	mov	r3, #0
	movw	r0, #:lower16:.LC391
	ldr	r1, .L6009+4
	movt	r0, #:upper16:.LC391
	strb	r3, [r4, #164]
	str	r3, [r4, #168]
	bl	printk
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r0, r4
	bl	mbim_clear_queues
	mov	r0, r4
	bl	mbim_reset_function_queue
	mov	r0, r6
	bl	_raw_spin_lock
	b	.L5984
.L6008:
	add	r3, r4, #168
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC394
	mov	r2, r5
	ldr	r1, .L6009
	movt	r0, #:upper16:.LC394
	bl	printk
	b	.L5986
.L6010:
	.align	2
.L6009:
	.word	.LANCHOR2+3368
	.word	.LANCHOR2+3344
	.fnend
	.size	mbim_notify_complete, .-mbim_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_setup, %function
mbim_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r9, [r0, #84]
	.pad #20
	sub	sp, sp, #20
	ldr	r3, [r0, #88]
	ldrh	r8, [r1, #4]	@ unaligned
	ldrh	r6, [r1, #2]	@ unaligned
	ldrh	r7, [r1, #6]	@ unaligned
	cmp	r3, #0
	ldr	r4, [r9, #4]
	beq	.L6036
	mov	r5, r1
	ldrh	r1, [r1]	@ unaligned
	mov	r10, r0
	movw	r0, #8582
	ldrb	r2, [r5]	@ zero_extendqisi2
	rev16	r1, r1
	uxth	r1, r1
	cmp	r1, r0
	beq	.L6015
	bls	.L6037
	movw	r3, #41344
	cmp	r1, r3
	beq	.L6020
	bls	.L6038
	movw	r3, #41347
	cmp	r1, r3
	beq	.L6023
	movw	r3, #41349
	cmp	r1, r3
	bne	.L6014
	adds	r3, r6, #0
	movne	r3, #1
	cmp	r7, #3
	orrls	r3, r3, #1
	cmp	r3, #0
	bne	.L6027
	ldrb	r3, [r10, #196]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L6027
	ldr	r2, [r10, #224]
	cmp	r7, #4
	mov	r8, #4
	ldr	r3, [r4]
	movle	r6, #0
	movgt	r6, #1
	lsr	r1, r2, #16
	ubfx	r0, r2, #8, #8
	strb	r2, [r3]
	lsr	r2, r1, #8
	strb	r0, [r3, #1]
	strb	r1, [r3, #2]
	strb	r2, [r3, #3]
.L6025:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r8, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	bfi	r3, r6, #1, #1
	strb	r3, [r4, #26]
	ldr	r3, [r9]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L6039
.L6011:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6037:
	movw	r3, #8453
	cmp	r1, r3
	beq	.L6017
	movw	r3, #8580
	cmp	r1, r3
	beq	.L6018
	cmp	r1, #8448
	beq	.L6040
.L6014:
	movw	r0, #:lower16:.LC400
	ldrb	r3, [r5, #1]	@ zero_extendqisi2
	stm	sp, {r6, r8}
	movt	r0, #:upper16:.LC400
	ldr	r1, .L6045
	str	r7, [sp, #8]
	bl	printk
	ldrb	r2, [r5]	@ zero_extendqisi2
.L6027:
	ldrb	ip, [r5, #1]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC402
	mov	r3, r2
	ldr	r1, .L6045
	mvn	r2, #94
	movt	r0, #:upper16:.LC402
	mov	r4, r2
	str	ip, [sp]
	stmib	sp, {r6, r8}
	str	r7, [sp, #12]
	bl	printk
	b	.L6011
.L6023:
	adds	r3, r6, #0
	movne	r3, #1
	cmp	r7, #1
	orrls	r3, r3, #1
	cmp	r3, #0
	bne	.L6027
	ldrb	r1, [r10, #196]	@ zero_extendqisi2
	cmp	r1, r8
	bne	.L6027
	ldr	r2, [r10, #200]
	cmp	r7, #2
	mov	r8, #2
	ldr	r0, .L6045+4
	movle	r6, #0
	movgt	r6, #1
	ldr	r1, [r4]
	subs	r2, r2, r0
	movne	r2, #1
	strb	r2, [r1]
	strb	r3, [r1, #1]
	b	.L6025
.L6018:
	cmp	r7, #0
	bne	.L6027
	ldrb	r3, [r10, #196]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L6027
	cmp	r6, #0
	beq	.L6031
	cmp	r6, #1
	bne	.L6041
	ldr	r3, .L6045+8
	mov	r8, r7
	mov	r6, r7
	str	r3, [r10, #200]
	b	.L6025
.L6040:
	movw	r3, #:lower16:fmbim_cmd_complete
	mov	r8, r7
	str	r10, [r4, #32]
	movt	r3, #:upper16:fmbim_cmd_complete
	mov	r6, #0
	str	r3, [r4, #28]
	b	.L6025
.L6017:
	movw	r3, #:lower16:fmbim_reset_cmd_complete
	adds	r6, r7, #0
	str	r10, [r4, #32]
	movt	r3, #:upper16:fmbim_reset_cmd_complete
	movne	r6, #1
	mov	r8, #0
	str	r3, [r4, #28]
	b	.L6025
.L6038:
	movw	r3, #41217
	cmp	r1, r3
	bne	.L6014
	cmp	r6, #0
	bne	.L6042
	add	fp, r10, #204
	mov	r0, fp
	bl	_raw_spin_lock
	mov	r3, r10
	ldr	r10, [r3, #216]!
	cmp	r10, r3
	beq	.L6043
	mov	r0, r10
	sub	r6, r10, #8
	bl	list_del
	mov	r0, fp
	bl	_raw_spin_unlock
	ldmdb	r10, {r1, r8}
	ldr	r0, [r4]
	cmp	r7, r8
	movcc	r8, r7
	mov	r2, r8
	bl	memcpy
	cmp	r6, #0
	beq	.L6029
	mov	r0, r6
	bl	mbim_free_ctrl_pkt.part.9
	cmp	r8, r7
	movge	r6, #0
	movlt	r6, #1
	b	.L6025
.L6020:
	adds	r3, r6, #0
	movne	r3, #1
	cmp	r7, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L6027
	ldrb	r3, [r10, #196]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L6027
	cmp	r7, #28
	ldr	r1, .L6045+12
	movcc	r6, r7
	movcs	r6, #28
	ldr	r0, [r4]
	mov	r2, r6
	mov	r8, r6
	bl	memcpy
	cmp	r6, r7
	movcs	r6, #0
	movcc	r6, #1
	b	.L6025
.L6015:
	sub	r3, r7, #4
	bic	r3, r3, #4
	uxth	r3, r3
	cmp	r3, #0
	bne	.L6044
	cmp	r6, #0
	bne	.L6027
	ldrb	r3, [r10, #196]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L6027
	movw	r3, #:lower16:mbim_ep0out_complete
	mov	r8, r7
	str	r10, [r4, #32]
	movt	r3, #:upper16:mbim_ep0out_complete
	str	r3, [r4, #28]
	b	.L6025
.L6029:
	cmp	r8, r7
	movge	r6, #0
	movlt	r6, #1
	b	.L6025
.L6041:
	mov	r8, r7
	mov	r6, r7
	b	.L6025
.L6031:
	ldr	r3, .L6045+4
	mov	r8, r6
	str	r3, [r10, #200]
	b	.L6025
.L6039:
	movw	r0, #:lower16:.LC401
	ldrb	r3, [r5, #1]	@ zero_extendqisi2
	str	r4, [sp]
	ldr	r1, .L6045
	movt	r0, #:upper16:.LC401
	ldrb	r2, [r5]	@ zero_extendqisi2
	bl	printk
	b	.L6011
.L6036:
	movw	r0, #:lower16:.LC396
	ldr	r1, .L6045
	mvn	r4, #106
	movt	r0, #:upper16:.LC396
	bl	printk
	b	.L6011
.L6044:
	movw	r0, #:lower16:.LC399
	mov	r2, r7
	ldr	r1, .L6045
	movt	r0, #:upper16:.LC399
	bl	printk
	ldrb	r2, [r5]	@ zero_extendqisi2
	b	.L6027
.L6043:
	movw	r0, #:lower16:.LC398
	ldr	r1, .L6045
	movt	r0, #:upper16:.LC398
	bl	printk
	mov	r0, fp
	bl	_raw_spin_unlock
	ldrb	r2, [r5]	@ zero_extendqisi2
	b	.L6027
.L6042:
	movw	r0, #:lower16:.LC397
	mov	r2, r7
	ldr	r1, .L6045
	movt	r0, #:upper16:.LC397
	bl	printk
	ldrb	r2, [r5]	@ zero_extendqisi2
	b	.L6027
.L6046:
	.align	2
.L6045:
	.word	.LANCHOR2+3384
	.word	.LANCHOR0+1320
	.word	.LANCHOR0+1364
	.word	.LANCHOR0+48
	.fnend
	.size	mbim_setup, .-mbim_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_write, %function
mbim_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #4
	sub	sp, sp, #4
	cmp	r4, #0
	beq	.L6071
	cmp	r2, #0
	mov	r5, r2
	beq	.L6072
	cmp	r2, #4096
	bhi	.L6073
	add	r6, r4, #104
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r6]
	add	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L6052
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L6074
	mov	r7, r1
	mov	r0, r5
	mov	r1, #208
	bl	mbim_alloc_ctrl_pkt
	subs	r8, r0, #0
	beq	.L6075
	mov	r3, sp
	ldr	r0, [r8]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L6076
	mov	r1, r5
	mov	r10, r5
	bl	__memzero
.L6057:
	cmp	r10, #0
	bne	.L6077
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L6078
	ldrb	r3, [r4, #164]	@ zero_extendqisi2
	cmp	r3, #3
	bne	.L6079
	add	r7, r4, #204
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	add	r2, r4, #216
	ldr	r1, [r4, #220]
	add	r0, r8, #8
	bl	__list_add
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	ldr	r8, [r4, #160]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #88]
	mov	fp, r0
	cmp	r3, #0
	beq	.L6080
	cmp	r8, #0
	beq	.L6081
	ldr	r3, [r8]
	cmp	r3, #0
	beq	.L6082
	add	r9, r4, #168
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r9]
	add	r2, r2, #1
	strex	r3, r2, [r9]
	teq	r3, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #1
	beq	.L6065
	mov	r1, r0
	mov	r0, r7
	ldr	r3, [r4, #168]
	bl	_raw_spin_unlock_irqrestore
.L6060:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, r5
.L6047:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6076:
	mov	r1, r7
	mov	r2, r5
	bl	__copy_from_user
	mov	r10, r0
	b	.L6057
.L6065:
	ldr	r3, [r8]
	mov	lr, #8
	mvn	ip, #94
	mov	r1, r0
	mov	r0, r7
	str	lr, [r8, #4]
	strb	ip, [r3]
	strb	r2, [r3, #1]
	strb	r10, [r3, #2]
	strb	r10, [r3, #3]
	ldrb	r2, [r4, #196]	@ zero_extendqisi2
	strh	r2, [r3, #4]	@ unaligned
	strb	r10, [r3, #6]
	strb	r10, [r3, #7]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #156]
	mov	r2, #32
	mov	r1, r8
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L6060
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r9]
	sub	r3, r3, #1
	strex	r1, r3, [r9]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC412
	ldr	r1, .L6083
	movt	r0, #:upper16:.LC412
	bl	printk
	b	.L6060
.L6075:
	movw	r0, #:lower16:.LC406
	ldr	r1, .L6083+4
	movt	r0, #:upper16:.LC406
	bl	printk
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #11
	b	.L6047
.L6074:
	movw	r0, #:lower16:.LC68
	ldr	r1, .L6083+4
	movt	r0, #:upper16:.LC68
	bl	printk
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #31
	b	.L6047
.L6052:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC405
	ldr	r1, .L6083+4
	movt	r0, #:upper16:.LC405
	bl	printk
	mvn	r0, #15
	b	.L6047
.L6073:
	movw	r0, #:lower16:.LC404
	mov	r3, #4096
	ldr	r1, .L6083+4
	movt	r0, #:upper16:.LC404
	bl	printk
	mvn	r0, #11
	b	.L6047
.L6072:
	movw	r0, #:lower16:.LC201
	ldr	r1, .L6083+4
	movt	r0, #:upper16:.LC201
	bl	printk
	mvn	r0, #18
	b	.L6047
.L6071:
	movw	r0, #:lower16:.LC403
	ldr	r1, .L6083+4
	movt	r0, #:upper16:.LC403
	bl	printk
	mvn	r0, #18
	b	.L6047
.L6077:
	movw	r0, #:lower16:.LC204
	mov	r2, r10
	ldr	r1, .L6083+4
	movt	r0, #:upper16:.LC204
	bl	printk
	mov	r0, r8
	bl	mbim_free_ctrl_pkt.part.9
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #0
	b	.L6047
.L6078:
	movw	r0, #:lower16:.LC407
	mov	r2, r4
	ldr	r1, .L6083+8
	movt	r0, #:upper16:.LC407
	bl	printk
	mov	r0, r8
	bl	mbim_free_ctrl_pkt.part.9
	b	.L6060
.L6079:
	movw	r0, #:lower16:.LC408
	ldr	r1, .L6083+8
	mov	r2, r4
	movt	r0, #:upper16:.LC408
	bl	printk
	mov	r0, r8
	bl	mbim_free_ctrl_pkt.part.9
	b	.L6060
.L6080:
	movw	r0, #:lower16:.LC409
	mov	r2, r4
	ldr	r1, .L6083
	movt	r0, #:upper16:.LC409
	bl	printk
	mov	r1, fp
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L6060
.L6081:
	movw	r0, #:lower16:.LC410
	mov	r2, r4
	ldr	r1, .L6083
	movt	r0, #:upper16:.LC410
	bl	printk
	mov	r1, fp
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L6060
.L6082:
	movw	r0, #:lower16:.LC411
	mov	r2, r4
	ldr	r1, .L6083
	movt	r0, #:upper16:.LC411
	bl	printk
	mov	r1, fp
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L6060
.L6084:
	.align	2
.L6083:
	.word	.LANCHOR2+3436
	.word	.LANCHOR2+3396
	.word	.LANCHOR2+3408
	.fnend
	.size	mbim_write, .-mbim_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_read, %function
mbim_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #36
	sub	sp, sp, #36
	str	r1, [sp]
	cmp	r4, #0
	beq	.L6115
	cmp	r2, #4096
	mov	fp, r2
	bhi	.L6116
	add	r10, r4, #100
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r10]
	add	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L6113
	mov	r3, sp
	bic	r5, r3, #8128
	bic	r5, r5, #63
.L6089:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	bne	.L6094
	ldr	r3, [r4, #232]
	cmp	r3, #0
	beq	.L6095
.L6094:
	ldr	r3, [r4, #232]
	cmp	r3, #0
	bne	.L6117
	add	r8, r4, #204
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r3, r4
	mov	r1, r0
	ldr	r5, [r3, #208]!
	cmp	r5, r3
	bne	.L6107
	mov	r3, sp
	bic	r9, r3, #8128
	bic	r9, r9, #63
	b	.L6102
.L6098:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #208]
	mov	r1, r0
	cmp	r5, r6
	bne	.L6097
.L6102:
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #208]
	cmp	r3, r5
	bne	.L6098
	ldr	r0, [r9, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r2, #:upper16:autoremove_wake_function
	mov	r3, #0
	add	r6, sp, #12
	add	r7, r4, #108
	str	r3, [sp, #12]
	str	r0, [sp, #16]
	str	r2, [sp, #20]
	str	r1, [sp, #24]
	str	r1, [sp, #28]
	b	.L6101
.L6118:
	bl	schedule
.L6101:
	mov	r2, #1
	mov	r1, r6
	mov	r0, r7
	bl	prepare_to_wait
	ldr	r3, [r4, #208]
	cmp	r3, r5
	bne	.L6099
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L6118
	mov	r1, r6
	mov	r0, r7
	bl	finish_wait
	movw	r0, #:lower16:.LC418
	ldr	r1, .L6122
	movt	r0, #:upper16:.LC418
	bl	printk
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r4, #65024
	movt	r4, 65535
.L6085:
	mov	r0, r4
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6099:
	mov	r1, r6
	mov	r0, r7
	bl	finish_wait
	b	.L6098
.L6107:
	mov	r6, r5
.L6097:
	ldr	r3, [r6, #-4]
	sub	r5, r6, #8
	cmp	r3, fp
	bhi	.L6119
	mov	r0, r6
	str	r1, [sp, #4]
	bl	list_del
	ldr	r1, [sp, #4]
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	ldr	r2, [r6, #-4]
	bic	r3, r3, #8128
	ldr	r0, [sp]
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r0, r2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L6120
.L6104:
	cmp	r2, #0
	ldreq	r4, [r6, #-4]
	bne	.L6121
.L6106:
	cmp	r5, #0
	beq	.L6085
	mov	r0, r5
	bl	mbim_free_ctrl_pkt.part.9
	b	.L6085
.L6120:
	ldr	r1, [r6, #-8]
	bl	__copy_to_user
	mov	r2, r0
	b	.L6104
.L6117:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r4, #4
	b	.L6085
.L6095:
	movw	r0, #:lower16:.LC415
	ldr	r1, .L6122
	movt	r0, #:upper16:.LC415
	bl	printk
	ldr	r3, [r4, #88]
	cmp	r3, #0
	bne	.L6089
	ldr	r3, [r4, #232]
	cmp	r3, #0
	bne	.L6089
	ldr	r0, [r5, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r2, #:upper16:autoremove_wake_function
	add	r6, sp, #12
	str	r3, [sp, #12]
	add	r7, r4, #108
	str	r0, [sp, #16]
	str	r2, [sp, #20]
	str	r1, [sp, #24]
	str	r1, [sp, #28]
.L6093:
	mov	r2, #1
	mov	r1, r6
	mov	r0, r7
	bl	prepare_to_wait
	ldr	r3, [r4, #88]
	cmp	r3, #0
	bne	.L6091
	ldr	r3, [r4, #232]
	cmp	r3, #0
	bne	.L6091
	ldr	r3, [r5, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L6092
	bl	schedule
	b	.L6093
.L6113:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC414
	ldr	r1, .L6122
	mvn	r4, #15
	movt	r0, #:upper16:.LC414
	bl	printk
	b	.L6085
.L6092:
	mov	r1, r6
	mov	r0, r7
	bl	finish_wait
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r4, #65024
	movt	r4, 65535
	b	.L6085
.L6091:
	mov	r1, r6
	mov	r0, r7
	bl	finish_wait
	b	.L6089
.L6119:
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC416
	mov	r3, fp
	ldr	r1, .L6122
	ldr	r2, [r6, #-4]
	movt	r0, #:upper16:.LC416
	mvn	r4, #11
	bl	printk
	b	.L6085
.L6121:
	movw	r0, #:lower16:.LC417
	ldr	r1, .L6122
	mvn	r4, #11
	movt	r0, #:upper16:.LC417
	bl	printk
	b	.L6106
.L6116:
	movw	r0, #:lower16:.LC413
	mov	r3, #4096
	ldr	r1, .L6122
	movt	r0, #:upper16:.LC413
	mvn	r4, #21
	bl	printk
	b	.L6085
.L6115:
	movw	r0, #:lower16:.LC403
	ldr	r1, .L6122
	mvn	r4, #18
	movt	r0, #:upper16:.LC403
	bl	printk
	b	.L6085
.L6123:
	.align	2
.L6122:
	.word	.LANCHOR2+3468
	.fnend
	.size	mbim_read, .-mbim_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_set_alt, %function
f_audio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #32]
	ldrb	r3, [r6, #16]	@ zero_extendqisi2
	.pad #4
	sub	sp, sp, #4
	cmp	r3, r1
	beq	.L6161
	ldrb	r3, [r6, #17]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L6136
	cmp	r2, #1
	bne	.L6137
	ldr	r5, [r0, #172]
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r1, [r5, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r7, r0, #0
	bne	.L6162
	str	r8, [r5]
	ldr	r0, [r6, #1412]
	bl	f_audio_buffer_alloc
	cmn	r0, #4096
	str	r0, [r8, #184]
	bhi	.L6139
	ldr	r3, [r6, #1416]
	cmp	r3, #0
	ble	.L6159
	movw	r9, #:lower16:f_audio_complete
	movt	r9, #:upper16:f_audio_complete
.L6140:
	ldr	r3, [r5, #8]
	mov	r1, #32
	mov	r0, r5
	add	r7, r7, #1
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	movw	r1, #32800
	beq	.L6142
	ldr	r0, [r6, #1420]
	bl	__kmalloc
	mov	r3, r0
	mov	r2, #32
	cmp	r3, #0
	mov	r0, r5
	mov	r1, r4
	str	r3, [r4]
	beq	.L6143
	ldr	r3, [r6, #1420]
	str	r3, [r4, #4]
	str	r9, [r4, #28]
	str	r8, [r4, #32]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bne	.L6163
	ldr	r3, [r6, #1416]
	cmp	r3, r7
	bgt	.L6140
.L6141:
	strb	r10, [r8, #249]
.L6124:
	mov	r0, r4
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6161:
	cmp	r2, #1
	bne	.L6126
	ldr	r5, [r0, #176]
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r1, [r5, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L6164
	str	r8, [r5]
	mov	r1, #32
	mov	r0, r5
	str	r4, [r8, #216]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L6142
	movw	r1, #32800
	ldr	r0, [r6, #1408]
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	beq	.L6143
	ldr	ip, [r6, #1408]
	movw	r3, #:lower16:f_audio_complete
	mov	r1, r4
	movt	r3, #:upper16:f_audio_complete
	mov	r2, #32
	mov	r0, r5
	str	ip, [r4, #4]
	str	r3, [r4, #28]
	str	r8, [r4, #32]
	str	r4, [r8, #244]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bne	.L6165
.L6131:
	movw	r3, #:lower16:system_wq
	add	r2, r8, #220
	movt	r3, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r3]
	bl	queue_work_on
.L6132:
	strb	r10, [r8, #248]
	b	.L6124
.L6139:
	movw	r0, #:lower16:.LC27
	ldr	r1, .L6167
	mvn	r4, #11
	movt	r0, #:upper16:.LC27
	bl	printk
	b	.L6124
.L6137:
	ldr	r4, [r0, #184]
	cmp	r4, #0
	beq	.L6145
	movw	r0, #:lower16:.LC425
	ldr	r1, .L6167
	movt	r0, #:upper16:.LC425
	bl	printk
	add	r0, r4, #8
	add	r2, r8, #204
	ldr	r1, [r8, #208]
	bl	__list_add
	movw	r3, #:lower16:system_wq
	add	r2, r8, #188
	movt	r3, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r3]
	bl	queue_work_on
	mov	r3, #0
	mov	r4, r3
	str	r3, [r8, #184]
	b	.L6141
.L6145:
	movw	r0, #:lower16:.LC426
	ldr	r1, .L6167
	movt	r0, #:upper16:.LC426
	bl	printk
	b	.L6141
.L6126:
	add	r7, r0, #212
	add	r6, r0, #236
	mov	r0, r7
	mov	fp, #0
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	b	.L6134
.L6135:
	bl	list_del
	cmp	r5, #0
	bne	.L6166
.L6134:
	ldr	r4, [r8, #236]
	cmp	r4, r6
	sub	r5, r4, #8
	mov	r0, r4
	bne	.L6135
	mov	r1, r9
	mov	r0, r7
	mov	r4, #0
	bl	_raw_spin_unlock_irqrestore
	b	.L6132
.L6166:
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r5
	str	fp, [r4, #-8]
	bl	kfree
	b	.L6134
.L6159:
	mov	r4, r7
	b	.L6141
.L6163:
	movw	r0, #:lower16:.LC424
	mov	r3, r4
	ldr	r1, .L6167
	ldr	r2, [r5, #4]
	movt	r0, #:upper16:.LC424
	bl	printk
	b	.L6141
.L6142:
	movw	r0, #:lower16:.LC420
	ldr	r1, .L6167
	mvn	r4, #11
	movt	r0, #:upper16:.LC420
	bl	printk
	b	.L6124
.L6143:
	movw	r0, #:lower16:.LC421
	ldr	r1, .L6167
	mvn	r4, #11
	movt	r0, #:upper16:.LC421
	bl	printk
	b	.L6124
.L6164:
	movw	r0, #:lower16:.LC419
	ldr	r1, .L6167
	movt	r0, #:upper16:.LC419
	bl	printk
	b	.L6124
.L6162:
	movw	r0, #:lower16:.LC423
	ldr	r1, .L6167
	mov	r4, r7
	movt	r0, #:upper16:.LC423
	bl	printk
	b	.L6124
.L6165:
	movw	r0, #:lower16:.LC422
	mov	r3, r4
	ldr	r1, .L6167
	ldr	r2, [r5, #4]
	movt	r0, #:upper16:.LC422
	bl	printk
	b	.L6131
.L6136:
	movw	r0, #:lower16:.LC427
	mov	r2, r1
	ldr	r1, .L6167
	mov	r3, #0
	movt	r0, #:upper16:.LC427
	mov	r4, r3
	bl	printk
	b	.L6124
.L6168:
	.align	2
.L6167:
	.word	.LANCHOR2+3480
	.fnend
	.size	f_audio_set_alt, .-f_audio_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_request_free.part.11, %function
conn_gadget_request_free.part.11:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r0]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	conn_gadget_request_free.part.11, .-conn_gadget_request_free.part.11
	.set	adb_request_free.part.15,conn_gadget_request_free.part.11
	.set	ccid_request_free.part.14,conn_gadget_request_free.part.11
	.set	mtp_request_free.part.13,conn_gadget_request_free.part.11
	.set	acc_request_free.part.12,conn_gadget_request_free.part.11
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_function_unbind, %function
acc_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r1, #1648
	mov	r4, r1
	add	r5, r5, #8
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	b	.L6172
.L6173:
	ldr	r1, [r4, #92]
	bl	acc_request_free.part.12
.L6172:
	mov	r1, r5
	mov	r0, r4
	bl	req_get
	cmp	r0, #0
	bne	.L6173
	ldr	r1, [r4, #96]
	ldr	r0, [r4, #1688]
	cmp	r0, #0
	beq	.L6174
	bl	acc_request_free.part.12
	ldr	r1, [r4, #96]
.L6174:
	ldr	r0, [r4, #1692]
	cmp	r0, #0
	beq	.L6175
	bl	acc_request_free.part.12
.L6175:
	ldr	r0, .L6183
	bl	hid_unregister_driver
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kill_all_hid_devices
.L6184:
	.align	2
.L6183:
	.word	.LANCHOR0+1424
	.fnend
	.size	acc_function_unbind, .-acc_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_unbind, %function
mtp_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	add	r5, r1, #116
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	b	.L6186
.L6187:
	ldr	r1, [r4, #92]
	bl	mtp_request_free.part.13
.L6186:
	mov	r1, r5
	mov	r0, r4
	bl	mtp_req_get
	cmp	r0, #0
	bne	.L6187
	ldr	r1, [r4, #96]
	ldr	r0, [r4, #168]
	cmp	r0, #0
	beq	.L6188
	bl	mtp_request_free.part.13
	ldr	r1, [r4, #96]
.L6188:
	ldr	r0, [r4, #172]
	cmp	r0, #0
	beq	.L6189
	bl	mtp_request_free.part.13
.L6189:
	add	r5, r4, #124
	b	.L6190
.L6191:
	ldr	r1, [r4, #100]
	bl	mtp_request_free.part.13
.L6190:
	mov	r1, r5
	mov	r0, r4
	bl	mtp_req_get
	subs	r3, r0, #0
	bne	.L6191
	str	r3, [r4, #104]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	mtp_function_unbind, .-mtp_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_write, %function
ccid_bulk_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r5, [r0, #124]
	.pad #24
	sub	sp, sp, #24
	ldr	r3, [r5, #96]
	cmp	r3, #0
	beq	.L6213
	cmp	r2, #0
	mov	r4, r2
	mov	r6, r1
	beq	.L6224
	cmp	r2, #524
	bcs	.L6225
	add	r8, r5, #192
	mov	r0, r5
	mov	r1, r8
	bl	ccid_req_get
	subs	r7, r0, #0
	beq	.L6226
.L6204:
	ldr	r3, [r5, #148]
	cmp	r3, #0
	bne	.L6227
	mov	r3, sp
	ldr	r0, [r7]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, r4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L6209
	mov	r1, r6
	mov	r2, r4
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L6210
	str	r4, [r7, #4]
	ldr	r0, [r5, #104]
	mov	r2, #208
	mov	r1, r7
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L6228
.L6199:
	mov	r0, r4
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L6209:
	mov	r1, r4
	bl	__memzero
.L6210:
	ldr	r3, [r5, #96]
	cmp	r3, #0
	bne	.L6212
	cmp	r7, #0
	beq	.L6213
	mov	r0, r7
	ldr	r1, [r5, #104]
	mvn	r4, #18
	bl	ccid_request_free.part.14
	b	.L6199
.L6226:
	ldr	r3, [r5, #148]
	cmp	r3, #0
	bne	.L6204
	mov	r2, sp
	str	r3, [sp, #4]
	add	r1, sp, #16
	bic	r9, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r9, r9, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r9, #12]
	add	r10, r5, #172
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L6207
.L6229:
	bl	schedule
.L6207:
	mov	r2, #1
	add	r1, sp, #4
	mov	r0, r10
	bl	prepare_to_wait
	mov	r1, r8
	mov	r0, r5
	bl	ccid_req_get
	subs	r7, r0, #0
	bne	.L6205
	ldr	r3, [r5, #148]
	cmp	r3, #0
	bne	.L6205
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L6229
	mov	r4, #65024
	add	r1, sp, #4
	mov	r0, r10
	movt	r4, 65535
	bl	finish_wait
	b	.L6199
.L6228:
	mov	r3, #1
	mov	r2, r7
	mov	r1, r8
	mov	r0, r5
	str	r3, [r5, #148]
	add	r6, r5, #92
	bl	ccid_req_put
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #96]
	mov	r7, r0
	cmp	r3, #0
	mvnne	r4, #4
	beq	.L6230
.L6215:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L6199
.L6213:
	mvn	r4, #18
	b	.L6199
.L6205:
	add	r1, sp, #4
	mov	r0, r10
	bl	finish_wait
	b	.L6204
.L6230:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L6216
.L6217:
	ldr	r1, [r5, #104]
	bl	ccid_request_free.part.14
.L6216:
	mov	r1, r8
	mov	r0, r5
	bl	ccid_req_get
	cmp	r0, #0
	bne	.L6217
	mvn	r4, #18
	b	.L6215
.L6212:
	mov	r2, r7
	mov	r1, r8
	mov	r0, r5
	mvn	r4, #13
	bl	ccid_req_put
	b	.L6199
.L6225:
	movw	r0, #:lower16:.LC428
	mov	r3, r2
	ldr	r1, .L6231
	movt	r0, #:upper16:.LC428
	movw	r2, #523
	bl	printk
	mvn	r4, #11
	b	.L6199
.L6224:
	movw	r0, #:lower16:.LC201
	ldr	r1, .L6231
	mvn	r4, #18
	movt	r0, #:upper16:.LC201
	bl	printk
	b	.L6199
.L6227:
	movw	r0, #:lower16:.LC429
	ldr	r1, .L6231
	mvn	r4, #4
	movt	r0, #:upper16:.LC429
	bl	printk
	b	.L6199
.L6232:
	.align	2
.L6231:
	.word	.LANCHOR2+3496
	.fnend
	.size	ccid_bulk_write, .-ccid_bulk_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_read, %function
ccid_bulk_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r2
	movw	r2, #522
	cmp	r8, r2
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #24
	sub	sp, sp, #24
	ldr	r4, [r0, #124]
	bhi	.L6262
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L6236
	mov	r3, sp
	mov	r9, r1
	bic	r7, r3, #8128
	add	r5, r4, #92
	bic	r7, r7, #63
	b	.L6237
.L6239:
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L6250
.L6266:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L6263
	ldr	r2, [r6, #48]
	cmp	r2, #0
	bne	.L6244
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L6237:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L6249
	ldr	r6, [r4, #184]
	mov	r3, #0
	mov	r1, r0
	mov	r0, r5
	str	r8, [r6, #4]
	str	r3, [r4, #188]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #108]
	mov	r1, r6
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L6264
	ldr	r3, [r4, #188]
	cmp	r3, #0
	bne	.L6239
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L6239
	ldr	r2, [r4, #96]
	cmp	r2, #0
	beq	.L6239
	ldr	r0, [r7, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #16
	movt	r2, #:upper16:autoremove_wake_function
	add	r10, r4, #160
	str	r3, [sp, #4]
	str	r1, [sp, #16]
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #20]
	b	.L6242
.L6265:
	bl	schedule
.L6242:
	mov	r2, #1
	add	r1, sp, #4
	mov	r0, r10
	bl	prepare_to_wait
	ldr	r3, [r4, #188]
	cmp	r3, #0
	bne	.L6240
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L6240
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L6240
	ldr	r3, [r7, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L6265
	add	r1, sp, #4
	mov	r0, r10
	bl	finish_wait
	ldr	r0, [r4, #108]
	mov	r3, #1
	mov	r8, #65024
	mov	r1, r6
	movt	r8, 65535
	str	r3, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L6233:
	mov	r0, r8
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L6240:
	add	r1, sp, #4
	mov	r0, r10
	bl	finish_wait
	ldr	r3, [r4, #148]
	cmp	r3, #0
	beq	.L6266
.L6250:
	mvn	r8, #4
	b	.L6233
.L6249:
	mvn	r8, #18
	b	.L6233
.L6263:
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	mvn	r8, #18
	b	.L6233
.L6244:
	mov	r3, #1
	cmp	r2, r8
	mov	r1, r0
	mov	r0, r5
	str	r3, [r4, #156]
	movcc	r7, r2
	movcs	r7, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r9, r7; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L6267
.L6245:
	cmp	r7, #0
	mov	r0, r5
	mvnne	r8, #13
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	mov	r2, #0
	mov	r6, r0
	str	r2, [r4, #156]
	cmp	r3, r2
	beq	.L6268
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	b	.L6233
.L6267:
	mov	r2, r7
	mov	r0, r9
	ldr	r1, [r6]
	bl	__copy_to_user
	mov	r7, r0
	b	.L6245
.L6268:
	ldr	r0, [r4, #184]
	cmp	r0, r2
	beq	.L6248
	ldr	r1, [r4, #108]
	bl	ccid_request_free.part.14
.L6248:
	mov	r1, r6
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	mvn	r8, #18
	b	.L6233
.L6264:
	movw	r0, #:lower16:.LC431
	ldr	r1, .L6269
	mvn	r8, #4
	movt	r0, #:upper16:.LC431
	bl	printk
	mov	r3, #1
	str	r3, [r4, #148]
	b	.L6233
.L6236:
	movw	r0, #:lower16:.LC430
	ldr	r1, .L6269
	mvn	r8, #4
	movt	r0, #:upper16:.LC430
	bl	printk
	b	.L6233
.L6262:
	movw	r0, #:lower16:.LC428
	mov	r3, r8
	ldr	r1, .L6269
	movt	r0, #:upper16:.LC428
	mvn	r8, #11
	bl	printk
	b	.L6233
.L6270:
	.align	2
.L6269:
	.word	.LANCHOR2+3512
	.fnend
	.size	ccid_bulk_read, .-ccid_bulk_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_disable, %function
ccid_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r0, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #108]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #112]
	cmp	r0, #0
	beq	.L6272
	ldr	r1, [r4, #100]
	bl	ccid_request_free.part.14
.L6272:
	ldr	r3, [r4, #156]
	cmp	r3, #0
	bne	.L6273
	ldr	r0, [r4, #184]
	cmp	r0, #0
	beq	.L6273
	ldr	r1, [r4, #108]
	bl	ccid_request_free.part.14
.L6273:
	add	r6, r4, #192
	b	.L6274
.L6275:
	ldr	r1, [r4, #104]
	bl	ccid_request_free.part.14
.L6274:
	mov	r1, r6
	mov	r0, r4
	bl	ccid_req_get
	subs	r5, r0, #0
	bne	.L6275
	mov	r3, r5
	add	r0, r4, #172
	str	r5, [r4, #96]
	mov	r2, #1
	mov	r1, #3
	str	r5, [r4, #200]
	bl	__wake_up
	mov	r3, r5
	add	r0, r4, #160
	mov	r2, #1
	mov	r1, #3
	bl	__wake_up
	ldr	r6, [sp, #8]
	mov	r3, r5
	add	r0, r4, #128
	mov	r2, #1
	ldrd	r4, [sp]
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
	.fnend
	.size	ccid_function_disable, .-ccid_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_disable, %function
rmnet_mux_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #372]
	cmp	r3, #0
	bxeq	lr
	mov	r3, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	str	r3, [r0, #372]
	ldr	r0, [r0, #96]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L6285
	blx	r2
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
.L6285:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r5, [r4, #96]
	ldr	r6, [r4, #100]
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L6286
	blx	r2
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
.L6286:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L6287
	blx	r2
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
.L6287:
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	add	r2, r4, #384
	ldr	r1, [r4, #380]
	mov	r0, #4
	str	r3, [r4, #352]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on
	.fnend
	.size	rmnet_mux_disable, .-rmnet_mux_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ep_matches.part.17, %function
ep_matches.part.17:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	ip, [r2, #3]	@ zero_extendqisi2
	ands	r4, ip, #3
	beq	.L6303
	ldr	r9, [r1, #4]
	ldrb	ip, [r9]	@ zero_extendqisi2
	cmp	ip, #101
	beq	.L6356
.L6303:
	mov	r0, #0
.L6300:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L6356:
	mov	r7, r3
	ldrb	r3, [r9, #2]	@ zero_extendqisi2
	mov	r6, r1
	mov	r8, r0
	mov	r5, r2
	cmp	r3, #45
	beq	.L6304
	mov	r1, #45
	mov	r0, r9
	bl	strrchr
	subs	r10, r0, #0
	beq	.L6305
	cmp	r4, #2
	beq	.L6307
	cmp	r4, #3
	ldrb	r3, [r10, #2]	@ zero_extendqisi2
	bne	.L6351
	cmp	r3, #115
	beq	.L6303
	movw	r0, #:lower16:.LC339
	ldr	r1, [r8, #28]
	movt	r0, #:upper16:.LC339
	bl	strcmp
	cmp	r0, #0
	bne	.L6309
	ldrb	r3, [r10, #1]	@ zero_extendqisi2
	cmp	r3, #105
	beq	.L6303
.L6309:
	ldrb	r2, [r10, #-1]	@ zero_extendqisi2
	movw	r3, #:lower16:_ctype
	movt	r3, #:upper16:_ctype
	ldrb	r3, [r3, r2]	@ zero_extendqisi2
	tst	r3, #4
	beq	.L6321
	ldrh	r3, [r5, #4]	@ unaligned
	cmp	r3, #0
	ubfxne	r2, r3, #0, #11
	movne	r9, #0
	bne	.L6316
	mov	r9, r3
	b	.L6323
.L6351:
	cmp	r3, #115
	bne	.L6303
.L6310:
	ldrb	r2, [r10, #-1]	@ zero_extendqisi2
	movw	r3, #:lower16:_ctype
	movt	r3, #:upper16:_ctype
	ldrb	r3, [r3, r2]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L6304
.L6321:
	ldrsb	r3, [r5, #2]
	cmp	r3, #0
	blt	.L6357
	cmp	r2, #116
	bne	.L6303
.L6304:
	sub	r9, r4, #2
	cmp	r7, #0
	clz	r9, r9
	moveq	r3, #0
	lsr	r9, r9, #5
	movne	r3, r9
	cmp	r3, #0
	bne	.L6358
.L6312:
	ldrh	r3, [r5, #4]	@ unaligned
	cmp	r3, #0
	bne	.L6313
.L6323:
	ldrh	r3, [r6, #20]
	strh	r3, [r5, #4]	@ unaligned
.L6313:
	cmp	r4, #1
	ubfx	r2, r3, #0, #11
	beq	.L6315
	cmp	r4, #3
	beq	.L6316
.L6314:
	ldrb	r3, [r5, #2]	@ zero_extendqisi2
	movw	r2, #:lower16:_ctype
	movt	r2, #:upper16:_ctype
	and	r3, r3, #128
	strb	r3, [r5, #2]
	ldr	r0, [r6, #4]
	ldrb	r1, [r0, #2]	@ zero_extendqisi2
	ldrb	r2, [r2, r1]	@ zero_extendqisi2
	tst	r2, #4
	bne	.L6359
	movw	r1, #:lower16:.LANCHOR1
	movt	r1, #:upper16:.LANCHOR1
	ldr	r2, [r1, #3600]
	add	r2, r2, #1
	cmp	r2, #15
	str	r2, [r1, #3600]
	bhi	.L6303
	orr	r3, r3, r2
	uxtb	r3, r3
	strb	r3, [r5, #2]
.L6319:
	cmp	r7, #0
	moveq	r7, r9
	movne	r7, #0
	cmp	r7, #0
	beq	.L6320
	ldrh	r2, [r6, #20]
	cmp	r2, #64
	movge	r2, #64
	strh	r2, [r5, #4]	@ unaligned
.L6320:
	mov	r0, #1
	strb	r3, [r6, #25]
	b	.L6300
.L6316:
	ldr	r0, [r8, #20]
	cmp	r0, #2
	movls	r1, #1
	movhi	r1, #0
	cmp	r2, #64
	movls	r1, #0
	cmp	r1, #0
	bne	.L6303
.L6315:
	ldrh	r1, [r6, #20]
	cmp	r1, r2
	bcc	.L6303
	ldr	r1, [r8, #20]
	cmp	r1, #2
	bhi	.L6314
	cmp	r2, #1024
	bcs	.L6303
	tst	r3, #6144
	bne	.L6303
	b	.L6314
.L6359:
	add	r0, r0, #2
	mov	r2, #10
	mov	r1, #0
	bl	simple_strtoul
	ldrb	r3, [r5, #2]	@ zero_extendqisi2
	orr	r3, r3, r0
	uxtb	r3, r3
	strb	r3, [r5, #2]
	b	.L6319
.L6305:
	mov	r0, r9
	bl	strlen
	add	r10, r9, r0
	b	.L6310
.L6358:
	ldr	r2, [r8, #20]
	cmp	r2, #4
	bls	.L6325
	ldrb	r2, [r7, #3]	@ zero_extendqisi2
	ldrh	r1, [r6, #22]
	and	r2, r2, #31
	cmp	r1, r2
	bcc	.L6303
.L6325:
	mov	r9, r3
	b	.L6312
.L6307:
	ldrb	r3, [r10, #1]	@ zero_extendqisi2
	cmp	r3, #98
	bne	.L6303
	b	.L6310
.L6357:
	cmp	r2, #110
	bne	.L6303
	b	.L6304
	.fnend
	.size	ep_matches.part.17, .-ep_matches.part.17
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_mmap, %function
audio_pcm_mmap:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r2, [r0, #212]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r2, #544]
	cmp	r3, #0
	beq	.L6361
	ldr	lr, [r2, #548]
	cmp	lr, #0
	beq	.L6361
	ldr	r0, [r0]
	ldr	r2, [r2, #540]
	ldr	r0, [r0]
	ldr	r0, [r0, #496]
	cmp	r0, #0
	beq	.L6362
	ldr	ip, [r0, #276]
	cmp	ip, #0
	beq	.L6362
.L6363:
	mov	r4, #0
	str	lr, [sp]
	str	r4, [sp, #4]
	ldr	r4, [ip, #8]
	blx	r4
.L6360:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6362:
	movw	ip, #:lower16:arm_dma_ops
	movt	ip, #:upper16:arm_dma_ops
	cmp	ip, #0
	bne	.L6363
	.syntax divided
@ 236 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/dma-mapping.h" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/dma-mapping.h"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 236, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L6361:
	movw	r0, #:lower16:.LC432
	movt	r0, #:upper16:.LC432
	bl	printk
	mvn	r0, #21
	b	.L6360
	.fnend
	.size	audio_pcm_mmap, .-audio_pcm_mmap
	.align	2
	.global	gsdio_read_complete
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_read_complete, %function
gsdio_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	cmp	r4, #0
	beq	.L6379
	add	r6, r4, #4
	mov	r5, r1
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	add	r2, r4, #20
	ldr	r1, [r4, #24]
	add	r0, r5, #36
	bl	__list_add
	ldr	r3, [r4, #48]
	movw	r1, #:lower16:.LANCHOR1
	add	r2, r4, #28
	movt	r1, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r1, #2608]
	add	r3, r3, #1
	str	r3, [r4, #48]
	bl	queue_work_on
	ldrd	r4, [sp]
	mov	r1, r7
	mov	r0, r6
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L6379:
	movw	r0, #:lower16:.LC12
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC12
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L6380
	b	printk
.L6381:
	.align	2
.L6380:
	.word	.LANCHOR2+3528
	.fnend
	.size	gsdio_read_complete, .-gsdio_read_complete
	.align	2
	.global	gsdio_ctrl_wq
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ctrl_wq, %function
gsdio_ctrl_wq:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #80
	beq	.L6384
	bx	lr
.L6384:
	movw	r0, #:lower16:.LC12
	ldr	r1, .L6385
	movt	r0, #:upper16:.LC12
	b	printk
.L6386:
	.align	2
.L6385:
	.word	.LANCHOR2+3548
	.fnend
	.size	gsdio_ctrl_wq, .-gsdio_ctrl_wq
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_poll, %function
rmnet_ctrl_poll:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	cmp	r4, #0
	beq	.L6400
	cmp	r1, #0
	beq	.L6390
	ldr	r3, [r1]
	cmp	r3, #0
	beq	.L6390
	mov	r2, r1
	add	r1, r4, #32
	blx	r3
.L6390:
	add	r5, r4, #52
	add	r4, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4]
	mov	r1, r0
	mov	r0, r5
	cmp	r3, r4
	movne	r4, #65
	moveq	r4, #0
	bl	_raw_spin_unlock_irqrestore
.L6387:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6400:
	movw	r0, #:lower16:.LC433
	ldr	r1, .L6401
	mov	r4, #8
	movt	r0, #:upper16:.LC433
	bl	printk
	b	.L6387
.L6402:
	.align	2
.L6401:
	.word	.LANCHOR2+3564
	.fnend
	.size	rmnet_ctrl_poll, .-rmnet_ctrl_poll
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_send_cbits_tomodem, %function
ghsic_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	ip, [r3, #1020]
	cmp	r0, #0
	cmpne	r1, ip
	bcs	.L6407
	mov	r0, #104
	mla	r1, r0, r1, r3
	ldr	r3, [r1, #1024]
	cmp	r3, #0
	beq	.L6408
	ldr	r1, [r3, #88]
	cmp	r1, r2
	ldrne	r1, [r3, #84]
	strne	r2, [r3, #88]
	bx	lr
.L6407:
	movw	r0, #:lower16:.LC17
	mov	r2, r1
	ldr	r1, .L6409
	movt	r0, #:upper16:.LC17
	b	printk
.L6408:
	movw	r0, #:lower16:.LC12
	ldr	r1, .L6409
	movt	r0, #:upper16:.LC12
	b	printk
.L6410:
	.align	2
.L6409:
	.word	.LANCHOR2+3580
	.fnend
	.size	ghsic_send_cbits_tomodem, .-ghsic_send_cbits_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_send_cbits_tomodem, %function
ghsuart_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	ip, [r3, #1860]
	cmp	r0, #0
	cmpne	r1, ip
	bcs	.L6415
	mov	r0, #84
	mla	r1, r0, r1, r3
	ldr	r3, [r1, #1864]
	cmp	r3, #0
	beq	.L6416
	ldr	r1, [r3, #92]
	cmp	r1, r2
	ldrne	r1, [r3, #88]
	strne	r2, [r3, #92]
	bx	lr
.L6415:
	movw	r0, #:lower16:.LC17
	mov	r2, r1
	ldr	r1, .L6417
	movt	r0, #:upper16:.LC17
	b	printk
.L6416:
	movw	r0, #:lower16:.LC12
	ldr	r1, .L6417
	movt	r0, #:upper16:.LC12
	b	printk
.L6418:
	.align	2
.L6417:
	.word	.LANCHOR2+3608
	.fnend
	.size	ghsuart_send_cbits_tomodem, .-ghsuart_send_cbits_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_wake_cb, %function
bam_data_wake_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #4]
	cmp	r3, #0
	beq	.L6426
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L6427
	ldr	r0, [r3]
	cmp	r0, #0
	beq	.L6428
	ldr	r3, [r0]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L6424
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	bx	r3
.L6424:
	mvn	r0, #94
.L6419:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6428:
	movw	r0, #:lower16:.LC436
	ldr	r1, .L6429
	movt	r0, #:upper16:.LC436
	bl	printk
	mvn	r0, #18
	b	.L6419
.L6427:
	movw	r0, #:lower16:.LC435
	ldr	r1, .L6429
	movt	r0, #:upper16:.LC435
	bl	printk
	mvn	r0, #18
	b	.L6419
.L6426:
	movw	r0, #:lower16:.LC434
	ldr	r1, .L6429
	movt	r0, #:upper16:.LC434
	bl	printk
	mvn	r0, #18
	b	.L6419
.L6430:
	.align	2
.L6429:
	.word	.LANCHOR2+3636
	.fnend
	.size	bam_data_wake_cb, .-bam_data_wake_cb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_connect, %function
frmnet_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	subs	r2, r0, #0
	beq	.L6433
	mov	r3, #1
	str	r3, [r2, #124]
	bx	lr
.L6433:
	movw	r0, #:lower16:.LC437
	ldr	r1, .L6434
	movt	r0, #:upper16:.LC437
	b	printk
.L6435:
	.align	2
.L6434:
	.word	.LANCHOR2+3656
	.fnend
	.size	frmnet_connect, .-frmnet_connect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_disconnect, %function
frmnet_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	subs	r4, r0, #0
	str	lr, [sp, #4]
	beq	.L6450
	ldr	r3, [r4, #120]
	mov	r2, #0
	str	r2, [r4, #124]
	cmp	r3, r2
	beq	.L6436
	ldr	r0, [r4, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, r2
	beq	.L6440
	blx	r3
.L6440:
	ldr	r3, [r4, #140]
	mov	r1, #0
	mvn	r0, #94
	mov	r2, #32
	ldr	r3, [r3]
	strb	r0, [r3]
	strb	r1, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrh	r0, [r4, #112]
	strh	r0, [r3, #4]	@ unaligned
	strb	r1, [r3, #6]
	strb	r1, [r3, #7]
	ldrd	r0, [r4, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bge	.L6441
	ldr	r3, [r4, #120]
	cmp	r3, #0
	bne	.L6451
.L6436:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6451:
	movw	r0, #:lower16:.LC438
	ldr	r1, .L6452
	movt	r0, #:upper16:.LC438
	bl	printk
.L6441:
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	frmnet_purge_responses
.L6450:
	movw	r0, #:lower16:.LC437
	mov	r2, r4
	ldr	r1, .L6452
	ldr	r4, [sp]
	movt	r0, #:upper16:.LC437
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk
.L6453:
	.align	2
.L6452:
	.word	.LANCHOR2+3672
	.fnend
	.size	frmnet_disconnect, .-frmnet_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_cmd_complete, %function
frmnet_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #32]
	cmp	r3, #0
	beq	.L6459
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	lr, [r3, #96]
	ldrb	r3, [r3, #116]	@ zero_extendqisi2
	cmp	lr, #0
	beq	.L6454
	add	r0, r3, r3, lsl #1
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r3, r3, r0, lsl #3
	mov	r2, r1
	ldr	r1, [r1]
	ldr	r2, [r2, #48]
	ldrb	r0, [r3, #2532]	@ zero_extendqisi2
	mov	r3, lr
	ldr	lr, [sp], #4
	bx	r3
.L6454:
	ldr	pc, [sp], #4
.L6459:
	movw	r0, #:lower16:.LC439
	ldr	r1, .L6460
	movt	r0, #:upper16:.LC439
	b	printk
.L6461:
	.align	2
.L6460:
	.word	.LANCHOR2+3692
	.fnend
	.size	frmnet_cmd_complete, .-frmnet_cmd_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_in_max_packet_size_show, %function
conn_gadget_in_max_packet_size_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2500]
	cmp	r3, #0
	beq	.L6463
	ldr	r3, [r3, #92]
	cmp	r3, #0
	beq	.L6463
	movw	r1, #:lower16:.LC79
	mov	r0, r2
	ldrh	r2, [r3, #20]
	movt	r1, #:upper16:.LC79
	b	sprintf
.L6463:
	movw	r0, #:lower16:.LC196
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r1, .L6472
	movt	r0, #:upper16:.LC196
	str	lr, [sp, #4]
	bl	printk
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
.L6473:
	.align	2
.L6472:
	.word	.LANCHOR2+3712
	.fnend
	.size	conn_gadget_in_max_packet_size_show, .-conn_gadget_in_max_packet_size_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_out_max_packet_size_show, %function
conn_gadget_out_max_packet_size_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2500]
	cmp	r3, #0
	beq	.L6475
	ldr	r3, [r3, #96]
	cmp	r3, #0
	beq	.L6475
	movw	r1, #:lower16:.LC79
	mov	r0, r2
	ldrh	r2, [r3, #20]
	movt	r1, #:upper16:.LC79
	b	sprintf
.L6475:
	movw	r0, #:lower16:.LC196
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r1, .L6484
	movt	r0, #:upper16:.LC196
	str	lr, [sp, #4]
	bl	printk
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
.L6485:
	.align	2
.L6484:
	.word	.LANCHOR2+3748
	.fnend
	.size	conn_gadget_out_max_packet_size_show, .-conn_gadget_out_max_packet_size_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_usb_buffer_size_show, %function
conn_gadget_usb_buffer_size_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2500]
	cmp	r3, #0
	beq	.L6490
	ldr	r3, [r3, #192]
	mov	r0, r2
	movw	r1, #:lower16:.LC79
	movt	r1, #:upper16:.LC79
	add	r2, r3, #1020
	cmp	r3, #0
	add	r2, r2, #3
	movlt	r3, r2
	asr	r2, r3, #10
	b	sprintf
.L6490:
	movw	r0, #:lower16:.LC196
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r1, .L6493
	movt	r0, #:upper16:.LC196
	str	lr, [sp, #4]
	bl	printk
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
.L6494:
	.align	2
.L6493:
	.word	.LANCHOR2+3788
	.fnend
	.size	conn_gadget_usb_buffer_size_show, .-conn_gadget_usb_buffer_size_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bcdUSB_show, %function
bcdUSB_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #8]
	cmp	r3, #0
	beq	.L6496
	movw	r1, #:lower16:.LC229
	mov	r0, r4
	ldrh	r2, [r3, #19]	@ unaligned
	movt	r1, #:upper16:.LC229
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
.L6496:
	ldr	r3, .L6499
	movw	r1, #:lower16:.LC229
	mov	r0, r4
	movt	r1, #:upper16:.LC229
	ldrh	r2, [r3, #2]
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
.L6500:
	.align	2
.L6499:
	.word	.LANCHOR0+524
	.fnend
	.size	bcdUSB_show, .-bcdUSB_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	terminal_version_show, %function
terminal_version_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r4, #:lower16:.LANCHOR1
	movw	r5, #3604
	movt	r4, #:upper16:.LANCHOR1
	movw	r3, #3606
	strd	r6, [sp, #8]
	ldrh	ip, [r4, r5]
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	ldrh	lr, [r4, r3]
	movw	r1, #:lower16:.LC440
	mov	r0, r2
	movt	r1, #:upper16:.LC440
	mov	r6, r2
	lsr	r3, ip, #8
	uxtb	r2, ip
	str	lr, [sp]
	bl	sprintf
	ldrh	r3, [r4, r5]
	mov	r7, r0
	cmp	r3, #0
	bne	.L6507
.L6501:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L6507:
	movw	r0, #:lower16:.LC441
	mov	r2, r6
	ldr	r1, .L6508
	movt	r0, #:upper16:.LC441
	bl	printk
	b	.L6501
.L6509:
	.align	2
.L6508:
	.word	.LANCHOR2+3824
	.fnend
	.size	terminal_version_show, .-terminal_version_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_connect_w, %function
ghsic_ctrl_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #16
	beq	.L6510
	ldr	r3, [r0, #68]
	tst	r3, #2
	bne	.L6518
.L6510:
	bx	lr
.L6518:
	movw	r0, #:lower16:.LC442
	mvn	r2, #18
	ldr	r1, .L6519
	movt	r0, #:upper16:.LC442
	b	printk
.L6520:
	.align	2
.L6519:
	.word	.LANCHOR2+3848
	.fnend
	.size	ghsic_ctrl_connect_w, .-ghsic_ctrl_connect_w
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_init, %function
gether_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LC443
	push	{r4, lr}
	.save {r4, lr}
	movt	r2, #:upper16:.LC443
	mov	r4, #0
	.pad #8
	sub	sp, sp, #8
	mov	r1, #10
	movw	r0, #:lower16:.LC228
	mov	r3, r4
	str	r4, [sp]
	movt	r1, 2
	movt	r0, #:upper16:.LC228
	str	r2, [sp, #4]
	mov	r2, #1
	bl	__alloc_workqueue_key
	movw	r3, #:lower16:.LANCHOR1
	cmp	r0, r4
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #2624]
	movne	r0, r4
	bne	.L6521
	ldr	r2, .L6525
	movw	r0, #:lower16:.LC444
	movt	r0, #:upper16:.LC444
	mov	r1, r2
	bl	printk
	mvn	r0, #11
.L6521:
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L6526:
	.align	2
.L6525:
	.word	.LANCHOR2+3872
	.fnend
	.size	gether_init, .-gether_init
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_send_cbits_tomodem, %function
gsmd_ctrl_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #5
	bhi	.L6528
	movw	ip, #:lower16:.LANCHOR1
	mov	r3, #84
	movt	ip, #:upper16:.LANCHOR1
	mla	r3, r3, r1, ip
	ldr	r3, [r3, #512]
	cmp	r3, #0
	beq	.L6528
	cmp	r0, #0
	beq	.L6543
	ldr	r0, [r3, #88]
	ands	r1, r2, #1
	movne	r1, #2
	movne	r2, #0
	moveq	r2, #2
	cmp	r0, r1
	beq	.L6527
	ldr	r0, [r3, #8]
	str	r1, [r3, #88]
	tst	r0, #1
	bne	.L6544
.L6527:
	bx	lr
.L6544:
	ldr	r0, [r3]
	b	smd_tiocmset
.L6528:
	movw	r0, #:lower16:.LC17
	mov	r2, r1
	ldr	r1, .L6545
	movt	r0, #:upper16:.LC17
	b	printk
.L6543:
	movw	r0, #:lower16:.LC445
	ldr	r1, .L6545
	movt	r0, #:upper16:.LC445
	b	printk
.L6546:
	.align	2
.L6545:
	.word	.LANCHOR2+3884
	.fnend
	.size	gsmd_ctrl_send_cbits_tomodem, .-gsmd_ctrl_send_cbits_tomodem
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	init, %function
init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r3, #:lower16:.LANCHOR0
	movw	lr, #:lower16:android_setup
	movt	r3, #:upper16:.LANCHOR0
	ldr	r4, .L6553
	movt	lr, #:upper16:android_setup
	movw	r0, #:lower16:android_disconnect
	movt	r0, #:upper16:android_disconnect
	movw	ip, #:lower16:android_suspend
	movw	r1, #:lower16:android_resume
	movw	r2, #:lower16:.LANCHOR1
	str	lr, [r3, #1080]
	movt	r2, #:upper16:.LANCHOR1
	movt	ip, #:upper16:android_suspend
	str	r0, [r3, #1084]
	movt	r1, #:upper16:android_resume
	mov	lr, #0
	add	r0, r3, #256
	str	r4, [r2, #2228]
	str	r4, [r2, #2232]
	str	ip, [r3, #1088]
	str	r1, [r3, #1092]
	str	lr, [r2, #3576]
	bl	platform_driver_register
	subs	r4, r0, #0
	beq	.L6547
	ldr	r2, .L6553+4
	movw	r0, #:lower16:.LC446
	movt	r0, #:upper16:.LC446
	mov	r1, r2
	bl	printk
.L6547:
	mov	r0, r4
	pop	{r4, pc}
.L6554:
	.align	2
.L6553:
	.word	.LANCHOR1+2228
	.word	.LANCHOR2+3916
	.fnend
	.size	init, .-init
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_flush, %function
conn_gadget_flush:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r0, #:lower16:.LC447
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	movt	r0, #:upper16:.LC447
	ldr	r4, [r3, #2500]
	bl	printk
	cmp	r4, #0
	beq	.L6559
	mov	r1, #1
	add	r0, r4, #200
	mov	r2, r1
	mov	r3, #0
	str	r1, [r4, #216]
	mov	r1, #3
	bl	__wake_up
	mov	r0, #0
.L6555:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6559:
	movw	r0, #:lower16:.LC448
	ldr	r1, .L6560
	movt	r0, #:upper16:.LC448
	bl	printk
	mvn	r0, #18
	b	.L6555
.L6561:
	.align	2
.L6560:
	.word	.LANCHOR2+3924
	.fnend
	.size	conn_gadget_flush, .-conn_gadget_flush
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_disconnect_w, %function
grmnet_ctrl_smd_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #-164]
	cmp	r0, #0
	beq	.L6563
	bl	smd_close
	mov	r3, #0
	str	r3, [r4, #-164]
.L6563:
	ldr	r3, [r4, #-156]
	tst	r3, #2
	bne	.L6564
	ldr	r3, [r4, #-156]
	tst	r3, #4
	beq	.L6562
.L6564:
	sub	r1, r4, #156
	mov	r0, #2
	bl	_clear_bit
	ldr	r0, [r4, #-64]
	mov	r2, #84
	ldr	r3, .L6570
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	mla	r0, r2, r0, r3
	add	r0, r0, #4
	b	platform_driver_unregister
.L6562:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6571:
	.align	2
.L6570:
	.word	.LANCHOR1+512
	.fnend
	.size	grmnet_ctrl_smd_disconnect_w, .-grmnet_ctrl_smd_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_disconnect_w, %function
ghsuart_ctrl_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #36]
	mov	r3, r0
	tst	r2, #1
	bne	.L6574
	bx	lr
.L6574:
	mov	r2, #0
	add	r1, r0, #36
	mov	r0, #2
	str	r2, [r3, #-36]
	b	_clear_bit
	.fnend
	.size	ghsuart_ctrl_disconnect_w, .-ghsuart_ctrl_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_disconnect_w, %function
ghsuart_data_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #60]
	mov	r3, r0
	tst	r2, #1
	bne	.L6577
	bx	lr
.L6577:
	mov	r2, #0
	add	r1, r0, #60
	mov	r0, #2
	str	r2, [r3, #-100]
	b	_clear_bit
	.fnend
	.size	ghsuart_data_disconnect_w, .-ghsuart_data_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_free_buffers.part.45, %function
ghsic_data_free_buffers.part.45:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #48
	mov	r0, r6
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r0, [r4, #8]
	cmp	r0, #0
	moveq	r1, r7
	moveq	r0, r6
	beq	.L6594
	add	r1, r4, #24
	add	r5, r4, #32
	bl	ghsic_data_free_requests
	ldr	r3, [r4, #32]
	cmp	r3, r5
	beq	.L6580
	mov	r8, #0
	b	.L6581
.L6595:
	ldr	r2, [r4, #40]
	sub	r2, r2, #1
	str	r2, [r4, #40]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #32]
	cmp	r3, r5
	beq	.L6580
.L6581:
	subs	r0, r3, #0
	bne	.L6595
.L6580:
	mov	r1, r7
	mov	r0, r6
	add	r5, r4, #80
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L6583
	add	r1, r4, #56
	add	r6, r4, #64
	bl	ghsic_data_free_requests
	ldr	r3, [r4, #64]
	cmp	r3, r6
	beq	.L6583
	mov	r8, #0
	b	.L6584
.L6596:
	ldr	r2, [r4, #72]
	sub	r2, r2, #1
	str	r2, [r4, #72]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #64]
	cmp	r3, r6
	beq	.L6583
.L6584:
	subs	r0, r3, #0
	bne	.L6596
.L6583:
	mov	r1, r7
	mov	r0, r5
.L6594:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	ghsic_data_free_buffers.part.45, .-ghsic_data_free_buffers.part.45
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_remove, %function
ghsic_data_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r0, [r0]
	bl	ghsic_data_get_port_id
	subs	r3, r0, #0
	blt	.L6598
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r1, [r2, #1440]
	cmp	r3, r1
	bcs	.L6598
	mov	r1, #104
	mla	r3, r1, r3, r2
	ldr	r4, [r3, #1444]
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L6601
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6601
	blx	r3
.L6601:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L6602
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6602
	blx	r3
.L6602:
	add	r0, r4, #120
	bl	cancel_work_sync
	cmp	r4, #0
	beq	.L6603
	mov	r0, r4
	bl	ghsic_data_free_buffers.part.45
.L6603:
	add	r0, r4, #88
	add	r4, r4, #180
	bl	cancel_work_sync
	mov	r1, r4
	mov	r0, #0
	bl	_test_and_clear_bit
	mov	r0, #1
	mov	r1, r4
	bl	_clear_bit
	mov	r0, #0
.L6597:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6598:
	movw	r0, #:lower16:.LC97
	mov	r2, r3
	ldr	r1, .L6620
	movt	r0, #:upper16:.LC97
	bl	printk
	mvn	r0, #21
	b	.L6597
.L6621:
	.align	2
.L6620:
	.word	.LANCHOR2+3944
	.fnend
	.size	ghsic_data_remove, .-ghsic_data_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_free_buffers.part.46, %function
ghsuart_data_free_buffers.part.46:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #72
	mov	r0, r6
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r0, [r4, #8]
	cmp	r0, #0
	moveq	r1, r7
	moveq	r0, r6
	beq	.L6638
	add	r1, r4, #48
	add	r5, r4, #56
	bl	ghsuart_data_free_requests
	ldr	r3, [r4, #56]
	cmp	r3, r5
	beq	.L6624
	mov	r8, #0
	b	.L6625
.L6639:
	ldr	r2, [r4, #64]
	sub	r2, r2, #1
	str	r2, [r4, #64]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #56]
	cmp	r3, r5
	beq	.L6624
.L6625:
	subs	r0, r3, #0
	bne	.L6639
.L6624:
	mov	r1, r7
	mov	r0, r6
	add	r5, r4, #104
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L6627
	add	r1, r4, #80
	add	r6, r4, #88
	bl	ghsuart_data_free_requests
	ldr	r3, [r4, #88]
	cmp	r3, r6
	beq	.L6627
	mov	r8, #0
	b	.L6628
.L6640:
	ldr	r2, [r4, #96]
	sub	r2, r2, #1
	str	r2, [r4, #96]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #88]
	cmp	r3, r6
	beq	.L6627
.L6628:
	subs	r0, r3, #0
	bne	.L6640
.L6627:
	mov	r1, r7
	mov	r0, r5
.L6638:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	ghsuart_data_free_buffers.part.46, .-ghsuart_data_free_buffers.part.46
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_remove, %function
ghsuart_data_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r0, #4]
	ldr	r1, [r3, #2032]
	cmp	r2, r1
	bcs	.L6672
	mov	r1, #84
	mla	r2, r1, r2, r3
	ldr	r4, [r2, #2036]
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L6644
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6644
	blx	r3
.L6644:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L6645
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6645
	blx	r3
.L6645:
	cmp	r4, #0
	beq	.L6646
	mov	r0, r4
	bl	ghsuart_data_free_buffers.part.46
.L6646:
	ldr	r5, [r4, #16]
	cmp	r5, #0
	beq	.L6673
.L6648:
	movw	r0, #:lower16:.LC449
	ldr	r2, [r4, #180]
	add	r4, r4, #188
	ldr	r1, .L6674
	movt	r0, #:upper16:.LC449
	bl	printk
	mov	r1, r4
	mov	r0, #1
	bl	_clear_bit
	mov	r1, r4
	mov	r0, #0
	bl	_clear_bit
	mov	r0, #2
	mov	r1, r4
	bl	_clear_bit
	mov	r0, #0
.L6641:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6673:
	add	r7, r4, #20
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #24]
	mov	r1, r0
	str	r5, [r4, #200]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L6648
	ldr	r3, [r6, #120]
	cmp	r3, #0
	beq	.L6648
	mov	r0, r6
	blx	r3
	b	.L6648
.L6672:
	movw	r0, #:lower16:.LC97
	ldr	r1, .L6674
	movt	r0, #:upper16:.LC97
	bl	printk
	mvn	r0, #21
	b	.L6641
.L6675:
	.align	2
.L6674:
	.word	.LANCHOR2+3964
	.fnend
	.size	ghsuart_data_remove, .-ghsuart_data_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_write_tomdm, %function
ghsuart_data_write_tomdm:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #144
	bxeq	lr
	ldr	r3, [r0, #-140]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #40
	strd	r8, [sp, #16]
	mov	r0, r6
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #40]
	mov	r7, r0
	ubfx	r3, r3, #1, #1
	cmp	r3, #0
	movne	r1, r0
	bne	.L6713
	mov	r2, r4
	ldr	r5, [r2, #-56]!
	cmp	r5, r2
	beq	.L6679
	cmp	r5, #0
	beq	.L6679
	ldr	r2, [r4, #-48]
	ldr	r1, .L6719
	ldr	r0, .L6719+4
	sub	r2, r2, #1
	str	r2, [r4, #-48]
	ldr	ip, [r5]
	ldr	r2, [r5, #4]
	str	r3, [r5]
	str	r3, [r5, #4]
	str	r2, [ip, #4]
	str	ip, [r2]
	bl	___ratelimit
	cmp	r0, #0
	bne	.L6714
.L6681:
	ldr	r3, [r4, #68]
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #68]
	bl	dev_kfree_skb_any
.L6679:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r4, #-132]
	mov	r8, r0
	cmp	r7, #0
	beq	.L6684
	ldr	r3, [r4, #40]
	tst	r3, #2
	bne	.L6684
	sub	r3, r4, #64
	movw	r9, #:lower16:.LANCHOR0
	movt	r9, #:upper16:.LANCHOR0
	str	r3, [sp, #4]
	b	.L6683
.L6716:
	ldr	r5, [r4, #-64]
	ldr	r0, [sp, #4]
	sub	r10, r5, #36
	cmp	r5, r0
	beq	.L6684
	ldr	r0, [r9, #1580]
	bl	__alloc_skb
	subs	fp, r0, #0
	mov	r0, r5
	beq	.L6684
	bl	list_del
	ldr	r2, [fp, #172]
	mov	r1, r8
	mov	r0, r6
	str	r2, [r5, #-36]
	ldr	r2, [r9, #1580]
	str	r2, [r5, #-32]
	str	fp, [r5, #-4]
	bl	_raw_spin_unlock_irqrestore
	ldr	ip, [r7, #8]
	mov	r2, #208
	mov	r1, r10
	mov	r0, r7
	ldr	r8, [ip, #16]
	blx	r8
	mov	r2, r0
	mov	r0, r6
	str	r2, [sp]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [sp]
	mov	r8, r0
	cmp	r2, #0
	bne	.L6715
.L6683:
	ldr	r0, [r4, #-140]
	mov	r2, #0
	mvn	r3, #0
	mov	r1, #32
	cmp	r0, r2
	bne	.L6716
.L6684:
	mov	r1, r8
.L6713:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L6715:
	mov	r0, fp
	bl	dev_kfree_skb_any
	ldr	r1, .L6719+8
	ldr	r0, .L6719+12
	bl	___ratelimit
	cmp	r0, #0
	bne	.L6717
.L6685:
	ldr	r3, [r4, #-140]
	cmp	r3, #0
	bne	.L6718
	ldr	r3, [r7, #8]
	mov	r1, r10
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L6684
.L6718:
	mov	r0, r5
	ldr	r2, [r4, #-64]
	ldr	r1, [sp, #4]
	bl	__list_add
	b	.L6684
.L6717:
	movw	r0, #:lower16:.LC450
	ldr	r1, .L6719+8
	movt	r0, #:upper16:.LC450
	bl	printk
	b	.L6685
.L6714:
	movw	r0, #:lower16:.LC90
	mvn	r2, #18
	ldr	r1, .L6719
	movt	r0, #:upper16:.LC90
	bl	printk
	b	.L6681
.L6720:
	.align	2
.L6719:
	.word	.LANCHOR2+3984
	.word	.LANCHOR0+1556
	.word	.LANCHOR2+4012
	.word	.LANCHOR0+1584
	.fnend
	.size	ghsuart_data_write_tomdm, .-ghsuart_data_write_tomdm
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_write_tohost, %function
ghsuart_data_write_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #160
	bxeq	lr
	ldr	r3, [r0, #-156]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	sub	r8, r0, #88
	strd	r10, [sp, #24]
	mov	r0, r8
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r4, #-152]
	mov	r10, r0
	cmp	r9, #0
	beq	.L6724
	ldr	r3, [r4, #-112]
	sub	r2, r4, #112
	str	r2, [sp, #8]
	cmp	r2, r3
	beq	.L6724
	ldr	r5, [r4, #-104]
	sub	r3, r4, #104
	str	r3, [sp, #12]
	cmp	r5, r3
	beq	.L6724
	movw	fp, #:lower16:.LANCHOR0
	mov	r7, #0
	movt	fp, #:upper16:.LANCHOR0
	mov	r3, fp
	mov	fp, r0
	mov	r10, r3
	b	.L6725
.L6745:
	ldr	r3, [r4, #-96]
	sub	r3, r3, #1
	str	r3, [r4, #-96]
	ldrd	r2, [r5]
	str	r7, [r5]
	str	r7, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r6, [r4, #-112]
	str	r5, [r6, #-4]
	ldr	r2, [r5, #172]
	sub	r3, r6, #36
	str	r2, [r6, #-36]
	ldr	r2, [r5, #80]
	str	r2, [r6, #-32]
	ldr	r2, [r4, #32]
	ldr	r0, [r10, #1608]
	add	r2, r2, #1
	cmp	r2, r0
	mov	r0, r6
	str	r2, [r4, #32]
	ldrb	r2, [r6, #-10]	@ zero_extendqisi2
	bfieq	r2, r7, #0, #1
	orrne	r2, r2, #1
	strbeq	r2, [r6, #-10]
	strbne	r2, [r6, #-10]
	streq	r7, [r4, #32]
	str	r3, [sp, #4]
	bl	list_del
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #4]
	mov	r2, #208
	mov	r0, r9
	ldr	ip, [r9, #8]
	mov	r1, r3
	ldr	r3, [ip, #16]
	blx	r3
	mov	r3, r0
	mov	r0, r8
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #4]
	mov	fp, r0
	cmp	r3, #0
	bne	.L6744
	ldr	r2, [r4, #-112]
	ldr	r3, [r4, #48]
	ldr	r1, [sp, #8]
	add	r3, r3, #1
	cmp	r1, r2
	str	r3, [r4, #48]
	beq	.L6740
	ldr	r5, [r4, #-104]
	ldr	r3, [sp, #12]
	cmp	r5, r3
	beq	.L6740
.L6725:
	cmp	r5, #0
	bne	.L6745
.L6740:
	mov	r10, fp
.L6724:
	mov	r1, r10
	mov	r0, r8
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L6744:
	mov	r10, r0
	movw	r0, #:lower16:.LC451
	ldr	r1, .L6746
	movt	r0, #:upper16:.LC451
	bl	printk
	ldr	r1, [sp, #8]
	mov	r0, r6
	ldr	r2, [r4, #-112]
	bl	__list_add
	mov	r0, r5
	bl	dev_kfree_skb_any
	b	.L6724
.L6747:
	.align	2
.L6746:
	.word	.LANCHOR2+4036
	.fnend
	.size	ghsuart_data_write_tohost, .-ghsuart_data_write_tohost
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_close_sdio_work, %function
rmnet_close_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-112]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r0, #-208]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6751
	blx	r3
.L6751:
	sub	r5, r4, #116
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-204]
	mov	r2, #0
	mvn	ip, #94
	mov	r1, r0
	mov	r0, r5
	ldr	r3, [r3]
	strb	ip, [r3]
	strb	r2, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	ldrb	ip, [r4, #-200]	@ zero_extendqisi2
	strh	ip, [r3, #4]	@ unaligned
	strb	r2, [r3, #6]
	strb	r2, [r3, #7]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r0, [r4, #-208]
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	blt	.L6794
.L6752:
	ldr	r0, [r4, #-216]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6754
	blx	r3
.L6754:
	ldr	r0, [r4, #-212]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6755
	blx	r3
.L6755:
	sub	r0, r4, #68
	bl	cancel_work_sync
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-112]
	mov	r6, r0
	cmp	r3, #0
	subne	r9, r4, #172
	movne	r8, #0
	bne	.L6756
.L6766:
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L6794:
	ldr	r3, [r4, #-112]
	cmp	r3, #0
	bne	.L6795
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L6757:
	bl	list_del
	ldr	r3, [r4, #-164]
	mov	r0, #0
	sub	r3, r3, #1
	str	r3, [r4, #-164]
	str	r8, [r7, #-36]
	ldr	r7, [r4, #-216]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L6756:
	ldr	r7, [r4, #-172]
	cmp	r7, r9
	mov	r0, r7
	sub	r10, r7, #36
	bne	.L6757
	sub	r9, r4, #144
	mov	r8, #0
	b	.L6758
.L6759:
	bl	list_del
	ldr	r3, [r4, #-136]
	mov	r0, #0
	sub	r3, r3, #1
	str	r3, [r4, #-136]
	str	r8, [r7, #-36]
	ldr	r7, [r4, #-212]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L6758:
	ldr	r7, [r4, #-144]
	cmp	r7, r9
	mov	r0, r7
	sub	r10, r7, #36
	bne	.L6759
	sub	r8, r4, #196
	b	.L6760
.L6761:
	bl	list_del
	ldr	r3, [r4, #-188]
	sub	r3, r3, #1
	str	r3, [r4, #-188]
	ldr	r0, [r7, #-8]
	bl	kfree
	mov	r0, r9
	bl	kfree
.L6760:
	ldr	r7, [r4, #-196]
	cmp	r7, r8
	mov	r0, r7
	sub	r9, r7, #8
	bne	.L6761
	sub	r8, r4, #184
	b	.L6762
.L6763:
	bl	list_del
	ldr	r3, [r4, #-176]
	sub	r3, r3, #1
	str	r3, [r4, #-176]
	ldr	r0, [r7, #-8]
	bl	kfree
	mov	r0, r9
	bl	kfree
.L6762:
	ldr	r7, [r4, #-184]
	cmp	r7, r8
	mov	r0, r7
	sub	r9, r7, #8
	bne	.L6763
	mov	r7, #0
	movw	r0, #:lower16:.LC452
	ldr	r1, .L6797
	movt	r0, #:upper16:.LC452
	sub	r8, r4, #160
	str	r7, [r4, #-108]
	bl	printk
	ldr	r3, [r4, #-160]
	cmp	r8, r3
	bne	.L6765
	b	.L6764
.L6796:
	ldr	r2, [r4, #-152]
	sub	r2, r2, #1
	str	r2, [r4, #-152]
	ldm	r3, {r1, r2}
	str	r7, [r3]
	str	r7, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #-160]
	cmp	r3, r8
	beq	.L6764
.L6765:
	subs	r0, r3, #0
	bne	.L6796
.L6764:
	ldr	r3, [r4, #-132]
	sub	r8, r4, #132
	cmp	r3, r8
	beq	.L6766
	mov	r7, #0
.L6767:
	subs	r0, r3, #0
	beq	.L6766
	ldr	r2, [r4, #-124]
	sub	r2, r2, #1
	str	r2, [r4, #-124]
	ldm	r3, {r1, r2}
	str	r7, [r3]
	str	r7, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #-132]
	cmp	r3, r8
	bne	.L6767
	b	.L6766
.L6795:
	movw	r0, #:lower16:.LC438
	ldr	r1, .L6797
	movt	r0, #:upper16:.LC438
	bl	printk
	b	.L6752
.L6798:
	.align	2
.L6797:
	.word	.LANCHOR2+4064
	.fnend
	.size	rmnet_close_sdio_work, .-rmnet_close_sdio_work
	.align	2
	.global	usb_gadget_connect_work
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_gadget_connect_work, %function
usb_gadget_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r2, .L6804
	movw	r4, #:lower16:speaker_status
	str	r6, [sp, #8]
	movt	r4, #:upper16:speaker_status
	mov	r5, r0
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	ldr	r6, [r0, #-444]
	ldr	ip, [r0, #52]
	movw	r0, #:lower16:.LC453
	ldr	r3, [r4]
	mov	r1, r2
	movt	r0, #:upper16:.LC453
	str	ip, [sp]
	bl	printk
	ldr	r3, [r4]
	cmp	r3, #0
	ble	.L6800
	ldr	r3, [r5, #52]
	add	r3, r3, #1
	cmp	r3, #59
	str	r3, [r5, #52]
	ble	.L6803
.L6800:
	ldr	r0, [r6]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L6799
	mov	r1, #1
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	bx	r3
.L6803:
	mov	r0, #50
	bl	msecs_to_jiffies
	movw	r1, #:lower16:system_wq
	mov	r3, r0
	movt	r1, #:upper16:system_wq
	mov	r2, r5
	ldr	r1, [r1]
	mov	r0, #4
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_delayed_work_on
.L6799:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6805:
	.align	2
.L6804:
	.word	.LANCHOR2+4088
	.fnend
	.size	usb_gadget_connect_work, .-usb_gadget_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_connect_work, %function
gsmd_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	ldr	r5, [r0, #-4]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r5, #8]
	tst	r3, #2
	bne	.L6815
.L6806:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L6815:
	movw	ip, #:lower16:gsmd_notify
	sub	r3, r0, #76
	movt	ip, #:upper16:gsmd_notify
	mov	r4, r0
	ldr	r0, [r5, #4]
	mov	r2, r5
	mov	r1, #0
	str	ip, [sp]
	bl	smd_named_open_on_edge
	subs	r3, r0, #0
	beq	.L6806
	cmn	r3, #11
	bne	.L6810
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, #250
	movt	r3, #:upper16:.LANCHOR1
	ldr	r5, [r3, #2612]
	bl	msecs_to_jiffies
	mov	r3, r0
	mov	r2, r4
	mov	r0, #4
	mov	r1, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_delayed_work_on
.L6810:
	ldr	r1, .L6816
	movw	r0, #:lower16:.LC172
	ldr	r2, [r5, #4]
	movt	r0, #:upper16:.LC172
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	printk
.L6817:
	.align	2
.L6816:
	.word	.LANCHOR3-4072
	.fnend
	.size	gsmd_connect_work, .-gsmd_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_disconnect_work, %function
gbam_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-280]
	tst	r3, #2
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #-276]
	bl	msm_bam_dmux_close
	ldr	lr, [sp, #4]
	sub	r1, r4, #280
	mov	r0, #1
	ldr	r4, [sp]
	add	sp, sp, #8
	b	_clear_bit
	.fnend
	.size	gbam_disconnect_work, .-gbam_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam2bam_disconnect_work, %function
gbam2bam_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-168]
	cmp	r3, #7
	bxne	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	sub	r0, r0, #164
	str	lr, [sp, #4]
	bl	usb_bam_disconnect_ipa
	subs	r2, r0, #0
	bne	.L6834
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6834:
	movw	r0, #:lower16:.LC454
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC454
	add	sp, sp, #8
	ldr	r1, .L6835
	b	printk
.L6836:
	.align	2
.L6835:
	.word	.LANCHOR3-4052
	.fnend
	.size	gbam2bam_disconnect_work, .-gbam2bam_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam2bam_data_disconnect_work, %function
bam2bam_data_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-124]
	cmp	r3, #7
	bxne	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	sub	r0, r0, #120
	str	lr, [sp, #4]
	bl	usb_bam_disconnect_ipa
	subs	r2, r0, #0
	bne	.L6848
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6848:
	movw	r0, #:lower16:.LC454
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC454
	add	sp, sp, #8
	ldr	r1, .L6849
	b	printk
.L6850:
	.align	2
.L6849:
	.word	.LANCHOR3-4024
	.fnend
	.size	bam2bam_data_disconnect_work, .-bam2bam_data_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_function_init, %function
ncm_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r5, #:lower16:kmalloc_caches
	movt	r5, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	mov	r6, r0
	ldr	r0, [r5, #24]
	str	lr, [sp, #12]
	cmp	r0, #0
	beq	.L6856
	mov	r2, #16
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L6857
	ldr	r0, [r5, #24]
	cmp	r0, #0
	beq	.L6852
	mov	r2, #6
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r6, #4]
	beq	.L6862
.L6855:
	mov	ip, #65024
	movw	r1, #:lower16:ncm_work
	ldr	r0, .L6864
	mov	r3, r4
	movt	ip, 65535
	movt	r1, #:upper16:ncm_work
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	str	ip, [r3], #4
	str	r3, [r4, #4]
	str	r3, [r4, #8]
	str	r1, [r4, #12]
	str	r4, [r2, #3544]
	bl	misc_register
	cmp	r0, #0
	bne	.L6863
.L6851:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6856:
	mov	r4, #16
.L6852:
	mov	r3, #16
	str	r3, [r6, #4]
	b	.L6855
.L6862:
	mov	r0, r4
	bl	kfree
	mvn	r0, #11
	b	.L6851
.L6857:
	mvn	r0, #11
	b	.L6851
.L6863:
	movw	r0, #:lower16:.LC455
	ldr	r1, .L6864+4
	movt	r0, #:upper16:.LC455
	bl	printk
	mov	r0, #0
	b	.L6851
.L6865:
	.align	2
.L6864:
	.word	.LANCHOR0+768
	.word	.LANCHOR3-3992
	.fnend
	.size	ncm_function_init, .-ncm_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	show_timestamp, %function
show_timestamp:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #3608]
	.pad #28
	sub	sp, sp, #28
	cmp	r0, #0
	moveq	r4, r0
	beq	.L6866
	mov	fp, r3
	movw	r3, #:lower16:kmalloc_caches
	str	r1, [sp, #16]
	movt	r3, #:upper16:kmalloc_caches
	str	r2, [sp, #20]
	ldr	r0, [r3, #48]
	cmp	r0, #0
	beq	.L6873
	mov	r2, #4096
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L6881
.L6868:
	ldr	r7, .L6882
	add	r0, r7, #4
	bl	_raw_read_lock_irqsave
	ldr	r3, [r7]
	str	r0, [sp, #12]
	add	r4, r3, #1
	and	r4, r4, #31
	cmp	r3, r4
	moveq	r5, #0
	beq	.L6869
	movw	r8, #:lower16:.LC84
	mov	r5, #0
	movt	r8, #:upper16:.LC84
	sub	r9, r7, #4096
.L6871:
	add	r10, r9, r4, lsl #7
	mov	r1, #128
	mov	r0, r10
	bl	strnlen
	cmp	r0, #0
	rsb	r1, r5, #4096
	mov	r3, r10
	mov	r2, r8
	add	r0, r6, r5
	beq	.L6870
	bl	scnprintf
	add	r5, r5, r0
.L6870:
	ldr	r3, [r7]
	add	r4, r4, #1
	and	r4, r4, #31
	cmp	r4, r3
	bne	.L6871
.L6869:
	ldr	r0, .L6882+4
	ldr	r1, [sp, #12]
	bl	_raw_read_unlock_irqrestore
	ldrd	r0, [sp, #16]
	mov	r2, fp
	mov	r3, r6
	str	r5, [sp]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r6
	bl	kfree
.L6866:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6873:
	mov	r6, #16
	b	.L6868
.L6881:
	mvn	r4, #11
	b	.L6866
.L6883:
	.align	2
.L6882:
	.word	dbg_data+4096
	.word	dbg_data+4100
	.fnend
	.size	show_timestamp, .-show_timestamp
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	get_timestamp.part.60, %function
get_timestamp.part.60:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {lr}
	str	lr, [sp, #-4]!
	.pad #12
	sub	sp, sp, #12
	mov	r0, sp
	bl	do_gettimeofday
	ldr	r3, [sp]
	movw	r2, #16960
	ldr	r0, [sp, #4]
	movt	r2, 15
	ubfx	r3, r3, #0, #12
	mla	r0, r2, r3, r0
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
	.fnend
	.size	get_timestamp.part.60, .-get_timestamp.part.60
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_write_tomdm, %function
ghsic_data_write_tomdm:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #120
	bxeq	lr
	ldr	r3, [r0, #-116]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	sub	r8, r0, #40
	strd	r10, [sp, #24]
	mov	r0, r8
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #44]
	mov	r6, r0
	ubfx	r3, r3, #1, #1
	cmp	r3, #0
	bne	.L6891
	mov	r2, r5
	ldr	r4, [r2, #-56]!
	cmp	r4, r2
	beq	.L6891
	cmp	r4, #0
	beq	.L6891
	ldr	r1, [r5, #-48]
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	sub	r1, r1, #1
	str	r1, [r5, #-48]
	ldrd	r0, [r4]
	str	r3, [r4]
	str	r3, [r4, #4]
	str	r1, [r0, #4]
	str	r0, [r1]
	ldr	r0, [r2, #3608]
	cmp	r0, #0
	bne	.L6939
.L6892:
	ldr	r7, .L6946
	mov	r1, r6
	str	r0, [r4, #40]
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r1, r7
	ldr	r0, .L6946+4
	bl	___ratelimit
	cmp	r0, #0
	bne	.L6940
.L6890:
	ldr	r3, [r5, #92]
	mov	r0, r4
	add	r3, r3, #1
	str	r3, [r5, #92]
	bl	dev_kfree_skb_any
.L6891:
.L6889:
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r10, [r5, #-108]
	mov	r7, r0
	cmp	r10, #0
	beq	.L6895
	sub	r3, r5, #64
	movw	r6, #:lower16:.LANCHOR0
	movw	r9, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR0
	movt	r9, #:upper16:.LANCHOR1
	str	r3, [sp, #12]
	b	.L6894
.L6896:
	mvn	r3, #0
	mov	r2, #0
	ldr	r0, [r6, #1640]
	mov	r1, #208
	bl	__alloc_skb
	subs	fp, r0, #0
	beq	.L6941
	ldr	r2, [fp, #172]
	str	r7, [fp, #28]
	str	r2, [r4, #-36]
	ldr	r2, [r6, #1640]
	str	r2, [r4, #-32]
	str	fp, [r4, #-4]
	ldr	r0, [r9, #3608]
	cmp	r0, #0
	bne	.L6942
.L6898:
	str	r0, [fp, #32]
	ldr	ip, [r10, #8]
	mov	r2, #208
	ldr	r1, [sp, #4]
	mov	r0, r10
	ldr	r7, [ip, #16]
	blx	r7
	mov	r2, r0
	mov	r0, r8
	str	r2, [sp, #8]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [sp, #8]
	mov	r7, r0
	cmp	r2, #0
	bne	.L6943
.L6894:
	ldr	r3, [r5, #-116]
	cmp	r3, #0
	beq	.L6895
	ldr	r4, [r5, #-64]
	ldr	r3, [sp, #12]
	mov	r0, r4
	cmp	r4, r3
	sub	r3, r4, #36
	str	r3, [sp, #4]
	beq	.L6895
	ldr	r2, [r5, #-48]
	ldr	r3, [r6, #1636]
	cmp	r2, r3
	bhi	.L6895
	bl	list_del
	mov	r1, r7
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r7, [r9, #3608]
	cmp	r7, #0
	beq	.L6896
	bl	get_timestamp.part.60
	mov	r7, r0
	b	.L6896
.L6942:
	bl	get_timestamp.part.60
	b	.L6898
.L6943:
	ldr	r6, .L6946+8
	mov	r0, fp
	bl	dev_kfree_skb_any
	ldr	r0, .L6946+12
	mov	r1, r6
	bl	___ratelimit
	cmp	r0, #0
	bne	.L6944
.L6899:
	ldr	r3, [r5, #-116]
	cmp	r3, #0
	bne	.L6945
	ldr	r3, [r10, #8]
	mov	r0, r10
	ldr	r1, [sp, #4]
	ldr	r3, [r3, #12]
	blx	r3
.L6895:
	mov	r1, r7
	mov	r0, r8
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L6941:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r2, [r5, #-64]
	mov	r0, r4
	ldr	r1, [sp, #12]
	bl	__list_add
	b	.L6895
.L6939:
	bl	get_timestamp.part.60
	b	.L6892
.L6945:
	mov	r0, r4
	ldr	r2, [r5, #-64]
	ldr	r1, [sp, #12]
	bl	__list_add
	b	.L6895
.L6940:
	movw	r0, #:lower16:.LC90
	mov	r1, r7
	mvn	r2, #18
	movt	r0, #:upper16:.LC90
	bl	printk
	b	.L6890
.L6944:
	movw	r0, #:lower16:.LC450
	mov	r1, r6
	movt	r0, #:upper16:.LC450
	bl	printk
	b	.L6899
.L6947:
	.align	2
.L6946:
	.word	.LANCHOR3-3972
	.word	.LANCHOR0+1612
	.word	.LANCHOR3-3948
	.word	.LANCHOR0+1644
	.fnend
	.size	ghsic_data_write_tomdm, .-ghsic_data_write_tomdm
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_connect_w, %function
ghsic_data_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #88
	mov	r3, r0
	beq	.L6948
	ldr	r2, [r0, #-84]
	cmp	r2, #0
	beq	.L6948
	ldr	r2, [r0, #92]
	tst	r2, #2
	bne	.L6959
.L6948:
	bx	lr
.L6959:
	movw	r0, #:lower16:.LC456
	ldr	r2, [r3, #68]
	mvn	r3, #18
	movt	r0, #:upper16:.LC456
	ldr	r1, .L6960
	b	printk
.L6961:
	.align	2
.L6960:
	.word	.LANCHOR3-3928
	.fnend
	.size	ghsic_data_connect_w, .-ghsic_data_connect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_write_tohost, %function
ghsic_data_write_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #136
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #88
	strd	r8, [sp, #16]
	mov	r0, r7
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave
	ldr	r8, [r4, #-128]
	mov	r9, r0
	cmp	r8, #0
	beq	.L6966
	movw	r3, #:lower16:.LANCHOR1
	movw	fp, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR1
	movt	fp, #:upper16:.LANCHOR0
	str	r3, [sp, #12]
	sub	r3, r4, #112
	str	r3, [sp, #4]
	sub	r3, r4, #104
	str	r3, [sp, #8]
.L6965:
	ldr	r3, [r4, #-112]
	ldr	r2, [sp, #4]
	cmp	r3, r2
	beq	.L6966
.L6974:
	ldr	r5, [r4, #-104]
	ldr	r3, [sp, #8]
	cmp	r5, r3
	beq	.L6966
	cmp	r5, #0
	beq	.L6966
	ldr	r3, [r4, #-96]
	mov	r2, #0
	sub	r3, r3, #1
	str	r3, [r4, #-96]
	ldm	r5, {r1, r3}
	str	r2, [r5]
	str	r2, [r5, #4]
	str	r3, [r1, #4]
	str	r1, [r3]
	ldr	r6, [r4, #-112]
	str	r5, [r6, #-4]
	ldr	r1, [r5, #172]
	mov	r0, r6
	ldrb	r3, [r6, #-10]	@ zero_extendqisi2
	sub	r10, r6, #36
	str	r1, [r6, #-36]
	ldr	r1, [r5, #80]
	orr	r3, r3, #2
	str	r1, [r6, #-32]
	strb	r3, [r6, #-10]
	ldr	r3, [r4, #48]
	ldr	r1, [fp, #1668]
	add	r3, r3, #1
	cmp	r3, r1
	str	r3, [r4, #48]
	ldrb	r3, [r6, #-10]	@ zero_extendqisi2
	bfieq	r3, r2, #0, #1
	orrne	r3, r3, #1
	strbeq	r3, [r6, #-10]
	strbne	r3, [r6, #-10]
	streq	r2, [r4, #48]
	bl	list_del
	ldr	r3, [sp, #12]
	ldr	r0, [r3, #3608]
	cmp	r0, #0
	bne	.L6989
.L6969:
	mov	r1, r9
	str	r0, [r5, #44]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r8, #8]
	mov	r1, r10
	mov	r2, #208
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	cmp	r10, #0
	mov	r9, r0
	bne	.L6990
	ldr	r3, [r4, #56]
	ldr	r2, [fp, #488]
	add	r3, r3, #1
	cmp	r2, #0
	str	r3, [r4, #56]
	beq	.L6965
	ldr	r2, [r4, #-96]
	ldr	r3, [fp, #1672]
	cmp	r2, r3
	bhi	.L6965
	add	r1, r4, #28
	mov	r0, #2
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L6965
	ldr	r2, [r4, #-96]
	ldr	r3, [r4, #64]
	str	r2, [r4, #80]
	ldr	r2, [sp, #4]
	add	r3, r3, #1
	str	r3, [r4, #64]
	ldr	r3, [r4, #-112]
	cmp	r3, r2
	bne	.L6974
.L6966:
	mov	r1, r9
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L6989:
	bl	get_timestamp.part.60
	b	.L6969
.L6990:
	movw	r0, #:lower16:.LC451
	ldr	r1, .L6991
	movt	r0, #:upper16:.LC451
	bl	printk
	ldr	r1, [sp, #4]
	mov	r0, r6
	ldr	r2, [r4, #-112]
	bl	__list_add
	mov	r0, r5
	bl	dev_kfree_skb_any
	b	.L6966
.L6992:
	.align	2
.L6991:
	.word	.LANCHOR3-3904
	.fnend
	.size	ghsic_data_write_tohost, .-ghsic_data_write_tohost
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_connect_w, %function
ghsuart_ctrl_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #36
	bxeq	lr
	ldr	r3, [r0, #52]
	tst	r3, #2
	bxeq	lr
	ldr	r3, [r0, #52]
	tst	r3, #1
	beq	.L7006
	.save {r4, lr}
	str	r4, [sp, #-8]!
	sub	r0, r0, #20
	mov	r1, #300
	str	lr, [sp, #4]
	bl	wait_for_completion_timeout
	cmp	r0, #0
	beq	.L7009
	movw	r0, #:lower16:.LC458
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC458
	add	sp, sp, #8
	ldr	r1, .L7010
	b	printk
.L7009:
	movw	r0, #:lower16:.LC457
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC457
	add	sp, sp, #8
	ldr	r1, .L7010
	b	printk
.L7006:
	movw	r0, #:lower16:.LC458
	ldr	r1, .L7010
	movt	r0, #:upper16:.LC458
	b	printk
.L7011:
	.align	2
.L7010:
	.word	.LANCHOR3-3880
	.fnend
	.size	ghsuart_ctrl_connect_w, .-ghsuart_ctrl_connect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_connect_w, %function
ghsuart_data_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #112
	bxeq	lr
	ldr	r3, [r0, #-108]
	cmp	r3, #0
	bxeq	lr
	ldr	r3, [r0, #76]
	tst	r3, #2
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #76]
	tst	r3, #1
	beq	.L7014
	mov	r1, #300
	sub	r0, r0, #84
	bl	wait_for_completion_timeout
	cmp	r0, #0
	beq	.L7030
.L7014:
	movw	r0, #:lower16:.LC459
	ldr	r2, [r4, #68]
	mvn	r3, #18
	ldr	r4, [sp]
	movt	r0, #:upper16:.LC459
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r1, .L7031
	b	printk
.L7030:
	movw	r0, #:lower16:.LC457
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC457
	add	sp, sp, #8
	ldr	r1, .L7031
	b	printk
.L7032:
	.align	2
.L7031:
	.word	.LANCHOR3-3856
	.fnend
	.size	ghsuart_data_connect_w, .-ghsuart_data_connect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	str_to_xport, %function
str_to_xport:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movw	r0, #:lower16:.LC460
	mov	r1, r4
	movt	r0, #:upper16:.LC460
	str	lr, [sp, #4]
	mov	r2, #12
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #1
	beq	.L7033
	movw	r0, #:lower16:.LC461
	mov	r2, #12
	movt	r0, #:upper16:.LC461
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #2
	beq	.L7033
	movw	r0, #:lower16:.LC462
	mov	r2, #12
	movt	r0, #:upper16:.LC462
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #3
	beq	.L7033
	movw	r0, #:lower16:.LC463
	mov	r2, #12
	movt	r0, #:upper16:.LC463
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #4
	beq	.L7033
	movw	r0, #:lower16:.LC464
	mov	r2, #12
	movt	r0, #:upper16:.LC464
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #5
	beq	.L7033
	movw	r0, #:lower16:.LC465
	mov	r2, #12
	movt	r0, #:upper16:.LC465
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #6
	beq	.L7033
	movw	r0, #:lower16:.LC466
	mov	r2, #12
	movt	r0, #:upper16:.LC466
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #7
	beq	.L7033
	movw	r0, #:lower16:.LC467
	mov	r2, #12
	movt	r0, #:upper16:.LC467
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #8
	beq	.L7033
	movw	r0, #:lower16:.LC468
	mov	r2, #12
	movt	r0, #:upper16:.LC468
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #9
	beq	.L7033
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #0
	moveq	r0, #10
	movne	r0, #0
.L7033:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	str_to_xport, .-str_to_xport
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	__ffs_event_add, %function
__ffs_event_add:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #96]
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r0, #96]
	cmp	r1, #4
	bcc	.L7048
	cmp	r1, #5
	bls	.L7054
	cmp	r1, #6
	bne	.L7048
	mov	r5, r1
	mov	r7, #0
	mov	r6, #5
.L7049:
	ldrh	r1, [r0, #104]
	add	ip, r0, #100
	mov	r8, ip
	cmp	r1, #0
	moveq	r2, #1
	beq	.L7051
	add	r1, r1, ip
	mov	r2, ip
.L7053:
	ldrb	r3, [r2], #1	@ zero_extendqisi2
	cmp	r3, r5
	cmpne	r3, r6
	moveq	lr, #1
	movne	lr, #0
	cmp	r7, lr
	strbeq	r3, [ip]
	addeq	ip, ip, #1
	cmp	r1, r2
	bne	.L7053
	sub	r1, ip, r8
	add	r2, r1, #1
	uxth	r1, r1
	uxth	r2, r2
.L7051:
	add	r3, r0, r1
	strh	r2, [r0, #104]	@ movhi
	mov	r1, #3
	add	r0, r0, #116
	strb	r4, [r3, #100]
	mov	r2, #1
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up_locked
.L7048:
	mov	r7, #1
	mov	r6, #6
	mov	r5, #5
	b	.L7049
.L7054:
	mov	r6, r1
	mov	r5, r1
	mov	r7, #0
	b	.L7049
	.fnend
	.size	__ffs_event_add, .-__ffs_event_add
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_event_add, %function
ffs_event_add:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r4, r0, #116
	mov	r5, r0
	mov	r0, r4
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r1, r7
	mov	r0, r5
	bl	__ffs_event_add
	ldr	r8, [sp, #16]
	mov	r1, r6
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	ffs_event_add, .-ffs_event_add
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_resume, %function
ffs_func_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r1, #6
	ldr	r0, [r0, #-28]
	b	ffs_event_add
	.fnend
	.size	ffs_func_resume, .-ffs_func_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_suspend, %function
ffs_func_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r1, #5
	ldr	r0, [r0, #-28]
	b	ffs_event_add
	.fnend
	.size	ffs_func_suspend, .-ffs_func_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_set_alt, %function
ffs_func_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmn	r2, #1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	fp, [r0, #-28]
	beq	.L7063
	ldrh	ip, [fp, #178]
	ldr	r4, [r0, #-4]
	cmp	ip, #0
	beq	.L7075
	uxtb	r1, r1
	mov	r5, r4
.L7066:
	mov	r3, r5
	ldrsh	lr, [r3], #2
	cmp	lr, #0
	blt	.L7065
	cmp	lr, r1
	beq	.L7088
.L7065:
	subs	ip, ip, #1
	mov	r5, r3
	bne	.L7066
.L7075:
	mvn	r5, #32
.L7062:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7088:
	subs	r5, r5, r4
	asrmi	r5, r5, #1
	bmi	.L7062
.L7063:
	str	r0, [sp]
	ldr	r0, [fp, #132]
	mov	r4, r2
	cmp	r0, #0
	beq	.L7067
	bl	ffs_func_eps_disable
	mov	r3, #0
	str	r3, [fp, #132]
.L7067:
	ldr	r3, [fp, #92]
	cmp	r3, #2
	bne	.L7076
	cmn	r4, #1
	beq	.L7089
	ldr	r2, [sp]
	sub	r3, r2, #36
	str	r3, [fp, #132]
	ldr	r10, [r2, #-28]
	ldr	r4, [r2, #-24]
	ldr	r6, [r10, #208]
	add	r0, r10, #24
	ldrh	r9, [r10, #180]
	add	r4, r4, #28
	bl	_raw_spin_lock_irqsave
	str	r0, [sp, #4]
	add	r6, r6, #20
	b	.L7072
.L7091:
	str	r8, [r6, #20]
	ldrb	ip, [r7, #2]	@ zero_extendqisi2
	add	r6, r6, #56
	lsr	ip, ip, #7
	strb	ip, [r6, #-23]
	ldrb	ip, [r7, #3]	@ zero_extendqisi2
	and	ip, ip, r1
	sub	ip, ip, r2
	clz	ip, ip
	lsr	ip, ip, #5
	strb	ip, [r6, #-22]
	bl	__wake_up
	subs	r9, r9, #1
	beq	.L7090
.L7072:
	ldr	r3, [r10]
	sub	r8, r4, #28
	ldr	r3, [r3, #16]
	cmp	r3, #5
	subne	r3, r3, #3
	moveq	r3, #2
	clzne	r3, r3
	lsrne	r3, r3, #5
	add	r3, r3, #2
	ldr	r7, [r8, r3, lsl #2]
	cmp	r7, #0
	beq	.L7070
	ldr	r3, [r4, #-28]
	add	r4, r4, #28
	str	r8, [r3]
	ldr	r3, [r4, #-56]
	str	r7, [r3, #28]
	ldr	r3, [r4, #-56]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	mov	r2, #1
	mov	r1, #3
	mov	r0, r6
	mov	r3, r5
	beq	.L7091
	ldr	r3, [sp]
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-28]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	blt	.L7062
.L7074:
	mov	r0, fp
	mov	r1, #2
	bl	ffs_event_add
	b	.L7062
.L7089:
	mov	r3, #0
	mov	r0, fp
	mov	r1, #3
	mov	r5, r3
	str	r3, [fp, #132]
	bl	ffs_event_add
	b	.L7062
.L7070:
	ldr	r3, [sp]
	mvn	r5, #21
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-28]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	b	.L7062
.L7090:
	ldr	r3, [sp]
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-28]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	b	.L7074
.L7076:
	mvn	r5, #18
	b	.L7062
	.fnend
	.size	ffs_func_set_alt, .-ffs_func_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_disable, %function
ffs_func_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mvn	r2, #0
	mov	r1, #0
	b	ffs_func_set_alt
	.fnend
	.size	ffs_func_disable, .-ffs_func_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_bind, %function
ffs_func_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r2, r1, #36
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r1, #-32]
	.pad #36
	sub	sp, sp, #36
	ldr	r5, [r1, #-28]
	str	r2, [sp, #8]
	ldr	r3, [r3, #20]
	ldr	r6, [r5, #164]
	adds	r2, r6, #0
	movne	r2, #1
	cmp	r3, #2
	movls	r9, #0
	strls	r9, [sp, #16]
	bls	.L7094
	ldr	r9, [r5, #168]
	cmp	r9, #0
	movne	r2, #1
	movne	r9, r2
	cmp	r3, #4
	movls	r3, #0
	strls	r3, [sp, #16]
	bls	.L7094
	ldr	r0, [r5, #172]
	cmp	r0, #0
	movne	r2, #1
	streq	r0, [sp, #16]
	strne	r2, [sp, #16]
.L7094:
	ldrh	r4, [r5, #180]
	cmp	r6, #0
	lsl	r3, r4, #3
	sub	r0, r3, r4
	sub	r4, r3, r4
	lsl	r0, r0, #2
	str	r0, [sp, #12]
	addne	r0, r6, #1
	moveq	r0, r6
	add	r4, r4, r0
	cmp	r9, #0
	lsl	r3, r4, #2
	str	r3, [sp, #28]
	ldrne	r3, [r5, #168]
	addne	r3, r3, #1
	addne	r4, r4, r3
	lsl	r3, r4, #2
	str	r3, [sp, #20]
	ldr	r3, [sp, #16]
	cmp	r3, #0
	beq	.L7120
	ldr	r3, [r5, #172]
	add	r3, r3, #1
	add	r4, r4, r3
	lsl	r3, r4, #2
	str	r3, [sp, #24]
.L7098:
	ldrh	fp, [r5, #178]
	cmp	r2, #0
	ldr	r10, [r5, #148]
	add	r4, fp, r4, lsl #1
	lsl	fp, fp, #1
	lsl	r4, r4, #1
	add	r0, r10, #3
	add	r0, r0, r4
	bic	r0, r0, #3
	beq	.L7121
	mov	r7, r1
	mov	r1, #208
	bl	__kmalloc
	subs	r8, r0, #0
	mvneq	r6, #11
	beq	.L7093
	ldr	r3, [sp, #12]
	cmp	r3, #0
	bne	.L7147
.L7100:
	ldr	r1, [r5, #144]
	add	r4, r8, r4
	mov	r0, r4
	ldr	r2, [r5, #152]
	add	r1, r1, #16
	bl	memcpy
	ldr	r3, [r7, #-28]
	ldr	r3, [r3, #172]
	cmp	r3, #0
	bne	.L7148
.L7101:
	ldr	r3, [sp, #24]
	cmp	fp, #0
	add	r3, r8, r3
	bne	.L7149
.L7102:
	ldrh	r1, [r5, #180]
	cmp	r1, #0
	beq	.L7103
	rsb	r2, r1, r1, lsl #3
	mvn	r0, #0
	add	r2, r8, r2, lsl #2
.L7104:
	subs	r1, r1, #1
	strb	r0, [r2, #20]
	sub	r2, r2, #28
	bne	.L7104
.L7103:
	cmp	r6, #0
	str	r8, [r7, #-24]
	str	r3, [r7, #-4]
	beq	.L7105
	ldr	ip, [sp, #8]
	mov	r2, r10
	ldr	r3, [sp, #12]
	add	r1, r8, r3
	movw	r3, #:lower16:__ffs_func_bind_do_descs
	movt	r3, #:upper16:__ffs_func_bind_do_descs
	str	r1, [r7, #16]
	mov	r1, r4
	ldr	r0, [r5, #164]
	str	ip, [sp]
	bl	ffs_do_descs
	subs	r6, r0, #0
	blt	.L7093
.L7105:
	cmp	r9, #0
	beq	.L7106
	ldr	r3, [sp, #28]
	sub	fp, r10, r6
	mov	r2, fp
	add	r1, r8, r3
	movw	r3, #:lower16:__ffs_func_bind_do_descs
	movt	r3, #:upper16:__ffs_func_bind_do_descs
	str	r1, [r7, #8]
	ldr	r1, [sp, #8]
	ldr	r0, [r5, #168]
	str	r1, [sp]
	add	r1, r4, r6
	bl	ffs_do_descs
	subs	r2, r0, #0
	blt	.L7150
	ldr	r3, [sp, #16]
	cmp	r3, #0
	beq	.L7151
.L7111:
	ldr	ip, [sp, #8]
	add	r1, r6, r2
	sub	r2, fp, r2
	ldr	r3, [sp, #20]
	add	r1, r4, r1
	add	r8, r8, r3
	movw	r3, #:lower16:__ffs_func_bind_do_descs
	movt	r3, #:upper16:__ffs_func_bind_do_descs
	str	r8, [r7, #12]
	ldr	r0, [r5, #172]
	str	ip, [sp]
	bl	ffs_do_descs
	subs	r6, r0, #0
	blt	.L7093
	cmp	r9, #0
	ldr	ip, [r5, #164]
	bne	.L7152
.L7109:
	ldr	r0, [r5, #172]
.L7110:
	ldr	r2, [sp, #8]
	movw	r3, #:lower16:__ffs_func_bind_do_nums
	mov	r1, r4
	add	r0, r0, ip
	movt	r3, #:upper16:__ffs_func_bind_do_nums
	str	r2, [sp]
	mov	r2, r10
	bl	ffs_do_descs
	subs	r6, r0, #0
	blt	.L7093
	mov	r0, r5
	mov	r1, #0
	mov	r6, #0
	bl	ffs_event_add
.L7093:
	mov	r0, r6
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7120:
	ldr	r3, [sp, #20]
	str	r3, [sp, #24]
	b	.L7098
.L7152:
	ldr	r3, [r5, #168]
	add	ip, ip, r3
	b	.L7109
.L7149:
	mov	r0, r3
	mov	r2, fp
	mov	r1, #255
	bl	memset
	mov	r3, r0
	b	.L7102
.L7148:
	ldr	r1, [r5, #144]
	ldr	r0, [r5, #152]
	ldr	r3, [r5, #156]
	ldr	r2, [r5, #160]
	add	r0, r4, r0
	add	r1, r1, r3
	bl	memcpy
	b	.L7101
.L7147:
	mov	r1, r3
	bl	__memzero
	b	.L7100
.L7121:
	movw	r6, #65012
	movt	r6, 65535
	b	.L7093
.L7106:
	ldr	r3, [sp, #16]
	cmp	r3, #0
	movne	r2, r9
	subne	fp, r10, r6
	bne	.L7111
	ldr	ip, [r5, #164]
	ldr	r0, [sp, #16]
	b	.L7110
.L7151:
	ldr	r3, [r5, #164]
	ldr	ip, [r5, #168]
	ldr	r0, [sp, #16]
	add	ip, ip, r3
	b	.L7110
.L7150:
	mov	r6, r2
	b	.L7093
	.fnend
	.size	ffs_func_bind, .-ffs_func_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_setup, %function
ffs_func_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #-28]
	ldr	r3, [r5, #92]
	cmp	r3, #2
	bne	.L7160
	ldrb	r3, [r1]	@ zero_extendqisi2
	and	r3, r3, #31
	cmp	r3, #1
	beq	.L7155
	cmp	r3, #2
	beq	.L7156
	mvn	r4, #94
.L7153:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7156:
	ldrh	r3, [r1, #4]	@ unaligned
	and	r3, r3, #15
	add	r0, r0, r3
	ldrb	r4, [r0, #-20]	@ zero_extendqisi2
	cmp	r4, #0
	beq	.L7163
.L7158:
	add	r7, r5, #116
	mov	r6, r1
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r6]	@ unaligned
	mov	r8, r0
	mov	r1, #4
	ldr	r3, [r6, #4]	@ unaligned
	mov	r0, r5
	strd	r2, [r5, #108]
	strh	r4, [r5, #112]	@ movhi
	mov	r4, #0
	bl	__ffs_event_add
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L7153
.L7155:
	ldrh	ip, [r5, #178]
	ldrh	lr, [r1, #4]	@ unaligned
	ldr	r4, [r0, #-4]
	cmp	ip, #0
	uxtb	lr, lr
	beq	.L7163
	mov	r2, r4
.L7159:
	mov	r3, r2
	ldrsh	r0, [r3], #2
	cmp	r0, #0
	blt	.L7157
	cmp	r0, lr
	beq	.L7167
.L7157:
	subs	ip, ip, #1
	mov	r2, r3
	bne	.L7159
.L7163:
	mvn	r4, #32
	b	.L7153
.L7167:
	sub	r2, r2, r4
	cmp	r2, #0
	asr	r4, r2, #1
	bge	.L7158
	b	.L7153
.L7160:
	mvn	r4, #18
	b	.L7153
	.fnend
	.size	ffs_func_setup, .-ffs_func_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_mutex_lock, %function
ffs_mutex_lock:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	bne	.L7173
	b	mutex_lock_interruptible
.L7173:
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	bl	mutex_trylock
	cmp	r0, #0
	ldr	r4, [sp]
	add	sp, sp, #4
	movne	r0, #0
	mvneq	r0, #10
	ldr	pc, [sp], #4
	.fnend
	.size	ffs_mutex_lock, .-ffs_mutex_lock
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_io, %function
ffs_epfile_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	subs	r8, r3, #0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #52
	sub	sp, sp, #52
	streq	r2, [sp, #4]
	ldr	fp, [r4, #36]
	beq	.L7178
	sub	ip, r2, #1
	mvn	ip, ip, lsr #10
	mvn	ip, ip, lsl #10
	add	r3, ip, #1
	str	r3, [sp, #4]
.L7178:
	ldr	r6, [r4, #32]
	cmp	r6, #0
	bne	.L7201
	ldr	r3, [fp, #92]
	str	r0, [sp, #8]
	str	r2, [sp, #16]
	str	r1, [sp, #20]
	cmp	r3, #2
	bne	.L7180
	mov	r3, sp
	bic	r10, r3, #8128
	bic	r10, r10, #63
.L7181:
	ldr	r9, [r4, #40]
	cmp	r9, #0
	beq	.L7224
.L7199:
	ldrb	r5, [r4, #53]	@ zero_extendqisi2
	and	r7, r8, #1
	clz	r5, r5
	lsr	r5, r5, #5
	cmp	r7, r5
	eor	r2, r7, r5
	beq	.L7186
	ldrb	r1, [r4, #54]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L7206
.L7186:
	cmp	r6, #0
	eoreq	r2, r2, #1
	movne	r2, #0
	cmp	r2, #0
	beq	.L7187
	movw	r1, #32976
	ldr	r0, [sp, #4]
	bl	__kmalloc
	subs	r6, r0, #0
	beq	.L7207
	cmp	r8, #0
	beq	.L7225
.L7187:
	ldr	r3, [sp, #8]
	mov	r0, r4
	ldr	r1, [r3, #32]
	and	r1, r1, #2048
	bl	ffs_mutex_lock
	subs	r3, r0, #0
	str	r3, [sp, #12]
	bne	.L7222
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bl	_raw_spin_lock_irq
	ldr	r2, [r4, #40]
	cmp	r2, r9
	bne	.L7188
	mov	r1, r7
	mov	r3, r2
	cmp	r1, r5
	mov	r7, r9
	ldr	r9, [sp, #12]
	bne	.L7226
	ldr	r7, [r7, #4]
	movw	r2, #:lower16:ffs_epfile_io_complete
	cmp	r8, #0
	ldr	r1, [sp, #4]
	mov	r10, fp
	movt	r2, #:upper16:ffs_epfile_io_complete
	str	r3, [sp, #4]
	str	r6, [r7]
	str	r1, [r7, #4]
	mov	r1, r7
	str	r2, [r7, #28]
	mov	r2, #32
	strne	r9, [r10, #68]!
	streq	r8, [r10, #52]!
	str	r10, [r7, #32]
	ldr	r0, [r3]
	ldr	ip, [r0, #8]
	ldr	r8, [ip, #16]
	blx	r8
	mov	r8, r0
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
	cmp	r8, #0
	blt	.L7209
	mov	r0, r10
	bl	wait_for_completion_interruptible
	cmp	r0, #0
	ldr	r3, [sp, #4]
	bne	.L7227
	ldr	r0, [r4, #36]
	str	r3, [sp, #4]
	add	r0, r0, #24
	bl	_raw_spin_lock_irq
	ldr	r3, [sp, #4]
	ldr	r0, [r4, #36]
	ldr	r2, [r4, #40]
	cmp	r3, r2
	beq	.L7228
	add	r0, r0, #24
	mvn	r9, #18
	bl	_raw_spin_unlock_irq
.L7191:
	mov	r0, r4
	bl	mutex_unlock
.L7182:
	mov	r0, r6
	bl	kfree
.L7176:
	mov	r0, r9
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7224:
	ldr	r3, [sp, #8]
	ldr	r3, [r3, #32]
	tst	r3, #2048
	bne	.L7203
	cmp	r8, #0
	beq	.L7205
	ldr	r3, [r4, #32]
	cmp	r3, #0
	bne	.L7205
	ldr	r0, [r10, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #40
	movt	r2, #:upper16:autoremove_wake_function
	add	r5, r4, #20
	str	r3, [sp, #28]
	str	r1, [sp, #40]
	str	r0, [sp, #32]
	str	r2, [sp, #36]
	str	r1, [sp, #44]
	b	.L7185
.L7229:
	bl	schedule
.L7185:
	mov	r2, #1
	add	r1, sp, #28
	mov	r0, r5
	bl	prepare_to_wait
	ldr	r9, [r4, #40]
	cmp	r9, #0
	bne	.L7183
	ldr	r3, [r10, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L7229
	add	r1, sp, #28
	mov	r0, r5
	mov	r9, #65024
	bl	finish_wait
	movt	r9, 65535
	b	.L7182
.L7183:
	add	r1, sp, #28
	mov	r0, r5
	bl	finish_wait
	b	.L7199
.L7225:
	ldr	r2, [sp, #16]
	ldr	r1, [sp, #20]
	bl	__copy_from_user
	cmp	r0, #0
	beq	.L7187
	mvn	r9, #13
	b	.L7182
.L7227:
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bl	_raw_spin_lock_irq
	ldr	r3, [sp, #4]
	ldr	r2, [r4, #40]
	cmp	r3, r2
	bne	.L7195
	ldr	r0, [r3]
	mov	r1, r7
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L7195:
	ldr	r0, [r4, #36]
	mvn	r9, #3
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
	b	.L7191
.L7228:
	ldr	r9, [r3, #24]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
	cmp	r9, #0
	movle	r5, #0
	andgt	r5, r5, #1
	cmp	r5, #0
	beq	.L7191
	ldr	r3, [sp, #16]
	cmp	r9, r3
	mvnhi	r9, #74
	bhi	.L7191
	mov	r3, sp
	ldr	r1, [sp, #20]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r1, r9; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L7230
.L7197:
	mvn	r9, #13
	b	.L7191
.L7188:
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
	mov	r0, r4
	bl	mutex_unlock
	ldr	r3, [r4, #36]
	ldr	r3, [r3, #92]
	cmp	r3, #2
	beq	.L7181
.L7180:
	movw	r0, #:lower16:.LC9
	movw	r1, #785
	movt	r0, #:upper16:.LC9
	mvn	r9, #18
	bl	warn_slowpath_null
	b	.L7182
.L7207:
	mvn	r9, #11
	b	.L7176
.L7222:
	ldr	r9, [sp, #12]
	b	.L7182
.L7226:
	ldr	r0, [r7]
	cmp	r0, #0
	beq	.L7231
	ldr	r3, [r0, #8]
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
.L7200:
	ldr	r0, [r4, #36]
	mvn	r9, #73
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
	b	.L7191
.L7209:
	mvn	r9, #4
	b	.L7191
.L7205:
	mvn	r9, #18
	b	.L7182
.L7230:
	mov	r0, r1
	mov	r2, r9
	mov	r1, r6
	bl	__copy_to_user
	cmp	r0, #0
	beq	.L7191
	b	.L7197
.L7201:
	mvn	r9, #18
	b	.L7176
.L7206:
	mvn	r9, #21
	b	.L7182
.L7231:
	movw	r0, #:lower16:.LC9
	mov	r1, #860
	movt	r0, #:upper16:.LC9
	bl	warn_slowpath_null
	b	.L7200
.L7203:
	mvn	r9, #10
	b	.L7182
	.fnend
	.size	ffs_epfile_io, .-ffs_epfile_io
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_write, %function
ffs_epfile_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #0
	b	ffs_epfile_io
	.fnend
	.size	ffs_epfile_write, .-ffs_epfile_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_read, %function
ffs_epfile_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #1
	b	ffs_epfile_io
	.fnend
	.size	ffs_epfile_read, .-ffs_epfile_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_read, %function
ffs_ep0_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 1, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	movw	r7, #:lower16:__stack_chk_guard
	strd	r8, [sp, #16]
	movt	r7, #:upper16:__stack_chk_guard
	strd	r10, [sp, #24]
	.setfp fp, sp, #32
	add	fp, sp, #32
	str	lr, [sp, #32]
	.pad #52
	sub	sp, sp, #52
	ldr	r6, [r0, #124]
	str	r1, [fp, #-68]
	ldr	r1, [r7]
	str	r2, [fp, #-64]
	add	r5, r6, #96
	str	r1, [fp, #-40]
	.syntax divided
@ 193 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r2, #0
.L7235:
	.syntax divided
@ 170 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r1, [r5]
	mov	r8, #0
	teq	r1, #2
	strexeq r8, r2, [r5]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r8, #0
	bne	.L7235
	.syntax divided
@ 195 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #2
	beq	.L7259
	ldr	r1, [r4, #32]
	add	r10, r6, #4
	mov	r0, r10
	and	r1, r1, #2048
	bl	ffs_mutex_lock
	subs	r9, r0, #0
	blt	.L7234
	ldr	r2, [r6, #92]
	cmp	r2, #2
	movne	r4, r8
	mvnne	r9, #76
	beq	.L7278
.L7237:
	mov	r0, r10
	bl	mutex_unlock
	mov	r0, r4
	bl	kfree
.L7234:
	ldr	r2, [fp, #-40]
	mov	r0, r9
	ldr	r3, [r7]
	cmp	r2, r3
	bne	.L7279
	sub	sp, fp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7278:
	add	r3, r6, #116
	mov	r0, r3
	str	r3, [fp, #-72]
	bl	_raw_spin_lock_irq
	.syntax divided
@ 193 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r2, r8
.L7238:
	.syntax divided
@ 170 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r9, [r5]
	mov	r8, #0
	teq	r9, #2
	strexeq r8, r2, [r5]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r8, #0
	bne	.L7238
	.syntax divided
@ 195 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r9, #1
	beq	.L7240
	bcc	.L7241
	cmp	r9, #2
	mov	r4, r8
	mvneq	r9, #42
	mvnne	r9, #76
.L7239:
	ldr	r0, [fp, #-72]
	bl	_raw_spin_unlock_irq
	b	.L7237
.L7241:
	ldr	r3, [fp, #-64]
	movw	r2, #43691
	movt	r2, 43690
	umull	r2, r3, r2, r3
	lsrs	r3, r3, #3
	str	r3, [fp, #-64]
	beq	.L7262
	ldr	r3, [r4, #32]
	ldrh	r4, [r6, #104]
	tst	r3, #2048
	bne	.L7280
	cmp	r4, #0
	bne	.L7244
	mov	r5, #57344
	mov	r3, sp
	str	r7, [fp, #-80]
	movt	r5, 65535
	str	r4, [fp, #-60]
	movw	r2, #:lower16:autoremove_wake_function
	and	r3, r3, r5
	str	r4, [fp, #-56]
	movt	r2, #:upper16:autoremove_wake_function
	str	r4, [fp, #-52]
	sub	r8, fp, #48
	mov	r1, #1
	str	r4, [fp, #-48]
	mov	r9, r1
	str	r4, [fp, #-44]
	ldr	r0, [r3, #12]
	mov	r3, r8
	str	r10, [fp, #-76]
	ldr	r10, [fp, #-72]
	str	r2, [fp, #-52]
	add	r2, r6, #120
	str	r1, [fp, #-60]
	mov	r7, r2
	str	r0, [fp, #-56]
	str	r8, [fp, #-48]
	str	r8, [fp, #-44]
	b	.L7248
.L7281:
	mov	r0, r10
	bl	_raw_spin_unlock_irq
	bl	schedule
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldrh	r3, [r6, #104]
	cmp	r3, #0
	bne	.L7247
	ldr	r3, [fp, #-48]
.L7248:
	cmp	r3, r8
	bne	.L7245
	mov	r2, r7
	mov	r0, r8
	ldr	r1, [r6, #124]
	bl	__list_add
.L7245:
	mov	r3, sp
	and	r3, r3, r5
	ldr	r2, [r3, #12]
	str	r9, [r2]
	.syntax divided
@ 635 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r4, [r3]
	ands	r4, r4, #1
	beq	.L7281
	mov	r0, r8
	ldr	r7, [fp, #-80]
	mvn	r9, #3
	ldr	r10, [fp, #-76]
	bl	list_del
	mov	r3, sp
	and	r5, r5, r3
	mov	r3, #0
	ldr	r2, [r5, #12]
	mov	r4, r3
	str	r3, [r2]
	b	.L7239
.L7240:
	ldrsb	r3, [r6, #108]
	cmp	r3, #0
	blt	.L7282
	ldrh	r8, [r6, #114]
	ldr	r0, [fp, #-72]
	ldr	r3, [fp, #-64]
	cmp	r8, r3
	movcs	r8, r3
	bl	_raw_spin_unlock_irq
	cmp	r8, #0
	beq	.L7266
	mov	r1, #208
	mov	r0, r8
	bl	__kmalloc
	subs	r4, r0, #0
	beq	.L7283
.L7256:
	ldr	r0, [fp, #-72]
	bl	_raw_spin_lock_irq
	.syntax divided
@ 193 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
.L7257:
	.syntax divided
@ 170 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r1, [r5]
	mov	r2, #0
	teq	r1, #2
	strexeq r2, r3, [r5]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	bne	.L7257
	.syntax divided
@ 195 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #2
	mvneq	r9, #42
	beq	.L7239
	mov	r0, r6
	mov	r2, r8
	mov	r1, r4
	bl	__ffs_ep0_queue_wait
	subs	r9, r0, #0
	ble	.L7237
	mov	r2, r8
	mov	r1, r4
	ldr	r0, [fp, #-68]
	bl	__copy_to_user
	cmp	r0, #0
	mvnne	r9, #13
	b	.L7237
.L7280:
	cmp	r4, #0
	bne	.L7244
	mvn	r9, #10
	b	.L7239
.L7282:
	ldr	r0, [fp, #-72]
	bl	_raw_spin_unlock_irq
	ldrh	r4, [r6, #106]
	cmp	r4, #0
	mvneq	r9, #2
	beq	.L7237
	ldr	r3, [r6]
	mov	r1, r9
	mov	r4, r8
	mvn	r9, #50
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	str	r8, [r6, #96]
	b	.L7237
.L7247:
	mov	r0, r8
	ldr	r7, [fp, #-80]
	ldr	r10, [fp, #-76]
	bl	list_del
	mov	r3, sp
	and	r5, r5, r3
	ldr	r3, [r5, #12]
	str	r4, [r3]
	ldrh	r4, [r6, #104]
.L7244:
	ldr	r3, [fp, #-64]
	str	sp, [fp, #-64]
	cmp	r4, r3
	movcs	r4, r3
	add	r9, r4, r4, lsl #1
	lsl	r9, r9, #2
	add	r3, r9, #7
	cmp	r9, #0
	bic	r3, r3, #7
	sub	sp, sp, r3
	mov	r5, sp
	beq	.L7249
	mov	r1, r9
	mov	r0, sp
	bl	__memzero
.L7249:
	add	lr, r6, #100
	mov	r3, r5
	mov	r1, lr
	mov	r2, #0
	mov	r8, #1
.L7251:
	ldrb	r0, [r1], #1	@ zero_extendqisi2
	cmp	r0, #4
	strb	r0, [r3, #8]
	bne	.L7250
	ldr	ip, [r6, #108]
	ldr	r0, [r6, #112]
	str	ip, [r3]	@ unaligned
	str	r0, [r3, #4]	@ unaligned
	str	r8, [r6, #96]
.L7250:
	add	r2, r2, #1
	add	r3, r3, #12
	cmp	r4, r2
	bhi	.L7251
	ldrh	r3, [r6, #104]
	cmp	r4, r3
	movcs	r3, #0
	strhcs	r3, [r6, #104]	@ movhi
	bcs	.L7253
	sub	r3, r3, r4
	add	r1, lr, r4
	uxth	r3, r3
	mov	r0, lr
	mov	r2, r3
	strh	r3, [r6, #104]	@ movhi
	bl	memmove
.L7253:
	ldr	r0, [fp, #-72]
	bl	_raw_spin_unlock_irq
	mov	r0, r10
	bl	mutex_unlock
	mov	r2, r9
	mov	r1, r5
	ldr	r0, [fp, #-68]
	bl	__copy_to_user
	cmp	r0, #0
	ldr	sp, [fp, #-64]
	mvnne	r9, #13
	b	.L7234
.L7259:
	mvn	r9, #42
	b	.L7234
.L7262:
	mvn	r9, #21
	ldr	r4, [fp, #-64]
	b	.L7239
.L7283:
	mvn	r9, #11
	b	.L7237
.L7266:
	mov	r4, r8
	b	.L7256
.L7279:
	bl	__stack_chk_fail
	.fnend
	.size	ffs_ep0_read, .-ffs_ep0_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_gadget_get_string.part.69, %function
usb_gadget_get_string.part.69:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #4]
	cmp	r3, #0
	beq	.L7302
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	ldr	r4, [r3, #4]
	.pad #12
	sub	sp, sp, #12
	cmp	r4, #0
	beq	.L7287
	ldrb	r0, [r3]	@ zero_extendqisi2
	cmp	r1, r0
	bne	.L7289
	b	.L7288
.L7303:
	ldr	r4, [r3, #4]
	cmp	r4, #0
	beq	.L7287
	ldrb	r0, [r3]	@ zero_extendqisi2
	cmp	r0, r1
	beq	.L7288
.L7289:
	adds	r3, r3, #8
	bne	.L7303
.L7287:
	mvn	r0, #21
.L7284:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L7288:
	mov	r0, r4
	mov	r5, r2
	bl	strlen
	mov	r2, #126
	add	r3, r5, #2
	cmp	r0, r2
	movcc	r1, r0
	movcs	r1, r2
	str	r2, [sp]
	mov	r0, r4
	mov	r2, #1
	bl	utf8s_to_utf16s
	cmp	r0, #0
	blt	.L7287
	add	r3, r0, #1
	mov	r2, #3
	lsl	r3, r3, #1
	strb	r2, [r5, #1]
	uxtb	r3, r3
	mov	r0, r3
	strb	r3, [r5]
	b	.L7284
.L7302:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	usb_gadget_get_string.part.69, .-usb_gadget_get_string.part.69
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	lookup_string, %function
lookup_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r3
	sub	r4, r0, #4
	strd	r6, [sp, #8]
	mov	r6, r1
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.L7305:
	ldr	ip, [r4, #4]!
	mov	r2, r6
	mov	r1, r5
	subs	r0, ip, #0
	beq	.L7312
	ldrh	lr, [ip]
	cmp	lr, r7
	bne	.L7305
	cmp	r5, #0
	beq	.L7313
	bl	usb_gadget_get_string.part.69
	cmp	r0, #0
	ble	.L7305
.L7304:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7312:
	mvn	r0, #21
	b	.L7304
.L7313:
	mov	r3, #4
	mov	r2, #3
	mov	r0, r3
	strb	r3, [r6]
	strb	r2, [r6, #1]
	ldrh	r3, [ip]
	strb	r3, [r6, #2]
	ldrh	r3, [ip]
	lsr	r3, r3, #8
	strb	r3, [r6, #3]
	b	.L7304
	.fnend
	.size	lookup_string, .-lookup_string
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_descriptor_fillbuf.part.71, %function
usb_descriptor_fillbuf.part.71:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r2]
	cmp	r0, #0
	beq	.L7314
	ldrb	r4, [r0]	@ zero_extendqisi2
	mov	r5, r1
	cmp	r1, r4
	movcs	r6, r2
	movcs	r3, r7
	bcs	.L7316
	b	.L7318
.L7319:
	ldrb	r4, [r0]	@ zero_extendqisi2
	cmp	r4, r5
	bhi	.L7318
.L7316:
	mov	r1, r0
	mov	r2, r4
	mov	r0, r3
	sub	r5, r5, r4
	bl	memcpy
	mov	r3, r0
	ldr	r0, [r6, #4]!
	add	r3, r3, r4
	cmp	r0, #0
	bne	.L7319
	sub	r0, r3, r7
.L7314:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7318:
	mvn	r0, #21
	b	.L7314
	.fnend
	.size	usb_descriptor_fillbuf.part.71, .-usb_descriptor_fillbuf.part.71
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_recv_cb.part.82, %function
gbam_data_recv_cb.part.82:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	mov	r5, r1
	strd	r6, [sp, #8]
	add	r6, r0, #8
	mov	r0, r6
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r7, r0
	cmp	r3, #0
	beq	.L7326
	movw	r3, #:lower16:.LANCHOR0
	ldr	r2, [r4, #44]
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #1676]
	cmp	r2, r3
	bls	.L7325
	ldr	r3, [r4, #244]
	ldr	r8, .L7332
	add	r3, r3, #1
	mov	r0, r8
	str	r3, [r4, #244]
	bl	__printk_ratelimit
	cmp	r0, #0
	bne	.L7331
.L7326:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_kfree_skb_any
.L7325:
	ldr	r3, [r4, #40]
	add	r2, r4, #36
	mov	r1, r0
	mov	r0, r6
	strd	r2, [r5]
	str	r5, [r3]
	ldr	r3, [r4, #44]
	str	r5, [r4, #40]
	add	r3, r3, #1
	str	r3, [r4, #44]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	gbam_write_data_tohost
.L7331:
	movw	r0, #:lower16:.LC469
	mov	r1, r8
	ldr	r2, [r4, #244]
	movt	r0, #:upper16:.LC469
	bl	printk
	b	.L7326
.L7333:
	.align	2
.L7332:
	.word	.LANCHOR3-3832
	.fnend
	.size	gbam_data_recv_cb.part.82, .-gbam_data_recv_cb.part.82
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_write_done.part.83, %function
gbam_data_write_done.part.83:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r0, r1
	add	r5, r4, #4
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_kfree_skb_any
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #240]
	mov	r1, r0
	mov	r0, r5
	sub	r3, r3, #1
	str	r3, [r4, #240]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #80
	ldrd	r4, [sp]
	movt	r3, #:upper16:.LANCHOR1
	ldr	r6, [sp, #8]
	mov	r0, #4
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, [r3, #2748]
	b	queue_work_on
	.fnend
	.size	gbam_data_write_done.part.83, .-gbam_data_write_done.part.83
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_notify, %function
gbam_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #0
	beq	.L7338
	cmp	r1, #1
	bne	.L7346
	cmp	r2, #0
	bne	.L7347
.L7336:
	bx	lr
.L7346:
	bx	lr
.L7338:
	cmp	r2, #0
	beq	.L7336
	mov	r1, r2
	b	gbam_data_recv_cb.part.82
.L7347:
	mov	r1, r2
	b	gbam_data_write_done.part.83
	.fnend
	.size	gbam_notify, .-gbam_notify
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_suspend, %function
frmnet_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r5, #:upper16:.LANCHOR1
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #116]	@ zero_extendqisi2
	add	r3, r3, r3, lsl #1
	add	r3, r5, r3, lsl #3
	ldr	r4, [r3, #2520]
	sub	r2, r4, #1
	cmp	r2, #9
	movwhi	r7, #:lower16:.LC102
	movthi	r7, #:upper16:.LC102
	bhi	.L7349
	movw	r3, #:lower16:.LANCHOR2
	movt	r3, #:upper16:.LANCHOR2
	add	r3, r3, r2, lsl #2
	ldr	r7, [r3, #936]
.L7349:
	ldr	r0, [r6, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L7350
	blx	r3
.L7350:
	mov	r0, r6
	bl	frmnet_purge_responses
	cmp	r4, #10
	bhi	.L7351
	mov	r3, #1
	lsl	r3, r3, r4
	tst	r3, #1824
	bne	.L7348
	tst	r3, #192
	beq	.L7351
	sub	r4, r4, #6
	cmp	r4, #1
	bls	.L7361
.L7348:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7361:
	ldrb	r3, [r6, #116]	@ zero_extendqisi2
	mov	r0, #4
	ldr	r1, [r5, #2748]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r3, r3, r3, lsl #1
	ldr	lr, [sp, #20]
	add	r3, r5, r3, lsl #3
	ldrb	r3, [r3, #2528]	@ zero_extendqisi2
	add	r5, r5, r3, lsl #2
	ldr	r2, [r5, #3612]
	ldrd	r4, [sp]
	add	sp, sp, #24
	add	r2, r2, #316
	b	queue_work_on
.L7351:
	movw	r0, #:lower16:.LC470
	mov	r2, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC470
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L7362
	b	printk
.L7363:
	.align	2
.L7362:
	.word	.LANCHOR3-3812
	.fnend
	.size	frmnet_suspend, .-frmnet_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_resume, %function
frmnet_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {lr}
	str	lr, [sp, #-4]!
	ldrb	r0, [r0, #116]	@ zero_extendqisi2
	movw	ip, #:lower16:.LANCHOR1
	movt	ip, #:upper16:.LANCHOR1
	lsl	lr, r0, #1
	add	r3, lr, r0
	add	r3, ip, r3, lsl #3
	ldr	r3, [r3, #2520]
	sub	r1, r3, #1
	cmp	r1, #9
	bhi	.L7365
	movw	r2, #:lower16:.LANCHOR2
	movt	r2, #:upper16:.LANCHOR2
	add	r2, r2, r1, lsl #2
	ldr	r2, [r2, #936]
.L7366:
	mov	r1, #1
	lsl	r1, r1, r3
	tst	r1, #1824
	bne	.L7364
	tst	r1, #192
	beq	.L7367
	sub	r3, r3, #6
	cmp	r3, #1
	bls	.L7374
.L7364:
	ldr	pc, [sp], #4
.L7365:
	cmp	r3, #10
	movw	r2, #:lower16:.LC102
	movt	r2, #:upper16:.LC102
	bls	.L7366
.L7367:
	movw	r0, #:lower16:.LC470
	ldr	r1, .L7375
	movt	r0, #:upper16:.LC470
	ldr	lr, [sp], #4
	b	printk
.L7374:
	add	lr, lr, r0
	ldr	r1, [ip, #2748]
	mov	r0, #4
	add	lr, ip, lr, lsl #3
	ldrb	r3, [lr, #2528]	@ zero_extendqisi2
	ldr	lr, [sp], #4
	add	ip, ip, r3, lsl #2
	ldr	r2, [ip, #3612]
	add	r2, r2, #332
	b	queue_work_on
.L7376:
	.align	2
.L7375:
	.word	.LANCHOR3-3796
	.fnend
	.size	frmnet_resume, .-frmnet_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_add_hdr.part.99, %function
rndis_add_hdr.part.99:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, #44
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	skb_push
	mov	r1, #44
	mov	r4, r0
	bl	__memzero
	mov	r3, #0
	mov	r2, #1
	mov	r1, #36
	strb	r2, [r4]
	strb	r3, [r4, #1]
	strb	r3, [r4, #2]
	strb	r3, [r4, #3]
	ldr	r2, [r5, #80]
	str	r2, [r4, #4]	@ unaligned
	strb	r1, [r4, #8]
	strb	r3, [r4, #9]
	strb	r3, [r4, #10]
	strb	r3, [r4, #11]
	ldr	r3, [r5, #80]
	sub	r3, r3, #44
	str	r3, [r4, #12]	@ unaligned
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_add_hdr.part.99, .-rndis_add_hdr.part.99
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_add_header, %function
rndis_qc_add_header:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	mov	r1, #44
	mov	r0, r4
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	skb_realloc_headroom
	subs	r5, r0, #0
	beq	.L7380
	bl	rndis_add_hdr.part.99
.L7380:
	mov	r0, r4
	bl	dev_kfree_skb_any
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_qc_add_header, .-rndis_qc_add_header
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_add_header, %function
rndis_add_header:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r3, [r0, #124]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L7386
	ldr	r4, [r0, #144]
	cmp	r4, #0
	beq	.L7387
	mov	r1, #44
	mov	r0, r4
	bl	__memzero
	mov	r3, #0
	mov	r2, #1
	mov	r1, #36
	mov	r6, r5
	strb	r2, [r4]
	strb	r3, [r4, #1]
	strb	r3, [r4, #2]
	strb	r3, [r4, #3]
	ldr	r2, [r5, #80]
	strb	r1, [r4, #8]
	strb	r3, [r4, #9]
	strb	r3, [r4, #10]
	add	r2, r2, #44
	str	r2, [r4, #4]	@ unaligned
	strb	r3, [r4, #11]
	ldr	r3, [r5, #80]
	str	r3, [r4, #12]	@ unaligned
.L7385:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7386:
	mov	r1, #44
	mov	r0, r5
	bl	skb_realloc_headroom
	subs	r6, r0, #0
	beq	.L7389
	bl	rndis_add_hdr.part.99
.L7389:
	mov	r0, r5
	bl	dev_kfree_skb_any
	b	.L7385
.L7387:
	movw	r0, #:lower16:.LC471
	mov	r6, r4
	movt	r0, #:upper16:.LC471
	bl	printk
	b	.L7385
	.fnend
	.size	rndis_add_header, .-rndis_add_header
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_init.part.102, %function
rndis_init.part.102:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, .L7400
	movw	r1, #:lower16:.LC472
	str	r6, [sp, #8]
	movw	r6, #:lower16:__stack_chk_guard
	movt	r1, #:upper16:.LC472
	movt	r6, #:upper16:__stack_chk_guard
	str	lr, [sp, #12]
	.pad #32
	sub	sp, sp, #32
	ldr	r3, [r6]
	mov	r2, #0
	add	r0, sp, #8
	str	r3, [sp, #28]
	bl	sprintf
	add	r0, sp, #8
	ldr	r3, .L7400+4
	mov	r2, #0
	mov	r1, #432
	str	r5, [sp]
	bl	proc_create_data
	cmp	r0, #0
	mvneq	r0, #4
	beq	.L7394
	mov	r3, #0
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	add	r5, r5, #52
	mov	r2, #1
	movw	r1, #3624
	mov	r0, r3
	strh	r3, [r4, r1]	@ movhi
	str	r3, [r4, #3628]
	str	r2, [r4, #3640]
	str	r5, [r4, #3676]
	str	r5, [r4, #3680]
	strb	r2, [r4, #3684]
.L7394:
	ldr	r2, [sp, #28]
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L7399
	add	sp, sp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7399:
	bl	__stack_chk_fail
.L7401:
	.align	2
.L7400:
	.word	.LANCHOR1+3624
	.word	.LANCHOR3-3780
	.fnend
	.size	rndis_init.part.102, .-rndis_init.part.102
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_exit.part.103, %function
rndis_exit.part.103:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movw	r4, #:lower16:__stack_chk_guard
	movw	r3, #:lower16:.LANCHOR1
	movt	r4, #:upper16:__stack_chk_guard
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #8]
	ldr	ip, [r4]
	mov	r5, #0
	.pad #28
	sub	sp, sp, #28
	movw	r1, #:lower16:.LC472
	mov	r2, r5
	movt	r1, #:upper16:.LC472
	mov	r0, sp
	strb	r5, [r3, #3684]
	str	ip, [sp, #20]
	bl	sprintf
	mov	r0, sp
	mov	r1, r5
	bl	remove_proc_entry
	ldr	r2, [sp, #20]
	ldr	r3, [r4]
	cmp	r2, r3
	bne	.L7405
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L7405:
	bl	__stack_chk_fail
	.fnend
	.size	rndis_exit.part.103, .-rndis_exit.part.103
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_bind_config, %function
android_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r1, .L7426
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r3, #2228]
	ldr	r0, [r0, #24]
	cmp	r3, r1
	beq	.L7407
	sub	r2, r3, #520
	ldr	r3, [r3, #-512]
	cmp	r0, r3
	bne	.L7408
	b	.L7407
.L7409:
	ldr	r3, [r3, #-512]
	cmp	r0, r3
	beq	.L7407
.L7408:
	ldr	r3, [r2, #520]
	cmp	r3, r1
	sub	r2, r3, #520
	bne	.L7409
.L7407:
	mov	r5, r6
	ldr	r4, [r5, #112]!
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L7410
.L7416:
	ldr	r0, [r4]
	mov	r1, r6
	ldr	r3, [r0, #40]
	blx	r3
	subs	r7, r0, #0
	bne	.L7424
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	bne	.L7416
.L7410:
	mov	r7, #0
.L7406:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7424:
	ldr	r2, .L7426+4
	movw	r0, #:lower16:.LC473
	add	r5, r6, #36
	ldr	r3, [r4]
	movt	r0, #:upper16:.LC473
	mov	r1, r2
	ldr	r3, [r3]
	bl	printk
	b	.L7413
.L7414:
	bl	list_del
	ldr	r3, [r4, #-36]
	cmp	r3, #0
	bne	.L7425
.L7413:
	ldr	r4, [r6, #36]
	cmp	r4, r5
	mov	r0, r4
	sub	r8, r4, #72
	bne	.L7414
	ldr	r3, [r6, #12]
	cmp	r3, #0
	beq	.L7406
	mov	r0, r6
	blx	r3
	b	.L7406
.L7425:
	mov	r1, r8
	mov	r0, r6
	blx	r3
	b	.L7413
.L7427:
	.align	2
.L7426:
	.word	.LANCHOR1+2228
	.word	.LANCHOR3-3672
	.fnend
	.size	android_bind_config, .-android_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_in_max_packet_size_store, %function
conn_gadget_in_max_packet_size_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r3
	bx	lr
	.fnend
	.size	conn_gadget_in_max_packet_size_store, .-conn_gadget_in_max_packet_size_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	_snd_pcm_hw_param_set.constprop.116, %function
_snd_pcm_hw_param_set.constprop.116:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #2
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r4, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #16
	sub	sp, sp, #16
	bgt	.L7430
	lsl	r7, r1, #5
	add	r8, r0, r7
	add	r0, r7, #4
	ldr	r3, [r8, #4]
	add	r0, r4, r0
	cmp	r3, #0
	beq	.L7458
	sub	r1, r3, #1
	tst	r1, r3
	bne	.L7433
	ldr	r3, [r8, #8]
	cmp	r3, #0
	beq	.L7432
.L7433:
	lsl	r9, r5, #3
	and	r3, r2, #31
	mov	r6, #1
	add	r2, r9, r2, lsr #5
	mov	r1, #32
	add	r9, r4, r2, lsl #2
	ldr	r10, [r9, #4]
	and	r10, r10, r6, lsl r3
	bl	__memzero
	str	r10, [r9, #4]
	ldr	r3, [r8, #4]
	cmp	r3, #0
	bne	.L7442
	add	r7, r4, r7
	ldr	r3, [r7, #8]
	cmp	r3, #0
	bne	.L7442
.L7435:
	mvn	r0, #21
.L7434:
	ldr	r1, [r4, #512]
	mov	r3, #1
	ldr	r2, [r4, #516]
	lsl	r5, r3, r5
	orr	r3, r1, r5
	orr	r5, r2, r5
	str	r3, [r4, #512]
	str	r5, [r4, #516]
	b	.L7429
.L7430:
	sub	r0, r1, #8
	cmp	r0, #11
	bhi	.L7441
	ldrb	r3, [sp, #12]	@ zero_extendqisi2
	add	r0, r0, r0, lsl #1
	add	r1, sp, #4
	str	r2, [sp, #4]
	add	r0, r4, r0, lsl #2
	str	r2, [sp, #8]
	and	r3, r3, #244
	add	r0, r0, #260
	orr	r3, r3, #4
	strb	r3, [sp, #12]
	bl	snd_interval_refine
	cmp	r0, #0
	bne	.L7434
.L7437:
	mov	r0, #0
.L7429:
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7458:
	ldr	r3, [r8, #8]
	cmp	r3, #0
	beq	.L7432
	sub	r1, r3, #1
	tst	r1, r3
	bne	.L7433
.L7432:
	lsl	r6, r5, #3
	and	r3, r2, #31
	mov	ip, #1
	add	r2, r6, r2, lsr #5
	mov	r1, #32
	add	r6, r4, r2, lsl #2
	ldr	r9, [r6, #4]
	and	r9, r9, ip, lsl r3
	bl	__memzero
	str	r9, [r6, #4]
	ldr	r3, [r8, #4]
	cmp	r3, #0
	bne	.L7437
	add	r7, r4, r7
	ldr	r3, [r7, #8]
	cmp	r3, #0
	beq	.L7435
	b	.L7437
.L7441:
	mvn	r0, #21
	b	.L7429
.L7442:
	mov	r0, r6
	b	.L7434
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.116, .-_snd_pcm_hw_param_set.constprop.116
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gaudio_open_streams, %function
gaudio_open_streams:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r7, #3688]
	cmp	r4, #0
	beq	.L7498
	movw	r6, #:lower16:kmalloc_caches
	mov	r3, #3
	ldr	r8, [r4, #124]
	movt	r6, #:upper16:kmalloc_caches
	mov	r2, #8000
	ldr	r0, [r6, #40]
	str	r3, [r4, #128]
	mov	r3, #2
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	cmp	r0, #0
	str	r2, [r4, #140]
	beq	.L7484
	mov	r2, #604
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L7499
.L7462:
	mov	r0, r5
	bl	_snd_pcm_hw_params_any
	mov	r1, #0
	ldr	r2, [r4, #128]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.116
	mov	r1, #1
	ldr	r2, [r4, #132]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.116
	mov	r1, #10
	ldr	r2, [r4, #136]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.116
	mov	r1, #11
	ldr	r2, [r4, #140]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.116
	mov	r2, #0
	movw	r1, #16707
	mov	r0, r8
	bl	snd_pcm_kernel_ioctl
	subs	r2, r0, #0
	blt	.L7500
.L7464:
	movw	r1, #16657
	mov	r2, r5
	movt	r1, 49756
	mov	r0, r8
	bl	snd_pcm_kernel_ioctl
	subs	r9, r0, #0
	blt	.L7501
	mov	r2, #0
	mov	r0, r8
	movw	r1, #16704
	bl	snd_pcm_kernel_ioctl
	subs	r2, r0, #0
	blt	.L7502
.L7466:
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L7486
	ldr	r3, [r5, #8]
	cmp	r3, #0
	bne	.L7487
.L7467:
	str	r3, [r4, #128]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L7488
	ldr	r3, [r5, #40]
	cmp	r3, #0
	movne	r1, #32
	bne	.L7469
.L7470:
	str	r3, [r4, #132]
	ldr	r3, [r5, #284]
	mov	r0, r5
	str	r3, [r4, #136]
	ldr	r3, [r5, #296]
	str	r3, [r4, #140]
	bl	kfree
	ldr	r5, [r7, #3688]
	mov	ip, #3
	mov	r1, #2
	ldr	r0, [r6, #40]
	mov	r2, #1
	mov	r3, #8000
	ldr	r7, [r5, #152]
	cmp	r0, #0
	ldr	r8, [r7, #212]
	str	ip, [r5, #156]
	str	r1, [r5, #160]
	strd	r2, [r5, #164]
	beq	.L7503
	mov	r2, #604
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L7504
.L7471:
	mov	r0, r4
	bl	_snd_pcm_hw_params_any
	mov	r1, #0
	ldr	r2, [r5, #156]
	mov	r0, r4
	bl	_snd_pcm_hw_param_set.constprop.116
	mov	r1, #1
	ldr	r2, [r5, #160]
	mov	r0, r4
	bl	_snd_pcm_hw_param_set.constprop.116
	mov	r1, #10
	ldr	r2, [r5, #164]
	mov	r0, r4
	bl	_snd_pcm_hw_param_set.constprop.116
	mov	r1, #11
	ldr	r2, [r5, #168]
	mov	r0, r4
	bl	_snd_pcm_hw_param_set.constprop.116
	mov	r2, #0
	movw	r1, #16707
	mov	r0, r7
	bl	snd_pcm_kernel_ioctl
	subs	r2, r0, #0
	blt	.L7505
.L7474:
	movw	r1, #16657
	mov	r2, r4
	movt	r1, 49756
	mov	r0, r7
	bl	snd_pcm_kernel_ioctl
	subs	r9, r0, #0
	blt	.L7506
	mov	r2, #0
	movw	r1, #16704
	mov	r0, r7
	bl	snd_pcm_kernel_ioctl
	subs	r2, r0, #0
	blt	.L7507
.L7476:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L7491
	ldr	r3, [r4, #8]
	cmp	r3, #0
	bne	.L7492
.L7477:
	str	r3, [r5, #156]
	ldr	r3, [r4, #36]
	cmp	r3, #0
	bne	.L7493
	ldr	r3, [r4, #40]
	cmp	r3, #0
	movne	r1, #32
	bne	.L7479
.L7480:
	str	r3, [r5, #160]
	ldr	r3, [r4, #284]
	str	r3, [r5, #164]
	ldr	r3, [r4, #296]
	str	r3, [r5, #168]
	ldr	r0, [r8, #44]
	bl	snd_pcm_format_physical_width
	str	r0, [r8, #80]
	mov	r0, r4
	bl	kfree
	ldr	r0, [r6, #28]
	cmp	r0, #0
	beq	.L7495
	mov	r2, #104
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L7508
.L7481:
	ldr	r3, [r4, #332]
	mov	r2, #1
	mov	ip, #0
	mvn	lr, #-2147483648
	movw	r1, #16659
	mov	r0, r7
	movt	r1, 49256
	str	ip, [r5]
	str	r2, [r5, #4]
	lsr	r3, r3, r2
	str	r3, [r5, #12]
	str	r3, [r5, #16]
	str	r2, [r5, #20]
	mov	r2, r5
	str	lr, [r5, #24]
	str	ip, [r5, #28]
	str	ip, [r5, #32]
	bl	snd_pcm_kernel_ioctl
	subs	r9, r0, #0
	blt	.L7509
	mov	r0, r5
	bl	kfree
	cmp	r9, #0
	bne	.L7473
	movw	r0, #:lower16:.LC484
	ldr	r1, .L7510
	movt	r0, #:upper16:.LC484
	bl	printk
.L7459:
	mov	r0, r9
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7504:
	movw	r0, #:lower16:.LC479
	ldr	r1, .L7510+4
	mvn	r9, #11
	movt	r0, #:upper16:.LC479
	bl	printk
.L7473:
	movw	r0, #:lower16:.LC483
	mov	r2, r9
	ldr	r1, .L7510
	movt	r0, #:upper16:.LC483
	bl	printk
	b	.L7459
.L7503:
	mov	r4, #16
	b	.L7471
.L7484:
	mov	r5, #16
	b	.L7462
.L7495:
	mov	r5, #16
	b	.L7481
.L7493:
	mov	r1, #0
.L7479:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L7480
.L7488:
	mov	r1, #0
.L7469:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L7470
.L7491:
	mov	r1, #0
.L7478:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L7477
.L7486:
	mov	r1, #0
.L7468:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L7467
.L7492:
	mov	r1, #32
	b	.L7478
.L7487:
	mov	r1, #32
	b	.L7468
.L7499:
	mvn	r9, #11
.L7463:
	movw	r0, #:lower16:.LC478
	mov	r2, r9
	ldr	r1, .L7510
	movt	r0, #:upper16:.LC478
	bl	printk
	b	.L7459
.L7509:
	movw	r0, #:lower16:.LC482
	mov	r2, r9
	ldr	r1, .L7510+4
	movt	r0, #:upper16:.LC482
	bl	printk
	mov	r0, r5
	bl	kfree
	b	.L7473
.L7507:
	movw	r0, #:lower16:.LC480
	ldr	r1, .L7510+4
	movt	r0, #:upper16:.LC480
	bl	printk
	b	.L7476
.L7500:
	movw	r0, #:lower16:.LC475
	ldr	r1, .L7510+8
	movt	r0, #:upper16:.LC475
	bl	printk
	b	.L7464
.L7498:
	ldr	r2, .L7510
	movw	r0, #:lower16:.LC474
	mvn	r9, #18
	movt	r0, #:upper16:.LC474
	mov	r1, r2
	bl	printk
	b	.L7459
.L7506:
	movw	r0, #:lower16:.LC476
	mov	r2, r9
	ldr	r1, .L7510+4
	movt	r0, #:upper16:.LC476
	bl	printk
	mov	r0, r4
	bl	kfree
	b	.L7473
.L7505:
	movw	r0, #:lower16:.LC475
	ldr	r1, .L7510+4
	movt	r0, #:upper16:.LC475
	bl	printk
	b	.L7474
.L7502:
	movw	r0, #:lower16:.LC477
	ldr	r1, .L7510+8
	movt	r0, #:upper16:.LC477
	bl	printk
	b	.L7466
.L7501:
	movw	r0, #:lower16:.LC476
	mov	r2, r9
	ldr	r1, .L7510+8
	movt	r0, #:upper16:.LC476
	bl	printk
	mov	r0, r5
	bl	kfree
	b	.L7463
.L7508:
	movw	r0, #:lower16:.LC481
	ldr	r1, .L7510+4
	mvn	r9, #11
	movt	r0, #:upper16:.LC481
	bl	printk
	b	.L7473
.L7511:
	.align	2
.L7510:
	.word	.LANCHOR3-3640
	.word	.LANCHOR3-3596
	.word	.LANCHOR3-3620
	.fnend
	.size	gaudio_open_streams, .-gaudio_open_streams
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_capture_work, %function
f_audio_capture_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r4, #:lower16:.LANCHOR0
	mov	r5, r0
	movt	r4, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r0, [r4, #1680]
	bl	f_audio_buffer_alloc
	subs	r8, r0, #0
	beq	.L7521
	movw	r6, #:lower16:.LANCHOR1
	ldr	r7, [r5, #-68]
	movt	r6, #:upper16:.LANCHOR1
	ldr	r3, [r8]
	ldrb	r2, [r6, #2224]	@ zero_extendqisi2
	ldr	r9, [r4, #1680]
	ldr	fp, [r7, #212]
	str	r3, [sp, #8]
	cmp	r2, #0
	beq	.L7522
.L7514:
	lsl	r3, r9, #3
	mov	r4, #57344
	movt	r4, 65535
	movw	r9, #:lower16:.LC488
	str	r3, [sp, #12]
	mov	r3, sp
	movt	r9, #:upper16:.LC488
	and	r10, r3, r4
.L7519:
	ldr	r3, [fp, #160]
	mov	r2, #146
	movw	r1, #16704
	mov	r0, r7
	ldr	r3, [r3]
	cmp	r3, #7
	mvn	r2, r2, lsr r3
	bhi	.L7517
	ands	r2, r2, #1
	bne	.L7517
	bl	snd_pcm_kernel_ioctl
	cmp	r0, #0
	blt	.L7523
.L7517:
	mov	r2, #0
	ldr	r0, [r10, #8]
	ldr	r3, [fp, #80]
	str	r2, [r10, #8]
	ldr	r1, [sp, #8]
	ldr	r2, [sp, #12]
	str	r0, [sp, #4]
	mov	r0, r7
	udiv	r6, r2, r3
	mov	r2, r6
	bl	snd_pcm_lib_read
	cmp	r6, r0
	bne	.L7524
	mov	r3, sp
	and	r4, r4, r3
	ldr	r3, [sp, #4]
	str	r3, [r4, #8]
.L7516:
	sub	r4, r5, #8
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	ldr	r1, [r5, #20]
	add	r0, r8, #8
	add	r2, r5, #16
	bl	__list_add
	mov	r1, r6
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L7522:
	bl	gaudio_open_streams
	subs	r2, r0, #0
	moveq	r2, #1
	strbeq	r2, [r6, #2224]
	beq	.L7514
	movw	r0, #:lower16:.LC486
	ldr	r1, .L7525
	movt	r0, #:upper16:.LC486
	bl	printk
	b	.L7516
.L7521:
	ldr	r2, .L7525+4
	movw	r0, #:lower16:.LC485
	movt	r0, #:upper16:.LC485
	mov	r1, r2
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L7524:
	mov	r2, r0
	ldr	r1, .L7525
	mov	r0, r9
	bl	printk
	ldr	r3, [sp, #4]
	str	r3, [r10, #8]
	b	.L7519
.L7523:
	ldr	r4, .L7525+8
	mov	r2, r0
	movw	r0, #:lower16:.LC480
	movt	r0, #:upper16:.LC480
	sub	r1, r4, #12
	bl	printk
	movw	r0, #:lower16:.LC487
	sub	r1, r4, #36
	movt	r0, #:upper16:.LC487
	bl	printk
	b	.L7516
.L7526:
	.align	2
.L7525:
	.word	.LANCHOR3-3548
	.word	.LANCHOR3-3572
	.word	.LANCHOR3-3536
	.fnend
	.size	f_audio_capture_work, .-f_audio_capture_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_function_init, %function
mbim_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r0, #:lower16:.LC489
	mov	r2, #1
	strd	r6, [sp, #8]
	ldr	r7, .L7538
	movt	r0, #:upper16:.LC489
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	sub	r5, r7, #12
	mov	r1, r5
	bl	printk
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L7532
	mov	r2, #236
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L7537
.L7528:
	movw	r5, #:lower16:.LANCHOR1
	mov	r6, #0
	ldr	r2, .L7538+4
	add	ip, r4, #208
	add	r3, r4, #216
	movt	r5, #:upper16:.LANCHOR1
	movw	r1, #:lower16:.LC251
	strb	r6, [r4, #136]
	add	r0, r4, #108
	movt	r1, #:upper16:.LC251
	str	r6, [r4, #204]
	str	ip, [r4, #208]
	str	ip, [r4, #212]
	str	r3, [r4, #216]
	str	r3, [r4, #220]
	str	r4, [r5, #3552]
	str	r6, [r5, #3556]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC252
	add	r0, r4, #120
	ldr	r2, .L7538+4
	movt	r1, #:upper16:.LC252
	bl	__init_waitqueue_head
	ldr	r3, [r5, #3548]
	str	r6, [r4, #92]
	str	r6, [r4, #96]
	ldr	r0, .L7538+8
	str	r6, [r4, #100]
	str	r6, [r4, #104]
	add	r3, r3, #1
	str	r4, [r5, #2592]
	str	r3, [r5, #3548]
	bl	misc_register
	subs	r4, r0, #0
	beq	.L7530
	movw	r0, #:lower16:.LC491
	sub	r1, r7, #12
	movt	r0, #:upper16:.LC491
	bl	printk
.L7529:
	movw	r0, #:lower16:.LC493
	sub	r1, r7, #12
	movt	r0, #:upper16:.LC493
	bl	printk
	ldr	r3, [r5, #3548]
	cmp	r3, #0
	beq	.L7527
	ldr	r0, [r5, #3552]
	bl	kfree
	mov	r3, #0
	str	r3, [r5, #3552]
.L7527:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7532:
	mov	r4, #16
	b	.L7528
.L7530:
	movw	r0, #:lower16:.LC492
	sub	r1, r7, #12
	ldr	r2, [r5, #3548]
	movt	r0, #:upper16:.LC492
	bl	printk
	b	.L7527
.L7537:
	movw	r0, #:lower16:.LC490
	mov	r1, r5
	movt	r0, #:upper16:.LC490
	movw	r5, #:lower16:.LANCHOR1
	bl	printk
	movt	r5, #:upper16:.LANCHOR1
	mvn	r4, #11
	b	.L7529
.L7539:
	.align	2
.L7538:
	.word	.LANCHOR3-3520
	.word	.LANCHOR1+3692
	.word	.LANCHOR0+876
	.fnend
	.size	mbim_function_init, .-mbim_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	defer_kevent.constprop.118, %function
defer_kevent.constprop.118:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	mov	r0, #0
	add	r1, r4, #120
	str	lr, [sp, #4]
	bl	_test_and_set_bit
	cmp	r0, #0
	beq	.L7545
.L7540:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L7545:
	movw	r3, #:lower16:system_wq
	add	r2, r4, #88
	movt	r3, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r3]
	bl	queue_work_on
	subs	r2, r0, #0
	bne	.L7540
	movw	r0, #:lower16:.LC494
	ldr	r1, [r4, #8]
	ldr	r4, [sp]
	movt	r0, #:upper16:.LC494
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk
	.fnend
	.size	defer_kevent.constprop.118, .-defer_kevent.constprop.118
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rx_complete, %function
rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	add	r7, r1, #36
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0]
	ldr	r3, [r1, #44]
	ldr	r6, [r1, #32]
	add	r8, r4, #28
	add	r5, r4, #16
	cmn	r3, #103
	beq	.L7548
	ble	.L7570
	cmn	r3, #75
	beq	.L7551
	cmp	r3, #0
	bne	.L7547
	mov	r0, r6
	ldr	r1, [r1, #48]
	bl	skb_put
	ldr	r3, [r4, #84]
	cmp	r3, #0
	beq	.L7553
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	ldr	r0, [r4, #4]
	cmp	r0, #0
	beq	.L7554
	mov	r1, r6
	add	r2, r4, #52
	ldr	r3, [r4, #84]
	blx	r3
	cmn	r0, #22
	mov	r6, r0
	beq	.L7571
	cmn	r0, #75
	beq	.L7572
	mov	r1, r9
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L7558
	b	.L7556
.L7551:
	ldr	r2, [r4, #8]
	ldr	r3, [r2, #276]
	add	r3, r3, #1
	str	r3, [r2, #276]
.L7547:
	mov	r0, r6
	bl	dev_kfree_skb_any
	ldr	r2, [r4, #8]
	ldr	r3, [r2, #248]
	add	r3, r3, #1
	str	r3, [r2, #248]
.L7558:
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r1, r8
	ldr	r2, [r4, #28]
	mov	r0, r7
	bl	__list_add
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #104
	ldrd	r4, [sp]
	movt	r3, #:upper16:.LANCHOR1
	ldrd	r6, [sp, #8]
	mov	r0, #4
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, [r3, #2624]
	b	queue_work_on
.L7570:
	cmn	r3, #108
	beq	.L7550
	cmn	r3, #104
	bne	.L7547
.L7550:
	mov	r0, r6
	bl	dev_kfree_skb_any
.L7556:
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r0, r7
	mov	r1, r8
	ldr	r2, [r4, #28]
	bl	__list_add
	ldrd	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock
.L7548:
	mov	r0, r4
	bl	defer_kevent.constprop.118
	b	.L7550
.L7553:
	mov	r1, r6
	add	r0, r4, #52
	bl	skb_queue_tail
	b	.L7558
.L7571:
	ldr	r2, [r4, #8]
	mov	r1, r9
	mov	r0, r4
	ldr	r3, [r2, #248]
	add	r3, r3, #1
	str	r3, [r2, #248]
	bl	_raw_spin_unlock_irqrestore
	b	.L7556
.L7572:
	ldr	r2, [r4, #8]
	mov	r1, r9
	mov	r0, r4
	ldr	r3, [r2, #276]
	add	r3, r3, #1
	str	r3, [r2, #276]
	bl	_raw_spin_unlock_irqrestore
	b	.L7556
.L7554:
	mov	r0, r6
	bl	dev_kfree_skb_any
	mov	r1, r9
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	b	.L7556
	.fnend
	.size	rx_complete, .-rx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rx_fill, %function
rx_fill:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	add	r3, r0, #28
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, r3
	strd	r8, [sp, #16]
	add	r9, r0, #16
	strd	r10, [sp, #24]
	mov	r0, r9
	mov	r10, r1
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	str	r3, [sp, #8]
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r6, #28]
	mov	r4, r0
	cmp	r7, r5
	beq	.L7574
	movw	r3, #:lower16:.LANCHOR0
	mov	r8, #0
	movt	r3, #:upper16:.LANCHOR0
	mov	fp, r10
	str	r3, [sp, #12]
	b	.L7586
.L7606:
	ldr	r3, [r3, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L7588
	ldr	r3, [sp, #12]
	ldr	r3, [r3, #496]
	lsl	r3, r3, #1
	cmp	r3, r8
	blt	.L7574
.L7607:
	mov	r0, r5
	sub	r10, r5, #36
	bl	__list_del_entry
	mov	r1, r4
	mov	r0, r9
	str	r5, [r5]
	str	r5, [r5, #4]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L7602
	ldr	r7, [r3, #92]
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L7577
	ldmib	r6, {r2, ip}
	ldrh	r3, [r7, #20]
	ldr	r1, [r6, #72]
	ldr	r0, [r2, #100]
	ldr	r4, [ip, #356]
	cmp	r1, #0
	add	r4, r4, r0
	add	r4, r4, #33
	add	r4, r4, r3
	udiv	r0, r4, r3
	mls	r3, r3, r0, r4
	sub	r4, r4, r3
	ldrb	r3, [r2, #104]	@ zero_extendqisi2
	mulne	r4, r1, r4
	cmp	r3, #0
	beq	.L7580
	ldr	r3, [r2, #108]
	cmp	r4, r3
	movcc	r4, r3
.L7580:
	mvn	r3, #0
	mov	r2, #0
	mov	r1, fp
	add	r0, r4, #2
	bl	__alloc_skb
	subs	r3, r0, #0
	beq	.L7603
	ldr	lr, [r3, #160]
	mov	r1, r10
	mov	r0, r7
	ldr	ip, [r3, #172]
	mov	r2, fp
	str	r3, [sp, #4]
	add	lr, lr, #2
	add	ip, ip, #2
	str	lr, [r3, #160]
	str	ip, [r3, #172]
	str	ip, [r5, #-36]
	str	r4, [r5, #-32]
	str	r3, [r5, #-4]
	ldr	ip, [r7, #8]
	ldr	r4, [ip, #16]
	blx	r4
	cmn	r0, #12
	mov	r4, r0
	ldr	r3, [sp, #4]
	beq	.L7604
	cmp	r0, #0
	bne	.L7605
.L7585:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #8]
	mov	r4, r0
	ldr	r5, [r6, #28]
	cmp	r5, r3
	beq	.L7574
.L7586:
	ldr	r3, [r6, #12]
	add	r8, r8, #1
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bhi	.L7606
.L7588:
	mov	r3, #2
	cmp	r3, r8
	bge	.L7607
.L7574:
	mov	r1, r4
	mov	r0, r9
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L7604:
.L7583:
	mov	fp, r3
	mov	r0, r6
	bl	defer_kevent.constprop.118
	mov	r0, fp
	bl	dev_kfree_skb_any
.L7577:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r4, r0
	ldr	r2, [r6, #28]
	mov	r0, r5
	ldr	r1, [sp, #8]
	bl	__list_add
	mov	r0, r9
	mov	r1, r4
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	defer_kevent.constprop.118
.L7602:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L7577
.L7605:
	mov	r0, r3
	bl	dev_kfree_skb_any
	cmp	r4, #0
	bge	.L7585
	b	.L7577
.L7603:
	mov	r0, r6
	bl	defer_kevent.constprop.118
	b	.L7577
	.fnend
	.size	rx_fill, .-rx_fill
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_start, %function
eth_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	bl	rx_fill
	ldr	r2, [r4, #8]
	mov	r3, #0
	mov	r0, r3
	str	r3, [r4, #36]
	ldr	r4, [r2, #576]
	add	r1, r4, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	bne	.L7611
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L7611:
	ldr	r0, [r4, #4]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	__netif_schedule
	.fnend
	.size	eth_start, .-eth_start
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_open, %function
eth_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	add	r5, r0, #1152
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #1160]
	ldr	r3, [r3, #164]
	tst	r3, #4
	beq	.L7622
.L7613:
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r0, [r4, #1156]
	cmp	r0, #0
	beq	.L7614
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L7614
	blx	r3
.L7614:
	mov	r0, r5
	bl	_raw_spin_unlock_irq
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7622:
	mov	r1, #208
	mov	r0, r5
	bl	eth_start
	b	.L7613
	.fnend
	.size	eth_open, .-eth_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_work, %function
eth_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r0, #0
	add	r1, r4, #32
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L7624
	ldr	r3, [r4, #-80]
	ldr	r3, [r3, #164]
	tst	r3, #1
	bne	.L7633
.L7624:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7633:
	sub	r5, r4, #88
	ldr	r6, [sp, #8]
	mov	r1, #208
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	rx_fill
	.fnend
	.size	eth_work, .-eth_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	process_rx_w, %function
process_rx_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-100]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	ldr	r7, .L7661
	mov	r6, #0
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LC495
	sub	r9, r0, #52
	strd	r10, [sp, #24]
	movw	r10, #:lower16:.LC498
	movt	r8, #:upper16:.LC495
	str	lr, [sp, #32]
	movt	r10, #:upper16:.LC498
	.pad #4
	sub	sp, sp, #4
.L7637:
	mov	r0, r9
	bl	skb_dequeue
	subs	r5, r0, #0
	beq	.L7659
.L7646:
	cmp	r6, #0
	blt	.L7638
	ldr	fp, [r5, #80]
	cmp	fp, #13
	bls	.L7639
	movw	r3, #1514
	cmp	fp, r3
	bls	.L7641
	ldr	r3, [r4, #-100]
	mov	r1, r8
	ldr	r0, [r3]
	bl	strcmp
	cmp	r0, #0
	bne	.L7643
	ldr	r3, [r4, #-96]
	ldr	r3, [r3, #356]
	add	r3, r3, #14
	cmp	fp, r3
	bls	.L7644
.L7642:
	movw	r0, #:lower16:.LC496
	mov	r2, fp
	movt	r0, #:upper16:.LC496
	mov	r1, r7
	bl	printk
.L7643:
	ldr	r2, [r4, #-96]
	mov	r1, r7
	mov	r0, r10
	ldr	r3, [r2, #248]
	add	r3, r3, #1
	str	r3, [r2, #248]
	ldr	r2, [r4, #-96]
	ldr	r3, [r2, #272]
	add	r3, r3, #1
	str	r3, [r2, #272]
	ldr	r2, [r5, #80]
	bl	printk
	mov	r0, r5
	bl	dev_kfree_skb_any
	mov	r0, r9
	bl	skb_dequeue
	subs	r5, r0, #0
	bne	.L7646
.L7659:
	ldr	r3, [r4, #-96]
	ldr	r3, [r3, #164]
	tst	r3, #1
	bne	.L7660
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7644:
	movw	r0, #:lower16:.LC497
	mov	r2, fp
	movt	r0, #:upper16:.LC497
	mov	r1, r7
	bl	printk
.L7641:
	ldr	r1, [r4, #-96]
	mov	r0, r5
	bl	eth_type_trans
	strh	r0, [r5, #102]	@ movhi
	ldr	r2, [r4, #-96]
	mov	r0, r5
	ldr	r3, [r2, #232]
	add	r3, r3, #1
	str	r3, [r2, #232]
	ldr	r2, [r4, #-96]
	ldr	r1, [r5, #80]
	ldr	r3, [r2, #240]
	add	r3, r3, r1
	str	r3, [r2, #240]
	bl	netif_rx_ni
	mov	r6, r0
	b	.L7637
.L7638:
	ldr	r3, [r4, #-100]
	mov	r1, r8
	ldr	r0, [r3]
	bl	strcmp
	cmp	r0, #0
	ldreq	fp, [r5, #80]
	bne	.L7643
	b	.L7642
.L7639:
	ldr	r3, [r4, #-100]
	mov	r1, r8
	ldr	r0, [r3]
	bl	strcmp
	cmp	r0, #0
	beq	.L7642
	b	.L7643
.L7660:
	sub	r0, r4, #104
	mov	r1, #208
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	rx_fill
.L7662:
	.align	2
.L7661:
	.word	.LANCHOR3-3520
	.fnend
	.size	process_rx_w, .-process_rx_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gen_ndis_query_resp.constprop.122, %function
gen_ndis_query_resp.constprop.122:
	.fnstart
	@ args = 0, pretend = 0, frame = 184
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	subs	r7, r1, #0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #184
	sub	sp, sp, #184
	beq	.L7707
	ldr	r5, [r7, #8]
	cmp	r5, #0
	beq	.L7707
	mov	r3, #16
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	mov	r4, r0
	str	r3, [r5, #20]
	mov	r1, sp
	ldr	r0, [r6, #3652]
	bl	dev_get_stats
	movw	r3, #278
	add	r8, r5, #24
	movt	r3, 1
	cmp	r4, r3
	beq	.L7697
	bls	.L7729
	movw	r3, #257
	movt	r3, 257
	cmp	r4, r3
	beq	.L7722
	bls	.L7730
	movw	r3, #261
	movt	r3, 257
	cmp	r4, r3
	beq	.L7700
	bhi	.L7695
	movw	r3, #259
	movt	r3, 257
	cmp	r4, r3
	beq	.L7696
	bls	.L7722
.L7697:
	mov	r2, #1
	mov	r3, #28
	mov	r6, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7702
.L7729:
	movw	r3, #266
	movt	r3, 1
	cmp	r4, r3
	beq	.L7721
	bls	.L7731
	movw	r3, #270
	movt	r3, 1
	cmp	r4, r3
	beq	.L7677
	bhi	.L7678
	mov	r3, #268
	movt	r3, 1
	cmp	r4, r3
	beq	.L7679
	bls	.L7721
	ldr	r6, [r6, #3664]
	cmp	r6, #0
	beq	.L7705
	mov	r0, r6
	bl	strlen
	mov	r4, r0
	mov	r2, r0
	mov	r1, r6
	mov	r0, r8
	bl	memcpy
	mov	r6, #0
	add	r3, r4, #24
	b	.L7702
.L7731:
	movw	r3, #259
	movt	r3, 1
	cmp	r4, r3
	beq	.L7676
	bls	.L7732
	movw	r3, #262
	movt	r3, 1
	cmp	r4, r3
	beq	.L7674
	movw	r3, #263
	movt	r3, 1
	cmp	r4, r3
	bne	.L7733
	ldr	r3, [r6, #3640]
	cmp	r3, #1
	beq	.L7700
	ldr	r2, [r6, #3636]
	mov	r3, #28
	mov	r4, #4
	mov	r6, #0
	str	r2, [r5, #24]
	b	.L7702
.L7730:
	movw	r3, #258
	movt	r3, 2
	cmp	r4, r3
	beq	.L7687
	bls	.L7734
	mov	r3, #260
	movt	r3, 2
	cmp	r4, r3
	beq	.L7691
	bcc	.L7692
	movw	r3, #261
	movt	r3, 2
	cmp	r4, r3
	bne	.L7665
	cmp	r0, #0
	beq	.L7719
	ldr	r2, [r0, #48]
	mov	r3, #28
	mov	r6, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7702
.L7695:
	movw	r3, #258
	movt	r3, 258
	cmp	r4, r3
	beq	.L7700
	movw	r3, #259
	movt	r3, 258
	cmp	r4, r3
	bne	.L7735
.L7700:
	mov	r2, #0
	mov	r3, #28
	mov	r6, r2
	mov	r4, #4
	str	r2, [r5, #24]
.L7702:
	str	r4, [r5, #16]
	str	r3, [r7, #12]
	str	r3, [r5, #4]
.L7663:
	mov	r0, r6
	add	sp, sp, #184
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7678:
	movw	r3, #275
	movt	r3, 1
	cmp	r4, r3
	beq	.L7682
	mov	r3, #276
	movt	r3, 1
	cmp	r4, r3
	beq	.L7683
	movw	r3, #273
	movt	r3, 1
	cmp	r4, r3
	beq	.L7684
.L7665:
	movw	r0, #:lower16:.LC499
	mov	r2, r4
	ldr	r1, .L7738
	movt	r0, #:upper16:.LC499
	movw	r6, #65012
	bl	printk
	mov	r4, #0
	mov	r3, #24
	movt	r6, 65535
	b	.L7702
.L7733:
	mov	r3, #260
	movt	r3, 1
	cmp	r4, r3
	bne	.L7665
.L7676:
	ldr	r2, [r6, #3632]
	mov	r3, #28
	mov	r4, #4
	mov	r6, #0
	str	r2, [r5, #24]
	b	.L7702
.L7721:
	ldr	r0, [r6, #3652]
	cmp	r0, #0
	beq	.L7719
	ldr	r2, [r0, #356]
	mov	r3, #28
	mov	r6, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7702
.L7722:
	ldr	r0, [r6, #3652]
	cmp	r0, #0
	beq	.L7719
	ldr	r2, [r6, #3644]
	mov	r3, #30
	mov	r4, #6
	mov	r6, #0
	ldr	r0, [r2]	@ unaligned
	str	r0, [r5, #24]	@ unaligned
	ldrh	r2, [r2, #4]	@ unaligned
	strh	r2, [r8, #4]	@ unaligned
	b	.L7702
.L7719:
	movw	r6, #65012
	mov	r4, r0
	movt	r6, 65535
	mov	r3, #24
	b	.L7702
.L7734:
	movw	r3, #514
	movt	r3, 1
	cmp	r4, r3
	beq	.L7700
	movw	r3, #257
	movt	r3, 2
	cmp	r4, r3
	bne	.L7665
	cmp	r0, #0
	beq	.L7719
	ldr	r2, [r0, #8]
	mov	r3, #28
	ldr	ip, [r0, #40]
	ldr	r0, [r0, #56]
	b	.L7725
.L7732:
	movw	r3, #257
	movt	r3, 1
	cmp	r4, r3
	bne	.L7736
	ldr	r2, .L7738+4
	add	r3, r5, #20
	add	r1, r5, #132
	b	.L7703
.L7737:
	ldr	r4, [r2, #4]!
.L7703:
	str	r4, [r3, #4]!
	cmp	r1, r3
	bne	.L7737
	mov	r3, #136
	mov	r6, #0
	mov	r4, #112
	b	.L7702
.L7687:
	cmp	r0, #0
	beq	.L7719
	ldr	r2, [r0]
	mov	r3, #28
	ldr	ip, [r0, #32]
	ldr	r0, [r0, #48]
.L7725:
	sub	r2, r2, ip
	mov	r6, #0
	sub	r2, r2, r0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7702
.L7735:
	movw	r3, #257
	movt	r3, 258
	cmp	r4, r3
	bne	.L7665
	cmp	r0, #0
	beq	.L7719
	ldr	r2, [r0, #104]
	mov	r3, #28
	mov	r6, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7702
.L7692:
	cmp	r0, #0
	beq	.L7719
	ldr	r2, [r0, #40]
	mov	r3, #28
	mov	r6, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7702
.L7736:
	movw	r3, #258
	movt	r3, 1
	cmp	r4, r3
	beq	.L7700
	b	.L7665
.L7683:
	ldr	r2, [r6, #3640]
	mov	r3, #28
	mov	r4, #4
	mov	r6, #0
	str	r2, [r5, #24]
	b	.L7702
.L7684:
	movw	r2, #1558
	mov	r3, #28
	mov	r6, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7702
.L7682:
	mov	r2, #18
	mov	r3, #28
	mov	r6, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7702
.L7679:
	ldr	r2, [r6, #3656]
	mov	r3, #28
	mov	r4, #4
	mov	r6, #0
	str	r2, [r5, #24]
	b	.L7702
.L7696:
	mov	r2, #-536870912
	mov	r3, #28
	mov	r6, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7702
.L7674:
	ldr	r3, [r6, #3652]
	cmp	r3, #0
	beq	.L7715
	ldr	r2, [r3, #356]
	mov	r6, #0
	mov	r4, #4
	mov	r3, #28
	str	r2, [r5, #24]
	b	.L7702
.L7677:
	ldr	r2, [r6, #3648]
	mov	r3, #28
	mov	r4, #4
	mov	r6, #0
	ldrh	r2, [r2]
	str	r2, [r5, #24]
	b	.L7702
.L7691:
	cmp	r0, #0
	beq	.L7715
	ldr	r2, [r0, #32]
	mov	r3, #28
	mov	r6, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7702
.L7707:
	mvn	r6, #11
	b	.L7663
.L7715:
	movw	r6, #65012
	mov	r3, #24
	movt	r6, 65535
	mov	r4, #0
	b	.L7702
.L7705:
	mov	r3, #28
	mov	r4, #4
	str	r6, [r5, #24]
	b	.L7702
.L7739:
	.align	2
.L7738:
	.word	.LANCHOR3-3392
	.word	.LANCHOR3-3504
	.fnend
	.size	gen_ndis_query_resp.constprop.122, .-gen_ndis_query_resp.constprop.122
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_init, %function
ccid_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L7746
	mov	r2, #204
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L7749
.L7741:
	add	ip, r4, #120
	mov	r0, #0
	ldr	r2, .L7751
	movw	r3, #:lower16:.LANCHOR1
	movw	r1, #:lower16:.LC262
	movt	r3, #:upper16:.LANCHOR1
	movt	r1, #:upper16:.LC262
	str	r0, [r4, #92]
	str	ip, [r4, #120]
	add	r0, r4, #128
	str	ip, [r4, #124]
	str	r4, [r3, #2220]
	bl	__init_waitqueue_head
	ldr	r0, .L7751+4
	bl	misc_register
	subs	r5, r0, #0
	bne	.L7743
	movw	r1, #:lower16:.LC500
	ldr	r2, .L7751
	add	r0, r4, #160
	movt	r1, #:upper16:.LC500
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC501
	ldr	r2, .L7751
	add	r0, r4, #172
	movt	r1, #:upper16:.LC501
	bl	__init_waitqueue_head
	add	r3, r4, #192
	ldr	r0, .L7751+8
	str	r3, [r4, #192]
	str	r3, [r4, #196]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L7750
.L7740:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7746:
	mov	r4, #16
	b	.L7741
.L7749:
	mvn	r5, #11
	b	.L7740
.L7750:
	ldr	r6, .L7751+12
	movw	r0, #:lower16:.LC264
	movt	r0, #:upper16:.LC264
	sub	r1, r6, #8
	bl	printk
	movw	r0, #:lower16:.LC503
	mov	r2, r5
	sub	r1, r6, #20
	movt	r0, #:upper16:.LC503
	bl	printk
	ldr	r0, .L7751+4
	bl	misc_deregister
.L7745:
	mov	r0, r4
	bl	kfree
	movw	r0, #:lower16:.LC504
	movt	r0, #:upper16:.LC504
	bl	printk
	b	.L7740
.L7743:
	ldr	r6, .L7751+16
	movw	r0, #:lower16:.LC264
	movt	r0, #:upper16:.LC264
	sub	r1, r6, #12
	bl	printk
	movw	r0, #:lower16:.LC502
	mov	r2, r5
	add	r1, r6, #12
	movt	r0, #:upper16:.LC502
	bl	printk
	b	.L7745
.L7752:
	.align	2
.L7751:
	.word	.LANCHOR1+3692
	.word	.LANCHOR0+840
	.word	.LANCHOR0+804
	.word	.LANCHOR3-3328
	.word	.LANCHOR3-3360
	.fnend
	.size	ccid_function_init, .-ccid_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_notify_serial_state, %function
acm_notify_serial_state:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r5, #:lower16:__stack_chk_guard
	movt	r5, #:upper16:__stack_chk_guard
	strd	r6, [sp, #8]
	add	r7, r0, #148
	ldr	r3, [r5]
	strd	r8, [sp, #16]
	mov	r6, r0
	str	r10, [sp, #24]
	mov	r0, r7
	str	lr, [sp, #28]
	.pad #16
	sub	sp, sp, #16
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	ldr	r0, [r6, #156]
	cmp	r0, #0
	moveq	r3, #1
	moveq	r4, r0
	strbeq	r3, [r6, #147]
	bne	.L7759
.L7756:
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [sp, #12]
	mov	r0, r4
	ldr	r3, [r5]
	cmp	r2, r3
	bne	.L7760
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7759:
	movw	r0, #:lower16:.LC505
	ldrh	r2, [r6, #170]
	mov	r4, #32
	ldrb	r1, [r6, #146]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC505
	bl	printk
	add	r0, sp, #2
	mov	r1, #10
	ldr	r10, [r6, #152]
	bl	__memzero
	ldr	r9, [r6, #156]
	mov	r2, #0
	mov	r0, #10
	mvn	r1, #94
	mov	ip, #2
	strb	r2, [r6, #147]
	str	r2, [r6, #156]
	ldr	r3, [r9]
	str	r0, [r9, #4]
	mov	r0, r7
	strb	r1, [r3]
	strb	r4, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	ldrb	r1, [r6, #144]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	r2, [r3, #7]
	ldrh	ip, [r6, #170]	@ unaligned
	ldr	r1, [sp, #6]	@ unaligned
	strh	ip, [sp, #2]	@ movhi
	ldr	ip, [sp, #2]	@ unaligned
	str	ip, [r3, #8]	@ unaligned
	str	r1, [r3, #12]	@ unaligned
	ldrh	r1, [sp, #10]	@ unaligned
	strh	r1, [r3, #16]	@ unaligned
	ldrh	r2, [r6, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock
	ldr	r3, [r10, #8]
	mov	r2, r4
	mov	r1, r9
	mov	r0, r10
	ldr	r3, [r3, #16]
	blx	r3
	mov	r4, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	r4, #0
	bge	.L7756
	ldr	r0, [r6, #20]
	movw	r1, #:lower16:.LC506
	mov	r3, r4
	movt	r1, #:upper16:.LC506
	ldrb	r2, [r6, #146]	@ zero_extendqisi2
	ldr	r0, [r0, #24]
	ldr	r0, [r0]
	add	r0, r0, #32
	bl	dev_err
	str	r9, [r6, #156]
	b	.L7756
.L7760:
	bl	__stack_chk_fail
	.fnend
	.size	acm_notify_serial_state, .-acm_notify_serial_state
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_cdc_notify_complete, %function
acm_cdc_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	add	r6, r4, #148
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #44]
	mov	r1, r0
	cmn	r3, #108
	beq	.L7765
	ldrb	r7, [r4, #147]	@ zero_extendqisi2
	mov	r0, r6
	str	r5, [r4, #156]
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L7761
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	acm_notify_serial_state
.L7761:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7765:
	str	r5, [r4, #156]
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	acm_cdc_notify_complete, .-acm_cdc_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_send_break, %function
acm_send_break:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrh	r3, [r0, #170]
	cmp	r1, #0
	bic	r3, r3, #4
	uxth	r3, r3
	orrne	r3, r3, #4
	strh	r3, [r0, #170]	@ movhi
	b	acm_notify_serial_state
	.fnend
	.size	acm_send_break, .-acm_send_break
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_disconnect, %function
acm_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrh	r3, [r0, #170]
	bic	r3, r3, #3
	strh	r3, [r0, #170]	@ movhi
	b	acm_notify_serial_state
	.fnend
	.size	acm_disconnect, .-acm_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_connect, %function
acm_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrh	r3, [r0, #170]
	orr	r3, r3, #3
	strh	r3, [r0, #170]	@ movhi
	b	acm_notify_serial_state
	.fnend
	.size	acm_connect, .-acm_connect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_ioctl, %function
modem_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #21249
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	movt	r3, 16388
	str	lr, [sp, #4]
	cmp	r1, r3
	bne	.L7781
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3692]
	cmp	r0, #0
	beq	.L7773
	strh	r2, [r0, #170]	@ movhi
	bl	acm_notify_serial_state
	mov	r0, #0
.L7773:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L7781:
	movw	r3, #21251
	movt	r3, 16388
	cmp	r1, r3
	bne	.L7782
	movw	r0, #:lower16:.LC507
	mov	r1, r2
	movt	r0, #:upper16:.LC507
	bl	printk
	movw	ip, #:lower16:.LANCHOR1
	mov	r3, #1
	movt	ip, #:upper16:.LANCHOR1
	mov	r2, r3
	add	r0, ip, #2208
	mov	r1, r3
	str	r3, [ip, #2204]
	mov	r3, #0
	str	r4, [ip, #2696]
	bl	__wake_up
	mov	r0, #0
	b	.L7773
.L7782:
	movw	r0, #:lower16:.LC508
	movt	r0, #:upper16:.LC508
	bl	printk
	movw	r0, #65021
	movt	r0, 65535
	b	.L7773
	.fnend
	.size	modem_ioctl, .-modem_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_send_controlbits_tomodem, %function
ghsuart_send_controlbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	ip, [r3, #1860]
	cmp	r0, #0
	cmpne	r1, ip
	movcs	r5, #1
	movcc	r5, #0
	bcs	.L7802
	mov	r0, #84
	mla	r1, r0, r1, r3
	ldr	r4, [r1, #2036]
	cmp	r4, #0
	beq	.L7803
	ldr	r3, [r4, #196]
	cmp	r3, r2
	beq	.L7783
	ldr	r3, [r4, #188]
	str	r2, [r4, #196]
	tst	r3, #4
	beq	.L7783
	tst	r2, #1
	bne	.L7804
.L7783:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7804:
	add	r7, r4, #20
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #24]
	mov	r1, r0
	str	r5, [r4, #200]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L7783
	ldr	r3, [r6, #136]
	cmp	r3, #0
	beq	.L7783
	mov	r1, r5
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3
.L7802:
	movw	r0, #:lower16:.LC17
	mov	r2, r1
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC17
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L7805
	b	printk
.L7803:
	movw	r0, #:lower16:.LC12
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC12
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L7805
	b	printk
.L7806:
	.align	2
.L7805:
	.word	.LANCHOR3-3312
	.fnend
	.size	ghsuart_send_controlbits_tomodem, .-ghsuart_send_controlbits_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_alloc_requests.constprop.133, %function
gbam_alloc_requests.constprop.133:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	subs	r8, r2, #0
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ble	.L7808
	mov	r9, r3
	mov	r5, r1
	mov	r6, r0
	mov	r4, #0
	b	.L7811
.L7809:
	str	r9, [ip, #28]
	ldr	r2, [r5]
	bl	__list_add
	cmp	r4, r8
	beq	.L7808
.L7811:
	ldr	ip, [r6, #8]
	mov	r1, #32
	mov	r0, r6
	add	r4, r4, #1
	ldr	r7, [ip, #8]
	blx	r7
	subs	ip, r0, #0
	mov	r1, r5
	add	r0, ip, #36
	bne	.L7809
	ldr	r3, [r5]
	cmp	r5, r3
	beq	.L7812
.L7808:
	mov	r0, #0
.L7807:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7812:
	mvn	r0, #11
	b	.L7807
	.fnend
	.size	gbam_alloc_requests.constprop.133, .-gbam_alloc_requests.constprop.133
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_connect_work, %function
gbam_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r5, r0, #280
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #276
	mov	r0, r5
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r4, #-272]
	mov	r0, r6
	cmp	r3, #0
	beq	.L7827
	bl	_raw_spin_unlock
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-264]
	tst	r3, #4
	bne	.L7828
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7828:
	sub	r8, r4, #284
	movw	r2, #:lower16:gbam_notify
	ldr	r0, [r4, #-260]
	mov	r1, r8
	movt	r2, #:upper16:gbam_notify
	bl	msm_bam_dmux_open
	subs	r3, r0, #0
	bne	.L7829
	sub	r1, r4, #264
	mov	r0, #1
	bl	_set_bit
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-272]
	mov	r9, r0
	cmp	r3, #0
	beq	.L7825
	ldr	fp, [r3, #88]
	movw	r7, #:lower16:.LANCHOR0
	sub	r10, r4, #232
	movt	r7, #:upper16:.LANCHOR0
	movw	r3, #:lower16:gbam_epout_complete
	mov	r1, r10
	ldr	r2, [r7, #1684]
	movt	r3, #:upper16:gbam_epout_complete
	mov	r0, fp
	bl	gbam_alloc_requests.constprop.133
	cmp	r0, #0
	bne	.L7830
	mov	r0, r5
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-272]
	mov	r5, r0
	cmp	r3, #0
	beq	.L7831
	ldr	r9, [r3, #84]
	movw	r3, #:lower16:gbam_epin_complete
	sub	r1, r4, #256
	ldr	r2, [r7, #1688]
	movt	r3, #:upper16:gbam_epin_complete
	mov	r0, r9
	bl	gbam_alloc_requests.constprop.133
	cmp	r0, #0
	bne	.L7832
	mov	r0, r6
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gbam_start_rx
.L7827:
	bl	_raw_spin_unlock
	mov	r1, r7
.L7824:
	mov	r0, r5
.L7826:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L7830:
	movw	r0, #:lower16:.LC510
	ldr	r1, .L7833
	movt	r0, #:upper16:.LC510
	bl	printk
.L7825:
	mov	r1, r9
	b	.L7824
.L7831:
	mov	r1, r10
	mov	r0, fp
	bl	gbam_free_requests
	mov	r1, r5
	mov	r0, r6
	b	.L7826
.L7829:
	ldr	r1, .L7833+4
	movw	r0, #:lower16:.LC509
	ldr	r2, [r4, #-260]
	movt	r0, #:upper16:.LC509
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L7832:
	movw	r0, #:lower16:.LC511
	ldr	r1, .L7833
	movt	r0, #:upper16:.LC511
	bl	printk
	mov	r1, r10
	mov	r0, r9
	bl	gbam_free_requests
	mov	r1, r5
	mov	r0, r6
	b	.L7826
.L7834:
	.align	2
.L7833:
	.word	.LANCHOR3-3256
	.word	.LANCHOR3-3276
	.fnend
	.size	gbam_connect_work, .-gbam_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_alloc_req.constprop.136, %function
gsmd_alloc_req.constprop.136:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	mov	r1, #32
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L7839
	mov	r0, r5
	str	r5, [r4, #4]
	mov	r1, #32
	bl	__kmalloc
	cmp	r0, #0
	mov	r5, r0
	str	r0, [r4]
	beq	.L7840
.L7835:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7839:
	movw	r0, #:lower16:.LC512
	ldr	r1, .L7841
	movt	r0, #:upper16:.LC512
	bl	printk
	b	.L7835
.L7840:
	movw	r0, #:lower16:.LC513
	ldr	r1, .L7841
	movt	r0, #:upper16:.LC513
	bl	printk
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	mov	r4, r5
	ldr	r3, [r3, #12]
	blx	r3
	b	.L7835
.L7842:
	.align	2
.L7841:
	.word	.LANCHOR3-3240
	.fnend
	.size	gsmd_alloc_req.constprop.136, .-gsmd_alloc_req.constprop.136
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_start_tx, %function
gs_start_tx:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	add	r10, r0, #76
	str	lr, [sp, #32]
	ldr	r3, [r0, #4]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r0, #76]
	ldr	r7, [r3, #88]
	cmp	r10, r5
	beq	.L7863
	ldr	r3, [r0, #84]
	cmp	r3, #7
	bgt	.L7863
	movw	r9, #:lower16:.LANCHOR1
	mov	r4, r0
	mov	fp, #0
	movt	r9, #:upper16:.LANCHOR1
.L7845:
	ldr	r2, [r4, #92]
	sub	r8, r5, #36
	ldr	r1, [r4, #100]
	ldr	r6, [r4, #104]
	add	r6, r6, r2
	sub	r3, r6, r1
	udiv	r6, r3, r2
	mls	r6, r2, r6, r3
	cmp	r6, #4096
	bcs	.L7864
	cmp	r6, #0
	bne	.L7847
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	ldr	r3, [r9, #3696]
	cmp	r3, #0
	moveq	r6, r3
	beq	.L7851
	ldrh	r1, [r7, #20]
	sdiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	beq	.L7880
.L7851:
	mov	r2, #1
	mov	r3, #0
	mov	r1, r2
	add	r0, r4, #108
	bl	__wake_up
.L7853:
	cmp	fp, #0
	bne	.L7846
.L7843:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7864:
	mov	r6, #4096
.L7847:
	ldr	fp, [r4, #96]
	ldr	r3, [r5, #-36]
	add	fp, fp, r2
	sub	fp, fp, r1
	cmp	fp, r6
	bcc	.L7881
	mov	r0, r3
	mov	r2, r6
	bl	memcpy
	cmp	fp, r6
	ldrhi	r3, [r4, #100]
	ldrls	r3, [r4, #96]
	addhi	r3, r3, r6
	str	r3, [r4, #100]
.L7849:
	mov	r0, r5
	str	r6, [r5, #-32]
	bl	list_del
	mov	r0, r4
	bl	_raw_spin_unlock
	ldr	r3, [r7, #8]
	mov	r2, #32
	mov	r1, r8
	mov	r0, r7
	ldr	r3, [r3, #16]
	blx	r3
	mov	r6, r0
	mov	r0, r4
	bl	_raw_spin_lock
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L7882
	cmp	r6, #0
	ldr	r2, [r4, #76]
	bne	.L7883
	ldr	r0, [r5, #-32]
	cmp	r10, r2
	ldr	r3, [r4, #84]
	ldr	r1, [r4, #136]
	str	r0, [r9, #3696]
	add	r3, r3, #1
	add	r1, r1, r0
	str	r3, [r4, #84]
	str	r1, [r4, #136]
	beq	.L7846
	cmp	r3, #7
	mov	fp, #1
	bgt	.L7846
	mov	r5, r2
	b	.L7845
.L7881:
	mov	r0, r3
	sub	r3, r6, fp
	mov	r2, fp
	str	r3, [sp, #4]
	bl	memcpy
	add	r0, r0, fp
	ldr	fp, [sp, #4]
	ldr	r1, [r4, #96]
	mov	r2, fp
	bl	memcpy
	ldr	r3, [r4, #96]
	add	r3, r3, fp
	str	r3, [r4, #100]
	b	.L7849
.L7883:
	mov	r1, r10
	mov	r0, r5
	bl	__list_add
.L7846:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L7843
	bl	tty_wakeup
	b	.L7843
.L7882:
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r8
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L7843
.L7863:
	mov	r6, #0
	b	.L7843
.L7880:
	str	r3, [r5, #-32]
	mov	r0, r5
	bl	list_del
	mov	r0, r4
	bl	_raw_spin_unlock
	ldr	r3, [r7, #8]
	mov	r2, #32
	mov	r1, r8
	mov	r0, r7
	ldr	r3, [r3, #16]
	blx	r3
	mov	r6, r0
	mov	r0, r4
	bl	_raw_spin_lock
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L7884
	cmp	r6, #0
	bne	.L7885
.L7854:
	mov	r3, #0
	str	r3, [r9, #3696]
	b	.L7851
.L7884:
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r8
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L7853
.L7885:
	movw	r2, #:lower16:.LC514
	movw	r0, #:lower16:.LC515
	ldr	r1, .L7886
	movt	r2, #:upper16:.LC514
	mov	r3, r6
	movt	r0, #:upper16:.LC515
	bl	printk
	mov	r1, r10
	mov	r0, r5
	ldr	r2, [r4, #76]
	bl	__list_add
	b	.L7854
.L7887:
	.align	2
.L7886:
	.word	.LANCHOR3-3224
	.fnend
	.size	gs_start_tx, .-gs_start_tx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_flush_chars, %function
gs_flush_chars:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #272]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #4]
	mov	r5, r0
	cmp	r3, #0
	beq	.L7889
	mov	r0, r4
	bl	gs_start_tx
.L7889:
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	gs_flush_chars, .-gs_flush_chars
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_write, %function
gs_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #272]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	cmp	r5, #0
	mov	r6, r0
	bne	.L7904
.L7895:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L7896
	mov	r0, r4
	bl	gs_start_tx
.L7896:
	mov	r0, r4
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7904:
	mov	r2, r5
	mov	r1, r7
	add	r0, r4, #92
	bl	gs_buf_put
	mov	r5, r0
	b	.L7895
	.fnend
	.size	gs_write, .-gs_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_write_complete, %function
gs_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r5, #48]
	mov	r1, r4
	mov	r6, r0
	ldr	r3, [r4, #140]
	add	r0, r5, #36
	add	r3, r3, r2
	str	r3, [r4, #140]
	ldr	r2, [r1, #76]!
	bl	__list_add
	ldr	r3, [r4, #84]
	sub	r3, r3, #1
	str	r3, [r4, #84]
	ldr	r3, [r5, #44]
	cmn	r3, #108
	beq	.L7907
	cmp	r3, #0
	bne	.L7919
.L7908:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L7907
	mov	r0, r4
	bl	gs_start_tx
.L7907:
	mov	r1, r6
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L7919:
	movw	r0, #:lower16:.LC516
	ldr	r1, .L7920
	ldr	r2, [r7, #4]
	movt	r0, #:upper16:.LC516
	bl	printk
	b	.L7908
.L7921:
	.align	2
.L7920:
	.word	.LANCHOR3-3212
	.fnend
	.size	gs_write_complete, .-gs_write_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_function_init, %function
mass_storage_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, r1
	strd	r8, [sp, #16]
	movw	r9, #:lower16:kmalloc_caches
	movt	r9, #:upper16:kmalloc_caches
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r9, #28]
	.pad #44
	sub	sp, sp, #44
	cmp	r0, #0
	beq	.L7967
	mov	r2, #100
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L8032
.L7923:
	mov	r2, #1
	mov	r1, #256
	movw	r3, #:lower16:.LC528
	str	r2, [r4]
	movt	r3, #:upper16:.LC528
	strh	r1, [r4, #8]	@ movhi
	strb	r2, [r4, #10]
	ldr	r0, [r9, #36]
	str	r3, [sp, #28]
	ldr	r10, [r7]
	cmp	r0, #0
	beq	.L7969
	mov	r2, #340
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L7926
.L7925:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	movw	r1, #32976
	mov	r0, #128
	orr	r3, r3, #2
	strb	r3, [r5, #144]
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r5, #68]
	beq	.L8033
	ldr	r3, [r4, #76]
	movw	r1, #32976
	mov	r0, #392
	str	r3, [r5, #172]
	ldr	r3, [r4, #80]
	str	r10, [r5]
	str	r3, [r5, #176]
	ldr	r3, [r10, #4]
	str	r3, [r5, #48]
	ldr	r3, [r7, #4]
	str	r7, [r5, #4]
	str	r3, [r5, #52]
	bl	__kmalloc
	subs	r8, r0, #0
	beq	.L7942
	add	r7, r5, #28
	movw	r1, #:lower16:.LC529
	ldr	r2, .L8039
	mov	r0, r7
	movt	r1, #:upper16:.LC529
	str	r8, [r5, #100]
	bl	__init_rwsem
	ldrb	r3, [r4, #10]	@ zero_extendqisi2
	movw	ip, #:lower16:fsg_lun_release
	mov	r1, r7
	ldrb	r2, [r8, #24]	@ zero_extendqisi2
	movt	ip, #:upper16:fsg_lun_release
	mov	r7, r8
	add	r0, r10, #32
	adds	r3, r3, #0
	movne	r3, #1
	bfi	r2, r3, #3, #1
	strb	r2, [r8, #24]
	ldrb	r2, [r4, #8]	@ zero_extendqisi2
	ldrb	r3, [r8, #24]	@ zero_extendqisi2
	and	r2, r2, #1
	bfi	r3, r2, #1, #1
	bfi	r3, r2, #0, #1
	mov	r2, r3
	strb	r3, [r8, #24]
	ldrb	r3, [r4, #9]	@ zero_extendqisi2
	bfi	r2, r3, #2, #1
	mov	r3, r2
	strb	r2, [r8, #24]
	ldrb	r2, [r4, #11]	@ zero_extendqisi2
	str	ip, [r8, #380]
	bfi	r3, r2, #7, #1
	strb	r3, [r8, #24]
	str	r0, [r7, #48]!
	mov	r0, r7
	bl	dev_set_drvdata
	ldr	r1, [r4, #68]
	mov	r2, #0
	movw	r3, #:lower16:.LC517
	movt	r3, #:upper16:.LC517
	mov	r0, r7
	cmp	r1, r2
	moveq	r1, r3
	bl	dev_set_name
	mov	r0, r7
	bl	device_register
	cmp	r0, #0
	bne	.L8034
	ldr	r1, .L8039+4
	mov	r0, r7
	bl	device_create_file
	cmp	r0, #0
	bne	.L7934
	ldr	r1, .L8039+8
	mov	r0, r7
	bl	device_create_file
	cmp	r0, #0
	bne	.L7934
	ldr	r1, .L8039+12
	mov	r0, r7
	bl	device_create_file
	cmp	r0, #0
	bne	.L7934
	mov	r0, r7
	ldr	r1, .L8039+16
	bl	device_create_file
	subs	r7, r0, #0
	movne	r8, r7
	movne	r9, r8
	bne	.L7936
	ldr	r1, [r4, #4]
	cmp	r1, #0
	beq	.L7939
	mov	r0, r8
	bl	fsg_lun_open
	cmp	r0, #0
	bne	.L7934
.L7940:
	ldr	r8, [r5, #68]
	mov	r3, #1
	str	r3, [r5, #92]
	add	fp, r8, #96
.L7941:
	mov	r2, #2
	mov	r1, #208
	mov	r0, #16384
	bl	kmalloc_order_trace
	cmp	r0, #0
	str	r0, [r8]
	beq	.L7942
	cmp	r8, fp
	beq	.L8035
	add	r8, r8, #32
	str	r8, [r8, #-24]
	b	.L7941
.L7926:
	mvn	r10, #11
.L8031:
	mov	r0, r4
	bl	kfree
.L7922:
	mov	r0, r10
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7939:
	ldrb	r2, [r8, #24]	@ zero_extendqisi2
	ands	r2, r2, #12
	bne	.L7940
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC531
	mvn	r8, #21
	movt	r1, #:upper16:.LC531
	add	r0, r0, #32
	bl	dev_err
	mov	r2, #1
	mov	r3, #7
	add	r0, r5, #336
	str	r2, [r5, #92]
	str	r3, [r5, #112]
	bl	fsg_common_release
.L7930:
	mov	r10, r8
	b	.L8031
.L7969:
	mov	r5, #16
	b	.L7925
.L7967:
	mov	r4, #16
	b	.L7923
.L7934:
	mov	r8, r0
	mov	r9, r0
.L7936:
	mov	r3, #1
	str	r3, [r5, #92]
.L7933:
	mov	r3, #7
	add	r0, r5, #336
	str	r3, [r5, #112]
	bl	fsg_common_release
.L7960:
	cmn	r9, #4096
	bhi	.L7930
	ldr	r3, [r4]
	cmp	r3, #0
	movne	r7, #0
	addne	r9, sp, #28
	movne	r5, r7
	bne	.L7962
	b	.L7963
.L7964:
	ldr	r3, [r4]
	add	r5, r5, #1
	cmp	r3, r5
	bls	.L7963
.L7962:
	ldr	r1, [r8, #100]
	ldr	r0, [r6, #8]
	ldr	r2, [r9, r5, lsl #2]
	add	r1, r1, r7
	add	r7, r7, #392
	add	r1, r1, #56
	add	r0, r0, #8
	bl	sysfs_create_link
	cmp	r0, #0
	beq	.L7964
	cmp	r5, #0
	mov	r10, r0
	beq	.L7966
.L7965:
	ldr	r0, [r6, #8]
	sub	r5, r5, #1
	ldr	r1, [r9, r5, lsl #2]
	add	r0, r0, #8
	bl	sysfs_remove_link
	cmp	r5, #0
	bne	.L7965
.L7966:
	add	r0, r8, #336
	bl	fsg_common_release
	b	.L8031
.L7963:
	str	r8, [r4, #96]
	mov	r10, #0
	str	r4, [r6, #4]
	b	.L7922
.L8033:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	tst	r3, #2
	beq	.L7926
	mov	r0, r5
	mvn	r10, #11
	bl	kfree
	b	.L8031
.L8034:
	ldr	ip, [r5]
	movw	r1, #:lower16:.LC530
	mov	r3, r0
	movt	r1, #:upper16:.LC530
	mov	r2, #0
	mov	r8, r0
	mov	r9, r0
	add	r0, ip, #32
	bl	_dev_info
	mov	r3, #0
	mov	r0, r7
	str	r3, [r5, #92]
	bl	put_device
	b	.L7933
.L7942:
	mov	r3, #7
	add	r0, r5, #336
	mvn	r8, #11
	str	r3, [r5, #112]
	bl	fsg_common_release
	b	.L7930
.L8035:
	ldr	r2, [r5, #68]
	movw	r3, #65535
	str	r2, [r8, #8]
	ldrh	r1, [r4, #92]
	cmp	r1, r3
	beq	.L8036
.L7945:
	ldr	r3, [r4, #84]
	movw	r2, #:lower16:.LC518
	add	r0, r5, #180
	ldr	ip, [r4, #88]
	movt	r2, #:upper16:.LC518
	cmp	r3, #0
	moveq	r3, r2
	cmp	ip, #0
	beq	.L8027
	movw	r8, #:lower16:.LC519
	movt	r8, #:upper16:.LC519
.L7948:
	movw	r2, #:lower16:.LC533
	str	ip, [sp]
	movt	r2, #:upper16:.LC533
	str	r1, [sp, #4]
	mov	r1, #29
	bl	snprintf
	ldm	r8, {r1, ip}
	movw	r2, #:lower16:.LC534
	movt	r2, #:upper16:.LC534
	ldr	r0, [r8, #8]
	ldm	r2, {r10, lr}
	mov	r2, #0
	strb	r2, [r5, #234]
	str	r1, [r5, #218]	@ unaligned
	ldr	r1, [r8, #12]
	str	r10, [r5, #209]	@ unaligned
	str	lr, [r5, #213]	@ unaligned
	str	ip, [r5, #222]	@ unaligned
	str	r0, [r5, #226]	@ unaligned
	str	r1, [r5, #230]	@ unaligned
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L7949
	ldr	r3, [r5]
	movw	r0, #:lower16:.LC344
	movt	r0, #:upper16:.LC344
	ldr	r1, [r3, #28]
	bl	strcmp
	adds	r3, r0, #0
	movne	r3, #1
.L7949:
	ldrb	lr, [r5, #144]	@ zero_extendqisi2
	mov	r10, #0
	mov	r2, #1
	movw	ip, #:lower16:.LC521
	movw	r0, #:lower16:fsg_main_thread
	str	r10, [r5, #44]
	movt	ip, #:upper16:.LC521
	movt	r0, #:upper16:fsg_main_thread
	str	r2, [r5, #336]
	mov	r1, r5
	mvn	r2, #0
	bfi	lr, r3, #0, #1
	strb	lr, [r5, #144]
	ldr	r3, [r4, #72]
	cmp	r3, r10
	moveq	r3, ip
	bl	kthread_create_on_node
	cmn	r0, #4096
	mov	r8, r0
	str	r0, [r5, #168]
	movhi	r9, r0
	bhi	.L7933
	movw	r1, #:lower16:.LC387
	ldr	r2, .L8039+20
	add	r0, r5, #156
	movt	r1, #:upper16:.LC387
	str	r10, [r5, #152]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC535
	ldr	r2, .L8039
	add	r0, r5, #16
	movt	r1, #:upper16:.LC535
	bl	__init_waitqueue_head
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC536
	movt	r1, #:upper16:.LC536
	add	r0, r0, #32
	bl	_dev_info
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC537
	movt	r1, #:upper16:.LC537
	ldr	r2, [r5, #92]
	add	r0, r0, #32
	bl	_dev_info
	ldr	r0, [r9, #48]
	cmp	r0, #0
	moveq	r10, #16
	beq	.L7952
	mov	r2, #4096
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	mov	r10, r0
.L7952:
	ldr	fp, [r5, #92]
	ldr	r8, [r5, #100]
	cmp	fp, #0
	ble	.L7953
	movw	r3, #:lower16:.LC522
	movw	r2, #:lower16:.LC523
	str	r4, [sp, #20]
	movt	r3, #:upper16:.LC522
	movt	r2, #:upper16:.LC523
	movw	r9, #:lower16:.LC525
	add	r8, r8, #48
	movt	r9, #:upper16:.LC525
	strd	r2, [sp, #12]
	b	.L7959
.L8038:
	bl	d_path
	cmn	r0, #4096
	bhi	.L7955
.L7954:
	ldrb	lr, [r4, #24]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC524
	movw	r3, #:lower16:.LC526
	movt	r2, #:upper16:.LC524
	movt	r3, #:upper16:.LC526
	str	r0, [sp, #4]
	movw	ip, #:lower16:.LC527
	movw	r1, #:lower16:.LC538
	movt	ip, #:upper16:.LC527
	mov	r0, r8
	tst	lr, #4
	add	r7, r7, #1
	moveq	r2, r9
	tst	lr, #2
	moveq	r3, r9
	tst	lr, #8
	moveq	ip, r9
	movt	r1, #:upper16:.LC538
	add	r8, r8, #392
	str	ip, [sp]
	bl	_dev_info
	cmp	fp, r7
	beq	.L8037
.L7959:
	ldr	r0, [r8, #-48]
	sub	r4, r8, #48
	cmp	r0, #0
	beq	.L8002
	cmp	r10, #0
	mov	r2, #4096
	mov	r1, r10
	add	r0, r0, #8
	bne	.L8038
.L7955:
	ldr	r0, [sp, #12]
	b	.L7954
.L8002:
	ldr	r0, [sp, #16]
	b	.L7954
.L8037:
	ldr	r4, [sp, #20]
.L7953:
	mov	r0, r10
	mov	r9, r5
	bl	kfree
	ldr	r0, [r5, #168]
	mov	r8, r5
	bl	wake_up_process
	b	.L7960
.L8036:
	ldr	r8, [r10, #28]
	movw	r0, #:lower16:.LC337
	movt	r0, #:upper16:.LC337
	mov	r1, r8
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #769
	beq	.L7945
	movw	r0, #:lower16:.LC338
	mov	r1, r8
	movt	r0, #:upper16:.LC338
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #770
	beq	.L7945
	movw	r0, #:lower16:.LC339
	mov	r1, r8
	movt	r0, #:upper16:.LC339
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #771
	beq	.L7945
	movw	r0, #:lower16:.LC340
	mov	r1, r8
	movt	r0, #:upper16:.LC340
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #774
	beq	.L7945
	movw	r0, #:lower16:.LC341
	mov	r1, r8
	movt	r0, #:upper16:.LC341
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #776
	beq	.L7945
	movw	r0, #:lower16:.LC342
	mov	r1, r8
	movt	r0, #:upper16:.LC342
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #785
	beq	.L7945
	movw	r0, #:lower16:.LC343
	mov	r1, r8
	movt	r0, #:upper16:.LC343
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #786
	beq	.L7945
	movw	r0, #:lower16:.LC344
	mov	r1, r8
	movt	r0, #:upper16:.LC344
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #787
	beq	.L7945
	movw	r0, #:lower16:.LC345
	mov	r1, r8
	movt	r0, #:upper16:.LC345
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #788
	beq	.L7945
	movw	r0, #:lower16:.LC346
	mov	r1, r8
	movt	r0, #:upper16:.LC346
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #790
	beq	.L7945
	movw	r0, #:lower16:.LC347
	mov	r1, r8
	movt	r0, #:upper16:.LC347
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #792
	beq	.L7945
	movw	r0, #:lower16:.LC348
	mov	r1, r8
	movt	r0, #:upper16:.LC348
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #793
	beq	.L7945
	movw	r0, #:lower16:.LC349
	mov	r1, r8
	movt	r0, #:upper16:.LC349
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #800
	beq	.L7945
	movw	r0, #:lower16:.LC350
	mov	r1, r8
	movt	r0, #:upper16:.LC350
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #801
	beq	.L7945
	movw	r0, #:lower16:.LC351
	mov	r1, r8
	movt	r0, #:upper16:.LC351
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #802
	beq	.L7945
	movw	r0, #:lower16:.LC352
	mov	r1, r8
	movt	r0, #:upper16:.LC352
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #803
	beq	.L7945
	movw	r0, #:lower16:.LC353
	mov	r1, r8
	movt	r0, #:upper16:.LC353
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #804
	beq	.L7945
	movw	r0, #:lower16:.LC354
	mov	r1, r8
	movt	r0, #:upper16:.LC354
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #805
	beq	.L7945
	movw	r0, #:lower16:.LC355
	mov	r1, r8
	movt	r0, #:upper16:.LC355
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #806
	beq	.L7945
	movw	r0, #:lower16:.LC356
	mov	r1, r8
	movt	r0, #:upper16:.LC356
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #807
	beq	.L7945
	movw	r0, #:lower16:.LC357
	mov	r1, r8
	movt	r0, #:upper16:.LC357
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #808
	beq	.L7945
	movw	r0, #:lower16:.LC358
	mov	r1, r8
	movt	r0, #:upper16:.LC358
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #809
	beq	.L7945
	movw	r0, #:lower16:.LC359
	mov	r1, r8
	movt	r0, #:upper16:.LC359
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #816
	beq	.L7945
	movw	r0, #:lower16:.LC360
	mov	r1, r8
	movt	r0, #:upper16:.LC360
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #817
	beq	.L7945
	movw	r0, #:lower16:.LC361
	mov	r1, r8
	movt	r0, #:upper16:.LC361
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #818
	beq	.L7945
	movw	r0, #:lower16:.LC362
	mov	r1, r8
	movt	r0, #:upper16:.LC362
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #819
	beq	.L7945
	movw	r0, #:lower16:.LC363
	mov	r1, r8
	movt	r0, #:upper16:.LC363
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #820
	beq	.L7945
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC532
	mov	r2, r8
	movt	r1, #:upper16:.LC532
	add	r0, r0, #32
	bl	dev_warn
	movw	r1, #921
	b	.L7945
.L8027:
	ldr	r2, [r5, #100]
	ldrb	r2, [r2, #24]	@ zero_extendqisi2
	tst	r2, #8
	beq	.L7998
	movw	r8, #:lower16:.LC519
	movt	r8, #:upper16:.LC519
	mov	ip, r8
	b	.L7948
.L8032:
	mvn	r10, #11
	b	.L7922
.L7998:
	movw	ip, #:lower16:.LC520
	movw	r8, #:lower16:.LC519
	movt	ip, #:upper16:.LC520
	movt	r8, #:upper16:.LC519
	b	.L7948
.L8040:
	.align	2
.L8039:
	.word	.LANCHOR1+3700
	.word	.LANCHOR0+1252
	.word	.LANCHOR0+1268
	.word	.LANCHOR0+1236
	.word	.LANCHOR0+1220
	.word	.LANCHOR1+3600
	.fnend
	.size	mass_storage_function_init, .-mass_storage_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	check_command.constprop.141, %function
check_command.constprop.141:
	.fnstart
	@ args = 4, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	mov	r5, r3
	strd	r6, [sp, #8]
	movw	r6, #:lower16:__stack_chk_guard
	mov	r7, r1
	str	r8, [sp, #16]
	movt	r6, #:upper16:__stack_chk_guard
	mov	r8, r2
	str	lr, [sp, #20]
	ldr	r0, [r0, #120]
	mov	lr, #0
	ldr	ip, [r6]
	.pad #24
	sub	sp, sp, #24
	ldr	r3, [r4, #124]
	strb	lr, [sp]
	cmp	r0, lr
	str	ip, [sp, #20]
	bne	.L8085
	ldr	r2, [r4, #128]
	cmp	r2, #0
	beq	.L8060
.L8061:
	cmp	r2, r3
	bls	.L8043
	ldrb	r2, [r4, #144]	@ zero_extendqisi2
	str	r3, [r4, #128]
	orr	r2, r2, #4
	strb	r2, [r4, #144]
.L8043:
	cmp	r8, r0
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	bne	.L8086
.L8044:
	ldr	r0, [r4, #72]
	cmp	r0, r7
	beq	.L8064
.L8090:
	blt	.L8047
	ldr	ip, [r4, #104]
	ldrb	r3, [r4, #76]	@ zero_extendqisi2
	cmp	ip, #0
	beq	.L8048
.L8091:
	cmp	r3, #3
	beq	.L8049
	ldrb	r2, [ip, #24]	@ zero_extendqisi2
	mov	r3, #0
	ldr	r1, [ip, #36]
	str	r3, [ip, #28]
	str	r3, [ip, #32]
	bfi	r2, r3, #6, #1
	cmp	r1, r3
	strb	r2, [ip, #24]
	beq	.L8049
	ldrb	r2, [r4, #76]	@ zero_extendqisi2
	cmp	r2, #18
	cmpne	r2, #3
	mvnne	r0, #21
	strne	r1, [ip, #28]
	strne	r3, [ip, #36]
	bne	.L8041
.L8049:
	ldrb	r2, [r4, #77]	@ zero_extendqisi2
	cmp	r0, #1
	and	r2, r2, #31
	strb	r2, [r4, #77]
	ble	.L8056
.L8058:
	mov	r3, #1
	add	r1, r4, #77
	mov	lr, r3
	b	.L8055
.L8088:
	ldrb	r2, [r1, #1]!	@ zero_extendqisi2
.L8055:
	cmp	r2, #0
	beq	.L8052
	ands	r2, r5, lr, lsl r3
	beq	.L8087
.L8052:
	add	r3, r3, #1
	cmp	r3, r0
	blt	.L8088
	cmp	ip, #0
	beq	.L8057
.L8056:
	ldr	r3, [ip]
	ldr	r2, [sp, #48]
	cmp	r3, #0
	movne	r3, #0
	andeq	r3, r2, #1
	cmp	r3, #0
	movne	r3, #14848
	mvnne	r0, #21
	movtne	r3, 2
	strne	r3, [ip, #28]
	bne	.L8041
.L8057:
	mov	r0, #0
.L8041:
	ldr	r2, [sp, #20]
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L8089
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8060:
	ldr	r0, [r4, #72]
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	cmp	r0, r7
	bne	.L8090
.L8064:
	ldr	ip, [r4, #104]
	mov	r0, r7
	ldrb	r3, [r4, #76]	@ zero_extendqisi2
	cmp	ip, #0
	bne	.L8091
.L8048:
	ldrb	r2, [r4, #144]	@ zero_extendqisi2
	cmp	r3, #18
	cmpne	r3, #3
	bfi	r2, ip, #4, #1
	strb	r2, [r4, #144]
	bne	.L8053
	ldrb	r2, [r4, #77]	@ zero_extendqisi2
	cmp	r0, #1
	and	r2, r2, #31
	strb	r2, [r4, #77]
	bgt	.L8058
	b	.L8057
.L8086:
	ldr	r2, [r4, #128]
	cmp	r2, #0
	beq	.L8044
.L8047:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	mvn	r0, #21
	orr	r3, r3, #4
	strb	r3, [r4, #144]
	b	.L8041
.L8085:
	movw	r2, #:lower16:.LANCHOR3
	movw	r1, #:lower16:.LC539
	movt	r2, #:upper16:.LANCHOR3
	movt	r1, #:upper16:.LC539
	add	r0, r2, r0
	ldrb	r2, [r0, #-3192]	@ zero_extendqisi2
	mov	r0, sp
	bl	sprintf
	ldr	r0, [r4, #120]
	ldr	r2, [r4, #128]
	ldr	r3, [r4, #124]
	cmp	r2, #0
	moveq	r8, #3
	beq	.L8043
	b	.L8061
.L8087:
	cmp	ip, #0
	beq	.L8053
	mov	r3, #9216
	mvn	r0, #21
	movt	r3, 5
	str	r3, [ip, #28]
	b	.L8041
.L8053:
	mvn	r0, #21
	b	.L8041
.L8089:
	bl	__stack_chk_fail
	.fnend
	.size	check_command.constprop.141, .-check_command.constprop.141
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_fs_mount, %function
ffs_fs_mount:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #33152
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	subs	r4, r3, #0
	strd	r6, [sp, #8]
	mov	r3, #0
	movt	ip, 65535
	strd	r8, [sp, #16]
	mov	r8, r0
	mov	r9, r2
	strd	r10, [sp, #24]
	mov	r10, r1
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	movw	lr, #16704
	strh	ip, [sp, #20]	@ movhi
	str	r3, [sp, #22]	@ unaligned
	str	r3, [sp, #26]	@ unaligned
	str	r3, [sp, #30]	@ unaligned
	strh	lr, [sp, #32]	@ movhi
	str	r3, [sp, #34]	@ unaligned
	strh	r3, [sp, #38]	@ movhi
	beq	.L8093
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L8093
	mov	fp, #32768
	movw	r3, #:lower16:.LC542
	str	r0, [sp, #12]
	movw	r2, #:lower16:.LC543
	movt	r3, #:upper16:.LC542
	movt	r2, #:upper16:.LC543
	movt	fp, 65535
	str	r3, [sp, #4]
	str	r2, [sp, #8]
.L8112:
	mov	r1, #44
	mov	r0, r4
	bl	strchr
	subs	r7, r0, #0
	mov	r1, #61
	movne	r3, #0
	mov	r0, r4
	strbne	r3, [r7]
	bl	strchr
	subs	r5, r0, #0
	beq	.L8130
	mov	r3, #0
	mov	r6, r5
	mov	r2, r3
	add	r1, sp, #16
	strb	r3, [r6], #1
	mov	r0, r6
	bl	simple_strtoul
	ldr	r2, [sp, #16]
	mov	r8, r0
	ldrb	r2, [r2]	@ zero_extendqisi2
	cmp	r2, #44
	cmpne	r2, #0
	bne	.L8131
	sub	r5, r5, r4
	cmp	r5, #4
	beq	.L8099
	cmp	r5, #5
	beq	.L8100
	cmp	r5, #3
	beq	.L8132
.L8098:
	movw	r0, #:lower16:.LC547
	mov	r1, r4
	movt	r0, #:upper16:.LC547
	bl	printk
.L8096:
	mvn	r0, #21
	b	.L8092
.L8128:
	ldr	r8, [sp, #12]
.L8093:
	movw	r3, #:lower16:ffs_sb_fill
	mov	r1, r10
	str	r9, [sp, #36]
	mov	r0, r8
	movt	r3, #:upper16:ffs_sb_fill
	add	r2, sp, #20
	bl	mount_single
.L8092:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8099:
	ldrb	r2, [r4]	@ zero_extendqisi2
	cmp	r2, #109
	bne	.L8098
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	add	r1, r4, #1
	cmp	r2, #111
	bne	.L8098
	ldrb	r2, [r1, #1]!	@ zero_extendqisi2
	cmp	r2, #100
	bne	.L8098
	ldrb	r2, [r1, #1]	@ zero_extendqisi2
	cmp	r2, #101
	bne	.L8098
	uxth	r3, r0
	movw	r2, #365
	movw	r1, #438
	and	r2, r2, r3
	and	r3, r3, r1
	orr	r2, r2, #16384
	orr	r3, r3, fp
	strh	r3, [sp, #20]	@ movhi
	strh	r2, [sp, #32]	@ movhi
	b	.L8103
.L8132:
	ldrb	r2, [r4]	@ zero_extendqisi2
	cmp	r2, #117
	beq	.L8133
	cmp	r2, #103
	bne	.L8098
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	cmp	r2, #105
	bne	.L8098
	ldrb	r2, [r4, #2]	@ zero_extendqisi2
	cmp	r2, #100
	bne	.L8098
	str	r0, [sp, #28]
	b	.L8103
.L8100:
	mov	r2, r5
	mov	r0, r4
	ldr	r1, [sp, #4]
	bl	memcmp
	cmp	r0, #0
	bne	.L8102
	movw	r2, #365
	and	r3, r2, r8
	orr	r3, r3, #16384
	strh	r3, [sp, #32]	@ movhi
.L8103:
	cmp	r7, #0
	beq	.L8128
	add	r4, r7, #1
	b	.L8112
.L8102:
	mov	r2, r5
	mov	r0, r4
	ldr	r1, [sp, #8]
	bl	memcmp
	cmp	r0, #0
	bne	.L8098
	movw	r2, #438
	and	r3, r2, r8
	orr	r3, r3, fp
	strh	r3, [sp, #20]	@ movhi
	b	.L8103
.L8130:
	movw	r0, #:lower16:.LC540
	mov	r1, r4
	movt	r0, #:upper16:.LC540
	bl	printk
	b	.L8096
.L8133:
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	cmp	r2, #105
	bne	.L8098
	ldrb	r2, [r4, #2]	@ zero_extendqisi2
	cmp	r2, #100
	bne	.L8098
	str	r0, [sp, #24]
	b	.L8103
.L8131:
	movw	r0, #:lower16:.LC541
	mov	r2, r6
	mov	r1, r4
	movt	r0, #:upper16:.LC541
	bl	printk
	b	.L8096
	.fnend
	.size	ffs_fs_mount, .-ffs_fs_mount
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_alloc_ctrl_pkt.constprop.143, %function
rmnet_alloc_ctrl_pkt.constprop.143:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L8139
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L8143
.L8135:
	mov	r1, #32
	mov	r0, r5
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	strne	r5, [r4, #4]
	beq	.L8144
.L8134:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8139:
	mov	r4, #16
	b	.L8135
.L8143:
	mvn	r4, #11
	b	.L8134
.L8144:
	mov	r0, r4
	mvn	r4, #11
	bl	kfree
	b	.L8134
	.fnend
	.size	rmnet_alloc_ctrl_pkt.constprop.143, .-rmnet_alloc_ctrl_pkt.constprop.143
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_send_cpkt_response, %function
frmnet_send_cpkt_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	clz	r3, r1
	cmp	r0, #0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	lsr	r3, r3, #5
	moveq	r5, #1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	mov	r6, r0
	movne	r5, r3
	str	lr, [sp, #20]
	mov	r8, r1
	cmp	r5, #0
	bne	.L8155
	mov	r0, r2
	mov	r7, r2
	bl	rmnet_alloc_ctrl_pkt.constprop.143
	cmn	r0, #4096
	mov	r4, r0
	bhi	.L8156
	mov	r1, r8
	mov	r2, r7
	ldr	r0, [r0]
	bl	memcpy
	str	r7, [r4, #4]
	ldr	r3, [r6, #120]
	cmp	r3, #0
	beq	.L8149
	ldr	r3, [r6, #124]
	cmp	r3, #0
	bne	.L8150
.L8149:
	ldr	r0, [r4]
	bl	kfree
	mov	r0, r4
	bl	kfree
	mov	r0, #0
.L8145:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8150:
	add	r7, r6, #132
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	add	r2, r6, #144
	ldr	r1, [r6, #148]
	add	r0, r4, #8
	bl	__list_add
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	frmnet_ctrl_response_available
	mov	r0, r5
	b	.L8145
.L8156:
	movw	r0, #:lower16:.LC150
	ldr	r1, .L8157
	movt	r0, #:upper16:.LC150
	bl	printk
	mvn	r0, #11
	b	.L8145
.L8155:
	movw	r0, #:lower16:.LC548
	mov	r3, r1
	ldr	r1, .L8157
	mov	r2, r6
	movt	r0, #:upper16:.LC548
	bl	printk
	mvn	r0, #18
	b	.L8145
.L8158:
	.align	2
.L8157:
	.word	.LANCHOR3-3188
	.fnend
	.size	frmnet_send_cpkt_response, .-frmnet_send_cpkt_response
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_qti_send_cpkt_tomodem, %function
grmnet_ctrl_qti_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	cmp	r2, #2048
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r5, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r3, #1016]
	bhi	.L8165
	mov	r0, r2
	mov	r7, r1
	bl	rmnet_alloc_ctrl_pkt.constprop.143
	cmn	r0, #4096
	mov	r6, r0
	bhi	.L8166
	mov	r1, r7
	mov	r2, r5
	ldr	r0, [r0]
	add	r7, r4, #52
	bl	memcpy
	str	r5, [r6, #4]
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldrb	r5, [r4, #4]	@ zero_extendqisi2
	mov	r8, r0
	cmp	r5, #0
	beq	.L8167
	add	r2, r4, #44
	add	r0, r6, #8
	ldr	r1, [r4, #48]
	bl	__list_add
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	add	r0, r4, #32
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	bl	__wake_up
	mov	r0, #0
.L8159:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8166:
	movw	r0, #:lower16:.LC150
	ldr	r1, .L8168
	movt	r0, #:upper16:.LC150
	bl	printk
	mvn	r0, #11
	b	.L8159
.L8167:
	movw	r0, #:lower16:.LC550
	mov	r1, r4
	movt	r0, #:upper16:.LC550
	bl	printk
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r6]
	bl	kfree
	mov	r0, r6
	bl	kfree
	mov	r0, r5
	b	.L8159
.L8165:
	movw	r0, #:lower16:.LC549
	mov	r1, r2
	movt	r0, #:upper16:.LC549
	mov	r2, #2048
	bl	printk
	mvn	r0, #21
	b	.L8159
.L8169:
	.align	2
.L8168:
	.word	.LANCHOR3-3160
	.fnend
	.size	grmnet_ctrl_qti_send_cpkt_tomodem, .-grmnet_ctrl_qti_send_cpkt_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_queue_notify, %function
rmnet_ctrl_queue_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #52
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r4, #4]	@ zero_extendqisi2
	mov	r6, r0
	cmp	r3, #0
	beq	.L8175
	mov	r0, #0
	bl	rmnet_alloc_ctrl_pkt.constprop.143
	cmp	r0, #0
	beq	.L8176
	add	r2, r4, #44
	ldr	r1, [r4, #48]
	add	r0, r0, #8
	bl	__list_add
	mov	r1, r6
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	add	r0, r4, #32
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L8175:
	movw	r0, #:lower16:.LC551
	mov	r2, r4
	ldr	r1, .L8177
	movt	r0, #:upper16:.LC551
	bl	printk
.L8174:
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L8176:
	movw	r0, #:lower16:.LC552
	ldr	r1, .L8177
	movt	r0, #:upper16:.LC552
	bl	printk
	b	.L8174
.L8178:
	.align	2
.L8177:
	.word	.LANCHOR3-3124
	.fnend
	.size	rmnet_ctrl_queue_notify, .-rmnet_ctrl_queue_notify
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_notify_modem, %function
gqti_ctrl_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #1016]
	str	r2, [r0, #12]
	b	rmnet_ctrl_queue_notify
	.fnend
	.size	gqti_ctrl_notify_modem, .-gqti_ctrl_notify_modem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_send_cpkt_tomodem, %function
grmnet_ctrl_smd_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #5
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	ip, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bhi	.L8181
	movw	r7, #:lower16:.LANCHOR1
	mov	r3, #84
	movt	r7, #:upper16:.LANCHOR1
	mla	r3, r3, r0, r7
	ldr	r4, [r3, #512]
	cmp	r4, #0
	beq	.L8181
	mov	r0, r2
	mov	r8, r1
	mov	r5, r2
	bl	rmnet_alloc_ctrl_pkt.constprop.143
	cmn	r0, #4096
	mov	r6, r0
	bhi	.L8191
	mov	r1, r8
	mov	r2, r5
	ldr	r0, [r0]
	add	r8, r4, #108
	bl	memcpy
	str	r5, [r6, #4]
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	ldr	r0, [r4, #8]
	ands	r5, r0, #1
	beq	.L8192
	add	r0, r6, #8
	add	r2, r4, #40
	ldr	r1, [r4, #44]
	bl	__list_add
	ldr	r1, [r7, #2700]
	add	r2, r4, #68
	mov	r0, #4
	bl	queue_work_on
	mov	r1, r9
	mov	r0, r8
	mov	r5, #0
	bl	_raw_spin_unlock_irqrestore
.L8180:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L8192:
	ldr	r0, [r6]
	bl	kfree
	mov	r0, r6
	bl	kfree
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L8180
.L8191:
	movw	r0, #:lower16:.LC150
	ldr	r1, .L8193
	mvn	r5, #11
	movt	r0, #:upper16:.LC150
	bl	printk
	b	.L8180
.L8181:
	movw	r0, #:lower16:.LC17
	mov	r2, ip
	ldr	r1, .L8193
	movt	r0, #:upper16:.LC17
	mvn	r5, #18
	bl	printk
	b	.L8180
.L8194:
	.align	2
.L8193:
	.word	.LANCHOR3-3100
	.fnend
	.size	grmnet_ctrl_smd_send_cpkt_tomodem, .-grmnet_ctrl_smd_send_cpkt_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ptp_function_cleanup, %function
ptp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	ptp_function_cleanup, .-ptp_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_rx_submit.constprop.146, %function
rmnet_sdio_rx_submit.constprop.146:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mvn	r3, #0
	mov	r5, r1
	str	r6, [sp, #8]
	mov	r2, #0
	mov	r1, #32
	mov	r6, r0
	movw	r0, #2056
	str	lr, [sp, #12]
	bl	__alloc_skb
	subs	r4, r0, #0
	beq	.L8198
	ldr	r0, [r4, #160]
	mov	ip, #2048
	mov	r1, r5
	ldr	r3, [r4, #172]
	mov	r2, #32
	add	r0, r0, #8
	add	r3, r3, #8
	str	r0, [r4, #160]
	str	r3, [r4, #172]
	stm	r5, {r3, ip}
	str	r4, [r5, #32]
	ldr	r0, [r6, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	beq	.L8196
	mov	r0, r4
	bl	dev_kfree_skb_any
.L8196:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8198:
	mvn	r5, #11
	b	.L8196
	.fnend
	.size	rmnet_sdio_rx_submit.constprop.146, .-rmnet_sdio_rx_submit.constprop.146
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_complete_epout, %function
rmnet_sdio_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r1, #44]
	ldr	r6, [r1, #32]
	ldr	r8, [r4, #84]
	cmn	r3, #104
	beq	.L8228
	cmp	r3, #0
	beq	.L8206
	cmn	r3, #108
	beq	.L8228
	ldr	r2, [r0, #4]
	movw	r1, #:lower16:.LC129
	ldr	lr, [r5, #4]
	movt	r1, #:upper16:.LC129
	ldr	ip, [r5, #48]
	ldr	r0, [r8]
	stm	sp, {ip, lr}
	add	r0, r0, #32
	bl	dev_err
	mov	r0, r6
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #320]
	tst	r3, #2
	beq	.L8207
	add	r7, r4, #188
	mov	r0, r7
	bl	_raw_spin_lock
.L8208:
	movw	r3, #:lower16:.LANCHOR0
	ldr	r2, [r4, #328]
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #1692]
	cmp	r2, r3
	bcs	.L8229
	mov	r0, r7
	bl	_raw_spin_unlock
	mov	r1, r5
	mov	r0, r4
	bl	rmnet_sdio_rx_submit.constprop.146
	subs	r2, r0, #0
	beq	.L8203
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC8
	movt	r1, #:upper16:.LC8
	add	r0, r0, #32
	bl	dev_err
	add	r0, r5, #36
	add	r2, r4, #160
	ldr	r1, [r4, #164]
	bl	__list_add
	ldr	r3, [r4, #168]
	add	r3, r3, #1
	str	r3, [r4, #168]
.L8203:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8207:
	movw	r0, #:lower16:.LC166
	ldr	r1, .L8230
	movt	r0, #:upper16:.LC166
	bl	printk
.L8228:
	mov	r0, r6
	bl	dev_kfree_skb_any
	mov	r3, #0
	mov	r0, r3
	str	r3, [r5]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	ldr	r3, [r3, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L8206:
	mov	r0, r6
	ldr	r1, [r1, #48]
	bl	skb_put
	ldr	r3, [r4, #320]
	tst	r3, #2
	beq	.L8207
	add	r7, r4, #188
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #176]
	add	r1, r4, #172
	add	r2, r4, #236
	mov	r0, #4
	stm	r6, {r1, r3}
	str	r6, [r3]
	ldr	r3, [r4, #180]
	str	r6, [r4, #176]
	ldr	r1, [r4, #200]
	add	r3, r3, #1
	str	r3, [r4, #180]
	bl	queue_work_on
	b	.L8208
.L8229:
	add	r0, r5, #36
	add	r2, r4, #160
	ldr	r1, [r4, #164]
	bl	__list_add
	ldr	r3, [r4, #168]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #168]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L8231:
	.align	2
.L8230:
	.word	.LANCHOR3-3064
	.fnend
	.size	rmnet_sdio_complete_epout, .-rmnet_sdio_complete_epout
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_command_complete, %function
rmnet_sdio_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r6, [r4, #84]
	cmp	r2, #0
	blt	.L8244
	ldr	r3, [r4, #324]
	tst	r3, #2
	bne	.L8245
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8245:
	movw	r3, #:lower16:kmalloc_caches
	mov	r5, r1
	ldr	r7, [r1, #48]
	movt	r3, #:upper16:kmalloc_caches
	ldr	r8, [r3, #24]
	cmp	r8, #0
	beq	.L8235
	mov	r0, r8
	mov	r2, #16
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r8, r0, #0
	beq	.L8237
	mov	r1, #32
	mov	r0, r7
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r8]
	beq	.L8241
	cmn	r8, #4096
	bhi	.L8237
.L8240:
	mov	r2, r7
	ldr	r1, [r5]
	add	r5, r4, #188
	bl	memcpy
	mov	r0, r5
	str	r7, [r8, #4]
	bl	_raw_spin_lock
	add	r2, r4, #108
	ldr	r1, [r4, #112]
	add	r0, r8, #8
	bl	__list_add
	ldr	r3, [r4, #116]
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #116]
	bl	_raw_spin_unlock
	ldrd	r6, [sp, #8]
	add	r2, r4, #220
	mov	r0, #4
	ldr	r1, [r4, #200]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	queue_work_on
.L8235:
	mov	r1, #32
	mov	r0, r7
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r8, #16]
	mov	r8, #16
	bne	.L8240
.L8241:
	mov	r0, r8
	bl	kfree
.L8237:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC553
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC553
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
.L8244:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC126
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC126
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
	.fnend
	.size	rmnet_sdio_command_complete, .-rmnet_sdio_command_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_alloc_qmi.constprop.148, %function
rmnet_smd_alloc_qmi.constprop.148:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:kmalloc_caches
	movt	r4, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	ldr	r0, [r4, #24]
	str	lr, [sp, #12]
	cmp	r0, #0
	beq	.L8250
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L8253
.L8247:
	ldr	r0, [r4, #44]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5]
	beq	.L8246
	mov	r2, #2048
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	beq	.L8254
.L8246:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8250:
	mov	r5, #16
	b	.L8247
.L8254:
	mov	r0, r5
	mvn	r5, #11
	bl	kfree
	b	.L8246
.L8253:
	mvn	r5, #11
	b	.L8246
	.fnend
	.size	rmnet_smd_alloc_qmi.constprop.148, .-rmnet_smd_alloc_qmi.constprop.148
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_close, %function
modem_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	modem_close, .-modem_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_control_complete, %function
audio_control_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	audio_control_complete, .-audio_control_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	unbind_config.constprop.153, %function
unbind_config.constprop.153:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #36
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	b	.L8259
.L8260:
	bl	list_del
	ldr	r3, [r4, #-36]
	cmp	r3, #0
	bne	.L8268
.L8259:
	ldr	r4, [r5, #36]
	cmp	r4, r6
	mov	r0, r4
	sub	r7, r4, #72
	bne	.L8260
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L8261
	mov	r0, r5
	blx	r3
.L8261:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8268:
	mov	r1, r7
	mov	r0, r5
	blx	r3
	b	.L8259
	.fnend
	.size	unbind_config.constprop.153, .-unbind_config.constprop.153
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_unbind, %function
composite_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	add	r7, r0, #32
	str	r8, [sp, #16]
	mov	r8, r0
	mov	r0, r7
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	ldr	r3, [r0, #12]
	mov	r4, r0
	cmp	r3, #0
	bne	.L8286
.L8270:
	ldr	r0, [r4, #36]
	add	r6, r4, #36
	cmp	r6, r0
	beq	.L8271
.L8272:
	sub	r5, r0, #28
	bl	list_del
	mov	r0, r5
	bl	unbind_config.constprop.153
	ldr	r0, [r4, #36]
	cmp	r6, r0
	bne	.L8272
.L8271:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r3, [r5, #2236]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L8273
	mov	r0, r4
	blx	r3
.L8273:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L8274
	ldr	r0, [r3]
	bl	kfree
	ldr	r0, [r8, #4]
	ldr	r1, [r4, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L8274:
	ldr	r1, .L8287
	mov	r0, r7
	bl	device_remove_file
	mov	r0, r4
	bl	kfree
	mov	r0, r7
	mov	r1, #0
	bl	dev_set_drvdata
	mov	r3, #0
	str	r3, [r5, #2236]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8286:
	movw	r0, #:lower16:.LC554
	movw	r1, #1556
	movt	r0, #:upper16:.LC554
	bl	warn_slowpath_null
	b	.L8270
.L8288:
	.align	2
.L8287:
	.word	.LANCHOR0+1696
	.fnend
	.size	composite_unbind, .-composite_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_bind, %function
composite_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	movw	r6, #:lower16:kmalloc_caches
	movt	r6, #:upper16:kmalloc_caches
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r6, #28]
	.pad #8
	sub	sp, sp, #8
	cmp	r0, #0
	beq	.L8306
	mov	r2, #68
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L8335
.L8290:
	mov	r3, #0
	add	r7, r5, #32
	str	r5, [r4]
	mov	r1, r4
	mov	r0, r7
	str	r3, [r4, #60]
	bl	dev_set_drvdata
	add	r3, r4, #36
	mov	r1, #208
	str	r3, [r4, #36]
	str	r3, [r4, #40]
	ldr	r0, [r5, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	mov	r8, r0
	str	r0, [r4, #4]
	beq	.L8292
	ldr	r0, [r6, #48]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L8293
	mov	r2, #4096
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L8293:
	str	r0, [r8]
	ldr	r2, [r4, #4]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L8292
	movw	r3, #:lower16:composite_setup_complete
	movw	r6, #:lower16:.LANCHOR1
	movt	r3, #:upper16:composite_setup_complete
	movt	r6, #:upper16:.LANCHOR1
	ldr	r0, [r6, #2236]
	str	r3, [r2, #28]
	ldr	r2, [r5, #4]
	mov	r3, #4096
	str	r4, [r2]
	ldr	r1, [r4]
	str	r3, [r4, #8]
	str	r0, [r4, #44]
	ldr	r3, [r1, #8]!
	cmp	r1, r3
	sub	r3, r3, #12
	beq	.L8294
	mov	r0, #0
.L8295:
	ldr	r2, [r3, #12]
	str	r0, [r3]
	cmp	r1, r2
	sub	r3, r2, #12
	bne	.L8295
.L8294:
	mov	r2, #0
	mov	r0, r4
	ldr	r3, [r6, #3700]
	str	r2, [r6, #3600]
	blx	r3
	subs	r8, r0, #0
	bge	.L8336
.L8296:
	mov	r0, r5
	bl	composite_unbind
.L8289:
	mov	r0, r8
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8292:
	mvn	r8, #11
	b	.L8296
.L8306:
	mov	r4, #16
	b	.L8290
.L8335:
	mvn	r8, #11
	b	.L8289
.L8336:
	ldr	r1, [r6, #2236]
	movw	r3, #3704
	ldrh	r2, [r6, r3]
	movw	r3, #3706
	ldrh	r3, [r6, r3]
	ldr	r1, [r1, #12]
	cmp	r2, #0
	ldr	r8, [r1]	@ unaligned
	ldr	lr, [r1, #4]	@ unaligned
	ldr	ip, [r1, #8]	@ unaligned
	ldr	r0, [r1, #12]	@ unaligned
	str	r8, [r4, #17]	@ unaligned
	ldr	r8, .L8339
	str	lr, [r4, #21]	@ unaligned
	str	ip, [r4, #25]	@ unaligned
	str	r0, [r4, #29]	@ unaligned
	ldrh	r1, [r1, #16]	@ unaligned
	movw	r0, #:lower16:.LC555
	strhne	r2, [r4, #25]	@ unaligned
	cmp	r3, #0
	movt	r0, #:upper16:.LC555
	strhne	r3, [r4, #27]	@ unaligned
	strh	r1, [r4, #33]	@ unaligned
	movw	r1, #3708
	ldrh	r1, [r6, r1]
	cmp	r1, #0
	strhne	r1, [r4, #29]	@ unaligned
	sub	r1, r8, #12
	bl	printk
	movw	r3, #3708
	movw	r0, #:lower16:.LC556
	ldrh	r2, [r6, r3]
	sub	r1, r8, #12
	movt	r0, #:upper16:.LC556
	bl	printk
	ldr	r3, [r6, #3712]
	cmp	r3, #0
	beq	.L8337
.L8300:
	add	r1, r4, #31
	mov	r0, r4
	bl	override_id
	strb	r0, [r4, #49]
.L8301:
	movw	r0, #:lower16:.LC558
	sub	r1, r8, #12
	ldr	r2, .L8339+4
	movt	r0, #:upper16:.LC558
	bl	printk
	ldr	r3, [r6, #3768]
	cmp	r3, #0
	beq	.L8338
.L8302:
	add	r1, r4, #32
	mov	r0, r4
	bl	override_id
	strb	r0, [r4, #50]
.L8303:
	ldr	r3, [r6, #3772]
	cmp	r3, #0
	beq	.L8304
	add	r1, r4, #33
	mov	r0, r4
	bl	override_id
	strb	r0, [r4, #51]
.L8304:
	ldr	r3, [r6, #2236]
	ldrb	r3, [r3, #24]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L8305
	ldrb	r3, [r4, #33]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L8305
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC559
	movt	r1, #:upper16:.LC559
	add	r0, r0, #32
	bl	dev_warn
.L8305:
	mov	r0, r7
	ldr	r1, .L8339+8
	bl	device_create_file
	subs	r8, r0, #0
	bne	.L8296
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC560
	ldr	r3, [r6, #2236]
	movt	r1, #:upper16:.LC560
	add	r0, r0, #32
	ldr	r2, [r3]
	bl	_dev_info
	b	.L8289
.L8338:
	ldrb	r3, [r4, #32]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L8303
	ldr	r3, [r6, #2236]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	bne	.L8302
	b	.L8303
.L8337:
	ldrb	r3, [r4, #31]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L8301
	ldr	r3, [r6, #2236]
	ldr	r3, [r3, #8]
	cmp	r3, #0
	bne	.L8300
	ldrb	r3, [r6, #3716]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L8300
	ldr	r3, .L8339+12
	movw	r2, #:lower16:.LC557
	mov	r1, #50
	ldr	ip, [r5, #28]
	movt	r2, #:upper16:.LC557
	ldr	r0, .L8339+4
	stm	sp, {r3, ip}
	sub	r3, r3, #130
	bl	scnprintf
	b	.L8300
.L8340:
	.align	2
.L8339:
	.word	.LANCHOR3-3024
	.word	.LANCHOR1+3716
	.word	.LANCHOR0+1696
	.word	init_uts_ns+134
	.fnend
	.size	composite_bind, .-composite_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_setup, %function
composite_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	mov	r6, r0
	strd	r8, [sp, #16]
	add	r0, r0, #32
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #60
	sub	sp, sp, #60
	bl	dev_get_drvdata
	ldrh	r9, [r7, #6]	@ unaligned
	ldrh	fp, [r7, #4]	@ unaligned
	ldrh	r10, [r7, #2]	@ unaligned
	ldr	r4, [r0, #4]
	cmp	r9, #4096
	bhi	.L8554
	ldrb	r1, [r4, #26]	@ zero_extendqisi2
	movw	r3, #:lower16:composite_setup_complete
	mov	r5, r0
	movt	r3, #:upper16:composite_setup_complete
	mov	r0, #0
	uxth	r8, fp
	str	r0, [r4, #4]
	bfc	r1, #1, #1
	uxtb	r2, r8
	strb	r1, [r4, #26]
	str	r3, [r4, #28]
	ldr	r3, [r6, #4]
	str	r5, [r3]
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	cmp	r3, #11
	ldrls	pc, [pc, r3, asl #2]
	b	.L8344
.L8346:
	.word	.L8345
	.word	.L8347
	.word	.L8344
	.word	.L8347
	.word	.L8344
	.word	.L8344
	.word	.L8348
	.word	.L8344
	.word	.L8349
	.word	.L8350
	.word	.L8351
	.word	.L8352
.L8352:
	ldrb	r3, [r7]	@ zero_extendqisi2
	ldr	r0, [r5, #12]
	cmp	r3, #1
	beq	.L8702
.L8354:
	and	r3, r3, #31
	cmp	r3, #1
	beq	.L8500
.L8705:
	cmp	r3, #2
	bne	.L8499
	mov	r1, r0
	asr	r3, r8, #3
	ldr	ip, [r1, #36]!
	and	r8, r8, #15
	and	r3, r3, #16
	orr	r3, r3, r8
	cmp	r1, ip
	sub	r2, ip, #72
	beq	.L8499
	ldr	ip, [ip, #8]
	lsr	ip, ip, r3
	tst	ip, #1
	bne	.L8504
	mov	r8, #1
	lsl	r8, r8, r3
	b	.L8505
.L8506:
	ldr	r3, [r3, #8]
	tst	r8, r3
	bne	.L8504
.L8505:
	ldr	r3, [r2, #72]
	cmp	r1, r3
	sub	r2, r3, #72
	bne	.L8506
.L8499:
	cmp	r0, #0
	beq	.L8554
.L8503:
	ldr	r3, [r0, #16]
	cmp	r3, #0
	beq	.L8554
	mov	r1, r7
	blx	r3
	mov	r7, r0
	movw	r3, #32767
	cmp	r7, r3
	beq	.L8703
.L8341:
	mov	r0, r7
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8345:
	ldr	r1, [r6, #20]
	ldrb	r3, [r7]	@ zero_extendqisi2
	cmp	r1, #4
	bls	.L8697
	cmp	r3, #129
	bne	.L8697
	ldr	r1, [r4]
	mov	r0, #0
	cmp	r2, #15
	movls	r3, #0
	movhi	r3, #1
	cmp	r9, #2
	movls	r9, #0
	movhi	r9, #1
	strb	r0, [r1]
	strb	r0, [r1, #1]
	ldr	r1, [r5, #12]
	cmp	r1, r0
	moveq	r3, #1
	cmp	r3, r0
	beq	.L8704
.L8551:
	mov	r10, #2
	b	.L8367
.L8348:
	ldrb	r3, [r7]	@ zero_extendqisi2
	cmp	r3, #128
	beq	.L8353
.L8697:
	and	r3, r3, #31
	ldr	r0, [r5, #12]
	cmp	r3, #1
	bne	.L8705
.L8500:
	clz	r3, r0
	lsr	r3, r3, #5
	cmp	r2, #15
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L8499
	add	r2, r2, #12
	ldr	r2, [r0, r2, lsl #2]
	cmp	r2, #0
	beq	.L8503
.L8502:
	ldr	r3, [r2, #52]
	cmp	r3, #0
	beq	.L8499
	mov	r1, r7
	mov	r0, r2
	blx	r3
	mov	r7, r0
	movw	r3, #32767
	cmp	r7, r3
	bne	.L8341
.L8703:
	ldr	r3, [r5, #56]
	add	r3, r3, #1
	str	r3, [r5, #56]
	b	.L8341
.L8347:
	ldr	r1, [r6, #20]
	ldrb	r3, [r7]	@ zero_extendqisi2
	cmp	r1, #4
	bls	.L8697
	cmp	r3, #1
	bne	.L8697
	cmp	r10, #0
	bne	.L8680
	ldr	r1, [r5, #12]
	cmp	r2, #15
	movls	r3, #0
	movhi	r3, #1
	cmp	r1, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L8554
	add	r2, r2, #12
	ldr	r0, [r1, r2, lsl #2]
	cmp	r0, #0
	beq	.L8554
	ldr	r3, [r0, #68]
	cmp	r3, #0
	beq	.L8699
	lsr	r1, r8, #8
	blx	r3
	subs	r7, r0, #0
	blt	.L8498
.L8698:
	movw	r8, #32767
	subs	r8, r7, r8
	movne	r8, #1
.L8392:
	cmp	r8, #0
	beq	.L8355
.L8509:
	cmp	r9, r7
	mov	r10, r7
	movle	r9, #0
	movgt	r9, #1
	b	.L8367
.L8350:
	ldrb	r3, [r7]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L8697
	add	r3, r5, #60
	mov	r0, r3
	str	r3, [sp, #12]
	bl	_raw_spin_lock
	ldr	r7, [r5]
	ldr	r3, [r5, #12]
	mov	fp, r7
	cmp	r3, #0
	beq	.L8441
	ldrb	r2, [r3, #20]	@ zero_extendqisi2
	cmp	r10, r2
	beq	.L8685
	cmp	r10, #0
	beq	.L8706
.L8510:
	mov	r3, r5
	str	fp, [sp, #16]
	mov	fp, r6
	ldr	r8, [r3, #36]!
	mov	r6, r5
	mov	r5, r4
	sub	r8, r8, #28
	mov	r4, r3
	b	.L8445
.L8454:
	ldrb	r2, [r8, #20]	@ zero_extendqisi2
	cmp	r10, r2
	beq	.L8696
	bl	check_config
	cmp	r0, #0
	bne	.L8696
	ldr	r8, [r8, #28]
	sub	r8, r8, #28
.L8445:
	add	r2, r8, #28
	mov	r0, r10
	cmp	r2, r4
	bne	.L8454
	mov	r4, r5
	mvn	r7, #21
	mov	r5, r6
	mov	r6, fp
	ldr	fp, [sp, #16]
	b	.L8455
.L8349:
	ldrb	r3, [r7]	@ zero_extendqisi2
	ldr	r0, [r5, #12]
	cmp	r3, #128
	bne	.L8354
	cmp	r0, #0
	beq	.L8483
	bl	get_config_number
	ldr	r3, [r4]
	add	r0, r0, #1
	strb	r0, [r3]
.L8484:
	adds	r10, r9, #0
	movne	r10, #1
	cmp	r9, r10
	movls	r9, #0
	movhi	r9, #1
	b	.L8367
.L8351:
	ldrb	r3, [r7]	@ zero_extendqisi2
	ldr	r0, [r5, #12]
	cmp	r3, #129
	bne	.L8354
	clz	r3, r0
	lsr	r3, r3, #5
	cmp	r2, #15
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L8554
	add	r2, r2, #12
	ldr	r0, [r0, r2, lsl #2]
	cmp	r0, #0
	beq	.L8554
	ldr	r7, [r0, #44]
	cmp	r7, #0
	beq	.L8490
	mov	r1, r8
	blx	r7
	subs	r7, r0, #0
	blt	.L8341
.L8490:
	adds	r10, r9, #0
	ldr	r3, [r4]
	movne	r10, #1
	cmp	r9, r10
	movls	r9, #0
	movhi	r9, #1
	strb	r7, [r3]
.L8367:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r10, [r4, #4]
	mov	r2, #32
	mov	r1, r4
	bfi	r3, r9, #1, #1
	strb	r3, [r4, #26]
	ldr	r0, [r6, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	movlt	r3, #0
	strlt	r3, [r4, #44]
	b	.L8341
.L8344:
	ldrb	r3, [r7]	@ zero_extendqisi2
	b	.L8697
.L8504:
	cmp	r2, #0
	bne	.L8502
	b	.L8499
.L8361:
	ldr	r3, [r6, #20]
	cmp	r3, #2
	bls	.L8554
	ldr	r3, [r6, #16]
	cmp	r3, #4
	bls	.L8358
.L8554:
	mvn	r7, #94
	b	.L8341
.L8702:
	cmp	r2, #15
	movls	r3, #0
	movhi	r3, #1
	cmp	r0, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L8554
	add	r2, r2, #12
	ldr	r0, [r0, r2, lsl #2]
	cmp	r0, #0
	beq	.L8554
	cmp	r10, #0
	bne	.L8707
	ldr	r3, [r0, #44]
	cmp	r3, #0
	ldrne	r3, [r0, #40]
	beq	.L8699
.L8486:
	mov	r2, r10
	mov	r1, r8
	blx	r3
	movw	r3, #32767
	mov	r7, r0
	cmp	r0, r3
	beq	.L8488
	mvn	r8, r0
	lsr	r8, r8, #31
	b	.L8392
.L8353:
	lsr	r7, r10, #8
	sub	r3, r7, #1
	cmp	r3, #14
	ldrls	pc, [pc, r3, asl #2]
	b	.L8680
.L8357:
	.word	.L8356
	.word	.L8358
	.word	.L8359
	.word	.L8680
	.word	.L8680
	.word	.L8360
	.word	.L8361
	.word	.L8680
	.word	.L8680
	.word	.L8680
	.word	.L8680
	.word	.L8680
	.word	.L8680
	.word	.L8680
	.word	.L8362
.L8358:
	mov	r0, r9
	bl	set_config_mode
	ldr	r3, [r5]
	ldr	fp, [r3, #16]
	cmp	fp, #5
	beq	.L8369
	ldr	r3, [r3, #20]
	cmp	r3, #2
	movls	fp, #0
	bls	.L8369
	cmp	fp, #3
	beq	.L8370
	cmp	r7, #7
	moveq	fp, #3
	movne	fp, #0
.L8369:
	uxtb	r0, r10
	bl	set_config_number
	mov	r2, r5
	ldr	r8, [r2, #36]!
	cmp	r2, r8
	sub	r8, r8, #28
	bne	.L8371
	b	.L8390
.L8709:
	cmp	fp, #5
	bne	.L8673
	tst	r3, #1
	beq	.L8375
.L8376:
	cmp	r0, #0
	sub	r0, r0, #1
	beq	.L8708
.L8375:
	ldr	r8, [r8, #28]
	cmp	r2, r8
	sub	r8, r8, #28
	beq	.L8390
.L8371:
	cmp	fp, #3
	ldrb	r3, [r8, #45]	@ zero_extendqisi2
	bne	.L8709
	tst	r3, #2
	bne	.L8376
	b	.L8375
.L8362:
	ldr	r3, [r6, #20]
	cmp	r3, #4
	bhi	.L8435
	ldrb	r3, [r6, #377]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L8554
.L8435:
	ldr	r0, [r5, #4]
	mov	r3, #0
	mov	ip, #5
	mov	r1, #15
	mov	r10, #12
	mov	r2, #1
	mov	r8, #7
	mov	lr, #2
	ldr	r7, [r0]
	mov	r0, #16
	strb	ip, [r7]
	strb	r1, [r7, #1]
	strb	ip, [r7, #2]
	strb	r3, [r7, #3]
	strb	r3, [r7, #4]
	ldr	ip, [r5, #4]
	ldr	ip, [ip]
	strh	r10, [r7, #2]	@ movhi
	strb	r2, [r7, #4]
	strb	r8, [ip, #5]
	strb	r0, [ip, #6]
	strb	lr, [ip, #7]
	strb	r3, [ip, #8]
	strb	r3, [ip, #9]
	strb	r3, [ip, #10]
	strb	r3, [ip, #11]
	ldr	ip, [r5]
	ldr	ip, [ip, #20]
	cmp	ip, #4
	bls	.L8436
	ldr	r8, [r5, #4]
	mov	fp, #10
	ldrh	ip, [r7, #2]	@ unaligned
	ldrb	lr, [r7, #4]	@ zero_extendqisi2
	ldr	r10, [r8]
	add	r8, ip, fp
	add	lr, lr, r2
	strh	r8, [r7, #2]	@ movhi
	add	r8, r10, ip
	strb	lr, [r7, #4]
	strb	fp, [r10, ip]
	strb	r0, [r8, #1]
	mov	r0, #3
	strb	r0, [r8, #2]
	strb	r3, [r8, #3]
	strb	r1, [r8, #4]
	strb	r3, [r8, #5]
	strb	r2, [r8, #6]
	ldr	r3, [r5]
	ldr	r3, [r3]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L8437
	add	r0, sp, #48
	blx	r3
.L8438:
	ldrb	r3, [sp, #48]	@ zero_extendqisi2
	strb	r3, [r8, #7]
	ldrh	r3, [sp, #50]
	strh	r3, [r8, #8]	@ unaligned
.L8436:
	ldrh	r7, [r7, #2]	@ unaligned
	cmp	r9, r7
	bcs	.L8698
.L8439:
	mov	r10, r9
	mov	r9, #0
	b	.L8367
.L8360:
	ldr	r3, [r6, #20]
	cmp	r3, #2
	bls	.L8554
	ldr	r3, [r6, #16]
	cmp	r3, #4
	bhi	.L8554
	ldr	ip, [r5, #4]
	mov	r3, #6
	mov	r2, #10
	mov	r1, r3
	mov	r0, r5
	ldr	r7, [ip]
	strb	r2, [r7]
	strb	r3, [r7, #1]
	ldrh	r3, [r5, #19]	@ unaligned
	strh	r3, [r7, #2]	@ unaligned
	ldrb	r3, [r5, #21]	@ zero_extendqisi2
	strb	r3, [r7, #4]
	ldrb	r3, [r5, #22]	@ zero_extendqisi2
	strb	r3, [r7, #5]
	ldrb	r3, [r5, #23]	@ zero_extendqisi2
	strb	r3, [r7, #6]
	ldr	r3, [r5]
	ldr	r3, [r3, #4]
	ldrh	r3, [r3, #20]
	strb	r3, [r7, #7]
	bl	count_configs
	cmp	r9, #10
	mov	r3, #0
	strb	r0, [r7, #8]
	movlt	r10, r9
	movge	r10, #10
	cmp	r9, r10
	strb	r3, [r7, #9]
	movle	r9, #0
	movgt	r9, #1
	b	.L8367
.L8359:
	mov	r0, r9
	bl	set_string_mode
	ands	r3, r10, #255
	mov	r10, r3
	ldr	r3, [r4]
	str	r3, [sp, #12]
	beq	.L8710
	ldrb	r3, [r5, #49]	@ zero_extendqisi2
	mov	r2, r10
	cmp	r10, r3
	beq	.L8711
	ldrb	r3, [r5, #50]	@ zero_extendqisi2
	cmp	r10, r3
	beq	.L8712
	ldrb	r3, [r5, #51]	@ zero_extendqisi2
	cmp	r10, r3
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	beq	.L8675
.L8424:
	ldr	r3, [r3, #2236]
	ldr	r0, [r3, #16]
	cmp	r0, #0
	beq	.L8427
	mov	r3, r10
	mov	r2, r8
	ldr	r1, [sp, #12]
	bl	lookup_string
	subs	r7, r0, #0
	ble	.L8427
.L8419:
	uxth	r3, r7
	cmp	r3, r9
	bhi	.L8439
.L8434:
	uxth	r7, r7
	movw	r8, #32767
	subs	r8, r7, r8
	movne	r8, #1
	b	.L8392
.L8680:
	mvn	r7, #94
.L8355:
	movw	r3, #32767
	sub	r3, r7, r3
	clz	r3, r3
	lsr	r3, r3, #5
.L8489:
	cmp	r9, #0
	moveq	r3, #0
	cmp	r3, #0
	beq	.L8341
	cmp	r5, #0
	movweq	r7, #32767
	beq	.L8341
	movw	r2, #:lower16:.LC571
	movw	r0, #:lower16:.LC554
	ldr	r3, .L8726
	movt	r2, #:upper16:.LC571
	movt	r0, #:upper16:.LC554
	movw	r1, #1500
	movw	r7, #32767
	bl	warn_slowpath_fmt
	b	.L8341
.L8673:
	tst	r3, #4
	bne	.L8376
	b	.L8375
.L8483:
	ldr	r3, [r4]
	strb	r0, [r3]
	b	.L8484
.L8704:
	add	r2, r2, #12
	ldr	r0, [r1, r2, lsl #2]
	cmp	r0, #0
	beq	.L8551
	ldr	r3, [r0, #64]
	cmp	r3, #0
	beq	.L8493
	blx	r3
	subs	r3, r0, #0
	blt	.L8551
.L8493:
	ldr	r2, [r4]
	ubfx	r1, r3, #8, #8
	mov	r10, #2
	strb	r3, [r2]
	strb	r1, [r2, #1]
	b	.L8367
.L8427:
	mov	r2, r5
	ldr	r3, [r2, #36]!
	cmp	r2, r3
	str	r2, [sp, #20]
	sub	r3, r3, #28
	beq	.L8390
	mov	r7, r6
	ldr	fp, [sp, #12]
	mov	r6, r3
	str	r5, [sp, #12]
	mov	r5, r10
	str	r4, [sp, #16]
.L8426:
	ldr	r0, [r6, #4]
	cmp	r0, #0
	beq	.L8431
	mov	r3, r5
	mov	r2, r8
	mov	r1, fp
	bl	lookup_string
	cmp	r0, #0
	bgt	.L8695
.L8431:
	mov	r10, r6
	ldr	r4, [r10, #36]!
	cmp	r10, r4
	sub	r4, r4, #72
	beq	.L8430
.L8429:
	ldr	ip, [r4, #4]
	mov	r3, r5
	mov	r2, r8
	mov	r1, fp
	subs	r0, ip, #0
	beq	.L8433
	bl	lookup_string
	cmp	r0, #0
	bgt	.L8695
.L8433:
	ldr	r4, [r4, #72]
	cmp	r10, r4
	sub	r4, r4, #72
	bne	.L8429
.L8430:
	ldr	r3, [r6, #28]
	ldr	r2, [sp, #20]
	sub	r6, r3, #28
	cmp	r2, r3
	bne	.L8426
.L8390:
	mvn	r7, #21
	b	.L8341
.L8707:
	ldr	r3, [r0, #40]
	cmp	r3, #0
	bne	.L8486
	b	.L8554
.L8708:
	ldr	r2, [r5, #4]
	mov	r3, #9
	ldr	r2, [r2]
	strb	r3, [r2]
	add	r3, r2, r3
	strb	r7, [r2, #1]
	mov	r7, r2
	str	r3, [sp, #12]
	ldrb	r3, [r8, #44]	@ zero_extendqisi2
	str	r2, [sp, #16]
	strb	r3, [r2, #4]
	bl	get_config_number
	add	r0, r0, #1
	strb	r0, [r7, #5]
	ldrb	r3, [r8, #21]	@ zero_extendqisi2
	strb	r3, [r7, #6]
	ldrb	r3, [r8, #22]	@ zero_extendqisi2
	mvn	r3, r3, lsl #25
	mvn	r3, r3, lsr #25
	strb	r3, [r7, #7]
	ldrb	r3, [r8, #23]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L8378
	ldr	r2, [r8, #24]
	mov	r3, #500
	ldr	r2, [r2, #64]
	sdiv	r3, r3, r2
	uxtb	r3, r3
.L8378:
	ldr	r2, [sp, #16]
	strb	r3, [r2, #8]
	ldr	r2, [r8, #8]
	cmp	r2, #0
	beq	.L8532
	ldr	r10, [sp, #12]
	movw	r1, #4087
	mov	r0, r10
	bl	usb_descriptor_fillbuf.part.71
	subs	r7, r0, #0
	blt	.L8341
	add	r2, r10, r7
	rsb	r3, r7, #4080
	add	r3, r3, #7
	str	r2, [sp, #12]
	mov	r2, r3
.L8379:
	mov	r3, r8
	ldr	r10, [r3, #36]!
	cmp	r3, r10
	sub	r10, r10, #72
	beq	.L8381
	str	r4, [sp, #20]
	ldr	r4, [sp, #12]
	str	r9, [sp, #24]
	mov	r9, r3
	str	r5, [sp, #28]
	mov	r5, r2
	b	.L8388
.L8715:
	cmp	fp, #5
	bne	.L8674
	ldr	r2, [r10, #12]
.L8386:
	cmp	r2, #0
	beq	.L8382
	mov	r1, r5
	mov	r0, r4
	bl	usb_descriptor_fillbuf.part.71
	subs	r7, r0, #0
	blt	.L8341
	mov	r3, r8
	mov	r2, r5
	str	fp, [sp]
	mov	r1, r4
	mov	r0, r10
	bl	change_conf
	cmp	r0, #0
	blt	.L8713
	sub	r5, r5, r7
	add	r4, r4, r7
.L8382:
	ldr	r10, [r10, #72]
	cmp	r9, r10
	sub	r10, r10, #72
	beq	.L8714
.L8388:
	ldr	r0, [r10]
	bl	is_available_function
	cmp	r0, #0
	beq	.L8382
	cmp	fp, #3
	bne	.L8715
	ldr	r2, [r10, #8]
	b	.L8386
.L8674:
	ldr	r2, [r10, #16]
	b	.L8386
.L8488:
	ldr	r2, [r5, #56]
	mov	r3, #1
	add	r2, r2, r3
	str	r2, [r5, #56]
	b	.L8489
.L8710:
	mov	r0, r3
	mov	r1, #256
	mov	r7, r3
	bl	__memzero
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #3
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2236]
	strb	r2, [r7, #1]
	ldr	ip, [r3, #16]
	cmp	ip, #0
	beq	.L8394
	ldr	r3, [ip]
	add	lr, r7, #2
	cmp	r3, #0
	beq	.L8394
	add	r0, r7, #254
.L8399:
	ldrh	r2, [r7, #2]
	ldrh	r1, [r3]
	cmp	r2, #0
	beq	.L8534
	cmp	r0, lr
	bls	.L8534
	cmp	r1, r2
	beq	.L8396
	mov	r3, lr
	b	.L8397
.L8716:
	cmp	r0, r3
	bls	.L8395
	cmp	r1, r2
	beq	.L8396
.L8397:
	ldrh	r2, [r3, #2]!
	cmp	r2, #0
	bne	.L8716
.L8395:
	strh	r1, [r3]	@ movhi
.L8396:
	ldr	r3, [ip, #4]!
	cmp	r3, #0
	bne	.L8399
.L8394:
	mov	r3, r5
	ldr	r8, [r3, #36]!
	cmp	r3, r8
	sub	r8, r8, #28
	beq	.L8400
	ldr	r2, [sp, #12]
	strd	r4, [sp, #16]
	mov	r5, r3
	str	r6, [sp, #24]
	add	r10, r2, #254
	mov	r4, r2
.L8415:
	ldr	ip, [r8, #4]
	cmp	ip, #0
	beq	.L8401
	ldr	r3, [ip]
	add	lr, r4, #2
	cmp	r3, #0
	beq	.L8401
.L8406:
	ldrh	r2, [r4, #2]
	ldrh	r1, [r3]
	cmp	r2, #0
	beq	.L8536
	cmp	lr, r10
	bcs	.L8536
	cmp	r1, r2
	beq	.L8403
	mov	r3, lr
	b	.L8404
.L8717:
	cmp	r3, r10
	bcs	.L8402
	cmp	r1, r2
	beq	.L8403
.L8404:
	ldrh	r2, [r3, #2]!
	cmp	r2, #0
	bne	.L8717
.L8402:
	strh	r1, [r3]	@ movhi
.L8403:
	ldr	r3, [ip, #4]!
	cmp	r3, #0
	bne	.L8406
.L8401:
	mov	r7, r8
	ldr	fp, [r7, #36]!
	cmp	r7, fp
	sub	fp, fp, #72
	beq	.L8407
	add	r6, r4, #2
.L8414:
	ldr	r0, [fp]
	bl	is_available_function
	cmp	r0, #0
	beq	.L8408
	ldr	r0, [fp, #4]
	cmp	r0, #0
	beq	.L8408
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L8408
.L8413:
	ldrh	r2, [r4, #2]
	ldrh	r1, [r3]
	cmp	r2, #0
	beq	.L8538
	cmp	r6, r10
	bcs	.L8538
	cmp	r1, r2
	beq	.L8410
	mov	r3, r6
	b	.L8411
.L8718:
	cmp	r3, r10
	bcs	.L8409
	cmp	r1, r2
	beq	.L8410
.L8411:
	ldrh	r2, [r3, #2]!
	cmp	r2, #0
	bne	.L8718
.L8409:
	strh	r1, [r3]	@ movhi
.L8410:
	ldr	r3, [r0, #4]!
	cmp	r3, #0
	bne	.L8413
.L8408:
	ldr	fp, [fp, #72]
	cmp	r7, fp
	sub	fp, fp, #72
	bne	.L8414
.L8407:
	ldr	r8, [r8, #28]
	cmp	r5, r8
	sub	r8, r8, #28
	bne	.L8415
	ldrd	r4, [sp, #16]
	ldr	r6, [sp, #24]
.L8400:
	mov	r3, #0
.L8416:
	ldr	r2, [sp, #12]
	add	r2, r2, r3, lsl #1
	ldrh	r2, [r2, #2]	@ unaligned
	cmp	r2, #0
	bne	.L8418
	cmp	r3, #0
	beq	.L8390
.L8417:
	add	r3, r3, #1
	ldr	r2, [sp, #12]
	lsl	r3, r3, #1
	uxtb	r3, r3
	mov	r7, r3
	strb	r3, [r2]
	b	.L8419
.L8538:
	mov	r3, r6
	b	.L8409
.L8536:
	mov	r3, lr
	b	.L8402
.L8714:
	str	r4, [sp, #12]
	ldr	r4, [sp, #20]
	ldr	r9, [sp, #24]
	ldr	r5, [sp, #28]
.L8381:
	mov	r0, r8
	ldr	r2, [sp, #12]
	ldr	r8, [sp, #16]
	sub	r7, r2, r8
	mov	r1, r8
	bl	set_interface_count
	uxth	r3, r7
	cmp	r7, #0
	strh	r3, [r8, #2]	@ unaligned
	blt	.L8341
	cmp	r9, r3
	bcs	.L8434
	b	.L8439
.L8695:
	mov	r6, r7
	ldr	r5, [sp, #12]
	mov	r7, r0
	ldr	r4, [sp, #16]
	b	.L8419
.L8532:
	movw	r3, #4087
	mov	r2, r3
	b	.L8379
.L8711:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #3712]
	cmp	r1, #0
	bne	.L8421
	ldr	r2, [r3, #2236]
	ldr	r3, .L8726+4
	ldr	r1, [r2, #8]
	cmp	r1, #0
	moveq	r1, r3
.L8421:
	mvn	r0, #0
	add	r3, sp, #48
	ldr	r2, [sp, #12]
	str	r1, [sp, #52]
	mov	r1, #255
	strh	fp, [sp, #40]	@ movhi
	strb	r0, [sp, #48]
	add	r0, sp, #40
	str	r3, [sp, #44]
	bl	usb_gadget_get_string.part.69
	subs	r7, r0, #0
	blt	.L8341
	b	.L8419
.L8712:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #3768]
	cmp	r1, #0
	ldreq	r2, [r3, #2236]
	ldreq	r1, [r2, #4]
	bne	.L8421
.L8423:
	cmp	r1, #0
	beq	.L8424
	b	.L8421
.L8418:
	add	r3, r3, #1
	cmp	r3, #127
	bne	.L8416
	b	.L8417
.L8534:
	mov	r3, lr
	b	.L8395
.L8370:
	cmp	r7, #7
	moveq	fp, #0
	b	.L8369
.L8675:
	ldr	r1, [r3, #3772]
	b	.L8423
.L8498:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC570
	adds	r9, r9, #0
	mov	r2, r7
	movt	r1, #:upper16:.LC570
	movne	r9, #1
	add	r0, r0, #32
	bl	dev_err
	b	.L8367
.L8699:
	adds	r9, r9, #0
	movne	r9, #1
	b	.L8367
.L8437:
	mov	r3, #500
	strb	r2, [sp, #48]
	strh	r3, [sp, #50]	@ movhi
	b	.L8438
.L8713:
	movw	r0, #:lower16:.LC562
	ldr	r1, .L8726+8
	mvn	r7, #21
	movt	r0, #:upper16:.LC562
	bl	printk
	b	.L8341
.L8356:
	mov	r1, #1
	mov	r0, r5
	bl	count_configs
	ldr	r2, [r5]
	strb	r0, [r5, #34]
	mov	r3, #2
	ldr	r2, [r2, #4]
	ldrh	r2, [r2, #20]
	strb	r2, [r5, #24]
	str	r3, [r5, #64]
	ldr	r2, [r6, #20]
	cmp	r2, #4
	bls	.L8363
	ldr	r2, [r6, #16]
	cmp	r2, #4
	bls	.L8364
	mov	r0, #0
	mov	r1, #3
	mov	r2, #9
	mov	r3, #8
	strb	r0, [r5, #19]
	strb	r1, [r5, #20]
	strb	r2, [r5, #24]
	str	r3, [r5, #64]
.L8365:
	cmp	r9, #17
	add	r1, r5, #17
	ldr	r0, [r4]
	movls	r10, r9
	movhi	r10, #18
	mov	r2, r10
	bl	memcpy
	movw	r0, #:lower16:.LC561
	movt	r0, #:upper16:.LC561
	bl	printk
	cmp	r9, r10
	movls	r9, #0
	movhi	r9, #1
	b	.L8367
.L8364:
	mov	r2, #16
	strb	r2, [r5, #19]
	strb	r3, [r5, #20]
	b	.L8365
.L8363:
	ldrb	r2, [r6, #377]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L8365
	mov	r2, #1
	strb	r2, [r5, #19]
	strb	r3, [r5, #20]
	b	.L8365
.L8696:
	mov	r4, r5
	mov	r5, r6
	ldr	r3, [r5, #12]
	mov	r6, fp
	ldr	fp, [sp, #16]
	cmp	r3, #0
	beq	.L8448
	ldr	r2, [r3, #36]
	str	fp, [sp, #16]
	mov	r1, #0
	mov	fp, r6
	mov	r6, r4
	sub	r2, r2, #72
	mov	r4, r2
.L8451:
	add	r0, r4, #72
	add	r3, r3, #36
	cmp	r0, r3
	mov	r0, r4
	beq	.L8719
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L8452
	blx	r3
	mov	r1, #0
.L8452:
	ldr	r0, [r4, #72]
	str	r1, [r4, #80]
	ldr	r3, [r5, #12]
	sub	r4, r0, #72
	b	.L8451
.L8719:
	mov	r4, r6
	mov	r6, fp
	ldr	fp, [sp, #16]
	mov	r3, #0
	str	r3, [r5, #12]
	str	r3, [r5, #56]
.L8448:
	ldr	r3, [r5]
	ldr	r0, [fp, #16]
	add	r3, r3, #32
	str	r3, [sp, #16]
	bl	usb_speed_string
	cmp	r8, #0
	mov	r2, r0
	ldr	r3, [sp, #16]
	beq	.L8459
	movw	r1, #:lower16:.LC564
	ldr	ip, [r8]
	mov	r7, #0
	mov	r0, r1
	movw	r1, #:lower16:.LC563
	movt	r0, #:upper16:.LC564
	movt	r1, #:upper16:.LC563
	str	ip, [sp]
	str	r0, [sp, #28]
	movw	r0, #:lower16:.LC566
	movt	r0, #:upper16:.LC566
	str	r0, [sp, #32]
	mov	r0, r3
	mov	r3, r10
	bl	_dev_info
	add	r3, r8, #48
	mov	r0, r7
	str	r8, [r5, #12]
	str	r7, [sp, #16]
	str	r4, [sp, #20]
	str	r3, [sp, #24]
.L8478:
	ldr	r3, [sp, #24]
	ldr	r4, [r3], #4
	cmp	r4, #0
	str	r3, [sp, #24]
	beq	.L8460
	ldr	r3, [fp, #16]
	cmp	r3, #3
	beq	.L8462
	cmp	r3, #5
	str	r3, [sp, #36]
	bne	.L8678
	ldr	r0, [sp, #28]
	bl	power_supply_get_by_name
	ldr	r7, [r4, #12]
	ldr	r3, [sp, #36]
	cmp	r7, #0
	beq	.L8720
	cmp	r0, #0
	beq	.L8721
	add	r2, sp, #56
	mov	r1, #4
	str	r3, [r2, #-8]!
	ldr	r3, [r0, #40]
	blx	r3
.L8468:
	ldr	r2, [r7]
	cmp	r2, #0
	beq	.L8473
	add	r3, r4, #80
	str	fp, [sp, #36]
	mov	fp, r6
	mov	r6, r4
	mov	r4, r3
.L8470:
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	cmp	r1, #5
	bne	.L8469
	ldrb	r2, [r2, #2]	@ zero_extendqisi2
	mov	r1, r4
	asr	r0, r2, #3
	and	r2, r2, #15
	and	r0, r0, #16
	orr	r0, r0, r2
	bl	_set_bit
.L8469:
	ldr	r2, [r7, #4]!
	cmp	r2, #0
	bne	.L8470
	mov	r4, r6
	mov	r6, fp
	ldr	fp, [sp, #36]
.L8473:
	mov	r0, r4
	mov	r2, #0
	ldr	r3, [r4, #40]
	ldr	r1, [sp, #16]
	blx	r3
	cmp	r0, #0
	blt	.L8722
	movw	r3, #32767
	cmp	r0, r3
	beq	.L8723
.L8477:
	ldr	r3, [sp, #16]
	add	r3, r3, #1
	cmp	r3, #16
	str	r3, [sp, #16]
	bne	.L8478
.L8460:
	ldrb	r3, [r8, #23]	@ zero_extendqisi2
	mov	r7, r0
	ldr	r4, [sp, #20]
	cmp	r3, #0
	ldrne	r1, [r5, #64]
	mulne	r1, r1, r3
	moveq	r1, #500
.L8479:
	ldr	r3, [fp]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L8514
	mov	r0, fp
	blx	r3
.L8514:
	ldr	r3, [r5, #56]
	cmp	r3, #0
	bne	.L8518
	ldr	r0, [sp, #12]
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC567
	movt	r0, #:upper16:.LC567
	bl	printk
	cmp	r7, #0
	bne	.L8481
.L8517:
	cmp	r10, #0
	beq	.L8482
	sub	r0, r10, #1
	bl	set_config_number
.L8482:
	ldr	r3, [r6, #16]
	cmp	r3, #5
	beq	.L8520
	adds	r9, r9, #0
	mov	r10, #0
	movne	r9, #1
	b	.L8367
.L8518:
	movw	r7, #32767
.L8465:
	ldr	r0, [sp, #12]
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC567
	movt	r0, #:upper16:.LC567
	bl	printk
.L8481:
	ldr	r3, [r6, #16]
	mvn	r10, r7
	movw	fp, #32767
	lsr	r10, r10, #31
	cmp	r7, fp
	moveq	r8, #0
	andne	r8, r10, #1
	cmp	r3, #5
	bne	.L8392
	bl	get_host_os_type
	cmp	r0, #0
	bne	.L8392
.L8522:
	movw	r10, #:lower16:sec_qcom_usb_rdrv
	mov	r1, #0
	movt	r10, #:upper16:sec_qcom_usb_rdrv
	ldr	r0, [r10]
	bl	__gpio_set_value
	movw	r0, #:lower16:.LC568
	ldr	r1, .L8726
	ldr	r2, [r10]
	movt	r0, #:upper16:.LC568
	bl	printk
	movw	r0, #:lower16:.LC569
	movt	r0, #:upper16:.LC569
	bl	printk
	b	.L8392
.L8520:
	bl	get_host_os_type
	cmp	r0, #0
	beq	.L8556
	mov	r7, #0
	b	.L8509
.L8723:
	ldr	r3, [r5, #56]
	add	r3, r3, #1
	str	r3, [r5, #56]
	b	.L8477
.L8556:
	mov	r7, r0
	mov	r8, #1
	b	.L8522
.L8722:
	ldr	r3, [r5, #12]
	mov	r7, r0
	mov	r10, #0
	ldr	r4, [sp, #20]
	ldr	r8, [r3, #36]
	sub	r8, r8, #72
.L8474:
	add	r3, r3, #36
	add	r2, r8, #72
	cmp	r2, r3
	mov	r0, r8
	beq	.L8724
	ldr	r3, [r8, #48]
	cmp	r3, #0
	beq	.L8475
	blx	r3
.L8475:
	ldr	r2, [r8, #72]
	str	r10, [r8, #80]
	ldr	r3, [r5, #12]
	sub	r8, r2, #72
	b	.L8474
.L8724:
	mov	r3, #0
	str	r3, [r5, #12]
	str	r3, [r5, #56]
.L8455:
	ldr	r3, [fp]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L8465
	mov	r0, fp
	mov	r1, #100
	blx	r3
	b	.L8465
.L8441:
	cmp	r10, #0
	bne	.L8510
.L8444:
	add	r3, fp, #32
	ldr	r0, [r7, #16]
	str	r3, [sp, #16]
	bl	usb_speed_string
	ldr	r3, [sp, #16]
	mov	r2, r0
.L8459:
	movw	ip, #:lower16:.LC572
	movw	r1, #:lower16:.LC563
	movt	ip, #:upper16:.LC572
	mov	r0, r3
	movt	r1, #:upper16:.LC563
	mov	r3, r10
	str	ip, [sp]
	bl	_dev_info
	ldr	r3, [r7]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L8701
	mov	r0, r7
	mov	r1, #100
	blx	r3
.L8701:
	ldr	r3, [r5, #56]
	cmp	r3, #0
	bne	.L8518
.L8685:
	ldr	r0, [sp, #12]
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC567
	movt	r0, #:upper16:.LC567
	bl	printk
	b	.L8517
.L8721:
	ldr	r1, .L8726+12
	ldr	r2, [sp, #28]
	ldr	r0, [sp, #32]
	bl	printk
	b	.L8468
.L8720:
	movw	r0, #:lower16:.LC565
	ldr	r2, [r4]
	mvn	r7, #21
	ldr	r1, .L8726+12
	movt	r0, #:upper16:.LC565
	ldr	r4, [sp, #20]
	bl	printk
	b	.L8465
.L8678:
	ldr	r7, [r4, #16]
	b	.L8468
.L8462:
	ldr	r7, [r4, #8]
	b	.L8468
.L8706:
	ldr	r8, [r3, #36]
	mov	fp, r10
	sub	r8, r8, #72
.L8456:
	add	r3, r3, #36
	add	r2, r8, #72
	cmp	r2, r3
	mov	r0, r8
	beq	.L8725
	ldr	r3, [r8, #48]
	cmp	r3, #0
	beq	.L8457
	blx	r3
.L8457:
	ldr	r2, [r8, #72]
	str	fp, [r8, #80]
	ldr	r3, [r5, #12]
	sub	r8, r2, #72
	b	.L8456
.L8725:
	mov	r3, #0
	ldr	fp, [r5]
	str	r3, [r5, #12]
	str	r3, [r5, #56]
	b	.L8444
.L8727:
	.align	2
.L8726:
	.word	.LANCHOR3-2996
	.word	.LANCHOR1+3716
	.word	.LANCHOR3-3020
	.word	.LANCHOR3-3008
	.fnend
	.size	composite_setup, .-composite_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_function_init, %function
qdss_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	qdss_function_init, .-qdss_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ptp_function_init, %function
ptp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	ptp_function_init, .-ptp_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	uasp_function_init, %function
uasp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	uasp_function_init, .-uasp_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_sdio_open, %function
debug_sdio_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	debug_sdio_open, .-debug_sdio_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_smd_open, %function
debug_smd_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	debug_smd_open, .-debug_smd_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_in_close, %function
f_midi_in_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_in_close, .-f_midi_in_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_out_close, %function
f_midi_out_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_out_close, .-f_midi_out_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_start, %function
acc_hid_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	acc_hid_start, .-acc_hid_start
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_open, %function
acc_hid_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	acc_hid_open, .-acc_hid_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_endless_rx_complete, %function
bam_data_endless_rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	bam_data_endless_rx_complete, .-bam_data_endless_rx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_endless_tx_complete, %function
bam_data_endless_tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	bam_data_endless_tx_complete, .-bam_data_endless_tx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_endless_rx_complete, %function
gbam_endless_rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	gbam_endless_rx_complete, .-gbam_endless_rx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_endless_tx_complete, %function
gbam_endless_tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	gbam_endless_tx_complete, .-gbam_endless_tx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	serial_debug_open, %function
serial_debug_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	serial_debug_open, .-serial_debug_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_rmnet_sdio_open, %function
debug_rmnet_sdio_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	debug_rmnet_sdio_open, .-debug_rmnet_sdio_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	dbg_rmnet_mux_open, %function
dbg_rmnet_mux_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	dbg_rmnet_mux_open, .-dbg_rmnet_mux_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	uasp_function_cleanup, %function
uasp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	uasp_function_cleanup, .-uasp_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_lun_release, %function
fsg_lun_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	fsg_lun_release, .-fsg_lun_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_stop, %function
acc_hid_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	acc_hid_stop, .-acc_hid_stop
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_close, %function
acc_hid_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	acc_hid_close, .-acc_hid_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_cleanup.part.79, %function
gserial_cleanup.part.79:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r6, #3776]
	str	lr, [sp, #24]
	.pad #28
	sub	sp, sp, #28
	cmp	r3, #0
	beq	.L8749
	mov	r4, #0
.L8750:
	mov	r1, r4
	ldr	r0, [r6, #3780]
	add	r4, r4, #1
	bl	tty_unregister_device
	ldr	r3, [r6, #3776]
	cmp	r4, r3
	bcc	.L8750
	cmp	r3, #0
	beq	.L8749
	mov	r3, sp
	ldr	r5, .L8772
	mov	r8, #0
	bic	r9, r3, #8128
	bic	r9, r9, #63
.L8757:
	mov	r0, r5
	bl	mutex_lock
	ldr	r4, [r5, #20]
	mov	r3, #0
	mov	r0, r5
	str	r3, [r5, #20]
	bl	mutex_unlock
	add	r0, r4, #60
	bl	cancel_work_sync
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #12]
	cmp	r3, #0
	bne	.L8751
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L8770
.L8751:
	mov	r0, r4
	add	r7, r4, #20
	bl	_raw_spin_unlock_irq
	ldr	r0, [r9, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #16
	mov	r3, #0
	movt	r2, #:upper16:autoremove_wake_function
	str	r3, [sp, #4]
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L8755
.L8753:
	bl	_raw_spin_unlock_irq
	bl	schedule
.L8755:
	mov	r2, #2
	add	r1, sp, #4
	mov	r0, r7
	bl	prepare_to_wait
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #12]
	mov	r0, r4
	cmp	r3, #0
	bne	.L8753
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L8753
	bl	_raw_spin_unlock_irq
	add	r1, sp, #4
	mov	r0, r7
	bl	finish_wait
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L8771
.L8756:
	mov	r0, r4
	add	r8, r8, #1
	bl	kfree
	ldr	r3, [r6, #3776]
	add	r5, r5, #24
	cmp	r8, r3
	bcc	.L8757
.L8749:
	mov	r4, #0
	ldr	r0, [r6, #3976]
	str	r4, [r6, #3776]
	bl	debugfs_remove_recursive
	ldr	r0, [r6, #2604]
	bl	destroy_workqueue
	ldr	r0, [r6, #3780]
	bl	tty_unregister_driver
	ldr	r0, [r6, #3780]
	bl	put_tty_driver
	str	r4, [r6, #3780]
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L8770:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L8756
.L8771:
	movw	r0, #:lower16:.LC216
	movw	r1, #1477
	movt	r0, #:upper16:.LC216
	bl	warn_slowpath_null
	b	.L8756
.L8773:
	.align	2
.L8772:
	.word	.LANCHOR1+3784
	.fnend
	.size	gserial_cleanup.part.79, .-gserial_cleanup.part.79
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_function_cleanup, %function
acm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r3, #3780]
	cmp	r3, #0
	beq	.L8775
	bl	gserial_cleanup.part.79
.L8775:
	ldr	r0, [r4, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	acm_function_cleanup, .-acm_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_playback_work, %function
f_audio_playback_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r5, r0, #8
	strd	r6, [sp, #8]
	mov	r7, r0
	mov	r0, r5
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave
	mov	r3, r7
	mov	r6, r0
	ldr	r4, [r3, #16]!
	cmp	r4, r3
	beq	.L8792
	sub	r3, r4, #8
	mov	r0, r4
	str	r3, [sp, #4]
	bl	list_del
	mov	r1, r6
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldmdb	r4, {r3, r6}
	ldr	r9, [r7, #-64]
	cmp	r6, #0
	str	r3, [sp]
	ldr	fp, [r9, #212]
	beq	.L8793
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldrb	r2, [r5, #2224]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L8794
.L8784:
	lsl	r3, r6, #3
	mov	r5, #57344
	movt	r5, 65535
	movw	r8, #:lower16:.LC577
	str	r3, [sp, #8]
	mov	r3, sp
	movt	r8, #:upper16:.LC577
	and	r10, r3, r5
.L8789:
	ldr	r3, [fp, #160]
	mov	r2, #146
	movw	r1, #16704
	mov	r0, r9
	ldr	r3, [r3]
	cmp	r3, #7
	mvn	r2, r2, lsr r3
	bhi	.L8786
	ands	r2, r2, #1
	bne	.L8786
	bl	snd_pcm_kernel_ioctl
	cmp	r0, #0
	blt	.L8795
.L8786:
	ldr	r2, [fp, #80]
	mov	r0, #0
	ldr	r1, [sp]
	cmp	r2, r0
	beq	.L8796
	ldr	r3, [sp, #8]
	udiv	r6, r3, r2
	ldr	r3, [r10, #8]
	str	r0, [r10, #8]
	ldr	r0, [r7, #-64]
	str	r3, [sp, #12]
	mov	r2, r6
	bl	snd_pcm_lib_write
	cmp	r6, r0
	bne	.L8797
	mov	r3, sp
	and	r5, r5, r3
	ldr	r3, [sp, #12]
	str	r3, [r5, #8]
.L8783:
	ldr	r5, [sp, #4]
	cmp	r5, #0
	beq	.L8780
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r3, #0
	mov	r0, r5
	str	r3, [r4, #-8]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	kfree
.L8780:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8794:
	bl	gaudio_open_streams
	cmp	r0, #0
	moveq	r2, #1
	strbeq	r2, [r5, #2224]
	beq	.L8784
	movw	r0, #:lower16:.LC575
	ldr	r1, .L8798
	movt	r0, #:upper16:.LC575
	bl	printk
	b	.L8783
.L8795:
	ldr	r5, .L8798+4
	mov	r2, r0
	movw	r0, #:lower16:.LC477
	movt	r0, #:upper16:.LC477
	sub	r1, r5, #12
	bl	printk
	movw	r0, #:lower16:.LC487
	sub	r1, r5, #36
	movt	r0, #:upper16:.LC487
	bl	printk
	b	.L8783
.L8797:
	mov	r2, r0
	ldr	r1, .L8798
	mov	r0, r8
	bl	printk
	ldr	r3, [sp, #12]
	str	r3, [r10, #8]
	b	.L8789
.L8796:
	movw	r0, #:lower16:.LC576
	ldr	r1, .L8798
	movt	r0, #:upper16:.LC576
	bl	printk
	b	.L8783
.L8793:
	movw	r0, #:lower16:.LC574
	ldr	r1, .L8798
	movt	r0, #:upper16:.LC574
	bl	printk
	b	.L8783
.L8792:
	movw	r0, #:lower16:.LC573
	ldr	r1, .L8798+8
	movt	r0, #:upper16:.LC573
	bl	printk
	mov	r1, r6
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L8799:
	.align	2
.L8798:
	.word	.LANCHOR3-2956
	.word	.LANCHOR3-2944
	.word	.LANCHOR3-2980
	.fnend
	.size	f_audio_playback_work, .-f_audio_playback_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	transport_store, %function
transport_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r7, #2496]
	.pad #44
	sub	sp, sp, #44
	str	r3, [sp, #4]
	ldr	r3, [r4, #372]
	cmp	r3, #0
	beq	.L8894
	movw	r1, #:lower16:.LC297
	mov	r0, r2
	movt	r1, #:upper16:.LC297
	add	r2, sp, #16
	bl	sscanf
	ldr	r3, [sp, #16]
	ldr	r5, [r4, #364]
	cmp	r3, #0
	moveq	r6, #3
	movne	r6, #2
	cmp	r5, r6
	beq	.L8895
	mov	r3, #0
	cmp	r5, #0
	str	r3, [r4, #364]
	beq	.L8805
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L8806
	blx	r3
.L8806:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L8807
	blx	r3
.L8807:
	cmp	r5, #2
	beq	.L8808
	cmp	r5, #3
	bne	.L8805
	add	r3, r4, #368
	add	r0, r4, #152
	mov	r5, r3
	add	fp, r4, #104
	str	r3, [sp, #8]
	bl	tasklet_kill
	add	r0, r4, #132
	bl	tasklet_kill
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #104]
	mov	r8, r0
	cmp	fp, r5
	beq	.L8818
.L8819:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	ldr	r9, [r4, #88]
	ldr	r0, [r5, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r2, [r9, #8]
	mov	r0, r9
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r5, [r4, #104]
	cmp	fp, r5
	bne	.L8819
.L8818:
	ldr	r5, [r4, #112]
	add	fp, r4, #112
	cmp	fp, r5
	beq	.L8820
.L8821:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	ldr	r9, [r4, #92]
	ldr	r0, [r5, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r2, [r9, #8]
	mov	r0, r9
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r5, [r4, #112]
	cmp	fp, r5
	bne	.L8821
.L8820:
	ldr	r5, [r4, #120]
	add	fp, r4, #120
	cmp	fp, r5
	beq	.L8822
.L8823:
	mov	r0, r5
	sub	r9, r5, #36
	bl	list_del
	ldr	r10, [r4, #92]
	ldr	r0, [r5, #-36]
	bl	kfree
	mov	r1, r9
	ldr	r2, [r10, #8]
	mov	r0, r10
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r5, [r4, #120]
	cmp	fp, r5
	bne	.L8823
.L8822:
	mov	r1, r8
	ldr	r0, [sp, #8]
	bl	_raw_spin_unlock_irqrestore
.L8805:
	cmp	r6, #2
	str	r6, [r4, #364]
	beq	.L8849
.L8902:
	cmp	r6, #3
	bne	.L8896
	ldr	r3, [r4, #172]
	tst	r3, #1
	beq	.L8897
.L8835:
	movw	r10, #:lower16:kmalloc_caches
	movw	r9, #:lower16:rmnet_mux_smd_complete_epout
	movt	r10, #:upper16:kmalloc_caches
	movt	r9, #:upper16:rmnet_mux_smd_complete_epout
	mov	r7, #8
.L8842:
	ldr	r6, [r4, #88]
	mov	r1, #208
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	mov	r2, #2048
	bne	.L8898
.L8828:
	ldr	r0, [sp, #4]
.L8800:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8849:
	movw	r6, #:lower16:rmnet_mux_sdio_complete_epout
	mov	r5, #16
	movt	r6, #:upper16:rmnet_mux_sdio_complete_epout
	add	r7, r4, #216
.L8825:
	ldr	r0, [r4, #88]
	mov	r1, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r7
	add	r0, r3, #36
	beq	.L8828
	cmn	r3, #4096
	bhi	.L8828
	str	r6, [r3, #28]
	ldr	r1, [r4, #220]
	bl	__list_add
	subs	r5, r5, #1
	bne	.L8825
	movw	r6, #:lower16:rmnet_mux_sdio_complete_epin
	mov	r5, #100
	movt	r6, #:upper16:rmnet_mux_sdio_complete_epin
	add	r9, r4, #192
.L8830:
	ldr	r0, [r4, #92]
	mov	r1, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r9
	add	r0, r3, #36
	beq	.L8828
	cmn	r3, #4096
	bhi	.L8828
	str	r6, [r3, #28]
	ldr	r1, [r4, #196]
	bl	__list_add
	subs	r5, r5, #1
	bne	.L8830
	ldr	r3, [r4, #372]
	cmp	r3, #0
	beq	.L8828
	add	r6, r4, #368
	ldr	fp, [r4, #84]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	b	.L8831
.L8833:
	bl	list_del
	mov	r1, r9
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r1, r10
	mov	r2, #208
	mov	r0, r4
	bl	rmnet_mux_sdio_rx_submit
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	r10, #0
	mov	r9, r0
	bne	.L8899
.L8831:
	ldr	r5, [r4, #216]
	cmp	r7, r5
	mov	r0, r5
	sub	r10, r5, #36
	bne	.L8833
.L8832:
	mov	r1, r9
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L8828
.L8898:
	str	r2, [r5, #4]
	ldr	r3, [r10, #44]
	mov	ip, #16
	mov	r1, #208
	subs	r0, r3, #0
	streq	ip, [r5]
	beq	.L8841
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L8841
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L8828
.L8841:
	cmn	r5, #4096
	mov	r6, #2048
	add	r2, r4, #112
	add	r0, r5, #36
	bhi	.L8828
	str	r6, [r5, #4]
	str	r9, [r5, #28]
	str	r4, [r5, #32]
	ldr	r1, [r4, #116]
	bl	__list_add
	subs	r7, r7, #1
	bne	.L8842
	movw	r9, #:lower16:rmnet_mux_smd_complete_epin
	mov	fp, #8
	movt	r9, #:upper16:rmnet_mux_smd_complete_epin
.L8845:
	ldr	r7, [r4, #92]
	mov	r1, #208
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L8828
	str	r6, [r5, #4]
	ldr	r3, [r10, #44]
	mov	ip, #16
	mov	r2, #2048
	mov	r1, #208
	subs	r0, r3, #0
	streq	ip, [r5]
	beq	.L8844
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L8844
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L8828
.L8808:
	add	r3, r4, #368
	add	fp, r4, #192
	mov	r0, r3
	mov	r10, #0
	str	r3, [sp, #8]
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r4, #192]
	str	r10, [r4, #312]
	str	r0, [sp, #12]
	cmp	fp, r9
	beq	.L8810
.L8811:
	mov	r0, r9
	sub	r5, r9, #36
	bl	list_del
	str	r10, [r9, #-36]
	ldr	r8, [r4, #88]
	mov	r0, #0
	bl	kfree
	mov	r1, r5
	ldr	r2, [r8, #8]
	mov	r0, r8
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r9, [r4, #192]
	cmp	fp, r9
	bne	.L8811
.L8810:
	ldr	r9, [r4, #216]
	add	r10, r4, #216
	cmp	r10, r9
	beq	.L8812
	mov	fp, #0
.L8813:
	mov	r0, r9
	sub	r8, r9, #36
	bl	list_del
	str	fp, [r9, #-36]
	ldr	r9, [r4, #92]
	mov	r0, #0
	bl	kfree
	mov	r1, r8
	ldr	r2, [r9, #8]
	mov	r0, r9
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r9, [r4, #216]
	cmp	r9, r10
	bne	.L8813
.L8812:
	ldr	r3, [r4, #200]
	add	r10, r4, #200
	cmp	r10, r3
	beq	.L8814
	mov	fp, #0
	b	.L8815
.L8900:
	ldr	r2, [r4, #208]
	sub	r2, r2, #1
	str	r2, [r4, #208]
	ldm	r3, {r1, r2}
	str	fp, [r3]
	str	fp, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #200]
	cmp	r10, r3
	beq	.L8814
.L8815:
	subs	r0, r3, #0
	bne	.L8900
.L8814:
	ldr	r3, [r4, #224]
	add	r10, r4, #224
	cmp	r10, r3
	beq	.L8816
	mov	fp, #0
	b	.L8817
.L8901:
	ldr	r2, [r4, #232]
	sub	r2, r2, #1
	str	r2, [r4, #232]
	ldm	r3, {r1, r2}
	str	fp, [r3]
	str	fp, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #224]
	cmp	r10, r3
	beq	.L8816
.L8817:
	subs	r0, r3, #0
	bne	.L8901
.L8816:
	ldrd	r0, [sp, #8]
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #2
	str	r6, [r4, #364]
	bne	.L8902
	b	.L8849
.L8844:
	cmn	r5, #4096
	add	r2, r4, #104
	add	r0, r5, #36
	bhi	.L8828
	str	r9, [r5, #28]
	str	r4, [r5, #32]
	ldr	r1, [r4, #108]
	bl	__list_add
	subs	fp, fp, #1
	bne	.L8845
	mov	r0, r4
	bl	rmnet_mux_smd_start_rx
	b	.L8828
.L8897:
	movw	r3, #:lower16:rmnet_mux_smd_notify
	mov	r2, r4
	ldr	r0, [r7, #3980]
	movt	r3, #:upper16:rmnet_mux_smd_notify
	add	r1, r4, #128
	ldr	r5, [r4, #84]
	bl	smd_open
	cmp	r0, #0
	bne	.L8903
	ldr	r3, [r4, #172]
	ands	r3, r3, #1
	bne	.L8835
	mov	r2, sp
	str	r3, [sp, #20]
	add	r5, r4, #180
	bic	r1, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r1, r1, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r1, #12]
	add	r1, sp, #32
	str	r0, [sp, #24]
	str	r2, [sp, #28]
	str	r1, [sp, #32]
	str	r1, [sp, #36]
	b	.L8839
.L8904:
	bl	schedule
.L8839:
	mov	r2, #2
	add	r1, sp, #20
	mov	r0, r5
	bl	prepare_to_wait
	ldr	r3, [r4, #172]
	tst	r3, #1
	beq	.L8904
	add	r1, sp, #20
	mov	r0, r5
	bl	finish_wait
	b	.L8835
.L8903:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC143
	movt	r1, #:upper16:.LC143
	add	r0, r0, #32
	bl	dev_err
	b	.L8828
.L8899:
	ldr	r0, [fp]
	movw	r1, #:lower16:.LC171
	mov	r2, r10
	movt	r1, #:upper16:.LC171
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r7
	mov	r0, r5
	ldr	r1, [r4, #220]
	bl	__list_add
	b	.L8832
.L8896:
	movw	r0, #:lower16:.LC580
	ldr	r1, .L8905
	movt	r0, #:upper16:.LC580
	bl	printk
	b	.L8828
.L8895:
	movw	r3, #:lower16:.LANCHOR2
	movw	r0, #:lower16:.LC579
	ldr	r1, .L8905
	movt	r3, #:upper16:.LANCHOR2
	movt	r0, #:upper16:.LC579
	add	r3, r3, r5, lsl #2
	ldr	r3, [r3, #932]
	mov	r2, r3
	bl	printk
	mov	r0, #0
	b	.L8800
.L8894:
	movw	r0, #:lower16:.LC578
	ldr	r1, .L8905
	movt	r0, #:upper16:.LC578
	bl	printk
	mvn	r0, #21
	b	.L8800
.L8906:
	.align	2
.L8905:
	.word	.LANCHOR3-2936
	.fnend
	.size	transport_store, .-transport_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_indicate_status_msg, %function
rndis_indicate_status_msg:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	lsl	r5, r0, #4
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	ldr	r10, .L8914
	sub	r4, r5, r0
	lsl	r4, r4, #2
	strd	r8, [sp, #16]
	str	lr, [sp, #28]
	add	r7, r10, r4
	ldr	r3, [r7, #4]
	cmp	r3, #0
	beq	.L8910
	movw	r3, #:lower16:kmalloc_caches
	mov	r9, r0
	movt	r3, #:upper16:kmalloc_caches
	mov	r8, r1
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L8911
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L8912
	add	r2, r6, #20
.L8909:
	movw	r3, #:lower16:.LANCHOR1
	sub	r5, r5, r9
	str	r2, [r6, #8]
	movt	r3, #:upper16:.LANCHOR1
	mov	r9, #20
	add	r3, r3, r5, lsl #2
	mov	r5, #0
	add	r2, r4, #52
	str	r9, [r6, #12]
	mov	r0, r6
	str	r5, [r6, #16]
	add	r2, r10, r2
	ldr	r1, [r3, #3680]
	bl	__list_add
	ldr	r3, [r6, #8]
	mov	r2, #7
	stm	r3, {r2, r9}
	str	r8, [r3, #8]
	str	r5, [r3, #12]
	str	r5, [r3, #16]
	ldr	r3, [r7, #44]
	ldr	r0, [r7, #48]
	blx	r3
	mov	r0, r5
.L8907:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L8911:
	mov	r2, #36
	mov	r6, #16
	b	.L8909
.L8910:
	movw	r0, #65012
	movt	r0, 65535
	b	.L8907
.L8912:
	mvn	r0, #11
	b	.L8907
.L8915:
	.align	2
.L8914:
	.word	.LANCHOR1+3624
	.fnend
	.size	rndis_indicate_status_msg, .-rndis_indicate_status_msg
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_proc_write, %function
rndis_proc_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r2, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #12]
	.pad #12
	sub	sp, sp, #12
	str	r2, [sp, #4]
	ldr	r3, [r3, #32]
	ldr	r3, [r3, #-20]
	ldr	r10, [r3, #44]
	beq	.L8917
	mov	r9, #0
	mov	r6, #57344
	movw	r8, #:lower16:.LANCHOR1
	mov	fp, #12
	mov	r4, r1
	mov	r5, r9
	movt	r6, 65535
	movt	r8, #:upper16:.LANCHOR1
	movt	fp, 16385
	add	r7, r1, r2
.L8925:
	mov	r3, sp
	mov	r0, r4
	and	r2, r3, r6
	ldr	r1, [r2, #8]
	sub	r1, r1, #1
	.syntax divided
@ 1185 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/rndis.c" 1
	.ifnc r0,r0 ; .err ; .endif
	.ifnc r2,r2 ; .err ; .endif
	.ifnc r1,r1 ; .err ; .endif
	bl	__get_user_1
@ 0 "" 2
	.arm
	.syntax unified
	uxtb	r2, r2
	cmp	r0, #0
	sub	r2, r2, #48
	bne	.L8926
	cmp	r2, #52
	ldrls	pc, [pc, r2, asl #2]
	b	.L8919
.L8921:
	.word	.L8920
	.word	.L8920
	.word	.L8920
	.word	.L8920
	.word	.L8920
	.word	.L8920
	.word	.L8920
	.word	.L8920
	.word	.L8920
	.word	.L8920
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8922
	.word	.L8923
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8919
	.word	.L8922
	.word	.L8923
.L8923:
	ldrb	r0, [r10]	@ zero_extendqisi2
	mov	ip, #1
	mov	r1, fp
	rsb	r2, r0, r0, lsl #4
	add	r2, r8, r2, lsl #2
	str	ip, [r2, #3640]
	bl	rndis_indicate_status_msg
.L8924:
	add	r4, r4, #1
	cmp	r4, r7
	bne	.L8925
.L8917:
	ldr	r0, [sp, #4]
.L8916:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8922:
	ldrb	r0, [r10]	@ zero_extendqisi2
	mov	ip, #0
	mov	r1, #11
	movt	r1, 16385
	rsb	r2, r0, r0, lsl #4
	add	r2, r8, r2, lsl #2
	str	ip, [r2, #3640]
	bl	rndis_indicate_status_msg
	b	.L8924
.L8920:
	add	r5, r5, r5, lsl #2
	mov	r9, #1
	add	r5, r2, r5, lsl r9
	b	.L8924
.L8919:
	cmp	r9, #0
	strne	r5, [r10, #12]
	b	.L8924
.L8926:
	mvn	r0, #13
	b	.L8916
	.fnend
	.size	rndis_proc_write, .-rndis_proc_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_close, %function
rndis_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #164]
	movw	r3, #:lower16:.LANCHOR1
	mov	r1, #12
	movt	r3, #:upper16:.LANCHOR1
	movt	r1, 16385
	ands	r2, r0, #255
	rsb	ip, r0, r0, lsl #4
	streq	r2, [r3, #3632]
	streq	r2, [r3, #3636]
	add	r3, r3, ip, lsl #2
	mov	r2, #1
	str	r2, [r3, #3640]
	b	rndis_indicate_status_msg
	.fnend
	.size	rndis_close, .-rndis_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_open, %function
rndis_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #20]
	ldr	r0, [r0, #164]
	ldr	r3, [r3, #24]
	uxtb	r2, r0
	ldr	r3, [r3]
	ldr	r1, [r3, #20]
	cmp	r1, #4
	bls	.L8940
	ldr	r3, [r3, #16]
	cmp	r3, #5
	beq	.L8949
.L8942:
	cmp	r3, #3
	movne	r1, #97280
	moveq	r1, #4259840
.L8941:
	movw	r3, #:lower16:.LANCHOR1
	cmp	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	rsb	ip, r0, r0, lsl #4
	streq	r2, [r3, #3632]
	mov	r2, #0
	streq	r1, [r3, #3636]
	add	r3, r3, ip, lsl #2
	mov	r1, #11
	movt	r1, 16385
	str	r2, [r3, #3640]
	b	rndis_indicate_status_msg
.L8940:
	cmp	r1, #2
	movls	r1, #97280
	bls	.L8941
	ldr	r3, [r3, #16]
	b	.L8942
.L8949:
	mov	r1, #8519680
	b	.L8941
	.fnend
	.size	rndis_open, .-rndis_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_close, %function
rndis_qc_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #144]
	movw	r3, #:lower16:.LANCHOR1
	mov	r1, #12
	movt	r3, #:upper16:.LANCHOR1
	movt	r1, 16385
	ands	r2, r0, #255
	rsb	ip, r0, r0, lsl #4
	streq	r2, [r3, #3632]
	streq	r2, [r3, #3636]
	add	r3, r3, ip, lsl #2
	mov	r2, #1
	str	r2, [r3, #3640]
	b	rndis_indicate_status_msg
	.fnend
	.size	rndis_qc_close, .-rndis_qc_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_open, %function
rndis_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #20]
	ldr	r0, [r0, #144]
	ldr	r3, [r3, #24]
	uxtb	r2, r0
	ldr	r3, [r3]
	ldr	r1, [r3, #20]
	cmp	r1, #4
	bls	.L8955
	ldr	r3, [r3, #16]
	cmp	r3, #5
	beq	.L8964
.L8957:
	cmp	r3, #3
	movne	r1, #97280
	moveq	r1, #4259840
.L8956:
	movw	r3, #:lower16:.LANCHOR1
	cmp	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	rsb	ip, r0, r0, lsl #4
	streq	r2, [r3, #3632]
	mov	r2, #0
	streq	r1, [r3, #3636]
	add	r3, r3, ip, lsl #2
	mov	r1, #11
	movt	r1, 16385
	str	r2, [r3, #3640]
	b	rndis_indicate_status_msg
.L8955:
	cmp	r1, #2
	movls	r1, #97280
	bls	.L8956
	ldr	r3, [r3, #16]
	b	.L8957
.L8964:
	mov	r1, #8519680
	b	.L8956
	.fnend
	.size	rndis_qc_open, .-rndis_qc_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_complete, %function
f_audio_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r3, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	ldr	r6, [r1, #32]
	ldr	r7, [r1, #44]
	str	r3, [sp, #4]
	cmp	r7, r3
	bne	.L8991
	ldr	r3, [r6, #172]
	mov	r5, r0
	mov	r4, r1
	cmp	r3, r0
	beq	.L8994
	ldr	r3, [r6, #176]
	cmp	r3, r0
	beq	.L8995
	ldr	r5, [r6, #272]
	cmp	r5, #0
	beq	.L8965
	ldm	r1, {r1, r2}
	add	r0, sp, #4
	bl	memcpy
	ldrh	r2, [sp, #4]
	mov	r0, r5
	ldrb	r1, [r6, #268]	@ zero_extendqisi2
	ldr	r3, [r5, #36]
	blx	r3
	str	r7, [r6, #272]
.L8965:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L8994:
	ldr	r7, [r6, #184]
	cmp	r7, #0
	beq	.L8965
	movw	r8, #:lower16:.LANCHOR0
	ldr	r0, [r7, #4]
	movt	r8, #:upper16:.LANCHOR0
	ldr	r2, [r1, #48]
	ldr	r3, [r8, #1412]
	sub	r3, r3, r0
	cmp	r3, r2
	bcs	.L8971
	add	r0, r7, #8
	add	r2, r6, #204
	ldr	r1, [r6, #208]
	bl	__list_add
	movw	r3, #:lower16:system_wq
	add	r2, r6, #188
	movt	r3, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r3]
	bl	queue_work_on
	ldr	r0, [r8, #1412]
	bl	f_audio_buffer_alloc
	cmn	r0, #4096
	mov	r7, r0
	bhi	.L8972
	ldr	r2, [r4, #48]
	ldr	r0, [r0, #4]
.L8971:
	ldr	r3, [r7]
	ldr	r1, [r4]
	add	r0, r3, r0
	bl	memcpy
	ldr	ip, [r4, #48]
	mov	r1, r4
	mov	r2, #32
	ldr	r3, [r7, #4]
	mov	r0, r5
	add	r3, r3, ip
	str	r3, [r7, #4]
	str	r7, [r6, #184]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L8965
	ldr	r1, .L8998
	movw	r0, #:lower16:.LC581
	ldr	r2, [r5, #4]
	movt	r0, #:upper16:.LC581
.L8993:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk
.L8995:
	ldr	r7, [r6, #216]
	cmp	r7, #0
	beq	.L8996
.L8975:
	ldm	r7, {r1, r3}
	ldr	r0, [r4]
	ldr	r2, [r4, #48]
	add	r1, r1, r3
	bl	memcpy
	ldr	r1, [r4, #48]
	movw	r2, #:lower16:.LANCHOR0
	ldr	r3, [r7, #4]
	movt	r2, #:upper16:.LANCHOR0
	ldr	r2, [r2, #1680]
	add	r3, r3, r1
	sub	r2, r2, r3
	str	r3, [r7, #4]
	ldr	r3, [r4, #48]
	cmp	r2, r3
	bcs	.L8977
	cmp	r7, #0
	beq	.L8978
	ldr	r0, [r7]
	bl	kfree
	mov	r3, #0
	mov	r0, r7
	str	r3, [r7]
	bl	kfree
.L8978:
	mov	r0, #0
	movw	r3, #:lower16:system_wq
	movt	r3, #:upper16:system_wq
	add	r2, r6, #220
	str	r0, [r6, #216]
	ldr	r1, [r3]
	mov	r0, #4
	bl	queue_work_on
.L8977:
	ldr	r3, [r5, #8]
	mov	r1, r4
	mov	r2, #32
	mov	r0, r5
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L8965
	movw	r0, #:lower16:.LC581
	ldr	r1, .L8998+4
	movt	r0, #:upper16:.LC581
	ldr	r2, [r5, #4]
	b	.L8993
.L8996:
	add	r8, r6, #212
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r3, r6
	mov	r9, r0
	ldr	r0, [r3, #236]!
	cmp	r0, r3
	beq	.L8997
	sub	r7, r0, #8
	bl	list_del
	mov	r1, r9
	mov	r0, r8
	str	r7, [r6, #216]
	bl	_raw_spin_unlock_irqrestore
	b	.L8975
.L8997:
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:system_wq
	add	r2, r6, #220
	movt	r3, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r3]
	bl	queue_work_on
	b	.L8977
.L8972:
	ldr	r1, .L8998
	movw	r0, #:lower16:.LC27
	movt	r0, #:upper16:.LC27
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk
.L8991:
	ldr	r1, .L8998+8
	movw	r0, #:lower16:.LC582
	mov	r2, r7
	movt	r0, #:upper16:.LC582
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk
.L8999:
	.align	2
.L8998:
	.word	.LANCHOR3-2920
	.word	.LANCHOR3-2888
	.word	.LANCHOR3-2860
	.fnend
	.size	f_audio_complete, .-f_audio_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_start_io, %function
rmnet_sdio_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #188
	mov	r0, r6
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #192]
	mov	r7, r0
	cmp	r5, #0
	beq	.L9027
	ldr	r3, [r4, #320]
	tst	r3, #2
	beq	.L9003
	ldr	r3, [r4, #324]
	tst	r3, #2
	beq	.L9003
	movw	r9, #:lower16:rmnet_sdio_complete_epout
	mov	r5, #16
	movt	r9, #:upper16:rmnet_sdio_complete_epout
	add	r8, r4, #160
.L9004:
	ldr	r0, [r4, #88]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r8
	add	r0, r3, #36
	beq	.L9017
	cmn	r3, #4096
	bhi	.L9026
	str	r9, [r3, #28]
	ldr	r1, [r4, #164]
	bl	__list_add
	ldr	r3, [r4, #168]
	subs	r5, r5, #1
	add	r3, r3, #1
	str	r3, [r4, #168]
	bne	.L9004
	movw	r9, #:lower16:rmnet_sdio_complete_epin
	mov	r5, #200
	movt	r9, #:upper16:rmnet_sdio_complete_epin
	add	r10, r4, #132
.L9010:
	ldr	r0, [r4, #92]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r10
	add	r0, r3, #36
	beq	.L9017
	cmn	r3, #4096
	bhi	.L9026
	str	r9, [r3, #28]
	ldr	r1, [r4, #136]
	bl	__list_add
	ldr	r3, [r4, #140]
	subs	r5, r5, #1
	add	r3, r3, #1
	str	r3, [r4, #140]
	bne	.L9010
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r7, [r4, #84]
	ldr	r3, [r4, #192]
	cmp	r3, #0
	beq	.L9028
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	b	.L9012
.L9014:
	bl	list_del
	ldr	r3, [r4, #168]
	mov	r1, r9
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r4, #168]
	bl	_raw_spin_unlock_irqrestore
	mov	r1, r10
	mov	r0, r4
	bl	rmnet_sdio_rx_submit.constprop.146
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	r10, #0
	mov	r9, r0
	bne	.L9029
.L9012:
	ldr	r5, [r4, #160]
	cmp	r8, r5
	mov	r0, r5
	sub	r10, r5, #36
	bne	.L9014
.L9013:
	mov	r1, r9
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r5, #0
	b	.L9000
.L9003:
	mov	r1, r7
	mov	r0, r6
	mov	r5, #0
	bl	_raw_spin_unlock_irqrestore
.L9000:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L9027:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L9000
.L9017:
	mvn	r5, #11
.L9008:
.L9007:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	bl	rmnet_sdio_free_buf
	mov	r3, #0
	str	r3, [r4, #88]
	str	r3, [r4, #92]
	str	r3, [r4, #96]
	b	.L9000
.L9029:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC8
	mov	r2, r10
	movt	r1, #:upper16:.LC8
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r8
	mov	r0, r5
	ldr	r1, [r4, #164]
	bl	__list_add
	ldr	r3, [r4, #168]
	add	r3, r3, #1
	str	r3, [r4, #168]
	b	.L9013
.L9028:
	movw	r0, #:lower16:.LC583
	ldr	r1, .L9030
	movt	r0, #:upper16:.LC583
	bl	printk
	b	.L9000
.L9026:
	mov	r5, r3
	b	.L9008
.L9031:
	.align	2
.L9030:
	.word	.LANCHOR3-2840
	.fnend
	.size	rmnet_sdio_start_io, .-rmnet_sdio_start_io
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_open_sdio_work, %function
rmnet_open_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #-168]
	ldr	r3, [r0, #72]
	ldr	r3, [r0, #68]
	ldr	r3, [r0, #68]
	tst	r3, #2
	beq	.L9033
	ldr	r3, [r0, #72]
	tst	r3, #2
	bne	.L9048
.L9033:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #3984]
	add	r2, r2, #1
	cmp	r2, #90
	str	r2, [r3, #3984]
	ble	.L9036
	ldr	r3, [r4, #72]
	tst	r3, #2
	beq	.L9049
	ldr	r3, [r4, #68]
	tst	r3, #2
	beq	.L9050
.L9032:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9050:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC586
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC586
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	add	r0, r0, #32
	b	dev_err
.L9049:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC585
	movt	r1, #:upper16:.LC585
	add	r0, r0, #32
	bl	dev_err
	ldr	r3, [r4, #68]
	tst	r3, #2
	bne	.L9032
	b	.L9050
.L9036:
	ldr	r5, [r4, #-52]
	mov	r0, #2000
	bl	msecs_to_jiffies
	mov	r3, r0
	mov	r2, r4
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	mov	r0, #4
	mov	r1, r5
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	queue_delayed_work_on
.L9048:
	sub	r0, r0, #252
	bl	rmnet_sdio_start_io
	ldr	r3, [r4, #-60]
	cmp	r3, #0
	beq	.L9034
	add	r2, r4, #84
	mov	r0, #4
	ldr	r1, [r4, #-52]
	bl	queue_work_on
.L9034:
	movw	r4, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC584
	ldr	r1, .L9051
	movt	r4, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC584
	ldr	r2, [r4, #3984]
	bl	printk
	mov	r3, #0
	str	r3, [r4, #3984]
	b	.L9032
.L9052:
	.align	2
.L9051:
	.word	.LANCHOR3-2820
	.fnend
	.size	rmnet_open_sdio_work, .-rmnet_open_sdio_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	do_set_interface, %function
do_set_interface:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	clz	r3, r1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	lsr	r3, r3, #5
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	movw	r9, #:lower16:bulk_in_complete
	strd	r10, [sp, #24]
	movw	r8, #:lower16:bulk_out_complete
	movt	r9, #:upper16:bulk_in_complete
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	movt	r8, #:upper16:bulk_out_complete
	str	r3, [sp, #4]
	mov	r3, #0
	str	r3, [sp]
.L9062:
	ldr	fp, [r4, #8]
	cmp	fp, #0
	beq	.L9054
	mov	r6, #0
	mov	r10, r6
.L9057:
	ldr	r5, [r4, #68]
	add	r5, r5, r6
	add	r6, r6, #32
	ldr	r1, [r5, #16]
	cmp	r1, #0
	beq	.L9055
	ldr	r0, [fp, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	str	r10, [r5, #16]
.L9055:
	ldr	r1, [r5, #24]
	cmp	r1, #0
	beq	.L9056
	ldr	r0, [fp, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	str	r10, [r5, #24]
.L9056:
	cmp	r6, #128
	bne	.L9057
	mov	r0, #0
	mov	r2, #1
	mov	r3, r0
	mov	r1, #3
	str	r0, [r4, #8]
	add	r0, r4, #16
	bl	__wake_up
.L9054:
	ldm	sp, {r2, r6}
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	cmp	r2, #0
	movne	r6, #1
	bfc	r3, #5, #1
	cmp	r6, #0
	strb	r3, [r4, #144]
	bne	.L9053
	str	r7, [r4, #8]
.L9064:
	ldr	r10, [r7, #100]
	mov	r1, #32
	ldr	r5, [r4, #68]
	ldr	r3, [r10, #8]
	mov	r0, r10
	add	r5, r5, r6
	add	r6, r6, r1
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	mov	r1, #32
	str	r0, [r5, #16]
	beq	.L9080
	ldr	r10, [r7, #104]
	ldr	r3, [r10, #8]
	mov	r0, r10
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r5, #24]
	beq	.L9080
	ldr	r3, [r5]
	cmp	r6, #128
	str	r3, [r0]
	ldr	r2, [r5, #16]
	str	r3, [r2]
	ldr	r3, [r5, #24]
	str	r5, [r3, #32]
	ldr	r3, [r5, #16]
	str	r5, [r3, #32]
	ldr	r3, [r5, #16]
	str	r9, [r3, #28]
	ldr	r3, [r5, #24]
	str	r8, [r3, #28]
	bne	.L9064
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	ldr	r2, [r4, #92]
	orr	r3, r3, #32
	cmp	r2, #0
	strb	r3, [r4, #144]
	beq	.L9066
	mov	r2, #0
	mov	r0, #10496
	mov	r1, r2
	movt	r0, 6
.L9065:
	ldr	r3, [r4, #100]
	add	r1, r1, #1
	add	r3, r3, r2
	add	r2, r2, #392
	str	r0, [r3, #36]
	ldr	r3, [r4, #92]
	cmp	r3, r1
	bhi	.L9065
.L9066:
	mov	r3, #0
	str	r3, [sp]
.L9053:
	ldr	r0, [sp]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9080:
	ldr	r0, [r4]
	mvn	r3, #11
	movw	r1, #:lower16:.LC587
	movt	r1, #:upper16:.LC587
	str	r3, [sp]
	ldr	r2, [r10, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L9062
	.fnend
	.size	do_set_interface, .-do_set_interface
	.align	2
	.global	usb_gadget_get_string
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_gadget_get_string, %function
usb_gadget_get_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #0
	mov	ip, r0
	mov	r3, r2
	beq	.L9086
	b	usb_gadget_get_string.part.69
.L9086:
	mov	r0, #4
	mov	r2, #3
	strb	r0, [r3]
	strb	r2, [r3, #1]
	ldrh	r2, [ip]
	strb	r2, [r3, #2]
	ldrh	r2, [ip]
	lsr	r2, r2, #8
	strb	r2, [r3, #3]
	bx	lr
	.fnend
	.size	usb_gadget_get_string, .-usb_gadget_get_string
	.align	2
	.global	usb_find_descriptor_fillbuf
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_find_descriptor_fillbuf, %function
usb_find_descriptor_fillbuf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #0
	beq	.L9102
	ldr	ip, [r2]
	cmp	ip, #0
	beq	.L9095
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldrb	lr, [ip, #1]	@ zero_extendqisi2
	cmp	lr, r3
	bne	.L9092
.L9090:
	ldrb	r4, [ip]	@ zero_extendqisi2
	cmp	r1, r4
	bcc	.L9094
	mov	r1, ip
	mov	r2, r4
	bl	memcpy
	mov	r0, r4
.L9087:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L9092:
	ldr	ip, [r2, #4]!
	cmp	ip, #0
	beq	.L9103
	ldrb	lr, [ip, #1]	@ zero_extendqisi2
	cmp	lr, r3
	beq	.L9090
	b	.L9092
.L9095:
	mvn	r0, #1
	bx	lr
.L9103:
	mvn	r0, #1
	b	.L9087
.L9094:
	mvn	r0, #21
	b	.L9087
.L9102:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	usb_find_descriptor_fillbuf, .-usb_find_descriptor_fillbuf
	.align	2
	.global	usb_descriptor_fillbuf
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_descriptor_fillbuf, %function
usb_descriptor_fillbuf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r2, #0
	beq	.L9105
	b	usb_descriptor_fillbuf.part.71
.L9105:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	usb_descriptor_fillbuf, .-usb_descriptor_fillbuf
	.align	2
	.global	usb_gadget_config_buf
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_gadget_config_buf, %function
usb_gadget_config_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #0
	cmpne	r2, #8
	bls	.L9113
	mov	ip, r0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	add	r0, r1, #9
	str	lr, [sp, #12]
	mov	lr, r2
	ldr	r5, [ip]	@ unaligned
	mov	r2, r3
	ldr	r3, [ip, #4]	@ unaligned
	sub	r1, lr, #9
	str	r5, [r4]	@ unaligned
	str	r3, [r4, #4]	@ unaligned
	ldrb	r3, [ip, #8]	@ zero_extendqisi2
	strb	r3, [r4, #8]
	bl	usb_descriptor_fillbuf.part.71
	cmp	r0, #0
	blt	.L9106
	add	r0, r0, #9
	cmp	r0, #65536
	bge	.L9109
	ldrb	r3, [r4, #7]	@ zero_extendqisi2
	mov	r1, #9
	mov	r2, #2
	strb	r1, [r4]
	strb	r2, [r4, #1]
	mvn	r3, r3, lsl #25
	strh	r0, [r4, #2]	@ unaligned
	mvn	r3, r3, lsr #25
	strb	r3, [r4, #7]
.L9106:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9109:
	mvn	r0, #21
	b	.L9106
.L9113:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	usb_gadget_config_buf, .-usb_gadget_config_buf
	.align	2
	.global	usb_copy_descriptors
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_copy_descriptors, %function
usb_copy_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r0]
	cmp	r2, #0
	beq	.L9120
	mov	r3, #0
	mov	r1, r0
	mov	r0, r3
	b	.L9116
.L9121:
	mov	r3, lr
.L9116:
	ldrb	ip, [r2]	@ zero_extendqisi2
	add	lr, r3, #1
	ldr	r2, [r1, #4]!
	add	r0, r0, ip
	cmp	r2, #0
	bne	.L9121
	add	r3, r3, #2
	lsl	r4, r3, #2
	add	r0, r0, r4
.L9115:
	mov	r1, #208
	bl	__kmalloc
	subs	r6, r0, #0
	beq	.L9114
	ldr	r1, [r5]
	add	r3, r6, r4
	mov	r4, r6
	cmp	r1, #0
	beq	.L9118
.L9119:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, r3
	bl	memcpy
	str	r0, [r4], #4
	ldr	r2, [r5]
	ldr	r1, [r5, #4]!
	ldrb	r2, [r2]	@ zero_extendqisi2
	cmp	r1, #0
	add	r3, r0, r2
	bne	.L9119
.L9118:
	mov	r3, #0
	str	r3, [r4]
.L9114:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9120:
	mov	r0, #4
	mov	r4, r0
	b	.L9115
	.fnend
	.size	usb_copy_descriptors, .-usb_copy_descriptors
	.align	2
	.global	usb_free_all_descriptors
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_free_all_descriptors, %function
usb_free_all_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #12]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	usb_free_all_descriptors, .-usb_free_all_descriptors
	.align	2
	.global	usb_assign_descriptors
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_assign_descriptors, %function
usb_assign_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	subs	r0, r1, #0
	strd	r6, [sp, #8]
	mov	r6, r3
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	ip, [r4, #20]
	ldr	r3, [ip, #24]
	ldr	r5, [r3]
	beq	.L9134
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L9138
.L9134:
	cmp	r7, #0
	beq	.L9133
	ldr	r3, [r5, #20]
	cmp	r3, #2
	bhi	.L9146
.L9133:
	cmp	r6, #0
	beq	.L9137
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bhi	.L9147
.L9137:
	mov	r0, #0
.L9130:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9147:
	mov	r0, r6
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L9137
.L9138:
	mov	r0, r4
	bl	usb_free_all_descriptors
	mvn	r0, #11
	b	.L9130
.L9146:
	mov	r0, r7
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	bne	.L9133
	b	.L9138
	.fnend
	.size	usb_assign_descriptors, .-usb_assign_descriptors
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_unbind, %function
f_midi_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, [r1, #88]
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	mov	r3, #0
	str	r3, [r4, #96]
	cmp	r0, r3
	beq	.L9149
	bl	snd_card_free
.L9149:
	ldr	r0, [r4, #332]
	bl	kfree
	mov	r3, #0
	mov	r0, r4
	str	r3, [r4, #332]
	bl	usb_free_all_descriptors
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	f_midi_unbind, .-f_midi_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_unbind, %function
ecm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r1
	mov	r4, r1
	str	lr, [sp, #4]
	bl	usb_free_all_descriptors
	ldr	r3, [r4, #168]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #164]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR0
	mov	r0, r4
	str	r2, [r3, #1724]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	ecm_unbind, .-ecm_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_unbind, %function
f_audio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r1
	mov	r4, r1
	str	lr, [sp, #4]
	bl	usb_free_all_descriptors
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	f_audio_unbind, .-f_audio_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_unbind, %function
ncm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r1
	mov	r4, r1
	str	lr, [sp, #4]
	bl	usb_free_all_descriptors
	ldr	r3, [r4, #168]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #164]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR0
	mov	r0, r4
	str	r2, [r3, #1764]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	ncm_unbind, .-ncm_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_unbind, %function
fsg_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r4, [r1, #88]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r4, #8]
	cmp	r3, r1
	beq	.L9168
.L9162:
	add	r0, r4, #336
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r0]
	sub	r3, r3, #1
	strex	r2, r3, [r0]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L9166
	bl	fsg_common_release
.L9166:
	mov	r0, r5
	bl	usb_free_all_descriptors
	mov	r0, r5
	bl	kfree
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L9168:
	mov	r6, #0
	mov	r1, #4
	str	r6, [r4, #12]
	ldr	r0, [r5, #88]
	bl	raise_exception
	ldr	r3, [r4, #8]
	cmp	r3, r5
	bne	.L9162
	mov	r3, sp
	str	r6, [sp, #4]
	add	r7, r4, #16
	bic	r2, r3, #8128
	movw	r3, #:lower16:autoremove_wake_function
	bic	r2, r2, #63
	movt	r3, #:upper16:autoremove_wake_function
	ldr	r1, [r2, #12]
	add	r2, sp, #16
	str	r1, [sp, #8]
	str	r3, [sp, #12]
	str	r2, [sp, #16]
	str	r2, [sp, #20]
	b	.L9165
.L9169:
	bl	schedule
.L9165:
	mov	r2, #2
	add	r1, sp, #4
	mov	r0, r7
	bl	prepare_to_wait
	ldr	r3, [r4, #8]
	cmp	r3, r5
	beq	.L9169
	add	r1, sp, #4
	mov	r0, r7
	bl	finish_wait
	b	.L9162
	.fnend
	.size	fsg_unbind, .-fsg_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_unbind, %function
rndis_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	ldr	r3, [r1, #164]
	cmp	r3, #0
	ble	.L9177
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
.L9171:
	ldrb	r3, [r3, #3684]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L9172
	bl	rndis_exit.part.103
.L9172:
	mov	r0, r4
	bl	usb_free_all_descriptors
	ldr	r3, [r4, #172]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
.L9177:
	rsb	r2, r3, r3, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r2, r3, r2, lsl #2
	mov	r1, #0
	strb	r1, [r2, #3625]
	b	.L9171
	.fnend
	.size	rndis_unbind, .-rndis_unbind
	.align	2
	.global	usb_ep_autoconfig_ss
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_ep_autoconfig_ss, %function
usb_ep_autoconfig_ss:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, r1
	str	r8, [sp, #16]
	mov	r8, r2
	str	lr, [sp, #20]
	ldr	r5, [r0, #28]
	movw	r0, #:lower16:.LC337
	ldrb	r4, [r1, #3]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC337
	mov	r1, r5
	bl	strcmp
	cmp	r0, #0
	and	r4, r4, #3
	bne	.L9180
	cmp	r4, #3
	beq	.L9212
	movw	r0, #:lower16:.LC340
	mov	r1, r5
	movt	r0, #:upper16:.LC340
	bl	strcmp
	cmp	r0, #0
	bne	.L9184
.L9189:
	cmp	r4, #2
	beq	.L9213
.L9184:
	mov	r5, r6
	ldr	r4, [r5, #8]!
	cmp	r5, r4
	sub	r4, r4, #12
	bne	.L9187
	b	.L9188
.L9192:
	ldr	r4, [r4, #12]
	cmp	r5, r4
	sub	r4, r4, #12
	beq	.L9188
.L9187:
	ldr	r3, [r4]
	cmp	r3, #0
	bne	.L9192
	mov	r3, r8
	mov	r2, r7
	mov	r1, r4
	mov	r0, r6
	bl	ep_matches.part.17
	cmp	r0, #0
	beq	.L9192
.L9186:
	mov	r3, #0
	str	r3, [r4, #28]
	str	r3, [r4, #32]
	b	.L9179
.L9180:
	movw	r0, #:lower16:.LC340
	mov	r1, r5
	movt	r0, #:upper16:.LC340
	bl	strcmp
	cmp	r0, #0
	bne	.L9184
	cmp	r4, #3
	bne	.L9189
	movw	r1, #:lower16:.LC590
	mov	r0, r6
	movt	r1, #:upper16:.LC590
	bl	find_ep
	subs	r4, r0, #0
	bne	.L9210
	b	.L9184
.L9188:
	mov	r4, #0
.L9179:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9213:
	ldrsb	r3, [r7, #2]
	cmp	r3, #0
	bge	.L9184
	movw	r1, #:lower16:.LC591
	mov	r0, r6
	movt	r1, #:upper16:.LC591
	bl	find_ep
	subs	r4, r0, #0
	bne	.L9210
	b	.L9184
.L9212:
	movw	r1, #:lower16:.LC588
	mov	r0, r6
	movt	r1, #:upper16:.LC588
	bl	find_ep
	subs	r4, r0, #0
	beq	.L9185
	ldr	r3, [r4]
	cmp	r3, #0
	beq	.L9214
.L9185:
	movw	r1, #:lower16:.LC589
	mov	r0, r6
	movt	r1, #:upper16:.LC589
	bl	find_ep
	subs	r4, r0, #0
	beq	.L9184
.L9210:
	ldr	r3, [r4]
	cmp	r3, #0
	bne	.L9184
	mov	r3, r8
	mov	r2, r7
	mov	r1, r4
	mov	r0, r6
	bl	ep_matches.part.17
	cmp	r0, #0
	bne	.L9186
	b	.L9184
.L9214:
	mov	r3, r8
	mov	r2, r7
	mov	r1, r4
	mov	r0, r6
	bl	ep_matches.part.17
	cmp	r0, #0
	bne	.L9186
	b	.L9185
	.fnend
	.size	usb_ep_autoconfig_ss, .-usb_ep_autoconfig_ss
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	__ffs_func_bind_do_descs, %function
__ffs_func_bind_do_descs:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	bne	.L9230
	ldr	r0, [r3, #48]
	cmp	r0, #0
	beq	.L9218
	str	r2, [r0, r1, lsl #2]
	mov	r0, #2
.L9219:
	cmp	r2, #0
	beq	.L9230
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	cmp	r1, #5
	beq	.L9233
.L9230:
	mov	r0, #0
	bx	lr
.L9218:
	ldr	r0, [r3, #44]
	cmp	r0, #0
	ldreq	ip, [r3, #52]
	strne	r2, [r0, r1, lsl #2]
	movne	r0, #1
	streq	r2, [ip, r1, lsl #2]
	b	.L9219
.L9233:
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r7, [r2, #2]	@ zero_extendqisi2
	.pad #4
	sub	sp, sp, #4
	ldr	r8, [r3, #12]
	and	r7, r7, #15
	sub	r5, r7, #1
	rsb	r5, r5, r5, lsl #3
	lsl	r5, r5, #2
	add	r6, r8, r5
	add	r0, r6, r0, lsl #2
	ldr	r1, [r0, #8]
	cmp	r1, #0
	bne	.L9223
	str	r2, [r0, #8]
	ldr	r4, [r8, r5]
	cmp	r4, #0
	beq	.L9222
	ldr	r3, [r6, #8]
	ldrh	r0, [r2, #4]	@ unaligned
	ldrb	r3, [r3, #2]	@ zero_extendqisi2
	cmp	r0, #0
	movne	r0, #0
	strb	r3, [r2, #2]
	bne	.L9215
	ldr	r3, [r6, #8]
	ldrh	r3, [r3, #4]	@ unaligned
	strh	r3, [r2, #4]	@ unaligned
.L9215:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9222:
	mov	r10, r2
	ldr	r0, [r3, #4]
	mov	r2, r4
	mov	r1, r10
	mov	r9, r3
	bl	usb_ep_autoconfig_ss
	subs	fp, r0, #0
	beq	.L9224
	ldr	r3, [r9, #12]
	mov	r1, #208
	ldr	r2, [fp, #8]
	add	r3, r3, r5
	str	r3, [fp]
	ldr	r3, [r2, #8]
	blx	r3
	subs	r3, r0, #0
	beq	.L9225
	str	fp, [r8, r5]
	mov	r0, r4
	str	r3, [r6, #4]
	ldrb	r3, [r10, #2]	@ zero_extendqisi2
	and	r3, r3, #15
	add	r3, r9, r3
	strb	r7, [r3, #16]
	b	.L9215
.L9223:
	mvn	r0, #21
	b	.L9215
.L9224:
	movw	r0, #65012
	movt	r0, 65535
	b	.L9215
.L9225:
	mvn	r0, #11
	b	.L9215
	.fnend
	.size	__ffs_func_bind_do_descs, .-__ffs_func_bind_do_descs
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_bind, %function
diag_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r7, [r0, #24]
	cmp	r3, #15
	movhi	r3, #237
	bhi	.L9235
	add	r1, r3, #12
	add	r2, r3, #1
	str	r4, [r0, r1, lsl #2]
	strb	r2, [r0, #44]
.L9235:
	movw	r5, #:lower16:.LANCHOR0
	mov	r2, #0
	ldr	r1, .L9291
	movt	r5, #:upper16:.LANCHOR0
	strb	r3, [r5, #1794]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9236
	str	r0, [r4, #88]
	mov	r2, #0
	ldr	r1, .L9291+4
	str	r4, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L9236
	str	r3, [r4, #84]
	ldr	r0, .L9291+8
	str	r4, [r3]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L9253
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L9288
.L9238:
	ldr	r3, [r4, #120]
	cmp	r3, #0
	beq	.L9256
	ldrb	r2, [r5, #1794]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L9256
	ldr	r2, [r4, #116]
	ldrb	r1, [r2, #33]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L9244
.L9286:
	ldrh	r0, [r2, #27]	@ unaligned
	mov	r5, #0
	blx	r3
	b	.L9234
.L9236:
	mvn	r5, #18
.L9237:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L9243
.L9251:
	bl	kfree
.L9243:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L9248
	bl	kfree
.L9248:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L9249
	bl	kfree
.L9249:
	ldr	r3, [r4, #84]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L9234
	mov	r2, #0
	str	r2, [r3]
.L9234:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9288:
	ldrb	r2, [r5, #1806]	@ zero_extendqisi2
	ldrb	r3, [r5, #1818]	@ zero_extendqisi2
	ldr	r0, .L9291+12
	strb	r2, [r5, #1846]
	strb	r3, [r5, #1858]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L9239
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L9238
	ldrb	r2, [r5, #1806]	@ zero_extendqisi2
	ldrb	r3, [r5, #1818]	@ zero_extendqisi2
	ldr	r0, .L9291+16
	strb	r2, [r5, #1886]
	strb	r3, [r5, #1898]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L9238
	mvn	r5, #11
	b	.L9243
.L9244:
	ldr	r0, [r2, #44]
	ldr	r0, [r0, #16]
	ldr	r0, [r0]
	ldr	r5, [r0, #4]
	cmp	r5, #0
	bne	.L9287
	b	.L9234
.L9290:
	ldrb	ip, [r5]	@ zero_extendqisi2
	cmp	ip, r1
	beq	.L9289
	adds	r5, r5, #8
	beq	.L9234
.L9287:
	ldr	r0, [r5, #4]
	cmp	r0, #0
	bne	.L9290
.L9256:
	mov	r5, #0
	b	.L9234
.L9253:
	mvn	r5, #11
	b	.L9237
.L9239:
	ldr	r0, [r4, #12]
	mvn	r5, #11
	cmp	r0, #0
	bne	.L9251
	b	.L9248
.L9289:
	mov	r1, r0
	b	.L9286
.L9292:
	.align	2
.L9291:
	.word	.LANCHOR0+1804
	.word	.LANCHOR0+1816
	.word	.LANCHOR0+1828
	.word	.LANCHOR0+1868
	.word	.LANCHOR0+1908
	.fnend
	.size	diag_function_bind, .-diag_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_bind, %function
rmnet_smd_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r8, [r0, #24]
	str	r8, [r1, #84]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L9296
	movw	r4, #:lower16:.LANCHOR0
	mov	r5, r1
	ldr	r1, .L9342
	mov	r6, r0
	add	r2, r3, #12
	add	r0, r3, #1
	movt	r4, #:upper16:.LANCHOR0
	str	r5, [r6, r2, lsl #2]
	mov	r2, #0
	strb	r0, [r6, #44]
	strb	r3, [r4, #1934]
	strb	r3, [r5, #104]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9296
	str	r8, [r0]
	mov	r2, #0
	ldr	r1, .L9342+4
	str	r0, [r5, #92]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9296
	str	r8, [r0]
	mov	r2, #0
	add	r1, r4, #1968
	str	r0, [r5, #88]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L9296
	str	r8, [r7]
	str	r7, [r5, #96]
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L9340
.L9297:
	ldr	r3, [r7, #8]
	mov	r1, #208
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L9298
	mov	r2, #8
	movw	r6, #:lower16:kmalloc_caches
	movt	r6, #:upper16:kmalloc_caches
	str	r2, [r4, #4]
	ldr	r0, [r6, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4]
	beq	.L9300
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4]
	bne	.L9300
	ldr	r3, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L9298:
	mvn	r3, #11
	mov	r4, r3
	str	r3, [r5, #100]
.L9293:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L9340:
	ldrb	r1, [r4, #1946]	@ zero_extendqisi2
	ldrb	r2, [r4, #1958]	@ zero_extendqisi2
	ldrb	r3, [r4, #1970]	@ zero_extendqisi2
	strb	r1, [r4, #1982]
	strb	r2, [r4, #1994]
	strb	r3, [r4, #2006]
	b	.L9297
.L9300:
	cmn	r4, #4096
	str	r4, [r5, #100]
	bhi	.L9293
	movw	r3, #:lower16:rmnet_smd_notify_complete
	mov	r2, #8
	movt	r3, #:upper16:rmnet_smd_notify_complete
	mov	r7, #4
	str	r3, [r4, #28]
	ldr	r3, [r5, #100]
	add	r4, r5, #108
	str	r5, [r3, #32]
	ldr	r3, [r5, #100]
	str	r2, [r3, #4]
.L9303:
	bl	rmnet_smd_alloc_qmi.constprop.148
	mov	r3, r0
	mov	r2, r4
	cmn	r3, #4096
	add	r0, r0, #8
	bhi	.L9339
	ldr	r1, [r5, #112]
	bl	__list_add
	subs	r7, r7, #1
	bne	.L9303
	mov	r4, #8
	add	r7, r5, #116
.L9305:
	bl	rmnet_smd_alloc_qmi.constprop.148
	mov	r3, r0
	mov	r2, r7
	cmn	r3, #4096
	add	r0, r0, #8
	bhi	.L9339
	ldr	r1, [r5, #120]
	bl	__list_add
	subs	r4, r4, #1
	bne	.L9305
	movw	r9, #:lower16:rmnet_smd_complete_epout
	mov	r8, #8
	movt	r9, #:upper16:rmnet_smd_complete_epout
	mov	r10, #2048
.L9309:
	ldr	r7, [r5, #88]
	mov	r1, #208
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L9320
	str	r10, [r4, #4]
	ldr	r3, [r6, #44]
	mov	ip, #16
	mov	r2, #2048
	mov	r1, #208
	subs	r0, r3, #0
	streq	ip, [r4]
	beq	.L9308
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4]
	bne	.L9308
	ldr	r3, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	mvn	r4, #11
	ldr	r3, [r3, #12]
	blx	r3
	b	.L9302
.L9339:
	mov	r4, r3
.L9302:
	mov	r0, r5
	bl	rmnet_smd_free_buf
	mov	r3, #0
	str	r3, [r5, #88]
	str	r3, [r5, #92]
	str	r3, [r5, #96]
	b	.L9293
.L9320:
	mvn	r4, #11
	b	.L9302
.L9308:
	cmn	r4, #4096
	add	r2, r5, #148
	add	r0, r4, #36
	bhi	.L9302
	str	r10, [r4, #4]
	str	r9, [r4, #28]
	str	r5, [r4, #32]
	ldr	r1, [r5, #152]
	bl	__list_add
	subs	r8, r8, #1
	bne	.L9309
	movw	r9, #:lower16:rmnet_smd_complete_epin
	mov	r4, #8
	movt	r9, #:upper16:rmnet_smd_complete_epin
	mov	r10, #2048
.L9313:
	ldr	r8, [r5, #92]
	mov	r1, #208
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #8]
	blx	r3
	subs	r7, r0, #0
	beq	.L9320
	str	r10, [r7, #4]
	ldr	r3, [r6, #44]
	mov	ip, #16
	mov	r2, #2048
	mov	r1, #208
	subs	r0, r3, #0
	streq	ip, [r7]
	beq	.L9312
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r7]
	bne	.L9312
	ldr	r3, [r8, #8]
	mov	r1, r7
	mov	r0, r8
	mvn	r4, #11
	ldr	r3, [r3, #12]
	blx	r3
	b	.L9302
.L9312:
	cmn	r7, #4096
	add	r2, r5, #140
	add	r0, r7, #36
	bhi	.L9341
	str	r9, [r7, #28]
	str	r5, [r7, #32]
	ldr	r1, [r5, #144]
	bl	__list_add
	subs	r4, r4, #1
	bne	.L9313
	b	.L9293
.L9296:
	mvn	r4, #18
	b	.L9293
.L9341:
	mov	r4, r7
	b	.L9302
.L9343:
	.align	2
.L9342:
	.word	.LANCHOR0+1944
	.word	.LANCHOR0+1956
	.fnend
	.size	rmnet_smd_bind, .-rmnet_smd_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_bind, %function
rmnet_sdio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #24]
	str	r7, [r1, #84]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L9351
	movw	r5, #:lower16:.LANCHOR0
	mov	r4, r1
	ldr	r1, .L9371
	mov	r6, r0
	add	r2, r3, #12
	add	r0, r3, #1
	movt	r5, #:upper16:.LANCHOR0
	str	r4, [r6, r2, lsl #2]
	mov	r2, #0
	strb	r0, [r6, #44]
	strb	r3, [r5, #2018]
	strb	r3, [r4, #104]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9347
	str	r7, [r0]
	mov	r2, #0
	ldr	r1, .L9371+4
	str	r0, [r4, #92]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9347
	str	r7, [r0]
	mov	r2, #0
	ldr	r1, .L9371+8
	str	r0, [r4, #88]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9347
	str	r7, [r0]
	str	r0, [r4, #96]
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L9348
	ldrb	r1, [r5, #2030]	@ zero_extendqisi2
	ldrb	r2, [r5, #2042]	@ zero_extendqisi2
	ldrb	r3, [r5, #2054]	@ zero_extendqisi2
	strb	r1, [r5, #2066]
	strb	r2, [r5, #2078]
	strb	r3, [r5, #2090]
.L9348:
	mov	r3, #0
	add	r2, r4, #252
	ldr	r1, [r4, #200]
	mov	r0, #4
	bl	queue_delayed_work_on
	mov	r0, #0
	b	.L9344
.L9347:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	beq	.L9351
	mov	r2, #0
	mvn	r0, #18
	str	r2, [r3]
.L9344:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9351:
	mvn	r0, #18
	b	.L9344
.L9372:
	.align	2
.L9371:
	.word	.LANCHOR0+2028
	.word	.LANCHOR0+2040
	.word	.LANCHOR0+2052
	.fnend
	.size	rmnet_sdio_bind, .-rmnet_sdio_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_bind, %function
audio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	ldr	r5, .L9390
	movw	r4, #:lower16:.LANCHOR0
	strd	r6, [sp, #8]
	movt	r4, #:upper16:.LANCHOR0
	movw	ip, #44100
	strd	r8, [sp, #16]
	mov	r3, #2
	mov	r6, #0
	str	lr, [sp, #24]
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	movw	lr, #2120
	.pad #12
	sub	sp, sp, #12
	strh	ip, [r4, lr]	@ movhi
	ldr	lr, [r0, #24]
	strb	r3, [r4, #2107]
	cmp	r2, #15
	strb	r3, [r4, #2116]
	strb	r6, [r5, #2]
	str	ip, [sp, #4]
	bhi	.L9374
	add	r3, r2, #1
	add	ip, r2, #12
	strb	r2, [r4, #2126]
	uxtb	r3, r3
	str	r1, [r0, ip, lsl #2]
	cmp	r3, #15
	strb	r3, [r0, #44]
	bhi	.L9374
	mov	r6, r0
	mov	r7, r1
	strb	r3, [r4, #2138]
	add	r0, r2, #2
	add	r1, r3, #12
	strb	r3, [r4, #2150]
	mov	r2, #0
	str	r7, [r6, r1, lsl #2]
	add	r1, r4, #2160
	strb	r0, [r6, #44]
	ldr	r0, [lr]
	bl	usb_ep_autoconfig_ss
	subs	r5, r0, #0
	beq	.L9374
	str	r5, [r7, #104]
	movw	r9, #:lower16:kmalloc_caches
	movw	r8, #:lower16:audio_data_complete
	str	r7, [r5]
	ldr	r3, [r6, #24]
	movt	r9, #:upper16:kmalloc_caches
	movt	r8, #:upper16:audio_data_complete
	mov	r6, #4
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	ldrbhi	r3, [r4, #2162]	@ zero_extendqisi2
	strbhi	r3, [r4, #2174]
.L9379:
	ldr	r3, [r5, #8]
	mov	r1, #208
	mov	r0, r5
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	mov	r2, #256
	mov	r1, #208
	mov	r3, #16
	beq	.L9376
	ldr	ip, [r9, #32]
	subs	r0, ip, #0
	streq	r3, [r4]
	beq	.L9378
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4]
	beq	.L9389
.L9378:
	mov	r3, #256
	mov	r1, r4
	mov	r0, r7
	str	r3, [r4, #4]
	str	r8, [r4, #28]
	str	r7, [r4, #32]
	bl	audio_req_put
	subs	r6, r6, #1
	bne	.L9379
	mov	r0, r6
	b	.L9373
.L9389:
	ldr	r3, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L9376:
	mvn	r0, #11
.L9373:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L9374:
.L9380:
	mvn	r0, #18
	b	.L9373
.L9391:
	.align	2
.L9390:
	.word	.LANCHOR0+2120
	.fnend
	.size	audio_bind, .-audio_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_bind, %function
ecm_qc_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	ldr	r7, [r0, #24]
	cmp	r2, #15
	bhi	.L9393
	add	r3, r2, #1
	add	r1, r2, #12
	movw	r5, #:lower16:.LANCHOR0
	mov	r6, r0
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR0
	strb	r3, [r0, #44]
	strb	r2, [r4, #120]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	strb	r2, [r5, #2186]
	strb	r2, [r5, #2199]
	cmp	r3, #15
	bhi	.L9393
	add	r1, r3, #12
	add	r0, r3, #1
	strb	r3, [r5, #2200]
	strb	r3, [r5, #2206]
	mov	r2, #0
	str	r4, [r6, r1, lsl #2]
	ldr	r1, .L9456
	strb	r0, [r6, #44]
	strb	r3, [r5, #2218]
	strb	r3, [r4, #121]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9393
	str	r0, [r4, #88]
	mov	r2, #0
	add	r1, r5, #2240
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9393
	str	r0, [r4, #92]
	mov	r2, #0
	ldr	r1, .L9456+4
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L9393
	str	r3, [r4, #144]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r7, r0
	str	r0, [r4, #148]
	beq	.L9397
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L9396
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L9396:
	str	r0, [r7]
	ldr	r3, [r4, #148]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L9397
	str	r4, [r3, #32]
	ldr	r2, [r4, #148]
	movw	r3, #:lower16:ecm_qc_notify_complete
	movt	r3, #:upper16:ecm_qc_notify_complete
	ldr	r0, .L9456+8
	str	r3, [r2, #28]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L9397
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L9455
.L9398:
	movw	r2, #:lower16:ecm_qc_open
	movw	r3, #:lower16:ecm_qc_close
	movt	r2, #:upper16:ecm_qc_open
	movt	r3, #:upper16:ecm_qc_close
	mov	r5, #0
	strd	r2, [r4, #112]
.L9392:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9455:
	ldrb	r1, [r5, #2230]	@ zero_extendqisi2
	ldrb	r2, [r5, #2242]	@ zero_extendqisi2
	ldrb	r3, [r5, #2254]	@ zero_extendqisi2
	ldr	r0, .L9456+12
	strb	r1, [r5, #2306]
	strb	r2, [r5, #2318]
	strb	r3, [r5, #2330]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L9399
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L9398
	ldrb	r3, [r5, #2254]	@ zero_extendqisi2
	ldrb	r1, [r5, #2230]	@ zero_extendqisi2
	ldrb	r2, [r5, #2242]	@ zero_extendqisi2
	ldr	r0, .L9456+16
	strb	r1, [r5, #2382]
	strb	r2, [r5, #2394]
	strb	r3, [r5, #2406]
	bl	usb_copy_descriptors
	ldr	r3, [r4, #8]
	str	r0, [r4, #12]
	cmp	r3, #0
	bne	.L9398
.L9399:
	ldr	r0, [r4, #12]
	mvn	r5, #11
	cmp	r0, #0
	beq	.L9403
.L9409:
	bl	kfree
.L9402:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L9403
	bl	kfree
.L9403:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L9404
	bl	kfree
.L9404:
	ldr	r3, [r4, #148]
	cmp	r3, #0
	beq	.L9405
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #144]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L9405:
	ldr	r3, [r4, #144]
	movw	r0, #:lower16:.LC592
	ldr	r1, .L9456+20
	movt	r0, #:upper16:.LC592
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	mov	r3, r5
	ldr	r2, [r4]
	bl	printk
	b	.L9392
.L9393:
	mvn	r5, #18
.L9395:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	bne	.L9409
	b	.L9402
.L9397:
	mvn	r5, #11
	b	.L9395
.L9457:
	.align	2
.L9456:
	.word	.LANCHOR0+2228
	.word	.LANCHOR0+2252
	.word	.LANCHOR0+2264
	.word	.LANCHOR0+2340
	.word	.LANCHOR0+2416
	.word	.LANCHOR3-2796
	.fnend
	.size	ecm_qc_bind, .-ecm_qc_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_bind, %function
mbim_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	ldr	r1, .L9521
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r7, [r0, #24]
	movw	r0, #:lower16:.LC266
	.pad #20
	sub	sp, sp, #20
	movt	r0, #:upper16:.LC266
	bl	printk
	str	r7, [r4, #84]
	ldrb	r3, [r6, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L9459
	add	r1, r3, #12
	add	r2, r3, #1
	movw	r5, #:lower16:.LANCHOR0
	str	r4, [r6, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR0
	strb	r2, [r6, #44]
	strb	r3, [r4, #196]
	ldrb	r0, [r6, #44]	@ zero_extendqisi2
	strb	r3, [r5, #2470]
	strb	r3, [r5, #2478]
	strb	r3, [r5, #2491]
	cmp	r0, #15
	bhi	.L9459
	add	r2, r0, #12
	add	r3, r0, #1
	strb	r0, [r5, #2492]
	mov	r8, #0
	strb	r0, [r5, #2498]
	ldr	r1, .L9521+4
	str	r4, [r6, r2, lsl #2]
	mov	r2, r8
	strb	r3, [r6, #44]
	strb	r0, [r5, #2510]
	str	r7, [r4, #140]
	str	r4, [r4, #144]
	strb	r0, [r4, #197]
	strb	r8, [r4, #198]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r9, r0, #0
	beq	.L9515
	movw	r0, #:lower16:.LC596
	ldr	r1, .L9521
	movt	r0, #:upper16:.LC596
	bl	printk
	str	r7, [r9]
	mov	r2, r8
	ldr	r1, .L9521+8
	str	r9, [r4, #148]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r9, r0, #0
	beq	.L9516
	movw	r0, #:lower16:.LC598
	ldr	r1, .L9521
	movt	r0, #:upper16:.LC598
	bl	printk
	str	r7, [r9]
	mov	r2, r8
	add	r1, r5, #2544
	str	r9, [r4, #152]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r8, r0, #0
	beq	.L9517
	movw	r0, #:lower16:.LC600
	ldr	r1, .L9521
	movt	r0, #:upper16:.LC600
	bl	printk
	str	r8, [r4, #156]
	ldr	r3, [r8, #8]
	mov	r1, #208
	str	r7, [r8]
	mov	r0, r8
	ldr	r3, [r3, #8]
	blx	r3
	subs	r7, r0, #0
	streq	r7, [r4, #160]
	beq	.L9465
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r7]
	beq	.L9467
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	mov	r9, r0
	str	r0, [r7]
	beq	.L9518
.L9467:
	mov	r3, #16
	movw	r0, #:lower16:.LC601
	ldr	r1, .L9521
	movt	r0, #:upper16:.LC601
	str	r3, [r7, #4]
	str	r7, [r4, #160]
	bl	printk
	ldr	r2, [r4, #160]
	movw	r3, #:lower16:mbim_notify_complete
	movt	r3, #:upper16:mbim_notify_complete
	str	r4, [r2, #32]
	ldr	r2, [r4, #160]
	str	r3, [r2, #28]
	ldr	r3, [r4, #132]
	cmp	r3, #7
	beq	.L9519
	ldr	r3, .L9521+12
	mvn	r1, #31
	mov	r2, #15
	strb	r1, [r3, #9]
	strb	r2, [r3, #10]
.L9470:
	ldr	r0, .L9521+16
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L9473
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L9520
.L9472:
	ldrb	r3, [r6, #20]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC593
	movw	r0, #:lower16:.LC603
	ldr	lr, [r4, #152]
	movt	r1, #:upper16:.LC593
	movt	r0, #:upper16:.LC603
	sub	r2, r3, #2
	cmp	r2, #2
	ldr	r2, [r4, #156]
	addls	r3, r3, #48
	strbls	r3, [r5, #190]
	ldr	ip, [r6, #24]
	movw	r3, #:lower16:.LC594
	ldr	r5, [r2, #4]
	movt	r3, #:upper16:.LC594
	ldrb	r2, [r4, #136]	@ zero_extendqisi2
	ldr	r6, [ip]
	ldr	ip, [r4, #148]
	ldr	r4, [r6, #20]
	str	r5, [sp, #8]
	mov	r5, #0
	ldr	lr, [lr, #4]
	cmp	r4, #2
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	movhi	r3, r1
	ldr	r1, .L9521
	str	ip, [sp]
	bl	printk
	b	.L9458
.L9516:
	movw	r0, #:lower16:.LC597
	ldr	r1, .L9521
	mvn	r5, #18
	movt	r0, #:upper16:.LC597
	bl	printk
.L9461:
	movw	r0, #:lower16:.LC604
	mov	r3, r5
	ldr	r1, .L9521
	movt	r0, #:upper16:.LC604
	ldr	r2, [r4]
	bl	printk
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L9479
	bl	kfree
.L9479:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L9480
	bl	kfree
.L9480:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L9481
	bl	kfree
.L9481:
	ldr	r3, [r4, #160]
	cmp	r3, #0
	beq	.L9482
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L9482:
	ldr	r3, [r4, #156]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #152]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #148]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
.L9458:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L9515:
	movw	r0, #:lower16:.LC595
	ldr	r1, .L9521
	mvn	r5, #18
	movt	r0, #:upper16:.LC595
	bl	printk
	b	.L9461
.L9519:
	ldr	r3, .L9521+12
	mov	r1, #0
	mov	r2, #8
	strb	r1, [r3, #9]
	strb	r2, [r3, #10]
	b	.L9470
.L9517:
	movw	r0, #:lower16:.LC599
	ldr	r1, .L9521
	mvn	r5, #18
	movt	r0, #:upper16:.LC599
	bl	printk
	b	.L9461
.L9518:
	ldr	r3, [r8, #8]
	mov	r1, r7
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	str	r9, [r4, #160]
.L9465:
	movw	r0, #:lower16:.LC602
	ldr	r1, .L9521
	mvn	r5, #11
	movt	r0, #:upper16:.LC602
	bl	printk
	b	.L9461
.L9520:
	ldrb	r1, [r5, #2522]	@ zero_extendqisi2
	ldrb	r2, [r5, #2534]	@ zero_extendqisi2
	ldrb	r3, [r5, #2546]	@ zero_extendqisi2
	ldr	r0, .L9521+20
	strb	r1, [r5, #2618]
	strb	r2, [r5, #2630]
	strb	r3, [r5, #2642]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L9473
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L9472
	ldrb	r1, [r5, #2522]	@ zero_extendqisi2
	ldrb	r2, [r5, #2534]	@ zero_extendqisi2
	ldrb	r3, [r5, #2546]	@ zero_extendqisi2
	ldr	r0, .L9521+24
	strb	r1, [r5, #2702]
	strb	r2, [r5, #2714]
	strb	r3, [r5, #2726]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L9472
.L9473:
	mvn	r5, #11
	b	.L9461
.L9459:
	mvn	r5, #18
	b	.L9461
.L9522:
	.align	2
.L9521:
	.word	.LANCHOR3-2784
	.word	.LANCHOR0+2520
	.word	.LANCHOR0+2532
	.word	.LANCHOR0+2556
	.word	.LANCHOR0+2568
	.word	.LANCHOR0+2652
	.word	.LANCHOR0+2736
	.fnend
	.size	mbim_bind, .-mbim_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_bind, %function
ecm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r6, [r0, #24]
	cmp	r3, #15
	bhi	.L9524
	add	r1, r3, #12
	add	r2, r3, #1
	movw	r5, #:lower16:.LANCHOR0
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR0
	strb	r2, [r0, #44]
	strb	r3, [r4, #148]
	ldrb	ip, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r5, #2798]
	strb	r3, [r5, #2806]
	strb	r3, [r5, #2819]
	cmp	ip, #15
	bls	.L9525
.L9524:
	ldr	r3, [r4, #168]
	mvn	r5, #18
.L9526:
	cmp	r3, #0
	beq	.L9530
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #164]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L9530:
	ldr	r3, [r4, #164]
	movw	r1, #:lower16:.LC605
	movt	r1, #:upper16:.LC605
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r6]
	mov	r3, r5
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L9523:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9525:
	add	r2, ip, #12
	add	r3, ip, #1
	strb	ip, [r5, #2820]
	strb	ip, [r5, #2826]
	add	r1, r5, #2848
	str	r4, [r0, r2, lsl #2]
	mov	r2, #0
	strb	r3, [r0, #44]
	strb	ip, [r5, #2838]
	strb	ip, [r4, #149]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9524
	str	r0, [r4, #88]
	mov	r2, #0
	ldr	r1, .L9554
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9524
	str	r0, [r4, #92]
	mov	r2, #0
	ldr	r1, .L9554+4
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L9524
	str	r3, [r4, #164]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r6, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r7, r0
	str	r0, [r4, #168]
	beq	.L9537
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L9531
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L9531:
	str	r0, [r7]
	ldr	r3, [r4, #168]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L9539
	str	r4, [r3, #32]
	ldr	r3, .L9554+8
	movw	r2, #:lower16:ecm_notify_complete
	ldr	r1, [r4, #168]
	movt	r2, #:upper16:ecm_notify_complete
	mov	r0, r4
	ldrb	r7, [r5, #2850]	@ zero_extendqisi2
	ldrb	lr, [r5, #2862]	@ zero_extendqisi2
	ldrb	ip, [r5, #2874]	@ zero_extendqisi2
	str	r2, [r1, #28]
	add	r2, r3, #52
	add	r1, r3, #96
	strb	r7, [r5, #2886]
	strb	lr, [r5, #2898]
	strb	ip, [r5, #2910]
	strb	r7, [r5, #2922]
	strb	lr, [r5, #2934]
	strb	ip, [r5, #2946]
	bl	usb_assign_descriptors
	subs	r5, r0, #0
	beq	.L9532
	ldr	r3, [r4, #168]
	b	.L9526
.L9539:
	mvn	r5, #11
	b	.L9526
.L9537:
	mvn	r5, #11
	b	.L9530
.L9532:
	movw	r2, #:lower16:ecm_open
	movw	r3, #:lower16:ecm_close
	movt	r2, #:upper16:ecm_open
	movt	r3, #:upper16:ecm_close
	strd	r2, [r4, #136]
	b	.L9523
.L9555:
	.align	2
.L9554:
	.word	.LANCHOR0+2860
	.word	.LANCHOR0+2872
	.word	.LANCHOR0+2956
	.fnend
	.size	ecm_bind, .-ecm_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_bind, %function
f_audio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r1
	movw	r4, #:lower16:.LANCHOR0
	strd	r6, [sp, #8]
	movt	r4, #:upper16:.LANCHOR0
	movw	ip, #3116
	strd	r8, [sp, #16]
	ldr	r7, .L9571
	movw	r6, #3140
	str	lr, [sp, #24]
	ldr	r1, [r1, #140]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r5, #168]
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	strh	r1, [r4, ip]	@ movhi
	ubfx	r1, r1, #16, #8
	ldrb	ip, [r5, #136]	@ zero_extendqisi2
	strh	r3, [r4, r6]	@ movhi
	ldr	r6, [r0, #24]
	strb	r1, [r7, #2]
	ldrb	r1, [r5, #164]	@ zero_extendqisi2
	cmp	r2, #15
	str	r3, [sp, #4]
	ubfx	r3, r3, #16, #8
	strb	ip, [r4, #3103]
	strb	ip, [r4, #3112]
	strb	r1, [r4, #3127]
	strb	r1, [r4, #3136]
	strb	r3, [r7, #26]
	bhi	.L9568
	add	r3, r2, #1
	add	r1, r2, #12
	strb	r2, [r4, #3146]
	uxtb	r3, r3
	str	r5, [r0, r1, lsl #2]
	cmp	r3, #15
	strb	r3, [r0, #44]
	bhi	.L9560
	add	r2, r2, #2
	add	r1, r3, #12
	strb	r3, [r4, #16]
	mov	r7, #0
	strb	r3, [r4, #3158]
	str	r5, [r0, r1, lsl #2]
	strb	r2, [r0, #44]
	strb	r7, [r5, #248]
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r4, #3170]
	cmp	r2, #15
	bhi	.L9560
	ldr	r8, .L9571+4
	add	r1, r2, #12
	add	r3, r2, #1
	strb	r2, [r4, #17]
	str	r5, [r0, r1, lsl #2]
	strb	r2, [r4, #3182]
	strb	r3, [r0, #44]
	mov	r1, r8
	strb	r2, [r4, #3194]
	mov	r2, r7
	strb	r7, [r5, #249]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9569
	add	r9, r4, #3216
	str	r0, [r5, #176]
	mov	r2, r7
	str	r6, [r0]
	mov	r1, r9
	str	r8, [r0, #28]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	subs	r8, r0, #0
	beq	.L9570
.L9563:
	str	r8, [r5, #172]
	ldr	r2, .L9571+8
	mov	r0, r5
	str	r6, [r8]
	ldrb	r1, [r4, #3206]	@ zero_extendqisi2
	mov	r3, r7
	ldrb	ip, [r4, #3218]	@ zero_extendqisi2
	str	r9, [r8, #28]
	and	r1, r1, #127
	and	ip, ip, #127
	strb	r1, [r4, #3244]
	mov	r1, r2
	strb	ip, [r4, #3276]
	bl	usb_assign_descriptors
	cmp	r0, #0
	strne	r7, [r8]
.L9556:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L9560:
	ldr	r2, .L9571+12
	movw	r0, #:lower16:.LC607
	movt	r0, #:upper16:.LC607
	mov	r1, r2
	bl	printk
	mvn	r0, #18
	b	.L9556
.L9570:
	ldr	r2, .L9571+12
	movw	r0, #:lower16:.LC609
	movt	r0, #:upper16:.LC609
	mov	r1, r2
	bl	printk
	mvn	r0, #11
	b	.L9556
.L9569:
	ldr	r2, .L9571+12
	movw	r0, #:lower16:.LC608
	movt	r0, #:upper16:.LC608
	mov	r1, r2
	bl	printk
	mvn	r0, #18
	b	.L9556
.L9568:
	ldr	r2, .L9571+12
	movw	r0, #:lower16:.LC606
	movt	r0, #:upper16:.LC606
	mov	r1, r2
	bl	printk
	mvn	r0, #18
	b	.L9556
.L9572:
	.align	2
.L9571:
	.word	.LANCHOR0+3116
	.word	.LANCHOR0+3204
	.word	.LANCHOR0+3292
	.word	.LANCHOR3-2772
	.fnend
	.size	f_audio_bind, .-f_audio_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_bind, %function
ncm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r6, [r0, #24]
	cmp	r3, #15
	bhi	.L9574
	add	r1, r3, #12
	add	r2, r3, #1
	movw	r5, #:lower16:.LANCHOR0
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR0
	strb	r2, [r0, #44]
	strb	r3, [r4, #148]
	ldrb	ip, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r5, #3370]
	strb	r3, [r5, #3378]
	strb	r3, [r5, #3391]
	cmp	ip, #15
	bls	.L9610
.L9574:
	mvn	r5, #18
.L9576:
	mov	r0, r4
	bl	usb_free_all_descriptors
	ldr	r3, [r4, #168]
	cmp	r3, #0
	beq	.L9580
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #164]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L9580:
	ldr	r3, [r4, #164]
	movw	r1, #:lower16:.LC605
	movt	r1, #:upper16:.LC605
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r6]
	mov	r3, r5
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L9573:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9610:
	add	r2, ip, #12
	add	r3, ip, #1
	strb	ip, [r5, #3392]
	strb	ip, [r5, #3398]
	ldr	r1, .L9611
	str	r4, [r0, r2, lsl #2]
	mov	r2, #0
	strb	r3, [r0, #44]
	strb	ip, [r5, #3410]
	strb	ip, [r4, #149]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9574
	str	r0, [r4, #88]
	mov	r2, #0
	ldr	r1, .L9611+4
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9574
	str	r0, [r4, #92]
	mov	r2, #0
	ldr	r1, .L9611+8
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L9574
	str	r3, [r4, #164]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r6, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r7, r0
	str	r0, [r4, #168]
	beq	.L9578
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L9577
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L9577:
	str	r0, [r7]
	ldr	r3, [r4, #168]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L9578
	str	r4, [r3, #32]
	ldr	ip, [r4, #168]
	movw	r1, #:lower16:ncm_notify_complete
	movt	r1, #:upper16:ncm_notify_complete
	ldrb	r0, [r5, #3434]	@ zero_extendqisi2
	mov	r3, #0
	ldr	r2, .L9611+12
	ldrb	lr, [r5, #3422]	@ zero_extendqisi2
	str	r1, [ip, #28]
	ldrb	ip, [r5, #3446]	@ zero_extendqisi2
	add	r1, r2, #48
	strb	r0, [r5, #3470]
	mov	r0, r4
	strb	lr, [r5, #3458]
	strb	ip, [r5, #3482]
	mov	r5, r3
	bl	usb_assign_descriptors
	movw	r2, #:lower16:ncm_open
	movw	r3, #:lower16:ncm_close
	movt	r2, #:upper16:ncm_open
	movt	r3, #:upper16:ncm_close
	strd	r2, [r4, #136]
	b	.L9573
.L9578:
	mvn	r5, #11
	b	.L9576
.L9612:
	.align	2
.L9611:
	.word	.LANCHOR0+3420
	.word	.LANCHOR0+3432
	.word	.LANCHOR0+3444
	.word	.LANCHOR0+3492
	.fnend
	.size	ncm_bind, .-ncm_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_bind, %function
fsg_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #24]
	ldr	r6, [r3]
	str	r6, [r1, #84]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L9617
	add	r2, r3, #12
	mov	r5, r1
	movw	r4, #:lower16:.LANCHOR0
	add	r1, r3, #1
	movt	r4, #:upper16:.LANCHOR0
	str	r5, [r0, r2, lsl #2]
	mov	r2, #0
	strb	r1, [r0, #44]
	add	r1, r4, #3600
	mov	r0, r6
	strh	r3, [r5, #92]	@ movhi
	strb	r3, [r4, #3590]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L9616
	ldr	ip, [r5, #88]
	mov	r0, r6
	mov	r2, #0
	ldr	r1, .L9622
	str	ip, [r3]
	str	r3, [r5, #100]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9616
	ldr	ip, [r5, #88]
	mov	r6, #15
	add	r2, r4, #3712
	sub	r3, r2, #24
	add	r1, r4, #3728
	str	ip, [r0]
	ldrb	lr, [r4, #3602]	@ zero_extendqisi2
	ldrb	ip, [r4, #3614]	@ zero_extendqisi2
	str	r0, [r5, #104]
	mov	r0, r5
	strb	lr, [r4, #3626]
	strb	ip, [r4, #3638]
	strb	lr, [r4, #3650]
	strb	r6, [r4, #3662]
	strb	ip, [r4, #3670]
	strb	r6, [r4, #3682]
	bl	usb_assign_descriptors
	cmp	r0, #0
	bne	.L9616
.L9613:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9616:
	ldr	r0, [r5, #84]
	movw	r1, #:lower16:.LC610
	movt	r1, #:upper16:.LC610
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #65012
	movt	r0, 65535
	b	.L9613
.L9617:
	mvn	r0, #18
	b	.L9613
.L9623:
	.align	2
.L9622:
	.word	.LANCHOR0+3612
	.fnend
	.size	fsg_bind, .-fsg_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_bind, %function
ccid_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r5, [r0, #24]
	cmp	r3, #15
	bls	.L9625
	mvn	r3, #18
	movw	r0, #:lower16:.LC611
	ldr	r1, .L9643
	mov	r2, r3
	movt	r0, #:upper16:.LC611
	str	r3, [r4, #88]
	bl	printk
	ldr	r0, [r4, #88]
.L9624:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9625:
	movw	r6, #:lower16:.LANCHOR0
	add	r2, r3, #1
	ldr	r1, .L9643+4
	add	ip, r3, #12
	movt	r6, #:upper16:.LANCHOR0
	str	r4, [r0, ip, lsl #2]
	strb	r3, [r6, #3746]
	strb	r2, [r0, #44]
	mov	r2, #0
	str	r3, [r4, #88]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9640
	str	r0, [r4, #100]
	mov	r2, #0
	ldr	r1, .L9643+8
	str	r5, [r0]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9641
	str	r0, [r4, #104]
	mov	r2, #0
	ldr	r1, .L9643+12
	str	r5, [r0]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L9642
	str	r3, [r4, #108]
	add	r0, r6, #3792
	str	r5, [r3]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L9631
	ldr	r3, [r5]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L9633
.L9635:
	mov	r0, #0
	b	.L9624
.L9633:
	ldrb	r1, [r6, #3770]	@ zero_extendqisi2
	ldrb	r2, [r6, #3782]	@ zero_extendqisi2
	ldrb	r3, [r6, #3758]	@ zero_extendqisi2
	ldr	r0, .L9643+16
	strb	r1, [r6, #3818]
	strb	r2, [r6, #3830]
	strb	r3, [r6, #3842]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	bne	.L9635
.L9631:
	ldr	r2, [r4, #108]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r4, #108]
.L9629:
	ldr	r2, [r4, #104]
	mov	r3, #0
	mvn	r0, #18
	str	r3, [r2]
	str	r3, [r4, #104]
	b	.L9624
.L9642:
	movw	r0, #:lower16:.LC597
	ldr	r1, .L9643
	movt	r0, #:upper16:.LC597
	bl	printk
	b	.L9631
.L9641:
	movw	r0, #:lower16:.LC595
	ldr	r1, .L9643
	movt	r0, #:upper16:.LC595
	bl	printk
	b	.L9629
.L9640:
	movw	r0, #:lower16:.LC612
	ldr	r1, .L9643
	movt	r0, #:upper16:.LC612
	bl	printk
	mvn	r0, #18
	b	.L9624
.L9644:
	.align	2
.L9643:
	.word	.LANCHOR3-2756
	.word	.LANCHOR0+3756
	.word	.LANCHOR0+3768
	.word	.LANCHOR0+3780
	.word	.LANCHOR0+3852
	.fnend
	.size	ccid_function_bind, .-ccid_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_bind, %function
qdss_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #24]
	ldr	r6, [r3]
	ldr	r3, [r6, #20]
	cmp	r3, #2
	bls	.L9679
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L9649
	mov	r4, r1
	add	r2, r3, #1
	add	r1, r3, #12
	movw	r5, #:lower16:.LANCHOR0
	movt	r5, #:upper16:.LANCHOR0
	str	r4, [r0, r1, lsl #2]
	strb	r2, [r0, #44]
	strb	r3, [r4, #89]
	ldrb	ip, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r5, #3878]
	cmp	ip, #15
	bhi	.L9649
	add	r2, ip, #12
	add	r3, ip, #1
	strb	ip, [r5, #3890]
	str	r4, [r0, r2, lsl #2]
	ldr	r2, .L9682
	strb	r3, [r0, #44]
	mov	r0, r6
	strb	ip, [r4, #88]
	add	r1, r2, #8
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9652
	add	r2, r5, #3920
	str	r0, [r4, #108]
	add	r1, r2, #8
	str	r4, [r0]
	mov	r0, r6
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L9652
	ldr	r2, .L9682+4
	str	r3, [r4, #104]
	mov	r0, r6
	str	r4, [r3]
	add	r1, r2, #8
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L9652
	str	r3, [r4, #100]
	ldr	r0, .L9682+8
	str	r4, [r3]
	ldrb	r1, [r5, #3910]	@ zero_extendqisi2
	ldrb	r2, [r5, #3930]	@ zero_extendqisi2
	ldrb	r3, [r5, #3950]	@ zero_extendqisi2
	strb	r1, [r5, #3962]
	strb	r2, [r5, #3974]
	strb	r3, [r5, #3986]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L9655
	ldr	r3, [r6, #20]
	cmp	r3, #4
	bhi	.L9680
.L9654:
	movw	r0, #:lower16:.LC361
	ldr	r1, [r6, #28]
	movt	r0, #:upper16:.LC361
	bl	strcmp
	subs	r5, r0, #0
	movne	r5, #0
	beq	.L9681
.L9645:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9680:
	ldr	r0, .L9682+12
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L9654
.L9655:
	movw	r0, #:lower16:.LC616
	movt	r0, #:upper16:.LC616
	bl	printk
.L9651:
	ldr	r3, [r4, #104]
	mov	r1, r4
	mov	r0, r6
	movw	r5, #65012
	movt	r5, 65535
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #100]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #108]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	bl	clear_desc
	b	.L9645
.L9681:
	mov	r1, #1
	ldr	r0, [r4, #108]
	bl	dwc3_tx_fifo_resize_request
	b	.L9645
.L9652:
	movw	r0, #:lower16:.LC615
	movt	r0, #:upper16:.LC615
	bl	printk
	b	.L9651
.L9649:
	movw	r0, #:lower16:.LC614
	mvn	r5, #18
	movt	r0, #:upper16:.LC614
	bl	printk
	b	.L9645
.L9679:
	movw	r0, #:lower16:.LC613
	movw	r5, #65012
	movt	r0, #:upper16:.LC613
	movt	r5, 65535
	bl	printk
	b	.L9645
.L9683:
	.align	2
.L9682:
	.word	.LANCHOR0+3900
	.word	.LANCHOR0+3940
	.word	.LANCHOR0+3996
	.word	.LANCHOR0+4020
	.fnend
	.size	qdss_bind, .-qdss_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_bind, %function
rmnet_mux_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #24]
	str	r7, [r1, #84]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L9691
	movw	r5, #:lower16:.LANCHOR0
	mov	r4, r1
	ldr	r1, .L9711
	mov	r6, r0
	add	r2, r3, #12
	add	r0, r3, #1
	movt	r5, #:upper16:.LANCHOR0
	str	r4, [r6, r2, lsl #2]
	mov	r2, #0
	strb	r0, [r6, #44]
	strb	r3, [r5, #4058]
	strb	r3, [r4, #360]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9687
	str	r7, [r0]
	mov	r2, #0
	add	r1, r5, #4080
	str	r0, [r4, #92]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9687
	str	r7, [r0]
	mov	r2, #0
	ldr	r1, .L9711+4
	str	r0, [r4, #88]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9687
	str	r7, [r0]
	str	r0, [r4, #96]
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L9688
	ldrb	r0, [r5, #4070]	@ zero_extendqisi2
	movw	r3, #:lower16:.LANCHOR4
	ldrb	r1, [r5, #4082]	@ zero_extendqisi2
	movt	r3, #:upper16:.LANCHOR4
	ldrb	r2, [r5, #4094]	@ zero_extendqisi2
	strb	r0, [r3, #-4078]
	strb	r1, [r3, #-4066]
	strb	r2, [r3, #-4054]
.L9688:
	mov	r3, #0
	add	r2, r4, #256
	ldr	r1, [r4, #380]
	mov	r0, #4
	bl	queue_delayed_work_on
	mov	r0, #0
	b	.L9684
.L9687:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	beq	.L9691
	mov	r2, #0
	mvn	r0, #18
	str	r2, [r3]
.L9684:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9691:
	mvn	r0, #18
	b	.L9684
.L9712:
	.align	2
.L9711:
	.word	.LANCHOR0+4068
	.word	.LANCHOR0+4092
	.fnend
	.size	rmnet_mux_bind, .-rmnet_mux_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_bind, %function
f_midi_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 512
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #:lower16:.LANCHOR4
	mov	r4, r1
	movt	r5, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r3, [r5, #-4044]	@ zero_extendqisi2
	.pad #516
	sub	sp, sp, #516
	ldr	r7, [r0, #24]
	cmp	r3, #0
	bne	.L9714
	ldrb	r3, [r7, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bls	.L9715
.L9717:
	mvn	r5, #18
.L9716:
	ldr	r3, [r4, #92]
	cmp	r3, #0
	beq	.L9719
.L9729:
	mov	r2, #0
	str	r2, [r3]
.L9719:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
.L9728:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC605
	mov	r3, r5
	movt	r1, #:upper16:.LC605
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L9713:
	mov	r0, r5
	add	sp, sp, #516
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9715:
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r5, #-4044]
	strb	r3, [r7, #48]
.L9714:
	ldrb	r3, [r6, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L9717
	add	r1, r3, #1
	add	r2, r3, #12
	strb	r3, [r5, #-4026]
	uxtb	r1, r1
	str	r4, [r6, r2, lsl #2]
	cmp	r1, #15
	strb	r1, [r6, #44]
	bhi	.L9717
	ldr	r8, .L9747
	add	r0, r1, #12
	add	r3, r3, #2
	strb	r1, [r5, #-4014]
	mov	r2, #0
	str	r4, [r6, r0, lsl #2]
	strb	r1, [r5, #-3996]
	strb	r3, [r6, #44]
	sub	r1, r8, #8
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	str	r0, [r4, #88]
	beq	.L9718
	str	r7, [r0]
	mov	r2, #0
	add	r1, r8, #4
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	str	r0, [r4, #92]
	beq	.L9730
	str	r7, [r0]
	movw	r1, #32976
	mov	r0, #292
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [sp, #8]
	beq	.L9731
	sub	r1, r8, #44
	sub	r3, r8, #32
	sub	r2, r8, #20
	stm	r0, {r1, r2, r3}
	add	r1, r8, #16
	ldr	r3, [r4, #320]
	ldr	r2, [r4, #324]
	str	r1, [r0, #12]
	ldr	r10, [r4, #320]
	add	r3, r3, r2
	rsb	r3, r3, r3, lsl #4
	cmp	r10, #0
	add	r3, r3, #7
	strh	r3, [r1, #5]	@ unaligned
	beq	.L9732
	mov	r2, #1
	mov	lr, #0
	str	r7, [sp, #4]
	add	r10, r8, #32
	add	fp, r8, #27
	mov	ip, r2
	mov	r9, lr
	add	r1, sp, #32
	add	r3, sp, #368
	str	r10, [sp, #12]
	mov	r8, #36
	str	r6, [sp, #16]
	str	r5, [sp, #20]
.L9721:
	mov	r6, #6
	mov	r5, #9
	add	lr, lr, #1
	add	r0, r0, #8
	strb	r6, [r1]
	mov	r6, #2
	strb	r8, [r1, #1]
	strb	r6, [r1, #2]
	strb	r6, [r1, #3]
	strb	r2, [r1, #4]
	add	r2, r2, #2
	strb	r9, [r1, #5]
	sub	r7, r2, #1
	add	r10, r2, #3
	str	r1, [r0, #8]
	ldrb	r6, [r1, #4]	@ zero_extendqisi2
	add	r1, r1, #6
	strb	r5, [r3]
	mov	r5, #3
	strb	r8, [r3, #1]
	strb	r5, [r3, #2]
	strb	ip, [r3, #3]
	strb	r7, [r3, #4]
	strb	ip, [r3, #5]
	strb	r6, [r3, #6]
	strb	ip, [r3, #7]
	strb	r9, [r3, #8]
	str	r3, [r0, #12]
	ldrb	r6, [r3, #4]	@ zero_extendqisi2
	add	r3, r3, #9
	strb	r6, [fp, #1]!
	ldr	r6, [r4, #320]
	cmp	r6, lr
	bhi	.L9721
	mov	r3, r10
	mov	lr, r10
	ldr	r7, [sp, #4]
	lsl	r3, r3, #2
	mov	r10, r6
	ldr	r6, [sp, #16]
	ldr	r5, [sp, #20]
	add	ip, r3, #4
	add	fp, r3, #8
.L9720:
	ldr	r0, [r4, #324]
	cmp	r0, #0
	beq	.L9733
	mov	r3, lr
	ldr	ip, .L9747+4
	mov	r1, r2
	sub	r10, r3, r2
	ldr	r2, [sp, #8]
	mov	lr, #0
	mov	r9, lr
	mov	r8, #36
	sub	fp, ip, #1
	str	ip, [sp, #16]
	mov	ip, #1
	add	r0, r2, r3, lsl #2
	str	r7, [sp, #20]
	add	r2, sp, #128
	add	r3, sp, #224
	str	r6, [sp, #24]
	mov	r7, r10
	str	r5, [sp, #28]
.L9723:
	mov	r5, #6
	add	lr, lr, #1
	add	r0, r0, #8
	strb	r5, [r2]
	mov	r5, #2
	strb	r8, [r2, #1]
	strb	r5, [r2, #2]
	strb	ip, [r2, #3]
	strb	r1, [r2, #4]
	add	r1, r1, #2
	strb	r9, [r2, #5]
	sub	r6, r1, #1
	add	r10, r7, r1
	str	r2, [r0, #-8]
	ldrb	r5, [r2, #4]	@ zero_extendqisi2
	add	r2, r2, #6
	strb	r8, [r3, #1]
	strb	r6, [r3, #4]
	strb	ip, [r3, #5]
	str	r5, [sp, #4]
	mov	r5, #9
	strb	r5, [r3]
	mov	r5, #3
	strb	ip, [r3, #7]
	strb	r5, [r3, #2]
	mov	r5, #2
	strb	r9, [r3, #8]
	strb	r5, [r3, #3]
	ldr	r5, [sp, #4]
	strb	r5, [r3, #6]
	str	r3, [r0, #-4]
	ldrb	r5, [r2, #-2]	@ zero_extendqisi2
	add	r3, r3, #9
	strb	r5, [fp, #1]!
	ldr	r5, [r4, #324]
	cmp	r5, lr
	bhi	.L9723
	uxtb	r0, r5
	mov	r3, r10
	ldr	r7, [sp, #20]
	lsl	r3, r3, #2
	ldr	r6, [sp, #24]
	mov	lr, r10
	ldr	r5, [sp, #28]
	add	r1, r0, #4
	ldr	r10, [r4, #320]
	add	ip, r3, #4
	uxtb	r1, r1
	add	fp, r3, #8
.L9722:
	add	r2, lr, #3
	ldr	lr, .L9747+8
	strb	r1, [r5, #-3960]
	uxtb	r10, r10
	ldr	r1, [sp, #8]
	strb	r0, [r5, #-3957]
	add	r0, r10, #4
	sub	r8, lr, #12
	ldr	lr, [sp, #16]
	strb	r0, [r5, #-3940]
	ldr	r0, [sp, #8]
	add	r1, r1, r2, lsl #2
	strb	r10, [r5, #-3937]
	sub	r9, r8, #12
	mov	r5, #0
	sub	lr, lr, #4
	str	r8, [r0, r3]
	str	lr, [sp, #4]
	ldr	lr, [sp, #12]
	ldr	r10, [sp, #4]
	sub	lr, lr, #8
	str	r10, [r0, ip]
	str	r9, [r0, fp]
	str	lr, [r0, r2, lsl #2]
	str	r5, [r1, #4]
	bl	usb_copy_descriptors
	cmp	r0, r5
	str	r0, [r4, #16]
	beq	.L9724
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L9727
	mov	r3, #512
	ldr	r0, [sp, #8]
	strh	r3, [r8, #4]	@ movhi
	strh	r3, [r9, #4]	@ movhi
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L9724
.L9727:
	ldr	r0, [sp, #8]
	mov	r5, #0
	bl	kfree
	b	.L9713
.L9718:
	ldr	r3, [r4, #92]
	mvn	r5, #18
	cmp	r3, #0
	bne	.L9729
	b	.L9728
.L9730:
	mvn	r5, #18
	b	.L9719
.L9731:
	mvn	r5, #11
	b	.L9716
.L9724:
	ldr	r0, [sp, #8]
	mvn	r5, #18
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	b	.L9716
.L9732:
	ldr	r1, .L9747
	mov	r2, #4
	mov	fp, #24
	mov	lr, r2
	mov	ip, #20
	mov	r3, #16
	mov	r2, #1
	add	r1, r1, #32
	str	r1, [sp, #12]
	b	.L9720
.L9733:
	ldr	r2, .L9747+4
	mov	r1, #4
	str	r2, [sp, #16]
	b	.L9722
.L9748:
	.align	2
.L9747:
	.word	.LANCHOR4-3984
	.word	.LANCHOR4-3936
	.word	.LANCHOR4-3968
	.fnend
	.size	f_midi_bind, .-f_midi_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_bind, %function
frmnet_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #8
	sub	sp, sp, #8
	ldr	r6, [r0, #24]
	cmp	r3, #15
	bls	.L9750
	mvn	r3, #18
	movw	r0, #:lower16:.LC611
	ldr	r1, .L9794
	mov	r2, r3
	movt	r0, #:upper16:.LC611
	str	r3, [r4, #112]
	bl	printk
	ldr	r0, [r4, #112]
.L9749:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9750:
	add	r1, r3, #12
	movw	r5, #:lower16:.LANCHOR4
	add	r2, r3, #1
	movt	r5, #:upper16:.LANCHOR4
	str	r4, [r0, r1, lsl #2]
	sub	r1, r5, #3904
	strb	r2, [r0, #44]
	sub	r1, r1, #4
	mov	r2, #0
	str	r3, [r4, #112]
	strb	r3, [r5, #-3918]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9790
	str	r0, [r4, #84]
	mov	r2, #0
	ldr	r1, .L9794+4
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9791
	str	r0, [r4, #88]
	mov	r2, #0
	ldr	r1, .L9794+8
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L9792
	str	r7, [r4, #136]
	ldr	r3, [r7, #8]
	mov	r1, #208
	str	r6, [r7]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r8, r0, #0
	beq	.L9757
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r8]
	beq	.L9759
	mov	r2, #8
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r8]
	bne	.L9759
	ldr	r3, [r7, #8]
	mov	r1, r8
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L9757:
	mvn	r3, #11
	str	r3, [r4, #140]
.L9773:
	movw	r0, #:lower16:.LC617
	ldr	r1, .L9794
	movt	r0, #:upper16:.LC617
	bl	printk
	ldr	r5, [r4, #136]
.L9761:
	mov	r3, #0
	mvn	r0, #11
	str	r3, [r5]
	str	r3, [r4, #136]
.L9756:
	ldr	r2, [r4, #88]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r4, #88]
.L9754:
	ldr	r2, [r4, #84]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r4, #84]
	b	.L9749
.L9759:
	mov	r3, #8
	cmn	r8, #4096
	str	r3, [r8, #4]
	str	r8, [r4, #140]
	bhi	.L9773
	movw	r3, #:lower16:frmnet_notify_complete
	ldr	r0, .L9794+12
	movt	r3, #:upper16:frmnet_notify_complete
	str	r3, [r8, #28]
	ldr	r3, [r4, #140]
	str	r4, [r3, #32]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L9762
	ldr	r2, [r6]
	ldr	r3, [r2, #20]
	cmp	r3, #2
	bhi	.L9793
.L9763:
	ldr	ip, [r4, #84]
	movw	r1, #:lower16:.LC594
	movw	r3, #:lower16:.LC593
	ldr	r0, [r4, #88]
	movt	r1, #:upper16:.LC594
	movt	r3, #:upper16:.LC593
	ldr	r5, [r2, #20]
	ldrb	r2, [r4, #116]	@ zero_extendqisi2
	ldr	lr, [r0, #4]
	movw	r0, #:lower16:.LC618
	cmp	r5, #2
	movt	r0, #:upper16:.LC618
	movls	r3, r1
	ldr	r1, .L9794
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	printk
	mov	r0, #0
	b	.L9749
.L9762:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L9768
.L9774:
	bl	kfree
.L9768:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L9771
	bl	kfree
.L9771:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L9772
	bl	kfree
.L9772:
	ldr	r5, [r4, #136]
	ldr	r6, [r4, #140]
	cmp	r6, #0
	beq	.L9761
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #136]
	b	.L9761
.L9793:
	ldrb	r1, [r5, #-3906]	@ zero_extendqisi2
	ldrb	r2, [r5, #-3894]	@ zero_extendqisi2
	ldrb	r3, [r5, #-3882]	@ zero_extendqisi2
	ldr	r0, .L9794+16
	strb	r1, [r5, #-3850]
	strb	r2, [r5, #-3838]
	strb	r3, [r5, #-3826]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L9764
	ldr	r2, [r6]
	ldr	r3, [r2, #20]
	cmp	r3, #4
	bls	.L9763
	ldrb	r2, [r5, #-3894]	@ zero_extendqisi2
	ldrb	r1, [r5, #-3906]	@ zero_extendqisi2
	ldrb	r3, [r5, #-3882]	@ zero_extendqisi2
	ldr	r0, .L9794+20
	strb	r1, [r5, #-3794]
	strb	r2, [r5, #-3782]
	strb	r3, [r5, #-3770]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	ldrne	r2, [r6]
	beq	.L9768
	b	.L9763
.L9764:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	bne	.L9774
	b	.L9771
.L9790:
	movw	r0, #:lower16:.LC595
	ldr	r1, .L9794
	movt	r0, #:upper16:.LC595
	bl	printk
	mvn	r0, #18
	b	.L9749
.L9792:
	movw	r0, #:lower16:.LC612
	ldr	r1, .L9794
	movt	r0, #:upper16:.LC612
	bl	printk
	mvn	r0, #18
	b	.L9756
.L9791:
	movw	r0, #:lower16:.LC597
	ldr	r1, .L9794
	movt	r0, #:upper16:.LC597
	bl	printk
	mvn	r0, #18
	b	.L9754
.L9795:
	.align	2
.L9794:
	.word	.LANCHOR3-2736
	.word	.LANCHOR4-3896
	.word	.LANCHOR4-3884
	.word	.LANCHOR4-3872
	.word	.LANCHOR4-3816
	.word	.LANCHOR4-3760
	.fnend
	.size	frmnet_bind, .-frmnet_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_bind, %function
rndis_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r7, [r0, #24]
	cmp	r3, #15
	bhi	.L9797
	add	r1, r3, #12
	add	r2, r3, #1
	movw	r5, #:lower16:.LANCHOR4
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR4
	strb	r2, [r0, #44]
	strb	r3, [r4, #148]
	ldrb	ip, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r5, #-3726]
	strb	r3, [r5, #-3718]
	strb	r3, [r5, #-3705]
	cmp	ip, #15
	bls	.L9839
.L9797:
	mvn	r6, #18
.L9799:
	mov	r0, r4
	bl	usb_free_all_descriptors
	ldr	r3, [r4, #172]
	cmp	r3, #0
	beq	.L9803
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L9803:
	ldr	r3, [r4, #168]
	movw	r1, #:lower16:.LC605
	movt	r1, #:upper16:.LC605
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r7]
	mov	r3, r6
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L9796:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9839:
	add	r2, ip, #12
	add	r3, ip, #1
	strb	ip, [r5, #-3704]
	strb	ip, [r5, #-3698]
	ldr	r1, .L9840
	str	r4, [r0, r2, lsl #2]
	mov	r2, #0
	strb	r3, [r0, #44]
	strb	ip, [r4, #149]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9797
	str	r0, [r4, #88]
	mov	r2, #0
	ldr	r1, .L9840+4
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9797
	str	r0, [r4, #92]
	mov	r2, #0
	sub	r1, r5, #3664
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L9797
	str	r3, [r4, #168]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r6, r0
	str	r0, [r4, #172]
	beq	.L9801
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L9800
	mov	r2, #8
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L9800:
	str	r0, [r6]
	ldr	r3, [r4, #172]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L9801
	mov	r0, #8
	ldr	r1, .L9840+8
	movw	r2, #:lower16:rndis_response_complete
	ldrb	lr, [r5, #-3686]	@ zero_extendqisi2
	movt	r2, #:upper16:rndis_response_complete
	str	r0, [r3, #4]
	ldr	ip, [r4, #172]
	mov	r0, r4
	ldrb	r3, [r5, #-3674]	@ zero_extendqisi2
	strb	lr, [r5, #-3650]
	str	r4, [ip, #32]
	ldr	r6, [r4, #172]
	ldrb	ip, [r5, #-3662]	@ zero_extendqisi2
	strb	r3, [r5, #-3638]
	strb	r3, [r5, #-3602]
	sub	r3, r1, #12
	str	r2, [r6, #28]
	add	r2, r1, #44
	add	r1, r1, #88
	strb	ip, [r5, #-3626]
	strb	lr, [r5, #-3614]
	strb	ip, [r5, #-3590]
	bl	usb_assign_descriptors
	subs	r6, r0, #0
	bne	.L9799
	movw	r3, #:lower16:.LANCHOR1
	movw	r1, #:lower16:rndis_open
	movt	r3, #:upper16:.LANCHOR1
	movw	r2, #:lower16:rndis_close
	ldrb	r0, [r3, #3625]	@ zero_extendqisi2
	movt	r1, #:upper16:rndis_open
	movt	r2, #:upper16:rndis_close
	str	r1, [r4, #136]
	str	r2, [r4, #140]
	cmp	r0, #0
	bne	.L9797
	ldr	r1, [r4, #160]
	movw	r2, #:lower16:rndis_response_available
	mov	lr, #1
	ldr	r0, [r5, #-3436]
	movt	r2, #:upper16:rndis_response_available
	add	ip, r4, #150
	strb	lr, [r3, #3625]
	str	r6, [r3, #3632]
	cmp	r1, #0
	str	r6, [r3, #3636]
	str	ip, [r3, #3644]
	strb	r0, [r3, #3660]
	strb	r6, [r3, #3661]
	str	r2, [r3, #3668]
	str	r4, [r3, #3672]
	str	r6, [r4, #164]
	beq	.L9796
	ldr	r2, [r4, #156]
	cmp	r2, #0
	strne	r2, [r3, #3656]
	strne	r1, [r3, #3664]
	b	.L9796
.L9801:
	mvn	r6, #11
	b	.L9799
.L9841:
	.align	2
.L9840:
	.word	.LANCHOR4-3688
	.word	.LANCHOR4-3676
	.word	.LANCHOR4-3568
	.fnend
	.size	rndis_bind, .-rndis_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_bind, %function
rndis_qc_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r7, [r0, #24]
	cmp	r3, #15
	bhi	.L9843
	add	r1, r3, #12
	add	r2, r3, #1
	movw	r5, #:lower16:.LANCHOR4
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR4
	strb	r2, [r0, #44]
	strb	r3, [r4, #120]
	ldrb	r0, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r5, #-3430]
	strb	r3, [r5, #-3422]
	strb	r3, [r5, #-3409]
	cmp	r0, #15
	bhi	.L9905
	add	r1, r0, #12
	add	r3, r0, #1
	strb	r0, [r5, #-3408]
	strb	r0, [r5, #-3402]
	mov	r2, #0
	str	r4, [r6, r1, lsl #2]
	sub	r1, r5, #3392
	strb	r3, [r6, #44]
	strb	r0, [r4, #121]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9905
	str	r0, [r4, #88]
	mov	r2, #0
	ldr	r1, .L9908
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9905
	str	r0, [r4, #92]
	mov	r2, #0
	ldr	r1, .L9908+4
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L9905
	str	r3, [r4, #156]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r7, r0
	str	r0, [r4, #160]
	beq	.L9847
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L9846
	mov	r2, #8
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L9846:
	str	r0, [r7]
	ldr	r2, [r4, #160]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L9847
	mov	r1, #8
	movw	r3, #:lower16:rndis_qc_response_complete
	ldr	r0, .L9908+8
	movt	r3, #:upper16:rndis_qc_response_complete
	str	r1, [r2, #4]
	ldr	r2, [r4, #160]
	str	r4, [r2, #32]
	ldr	r2, [r4, #160]
	str	r3, [r2, #28]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L9847
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L9906
.L9848:
	movw	r3, #:lower16:.LANCHOR1
	movw	r1, #:lower16:rndis_qc_open
	movt	r3, #:upper16:.LANCHOR1
	movw	r2, #:lower16:rndis_qc_close
	ldrb	r0, [r3, #3625]	@ zero_extendqisi2
	movt	r1, #:upper16:rndis_qc_open
	movt	r2, #:upper16:rndis_qc_close
	str	r1, [r4, #112]
	str	r2, [r4, #116]
	cmp	r0, #0
	beq	.L9850
.L9905:
	ldr	r7, [r6, #24]
.L9843:
	mvn	r5, #18
.L9845:
	ldr	r3, [r7]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L9907
.L9853:
	cmp	r3, #2
	bhi	.L9854
.L9855:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L9856
	bl	kfree
.L9856:
	ldr	r3, [r4, #160]
	cmp	r3, #0
	beq	.L9857
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L9857:
	ldr	r3, [r4, #156]
	movw	r0, #:lower16:.LC592
	ldr	r1, .L9908+12
	movt	r0, #:upper16:.LC592
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	mov	r3, r5
	ldr	r2, [r4]
	bl	printk
	b	.L9842
.L9850:
	ldr	r5, [r4, #140]
	movw	r2, #:lower16:rndis_qc_response_available
	mov	r1, #1
	ldr	ip, .L9908+16
	movt	r2, #:upper16:rndis_qc_response_available
	add	lr, r4, #122
	strb	r1, [r3, #3625]
	str	r0, [r3, #3632]
	cmp	r5, #0
	str	r0, [r3, #3636]
	str	lr, [r3, #3644]
	str	r2, [r3, #3668]
	ldr	r2, [r4, #128]
	str	r4, [r3, #3672]
	str	r0, [r4, #144]
	strh	r1, [ip, #36]	@ movhi
	beq	.L9862
	ldrb	r1, [r4, #132]	@ zero_extendqisi2
	mov	ip, #2
	str	r2, [r3, #3656]
	str	r5, [r3, #3664]
	mov	r5, r0
	strb	r1, [r3, #3660]
	strb	ip, [r3, #3661]
.L9842:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9906:
	ldrb	r1, [r5, #-3390]	@ zero_extendqisi2
	ldrb	r2, [r5, #-3378]	@ zero_extendqisi2
	ldrb	r3, [r5, #-3366]	@ zero_extendqisi2
	ldr	r0, .L9908+20
	strb	r1, [r5, #-3310]
	strb	r2, [r5, #-3298]
	strb	r3, [r5, #-3286]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L9847
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L9848
	ldrb	r1, [r5, #-3390]	@ zero_extendqisi2
	ldrb	r2, [r5, #-3378]	@ zero_extendqisi2
	ldrb	r3, [r5, #-3366]	@ zero_extendqisi2
	ldr	r0, .L9908+24
	strb	r1, [r5, #-3230]
	strb	r2, [r5, #-3218]
	strb	r3, [r5, #-3206]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L9848
	ldr	r3, [r6, #24]
	mvn	r5, #11
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L9853
.L9907:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L9854
	bl	kfree
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L9853
.L9854:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L9855
	bl	kfree
	b	.L9855
.L9847:
	mvn	r5, #11
	ldr	r7, [r6, #24]
	b	.L9845
.L9862:
	ldr	r7, [r6, #24]
	b	.L9845
.L9909:
	.align	2
.L9908:
	.word	.LANCHOR4-3380
	.word	.LANCHOR4-3368
	.word	.LANCHOR4-3356
	.word	.LANCHOR3-2724
	.word	.LANCHOR1+3624
	.word	.LANCHOR4-3276
	.word	.LANCHOR4-3196
	.fnend
	.size	rndis_qc_bind, .-rndis_qc_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_function_bind, %function
acc_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LC619
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	movt	r2, #:upper16:.LC619
	mov	r1, #0
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	mov	r10, r0
	ldr	r0, .L9944
	strd	r8, [sp, #16]
	str	lr, [sp, #28]
	bl	__hid_register_driver
	subs	r6, r0, #0
	bne	.L9910
	str	r6, [r4, #1644]
	ldrb	r3, [r10, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L9913
	add	r0, r3, #12
	add	r1, r3, #1
	movw	r9, #:lower16:.LANCHOR4
	mov	r2, r6
	str	r4, [r10, r0, lsl #2]
	movt	r9, #:upper16:.LANCHOR4
	strb	r1, [r10, #44]
	ldr	r5, [r4, #84]
	sub	r1, r9, #3120
	strb	r3, [r9, #-3138]
	sub	r1, r1, #8
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9913
	ldr	r7, .L9944+4
	str	r4, [r0]
	mov	r2, r6
	str	r0, [r4, #92]
	ldr	r0, [r5]
	mov	r1, r7
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9913
	str	r4, [r0]
	mov	r1, r7
	mov	r2, r6
	str	r0, [r4, #96]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9913
	add	r7, r4, #1648
	movw	r8, #:lower16:acc_complete_in
	str	r4, [r0]
	add	r7, r7, #8
	movt	r8, #:upper16:acc_complete_in
	str	r0, [r4, #96]
	mov	r5, #4
.L9915:
	mov	r1, #16384
	ldr	r0, [r4, #92]
	bl	acc_request_new
	subs	r3, r0, #0
	mov	r1, r7
	mov	r2, r3
	mov	r0, r4
	beq	.L9914
	str	r8, [r3, #28]
	bl	req_put
	subs	r5, r5, #1
	bne	.L9915
	mov	r1, #16384
	ldr	r0, [r4, #96]
	bl	acc_request_new
	subs	r3, r0, #0
	beq	.L9914
	movw	r5, #:lower16:acc_complete_out
	mov	r1, #16384
	movt	r5, #:upper16:acc_complete_out
	str	r5, [r3, #28]
	ldr	r0, [r4, #96]
	str	r3, [r4, #1688]
	bl	acc_request_new
	cmp	r0, #0
	beq	.L9914
	str	r5, [r0, #28]
	str	r0, [r4, #1692]
	ldr	r3, [r10, #24]
	ldr	r2, [r3]
	ldr	r2, [r2, #20]
	cmp	r2, #2
	bls	.L9910
	ldrb	r1, [r9, #-3126]	@ zero_extendqisi2
	ldrb	r2, [r9, #-3114]	@ zero_extendqisi2
	strb	r1, [r9, #-3102]
	strb	r2, [r9, #-3090]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	strbhi	r1, [r9, #-3078]
	strbhi	r2, [r9, #-3066]
.L9910:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L9913:
	mvn	r6, #18
	b	.L9910
.L9914:
	movw	r0, #:lower16:.LC620
	movt	r0, #:upper16:.LC620
	bl	printk
	b	.L9917
.L9918:
	ldr	r1, [r4, #92]
	bl	acc_request_free.part.12
.L9917:
	mov	r1, r7
	mov	r0, r4
	bl	req_get
	cmp	r0, #0
	bne	.L9918
	ldr	r0, [r4, #1688]
	cmp	r0, #0
	beq	.L9919
	ldr	r1, [r4, #96]
	bl	acc_request_free.part.12
.L9919:
	ldr	r0, [r4, #1692]
	cmp	r0, #0
	mvneq	r6, #0
	beq	.L9910
	ldr	r1, [r4, #96]
	mvn	r6, #0
	bl	acc_request_free.part.12
	b	.L9910
.L9945:
	.align	2
.L9944:
	.word	.LANCHOR0+1424
	.word	.LANCHOR4-3116
	.fnend
	.size	acc_function_bind, .-acc_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_bind, %function
mtp_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #24]
	str	r3, [r1, #84]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L9993
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	add	r1, r3, #1
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR4
	mov	r2, #0
	str	r10, [sp, #24]
	mov	r10, r0
	add	r0, r3, #12
	strd	r8, [sp, #16]
	movt	r6, #:upper16:.LANCHOR4
	str	lr, [sp, #28]
	str	r4, [r10, r0, lsl #2]
	strb	r1, [r10, #44]
	ldr	r5, [r4, #84]
	sub	r1, r6, #3040
	strb	r3, [r6, #-3054]
	sub	r1, r1, #4
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9949
	str	r4, [r0]
	mov	r2, #0
	ldr	r1, .L9995
	str	r0, [r4, #92]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9949
	str	r4, [r0]
	mov	r2, #0
	ldr	r1, .L9995+4
	str	r0, [r4, #96]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L9949
	movw	r7, #:lower16:.LANCHOR0
	str	r4, [r0]
	movt	r7, #:upper16:.LANCHOR0
	str	r0, [r4, #100]
	ldr	r1, [r7, #520]
	cmp	r1, #16384
	bls	.L9950
	mov	r3, #4
	str	r3, [r6, #-3008]
.L9951:
	movw	r8, #:lower16:mtp_complete_in
	mov	r5, #0
	movt	r8, #:upper16:mtp_complete_in
	add	r9, r4, #116
	b	.L9957
.L9953:
	str	r8, [r3, #28]
	bl	mtp_req_put
	ldr	r3, [r6, #-3008]
	cmp	r5, r3
	bcs	.L9952
	ldr	r1, [r7, #520]
.L9957:
	ldr	r0, [r4, #92]
	add	r5, r5, #1
	bl	mtp_request_new
	subs	r3, r0, #0
	mov	r1, r9
	mov	r2, r3
	mov	r0, r4
	bne	.L9953
	ldr	r3, [r7, #520]
	cmp	r3, #16384
	bls	.L9954
	add	r5, r4, #116
	b	.L9955
.L9956:
	ldr	r1, [r4, #92]
	bl	mtp_request_free.part.13
.L9955:
	mov	r1, r5
	mov	r0, r4
	bl	mtp_req_get
	cmp	r0, #0
	bne	.L9956
	mov	r3, #16384
	mov	r2, #8
	mov	r1, r3
	str	r2, [r6, #-3008]
	str	r3, [r7, #520]
.L9950:
	ldr	r3, [r6, #-3008]
	cmp	r3, #0
	bne	.L9951
.L9952:
	ldr	r1, [r7, #516]
	ubfx	r3, r1, #0, #10
	cmp	r3, #0
	bne	.L9994
.L9958:
	ldr	r3, [r4, #96]
	movw	r5, #:lower16:mtp_complete_out
	mov	r8, #16384
	movt	r5, #:upper16:mtp_complete_out
.L9965:
	mov	r0, r3
	bl	mtp_request_new
	cmp	r0, #0
	beq	.L9959
	str	r5, [r0, #28]
	ldr	r1, [r7, #516]
	str	r0, [r4, #168]
	ldr	r0, [r4, #96]
	bl	mtp_request_new
	cmp	r0, #0
	beq	.L9960
	movw	r7, #:lower16:mtp_complete_intr
	str	r5, [r0, #28]
	add	r8, r4, #124
	movt	r7, #:upper16:mtp_complete_intr
	mov	r5, #5
	str	r0, [r4, #172]
.L9961:
	mov	r1, #28
	ldr	r0, [r4, #100]
	bl	mtp_request_new
	subs	r3, r0, #0
	mov	r1, r8
	mov	r2, r3
	mov	r0, r4
	beq	.L9954
	str	r7, [r3, #28]
	bl	mtp_req_put
	subs	r5, r5, #1
	bne	.L9961
	ldr	r3, [r10, #24]
	ldr	r2, [r3]
	ldr	r2, [r2, #20]
	cmp	r2, #2
	bls	.L9968
	ldrb	r1, [r6, #-3042]	@ zero_extendqisi2
	ldrb	r2, [r6, #-3030]	@ zero_extendqisi2
	strb	r1, [r6, #-3002]
	strb	r2, [r6, #-2990]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L9968
	mov	r0, r5
	strb	r1, [r6, #-2978]
	strb	r2, [r6, #-2966]
	b	.L9946
.L9994:
	mov	r3, #16384
	mov	r1, r3
	str	r3, [r7, #516]
	b	.L9958
.L9968:
	mov	r0, r5
.L9946:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L9959:
	ldr	r3, [r7, #516]
	cmp	r3, #16384
	bls	.L9954
	ldr	r3, [r4, #96]
.L9963:
	mov	r1, #16384
	str	r8, [r7, #516]
	b	.L9965
.L9949:
	mvn	r0, #18
	b	.L9946
.L9960:
	ldr	r3, [r7, #516]
	cmp	r3, #16384
	bls	.L9954
	ldr	r3, [r4, #96]
	ldr	r0, [r4, #172]
	mov	r1, r3
	cmp	r0, #0
	beq	.L9963
	bl	mtp_request_free.part.13
	ldr	r3, [r4, #96]
	b	.L9963
.L9993:
	mvn	r0, #18
	bx	lr
.L9954:
	movw	r0, #:lower16:.LC621
	movt	r0, #:upper16:.LC621
	bl	printk
	mvn	r0, #0
	b	.L9946
.L9996:
	.align	2
.L9995:
	.word	.LANCHOR4-3032
	.word	.LANCHOR4-3020
	.fnend
	.size	mtp_function_bind, .-mtp_function_bind
	.align	2
	.global	usb_ep_autoconfig
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_ep_autoconfig, %function
usb_ep_autoconfig:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r2, #0
	b	usb_ep_autoconfig_ss
	.fnend
	.size	usb_ep_autoconfig, .-usb_ep_autoconfig
	.align	2
	.global	usb_ep_autoconfig_reset
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_ep_autoconfig_reset, %function
usb_ep_autoconfig_reset:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #8]!
	cmp	r0, r3
	sub	r3, r3, #12
	beq	.L9999
	mov	r1, #0
.L10000:
	ldr	r2, [r3, #12]
	str	r1, [r3]
	cmp	r0, r2
	sub	r3, r2, #12
	bne	.L10000
.L9999:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	str	r2, [r3, #3600]
	bx	lr
	.fnend
	.size	usb_ep_autoconfig_reset, .-usb_ep_autoconfig_reset
	.align	2
	.global	config_ep_by_speed
	.syntax unified
	.arm
	.fpu softvfp
	.type	config_ep_by_speed, %function
config_ep_by_speed:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r2
	str	r6, [sp, #8]
	add	r0, r0, #32
	mov	r6, r1
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r6, #0
	clz	r3, r5
	lsr	r3, r3, #5
	moveq	r3, #1
	cmp	r4, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L10010
	ldr	r3, [r4, #16]
	cmp	r3, #3
	beq	.L10006
	cmp	r3, #5
	beq	.L10051
.L10005:
	ldr	r3, [r6, #16]
	mov	r6, #0
.L10009:
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L10010
	ldrb	r2, [r2, #1]	@ zero_extendqisi2
	cmp	r2, #5
	bne	.L10012
	b	.L10011
.L10013:
	ldrb	r2, [r1, #1]	@ zero_extendqisi2
	cmp	r2, #5
	beq	.L10011
.L10012:
	ldr	r1, [r3, #4]!
	cmp	r1, #0
	bne	.L10013
.L10010:
	mvn	r0, #4
.L10002:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10051:
	ldr	r3, [r4, #20]
	cmp	r3, #4
	bhi	.L10052
.L10008:
	cmp	r3, #2
	bls	.L10005
	ldr	r3, [r6, #8]
	mov	r6, #0
	b	.L10009
.L10011:
	cmp	r3, #0
	beq	.L10010
	ldr	r1, [r3]
	ldrb	lr, [r5, #25]	@ zero_extendqisi2
	ldrb	r2, [r1, #2]	@ zero_extendqisi2
	cmp	r2, lr
	beq	.L10014
.L10019:
	ldr	ip, [r3, #4]
	add	r1, r3, #4
	cmp	ip, #0
	beq	.L10010
	ldrb	r3, [ip, #1]	@ zero_extendqisi2
	cmp	r3, #5
	bne	.L10016
	b	.L10026
.L10018:
	ldrb	r3, [r3, #1]	@ zero_extendqisi2
	cmp	r3, #5
	beq	.L10026
.L10016:
	ldr	r3, [r1, #4]!
	cmp	r3, #0
	bne	.L10018
	b	.L10010
.L10026:
	subs	r3, r1, #0
	beq	.L10010
	ldr	r1, [r1]
	ldrb	r2, [r1, #2]	@ zero_extendqisi2
	cmp	r2, lr
	bne	.L10019
.L10014:
	ldrb	r2, [r5, #24]	@ zero_extendqisi2
	mov	ip, #0
	ldrh	lr, [r1, #4]	@ unaligned
	cmp	r6, ip
	and	r2, r2, #131
	bfi	r2, ip, #0, #2
	strh	lr, [r5, #20]	@ movhi
	str	ip, [r5, #32]
	strb	r2, [r5, #24]
	str	r1, [r5, #28]
	beq	.L10021
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L10010
	ldrb	r2, [r3, #1]	@ zero_extendqisi2
	cmp	r2, #48
	bne	.L10010
	str	r3, [r5, #32]
	ldr	r2, [r4, #16]
	cmp	r2, #5
	beq	.L10053
.L10021:
	mov	r0, #0
	b	.L10002
.L10006:
	ldr	r3, [r4, #20]
	b	.L10008
.L10052:
	ldr	r3, [r6, #12]
	mov	r6, #1
	b	.L10009
.L10053:
	ldrb	r2, [r1, #3]	@ zero_extendqisi2
	and	r2, r2, #3
	cmp	r2, #1
	beq	.L10023
	bcc	.L10054
.L10024:
	ldrb	r3, [r3, #2]	@ zero_extendqisi2
	mov	r0, #0
	ldrb	r2, [r5, #24]	@ zero_extendqisi2
	add	r3, r3, #1
	bfi	r2, r3, #2, #5
	strb	r2, [r5, #24]
	b	.L10002
.L10023:
	ldrb	r2, [r5, #24]	@ zero_extendqisi2
	ldrb	r1, [r3, #3]	@ zero_extendqisi2
	bfi	r2, r1, #0, #2
	strb	r2, [r5, #24]
	b	.L10024
.L10054:
	ldrb	r3, [r3, #2]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L10025
	ldr	r0, [r0]
	movw	r1, #:lower16:.LC622
	movt	r1, #:upper16:.LC622
	add	r0, r0, #32
	bl	dev_err
.L10025:
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	mov	r2, #1
	mov	r0, #0
	bfi	r3, r2, #2, #5
	strb	r3, [r5, #24]
	b	.L10002
	.fnend
	.size	config_ep_by_speed, .-config_ep_by_speed
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_set_alt, %function
diag_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #88]
	ldr	r5, [r3, #24]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L10058
	mov	r1, r4
	ldr	r2, [r4, #84]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L10058
	ldr	r3, [r4, #124]
	cmp	r3, #0
	beq	.L10061
	str	r4, [r3, #20]
	ldr	r3, [r4, #88]
	str	r4, [r3]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L10066
	ldr	r3, [r4, #84]
	str	r4, [r3]
	ldr	r3, [r4, #84]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L10067
	add	r6, r4, #108
	str	r5, [r4, #128]
	mov	r0, r6
	str	r5, [r4, #132]
	str	r5, [r4, #136]
	bl	_raw_spin_lock_irqsave
	mov	r3, #1
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #112]
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [r4, #124]
	ldr	r3, [r2, #12]
	cmp	r3, #0
	beq	.L10055
	ldr	r0, [r2, #16]
	mov	r1, r5
	mov	r2, r5
	blx	r3
.L10055:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10067:
	ldr	r2, [r4, #84]
	movw	r1, #:lower16:.LC623
	mov	r3, r5
	ldr	r0, [r4, #116]
	movt	r1, #:upper16:.LC623
	ldr	r2, [r2, #4]
	ldr	r0, [r0]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L10055
.L10066:
	ldr	r2, [r4, #88]
	movw	r1, #:lower16:.LC623
	mov	r3, r5
	ldr	r0, [r4, #116]
	movt	r1, #:upper16:.LC623
	ldr	r2, [r2, #4]
	ldr	r0, [r0]
	add	r0, r0, #32
	bl	dev_err
	b	.L10055
.L10058:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r5, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #84]
	str	r3, [r2, #28]
	b	.L10055
.L10061:
	mvn	r5, #18
	b	.L10055
	.fnend
	.size	diag_function_set_alt, .-diag_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_set_alt, %function
rmnet_smd_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #84]
	ldr	r2, [r0, #92]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L10079
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L10080
	mov	r1, r4
	ldr	r2, [r4, #88]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L10081
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L10082
	mov	r1, r4
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L10083
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L10084
	add	r2, r4, #392
	ldr	r1, [r4, #388]
	mov	r0, #4
	bl	queue_work_on
	b	.L10068
.L10080:
	ldr	r2, [r4, #92]
	movw	r1, #:lower16:.LC623
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC623
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
.L10068:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10082:
	ldr	r2, [r4, #88]
	movw	r1, #:lower16:.LC623
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC623
.L10078:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L10068
.L10084:
	ldr	r2, [r4, #96]
	movw	r1, #:lower16:.LC623
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC623
.L10077:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L10068
.L10079:
	ldr	r2, [r4, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC624
	movt	r1, #:upper16:.LC624
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L10068
.L10081:
	ldr	r2, [r4, #88]
	mov	r0, #0
	movw	r1, #:lower16:.LC624
	movt	r1, #:upper16:.LC624
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #88]
	ldr	r0, [r6]
	b	.L10078
.L10083:
	ldr	r2, [r4, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC624
	movt	r1, #:upper16:.LC624
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	b	.L10077
	.fnend
	.size	rmnet_smd_set_alt, .-rmnet_smd_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_set_alt, %function
rmnet_sdio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #84]
	ldr	r3, [r0, #92]
	str	r0, [r3]
	ldr	r2, [r0, #92]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L10106
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L10107
	ldr	r3, [r4, #88]
	mov	r1, r4
	str	r4, [r3]
	ldr	r2, [r4, #88]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L10108
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L10109
	mov	r1, r4
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L10110
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L10111
	ldr	r6, [r4, #96]
	mov	r1, #32
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	bne	.L10112
.L10093:
	mvn	r3, #11
	mov	r5, r3
	str	r3, [r4, #100]
.L10098:
	movw	r0, #:lower16:.LC626
	ldr	r1, .L10113
	movt	r0, #:upper16:.LC626
	bl	printk
	b	.L10085
.L10107:
	ldr	r2, [r4, #92]
	movw	r1, #:lower16:.LC623
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC623
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
.L10085:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10109:
	ldr	r2, [r4, #88]
	movw	r1, #:lower16:.LC623
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC623
.L10105:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L10085
.L10111:
	ldr	r2, [r4, #96]
	movw	r1, #:lower16:.LC623
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC623
.L10104:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L10085
.L10112:
	mov	r2, #8
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	str	r2, [r5, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5]
	beq	.L10095
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L10095
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L10093
.L10095:
	cmn	r5, #4096
	str	r5, [r4, #100]
	bhi	.L10098
	movw	r3, #:lower16:rmnet_sdio_notify_complete
	mov	r1, #8
	movt	r3, #:upper16:rmnet_sdio_notify_complete
	mov	r2, #1
	mov	r0, r4
	str	r3, [r5, #28]
	ldr	r3, [r4, #100]
	str	r4, [r3, #32]
	ldr	r3, [r4, #100]
	str	r1, [r3, #4]
	str	r2, [r4, #192]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	rmnet_sdio_start_io
.L10106:
	ldr	r2, [r4, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC625
	movt	r1, #:upper16:.LC625
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L10085
.L10108:
	ldr	r2, [r4, #88]
	mov	r0, #0
	movw	r1, #:lower16:.LC625
	movt	r1, #:upper16:.LC625
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #88]
	ldr	r0, [r6]
	b	.L10105
.L10110:
	ldr	r2, [r4, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC625
	movt	r1, #:upper16:.LC625
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	b	.L10104
.L10114:
	.align	2
.L10113:
	.word	.LANCHOR3-2708
	.fnend
	.size	rmnet_sdio_set_alt, .-rmnet_sdio_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_set_alt, %function
audio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r3, #2150]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L10124
.L10121:
	mov	r5, #0
.L10115:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10124:
	cmp	r2, #0
	mov	r4, r2
	ldrb	r7, [r0, #152]	@ zero_extendqisi2
	mov	r6, r0
	beq	.L10117
	cmp	r7, #0
	bne	.L10121
	ldr	r3, [r0, #20]
	mov	r1, r0
	ldr	r2, [r0, #104]
	ldr	r4, [r3, #24]
	ldr	r0, [r4]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L10125
	ldr	r3, [r6, #104]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	moveq	r3, #1
	strbeq	r3, [r6, #152]
	beq	.L10115
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC628
	mov	r3, r5
	ldr	r2, [r6, #104]
	movt	r1, #:upper16:.LC628
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L10115
.L10117:
	cmp	r7, #0
	beq	.L10122
	ldr	r0, [r0, #104]
	mov	r5, r2
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	strb	r4, [r6, #152]
	b	.L10115
.L10122:
	mov	r5, r7
	b	.L10115
.L10125:
	ldr	r2, [r6, #104]
	movw	r1, #:lower16:.LC627
	mov	r3, r5
	movt	r1, #:upper16:.LC627
	str	r7, [r2, #28]
	ldr	r0, [r4]
	ldr	r2, [r6, #104]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L10115
	.fnend
	.size	audio_set_alt, .-audio_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_start_ep, %function
f_midi_start_ep:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r2
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r2]
	ldr	r3, [r1, #20]
	cmp	r2, #0
	ldr	r7, [r3, #24]
	beq	.L10127
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #4]
	blx	r3
.L10127:
	mov	r1, r5
	mov	r2, r4
	ldr	r0, [r6, #84]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L10135
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r1, [r4, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	streq	r6, [r4]
	bne	.L10136
.L10126:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10136:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC630
	mov	r3, r5
	movt	r1, #:upper16:.LC630
	ldr	r2, [r4, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L10126
.L10135:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC629
	mov	r3, r5
	movt	r1, #:upper16:.LC629
	ldr	r2, [r4, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L10126
	.fnend
	.size	f_midi_start_ep, .-f_midi_start_ep
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_set_alt, %function
f_midi_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r1, r0
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #88]
	ldr	r6, [r3, #24]
	bl	f_midi_start_ep
	subs	r5, r0, #0
	beq	.L10152
.L10137:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10152:
	mov	r1, r4
	mov	r0, r4
	ldr	r2, [r4, #92]
	bl	f_midi_start_ep
	subs	r5, r0, #0
	bne	.L10137
	ldr	r2, [r4, #92]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L10139
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #92]
.L10139:
	mov	r1, r4
	ldr	r0, [r4, #84]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L10153
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L10154
	ldr	r3, [r4, #92]
	str	r4, [r3]
	ldr	r3, [r4, #340]
	cmp	r3, #0
	beq	.L10137
	movw	r7, #:lower16:f_midi_complete
	mov	r6, r5
	movt	r7, #:upper16:f_midi_complete
.L10142:
	ldr	r0, [r4, #92]
	add	r6, r6, #1
	ldr	r1, [r4, #336]
	bl	midi_alloc_ep_req
	cmp	r0, #0
	mov	r2, #32
	mov	r1, r0
	beq	.L10146
	str	r7, [r0, #28]
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	bne	.L10155
	ldr	r3, [r4, #340]
	cmp	r3, r6
	bhi	.L10142
	b	.L10137
.L10155:
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC631
	ldr	r2, [r4, #92]
	movt	r1, #:upper16:.LC631
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L10137
.L10154:
	ldr	r2, [r4, #92]
	movw	r1, #:lower16:.LC630
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC630
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L10137
.L10146:
	mvn	r5, #11
	b	.L10137
.L10153:
	ldr	r2, [r4, #92]
	movw	r1, #:lower16:.LC629
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC629
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L10137
	.fnend
	.size	f_midi_set_alt, .-f_midi_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_stop, %function
eth_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r1, [r0, #576]
	cmp	r1, #0
	beq	.L10170
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
.L10165:
	add	r6, r5, #1152
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #1156]
	mov	r7, r0
	cmp	r4, #0
	beq	.L10159
	ldr	r3, [r4, #140]
	cmp	r3, #0
	beq	.L10160
	mov	r0, r4
	blx	r3
.L10160:
	ldr	r3, [r4, #88]
	ldr	r1, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r9, [r3, #28]
	ldr	r8, [r1, #28]
	ldr	r3, [r2, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #164]
	tst	r3, #4
	beq	.L10171
.L10159:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
.L10156:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10171:
	mov	r1, r4
	ldr	r2, [r4, #88]
	ldr	r0, [r5, #1164]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L10164
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r5, #1164]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L10164
	ldr	r3, [r4, #88]
	str	r9, [r3, #28]
	ldr	r3, [r4, #92]
	str	r8, [r3, #28]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	b	.L10159
.L10170:
	movw	r0, #:lower16:.LC88
	movw	r1, #1847
	movt	r0, #:upper16:.LC88
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC89
	movt	r0, #:upper16:.LC89
	bl	printk
	b	.L10165
.L10164:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L10156
	.fnend
	.size	eth_stop, .-eth_stop
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_function_set_alt, %function
acc_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #92]
	ldr	r6, [r3, #24]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L10180
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L10181
	mov	r1, r4
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L10182
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L10183
	ldrb	ip, [r4, #100]	@ zero_extendqisi2
	mov	r2, #1
	add	r0, r4, #1664
	mov	r3, r5
	mov	r1, #3
	orr	ip, ip, r2
	strb	ip, [r4, #100]
	bl	__wake_up
.L10172:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10181:
	ldr	r2, [r4, #92]
	movw	r1, #:lower16:.LC632
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC632
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L10172
.L10183:
	ldr	r2, [r4, #96]
	movw	r1, #:lower16:.LC632
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC632
.L10179:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L10172
.L10180:
	ldr	r2, [r4, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC625
	movt	r1, #:upper16:.LC625
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L10172
.L10182:
	ldr	r2, [r4, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC625
	movt	r1, #:upper16:.LC625
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	b	.L10179
	.fnend
	.size	acc_function_set_alt, .-acc_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_set_alt, %function
fsg_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #88]
	ldr	r2, [r0, #100]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L10184
	ldr	r3, [r4, #100]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L10188
.L10184:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10188:
	ldr	r3, [r4, #100]
	mov	r1, r4
	str	r6, [r3]
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	ldr	r2, [r4, #104]
	orr	r3, r3, #1
	strb	r3, [r4, #94]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	beq	.L10189
.L10186:
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r4, #94]
	b	.L10184
.L10189:
	ldr	r3, [r4, #104]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L10186
	ldr	r3, [r4, #104]
	add	r1, r4, #96
	str	r6, [r3]
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	ldr	r2, [r4, #104]
	orr	r3, r3, #2
	strb	r3, [r4, #94]
	ldr	r3, [r2, #28]
	ldrh	r3, [r3, #4]	@ unaligned
	str	r3, [r6, #108]
	bl	_clear_bit
	ldr	r2, [r4, #88]
	movw	r3, #:lower16:.LANCHOR1
	mov	r1, #4
	movt	r3, #:upper16:.LANCHOR1
	str	r5, [r3, #3592]
	str	r4, [r2, #12]
	ldr	r0, [r4, #88]
	str	r5, [r3, #3596]
	movw	r5, #32767
	bl	raise_exception
	b	.L10184
	.fnend
	.size	fsg_set_alt, .-fsg_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_set_alt, %function
mtp_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #92]
	ldr	r6, [r3, #24]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L10199
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L10200
	mov	r1, r4
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L10201
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L10202
	ldr	r3, [r4, #100]
	ldr	r2, .L10203
	str	r2, [r3, #28]
	ldr	r3, [r4, #100]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L10196
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
.L10190:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10200:
	ldr	r2, [r4, #92]
	movw	r1, #:lower16:.LC632
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC632
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L10190
.L10199:
	ldr	r2, [r4, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC625
	movt	r1, #:upper16:.LC625
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L10190
.L10201:
	ldr	r2, [r4, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC625
	movt	r1, #:upper16:.LC625
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
.L10198:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L10190
.L10196:
	mov	r1, #1
	add	r0, r4, #132
	mov	r2, r1
	mov	r3, r5
	str	r1, [r4, #104]
	mov	r1, #3
	bl	__wake_up
	b	.L10190
.L10202:
	movw	r1, #:lower16:.LC632
	mov	r3, r5
	ldr	r2, [r4, #96]
	movt	r1, #:upper16:.LC632
	ldr	r0, [r6]
	b	.L10198
.L10204:
	.align	2
.L10203:
	.word	.LANCHOR4-3020
	.fnend
	.size	mtp_function_set_alt, .-mtp_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_set_alt, %function
ccid_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r1, #32
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r8, [r0, #84]
	ldr	r7, [r0, #100]
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L10206
	mov	r2, #4
	movw	r6, #:lower16:kmalloc_caches
	movt	r6, #:upper16:kmalloc_caches
	str	r2, [r5, #4]
	ldr	r0, [r6, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5]
	beq	.L10208
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L10208
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L10206:
	mvn	r3, #11
	str	r3, [r4, #112]
.L10230:
	movw	r0, #:lower16:.LC617
	ldr	r1, .L10253
	movt	r0, #:upper16:.LC617
	bl	printk
	ldr	r5, [r4, #112]
.L10205:
	mov	r0, r5
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10208:
	cmn	r5, #4096
	str	r5, [r4, #112]
	bhi	.L10230
	movw	r3, #:lower16:ccid_notify_complete
	mov	r1, #32
	movt	r3, #:upper16:ccid_notify_complete
	str	r3, [r5, #28]
	ldr	r3, [r4, #112]
	str	r4, [r3, #32]
	ldr	r7, [r4, #108]
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L10234
	movw	r2, #522
	str	r2, [r5, #4]
	ldr	r0, [r6, #40]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5]
	beq	.L10212
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L10212
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	mvn	r5, #11
	ldr	r3, [r3, #12]
	blx	r3
.L10210:
	movw	r0, #:lower16:.LC633
	ldr	r1, .L10253
	movt	r0, #:upper16:.LC633
	bl	printk
.L10213:
	ldr	r0, [r4, #112]
	cmp	r0, #0
	beq	.L10205
	ldr	r1, [r4, #100]
	bl	ccid_request_free.part.14
	b	.L10205
.L10212:
	cmn	r5, #4096
	bhi	.L10210
	movw	r3, #:lower16:ccid_bulk_complete_out
	movw	r9, #:lower16:ccid_bulk_complete_in
	str	r4, [r5, #32]
	movt	r3, #:upper16:ccid_bulk_complete_out
	movt	r9, #:upper16:ccid_bulk_complete_in
	mov	r7, #4
	movw	r10, #523
	str	r3, [r5, #28]
	str	r5, [r4, #184]
.L10218:
	ldr	fp, [r4, #104]
	mov	r1, #32
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L10235
	str	r10, [r5, #4]
	ldr	r3, [r6, #40]
	mov	ip, #16
	movw	r2, #523
	mov	r1, #32
	subs	r0, r3, #0
	streq	ip, [r5]
	beq	.L10216
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L10216
	ldr	r3, [fp, #8]
	mov	r1, r5
	mov	r0, fp
	mvn	r5, #11
	ldr	r3, [r3, #12]
	blx	r3
.L10214:
	movw	r0, #:lower16:.LC634
	ldr	r1, .L10253
	movt	r0, #:upper16:.LC634
	bl	printk
.L10217:
	ldr	r0, [r4, #184]
	cmp	r0, #0
	beq	.L10213
	ldr	r1, [r4, #108]
	bl	ccid_request_free.part.14
	b	.L10213
.L10216:
	cmn	r5, #4096
	add	fp, r4, #192
	mov	r2, r5
	mov	r1, fp
	mov	r0, r4
	bhi	.L10214
	str	r9, [r5, #28]
	str	r4, [r5, #32]
	bl	ccid_req_put
	subs	r7, r7, #1
	bne	.L10218
	mov	r1, r4
	ldr	r2, [r4, #100]
	ldr	r0, [r8]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L10248
	ldr	r3, [r4, #100]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L10249
	ldr	r3, [r4, #100]
	mov	r1, r4
	str	r4, [r3]
	ldr	r2, [r4, #104]
	ldr	r0, [r8]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L10250
	ldr	r3, [r4, #104]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L10251
	mov	r1, r4
	ldr	r2, [r4, #108]
	ldr	r0, [r8]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L10252
	ldr	r3, [r4, #108]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	moveq	r3, #1
	streq	r3, [r4, #96]
	streq	r3, [r4, #200]
	beq	.L10205
	ldr	r2, [r4, #108]
	movw	r0, #:lower16:.LC636
	mov	r3, r5
	movt	r0, #:upper16:.LC636
	ldr	r1, .L10253
	ldr	r2, [r2, #4]
	bl	printk
.L10226:
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
.L10223:
.L10220:
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #100]
	mov	r2, #0
	str	r2, [r3]
	b	.L10228
.L10229:
	ldr	r1, [r4, #104]
	bl	ccid_request_free.part.14
.L10228:
	mov	r1, fp
	mov	r0, r4
	bl	ccid_req_get
	cmp	r0, #0
	bne	.L10229
	b	.L10217
.L10235:
	mvn	r5, #11
	b	.L10214
.L10234:
	mvn	r5, #11
	b	.L10210
.L10248:
	ldr	r2, [r4, #100]
	movw	r0, #:lower16:.LC635
	mov	r3, r5
	ldr	r1, .L10253
	movt	r0, #:upper16:.LC635
	str	r7, [r2, #28]
	ldr	r2, [r4, #100]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L10228
.L10249:
	ldr	r2, [r4, #100]
	movw	r0, #:lower16:.LC636
	mov	r3, r5
	ldr	r1, .L10253
	movt	r0, #:upper16:.LC636
	ldr	r2, [r2, #4]
	bl	printk
	b	.L10228
.L10250:
	ldr	r2, [r4, #104]
	movw	r0, #:lower16:.LC635
	mov	r3, r5
	ldr	r1, .L10253
	movt	r0, #:upper16:.LC635
	str	r7, [r2, #28]
	ldr	r2, [r4, #104]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L10223
.L10251:
	ldr	r2, [r4, #104]
	movw	r0, #:lower16:.LC636
	mov	r3, r5
	ldr	r1, .L10253
	movt	r0, #:upper16:.LC636
	ldr	r2, [r2, #4]
	bl	printk
	b	.L10223
.L10252:
	ldr	r2, [r4, #108]
	movw	r0, #:lower16:.LC635
	mov	r3, r5
	ldr	r1, .L10253
	movt	r0, #:upper16:.LC635
	str	r7, [r2, #28]
	ldr	r2, [r4, #108]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L10226
.L10254:
	.align	2
.L10253:
	.word	.LANCHOR3-2688
	.fnend
	.size	ccid_function_set_alt, .-ccid_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_set_alt, %function
adb_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #92]
	ldr	r6, [r3, #24]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L10263
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L10264
	mov	r1, r4
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L10265
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L10266
	mov	r1, #1
	add	r0, r4, #128
	mov	r2, r1
	mov	r3, r5
	str	r1, [r4, #100]
	mov	r1, #3
	bl	__wake_up
.L10255:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10264:
	ldr	r2, [r4, #92]
	movw	r1, #:lower16:.LC632
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC632
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L10255
.L10266:
	ldr	r2, [r4, #96]
	movw	r1, #:lower16:.LC632
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC632
.L10262:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L10255
.L10263:
	ldr	r2, [r4, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC625
	movt	r1, #:upper16:.LC625
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L10255
.L10265:
	ldr	r2, [r4, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC625
	movt	r1, #:upper16:.LC625
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	b	.L10262
	.fnend
	.size	adb_function_set_alt, .-adb_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_set_alt, %function
qdss_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	cmp	r2, #0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r3, [r3, #24]
	ldr	r5, [r3]
	bne	.L10278
	ldr	r3, [r5, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L10284
	ldrb	r3, [r0, #89]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L10285
	ldrb	r3, [r0, #88]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L10286
.L10273:
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	and	r3, r3, #7
	cmp	r3, #7
	moveq	r3, #1
	streq	r3, [r4, #92]
	beq	.L10276
	ldr	r3, [r4, #92]
	cmp	r3, #0
	bne	.L10276
.L10283:
	mov	r6, #0
.L10267:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10276:
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L10283
	add	r2, r4, #156
	ldr	r1, [r4, #196]
	mov	r0, #4
	bl	queue_work_on
	b	.L10283
.L10285:
	mov	r0, r5
	mov	r1, r4
	ldr	r2, [r4, #108]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L10274
	ldr	r3, [r4, #108]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L10268
	ldr	r3, [r4, #108]
	str	r4, [r3]
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r4, #192]
	b	.L10273
.L10286:
	mov	r1, r0
	ldr	r2, [r4, #104]
	mov	r0, r5
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L10274
	ldr	r3, [r4, #104]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L10268
	ldr	r3, [r4, #104]
	mov	r0, r5
	mov	r1, r4
	str	r4, [r3]
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	ldr	r2, [r4, #100]
	orr	r3, r3, #2
	strb	r3, [r4, #192]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L10274
	ldr	r3, [r4, #100]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L10268
	ldr	r3, [r4, #100]
	str	r4, [r3]
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	orr	r3, r3, #4
	strb	r3, [r4, #192]
	b	.L10273
.L10274:
	mvn	r6, #21
	b	.L10267
.L10278:
	mov	r6, #0
.L10268:
	movw	r0, #:lower16:.LC638
	movt	r0, #:upper16:.LC638
	bl	printk
	mov	r0, r4
	bl	qdss_eps_disable
	b	.L10267
.L10284:
	movw	r0, #:lower16:.LC637
	mvn	r6, #21
	movt	r0, #:upper16:.LC637
	bl	printk
	b	.L10268
	.fnend
	.size	qdss_set_alt, .-qdss_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_set_alt, %function
rmnet_mux_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r1, #32
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #84]
	ldr	r6, [r0, #96]
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	bne	.L10308
.L10288:
	mvn	r3, #11
	mov	r5, r3
	str	r3, [r4, #100]
.L10287:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10308:
	mov	r2, #8
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	str	r2, [r5, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5]
	beq	.L10290
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L10290
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L10288
.L10290:
	cmn	r5, #4096
	str	r5, [r4, #100]
	bhi	.L10287
	movw	r3, #:lower16:rmnet_mux_notify_complete
	mov	r2, #8
	movt	r3, #:upper16:rmnet_mux_notify_complete
	mov	r1, r4
	str	r3, [r5, #28]
	ldr	r3, [r4, #100]
	str	r4, [r3, #32]
	ldr	r3, [r4, #100]
	str	r2, [r3, #4]
	ldr	r3, [r4, #92]
	str	r4, [r3]
	ldr	r2, [r4, #92]
	ldr	r0, [r7]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L10309
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L10310
	ldr	r3, [r4, #88]
	mov	r1, r4
	str	r4, [r3]
	ldr	r2, [r4, #88]
	ldr	r0, [r7]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L10311
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L10312
	mov	r1, r4
	ldr	r2, [r4, #96]
	ldr	r0, [r7]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L10313
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L10314
	mov	r3, #1
	str	r5, [r4, #312]
	str	r3, [r4, #372]
	str	r5, [r4, #400]
	str	r5, [r4, #404]
	str	r5, [r4, #408]
	str	r5, [r4, #412]
	str	r5, [r4, #416]
	str	r5, [r4, #420]
	str	r5, [r4, #424]
	b	.L10287
.L10310:
	ldr	r2, [r4, #92]
	movw	r1, #:lower16:.LC623
	mov	r3, r5
	ldr	r0, [r7]
	movt	r1, #:upper16:.LC623
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L10287
.L10312:
	ldr	r2, [r4, #88]
	movw	r1, #:lower16:.LC623
	mov	r3, r5
	ldr	r0, [r7]
	movt	r1, #:upper16:.LC623
.L10306:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L10287
.L10314:
	ldr	r2, [r4, #96]
	movw	r1, #:lower16:.LC623
	mov	r3, r5
	ldr	r0, [r7]
	movt	r1, #:upper16:.LC623
.L10307:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L10287
.L10309:
	ldr	r2, [r4, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC625
	movt	r1, #:upper16:.LC625
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #92]
	ldr	r0, [r7]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L10287
.L10311:
	ldr	r2, [r4, #88]
	mov	r0, #0
	movw	r1, #:lower16:.LC625
	movt	r1, #:upper16:.LC625
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #88]
	ldr	r0, [r7]
	b	.L10306
.L10313:
	ldr	r2, [r4, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC625
	movt	r1, #:upper16:.LC625
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #96]
	ldr	r0, [r7]
	b	.L10307
	.fnend
	.size	rmnet_mux_set_alt, .-rmnet_mux_set_alt
	.align	2
	.global	usb_add_function
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_add_function, %function
usb_add_function:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r1, #40]
	cmp	r3, #0
	beq	.L10321
	ldr	r3, [r1, #48]
	cmp	r3, #0
	beq	.L10321
	mov	r5, r0
	add	r7, r1, #72
	mov	r4, r1
	add	r2, r0, #36
	str	r5, [r1, #20]
	mov	r0, r7
	ldr	r1, [r5, #40]
	bl	__list_add
	ldr	r3, [r4, #32]
	cmp	r3, #0
	beq	.L10322
	mov	r1, r4
	mov	r0, r5
	blx	r3
	subs	r6, r0, #0
	blt	.L10333
.L10317:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L10318
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L10318
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L10318:
	tst	r3, #2
	bne	.L10319
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L10319
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L10319:
	tst	r3, #1
	bne	.L10315
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L10315
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L10315:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10333:
	mov	r0, r7
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L10317
.L10322:
	mov	r6, r3
	b	.L10317
.L10321:
.L10316:
	mvn	r6, #21
	b	.L10315
	.fnend
	.size	usb_add_function, .-usb_add_function
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_bind_config, %function
conn_gadget_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC639
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	movt	r0, #:upper16:.LC639
	ldr	r1, .L10336
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC640
	movt	r3, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC640
	ldr	r4, [r3, #2500]
	bl	printk
	movw	r2, #:lower16:.LC641
	movw	r3, #:lower16:.LANCHOR4
	ldr	lr, [r5, #24]
	movt	r2, #:upper16:.LC641
	movt	r3, #:upper16:.LANCHOR4
	sub	ip, r3, #2944
	movw	r1, #:lower16:conn_gadget_function_bind
	str	r2, [r4]
	sub	r2, r3, #2928
	sub	r3, r3, #2912
	movt	r1, #:upper16:conn_gadget_function_bind
	sub	ip, ip, #12
	sub	r2, r2, #12
	sub	r3, r3, #12
	mov	r0, r5
	strd	r2, [r4, #8]
	movw	r2, #:lower16:conn_gadget_function_disable
	str	ip, [r4, #16]
	movw	ip, #:lower16:conn_gadget_function_set_alt
	movt	r2, #:upper16:conn_gadget_function_disable
	str	r1, [r4, #32]
	movw	r1, #:lower16:conn_gadget_function_unbind
	movt	ip, #:upper16:conn_gadget_function_set_alt
	movt	r1, #:upper16:conn_gadget_function_unbind
	str	lr, [r4, #84]
	str	r1, [r4, #36]
	mov	r1, r4
	str	ip, [r4, #40]
	str	r2, [r4, #48]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	usb_add_function
.L10337:
	.align	2
.L10336:
	.word	.LANCHOR3-2664
	.fnend
	.size	conn_gadget_function_bind_config, .-conn_gadget_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_bind_config, %function
ccid_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movw	r2, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #8]
	movt	r2, #:upper16:.LANCHOR0
	ldr	r3, [r3, #2220]
	movw	ip, #:lower16:ccid_function_bind
	movw	lr, #:lower16:.LC642
	add	r4, r2, #3840
	movt	ip, #:upper16:ccid_function_bind
	ldr	r5, [r1, #24]
	add	r2, r2, #3792
	movt	lr, #:upper16:.LC642
	mov	r0, r1
	movw	r1, #:lower16:ccid_function_set_alt
	str	lr, [r3]
	movw	lr, #:lower16:ccid_function_unbind
	add	r4, r4, #12
	movt	r1, #:upper16:ccid_function_set_alt
	movt	lr, #:upper16:ccid_function_unbind
	str	r2, [r3, #16]
	movw	r2, #:lower16:ccid_function_setup
	str	ip, [r3, #32]
	movw	ip, #:lower16:ccid_function_disable
	movt	r2, #:upper16:ccid_function_setup
	movt	ip, #:upper16:ccid_function_disable
	str	r4, [r3, #8]
	str	lr, [r3, #36]
	str	r1, [r3, #40]
	mov	r1, r3
	str	ip, [r3, #48]
	str	r2, [r3, #52]
	str	r5, [r3, #84]
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	usb_add_function
	.fnend
	.size	ccid_function_bind_config, .-ccid_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_bind_config, %function
adb_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC643
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC643
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	mov	r5, r1
	ldr	r4, [r3, #2692]
	bl	printk
	ldr	r3, .L10343
	movw	r2, #:lower16:.LC644
	movw	lr, #:lower16:adb_function_bind
	ldr	r0, [r5, #24]
	movt	r2, #:upper16:.LC644
	movw	ip, #:lower16:adb_function_unbind
	movt	lr, #:upper16:adb_function_bind
	movt	ip, #:upper16:adb_function_unbind
	str	r2, [r4]
	add	r1, r3, #12
	sub	r2, r3, #4
	str	r1, [r4, #8]
	mov	r1, r4
	str	r2, [r4, #16]
	str	r0, [r4, #84]
	ldr	r2, [r5, #24]
	mov	r0, r5
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	str	lr, [r4, #32]
	str	ip, [r4, #36]
	cmp	r2, #4
	movw	r2, #:lower16:adb_function_set_alt
	addhi	r3, r3, #28
	movt	r2, #:upper16:adb_function_set_alt
	strhi	r3, [r4, #12]
	movw	r3, #:lower16:adb_function_disable
	movt	r3, #:upper16:adb_function_disable
	str	r2, [r4, #40]
	str	r3, [r4, #48]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	usb_add_function
.L10344:
	.align	2
.L10343:
	.word	.LANCHOR4-2896
	.fnend
	.size	adb_function_bind_config, .-adb_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_sdio_bind_config, %function
rmnet_smd_sdio_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2496]
	cmp	r3, #0
	beq	.L10346
	ldr	r2, .L10350
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movw	ip, #:lower16:.LC645
	str	lr, [sp, #8]
	movw	lr, #:lower16:rmnet_mux_bind
	movt	ip, #:upper16:.LC645
	movt	lr, #:upper16:rmnet_mux_bind
	movw	r4, #:lower16:rmnet_mux_unbind
	str	ip, [r3]
	mov	r0, r1
	movw	ip, #:lower16:rmnet_mux_setup
	add	r5, r2, #8
	str	r2, [r3, #4]
	add	r2, r2, #28
	movw	r1, #:lower16:rmnet_mux_set_alt
	movt	r4, #:upper16:rmnet_mux_unbind
	str	r2, [r3, #8]
	movw	r2, #:lower16:rmnet_mux_suspend
	movt	r1, #:upper16:rmnet_mux_set_alt
	str	lr, [r3, #32]
	movw	lr, #:lower16:rmnet_mux_disable
	movt	ip, #:upper16:rmnet_mux_setup
	movt	lr, #:upper16:rmnet_mux_disable
	movt	r2, #:upper16:rmnet_mux_suspend
	str	r5, [r3, #16]
	str	r4, [r3, #36]
	str	r1, [r3, #40]
	mov	r1, r3
	str	lr, [r3, #48]
	str	ip, [r3, #52]
	str	r2, [r3, #56]
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	usb_add_function
.L10346:
	mvn	r0, #18
	bx	lr
.L10351:
	.align	2
.L10350:
	.word	.LANCHOR4-2844
	.fnend
	.size	rmnet_smd_sdio_bind_config, .-rmnet_smd_sdio_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	accessory_function_bind_config, %function
accessory_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC646
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC646
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	mov	r5, r1
	ldr	r4, [r3, #2504]
	bl	printk
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	ldrb	r2, [r3, #-2796]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L10353
	ldr	r1, [r5, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L10354
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [r3, #-3132]
	strb	r2, [r3, #-2796]
.L10353:
	ldr	r1, [r5, #24]
	movw	r2, #:lower16:.LC647
	movw	ip, #:lower16:acc_function_unbind
	ldr	r3, .L10357
	movt	r2, #:upper16:.LC647
	movt	ip, #:upper16:acc_function_unbind
	str	r2, [r4]
	str	r1, [r4, #84]
	sub	r0, r3, #12
	sub	r2, r3, #4
	add	r1, r3, #12
	str	r0, [r4, #4]
	mov	r0, r5
	str	r1, [r4, #8]
	movw	r1, #:lower16:acc_function_bind
	str	r2, [r4, #16]
	ldr	r2, [r5, #24]
	movt	r1, #:upper16:acc_function_bind
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	str	r1, [r4, #32]
	mov	r1, r4
	str	ip, [r4, #36]
	cmp	r2, #4
	movw	r2, #:lower16:acc_function_set_alt
	addhi	r3, r3, #28
	movt	r2, #:upper16:acc_function_set_alt
	strhi	r3, [r4, #12]
	movw	r3, #:lower16:acc_function_disable
	movt	r3, #:upper16:acc_function_disable
	str	r2, [r4, #40]
	str	r3, [r4, #48]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	usb_add_function
.L10354:
	ldrd	r4, [sp]
	mvn	r0, #18
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10358:
	.align	2
.L10357:
	.word	.LANCHOR4-2768
	.fnend
	.size	accessory_function_bind_config, .-accessory_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_function_bind_config, %function
mass_storage_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r2, [r3, #-2716]	@ zero_extendqisi2
	ldr	r0, [r0, #4]
	cmp	r2, #0
	ldr	r6, [r0, #96]
	bne	.L10360
	ldr	ip, [r1, #24]
	ldrb	r2, [ip, #48]	@ zero_extendqisi2
	cmp	r2, #253
	mvnhi	r5, #18
	bhi	.L10359
	add	r2, r2, #1
	movw	r0, #:lower16:.LANCHOR0
	uxtb	r2, r2
	movt	r0, #:upper16:.LANCHOR0
	strb	r2, [r3, #-2716]
	strb	r2, [r0, #3596]
	strb	r2, [ip, #48]
.L10360:
	movw	r3, #:lower16:kmalloc_caches
	mov	r7, r1
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L10365
	mov	r2, #108
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	mvneq	r5, #11
	bne	.L10362
.L10359:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10365:
	mov	r4, #16
.L10362:
	movw	r2, #:lower16:.LC648
	ldr	r1, .L10369
	movw	r5, #:lower16:fsg_bind
	movt	r2, #:upper16:.LC648
	movw	lr, #:lower16:fsg_unbind
	movw	r3, #:lower16:fsg_setup
	movw	ip, #:lower16:fsg_set_alt
	str	r2, [r4]
	movw	r2, #:lower16:fsg_disable
	movt	r5, #:upper16:fsg_bind
	movt	lr, #:upper16:fsg_unbind
	movt	r3, #:upper16:fsg_setup
	str	r1, [r4, #4]
	movt	ip, #:upper16:fsg_set_alt
	movt	r2, #:upper16:fsg_disable
	str	r5, [r4, #32]
	mov	r0, r7
	str	lr, [r4, #36]
	mov	r1, r4
	str	ip, [r4, #40]
	str	r2, [r4, #48]
	str	r3, [r4, #52]
	str	r6, [r4, #88]
	bl	usb_add_function
	subs	r5, r0, #0
	bne	.L10368
	ldr	r3, [r4, #88]
	add	r2, r3, #336
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #1
	bgt	.L10359
	movw	r4, #:lower16:.LANCHOR5
	movt	r4, #:upper16:.LANCHOR5
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L10359
	movw	r0, #:lower16:.LC649
	mov	r1, #47
	movt	r0, #:upper16:.LC649
	bl	warn_slowpath_null
	mov	r3, #1
	strb	r3, [r4]
	b	.L10359
.L10368:
	mov	r0, r4
	bl	kfree
	b	.L10359
.L10370:
	.align	2
.L10369:
	.word	.LANCHOR4-2700
	.fnend
	.size	mass_storage_function_bind_config, .-mass_storage_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_bind_config, %function
mtp_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r3, #:lower16:.LANCHOR1
	mov	r5, r0
	movw	r0, #:lower16:.LC650
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	movt	r0, #:upper16:.LC650
	str	lr, [sp, #12]
	mov	r6, r1
	ldr	r4, [r3, #2516]
	bl	printk
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	ldrb	r2, [r3, #-2692]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L10372
	ldr	r1, [r5, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L10373
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [r3, #-3048]
	strb	r2, [r3, #-2692]
.L10372:
	ldr	r1, [r5, #24]
	movw	r2, #:lower16:.LC651
	cmp	r6, #0
	ldr	r3, .L10380
	movt	r2, #:upper16:.LC651
	strd	r2, [r4]
	str	r1, [r4, #84]
	bne	.L10379
	add	r2, r3, #80
	add	r1, r3, #100
	str	r1, [r4, #8]
	str	r2, [r4, #16]
	ldr	r2, [r5, #24]
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	cmp	r2, #4
	addhi	r3, r3, #120
	strhi	r3, [r4, #12]
.L10376:
	movw	r1, #:lower16:mtp_function_bind
	movw	ip, #:lower16:mtp_function_unbind
	movw	r2, #:lower16:mtp_function_set_alt
	movw	r3, #:lower16:mtp_function_disable
	movt	r1, #:upper16:mtp_function_bind
	movt	ip, #:upper16:mtp_function_unbind
	movt	r2, #:upper16:mtp_function_set_alt
	movt	r3, #:upper16:mtp_function_disable
	str	r1, [r4, #32]
	mov	r0, r5
	mov	r1, r4
	str	ip, [r4, #36]
	str	r2, [r4, #40]
	str	r3, [r4, #48]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	usb_add_function
.L10379:
	add	r2, r3, #8
	add	r1, r3, #28
	str	r1, [r4, #8]
	str	r2, [r4, #16]
	ldr	r2, [r5, #24]
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	cmp	r2, #4
	addhi	r3, r3, #48
	strhi	r3, [r4, #12]
	b	.L10376
.L10373:
	ldrd	r4, [sp]
	mvn	r0, #18
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10381:
	.align	2
.L10380:
	.word	.LANCHOR4-2676
	.fnend
	.size	mtp_bind_config, .-mtp_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ptp_function_bind_config, %function
ptp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r1
	mov	r1, #1
	b	mtp_bind_config
	.fnend
	.size	ptp_function_bind_config, .-ptp_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_bind_config, %function
mtp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r1
	mov	r1, #0
	b	mtp_bind_config
	.fnend
	.size	mtp_function_bind_config, .-mtp_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_function_bind_config, %function
qdss_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR4
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r2, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r3, [r2, #-2524]	@ zero_extendqisi2
	.pad #8
	sub	sp, sp, #8
	cmp	r3, #0
	movwne	r8, #:lower16:.LANCHOR0
	movtne	r8, #:upper16:.LANCHOR0
	bne	.L10385
	ldr	r1, [r1, #24]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L10388
	add	r3, r3, #1
	movw	r8, #:lower16:.LANCHOR0
	uxtb	r3, r3
	movt	r8, #:upper16:.LANCHOR0
	strb	r3, [r1, #48]
	ldr	r1, [r7, #24]
	strb	r3, [r2, #-2524]
	strb	r3, [r8, #3884]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L10388
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	strb	r3, [r2, #-2516]
	strb	r3, [r8, #3896]
.L10385:
	ldr	r0, .L10411
	bl	_raw_spin_lock_irqsave
	ldr	r6, .L10411+4
	mov	r9, r0
	ldr	r3, [r8, #248]
	cmp	r3, r6
	sub	r4, r3, #4
	beq	.L10389
	movw	r5, #:lower16:.LC652
	movt	r5, #:upper16:.LC652
	b	.L10391
.L10406:
	ldr	r4, [r4, #4]
	cmp	r4, r6
	sub	r4, r4, #4
	beq	.L10389
.L10391:
	mov	r0, r5
	ldr	r1, [r4]
	bl	strcmp
	cmp	r0, #0
	bne	.L10406
	movw	r6, #:lower16:.LC652
	sub	r5, r4, #112
	movt	r6, #:upper16:.LC652
	str	r5, [r4, #20]
.L10395:
	mov	r1, r9
	ldr	r0, .L10411
	mov	r8, #0
	bl	_raw_spin_unlock_irqrestore
	ldr	r10, .L10411+8
	movw	lr, #:lower16:qdss_set_alt
	movw	ip, #:lower16:qdss_disable
	ldr	r1, .L10411+12
	movt	lr, #:upper16:qdss_set_alt
	movt	ip, #:upper16:qdss_disable
	movw	r2, #:lower16:qdss_bind
	movw	r3, #:lower16:qdss_unbind
	ldr	r9, [r7, #24]
	movt	r2, #:upper16:qdss_bind
	movt	r3, #:upper16:qdss_unbind
	str	r6, [r5]
	str	lr, [r5, #40]
	add	lr, r5, #140
	mov	r0, r7
	str	ip, [r5, #48]
	add	ip, r5, #148
	stmib	r5, {r1, r10}
	movw	r1, #:lower16:usb_qdss_connect_work
	movt	r1, #:upper16:usb_qdss_connect_work
	str	r10, [r5, #16]
	strd	r2, [r5, #32]
	mov	r2, #65024
	movw	r3, #:lower16:usb_qdss_disconnect_work
	movt	r2, 65535
	movt	r3, #:upper16:usb_qdss_disconnect_work
	str	lr, [r5, #140]
	str	lr, [r5, #144]
	add	lr, r5, #160
	str	ip, [r5, #148]
	str	ip, [r5, #152]
	add	ip, r5, #176
	str	r9, [r5, #84]
	str	r2, [r5, #156]
	str	lr, [r5, #160]
	str	lr, [r5, #164]
	str	r1, [r5, #168]
	mov	r1, r5
	str	r2, [r5, #172]
	str	ip, [r5, #176]
	str	ip, [r5, #180]
	str	r3, [r5, #184]
	str	r8, [r5, #188]
	bl	usb_add_function
	subs	r6, r0, #0
	bne	.L10407
.L10384:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10389:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L10408
	mov	r2, #200
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L10409
.L10392:
	mov	r1, r9
	ldr	r0, .L10411
	movw	r6, #:lower16:.LC652
	bl	_raw_spin_unlock_irqrestore
	movt	r6, #:upper16:.LC652
	mov	r3, #0
	mov	r1, #10
	movw	r0, #:lower16:.LC228
	movt	r1, 2
	movt	r0, #:upper16:.LC228
	stm	sp, {r3, r6}
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r5, #196]
	beq	.L10410
	ldr	r0, .L10411
	add	r4, r5, #112
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	ldr	r2, .L10411+4
	add	r0, r5, #116
	ldr	r1, [r8, #252]
	str	r6, [r5, #112]
	bl	__list_add
	b	.L10395
.L10408:
	mov	r5, #16
	b	.L10392
.L10388:
	mvn	r6, #18
.L10387:
	movw	r0, #:lower16:.LC655
	ldr	r1, .L10411+16
	movt	r0, #:upper16:.LC655
	bl	printk
	b	.L10384
.L10410:
	mov	r0, r5
	mvn	r6, #11
	bl	kfree
	b	.L10387
.L10407:
	movw	r0, #:lower16:.LC654
	movt	r0, #:upper16:.LC654
	bl	printk
	mov	r0, r5
	str	r8, [r4, #20]
	bl	kfree
	b	.L10387
.L10409:
	movw	r0, #:lower16:.LC653
	mvn	r6, #11
	movt	r0, #:upper16:.LC653
	bl	printk
	mov	r1, r9
	ldr	r0, .L10411
	bl	_raw_spin_unlock_irqrestore
	b	.L10387
.L10412:
	.align	2
.L10411:
	.word	.LANCHOR1+2628
	.word	.LANCHOR0+248
	.word	.LANCHOR0+3996
	.word	.LANCHOR4-2500
	.word	.LANCHOR3-2628
	.fnend
	.size	qdss_function_bind_config, .-qdss_function_bind_config
	.align	2
	.global	usb_function_deactivate
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_function_deactivate, %function
usb_function_deactivate:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #20]
	ldr	r4, [r3, #24]
	add	r5, r4, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r1, [r4, #52]
	mov	r7, r0
	cmp	r1, #0
	bne	.L10414
	ldr	r0, [r4]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L10416
	blx	r3
	subs	r6, r0, #0
	bne	.L10415
	ldr	r1, [r4, #52]
.L10414:
	add	r1, r1, #1
	mov	r6, #0
	str	r1, [r4, #52]
.L10415:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, r6
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10416:
	mvn	r6, #94
	b	.L10415
	.fnend
	.size	usb_function_deactivate, .-usb_function_deactivate
	.align	2
	.global	usb_function_activate
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_function_activate, %function
usb_function_activate:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r4, [r3, #24]
	add	r5, r4, #60
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #52]
	cmp	r3, #0
	beq	.L10425
	sub	r3, r3, #1
	cmp	r3, #0
	str	r3, [r4, #52]
	bne	.L10426
	ldr	r0, [r4]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L10422
	mov	r1, #1
	blx	r3
	mov	r4, r0
.L10420:
	mov	r0, r5
	bl	_raw_spin_unlock
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10426:
	mov	r4, #0
	b	.L10420
.L10425:
	movw	r0, #:lower16:.LC554
	movw	r1, #315
	movt	r0, #:upper16:.LC554
	mvn	r4, #21
	bl	warn_slowpath_null
	b	.L10420
.L10422:
	mvn	r4, #94
	b	.L10420
	.fnend
	.size	usb_function_activate, .-usb_function_activate
	.align	2
	.global	usb_interface_id
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_interface_id, %function
usb_interface_id:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L10429
	add	ip, r3, #12
	add	r2, r3, #1
	str	r1, [r0, ip, lsl #2]
	strb	r2, [r0, #44]
.L10427:
	mov	r0, r3
	bx	lr
.L10429:
	mvn	r3, #18
	b	.L10427
	.fnend
	.size	usb_interface_id, .-usb_interface_id
	.align	2
	.global	usb_add_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_add_config, %function
usb_add_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r4, [r1, #20]	@ zero_extendqisi2
	cmp	r4, #0
	cmpne	r2, #0
	beq	.L10438
	mov	lr, r0
	ldr	r3, [lr, #36]!
	cmp	lr, r3
	sub	ip, r3, #28
	bne	.L10434
	b	.L10432
.L10444:
	ldr	r3, [ip, #28]
	cmp	lr, r3
	sub	ip, r3, #28
	beq	.L10432
.L10434:
	ldrb	r3, [r3, #-8]	@ zero_extendqisi2
	cmp	r3, r4
	bne	.L10444
.L10431:
	mvn	r6, #15
	b	.L10430
.L10432:
	mov	r5, r0
	add	r8, r1, #28
	mov	r4, r1
	mov	r6, r2
	mov	r0, r8
	mov	r2, lr
	str	r5, [r1, #24]
	ldr	r1, [r5, #40]
	mov	r7, #0
	bl	__list_add
	add	r3, r4, #36
	mov	r1, #64
	add	r0, r4, #48
	str	r3, [r4, #36]
	str	r3, [r4, #40]
	strb	r7, [r4, #44]
	bl	__memzero
	mov	r0, r4
	blx	r6
	subs	r6, r0, #0
	blt	.L10445
.L10435:
	ldr	r1, [r5]
	ldr	r3, [r1, #8]!
	cmp	r1, r3
	sub	r3, r3, #12
	beq	.L10436
	mov	r0, #0
.L10437:
	ldr	r2, [r3, #12]
	str	r0, [r3]
	cmp	r1, r2
	sub	r3, r2, #12
	bne	.L10437
.L10436:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	str	r2, [r3, #3600]
.L10430:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10445:
	mov	r0, r8
	bl	list_del
	str	r7, [r4, #24]
	b	.L10435
.L10438:
	mvn	r6, #21
	b	.L10430
	.fnend
	.size	usb_add_config, .-usb_add_config
	.align	2
	.global	usb_remove_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_remove_config, %function
usb_remove_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	movw	r0, #:lower16:.LC656
	strd	r6, [sp, #8]
	mov	r6, r1
	movt	r0, #:upper16:.LC656
	strd	r8, [sp, #16]
	ldr	r1, .L10467
	mov	r3, r6
	str	r10, [sp, #24]
	add	r7, r5, #60
	str	lr, [sp, #28]
	ldr	r2, [r5, #12]
	bl	printk
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r6, #24]
	mov	r9, r0
	cmp	r4, #0
	beq	.L10465
	ldr	r8, [r5, #12]
	cmp	r8, r6
	beq	.L10466
.L10454:
	add	r0, r6, #28
	bl	list_del
.L10452:
	mov	r0, r7
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, r6
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	unbind_config.constprop.153
.L10466:
	mov	r3, r8
	ldr	r4, [r3, #36]!
	cmp	r4, r3
	sub	r4, r4, #72
	beq	.L10449
	mov	r10, #0
.L10451:
	ldr	r3, [r4, #48]
	mov	r0, r4
	cmp	r3, #0
	beq	.L10450
	blx	r3
.L10450:
	str	r10, [r4, #80]
	ldr	r3, [r5, #12]
	ldr	r4, [r4, #72]
	add	r3, r3, #36
	cmp	r4, r3
	sub	r4, r4, #72
	bne	.L10451
.L10449:
	mov	r3, #0
	str	r3, [r5, #12]
	str	r3, [r5, #56]
	ldr	r3, [r8, #24]
	cmp	r3, #0
	beq	.L10452
	b	.L10454
.L10465:
	movw	r0, #:lower16:.LC554
	mov	r1, #896
	movt	r0, #:upper16:.LC554
	bl	warn_slowpath_null
	mov	r0, r7
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10468:
	.align	2
.L10467:
	.word	.LANCHOR3-2600
	.fnend
	.size	usb_remove_config, .-usb_remove_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_disable, %function
android_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #8]
	ldr	r1, [r0, #20]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r0, #20]
	bne	.L10469
	mov	r5, r0
	ldr	r0, [r6]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L10471
	blx	r3
	ldr	r0, [r6]
.L10471:
	ldr	r0, [r0, #4]
	ldr	r1, [r6, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r4, [r5, #508]!
	cmp	r5, r4
	sub	r4, r4, #120
	beq	.L10469
.L10472:
	mov	r1, r4
	mov	r0, r6
	bl	usb_remove_config
	ldr	r4, [r4, #120]
	cmp	r5, r4
	sub	r4, r4, #120
	bne	.L10472
.L10469:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	android_disable, .-android_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_android_function_enable, %function
adb_android_function_enable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mov	r1, #1
	ldr	r0, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, #0
	beq	.L10480
	bx	lr
.L10480:
	b	android_disable
	.fnend
	.size	adb_android_function_enable, .-adb_android_function_enable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_release, %function
adb_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r1, .L10504
	ldr	r0, .L10504+4
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	___ratelimit
	cmp	r0, #0
	bne	.L10500
.L10482:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #2692]
	ldrb	r2, [r3, #160]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L10501
.L10483:
	add	r2, r3, #116
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10501:
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	ldr	r6, [r3, #-2464]
	ldr	r5, [r3, #-2448]
	cmp	r5, #0
	beq	.L10502
.L10484:
	add	r7, r5, #24
	mov	r8, #0
	mov	r0, r7
	bl	mutex_lock
	ldrb	r3, [r6, #1]	@ zero_extendqisi2
	strb	r8, [r6]
	cmp	r3, r8
	beq	.L10503
	mov	r0, r5
	bl	android_disable
	str	r8, [r6, #4]
.L10488:
	mov	r0, r7
	bl	mutex_unlock
.L10487:
	ldr	r3, [r4, #2692]
	mov	r2, #1
	strb	r2, [r3, #161]
	b	.L10483
.L10502:
	ldr	r5, [r6, #4]
	cmp	r5, #0
	bne	.L10484
	movw	r0, #:lower16:.LC658
	ldr	r1, .L10504+8
	movt	r0, #:upper16:.LC658
	bl	printk
	ldrb	r3, [r6, #1]	@ zero_extendqisi2
	strb	r5, [r6]
	cmp	r3, #0
	moveq	r5, r3
	str	r5, [r6, #4]
	b	.L10487
.L10503:
	str	r3, [r6, #4]
	b	.L10488
.L10500:
	movw	r0, #:lower16:.LC657
	movt	r0, #:upper16:.LC657
	bl	printk
	b	.L10482
.L10505:
	.align	2
.L10504:
	.word	.LANCHOR3-2580
	.word	.LANCHOR4-2492
	.word	.LANCHOR3-2568
	.fnend
	.size	adb_release, .-adb_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_data_clear, %function
ffs_data_clear:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	mov	r0, #0
	add	r5, r4, #128
	strd	r6, [sp, #8]
	mov	r1, r5
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_test_and_clear_bit
	cmp	r0, #0
	bne	.L10524
.L10508:
	ldr	r3, [r4]
	cmp	r3, #0
	bne	.L10525
.L10513:
	ldr	r0, [r4, #208]
	cmp	r0, #0
	beq	.L10514
	ldrh	r1, [r4, #180]
	bl	ffs_epfiles_destroy
.L10514:
	ldr	r0, [r4, #144]
	bl	kfree
	ldr	r0, [r4, #184]
	bl	kfree
	ldrd	r6, [sp, #8]
	ldr	r0, [r4, #188]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	kfree
.L10524:
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	ldr	r8, [r3, #-2412]
	ldr	r7, [r3, #-2396]
	cmp	r7, #0
	beq	.L10526
.L10509:
	add	r0, r7, #24
	bl	mutex_lock
	ldrb	r3, [r8, #1]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L10527
.L10510:
	mov	r6, #0
	strb	r6, [r8]
	str	r6, [r8, #4]
	str	r6, [r8, #8]
	ldr	r3, [r4]
	cmp	r3, r6
	beq	.L10528
	ldr	r0, [r3, #4]
	ldr	r1, [r4, #28]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r4
	str	r6, [r4]
	str	r6, [r4, #28]
	bl	ffs_data_put
	mov	r1, r5
	mov	r0, #1
	bl	_clear_bit
.L10516:
	cmp	r7, #0
	beq	.L10508
	add	r0, r7, #24
	bl	mutex_unlock
	ldr	r3, [r4]
	cmp	r3, #0
	beq	.L10513
.L10525:
	.syntax divided
@ 1395 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1395, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L10527:
	mov	r0, r7
	bl	android_disable
	b	.L10510
.L10526:
	ldr	r7, [r8, #8]
	cmp	r7, #0
	bne	.L10509
	movw	r0, #:lower16:.LC659
	ldr	r1, .L10529
	movt	r0, #:upper16:.LC659
	bl	printk
	b	.L10510
.L10528:
	movw	r0, #:lower16:.LC9
	movw	r1, #1476
	movt	r0, #:upper16:.LC9
	bl	warn_slowpath_null
	b	.L10516
.L10530:
	.align	2
.L10529:
	.word	.LANCHOR3-2548
	.fnend
	.size	ffs_data_clear, .-ffs_data_clear
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_data_put, %function
ffs_data_put:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	add	r3, r0, #84
	str	lr, [sp, #4]
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L10536
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L10536:
	mov	r4, r0
	movw	r0, #:lower16:.LC660
	ldr	r1, .L10537
	movt	r0, #:upper16:.LC660
	bl	printk
	mov	r0, r4
	bl	ffs_data_clear
	ldr	r2, [r4, #120]
	add	r3, r4, #120
	cmp	r2, r3
	bne	.L10533
	ldr	r2, [r4, #40]
	add	r3, r4, #40
	cmp	r2, r3
	bne	.L10533
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
.L10533:
	.syntax divided
@ 1346 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1347, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L10538:
	.align	2
.L10537:
	.word	.LANCHOR3-2520
	.fnend
	.size	ffs_data_put, .-ffs_data_put
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_free, %function
ffs_func_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	mov	r6, #0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #8]
	ldr	r4, [r0, #12]
	add	r0, r3, #24
	ldrh	r5, [r3, #180]
	bl	_raw_spin_lock_irqsave
	add	r4, r4, #28
	mov	r8, r0
.L10541:
	ldr	r3, [r4, #-28]
	cmp	r3, #0
	mov	r0, r3
	beq	.L10540
	ldr	r1, [r4, #-24]
	cmp	r1, #0
	beq	.L10540
	ldr	r3, [r3, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L10540:
	subs	r5, r5, #1
	str	r6, [r4, #-28]
	add	r4, r4, #28
	str	r6, [r4, #-52]
	bne	.L10541
	ldr	r0, [r7, #8]
	mov	r1, r8
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r7, #8]
	bl	ffs_data_put
	ldr	r0, [r7, #12]
	bl	kfree
	ldrd	r4, [sp]
	mov	r0, r7
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	kfree
	.fnend
	.size	ffs_func_free, .-ffs_func_free
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_bind_config, %function
ffs_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r0, #4]
	ldr	r0, [r3, #28]
	ldr	r7, [r1, #24]
	ldr	r5, [r2, #4]
	cmp	r0, #0
	beq	.L10553
	mov	r2, #120
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	mvneq	r5, #11
	bne	.L10551
.L10550:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10553:
	mov	r4, #16
.L10551:
	movw	r3, #:lower16:.LC661
	movw	r1, #:lower16:ffs_func_bind
	movt	r3, #:upper16:.LC661
	movw	r2, #:lower16:ffs_func_set_alt
	movt	r1, #:upper16:ffs_func_bind
	movt	r2, #:upper16:ffs_func_set_alt
	str	r3, [r4, #36]
	movw	r3, #:lower16:ffs_func_unbind
	ldr	ip, [r5, #188]
	movt	r3, #:upper16:ffs_func_unbind
	movw	r0, #:lower16:ffs_func_disable
	str	r6, [r4]
	str	r1, [r4, #68]
	movw	r1, #:lower16:ffs_func_setup
	movt	r0, #:upper16:ffs_func_disable
	str	r2, [r4, #76]
	movw	r2, #:lower16:ffs_func_resume
	movt	r1, #:upper16:ffs_func_setup
	str	r3, [r4, #72]
	movw	r3, #:lower16:ffs_func_suspend
	movt	r2, #:upper16:ffs_func_resume
	movt	r3, #:upper16:ffs_func_suspend
	str	ip, [r4, #40]
	str	r0, [r4, #84]
	str	r1, [r4, #88]
	str	r3, [r4, #92]
	add	r3, r5, #84
	str	r2, [r4, #96]
	ldr	r2, [r7]
	stmib	r4, {r2, r5}
	.syntax divided
@ 45 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, r6
	add	r1, r4, #36
	bl	usb_add_function
	subs	r5, r0, #0
	beq	.L10550
	mov	r0, r4
	bl	ffs_func_free
	b	.L10550
	.fnend
	.size	ffs_function_bind_config, .-ffs_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_unbind, %function
ffs_func_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	sub	r4, r1, #36
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #-28]
	ldr	r3, [r5, #132]
	cmp	r3, r4
	beq	.L10562
.L10560:
	mov	r0, r5
	mov	r1, #1
	bl	ffs_event_add
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	ffs_func_free
.L10562:
	mov	r0, r4
	bl	ffs_func_eps_disable
	mov	r3, #0
	str	r3, [r5, #132]
	b	.L10560
	.fnend
	.size	ffs_func_unbind, .-ffs_func_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_fs_kill_sb, %function
ffs_fs_kill_sb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	bl	kill_litter_super
	ldr	r0, [r4, #616]
	cmp	r0, #0
	beq	.L10563
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	ffs_data_put
.L10563:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ffs_fs_kill_sb, .-ffs_fs_kill_sb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_data_closed, %function
ffs_data_closed:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r3, r0, #88
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r5, [r3]
	sub	r5, r5, #1
	strex	r2, r5, [r3]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r5, #0
	bne	.L10567
	mov	r3, #3
	str	r3, [r0, #92]
	bl	ffs_data_clear
	str	r5, [r4, #92]
	str	r5, [r4, #96]
	strh	r5, [r4, #104]	@ movhi
	str	r5, [r4, #128]
	str	r5, [r4, #144]
	str	r5, [r4, #148]
	str	r5, [r4, #152]
	str	r5, [r4, #156]
	str	r5, [r4, #160]
	str	r5, [r4, #164]
	str	r5, [r4, #168]
	str	r5, [r4, #172]
	str	r5, [r4, #176]
	strh	r5, [r4, #180]	@ movhi
	str	r5, [r4, #184]
	str	r5, [r4, #188]
	str	r5, [r4, #208]
.L10567:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	ffs_data_put
	.fnend
	.size	ffs_data_closed, .-ffs_data_closed
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_release, %function
ffs_ep0_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r0, [r1, #124]
	bl	ffs_data_closed
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
	.fnend
	.size	ffs_ep0_release, .-ffs_ep0_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_release, %function
ffs_epfile_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, #1
	mov	r4, r1
	str	lr, [sp, #4]
	ldr	r3, [r0, #328]
	ldr	r0, [r3, #36]
	str	r2, [r3, #32]
	bl	ffs_data_closed
	mov	r3, #0
	mov	r0, r3
	str	r3, [r4, #124]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ffs_epfile_release, .-ffs_epfile_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_enable, %function
ffs_function_enable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mov	r1, #1
	ldr	r0, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, #0
	beq	.L10575
	bx	lr
.L10575:
	b	android_disable
	.fnend
	.size	ffs_function_enable, .-ffs_function_enable
	.align	2
	.global	usb_string_id
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_string_id, %function
usb_string_id:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	mov	r2, r0
	cmp	r3, #253
	bhi	.L10578
	add	r3, r3, #1
	uxtb	r3, r3
	mov	r0, r3
	strb	r3, [r2, #48]
	bx	lr
.L10578:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	usb_string_id, .-usb_string_id
	.align	2
	.global	usb_string_ids_tab
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_string_ids_tab, %function
usb_string_ids_tab:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #4]
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	cmp	r2, #0
	mov	r2, r3
	beq	.L10580
	cmp	r3, #253
	bgt	.L10581
	add	r1, r1, #8
.L10582:
	ldr	ip, [r1, #4]
	add	r3, r3, #1
	add	r1, r1, #8
	uxtb	r2, r3
	cmp	ip, #0
	strb	r2, [r1, #-16]
	beq	.L10580
	cmp	r3, #254
	bne	.L10582
.L10581:
	mvn	r3, #18
	mov	r0, r3
	bx	lr
.L10580:
	mov	r3, #0
	strb	r2, [r0, #48]
	mov	r0, r3
	bx	lr
	.fnend
	.size	usb_string_ids_tab, .-usb_string_ids_tab
	.align	2
	.global	usb_string_ids_n
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_string_ids_n, %function
usb_string_ids_n:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #254
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	bhi	.L10595
	add	r1, r3, r1
	cmp	r1, #254
	bhi	.L10595
	strb	r1, [r0, #48]
	add	r0, r3, #1
	bx	lr
.L10595:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	usb_string_ids_n, .-usb_string_ids_n
	.align	2
	.global	usb_composite_probe
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_composite_probe, %function
usb_composite_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	beq	.L10601
	ldr	r3, [r0, #12]
	cmp	r1, #0
	cmpne	r3, #0
	beq	.L10601
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	lr, [r0]
	cmp	lr, #0
	beq	.L10609
.L10598:
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LANCHOR0
	movw	r4, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR1
	mov	ip, r1
	movw	r1, #:lower16:composite_bind
	str	lr, [r2, #1068]
	movt	r1, #:upper16:composite_bind
	cmp	r3, #0
	mov	r3, r0
	streq	lr, [r0, #4]
	ldr	lr, [r3]
	str	r3, [r4, #2236]
	ldr	r0, .L10610
	str	ip, [r4, #3700]
	str	lr, [r2, #1096]
	ldr	r3, [r3, #20]
	str	r3, [r2, #1072]
	bl	usb_gadget_probe_driver
	cmp	r0, #0
	movne	r3, #0
	strne	r3, [r4, #2236]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L10609:
	movw	r3, #:lower16:.LC662
	movt	r3, #:upper16:.LC662
	mov	lr, r3
	str	r3, [r0]
	b	.L10598
.L10601:
	mvn	r0, #21
	bx	lr
.L10611:
	.align	2
.L10610:
	.word	.LANCHOR0+1068
	.fnend
	.size	usb_composite_probe, .-usb_composite_probe
	.section	.devinit.text,"ax",%progbits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_probe, %function
android_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, r9, r10, lr}
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r9, #:lower16:__stack_chk_guard
	ldr	r2, [r0, #292]
	movt	r9, #:upper16:__stack_chk_guard
	.pad #32
	sub	sp, sp, #32
	ldr	r3, [r9]
	mov	r6, r0
	cmp	r2, #0
	str	r3, [sp, #28]
	beq	.L10613
	mov	r2, #208
	mov	r1, #52
	add	r0, r0, #8
	bl	devm_kzalloc
	subs	r7, r0, #0
	bne	.L10614
	movw	r0, #:lower16:.LC663
	ldr	r1, .L10663
	mvn	r5, #11
	movt	r0, #:upper16:.LC663
	bl	printk
	b	.L10612
.L10614:
	movw	r1, #:lower16:.LC664
	mov	r3, #1
	ldr	r0, [r6, #292]
	movt	r1, #:upper16:.LC664
	add	r2, r7, #4
	bl	of_property_read_u32_array
	movw	r1, #:lower16:.LC665
	mov	r2, #0
	ldr	r0, [r6, #292]
	movt	r1, #:upper16:.LC665
	mov	r4, r2
	bl	of_find_property
	subs	r0, r0, r4
	movw	r1, #:lower16:.LC666
	movne	r0, #1
	movt	r1, #:upper16:.LC666
	mov	r2, r4
	strb	r0, [r7, #9]
	ldr	r0, [r6, #292]
	bl	of_find_property
	subs	r0, r0, r4
	movw	r1, #:lower16:.LC667
	movne	r0, #1
	mov	r3, r4
	mov	r2, r4
	movt	r1, #:upper16:.LC667
	strb	r0, [r7, #11]
	ldr	r0, [r6, #292]
	str	r4, [sp]
	bl	of_property_read_string_helper
	cmp	r0, #3
	mov	r5, r0
	movwle	r8, #:lower16:.LC667
	movle	r10, r4
	movtle	r8, #:upper16:.LC667
	ble	.L10616
	movw	r0, #:lower16:.LC668
	ldr	r1, .L10663
	mvn	r5, #21
	movt	r0, #:upper16:.LC668
	bl	printk
	b	.L10612
.L10619:
	mov	r1, r8
	str	r4, [sp]
	mov	r3, #1
	add	r2, sp, #12
	ldr	r0, [r6, #292]
	str	r10, [sp, #12]
	bl	of_property_read_string_helper
	ldr	r1, [sp, #12]
	cmp	r1, #0
	beq	.L10618
	add	r0, r7, #12
	mov	r2, #10
	mla	r0, r2, r4, r0
	bl	strlcpy
.L10618:
	add	r4, r4, #1
.L10616:
	cmp	r4, r5
	blt	.L10619
	str	r5, [r7, #44]
	b	.L10620
.L10613:
	ldr	r7, [r0, #88]
.L10620:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3572]
	mov	r8, r4
	cmp	r0, #0
	bne	.L10621
	movw	r1, #:lower16:.LC669
	ldr	r2, .L10663+4
	movt	r1, #:upper16:.LC669
	bl	__class_create
	cmn	r0, #4096
	str	r0, [r4, #3572]
	movhi	r5, r0
	bhi	.L10612
.L10621:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #40]
	cmp	r0, #0
	beq	.L10644
	mov	r2, #528
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	bne	.L10622
	ldr	r2, .L10663
	movw	r0, #:lower16:.LC670
	mvn	r5, #11
	movt	r0, #:upper16:.LC670
	mov	r1, r2
	bl	printk
	b	.L10623
.L10644:
	mov	r4, #16
.L10622:
	ldr	r0, [r6]
	mov	lr, #1
	mov	r3, #65024
	ldr	r5, .L10663+8
	movw	r2, #:lower16:android_work
	movw	r1, #:lower16:usb_gadget_connect_work
	mov	ip, #0
	movt	r3, 65535
	movt	r2, #:upper16:android_work
	movt	r1, #:upper16:usb_gadget_connect_work
	add	r10, r4, #520
	stm	r4, {r0, r5}
	add	r0, r4, #508
	add	r5, r4, #184
	str	lr, [r4, #20]
	add	lr, r4, #456
	str	r3, [r4, #180]
	str	r5, [r4, #184]
	str	r5, [r4, #188]
	movw	r5, #:lower16:.LANCHOR0
	str	r2, [r4, #192]
	mov	r2, ip
	movt	r5, #:upper16:.LANCHOR0
	str	r3, [r4, #452]
	mov	r3, ip
	str	lr, [r4, #456]
	str	lr, [r4, #460]
	str	r1, [r4, #464]
	mov	r1, ip
	str	r0, [r4, #508]
	str	r0, [r4, #512]
	add	r0, r4, #468
	str	ip, [r4, #516]
	bl	init_timer_key
	movw	r3, #:lower16:delayed_work_timer_fn
	add	r0, r4, #452
	ldr	r2, .L10663+4
	movt	r3, #:upper16:delayed_work_timer_fn
	movw	r1, #:lower16:.LC671
	movt	r1, #:upper16:.LC671
	str	r3, [r4, #484]
	str	r0, [r4, #488]
	add	r0, r4, #24
	bl	__mutex_init
	mov	r0, r10
	ldr	r2, .L10663+12
	str	r7, [r4, #44]
	ldr	r1, [r8, #2232]
	bl	__list_add
	ldr	r3, [r8, #3576]
	cmp	r7, #0
	mov	r2, #0
	mov	r1, #512
	mov	r0, r6
	strbeq	r7, [r5, #1152]
	add	r3, r3, #1
	str	r3, [r8, #3576]
	ldrbne	r3, [r7, #8]	@ zero_extendqisi2
	strbne	r3, [r5, #1152]
	bl	platform_get_resource
	cmp	r0, #0
	beq	.L10626
	ldm	r0, {r1, r2}
	add	r6, r6, #8
	mov	r0, r6
	add	r2, r2, #1
	sub	r2, r2, r1
	bl	devm_ioremap
	cmp	r0, #0
	str	r0, [r8, #2808]
	bne	.L10626
	movw	r1, #:lower16:.LC672
	mov	r0, r6
	movt	r1, #:upper16:.LC672
	mvn	r5, #11
	bl	dev_err
	b	.L10627
.L10626:
	add	r6, sp, #17
	movw	r2, #:lower16:.LC673
	ldrb	r3, [r5, #1152]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC673
	mov	r1, #11
	mov	r0, r6
	bl	snprintf
	mov	r3, #0
	str	r6, [sp]
	ldr	r0, [r8, #3572]
	mov	r2, r3
	mov	r1, r3
	bl	device_create
	cmn	r0, #4096
	mov	r5, r0
	str	r0, [r4, #12]
	bls	.L10628
	cmp	r0, #0
	beq	.L10630
	b	.L10632
.L10628:
	mov	r1, r4
	ldr	r6, .L10663+16
	bl	dev_set_drvdata
.L10631:
	ldr	r1, [r6, #4]!
	ldr	r0, [r4, #12]
	cmp	r1, #0
	beq	.L10630
	bl	device_create_file
	subs	r5, r0, #0
	beq	.L10631
	ldr	r3, [r4, #12]
	ldr	r0, [r8, #3572]
	ldr	r1, [r3, #288]
	bl	device_destroy
.L10632:
	ldr	r2, .L10663
	movw	r0, #:lower16:.LC674
	movt	r0, #:upper16:.LC674
	mov	r1, r2
	bl	printk
	b	.L10627
.L10630:
	ldr	r2, [r4, #12]
	cmn	r2, #4096
	bls	.L10635
	movw	r0, #:lower16:.LC675
	ldr	r1, .L10663+20
	movt	r0, #:upper16:.LC675
	bl	printk
	ldr	r5, [r4, #12]
	cmp	r5, #0
	beq	.L10636
	b	.L10637
.L10635:
	mov	r0, r2
	ldr	r1, .L10663+24
	bl	device_create_file
	subs	r5, r0, #0
	beq	.L10636
	movw	r0, #:lower16:.LC676
	ldr	r1, .L10663+20
	movt	r0, #:upper16:.LC676
	bl	printk
.L10637:
	movw	r0, #:lower16:.LC677
	ldr	r1, .L10663
	movt	r0, #:upper16:.LC677
	bl	printk
	b	.L10612
.L10636:
	movw	r1, #:lower16:android_bind
	ldr	r0, .L10663+28
	movt	r1, #:upper16:android_bind
	bl	usb_composite_probe
	subs	r5, r0, #0
	beq	.L10638
	ldr	r2, .L10663
	movw	r0, #:lower16:.LC678
	movt	r0, #:upper16:.LC678
	mov	r1, r2
	bl	printk
	b	.L10639
.L10638:
	cmp	r7, #0
	beq	.L10640
	ldr	r3, [r7, #4]
	cmp	r3, #0
	beq	.L10640
	mvn	r2, #0
	mov	r1, #1
	add	r0, r4, #60
	bl	pm_qos_add_request
.L10640:
	movw	r1, #:lower16:.LC679
	mov	r2, #5
	movt	r1, #:upper16:.LC679
	add	r0, r4, #52
	bl	strlcpy
	ldr	r0, .L10663+32
	bl	misc_register
	subs	r5, r0, #0
	beq	.L10641
	movw	r0, #:lower16:.LC680
	mov	r1, r5
	movt	r0, #:upper16:.LC680
	bl	printk
	movw	r0, #:lower16:.LC681
	ldr	r1, .L10663
	movt	r0, #:upper16:.LC681
	bl	printk
	b	.L10639
.L10641:
	movw	r1, #:lower16:.LC682
	ldr	r2, .L10663+4
	movt	r1, #:upper16:.LC682
	ldr	r0, .L10663+36
	bl	__init_waitqueue_head
	b	.L10612
.L10639:
	mov	r0, r4
	bl	android_destroy_device
.L10627:
	mov	r0, r10
	bl	list_del
	ldr	r3, [r8, #3576]
	mov	r0, r4
	sub	r3, r3, #1
	str	r3, [r8, #3576]
	bl	kfree
.L10623:
	ldr	r3, .L10663+12
	ldr	r2, [r8, #2228]
	cmp	r2, r3
	bne	.L10612
	ldr	r0, [r8, #3572]
	bl	class_destroy
	mov	r3, #0
	str	r3, [r8, #3572]
.L10612:
	ldr	r2, [sp, #28]
	mov	r0, r5
	ldr	r3, [r9]
	cmp	r2, r3
	beq	.L10642
	bl	__stack_chk_fail
.L10642:
	add	sp, sp, #32
	@ sp needed
	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
.L10664:
	.align	2
.L10663:
	.word	.LANCHOR3-2504
	.word	.LANCHOR1+3988
	.word	.LANCHOR4-2364
	.word	.LANCHOR1+2228
	.word	.LANCHOR0+944
	.word	.LANCHOR3-2488
	.word	.LANCHOR4-2260
	.word	.LANCHOR0+1024
	.word	.LANCHOR4-2244
	.word	.LANCHOR1+2208
	.fnend
	.size	android_probe, .-android_probe
	.text
	.align	2
	.global	usb_composite_unregister
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_composite_unregister, %function
usb_composite_unregister:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2236]
	cmp	r3, r0
	beq	.L10667
	bx	lr
.L10667:
	ldr	r0, .L10668
	b	usb_gadget_unregister_driver
.L10669:
	.align	2
.L10668:
	.word	.LANCHOR0+1068
	.fnend
	.size	usb_composite_unregister, .-usb_composite_unregister
	.align	2
	.global	usb_composite_setup_continue
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_composite_setup_continue, %function
usb_composite_setup_continue:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #60
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #4]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #56]
	mov	r8, r0
	cmp	r3, #0
	bne	.L10671
	cmp	r4, #0
	bne	.L10676
.L10673:
	mov	r1, r8
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L10671:
	sub	r5, r3, #1
	cmp	r5, #0
	str	r5, [r4, #56]
	bne	.L10673
	str	r5, [r7, #4]
	ldr	r3, [r4]
	mov	r2, #32
	mov	r1, r7
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r7, #44]
	b	.L10673
.L10676:
	movw	r2, #:lower16:.LC683
	movw	r0, #:lower16:.LC554
	ldr	r3, .L10677
	movt	r2, #:upper16:.LC683
	movt	r0, #:upper16:.LC554
	movw	r1, #1845
	bl	warn_slowpath_fmt
	b	.L10673
.L10678:
	.align	2
.L10677:
	.word	.LANCHOR3-2460
	.fnend
	.size	usb_composite_setup_continue, .-usb_composite_setup_continue
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	handle_exception, %function
handle_exception:
	.fnstart
	@ args = 0, pretend = 0, frame = 128
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	movw	r7, #1284
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #132
	sub	sp, sp, #132
	mov	r3, sp
	bic	r9, r3, #8128
	bic	r9, r9, #63
	b	.L10681
.L10741:
	cmp	r5, #10
	bne	.L10740
.L10681:
	ldr	r4, [r9, #12]
	ldr	r0, [r4, #1036]
	add	r0, r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	mov	r2, sp
	add	r1, r4, #1040
	mov	r0, r4
	bl	dequeue_signal
	mov	r5, r0
	ldr	r0, [r4, #1036]
	mov	r1, r8
	add	r0, r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	bne	.L10741
	ldr	r3, [r6, #8]
	add	r7, r6, #44
	cmp	r3, #0
	beq	.L10684
	mov	r8, r5
.L10683:
	ldr	r4, [r6, #68]
	add	r4, r4, r8
	add	r8, r8, #32
	ldr	r3, [r4, #20]
	cmp	r3, #0
	beq	.L10685
	ldr	r3, [r6, #8]
	ldr	r1, [r4, #16]
	ldr	r0, [r3, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L10685:
	ldr	r3, [r4, #28]
	cmp	r3, #0
	beq	.L10686
	ldr	r3, [r6, #8]
	ldr	r1, [r4, #24]
	ldr	r0, [r3, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L10686:
	cmp	r8, #128
	bne	.L10683
.L10690:
	mov	r0, r7
	mov	r4, #0
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #68]
	add	r0, r3, #128
.L10687:
	ldr	r2, [r3, #20]
	add	r3, r3, #32
	ldr	r1, [r3, #-4]
	cmp	r3, r0
	add	r2, r2, r1
	add	r4, r4, r2
	bne	.L10687
	mov	r0, r7
	bl	_raw_spin_unlock_irq
	cmp	r4, #0
	beq	.L10688
	mov	r0, r6
	bl	sleep_thread
	cmp	r0, #0
	beq	.L10690
.L10679:
	add	sp, sp, #132
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L10740:
	mov	r1, #6
	mov	r0, r6
	bl	raise_exception
	b	.L10681
.L10688:
	ldr	r3, [r6, #8]
	ldrb	r2, [r3, #94]	@ zero_extendqisi2
	tst	r2, #1
	beq	.L10691
	ldr	r0, [r3, #100]
	ldr	r1, [r0, #8]
	ldr	r1, [r1, #36]
	cmp	r1, #0
	beq	.L10691
	blx	r1
	ldr	r3, [r6, #8]
	ldrb	r2, [r3, #94]	@ zero_extendqisi2
.L10691:
	tst	r2, #2
	beq	.L10684
	ldr	r0, [r3, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L10684
	blx	r3
.L10684:
	mov	r0, r7
	mov	r9, #0
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #68]
	str	r9, [r3, #4]
	ldr	r3, [r6, #68]
	str	r9, [r3, #36]
	ldr	r3, [r6, #68]
	str	r9, [r3, #68]
	ldr	r3, [r6, #68]
	str	r9, [r3, #100]
	ldr	r3, [r6, #68]
	ldr	r8, [r6, #112]
	str	r3, [r6, #60]
	cmp	r8, #1
	str	r3, [r6, #64]
	beq	.L10693
	ldr	r3, [r6, #92]
	ldr	r4, [r6, #116]
	cmp	r3, r9
	movne	r0, r9
	movne	r1, r0
	beq	.L10695
.L10694:
	ldr	r3, [r6, #100]
	add	r5, r5, #1
	add	r3, r3, r0
	add	r0, r0, #392
	ldrb	r2, [r3, #24]	@ zero_extendqisi2
	str	r1, [r3, #28]
	str	r1, [r3, #32]
	str	r1, [r3, #36]
	and	r2, r2, #239
	bfi	r2, r1, #6, #1
	strb	r2, [r3, #24]
	ldr	r3, [r6, #92]
	cmp	r3, r5
	bhi	.L10694
.L10695:
	mov	r3, #0
	sub	r8, r8, #2
	mov	r0, r7
	str	r3, [r6, #112]
	bl	_raw_spin_unlock_irq
	cmp	r8, #5
	ldrls	pc, [pc, r8, asl #2]
	b	.L10679
.L10700:
	.word	.L10699
	.word	.L10679
	.word	.L10701
	.word	.L10679
	.word	.L10702
	.word	.L10702
.L10693:
	mvn	r3, #7
	mov	r0, r7
	str	r3, [r6, #112]
	bl	_raw_spin_unlock_irq
	mov	r0, r6
	bl	send_status
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #112]
	cmn	r3, #8
	beq	.L10742
.L10697:
	mov	r0, r7
	bl	_raw_spin_unlock_irq
	b	.L10679
.L10699:
	ldr	r1, [r6, #8]
	cmp	r1, #0
	beq	.L10703
	add	r1, r1, #96
	mov	r0, #0
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L10705
	ldr	r3, [r6, #8]
	mov	r1, #0
	ldr	r0, [r3, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
.L10705:
	ldr	r3, [r6, #56]
	cmp	r3, r4
	bne	.L10679
	ldr	r0, [r6, #4]
	cmp	r0, #0
	bne	.L10739
	mov	r0, r6
	bl	ep0_queue
	b	.L10679
.L10701:
	mov	r0, r6
	ldr	r1, [r6, #12]
	bl	do_set_interface
	ldr	r3, [r6, #12]
	cmp	r3, #0
	beq	.L10679
	ldr	r0, [r6, #4]
.L10739:
	bl	usb_composite_setup_continue
	b	.L10679
.L10702:
	mov	r1, #0
	mov	r0, r6
	bl	do_set_interface
	mov	r0, r7
	bl	_raw_spin_lock_irq
	mov	r3, #7
	mov	r0, r7
	str	r3, [r6, #112]
	bl	_raw_spin_unlock_irq
	b	.L10679
.L10742:
	str	r9, [r6, #112]
	b	.L10697
.L10703:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC74
	movw	r3, #3112
	movt	r1, #:upper16:.LC74
	ldr	r2, .L10743
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC75
	movw	r1, #550
	movt	r0, #:upper16:.LC75
	bl	warn_slowpath_null
	b	.L10679
.L10744:
	.align	2
.L10743:
	.word	.LANCHOR3-2428
	.fnend
	.size	handle_exception, .-handle_exception
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_main_thread, %function
fsg_main_thread:
	.fnstart
	@ args = 0, pretend = 0, frame = 80
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r4, #22737
	strd	r6, [sp, #8]
	movt	r4, 6687
	strd	r8, [sp, #16]
	movw	r9, #21333
	strd	r10, [sp, #24]
	mov	fp, r0
	mov	r0, #2
	str	lr, [sp, #32]
	.pad #92
	sub	sp, sp, #92
	movt	r9, 17218
	bl	allow_signal
	mov	r0, #15
	add	r10, fp, #44
	bl	allow_signal
	mov	r0, #9
	bl	allow_signal
	mov	r0, #10
	bl	allow_signal
	bl	set_freezable
	mov	r3, #57344
	mov	r2, sp
	str	r4, [sp, #16]
	movt	r3, 65535
	movw	r0, #21250
	mov	r1, #0
	and	r2, r2, r3
	movt	r0, 5
	mov	r7, r3
	str	r1, [r2, #8]
	str	r0, [sp, #20]
.L10746:
	ldr	r3, [fp, #112]
	cmp	r3, #7
	beq	.L11102
.L10921:
	cmp	r3, #0
	bgt	.L10747
	mov	r3, sp
	and	r3, r3, r7
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L10747
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	tst	r3, #32
	beq	.L11103
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r4, [fp, #60]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L10751
.L10753:
	mov	r0, r10
	bl	_raw_spin_unlock_irq
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	bne	.L10746
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L10753
.L10751:
	mov	r0, r10
	bl	_raw_spin_unlock_irq
	mov	r2, #31
	mov	r0, fp
	str	r2, [r4, #12]
	ldr	r1, [fp, #108]
	udiv	r3, r2, r1
	mul	r3, r1, r3
	subs	r3, r2, r3
	addne	r2, r1, r2
	mov	r1, r4
	subne	r2, r2, r3
	ldr	r3, [r4, #24]
	str	r2, [r3, #4]
	bl	start_out_transfer
	cmp	r0, #0
	bne	.L11083
	b	.L10746
.L11104:
	bl	_raw_spin_unlock_irq
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	bne	.L10746
.L11083:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	mov	r0, r10
	cmp	r3, #1
	bne	.L11104
	bl	_raw_spin_unlock_irq
	.syntax divided
@ 2858 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r5, [fp, #8]
	cmp	r5, #0
	beq	.L10758
	ldr	r2, [r4, #24]
	ldr	r3, [r5, #88]
	ldr	r8, [r2]
	ldr	r6, [r2, #44]
	cmp	r6, #0
	bne	.L11090
	ldr	r1, [r5, #96]
	tst	r1, #1
	bne	.L10761
	ldr	r2, [r2, #48]
	cmp	r2, #31
	bne	.L10762
	ldr	r2, [r8]
	cmp	r2, r9
	bne	.L10762
	ldrb	r2, [r8, #13]	@ zero_extendqisi2
	cmp	r2, #7
	bls	.L11105
.L10774:
	ldrb	r3, [r3, #144]	@ zero_extendqisi2
	ands	r6, r3, #1
	beq	.L10761
	ldr	r0, [r5, #104]
	mov	r1, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	mov	r0, r5
	bl	halt_bulk_in_endpoint
.L11090:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	mov	r3, #0
	mov	r0, r10
	str	r3, [r4, #4]
	bl	_raw_spin_unlock_irq
	b	.L10746
.L10747:
	mov	r0, fp
	bl	handle_exception
	ldr	r3, [fp, #112]
	cmp	r3, #7
	bne	.L10921
.L11102:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	mov	r3, #0
	mov	r0, r10
	str	r3, [fp, #168]
	bl	_raw_spin_unlock_irq
	ldr	r3, [fp, #172]
	cmp	r3, #0
	beq	.L10925
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L10925
	mov	r0, fp
	blx	r3
	cmp	r0, #0
	blt	.L10925
.L10926:
	add	r0, fp, #152
	mov	r1, #0
	bl	complete_and_exit
.L11103:
	mov	r0, fp
	bl	sleep_thread
	b	.L10746
.L10925:
	ldr	r5, [fp, #92]
	add	r7, fp, #28
	mov	r0, r7
	ldr	r4, [fp, #100]
	bl	down_write
	cmp	r5, #0
	sub	r5, r5, #1
	beq	.L10924
	mov	r6, #14848
	add	r4, r4, #392
	movt	r6, 2
	mov	r8, #0
.L10928:
	ldr	r0, [r4, #-392]
	cmp	r0, #0
	beq	.L10927
	bl	fput
	str	r8, [r4, #-392]
	str	r6, [r4, #-356]
.L10927:
	sub	r5, r5, #1
	add	r4, r4, #392
	cmn	r5, #1
	bne	.L10928
.L10924:
	mov	r0, r7
	bl	up_write
	b	.L10926
.L11105:
	ldrb	r6, [r8, #12]	@ zero_extendqisi2
	bics	r6, r6, #128
	bne	.L10774
	ldrb	r2, [r8, #14]	@ zero_extendqisi2
	sub	r1, r2, #1
	cmp	r1, #15
	bhi	.L10774
	str	r2, [r3, #72]
	add	r1, r8, #15
	add	r0, r3, #76
	str	r3, [sp, #12]
	bl	memcpy
	ldrsb	r2, [r8, #12]
	ldr	r3, [sp, #12]
	cmp	r2, #0
	movlt	r2, #2
	movge	r2, #1
	ldr	r1, [r3, #92]
	str	r2, [r3, #120]
	ldr	r2, [r8, #8]
	cmp	r2, #0
	str	r2, [r3, #124]
	moveq	r2, #3
	streq	r2, [r3, #120]
	ldrb	r2, [r8, #13]	@ zero_extendqisi2
	cmp	r2, r1
	str	r2, [r3, #96]
	ldrcc	r1, [r3, #100]
	movcc	r0, #392
	movcs	r2, #0
	mlacc	r2, r0, r2, r1
	mov	r0, r10
	str	r2, [r3, #104]
	ldr	r2, [r8, #4]
	str	r2, [r3, #132]
	bl	_raw_spin_lock_irq
	mov	r3, #0
	mov	r0, r10
	str	r3, [r4, #4]
	bl	_raw_spin_unlock_irq
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [fp, #112]
	cmp	r3, #0
	bgt	.L10783
	mvn	r3, #8
	str	r3, [fp, #112]
.L10783:
	mov	r0, r10
	bl	_raw_spin_unlock_irq
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r4, [fp, #60]
	str	r4, [fp, #64]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L10784
.L10785:
	mov	r0, r10
	bl	_raw_spin_unlock_irq
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	bne	.L10746
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L10785
.L10784:
	add	r5, fp, #28
	mov	r0, r10
	str	r5, [sp, #12]
	bl	_raw_spin_unlock_irq
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	mov	r0, r5
	and	r3, r3, #251
	bfc	r3, #3, #1
	strb	r3, [fp, #144]
	bl	down_read
	ldrb	r2, [fp, #76]	@ zero_extendqisi2
	cmp	r2, #37
	beq	.L10787
	bls	.L11106
	cmp	r2, #68
	beq	.L10804
	bls	.L11107
	cmp	r2, #168
	beq	.L10812
	bls	.L11108
	cmp	r2, #190
	beq	.L10816
	cmp	r2, #250
	beq	.L10817
	cmp	r2, #170
	beq	.L11109
.L10786:
	mov	r5, #0
	movw	r1, #:lower16:.LC692
	ldr	r0, .L11125
	movt	r1, #:upper16:.LC692
	str	r5, [fp, #128]
	bl	sprintf
	str	r5, [sp]
	mov	r2, r5
	mvn	r3, #0
	mov	r0, fp
	ldr	r1, [fp, #72]
	bl	check_command.constprop.141
	subs	r5, r0, #0
	bne	.L10819
	ldr	r3, [fp, #104]
.L11093:
	mov	r2, #335872
	mvn	r6, #21
	str	r2, [r3, #28]
.L10821:
	ldr	r0, [sp, #12]
	mov	r5, r6
	bl	up_read
.L10930:
	mov	r3, sp
	and	r3, r3, r7
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r3, r3, #1
	bne	.L10746
	cmn	r5, #22
	beq	.L10894
	cmp	r5, #0
	ldrlt	r2, [fp, #120]
	blt	.L10895
	mov	r3, r5
.L10894:
	ldr	r2, [fp, #120]
	cmp	r2, #2
	bne	.L10895
	ldr	r2, [fp, #128]
	mov	r1, #1
	ldr	r0, [r4, #16]
	cmp	r3, r2
	movcs	r3, r2
	str	r3, [r0, #4]
	str	r1, [r4, #4]
	ldr	r2, [fp, #120]
	ldr	r1, [fp, #136]
	sub	r3, r1, r3
	str	r3, [fp, #136]
.L10895:
	cmp	r2, #1
	beq	.L10897
	bcc	.L10898
	cmp	r2, #2
	bne	.L10896
	ldr	r3, [fp, #124]
	cmp	r3, #0
	beq	.L10896
	ldr	r3, [fp, #8]
	cmp	r3, #0
	beq	.L11110
	ldr	r4, [fp, #60]
	ldr	r2, [fp, #136]
	ldr	r3, [r4, #16]
	cmp	r2, #0
	bne	.L10905
	ldrb	ip, [r3, #26]	@ zero_extendqisi2
	mov	r1, r4
	mov	r0, fp
	bfi	ip, r2, #1, #1
	strb	ip, [r3, #26]
	bl	start_in_transfer
	cmp	r0, #0
	beq	.L10746
	ldr	r3, [r4, #8]
	str	r3, [fp, #60]
.L10896:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [fp, #112]
	mov	r0, r10
	cmp	r3, #0
	mvnle	r3, #7
	strle	r3, [fp, #112]
	bl	_raw_spin_unlock_irq
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #3596]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3, #3596]
	bne	.L10746
	mov	r0, fp
	bl	send_status
	subs	r4, r0, #0
	bne	.L10746
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [fp, #112]
	mov	r0, r10
	cmp	r3, #0
	strle	r4, [fp, #112]
	bl	_raw_spin_unlock_irq
	b	.L10746
.L10758:
	ldr	r0, [fp]
	movw	r1, #:lower16:.LC74
	movw	r3, #2859
	ldr	r2, .L11125+4
	movt	r1, #:upper16:.LC74
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC75
	movw	r1, #550
	movt	r0, #:upper16:.LC75
	bl	warn_slowpath_null
	mov	r0, r10
	bl	_raw_spin_lock_irq
	mov	r0, r10
	str	r5, [r4, #4]
	bl	_raw_spin_unlock_irq
	b	.L10746
.L10761:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	mov	r0, r10
	str	r6, [r4, #4]
	bl	_raw_spin_unlock_irq
	b	.L10746
.L10847:
	tst	r2, #16
	ldrne	r3, [sp, #20]
	mvnne	r6, #21
	strne	r3, [r8, #28]
	bne	.L10821
	cmp	r3, #0
	beq	.L10821
	ldr	r3, [fp, #172]
	cmp	r3, #0
	beq	.L10855
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L10855
	ldr	r2, [fp, #100]
	mov	r1, r8
	mov	r0, fp
	ldr	ip, [sp, #16]
	sub	r2, r8, r2
	asr	r2, r2, #3
	mul	r2, ip, r2
	blx	r3
	subs	r5, r0, #0
	blt	.L10819
	bne	.L10821
.L10855:
	ldr	r5, [sp, #12]
	mov	r0, r5
	bl	up_read
	mov	r0, r5
	bl	down_write
	ldr	r0, [r8]
	cmp	r0, #0
	beq	.L10854
	bl	fput
	mov	r3, #0
	str	r3, [r8]
.L10854:
	ldr	r5, [sp, #12]
	mov	r0, r5
	bl	up_write
	mov	r0, r5
	bl	down_read
	movw	r1, #:lower16:.LC687
	mov	r0, fp
	movt	r1, #:upper16:.LC687
	bl	send_message
	ldr	r3, [fp, #172]
	cmp	r3, #0
	beq	.L10821
	ldr	r3, [r3, #8]
	cmp	r3, #0
	beq	.L10821
	ldr	r2, [fp, #100]
	mov	r1, r8
	mov	r0, fp
	ldr	ip, [sp, #16]
	sub	r2, r8, r2
	asr	r2, r2, #3
	mul	r2, ip, r2
	blx	r3
	and	r5, r0, r0, asr #31
.L10819:
	ldr	r0, [sp, #12]
	bl	up_read
	cmn	r5, #4
	bne	.L10930
	b	.L10746
.L11106:
	cmp	r2, #21
	beq	.L10789
	bhi	.L10790
	cmp	r2, #8
	beq	.L10791
	bhi	.L10792
	cmp	r2, #0
	beq	.L10793
	cmp	r2, #3
	bne	.L10786
	ldrb	ip, [fp, #80]	@ zero_extendqisi2
	mov	r0, #0
	mov	r3, #16
	mov	r2, #2
	mov	r1, #6
	str	r0, [sp]
	mov	r0, fp
	str	ip, [fp, #128]
	bl	check_command.constprop.141
	subs	r5, r0, #0
	bne	.L10819
	ldr	r2, [fp, #104]
	ldr	r8, [r4]
	cmp	r2, #0
	beq	.L11111
	ldrb	r1, [r2, #24]	@ zero_extendqisi2
	mov	r0, #0
	ldr	r6, [r2, #28]
	ldr	r3, [r2, #32]
	str	r0, [r2, #28]
	str	r0, [r2, #32]
	ubfx	r5, r1, #6, #1
	bfi	r1, r0, #6, #1
	lsl	r5, r5, #7
	strb	r1, [r2, #24]
.L10843:
	mov	r1, #18
	mov	r0, r8
	str	r3, [sp, #40]
	bl	__memzero
	ldr	r3, [sp, #40]
	lsr	ip, r6, #16
	lsr	r1, r6, #8
	orr	r5, r5, #112
	lsr	r2, r3, #16
	strb	r5, [r8]
	strb	r3, [r8, #6]
	ubfx	r3, r3, #8, #8
	lsr	r0, r2, #8
	strb	ip, [r8, #2]
	strb	r1, [r8, #12]
	strb	r2, [r8, #4]
	mov	r2, #10
	strb	r0, [r8, #3]
	strb	r3, [r8, #5]
	strb	r2, [r8, #7]
	strb	r6, [r8, #13]
	mov	r6, #18
	b	.L10821
.L10897:
	ldr	r3, [fp, #136]
	cmp	r3, #0
	beq	.L10896
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	ands	r5, r3, #8
	bne	.L10911
.L10912:
	ldr	r3, [fp, #64]
	ldr	r2, [r3, #4]
	cmp	r2, #0
	bne	.L10916
	ldr	r3, [fp, #140]
	cmp	r3, #0
	beq	.L10896
	ldr	r6, [fp, #60]
	ldr	r2, [r6, #4]
	cmp	r2, #0
	beq	.L10932
.L10913:
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	beq	.L10912
	b	.L10746
.L10916:
	cmp	r2, #1
	bne	.L10910
	.syntax divided
@ 2060 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r2, [r3, #8]
	str	r5, [r3, #4]
	str	r2, [fp, #64]
	ldr	r2, [r3, #24]
	ldr	r3, [r3, #12]
	ldr	r1, [r2, #48]
	cmp	r1, r3
	bcc	.L10911
	ldr	r3, [r2, #44]
	cmp	r3, #0
	beq	.L10912
.L10911:
	mov	r1, #1
	mov	r0, fp
	bl	raise_exception
	b	.L10746
.L10910:
	ldr	r6, [fp, #60]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L10913
	ldr	r3, [fp, #140]
	cmp	r3, #0
	beq	.L10913
.L10932:
	cmp	r3, #16384
	mov	r1, r6
	movcc	r4, r3
	movcs	r4, #16384
	mov	r0, fp
	str	r4, [r6, #12]
	ldr	r3, [fp, #108]
	udiv	r2, r4, r3
	mls	r2, r3, r2, r4
	cmp	r2, #0
	addne	r3, r4, r3
	moveq	r3, r4
	subne	r3, r3, r2
	ldr	r2, [r6, #24]
	str	r3, [r2, #4]
	bl	start_out_transfer
	cmp	r0, #0
	beq	.L10746
	ldr	r3, [fp, #140]
	ldr	r2, [r6, #8]
	sub	r3, r3, r4
	str	r2, [fp, #60]
	str	r3, [fp, #140]
	b	.L10912
.L10898:
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L10896
	ldr	r3, [fp, #8]
	cmp	r3, #0
	movweq	r1, #:lower16:.LC74
	movweq	r3, #2120
	ldreq	r0, [fp]
	beq	.L11091
	ldr	r0, [r3, #104]
	mov	r1, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	ldr	r0, [fp, #8]
	bl	halt_bulk_in_endpoint
.L10902:
	cmp	r0, #0
	bne	.L10746
	b	.L10896
.L11107:
	cmp	r2, #47
	beq	.L10806
	bhi	.L10807
	cmp	r2, #40
	beq	.L10808
	cmp	r2, #42
	bne	.L10786
	ldrb	r1, [fp, #83]	@ zero_extendqisi2
	ldrb	r3, [fp, #84]	@ zero_extendqisi2
	ldr	r2, [fp, #104]
	orr	r3, r3, r1, lsl #8
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L10872
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L10872:
	mov	r0, #1
	movw	r3, #446
	mov	r2, r0
	mov	r1, #10
.L11098:
	str	r0, [sp]
	mov	r0, fp
	bl	check_command.constprop.141
	subs	r5, r0, #0
	bne	.L10819
	mov	r0, fp
	bl	do_write
	mov	r5, r0
	b	.L10819
.L10790:
	cmp	r2, #26
	beq	.L10797
	bls	.L11112
	cmp	r2, #30
	beq	.L10801
	cmp	r2, #35
	beq	.L10802
	cmp	r2, #27
	bne	.L10786
	mov	ip, #0
	mov	r3, #18
	mov	r2, #3
	mov	r1, #6
	str	ip, [fp, #128]
	mov	r0, fp
	str	ip, [sp]
	bl	check_command.constprop.141
	subs	r5, r0, #0
	bne	.L10819
	ldr	r8, [fp, #104]
	cmp	r8, #0
	beq	.L10824
	ldrb	r2, [r8, #24]	@ zero_extendqisi2
	tst	r2, #4
	moveq	r3, #335872
	mvneq	r6, #21
	streq	r3, [r8, #28]
	beq	.L10821
	ldrb	r3, [fp, #77]	@ zero_extendqisi2
	tst	r3, #254
	bne	.L10845
	ldrb	r3, [fp, #80]	@ zero_extendqisi2
	tst	r3, #252
	bne	.L10845
	tst	r3, #1
	and	r3, r3, #2
	beq	.L10847
	cmp	r3, #0
	beq	.L10848
	movw	r1, #:lower16:.LC686
	mov	r0, fp
	movt	r1, #:upper16:.LC686
	bl	send_message
.L10848:
	ldr	r3, [r8]
	cmp	r3, #0
	moveq	r3, #14848
	mvneq	r6, #21
	movteq	r3, 2
	streq	r3, [r8, #28]
	b	.L10821
.L10792:
	cmp	r2, #10
	beq	.L10795
	cmp	r2, #18
	bne	.L10786
	ldrb	ip, [fp, #80]	@ zero_extendqisi2
	mov	r0, #0
	mov	r3, #16
	mov	r2, #2
	mov	r1, #6
	str	r0, [sp]
	mov	r0, fp
	str	ip, [fp, #128]
	bl	check_command.constprop.141
	subs	r5, r0, #0
	bne	.L10819
	ldr	r2, [fp, #104]
	ldr	r8, [r4]
	cmp	r2, #0
	beq	.L11113
	ldrb	ip, [r2, #24]	@ zero_extendqisi2
	mov	r5, #0
	mov	r0, #2
	ldr	r3, .L11125+8
	mov	r1, #31
	movw	lr, #:lower16:.LANCHOR1
	movt	lr, #:upper16:.LANCHOR1
	add	r6, fp, #218
	tst	ip, #8
	str	lr, [sp, #40]
	moveq	ip, r5
	movne	ip, #5
	strb	ip, [r8]
	ldrb	ip, [r2, #24]	@ zero_extendqisi2
	mov	r2, #16
	strb	r0, [r8, #2]
	strb	r0, [r8, #3]
	mov	r0, r3
	strb	r1, [r8, #4]
	mov	r1, r6
	lsl	ip, ip, #5
	strb	r5, [r8, #5]
	strb	r5, [r8, #6]
	bic	ip, ip, #127
	strb	ip, [r8, #1]
	strb	r5, [r8, #7]
	bl	strncpy
	ldr	lr, [sp, #40]
	mov	r0, r6
	strb	r5, [lr, #4004]
	bl	strlen
	cmp	r0, #11
	ldr	r3, .L11125+8
	bhi	.L10823
	ldr	r2, [fp, #96]
	cmp	r2, r5
	beq	.L10823
	mov	r0, r3
	bl	strlen
	ldr	r3, .L11125+8
	movw	r2, #:lower16:.LC685
	movt	r2, #:upper16:.LC685
	ldr	ip, [r2]
	ldrh	r2, [r2, #4]
	add	r1, r3, r0
	str	ip, [r3, r0]	@ unaligned
	strh	r2, [r1, #4]	@ unaligned
	ldr	r2, [sp, #40]
	strb	r5, [r2, #4004]
.L10823:
	mov	r1, #1
	add	r5, fp, #180
	str	r3, [sp]
	movw	r2, #:lower16:.LC533
	mov	r0, r5
	movt	r2, #:upper16:.LC533
	str	r1, [sp, #4]
	add	r3, fp, #209
	mov	r1, #29
	mov	r6, #36
	bl	snprintf
	ldr	r0, [fp, #180]	@ unaligned
	ldr	r1, [fp, #184]	@ unaligned
	ldr	r2, [fp, #188]	@ unaligned
	ldr	ip, [fp, #192]	@ unaligned
	str	r0, [r8, #8]	@ unaligned
	str	r1, [r8, #12]	@ unaligned
	str	r2, [r8, #16]	@ unaligned
	str	ip, [r8, #20]	@ unaligned
	ldr	r2, [fp, #204]	@ unaligned
	ldr	r0, [fp, #196]	@ unaligned
	ldr	r1, [fp, #200]	@ unaligned
	str	r0, [r8, #24]	@ unaligned
	str	r1, [r8, #28]	@ unaligned
	str	r2, [r8, #32]	@ unaligned
	ldrb	r2, [fp, #208]	@ zero_extendqisi2
	strb	r2, [r8, #36]
	b	.L10821
.L10807:
	cmp	r2, #53
	beq	.L10810
	cmp	r2, #67
	bne	.L10786
	ldr	r3, [fp, #104]
	cmp	r3, #0
	beq	.L10786
	ldrb	r3, [r3, #24]	@ zero_extendqisi2
	tst	r3, #8
	beq	.L10786
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	mov	r6, #1
	movw	r3, #962
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	mov	r2, #2
	mov	r1, #10
	str	r6, [sp]
	mov	r0, fp
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command.constprop.141
	subs	r5, r0, #0
	bne	.L10819
	ldrb	r3, [fp, #77]	@ zero_extendqisi2
	ldrb	r5, [fp, #82]	@ zero_extendqisi2
	ldrb	r0, [fp, #85]	@ zero_extendqisi2
	ldr	r2, [fp, #104]
	and	r1, r3, #253
	and	r3, r3, #2
	ldr	r8, [r4]
	cmp	r5, r6
	cmpls	r1, #0
	movne	r3, #9216
	movne	r5, #1
	movtne	r3, 5
	moveq	r5, #0
	lsr	r0, r0, #6
	mvnne	r6, #21
	strne	r3, [r2, #28]
	bne	.L10821
	cmp	r0, #2
	beq	.L11114
	mov	r1, #20
	mov	r0, r8
	strd	r2, [sp, #40]
	bl	__memzero
	ldrd	r2, [sp, #40]
	mov	r0, #18
	mov	r1, #22
	strb	r0, [r8, #1]
	strb	r6, [r8, #2]
	cmp	r3, #0
	strb	r6, [r8, #3]
	strb	r1, [r8, #5]
	strb	r6, [r8, #6]
	bne	.L11115
	mvn	r0, #85
	strb	r3, [r8, #8]
	mov	r6, #20
	strb	r3, [r8, #9]
	strb	r3, [r8, #10]
	strb	r3, [r8, #11]
	strb	r1, [r8, #13]
	strb	r0, [r8, #14]
	ldr	r3, [r2, #16]
	lsr	r2, r3, #16
	ubfx	r1, r3, #8, #8
	strb	r2, [r8, #17]
	strb	r3, [r8, #19]
	lsr	r3, r2, #8
	strb	r1, [r8, #18]
	strb	r3, [r8, #16]
	b	.L10821
.L11108:
	cmp	r2, #85
	beq	.L10814
	cmp	r2, #90
	bne	.L10786
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	mov	r1, #0
	movw	r3, #390
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	mov	r2, #2
	mov	r0, fp
	str	r1, [sp]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command.constprop.141
	subs	r5, r0, #0
	bne	.L10819
.L11085:
	mov	r1, r4
	mov	r0, fp
	bl	do_mode_sense
	mov	r5, r0
	b	.L10819
.L10905:
	ldrb	r2, [r3, #26]	@ zero_extendqisi2
	mov	r1, r4
	mov	r0, fp
	orr	r2, r2, #2
	strb	r2, [r3, #26]
	bl	start_in_transfer
	cmp	r0, #0
	bne	.L10906
	ldrb	r2, [fp, #144]	@ zero_extendqisi2
	ldr	r3, [r4, #8]
	tst	r2, #1
	str	r3, [fp, #60]
	beq	.L10746
.L10931:
	ldr	r0, [fp, #8]
	bl	halt_bulk_in_endpoint
	b	.L10902
.L11110:
	ldr	r0, [fp]
	movw	r1, #:lower16:.LC74
	movw	r3, #2135
.L11091:
	movt	r1, #:upper16:.LC74
	ldr	r2, .L11125+12
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC75
	movw	r1, #550
	movt	r0, #:upper16:.LC75
	bl	warn_slowpath_null
	b	.L10746
.L10762:
	ldr	r0, [r5, #100]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	beq	.L10764
	blx	r2
.L10765:
	cmp	r0, #0
	beq	.L10768
	cmn	r0, #11
	bne	.L11116
	mov	r0, #100
	bl	msleep_interruptible
	cmp	r0, #0
	bne	.L10768
	ldr	r0, [r5, #100]
	ldr	r2, [r0, #8]
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L10770
	blx	r3
	b	.L10765
.L10770:
	mov	r1, #1
	ldr	r3, [r2, #24]
	blx	r3
	b	.L10765
.L11116:
	ldr	r3, [r5, #84]
	movw	r1, #:lower16:.LC684
	mov	r2, r0
	movt	r1, #:upper16:.LC684
	add	r0, r3, #32
	bl	dev_warn
.L10768:
	add	r1, r5, #96
	mov	r0, #0
	bl	_set_bit
	b	.L11090
.L10787:
	mov	ip, #1
	mov	r6, #8
	mov	r3, #316
	mov	r2, #2
	str	r6, [fp, #128]
	mov	r1, #10
	mov	r0, fp
	str	ip, [sp]
	bl	check_command.constprop.141
	subs	r5, r0, #0
	bne	.L10819
	ldrb	r2, [fp, #84]	@ zero_extendqisi2
	ldr	r0, [fp, #78]	@ unaligned
	ldr	r3, [r4]
	ldr	r1, [fp, #104]
	cmp	r2, #1
	rev	r0, r0
	bhi	.L10832
	eor	r2, r2, #1
	cmp	r0, #0
	moveq	r2, #0
	andne	r2, r2, #1
	cmp	r2, #0
	bne	.L10832
	ldr	r2, [r1, #16]
	sub	r2, r2, #1
	lsr	r0, r2, #16
	ubfx	ip, r2, #8, #8
	strb	r2, [r3, #3]
	lsr	r2, r0, #8
	strb	r2, [r3]
	strb	r0, [r3, #1]
	strb	ip, [r3, #2]
	ldr	r2, [r1, #44]
	lsr	r1, r2, #16
	ubfx	r0, r2, #8, #8
	strb	r1, [r3, #5]
	strb	r2, [r3, #7]
	lsr	r2, r1, #8
	strb	r0, [r3, #6]
	strb	r2, [r3, #4]
	b	.L10821
.L10817:
	ldrb	r5, [fp, #80]	@ zero_extendqisi2
	add	r8, fp, #235
	movw	r0, #:lower16:.LC691
	ldr	r1, .L11125+16
	mov	r3, r8
	movt	r0, #:upper16:.LC691
	str	r5, [fp, #128]
	mov	r2, r5
	ldr	r6, [r4]
	bl	printk
	ldr	r1, [fp, #128]
	cmp	r1, #0
	bne	.L11117
.L10891:
	cmp	r5, #101
	mov	r0, r6
	movhi	r2, #101
	mov	r1, r8
	movhi	r5, r2
	movls	r2, r5
	bl	memcpy
	mov	r6, r5
	b	.L10821
.L10816:
	ldrb	ip, [fp, #83]	@ zero_extendqisi2
	mov	r1, #1
	mov	r3, #956
	ldrb	r0, [fp, #82]	@ zero_extendqisi2
	mov	r2, #2
	ldrb	lr, [fp, #84]	@ zero_extendqisi2
	str	r1, [sp]
	mov	r1, #12
	lsl	ip, ip, #8
	orr	ip, ip, r0, lsl #16
	mov	r0, fp
	orr	ip, ip, lr
	lsl	ip, ip, #9
	str	ip, [fp, #128]
	bl	check_command.constprop.141
	subs	r5, r0, #0
	bne	.L10819
	ldrb	r5, [fp, #83]	@ zero_extendqisi2
	ldrb	r1, [fp, #82]	@ zero_extendqisi2
	ldrb	r3, [fp, #84]	@ zero_extendqisi2
	ldr	r2, [fp, #78]	@ unaligned
	lsl	r5, r5, #8
	orr	r5, r5, r1, lsl #16
	rev	ip, r2
	orrs	r5, r5, r3
	str	ip, [sp, #68]
	beq	.L10819
	ldr	r8, [fp, #104]
	mov	r1, #0
	ldrd	r2, [r8, #16]
	cmp	ip, r2
	sbcs	r3, r1, r3
	movge	r3, #8448
	mvnge	r5, #21
	movtge	r3, 5
	strge	r3, [r8, #28]
	bge	.L10819
	ldrb	r3, [fp, #85]	@ zero_extendqisi2
	and	r3, r3, #248
	cmp	r3, #248
	str	r3, [sp, #72]
	beq	.L11118
	ldr	r2, [sp, #68]
	ldr	r3, [fp, #128]
	lsr	r1, r2, #23
	lsl	r2, r2, #9
	cmp	r3, #0
	mov	r0, r3
	str	r2, [sp, #32]
	str	r1, [sp, #36]
	beq	.L10890
.L10878:
	str	r4, [sp, #40]
	ldrd	r4, [sp, #32]
	mov	r3, sp
	and	r3, r3, r7
	str	r10, [sp, #44]
	str	r9, [sp, #64]
	mov	r9, r0
	str	r3, [sp, #76]
.L10877:
	ldr	r1, [r8, #8]
	cmp	r9, #16384
	mov	r3, #0
	ldr	r0, [r8, #12]
	movcc	r2, r9
	movcs	r2, #16384
	subs	r1, r1, r4
	str	r1, [sp, #56]
	sbc	r1, r0, r5
	str	r1, [sp, #60]
	ldrd	r0, [sp, #56]
	cmp	r2, r0
	sbcs	r1, r3, r1
	strdlt	r2, [sp, #56]
.L10879:
	ldrd	r0, [sp, #56]
	ubfx	r3, r4, #0, #12
	cmp	r3, #0
	mov	r10, r0
	beq	.L10880
	rsb	r3, r3, #4096
	cmp	r3, r0
	movcc	r10, r3
	movcs	r10, r0
.L10880:
	ldr	r6, [fp, #60]
	b	.L10881
.L10882:
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	bne	.L11076
.L10881:
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L10882
	cmp	r10, #0
	beq	.L11119
	ldr	r3, [sp, #72]
	strd	r4, [sp, #80]
	mov	r2, r10
	ldr	r1, [r6]
	ldr	r0, [r8]
	cmp	r3, #248
	add	r3, sp, #80
	addeq	r1, r1, #16
	bl	vfs_read
	ldr	r3, [sp, #76]
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r3, r3, #1
	bne	.L10938
	cmp	r0, #0
	blt	.L10887
	cmp	r10, r0
	ldr	r3, [fp, #136]
	bls	.L10888
	bic	r0, r0, #508
	mov	r2, #1
	bic	r0, r0, #3
	sub	r3, r3, r0
	adds	r4, r4, r0
	adc	r5, r5, r0, asr #31
	cmp	r10, r0
	str	r3, [fp, #136]
	ldr	r3, [r6, #16]
	sub	r9, r9, r0
	str	r0, [r3, #4]
	str	r2, [r6, #4]
	bhi	.L11120
.L10889:
	cmp	r9, #0
	beq	.L11077
	mov	r1, r6
	mov	r0, fp
	bl	start_in_transfer
	cmp	r0, #0
	beq	.L11078
	ldr	r3, [r6, #8]
	str	r3, [fp, #60]
	b	.L10877
.L10797:
	ldrb	ip, [fp, #80]	@ zero_extendqisi2
	mov	r0, #0
	mov	r3, #22
	mov	r2, #2
	mov	r1, #6
	str	r0, [sp]
	mov	r0, fp
	str	ip, [fp, #128]
	bl	check_command.constprop.141
	subs	r5, r0, #0
	bne	.L10819
	b	.L11085
.L10802:
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	mov	r1, #1
	mov	r3, #384
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	mov	r2, #2
	mov	r0, fp
	str	r1, [sp]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command.constprop.141
	subs	r5, r0, #0
	bne	.L10819
	ldr	r1, [fp, #104]
	mov	r2, #8
	mov	r0, #2
	ldr	r3, [r4]
	mov	r6, #12
	strb	r5, [r3]
	strb	r5, [r3, #1]
	strb	r5, [r3, #2]
	strb	r2, [r3, #3]
	ldr	r2, [r1, #16]
	lsr	ip, r2, #16
	strb	r2, [r3, #7]
	ubfx	r2, r2, #8, #8
	strb	ip, [r3, #5]
	strb	r2, [r3, #6]
	lsr	r2, ip, #8
	strb	r2, [r3, #4]
	ldr	r2, [r1, #44]
	strb	r0, [r3, #8]
	lsr	r1, r2, #16
	ubfx	r0, r2, #8, #8
	strb	r1, [r3, #9]
	strb	r0, [r3, #10]
	strb	r2, [r3, #11]
	b	.L10821
.L10801:
	mov	ip, #0
	mov	r3, #16
	mov	r2, #3
	mov	r1, #6
	str	ip, [fp, #128]
	mov	r0, fp
	str	ip, [sp]
	bl	check_command.constprop.141
	subs	r5, r0, #0
	bne	.L10819
	ldr	r5, [fp, #104]
	cmp	r5, #0
	beq	.L10824
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	tst	r3, #4
	moveq	r3, #335872
	mvneq	r6, #21
	streq	r3, [r5, #28]
	beq	.L10821
	ldrb	r8, [fp, #80]	@ zero_extendqisi2
	bics	r6, r8, #1
	movne	r3, #9216
	mvnne	r6, #21
	movtne	r3, 5
	strne	r3, [r5, #28]
	bne	.L10821
	and	r3, r3, #144
	mvn	r2, r8
	cmp	r3, #16
	movne	r3, #0
	andeq	r3, r2, #1
	cmp	r3, #0
	bne	.L11121
.L10827:
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	bfi	r3, r8, #4, #1
	strb	r3, [r5, #24]
	b	.L10821
.L10789:
	ldrb	ip, [fp, #80]	@ zero_extendqisi2
	mov	r0, #0
	mov	r3, #18
	mov	r2, #1
	mov	r1, #6
	str	r0, [sp]
	mov	r0, fp
	str	ip, [fp, #128]
	bl	check_command.constprop.141
	subs	r5, r0, #0
	bne	.L10819
.L11101:
	ldr	r3, [fp, #104]
	cmp	r3, #0
	bne	.L11093
.L10824:
	mvn	r6, #21
	b	.L10821
.L10795:
	ldrb	r3, [fp, #80]	@ zero_extendqisi2
	ldr	r2, [fp, #104]
	cmp	r3, #0
	moveq	r3, #256
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L10871
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L10871:
	mov	r0, #1
	mov	r3, #30
	mov	r2, r0
	mov	r1, #6
	b	.L11098
.L10791:
	ldrb	r3, [fp, #80]	@ zero_extendqisi2
	ldr	r2, [fp, #104]
	cmp	r3, #0
	moveq	r3, #256
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L10829
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L10829:
	mov	r0, #1
	mov	r3, #30
	mov	r2, #2
	mov	r1, #6
.L11095:
	str	r0, [sp]
	mov	r0, fp
	bl	check_command.constprop.141
	subs	r5, r0, #0
	bne	.L10819
	mov	r0, fp
	bl	do_read
	mov	r5, r0
	b	.L10819
.L11126:
	.align	2
.L11125:
	.word	.LANCHOR1+4008
	.word	.LANCHOR3-2408
	.word	.LANCHOR1+3988
	.word	.LANCHOR3-2336
	.word	.LANCHOR3-2356
	.word	.LANCHOR3-2388
	.word	.LANCHOR3-2372
.L10804:
	ldr	r3, [fp, #104]
	cmp	r3, #0
	beq	.L10786
	ldrb	r3, [r3, #24]	@ zero_extendqisi2
	tst	r3, #8
	beq	.L10786
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	mov	r8, #1
	movw	r3, #446
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	mov	r2, #2
	mov	r1, #10
	str	r8, [sp]
	mov	r0, fp
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command.constprop.141
	subs	r5, r0, #0
	bne	.L10819
	ldrb	r3, [fp, #77]	@ zero_extendqisi2
	ldr	r6, [fp, #78]	@ unaligned
	ldr	ip, [fp, #104]
	ldr	r5, [r4]
	bics	r2, r3, #2
	and	lr, r3, #2
	movne	r3, #9216
	rev	r6, r6
	movtne	r3, 5
	str	r2, [sp, #40]
	mvnne	r6, #21
	strne	r3, [ip, #28]
	bne	.L10821
	ldrd	r2, [ip, #16]
	mov	r1, #0
	cmp	r6, r2
	sbcs	r3, r1, r3
	movge	r3, #8448
	mvnge	r6, #21
	movtge	r3, 5
	strge	r3, [ip, #28]
	bge	.L10821
	mov	r1, #8
	mov	r0, r5
	str	lr, [sp, #44]
	bl	__memzero
	ldr	lr, [sp, #44]
	strb	r8, [r5]
	cmp	lr, #0
	bne	.L11122
	lsr	r3, r6, #16
	ubfx	r1, r6, #8, #8
	strb	r3, [r5, #5]
	strb	r6, [r5, #7]
	mov	r6, #8
	lsr	r2, r3, r6
	strb	r1, [r5, #6]
	strb	r2, [r5, #4]
	b	.L10821
.L10812:
	ldr	r3, [fp, #82]	@ unaligned
	ldr	r2, [fp, #104]
	rev	r3, r3
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L10831
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L10831:
	mov	r0, #1
	movw	r3, #1022
	mov	r2, #2
	mov	r1, #12
	b	.L11095
.L10810:
	mov	r1, #0
	mov	r8, #1
	mov	r3, #444
	mov	r2, #3
	str	r1, [fp, #128]
	mov	r0, fp
	mov	r1, #10
	str	r8, [sp]
	bl	check_command.constprop.141
	subs	r5, r0, #0
	bne	.L10819
	ldr	r5, [fp, #104]
	ldr	r0, [r5]
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	cmp	r0, #0
	ubfx	r3, r3, #1, #1
	moveq	r3, r8
	cmp	r3, #0
	bne	.L10821
	mov	r1, r8
	bl	vfs_fsync
	cmp	r0, #0
	beq	.L10821
	movw	r3, #3074
	mov	r6, #0
	movt	r3, 3
	str	r3, [r5, #28]
	b	.L10821
.L10808:
	ldrb	r1, [fp, #83]	@ zero_extendqisi2
	ldrb	r3, [fp, #84]	@ zero_extendqisi2
	ldr	r2, [fp, #104]
	orr	r3, r3, r1, lsl #8
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L10830
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L10830:
	mov	r0, #1
	movw	r3, #446
	mov	r2, #2
	mov	r1, #10
	b	.L11095
.L10806:
	mov	r1, #0
	mov	ip, #1
	movw	r3, #446
	mov	r2, #3
	str	r1, [fp, #128]
	mov	r0, fp
	mov	r1, #10
	str	ip, [sp]
	bl	check_command.constprop.141
	subs	r5, r0, #0
	bne	.L10819
	ldr	r6, [fp, #104]
	mov	r1, #0
	ldr	ip, [fp, #78]	@ unaligned
	ldrd	r2, [r6, #16]
	rev	ip, ip
	cmp	ip, r2
	sbcs	r3, r1, r3
	movge	r3, #8448
	mvnge	r5, #21
	movtge	r3, 5
	strge	r3, [r6, #28]
	bge	.L10819
	ldrb	r3, [fp, #77]	@ zero_extendqisi2
	bics	r1, r3, #16
	movne	r3, #9216
	mvnne	r5, #21
	movtne	r3, 5
	strne	r3, [r6, #28]
	bne	.L10819
	ldrb	r2, [fp, #83]	@ zero_extendqisi2
	ldrb	r3, [fp, #84]	@ zero_extendqisi2
	orrs	r2, r3, r2, lsl #8
	beq	.L10890
	ldr	r3, [r6, #40]
	str	r1, [sp, #28]
	mov	r0, r6
	ldr	r1, [fp, #60]
	lsl	r8, r2, r3
	ldr	r2, [sp, #28]
	str	r1, [sp, #64]
	sub	r1, r3, #32
	orr	r2, r2, ip, lsl r1
	str	r2, [sp, #28]
	rsb	r2, r3, #32
	lsl	r3, ip, r3
	ldr	r1, [sp, #28]
	str	r3, [sp, #24]
	orr	r2, r1, ip, lsr r2
	str	r2, [sp, #28]
	bl	fsg_lun_fsync_sub
	mov	r3, sp
	and	r3, r3, r7
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L11089
	ldr	r3, [r6]
	mvn	r2, #0
	mov	r1, #0
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #32]
	ldr	r0, [r3, #32]
	bl	invalidate_mapping_pages
	mov	r3, sp
	and	r3, r3, r7
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r5, [r3]
	ands	r5, r5, #1
	bne	.L11089
	strd	r4, [sp, #40]
	ldrd	r4, [sp, #48]
	mov	r3, sp
	and	r3, r3, r7
	str	r3, [sp, #68]
.L10861:
	cmp	r8, #0
	beq	.L11123
	ldr	r1, [r6, #8]
	cmp	r8, #16384
	mov	r3, #0
	ldr	ip, [sp, #24]
	movcc	r2, r8
	movcs	r2, #16384
	ldr	r0, [r6, #12]
	subs	r4, r1, ip
	ldr	r1, [sp, #28]
	sbc	r5, r0, r1
	cmp	r2, r4
	sbcs	r1, r3, r5
	movlt	r4, r2
	movlt	r5, r3
	cmp	r4, #0
	str	r4, [sp, #48]
	beq	.L11124
	ldrd	r0, [sp, #24]
	add	r3, sp, #88
	mov	r2, r4
	strd	r0, [r3, #-8]!
	ldr	r1, [sp, #64]
	ldr	r0, [r6]
	ldr	r1, [r1]
	bl	vfs_read
	ldr	r3, [sp, #68]
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L11075
	cmp	r0, #0
	blt	.L10865
	ldr	r3, [sp, #48]
	cmp	r3, r0
	bls	.L10866
	ldr	r3, [r6, #44]
	rsb	r3, r3, #0
	and	r0, r0, r3
.L10866:
	cmp	r0, #0
	beq	.L10865
	ldrd	r2, [sp, #24]
	sub	r8, r8, r0
	adds	r2, r2, r0
	adc	r3, r3, r0, asr #31
	strd	r2, [sp, #24]
	b	.L10861
.L11109:
	ldr	r3, [fp, #82]	@ unaligned
	ldr	r2, [fp, #104]
	rev	r3, r3
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L10873
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L10873:
	mov	r0, #1
	movw	r3, #1022
	mov	r2, r0
	mov	r1, #12
	b	.L11098
.L10793:
	mov	r0, #1
	str	r2, [fp, #128]
	mov	r3, r2
	mov	r1, #6
	mov	r2, #3
	str	r0, [sp]
	mov	r0, fp
	bl	check_command.constprop.141
	mov	r5, r0
	b	.L10819
.L10814:
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	mov	r1, #0
	movw	r3, #386
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	mov	r2, #1
	mov	r0, fp
	str	r1, [sp]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command.constprop.141
	subs	r5, r0, #0
	bne	.L10819
	b	.L11101
.L10906:
	ldrb	r2, [fp, #144]	@ zero_extendqisi2
	ldr	r3, [r4, #8]
	tst	r2, #1
	str	r3, [fp, #60]
	bne	.L10931
	b	.L10896
.L10764:
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
	b	.L10765
.L11117:
	mov	r0, r6
	bl	__memzero
	b	.L10891
.L11075:
	strd	r4, [sp, #48]
	ldr	r4, [sp, #40]
.L11089:
	mvn	r5, #3
	b	.L10819
.L11112:
	cmp	r2, #22
	beq	.L10799
	cmp	r2, #23
	bne	.L10786
	movw	r0, #:lower16:.LC688
	ldr	r1, .L11125+20
	movt	r0, #:upper16:.LC688
	bl	printk
	movw	r1, #:lower16:.LC689
	mov	r0, fp
	movt	r1, #:upper16:.LC689
	bl	send_message
	b	.L10821
.L11076:
	strd	r4, [sp, #32]
	mov	r5, r0
	ldr	r4, [sp, #40]
	ldr	r10, [sp, #44]
	ldr	r9, [sp, #64]
	b	.L10819
.L11111:
	ldrb	r2, [fp, #144]	@ zero_extendqisi2
	mov	r6, #9472
	mov	r3, #0
	movt	r6, 5
	orr	r2, r2, #16
	strb	r2, [fp, #144]
	b	.L10843
.L11124:
	mov	r2, #8448
	ldr	r3, [r6, #40]
	strd	r4, [sp, #48]
	movt	r2, 5
	ldr	r0, [sp, #28]
	ldrd	r4, [sp, #40]
	str	r2, [r6, #28]
	ldr	r2, [sp, #24]
	subs	r1, r3, #32
	lsr	r2, r2, r3
	rsb	r3, r3, #32
	orr	r2, r2, r0, lsl r3
	movpl	r3, r0
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	str	r2, [r6, #32]
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	b	.L10819
.L11078:
	strd	r4, [sp, #32]
	ldr	r4, [sp, #40]
	ldr	r10, [sp, #44]
	ldr	r9, [sp, #64]
.L10890:
	mvn	r5, #4
	b	.L10819
.L11118:
	ldr	r3, [sp, #68]
	lsr	r2, r3, #21
	lsl	r3, r3, #11
	str	r3, [sp, #32]
	str	r2, [sp, #36]
	mov	r2, #2352
	mov	r0, r2
	b	.L10878
.L10865:
	mov	r2, #4352
	ldr	r3, [r6, #40]
	strd	r4, [sp, #48]
	movt	r2, 3
	ldr	r0, [sp, #28]
	mov	r5, #0
	ldr	r4, [sp, #40]
	str	r2, [r6, #28]
	ldr	r2, [sp, #24]
	subs	r1, r3, #32
	lsr	r2, r2, r3
	rsb	r3, r3, #32
	orr	r2, r2, r0, lsl r3
	movpl	r3, r0
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	str	r2, [r6, #32]
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	b	.L10819
.L11113:
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	mov	r1, #36
	mov	r0, r8
	mov	r6, r1
	orr	r3, r3, #16
	strb	r3, [fp, #144]
	bl	__memzero
	mov	r2, #127
	mov	r3, #31
	strb	r2, [r8]
	strb	r3, [r8, #4]
	b	.L10821
.L11123:
	strd	r4, [sp, #48]
	ldrd	r4, [sp, #40]
	b	.L10819
.L10888:
	sub	r3, r3, r0
	mov	r2, #1
	adds	r4, r4, r0
	sub	r9, r9, r0
	str	r3, [fp, #136]
	ldr	r3, [r6, #16]
	adc	r5, r5, r0, asr #31
	str	r0, [r3, #4]
	str	r2, [r6, #4]
	b	.L10889
.L10887:
	ldr	r1, [r6, #16]
	strd	r4, [sp, #32]
	mov	r2, #1
	ldr	r4, [sp, #40]
	ldr	r10, [sp, #44]
	ldr	r9, [sp, #64]
	str	r3, [r1, #4]
	str	r2, [r6, #4]
.L10929:
	ldr	r2, [sp, #32]
	mov	r1, #4352
	ldr	r0, [sp, #36]
	movt	r1, 3
	ldrb	r3, [r8, #24]	@ zero_extendqisi2
	str	r1, [r8, #28]
	lsr	r2, r2, #9
	orr	r2, r2, r0, lsl #23
	orr	r3, r3, #64
	strb	r3, [r8, #24]
	str	r2, [r8, #32]
.L10884:
	ldr	r3, [sp, #72]
	cmp	r3, #248
	bne	.L10890
	ldr	r3, [sp, #68]
	movw	r1, #4500
	mov	r2, #75
	mvn	ip, #0
	mov	r8, #60
	mov	r5, #0
	add	r0, r3, #150
	ldr	r3, [r6]
	mov	r6, #1
	sdiv	r1, r0, r1
	sdiv	lr, r0, r2
	str	r1, [sp, #40]
	mov	r1, r3
	mls	r2, r2, lr, r0
	add	r0, r3, #2064
	strb	r5, [r1], #1
	str	ip, [r3, #1]	@ unaligned
	str	ip, [r1, #4]	@ unaligned
	strh	ip, [r1, #8]	@ unaligned
	sdiv	ip, lr, r8
	ldr	r1, [sp, #40]
	strb	r5, [r3, #11]
	mvn	r5, #4
	strb	r1, [r3, #12]
	mov	r1, #288
	strb	r2, [r3, #14]
	strb	r6, [r3, #15]
	mls	ip, r8, ip, lr
	strb	ip, [r3, #13]
	bl	__memzero
	b	.L10819
.L11121:
	mov	r0, r5
	bl	fsg_lun_fsync_sub
	b	.L10827
.L11077:
	strd	r4, [sp, #32]
	ldr	r4, [sp, #40]
	ldr	r10, [sp, #44]
	ldr	r9, [sp, #64]
	b	.L10884
.L11120:
	strd	r4, [sp, #32]
	ldr	r4, [sp, #40]
	ldr	r10, [sp, #44]
	ldr	r9, [sp, #64]
	b	.L10929
.L10845:
	mov	r3, #9216
	mvn	r6, #21
	movt	r3, 5
	str	r3, [r8, #28]
	b	.L10821
.L11114:
	mvn	ip, #94
	mov	r1, #20
	strb	r6, [r8, #2]
	mvn	lr, #95
	cmp	r3, #0
	strb	r6, [r8, #3]
	strb	r6, [r8, #4]
	strb	ip, [r8, #18]
	mvn	ip, #93
	strb	r1, [r8, #5]
	strb	r5, [r8, #6]
	strb	lr, [r8, #7]
	strb	r5, [r8, #8]
	strb	r5, [r8, #9]
	strb	r5, [r8, #10]
	strb	r5, [r8, #11]
	strb	r6, [r8, #12]
	strb	r5, [r8, #13]
	strb	r5, [r8, #14]
	strb	r6, [r8, #15]
	strb	r1, [r8, #16]
	strb	r5, [r8, #17]
	strb	r5, [r8, #19]
	strb	r5, [r8, #20]
	strb	r5, [r8, #21]
	strb	r5, [r8, #22]
	strb	r6, [r8, #23]
	strb	r5, [r8, #24]
	strb	r5, [r8, #25]
	strb	r6, [r8, #26]
	strb	r1, [r8, #27]
	strb	r5, [r8, #28]
	strb	ip, [r8, #29]
	strb	r5, [r8, #30]
	strb	r5, [r8, #31]
	strb	r5, [r8, #32]
	beq	.L10839
	strb	r5, [r8, #33]
	ldr	r3, [r2, #16]
	mov	r2, #75
	mov	ip, #60
	strb	r6, [r8, #37]
	strb	r0, [r8, #46]
	strb	r1, [r8, #38]
	movw	r1, #4500
	add	r3, r3, #150
	strb	r5, [r8, #39]
	strb	r6, [r8, #40]
	sdiv	lr, r3, r2
	strb	r5, [r8, #41]
	sdiv	r1, r3, r1
	sdiv	r0, lr, ip
	mls	r3, r2, lr, r3
	strb	r1, [r8, #34]
	strb	r5, [r8, #42]
	strb	r5, [r8, #43]
	strb	r3, [r8, #36]
	strb	r5, [r8, #44]
	strb	r5, [r8, #45]
	strb	r5, [r8, #47]
	mls	ip, ip, r0, lr
	strb	ip, [r8, #35]
.L10840:
	mov	r3, #46
	mov	r2, #0
	mov	r5, #48
	strb	r2, [r8]
	strb	r3, [r8, #1]
	b	.L10819
.L11115:
	mov	r0, #2
	mvn	r3, #85
	strb	r5, [r8, #8]
	strb	r5, [r8, #9]
	mov	ip, #60
	movw	lr, #4500
	strb	r0, [r8, #10]
	mov	r6, #20
	strb	r5, [r8, #11]
	strb	r1, [r8, #13]
	mov	r1, #75
	strb	r3, [r8, #14]
	ldr	r3, [r2, #16]
	strb	r5, [r8, #16]
	lsr	r3, r3, r0
	add	r3, r3, #150
	udiv	r0, r3, r1
	udiv	lr, r3, lr
	udiv	r2, r0, ip
	mls	r3, r1, r0, r3
	strb	lr, [r8, #17]
	strb	r3, [r8, #19]
	mls	r2, ip, r2, r0
	strb	r2, [r8, #18]
	b	.L10821
.L11122:
	lsr	r3, r6, #2
	mov	r2, #75
	ldr	r1, [sp, #40]
	mov	lr, #60
	add	r3, r3, #150
	movw	ip, #4500
	mov	r6, #8
	udiv	r0, r3, r2
	strb	r1, [r5, #4]
	udiv	ip, r3, ip
	udiv	r1, r0, lr
	mls	r3, r2, r0, r3
	strb	ip, [r5, #5]
	strb	r3, [r5, #7]
	mls	r1, lr, r1, r0
	strb	r1, [r5, #6]
	b	.L10821
.L10839:
	ldr	r2, [r2, #16]
	strb	r1, [r8, #38]
	strb	r3, [r8, #39]
	strb	r6, [r8, #40]
	lsr	r1, r2, #16
	ubfx	r0, r2, #8, #8
	strb	r1, [r8, #34]
	strb	r2, [r8, #36]
	lsr	r2, r1, #8
	strb	r0, [r8, #35]
	strb	r6, [r8, #37]
	strb	r2, [r8, #33]
	strb	r3, [r8, #41]
	strb	r3, [r8, #42]
	strb	r3, [r8, #43]
	strb	r3, [r8, #44]
	strb	r3, [r8, #45]
	strb	r3, [r8, #46]
	strb	r3, [r8, #47]
	b	.L10840
.L10832:
	mov	r3, #9216
	mvn	r6, #21
	movt	r3, 5
	str	r3, [r1, #28]
	b	.L10821
.L10799:
	movw	r0, #:lower16:.LC688
	ldr	r1, .L11125+24
	movt	r0, #:upper16:.LC688
	bl	printk
	movw	r1, #:lower16:.LC690
	mov	r0, fp
	movt	r1, #:upper16:.LC690
	bl	send_message
	b	.L10821
.L10938:
	strd	r4, [sp, #32]
	ldr	r4, [sp, #40]
	ldr	r10, [sp, #44]
	ldr	r9, [sp, #64]
	b	.L11089
.L11119:
	mov	r0, r4
	mov	r1, r5
	ldrb	r3, [r8, #24]	@ zero_extendqisi2
	lsr	r2, r4, #9
	mov	ip, r10
	ldr	r4, [sp, #40]
	strd	r0, [sp, #32]
	mov	r1, #8448
	ldr	r0, [sp, #36]
	movt	r1, 5
	orr	r3, r3, #64
	ldr	r10, [sp, #44]
	ldr	r9, [sp, #64]
	strb	r3, [r8, #24]
	orr	r2, r2, r0, lsl #23
	str	r1, [r8, #28]
	str	r2, [r8, #32]
	ldr	r3, [r6, #16]
	mov	r2, #1
	str	ip, [r3, #4]
	str	r2, [r6, #4]
	b	.L10884
	.fnend
	.size	fsg_main_thread, .-fsg_main_thread
	.align	2
	.global	usb_diag_open
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_open, %function
usb_diag_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r5, #:lower16:.LANCHOR0
	strd	r6, [sp, #8]
	movt	r5, #:upper16:.LANCHOR0
	mov	r6, r0
	ldr	r0, .L11141
	strd	r8, [sp, #16]
	mov	r7, r1
	str	r10, [sp, #24]
	mov	r8, r2
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5]
	mov	r9, r0
	cmp	r5, r4
	beq	.L11128
	sub	r4, r4, #4
	b	.L11130
.L11139:
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L11128
.L11130:
	mov	r0, r6
	ldr	r1, [r4]
	bl	strcmp
	cmp	r0, #0
	bne	.L11139
	mov	r1, r9
	ldr	r0, .L11141
	bl	_raw_spin_unlock_irqrestore
.L11132:
	str	r6, [r4]
	ldr	r0, .L11141
	str	r8, [r4, #12]
	str	r7, [r4, #16]
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:.LANCHOR0
	mov	r6, r0
	ldr	r1, [r5, #4]
	add	r0, r4, #4
	movt	r2, #:upper16:.LANCHOR0
	bl	__list_add
	mov	r1, r6
	ldr	r0, .L11141
	bl	_raw_spin_unlock_irqrestore
.L11127:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11128:
	ldr	r0, .L11141
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L11140
	mov	r2, #24
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	bne	.L11132
	mvn	r4, #11
	b	.L11127
.L11140:
	mov	r4, #16
	b	.L11132
.L11142:
	.align	2
.L11141:
	.word	.LANCHOR1+2648
	.fnend
	.size	usb_diag_open, .-usb_diag_open
	.align	2
	.global	usb_diag_close
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_close, %function
usb_diag_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, #0
	ldr	r0, .L11149
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	str	r5, [r4, #12]
	add	r0, r4, #4
	str	r5, [r4, #16]
	bl	list_del
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r3, [r2, #2736]!
	cmp	r3, r2
	beq	.L11144
	sub	r3, r3, #140
.L11146:
	ldr	r1, [r3, #124]
	cmp	r1, r4
	streq	r5, [r3, #124]
	ldr	r3, [r3, #140]
	cmp	r3, r2
	sub	r3, r3, #140
	bne	.L11146
.L11144:
	mov	r0, r4
	bl	kfree
	ldrd	r4, [sp]
	mov	r1, r6
	ldr	r0, .L11149
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L11150:
	.align	2
.L11149:
	.word	.LANCHOR1+2648
	.fnend
	.size	usb_diag_close, .-usb_diag_close
	.align	2
	.global	usb_diag_alloc_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_alloc_req, %function
usb_diag_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #20]
	.pad #4
	sub	sp, sp, #4
	cmp	r4, #0
	beq	.L11158
	add	r10, r4, #108
	mov	r6, r1
	mov	r0, r10
	mov	r9, r2
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	mov	r0, r4
	bl	free_reqs
	cmp	r6, #0
	ble	.L11153
	movw	r7, #:lower16:diag_write_complete
	mov	r5, #0
	movt	r7, #:upper16:diag_write_complete
	add	r8, r4, #100
	b	.L11155
.L11168:
	str	r7, [r3, #28]
	ldr	r1, [r4, #104]
	bl	__list_add
	cmp	r6, r5
	beq	.L11153
.L11155:
	ldr	r0, [r4, #88]
	mov	r1, #32
	add	r5, r5, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r8
	add	r0, r3, #36
	bne	.L11168
.L11154:
	mov	r0, r4
	bl	free_reqs
	mov	r0, r10
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #11
.L11151:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11153:
	cmp	r9, #0
	ble	.L11156
	movw	r6, #:lower16:diag_read_complete
	mov	r5, #0
	movt	r6, #:upper16:diag_read_complete
	add	r7, r4, #92
	b	.L11157
.L11169:
	str	r6, [r3, #28]
	ldr	r1, [r4, #96]
	bl	__list_add
	cmp	r9, r5
	beq	.L11156
.L11157:
	ldr	r0, [r4, #84]
	mov	r1, #32
	add	r5, r5, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r7
	add	r0, r3, #36
	bne	.L11169
	b	.L11154
.L11156:
	mov	r0, r10
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L11151
.L11158:
	mvn	r0, #18
	b	.L11151
	.fnend
	.size	usb_diag_alloc_req, .-usb_diag_alloc_req
	.align	2
	.global	usb_diag_read
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_read, %function
usb_diag_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #20]
	cmp	r4, #0
	beq	.L11174
	add	r8, r4, #108
	mov	r6, r1
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	mov	r10, r0
	cmp	r3, #0
	beq	.L11180
	ldr	r5, [r4, #92]
	add	r9, r4, #92
	cmp	r9, r5
	beq	.L11181
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del
	mov	r1, r10
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6]
	mov	r1, r7
	mov	r2, #32
	str	r3, [r5, #-36]
	ldr	r3, [r6, #4]
	str	r3, [r5, #-32]
	str	r6, [r5, #-4]
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L11182
.L11170:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11182:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r2, r9
	ldr	r1, [r4, #96]
	mov	r0, r5
	bl	__list_add
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, .L11183
	ldr	r0, .L11183+4
	bl	___ratelimit
	cmp	r0, #0
	mvneq	r0, #4
	beq	.L11170
	ldr	r3, [r4, #116]
	movw	r1, #:lower16:.LC694
	movt	r1, #:upper16:.LC694
	ldr	r2, .L11183
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mvn	r0, #4
	b	.L11170
.L11174:
	mvn	r0, #18
	b	.L11170
.L11180:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L11170
.L11181:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #116]
	movw	r1, #:lower16:.LC693
	movt	r1, #:upper16:.LC693
	ldr	r2, .L11183
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mvn	r0, #10
	b	.L11170
.L11184:
	.align	2
.L11183:
	.word	.LANCHOR3-2320
	.word	.LANCHOR4-2208
	.fnend
	.size	usb_diag_read, .-usb_diag_read
	.align	2
	.global	usb_diag_write
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_write, %function
usb_diag_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #20]
	cmp	r4, #0
	beq	.L11191
	add	r8, r4, #108
	mov	r6, r1
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	mov	r10, r0
	cmp	r3, #0
	beq	.L11196
	ldr	r5, [r4, #100]
	add	r9, r4, #100
	cmp	r9, r5
	beq	.L11197
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del
	mov	r1, r10
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6]
	mov	r1, r7
	mov	r2, #32
	str	r3, [r5, #-36]
	ldr	r3, [r6, #4]
	str	r3, [r5, #-32]
	str	r6, [r5, #-4]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L11198
	ldr	r2, [r4, #128]
	ldr	r3, [r4, #136]
	add	r2, r2, #1
	add	r3, r3, #1
	str	r2, [r4, #128]
	str	r3, [r4, #136]
.L11185:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11191:
	mvn	r0, #18
	b	.L11185
.L11196:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L11185
.L11198:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r2, r9
	ldr	r1, [r4, #104]
	mov	r0, r5
	bl	__list_add
	ldr	r1, .L11199
	ldr	r0, .L11199+4
	bl	___ratelimit
	cmp	r0, #0
	beq	.L11190
	ldr	r3, [r4, #116]
	movw	r1, #:lower16:.LC694
	movt	r1, #:upper16:.LC694
	ldr	r2, .L11199
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L11190:
	mov	r0, r8
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L11185
.L11197:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #116]
	movw	r1, #:lower16:.LC693
	movt	r1, #:upper16:.LC693
	ldr	r2, .L11199
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mvn	r0, #10
	b	.L11185
.L11200:
	.align	2
.L11199:
	.word	.LANCHOR3-2304
	.word	.LANCHOR4-2184
	.fnend
	.size	usb_diag_write, .-usb_diag_write
	.align	2
	.global	diag_function_add
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_add, %function
diag_function_add:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR0
	movt	r5, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r5]
	cmp	r5, r4
	beq	.L11202
	mov	r6, r1
	mov	r8, r2
	sub	r4, r4, #4
	b	.L11204
.L11216:
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L11202
.L11204:
	mov	r0, r6
	ldr	r1, [r4]
	bl	strcmp
	cmp	r0, #0
	bne	.L11216
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L11217
	mov	r2, #148
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L11218
.L11206:
	movw	r3, #:lower16:.LANCHOR1
	add	r6, r5, #140
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, r6
	add	r2, r3, #2736
	ldr	r1, [r3, #2740]
	bl	__list_add
	str	r8, [r5, #120]
	ldr	r3, .L11219
	movw	ip, #:lower16:diag_function_bind
	str	r4, [r5, #124]
	ldr	r2, [r7, #24]
	movt	ip, #:upper16:diag_function_bind
	movw	r1, #:lower16:diag_function_unbind
	movw	r0, #:lower16:diag_function_set_alt
	movt	r1, #:upper16:diag_function_unbind
	movt	r0, #:upper16:diag_function_set_alt
	mov	lr, #0
	str	r2, [r5, #116]
	ldr	r4, [r4]
	movw	r2, #:lower16:diag_function_disable
	movt	r2, #:upper16:diag_function_disable
	str	r3, [r5, #16]
	add	r3, r3, #40
	str	r4, [r5]
	str	r3, [r5, #8]
	add	r3, r5, #100
	str	ip, [r5, #32]
	add	ip, r5, #92
	str	r1, [r5, #36]
	mov	r1, r5
	str	r0, [r5, #40]
	mov	r0, r7
	str	r2, [r5, #48]
	str	ip, [r5, #92]
	str	ip, [r5, #96]
	str	r3, [r5, #100]
	str	r3, [r5, #104]
	str	lr, [r5, #108]
	bl	usb_add_function
	subs	r4, r0, #0
	beq	.L11201
	ldr	r3, [r7, #24]
	movw	r1, #:lower16:.LC695
	movt	r1, #:upper16:.LC695
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	mov	r0, r6
	bl	list_del
	mov	r0, r5
	bl	kfree
.L11201:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11202:
	ldr	r3, [r7, #24]
	movw	r1, #:lower16:.LC696
	mvn	r4, #18
	movt	r1, #:upper16:.LC696
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	b	.L11201
.L11217:
	mov	r5, #16
	b	.L11206
.L11218:
	mvn	r4, #11
	b	.L11201
.L11220:
	.align	2
.L11219:
	.word	.LANCHOR0+1828
	.fnend
	.size	diag_function_add, .-diag_function_add
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_bind_config, %function
diag_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r2, .L11242
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:__stack_chk_guard
	mov	r8, r1
	strd	r10, [sp, #24]
	movt	r9, #:upper16:__stack_chk_guard
	str	lr, [sp, #32]
	ldr	r3, [r3, #2228]
	.pad #44
	sub	sp, sp, #44
	ldr	r0, [r9]
	ldr	r1, [r1, #24]
	cmp	r3, r2
	sub	r5, r3, #520
	str	r0, [sp, #36]
	bne	.L11224
	b	.L11222
.L11239:
	ldr	r3, [r5, #520]
	cmp	r3, r2
	sub	r5, r3, #520
	beq	.L11222
.L11224:
	ldr	r3, [r3, #-512]
	cmp	r1, r3
	bne	.L11239
.L11222:
	mov	r2, #32
	ldr	r1, .L11242+4
	add	r0, sp, #4
	bl	strlcpy
	add	r0, sp, #4
	movw	r6, #:lower16:.LC326
	bl	strim
	movw	r10, #:lower16:usb_diag_update_pid_and_serial_num
	movt	r6, #:upper16:.LC326
	str	r0, [sp]
	movt	r10, #:upper16:usb_diag_update_pid_and_serial_num
	mov	r4, #0
	mvn	r7, #0
	b	.L11225
.L11228:
	mov	r1, r6
	mov	r0, sp
	bl	strsep
	cmp	r4, #0
	mov	fp, r0
	movne	r2, #0
	bne	.L11226
	ldr	r2, [r5, #44]
	cmp	r2, #0
	beq	.L11231
	ldr	r2, [r2]
	cmp	r2, #0
	moveq	r2, r10
.L11226:
	cmp	fp, #0
	beq	.L11227
	mov	r1, fp
	mov	r0, r8
	bl	diag_function_add
	subs	r7, r0, #0
	bne	.L11240
.L11227:
	ldr	r0, [sp]
	add	r4, r4, #1
.L11225:
	cmp	r0, #0
	bne	.L11228
	ldr	r2, [sp, #36]
	mov	r0, r7
	ldr	r3, [r9]
	cmp	r2, r3
	bne	.L11241
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11231:
	movw	r2, #:lower16:usb_diag_update_pid_and_serial_num
	movt	r2, #:upper16:usb_diag_update_pid_and_serial_num
	b	.L11226
.L11240:
	movw	r0, #:lower16:.LC697
	mov	r2, fp
	ldr	r1, .L11242+8
	movt	r0, #:upper16:.LC697
	bl	printk
	b	.L11227
.L11241:
	bl	__stack_chk_fail
.L11243:
	.align	2
.L11242:
	.word	.LANCHOR1+2228
	.word	.LANCHOR1+2812
	.word	.LANCHOR3-2288
	.fnend
	.size	diag_function_bind_config, .-diag_function_bind_config
	.align	2
	.global	send_sps_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	send_sps_req, %function
send_sps_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r1, #32
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
	ldr	r3, [r0, #8]
	ldr	r2, [r6, #84]
	ldr	r3, [r3, #8]
	ldr	r7, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L11253
	movw	r0, #:lower16:.LC361
	ldr	r1, [r7, #28]
	movt	r0, #:upper16:.LC361
	bl	strcmp
	cmp	r0, #0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #4024]
	beq	.L11254
	bic	r3, r3, #65536
	mov	r2, #0
	bic	r3, r3, #96
	orr	r3, r3, #65536
	str	r2, [r5, #4]
	orr	r3, r3, #32
.L11248:
	str	r3, [r5, #52]
	mov	r1, r5
	mov	r0, r4
	str	r5, [r6, #96]
	ldr	r3, [r4, #8]
	mov	r2, #32
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L11255
.L11244:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11254:
	mov	r2, #32768
	orr	r3, r3, #1312
	str	r2, [r5, #4]
	b	.L11248
.L11255:
	movw	r0, #:lower16:.LC699
	movt	r0, #:upper16:.LC699
	bl	printk
	mvn	r0, #4
	b	.L11244
.L11253:
	movw	r0, #:lower16:.LC698
	movt	r0, #:upper16:.LC698
	bl	printk
	mvn	r0, #11
	b	.L11244
	.fnend
	.size	send_sps_req, .-send_sps_req
	.align	2
	.global	init_data
	.syntax unified
	.arm
	.fpu softvfp
	.type	init_data, %function
init_data:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movw	r0, #:lower16:.LC361
	str	lr, [sp, #4]
	ldr	r3, [r4]
	movt	r0, #:upper16:.LC361
	ldr	r3, [r3, #84]
	ldr	r3, [r3]
	ldr	r1, [r3, #28]
	bl	strcmp
	cmp	r0, #0
	movne	r4, #0
	beq	.L11263
.L11256:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L11263:
	mov	r0, r4
	bl	msm_ep_config
	subs	r4, r0, #0
	beq	.L11256
	movw	r0, #:lower16:.LC700
	movt	r0, #:upper16:.LC700
	bl	printk
	b	.L11256
	.fnend
	.size	init_data, .-init_data
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_connect_work, %function
usb_qdss_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	ldr	r0, [r0, #-48]
	bl	init_data
	subs	r3, r0, #0
	movwne	r0, #:lower16:.LC701
	movtne	r0, #:upper16:.LC701
	bne	.L11277
	ldr	r0, [r4, #-72]
	mov	r2, #1
	movw	r5, #:lower16:.LANCHOR1
	mov	r1, r2
	ldr	r9, [r4, #-48]
	movt	r5, #:upper16:.LANCHOR1
	ldr	r6, [r0]
	ldr	r0, [r6, #28]
	bl	usb_bam_get_connection_idx
	uxtb	r7, r0
	ldr	r1, .L11281
	mov	r0, r7
	bl	usb_bam_connect
	movw	r3, #:lower16:kmalloc_caches
	mov	r8, r0
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5, #4036]
	beq	.L11267
	mov	r2, #16
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5, #4036]
	beq	.L11278
.L11267:
	ldr	r0, [r6, #28]
	bl	usb_bam_set_qdss_core
	ldr	r3, .L11281+4
	mov	r1, #0
	mov	r0, r7
	ldr	r2, [r5, #4036]
	stm	sp, {r1, r2}
	add	r1, r3, #4
	sub	r2, r3, #4
	bl	get_bam2bam_connection_info
	movw	r0, #:lower16:.LC361
	ldr	r1, [r6, #28]
	movt	r0, #:upper16:.LC361
	bl	strcmp
	cmp	r0, #0
	beq	.L11279
.L11269:
	cmp	r8, #0
	bne	.L11268
	ldr	r5, [r4, #-32]
	cmp	r5, #0
	beq	.L11271
	sub	r3, r4, #44
	mov	r2, r8
	ldr	r0, [r4, #-28]
	mov	r1, r8
	blx	r5
.L11271:
	ldr	r0, [r4, #-48]
	bl	send_sps_req
	cmp	r0, #0
	bne	.L11280
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L11279:
	ldr	r2, [r5, #4036]
	mov	r0, r9
	ldrb	r3, [r5, #4024]	@ zero_extendqisi2
	ldmib	r2, {r1, r2}
	bl	msm_data_fifo_config
	b	.L11269
.L11278:
	movw	r0, #:lower16:.LC702
	movt	r0, #:upper16:.LC702
	bl	printk
.L11268:
	movw	r0, #:lower16:.LC703
	movt	r0, #:upper16:.LC703
.L11277:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk
.L11280:
	movw	r0, #:lower16:.LC704
	movt	r0, #:upper16:.LC704
	b	.L11277
.L11282:
	.align	2
.L11281:
	.word	.LANCHOR1+4024
	.word	.LANCHOR1+4028
	.fnend
	.size	usb_qdss_connect_work, .-usb_qdss_connect_work
	.align	2
	.global	uninit_data
	.syntax unified
	.arm
	.fpu softvfp
	.type	uninit_data, %function
uninit_data:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC705
	str	r6, [sp, #8]
	movt	r0, #:upper16:.LC705
	str	lr, [sp, #12]
	ldr	r3, [r4]
	ldr	r3, [r3, #84]
	ldr	r5, [r3]
	bl	printk
	movw	r0, #:lower16:.LC361
	movt	r0, #:upper16:.LC361
	ldr	r1, [r5, #28]
	bl	strcmp
	cmp	r0, #0
	movne	r4, #0
	beq	.L11290
.L11283:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11290:
	mov	r0, r4
	bl	msm_ep_unconfig
	subs	r4, r0, #0
	beq	.L11283
	movw	r0, #:lower16:.LC706
	movt	r0, #:upper16:.LC706
	bl	printk
	b	.L11283
	.fnend
	.size	uninit_data, .-uninit_data
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_disconnect_work, %function
usb_qdss_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r0, #-64]
	bl	uninit_data
	cmp	r0, #0
	bne	.L11303
.L11292:
	ldr	r5, [r4, #-48]
	cmp	r5, #0
	beq	.L11291
	mov	r3, #0
	ldr	r0, [r4, #-44]
	mov	r1, #1
	mov	r2, r3
	blx	r5
	ldr	r0, [r4, #-88]
	mov	r2, #1
	mov	r3, #0
	mov	r1, r2
	ldr	r0, [r0]
	ldr	r0, [r0, #28]
	bl	usb_bam_get_connection_idx
	movw	r3, #:lower16:.LANCHOR1
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #4036]
	bl	kfree
	uxtb	r0, r4
	bl	usb_bam_disconnect_pipe
	cmp	r0, #0
	bne	.L11304
.L11291:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11303:
	movw	r0, #:lower16:.LC707
	ldr	r1, .L11305
	movt	r0, #:upper16:.LC707
	bl	printk
	b	.L11292
.L11304:
	movw	r0, #:lower16:.LC708
	movt	r0, #:upper16:.LC708
	bl	printk
	movw	r0, #:lower16:.LC709
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC709
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L11306:
	.align	2
.L11305:
	.word	.LANCHOR3-2260
	.fnend
	.size	usb_qdss_disconnect_work, .-usb_qdss_disconnect_work
	.align	2
	.global	usb_qdss_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_free_req, %function
usb_qdss_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0, #20]
	cmp	r6, #0
	beq	.L11316
	mov	r7, r6
	ldr	r4, [r7, #148]!
	cmp	r4, r7
	ldr	r5, [r4]
	bne	.L11310
	b	.L11309
.L11313:
	mov	r5, r3
.L11310:
	mov	r0, r4
	sub	r4, r4, #36
	bl	list_del
	ldr	r0, [r6, #104]
	mov	r1, r4
	mov	r4, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r5
	ldr	r3, [r5]
	bne	.L11313
.L11309:
	mov	r7, r6
	ldr	r4, [r7, #140]!
	cmp	r4, r7
	ldr	r5, [r4]
	bne	.L11312
	b	.L11307
.L11314:
	mov	r5, r3
.L11312:
	mov	r0, r4
	sub	r4, r4, #36
	bl	list_del
	ldr	r0, [r6, #100]
	mov	r1, r4
	mov	r4, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r5
	ldr	r3, [r5]
	bne	.L11314
.L11307:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11316:
	movw	r0, #:lower16:.LC710
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC710
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
	.fnend
	.size	usb_qdss_free_req, .-usb_qdss_free_req
	.align	2
	.global	usb_qdss_alloc_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_alloc_req, %function
usb_qdss_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	cmp	r2, #0
	cmpgt	r1, #0
	strd	r6, [sp, #8]
	movle	r5, #1
	movgt	r5, #0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #20]
	cmp	r4, #0
	moveq	r5, #1
	cmp	r5, #0
	bne	.L11328
	movw	r6, #:lower16:qdss_ctrl_write_complete
	mov	r9, r0
	mov	r10, r1
	mov	r8, r2
	movt	r6, #:upper16:qdss_ctrl_write_complete
	add	r7, r4, #148
.L11318:
	ldr	r0, [r4, #104]
	mov	r1, #32
	add	r5, r5, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r7
	add	r0, r3, #36
	beq	.L11329
	str	r6, [r3, #28]
	ldr	r1, [r4, #152]
	bl	__list_add
	cmp	r10, r5
	bgt	.L11318
	movw	r6, #:lower16:qdss_ctrl_read_complete
	mov	r5, #0
	movt	r6, #:upper16:qdss_ctrl_read_complete
	add	r7, r4, #140
.L11323:
	ldr	r0, [r4, #100]
	mov	r1, #32
	add	r5, r5, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r7
	add	r0, r3, #36
	beq	.L11330
	str	r6, [r3, #28]
	ldr	r1, [r4, #144]
	bl	__list_add
	cmp	r8, r5
	bgt	.L11323
	mov	r0, #0
.L11317:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11329:
	movw	r0, #:lower16:.LC712
	movt	r0, #:upper16:.LC712
	bl	printk
.L11321:
	mov	r0, r9
	bl	usb_qdss_free_req
	mvn	r0, #11
	b	.L11317
.L11330:
	movw	r0, #:lower16:.LC713
	movt	r0, #:upper16:.LC713
	bl	printk
	b	.L11321
.L11328:
	movw	r0, #:lower16:.LC711
	movt	r0, #:upper16:.LC711
	bl	printk
	mvn	r0, #18
	b	.L11317
	.fnend
	.size	usb_qdss_alloc_req, .-usb_qdss_alloc_req
	.align	2
	.global	usb_qdss_ctrl_read
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_ctrl_read, %function
usb_qdss_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #20]
	cmp	r4, #0
	beq	.L11335
	add	r8, r4, #188
	mov	r6, r1
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #92]
	mov	r10, r0
	cmp	r3, #0
	beq	.L11340
	ldr	r5, [r4, #140]
	add	r9, r4, #140
	cmp	r9, r5
	beq	.L11341
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del
	mov	r1, r10
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6]
	mov	r1, r7
	mov	r2, #32
	str	r3, [r5, #-36]
	ldr	r3, [r6, #4]
	str	r3, [r5, #-32]
	str	r6, [r5, #-4]
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L11342
.L11331:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11335:
	mvn	r0, #18
	b	.L11331
.L11340:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L11331
.L11342:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r2, r9
	ldr	r1, [r4, #144]
	mov	r0, r5
	bl	__list_add
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC715
	movt	r0, #:upper16:.LC715
	bl	printk
	mvn	r0, #4
	b	.L11331
.L11341:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC714
	movt	r0, #:upper16:.LC714
	bl	printk
	mvn	r0, #10
	b	.L11331
	.fnend
	.size	usb_qdss_ctrl_read, .-usb_qdss_ctrl_read
	.align	2
	.global	usb_qdss_ctrl_write
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_ctrl_write, %function
usb_qdss_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #20]
	cmp	r4, #0
	beq	.L11347
	add	r8, r4, #188
	mov	r6, r1
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #92]
	mov	r10, r0
	cmp	r3, #0
	beq	.L11352
	ldr	r5, [r4, #148]
	add	r9, r4, #148
	cmp	r9, r5
	beq	.L11353
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del
	mov	r1, r10
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6]
	mov	r1, r7
	mov	r2, #32
	str	r3, [r5, #-36]
	ldr	r3, [r6, #4]
	str	r3, [r5, #-32]
	str	r6, [r5, #-4]
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L11354
.L11343:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11347:
	mvn	r0, #18
	b	.L11343
.L11352:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L11343
.L11354:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r2, r9
	ldr	r1, [r4, #152]
	mov	r0, r5
	bl	__list_add
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC715
	movt	r0, #:upper16:.LC715
	bl	printk
	mvn	r0, #4
	b	.L11343
.L11353:
	movw	r0, #:lower16:.LC716
	movt	r0, #:upper16:.LC716
	bl	printk
	mov	r0, r8
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #10
	b	.L11343
	.fnend
	.size	usb_qdss_ctrl_write, .-usb_qdss_ctrl_write
	.align	2
	.global	usb_qdss_open
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_open, %function
usb_qdss_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	subs	r9, r2, #0
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #8
	sub	sp, sp, #8
	beq	.L11369
	movw	r7, #:lower16:.LANCHOR0
	mov	r6, r0
	ldr	r0, .L11375
	movt	r7, #:upper16:.LANCHOR0
	mov	r10, r1
	mov	r5, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #248]!
	mov	r8, r0
	cmp	r4, r5
	sub	r4, r4, #4
	bne	.L11360
	b	.L11358
.L11370:
	ldr	r4, [r4, #4]
	cmp	r4, r5
	sub	r4, r4, #4
	beq	.L11358
.L11360:
	mov	r0, r6
	ldr	r1, [r4]
	bl	strcmp
	cmp	r0, #0
	bne	.L11370
	sub	r5, r4, #112
	str	r5, [r4, #20]
.L11363:
	mov	r3, #1
	mov	r1, r8
	ldr	r0, .L11375
	str	r6, [r4]
	str	r9, [r4, #12]
	str	r10, [r4, #16]
	str	r3, [r4, #24]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #92]
	cmp	r3, #1
	beq	.L11371
.L11355:
	mov	r0, r4
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11358:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L11372
	mov	r2, #200
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L11373
.L11361:
	mov	r1, r8
	ldr	r0, .L11375
	bl	_raw_spin_unlock_irqrestore
	mov	r2, #0
	mov	r1, #10
	movw	r0, #:lower16:.LC228
	mov	r3, r2
	stm	sp, {r2, r6}
	movt	r1, 2
	movt	r0, #:upper16:.LC228
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r5, #196]
	beq	.L11374
	ldr	r0, .L11375
	add	r4, r5, #112
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	ldr	r2, .L11375+4
	add	r0, r5, #116
	ldr	r1, [r7, #252]
	bl	__list_add
	b	.L11363
.L11372:
	mov	r5, #16
	b	.L11361
.L11371:
	add	r2, r5, #156
	ldr	r1, [r5, #196]
	mov	r0, #4
	bl	queue_work_on
	b	.L11355
.L11374:
	mov	r0, r5
	mvn	r4, #11
	bl	kfree
	b	.L11355
.L11373:
	mov	r1, r8
	ldr	r0, .L11375
	mvn	r4, #11
	bl	_raw_spin_unlock_irqrestore
	b	.L11355
.L11369:
	movw	r0, #:lower16:.LC717
	mov	r4, r9
	movt	r0, #:upper16:.LC717
	bl	printk
	b	.L11355
.L11376:
	.align	2
.L11375:
	.word	.LANCHOR1+2628
	.word	.LANCHOR0+248
	.fnend
	.size	usb_qdss_open, .-usb_qdss_open
	.align	2
	.global	usb_qdss_close
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_close, %function
usb_qdss_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	ldr	r0, .L11381
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r5, #20]
	ldr	r3, [r4, #84]
	ldr	r6, [r3]
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r1, [r4, #96]
	ldr	r0, [r4, #108]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r1, [r4, #96]
	ldr	r0, [r4, #108]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r3, #0
	mov	r1, r7
	ldr	r0, .L11381
	str	r3, [r4, #96]
	str	r3, [r5, #24]
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC361
	ldr	r1, [r6, #28]
	movt	r0, #:upper16:.LC361
	bl	strcmp
	cmp	r0, #0
	beq	.L11380
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11380:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	msm_dwc3_restart_usb_session
.L11382:
	.align	2
.L11381:
	.word	.LANCHOR1+2628
	.fnend
	.size	usb_qdss_close, .-usb_qdss_close
	.align	2
	.global	rmnet_smd_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_bind_config, %function
rmnet_smd_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r0, [r3, #36]
	.pad #12
	sub	sp, sp, #12
	cmp	r0, #0
	beq	.L11391
	mov	r2, #456
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L11398
.L11384:
	movw	r2, #:lower16:.LC718
	mov	r5, #0
	movt	r2, #:upper16:.LC718
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	mov	r1, #10
	str	r5, [sp]
	movw	r0, #:lower16:.LC228
	str	r2, [sp, #4]
	mov	r3, r5
	movt	r1, 2
	movt	r0, #:upper16:.LC228
	str	r4, [r6, #2600]
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #388]
	beq	.L11393
	add	r1, r4, #396
	mov	r2, #65024
	str	r5, [r4, #164]
	movw	r0, #:lower16:rmnet_smd_connect_work
	movw	r3, #:lower16:rmnet_smd_disconnect_work
	str	r5, [r4, #168]
	add	ip, r4, #412
	movt	r3, #:upper16:rmnet_smd_disconnect_work
	str	r5, [r4, #172]
	movt	r2, 65535
	movt	r0, #:upper16:rmnet_smd_connect_work
	str	r1, [r4, #396]
	str	r1, [r4, #400]
	movw	r1, #:lower16:rmnet_control_rx_tlet
	add	r9, r4, #108
	str	r5, [r4, #308]
	movt	r1, #:upper16:rmnet_control_rx_tlet
	add	r8, r4, #116
	str	r5, [r4, #372]
	str	r2, [r4, #392]
	str	r0, [r4, #404]
	add	r0, r4, #284
	str	r2, [r4, #408]
	mov	r2, r4
	str	ip, [r4, #412]
	str	ip, [r4, #416]
	str	r3, [r4, #420]
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_control_tx_tlet
	mov	r2, r4
	add	r0, r4, #264
	movt	r1, #:upper16:rmnet_control_tx_tlet
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_data_rx_tlet
	mov	r2, r4
	add	r0, r4, #348
	movt	r1, #:upper16:rmnet_data_rx_tlet
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_data_tx_tlet
	mov	r2, r4
	add	r0, r4, #328
	movt	r1, #:upper16:rmnet_data_tx_tlet
	bl	tasklet_init
	movw	r1, #:lower16:.LC719
	ldr	r2, .L11400
	add	r0, r4, #312
	movt	r1, #:upper16:.LC719
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC720
	ldr	r2, .L11400
	add	r0, r4, #376
	movt	r1, #:upper16:.LC720
	bl	__init_waitqueue_head
	ldr	r3, .L11400+4
	movw	lr, #:lower16:rmnet_smd_ch_probe
	movw	ip, #:lower16:rmnet_smd_bind
	movt	lr, #:upper16:rmnet_smd_ch_probe
	movt	ip, #:upper16:rmnet_smd_bind
	movw	r1, #:lower16:.LC721
	movw	r2, #:lower16:.LC525
	movt	r1, #:upper16:.LC721
	str	r5, [r4, #204]
	movw	r5, #:lower16:rmnet_smd_unbind
	str	lr, [r4, #176]
	add	lr, r3, #8
	movt	r5, #:upper16:rmnet_smd_unbind
	str	ip, [r4, #32]
	movw	ip, #:lower16:rmnet_smd_disable
	movt	r2, #:upper16:.LC525
	stm	r4, {r1, r3}
	movt	ip, #:upper16:rmnet_smd_disable
	add	r3, r3, #28
	str	lr, [r4, #16]
	movw	lr, #:lower16:rmnet_smd_set_alt
	movw	r1, #:lower16:rmnet_smd_setup
	movt	lr, #:upper16:rmnet_smd_set_alt
	mov	r0, r7
	str	r3, [r4, #8]
	add	r7, r4, #124
	add	r3, r4, #156
	str	r5, [r4, #36]
	movt	r1, #:upper16:rmnet_smd_setup
	add	r5, r4, #132
	str	lr, [r4, #40]
	str	ip, [r4, #48]
	add	lr, r4, #140
	add	ip, r4, #148
	str	r1, [r4, #52]
	mov	r1, r4
	str	r9, [r4, #108]
	str	r9, [r4, #112]
	str	r8, [r4, #116]
	str	r8, [r4, #120]
	str	r7, [r4, #124]
	str	r7, [r4, #128]
	str	r5, [r4, #132]
	str	r5, [r4, #136]
	str	lr, [r4, #140]
	str	lr, [r4, #144]
	str	ip, [r4, #148]
	str	ip, [r4, #152]
	str	r3, [r4, #156]
	str	r3, [r4, #160]
	str	r2, [r4, #196]
	bl	usb_add_function
	subs	r5, r0, #0
	beq	.L11399
.L11387:
	ldr	r0, [r4, #388]
	bl	destroy_workqueue
.L11386:
	mov	r0, r4
	bl	kfree
.L11383:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L11399:
	movw	r0, #:lower16:.LC722
	mov	r1, r5
	movt	r0, #:upper16:.LC722
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r6, #2632]
	beq	.L11383
	cmn	r0, #4096
	bhi	.L11383
	ldr	ip, .L11400+8
	movw	r0, #:lower16:.LC159
	mov	r3, r4
	movt	r0, #:upper16:.LC159
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L11390
	cmn	r0, #4096
	bls	.L11383
.L11390:
	ldr	r0, [r6, #2632]
	bl	debugfs_remove
	mov	r3, #0
	str	r3, [r6, #2632]
	b	.L11383
.L11391:
	mov	r4, #16
	b	.L11384
.L11393:
	mvn	r5, #11
	b	.L11386
.L11398:
	mvn	r5, #11
	b	.L11383
.L11401:
	.align	2
.L11400:
	.word	.LANCHOR1+4040
	.word	.LANCHOR4-2160
	.word	.LANCHOR3-2232
	.fnend
	.size	rmnet_smd_bind_config, .-rmnet_smd_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_function_bind_config, %function
rmnet_smd_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r1
	b	rmnet_smd_bind_config
	.fnend
	.size	rmnet_smd_function_bind_config, .-rmnet_smd_function_bind_config
	.align	2
	.global	rmnet_sdio_function_add
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_function_add, %function
rmnet_sdio_function_add:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r0, [r3, #36]
	.pad #12
	sub	sp, sp, #12
	cmp	r0, #0
	beq	.L11408
	mov	r2, #376
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L11412
.L11404:
	movw	r2, #:lower16:.LC718
	mov	r5, #0
	movt	r2, #:upper16:.LC718
	mov	r1, #10
	movw	r0, #:lower16:.LC228
	mov	r3, r5
	str	r5, [sp]
	str	r2, [sp, #4]
	movt	r1, 2
	movt	r0, #:upper16:.LC228
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #200]
	beq	.L11410
	movw	r0, #:lower16:rmnet_sdio_disconnect_work
	add	r8, r4, #208
	str	r5, [r4, #188]
	add	lr, r4, #224
	movt	r0, #:upper16:rmnet_sdio_disconnect_work
	str	r5, [r4, #192]
	mov	r6, #65024
	movw	ip, #:lower16:rmnet_sdio_set_modem_cbits_w
	str	r5, [r4, #196]
	movw	r2, #:lower16:rmnet_sdio_control_rx_work
	movw	r3, #:lower16:rmnet_sdio_data_rx_work
	str	r8, [r4, #208]
	movw	r1, #:lower16:rmnet_open_sdio_work
	movt	r6, 65535
	str	r8, [r4, #212]
	movt	ip, #:upper16:rmnet_sdio_set_modem_cbits_w
	add	r8, r4, #240
	movt	r2, #:upper16:rmnet_sdio_control_rx_work
	movt	r3, #:upper16:rmnet_sdio_data_rx_work
	str	r6, [r4, #204]
	movt	r1, #:upper16:rmnet_open_sdio_work
	str	r0, [r4, #216]
	add	r0, r4, #340
	str	lr, [r4, #224]
	add	r9, r4, #108
	str	lr, [r4, #228]
	add	lr, r4, #256
	str	r6, [r4, #220]
	str	r2, [r4, #232]
	mov	r2, r5
	str	r6, [r4, #236]
	str	r8, [r4, #240]
	str	r8, [r4, #244]
	movw	r8, #:lower16:rmnet_sdio_bind
	str	r3, [r4, #248]
	mov	r3, r5
	movt	r8, #:upper16:rmnet_sdio_bind
	str	r6, [r4, #252]
	str	lr, [r4, #256]
	str	lr, [r4, #260]
	str	r1, [r4, #264]
	mov	r1, r5
	str	r6, [r4, #336]
	str	r0, [r4, #340]
	str	r0, [r4, #344]
	add	r0, r4, #268
	str	ip, [r4, #348]
	bl	init_timer_key
	ldr	r3, .L11414
	movw	r1, #:lower16:.LC723
	mov	r0, r7
	movt	r1, #:upper16:.LC723
	movw	r7, #:lower16:rmnet_sdio_set_alt
	movt	r7, #:upper16:rmnet_sdio_set_alt
	movw	lr, #:lower16:rmnet_sdio_unbind
	movt	lr, #:upper16:rmnet_sdio_unbind
	movw	ip, #:lower16:delayed_work_timer_fn
	stm	r4, {r1, r3}
	movw	r1, #:lower16:rmnet_sdio_setup
	movw	r2, #:lower16:rmnet_close_sdio_work
	movt	r1, #:upper16:rmnet_sdio_setup
	movt	ip, #:upper16:delayed_work_timer_fn
	str	r8, [r4, #32]
	str	r7, [r4, #40]
	add	r7, r3, #8
	add	r3, r3, #28
	str	lr, [r4, #36]
	movw	lr, #:lower16:rmnet_sdio_disable
	movt	r2, #:upper16:rmnet_close_sdio_work
	movt	lr, #:upper16:rmnet_sdio_disable
	str	r3, [r4, #8]
	add	r3, r4, #132
	str	r1, [r4, #52]
	movw	r1, #:lower16:rmnet_sdio_suspend
	add	r8, r4, #252
	str	r7, [r4, #16]
	movt	r1, #:upper16:rmnet_sdio_suspend
	add	r7, r4, #120
	str	lr, [r4, #48]
	add	lr, r4, #308
	str	r1, [r4, #56]
	add	r1, r4, #160
	str	r9, [r4, #108]
	str	r7, [r4, #120]
	str	r7, [r4, #124]
	add	r7, r4, #144
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	add	r3, r4, #172
	str	r9, [r4, #112]
	str	r7, [r4, #144]
	str	r7, [r4, #148]
	str	r5, [r4, #152]
	str	r5, [r4, #156]
	str	r1, [r4, #160]
	str	r1, [r4, #164]
	mov	r1, r4
	str	r3, [r4, #172]
	str	r3, [r4, #176]
	str	r5, [r4, #180]
	str	r5, [r4, #184]
	str	ip, [r4, #284]
	str	r8, [r4, #288]
	str	r6, [r4, #304]
	str	lr, [r4, #308]
	str	lr, [r4, #312]
	str	r2, [r4, #316]
	bl	usb_add_function
	subs	r5, r0, #0
	beq	.L11413
.L11407:
	ldr	r0, [r4, #200]
	bl	destroy_workqueue
.L11406:
	mov	r0, r4
	bl	kfree
.L11403:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L11413:
	movw	r0, #:lower16:.LC724
	mov	r1, r5
	movt	r0, #:upper16:.LC724
	bl	debugfs_create_dir
	cmn	r0, #4096
	mov	r2, r0
	str	r0, [r4, #352]
	bhi	.L11403
	ldr	ip, .L11414+4
	movw	r0, #:lower16:.LC159
	mov	r3, r4
	mov	r1, #292
	movt	r0, #:upper16:.LC159
	str	ip, [sp]
	bl	debugfs_create_file
	b	.L11403
.L11408:
	mov	r4, #16
	b	.L11404
.L11410:
	mvn	r5, #11
	b	.L11406
.L11412:
	mvn	r5, #11
	b	.L11403
.L11415:
	.align	2
.L11414:
	.word	.LANCHOR4-2112
	.word	.LANCHOR3-2124
	.fnend
	.size	rmnet_sdio_function_add, .-rmnet_sdio_function_add
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_function_bind_config, %function
rmnet_sdio_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r1
	b	rmnet_sdio_function_add
	.fnend
	.size	rmnet_sdio_function_bind_config, .-rmnet_sdio_function_bind_config
	.align	2
	.global	frmnet_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_free_req, %function
frmnet_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	frmnet_free_req, .-frmnet_free_req
	.align	2
	.global	audio_source_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_bind_config, %function
audio_source_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mvn	r2, #0
	mov	r3, #0
	strd	r6, [sp, #8]
	mov	r5, r1
	mov	r7, r0
	str	r8, [sp, #16]
	mov	r0, r2
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	add	ip, sp, #8
	str	r2, [r1]
	str	r2, [r1, #4]
	mov	r2, r3
	mov	r1, r3
	str	ip, [sp]
	bl	snd_card_create
	subs	r4, r0, #0
	beq	.L11427
.L11419:
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11427:
	ldr	r3, [r7, #24]
	add	r6, sp, #12
	movw	r1, #:lower16:.LC725
	ldr	lr, [sp, #8]
	mov	r2, r4
	movt	r1, #:upper16:.LC725
	ldr	ip, [r3]
	mov	r3, #1
	mov	r0, lr
	add	ip, ip, #32
	str	ip, [lr, #496]
	stm	sp, {r4, r6}
	movw	r6, #:lower16:.LANCHOR4
	bl	snd_pcm_new
	subs	r4, r0, #0
	movtne	r6, #:upper16:.LANCHOR4
	bne	.L11423
	ldr	r3, [sp, #12]
	movt	r6, #:upper16:.LANCHOR4
	movw	r1, #:lower16:.LC726
	sub	r8, r6, #2064
	movt	r1, #:upper16:.LC726
	mov	r2, #80
	str	r4, [r3, #16]
	add	r0, r3, #88
	str	r8, [r3, #272]
	str	r3, [r6, #-1976]
	bl	strlcpy
	ldr	r0, [sp, #12]
	mov	r1, r4
	sub	r2, r6, #1904
	bl	snd_pcm_set_ops
	mov	ip, #65536
	mov	r3, r4
	ldr	r0, [sp, #12]
	mov	r2, r4
	mov	r1, #2
	str	ip, [sp]
	bl	snd_pcm_lib_preallocate_pages_for_all
	ldr	r0, [sp, #8]
	movw	r1, #:lower16:.LC727
	mov	r2, #16
	movt	r1, #:upper16:.LC727
	add	r0, r0, #20
	bl	strlcpy
	ldr	r0, [sp, #8]
	mov	r2, #32
	add	r1, r0, #20
	add	r0, r0, #36
	bl	strlcpy
	ldr	r0, [sp, #8]
	movw	r1, #:lower16:.LC728
	mov	r2, #80
	movt	r1, #:upper16:.LC728
	add	r0, r0, #68
	bl	strlcpy
	ldr	r0, [sp, #8]
	bl	snd_card_register
	subs	r4, r0, #0
	bne	.L11423
	mov	r1, r8
	mov	r0, r7
	bl	usb_add_function
	subs	r4, r0, #0
	beq	.L11428
.L11421:
.L11422:
.L11423:
	ldr	r0, [r6, #-1980]
	bl	snd_card_free
	b	.L11419
.L11428:
	ldrd	r2, [sp, #8]
	ldr	r1, [r3]
	ldr	r1, [r1]
	str	r1, [r5]
	ldr	r3, [r3, #12]
	str	r3, [r5, #4]
	str	r2, [r6, #-1980]
	b	.L11419
	.fnend
	.size	audio_source_bind_config, .-audio_source_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_function_bind_config, %function
audio_source_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, r1
	ldr	r1, [r0, #4]
	mov	r0, r3
	b	audio_source_bind_config
	.fnend
	.size	audio_source_function_bind_config, .-audio_source_function_bind_config
	.align	2
	.global	gs_alloc_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_alloc_req, %function
gs_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r6, r1
	mov	r1, r2
	str	r8, [sp, #16]
	mov	r7, r0
	str	lr, [sp, #20]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L11430
	mov	r1, r5
	mov	r0, r6
	str	r6, [r4, #4]
	bl	__kmalloc
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L11436
.L11430:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11436:
	ldr	r2, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L11430
	.fnend
	.size	gs_alloc_req, .-gs_alloc_req
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_alloc_requests.constprop.137, %function
gs_alloc_requests.constprop.137:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	subs	r5, r3, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	beq	.L11444
	ldr	r8, [r5]
	rsb	r8, r8, #8
	cmp	r8, #0
	ble	.L11439
.L11438:
	mov	r9, r2
	mov	r6, r1
	mov	r7, r0
	mov	r4, #0
	b	.L11443
.L11440:
	str	r9, [ip, #28]
	ldr	r1, [r6, #4]
	bl	__list_add
	cmp	r5, #0
	beq	.L11442
	ldr	r3, [r5]
	add	r3, r3, #1
	str	r3, [r5]
.L11442:
	cmp	r4, r8
	bge	.L11439
.L11443:
	mov	r2, #32
	mov	r1, #4096
	mov	r0, r7
	add	r4, r4, #1
	bl	gs_alloc_req
	subs	ip, r0, #0
	mov	r2, r6
	add	r0, ip, #36
	bne	.L11440
	ldr	r3, [r6]
	cmp	r6, r3
	beq	.L11445
.L11439:
	mov	r0, #0
.L11437:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11444:
	mov	r8, #8
	b	.L11438
.L11445:
	mvn	r0, #11
	b	.L11437
	.fnend
	.size	gs_alloc_requests.constprop.137, .-gs_alloc_requests.constprop.137
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_start_io, %function
gs_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	movw	r2, #:lower16:gs_read_complete
	strd	r6, [sp, #8]
	add	r7, r0, #32
	movt	r2, #:upper16:gs_read_complete
	strd	r8, [sp, #16]
	add	r8, r0, #44
	mov	r1, r7
	str	r10, [sp, #24]
	mov	r3, r8
	str	lr, [sp, #28]
	ldr	r0, [r0, #4]
	ldr	r6, [r0, #92]
	mov	r0, r6
	bl	gs_alloc_requests.constprop.137
	subs	r5, r0, #0
	beq	.L11461
.L11451:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11461:
	ldr	r0, [r4, #4]
	add	r9, r4, #76
	add	r10, r4, #88
	movw	r2, #:lower16:gs_write_complete
	mov	r1, r9
	mov	r3, r10
	movt	r2, #:upper16:gs_write_complete
	ldr	r0, [r0, #88]
	bl	gs_alloc_requests.constprop.137
	subs	r5, r0, #0
	bne	.L11462
	mov	r0, r4
	str	r5, [r4, #56]
	bl	gs_start_rx
	ldr	r3, [r4, #4]
	mov	r2, r0
	cmp	r3, #0
	beq	.L11454
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L11454
	cmp	r2, #0
	beq	.L11456
	bl	tty_wakeup
	b	.L11451
.L11462:
	mov	r2, r8
	mov	r1, r7
	mov	r0, r6
	bl	gs_free_requests
	b	.L11451
.L11456:
	mov	r2, r8
	mov	r1, r7
	mov	r0, r6
	mvn	r5, #4
	bl	gs_free_requests
	ldr	r3, [r4, #4]
	mov	r2, r10
	mov	r1, r9
	ldr	r0, [r3, #88]
	bl	gs_free_requests
	b	.L11451
.L11454:
	movw	r0, #:lower16:.LC729
	ldr	r1, .L11463
	mvn	r5, #4
	movt	r0, #:upper16:.LC729
	bl	printk
	b	.L11451
.L11464:
	.align	2
.L11463:
	.word	.LANCHOR3-2016
	.fnend
	.size	gs_start_io, .-gs_start_io
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_open, %function
gs_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	ldr	r6, .L11486
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #20]
	add	r3, r6, #20
	add	r5, r5, r5, lsl #1
	lsl	r5, r5, #3
	add	r6, r6, r5
	add	r5, r5, r3
.L11472:
	mov	r0, r6
	bl	mutex_lock
	ldr	r4, [r5]
	subs	r0, r4, #0
	beq	.L11483
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L11468
	add	r3, r3, #1
	mov	r0, r4
	mov	r5, #0
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irq
	mov	r0, r6
	bl	mutex_unlock
.L11465:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11483:
	mov	r0, r6
	mvn	r5, #18
	bl	mutex_unlock
	b	.L11465
.L11468:
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	mov	r0, r4
	cmp	r3, #0
	bne	.L11469
	mov	r3, #1
	strb	r3, [r4, #16]
	bl	_raw_spin_unlock_irq
	mov	r0, r6
	bl	mutex_unlock
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L11484
.L11471:
	str	r4, [r7, #272]
	ldr	r6, [r4, #4]
	mov	r5, #0
	mov	r3, #1
	str	r7, [r4, #8]
	str	r3, [r4, #12]
	cmp	r6, r5
	strb	r5, [r4, #16]
	beq	.L11478
	mov	r0, r4
	bl	gs_start_io
	ldr	r3, [r6, #116]
	cmp	r3, #0
	beq	.L11478
	mov	r0, r6
	blx	r3
.L11476:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	b	.L11465
.L11469:
	bl	_raw_spin_unlock_irq
	mov	r0, r6
	bl	mutex_unlock
	mov	r0, #1
	bl	msleep
	b	.L11472
.L11478:
	mov	r5, #0
	b	.L11476
.L11484:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #52]
	cmp	r0, #0
	beq	.L11485
	mov	r2, #8192
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	mov	r6, r0
	str	r0, [r4, #96]
	beq	.L11475
.L11474:
	mov	r3, #8192
	mov	r0, r4
	str	r3, [r4, #92]
	str	r6, [r4, #100]
	str	r6, [r4, #104]
	bl	_raw_spin_lock_irq
	b	.L11471
.L11485:
	mov	r3, #16
	mov	r6, r3
	str	r3, [r4, #96]
	b	.L11474
.L11475:
	mov	r0, r4
	mvn	r5, #11
	bl	_raw_spin_lock_irq
	strb	r6, [r4, #16]
	b	.L11476
.L11487:
	.align	2
.L11486:
	.word	.LANCHOR1+3784
	.fnend
	.size	gs_open, .-gs_open
	.align	2
	.global	gs_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_free_req, %function
gs_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	b	frmnet_free_req
	.fnend
	.size	gs_free_req, .-gs_free_req
	.align	2
	.global	gserial_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_setup, %function
gserial_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 88
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:__stack_chk_guard
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:__stack_chk_guard
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	sub	fp, r1, #1
	str	lr, [sp, #32]
	.pad #100
	sub	sp, sp, #100
	cmp	fp, #7
	str	r3, [sp, #20]
	ldr	r3, [r3]
	str	r0, [sp, #28]
	str	r3, [sp, #92]
	bhi	.L11505
	mov	r10, r1
	mov	r1, #0
	mov	r0, r10
	movw	r9, #:lower16:.LANCHOR1
	bl	__alloc_tty_driver
	movt	r9, #:upper16:.LANCHOR1
	cmp	r0, #0
	str	r0, [r9, #3780]
	beq	.L11506
	movw	r2, #:lower16:.LC730
	movw	r3, #:lower16:tty_std_termios
	ldr	r1, .L11528
	movt	r2, #:upper16:.LC730
	movt	r3, #:upper16:tty_std_termios
	ldrd	r6, [r3]
	mov	lr, #3
	str	r2, [r0, #72]
	ldrd	r4, [r3, #32]
	movw	r2, #:lower16:.LC731
	movt	r2, #:upper16:.LC731
	movt	lr, 1
	str	r2, [r0, #76]
	strd	r4, [sp, #8]
	ldrd	r4, [r3, #8]
	str	lr, [r0, #96]
	mov	lr, #14
	strd	r6, [r0, #100]
	ldrd	r6, [r3, #16]
	ldrd	r2, [r3, #24]
	strd	r4, [r0, #108]
	ldrd	r4, [sp, #8]
	strd	r6, [r0, #116]
	movw	r6, #3261
	str	lr, [r0, #144]
	strd	r2, [r0, #124]
	mov	r3, #9600
	str	r6, [r0, #108]
	strd	r4, [r0, #132]
	mov	r5, #0
	str	r3, [r0, #136]
	str	r3, [r0, #140]
	bl	tty_set_operations
	movw	r2, #:lower16:.LC732
	mov	r1, #10
	str	r5, [sp]
	movt	r2, #:upper16:.LC732
	movw	r0, #:lower16:.LC228
	mov	r3, r5
	movt	r1, 2
	str	r2, [sp, #4]
	movt	r0, #:upper16:.LC228
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r9, #2604]
	beq	.L11507
	ldr	r3, .L11528+4
	movw	r2, #:lower16:.LC733
	movw	r1, #:lower16:.LC734
	movt	r2, #:upper16:.LC733
	movt	r1, #:upper16:.LC734
	movw	fp, #:lower16:kmalloc_caches
	movt	fp, #:upper16:kmalloc_caches
	str	r2, [sp, #8]
	add	r8, r3, #256
	mov	r6, r3
	str	r1, [sp, #16]
	str	r3, [sp, #24]
	str	r9, [sp, #32]
	str	r3, [sp, #36]
	b	.L11494
.L11524:
	mov	r2, #144
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L11522
.L11492:
	mov	r9, #0
	mov	r0, r4
	ldr	r1, [sp, #16]
	mov	r2, r8
	add	r7, r5, #1
	str	r9, [r0], #20
	add	r6, r6, #24
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC735
	mov	r2, r8
	add	r0, r4, #108
	movt	r1, #:upper16:.LC735
	bl	__init_waitqueue_head
	mov	r1, #65024
	add	lr, r4, #32
	strb	r5, [r4, #17]
	movt	r1, 65535
	movw	r2, #:lower16:gs_rx_push
	add	r0, r4, #64
	add	ip, r4, #48
	str	lr, [r4, #32]
	str	lr, [r4, #36]
	movt	r2, #:upper16:gs_rx_push
	mov	lr, #8
	strb	r9, [r4, #126]
	cmp	r10, r7
	mov	r9, #9600
	str	r1, [r4, #60]
	add	r1, r4, #76
	str	ip, [r4, #48]
	str	ip, [r4, #52]
	str	r0, [r4, #64]
	str	r0, [r4, #68]
	str	r2, [r4, #72]
	str	r1, [r4, #76]
	str	r1, [r4, #80]
	str	r9, [r4, #120]
	strh	lr, [r4, #124]	@ movhi
	str	r4, [r6, #-4]
	beq	.L11523
	mov	r5, r7
.L11494:
	mov	r0, r6
	mov	r2, r8
	ldr	r1, [sp, #8]
	bl	__mutex_init
	ldr	r0, [fp, #8]
	cmp	r0, #0
	bne	.L11524
	mov	r4, #16
	b	.L11492
.L11523:
	ldr	r9, [sp, #32]
	ldr	r0, [r9, #3780]
	str	r10, [r9, #3776]
	bl	tty_register_driver
	subs	r8, r0, #0
	bne	.L11525
	ldr	r3, [sp, #28]
	movw	r6, #:lower16:.LC737
	mov	r4, r8
	ldr	r10, .L11528+8
	movt	r6, #:upper16:.LC737
	add	r5, r3, #32
.L11497:
	mov	r2, r5
	mov	r1, r4
	ldr	r0, [r9, #3780]
	bl	tty_register_device
	cmn	r0, #4096
	bhi	.L11526
.L11496:
	add	r4, r4, #1
	cmp	r4, r7
	bne	.L11497
	ldr	r10, .L11528+12
	movw	r6, #:lower16:.LC738
	mov	r4, #0
	ldr	r5, [sp, #36]
	movt	r6, #:upper16:.LC738
	str	r8, [sp, #8]
	sub	fp, r10, #8
.L11500:
	mov	r2, r6
	mov	r3, r4
	ldr	r8, [r5, #20]
	mov	r1, #48
	add	r0, sp, #44
	bl	snprintf
	add	r0, sp, #44
	mov	r1, #0
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r9, #3976]
	beq	.L11499
	cmn	r0, #4096
	bhi	.L11499
	movw	r0, #:lower16:.LC739
	mov	r3, r8
	str	fp, [sp]
	mov	r1, #292
	movt	r0, #:upper16:.LC739
	bl	debugfs_create_file
	add	r1, r10, #100
	movw	r0, #:lower16:.LC740
	ldr	r2, [r9, #3976]
	mov	r3, r8
	movt	r0, #:upper16:.LC740
	str	r1, [sp]
	mov	r1, #420
	bl	debugfs_create_file
.L11499:
	add	r4, r4, #1
	add	r5, r5, #24
	cmp	r4, r7
	bne	.L11500
	ldr	r8, [sp, #8]
.L11489:
	ldr	r3, [sp, #20]
	mov	r0, r8
	ldr	r2, [sp, #92]
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L11527
	add	sp, sp, #100
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11507:
	ldr	r3, .L11528+4
	mvn	r8, #11
	str	r3, [sp, #24]
.L11491:
	ldr	r3, [sp, #24]
	add	r5, fp, fp, lsl #1
	ldr	r4, .L11528+16
	add	r5, r3, r5, lsl #3
.L11501:
	ldr	r0, [r5, #20]
	sub	r5, r5, #24
	bl	kfree
	cmp	r4, r5
	bne	.L11501
.L11502:
	ldr	r0, [r9, #2604]
	cmp	r0, #0
	beq	.L11503
	bl	destroy_workqueue
.L11503:
	ldr	r0, [r9, #3780]
	bl	put_tty_driver
	mov	r3, #0
	str	r3, [r9, #3780]
	b	.L11489
.L11526:
	mov	r3, r0
	mov	r2, r4
	mov	r1, r10
	mov	r0, r6
	bl	printk
	b	.L11496
.L11505:
	mvn	r8, #21
	b	.L11489
.L11522:
.L11493:
	cmp	r5, #0
	mvn	r8, #11
	ldr	r9, [sp, #32]
	sub	fp, r5, #1
	bne	.L11491
	b	.L11502
.L11506:
	mvn	r8, #11
	b	.L11489
.L11527:
	bl	__stack_chk_fail
.L11525:
	movw	r0, #:lower16:.LC736
	mov	r2, r8
	ldr	r1, .L11528+8
	movt	r0, #:upper16:.LC736
	mov	fp, r5
	bl	printk
	b	.L11491
.L11529:
	.align	2
.L11528:
	.word	.LANCHOR3-2004
	.word	.LANCHOR1+3784
	.word	.LANCHOR3-1880
	.word	.LANCHOR3-1856
	.word	.LANCHOR1+3760
	.fnend
	.size	gserial_setup, .-gserial_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_function_init, %function
acm_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	mov	r5, r1
	str	lr, [sp, #12]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4, #4]
	beq	.L11532
	mov	r2, #4
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	beq	.L11533
.L11532:
	ldr	r0, [r5]
	mov	r1, #4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	gserial_setup
.L11533:
	ldrd	r4, [sp]
	mvn	r0, #11
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	acm_function_init, .-acm_function_init
	.align	2
	.global	gserial_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_cleanup, %function
gserial_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #3780]
	cmp	r3, #0
	beq	.L11535
	b	gserial_cleanup.part.79
.L11535:
	bx	lr
	.fnend
	.size	gserial_cleanup, .-gserial_cleanup
	.align	2
	.global	gserial_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_connect, %function
gserial_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r3, #3780]
	cmp	r2, #0
	beq	.L11545
	ldr	r2, [r3, #3776]
	cmp	r1, r2
	bcs	.L11545
	ldr	r2, [r0, #88]
	add	r1, r1, r1, lsl #1
	mov	r4, r0
	add	r3, r3, r1, lsl #3
	ldr	ip, [r2, #8]
	mov	r0, r2
	ldr	r6, [r3, #3804]
	ldr	r1, [r2, #28]
	ldr	r3, [ip]
	blx	r3
	subs	r5, r0, #0
	blt	.L11537
	ldr	r3, [r4, #88]
	str	r6, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bge	.L11551
.L11539:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #88]
	mov	r2, #0
	str	r2, [r3]
.L11537:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11551:
	ldr	r3, [r4, #92]
	mov	r0, r6
	str	r6, [r3]
	bl	_raw_spin_lock_irqsave
	str	r6, [r4, #84]
	ldr	r1, [r6, #120]
	mov	r7, r0
	str	r4, [r6, #4]
	str	r1, [r4, #96]
	ldrh	r1, [r6, #124]
	strh	r1, [r4, #100]	@ movhi
	ldrb	r2, [r6, #126]	@ zero_extendqisi2
	strb	r2, [r4, #102]
	ldr	r3, [r6, #12]
	cmp	r3, #0
	bne	.L11552
	ldr	r3, [r4, #120]
	cmp	r3, #0
	beq	.L11542
.L11550:
	mov	r0, r4
	blx	r3
.L11542:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L11537
.L11552:
	mov	r0, r6
	bl	gs_start_io
	ldr	r3, [r4, #116]
	cmp	r3, #0
	bne	.L11550
	b	.L11542
.L11545:
	mvn	r5, #5
	b	.L11537
	.fnend
	.size	gserial_connect, .-gserial_connect
	.align	2
	.global	gserial_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_disconnect, %function
gserial_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #84]
	cmp	r4, #0
	beq	.L11553
	mov	r5, r0
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	ldr	r0, [r5, #96]
	mov	r2, #0
	str	r0, [r4, #120]
	ldrh	r0, [r5, #100]
	strh	r0, [r4, #124]	@ movhi
	ldrb	r1, [r5, #102]	@ zero_extendqisi2
	str	r2, [r4, #4]
	strb	r1, [r4, #126]
	str	r2, [r5, #84]
	ldr	r3, [r4, #12]
	cmp	r3, r2
	bne	.L11555
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L11556
.L11555:
	mov	r2, #1
	add	r0, r4, #108
	mov	r3, #0
	mov	r1, r2
	bl	__wake_up
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L11556
	bl	tty_hangup
.L11556:
	mov	r1, r6
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #92]
	mov	r6, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #92]
	str	r6, [r3]
	ldr	r0, [r5, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #88]
	mov	r0, r4
	str	r6, [r3]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r6, r0
	cmp	r3, #0
	bne	.L11558
	ldrb	r7, [r4, #16]	@ zero_extendqisi2
	cmp	r7, #0
	beq	.L11563
.L11558:
	add	r1, r4, #32
	ldr	r0, [r5, #92]
	mov	r2, #0
	bl	gs_free_requests
	add	r1, r4, #48
	ldr	r0, [r5, #92]
	mov	r2, #0
	bl	gs_free_requests
	add	r1, r4, #76
	ldr	r0, [r5, #88]
	mov	r2, #0
	bl	gs_free_requests
	mov	r3, #0
	mov	r1, r6
	mov	r0, r4
	str	r3, [r4, #40]
	str	r3, [r4, #44]
	str	r3, [r4, #84]
	str	r3, [r4, #88]
	str	r3, [r4, #128]
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L11553:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11563:
	ldr	r0, [r4, #96]
	bl	kfree
	str	r7, [r4, #96]
	b	.L11558
	.fnend
	.size	gserial_disconnect, .-gserial_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_disable, %function
acm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	bl	gserial_disconnect
	ldr	r0, [r4, #152]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #152]
	mov	r2, #0
	str	r2, [r3]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	acm_disable, .-acm_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_set_alt, %function
acm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r2, [r0, #144]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r5, [r3, #24]
	beq	.L11589
	ldrb	r3, [r0, #145]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L11571
	ldr	r2, [r0, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L11572
	bl	gserial_disconnect
	ldr	r2, [r4, #88]
.L11572:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L11573
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L11573
.L11574:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L11578
	ldr	r0, [r5]
	mov	r1, r4
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L11578
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
	mov	r0, r4
	bl	gserial_connect
.L11566:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11573:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L11578
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L11578
	ldr	r2, [r4, #88]
	b	.L11574
.L11589:
	ldr	r2, [r0, #152]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L11568
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #152]
.L11568:
	ldr	r0, [r5]
	mov	r1, r4
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L11571
	ldr	r3, [r4, #152]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	ldr	r3, [r4, #152]
	str	r4, [r3]
	b	.L11566
.L11578:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r5, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L11566
.L11571:
	mvn	r5, #21
	b	.L11566
	.fnend
	.size	acm_set_alt, .-acm_set_alt
	.align	2
	.global	gsdio_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_free_req, %function
gsdio_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	b	frmnet_free_req
	.fnend
	.size	gsdio_free_req, .-gsdio_free_req
	.align	2
	.global	gsdio_alloc_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_alloc_req, %function
gsdio_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r6, r1
	mov	r1, r2
	str	r8, [sp, #16]
	mov	r7, r0
	str	lr, [sp, #20]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L11595
	mov	r1, r5
	mov	r0, r6
	str	r6, [r4, #4]
	bl	__kmalloc
	cmp	r0, #0
	mov	r5, r0
	str	r0, [r4]
	beq	.L11596
.L11591:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11595:
	movw	r0, #:lower16:.LC512
	ldr	r1, .L11597
	movt	r0, #:upper16:.LC512
	bl	printk
	b	.L11591
.L11596:
	movw	r0, #:lower16:.LC513
	ldr	r1, .L11597
	movt	r0, #:upper16:.LC513
	bl	printk
	ldr	r3, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	mov	r4, r5
	ldr	r3, [r3, #12]
	blx	r3
	b	.L11591
.L11598:
	.align	2
.L11597:
	.word	.LANCHOR3-1648
	.fnend
	.size	gsdio_alloc_req, .-gsdio_alloc_req
	.align	2
	.global	gsdio_free_requests
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_free_requests, %function
gsdio_free_requests:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1]
	cmp	r1, r4
	beq	.L11599
	mov	r5, r1
	mov	r6, r0
.L11601:
	mov	r0, r4
	sub	r7, r4, #36
	bl	list_del
	ldr	r0, [r4, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r4, [r5]
	cmp	r5, r4
	bne	.L11601
.L11599:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	gsdio_free_requests, .-gsdio_free_requests
	.set	gsmd_free_requests,gsdio_free_requests
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_notify, %function
gsmd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r1, r1, #1
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r5, [r0, #72]
	cmp	r1, #3
	ldrls	pc, [pc, r1, asl #2]
	b	.L11604
.L11607:
	.word	.L11606
	.word	.L11608
	.word	.L11609
	.word	.L11610
.L11610:
	ldr	r0, [r5]
	bl	smd_tiocmget
	ands	r1, r0, #128
	movne	r1, #8
	tst	r0, #64
	orrne	r1, r1, #1
	tst	r0, #256
	ldr	r0, [r4, #68]
	orrne	r1, r1, #2
	str	r1, [r4, #164]
	cmp	r0, #0
	beq	.L11604
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L11604
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	bx	r3
.L11609:
	add	r1, r5, #8
	mov	r0, #0
	add	r5, r4, #4
	bl	_clear_bit
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L11665
	ldr	r7, [r3, #88]
	mov	r1, r0
	mov	r0, r5
	ldr	r6, [r3, #92]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L11624
	mov	r0, r7
	blx	r3
.L11624:
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L11625
	mov	r0, r6
	blx	r3
.L11625:
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r0, [r4, #68]
	cmp	r0, #0
	beq	.L11626
	add	r1, r4, #12
	mov	r0, r6
	bl	gsmd_free_requests
	mov	r0, r6
	add	r1, r4, #20
	bl	gsmd_free_requests
	mov	r0, r7
	add	r1, r4, #44
	bl	gsmd_free_requests
	ldr	r0, [r4, #68]
	mov	r3, #0
	str	r3, [r4, #8]
	str	r3, [r4, #164]
.L11626:
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L11627
	ldr	r1, [r4, #164]
	blx	r3
.L11627:
	mov	r0, r5
.L11664:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock
.L11608:
	add	r1, r5, #8
	mov	r0, #0
	add	r8, r4, #4
	bl	_set_bit
	mov	r0, r8
	bl	_raw_spin_lock
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L11616
	ldr	r3, [r4, #72]
	movw	r6, #:lower16:gsmd_read_complete
	add	r7, r4, #12
	ldr	r1, [r4, #160]
	movt	r6, #:upper16:gsmd_read_complete
	mov	r5, #8
	ldr	r0, [r3]
	mvn	r2, r1
	bl	smd_tiocmset_from_cb
	ldr	r3, [r4, #68]
	ldr	r9, [r3, #92]
.L11617:
	mov	r1, #2048
	mov	r0, r9
	bl	gsmd_alloc_req.constprop.136
	subs	r3, r0, #0
	mov	r1, r7
	add	r0, r3, #36
	beq	.L11666
	str	r6, [r3, #28]
	ldr	r2, [r4, #12]
	bl	__list_add
	subs	r5, r5, #1
	bne	.L11617
.L11615:
	ldr	r3, [r4, #68]
	movw	r6, #:lower16:gsmd_write_complete
	add	r9, r4, #44
	movt	r6, #:upper16:gsmd_write_complete
	mov	r5, #8
	ldr	r10, [r3, #88]
.L11621:
	mov	r1, #2048
	mov	r0, r10
	bl	gsmd_alloc_req.constprop.136
	subs	r3, r0, #0
	mov	r1, r9
	add	r0, r3, #36
	beq	.L11667
	str	r6, [r3, #28]
	ldr	r2, [r4, #44]
	bl	__list_add
	subs	r5, r5, #1
	bne	.L11621
.L11662:
	mov	r0, r8
	bl	_raw_spin_unlock
	ldrd	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	gsmd_start_rx
.L11606:
	ldr	r0, [r5]
	bl	smd_read_avail
	cmp	r0, #0
	bne	.L11668
.L11611:
	ldr	r0, [r5]
	bl	smd_write_avail
	cmp	r0, #0
	bne	.L11669
.L11604:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11666:
	ldr	r3, [r4, #12]
	cmp	r7, r3
	bne	.L11615
	movw	r0, #:lower16:.LC741
	ldr	r1, .L11670
	movt	r0, #:upper16:.LC741
	bl	printk
.L11616:
	mov	r0, r8
	b	.L11664
.L11669:
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #28
	ldrd	r4, [sp]
	movt	r3, #:upper16:.LANCHOR1
	ldrd	r6, [sp, #8]
	mov	r0, #4
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, [r3, #2612]
	b	queue_work_on
.L11668:
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #52
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #2612]
	bl	queue_work_on
	b	.L11611
.L11665:
	mov	r1, r0
	ldrd	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L11667:
	ldr	r3, [r4, #44]
	cmp	r9, r3
	bne	.L11662
	ldr	r3, [r4, #68]
	mov	r1, r7
	ldr	r0, [r3, #92]
	bl	gsmd_free_requests
	movw	r0, #:lower16:.LC742
	ldr	r1, .L11670
	movt	r0, #:upper16:.LC742
	bl	printk
	b	.L11616
.L11671:
	.align	2
.L11670:
	.word	.LANCHOR3-1632
	.fnend
	.size	gsmd_notify, .-gsmd_notify
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ch_remove, %function
gsdio_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r6]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	cmp	r3, #0
	beq	.L11673
	mov	r5, #0
	mov	r8, r0
	add	r7, r6, #4
	mov	r9, r5
.L11680:
	ldr	r4, [r7, #20]
	mov	r2, #9
	add	r5, r5, #1
	ldr	r1, [r8]
	add	r7, r7, #104
	ldr	r3, [r4, #120]
	add	r10, r4, #4
	ldr	r0, [r3]
	bl	strncmp
	subs	r2, r0, #0
	bne	.L11675
	ldr	fp, [r4, #96]
	mov	r3, #1
	mov	r1, r2
	str	r2, [r4, #108]
	strd	r2, [r4, #112]
	cmp	fp, #0
	mov	r0, fp
	beq	.L11675
	str	r2, [r4, #176]
	ldr	r2, [fp, #136]
	cmp	r2, #0
	beq	.L11677
	blx	r2
.L11677:
	ldr	r0, [fp, #88]
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #36]
	cmp	r2, #0
	beq	.L11678
	blx	r2
.L11678:
	ldr	r0, [fp, #92]
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #36]
	cmp	r2, #0
	beq	.L11679
	blx	r2
.L11679:
	add	r0, r4, #28
	bl	cancel_work_sync
	add	r0, r4, #60
	bl	cancel_work_sync
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	mov	r2, r0
	add	r1, r4, #12
	ldr	r0, [fp, #92]
	str	r2, [sp, #4]
	bl	gsdio_free_requests
	add	r1, r4, #20
	ldr	r0, [fp, #92]
	bl	gsdio_free_requests
	add	r1, r4, #52
	ldr	r0, [fp, #88]
	bl	gsdio_free_requests
	ldr	r2, [sp, #4]
	mov	r0, r10
	str	r9, [r4, #8]
	str	r9, [r4, #44]
	str	r9, [r4, #48]
	str	r9, [r4, #76]
	mov	r1, r2
	bl	_raw_spin_unlock_irqrestore
.L11675:
	ldr	r3, [r6]
	cmp	r5, r3
	bcc	.L11680
.L11673:
	mov	r0, #0
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
	.fnend
	.size	gsdio_ch_remove, .-gsdio_ch_remove
	.align	2
	.global	gsdio_alloc_requests
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_alloc_requests, %function
gsdio_alloc_requests:
	.fnstart
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	subs	r8, r2, #0
	ldr	r9, [sp, #32]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ble	.L11699
	mov	r7, r3
	mov	r5, r1
	mov	r6, r0
	mov	r4, #0
	b	.L11702
.L11700:
	str	r9, [ip, #28]
	ldr	r2, [r5]
	bl	__list_add
	cmp	r8, r4
	beq	.L11699
.L11702:
	mov	r1, r7
	mov	r2, #32
	mov	r0, r6
	add	r4, r4, #1
	bl	gsdio_alloc_req
	subs	ip, r0, #0
	mov	r1, r5
	add	r0, ip, #36
	bne	.L11700
	ldr	r3, [r5]
	cmp	r5, r3
	beq	.L11703
.L11699:
	mov	r0, #0
.L11698:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11703:
	mvn	r0, #11
	b	.L11698
	.fnend
	.size	gsdio_alloc_requests, .-gsdio_alloc_requests
	.align	2
	.global	gsdio_start_rx
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_start_rx, %function
gsdio_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	subs	r4, r0, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	beq	.L11721
	add	r6, r4, #4
	mov	r0, r6
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L11709
	ldr	r2, [r4, #108]
	cmp	r2, #0
	beq	.L11709
	add	r8, r4, #12
	mov	r9, #2048
	ldr	r7, [r3, #92]
	b	.L11711
.L11713:
	bl	list_del
	str	r9, [r5, #-32]
	ldr	r3, [r4, #44]
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r4, #44]
	bl	_raw_spin_unlock_irq
	ldr	r3, [r7, #8]
	mov	r1, r10
	mov	r2, #32
	mov	r0, r7
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irq
	cmp	r10, #0
	bne	.L11722
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L11709
.L11711:
	ldr	r5, [r4, #12]
	cmp	r8, r5
	mov	r0, r5
	sub	r10, r5, #36
	bne	.L11713
.L11709:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irq
.L11722:
	movw	r0, #:lower16:.LC13
	ldr	r3, [r4]
	mov	r2, r4
	ldr	r1, .L11723
	movt	r0, #:upper16:.LC13
	bl	printk
	mov	r2, r8
	mov	r0, r5
	ldr	r1, [r4, #16]
	bl	__list_add
	ldr	r3, [r4, #44]
	add	r3, r3, #1
	str	r3, [r4, #44]
	b	.L11709
.L11721:
	movw	r0, #:lower16:.LC12
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC12
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, .L11723
	b	printk
.L11724:
	.align	2
.L11723:
	.word	.LANCHOR3-1616
	.fnend
	.size	gsdio_start_rx, .-gsdio_start_rx
	.align	2
	.global	gsdio_write
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_write, %function
gsdio_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r4, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L11734
	cmp	r1, #0
	beq	.L11735
	ldr	r3, [r4, #108]
	cmp	r3, #0
	beq	.L11727
	ldr	r3, [r1, #48]
	cmp	r3, #0
	bne	.L11729
	str	r3, [r4, #8]
.L11727:
	ldrd	r4, [sp]
	mvn	r0, #18
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11734:
	movw	r0, #:lower16:.LC12
	ldr	r1, .L11736
	movt	r0, #:upper16:.LC12
	bl	printk
	b	.L11727
.L11735:
	movw	r0, #:lower16:.LC743
	ldr	r1, .L11736
	ldr	r2, [r4]
	movt	r0, #:upper16:.LC743
	bl	printk
	b	.L11727
.L11729:
	add	r5, r4, #4
	mov	r0, r5
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	_raw_spin_lock_irq
	movw	r0, #:lower16:.LC744
	mvn	r3, #18
	ldr	r1, .L11736
	ldr	r2, [r4]
	movt	r0, #:upper16:.LC744
	bl	printk
	b	.L11727
.L11737:
	.align	2
.L11736:
	.word	.LANCHOR3-1600
	.fnend
	.size	gsdio_write, .-gsdio_write
	.align	2
	.global	gsdio_rx_push
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_rx_push, %function
gsdio_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #24
	sub	r7, r0, #28
	strd	r8, [sp, #16]
	mov	r0, r6
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L11758
	ldr	r5, [r4, #-8]
	sub	r8, r4, #8
	ldr	fp, [r3, #92]
	cmp	r5, r8
	beq	.L11742
	movw	r9, #:lower16:.LC218
	movt	r9, #:upper16:.LC218
.L11748:
	ldr	r3, [r5, #8]
	sub	r10, r5, #36
	cmn	r3, #108
	beq	.L11742
	cmp	r3, #0
	bne	.L11759
.L11743:
	ldr	r3, [r4, #80]
	mov	r0, r5
	cmp	r3, #0
	beq	.L11760
	bl	list_del
	ldr	r3, [r4, #20]
	mov	r1, r10
	mov	r0, r7
	sub	r3, r3, #1
	str	r3, [r4, #20]
	bl	gsdio_write
	ldr	r3, [r4, #68]
	mov	r2, r0
	mov	r1, r4
	mov	r0, r5
	cmp	r3, #0
	beq	.L11761
	cmp	r2, #0
	bne	.L11746
	ldr	r3, [r4, #-20]
	cmp	r3, #0
	bne	.L11746
	ldr	r2, [r1, #-16]!
	bl	__list_add
	ldr	r5, [r4, #-8]
	ldr	r3, [r4, #16]
	cmp	r8, r5
	add	r3, r3, #1
	str	r3, [r4, #16]
	bne	.L11748
.L11742:
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gsdio_start_rx
.L11761:
	str	r3, [r4, #-20]
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [fp, #8]
	mov	r1, r10
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
.L11758:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq
.L11746:
	mov	r1, r8
	mov	r0, r5
	ldr	r2, [r4, #-8]
	bl	__list_add
	ldr	r3, [r4, #20]
	add	r3, r3, #1
	str	r3, [r4, #20]
	b	.L11742
.L11759:
	mov	r2, r7
	ldr	r1, .L11762
	mov	r0, r9
	str	r3, [sp]
	ldr	r3, [r4, #-28]
	bl	printk
	b	.L11743
.L11760:
	movw	r0, #:lower16:.LC745
	ldr	r1, .L11762
	movt	r0, #:upper16:.LC745
	bl	printk
	mov	r0, r5
	bl	__list_del_entry
	ldr	r2, [r4, #-16]
	mov	r0, r5
	sub	r1, r4, #16
	bl	__list_add
	ldrd	r2, [r4, #16]
	add	r2, r2, #1
	sub	r3, r3, #1
	strd	r2, [r4, #16]
	b	.L11742
.L11763:
	.align	2
.L11762:
	.word	.LANCHOR3-1588
	.fnend
	.size	gsdio_rx_push, .-gsdio_rx_push
	.align	2
	.global	gsdio_read_pending
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_read_pending, %function
gsdio_read_pending:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #0
	beq	.L11768
	ldr	r3, [r0, #120]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L11764
.L11767:
	b	.L11767
.L11764:
	bx	lr
.L11768:
	movw	r0, #:lower16:.LC12
	ldr	r1, .L11769
	movt	r0, #:upper16:.LC12
	b	printk
.L11770:
	.align	2
.L11769:
	.word	.LANCHOR2+648
	.fnend
	.size	gsdio_read_pending, .-gsdio_read_pending
	.align	2
	.global	gsdio_start_io
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_start_io, %function
gsdio_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #4
	strd	r8, [sp, #16]
	mov	r0, r6
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	mov	r8, r0
	cmp	r3, #0
	beq	.L11777
	movw	ip, #:lower16:gsdio_read_complete
	add	r9, r4, #12
	ldr	r0, [r3, #92]
	movt	ip, #:upper16:gsdio_read_complete
	mov	r1, r9
	mov	r2, #8
	mov	r3, #2048
	str	ip, [sp]
	bl	gsdio_alloc_requests
	subs	r7, r0, #0
	bne	.L11778
	ldr	r0, [r4, #96]
	movw	ip, #:lower16:gsdio_write_complete
	mov	r5, #8
	movt	ip, #:upper16:gsdio_write_complete
	mov	r2, r5
	str	r5, [r4, #44]
	mov	r3, #2048
	add	r1, r4, #52
	ldr	r0, [r0, #88]
	str	ip, [sp]
	bl	gsdio_alloc_requests
	subs	r7, r0, #0
	bne	.L11779
	mov	r1, r8
	mov	r0, r6
	str	r5, [r4, #76]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	bl	gsdio_start_rx
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #60
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #2608]
	bl	queue_work_on
.L11771:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L11777:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mvn	r7, #18
	b	.L11771
.L11779:
	ldr	r3, [r4, #96]
	mov	r1, r9
	ldr	r0, [r3, #92]
	bl	gsdio_free_requests
	mov	r3, #0
	mov	r1, r8
	mov	r0, r6
	str	r3, [r4, #44]
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC747
	ldr	r1, .L11780
	movt	r0, #:upper16:.LC747
	bl	printk
	b	.L11771
.L11778:
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC746
	ldr	r1, .L11780
	movt	r0, #:upper16:.LC746
	bl	printk
	b	.L11771
.L11781:
	.align	2
.L11780:
	.word	.LANCHOR3-1572
	.fnend
	.size	gsdio_start_io, .-gsdio_start_io
	.align	2
	.global	gsdio_port_free
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_port_free, %function
gsdio_port_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r2, r0
	mov	r3, #104
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r0, #:lower16:.LANCHOR1
	str	lr, [sp, #4]
	mul	r3, r3, r2
	movt	r0, #:upper16:.LANCHOR1
	add	r1, r0, r3
	ldr	r4, [r1, #24]
	cmp	r4, #0
	beq	.L11785
	add	r0, r1, #28
	bl	platform_driver_unregister
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
.L11785:
	movw	r0, #:lower16:.LC92
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC92
	add	sp, sp, #8
	ldr	r1, .L11786
	b	printk
.L11787:
	.align	2
.L11786:
	.word	.LANCHOR3-1556
	.fnend
	.size	gsdio_port_free, .-gsdio_port_free
	.align	2
	.global	gsdio_ctrl_modem_status
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ctrl_modem_status, %function
gsdio_ctrl_modem_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ands	r3, r0, #128
	movne	r3, #8
	tst	r0, #64
	str	r3, [r1, #176]
	beq	.L11791
	ldr	r3, [r1, #176]
	orr	r3, r3, #1
	str	r3, [r1, #176]
.L11791:
	tst	r0, #256
	beq	.L11792
	ldr	r3, [r1, #176]
	orr	r3, r3, #2
	str	r3, [r1, #176]
.L11792:
	ldr	r0, [r1, #96]
	cmp	r0, #0
	beq	.L11788
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L11788
	ldr	r1, [r1, #176]
	bx	r3
.L11788:
	bx	lr
	.fnend
	.size	gsdio_ctrl_modem_status, .-gsdio_ctrl_modem_status
	.align	2
	.global	gsdio_ch_notify
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ch_notify, %function
gsdio_ch_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #2
	beq	.L11810
	cmp	r1, #1
	beq	.L11811
	bx	lr
.L11811:
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r0, #60
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #2608]
	b	queue_work_on
.L11810:
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r0, #28
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #2608]
	b	queue_work_on
	.fnend
	.size	gsdio_ch_notify, .-gsdio_ch_notify
	.align	2
	.global	gsdio_port_alloc
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_port_alloc, %function
gsdio_port_alloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	mov	r6, r2
	mov	r8, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r3, #8]
	.pad #4
	sub	sp, sp, #4
	cmp	r0, #0
	beq	.L11815
	mov	r2, #192
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L11817
.L11813:
	mov	r5, #0
	str	r7, [r4]
	movw	r0, #:lower16:gsdio_rx_push
	add	r9, r4, #12
	movt	r0, #:upper16:gsdio_rx_push
	str	r5, [r4, #4]
	ldr	r2, [r8]	@ unaligned
	mov	r1, #65024
	movw	r3, #:lower16:gsdio_tx_pull
	movw	ip, #:lower16:gsdio_open_work
	movt	r1, 65535
	movt	ip, #:upper16:gsdio_open_work
	movt	r3, #:upper16:gsdio_tx_pull
	str	r2, [r4, #100]
	ldrh	lr, [r8, #4]	@ unaligned
	movw	r2, #:lower16:gsdio_ctrl_wq
	movt	r2, #:upper16:gsdio_ctrl_wq
	strh	lr, [r4, #104]	@ movhi
	add	lr, r4, #32
	ldrb	fp, [r8, #6]	@ zero_extendqisi2
	add	r8, r4, #20
	str	r9, [r4, #12]
	str	r9, [r4, #16]
	add	r9, r4, #52
	str	r8, [r4, #20]
	str	r8, [r4, #24]
	add	r8, r4, #64
	str	r1, [r4, #28]
	str	lr, [r4, #32]
	str	lr, [r4, #36]
	add	lr, r4, #84
	str	r0, [r4, #40]
	add	r0, r4, #128
	str	r9, [r4, #52]
	str	r9, [r4, #56]
	str	r1, [r4, #60]
	str	r8, [r4, #64]
	str	r8, [r4, #68]
	str	r3, [r4, #72]
	mov	r3, r5
	str	r1, [r4, #80]
	str	lr, [r4, #84]
	str	lr, [r4, #88]
	str	r2, [r4, #92]
	mov	r2, r5
	strb	fp, [r4, #106]
	str	r1, [r4, #124]
	mov	r1, r5
	str	r0, [r4, #128]
	str	r0, [r4, #132]
	add	r0, r4, #140
	str	ip, [r4, #136]
	bl	init_timer_key
	mov	r2, #104
	movw	r0, #:lower16:.LANCHOR1
	movt	r0, #:upper16:.LANCHOR1
	movw	lr, #:lower16:delayed_work_timer_fn
	mul	r2, r2, r7
	movw	ip, #:lower16:gsdio_ch_probe
	movw	r1, #:lower16:gsdio_ch_remove
	movt	lr, #:upper16:delayed_work_timer_fn
	movt	ip, #:upper16:gsdio_ch_probe
	movt	r1, #:upper16:gsdio_ch_remove
	add	r7, r4, #124
	add	r3, r0, r2
	str	lr, [r4, #156]
	str	r7, [r4, #160]
	add	r0, r3, #28
	str	r4, [r3, #24]
	str	r6, [r4, #120]
	str	ip, [r3, #28]
	str	r1, [r3, #32]
	ldr	r2, [r6]
	str	r2, [r3, #48]
	str	r5, [r3, #56]
	bl	platform_driver_register
	mov	r0, r5
.L11812:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11815:
	mov	r4, #16
	b	.L11813
.L11817:
	movw	r0, #:lower16:.LC748
	ldr	r1, .L11818
	movt	r0, #:upper16:.LC748
	bl	printk
	mvn	r0, #11
	b	.L11812
.L11819:
	.align	2
.L11818:
	.word	.LANCHOR3-1540
	.fnend
	.size	gsdio_port_alloc, .-gsdio_port_alloc
	.align	2
	.global	gsdio_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_connect, %function
gsdio_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r3]
	cmp	r1, r2
	bcs	.L11832
	cmp	r0, #0
	mov	r4, r0
	beq	.L11833
	mov	r2, #104
	mla	r1, r2, r1, r3
	ldr	r5, [r1, #24]
	add	r6, r5, #4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	movw	r3, #:lower16:gsdio_ctrl_notify_modem
	mov	r1, r0
	str	r4, [r5, #96]
	movt	r3, #:upper16:gsdio_ctrl_notify_modem
	mov	r0, r6
	str	r3, [r4, #140]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L11834
	ldr	r3, [r4, #88]
	str	r5, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L11835
	ldr	r3, [r4, #92]
	str	r5, [r3]
	ldr	r3, [r5, #108]
	cmp	r3, #0
	bne	.L11836
.L11820:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11836:
	mov	r0, r5
	bl	gsdio_start_io
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L11820
	mov	r0, r4
	ldr	r1, [r5, #176]
	blx	r3
	b	.L11820
.L11835:
	movw	r0, #:lower16:.LC749
	mov	r2, r6
	ldr	r1, .L11837
	movt	r0, #:upper16:.LC749
	bl	printk
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	str	r3, [r5, #96]
	ldr	r2, [r4, #88]
	str	r3, [r2]
	b	.L11820
.L11834:
	movw	r0, #:lower16:.LC749
	mov	r2, r6
	ldr	r1, .L11837
	movt	r0, #:upper16:.LC749
	bl	printk
	mov	r3, #0
	str	r3, [r5, #96]
	b	.L11820
.L11833:
	movw	r0, #:lower16:.LC93
	ldr	r1, .L11837
	mvn	r6, #21
	movt	r0, #:upper16:.LC93
	bl	printk
	b	.L11820
.L11832:
	movw	r0, #:lower16:.LC92
	mov	r2, r1
	ldr	r1, .L11837
	movt	r0, #:upper16:.LC92
	mvn	r6, #21
	bl	printk
	b	.L11820
.L11838:
	.align	2
.L11837:
	.word	.LANCHOR3-1520
	.fnend
	.size	gsdio_connect, .-gsdio_connect
	.align	2
	.global	gsdio_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_disconnect, %function
gsdio_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3]
	cmp	r1, r2
	bcs	.L11844
	cmp	r0, #0
	beq	.L11845
	mov	ip, #104
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r6, #0
	mov	r0, #4
	mla	r2, ip, r1, r3
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r3, #2608]
	ldr	r4, [r2, #24]
	add	r2, r4, #80
	add	r7, r4, r0
	str	r6, [r4, #180]
	bl	queue_work_on
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r6, [r4, #96]
	mov	r0, r7
	str	r6, [r4, #184]
	str	r6, [r4, #188]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #92]
	str	r6, [r3]
	ldr	r0, [r5, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #88]
	mov	r0, r7
	str	r6, [r3]
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	add	r1, r4, #12
	ldr	r0, [r5, #92]
	bl	gsdio_free_requests
	add	r1, r4, #20
	ldr	r0, [r5, #92]
	bl	gsdio_free_requests
	add	r1, r4, #52
	ldr	r0, [r5, #88]
	bl	gsdio_free_requests
	str	r6, [r4, #8]
	mov	r0, r7
	mov	r1, r8
	str	r6, [r4, #44]
	str	r6, [r4, #48]
	str	r6, [r4, #76]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L11844:
	movw	r0, #:lower16:.LC92
	mov	r2, r1
	ldr	r1, .L11846
	movt	r0, #:upper16:.LC92
	b	printk
.L11845:
	movw	r0, #:lower16:.LC93
	ldr	r1, .L11846
	movt	r0, #:upper16:.LC93
	b	printk
.L11847:
	.align	2
.L11846:
	.word	.LANCHOR3-1504
	.fnend
	.size	gsdio_disconnect, .-gsdio_disconnect
	.align	2
	.global	gsdio_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_setup, %function
gsdio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r3, r1, #1
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	cmp	r3, #1
	strd	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #16]
	.pad #20
	sub	sp, sp, #20
	bhi	.L11862
	mvn	r0, #127
	movw	r3, #:lower16:.LC732
	mov	r5, #0
	movt	r3, #:upper16:.LC732
	mov	r2, #37
	mov	ip, #8
	mov	r1, #10
	str	r5, [sp]
	movw	r4, #:lower16:.LANCHOR1
	strb	r0, [sp, #9]
	movw	r0, #:lower16:.LC228
	movt	r1, 2
	str	r3, [sp, #4]
	movt	r0, #:upper16:.LC228
	mov	r3, r5
	strb	r2, [sp, #10]
	mov	r2, #1
	movt	r4, #:upper16:.LANCHOR1
	strb	r5, [sp, #11]
	strb	r5, [sp, #12]
	strb	ip, [sp, #13]
	strb	r5, [sp, #14]
	strb	r5, [sp, #15]
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #2608]
	beq	.L11863
	ldr	r7, .L11865
	movw	r1, #:lower16:.LC752
	add	r0, r4, #4
	movt	r1, #:upper16:.LC752
	ldr	r2, .L11865+4
	bl	__mutex_init
	add	r1, sp, #9
	mov	r0, r5
	sub	r2, r7, #8
	bl	gsdio_port_alloc
	ldr	r3, [r4]
	subs	r5, r0, #0
	add	r2, r3, #1
	str	r2, [r4]
	bne	.L11852
	cmp	r6, #2
	bne	.L11853
	movw	r1, #:lower16:.LC752
	ldr	r2, .L11865+4
	add	r0, r4, #108
	movt	r1, #:upper16:.LC752
	bl	__mutex_init
	add	r1, sp, #9
	add	r2, r7, #4
	mov	r0, #1
	bl	gsdio_port_alloc
	ldr	r3, [r4]
	cmp	r0, #0
	add	r2, r3, #1
	str	r2, [r4]
	bne	.L11864
.L11853:
	movw	r0, #:lower16:.LC754
	mov	r1, #0
	movt	r0, #:upper16:.LC754
	bl	debugfs_create_dir
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L11848
	ldr	ip, .L11865+8
	movw	r0, #:lower16:.LC159
	mov	r3, #0
	movt	r0, #:upper16:.LC159
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
.L11848:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L11864:
	mov	r5, r0
.L11852:
	movw	r0, #:lower16:.LC753
	ldr	r1, .L11865+12
	str	r3, [r4]
	movt	r0, #:upper16:.LC753
	bl	printk
	ldr	r3, [r4]
	cmp	r3, #0
	movne	r6, #0
	beq	.L11855
.L11854:
	mov	r0, r6
	add	r6, r6, #1
	bl	gsdio_port_free
	ldr	r3, [r4]
	cmp	r6, r3
	bcc	.L11854
.L11855:
	ldr	r0, [r4, #2608]
	bl	destroy_workqueue
	b	.L11848
.L11863:
	movw	r0, #:lower16:.LC751
	ldr	r1, .L11865+12
	mvn	r5, #11
	movt	r0, #:upper16:.LC751
	bl	printk
	b	.L11848
.L11862:
	movw	r0, #:lower16:.LC750
	mov	r2, r1
	ldr	r1, .L11865+12
	movt	r0, #:upper16:.LC750
	mov	r3, #2
	bl	printk
	mvn	r5, #21
	b	.L11848
.L11866:
	.align	2
.L11865:
	.word	.LANCHOR4-1840
	.word	.LANCHOR1+4040
	.word	.LANCHOR3-1472
	.word	.LANCHOR3-1484
	.fnend
	.size	gsdio_setup, .-gsdio_setup
	.align	2
	.global	gsmd_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_connect, %function
gsmd_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	str	r8, [sp, #16]
	ldr	r3, [r6, #212]
	str	lr, [sp, #20]
	cmp	r1, r3
	bcs	.L11874
	cmp	r0, #0
	mov	r4, r0
	beq	.L11875
	mov	r2, #104
	mov	r7, #0
	mla	r1, r2, r1, r6
	ldr	r5, [r1, #236]
	add	r8, r5, #4
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	movw	r3, #:lower16:gsmd_notify_modem
	mov	r1, r0
	str	r4, [r5, #68]
	movt	r3, #:upper16:gsmd_notify_modem
	mov	r0, r8
	str	r3, [r4, #140]
	str	r7, [r5, #168]
	str	r7, [r5, #172]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r8, r0, #0
	bne	.L11876
	ldr	r3, [r4, #88]
	str	r5, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r8, r0, #0
	bne	.L11877
	ldr	r3, [r4, #92]
	ldr	r4, [r6, #2612]
	str	r5, [r3]
	bl	msecs_to_jiffies
	mov	r3, r0
	mov	r1, r4
	mov	r0, #4
	add	r2, r5, #76
	bl	queue_delayed_work_on
.L11867:
	mov	r0, r8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11874:
	movw	r0, #:lower16:.LC755
	mov	r2, r1
	ldr	r1, .L11878
	movt	r0, #:upper16:.LC755
	mvn	r8, #21
	bl	printk
	b	.L11867
.L11877:
	movw	r0, #:lower16:.LC246
	ldr	r1, .L11878
	movt	r0, #:upper16:.LC246
	ldr	r2, [r4, #92]
	bl	printk
	str	r7, [r5, #68]
	ldr	r3, [r4, #88]
	str	r7, [r3]
	b	.L11867
.L11876:
	movw	r0, #:lower16:.LC245
	ldr	r1, .L11878
	movt	r0, #:upper16:.LC245
	ldr	r2, [r4, #88]
	bl	printk
	str	r7, [r5, #68]
	b	.L11867
.L11875:
	movw	r0, #:lower16:.LC93
	ldr	r1, .L11878
	mvn	r8, #21
	movt	r0, #:upper16:.LC93
	bl	printk
	b	.L11867
.L11879:
	.align	2
.L11878:
	.word	.LANCHOR3-1364
	.fnend
	.size	gsmd_connect, .-gsmd_connect
	.align	2
	.global	gsmd_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_disconnect, %function
gsmd_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	str	r10, [sp, #24]
	ldr	r3, [r8, #212]
	str	lr, [sp, #28]
	cmp	r1, r3
	bcs	.L11889
	cmp	r0, #0
	beq	.L11890
	mov	r3, #104
	mov	r4, r0
	mov	r7, #0
	mla	r1, r3, r1, r8
	ldr	r6, [r1, #236]
	add	r5, r6, #4
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r7, [r6, #68]
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #92]
	str	r7, [r3]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #88]
	mov	r0, r5
	str	r7, [r3]
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	add	r1, r6, #12
	ldr	r0, [r4, #92]
	bl	gsmd_free_requests
	add	r1, r6, #20
	ldr	r0, [r4, #92]
	bl	gsmd_free_requests
	add	r1, r6, #44
	ldr	r0, [r4, #88]
	bl	gsmd_free_requests
	mov	r0, r5
	mov	r1, r9
	str	r7, [r6, #8]
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r6, #72]
	mov	r0, r7
	add	r1, r1, #8
	bl	_test_and_clear_bit
	cmp	r0, r7
	bne	.L11891
.L11883:
	ldr	r3, [r6, #72]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L11880
	add	r2, r6, #128
	ldr	r1, [r8, #2612]
	mov	r0, #4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	queue_work_on
.L11880:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11891:
	ldr	r3, [r6, #72]
	str	r7, [r6, #160]
	mov	r1, r7
	mvn	r2, #0
	ldr	r0, [r3]
	bl	smd_tiocmset
	b	.L11883
.L11890:
	movw	r0, #:lower16:.LC93
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC93
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, .L11892
	b	printk
.L11889:
	movw	r0, #:lower16:.LC92
	mov	r2, r1
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC92
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, .L11892
	b	printk
.L11893:
	.align	2
.L11892:
	.word	.LANCHOR3-1348
	.fnend
	.size	gsmd_disconnect, .-gsmd_disconnect
	.align	2
	.global	gsmd_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_setup, %function
gsmd_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r2, r1, #1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r2, #1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	str	r1, [sp, #12]
	bhi	.L11908
	movw	r2, #:lower16:.LC757
	mov	r7, #0
	movt	r2, #:upper16:.LC757
	mov	r1, #10
	movw	r0, #:lower16:.LC228
	mov	r3, r7
	str	r7, [sp]
	str	r2, [sp, #4]
	movt	r1, 2
	movt	r0, #:upper16:.LC228
	mov	r2, #1
	movw	r10, #:lower16:.LANCHOR1
	bl	__alloc_workqueue_key
	movt	r10, #:upper16:.LANCHOR1
	cmp	r0, r7
	str	r0, [r10, #2612]
	beq	.L11909
	movw	r3, #:lower16:kmalloc_caches
	movw	r2, #:lower16:.LC759
	ldr	r9, .L11915
	movt	r3, #:upper16:kmalloc_caches
	movt	r2, #:upper16:.LC759
	mov	r8, #65024
	add	r5, r10, #216
	movt	r8, 65535
	str	r3, [sp, #16]
	str	r2, [sp, #20]
	b	.L11901
.L11912:
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L11910
.L11898:
	movw	r3, #:lower16:gsmd_rx_push
	add	r0, r4, #12
	str	r7, [r4]
	movt	r3, #:upper16:gsmd_rx_push
	movw	r1, #:lower16:gsmd_tx_pull
	str	r6, [r4, #4]
	movw	ip, #:lower16:gsmd_connect_work
	add	lr, r4, #32
	str	r0, [r4, #12]
	movt	ip, #:upper16:gsmd_connect_work
	add	r2, r4, #56
	str	r0, [r4, #16]
	movt	r1, #:upper16:gsmd_tx_pull
	add	r0, r4, #80
	str	r8, [r4, #28]
	add	fp, r4, #20
	str	r3, [r4, #40]
	add	r3, r4, #44
	add	r7, r7, #1
	str	fp, [r4, #20]
	str	fp, [r4, #24]
	str	lr, [r4, #32]
	str	lr, [r4, #36]
	str	r3, [r4, #44]
	str	r3, [r4, #48]
	mov	r3, r6
	str	r8, [r4, #52]
	str	r2, [r4, #56]
	str	r2, [r4, #60]
	mov	r2, r6
	str	r1, [r4, #64]
	mov	r1, r6
	str	r9, [r4, #72]
	add	r9, r9, #12
	str	r8, [r4, #76]
	str	r0, [r4, #80]
	str	r0, [r4, #84]
	add	r0, r4, #92
	str	ip, [r4, #88]
	bl	init_timer_key
	movw	r0, #:lower16:delayed_work_timer_fn
	movw	r1, #:lower16:gsmd_disconnect_work
	str	r8, [r4, #128]
	movw	r2, #:lower16:gsmd_ch_probe
	movw	r3, #:lower16:gsmd_ch_remove
	add	lr, r4, #132
	movt	r0, #:upper16:delayed_work_timer_fn
	movt	r1, #:upper16:gsmd_disconnect_work
	movt	r2, #:upper16:gsmd_ch_probe
	movt	r3, #:upper16:gsmd_ch_remove
	add	ip, r4, #76
	str	r0, [r4, #108]
	add	r0, r5, #24
	add	r5, r5, #104
	str	ip, [r4, #112]
	str	lr, [r4, #132]
	str	lr, [r4, #136]
	str	r1, [r4, #140]
	str	r4, [r5, #-84]
	strd	r2, [r5, #-80]
	ldr	r3, [r4, #72]
	ldr	r3, [r3, #4]
	str	r3, [r5, #-60]
	str	r6, [r5, #-52]
	bl	platform_driver_register
	ldr	r3, [sp, #12]
	cmp	r7, r3
	beq	.L11911
.L11901:
	ldr	r2, .L11915+4
	mov	r0, r5
	mov	r6, #0
	ldr	r1, [sp, #20]
	bl	__mutex_init
	ldr	r0, [sp, #16]
	mov	r2, #176
	movw	r1, #32976
	ldr	r3, [r10, #212]
	ldr	ip, [r0, #8]
	add	r3, r3, #1
	str	r3, [r10, #212]
	cmp	ip, r6
	mov	r0, ip
	bne	.L11912
	mov	r4, #16
	b	.L11898
.L11911:
	movw	r0, #:lower16:.LC761
	mov	r1, r6
	movt	r0, #:upper16:.LC761
	bl	debugfs_create_dir
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L11905
	ldr	ip, .L11915+8
	movw	r0, #:lower16:.LC159
	mov	r3, r6
	movt	r0, #:upper16:.LC159
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	mov	r0, r6
.L11894:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11905:
	mov	r0, r6
	b	.L11894
.L11910:
	ldr	r3, [r10, #212]
	movw	r0, #:lower16:.LC760
	mov	r2, r7
	movt	r0, #:upper16:.LC760
	ldr	r1, .L11915+12
	sub	r3, r3, #1
	str	r3, [r10, #212]
	bl	printk
	ldr	r3, [r10, #212]
	cmp	r3, r6
	beq	.L11900
	ldr	r0, [r10, #236]
	cmp	r0, #0
	beq	.L11913
.L11902:
	ldr	r3, [r10, #212]
	cmp	r3, #1
	bls	.L11900
	ldr	r0, [r10, #340]
	cmp	r0, #0
	beq	.L11914
.L11900:
	ldr	r0, [r10, #2612]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L11894
.L11913:
	bl	kfree
	b	.L11902
.L11914:
	bl	kfree
	b	.L11900
.L11909:
	movw	r0, #:lower16:.LC758
	ldr	r1, .L11915+12
	movt	r0, #:upper16:.LC758
	bl	printk
	mvn	r0, #11
	b	.L11894
.L11908:
	mov	r3, r0
	movw	r0, #:lower16:.LC756
	ldr	r1, .L11915+12
	movt	r0, #:upper16:.LC756
	ldr	r2, [sp, #12]
	bl	printk
	mvn	r0, #21
	b	.L11894
.L11916:
	.align	2
.L11915:
	.word	.LANCHOR4-1824
	.word	.LANCHOR1+4040
	.word	.LANCHOR3-1320
	.word	.LANCHOR3-1332
	.fnend
	.size	gsmd_setup, .-gsmd_setup
	.align	2
	.global	gsmd_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_cleanup, %function
gsmd_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	gsmd_cleanup, .-gsmd_cleanup
	.align	2
	.global	gbam_data_recv_cb
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_recv_cb, %function
gbam_data_recv_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #0
	beq	.L11918
	b	gbam_data_recv_cb.part.82
.L11918:
	bx	lr
	.fnend
	.size	gbam_data_recv_cb, .-gbam_data_recv_cb
	.align	2
	.global	gbam_data_write_done
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_write_done, %function
gbam_data_write_done:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #0
	beq	.L11920
	b	gbam_data_write_done.part.83
.L11920:
	bx	lr
	.fnend
	.size	gbam_data_write_done, .-gbam_data_write_done
	.align	2
	.global	gbam_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_disconnect, %function
gbam_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #5
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	r10, r2
	mov	fp, r1
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	beq	.L11948
	sub	r3, r2, #6
	cmp	r3, #1
	bhi	.L11925
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #4040]
	cmp	r1, r3
	bge	.L11949
.L11925:
	cmp	r4, #0
	beq	.L11931
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	add	r3, r5, fp, lsl #2
	ldr	r6, [r3, #3612]
	str	r4, [r6, #16]
.L11926:
	add	r8, r6, #4
	mov	r7, #0
	mov	r0, r8
	add	r9, r6, #8
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r9
	str	r1, [sp, #4]
	bl	_raw_spin_lock
	mov	r0, r9
	str	r7, [r6, #12]
	str	r7, [r5, #2744]
	bl	_raw_spin_unlock
	ldr	r1, [sp, #4]
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #84]
	bic	r2, r10, #2
	cmp	r2, #5
	str	r7, [r3]
	ldr	r3, [r4, #88]
	str	r7, [r3]
	beq	.L11950
	cmp	r10, #6
	cmpeq	fp, #0
	beq	.L11951
.L11922:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11948:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r3, [r5, #424]
	cmp	r1, r3
	bge	.L11952
	cmp	r0, #0
	beq	.L11931
	mov	r3, #84
	mla	r3, r3, fp, r5
	ldr	r6, [r3, #428]
	mov	r0, r6
	str	r4, [r6, #16]
	bl	gbam_free_buffers
	b	.L11926
.L11950:
	ldr	r1, [r5, #2748]
	add	r2, r6, #300
	mov	r0, #4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work_on
.L11951:
	mov	r0, r7
	bl	usb_bam_client_ready
	cmp	r0, #0
	beq	.L11922
	movw	r0, #:lower16:.LC765
	ldr	r1, .L11953
	movt	r0, #:upper16:.LC765
	b	.L11947
.L11949:
	mov	r2, r1
	ldr	r1, .L11953
	movw	r0, #:lower16:.LC763
	movt	r0, #:upper16:.LC763
.L11946:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L11931:
	ldr	r1, .L11953
	movw	r0, #:lower16:.LC764
	movt	r0, #:upper16:.LC764
.L11947:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L11952:
	movw	r0, #:lower16:.LC762
	mov	r2, r1
	ldr	r1, .L11953
	movt	r0, #:upper16:.LC762
	b	.L11946
.L11954:
	.align	2
.L11953:
	.word	.LANCHOR3-1212
	.fnend
	.size	gbam_disconnect, .-gbam_disconnect
	.align	2
	.global	gbam_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_connect, %function
gbam_connect:
	.fnstart
	@ args = 4, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r2, #5
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r4, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldrb	r2, [sp, #48]	@ zero_extendqisi2
	str	r3, [sp]
	str	r2, [sp, #4]
	beq	.L11979
	sub	r3, r5, #6
	cmp	r3, #1
	bhi	.L11959
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #4040]
	cmp	r1, r3
	bge	.L11978
.L11959:
	cmp	r4, #0
	beq	.L11966
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	add	r1, r6, r1, lsl #2
	ldr	fp, [r1, #3612]
.L11960:
	ldr	r3, [r4, #84]
	ldr	ip, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [ip]
	blx	r3
	subs	r10, r0, #0
	bne	.L11980
	ldr	r3, [r4, #84]
	str	fp, [r3]
	ldr	r3, [r4, #88]
	ldr	ip, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [ip]
	blx	r3
	subs	r10, r0, #0
	bne	.L11981
	ldr	r1, [r4, #88]
	add	r7, fp, #4
	add	r8, fp, #8
	mov	r0, r7
	str	fp, [r1]
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r0, r8
	bl	_raw_spin_lock
	cmp	r5, #5
	str	r4, [fp, #12]
	beq	.L11982
	mov	r0, r8
	bl	_raw_spin_unlock
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #6
	bne	.L11965
	ldr	r3, [sp]
	str	r4, [fp, #16]
	strb	r3, [fp, #128]
	ldr	r3, [sp, #4]
	strb	r3, [fp, #129]
.L11964:
	add	r2, fp, #284
	mov	r0, #4
	ldr	r1, [r6, #2748]
	str	r5, [fp, #132]
	bl	queue_work_on
.L11955:
	mov	r0, r10
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11965:
	cmp	r5, #7
	bne	.L11964
	ldr	r3, [sp]
	add	r0, fp, #120
	add	r1, fp, #124
	str	r4, [fp, #16]
	strb	r3, [fp, #136]
	ldr	r3, [sp, #4]
	strd	r0, [fp, #140]
	strb	r3, [fp, #137]
	b	.L11964
.L11979:
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r3, [r6, #424]
	cmp	r1, r3
	bge	.L11978
	cmp	r0, #0
	beq	.L11966
	mov	r2, #84
	mla	r1, r2, r1, r6
	ldr	fp, [r1, #428]
	b	.L11960
.L11982:
	mov	r0, r8
	str	r10, [fp, #240]
	str	r10, [fp, #244]
	str	r10, [fp, #248]
	str	r10, [fp, #260]
	str	r10, [fp, #264]
	str	r10, [fp, #268]
	str	r10, [fp, #272]
	str	r10, [fp, #276]
	str	r10, [fp, #280]
	bl	_raw_spin_unlock
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L11964
.L11978:
	movw	r0, #:lower16:.LC92
	mov	r2, r1
	ldr	r1, .L11983
	movt	r0, #:upper16:.LC92
	mvn	r10, #18
	bl	printk
	b	.L11955
.L11981:
	movw	r0, #:lower16:.LC246
	ldr	r1, .L11983
	ldr	r2, [r4, #88]
	movt	r0, #:upper16:.LC246
	bl	printk
	ldr	r2, [r4, #84]
	mov	r1, #0
	str	r1, [r2]
	b	.L11955
.L11980:
	movw	r0, #:lower16:.LC245
	ldr	r1, .L11983
	ldr	r2, [r4, #84]
	movt	r0, #:upper16:.LC245
	bl	printk
	b	.L11955
.L11966:
	movw	r0, #:lower16:.LC764
	ldr	r1, .L11983
	mvn	r10, #18
	movt	r0, #:upper16:.LC764
	bl	printk
	b	.L11955
.L11984:
	.align	2
.L11983:
	.word	.LANCHOR3-1196
	.fnend
	.size	gbam_connect, .-gbam_connect
	.align	2
	.global	gbam_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_setup, %function
gbam_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	orrs	r2, r0, r1
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	str	r1, [sp, #8]
	beq	.L11986
	cmp	r1, #3
	cmpls	r0, #1
	mov	r3, r1
	movhi	r3, #1
	movls	r3, #0
	bhi	.L11986
	movw	r0, #:lower16:.LC767
	mov	r2, #1
	str	r3, [sp]
	movt	r0, #:upper16:.LC767
	mov	r1, #10
	bl	__alloc_workqueue_key
	movw	r8, #:lower16:.LANCHOR1
	cmp	r0, #0
	movt	r8, #:upper16:.LANCHOR1
	str	r0, [r8, #2748]
	beq	.L11989
	cmp	r4, #0
	beq	.L11991
	movw	r7, #:lower16:kmalloc_caches
	ldr	r3, [r8, #424]
	movt	r7, #:upper16:kmalloc_caches
	ldr	r0, [r7, #36]
	add	r3, r3, #1
	cmp	r0, #0
	str	r3, [r8, #424]
	beq	.L12006
	mov	r2, #348
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r2, r0, #0
	beq	.L12023
.L11992:
	add	r10, r2, #288
	movw	r9, #:lower16:gbam_data_write_tobam
	ldr	r1, .L12024
	movt	r9, #:upper16:gbam_data_write_tobam
	mov	ip, #65024
	str	r2, [r2, #76]
	movw	r7, #:lower16:gbam_connect_work
	movw	r6, #:lower16:gbam_disconnect_work
	str	r10, [r2, #292]
	add	r10, r2, #28
	movw	r0, #:lower16:gbam_write_data_tohost_w
	movw	r5, #:lower16:gbam_data_ch_probe
	movw	r4, #:lower16:gbam_data_ch_remove
	str	r10, [r2, #28]
	movw	lr, #:lower16:.LC232
	mov	r3, #0
	str	r9, [r2, #92]
	add	r9, r2, #36
	movt	ip, 65535
	str	r10, [r2, #32]
	add	r10, r2, #52
	movt	r0, #:upper16:gbam_write_data_tohost_w
	add	fp, r2, #304
	movt	r7, #:upper16:gbam_connect_work
	str	r3, [r2]
	str	r9, [r2, #36]
	movt	r6, #:upper16:gbam_disconnect_work
	movt	r5, #:upper16:gbam_data_ch_probe
	str	r10, [r2, #52]
	movt	r4, #:upper16:gbam_data_ch_remove
	movt	lr, #:upper16:.LC232
	str	r10, [r2, #56]
	add	r10, r2, #84
	str	r9, [r2, #40]
	add	r9, r2, #60
	str	r3, [r2, #4]
	str	r10, [r2, #84]
	str	r10, [r2, #88]
	add	r10, r2, #100
	str	r3, [r2, #8]
	str	r9, [r2, #60]
	str	r10, [r2, #100]
	str	r10, [r2, #104]
	ldr	r10, [r2, #292]
	str	r9, [r2, #64]
	mov	r9, #8
	str	r3, [r2, #44]
	str	r3, [r2, #48]
	str	r3, [r2, #68]
	str	r3, [r2, #72]
	str	ip, [r2, #80]
	str	ip, [r2, #96]
	str	r0, [r2, #108]
	mov	r0, r1
	str	ip, [r2, #284]
	str	r10, [r2, #288]
	str	r7, [r2, #296]
	str	ip, [r2, #300]
	str	fp, [r2, #304]
	str	fp, [r2, #308]
	str	r6, [r2, #312]
	str	r9, [r2, #24]
	str	r2, [r1, #-4]
	str	r5, [r8, #432]
	str	r4, [r1, #4]
	str	lr, [r1, #20]
	str	r3, [r1, #28]
	bl	platform_driver_register
.L11991:
	ldr	r3, [sp, #8]
	cmp	r3, #0
	beq	.L11995
	ldr	r6, .L12024+4
	movw	r7, #:lower16:kmalloc_caches
	mov	r4, #65024
	movw	r9, #:lower16:gbam2bam_connect_work
	movw	r3, #:lower16:gbam2bam_disconnect_work
	movt	r3, #:upper16:gbam2bam_disconnect_work
	movt	r7, #:upper16:kmalloc_caches
	movt	r4, 65535
	movt	r9, #:upper16:gbam2bam_connect_work
	mov	r5, #0
	str	r3, [sp, #12]
.L11998:
	ldr	ip, [r8, #4040]
	mov	r2, #348
	movw	r1, #32976
	ldr	lr, [r7, #36]
	mov	r3, #16
	add	ip, ip, #1
	subs	r0, lr, #0
	str	ip, [r8, #4040]
	beq	.L11996
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L11997
.L11996:
	add	lr, r3, #304
	ldr	r0, [sp, #8]
	str	r5, [r3]
	movw	r1, #:lower16:gbam2bam_suspend_work
	movw	r2, #:lower16:gbam2bam_resume_work
	str	r3, [r3, #76]
	add	r5, r5, #1
	mov	fp, #0
	str	lr, [r3, #304]
	add	r10, r3, #288
	add	ip, r3, #320
	str	lr, [r3, #308]
	ldr	lr, [sp, #12]
	movt	r1, #:upper16:gbam2bam_suspend_work
	movt	r2, #:upper16:gbam2bam_resume_work
	cmp	r5, r0
	str	fp, [r3, #4]
	add	r0, r3, #336
	str	fp, [r3, #8]
	str	r4, [r3, #284]
	str	r10, [r3, #288]
	str	r10, [r3, #292]
	str	r9, [r3, #296]
	str	r4, [r3, #300]
	str	lr, [r3, #312]
	str	r4, [r3, #316]
	str	ip, [r3, #320]
	str	ip, [r3, #324]
	str	r1, [r3, #328]
	str	r4, [r3, #332]
	str	r0, [r3, #336]
	str	r0, [r3, #340]
	str	r2, [r3, #344]
	str	r3, [r6], #4
	bne	.L11998
.L11995:
	movw	r0, #:lower16:.LC769
	mov	r1, #0
	movt	r0, #:upper16:.LC769
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r8, #2656]
	beq	.L12001
	cmn	r0, #4096
	bhi	.L12001
	ldr	ip, .L12024+8
	movw	r0, #:lower16:.LC159
	mov	r3, #0
	movt	r0, #:upper16:.LC159
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L12002
	cmn	r0, #4096
	bhi	.L12002
.L12001:
	mov	r0, #0
.L11985:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12006:
	mov	r2, #16
	b	.L11992
.L12002:
	ldr	r0, [r8, #2656]
	bl	debugfs_remove
	mov	r3, #0
	mov	r0, r3
	str	r3, [r8, #2656]
	b	.L11985
.L12023:
	ldr	r3, [r8, #424]
	movw	r0, #:lower16:.LC760
	movt	r0, #:upper16:.LC760
	ldr	r1, .L12024+12
	sub	r3, r3, #1
	str	r3, [r8, #424]
	bl	printk
.L11999:
	ldr	r3, [r8, #424]
	cmp	r3, #0
	ble	.L11994
	ldr	r0, [r8, #428]
	cmp	r0, #0
	beq	.L11994
	bl	kfree
	ldr	r0, .L12024
	bl	platform_driver_unregister
.L11994:
	ldr	r3, [r8, #4040]
	cmp	r3, #0
	ble	.L12004
	ldr	r5, .L12024+4
	mov	r4, #0
.L12005:
	ldr	r0, [r5, r4, lsl #2]
	add	r4, r4, #1
	bl	kfree
	ldr	r3, [r8, #4040]
	cmp	r4, r3
	blt	.L12005
.L12004:
	ldr	r0, [r8, #2748]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L11985
.L11997:
	ldr	r3, [r8, #4040]
	movw	r0, #:lower16:.LC760
	mov	r2, r5
	ldr	r1, .L12024+12
	movt	r0, #:upper16:.LC760
	sub	r3, r3, #1
	str	r3, [r8, #4040]
	bl	printk
	b	.L11999
.L11986:
	movw	r0, #:lower16:.LC766
	ldr	r1, .L12024+12
	mov	r2, r4
	movt	r0, #:upper16:.LC766
	ldr	r3, [sp, #8]
	bl	printk
	mvn	r0, #21
	b	.L11985
.L11989:
	movw	r0, #:lower16:.LC768
	ldr	r1, .L12024+12
	movt	r0, #:upper16:.LC768
	bl	printk
	mvn	r0, #11
	b	.L11985
.L12025:
	.align	2
.L12024:
	.word	.LANCHOR1+432
	.word	.LANCHOR1+3612
	.word	.LANCHOR3-1168
	.word	.LANCHOR3-1180
	.fnend
	.size	gbam_setup, .-gbam_setup
	.align	2
	.global	gbam_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_cleanup, %function
gbam_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #2656]
	b	debugfs_remove_recursive
	.fnend
	.size	gbam_cleanup, .-gbam_cleanup
	.align	2
	.global	gbam_suspend
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_suspend, %function
gbam_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	sub	r2, r2, #6
	cmp	r2, #1
	bls	.L12029
	bx	lr
.L12029:
	movw	r2, #:lower16:.LANCHOR1
	mov	r0, #4
	movt	r2, #:upper16:.LANCHOR1
	add	r3, r2, r1, lsl #2
	ldr	r1, [r2, #2748]
	ldr	r2, [r3, #3612]
	add	r2, r2, #316
	b	queue_work_on
	.fnend
	.size	gbam_suspend, .-gbam_suspend
	.align	2
	.global	gbam_resume
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_resume, %function
gbam_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	sub	r2, r2, #6
	cmp	r2, #1
	bls	.L12032
	bx	lr
.L12032:
	movw	r2, #:lower16:.LANCHOR1
	mov	r0, #4
	movt	r2, #:upper16:.LANCHOR1
	add	r3, r2, r1, lsl #2
	ldr	r1, [r2, #2748]
	ldr	r2, [r3, #3612]
	add	r2, r2, #332
	b	queue_work_on
	.fnend
	.size	gbam_resume, .-gbam_resume
	.align	2
	.global	gsmd_ctrl_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_connect, %function
gsmd_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	uxtb	r3, r1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	cmp	r3, #5
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bhi	.L12034
	movw	r4, #:lower16:.LANCHOR1
	mov	r2, #84
	movt	r4, #:upper16:.LANCHOR1
	mla	r3, r2, r3, r4
	ldr	r3, [r3, #512]
	cmp	r3, #0
	beq	.L12034
	cmp	r0, #0
	mov	r5, r0
	beq	.L12043
	mla	r1, r2, r1, r4
	ldr	r6, [r1, #512]
	add	r7, r6, #108
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:grmnet_ctrl_smd_send_cpkt_tomodem
	movw	r3, #:lower16:gsmd_ctrl_send_cbits_tomodem
	str	r5, [r6, #104]
	movt	r2, #:upper16:grmnet_ctrl_smd_send_cpkt_tomodem
	movt	r3, #:upper16:gsmd_ctrl_send_cbits_tomodem
	mov	r1, r0
	mov	r0, r7
	strd	r2, [r5, #96]
	bl	_raw_spin_unlock_irqrestore
	add	r2, r6, #112
	mov	r3, #0
	ldr	r1, [r4, #2700]
	mov	r0, #4
	bl	queue_delayed_work_on
	mov	r0, #0
.L12033:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12034:
	movw	r0, #:lower16:.LC770
	mov	r2, r1
	ldr	r1, .L12044
	movt	r0, #:upper16:.LC770
	bl	printk
	mvn	r0, #18
	b	.L12033
.L12043:
	movw	r0, #:lower16:.LC764
	ldr	r1, .L12044
	movt	r0, #:upper16:.LC764
	bl	printk
	mvn	r0, #18
	b	.L12033
.L12045:
	.align	2
.L12044:
	.word	.LANCHOR3-1060
	.fnend
	.size	gsmd_ctrl_connect, .-gsmd_ctrl_connect
	.align	2
	.global	gsmd_ctrl_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_disconnect, %function
gsmd_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #5
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bhi	.L12047
	movw	r8, #:lower16:.LANCHOR1
	mov	r3, #84
	movt	r8, #:upper16:.LANCHOR1
	mla	r3, r3, r1, r8
	ldr	r5, [r3, #512]
	cmp	r5, #0
	beq	.L12047
	cmp	r0, #0
	beq	.L12062
	add	r9, r5, #108
	mov	r4, r0
	mov	r0, r9
	add	r7, r5, #40
	bl	_raw_spin_lock_irqsave
	mov	r3, #0
	mov	r10, r0
	str	r3, [r5, #104]
	str	r3, [r4, #96]
	str	r3, [r4, #100]
	ldr	r4, [r5, #40]
	str	r3, [r5, #88]
	cmp	r7, r4
	beq	.L12050
.L12051:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
	ldr	r4, [r5, #40]
	cmp	r4, r7
	bne	.L12051
.L12050:
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	add	r1, r5, #8
	mov	r0, #0
	bl	_test_and_clear_bit
	cmp	r0, #0
	bne	.L12063
.L12052:
	add	r2, r5, #164
	ldr	r1, [r8, #2700]
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r0, #4
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	queue_delayed_work_on
.L12063:
	ldr	r0, [r5]
	ldr	r1, [r5, #88]
	orr	r2, r1, #4
	mvn	r2, r2
	bl	smd_tiocmset
	b	.L12052
.L12062:
	movw	r0, #:lower16:.LC764
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC764
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, .L12064
	b	printk
.L12047:
	movw	r0, #:lower16:.LC770
	mov	r2, r1
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC770
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, .L12064
	b	printk
.L12065:
	.align	2
.L12064:
	.word	.LANCHOR3-1040
	.fnend
	.size	gsmd_ctrl_disconnect, .-gsmd_ctrl_disconnect
	.align	2
	.global	gsmd_ctrl_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_setup, %function
gsmd_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r0, #1
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	str	r1, [sp, #16]
	str	r2, [sp, #28]
	bhi	.L12089
	ldr	r3, [sp, #16]
	sub	r3, r3, #1
	cmp	r3, #2
	bhi	.L12090
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r3, [sp, #24]
	ldrb	r3, [r3, #2712]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L12091
.L12070:
	ldr	r2, [sp, #16]
	add	r1, r4, r4, lsl #1
	add	r3, r3, #1
	ldr	r0, [sp, #24]
	mov	r9, r1
	str	r1, [sp, #32]
	add	r2, r1, r2
	cmp	r1, r2
	strb	r3, [r0, #2712]
	bcs	.L12072
	movw	r2, #:lower16:grmnet_ctrl_smd_connect_w
	mov	r3, #84
	movt	r2, #:upper16:grmnet_ctrl_smd_connect_w
	movw	fp, #:lower16:kmalloc_caches
	mul	r3, r3, r1
	mov	r8, #65024
	movt	fp, #:upper16:kmalloc_caches
	str	r2, [sp, #20]
	ldr	r2, .L12094
	movt	r8, 65535
	mov	r10, #0
	str	r3, [sp, #36]
	add	r6, r2, r3
	b	.L12076
.L12093:
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L12092
.L12073:
	add	ip, r4, #116
	mov	r3, r5
	str	r9, [r4, #100]
	mov	r2, r5
	mov	r1, r5
	str	r5, [r4, #108]
	add	r0, r4, #128
	str	r8, [r4, #112]
	ldr	r10, [sp, #12]
	str	ip, [r4, #116]
	add	r6, r6, #84
	str	ip, [r4, #120]
	ldr	ip, [sp, #20]
	str	ip, [r4, #124]
	bl	init_timer_key
	movw	ip, #:lower16:grmnet_ctrl_smd_disconnect_w
	add	r0, r4, #168
	str	r7, [r4, #144]
	movt	ip, #:upper16:grmnet_ctrl_smd_disconnect_w
	add	r3, r4, #112
	mov	r2, r5
	mov	r1, r5
	str	r3, [r4, #148]
	mov	r3, r5
	str	r8, [r4, #164]
	str	r0, [r4, #168]
	str	r0, [r4, #172]
	add	r0, r4, #180
	str	ip, [r4, #176]
	bl	init_timer_key
	movw	r3, #:lower16:.LANCHOR3
	add	r2, r4, #164
	str	r4, [r4, #84]
	movt	r3, #:upper16:.LANCHOR3
	movw	r1, #:lower16:.LC775
	str	r7, [r4, #196]
	add	r3, r3, r9, lsl #2
	movt	r1, #:upper16:.LC775
	str	r2, [r4, #200]
	add	r0, r4, #12
	ldr	r2, .L12094+4
	ldr	r3, [r3, #-1000]
	add	r9, r9, #1
	str	r3, [r4, #4]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC776
	ldr	r2, .L12094+4
	add	r0, r4, #24
	movt	r1, #:upper16:.LC776
	bl	__init_waitqueue_head
	movw	r0, #:lower16:grmnet_ctrl_smd_read_w
	movw	r1, #:lower16:grmnet_ctrl_smd_write_w
	ldr	r7, [sp, #16]
	movt	r0, #:upper16:grmnet_ctrl_smd_read_w
	movw	r2, #:lower16:grmnet_ctrl_smd_ch_probe
	str	r8, [r4, #52]
	movw	r3, #:lower16:grmnet_ctrl_smd_ch_remove
	add	lr, r4, #40
	movt	r3, #:upper16:grmnet_ctrl_smd_ch_remove
	add	ip, r4, #56
	str	r0, [r4, #64]
	movt	r1, #:upper16:grmnet_ctrl_smd_write_w
	add	r0, r4, #72
	movt	r2, #:upper16:grmnet_ctrl_smd_ch_probe
	str	lr, [r4, #40]
	cmp	r10, r7
	str	lr, [r4, #44]
	str	ip, [r4, #56]
	str	ip, [r4, #60]
	str	r8, [r4, #68]
	str	r0, [r4, #72]
	str	r0, [r4, #76]
	str	r1, [r4, #80]
	str	r4, [r6, #-84]
	strd	r2, [r6, #-80]
	ldr	r3, [r4, #4]
	str	r3, [r6, #-60]
	str	r5, [r6, #-52]
	beq	.L12072
.L12076:
	ldr	r3, [fp, #32]
	mov	r5, #0
	add	r0, r10, #1
	movw	r7, #:lower16:delayed_work_timer_fn
	mov	r2, #216
	str	r0, [sp, #12]
	movt	r7, #:upper16:delayed_work_timer_fn
	movw	r1, #32976
	cmp	r3, r5
	mov	r0, r3
	bne	.L12093
	mov	r4, #16
	b	.L12073
.L12072:
	ldr	r3, [sp, #28]
	mov	r0, #0
	cmp	r3, #0
	ldrne	r2, [sp, #32]
	strbne	r2, [r3]
.L12066:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12091:
	movw	r0, #:lower16:.LC773
	str	r3, [sp]
	mov	r2, #1
	movt	r0, #:upper16:.LC773
	mov	r1, #10
	bl	__alloc_workqueue_key
	ldr	r3, [sp, #24]
	cmp	r0, #0
	str	r0, [r3, #2700]
	beq	.L12071
	ldrb	r3, [r3, #2712]	@ zero_extendqisi2
	b	.L12070
.L12092:
	movw	r0, #:lower16:.LC760
	mov	r2, r9
	ldr	r1, .L12094+8
	movt	r0, #:upper16:.LC760
	bl	printk
	cmp	r10, r5
	beq	.L12075
	ldr	r3, [sp, #36]
	add	r5, r3, #4
	ldr	r3, .L12094
	add	r5, r3, r5
.L12078:
	ldr	r3, [r5, #-4]
	add	r4, r4, #1
	subs	r0, r3, #0
	beq	.L12077
	bl	kfree
	mov	r0, r5
	bl	platform_driver_unregister
.L12077:
	cmp	r10, r4
	add	r5, r5, #84
	bne	.L12078
.L12075:
	ldr	r2, [sp, #24]
	ldrb	r3, [r2, #2712]	@ zero_extendqisi2
	sub	r3, r3, #1
	uxtb	r3, r3
	cmp	r3, #0
	strb	r3, [r2, #2712]
	mvnne	r0, #11
	bne	.L12066
	ldr	r0, [r2, #2700]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L12066
.L12071:
	movw	r0, #:lower16:.LC774
	ldr	r1, .L12094+8
	movt	r0, #:upper16:.LC774
	bl	printk
	mvn	r0, #11
	b	.L12066
.L12090:
	movw	r0, #:lower16:.LC772
	ldr	r1, .L12094+8
	movt	r0, #:upper16:.LC772
	ldr	r2, [sp, #16]
	bl	printk
	mvn	r0, #21
	b	.L12066
.L12089:
	movw	r0, #:lower16:.LC771
	mov	r2, r4
	ldr	r1, .L12094+8
	movt	r0, #:upper16:.LC771
	bl	printk
	mvn	r0, #21
	b	.L12066
.L12095:
	.align	2
.L12094:
	.word	.LANCHOR1+512
	.word	.LANCHOR1+4044
	.word	.LANCHOR3-1016
	.fnend
	.size	gsmd_ctrl_setup, .-gsmd_ctrl_setup
	.align	2
	.global	gqti_ctrl_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_connect, %function
gqti_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L12103
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r4, [r3, #1016]
	add	r6, r4, #52
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:grmnet_ctrl_qti_send_cpkt_tomodem
	movw	r3, #:lower16:gqti_ctrl_notify_modem
	str	r5, [r4]
	movt	r2, #:upper16:grmnet_ctrl_qti_send_cpkt_tomodem
	movt	r3, #:upper16:gqti_ctrl_notify_modem
	mov	r1, r0
	mov	r0, r6
	strd	r2, [r5, #96]
	bl	_raw_spin_unlock_irqrestore
	mov	r1, #1
	add	r0, r4, #32
	mov	r2, r1
	mov	r3, #0
	str	r1, [r4, #8]
	mov	r1, #3
	bl	__wake_up
	cmp	r4, #0
	beq	.L12101
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L12096
	ldr	r4, [r0, #108]
	cmp	r4, #0
	beq	.L12101
	blx	r4
	mov	r0, #0
.L12096:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12101:
	mov	r0, r4
	b	.L12096
.L12103:
	movw	r0, #:lower16:.LC764
	ldr	r1, .L12104
	movt	r0, #:upper16:.LC764
	bl	printk
	mvn	r0, #18
	b	.L12096
.L12105:
	.align	2
.L12104:
	.word	.LANCHOR3-976
	.fnend
	.size	gqti_ctrl_connect, .-gqti_ctrl_connect
	.align	2
	.global	gqti_ctrl_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_disconnect, %function
gqti_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r3, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	subs	r6, r0, #0
	movt	r3, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r5, [r3, #1016]
	beq	.L12122
	cmp	r5, #0
	beq	.L12108
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L12108
	ldr	r3, [r0, #104]
	cmp	r3, #0
	beq	.L12108
	blx	r3
.L12108:
	mov	r4, #0
	mov	r7, r5
	add	r8, r5, #52
	str	r4, [r5, #8]
	mov	r0, r8
	str	r4, [r5, #12]
	bl	_raw_spin_lock_irqsave
	str	r4, [r7], #44
	mov	r9, r0
	str	r4, [r6, #96]
	str	r4, [r6, #100]
	ldr	r4, [r5, #44]
	cmp	r4, r7
	beq	.L12109
.L12110:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
	ldr	r4, [r5, #44]
	cmp	r4, r7
	bne	.L12110
.L12109:
	mov	r0, r8
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	rmnet_ctrl_queue_notify
.L12122:
	movw	r0, #:lower16:.LC764
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC764
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, .L12123
	b	printk
.L12124:
	.align	2
.L12123:
	.word	.LANCHOR3-956
	.fnend
	.size	gqti_ctrl_disconnect, .-gqti_ctrl_disconnect
	.align	2
	.global	ghsic_ctrl_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_connect, %function
ghsic_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR1
	clz	r3, r0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	ip, #:upper16:.LANCHOR1
	lsr	r3, r3, #5
	strd	r6, [sp, #8]
	ldr	r2, [ip, #1020]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	cmp	r1, r2
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L12132
	mov	r2, #104
	mla	r1, r2, r1, ip
	ldr	r4, [r1, #1024]
	cmp	r4, #0
	beq	.L12133
	add	r7, r4, #4
	mov	r6, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #48]
	mov	r1, r0
	cmp	r3, #0
	beq	.L12134
.L12129:
	cmp	r3, #1
	bne	.L12130
	ldr	r0, [r6, #92]
	movw	r2, #:lower16:ghsic_send_cpkt_tomodem
	movw	r3, #:lower16:ghsic_send_cbits_tomodem
	movt	r2, #:upper16:ghsic_send_cpkt_tomodem
	movt	r3, #:upper16:ghsic_send_cbits_tomodem
	str	r0, [r4, #52]
	strd	r2, [r6, #96]
.L12130:
	mov	r5, #0
	mov	r0, r7
	str	r6, [r4, #8]
	str	r5, [r4, #96]
	str	r5, [r4, #100]
	str	r5, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
	add	r2, r4, #16
	mov	r0, #4
	ldr	r1, [r4, #12]
	bl	queue_work_on
	mov	r0, r5
.L12125:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12134:
	movw	r3, #:lower16:ghsic_send_cbits_tomodem
	movt	r3, #:upper16:ghsic_send_cbits_tomodem
	str	r3, [r6, #140]
	ldr	r3, [r4, #48]
	b	.L12129
.L12132:
	movw	r0, #:lower16:.LC92
	mov	r2, r1
	ldr	r1, .L12135
	movt	r0, #:upper16:.LC92
	bl	printk
	mvn	r0, #18
	b	.L12125
.L12133:
	movw	r0, #:lower16:.LC12
	ldr	r1, .L12135
	movt	r0, #:upper16:.LC12
	bl	printk
	mvn	r0, #18
	b	.L12125
.L12136:
	.align	2
.L12135:
	.word	.LANCHOR3-932
	.fnend
	.size	ghsic_ctrl_connect, .-ghsic_ctrl_connect
	.align	2
	.global	ghsic_ctrl_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_disconnect, %function
ghsic_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	ip, #104
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r3, #1020]
	mla	r3, ip, r1, r3
	ldr	r4, [r3, #1024]
	cmp	r1, r2
	bhi	.L12143
	clz	r3, r4
	cmp	r0, #0
	lsr	r3, r3, #5
	moveq	r5, #1
	movne	r5, r3
	cmp	r5, #0
	bne	.L12144
	ldr	r8, [r4, #48]
	add	r7, r4, #4
	mov	r6, r0
	mov	r0, r7
	cmp	r8, #0
	beq	.L12145
	bl	_raw_spin_lock_irqsave
	str	r5, [r6, #96]
	str	r5, [r6, #100]
.L12141:
	mov	r3, #0
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	str	r3, [r4, #52]
	str	r3, [r4, #88]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	add	r2, r4, #32
	mov	r0, #4
	ldr	r1, [r4, #12]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	queue_work_on
.L12145:
	bl	_raw_spin_lock_irqsave
	str	r8, [r6, #140]
	b	.L12141
.L12143:
	movw	r0, #:lower16:.LC92
	mov	r2, r1
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC92
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L12146
	b	printk
.L12144:
	movw	r0, #:lower16:.LC764
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC764
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L12146
	b	printk
.L12147:
	.align	2
.L12146:
	.word	.LANCHOR3-912
	.fnend
	.size	ghsic_ctrl_disconnect, .-ghsic_ctrl_disconnect
	.align	2
	.global	ghsic_ctrl_set_port_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_set_port_name, %function
ghsic_ctrl_set_port_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r2, [r4, #4044]
	str	lr, [sp, #12]
	cmp	r2, #3
	bhi	.L12154
	mov	r3, r0
	add	r5, r4, #1024
	mov	r0, #104
	cmp	r3, #0
	movne	r1, r3
	mla	r2, r0, r2, r5
	add	r0, r2, #84
	mov	r2, #20
	bl	strlcpy
	ldr	r0, [r4, #4044]
	mov	r3, #104
	movw	r1, #:lower16:.LC778
	movt	r1, #:upper16:.LC778
	mov	r2, #20
	mla	r0, r3, r0, r5
	add	r0, r0, #84
	bl	strlcat
	ldr	r3, [r4, #4044]
	ldr	r6, [sp, #8]
	add	r3, r3, #1
	str	r3, [r4, #4044]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12154:
	movw	r0, #:lower16:.LC777
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC777
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, .L12155
	b	printk
.L12156:
	.align	2
.L12155:
	.word	.LANCHOR3-888
	.fnend
	.size	ghsic_ctrl_set_port_name, .-ghsic_ctrl_set_port_name
	.align	2
	.global	ghsic_ctrl_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_setup, %function
ghsic_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #52
	sub	sp, sp, #52
	str	r3, [sp, #8]
	ldr	r3, [r3, #1020]
	str	r1, [sp, #16]
	add	r1, r3, r0
	cmp	r1, #4
	str	r3, [sp, #36]
	str	r3, [sp, #40]
	movle	r3, #0
	movgt	r3, #1
	cmp	r0, #0
	str	r1, [sp, #12]
	moveq	r3, #1
	cmp	r3, #0
	bne	.L12174
	ldr	r3, [sp, #12]
	ldr	r2, [sp, #36]
	cmp	r2, r3
	bcs	.L12157
	movw	r1, #:lower16:kmalloc_caches
	mov	r3, #104
	movt	r1, #:upper16:kmalloc_caches
	mov	r0, #10
	mul	r3, r3, r2
	movw	ip, #:lower16:.LC228
	mov	fp, #65024
	str	r1, [sp, #20]
	ldr	r1, .L12177
	movt	r0, 2
	movt	ip, #:upper16:.LC228
	movt	fp, 65535
	add	r5, r3, #84
	mov	r6, r2
	str	r0, [sp, #24]
	str	ip, [sp, #28]
	str	fp, [sp, #32]
	add	r5, r1, r5
	str	r3, [sp, #44]
	mov	r3, r2
	b	.L12164
.L12176:
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L12161
.L12160:
	mov	r3, r7
	mov	r2, #1
	ldr	r1, [sp, #24]
	ldr	r0, [sp, #28]
	str	r7, [sp]
	movw	r8, #:lower16:ghsic_ctrl_status
	str	r5, [sp, #4]
	add	r10, r4, #20
	bl	__alloc_workqueue_key
	mov	r9, r0
	movw	r2, #:lower16:ghsic_ctrl_probe
	cmp	r9, #0
	movw	r3, #:lower16:ghsic_ctrl_remove
	movw	lr, #:lower16:ghsic_ctrl_connect_w
	movw	ip, #:lower16:gctrl_disconnect_w
	str	r9, [r4, #12]
	sub	r0, r5, #80
	movt	r2, #:upper16:ghsic_ctrl_probe
	movt	r3, #:upper16:ghsic_ctrl_remove
	movw	r1, #:lower16:ghsic_ctrl_receive
	movt	lr, #:upper16:ghsic_ctrl_connect_w
	movt	ip, #:upper16:gctrl_disconnect_w
	add	r9, r4, #36
	beq	.L12175
	ldr	fp, [sp, #16]
	movt	r1, #:upper16:ghsic_ctrl_receive
	movt	r8, #:upper16:ghsic_ctrl_status
	str	r7, [r4, #4]
	ldr	r7, [sp, #32]
	str	r6, [r4]
	add	r6, r6, #1
	cmp	fp, #0
	str	r7, [r4, #16]
	streq	r8, [r4, #76]
	str	r10, [r4, #20]
	str	r10, [r4, #24]
	str	lr, [r4, #28]
	str	r7, [r4, #32]
	str	r9, [r4, #36]
	str	r9, [r4, #40]
	str	ip, [r4, #44]
	str	fp, [r4, #48]
	str	r4, [r4, #56]
	str	r5, [r4, #64]
	str	r1, [r4, #72]
	str	r4, [r5, #-84]
	strd	r2, [r5, #-80]
	mov	r3, #0
	str	r5, [r5, #-60]
	add	r5, r5, #104
	str	r3, [r5, #-156]
	bl	platform_driver_register
	ldr	r3, [sp, #12]
	cmp	r3, r6
	bls	.L12157
	ldr	r3, [sp, #8]
	ldr	r3, [r3, #1020]
.L12164:
	ldr	r0, [sp, #8]
	mov	r7, #0
	add	r3, r3, #1
	ldr	r2, [sp, #20]
	movw	r1, #32976
	str	r3, [r0, #1020]
	ldr	ip, [r2, #28]
	mov	r2, #108
	cmp	ip, r7
	mov	r0, ip
	bne	.L12176
	mov	r4, #16
	b	.L12160
.L12175:
	movw	r0, #:lower16:.LC779
	mov	r2, r5
	ldr	r1, .L12177+4
	movt	r0, #:upper16:.LC779
	bl	printk
.L12161:
	ldr	r4, [sp, #8]
	movw	r0, #:lower16:.LC760
	mov	r2, r6
	movt	r0, #:upper16:.LC760
	ldr	r1, .L12177+8
	ldr	r3, [r4, #1020]
	sub	r3, r3, #1
	str	r3, [r4, #1020]
	bl	printk
	ldr	r2, [sp, #36]
	ldr	r3, [r4, #1020]
	cmp	r2, r3
	bcs	.L12166
	ldr	r7, [sp, #8]
	ldr	r3, [sp, #44]
	ldr	r5, [sp, #36]
	add	r4, r3, #4
	ldr	r3, .L12177
	add	r4, r3, r4
.L12167:
	ldr	r6, [r4, #-4]
	add	r5, r5, #1
	ldr	r0, [r6, #12]
	bl	destroy_workqueue
	mov	r0, r6
	bl	kfree
	mov	r0, r4
	add	r4, r4, #104
	bl	platform_driver_unregister
	ldr	r3, [r7, #1020]
	cmp	r5, r3
	bcc	.L12167
.L12166:
	mvn	r3, #11
	ldr	r2, [sp, #40]
	str	r3, [sp, #36]
	ldr	r3, [sp, #8]
	str	r2, [r3, #1020]
.L12157:
	ldr	r0, [sp, #36]
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12174:
	mov	r2, r0
	mvn	r3, #21
	ldr	r1, .L12177+8
	movw	r0, #:lower16:.LC772
	movt	r0, #:upper16:.LC772
	str	r3, [sp, #36]
	bl	printk
	b	.L12157
.L12178:
	.align	2
.L12177:
	.word	.LANCHOR1+1024
	.word	.LANCHOR3-840
	.word	.LANCHOR3-860
	.fnend
	.size	ghsic_ctrl_setup, .-ghsic_ctrl_setup
	.align	2
	.global	ghsic_data_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_disconnect, %function
ghsic_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR1
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	ip, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r2, [ip, #1440]
	mov	lr, #104
	mla	ip, lr, r1, ip
	cmp	r1, r2
	ldr	r4, [ip, #1444]
	bhi	.L12191
	clz	r3, r4
	cmp	r0, #0
	lsr	r3, r3, #5
	moveq	r5, #1
	movne	r5, r3
	cmp	r5, #0
	bne	.L12192
	mov	r0, r4
	bl	ghsic_data_free_buffers.part.45
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L12182
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #8]
	str	r5, [r3]
.L12182:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L12183
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	mov	r2, #0
	str	r2, [r3]
.L12183:
	mov	r5, #0
	add	r8, r4, #48
	mov	r0, r8
	add	r7, r4, #164
	str	r5, [r4, #4]
	add	r6, r4, #80
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r1, r7
	str	r5, [r4, #8]
	mov	r0, #2
	str	r5, [r4, #184]
	bl	_clear_bit
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	mov	r1, r7
	str	r5, [r4, #12]
	mov	r0, #1
	bl	_clear_bit
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	add	r2, r4, #104
	mov	r0, #4
	ldr	r1, [r4, #84]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	queue_work_on
.L12191:
	movw	r0, #:lower16:.LC92
	mov	r2, r1
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC92
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, .L12193
	b	printk
.L12192:
	movw	r0, #:lower16:.LC12
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC12
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, .L12193
	b	printk
.L12194:
	.align	2
.L12193:
	.word	.LANCHOR3-820
	.fnend
	.size	ghsic_data_disconnect, .-ghsic_data_disconnect
	.align	2
	.global	ghsic_data_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_connect, %function
ghsic_data_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	ip, #104
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r3, #1440]
	mla	r3, ip, r1, r3
	ldr	r4, [r3, #1444]
	cmp	r1, r2
	bhi	.L12204
	cmp	r4, #0
	cmpne	r0, #0
	mov	r5, r0
	beq	.L12205
	ldr	r3, [r4, #16]
	add	r7, r4, #48
	add	r6, r4, #80
	mov	r0, r7
	cmp	r3, #0
	beq	.L12206
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #84]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #88]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	ldr	r2, [r3, #-1792]
	ldr	r3, [r3, #-1788]
	str	r2, [r4, #20]
	str	r3, [r4, #52]
	ldr	r3, [r5, #84]
	str	r4, [r3]
	ldr	r3, [r5, #88]
	str	r4, [r3]
.L12200:
	ldr	r3, [r4, #8]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12207
	ldr	r3, [r4, #12]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12208
	mov	r3, #1
	mov	r0, r7
	str	r3, [r4, #4]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #192]
	mov	r0, r7
	str	r5, [r4, #196]
	str	r5, [r4, #200]
	str	r5, [r4, #216]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #188]
	mov	r0, r6
	str	r5, [r4, #204]
	str	r5, [r4, #208]
	str	r5, [r4, #212]
	bl	_raw_spin_unlock_irqrestore
	add	r2, r4, #88
	mov	r0, #4
	ldr	r1, [r4, #84]
	bl	queue_work_on
.L12195:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12206:
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #88]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #92]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	ldr	r2, [r3, #-1800]
	ldr	r3, [r3, #-1796]
	str	r2, [r4, #20]
	str	r3, [r4, #52]
	ldr	r3, [r5, #88]
	str	r4, [r3]
	ldr	r3, [r5, #92]
	str	r4, [r3]
	b	.L12200
.L12207:
	movw	r0, #:lower16:.LC245
	ldr	r1, .L12209
	ldr	r2, [r4, #8]
	movt	r0, #:upper16:.LC245
	bl	printk
	b	.L12195
.L12208:
	movw	r0, #:lower16:.LC246
	ldr	r1, .L12209
	ldr	r2, [r4, #12]
	movt	r0, #:upper16:.LC246
	bl	printk
	ldr	r0, [r4, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L12195
.L12205:
	movw	r0, #:lower16:.LC12
	ldr	r1, .L12209
	mvn	r5, #18
	movt	r0, #:upper16:.LC12
	bl	printk
	b	.L12195
.L12204:
	movw	r0, #:lower16:.LC92
	mov	r2, r1
	ldr	r1, .L12209
	movt	r0, #:upper16:.LC92
	mvn	r5, #18
	bl	printk
	b	.L12195
.L12210:
	.align	2
.L12209:
	.word	.LANCHOR3-796
	.fnend
	.size	ghsic_data_connect, .-ghsic_data_connect
	.align	2
	.global	ghsic_data_set_port_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_set_port_name, %function
ghsic_data_set_port_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r2, [r4, #4048]
	str	lr, [sp, #12]
	cmp	r2, #3
	bhi	.L12217
	ldr	r5, .L12218
	mov	r3, r0
	mov	r0, #104
	cmp	r3, #0
	movne	r1, r3
	mla	r2, r0, r2, r5
	add	r0, r2, #84
	mov	r2, #20
	bl	strlcpy
	ldr	r0, [r4, #4048]
	mov	r3, #104
	movw	r1, #:lower16:.LC780
	movt	r1, #:upper16:.LC780
	mov	r2, #20
	mla	r0, r3, r0, r5
	add	r0, r0, #84
	bl	strlcat
	ldr	r3, [r4, #4048]
	ldr	r6, [sp, #8]
	add	r3, r3, #1
	str	r3, [r4, #4048]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12217:
	movw	r0, #:lower16:.LC777
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC777
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, .L12218+4
	b	printk
.L12219:
	.align	2
.L12218:
	.word	.LANCHOR1+1444
	.word	.LANCHOR3-776
	.fnend
	.size	ghsic_data_set_port_name, .-ghsic_data_set_port_name
	.align	2
	.global	ghsic_data_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_setup, %function
ghsic_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #60
	sub	sp, sp, #60
	str	r3, [sp, #16]
	ldr	r3, [r3, #1440]
	str	r1, [sp, #28]
	add	r1, r3, r0
	cmp	r1, #4
	str	r3, [sp, #44]
	str	r3, [sp, #48]
	movle	r3, #0
	movgt	r3, #1
	cmp	r0, #0
	str	r1, [sp, #24]
	moveq	r3, #1
	cmp	r3, #0
	bne	.L12236
	ldr	r3, [sp, #24]
	ldr	r7, [sp, #44]
	cmp	r7, r3
	bcs	.L12220
	movw	r1, #:lower16:kmalloc_caches
	mov	r3, #104
	movt	r1, #:upper16:kmalloc_caches
	mov	r0, #10
	mul	lr, r3, r7
	movw	ip, #:lower16:.LC228
	mov	r8, #65024
	str	r1, [sp, #32]
	ldr	r1, .L12240
	movt	r0, 2
	movt	ip, #:upper16:.LC228
	movt	r8, 65535
	add	r2, lr, #84
	mov	r3, r7
	str	r0, [sp, #36]
	mov	r4, r7
	mov	r5, r8
	str	ip, [sp, #40]
	str	lr, [sp, #52]
	add	fp, r1, r2
	b	.L12226
.L12239:
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L12237
.L12223:
	mov	r3, r7
	mov	r2, #1
	ldr	r1, [sp, #36]
	ldr	r0, [sp, #40]
	stm	sp, {r7, fp}
	movw	r10, #:lower16:ghsic_data_connect_w
	bl	__alloc_workqueue_key
	mov	r3, r0
	movw	r9, #:lower16:ghsic_data_disconnect_w
	movw	r8, #:lower16:ghsic_data_write_tohost
	movw	ip, #:lower16:ghsic_data_write_tomdm
	str	r3, [sp, #12]
	movw	lr, #:lower16:ghsic_data_receive
	movw	r1, #:lower16:ghsic_data_unthrottle_tx
	str	r3, [r6, #84]
	movw	r3, #:lower16:ghsic_data_remove
	movw	r2, #:lower16:ghsic_data_probe
	movt	r3, #:upper16:ghsic_data_remove
	movt	r10, #:upper16:ghsic_data_connect_w
	movt	r9, #:upper16:ghsic_data_disconnect_w
	movt	r8, #:upper16:ghsic_data_write_tohost
	str	r3, [sp, #20]
	ldr	r3, [sp, #12]
	sub	r0, fp, #80
	movt	ip, #:upper16:ghsic_data_write_tomdm
	movt	lr, #:upper16:ghsic_data_receive
	movt	r1, #:upper16:ghsic_data_unthrottle_tx
	movt	r2, #:upper16:ghsic_data_probe
	cmp	r3, #0
	beq	.L12238
	add	r3, r6, #24
	str	r4, [r6]
	add	r4, r4, #1
	str	r3, [r6, #24]
	str	r3, [r6, #28]
	add	r3, r6, #32
	str	r7, [r6, #40]
	str	r3, [r6, #32]
	str	r3, [r6, #36]
	add	r3, r6, #56
	str	r7, [r6, #72]
	str	r3, [r6, #56]
	str	r3, [r6, #60]
	add	r3, r6, #64
	str	r7, [r6, #80]
	str	r7, [r6, #48]
	str	r3, [r6, #64]
	str	r3, [r6, #68]
	add	r3, r6, #92
	str	r7, [r6, #44]
	str	r7, [r6, #76]
	str	r3, [r6, #92]
	str	r3, [r6, #96]
	add	r3, r6, #108
	str	r5, [r6, #88]
	str	r10, [r6, #100]
	str	r3, [r6, #108]
	str	r3, [r6, #112]
	add	r3, r6, #124
	str	r5, [r6, #104]
	str	r9, [r6, #116]
	str	r3, [r6, #124]
	str	r3, [r6, #128]
	add	r3, r6, #140
	str	r5, [r6, #120]
	str	ip, [r6, #132]
	str	r3, [r6, #140]
	str	r3, [r6, #144]
	ldr	r3, [sp, #28]
	str	r5, [r6, #136]
	str	r8, [r6, #148]
	str	r3, [r6, #16]
	ldr	r3, [sp, #20]
	str	r6, [r6, #152]
	str	fp, [r6, #160]
	str	lr, [r6, #168]
	str	r1, [r6, #176]
	str	r6, [fp, #-84]
	str	r2, [fp, #-80]
	str	r3, [fp, #-76]
	str	fp, [fp, #-60]
	add	fp, fp, #104
	str	r7, [fp, #-156]
	bl	platform_driver_register
	ldr	r3, [sp, #24]
	cmp	r3, r4
	bls	.L12220
	ldr	r3, [sp, #16]
	ldr	r3, [r3, #1440]
.L12226:
	ldr	r0, [sp, #16]
	mov	r7, #0
	add	r3, r3, #1
	ldr	r2, [sp, #32]
	movw	r1, #32976
	str	r3, [r0, #1440]
	ldr	ip, [r2, #32]
	mov	r2, #220
	cmp	ip, r7
	mov	r0, ip
	bne	.L12239
	mov	r6, #16
	b	.L12223
.L12237:
	mov	r7, r4
.L12224:
	ldr	r4, [sp, #16]
	movw	r0, #:lower16:.LC760
	mov	r2, r7
	movt	r0, #:upper16:.LC760
	ldr	r1, .L12240+4
	ldr	r3, [r4, #1440]
	sub	r3, r3, #1
	str	r3, [r4, #1440]
	bl	printk
	ldr	r2, [sp, #44]
	ldr	r3, [r4, #1440]
	cmp	r2, r3
	bcs	.L12228
	ldr	r7, [sp, #16]
	ldr	r3, [sp, #52]
	ldr	r5, [sp, #44]
	add	r4, r3, #4
	ldr	r3, .L12240
	add	r4, r3, r4
.L12229:
	ldr	r6, [r4, #-4]
	add	r5, r5, #1
	ldr	r0, [r6, #84]
	bl	destroy_workqueue
	mov	r0, r6
	bl	kfree
	mov	r0, r4
	add	r4, r4, #104
	bl	platform_driver_unregister
	ldr	r3, [r7, #1440]
	cmp	r5, r3
	bcc	.L12229
.L12228:
	mvn	r3, #11
	ldr	r2, [sp, #48]
	str	r3, [sp, #44]
	ldr	r3, [sp, #16]
	str	r2, [r3, #1440]
.L12220:
	ldr	r0, [sp, #44]
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12238:
	movw	r0, #:lower16:.LC779
	mov	r2, fp
	ldr	r1, .L12240+8
	movt	r0, #:upper16:.LC779
	mov	r7, r4
	bl	printk
	mov	r0, r6
	bl	kfree
	b	.L12224
.L12236:
	mov	r2, r0
	mvn	r3, #21
	ldr	r1, .L12240+4
	movw	r0, #:lower16:.LC772
	movt	r0, #:upper16:.LC772
	str	r3, [sp, #44]
	bl	printk
	b	.L12220
.L12241:
	.align	2
.L12240:
	.word	.LANCHOR1+1444
	.word	.LANCHOR3-748
	.word	.LANCHOR3-728
	.fnend
	.size	ghsic_data_setup, .-ghsic_data_setup
	.align	2
	.global	ghsuart_ctrl_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_connect, %function
ghsuart_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	clz	r5, r0
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	lsr	r5, r5, #5
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r3, #1860]
	cmp	r1, r2
	orrhi	r5, r5, #1
	cmp	r5, #0
	bne	.L12250
	mov	r2, #84
	mla	r1, r2, r1, r3
	ldr	r4, [r1, #1864]
	cmp	r4, #0
	beq	.L12251
	add	r7, r4, #8
	mov	r6, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r6, #92]
	movw	r2, #:lower16:ghsuart_send_cpkt_tomodem
	movw	r3, #:lower16:ghsuart_send_cbits_tomodem
	movt	r2, #:upper16:ghsuart_send_cpkt_tomodem
	movt	r3, #:upper16:ghsuart_send_cbits_tomodem
	mov	r1, r0
	mov	r0, r7
	str	ip, [r4, #68]
	strd	r2, [r6, #96]
	str	r6, [r4, #12]
	str	r5, [r4, #96]
	str	r5, [r4, #100]
	str	r5, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #88]
	ubfx	r0, r0, #1, #1
	cmp	r0, #0
	beq	.L12242
	add	r2, r4, #36
	mov	r0, #4
	ldr	r1, [r4, #32]
	bl	queue_work_on
	mov	r0, r5
.L12242:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12250:
	movw	r0, #:lower16:.LC92
	mov	r2, r1
	ldr	r1, .L12252
	movt	r0, #:upper16:.LC92
	bl	printk
	mvn	r0, #18
	b	.L12242
.L12251:
	movw	r0, #:lower16:.LC12
	ldr	r1, .L12252
	movt	r0, #:upper16:.LC12
	bl	printk
	mvn	r0, #18
	b	.L12242
.L12253:
	.align	2
.L12252:
	.word	.LANCHOR3-704
	.fnend
	.size	ghsuart_ctrl_connect, .-ghsuart_ctrl_connect
	.align	2
	.global	ghsuart_ctrl_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_disconnect, %function
ghsuart_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #1860]
	cmp	r1, r2
	bhi	.L12259
	mov	r2, #84
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	cmp	r0, #0
	strd	r6, [sp, #8]
	mla	r1, r2, r1, r3
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r1, #1864]
	clz	r4, r5
	lsr	r4, r4, #5
	moveq	r4, #1
	cmp	r4, #0
	bne	.L12260
	add	r7, r5, #8
	mov	r6, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r4, [r6, #96]
	mov	r0, r7
	str	r4, [r6, #100]
	str	r4, [r5, #12]
	str	r4, [r5, #68]
	str	r4, [r5, #92]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	add	r2, r5, #52
	mov	r0, #4
	ldr	r1, [r5, #32]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	queue_work_on
.L12259:
	movw	r0, #:lower16:.LC92
	mov	r2, r1
	ldr	r1, .L12261
	movt	r0, #:upper16:.LC92
	b	printk
.L12260:
	movw	r0, #:lower16:.LC764
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC764
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L12261
	b	printk
.L12262:
	.align	2
.L12261:
	.word	.LANCHOR3-680
	.fnend
	.size	ghsuart_ctrl_disconnect, .-ghsuart_ctrl_disconnect
	.align	2
	.global	ghsuart_ctrl_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_setup, %function
ghsuart_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	ldr	r3, [r8, #1860]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	str	r1, [sp, #12]
	add	r1, r3, r0
	cmp	r1, #2
	str	r3, [sp, #20]
	str	r3, [sp, #24]
	movle	r3, #0
	movgt	r3, #1
	cmp	r0, #0
	str	r1, [sp, #8]
	moveq	r3, #1
	cmp	r3, #0
	bne	.L12279
	ldr	r3, [sp, #8]
	ldr	r1, [sp, #20]
	cmp	r1, r3
	bcs	.L12263
	ldr	r3, .L12283
	mov	r2, #84
	movw	r0, #:lower16:.LC228
	movt	r0, #:upper16:.LC228
	movw	r10, #:lower16:kmalloc_caches
	movw	r9, #:lower16:.LC781
	mov	fp, #10
	movt	r10, #:upper16:kmalloc_caches
	movt	r9, #:upper16:.LC781
	str	r0, [sp, #16]
	mla	r2, r2, r1, r3
	movt	fp, 2
	mov	r3, r1
	mov	r7, r1
	add	r2, r2, #4
	mov	r5, r2
	str	r2, [sp, #28]
	b	.L12269
.L12282:
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L12280
.L12266:
	mov	r3, r6
	mov	r2, #1
	ldr	r0, [sp, #16]
	mov	r1, fp
	stm	sp, {r6, r9}
	bl	__alloc_workqueue_key
	mov	r3, r0
	movw	r1, #:lower16:.LC387
	ldr	r2, .L12283+4
	cmp	r3, #0
	add	r0, r4, #20
	movt	r1, #:upper16:.LC387
	str	r3, [r4, #32]
	beq	.L12281
	ldr	r3, [sp, #12]
	str	r7, [r4]
	str	r3, [r4, #4]
	str	r6, [r4, #8]
	str	r6, [r4, #16]
	bl	__init_waitqueue_head
	mov	r3, #65024
	add	r2, r4, #40
	movt	r3, 65535
	movw	lr, #:lower16:ghsuart_ctrl_connect_w
	movt	lr, #:upper16:ghsuart_ctrl_connect_w
	movw	r0, #:lower16:ghsuart_ctrl_disconnect_w
	str	r3, [r4, #36]
	movw	r1, #:lower16:ghsuart_ctrl_receive
	add	ip, r4, #56
	str	r2, [r4, #40]
	movt	r0, #:upper16:ghsuart_ctrl_disconnect_w
	movt	r1, #:upper16:ghsuart_ctrl_receive
	str	r2, [r4, #44]
	movw	r2, #:lower16:ghsuart_ctrl_probe
	str	lr, [r4, #48]
	movt	r2, #:upper16:ghsuart_ctrl_probe
	mov	lr, #42
	str	r3, [r4, #52]
	movw	r3, #:lower16:ghsuart_ctrl_remove
	movt	r3, #:upper16:ghsuart_ctrl_remove
	str	ip, [r4, #56]
	str	ip, [r4, #60]
	str	r0, [r4, #64]
	mov	r0, r5
	add	r5, r5, #84
	str	r4, [r4, #72]
	str	lr, [r4, #76]
	str	r1, [r4, #84]
	str	r4, [r5, #-88]
	strd	r2, [r5, #-84]
	str	r9, [r5, #-64]
	str	r6, [r5, #-56]
	bl	platform_driver_register
	cmp	r0, #0
	blt	.L12276
	ldr	r3, [sp, #8]
	add	r7, r7, #1
	cmp	r3, r7
	bls	.L12263
	ldr	r3, [r8, #1860]
.L12269:
	ldr	ip, [r10, #28]
	mov	r6, #0
	add	r3, r3, #1
	mov	r2, #108
	movw	r1, #32976
	str	r3, [r8, #1860]
	cmp	ip, r6
	mov	r0, ip
	bne	.L12282
	mov	r4, #16
	b	.L12266
.L12276:
	mov	r4, r0
.L12267:
	ldr	r3, [r8, #1860]
	movw	r0, #:lower16:.LC760
	mov	r2, r7
	movt	r0, #:upper16:.LC760
	ldr	r1, .L12283+8
	sub	r3, r3, #1
	str	r3, [r8, #1860]
	bl	printk
	ldr	r2, [sp, #20]
	ldr	r3, [r8, #1860]
	cmp	r2, r3
	bcs	.L12271
	ldr	r6, [sp, #20]
	ldr	r5, [sp, #28]
.L12270:
	ldr	r7, [r5, #-4]
	add	r6, r6, #1
	ldr	r0, [r7, #32]
	bl	destroy_workqueue
	mov	r0, r5
	add	r5, r5, #84
	bl	platform_driver_unregister
	mov	r0, r7
	bl	kfree
	ldr	r3, [r8, #1860]
	cmp	r6, r3
	bcc	.L12270
.L12271:
	ldr	r3, [sp, #24]
	str	r4, [sp, #20]
	str	r3, [r8, #1860]
.L12263:
	ldr	r0, [sp, #20]
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12280:
	mvn	r4, #11
	b	.L12267
.L12281:
	movw	r2, #:lower16:.LC781
	movw	r0, #:lower16:.LC779
	ldr	r1, .L12283+12
	movt	r2, #:upper16:.LC781
	movt	r0, #:upper16:.LC779
	bl	printk
	mov	r0, r4
	mvn	r4, #11
	bl	kfree
	b	.L12267
.L12279:
	mov	r2, r0
	mvn	r3, #21
	ldr	r1, .L12283+8
	movw	r0, #:lower16:.LC772
	movt	r0, #:upper16:.LC772
	str	r3, [sp, #20]
	bl	printk
	b	.L12263
.L12284:
	.align	2
.L12283:
	.word	.LANCHOR1+1864
	.word	.LANCHOR1+3600
	.word	.LANCHOR3-656
	.word	.LANCHOR3-636
	.fnend
	.size	ghsuart_ctrl_setup, .-ghsuart_ctrl_setup
	.align	2
	.global	event_string
	.syntax unified
	.arm
	.fpu softvfp
	.type	event_string, %function
event_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #8
	bhi	.L12287
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r3, r3, r0, lsl #2
	ldr	r0, [r3, #-612]
	bx	lr
.L12287:
	movw	r0, #:lower16:.LC102
	movt	r0, #:upper16:.LC102
	bx	lr
	.fnend
	.size	event_string, .-event_string
	.align	2
	.global	ghsuart_data_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_disconnect, %function
ghsuart_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	ip, #84
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r2, [r3, #2032]
	mla	r3, ip, r1, r3
	ldr	r4, [r3, #2036]
	cmp	r1, r2
	bhi	.L12301
	clz	r3, r4
	cmp	r0, #0
	lsr	r3, r3, #5
	moveq	r5, #1
	movne	r5, r3
	cmp	r5, #0
	bne	.L12302
	mov	r6, r0
	mov	r0, r4
	bl	ghsuart_data_free_buffers.part.46
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L12291
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #8]
	str	r5, [r3]
.L12291:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L12292
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	mov	r2, #0
	str	r2, [r3]
.L12292:
	ldr	r5, [r4, #16]
	mov	r3, #0
	str	r3, [r4, #4]
	cmp	r5, r3
	beq	.L12303
.L12293:
	add	r8, r4, #72
	mov	r5, #0
	mov	r0, r8
	add	r7, r4, #184
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r1, r7
	str	r5, [r4, #8]
	mov	r0, #2
	str	r5, [r4, #192]
	add	r6, r4, #104
	bl	_clear_bit
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	mov	r1, r7
	str	r5, [r4, #12]
	mov	r0, #1
	bl	_clear_bit
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	add	r2, r4, #128
	mov	r0, #4
	ldr	r1, [r4, #108]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	queue_work_on
.L12303:
	add	r7, r4, #20
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r6, #140]
	mov	r0, r7
	str	r5, [r4, #24]
	str	r5, [r4, #196]
	bl	_raw_spin_unlock_irqrestore
	b	.L12293
.L12302:
	movw	r0, #:lower16:.LC12
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC12
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, .L12304
	b	printk
.L12301:
	movw	r0, #:lower16:.LC92
	mov	r2, r1
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC92
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, .L12304
	b	printk
.L12305:
	.align	2
.L12304:
	.word	.LANCHOR3-576
	.fnend
	.size	ghsuart_data_disconnect, .-ghsuart_data_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_disable, %function
frmnet_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	movw	r5, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r5, #:upper16:.LANCHOR1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r0, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #136]
	mov	r3, #0
	mov	r0, r4
	str	r3, [r2]
	str	r3, [r4, #120]
	bl	frmnet_purge_responses
	ldrb	r0, [r4, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
	add	r2, r3, r0
	add	r2, r5, r2, lsl #3
	ldr	r6, [r2, #2520]
	ldr	ip, [r2, #2524]
	sub	r1, ip, #1
	cmp	r1, #9
	movwhi	r2, #:lower16:.LC102
	movthi	r2, #:upper16:.LC102
	bhi	.L12307
	movw	r2, #:lower16:.LANCHOR2
	movt	r2, #:upper16:.LANCHOR2
	add	r2, r2, r1, lsl #2
	ldr	r2, [r2, #936]
.L12307:
	sub	lr, r6, #1
	cmp	lr, #9
	movwhi	r7, #:lower16:.LC102
	movthi	r7, #:upper16:.LC102
	bhi	.L12308
	movw	r1, #:lower16:.LANCHOR2
	movt	r1, #:upper16:.LANCHOR2
	add	r1, r1, lr, lsl #2
	ldr	r7, [r1, #936]
.L12308:
	add	r1, r3, r0
	sub	ip, ip, #3
	add	r1, r5, r1, lsl #3
	ldr	r1, [r1, #2532]
	cmp	ip, #7
	ldrls	pc, [pc, ip, asl #2]
	b	.L12309
.L12311:
	.word	.L12310
	.word	.L12312
	.word	.L12309
	.word	.L12309
	.word	.L12309
	.word	.L12313
	.word	.L12314
	.word	.L12315
.L12313:
	mov	r0, r4
	bl	ghsic_ctrl_disconnect
	ldrb	r0, [r4, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
.L12315:
	add	r3, r3, r0
	add	r5, r5, r3, lsl #3
	sub	r2, r6, #5
	ldr	r1, [r5, #2528]
	cmp	r2, #5
	ldrls	pc, [pc, r2, asl #2]
	b	.L12316
.L12318:
	.word	.L12317
	.word	.L12317
	.word	.L12317
	.word	.L12319
	.word	.L12320
	.word	.L12306
.L12306:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12320:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	ghsuart_data_disconnect
.L12319:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	ghsic_data_disconnect
.L12317:
	mov	r2, r6
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	uxtb	r1, r1
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	gbam_disconnect
.L12314:
	mov	r0, r4
	bl	ghsuart_ctrl_disconnect
	ldrb	r0, [r4, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L12315
.L12312:
	mov	r0, r4
	bl	gqti_ctrl_disconnect
	ldrb	r0, [r4, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L12315
.L12310:
	mov	r0, r4
	uxtb	r1, r1
	bl	gsmd_ctrl_disconnect
	ldrb	r0, [r4, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L12315
.L12309:
	movw	r0, #:lower16:.LC470
.L12325:
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC470
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L12326
	b	printk
.L12316:
	movw	r0, #:lower16:.LC470
	mov	r2, r7
	b	.L12325
.L12327:
	.align	2
.L12326:
	.word	.LANCHOR3-552
	.fnend
	.size	frmnet_disable, .-frmnet_disable
	.align	2
	.global	ghsuart_data_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_connect, %function
ghsuart_data_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	ip, #84
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r3, #2032]
	mla	r3, ip, r1, r3
	ldr	r4, [r3, #2036]
	cmp	r1, r2
	bhi	.L12337
	cmp	r4, #0
	cmpne	r0, #0
	mov	r5, r0
	beq	.L12338
	ldr	r3, [r4, #16]
	add	r7, r4, #72
	add	r6, r4, #104
	mov	r0, r7
	cmp	r3, #0
	beq	.L12339
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #84]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #88]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	ldr	r2, [r3, #-1776]
	ldr	r3, [r3, #-1772]
	str	r2, [r4, #44]
	str	r3, [r4, #76]
	ldr	r3, [r5, #84]
	str	r4, [r3]
	ldr	r3, [r5, #88]
	str	r4, [r3]
.L12333:
	ldr	r3, [r4, #8]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12340
	ldr	r3, [r4, #12]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L12341
	mov	r3, #1
	mov	r0, r7
	str	r3, [r4, #4]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #208]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #204]
	mov	r0, r6
	str	r5, [r4, #212]
	bl	_raw_spin_unlock_irqrestore
	add	r2, r4, #112
	mov	r0, #4
	ldr	r1, [r4, #108]
	bl	queue_work_on
.L12328:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12339:
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #88]
	mov	r1, r0
	mov	r0, r7
	add	r8, r4, #20
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #92]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR4
	mov	r0, r8
	movt	r3, #:upper16:.LANCHOR4
	ldr	r2, [r3, #-1784]
	ldr	r3, [r3, #-1780]
	str	r2, [r4, #44]
	str	r3, [r4, #76]
	ldr	r3, [r5, #88]
	str	r4, [r3]
	ldr	r3, [r5, #92]
	str	r4, [r3]
	bl	_raw_spin_lock_irqsave
	movw	r3, #:lower16:ghsuart_send_controlbits_tomodem
	mov	r1, r0
	movt	r3, #:upper16:ghsuart_send_controlbits_tomodem
	mov	r0, r8
	str	r3, [r5, #140]
	str	r5, [r4, #24]
	bl	_raw_spin_unlock_irqrestore
	b	.L12333
.L12340:
	movw	r0, #:lower16:.LC245
	ldr	r1, .L12342
	ldr	r2, [r4, #8]
	movt	r0, #:upper16:.LC245
	bl	printk
	b	.L12328
.L12341:
	movw	r0, #:lower16:.LC246
	ldr	r1, .L12342
	ldr	r2, [r4, #12]
	movt	r0, #:upper16:.LC246
	bl	printk
	ldr	r0, [r4, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L12328
.L12338:
	movw	r0, #:lower16:.LC12
	ldr	r1, .L12342
	mvn	r5, #18
	movt	r0, #:upper16:.LC12
	bl	printk
	b	.L12328
.L12337:
	movw	r0, #:lower16:.LC92
	mov	r2, r1
	ldr	r1, .L12342
	movt	r0, #:upper16:.LC92
	mvn	r5, #18
	bl	printk
	b	.L12328
.L12343:
	.align	2
.L12342:
	.word	.LANCHOR3-528
	.fnend
	.size	ghsuart_data_connect, .-ghsuart_data_connect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_set_alt, %function
frmnet_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #8
	sub	sp, sp, #8
	ldr	r5, [r0, #128]
	ldr	r2, [r0, #136]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L12345
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #136]
.L12345:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	subs	r7, r0, #0
	bne	.L12406
	ldr	r3, [r4, #136]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r7, r0, #0
	bne	.L12407
	ldr	r3, [r4, #136]
	str	r4, [r3]
	ldr	r2, [r4, #84]
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L12349
	ldr	r3, [r4, #88]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L12349
.L12350:
	mov	r3, #1
	mov	r6, r4
	str	r3, [r4, #120]
	ldr	r5, [r6, #144]!
	cmp	r5, r6
	beq	.L12344
.L12378:
	mov	r0, r4
	bl	frmnet_ctrl_response_available
	ldr	r5, [r5]
	cmp	r5, r6
	bne	.L12378
.L12344:
	mov	r0, r7
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12349:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L12352
	mov	r1, r4
	ldr	r2, [r4, #88]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L12352
	ldrb	r0, [r4, #116]	@ zero_extendqisi2
	movw	r5, #:lower16:.LANCHOR1
	ldr	r2, [r4, #128]
	movt	r5, #:upper16:.LANCHOR1
	lsl	r3, r0, #1
	ldr	r9, [r2]
	add	r2, r3, r0
	add	r2, r5, r2, lsl #3
	ldr	r6, [r2, #2520]
	ldr	r8, [r2, #2524]
	sub	r1, r8, #1
	cmp	r1, #9
	movwhi	r2, #:lower16:.LC102
	movthi	r2, #:upper16:.LC102
	bls	.L12408
.L12353:
	sub	ip, r6, #1
	cmp	ip, #9
	movwhi	r10, #:lower16:.LC102
	movthi	r10, #:upper16:.LC102
	bls	.L12409
.L12354:
	add	r1, r3, r0
	sub	ip, r8, #3
	add	r1, r5, r1, lsl #3
	ldr	r1, [r1, #2532]
	cmp	ip, #7
	ldrls	pc, [pc, ip, asl #2]
	b	.L12355
.L12357:
	.word	.L12356
	.word	.L12358
	.word	.L12355
	.word	.L12355
	.word	.L12355
	.word	.L12359
	.word	.L12360
	.word	.L12361
.L12360:
	mov	r0, r4
	bl	ghsuart_ctrl_connect
	subs	r2, r0, #0
	bne	.L12365
.L12405:
	ldrb	r0, [r4, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
.L12361:
	add	r3, r3, r0
	add	r5, r5, r3, lsl #3
	sub	r2, r6, #5
	ldr	r5, [r5, #2528]
	cmp	r2, #5
	ldrls	pc, [pc, r2, asl #2]
	b	.L12366
.L12368:
	.word	.L12367
	.word	.L12369
	.word	.L12370
	.word	.L12371
	.word	.L12372
	.word	.L12381
.L12409:
	movw	r1, #:lower16:.LANCHOR2
	movt	r1, #:upper16:.LANCHOR2
	add	r1, r1, ip, lsl #2
	ldr	r10, [r1, #936]
	b	.L12354
.L12408:
	movw	r2, #:lower16:.LANCHOR2
	movt	r2, #:upper16:.LANCHOR2
	add	r2, r2, r1, lsl #2
	ldr	r2, [r2, #936]
	b	.L12353
.L12359:
	mov	r0, r4
	bl	ghsic_ctrl_connect
	subs	r2, r0, #0
	beq	.L12405
	movw	r0, #:lower16:.LC784
	ldr	r1, .L12412
	mov	r7, r2
	movt	r0, #:upper16:.LC784
	bl	printk
	b	.L12350
.L12358:
	mov	r0, r4
	bl	gqti_ctrl_connect
	subs	r2, r0, #0
	beq	.L12405
	movw	r0, #:lower16:.LC783
	ldr	r1, .L12412
	mov	r7, r2
	movt	r0, #:upper16:.LC783
	bl	printk
	b	.L12350
.L12356:
	mov	r0, r4
	bl	gsmd_ctrl_connect
	subs	r2, r0, #0
	beq	.L12405
	movw	r0, #:lower16:.LC782
	ldr	r1, .L12412
	mov	r7, r2
	movt	r0, #:upper16:.LC782
	bl	printk
	b	.L12350
.L12381:
	mov	r7, #0
	b	.L12350
.L12372:
	mov	r1, r5
	mov	r0, r4
	bl	ghsuart_data_connect
	subs	r7, r0, #0
	beq	.L12350
	movw	r0, #:lower16:.LC789
	mov	r2, r7
	ldr	r1, .L12412
	movt	r0, #:upper16:.LC789
	bl	printk
	mov	r1, r5
	mov	r0, r4
	bl	ghsuart_ctrl_disconnect
	b	.L12350
.L12371:
	mov	r1, r5
	mov	r0, r4
	bl	ghsic_data_connect
	subs	r7, r0, #0
	beq	.L12350
	movw	r0, #:lower16:.LC788
	mov	r2, r7
	ldr	r1, .L12412
	movt	r0, #:upper16:.LC788
	bl	printk
	mov	r1, r5
	mov	r0, r4
	bl	ghsic_ctrl_disconnect
	b	.L12350
.L12370:
	mov	r3, r5
	mov	r2, #0
	ldr	r0, [r9, #28]
	mov	r1, #2
	uxtb	r10, r5
	bl	usb_bam_get_connection_idx
	mov	r6, r0
	mov	r3, r5
	ldr	r0, [r9, #28]
	mov	r2, #1
	mov	r1, #2
	bl	usb_bam_get_connection_idx
	orrs	r3, r0, r6
	bmi	.L12410
	uxtb	r0, r0
	uxtb	r3, r6
	mov	r2, #7
	mov	r1, r10
	str	r0, [sp]
	mov	r0, r4
	bl	gbam_connect
	subs	r5, r0, #0
	beq	.L12350
	movw	r0, #:lower16:.LC787
	mov	r2, r5
	ldr	r1, .L12412
	movt	r0, #:upper16:.LC787
	bl	printk
	cmp	r8, #4
	beq	.L12411
	mov	r1, r10
	mov	r0, r4
	mov	r7, r5
	bl	gsmd_ctrl_disconnect
	b	.L12350
.L12369:
	mov	r2, #0
	mov	r3, r5
	ldr	r0, [r9, #28]
	mov	r1, r2
	uxtb	r8, r5
	bl	usb_bam_get_connection_idx
	mov	r7, r0
	mov	r3, r5
	ldr	r0, [r9, #28]
	mov	r2, #1
	mov	r1, #0
	bl	usb_bam_get_connection_idx
	orrs	r3, r0, r7
	bmi	.L12373
	uxtb	r3, r7
	uxtb	r2, r0
.L12374:
	str	r2, [sp]
	mov	r1, r8
	mov	r0, r4
	mov	r2, r6
	bl	gbam_connect
	subs	r7, r0, #0
	beq	.L12350
	movw	r0, #:lower16:.LC787
	mov	r2, r7
	ldr	r1, .L12412
	movt	r0, #:upper16:.LC787
	bl	printk
	mov	r1, r8
	mov	r0, r4
	bl	gsmd_ctrl_disconnect
	b	.L12350
.L12367:
	mov	r2, #0
	uxtb	r8, r5
	mov	r3, r2
	b	.L12374
.L12406:
	ldr	r2, [r4, #136]
	mov	r0, #0
	movw	r1, #:lower16:.LC625
	movt	r1, #:upper16:.LC625
	mov	r3, r7
	str	r0, [r2, #28]
	ldr	r2, [r4, #136]
	ldr	r0, [r5]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L12344
.L12352:
	ldr	r2, [r4, #84]
	mov	r3, #0
	mvn	r7, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #88]
	str	r3, [r2, #28]
	b	.L12344
.L12407:
	ldr	r2, [r4, #136]
	movw	r0, #:lower16:.LC636
	mov	r3, r7
	ldr	r1, .L12412+4
	movt	r0, #:upper16:.LC636
	ldr	r2, [r2, #4]
	bl	printk
	b	.L12344
.L12373:
	movw	r0, #:lower16:.LC786
	ldr	r1, .L12412
	mov	r7, #0
	movt	r0, #:upper16:.LC786
	bl	printk
	mov	r1, r8
	mov	r0, r4
	bl	gsmd_ctrl_disconnect
	b	.L12350
.L12410:
	movw	r0, #:lower16:.LC786
	ldr	r1, .L12412
	mov	r7, #0
	movt	r0, #:upper16:.LC786
	bl	printk
	mov	r1, r10
	mov	r0, r4
	bl	gsmd_ctrl_disconnect
	b	.L12350
.L12411:
	mov	r0, r4
	mov	r7, r5
	bl	gqti_ctrl_disconnect
	b	.L12350
.L12366:
	movw	r0, #:lower16:.LC470
	mov	r2, r10
	ldr	r1, .L12412
	movt	r0, #:upper16:.LC470
	mvn	r7, #18
	bl	printk
	b	.L12350
.L12365:
	movw	r0, #:lower16:.LC785
	ldr	r1, .L12412
	mov	r7, r2
	movt	r0, #:upper16:.LC785
	bl	printk
	b	.L12350
.L12355:
	movw	r0, #:lower16:.LC470
	ldr	r1, .L12412
	mvn	r7, #18
	movt	r0, #:upper16:.LC470
	bl	printk
	b	.L12350
.L12413:
	.align	2
.L12412:
	.word	.LANCHOR3-488
	.word	.LANCHOR3-504
	.fnend
	.size	frmnet_set_alt, .-frmnet_set_alt
	.align	2
	.global	ghsuart_data_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_setup, %function
ghsuart_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	mov	r10, r1
	ldr	r3, [r9, #2032]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	add	r1, r3, r0
	str	r3, [sp, #20]
	cmp	r1, #4
	str	r3, [sp, #24]
	movle	r3, #0
	movgt	r3, #1
	cmp	r0, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L12433
	ldr	r0, [sp, #20]
	cmp	r0, r1
	bge	.L12414
	ldr	r3, .L12436
	mov	r2, #84
	mov	ip, #10
	movw	lr, #:lower16:.LC228
	sub	r1, r1, #1
	movt	ip, 2
	movt	lr, #:upper16:.LC228
	movw	fp, #:lower16:kmalloc_caches
	mov	r7, r0
	str	r1, [sp, #8]
	mla	r2, r2, r0, r3
	movt	fp, #:upper16:kmalloc_caches
	mov	r3, r0
	str	ip, [sp, #12]
	str	lr, [sp, #16]
	add	r2, r2, #4
	mov	r6, r2
	str	r2, [sp, #28]
	b	.L12422
.L12435:
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L12418
.L12417:
	ldr	r3, .L12436+4
	mov	r2, #1
	ldr	r1, [sp, #12]
	ldr	r0, [sp, #16]
	ldr	r8, [r3, r7, lsl #2]
	mov	r3, r5
	stm	sp, {r5, r8}
	bl	__alloc_workqueue_key
	mov	r3, r0
	movw	r1, #:lower16:.LC387
	ldr	r2, .L12436+8
	cmp	r3, #0
	add	r0, r4, #32
	movt	r1, #:upper16:.LC387
	str	r3, [r4, #108]
	beq	.L12434
	str	r7, [r4]
	str	r5, [r4, #20]
	str	r5, [r4, #28]
	str	r5, [r4, #104]
	str	r5, [r4, #72]
	bl	__init_waitqueue_head
	movw	ip, #:lower16:ghsuart_data_connect_w
	movw	r1, #:lower16:ghsuart_data_write_tomdm
	str	r10, [r4, #16]
	movt	ip, #:upper16:ghsuart_data_connect_w
	movt	r1, #:upper16:ghsuart_data_write_tomdm
	str	r5, [r4, #64]
	mov	r3, #65024
	movw	r2, #:lower16:ghsuart_data_write_tohost
	str	r5, [r4, #68]
	movt	r3, 65535
	movt	r2, #:upper16:ghsuart_data_write_tohost
	str	r5, [r4, #96]
	str	ip, [r4, #124]
	add	ip, r4, #116
	movw	r0, #:lower16:ghsuart_data_disconnect_w
	movt	r0, #:upper16:ghsuart_data_disconnect_w
	str	r1, [r4, #156]
	add	r1, r4, #80
	cmp	r10, #0
	mov	lr, #10
	str	ip, [r4, #116]
	str	ip, [r4, #120]
	add	ip, r4, #132
	str	r3, [r4, #112]
	str	r3, [r4, #128]
	str	ip, [r4, #132]
	str	ip, [r4, #136]
	add	ip, r4, #148
	str	r3, [r4, #144]
	str	r3, [r4, #160]
	movw	r3, #:lower16:ghsuart_data_remove
	str	ip, [r4, #148]
	movt	r3, #:upper16:ghsuart_data_remove
	str	ip, [r4, #152]
	add	ip, r4, #48
	str	r2, [r4, #172]
	movw	r2, #:lower16:ghsuart_data_probe
	str	ip, [r4, #48]
	movt	r2, #:upper16:ghsuart_data_probe
	str	ip, [r4, #52]
	add	ip, r4, #56
	strne	lr, [r4, #180]
	str	ip, [r4, #56]
	str	ip, [r4, #60]
	add	ip, r4, #88
	str	r1, [r4, #80]
	str	r1, [r4, #84]
	mov	r1, #0
	str	r5, [r4, #100]
	mov	r5, #11
	str	r0, [r4, #140]
	add	r0, r4, #164
	streq	r5, [r4, #180]
	str	ip, [r4, #88]
	str	ip, [r4, #92]
	str	r0, [r4, #164]
	str	r0, [r4, #168]
	mov	r0, r6
	add	r6, r6, #84
	str	r4, [r4, #176]
	str	r4, [r6, #-88]
	strd	r2, [r6, #-84]
	str	r8, [r6, #-64]
	str	r1, [r6, #-56]
	bl	platform_driver_register
	ldr	r3, [sp, #8]
	cmp	r7, r3
	add	r7, r7, #1
	beq	.L12414
	ldr	r3, [r9, #2032]
.L12422:
	ldr	ip, [fp, #32]
	mov	r5, #0
	add	r3, r3, #1
	mov	r2, #216
	movw	r1, #32976
	str	r3, [r9, #2032]
	cmp	ip, r5
	mov	r0, ip
	bne	.L12435
	mov	r4, #16
	b	.L12417
.L12434:
	movw	r0, #:lower16:.LC779
	mov	r2, r8
	ldr	r1, .L12436+12
	movt	r0, #:upper16:.LC779
	bl	printk
	mov	r0, r4
	bl	kfree
.L12418:
	ldr	r3, [r9, #2032]
	movw	r0, #:lower16:.LC760
	mov	r2, r7
	movt	r0, #:upper16:.LC760
	ldr	r1, .L12436+16
	sub	r3, r3, #1
	str	r3, [r9, #2032]
	bl	printk
	ldr	r2, [sp, #20]
	ldr	r3, [r9, #2032]
	cmp	r2, r3
	bcs	.L12424
	ldr	r5, [sp, #20]
	ldr	r4, [sp, #28]
.L12423:
	ldr	r6, [r4, #-4]
	add	r5, r5, #1
	ldr	r0, [r6, #108]
	bl	destroy_workqueue
	mov	r0, r6
	bl	kfree
	mov	r0, r4
	add	r4, r4, #84
	bl	platform_driver_unregister
	ldr	r3, [r9, #2032]
	cmp	r5, r3
	bcc	.L12423
.L12424:
	mvn	r3, #11
	str	r3, [sp, #20]
	ldr	r3, [sp, #24]
	str	r3, [r9, #2032]
.L12414:
	ldr	r0, [sp, #20]
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12433:
	mov	r2, r0
	mvn	r3, #21
	ldr	r1, .L12436+16
	movw	r0, #:lower16:.LC772
	movt	r0, #:upper16:.LC772
	str	r3, [sp, #20]
	bl	printk
	b	.L12414
.L12437:
	.align	2
.L12436:
	.word	.LANCHOR1+2036
	.word	.LANCHOR3-448
	.word	.LANCHOR1+3600
	.word	.LANCHOR3-440
	.word	.LANCHOR3-468
	.fnend
	.size	ghsuart_data_setup, .-ghsuart_data_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_function_bind_config, %function
rmnet_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 136
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #:lower16:__stack_chk_guard
	strd	r6, [sp, #8]
	movt	r3, #:upper16:__stack_chk_guard
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR1
	mov	r9, r1
	movt	r8, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r10, [r8, #4052]
	.pad #140
	sub	sp, sp, #140
	str	r3, [sp, #8]
	ldr	r3, [r3]
	cmp	r10, #0
	str	r3, [sp, #132]
	beq	.L12543
.L12439:
	ldr	r3, [r8, #4056]
	cmp	r3, #0
	ble	.L12485
	ldr	r3, [r8, #2652]
	cmp	r3, #0
	beq	.L12544
	movw	r3, #:lower16:.LC796
	movw	r10, #:lower16:.LANCHOR4
	ldr	r7, .L12556
	movt	r3, #:upper16:.LC796
	movt	r10, #:upper16:.LANCHOR4
	mov	r5, #0
	str	r3, [sp]
	sub	r3, r10, #1744
	sub	r3, r3, #8
	str	r3, [sp, #4]
	b	.L12489
.L12498:
	ldr	r2, [r8, #2652]
	add	r7, r7, #24
	mov	r3, r5
	cmp	r5, r2
	bcs	.L12495
.L12489:
	ldrb	r3, [r10, #-1768]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L12491
	ldr	r2, [r9, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L12545
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	strb	r3, [r10, #-1768]
.L12491:
	ldr	r4, [r7, #20]
	add	r6, r4, #132
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r9, #24]
	mov	fp, r0
	mov	r2, r5
	ldr	r1, [sp]
	mov	r0, #32
	str	ip, [r4, #128]
	bl	kasprintf
	str	r0, [r4]
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4]
	cmp	r3, #0
	beq	.L12546
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:frmnet_bind
	movw	ip, #:lower16:frmnet_unbind
	movw	r2, #:lower16:frmnet_set_alt
	movt	r1, #:upper16:frmnet_bind
	movt	ip, #:upper16:frmnet_unbind
	movt	r2, #:upper16:frmnet_set_alt
	movw	lr, #:lower16:frmnet_disable
	movw	r0, #:lower16:frmnet_resume
	str	r3, [r4, #4]
	movw	r3, #:lower16:frmnet_setup
	movt	lr, #:upper16:frmnet_disable
	movt	r3, #:upper16:frmnet_setup
	str	r1, [r4, #32]
	movw	r1, #:lower16:frmnet_suspend
	str	ip, [r4, #36]
	movw	ip, #:lower16:frmnet_send_cpkt_response
	movt	r0, #:upper16:frmnet_resume
	str	r2, [r4, #40]
	movw	r2, #:lower16:frmnet_disconnect
	movt	r1, #:upper16:frmnet_suspend
	movt	ip, #:upper16:frmnet_send_cpkt_response
	movt	r2, #:upper16:frmnet_disconnect
	str	lr, [r4, #48]
	str	r3, [r4, #52]
	movw	r3, #:lower16:frmnet_connect
	movt	r3, #:upper16:frmnet_connect
	str	r1, [r4, #56]
	mov	r1, r4
	str	r0, [r4, #60]
	mov	r0, r9
	str	ip, [r4, #92]
	str	r2, [r4, #104]
	str	r3, [r4, #108]
	bl	usb_add_function
	cmp	r0, #0
	bne	.L12547
	ldr	r3, [r8, #4056]
	add	r5, r5, #1
	cmp	r3, r5
	bgt	.L12498
.L12485:
.L12465:
	mov	r6, #0
.L12438:
	ldr	r3, [sp, #8]
	mov	r0, r6
	ldr	r2, [sp, #132]
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L12548
	add	sp, sp, #140
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12543:
	mov	r3, #1
	mov	r2, #50
	add	r1, r8, #2896
	add	r0, sp, #32
	str	r3, [r8, #4052]
	movw	r4, #:lower16:.LC326
	bl	strlcpy
	add	r0, sp, #32
	movt	r4, #:upper16:.LC326
	bl	strim
	str	r0, [sp, #24]
	mov	r2, #50
	ldr	r1, .L12556+4
	add	r0, sp, #82
	bl	strlcpy
	add	r0, sp, #82
	bl	strim
	str	r10, [sp, #12]
	str	r0, [sp, #28]
	b	.L12441
.L12466:
	mov	r1, r4
	add	r0, sp, #24
	bl	strsep
	mov	r5, r0
	mov	r1, r4
	add	r0, sp, #24
	bl	strsep
	cmp	r5, #0
	cmpne	r0, #0
	mov	r7, r0
	bne	.L12549
.L12441:
	ldr	r3, [sp, #24]
	cmp	r3, #0
	bne	.L12466
	ldr	r0, [r8, #2668]
	ldr	r1, [r8, #2672]
	orrs	r3, r0, r1
	beq	.L12471
	bl	gbam_setup
	subs	r6, r0, #0
	bne	.L12470
.L12471:
	ldr	r1, [r8, #2660]
	cmp	r1, #0
	bne	.L12550
.L12469:
	ldr	r0, [r8, #2680]
	cmp	r0, #0
	bne	.L12551
.L12474:
	ldr	r0, [r8, #2676]
	cmp	r0, #0
	bne	.L12552
.L12477:
	ldr	r0, [r8, #2688]
	cmp	r0, #0
	bne	.L12553
.L12480:
	ldr	r0, [r8, #2684]
	cmp	r0, #0
	beq	.L12439
	mov	r1, #1
	bl	ghsuart_ctrl_setup
	subs	r6, r0, #0
	blt	.L12470
	ldr	r1, [r8, #2652]
	cmp	r1, #0
	beq	.L12439
	ldr	r3, .L12556
.L12488:
	ldr	r2, [r3, #4]
	add	r10, r10, #1
	add	r3, r3, #24
	cmp	r2, #9
	streq	r6, [r3, #-12]
	addeq	r6, r6, #1
	cmp	r1, r10
	bne	.L12488
	b	.L12439
.L12550:
	add	r2, sp, #23
	mov	r0, #0
	bl	gsmd_ctrl_setup
	subs	r6, r0, #0
	beq	.L12554
.L12470:
	movw	r0, #:lower16:.LC800
	ldr	r1, .L12556+8
	movt	r0, #:upper16:.LC800
	bl	printk
	b	.L12438
.L12549:
	ldr	r3, [sp, #28]
	cmp	r3, #0
	beq	.L12442
	mov	r1, r4
	add	r0, sp, #28
	bl	strsep
	str	r0, [sp, #12]
.L12442:
	ldr	r6, [r8, #2652]
	cmp	r6, #2
	bhi	.L12555
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L12500
	mov	r2, #160
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L12446
	ldr	r6, [r8, #2652]
.L12445:
	lsl	r2, r6, #1
	add	r1, r3, #144
	strb	r6, [r3, #116]
	mov	r0, #0
	add	fp, r2, r6
	add	fp, r8, fp, lsl #3
	str	r0, [r3, #132]
	mov	r0, r5
	str	r1, [r3, #144]
	str	r1, [r3, #148]
	str	r6, [fp, #2536]
	str	r3, [fp, #2540]
	str	r2, [sp, #4]
	bl	str_to_xport
	mov	r3, r0
	mov	r0, r7
	str	r3, [fp, #2524]
	str	r3, [sp]
	bl	str_to_xport
	ldr	r3, [sp]
	str	r0, [fp, #2520]
	ldr	r2, [sp, #4]
	sub	r1, r3, #3
	cmp	r1, #7
	ldrls	pc, [pc, r1, asl #2]
	b	.L12447
.L12449:
	.word	.L12448
	.word	.L12450
	.word	.L12447
	.word	.L12447
	.word	.L12447
	.word	.L12451
	.word	.L12452
	.word	.L12453
.L12500:
	mov	r3, #16
	b	.L12445
.L12451:
	mov	r1, r5
	ldr	r0, [sp, #12]
	str	r2, [sp]
	bl	ghsic_ctrl_set_port_name
	ldr	r2, [sp]
	ldr	r1, [r8, #2676]
	add	r3, r2, r6
	add	r3, r8, r3, lsl #3
	add	ip, r1, #1
	ldr	r0, [r3, #2520]
	str	ip, [r8, #2676]
	str	r1, [r3, #2532]
.L12453:
	sub	r3, r0, #5
	cmp	r3, #5
	ldrls	pc, [pc, r3, asl #2]
	b	.L12455
.L12457:
	.word	.L12456
	.word	.L12458
	.word	.L12458
	.word	.L12459
	.word	.L12460
	.word	.L12461
.L12459:
	mov	r1, r7
	ldr	r0, [sp, #12]
	str	r2, [sp]
	bl	ghsic_data_set_port_name
	ldr	r2, [sp]
	ldr	r1, [r8, #2680]
	add	r3, r2, r6
	add	r3, r8, r3, lsl #3
	add	r2, r1, #1
	str	r2, [r8, #2680]
	str	r1, [r3, #2528]
.L12461:
	ldr	r2, [r8, #2652]
	ldr	r3, [r8, #4056]
	add	r2, r2, #1
	add	r3, r3, #1
	str	r2, [r8, #2652]
	str	r3, [r8, #4056]
	b	.L12441
.L12460:
	ldr	r1, [r8, #2688]
	add	r3, r2, r6
	add	r3, r8, r3, lsl #3
	add	r2, r1, #1
	str	r1, [r3, #2528]
	str	r2, [r8, #2688]
	b	.L12461
.L12458:
	ldr	r1, [r8, #2672]
	add	r3, r2, r6
	add	r3, r8, r3, lsl #3
	add	r2, r1, #1
	str	r1, [r3, #2528]
	str	r2, [r8, #2672]
	b	.L12461
.L12456:
	ldr	r1, [r8, #2668]
	add	r3, r2, r6
	add	r3, r8, r3, lsl #3
	add	r2, r1, #1
	str	r1, [r3, #2528]
	str	r2, [r8, #2668]
	b	.L12461
.L12452:
	ldr	r1, [r8, #2684]
	add	r3, r2, r6
	add	r3, r8, r3, lsl #3
	add	ip, r1, #1
	str	r1, [r3, #2532]
	str	ip, [r8, #2684]
	b	.L12453
.L12450:
	ldr	r1, [r8, #2664]
	add	r3, r2, r6
	add	r3, r8, r3, lsl #3
	add	ip, r1, #1
	str	r1, [r3, #2532]
	str	ip, [r8, #2664]
	b	.L12453
.L12448:
	ldr	r1, [r8, #2660]
	add	r3, r2, r6
	add	r3, r8, r3, lsl #3
	add	ip, r1, #1
	str	r1, [r3, #2532]
	str	ip, [r8, #2660]
	b	.L12453
.L12551:
	mov	r1, #1
	bl	ghsic_data_setup
	subs	r6, r0, #0
	blt	.L12470
	ldr	r1, [r8, #2652]
	cmp	r1, #0
	beq	.L12474
	add	r1, r1, r1, lsl #1
	ldr	r2, .L12556
	mov	r3, #0
	lsl	r1, r1, #3
.L12476:
	ldr	r0, [r3, r2]
	cmp	r0, #8
	bne	.L12475
	add	r0, r2, r3
	str	r6, [r0, #8]
	add	r6, r6, #1
.L12475:
	add	r3, r3, #24
	cmp	r1, r3
	bne	.L12476
	b	.L12474
.L12552:
	mov	r1, #1
	bl	ghsic_ctrl_setup
	subs	r6, r0, #0
	blt	.L12470
	ldr	r0, [r8, #2652]
	cmp	r0, #0
	beq	.L12477
	ldr	r3, .L12556
	mov	r2, #0
.L12479:
	ldr	r1, [r3, #4]
	add	r2, r2, #1
	add	r3, r3, #24
	cmp	r1, #8
	streq	r6, [r3, #-12]
	addeq	r6, r6, #1
	cmp	r2, r0
	bne	.L12479
	b	.L12477
.L12553:
	mov	r1, #1
	bl	ghsuart_data_setup
	subs	r6, r0, #0
	blt	.L12470
	ldr	r1, [r8, #2652]
	cmp	r1, #0
	beq	.L12480
	add	r1, r1, r1, lsl #1
	ldr	r2, .L12556
	mov	r3, #0
	lsl	r1, r1, #3
.L12482:
	ldr	r0, [r3, r2]
	cmp	r0, #9
	bne	.L12481
	add	r0, r2, r3
	str	r6, [r0, #8]
	add	r6, r6, #1
.L12481:
	add	r3, r3, #24
	cmp	r1, r3
	bne	.L12482
	b	.L12480
.L12554:
	ldr	r0, [r8, #2652]
	cmp	r0, #0
	beq	.L12469
	ldrb	ip, [sp, #23]	@ zero_extendqisi2
	ldr	r2, .L12556
.L12473:
	ldr	r3, [r2, #20]
	cmp	r3, #0
	beq	.L12472
	ldrb	r1, [r3, #116]	@ zero_extendqisi2
	add	r1, ip, r1
	strb	r1, [r3, #116]
.L12472:
	add	r6, r6, #1
	add	r2, r2, #24
	cmp	r6, r0
	bne	.L12473
	b	.L12469
.L12547:
	mov	r6, r0
	movw	r0, #:lower16:.LC798
	ldr	r1, .L12556+12
	mov	r2, r6
	movt	r0, #:upper16:.LC798
	bl	printk
	ldr	r0, [r4]
	bl	kfree
.L12490:
	movw	r0, #:lower16:.LC799
	mov	r2, r5
	ldr	r1, .L12556+8
	movt	r0, #:upper16:.LC799
	bl	printk
	b	.L12438
.L12546:
	movw	r0, #:lower16:.LC797
	ldr	r1, .L12556+12
	mvn	r6, #11
	movt	r0, #:upper16:.LC797
	bl	printk
	b	.L12490
.L12544:
	mov	r2, r3
	mov	r5, r3
.L12495:
	movw	r0, #:lower16:.LC794
	ldr	r1, .L12556+12
	mvn	r6, #18
	movt	r0, #:upper16:.LC794
	bl	printk
	b	.L12490
.L12545:
	movw	r0, #:lower16:.LC795
	mvn	r2, #18
	ldr	r1, .L12556+12
	movt	r0, #:upper16:.LC795
	mov	r6, r2
	bl	printk
	b	.L12490
.L12555:
	movw	r0, #:lower16:.LC790
	mov	r2, #3
	ldr	r1, .L12556+16
	movt	r0, #:upper16:.LC790
	mvn	r6, #21
	bl	printk
.L12444:
	movw	r0, #:lower16:.LC793
	mov	r3, r7
	ldr	r1, .L12556+8
	mov	r2, r5
	movt	r0, #:upper16:.LC793
	bl	printk
	b	.L12438
.L12446:
	movw	r0, #:lower16:.LC791
	ldr	r1, .L12556+16
	mvn	r6, #11
	movt	r0, #:upper16:.LC791
	bl	printk
	b	.L12444
.L12548:
	bl	__stack_chk_fail
.L12447:
	movw	r0, #:lower16:.LC792
	mov	r2, r3
	ldr	r1, .L12556+16
	movt	r0, #:upper16:.LC792
	bl	printk
.L12454:
	ldr	r3, [r8, #2652]
	cmp	r3, #0
	ldrne	r4, .L12556
	beq	.L12463
.L12464:
	ldr	r0, [r4, #20]
	add	r10, r10, #1
	add	r4, r4, #24
	bl	kfree
	ldr	r3, [r8, #2652]
	cmp	r10, r3
	bcc	.L12464
.L12463:
	mov	r3, #0
	mvn	r6, #18
	str	r3, [r8, #2652]
	str	r3, [r8, #2660]
	str	r3, [r8, #2664]
	str	r3, [r8, #2668]
	str	r3, [r8, #2676]
	str	r3, [r8, #2680]
	str	r3, [r8, #2684]
	str	r3, [r8, #2688]
	b	.L12444
.L12455:
	mov	r1, r0
	movw	r0, #:lower16:.LC792
	mov	r2, r1
	movt	r0, #:upper16:.LC792
	ldr	r1, .L12556+16
	bl	printk
	b	.L12454
.L12557:
	.align	2
.L12556:
	.word	.LANCHOR1+2520
	.word	.LANCHOR1+2844
	.word	.LANCHOR3-396
	.word	.LANCHOR3-368
	.word	.LANCHOR3-416
	.fnend
	.size	rmnet_function_bind_config, .-rmnet_function_bind_config
	.align	2
	.global	notify_control_line_state
	.syntax unified
	.arm
	.fpu softvfp
	.type	notify_control_line_state, %function
notify_control_line_state:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR1
	.save {lr}
	str	lr, [sp, #-4]!
	mov	lr, #1
	movt	ip, #:upper16:.LANCHOR1
	mov	r2, lr
	mov	r1, lr
	mov	r3, #0
	str	lr, [ip, #2204]
	ldr	lr, [sp], #4
	str	r0, [ip, #2696]
	add	r0, ip, #2208
	b	__wake_up
	.fnend
	.size	notify_control_line_state, .-notify_control_line_state
	.align	2
	.global	modem_register
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_register, %function
modem_register:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r2, r0, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	beq	.L12564
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC802
	movt	r3, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC802
	str	r2, [r3, #3692]
	bl	printk
	mov	r0, #0
.L12560:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L12564:
	movw	r0, #:lower16:.LC801
	movt	r0, #:upper16:.LC801
	bl	printk
	mvn	r0, #0
	b	.L12560
	.fnend
	.size	modem_register, .-modem_register
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_bind, %function
acm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #8
	sub	sp, sp, #8
	ldr	r8, [r0, #24]
	cmp	r3, #15
	bhi	.L12566
	add	r1, r3, #12
	add	r2, r3, #1
	movw	r5, #:lower16:.LANCHOR4
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR4
	strb	r2, [r0, #44]
	strb	r3, [r4, #144]
	ldrb	ip, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r5, #-1742]
	strb	r3, [r5, #-1734]
	strb	r3, [r5, #-1721]
	cmp	ip, #15
	bls	.L12606
.L12566:
	mvn	r7, #18
.L12567:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L12569
	bl	kfree
.L12569:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L12570
	bl	kfree
.L12570:
	ldr	r5, [r4, #152]
	ldr	r6, [r4, #156]
	cmp	r6, #0
	beq	.L12571
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #152]
.L12571:
	cmp	r5, #0
	movw	r1, #:lower16:.LC803
	movne	r3, #0
	movt	r1, #:upper16:.LC803
	strne	r3, [r5]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r8]
	mov	r3, r4
	str	r7, [sp]
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L12565:
	mov	r0, r7
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12606:
	add	r2, ip, #12
	add	r3, ip, #1
	strb	ip, [r5, #-1720]
	strb	ip, [r5, #-1714]
	sub	r1, r5, #1696
	str	r4, [r0, r2, lsl #2]
	mov	r2, #0
	strb	r3, [r0, #44]
	strb	ip, [r5, #-1700]
	strb	ip, [r4, #145]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12566
	str	r0, [r4, #88]
	mov	r2, #0
	ldr	r1, .L12607
	str	r8, [r0]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12566
	str	r0, [r4, #92]
	mov	r2, #0
	ldr	r1, .L12607+4
	str	r8, [r0]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L12566
	str	r3, [r4, #152]
	mov	r2, #208
	mov	r1, #10
	str	r8, [r3]
	bl	gs_alloc_req
	cmp	r0, #0
	str	r0, [r4, #156]
	beq	.L12566
	movw	r3, #:lower16:acm_cdc_notify_complete
	ldrb	r2, [r5, #-1694]	@ zero_extendqisi2
	sub	r1, r5, #1488
	movt	r3, #:upper16:acm_cdc_notify_complete
	ldrb	ip, [r5, #-1682]	@ zero_extendqisi2
	sub	r1, r1, #12
	str	r3, [r0, #28]
	ldrb	r0, [r5, #-1670]	@ zero_extendqisi2
	sub	r3, r5, #1600
	ldr	lr, [r4, #156]
	strb	r2, [r5, #-1658]
	strb	ip, [r5, #-1646]
	strb	r2, [r5, #-1622]
	sub	r2, r1, #44
	strb	r0, [r5, #-1634]
	mov	r0, r4
	str	r4, [lr, #32]
	strb	ip, [r5, #-1610]
	bl	usb_assign_descriptors
	subs	r7, r0, #0
	bne	.L12567
	mov	r0, r4
	bl	modem_register
	b	.L12565
.L12608:
	.align	2
.L12607:
	.word	.LANCHOR4-1684
	.word	.LANCHOR4-1672
	.fnend
	.size	acm_bind, .-acm_bind
	.align	2
	.global	modem_unregister
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_unregister, %function
modem_unregister:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, #1
	str	lr, [sp, #4]
	movt	ip, #:upper16:.LANCHOR1
	mov	lr, #0
	add	r0, ip, #2208
	mov	r3, lr
	mov	r1, r2
	str	r2, [ip, #2204]
	str	lr, [ip, #3692]
	bl	__wake_up
	movw	r0, #:lower16:.LC804
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC804
	add	sp, sp, #8
	b	printk
	.fnend
	.size	modem_unregister, .-modem_unregister
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_unbind, %function
acm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	modem_unregister
	mov	r0, r4
	bl	usb_free_all_descriptors
	ldr	r5, [r4, #152]
	ldr	r6, [r4, #156]
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r6
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, [r4]
	bl	kfree
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
	.fnend
	.size	acm_unbind, .-acm_unbind
	.align	2
	.global	acm_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_bind_config, %function
acm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r2, [r3, #-1456]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L12614
	ldr	ip, [r0, #24]
	ldrb	r2, [ip, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L12617
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [ip, #48]
	ldr	ip, [r0, #24]
	strb	r2, [r3, #-1728]
	strb	r2, [r3, #-1456]
	ldrb	r2, [ip, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L12617
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [ip, #48]
	ldr	ip, [r0, #24]
	strb	r2, [r3, #-1708]
	strb	r2, [r3, #-1448]
	ldrb	r2, [ip, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L12617
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r3, #-1737]
	strb	r2, [r3, #-1440]
	strb	r2, [ip, #48]
.L12614:
	movw	r3, #:lower16:kmalloc_caches
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	mov	r6, r1
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L12620
	mov	r2, #172
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L12626
.L12618:
	movw	r0, #:lower16:acm_connect
	movw	r1, #:lower16:acm_disconnect
	strb	r6, [r4, #146]
	movt	r0, #:upper16:acm_connect
	movt	r1, #:upper16:acm_disconnect
	movw	r3, #:lower16:acm_send_break
	mov	ip, #0
	movt	r3, #:upper16:acm_send_break
	strd	r0, [r4, #116]
	movw	r1, #:lower16:.LC805
	mov	r2, r6
	movt	r1, #:upper16:.LC805
	str	r3, [r4, #124]
	mov	r0, #208
	str	ip, [r4, #148]
	bl	kasprintf
	cmp	r0, #0
	str	r0, [r4]
	beq	.L12627
	movw	r2, #:lower16:acm_bind
	ldr	lr, .L12628
	movw	r1, #:lower16:acm_unbind
	movt	r2, #:upper16:acm_bind
	movw	ip, #:lower16:acm_set_alt
	movw	r3, #:lower16:acm_setup
	movt	r1, #:upper16:acm_unbind
	movt	ip, #:upper16:acm_set_alt
	movt	r3, #:upper16:acm_setup
	str	r2, [r4, #32]
	movw	r2, #:lower16:acm_disable
	mov	r0, r5
	movt	r2, #:upper16:acm_disable
	str	lr, [r4, #4]
	str	r1, [r4, #36]
	mov	r1, r4
	str	ip, [r4, #40]
	str	r2, [r4, #48]
	str	r3, [r4, #52]
	bl	usb_add_function
	subs	r5, r0, #0
	beq	.L12613
	mov	r0, r4
	bl	kfree
.L12613:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12620:
	mov	r4, #16
	b	.L12618
.L12617:
	mvn	r5, #18
	b	.L12613
.L12627:
	mov	r0, r4
	mvn	r5, #11
	bl	kfree
	b	.L12613
.L12626:
	mvn	r5, #11
	b	.L12613
.L12629:
	.align	2
.L12628:
	.word	.LANCHOR4-1424
	.fnend
	.size	acm_bind_config, .-acm_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_function_bind_config, %function
acm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #4]
	ldr	r3, [r7]
	cmp	r3, #0
	ble	.L12631
	mov	r5, r1
	mov	r4, #0
.L12634:
	uxtb	r1, r4
	mov	r0, r5
	bl	acm_bind_config
	subs	r6, r0, #0
	bne	.L12637
	ldr	r3, [r7]
	add	r4, r4, #1
	cmp	r3, r4
	bgt	.L12634
.L12631:
	mov	r6, #0
.L12630:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12637:
	movw	r0, #:lower16:.LC806
	mov	r2, r4
	ldr	r1, .L12638
	movt	r0, #:upper16:.LC806
	bl	printk
	b	.L12630
.L12639:
	.align	2
.L12638:
	.word	.LANCHOR3-348
	.fnend
	.size	acm_function_bind_config, .-acm_function_bind_config
	.align	2
	.global	adb_req_put
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_req_put, %function
adb_req_put:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r4, r0, #88
	mov	r0, r4
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	mov	r6, r2
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	ldr	r1, [r7, #4]
	add	r0, r6, #36
	mov	r2, r7
	bl	__list_add
	ldrd	r6, [sp, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	adb_req_put, .-adb_req_put
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_complete_in, %function
adb_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, r1
	movw	r3, #:lower16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r1, [r1, #44]
	movt	r3, #:upper16:.LANCHOR1
	ldr	r4, [r3, #2692]
	cmp	r1, #0
	movne	r3, #1
	add	r1, r4, #120
	mov	r0, r4
	strne	r3, [r4, #104]
	bl	adb_req_put
	ldr	lr, [sp, #4]
	add	r0, r4, #140
	mov	r3, #0
	ldr	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	add	sp, sp, #8
	b	__wake_up
	.fnend
	.size	adb_complete_in, .-adb_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_bind, %function
adb_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #24]
	str	r3, [r1, #84]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L12674
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	add	r1, r3, #1
	strd	r6, [sp, #8]
	mov	r2, #0
	strd	r8, [sp, #16]
	mov	r9, r0
	add	r0, r3, #12
	str	r10, [sp, #24]
	movw	r8, #:lower16:.LANCHOR4
	str	lr, [sp, #28]
	movt	r8, #:upper16:.LANCHOR4
	str	r4, [r9, r0, lsl #2]
	sub	r6, r8, #1392
	strb	r1, [r9, #44]
	ldr	r5, [r4, #84]
	sub	r1, r6, #12
	strb	r3, [r8, #-1414]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L12651
	str	r4, [r0]
	mov	r1, r6
	mov	r2, #0
	str	r0, [r4, #92]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L12651
	str	r4, [r3]
	mov	r1, #4096
	str	r3, [r4, #96]
	bl	adb_request_new
	cmp	r0, #0
	beq	.L12652
	movw	r3, #:lower16:adb_complete_out
	movw	r6, #:lower16:adb_complete_in
	movt	r3, #:upper16:adb_complete_out
	movt	r6, #:upper16:adb_complete_in
	mov	r5, #4
	add	r7, r4, #120
	str	r3, [r0, #28]
	str	r0, [r4, #152]
.L12653:
	mov	r1, #4096
	ldr	r0, [r4, #92]
	bl	adb_request_new
	subs	r3, r0, #0
	mov	r1, r7
	mov	r2, r3
	mov	r0, r4
	beq	.L12652
	str	r6, [r3, #28]
	bl	adb_req_put
	subs	r5, r5, #1
	bne	.L12653
	ldr	r3, [r9, #24]
	ldr	r2, [r3]
	ldr	r2, [r2, #20]
	cmp	r2, #2
	bls	.L12656
	ldrb	r1, [r8, #-1402]	@ zero_extendqisi2
	ldrb	r2, [r8, #-1390]	@ zero_extendqisi2
	strb	r1, [r8, #-1378]
	strb	r2, [r8, #-1366]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L12656
	mov	r0, r5
	strb	r1, [r8, #-1354]
	strb	r2, [r8, #-1342]
	b	.L12648
.L12656:
	mov	r0, r5
.L12648:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12651:
	mvn	r0, #18
	b	.L12648
.L12674:
	mvn	r0, #18
	bx	lr
.L12652:
	movw	r0, #:lower16:.LC807
	movt	r0, #:upper16:.LC807
	bl	printk
	mvn	r0, #0
	b	.L12648
	.fnend
	.size	adb_function_bind, .-adb_function_bind
	.align	2
	.global	adb_req_get
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_req_get, %function
adb_req_get:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #88
	mov	r4, r1
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4]
	mov	r6, r0
	cmp	r4, r3
	beq	.L12677
	mov	r0, r3
	sub	r4, r3, #36
	bl	list_del
.L12676:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12677:
	mov	r4, #0
	b	.L12676
	.fnend
	.size	adb_req_get, .-adb_req_get
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_unbind, %function
adb_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r2, #0
	mov	r4, r1
	mov	r1, #1
	str	r6, [sp, #8]
	mov	r3, r2
	str	lr, [sp, #12]
	add	r0, r4, #128
	str	r2, [r4, #100]
	mov	r2, r1
	str	r1, [r4, #104]
	mov	r1, #3
	bl	__wake_up
	ldr	r0, [r4, #152]
	cmp	r0, #0
	beq	.L12680
	ldr	r1, [r4, #96]
	bl	adb_request_free.part.15
.L12680:
	add	r5, r4, #120
	b	.L12681
.L12682:
	ldr	r1, [r4, #92]
	bl	adb_request_free.part.15
.L12681:
	mov	r1, r5
	mov	r0, r4
	bl	adb_req_get
	cmp	r0, #0
	bne	.L12682
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	adb_function_unbind, .-adb_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_write, %function
adb_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r3, #2692]
	.pad #44
	sub	sp, sp, #44
	ldr	r4, [r0, #124]
	stmib	sp, {r1, r2}
	cmp	r3, #0
	beq	.L12707
	add	r8, r4, #112
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r8]
	add	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L12718
	ldr	r9, [sp, #8]
	mov	fp, #57344
	movw	r10, #:lower16:autoremove_wake_function
	movt	fp, 65535
	movt	r10, #:upper16:autoremove_wake_function
.L12689:
	mov	r3, sp
	and	r7, r3, fp
.L12706:
	cmp	r9, #0
	beq	.L12719
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L12704
	add	r5, r4, #120
.L12690:
	mov	r1, r5
	mov	r0, r4
	bl	adb_req_get
	cmp	r0, #0
	beq	.L12720
	mov	r3, r0
.L12692:
	mov	r2, sp
	cmp	r9, #4096
	ldr	ip, [sp, #4]
	and	r2, r2, fp
	movcc	r6, r9
	ldr	r0, [r3]
	movcs	r6, #4096
	ldr	r2, [r2, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, ip, r6; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	bne	.L12698
	mov	r2, r6
	mov	r1, ip
	str	r3, [sp, #12]
	bl	__copy_from_user
	cmp	r0, #0
	ldr	r3, [sp, #12]
	bne	.L12699
	str	r6, [r3, #4]
	ldr	r0, [r4, #92]
	mov	r1, r3
	mov	r2, #32
	str	r3, [sp, #12]
	ldr	ip, [r0, #8]
	ldr	r7, [ip, #16]
	blx	r7
	cmp	r0, #0
	ldr	r3, [sp, #12]
	blt	.L12721
	ldr	r3, [sp, #4]
	sub	r9, r9, r6
	add	r3, r3, r6
	str	r3, [sp, #4]
	b	.L12689
.L12720:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L12722
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L12690
.L12704:
	ldr	r3, [r4, #104]
	mvn	r6, #4
	cmp	r3, #0
	beq	.L12705
.L12724:
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #128
	bl	__wake_up
	b	.L12705
.L12722:
	str	r3, [sp, #20]
	add	r2, sp, #32
	add	r6, r4, #140
	str	r3, [sp, #24]
	str	r3, [sp, #28]
	str	r10, [sp, #28]
	str	r3, [sp, #32]
	str	r3, [sp, #36]
	ldr	r3, [r7, #12]
	str	r3, [sp, #24]
	str	r2, [sp, #32]
	str	r2, [sp, #36]
	b	.L12697
.L12723:
	bl	schedule
.L12697:
	mov	r2, #1
	add	r1, sp, #20
	mov	r0, r6
	bl	prepare_to_wait
	mov	r1, r5
	mov	r0, r4
	bl	adb_req_get
	cmp	r0, #0
	bne	.L12694
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L12695
	ldr	r3, [r7, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L12723
	mov	r0, r6
	mov	r6, #65024
	add	r1, sp, #20
	movt	r6, 65535
	bl	finish_wait
.L12691:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L12724
.L12705:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L12687:
	mov	r0, r6
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12698:
	mov	r1, r6
	str	r3, [sp, #4]
	bl	__memzero
	ldr	r3, [sp, #4]
.L12699:
	mvn	r6, #13
.L12702:
	mov	r2, r3
	mov	r1, r5
	mov	r0, r4
	bl	adb_req_put
	b	.L12691
.L12694:
	mov	r3, r0
	add	r1, sp, #20
	mov	r0, r6
	str	r3, [sp, #12]
	bl	finish_wait
	ldr	r3, [sp, #12]
	b	.L12692
.L12695:
	add	r1, sp, #20
	mov	r0, r6
	bl	finish_wait
	b	.L12706
.L12719:
	ldr	r6, [sp, #8]
	b	.L12691
.L12718:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r6, #15
	b	.L12687
.L12721:
	mov	r2, #1
	mvn	r6, #4
	str	r2, [r4, #104]
	b	.L12702
.L12707:
	mvn	r6, #18
	b	.L12687
	.fnend
	.size	adb_write, .-adb_write
	.align	2
	.global	f_midi_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_bind_config, %function
f_midi_bind_config:
	.fnstart
	@ args = 16, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	ldr	ip, [sp, #76]
	cmp	ip, #0
	beq	.L12726
	ldr	lr, [sp, #76]
	mvn	ip, #0
	str	ip, [lr]
	str	ip, [lr, #4]
.L12726:
	ldr	ip, [sp, #64]
	cmp	ip, #16
	cmpls	r3, #16
	bhi	.L12743
	movw	r10, #:lower16:kmalloc_caches
	mov	fp, r0
	str	r2, [sp, #12]
	movt	r10, #:upper16:kmalloc_caches
	mov	r8, r3
	ldr	r0, [r10, #36]
	mov	r9, r1
	cmp	r0, #0
	beq	.L12744
	mov	r2, #344
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L12764
.L12728:
	cmp	r8, #0
	addne	r7, r5, #228
	movne	r6, r8
	movne	r4, #0
	beq	.L12765
.L12731:
	ldr	ip, [r10, #24]
	mov	r2, #12
	movw	r1, #32976
	mov	r3, #16
	subs	r0, ip, #0
	beq	.L12729
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L12747
.L12729:
	mov	r2, #0
	str	r5, [r3]
	strb	r4, [r3, #8]
	add	r4, r4, #1
	cmp	r4, r8
	str	r2, [r3, #4]
	str	r3, [r7, #4]!
	bne	.L12731
.L12732:
	ldr	r3, [fp, #24]
	movw	r1, #:lower16:f_midi_in_tasklet
	mov	r2, r5
	movt	r1, #:upper16:f_midi_in_tasklet
	add	r0, r5, #300
	ldr	r3, [r3]
	str	r3, [r5, #84]
	bl	tasklet_init
	ldr	r0, [sp, #12]
	mov	r1, #208
	bl	kstrdup
	ldr	lr, [sp, #64]
	mov	r1, r0
	add	ip, sp, #16
	mov	r3, #0
	str	r8, [r5, #320]
	mov	r0, r9
	mov	r2, r3
	str	lr, [r5, #324]
	ldr	lr, [sp, #68]
	str	r9, [r5, #328]
	str	r1, [r5, #332]
	str	lr, [r5, #336]
	ldr	lr, [sp, #72]
	str	lr, [r5, #340]
	str	ip, [sp]
	bl	snd_card_create
	subs	r7, r0, #0
	blt	.L12766
	ldr	r0, [sp, #16]
	mov	r2, r5
	mov	r1, #8192
	ldr	r3, .L12769
	str	r0, [r5, #96]
	bl	snd_device_new
	subs	r7, r0, #0
	blt	.L12767
	movw	r3, #:lower16:.LC810
	movw	r4, #:lower16:.LC811
	ldr	r0, [sp, #16]
	movt	r3, #:upper16:.LC810
	movt	r4, #:upper16:.LC811
	ldr	lr, [r3]
	ldr	r1, [r3, #8]
	ldr	ip, [r3, #4]
	ldrh	r7, [r4, #4]
	ldr	r8, [r4]
	str	lr, [r0, #20]	@ unaligned
	ldrb	r4, [r4, #6]	@ zero_extendqisi2
	str	ip, [r0, #24]	@ unaligned
	str	r1, [r0, #28]	@ unaligned
	str	r1, [r0, #76]	@ unaligned
	movw	r1, #:lower16:.LC812
	movt	r1, #:upper16:.LC812
	str	r8, [r0, #36]	@ unaligned
	strh	r7, [r0, #40]	@ unaligned
	strb	r4, [r0, #42]
	str	lr, [r0, #68]	@ unaligned
	str	ip, [r0, #72]	@ unaligned
	bl	snd_component_add
	add	r1, sp, #20
	ldr	r3, [r5, #324]
	mov	r2, #0
	ldr	r0, [sp, #16]
	str	r1, [sp, #4]
	ldr	ip, [r5, #320]
	add	r1, r0, #68
	str	ip, [sp]
	bl	snd_rawmidi_new
	subs	r7, r0, #0
	blt	.L12768
	ldr	r1, [sp, #16]
	ldr	r7, [sp, #20]
	ldr	r4, .L12769+4
	add	r1, r1, #36
	add	r0, r7, #84
	str	r7, [r5, #100]
	bl	strcpy
	mov	r3, #7
	mov	r0, r7
	sub	r2, r4, #8
	mov	r1, #0
	str	r3, [r7, #16]
	str	r5, [r7, #200]
	bl	snd_rawmidi_set_ops
	ldr	r0, [sp, #20]
	add	r2, r4, #8
	mov	r1, #1
	bl	snd_rawmidi_set_ops
	ldr	r0, [sp, #16]
	bl	snd_card_register
	subs	r7, r0, #0
	blt	.L12738
	movw	r2, #:lower16:.LC814
	movw	r3, #:lower16:f_midi_bind
	movt	r2, #:upper16:.LC814
	movt	r3, #:upper16:f_midi_bind
	add	r4, r4, #24
	movw	r1, #:lower16:f_midi_unbind
	movt	r1, #:upper16:f_midi_unbind
	mov	r0, fp
	stm	r5, {r2, r4}
	movw	r2, #:lower16:f_midi_set_alt
	str	r3, [r5, #32]
	movw	r3, #:lower16:f_midi_disable
	movt	r2, #:upper16:f_midi_set_alt
	movt	r3, #:upper16:f_midi_disable
	str	r1, [r5, #36]
	mov	r1, r5
	str	r2, [r5, #40]
	str	r3, [r5, #48]
	bl	usb_add_function
	subs	r7, r0, #0
	bne	.L12730
	ldr	r3, [sp, #76]
	cmp	r3, #0
	beq	.L12725
	ldr	r3, [r5, #100]
	ldr	r2, [sp, #76]
	ldr	r3, [r3]
	ldr	r3, [r3]
	str	r3, [r2]
	ldr	r3, [r5, #100]
	ldr	r3, [r3, #12]
	str	r3, [r2, #4]
	ldr	r3, [r5, #100]
	ldr	r3, [r3]
	ldr	r3, [r3]
	str	r3, [r2]
	ldr	r3, [r5, #100]
	ldr	r3, [r3, #12]
	str	r3, [r2, #4]
	b	.L12725
.L12766:
	ldr	r0, [r5, #84]
	movw	r1, #:lower16:.LC808
	movt	r1, #:upper16:.LC808
	add	r0, r0, #32
	bl	dev_err
.L12735:
	ldr	r0, [r5, #96]
	cmp	r0, #0
	beq	.L12730
	bl	snd_card_free
	mov	r3, #0
	str	r3, [r5, #96]
.L12730:
	cmp	r6, #0
	beq	.L12741
	add	r6, r5, r6, lsl #2
	add	r4, r5, #232
	add	r6, r6, #232
.L12742:
	ldr	r0, [r6, #-4]!
	bl	kfree
	cmp	r4, r6
	bne	.L12742
.L12741:
	mov	r0, r5
	bl	kfree
.L12725:
	mov	r0, r7
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12744:
	mov	r5, #16
	b	.L12728
.L12747:
	mov	r6, r4
	mvn	r7, #11
	b	.L12730
.L12768:
	ldr	r0, [r5, #84]
	movw	r1, #:lower16:.LC813
	mov	r2, r7
	movt	r1, #:upper16:.LC813
	add	r0, r0, #32
	bl	dev_err
	b	.L12735
.L12767:
	ldr	r0, [r5, #84]
	movw	r1, #:lower16:.LC809
	mov	r2, r7
	movt	r1, #:upper16:.LC809
	add	r0, r0, #32
	bl	dev_err
	b	.L12735
.L12765:
	mov	r6, r8
	b	.L12732
.L12738:
	ldr	r0, [r5, #84]
	movw	r1, #:lower16:.LC815
	movt	r1, #:upper16:.LC815
	add	r0, r0, #32
	bl	dev_err
	b	.L12735
.L12743:
	mvn	r7, #21
	b	.L12725
.L12764:
	mvn	r7, #11
	b	.L12725
.L12770:
	.align	2
.L12769:
	.word	.LANCHOR4-1332
	.word	.LANCHOR4-1312
	.fnend
	.size	f_midi_bind_config, .-f_midi_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_function_bind_config, %function
midi_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	ip, [r0, #4]
	.pad #20
	sub	sp, sp, #20
	mov	lr, #32
	mov	r2, #1
	mov	r3, #1024
	mov	r0, r1
	mvn	r1, #0
	strd	r2, [sp]
	mov	r3, r2
	mov	r2, #0
	str	lr, [sp, #8]
	str	ip, [sp, #12]
	bl	f_midi_bind_config
	add	sp, sp, #20
	@ sp needed
	ldr	pc, [sp], #4
	.fnend
	.size	midi_function_bind_config, .-midi_function_bind_config
	.align	2
	.global	rndis_bind_config_vendor
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_bind_config_vendor, %function
rndis_bind_config_vendor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	subs	r8, r1, #0
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	beq	.L12783
	movw	r7, #:lower16:.LANCHOR1
	mov	r9, r3
	movt	r7, #:upper16:.LANCHOR1
	mov	r10, r2
	ldrb	r3, [r7, #3684]	@ zero_extendqisi2
	mov	r6, r0
	cmp	r3, #0
	beq	.L12775
.L12778:
	movw	r5, #:lower16:.LANCHOR4
	movt	r5, #:upper16:.LANCHOR4
	ldrb	r3, [r5, #-1280]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L12777
	ldr	r3, [r6, #24]
	ldrb	r1, [r3, #48]	@ zero_extendqisi2
	cmp	r1, #253
	bhi	.L12780
	add	r1, r1, #1
	uxtb	r1, r1
	strb	r1, [r3, #48]
	ldr	r2, [r6, #24]
	strb	r1, [r5, #-3712]
	strb	r1, [r5, #-1280]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L12780
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r6, #24]
	strb	r3, [r5, #-3692]
	strb	r3, [r5, #-1272]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L12780
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	strb	r3, [r5, #-3721]
	strb	r3, [r5, #-1264]
.L12777:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L12784
	mov	r2, #180
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L12793
.L12781:
	ldr	ip, [r8]	@ unaligned
	movw	r2, #:lower16:rndis_add_header
	movw	r3, #:lower16:rndis_rm_hdr
	ldr	lr, [r5, #-3436]
	movt	r2, #:upper16:rndis_add_header
	movt	r3, #:upper16:rndis_rm_hdr
	ldr	r1, [r5, #-1248]
	mov	r0, r6
	ldr	r6, .L12795
	str	ip, [r4, #150]	@ unaligned
	movw	ip, #:lower16:.LC816
	ldrh	r5, [r8, #4]	@ unaligned
	movt	ip, #:upper16:.LC816
	str	r1, [r4, #120]
	movw	r1, #:lower16:rndis_bind
	str	ip, [r4]
	movt	r1, #:upper16:rndis_bind
	movw	ip, #:lower16:rndis_set_alt
	movt	ip, #:upper16:rndis_set_alt
	strd	r2, [r4, #128]
	movw	r2, #:lower16:rndis_setup
	str	lr, [r4, #116]
	movw	lr, #:lower16:rndis_unbind
	movt	r2, #:upper16:rndis_setup
	movt	lr, #:upper16:rndis_unbind
	str	r6, [r4, #4]
	str	r1, [r4, #32]
	movw	r1, #:lower16:rndis_disable
	str	lr, [r4, #36]
	movt	r1, #:upper16:rndis_disable
	mov	lr, #0
	str	ip, [r4, #40]
	mov	ip, #44
	str	r1, [r4, #48]
	mov	r1, r4
	str	r2, [r4, #52]
	strh	lr, [r4, #98]	@ movhi
	str	ip, [r4, #100]
	strh	r5, [r4, #154]	@ unaligned
	str	r10, [r4, #156]
	str	r9, [r4, #160]
	bl	usb_add_function
	subs	r5, r0, #0
	bne	.L12794
.L12773:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12794:
	mov	r0, r4
	bl	kfree
.L12782:
	ldrb	r3, [r7, #3684]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L12773
	bl	rndis_exit.part.103
	b	.L12773
.L12775:
	bl	rndis_init.part.102
	subs	r5, r0, #0
	bge	.L12778
	b	.L12773
.L12784:
	mov	r4, #16
	b	.L12781
.L12793:
	mvn	r5, #11
	b	.L12782
.L12780:
	mvn	r5, #18
	b	.L12773
.L12783:
	mvn	r5, #21
	b	.L12773
.L12796:
	.align	2
.L12795:
	.word	.LANCHOR4-1244
	.fnend
	.size	rndis_bind_config_vendor, .-rndis_bind_config_vendor
	.align	2
	.global	rndis_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_bind_config, %function
rndis_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #0
	mov	r2, r3
	b	rndis_bind_config_vendor
	.fnend
	.size	rndis_bind_config, .-rndis_bind_config
	.align	2
	.global	rndis_signal_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_signal_connect, %function
rndis_signal_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	rsb	r2, r0, r0, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r3, r3, r2, lsl #2
	mov	r2, #0
	mov	r1, #11
	movt	r1, 16385
	str	r2, [r3, #3640]
	b	rndis_indicate_status_msg
	.fnend
	.size	rndis_signal_connect, .-rndis_signal_connect
	.align	2
	.global	rndis_signal_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_signal_disconnect, %function
rndis_signal_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	rsb	r2, r0, r0, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r3, r3, r2, lsl #2
	mov	r2, #1
	mov	r1, #12
	movt	r1, 16385
	str	r2, [r3, #3640]
	b	rndis_indicate_status_msg
	.fnend
	.size	rndis_signal_disconnect, .-rndis_signal_disconnect
	.align	2
	.global	rndis_set_host_mac
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_host_mac, %function
rndis_set_host_mac:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	rsb	r0, r0, r0, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r3, r3, r0, lsl #2
	str	r1, [r3, #3644]
	bx	lr
	.fnend
	.size	rndis_set_host_mac, .-rndis_set_host_mac
	.align	2
	.global	rndis_register
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_register, %function
rndis_register:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r2, r0, #0
	beq	.L12803
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldrb	r0, [r3, #3625]	@ zero_extendqisi2
	cmp	r0, #0
	bne	.L12804
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	lr, .L12809
	mov	ip, #1
	strb	ip, [r3, #3625]
	str	r2, [r3, #3668]
	str	r1, [r3, #3672]
	strh	ip, [lr, #36]	@ movhi
	ldr	pc, [sp], #4
.L12804:
	mvn	r0, #18
	bx	lr
.L12803:
	mvn	r0, #21
	bx	lr
.L12810:
	.align	2
.L12809:
	.word	.LANCHOR1+3624
	.fnend
	.size	rndis_register, .-rndis_register
	.align	2
	.global	rndis_deregister
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_deregister, %function
rndis_deregister:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #0
	bgt	.L12811
	rsb	r0, r0, r0, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r0, r3, r0, lsl #2
	mov	r3, #0
	strb	r3, [r0, #3625]
.L12811:
	bx	lr
	.fnend
	.size	rndis_deregister, .-rndis_deregister
	.align	2
	.global	rndis_set_param_dev
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_param_dev, %function
rndis_set_param_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #0
	beq	.L12815
	cmp	r0, #0
	bne	.L12816
	movw	r3, #:lower16:.LANCHOR1
	mov	ip, r0
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3560]
	str	r0, [r3, #3564]
	str	r2, [r3, #3648]
	str	r1, [r3, #3652]
.L12813:
	mov	r0, ip
	bx	lr
.L12816:
	mvn	ip, #0
	b	.L12813
.L12815:
	mvn	ip, #21
	b	.L12813
	.fnend
	.size	rndis_set_param_dev, .-rndis_set_param_dev
	.align	2
	.global	rndis_set_param_vendor
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_param_vendor, %function
rndis_set_param_vendor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	clz	r3, r2
	cmp	r0, #0
	lsr	r3, r3, #5
	movne	r0, #1
	moveq	r0, r3
	cmp	r0, #0
	bne	.L12819
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r1, [r3, #3656]
	str	r2, [r3, #3664]
	bx	lr
.L12819:
	mvn	r0, #0
	bx	lr
	.fnend
	.size	rndis_set_param_vendor, .-rndis_set_param_vendor
	.align	2
	.global	rndis_set_param_medium
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_param_medium, %function
rndis_set_param_medium:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #0
	bne	.L12822
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r1, [r3, #3632]
	str	r2, [r3, #3636]
	bx	lr
.L12822:
	mvn	r0, #0
	bx	lr
	.fnend
	.size	rndis_set_param_medium, .-rndis_set_param_medium
	.align	2
	.global	rndis_set_max_pkt_xfer
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_max_pkt_xfer, %function
rndis_set_max_pkt_xfer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	rsb	r0, r0, r0, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r3, r3, r0, lsl #2
	strb	r1, [r3, #3660]
	bx	lr
	.fnend
	.size	rndis_set_max_pkt_xfer, .-rndis_set_max_pkt_xfer
	.align	2
	.global	rndis_set_pkt_alignment_factor
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_pkt_alignment_factor, %function
rndis_set_pkt_alignment_factor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	rsb	r0, r0, r0, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r3, r3, r0, lsl #2
	strb	r1, [r3, #3661]
	bx	lr
	.fnend
	.size	rndis_set_pkt_alignment_factor, .-rndis_set_pkt_alignment_factor
	.align	2
	.global	rndis_add_hdr
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_add_hdr, %function
rndis_add_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #0
	beq	.L12825
	b	rndis_add_hdr.part.99
.L12825:
	bx	lr
	.fnend
	.size	rndis_add_hdr, .-rndis_add_hdr
	.align	2
	.global	rndis_free_response
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_free_response, %function
rndis_free_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	rsb	r0, r0, r0, lsl #4
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r3, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, .L12838
	lsl	r6, r0, #2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	add	r3, r3, r6
	ldr	r5, [r3, #3676]
	add	r6, r6, r2
	cmp	r5, r6
	ldr	r4, [r5]
	movne	r7, r1
	bne	.L12830
	b	.L12827
.L12831:
	mov	r4, r3
.L12830:
	cmp	r5, #0
	beq	.L12829
	ldr	r3, [r5, #8]
	cmp	r3, r7
	beq	.L12837
.L12829:
	cmp	r6, r4
	mov	r5, r4
	ldr	r3, [r4]
	bne	.L12831
.L12827:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12837:
	mov	r0, r5
	bl	list_del
	mov	r0, r5
	bl	kfree
	b	.L12829
.L12839:
	.align	2
.L12838:
	.word	.LANCHOR1+3676
	.fnend
	.size	rndis_free_response, .-rndis_free_response
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_setup, %function
rndis_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r1]	@ unaligned
	ldr	r2, [r0, #20]
	ldrh	ip, [r1, #2]	@ unaligned
	ldrh	r6, [r1, #6]	@ unaligned
	rev16	r3, r3
	ldrh	r0, [r1, #4]	@ unaligned
	uxth	r3, r3
	ldr	r7, [r2, #24]
	cmp	r3, #8448
	ldr	r4, [r7, #4]
	beq	.L12842
	movw	r2, #41217
	cmp	r3, r2
	bne	.L12854
	cmp	ip, #0
	bne	.L12854
	ldrb	r3, [r5, #148]	@ zero_extendqisi2
	cmp	r3, r0
	bne	.L12854
	ldr	r2, [r5, #164]
	movw	r3, #:lower16:.LANCHOR1
	ldr	r1, .L12857
	movt	r3, #:upper16:.LANCHOR1
	rsb	r2, r2, r2, lsl #4
	lsl	r2, r2, #2
	add	r3, r3, r2
	add	r2, r2, r1
	ldr	r1, [r3, #3676]
	cmp	r1, r2
	ldr	r3, [r1]
	beq	.L12854
	ldr	r0, [r1, #16]
	cmp	r0, #0
	bne	.L12848
	b	.L12856
.L12850:
	ldr	r0, [r3, #16]
	cmp	r0, #0
	beq	.L12847
	mov	r3, r1
.L12848:
	cmp	r2, r3
	ldr	r1, [r3]
	bne	.L12850
.L12854:
	mvn	r8, #94
.L12840:
	mov	r0, r8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12842:
	cmp	ip, #0
	bne	.L12854
	ldrb	r3, [r5, #148]	@ zero_extendqisi2
	cmp	r3, r0
	bne	.L12854
	movw	r3, #:lower16:rndis_command_complete
	mov	r8, r6
	str	r5, [r4, #32]
	movt	r3, #:upper16:rndis_command_complete
	mov	r6, ip
	str	r3, [r4, #28]
.L12846:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r8, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	bfi	r3, r6, #1, #1
	strb	r3, [r4, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r8, r0, #0
	bge	.L12840
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC817
	mov	r2, r8
	movt	r1, #:upper16:.LC817
	add	r0, r0, #32
	bl	dev_err
	b	.L12840
.L12856:
	mov	r3, r1
.L12847:
	ldr	r9, [r3, #8]
	mov	r2, #1
	ldr	r8, [r3, #12]
	str	r2, [r3, #16]
	cmp	r9, #0
	beq	.L12854
	mov	r2, r8
	mov	r1, r9
	ldr	r0, [r4]
	bl	memcpy
	movw	r3, #:lower16:rndis_response_complete
	str	r5, [r4, #32]
	mov	r1, r9
	movt	r3, #:upper16:rndis_response_complete
	str	r3, [r4, #28]
	ldr	r0, [r5, #164]
	bl	rndis_free_response
	cmp	r8, #0
	blt	.L12840
	cmp	r8, r6
	movge	r6, #0
	movlt	r6, #1
	b	.L12846
.L12858:
	.align	2
.L12857:
	.word	.LANCHOR1+3676
	.fnend
	.size	rndis_setup, .-rndis_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_uninit.part.101, %function
rndis_uninit.part.101:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	rsb	r4, r0, r0, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	ldr	r1, .L12871
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	lsl	r4, r4, #2
	mov	r2, #0
	str	lr, [sp, #12]
	mov	r6, r0
	add	r3, r3, r4
	add	r5, r3, #3664
	add	r4, r4, r1
	add	r5, r5, #12
	str	r2, [r3, #3628]
.L12860:
	ldr	r2, [r5]
	cmp	r2, r4
	ldr	r3, [r2]
	beq	.L12859
	ldr	r1, [r2, #16]
	cmp	r1, #0
	bne	.L12863
	b	.L12870
.L12866:
	ldr	r1, [r3, #16]
	cmp	r1, #0
	beq	.L12862
	mov	r3, r2
.L12863:
	cmp	r3, r4
	ldr	r2, [r3]
	bne	.L12866
.L12859:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12870:
	mov	r3, r2
.L12862:
	ldr	r1, [r3, #8]
	mov	r2, #1
	str	r2, [r3, #16]
	cmp	r1, #0
	beq	.L12859
	mov	r0, r6
	bl	rndis_free_response
	b	.L12860
.L12872:
	.align	2
.L12871:
	.word	.LANCHOR1+3676
	.fnend
	.size	rndis_uninit.part.101, .-rndis_uninit.part.101
	.align	2
	.global	rndis_uninit
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_uninit, %function
rndis_uninit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #0
	ble	.L12875
	bx	lr
.L12875:
	b	rndis_uninit.part.101
	.fnend
	.size	rndis_uninit, .-rndis_uninit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_setup, %function
rndis_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r1]	@ unaligned
	ldr	r0, [r0, #20]
	ldrh	ip, [r1, #4]	@ unaligned
	ldrh	r2, [r1, #2]	@ unaligned
	rev16	r3, r3
	ldrh	r6, [r1, #6]	@ unaligned
	uxth	r3, r3
	ldr	r7, [r0, #24]
	cmp	r3, #8448
	ldr	r4, [r7, #4]
	beq	.L12878
	movw	r1, #41217
	cmp	r3, r1
	bne	.L12890
	cmp	r2, #0
	bne	.L12890
	ldrb	r3, [r5, #120]	@ zero_extendqisi2
	cmp	r3, ip
	bne	.L12890
	ldr	r2, [r5, #144]
	movw	r3, #:lower16:.LANCHOR1
	ldr	r1, .L12893
	movt	r3, #:upper16:.LANCHOR1
	rsb	r2, r2, r2, lsl #4
	lsl	r2, r2, #2
	add	r3, r3, r2
	add	r2, r2, r1
	ldr	r1, [r3, #3676]
	cmp	r1, r2
	ldr	r3, [r1]
	beq	.L12890
	ldr	r0, [r1, #16]
	cmp	r0, #0
	bne	.L12884
	b	.L12892
.L12886:
	ldr	r0, [r3, #16]
	cmp	r0, #0
	beq	.L12883
	mov	r3, r1
.L12884:
	cmp	r2, r3
	ldr	r1, [r3]
	bne	.L12886
.L12890:
	mvn	r8, #94
.L12876:
	mov	r0, r8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12878:
	cmp	r2, #0
	bne	.L12890
	ldrb	r3, [r5, #120]	@ zero_extendqisi2
	cmp	r3, ip
	bne	.L12890
	movw	r3, #:lower16:rndis_qc_command_complete
	mov	r8, r6
	movt	r3, #:upper16:rndis_qc_command_complete
	mov	r6, r2
	str	r3, [r4, #28]
.L12882:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r8, [r4, #4]
	mov	r1, r4
	str	r5, [r4, #32]
	mov	r2, #32
	bfi	r3, r6, #1, #1
	strb	r3, [r4, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r8, r0, #0
	bge	.L12876
	movw	r0, #:lower16:.LC818
	mov	r2, r8
	ldr	r1, .L12893+4
	movt	r0, #:upper16:.LC818
	bl	printk
	b	.L12876
.L12892:
	mov	r3, r1
.L12883:
	ldr	r9, [r3, #8]
	mov	r2, #1
	ldr	r8, [r3, #12]
	str	r2, [r3, #16]
	cmp	r9, #0
	beq	.L12890
	mov	r2, r8
	mov	r1, r9
	ldr	r0, [r4]
	bl	memcpy
	movw	r3, #:lower16:rndis_qc_response_complete
	mov	r1, r9
	movt	r3, #:upper16:rndis_qc_response_complete
	str	r3, [r4, #28]
	ldr	r0, [r5, #144]
	bl	rndis_free_response
	cmp	r8, #0
	blt	.L12876
	cmp	r8, r6
	movge	r6, #0
	movlt	r6, #1
	b	.L12882
.L12894:
	.align	2
.L12893:
	.word	.LANCHOR1+3676
	.word	.LANCHOR3-320
	.fnend
	.size	rndis_qc_setup, .-rndis_qc_setup
	.align	2
	.global	rndis_msg_parser
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_msg_parser, %function
rndis_msg_parser:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	subs	r6, r1, #0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	beq	.L12909
	cmp	r0, #0
	ldr	r2, [r6]	@ unaligned
	ldr	r3, [r6, #4]	@ unaligned
	bne	.L12972
	sub	r1, r2, #2
	cmp	r1, #6
	ldrls	pc, [pc, r1, asl #2]
	b	.L12899
.L12901:
	.word	.L12900
	.word	.L12902
	.word	.L12903
	.word	.L12904
	.word	.L12950
	.word	.L12899
	.word	.L12906
.L12903:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r3, [r5, #3652]
	cmp	r3, #0
	beq	.L12972
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L12935
	mov	r2, #156
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L12909
	add	r2, r4, #20
.L12911:
	mov	r3, #136
	mov	r8, #0
	mov	r0, r4
	strd	r2, [r4, #8]
	ldr	r2, .L12978
	str	r8, [r4, #16]
	ldr	r1, [r5, #3680]
	bl	__list_add
	ldr	r7, [r4, #8]
	mov	r3, #-2147483644
	mov	r1, r4
	str	r3, [r7]
	ldr	r3, [r6, #8]
	str	r3, [r7, #8]
	ldr	r0, [r6, #12]
	bl	gen_ndis_query_resp.constprop.122
	cmp	r0, #0
	streq	r0, [r7, #12]
	beq	.L12923
	mov	r3, #187
	mov	r2, #24
	movt	r3, 49152
	str	r2, [r7, #4]
	str	r3, [r7, #12]
	str	r8, [r7, #16]
	str	r8, [r7, #20]
.L12923:
	ldr	r3, [r5, #3668]
	ldr	r0, [r5, #3672]
	blx	r3
	mov	r0, #0
	b	.L12895
.L12900:
	movw	r5, #:lower16:.LANCHOR1
	mov	r2, #1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r3, [r5, #3652]
	str	r2, [r5, #3628]
	cmp	r3, #0
	beq	.L12972
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L12933
	mov	r2, #72
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r7, r0, #0
	beq	.L12909
	add	r3, r7, #20
.L12908:
	mov	r4, #0
	mov	r8, #52
	str	r3, [r7, #8]
	ldr	r2, .L12978
	mov	r0, r7
	str	r8, [r7, #12]
	str	r4, [r7, #16]
	ldr	r1, [r5, #3680]
	bl	__list_add
	ldr	r3, [r7, #8]
	mov	r1, #-2147483646
	mov	r2, #1
	stm	r3, {r1, r8}
	ldr	r1, [r6, #8]
	str	r1, [r3, #8]
	str	r4, [r3, #12]
	str	r2, [r3, #16]
	str	r4, [r3, #20]
	str	r2, [r3, #24]
	str	r4, [r3, #28]
	ldrb	r2, [r5, #3660]	@ zero_extendqisi2
	ldr	r1, [r5, #3652]
	str	r2, [r3, #32]
	ldrb	r2, [r5, #3660]	@ zero_extendqisi2
	ldr	r1, [r1, #356]
	str	r4, [r3, #44]
	str	r4, [r3, #48]
	add	r1, r1, #80
	mul	r2, r2, r1
	str	r2, [r3, #36]
	ldrb	r2, [r5, #3661]	@ zero_extendqisi2
	str	r2, [r3, #40]
	ldr	r3, [r5, #3668]
	ldr	r0, [r5, #3672]
	blx	r3
	mov	r0, r4
	b	.L12895
.L12902:
	movw	r5, #:lower16:.LANCHOR1
	mov	r4, #0
	movt	r5, #:upper16:.LANCHOR1
	ldr	r0, [r5, #3652]
	str	r4, [r5, #3628]
	cmp	r0, r4
	beq	.L12895
	bl	netif_carrier_off
	ldr	r3, [r5, #3652]
	ldr	r5, [r3, #576]
	cmp	r5, r4
	beq	.L12973
	mov	r0, r4
	add	r1, r5, #80
	bl	_set_bit
	mov	r0, r4
.L12895:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12950:
	ldr	r6, .L12978+4
	movw	r5, #:lower16:.LANCHOR1
	mov	r7, #1
	movt	r5, #:upper16:.LANCHOR1
	add	r4, r6, #52
.L12905:
	ldr	r2, [r5, #3676]
	cmp	r2, r4
	ldr	r3, [r2]
	beq	.L12930
	ldr	r1, [r2, #16]
	cmp	r1, #0
	bne	.L12928
	b	.L12974
.L12931:
	ldr	r1, [r3, #16]
	cmp	r1, #0
	beq	.L12927
	mov	r3, r2
.L12928:
	cmp	r3, r4
	ldr	r2, [r3]
	bne	.L12931
.L12930:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L12975
	mov	r2, #36
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r7, r0, #0
	beq	.L12909
	add	r3, r7, #20
.L12925:
	mov	r4, #0
	mov	r8, #16
	str	r3, [r7, #8]
	add	r2, r6, #52
	mov	r0, r7
	str	r8, [r7, #12]
	str	r4, [r7, #16]
	ldr	r1, [r5, #3680]
	bl	__list_add
	ldr	r3, [r7, #8]
	mov	r1, #-2147483642
	mov	r2, #1
	stm	r3, {r1, r8}
	str	r4, [r3, #8]
	str	r2, [r3, #12]
	ldr	r3, [r5, #3668]
	ldr	r0, [r5, #3672]
	blx	r3
	mov	r0, r4
	b	.L12895
.L12974:
	mov	r3, r2
.L12927:
	ldr	r1, [r3, #8]
	str	r7, [r3, #16]
	cmp	r1, #0
	beq	.L12930
	mov	r0, #0
	bl	rndis_free_response
	b	.L12905
.L12975:
	mov	r3, #36
	mov	r7, #16
	b	.L12925
.L12904:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L12936
	mov	r2, #36
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L12909
	add	r3, r4, #20
.L12914:
	mov	r8, #16
	mov	r9, #0
	str	r3, [r4, #8]
	movw	r5, #:lower16:.LANCHOR1
	ldr	r2, .L12978
	mov	r0, r4
	movt	r5, #:upper16:.LANCHOR1
	strd	r8, [r4, #12]
	ldr	r1, [r5, #3680]
	bl	__list_add
	ldr	r7, [r4, #8]
	mov	r2, #-2147483643
	ldr	r3, [r6, #16]
	ldr	r0, [r6, #20]
	stm	r7, {r2, r8}
	ldr	r2, [r6, #8]
	str	r2, [r7, #8]
	ldr	r1, [r4, #8]
	ldr	r2, [r6, #12]
	cmp	r1, r9
	beq	.L12915
	movw	r1, #270
	movt	r1, 1
	cmp	r2, r1
	beq	.L12917
	movw	r1, #259
	movt	r1, 257
	cmp	r2, r1
	bne	.L12976
.L12918:
	mov	r3, #0
	str	r3, [r7, #12]
	b	.L12923
.L12906:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L12940
	mov	r2, #36
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L12909
	add	r3, r5, #20
.L12932:
	mov	r4, #0
	mov	r8, #16
	str	r3, [r5, #8]
	movw	r7, #:lower16:.LANCHOR1
	ldr	r2, .L12978
	mov	r0, r5
	movt	r7, #:upper16:.LANCHOR1
	str	r8, [r5, #12]
	str	r4, [r5, #16]
	ldr	r1, [r7, #3680]
	bl	__list_add
	ldr	r3, [r5, #8]
	mov	r2, #-2147483640
	stm	r3, {r2, r8}
	ldr	r2, [r6, #8]
	str	r2, [r3, #8]
	str	r4, [r3, #12]
	ldr	r3, [r7, #3668]
	ldr	r0, [r7, #3672]
	blx	r3
	mov	r0, r4
	b	.L12895
.L12933:
	mov	r3, #36
	mov	r7, #16
	b	.L12908
.L12935:
	mov	r2, #36
	mov	r4, #16
	b	.L12911
.L12976:
	movw	r0, #:lower16:.LC819
	ldr	r1, .L12978+8
	movt	r0, #:upper16:.LC819
	bl	printk
.L12915:
	mov	r3, #187
	movt	r3, 49152
	str	r3, [r7, #12]
	b	.L12923
.L12917:
	add	r1, r6, r0
	ldr	r3, [r5, #3648]
	ldr	r2, [r1, #8]	@ unaligned
	strh	r2, [r3]	@ movhi
	ldr	r3, [r5, #3648]
	ldrh	r4, [r3]
	cmp	r4, #0
	beq	.L12919
	mov	r3, #2
	ldr	r0, [r5, #3652]
	str	r3, [r5, #3628]
	bl	netif_carrier_on
	ldr	r3, [r5, #3652]
	ldr	r2, [r3, #164]
	tst	r2, #1
	beq	.L12918
	ldr	r4, [r3, #576]
	mov	r0, r9
	add	r1, r4, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L12918
	ldr	r0, [r4, #4]
	bl	__netif_schedule
	b	.L12918
.L12919:
	mov	r3, #1
	ldr	r0, [r5, #3652]
	str	r3, [r5, #3628]
	bl	netif_carrier_off
	ldr	r3, [r5, #3652]
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L12977
	add	r1, r1, #80
	mov	r0, r4
	bl	_set_bit
	b	.L12918
.L12909:
	mvn	r0, #11
	b	.L12895
.L12899:
	movw	r0, #:lower16:.LC820
	ldr	r1, .L12978+12
	movt	r0, #:upper16:.LC820
	bl	printk
.L12972:
	movw	r0, #65012
	movt	r0, 65535
	b	.L12895
.L12940:
	mov	r3, #36
	mov	r5, #16
	b	.L12932
.L12936:
	mov	r3, #36
	mov	r4, #16
	b	.L12914
.L12973:
	movw	r0, #:lower16:.LC88
	movw	r1, #1847
	movt	r0, #:upper16:.LC88
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC89
	movt	r0, #:upper16:.LC89
	bl	printk
	mov	r0, r5
	b	.L12895
.L12977:
	movw	r0, #:lower16:.LC88
	movw	r1, #1847
	movt	r0, #:upper16:.LC88
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC89
	movt	r0, #:upper16:.LC89
	bl	printk
	b	.L12918
.L12979:
	.align	2
.L12978:
	.word	.LANCHOR1+3676
	.word	.LANCHOR1+3624
	.word	.LANCHOR3-304
	.word	.LANCHOR3-284
	.fnend
	.size	rndis_msg_parser, .-rndis_msg_parser
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_command_complete, %function
rndis_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r5, #20]
	cmp	r3, #0
	beq	.L12980
	ldr	r6, [r3, #24]
	cmp	r6, #0
	beq	.L12980
	mov	r4, r1
	ldrb	r0, [r5, #164]	@ zero_extendqisi2
	ldr	r1, [r1]
	bl	rndis_msg_parser
	subs	r2, r0, #0
	blt	.L12991
.L12984:
	ldr	r3, [r4]
	ldr	r2, [r3]
	cmp	r2, #2
	beq	.L12992
.L12980:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12992:
	ldr	r3, [r3, #20]
	cmp	r3, #2048
	movhi	r3, #1
	movls	r3, #0
	strb	r3, [r5, #124]
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	ldr	r3, [r3, #-1248]
	cmp	r3, #1
	movls	r3, #0
	strbls	r3, [r5, #124]
	b	.L12980
.L12991:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC821
	ldr	ip, [r4, #4]
	movt	r1, #:upper16:.LC821
	ldr	r3, [r4, #48]
	add	r0, r0, #32
	str	ip, [sp]
	bl	dev_err
	b	.L12984
	.fnend
	.size	rndis_command_complete, .-rndis_command_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_command_complete, %function
rndis_qc_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r4, r1
	str	lr, [sp, #8]
	ldr	r5, [r1, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r1, [r1]
	ldrb	r0, [r5, #144]	@ zero_extendqisi2
	bl	rndis_msg_parser
	subs	r2, r0, #0
	blt	.L12997
.L12994:
	ldr	r3, [r4]
	ldr	r2, [r3]
	cmp	r2, #2
	ldreq	r3, [r3, #20]
	streq	r3, [r5, #136]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L12997:
	ldr	ip, [r4, #4]
	movw	r0, #:lower16:.LC822
	ldr	r3, [r4, #48]
	movt	r0, #:upper16:.LC822
	ldr	r1, .L12998
	str	ip, [sp]
	bl	printk
	b	.L12994
.L12999:
	.align	2
.L12998:
	.word	.LANCHOR3-264
	.fnend
	.size	rndis_qc_command_complete, .-rndis_qc_command_complete
	.align	2
	.global	rndis_get_next_response
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_get_next_response, %function
rndis_get_next_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	beq	.L13006
	rsb	r0, r0, r0, lsl #4
	ldr	ip, .L13014
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	lsl	r2, r0, #2
	add	r3, r3, r2
	add	r2, r2, ip
	ldr	ip, [r3, #3676]
	cmp	ip, r2
	ldr	r3, [ip]
	beq	.L13006
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	r0, [ip, #16]
	cmp	r0, #0
	bne	.L13003
	b	.L13013
.L13004:
	ldr	lr, [r3, #16]
	cmp	lr, #0
	beq	.L13002
	mov	r3, ip
.L13003:
	cmp	r2, r3
	ldr	ip, [r3]
	bne	.L13004
	mov	r0, #0
	ldr	pc, [sp], #4
.L13013:
	mov	r3, ip
.L13002:
	ldr	r2, [r3, #12]
	mov	r0, #1
	str	r0, [r3, #16]
	str	r2, [r1]
	ldr	r0, [r3, #8]
	ldr	pc, [sp], #4
.L13006:
	mov	r0, #0
	bx	lr
.L13015:
	.align	2
.L13014:
	.word	.LANCHOR1+3676
	.fnend
	.size	rndis_get_next_response, .-rndis_get_next_response
	.align	2
	.global	rndis_init
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_init, %function
rndis_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldrb	r3, [r3, #3684]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L13017
	b	rndis_init.part.102
.L13017:
	mov	r0, #0
	bx	lr
	.fnend
	.size	rndis_init, .-rndis_init
	.align	2
	.global	rndis_exit
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_exit, %function
rndis_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldrb	r3, [r3, #3684]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L13020
	bx	lr
.L13020:
	b	rndis_exit.part.103
	.fnend
	.size	rndis_exit, .-rndis_exit
	.align	2
	.global	ecm_ipa_init
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_ipa_init, %function
ecm_ipa_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	ecm_ipa_init, .-ecm_ipa_init
	.align	2
	.global	ecm_qc_get_ipa_rx_cb
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_get_ipa_rx_cb, %function
ecm_qc_get_ipa_rx_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3512]
	bx	lr
	.fnend
	.size	ecm_qc_get_ipa_rx_cb, .-ecm_qc_get_ipa_rx_cb
	.align	2
	.global	ecm_qc_get_ipa_tx_cb
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_get_ipa_tx_cb, %function
ecm_qc_get_ipa_tx_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3516]
	bx	lr
	.fnend
	.size	ecm_qc_get_ipa_tx_cb, .-ecm_qc_get_ipa_tx_cb
	.align	2
	.global	ecm_qc_get_ipa_priv
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_get_ipa_priv, %function
ecm_qc_get_ipa_priv:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3532]
	bx	lr
	.fnend
	.size	ecm_qc_get_ipa_priv, .-ecm_qc_get_ipa_priv
	.align	2
	.global	fmbim_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	fmbim_free_req, %function
fmbim_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r1, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L13025
	mov	r4, r0
	ldr	r0, [r5]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L13025:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	fmbim_free_req, .-fmbim_free_req
	.align	2
	.global	mbim_configure_params
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_configure_params, %function
mbim_configure_params:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L13030
	movw	r0, #:lower16:.LC823
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r0, #:upper16:.LC823
	str	lr, [sp, #4]
	mov	r1, r2
	bl	printk
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #0
	ldr	pc, [sp], #4
.L13031:
	.align	2
.L13030:
	.word	.LANCHOR3-236
	.fnend
	.size	mbim_configure_params, .-mbim_configure_params
	.align	2
	.global	bam_data_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_disconnect, %function
bam_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r3, [r4, #4060]
	str	lr, [sp, #12]
	cmp	r1, r3
	bge	.L13049
	cmp	r0, #0
	beq	.L13050
	add	r1, r4, r1, lsl #2
	ldr	r5, [r1, #2616]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L13035
	ldr	r2, [r3, #8]
	cmp	r2, #0
	beq	.L13035
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L13035
	ldr	r0, [r3, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #4]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r5, #4]
	mov	r3, #0
	ldr	r2, [r2, #8]
	str	r3, [r2]
	ldr	r2, [r5, #4]
	ldr	r2, [r2, #12]
	str	r3, [r2]
	str	r3, [r5, #4]
.L13035:
	ldr	r3, [r5, #60]
	cmp	r3, #7
	beq	.L13051
	mov	r0, #0
	bl	usb_bam_client_ready
	cmp	r0, #0
	bne	.L13052
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13051:
	add	r2, r5, #184
	ldr	r1, [r4, #2620]
	mov	r0, #4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on
.L13050:
	movw	r0, #:lower16:.LC824
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC824
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, .L13053
	b	printk
.L13049:
	mov	r2, r1
	ldr	r1, .L13053
	movw	r0, #:lower16:.LC763
	movt	r0, #:upper16:.LC763
.L13048:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L13052:
	ldr	r2, .L13053
	movw	r0, #:lower16:.LC825
	movt	r0, #:upper16:.LC825
	mov	r1, r2
	b	.L13048
.L13054:
	.align	2
.L13053:
	.word	.LANCHOR3-212
	.fnend
	.size	bam_data_disconnect, .-bam_data_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_disable, %function
mbim_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, #0
	movw	r0, #:lower16:.LC826
	ldr	r1, .L13061
	str	r6, [sp, #8]
	movt	r0, #:upper16:.LC826
	str	lr, [sp, #12]
	bl	printk
	mov	r0, r4
	str	r5, [r4, #88]
	strb	r5, [r4, #164]
	bl	mbim_clear_queues
	mov	r0, r4
	bl	mbim_reset_function_queue
	movw	r0, #:lower16:.LC827
	ldrb	r3, [r4, #136]	@ zero_extendqisi2
	mov	r2, r4
	ldr	r1, .L13061+4
	movt	r0, #:upper16:.LC827
	bl	printk
	add	r0, r4, #140
	ldrb	r1, [r4, #136]	@ zero_extendqisi2
	bl	bam_data_disconnect
	ldr	r0, [r4, #156]
	ldr	r3, [r0]
	cmp	r3, r5
	beq	.L13056
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #156]
	str	r5, [r3]
.L13056:
	mov	r3, #0
	movw	r0, #:lower16:.LC828
	ldr	r1, .L13061
	movt	r0, #:upper16:.LC828
	str	r3, [r4, #168]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L13062:
	.align	2
.L13061:
	.word	.LANCHOR3-192
	.word	.LANCHOR3-176
	.fnend
	.size	mbim_disable, .-mbim_disable
	.align	2
	.global	bam_data_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_connect, %function
bam_data_connect:
	.fnstart
	@ args = 8, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldrb	r8, [sp, #32]	@ zero_extendqisi2
	ldr	r0, [r6, #4060]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	cmp	r1, r0
	bge	.L13071
	cmp	r5, #0
	beq	.L13072
	mov	r9, r3
	ldr	r3, [r5, #8]
	mov	r7, r2
	add	r1, r6, r1, lsl #2
	ldr	r4, [r1, #2616]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r10, r0, #0
	bne	.L13073
	ldr	r3, [r5, #8]
	str	r4, [r3]
	ldr	r3, [r5, #12]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r10, r0, #0
	bne	.L13074
	ldr	r3, [r5, #12]
	cmp	r7, #7
	str	r4, [r3]
	ldr	r3, [sp, #36]
	str	r5, [r4, #4]
	strb	r9, [r4, #52]
	strb	r8, [r4, #53]
	str	r3, [r4, #56]
	str	r7, [r4, #60]
	bne	.L13069
	add	r2, r4, #44
	add	r3, r4, #48
	strb	r9, [r4, #64]
	strb	r8, [r4, #65]
	strd	r2, [r4, #68]
.L13069:
	add	r2, r4, #168
	mov	r0, #4
	ldr	r1, [r6, #2620]
	bl	queue_work_on
.L13063:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13074:
	movw	r0, #:lower16:.LC246
	ldr	r2, [r5, #12]
	movt	r0, #:upper16:.LC246
	ldr	r1, .L13075
	bl	printk
	ldr	r3, [r5, #8]
	mov	r2, #0
	str	r2, [r3]
	b	.L13063
.L13073:
	movw	r0, #:lower16:.LC245
	ldr	r1, .L13075
	ldr	r2, [r5, #8]
	movt	r0, #:upper16:.LC245
	bl	printk
	b	.L13063
.L13072:
	movw	r0, #:lower16:.LC824
	ldr	r1, .L13075
	mvn	r10, #18
	movt	r0, #:upper16:.LC824
	bl	printk
	b	.L13063
.L13071:
	movw	r0, #:lower16:.LC92
	mov	r2, r1
	ldr	r1, .L13075
	movt	r0, #:upper16:.LC92
	mvn	r10, #18
	bl	printk
	b	.L13063
.L13076:
	.align	2
.L13075:
	.word	.LANCHOR3-156
	.fnend
	.size	bam_data_connect, .-bam_data_connect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_set_alt, %function
mbim_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r5, [r0, #196]	@ zero_extendqisi2
	.pad #8
	sub	sp, sp, #8
	ldr	r8, [r0, #84]
	cmp	r5, r1
	beq	.L13100
	ldrb	r3, [r0, #197]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L13079
	movw	r0, #:lower16:.LC832
	ldr	r1, .L13109
	movt	r0, #:upper16:.LC832
	bl	printk
	cmp	r6, #1
	bhi	.L13079
	ldr	r3, [r4, #148]
	ldr	r3, [r3]
	cmp	r3, #0
	bne	.L13101
.L13085:
	cmp	r6, #1
	beq	.L13102
.L13086:
	add	r5, r4, #204
	strb	r6, [r4, #198]
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r3, #3
	mov	r0, r5
	strb	r3, [r4, #164]
	bl	_raw_spin_unlock
.L13084:
	mov	r5, #1
	movw	r0, #:lower16:.LC844
	ldr	r1, .L13109
	mov	r7, #0
	movt	r0, #:upper16:.LC844
	str	r5, [r4, #88]
	bl	printk
	mov	r2, r5
	mov	r3, r7
	mov	r1, #3
	add	r0, r4, #108
	bl	__wake_up
	mov	r2, r5
	add	r0, r4, #120
	mov	r3, r7
	mov	r1, #3
	bl	__wake_up
.L13077:
	mov	r0, r7
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13102:
	movw	r0, #:lower16:.LC834
	ldr	r1, .L13109
	movt	r0, #:upper16:.LC834
	bl	printk
	ldr	r3, [r4, #148]
	ldr	r5, [r3, #28]
	cmp	r5, #0
	beq	.L13103
	movw	r0, #:lower16:.LC843
	ldr	r1, .L13109
	movt	r0, #:upper16:.LC843
	bl	printk
	b	.L13086
.L13103:
	movw	r0, #:lower16:.LC835
	ldr	r1, .L13109
	movt	r0, #:upper16:.LC835
	bl	printk
	mov	r1, r4
	ldr	r2, [r4, #148]
	ldr	r0, [r8]
	bl	config_ep_by_speed
	subs	r7, r0, #0
	bne	.L13104
	ldr	r3, [r4, #148]
	movw	r0, #:lower16:.LC837
	ldr	r1, .L13109
	movt	r0, #:upper16:.LC837
	ldr	r2, [r3, #28]
	bl	printk
	mov	r1, r4
	ldr	r2, [r4, #152]
	ldr	r0, [r8]
	bl	config_ep_by_speed
	subs	r7, r0, #0
	bne	.L13105
	ldr	r3, [r4, #152]
	movw	r0, #:lower16:.LC839
	ldr	r1, .L13109
	movt	r0, #:upper16:.LC839
	ldr	r2, [r3, #28]
	bl	printk
	ldr	lr, [r4, #84]
	movw	r0, #:lower16:.LC840
	mov	r2, r4
	ldr	ip, [r4, #132]
	movt	r0, #:upper16:.LC840
	ldrb	r3, [r4, #136]	@ zero_extendqisi2
	ldr	r1, .L13109+4
	ldr	r8, [lr]
	cmp	ip, #7
	moveq	r5, #2
	movne	r5, #0
	bl	printk
	mov	r2, r7
	mov	r1, r5
	ldrb	r3, [r4, #136]	@ zero_extendqisi2
	ldr	r0, [r8, #28]
	bl	usb_bam_get_connection_idx
	mov	r7, r0
	mov	r1, r5
	ldrb	r3, [r4, #136]	@ zero_extendqisi2
	mov	r2, r6
	ldr	r0, [r8, #28]
	bl	usb_bam_get_connection_idx
	uxtb	ip, r0
	ldr	r2, [r4, #132]
	uxtb	r3, r7
	str	r6, [sp, #4]
	ldrb	r1, [r4, #136]	@ zero_extendqisi2
	add	r0, r4, #140
	str	ip, [sp]
	bl	bam_data_connect
	subs	r2, r0, #0
	bne	.L13106
	movw	r0, #:lower16:.LC842
	ldr	r1, .L13109+4
	movt	r0, #:upper16:.LC842
	bl	printk
	b	.L13086
.L13079:
	movw	r0, #:lower16:.LC845
	ldr	r1, .L13109
	mvn	r7, #21
	movt	r0, #:upper16:.LC845
	bl	printk
	b	.L13077
.L13105:
	ldr	r2, [r4, #152]
	movw	r0, #:lower16:.LC838
	mov	r3, r7
	ldr	r1, .L13109
	movt	r0, #:upper16:.LC838
	str	r5, [r2, #28]
	ldr	r2, [r4, #152]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L13077
.L13104:
	ldr	r2, [r4, #148]
	movw	r0, #:lower16:.LC836
	mov	r3, r7
	ldr	r1, .L13109
	movt	r0, #:upper16:.LC836
	str	r5, [r2, #28]
	ldr	r2, [r4, #148]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L13077
.L13106:
	movw	r0, #:lower16:.LC841
	ldr	r1, .L13109+4
	movt	r0, #:upper16:.LC841
	bl	printk
	b	.L13086
.L13101:
	movw	r0, #:lower16:.LC833
	ldr	r1, .L13109
	movt	r0, #:upper16:.LC833
	bl	printk
	ldr	r3, .L13109+8
	mov	r2, #16384
	mov	r1, #0
	str	r1, [r4, #88]
	str	r3, [r4, #200]
	str	r2, [r4, #224]
	b	.L13085
.L13100:
	movw	r0, #:lower16:.LC829
	ldr	r1, .L13109
	movt	r0, #:upper16:.LC829
	bl	printk
	cmp	r6, #0
	bne	.L13079
	ldr	r3, [r4, #156]
	ldr	r3, [r3]
	cmp	r3, #0
	bne	.L13107
.L13080:
	mov	r1, r4
	ldr	r2, [r4, #156]
	ldr	r0, [r8]
	bl	config_ep_by_speed
	subs	r7, r0, #0
	bne	.L13108
	ldr	r3, [r4, #156]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r7, r0, #0
	ldreq	r3, [r4, #156]
	streq	r4, [r3]
	beq	.L13084
	ldr	r2, [r4, #156]
	movw	r0, #:lower16:.LC636
	mov	r3, r7
	ldr	r1, .L13109
	movt	r0, #:upper16:.LC636
	ldr	r2, [r2, #4]
	bl	printk
	b	.L13077
.L13107:
	movw	r0, #:lower16:.LC830
	mov	r2, r5
	ldr	r1, .L13109
	movt	r0, #:upper16:.LC830
	bl	printk
	ldr	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L13080
.L13108:
	ldr	r2, [r4, #156]
	mov	ip, #0
	movw	r0, #:lower16:.LC831
	mov	r3, r7
	ldr	r1, .L13109
	movt	r0, #:upper16:.LC831
	str	ip, [r2, #28]
	ldr	r2, [r4, #156]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L13077
.L13110:
	.align	2
.L13109:
	.word	.LANCHOR3-136
	.word	.LANCHOR3-120
	.word	.LANCHOR0+1320
	.fnend
	.size	mbim_set_alt, .-mbim_set_alt
	.align	2
	.global	bam_data_destroy
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_destroy, %function
bam_data_destroy:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	add	r5, r4, r0, lsl #2
	str	lr, [sp, #12]
	ldr	r0, [r5, #2616]
	bl	kfree
	ldr	r0, [r4, #2620]
	mov	r3, #0
	str	r3, [r5, #2616]
	cmp	r0, r3
	beq	.L13112
	bl	destroy_workqueue
.L13112:
	mov	r3, #0
	ldr	r6, [sp, #8]
	mov	r0, r3
	str	r3, [r4, #2620]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	bam_data_destroy, .-bam_data_destroy
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_unbind, %function
ecm_qc_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	mov	r0, #0
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	bam_data_destroy
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L13121
.L13118:
	cmp	r3, #2
	bls	.L13119
	ldr	r0, [r4, #8]
	bl	kfree
.L13119:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r3, [r4, #148]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #144]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	movw	r3, #:lower16:.LANCHOR4
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR4
	mov	r0, r4
	str	r2, [r3, #-1224]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
.L13121:
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L13118
	.fnend
	.size	ecm_qc_unbind, .-ecm_qc_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_unbind, %function
mbim_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r0, [r1, #136]	@ zero_extendqisi2
	bl	bam_data_destroy
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L13126
.L13123:
	cmp	r3, #2
	bls	.L13124
	ldr	r0, [r4, #8]
	bl	kfree
.L13124:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r3, [r4, #160]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR0
	strb	r2, [r3, #190]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13126:
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L13123
	.fnend
	.size	mbim_unbind, .-mbim_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_unbind, %function
rndis_qc_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	mov	r6, r0
	mov	r0, #0
	str	lr, [sp, #12]
	bl	bam_data_destroy
	ldr	r3, [r4, #144]
	cmp	r3, #0
	ble	.L13135
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldrb	r3, [r5, #3684]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L13137
.L13129:
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L13130
	ldr	r0, [r4, #8]
	bl	kfree
.L13130:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r3, [r4, #160]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, .L13138
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r0, r4
	bl	kfree
	mov	r3, #0
	mov	r1, r6
	ldr	r0, .L13138
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	str	r3, [r5, #2512]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L13135:
	rsb	r3, r3, r3, lsl #4
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	add	r3, r5, r3, lsl #2
	mov	r2, #0
	strb	r2, [r3, #3625]
	ldrb	r3, [r5, #3684]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L13129
.L13137:
	bl	rndis_exit.part.103
	b	.L13129
.L13139:
	.align	2
.L13138:
	.word	.LANCHOR1+2508
	.fnend
	.size	rndis_qc_unbind, .-rndis_qc_unbind
	.align	2
	.global	bam_data_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_setup, %function
bam_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #1
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r2, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	bne	.L13150
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #2620]
	cmp	r3, #0
	movne	r0, #0
	beq	.L13151
.L13140:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L13151:
	movw	r0, #:lower16:.LC846
	mov	r1, #10
	str	r3, [sp]
	movt	r0, #:upper16:.LC846
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r4, #2620]
	beq	.L13143
	movw	r2, #:lower16:kmalloc_caches
	ldr	r3, [r4, #4060]
	movt	r2, #:upper16:kmalloc_caches
	ldr	r0, [r2, #32]
	add	r3, r3, #1
	cmp	r0, #0
	str	r3, [r4, #4060]
	beq	.L13148
	mov	r2, #232
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r2, r0, #0
	beq	.L13152
.L13144:
	movw	r0, #:lower16:bam2bam_data_connect_work
	movw	lr, #:lower16:bam2bam_data_disconnect_work
	str	r2, [r2, #16]
	add	r5, r2, #172
	movt	r0, #:upper16:bam2bam_data_connect_work
	movt	lr, #:upper16:bam2bam_data_disconnect_work
	mov	r3, #65024
	movw	ip, #:lower16:bam2bam_data_suspend_work
	movw	r1, #:lower16:bam2bam_data_resume_work
	str	r5, [r2, #172]
	movt	r3, 65535
	add	r6, r2, #188
	movt	ip, #:upper16:bam2bam_data_suspend_work
	movt	r1, #:upper16:bam2bam_data_resume_work
	str	r3, [r2, #168]
	str	r5, [r2, #176]
	add	r5, r2, #204
	str	r0, [r2, #180]
	mov	r0, #0
	str	lr, [r2, #196]
	add	lr, r2, #220
	str	r0, [r2]
	str	r3, [r2, #184]
	str	r6, [r2, #188]
	str	r6, [r2, #192]
	str	r3, [r2, #200]
	str	r5, [r2, #204]
	str	r5, [r2, #208]
	str	ip, [r2, #212]
	str	r3, [r2, #216]
	str	lr, [r2, #220]
	str	lr, [r2, #224]
	str	r1, [r2, #228]
	str	r2, [r4, #2616]
	b	.L13140
.L13148:
	mov	r2, #16
	b	.L13144
.L13152:
	ldr	r3, [r4, #4060]
	movw	r0, #:lower16:.LC847
	mov	r5, r2
	movt	r0, #:upper16:.LC847
	ldr	r1, .L13153
	mov	r7, r2
	ldr	r6, .L13153+4
	sub	r3, r3, #1
	str	r3, [r4, #4060]
	bl	printk
.L13145:
	ldr	r3, [r4, #4060]
	cmp	r5, r3
	blt	.L13146
	ldr	r0, [r4, #2620]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L13140
.L13150:
	movw	r0, #:lower16:.LC772
	ldr	r1, .L13153
	movt	r0, #:upper16:.LC772
	bl	printk
	mvn	r0, #21
	b	.L13140
.L13143:
	movw	r0, #:lower16:.LC848
	ldr	r1, .L13153
	movt	r0, #:upper16:.LC848
	bl	printk
	mvn	r0, #11
	b	.L13140
.L13146:
	ldr	r0, [r6, r5, lsl #2]
	bl	kfree
	str	r7, [r6, r5, lsl #2]
	add	r5, r5, #1
	b	.L13145
.L13154:
	.align	2
.L13153:
	.word	.LANCHOR3-100
	.word	.LANCHOR1+2616
	.fnend
	.size	bam_data_setup, .-bam_data_setup
	.align	2
	.global	mbim_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_bind_config, %function
mbim_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r6, r0
	movw	r0, #:lower16:.LC849
	str	r8, [sp, #16]
	mov	r8, r1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r1, .L13170
	mov	r7, r2
	movt	r0, #:upper16:.LC849
	mov	r2, r8
	str	lr, [sp, #20]
	bl	printk
	ldr	r4, [r5, #3548]
	cmp	r4, r8
	bls	.L13166
	movw	r0, #:lower16:.LC851
	mov	r2, r4
	ldr	r1, .L13170+4
	movt	r0, #:upper16:.LC851
	bl	printk
	mov	r0, r4
	bl	bam_data_setup
	subs	r8, r0, #0
	bne	.L13167
	movw	r0, #:lower16:.LC492
	mov	r2, r4
	ldr	r1, .L13170+4
	movt	r0, #:upper16:.LC492
	bl	printk
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	ldrb	r2, [r3, #-1204]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L13168
.L13159:
	ldr	r4, [r5, #3552]
	cmp	r4, #0
	beq	.L13169
	ldr	ip, .L13170+8
	movw	r2, #:lower16:.LC855
	movw	r3, #:lower16:mbim_bind
	movt	r2, #:upper16:.LC855
	movt	r3, #:upper16:mbim_bind
	ldr	r5, [r6, #24]
	movw	r1, #:lower16:mbim_unbind
	ldr	lr, .L13170+12
	mov	r0, r7
	movt	r1, #:upper16:mbim_unbind
	stm	r4, {r2, ip}
	movw	r2, #:lower16:mbim_set_alt
	movw	ip, #:lower16:mbim_disable
	str	r3, [r4, #32]
	movw	r3, #:lower16:mbim_get_alt
	movt	r2, #:upper16:mbim_set_alt
	movt	r3, #:upper16:mbim_get_alt
	str	r1, [r4, #36]
	movw	r1, #:lower16:mbim_setup
	movt	r1, #:upper16:mbim_setup
	movt	ip, #:upper16:mbim_disable
	strd	r2, [r4, #40]
	movw	r2, #:lower16:mbim_suspend
	movw	r3, #:lower16:mbim_resume
	movt	r2, #:upper16:mbim_suspend
	movt	r3, #:upper16:mbim_resume
	str	ip, [r4, #48]
	str	r1, [r4, #52]
	mov	r1, #16384
	strd	r2, [r4, #56]
	mov	r2, #0
	str	r5, [r4, #84]
	movw	r5, #:lower16:.LANCHOR0
	str	r2, [r4, #88]
	movt	r5, #:upper16:.LANCHOR0
	str	lr, [r4, #200]
	str	r1, [r4, #224]
	bl	str_to_xport
	cmp	r0, #7
	str	r0, [r4, #132]
	beq	.L13163
	mov	r3, #6
	str	r3, [r4, #132]
.L13164:
	add	r2, r4, #208
	add	r3, r4, #216
	mov	r1, r4
	mov	r0, r6
	str	r2, [r4, #208]
	strd	r2, [r4, #212]
	str	r3, [r4, #220]
	bl	usb_add_function
	mov	r8, r0
	mov	r2, r0
	ldr	r1, .L13170
	movw	r0, #:lower16:.LC856
	movt	r0, #:upper16:.LC856
	bl	printk
.L13155:
	mov	r0, r8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13168:
	ldr	r0, [r6, #24]
	ldrb	r2, [r0, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L13161
	add	r2, r2, #1
	movw	r1, #:lower16:.LANCHOR0
	uxtb	r2, r2
	movt	r1, #:upper16:.LANCHOR0
	strb	r2, [r0, #48]
	ldr	r0, [r6, #24]
	strb	r2, [r1, #2484]
	strb	r2, [r3, #-1204]
	ldrb	r2, [r0, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L13161
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r0, #48]
	strb	r2, [r1, #2504]
	strb	r2, [r1, #2516]
	strb	r2, [r3, #-1196]
	b	.L13159
.L13167:
	movw	r0, #:lower16:.LC852
	mov	r2, r8
	ldr	r1, .L13170+4
	movt	r0, #:upper16:.LC852
	bl	printk
	movw	r0, #:lower16:.LC853
	ldr	r1, .L13170
	movt	r0, #:upper16:.LC853
	bl	printk
	b	.L13155
.L13163:
	mov	r3, #8192
	mov	r2, #16
	mov	r1, #1
	str	r3, [r5, #52]
	strh	r1, [r5, #56]	@ movhi
	str	r3, [r5, #64]
	strh	r2, [r5, #74]	@ movhi
	b	.L13164
.L13161:
	mvn	r8, #18
	b	.L13155
.L13169:
	movw	r0, #:lower16:.LC854
	ldr	r1, .L13170
	mvn	r8, #11
	movt	r0, #:upper16:.LC854
	bl	printk
	b	.L13155
.L13166:
	movw	r0, #:lower16:.LC850
	mov	r2, r8
	ldr	r1, .L13170
	mov	r3, r4
	movt	r0, #:upper16:.LC850
	bl	printk
	mvn	r8, #18
	b	.L13155
.L13171:
	.align	2
.L13170:
	.word	.LANCHOR3-84
	.word	.LANCHOR3-64
	.word	.LANCHOR4-1180
	.word	.LANCHOR0+1320
	.fnend
	.size	mbim_bind_config, .-mbim_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_function_bind_config, %function
mbim_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, .L13174
	mov	r4, r1
	str	lr, [sp, #4]
	bl	strim
	mov	r2, r0
	ldr	lr, [sp, #4]
	mov	r0, r4
	mov	r1, #0
	ldr	r4, [sp]
	add	sp, sp, #8
	b	mbim_bind_config
.L13175:
	.align	2
.L13174:
	.word	.LANCHOR1+2948
	.fnend
	.size	mbim_function_bind_config, .-mbim_function_bind_config
	.align	2
	.global	bam_data_suspend
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_suspend, %function
bam_data_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r2, r3, r0, lsl #2
	ldr	r1, [r3, #2620]
	mov	r0, #4
	ldr	r2, [r2, #2616]
	add	r2, r2, #200
	b	queue_work_on
	.fnend
	.size	bam_data_suspend, .-bam_data_suspend
	.align	2
	.global	bam_data_resume
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_resume, %function
bam_data_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r2, r3, r0, lsl #2
	ldr	r1, [r3, #2620]
	mov	r0, #4
	ldr	r2, [r2, #2616]
	add	r2, r2, #216
	b	queue_work_on
	.fnend
	.size	bam_data_resume, .-bam_data_resume
	.align	2
	.global	ecm_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_bind_config, %function
ecm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	mov	r8, r0
	movw	r0, #:lower16:.LC339
	strd	r10, [sp, #24]
	movt	r0, #:upper16:.LC339
	str	lr, [sp, #32]
	ldr	r7, [r8, #24]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r7]
	ldr	r4, [r3, #28]
	mov	r1, r4
	bl	strcmp
	cmp	r0, #0
	beq	.L13185
	movw	r0, #:lower16:.LC342
	mov	r1, r4
	movt	r0, #:upper16:.LC342
	bl	strcmp
	cmp	r0, #0
	cmpne	r6, #0
	beq	.L13185
	movw	r5, #:lower16:.LANCHOR0
	movt	r5, #:upper16:.LANCHOR0
	ldrb	r3, [r5, #1712]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L13180
	ldrb	r3, [r7, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13182
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r7, #48]
	ldr	r2, [r8, #24]
	strb	r3, [r5, #1712]
	strb	r3, [r5, #2812]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13182
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r1, [r8, #24]
	strb	r3, [r5, #1728]
	strb	r3, [r5, #2844]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13182
	add	r3, r3, #1
	movw	r2, #:lower16:.LANCHOR4
	uxtb	r3, r3
	movt	r2, #:upper16:.LANCHOR4
	strb	r3, [r1, #48]
	ldr	r1, [r8, #24]
	strb	r3, [r2, #-1169]
	strb	r3, [r5, #1720]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13182
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	strb	r3, [r5, #1736]
	strb	r3, [r5, #2803]
.L13180:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L13186
	mov	r2, #176
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L13192
.L13183:
	ldrb	lr, [r6, #2]	@ zero_extendqisi2
	add	r7, r4, #150
	movw	r2, #:lower16:.LC857
	ldrb	ip, [r6, #1]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC857
	mov	r1, #14
	ldrb	fp, [r6, #5]	@ zero_extendqisi2
	mov	r0, r7
	ldrb	r10, [r6, #4]	@ zero_extendqisi2
	ldrb	r9, [r6, #3]	@ zero_extendqisi2
	ldrb	r3, [r6]	@ zero_extendqisi2
	stm	sp, {ip, lr}
	ldr	r6, .L13193
	str	r9, [sp, #8]
	strd	r10, [sp, #12]
	bl	snprintf
	movw	r3, #:lower16:.LC858
	str	r7, [r5, #1724]
	movw	r0, #:lower16:ecm_bind
	movt	r3, #:upper16:.LC858
	movw	lr, #:lower16:ecm_unbind
	movw	r1, #:lower16:ecm_set_alt
	movw	ip, #:lower16:ecm_get_alt
	stm	r4, {r3, r6}
	movw	r2, #:lower16:ecm_disable
	movw	r3, #:lower16:ecm_setup
	movt	r0, #:upper16:ecm_bind
	movt	lr, #:upper16:ecm_unbind
	movt	r1, #:upper16:ecm_set_alt
	movt	ip, #:upper16:ecm_get_alt
	movt	r2, #:upper16:ecm_disable
	movt	r3, #:upper16:ecm_setup
	str	r0, [r4, #32]
	mov	r6, #15
	str	lr, [r4, #36]
	mov	r0, r8
	str	r1, [r4, #40]
	mov	r1, r4
	str	ip, [r4, #44]
	str	r2, [r4, #48]
	str	r3, [r4, #52]
	strh	r6, [r4, #98]	@ movhi
	bl	usb_add_function
	subs	r6, r0, #0
	beq	.L13178
	mov	r3, #0
	mov	r0, r4
	str	r3, [r5, #1724]
	bl	kfree
.L13178:
	mov	r0, r6
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13186:
	mov	r4, #16
	b	.L13183
.L13185:
	mvn	r6, #21
	b	.L13178
.L13182:
	mvn	r6, #18
	b	.L13178
.L13192:
	mvn	r6, #11
	b	.L13178
.L13194:
	.align	2
.L13193:
	.word	.LANCHOR4-1156
	.fnend
	.size	ecm_bind_config, .-ecm_bind_config
	.align	2
	.global	rndis_qc_bind_config_vendor
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_bind_config_vendor, %function
rndis_qc_bind_config_vendor:
	.fnstart
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	subs	r7, r1, #0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldrb	r10, [sp, #40]	@ zero_extendqisi2
	beq	.L13208
	movw	r5, #:lower16:.LANCHOR1
	mov	r8, r3
	movt	r5, #:upper16:.LANCHOR1
	mov	r9, r2
	ldrb	r3, [r5, #3684]	@ zero_extendqisi2
	mov	r6, r0
	cmp	r3, #0
	beq	.L13197
.L13200:
	mov	r0, #1
	bl	bam_data_setup
	subs	fp, r0, #0
	bne	.L13216
	movw	ip, #:lower16:.LANCHOR4
	movt	ip, #:upper16:.LANCHOR4
	ldrb	r3, [ip, #-1148]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L13202
	ldr	r2, [r6, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13204
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r6, #24]
	strb	r3, [ip, #-3416]
	strb	r3, [ip, #-1148]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13204
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r6, #24]
	strb	r3, [ip, #-3396]
	strb	r3, [ip, #-1140]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13204
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	strb	r3, [ip, #-3425]
	strb	r3, [ip, #-1132]
.L13202:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L13209
	mov	r2, #184
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L13217
.L13205:
	ldr	r1, [r7]	@ unaligned
	movw	r3, #:lower16:rndis_qc_add_header
	cmp	r10, #0
	ldr	r2, .L13219
	movt	r3, #:upper16:rndis_qc_add_header
	moveq	r10, #15
	mov	r0, r6
	str	r1, [r4, #122]	@ unaligned
	movw	r1, #:lower16:rndis_qc_rm_hdr
	ldrh	ip, [r7, #4]	@ unaligned
	str	r2, [r4, #4]
	movw	r2, #:lower16:.LC816
	movt	r1, #:upper16:rndis_qc_rm_hdr
	str	r3, [r4, #104]
	movw	r3, #:lower16:rndis_qc_bind
	movt	r2, #:upper16:.LC816
	movt	r3, #:upper16:rndis_qc_bind
	str	r2, [r4]
	movw	r2, #:lower16:rndis_qc_set_alt
	str	r3, [r4, #32]
	movw	r3, #:lower16:rndis_qc_setup
	movt	r2, #:upper16:rndis_qc_set_alt
	movt	r3, #:upper16:rndis_qc_setup
	str	r1, [r4, #108]
	movw	r1, #:lower16:rndis_qc_unbind
	movt	r1, #:upper16:rndis_qc_unbind
	str	r1, [r4, #36]
	movw	r1, #:lower16:rndis_qc_disable
	str	r2, [r4, #40]
	movw	r2, #:lower16:rndis_qc_suspend
	movt	r1, #:upper16:rndis_qc_disable
	str	r3, [r4, #52]
	movw	r3, #:lower16:rndis_qc_resume
	movt	r2, #:upper16:rndis_qc_suspend
	movt	r3, #:upper16:rndis_qc_resume
	str	r1, [r4, #48]
	mov	r1, #0
	strh	ip, [r4, #126]	@ unaligned
	strd	r2, [r4, #56]
	mov	r2, #44
	strh	r1, [r4, #98]	@ movhi
	mov	r1, r4
	str	r2, [r4, #100]
	str	r9, [r4, #128]
	strb	r10, [r4, #132]
	str	r8, [r4, #140]
	bl	usb_add_function
	subs	fp, r0, #0
	streq	r4, [r5, #2512]
	beq	.L13195
.L13206:
	mov	r0, r4
	bl	kfree
	ldrb	r3, [r5, #3684]	@ zero_extendqisi2
	mov	r2, #0
	str	r2, [r5, #2512]
	cmp	r3, r2
	bne	.L13218
.L13195:
	mov	r0, fp
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13197:
	bl	rndis_init.part.102
	subs	fp, r0, #0
	bge	.L13200
	b	.L13195
.L13209:
	mov	r4, #16
	b	.L13205
.L13218:
	bl	rndis_exit.part.103
	b	.L13195
.L13217:
	mvn	fp, #11
	b	.L13206
.L13204:
	mvn	fp, #18
	b	.L13195
.L13208:
	mvn	fp, #21
	b	.L13195
.L13216:
	movw	r0, #:lower16:.LC852
	mov	r2, fp
	ldr	r1, .L13219+4
	movt	r0, #:upper16:.LC852
	bl	printk
	movw	r0, #:lower16:.LC853
	ldr	r1, .L13219+8
	movt	r0, #:upper16:.LC853
	bl	printk
	b	.L13195
.L13220:
	.align	2
.L13219:
	.word	.LANCHOR4-1116
	.word	.LANCHOR3-48
	.word	.LANCHOR3-28
	.fnend
	.size	rndis_qc_bind_config_vendor, .-rndis_qc_bind_config_vendor
	.align	2
	.global	rndis_qc_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_bind_config, %function
rndis_qc_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {lr}
	str	lr, [sp, #-4]!
	mov	ip, #1
	.pad #12
	sub	sp, sp, #12
	mov	r3, #0
	mov	r2, r3
	str	ip, [sp]
	bl	rndis_qc_bind_config_vendor
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_qc_bind_config, .-rndis_qc_bind_config
	.align	2
	.global	gether_setup_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_setup_name, %function
gether_setup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	ldr	r8, [r4, #4064]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	cmp	r8, #0
	bne	.L13227
	mov	r7, r2
	mov	r2, #1
	mov	r5, r0
	mov	r6, r1
	mov	r0, #132
	mov	r1, r2
	bl	alloc_etherdev_mqs
	subs	r9, r0, #0
	mvneq	r5, #11
	bne	.L13233
.L13223:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13227:
	mvn	r5, #15
	b	.L13223
.L13233:
	movw	r2, #:lower16:eth_work
	add	r10, r9, #1152
	str	r8, [r9, #1152]
	movt	r2, #:upper16:eth_work
	mov	r3, r7
	str	r9, [r9, #1160]
	add	r7, r10, #92
	mov	r1, #65024
	str	r8, [r9, #1168]
	movw	ip, #:lower16:process_rx_w
	add	lr, r10, #108
	str	r8, [r9, #1212]
	str	r2, [r9, #1252]
	add	r2, r10, #52
	movt	r1, 65535
	movt	ip, #:upper16:process_rx_w
	str	r2, [r9, #1204]
	str	r8, [r9, #1216]
	add	r8, r10, #20
	str	r7, [r9, #1244]
	str	r7, [r9, #1248]
	add	r7, r10, #28
	str	r8, [r9, #1172]
	str	r2, [r9, #1208]
	movw	r2, #:lower16:.LC859
	str	r8, [r9, #1176]
	movt	r2, #:upper16:.LC859
	add	r8, r5, #32
	str	r7, [r9, #1180]
	str	r7, [r9, #1184]
	str	r1, [r9, #1240]
	str	r1, [r9, #1256]
	mov	r1, #16
	str	lr, [r9, #1260]
	str	lr, [r9, #1264]
	str	ip, [r9, #1268]
	bl	snprintf
	ldr	r0, [r4, #4068]
	ldr	r1, [r9, #484]
	bl	get_ether_addr
	cmp	r0, #0
	bne	.L13234
.L13225:
	ldr	r3, [r6]	@ unaligned
	add	r7, r10, #125
	movw	r0, #:lower16:.LC862
	movt	r0, #:upper16:.LC862
	str	r3, [r9, #1277]	@ unaligned
	ldrh	r3, [r6, #4]	@ unaligned
	strh	r3, [r7, #4]	@ unaligned
	bl	printk
	ldr	r2, .L13235
	movw	r3, #:lower16:.LANCHOR3
	mov	r0, r9
	movt	r3, #:upper16:.LANCHOR3
	str	r5, [r9, #1164]
	add	r1, r3, #136
	str	r3, [r9, #328]
	str	r1, [r9, #332]
	str	r8, [r9, #688]
	str	r2, [r9, #736]
	bl	register_netdev
	subs	r5, r0, #0
	bge	.L13226
	mov	r0, r9
	bl	free_netdev
	b	.L13223
.L13234:
	movw	r2, #:lower16:.LC860
	movw	r1, #:lower16:.LC861
	movt	r2, #:upper16:.LC860
	movt	r1, #:upper16:.LC861
	mov	r0, r8
	bl	dev_warn
	b	.L13225
.L13226:
	movw	r0, #:lower16:.LC863
	ldr	r2, [r9, #484]
	ldr	r1, [r9, #1160]
	movt	r0, #:upper16:.LC863
	bl	printk
	movw	r0, #:lower16:.LC864
	mov	r2, r7
	ldr	r1, [r9, #1160]
	movt	r0, #:upper16:.LC864
	bl	printk
	mov	r0, r9
	str	r10, [r4, #4064]
	bl	netif_carrier_off
	b	.L13223
.L13236:
	.align	2
.L13235:
	.word	.LANCHOR4-1108
	.fnend
	.size	gether_setup_name, .-gether_setup_name
	.align	2
	.global	gether_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_setup, %function
gether_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r2, #:lower16:.LC865
	movt	r2, #:upper16:.LC865
	b	gether_setup_name
	.fnend
	.size	gether_setup, .-gether_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_function_bind_config, %function
rndis_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #4]
	.pad #24
	sub	sp, sp, #24
	cmp	r4, #0
	beq	.L13247
	mov	r5, r1
	ldrb	r1, [r4, #5]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC867
	ldrb	r3, [r4]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC867
	ldr	r2, .L13249
	str	r1, [sp, #16]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	mov	r1, r2
	str	ip, [sp, #12]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldr	r3, [r5, #24]
	movw	r2, #:lower16:.LC816
	mov	r1, r4
	movt	r2, #:upper16:.LC816
	ldr	r0, [r3]
	bl	gether_setup_name
	subs	r6, r0, #0
	bne	.L13248
	ldrb	r3, [r4, #269]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L13242
	movw	r3, #:lower16:.LANCHOR4
	mvn	r2, #31
	movt	r3, #:upper16:.LANCHOR4
	mov	ip, #1
	sub	r1, r3, #3728
	mov	r0, #480
	strb	r2, [r3, #-3715]
	mov	r2, #3
	strh	r0, [r1, #4]	@ movhi
	strb	r2, [r3, #-3722]
	strb	ip, [r3, #-3714]
	strb	r2, [r3, #-3713]
.L13242:
	ldr	r2, [r4, #8]
	mov	r0, r5
	add	r3, r4, #13
	mov	r1, r4
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	rndis_bind_config_vendor
.L13247:
	ldr	r2, .L13249
	movw	r0, #:lower16:.LC866
	mvn	r6, #0
	movt	r0, #:upper16:.LC866
	mov	r1, r2
	bl	printk
.L13238:
	mov	r0, r6
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13248:
	ldr	r2, .L13249
	movw	r0, #:lower16:.LC868
	movt	r0, #:upper16:.LC868
	mov	r1, r2
	bl	printk
	b	.L13238
.L13250:
	.align	2
.L13249:
	.word	.LANCHOR3+300
	.fnend
	.size	rndis_function_bind_config, .-rndis_function_bind_config
	.align	2
	.global	gether_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_cleanup, %function
gether_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r4, #4064]
	cmp	r3, #0
	beq	.L13251
	ldr	r0, [r3, #8]
	bl	unregister_netdev
	ldr	r0, [r4, #4064]
	add	r0, r0, #88
	bl	flush_work
	ldr	r3, [r4, #4064]
	ldr	r0, [r3, #8]
	bl	free_netdev
	mov	r3, #0
	str	r3, [r4, #4064]
.L13251:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gether_cleanup, .-gether_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_function_unbind_config, %function
ncm_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	b	gether_cleanup
	.fnend
	.size	ncm_function_unbind_config, .-ncm_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_function_bind_config, %function
ecm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #4]
	cmp	r4, #0
	beq	.L13266
	mov	r6, r1
	movw	r2, #:lower16:.LC870
	ldr	r3, [r6, #24]
	mov	r1, r4
	movt	r2, #:upper16:.LC870
	ldr	r0, [r3]
	bl	gether_setup_name
	subs	r5, r0, #0
	bne	.L13267
	mov	r1, r4
	mov	r0, r6
	bl	ecm_bind_config
	subs	r5, r0, #0
	bne	.L13268
.L13258:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13266:
	ldr	r2, .L13269
	movw	r0, #:lower16:.LC869
	mvn	r5, #21
	movt	r0, #:upper16:.LC869
	mov	r1, r2
	bl	printk
	b	.L13258
.L13268:
	ldr	r2, .L13269
	movw	r0, #:lower16:.LC871
	movt	r0, #:upper16:.LC871
	mov	r1, r2
	bl	printk
	bl	gether_cleanup
	b	.L13258
.L13267:
	ldr	r2, .L13269
	movw	r0, #:lower16:.LC868
	movt	r0, #:upper16:.LC868
	mov	r1, r2
	bl	printk
	b	.L13258
.L13270:
	.align	2
.L13269:
	.word	.LANCHOR3+328
	.fnend
	.size	ecm_function_bind_config, .-ecm_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_function_unbind_config, %function
ecm_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	b	gether_cleanup
	.fnend
	.size	ecm_function_unbind_config, .-ecm_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_function_unbind_config, %function
rndis_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	b	gether_cleanup
	.fnend
	.size	rndis_function_unbind_config, .-rndis_function_unbind_config
	.align	2
	.global	gether_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_connect, %function
gether_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r3, #4064]
	cmp	r6, #0
	mvneq	r0, #21
	beq	.L13273
	movw	r3, #:lower16:kmalloc_caches
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4, #144]
	beq	.L13276
	mov	r2, #44
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #144]
	beq	.L13300
.L13276:
	ldr	r3, [r4, #88]
	str	r6, [r3]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L13278
	ldr	r3, [r4, #92]
	str	r6, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L13301
.L13279:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	cmp	r5, #0
	blt	.L13278
	ldr	r0, [r6, #8]
.L13273:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13278:
	ldr	r0, [r4, #144]
	bl	kfree
.L13277:
	mov	r0, r5
	b	.L13273
.L13301:
	ldr	r3, [r6, #12]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bls	.L13288
	ldr	r3, [r3, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L13288
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r8, [r3, #496]
	lsl	r8, r8, #1
	b	.L13280
.L13288:
	mov	r8, #2
.L13280:
	add	r7, r6, #16
	mov	r0, r7
	bl	_raw_spin_lock
	mov	r2, r8
	add	r0, r6, #20
	ldr	r1, [r4, #88]
	bl	prealloc
	subs	r5, r0, #0
	blt	.L13281
	mov	r2, r8
	ldr	r1, [r4, #92]
	add	r0, r6, #28
	bl	prealloc
	mov	r5, r0
	mov	r0, r7
	bl	_raw_spin_unlock
	cmp	r5, #0
	beq	.L13302
.L13282:
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L13279
.L13281:
	mov	r0, r7
	bl	_raw_spin_unlock
	b	.L13282
.L13300:
	movw	r0, #:lower16:.LC872
	ldr	r1, .L13303
	mvn	r5, #11
	movt	r0, #:upper16:.LC872
	bl	printk
	b	.L13277
.L13302:
	ldrb	r3, [r4, #96]	@ zero_extendqisi2
	mov	r0, r6
	strb	r3, [r6, #124]
	ldr	r3, [r4, #100]
	str	r3, [r6, #68]
	ldr	r3, [r4, #132]
	str	r3, [r6, #84]
	ldr	r3, [r4, #128]
	str	r3, [r6, #80]
	ldr	r3, [r4, #116]
	str	r3, [r6, #72]
	ldr	r3, [r4, #120]
	str	r3, [r6, #76]
	bl	_raw_spin_lock
	str	r4, [r6, #4]
	str	r5, [r6, #40]
	str	r5, [r6, #44]
	str	r5, [r6, #48]
	str	r6, [r4, #84]
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #164]
	tst	r3, #1
	beq	.L13283
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L13284
.L13299:
	mov	r0, r4
	blx	r3
.L13284:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r6, #8]
	bl	netif_carrier_on
	ldr	r0, [r6, #8]
	ldr	r3, [r0, #164]
	tst	r3, #1
	beq	.L13273
	mov	r0, r6
	mov	r1, #32
	bl	eth_start
	ldr	r0, [r6, #8]
	b	.L13273
.L13283:
	ldr	r3, [r4, #140]
	cmp	r3, #0
	bne	.L13299
	b	.L13284
.L13304:
	.align	2
.L13303:
	.word	.LANCHOR3+356
	.fnend
	.size	gether_connect, .-gether_connect
	.align	2
	.global	gether_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_disconnect, %function
gether_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #84]
	cmp	r4, #0
	beq	.L13305
	ldr	r3, [r4, #8]
	mov	r6, r0
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L13327
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
.L13315:
	ldr	r0, [r4, #8]
	add	r7, r4, #16
	add	r8, r4, #20
	bl	netif_carrier_off
	ldr	r0, [r6, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r5, [r4, #20]
	cmp	r8, r5
	beq	.L13308
	mov	r9, #0
	b	.L13310
.L13309:
	ldr	r0, [r6, #88]
	mov	r1, r10
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r5, [r4, #20]
	cmp	r5, r8
	beq	.L13308
.L13310:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	mov	r0, r7
	bl	_raw_spin_unlock
	ldrb	r3, [r6, #124]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L13309
	ldr	r0, [r5, #-36]
	bl	kfree
	str	r9, [r5, #-36]
	b	.L13309
.L13308:
	mov	r5, #0
	ldr	r0, [r6, #144]
	add	r8, r4, #28
	bl	kfree
	mov	r0, r7
	str	r5, [r6, #144]
	bl	_raw_spin_unlock
	ldr	r3, [r6, #88]
	str	r5, [r3]
	ldr	r3, [r6, #88]
	str	r5, [r3, #28]
	ldr	r0, [r6, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L13326
.L13328:
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r0, [r6, #92]
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L13326:
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r5, [r4, #28]
	cmp	r5, r8
	bne	.L13328
	mov	r0, r7
	add	r7, r4, #64
	bl	_raw_spin_unlock
	mov	r0, r7
	add	r5, r4, #52
	bl	_raw_spin_lock
	ldr	r3, [r4, #52]
	cmp	r3, r5
	beq	.L13313
	mov	r8, #0
	b	.L13314
.L13329:
	ldr	r2, [r4, #60]
	sub	r2, r2, #1
	str	r2, [r4, #60]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #52]
	cmp	r3, r5
	beq	.L13313
.L13314:
	subs	r0, r3, #0
	bne	.L13329
.L13313:
	mov	r0, r7
	mov	r5, #0
	bl	_raw_spin_unlock
	ldr	r3, [r6, #92]
	mov	r0, r4
	str	r5, [r3]
	ldr	r3, [r6, #92]
	str	r5, [r3, #28]
	str	r5, [r4, #68]
	str	r5, [r4, #80]
	str	r5, [r4, #84]
	bl	_raw_spin_lock
	str	r5, [r4, #4]
	mov	r0, r4
	str	r5, [r6, #84]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock
.L13327:
	movw	r0, #:lower16:.LC88
	movw	r1, #1847
	movt	r0, #:upper16:.LC88
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC89
	movt	r0, #:upper16:.LC89
	bl	printk
	b	.L13315
.L13305:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	gether_disconnect, .-gether_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_disable, %function
rndis_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #168]
	ldr	r3, [r3]
	cmp	r3, #0
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #164]
	cmp	r0, #0
	ble	.L13340
.L13332:
	mov	r0, r4
	bl	gether_disconnect
	ldr	r0, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #168]
	mov	r2, #0
	str	r2, [r3]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L13340:
	bl	rndis_uninit.part.101
	b	.L13332
	.fnend
	.size	rndis_disable, .-rndis_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_alt, %function
rndis_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r5, [r3, #24]
	beq	.L13365
	ldrb	r3, [r0, #149]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L13347
	ldr	r2, [r0, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L13348
	bl	gether_disconnect
	ldr	r2, [r4, #88]
.L13348:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L13349
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L13349
.L13350:
	mov	r5, #0
	mov	r0, r4
	strb	r5, [r4, #96]
	strh	r5, [r4, #98]	@ movhi
	bl	gether_connect
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L13341
	ldrb	r1, [r4, #164]	@ zero_extendqisi2
	clz	r3, r2
	lsr	r3, r3, #5
	cmp	r1, #0
	movne	r3, #1
	cmp	r3, #0
	movne	r0, r5
	beq	.L13366
.L13341:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13366:
	movw	r1, #:lower16:.LANCHOR1
	add	r4, r4, #98
	movt	r1, #:upper16:.LANCHOR1
	mov	r0, r3
	str	r3, [r1, #3560]
	str	r3, [r1, #3564]
	str	r4, [r1, #3648]
	str	r2, [r1, #3652]
	b	.L13341
.L13349:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L13352
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L13350
.L13352:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L13341
.L13365:
	ldr	r0, [r0, #168]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L13343
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #168]
.L13343:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L13367
.L13344:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #168]
	mov	r0, #0
	str	r4, [r3]
	b	.L13341
.L13347:
	mvn	r0, #21
	b	.L13341
.L13367:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L13347
	ldr	r0, [r4, #168]
	ldr	r1, [r0, #28]
	b	.L13344
	.fnend
	.size	rndis_set_alt, .-rndis_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_disable, %function
ecm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #88]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L13369
	bl	gether_disconnect
.L13369:
	ldr	r0, [r4, #164]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L13368
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #164]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #164]
	str	r3, [r2, #28]
.L13368:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_disable, .-ecm_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_set_alt, %function
ecm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	ip, [r0, #148]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	ip, r1
	ldr	r6, [r3, #24]
	beq	.L13401
	ldrb	r3, [r0, #149]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r3, r1
	bne	.L13384
	ldr	r2, [r0, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L13385
	bl	gether_disconnect
	ldr	r2, [r4, #88]
.L13385:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L13386
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L13386
.L13387:
	cmp	r5, #1
	beq	.L13402
.L13390:
	mov	r3, #1
	mov	r0, r4
	strb	r3, [r4, #172]
	bl	ecm_do_notify
	mov	r0, #0
.L13378:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13402:
	ldr	r3, [r6]
	movw	r0, #:lower16:.LC346
	movt	r0, #:upper16:.LC346
	ldr	r1, [r3, #28]
	bl	strcmp
	adds	r2, r0, #0
	mov	r3, #15
	movne	r2, #1
	mov	r0, r4
	strb	r2, [r4, #96]
	strh	r3, [r4, #98]	@ movhi
	bl	gether_connect
	cmn	r0, #4096
	bls	.L13390
	b	.L13378
.L13386:
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L13389
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L13387
.L13389:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L13378
.L13401:
	cmp	r2, #0
	bne	.L13384
	ldr	r0, [r0, #164]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L13382
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #164]
.L13382:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L13403
.L13383:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #164]
	mov	r0, #0
	str	r4, [r3]
	b	.L13378
.L13384:
	mvn	r0, #21
	b	.L13378
.L13403:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L13384
	ldr	r0, [r4, #164]
	ldr	r1, [r0, #28]
	b	.L13383
	.fnend
	.size	ecm_set_alt, .-ecm_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_disable, %function
ncm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #88]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L13405
	bl	gether_disconnect
.L13405:
	ldr	r0, [r4, #164]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L13404
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #164]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #164]
	str	r3, [r2, #28]
.L13404:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ncm_disable, .-ncm_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_set_alt, %function
ncm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r4, r0
	str	lr, [sp, #8]
	ldrb	r0, [r0, #148]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r4, #20]
	cmp	r0, r1
	ldr	r5, [r3, #24]
	beq	.L13438
	ldrb	r3, [r4, #149]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r3, r1
	movne	r3, #1
	moveq	r3, #0
	bne	.L13420
	cmp	r2, #0
	beq	.L13427
	ldr	r2, [r4, #88]
	ldr	r1, [r2]
	cmp	r1, #0
	bne	.L13439
.L13421:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L13422
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L13422
.L13423:
	ldr	r3, [r5]
	movw	r0, #:lower16:.LC346
	movt	r0, #:upper16:.LC346
	ldr	r1, [r3, #28]
	bl	strcmp
	adds	r2, r0, #0
	mov	r3, #15
	movne	r2, #1
	mov	r0, r4
	strb	r2, [r4, #96]
	strh	r3, [r4, #98]	@ movhi
	bl	gether_connect
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L13427
	ldrh	r3, [r4, #182]
	str	r2, [r4, #184]
	movw	r0, #:lower16:.LC874
	movt	r0, #:upper16:.LC874
	sub	r3, r3, #14
	str	r3, [r2, #356]
	ldr	r3, [r4, #184]
	ldr	r1, [r3, #356]
	bl	printk
	mov	r0, #0
	b	.L13414
.L13427:
	mov	r0, r2
.L13414:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L13438:
	cmp	r2, #0
	bne	.L13420
	ldr	r0, [r4, #164]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L13418
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #164]
.L13418:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L13440
.L13419:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #164]
	mov	r0, #0
	str	r4, [r3]
	b	.L13414
.L13422:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L13425
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L13423
.L13425:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L13414
.L13420:
	mvn	r0, #21
	b	.L13414
.L13440:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L13420
	ldr	r0, [r4, #164]
	ldr	r1, [r0, #28]
	b	.L13419
.L13439:
	movw	r0, #:lower16:.LC873
	ldr	r1, .L13441
	str	r3, [sp, #4]
	movt	r0, #:upper16:.LC873
	bl	printk
	mov	r0, r4
	bl	gether_disconnect
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LANCHOR0
	mov	r2, #15
	movt	r1, #:upper16:.LANCHOR0
	add	r0, r1, #76
	strh	r2, [r4, #98]	@ movhi
	ldr	r2, [r4, #88]
	str	r3, [r4, #100]
	str	r0, [r4, #176]
	mov	r0, #16384
	strb	r3, [r4, #180]
	ldr	r1, [r1, #36]
	str	r3, [r4, #184]
	movw	r3, #9014
	str	r1, [r4, #108]
	str	r0, [r4, #112]
	strh	r3, [r4, #182]	@ movhi
	b	.L13421
.L13442:
	.align	2
.L13441:
	.word	.LANCHOR3+372
	.fnend
	.size	ncm_set_alt, .-ncm_set_alt
	.align	2
	.global	gether_qc_get_macs
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_get_macs, %function
gether_qc_get_macs:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r1
	movt	r4, #:upper16:.LANCHOR1
	mov	r1, r0
	str	r6, [sp, #8]
	ldr	r0, [r4, #4072]
	str	lr, [sp, #12]
	bl	get_qc_ether_addr
	ldr	r6, [sp, #8]
	mov	r1, r5
	ldr	r0, [r4, #4076]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	get_qc_ether_addr
	.fnend
	.size	gether_qc_get_macs, .-gether_qc_get_macs
	.align	2
	.global	ecm_qc_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_bind_config, %function
ecm_qc_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	movw	r0, #:lower16:.LC339
	strd	r8, [sp, #16]
	mov	r6, r1
	movt	r0, #:upper16:.LC339
	strd	r10, [sp, #24]
	mov	r8, r2
	str	lr, [sp, #32]
	ldr	r3, [r7, #24]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r3]
	ldr	r4, [r3, #28]
	mov	r1, r4
	bl	strcmp
	cmp	r0, #0
	beq	.L13456
	movw	r0, #:lower16:.LC342
	mov	r1, r4
	movt	r0, #:upper16:.LC342
	bl	strcmp
	cmp	r6, #0
	cmpne	r0, #0
	beq	.L13456
	mov	r0, #1
	bl	bam_data_setup
	subs	r9, r0, #0
	bne	.L13447
	movw	r5, #:lower16:.LANCHOR4
	movt	r5, #:upper16:.LANCHOR4
	ldrb	r3, [r5, #-1236]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L13449
	ldr	r1, [r7, #24]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13451
	add	r3, r3, #1
	movw	r2, #:lower16:.LANCHOR0
	uxtb	r3, r3
	movt	r2, #:upper16:.LANCHOR0
	strb	r3, [r1, #48]
	ldr	r1, [r7, #24]
	strb	r3, [r2, #2192]
	strb	r3, [r5, #-1236]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13451
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	ldr	r1, [r7, #24]
	strb	r3, [r2, #2224]
	strb	r3, [r5, #-1220]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13451
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	strb	r3, [r5, #-1228]
	strb	r3, [r5, #-1081]
.L13449:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L13457
	mov	r2, #172
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L13464
.L13452:
	mov	r0, r8
	add	r8, r4, #128
	bl	str_to_xport
	cmp	r0, #7
	str	r0, [r4, #124]
	beq	.L13465
	ldrb	fp, [r6, #5]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC857
	mov	r1, #14
	movt	r2, #:upper16:.LC857
	mov	r0, r8
	ldrb	r3, [r6]	@ zero_extendqisi2
	ldrb	r10, [r6, #4]	@ zero_extendqisi2
	ldrb	r9, [r6, #3]	@ zero_extendqisi2
	ldrb	lr, [r6, #2]	@ zero_extendqisi2
	ldrb	ip, [r6, #1]	@ zero_extendqisi2
	str	fp, [sp, #16]
.L13463:
	stm	sp, {ip, lr}
	str	r9, [sp, #8]
	str	r10, [sp, #12]
	bl	snprintf
	ldr	lr, .L13467
	movw	r3, #:lower16:.LC858
	movw	ip, #:lower16:ecm_qc_unbind
	movt	r3, #:upper16:.LC858
	movt	ip, #:upper16:ecm_qc_unbind
	str	r8, [r5, #-1224]
	movw	r1, #:lower16:ecm_qc_bind
	movw	r2, #:lower16:ecm_qc_set_alt
	movt	r1, #:upper16:ecm_qc_bind
	movt	r2, #:upper16:ecm_qc_set_alt
	stm	r4, {r3, lr}
	movw	r3, #:lower16:ecm_qc_get_alt
	mov	r0, r7
	movt	r3, #:upper16:ecm_qc_get_alt
	str	r1, [r4, #32]
	movw	r1, #:lower16:ecm_qc_setup
	str	ip, [r4, #36]
	movw	ip, #:lower16:ecm_qc_disable
	movt	r1, #:upper16:ecm_qc_setup
	movt	ip, #:upper16:ecm_qc_disable
	str	r2, [r4, #40]
	movw	r2, #:lower16:ecm_qc_suspend
	str	r3, [r4, #44]
	movw	r3, #:lower16:ecm_qc_resume
	movt	r2, #:upper16:ecm_qc_suspend
	str	ip, [r4, #48]
	movt	r3, #:upper16:ecm_qc_resume
	mov	ip, #15
	str	r1, [r4, #52]
	mov	r1, r4
	str	r2, [r4, #56]
	str	r3, [r4, #60]
	strh	ip, [r4, #98]	@ movhi
	bl	usb_add_function
	subs	r9, r0, #0
	bne	.L13466
.L13445:
	mov	r0, r9
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13457:
	mov	r4, #16
	b	.L13452
.L13465:
	movw	r6, #:lower16:.LANCHOR1
	ldr	r0, .L13467+4
	movt	r6, #:upper16:.LANCHOR1
	add	r1, r6, #3520
	bl	gether_qc_get_macs
	ldrb	r3, [r6, #3525]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC857
	mov	r1, #14
	ldrb	r10, [r6, #3524]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC857
	mov	r0, r8
	ldrb	r9, [r6, #3523]	@ zero_extendqisi2
	ldrb	lr, [r6, #3522]	@ zero_extendqisi2
	str	r3, [sp, #16]
	ldrb	ip, [r6, #3521]	@ zero_extendqisi2
	ldrb	r3, [r6, #3520]	@ zero_extendqisi2
	b	.L13463
.L13456:
	mvn	r9, #21
	b	.L13445
.L13451:
	mvn	r9, #18
	b	.L13445
.L13464:
	mvn	r9, #11
	b	.L13445
.L13447:
	movw	r0, #:lower16:.LC852
	mov	r2, r9
	ldr	r1, .L13467+8
	movt	r0, #:upper16:.LC852
	bl	printk
	movw	r0, #:lower16:.LC853
	ldr	r1, .L13467+12
	movt	r0, #:upper16:.LC853
	bl	printk
	b	.L13445
.L13466:
	movw	r0, #:lower16:.LC875
	ldr	r1, .L13467+12
	movt	r0, #:upper16:.LC875
	bl	printk
	mov	r3, #0
	mov	r0, r4
	str	r3, [r5, #-1224]
	bl	kfree
	b	.L13445
.L13468:
	.align	2
.L13467:
	.word	.LANCHOR4-1068
	.word	.LANCHOR1+3526
	.word	.LANCHOR3+384
	.word	.LANCHOR3+404
	.fnend
	.size	ecm_qc_bind_config, .-ecm_qc_bind_config
	.align	2
	.global	gether_qc_setup_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_setup_name, %function
gether_qc_setup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r2
	mov	r2, #1
	strd	r6, [sp, #8]
	mov	r7, r1
	mov	r1, r2
	strd	r8, [sp, #16]
	mov	r8, r0
	mov	r0, #28
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	alloc_etherdev_mqs
	subs	r4, r0, #0
	beq	.L13475
	mov	r1, #0
	movw	r2, #:lower16:.LC859
	movw	r6, #:lower16:.LANCHOR1
	mov	r3, r5
	movt	r2, #:upper16:.LC859
	str	r1, [r4, #1152]
	movt	r6, #:upper16:.LANCHOR1
	mov	r1, #16
	str	r4, [r4, #1160]
	add	r9, r8, #32
	bl	snprintf
	ldr	r1, [r4, #484]
	ldr	r0, [r6, #4072]
	bl	get_qc_ether_addr
	cmp	r0, #0
	bne	.L13486
.L13471:
	add	r5, r4, #1168
	ldr	r0, [r6, #4076]
	add	r5, r5, #5
	mov	r1, r5
	bl	get_qc_ether_addr
	cmp	r0, #0
	bne	.L13487
.L13472:
	cmp	r7, #0
	beq	.L13473
	ldr	r3, [r5]	@ unaligned
	str	r3, [r7]	@ unaligned
	ldrh	r3, [r5, #4]	@ unaligned
	strh	r3, [r7, #4]	@ unaligned
.L13473:
	ldr	r3, .L13488
	mov	r0, r4
	add	r2, r3, #136
	str	r3, [r4, #328]
	str	r2, [r4, #332]
	bl	netif_carrier_off
	ldr	r3, .L13488+4
	mov	r0, r4
	str	r9, [r4, #688]
	str	r3, [r4, #736]
	str	r8, [r4, #1164]
	bl	register_netdev
	subs	r6, r0, #0
	bge	.L13474
	mov	r0, r4
	bl	free_netdev
.L13469:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13486:
	movw	r2, #:lower16:.LC860
	movw	r1, #:lower16:.LC861
	movt	r2, #:upper16:.LC860
	movt	r1, #:upper16:.LC861
	mov	r0, r9
	bl	dev_warn
	b	.L13471
.L13487:
	movw	r2, #:lower16:.LC876
	movw	r1, #:lower16:.LC861
	movt	r2, #:upper16:.LC876
	movt	r1, #:upper16:.LC861
	mov	r0, r9
	bl	dev_warn
	b	.L13472
.L13475:
	mvn	r6, #11
	b	.L13469
.L13474:
	movw	r0, #:lower16:.LC863
	ldr	r2, [r4, #484]
	ldr	r1, [r4, #1160]
	movt	r0, #:upper16:.LC863
	bl	printk
	movw	r0, #:lower16:.LC864
	mov	r2, r5
	ldr	r1, [r4, #1160]
	movt	r0, #:upper16:.LC864
	bl	printk
	b	.L13469
.L13489:
	.align	2
.L13488:
	.word	.LANCHOR3+424
	.word	.LANCHOR4-1060
	.fnend
	.size	gether_qc_setup_name, .-gether_qc_setup_name
	.align	2
	.global	gether_qc_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_setup, %function
gether_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r2, #:lower16:.LC865
	movt	r2, #:upper16:.LC865
	b	gether_qc_setup_name
	.fnend
	.size	gether_qc_setup, .-gether_qc_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_function_bind_config, %function
rndis_qc_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #4]
	.pad #24
	sub	sp, sp, #24
	cmp	r4, #0
	beq	.L13500
	mov	r6, r1
	ldrb	r1, [r4, #5]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC867
	ldrb	r3, [r4]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC867
	ldr	r2, .L13503
	str	r1, [sp, #16]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	mov	r1, r2
	str	ip, [sp, #12]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldr	r3, [r6, #24]
	movw	r2, #:lower16:.LC816
	mov	r1, r4
	movt	r2, #:upper16:.LC816
	ldr	r0, [r3]
	bl	gether_qc_setup_name
	subs	r5, r0, #0
	bne	.L13501
	ldrb	r3, [r4, #269]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L13502
.L13495:
	ldrb	ip, [r4, #12]	@ zero_extendqisi2
	mov	r0, r6
	add	r3, r4, #13
	ldr	r2, [r4, #8]
	mov	r1, r4
	str	ip, [sp]
	bl	rndis_qc_bind_config_vendor
	mov	r5, r0
.L13491:
	mov	r0, r5
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13502:
	movw	r3, #:lower16:.LANCHOR4
	mvn	r1, #31
	movt	r3, #:upper16:.LANCHOR4
	mov	ip, #1
	sub	r2, r3, #3424
	mov	r0, #480
	strb	r1, [r3, #-3419]
	mov	r1, #3
	strh	r0, [r2, #-4]	@ movhi
	strb	r1, [r3, #-3426]
	strb	ip, [r3, #-3418]
	strb	r1, [r3, #-3417]
	b	.L13495
.L13500:
	ldr	r2, .L13503
	movw	r0, #:lower16:.LC866
	mvn	r5, #21
	movt	r0, #:upper16:.LC866
	mov	r1, r2
	bl	printk
	b	.L13491
.L13501:
	ldr	r2, .L13503
	movw	r0, #:lower16:.LC868
	movt	r0, #:upper16:.LC868
	mov	r1, r2
	bl	printk
	b	.L13491
.L13504:
	.align	2
.L13503:
	.word	.LANCHOR3+724
	.fnend
	.size	rndis_qc_function_bind_config, .-rndis_qc_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_function_bind_config, %function
ecm_qc_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #4]
	cmp	r4, #0
	beq	.L13516
	ldr	r0, .L13518
	mov	r6, r1
	bl	strim
	mov	r1, r0
	mov	r5, r0
	movw	r0, #:lower16:.LC466
	movt	r0, #:upper16:.LC466
	bl	strcmp
	cmp	r0, #0
	beq	.L13508
	ldr	r3, [r6, #24]
	movw	r2, #:lower16:.LC870
	mov	r1, r4
	movt	r2, #:upper16:.LC870
	ldr	r0, [r3]
	bl	gether_qc_setup_name
	subs	r7, r0, #0
	bne	.L13517
.L13508:
	mov	r2, r5
	mov	r1, r4
	ldrd	r4, [sp]
	mov	r0, r6
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	ecm_qc_bind_config
.L13517:
	ldr	r2, .L13518+4
	movw	r0, #:lower16:.LC868
	movt	r0, #:upper16:.LC868
	mov	r1, r2
	bl	printk
.L13505:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13516:
	ldr	r2, .L13518+4
	movw	r0, #:lower16:.LC869
	mvn	r7, #21
	movt	r0, #:upper16:.LC869
	mov	r1, r2
	bl	printk
	b	.L13505
.L13519:
	.align	2
.L13518:
	.word	.LANCHOR1+2756
	.word	.LANCHOR3+756
	.fnend
	.size	ecm_qc_function_bind_config, .-ecm_qc_function_bind_config
	.align	2
	.global	gether_qc_cleanup_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_cleanup_name, %function
gether_qc_cleanup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, r0
	movw	r0, #:lower16:init_net
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r0, #:upper16:init_net
	str	lr, [sp, #4]
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L13520
	.syntax divided
@ 17 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		mrs	ip, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	movw	r2, #:lower16:__per_cpu_offset
	bic	r1, r3, #8128
	movt	r2, #:upper16:__per_cpu_offset
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
	ldr	r1, [r2, r1, lsl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, ip	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	bl	unregister_netdev
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	free_netdev
.L13520:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gether_qc_cleanup_name, .-gether_qc_cleanup_name
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_function_unbind_config, %function
rndis_qc_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r0, #:lower16:.LC877
	movt	r0, #:upper16:.LC877
	b	gether_qc_cleanup_name
	.fnend
	.size	rndis_qc_function_unbind_config, .-rndis_qc_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_function_unbind_config, %function
ecm_qc_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, .L13528
	str	lr, [sp, #4]
	bl	strim
	mov	r1, r0
	movw	r0, #:lower16:.LC466
	movt	r0, #:upper16:.LC466
	bl	strcmp
	cmp	r0, #0
	bne	.L13527
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L13527:
	movw	r0, #:lower16:.LC878
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC878
	add	sp, sp, #8
	b	gether_qc_cleanup_name
.L13529:
	.align	2
.L13528:
	.word	.LANCHOR1+2756
	.fnend
	.size	ecm_qc_function_unbind_config, .-ecm_qc_function_unbind_config
	.align	2
	.global	gether_qc_connect_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_connect_name, %function
gether_qc_connect_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	movw	r0, #:lower16:init_net
	movt	r0, #:upper16:init_net
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L13533
	.syntax divided
@ 17 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		mrs	r0, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	movw	r2, #:lower16:__per_cpu_offset
	bic	r1, r3, #8128
	movt	r2, #:upper16:__per_cpu_offset
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
	ldr	r1, [r2, r1, lsl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r0	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	adds	r7, r4, #1152
	beq	.L13533
	ldrb	r3, [r5, #96]	@ zero_extendqisi2
	mov	r0, r7
	strb	r3, [r4, #1172]
	ldr	r3, [r5, #100]
	str	r3, [r4, #1168]
	bl	_raw_spin_lock
	str	r5, [r4, #1156]
	str	r7, [r5, #84]
	ldr	r3, [r4, #1160]
	ldr	r3, [r3, #164]
	tst	r3, #1
	beq	.L13534
	ldr	r3, [r5, #112]
	cmp	r3, #0
	beq	.L13535
.L13552:
	mov	r0, r5
	blx	r3
.L13535:
	mov	r0, r7
	bl	_raw_spin_unlock
	cmp	r6, #0
	ldr	r0, [r4, #1160]
	beq	.L13530
	bl	netif_carrier_on
	ldr	r0, [r4, #1160]
	ldr	r3, [r0, #164]
	tst	r3, #1
	beq	.L13530
	ldr	r5, [r0, #576]
	mov	r0, #0
	add	r1, r5, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	bne	.L13538
.L13553:
	ldr	r0, [r4, #1160]
	b	.L13530
.L13533:
	mvn	r0, #21
.L13530:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13534:
	ldr	r3, [r5, #116]
	cmp	r3, #0
	bne	.L13552
	b	.L13535
.L13538:
	ldr	r0, [r5, #4]
	bl	__netif_schedule
	b	.L13553
	.fnend
	.size	gether_qc_connect_name, .-gether_qc_connect_name
	.align	2
	.global	gether_qc_disconnect_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_disconnect_name, %function
gether_qc_disconnect_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movw	r0, #:lower16:init_net
	movt	r0, #:upper16:init_net
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L13554
	.syntax divided
@ 17 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		mrs	r0, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	movw	r2, #:lower16:__per_cpu_offset
	bic	r1, r3, #8128
	movt	r2, #:upper16:__per_cpu_offset
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
	ldr	r1, [r2, r1, lsl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r0	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	adds	r6, r4, #1152
	beq	.L13554
	ldr	r3, [r4, #1160]
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L13564
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
.L13559:
	ldr	r0, [r4, #1160]
	bl	netif_carrier_off
	mov	r0, r6
	bl	_raw_spin_lock
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #1156]
	str	r3, [r5, #84]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L13554:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13564:
	movw	r0, #:lower16:.LC88
	movw	r1, #1847
	movt	r0, #:upper16:.LC88
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC89
	movt	r0, #:upper16:.LC89
	bl	printk
	b	.L13559
	.fnend
	.size	gether_qc_disconnect_name, .-gether_qc_disconnect_name
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_disable, %function
ecm_qc_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #88]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L13567
	mov	r1, #0
	add	r0, r0, #156
	bl	bam_data_disconnect
	ldr	r3, [r4, #124]
	cmp	r3, #7
	bne	.L13577
.L13567:
	ldr	r0, [r4, #144]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L13565
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #144]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #144]
	str	r3, [r2, #28]
.L13565:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L13577:
	movw	r1, #:lower16:.LC878
	mov	r0, r4
	movt	r1, #:upper16:.LC878
	bl	gether_qc_disconnect_name
	b	.L13567
	.fnend
	.size	ecm_qc_disable, .-ecm_qc_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_set_alt, %function
ecm_qc_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r0
	mov	r5, r2
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldrb	r0, [r0, #120]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r4, #20]
	cmp	r0, r1
	ldr	r6, [r3, #24]
	beq	.L13609
	ldrb	r3, [r4, #121]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r3, r1
	movne	r1, #1
	moveq	r1, #0
	bne	.L13608
	ldr	r2, [r4, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L13585
	add	r0, r4, #156
	bl	bam_data_disconnect
	ldr	r3, [r4, #124]
	cmp	r3, #7
	bne	.L13586
	ldr	r2, [r4, #88]
.L13585:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L13587
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L13587
.L13588:
	cmp	r5, #1
	bne	.L13591
	ldr	r3, [r6]
	movw	r0, #:lower16:.LC346
	movt	r0, #:upper16:.LC346
	ldr	r1, [r3, #28]
	bl	strcmp
	ldr	r3, [r4, #124]
	adds	r0, r0, #0
	mov	r2, #15
	movne	r0, #1
	strb	r0, [r4, #96]
	cmp	r3, #7
	strh	r2, [r4, #98]	@ movhi
	beq	.L13592
	movw	r1, #:lower16:.LC878
	mov	r2, r5
	movt	r1, #:upper16:.LC878
	mov	r0, r4
	bl	gether_qc_connect_name
	cmn	r0, #4096
	bhi	.L13578
	ldr	r2, [r4, #20]
	ldr	r3, [r4, #124]
	ldr	r2, [r2, #24]
	cmp	r3, #7
	movne	r6, #0
	moveq	r6, #2
	ldr	r5, [r2]
.L13594:
	ldr	ip, [r4, #88]
	mov	r3, #0
	str	r2, [r4, #156]
	ldr	r0, [r4, #92]
	mov	r2, r3
	mov	r1, r6
	str	r4, [r4, #160]
	str	ip, [r4, #164]
	str	r0, [r4, #168]
	ldr	r0, [r5, #28]
	bl	usb_bam_get_connection_idx
	mov	r7, r0
	mov	r1, r6
	ldr	r0, [r5, #28]
	mov	r3, #0
	mov	r2, #1
	bl	usb_bam_get_connection_idx
	uxtb	r0, r0
	mov	r1, #0
	ldr	r2, [r4, #124]
	uxtb	r3, r7
	strd	r0, [sp]
	add	r0, r4, #156
	bl	bam_data_connect
	subs	r2, r0, #0
	bne	.L13610
	mov	r3, #1
	mov	r0, r4
	strb	r3, [r4, #152]
	strb	r3, [r4, #153]
	bl	ecm_qc_do_notify
.L13591:
	mov	r3, #1
	mov	r0, r4
	strb	r3, [r4, #152]
	bl	ecm_qc_do_notify
	mov	r0, #0
.L13578:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L13587:
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L13590
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L13588
.L13590:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L13578
.L13609:
	cmp	r2, #0
	bne	.L13608
	ldr	r0, [r4, #144]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L13582
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #144]
.L13582:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L13611
.L13583:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #144]
	mov	r0, #0
	str	r4, [r3]
	b	.L13578
.L13586:
	movw	r1, #:lower16:.LC878
	mov	r0, r4
	movt	r1, #:upper16:.LC878
	bl	gether_qc_disconnect_name
	ldr	r2, [r4, #88]
	b	.L13585
.L13592:
	ldr	r3, [r4, #20]
	mov	r6, #2
	ldr	r2, [r3, #24]
	ldr	r5, [r2]
	b	.L13594
.L13610:
	movw	r0, #:lower16:.LC879
	ldr	r1, .L13612
	movt	r0, #:upper16:.LC879
	bl	printk
.L13608:
	mvn	r0, #21
	b	.L13578
.L13611:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L13608
	ldr	r0, [r4, #144]
	ldr	r1, [r0, #28]
	b	.L13583
.L13613:
	.align	2
.L13612:
	.word	.LANCHOR3+784
	.fnend
	.size	ecm_qc_set_alt, .-ecm_qc_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_disable, %function
rndis_qc_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #156]
	ldr	r3, [r3]
	cmp	r3, #0
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movw	r0, #:lower16:.LC880
	ldr	r1, .L13625
	movt	r0, #:upper16:.LC880
	str	lr, [sp, #4]
	bl	printk
	ldr	r0, [r4, #144]
	cmp	r0, #0
	ble	.L13624
.L13616:
	add	r0, r4, #168
	mov	r1, #0
	bl	bam_data_disconnect
	movw	r1, #:lower16:.LC877
	mov	r0, r4
	movt	r1, #:upper16:.LC877
	bl	gether_qc_disconnect_name
	ldr	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #156]
	mov	r2, #0
	str	r2, [r3]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L13624:
	bl	rndis_uninit.part.101
	b	.L13616
.L13626:
	.align	2
.L13625:
	.word	.LANCHOR3+804
	.fnend
	.size	rndis_qc_disable, .-rndis_qc_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_set_alt, %function
rndis_qc_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldrb	r2, [r0, #120]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r5, [r3, #24]
	beq	.L13651
	ldrb	r3, [r0, #121]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L13633
	ldr	r0, [r0, #88]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L13634
	mov	r1, #0
	add	r0, r4, #168
	bl	bam_data_disconnect
	movw	r1, #:lower16:.LC877
	mov	r0, r4
	movt	r1, #:upper16:.LC877
	bl	gether_qc_disconnect_name
	ldr	r0, [r4, #88]
.L13634:
	ldr	r3, [r0, #28]
	cmp	r3, #0
	beq	.L13635
	ldr	ip, [r4, #92]
	ldr	r3, [ip, #28]
	cmp	r3, #0
	beq	.L13635
.L13636:
	ldr	r1, [r4, #20]
	mov	r5, #0
	mov	r3, r5
	mov	r2, r5
	strb	r5, [r4, #96]
	strh	r5, [r4, #98]	@ movhi
	ldr	lr, [r1, #24]
	mov	r1, r5
	ldr	r6, [lr]
	str	lr, [r4, #168]
	str	r4, [r4, #172]
	str	r0, [r4, #176]
	str	ip, [r4, #180]
	ldr	r0, [r6, #28]
	bl	usb_bam_get_connection_idx
	mov	r7, r0
	mov	r3, r5
	ldr	r0, [r6, #28]
	mov	r1, r5
	mov	r2, #1
	bl	usb_bam_get_connection_idx
	uxtb	r0, r0
	mov	r2, #2
	mov	r1, r5
	uxtb	r3, r7
	stm	sp, {r0, r2}
	mov	r2, #6
	add	r0, r4, #168
	bl	bam_data_connect
	subs	r5, r0, #0
	bne	.L13652
	movw	r0, #:lower16:.LC881
	ldr	r1, .L13655
	movt	r0, #:upper16:.LC881
	bl	printk
	movw	r1, #:lower16:.LC877
	mov	r2, r5
	mov	r0, r4
	movt	r1, #:upper16:.LC877
	bl	gether_qc_connect_name
	cmn	r0, #4096
	movhi	r5, r0
	bhi	.L13627
	ldrb	r2, [r4, #144]	@ zero_extendqisi2
	clz	r3, r0
	lsr	r3, r3, #5
	cmp	r2, #0
	movne	r3, #1
	cmp	r3, #0
	beq	.L13653
.L13627:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L13652:
	movw	r0, #:lower16:.LC879
	mov	r2, r5
	ldr	r1, .L13655
	movt	r0, #:upper16:.LC879
	mvn	r5, #21
	bl	printk
	b	.L13627
.L13653:
	movw	r3, #:lower16:.LANCHOR1
	add	r4, r4, #98
	movt	r3, #:upper16:.LANCHOR1
	str	r5, [r3, #3560]
	str	r5, [r3, #3564]
	str	r4, [r3, #3648]
	str	r0, [r3, #3652]
	b	.L13627
.L13635:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L13638
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L13638
	ldr	r0, [r4, #88]
	ldr	ip, [r4, #92]
	b	.L13636
.L13651:
	ldr	r0, [r0, #156]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L13629
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #156]
.L13629:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L13654
.L13630:
	ldr	r3, [r0, #8]
	mov	r5, #0
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #156]
	str	r4, [r3]
	b	.L13627
.L13633:
	mvn	r5, #21
	b	.L13627
.L13638:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r5, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L13627
.L13654:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L13633
	ldr	r0, [r4, #156]
	ldr	r1, [r0, #28]
	b	.L13630
.L13656:
	.align	2
.L13655:
	.word	.LANCHOR3+824
	.fnend
	.size	rndis_qc_set_alt, .-rndis_qc_set_alt
	.align	2
	.global	pcm_buffer_size
	.syntax unified
	.arm
	.fpu softvfp
	.type	pcm_buffer_size, %function
pcm_buffer_size:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #380]
	bx	lr
	.fnend
	.size	pcm_buffer_size, .-pcm_buffer_size
	.align	2
	.global	pcm_period_size
	.syntax unified
	.arm
	.fpu softvfp
	.type	pcm_period_size, %function
pcm_period_size:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #332]
	bx	lr
	.fnend
	.size	pcm_period_size, .-pcm_period_size
	.align	2
	.global	u_audio_clear
	.syntax unified
	.arm
	.fpu softvfp
	.type	u_audio_clear, %function
u_audio_clear:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	strb	r2, [r3, #2224]
	bx	lr
	.fnend
	.size	u_audio_clear, .-u_audio_clear
	.align	2
	.global	gaudio_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gaudio_setup, %function
gaudio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	subs	r4, r0, #0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L13694
	movw	r6, #:lower16:.LANCHOR4
	mov	r2, #0
	movt	r6, #:upper16:.LANCHOR4
	mov	r1, #2
	ldr	r0, [r6, #-1036]
	bl	filp_open
	cmn	r0, #4096
	mov	r5, r0
	str	r0, [r4, #92]
	bhi	.L13695
	mov	r2, #0
	mov	r1, #1
	ldr	r0, [r6, #-1032]
	str	r4, [r4, #88]
	bl	filp_open
	cmn	r0, #4096
	str	r0, [r4, #120]
	bhi	.L13696
	ldr	r2, [r0, #124]
	movw	r7, #:lower16:kmalloc_caches
	mov	r3, #2
	movt	r7, #:upper16:kmalloc_caches
	mov	ip, #3
	ldr	r0, [r7, #40]
	ldr	r1, [r2]
	mov	r2, #8000
	str	r4, [r4, #116]
	cmp	r0, #0
	str	r1, [r4, #124]
	str	ip, [r4, #128]
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	str	r2, [r4, #140]
	beq	.L13679
	mov	r2, #604
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L13697
.L13666:
	mov	r0, r5
	bl	_snd_pcm_hw_params_any
	mov	r1, #0
	ldr	r2, [r4, #128]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.116
	mov	r1, #1
	ldr	r2, [r4, #132]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.116
	mov	r1, #10
	ldr	r2, [r4, #136]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.116
	mov	r1, #11
	mov	r0, r5
	ldr	r2, [r4, #140]
	bl	_snd_pcm_hw_param_set.constprop.116
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L13680
	ldr	r3, [r5, #8]
	cmp	r3, #0
	movne	r1, #32
	bne	.L13667
.L13668:
	str	r3, [r4, #128]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L13682
	ldr	r3, [r5, #40]
	cmp	r3, #0
	movne	r1, #32
	bne	.L13669
.L13670:
	str	r3, [r4, #132]
	ldr	r3, [r5, #284]
	mov	r0, r5
	str	r3, [r4, #136]
	ldr	r3, [r5, #296]
	str	r3, [r4, #140]
	bl	kfree
	mov	r2, #0
	ldr	r0, [r6, #-1028]
	mov	r1, r2
	bl	filp_open
	cmn	r0, #4096
	str	r0, [r4, #148]
	bhi	.L13698
	ldr	r2, [r0, #124]
	mov	lr, #3
	mov	ip, #2
	ldr	r0, [r7, #40]
	mov	r1, #1
	mov	r3, #8000
	ldr	r2, [r2]
	str	r4, [r4, #144]
	cmp	r0, #0
	str	r2, [r4, #152]
	str	lr, [r4, #156]
	str	ip, [r4, #160]
	str	r1, [r4, #164]
	str	r3, [r4, #168]
	beq	.L13684
	mov	r2, #604
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L13699
.L13672:
	mov	r0, r5
	bl	_snd_pcm_hw_params_any
	mov	r1, #0
	ldr	r2, [r4, #156]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.116
	mov	r1, #1
	ldr	r2, [r4, #160]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.116
	mov	r1, #10
	ldr	r2, [r4, #164]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.116
	mov	r1, #11
	mov	r0, r5
	ldr	r2, [r4, #168]
	bl	_snd_pcm_hw_param_set.constprop.116
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L13685
	ldr	r3, [r5, #8]
	cmp	r3, #0
	movne	r1, #32
	bne	.L13674
.L13675:
	str	r3, [r4, #156]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L13687
	ldr	r3, [r5, #40]
	cmp	r3, #0
	movne	r1, #32
	bne	.L13676
.L13677:
	str	r3, [r4, #160]
	ldr	r3, [r5, #284]
	mov	r0, r5
	str	r3, [r4, #164]
	ldr	r3, [r5, #296]
	str	r3, [r4, #168]
	bl	kfree
.L13664:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r5, [r3, #3688]
	cmp	r5, #0
	movne	r5, #0
	streq	r4, [r3, #3688]
.L13660:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13679:
	mov	r5, #16
	b	.L13666
.L13684:
	mov	r5, #16
	b	.L13672
.L13682:
	mov	r1, #0
.L13669:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L13670
.L13680:
	mov	r1, #0
.L13667:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L13668
.L13695:
	movw	r0, #:lower16:.LC882
	ldr	r1, .L13700
	movt	r0, #:upper16:.LC882
	ldr	r2, [r6, #-1036]
	bl	printk
	mov	r3, #0
	cmp	r5, #0
	str	r3, [r4, #92]
	beq	.L13664
	b	.L13662
.L13685:
	mov	r1, #0
.L13674:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L13675
.L13687:
	mov	r1, #0
.L13676:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L13677
.L13696:
	movw	r0, #:lower16:.LC883
	ldr	r1, .L13700
	mvn	r5, #21
	movt	r0, #:upper16:.LC883
	ldr	r2, [r6, #-1032]
	bl	printk
	mov	r3, #0
	str	r3, [r4, #120]
.L13662:
	movw	r0, #:lower16:.LC887
	ldr	r1, .L13700+4
	movt	r0, #:upper16:.LC887
	bl	printk
	b	.L13660
.L13698:
	movw	r0, #:lower16:.LC885
	ldr	r1, .L13700
	mvn	r5, #21
	movt	r0, #:upper16:.LC885
	ldr	r2, [r6, #-1028]
	bl	printk
	mov	r3, #0
	str	r3, [r4, #144]
	str	r3, [r4, #148]
	str	r3, [r4, #152]
	b	.L13662
.L13697:
	movw	r0, #:lower16:.LC884
	mvn	r2, #11
	ldr	r1, .L13700
	movt	r0, #:upper16:.LC884
	mov	r5, r2
	bl	printk
	b	.L13662
.L13699:
	movw	r0, #:lower16:.LC886
	mvn	r2, #11
	ldr	r1, .L13700
	movt	r0, #:upper16:.LC886
	mov	r5, r2
	bl	printk
	b	.L13662
.L13694:
	ldr	r2, .L13700
	movw	r0, #:lower16:.LC474
	mvn	r5, #18
	movt	r0, #:upper16:.LC474
	mov	r1, r2
	bl	printk
	b	.L13662
.L13701:
	.align	2
.L13700:
	.word	.LANCHOR3+848
	.word	.LANCHOR3+868
	.fnend
	.size	gaudio_setup, .-gaudio_setup
	.align	2
	.global	gaudio_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gaudio_cleanup, %function
gaudio_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r0, [r4, #3688]
	cmp	r0, #0
	beq	.L13702
	bl	gaudio_close_snd_dev
	mov	r3, #0
	str	r3, [r4, #3688]
.L13702:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gaudio_cleanup, .-gaudio_cleanup
	.align	2
	.global	control_selector_init
	.syntax unified
	.arm
	.fpu softvfp
	.type	control_selector_init, %function
control_selector_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:.LANCHOR4
	movw	r5, #:lower16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	movt	r5, #:upper16:.LANCHOR0
	strd	r8, [sp, #16]
	mov	r8, r0
	add	r9, r0, #252
	str	r10, [sp, #24]
	mov	r2, r9
	mov	r1, r9
	str	lr, [sp, #28]
	sub	r0, r4, #1024
	sub	r6, r4, #1016
	str	r9, [r8, #252]
	sub	r7, r4, #984
	str	r9, [r8, #256]
	bl	__list_add
	mov	r1, r9
	sub	r0, r4, #992
	ldr	r2, [r8, #252]
	bl	__list_add
	mov	r2, r6
	mov	r1, r6
	str	r6, [r4, #-1016]
	sub	r0, r4, #960
	str	r6, [r4, #-1012]
	add	r9, r8, #260
	bl	__list_add
	mov	r1, r6
	sub	r0, r4, #916
	ldr	r2, [r4, #-1016]
	bl	__list_add
	mov	r2, r7
	mov	r1, r7
	str	r7, [r4, #-984]
	sub	r0, r4, #872
	str	r7, [r4, #-980]
	add	r6, r5, #3248
	bl	__list_add
	mov	r1, r7
	sub	r0, r4, #828
	ldr	r2, [r4, #-984]
	bl	__list_add
	movw	r2, #58272
	movw	r1, #65520
	str	r9, [r8, #260]
	movw	ip, #65472
	mov	r3, #48
	str	r9, [r8, #264]
	add	r6, r6, #12
	add	r7, r5, #3216
	mov	r0, r6
	add	r7, r7, #12
	str	ip, [r4, #-896]
	str	r2, [r4, #-892]
	add	r6, r6, #8
	str	r1, [r4, #-888]
	str	r2, [r4, #-804]
	mov	r2, r9
	str	r1, [r4, #-800]
	mov	r1, r9
	str	r3, [r4, #-884]
	str	ip, [r4, #-808]
	str	r3, [r4, #-796]
	bl	__list_add
	mov	r1, r9
	mov	r0, r7
	ldr	r2, [r8, #260]
	add	r7, r7, #8
	bl	__list_add
	sub	r0, r4, #784
	mov	r2, r7
	str	r7, [r5, #3236]
	mov	r1, r7
	str	r7, [r5, #3240]
	bl	__list_add
	sub	r0, r4, #740
	mov	r2, r6
	str	r6, [r5, #3268]
	mov	r1, r6
	str	r6, [r5, #3272]
	bl	__list_add
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	control_selector_init, .-control_selector_init
	.align	2
	.global	audio_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_bind_config, %function
audio_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L13715
	mov	r2, #276
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L13724
.L13711:
	ldr	ip, [r5, #24]
	movw	r1, #:lower16:.LC888
	movw	r3, #:lower16:f_audio_bind
	ldr	r0, .L13726
	movt	r1, #:upper16:.LC888
	movw	r2, #:lower16:f_audio_unbind
	movt	r3, #:upper16:f_audio_bind
	movt	r2, #:upper16:f_audio_unbind
	mov	r6, #0
	ldr	lr, [ip]
	str	r1, [r4]
	movw	r1, #:lower16:f_audio_get_alt
	str	r0, [r4, #4]
	movw	r0, #:lower16:f_audio_set_alt
	movt	r1, #:upper16:f_audio_get_alt
	movt	r0, #:upper16:f_audio_set_alt
	str	r3, [r4, #32]
	movw	r3, #:lower16:f_audio_setup
	str	r2, [r4, #36]
	movw	r2, #:lower16:f_audio_disable
	add	ip, r4, #204
	movt	r3, #:upper16:f_audio_setup
	movt	r2, #:upper16:f_audio_disable
	strd	r0, [r4, #40]
	add	r1, r4, #236
	mov	r0, r4
	strd	r2, [r4, #48]
	str	lr, [r4, #84]
	str	r6, [r4, #180]
	str	ip, [r4, #204]
	str	ip, [r4, #208]
	str	r6, [r4, #212]
	str	r1, [r4, #236]
	str	r1, [r4, #240]
	bl	control_selector_init
	mov	r2, #65024
	movw	r1, #:lower16:f_audio_playback_work
	movw	r3, #:lower16:f_audio_capture_work
	movt	r2, 65535
	add	r0, r4, #192
	add	ip, r4, #224
	movt	r1, #:upper16:f_audio_playback_work
	movt	r3, #:upper16:f_audio_capture_work
	str	r2, [r4, #188]
	str	r0, [r4, #192]
	strd	r0, [r4, #196]
	mov	r0, r4
	str	r2, [r4, #220]
	str	ip, [r4, #224]
	str	ip, [r4, #228]
	str	r3, [r4, #232]
	bl	gaudio_setup
	subs	r7, r0, #0
	bge	.L13725
.L13713:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r0, [r5, #3688]
	cmp	r0, #0
	beq	.L13714
	bl	gaudio_close_snd_dev
	str	r6, [r5, #3688]
.L13714:
	mov	r0, r4
	bl	kfree
.L13710:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13725:
	mov	r0, r5
	mov	r1, r4
	bl	usb_add_function
	subs	r7, r0, #0
	beq	.L13710
	ldr	r2, .L13726+4
	movw	r0, #:lower16:.LC889
	mov	r3, r7
	movt	r0, #:upper16:.LC889
	mov	r1, r2
	bl	printk
	b	.L13714
.L13715:
	mov	r4, #16
	b	.L13711
.L13724:
	mvn	r7, #11
	b	.L13710
.L13727:
	.align	2
.L13726:
	.word	.LANCHOR4-696
	.word	.LANCHOR3+884
	.fnend
	.size	audio_bind_config, .-audio_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_function_bind_config, %function
audio_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r1
	b	audio_bind_config
	.fnend
	.size	audio_function_bind_config, .-audio_function_bind_config
	.align	2
	.global	conn_gadget_req_put
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_req_put, %function
conn_gadget_req_put:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r4, r0, #88
	mov	r0, r4
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	mov	r6, r2
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	ldr	r1, [r7, #4]
	add	r0, r6, #36
	mov	r2, r7
	bl	__list_add
	ldrd	r6, [sp, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	conn_gadget_req_put, .-conn_gadget_req_put
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_complete_in, %function
conn_gadget_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r3, #:lower16:.LANCHOR1
	mov	r5, r1
	str	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #12]
	ldr	r2, [r1, #44]
	ldr	r4, [r3, #2500]
	cmp	r2, #0
	bne	.L13737
.L13732:
	mov	r2, r5
	add	r1, r4, #120
	mov	r0, r4
	bl	conn_gadget_req_put
	ldr	r6, [sp, #8]
	add	r0, r4, #156
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L13737:
	mov	r3, #1
	movw	r0, #:lower16:.LC890
	ldr	r1, .L13738
	movt	r0, #:upper16:.LC890
	str	r3, [r4, #104]
	ldr	r2, [r5, #44]
	bl	printk
	b	.L13732
.L13739:
	.align	2
.L13738:
	.word	.LANCHOR3+904
	.fnend
	.size	conn_gadget_complete_in, .-conn_gadget_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_bind, %function
conn_gadget_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r3, [r0, #24]
	movw	r0, #:lower16:.LC892
	.pad #12
	sub	sp, sp, #12
	movt	r0, #:upper16:.LC892
	str	r3, [r1, #84]
	bl	printk
	ldrb	r3, [r6, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L13752
	add	r0, r3, #12
	add	r1, r3, #1
	movw	r7, #:lower16:.LANCHOR4
	mov	r2, #0
	str	r4, [r6, r0, lsl #2]
	movt	r7, #:upper16:.LANCHOR4
	strb	r1, [r6, #44]
	ldr	r5, [r4, #84]
	sub	r1, r7, #676
	strb	r3, [r7, #-686]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L13766
	str	r4, [r0]
	mov	r2, #0
	sub	r1, r7, #664
	str	r0, [r4, #92]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L13767
	movw	r8, #:lower16:conn_gadget_complete_out
	mov	r5, #4
	str	r4, [r0]
	movt	r8, #:upper16:conn_gadget_complete_out
	add	r9, r4, #128
	str	r0, [r4, #96]
.L13747:
	ldr	r1, [r4, #192]
	cmp	r1, #0
	moveq	r1, #4096
	bl	conn_gadget_request_new
	subs	r3, r0, #0
	mov	r1, r9
	mov	r2, r3
	mov	r0, r4
	beq	.L13745
	str	r8, [r3, #28]
	bl	conn_gadget_req_put
	subs	r5, r5, #1
	beq	.L13753
	ldr	r0, [r4, #96]
	b	.L13747
.L13753:
	movw	r8, #:lower16:conn_gadget_complete_in
	mov	r5, #4
	movt	r8, #:upper16:conn_gadget_complete_in
	add	r9, r4, #120
.L13746:
	ldr	r0, [r4, #92]
	ldr	r1, [r4, #192]
	cmp	r1, #0
	moveq	r1, #4096
	bl	conn_gadget_request_new
	subs	r3, r0, #0
	mov	r1, r9
	mov	r2, r3
	mov	r0, r4
	beq	.L13745
	str	r8, [r3, #28]
	bl	conn_gadget_req_put
	subs	r5, r5, #1
	bne	.L13746
	ldr	r3, [r6, #24]
	ldr	r2, [r3]
	ldr	r2, [r2, #20]
	cmp	r2, #2
	movwls	r1, #:lower16:.LC594
	movtls	r1, #:upper16:.LC594
	bls	.L13750
	ldrb	r0, [r7, #-674]	@ zero_extendqisi2
	ldrb	r1, [r7, #-662]	@ zero_extendqisi2
	strb	r0, [r7, #-650]
	strb	r1, [r7, #-638]
	ldr	r2, [r3]
	ldr	r2, [r2, #20]
	cmp	r2, #4
	bls	.L13751
	strb	r0, [r7, #-626]
	strb	r1, [r7, #-614]
	ldr	r3, [r3]
	ldr	r2, [r3, #20]
	cmp	r2, #4
	movwhi	r1, #:lower16:.LC891
	movthi	r1, #:upper16:.LC891
	bhi	.L13750
.L13751:
	movw	r3, #:lower16:.LC593
	movw	r1, #:lower16:.LC594
	movt	r3, #:upper16:.LC593
	cmp	r2, #2
	movt	r1, #:upper16:.LC594
	movhi	r1, r3
.L13750:
	movw	r0, #:lower16:.LC896
	ldr	r2, [r4]
	ldr	ip, [r4, #96]
	movt	r0, #:upper16:.LC896
	ldr	r3, [r4, #92]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	ldr	r3, [r3, #4]
	bl	printk
	mov	r0, #0
.L13740:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L13752:
	mvn	r0, #18
	b	.L13740
.L13745:
	movw	r0, #:lower16:.LC895
	ldr	r1, .L13768
	movt	r0, #:upper16:.LC895
	bl	printk
	mvn	r0, #0
	b	.L13740
.L13767:
	movw	r0, #:lower16:.LC894
	movt	r0, #:upper16:.LC894
	bl	printk
	mvn	r0, #18
	b	.L13740
.L13766:
	movw	r0, #:lower16:.LC893
	movt	r0, #:upper16:.LC893
	bl	printk
	mvn	r0, #18
	b	.L13740
.L13769:
	.align	2
.L13768:
	.word	.LANCHOR3+928
	.fnend
	.size	conn_gadget_function_bind, .-conn_gadget_function_bind
	.align	2
	.global	conn_gadget_req_get
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_req_get, %function
conn_gadget_req_get:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #88
	mov	r4, r1
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4]
	mov	r6, r0
	cmp	r4, r3
	beq	.L13772
	mov	r0, r3
	sub	r4, r3, #36
	bl	list_del
.L13771:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13772:
	mov	r4, #0
	b	.L13771
	.fnend
	.size	conn_gadget_req_get, .-conn_gadget_req_get
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_request_ep_out, %function
conn_gadget_request_ep_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #128
	add	r7, r0, #136
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	b	.L13775
.L13778:
	ldr	r3, [r4, #192]
	str	r3, [r5, #4]
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r5
	mov	r1, r7
	mov	r0, r4
	blt	.L13780
	bl	conn_gadget_req_put
.L13775:
	mov	r1, r6
	mov	r0, r4
	bl	conn_gadget_req_get
	subs	r5, r0, #0
	mov	r2, #32
	mov	r1, r5
	bne	.L13778
.L13777:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13780:
	movw	r0, #:lower16:.LC897
	ldr	r1, .L13781
	movt	r0, #:upper16:.LC897
	bl	printk
	mov	r2, r5
	mov	r1, r6
	mov	r0, r4
	bl	conn_gadget_req_put
	b	.L13777
.L13782:
	.align	2
.L13781:
	.word	.LANCHOR3+964
	.fnend
	.size	conn_gadget_request_ep_out, .-conn_gadget_request_ep_out
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_set_alt, %function
conn_gadget_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC898
	str	r6, [sp, #8]
	mov	r3, r2
	movt	r0, #:upper16:.LC898
	str	lr, [sp, #12]
	ldr	ip, [r4, #20]
	mov	r2, r1
	ldr	r1, .L13790
	ldr	r6, [ip, #24]
	bl	printk
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13783
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L13789
.L13783:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13789:
	mov	r1, r4
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13788
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L13786
.L13788:
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L13783
.L13786:
	ldr	r3, [r4, #100]
	mov	r6, #1
	movw	r0, #:lower16:.LC899
	ldr	r1, .L13790
	movt	r0, #:upper16:.LC899
	str	r6, [r4, #100]
	str	r5, [r4, #104]
	str	r3, [r4, #212]
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2500]
	str	r5, [r3, #168]
	mov	r0, r3
	str	r5, [r3, #172]
	bl	conn_gadget_request_ep_out
	mov	r3, r5
	mov	r2, r6
	add	r0, r4, #200
	mov	r1, #3
	bl	__wake_up
	mov	r3, r5
	mov	r2, r6
	add	r0, r4, #144
	mov	r1, #3
	bl	__wake_up
	b	.L13783
.L13791:
	.align	2
.L13790:
	.word	.LANCHOR3+992
	.fnend
	.size	conn_gadget_function_set_alt, .-conn_gadget_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_open, %function
conn_gadget_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r0, #:lower16:.LC900
	movw	r4, #:lower16:.LANCHOR1
	movt	r0, #:upper16:.LC900
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	mov	r5, r1
	str	lr, [sp, #12]
	bl	printk
	ldr	r3, [r4, #2500]
	cmp	r3, #0
	beq	.L13800
	ldr	r0, [r3, #216]
	cmp	r0, #0
	bne	.L13801
	add	r2, r3, #116
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	ip, r1, [r2]
	teq	ip, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #1
	bne	.L13796
	ldr	r3, [r4, #2500]
	str	r3, [r5, #124]
	ldr	r2, [r3, #100]
	str	r0, [r3, #104]
	cmp	r2, #0
	bne	.L13802
.L13798:
	mov	r0, #0
	str	r2, [r3, #212]
.L13792:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13800:
	movw	r0, #:lower16:.LC196
	ldr	r1, .L13803
	movt	r0, #:upper16:.LC196
	bl	printk
	mvn	r0, #18
	b	.L13792
.L13802:
	movw	r0, #:lower16:.LC296
	ldr	r1, .L13803
	movt	r0, #:upper16:.LC296
	bl	printk
	ldr	r0, [r4, #2500]
	bl	conn_gadget_request_ep_out
	ldr	r3, [r4, #2500]
	ldr	r2, [r3, #100]
	b	.L13798
.L13796:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC902
	ldr	r1, .L13803
	movt	r0, #:upper16:.LC902
	bl	printk
	mvn	r0, #15
	b	.L13792
.L13801:
	movw	r0, #:lower16:.LC901
	ldr	r1, .L13803
	movt	r0, #:upper16:.LC901
	bl	printk
	mvn	r0, #10
	b	.L13792
.L13804:
	.align	2
.L13803:
	.word	.LANCHOR3+1024
	.fnend
	.size	conn_gadget_open, .-conn_gadget_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_read, %function
conn_gadget_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r3, [r3, #2500]
	.pad #28
	sub	sp, sp, #28
	ldr	r4, [r0, #124]
	str	r2, [sp]
	cmp	r3, #0
	beq	.L13833
	ldr	r3, [r4, #192]
	mov	r6, r2
	cmp	r3, r2
	bls	.L13834
	add	r5, r4, #108
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L13830
	mov	r3, sp
	mov	r8, r1
	bic	r7, r3, #8128
	ldrd	r2, [r4, #100]
	bic	r7, r7, #63
.L13809:
	cmp	r2, #0
	bne	.L13814
.L13828:
	cmp	r3, #0
	beq	.L13835
.L13816:
	mvn	r3, #4
	movw	r0, #:lower16:.LC906
	ldr	r1, .L13838
	movt	r0, #:upper16:.LC906
	str	r3, [sp]
	bl	printk
.L13818:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [sp]
.L13805:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L13814:
	cmp	r3, #0
	bne	.L13816
	ldr	r3, [r4, #168]
	ldr	r2, [r4, #172]
	subs	r3, r3, r2
	bne	.L13819
.L13821:
	mov	r3, #0
	movw	r0, #:lower16:.LC907
	ldr	r1, .L13838
	movt	r0, #:upper16:.LC907
	str	r3, [sp]
	bl	printk
.L13820:
	mov	r0, r4
	bl	conn_gadget_request_ep_out
	b	.L13818
.L13819:
	cmp	r6, r3
	mov	r1, r8
	movcs	r6, r3
	add	r0, r4, #168
	mov	r2, r6
	mov	r3, sp
	bl	__kfifo_to_user
	cmp	r6, #0
	mov	r2, r0
	beq	.L13821
	cmp	r0, #0
	blt	.L13836
	ldr	r2, [r4, #168]
	ldr	r3, [r4, #196]
	ldr	r1, [r4, #172]
	add	r3, r3, r3, lsr #31
	sub	r2, r2, r1
	cmp	r2, r3, asr #1
	bhi	.L13818
	b	.L13820
.L13836:
	mvn	r3, #13
	movw	r0, #:lower16:.LC908
	ldr	r1, .L13838
	movt	r0, #:upper16:.LC908
	str	r3, [sp]
	bl	printk
	b	.L13818
.L13830:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC904
	ldr	r1, .L13838
	movt	r0, #:upper16:.LC904
	bl	printk
	mvn	r0, #15
	b	.L13805
.L13834:
	movw	r0, #:lower16:.LC903
	ldr	r1, .L13838
	movt	r0, #:upper16:.LC903
	bl	printk
	mvn	r0, #21
	b	.L13805
.L13833:
	movw	r0, #:lower16:.LC196
	ldr	r1, .L13838
	movt	r0, #:upper16:.LC196
	bl	printk
	mvn	r0, #18
	b	.L13805
.L13835:
	movw	r0, #:lower16:.LC905
	ldr	r1, .L13838
	movt	r0, #:upper16:.LC905
	bl	printk
	ldrd	r2, [r4, #100]
	cmp	r2, #0
	bne	.L13809
	cmp	r3, #0
	bne	.L13828
	ldr	r0, [r7, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #16
	movt	r2, #:upper16:autoremove_wake_function
	add	r9, r4, #144
	str	r3, [sp, #4]
	str	r1, [sp, #16]
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #20]
	b	.L13813
.L13837:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L13811
	ldr	r3, [r7, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L13812
	bl	schedule
.L13813:
	mov	r2, #1
	add	r1, sp, #4
	mov	r0, r9
	bl	prepare_to_wait
	ldr	r3, [r4, #100]
	cmp	r3, #0
	beq	.L13837
.L13811:
	add	r1, sp, #4
	mov	r0, r9
	bl	finish_wait
	ldrd	r2, [r4, #100]
	b	.L13809
.L13812:
	mov	r0, r9
	add	r1, sp, #4
	bl	finish_wait
	mov	r2, #65024
	movw	r0, #:lower16:.LC909
	ldr	r1, .L13838
	movt	r2, 65535
	movt	r0, #:upper16:.LC909
	bl	printk
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #65024
	movt	r0, 65535
	b	.L13805
.L13839:
	.align	2
.L13838:
	.word	.LANCHOR3+1044
	.fnend
	.size	conn_gadget_read, .-conn_gadget_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_unbind, %function
conn_gadget_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC910
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	movt	r0, #:upper16:.LC910
	add	r5, r1, #128
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	mov	r7, #0
	mov	r6, #1
	str	lr, [sp, #20]
	bl	printk
	ldr	ip, [r4, #100]
	mov	r3, r7
	mov	r2, r6
	add	r0, r4, #200
	mov	r1, #3
	str	r7, [r4, #100]
	str	r6, [r4, #104]
	str	ip, [r4, #212]
	bl	__wake_up
	mov	r3, r7
	mov	r2, r6
	add	r0, r4, #144
	mov	r1, #3
	bl	__wake_up
	b	.L13841
.L13842:
	ldr	r1, [r4, #96]
	bl	conn_gadget_request_free.part.11
.L13841:
	mov	r1, r5
	mov	r0, r4
	bl	conn_gadget_req_get
	cmp	r0, #0
	bne	.L13842
	add	r5, r4, #136
	b	.L13843
.L13844:
	ldr	r1, [r4, #96]
	bl	conn_gadget_request_free.part.11
.L13843:
	mov	r1, r5
	mov	r0, r4
	bl	conn_gadget_req_get
	cmp	r0, #0
	bne	.L13844
	add	r5, r4, #120
	b	.L13845
.L13846:
	ldr	r1, [r4, #92]
	bl	conn_gadget_request_free.part.11
.L13845:
	mov	r1, r5
	mov	r0, r4
	bl	conn_gadget_req_get
	cmp	r0, #0
	bne	.L13846
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	conn_gadget_function_unbind, .-conn_gadget_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_write, %function
conn_gadget_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r3, #2500]
	.pad #44
	sub	sp, sp, #44
	ldr	r4, [r0, #124]
	stmib	sp, {r1, r2}
	cmp	r3, #0
	beq	.L13879
	add	r3, r4, #112
	str	r3, [sp, #12]
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r1, r3
	.syntax divided
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r1]
	add	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L13880
	ldr	r8, [sp, #8]
	mov	fp, #57344
	movw	r9, #:lower16:autoremove_wake_function
	movt	fp, 65535
	movt	r9, #:upper16:autoremove_wake_function
.L13851:
	cmp	r8, #0
	mov	r3, sp
	and	r7, r3, fp
	beq	.L13867
.L13887:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L13854
	add	r5, r4, #120
	mov	r0, r4
	mov	r1, r5
	bl	conn_gadget_req_get
	cmp	r0, #0
	beq	.L13881
	mov	r10, r0
.L13853:
	ldr	r6, [r4, #192]
	mov	r3, sp
	and	r2, r3, fp
	ldr	r0, [r10]
	ldr	r2, [r2, #8]
	ldr	r3, [sp, #4]
	cmp	r6, r8
	bcs	.L13882
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r3, r6; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L13860
	cmp	r6, #0
	bne	.L13883
.L13864:
	str	r6, [r10, #4]
	ldr	r0, [r4, #92]
	mov	r2, #32
	mov	r1, r10
	ldr	ip, [r0, #8]
	ldr	r7, [ip, #16]
	blx	r7
	cmp	r0, #0
	blt	.L13884
	ldr	r3, [sp, #4]
	sub	r8, r8, r6
	add	r3, r3, r6
	str	r3, [sp, #4]
	b	.L13851
.L13881:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L13885
.L13854:
	movw	r0, #:lower16:.LC912
	ldr	r1, .L13888
	mvn	r6, #4
	movt	r0, #:upper16:.LC912
	bl	printk
.L13852:
	ldr	r1, [sp, #12]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L13848:
	mov	r0, r6
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13885:
	str	r3, [sp, #20]
	add	r2, sp, #32
	add	r6, r4, #156
	str	r3, [sp, #24]
	str	r3, [sp, #28]
	str	r9, [sp, #28]
	str	r3, [sp, #32]
	str	r3, [sp, #36]
	ldr	r3, [r7, #12]
	str	r3, [sp, #24]
	str	r2, [sp, #32]
	str	r2, [sp, #36]
	b	.L13858
.L13886:
	bl	schedule
.L13858:
	mov	r2, #1
	add	r1, sp, #20
	mov	r0, r6
	bl	prepare_to_wait
	mov	r1, r5
	mov	r0, r4
	bl	conn_gadget_req_get
	cmp	r0, #0
	bne	.L13855
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L13856
	ldr	r3, [r7, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L13886
	mov	r0, r6
	add	r1, sp, #20
	bl	finish_wait
	mov	r2, #65024
	movw	r0, #:lower16:.LC915
	ldr	r1, .L13888
	movt	r2, 65535
	movt	r0, #:upper16:.LC915
	mov	r6, #65024
	bl	printk
	movt	r6, 65535
	b	.L13852
.L13855:
	mov	r10, r0
	add	r1, sp, #20
	mov	r0, r6
	bl	finish_wait
	b	.L13853
.L13856:
	add	r1, sp, #20
	mov	r0, r6
	bl	finish_wait
	cmp	r8, #0
	bne	.L13887
.L13867:
	ldr	r6, [sp, #8]
	b	.L13852
.L13882:
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r3, r8; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	bne	.L13861
	mov	r6, r8
.L13860:
	mov	r2, r6
	ldr	r1, [sp, #4]
	bl	__copy_from_user
	cmp	r0, #0
	beq	.L13864
	b	.L13863
.L13883:
	mov	r8, r6
.L13861:
	mov	r1, r8
	bl	__memzero
.L13863:
	movw	r0, #:lower16:.LC913
	ldr	r1, .L13888
	mvn	r6, #13
	movt	r0, #:upper16:.LC913
	bl	printk
.L13865:
	mov	r2, r10
	mov	r1, r5
	mov	r0, r4
	bl	conn_gadget_req_put
	b	.L13852
.L13884:
	mov	ip, #1
	mov	r2, r0
	ldr	r1, .L13888
	movw	r0, #:lower16:.LC914
	mvn	r6, #4
	str	ip, [r4, #104]
	movt	r0, #:upper16:.LC914
	bl	printk
	b	.L13865
.L13879:
	movw	r0, #:lower16:.LC196
	ldr	r1, .L13888
	mvn	r6, #18
	movt	r0, #:upper16:.LC196
	bl	printk
	b	.L13848
.L13880:
	ldr	r1, [sp, #12]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC911
	ldr	r1, .L13888
	mvn	r6, #15
	movt	r0, #:upper16:.LC911
	bl	printk
	b	.L13848
.L13889:
	.align	2
.L13888:
	.word	.LANCHOR3+1064
	.fnend
	.size	conn_gadget_write, .-conn_gadget_write
	.align	2
	.global	conn_gadget_req_move
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_req_move, %function
conn_gadget_req_move:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r5, r0, #88
	add	r4, r3, #36
	mov	r0, r5
	strd	r6, [sp, #8]
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r0, r4
	bl	__list_del_entry
	mov	r0, r4
	ldr	r1, [r7, #4]
	mov	r2, r7
	bl	__list_add
	ldr	r8, [sp, #16]
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	conn_gadget_req_move, .-conn_gadget_req_move
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_complete_out, %function
conn_gadget_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r3, #2500]
	ldr	r1, [r1, #44]
	ldr	r3, [r4, #192]
	ldr	r2, [r4, #196]
	cmp	r1, #0
	add	r3, r3, r3, lsl #2
	sub	r6, r2, r3
	bne	.L13902
	add	r0, r4, #168
	ldr	r1, [r5]
	ldr	r2, [r5, #48]
	bl	__kfifo_in
	ldr	r3, [r4, #168]
	ldr	r2, [r4, #172]
	sub	r3, r3, r2
	cmp	r6, r3
	bls	.L13901
	ldr	r0, [r4, #96]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	blt	.L13903
.L13895:
	add	r0, r4, #144
	mov	r3, #0
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L13903:
	movw	r0, #:lower16:.LC897
	ldr	r1, .L13904
	mov	r2, r5
	movt	r0, #:upper16:.LC897
	bl	printk
.L13901:
	mov	r3, r5
	add	r2, r4, #128
	add	r1, r4, #136
	mov	r0, r4
	bl	conn_gadget_req_move
	b	.L13895
.L13902:
	cmn	r1, #104
	movw	r0, #:lower16:.LC890
	ldr	r1, .L13904
	movne	r3, #1
	movt	r0, #:upper16:.LC890
	strne	r3, [r4, #104]
	ldr	r2, [r5, #44]
	bl	printk
	b	.L13901
.L13905:
	.align	2
.L13904:
	.word	.LANCHOR3+1084
	.fnend
	.size	conn_gadget_complete_out, .-conn_gadget_complete_out
	.align	2
	.global	conn_gadget_empty
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_empty, %function
conn_gadget_empty:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	add	r6, r0, #88
	mov	r0, r6
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5]
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	sub	r4, r4, r5
	clz	r4, r4
	lsr	r4, r4, #5
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	conn_gadget_empty, .-conn_gadget_empty
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_poll, %function
conn_gadget_poll:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r1, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	beq	.L13910
	ldr	r3, [r5]
	mov	r6, r0
	add	r1, r4, #144
	adds	r2, r3, #0
	movne	r2, #1
	cmn	r4, #144
	cmpne	r3, #0
	beq	.L13911
	mov	r2, r5
	blx	r3
	ldr	r3, [r5]
	adds	r2, r3, #0
	movne	r2, #1
.L13911:
	adds	r0, r4, #156
	add	r1, r4, #156
	movne	r0, #1
	tst	r2, r0
	beq	.L13910
	mov	r2, r5
	mov	r0, r6
	blx	r3
.L13910:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2500]
	cmp	r3, #0
	beq	.L13925
	ldr	r5, [r3, #100]
	cmp	r5, #0
	beq	.L13926
	add	r3, r4, #108
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #1
	beq	.L13927
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r5, #0
.L13917:
	add	r1, r4, #120
	mov	r0, r4
	bl	conn_gadget_empty
	cmp	r0, #0
	orreq	r5, r5, #260
.L13908:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13927:
	ldr	r5, [r4, #168]
	ldr	r2, [r4, #172]
	cmp	r5, r2
	movne	r5, #65
	moveq	r5, #0
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L13917
.L13926:
	movw	r0, #:lower16:.LC916
	ldr	r1, .L13928
	movt	r0, #:upper16:.LC916
	bl	printk
	b	.L13908
.L13925:
	movw	r0, #:lower16:.LC196
	ldr	r1, .L13928
	mov	r5, #40
	movt	r0, #:upper16:.LC196
	bl	printk
	b	.L13908
.L13929:
	.align	2
.L13928:
	.word	.LANCHOR3+1112
	.fnend
	.size	conn_gadget_poll, .-conn_gadget_poll
	.align	2
	.global	ncm_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_bind_config, %function
ncm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	movw	r0, #:lower16:.LC339
	strd	r8, [sp, #16]
	mov	r6, r1
	movt	r0, #:upper16:.LC339
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r8, [r7, #24]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r8]
	ldr	r4, [r3, #28]
	mov	r1, r4
	bl	strcmp
	cmp	r0, #0
	beq	.L13937
	movw	r0, #:lower16:.LC342
	mov	r1, r4
	movt	r0, #:upper16:.LC342
	bl	strcmp
	cmp	r0, #0
	cmpne	r6, #0
	beq	.L13937
	movw	r5, #:lower16:.LANCHOR0
	movt	r5, #:upper16:.LANCHOR0
	ldrb	r3, [r5, #1752]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L13932
	ldrb	r3, [r8, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13934
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r8, #48]
	ldr	r2, [r7, #24]
	strb	r3, [r5, #1752]
	strb	r3, [r5, #3384]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13934
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r1, [r7, #24]
	strb	r3, [r5, #1768]
	strb	r3, [r5, #3404]
	strb	r3, [r5, #3416]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13934
	add	r3, r3, #1
	movw	r2, #:lower16:.LANCHOR4
	uxtb	r3, r3
	movt	r2, #:upper16:.LANCHOR4
	strb	r3, [r1, #48]
	ldr	r1, [r7, #24]
	strb	r3, [r2, #-601]
	strb	r3, [r5, #1760]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13934
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	strb	r3, [r5, #1776]
	strb	r3, [r5, #3375]
.L13932:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L13938
	mov	r2, #192
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L13944
.L13935:
	ldrb	r9, [r6, #3]	@ zero_extendqisi2
	add	r8, r4, #150
	movw	r2, #:lower16:.LC857
	ldrb	lr, [r6, #2]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC857
	mov	r0, r8
	ldrb	ip, [r6, #1]	@ zero_extendqisi2
	mov	r1, #14
	ldrb	fp, [r6, #5]	@ zero_extendqisi2
	ldrb	r10, [r6, #4]	@ zero_extendqisi2
	ldrb	r3, [r6]	@ zero_extendqisi2
	mov	r6, #0
	stm	sp, {ip, lr}
	str	r9, [sp, #8]
	ldr	r9, .L13945
	strd	r10, [sp, #12]
	bl	snprintf
	ldr	r3, .L13945+4
	mov	r2, #15
	movw	ip, #:lower16:ncm_bind
	movt	ip, #:upper16:ncm_bind
	movw	r1, #:lower16:.LC495
	str	r8, [r5, #1764]
	strh	r2, [r4, #98]	@ movhi
	movw	r2, #:lower16:ncm_unbind
	mov	r0, r7
	movt	r1, #:upper16:.LC495
	str	r6, [r4, #100]
	movt	r2, #:upper16:ncm_unbind
	str	r3, [r4, #176]
	movw	r3, #:lower16:ncm_set_alt
	movw	lr, #:lower16:ncm_get_alt
	strb	r6, [r4, #180]
	movt	r3, #:upper16:ncm_set_alt
	movt	lr, #:upper16:ncm_get_alt
	str	r6, [r4, #188]
	ldr	r7, [r5, #36]
	mov	r8, #1
	stm	r4, {r1, r9}
	movw	r1, #:lower16:ncm_setup
	str	ip, [r4, #32]
	movw	ip, #:lower16:ncm_disable
	movt	r1, #:upper16:ncm_setup
	movt	ip, #:upper16:ncm_disable
	strd	r2, [r4, #36]
	movw	r2, #:lower16:ncm_wrap_ntb
	movw	r3, #:lower16:ncm_unwrap_ntb
	str	lr, [r4, #44]
	movt	r2, #:upper16:ncm_wrap_ntb
	movt	r3, #:upper16:ncm_unwrap_ntb
	mov	lr, #16384
	str	ip, [r4, #48]
	movw	ip, #9014
	str	r1, [r4, #52]
	mov	r1, r4
	strb	r8, [r4, #104]
	str	r7, [r4, #108]
	str	lr, [r4, #112]
	strd	r2, [r4, #128]
	strh	ip, [r4, #182]	@ movhi
	str	r6, [r4, #184]
	bl	usb_add_function
	subs	r7, r0, #0
	beq	.L13930
	mov	r0, r4
	str	r6, [r5, #1764]
	bl	kfree
.L13930:
	mov	r0, r7
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13938:
	mov	r4, #16
	b	.L13935
.L13937:
	mvn	r7, #21
	b	.L13930
.L13934:
	mvn	r7, #18
	b	.L13930
.L13944:
	mvn	r7, #11
	b	.L13930
.L13946:
	.align	2
.L13945:
	.word	.LANCHOR4-588
	.word	.LANCHOR0+76
	.fnend
	.size	ncm_bind_config, .-ncm_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_function_bind_config, %function
ncm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #4]
	.pad #16
	sub	sp, sp, #16
	cmp	r4, #0
	beq	.L13948
	mov	r3, #0
	mov	r2, #2
	ldr	r0, .L13959
	movw	lr, #52429
	mov	r5, r1
	strb	r2, [r4]
	movt	lr, 52428
	mov	r2, r3
	strb	r3, [r4, #1]
	strb	r3, [r4, #2]
	strb	r3, [r4, #3]
	strb	r3, [r4, #4]
	strb	r3, [r4, #5]
	b	.L13949
.L13953:
	sub	r3, r2, r3
	add	r2, r2, #1
	add	r3, r3, #1
	cmp	r2, #256
	ldrb	ip, [r4, r3]	@ zero_extendqisi2
	eor	r1, r1, ip
	strb	r1, [r4, r3]
	beq	.L13954
.L13949:
	umull	r1, r3, lr, r2
	ldrb	r1, [r0], #1	@ zero_extendqisi2
	lsr	r3, r3, #2
	cmp	r1, #0
	add	r3, r3, r3, lsl #2
	bne	.L13953
.L13954:
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC918
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC918
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldr	r1, .L13959+4
	str	ip, [sp, #12]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC919
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC919
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldr	r1, .L13959+4
	str	ip, [sp, #12]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldr	r3, [r5, #24]
	movw	r2, #:lower16:.LC495
	mov	r1, r4
	movt	r2, #:upper16:.LC495
	ldr	r0, [r3]
	bl	gether_setup_name
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	mov	r6, r0
	movw	r0, #:lower16:.LC920
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC920
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldr	r1, .L13959+4
	str	ip, [sp, #12]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	cmp	r6, #0
	bne	.L13958
	mov	r1, r4
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	ncm_bind_config
.L13948:
	ldr	r2, .L13959+4
	movw	r0, #:lower16:.LC917
	mvn	r6, #0
	movt	r0, #:upper16:.LC917
	mov	r1, r2
	bl	printk
.L13947:
	mov	r0, r6
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13958:
	ldr	r2, .L13959+4
	movw	r0, #:lower16:.LC868
	movt	r0, #:upper16:.LC868
	mov	r1, r2
	bl	printk
	b	.L13947
.L13960:
	.align	2
.L13959:
	.word	.LANCHOR1+2240
	.word	.LANCHOR3+1132
	.fnend
	.size	ncm_function_bind_config, .-ncm_function_bind_config
	.align	2
	.global	is_ncm_ready
	.syntax unified
	.arm
	.fpu softvfp
	.type	is_ncm_ready, %function
is_ncm_ready:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC816
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r1, #:upper16:.LC816
	str	lr, [sp, #4]
	bl	strcmp
	cmp	r0, #0
	beq	.L13962
	movw	r1, #:lower16:.LC495
	mov	r0, r4
	movt	r1, #:upper16:.LC495
	bl	strcmp
	cmp	r0, #0
	movne	r0, #0
	bne	.L13963
.L13962:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldrb	r0, [r3, #3568]	@ zero_extendqisi2
	cmp	r0, #0
	bne	.L13970
.L13963:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L13970:
	movw	r0, #:lower16:.LC921
	mov	r2, r4
	ldr	r1, .L13971
	movt	r0, #:upper16:.LC921
	bl	printk
	mov	r0, #1
	b	.L13963
.L13972:
	.align	2
.L13971:
	.word	.LANCHOR3+1160
	.fnend
	.size	is_ncm_ready, .-is_ncm_ready
	.align	2
	.global	set_ncm_device_descriptor
	.syntax unified
	.arm
	.fpu softvfp
	.type	set_ncm_device_descriptor, %function
set_ncm_device_descriptor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {lr}
	str	lr, [sp, #-4]!
	mov	ip, r0
	mov	r2, #2
	mov	r3, #93
	mov	lr, #104
	ldr	r1, .L13975
	strb	r2, [ip, #4]
	movw	r0, #:lower16:.LC922
	strb	r3, [ip, #10]
	movt	r0, #:upper16:.LC922
	mov	r3, r2
	strb	lr, [ip, #11]
	movw	r2, #26717
	ldr	lr, [sp], #4
	b	printk
.L13976:
	.align	2
.L13975:
	.word	.LANCHOR3+1176
	.fnend
	.size	set_ncm_device_descriptor, .-set_ncm_device_descriptor
	.align	2
	.global	set_ncm_ready
	.syntax unified
	.arm
	.fpu softvfp
	.type	set_ncm_ready, %function
set_ncm_ready:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r0
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldrb	r2, [r4, #3568]	@ zero_extendqisi2
	str	lr, [sp, #12]
	cmp	r2, r0
	bne	.L13981
.L13978:
	cmp	r5, #0
	bne	.L13977
	movw	r2, #3604
	movw	r3, #3606
	strh	r5, [r4, r2]	@ movhi
	strh	r5, [r4, r3]	@ movhi
.L13977:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13981:
	movw	r0, #:lower16:.LC923
	mov	r3, r5
	ldr	r1, .L13982
	movt	r0, #:upper16:.LC923
	bl	printk
	movw	r3, #:lower16:system_wq
	ldr	r2, [r4, #3544]
	mov	r0, #4
	movt	r3, #:upper16:system_wq
	strb	r5, [r4, #3568]
	ldr	r1, [r3]
	bl	queue_work_on
	b	.L13978
.L13983:
	.align	2
.L13982:
	.word	.LANCHOR3+1204
	.fnend
	.size	set_ncm_ready, .-set_ncm_ready
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	terminal_version_store, %function
terminal_version_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movw	r1, #:lower16:.LC924
	mov	r4, r2
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r2
	movt	r1, #:upper16:.LC924
	add	r2, sp, #4
	mov	r5, r3
	bl	sscanf
	ldr	lr, [sp, #4]
	movw	r3, #:lower16:.LANCHOR1
	movw	ip, #3604
	movt	r3, #:upper16:.LANCHOR1
	movw	r0, #:lower16:.LC225
	ldr	r1, .L13988
	mov	r2, r4
	movt	r0, #:upper16:.LC225
	strh	lr, [r3, ip]	@ movhi
	bl	printk
	ldr	r0, [sp, #4]
	cmp	r0, #0
	movne	r0, #1
	bl	set_ncm_ready
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L13989:
	.align	2
.L13988:
	.word	.LANCHOR3+1220
	.fnend
	.size	terminal_version_store, .-terminal_version_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_setup, %function
android_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r4, r3
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	stm	sp, {r0, r3}
	add	r0, r0, #32
	bl	dev_get_drvdata
	ldr	r3, [r4, #2228]
	mov	r6, r0
	ldr	r2, .L14024
	sub	r9, r3, #520
	cmp	r3, r2
	bne	.L13993
	b	.L13991
.L14021:
	ldr	r3, [r9, #520]
	cmp	r3, r2
	sub	r9, r3, #520
	beq	.L13991
.L13993:
	ldr	r3, [r3, #-512]
	cmp	r6, r3
	bne	.L14021
.L13991:
	ldr	r3, [r6, #4]
	movw	r2, #:lower16:composite_setup_complete
	mov	r0, #0
	movt	r2, #:upper16:composite_setup_complete
	mov	r10, r9
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	str	r0, [r3, #4]
	str	r2, [r3, #28]
	bfc	r1, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [sp]
	ldr	r3, [r3, #4]
	str	r6, [r3]
	ldr	r8, [r10, #508]!
	cmp	r10, r8
	sub	r8, r8, #120
	beq	.L13994
	mvn	fp, #94
.L13998:
	mov	r5, r8
	ldr	r4, [r5, #112]!
	cmp	r5, r4
	sub	r4, r4, #4
	bne	.L13997
	b	.L13995
.L13996:
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L13995
.L13997:
	ldr	r0, [r4]
	mov	r2, r7
	mov	r1, r6
	ldr	r3, [r0, #48]
	cmp	r3, #0
	beq	.L13996
	blx	r3
	subs	fp, r0, #0
	blt	.L13996
.L13995:
	ldr	r8, [r8, #120]
	cmp	r10, r8
	sub	r8, r8, #120
	bne	.L13998
	ldr	r4, [r6, #12]
	adds	r4, r4, #0
	movne	r4, #1
	cmp	fp, #0
	blt	.L14000
.L14001:
	add	r5, r6, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r9, #48]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L14003
	mov	r3, #1
	mov	r1, r0
	mov	r0, r5
	strb	r3, [r9, #48]
	bl	_raw_spin_unlock_irqrestore
.L14004:
	movw	r3, #:lower16:system_wq
	add	r2, r9, #180
	movt	r3, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r3]
	bl	queue_work_on
.L13990:
	mov	r0, fp
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14003:
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	mov	r1, r0
	mov	r0, r5
	cmp	r3, #9
	beq	.L14022
.L14020:
	bl	_raw_spin_unlock_irqrestore
	b	.L13990
.L13994:
	ldr	r4, [r6, #12]
	adds	r4, r4, #0
	movne	r4, #1
.L14000:
	ldrb	r3, [r7]	@ zero_extendqisi2
	and	r3, r3, #96
	cmp	r3, #64
	bne	.L14002
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	cmp	r3, #240
	beq	.L14023
.L14002:
	mov	r1, r7
	mov	r0, r6
	bl	acc_ctrlrequest
	subs	fp, r0, #0
	bge	.L14001
	mov	r1, r7
	ldr	r0, [sp]
	bl	composite_setup
	mov	fp, r0
	b	.L14001
.L14022:
	ldr	r3, [r6, #12]
	cmp	r3, #0
	beq	.L14020
	cmp	r4, #0
	bne	.L14020
	bl	_raw_spin_unlock_irqrestore
	b	.L14004
.L14023:
	ldrb	r1, [r7, #3]	@ zero_extendqisi2
	movw	r5, #3604
	movw	r8, #3606
	ldrb	r3, [r7, #2]	@ zero_extendqisi2
	mov	r0, #1
	mov	fp, #0
	ldr	r10, [sp, #4]
	ldrh	r2, [r7, #4]	@ unaligned
	orr	r3, r3, r1, lsl #8
	strh	r2, [r10, r8]	@ movhi
	strh	r3, [r10, r5]	@ movhi
	bl	set_ncm_ready
	movw	r0, #:lower16:.LC925
	ldrh	r3, [r10, r8]
	ldrh	r2, [r10, r5]
	movt	r0, #:upper16:.LC925
	ldr	r1, .L14024+4
	bl	printk
	ldr	r3, [r6, #4]
	mov	r2, #32
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfc	r1, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r6, #4]
	str	fp, [r3, #4]
	ldr	r3, [r6]
	ldr	r1, [r6, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, fp
	bge	.L14001
	movw	r0, #:lower16:.LC926
	ldr	r1, .L14024+4
	movt	r0, #:upper16:.LC926
	bl	printk
	b	.L14001
.L14025:
	.align	2
.L14024:
	.word	.LANCHOR1+2228
	.word	.LANCHOR3+1244
	.fnend
	.size	android_setup, .-android_setup
	.align	2
	.global	schedule_usb_gadget_connect_work
	.syntax unified
	.arm
	.fpu softvfp
	.type	schedule_usb_gadget_connect_work, %function
schedule_usb_gadget_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LC927
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r2, #0
	movt	r3, #:upper16:.LC927
	str	lr, [sp, #8]
	cmp	r0, #0
	.pad #12
	sub	sp, sp, #12
	str	r3, [sp]
	str	r2, [sp, #4]
	bne	.L14037
.L14026:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L14037:
	ldr	r2, .L14039
	mov	r4, r0
	movw	r0, #:lower16:.LC928
	add	r5, r4, #452
	movt	r0, #:upper16:.LC928
	mov	r1, r2
	bl	printk
	mov	r0, r5
	bl	work_busy
	cmp	r0, #0
	bne	.L14038
.L14028:
	ldr	r0, [r4, #12]
	mov	r2, sp
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env
	mov	r3, #0
	mov	r0, #1
	str	r3, [r4, #504]
	bl	msecs_to_jiffies
	movw	r1, #:lower16:system_wq
	mov	r3, r0
	movt	r1, #:upper16:system_wq
	mov	r2, r5
	ldr	r1, [r1]
	mov	r0, #4
	bl	queue_delayed_work_on
	b	.L14026
.L14038:
	mov	r0, r5
	bl	cancel_delayed_work
	ldr	r2, .L14039
	movw	r0, #:lower16:.LC929
	movt	r0, #:upper16:.LC929
	mov	r1, r2
	bl	printk
	b	.L14028
.L14040:
	.align	2
.L14039:
	.word	.LANCHOR3+1268
	.fnend
	.size	schedule_usb_gadget_connect_work, .-schedule_usb_gadget_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb30en_store, %function
usb30en_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r3
	mov	r4, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	mov	r6, r0
	bl	get_host_os_type
	subs	r3, r0, #0
	beq	.L14061
	movw	r1, #:lower16:.LC297
	mov	r0, r4
	movt	r1, #:upper16:.LC297
	add	r2, sp, #4
	bl	sscanf
	cmp	r0, #1
	bne	.L14044
	ldr	r1, [r6, #8]
	cmp	r1, #0
	beq	.L14044
	movw	r4, #:lower16:.LANCHOR1
	ldr	r2, [sp, #4]
	movt	r4, #:upper16:.LANCHOR1
	ldrb	r3, [r4, #2596]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L14062
	uxtb	r2, r2
	strb	r2, [r4, #2596]
	ldr	r0, [r1]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L14046
	mov	r1, #0
	blx	r3
	ldr	r3, [r6, #8]
	ldrb	r2, [r4, #2596]	@ zero_extendqisi2
	ldr	r0, [r3]
.L14046:
	cmp	r2, #0
	moveq	r1, #3
	movne	r1, #5
	bl	sec_set_speedlimit
	movw	r0, #:lower16:.LC932
	ldr	r1, .L14064
	movt	r0, #:upper16:.LC932
	bl	printk
	mov	r0, #200
	bl	msleep
	ldrb	r3, [r4, #2596]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L14063
	ldr	r3, [r6, #8]
	ldr	r0, [r3]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L14049
	mov	r1, #1
	blx	r3
.L14049:
	movw	r0, #:lower16:.LC933
	ldr	r1, .L14064
	movt	r0, #:upper16:.LC933
	bl	printk
.L14041:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14063:
	mov	r0, r6
	bl	schedule_usb_gadget_connect_work
	b	.L14049
.L14062:
	movw	r0, #:lower16:.LC931
	ldr	r1, .L14064
	mov	r2, r3
	movt	r0, #:upper16:.LC931
	bl	printk
	b	.L14041
.L14044:
	movw	r0, #:lower16:.LC934
	ldr	r1, .L14064
	mvn	r5, #0
	movt	r0, #:upper16:.LC934
	bl	printk
	b	.L14041
.L14061:
	movw	r2, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC930
	ldr	r1, .L14064
	movt	r2, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC930
	strb	r3, [r2, #2596]
	bl	printk
	b	.L14041
.L14065:
	.align	2
.L14064:
	.word	.LANCHOR3+1304
	.fnend
	.size	usb30en_store, .-usb30en_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_enable, %function
android_enable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r8, [r0, #8]
	ldr	r5, [r0, #20]
	cmp	r5, #0
	beq	.L14075
	sub	r5, r5, #1
	mov	r9, r0
	cmp	r5, #0
	str	r5, [r0, #20]
	bne	.L14076
	mov	r6, r9
	ldr	r4, [r6, #508]!
	cmp	r6, r4
	sub	r4, r4, #120
	beq	.L14069
	movw	r7, #:lower16:android_bind_config
	movt	r7, #:upper16:android_bind_config
.L14071:
	mov	r2, r7
	mov	r1, r4
	mov	r0, r8
	bl	usb_add_config
	subs	r5, r0, #0
	blt	.L14077
	ldr	r4, [r4, #120]
	cmp	r6, r4
	sub	r4, r4, #120
	bne	.L14071
.L14069:
	mov	r0, r9
	bl	schedule_usb_gadget_connect_work
.L14066:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L14076:
	mov	r5, #0
	b	.L14066
.L14075:
	movw	r0, #:lower16:.LC935
	mov	r1, #500
	movt	r0, #:upper16:.LC935
	bl	warn_slowpath_null
	b	.L14066
.L14077:
	ldr	r2, .L14078
	movw	r0, #:lower16:.LC936
	mov	r3, r5
	movt	r0, #:upper16:.LC936
	mov	r1, r2
	bl	printk
	b	.L14066
.L14079:
	.align	2
.L14078:
	.word	.LANCHOR3+1320
	.fnend
	.size	android_enable, .-android_enable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	enable_store, %function
enable_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r3
	mov	r7, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	bl	dev_get_drvdata
	ldr	r4, [r0, #8]
	mov	r3, #0
	str	r3, [sp, #28]
	cmp	r4, r3
	mvneq	r4, #18
	bne	.L14129
.L14080:
	mov	r0, r4
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14129:
	add	r3, r0, #24
	mov	r5, r0
	mov	r0, r3
	str	r3, [sp, #8]
	bl	mutex_lock
	movw	r1, #:lower16:.LC297
	add	r2, sp, #28
	movt	r1, #:upper16:.LC297
	mov	r0, r7
	bl	sscanf
	movw	r0, #:lower16:.LC939
	ldrb	r2, [r5, #16]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC939
	ldr	r1, [sp, #28]
	bl	printk
	ldr	r3, [sp, #28]
	cmp	r3, #0
	beq	.L14082
	ldrb	r3, [r5, #16]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L14130
	ldr	r1, .L14137
	ldr	r0, .L14137+4
	bl	___ratelimit
	cmp	r0, #0
	bne	.L14131
.L14098:
	ldr	r0, [sp, #8]
	mov	r4, r6
	bl	mutex_unlock
	b	.L14080
.L14082:
	ldrb	r1, [r5, #16]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L14132
	ldr	r0, [r4]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L14105
	blx	r3
.L14105:
	mov	r3, #0
	strb	r3, [r5, #16]
	b	.L14098
.L14132:
	mov	r0, r5
	mov	r9, r5
	bl	android_disable
	ldr	r7, [r9, #508]!
	sub	r7, r7, #120
.L14100:
	add	r3, r7, #120
	cmp	r3, r9
	beq	.L14105
	mov	r8, r7
	ldr	r4, [r8, #112]!
	cmp	r8, r4
	sub	r4, r4, #4
	beq	.L14101
.L14103:
	ldr	r0, [r4]
	ldr	r3, [r0, #36]
	cmp	r3, #0
	beq	.L14102
	blx	r3
.L14102:
	ldr	r4, [r4, #4]
	cmp	r8, r4
	sub	r4, r4, #4
	bne	.L14103
.L14101:
	ldr	r7, [r7, #120]
	sub	r7, r7, #120
	b	.L14100
.L14131:
	ldrb	ip, [r5, #16]	@ zero_extendqisi2
	movw	r3, #:lower16:.LC937
	movw	r2, #:lower16:.LC938
	movt	r3, #:upper16:.LC937
	movw	r0, #:lower16:.LC950
	ldr	r1, .L14137
	movt	r2, #:upper16:.LC938
	movt	r0, #:upper16:.LC950
	cmp	ip, #0
	movne	r2, r3
	bl	printk
	b	.L14098
.L14130:
	movw	r3, #:lower16:.LANCHOR1
	movw	ip, #:lower16:.LC941
	ldr	r0, .L14137+8
	movt	r3, #:upper16:.LANCHOR1
	movt	ip, #:upper16:.LC941
	ldr	r3, [r3, #3580]
	movw	r1, #:lower16:.LC534
	mov	r2, #255
	movt	r1, #:upper16:.LC534
	str	ip, [sp, #12]
	movw	r10, #:lower16:.LANCHOR0
	movt	r10, #:upper16:.LANCHOR0
	mov	r9, r5
	strb	r3, [r4, #48]
	bl	strncpy
	movw	r1, #:lower16:.LC940
	mov	r2, #255
	ldr	r0, .L14137+12
	movt	r1, #:upper16:.LC940
	bl	strncpy
	add	r3, r10, #524
	movw	r0, #:lower16:.LC942
	ldrb	r2, [r10, #528]	@ zero_extendqisi2
	ldrh	r1, [r3, #8]
	movt	r0, #:upper16:.LC942
	str	r0, [sp, #16]
	strh	r1, [r4, #25]	@ unaligned
	ldrh	r1, [r3, #10]
	strh	r1, [r4, #27]	@ unaligned
	ldrh	r3, [r3, #12]
	strb	r2, [r4, #21]
	strh	r3, [r4, #29]	@ unaligned
	ldr	r8, [r9, #508]!
	sub	r8, r8, #120
.L14084:
	add	r7, r8, #120
	cmp	r7, r9
	beq	.L14133
	mov	fp, r8
	ldr	r7, [fp, #112]!
	sub	r7, r7, #4
.L14085:
	add	r3, r7, #4
	cmp	r3, fp
	bne	.L14090
	ldr	r8, [r8, #120]
	sub	r8, r8, #120
	b	.L14084
.L14133:
	movw	r1, #:lower16:.LC534
	mov	r2, #255
	ldr	r0, .L14137+8
	movt	r1, #:upper16:.LC534
	bl	strncpy
	movw	r1, #:lower16:.LC940
	mov	r2, #255
	ldr	r0, .L14137+12
	movt	r1, #:upper16:.LC940
	bl	strncpy
	ldrh	ip, [r4, #29]	@ unaligned
	movw	r0, #:lower16:.LC946
	ldrb	lr, [r10, #529]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC946
	ldrb	r1, [r10, #530]	@ zero_extendqisi2
	ldrh	r3, [r4, #27]	@ unaligned
	ldrh	r2, [r4, #25]	@ unaligned
	strb	lr, [r4, #22]
	strb	r1, [r4, #23]
	ldr	r1, .L14137
	str	ip, [sp]
	bl	printk
	movw	r0, #:lower16:.LC947
	ldrb	r3, [r4, #23]	@ zero_extendqisi2
	ldrb	r2, [r4, #22]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC947
	ldrb	r1, [r4, #21]	@ zero_extendqisi2
	bl	printk
	movw	r0, #:lower16:.LC948
	ldr	r1, .L14137
	movt	r0, #:upper16:.LC948
	bl	printk
	ldr	r4, [r5, #508]
	sub	r4, r4, #120
.L14092:
	add	r3, r4, #120
	cmp	r7, r3
	beq	.L14134
	mov	r9, r4
	ldr	r8, [r9, #112]!
	sub	r8, r8, #4
.L14093:
	add	r3, r8, #4
	cmp	r3, r9
	beq	.L14135
	ldr	r0, [r8]
	ldr	r3, [r0, #32]
	cmp	r3, #0
	beq	.L14094
	blx	r3
.L14094:
	ldr	r8, [r8, #4]
	sub	r8, r8, #4
	b	.L14093
.L14135:
	ldr	r4, [r4, #120]
	sub	r4, r4, #120
	b	.L14092
.L14134:
	mov	r0, r5
	mov	r4, r6
	bl	android_enable
	cmp	r0, #0
	movge	r3, #1
	strbge	r3, [r5, #16]
	bge	.L14098
	ldr	r2, .L14137
	movw	r0, #:lower16:.LC949
	movt	r0, #:upper16:.LC949
	mov	r1, r2
	bl	printk
	mov	r3, #0
	ldr	r0, [sp, #8]
	strb	r3, [r5, #16]
	strb	r3, [r5, #48]
	bl	mutex_unlock
	b	.L14080
.L14090:
	ldr	r3, [r7]
	ldr	r1, .L14137
	ldr	r0, [sp, #12]
	ldr	r2, [r3]
	bl	printk
	ldr	r3, [r7]
	ldr	r1, [sp, #16]
	ldr	r3, [r3]
	mov	r0, r3
	str	r3, [sp, #20]
	bl	strcmp
	ldr	r3, [sp, #20]
	subs	r2, r0, #0
	movw	r1, #:lower16:.LC641
	movt	r1, #:upper16:.LC641
	mov	r0, r3
	beq	.L14136
	bl	strcmp
	subs	r2, r0, #0
	str	r2, [sp, #20]
	bne	.L14088
	ldrh	r3, [r4, #29]	@ unaligned
	movw	r0, #:lower16:.LC945
	movt	r0, #:upper16:.LC945
	cmp	r3, #1024
	beq	.L14087
	bl	printk
	ldr	r2, [sp, #20]
	mov	r3, #8
	strb	r2, [r4, #29]
	strb	r3, [r4, #30]
.L14088:
	ldr	r7, [r7, #4]
	sub	r7, r7, #4
	b	.L14085
.L14136:
	movw	r0, #:lower16:.LC943
	str	r2, [sp, #20]
	movt	r0, #:upper16:.LC943
	bl	printk
	ldr	r2, [sp, #20]
	mov	r3, #4
	movw	r1, #:lower16:.LC641
	movt	r1, #:upper16:.LC641
	strb	r2, [r4, #29]
	strb	r3, [r4, #30]
	ldr	r3, [r7]
	ldr	r0, [r3]
	bl	strcmp
	cmp	r0, #0
	bne	.L14088
.L14087:
	movw	r0, #:lower16:.LC944
	movt	r0, #:upper16:.LC944
	bl	printk
	mov	r2, #0
	mov	r3, #12
	strb	r2, [r4, #29]
	strb	r3, [r4, #30]
	b	.L14088
.L14138:
	.align	2
.L14137:
	.word	.LANCHOR3+1336
	.word	.LANCHOR4-580
	.word	.LANCHOR1+3256
	.word	.LANCHOR1+3000
	.fnend
	.size	enable_store, .-enable_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_android_function_disable, %function
adb_android_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mov	r1, #0
	ldr	r0, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, r1
	beq	.L14141
	bx	lr
.L14141:
	b	android_enable
	.fnend
	.size	adb_android_function_disable, .-adb_android_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_open, %function
adb_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r0, .L14160
	strd	r6, [sp, #8]
	mov	r6, r1
	ldr	r1, .L14160+4
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	___ratelimit
	cmp	r0, #0
	bne	.L14158
.L14143:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #2692]
	cmp	r3, #0
	beq	.L14150
	add	r2, r3, #116
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r5, [r2]
	add	r5, r5, #1
	strex	r1, r5, [r2]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r5, #1
	bne	.L14145
	ldr	r3, [r4, #2692]
	mov	r2, #0
	str	r3, [r6, #124]
	ldrb	r1, [r3, #161]	@ zero_extendqisi2
	str	r2, [r3, #104]
	cmp	r1, r2
	bne	.L14159
.L14147:
	mov	r2, #1
	mov	r0, #0
	strb	r2, [r3, #160]
.L14142:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14159:
	movw	r1, #:lower16:.LANCHOR4
	strb	r2, [r3, #161]
	movt	r1, #:upper16:.LANCHOR4
	ldr	r7, [r1, #-2464]
	ldr	r6, [r1, #-2448]
	cmp	r6, #0
	strbeq	r5, [r7]
	streq	r6, [r7, #4]
	beq	.L14147
	add	r8, r6, #24
	mov	r0, r8
	bl	mutex_lock
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	strb	r5, [r7]
	str	r6, [r7, #4]
	cmp	r3, #0
	beq	.L14149
	mov	r0, r6
	bl	android_enable
.L14149:
	mov	r0, r8
	bl	mutex_unlock
	ldr	r3, [r4, #2692]
	b	.L14147
.L14145:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #15
	b	.L14142
.L14150:
	mvn	r0, #18
	b	.L14142
.L14158:
	movw	r0, #:lower16:.LC951
	movt	r0, #:upper16:.LC951
	bl	printk
	b	.L14143
.L14161:
	.align	2
.L14160:
	.word	.LANCHOR4-556
	.word	.LANCHOR3+1352
	.fnend
	.size	adb_open, .-adb_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_disable, %function
ffs_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mov	r1, #0
	ldr	r0, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, r1
	beq	.L14164
	bx	lr
.L14164:
	b	android_enable
	.fnend
	.size	ffs_function_disable, .-ffs_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_write, %function
ffs_ep0_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #36
	sub	sp, sp, #36
	add	r7, r4, #96
	.syntax divided
@ 193 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
.L14166:
	.syntax divided
@ 170 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	ip, [r7]
	mov	r8, #0
	teq	ip, #2
	strexeq r8, r3, [r7]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r8, #0
	bne	.L14166
	.syntax divided
@ 195 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	ip, #2
	beq	.L14224
	mov	r9, r1
	ldr	r1, [r0, #32]
	add	r6, r4, #4
	mov	r0, r6
	str	r2, [sp, #12]
	and	r1, r1, #2048
	bl	ffs_mutex_lock
	subs	r5, r0, #0
	blt	.L14165
	ldr	r3, [r4, #92]
	cmp	r3, #1
	bls	.L14169
	cmp	r3, #2
	bne	.L14271
	add	fp, r4, #116
	mov	r0, fp
	bl	_raw_spin_lock_irq
	.syntax divided
@ 193 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
.L14214:
	.syntax divided
@ 170 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r0, [r7]
	mov	r10, #0
	teq	r0, #2
	strexeq r10, r8, [r7]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r10, #0
	bne	.L14214
	.syntax divided
@ 195 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r0, #0
	beq	.L14232
	cmp	r0, #2
	moveq	r8, r10
	mvneq	r5, #42
	beq	.L14216
	ldrsb	r3, [r4, #108]
	cmp	r3, #0
	blt	.L14218
	mov	r0, fp
	bl	_raw_spin_unlock_irq
	ldrh	r3, [r4, #106]
	cmp	r3, #0
	mvneq	r5, #2
	beq	.L14168
	ldr	r3, [r4]
	mov	r1, #1
	mvn	r5, #50
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	str	r10, [r4, #96]
	b	.L14168
.L14199:
	ldr	r3, [sp, #16]
	add	r10, r10, #1
	add	r5, r5, #56
	cmp	r3, r10
	bne	.L14200
.L14198:
	mov	r3, #2
	mov	r0, r6
	str	r3, [r4, #92]
	str	r8, [r4, #208]
	bl	mutex_unlock
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	ldr	r8, [r3, #-2412]
	ldr	r5, [r3, #-2396]
	cmp	r5, #0
	mvneq	r5, #18
	beq	.L14202
	add	r6, r5, #24
	mov	r0, r6
	bl	mutex_lock
	ldr	r3, [r4, #92]
	cmp	r3, #2
	beq	.L14203
.L14204:
	movw	r0, #:lower16:.LC9
	movw	r1, #1444
	movt	r0, #:upper16:.LC9
	mvn	r5, #76
	bl	warn_slowpath_null
	mov	r0, r6
	bl	mutex_unlock
.L14202:
	mov	r3, #3
	str	r3, [r4, #92]
.L14165:
	mov	r0, r5
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14271:
	mvn	r5, #76
.L14168:
	mov	r0, r6
	bl	mutex_unlock
	b	.L14165
.L14169:
	ldr	r3, [sp, #12]
	cmp	r3, #15
	bls	.L14226
	mov	r0, r9
	mov	r1, r3
	bl	ffs_prepare_buffer
	cmn	r0, #4096
	mov	r9, r0
	movhi	r5, r0
	bhi	.L14168
	ldr	r3, [r4, #92]
	cmp	r3, #0
	bne	.L14172
	movw	r0, #:lower16:.LC952
	movt	r0, #:upper16:.LC952
	bl	printk
	ldr	r3, [r9]	@ unaligned
	cmp	r3, #1
	bne	.L14187
	ldr	r3, [r9, #4]	@ unaligned
	ldr	r2, [sp, #12]
	cmp	r2, r3
	bne	.L14187
	ldr	fp, [r9, #8]	@ unaligned
	add	r8, r9, #16
	sub	r7, r2, #16
	ldr	r10, [r9, #12]	@ unaligned
	cmp	fp, #0
	beq	.L14227
	movw	r3, #:lower16:__ffs_data_do_entity
	mov	r2, r7
	str	r4, [sp]
	movt	r3, #:upper16:__ffs_data_do_entity
	mov	r1, r8
	mov	r0, fp
	bl	ffs_do_descs
	subs	r5, r0, #0
	blt	.L14176
	add	r8, r8, r5
	sub	r7, r7, r5
.L14175:
	cmp	r10, #0
	beq	.L14177
	movw	r3, #:lower16:__ffs_data_do_entity
	mov	r2, r7
	str	r4, [sp]
	movt	r3, #:upper16:__ffs_data_do_entity
	mov	r1, r8
	mov	r0, r10
	bl	ffs_do_descs
	subs	r2, r0, #0
	str	r2, [sp, #16]
	blt	.L14228
	add	r3, r2, #8
	cmp	r7, r3
	bcc	.L14179
.L14178:
	ldr	r1, [r8, r2]	@ unaligned
	movw	r3, #56924
	movt	r3, 85
	cmp	r1, r3
	beq	.L14272
.L14187:
	mov	r0, r9
	mvn	r5, #21
	bl	kfree
	b	.L14168
.L14172:
	movw	r0, #:lower16:.LC953
	movt	r0, #:upper16:.LC953
	bl	printk
	ldr	r3, [r9]	@ unaligned
	cmp	r3, #2
	bne	.L14187
	ldr	r3, [r9, #4]	@ unaligned
	ldr	r2, [sp, #12]
	cmp	r2, r3
	bne	.L14187
	ldr	r3, [r9, #12]	@ unaligned
	ldr	r10, [r9, #8]	@ unaligned
	str	r3, [sp, #16]
	clz	r3, r3
	clz	r2, r10
	lsr	r3, r3, #5
	lsr	r2, r2, #5
	cmp	r2, r3
	bne	.L14187
	ldrh	r3, [r4, #176]
	cmp	r10, r3
	str	r3, [sp, #20]
	bcc	.L14187
	cmp	r3, #0
	beq	.L14273
	ldr	r0, [sp, #16]
	mov	r1, #208
	ldr	r3, [sp, #20]
	mla	r2, r3, r0, r0
	add	r3, r0, #1
	add	r8, r3, r0, lsl #1
	lsl	r5, r3, #2
	add	r2, r2, r0
	lsl	r8, r8, #2
	add	r3, r3, r2, lsl #1
	lsl	r0, r3, #2
	bl	__kmalloc
	subs	r3, r0, #0
	str	r3, [sp, #24]
	beq	.L14274
	ldr	r3, [sp, #16]
	ldr	r1, [sp, #24]
	add	r0, r1, r5
	mov	r2, r0
.L14191:
	subs	r3, r3, #1
	str	r2, [r1], #4
	add	r2, r2, #8
	bne	.L14191
	ldr	r2, [sp, #12]
	str	r3, [r0, #-4]
	add	r7, r9, #16
	ldr	r3, [sp, #24]
	sub	r5, r2, #16
	cmp	r5, #2
	add	r8, r3, r8
	bls	.L14192
	str	r4, [sp, #28]
	add	fp, r0, #8
	mov	r4, r10
.L14193:
	ldrb	r0, [r7, #1]	@ zero_extendqisi2
	sub	r5, r5, #2
	ldrb	r1, [r7], #2	@ zero_extendqisi2
	str	r8, [fp, #-4]
	ldr	r10, [sp, #20]
	orr	r1, r1, r0, lsl #8
	strh	r1, [fp, #-8]	@ movhi
	b	.L14195
.L14276:
	cmp	r10, #0
	add	r5, r5, r0
	beq	.L14194
	str	r7, [r8, #4]
	sub	r10, r10, #1
	add	r8, r8, #8
.L14194:
	subs	r4, r4, #1
	add	r7, r7, r3
	beq	.L14275
.L14195:
	mov	r1, r5
	mov	r0, r7
	bl	strnlen
	cmp	r5, r0
	add	r3, r0, #1
	mvn	r0, r0
	bne	.L14276
.L14192:
	ldr	r0, [sp, #24]
	bl	kfree
	b	.L14187
.L14232:
	mov	r8, r0
	mvn	r5, #2
.L14216:
	mov	r0, fp
	bl	_raw_spin_unlock_irq
.L14222:
	mov	r0, r8
	bl	kfree
	b	.L14168
.L14272:
	add	r1, r8, r2
	orr	r3, r10, fp
	ldr	r1, [r1, #4]	@ unaligned
	orrs	r3, r3, r1
	str	r1, [sp, #20]
	beq	.L14187
	ldr	r0, [sp, #20]
	sub	r7, r7, #8
	sub	r7, r7, r2
	cmp	r0, #0
	beq	.L14230
	add	r2, r2, #8
	movw	r3, #:lower16:__ffs_data_do_entity
	str	r4, [sp]
	add	r1, r8, r2
	movt	r3, #:upper16:__ffs_data_do_entity
	mov	r2, r7
	bl	ffs_do_descs
	subs	r3, r0, #0
	blt	.L14231
.L14184:
	cmp	r3, r7
	bne	.L14187
	ldr	r2, [sp, #16]
	str	r9, [r4, #144]
	ldr	r1, [sp, #20]
	str	r3, [r4, #160]
	str	fp, [r4, #164]
	str	r10, [r4, #168]
	add	r5, r5, r2
	cmp	r1, #0
	add	r2, r5, r3
	mov	r3, #1
	str	r5, [r4, #152]
	addne	r5, r5, #24
	str	r3, [r4, #92]
	strne	r5, [r4, #156]
	ldr	r5, [sp, #12]
	str	r2, [r4, #148]
	str	r1, [r4, #172]
	b	.L14168
.L14274:
	mov	r0, r9
	mvn	r5, #11
	bl	kfree
	b	.L14168
.L14231:
	mov	r5, r3
.L14176:
	mov	r0, r9
	bl	kfree
	b	.L14168
.L14218:
	ldrh	r5, [r4, #114]
	mov	r0, fp
	ldr	r3, [sp, #12]
	cmp	r5, r3
	movcs	r5, r3
	bl	_raw_spin_unlock_irq
	mov	r1, r5
	mov	r0, r9
	bl	ffs_prepare_buffer
	cmn	r0, #4096
	mov	r8, r0
	movhi	r5, r0
	bhi	.L14168
	mov	r0, fp
	bl	_raw_spin_lock_irq
	.syntax divided
@ 193 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
.L14220:
	.syntax divided
@ 170 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r2, [r7]
	mov	r3, #0
	teq	r2, #2
	strexeq r3, r10, [r7]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L14220
	.syntax divided
@ 195 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #2
	mvneq	r5, #42
	beq	.L14216
	mov	r2, r5
	mov	r0, r4
	mov	r1, r8
	bl	__ffs_ep0_queue_wait
	mov	r5, r0
	b	.L14222
.L14226:
	mvn	r5, #21
	b	.L14168
.L14275:
	ldr	r3, [sp, #16]
	strb	r4, [r8]
	add	r8, r8, #8
	str	r4, [r8, #-4]
	subs	r3, r3, #1
	str	r3, [sp, #16]
	beq	.L14277
	cmp	r5, #2
	add	fp, fp, #8
	bhi	.L14193
	b	.L14192
.L14273:
	mov	r0, r9
	bl	kfree
.L14189:
	ldrh	r7, [r4, #180]
	movw	r1, #32976
	rsb	r0, r7, r7, lsl #3
	lsl	r0, r0, #3
	bl	__kmalloc
	subs	r8, r0, #0
	beq	.L14197
	cmp	r7, #0
	beq	.L14198
	movw	r9, #:lower16:.LC954
	movw	fp, #:lower16:.LC955
	add	r3, r7, #1
	movt	r9, #:upper16:.LC954
	movt	fp, #:upper16:.LC955
	add	r7, r8, #48
	mov	r5, r8
	mov	r10, #1
	str	r3, [sp, #16]
.L14200:
	ldr	r2, .L14280
	mov	r1, r9
	mov	r0, r5
	str	r4, [r5, #36]
	bl	__mutex_init
	ldr	r2, .L14280
	mov	r1, fp
	add	r0, r5, #20
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC956
	mov	r2, r10
	movt	r1, #:upper16:.LC956
	mov	r0, r7
	bl	sprintf
	add	ip, r5, #44
	ldr	r0, [r4, #192]
	mov	r2, r5
	ldr	r3, .L14280+4
	mov	r1, r7
	str	ip, [sp]
	bl	ffs_sb_create_file
	cmp	r0, #0
	bne	.L14199
	sub	r1, r10, #1
	mov	r0, r8
	bl	ffs_epfiles_destroy
.L14197:
	mov	r3, #3
	mvn	r5, #11
	str	r3, [r4, #92]
	b	.L14168
.L14224:
	mvn	r5, #42
	b	.L14165
.L14177:
	cmp	r7, #7
	bhi	.L14278
	cmp	fp, #0
	mvneq	r5, #21
	beq	.L14176
	mov	r2, r10
	str	r10, [sp, #16]
.L14179:
	mov	r3, #0
	sub	r7, r7, r2
	str	r3, [sp, #20]
	b	.L14184
.L14203:
	add	r7, r4, #128
	mov	r0, #1
	ldr	r9, [r5, #8]
	mov	r1, r7
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L14204
	ldrh	r3, [r4, #176]
	ldrb	r10, [r9, #48]	@ zero_extendqisi2
	cmp	r3, #254
	bhi	.L14206
	add	r3, r3, r10
	cmp	r3, #254
	bhi	.L14206
	ldr	r2, [r9]
	strb	r3, [r9, #48]
	mov	r1, #208
	ldr	r0, [r2, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r4, #28]
	beq	.L14207
	movw	r3, #:lower16:ffs_ep0_complete
	movt	r3, #:upper16:ffs_ep0_complete
	str	r3, [r0, #28]
	ldr	r3, [r4, #28]
	str	r4, [r3, #32]
	ldr	r0, [r4, #188]
	cmp	r0, #0
	beq	.L14208
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L14208
	add	ip, r10, #1
.L14211:
	ldr	r3, [r3, #4]
	ldr	r2, [r3, #4]
	cmp	r2, #0
	beq	.L14209
	add	r3, r3, #8
	mov	r2, ip
.L14210:
	strb	r2, [r3, #-8]
	add	r3, r3, #8
	ldr	r1, [r3, #-4]
	add	r2, r2, #1
	cmp	r1, #0
	bne	.L14210
.L14209:
	ldr	r3, [r0, #4]!
	cmp	r3, #0
	bne	.L14211
.L14208:
	ldr	r2, [r9]
	mov	r3, r4
	str	r2, [r3], #84
	.syntax divided
@ 45 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldrb	r3, [r8, #1]	@ zero_extendqisi2
	mov	r2, #1
	strb	r2, [r8]
	strd	r4, [r8, #4]
	cmp	r3, #0
	bne	.L14279
.L14213:
	mov	r0, r6
	ldr	r5, [sp, #12]
	bl	mutex_unlock
	mov	r1, r7
	mov	r0, #0
	bl	_set_bit
	b	.L14165
.L14279:
	mov	r0, r5
	bl	android_enable
	b	.L14213
.L14227:
	mov	r5, #0
	b	.L14175
.L14228:
	ldr	r5, [sp, #16]
	b	.L14176
.L14207:
	mov	r0, r6
	mvn	r5, #11
	bl	mutex_unlock
	b	.L14202
.L14206:
	mov	r0, r6
	mvn	r5, #18
	bl	mutex_unlock
	b	.L14202
.L14230:
	ldr	r3, [sp, #20]
	b	.L14184
.L14277:
	cmp	r5, #0
	ldr	r4, [sp, #28]
	bne	.L14192
	ldr	r3, [sp, #24]
	str	r9, [r4, #184]
	str	r3, [r4, #188]
	b	.L14189
.L14278:
	mov	r2, r10
	str	r10, [sp, #16]
	b	.L14178
.L14281:
	.align	2
.L14280:
	.word	.LANCHOR1+4080
	.word	.LANCHOR3+1364
	.fnend
	.size	ffs_ep0_write, .-ffs_ep0_write
	.global	terminal_mode_vendor_id
	.global	terminal_mode_version
	.global	diag_dload
	.global	conn_gadget_function
	.global	usb30en
	.global	speaker_output_terminal_desc
	.global	speaker_input_terminal_desc
	.global	uac1_ac_header_desc
	.global	uac1_ac_interface_desc
	.global	_rndis_qc
	.global	bam2bam_data_ports
	.global	rndis_ul_max_xfer_size_rcvd
	.global	rndis_ul_max_pkt_per_xfer_rcvd
	.global	mtp_ext_config_desc
	.global	mtp_tx_reqs
	.global	mtp_tx_req_len
	.global	mtp_rx_req_len
	.global	ghsuart_data_stats_ops
	.global	ghsuart_data_tx_intr_thld
	.global	ghsic_stats_ops
	.global	gdata_timestamp_ops
	.global	ghsic_data_tx_intr_thld
	.global	gctrl_dfile
	.global	gctrl_dent
	.global	gctrl_stats_ops
	.global	smd_ctrl_dfile
	.global	smd_ctrl_dent
	.global	gsmd_ctrl_stats_ops
	.global	online_clients
	.global	gbam_dent
	.global	gbam_stats_ops
	.global	bam2bam_ports
	.global	smd_pi
	.global	sport_info
	.global	gs_dent
	.global	debug_adb_ops
	.global	debug_rst_ops
	.global	dent_rmnet_mux
	.global	rmnet_mux_svlte_debug_stats_ops
	.global	debug_rmnet_sdio_stats_ops
	.global	sdio_rx_fctrl_dis_thld
	.global	sdio_rx_fctrl_en_thld
	.global	sdio_tx_pkt_drop_thld
	.global	dent_smd
	.global	rmnet_smd_debug_stats_ops
	.global	dent_diag
	.section	.rodata
	.align	3
	.set	.LANCHOR2,. + 0
	.set	.LANCHOR3,. + 8184
	.type	__func__.38444, %object
	.size	__func__.38444, 24
__func__.38444:
	.ascii	"usb_rmnet_mux_ctrl_open\000"
	.type	__func__.48419, %object
	.size	__func__.48419, 14
__func__.48419:
	.ascii	"gsmd_start_rx\000"
	.space	2
	.type	__func__.49100, %object
	.size	__func__.49100, 21
__func__.49100:
	.ascii	"gbam_stop_endless_rx\000"
	.space	3
	.type	__func__.49106, %object
	.size	__func__.49106, 21
__func__.49106:
	.ascii	"gbam_stop_endless_tx\000"
	.space	3
	.type	__func__.49088, %object
	.size	__func__.49088, 22
__func__.49088:
	.ascii	"gbam_start_endless_rx\000"
	.space	2
	.type	__func__.49094, %object
	.size	__func__.49094, 22
__func__.49094:
	.ascii	"gbam_start_endless_tx\000"
	.space	2
	.type	__func__.50708, %object
	.size	__func__.50708, 24
__func__.50708:
	.ascii	"ghsic_send_cpkt_tomodem\000"
	.type	__func__.56674, %object
	.size	__func__.56674, 13
__func__.56674:
	.ascii	"ecm_qc_setup\000"
	.space	3
	.type	__func__.56991, %object
	.size	__func__.56991, 21
__func__.56991:
	.ascii	"mbim_ep0out_complete\000"
	.space	3
	.type	__func__.57252, %object
	.size	__func__.57252, 25
__func__.57252:
	.ascii	"bam_data_stop_endless_rx\000"
	.space	3
	.type	__func__.57258, %object
	.size	__func__.57258, 25
__func__.57258:
	.ascii	"bam_data_stop_endless_tx\000"
	.space	3
	.type	__func__.57240, %object
	.size	__func__.57240, 26
__func__.57240:
	.ascii	"bam_data_start_endless_rx\000"
	.space	2
	.type	__func__.57246, %object
	.size	__func__.57246, 26
__func__.57246:
	.ascii	"bam_data_start_endless_tx\000"
	.space	2
	.type	__func__.57636, %object
	.size	__func__.57636, 27
__func__.57636:
	.ascii	"rndis_qc_response_complete\000"
	.space	1
	.type	__func__.57628, %object
	.size	__func__.57628, 28
__func__.57628:
	.ascii	"rndis_qc_response_available\000"
	.type	__func__.61563, %object
	.size	__func__.61563, 21
__func__.61563:
	.ascii	"f_audio_buffer_alloc\000"
	.space	3
	.type	__func__.61733, %object
	.size	__func__.61733, 23
__func__.61733:
	.ascii	"audio_set_endpoint_req\000"
	.space	1
	.type	__func__.61809, %object
	.size	__func__.61809, 14
__func__.61809:
	.ascii	"f_audio_setup\000"
	.space	2
	.type	__func__.62871, %object
	.size	__func__.62871, 10
__func__.62871:
	.ascii	"ncm_setup\000"
	.space	2
	.type	__func__.62827, %object
	.size	__func__.62827, 22
__func__.62827:
	.ascii	"ncm_setdgram_complete\000"
	.space	2
	.type	__func__.63983, %object
	.size	__func__.63983, 24
__func__.63983:
	.ascii	"android_enable_function\000"
	.type	__func__.63823, %object
	.size	__func__.63823, 23
__func__.63823:
	.ascii	"sua_version_info_store\000"
	.space	1
	.type	__func__.57767, %object
	.size	__func__.57767, 21
__func__.57767:
	.ascii	"rndis_qc_release_dev\000"
	.space	3
	.type	__func__.57757, %object
	.size	__func__.57757, 18
__func__.57757:
	.ascii	"rndis_qc_open_dev\000"
	.space	2
	.type	__func__.38871, %object
	.size	__func__.38871, 23
__func__.38871:
	.ascii	"frmnet_notify_complete\000"
	.space	1
	.type	__func__.57042, %object
	.size	__func__.57042, 17
__func__.57042:
	.ascii	"mbim_ctrlrequest\000"
	.space	3
	.type	__func__.57154, %object
	.size	__func__.57154, 13
__func__.57154:
	.ascii	"mbim_release\000"
	.space	3
	.type	__func__.57146, %object
	.size	__func__.57146, 10
__func__.57146:
	.ascii	"mbim_open\000"
	.space	2
	.type	__func__.48156, %object
	.size	__func__.48156, 14
__func__.48156:
	.ascii	"gsdio_tx_pull\000"
	.space	2
	.type	__func__.48145, %object
	.size	__func__.48145, 19
__func__.48145:
	.ascii	"gsdio_read_pending\000"
	.space	1
	.type	__func__.48223, %object
	.size	__func__.48223, 16
__func__.48223:
	.ascii	"gsdio_open_work\000"
	.type	__func__.45617, %object
	.size	__func__.45617, 19
__func__.45617:
	.ascii	"start_out_transfer\000"
	.space	1
	.type	__func__.45612, %object
	.size	__func__.45612, 18
__func__.45612:
	.ascii	"start_in_transfer\000"
	.space	2
	.type	__func__.63813, %object
	.size	__func__.63813, 22
__func__.63813:
	.ascii	"sua_version_info_show\000"
	.space	2
	.type	__func__.25452, %object
	.size	__func__.25452, 21
__func__.25452:
	.ascii	"composite_disconnect\000"
	.space	3
	.type	__func__.51695, %object
	.size	__func__.51695, 26
__func__.51695:
	.ascii	"ghsuart_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.48131, %object
	.size	__func__.48131, 21
__func__.48131:
	.ascii	"gsdio_write_complete\000"
	.space	3
	.type	__func__.48199, %object
	.size	__func__.48199, 24
__func__.48199:
	.ascii	"gsdio_ctrl_notify_modem\000"
	.type	__func__.48495, %object
	.size	__func__.48495, 20
__func__.48495:
	.ascii	"gsmd_write_complete\000"
	.type	__func__.48489, %object
	.size	__func__.48489, 19
__func__.48489:
	.ascii	"gsmd_read_complete\000"
	.space	1
	.type	__func__.52202, %object
	.size	__func__.52202, 19
__func__.52202:
	.ascii	"ghsuart_data_probe\000"
	.space	1
	.type	__func__.57067, %object
	.size	__func__.57067, 13
__func__.57067:
	.ascii	"mbim_suspend\000"
	.space	3
	.type	__func__.57071, %object
	.size	__func__.57071, 12
__func__.57071:
	.ascii	"mbim_resume\000"
	.type	CSWTCH.1853, %object
	.size	CSWTCH.1853, 40
CSWTCH.1853:
	.word	.LC460
	.word	.LC461
	.word	.LC462
	.word	.LC463
	.word	.LC464
	.word	.LC465
	.word	.LC466
	.word	.LC467
	.word	.LC468
	.word	.LC969
	.type	__func__.49497, %object
	.size	__func__.49497, 24
__func__.49497:
	.ascii	"grmnet_ctrl_smd_write_w\000"
	.type	__func__.48474, %object
	.size	__func__.48474, 13
__func__.48474:
	.ascii	"gsmd_tx_pull\000"
	.space	3
	.type	__func__.49469, %object
	.size	__func__.49469, 23
__func__.49469:
	.ascii	"grmnet_ctrl_smd_read_w\000"
	.space	1
	.type	__func__.56940, %object
	.size	__func__.56940, 26
__func__.56940:
	.ascii	"mbim_reset_function_queue\000"
	.space	2
	.type	__func__.57000, %object
	.size	__func__.57000, 19
__func__.57000:
	.ascii	"fmbim_cmd_complete\000"
	.space	1
	.type	__func__.54103, %object
	.size	__func__.54103, 16
__func__.54103:
	.ascii	"mtp_ctrlrequest\000"
	.type	__func__.38172, %object
	.size	__func__.38172, 27
__func__.38172:
	.ascii	"rmnet_mux_command_complete\000"
	.space	1
	.type	gsmd_ctrl_stats_ops, %object
	.size	gsmd_ctrl_stats_ops, 108
gsmd_ctrl_stats_ops:
	.space	8
	.word	gsmd_ctrl_read_stats
	.word	gsmd_ctrl_reset_stats
	.space	92
	.type	gctrl_stats_ops, %object
	.size	gctrl_stats_ops, 108
gctrl_stats_ops:
	.space	8
	.word	gctrl_read_stats
	.word	gctrl_reset_stats
	.space	92
	.type	ghsic_stats_ops, %object
	.size	ghsic_stats_ops, 108
ghsic_stats_ops:
	.space	8
	.word	ghsic_data_read_stats
	.word	ghsic_data_reset_stats
	.space	92
	.type	gdata_timestamp_ops, %object
	.size	gdata_timestamp_ops, 108
gdata_timestamp_ops:
	.space	8
	.word	show_timestamp
	.space	96
	.type	ghsuart_ctrl_stats_ops, %object
	.size	ghsuart_ctrl_stats_ops, 108
ghsuart_ctrl_stats_ops:
	.space	8
	.word	ghsuart_ctrl_read_stats
	.word	ghsuart_ctrl_reset_stats
	.space	92
	.type	ghsuart_data_stats_ops, %object
	.size	ghsuart_data_stats_ops, 108
ghsuart_data_stats_ops:
	.space	8
	.word	ghsuart_data_read_stats
	.word	ghsuart_data_reset_stats
	.space	92
	.type	debug_fdiag_ops, %object
	.size	debug_fdiag_ops, 108
debug_fdiag_ops:
	.space	8
	.word	debug_read_stats
	.word	debug_reset_stats
	.space	28
	.word	debug_open
	.space	60
	.type	__func__.37365, %object
	.size	__func__.37365, 24
__func__.37365:
	.ascii	"rmnet_sdio_data_rx_work\000"
	.type	__func__.48967, %object
	.size	__func__.48967, 23
__func__.48967:
	.ascii	"gbam_write_data_tohost\000"
	.space	1
	.type	__func__.49034, %object
	.size	__func__.49034, 19
__func__.49034:
	.ascii	"gbam_epin_complete\000"
	.space	1
	.type	__func__.49566, %object
	.size	__func__.49566, 26
__func__.49566:
	.ascii	"grmnet_ctrl_smd_connect_w\000"
	.space	2
	.type	__func__.49080, %object
	.size	__func__.49080, 14
__func__.49080:
	.ascii	"gbam_start_rx\000"
	.space	2
	.type	__func__.49049, %object
	.size	__func__.49049, 20
__func__.49049:
	.ascii	"gbam_epout_complete\000"
	.type	__func__.62474, %object
	.size	__func__.62474, 37
__func__.62474:
	.ascii	"conn_gadget_bind_status_copy_to_user\000"
	.space	3
	.type	__func__.57783, %object
	.size	__func__.57783, 15
__func__.57783:
	.ascii	"rndis_qc_ioctl\000"
	.space	1
	.type	__func__.57162, %object
	.size	__func__.57162, 11
__func__.57162:
	.ascii	"mbim_ioctl\000"
	.space	1
	.type	__func__.38467, %object
	.size	__func__.38467, 24
__func__.38467:
	.ascii	"usb_rmnet_mux_ctrl_read\000"
	.type	__func__.62485, %object
	.size	__func__.62485, 18
__func__.62485:
	.ascii	"conn_gadget_ioctl\000"
	.space	2
	.type	__func__.38490, %object
	.size	__func__.38490, 25
__func__.38490:
	.ascii	"usb_rmnet_mux_ctrl_write\000"
	.space	3
	.type	audio_hw_info, %object
	.size	audio_hw_info, 64
audio_hw_info:
	.word	65811
	.space	4
	.word	4
	.word	0
	.space	4
	.word	44100
	.word	44100
	.word	2
	.word	2
	.word	1048576
	.word	64
	.word	524288
	.word	2
	.word	1024
	.space	8
	.type	__func__.55378, %object
	.size	__func__.55378, 16
__func__.55378:
	.ascii	"acc_ctrlrequest\000"
	.type	__func__.48441, %object
	.size	__func__.48441, 13
__func__.48441:
	.ascii	"gsmd_rx_push\000"
	.space	3
	.type	__func__.64176, %object
	.size	__func__.64176, 11
__func__.64176:
	.ascii	"state_show\000"
	.space	1
	.type	__func__.64091, %object
	.size	__func__.64091, 12
__func__.64091:
	.ascii	"enable_show\000"
	.type	__func__.48246, %object
	.size	__func__.48246, 15
__func__.48246:
	.ascii	"gsdio_ch_probe\000"
	.space	1
	.type	__func__.50794, %object
	.size	__func__.50794, 18
__func__.50794:
	.ascii	"ghsic_ctrl_remove\000"
	.space	2
	.type	__func__.50782, %object
	.size	__func__.50782, 17
__func__.50782:
	.ascii	"ghsic_ctrl_probe\000"
	.space	3
	.type	__func__.51293, %object
	.size	__func__.51293, 17
__func__.51293:
	.ascii	"ghsic_data_probe\000"
	.space	3
	.type	__func__.48557, %object
	.size	__func__.48557, 18
__func__.48557:
	.ascii	"gsmd_notify_modem\000"
	.space	2
	.type	__func__.49197, %object
	.size	__func__.49197, 22
__func__.49197:
	.ascii	"gbam2bam_connect_work\000"
	.space	2
	.type	__func__.57287, %object
	.size	__func__.57287, 26
__func__.57287:
	.ascii	"bam2bam_data_connect_work\000"
	.space	2
	.type	__func__.49233, %object
	.size	__func__.49233, 19
__func__.49233:
	.ascii	"gbam_peer_reset_cb\000"
	.space	1
	.type	__func__.57265, %object
	.size	__func__.57265, 23
__func__.57265:
	.ascii	"bam_data_peer_reset_cb\000"
	.space	1
	.type	__func__.57798, %object
	.size	__func__.57798, 14
__func__.57798:
	.ascii	"rndis_qc_init\000"
	.space	2
	.type	__func__.38511, %object
	.size	__func__.38511, 27
__func__.38511:
	.ascii	"rmnet_mux_ctrl_device_init\000"
	.space	1
	.type	rmnet_mux_svlte_debug_stats_ops, %object
	.size	rmnet_mux_svlte_debug_stats_ops, 108
rmnet_mux_svlte_debug_stats_ops:
	.space	8
	.word	rmnet_mux_read_stats
	.word	rmnet_mux_reset_stats
	.space	28
	.word	dbg_rmnet_mux_open
	.space	60
	.type	__func__.57803, %object
	.size	__func__.57803, 17
__func__.57803:
	.ascii	"rndis_qc_cleanup\000"
	.space	3
	.type	__func__.57190, %object
	.size	__func__.57190, 14
__func__.57190:
	.ascii	"fmbim_cleanup\000"
	.space	2
	.type	f_midi_cin_length, %object
	.size	f_midi_cin_length, 16
f_midi_cin_length:
	.byte	0
	.byte	0
	.byte	2
	.byte	3
	.byte	3
	.byte	1
	.byte	2
	.byte	3
	.byte	3
	.byte	3
	.byte	3
	.byte	3
	.byte	2
	.byte	2
	.byte	3
	.byte	1
	.type	__func__.58006, %object
	.size	__func__.58006, 12
__func__.58006:
	.ascii	"tx_complete\000"
	.type	__func__.56365, %object
	.size	__func__.56365, 13
__func__.56365:
	.ascii	"rndis_rm_hdr\000"
	.space	3
	.type	CSWTCH.2715, %object
	.size	CSWTCH.2715, 12
CSWTCH.2715:
	.word	.LC966
	.word	.LC967
	.word	.LC968
	.type	__func__.62614, %object
	.size	__func__.62614, 29
__func__.62614:
	.ascii	"conn_gadget_function_cleanup\000"
	.space	3
	.type	__func__.62605, %object
	.size	__func__.62605, 20
__func__.62605:
	.ascii	"conn_gadget_cleanup\000"
	.type	__func__.62610, %object
	.size	__func__.62610, 26
__func__.62610:
	.ascii	"conn_gadget_function_init\000"
	.space	2
	.type	__func__.62552, %object
	.size	__func__.62552, 18
__func__.62552:
	.ascii	"conn_gadget_setup\000"
	.space	2
	.type	__func__.62572, %object
	.size	__func__.62572, 34
__func__.62572:
	.ascii	"conn_gadget_usb_buffer_size_store\000"
	.space	2
	.type	__func__.63803, %object
	.size	__func__.63803, 27
__func__.63803:
	.ascii	"mass_storage_product_store\000"
	.space	1
	.type	__func__.63786, %object
	.size	__func__.63786, 26
__func__.63786:
	.ascii	"mass_storage_vendor_store\000"
	.space	2
	.type	__func__.62919, %object
	.size	__func__.62919, 13
__func__.62919:
	.ascii	"ncm_wrap_ntb\000"
	.space	3
	.type	__func__.63001, %object
	.size	__func__.63001, 9
__func__.63001:
	.ascii	"ncm_work\000"
	.space	3
	.type	__func__.64376, %object
	.size	__func__.64376, 19
__func__.64376:
	.ascii	"android_usb_unbind\000"
	.space	1
	.type	__func__.64332, %object
	.size	__func__.64332, 11
__func__.64332:
	.ascii	"macos_show\000"
	.space	1
	.type	__func__.64322, %object
	.size	__func__.64322, 23
__func__.64322:
	.ascii	"ss_host_available_show\000"
	.space	1
	.type	__func__.64470, %object
	.size	__func__.64470, 21
__func__.64470:
	.ascii	"alloc_android_config\000"
	.space	3
	.type	__func__.64074, %object
	.size	__func__.64074, 16
__func__.64074:
	.ascii	"functions_store\000"
	.type	__func__.64364, %object
	.size	__func__.64364, 13
__func__.64364:
	.ascii	"android_bind\000"
	.space	3
	.type	__func__.63912, %object
	.size	__func__.63912, 23
__func__.63912:
	.ascii	"android_init_functions\000"
	.space	1
	.type	longname, %object
	.size	longname, 15
longname:
	.ascii	"Gadget Android\000"
	.space	1
	.type	__func__.63115, %object
	.size	__func__.63115, 13
__func__.63115:
	.ascii	"android_work\000"
	.space	3
	.type	__func__.45590, %object
	.size	__func__.45590, 10
__func__.45590:
	.ascii	"fsg_setup\000"
	.space	2
	.type	__func__.45496, %object
	.size	__func__.45496, 13
__func__.45496:
	.ascii	"send_message\000"
	.space	3
	.type	ffs_sb_operations, %object
	.size	ffs_sb_operations, 104
ffs_sb_operations:
	.space	16
	.word	generic_delete_inode
	.space	24
	.word	simple_statfs
	.space	56
	.type	ffs_ep0_operations, %object
	.size	ffs_ep0_operations, 108
ffs_ep0_operations:
	.word	0
	.word	no_llseek
	.word	ffs_ep0_read
	.word	ffs_ep0_write
	.space	16
	.word	ffs_ep0_ioctl
	.space	8
	.word	ffs_ep0_open
	.space	4
	.word	ffs_ep0_release
	.space	52
	.type	__func__.56978, %object
	.size	__func__.56978, 21
__func__.56978:
	.ascii	"mbim_notify_complete\000"
	.space	3
	.type	__func__.56968, %object
	.size	__func__.56968, 15
__func__.56968:
	.ascii	"mbim_do_notify\000"
	.space	1
	.type	__func__.57013, %object
	.size	__func__.57013, 11
__func__.57013:
	.ascii	"mbim_setup\000"
	.space	1
	.type	__func__.57141, %object
	.size	__func__.57141, 11
__func__.57141:
	.ascii	"mbim_write\000"
	.space	1
	.type	__func__.56905, %object
	.size	__func__.56905, 25
__func__.56905:
	.ascii	"fmbim_send_cpkt_response\000"
	.space	3
	.type	__func__.56895, %object
	.size	__func__.56895, 30
__func__.56895:
	.ascii	"fmbim_ctrl_response_available\000"
	.space	2
	.type	__func__.57105, %object
	.size	__func__.57105, 10
__func__.57105:
	.ascii	"mbim_read\000"
	.space	2
	.type	__func__.61832, %object
	.size	__func__.61832, 16
__func__.61832:
	.ascii	"f_audio_set_alt\000"
	.type	__func__.53097, %object
	.size	__func__.53097, 16
__func__.53097:
	.ascii	"ccid_bulk_write\000"
	.type	__func__.53067, %object
	.size	__func__.53067, 15
__func__.53067:
	.ascii	"ccid_bulk_read\000"
	.space	1
	.type	__func__.48121, %object
	.size	__func__.48121, 20
__func__.48121:
	.ascii	"gsdio_read_complete\000"
	.type	__func__.48190, %object
	.size	__func__.48190, 14
__func__.48190:
	.ascii	"gsdio_ctrl_wq\000"
	.space	2
	.type	__func__.49869, %object
	.size	__func__.49869, 16
__func__.49869:
	.ascii	"rmnet_ctrl_poll\000"
	.type	__func__.50715, %object
	.size	__func__.50715, 25
__func__.50715:
	.ascii	"ghsic_send_cbits_tomodem\000"
	.space	3
	.type	__func__.51704, %object
	.size	__func__.51704, 27
__func__.51704:
	.ascii	"ghsuart_send_cbits_tomodem\000"
	.space	1
	.type	__func__.57344, %object
	.size	__func__.57344, 17
__func__.57344:
	.ascii	"bam_data_wake_cb\000"
	.space	3
	.type	__func__.38835, %object
	.size	__func__.38835, 15
__func__.38835:
	.ascii	"frmnet_connect\000"
	.space	1
	.type	__func__.38842, %object
	.size	__func__.38842, 18
__func__.38842:
	.ascii	"frmnet_disconnect\000"
	.space	2
	.type	__func__.38862, %object
	.size	__func__.38862, 20
__func__.38862:
	.ascii	"frmnet_cmd_complete\000"
	.type	__func__.62595, %object
	.size	__func__.62595, 36
__func__.62595:
	.ascii	"conn_gadget_in_max_packet_size_show\000"
	.type	__func__.62583, %object
	.size	__func__.62583, 37
__func__.62583:
	.ascii	"conn_gadget_out_max_packet_size_show\000"
	.space	3
	.type	__func__.62562, %object
	.size	__func__.62562, 33
__func__.62562:
	.ascii	"conn_gadget_usb_buffer_size_show\000"
	.space	3
	.type	__func__.63051, %object
	.size	__func__.63051, 22
__func__.63051:
	.ascii	"terminal_version_show\000"
	.space	2
	.type	__func__.50727, %object
	.size	__func__.50727, 21
__func__.50727:
	.ascii	"ghsic_ctrl_connect_w\000"
	.space	3
	.type	__func__.58181, %object
	.size	__func__.58181, 12
__func__.58181:
	.ascii	"gether_init\000"
	.type	__func__.49526, %object
	.size	__func__.49526, 29
__func__.49526:
	.ascii	"gsmd_ctrl_send_cbits_tomodem\000"
	.space	3
	.type	__func__.64535, %object
	.size	__func__.64535, 5
__func__.64535:
	.ascii	"init\000"
	.space	3
	.type	__func__.62445, %object
	.size	__func__.62445, 18
__func__.62445:
	.ascii	"conn_gadget_flush\000"
	.space	2
	.type	__func__.51301, %object
	.size	__func__.51301, 18
__func__.51301:
	.ascii	"ghsic_data_remove\000"
	.space	2
	.type	__func__.52212, %object
	.size	__func__.52212, 20
__func__.52212:
	.ascii	"ghsuart_data_remove\000"
	.type	__func__.52032, %object
	.size	__func__.52032, 25
__func__.52032:
	.ascii	"ghsuart_data_write_tomdm\000"
	.space	3
	.type	__func__.52075, %object
	.size	__func__.52075, 22
__func__.52075:
	.ascii	"ghsuart_data_start_rx\000"
	.space	2
	.type	__func__.52017, %object
	.size	__func__.52017, 26
__func__.52017:
	.ascii	"ghsuart_data_write_tohost\000"
	.space	2
	.type	__func__.37473, %object
	.size	__func__.37473, 22
__func__.37473:
	.ascii	"rmnet_close_sdio_work\000"
	.space	2
	.type	__func__.63124, %object
	.size	__func__.63124, 24
__func__.63124:
	.ascii	"usb_gadget_connect_work\000"
	.type	__func__.48540, %object
	.size	__func__.48540, 18
__func__.48540:
	.ascii	"gsmd_connect_work\000"
	.space	2
	.type	__func__.49170, %object
	.size	__func__.49170, 25
__func__.49170:
	.ascii	"gbam2bam_disconnect_work\000"
	.space	3
	.type	__func__.57274, %object
	.size	__func__.57274, 29
__func__.57274:
	.ascii	"bam2bam_data_disconnect_work\000"
	.space	3
	.type	__func__.63009, %object
	.size	__func__.63009, 18
__func__.63009:
	.ascii	"ncm_function_init\000"
	.space	2
	.type	__func__.51163, %object
	.size	__func__.51163, 23
__func__.51163:
	.ascii	"ghsic_data_write_tomdm\000"
	.space	1
	.type	__func__.51212, %object
	.size	__func__.51212, 20
__func__.51212:
	.ascii	"ghsic_data_start_rx\000"
	.type	__func__.51256, %object
	.size	__func__.51256, 21
__func__.51256:
	.ascii	"ghsic_data_connect_w\000"
	.space	3
	.type	__func__.51134, %object
	.size	__func__.51134, 24
__func__.51134:
	.ascii	"ghsic_data_write_tohost\000"
	.type	__func__.51712, %object
	.size	__func__.51712, 23
__func__.51712:
	.ascii	"ghsuart_ctrl_connect_w\000"
	.space	1
	.type	__func__.52174, %object
	.size	__func__.52174, 23
__func__.52174:
	.ascii	"ghsuart_data_connect_w\000"
	.space	1
	.type	__func__.48985, %object
	.size	__func__.48985, 18
__func__.48985:
	.ascii	"gbam_data_recv_cb\000"
	.space	2
	.type	__func__.38772, %object
	.size	__func__.38772, 15
__func__.38772:
	.ascii	"frmnet_suspend\000"
	.space	1
	.type	__func__.38787, %object
	.size	__func__.38787, 14
__func__.38787:
	.ascii	"frmnet_resume\000"
	.space	2
	.type	rndis_proc_fops, %object
	.size	rndis_proc_fops, 108
rndis_proc_fops:
	.word	0
	.word	seq_lseek
	.word	seq_read
	.word	rndis_proc_write
	.space	28
	.word	rndis_proc_open
	.space	4
	.word	single_release
	.space	52
	.type	__func__.63938, %object
	.size	__func__.63938, 31
__func__.63938:
	.ascii	"android_bind_enabled_functions\000"
	.space	1
	.type	__func__.61357, %object
	.size	__func__.61357, 20
__func__.61357:
	.ascii	"gaudio_open_streams\000"
	.type	__func__.61330, %object
	.size	__func__.61330, 24
__func__.61330:
	.ascii	"playback_prepare_params\000"
	.type	__func__.61341, %object
	.size	__func__.61341, 23
__func__.61341:
	.ascii	"capture_prepare_params\000"
	.space	1
	.type	__func__.61622, %object
	.size	__func__.61622, 21
__func__.61622:
	.ascii	"f_audio_capture_work\000"
	.space	3
	.type	__func__.61387, %object
	.size	__func__.61387, 16
__func__.61387:
	.ascii	"u_audio_capture\000"
	.type	__func__.57175, %object
	.size	__func__.57175, 10
__func__.57175:
	.ascii	"mbim_init\000"
	.space	2
	.type	__func__.57976, %object
	.size	__func__.57976, 13
__func__.57976:
	.ascii	"process_rx_w\000"
	.space	3
	.type	oid_supported_list, %object
	.size	oid_supported_list, 112
oid_supported_list:
	.word	65793
	.word	65794
	.word	65795
	.word	65796
	.word	65798
	.word	65799
	.word	65802
	.word	65803
	.word	65804
	.word	65805
	.word	65814
	.word	65806
	.word	65809
	.word	65812
	.word	66050
	.word	131329
	.word	131330
	.word	131331
	.word	131332
	.word	131333
	.word	16843009
	.word	16843010
	.word	16843011
	.word	16843013
	.word	16843012
	.word	16908545
	.word	16908546
	.word	16908547
	.type	__func__.56134, %object
	.size	__func__.56134, 20
__func__.56134:
	.ascii	"gen_ndis_query_resp\000"
	.type	__func__.53176, %object
	.size	__func__.53176, 22
__func__.53176:
	.ascii	"ccid_ctrl_device_init\000"
	.space	2
	.type	__func__.53187, %object
	.size	__func__.53187, 11
__func__.53187:
	.ascii	"ccid_setup\000"
	.space	1
	.type	__func__.53120, %object
	.size	__func__.53120, 22
__func__.53120:
	.ascii	"ccid_bulk_device_init\000"
	.space	2
	.type	__func__.52227, %object
	.size	__func__.52227, 33
__func__.52227:
	.ascii	"ghsuart_send_controlbits_tomodem\000"
	.space	3
	.type	__func__.49183, %object
	.size	__func__.49183, 18
__func__.49183:
	.ascii	"gbam_connect_work\000"
	.space	2
	.type	__func__.49124, %object
	.size	__func__.49124, 14
__func__.49124:
	.ascii	"gbam_start_io\000"
	.space	2
	.type	__func__.48396, %object
	.size	__func__.48396, 15
__func__.48396:
	.ascii	"gsmd_alloc_req\000"
	.space	1
	.type	__func__.47157, %object
	.size	__func__.47157, 12
__func__.47157:
	.ascii	"gs_start_tx\000"
	.type	__func__.47219, %object
	.size	__func__.47219, 18
__func__.47219:
	.ascii	"gs_write_complete\000"
	.space	2
	.type	dirletter.45940, %object
	.size	dirletter.45940, 4
dirletter.45940:
	.byte	117
	.byte	111
	.byte	105
	.byte	110
	.type	__func__.38851, %object
	.size	__func__.38851, 26
__func__.38851:
	.ascii	"frmnet_send_cpkt_response\000"
	.space	2
	.type	__func__.49761, %object
	.size	__func__.49761, 34
__func__.49761:
	.ascii	"grmnet_ctrl_qti_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.49749, %object
	.size	__func__.49749, 24
__func__.49749:
	.ascii	"rmnet_ctrl_queue_notify\000"
	.type	__func__.49512, %object
	.size	__func__.49512, 34
__func__.49512:
	.ascii	"grmnet_ctrl_smd_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.37389, %object
	.size	__func__.37389, 26
__func__.37389:
	.ascii	"rmnet_sdio_complete_epout\000"
	.space	2
	.type	__func__.25488, %object
	.size	__func__.25488, 15
__func__.25488:
	.ascii	"composite_bind\000"
	.space	1
	.type	__func__.25105, %object
	.size	__func__.25105, 11
__func__.25105:
	.ascii	"config_buf\000"
	.space	1
	.type	__func__.25196, %object
	.size	__func__.25196, 11
__func__.25196:
	.ascii	"set_config\000"
	.space	1
	.type	__func__.25411, %object
	.size	__func__.25411, 16
__func__.25411:
	.ascii	"composite_setup\000"
	.type	__func__.61602, %object
	.size	__func__.61602, 22
__func__.61602:
	.ascii	"f_audio_playback_work\000"
	.space	2
	.type	__func__.61373, %object
	.size	__func__.61373, 17
__func__.61373:
	.ascii	"u_audio_playback\000"
	.space	3
	.type	__func__.38319, %object
	.size	__func__.38319, 16
__func__.38319:
	.ascii	"transport_store\000"
	.type	__func__.61612, %object
	.size	__func__.61612, 29
__func__.61612:
	.ascii	"f_audio_playback_ep_complete\000"
	.space	3
	.type	__func__.61634, %object
	.size	__func__.61634, 28
__func__.61634:
	.ascii	"f_audio_capture_ep_complete\000"
	.type	__func__.61651, %object
	.size	__func__.61651, 17
__func__.61651:
	.ascii	"f_audio_complete\000"
	.space	3
	.type	__func__.37311, %object
	.size	__func__.37311, 20
__func__.37311:
	.ascii	"rmnet_sdio_start_rx\000"
	.type	__func__.37534, %object
	.size	__func__.37534, 21
__func__.37534:
	.ascii	"rmnet_open_sdio_work\000"
	.space	3
	.type	__func__.56730, %object
	.size	__func__.56730, 12
__func__.56730:
	.ascii	"ecm_qc_bind\000"
	.type	__func__.57080, %object
	.size	__func__.57080, 10
__func__.57080:
	.ascii	"mbim_bind\000"
	.space	2
	.type	__func__.61864, %object
	.size	__func__.61864, 13
__func__.61864:
	.ascii	"f_audio_bind\000"
	.space	3
	.type	__func__.53034, %object
	.size	__func__.53034, 19
__func__.53034:
	.ascii	"ccid_function_bind\000"
	.space	1
	.type	__func__.38924, %object
	.size	__func__.38924, 12
__func__.38924:
	.ascii	"frmnet_bind\000"
	.type	__func__.57722, %object
	.size	__func__.57722, 14
__func__.57722:
	.ascii	"rndis_qc_bind\000"
	.space	2
	.type	__func__.37545, %object
	.size	__func__.37545, 19
__func__.37545:
	.ascii	"rmnet_sdio_set_alt\000"
	.space	1
	.type	__func__.53010, %object
	.size	__func__.53010, 22
__func__.53010:
	.ascii	"ccid_function_set_alt\000"
	.space	2
	.type	__func__.62619, %object
	.size	__func__.62619, 33
__func__.62619:
	.ascii	"conn_gadget_function_bind_config\000"
	.space	3
	.type	__func__.63537, %object
	.size	__func__.63537, 26
__func__.63537:
	.ascii	"qdss_function_bind_config\000"
	.space	2
	.type	__func__.25257, %object
	.size	__func__.25257, 18
__func__.25257:
	.ascii	"usb_remove_config\000"
	.space	2
	.type	__func__.52768, %object
	.size	__func__.52768, 12
__func__.52768:
	.ascii	"adb_release\000"
	.type	__func__.63259, %object
	.size	__func__.63259, 20
__func__.63259:
	.ascii	"adb_closed_callback\000"
	.type	__func__.63219, %object
	.size	__func__.63219, 27
__func__.63219:
	.ascii	"functionfs_closed_callback\000"
	.space	1
	.type	__func__.44602, %object
	.size	__func__.44602, 13
__func__.44602:
	.ascii	"ffs_data_put\000"
	.space	3
	.type	__func__.64500, %object
	.size	__func__.64500, 14
__func__.64500:
	.ascii	"android_probe\000"
	.space	2
	.type	__func__.63065, %object
	.size	__func__.63065, 26
__func__.63065:
	.ascii	"create_terminal_attribute\000"
	.space	2
	.type	__func__.25532, %object
	.size	__func__.25532, 29
__func__.25532:
	.ascii	"usb_composite_setup_continue\000"
	.space	3
	.type	__func__.46092, %object
	.size	__func__.46092, 17
__func__.46092:
	.ascii	"handle_exception\000"
	.space	3
	.type	__func__.46022, %object
	.size	__func__.46022, 17
__func__.46022:
	.ascii	"get_next_command\000"
	.space	3
	.type	__func__.45504, %object
	.size	__func__.45504, 14
__func__.45504:
	.ascii	"do_timer_stop\000"
	.space	2
	.type	__func__.45508, %object
	.size	__func__.45508, 15
__func__.45508:
	.ascii	"do_timer_reset\000"
	.space	1
	.type	__func__.45515, %object
	.size	__func__.45515, 17
__func__.45515:
	.ascii	"get_version_info\000"
	.space	3
	.type	__func__.45911, %object
	.size	__func__.45911, 13
__func__.45911:
	.ascii	"finish_reply\000"
	.space	3
	.type	__func__.26030, %object
	.size	__func__.26030, 14
__func__.26030:
	.ascii	"usb_diag_read\000"
	.space	2
	.type	__func__.26048, %object
	.size	__func__.26048, 15
__func__.26048:
	.ascii	"usb_diag_write\000"
	.space	1
	.type	__func__.63520, %object
	.size	__func__.63520, 26
__func__.63520:
	.ascii	"diag_function_bind_config\000"
	.space	2
	.type	__func__.30959, %object
	.size	__func__.30959, 25
__func__.30959:
	.ascii	"usb_qdss_disconnect_work\000"
	.space	3
	.type	rmnet_smd_debug_stats_ops, %object
	.size	rmnet_smd_debug_stats_ops, 108
rmnet_smd_debug_stats_ops:
	.space	8
	.word	rmnet_smd_debug_read_stats
	.word	rmnet_smd_debug_reset_stats
	.space	28
	.word	rmnet_smd_debug_open
	.space	60
	.type	debug_rmnet_sdio_stats_ops, %object
	.size	debug_rmnet_sdio_stats_ops, 108
debug_rmnet_sdio_stats_ops:
	.space	8
	.word	rmnet_sdio_read_stats
	.word	rmnet_sdio_reset_stats
	.space	28
	.word	debug_rmnet_sdio_open
	.space	60
	.type	__func__.47257, %object
	.size	__func__.47257, 12
__func__.47257:
	.ascii	"gs_start_io\000"
	.type	gs_tty_ops, %object
	.size	gs_tty_ops, 124
gs_tty_ops:
	.space	12
	.word	gs_open
	.word	gs_close
	.space	8
	.word	gs_write
	.word	gs_put_char
	.word	gs_flush_chars
	.word	gs_write_room
	.word	gs_chars_in_buffer
	.space	16
	.word	gs_unthrottle
	.space	12
	.word	gs_break_ctl
	.space	16
	.word	gs_tiocmget
	.word	gs_tiocmset
	.space	16
	.type	__func__.47436, %object
	.size	__func__.47436, 14
__func__.47436:
	.ascii	"gserial_setup\000"
	.space	2
	.type	debug_adb_ops, %object
	.size	debug_adb_ops, 108
debug_adb_ops:
	.space	8
	.word	debug_read_status
	.space	32
	.word	serial_debug_open
	.space	60
	.type	debug_rst_ops, %object
	.size	debug_rst_ops, 108
debug_rst_ops:
	.space	12
	.word	debug_write_reset
	.space	28
	.word	serial_debug_open
	.space	60
	.type	__func__.48044, %object
	.size	__func__.48044, 16
__func__.48044:
	.ascii	"gsdio_alloc_req\000"
	.type	__func__.48500, %object
	.size	__func__.48500, 14
__func__.48500:
	.ascii	"gsmd_start_io\000"
	.space	2
	.type	__func__.48076, %object
	.size	__func__.48076, 15
__func__.48076:
	.ascii	"gsdio_start_rx\000"
	.space	1
	.type	__func__.48093, %object
	.size	__func__.48093, 12
__func__.48093:
	.ascii	"gsdio_write\000"
	.type	__func__.48103, %object
	.size	__func__.48103, 14
__func__.48103:
	.ascii	"gsdio_rx_push\000"
	.space	2
	.type	__func__.48174, %object
	.size	__func__.48174, 15
__func__.48174:
	.ascii	"gsdio_start_io\000"
	.space	1
	.type	__func__.48183, %object
	.size	__func__.48183, 16
__func__.48183:
	.ascii	"gsdio_port_free\000"
	.type	__func__.48257, %object
	.size	__func__.48257, 17
__func__.48257:
	.ascii	"gsdio_port_alloc\000"
	.space	3
	.type	__func__.48270, %object
	.size	__func__.48270, 14
__func__.48270:
	.ascii	"gsdio_connect\000"
	.space	2
	.type	__func__.48280, %object
	.size	__func__.48280, 17
__func__.48280:
	.ascii	"gsdio_disconnect\000"
	.space	3
	.type	__func__.48337, %object
	.size	__func__.48337, 12
__func__.48337:
	.ascii	"gsdio_setup\000"
	.type	debug_gsdio_ops, %object
	.size	debug_gsdio_ops, 108
debug_gsdio_ops:
	.space	8
	.word	debug_sdio_read_stats
	.word	debug_sdio_reset_stats
	.space	28
	.word	debug_sdio_open
	.space	60
	.type	__func__.48566, %object
	.size	__func__.48566, 13
__func__.48566:
	.ascii	"gsmd_connect\000"
	.space	3
	.type	__func__.48576, %object
	.size	__func__.48576, 16
__func__.48576:
	.ascii	"gsmd_disconnect\000"
	.type	__func__.48673, %object
	.size	__func__.48673, 11
__func__.48673:
	.ascii	"gsmd_setup\000"
	.space	1
	.type	debug_gsmd_ops, %object
	.size	debug_gsmd_ops, 108
debug_gsmd_ops:
	.space	8
	.word	debug_smd_read_stats
	.word	debug_smd_reset_stats
	.space	28
	.word	debug_smd_open
	.space	60
	.type	__func__.49353, %object
	.size	__func__.49353, 16
__func__.49353:
	.ascii	"gbam_disconnect\000"
	.type	__func__.49368, %object
	.size	__func__.49368, 13
__func__.49368:
	.ascii	"gbam_connect\000"
	.space	3
	.type	__func__.49378, %object
	.size	__func__.49378, 11
__func__.49378:
	.ascii	"gbam_setup\000"
	.space	1
	.type	gbam_stats_ops, %object
	.size	gbam_stats_ops, 108
gbam_stats_ops:
	.space	8
	.word	gbam_read_stats
	.word	gbam_reset_stats
	.space	92
	.type	__func__.49577, %object
	.size	__func__.49577, 18
__func__.49577:
	.ascii	"gsmd_ctrl_connect\000"
	.space	2
	.type	__func__.49598, %object
	.size	__func__.49598, 21
__func__.49598:
	.ascii	"gsmd_ctrl_disconnect\000"
	.space	3
	.type	__func__.49661, %object
	.size	__func__.49661, 16
__func__.49661:
	.ascii	"gsmd_ctrl_setup\000"
	.type	ctrl_names, %object
	.size	ctrl_names, 24
ctrl_names:
	.word	.LC1062
	.word	.LC1063
	.word	.LC1064
	.word	.LC1063
	.space	8
	.type	__func__.49776, %object
	.size	__func__.49776, 18
__func__.49776:
	.ascii	"gqti_ctrl_connect\000"
	.space	2
	.type	__func__.49786, %object
	.size	__func__.49786, 21
__func__.49786:
	.ascii	"gqti_ctrl_disconnect\000"
	.space	3
	.type	__func__.50739, %object
	.size	__func__.50739, 19
__func__.50739:
	.ascii	"ghsic_ctrl_connect\000"
	.space	1
	.type	__func__.50757, %object
	.size	__func__.50757, 22
__func__.50757:
	.ascii	"ghsic_ctrl_disconnect\000"
	.space	2
	.type	__func__.50820, %object
	.size	__func__.50820, 25
__func__.50820:
	.ascii	"ghsic_ctrl_set_port_name\000"
	.space	3
	.type	__func__.50829, %object
	.size	__func__.50829, 17
__func__.50829:
	.ascii	"ghsic_ctrl_setup\000"
	.space	3
	.type	__func__.50811, %object
	.size	__func__.50811, 17
__func__.50811:
	.ascii	"gctrl_port_alloc\000"
	.space	3
	.type	__func__.51327, %object
	.size	__func__.51327, 22
__func__.51327:
	.ascii	"ghsic_data_disconnect\000"
	.space	2
	.type	__func__.51343, %object
	.size	__func__.51343, 19
__func__.51343:
	.ascii	"ghsic_data_connect\000"
	.space	1
	.type	__func__.51478, %object
	.size	__func__.51478, 25
__func__.51478:
	.ascii	"ghsic_data_set_port_name\000"
	.space	3
	.type	__func__.51487, %object
	.size	__func__.51487, 17
__func__.51487:
	.ascii	"ghsic_data_setup\000"
	.space	3
	.type	__func__.51314, %object
	.size	__func__.51314, 22
__func__.51314:
	.ascii	"ghsic_data_port_alloc\000"
	.space	2
	.type	__func__.51720, %object
	.size	__func__.51720, 21
__func__.51720:
	.ascii	"ghsuart_ctrl_connect\000"
	.space	3
	.type	__func__.51737, %object
	.size	__func__.51737, 24
__func__.51737:
	.ascii	"ghsuart_ctrl_disconnect\000"
	.type	__func__.51785, %object
	.size	__func__.51785, 19
__func__.51785:
	.ascii	"ghsuart_ctrl_setup\000"
	.space	1
	.type	__func__.51773, %object
	.size	__func__.51773, 24
__func__.51773:
	.ascii	"ghsuart_ctrl_port_alloc\000"
	.type	CSWTCH.3052, %object
	.size	CSWTCH.3052, 36
CSWTCH.3052:
	.word	.LC957
	.word	.LC958
	.word	.LC959
	.word	.LC960
	.word	.LC961
	.word	.LC962
	.word	.LC963
	.word	.LC964
	.word	.LC965
	.type	__func__.52250, %object
	.size	__func__.52250, 24
__func__.52250:
	.ascii	"ghsuart_data_disconnect\000"
	.type	__func__.38730, %object
	.size	__func__.38730, 23
__func__.38730:
	.ascii	"gport_rmnet_disconnect\000"
	.space	1
	.type	__func__.52269, %object
	.size	__func__.52269, 21
__func__.52269:
	.ascii	"ghsuart_data_connect\000"
	.space	3
	.type	__func__.38810, %object
	.size	__func__.38810, 15
__func__.38810:
	.ascii	"frmnet_set_alt\000"
	.space	1
	.type	__func__.38708, %object
	.size	__func__.38708, 20
__func__.38708:
	.ascii	"gport_rmnet_connect\000"
	.type	__func__.52351, %object
	.size	__func__.52351, 19
__func__.52351:
	.ascii	"ghsuart_data_setup\000"
	.space	1
	.type	ghsuart_data_names, %object
	.size	ghsuart_data_names, 8
ghsuart_data_names:
	.word	.LC1059
	.word	.LC1060
	.type	__func__.52235, %object
	.size	__func__.52235, 24
__func__.52235:
	.ascii	"ghsuart_data_port_alloc\000"
	.type	__func__.38957, %object
	.size	__func__.38957, 17
__func__.38957:
	.ascii	"frmnet_init_port\000"
	.space	3
	.type	__func__.63366, %object
	.size	__func__.63366, 27
__func__.63366:
	.ascii	"rmnet_function_bind_config\000"
	.space	1
	.type	__func__.38937, %object
	.size	__func__.38937, 19
__func__.38937:
	.ascii	"frmnet_bind_config\000"
	.space	1
	.type	__func__.63300, %object
	.size	__func__.63300, 25
__func__.63300:
	.ascii	"acm_function_bind_config\000"
	.space	3
	.type	__func__.57671, %object
	.size	__func__.57671, 15
__func__.57671:
	.ascii	"rndis_qc_setup\000"
	.space	1
	.type	__func__.56183, %object
	.size	__func__.56183, 18
__func__.56183:
	.ascii	"gen_ndis_set_resp\000"
	.space	2
	.type	__func__.56263, %object
	.size	__func__.56263, 17
__func__.56263:
	.ascii	"rndis_msg_parser\000"
	.space	3
	.type	__func__.57650, %object
	.size	__func__.57650, 26
__func__.57650:
	.ascii	"rndis_qc_command_complete\000"
	.space	2
	.type	__func__.56919, %object
	.size	__func__.56919, 22
__func__.56919:
	.ascii	"mbim_configure_params\000"
	.space	2
	.type	__func__.57307, %object
	.size	__func__.57307, 20
__func__.57307:
	.ascii	"bam_data_disconnect\000"
	.type	__func__.57063, %object
	.size	__func__.57063, 13
__func__.57063:
	.ascii	"mbim_disable\000"
	.space	3
	.type	__func__.56932, %object
	.size	__func__.56932, 20
__func__.56932:
	.ascii	"mbim_bam_disconnect\000"
	.type	__func__.57319, %object
	.size	__func__.57319, 17
__func__.57319:
	.ascii	"bam_data_connect\000"
	.space	3
	.type	__func__.57052, %object
	.size	__func__.57052, 13
__func__.57052:
	.ascii	"mbim_set_alt\000"
	.space	3
	.type	__func__.56928, %object
	.size	__func__.56928, 17
__func__.56928:
	.ascii	"mbim_bam_connect\000"
	.space	3
	.type	__func__.57331, %object
	.size	__func__.57331, 15
__func__.57331:
	.ascii	"bam_data_setup\000"
	.space	1
	.type	__func__.57094, %object
	.size	__func__.57094, 17
__func__.57094:
	.ascii	"mbim_bind_config\000"
	.space	3
	.type	__func__.56913, %object
	.size	__func__.56913, 15
__func__.56913:
	.ascii	"mbim_bam_setup\000"
	.space	1
	.type	__func__.57596, %object
	.size	__func__.57596, 19
__func__.57596:
	.ascii	"rndis_qc_bam_setup\000"
	.space	1
	.type	__func__.57749, %object
	.size	__func__.57749, 28
__func__.57749:
	.ascii	"rndis_qc_bind_config_vendor\000"
	.type	eth_netdev_ops, %object
	.size	eth_netdev_ops, 136
eth_netdev_ops:
	.space	8
	.word	eth_open
	.word	eth_stop
	.word	eth_start_xmit
	.space	12
	.word	eth_mac_addr
	.word	eth_validate_addr
	.space	8
	.word	ueth_change_mtu
	.space	84
	.type	ops, %object
	.size	ops, 164
ops:
	.space	8
	.word	eth_get_drvinfo
	.space	28
	.word	ethtool_op_get_link
	.space	120
	.type	__func__.63606, %object
	.size	__func__.63606, 27
__func__.63606:
	.ascii	"rndis_function_bind_config\000"
	.space	1
	.type	__func__.63722, %object
	.size	__func__.63722, 25
__func__.63722:
	.ascii	"ecm_function_bind_config\000"
	.space	3
	.type	__func__.58155, %object
	.size	__func__.58155, 15
__func__.58155:
	.ascii	"gether_connect\000"
	.space	1
	.type	__func__.62887, %object
	.size	__func__.62887, 12
__func__.62887:
	.ascii	"ncm_set_alt\000"
	.type	__func__.56619, %object
	.size	__func__.56619, 17
__func__.56619:
	.ascii	"ecm_qc_bam_setup\000"
	.space	3
	.type	__func__.56744, %object
	.size	__func__.56744, 19
__func__.56744:
	.ascii	"ecm_qc_bind_config\000"
	.space	1
	.type	eth_qc_netdev_ops, %object
	.size	eth_qc_netdev_ops, 136
eth_qc_netdev_ops:
	.space	8
	.word	eth_qc_open
	.word	eth_qc_stop
	.word	eth_qc_start_xmit
	.space	12
	.word	eth_mac_addr
	.word	eth_validate_addr
	.space	8
	.word	ueth_qc_change_mtu
	.space	84
	.type	qc_ethtool_ops, %object
	.size	qc_ethtool_ops, 164
qc_ethtool_ops:
	.space	8
	.word	eth_qc_get_drvinfo
	.space	28
	.word	ethtool_op_get_link
	.space	120
	.type	__func__.63613, %object
	.size	__func__.63613, 30
__func__.63613:
	.ascii	"rndis_qc_function_bind_config\000"
	.space	2
	.type	__func__.63417, %object
	.size	__func__.63417, 28
__func__.63417:
	.ascii	"ecm_qc_function_bind_config\000"
	.type	__func__.56629, %object
	.size	__func__.56629, 19
__func__.56629:
	.ascii	"ecm_qc_bam_connect\000"
	.space	1
	.type	__func__.57690, %object
	.size	__func__.57690, 17
__func__.57690:
	.ascii	"rndis_qc_disable\000"
	.space	3
	.type	__func__.57605, %object
	.size	__func__.57605, 21
__func__.57605:
	.ascii	"rndis_qc_bam_connect\000"
	.space	3
	.type	__func__.61411, %object
	.size	__func__.61411, 20
__func__.61411:
	.ascii	"gaudio_open_snd_dev\000"
	.type	__func__.61422, %object
	.size	__func__.61422, 13
__func__.61422:
	.ascii	"gaudio_setup\000"
	.space	3
	.type	__func__.61893, %object
	.size	__func__.61893, 18
__func__.61893:
	.ascii	"audio_bind_config\000"
	.space	2
	.type	__func__.62334, %object
	.size	__func__.62334, 24
__func__.62334:
	.ascii	"conn_gadget_complete_in\000"
	.type	__func__.62362, %object
	.size	__func__.62362, 34
__func__.62362:
	.ascii	"conn_gadget_create_bulk_endpoints\000"
	.space	2
	.type	__func__.62306, %object
	.size	__func__.62306, 27
__func__.62306:
	.ascii	"conn_gadget_request_ep_out\000"
	.space	1
	.type	__func__.62530, %object
	.size	__func__.62530, 29
__func__.62530:
	.ascii	"conn_gadget_function_set_alt\000"
	.space	3
	.type	__func__.62439, %object
	.size	__func__.62439, 17
__func__.62439:
	.ascii	"conn_gadget_open\000"
	.space	3
	.type	__func__.62390, %object
	.size	__func__.62390, 17
__func__.62390:
	.ascii	"conn_gadget_read\000"
	.space	3
	.type	__func__.62425, %object
	.size	__func__.62425, 18
__func__.62425:
	.ascii	"conn_gadget_write\000"
	.space	2
	.type	__func__.62342, %object
	.size	__func__.62342, 25
__func__.62342:
	.ascii	"conn_gadget_complete_out\000"
	.space	3
	.type	__func__.62376, %object
	.size	__func__.62376, 17
__func__.62376:
	.ascii	"conn_gadget_poll\000"
	.space	3
	.type	__func__.63021, %object
	.size	__func__.63021, 25
__func__.63021:
	.ascii	"ncm_function_bind_config\000"
	.space	3
	.type	__func__.63036, %object
	.size	__func__.63036, 13
__func__.63036:
	.ascii	"is_ncm_ready\000"
	.space	3
	.type	__func__.63040, %object
	.size	__func__.63040, 26
__func__.63040:
	.ascii	"set_ncm_device_descriptor\000"
	.space	2
	.type	__func__.63044, %object
	.size	__func__.63044, 14
__func__.63044:
	.ascii	"set_ncm_ready\000"
	.space	2
	.type	__func__.63059, %object
	.size	__func__.63059, 23
__func__.63059:
	.ascii	"terminal_version_store\000"
	.space	1
	.type	__func__.63073, %object
	.size	__func__.63073, 22
__func__.63073:
	.ascii	"terminal_ctrl_request\000"
	.space	2
	.type	__func__.63129, %object
	.size	__func__.63129, 33
__func__.63129:
	.ascii	"schedule_usb_gadget_connect_work\000"
	.space	3
	.type	__func__.64312, %object
	.size	__func__.64312, 14
__func__.64312:
	.ascii	"usb30en_store\000"
	.space	2
	.type	__func__.63142, %object
	.size	__func__.63142, 15
__func__.63142:
	.ascii	"android_enable\000"
	.space	1
	.type	__func__.64115, %object
	.size	__func__.64115, 13
__func__.64115:
	.ascii	"enable_store\000"
	.space	3
	.type	__func__.52761, %object
	.size	__func__.52761, 9
__func__.52761:
	.ascii	"adb_open\000"
	.space	3
	.type	ffs_epfile_operations, %object
	.size	ffs_epfile_operations, 108
ffs_epfile_operations:
	.word	0
	.word	no_llseek
	.word	ffs_epfile_read
	.word	ffs_epfile_write
	.space	16
	.word	ffs_epfile_ioctl
	.space	8
	.word	ffs_epfile_open
	.space	4
	.word	ffs_epfile_release
	.space	52
	.type	mirrorlink_shortname, %object
	.size	mirrorlink_shortname, 8
mirrorlink_shortname:
	.ascii	"usb_ncm\000"
	.type	conn_gadget_fops, %object
	.size	conn_gadget_fops, 108
conn_gadget_fops:
	.word	0
	.space	4
	.word	conn_gadget_read
	.word	conn_gadget_write
	.space	12
	.word	conn_gadget_poll
	.word	conn_gadget_ioctl
	.space	8
	.word	conn_gadget_open
	.word	conn_gadget_flush
	.word	conn_gadget_release
	.space	52
	.type	conn_gadget_shortname, %object
	.size	conn_gadget_shortname, 17
conn_gadget_shortname:
	.ascii	"android_ssusbcon\000"
	.space	3
	.type	__param_str_audio_capture_buf_size, %object
	.size	__param_str_audio_capture_buf_size, 31
__param_str_audio_capture_buf_size:
	.ascii	"android.audio_capture_buf_size\000"
	.space	1
	.type	__param_str_req_capture_count, %object
	.size	__param_str_req_capture_count, 26
__param_str_req_capture_count:
	.ascii	"android.req_capture_count\000"
	.space	2
	.type	__param_str_req_capture_buf_size, %object
	.size	__param_str_req_capture_buf_size, 29
__param_str_req_capture_buf_size:
	.ascii	"android.req_capture_buf_size\000"
	.space	3
	.type	__param_str_audio_playback_buf_size, %object
	.size	__param_str_audio_playback_buf_size, 32
__param_str_audio_playback_buf_size:
	.ascii	"android.audio_playback_buf_size\000"
	.type	__param_str_req_playback_count, %object
	.size	__param_str_req_playback_count, 27
__param_str_req_playback_count:
	.ascii	"android.req_playback_count\000"
	.space	1
	.type	__param_str_req_playback_buf_size, %object
	.size	__param_str_req_playback_buf_size, 30
__param_str_req_playback_buf_size:
	.ascii	"android.req_playback_buf_size\000"
	.space	2
	.type	__param_str_fn_cntl, %object
	.size	__param_str_fn_cntl, 16
__param_str_fn_cntl:
	.ascii	"android.fn_cntl\000"
	.type	__param_str_fn_cap, %object
	.size	__param_str_fn_cap, 15
__param_str_fn_cap:
	.ascii	"android.fn_cap\000"
	.space	1
	.type	__param_str_fn_play, %object
	.size	__param_str_fn_play, 16
__param_str_fn_play:
	.ascii	"android.fn_play\000"
	.type	__param_str_qc_host_addr, %object
	.size	__param_str_qc_host_addr, 21
__param_str_qc_host_addr:
	.ascii	"android.qc_host_addr\000"
	.space	3
	.type	__param_str_qc_dev_addr, %object
	.size	__param_str_qc_dev_addr, 20
__param_str_qc_dev_addr:
	.ascii	"android.qc_dev_addr\000"
	.type	__param_str_host_addr, %object
	.size	__param_str_host_addr, 18
__param_str_host_addr:
	.ascii	"android.host_addr\000"
	.space	2
	.type	__param_str_dev_addr, %object
	.size	__param_str_dev_addr, 17
__param_str_dev_addr:
	.ascii	"android.dev_addr\000"
	.space	3
	.type	__param_str_qmult, %object
	.size	__param_str_qmult, 14
__param_str_qmult:
	.ascii	"android.qmult\000"
	.space	2
	.type	rndis_qc_fops, %object
	.size	rndis_qc_fops, 108
rndis_qc_fops:
	.word	0
	.space	28
	.word	rndis_qc_ioctl
	.space	8
	.word	rndis_qc_open_dev
	.space	4
	.word	rndis_qc_release_dev
	.space	52
	.type	mbim_fops, %object
	.size	mbim_fops, 108
mbim_fops:
	.word	0
	.space	4
	.word	mbim_read
	.word	mbim_write
	.space	16
	.word	mbim_ioctl
	.space	8
	.word	mbim_open
	.space	4
	.word	mbim_release
	.space	52
	.type	__param_str_rndis_ul_max_xfer_size_rcvd, %object
	.size	__param_str_rndis_ul_max_xfer_size_rcvd, 36
__param_str_rndis_ul_max_xfer_size_rcvd:
	.ascii	"android.rndis_ul_max_xfer_size_rcvd\000"
	.type	__param_str_rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	__param_str_rndis_ul_max_pkt_per_xfer_rcvd, 39
__param_str_rndis_ul_max_pkt_per_xfer_rcvd:
	.ascii	"android.rndis_ul_max_pkt_per_xfer_rcvd\000"
	.space	1
	.type	__param_str_rndis_ul_max_pkt_per_xfer, %object
	.size	__param_str_rndis_ul_max_pkt_per_xfer, 34
__param_str_rndis_ul_max_pkt_per_xfer:
	.ascii	"android.rndis_ul_max_pkt_per_xfer\000"
	.space	2
	.type	__param_str_rndis_dl_max_pkt_per_xfer, %object
	.size	__param_str_rndis_dl_max_pkt_per_xfer, 34
__param_str_rndis_dl_max_pkt_per_xfer:
	.ascii	"android.rndis_dl_max_pkt_per_xfer\000"
	.space	2
	.type	acc_hid_table, %object
	.size	acc_hid_table, 32
acc_hid_table:
	.short	3
	.space	2
	.word	-1
	.word	-1
	.space	4
	.space	16
	.type	acc_fops, %object
	.size	acc_fops, 108
acc_fops:
	.word	0
	.space	4
	.word	acc_read
	.word	acc_write
	.space	16
	.word	acc_ioctl
	.space	8
	.word	acc_open
	.space	4
	.word	acc_release
	.space	52
	.type	mtp_fops, %object
	.size	mtp_fops, 108
mtp_fops:
	.word	0
	.space	4
	.word	mtp_read
	.word	mtp_write
	.space	16
	.word	mtp_ioctl
	.space	8
	.word	mtp_open
	.space	4
	.word	mtp_release
	.space	52
	.type	mtp_shortname, %object
	.size	mtp_shortname, 8
mtp_shortname:
	.ascii	"mtp_usb\000"
	.type	__param_str_mtp_tx_reqs, %object
	.size	__param_str_mtp_tx_reqs, 20
__param_str_mtp_tx_reqs:
	.ascii	"android.mtp_tx_reqs\000"
	.type	__param_str_mtp_tx_req_len, %object
	.size	__param_str_mtp_tx_req_len, 23
__param_str_mtp_tx_req_len:
	.ascii	"android.mtp_tx_req_len\000"
	.space	1
	.type	__param_str_mtp_rx_req_len, %object
	.size	__param_str_mtp_rx_req_len, 23
__param_str_mtp_rx_req_len:
	.ascii	"android.mtp_rx_req_len\000"
	.space	1
	.type	ccid_ctrl_fops, %object
	.size	ccid_ctrl_fops, 108
ccid_ctrl_fops:
	.word	0
	.space	4
	.word	ccid_ctrl_read
	.space	20
	.word	ccid_ctrl_ioctl
	.space	8
	.word	ccid_ctrl_open
	.space	4
	.word	ccid_ctrl_release
	.space	52
	.type	ccid_bulk_fops, %object
	.size	ccid_bulk_fops, 108
ccid_bulk_fops:
	.word	0
	.space	4
	.word	ccid_bulk_read
	.word	ccid_bulk_write
	.space	28
	.word	ccid_bulk_open
	.space	4
	.word	ccid_bulk_release
	.space	52
	.type	adb_fops, %object
	.size	adb_fops, 108
adb_fops:
	.word	0
	.space	4
	.word	adb_read
	.word	adb_write
	.space	28
	.word	adb_open
	.space	4
	.word	adb_release
	.space	52
	.type	adb_shortname, %object
	.size	adb_shortname, 12
adb_shortname:
	.ascii	"android_adb\000"
	.type	modem_fops, %object
	.size	modem_fops, 108
modem_fops:
	.word	0
	.word	no_llseek
	.word	modem_read
	.space	16
	.word	modem_poll
	.word	modem_ioctl
	.space	8
	.word	modem_open
	.space	4
	.word	modem_close
	.space	52
	.type	__param_str_ghsuart_data_tx_intr_thld, %object
	.size	__param_str_ghsuart_data_tx_intr_thld, 34
__param_str_ghsuart_data_tx_intr_thld:
	.ascii	"android.ghsuart_data_tx_intr_thld\000"
	.space	2
	.type	__param_str_ghsuart_data_rx_req_size, %object
	.size	__param_str_ghsuart_data_rx_req_size, 33
__param_str_ghsuart_data_rx_req_size:
	.ascii	"android.ghsuart_data_rx_req_size\000"
	.space	3
	.type	__param_str_ghsuart_data_serial_rx_q_size, %object
	.size	__param_str_ghsuart_data_serial_rx_q_size, 38
__param_str_ghsuart_data_serial_rx_q_size:
	.ascii	"android.ghsuart_data_serial_rx_q_size\000"
	.space	2
	.type	__param_str_ghsuart_data_serial_tx_q_size, %object
	.size	__param_str_ghsuart_data_serial_tx_q_size, 38
__param_str_ghsuart_data_serial_tx_q_size:
	.ascii	"android.ghsuart_data_serial_tx_q_size\000"
	.space	2
	.type	__param_str_ghsuart_data_rmnet_rx_q_size, %object
	.size	__param_str_ghsuart_data_rmnet_rx_q_size, 37
__param_str_ghsuart_data_rmnet_rx_q_size:
	.ascii	"android.ghsuart_data_rmnet_rx_q_size\000"
	.space	3
	.type	__param_str_ghsuart_data_rmnet_tx_q_size, %object
	.size	__param_str_ghsuart_data_rmnet_tx_q_size, 37
__param_str_ghsuart_data_rmnet_tx_q_size:
	.ascii	"android.ghsuart_data_rmnet_tx_q_size\000"
	.space	3
	.type	__param_str_record_timestamp, %object
	.size	__param_str_record_timestamp, 25
__param_str_record_timestamp:
	.ascii	"android.record_timestamp\000"
	.space	3
	.type	__param_str_ghsic_data_pend_limit_with_bridge, %object
	.size	__param_str_ghsic_data_pend_limit_with_bridge, 42
__param_str_ghsic_data_pend_limit_with_bridge:
	.ascii	"android.ghsic_data_pend_limit_with_bridge\000"
	.space	2
	.type	__param_str_ghsic_data_fctrl_dis_thld, %object
	.size	__param_str_ghsic_data_fctrl_dis_thld, 34
__param_str_ghsic_data_fctrl_dis_thld:
	.ascii	"android.ghsic_data_fctrl_dis_thld\000"
	.space	2
	.type	__param_str_ghsic_data_fctrl_en_thld, %object
	.size	__param_str_ghsic_data_fctrl_en_thld, 33
__param_str_ghsic_data_fctrl_en_thld:
	.ascii	"android.ghsic_data_fctrl_en_thld\000"
	.space	3
	.type	__param_str_ghsic_data_fctrl_support, %object
	.size	__param_str_ghsic_data_fctrl_support, 33
__param_str_ghsic_data_fctrl_support:
	.ascii	"android.ghsic_data_fctrl_support\000"
	.space	3
	.type	__param_str_ghsic_data_tx_intr_thld, %object
	.size	__param_str_ghsic_data_tx_intr_thld, 32
__param_str_ghsic_data_tx_intr_thld:
	.ascii	"android.ghsic_data_tx_intr_thld\000"
	.type	__param_str_ghsic_data_rx_req_size, %object
	.size	__param_str_ghsic_data_rx_req_size, 31
__param_str_ghsic_data_rx_req_size:
	.ascii	"android.ghsic_data_rx_req_size\000"
	.space	1
	.type	__param_str_ghsic_data_serial_rx_q_size, %object
	.size	__param_str_ghsic_data_serial_rx_q_size, 36
__param_str_ghsic_data_serial_rx_q_size:
	.ascii	"android.ghsic_data_serial_rx_q_size\000"
	.type	__param_str_ghsic_data_serial_tx_q_size, %object
	.size	__param_str_ghsic_data_serial_tx_q_size, 36
__param_str_ghsic_data_serial_tx_q_size:
	.ascii	"android.ghsic_data_serial_tx_q_size\000"
	.type	__param_str_ghsic_data_rmnet_rx_q_size, %object
	.size	__param_str_ghsic_data_rmnet_rx_q_size, 35
__param_str_ghsic_data_rmnet_rx_q_size:
	.ascii	"android.ghsic_data_rmnet_rx_q_size\000"
	.space	1
	.type	__param_str_ghsic_data_rmnet_tx_q_size, %object
	.size	__param_str_ghsic_data_rmnet_tx_q_size, 35
__param_str_ghsic_data_rmnet_tx_q_size:
	.ascii	"android.ghsic_data_rmnet_tx_q_size\000"
	.space	1
	.type	rmnet_ctrl_fops, %object
	.size	rmnet_ctrl_fops, 108
rmnet_ctrl_fops:
	.word	0
	.space	4
	.word	rmnet_ctrl_read
	.word	rmnet_ctrl_write
	.space	12
	.word	rmnet_ctrl_poll
	.word	rmnet_ctrl_ioctl
	.space	8
	.word	rmnet_ctrl_open
	.space	4
	.word	rmnet_ctrl_release
	.space	52
	.type	__param_str_dl_intr_threshold, %object
	.size	__param_str_dl_intr_threshold, 26
__param_str_dl_intr_threshold:
	.ascii	"android.dl_intr_threshold\000"
	.space	2
	.type	__param_str_bam_mux_rx_req_size, %object
	.size	__param_str_bam_mux_rx_req_size, 28
__param_str_bam_mux_rx_req_size:
	.ascii	"android.bam_mux_rx_req_size\000"
	.type	__param_str_bam_mux_rx_q_size, %object
	.size	__param_str_bam_mux_rx_q_size, 26
__param_str_bam_mux_rx_q_size:
	.ascii	"android.bam_mux_rx_q_size\000"
	.space	2
	.type	__param_str_bam_mux_tx_q_size, %object
	.size	__param_str_bam_mux_tx_q_size, 26
__param_str_bam_mux_tx_q_size:
	.ascii	"android.bam_mux_tx_q_size\000"
	.space	2
	.type	__param_str_bam_mux_rx_fctrl_dis_thld, %object
	.size	__param_str_bam_mux_rx_fctrl_dis_thld, 34
__param_str_bam_mux_rx_fctrl_dis_thld:
	.ascii	"android.bam_mux_rx_fctrl_dis_thld\000"
	.space	2
	.type	__param_str_bam_mux_rx_fctrl_support, %object
	.size	__param_str_bam_mux_rx_fctrl_support, 33
__param_str_bam_mux_rx_fctrl_support:
	.ascii	"android.bam_mux_rx_fctrl_support\000"
	.space	3
	.type	__param_str_bam_mux_rx_fctrl_en_thld, %object
	.size	__param_str_bam_mux_rx_fctrl_en_thld, 33
__param_str_bam_mux_rx_fctrl_en_thld:
	.ascii	"android.bam_mux_rx_fctrl_en_thld\000"
	.space	3
	.type	__param_str_bam_mux_tx_pkt_drop_thld, %object
	.size	__param_str_bam_mux_tx_pkt_drop_thld, 33
__param_str_bam_mux_tx_pkt_drop_thld:
	.ascii	"android.bam_mux_tx_pkt_drop_thld\000"
	.space	3
	.type	__param_str_bam_pending_limit, %object
	.size	__param_str_bam_pending_limit, 26
__param_str_bam_pending_limit:
	.ascii	"android.bam_pending_limit\000"
	.space	2
	.type	fsg_string_interface, %object
	.size	fsg_string_interface, 13
fsg_string_interface:
	.ascii	"Mass Storage\000"
	.space	3
	.type	rmnet_mux_ctrl_fops, %object
	.size	rmnet_mux_ctrl_fops, 108
rmnet_mux_ctrl_fops:
	.word	0
	.space	4
	.word	usb_rmnet_mux_ctrl_read
	.word	usb_rmnet_mux_ctrl_write
	.space	16
	.word	usb_rmnet_mux_ctrl_ioctl
	.space	8
	.word	usb_rmnet_mux_ctrl_open
	.space	4
	.word	usb_rmnet_mux_ctrl_release
	.space	52
	.type	__param_str_mux_sdio_rx_fctrl_dis_thld, %object
	.size	__param_str_mux_sdio_rx_fctrl_dis_thld, 35
__param_str_mux_sdio_rx_fctrl_dis_thld:
	.ascii	"android.mux_sdio_rx_fctrl_dis_thld\000"
	.space	1
	.type	__param_str_mux_sdio_rx_fctrl_en_thld, %object
	.size	__param_str_mux_sdio_rx_fctrl_en_thld, 34
__param_str_mux_sdio_rx_fctrl_en_thld:
	.ascii	"android.mux_sdio_rx_fctrl_en_thld\000"
	.space	2
	.type	__param_str_mux_sdio_tx_pkt_drop_thld, %object
	.size	__param_str_mux_sdio_tx_pkt_drop_thld, 34
__param_str_mux_sdio_tx_pkt_drop_thld:
	.ascii	"android.mux_sdio_tx_pkt_drop_thld\000"
	.space	2
	.type	__param_str_rmnet_mux_smd_data_ch, %object
	.size	__param_str_rmnet_mux_smd_data_ch, 30
__param_str_rmnet_mux_smd_data_ch:
	.ascii	"android.rmnet_mux_smd_data_ch\000"
	.space	2
	.type	__param_str_rmnet_mux_sdio_data_ch, %object
	.size	__param_str_rmnet_mux_sdio_data_ch, 31
__param_str_rmnet_mux_sdio_data_ch:
	.ascii	"android.rmnet_mux_sdio_data_ch\000"
	.space	1
	.type	__param_str_rmnet_mux_sdio_ctl_ch, %object
	.size	__param_str_rmnet_mux_sdio_ctl_ch, 30
__param_str_rmnet_mux_sdio_ctl_ch:
	.ascii	"android.rmnet_mux_sdio_ctl_ch\000"
	.space	2
	.type	__param_str_sdio_rx_fctrl_dis_thld, %object
	.size	__param_str_sdio_rx_fctrl_dis_thld, 31
__param_str_sdio_rx_fctrl_dis_thld:
	.ascii	"android.sdio_rx_fctrl_dis_thld\000"
	.space	1
	.type	__param_str_sdio_rx_fctrl_en_thld, %object
	.size	__param_str_sdio_rx_fctrl_en_thld, 30
__param_str_sdio_rx_fctrl_en_thld:
	.ascii	"android.sdio_rx_fctrl_en_thld\000"
	.space	2
	.type	__param_str_sdio_tx_pkt_drop_thld, %object
	.size	__param_str_sdio_tx_pkt_drop_thld, 30
__param_str_sdio_tx_pkt_drop_thld:
	.ascii	"android.sdio_tx_pkt_drop_thld\000"
	.space	2
	.type	__param_str_rmnet_sdio_data_ch, %object
	.size	__param_str_rmnet_sdio_data_ch, 27
__param_str_rmnet_sdio_data_ch:
	.ascii	"android.rmnet_sdio_data_ch\000"
	.space	1
	.type	__param_str_rmnet_sdio_ctl_ch, %object
	.size	__param_str_rmnet_sdio_ctl_ch, 26
__param_str_rmnet_sdio_ctl_ch:
	.ascii	"android.rmnet_sdio_ctl_ch\000"
	.space	2
	.type	__param_str_rmnet_data_ch, %object
	.size	__param_str_rmnet_data_ch, 22
__param_str_rmnet_data_ch:
	.ascii	"android.rmnet_data_ch\000"
	.space	2
	.type	__param_str_rmnet_ctl_ch, %object
	.size	__param_str_rmnet_ctl_ch, 21
__param_str_rmnet_ctl_ch:
	.ascii	"android.rmnet_ctl_ch\000"
	.space	3
	.type	__param_str_iSerialNumber, %object
	.size	__param_str_iSerialNumber, 22
__param_str_iSerialNumber:
	.ascii	"android.iSerialNumber\000"
	.space	2
	.type	__param_str_iProduct, %object
	.size	__param_str_iProduct, 17
__param_str_iProduct:
	.ascii	"android.iProduct\000"
	.space	3
	.type	__param_str_iManufacturer, %object
	.size	__param_str_iManufacturer, 22
__param_str_iManufacturer:
	.ascii	"android.iManufacturer\000"
	.space	2
	.type	__param_str_bcdDevice, %object
	.size	__param_str_bcdDevice, 18
__param_str_bcdDevice:
	.ascii	"android.bcdDevice\000"
	.space	2
	.type	__param_str_idProduct, %object
	.size	__param_str_idProduct, 18
__param_str_idProduct:
	.ascii	"android.idProduct\000"
	.space	2
	.type	__param_str_idVendor, %object
	.size	__param_str_idVendor, 17
__param_str_idVendor:
	.ascii	"android.idVendor\000"
	.data
	.align	3
	.set	.LANCHOR0,. + 0
	.set	.LANCHOR4,. + 8184
	.type	usb_diag_ch_list, %object
	.size	usb_diag_ch_list, 8
usb_diag_ch_list:
	.word	usb_diag_ch_list
	.word	usb_diag_ch_list
	.type	uac1_ac_header_desc, %object
	.size	uac1_ac_header_desc, 10
uac1_ac_header_desc:
	.byte	10
	.byte	36
	.byte	1
	.2byte	256
	.2byte	52
	.byte	2
	.space	2
	.space	2
	.type	ntb_parameters, %object
	.size	ntb_parameters, 28
ntb_parameters:
	.short	28
	.short	3
	.word	16384
	.short	4
	.short	0
	.short	4
	.space	2
	.word	16384
	.short	4
	.short	0
	.short	4
	.space	2
	.type	mbim_ntb_parameters, %object
	.size	mbim_ntb_parameters, 28
mbim_ntb_parameters:
	.short	28
	.short	1
	.word	16384
	.short	4
	.short	0
	.short	4
	.space	2
	.word	4096
	.short	4
	.short	0
	.short	4
	.short	0
	.type	ndp16_opts, %object
	.size	ndp16_opts, 44
ndp16_opts:
	.word	1213023054
	.word	810369870
	.word	12
	.word	8
	.word	4
	.word	1
	.word	1
	.word	1
	.word	0
	.word	0
	.word	1
	.type	ndp32_opts, %object
	.size	ndp32_opts, 44
ndp32_opts:
	.word	1751999342
	.word	812475246
	.word	16
	.word	16
	.word	8
	.word	2
	.word	2
	.word	2
	.word	1
	.word	2
	.word	2
	.type	mbim_ext_config_desc, %object
	.size	mbim_ext_config_desc, 40
mbim_ext_config_desc:
	.word	40
	.short	256
	.short	4
	.byte	1
	.space	7
	.byte	0
	.byte	1
	.byte	65
	.byte	76
	.byte	84
	.byte	82
	.byte	67
	.byte	70
	.byte	71
	.space	1
	.space	14
	.type	mbim_os_string, %object
	.size	mbim_os_string, 18
mbim_os_string:
	.byte	18
	.byte	3
	.byte	77
	.byte	0
	.byte	83
	.byte	0
	.byte	70
	.byte	0
	.byte	84
	.byte	0
	.byte	49
	.byte	0
	.byte	48
	.byte	0
	.byte	48
	.byte	0
	.byte	-91
	.byte	0
	.space	2
	.type	_rs.51696, %object
	.size	_rs.51696, 24
_rs.51696:
	.word	0
	.word	500
	.word	10
	.space	12
	.type	usb_qdss_ch_list, %object
	.size	usb_qdss_ch_list, 8
usb_qdss_ch_list:
	.word	usb_qdss_ch_list
	.word	usb_qdss_ch_list
	.type	android_platform_driver, %object
	.size	android_platform_driver, 80
android_platform_driver:
	.word	android_probe
	.word	android_remove
	.space	12
	.word	.LC669
	.space	16
	.word	usb_android_dt_match
	.space	32
	.word	android_id_table
	.type	rmnet_ctl_ch, %object
	.size	rmnet_ctl_ch, 4
rmnet_ctl_ch:
	.word	.LC525
	.type	rmnet_data_ch, %object
	.size	rmnet_data_ch, 4
rmnet_data_ch:
	.word	.LC525
	.type	mtp_os_string, %object
	.size	mtp_os_string, 18
mtp_os_string:
	.byte	18
	.byte	3
	.byte	77
	.byte	0
	.byte	83
	.byte	0
	.byte	70
	.byte	0
	.byte	84
	.byte	0
	.byte	49
	.byte	0
	.byte	48
	.byte	0
	.byte	48
	.byte	0
	.byte	1
	.byte	0
	.space	2
	.type	mtp_ext_config_desc, %object
	.size	mtp_ext_config_desc, 40
mtp_ext_config_desc:
	.word	40
	.short	256
	.short	4
	.byte	1
	.space	7
	.byte	0
	.byte	1
	.byte	77
	.byte	84
	.byte	80
	.space	5
	.space	14
	.type	ccid_class_desc, %object
	.size	ccid_class_desc, 54
ccid_class_desc:
	.byte	54
	.byte	33
	.short	272
	.byte	0
	.byte	2
	.4byte	1
	.4byte	3580
	.4byte	3580
	.byte	0
	.4byte	9600
	.4byte	9600
	.byte	0
	.word	0
	.word	0
	.word	0
	.word	131198
	.word	512
	.byte	0
	.byte	0
	.short	0
	.byte	0
	.byte	1
	.space	2
	.type	_rs.38170, %object
	.size	_rs.38170, 24
_rs.38170:
	.word	0
	.word	500
	.word	10
	.space	12
	.type	dl_intr_threshold, %object
	.size	dl_intr_threshold, 4
dl_intr_threshold:
	.word	20
	.type	ghsic_data_fctrl_support, %object
	.size	ghsic_data_fctrl_support, 4
ghsic_data_fctrl_support:
	.word	1
	.type	ghsic_data_fctrl_en_thld, %object
	.size	ghsic_data_fctrl_en_thld, 4
ghsic_data_fctrl_en_thld:
	.word	500
	.type	qmult, %object
	.size	qmult, 4
qmult:
	.word	10
	.type	mux_sdio_rx_fctrl_en_thld, %object
	.size	mux_sdio_rx_fctrl_en_thld, 4
mux_sdio_rx_fctrl_en_thld:
	.word	1000
	.type	bam_mux_rx_fctrl_support, %object
	.size	bam_mux_rx_fctrl_support, 4
bam_mux_rx_fctrl_support:
	.word	1
	.type	bam_mux_rx_fctrl_en_thld, %object
	.size	bam_mux_rx_fctrl_en_thld, 4
bam_mux_rx_fctrl_en_thld:
	.word	500
	.type	bam_mux_rx_req_size, %object
	.size	bam_mux_rx_req_size, 4
bam_mux_rx_req_size:
	.word	2048
	.type	mtp_rx_req_len, %object
	.size	mtp_rx_req_len, 4
mtp_rx_req_len:
	.word	16384
	.type	mtp_tx_req_len, %object
	.size	mtp_tx_req_len, 4
mtp_tx_req_len:
	.word	16384
	.type	device_desc, %object
	.size	device_desc, 18
device_desc:
	.byte	18
	.byte	1
	.short	512
	.byte	0
	.space	3
	.short	6353
	.short	1
	.short	-1
	.space	3
	.byte	1
	.space	2
	.type	bam_pending_limit, %object
	.size	bam_pending_limit, 4
bam_pending_limit:
	.word	220
	.type	bam_mux_rx_fctrl_dis_thld, %object
	.size	bam_mux_rx_fctrl_dis_thld, 4
bam_mux_rx_fctrl_dis_thld:
	.word	300
	.type	rmnet_device, %object
	.size	rmnet_device, 36
rmnet_device:
	.word	255
	.word	.LC1061
	.word	rmnet_ctrl_fops
	.space	24
	.type	acc_device, %object
	.size	acc_device, 36
acc_device:
	.word	255
	.word	.LC1049
	.word	acc_fops
	.space	24
	.type	rndis_qc_device, %object
	.size	rndis_qc_device, 36
rndis_qc_device:
	.word	255
	.word	.LC1038
	.word	rndis_qc_fops
	.space	24
	.type	mtp_device, %object
	.size	mtp_device, 36
mtp_device:
	.word	255
	.word	mtp_shortname
	.word	mtp_fops
	.space	24
	.type	adb_device, %object
	.size	adb_device, 36
adb_device:
	.word	255
	.word	adb_shortname
	.word	adb_fops
	.space	24
	.type	rmnet_mux_ctrl_dev, %object
	.size	rmnet_mux_ctrl_dev, 36
rmnet_mux_ctrl_dev:
	.word	255
	.word	.LC1075
	.word	rmnet_mux_ctrl_fops
	.space	24
	.type	mirrorlink_device, %object
	.size	mirrorlink_device, 36
mirrorlink_device:
	.word	255
	.word	mirrorlink_shortname
	.space	28
	.type	ccid_bulk_device, %object
	.size	ccid_bulk_device, 36
ccid_bulk_device:
	.word	255
	.word	.LC1054
	.word	ccid_bulk_fops
	.space	24
	.type	ccid_ctrl_device, %object
	.size	ccid_ctrl_device, 36
ccid_ctrl_device:
	.word	255
	.word	.LC1053
	.word	ccid_ctrl_fops
	.space	24
	.type	mbim_device, %object
	.size	mbim_device, 36
mbim_device:
	.word	255
	.word	.LC1045
	.word	mbim_fops
	.space	24
	.type	conn_gadget_device, %object
	.size	conn_gadget_device, 36
conn_gadget_device:
	.word	255
	.word	conn_gadget_shortname
	.word	conn_gadget_fops
	.space	24
	.type	android_usb_attributes, %object
	.size	android_usb_attributes, 76
android_usb_attributes:
	.word	dev_attr_idVendor
	.word	dev_attr_idProduct
	.word	dev_attr_bcdDevice
	.word	dev_attr_bDeviceClass
	.word	dev_attr_bDeviceSubClass
	.word	dev_attr_bDeviceProtocol
	.word	dev_attr_iManufacturer
	.word	dev_attr_iProduct
	.word	dev_attr_iSerial
	.word	dev_attr_functions
	.word	dev_attr_enable
	.word	dev_attr_pm_qos
	.word	dev_attr_state
	.word	dev_attr_bcdUSB
	.word	dev_attr_usb30en
	.word	dev_attr_ss_host_available
	.word	dev_attr_macos
	.word	dev_attr_remote_wakeup
	.word	0
	.type	android_usb_driver, %object
	.size	android_usb_driver, 44
android_usb_driver:
	.word	.LC669
	.space	8
	.word	device_desc
	.word	dev_strings
	.word	5
	.space	4
	.word	android_usb_unbind
	.space	12
	.type	composite_driver, %object
	.size	composite_driver, 88
composite_driver:
	.space	8
	.word	composite_unbind
	.word	composite_setup
	.word	composite_disconnect
	.word	composite_suspend
	.word	composite_resume
	.space	8
	.word	0
	.space	44
	.space	4
	.type	strings_dev, %object
	.size	strings_dev, 32
strings_dev:
	.space	4
	.word	manufacturer_string
	.space	4
	.word	product_string
	.space	4
	.word	serial_string
	.space	8
	.type	last_vote.63093, %object
	.size	last_vote.63093, 4
last_vote.63093:
	.word	-1
	.type	acc_hid_ll_driver, %object
	.size	acc_hid_ll_driver, 28
acc_hid_ll_driver:
	.word	acc_hid_start
	.word	acc_hid_stop
	.word	acc_hid_open
	.word	acc_hid_close
	.space	8
	.word	acc_hid_parse
	.type	dev_attr_cdrom, %object
	.size	dev_attr_cdrom, 16
dev_attr_cdrom:
	.word	.LC1069
	.short	420
	.space	2
	.word	fsg_show_cdrom
	.word	fsg_store_cdrom
	.type	dev_attr_nofua, %object
	.size	dev_attr_nofua, 16
dev_attr_nofua:
	.word	.LC1071
	.short	420
	.space	2
	.word	fsg_show_nofua
	.word	fsg_store_nofua
	.type	dev_attr_ro, %object
	.size	dev_attr_ro, 16
dev_attr_ro:
	.word	.LC1072
	.short	420
	.space	2
	.word	fsg_show_ro
	.word	fsg_store_ro
	.type	dev_attr_file, %object
	.size	dev_attr_file, 16
dev_attr_file:
	.word	.LC1070
	.short	420
	.space	2
	.word	fsg_show_file
	.word	fsg_store_file
	.type	ffs_fs_type, %object
	.size	ffs_fs_type, 36
ffs_fs_type:
	.word	.LC1073
	.space	4
	.word	ffs_fs_mount
	.space	8
	.word	ffs_fs_kill_sb
	.word	0
	.space	8
	.type	mbim_ndp16_opts, %object
	.size	mbim_ndp16_opts, 44
mbim_ndp16_opts:
	.word	1213023054
	.word	810369870
	.word	12
	.word	8
	.word	4
	.word	1
	.word	1
	.word	1
	.word	0
	.word	0
	.word	1
	.type	mbim_ndp32_opts, %object
	.size	mbim_ndp32_opts, 44
mbim_ndp32_opts:
	.word	1751999342
	.word	812475246
	.word	16
	.word	16
	.word	8
	.word	2
	.word	2
	.word	2
	.word	1
	.word	2
	.word	2
	.type	req_capture_buf_size, %object
	.size	req_capture_buf_size, 4
req_capture_buf_size:
	.word	32
	.type	audio_playback_buf_size, %object
	.size	audio_playback_buf_size, 4
audio_playback_buf_size:
	.word	8192
	.type	req_playback_count, %object
	.size	req_playback_count, 4
req_playback_count:
	.word	48
	.type	req_playback_buf_size, %object
	.size	req_playback_buf_size, 4
req_playback_buf_size:
	.word	32
	.type	acc_hid_driver, %object
	.size	acc_hid_driver, 132
acc_hid_driver:
	.word	.LC1048
	.word	acc_hid_table
	.space	12
	.word	acc_hid_probe
	.space	108
	.type	_rs.52034, %object
	.size	_rs.52034, 24
_rs.52034:
	.word	0
	.word	500
	.word	10
	.space	12
	.type	ghsuart_data_rx_req_size, %object
	.size	ghsuart_data_rx_req_size, 4
ghsuart_data_rx_req_size:
	.word	2048
	.type	_rs.52085, %object
	.size	_rs.52085, 24
_rs.52085:
	.word	0
	.word	500
	.word	10
	.space	12
	.type	ghsuart_data_tx_intr_thld, %object
	.size	ghsuart_data_tx_intr_thld, 4
ghsuart_data_tx_intr_thld:
	.word	1
	.type	_rs.51168, %object
	.size	_rs.51168, 24
_rs.51168:
	.word	0
	.word	500
	.word	10
	.space	12
	.type	ghsic_data_pend_limit_with_bridge, %object
	.size	ghsic_data_pend_limit_with_bridge, 4
ghsic_data_pend_limit_with_bridge:
	.word	500
	.type	ghsic_data_rx_req_size, %object
	.size	ghsic_data_rx_req_size, 4
ghsic_data_rx_req_size:
	.word	2048
	.type	_rs.51225, %object
	.size	_rs.51225, 24
_rs.51225:
	.word	0
	.word	500
	.word	10
	.space	12
	.type	ghsic_data_tx_intr_thld, %object
	.size	ghsic_data_tx_intr_thld, 4
ghsic_data_tx_intr_thld:
	.word	20
	.type	ghsic_data_fctrl_dis_thld, %object
	.size	ghsic_data_fctrl_dis_thld, 4
ghsic_data_fctrl_dis_thld:
	.word	300
	.type	bam_mux_tx_pkt_drop_thld, %object
	.size	bam_mux_tx_pkt_drop_thld, 4
bam_mux_tx_pkt_drop_thld:
	.word	1000
	.type	audio_capture_buf_size, %object
	.size	audio_capture_buf_size, 4
audio_capture_buf_size:
	.word	8192
	.type	bam_mux_rx_q_size, %object
	.size	bam_mux_rx_q_size, 4
bam_mux_rx_q_size:
	.word	16
	.type	bam_mux_tx_q_size, %object
	.size	bam_mux_tx_q_size, 4
bam_mux_tx_q_size:
	.word	200
	.type	sdio_rx_fctrl_en_thld, %object
	.size	sdio_rx_fctrl_en_thld, 4
sdio_rx_fctrl_en_thld:
	.word	1000
	.type	dev_attr_suspended, %object
	.size	dev_attr_suspended, 16
dev_attr_suspended:
	.word	.LC1080
	.short	292
	.space	2
	.word	composite_show_suspended
	.word	0
	.type	ecm_string_defs, %object
	.size	ecm_string_defs, 40
ecm_string_defs:
	.space	4
	.word	.LC1042
	.space	4
	.word	0
	.space	4
	.word	.LC1043
	.space	4
	.word	.LC1044
	.space	8
	.type	ncm_string_defs, %object
	.size	ncm_string_defs, 40
ncm_string_defs:
	.space	4
	.word	.LC1016
	.space	4
	.word	0
	.space	4
	.word	.LC1017
	.space	4
	.word	.LC1018
	.space	8
	.type	intf_desc, %object
	.size	intf_desc, 9
intf_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	-1
	.byte	16
	.byte	1
	.space	1
	.space	3
	.type	fs_bulk_in_desc, %object
	.size	fs_bulk_in_desc, 9
fs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.byte	0
	.space	2
	.space	3
	.type	fs_bulk_out_desc, %object
	.size	fs_bulk_out_desc, 9
fs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.byte	0
	.space	2
	.space	3
	.type	fs_diag_desc, %object
	.size	fs_diag_desc, 16
fs_diag_desc:
	.word	intf_desc
	.word	fs_bulk_in_desc
	.word	fs_bulk_out_desc
	.word	0
	.type	hs_bulk_in_desc, %object
	.size	hs_bulk_in_desc, 9
hs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.byte	0
	.space	2
	.space	3
	.type	hs_bulk_out_desc, %object
	.size	hs_bulk_out_desc, 9
hs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.byte	0
	.space	2
	.space	3
	.type	hs_diag_desc, %object
	.size	hs_diag_desc, 16
hs_diag_desc:
	.word	intf_desc
	.word	hs_bulk_in_desc
	.word	hs_bulk_out_desc
	.word	0
	.type	ss_bulk_in_desc, %object
	.size	ss_bulk_in_desc, 9
ss_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_bulk_out_desc, %object
	.size	ss_bulk_out_desc, 9
ss_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_diag_desc, %object
	.size	ss_diag_desc, 24
ss_diag_desc:
	.word	intf_desc
	.word	ss_bulk_in_desc
	.word	ss_bulk_in_comp_desc
	.word	ss_bulk_out_desc
	.word	ss_bulk_out_comp_desc
	.word	0
	.type	rmnet_smd_interface_desc, %object
	.size	rmnet_smd_interface_desc, 9
rmnet_smd_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_smd_fs_in_desc, %object
	.size	rmnet_smd_fs_in_desc, 9
rmnet_smd_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_smd_fs_out_desc, %object
	.size	rmnet_smd_fs_out_desc, 9
rmnet_smd_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_smd_fs_notify_desc, %object
	.size	rmnet_smd_fs_notify_desc, 9
rmnet_smd_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_smd_hs_in_desc, %object
	.size	rmnet_smd_hs_in_desc, 9
rmnet_smd_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_smd_hs_out_desc, %object
	.size	rmnet_smd_hs_out_desc, 9
rmnet_smd_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_smd_hs_notify_desc, %object
	.size	rmnet_smd_hs_notify_desc, 9
rmnet_smd_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rmnet_sdio_interface_desc, %object
	.size	rmnet_sdio_interface_desc, 9
rmnet_sdio_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_sdio_fs_in_desc, %object
	.size	rmnet_sdio_fs_in_desc, 9
rmnet_sdio_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_sdio_fs_out_desc, %object
	.size	rmnet_sdio_fs_out_desc, 9
rmnet_sdio_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_sdio_fs_notify_desc, %object
	.size	rmnet_sdio_fs_notify_desc, 9
rmnet_sdio_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_sdio_hs_in_desc, %object
	.size	rmnet_sdio_hs_in_desc, 9
rmnet_sdio_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_sdio_hs_out_desc, %object
	.size	rmnet_sdio_hs_out_desc, 9
rmnet_sdio_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_sdio_hs_notify_desc, %object
	.size	rmnet_sdio_hs_notify_desc, 9
rmnet_sdio_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	input_terminal_desc, %object
	.size	input_terminal_desc, 12
input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	1
	.short	513
	.byte	0
	.space	1
	.short	3
	.space	2
	.type	as_type_i_desc, %object
	.size	as_type_i_desc, 11
as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.space	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	audio_source_ac_interface_desc, %object
	.size	audio_source_ac_interface_desc, 9
audio_source_ac_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	0
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	as_interface_alt_0_desc, %object
	.size	as_interface_alt_0_desc, 9
as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	as_interface_alt_1_desc, %object
	.size	as_interface_alt_1_desc, 9
as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	fs_as_in_ep_desc, %object
	.size	fs_as_in_ep_desc, 9
fs_as_in_ep_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	13
	.short	256
	.byte	1
	.space	2
	.space	3
	.type	hs_as_in_ep_desc, %object
	.size	hs_as_in_ep_desc, 9
hs_as_in_ep_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	13
	.short	256
	.byte	4
	.space	2
	.space	3
	.type	ecm_qc_control_intf, %object
	.size	ecm_qc_control_intf, 9
ecm_qc_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_union_desc, %object
	.size	ecm_qc_union_desc, 5
ecm_qc_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ecm_qc_data_nop_intf, %object
	.size	ecm_qc_data_nop_intf, 9
ecm_qc_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_data_intf, %object
	.size	ecm_qc_data_intf, 9
ecm_qc_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_fs_in_desc, %object
	.size	ecm_qc_fs_in_desc, 9
ecm_qc_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	ecm_qc_fs_out_desc, %object
	.size	ecm_qc_fs_out_desc, 9
ecm_qc_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	ecm_qc_fs_notify_desc, %object
	.size	ecm_qc_fs_notify_desc, 9
ecm_qc_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	ecm_qc_fs_function, %object
	.size	ecm_qc_fs_function, 40
ecm_qc_fs_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_fs_notify_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_fs_in_desc
	.word	ecm_qc_fs_out_desc
	.word	0
	.type	ecm_qc_hs_in_desc, %object
	.size	ecm_qc_hs_in_desc, 9
ecm_qc_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ecm_qc_hs_out_desc, %object
	.size	ecm_qc_hs_out_desc, 9
ecm_qc_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ecm_qc_hs_notify_desc, %object
	.size	ecm_qc_hs_notify_desc, 9
ecm_qc_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ecm_qc_hs_function, %object
	.size	ecm_qc_hs_function, 40
ecm_qc_hs_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_hs_notify_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_hs_in_desc
	.word	ecm_qc_hs_out_desc
	.word	0
	.type	ecm_qc_ss_in_desc, %object
	.size	ecm_qc_ss_in_desc, 9
ecm_qc_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ecm_qc_ss_out_desc, %object
	.size	ecm_qc_ss_out_desc, 9
ecm_qc_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ecm_qc_ss_notify_desc, %object
	.size	ecm_qc_ss_notify_desc, 9
ecm_qc_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ecm_qc_ss_function, %object
	.size	ecm_qc_ss_function, 52
ecm_qc_ss_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_ss_notify_desc
	.word	ecm_qc_ss_notify_comp_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_ss_in_desc
	.word	ecm_qc_ss_in_comp_desc
	.word	ecm_qc_ss_out_desc
	.word	ecm_qc_ss_out_comp_desc
	.word	0
	.type	mbim_iad_desc, %object
	.size	mbim_iad_desc, 8
mbim_iad_desc:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	14
	.byte	0
	.space	1
	.type	mbim_control_intf, %object
	.size	mbim_control_intf, 9
mbim_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	14
	.byte	0
	.space	1
	.space	3
	.type	mbim_union_desc, %object
	.size	mbim_union_desc, 5
mbim_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	mbim_data_nop_intf, %object
	.size	mbim_data_nop_intf, 9
mbim_data_nop_intf:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	2
	.space	1
	.space	3
	.type	mbim_data_intf, %object
	.size	mbim_data_intf, 9
mbim_data_intf:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	2
	.space	1
	.space	3
	.type	fs_mbim_in_desc, %object
	.size	fs_mbim_in_desc, 9
fs_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_mbim_out_desc, %object
	.size	fs_mbim_out_desc, 9
fs_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_mbim_notify_desc, %object
	.size	fs_mbim_notify_desc, 9
fs_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	32
	.space	2
	.space	3
	.type	mbb_desc, %object
	.size	mbb_desc, 12
mbb_desc:
	.byte	12
	.byte	36
	.byte	27
	.2byte	256
	.2byte	4096
	.byte	32
	.byte	-128
	.2byte	4064
	.byte	32
	.type	mbim_fs_function, %object
	.size	mbim_fs_function, 48
mbim_fs_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	fs_mbim_notify_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	fs_mbim_in_desc
	.word	fs_mbim_out_desc
	.word	0
	.type	hs_mbim_in_desc, %object
	.size	hs_mbim_in_desc, 9
hs_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_mbim_out_desc, %object
	.size	hs_mbim_out_desc, 9
hs_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_mbim_notify_desc, %object
	.size	hs_mbim_notify_desc, 9
hs_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	9
	.space	2
	.space	3
	.type	mbim_hs_function, %object
	.size	mbim_hs_function, 48
mbim_hs_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	hs_mbim_notify_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	hs_mbim_in_desc
	.word	hs_mbim_out_desc
	.word	0
	.type	ss_mbim_in_desc, %object
	.size	ss_mbim_in_desc, 9
ss_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_mbim_out_desc, %object
	.size	ss_mbim_out_desc, 9
ss_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_mbim_notify_desc, %object
	.size	ss_mbim_notify_desc, 9
ss_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	9
	.space	2
	.space	3
	.type	mbim_ss_function, %object
	.size	mbim_ss_function, 60
mbim_ss_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	ss_mbim_notify_desc
	.word	ss_mbim_notify_comp_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	ss_mbim_in_desc
	.word	ss_mbim_in_comp_desc
	.word	ss_mbim_out_desc
	.word	ss_mbim_out_comp_desc
	.word	0
	.type	ecm_iad_descriptor, %object
	.size	ecm_iad_descriptor, 8
ecm_iad_descriptor:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	ecm_control_intf, %object
	.size	ecm_control_intf, 9
ecm_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.space	3
	.type	ecm_union_desc, %object
	.size	ecm_union_desc, 5
ecm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ecm_data_nop_intf, %object
	.size	ecm_data_nop_intf, 9
ecm_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_data_intf, %object
	.size	ecm_data_intf, 9
ecm_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	fs_ecm_in_desc, %object
	.size	fs_ecm_in_desc, 9
fs_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_ecm_out_desc, %object
	.size	fs_ecm_out_desc, 9
fs_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_ecm_notify_desc, %object
	.size	fs_ecm_notify_desc, 9
fs_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	hs_ecm_in_desc, %object
	.size	hs_ecm_in_desc, 9
hs_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ecm_out_desc, %object
	.size	hs_ecm_out_desc, 9
hs_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ecm_notify_desc, %object
	.size	hs_ecm_notify_desc, 9
hs_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ss_ecm_in_desc, %object
	.size	ss_ecm_in_desc, 9
ss_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_ecm_out_desc, %object
	.size	ss_ecm_out_desc, 9
ss_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_ecm_notify_desc, %object
	.size	ss_ecm_notify_desc, 9
ss_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ecm_ss_function, %object
	.size	ecm_ss_function, 52
ecm_ss_function:
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	ss_ecm_notify_desc
	.word	ss_ecm_intr_comp_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	ss_ecm_in_desc
	.word	ss_ecm_bulk_comp_desc
	.word	ss_ecm_out_desc
	.word	ss_ecm_bulk_comp_desc
	.word	0
	.type	ecm_hs_function, %object
	.size	ecm_hs_function, 44
ecm_hs_function:
	.word	ecm_iad_descriptor
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	hs_ecm_notify_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	hs_ecm_in_desc
	.word	hs_ecm_out_desc
	.word	0
	.type	ecm_fs_function, %object
	.size	ecm_fs_function, 44
ecm_fs_function:
	.word	ecm_iad_descriptor
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	fs_ecm_notify_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	fs_ecm_in_desc
	.word	fs_ecm_out_desc
	.word	0
	.type	speaker_input_terminal_desc, %object
	.size	speaker_input_terminal_desc, 12
speaker_input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	3
	.short	257
	.byte	4
	.space	1
	.short	3
	.space	2
	.type	speaker_as_type_i_desc, %object
	.size	speaker_as_type_i_desc, 11
speaker_as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.space	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	microphone_input_terminal_desc, %object
	.size	microphone_input_terminal_desc, 12
microphone_input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	1
	.short	513
	.byte	2
	.byte	1
	.short	3
	.space	2
	.type	microphone_as_type_i_desc, %object
	.size	microphone_as_type_i_desc, 11
microphone_as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.byte	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	uac1_ac_interface_desc, %object
	.size	uac1_ac_interface_desc, 9
uac1_ac_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	0
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	microphone_as_interface_alt_0_desc, %object
	.size	microphone_as_interface_alt_0_desc, 9
microphone_as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	microphone_as_interface_alt_1_desc, %object
	.size	microphone_as_interface_alt_1_desc, 9
microphone_as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	speaker_as_interface_alt_0_desc, %object
	.size	speaker_as_interface_alt_0_desc, 9
speaker_as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	speaker_as_interface_alt_1_desc, %object
	.size	speaker_as_interface_alt_1_desc, 9
speaker_as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	microphone_as_ep_in_desc, %object
	.size	microphone_as_ep_in_desc, 9
microphone_as_ep_in_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	5
	.short	32
	.byte	4
	.space	2
	.space	3
	.type	speaker_as_ep_out_desc, %object
	.size	speaker_as_ep_out_desc, 9
speaker_as_ep_out_desc:
	.byte	9
	.byte	5
	.byte	0
	.byte	9
	.short	32
	.byte	4
	.space	2
	.space	3
	.type	microphone_as_iso_in, %object
	.size	microphone_as_iso_in, 32
microphone_as_iso_in:
	.word	microphone_as_iso_in
	.word	microphone_as_iso_in
	.space	12
	.word	.LC1024
	.byte	1
	.space	3
	.word	microphone_as_iso_in_desc
	.type	speaker_as_iso_out, %object
	.size	speaker_as_iso_out, 32
speaker_as_iso_out:
	.word	speaker_as_iso_out
	.word	speaker_as_iso_out
	.space	12
	.word	.LC1026
	.byte	1
	.space	3
	.word	speaker_as_iso_out_desc
	.type	f_audio_desc, %object
	.size	f_audio_desc, 76
f_audio_desc:
	.word	uac1_ac_interface_desc
	.word	uac1_ac_header_desc
	.word	microphone_input_terminal_desc
	.word	microphone_output_terminal_desc
	.word	speaker_input_terminal_desc
	.word	speaker_output_terminal_desc
	.word	microphone_as_interface_alt_0_desc
	.word	microphone_as_interface_alt_1_desc
	.word	microphone_as_header_desc
	.word	microphone_as_type_i_desc
	.word	microphone_as_ep_in_desc
	.word	microphone_as_iso_in_desc
	.word	speaker_as_interface_alt_0_desc
	.word	speaker_as_interface_alt_1_desc
	.word	speaker_as_header_desc
	.word	speaker_as_type_i_desc
	.word	speaker_as_ep_out_desc
	.word	speaker_as_iso_out_desc
	.word	0
	.type	ncm_iad_desc, %object
	.size	ncm_iad_desc, 8
ncm_iad_desc:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	13
	.byte	0
	.space	1
	.type	ncm_control_intf, %object
	.size	ncm_control_intf, 9
ncm_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	13
	.byte	0
	.space	1
	.space	3
	.type	ncm_union_desc, %object
	.size	ncm_union_desc, 5
ncm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ncm_data_nop_intf, %object
	.size	ncm_data_nop_intf, 9
ncm_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	1
	.space	1
	.space	3
	.type	ncm_data_intf, %object
	.size	ncm_data_intf, 9
ncm_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	1
	.space	1
	.space	3
	.type	fs_ncm_in_desc, %object
	.size	fs_ncm_in_desc, 9
fs_ncm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_ncm_out_desc, %object
	.size	fs_ncm_out_desc, 9
fs_ncm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_ncm_notify_desc, %object
	.size	fs_ncm_notify_desc, 9
fs_ncm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	hs_ncm_in_desc, %object
	.size	hs_ncm_in_desc, 9
hs_ncm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ncm_out_desc, %object
	.size	hs_ncm_out_desc, 9
hs_ncm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ncm_notify_desc, %object
	.size	hs_ncm_notify_desc, 9
hs_ncm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ncm_hs_function, %object
	.size	ncm_hs_function, 48
ncm_hs_function:
	.word	ncm_iad_desc
	.word	ncm_control_intf
	.word	ncm_header_desc
	.word	ncm_union_desc
	.word	necm_desc
	.word	ncm_desc
	.word	hs_ncm_notify_desc
	.word	ncm_data_nop_intf
	.word	ncm_data_intf
	.word	hs_ncm_in_desc
	.word	hs_ncm_out_desc
	.word	0
	.type	ncm_fs_function, %object
	.size	ncm_fs_function, 48
ncm_fs_function:
	.word	ncm_iad_desc
	.word	ncm_control_intf
	.word	ncm_header_desc
	.word	ncm_union_desc
	.word	necm_desc
	.word	ncm_desc
	.word	fs_ncm_notify_desc
	.word	ncm_data_nop_intf
	.word	ncm_data_intf
	.word	fs_ncm_in_desc
	.word	fs_ncm_out_desc
	.word	0
	.type	fsg_intf_desc, %object
	.size	fsg_intf_desc, 9
fsg_intf_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	8
	.byte	6
	.byte	80
	.byte	0
	.space	3
	.type	fsg_fs_bulk_in_desc, %object
	.size	fsg_fs_bulk_in_desc, 9
fsg_fs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fsg_fs_bulk_out_desc, %object
	.size	fsg_fs_bulk_out_desc, 9
fsg_fs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fsg_hs_bulk_in_desc, %object
	.size	fsg_hs_bulk_in_desc, 9
fsg_hs_bulk_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	fsg_hs_bulk_out_desc, %object
	.size	fsg_hs_bulk_out_desc, 9
fsg_hs_bulk_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.byte	1
	.space	2
	.space	3
	.type	fsg_ss_bulk_in_desc, %object
	.size	fsg_ss_bulk_in_desc, 9
fsg_ss_bulk_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	fsg_ss_bulk_in_comp_desc, %object
	.size	fsg_ss_bulk_in_comp_desc, 6
fsg_ss_bulk_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	fsg_ss_bulk_out_desc, %object
	.size	fsg_ss_bulk_out_desc, 9
fsg_ss_bulk_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	fsg_ss_bulk_out_comp_desc, %object
	.size	fsg_ss_bulk_out_comp_desc, 6
fsg_ss_bulk_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	fsg_ss_function, %object
	.size	fsg_ss_function, 24
fsg_ss_function:
	.word	fsg_intf_desc
	.word	fsg_ss_bulk_in_desc
	.word	fsg_ss_bulk_in_comp_desc
	.word	fsg_ss_bulk_out_desc
	.word	fsg_ss_bulk_out_comp_desc
	.word	0
	.type	fsg_hs_function, %object
	.size	fsg_hs_function, 16
fsg_hs_function:
	.word	fsg_intf_desc
	.word	fsg_hs_bulk_in_desc
	.word	fsg_hs_bulk_out_desc
	.word	0
	.type	fsg_fs_function, %object
	.size	fsg_fs_function, 16
fsg_fs_function:
	.word	fsg_intf_desc
	.word	fsg_fs_bulk_in_desc
	.word	fsg_fs_bulk_out_desc
	.word	0
	.type	ccid_interface_desc, %object
	.size	ccid_interface_desc, 9
ccid_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	11
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ccid_fs_notify_desc, %object
	.size	ccid_fs_notify_desc, 9
ccid_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	4
	.byte	32
	.space	2
	.space	3
	.type	ccid_fs_in_desc, %object
	.size	ccid_fs_in_desc, 9
ccid_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	ccid_fs_out_desc, %object
	.size	ccid_fs_out_desc, 9
ccid_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	ccid_fs_descs, %object
	.size	ccid_fs_descs, 24
ccid_fs_descs:
	.word	ccid_interface_desc
	.word	ccid_class_desc
	.word	ccid_fs_notify_desc
	.word	ccid_fs_in_desc
	.word	ccid_fs_out_desc
	.word	0
	.type	ccid_hs_in_desc, %object
	.size	ccid_hs_in_desc, 9
ccid_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ccid_hs_out_desc, %object
	.size	ccid_hs_out_desc, 9
ccid_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ccid_hs_notify_desc, %object
	.size	ccid_hs_notify_desc, 9
ccid_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	4
	.byte	9
	.space	2
	.space	3
	.type	ccid_hs_descs, %object
	.size	ccid_hs_descs, 24
ccid_hs_descs:
	.word	ccid_interface_desc
	.word	ccid_class_desc
	.word	ccid_hs_notify_desc
	.word	ccid_hs_in_desc
	.word	ccid_hs_out_desc
	.word	0
	.type	qdss_data_intf_desc, %object
	.size	qdss_data_intf_desc, 9
qdss_data_intf_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	1
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	qdss_ctrl_intf_desc, %object
	.size	qdss_ctrl_intf_desc, 9
qdss_ctrl_intf_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	2
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	qdss_data_ep_comp_desc, %object
	.size	qdss_data_ep_comp_desc, 6
qdss_data_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	1
	.byte	0
	.short	0
	.space	2
	.type	qdss_ss_data_desc, %object
	.size	qdss_ss_data_desc, 9
qdss_ss_data_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_ctrl_in_ep_comp_desc, %object
	.size	qdss_ctrl_in_ep_comp_desc, 6
qdss_ctrl_in_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	0
	.byte	0
	.short	0
	.space	2
	.type	qdss_ss_ctrl_in_desc, %object
	.size	qdss_ss_ctrl_in_desc, 9
qdss_ss_ctrl_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_ctrl_out_ep_comp_desc, %object
	.size	qdss_ctrl_out_ep_comp_desc, 6
qdss_ctrl_out_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	0
	.byte	0
	.short	0
	.space	2
	.type	qdss_ss_ctrl_out_desc, %object
	.size	qdss_ss_ctrl_out_desc, 9
qdss_ss_ctrl_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_hs_data_desc, %object
	.size	qdss_hs_data_desc, 9
qdss_hs_data_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	qdss_hs_ctrl_in_desc, %object
	.size	qdss_hs_ctrl_in_desc, 9
qdss_hs_ctrl_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	qdss_hs_ctrl_out_desc, %object
	.size	qdss_hs_ctrl_out_desc, 9
qdss_hs_ctrl_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	qdss_hs_desc, %object
	.size	qdss_hs_desc, 24
qdss_hs_desc:
	.word	qdss_data_intf_desc
	.word	qdss_hs_data_desc
	.word	qdss_ctrl_intf_desc
	.word	qdss_hs_ctrl_in_desc
	.word	qdss_hs_ctrl_out_desc
	.word	0
	.type	qdss_ss_desc, %object
	.size	qdss_ss_desc, 36
qdss_ss_desc:
	.word	qdss_data_intf_desc
	.word	qdss_ss_data_desc
	.word	qdss_data_ep_comp_desc
	.word	qdss_ctrl_intf_desc
	.word	qdss_ss_ctrl_in_desc
	.word	qdss_ctrl_in_ep_comp_desc
	.word	qdss_ss_ctrl_out_desc
	.word	qdss_ctrl_out_ep_comp_desc
	.word	0
	.type	rmnet_mux_interface_desc, %object
	.size	rmnet_mux_interface_desc, 9
rmnet_mux_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_mux_fs_in_desc, %object
	.size	rmnet_mux_fs_in_desc, 9
rmnet_mux_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_mux_fs_out_desc, %object
	.size	rmnet_mux_fs_out_desc, 9
rmnet_mux_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_mux_fs_notify_desc, %object
	.size	rmnet_mux_fs_notify_desc, 9
rmnet_mux_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_mux_hs_in_desc, %object
	.size	rmnet_mux_hs_in_desc, 9
rmnet_mux_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_mux_hs_out_desc, %object
	.size	rmnet_mux_hs_out_desc, 9
rmnet_mux_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_mux_hs_notify_desc, %object
	.size	rmnet_mux_hs_notify_desc, 9
rmnet_mux_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	midi_string_defs, %object
	.size	midi_string_defs, 16
midi_string_defs:
	.space	4
	.word	.LC1052
	.space	8
	.type	midi_ac_interface_desc, %object
	.size	midi_ac_interface_desc, 9
midi_ac_interface_desc:
	.byte	9
	.byte	4
	.space	3
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	midi_ms_interface_desc, %object
	.size	midi_ms_interface_desc, 9
midi_ms_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	1
	.byte	3
	.space	2
	.space	3
	.type	midi_ac_header_desc, %object
	.size	midi_ac_header_desc, 9
midi_ac_header_desc:
	.byte	9
	.byte	36
	.byte	1
	.2byte	256
	.2byte	9
	.byte	1
	.space	1
	.space	3
	.type	midi_bulk_in_desc, %object
	.size	midi_bulk_in_desc, 9
midi_bulk_in_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	midi_bulk_out_desc, %object
	.size	midi_bulk_out_desc, 9
midi_bulk_out_desc:
	.byte	9
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	midi_ms_header_desc, %object
	.size	midi_ms_header_desc, 7
midi_ms_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.2byte	256
	.space	2
	.space	1
	.type	midi_ms_in_desc, %object
	.size	midi_ms_in_desc, 20
midi_ms_in_desc:
	.space	1
	.byte	37
	.byte	1
	.space	17
	.type	midi_ms_out_desc, %object
	.size	midi_ms_out_desc, 20
midi_ms_out_desc:
	.space	1
	.byte	37
	.byte	1
	.space	17
	.type	rmnet_interface_desc, %object
	.size	rmnet_interface_desc, 9
rmnet_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-32
	.byte	0
	.space	1
	.space	3
	.type	rmnet_fs_in_desc, %object
	.size	rmnet_fs_in_desc, 9
rmnet_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_fs_out_desc, %object
	.size	rmnet_fs_out_desc, 9
rmnet_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_fs_notify_desc, %object
	.size	rmnet_fs_notify_desc, 9
rmnet_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_fs_function, %object
	.size	rmnet_fs_function, 20
rmnet_fs_function:
	.word	rmnet_interface_desc
	.word	rmnet_fs_notify_desc
	.word	rmnet_fs_in_desc
	.word	rmnet_fs_out_desc
	.word	0
	.type	rmnet_hs_in_desc, %object
	.size	rmnet_hs_in_desc, 9
rmnet_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_hs_out_desc, %object
	.size	rmnet_hs_out_desc, 9
rmnet_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_hs_notify_desc, %object
	.size	rmnet_hs_notify_desc, 9
rmnet_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rmnet_hs_function, %object
	.size	rmnet_hs_function, 20
rmnet_hs_function:
	.word	rmnet_interface_desc
	.word	rmnet_hs_notify_desc
	.word	rmnet_hs_in_desc
	.word	rmnet_hs_out_desc
	.word	0
	.type	rmnet_ss_in_desc, %object
	.size	rmnet_ss_in_desc, 9
rmnet_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rmnet_ss_out_desc, %object
	.size	rmnet_ss_out_desc, 9
rmnet_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rmnet_ss_notify_desc, %object
	.size	rmnet_ss_notify_desc, 9
rmnet_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rmnet_ss_function, %object
	.size	rmnet_ss_function, 32
rmnet_ss_function:
	.word	rmnet_interface_desc
	.word	rmnet_ss_notify_desc
	.word	rmnet_ss_notify_comp_desc
	.word	rmnet_ss_in_desc
	.word	rmnet_ss_in_comp_desc
	.word	rmnet_ss_out_desc
	.word	rmnet_ss_out_comp_desc
	.word	0
	.type	rndis_iad_descriptor, %object
	.size	rndis_iad_descriptor, 8
rndis_iad_descriptor:
	.byte	8
	.byte	11
	.byte	0
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	rndis_control_intf, %object
	.size	rndis_control_intf, 9
rndis_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	-1
	.space	1
	.space	3
	.type	rndis_union_desc, %object
	.size	rndis_union_desc, 5
rndis_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	rndis_data_intf, %object
	.size	rndis_data_intf, 9
rndis_data_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	fs_in_desc, %object
	.size	fs_in_desc, 9
fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_out_desc, %object
	.size	fs_out_desc, 9
fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_notify_desc, %object
	.size	fs_notify_desc, 9
fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	hs_in_desc, %object
	.size	hs_in_desc, 9
hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_out_desc, %object
	.size	hs_out_desc, 9
hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_notify_desc, %object
	.size	hs_notify_desc, 9
hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	ss_in_desc, %object
	.size	ss_in_desc, 9
ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_out_desc, %object
	.size	ss_out_desc, 9
ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_notify_desc, %object
	.size	ss_notify_desc, 9
ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	eth_ss_function, %object
	.size	eth_ss_function, 56
eth_ss_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	ss_notify_desc
	.word	ss_intr_comp_desc
	.word	rndis_data_intf
	.word	ss_in_desc
	.word	ss_bulk_comp_desc
	.word	ss_out_desc
	.word	ss_bulk_comp_desc
	.word	0
	.type	eth_hs_function, %object
	.size	eth_hs_function, 44
eth_hs_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	hs_notify_desc
	.word	rndis_data_intf
	.word	hs_in_desc
	.word	hs_out_desc
	.word	0
	.type	eth_fs_function, %object
	.size	eth_fs_function, 44
eth_fs_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	fs_notify_desc
	.word	rndis_data_intf
	.word	fs_in_desc
	.word	fs_out_desc
	.word	0
	.type	rndis_ul_max_pkt_per_xfer, %object
	.size	rndis_ul_max_pkt_per_xfer, 4
rndis_ul_max_pkt_per_xfer:
	.word	3
	.type	rndis_qc_iad_descriptor, %object
	.size	rndis_qc_iad_descriptor, 8
rndis_qc_iad_descriptor:
	.byte	8
	.byte	11
	.byte	0
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	rndis_qc_control_intf, %object
	.size	rndis_qc_control_intf, 9
rndis_qc_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	-1
	.space	1
	.space	3
	.type	rndis_qc_union_desc, %object
	.size	rndis_qc_union_desc, 5
rndis_qc_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	rndis_qc_data_intf, %object
	.size	rndis_qc_data_intf, 9
rndis_qc_data_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	rndis_qc_fs_in_desc, %object
	.size	rndis_qc_fs_in_desc, 9
rndis_qc_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	rndis_qc_fs_out_desc, %object
	.size	rndis_qc_fs_out_desc, 9
rndis_qc_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	rndis_qc_fs_notify_desc, %object
	.size	rndis_qc_fs_notify_desc, 9
rndis_qc_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	eth_qc_fs_function, %object
	.size	eth_qc_fs_function, 44
eth_qc_fs_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_fs_notify_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_fs_in_desc
	.word	rndis_qc_fs_out_desc
	.word	0
	.type	rndis_qc_hs_in_desc, %object
	.size	rndis_qc_hs_in_desc, 9
rndis_qc_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rndis_qc_hs_out_desc, %object
	.size	rndis_qc_hs_out_desc, 9
rndis_qc_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rndis_qc_hs_notify_desc, %object
	.size	rndis_qc_hs_notify_desc, 9
rndis_qc_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	eth_qc_hs_function, %object
	.size	eth_qc_hs_function, 44
eth_qc_hs_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_hs_notify_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_hs_in_desc
	.word	rndis_qc_hs_out_desc
	.word	0
	.type	rndis_qc_ss_in_desc, %object
	.size	rndis_qc_ss_in_desc, 9
rndis_qc_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rndis_qc_ss_out_desc, %object
	.size	rndis_qc_ss_out_desc, 9
rndis_qc_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rndis_qc_ss_notify_desc, %object
	.size	rndis_qc_ss_notify_desc, 9
rndis_qc_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	eth_qc_ss_function, %object
	.size	eth_qc_ss_function, 56
eth_qc_ss_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_ss_notify_desc
	.word	rndis_qc_ss_intr_comp_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_ss_in_desc
	.word	rndis_qc_ss_bulk_comp_desc
	.word	rndis_qc_ss_out_desc
	.word	rndis_qc_ss_bulk_comp_desc
	.word	0
	.type	acc_interface_desc, %object
	.size	acc_interface_desc, 9
acc_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	2
	.byte	-1
	.byte	-1
	.byte	0
	.space	1
	.space	3
	.type	acc_fullspeed_in_desc, %object
	.size	acc_fullspeed_in_desc, 9
acc_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	acc_fullspeed_out_desc, %object
	.size	acc_fullspeed_out_desc, 9
acc_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	acc_highspeed_in_desc, %object
	.size	acc_highspeed_in_desc, 9
acc_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acc_highspeed_out_desc, %object
	.size	acc_highspeed_out_desc, 9
acc_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acc_superspeed_in_desc, %object
	.size	acc_superspeed_in_desc, 9
acc_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acc_superspeed_out_desc, %object
	.size	acc_superspeed_out_desc, 9
acc_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	mtp_interface_desc, %object
	.size	mtp_interface_desc, 9
mtp_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	3
	.byte	-1
	.byte	-1
	.byte	0
	.space	1
	.space	3
	.type	mtp_fullspeed_in_desc, %object
	.size	mtp_fullspeed_in_desc, 9
mtp_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	mtp_fullspeed_out_desc, %object
	.size	mtp_fullspeed_out_desc, 9
mtp_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	mtp_intr_desc, %object
	.size	mtp_intr_desc, 9
mtp_intr_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	28
	.byte	6
	.space	2
	.space	3
	.type	mtp_tx_reqs, %object
	.size	mtp_tx_reqs, 4
mtp_tx_reqs:
	.word	8
	.type	mtp_highspeed_in_desc, %object
	.size	mtp_highspeed_in_desc, 9
mtp_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	mtp_highspeed_out_desc, %object
	.size	mtp_highspeed_out_desc, 9
mtp_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	mtp_superspeed_in_desc, %object
	.size	mtp_superspeed_in_desc, 9
mtp_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	mtp_superspeed_out_desc, %object
	.size	mtp_superspeed_out_desc, 9
mtp_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	fs_conn_gadget_descs, %object
	.size	fs_conn_gadget_descs, 16
fs_conn_gadget_descs:
	.word	conn_gadget_interface_desc
	.word	conn_gadget_fullspeed_in_desc
	.word	conn_gadget_fullspeed_out_desc
	.word	0
	.type	hs_conn_gadget_descs, %object
	.size	hs_conn_gadget_descs, 16
hs_conn_gadget_descs:
	.word	conn_gadget_interface_desc
	.word	conn_gadget_highspeed_in_desc
	.word	conn_gadget_highspeed_out_desc
	.word	0
	.type	ss_conn_gadget_descs, %object
	.size	ss_conn_gadget_descs, 24
ss_conn_gadget_descs:
	.word	conn_gadget_interface_desc
	.word	conn_gadget_superspeed_in_desc
	.word	conn_gadget_superspeed_bulk_comp_desc
	.word	conn_gadget_superspeed_out_desc
	.word	conn_gadget_superspeed_bulk_comp_desc
	.word	0
	.type	fs_adb_descs, %object
	.size	fs_adb_descs, 16
fs_adb_descs:
	.word	adb_interface_desc
	.word	adb_fullspeed_in_desc
	.word	adb_fullspeed_out_desc
	.word	0
	.type	hs_adb_descs, %object
	.size	hs_adb_descs, 16
hs_adb_descs:
	.word	adb_interface_desc
	.word	adb_highspeed_in_desc
	.word	adb_highspeed_out_desc
	.word	0
	.type	ss_adb_descs, %object
	.size	ss_adb_descs, 24
ss_adb_descs:
	.word	adb_interface_desc
	.word	adb_superspeed_in_desc
	.word	adb_superspeed_in_comp_desc
	.word	adb_superspeed_out_desc
	.word	adb_superspeed_out_comp_desc
	.word	0
	.type	rmnet_mux_strings, %object
	.size	rmnet_mux_strings, 8
rmnet_mux_strings:
	.word	rmnet_mux_string_table
	.word	0
	.type	rmnet_mux_fs_function, %object
	.size	rmnet_mux_fs_function, 20
rmnet_mux_fs_function:
	.word	rmnet_mux_interface_desc
	.word	rmnet_mux_fs_notify_desc
	.word	rmnet_mux_fs_in_desc
	.word	rmnet_mux_fs_out_desc
	.word	0
	.type	rmnet_mux_hs_function, %object
	.size	rmnet_mux_hs_function, 20
rmnet_mux_hs_function:
	.word	rmnet_mux_interface_desc
	.word	rmnet_mux_hs_notify_desc
	.word	rmnet_mux_hs_in_desc
	.word	rmnet_mux_hs_out_desc
	.word	0
	.type	acc_string_defs, %object
	.size	acc_string_defs, 16
acc_string_defs:
	.space	4
	.word	.LC1050
	.space	8
	.type	acc_strings, %object
	.size	acc_strings, 8
acc_strings:
	.word	acc_string_table
	.word	0
	.type	fs_acc_descs, %object
	.size	fs_acc_descs, 16
fs_acc_descs:
	.word	acc_interface_desc
	.word	acc_fullspeed_in_desc
	.word	acc_fullspeed_out_desc
	.word	0
	.type	hs_acc_descs, %object
	.size	hs_acc_descs, 16
hs_acc_descs:
	.word	acc_interface_desc
	.word	acc_highspeed_in_desc
	.word	acc_highspeed_out_desc
	.word	0
	.type	ss_acc_descs, %object
	.size	ss_acc_descs, 24
ss_acc_descs:
	.word	acc_interface_desc
	.word	acc_superspeed_in_desc
	.word	acc_superspeed_in_comp_desc
	.word	acc_superspeed_out_desc
	.word	acc_superspeed_out_comp_desc
	.word	0
	.type	fsg_strings, %object
	.size	fsg_strings, 16
fsg_strings:
	.byte	0
	.space	3
	.word	fsg_string_interface
	.space	8
	.type	fsg_strings_array, %object
	.size	fsg_strings_array, 8
fsg_strings_array:
	.word	fsg_stringtab
	.word	0
	.type	mtp_string_defs, %object
	.size	mtp_string_defs, 16
mtp_string_defs:
	.space	4
	.word	.LC1051
	.space	8
	.type	mtp_strings, %object
	.size	mtp_strings, 8
mtp_strings:
	.word	mtp_string_table
	.word	0
	.type	fs_ptp_descs, %object
	.size	fs_ptp_descs, 20
fs_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_fullspeed_in_desc
	.word	mtp_fullspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	hs_ptp_descs, %object
	.size	hs_ptp_descs, 20
hs_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_highspeed_in_desc
	.word	mtp_highspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	ss_ptp_descs, %object
	.size	ss_ptp_descs, 32
ss_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_superspeed_in_desc
	.word	mtp_superspeed_in_comp_desc
	.word	mtp_superspeed_out_desc
	.word	mtp_superspeed_out_comp_desc
	.word	mtp_intr_desc
	.word	mtp_superspeed_intr_comp_desc
	.word	0
	.type	fs_mtp_descs, %object
	.size	fs_mtp_descs, 20
fs_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_fullspeed_in_desc
	.word	mtp_fullspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	hs_mtp_descs, %object
	.size	hs_mtp_descs, 20
hs_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_highspeed_in_desc
	.word	mtp_highspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	ss_mtp_descs, %object
	.size	ss_mtp_descs, 32
ss_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_superspeed_in_desc
	.word	mtp_superspeed_in_comp_desc
	.word	mtp_superspeed_out_desc
	.word	mtp_superspeed_out_comp_desc
	.word	mtp_intr_desc
	.word	mtp_superspeed_intr_comp_desc
	.word	0
	.type	qdss_string_defs, %object
	.size	qdss_string_defs, 24
qdss_string_defs:
	.space	4
	.word	.LC1078
	.space	4
	.word	.LC1079
	.space	8
	.type	qdss_strings, %object
	.size	qdss_strings, 8
qdss_strings:
	.word	qdss_string_table
	.word	0
	.type	rl.52766, %object
	.size	rl.52766, 24
rl.52766:
	.word	0
	.word	1000
	.word	1
	.space	12
	.type	adb_function, %object
	.size	adb_function, 52
adb_function:
	.word	.LC644
	.space	20
	.word	adb_function_init
	.word	adb_function_cleanup
	.word	adb_android_function_enable
	.word	adb_android_function_disable
	.word	adb_function_bind_config
	.space	8
	.type	ffs_function, %object
	.size	ffs_function, 52
ffs_function:
	.word	.LC327
	.space	12
	.word	ffs_function_attributes
	.space	4
	.word	ffs_function_init
	.word	ffs_function_cleanup
	.word	ffs_function_enable
	.word	ffs_function_disable
	.word	ffs_function_bind_config
	.space	8
	.type	supported_functions, %object
	.size	supported_functions, 104
supported_functions:
	.word	ffs_function
	.word	mbim_function
	.word	ecm_qc_function
	.word	audio_function
	.word	rmnet_smd_function
	.word	rmnet_sdio_function
	.word	rmnet_smd_sdio_function
	.word	rmnet_function
	.word	diag_function
	.word	qdss_function
	.word	adb_function
	.word	midi_function
	.word	ccid_function
	.word	acm_function
	.word	mtp_function
	.word	ptp_function
	.word	rndis_function
	.word	rndis_qc_function
	.word	ecm_function
	.word	ncm_function
	.word	mass_storage_function
	.word	accessory_function
	.word	conn_gadget_function
	.word	audio_source_function
	.word	uasp_function
	.word	0
	.type	dev_attr_terminal_version, %object
	.size	dev_attr_terminal_version, 16
dev_attr_terminal_version:
	.word	.LC1015
	.short	420
	.space	2
	.word	terminal_version_show
	.word	terminal_version_store
	.type	modem_device, %object
	.size	modem_device, 36
modem_device:
	.word	123
	.word	.LC1058
	.word	modem_fops
	.space	24
	.type	rl.26025, %object
	.size	rl.26025, 24
rl.26025:
	.word	0
	.word	1000
	.word	1
	.space	12
	.type	rl.26043, %object
	.size	rl.26043, 24
rl.26043:
	.word	0
	.word	1000
	.word	1
	.space	12
	.type	rmnet_smd_strings, %object
	.size	rmnet_smd_strings, 8
rmnet_smd_strings:
	.word	rmnet_smd_string_table
	.word	0
	.type	rmnet_smd_fs_function, %object
	.size	rmnet_smd_fs_function, 20
rmnet_smd_fs_function:
	.word	rmnet_smd_interface_desc
	.word	rmnet_smd_fs_notify_desc
	.word	rmnet_smd_fs_in_desc
	.word	rmnet_smd_fs_out_desc
	.word	0
	.type	rmnet_smd_hs_function, %object
	.size	rmnet_smd_hs_function, 20
rmnet_smd_hs_function:
	.word	rmnet_smd_interface_desc
	.word	rmnet_smd_hs_notify_desc
	.word	rmnet_smd_hs_in_desc
	.word	rmnet_smd_hs_out_desc
	.word	0
	.type	rmnet_sdio_strings, %object
	.size	rmnet_sdio_strings, 8
rmnet_sdio_strings:
	.word	rmnet_sdio_string_table
	.word	0
	.type	rmnet_sdio_fs_function, %object
	.size	rmnet_sdio_fs_function, 20
rmnet_sdio_fs_function:
	.word	rmnet_sdio_interface_desc
	.word	rmnet_sdio_fs_notify_desc
	.word	rmnet_sdio_fs_in_desc
	.word	rmnet_sdio_fs_out_desc
	.word	0
	.type	rmnet_sdio_hs_function, %object
	.size	rmnet_sdio_hs_function, 20
rmnet_sdio_hs_function:
	.word	rmnet_sdio_interface_desc
	.word	rmnet_sdio_hs_notify_desc
	.word	rmnet_sdio_hs_in_desc
	.word	rmnet_sdio_hs_out_desc
	.word	0
	.type	_audio_dev, %object
	.size	_audio_dev, 160
_audio_dev:
	.word	.LC727
	.space	4
	.word	hs_audio_desc
	.space	4
	.word	fs_audio_desc
	.space	12
	.word	audio_bind
	.word	audio_unbind
	.word	audio_set_alt
	.space	4
	.word	audio_disable
	.word	audio_setup
	.space	28
	.space	12
	.word	_audio_dev+96
	.word	_audio_dev+96
	.space	4
	.word	0
	.space	48
	.type	audio_playback_ops, %object
	.size	audio_playback_ops, 56
audio_playback_ops:
	.word	audio_pcm_open
	.word	audio_pcm_close
	.word	snd_pcm_lib_ioctl
	.word	audio_pcm_hw_params
	.word	audio_pcm_hw_free
	.word	audio_pcm_prepare
	.word	audio_pcm_playback_trigger
	.word	audio_pcm_pointer
	.space	12
	.word	audio_pcm_mmap
	.space	8
	.type	sport_info, %object
	.size	sport_info, 24
sport_info:
	.word	.LC1067
	.space	4
	.word	9
	.word	.LC1068
	.space	4
	.word	10
	.type	smd_pi, %object
	.size	smd_pi, 24
smd_pi:
	.space	4
	.word	.LC1065
	.space	4
	.space	4
	.word	.LC1066
	.space	4
	.type	ghsic_data_serial_tx_q_size, %object
	.size	ghsic_data_serial_tx_q_size, 4
ghsic_data_serial_tx_q_size:
	.word	20
	.type	ghsic_data_serial_rx_q_size, %object
	.size	ghsic_data_serial_rx_q_size, 4
ghsic_data_serial_rx_q_size:
	.word	10
	.type	ghsic_data_rmnet_tx_q_size, %object
	.size	ghsic_data_rmnet_tx_q_size, 4
ghsic_data_rmnet_tx_q_size:
	.word	300
	.type	ghsic_data_rmnet_rx_q_size, %object
	.size	ghsic_data_rmnet_rx_q_size, 4
ghsic_data_rmnet_rx_q_size:
	.word	50
	.type	ghsuart_data_serial_tx_q_size, %object
	.size	ghsuart_data_serial_tx_q_size, 4
ghsuart_data_serial_tx_q_size:
	.word	5
	.type	ghsuart_data_serial_rx_q_size, %object
	.size	ghsuart_data_serial_rx_q_size, 4
ghsuart_data_serial_rx_q_size:
	.word	5
	.type	ghsuart_data_rmnet_tx_q_size, %object
	.size	ghsuart_data_rmnet_tx_q_size, 4
ghsuart_data_rmnet_tx_q_size:
	.word	20
	.type	ghsuart_data_rmnet_rx_q_size, %object
	.size	ghsuart_data_rmnet_rx_q_size, 4
ghsuart_data_rmnet_rx_q_size:
	.word	10
	.type	rmnet_string_defs, %object
	.size	rmnet_string_defs, 16
rmnet_string_defs:
	.space	4
	.word	.LC1074
	.space	8
	.type	rmnet_strings, %object
	.size	rmnet_strings, 8
rmnet_strings:
	.word	rmnet_string_table
	.word	0
	.type	acm_iad_descriptor, %object
	.size	acm_iad_descriptor, 8
acm_iad_descriptor:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	2
	.byte	1
	.space	1
	.type	acm_control_interface_desc, %object
	.size	acm_control_interface_desc, 9
acm_control_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	1
	.space	1
	.space	3
	.type	acm_union_desc, %object
	.size	acm_union_desc, 5
acm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	acm_data_interface_desc, %object
	.size	acm_data_interface_desc, 9
acm_data_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	acm_call_mgmt_descriptor, %object
	.size	acm_call_mgmt_descriptor, 5
acm_call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.space	1
	.space	3
	.type	acm_fs_in_desc, %object
	.size	acm_fs_in_desc, 9
acm_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	acm_fs_out_desc, %object
	.size	acm_fs_out_desc, 9
acm_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	acm_fs_notify_desc, %object
	.size	acm_fs_notify_desc, 9
acm_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	10
	.byte	32
	.space	2
	.space	3
	.type	acm_hs_in_desc, %object
	.size	acm_hs_in_desc, 9
acm_hs_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acm_hs_out_desc, %object
	.size	acm_hs_out_desc, 9
acm_hs_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acm_hs_notify_desc, %object
	.size	acm_hs_notify_desc, 9
acm_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	10
	.byte	9
	.space	2
	.space	3
	.type	acm_ss_in_desc, %object
	.size	acm_ss_in_desc, 9
acm_ss_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acm_ss_out_desc, %object
	.size	acm_ss_out_desc, 9
acm_ss_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acm_ss_function, %object
	.size	acm_ss_function, 56
acm_ss_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_hs_notify_desc
	.word	acm_ss_bulk_comp_desc
	.word	acm_data_interface_desc
	.word	acm_ss_in_desc
	.word	acm_ss_bulk_comp_desc
	.word	acm_ss_out_desc
	.word	acm_ss_bulk_comp_desc
	.word	0
	.type	acm_hs_function, %object
	.size	acm_hs_function, 44
acm_hs_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_hs_notify_desc
	.word	acm_data_interface_desc
	.word	acm_hs_in_desc
	.word	acm_hs_out_desc
	.word	0
	.type	acm_fs_function, %object
	.size	acm_fs_function, 44
acm_fs_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_fs_notify_desc
	.word	acm_data_interface_desc
	.word	acm_fs_in_desc
	.word	acm_fs_out_desc
	.word	0
	.type	acm_string_defs, %object
	.size	acm_string_defs, 32
acm_string_defs:
	.space	4
	.word	.LC1055
	.space	4
	.word	.LC1056
	.space	4
	.word	.LC1057
	.space	8
	.type	acm_strings, %object
	.size	acm_strings, 8
acm_strings:
	.word	acm_string_table
	.word	0
	.type	adb_interface_desc, %object
	.size	adb_interface_desc, 9
adb_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	2
	.byte	-1
	.byte	66
	.byte	1
	.space	1
	.space	3
	.type	adb_fullspeed_in_desc, %object
	.size	adb_fullspeed_in_desc, 9
adb_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	adb_fullspeed_out_desc, %object
	.size	adb_fullspeed_out_desc, 9
adb_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	adb_highspeed_in_desc, %object
	.size	adb_highspeed_in_desc, 9
adb_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	adb_highspeed_out_desc, %object
	.size	adb_highspeed_out_desc, 9
adb_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	adb_superspeed_in_desc, %object
	.size	adb_superspeed_in_desc, 9
adb_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	adb_superspeed_out_desc, %object
	.size	adb_superspeed_out_desc, 9
adb_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ops.53624, %object
	.size	ops.53624, 12
ops.53624:
	.word	f_midi_snd_free
	.space	8
	.type	gmidi_in_ops, %object
	.size	gmidi_in_ops, 16
gmidi_in_ops:
	.word	f_midi_in_open
	.word	f_midi_in_close
	.word	f_midi_in_trigger
	.space	4
	.type	gmidi_out_ops, %object
	.size	gmidi_out_ops, 16
gmidi_out_ops:
	.word	f_midi_out_open
	.word	f_midi_out_close
	.word	f_midi_out_trigger
	.space	4
	.type	midi_strings, %object
	.size	midi_strings, 8
midi_strings:
	.word	midi_stringtab
	.word	0
	.type	rndis_string_defs, %object
	.size	rndis_string_defs, 32
rndis_string_defs:
	.space	4
	.word	.LC1039
	.space	4
	.word	.LC1040
	.space	4
	.word	.LC1041
	.space	8
	.type	rndis_dl_max_pkt_per_xfer, %object
	.size	rndis_dl_max_pkt_per_xfer, 4
rndis_dl_max_pkt_per_xfer:
	.word	3
	.type	rndis_strings, %object
	.size	rndis_strings, 8
rndis_strings:
	.word	rndis_string_table
	.word	0
	.type	ecm_qc_string_defs, %object
	.size	ecm_qc_string_defs, 32
ecm_qc_string_defs:
	.space	4
	.word	.LC1042
	.space	4
	.word	0
	.space	4
	.word	.LC1043
	.space	8
	.type	mbim_string_defs, %object
	.size	mbim_string_defs, 24
mbim_string_defs:
	.space	4
	.word	.LC1046
	.space	4
	.word	.LC1047
	.space	8
	.type	mbim_strings, %object
	.size	mbim_strings, 8
mbim_strings:
	.word	mbim_string_table
	.word	0
	.type	ecm_desc, %object
	.size	ecm_desc, 13
ecm_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	1514
	.short	0
	.byte	0
	.space	3
	.type	ecm_strings, %object
	.size	ecm_strings, 8
ecm_strings:
	.word	ecm_string_table
	.word	0
	.type	rndis_qc_string_defs, %object
	.size	rndis_qc_string_defs, 32
rndis_qc_string_defs:
	.space	4
	.word	.LC1039
	.space	4
	.word	.LC1040
	.space	4
	.word	.LC1041
	.space	8
	.type	rndis_qc_strings, %object
	.size	rndis_qc_strings, 8
rndis_qc_strings:
	.word	rndis_qc_string_table
	.word	0
	.type	gadget_type, %object
	.size	gadget_type, 24
gadget_type:
	.word	.LC1037
	.space	20
	.type	ecm_qc_desc, %object
	.size	ecm_qc_desc, 13
ecm_qc_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	1514
	.short	0
	.byte	0
	.space	3
	.type	ecm_qc_strings, %object
	.size	ecm_qc_strings, 8
ecm_qc_strings:
	.word	ecm_qc_string_table
	.word	0
	.type	qc_gadget_type, %object
	.size	qc_gadget_type, 24
qc_gadget_type:
	.word	.LC1037
	.space	20
	.type	fn_cntl, %object
	.size	fn_cntl, 4
fn_cntl:
	.word	.LC1034
	.type	fn_play, %object
	.size	fn_play, 4
fn_play:
	.word	.LC1036
	.type	fn_cap, %object
	.size	fn_cap, 4
fn_cap:
	.word	.LC1035
	.type	microphone_fu_controls, %object
	.size	microphone_fu_controls, 32
microphone_fu_controls:
	.word	microphone_fu_controls
	.word	microphone_fu_controls
	.space	12
	.word	.LC1028
	.space	8
	.type	speaker_fu_controls, %object
	.size	speaker_fu_controls, 32
speaker_fu_controls:
	.word	speaker_fu_controls
	.word	speaker_fu_controls
	.space	12
	.word	.LC1031
	.space	8
	.type	microphone_mute_control, %object
	.size	microphone_mute_control, 44
microphone_mute_control:
	.word	microphone_mute_control
	.word	microphone_mute_control
	.word	.LC1030
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	microphone_volume_control, %object
	.size	microphone_volume_control, 44
microphone_volume_control:
	.word	microphone_volume_control
	.word	microphone_volume_control
	.word	.LC1029
	.byte	2
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_mute_control, %object
	.size	speaker_mute_control, 44
speaker_mute_control:
	.word	speaker_mute_control
	.word	speaker_mute_control
	.word	.LC1033
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_volume_control, %object
	.size	speaker_volume_control, 44
speaker_volume_control:
	.word	speaker_volume_control
	.word	speaker_volume_control
	.word	.LC1032
	.byte	2
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	microphone_sample_freq_control, %object
	.size	microphone_sample_freq_control, 44
microphone_sample_freq_control:
	.word	microphone_sample_freq_control
	.word	microphone_sample_freq_control
	.word	.LC1025
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_sample_freq_control, %object
	.size	speaker_sample_freq_control, 44
speaker_sample_freq_control:
	.word	speaker_sample_freq_control
	.word	speaker_sample_freq_control
	.word	.LC1027
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	audio_strings, %object
	.size	audio_strings, 8
audio_strings:
	.word	audio_stringtab_dev
	.word	0
	.type	conn_gadget_interface_desc, %object
	.size	conn_gadget_interface_desc, 9
conn_gadget_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	2
	.byte	-1
	.byte	64
	.byte	1
	.space	1
	.space	3
	.type	conn_gadget_fullspeed_in_desc, %object
	.size	conn_gadget_fullspeed_in_desc, 9
conn_gadget_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	conn_gadget_fullspeed_out_desc, %object
	.size	conn_gadget_fullspeed_out_desc, 9
conn_gadget_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	conn_gadget_highspeed_in_desc, %object
	.size	conn_gadget_highspeed_in_desc, 9
conn_gadget_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	conn_gadget_highspeed_out_desc, %object
	.size	conn_gadget_highspeed_out_desc, 9
conn_gadget_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	conn_gadget_superspeed_in_desc, %object
	.size	conn_gadget_superspeed_in_desc, 9
conn_gadget_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	conn_gadget_superspeed_out_desc, %object
	.size	conn_gadget_superspeed_out_desc, 9
conn_gadget_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	necm_desc, %object
	.size	necm_desc, 13
necm_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	9014
	.short	0
	.byte	0
	.space	3
	.type	ncm_strings, %object
	.size	ncm_strings, 8
ncm_strings:
	.word	ncm_string_table
	.word	0
	.type	rl.64104, %object
	.size	rl.64104, 24
rl.64104:
	.word	0
	.word	1000
	.word	1
	.space	12
	.type	rl.52759, %object
	.size	rl.52759, 24
rl.52759:
	.word	0
	.word	1000
	.word	1
	.space	12
	.type	usb_android_dt_match, %object
	.size	usb_android_dt_match, 392
usb_android_dt_match:
	.space	64
	.ascii	"qcom,android-usb\000"
	.space	111
	.space	4
	.space	196
	.type	dev_attr_remote_wakeup, %object
	.size	dev_attr_remote_wakeup, 16
dev_attr_remote_wakeup:
	.word	.LC970
	.short	420
	.space	2
	.word	remote_wakeup_show
	.word	remote_wakeup_store
	.type	dev_attr_state, %object
	.size	dev_attr_state, 16
dev_attr_state:
	.word	.LC971
	.short	292
	.space	2
	.word	state_show
	.word	0
	.type	dev_attr_pm_qos, %object
	.size	dev_attr_pm_qos, 16
dev_attr_pm_qos:
	.word	.LC972
	.short	420
	.space	2
	.word	pm_qos_show
	.word	pm_qos_store
	.type	dev_attr_enable, %object
	.size	dev_attr_enable, 16
dev_attr_enable:
	.word	.LC973
	.short	420
	.space	2
	.word	enable_show
	.word	enable_store
	.type	dev_attr_functions, %object
	.size	dev_attr_functions, 16
dev_attr_functions:
	.word	.LC974
	.short	420
	.space	2
	.word	functions_show
	.word	functions_store
	.type	dev_attr_macos, %object
	.size	dev_attr_macos, 16
dev_attr_macos:
	.word	.LC975
	.short	420
	.space	2
	.word	macos_show
	.word	0
	.type	dev_attr_ss_host_available, %object
	.size	dev_attr_ss_host_available, 16
dev_attr_ss_host_available:
	.word	.LC976
	.short	420
	.space	2
	.word	ss_host_available_show
	.word	0
	.type	dev_attr_usb30en, %object
	.size	dev_attr_usb30en, 16
dev_attr_usb30en:
	.word	.LC977
	.short	420
	.space	2
	.word	usb30en_show
	.word	usb30en_store
	.type	dev_attr_bcdUSB, %object
	.size	dev_attr_bcdUSB, 16
dev_attr_bcdUSB:
	.word	.LC978
	.short	420
	.space	2
	.word	bcdUSB_show
	.word	0
	.type	dev_attr_iSerial, %object
	.size	dev_attr_iSerial, 16
dev_attr_iSerial:
	.word	.LC979
	.short	420
	.space	2
	.word	iSerial_show
	.word	iSerial_store
	.type	dev_attr_iProduct, %object
	.size	dev_attr_iProduct, 16
dev_attr_iProduct:
	.word	.LC980
	.short	420
	.space	2
	.word	iProduct_show
	.word	iProduct_store
	.type	dev_attr_iManufacturer, %object
	.size	dev_attr_iManufacturer, 16
dev_attr_iManufacturer:
	.word	.LC981
	.short	420
	.space	2
	.word	iManufacturer_show
	.word	iManufacturer_store
	.type	dev_attr_bDeviceProtocol, %object
	.size	dev_attr_bDeviceProtocol, 16
dev_attr_bDeviceProtocol:
	.word	.LC982
	.short	420
	.space	2
	.word	bDeviceProtocol_show
	.word	bDeviceProtocol_store
	.type	dev_attr_bDeviceSubClass, %object
	.size	dev_attr_bDeviceSubClass, 16
dev_attr_bDeviceSubClass:
	.word	.LC983
	.short	420
	.space	2
	.word	bDeviceSubClass_show
	.word	bDeviceSubClass_store
	.type	dev_attr_bDeviceClass, %object
	.size	dev_attr_bDeviceClass, 16
dev_attr_bDeviceClass:
	.word	.LC984
	.short	420
	.space	2
	.word	bDeviceClass_show
	.word	bDeviceClass_store
	.type	dev_attr_bcdDevice, %object
	.size	dev_attr_bcdDevice, 16
dev_attr_bcdDevice:
	.word	.LC985
	.short	420
	.space	2
	.word	bcdDevice_show
	.word	bcdDevice_store
	.type	dev_attr_idProduct, %object
	.size	dev_attr_idProduct, 16
dev_attr_idProduct:
	.word	.LC986
	.short	420
	.space	2
	.word	idProduct_show
	.word	idProduct_store
	.type	dev_attr_idVendor, %object
	.size	dev_attr_idVendor, 16
dev_attr_idVendor:
	.word	.LC987
	.short	420
	.space	2
	.word	idVendor_show
	.word	idVendor_store
	.type	uasp_function, %object
	.size	uasp_function, 52
uasp_function:
	.word	.LC988
	.space	20
	.word	uasp_function_init
	.word	uasp_function_cleanup
	.space	8
	.word	uasp_function_bind_config
	.space	8
	.type	audio_source_function, %object
	.size	audio_source_function, 52
audio_source_function:
	.word	.LC727
	.space	12
	.word	audio_source_function_attributes
	.space	4
	.word	audio_source_function_init
	.word	audio_source_function_cleanup
	.space	8
	.word	audio_source_function_bind_config
	.word	audio_source_function_unbind_config
	.space	4
	.type	audio_source_function_attributes, %object
	.size	audio_source_function_attributes, 8
audio_source_function_attributes:
	.word	dev_attr_pcm
	.word	0
	.type	dev_attr_pcm, %object
	.size	dev_attr_pcm, 16
dev_attr_pcm:
	.word	.LC989
	.short	420
	.space	2
	.word	audio_source_pcm_show
	.word	0
	.type	accessory_function, %object
	.size	accessory_function, 52
accessory_function:
	.word	.LC647
	.space	20
	.word	accessory_function_init
	.word	accessory_function_cleanup
	.space	8
	.word	accessory_function_bind_config
	.space	4
	.word	accessory_function_ctrlrequest
	.type	mass_storage_function, %object
	.size	mass_storage_function, 52
mass_storage_function:
	.word	.LC990
	.space	12
	.word	mass_storage_function_attributes
	.space	4
	.word	mass_storage_function_init
	.word	mass_storage_function_cleanup
	.space	8
	.word	mass_storage_function_bind_config
	.space	8
	.type	mass_storage_function_attributes, %object
	.size	mass_storage_function_attributes, 20
mass_storage_function_attributes:
	.word	dev_attr_inquiry_string
	.word	dev_attr_vendor_string
	.word	dev_attr_product_string
	.word	dev_attr_sua_version_info
	.word	0
	.type	dev_attr_sua_version_info, %object
	.size	dev_attr_sua_version_info, 16
dev_attr_sua_version_info:
	.word	.LC991
	.short	420
	.space	2
	.word	sua_version_info_show
	.word	sua_version_info_store
	.type	dev_attr_product_string, %object
	.size	dev_attr_product_string, 16
dev_attr_product_string:
	.word	.LC992
	.short	420
	.space	2
	.word	mass_storage_product_show
	.word	mass_storage_product_store
	.type	dev_attr_vendor_string, %object
	.size	dev_attr_vendor_string, 16
dev_attr_vendor_string:
	.word	.LC993
	.short	420
	.space	2
	.word	mass_storage_vendor_show
	.word	mass_storage_vendor_store
	.type	dev_attr_inquiry_string, %object
	.size	dev_attr_inquiry_string, 16
dev_attr_inquiry_string:
	.word	.LC994
	.short	420
	.space	2
	.word	mass_storage_inquiry_show
	.word	mass_storage_inquiry_store
	.type	ecm_function, %object
	.size	ecm_function, 52
ecm_function:
	.word	.LC870
	.space	12
	.word	ecm_function_attributes
	.space	4
	.word	ecm_function_init
	.word	ecm_function_cleanup
	.space	8
	.word	ecm_function_bind_config
	.word	ecm_function_unbind_config
	.space	4
	.type	rndis_qc_function, %object
	.size	rndis_qc_function, 52
rndis_qc_function:
	.word	.LC995
	.space	12
	.word	rndis_function_attributes
	.space	4
	.word	rndis_qc_function_init
	.word	rndis_qc_function_cleanup
	.space	8
	.word	rndis_qc_function_bind_config
	.word	rndis_qc_function_unbind_config
	.space	4
	.type	rndis_function, %object
	.size	rndis_function, 52
rndis_function:
	.word	.LC816
	.space	12
	.word	rndis_function_attributes
	.space	4
	.word	rndis_function_init
	.word	rndis_function_cleanup
	.space	8
	.word	rndis_function_bind_config
	.word	rndis_function_unbind_config
	.space	4
	.type	rndis_function_attributes, %object
	.size	rndis_function_attributes, 24
rndis_function_attributes:
	.word	dev_attr_manufacturer
	.word	dev_attr_wceis
	.word	dev_attr_ethaddr
	.word	dev_attr_vendorID
	.word	dev_attr_max_pkt_per_xfer
	.word	0
	.type	dev_attr_max_pkt_per_xfer, %object
	.size	dev_attr_max_pkt_per_xfer, 16
dev_attr_max_pkt_per_xfer:
	.word	.LC996
	.short	420
	.space	2
	.word	rndis_max_pkt_per_xfer_show
	.word	rndis_max_pkt_per_xfer_store
	.type	dev_attr_vendorID, %object
	.size	dev_attr_vendorID, 16
dev_attr_vendorID:
	.word	.LC997
	.short	420
	.space	2
	.word	rndis_vendorID_show
	.word	rndis_vendorID_store
	.type	dev_attr_ethaddr, %object
	.size	dev_attr_ethaddr, 16
dev_attr_ethaddr:
	.word	.LC998
	.short	420
	.space	2
	.word	rndis_ethaddr_show
	.word	rndis_ethaddr_store
	.type	dev_attr_wceis, %object
	.size	dev_attr_wceis, 16
dev_attr_wceis:
	.word	.LC999
	.short	420
	.space	2
	.word	rndis_wceis_show
	.word	rndis_wceis_store
	.type	dev_attr_manufacturer, %object
	.size	dev_attr_manufacturer, 16
dev_attr_manufacturer:
	.word	.LC1000
	.short	420
	.space	2
	.word	rndis_manufacturer_show
	.word	rndis_manufacturer_store
	.type	ptp_function, %object
	.size	ptp_function, 52
ptp_function:
	.word	.LC1001
	.space	20
	.word	ptp_function_init
	.word	ptp_function_cleanup
	.space	8
	.word	ptp_function_bind_config
	.space	4
	.word	mtp_function_ctrlrequest
	.type	mtp_function, %object
	.size	mtp_function, 52
mtp_function:
	.word	.LC651
	.space	20
	.word	mtp_function_init
	.word	mtp_function_cleanup
	.space	8
	.word	mtp_function_bind_config
	.space	4
	.word	mtp_function_ctrlrequest
	.type	ccid_function, %object
	.size	ccid_function, 52
ccid_function:
	.word	.LC642
	.space	20
	.word	ccid_function_init
	.word	ccid_function_cleanup
	.space	8
	.word	ccid_function_bind_config
	.space	8
	.type	qdss_function, %object
	.size	qdss_function, 52
qdss_function:
	.word	.LC652
	.space	20
	.word	qdss_function_init
	.word	qdss_function_cleanup
	.space	8
	.word	qdss_function_bind_config
	.space	8
	.type	diag_function, %object
	.size	diag_function, 52
diag_function:
	.word	.LC1002
	.space	12
	.word	diag_function_attributes
	.space	4
	.word	diag_function_init
	.word	diag_function_cleanup
	.space	8
	.word	diag_function_bind_config
	.space	8
	.type	diag_function_attributes, %object
	.size	diag_function_attributes, 8
diag_function_attributes:
	.word	dev_attr_clients
	.word	0
	.type	dev_attr_clients, %object
	.size	dev_attr_clients, 16
dev_attr_clients:
	.word	.LC1003
	.short	128
	.space	2
	.word	0
	.word	clients_store
	.type	audio_function, %object
	.size	audio_function, 52
audio_function:
	.word	.LC888
	.space	36
	.word	audio_function_bind_config
	.space	8
	.type	mbim_function, %object
	.size	mbim_function, 52
mbim_function:
	.word	.LC855
	.space	12
	.word	mbim_function_attributes
	.space	4
	.word	mbim_function_init
	.word	mbim_function_cleanup
	.space	8
	.word	mbim_function_bind_config
	.space	4
	.word	mbim_function_ctrlrequest
	.type	mbim_function_attributes, %object
	.size	mbim_function_attributes, 8
mbim_function_attributes:
	.word	dev_attr_mbim_transports
	.word	0
	.type	dev_attr_mbim_transports, %object
	.size	dev_attr_mbim_transports, 16
dev_attr_mbim_transports:
	.word	.LC1004
	.short	420
	.space	2
	.word	mbim_transports_show
	.word	mbim_transports_store
	.type	ecm_qc_function, %object
	.size	ecm_qc_function, 52
ecm_qc_function:
	.word	.LC1005
	.space	12
	.word	ecm_function_attributes
	.space	4
	.word	ecm_function_init
	.word	ecm_function_cleanup
	.space	8
	.word	ecm_qc_function_bind_config
	.word	ecm_qc_function_unbind_config
	.space	4
	.type	ecm_function_attributes, %object
	.size	ecm_function_attributes, 12
ecm_function_attributes:
	.word	dev_attr_ecm_transports
	.word	dev_attr_ecm_ethaddr
	.word	0
	.type	dev_attr_ecm_transports, %object
	.size	dev_attr_ecm_transports, 16
dev_attr_ecm_transports:
	.word	.LC1006
	.short	420
	.space	2
	.word	ecm_transports_show
	.word	ecm_transports_store
	.type	dev_attr_ecm_ethaddr, %object
	.size	dev_attr_ecm_ethaddr, 16
dev_attr_ecm_ethaddr:
	.word	.LC1007
	.short	420
	.space	2
	.word	ecm_ethaddr_show
	.word	ecm_ethaddr_store
	.type	rmnet_function, %object
	.size	rmnet_function, 52
rmnet_function:
	.word	.LC721
	.space	12
	.word	rmnet_function_attributes
	.space	8
	.word	rmnet_function_cleanup
	.space	8
	.word	rmnet_function_bind_config
	.space	8
	.type	rmnet_function_attributes, %object
	.size	rmnet_function_attributes, 12
rmnet_function_attributes:
	.word	dev_attr_rmnet_transports
	.word	dev_attr_rmnet_xport_names
	.word	0
	.type	dev_attr_rmnet_xport_names, %object
	.size	dev_attr_rmnet_xport_names, 16
dev_attr_rmnet_xport_names:
	.word	.LC1008
	.short	420
	.space	2
	.word	rmnet_xport_names_show
	.word	rmnet_xport_names_store
	.type	dev_attr_rmnet_transports, %object
	.size	dev_attr_rmnet_transports, 16
dev_attr_rmnet_transports:
	.word	.LC1009
	.short	420
	.space	2
	.word	rmnet_transports_show
	.word	rmnet_transports_store
	.type	rmnet_smd_sdio_function, %object
	.size	rmnet_smd_sdio_function, 52
rmnet_smd_sdio_function:
	.word	.LC645
	.space	12
	.word	rmnet_smd_sdio_attributes
	.space	4
	.word	rmnet_smd_sdio_function_init
	.word	rmnet_smd_sdio_function_cleanup
	.space	8
	.word	rmnet_smd_sdio_bind_config
	.space	8
	.type	rmnet_smd_sdio_attributes, %object
	.size	rmnet_smd_sdio_attributes, 8
rmnet_smd_sdio_attributes:
	.word	dev_attr_transport
	.word	0
	.type	rmnet_sdio_function, %object
	.size	rmnet_sdio_function, 52
rmnet_sdio_function:
	.word	.LC723
	.space	36
	.word	rmnet_sdio_function_bind_config
	.space	8
	.type	rmnet_smd_function, %object
	.size	rmnet_smd_function, 52
rmnet_smd_function:
	.word	.LC1010
	.space	36
	.word	rmnet_smd_function_bind_config
	.space	8
	.type	acm_function, %object
	.size	acm_function, 52
acm_function:
	.word	.LC942
	.space	12
	.word	acm_function_attributes
	.space	4
	.word	acm_function_init
	.word	acm_function_cleanup
	.space	8
	.word	acm_function_bind_config
	.space	8
	.type	acm_function_attributes, %object
	.size	acm_function_attributes, 8
acm_function_attributes:
	.word	dev_attr_instances
	.word	0
	.type	dev_attr_instances, %object
	.size	dev_attr_instances, 16
dev_attr_instances:
	.word	.LC1011
	.short	420
	.space	2
	.word	acm_instances_show
	.word	acm_instances_store
	.type	midi_function, %object
	.size	midi_function, 52
midi_function:
	.word	.LC1012
	.space	12
	.word	midi_function_attributes
	.space	4
	.word	midi_function_init
	.word	midi_function_cleanup
	.space	8
	.word	midi_function_bind_config
	.space	8
	.type	midi_function_attributes, %object
	.size	midi_function_attributes, 8
midi_function_attributes:
	.word	dev_attr_alsa
	.word	0
	.type	dev_attr_alsa, %object
	.size	dev_attr_alsa, 16
dev_attr_alsa:
	.word	.LC1013
	.short	292
	.space	2
	.word	midi_alsa_show
	.word	0
	.type	ffs_function_attributes, %object
	.size	ffs_function_attributes, 8
ffs_function_attributes:
	.word	dev_attr_aliases
	.word	0
	.type	dev_attr_aliases, %object
	.size	dev_attr_aliases, 16
dev_attr_aliases:
	.word	.LC1014
	.short	420
	.space	2
	.word	ffs_aliases_show
	.word	ffs_aliases_store
	.type	dev_strings, %object
	.size	dev_strings, 8
dev_strings:
	.word	stringtab_dev
	.word	0
	.type	stringtab_dev, %object
	.size	stringtab_dev, 8
stringtab_dev:
	.short	1033
	.space	2
	.word	strings_dev
	.type	ncm_function, %object
	.size	ncm_function, 52
ncm_function:
	.word	.LC495
	.space	20
	.word	ncm_function_init
	.word	ncm_function_cleanup
	.space	8
	.word	ncm_function_bind_config
	.word	ncm_function_unbind_config
	.space	4
	.type	ncm_string_table, %object
	.size	ncm_string_table, 8
ncm_string_table:
	.short	1033
	.space	2
	.word	ncm_string_defs
	.type	ncm_desc, %object
	.size	ncm_desc, 6
ncm_desc:
	.byte	6
	.byte	36
	.byte	26
	.2byte	256
	.byte	9
	.space	2
	.type	ncm_header_desc, %object
	.size	ncm_header_desc, 5
ncm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	conn_gadget_function, %object
	.size	conn_gadget_function, 52
conn_gadget_function:
	.word	.LC641
	.space	12
	.word	conn_gadget_function_attributes
	.space	4
	.word	conn_gadget_function_init
	.word	conn_gadget_function_cleanup
	.space	8
	.word	conn_gadget_function_bind_config
	.space	8
	.type	conn_gadget_function_attributes, %object
	.size	conn_gadget_function_attributes, 16
conn_gadget_function_attributes:
	.word	dev_attr_usb_buffer_size
	.word	dev_attr_out_max_packet_size
	.word	dev_attr_in_max_packet_size
	.word	0
	.type	dev_attr_in_max_packet_size, %object
	.size	dev_attr_in_max_packet_size, 16
dev_attr_in_max_packet_size:
	.word	.LC1019
	.short	420
	.space	2
	.word	conn_gadget_in_max_packet_size_show
	.word	conn_gadget_in_max_packet_size_store
	.type	dev_attr_out_max_packet_size, %object
	.size	dev_attr_out_max_packet_size, 16
dev_attr_out_max_packet_size:
	.word	.LC1020
	.short	420
	.space	2
	.word	conn_gadget_out_max_packet_size_show
	.word	conn_gadget_out_max_packet_size_store
	.type	dev_attr_usb_buffer_size, %object
	.size	dev_attr_usb_buffer_size, 16
dev_attr_usb_buffer_size:
	.word	.LC1021
	.short	420
	.space	2
	.word	conn_gadget_usb_buffer_size_show
	.word	conn_gadget_usb_buffer_size_store
	.type	conn_gadget_superspeed_bulk_comp_desc, %object
	.size	conn_gadget_superspeed_bulk_comp_desc, 6
conn_gadget_superspeed_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	___modver_attr, %object
	.size	___modver_attr, 36
___modver_attr:
	.word	.LC1022
	.short	292
	.space	2
	.word	__modver_version_show
	.space	16
	.word	.LC619
	.word	.LC1023
	.type	audio_stringtab_dev, %object
	.size	audio_stringtab_dev, 8
audio_stringtab_dev:
	.short	1033
	.space	2
	.word	audio_string_defs
	.type	microphone_as_iso_in_desc, %object
	.size	microphone_as_iso_in_desc, 7
microphone_as_iso_in_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	microphone_as_header_desc, %object
	.size	microphone_as_header_desc, 7
microphone_as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	2
	.byte	1
	.2byte	1
	.space	1
	.type	speaker_as_iso_out_desc, %object
	.size	speaker_as_iso_out_desc, 7
speaker_as_iso_out_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	speaker_as_header_desc, %object
	.size	speaker_as_header_desc, 7
speaker_as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	3
	.byte	1
	.2byte	1
	.space	1
	.type	microphone_output_terminal_desc, %object
	.size	microphone_output_terminal_desc, 9
microphone_output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	2
	.short	257
	.byte	1
	.byte	1
	.space	1
	.space	3
	.type	speaker_output_terminal_desc, %object
	.size	speaker_output_terminal_desc, 9
speaker_output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	4
	.short	769
	.byte	3
	.byte	3
	.space	1
	.space	3
	.type	req_capture_count, %object
	.size	req_capture_count, 4
req_capture_count:
	.word	48
	.type	rndis_qc_string_table, %object
	.size	rndis_qc_string_table, 8
rndis_qc_string_table:
	.short	1033
	.space	2
	.word	rndis_qc_string_defs
	.type	rndis_qc_ss_bulk_comp_desc, %object
	.size	rndis_qc_ss_bulk_comp_desc, 6
rndis_qc_ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rndis_qc_ss_intr_comp_desc, %object
	.size	rndis_qc_ss_intr_comp_desc, 6
rndis_qc_ss_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	rndis_qc_acm_descriptor, %object
	.size	rndis_qc_acm_descriptor, 4
rndis_qc_acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	0
	.type	rndis_qc_call_mgmt_descriptor, %object
	.size	rndis_qc_call_mgmt_descriptor, 5
rndis_qc_call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.byte	1
	.space	3
	.type	rndis_qc_header_desc, %object
	.size	rndis_qc_header_desc, 5
rndis_qc_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	ecm_string_table, %object
	.size	ecm_string_table, 8
ecm_string_table:
	.short	1033
	.space	2
	.word	ecm_string_defs
	.type	ss_ecm_bulk_comp_desc, %object
	.size	ss_ecm_bulk_comp_desc, 6
ss_ecm_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_ecm_intr_comp_desc, %object
	.size	ss_ecm_intr_comp_desc, 6
ss_ecm_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	16
	.space	2
	.type	ecm_header_desc, %object
	.size	ecm_header_desc, 5
ecm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	mbim_string_table, %object
	.size	mbim_string_table, 8
mbim_string_table:
	.short	1033
	.space	2
	.word	mbim_string_defs
	.type	ss_mbim_out_comp_desc, %object
	.size	ss_mbim_out_comp_desc, 6
ss_mbim_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_mbim_in_comp_desc, %object
	.size	ss_mbim_in_comp_desc, 6
ss_mbim_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_mbim_notify_comp_desc, %object
	.size	ss_mbim_notify_comp_desc, 6
ss_mbim_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	64
	.space	2
	.type	ext_mbb_desc, %object
	.size	ext_mbb_desc, 8
ext_mbb_desc:
	.byte	8
	.byte	36
	.byte	28
	.2byte	256
	.byte	64
	.short	1500
	.type	mbim_header_desc, %object
	.size	mbim_header_desc, 5
mbim_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	ecm_qc_string_table, %object
	.size	ecm_qc_string_table, 8
ecm_qc_string_table:
	.short	1033
	.space	2
	.word	ecm_qc_string_defs
	.type	ecm_qc_ss_out_comp_desc, %object
	.size	ecm_qc_ss_out_comp_desc, 6
ecm_qc_ss_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ecm_qc_ss_in_comp_desc, %object
	.size	ecm_qc_ss_in_comp_desc, 6
ecm_qc_ss_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ecm_qc_ss_notify_comp_desc, %object
	.size	ecm_qc_ss_notify_comp_desc, 6
ecm_qc_ss_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	16
	.space	2
	.type	ecm_qc_header_desc, %object
	.size	ecm_qc_header_desc, 5
ecm_qc_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	rndis_string_table, %object
	.size	rndis_string_table, 8
rndis_string_table:
	.short	1033
	.space	2
	.word	rndis_string_defs
	.type	ss_bulk_comp_desc, %object
	.size	ss_bulk_comp_desc, 6
ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_intr_comp_desc, %object
	.size	ss_intr_comp_desc, 6
ss_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	rndis_acm_descriptor, %object
	.size	rndis_acm_descriptor, 4
rndis_acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	0
	.type	call_mgmt_descriptor, %object
	.size	call_mgmt_descriptor, 5
call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.byte	1
	.space	3
	.type	header_desc, %object
	.size	header_desc, 5
header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	acc_string_table, %object
	.size	acc_string_table, 8
acc_string_table:
	.short	1033
	.space	2
	.word	acc_string_defs
	.type	acc_superspeed_out_comp_desc, %object
	.size	acc_superspeed_out_comp_desc, 6
acc_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acc_superspeed_in_comp_desc, %object
	.size	acc_superspeed_in_comp_desc, 6
acc_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	mtp_string_table, %object
	.size	mtp_string_table, 8
mtp_string_table:
	.short	1033
	.space	2
	.word	mtp_string_defs
	.type	mtp_superspeed_intr_comp_desc, %object
	.size	mtp_superspeed_intr_comp_desc, 6
mtp_superspeed_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	28
	.space	2
	.type	mtp_superspeed_out_comp_desc, %object
	.size	mtp_superspeed_out_comp_desc, 6
mtp_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.byte	2
	.space	3
	.space	2
	.type	mtp_superspeed_in_comp_desc, %object
	.size	mtp_superspeed_in_comp_desc, 6
mtp_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.byte	2
	.space	3
	.space	2
	.type	ptp_interface_desc, %object
	.size	ptp_interface_desc, 9
ptp_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	3
	.byte	6
	.byte	1
	.byte	1
	.space	1
	.space	3
	.type	midi_stringtab, %object
	.size	midi_stringtab, 8
midi_stringtab:
	.short	1033
	.space	2
	.word	midi_string_defs
	.type	adb_superspeed_out_comp_desc, %object
	.size	adb_superspeed_out_comp_desc, 6
adb_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	adb_superspeed_in_comp_desc, %object
	.size	adb_superspeed_in_comp_desc, 6
adb_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acm_string_table, %object
	.size	acm_string_table, 8
acm_string_table:
	.short	1033
	.space	2
	.word	acm_string_defs
	.type	acm_ss_bulk_comp_desc, %object
	.size	acm_ss_bulk_comp_desc, 6
acm_ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acm_descriptor, %object
	.size	acm_descriptor, 4
acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	2
	.type	acm_header_desc, %object
	.size	acm_header_desc, 5
acm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	fsg_stringtab, %object
	.size	fsg_stringtab, 8
fsg_stringtab:
	.short	1033
	.space	2
	.word	fsg_strings
	.type	fs_audio_desc, %object
	.size	fs_audio_desc, 48
fs_audio_desc:
	.word	audio_source_ac_interface_desc
	.word	audio_source_ac_header_desc
	.word	input_terminal_desc
	.word	output_terminal_desc
	.word	feature_unit_desc
	.word	as_interface_alt_0_desc
	.word	as_interface_alt_1_desc
	.word	as_header_desc
	.word	as_type_i_desc
	.word	fs_as_in_ep_desc
	.word	as_iso_in_desc
	.word	0
	.type	hs_audio_desc, %object
	.size	hs_audio_desc, 48
hs_audio_desc:
	.word	audio_source_ac_interface_desc
	.word	audio_source_ac_header_desc
	.word	input_terminal_desc
	.word	output_terminal_desc
	.word	feature_unit_desc
	.word	as_interface_alt_0_desc
	.word	as_interface_alt_1_desc
	.word	as_header_desc
	.word	as_type_i_desc
	.word	hs_as_in_ep_desc
	.word	as_iso_in_desc
	.word	0
	.type	as_iso_in_desc, %object
	.size	as_iso_in_desc, 7
as_iso_in_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	as_header_desc, %object
	.size	as_header_desc, 7
as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	output_terminal_desc, %object
	.size	output_terminal_desc, 9
output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	3
	.short	257
	.byte	2
	.byte	2
	.space	1
	.space	3
	.type	feature_unit_desc, %object
	.size	feature_unit_desc, 9
feature_unit_desc:
	.byte	9
	.byte	36
	.byte	6
	.byte	2
	.byte	1
	.byte	2
	.space	3
	.space	3
	.type	audio_source_ac_header_desc, %object
	.size	audio_source_ac_header_desc, 10
audio_source_ac_header_desc:
	.byte	10
	.byte	36
	.byte	1
	.2byte	256
	.2byte	40
	.byte	2
	.byte	0
	.byte	1
	.space	2
	.type	rmnet_string_table, %object
	.size	rmnet_string_table, 8
rmnet_string_table:
	.short	1033
	.space	2
	.word	rmnet_string_defs
	.type	rmnet_ss_out_comp_desc, %object
	.size	rmnet_ss_out_comp_desc, 6
rmnet_ss_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rmnet_ss_in_comp_desc, %object
	.size	rmnet_ss_in_comp_desc, 6
rmnet_ss_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rmnet_ss_notify_comp_desc, %object
	.size	rmnet_ss_notify_comp_desc, 6
rmnet_ss_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	dev_attr_transport, %object
	.size	dev_attr_transport, 16
dev_attr_transport:
	.word	.LC1076
	.short	420
	.space	2
	.word	0
	.word	transport_store
	.type	rmnet_mux_string_table, %object
	.size	rmnet_mux_string_table, 8
rmnet_mux_string_table:
	.short	1033
	.space	2
	.word	rmnet_mux_string_defs
	.type	rmnet_mux_string_defs, %object
	.size	rmnet_mux_string_defs, 16
rmnet_mux_string_defs:
	.space	4
	.word	.LC1074
	.space	8
	.type	mux_sdio_rx_fctrl_dis_thld, %object
	.size	mux_sdio_rx_fctrl_dis_thld, 4
mux_sdio_rx_fctrl_dis_thld:
	.word	500
	.type	mux_sdio_tx_pkt_drop_thld, %object
	.size	mux_sdio_tx_pkt_drop_thld, 4
mux_sdio_tx_pkt_drop_thld:
	.word	1000
	.type	rmnet_sdio_string_table, %object
	.size	rmnet_sdio_string_table, 8
rmnet_sdio_string_table:
	.short	1033
	.space	2
	.word	rmnet_sdio_string_defs
	.type	rmnet_sdio_string_defs, %object
	.size	rmnet_sdio_string_defs, 16
rmnet_sdio_string_defs:
	.space	4
	.word	.LC1077
	.space	8
	.type	sdio_rx_fctrl_dis_thld, %object
	.size	sdio_rx_fctrl_dis_thld, 4
sdio_rx_fctrl_dis_thld:
	.word	500
	.type	sdio_tx_pkt_drop_thld, %object
	.size	sdio_tx_pkt_drop_thld, 4
sdio_tx_pkt_drop_thld:
	.word	1000
	.type	rmnet_smd_string_table, %object
	.size	rmnet_smd_string_table, 8
rmnet_smd_string_table:
	.short	1033
	.space	2
	.word	rmnet_smd_string_defs
	.type	rmnet_smd_string_defs, %object
	.size	rmnet_smd_string_defs, 16
rmnet_smd_string_defs:
	.space	4
	.word	.LC1077
	.space	8
	.type	qdss_string_table, %object
	.size	qdss_string_table, 8
qdss_string_table:
	.short	1033
	.space	2
	.word	qdss_string_defs
	.type	ss_bulk_out_comp_desc, %object
	.size	ss_bulk_out_comp_desc, 6
ss_bulk_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_bulk_in_comp_desc, %object
	.size	ss_bulk_in_comp_desc, 6
ss_bulk_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.bss
	.align	2
	.set	.LANCHOR1,. + 0
	.type	n_sdio_ports, %object
	.size	n_sdio_ports, 4
n_sdio_ports:
	.space	4
	.type	sdio_ports, %object
	.size	sdio_ports, 208
sdio_ports:
	.space	208
	.type	n_smd_ports, %object
	.size	n_smd_ports, 4
n_smd_ports:
	.space	4
	.type	smd_ports, %object
	.size	smd_ports, 208
smd_ports:
	.space	208
	.type	n_bam_ports, %object
	.size	n_bam_ports, 4
n_bam_ports:
	.space	4
	.type	bam_ports, %object
	.size	bam_ports, 84
bam_ports:
	.space	84
	.type	ctrl_smd_ports, %object
	.size	ctrl_smd_ports, 504
ctrl_smd_ports:
	.space	504
	.type	ctrl_port, %object
	.size	ctrl_port, 4
ctrl_port:
	.space	4
	.type	no_ctrl_ports, %object
	.size	no_ctrl_ports, 4
no_ctrl_ports:
	.space	4
	.type	gctrl_ports, %object
	.size	gctrl_ports, 416
gctrl_ports:
	.space	416
	.type	no_data_ports, %object
	.size	no_data_ports, 4
no_data_ports:
	.space	4
	.type	gdata_ports, %object
	.size	gdata_ports, 416
gdata_ports:
	.space	416
	.type	num_ctrl_ports, %object
	.size	num_ctrl_ports, 4
num_ctrl_ports:
	.space	4
	.type	ghsuart_ctrl_ports, %object
	.size	ghsuart_ctrl_ports, 168
ghsuart_ctrl_ports:
	.space	168
	.type	num_data_ports, %object
	.size	num_data_ports, 4
num_data_ports:
	.space	4
	.type	ghsuart_data_ports, %object
	.size	ghsuart_data_ports, 168
ghsuart_data_ports:
	.space	168
	.type	read_state, %object
	.size	read_state, 4
read_state:
	.space	4
	.type	modem_wait_q, %object
	.size	modem_wait_q, 12
modem_wait_q:
	.space	12
	.type	_ccid_dev, %object
	.size	_ccid_dev, 4
_ccid_dev:
	.space	4
	.type	audio_reinit, %object
	.size	audio_reinit, 1
audio_reinit:
	.space	1
	.space	3
	.type	android_dev_list, %object
	.size	android_dev_list, 8
android_dev_list:
	.space	8
	.type	composite, %object
	.size	composite, 4
composite:
	.space	4
	.type	serial_string, %object
	.size	serial_string, 256
serial_string:
	.space	256
	.type	rmux_dev, %object
	.size	rmux_dev, 4
rmux_dev:
	.space	4
	.type	_conn_gadget_dev, %object
	.size	_conn_gadget_dev, 4
_conn_gadget_dev:
	.space	4
	.type	_acc_dev, %object
	.size	_acc_dev, 4
_acc_dev:
	.space	4
	.type	rndis_lock, %object
	.size	rndis_lock, 4
rndis_lock:
	.space	4
	.type	_rndis_qc, %object
	.size	_rndis_qc, 4
_rndis_qc:
	.space	4
	.type	_mtp_dev, %object
	.size	_mtp_dev, 4
_mtp_dev:
	.space	4
	.type	rmnet_ports, %object
	.size	rmnet_ports, 72
rmnet_ports:
	.space	72
	.type	_mbim_dev, %object
	.size	_mbim_dev, 4
_mbim_dev:
	.space	4
	.type	usb30en, %object
	.size	usb30en, 1
usb30en:
	.space	1
	.space	3
	.type	rmnet_smd, %object
	.size	rmnet_smd, 4
rmnet_smd:
	.space	4
	.type	gserial_wq, %object
	.size	gserial_wq, 4
gserial_wq:
	.space	4
	.type	gsdio_wq, %object
	.size	gsdio_wq, 4
gsdio_wq:
	.space	4
	.type	gsmd_wq, %object
	.size	gsmd_wq, 4
gsmd_wq:
	.space	4
	.type	bam2bam_data_ports, %object
	.size	bam2bam_data_ports, 4
bam2bam_data_ports:
	.space	4
	.type	bam_data_wq, %object
	.size	bam_data_wq, 4
bam_data_wq:
	.space	4
	.type	uether_wq, %object
	.size	uether_wq, 4
uether_wq:
	.space	4
	.type	d_lock, %object
	.size	d_lock, 4
d_lock:
	.space	4
	.type	dent_smd, %object
	.size	dent_smd, 4
dent_smd:
	.space	4
	.type	ghsuart_ctrl_dent, %object
	.size	ghsuart_ctrl_dent, 4
ghsuart_ctrl_dent:
	.space	4
	.type	ghsuart_data_dent, %object
	.size	ghsuart_data_dent, 4
ghsuart_data_dent:
	.space	4
	.type	dent_diag, %object
	.size	dent_diag, 4
dent_diag:
	.space	4
	.type	ch_lock, %object
	.size	ch_lock, 4
ch_lock:
	.space	4
	.type	nr_rmnet_ports, %object
	.size	nr_rmnet_ports, 4
nr_rmnet_ports:
	.space	4
	.type	gbam_dent, %object
	.size	gbam_dent, 4
gbam_dent:
	.space	4
	.type	no_ctrl_smd_ports, %object
	.size	no_ctrl_smd_ports, 4
no_ctrl_smd_ports:
	.space	4
	.type	no_ctrl_qti_ports, %object
	.size	no_ctrl_qti_ports, 4
no_ctrl_qti_ports:
	.space	4
	.type	no_data_bam_ports, %object
	.size	no_data_bam_ports, 4
no_data_bam_ports:
	.space	4
	.type	no_data_bam2bam_ports, %object
	.size	no_data_bam2bam_ports, 4
no_data_bam2bam_ports:
	.space	4
	.type	no_ctrl_hsic_ports, %object
	.size	no_ctrl_hsic_ports, 4
no_ctrl_hsic_ports:
	.space	4
	.type	no_data_hsic_ports, %object
	.size	no_data_hsic_ports, 4
no_data_hsic_ports:
	.space	4
	.type	no_ctrl_hsuart_ports, %object
	.size	no_ctrl_hsuart_ports, 4
no_ctrl_hsuart_ports:
	.space	4
	.type	no_data_hsuart_ports, %object
	.size	no_data_hsuart_ports, 4
no_data_hsuart_ports:
	.space	4
	.type	_adb_dev, %object
	.size	_adb_dev, 4
_adb_dev:
	.space	4
	.type	control_line_state, %object
	.size	control_line_state, 4
control_line_state:
	.space	4
	.type	grmnet_ctrl_wq, %object
	.size	grmnet_ctrl_wq, 4
grmnet_ctrl_wq:
	.space	4
	.type	smd_ctrl_dent, %object
	.size	smd_ctrl_dent, 4
smd_ctrl_dent:
	.space	4
	.type	smd_ctrl_dfile, %object
	.size	smd_ctrl_dfile, 4
smd_ctrl_dfile:
	.space	4
	.type	online_clients, %object
	.size	online_clients, 1
online_clients:
	.space	1
	.space	3
	.type	gctrl_dent, %object
	.size	gctrl_dent, 4
gctrl_dent:
	.space	4
	.type	gctrl_dfile, %object
	.size	gctrl_dfile, 4
gctrl_dfile:
	.space	4
	.type	gdata_dent, %object
	.size	gdata_dent, 4
gdata_dent:
	.space	4
	.type	gdata_dfile_stats, %object
	.size	gdata_dfile_stats, 4
gdata_dfile_stats:
	.space	4
	.type	gdata_dfile_tstamp, %object
	.size	gdata_dfile_tstamp, 4
gdata_dfile_tstamp:
	.space	4
	.type	diag_dev_list, %object
	.size	diag_dev_list, 8
diag_dev_list:
	.space	8
	.type	n_tx_req_queued, %object
	.size	n_tx_req_queued, 4
n_tx_req_queued:
	.space	4
	.type	gbam_wq, %object
	.size	gbam_wq, 4
gbam_wq:
	.space	4
	.type	retry_cnt.38289, %object
	.size	retry_cnt.38289, 4
retry_cnt.38289:
	.space	4
	.type	ecm_transports, %object
	.size	ecm_transports, 50
ecm_transports:
	.space	50
	.space	2
	.type	diag_dload, %object
	.size	diag_dload, 4
diag_dload:
	.space	4
	.type	diag_clients, %object
	.size	diag_clients, 32
diag_clients:
	.space	32
	.type	rmnet_xport_names, %object
	.size	rmnet_xport_names, 50
rmnet_xport_names:
	.space	50
	.space	2
	.type	rmnet_transports, %object
	.size	rmnet_transports, 50
rmnet_transports:
	.space	50
	.space	2
	.type	mbim_transports, %object
	.size	mbim_transports, 50
mbim_transports:
	.space	50
	.space	2
	.type	product_string, %object
	.size	product_string, 256
product_string:
	.space	256
	.type	manufacturer_string, %object
	.size	manufacturer_string, 256
manufacturer_string:
	.space	256
	.type	ipa_params, %object
	.size	ipa_params, 28
ipa_params:
	.space	28
	.type	__key.49881, %object
	.size	__key.49881, 0
__key.49881:
	.type	__key.55496, %object
	.size	__key.55496, 0
__key.55496:
	.type	__key.55497, %object
	.size	__key.55497, 0
__key.55497:
	.type	__key.54158, %object
	.size	__key.54158, 0
__key.54158:
	.type	__key.54159, %object
	.size	__key.54159, 0
__key.54159:
	.type	__key.54160, %object
	.size	__key.54160, 0
__key.54160:
	.type	__key.52816, %object
	.size	__key.52816, 0
__key.52816:
	.type	__key.52817, %object
	.size	__key.52817, 0
__key.52817:
	.type	__key.38384, %object
	.size	__key.38384, 0
__key.38384:
	.type	__key.38510, %object
	.size	__key.38510, 0
__key.38510:
	.type	dent_rmnet_mux, %object
	.size	dent_rmnet_mux, 4
dent_rmnet_mux:
	.space	4
	.type	_ncm_dev, %object
	.size	_ncm_dev, 4
_ncm_dev:
	.space	4
	.type	nr_mbim_ports, %object
	.size	nr_mbim_ports, 4
nr_mbim_ports:
	.space	4
	.type	mbim_ports, %object
	.size	mbim_ports, 8
mbim_ports:
	.space	8
	.type	rndis_ul_max_xfer_size_rcvd, %object
	.size	rndis_ul_max_xfer_size_rcvd, 4
rndis_ul_max_xfer_size_rcvd:
	.space	4
	.type	rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	rndis_ul_max_pkt_per_xfer_rcvd, 4
rndis_ul_max_pkt_per_xfer_rcvd:
	.space	4
	.type	__key.62549, %object
	.size	__key.62549, 0
__key.62549:
	.type	__key.62550, %object
	.size	__key.62550, 0
__key.62550:
	.type	__key.62551, %object
	.size	__key.62551, 0
__key.62551:
	.type	ncm_connect, %object
	.size	ncm_connect, 1
ncm_connect:
	.space	1
	.space	3
	.type	android_class, %object
	.size	android_class, 4
android_class:
	.space	4
	.type	android_dev_count, %object
	.size	android_dev_count, 4
android_dev_count:
	.space	4
	.type	composite_string_index, %object
	.size	composite_string_index, 4
composite_string_index:
	.space	4
	.type	next_state.63109, %object
	.size	next_state.63109, 4
next_state.63109:
	.space	4
	.type	last_uevent.63108, %object
	.size	last_uevent.63108, 4
last_uevent.63108:
	.space	4
	.type	__key.45498, %object
	.size	__key.45498, 0
__key.45498:
	.type	write_error_after_csw_sent, %object
	.size	write_error_after_csw_sent, 4
write_error_after_csw_sent:
	.space	4
	.type	csw_hack_sent, %object
	.size	csw_hack_sent, 4
csw_hack_sent:
	.space	4
	.type	__key.44610, %object
	.size	__key.44610, 0
__key.44610:
	.type	__key.44612, %object
	.size	__key.44612, 0
__key.44612:
	.type	__key.8221, %object
	.size	__key.8221, 0
__key.8221:
	.type	epnum, %object
	.size	epnum, 4
epnum:
	.space	4
	.type	terminal_mode_version, %object
	.size	terminal_mode_version, 2
terminal_mode_version:
	.space	2
	.type	terminal_mode_vendor_id, %object
	.size	terminal_mode_vendor_id, 2
terminal_mode_vendor_id:
	.space	2
	.type	record_timestamp, %object
	.size	record_timestamp, 4
record_timestamp:
	.space	4
	.type	bam2bam_ports, %object
	.size	bam2bam_ports, 12
bam2bam_ports:
	.space	12
	.type	rndis_per_dev_params, %object
	.size	rndis_per_dev_params, 60
rndis_per_dev_params:
	.space	60
	.type	rndis_initialized, %object
	.size	rndis_initialized, 1
rndis_initialized:
	.space	1
	.space	3
	.type	the_card, %object
	.size	the_card, 4
the_card:
	.space	4
	.type	__key.57178, %object
	.size	__key.57178, 0
__key.57178:
	.type	__key.57179, %object
	.size	__key.57179, 0
__key.57179:
	.type	__key.53175, %object
	.size	__key.53175, 0
__key.53175:
	.type	__key.53118, %object
	.size	__key.53118, 0
__key.53118:
	.type	__key.53119, %object
	.size	__key.53119, 0
__key.53119:
	.type	acm_data, %object
	.size	acm_data, 4
acm_data:
	.space	4
	.type	prev_len.47150, %object
	.size	prev_len.47150, 4
prev_len.47150:
	.space	4
	.type	__key.46147, %object
	.size	__key.46147, 0
__key.46147:
	.type	__key.46156, %object
	.size	__key.46156, 0
__key.46156:
	.type	composite_gadget_bind, %object
	.size	composite_gadget_bind, 4
composite_gadget_bind:
	.space	4
	.type	idVendor, %object
	.size	idVendor, 2
idVendor:
	.space	2
	.type	idProduct, %object
	.size	idProduct, 2
idProduct:
	.space	2
	.type	bcdDevice, %object
	.size	bcdDevice, 2
bcdDevice:
	.space	2
	.space	2
	.type	iManufacturer, %object
	.size	iManufacturer, 4
iManufacturer:
	.space	4
	.type	composite_manufacturer, %object
	.size	composite_manufacturer, 50
composite_manufacturer:
	.space	50
	.space	2
	.type	iProduct, %object
	.size	iProduct, 4
iProduct:
	.space	4
	.type	iSerialNumber, %object
	.size	iSerialNumber, 4
iSerialNumber:
	.space	4
	.type	n_ports, %object
	.size	n_ports, 4
n_ports:
	.space	4
	.type	gs_tty_driver, %object
	.size	gs_tty_driver, 4
gs_tty_driver:
	.space	4
	.type	ports, %object
	.size	ports, 192
ports:
	.space	192
	.type	gs_dent, %object
	.size	gs_dent, 4
gs_dent:
	.space	4
	.type	rmnet_mux_smd_data_ch, %object
	.size	rmnet_mux_smd_data_ch, 4
rmnet_mux_smd_data_ch:
	.space	4
	.type	retry_cnt.37533, %object
	.size	retry_cnt.37533, 4
retry_cnt.37533:
	.space	4
	.type	__key.64506, %object
	.size	__key.64506, 0
__key.64506:
	.type	__key.64511, %object
	.size	__key.64511, 0
__key.64511:
	.type	__key.52424, %object
	.size	__key.52424, 0
__key.52424:
	.type	new_product_name.45775, %object
	.size	new_product_name.45775, 17
new_product_name.45775:
	.space	17
	.space	3
	.type	unknown.45965, %object
	.size	unknown.45965, 16
unknown.45965:
	.space	16
	.type	bam_info, %object
	.size	bam_info, 16
bam_info:
	.space	16
	.type	__key.32095, %object
	.size	__key.32095, 0
__key.32095:
	.type	__key.32096, %object
	.size	__key.32096, 0
__key.32096:
	.type	__key.47432, %object
	.size	__key.47432, 0
__key.47432:
	.type	__key.47378, %object
	.size	__key.47378, 0
__key.47378:
	.type	__key.47379, %object
	.size	__key.47379, 0
__key.47379:
	.type	__key.48338, %object
	.size	__key.48338, 0
__key.48338:
	.type	__key.48674, %object
	.size	__key.48674, 0
__key.48674:
	.type	n_bam2bam_ports, %object
	.size	n_bam2bam_ports, 4
n_bam2bam_ports:
	.space	4
	.type	__key.49647, %object
	.size	__key.49647, 0
__key.49647:
	.type	__key.49648, %object
	.size	__key.49648, 0
__key.49648:
	.type	port_num.50819, %object
	.size	port_num.50819, 4
port_num.50819:
	.space	4
	.type	port_num.51477, %object
	.size	port_num.51477, 4
port_num.51477:
	.space	4
	.type	rmnet_initialized.63364, %object
	.size	rmnet_initialized.63364, 4
rmnet_initialized.63364:
	.space	4
	.type	ports.63365, %object
	.size	ports.63365, 4
ports.63365:
	.space	4
	.type	n_bam2bam_data_ports, %object
	.size	n_bam2bam_data_ports, 4
n_bam2bam_data_ports:
	.space	4
	.type	the_dev, %object
	.size	the_dev, 4
the_dev:
	.space	4
	.type	dev_addr, %object
	.size	dev_addr, 4
dev_addr:
	.space	4
	.type	qc_dev_addr, %object
	.size	qc_dev_addr, 4
qc_dev_addr:
	.space	4
	.type	qc_host_addr, %object
	.size	qc_host_addr, 4
qc_host_addr:
	.space	4
	.type	__key.44647, %object
	.size	__key.44647, 0
__key.44647:
	.type	__key.44648, %object
	.size	__key.44648, 0
__key.44648:
	.type	audio_string_defs, %object
	.size	audio_string_defs, 8
audio_string_defs:
	.space	8
	.type	host_addr, %object
	.size	host_addr, 4
host_addr:
	.space	4
	.type	dbg_data, %object
	.size	dbg_data, 4104
dbg_data:
	.space	4104
	.type	rmnet_mux_sdio_data_ch, %object
	.size	rmnet_mux_sdio_data_ch, 4
rmnet_mux_sdio_data_ch:
	.space	4
	.type	rmnet_mux_sdio_ctl_ch, %object
	.size	rmnet_mux_sdio_ctl_ch, 4
rmnet_mux_sdio_ctl_ch:
	.space	4
	.type	rmnet_sdio_data_ch, %object
	.size	rmnet_sdio_data_ch, 4
rmnet_sdio_data_ch:
	.space	4
	.type	rmnet_sdio_ctl_ch, %object
	.size	rmnet_sdio_ctl_ch, 4
rmnet_sdio_ctl_ch:
	.space	4
	.type	debug_buffer, %object
	.size	debug_buffer, 4096
debug_buffer:
	.space	4096
	.section	.data.unlikely,"aw",%progbits
	.set	.LANCHOR5,. + 0
	.type	__warned.11099, %object
	.size	__warned.11099, 1
__warned.11099:
	.space	1
	.section	.devinit.rodata,"a",%progbits
	.align	2
	.type	android_id_table, %object
	.size	android_id_table, 48
android_id_table:
	.ascii	"android_usb\000"
	.space	8
	.space	4
	.ascii	"android_usb_hsic\000"
	.space	3
	.space	4
	.section	.exitcall.exit,"aw",%progbits
	.align	2
	.type	__exitcall_cleanup, %object
	.size	__exitcall_cleanup, 4
__exitcall_cleanup:
	.word	cleanup
	.type	__exitcall_gether_exit, %object
	.size	__exitcall_gether_exit, 4
__exitcall_gether_exit:
	.word	gether_exit
	.type	__exitcall_ghsuart_data_exit, %object
	.size	__exitcall_ghsuart_data_exit, 4
__exitcall_ghsuart_data_exit:
	.word	ghsuart_data_exit
	.type	__exitcall_ghsuart_ctrl_exit, %object
	.size	__exitcall_ghsuart_ctrl_exit, 4
__exitcall_ghsuart_ctrl_exit:
	.word	ghsuart_ctrl_exit
	.type	__exitcall_ghsic_data_exit, %object
	.size	__exitcall_ghsic_data_exit, 4
__exitcall_ghsic_data_exit:
	.word	ghsic_data_exit
	.type	__exitcall_gctrl_exit, %object
	.size	__exitcall_gctrl_exit, 4
__exitcall_gctrl_exit:
	.word	gctrl_exit
	.type	__exitcall_gqti_ctrl_cleanup, %object
	.size	__exitcall_gqti_ctrl_cleanup, 4
__exitcall_gqti_ctrl_cleanup:
	.word	gqti_ctrl_cleanup
	.type	__exitcall_gsmd_ctrl_exit, %object
	.size	__exitcall_gsmd_ctrl_exit, 4
__exitcall_gsmd_ctrl_exit:
	.word	gsmd_ctrl_exit
	.section	.initcall6.init,"aw",%progbits
	.align	2
	.type	__initcall_init6, %object
	.size	__initcall_init6, 4
__initcall_init6:
	.word	init
	.type	__initcall_gether_init6, %object
	.size	__initcall_gether_init6, 4
__initcall_gether_init6:
	.word	gether_init
	.type	__initcall_ghsuart_data_init6, %object
	.size	__initcall_ghsuart_data_init6, 4
__initcall_ghsuart_data_init6:
	.word	ghsuart_data_init
	.type	__initcall_ghsuart_ctrl_init6, %object
	.size	__initcall_ghsuart_ctrl_init6, 4
__initcall_ghsuart_ctrl_init6:
	.word	ghsuart_ctrl_init
	.type	__initcall_ghsic_data_init6, %object
	.size	__initcall_ghsic_data_init6, 4
__initcall_ghsic_data_init6:
	.word	ghsic_data_init
	.type	__initcall_gctrl_init6, %object
	.size	__initcall_gctrl_init6, 4
__initcall_gctrl_init6:
	.word	gctrl_init
	.type	__initcall_gqti_ctrl_init6, %object
	.size	__initcall_gqti_ctrl_init6, 4
__initcall_gqti_ctrl_init6:
	.word	gqti_ctrl_init
	.type	__initcall_gsmd_ctrl_init6, %object
	.size	__initcall_gsmd_ctrl_init6, 4
__initcall_gsmd_ctrl_init6:
	.word	gsmd_ctrl_init
	.section	.rodata.str1.4,"aMS",%progbits,1
	.align	2
.LC0:
	.ascii	"rmnet notify ep error %d\012\000"
	.space	2
.LC1:
	.ascii	"rmnet notify ep enqueue error %d\012\000"
	.space	2
.LC2:
	.ascii	"rmnet notifyep error %d\012\000"
	.space	3
.LC3:
	.ascii	"rmnet notify ep enq error %d\012\000"
	.space	2
.LC4:
	.ascii	"ecm req %02x.%02x response err %d\012\000"
	.space	1
.LC5:
	.ascii	"rmnet_mux notifyep error %d\012\000"
	.space	3
.LC6:
	.ascii	"rmnet control SDIO write failed\012\000"
	.space	3
.LC7:
	.ascii	"rmnet_mux ep0 enqueue err %d\012\000"
	.space	2
.LC8:
	.ascii	"rmnet data rx enqueue err %d\012\000"
	.space	2
.LC9:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs."
	.ascii	"c\000"
	.space	3
.LC10:
	.ascii	"<3>%s: device is already opened\012\000"
	.space	3
.LC11:
	.ascii	"<3>audio response on err %d\012\000"
	.space	3
.LC12:
	.ascii	"<3>%s: port is null\012\000"
	.space	3
.LC13:
	.ascii	"<3>%s: usb ep out queue failedport:%pK, port#%d\012"
	.ascii	"\000"
	.space	3
.LC14:
	.ascii	"<3>%s: port->port_usb is NULL\000"
	.space	2
.LC15:
	.ascii	"<3>%s: error dequeuing transfer, %d\012\000"
	.space	3
.LC16:
	.ascii	"<3>%s: error enqueuing transfer, %d\012\000"
	.space	3
.LC17:
	.ascii	"<3>%s: Invalid portno#%d\012\000"
	.space	2
.LC18:
	.ascii	"<3>%s: ecm req %02x.%02x response err %d\012\000"
	.space	2
.LC19:
	.ascii	"<3>%s: Bad control-OUT transfer\012\000"
	.space	3
.LC20:
	.ascii	"<3>%s: Illegal INPUT SIZE (%d) from host\012\000"
	.space	2
.LC21:
	.ascii	"<3>%s: Illegal NTB length %d\012\000"
	.space	2
.LC22:
	.ascii	"<3>%s: %s: Failed\012\000"
	.space	1
.LC23:
	.ascii	"<3>%s: %s: error dequeuing transfer, %d\012\000"
	.space	3
.LC24:
	.ascii	"<3>%s: %s(): cdev or config is NULL.\012\000"
	.space	2
.LC25:
	.ascii	"<6>%s: RNDIS %s response error %d, %d/%d\012\000"
	.space	2
.LC26:
	.ascii	"<6>%s: notify/0 --> %d\012\000"
.LC27:
	.ascii	"<3>%s: Failed to allocate playback_copy_buf\000"
.LC28:
	.ascii	"<3>%s: Failed to allocate playback_copy_buf buffer\000"
	.space	1
.LC29:
	.ascii	"<3>%s: Unknown command\000"
	.space	1
.LC30:
	.ascii	"<3>%s: Unknown control request %02x.%02x v%04x i%04"
	.ascii	"x l%d\012\000"
	.space	2
.LC31:
	.ascii	"<3>%s: audio response failed on err %d\012\000"
.LC32:
	.ascii	"<3>%s: STALL\012\000"
	.space	2
.LC33:
	.ascii	"<6>conn_gadget_release\012\000"
.LC34:
	.ascii	"<6>list_for_each...\012\000"
	.space	3
.LC35:
	.ascii	"<3>usb:%s * Host asked current MaxDatagramSize, sen"
	.ascii	"ding %d *\012\000"
	.space	2
.LC36:
	.ascii	"ncm req %02x.%02x response err %d\012\000"
	.space	1
.LC37:
	.ascii	"<3>usb:%s * Bad control-OUT transfer *\012\000"
.LC38:
	.ascii	"<3>usb:%s * Got wrong MTU SIZE (%d) from host *\012"
	.ascii	"\000"
	.space	3
.LC39:
	.ascii	"<3>usb:%s * MTU SIZE is larger than NTB SIZE (%d) f"
	.ascii	"rom host * \012\000"
.LC40:
	.ascii	"<3>************************************************"
	.ascii	"*\012\000"
	.space	2
.LC41:
	.ascii	"<3>usb:%s * Set MTU SIZE %d *\012\000"
	.space	1
.LC42:
	.ascii	"<3>%s: %s is enabled in other device\012\000"
	.space	2
.LC43:
	.ascii	"<3>%s: Failed to alloc f_holder\012\000"
	.space	3
.LC44:
	.ascii	"<3>acc_complete_set_string, err %d\012\000"
.LC45:
	.ascii	"<3>unknown accessory string index %d\012\000"
	.space	2
.LC46:
	.ascii	"<6>acc_release\012\000"
.LC47:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_acc"
	.ascii	"essory.c\000"
.LC48:
	.ascii	"<6>acc_open\012\000"
	.space	3
.LC49:
	.ascii	"<7>usb: %s buf=%s[%d], %s\012\000"
	.space	1
.LC50:
	.ascii	"<6>%s: Close rndis QC file\000"
	.space	1
.LC51:
	.ascii	"<3>%s: rndis_qc_dev not present\012\000"
	.space	3
.LC52:
	.ascii	"<6>%s: Open rndis QC driver\012\000"
	.space	3
.LC53:
	.ascii	"<3>%s: rndis_qc_dev not created yet\012\000"
	.space	3
.LC54:
	.ascii	"<6>%s: rndis QC file opened\012\000"
	.space	3
.LC55:
	.ascii	"<3>%s: Already opened\012\000"
	.space	1
.LC56:
	.ascii	"<6>mtp_release\012\000"
.LC57:
	.ascii	"<6>mtp_open\012\000"
	.space	3
.LC58:
	.ascii	"<3>CCID notify ep error %d\012\000"
.LC59:
	.ascii	"<3>ctrl resp queue empty  req%02x.%02x v%04x i%04x "
	.ascii	"l%d\012\000"
.LC60:
	.ascii	"rmnet ep0 enqueue err %d\012\000"
	.space	2
.LC61:
	.ascii	"<3>rmnet notify ep error %d\012\000"
	.space	3
.LC62:
	.ascii	"<3>%s: Invalid notify_count=%lu to decrement\012\000"
	.space	2
.LC63:
	.ascii	"<3>%s: response queue error: %d\000"
.LC64:
	.ascii	"<6>%s: Close mbim file\000"
	.space	1
.LC65:
	.ascii	"<6>%s: Open mbim driver\012\000"
	.space	3
.LC66:
	.ascii	"<3>%s: mbim_dev not created yet\012\000"
	.space	3
.LC67:
	.ascii	"<6>%s: Lock mbim_dev->open_excl for open\012\000"
	.space	2
.LC68:
	.ascii	"<3>%s: USB cable not connected\012\000"
.LC69:
	.ascii	"<6>%s: Exit, mbim file opened\012\000"
	.space	1
.LC70:
	.ascii	"<3>%s: usb disconnected\012\000"
	.space	3
.LC71:
	.ascii	"<3>%s: port:%pK port#%d sdio read failed err:%d\000"
.LC72:
	.ascii	"<3>%s: port:%pK port#%d unable to open sdio ch:%s\012"
	.ascii	"\000"
	.space	1
.LC73:
	.ascii	"error in submission: %s --> %d\012\000"
.LC74:
	.ascii	"common->fsg is NULL in %s at %u\012\000"
	.space	3
.LC75:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mas"
	.ascii	"s_storage.c\000"
	.space	1
.LC76:
	.ascii	"failed to override string ID\012\000"
	.space	2
.LC77:
	.ascii	"rmnet %s response error %d, %d/%d\012\000"
	.space	1
.LC78:
	.ascii	"rmnet_mux %s response error %d, %d/%d\012\000"
	.space	1
.LC79:
	.ascii	"%d\012\000"
.LC80:
	.ascii	"%01x\012\000"
	.space	2
.LC81:
	.ascii	"%u\012\000"
.LC82:
	.ascii	"%s\015\012\000"
	.space	3
.LC83:
	.ascii	"<7>usb: %s version %s\012\000"
	.space	1
.LC84:
	.ascii	"%s\012\000"
.LC85:
	.ascii	"%d %d\012\000"
	.space	1
.LC86:
	.ascii	"<7>usb: %s\012\000"
.LC87:
	.ascii	"delayed status mismatch..resetting\012\000"
.LC88:
	.ascii	"/home/Jprimero15/hlte/lolz/include/linux/netdevice."
	.ascii	"h\000"
	.space	3
.LC89:
	.ascii	"<6>netif_stop_queue() cannot be called before regis"
	.ascii	"ter_netdev()\012\000"
	.space	3
.LC90:
	.ascii	"<3>%s: write error:%d\012\000"
	.space	1
.LC91:
	.ascii	"<4>%s: port:%pK port#%d unexpected %s status %d\012"
	.ascii	"\000"
	.space	3
.LC92:
	.ascii	"<3>%s: invalid portno#%d\012\000"
	.space	2
.LC93:
	.ascii	"<3>%s: gser is null\012\000"
	.space	3
.LC94:
	.ascii	"<3>%s: port:%pK port#%d sdio not connected\012\000"
.LC95:
	.ascii	"<3>acc_complete_set_hid_report_desc, err %d\012\000"
	.space	3
.LC96:
	.ascii	"qmi resp empty  req%02x.%02x v%04x i%04x l%d\012\000"
	.space	2
.LC97:
	.ascii	"<3>%s: invalid port: %d\012\000"
	.space	3
.LC98:
	.ascii	"<6>%s: mbim suspended\012\000"
	.space	1
.LC99:
	.ascii	"<6>%s: mbim resumed\012\000"
	.space	3
.LC100:
	.ascii	"smd_control_ch_opened: %lu\012smd_data_ch_opened: %"
	.ascii	"lu\012usb online : %d\012dpkts_from_modem: %lu\012d"
	.ascii	"pkts_to_host: %lu\012pending_dpkts_to_host: %lu\012"
	.ascii	"dpkts_from_host: %lu\012dpkts_to_modem: %lu\012pend"
	.ascii	"ing_dpkts_to_modem: %lu\012cpkts_from_modem: %lu\012"
	.ascii	"cpkts_to_host: %lu\012pending_cpkts_to_host: %lu\012"
	.ascii	"cpkts_from_host: %lu\012cpkts_to_modem: %lu\012pend"
	.ascii	"ing_cpkts_to_modem: %lu\012smd_read_avail_ctrl: %d\012"
	.ascii	"smd_write_avail_ctrl: %d\012smd_read_avail_data: %d"
	.ascii	"\012smd_write_avail_data: %d\012\000"
.LC101:
	.ascii	"-*-DATA-*-\012dpkts_tohost:%lu epInPool:%u tx_size:"
	.ascii	"%u drp_cnt:%lu\012dpkts_tomodem:%lu epOutPool:%u rx"
	.ascii	"_size:%u pending:%u\012-*-QMI-*-\012cpkts_tomodem:%"
	.ascii	"lu  qmi_req_q:%u cbits:%d\012cpkts_tolaptop:%lu qmi"
	.ascii	"_resp_q:%u notify_cnt:%d\012-*-MISC-*-\012data_ch_s"
	.ascii	"tatus: %lu ctrl_ch_status: %lu\012\000"
	.space	2
.LC102:
	.ascii	"UNDEFINED\000"
	.space	2
.LC103:
	.ascii	"dpkts_tomsm:  %lu\012dpkts_tomdm: %lu\012cpkts_tomd"
	.ascii	"m: %lu\012dpkts_tolaptop: %lu\012cpkts_tolaptop:  %"
	.ascii	"lu\012cbits_to_modem: %lu\012tx skb size:     %u\012"
	.ascii	"rx_skb_size:     %u\012dpkts_pending_at_dmux: %u\012"
	.ascii	"tx drp cnt: %lu\012cpkts_drp_cnt: %lu\012cpkt_tx_ql"
	.ascii	"en: %lu\012cpkt_rx_qlen_to_modem: %lu\012xport: %s\012"
	.ascii	"ctr_ch_opened:\011%d\012\000"
.LC104:
	.ascii	"<3>usb: tty or gser is NULL !!\012\000"
.LC105:
	.ascii	"nbytes_from_host: %lu\012\000"
	.space	1
.LC106:
	.ascii	"nbytes_to_tty: %lu\012\000"
.LC107:
	.ascii	"nbytes_with_usb_OUT_txr: %lu\012\000"
	.space	2
.LC108:
	.ascii	"nbytes_from_tty: %lu\012\000"
	.space	2
.LC109:
	.ascii	"nbytes_to_host: %lu\012\000"
	.space	3
.LC110:
	.ascii	"nbytes_with_usb_IN_txr: %lu\012\000"
	.space	3
.LC111:
	.ascii	"tty_flags: %lu\012\000"
.LC112:
	.ascii	"DTR_status: %d\012\000"
.LC113:
	.ascii	"###PORT:%d port:%pK###\012nbytes_tolaptop: %lu\012n"
	.ascii	"bytes_tomodem:  %lu\012cbits_to_modem:  %u\012cbits"
	.ascii	"_to_laptop: %u\012read_pool_len:   %lu\012read_queu"
	.ascii	"e_len:  %lu\012write_pool_len:  %lu\012n_read:     "
	.ascii	"     %u\012sdio_open:       %d\012sdio_probe:      "
	.ascii	"%d\012\000"
	.space	3
.LC114:
	.ascii	"###PORT:%d###\012nbytes_tolaptop: %lu\012nbytes_tom"
	.ascii	"odem:  %lu\012cbits_to_modem:  %u\012cbits_to_lapto"
	.ascii	"p: %u\012n_read: %u\012smd_read_avail: %d\012smd_wr"
	.ascii	"ite_avail: %d\012CH_OPENED: %d\012CH_READY: %d\012\000"
	.space	2
.LC115:
	.ascii	"#PORT:%d port:%pK data_ch:%pK#\012dpkts_to_usbhost:"
	.ascii	" %lu\012dpkts_to_modem:  %lu\012dpkts_pwith_bam: %u"
	.ascii	"\012to_usbhost_dcnt:  %u\012tomodem__dcnt:  %u\012r"
	.ascii	"x_flow_control_disable_count: %u\012rx_flow_control"
	.ascii	"_enable_count: %u\012rx_flow_control_triggered: %u\012"
	.ascii	"max_num_pkts_pending_with_bam: %u\012tx_buf_len:\011"
	.ascii	" %u\012rx_buf_len:\011 %u\012data_ch_open:   %d\012"
	.ascii	"data_ch_ready:  %d\012\000"
.LC116:
	.ascii	"HIGH\000"
	.space	3
.LC117:
	.ascii	"LOW\000"
.LC118:
	.ascii	"#PORT:%d port:%pK ctrl_ch:%pK#\012to_usbhost: %lu\012"
	.ascii	"to_modem:   %lu\012DTR:        %s\012ch_open:    %d"
	.ascii	"\012ch_ready:   %d\012read_avail: %d\012write_avail"
	.ascii	":%d\012\000"
	.space	1
.LC119:
	.ascii	"\012Name:        %s\012#PORT:%d port: %pK\012to_usb"
	.ascii	"host:    %lu\012to_modem:      %lu\012cpkt_drp_cnt:"
	.ascii	"  %lu\012DTR:           %s\012ch_open:       %d\012"
	.ascii	"ch_ready:      %d\012\000"
.LC120:
	.ascii	"\012Name:           %s\012#PORT:%d port#:   %pK\012"
	.ascii	"data_ch_open:\011   %d\012data_ch_ready:    %d\012\012"
	.ascii	"******UL INFO*****\012\012dpkts_to_modem:   %lu\012"
	.ascii	"tomodem_drp_cnt:  %u\012rx_buf_len:       %u\012tx "
	.ascii	"thld cnt       %u\012tx unthld cnt     %u\012TX_THR"
	.ascii	"OTTLED      %d\012\000"
.LC121:
	.ascii	"\012******DL INFO******\012\012dpkts_to_usbhost: %l"
	.ascii	"u\012tx_buf_len:\011   %u\012rx thld cnt\011   %u\012"
	.ascii	"rx unthld cnt\011   %u\012uthld pnd skbs    %u\012R"
	.ascii	"X_THROTTLED\011   %d\012\000"
	.space	3
.LC122:
	.ascii	"#PORT:%d port: %pK\012to_usbhost:    %lu\012to_mode"
	.ascii	"m:      %lu\012cpkt_drp_cnt:  %lu\012DTR:          "
	.ascii	" %s\012\000"
	.space	1
.LC123:
	.ascii	"\012Name:           %s\012#PORT:%d port#:   %pK\012"
	.ascii	"data_ch_open:\011   %d\012data_ch_ready:    %d\012d"
	.ascii	"ata_ch_connected: %d\012\012******UL INFO*****\012\012"
	.ascii	"dpkts_to_modem:   %lu\012tomodem_drp_cnt:  %u\012rx"
	.ascii	"_buf_len:       %u\012TX_THROTTLED      %d\012\000"
.LC124:
	.ascii	"\012******DL INFO******\012\012dpkts_to_usbhost: %l"
	.ascii	"u\012tx_buf_len:\011   %u\012RX_THROTTLED\011   %d\012"
	.ascii	"\000"
	.space	2
.LC125:
	.ascii	"---Name: %s---\012endpoints: %s, %s\012dpkts_tolapt"
	.ascii	"op: %lu\012dpkts_tomodem:  %lu\012pkts_tolaptop_pen"
	.ascii	"ding: %u\012\000"
.LC126:
	.ascii	"rmnet command error %d\012\000"
.LC127:
	.ascii	"rmnet control smd write failed\012\000"
.LC128:
	.ascii	"rmnet QMI pool is empty\012\000"
	.space	3
.LC129:
	.ascii	"RMNET %s response error %d, %d/%d\012\000"
	.space	1
.LC130:
	.ascii	"rmnet data smd write failed\012\000"
	.space	3
.LC131:
	.ascii	"rmnet SMD data write failed\012\000"
	.space	3
.LC132:
	.ascii	"<3>%s: smd_write failed err:%d\012\000"
.LC133:
	.ascii	"rmnet_mux SMD data write failed\012\000"
	.space	3
.LC134:
	.ascii	"RMNET_MUX %s response error %d, %d/%d\012\000"
	.space	1
.LC135:
	.ascii	"rmnet_mux data smd write failed\012\000"
	.space	3
.LC136:
	.ascii	"rmnet data tx ep error %d\012\000"
	.space	1
.LC137:
	.ascii	"rmnet_mux data tx ep error %d\012\000"
	.space	1
.LC138:
	.ascii	"rmnet tx data enqueue err %d\012\000"
	.space	2
.LC139:
	.ascii	"rmnet QMI Tx buffers full\012\000"
	.space	1
.LC140:
	.ascii	"<3>%s: usb ep out queue failedport:%pK, port#%d err"
	.ascii	":%d\012\000"
.LC141:
	.ascii	"Unable to open control smd channel: %d\012\000"
.LC142:
	.ascii	"pdrv %s register failed %d\012\000"
.LC143:
	.ascii	"Unable to open data smd channel\012\000"
	.space	3
.LC144:
	.ascii	"<3>%s:smd read_avail failure:%d or channel closed c"
	.ascii	"h=%pK\000"
	.space	3
.LC145:
	.ascii	"<3>%s: SMD sending incorrect pkt\012\000"
	.space	2
.LC146:
	.ascii	"<3>%s: smd read failure %d\012\000"
.LC147:
	.ascii	"<3>%s: %s: Unable to allocate reset function pkt\012"
	.ascii	"\000"
	.space	2
.LC148:
	.ascii	"<3>%s: mbim dev is null\012\000"
	.space	3
.LC149:
	.ascii	"<3>%s: mbim command error %d\012\000"
	.space	2
.LC150:
	.ascii	"<3>%s: Unable to allocate ctrl pkt\012\000"
.LC151:
	.ascii	"<3>conn_gadget_function_disable cdev %pK\012\000"
	.space	2
.LC152:
	.ascii	"%s: response queue error\012\000"
	.space	2
.LC153:
	.ascii	"<3>ccid ep0 enqueue err %d\012\000"
.LC154:
	.ascii	"rmnet_mux command error %d\012\000"
.LC155:
	.ascii	"unable to allocate memory for ctrl req\012\000"
.LC156:
	.ascii	"<3>%s: ctrl pkts dropped: cpkts_drp_cnt: %lu\012\000"
	.space	2
.LC157:
	.ascii	"acm response on ttyGS%d, err %d\012\000"
	.space	3
.LC158:
	.ascii	"usb_rmnet_ctrl_smd\000"
	.space	1
.LC159:
	.ascii	"status\000"
	.space	1
.LC160:
	.ascii	"ghsic_ctrl_xport\000"
	.space	3
.LC161:
	.ascii	"ghsic_data_xport\000"
	.space	3
.LC162:
	.ascii	"timestamp\000"
	.space	2
.LC163:
	.ascii	"ghsuart_ctrl_xport\000"
	.space	1
.LC164:
	.ascii	"ghsuart_data_xport\000"
	.space	1
.LC165:
	.ascii	"usb_diag\000"
	.space	3
.LC166:
	.ascii	"<6>%s: sdio data ch not open\012\000"
	.space	2
.LC167:
	.ascii	"rmnet SDIO data write failed\012\000"
	.space	2
.LC168:
	.ascii	"<3>%s: usb epIn failed with %d\012\000"
.LC169:
	.ascii	"<3>%s: data tx ep error %d\012\000"
.LC170:
	.ascii	"rmnet_mux SDIO data write failed\012\000"
	.space	2
.LC171:
	.ascii	"rmnet_mux data rx enqueue err %d\012\000"
	.space	2
.LC172:
	.ascii	"<3>%s: unable to open smd port:%s err:%d\012\000"
	.space	2
.LC173:
	.ascii	"Unable to open SDIO DATA channel\012\000"
	.space	2
.LC174:
	.ascii	"<3>%s: rx queue failed %d\012\000"
	.space	1
.LC175:
	.ascii	"<3>%s: %s response error %d, %d/%d\012\000"
.LC176:
	.ascii	"<3>%s: data rx enqueue err %d\012\000"
	.space	1
.LC177:
	.ascii	"<3>copying to user space failed\000"
.LC178:
	.ascii	"<3>wrong parameter\000"
	.space	1
.LC179:
	.ascii	"<3>%s() copy_to_user f %d\012\000"
	.space	1
.LC180:
	.ascii	"<6>%s: Received command %d\012\000"
.LC181:
	.ascii	"<3>%s: copying to user space failed\000"
.LC182:
	.ascii	"<6>%s: Sent max packets per xfer %d\000"
.LC183:
	.ascii	"<3>%s: Unsupported IOCTL\000"
	.space	3
.LC184:
	.ascii	"<6>%s: Sent NTB size %d\000"
.LC185:
	.ascii	"<6>%s: Sent NTB datagrams count %d\000"
	.space	1
.LC186:
	.ascii	"<3>%s: wrong parameter\000"
	.space	1
.LC187:
	.ascii	"<3>%s: cpkt size:%d > buf size:%d\012\000"
	.space	1
.LC188:
	.ascii	"<3>Buffer size is too big %d, should be at most %d\012"
	.ascii	"\000"
.LC189:
	.ascii	"<3>Previous reading is not finished yet\012\000"
	.space	3
.LC190:
	.ascii	"<3>cpkt size too big:%d > buf size:%d\012\000"
	.space	1
.LC191:
	.ascii	"<3>copy_to_user failed: err %d\012\000"
.LC192:
	.ascii	"<3>%s() cmd is not proper ioctl type %c\012\000"
	.space	3
.LC193:
	.ascii	"<3>%s() cmd is not proper ioctl number %d\012\000"
	.space	1
.LC194:
	.ascii	"<3>%s() cmd has no buffer\012\000"
	.space	1
.LC195:
	.ascii	"<3>%s() cmd has invalid direction\012\000"
	.space	1
.LC196:
	.ascii	"<3>%s() _conn_gadget_dev is NULL\012\000"
	.space	2
.LC197:
	.ascii	"<3>%s() SUPPORT_LIST copy_to_user f %d\012\000"
.LC198:
	.ascii	"<3>%s() close called\012\000"
	.space	2
.LC199:
	.ascii	"<3>%s() WAIT_NOTIFY copy_to_user f %d\012\000"
	.space	1
.LC200:
	.ascii	"<3>%s() GET_STATUS copy_to_user f %d\012\000"
	.space	2
.LC201:
	.ascii	"<3>%s: zero length ctrl pkt\012\000"
	.space	3
.LC202:
	.ascii	"<3>%s: max_pkt_size:%d given_pkt_size:%d\012\000"
	.space	2
.LC203:
	.ascii	"<3>%s: cannot allocate rmnet_mux ctrl pkt\012\000"
	.space	1
.LC204:
	.ascii	"<3>%s: copy_from_user failed err:%d\012\000"
	.space	3
.LC205:
	.ascii	"rmnet_mux notify ep enqueue error %d\012\000"
	.space	2
.LC206:
	.ascii	"<3>Previous writing not finished yet\012\000"
	.space	2
.LC207:
	.ascii	"<3>failed to allocate ctrl pkt\012\000"
.LC208:
	.ascii	"<3>copy_from_user failed err:%d\012\000"
	.space	3
.LC209:
	.ascii	"<3>failed to send ctrl packet. error=%d\012\000"
	.space	3
.LC210:
	.ascii	"<3>send_cpkt_response callback is NULL\012\000"
.LC211:
	.ascii	"<3>ccid notify ep enqueue error %d\012\000"
.LC212:
	.ascii	"g_ether\000"
.LC213:
	.ascii	"29-May-2008\000"
.LC214:
	.ascii	"g_qc_ether\000"
	.space	1
.LC215:
	.ascii	"<3>usb_ep_queue failed ret: %d\012\000"
.LC216:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/u_ser"
	.ascii	"ial.c\000"
	.space	3
.LC217:
	.ascii	"%s setup response queue error\012\000"
	.space	1
.LC218:
	.ascii	"<4>%s: port:%pK port#%d Unexpected Rx Status:%d\012"
	.ascii	"\000"
	.space	3
.LC219:
	.ascii	"<3>%s: smd write failed err:%d\012\000"
.LC220:
	.ascii	"<4>ttyGS%d: unexpected RX status %d\012\000"
	.space	3
.LC221:
	.ascii	"<4>ttyGS%d: RX not scheduled?\012\000"
	.space	1
.LC222:
	.ascii	"CONFIGURED\000"
	.space	1
.LC223:
	.ascii	"DISCONNECTED\000"
	.space	3
.LC224:
	.ascii	"CONNECTED\000"
	.space	2
.LC225:
	.ascii	"<7>usb: %s buf=%s\012\000"
	.space	1
.LC226:
	.ascii	"<7>usb: %s dev->enabled=%d\012\000"
.LC227:
	.ascii	"%s,\000"
.LC228:
	.ascii	"%s\000"
	.space	1
.LC229:
	.ascii	"%04x\012\000"
	.space	2
.LC230:
	.ascii	"%02x:%02x:%02x:%02x:%02x:%02x\012\000"
	.space	1
.LC231:
	.ascii	"<6>%s: name:%s is not found\012\000"
	.space	3
.LC232:
	.ascii	"bam_dmux_ch_8\000"
	.space	2
.LC233:
	.ascii	"<3>%s: usb_bam_connect (src) failed: err:%d\012\000"
	.space	3
.LC234:
	.ascii	"<3>%s: usb_bam_connect (dst) failed: err:%d\012\000"
	.space	3
.LC235:
	.ascii	"<3>%s:teth_bridge_init() failed\012\000"
	.space	3
.LC236:
	.ascii	"<3>%s: out of memory\012\000"
	.space	2
.LC237:
	.ascii	"<3>%s: usb_bam_client_ready failed: err:%d\012\000"
.LC238:
	.ascii	"<3>%s: %s:teth_bridge_init() failed\012\000"
	.space	3
.LC239:
	.ascii	"<3>%s: %s: usb_bam_connect_ipa failed: err:%d\012\000"
	.space	1
.LC240:
	.ascii	"<3>%s: %s:teth_bridge_connect() failed\012\000"
.LC241:
	.ascii	"<3>%s: port_usb is NULL\000"
.LC242:
	.ascii	"<3>%s: port_usb->out (bulk out ep) is NULL\000"
	.space	1
.LC243:
	.ascii	"<3>%s: %s: usb_bam_client_ready failed: err:%d\012\000"
.LC244:
	.ascii	"<3>%s: BAM reset failed %d\012\000"
.LC245:
	.ascii	"<3>%s: usb_ep_enable failed eptype:IN ep:%pK\000"
	.space	3
.LC246:
	.ascii	"<3>%s: usb_ep_enable failed eptype:OUT ep:%pK\000"
	.space	2
.LC247:
	.ascii	"<3>%s: %s: BAM reset failed %d\012\000"
.LC248:
	.ascii	"<3>Failed to allocate rmnet control device\012\000"
.LC249:
	.ascii	"&port->read_wq\000"
	.space	1
.LC250:
	.ascii	"<3>rmnet control driver failed to register\000"
	.space	1
.LC251:
	.ascii	"&dev->read_wq\000"
	.space	2
.LC252:
	.ascii	"&dev->write_wq\000"
	.space	1
.LC253:
	.ascii	"<3>USB accessory gadget driver failed to initialize"
	.ascii	"\012\000"
	.space	3
.LC254:
	.ascii	"<6>%s: initialize rndis QC instance\012\000"
	.space	3
.LC255:
	.ascii	"<3>%s: rndis QC driver failed to register\000"
	.space	2
.LC256:
	.ascii	"&dev->intr_wq\000"
	.space	2
.LC257:
	.ascii	"f_mtp\000"
	.space	2
.LC258:
	.ascii	"<3>mtp gadget driver failed to initialize\012\000"
	.space	1
.LC259:
	.ascii	"<3>adb gadget driver failed to initialize\012\000"
	.space	1
.LC260:
	.ascii	"k_rmnet_mux_work\000"
	.space	3
.LC261:
	.ascii	"&smd_dev->smd_data.wait\000"
.LC262:
	.ascii	"&ctrl_dev->tx_wait_q\000"
	.space	3
.LC263:
	.ascii	"usb_rmnet_mux\000"
	.space	2
.LC264:
	.ascii	"<3>%s: failed to register misc device\012\000"
	.space	1
.LC265:
	.ascii	"<6>%s: rndis QC cleanup\000"
.LC266:
	.ascii	"<6>%s: Enter\000"
	.space	3
.LC267:
	.ascii	"gmidi_transmit: midi_alloc_ep_request failed\012\000"
	.space	2
.LC268:
	.ascii	"kill %s:  resubmit %d bytes --> %d\012\000"
.LC269:
	.ascii	"<3>usb:%s tx queue err %d\012\000"
	.space	1
.LC270:
	.ascii	"<3>invalid rndis pkt: skblen:%u hdr_len:%u\000"
	.space	1
.LC271:
	.ascii	"<3>invalid rndis message: %d/%d/%d/%d, len:%d\012\000"
	.space	1
.LC272:
	.ascii	"<3>%s:skb clone failed\012\000"
.LC273:
	.ascii	"y\000"
	.space	2
.LC274:
	.ascii	"n\000"
	.space	2
.LC275:
	.ascii	"?\000"
	.space	2
.LC276:
	.ascii	"disconnected\000"
	.space	3
.LC277:
	.ascii	"connected\000"
	.space	2
.LC278:
	.ascii	"Config Nr. %d\012used      : %s\012state     : %s\012"
	.ascii	"medium    : 0x%08X\012speed     : %d\012cable     :"
	.ascii	" %s\012vendor ID : 0x%08X\012vendor    : %s\012ul-m"
	.ascii	"ax-xfer-size:%d max-xfer-size-rcvd: %d\012ul-max-pk"
	.ascii	"ts-per-xfer:%d max-pkts-per-xfer-rcvd:%d\012\000"
	.space	3
.LC279:
	.ascii	"unable to open backing file: %s\012\000"
	.space	3
.LC280:
	.ascii	"invalid file type: %s\012\000"
	.space	1
.LC281:
	.ascii	"file not readable: %s\012\000"
	.space	1
.LC282:
	.ascii	"unable to find file size: %s\012\000"
	.space	2
.LC283:
	.ascii	"file too big: %s\012\000"
	.space	2
.LC284:
	.ascii	"using only first %d blocks\012\000"
.LC285:
	.ascii	"file too small: %s\012\000"
.LC286:
	.ascii	"<3>%s(#) call conn_gadget_cleanup\012\000"
	.space	1
.LC287:
	.ascii	"<6>conn_gadget_cleanup\012\000"
.LC288:
	.ascii	"<3>%s() _conn_gadget_dev is not allocated\012\000"
	.space	1
.LC289:
	.ascii	"<3>%s(#) call conn_gadget_setup\012\000"
	.space	3
.LC290:
	.ascii	"<6>conn_gadget_setup\012\000"
	.space	2
.LC291:
	.ascii	"<3>alloc conn_gadget_dev F\012\000"
.LC292:
	.ascii	"&dev->ioctl_wq\000"
	.space	1
.LC293:
	.ascii	"<3>%s: error rd_queue vmalloc\012\000"
	.space	1
.LC294:
	.ascii	"<3>%s: misc_register f %d\012\000"
	.space	1
.LC295:
	.ascii	"<3>%s() conn_gadget gadget driver failed to initial"
	.ascii	"ize\012\000"
.LC296:
	.ascii	"<3>%s() _conn_gaddget_dev onlined\012\000"
	.space	1
.LC297:
	.ascii	"%d\000"
	.space	1
.LC298:
	.ascii	"<3>%s() rd_queue_buf vmalloc f\012\000"
.LC299:
	.ascii	"<7>%s: product %s\000"
	.space	2
.LC300:
	.ascii	"<7>%s: vendor %s\000"
	.space	3
.LC301:
	.ascii	"%28s\000"
	.space	3
.LC302:
	.ascii	"%04x\000"
	.space	3
.LC303:
	.ascii	"%255s\000"
	.space	2
.LC304:
	.ascii	"Wrong NTH SIGN, skblen %d\012\000"
	.space	1
.LC305:
	.ascii	"HEAD:\000"
	.space	2
.LC306:
	.ascii	"<6>\000"
.LC307:
	.ascii	"Wrong NTB headersize\012\000"
	.space	2
.LC308:
	.ascii	"OUT size exceeded\012\000"
	.space	1
.LC309:
	.ascii	"Bad index: %x\012\000"
	.space	1
.LC310:
	.ascii	"Wrong NDP SIGN\012\000"
.LC311:
	.ascii	"Bad NDP length: %x\012\000"
.LC312:
	.ascii	"Bad dgram length: %x\012\000"
	.space	2
.LC313:
	.ascii	"Bad CRC\012\000"
	.space	3
.LC314:
	.ascii	"<3>usb: force short packet %d  \012\000"
	.space	3
.LC315:
	.ascii	"<3>Dropped skb \012\000"
	.space	3
.LC316:
	.ascii	"<3>usb:%s final Expanding the buffer %d \012\000"
	.space	2
.LC317:
	.ascii	"ACCESSORY=START\000"
.LC318:
	.ascii	"NCM_DEVICE=START\000"
	.space	3
.LC319:
	.ascii	"NCM_DEVICE=RELEASE\000"
	.space	1
.LC320:
	.ascii	"<7>usb: %s ncm_connect=%d\012\000"
	.space	1
.LC321:
	.ascii	"<3>usb: %s superspeed available \012\000"
	.space	2
.LC322:
	.ascii	"<3>usb: %s ss_host_available(%d), windowsos(%d)\012"
	.ascii	"\000"
	.space	3
.LC323:
	.ascii	"<3>usb: %s gadget not available \012\000"
	.space	2
.LC324:
	.ascii	":\000"
	.space	2
.LC325:
	.ascii	"<3>%s: %s(): Failed to alloc memory for android con"
	.ascii	"f\012\000"
	.space	2
.LC326:
	.ascii	",\000"
	.space	2
.LC327:
	.ascii	"ffs\000"
.LC328:
	.ascii	"<3>%s: android_usb: Cannot enable ffs (%d)\000"
	.space	1
.LC329:
	.ascii	"<3>%s: android_usb: Cannot enable '%s' (%d)\000"
.LC330:
	.ascii	"<7>usb: %s disconnect\012\000"
	.space	1
.LC331:
	.ascii	"f_%s\000"
	.space	3
.LC332:
	.ascii	"<3>%s: %s: Failed to create dev %s\000"
	.space	1
.LC333:
	.ascii	"<3>%s: %s: Failed to init %s\000"
	.space	3
.LC334:
	.ascii	"<3>%s: %s: Failed to create function %s attributes\000"
	.space	1
.LC335:
	.ascii	"Android\000"
.LC336:
	.ascii	"0123456789ABCDEF\000"
	.space	3
.LC337:
	.ascii	"net2280\000"
.LC338:
	.ascii	"dummy_udc\000"
	.space	2
.LC339:
	.ascii	"pxa25x_udc\000"
	.space	1
.LC340:
	.ascii	"goku_udc\000"
	.space	3
.LC341:
	.ascii	"omap_udc\000"
	.space	3
.LC342:
	.ascii	"pxa27x_udc\000"
	.space	1
.LC343:
	.ascii	"s3c2410_udc\000"
.LC344:
	.ascii	"at91_udc\000"
	.space	3
.LC345:
	.ascii	"imx_udc\000"
.LC346:
	.ascii	"musb-hdrc\000"
	.space	2
.LC347:
	.ascii	"atmel_usba_udc\000"
	.space	1
.LC348:
	.ascii	"fsl-usb2-udc\000"
	.space	3
.LC349:
	.ascii	"amd5536udc\000"
	.space	1
.LC350:
	.ascii	"m66592_udc\000"
	.space	1
.LC351:
	.ascii	"fsl_qe_udc\000"
	.space	1
.LC352:
	.ascii	"ci13xxx_pci\000"
.LC353:
	.ascii	"langwell_udc\000"
	.space	3
.LC354:
	.ascii	"r8a66597_udc\000"
	.space	3
.LC355:
	.ascii	"s3c-hsotg\000"
	.space	2
.LC356:
	.ascii	"pch_udc\000"
.LC357:
	.ascii	"ci13xxx_msm\000"
.LC358:
	.ascii	"renesas_usbhs_udc\000"
	.space	2
.LC359:
	.ascii	"s3c-hsudc\000"
	.space	2
.LC360:
	.ascii	"net2272\000"
.LC361:
	.ascii	"dwc3-gadget\000"
.LC362:
	.ascii	"msm72k_udc\000"
	.space	1
.LC363:
	.ascii	"ci13xxx_msm_hsic\000"
	.space	3
.LC364:
	.ascii	"<4>%s: %s: controller '%s' not recognized\012\000"
	.space	1
.LC365:
	.ascii	"USB_STATE=DISCONNECTED\000"
	.space	1
.LC366:
	.ascii	"USB_STATE=CONNECTED\000"
.LC367:
	.ascii	"USB_STATE=CONFIGURED\000"
	.space	3
.LC368:
	.ascii	"USB_STATE=SUSPENDED\000"
.LC369:
	.ascii	"USB_STATE=RESUMED\000"
	.space	2
.LC370:
	.ascii	"USB_CONNECTION=CONNECTED\000"
	.space	3
.LC371:
	.ascii	"low\000"
.LC372:
	.ascii	"<6>%s: %s: did not send uevent (%d %d %pK)\012\000"
.LC373:
	.ascii	"<6>%s: %s: sent uevent %s\012\000"
	.space	1
.LC374:
	.ascii	"<6>%s: %s: sent missed DISCONNECT event\012\000"
	.space	3
.LC375:
	.ascii	"<3>acc_complete_send_hid_event, err %d\012\000"
.LC376:
	.ascii	"<3>can't add hid device: %d\012\000"
	.space	3
.LC377:
	.ascii	"<3>can't add HID device %pK\012\000"
	.space	3
.LC378:
	.ascii	"<6>%s (%s)\012\000"
.LC379:
	.ascii	"SWITCH_NAME=USB_MESSAGE\000"
.LC380:
	.ascii	"SWITCH_STATE=%s\000"
.LC381:
	.ascii	"usb_msg\000"
.LC382:
	.ascii	"usb_ep_set_halt -> %d\012\000"
	.space	1
.LC383:
	.ascii	"write %u @ %llu beyond end %llu\012\000"
	.space	3
.LC384:
	.ascii	"<6>unloading\012\000"
	.space	2
.LC385:
	.ascii	"&ffs->mutex\000"
.LC386:
	.ascii	"&ffs->ev.waitq\000"
	.space	1
.LC387:
	.ascii	"&x->wait\000"
	.space	3
.LC388:
	.ascii	"ep0\000"
.LC389:
	.ascii	"<6>file system registered\012\000"
	.space	1
.LC390:
	.ascii	"<3>failed registering file system (%d)\012\000"
.LC391:
	.ascii	"<6>%s: ESHUTDOWN/ECONNRESET, connection gone\000"
	.space	3
.LC392:
	.ascii	"<3>%s: Unknown event %02x --> %d\012\000"
	.space	2
.LC393:
	.ascii	"<3>%s: Pending notifications in MBIM_NOTIFY_NONE\012"
	.ascii	"\000"
	.space	2
.LC394:
	.ascii	"<3>%s: Queue notify request failed, err: %d\000"
.LC395:
	.ascii	"<3>%s: usb_ep_queue failed, err: %d\000"
.LC396:
	.ascii	"<6>%s: usb cable is not connected\012\000"
	.space	1
.LC397:
	.ascii	"<3>%s: w_length > 0: %d\000"
.LC398:
	.ascii	"<3>%s: ctrl resp queue empty\012\000"
	.space	2
.LC399:
	.ascii	"<3>%s: wrong NTB length %d\000"
	.space	1
.LC400:
	.ascii	"<3>%s: invalid control req: %02x.%02x v%04x i%04x l"
	.ascii	"%d\012\000"
	.space	1
.LC401:
	.ascii	"<3>%s: queueing req failed: %02x.%02x, err %d\012\000"
	.space	1
.LC402:
	.ascii	"<3>%s: ctrl req err %d: %02x.%02x v%04x i%04x l%d\012"
	.ascii	"\000"
	.space	1
.LC403:
	.ascii	"<3>%s: Received NULL mbim pointer\012\000"
	.space	1
.LC404:
	.ascii	"<3>%s: given pkt size too big:%d > max_pkt_size:%d\012"
	.ascii	"\000"
.LC405:
	.ascii	"<3>%s: Previous writing not finished yet\012\000"
	.space	2
.LC406:
	.ascii	"<3>%s: failed to allocate ctrl pkt\012\000"
.LC407:
	.ascii	"<3>%s: dev:%pK is not connected\012\000"
	.space	3
.LC408:
	.ascii	"<3>%s: dev:%pK state=%d, recover!!\012\000"
.LC409:
	.ascii	"<3>%s: dev:%pK is not online\012\000"
	.space	2
.LC410:
	.ascii	"<3>%s: dev:%pK req is NULL\012\000"
.LC411:
	.ascii	"<3>%s: dev:%pK req->buf is NULL\012\000"
	.space	3
.LC412:
	.ascii	"<3>%s: ep enqueue error %d\012\000"
.LC413:
	.ascii	"<3>%s: Buffer size is too big %d, should be at most"
	.ascii	" %d\012\000"
.LC414:
	.ascii	"<3>%s: Previous reading is not finished yet\012\000"
	.space	3
.LC415:
	.ascii	"<3>%s: USB cable not connected. Wait.\012\000"
	.space	1
.LC416:
	.ascii	"<3>%s: cpkt size too big:%d > buf size:%d\012\000"
	.space	1
.LC417:
	.ascii	"<3>%s: copy_to_user failed: err %d\012\000"
.LC418:
	.ascii	"<3>%s: Waiting failed\012\000"
	.space	1
.LC419:
	.ascii	"<3>%s: Failed to enable capture ep\000"
	.space	1
.LC420:
	.ascii	"<3>%s: request allocation failed\012\000"
	.space	2
.LC421:
	.ascii	"<3>%s: request buffer allocation failed\012\000"
	.space	3
.LC422:
	.ascii	"<3>%s: Failed to queue %s req: err %d\012\000"
	.space	1
.LC423:
	.ascii	"<3>%s: Failed to enable playback ep\000"
.LC424:
	.ascii	"<3>%s: Failed to queue %s queue req: err %d\012\000"
	.space	3
.LC425:
	.ascii	"<3>%s: Schedule playback_work\000"
	.space	2
.LC426:
	.ascii	"<3>%s: playback_buf is empty. Stop.\000"
.LC427:
	.ascii	"<3>%s: Interface %d. Do nothing. Return %d\012\000"
.LC428:
	.ascii	"<3>%s: max_buffer_size:%d given_pkt_size:%d\012\000"
	.space	3
.LC429:
	.ascii	"<3> %s dev->error\012\000"
	.space	1
.LC430:
	.ascii	"<3>%s bulk_dev_error\012\000"
	.space	2
.LC431:
	.ascii	"<3>%s usb ep queue failed\012\000"
	.space	1
.LC432:
	.ascii	"<3>Physical address or size of buf is NULL\000"
	.space	1
.LC433:
	.ascii	"<3>%s on a NULL device\012\000"
.LC434:
	.ascii	"<3>%s: FAILED: d_port == NULL\000"
	.space	2
.LC435:
	.ascii	"<3>%s: FAILED: d_port->cdev == NULL\000"
.LC436:
	.ascii	"<3>%s: FAILED: d_port->cdev->gadget == NULL\000"
.LC437:
	.ascii	"<3>%s: Invalid grmnet:%pK\012\000"
	.space	1
.LC438:
	.ascii	"<3>%s: rmnet notify ep enqueue error %d\012\000"
	.space	3
.LC439:
	.ascii	"<3>%s: rmnet dev is null\012\000"
	.space	2
.LC440:
	.ascii	"major %x minor %x vendor %x\012\000"
	.space	3
.LC441:
	.ascii	"<7>usb: %s terminal_mode %s\012\000"
	.space	3
.LC442:
	.ascii	"<3>%s: ctrl bridge open failed :%d\012\000"
.LC443:
	.ascii	"uether\000"
	.space	1
.LC444:
	.ascii	"<3>%s: %s: Unable to create workqueue: uether\012\000"
	.space	1
.LC445:
	.ascii	"<3>%s: grmnet is null\012\000"
	.space	1
.LC446:
	.ascii	"<3>%s: %s(): Failed to register androidplatform dri"
	.ascii	"ver\012\000"
.LC447:
	.ascii	"<6>conn_gadget_flush\012\000"
	.space	2
.LC448:
	.ascii	"<3>%s() _conn_gadget_dev is invalid\012\000"
	.space	3
.LC449:
	.ascii	"<3>%s:Unable to close smux channel: %d\012\000"
.LC450:
	.ascii	"<3>%s: rx queue failed\012\000"
.LC451:
	.ascii	"<3>%s: usb epIn failed\012\000"
.LC452:
	.ascii	"<6>%s: setting notify count to zero\012\000"
	.space	3
.LC453:
	.ascii	"<6>%s: %s: speaker_status: %d, speaker_check_count "
	.ascii	"%d\012\000"
	.space	1
.LC454:
	.ascii	"<3>%s: usb_bam_disconnect_ipa failed: err:%d\012\000"
	.space	2
.LC455:
	.ascii	"usb: %s - usb_ncm misc driver fail \012\000"
	.space	3
.LC456:
	.ascii	"<3>%s: unable open bridge ch:%d err:%d\012\000"
.LC457:
	.ascii	"<3>%s: smux close timedout\012\000"
.LC458:
	.ascii	"<3> %s smux_open failed\012\000"
	.space	3
.LC459:
	.ascii	"<3>%s: unable to open smux ch:%d err:%d\012\000"
	.space	3
.LC460:
	.ascii	"TTY\000"
.LC461:
	.ascii	"SDIO\000"
	.space	3
.LC462:
	.ascii	"SMD\000"
.LC463:
	.ascii	"QTI\000"
.LC464:
	.ascii	"BAM\000"
.LC465:
	.ascii	"BAM2BAM\000"
.LC466:
	.ascii	"BAM2BAM_IPA\000"
.LC467:
	.ascii	"HSIC\000"
	.space	3
.LC468:
	.ascii	"HSUART\000"
	.space	1
.LC469:
	.ascii	"<3>%s: tx pkt dropped: tx_drop_cnt:%u\012\000"
	.space	1
.LC470:
	.ascii	"<3>%s: Un-supported transport: %s\012\000"
	.space	1
.LC471:
	.ascii	"<3>RNDIS header is NULL.\012\000"
	.space	2
.LC472:
	.ascii	"driver/rndis-%03d\000"
	.space	2
.LC473:
	.ascii	"<3>%s: %s: %s failed\012\000"
	.space	2
.LC474:
	.ascii	"<3>%s: %s: Card is NULL\000"
.LC475:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_DROP failed: %d\012\000"
.LC476:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_HW_PARAMS failed: %d\012\000"
	.space	3
.LC477:
	.ascii	"<3>%s: Preparing playback failed: %d\012\000"
	.space	2
.LC478:
	.ascii	"<3>%s: Setting playback params failed: err %d\000"
	.space	2
.LC479:
	.ascii	"<3>%s: Failed to allocate hw params\000"
.LC480:
	.ascii	"<3>%s: Preparing capture failed: %d\012\000"
	.space	3
.LC481:
	.ascii	"<3>%s: Failed to allocate sw params\000"
.LC482:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_SW_PARAMS failed: %d\012\000"
	.space	3
.LC483:
	.ascii	"<3>%s: Setting capture params failed: err %d\000"
	.space	3
.LC484:
	.ascii	"<6>%s: Initialized capture params\000"
	.space	2
.LC485:
	.ascii	"<3>%s: %s: buffer alloc failed\012\000"
.LC486:
	.ascii	"<3>%s: Failed to init audio streams: err %d\000"
.LC487:
	.ascii	"<3>%s: copying failed\000"
	.space	2
.LC488:
	.ascii	"<3>%s: Capture error: %d\012\000"
	.space	2
.LC489:
	.ascii	"<6>%s: initialize %d instances\012\000"
.LC490:
	.ascii	"<3>%s: Failed to allocate mbim dev\012\000"
.LC491:
	.ascii	"<3>%s: mbim driver failed to register\000"
	.space	2
.LC492:
	.ascii	"<6>%s: Initialized %d ports\012\000"
	.space	3
.LC493:
	.ascii	"<3>%s: Failed\000"
	.space	2
.LC494:
	.ascii	"<3>%s: kevent %d may have been dropped\012\000"
.LC495:
	.ascii	"ncm\000"
.LC496:
	.ascii	"<3>usb: %s  drop incase of NCM rx length %d\012\000"
	.space	3
.LC497:
	.ascii	"<3>usb: %s  Dont drop incase of NCM rx length %d\012"
	.ascii	"\000"
	.space	2
.LC498:
	.ascii	"<3>usb: %s Drop rx length %d\012\000"
	.space	2
.LC499:
	.ascii	"<4>%s: query unknown OID 0x%08X\012\000"
	.space	3
.LC500:
	.ascii	"&bulk_dev->read_wq\000"
	.space	1
.LC501:
	.ascii	"&bulk_dev->write_wq\000"
.LC502:
	.ascii	"<3>%s: ccid_ctrl_device_init failed, err:%d\012\000"
	.space	3
.LC503:
	.ascii	"<3>%s: ccid_bulk_device_init failed, err:%d\012\000"
	.space	3
.LC504:
	.ascii	"<3>ccid gadget driver failed to initialize\012\000"
.LC505:
	.ascii	"<7>acm ttyGS%d serial state %04x\012\000"
	.space	2
.LC506:
	.ascii	"acm ttyGS%d can't notify serial state, %d\012\000"
	.space	1
.LC507:
	.ascii	"<1>DUN : DTR %d\012\000"
	.space	3
.LC508:
	.ascii	"<6>modem_ioctl: Unknown ioctl cmd(0x%x).\012\000"
	.space	2
.LC509:
	.ascii	"<3>%s: unable open bam ch:%d err:%d\012\000"
	.space	3
.LC510:
	.ascii	"<3>%s: rx req allocation failed\012\000"
	.space	3
.LC511:
	.ascii	"<3>%s: tx req allocation failed\012\000"
	.space	3
.LC512:
	.ascii	"<3>%s: usb alloc request failed\012\000"
	.space	3
.LC513:
	.ascii	"<3>%s: request buf allocation failed\012\000"
	.space	2
.LC514:
	.ascii	"queue\000"
	.space	2
.LC515:
	.ascii	"<3>%s: %s err %d\012\000"
	.space	2
.LC516:
	.ascii	"<4>%s: unexpected %s status %d\012\000"
.LC517:
	.ascii	"lun%d\000"
	.space	2
.LC518:
	.ascii	"Linux\000"
	.space	2
.LC519:
	.ascii	"File-Stor Gadget\000"
	.space	3
.LC520:
	.ascii	"File-CD Gadget\000"
	.space	1
.LC521:
	.ascii	"file-storage\000"
	.space	3
.LC522:
	.ascii	"(no medium)\000"
.LC523:
	.ascii	"(error)\000"
.LC524:
	.ascii	"removable \000"
	.space	1
.LC525:
	.ascii	"\000"
	.space	3
.LC526:
	.ascii	"read only \000"
	.space	1
.LC527:
	.ascii	"CD-ROM \000"
.LC528:
	.ascii	"lun\000"
.LC529:
	.ascii	"&common->filesem\000"
	.space	3
.LC530:
	.ascii	"failed to register LUN%d: %d\012\000"
	.space	2
.LC531:
	.ascii	"no file given for LUN%d\012\000"
	.space	3
.LC532:
	.ascii	"controller '%s' not recognized\012\000"
.LC533:
	.ascii	"%-8s%-16s%04x\000"
	.space	2
.LC534:
	.ascii	"SAMSUNG\000"
.LC535:
	.ascii	"&common->fsg_wait\000"
	.space	2
.LC536:
	.ascii	"Mass Storage Function, version: 2009/09/11\012\000"
.LC537:
	.ascii	"Number of LUNs=%d\012\000"
	.space	1
.LC538:
	.ascii	"LUN: %s%s%sfile: %s\012\000"
	.space	3
.LC539:
	.ascii	", H%c=%u\000"
	.space	3
.LC540:
	.ascii	"<3>'=' missing in %s\012\000"
	.space	2
.LC541:
	.ascii	"<3>%s: invalid value: %s\012\000"
	.space	2
.LC542:
	.ascii	"rmode\000"
	.space	2
.LC543:
	.ascii	"fmode\000"
	.space	2
.LC544:
	.ascii	"mode\000"
	.space	3
.LC545:
	.ascii	"uid\000"
.LC546:
	.ascii	"gid\000"
.LC547:
	.ascii	"<3>%s: invalid option\012\000"
	.space	1
.LC548:
	.ascii	"<3>%s: Invalid grmnet/buf, grmnet:%pK buf:%pK\012\000"
	.space	1
.LC549:
	.ascii	"<3>given pkt size too big:%d > max_pkt_size:%d\012\000"
.LC550:
	.ascii	"<3>rmnet file handler %pK is not open\000"
	.space	2
.LC551:
	.ascii	"<3>%s: rmnet ctrl file handler %pK is not open\000"
	.space	1
.LC552:
	.ascii	"<3>%s: Unable to allocate reset function pkt\012\000"
	.space	2
.LC553:
	.ascii	"unable to allocate memory for QMI req\012\000"
	.space	1
.LC554:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/compo"
	.ascii	"site.c\000"
	.space	2
.LC555:
	.ascii	"<7>usb: %s idVendor=0x%x, idProduct=0x%x\012\000"
	.space	2
.LC556:
	.ascii	"<7>usb: %s bcdDevice=0x%x\012\000"
	.space	1
.LC557:
	.ascii	"%s %s with %s\000"
	.space	2
.LC558:
	.ascii	"<7>usb: %s composite_manufacturer=%s\012\000"
	.space	2
.LC559:
	.ascii	"userspace failed to provide iSerialNumber\012\000"
	.space	1
.LC560:
	.ascii	"%s ready\012\000"
	.space	2
.LC561:
	.ascii	"<7>usb: GET_DES\012\000"
	.space	3
.LC562:
	.ascii	"<7>usb: %s failed to change configuration\012\000"
	.space	1
.LC563:
	.ascii	"%s config #%d: %s\012\000"
	.space	1
.LC564:
	.ascii	"battery\000"
.LC565:
	.ascii	"<3>%s(): No SS desc for function:%s\012\000"
	.space	3
.LC566:
	.ascii	"<3>%s: fail to get %s psy\012\000"
	.space	1
.LC567:
	.ascii	"<7>usb: SET_CON\012\000"
	.space	3
.LC568:
	.ascii	"<6>%s sec_qcom_usb_rdrv = %d, disable\012\000"
	.space	1
.LC569:
	.ascii	"<6>Redriver OFF in Mac OS\012\000"
	.space	1
.LC570:
	.ascii	"func_suspend() returned error %d\012\000"
	.space	2
.LC571:
	.ascii	"%s: Delayed status not supported for w_length != 0\000"
	.space	1
.LC572:
	.ascii	"unconfigured\000"
	.space	3
.LC573:
	.ascii	"<3>%s: playback_buf is empty\000"
	.space	3
.LC574:
	.ascii	"<3>%s: Buffer is empty, no data to play\000"
.LC575:
	.ascii	"<3>%s: Failed to init audio streams\000"
.LC576:
	.ascii	"<3>%s: SND failure - runtime->frame_bits == 0\000"
	.space	2
.LC577:
	.ascii	"<3>%s: snd_pcm_lib_write failed with err %d\012\000"
	.space	3
.LC578:
	.ascii	"<3>%s: usb cable is not connected\012\000"
	.space	1
.LC579:
	.ascii	"<3>%s: given_xport:%s cur_xport:%s doing nothing\012"
	.ascii	"\000"
	.space	2
.LC580:
	.ascii	"<3>%s: undefined transport\012\000"
.LC581:
	.ascii	"<3>%s: Failed to queue %s req: err - %d\012\000"
	.space	3
.LC582:
	.ascii	"<3>%s: Failed completion: status %d\000"
.LC583:
	.ascii	"<3>%s: USB not connected\012\000"
	.space	2
.LC584:
	.ascii	"<6>%s: usb rmnet sdio channels are open retry_cnt:%"
	.ascii	"d\012\000"
	.space	2
.LC585:
	.ascii	"Unable to open control SDIO channel\012\000"
	.space	3
.LC586:
	.ascii	"Unable to open DATA SDIO channel\012\000"
	.space	2
.LC587:
	.ascii	"can't allocate request for %s\012\000"
	.space	1
.LC588:
	.ascii	"ep-e\000"
	.space	3
.LC589:
	.ascii	"ep-f\000"
	.space	3
.LC590:
	.ascii	"ep3-bulk\000"
	.space	3
.LC591:
	.ascii	"ep2-bulk\000"
	.space	3
.LC592:
	.ascii	"<3>%s: %s: can't bind, err %d\012\000"
	.space	1
.LC593:
	.ascii	"dual\000"
	.space	3
.LC594:
	.ascii	"full\000"
	.space	3
.LC595:
	.ascii	"<3>%s: usb epin autoconfig failed\012\000"
	.space	1
.LC596:
	.ascii	"<6>%s: usb epin autoconfig succeeded\012\000"
	.space	2
.LC597:
	.ascii	"<3>%s: usb epout autoconfig failed\012\000"
.LC598:
	.ascii	"<6>%s: usb epout autoconfig succeeded\012\000"
	.space	1
.LC599:
	.ascii	"<3>%s: usb notify ep autoconfig failed\012\000"
.LC600:
	.ascii	"<6>%s: usb notify ep autoconfig succeeded\012\000"
	.space	1
.LC601:
	.ascii	"<6>%s: allocated notify ep request & request buffer"
	.ascii	"\012\000"
	.space	3
.LC602:
	.ascii	"<6>%s: failed to allocate notify request\012\000"
	.space	2
.LC603:
	.ascii	"<6>%s: mbim(%d): %s speed IN/%s OUT/%s NOTIFY/%s\012"
	.ascii	"\000"
	.space	2
.LC604:
	.ascii	"<3>%s: %s failed to bind, err %d\012\000"
	.space	2
.LC605:
	.ascii	"%s: can't bind, err %d\012\000"
.LC606:
	.ascii	"<3>%s: %s: failed to allocate desc interface\000"
	.space	3
.LC607:
	.ascii	"<3>%s: %s: failed to allocate alt interface\000"
.LC608:
	.ascii	"<3>%s: %s: failed to autoconfig in endpoint\000"
.LC609:
	.ascii	"<3>%s: %s: failed to autoconfig out endpoint\000"
	.space	3
.LC610:
	.ascii	"unable to autoconfigure all endpoints\012\000"
	.space	1
.LC611:
	.ascii	"<3>%s: unable to allocate ifc id, err:%d\000"
	.space	3
.LC612:
	.ascii	"<3>%s: usb epnotify autoconfig failed\012\000"
	.space	1
.LC613:
	.ascii	"<3>qdss_bind: full-speed is not supported\012\000"
	.space	1
.LC614:
	.ascii	"<3>interface allocation error\012\000"
	.space	1
.LC615:
	.ascii	"<3>ep_autoconfig error\012\000"
.LC616:
	.ascii	"<3>usb_copy_descriptors error\012\000"
	.space	1
.LC617:
	.ascii	"<3>%s: unable to allocate memory for notify req\012"
	.ascii	"\000"
	.space	3
.LC618:
	.ascii	"<6>%s: RmNet(%d) %s Speed, IN:%s OUT:%s\012\000"
	.space	3
.LC619:
	.ascii	"android\000"
.LC620:
	.ascii	"<3>acc_bind() could not allocate requests\012\000"
	.space	1
.LC621:
	.ascii	"<3>mtp_bind() could not allocate requests\012\000"
	.space	1
.LC622:
	.ascii	"ep0 bMaxBurst must be 0\012\000"
	.space	3
.LC623:
	.ascii	"can't enable %s, result %d\012\000"
.LC624:
	.ascii	"config_ep_by_speed failed for ep %s, result %d\012\000"
.LC625:
	.ascii	"config_ep_by_speed failes for ep %s, result %d\012\000"
.LC626:
	.ascii	"<3>%s: unable to allocate memory for notify ep\012\000"
.LC627:
	.ascii	"config_ep fail ep %s, result %d\012\000"
	.space	3
.LC628:
	.ascii	"failedto enable ep%s, result %d\012\000"
	.space	3
.LC629:
	.ascii	"can't configure %s: %d\012\000"
.LC630:
	.ascii	"can't start %s: %d\012\000"
.LC631:
	.ascii	"%s queue req: %d\012\000"
	.space	2
.LC632:
	.ascii	"failed to enable ep %s, result %d\012\000"
	.space	1
.LC633:
	.ascii	"<3>%s: unable to allocate memory for out req\012\000"
	.space	2
.LC634:
	.ascii	"<3>%s: unable to allocate memory for in req\012\000"
	.space	3
.LC635:
	.ascii	"<3>%s: config_ep_by_speed failed for ep#%s, err#%d\012"
	.ascii	"\000"
.LC636:
	.ascii	"<3>%s: usb ep#%s enable failed, err#%d\012\000"
.LC637:
	.ascii	"<3>qdss_st_alt: qdss supportes HS or SS only\012\000"
	.space	2
.LC638:
	.ascii	"<3>qdss_set_alt failed\012\000"
.LC639:
	.ascii	"<3>%s(#) call conn_gadget_bind_config\012\000"
	.space	1
.LC640:
	.ascii	"<6>conn_gadget_bind_config\012\000"
.LC641:
	.ascii	"conn_gadget\000"
.LC642:
	.ascii	"ccid\000"
	.space	3
.LC643:
	.ascii	"<6>adb_bind_config\012\000"
.LC644:
	.ascii	"adb\000"
.LC645:
	.ascii	"rmnet_smd_sdio\000"
	.space	1
.LC646:
	.ascii	"<6>acc_bind_config\012\000"
.LC647:
	.ascii	"accessory\000"
	.space	2
.LC648:
	.ascii	"Mass Storage Function\000"
	.space	2
.LC649:
	.ascii	"/home/Jprimero15/hlte/lolz/include/linux/kref.h\000"
.LC650:
	.ascii	"<6>mtp_bind_config\012\000"
.LC651:
	.ascii	"mtp\000"
.LC652:
	.ascii	"qdss\000"
	.space	3
.LC653:
	.ascii	"<3>qdss_bind_config: allocating channel failed\012\000"
.LC654:
	.ascii	"<3>qdss usb_add_function failed\012\000"
	.space	3
.LC655:
	.ascii	"<3>%s: qdss: Cannot open channel qdss\000"
	.space	2
.LC656:
	.ascii	"<7>usb: %s cdev->config=%pK, config=%pK\012\000"
	.space	3
.LC657:
	.ascii	"<6>adb_release\012\000"
.LC658:
	.ascii	"<3>%s: adb_closed_callback: data->dev is NULL\000"
	.space	2
.LC659:
	.ascii	"<3>%s: adb_closed_callback: config->dev is NULL\000"
.LC660:
	.ascii	"<6>%s(): freeing\012\000"
	.space	2
.LC661:
	.ascii	"Function FS Gadget\000"
	.space	1
.LC662:
	.ascii	"composite\000"
	.space	2
.LC663:
	.ascii	"<3>%s: unable to allocate platform data\012\000"
	.space	3
.LC664:
	.ascii	"qcom,android-usb-swfi-latency\000"
	.space	2
.LC665:
	.ascii	"qcom,android-usb-cdrom\000"
	.space	1
.LC666:
	.ascii	"qcom,android-usb-internal-ums\000"
	.space	2
.LC667:
	.ascii	"qcom,streaming-func\000"
.LC668:
	.ascii	"<3>%s: Invalid number of functions used.\012\000"
	.space	2
.LC669:
	.ascii	"android_usb\000"
.LC670:
	.ascii	"<3>%s: %s(): Failed to alloc memory for android_dev"
	.ascii	"\012\000"
	.space	3
.LC671:
	.ascii	"&android_dev->mutex\000"
.LC672:
	.ascii	"ioremap failed\012\000"
.LC673:
	.ascii	"android%d\000"
	.space	2
.LC674:
	.ascii	"<3>%s: %s(): android_create_device failed\012\000"
	.space	1
.LC675:
	.ascii	"<7>usb: %s error pdev(%pK)\012\000"
.LC676:
	.ascii	"<7>usb: %s failed to create attr\012\000"
	.space	2
.LC677:
	.ascii	"<3>usb: %s To create terminal_atttrr is failed\012\000"
.LC678:
	.ascii	"<3>%s: %s(): Failed to register android composite d"
	.ascii	"river\012\000"
	.space	2
.LC679:
	.ascii	"high\000"
	.space	3
.LC680:
	.ascii	"<3>DUN register is failed, ret = %d\012\000"
	.space	3
.LC681:
	.ascii	"<3>usb: %s modem misc register is failed\012\000"
	.space	2
.LC682:
	.ascii	"&modem_wait_q\000"
	.space	2
.LC683:
	.ascii	"%s: Unexpected call\012\000"
	.space	3
.LC684:
	.ascii	"usb_ep_set_wedge -> %d\012\000"
.LC685:
	.ascii	" Card\000"
	.space	2
.LC686:
	.ascii	"Load AT\000"
.LC687:
	.ascii	"Load User\000"
	.space	2
.LC688:
	.ascii	"<6>%s called\012\000"
	.space	2
.LC689:
	.ascii	"time stop\000"
	.space	2
.LC690:
	.ascii	"time reset\000"
	.space	1
.LC691:
	.ascii	"usb: %s : common->version_string[%d]=%s\015\012\000"
	.space	2
.LC692:
	.ascii	"Unknown x%02x\000"
	.space	2
.LC693:
	.ascii	"%s: no requests available\012\000"
	.space	1
.LC694:
	.ascii	"%s: cannot queue read request\012\000"
	.space	1
.LC695:
	.ascii	"usb_add_function failed\012\000"
	.space	3
.LC696:
	.ascii	"unable to get diag usb channel\012\000"
.LC697:
	.ascii	"<3>%s: diag: Cannot open channel '%s'\000"
	.space	2
.LC698:
	.ascii	"<3>usb_ep_alloc_request failed\012\000"
.LC699:
	.ascii	"<3>send_sps_req: usb_ep_queue error\012\000"
	.space	3
.LC700:
	.ascii	"<3>msm_ep_config failed\012\000"
	.space	3
.LC701:
	.ascii	"<3>init_data error\000"
	.space	1
.LC702:
	.ascii	"<3>qdss_data_connection: memory alloc failed\012\000"
	.space	2
.LC703:
	.ascii	"<3>set_qdss_data_connection error\000"
	.space	2
.LC704:
	.ascii	"<3>send_sps_req error\012\000"
	.space	1
.LC705:
	.ascii	"<3>uninit_data\012\000"
.LC706:
	.ascii	"<3>msm_ep_unconfig failed\012\000"
	.space	1
.LC707:
	.ascii	"<3>%s: uninit_data error\012\000"
	.space	2
.LC708:
	.ascii	"<3>usb_bam_disconnection error\012\000"
.LC709:
	.ascii	"<3>qdss_disconnect error\000"
	.space	3
.LC710:
	.ascii	"<3>usb_qdss_free_req: qdss ctx is NULL\012\000"
.LC711:
	.ascii	"<3>usb_qdss_alloc_req: missing params\012\000"
	.space	1
.LC712:
	.ascii	"<3>usb_qdss_alloc_req: ctrl_in allocation err\012\000"
	.space	1
.LC713:
	.ascii	"<3>usb_qdss_alloc_req:ctrl_out allocation err\012\000"
	.space	1
.LC714:
	.ascii	"<3>error: usb_qdss_ctrl_read list is empty\012\000"
.LC715:
	.ascii	"<3>qdss usb_ep_queue failed\012\000"
	.space	3
.LC716:
	.ascii	"<3>error: usb_qdss_ctrl_write list is empty\012\000"
	.space	3
.LC717:
	.ascii	"<3>usb_qdss_open: notification func is missing\012\000"
.LC718:
	.ascii	"k_rmnet_work\000"
	.space	3
.LC719:
	.ascii	"&dev->smd_ctl.wait\000"
	.space	1
.LC720:
	.ascii	"&dev->smd_data.wait\000"
.LC721:
	.ascii	"rmnet\000"
	.space	2
.LC722:
	.ascii	"usb_rmnet_smd\000"
	.space	2
.LC723:
	.ascii	"rmnet_sdio\000"
	.space	1
.LC724:
	.ascii	"usb_rmnet_sdio\000"
	.space	1
.LC725:
	.ascii	"USB audio source\000"
	.space	3
.LC726:
	.ascii	"USB gadget audio\000"
	.space	3
.LC727:
	.ascii	"audio_source\000"
	.space	3
.LC728:
	.ascii	"USB accessory audio source\000"
	.space	1
.LC729:
	.ascii	"<3>usb:[%s] port_usb or port_tty is NULL!! started("
	.ascii	"%d)\012\000"
.LC730:
	.ascii	"g_serial\000"
	.space	3
.LC731:
	.ascii	"ttyGS\000"
	.space	2
.LC732:
	.ascii	"k_gserial\000"
	.space	2
.LC733:
	.ascii	"&ports[i].lock\000"
	.space	1
.LC734:
	.ascii	"&port->close_wait\000"
	.space	2
.LC735:
	.ascii	"&port->drain_wait\000"
	.space	2
.LC736:
	.ascii	"<3>%s: cannot register, err %d\012\000"
.LC737:
	.ascii	"<4>%s: no classdev for port %d, err %ld\012\000"
	.space	3
.LC738:
	.ascii	"usb_serial%d\000"
	.space	3
.LC739:
	.ascii	"readstatus\000"
	.space	1
.LC740:
	.ascii	"reset\000"
	.space	2
.LC741:
	.ascii	"<3>%s: unable to allocate out requests\012\000"
.LC742:
	.ascii	"<3>%s: unable to allocate IN requests\012\000"
	.space	1
.LC743:
	.ascii	"<3>%s: usb request is null port#%d\012\000"
.LC744:
	.ascii	"<3>%s: port#%d sdio write failed err:%d\000"
.LC745:
	.ascii	"<3>%s: sio channel is not open\012\000"
.LC746:
	.ascii	"<3>%s: unable to allocate out reqs\012\000"
.LC747:
	.ascii	"<3>%s: unable to allocate in reqs\012\000"
	.space	1
.LC748:
	.ascii	"<3>%s: port allocation failed\012\000"
	.space	1
.LC749:
	.ascii	"<3>%s: failed to enable in ep w/ err:%d\012\000"
	.space	3
.LC750:
	.ascii	"<3>%s: invalid number of ports count:%d max_ports:%"
	.ascii	"d\012\000"
	.space	2
.LC751:
	.ascii	"<3>%s: unable to create workqueue gsdio_wq\012\000"
.LC752:
	.ascii	"&sdio_ports[i].lock\000"
.LC753:
	.ascii	"<3>%s: sdio logical port allocation failed\012\000"
.LC754:
	.ascii	"usb_gsdio\000"
	.space	2
.LC755:
	.ascii	"<3>%s: Invalid port no#%d\000"
	.space	2
.LC756:
	.ascii	"<3>%s: Invalid num of ports count:%d gadget:%pK\012"
	.ascii	"\000"
	.space	3
.LC757:
	.ascii	"k_gsmd\000"
	.space	1
.LC758:
	.ascii	"<3>%s: Unable to create workqueue gsmd_wq\012\000"
	.space	1
.LC759:
	.ascii	"&smd_ports[i].lock\000"
	.space	1
.LC760:
	.ascii	"<3>%s: Unable to alloc port:%d\012\000"
.LC761:
	.ascii	"usb_gsmd\000"
	.space	3
.LC762:
	.ascii	"<3>%s: invalid bam portno#%d\012\000"
	.space	2
.LC763:
	.ascii	"<3>%s: invalid bam2bam portno#%d\012\000"
	.space	2
.LC764:
	.ascii	"<3>%s: grmnet port is null\012\000"
.LC765:
	.ascii	"<3>%s: usb_bam_client_ready failed\012\000"
.LC766:
	.ascii	"<3>%s: Invalid num of ports count:%d,%d\012\000"
	.space	3
.LC767:
	.ascii	"k_gbam\000"
	.space	1
.LC768:
	.ascii	"<3>%s: Unable to create workqueue gbam_wq\012\000"
	.space	1
.LC769:
	.ascii	"usb_rmnet\000"
	.space	2
.LC770:
	.ascii	"<3>%s: Invalid port_num#%d\012\000"
.LC771:
	.ascii	"<3>%s: Invalid client:%d\012\000"
	.space	2
.LC772:
	.ascii	"<3>%s: Invalid num of ports count:%d\012\000"
	.space	2
.LC773:
	.ascii	"gsmd_ctrl\000"
	.space	2
.LC774:
	.ascii	"<3>%s: Unable to create workqueue grmnet_ctrl\012\000"
	.space	1
.LC775:
	.ascii	"&c->wait\000"
	.space	3
.LC776:
	.ascii	"&c->smd_wait_q\000"
	.space	1
.LC777:
	.ascii	"<3>%s: setting xport name for invalid port num %d\012"
	.ascii	"\000"
	.space	1
.LC778:
	.ascii	"_ctrl\000"
	.space	2
.LC779:
	.ascii	"<3>%s: Unable to create workqueue:%s\012\000"
	.space	2
.LC780:
	.ascii	"_data\000"
	.space	2
.LC781:
	.ascii	"SMUX_RMNET_CTL_HSUART\000"
	.space	2
.LC782:
	.ascii	"<3>%s: gsmd_ctrl_connect failed: err:%d\012\000"
	.space	3
.LC783:
	.ascii	"<3>%s: gqti_ctrl_connect failed: err:%d\012\000"
	.space	3
.LC784:
	.ascii	"<3>%s: ghsic_ctrl_connect failed: err:%d\012\000"
	.space	2
.LC785:
	.ascii	"<3>%s: ghsuart_ctrl_connect failed: err:%d\012\000"
.LC786:
	.ascii	"<3>%s: usb_bam_get_connection_idx failed\012\000"
	.space	2
.LC787:
	.ascii	"<3>%s: gbam_connect failed: err:%d\012\000"
.LC788:
	.ascii	"<3>%s: ghsic_data_connect failed: err:%d\012\000"
	.space	2
.LC789:
	.ascii	"<3>%s: ghsuart_data_connect failed: err:%d\012\000"
.LC790:
	.ascii	"<3>%s: Max-%d instances supported\012\000"
	.space	1
.LC791:
	.ascii	"<3>%s: Unable to allocate rmnet device\012\000"
.LC792:
	.ascii	"<3>%s: Un-supported transport: %u\012\000"
	.space	1
.LC793:
	.ascii	"<3>%s: rmnet: Cannot open ctrl port:'%s' data port:"
	.ascii	"'%s'\012\000"
	.space	3
.LC794:
	.ascii	"<3>%s: supporting ports#%u port_id:%u\000"
	.space	2
.LC795:
	.ascii	"<3>%s: failed to get string id, err:%d\012\000"
.LC796:
	.ascii	"rmnet%d\000"
.LC797:
	.ascii	"<3>%s: cannot allocate memory for name\012\000"
.LC798:
	.ascii	"<3>%s: usb add function failed: %d\012\000"
.LC799:
	.ascii	"<3>%s: Could not bind rmnet%u config\012\000"
	.space	2
.LC800:
	.ascii	"<3>%s: rmnet: Cannot setup transports\000"
	.space	2
.LC801:
	.ascii	"<6>DUN register failed. data is null.\012\000"
	.space	1
.LC802:
	.ascii	"<6>DUN is registerd\012\000"
	.space	3
.LC803:
	.ascii	"%s/%pK: can't bind, err %d\012\000"
.LC804:
	.ascii	"<6>DUN is unregisterd\012\000"
	.space	1
.LC805:
	.ascii	"acm%u\000"
	.space	2
.LC806:
	.ascii	"<3>%s: Could not bind acm%u config\012\000"
.LC807:
	.ascii	"<3>adb_bind() could not allocate requests\012\000"
	.space	1
.LC808:
	.ascii	"snd_card_create() failed\012\000"
	.space	2
.LC809:
	.ascii	"snd_device_new() failed: error %d\012\000"
	.space	1
.LC812:
	.ascii	"MIDI\000"
	.space	3
.LC813:
	.ascii	"snd_rawmidi_new() failed: error %d\012\000"
.LC814:
	.ascii	"gmidi function\000"
	.space	1
.LC815:
	.ascii	"snd_card_register() failed\012\000"
.LC810:
	.ascii	"MIDI Gadget\000"
.LC811:
	.ascii	"f_midi\000"
	.space	1
.LC816:
	.ascii	"rndis\000"
	.space	2
.LC817:
	.ascii	"rndis response on err %d\012\000"
	.space	2
.LC818:
	.ascii	"<3>%s: rndis response on err %d\012\000"
	.space	3
.LC819:
	.ascii	"<4>%s: set unknown OID 0x%08X, size %d\012\000"
.LC820:
	.ascii	"<4>%s: unknown RNDIS message 0x%08X len %d\012\000"
.LC821:
	.ascii	"RNDIS command error %d, %d/%d\012\000"
	.space	1
.LC822:
	.ascii	"<3>%s: RNDIS command error %d, %d/%d\012\000"
	.space	2
.LC823:
	.ascii	"<3>%s: %s: teth_bridge_set_aggr_params failed\012\000"
	.space	1
.LC824:
	.ascii	"<3>%s: data port is null\012\000"
	.space	2
.LC825:
	.ascii	"<3>%s: %s: usb_bam_client_ready failed\012\000"
.LC826:
	.ascii	"<6>%s: SET DEVICE OFFLINE\000"
	.space	2
.LC827:
	.ascii	"<6>%s: dev:%pK port:%d. Do nothing.\012\000"
	.space	3
.LC828:
	.ascii	"<6>%s: mbim deactivated\012\000"
	.space	3
.LC829:
	.ascii	"<6>%s: CONTROL_INTERFACE\000"
	.space	3
.LC830:
	.ascii	"<6>%s: reset mbim control %d\012\000"
	.space	2
.LC831:
	.ascii	"<3>%s: Failed configuring notify ep %s: err %d\012\000"
.LC832:
	.ascii	"<6>%s: DATA_INTERFACE\000"
	.space	2
.LC833:
	.ascii	"<6>%s: reset mbim\012\000"
	.space	1
.LC834:
	.ascii	"<6>%s: Alt set 1, initialize ports\000"
	.space	1
.LC835:
	.ascii	"<6>%s: Choose endpoints\000"
.LC836:
	.ascii	"<3>%s: IN ep %s failed: %d\012\000"
.LC837:
	.ascii	"<6>%s: Set mbim port in_desc = 0x%pK\012\000"
	.space	2
.LC838:
	.ascii	"<3>%s: OUT ep %s failed: %d\012\000"
	.space	3
.LC839:
	.ascii	"<6>%s: Set mbim port out_desc = 0x%pK\012\000"
	.space	1
.LC840:
	.ascii	"<6>%s: dev:%pK portno:%d\012\000"
	.space	2
.LC841:
	.ascii	"<3>%s: bam_data_setup failed: err:%d\012\000"
	.space	2
.LC842:
	.ascii	"<6>%s: mbim bam connected\012\000"
	.space	1
.LC843:
	.ascii	"<6>%s: PORTS already SET\000"
	.space	3
.LC844:
	.ascii	"<6>%s: SET DEVICE ONLINE\000"
	.space	3
.LC845:
	.ascii	"<3>%s: ERROR: Illegal Interface\000"
.LC846:
	.ascii	"k_bam_data\000"
	.space	1
.LC847:
	.ascii	"<3>%s: Failed to alloc port:%d\012\000"
.LC848:
	.ascii	"<3>%s: Failed to create workqueue\012\000"
	.space	1
.LC849:
	.ascii	"<6>%s: port number %u\000"
	.space	2
.LC850:
	.ascii	"<3>%s: Can not add port %u. Max ports = %d\000"
	.space	1
.LC851:
	.ascii	"<6>%s: no_ports:%d\012\000"
.LC852:
	.ascii	"<3>%s: bam_data_setup failed err: %d\012\000"
	.space	2
.LC853:
	.ascii	"<3>%s: bam setup failed\000"
.LC854:
	.ascii	"<6>%s: mbim struct not allocated\000"
	.space	3
.LC855:
	.ascii	"usb_mbim\000"
	.space	3
.LC856:
	.ascii	"<6>%s: Exit status %d\000"
	.space	2
.LC857:
	.ascii	"%02X%02X%02X%02X%02X%02X\000"
	.space	3
.LC858:
	.ascii	"cdc_ethernet\000"
	.space	3
.LC859:
	.ascii	"%s%%d\000"
	.space	2
.LC860:
	.ascii	"self\000"
	.space	3
.LC861:
	.ascii	"using random %s ethernet address\012\000"
	.space	2
.LC862:
	.ascii	"<7>usb: set unique host mac\012\000"
	.space	3
.LC863:
	.ascii	"<6>%s: MAC %pM\012\000"
.LC864:
	.ascii	"<6>%s: HOST MAC %pM\012\000"
	.space	3
.LC865:
	.ascii	"usb\000"
.LC866:
	.ascii	"<3>%s: %s: rndis_pdata\012\000"
.LC867:
	.ascii	"<6>%s: %s MAC: %02X:%02X:%02X:%02X:%02X:%02X\012\000"
	.space	2
.LC868:
	.ascii	"<3>%s: %s: gether_setup failed\012\000"
.LC869:
	.ascii	"<3>%s: %s: ecm_pdata\012\000"
	.space	2
.LC870:
	.ascii	"ecm\000"
.LC871:
	.ascii	"<3>%s: %s: ecm_bind_config failed\012\000"
	.space	1
.LC872:
	.ascii	"<3>%s: RNDIS header memory allocation failed.\012\000"
	.space	1
.LC873:
	.ascii	"<7>usb: %s gather_disconnect\012\000"
	.space	2
.LC874:
	.ascii	"<3>activate ncm setting MTU size (%d)\012\000"
	.space	1
.LC875:
	.ascii	"<3>%s: failed to add function\000"
	.space	2
.LC876:
	.ascii	"host\000"
	.space	3
.LC877:
	.ascii	"rndis0\000"
	.space	1
.LC878:
	.ascii	"ecm0\000"
	.space	3
.LC879:
	.ascii	"<3>%s: bam_data_connect failed: err:%d\012\000"
.LC880:
	.ascii	"<6>%s: rndis deactivated\012\000"
	.space	2
.LC881:
	.ascii	"<6>%s: rndis bam connected\012\000"
.LC882:
	.ascii	"<3>%s: unable to open sound control device file: %s"
	.ascii	"\012\000"
	.space	3
.LC883:
	.ascii	"<3>%s: No such PCM playback device: %s\012\000"
.LC884:
	.ascii	"<3>%s: Setting playback HW params failed: err %d\000"
	.space	3
.LC885:
	.ascii	"<3>%s: No such PCM capture device: %s\012\000"
	.space	1
.LC886:
	.ascii	"<3>%s: Setting capture HW params failed: err %d\000"
.LC887:
	.ascii	"<3>%s: Failed to open snd devices\012\000"
	.space	1
.LC888:
	.ascii	"audio\000"
	.space	2
.LC889:
	.ascii	"<3>%s: %s: Failed to add usb audio function, err = "
	.ascii	"%d\000"
	.space	2
.LC890:
	.ascii	"<3>%s() req->status f %d\012\000"
	.space	2
.LC891:
	.ascii	"super\000"
	.space	2
.LC892:
	.ascii	"<3>conn_gadget_function_bind dev: %pK\012\000"
	.space	1
.LC893:
	.ascii	"<3>usb_ep_autoconfig for ep_in failed\012\000"
	.space	1
.LC894:
	.ascii	"<3>usb_ep_autoconfig for ep_out failed\012\000"
.LC895:
	.ascii	"<3>%s() conn_gadget_bind() could not allocate reque"
	.ascii	"sts\012\000"
.LC896:
	.ascii	"<3>%s speed %s: IN/%s, OUT/%s\012\000"
	.space	1
.LC897:
	.ascii	"<3>%s() failed to queue req %pK (%d)\012\000"
	.space	2
.LC898:
	.ascii	"<3>%s: intf: %d alt: %d\012\000"
	.space	3
.LC899:
	.ascii	"<3>%s() kfifo_reset\012\000"
	.space	3
.LC900:
	.ascii	"<6>conn_gadget_open\012\000"
	.space	3
.LC901:
	.ascii	"<3>%s() handle closing now. open again\012\000"
.LC902:
	.ascii	"<3>%s() conn_gadget_lock(open_excl) f\012\000"
	.space	1
.LC903:
	.ascii	"<3>%s() count is too large (%d)\012\000"
	.space	3
.LC904:
	.ascii	"<3>%s() conn_gadget_lock(read_excl) f\012\000"
	.space	1
.LC905:
	.ascii	"<3>%s() waiting for online state\012\000"
	.space	2
.LC906:
	.ascii	"<3>%s() dev->error has value\012\000"
	.space	2
.LC907:
	.ascii	"<3>%s() zero queue\012\000"
.LC908:
	.ascii	"<3>%s() kfifo_to_user f %d\012\000"
.LC909:
	.ascii	"<3>%s() wait_event_interruptible f %d\012\000"
	.space	1
.LC910:
	.ascii	"<3>conn_gadget_function_unbind\012\000"
.LC911:
	.ascii	"<3>%s() conn_gadget_lock(write_excl) f\012\000"
.LC912:
	.ascii	"<3>%s() conn_gadget_write dev->error\012\000"
	.space	2
.LC913:
	.ascii	"<3>%s: copy_from_user failed\012\000"
	.space	2
.LC914:
	.ascii	"<3>%s() xfer error %d\012\000"
	.space	1
.LC915:
	.ascii	"<3>%s: wait_event_interruptible(wrwq,reqget) failed"
	.ascii	" %d\012\000"
.LC916:
	.ascii	"<3>%s() _conn_gadget_dev is offlined\012\000"
	.space	2
.LC917:
	.ascii	"<3>%s: %s: ncm_pdata\012\000"
	.space	2
.LC918:
	.ascii	"<7>usb: %s MAC:%02X:%02X:%02X:%02X:%02X:%02X\012\000"
	.space	2
.LC919:
	.ascii	"<7>usb: %s before MAC:%02X:%02X:%02X:%02X:%02X:%02X"
	.ascii	"\012\000"
	.space	3
.LC920:
	.ascii	"<7>usb: %s after MAC:%02X:%02X:%02X:%02X:%02X:%02X\012"
	.ascii	"\000"
.LC921:
	.ascii	"<7>usb: %s ncm ready (%s)\012\000"
	.space	1
.LC922:
	.ascii	"<7>usb: %s idProduct=0x%x, DeviceClass=0x%x\012\000"
	.space	3
.LC923:
	.ascii	"<7>usb: %s old status=%d, new status=%d\012\000"
	.space	3
.LC924:
	.ascii	"%x\000"
	.space	1
.LC925:
	.ascii	"<7>usb: %s ver=0x%x vendor_id=0x%x\012\000"
.LC926:
	.ascii	"<7>usb: %s failed usb_ep_queue\012\000"
.LC927:
	.ascii	"USB_CONNECTION=READY\000"
	.space	3
.LC928:
	.ascii	"<6>%s: %s\012\000"
	.space	1
.LC929:
	.ascii	"<6>%s: %s  canceling the work\012\000"
	.space	1
.LC930:
	.ascii	"<3>usb: %s MAC host is always disabled \012\000"
	.space	3
.LC931:
	.ascii	"<6>usb: %s ignore!! usb30en(%d), value(%d)\012\000"
.LC932:
	.ascii	"<7>usb: %s B4 disconectng gadget\012\000"
	.space	2
.LC933:
	.ascii	"<7>usb: %s after usb_gadget_connect\012\000"
	.space	3
.LC934:
	.ascii	"<3>usb: %s Failed to set the usb30_en value\012\000"
	.space	3
.LC935:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/andro"
	.ascii	"id.c\000"
.LC936:
	.ascii	"<3>%s: %s: usb_add_config failed : err: %d\012\000"
.LC937:
	.ascii	"enabled\000"
.LC938:
	.ascii	"disabled\000"
	.space	3
.LC939:
	.ascii	"<6>usb: enabled: %d, dev->enabled: %d\012\000"
	.space	1
.LC940:
	.ascii	"SAMSUNG_Android\000"
.LC941:
	.ascii	"<7>usb: %s f_holder->f:%s\012\000"
	.space	1
.LC942:
	.ascii	"acm\000"
.LC943:
	.ascii	"<7>usb: acm is enabled. (bcdDevice=0x400)\012\000"
	.space	1
.LC944:
	.ascii	"<7>usb: conn_gadget + kies (bcdDevice=0xC00)\012\000"
	.space	2
.LC945:
	.ascii	"<7>usb: conn_gadget only (bcdDevice=0x800)\012\000"
.LC946:
	.ascii	"<7>usb: %s vendor=%x,product=%x,bcdDevice=%x\000"
	.space	3
.LC947:
	.ascii	"<7>,Class=%x,SubClass=%x,Protocol=%x\012\000"
	.space	2
.LC948:
	.ascii	"<7>usb: %s next cmd : usb_add_config\012\000"
	.space	2
.LC949:
	.ascii	"<3>%s: %s: android_enable failed\012\000"
	.space	2
.LC950:
	.ascii	"<3>%s: android_usb: already %s\012\000"
.LC951:
	.ascii	"<6>adb_open\012\000"
	.space	3
.LC952:
	.ascii	"<6>read descriptors\012\000"
	.space	3
.LC953:
	.ascii	"<6>read strings\012\000"
	.space	3
.LC954:
	.ascii	"&epfile->mutex\000"
	.space	1
.LC955:
	.ascii	"&epfile->wait\000"
	.space	2
.LC956:
	.ascii	"ep%u\000"
	.space	3
.LC957:
	.ascii	"SMUX_CONNECTED\000"
	.space	1
.LC958:
	.ascii	"SMUX_DISCONNECTED\000"
	.space	2
.LC959:
	.ascii	"SMUX_READ_DONE\000"
	.space	1
.LC960:
	.ascii	"SMUX_READ_FAIL\000"
	.space	1
.LC961:
	.ascii	"SMUX_WRITE_DONE\000"
.LC962:
	.ascii	"SMUX_WRITE_FAIL\000"
.LC963:
	.ascii	"SMUX_TIOCM_UPDATE\000"
	.space	2
.LC964:
	.ascii	"SMUX_LOW_WM_HIT\000"
.LC965:
	.ascii	"SMUX_HIGH_WM_HIT\000"
	.space	3
.LC966:
	.ascii	"RNDIS_UNINITIALIZED\000"
.LC967:
	.ascii	"RNDIS_INITIALIZED\000"
	.space	2
.LC968:
	.ascii	"RNDIS_DATA_INITIALIZED\000"
	.space	1
.LC969:
	.ascii	"NONE\000"
	.space	3
.LC970:
	.ascii	"remote_wakeup\000"
	.space	2
.LC971:
	.ascii	"state\000"
	.space	2
.LC972:
	.ascii	"pm_qos\000"
	.space	1
.LC973:
	.ascii	"enable\000"
	.space	1
.LC974:
	.ascii	"functions\000"
	.space	2
.LC975:
	.ascii	"macos\000"
	.space	2
.LC976:
	.ascii	"ss_host_available\000"
	.space	2
.LC977:
	.ascii	"usb30en\000"
.LC978:
	.ascii	"bcdUSB\000"
	.space	1
.LC979:
	.ascii	"iSerial\000"
.LC980:
	.ascii	"iProduct\000"
	.space	3
.LC981:
	.ascii	"iManufacturer\000"
	.space	2
.LC982:
	.ascii	"bDeviceProtocol\000"
.LC983:
	.ascii	"bDeviceSubClass\000"
.LC984:
	.ascii	"bDeviceClass\000"
	.space	3
.LC985:
	.ascii	"bcdDevice\000"
	.space	2
.LC986:
	.ascii	"idProduct\000"
	.space	2
.LC987:
	.ascii	"idVendor\000"
	.space	3
.LC988:
	.ascii	"uasp\000"
	.space	3
.LC989:
	.ascii	"pcm\000"
.LC990:
	.ascii	"mass_storage\000"
	.space	3
.LC991:
	.ascii	"sua_version_info\000"
	.space	3
.LC992:
	.ascii	"product_string\000"
	.space	1
.LC993:
	.ascii	"vendor_string\000"
	.space	2
.LC994:
	.ascii	"inquiry_string\000"
	.space	1
.LC995:
	.ascii	"rndis_qc\000"
	.space	3
.LC996:
	.ascii	"max_pkt_per_xfer\000"
	.space	3
.LC997:
	.ascii	"vendorID\000"
	.space	3
.LC998:
	.ascii	"ethaddr\000"
.LC999:
	.ascii	"wceis\000"
	.space	2
.LC1000:
	.ascii	"manufacturer\000"
	.space	3
.LC1001:
	.ascii	"ptp\000"
.LC1002:
	.ascii	"diag\000"
	.space	3
.LC1003:
	.ascii	"clients\000"
.LC1004:
	.ascii	"mbim_transports\000"
.LC1005:
	.ascii	"ecm_qc\000"
	.space	1
.LC1006:
	.ascii	"ecm_transports\000"
	.space	1
.LC1007:
	.ascii	"ecm_ethaddr\000"
.LC1008:
	.ascii	"transport_names\000"
.LC1009:
	.ascii	"transports\000"
	.space	1
.LC1010:
	.ascii	"rmnet_smd\000"
	.space	2
.LC1011:
	.ascii	"instances\000"
	.space	2
.LC1012:
	.ascii	"midi\000"
	.space	3
.LC1013:
	.ascii	"alsa\000"
	.space	3
.LC1014:
	.ascii	"aliases\000"
.LC1015:
	.ascii	"terminal_version\000"
	.space	3
.LC1016:
	.ascii	"CDC Network Control Model (NCM)\000"
.LC1017:
	.ascii	"CDC Network Data\000"
	.space	3
.LC1018:
	.ascii	"CDC NCM\000"
.LC1019:
	.ascii	"in_max_packet_size\000"
	.space	1
.LC1020:
	.ascii	"out_max_packet_size\000"
.LC1021:
	.ascii	"usb_buffer_size\000"
.LC1022:
	.ascii	"version\000"
.LC1023:
	.ascii	"1.0\000"
.LC1024:
	.ascii	"Microphone Iso-IN Endpoint Control\000"
	.space	1
.LC1025:
	.ascii	"Microphone Sampling Frequency Control\000"
	.space	2
.LC1026:
	.ascii	"Speaker Iso-out Endpoint Control\000"
	.space	3
.LC1027:
	.ascii	"Speaker Sampling Frequency Control\000"
	.space	1
.LC1028:
	.ascii	"Microphone Feature Unit Controls\000"
	.space	3
.LC1029:
	.ascii	"Microphone Volume Control\000"
	.space	2
.LC1030:
	.ascii	"Microphone Mute Control\000"
.LC1031:
	.ascii	"Speaker Function Unit Controls\000"
	.space	1
.LC1032:
	.ascii	"Speaker Volume Control\000"
	.space	1
.LC1033:
	.ascii	"Speaker Mute Control\000"
	.space	3
.LC1034:
	.ascii	"/dev/snd/controlC0\000"
	.space	1
.LC1035:
	.ascii	"/dev/snd/pcmC0D6c\000"
	.space	2
.LC1036:
	.ascii	"/dev/snd/pcmC0D5p\000"
	.space	2
.LC1037:
	.ascii	"gadget\000"
	.space	1
.LC1038:
	.ascii	"android_rndis_qc\000"
	.space	3
.LC1039:
	.ascii	"RNDIS Communications Control\000"
	.space	3
.LC1040:
	.ascii	"RNDIS Ethernet Data\000"
.LC1041:
	.ascii	"RNDIS\000"
	.space	2
.LC1042:
	.ascii	"CDC Ethernet Control Model (ECM)\000"
	.space	3
.LC1043:
	.ascii	"CDC Ethernet Data\000"
	.space	2
.LC1044:
	.ascii	"CDC ECM\000"
.LC1045:
	.ascii	"android_mbim\000"
	.space	3
.LC1046:
	.ascii	"MBIM Control\000"
	.space	3
.LC1047:
	.ascii	"MBIM Data\000"
	.space	2
.LC1048:
	.ascii	"USB accessory\000"
	.space	2
.LC1049:
	.ascii	"usb_accessory\000"
	.space	2
.LC1050:
	.ascii	"Android Accessory Interface\000"
.LC1051:
	.ascii	"MTP\000"
.LC1052:
	.ascii	"MIDI function\000"
	.space	2
.LC1053:
	.ascii	"ccid_ctrl\000"
	.space	2
.LC1054:
	.ascii	"ccid_bulk\000"
	.space	2
.LC1055:
	.ascii	"CDC Abstract Control Model (ACM)\000"
	.space	3
.LC1056:
	.ascii	"CDC ACM Data\000"
	.space	3
.LC1057:
	.ascii	"CDC Serial\000"
	.space	1
.LC1058:
	.ascii	"dun\000"
.LC1059:
	.ascii	"SMUX_DUN_DATA_HSUART\000"
	.space	3
.LC1060:
	.ascii	"SMUX_RMNET_DATA_HSUART\000"
	.space	1
.LC1061:
	.ascii	"rmnet_ctrl\000"
	.space	1
.LC1062:
	.ascii	"DATA40_CNTL\000"
.LC1063:
	.ascii	"DATA39_CNTL\000"
.LC1064:
	.ascii	"DATA38_CNTL\000"
.LC1065:
	.ascii	"DS\000"
	.space	1
.LC1066:
	.ascii	"UNUSED\000"
	.space	1
.LC1067:
	.ascii	"SDIO_DUN\000"
	.space	3
.LC1068:
	.ascii	"SDIO_NMEA\000"
	.space	2
.LC1069:
	.ascii	"cdrom\000"
	.space	2
.LC1070:
	.ascii	"file\000"
	.space	3
.LC1071:
	.ascii	"nofua\000"
	.space	2
.LC1072:
	.ascii	"ro\000"
	.space	1
.LC1073:
	.ascii	"functionfs\000"
	.space	1
.LC1074:
	.ascii	"RmNet\000"
	.space	2
.LC1075:
	.ascii	"rmnet_mux_ctrl\000"
	.space	1
.LC1076:
	.ascii	"transport\000"
	.space	2
.LC1077:
	.ascii	"QMI RmNet\000"
	.space	2
.LC1078:
	.ascii	"QDSS DATA\000"
	.space	2
.LC1079:
	.ascii	"QDSS CTRL\000"
	.space	2
.LC1080:
	.ascii	"suspended\000"
	.section	__modver,"a",%progbits
	.align	2
	.type	__modver_attr, %object
	.size	__modver_attr, 4
__modver_attr:
	.word	___modver_attr
	.section	__param,"a",%progbits
	.align	2
	.type	__param_audio_capture_buf_size, %object
	.size	__param_audio_capture_buf_size, 16
__param_audio_capture_buf_size:
	.word	__param_str_audio_capture_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	audio_capture_buf_size
	.type	__param_req_capture_count, %object
	.size	__param_req_capture_count, 16
__param_req_capture_count:
	.word	__param_str_req_capture_count
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_capture_count
	.type	__param_req_capture_buf_size, %object
	.size	__param_req_capture_buf_size, 16
__param_req_capture_buf_size:
	.word	__param_str_req_capture_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_capture_buf_size
	.type	__param_audio_playback_buf_size, %object
	.size	__param_audio_playback_buf_size, 16
__param_audio_playback_buf_size:
	.word	__param_str_audio_playback_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	audio_playback_buf_size
	.type	__param_req_playback_count, %object
	.size	__param_req_playback_count, 16
__param_req_playback_count:
	.word	__param_str_req_playback_count
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_playback_count
	.type	__param_req_playback_buf_size, %object
	.size	__param_req_playback_buf_size, 16
__param_req_playback_buf_size:
	.word	__param_str_req_playback_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_playback_buf_size
	.type	__param_fn_cntl, %object
	.size	__param_fn_cntl, 16
__param_fn_cntl:
	.word	__param_str_fn_cntl
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_cntl
	.type	__param_fn_cap, %object
	.size	__param_fn_cap, 16
__param_fn_cap:
	.word	__param_str_fn_cap
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_cap
	.type	__param_fn_play, %object
	.size	__param_fn_play, 16
__param_fn_play:
	.word	__param_str_fn_play
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_play
	.type	__param_qc_host_addr, %object
	.size	__param_qc_host_addr, 16
__param_qc_host_addr:
	.word	__param_str_qc_host_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	qc_host_addr
	.type	__param_qc_dev_addr, %object
	.size	__param_qc_dev_addr, 16
__param_qc_dev_addr:
	.word	__param_str_qc_dev_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	qc_dev_addr
	.type	__param_host_addr, %object
	.size	__param_host_addr, 16
__param_host_addr:
	.word	__param_str_host_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	host_addr
	.type	__param_dev_addr, %object
	.size	__param_dev_addr, 16
__param_dev_addr:
	.word	__param_str_dev_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	dev_addr
	.type	__param_qmult, %object
	.size	__param_qmult, 16
__param_qmult:
	.word	__param_str_qmult
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	qmult
	.type	__param_rndis_ul_max_xfer_size_rcvd, %object
	.size	__param_rndis_ul_max_xfer_size_rcvd, 16
__param_rndis_ul_max_xfer_size_rcvd:
	.word	__param_str_rndis_ul_max_xfer_size_rcvd
	.word	param_ops_int
	.short	292
	.short	-1
	.word	rndis_ul_max_xfer_size_rcvd
	.type	__param_rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	__param_rndis_ul_max_pkt_per_xfer_rcvd, 16
__param_rndis_ul_max_pkt_per_xfer_rcvd:
	.word	__param_str_rndis_ul_max_pkt_per_xfer_rcvd
	.word	param_ops_int
	.short	292
	.short	-1
	.word	rndis_ul_max_pkt_per_xfer_rcvd
	.type	__param_rndis_ul_max_pkt_per_xfer, %object
	.size	__param_rndis_ul_max_pkt_per_xfer, 16
__param_rndis_ul_max_pkt_per_xfer:
	.word	__param_str_rndis_ul_max_pkt_per_xfer
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	rndis_ul_max_pkt_per_xfer
	.type	__param_rndis_dl_max_pkt_per_xfer, %object
	.size	__param_rndis_dl_max_pkt_per_xfer, 16
__param_rndis_dl_max_pkt_per_xfer:
	.word	__param_str_rndis_dl_max_pkt_per_xfer
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	rndis_dl_max_pkt_per_xfer
	.type	__param_mtp_tx_reqs, %object
	.size	__param_mtp_tx_reqs, 16
__param_mtp_tx_reqs:
	.word	__param_str_mtp_tx_reqs
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_tx_reqs
	.type	__param_mtp_tx_req_len, %object
	.size	__param_mtp_tx_req_len, 16
__param_mtp_tx_req_len:
	.word	__param_str_mtp_tx_req_len
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_tx_req_len
	.type	__param_mtp_rx_req_len, %object
	.size	__param_mtp_rx_req_len, 16
__param_mtp_rx_req_len:
	.word	__param_str_mtp_rx_req_len
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_rx_req_len
	.type	__param_ghsuart_data_tx_intr_thld, %object
	.size	__param_ghsuart_data_tx_intr_thld, 16
__param_ghsuart_data_tx_intr_thld:
	.word	__param_str_ghsuart_data_tx_intr_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_tx_intr_thld
	.type	__param_ghsuart_data_rx_req_size, %object
	.size	__param_ghsuart_data_rx_req_size, 16
__param_ghsuart_data_rx_req_size:
	.word	__param_str_ghsuart_data_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rx_req_size
	.type	__param_ghsuart_data_serial_rx_q_size, %object
	.size	__param_ghsuart_data_serial_rx_q_size, 16
__param_ghsuart_data_serial_rx_q_size:
	.word	__param_str_ghsuart_data_serial_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_serial_rx_q_size
	.type	__param_ghsuart_data_serial_tx_q_size, %object
	.size	__param_ghsuart_data_serial_tx_q_size, 16
__param_ghsuart_data_serial_tx_q_size:
	.word	__param_str_ghsuart_data_serial_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_serial_tx_q_size
	.type	__param_ghsuart_data_rmnet_rx_q_size, %object
	.size	__param_ghsuart_data_rmnet_rx_q_size, 16
__param_ghsuart_data_rmnet_rx_q_size:
	.word	__param_str_ghsuart_data_rmnet_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rmnet_rx_q_size
	.type	__param_ghsuart_data_rmnet_tx_q_size, %object
	.size	__param_ghsuart_data_rmnet_tx_q_size, 16
__param_ghsuart_data_rmnet_tx_q_size:
	.word	__param_str_ghsuart_data_rmnet_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rmnet_tx_q_size
	.type	__param_record_timestamp, %object
	.size	__param_record_timestamp, 16
__param_record_timestamp:
	.word	__param_str_record_timestamp
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	record_timestamp
	.type	__param_ghsic_data_pend_limit_with_bridge, %object
	.size	__param_ghsic_data_pend_limit_with_bridge, 16
__param_ghsic_data_pend_limit_with_bridge:
	.word	__param_str_ghsic_data_pend_limit_with_bridge
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_pend_limit_with_bridge
	.type	__param_ghsic_data_fctrl_dis_thld, %object
	.size	__param_ghsic_data_fctrl_dis_thld, 16
__param_ghsic_data_fctrl_dis_thld:
	.word	__param_str_ghsic_data_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_dis_thld
	.type	__param_ghsic_data_fctrl_en_thld, %object
	.size	__param_ghsic_data_fctrl_en_thld, 16
__param_ghsic_data_fctrl_en_thld:
	.word	__param_str_ghsic_data_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_en_thld
	.type	__param_ghsic_data_fctrl_support, %object
	.size	__param_ghsic_data_fctrl_support, 16
__param_ghsic_data_fctrl_support:
	.word	__param_str_ghsic_data_fctrl_support
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_support
	.type	__param_ghsic_data_tx_intr_thld, %object
	.size	__param_ghsic_data_tx_intr_thld, 16
__param_ghsic_data_tx_intr_thld:
	.word	__param_str_ghsic_data_tx_intr_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_tx_intr_thld
	.type	__param_ghsic_data_rx_req_size, %object
	.size	__param_ghsic_data_rx_req_size, 16
__param_ghsic_data_rx_req_size:
	.word	__param_str_ghsic_data_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rx_req_size
	.type	__param_ghsic_data_serial_rx_q_size, %object
	.size	__param_ghsic_data_serial_rx_q_size, 16
__param_ghsic_data_serial_rx_q_size:
	.word	__param_str_ghsic_data_serial_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_serial_rx_q_size
	.type	__param_ghsic_data_serial_tx_q_size, %object
	.size	__param_ghsic_data_serial_tx_q_size, 16
__param_ghsic_data_serial_tx_q_size:
	.word	__param_str_ghsic_data_serial_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_serial_tx_q_size
	.type	__param_ghsic_data_rmnet_rx_q_size, %object
	.size	__param_ghsic_data_rmnet_rx_q_size, 16
__param_ghsic_data_rmnet_rx_q_size:
	.word	__param_str_ghsic_data_rmnet_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rmnet_rx_q_size
	.type	__param_ghsic_data_rmnet_tx_q_size, %object
	.size	__param_ghsic_data_rmnet_tx_q_size, 16
__param_ghsic_data_rmnet_tx_q_size:
	.word	__param_str_ghsic_data_rmnet_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rmnet_tx_q_size
	.type	__param_dl_intr_threshold, %object
	.size	__param_dl_intr_threshold, 16
__param_dl_intr_threshold:
	.word	__param_str_dl_intr_threshold
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	dl_intr_threshold
	.type	__param_bam_mux_rx_req_size, %object
	.size	__param_bam_mux_rx_req_size, 16
__param_bam_mux_rx_req_size:
	.word	__param_str_bam_mux_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_req_size
	.type	__param_bam_mux_rx_q_size, %object
	.size	__param_bam_mux_rx_q_size, 16
__param_bam_mux_rx_q_size:
	.word	__param_str_bam_mux_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_q_size
	.type	__param_bam_mux_tx_q_size, %object
	.size	__param_bam_mux_tx_q_size, 16
__param_bam_mux_tx_q_size:
	.word	__param_str_bam_mux_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_tx_q_size
	.type	__param_bam_mux_rx_fctrl_dis_thld, %object
	.size	__param_bam_mux_rx_fctrl_dis_thld, 16
__param_bam_mux_rx_fctrl_dis_thld:
	.word	__param_str_bam_mux_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_dis_thld
	.type	__param_bam_mux_rx_fctrl_support, %object
	.size	__param_bam_mux_rx_fctrl_support, 16
__param_bam_mux_rx_fctrl_support:
	.word	__param_str_bam_mux_rx_fctrl_support
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_support
	.type	__param_bam_mux_rx_fctrl_en_thld, %object
	.size	__param_bam_mux_rx_fctrl_en_thld, 16
__param_bam_mux_rx_fctrl_en_thld:
	.word	__param_str_bam_mux_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_en_thld
	.type	__param_bam_mux_tx_pkt_drop_thld, %object
	.size	__param_bam_mux_tx_pkt_drop_thld, 16
__param_bam_mux_tx_pkt_drop_thld:
	.word	__param_str_bam_mux_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_tx_pkt_drop_thld
	.type	__param_bam_pending_limit, %object
	.size	__param_bam_pending_limit, 16
__param_bam_pending_limit:
	.word	__param_str_bam_pending_limit
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_pending_limit
	.type	__param_mux_sdio_rx_fctrl_dis_thld, %object
	.size	__param_mux_sdio_rx_fctrl_dis_thld, 16
__param_mux_sdio_rx_fctrl_dis_thld:
	.word	__param_str_mux_sdio_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_rx_fctrl_dis_thld
	.type	__param_mux_sdio_rx_fctrl_en_thld, %object
	.size	__param_mux_sdio_rx_fctrl_en_thld, 16
__param_mux_sdio_rx_fctrl_en_thld:
	.word	__param_str_mux_sdio_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_rx_fctrl_en_thld
	.type	__param_mux_sdio_tx_pkt_drop_thld, %object
	.size	__param_mux_sdio_tx_pkt_drop_thld, 16
__param_mux_sdio_tx_pkt_drop_thld:
	.word	__param_str_mux_sdio_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_tx_pkt_drop_thld
	.type	__param_rmnet_mux_smd_data_ch, %object
	.size	__param_rmnet_mux_smd_data_ch, 16
__param_rmnet_mux_smd_data_ch:
	.word	__param_str_rmnet_mux_smd_data_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_mux_smd_data_ch
	.type	__param_rmnet_mux_sdio_data_ch, %object
	.size	__param_rmnet_mux_sdio_data_ch, 16
__param_rmnet_mux_sdio_data_ch:
	.word	__param_str_rmnet_mux_sdio_data_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_mux_sdio_data_ch
	.type	__param_rmnet_mux_sdio_ctl_ch, %object
	.size	__param_rmnet_mux_sdio_ctl_ch, 16
__param_rmnet_mux_sdio_ctl_ch:
	.word	__param_str_rmnet_mux_sdio_ctl_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_mux_sdio_ctl_ch
	.type	__param_sdio_rx_fctrl_dis_thld, %object
	.size	__param_sdio_rx_fctrl_dis_thld, 16
__param_sdio_rx_fctrl_dis_thld:
	.word	__param_str_sdio_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_rx_fctrl_dis_thld
	.type	__param_sdio_rx_fctrl_en_thld, %object
	.size	__param_sdio_rx_fctrl_en_thld, 16
__param_sdio_rx_fctrl_en_thld:
	.word	__param_str_sdio_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_rx_fctrl_en_thld
	.type	__param_sdio_tx_pkt_drop_thld, %object
	.size	__param_sdio_tx_pkt_drop_thld, 16
__param_sdio_tx_pkt_drop_thld:
	.word	__param_str_sdio_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_tx_pkt_drop_thld
	.type	__param_rmnet_sdio_data_ch, %object
	.size	__param_rmnet_sdio_data_ch, 16
__param_rmnet_sdio_data_ch:
	.word	__param_str_rmnet_sdio_data_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_sdio_data_ch
	.type	__param_rmnet_sdio_ctl_ch, %object
	.size	__param_rmnet_sdio_ctl_ch, 16
__param_rmnet_sdio_ctl_ch:
	.word	__param_str_rmnet_sdio_ctl_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_sdio_ctl_ch
	.type	__param_rmnet_data_ch, %object
	.size	__param_rmnet_data_ch, 16
__param_rmnet_data_ch:
	.word	__param_str_rmnet_data_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_data_ch
	.type	__param_rmnet_ctl_ch, %object
	.size	__param_rmnet_ctl_ch, 16
__param_rmnet_ctl_ch:
	.word	__param_str_rmnet_ctl_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_ctl_ch
	.type	__param_iSerialNumber, %object
	.size	__param_iSerialNumber, 16
__param_iSerialNumber:
	.word	__param_str_iSerialNumber
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iSerialNumber
	.type	__param_iProduct, %object
	.size	__param_iProduct, 16
__param_iProduct:
	.word	__param_str_iProduct
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iProduct
	.type	__param_iManufacturer, %object
	.size	__param_iManufacturer, 16
__param_iManufacturer:
	.word	__param_str_iManufacturer
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iManufacturer
	.type	__param_bcdDevice, %object
	.size	__param_bcdDevice, 16
__param_bcdDevice:
	.word	__param_str_bcdDevice
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	bcdDevice
	.type	__param_idProduct, %object
	.size	__param_idProduct, 16
__param_idProduct:
	.word	__param_str_idProduct
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	idProduct
	.type	__param_idVendor, %object
	.size	__param_idVendor, 16
__param_idVendor:
	.word	__param_str_idVendor
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	idVendor
	.ident	"GCC: (Linaro GCC 7.5-2019.12) 7.5.0"
	.section	.note.GNU-stack,"",%progbits
// Generated by Lolz Kernel
