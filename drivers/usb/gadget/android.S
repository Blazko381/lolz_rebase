debug_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {lr}
	str	lr, [sp, #-4]!
	movw	lr, #:lower16:.LANCHOR0
	movt	lr, #:upper16:.LANCHOR0
	ldr	r3, [lr]
	cmp	lr, r3
	beq	.L3
	sub	r3, r3, #4
	mov	ip, #0
.L2:
	ldr	r1, [r3, #20]
	cmp	r1, #0
	beq	.L4
	str	ip, [r1, #128]
	str	ip, [r1, #132]
	str	ip, [r1, #136]
	ldr	r3, [r3, #4]
	cmp	lr, r3
	sub	r3, r3, #4
	bne	.L2
.L3:
	mov	r0, r2
	ldr	pc, [sp], #4
.L4:
	ldr	r3, [r3, #4]
	cmp	lr, r3
	sub	r3, r3, #4
	bne	.L2
	mov	r0, r2
	ldr	pc, [sp], #4
	.fnend
	.size	debug_reset_stats, .-debug_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_open, %function
debug_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	debug_open, .-debug_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_txcommand_complete, %function
rmnet_txcommand_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	add	r5, r4, #164
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #440]
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #440]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
	.fnend
	.size	rmnet_txcommand_complete, .-rmnet_txcommand_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_debug_reset_stats, %function
rmnet_smd_debug_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	add	r5, r4, #164
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r3, #0
	mov	r1, r0
	mov	r0, r5
	str	r3, [r4, #424]
	str	r3, [r4, #428]
	str	r3, [r4, #432]
	str	r3, [r4, #436]
	str	r3, [r4, #440]
	str	r3, [r4, #444]
	str	r3, [r4, #448]
	str	r3, [r4, #452]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, r6
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_smd_debug_reset_stats, .-rmnet_smd_debug_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_debug_open, %function
rmnet_smd_debug_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	rmnet_smd_debug_open, .-rmnet_smd_debug_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_disconnect_work, %function
rmnet_sdio_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	rmnet_sdio_disconnect_work, .-rmnet_sdio_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_reset_stats, %function
rmnet_sdio_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #124]
	mov	r1, #0
	mov	r0, r2
	str	r1, [r3, #328]
	str	r1, [r3, #356]
	str	r1, [r3, #360]
	str	r1, [r3, #364]
	str	r1, [r3, #368]
	str	r1, [r3, #372]
	bx	lr
	.fnend
	.size	rmnet_sdio_reset_stats, .-rmnet_sdio_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_suspend, %function
rmnet_mux_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #372]
	cmp	r3, #0
	beq	.L17
	ldr	r3, [r0, #352]
	bic	r3, r3, #2
	str	r3, [r0, #352]
.L17:
	bx	lr
	.fnend
	.size	rmnet_mux_suspend, .-rmnet_mux_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_unbind, %function
rmnet_mux_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #0
	str	r3, [r1, #172]
	bx	lr
	.fnend
	.size	rmnet_mux_unbind, .-rmnet_mux_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_reset_stats, %function
rmnet_mux_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #124]
	mov	r1, #0
	mov	r0, r2
	str	r1, [r3, #312]
	str	r1, [r3, #400]
	str	r1, [r3, #404]
	str	r1, [r3, #408]
	str	r1, [r3, #412]
	str	r1, [r3, #416]
	str	r1, [r3, #420]
	str	r1, [r3, #424]
	bx	lr
	.fnend
	.size	rmnet_mux_reset_stats, .-rmnet_mux_reset_stats
	.align	2
	.global	usb_rmnet_mux_ctrl_release
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_release, %function
usb_rmnet_mux_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	mov	r4, #0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r1, #124]
	add	r6, r7, #368
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r4, [r7, #356]
	mov	r0, r6
	str	r4, [r5, #124]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	usb_rmnet_mux_ctrl_release, .-usb_rmnet_mux_ctrl_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_control_complete, %function
audio_control_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	audio_control_complete, .-audio_control_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_close, %function
audio_pcm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #8]
	add	r5, r6, #108
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r4, [r6, #92]
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	audio_pcm_close, .-audio_pcm_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_prepare, %function
audio_pcm_prepare:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	ip, r0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r1, [ip, #212]
	mov	lr, #0
	mov	r0, lr
	ldr	r4, [r1, #60]
	ldr	r2, [r1, #80]
	ldr	r3, [r1, #200]
	mul	r2, r2, r4
	str	lr, [r3, #128]
	lsr	r2, r2, #3
	str	r2, [r3, #124]
	ldr	r2, [r1, #540]
	str	r2, [r3, #112]
	ldr	ip, [ip, #212]
	ldr	lr, [ip, #68]
	ldr	r1, [ip, #80]
	str	r2, [r3, #120]
	mul	r1, r1, lr
	add	r2, r2, r1, lsr #3
	str	r2, [r3, #116]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	audio_pcm_prepare, .-audio_pcm_prepare
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_pointer, %function
audio_pcm_pointer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #212]
	ldr	r0, [r3, #80]
	ldr	r2, [r3, #200]
	ldr	r1, [r2, #112]
	ldr	r3, [r2, #120]
	sub	r3, r3, r1
	lsl	r3, r3, #3
	udiv	r0, r3, r0
	bx	lr
	.fnend
	.size	audio_pcm_pointer, .-audio_pcm_pointer
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_ioctl, %function
ffs_ep0_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #26496
	ldr	r0, [r0, #124]
	cmp	r1, ip
	beq	.L46
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L40
	ldr	r3, [r0]
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L40
	bx	r3
.L46:
	mov	r3, r2
	ldr	r2, [r0, #132]
	cmp	r2, #0
	beq	.L37
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	r1, [r2, #8]
	ldr	lr, [r2, #32]
	ldrh	r1, [r1, #178]
	cmp	r1, #0
	beq	.L38
	uxtb	r2, r3
	mov	ip, lr
.L36:
	mov	r3, ip
	ldrsh	r0, [r3], #2
	cmp	r0, #0
	blt	.L35
	cmp	r0, r2
	beq	.L47
.L35:
	subs	r1, r1, #1
	mov	ip, r3
	bne	.L36
.L38:
	mvn	r0, #32
	ldr	pc, [sp], #4
.L47:
	sub	r0, ip, lr
	asr	r0, r0, #1
	ldr	pc, [sp], #4
.L40:
	mvn	r0, #24
	bx	lr
.L37:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	ffs_ep0_ioctl, .-ffs_ep0_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_write_room, %function
gs_write_room:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #272]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #4]
	mov	r1, r0
	cmp	r3, #0
	moveq	r5, r3
	beq	.L49
	ldr	r2, [r4, #92]
	ldr	r3, [r4, #100]
	ldr	r0, [r4, #104]
	add	r3, r3, r2
	sub	r3, r3, r0
	sub	r3, r3, #1
	udiv	r5, r3, r2
	mls	r5, r2, r5, r3
.L49:
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_write_room, .-gs_write_room
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_chars_in_buffer, %function
gs_chars_in_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r4, [r0, #272]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #92]
	mov	r1, r0
	mov	r0, r4
	ldr	ip, [r4, #100]
	ldr	r3, [r4, #104]
	add	r3, r3, r2
	sub	r3, r3, ip
	udiv	r4, r3, r2
	mls	r4, r2, r4, r3
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gs_chars_in_buffer, .-gs_chars_in_buffer
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_break_ctl, %function
gs_break_ctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r5, [r0, #272]
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r0, [r5, #4]
	cmp	r0, #0
	moveq	r4, r0
	beq	.L55
	ldr	r4, [r0, #124]
	cmp	r4, #0
	beq	.L55
	mov	r1, r6
	blx	r4
	mov	r4, r0
.L55:
	mov	r0, r5
	bl	_raw_spin_unlock_irq
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_break_ctl, .-gs_break_ctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_tiocmget, %function
gs_tiocmget:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #272]
	mov	r0, r6
	bl	_raw_spin_lock_irq
	ldr	r5, [r6, #4]
	cmp	r5, #0
	mvneq	r4, #18
	beq	.L60
	ldr	r4, [r5, #108]
	cmp	r4, #0
	beq	.L61
	mov	r0, r5
	blx	r4
	cmp	r0, #0
	movne	r4, #2
	moveq	r4, #0
.L61:
	ldr	r3, [r5, #112]
	cmp	r3, #0
	beq	.L63
	mov	r0, r5
	blx	r3
	cmp	r0, #0
	orrne	r4, r4, #4
.L63:
	ldrh	r3, [r5, #104]
	tst	r3, #64
	orrne	r4, r4, #64
	tst	r3, #128
	orrne	r4, r4, #128
.L60:
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_tiocmget, .-gs_tiocmget
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_tiocmset, %function
gs_tiocmset:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r2
	strd	r8, [sp, #16]
	mov	r8, r1
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r7, [r0, #272]
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r4, [r7, #4]
	cmp	r4, #0
	beq	.L86
	ands	r5, r8, #128
	and	r9, r6, #128
	beq	.L83
	ldr	r5, [r4, #132]
	cmp	r5, #0
	beq	.L84
	ldrh	r3, [r4, #104]
	mov	r1, #1
	mov	r0, r4
	orr	r3, r3, #128
	strh	r3, [r4, #104]	@ movhi
	blx	r5
	mov	r5, r0
.L83:
	cmp	r9, #0
	beq	.L84
	ldr	r2, [r4, #132]
	cmp	r2, #0
	beq	.L84
	ldrh	r3, [r4, #104]
	mov	r1, #0
	mov	r0, r4
	bic	r3, r3, #128
	strh	r3, [r4, #104]	@ movhi
	blx	r2
	mov	r5, r0
.L84:
	tst	r8, #64
	and	r6, r6, #64
	bne	.L108
.L85:
	cmp	r6, #0
	beq	.L82
	ldr	r2, [r4, #128]
	cmp	r2, #0
	beq	.L82
	ldrh	r3, [r4, #104]
	mov	r0, r4
	mov	r1, #0
	bic	r3, r3, #64
	strh	r3, [r4, #104]	@ movhi
	blx	r2
	mov	r5, r0
.L82:
	mov	r0, r7
	bl	_raw_spin_unlock_irq
	ldrd	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L108:
	ldr	r2, [r4, #128]
	cmp	r2, #0
	beq	.L82
	ldrh	r3, [r4, #104]
	mov	r1, #1
	mov	r0, r4
	orr	r3, r3, #64
	strh	r3, [r4, #104]	@ movhi
	blx	r2
	mov	r5, r0
	b	.L85
.L86:
	mvn	r5, #18
	b	.L82
	.fnend
	.size	gs_tiocmset, .-gs_tiocmset
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_write_reset, %function
debug_write_reset:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	mov	r3, #0
	mov	r1, r0
	mov	r0, r4
	str	r3, [r4, #128]
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	debug_write_reset, .-debug_write_reset
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_sdio_reset_stats, %function
debug_sdio_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r7]
	str	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #28]
	cmp	r3, #0
	beq	.L112
	mov	r5, #0
	add	r6, r7, #4
	mov	r9, r5
.L113:
	ldr	r4, [r6, #20]
	add	r5, r5, #1
	add	r6, r6, #104
	add	r8, r4, #4
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r9, [r4, #184]
	mov	r0, r8
	str	r9, [r4, #188]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7]
	cmp	r5, r3
	bcc	.L113
.L112:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	debug_sdio_reset_stats, .-debug_sdio_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_smd_reset_stats, %function
debug_smd_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r7, #212]
	str	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #28]
	cmp	r3, #0
	beq	.L120
	mov	r5, #0
	add	r6, r7, #216
	mov	r9, r5
.L121:
	ldr	r4, [r6, #20]
	add	r5, r5, #1
	add	r6, r6, #104
	add	r8, r4, #4
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r9, [r4, #168]
	mov	r0, r8
	str	r9, [r4, #172]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7, #212]
	cmp	r5, r3
	bcc	.L121
.L120:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	debug_smd_reset_stats, .-debug_smd_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_reset_stats, %function
gbam_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r3, #424]
	cmp	r2, #0
	ble	.L128
	ldr	r4, [r3, #428]
	cmp	r4, #0
	beq	.L128
	add	r5, r4, #4
	add	r6, r4, #8
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #240]
	str	r3, [r4, #244]
	str	r3, [r4, #248]
	str	r3, [r4, #260]
	str	r3, [r4, #264]
	str	r3, [r4, #268]
	str	r3, [r4, #272]
	str	r3, [r4, #276]
	str	r3, [r4, #280]
	bl	_raw_spin_unlock
	mov	r1, r8
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L128:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	gbam_reset_stats, .-gbam_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_reset_stats, %function
gsmd_ctrl_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	ldr	r5, .L142
	strd	r6, [sp, #8]
	mov	r7, #0
	strd	r8, [sp, #16]
	mov	r9, r2
	str	r10, [sp, #24]
	add	r8, r5, #504
	str	lr, [sp, #28]
.L136:
	ldr	r4, [r5]
	add	r5, r5, #84
	cmp	r4, #0
	add	r6, r4, #108
	mov	r0, r6
	beq	.L135
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r7, [r4, #92]
	mov	r0, r6
	str	r7, [r4, #96]
	bl	_raw_spin_unlock_irqrestore
.L135:
	cmp	r5, r8
	bne	.L136
	mov	r0, r9
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L143:
	.align	2
.L142:
	.word	.LANCHOR1+512
	.fnend
	.size	gsmd_ctrl_reset_stats, .-gsmd_ctrl_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_receive, %function
ghsic_ctrl_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	subs	r4, r0, #0
	str	lr, [sp, #4]
	moveq	r0, r4
	beq	.L144
	ldr	r3, [r4, #52]
	cmp	r3, #0
	beq	.L147
	ldr	r0, [r4, #8]
	blx	r3
	ldr	r3, [r4, #100]
	add	r3, r3, #1
	str	r3, [r4, #100]
.L144:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L147:
	mov	r0, r3
	b	.L144
	.fnend
	.size	ghsic_ctrl_receive, .-ghsic_ctrl_receive
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_reset_stats, %function
gctrl_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	str	r10, [sp, #24]
	mov	r10, r2
	ldr	r3, [r9, #1016]
	str	lr, [sp, #28]
	cmp	r3, #0
	beq	.L150
	mov	r5, #0
	add	r6, r9, #1020
	mov	r8, r5
.L151:
	ldr	r4, [r6]
	cmp	r4, #0
	add	r7, r4, #4
	mov	r0, r7
	beq	.L152
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r8, [r4, #96]
	mov	r0, r7
	str	r8, [r4, #100]
	add	r5, r5, #1
	add	r6, r6, #104
	str	r8, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r9, #1016]
	cmp	r3, r5
	bhi	.L151
.L150:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L152:
	add	r5, r5, #1
	add	r6, r6, #104
	cmp	r5, r3
	bcc	.L151
	b	.L150
	.fnend
	.size	gctrl_reset_stats, .-gctrl_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_reset_stats, %function
ghsic_data_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	movw	fp, #:lower16:.LANCHOR1
	mov	r10, r2
	strd	r8, [sp, #16]
	movt	fp, #:upper16:.LANCHOR1
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r3, [fp, #1436]
	cmp	r3, #0
	beq	.L159
	mov	r6, #0
	add	r7, fp, #1440
	mov	r5, r6
.L160:
	ldr	r4, [r7]
	cmp	r4, #0
	add	r8, r4, #80
	add	r9, r4, #48
	mov	r0, r8
	beq	.L161
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #188]
	mov	r0, r8
	str	r5, [r4, #204]
	add	r6, r6, #1
	add	r7, r7, #104
	str	r5, [r4, #208]
	str	r5, [r4, #212]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #192]
	mov	r0, r9
	str	r5, [r4, #196]
	str	r5, [r4, #200]
	str	r5, [r4, #216]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [fp, #1436]
	cmp	r3, r6
	bhi	.L160
.L159:
	mov	r0, r10
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L161:
	add	r6, r6, #1
	add	r7, r7, #104
	cmp	r6, r3
	bcc	.L160
	b	.L159
	.fnend
	.size	ghsic_data_reset_stats, .-ghsic_data_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_reset_stats, %function
ghsuart_ctrl_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r7, #1856]
	str	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #28]
	cmp	r3, #0
	beq	.L168
	ldr	r6, .L176
	mov	r5, #0
	mov	r9, r5
.L169:
	ldr	r4, [r6]
	cmp	r4, #0
	add	r8, r4, #8
	mov	r0, r8
	beq	.L170
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r9, [r4, #96]
	mov	r0, r8
	str	r9, [r4, #100]
	add	r5, r5, #1
	add	r6, r6, #84
	str	r9, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7, #1856]
	cmp	r3, r5
	bhi	.L169
.L168:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L170:
	add	r5, r5, #1
	add	r6, r6, #84
	cmp	r5, r3
	bcc	.L169
	b	.L168
.L177:
	.align	2
.L176:
	.word	.LANCHOR1+1860
	.fnend
	.size	ghsuart_ctrl_reset_stats, .-ghsuart_ctrl_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_reset_stats, %function
ghsuart_data_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r7, #2028]
	strd	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	cmp	r3, #0
	beq	.L179
	mov	r5, #0
	add	r6, r7, #2032
	mov	r8, r5
.L180:
	ldr	r4, [r6]
	cmp	r4, #0
	add	fp, r4, #104
	add	r9, r4, #72
	mov	r0, fp
	beq	.L181
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r8, [r4, #204]
	mov	r0, fp
	str	r8, [r4, #212]
	add	r5, r5, #1
	add	r6, r6, #84
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r8, [r4, #208]
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7, #2028]
	cmp	r3, r5
	bhi	.L180
.L179:
	mov	r0, r10
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L181:
	add	r5, r5, #1
	add	r6, r6, #84
	cmp	r5, r3
	bcc	.L180
	b	.L179
	.fnend
	.size	ghsuart_data_reset_stats, .-ghsuart_data_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_open, %function
modem_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, r2
	str	r2, [r3, #2200]
	bx	lr
	.fnend
	.size	modem_open, .-modem_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_poll, %function
modem_poll:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r2, r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	beq	.L189
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L189
	ldr	r1, .L200
	blx	r3
.L189:
	movw	r3, #:lower16:.LANCHOR1
	ldr	r4, [sp]
	add	sp, sp, #4
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #2200]
	cmp	r0, #0
	movne	r0, #65
	ldr	pc, [sp], #4
.L201:
	.align	2
.L200:
	.word	.LANCHOR1+2204
	.fnend
	.size	modem_poll, .-modem_poll
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_ctrl_release, %function
ccid_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #124]
	mov	r3, #0
	mov	r0, r3
	str	r3, [r2, #116]
	bx	lr
	.fnend
	.size	ccid_ctrl_release, .-ccid_ctrl_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_snd_free, %function
f_midi_snd_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_snd_free, .-f_midi_snd_free
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_in_open, %function
f_midi_in_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #12]
	ldr	r2, [r0, #28]
	ldr	r2, [r2, #200]
	add	r3, r2, r3, lsl #2
	ldr	r1, [r3, #232]
	cmp	r1, #0
	beq	.L206
	str	r0, [r3, #104]
	ldr	r3, [r0, #12]
	mov	r1, #0
	mov	r0, r1
	add	r3, r3, #58
	ldr	r3, [r2, r3, lsl #2]
	strb	r1, [r3, #9]
	bx	lr
.L206:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	f_midi_in_open, .-f_midi_in_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_out_open, %function
f_midi_out_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #12]
	mov	r2, r0
	ldr	r1, [r0, #28]
	cmp	r3, #15
	ldr	r1, [r1, #200]
	addle	r3, r3, #42
	movle	r0, #0
	mvngt	r0, #21
	strle	r2, [r1, r3, lsl #2]
	bx	lr
	.fnend
	.size	f_midi_out_open, .-f_midi_out_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_get_alt, %function
ecm_qc_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #120]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L212
	ldr	r3, [r0, #88]
	ldr	r0, [r3]
	adds	r0, r0, #0
	movne	r0, #1
	bx	lr
.L212:
	mov	r0, #0
	bx	lr
	.fnend
	.size	ecm_qc_get_alt, .-ecm_qc_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_get_alt, %function
mbim_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #196]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L215
	ldrb	r3, [r0, #197]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L216
	ldrb	r0, [r0, #198]	@ zero_extendqisi2
	bx	lr
.L215:
	mov	r0, #0
	bx	lr
.L216:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	mbim_get_alt, .-mbim_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_get_alt, %function
ecm_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #148]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L219
	ldr	r3, [r0, #88]
	ldr	r0, [r3]
	adds	r0, r0, #0
	movne	r0, #1
	bx	lr
.L219:
	mov	r0, #0
	bx	lr
	.fnend
	.size	ecm_get_alt, .-ecm_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ueth_change_mtu, %function
ueth_change_mtu:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #1152
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1156]
	mov	r1, r0
	cmp	r3, #0
	bne	.L222
	sub	r0, r6, #15
	movw	r2, #1499
	cmp	r0, r2
	bhi	.L223
	str	r6, [r4, #356]
	mov	r4, r3
.L221:
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L222:
	mvn	r4, #15
	b	.L221
.L223:
	mvn	r4, #33
	b	.L221
	.fnend
	.size	ueth_change_mtu, .-ueth_change_mtu
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ueth_qc_change_mtu, %function
ueth_qc_change_mtu:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #1152
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1156]
	mov	r1, r0
	cmp	r3, #0
	bne	.L227
	sub	r0, r6, #15
	movw	r2, #1499
	cmp	r0, r2
	bhi	.L228
	str	r6, [r4, #356]
	mov	r4, r3
.L226:
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L227:
	mvn	r4, #15
	b	.L226
.L228:
	mvn	r4, #33
	b	.L226
	.fnend
	.size	ueth_qc_change_mtu, .-ueth_qc_change_mtu
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_qc_start_xmit, %function
eth_qc_start_xmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	eth_qc_start_xmit, .-eth_qc_start_xmit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_get_alt, %function
f_audio_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldrb	r2, [r3, #16]	@ zero_extendqisi2
	cmp	r2, r1
	beq	.L235
	ldrb	r3, [r3, #17]	@ zero_extendqisi2
	cmp	r3, r1
	ldrbeq	r0, [r0, #249]	@ zero_extendqisi2
	movne	r0, #0
	bx	lr
.L235:
	ldrb	r0, [r0, #248]	@ zero_extendqisi2
	bx	lr
	.fnend
	.size	f_audio_get_alt, .-f_audio_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_disable, %function
f_audio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	strb	r2, [r3, #2216]
	bx	lr
	.fnend
	.size	f_audio_disable, .-f_audio_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	generic_set_cmd, %function
generic_set_cmd:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	add	r1, r1, #4
	str	r2, [r0, r1, lsl #2]
	mov	r0, #0
	bx	lr
	.fnend
	.size	generic_set_cmd, .-generic_set_cmd
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	generic_get_cmd, %function
generic_get_cmd:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	add	r1, r1, #4
	ldr	r0, [r0, r1, lsl #2]
	bx	lr
	.fnend
	.size	generic_get_cmd, .-generic_get_cmd
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_out_max_packet_size_store, %function
conn_gadget_out_max_packet_size_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r3
	bx	lr
	.fnend
	.size	conn_gadget_out_max_packet_size_store, .-conn_gadget_out_max_packet_size_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_get_alt, %function
ncm_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #148]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L242
	ldr	r3, [r0, #88]
	ldr	r0, [r3]
	adds	r0, r0, #0
	movne	r0, #1
	bx	lr
.L242:
	mov	r0, #0
	bx	lr
	.fnend
	.size	ncm_get_alt, .-ncm_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_function_unbind_config, %function
audio_source_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mvn	r2, #0
	str	r2, [r3]
	str	r2, [r3, #4]
	bx	lr
	.fnend
	.size	audio_source_function_unbind_config, .-audio_source_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	uasp_function_bind_config, %function
uasp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mvn	r0, #18
	bx	lr
	.fnend
	.size	uasp_function_bind_config, .-uasp_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_set_endpoint_complete, %function
audio_set_endpoint_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r3, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	ldr	r5, [r1, #32]
	ldr	r4, [r1, #44]
	str	r3, [sp, #4]
	cmp	r4, r3
	bne	.L245
	ldr	r6, [r5, #272]
	cmp	r6, r3
	beq	.L245
	ldm	r1, {r1, r2}
	add	r0, sp, #4
	bl	memcpy
	ldr	r2, [sp, #4]
	mov	r0, r6
	ldrb	r1, [r5, #268]	@ zero_extendqisi2
	ldr	r3, [r6, #36]
	blx	r3
	str	r4, [r5, #272]
.L245:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	audio_set_endpoint_complete, .-audio_set_endpoint_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_function_init, %function
midi_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L257
	mov	r4, r0
	mov	r2, #8
	mov	r0, r3
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4, #4]
	beq	.L255
.L253:
	mvn	r2, #0
	mov	r0, #0
	str	r2, [r3]
	str	r2, [r3, #4]
.L251:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L257:
	mov	r2, #16
	mov	r3, r2
	str	r2, [r0, #4]
	b	.L253
.L255:
	mvn	r0, #11
	b	.L251
	.fnend
	.size	midi_function_init, .-midi_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_function_init, %function
ecm_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L265
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, #6
	mov	r4, r0
	movw	r1, #32976
	mov	r0, r3
	str	lr, [sp, #4]
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	mvneq	r3, #11
	movne	r3, #0
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, r3
	ldr	pc, [sp], #4
.L265:
	mov	r2, #16
	str	r2, [r0, #4]
	mov	r0, r3
	bx	lr
	.fnend
	.size	ecm_function_init, .-ecm_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_function_init, %function
rndis_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L273
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, #272
	mov	r4, r0
	movw	r1, #32976
	mov	r0, r3
	str	lr, [sp, #4]
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	mvneq	r3, #11
	movne	r3, #0
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, r3
	ldr	pc, [sp], #4
.L273:
	mov	r2, #16
	str	r2, [r0, #4]
	mov	r0, r3
	bx	lr
	.fnend
	.size	rndis_function_init, .-rndis_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_function_init, %function
audio_source_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L277
	mov	r2, #8
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L280
.L275:
	mvn	r2, #0
	mov	r0, #0
	str	r2, [r3]
	str	r2, [r3, #4]
	str	r3, [r4, #4]
.L274:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L277:
	mov	r3, #16
	b	.L275
.L280:
	mvn	r0, #11
	b	.L274
	.fnend
	.size	audio_source_function_init, .-audio_source_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_request_new, %function
adb_request_new:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	mov	r6, r1
	mov	r1, #208
	str	lr, [sp, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L281
	mov	r0, r6
	mov	r1, #208
	bl	__kmalloc
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L287
.L281:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L287:
	ldr	r2, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L281
	.fnend
	.size	adb_request_new, .-adb_request_new
	.set	conn_gadget_request_new,adb_request_new
	.set	mtp_request_new,adb_request_new
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_alloc_ep_req, %function
midi_alloc_ep_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	mov	r1, #32
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L288
	mov	r0, r5
	mov	r1, #32
	str	r5, [r4, #4]
	bl	__kmalloc
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L294
.L288:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L294:
	ldr	r2, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L288
	.fnend
	.size	midi_alloc_ep_req, .-midi_alloc_ep_req
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_unbind, %function
ccid_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	ldr	r3, [r0, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L296
	ldr	r0, [r1, #8]
	bl	kfree
.L296:
	ldr	r0, [r4, #16]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	ccid_function_unbind, .-ccid_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_receive, %function
ghsuart_ctrl_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r0, #0
	str	r6, [sp, #8]
	moveq	r4, r5
	mov	r6, r1
	str	lr, [sp, #12]
	beq	.L299
	ldr	r3, [r5, #68]
	cmp	r3, #0
	beq	.L301
	ldr	r0, [r5, #12]
	blx	r3
	ldr	r3, [r5, #100]
	mov	r4, r0
	add	r3, r3, #1
	str	r3, [r5, #100]
.L299:
	mov	r0, r6
	bl	kfree
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L301:
	mov	r4, r3
	b	.L299
	.fnend
	.size	ghsuart_ctrl_receive, .-ghsuart_ctrl_receive
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_function_cleanup, %function
ecm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_function_cleanup, .-ecm_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_function_cleanup, %function
midi_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #4]
	b	kfree
	.fnend
	.size	midi_function_cleanup, .-midi_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_notify_complete, %function
rmnet_smd_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r5, #84]
	cmn	r2, #104
	beq	.L308
	cmp	r2, #0
	mov	r6, r0
	mov	r4, r1
	beq	.L309
	cmn	r2, #108
	beq	.L308
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC0
	movt	r1, #:upper16:.LC0
	add	r0, r0, #32
	bl	dev_err
.L309:
	ldr	r3, [r5, #96]
	cmp	r3, r6
	beq	.L330
.L306:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L330:
	add	r6, r5, #172
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L306
	ldr	r0, [r5, #96]
	mov	r2, #32
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L306
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC1
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC1
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
.L308:
	mov	r3, #0
	str	r3, [r5, #172]
	b	.L306
	.fnend
	.size	rmnet_smd_notify_complete, .-rmnet_smd_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_notify_complete, %function
rmnet_sdio_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r4, #84]
	cmn	r2, #104
	beq	.L333
	cmp	r2, #0
	mov	r5, r1
	beq	.L334
	cmn	r2, #108
	beq	.L333
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC2
	movt	r1, #:upper16:.LC2
	add	r0, r0, #32
	bl	dev_err
.L334:
	ldr	r3, [r4, #324]
	tst	r3, #2
	beq	.L331
	add	r6, r4, #196
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L331
	ldr	r0, [r4, #96]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L355
.L331:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L333:
	mov	r3, #0
	str	r3, [r4, #196]
	b	.L331
.L355:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC3
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC3
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
	.fnend
	.size	rmnet_sdio_notify_complete, .-rmnet_sdio_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_notify_complete, %function
rmnet_mux_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r4, #84]
	cmn	r2, #104
	beq	.L358
	cmp	r2, #0
	mov	r5, r1
	beq	.L359
	cmn	r2, #108
	beq	.L358
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC4
	movt	r1, #:upper16:.LC4
	add	r0, r0, #32
	bl	dev_err
.L359:
	add	r6, r4, #376
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L356
	ldr	r0, [r4, #96]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L377
.L356:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L377:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC3
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC3
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
.L358:
	mov	r3, #0
	str	r3, [r4, #376]
	b	.L356
	.fnend
	.size	rmnet_mux_notify_complete, .-rmnet_mux_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_ethaddr_store, %function
rndis_ethaddr_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	movw	r5, #52429
	str	r6, [sp, #8]
	movt	r5, 52428
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	ldr	ip, [r0, #4]
	mov	r2, #0
	mov	r0, #2
	mov	r1, r2
	ldr	r3, .L385
	str	r0, [ip]
	strh	r2, [ip, #4]	@ movhi
	b	.L379
.L380:
	sub	r2, r1, r2
	add	r1, r1, #1
	add	r2, r2, #1
	cmp	r1, #256
	ldrb	lr, [ip, r2]	@ zero_extendqisi2
	eor	r0, r0, lr
	strb	r0, [ip, r2]
	beq	.L383
.L379:
	umull	r0, r2, r5, r1
	ldrb	r0, [r3], #1	@ zero_extendqisi2
	lsr	r2, r2, #2
	cmp	r0, #0
	add	r2, r2, r2, lsl #2
	bne	.L380
.L383:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L386:
	.align	2
.L385:
	.word	.LANCHOR1+2220
	.fnend
	.size	rndis_ethaddr_store, .-rndis_ethaddr_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_hw_params, %function
audio_pcm_hw_params:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #284]
	movw	r2, #44100
	ldr	ip, [r1, #296]
	cmp	r3, #2
	cmpeq	ip, r2
	bne	.L393
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r5, r0, #176
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	ip, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [ip]
	ldr	lr, [r3, #496]
	ldrd	r2, [lr, #248]
	orrs	r3, r2, r3
	beq	.L403
.L389:
	mov	r3, #2
	mov	lr, #0
	add	r2, r0, #188
	str	r3, [r0, #176]
	ldr	r3, [ip]
	ldr	r3, [r3, #496]
	str	r3, [r0, #180]
	str	lr, [r0, #196]
	ldr	r3, [ip]
	ldr	lr, [r1, #380]
	ldr	r3, [r3, #496]
	cmp	r3, #0
	beq	.L390
	ldr	ip, [r3, #276]
	cmp	ip, #0
	beq	.L390
.L391:
	mov	r6, #0
	mov	r4, r0
	mov	r7, r1
	mov	r0, r3
	str	r6, [sp]
	mov	r1, lr
	mov	r3, #208
	ldr	r8, [ip]
	blx	r8
	cmp	r0, r6
	str	r0, [r4, #184]
	beq	.L395
	ldr	r2, [r7, #380]
	cmp	r5, r6
	ldr	r3, [r4, #212]
	str	r2, [r4, #192]
	beq	.L392
	str	r5, [r3, #552]
	ldr	r2, [r4, #184]
	mov	r0, r6
	str	r2, [r3, #540]
	ldr	r2, [r4, #188]
	str	r2, [r3, #544]
	ldr	r2, [r4, #192]
	str	r2, [r3, #548]
.L387:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L403:
	mvn	r2, #0
	mov	r3, #0
	strd	r2, [lr, #248]
	ldr	ip, [r0]
	b	.L389
.L390:
	movw	ip, #:lower16:arm_dma_ops
	movt	ip, #:upper16:arm_dma_ops
	cmp	ip, #0
	bne	.L391
	.syntax divided
@ 175 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/dma-mapping.h" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/dma-mapping.h"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 175, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L392:
	mov	r0, r5
	str	r5, [r3, #540]
	str	r5, [r3, #544]
	str	r5, [r3, #548]
	str	r5, [r3, #552]
	b	.L387
.L393:
	mvn	r0, #21
	bx	lr
.L395:
	mvn	r0, #11
	b	.L387
	.fnend
	.size	audio_pcm_hw_params, .-audio_pcm_hw_params
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_open, %function
ffs_ep0_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	ldr	r2, [r3, #92]
	cmp	r2, #3
	beq	.L406
	add	r2, r3, #84
	str	r3, [r1, #124]
	.syntax divided
@ 45 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	add	r2, r3, #88
	.syntax divided
@ 45 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #0
	bx	lr
.L406:
	mvn	r0, #15
	bx	lr
	.fnend
	.size	ffs_ep0_open, .-ffs_ep0_open
	.section	.text.unlikely,"ax",%progbits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	reset_config, %function
reset_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	mov	r5, r0
	ldrh	r2, [r3, #18]
	tst	r2, #4
	beq	.L408
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC5
	mov	r0, r3
	movt	r2, #:upper16:.LC5
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L408:
	ldr	r3, [r5, #12]
	mov	r6, #0
	ldr	r4, [r3, #36]
	sub	r4, r4, #72
.L409:
	ldr	r3, [r5, #12]
	add	r2, r4, #72
	mov	r0, r4
	add	r3, r3, #36
	cmp	r2, r3
	beq	.L419
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L410
	blx	r3
.L410:
	ldr	r3, [r4, #72]
	str	r6, [r4, #80]
	sub	r4, r3, #72
	b	.L409
.L419:
	str	r6, [r5, #12]
	str	r6, [r5, #56]
	pop	{r4, r5, r6, pc}
	.fnend
	.size	reset_config, .-reset_config
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_setup_complete, %function
composite_setup_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	cmp	r3, #0
	bne	.L421
	ldr	r2, [r1, #4]
	ldr	ip, [r1, #48]
	cmp	ip, r2
	bxeq	lr
.L421:
	movw	r2, #:lower16:.LANCHOR2
	movt	r2, #:upper16:.LANCHOR2
	ldrh	ip, [r2, #42]
	tst	ip, #4
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r4, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	lr, [r1, #4]
	add	r0, r2, #24
	movw	r2, #:lower16:.LC6
	ldr	ip, [r1, #48]
	movt	r2, #:upper16:.LC6
	ldr	r1, [r4]
	stm	sp, {ip, lr}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	composite_setup_complete, .-composite_setup_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_resume, %function
composite_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r0
	add	r0, r0, #32
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	mov	r5, r0
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, #66]
	tst	r3, #4
	bne	.L454
.L431:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2476]
	ldr	r3, [r3, #40]
	cmp	r3, #0
	beq	.L432
	mov	r0, r5
	blx	r3
.L432:
	ldr	r2, [r5, #12]
	cmp	r2, #0
	beq	.L434
	mov	r1, r2
	ldr	r4, [r1, #36]!
	cmp	r1, r4
	sub	r4, r4, #72
	beq	.L436
.L435:
	ldr	r3, [r4, #60]
	mov	r0, r4
	cmp	r3, #0
	beq	.L437
	blx	r3
	ldr	r2, [r5, #12]
	ldr	r4, [r4, #72]
	add	r1, r2, #36
	cmp	r1, r4
	sub	r4, r4, #72
	bne	.L435
.L436:
	ldrb	r3, [r2, #23]	@ zero_extendqisi2
	cmp	r3, #0
	ldrne	r1, [r5, #64]
	moveq	r1, #500
	mulne	r1, r1, r3
	ldr	r3, [r6]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L434
	mov	r0, r6
	blx	r3
.L434:
	ldrb	r3, [r5, #16]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r5, #16]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L437:
	ldr	r4, [r4, #72]
	cmp	r1, r4
	sub	r4, r4, #72
	bne	.L435
	b	.L436
.L454:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC7
	add	r0, r0, #48
	movt	r2, #:upper16:.LC7
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L431
	.fnend
	.size	composite_resume, .-composite_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_suspend, %function
composite_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	add	r0, r0, #32
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	mov	r6, r0
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, #90]
	tst	r3, #4
	bne	.L474
.L456:
	ldr	r3, [r6, #12]
	cmp	r3, #0
	beq	.L457
	ldr	r4, [r3, #36]!
	cmp	r3, r4
	sub	r4, r4, #72
	beq	.L457
.L458:
	ldr	r2, [r4, #56]
	mov	r0, r4
	cmp	r2, #0
	beq	.L459
	blx	r2
	ldr	r3, [r6, #12]
	ldr	r4, [r4, #72]
	add	r3, r3, #36
	cmp	r3, r4
	sub	r4, r4, #72
	bne	.L458
.L457:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2476]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L461
	mov	r0, r6
	blx	r3
.L461:
	ldrb	r3, [r6, #16]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #16]
	ldr	r3, [r5]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L455
	mov	r0, r5
	mov	r1, #2
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	bx	r3
.L459:
	ldr	r4, [r4, #72]
	cmp	r3, r4
	sub	r4, r4, #72
	bne	.L458
	b	.L457
.L474:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC8
	add	r0, r0, #72
	movt	r2, #:upper16:.LC8
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L456
.L455:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	composite_suspend, .-composite_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_disable, %function
diag_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrh	r2, [r3, #114]
	tst	r2, #4
	bne	.L492
.L476:
	add	r5, r4, #108
	mov	r6, #0
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r6, [r4, #112]
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #124]
	cmp	r3, r6
	beq	.L477
	ldr	r5, [r3, #12]
	cmp	r5, r6
	beq	.L477
	mov	r2, r6
	mov	r1, #1
	ldr	r0, [r3, #16]
	blx	r5
.L477:
	ldr	r0, [r4, #88]
	mov	r5, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #88]
	str	r5, [r3]
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #84]
	str	r5, [r3]
	ldr	r3, [r4, #124]
	cmp	r3, r5
	strne	r5, [r3, #20]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L492:
	ldr	r1, [r4, #116]
	movw	r2, #:lower16:.LC9
	add	r0, r3, #96
	movt	r2, #:upper16:.LC9
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L476
	.fnend
	.size	diag_function_disable, .-diag_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_complete_set_line_coding, %function
acm_complete_set_line_coding:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	ip, [r1, #44]
	ldr	r2, [r3, #20]
	cmp	ip, #0
	ldr	lr, [r2, #24]
	beq	.L494
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, #138]
	tst	r2, #4
	bne	.L505
.L493:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L494:
	ldr	ip, [r1, #48]
	cmp	ip, #7
	beq	.L496
	mov	r4, r0
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, #162]
	tst	r2, #4
	bne	.L506
.L497:
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldr	r3, [r3, #24]
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	bx	r3
.L496:
	ldr	r2, [r1]
	add	r1, r3, #160
	ldr	r0, [r2]	@ unaligned
	str	r0, [r3, #160]
	ldrh	r3, [r2, #4]	@ unaligned
	strh	r3, [r1, #4]	@ movhi
	ldrb	r3, [r2, #6]	@ zero_extendqisi2
	strb	r3, [r1, #6]
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L505:
	ldr	r1, [lr]
	movw	r2, #:lower16:.LC10
	add	r0, r0, #120
	ldrb	r3, [r3, #146]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC10
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L493
.L506:
	ldr	r1, [lr]
	movw	r2, #:lower16:.LC11
	add	r0, r0, #144
	ldrb	r3, [r3, #146]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC11
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L497
	.fnend
	.size	acm_complete_set_line_coding, .-acm_complete_set_line_coding
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_disable, %function
f_midi_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR2
	str	lr, [sp, #4]
	ldrh	r2, [r3, #186]
	tst	r2, #4
	bne	.L513
.L508:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	bx	r3
.L513:
	ldr	r1, [r4, #20]
	add	r0, r3, #168
	movw	r2, #:lower16:.LC12
	movt	r2, #:upper16:.LC12
	ldr	r3, [r1, #24]
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L508
	.fnend
	.size	f_midi_disable, .-f_midi_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_response_complete, %function
rndis_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r5, [r1, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r3, [r5, #20]
	cmp	r3, #0
	beq	.L514
	ldr	r7, [r3, #24]
	cmp	r7, #0
	beq	.L514
	ldr	ip, [r1, #44]
	cmn	ip, #104
	beq	.L519
	cmp	ip, #0
	mov	r6, r0
	mov	r4, r1
	beq	.L520
	cmn	ip, #108
	beq	.L519
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, #210]
	tst	r3, #4
	bne	.L547
.L520:
	ldr	r3, [r5, #168]
	cmp	r3, r6
	beq	.L548
.L514:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L548:
	add	r6, r5, #176
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L514
	ldr	r0, [r5, #168]
	mov	r1, r4
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L514
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	ip, #:lower16:.LANCHOR2
	movt	ip, #:upper16:.LANCHOR2
	ldrh	r2, [ip, #234]
	tst	r2, #4
	beq	.L514
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC14
	mov	r3, r0
	movt	r2, #:upper16:.LC14
	add	r0, ip, #216
	add	r1, r1, #32
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	__dynamic_dev_dbg
.L519:
	mov	r3, #0
	str	r3, [r5, #176]
	b	.L514
.L547:
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC13
	add	r0, r0, #192
	ldr	r3, [r6, #4]
	str	ip, [sp]
	movt	r2, #:upper16:.LC13
	ldr	lr, [r4, #4]
	ldr	ip, [r4, #48]
	add	r1, r1, #32
	stmib	sp, {ip, lr}
	bl	__dynamic_dev_dbg
	b	.L520
	.fnend
	.size	rndis_response_complete, .-rndis_response_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_response_available, %function
rndis_response_available:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #176
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r1, [r0, #172]
	ldr	r6, [r3, #24]
	ldr	ip, [r1]
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	beq	.L563
.L549:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L563:
	ldr	r2, [r0, #168]
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L549
	mov	r4, r0
	mov	r0, #0
	str	r3, [ip]
	mov	r2, #32
	str	r0, [ip, #4]
	ldr	r0, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L549
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	ip, #:lower16:.LANCHOR2
	movw	r2, #258
	movt	ip, #:upper16:.LANCHOR2
	ldrh	r2, [ip, r2]
	tst	r2, #4
	beq	.L549
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC15
	mov	r3, r0
	ldrd	r4, [sp]
	add	r0, ip, #240
	movt	r2, #:upper16:.LC15
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	add	r1, r1, #32
	b	__dynamic_dev_dbg
	.fnend
	.size	rndis_response_available, .-rndis_response_available
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_setup, %function
ecm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	movw	r2, #17185
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r1, [r1]	@ unaligned
	.pad #20
	sub	sp, sp, #20
	ldr	r3, [r0, #20]
	ldrh	r6, [r4, #2]	@ unaligned
	ldrh	ip, [r4, #4]	@ unaligned
	cmp	r1, r2
	ldrh	lr, [r4, #6]	@ unaligned
	ldr	r7, [r3, #24]
	uxth	r8, r6
	ldrb	r3, [r4]	@ zero_extendqisi2
	bne	.L565
	cmp	lr, #0
	beq	.L576
.L565:
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #330
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	mvneq	r5, #94
	bne	.L577
.L564:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L576:
	ldrb	r9, [r0, #148]	@ zero_extendqisi2
	mov	r5, r0
	cmp	r9, ip
	bne	.L565
	movw	r10, #:lower16:.LANCHOR2
	movw	r3, #282
	ldr	fp, [r7, #4]
	movt	r10, #:upper16:.LANCHOR2
	ldrh	r3, [r10, r3]
	tst	r3, #4
	bne	.L578
.L567:
	movw	r3, #306
	strh	r6, [r5, #98]	@ movhi
	ldrh	r3, [r10, r3]
	tst	r3, #4
	bne	.L579
.L569:
	ldrb	r3, [fp, #26]	@ zero_extendqisi2
	mov	r0, #0
	mov	r1, fp
	mov	r2, #32
	str	r0, [fp, #4]
	bfc	r3, #1, #1
	strb	r3, [fp, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bge	.L564
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC19
	str	r5, [sp]
	movt	r1, #:upper16:.LC19
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	ldrb	r2, [r4]	@ zero_extendqisi2
	add	r0, r0, #32
	bl	dev_err
	b	.L564
.L577:
	ldr	r1, [r7]
	str	r8, [sp, #4]
	movw	r2, #:lower16:.LC17
	ldrb	r4, [r4, #1]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC17
	add	r0, r0, #312
	mvn	r5, #94
	add	r1, r1, #32
	str	r4, [sp]
	str	ip, [sp, #8]
	str	lr, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L564
.L579:
	ldr	r1, [r7]
	mov	r0, #0
	movw	r2, #:lower16:.LC18
	ldrb	r3, [r4]	@ zero_extendqisi2
	str	r8, [sp, #4]
	movt	r2, #:upper16:.LC18
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	add	r1, r1, #32
	str	ip, [sp]
	str	r9, [sp, #8]
	str	r0, [sp, #12]
	ldr	r0, .L580
	bl	__dynamic_dev_dbg
	b	.L569
.L578:
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC16
	mov	r3, r8
	movt	r2, #:upper16:.LC16
	add	r0, r10, #264
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L567
.L581:
	.align	2
.L580:
	.word	.LANCHOR2+288
	.fnend
	.size	ecm_setup, .-ecm_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_notify_complete, %function
ecm_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r5, [r1, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	ip, [r1, #44]
	ldr	r2, [r5, #20]
	cmn	ip, #104
	beq	.L584
	cmp	ip, #0
	beq	.L585
	cmn	ip, #108
	beq	.L584
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #354
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L631
.L585:
	cmp	r4, #0
	str	r4, [r5, #168]
	beq	.L582
	ldrb	r3, [r5, #172]	@ zero_extendqisi2
	ldr	r7, [r2, #24]
	ldr	r6, [r4]
	cmp	r3, #1
	beq	.L589
	bcc	.L582
	cmp	r3, #2
	bne	.L588
	mov	r3, #0
	mov	r1, #8
	mov	r2, #16
	mov	r0, #42
	strb	r0, [r6, #1]
	strb	r3, [r6, #2]
	strb	r3, [r6, #3]
	strb	r1, [r6, #6]
	strb	r3, [r6, #7]
	ldr	r1, [r4]
	str	r2, [r4, #4]
	ldr	r3, [r7]
	ldr	r2, [r3, #20]
	cmp	r2, #4
	bls	.L593
	ldr	r2, [r3, #16]
	cmp	r2, #5
	beq	.L632
.L595:
	mov	r0, #0
	mov	r3, #28672
	movt	r0, 6500
	cmp	r2, #3
	movt	r3, 148
	moveq	r3, r0
.L594:
	movw	r2, #:lower16:.LANCHOR2
	movw	r0, #402
	str	r3, [r1, #8]
	movt	r2, #:upper16:.LANCHOR2
	str	r3, [r1, #12]
	ldrh	r3, [r2, r0]
	tst	r3, #4
	bne	.L633
.L596:
	mov	r3, #0
	strb	r3, [r5, #172]
.L588:
	mvn	r0, #94
	mov	r3, #0
	mov	r2, #32
	mov	r1, r4
	strb	r0, [r6]
	ldrb	r0, [r5, #148]	@ zero_extendqisi2
	strh	r0, [r6, #4]	@ unaligned
	ldr	r0, [r5, #164]
	str	r3, [r5, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bge	.L582
	movw	ip, #:lower16:.LANCHOR2
	movw	r3, #426
	str	r4, [r5, #168]
	movt	ip, #:upper16:.LANCHOR2
	ldrh	r3, [ip, r3]
	tst	r3, #4
	bne	.L634
.L582:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L584:
	mov	r3, #0
	strb	r3, [r5, #172]
	b	.L585
.L589:
	mov	r3, #0
	mov	r2, #8
	movw	r0, #:lower16:.LANCHOR2
	strb	r3, [r6, #1]
	ldrb	r1, [r5, #173]	@ zero_extendqisi2
	movt	r0, #:upper16:.LANCHOR2
	strb	r3, [r6, #6]
	strb	r3, [r6, #7]
	movw	r3, #378
	strh	r1, [r6, #2]	@ unaligned
	str	r2, [r4, #4]
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L635
.L591:
	mov	r3, #2
	strb	r3, [r5, #172]
	b	.L588
.L593:
	cmp	r2, #2
	movls	r3, #28672
	movtls	r3, 148
	bls	.L594
	ldr	r2, [r3, #16]
	b	.L595
.L631:
	ldr	r1, [r2, #24]
	movw	r2, #:lower16:.LC22
	add	r0, r0, #336
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC22
	ldr	r1, [r1]
	ldrb	r3, [r3, #1]	@ zero_extendqisi2
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r2, [r5, #20]
	b	.L585
.L634:
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC25
	mov	r3, r0
	movt	r2, #:upper16:.LC25
	add	r0, ip, #408
	add	r1, r1, #32
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	__dynamic_dev_dbg
.L632:
	mov	r3, #0
	movt	r3, 13000
	b	.L594
.L633:
	ldr	r3, [r7]
	ldr	r2, [r3, #20]
	add	r1, r3, #32
	cmp	r2, #4
	bls	.L597
	ldr	r2, [r3, #16]
	cmp	r2, #5
	beq	.L636
.L599:
	mov	r0, #0
	mov	r3, #28672
	movt	r0, 6500
	cmp	r2, #3
	movt	r3, 148
	moveq	r3, r0
.L598:
	movw	r2, #:lower16:.LC24
	ldr	r0, .L637
	movt	r2, #:upper16:.LC24
	bl	__dynamic_dev_dbg
	b	.L596
.L635:
	ldrb	lr, [r5, #173]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC20
	movw	r3, #:lower16:.LC21
	ldr	r1, [r7]
	movt	ip, #:upper16:.LC20
	movw	r2, #:lower16:.LC23
	movt	r3, #:upper16:.LC21
	movt	r2, #:upper16:.LC23
	add	r0, r0, #360
	cmp	lr, #0
	movne	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L591
.L597:
	cmp	r2, #2
	movls	r3, #28672
	movtls	r3, 148
	bls	.L598
	ldr	r2, [r3, #16]
	b	.L599
.L636:
	mov	r3, #0
	movt	r3, 13000
	b	.L598
.L638:
	.align	2
.L637:
	.word	.LANCHOR2+384
	.fnend
	.size	ecm_notify_complete, .-ecm_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_ep0out_complete, %function
ncm_ep0out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, #0
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r1, #32]
	ldr	r3, [r1, #44]
	ldr	ip, [r4]
	str	r2, [r1, #32]
	cmp	r3, r2
	bne	.L640
	ldr	r3, [r1, #4]
	ldr	r2, [r1, #48]
	cmp	r2, r3
	beq	.L641
.L640:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #450
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L654
.L642:
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r3, #24]
	bx	r3
.L641:
	ldr	r3, [r1]
	ldr	r3, [r3]	@ unaligned
	cmp	r3, #2048
	bcc	.L643
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	ldr	r2, [r2, #24]
	cmp	r2, r3
	bcs	.L644
.L643:
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #474
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	beq	.L642
	ldr	r1, [ip]
	movw	r2, #:lower16:.LC27
	add	r0, r0, #456
	movt	r2, #:upper16:.LC27
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L642
.L654:
	ldr	r1, [ip]
	movw	r2, #:lower16:.LC26
	add	r0, r0, #432
	movt	r2, #:upper16:.LC26
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L642
.L644:
	str	r3, [r0, #112]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ncm_ep0out_complete, .-ncm_ep0out_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_notify_complete, %function
ncm_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	ldr	r8, [r1]
	ldr	r4, [r1, #32]
	ldr	r3, [r4, #20]
	add	r6, r4, #188
	mov	r0, r6
	ldr	r7, [r3, #24]
	bl	_raw_spin_lock
	ldr	ip, [r5, #44]
	cmn	ip, #104
	beq	.L657
	cmp	ip, #0
	beq	.L658
	cmn	ip, #108
	beq	.L657
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #498
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L698
.L658:
	cmp	r5, #0
	str	r5, [r4, #168]
	beq	.L660
	ldrb	r3, [r4, #172]	@ zero_extendqisi2
	ldr	r2, [r4, #20]
	ldr	r7, [r5]
	cmp	r3, #1
	ldr	r8, [r2, #24]
	beq	.L662
	bcc	.L660
	cmp	r3, #2
	bne	.L661
	mov	r3, #0
	mov	r1, #8
	mov	r2, #16
	mov	r0, #42
	strb	r0, [r7, #1]
	strb	r3, [r7, #2]
	strb	r3, [r7, #3]
	strb	r1, [r7, #6]
	strb	r3, [r7, #7]
	ldr	r1, [r5]
	str	r2, [r5, #4]
	ldr	r3, [r8]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	movls	r3, #28672
	movtls	r3, 148
	bls	.L666
	ldr	r0, [r3, #16]
	mov	r2, #0
	mov	r3, #28672
	movt	r2, 6500
	movt	r3, 148
	cmp	r0, #3
	moveq	r3, r2
.L666:
	movw	r2, #:lower16:.LANCHOR2
	movw	r0, #546
	str	r3, [r1, #8]
	movt	r2, #:upper16:.LANCHOR2
	str	r3, [r1, #12]
	ldrh	r3, [r2, r0]
	tst	r3, #4
	bne	.L699
.L667:
	mov	r3, #1
	strb	r3, [r4, #172]
.L661:
	mvn	r2, #94
	mov	r3, #0
	mov	r0, r6
	strb	r2, [r7]
	ldrb	r2, [r4, #148]	@ zero_extendqisi2
	strh	r2, [r7, #4]	@ unaligned
	str	r3, [r4, #168]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #164]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r7, #0
	bge	.L660
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #570
	str	r5, [r4, #168]
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L700
.L660:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L657:
	mov	r3, #0
	strb	r3, [r4, #172]
	b	.L658
.L662:
	mov	r3, #0
	mov	r2, #8
	movw	r0, #:lower16:.LANCHOR2
	strb	r3, [r7, #1]
	ldrb	r1, [r4, #173]	@ zero_extendqisi2
	movt	r0, #:upper16:.LANCHOR2
	strb	r3, [r7, #6]
	strb	r3, [r7, #7]
	movw	r3, #522
	strh	r1, [r7, #2]	@ unaligned
	str	r2, [r5, #4]
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L701
.L664:
	mov	r3, #0
	strb	r3, [r4, #172]
	b	.L661
.L698:
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC22
	add	r0, r0, #480
	ldrb	r3, [r8, #1]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC22
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L658
.L700:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC25
	mov	r3, r7
	movt	r2, #:upper16:.LC25
	add	r0, r0, #552
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L660
.L699:
	ldr	r3, [r8]
	ldr	r2, [r3, #20]
	add	r1, r3, #32
	cmp	r2, #2
	movls	r3, #28672
	movtls	r3, 148
	bls	.L668
	ldr	r0, [r3, #16]
	mov	r2, #0
	mov	r3, #28672
	movt	r2, 6500
	movt	r3, 148
	cmp	r0, #3
	moveq	r3, r2
.L668:
	movw	r2, #:lower16:.LC24
	ldr	r0, .L702
	movt	r2, #:upper16:.LC24
	bl	__dynamic_dev_dbg
	b	.L667
.L701:
	ldrb	lr, [r4, #173]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC21
	movw	r3, #:lower16:.LC20
	ldr	r1, [r8]
	movt	ip, #:upper16:.LC21
	movw	r2, #:lower16:.LC23
	movt	r3, #:upper16:.LC20
	movt	r2, #:upper16:.LC23
	add	r0, r0, #504
	cmp	lr, #0
	moveq	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L664
.L703:
	.align	2
.L702:
	.word	.LANCHOR2+528
	.fnend
	.size	ncm_notify_complete, .-ncm_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	unbind_config, %function
unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	add	r6, r1, #36
	strd	r8, [sp, #16]
	ldr	r9, .L726
	movw	r8, #:lower16:.LC28
	strd	r10, [sp, #24]
	movt	r8, #:upper16:.LC28
	mov	r10, r0
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	sub	fp, r9, #18
	b	.L706
.L708:
	bl	list_del
	ldr	r3, [r4, #-36]
	cmp	r3, #0
	bne	.L723
.L706:
	ldr	r4, [r5, #36]
	cmp	r6, r4
	mov	r0, r4
	sub	r7, r4, #72
	bne	.L708
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L709
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #618
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	bne	.L724
.L710:
	mov	r0, r5
	blx	r3
.L709:
	mov	r0, #0
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L723:
	ldrh	r2, [r9]
	tst	r2, #4
	bne	.L725
.L707:
	mov	r1, r7
	mov	r0, r5
	blx	r3
	b	.L706
.L725:
	ldr	r3, [r4, #-72]
	str	r7, [sp]
	mov	r2, r8
	ldr	r1, [r10]
	mov	r0, fp
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #-36]
	b	.L707
.L724:
	ldr	r1, [r10]
	movw	r2, #:lower16:.LC29
	str	r5, [sp]
	add	r0, r0, #600
	ldr	r3, [r5]
	movt	r2, #:upper16:.LC29
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r5, #12]
	b	.L710
.L727:
	.align	2
.L726:
	.word	.LANCHOR2+594
	.fnend
	.size	unbind_config, .-unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_free_buf, %function
rmnet_smd_free_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r3, #0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	mov	r8, r0
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	str	r3, [r0, #424]
	str	r3, [r0, #428]
	str	r3, [r0, #432]
	str	r3, [r0, #436]
	str	r3, [r0, #440]
	str	r3, [r0, #444]
	str	r3, [r0, #448]
	str	r3, [r0, #452]
	ldr	r4, [r8, #140]!
	cmp	r4, r8
	ldr	r5, [r4]
	beq	.L729
.L730:
	mov	r0, r4
	sub	r9, r4, #36
	bl	list_del
	ldr	r7, [r6, #88]
	ldr	r0, [r4, #-36]
	mov	r4, r5
	bl	kfree
	mov	r1, r9
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r8, r5
	ldr	r5, [r5]
	bne	.L730
.L729:
	mov	r8, r6
	ldr	r4, [r8, #148]!
	cmp	r4, r8
	ldr	r5, [r4]
	beq	.L731
.L732:
	mov	r0, r4
	sub	r9, r4, #36
	bl	list_del
	ldr	r7, [r6, #92]
	ldr	r0, [r4, #-36]
	mov	r4, r5
	bl	kfree
	mov	r1, r9
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r8, r5
	ldr	r5, [r5]
	bne	.L732
.L731:
	mov	r8, r6
	ldr	r4, [r8, #108]!
	cmp	r4, r8
	ldr	r5, [r4]
	beq	.L733
.L734:
	mov	r0, r4
	sub	r7, r4, #8
	bl	list_del
	ldr	r0, [r4, #-8]
	mov	r4, r5
	bl	kfree
	mov	r0, r7
	bl	kfree
	cmp	r8, r5
	ldr	r5, [r5]
	bne	.L734
.L733:
	mov	r8, r6
	ldr	r4, [r8, #116]!
	cmp	r4, r8
	ldr	r5, [r4]
	beq	.L735
.L736:
	mov	r0, r4
	sub	r7, r4, #8
	bl	list_del
	ldr	r0, [r4, #-8]
	mov	r4, r5
	bl	kfree
	mov	r0, r7
	bl	kfree
	cmp	r8, r5
	ldr	r5, [r5]
	bne	.L736
.L735:
	ldrd	r4, [r6, #96]
	ldr	r0, [r5]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	rmnet_smd_free_buf, .-rmnet_smd_free_buf
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_control_rx_work, %function
rmnet_sdio_control_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #32
	strd	r8, [sp, #16]
	sub	r8, r0, #112
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r9, [r0, #-136]
	b	.L745
.L748:
	bl	list_del
	ldr	r3, [r5, #-104]
	mov	r1, r10
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r5, #-104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-4]
	cmn	r3, #19
	bne	.L747
	ldr	r3, [r5, #152]
	add	r3, r3, #1
	str	r3, [r5, #152]
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r7
	bl	kfree
.L745:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #-112]
	mov	r10, r0
	cmp	r4, r8
	mov	r0, r4
	sub	r7, r4, #8
	bne	.L748
.L743:
	mov	r1, r10
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L747:
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC30
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC30
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	r0, r0, #32
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	dev_err
	.fnend
	.size	rmnet_sdio_control_rx_work, .-rmnet_sdio_control_rx_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_setup, %function
rmnet_mux_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r0, #372]
	ldrh	r9, [r1, #4]	@ unaligned
	ldrh	r6, [r1, #2]	@ unaligned
	ldr	r8, [r2, #24]
	cmp	r3, #0
	ldrh	r7, [r1, #6]	@ unaligned
	ldr	r10, [r8, #4]
	beq	.L759
	ldrh	r3, [r1]	@ unaligned
	movw	r2, #8482
	mov	r4, r1
	mov	r5, r0
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r2
	beq	.L752
	movw	r2, #41217
	cmp	r3, r2
	beq	.L753
	cmp	r3, #8448
	beq	.L754
.L767:
	movw	r5, #:lower16:.LANCHOR2
	movt	r5, #:upper16:.LANCHOR2
.L751:
	movw	r3, #666
	ldrh	r3, [r5, r3]
	tst	r3, #4
	mvneq	r4, #94
	bne	.L768
.L749:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L753:
	cmp	r6, #0
	bne	.L767
	add	fp, r0, #368
	mov	r0, fp
	bl	_raw_spin_lock
	mov	r2, r5
	ldr	r3, [r2, #340]!
	cmp	r3, r2
	beq	.L769
	mov	r0, r3
	sub	r4, r3, #8
	str	r3, [sp, #20]
	bl	list_del
	ldr	r2, [r5, #348]
	mov	r0, fp
	sub	r2, r2, #1
	str	r2, [r5, #348]
	bl	_raw_spin_unlock
	ldr	r3, [sp, #20]
	ldr	r0, [r10]
	ldmdb	r3, {r1, r6}
	cmp	r7, r6
	movcc	r6, r7
	mov	r2, r6
	bl	memcpy
	ldr	r3, [sp, #20]
	movw	r2, #:lower16:rmnet_mux_response_complete
	str	r5, [r10, #32]
	movt	r2, #:upper16:rmnet_mux_response_complete
	str	r2, [r10, #28]
	ldr	r0, [r3, #-8]
	bl	kfree
	mov	r0, r4
	bl	kfree
	ldr	r3, [r5, #416]
	cmp	r6, r7
	movge	r7, #0
	movlt	r7, #1
	add	r3, r3, #1
	str	r3, [r5, #416]
	b	.L755
.L754:
	movw	r3, #:lower16:rmnet_mux_command_complete
	mov	r6, r7
	str	r0, [r10, #32]
	movt	r3, #:upper16:rmnet_mux_command_complete
	mov	r7, #0
	str	r3, [r10, #28]
.L755:
	ldrb	r3, [r10, #26]	@ zero_extendqisi2
	str	r6, [r10, #4]
	mov	r1, r10
	mov	r2, #32
	bfi	r3, r7, #1, #1
	strb	r3, [r10, #26]
	ldr	r3, [r8]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L749
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC32
	mov	r2, r4
	movt	r1, #:upper16:.LC32
	add	r0, r0, #32
	bl	dev_err
	b	.L749
.L752:
	ldr	r3, [r0, #352]
	adds	r7, r7, #0
	movne	r7, #1
	ands	r6, r6, #1
	movne	r6, #0
	orrne	r3, r3, #2
	biceq	r3, r3, #2
	str	r3, [r0, #352]
	b	.L755
.L769:
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #642
	movt	r5, #:upper16:.LANCHOR2
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L770
.L757:
	mov	r0, fp
	bl	_raw_spin_unlock
	b	.L751
.L768:
	ldr	r1, [r8]
	str	r6, [sp, #4]
	movw	r2, #:lower16:.LC17
	ldrb	r3, [r4]	@ zero_extendqisi2
	str	r9, [sp, #8]
	movt	r2, #:upper16:.LC17
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	mvn	r4, #94
	ldr	r0, .L771
	add	r1, r1, #32
	str	ip, [sp]
	str	r7, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L749
.L759:
	mvn	r4, #106
	b	.L749
.L770:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC31
	add	r0, r5, #624
	ldrb	r3, [r4]	@ zero_extendqisi2
	str	r6, [sp, #4]
	movt	r2, #:upper16:.LC31
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	add	r1, r1, #32
	str	ip, [sp]
	str	r9, [sp, #8]
	str	r7, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L757
.L772:
	.align	2
.L771:
	.word	.LANCHOR2+648
	.fnend
	.size	rmnet_mux_setup, .-rmnet_mux_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_write_complete, %function
diag_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0]
	ldr	r6, [r1, #32]
	ldr	r2, [r5, #136]
	sub	ip, r2, #1
	str	ip, [r5, #136]
	ldr	ip, [r1, #44]
	cmp	ip, #0
	bne	.L774
	ldrh	r0, [r0, #20]
	ldr	ip, [r1, #4]
	cmp	ip, r0
	bcc	.L774
	udiv	lr, ip, r0
	mls	r0, r0, lr, ip
	cmp	r0, #0
	bne	.L774
	str	r2, [r5, #136]
	ldr	ip, [r1, #48]
	mov	r2, #32
	str	r0, [r1, #4]
	str	ip, [r6, #8]
	ldr	r3, [r1, #44]
	str	r3, [r6, #12]
	ldr	r0, [r5, #88]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	r3, [r0, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #16]
	bx	r3
.L774:
	add	r7, r5, #108
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	add	r2, r5, #100
	ldr	r1, [r5, #104]
	add	r0, r4, #36
	bl	__list_add
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L787
.L775:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #124]
	cmp	r3, #0
	beq	.L773
	ldr	lr, [r3, #12]
	cmp	lr, #0
	beq	.L773
	mov	r2, r6
	ldr	r0, [r3, #16]
	mov	r1, #2
	ldrd	r4, [sp]
	mov	r3, lr
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L787:
	ldr	r3, [r4, #48]
	str	r3, [r6, #8]
	ldr	r3, [r4, #44]
	str	r3, [r6, #12]
	b	.L775
.L773:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	diag_write_complete, .-diag_write_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_read_complete, %function
diag_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r1, #32]
	ldr	r3, [r1, #48]
	ldr	r4, [r0]
	str	r3, [r6, #8]
	ldr	r3, [r1, #44]
	add	r7, r4, #108
	mov	r0, r7
	str	r3, [r6, #12]
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	add	r2, r4, #92
	ldr	r1, [r4, #96]
	add	r0, r5, #36
	bl	__list_add
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r4, #124]
	ldr	r3, [r4, #132]
	cmp	r1, #0
	add	r3, r3, #1
	str	r3, [r4, #132]
	beq	.L788
	ldr	r3, [r1, #12]
	cmp	r3, #0
	beq	.L788
	mov	r2, r6
	ldr	r0, [r1, #16]
	mov	r1, #3
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L788:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	diag_read_complete, .-diag_read_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	prealloc, %function
prealloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #0
	beq	.L821
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	sub	r2, r2, #1
	strd	r6, [sp, #8]
	mov	r6, r1
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	cmp	r0, r4
	sub	r4, r4, #36
	bne	.L799
	b	.L824
.L802:
	cmn	r5, #1
	mov	r2, r5
	beq	.L801
.L799:
	ldr	r4, [r4, #36]
	sub	r5, r2, #1
	cmp	r7, r4
	sub	r4, r4, #36
	bne	.L802
	ldr	r3, [r6, #28]
	cmp	r2, #0
	ldrb	r4, [r3, #2]	@ zero_extendqisi2
	lsr	r3, r4, #7
	beq	.L803
.L807:
	movw	r2, #:lower16:rx_complete
	movw	r4, #:lower16:tx_complete
	movt	r2, #:upper16:rx_complete
	cmp	r3, #0
	movt	r4, #:upper16:tx_complete
	moveq	r4, r2
	b	.L806
.L804:
	str	r4, [r3, #28]
	ldr	r2, [r7]
	bl	__list_add
	cmp	r5, #0
	sub	r5, r5, #1
	beq	.L803
.L806:
	ldr	r3, [r6, #8]
	mov	r1, #32
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r1, r7
	add	r0, r3, #36
	bne	.L804
	ldr	r3, [r7]
	cmp	r7, r3
	beq	.L798
.L803:
	mov	r0, #0
.L797:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L801:
	mov	r0, r4
	ldr	r5, [r0, #36]!
	bl	list_del
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	sub	r4, r5, #36
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r5
	bne	.L801
	b	.L803
.L824:
	ldr	r3, [r1, #28]
	mov	r5, r2
	ldrb	r3, [r3, #2]	@ zero_extendqisi2
	lsr	r3, r3, #7
	b	.L807
.L798:
	mvn	r0, #11
	b	.L797
.L821:
	mvn	r0, #11
	bx	lr
	.fnend
	.size	prealloc, .-prealloc
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_open, %function
ffs_epfile_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r2, [r0, #328]
	ldr	r3, [r2, #36]
	ldr	r3, [r3, #92]
	cmp	r3, #2
	bne	.L829
	str	r2, [r1, #124]
	ldr	r3, [r2, #36]
	add	r1, r3, #84
	.syntax divided
@ 45 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r0, [r1]
	add	r0, r0, #1
	strex	ip, r0, [r1]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	add	r1, r3, #88
	.syntax divided
@ 45 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r0, [r1]
	add	r0, r0, #1
	strex	ip, r0, [r1]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
	mov	r0, r3
	str	r3, [r2, #32]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L829:
	movw	r0, #:lower16:.LC33
	movw	r1, #946
	movt	r0, #:upper16:.LC33
	bl	warn_slowpath_null
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
	.fnend
	.size	ffs_epfile_open, .-ffs_epfile_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	do_mode_sense, %function
do_mode_sense:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r3, [r0, #77]	@ zero_extendqisi2
	ldrb	r8, [r0, #76]	@ zero_extendqisi2
	ldr	r7, [r0, #104]
	ldr	r5, [r1]
	tst	r3, #247
	bne	.L840
	ldrb	r4, [r0, #78]	@ zero_extendqisi2
	lsr	r9, r4, #6
	and	r4, r4, #63
	cmp	r9, #3
	moveq	r3, #14592
	mvneq	r0, #21
	movteq	r3, 5
	streq	r3, [r7, #28]
	beq	.L830
	mov	r1, #8
	mov	r0, r5
	bl	__memzero
	sub	r3, r4, #63
	cmp	r8, #26
	ldrb	r2, [r7, #24]	@ zero_extendqisi2
	clz	r3, r3
	lsr	r3, r3, #5
	beq	.L846
	lsl	r2, r2, #6
	add	r6, r5, #8
	bic	r2, r2, #127
	movw	r10, #65535
	strb	r2, [r5, #3]
.L835:
	cmp	r4, #8
	orreq	r3, r3, #1
	cmp	r3, #0
	bne	.L847
	cmp	r4, #42
	beq	.L839
.L840:
	mov	r3, #9216
	mvn	r0, #21
	movt	r3, 5
	str	r3, [r7, #28]
.L830:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L846:
	lsl	r2, r2, #6
	add	r6, r5, #4
	mov	r10, #255
	bic	r2, r2, #127
	strb	r2, [r5, #2]
	b	.L835
.L847:
	mov	r3, #10
	mov	r2, #8
	mov	r1, r3
	add	r0, r6, #2
	strb	r2, [r6]
	strb	r3, [r6, #1]
	bl	__memzero
	cmp	r9, #1
	beq	.L837
	mvn	r3, #0
	mov	r2, #4
	strb	r2, [r6, #2]
	strb	r3, [r6, #4]
	strb	r3, [r6, #5]
	str	r3, [r6, #8]	@ unaligned
.L837:
	add	r0, r6, #12
.L838:
	sub	r0, r0, r5
	cmp	r10, r0
	blt	.L840
	cmp	r8, #26
	subeq	r3, r0, #1
	strbeq	r3, [r5]
	beq	.L830
	sub	r3, r0, #2
	uxth	r3, r3
	lsr	r2, r3, #8
	strb	r2, [r5]
	strb	r3, [r5, #1]
	b	.L830
.L839:
	mov	r3, #26
	add	r0, r6, #2
	strb	r4, [r6]
	mov	r1, r3
	strb	r3, [r6, #1]
	bl	__memzero
	mov	r3, #2
	mov	r1, #4
	mov	r2, #40
	add	r0, r6, #28
	strb	r3, [r6, #2]
	strb	r3, [r6, #3]
	strb	r1, [r6, #4]
	strb	r2, [r6, #6]
	b	.L838
	.fnend
	.size	do_mode_sense, .-do_mode_sense
	.align	2
	.global	usb_rmnet_mux_ctrl_open
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_open, %function
usb_rmnet_mux_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r3, #2480]
	add	r6, r5, #368
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #356]
	mov	r1, r0
	cmp	r4, #0
	bne	.L852
	mov	r3, #1
	mov	r0, r6
	str	r3, [r5, #356]
	str	r5, [r7, #124]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
.L848:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L852:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	movw	r1, #:lower16:.LANCHOR3
	movw	r0, #:lower16:.LC34
	movt	r1, #:upper16:.LANCHOR3
	movt	r0, #:upper16:.LC34
	bl	printk
	mvn	r0, #15
	b	.L848
	.fnend
	.size	usb_rmnet_mux_ctrl_open, .-usb_rmnet_mux_ctrl_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_setup, %function
ecm_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	movw	r2, #17185
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r1, [r1]	@ unaligned
	.pad #20
	sub	sp, sp, #20
	ldr	r3, [r0, #20]
	ldrh	r6, [r4, #2]	@ unaligned
	ldrh	ip, [r4, #4]	@ unaligned
	cmp	r1, r2
	ldrh	lr, [r4, #6]	@ unaligned
	ldr	r7, [r3, #24]
	uxth	r8, r6
	ldrb	r3, [r4]	@ zero_extendqisi2
	bne	.L854
	cmp	lr, #0
	beq	.L865
.L854:
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #738
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	mvneq	r5, #94
	bne	.L866
.L853:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L865:
	ldrb	r9, [r0, #120]	@ zero_extendqisi2
	mov	r5, r0
	cmp	r9, ip
	bne	.L854
	movw	r10, #:lower16:.LANCHOR2
	movw	r3, #690
	ldr	fp, [r7, #4]
	movt	r10, #:upper16:.LANCHOR2
	ldrh	r3, [r10, r3]
	tst	r3, #4
	bne	.L867
.L856:
	movw	r3, #714
	strh	r6, [r5, #98]	@ movhi
	ldrh	r3, [r10, r3]
	tst	r3, #4
	bne	.L868
.L858:
	ldrb	r3, [fp, #26]	@ zero_extendqisi2
	mov	r2, #0
	mov	r1, fp
	str	r2, [fp, #4]
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [fp, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bge	.L853
	movw	r0, #:lower16:.LC35
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	str	r5, [sp]
	ldr	r1, .L869
	movt	r0, #:upper16:.LC35
	ldrb	r2, [r4]	@ zero_extendqisi2
	bl	printk
	b	.L853
.L866:
	ldr	r1, [r7]
	str	r8, [sp, #4]
	movw	r2, #:lower16:.LC17
	ldrb	r4, [r4, #1]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC17
	add	r0, r0, #720
	mvn	r5, #94
	add	r1, r1, #32
	str	r4, [sp]
	str	ip, [sp, #8]
	str	lr, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L853
.L867:
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC16
	mov	r3, r8
	movt	r2, #:upper16:.LC16
	add	r0, r10, #672
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L856
.L868:
	ldr	r1, [r7]
	mov	r0, #0
	movw	r2, #:lower16:.LC18
	ldrb	r3, [r4]	@ zero_extendqisi2
	str	r8, [sp, #4]
	movt	r2, #:upper16:.LC18
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	add	r1, r1, #32
	str	ip, [sp]
	str	r9, [sp, #8]
	str	r0, [sp, #12]
	ldr	r0, .L869+4
	bl	__dynamic_dev_dbg
	b	.L858
.L870:
	.align	2
.L869:
	.word	.LANCHOR3+24
	.word	.LANCHOR2+696
	.fnend
	.size	ecm_qc_setup, .-ecm_qc_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_response_complete, %function
rndis_qc_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r5, [r1, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r1, #44]
	ldr	r2, [r5, #20]
	cmp	r2, #0
	beq	.L872
	ldr	r7, [r2, #24]
	cmp	r7, #0
	beq	.L872
	cmn	r3, #104
	beq	.L875
	cmp	r3, #0
	mov	r6, r0
	mov	r4, r1
	bne	.L903
.L876:
	ldr	r3, [r5, #156]
	cmp	r3, r6
	beq	.L904
.L871:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L903:
	cmn	r3, #108
	beq	.L875
	ldr	r1, [r1, #4]
	movw	r0, #:lower16:.LC37
	ldr	ip, [r4, #48]
	movt	r0, #:upper16:.LC37
	ldr	r2, [r6, #4]
	str	ip, [sp]
	str	r1, [sp, #4]
	ldr	r1, .L905
	bl	printk
	b	.L876
.L875:
	mov	r3, #0
	str	r3, [r5, #164]
	b	.L871
.L904:
	add	r6, r5, #164
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L871
	ldr	r0, [r5, #156]
	mov	r1, r4
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L871
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	ip, #:lower16:.LANCHOR2
	movw	r2, #762
	movt	ip, #:upper16:.LANCHOR2
	ldrh	r2, [ip, r2]
	tst	r2, #4
	beq	.L871
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC14
	mov	r3, r0
	movt	r2, #:upper16:.LC14
	add	r0, ip, #744
	add	r1, r1, #32
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	__dynamic_dev_dbg
.L872:
	ldr	r2, .L905
	movw	r0, #:lower16:.LC36
	movt	r0, #:upper16:.LC36
	mov	r1, r2
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	printk
.L906:
	.align	2
.L905:
	.word	.LANCHOR3+40
	.fnend
	.size	rndis_qc_response_complete, .-rndis_qc_response_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_response_available, %function
rndis_qc_response_available:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #164
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r1, [r0, #160]
	ldr	ip, [r1]
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L907
	mov	r4, r0
	mov	r0, #0
	str	r3, [ip]
	mov	r2, #32
	str	r0, [ip, #4]
	ldr	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L915
.L907:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L915:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r1, r3, [r5]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC38
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC38
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, .L916
	b	printk
.L917:
	.align	2
.L916:
	.word	.LANCHOR3+68
	.fnend
	.size	rndis_qc_response_available, .-rndis_qc_response_available
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_buffer_alloc, %function
f_audio_buffer_alloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L921
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L923
.L919:
	mov	r0, r5
	movw	r1, #32800
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	beq	.L924
.L918:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L921:
	mov	r4, #16
	b	.L919
.L924:
	movw	r0, #:lower16:.LC40
	ldr	r1, .L925
	movt	r0, #:upper16:.LC40
	bl	printk
	mov	r0, r4
	mvn	r4, #11
	bl	kfree
	b	.L918
.L923:
	movw	r0, #:lower16:.LC39
	ldr	r1, .L925
	mvn	r4, #11
	movt	r0, #:upper16:.LC39
	bl	printk
	b	.L918
.L926:
	.align	2
.L925:
	.word	.LANCHOR3+96
	.fnend
	.size	f_audio_buffer_alloc, .-f_audio_buffer_alloc
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_release, %function
conn_gadget_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r0, #:lower16:.LC41
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC41
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	printk
	ldr	r0, [r4, #2484]
	add	r0, r0, #88
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	ldr	r0, [r4, #2484]
	mov	r3, r0
	ldr	ip, [r3, #136]!
	cmp	ip, r3
	bne	.L932
.L928:
	add	r0, r0, #88
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #2484]
	mov	r0, #0
	add	r2, r3, #116
	str	r0, [r3, #216]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	ip, r1, [r2]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L932:
	ldr	r6, [ip]
	sub	r3, ip, #36
	movw	r7, #:lower16:.LC42
	mov	r5, r3
	movt	r7, #:upper16:.LC42
	sub	r6, r6, #36
.L929:
	add	r0, r0, #88
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	bl	printk
	ldr	r3, [r4, #2484]
	mov	r1, r5
	mov	r5, r6
	ldr	r0, [r3, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r0, [r4, #2484]
	add	r0, r0, #88
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	ldr	r0, [r4, #2484]
	ldr	r3, [r6, #36]!
	add	r2, r0, #136
	cmp	r6, r2
	sub	r6, r3, #36
	beq	.L928
	b	.L929
	.fnend
	.size	conn_gadget_release, .-conn_gadget_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_setup, %function
ncm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r1]	@ unaligned
	movw	r1, #8586
	ldr	r3, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldrh	r8, [r4, #2]	@ unaligned
	ldrh	fp, [r4, #4]	@ unaligned
	rev16	r2, r2
	ldrh	r7, [r4, #6]	@ unaligned
	ldr	r6, [r3, #24]
	uxth	r2, r2
	uxth	r9, r8
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r2, r1
	ldr	r10, [r6, #4]
	beq	.L935
	bls	.L975
	movw	r1, #41349
	cmp	r2, r1
	beq	.L942
	bhi	.L943
	movw	r1, #41344
	cmp	r2, r1
	beq	.L944
	movw	r1, #41347
	cmp	r2, r1
	bne	.L934
	adds	r2, r9, #0
	movne	r2, #1
	cmp	r7, #1
	orrls	r2, r2, #1
	cmp	r2, #0
	beq	.L976
.L934:
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #906
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	mvneq	r5, #94
	bne	.L977
.L933:
	mov	r0, r5
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L975:
	movw	r1, #8580
	cmp	r2, r1
	beq	.L937
	bls	.L978
	movw	r1, #8582
	cmp	r2, r1
	beq	.L940
	movw	r1, #8584
	cmp	r2, r1
	bne	.L934
	cmp	r9, #0
	cmpeq	r7, #2
	bne	.L934
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, fp
	bne	.L934
	movw	r3, #:lower16:ncm_setdgram_complete
	mov	r8, #2
	str	r0, [r10, #32]
	movt	r3, #:upper16:ncm_setdgram_complete
	b	.L974
.L943:
	movw	r1, #41351
	cmp	r2, r1
	beq	.L946
	movw	r1, #41353
	cmp	r2, r1
	bne	.L934
	adds	r2, r9, #0
	movne	r2, #1
	cmp	r7, #1
	orrls	r2, r2, #1
	cmp	r2, #0
	bne	.L934
	ldrb	r1, [r0, #148]	@ zero_extendqisi2
	cmp	r1, fp
	bne	.L934
	movw	r3, #:lower16:.LANCHOR2
	ldrb	r1, [r0, #180]	@ zero_extendqisi2
	mov	r8, #2
	mov	r0, r3
	ldr	r3, [r10]
	movt	r0, #:upper16:.LANCHOR2
	str	r0, [sp, #20]
	strb	r1, [r3]
	strb	r2, [r3, #1]
	mov	r2, r0
	b	.L949
.L940:
	cmp	r9, #0
	cmpeq	r7, #4
	bne	.L934
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, fp
	bne	.L934
	movw	r3, #:lower16:ncm_ep0out_complete
	mov	r8, #4
	str	r0, [r10, #32]
	movt	r3, #:upper16:ncm_ep0out_complete
.L974:
	movw	r2, #:lower16:.LANCHOR2
	str	r8, [r10, #4]
	movt	r2, #:upper16:.LANCHOR2
	str	r3, [r10, #28]
	str	r2, [sp, #20]
	b	.L949
.L946:
	adds	r2, r9, #0
	movne	r2, #1
	cmp	r7, #1
	orrls	r2, r2, #1
	cmp	r2, #0
	bne	.L934
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, fp
	bne	.L934
	ldrh	r2, [r0, #182]
	movw	r1, #:lower16:.LANCHOR2
	movw	r0, #:lower16:.LC47
	ldr	r3, [r10]
	movt	r1, #:upper16:.LANCHOR2
	movt	r0, #:upper16:.LC47
	mov	r8, #2
	str	r1, [sp, #20]
	ldr	r1, .L983
	lsr	ip, r2, #8
	strb	r2, [r3]
	strb	ip, [r3, #1]
	ldrh	r2, [r5, #182]
	bl	printk
	ldr	r2, [sp, #20]
	b	.L949
.L944:
	adds	r2, r9, #0
	movne	r2, #1
	cmp	r7, #0
	moveq	r2, #1
	cmp	r2, #0
	bne	.L934
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, fp
	bne	.L934
	movw	r3, #:lower16:.LANCHOR2
	cmp	r7, #28
	ldr	r1, .L983+4
	movt	r3, #:upper16:.LANCHOR2
	movcc	r2, r7
	ldr	r0, [r10]
	movcs	r2, #28
	mov	r8, r2
	str	r3, [sp, #20]
	bl	memcpy
	ldr	r2, [sp, #20]
	b	.L949
.L978:
	movw	r1, #8515
	cmp	r2, r1
	bne	.L934
	cmp	r7, #0
	bne	.L934
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, fp
	bne	.L934
	movw	r3, #:lower16:.LANCHOR2
	mov	r2, r3
	movw	r3, #786
	movt	r2, #:upper16:.LANCHOR2
	ldrh	r3, [r2, r3]
	str	r2, [sp, #20]
	tst	r3, #4
	bne	.L979
.L948:
	strh	r8, [r5, #98]	@ movhi
	ldr	r2, [sp, #20]
	mov	r8, #0
	b	.L949
.L942:
	adds	r2, r9, #0
	movne	r2, #1
	cmp	r7, #3
	orrls	r2, r2, #1
	cmp	r2, #0
	bne	.L934
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, fp
	bne	.L934
	ldr	r3, [r0, #112]
	movw	r2, #:lower16:.LANCHOR2
	mov	r8, #4
	mov	r1, r2
	ldr	r2, [r10]
	movt	r1, #:upper16:.LANCHOR2
	str	r1, [sp, #20]
	lsr	r1, r3, #16
	strb	r3, [r2]
	ubfx	r3, r3, #8, #8
	lsr	r0, r1, #8
	strb	r3, [r2, #1]
	strb	r1, [r2, #2]
	strb	r0, [r2, #3]
	ldr	r2, [sp, #20]
	b	.L949
.L935:
	cmp	r7, #0
	bne	.L934
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, fp
	bne	.L934
	cmp	r9, #0
	beq	.L953
	cmp	r9, #1
	bne	.L934
	movw	r3, #:lower16:.LANCHOR2
	strb	r9, [r0, #180]
	mov	r2, r3
	movw	r3, #882
	movt	r2, #:upper16:.LANCHOR2
	ldrh	r3, [r2, r3]
	str	r2, [sp, #20]
	tst	r3, #4
	moveq	r1, #16777216
	bne	.L980
.L955:
	ldr	r2, [r5, #176]
	mov	r8, #0
	ldr	r3, [r2, #4]
	bic	r3, r3, #16777216
	str	r3, [r2, #4]
	ldr	r2, [r5, #176]
	ldr	r3, [r2, #4]
	orr	r3, r3, r1
	str	r3, [r2, #4]
	ldr	r2, [sp, #20]
	b	.L949
.L937:
	cmp	r7, #0
	bne	.L934
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, fp
	bne	.L934
	cmp	r9, #0
	beq	.L950
	cmp	r9, #1
	bne	.L934
	movw	r3, #:lower16:.LANCHOR2
	ldr	r2, .L983+8
	mov	r1, r3
	movw	r3, #834
	movt	r1, #:upper16:.LANCHOR2
	ldrh	r3, [r1, r3]
	str	r2, [r0, #176]
	str	r1, [sp, #20]
	tst	r3, #4
	bne	.L981
.L952:
	ldr	r2, [sp, #20]
	mov	r8, #0
.L949:
	movw	r3, #930
	ldrh	r3, [r2, r3]
	tst	r3, #4
	bne	.L982
.L957:
	ldrb	r3, [r10, #26]	@ zero_extendqisi2
	str	r8, [r10, #4]
	mov	r1, r10
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r10, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bge	.L933
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC49
	str	r5, [sp]
	movt	r1, #:upper16:.LC49
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	ldrb	r2, [r4]	@ zero_extendqisi2
	add	r0, r0, #32
	bl	dev_err
	b	.L933
.L977:
	ldr	r1, [r6]
	str	r9, [sp, #4]
	movw	r2, #:lower16:.LC17
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC17
	add	r0, r0, #888
	mvn	r5, #94
	add	r1, r1, #32
	str	ip, [sp]
	str	fp, [sp, #8]
	str	r7, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L933
.L976:
	ldrb	r1, [r0, #148]	@ zero_extendqisi2
	cmp	r1, fp
	bne	.L934
	ldr	r3, [r5, #176]
	movw	r1, #:lower16:.LANCHOR2
	mov	r8, #2
	ldr	r0, .L983+12
	movt	r1, #:upper16:.LANCHOR2
	str	r1, [sp, #20]
	ldr	r1, [r10]
	subs	r3, r3, r0
	movne	r3, #1
	strb	r3, [r1]
	strb	r2, [r1, #1]
	ldr	r2, [sp, #20]
	b	.L949
.L982:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC48
	ldrb	r3, [r4]	@ zero_extendqisi2
	str	r9, [sp, #4]
	movt	r2, #:upper16:.LC48
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	ldr	r0, .L983+16
	add	r1, r1, #32
	str	ip, [sp]
	str	fp, [sp, #8]
	str	r7, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L957
.L950:
	movw	r3, #:lower16:.LANCHOR2
	ldr	r2, .L983+12
	mov	r1, r3
	movw	r3, #810
	movt	r1, #:upper16:.LANCHOR2
	ldrh	r3, [r1, r3]
	str	r2, [r0, #176]
	str	r1, [sp, #20]
	tst	r3, #4
	beq	.L952
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC43
	mov	r8, r9
	ldr	r3, [sp, #20]
	movt	r2, #:upper16:.LC43
	add	r1, r1, #32
	add	r0, r3, #792
	bl	__dynamic_dev_dbg
	ldr	r2, [sp, #20]
	b	.L949
.L953:
	movw	r3, #:lower16:.LANCHOR2
	strb	r9, [r0, #180]
	mov	r2, r3
	movw	r3, #858
	movt	r2, #:upper16:.LANCHOR2
	ldrh	r3, [r2, r3]
	str	r2, [sp, #20]
	tst	r3, #4
	moveq	r1, r9
	beq	.L955
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC45
	ldr	r3, [sp, #20]
	movt	r2, #:upper16:.LC45
	add	r1, r1, #32
	add	r0, r3, #840
	bl	__dynamic_dev_dbg
	mov	r1, r9
	b	.L955
.L979:
	ldr	r1, [r6]
	mov	r0, r2
	movw	r2, #:lower16:.LC16
	mov	r3, r9
	movt	r2, #:upper16:.LC16
	add	r0, r0, #768
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L948
.L980:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC46
	ldr	r3, [sp, #20]
	movt	r2, #:upper16:.LC46
	add	r1, r1, #32
	add	r0, r3, #864
	bl	__dynamic_dev_dbg
	mov	r1, #16777216
	b	.L955
.L981:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC44
	mov	r8, r7
	ldr	r3, [sp, #20]
	movt	r2, #:upper16:.LC44
	add	r1, r1, #32
	add	r0, r3, #816
	bl	__dynamic_dev_dbg
	ldr	r2, [sp, #20]
	b	.L949
.L984:
	.align	2
.L983:
	.word	.LANCHOR3+120
	.word	.LANCHOR0+20
	.word	.LANCHOR0+92
	.word	.LANCHOR0+48
	.word	.LANCHOR2+912
	.fnend
	.size	ncm_setup, .-ncm_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_setdgram_complete, %function
ncm_setdgram_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR0
	str	r6, [sp, #8]
	mov	r5, #0
	str	lr, [sp, #12]
	ldr	r2, [r3, #24]
	ldr	r0, [r3, #36]
	ldr	ip, [r1, #32]
	str	r5, [r1, #32]
	ldr	lr, [r1, #44]
	cmp	r0, r2
	movcs	r0, r2
	cmp	lr, r5
	bne	.L986
	ldr	r2, [r1, #4]
	ldr	lr, [r1, #48]
	cmp	lr, r2
	bne	.L986
	ldr	r1, [r1]
	movw	lr, #7500
	ldrb	r5, [r1, #1]	@ zero_extendqisi2
	ldrb	r2, [r1]	@ zero_extendqisi2
	orr	r2, r2, r5, lsl #8
	sub	r1, r2, #1504
	sub	r1, r1, #10
	cmp	r1, lr
	bhi	.L996
	ldrh	r1, [r3, #44]
	add	r3, r1, #11
	rsb	r1, r1, #0
	and	r3, r3, r1
	add	r3, r3, #12
	add	r3, r3, r2
	cmp	r3, r0
	bhi	.L997
	ldr	r3, [ip, #184]
	strh	r2, [ip, #182]	@ movhi
	movw	r0, #:lower16:.LC54
	movt	r0, #:upper16:.LC54
	cmp	r3, #0
	subne	r1, r2, #14
	strne	r1, [r3, #356]
	ldr	r1, .L998
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L997:
	movw	r0, #:lower16:.LC52
	ldr	r1, .L998
	movt	r0, #:upper16:.LC52
	bl	printk
	movw	r0, #:lower16:.LC53
	movt	r0, #:upper16:.LC53
	bl	printk
.L988:
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #24]
	bx	r3
.L986:
	movw	r0, #:lower16:.LC50
	ldr	r1, .L998
	movt	r0, #:upper16:.LC50
	bl	printk
	b	.L988
.L996:
	movw	r0, #:lower16:.LC51
	ldr	r1, .L998
	movt	r0, #:upper16:.LC51
	bl	printk
	b	.L988
.L999:
	.align	2
.L998:
	.word	.LANCHOR3+132
	.fnend
	.size	ncm_setdgram_complete, .-ncm_setdgram_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_set_string, %function
acc_complete_set_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r1, #44]
	ldr	r0, [r0]
	ldr	r6, [r1, #48]
	cmp	r3, #0
	movwne	r0, #:lower16:.LC55
	movne	r1, r3
	movtne	r0, #:upper16:.LC55
	bne	.L1015
	ldr	r3, [r0, #1640]
	cmp	r3, #5
	ldrls	pc, [pc, r3, asl #2]
	b	.L1002
.L1004:
	.word	.L1003
	.word	.L1005
	.word	.L1006
	.word	.L1007
	.word	.L1008
	.word	.L1009
.L1009:
	add	r7, r0, #1376
	add	r7, r7, #5
.L1010:
	cmp	r7, #0
	beq	.L1002
	add	r4, r0, #88
	mov	r5, r1
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	cmp	r6, #255
	mov	r8, r0
	ldr	r1, [r5]
	movge	r6, #255
	mov	r0, r7
	mov	r2, r6
	bl	memcpy
	mov	r3, #0
	mov	r1, r8
	mov	r0, r4
	strb	r3, [r7, r6]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L1003:
	add	r7, r0, #101
	b	.L1010
.L1005:
	add	r7, r0, #356
	add	r7, r7, #1
	b	.L1010
.L1006:
	add	r7, r0, #612
	add	r7, r7, #1
	b	.L1010
.L1007:
	add	r7, r0, #868
	add	r7, r7, #1
	b	.L1010
.L1008:
	add	r7, r0, #1120
	add	r7, r7, #5
	b	.L1010
.L1002:
	movw	r0, #:lower16:.LC56
	mov	r1, r3
	movt	r0, #:upper16:.LC56
.L1015:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
	.fnend
	.size	acc_complete_set_string, .-acc_complete_set_string
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_release, %function
acc_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r0, #:lower16:.LC57
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC57
	str	lr, [sp, #4]
	bl	printk
	ldr	r3, [r4, #2488]
	add	r3, r3, #1648
	add	r3, r3, #4
	.syntax divided
@ 37 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r2, #0
	.syntax divided
@ 52 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@	__xchg4
1:	ldrex	r1, [r3]
	strex	r0, r2, [r3]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 98 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, r2
	beq	.L1019
.L1017:
	ldr	r3, [r4, #2488]
	mov	r0, #0
	ldrb	r2, [r3, #100]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #100]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1019:
	movw	r0, #:lower16:.LC58
	movw	r1, #799
	movt	r0, #:upper16:.LC58
	bl	warn_slowpath_null
	b	.L1017
	.fnend
	.size	acc_release, .-acc_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_open, %function
acc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC59
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	movt	r0, #:upper16:.LC59
	str	lr, [sp, #4]
	bl	printk
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r3, [r2, #2488]
	add	r3, r3, #1648
	add	r3, r3, #4
	.syntax divided
@ 37 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #1
	.syntax divided
@ 52 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@	__xchg4
1:	ldrex	ip, [r3]
	strex	r1, r0, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 98 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	ip, #0
	bne	.L1022
	ldr	r3, [r2, #2488]
	mov	r0, ip
	ldrb	r2, [r3, #100]	@ zero_extendqisi2
	bfi	r2, ip, #1, #1
	strb	r2, [r3, #100]
	str	r3, [r4, #124]
.L1020:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1022:
	mvn	r0, #15
	b	.L1020
	.fnend
	.size	acc_open, .-acc_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	sua_version_info_store, %function
sua_version_info_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	ldr	r6, [r0, #4]
	cmp	r4, #100
	mov	r1, r5
	movls	r2, r4
	movhi	r2, #100
	ldr	r0, [r6, #96]
	add	r0, r0, #235
	bl	memcpy
	ldr	ip, [r6, #96]
	movw	r0, #:lower16:.LC60
	mov	r2, r5
	ldr	r1, .L1028
	mov	r3, #4
	movt	r0, #:upper16:.LC60
	add	ip, ip, #235
	str	ip, [sp]
	bl	printk
	mov	r0, r4
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1029:
	.align	2
.L1028:
	.word	.LANCHOR3+156
	.fnend
	.size	sua_version_info_store, .-sua_version_info_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_release_dev, %function
rndis_qc_release_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC61
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r1, .L1035
	movw	r4, #:lower16:.LANCHOR1
	movt	r0, #:upper16:.LC61
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	movt	r4, #:upper16:.LANCHOR1
	bl	printk
	ldr	r0, .L1035+4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #2496]
	mov	r5, r0
	cmp	r3, #0
	beq	.L1034
	add	r2, r3, #152
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, .L1035+4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
.L1030:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1034:
	movw	r0, #:lower16:.LC62
	ldr	r1, .L1035
	movt	r0, #:upper16:.LC62
	bl	printk
	ldr	r0, .L1035+4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #18
	b	.L1030
.L1036:
	.align	2
.L1035:
	.word	.LANCHOR3+180
	.word	.LANCHOR1+2492
	.fnend
	.size	rndis_qc_release_dev, .-rndis_qc_release_dev
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_open_dev, %function
rndis_qc_open_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC63
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	str	r6, [sp, #8]
	movt	r0, #:upper16:.LC63
	mov	r6, r1
	ldr	r1, .L1043
	str	lr, [sp, #12]
	movt	r4, #:upper16:.LANCHOR1
	bl	printk
	ldr	r0, .L1043+4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #2496]
	mov	r5, r0
	cmp	r3, #0
	beq	.L1042
	add	r2, r3, #152
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #1
	bne	.L1040
	ldr	r3, [r4, #2496]
	mov	r1, r5
	ldr	r0, .L1043+4
	str	r3, [r6, #124]
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC65
	ldr	r1, .L1043
	movt	r0, #:upper16:.LC65
	bl	printk
	mov	r0, #0
.L1037:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1042:
	movw	r0, #:lower16:.LC64
	ldr	r1, .L1043
	movt	r0, #:upper16:.LC64
	bl	printk
	ldr	r0, .L1043+4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #18
	b	.L1037
.L1040:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC66
	ldr	r1, .L1043
	movt	r0, #:upper16:.LC66
	bl	printk
	ldr	r0, .L1043+4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #15
	b	.L1037
.L1044:
	.align	2
.L1043:
	.word	.LANCHOR3+204
	.word	.LANCHOR1+2492
	.fnend
	.size	rndis_qc_open_dev, .-rndis_qc_open_dev
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_release, %function
mtp_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC67
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r0, #:upper16:.LC67
	str	lr, [sp, #4]
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2500]
	add	r2, r3, #108
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
	.fnend
	.size	mtp_release, .-mtp_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_open, %function
mtp_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC68
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	movt	r0, #:upper16:.LC68
	str	lr, [sp, #4]
	bl	printk
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r3, [r2, #2500]
	add	r0, r3, #108
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	ip, [r0]
	add	ip, ip, #1
	strex	r1, ip, [r0]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	ip, #1
	bne	.L1048
	ldr	r3, [r2, #2500]
	mov	r0, #0
	ldr	r2, [r3, #104]
	cmp	r2, #0
	strne	ip, [r3, #104]
	str	r3, [r4, #124]
.L1047:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1048:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r0]
	sub	r2, r2, #1
	strex	r1, r2, [r0]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #15
	b	.L1047
	.fnend
	.size	mtp_open, .-mtp_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_notify_complete, %function
ccid_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r1, [r1, #44]
	cmn	r1, #104
	beq	.L1053
	cmp	r1, #0
	beq	.L1053
	cmn	r1, #108
	beq	.L1053
	movw	r0, #:lower16:.LC69
	movt	r0, #:upper16:.LC69
	b	printk
.L1053:
	bx	lr
	.fnend
	.size	ccid_notify_complete, .-ccid_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_release, %function
mbim_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC70
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r1, .L1067
	movt	r0, #:upper16:.LC70
	str	lr, [sp, #4]
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2504]
	add	r2, r3, #92
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
.L1068:
	.align	2
.L1067:
	.word	.LANCHOR3+224
	.fnend
	.size	mbim_release, .-mbim_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_open, %function
mbim_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r0, #:lower16:.LC71
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r1
	movt	r0, #:upper16:.LC71
	ldr	r1, .L1078
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	printk
	ldr	r3, [r4, #2504]
	cmp	r3, #0
	beq	.L1076
	add	r2, r3, #92
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #1
	bne	.L1072
	movw	r0, #:lower16:.LC73
	ldr	r1, .L1078
	movt	r0, #:upper16:.LC73
	bl	printk
	ldr	r3, [r4, #2504]
	ldr	r2, [r3, #88]
	cmp	r2, #0
	beq	.L1077
.L1074:
	mov	r4, #0
	movw	r0, #:lower16:.LC75
	str	r3, [r5, #124]
	movt	r0, #:upper16:.LC75
	ldr	r1, .L1078
	str	r4, [r3, #232]
	bl	printk
	mov	r0, r4
.L1069:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1072:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC66
	ldr	r1, .L1078
	movt	r0, #:upper16:.LC66
	bl	printk
	mvn	r0, #15
	b	.L1069
.L1076:
	movw	r0, #:lower16:.LC72
	ldr	r1, .L1078
	movt	r0, #:upper16:.LC72
	bl	printk
	mvn	r0, #18
	b	.L1069
.L1077:
	movw	r0, #:lower16:.LC74
	ldr	r1, .L1078
	movt	r0, #:upper16:.LC74
	bl	printk
	ldr	r3, [r4, #2504]
	b	.L1074
.L1079:
	.align	2
.L1078:
	.word	.LANCHOR3+240
	.fnend
	.size	mbim_open, .-mbim_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_open_work, %function
gsdio_open_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r2, r0
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	r1, .L1082
	ldr	ip, [r2, #-4]
	.pad #12
	sub	sp, sp, #12
	movw	r0, #:lower16:.LC76
	ldr	r3, [r2, #-124]!
	movt	r0, #:upper16:.LC76
	ldr	ip, [ip]
	str	ip, [sp]
	bl	printk
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L1083:
	.align	2
.L1082:
	.word	.LANCHOR3+252
	.fnend
	.size	gsdio_open_work, .-gsdio_open_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	remote_wakeup_show, %function
remote_wakeup_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #516]
	cmp	r3, #0
	moveq	r0, r3
	beq	.L1084
	ldr	r3, [r0, #508]
	movw	r2, #:lower16:.LC77
	mov	r1, #4096
	movt	r2, #:upper16:.LC77
	mov	r0, r4
	ldrb	r3, [r3, #-98]	@ zero_extendqisi2
	ubfx	r3, r3, #5, #1
	bl	snprintf
	mov	r0, #2
.L1084:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	remote_wakeup_show, .-remote_wakeup_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	state_show, %function
state_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	ldr	r4, [r0, #8]
	cmp	r4, #0
	movweq	r4, #:lower16:.LC79
	movteq	r4, #:upper16:.LC79
	beq	.L1089
	add	r7, r4, #60
	mov	r5, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r1, r0
	cmp	r3, #0
	movwne	r4, #:lower16:.LC78
	movtne	r4, #:upper16:.LC78
	beq	.L1095
.L1090:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L1089:
	movw	r0, #:lower16:.LC81
	mov	r2, r4
	ldr	r1, .L1096
	movt	r0, #:upper16:.LC81
	bl	printk
	movw	r2, #:lower16:.LC82
	mov	r3, r4
	ldrd	r4, [sp]
	mov	r0, r6
	movt	r2, #:upper16:.LC82
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	mov	r1, #4096
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	snprintf
.L1095:
	ldrb	r2, [r5, #48]	@ zero_extendqisi2
	movw	r3, #:lower16:.LC80
	movw	r4, #:lower16:.LC79
	movt	r3, #:upper16:.LC80
	movt	r4, #:upper16:.LC79
	cmp	r2, #0
	movne	r4, r3
	b	.L1090
.L1097:
	.align	2
.L1096:
	.word	.LANCHOR3+268
	.fnend
	.size	state_show, .-state_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	pm_qos_show, %function
pm_qos_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	movw	r2, #:lower16:.LC82
	add	r3, r0, #52
	ldr	lr, [sp, #4]
	mov	r0, r4
	movt	r2, #:upper16:.LC82
	ldr	r4, [sp]
	mov	r1, #4096
	add	sp, sp, #8
	b	snprintf
	.fnend
	.size	pm_qos_show, .-pm_qos_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	enable_show, %function
enable_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	mov	r4, r0
	movw	r0, #:lower16:.LC83
	ldr	r1, .L1102
	ldrb	r2, [r4, #16]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC83
	bl	printk
	movw	r2, #:lower16:.LC77
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	mov	r0, r5
	movt	r2, #:upper16:.LC77
	mov	r1, #4096
	bl	snprintf
	ldrd	r4, [sp]
	mov	r0, #2
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1103:
	.align	2
.L1102:
	.word	.LANCHOR3+280
	.fnend
	.size	enable_show, .-enable_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iSerial_show, %function
iSerial_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC84
	ldr	r3, .L1105
	movt	r2, #:upper16:.LC84
	mov	r1, #4096
	b	snprintf
.L1106:
	.align	2
.L1105:
	.word	.LANCHOR1+2220
	.fnend
	.size	iSerial_show, .-iSerial_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iProduct_show, %function
iProduct_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC84
	ldr	r3, .L1108
	movt	r2, #:upper16:.LC84
	mov	r1, #4096
	b	snprintf
.L1109:
	.align	2
.L1108:
	.word	.LANCHOR1+2508
	.fnend
	.size	iProduct_show, .-iProduct_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iManufacturer_show, %function
iManufacturer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC84
	ldr	r3, .L1111
	movt	r2, #:upper16:.LC84
	mov	r1, #4096
	b	snprintf
.L1112:
	.align	2
.L1111:
	.word	.LANCHOR1+2764
	.fnend
	.size	iManufacturer_show, .-iManufacturer_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceProtocol_show, %function
bDeviceProtocol_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC77
	ldrb	r3, [r3, #142]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC77
	mov	r1, #4096
	b	snprintf
	.fnend
	.size	bDeviceProtocol_show, .-bDeviceProtocol_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceSubClass_show, %function
bDeviceSubClass_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC77
	ldrb	r3, [r3, #141]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC77
	mov	r1, #4096
	b	snprintf
	.fnend
	.size	bDeviceSubClass_show, .-bDeviceSubClass_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceClass_show, %function
bDeviceClass_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC77
	ldrb	r3, [r3, #140]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC77
	mov	r1, #4096
	b	snprintf
	.fnend
	.size	bDeviceClass_show, .-bDeviceClass_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bcdDevice_show, %function
bcdDevice_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC85
	str	lr, [sp, #4]
	movt	r2, #:upper16:.LC85
	mov	r1, #4096
	ldrh	r3, [r3, #148]
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
	.fnend
	.size	bcdDevice_show, .-bcdDevice_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	idProduct_show, %function
idProduct_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC85
	str	lr, [sp, #4]
	movt	r2, #:upper16:.LC85
	mov	r1, #4096
	ldrh	r3, [r3, #146]
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
	.fnend
	.size	idProduct_show, .-idProduct_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	idVendor_show, %function
idVendor_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC85
	str	lr, [sp, #4]
	movt	r2, #:upper16:.LC85
	mov	r1, #4096
	ldrh	r3, [r3, #144]
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
	.fnend
	.size	idVendor_show, .-idVendor_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_pcm_show, %function
audio_source_pcm_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	ldr	ip, [r0, #4]
	movw	r2, #:lower16:.LC86
	mov	r1, #4096
	movt	r2, #:upper16:.LC86
	mov	r0, r4
	ldm	ip, {r3, ip}
	str	ip, [sp]
	bl	snprintf
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	audio_source_pcm_show, .-audio_source_pcm_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_inquiry_show, %function
mass_storage_inquiry_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC82
	mov	r0, r4
	movt	r2, #:upper16:.LC82
	ldr	r4, [sp]
	mov	r1, #4096
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r3, #96]
	add	r3, r3, #180
	b	snprintf
	.fnend
	.size	mass_storage_inquiry_show, .-mass_storage_inquiry_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_ethaddr_show, %function
ecm_ethaddr_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #24
	sub	sp, sp, #24
	bl	dev_get_drvdata
	ldr	ip, [r0, #4]
	movw	r2, #:lower16:.LC87
	mov	r1, #4096
	movt	r2, #:upper16:.LC87
	mov	r0, r4
	ldrb	lr, [ip, #5]	@ zero_extendqisi2
	ldrb	r3, [ip]	@ zero_extendqisi2
	str	lr, [sp, #16]
	ldrb	lr, [ip, #4]	@ zero_extendqisi2
	str	lr, [sp, #12]
	ldrb	lr, [ip, #3]	@ zero_extendqisi2
	str	lr, [sp, #8]
	ldrb	lr, [ip, #2]	@ zero_extendqisi2
	str	lr, [sp, #4]
	ldrb	ip, [ip, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	snprintf
	mov	r0, #18
	add	sp, sp, #24
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_ethaddr_show, .-ecm_ethaddr_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_transports_show, %function
ecm_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC82
	ldr	r3, .L1129
	movt	r2, #:upper16:.LC82
	mov	r1, #4096
	b	snprintf
.L1130:
	.align	2
.L1129:
	.word	.LANCHOR1+3020
	.fnend
	.size	ecm_transports_show, .-ecm_transports_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_max_pkt_per_xfer_show, %function
rndis_max_pkt_per_xfer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC77
	mov	r0, r4
	movt	r2, #:upper16:.LC77
	ldr	r4, [sp]
	mov	r1, #4096
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldrb	r3, [r3, #12]	@ zero_extendqisi2
	b	snprintf
	.fnend
	.size	rndis_max_pkt_per_xfer_show, .-rndis_max_pkt_per_xfer_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_vendorID_show, %function
rndis_vendorID_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC85
	mov	r0, r4
	movt	r2, #:upper16:.LC85
	ldr	r4, [sp]
	mov	r1, #4096
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r3, #8]
	b	snprintf
	.fnend
	.size	rndis_vendorID_show, .-rndis_vendorID_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_ethaddr_show, %function
rndis_ethaddr_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #24
	sub	sp, sp, #24
	bl	dev_get_drvdata
	ldr	ip, [r0, #4]
	movw	r2, #:lower16:.LC87
	mov	r1, #4096
	movt	r2, #:upper16:.LC87
	mov	r0, r4
	ldrb	lr, [ip, #5]	@ zero_extendqisi2
	ldrb	r3, [ip]	@ zero_extendqisi2
	str	lr, [sp, #16]
	ldrb	lr, [ip, #4]	@ zero_extendqisi2
	str	lr, [sp, #12]
	ldrb	lr, [ip, #3]	@ zero_extendqisi2
	str	lr, [sp, #8]
	ldrb	lr, [ip, #2]	@ zero_extendqisi2
	str	lr, [sp, #4]
	ldrb	ip, [ip, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	snprintf
	mov	r0, #18
	add	sp, sp, #24
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_ethaddr_show, .-rndis_ethaddr_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_wceis_show, %function
rndis_wceis_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC77
	mov	r0, r4
	movt	r2, #:upper16:.LC77
	mov	r1, #4096
	ldrb	r3, [r3, #269]	@ zero_extendqisi2
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_wceis_show, .-rndis_wceis_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_manufacturer_show, %function
rndis_manufacturer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC82
	mov	r0, r4
	movt	r2, #:upper16:.LC82
	ldr	r4, [sp]
	mov	r1, #4096
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	add	r3, r3, #13
	b	snprintf
	.fnend
	.size	rndis_manufacturer_show, .-rndis_manufacturer_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_xport_names_show, %function
rmnet_xport_names_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC82
	ldr	r3, .L1142
	movt	r2, #:upper16:.LC82
	mov	r1, #4096
	b	snprintf
.L1143:
	.align	2
.L1142:
	.word	.LANCHOR1+3072
	.fnend
	.size	rmnet_xport_names_show, .-rmnet_xport_names_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_transports_show, %function
rmnet_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC82
	ldr	r3, .L1145
	movt	r2, #:upper16:.LC82
	mov	r1, #4096
	b	snprintf
.L1146:
	.align	2
.L1145:
	.word	.LANCHOR1+3124
	.fnend
	.size	rmnet_transports_show, .-rmnet_transports_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_transports_show, %function
mbim_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC82
	ldr	r3, .L1148
	movt	r2, #:upper16:.LC82
	mov	r1, #4096
	b	snprintf
.L1149:
	.align	2
.L1148:
	.word	.LANCHOR1+3176
	.fnend
	.size	mbim_transports_show, .-mbim_transports_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	start_out_transfer, %function
start_out_transfer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #8]
	cmp	r4, #0
	beq	.L1151
	ldr	r0, [r4, #88]
	mov	r5, r1
	ldr	r6, [r4, #104]
	ldr	r7, [r1, #24]
	add	r0, r0, #44
	bl	_raw_spin_lock_irq
	mov	r3, #1
	mov	r2, #2
	str	r2, [r5, #4]
	str	r3, [r5, #28]
	ldr	r0, [r4, #88]
	add	r0, r0, #44
	bl	_raw_spin_unlock_irq
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	mov	r2, #208
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L1163
	mov	r2, #0
	cmn	r3, #108
	str	r2, [r5, #4]
	str	r2, [r5, #28]
	beq	.L1163
	cmn	r3, #95
	bne	.L1155
	ldr	r2, [r7, #4]
	cmp	r2, #0
	beq	.L1163
.L1155:
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC90
	movt	r1, #:upper16:.LC90
	ldr	r2, [r6, #4]
	add	r0, r0, #32
	bl	dev_warn
.L1163:
	mov	r0, #1
.L1153:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1151:
	ldr	r0, [r0]
	movw	r1, #:lower16:.LC88
	movw	r3, #805
	movt	r1, #:upper16:.LC88
	ldr	r2, .L1164
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC89
	movw	r1, #550
	movt	r0, #:upper16:.LC89
	bl	warn_slowpath_null
	mov	r0, r4
	b	.L1153
.L1165:
	.align	2
.L1164:
	.word	.LANCHOR3+292
	.fnend
	.size	start_out_transfer, .-start_out_transfer
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	override_id, %function
override_id:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	mov	r4, r1
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L1167
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bls	.L1168
	ldr	r0, [r0]
	movw	r1, #:lower16:.LC91
	movt	r1, #:upper16:.LC91
	add	r0, r0, #32
	bl	dev_warn
	b	.L1167
.L1168:
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r0, #48]
	strb	r3, [r1]
.L1167:
	ldrb	r0, [r4]	@ zero_extendqisi2
	pop	{r4, pc}
	.fnend
	.size	override_id, .-override_id
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_response_complete, %function
rmnet_sdio_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	cmn	r3, #104
	bxeq	lr
	cmp	r3, #0
	bxeq	lr
	cmn	r3, #108
	bxeq	lr
	mov	ip, r1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC92
	str	lr, [sp, #4]
	ldr	r2, [r0, #4]
	.pad #8
	sub	sp, sp, #8
	ldr	r4, [ip, #32]
	movt	r1, #:upper16:.LC92
	ldr	lr, [ip, #4]
	ldr	ip, [ip, #48]
	ldr	r0, [r4, #84]
	ldr	r0, [r0]
	stm	sp, {ip, lr}
	add	r0, r0, #32
	bl	_dev_info
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_sdio_response_complete, .-rmnet_sdio_response_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_response_complete, %function
rmnet_mux_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	cmn	r3, #104
	bxeq	lr
	cmp	r3, #0
	bxeq	lr
	cmn	r3, #108
	bxeq	lr
	mov	ip, r1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC93
	str	lr, [sp, #4]
	ldr	r2, [r0, #4]
	.pad #8
	sub	sp, sp, #8
	ldr	r4, [ip, #32]
	movt	r1, #:upper16:.LC93
	ldr	lr, [ip, #4]
	ldr	ip, [ip, #48]
	ldr	r0, [r4, #84]
	ldr	r0, [r0]
	stm	sp, {ip, lr}
	add	r0, r0, #32
	bl	_dev_info
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_mux_response_complete, .-rmnet_mux_response_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_show_suspended, %function
composite_show_suspended:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldrb	r2, [r0, #16]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC77
	mov	r0, r4
	movt	r1, #:upper16:.LC77
	and	r2, r2, #1
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	composite_show_suspended, .-composite_show_suspended
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb30en_show, %function
usb30en_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movw	r1, #:lower16:.LC94
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, r2
	movt	r1, #:upper16:.LC94
	ldrb	r2, [r3, #3226]	@ zero_extendqisi2
	b	sprintf
	.fnend
	.size	usb30en_show, .-usb30en_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_show_ro, %function
fsg_show_ro:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r3, r0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	ldr	r2, [r3, #-48]
	movw	r1, #:lower16:.LC77
	movt	r1, #:upper16:.LC77
	cmp	r2, #0
	ldrb	r2, [r3, #-24]	@ zero_extendqisi2
	ubfxne	r2, r2, #1, #1
	andeq	r2, r2, #1
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	fsg_show_ro, .-fsg_show_ro
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_show_nofua, %function
fsg_show_nofua:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC95
	str	lr, [sp, #4]
	ldrb	r3, [r0, #-24]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC95
	mov	r0, r2
	lsr	r2, r3, #7
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	fsg_show_nofua, .-fsg_show_nofua
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_show_cdrom, %function
fsg_show_cdrom:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC77
	str	lr, [sp, #4]
	ldrb	r3, [r0, #-24]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC77
	mov	r0, r2
	ubfx	r2, r3, #3, #1
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	fsg_show_cdrom, .-fsg_show_cdrom
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	check_command, %function
check_command:
	.fnstart
	@ args = 8, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	mov	r5, r1
	strd	r6, [sp, #8]
	movw	r6, #:lower16:__stack_chk_guard
	mov	r7, r3
	strd	r8, [sp, #16]
	movt	r6, #:upper16:__stack_chk_guard
	mov	r9, r2
	str	r10, [sp, #24]
	ldr	ip, [r6]
	str	lr, [sp, #28]
	ldrb	r8, [r0, #77]	@ zero_extendqisi2
	mov	lr, #0
	ldr	r0, [r0, #120]
	.pad #32
	sub	sp, sp, #32
	ldr	r3, [r4, #124]
	ldr	r10, [sp, #68]
	strb	lr, [sp, #8]
	lsr	r8, r8, #5
	str	ip, [sp, #28]
	cmp	r0, lr
	bne	.L1265
.L1214:
	ldr	r2, [r4, #128]
	cmp	r2, #0
	beq	.L1215
	cmp	r2, r3
	bls	.L1216
	ldrb	r2, [r4, #144]	@ zero_extendqisi2
	cmp	r9, r0
	str	r3, [r4, #128]
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	orr	r2, r2, #4
	strb	r2, [r4, #144]
	beq	.L1217
	cmp	r3, #0
	bne	.L1220
.L1217:
	ldr	r3, [r4, #72]
	cmp	r3, r5
	beq	.L1219
	blt	.L1220
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #954
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	bne	.L1266
.L1221:
	mov	r5, r3
.L1219:
	ldr	r3, [r4, #96]
	cmp	r3, r8
	beq	.L1222
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #978
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	bne	.L1267
.L1222:
	ldr	r1, [r4, #104]
	ldrb	r3, [r4, #76]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L1223
	cmp	r3, #3
	beq	.L1224
	ldrb	r2, [r1, #24]	@ zero_extendqisi2
	mov	r3, #0
	ldr	r0, [r1, #36]
	str	r3, [r1, #28]
	str	r3, [r1, #32]
	bfi	r2, r3, #6, #1
	cmp	r0, r3
	strb	r2, [r1, #24]
	beq	.L1224
	ldrb	r2, [r4, #76]	@ zero_extendqisi2
	cmp	r2, #18
	cmpne	r2, #3
	strne	r0, [r1, #28]
	mvnne	r0, #21
	strne	r3, [r1, #36]
	bne	.L1213
.L1224:
	ldrb	r3, [r4, #77]	@ zero_extendqisi2
	cmp	r5, #1
	and	r3, r3, #31
	strb	r3, [r4, #77]
	ble	.L1231
.L1233:
	mov	r3, #1
	add	r4, r4, #76
	mov	r0, r3
.L1230:
	ldrb	r2, [r4, #1]!	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L1228
	ands	r2, r7, r0, lsl r3
	beq	.L1268
.L1228:
	add	r3, r3, #1
	cmp	r5, r3
	bgt	.L1230
	cmp	r1, #0
	beq	.L1232
.L1231:
	ldr	r3, [r1]
	ldr	r2, [sp, #64]
	cmp	r3, #0
	movne	r3, #0
	andeq	r3, r2, #1
	cmp	r3, #0
	movne	r3, #14848
	mvnne	r0, #21
	movtne	r3, 2
	strne	r3, [r1, #28]
	bne	.L1213
.L1232:
	mov	r0, #0
.L1213:
	ldr	r2, [sp, #28]
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L1269
	add	sp, sp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1215:
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	b	.L1217
.L1265:
	movw	r2, #:lower16:.LANCHOR3
	movw	r1, #:lower16:.LC96
	movt	r2, #:upper16:.LANCHOR3
	movt	r1, #:upper16:.LC96
	add	r0, r2, r0
	ldrb	r2, [r0, #312]	@ zero_extendqisi2
	add	r0, sp, #8
	bl	sprintf
	ldr	r0, [r4, #120]
	ldr	r3, [r4, #124]
	b	.L1214
.L1223:
	ldrb	r2, [r4, #144]	@ zero_extendqisi2
	cmp	r3, #18
	cmpne	r3, #3
	bfi	r2, r1, #4, #1
	strb	r2, [r4, #144]
	beq	.L1226
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #1002
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L1227
.L1264:
	mvn	r0, #21
	b	.L1213
.L1268:
	cmp	r1, #0
	beq	.L1264
	mov	r3, #9216
	mvn	r0, #21
	movt	r3, 5
	str	r3, [r1, #28]
	b	.L1213
.L1226:
	ldrb	r3, [r4, #77]	@ zero_extendqisi2
	cmp	r5, #1
	and	r3, r3, #31
	strb	r3, [r4, #77]
	bgt	.L1233
	b	.L1232
.L1267:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC98
	str	r8, [sp]
	movt	r2, #:upper16:.LC98
	add	r0, r0, #960
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L1222
.L1266:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC97
	add	r0, r0, #936
	str	r5, [sp]
	movt	r2, #:upper16:.LC97
	str	r3, [sp, #4]
	mov	r3, r10
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #72]
	b	.L1221
.L1216:
	cmp	r9, r0
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	beq	.L1217
.L1220:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	mvn	r0, #21
	orr	r3, r3, #4
	strb	r3, [r4, #144]
	b	.L1213
.L1227:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC99
	add	r0, r0, #984
	movt	r2, #:upper16:.LC99
	ldr	r3, [r4, #96]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L1264
.L1269:
	bl	__stack_chk_fail
	.fnend
	.size	check_command, .-check_command
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	sua_version_info_show, %function
sua_version_info_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r1, #:lower16:.LC100
	mov	r0, r4
	movt	r1, #:upper16:.LC100
	ldr	r2, [r3, #96]
	add	r2, r2, #235
	bl	sprintf
	mov	r5, r0
	movw	r0, #:lower16:.LC101
	ldr	r1, .L1272
	mov	r2, r4
	movt	r0, #:upper16:.LC101
	bl	printk
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1273:
	.align	2
.L1272:
	.word	.LANCHOR3+316
	.fnend
	.size	sua_version_info_show, .-sua_version_info_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_product_show, %function
mass_storage_product_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r1, #:lower16:.LC82
	mov	r0, r4
	movt	r1, #:upper16:.LC82
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r2, [r3, #96]
	add	r2, r2, #218
	b	sprintf
	.fnend
	.size	mass_storage_product_show, .-mass_storage_product_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_vendor_show, %function
mass_storage_vendor_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r1, #:lower16:.LC82
	mov	r0, r4
	movt	r1, #:upper16:.LC82
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r2, [r3, #96]
	add	r2, r2, #209
	b	sprintf
	.fnend
	.size	mass_storage_vendor_show, .-mass_storage_vendor_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_instances_show, %function
acm_instances_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r1, #:lower16:.LC77
	mov	r0, r4
	movt	r1, #:upper16:.LC77
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r2, [r3]
	b	sprintf
	.fnend
	.size	acm_instances_show, .-acm_instances_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_alsa_show, %function
midi_alsa_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r1, #:lower16:.LC86
	mov	r0, r4
	movt	r1, #:upper16:.LC86
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldrd	r2, [r3]
	b	sprintf
	.fnend
	.size	midi_alsa_show, .-midi_alsa_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_unbind, %function
composite_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	add	r7, r0, #32
	str	r8, [sp, #16]
	mov	r8, r0
	mov	r0, r7
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	ldr	r3, [r0, #12]
	mov	r4, r0
	cmp	r3, #0
	bne	.L1299
.L1283:
	ldr	r0, [r4, #36]
	add	r6, r4, #36
	cmp	r6, r0
	beq	.L1284
.L1285:
	sub	r5, r0, #28
	bl	list_del
	mov	r1, r5
	mov	r0, r4
	bl	unbind_config
	ldr	r0, [r4, #36]
	cmp	r6, r0
	bne	.L1285
.L1284:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r3, [r5, #2476]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L1286
	mov	r0, r4
	blx	r3
.L1286:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L1287
	ldr	r0, [r3]
	bl	kfree
	ldr	r0, [r8, #4]
	ldr	r1, [r4, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L1287:
	ldr	r1, .L1300
	mov	r0, r7
	bl	device_remove_file
	mov	r0, r4
	bl	kfree
	mov	r0, r7
	mov	r1, #0
	bl	dev_set_drvdata
	mov	r3, #0
	str	r3, [r5, #2476]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1299:
	movw	r0, #:lower16:.LC102
	movw	r1, #1556
	movt	r0, #:upper16:.LC102
	bl	warn_slowpath_null
	b	.L1283
.L1301:
	.align	2
.L1300:
	.word	.LANCHOR0+156
	.fnend
	.size	composite_unbind, .-composite_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_bind, %function
composite_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	movw	r6, #:lower16:kmalloc_caches
	movt	r6, #:upper16:kmalloc_caches
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r6, #28]
	.pad #8
	sub	sp, sp, #8
	cmp	r0, #0
	beq	.L1319
	mov	r2, #68
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L1348
.L1303:
	mov	r3, #0
	add	r7, r5, #32
	str	r5, [r4]
	mov	r1, r4
	mov	r0, r7
	str	r3, [r4, #60]
	bl	dev_set_drvdata
	add	r3, r4, #36
	mov	r1, #208
	str	r3, [r4, #36]
	str	r3, [r4, #40]
	ldr	r0, [r5, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	mov	r8, r0
	str	r0, [r4, #4]
	beq	.L1305
	ldr	r0, [r6, #48]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L1306
	mov	r2, #4096
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L1306:
	str	r0, [r8]
	ldr	r2, [r4, #4]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L1305
	movw	r3, #:lower16:composite_setup_complete
	movw	r6, #:lower16:.LANCHOR1
	movt	r3, #:upper16:composite_setup_complete
	movt	r6, #:upper16:.LANCHOR1
	ldr	r0, [r6, #2476]
	str	r3, [r2, #28]
	ldr	r2, [r5, #4]
	mov	r3, #4096
	str	r4, [r2]
	ldr	r1, [r4]
	str	r3, [r4, #8]
	str	r0, [r4, #44]
	ldr	r3, [r1, #8]!
	cmp	r1, r3
	sub	r3, r3, #12
	beq	.L1307
	mov	r0, #0
.L1308:
	ldr	r2, [r3, #12]
	str	r0, [r3]
	cmp	r1, r2
	sub	r3, r2, #12
	bne	.L1308
.L1307:
	mov	r2, #0
	mov	r0, r4
	ldr	r3, [r6, #3232]
	str	r2, [r6, #3228]
	blx	r3
	subs	r8, r0, #0
	bge	.L1349
.L1309:
	mov	r0, r5
	bl	composite_unbind
.L1302:
	mov	r0, r8
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1305:
	mvn	r8, #11
	b	.L1309
.L1319:
	mov	r4, #16
	b	.L1303
.L1348:
	mvn	r8, #11
	b	.L1302
.L1349:
	ldr	r1, [r6, #2476]
	movw	r3, #3236
	ldrh	r2, [r6, r3]
	movw	r3, #3238
	ldrh	r3, [r6, r3]
	ldr	r1, [r1, #12]
	cmp	r2, #0
	ldr	lr, [r1, #4]	@ unaligned
	ldr	ip, [r1, #8]	@ unaligned
	ldr	r0, [r1, #12]	@ unaligned
	ldr	r8, [r1]	@ unaligned
	str	r8, [r4, #17]	@ unaligned
	str	lr, [r4, #21]	@ unaligned
	str	ip, [r4, #25]	@ unaligned
	str	r0, [r4, #29]	@ unaligned
	ldrh	r1, [r1, #16]	@ unaligned
	movw	r0, #:lower16:.LC103
	strhne	r2, [r4, #25]	@ unaligned
	cmp	r3, #0
	movt	r0, #:upper16:.LC103
	strhne	r3, [r4, #27]	@ unaligned
	strh	r1, [r4, #33]	@ unaligned
	movw	r1, #3240
	ldrh	r1, [r6, r1]
	cmp	r1, #0
	strhne	r1, [r4, #29]	@ unaligned
	ldr	r1, .L1352
	bl	printk
	movw	r3, #3240
	movw	r0, #:lower16:.LC104
	ldr	r1, .L1352
	ldrh	r2, [r6, r3]
	movt	r0, #:upper16:.LC104
	bl	printk
	ldr	r3, [r6, #3244]
	cmp	r3, #0
	beq	.L1350
.L1313:
	add	r1, r4, #31
	mov	r0, r4
	bl	override_id
	strb	r0, [r4, #49]
.L1314:
	movw	r0, #:lower16:.LC106
	ldr	r2, .L1352+4
	movt	r0, #:upper16:.LC106
	ldr	r1, .L1352
	bl	printk
	ldr	r3, [r6, #3300]
	cmp	r3, #0
	beq	.L1351
.L1315:
	add	r1, r4, #32
	mov	r0, r4
	bl	override_id
	strb	r0, [r4, #50]
.L1316:
	ldr	r3, [r6, #3304]
	cmp	r3, #0
	beq	.L1317
	add	r1, r4, #33
	mov	r0, r4
	bl	override_id
	strb	r0, [r4, #51]
.L1317:
	ldr	r3, [r6, #2476]
	ldrb	r3, [r3, #24]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L1318
	ldrb	r3, [r4, #33]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L1318
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC107
	movt	r1, #:upper16:.LC107
	add	r0, r0, #32
	bl	dev_warn
.L1318:
	mov	r0, r7
	ldr	r1, .L1352+8
	bl	device_create_file
	subs	r8, r0, #0
	bne	.L1309
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC108
	ldr	r3, [r6, #2476]
	movt	r1, #:upper16:.LC108
	add	r0, r0, #32
	ldr	r2, [r3]
	bl	_dev_info
	b	.L1302
.L1351:
	ldrb	r3, [r4, #32]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L1316
	ldr	r3, [r6, #2476]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	bne	.L1315
	b	.L1316
.L1350:
	ldrb	r3, [r4, #31]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L1314
	ldr	r3, [r6, #2476]
	ldr	r3, [r3, #8]
	cmp	r3, #0
	bne	.L1313
	ldrb	r3, [r6, #3248]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L1313
	ldr	r3, .L1352+12
	movw	r2, #:lower16:.LC105
	mov	r1, #50
	ldr	ip, [r5, #28]
	movt	r2, #:upper16:.LC105
	ldr	r0, .L1352+4
	stm	sp, {r3, ip}
	sub	r3, r3, #130
	bl	snprintf
	b	.L1313
.L1353:
	.align	2
.L1352:
	.word	.LANCHOR3+340
	.word	.LANCHOR1+3248
	.word	.LANCHOR0+156
	.word	init_uts_ns+134
	.fnend
	.size	composite_bind, .-composite_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_qc_stop, %function
eth_qc_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r0, #576]
	ldr	r6, [r0, #1156]
	cmp	r1, #0
	beq	.L1366
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
.L1357:
	add	r5, r4, #1152
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1156]
	mov	r7, r0
	cmp	r3, #0
	beq	.L1356
	ldr	r3, [r6, #116]
	cmp	r3, #0
	beq	.L1356
	mov	r0, r6
	blx	r3
.L1356:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1366:
	movw	r0, #:lower16:.LC109
	movw	r1, #1847
	movt	r0, #:upper16:.LC109
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC110
	movt	r0, #:upper16:.LC110
	bl	printk
	b	.L1357
	.fnend
	.size	eth_qc_stop, .-eth_qc_stop
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_ctrl_read_complete, %function
qdss_ctrl_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1026
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r5, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, r2]
	ldr	r4, [r0]
	ldr	r6, [r1, #32]
	tst	r2, #4
	bne	.L1374
.L1368:
	ldr	r3, [r5, #48]
	add	r7, r4, #188
	mov	r0, r7
	str	r3, [r6, #8]
	ldr	r3, [r5, #44]
	str	r3, [r6, #12]
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	add	r2, r4, #140
	ldr	r1, [r4, #144]
	add	r0, r5, #36
	bl	__list_add
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	lr, [r4, #124]
	cmp	lr, #0
	beq	.L1367
	mov	r2, r6
	mov	ip, lr
	ldr	r0, [r4, #128]
	ldrd	r4, [sp]
	mov	r3, #0
	mov	r1, #2
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	ip	@ indirect register sibling call
.L1374:
	movw	r1, #:lower16:.LC111
	add	r0, r3, #1008
	movt	r1, #:upper16:.LC111
	bl	__dynamic_pr_debug
	b	.L1368
.L1367:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	qdss_ctrl_read_complete, .-qdss_ctrl_read_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_ctrl_write_complete, %function
qdss_ctrl_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1050
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r4, r1
	str	r8, [sp, #16]
	mov	r7, r0
	str	lr, [sp, #20]
	ldrh	r3, [r3, r2]
	ldr	r5, [r0]
	ldr	r6, [r1, #32]
	tst	r3, #4
	bne	.L1387
.L1376:
	ldr	r3, [r4, #44]
	cmp	r3, #0
	bne	.L1377
	ldrh	r3, [r7, #20]
	ldr	r2, [r4, #4]
	cmp	r2, r3
	bcc	.L1377
	udiv	r1, r2, r3
	mls	r3, r3, r1, r2
	cmp	r3, #0
	bne	.L1377
	ldr	r0, [r4, #48]
	str	r3, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	str	r0, [r6, #8]
	ldr	r3, [r4, #44]
	str	r3, [r6, #12]
	ldr	r0, [r5, #104]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	r3, [r0, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #16]
	bx	r3
.L1377:
	add	r7, r5, #188
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	add	r2, r5, #148
	ldr	r1, [r5, #152]
	add	r0, r4, #36
	bl	__list_add
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L1388
.L1378:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	lr, [r5, #124]
	cmp	lr, #0
	beq	.L1375
	mov	r2, r6
	mov	ip, lr
	ldr	r0, [r5, #128]
	ldrd	r4, [sp]
	mov	r3, #0
	mov	r1, #4
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	ip	@ indirect register sibling call
.L1388:
	ldr	r3, [r4, #48]
	str	r3, [r6, #8]
	ldr	r3, [r4, #44]
	str	r3, [r6, #12]
	b	.L1378
.L1387:
	movw	r1, #:lower16:.LC112
	ldr	r0, .L1389
	movt	r1, #:upper16:.LC112
	bl	__dynamic_pr_debug
	b	.L1376
.L1375:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1390:
	.align	2
.L1389:
	.word	.LANCHOR2+1032
	.fnend
	.size	qdss_ctrl_write_complete, .-qdss_ctrl_write_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_disable, %function
audio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1074
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR2
	str	lr, [sp, #4]
	mov	r4, r0
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L1401
.L1392:
	ldrb	r3, [r4, #152]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L1391
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	strb	r3, [r4, #152]
.L1391:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1401:
	movw	r1, #:lower16:.LC113
	add	r0, r3, #1056
	movt	r1, #:upper16:.LC113
	bl	__dynamic_pr_debug
	b	.L1392
	.fnend
	.size	audio_disable, .-audio_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_start_rx, %function
gsmd_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	subs	r5, r0, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	beq	.L1417
	add	r6, r5, #4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #68]
	mov	r7, r0
	cmp	r3, #0
	beq	.L1418
	add	r9, r5, #12
	mov	r10, #2048
	ldr	r8, [r3, #92]
	b	.L1406
.L1420:
	ldr	r4, [r5, #12]
	cmp	r9, r4
	mov	r0, r4
	sub	fp, r4, #36
	beq	.L1405
	bl	list_del
	mov	r1, r7
	mov	r0, r6
	str	r10, [r4, #-32]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r8, #8]
	mov	r1, fp
	mov	r2, #208
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	fp, #0
	mov	r7, r0
	bne	.L1419
.L1406:
	ldr	r3, [r5, #72]
	ldr	r3, [r3, #8]
	tst	r3, #1
	bne	.L1420
.L1405:
	mov	r1, r7
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L1418:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1098
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	beq	.L1405
	movw	r1, #:lower16:.LC115
	ldr	r2, .L1421
	movt	r1, #:upper16:.LC115
	ldr	r0, .L1421+4
	bl	__dynamic_pr_debug
	b	.L1405
.L1419:
	movw	r0, #:lower16:.LC116
	mov	r2, r5
	ldr	r1, .L1421
	ldr	r3, [r5]
	movt	r0, #:upper16:.LC116
	bl	printk
	mov	r2, r9
	mov	r0, r4
	ldr	r1, [r5, #16]
	bl	__list_add
	b	.L1405
.L1417:
	ldr	r1, .L1421
	movw	r0, #:lower16:.LC114
	movt	r0, #:upper16:.LC114
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L1422:
	.align	2
.L1421:
	.word	.LANCHOR3+356
	.word	.LANCHOR2+1080
	.fnend
	.size	gsmd_start_rx, .-gsmd_start_rx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_stop, %function
gbam_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L1445
	add	r5, r0, #8
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L1446
	movw	r3, #:lower16:.LANCHOR2
	movw	r1, #1146
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r1]
	tst	r3, #4
	bne	.L1447
.L1429:
	ldr	r0, [r2, #84]
	ldr	r1, [r4, #116]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	subs	r2, r0, #0
	bne	.L1448
.L1430:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L1445:
	add	r5, r0, #4
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L1449
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #1122
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	bne	.L1450
.L1426:
	ldr	r0, [r3, #88]
	ldr	r1, [r4, #112]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	subs	r2, r0, #0
	beq	.L1430
	movw	r0, #:lower16:.LC119
	ldr	r1, .L1451
	movt	r0, #:upper16:.LC119
	bl	printk
	b	.L1430
.L1447:
	movw	r1, #:lower16:.LC118
	ldr	r2, .L1451+4
	movt	r1, #:upper16:.LC118
	ldr	r0, .L1451+8
	bl	__dynamic_pr_debug
	ldr	r2, [r4, #12]
	b	.L1429
.L1450:
	movw	r1, #:lower16:.LC118
	add	r0, r0, #1104
	ldr	r2, .L1451
	movt	r1, #:upper16:.LC118
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #12]
	b	.L1426
.L1449:
	mov	r0, r5
	bl	_raw_spin_unlock
	ldr	r1, .L1451
	movw	r0, #:lower16:.LC117
.L1444:
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC117
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L1446:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC117
	ldr	r1, .L1451+4
	b	.L1444
.L1448:
	movw	r0, #:lower16:.LC119
	ldr	r1, .L1451+4
	movt	r0, #:upper16:.LC119
	bl	printk
	b	.L1430
.L1452:
	.align	2
.L1451:
	.word	.LANCHOR3+372
	.word	.LANCHOR3+396
	.word	.LANCHOR2+1128
	.fnend
	.size	gbam_stop, .-gbam_stop
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_wake_cb, %function
gbam_wake_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1170
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR2
	str	lr, [sp, #4]
	ldr	r4, [r0, #16]
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L1460
.L1454:
	ldr	r3, [r4, #128]
	ldr	r0, [r3]
	ldr	r3, [r0]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L1455
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	bx	r3
.L1460:
	movw	r1, #:lower16:.LC120
	add	r0, r3, #1152
	ldr	r2, .L1461
	movt	r1, #:upper16:.LC120
	bl	__dynamic_pr_debug
	b	.L1454
.L1455:
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #94
	ldr	pc, [sp], #4
.L1462:
	.align	2
.L1461:
	.word	.LANCHOR3+420
	.fnend
	.size	gbam_wake_cb, .-gbam_wake_cb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_endless_tx_complete, %function
gbam_endless_tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1194
	movt	r3, #:upper16:.LANCHOR2
	mov	r0, r1
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L1465
	bx	lr
.L1465:
	movw	r1, #:lower16:.LC121
	ldr	r3, [r0, #44]
	movt	r1, #:upper16:.LC121
	ldr	r2, .L1466
	ldr	r0, .L1466+4
	b	__dynamic_pr_debug
.L1467:
	.align	2
.L1466:
	.word	.LANCHOR3+436
	.word	.LANCHOR2+1176
	.fnend
	.size	gbam_endless_tx_complete, .-gbam_endless_tx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_endless_rx_complete, %function
gbam_endless_rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #1218
	movt	r0, #:upper16:.LANCHOR2
	mov	r2, r1
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L1470
	bx	lr
.L1470:
	movw	r1, #:lower16:.LC121
	ldr	r3, [r2, #44]
	add	r0, r0, #1200
	movt	r1, #:upper16:.LC121
	ldr	r2, .L1471
	b	__dynamic_pr_debug
.L1472:
	.align	2
.L1471:
	.word	.LANCHOR3+464
	.fnend
	.size	gbam_endless_rx_complete, .-gbam_endless_rx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_release, %function
rmnet_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1242
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrh	r3, [r3, r2]
	ldr	r4, [r1, #124]
	tst	r3, #4
	bne	.L1479
.L1474:
	add	r6, r4, #52
	mov	r5, #0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	strb	r5, [r4, #4]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	add	r3, r4, #16
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1479:
	movw	r1, #:lower16:.LC122
	ldr	r0, .L1480
	movt	r1, #:upper16:.LC122
	bl	__dynamic_pr_debug
	b	.L1474
.L1481:
	.align	2
.L1480:
	.word	.LANCHOR2+1224
	.fnend
	.size	rmnet_ctrl_release, .-rmnet_ctrl_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_send_cpkt_tomodem, %function
ghsic_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	ip, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r3, #1016]
	cmp	r0, r1
	bcs	.L1493
	mov	r6, r2
	mov	r2, #104
	mla	r3, r2, r0, r3
	ldr	r5, [r3, #1020]
	cmp	r5, #0
	beq	.L1494
	mov	r1, #32
	mov	r0, r6
	bl	__kmalloc
	subs	r7, r0, #0
	beq	.L1488
	mov	r1, r4
	mov	r2, r6
	bl	memcpy
	ldr	r0, [r5, #84]
	ands	r4, r0, #1
	beq	.L1495
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #1266
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L1496
.L1487:
	ldr	r3, [r5, #96]
	mov	r4, #0
	add	r3, r3, #1
	str	r3, [r5, #96]
.L1482:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1495:
	ldr	r3, [r5, #104]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r5, #104]
	bl	kfree
	b	.L1482
.L1496:
	movw	r1, #:lower16:.LC124
	mov	r3, r6
	ldr	r2, .L1497
	movt	r1, #:upper16:.LC124
	add	r0, r0, #1248
	bl	__dynamic_pr_debug
	b	.L1487
.L1488:
	mvn	r4, #11
	b	.L1482
.L1493:
	movw	r0, #:lower16:.LC123
	mov	r2, ip
	ldr	r1, .L1497
	movt	r0, #:upper16:.LC123
	mvn	r4, #18
	bl	printk
	b	.L1482
.L1494:
	movw	r0, #:lower16:.LC114
	ldr	r1, .L1497
	mvn	r4, #18
	movt	r0, #:upper16:.LC114
	bl	printk
	b	.L1482
.L1498:
	.align	2
.L1497:
	.word	.LANCHOR3+492
	.fnend
	.size	ghsic_send_cpkt_tomodem, .-ghsic_send_cpkt_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_status, %function
ghsic_ctrl_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1290
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	mov	r5, r0
	str	lr, [sp, #12]
	ldrh	r3, [r3, r2]
	mov	r4, r1
	.pad #24
	sub	sp, sp, #24
	tst	r3, #4
	bne	.L1526
.L1500:
	ldr	r0, [r5, #8]
	str	r4, [r5, #92]
	cmp	r0, #0
	beq	.L1499
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L1499
	mov	r1, r4
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	bx	r3
.L1499:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1526:
	tst	r1, #1
	movw	r1, #:lower16:.LC125
	ldr	r2, .L1527
	movne	r3, #43
	moveq	r3, #45
	ldr	r0, .L1527+4
	tst	r4, #2
	movt	r1, #:upper16:.LC125
	movne	lr, #43
	moveq	lr, #45
	tst	r4, #4
	movne	r6, #43
	moveq	r6, #45
	str	lr, [sp]
	tst	r4, #8
	movne	ip, #43
	moveq	ip, #45
	tst	r4, #16
	movne	lr, #43
	moveq	lr, #45
	stmib	sp, {r6, ip}
	tst	r4, #32
	movne	ip, #43
	moveq	ip, #45
	str	lr, [sp, #12]
	tst	r4, #64
	str	ip, [sp, #16]
	movne	ip, #43
	moveq	ip, #45
	str	ip, [sp, #20]
	bl	__dynamic_pr_debug
	b	.L1500
.L1528:
	.align	2
.L1527:
	.word	.LANCHOR3+516
	.word	.LANCHOR2+1272
	.fnend
	.size	ghsic_ctrl_status, .-ghsic_ctrl_status
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_send_cpkt_tomodem, %function
ghsuart_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	ip, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [ip, #1856]
	mov	lr, r0
	cmp	r0, r1
	bcs	.L1544
	mov	r3, #84
	mla	ip, r3, r0, ip
	ldr	r4, [ip, #1860]
	cmp	r4, #0
	beq	.L1545
	ldr	r0, [r4, #88]
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	beq	.L1546
	mov	r1, #32
	mov	r0, r2
	mov	r5, r2
	bl	__kmalloc
	subs	r7, r0, #0
	mvneq	r0, #11
	beq	.L1529
	mov	r1, r6
	mov	r2, r5
	bl	memcpy
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #1314
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L1547
.L1534:
	ldr	r1, .L1549
	ldr	r0, .L1549+4
	bl	___ratelimit
	cmp	r0, #0
	bne	.L1548
.L1535:
	ldr	r3, [r4, #104]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #104]
	bl	kfree
	mvn	r0, #18
.L1529:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1546:
	ldr	r3, [r4, #104]
	add	r3, r3, #1
	str	r3, [r4, #104]
	b	.L1529
.L1547:
	movw	r1, #:lower16:.LC124
	mov	r3, r5
	ldr	r2, .L1549
	movt	r1, #:upper16:.LC124
	add	r0, r0, #1296
	bl	__dynamic_pr_debug
	b	.L1534
.L1545:
	movw	r0, #:lower16:.LC114
	ldr	r1, .L1549
	movt	r0, #:upper16:.LC114
	bl	printk
	mvn	r0, #18
	b	.L1529
.L1544:
	movw	r0, #:lower16:.LC123
	mov	r2, lr
	ldr	r1, .L1549
	movt	r0, #:upper16:.LC123
	bl	printk
	mvn	r0, #18
	b	.L1529
.L1548:
	movw	r0, #:lower16:.LC126
	mvn	r2, #18
	ldr	r1, .L1549
	movt	r0, #:upper16:.LC126
	bl	printk
	b	.L1535
.L1550:
	.align	2
.L1549:
	.word	.LANCHOR3+536
	.word	.LANCHOR0+172
	.fnend
	.size	ghsuart_send_cpkt_tomodem, .-ghsuart_send_cpkt_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_ep0out_complete, %function
mbim_ep0out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r3, #0
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	ldr	r5, [r1, #32]
	ldr	r2, [r1, #44]
	str	r3, [r1, #32]
	cmp	r2, r3
	bne	.L1552
	ldr	r0, [r1, #4]
	ldr	r3, [r1, #48]
	cmp	r3, r0
	bne	.L1552
	cmp	r3, #4
	beq	.L1568
	cmp	r3, #8
	bne	.L1558
	ldr	r3, [r1]
	ldr	r4, [r3]	@ unaligned
	cmp	r4, #2048
	bcc	.L1559
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	ldr	r2, [r2, #200]
	cmp	r2, r4
	bcc	.L1559
	ldrb	r2, [r3, #5]	@ zero_extendqisi2
	ldrb	r3, [r3, #4]	@ zero_extendqisi2
	orr	r3, r3, r2, lsl #8
	strh	r3, [r5, #228]	@ movhi
.L1557:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1338
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L1569
.L1561:
	str	r4, [r5, #224]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1568:
	ldr	r3, [r1]
	ldr	r4, [r3]	@ unaligned
	cmp	r4, #2048
	bcc	.L1559
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #200]
	cmp	r3, r4
	bcs	.L1557
.L1559:
	movw	r0, #:lower16:.LC128
	mov	r2, r4
	ldr	r1, .L1570
	movt	r0, #:upper16:.LC128
	bl	printk
.L1554:
	ldr	r3, [r6, #8]
	mov	r0, r6
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
	ldr	r2, .L1570
	movw	r0, #:lower16:.LC131
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC131
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	mov	r1, r2
	b	printk
.L1569:
	movw	r1, #:lower16:.LC130
	mov	r3, r4
	ldr	r2, .L1570
	movt	r1, #:upper16:.LC130
	ldr	r0, .L1570+4
	bl	__dynamic_pr_debug
	b	.L1561
.L1552:
	movw	r0, #:lower16:.LC127
	ldr	r1, .L1570
	movt	r0, #:upper16:.LC127
	bl	printk
	b	.L1554
.L1558:
	movw	r0, #:lower16:.LC129
	ldr	r1, .L1570
	movt	r0, #:upper16:.LC129
	bl	printk
	b	.L1554
.L1571:
	.align	2
.L1570:
	.word	.LANCHOR3+564
	.word	.LANCHOR2+1320
	.fnend
	.size	mbim_ep0out_complete, .-mbim_ep0out_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_stop, %function
bam_data_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #4]
	beq	.L1596
	cmp	r3, #0
	beq	.L1572
	movw	r2, #:lower16:.LANCHOR2
	movw	r1, #1386
	movt	r2, #:upper16:.LANCHOR2
	ldrh	r2, [r2, r1]
	tst	r2, #4
	bne	.L1597
.L1578:
	ldr	r0, [r3, #8]
	ldr	r1, [r4, #40]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	subs	r3, r0, #0
	bne	.L1598
.L1572:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1596:
	cmp	r3, #0
	beq	.L1572
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #1362
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	bne	.L1599
.L1576:
	ldr	r0, [r3, #12]
	ldr	r1, [r4, #36]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	subs	r3, r0, #0
	ldrne	r2, .L1600
	bne	.L1595
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1598:
	ldr	r2, .L1600+4
.L1595:
	movw	r0, #:lower16:.LC133
	ldr	r4, [sp]
	mov	r1, r2
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC133
	add	sp, sp, #8
	b	printk
.L1597:
	ldr	r3, .L1600+4
	movw	r1, #:lower16:.LC132
	movt	r1, #:upper16:.LC132
	ldr	r0, .L1600+8
	mov	r2, r3
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #4]
	b	.L1578
.L1599:
	ldr	r3, .L1600
	movw	r1, #:lower16:.LC132
	add	r0, r0, #1344
	movt	r1, #:upper16:.LC132
	mov	r2, r3
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #4]
	b	.L1576
.L1601:
	.align	2
.L1600:
	.word	.LANCHOR3+588
	.word	.LANCHOR3+616
	.word	.LANCHOR2+1368
	.fnend
	.size	bam_data_stop, .-bam_data_stop
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_endless_tx_complete, %function
bam_data_endless_tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #1410
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bxeq	lr
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	r3, .L1611
	.pad #12
	sub	sp, sp, #12
	ldr	r2, [r1, #44]
	movw	r1, #:lower16:.LC134
	add	r0, r0, #1392
	movt	r1, #:upper16:.LC134
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L1612:
	.align	2
.L1611:
	.word	.LANCHOR3+644
	.fnend
	.size	bam_data_endless_tx_complete, .-bam_data_endless_tx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_endless_rx_complete, %function
bam_data_endless_rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1434
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bxeq	lr
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	r3, .L1622
	.pad #12
	sub	sp, sp, #12
	ldr	r2, [r1, #44]
	movw	r1, #:lower16:.LC134
	movt	r1, #:upper16:.LC134
	ldr	r0, .L1622+4
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L1623:
	.align	2
.L1622:
	.word	.LANCHOR3+676
	.word	.LANCHOR2+1416
	.fnend
	.size	bam_data_endless_rx_complete, .-bam_data_endless_rx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_setup, %function
f_audio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r2, [r1]	@ zero_extendqisi2
	.pad #52
	sub	sp, sp, #52
	ldrh	r1, [r1, #4]	@ unaligned
	ldr	r3, [r0, #20]
	cmp	r2, #34
	str	r1, [sp, #16]
	ldrh	r1, [r4, #2]	@ unaligned
	ldr	fp, [r3, #24]
	str	r1, [sp, #20]
	ldrh	r3, [r4, #6]	@ unaligned
	ldr	r6, [fp, #4]
	str	r3, [sp, #24]
	beq	.L1626
	bls	.L1718
	cmp	r2, #161
	beq	.L1629
	cmp	r2, #162
	bne	.L1625
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #1602
	movt	r5, #:upper16:.LANCHOR2
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L1719
	ldr	r9, [sp, #16]
	mov	r3, r1
	str	r6, [sp, #32]
	ldr	r2, [sp, #24]
	str	r2, [sp, #28]
.L1662:
	movw	r2, #1626
	and	r9, r9, #127
	ldrb	r8, [r4, #1]	@ zero_extendqisi2
	ldrh	r2, [r5, r2]
	lsr	r10, r3, #8
	tst	r2, #4
	bne	.L1720
.L1663:
	ldr	r3, [r7, #260]!
	cmp	r7, r3
	beq	.L1652
	ldrb	r2, [r3, #16]	@ zero_extendqisi2
	cmp	r2, r9
	bne	.L1674
.L1666:
	ldr	r2, [r3, #8]!
	cmp	r3, r2
	beq	.L1652
	ldrb	r1, [r2, #12]	@ zero_extendqisi2
	cmp	r1, r10
	beq	.L1669
.L1673:
	ldr	r2, [r2]
	cmp	r3, r2
	beq	.L1652
	ldrb	r1, [r2, #12]	@ zero_extendqisi2
	cmp	r10, r1
	bne	.L1673
.L1669:
	and	r8, r8, #15
	sub	r3, r8, #1
	cmp	r3, #3
	bhi	.L1652
	ldr	r3, [sp, #32]
	add	r8, r8, #4
	add	r1, sp, #48
	ldr	r0, [r3]
	ldr	r3, [r2, r8, lsl #2]
	ldr	r2, [sp, #28]
	str	r3, [r1, #-4]!
	mov	r8, r2
	bl	memcpy
	movw	r3, #1650
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L1675
.L1723:
	ldr	r2, [sp, #20]
	movw	r1, #:lower16:.LC144
	ldrb	r3, [r4]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC144
	ldr	r0, .L1729
	str	r2, [sp, #4]
	ldr	r2, [sp, #16]
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	str	r2, [sp, #8]
	ldr	r2, [sp, #24]
	str	ip, [sp]
	str	r2, [sp, #12]
	ldr	r2, .L1729+4
	bl	__dynamic_pr_debug
	b	.L1675
.L1629:
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #1506
	movt	r5, #:upper16:.LANCHOR2
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L1721
	ldr	r0, [sp, #16]
	mov	r10, r6
	str	r1, [sp, #32]
	ldr	r3, [sp, #24]
	mov	r8, r3
	str	r3, [sp, #28]
.L1641:
	movw	r3, #1530
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	lsr	r0, r0, #8
	ldrh	r3, [r5, r3]
	uxtb	r9, r0
	str	r2, [sp, #36]
	mvn	r2, #94
	tst	r3, #4
	str	r2, [sp, #44]
	bne	.L1722
.L1642:
	mov	r1, r7
	ldr	r3, [r1, #252]!
	cmp	r1, r3
	beq	.L1643
	ldrb	r2, [r3, #16]	@ zero_extendqisi2
	cmp	r2, r9
	bne	.L1645
	b	.L1644
.L1648:
	ldrb	r2, [r3, #16]	@ zero_extendqisi2
	cmp	r9, r2
	beq	.L1644
.L1645:
	ldr	r3, [r3]
	cmp	r1, r3
	bne	.L1648
.L1643:
	movw	r3, #:lower16:f_audio_complete
	add	r1, sp, #44
	ldr	r0, [r10]
	movt	r3, #:upper16:f_audio_complete
	ldr	r2, [sp, #28]
	str	r3, [r10, #28]
	str	r7, [r10, #32]
	bl	memcpy
.L1640:
	movw	r3, #1650
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L1723
.L1675:
	ldrb	r3, [r6, #26]	@ zero_extendqisi2
	str	r8, [r6, #4]
	mov	r1, r6
	mov	r2, #32
	orr	r3, r3, #2
	strb	r3, [r6, #26]
	ldr	r3, [fp]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L1724
.L1624:
	mov	r0, r4
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1667:
	ldrb	r2, [r3, #16]	@ zero_extendqisi2
	cmp	r9, r2
	beq	.L1666
.L1674:
	ldr	r3, [r3]
	cmp	r7, r3
	bne	.L1667
	b	.L1652
.L1718:
	cmp	r2, #33
	bne	.L1625
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #1458
	movt	r5, #:upper16:.LANCHOR2
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L1725
	ldr	r0, [sp, #16]
	mov	r10, r6
	str	r1, [sp, #32]
	ldr	r8, [sp, #24]
.L1631:
	movw	r2, #1482
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	lsr	r0, r0, #8
	ldrh	r2, [r5, r2]
	uxtb	r9, r0
	and	r1, r3, #15
	tst	r2, #4
	str	r1, [sp, #28]
	bne	.L1726
.L1632:
	mov	r1, r7
	ldr	r3, [r1, #252]!
	cmp	r3, r1
	beq	.L1633
	ldrb	r2, [r3, #16]	@ zero_extendqisi2
	cmp	r2, r9
	bne	.L1635
	b	.L1634
.L1639:
	ldrb	r2, [r3, #16]	@ zero_extendqisi2
	cmp	r9, r2
	beq	.L1634
.L1635:
	ldr	r3, [r3]
	cmp	r3, r1
	bne	.L1639
.L1633:
	ldr	r2, [sp, #28]
	movw	r3, #:lower16:f_audio_complete
	movt	r3, #:upper16:f_audio_complete
	strb	r2, [r7, #268]
	str	r3, [r10, #28]
	str	r7, [r10, #32]
	b	.L1640
.L1626:
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #1554
	movt	r5, #:upper16:.LANCHOR2
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L1727
	ldr	r0, [sp, #16]
	mov	r3, r1
	str	r6, [sp, #32]
	ldr	r2, [sp, #24]
	str	r2, [sp, #28]
.L1649:
	movw	r2, #1578
	and	r8, r0, #127
	ldrb	r10, [r4, #1]	@ zero_extendqisi2
	ldrh	r2, [r5, r2]
	lsr	r9, r3, #8
	tst	r2, #4
	bne	.L1728
.L1650:
	mov	r2, r7
	ldr	r3, [r2, #260]!
	cmp	r2, r3
	beq	.L1652
	ldrb	r1, [r3, #16]	@ zero_extendqisi2
	cmp	r1, r8
	bne	.L1661
.L1653:
	ldr	r2, [r3, #8]!
	cmp	r3, r2
	beq	.L1652
	ldrb	r1, [r2, #12]	@ zero_extendqisi2
	cmp	r1, r9
	beq	.L1656
.L1660:
	ldr	r2, [r2]
	cmp	r3, r2
	beq	.L1652
	ldrb	r1, [r2, #12]	@ zero_extendqisi2
	cmp	r9, r1
	bne	.L1660
.L1656:
	ands	r10, r10, #15
	beq	.L1658
	cmp	r10, #4
	bls	.L1659
	cmp	r10, #5
	bne	.L1658
.L1652:
	movw	r0, #:lower16:.LC146
	ldr	r1, .L1729+4
	mvn	r4, #94
	movt	r0, #:upper16:.LC146
	bl	printk
	b	.L1624
.L1654:
	ldrb	r1, [r3, #16]	@ zero_extendqisi2
	cmp	r8, r1
	beq	.L1653
.L1661:
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L1654
	b	.L1652
.L1644:
	ldr	r0, [r3, #8]!
	cmp	r0, r3
	beq	.L1643
	ldr	r2, [sp, #32]
	lsr	r1, r2, #8
	b	.L1647
.L1646:
	ldr	r0, [r0]
	cmp	r3, r0
	beq	.L1643
.L1647:
	ldrb	r2, [r0, #12]	@ zero_extendqisi2
	cmp	r2, r1
	bne	.L1646
	ldr	r2, [r0, #40]
	cmp	r2, #0
	beq	.L1646
	ldr	r3, [sp, #36]
	and	r1, r3, #15
	blx	r2
	str	r0, [sp, #44]
	b	.L1643
.L1634:
	ldr	r2, [r3, #8]!
	cmp	r2, r3
	beq	.L1633
	ldr	r0, [sp, #32]
	ldrb	r1, [r2, #12]	@ zero_extendqisi2
	lsr	r0, r0, #8
	cmp	r1, r0
	bne	.L1637
	b	.L1636
.L1638:
	ldrb	r1, [r2, #12]	@ zero_extendqisi2
	cmp	r0, r1
	beq	.L1636
.L1637:
	ldr	r2, [r2]
	cmp	r2, r3
	bne	.L1638
	b	.L1633
.L1659:
	movw	r3, #:lower16:audio_set_endpoint_complete
	strb	r10, [r7, #268]
	ldr	r8, [sp, #28]
	str	r2, [r7, #272]
	ldr	r2, [sp, #32]
	movt	r3, #:upper16:audio_set_endpoint_complete
	str	r3, [r2, #28]
	str	r7, [r2, #32]
	b	.L1640
.L1636:
	str	r2, [r7, #272]
	b	.L1633
.L1725:
	movw	r1, #:lower16:.LC135
	ldr	r2, .L1729+4
	add	r0, r5, #1440
	movt	r1, #:upper16:.LC135
	bl	__dynamic_pr_debug
	ldr	r3, [r7, #20]
	ldrh	r2, [r4, #2]	@ unaligned
	ldrh	r0, [r4, #4]	@ unaligned
	ldrh	r8, [r4, #6]	@ unaligned
	ldr	r3, [r3, #24]
	str	r2, [sp, #32]
	ldr	r10, [r3, #4]
	b	.L1631
.L1726:
	ldr	r2, [sp, #32]
	movw	r1, #:lower16:.LC136
	movt	r1, #:upper16:.LC136
	stm	sp, {r2, r8}
	ldr	r2, .L1729+8
	str	r0, [sp, #8]
	ldr	r0, .L1729+12
	bl	__dynamic_pr_debug
	b	.L1632
.L1727:
	movw	r1, #:lower16:.LC138
	ldr	r2, .L1729+4
	add	r0, r5, #1536
	movt	r1, #:upper16:.LC138
	bl	__dynamic_pr_debug
	ldr	r2, [r7, #20]
	ldrh	r3, [r4, #6]	@ unaligned
	ldrh	r0, [r4, #4]	@ unaligned
	ldr	r2, [r2, #24]
	str	r3, [sp, #28]
	ldrh	r3, [r4, #2]	@ unaligned
	ldr	r2, [r2, #4]
	str	r2, [sp, #32]
	b	.L1649
.L1722:
	ldr	r3, [sp, #32]
	movw	r1, #:lower16:.LC136
	movt	r1, #:upper16:.LC136
	ldr	r2, .L1729+16
	str	r3, [sp]
	ldr	r3, [sp, #36]
	str	r8, [sp, #4]
	str	r0, [sp, #8]
	ldr	r0, .L1729+20
	bl	__dynamic_pr_debug
	b	.L1642
.L1721:
	movw	r1, #:lower16:.LC137
	ldr	r2, .L1729+4
	add	r0, r5, #1488
	movt	r1, #:upper16:.LC137
	bl	__dynamic_pr_debug
	ldrh	r2, [r4, #6]	@ unaligned
	ldr	r3, [r7, #20]
	ldrh	r0, [r4, #4]	@ unaligned
	str	r2, [sp, #28]
	ldrh	r2, [r4, #2]	@ unaligned
	ldr	r3, [r3, #24]
	ldr	r8, [sp, #28]
	str	r2, [sp, #32]
	ldr	r10, [r3, #4]
	b	.L1641
.L1728:
	ldr	r2, [sp, #28]
	movw	r1, #:lower16:.LC139
	str	r3, [sp]
	movt	r1, #:upper16:.LC139
	mov	r3, r10
	str	r2, [sp, #4]
	ldr	r2, .L1729+24
	str	r0, [sp, #8]
	ldr	r0, .L1729+28
	str	r8, [sp, #12]
	bl	__dynamic_pr_debug
	b	.L1650
.L1719:
	movw	r1, #:lower16:.LC141
	ldr	r2, .L1729+4
	add	r0, r5, #1584
	movt	r1, #:upper16:.LC141
	bl	__dynamic_pr_debug
	ldr	r2, [r7, #20]
	ldrh	r3, [r4, #6]	@ unaligned
	ldrh	r9, [r4, #4]	@ unaligned
	ldr	r2, [r2, #24]
	str	r3, [sp, #28]
	ldrh	r3, [r4, #2]	@ unaligned
	ldr	r2, [r2, #4]
	str	r2, [sp, #32]
	b	.L1662
.L1720:
	ldr	r2, [sp, #28]
	movw	r1, #:lower16:.LC142
	str	r3, [sp]
	movt	r1, #:upper16:.LC142
	mov	r3, r8
	ldr	r0, .L1729+32
	stmib	sp, {r2, r9}
	ldr	r2, .L1729+36
	bl	__dynamic_pr_debug
	b	.L1663
.L1724:
	movw	r0, #:lower16:.LC145
	mov	r2, r4
	ldr	r1, .L1729+4
	movt	r0, #:upper16:.LC145
	bl	printk
	b	.L1624
.L1625:
	ldr	r1, [sp, #20]
	movw	r0, #:lower16:.LC143
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC143
	str	r1, [sp]
	ldr	r1, [sp, #16]
	str	r1, [sp, #4]
	ldr	r1, [sp, #24]
	str	r1, [sp, #8]
	ldr	r1, .L1729+4
	bl	printk
	b	.L1652
.L1658:
	movw	r0, #:lower16:.LC140
	ldr	r1, .L1729+24
	movt	r0, #:upper16:.LC140
	bl	printk
	b	.L1652
.L1730:
	.align	2
.L1729:
	.word	.LANCHOR2+1632
	.word	.LANCHOR3+708
	.word	.LANCHOR3+724
	.word	.LANCHOR2+1464
	.word	.LANCHOR3+744
	.word	.LANCHOR2+1512
	.word	.LANCHOR3+764
	.word	.LANCHOR2+1560
	.word	.LANCHOR2+1608
	.word	.LANCHOR3+788
	.fnend
	.size	f_audio_setup, .-f_audio_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_unbind_config, %function
android_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	ip, .L1748
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	mov	r5, r0
	str	lr, [sp, #12]
	ldr	r3, [r3, #3308]
	ldr	r1, [r0, #24]
	cmp	r3, ip
	beq	.L1732
	sub	r2, r3, #520
	ldr	r3, [r3, #-512]
	cmp	r1, r3
	bne	.L1733
	b	.L1732
.L1734:
	ldr	r3, [r3, #-512]
	cmp	r1, r3
	beq	.L1732
.L1733:
	ldr	r3, [r2, #520]
	cmp	r3, ip
	sub	r2, r3, #520
	bne	.L1734
.L1732:
	ldr	r3, [r1]
	ldrb	r2, [r3, #378]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L1736
	movw	r2, #:lower16:.LANCHOR2
	movw	r0, #1674
	movt	r2, #:upper16:.LANCHOR2
	mov	r1, #0
	ldrh	r2, [r2, r0]
	strb	r1, [r3, #378]
	tst	r2, #4
	bne	.L1747
.L1736:
	mov	r6, r5
	ldr	r4, [r6, #112]!
	cmp	r6, r4
	sub	r4, r4, #4
	beq	.L1731
.L1738:
	ldr	r3, [r4]
	mov	r1, r5
	mov	r0, r3
	ldr	r3, [r3, #44]
	cmp	r3, #0
	beq	.L1740
	blx	r3
	ldr	r4, [r4, #4]
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L1738
.L1731:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1740:
	ldr	r4, [r4, #4]
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L1738
	b	.L1731
.L1747:
	movw	r1, #:lower16:.LC147
	ldr	r2, .L1748+4
	movt	r1, #:upper16:.LC147
	ldr	r0, .L1748+8
	bl	__dynamic_pr_debug
	b	.L1736
.L1749:
	.align	2
.L1748:
	.word	.LANCHOR1+3308
	.word	.LANCHOR3+812
	.word	.LANCHOR2+1656
	.fnend
	.size	android_unbind_config, .-android_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_enable_function, %function
android_enable_function:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r9, r2
	movw	r8, #:lower16:.LC148
	strd	r10, [sp, #24]
	movt	r8, #:upper16:.LC148
	mov	fp, r0
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r6, [r0, #4]
	ldr	r2, [r0, #8]
	mov	r10, r1
	ldr	r3, [r0, #44]
	sub	r6, r6, #4
	str	r3, [sp]
	ldr	r3, [r2]
	str	r3, [sp, #4]
.L1751:
	ldr	r5, [r6, #4]!
	mov	r0, r9
	cmp	r5, #0
	beq	.L1770
	ldr	r4, [r5]
	mov	r1, r4
	bl	strcmp
	subs	r7, r0, #0
	bne	.L1751
	ldr	r1, [r5, #20]
	cmp	r1, fp
	cmpne	r1, #0
	bne	.L1771
	movw	r2, #:lower16:kmalloc_caches
	movt	r2, #:upper16:kmalloc_caches
	ldr	r0, [r2, #24]
	cmp	r0, #0
	beq	.L1761
	mov	r2, #12
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L1772
.L1754:
	str	fp, [r5, #20]
	add	r2, r10, #112
	movw	r6, #:lower16:.LANCHOR2
	str	r5, [r0], #4
	ldr	r1, [r10, #116]
	movt	r6, #:upper16:.LANCHOR2
	bl	__list_add
	movw	r3, #1698
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L1773
.L1756:
	ldr	r2, [sp]
	ldr	r8, [r5]
	ldr	r3, [r2, #44]
	cmp	r3, #0
	ble	.L1750
	add	r3, r3, r3, lsl #2
	add	r4, r2, #12
	add	r5, r4, r3, lsl #1
	b	.L1759
.L1757:
	cmp	r5, r4
	beq	.L1750
.L1759:
	mov	r1, r4
	mov	r0, r8
	bl	strcmp
	cmp	r0, #0
	add	r4, r4, #10
	bne	.L1757
	movw	r3, #1722
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L1774
.L1758:
	ldr	r2, [sp, #4]
	mov	r3, #1
	mov	r7, #0
	strb	r3, [r2, #378]
.L1750:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1761:
	mov	r0, #16
	b	.L1754
.L1770:
	mvn	r7, #21
	b	.L1750
.L1773:
	movw	r1, #:lower16:.LC150
	add	r0, r6, #1680
	ldr	r2, .L1775
	movt	r1, #:upper16:.LC150
	ldr	r3, [r5]
	bl	__dynamic_pr_debug
	b	.L1756
.L1774:
	movw	r1, #:lower16:.LC151
	ldr	r2, .L1775+4
	movt	r1, #:upper16:.LC151
	ldr	r0, .L1775+8
	bl	__dynamic_pr_debug
	b	.L1758
.L1771:
	mov	r2, r4
	ldr	r1, .L1775
	mov	r0, r8
	bl	printk
	b	.L1751
.L1772:
	movw	r0, #:lower16:.LC149
	ldr	r1, .L1775
	mvn	r7, #11
	movt	r0, #:upper16:.LC149
	bl	printk
	b	.L1750
.L1776:
	.align	2
.L1775:
	.word	.LANCHOR3+836
	.word	.LANCHOR3+860
	.word	.LANCHOR2+1704
	.fnend
	.size	android_enable_function, .-android_enable_function
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_release, %function
ccid_bulk_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #1746
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r0, #:upper16:.LANCHOR2
	str	lr, [sp, #4]
	ldr	r4, [r1, #124]
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L1783
.L1778:
	mov	r3, #0
	mov	r0, r3
	str	r3, [r4, #152]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1783:
	movw	r1, #:lower16:.LC152
	add	r0, r0, #1728
	movt	r1, #:upper16:.LC152
	bl	__dynamic_pr_debug
	b	.L1778
	.fnend
	.size	ccid_bulk_release, .-ccid_bulk_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_setup, %function
frmnet_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r4, #:lower16:.LANCHOR2
	movw	r3, #1770
	movt	r4, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r5, r1
	strd	r8, [sp, #16]
	mov	r6, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r4, r3]
	.pad #28
	sub	sp, sp, #28
	ldr	r8, [r0, #128]
	ldrh	fp, [r1, #4]	@ unaligned
	ldrh	r10, [r1, #2]	@ unaligned
	tst	r3, #4
	ldrh	r9, [r1, #6]	@ unaligned
	ldr	r7, [r8, #4]
	bne	.L1801
.L1785:
	ldr	r3, [r6, #120]
	cmp	r3, #0
	bne	.L1786
	movw	r3, #1794
	ldrh	r3, [r4, r3]
	tst	r3, #4
	mvneq	r4, #106
	bne	.L1802
.L1784:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1786:
	ldrh	r3, [r5]	@ unaligned
	movw	r2, #8482
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r2
	beq	.L1789
	movw	r2, #41217
	cmp	r3, r2
	beq	.L1790
	cmp	r3, #8448
	beq	.L1803
.L1788:
	movw	r3, #1818
	ldrh	r3, [r4, r3]
	tst	r3, #4
	mvneq	r4, #94
	beq	.L1784
	ldr	r1, [r8]
	str	r10, [sp, #4]
	movw	r2, #:lower16:.LC17
	ldrb	r3, [r5]	@ zero_extendqisi2
	str	fp, [sp, #8]
	movt	r2, #:upper16:.LC17
	ldrb	ip, [r5, #1]	@ zero_extendqisi2
	mvn	r4, #94
	ldr	r0, .L1805
	add	r1, r1, #32
	str	ip, [sp]
	str	r9, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L1784
.L1789:
	ldr	r5, [r6, #100]
	adds	r9, r9, #0
	movne	r9, #1
	cmp	r5, #0
	beq	.L1795
	ldrb	r1, [r6, #116]	@ zero_extendqisi2
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, r10
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, r6
	mov	r4, #0
	add	r1, r1, r1, lsl #1
	add	r3, r3, r1, lsl #3
	ldrb	r1, [r3, #3328]	@ zero_extendqisi2
	blx	r5
.L1792:
	ldrb	r3, [r7, #26]	@ zero_extendqisi2
	str	r4, [r7, #4]
	mov	r1, r7
	mov	r2, #32
	bfi	r3, r9, #1, #1
	strb	r3, [r7, #26]
	ldr	r3, [r8]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L1784
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC156
	mov	r2, r4
	movt	r1, #:upper16:.LC156
	add	r0, r0, #32
	bl	dev_err
	b	.L1784
.L1803:
	movw	r3, #:lower16:frmnet_cmd_complete
	mov	r4, r9
	str	r6, [r7, #32]
	movt	r3, #:upper16:frmnet_cmd_complete
	mov	r9, #0
	str	r3, [r7, #28]
	b	.L1792
.L1802:
	movw	r1, #:lower16:.LC154
	ldr	r2, .L1805+4
	mvn	r4, #106
	movt	r1, #:upper16:.LC154
	ldr	r0, .L1805+8
	bl	__dynamic_pr_debug
	b	.L1784
.L1790:
	cmp	r10, #0
	bne	.L1788
	add	r3, r6, #132
	mov	r0, r3
	str	r3, [sp, #20]
	bl	_raw_spin_lock
	mov	r3, r6
	ldr	r6, [r3, #144]!
	cmp	r6, r3
	beq	.L1804
	mov	r0, r6
	sub	r5, r6, #8
	bl	list_del
	ldr	r0, [sp, #20]
	bl	_raw_spin_unlock
	ldmdb	r6, {r1, r4}
	ldr	r0, [r7]
	cmp	r9, r4
	movcc	r4, r9
	cmp	r4, r9
	mov	r2, r4
	movge	r9, #0
	movlt	r9, #1
	bl	memcpy
	ldr	r0, [r6, #-8]
	bl	kfree
	mov	r0, r5
	bl	kfree
	b	.L1792
.L1801:
	ldrb	ip, [r0, #116]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC153
	mov	r3, r0
	movt	r1, #:upper16:.LC153
	ldr	r2, .L1805+4
	ldr	r0, .L1805+12
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L1785
.L1795:
	mov	r4, r5
	b	.L1792
.L1804:
	movw	r0, #:lower16:.LC155
	ldrb	r2, [r5, #1]	@ zero_extendqisi2
	mov	r3, r10
	str	fp, [sp]
	movt	r0, #:upper16:.LC155
	ldrb	r1, [r5]	@ zero_extendqisi2
	str	r9, [sp, #4]
	bl	printk
	ldr	r0, [sp, #20]
	bl	_raw_spin_unlock
	b	.L1788
.L1806:
	.align	2
.L1805:
	.word	.LANCHOR2+1800
	.word	.LANCHOR3+884
	.word	.LANCHOR2+1776
	.word	.LANCHOR2+1752
	.fnend
	.size	frmnet_setup, .-frmnet_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_notify_complete, %function
frmnet_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r4, #:lower16:.LANCHOR2
	movw	r3, #1842
	movt	r4, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldrh	r3, [r4, r3]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r1, #32]
	ldr	r7, [r1, #44]
	tst	r3, #4
	bne	.L1846
.L1808:
	cmn	r7, #104
	beq	.L1810
	cmp	r7, #0
	bne	.L1847
.L1811:
	ldr	r3, [r5, #124]
	cmp	r3, #0
	bne	.L1848
.L1807:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L1847:
	cmn	r7, #108
	bne	.L1841
.L1810:
	add	r4, r5, #132
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r3, #0
	mov	r0, r4
	str	r3, [r5, #152]
.L1844:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	_raw_spin_unlock_irqrestore
.L1848:
	add	r7, r5, #132
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #152]
	mov	r8, r0
	cmp	r3, #0
	beq	.L1814
	sub	r3, r3, #1
	mov	r1, r0
	cmp	r3, #0
	mov	r0, r7
	str	r3, [r5, #152]
	beq	.L1844
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #136]
	mov	r1, r6
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r8, r0, #0
	beq	.L1807
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r3, r5
	mov	r9, r0
	ldr	r6, [r3, #144]!
	cmp	r6, r3
	beq	.L1818
	ldr	r2, [r5, #152]
	cmp	r2, #0
	beq	.L1819
	sub	r2, r2, #1
	mov	r0, r6
	str	r2, [r5, #152]
	sub	r5, r6, #8
	bl	list_del
	ldr	r0, [r6, #-8]
	bl	kfree
	mov	r0, r5
	bl	kfree
.L1818:
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #1890
	ldrh	r3, [r4, r3]
	tst	r3, #4
	beq	.L1807
	ldr	r0, .L1850
	movw	r1, #:lower16:.LC161
	mov	r2, r8
	movt	r1, #:upper16:.LC161
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	__dynamic_pr_debug
.L1846:
	ldrb	ip, [r5, #116]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC157
	mov	r3, r5
	movt	r1, #:upper16:.LC157
	ldr	r2, .L1850+4
	add	r0, r4, #1824
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L1808
.L1814:
	movw	r2, #1866
	ldrh	r2, [r4, r2]
	tst	r2, #4
	bne	.L1849
.L1816:
	mov	r1, r8
.L1845:
	mov	r0, r7
	b	.L1844
.L1841:
	movw	r0, #:lower16:.LC158
	mov	r1, r7
	movt	r0, #:upper16:.LC158
	bl	printk
	b	.L1811
.L1849:
	movw	r1, #:lower16:.LC159
	ldr	r2, .L1850+4
	movt	r1, #:upper16:.LC159
	ldr	r0, .L1850+8
	bl	__dynamic_pr_debug
	b	.L1816
.L1819:
	movw	r0, #:lower16:.LC160
	ldr	r1, .L1850+4
	movt	r0, #:upper16:.LC160
	bl	printk
	mov	r1, r9
	b	.L1845
.L1851:
	.align	2
.L1850:
	.word	.LANCHOR2+1872
	.word	.LANCHOR3+900
	.word	.LANCHOR2+1848
	.fnend
	.size	frmnet_notify_complete, .-frmnet_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_function_ctrlrequest, %function
mbim_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r1, #12]
	.pad #16
	sub	sp, sp, #16
	ldrh	r7, [r2, #4]	@ unaligned
	ldrh	r8, [r2, #2]	@ unaligned
	ldrh	r6, [r2, #6]	@ unaligned
	cmp	r3, #0
	bne	.L1855
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldrb	r3, [r3, #250]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L1855
	mov	r4, r2
	movw	r2, #:lower16:.LANCHOR2
	mov	r5, r1
	movt	r2, #:upper16:.LANCHOR2
	ldrb	r3, [r4]	@ zero_extendqisi2
	movw	r1, #1914
	ldrh	r2, [r2, r1]
	tst	r2, #4
	bne	.L1869
.L1856:
	cmp	r3, #128
	beq	.L1870
	cmp	r3, #192
	bne	.L1855
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	cmp	r3, #165
	cmpeq	r7, #4
	bne	.L1855
	ldr	r3, [r5, #4]
	cmp	r6, #40
	movcc	r4, r6
	movcs	r4, #40
	ldr	r1, .L1873
	mov	r2, r4
	ldr	r0, [r3]
	bl	memcpy
.L1858:
	ldr	r1, [r5, #4]
	cmp	r6, r4
	mov	r2, #32
	movle	r3, #0
	movgt	r3, #1
	ldrb	r0, [r1, #26]	@ zero_extendqisi2
	bfi	r0, r3, #1, #1
	strb	r0, [r1, #26]
	ldr	r3, [r5, #4]
	str	r4, [r3, #4]
	ldr	r3, [r5]
	ldr	r1, [r5, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	blt	.L1871
.L1852:
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1870:
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	cmp	r3, #6
	beq	.L1872
.L1855:
	mvn	r4, #94
	b	.L1852
.L1872:
	lsr	r3, r8, #8
	cmp	r3, #3
	bne	.L1855
	uxtb	r8, r8
	cmp	r8, #238
	bne	.L1855
	ldr	r3, [r5, #4]
	cmp	r6, #18
	movcc	r4, r6
	movcs	r4, #18
	ldr	r1, .L1873+4
	mov	r2, r4
	ldr	r0, [r3]
	bl	memcpy
	b	.L1858
.L1869:
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC162
	movt	r1, #:upper16:.LC162
	ldr	r2, .L1873+8
	ldr	r0, .L1873+12
	str	ip, [sp]
	str	r8, [sp, #4]
	str	r7, [sp, #8]
	str	r6, [sp, #12]
	bl	__dynamic_pr_debug
	ldrb	r3, [r4]	@ zero_extendqisi2
	b	.L1856
.L1871:
	movw	r0, #:lower16:.LC163
	ldr	r1, .L1873+8
	movt	r0, #:upper16:.LC163
	bl	printk
	b	.L1852
.L1874:
	.align	2
.L1873:
	.word	.LANCHOR0+224
	.word	.LANCHOR0+264
	.word	.LANCHOR3+924
	.word	.LANCHOR2+1896
	.fnend
	.size	mbim_function_ctrlrequest, .-mbim_function_ctrlrequest
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_unbind, %function
frmnet_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1938
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	mov	r5, r0
	str	lr, [sp, #12]
	ldrh	r2, [r3, r2]
	mov	r4, r1
	tst	r2, #4
	bne	.L1883
.L1876:
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L1884
.L1877:
	cmp	r3, #2
	bls	.L1878
	ldr	r0, [r4, #8]
	bl	kfree
.L1878:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r5, [r4, #136]
	ldr	r6, [r4, #140]
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [sp, #8]
	ldr	r0, [r4]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
.L1884:
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L1877
.L1883:
	movw	r1, #:lower16:.LC164
	add	r0, r3, #1920
	ldr	r2, .L1885
	ldrb	r3, [r4, #116]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC164
	bl	__dynamic_pr_debug
	b	.L1876
.L1886:
	.align	2
.L1885:
	.word	.LANCHOR3+944
	.fnend
	.size	frmnet_unbind, .-frmnet_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_start_rx, %function
gs_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r8, r0, #32
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r2, [r0, #4]
	.pad #8
	sub	sp, sp, #8
	ldr	r5, [r0, #32]
	ldr	r3, [r0, #40]
	ldr	r6, [r2, #92]
	cmp	r8, r5
	beq	.L1888
	ldr	r2, [r0, #8]
	cmp	r2, #0
	beq	.L1888
	cmp	r3, #7
	bgt	.L1888
	mov	r4, r0
	mov	r9, #4096
	b	.L1889
.L1890:
	cmp	r10, #0
	bne	.L1904
	ldr	r5, [r4, #32]
	ldr	r3, [r4, #40]
	cmp	r8, r5
	add	r3, r3, #1
	str	r3, [r4, #40]
	beq	.L1888
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L1888
	cmp	r3, #7
	bgt	.L1888
.L1889:
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del
	mov	r0, r4
	str	r9, [r5, #-32]
	bl	_raw_spin_unlock
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r2, #32
	mov	r0, r6
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r4
	bl	_raw_spin_lock
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L1890
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #40]
.L1888:
	mov	r0, r3
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1904:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1962
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L1905
.L1892:
	mov	r1, r8
	mov	r0, r5
	ldr	r2, [r4, #32]
	bl	__list_add
	ldr	r3, [r4, #40]
	b	.L1888
.L1905:
	str	r10, [sp, #4]
	ldr	ip, [r6, #4]
	movw	r3, #:lower16:.LC165
	movw	r1, #:lower16:.LC166
	movt	r3, #:upper16:.LC165
	ldr	r2, .L1906
	movt	r1, #:upper16:.LC166
	ldr	r0, .L1906+4
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L1892
.L1907:
	.align	2
.L1906:
	.word	.LANCHOR3+960
	.word	.LANCHOR2+1944
	.fnend
	.size	gs_start_rx, .-gs_start_rx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_disable, %function
rmnet_smd_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	mov	r3, #0
	str	lr, [sp, #4]
	ldr	r0, [r0, #96]
	str	r3, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L1909
	blx	r2
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
.L1909:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L1910
	blx	r2
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
.L1910:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L1911
	blx	r2
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
.L1911:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	lr, [sp, #4]
	add	r2, r4, #408
	mov	r0, #4
	ldr	r1, [r4, #388]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	queue_work_on
	.fnend
	.size	rmnet_smd_disable, .-rmnet_smd_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_read_complete, %function
gs_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r5, #48]
	mov	r6, r0
	add	r2, r4, #48
	add	r0, r5, #36
	ldr	r1, [r4, #52]
	ldr	r3, [r4, #128]
	add	r3, r3, ip
	str	r3, [r4, #128]
	bl	__list_add
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #60
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3388]
	bl	queue_work_on
	ldr	lr, [sp, #12]
	mov	r1, r6
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	gs_read_complete, .-gs_read_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_unthrottle, %function
gs_unthrottle:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #272]
	cmp	r4, #0
	beq	.L1924
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #4]
	mov	r5, r0
	cmp	r3, #0
	beq	.L1926
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #60
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3388]
	bl	queue_work_on
.L1926:
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L1924:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_unthrottle, .-gs_unthrottle
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_resume, %function
android_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	add	r0, r0, #32
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	movw	r3, #:lower16:.LANCHOR1
	ldr	r2, .L1941
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #3308]
	cmp	r3, r2
	sub	r4, r3, #520
	bne	.L1934
	b	.L1932
.L1940:
	ldr	r3, [r4, #520]
	cmp	r3, r2
	sub	r4, r3, #520
	beq	.L1932
.L1934:
	ldr	r3, [r3, #-512]
	cmp	r0, r3
	bne	.L1940
.L1932:
	add	r5, r0, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r4, #50]	@ zero_extendqisi2
	mov	r7, r0
	cmp	r3, #0
	beq	.L1935
	mov	r0, #0
	movw	r3, #:lower16:system_wq
	movt	r3, #:upper16:system_wq
	add	r2, r4, #180
	strb	r0, [r4, #50]
	ldr	r1, [r3]
	mov	r0, #4
	bl	queue_work_on
.L1935:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, r6
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	composite_resume
.L1942:
	.align	2
.L1941:
	.word	.LANCHOR1+3308
	.fnend
	.size	android_resume, .-android_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_suspend, %function
android_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	add	r0, r0, #32
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	movw	r3, #:lower16:.LANCHOR1
	ldr	r2, .L1950
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #3308]
	cmp	r3, r2
	sub	r4, r3, #520
	bne	.L1946
	b	.L1944
.L1949:
	ldr	r3, [r4, #520]
	cmp	r3, r2
	sub	r4, r3, #520
	beq	.L1944
.L1946:
	ldr	r3, [r3, #-512]
	cmp	r0, r3
	bne	.L1949
.L1944:
	add	r5, r0, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r4, #50]	@ zero_extendqisi2
	mov	r7, r0
	cmp	r3, #0
	bne	.L1947
	mov	r0, #1
	movw	r3, #:lower16:system_wq
	movt	r3, #:upper16:system_wq
	add	r2, r4, #180
	strb	r0, [r4, #50]
	ldr	r1, [r3]
	mov	r0, #4
	bl	queue_work_on
.L1947:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, r6
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	composite_suspend
.L1951:
	.align	2
.L1950:
	.word	.LANCHOR1+3308
	.fnend
	.size	android_suspend, .-android_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_ch_probe, %function
rmnet_smd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1986
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR2
	str	lr, [sp, #4]
	movw	r4, #:lower16:.LANCHOR1
	ldrh	r2, [r3, r2]
	movt	r4, #:upper16:.LANCHOR1
	ldr	r1, [r4, #3392]
	tst	r2, #4
	bne	.L1958
.L1953:
	add	r2, r1, #392
	mov	r0, #4
	ldr	r1, [r1, #388]
	bl	queue_work_on
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
.L1958:
	ldr	r1, [r1, #84]
	mov	ip, r0
	movw	r2, #:lower16:.LC167
	add	r0, r3, #1968
	movt	r2, #:upper16:.LC167
	ldr	r3, [ip]
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r1, [r4, #3392]
	b	.L1953
	.fnend
	.size	rmnet_smd_ch_probe, .-rmnet_smd_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_set_hid_report_desc, %function
acc_complete_set_hid_report_desc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	ldr	r3, [r1, #44]
	ldr	r5, [r1, #48]
	ldr	r6, [r4, #12]
	cmp	r3, #0
	bne	.L1963
	ldr	r0, [r4, #20]
	mov	r2, r5
	ldr	r3, [r4, #28]
	ldr	r1, [r1]
	add	r0, r0, r3
	bl	memcpy
	ldr	r3, [r4, #24]
	ldr	r2, [r4, #28]
	add	r5, r5, r2
	cmp	r5, r3
	str	r5, [r4, #28]
	beq	.L1964
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1964:
	movw	r3, #:lower16:system_wq
	add	r2, r6, #1744
	ldrd	r4, [sp]
	movt	r3, #:upper16:system_wq
	ldr	r6, [sp, #8]
	add	r2, r2, #8
	ldr	lr, [sp, #12]
	mov	r0, #4
	add	sp, sp, #16
	ldr	r1, [r3]
	b	queue_work_on
.L1963:
	movw	r0, #:lower16:.LC168
	ldrd	r4, [sp]
	mov	r1, r3
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC168
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
	.fnend
	.size	acc_complete_set_hid_report_desc, .-acc_complete_set_hid_report_desc
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_setup, %function
rmnet_sdio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r0, #192]
	ldrh	r9, [r1, #4]	@ unaligned
	ldrh	r8, [r1, #2]	@ unaligned
	ldr	r7, [r2, #24]
	cmp	r3, #0
	ldrh	r6, [r1, #6]	@ unaligned
	ldr	r10, [r7, #4]
	beq	.L1975
	ldrh	r3, [r1]	@ unaligned
	movw	r2, #8482
	mov	r4, r1
	mov	r5, r0
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r2
	beq	.L1968
	movw	r2, #41217
	cmp	r3, r2
	beq	.L1969
	cmp	r3, #8448
	beq	.L1978
.L1967:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2010
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	mvneq	r4, #94
	bne	.L1979
.L1965:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1969:
	cmp	r8, #0
	bne	.L1967
	add	fp, r0, #188
	mov	r0, fp
	bl	_raw_spin_lock
	mov	r2, r5
	ldr	r3, [r2, #120]!
	cmp	r3, r2
	beq	.L1980
	mov	r0, r3
	sub	r8, r3, #8
	str	r3, [sp, #20]
	bl	list_del
	ldr	r2, [r5, #128]
	mov	r0, fp
	sub	r2, r2, #1
	str	r2, [r5, #128]
	bl	_raw_spin_unlock
	ldr	r3, [sp, #20]
	ldr	r0, [r10]
	ldmdb	r3, {r1, r4}
	cmp	r6, r4
	movcc	r4, r6
	mov	r2, r4
	bl	memcpy
	ldr	r3, [sp, #20]
	movw	r2, #:lower16:rmnet_sdio_response_complete
	str	r5, [r10, #32]
	movt	r2, #:upper16:rmnet_sdio_response_complete
	str	r2, [r10, #28]
	ldr	r0, [r3, #-8]
	bl	kfree
	mov	r0, r8
	bl	kfree
	ldr	r3, [r5, #368]
	cmp	r4, r6
	movge	r6, #0
	movlt	r6, #1
	add	r3, r3, #1
	str	r3, [r5, #368]
	b	.L1971
.L1978:
	movw	r3, #:lower16:rmnet_sdio_command_complete
	mov	r4, r6
	str	r0, [r10, #32]
	movt	r3, #:upper16:rmnet_sdio_command_complete
	mov	r6, #0
	str	r3, [r10, #28]
.L1971:
	ldrb	r3, [r10, #26]	@ zero_extendqisi2
	str	r4, [r10, #4]
	mov	r1, r10
	mov	r2, #32
	bfi	r3, r6, #1, #1
	strb	r3, [r10, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L1965
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC156
	mov	r2, r4
	movt	r1, #:upper16:.LC156
	add	r0, r0, #32
	bl	dev_err
	b	.L1965
.L1968:
	ldr	r3, [r0, #332]
	tst	r8, #1
	add	r2, r0, #336
	mov	r4, #0
	mov	r0, #4
	ldr	r1, [r5, #200]
	orrne	r3, r3, #2
	biceq	r3, r3, #2
	str	r3, [r5, #332]
	bl	queue_work_on
	subs	r6, r6, r4
	movne	r6, #1
	b	.L1971
.L1979:
	ldr	r1, [r7]
	str	r8, [sp, #4]
	movw	r2, #:lower16:.LC17
	ldrb	r3, [r4]	@ zero_extendqisi2
	str	r9, [sp, #8]
	movt	r2, #:upper16:.LC17
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	mvn	r4, #94
	ldr	r0, .L1981
	add	r1, r1, #32
	str	ip, [sp]
	str	r6, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L1965
.L1980:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC169
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC169
	ldrb	r2, [r4]	@ zero_extendqisi2
	strd	r8, [sp]
	str	r6, [sp, #8]
	add	r0, r0, #32
	bl	_dev_info
	mov	r0, fp
	bl	_raw_spin_unlock
	b	.L1967
.L1975:
	mvn	r4, #106
	b	.L1965
.L1982:
	.align	2
.L1981:
	.word	.LANCHOR2+1992
	.fnend
	.size	rmnet_sdio_setup, .-rmnet_sdio_setup
	.align	2
	.global	gsdio_write_complete
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_write_complete, %function
gsdio_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #2034
	movt	r5, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r7, r1
	ldrh	r3, [r5, r3]
	strd	r8, [sp, #16]
	mov	r8, r0
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	ldr	r4, [r0]
	tst	r3, #4
	bne	.L2000
.L1984:
	cmp	r4, #0
	beq	.L2001
	add	r6, r4, #4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r4
	mov	r9, r0
	ldr	r2, [r1, #52]!
	add	r0, r7, #36
	bl	__list_add
	ldr	r3, [r4, #76]
	add	r3, r3, #1
	str	r3, [r4, #76]
	ldr	r3, [r7, #44]
	cmn	r3, #108
	beq	.L1987
	cmp	r3, #0
	bne	.L2002
.L1988:
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #60
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3396]
	bl	queue_work_on
.L1989:
	mov	r1, r9
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	_raw_spin_unlock_irqrestore
.L1987:
	movw	r3, #2058
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L1989
	movw	r1, #:lower16:.LC172
	ldr	r2, .L2003
	movt	r1, #:upper16:.LC172
	ldr	r3, [r8, #4]
	ldr	r0, .L2003+4
	bl	__dynamic_pr_debug
	b	.L1989
.L2000:
	movw	r1, #:lower16:.LC170
	mov	r3, r0
	ldr	r2, .L2003
	movt	r1, #:upper16:.LC170
	add	r0, r5, #2016
	str	r4, [sp]
	bl	__dynamic_pr_debug
	b	.L1984
.L2002:
	ldr	ip, [r8, #4]
	movw	r0, #:lower16:.LC171
	mov	r2, r4
	ldr	r1, .L2003
	movt	r0, #:upper16:.LC171
	str	ip, [sp]
	str	r3, [sp, #4]
	ldr	r3, [r4]
	bl	printk
	b	.L1988
.L2001:
	ldr	r1, .L2003
	movw	r0, #:lower16:.LC114
	movt	r0, #:upper16:.LC114
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk
.L2004:
	.align	2
.L2003:
	.word	.LANCHOR3+972
	.word	.LANCHOR2+2040
	.fnend
	.size	gsdio_write_complete, .-gsdio_write_complete
	.align	2
	.global	gsdio_ctrl_notify_modem
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ctrl_notify_modem, %function
gsdio_ctrl_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r3, [r4]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	cmp	r1, r3
	bcs	.L2022
	cmp	r0, #0
	beq	.L2023
	mov	ip, #104
	lsl	r3, r2, #1
	mla	r1, ip, r1, r4
	and	r3, r3, #2
	ldr	r5, [r1, #24]
	ldr	r1, [r5, #180]
	cmp	r1, r3
	beq	.L2005
	mov	r6, r0
	movw	r0, #:lower16:.LANCHOR2
	str	r3, [r5, #180]
	movw	r1, #2082
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r1]
	tst	r3, #4
	bne	.L2024
.L2009:
	ldr	r3, [r5, #108]
	cmp	r3, #0
	beq	.L2025
	ldr	r3, [r5, #180]
	cmp	r3, #0
	beq	.L2011
	ldr	r3, [r6, #136]
	cmp	r3, #0
	beq	.L2011
	mov	r0, r6
	ldr	r1, [r5, #176]
	blx	r3
.L2011:
	ldr	r1, [r4, #3396]
	add	r2, r5, #80
	mov	r0, #4
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on
.L2005:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2024:
	str	r2, [sp, #4]
	ldr	lr, [r5]
	movw	r1, #:lower16:.LC175
	movt	r1, #:upper16:.LC175
	mov	r3, r5
	ldr	r2, .L2026
	add	r0, r0, #2064
	str	lr, [sp]
	bl	__dynamic_pr_debug
	b	.L2009
.L2022:
	mov	r2, r1
	ldr	r1, .L2026
	movw	r0, #:lower16:.LC173
	movt	r0, #:upper16:.LC173
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L2023:
	ldr	r1, .L2026
	movw	r0, #:lower16:.LC174
	movt	r0, #:upper16:.LC174
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L2025:
	ldr	r1, .L2026
	movw	r0, #:lower16:.LC176
	mov	r2, r5
	ldr	r3, [r5]
	movt	r0, #:upper16:.LC176
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L2027:
	.align	2
.L2026:
	.word	.LANCHOR3+996
	.fnend
	.size	gsdio_ctrl_notify_modem, .-gsdio_ctrl_notify_modem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_write_complete, %function
gsmd_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2106
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r5, r1
	str	lr, [sp, #16]
	ldrh	r3, [r3, r2]
	.pad #12
	sub	sp, sp, #12
	mov	r6, r0
	ldr	r4, [r0]
	tst	r3, #4
	bne	.L2044
.L2029:
	cmp	r4, #0
	beq	.L2045
	add	r7, r4, #4
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #72]
	ldr	r3, [r3, #8]
	tst	r3, #1
	beq	.L2031
	ldr	r3, [r5, #44]
	cmn	r3, #108
	beq	.L2031
	cmp	r3, #0
	bne	.L2046
.L2033:
	mov	r1, r4
	add	r0, r5, #36
	ldr	r2, [r1, #44]!
	bl	__list_add
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #52
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3400]
	bl	queue_work_on
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock
.L2031:
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r0, [r5]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	bx	r3	@ indirect register sibling call
.L2044:
	movw	r1, #:lower16:.LC170
	mov	r3, r0
	ldr	r2, .L2047
	movt	r1, #:upper16:.LC170
	str	r4, [sp]
	ldr	r0, .L2047+4
	bl	__dynamic_pr_debug
	b	.L2029
.L2045:
	ldr	r1, .L2047
	movw	r0, #:lower16:.LC114
	movt	r0, #:upper16:.LC114
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	printk
.L2046:
	ldr	ip, [r6, #4]
	movw	r0, #:lower16:.LC171
	mov	r2, r4
	ldr	r1, .L2047
	movt	r0, #:upper16:.LC171
	str	ip, [sp]
	str	r3, [sp, #4]
	ldr	r3, [r4]
	bl	printk
	b	.L2033
.L2048:
	.align	2
.L2047:
	.word	.LANCHOR3+1020
	.word	.LANCHOR2+2088
	.fnend
	.size	gsmd_write_complete, .-gsmd_write_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_read_complete, %function
gsmd_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2130
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r5, r0
	str	lr, [sp, #16]
	ldrh	r2, [r3, r2]
	.pad #12
	sub	sp, sp, #12
	mov	r6, r1
	ldr	r4, [r0]
	tst	r2, #4
	bne	.L2061
.L2050:
	cmp	r4, #0
	beq	.L2062
	add	r7, r4, #4
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #72]
	ldr	r3, [r3, #8]
	tst	r3, #1
	beq	.L2052
	ldr	r3, [r6, #44]
	cmn	r3, #108
	beq	.L2052
	add	r0, r6, #36
	add	r2, r4, #20
	ldr	r1, [r4, #24]
	bl	__list_add
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #28
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3400]
	bl	queue_work_on
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock
.L2052:
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r6
	mov	r0, r5
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	bx	r3	@ indirect register sibling call
.L2061:
	movw	r1, #:lower16:.LC170
	add	r0, r3, #2112
	ldr	r2, .L2063
	movt	r1, #:upper16:.LC170
	mov	r3, r5
	str	r4, [sp]
	bl	__dynamic_pr_debug
	b	.L2050
.L2062:
	ldr	r1, .L2063
	movw	r0, #:lower16:.LC114
	movt	r0, #:upper16:.LC114
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	printk
.L2064:
	.align	2
.L2063:
	.word	.LANCHOR3+1040
	.fnend
	.size	gsmd_read_complete, .-gsmd_read_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_probe, %function
ghsuart_ctrl_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2154
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L2075
.L2066:
	ldr	r3, [r4, #4]
	movw	r2, #:lower16:.LANCHOR1
	mov	r1, #84
	movt	r2, #:upper16:.LANCHOR1
	mov	r0, #1
	mla	r3, r1, r3, r2
	ldr	r4, [r3, #1860]
	add	r1, r4, #88
	add	r5, r4, #8
	bl	_set_bit
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r6, r0
	cmp	r3, #0
	beq	.L2067
	add	r2, r4, #36
	mov	r0, #4
	ldr	r1, [r4, #32]
	bl	queue_work_on
.L2067:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2075:
	movw	r1, #:lower16:.LC177
	ldr	r2, .L2076
	movt	r1, #:upper16:.LC177
	ldr	r3, [r4]
	ldr	r0, .L2076+4
	bl	__dynamic_pr_debug
	b	.L2066
.L2077:
	.align	2
.L2076:
	.word	.LANCHOR3+1060
	.word	.LANCHOR2+2136
	.fnend
	.size	ghsuart_ctrl_probe, .-ghsuart_ctrl_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_probe, %function
ghsuart_data_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR2
	movw	r3, #2178
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movt	r2, #:upper16:.LANCHOR2
	str	lr, [sp, #8]
	movw	r4, #:lower16:.LANCHOR1
	ldrh	r3, [r2, r3]
	movt	r4, #:upper16:.LANCHOR1
	mov	r5, r0
	.pad #12
	sub	sp, sp, #12
	ldr	r0, [r4, #2028]
	tst	r3, #4
	bne	.L2087
.L2079:
	ldr	r2, [r5, #4]
	cmp	r2, r0
	bcs	.L2088
	mov	r3, #84
	mov	r0, #1
	mla	r2, r3, r2, r4
	ldr	r4, [r2, #2032]
	add	r1, r4, #188
	bl	_set_bit
	ldr	r0, [r4, #4]
	cmp	r0, #0
	beq	.L2078
	add	r2, r4, #112
	mov	r0, #4
	ldr	r1, [r4, #108]
	bl	queue_work_on
	mov	r0, #0
.L2078:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L2087:
	movw	r1, #:lower16:.LC178
	ldr	r3, [r5]
	str	r0, [sp]
	movt	r1, #:upper16:.LC178
	add	r0, r2, #2160
	ldr	r2, .L2089
	bl	__dynamic_pr_debug
	ldr	r0, [r4, #2028]
	b	.L2079
.L2088:
	movw	r0, #:lower16:.LC179
	ldr	r1, .L2089
	movt	r0, #:upper16:.LC179
	bl	printk
	mvn	r0, #21
	b	.L2078
.L2090:
	.align	2
.L2089:
	.word	.LANCHOR3+1080
	.fnend
	.size	ghsuart_data_probe, .-ghsuart_data_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_debug_read_stats, %function
rmnet_smd_debug_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 184
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #:lower16:kmalloc_caches
	strd	r6, [sp, #8]
	movt	r5, #:upper16:kmalloc_caches
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #260
	sub	sp, sp, #260
	str	r1, [sp, #84]
	strd	r2, [sp, #88]
	add	lr, r4, #260
	add	ip, r4, #324
	ldrd	r2, [lr]
	ldrd	r0, [lr, #8]
	ldrd	r6, [ip]
	strd	r2, [sp, #128]
	ldrd	r2, [lr, #16]
	strd	r0, [sp, #136]
	ldrd	r0, [lr, #24]
	strd	r2, [sp, #144]
	ldrd	r2, [lr, #32]
	strd	r0, [sp, #152]
	ldrd	r0, [lr, #40]
	strd	r6, [sp, #192]
	ldrd	r6, [ip, #24]
	strd	r2, [sp, #160]
	ldrd	r2, [lr, #48]
	strd	r0, [sp, #168]
	ldrd	r0, [lr, #56]
	strd	r2, [sp, #176]
	ldrd	r2, [ip, #8]
	strd	r0, [sp, #184]
	ldrd	r0, [ip, #16]
	strd	r2, [sp, #200]
	ldrd	r2, [ip, #32]
	strd	r0, [sp, #208]
	ldrd	r0, [ip, #40]
	strd	r6, [sp, #216]
	ldrd	r6, [ip, #48]
	strd	r2, [sp, #224]
	ldrd	r2, [ip, #56]
	strd	r0, [sp, #232]
	ldr	r0, [r5, #36]
	strd	r6, [sp, #240]
	strd	r2, [sp, #248]
	cmp	r0, #0
	beq	.L2094
	mov	r2, #512
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L2097
.L2092:
	add	r10, r4, #164
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	lr, [r4, #168]
	ldr	r3, [r4, #440]
	ldr	r2, [r4, #444]
	ldr	r8, [r4, #424]
	ldr	r9, [r4, #428]
	ldr	r7, [r4, #432]
	ldr	ip, [r4, #448]
	strd	r2, [sp, #72]
	ldr	r3, [sp, #172]
	ldr	r2, [sp, #236]
	sub	r1, r9, r8
	ldr	r6, [r4, #436]
	str	r0, [sp, #112]
	ldr	r0, [r4, #260]
	str	ip, [sp, #80]
	ldr	fp, [r4, #452]
	str	lr, [sp, #96]
	strd	r2, [sp, #116]
	str	r1, [sp, #124]
	bl	smd_read_avail
	str	r0, [sp, #100]
	ldr	r0, [r4, #260]
	bl	smd_write_avail
	str	r0, [sp, #104]
	ldr	r0, [r4, #324]
	bl	smd_read_avail
	str	r0, [sp, #108]
	ldr	r0, [r4, #324]
	sub	r4, r7, r6
	bl	smd_write_avail
	ldr	r3, [sp, #76]
	str	r8, [sp, #12]
	ldr	ip, [sp, #80]
	str	r6, [sp, #24]
	ldr	r2, [sp, #116]
	str	r4, [sp, #28]
	ldr	r6, [sp, #72]
	ldr	r1, [sp, #96]
	sub	ip, ip, fp
	ldr	r4, [sp, #76]
	str	r2, [sp]
	ldr	r2, [sp, #72]
	str	r0, [sp, #68]
	mov	r0, r5
	str	ip, [sp, #52]
	ldr	ip, [sp, #100]
	stmib	sp, {r1, r9}
	ldr	r1, [sp, #124]
	sub	lr, r2, r3
	movw	r2, #:lower16:.LC180
	ldr	r3, [sp, #120]
	movt	r2, #:upper16:.LC180
	str	ip, [sp, #56]
	ldr	ip, [sp, #104]
	str	lr, [sp, #40]
	ldr	lr, [sp, #80]
	str	r1, [sp, #16]
	mov	r1, #512
	str	r7, [sp, #20]
	str	r6, [sp, #32]
	str	ip, [sp, #60]
	ldr	ip, [sp, #108]
	str	r4, [sp, #36]
	str	lr, [sp, #44]
	str	fp, [sp, #48]
	str	ip, [sp, #64]
	bl	scnprintf
	mov	r4, r0
	ldr	r1, [sp, #112]
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	str	r4, [sp]
	mov	r3, r5
	ldrd	r0, [sp, #84]
	ldr	r2, [sp, #92]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L2091:
	mov	r0, r4
	add	sp, sp, #260
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2094:
	mov	r5, #16
	b	.L2092
.L2097:
	mvn	r4, #11
	b	.L2091
	.fnend
	.size	rmnet_smd_debug_read_stats, .-rmnet_smd_debug_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_read_stats, %function
rmnet_sdio_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:kmalloc_caches
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	ip, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r8, r2
	mov	r9, r3
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #124]
	.pad #64
	sub	sp, sp, #64
	ldr	r0, [ip, #40]
	cmp	r0, #0
	beq	.L2101
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L2104
.L2099:
	add	r6, r4, #188
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r1, [r4, #196]
	movw	r2, #:lower16:.LC181
	mov	r10, r0
	ldr	ip, [r4, #324]
	movt	r2, #:upper16:.LC181
	mov	r0, r5
	ldr	r3, [r4, #356]
	str	ip, [sp, #56]
	ldr	ip, [r4, #320]
	str	r1, [sp, #48]
	mov	r1, #4096
	str	ip, [sp, #52]
	ldr	ip, [r4, #128]
	str	ip, [sp, #44]
	ldr	ip, [r4, #368]
	str	ip, [sp, #40]
	ldr	ip, [r4, #332]
	str	ip, [sp, #36]
	ldr	ip, [r4, #116]
	str	ip, [sp, #32]
	ldr	ip, [r4, #372]
	str	ip, [sp, #28]
	ldr	ip, [r4, #328]
	str	ip, [sp, #24]
	ldr	ip, [r4, #180]
	str	ip, [sp, #20]
	ldr	ip, [r4, #168]
	str	ip, [sp, #16]
	ldr	ip, [r4, #360]
	str	ip, [sp, #12]
	ldr	ip, [r4, #364]
	str	ip, [sp, #8]
	ldr	ip, [r4, #152]
	str	ip, [sp, #4]
	ldr	ip, [r4, #140]
	str	ip, [sp]
	bl	scnprintf
	mov	r4, r0
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	str	r4, [sp]
	mov	r2, r9
	mov	r1, r8
	mov	r0, r7
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L2098:
	mov	r0, r4
	add	sp, sp, #64
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2101:
	mov	r5, #16
	b	.L2099
.L2104:
	mvn	r4, #11
	b	.L2098
	.fnend
	.size	rmnet_sdio_read_stats, .-rmnet_sdio_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_read_stats, %function
rmnet_mux_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	ip, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r8, r2
	mov	r9, r3
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #92
	sub	sp, sp, #92
	ldr	r0, [ip, #40]
	cmp	r0, #0
	beq	.L2109
	mov	r2, #1024
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L2113
.L2106:
	add	r6, r4, #368
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #208]
	ldr	r2, [r4, #364]
	ldr	fp, [r4, #404]
	ldr	r1, [r4, #408]
	str	r3, [sp, #60]
	ldr	r3, [r4, #232]
	str	r0, [sp, #84]
	ldr	r0, [r4, #412]
	sub	r2, r2, #1
	cmp	r2, #9
	ldr	r10, [r4, #416]
	movwhi	ip, #:lower16:.LC182
	ldr	lr, [r4, #424]
	str	r3, [sp, #64]
	ldr	r3, [r4, #312]
	movthi	ip, #:upper16:.LC182
	str	r3, [sp, #68]
	ldr	r3, [r4, #336]
	str	r0, [sp, #72]
	ldr	r0, [r4, #420]
	str	r3, [sp, #76]
	ldr	r3, [r4, #348]
	str	r3, [sp, #80]
	ldr	r3, [r4, #352]
	str	r3, [sp, #56]
	ldr	r3, [r4, #400]
	bls	.L2114
.L2108:
	ldr	r4, [r4, #356]
	movw	r2, #:lower16:.LC183
	str	fp, [sp]
	str	r10, [sp, #12]
	ldr	r10, [sp, #56]
	movt	r2, #:upper16:.LC183
	str	lr, [sp, #36]
	ldr	lr, [sp, #76]
	strd	r0, [sp, #4]
	mov	r1, #1024
	mov	r0, r5
	str	r10, [sp, #16]
	ldr	r10, [sp, #60]
	str	ip, [sp, #48]
	str	r4, [sp, #52]
	str	r10, [sp, #20]
	ldr	r10, [sp, #64]
	str	lr, [sp, #40]
	ldr	lr, [sp, #80]
	str	r10, [sp, #24]
	ldr	r10, [sp, #68]
	str	r10, [sp, #28]
	ldr	r10, [sp, #72]
	str	lr, [sp, #44]
	str	r10, [sp, #32]
	bl	scnprintf
	mov	r4, r0
	ldr	r1, [sp, #84]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	str	r4, [sp]
	mov	r2, r9
	mov	r1, r8
	mov	r0, r7
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L2105:
	mov	r0, r4
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2114:
	movw	ip, #:lower16:.LANCHOR3
	movt	ip, #:upper16:.LANCHOR3
	add	r2, ip, r2, lsl #2
	ldr	ip, [r2, #1100]
	b	.L2108
.L2109:
	mov	r5, #16
	b	.L2106
.L2113:
	mvn	r4, #11
	b	.L2105
	.fnend
	.size	rmnet_mux_read_stats, .-rmnet_mux_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_read_status, %function
debug_read_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r0, #124]
	.pad #20
	sub	sp, sp, #20
	ldmib	r5, {r7, r8}
	cmp	r7, #0
	cmpne	r8, #0
	beq	.L2128
	mov	fp, r3
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	mov	r9, r1
	ldr	r0, [r3, #36]
	mov	r10, r2
	cmp	r0, #0
	beq	.L2121
	mov	r2, #512
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L2129
.L2118:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:.LC185
	mov	r1, #512
	ldr	r3, [r5, #128]
	movt	r2, #:upper16:.LC185
	str	r0, [sp, #12]
	mov	r0, r6
	bl	scnprintf
	movw	r2, #:lower16:.LC186
	rsb	r1, r0, #512
	ldr	r3, [r5, #132]
	mov	r4, r0
	movt	r2, #:upper16:.LC186
	add	r0, r6, r0
	bl	scnprintf
	ldr	ip, [r5, #128]
	add	r4, r4, r0
	movw	r2, #:lower16:.LC187
	ldr	r3, [r5, #132]
	rsb	r1, r4, #512
	add	r0, r6, r4
	movt	r2, #:upper16:.LC187
	sub	r3, ip, r3
	bl	scnprintf
	add	r4, r4, r0
	movw	r2, #:lower16:.LC188
	ldr	r3, [r5, #136]
	rsb	r1, r4, #512
	add	r0, r6, r4
	movt	r2, #:upper16:.LC188
	bl	scnprintf
	add	r4, r4, r0
	movw	r2, #:lower16:.LC189
	ldr	r3, [r5, #140]
	rsb	r1, r4, #512
	add	r0, r6, r4
	movt	r2, #:upper16:.LC189
	bl	scnprintf
	ldr	ip, [r5, #136]
	add	r4, r4, r0
	movw	r2, #:lower16:.LC190
	ldr	r3, [r5, #140]
	rsb	r1, r4, #512
	add	r0, r6, r4
	movt	r2, #:upper16:.LC190
	sub	r3, ip, r3
	bl	scnprintf
	add	r4, r4, r0
	movw	r2, #:lower16:.LC191
	ldr	r3, [r8, #156]
	rsb	r1, r4, #512
	add	r0, r6, r4
	movt	r2, #:upper16:.LC191
	bl	scnprintf
	ldr	r3, [r7, #108]
	add	r4, r4, r0
	cmp	r3, #0
	beq	.L2119
	mov	r0, r7
	blx	r3
	cmp	r0, #0
	movw	r2, #:lower16:.LC192
	rsb	r1, r4, #512
	add	r0, r6, r4
	movne	r3, #2
	moveq	r3, #0
	movt	r2, #:upper16:.LC192
	bl	scnprintf
	add	r4, r4, r0
.L2119:
	mov	r0, r5
	ldr	r1, [sp, #12]
	bl	_raw_spin_unlock_irqrestore
	str	r4, [sp]
	mov	r2, fp
	mov	r1, r10
	mov	r0, r9
	mov	r3, r6
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r6
	bl	kfree
.L2115:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2121:
	mov	r6, #16
	b	.L2118
.L2129:
	mvn	r4, #11
	b	.L2115
.L2128:
	movw	r0, #:lower16:.LC184
	mvn	r4, #21
	movt	r0, #:upper16:.LC184
	bl	printk
	b	.L2115
	.fnend
	.size	debug_read_status, .-debug_read_status
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_sdio_read_stats, %function
debug_sdio_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #68
	sub	sp, sp, #68
	str	r1, [sp, #52]
	strd	r2, [sp, #56]
	cmp	r0, #0
	beq	.L2136
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r10, r0, #0
	beq	.L2140
.L2131:
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	ldr	r5, [r8]
	cmp	r5, #0
	beq	.L2134
	mov	r5, #0
	movw	r3, #:lower16:.LC193
	movt	r3, #:upper16:.LC193
	mov	r6, r5
	add	r7, r8, #4
	str	r3, [sp, #48]
.L2133:
	ldr	r4, [r7, #20]
	add	r7, r7, #104
	add	r9, r4, #4
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r4, #112]
	mov	r3, r6
	rsb	r1, r5, #4096
	mov	fp, r0
	ldr	r2, [sp, #48]
	add	r0, r10, r5
	add	r6, r6, #1
	str	ip, [sp, #40]
	ldr	ip, [r4, #108]
	str	ip, [sp, #36]
	ldr	ip, [r4, #8]
	str	ip, [sp, #32]
	ldr	ip, [r4, #76]
	str	ip, [sp, #28]
	ldr	ip, [r4, #48]
	str	ip, [sp, #24]
	ldr	ip, [r4, #44]
	str	ip, [sp, #20]
	ldr	ip, [r4, #176]
	str	ip, [sp, #16]
	ldr	ip, [r4, #180]
	str	ip, [sp, #12]
	ldr	ip, [r4, #188]
	str	ip, [sp, #8]
	ldr	ip, [r4, #184]
	stm	sp, {r4, ip}
	bl	scnprintf
	add	r5, r5, r0
	mov	r1, fp
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r8]
	cmp	r6, r3
	bcc	.L2133
.L2134:
	mov	r3, r10
	ldrd	r0, [sp, #52]
	str	r5, [sp]
	ldr	r2, [sp, #60]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r10
	bl	kfree
.L2130:
	mov	r0, r4
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2136:
	mov	r10, #16
	b	.L2131
.L2140:
	mvn	r4, #11
	b	.L2130
	.fnend
	.size	debug_sdio_read_stats, .-debug_sdio_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_smd_read_stats, %function
debug_smd_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #36]
	.pad #92
	sub	sp, sp, #92
	str	r1, [sp, #76]
	strd	r2, [sp, #80]
	cmp	r0, #0
	beq	.L2148
	mov	r2, #512
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	str	r3, [sp, #64]
	beq	.L2154
.L2142:
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	ldr	r3, [r7, #212]
	cmp	r3, #0
	beq	.L2146
	add	fp, r7, #216
	mov	r6, #0
	movw	r3, #:lower16:.LC194
	mov	r8, fp
	movt	r3, #:upper16:.LC194
	mov	r9, r6
	mov	fp, r7
	str	r3, [sp, #72]
.L2145:
	ldr	r3, [sp, #64]
	ldr	r7, [r8, #20]
	add	r3, r3, r9
	add	r5, r7, #4
	ldr	r10, [r7, #72]
	str	r3, [sp, #44]
	rsb	r3, r9, #512
	mov	r0, r5
	str	r3, [sp, #48]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r7, #8]
	ldr	r4, [r10]
	str	r3, [sp, #60]
	ldr	r3, [r7, #160]
	cmp	r4, #0
	moveq	lr, r4
	str	r3, [sp, #52]
	ldr	r3, [r7, #164]
	str	r0, [sp, #68]
	mov	r0, r4
	str	r3, [sp, #56]
	ldr	r3, [r7, #168]
	ldr	r7, [r7, #172]
	str	r3, [sp, #48]
	beq	.L2144
	bl	smd_read_avail
	ldr	lr, [r10]
	mov	r4, r0
	cmp	lr, #0
	mov	r0, lr
	beq	.L2144
	bl	smd_write_avail
	mov	lr, r0
.L2144:
	ldr	ip, [r10, #8]
	rsb	r1, r9, #512
	add	r8, r8, #104
	ldr	r10, [r10, #8]
	str	r7, [sp]
	ldr	r0, [sp, #44]
	str	r4, [sp, #20]
	ldr	r7, [sp, #52]
	ldr	r3, [sp, #48]
	and	ip, ip, #1
	ubfx	r10, r10, #1, #1
	ldr	r2, [sp, #72]
	str	lr, [sp, #24]
	str	r7, [sp, #8]
	ldr	r7, [sp, #56]
	str	r3, [sp, #4]
	mov	r3, r6
	add	r6, r6, #1
	str	ip, [sp, #28]
	str	r7, [sp, #12]
	ldr	r7, [sp, #60]
	str	r10, [sp, #32]
	str	r7, [sp, #16]
	bl	scnprintf
	add	r9, r9, r0
	ldr	r1, [sp, #68]
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [fp, #212]
	cmp	r6, r3
	bcc	.L2145
	mov	r3, r9
.L2146:
	ldr	r5, [sp, #64]
	str	r3, [sp]
	ldrd	r0, [sp, #76]
	ldr	r2, [sp, #84]
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L2141:
	mov	r0, r4
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2148:
	mov	r3, #16
	str	r3, [sp, #64]
	b	.L2142
.L2154:
	mvn	r4, #11
	b	.L2141
	.fnend
	.size	debug_smd_read_stats, .-debug_smd_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_read_stats, %function
gbam_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r1
	mov	r9, r2
	strd	r10, [sp, #24]
	mov	r10, r3
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #68
	sub	sp, sp, #68
	cmp	r0, #0
	beq	.L2161
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L2165
.L2156:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #424]
	cmp	r2, #0
	ble	.L2166
	ldr	r4, [r3, #428]
	cmp	r4, #0
	beq	.L2159
	add	r6, r4, #4
	add	r7, r4, #8
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r0, [r4, #20]
	add	ip, r4, #20
	movw	r2, #:lower16:.LC195
	ldr	r1, [r4, #20]
	movt	r2, #:upper16:.LC195
	mov	r3, #0
	ubfx	r0, r0, #1, #1
	ubfx	r1, r1, #2, #1
	strd	r0, [sp, #52]
	ldr	lr, [r4, #68]
	mov	r1, #1024
	mov	r0, r5
	str	lr, [sp, #48]
	ldr	lr, [r4, #44]
	str	lr, [sp, #44]
	ldr	lr, [r4, #280]
	str	lr, [sp, #40]
	ldr	lr, [r4, #276]
	str	lr, [sp, #36]
	ldr	lr, [r4, #272]
	str	lr, [sp, #32]
	ldr	lr, [r4, #268]
	str	lr, [sp, #28]
	ldr	lr, [r4, #248]
	str	lr, [sp, #24]
	ldr	lr, [r4, #244]
	str	lr, [sp, #20]
	ldr	lr, [r4, #240]
	str	lr, [sp, #16]
	ldr	lr, [r4, #260]
	str	lr, [sp, #12]
	ldr	lr, [r4, #264]
	stm	sp, {r4, ip, lr}
	bl	scnprintf
	mov	r4, r0
	mov	r0, r7
	bl	_raw_spin_unlock
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L2159:
	str	r4, [sp]
	mov	r2, r10
	mov	r1, r9
	mov	r0, r8
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L2155:
	mov	r0, r4
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2166:
	mov	r4, #0
	b	.L2159
.L2161:
	mov	r5, #16
	b	.L2156
.L2165:
	mvn	r4, #11
	b	.L2155
	.fnend
	.size	gbam_read_stats, .-gbam_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_read_stats, %function
gsmd_ctrl_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #92
	sub	sp, sp, #92
	str	r1, [sp, #76]
	strd	r2, [sp, #80]
	cmp	r0, #0
	beq	.L2175
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	str	r3, [sp, #60]
	beq	.L2186
.L2168:
	ldr	r4, .L2187
	mov	r10, #0
	movw	r3, #:lower16:.LC197
	movw	r2, #:lower16:.LC196
	movw	r1, #:lower16:.LC198
	movt	r3, #:upper16:.LC197
	movt	r2, #:upper16:.LC196
	movt	r1, #:upper16:.LC198
	mov	fp, r10
	str	r3, [sp, #64]
	str	r2, [sp, #68]
	str	r1, [sp, #72]
.L2173:
	ldr	r9, [r4]
	ldr	r3, [sp, #60]
	cmp	r9, #0
	add	r6, r9, #108
	add	r8, r3, r10
	rsb	r3, r10, #1024
	mov	r0, r6
	str	r3, [sp, #40]
	beq	.L2170
	bl	_raw_spin_lock_irqsave
	ldr	lr, [sp, #68]
	str	r0, [sp, #52]
	ldr	r3, [r9, #92]
	ldr	ip, [r9, #88]
	ldr	r2, [r9]
	ldr	r1, [r9, #8]
	str	r3, [sp, #44]
	ldr	r3, [sp, #64]
	cmp	ip, #0
	ldr	r5, [r9, #8]
	movne	r3, lr
	cmp	r2, #0
	mov	r7, r2
	mov	ip, r2
	str	r3, [sp, #48]
	ldr	r3, [r9, #96]
	mov	r0, r2
	ubfx	r5, r5, #1, #1
	str	r3, [sp, #40]
	and	r3, r1, #1
	str	r3, [sp, #56]
	beq	.L2172
	bl	smd_read_avail
	ldr	ip, [r9]
	mov	r7, r0
	cmp	ip, #0
	mov	r0, ip
	beq	.L2172
	bl	smd_write_avail
	mov	ip, r0
.L2172:
	ldr	lr, [sp, #40]
	rsb	r1, r10, #1024
	mov	r0, r8
	mov	r3, fp
	ldr	r2, [sp, #72]
	str	r9, [sp]
	stmib	sp, {r9, lr}
	ldr	lr, [sp, #44]
	str	r5, [sp, #24]
	str	r7, [sp, #28]
	str	ip, [sp, #32]
	str	lr, [sp, #12]
	ldr	lr, [sp, #48]
	str	lr, [sp, #16]
	ldr	lr, [sp, #56]
	str	lr, [sp, #20]
	bl	scnprintf
	add	r10, r10, r0
	ldr	r1, [sp, #52]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L2170:
	add	fp, fp, #1
	add	r4, r4, #84
	cmp	fp, #6
	bne	.L2173
	ldr	r5, [sp, #60]
	str	r10, [sp]
	ldrd	r0, [sp, #76]
	ldr	r2, [sp, #84]
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L2167:
	mov	r0, r4
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2175:
	mov	r3, #16
	str	r3, [sp, #60]
	b	.L2168
.L2186:
	mvn	r4, #11
	b	.L2167
.L2188:
	.align	2
.L2187:
	.word	.LANCHOR1+512
	.fnend
	.size	gsmd_ctrl_read_stats, .-gsmd_ctrl_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_read_stats, %function
gctrl_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #68
	sub	sp, sp, #68
	str	r1, [sp, #52]
	strd	r2, [sp, #56]
	cmp	r0, #0
	beq	.L2197
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r10, r0, #0
	beq	.L2205
.L2190:
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	ldr	r3, [r9, #1016]
	cmp	r3, #0
	beq	.L2206
	mov	r5, #0
	movw	r2, #:lower16:.LC197
	str	r9, [sp, #48]
	movw	r1, #:lower16:.LC196
	movw	r0, #:lower16:.LC199
	movt	r2, #:upper16:.LC197
	movt	r1, #:upper16:.LC196
	movt	r0, #:upper16:.LC199
	mov	r7, r5
	add	r6, r9, #1020
	str	r2, [sp, #36]
	str	r1, [sp, #40]
	str	r0, [sp, #44]
.L2194:
	ldr	r4, [r6]
	mov	r2, r5
	cmp	r4, #0
	add	r8, r4, #4
	mov	r0, r8
	beq	.L2192
	bl	_raw_spin_lock_irqsave
	ldr	lr, [r4, #84]
	mov	fp, r0
	add	r0, r10, r5
	ldr	ip, [r4, #84]
	ldr	r3, [r4, #88]
	ldr	r9, [r4, #104]
	ldr	r2, [r4, #96]
	and	lr, lr, #1
	ubfx	ip, ip, #1, #1
	ldr	r1, [r4, #100]
	str	r7, [sp]
	cmp	r3, #0
	str	r4, [sp, #4]
	str	ip, [sp, #28]
	ldr	ip, [sp, #40]
	str	r9, [sp, #16]
	ldr	r9, [sp, #36]
	str	r1, [sp, #8]
	rsb	r1, r5, #1024
	str	r2, [sp, #12]
	ldr	r2, [sp, #44]
	movne	r9, ip
	str	r9, [sp, #20]
	ldr	r3, [r6, #24]
	str	lr, [sp, #24]
	bl	scnprintf
	add	r5, r5, r0
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #48]
	mov	r2, r5
	ldr	r3, [r3, #1016]
.L2192:
	add	r7, r7, #1
	add	r6, r6, #104
	cmp	r7, r3
	bcc	.L2194
.L2195:
	str	r2, [sp]
	mov	r3, r10
	ldrd	r0, [sp, #52]
	ldr	r2, [sp, #60]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r10
	bl	kfree
.L2189:
	mov	r0, r4
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2197:
	mov	r10, #16
	b	.L2190
.L2206:
	mov	r2, r3
	b	.L2195
.L2205:
	mvn	r4, #11
	b	.L2189
	.fnend
	.size	gctrl_read_stats, .-gctrl_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_read_stats, %function
ghsic_data_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #48]
	.pad #76
	sub	sp, sp, #76
	str	r1, [sp, #60]
	strd	r2, [sp, #64]
	cmp	r0, #0
	beq	.L2215
	mov	r2, #4096
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r10, r0, #0
	beq	.L2218
.L2208:
	movw	fp, #:lower16:.LANCHOR1
	movt	fp, #:upper16:.LANCHOR1
	ldr	r3, [fp, #1436]
	cmp	r3, #0
	beq	.L2219
	mov	r5, #0
	movw	r2, #:lower16:.LC200
	str	fp, [sp, #56]
	movw	r1, #:lower16:.LC201
	movt	r2, #:upper16:.LC200
	movt	r1, #:upper16:.LC201
	mov	r7, r5
	add	r6, fp, #1440
	str	r2, [sp, #48]
	str	r1, [sp, #52]
.L2210:
	ldr	r4, [r6]
	mov	r2, r5
	cmp	r4, #0
	add	r8, r4, #80
	add	r9, r4, #48
	mov	r0, r8
	beq	.L2211
	bl	_raw_spin_lock_irqsave
	ldr	lr, [r4, #180]
	rsb	r1, r5, #4096
	str	r0, [sp, #44]
	ldr	ip, [r4, #180]
	add	r0, r10, r5
	add	r6, r6, #104
	ldr	r3, [r4, #164]
	ldr	r2, [sp, #48]
	and	lr, lr, #1
	ubfx	ip, ip, #1, #1
	ubfx	r3, r3, #1, #1
	str	r3, [sp, #36]
	ldr	fp, [r4, #208]
	ldr	r3, [r6, #-80]
	str	fp, [sp, #32]
	ldr	fp, [r4, #204]
	str	fp, [sp, #28]
	ldr	fp, [r4, #72]
	str	fp, [sp, #24]
	ldr	fp, [r4, #212]
	str	fp, [sp, #20]
	ldr	fp, [r4, #188]
	str	r7, [sp]
	add	r7, r7, #1
	stmib	sp, {r4, lr}
	str	ip, [sp, #12]
	str	fp, [sp, #16]
	bl	scnprintf
	add	r5, r0, r5
	ldr	r1, [sp, #44]
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r4, #164]
	rsb	r1, r5, #4096
	mov	r8, r0
	ldr	r3, [r4, #192]
	add	r0, r10, r5
	ldr	r2, [sp, #52]
	ubfx	ip, ip, #2, #1
	str	ip, [sp, #16]
	ldr	ip, [r4, #216]
	str	ip, [sp, #12]
	ldr	ip, [r4, #200]
	str	ip, [sp, #8]
	ldr	ip, [r4, #196]
	str	ip, [sp, #4]
	ldr	ip, [r4, #40]
	str	ip, [sp]
	bl	scnprintf
	add	r5, r5, r0
	mov	r1, r8
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #56]
	mov	r2, r5
	ldr	r3, [r3, #1436]
	cmp	r3, r7
	bhi	.L2210
.L2213:
	str	r2, [sp]
	mov	r3, r10
	ldrd	r0, [sp, #60]
	ldr	r2, [sp, #68]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r10
	bl	kfree
.L2207:
	mov	r0, r4
	add	sp, sp, #76
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2211:
	add	r7, r7, #1
	add	r6, r6, #104
	cmp	r7, r3
	bcc	.L2210
	b	.L2213
.L2215:
	mov	r10, #16
	b	.L2208
.L2219:
	mov	r2, r3
	b	.L2213
.L2218:
	mvn	r4, #11
	b	.L2207
	.fnend
	.size	ghsic_data_read_stats, .-ghsic_data_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_read_stats, %function
ghsuart_ctrl_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #52
	sub	sp, sp, #52
	str	r1, [sp, #36]
	strd	r2, [sp, #40]
	cmp	r0, #0
	beq	.L2227
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r8, r0, #0
	beq	.L2236
.L2221:
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r2, [r6, #1856]
	cmp	r2, #0
	beq	.L2237
	mov	r4, #0
	movw	r10, #:lower16:.LC197
	str	r6, [sp, #28]
	movw	r9, #:lower16:.LC196
	movw	fp, #:lower16:.LC202
	movt	r9, #:upper16:.LC196
	mov	r5, r4
	movt	r10, #:upper16:.LC197
	movt	fp, #:upper16:.LC202
	str	r9, [sp, #32]
.L2225:
	mov	r3, #84
	ldr	r0, .L2238
	mov	r1, r4
	mul	r3, r3, r5
	ldr	r9, [r3, r0]
	cmp	r9, #0
	add	r6, r9, #8
	mov	r0, r6
	beq	.L2223
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r9, #92]
	mov	r3, r5
	mov	r7, r0
	ldr	r2, [r9, #96]
	add	r0, r8, r4
	ldr	r1, [r9, #100]
	ldr	lr, [r9, #104]
	str	r9, [sp]
	ldr	r9, [sp, #32]
	cmp	ip, #0
	moveq	r9, r10
	stmib	sp, {r1, r2, lr}
	mov	r2, fp
	rsb	r1, r4, #1024
	str	r9, [sp, #16]
	bl	scnprintf
	add	r4, r4, r0
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #28]
	mov	r1, r4
	ldr	r2, [r3, #1856]
.L2223:
	add	r5, r5, #1
	cmp	r5, r2
	bcc	.L2225
.L2226:
	str	r1, [sp]
	mov	r3, r8
	ldr	r0, [sp, #36]
	ldr	r1, [sp, #40]
	ldr	r2, [sp, #44]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r8
	bl	kfree
.L2220:
	mov	r0, r4
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2227:
	mov	r8, #16
	b	.L2221
.L2237:
	mov	r1, r2
	b	.L2226
.L2236:
	mvn	r4, #11
	b	.L2220
.L2239:
	.align	2
.L2238:
	.word	.LANCHOR1+1860
	.fnend
	.size	ghsuart_ctrl_read_stats, .-ghsuart_ctrl_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_read_stats, %function
ghsuart_data_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #76
	sub	sp, sp, #76
	str	r1, [sp, #60]
	strd	r2, [sp, #64]
	cmp	r0, #0
	beq	.L2248
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r8, r0, #0
	beq	.L2251
.L2241:
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	ldr	r3, [r7, #2028]
	cmp	r3, #0
	beq	.L2246
	mov	r5, #0
	movw	r1, #:lower16:.LC203
	str	r7, [sp, #56]
	movw	r0, #:lower16:.LC204
	movt	r1, #:upper16:.LC203
	movt	r0, #:upper16:.LC204
	mov	r2, r3
	mov	r6, r5
	add	fp, r7, #2032
	str	r1, [sp, #48]
	str	r0, [sp, #52]
.L2243:
	ldr	r4, [fp]
	mov	r3, r5
	cmp	r4, #0
	add	r7, r4, #104
	add	r9, r4, #72
	mov	r0, r7
	beq	.L2244
	bl	_raw_spin_lock_irqsave
	ldr	lr, [r4, #188]
	str	r0, [sp, #44]
	add	r0, r8, r5
	ldr	ip, [r4, #188]
	add	fp, fp, #84
	ldr	r1, [r4, #188]
	ldr	r2, [r4, #184]
	ldr	r3, [fp, #-60]
	and	lr, lr, #1
	ubfx	ip, ip, #1, #1
	ubfx	r1, r1, #2, #1
	ubfx	r2, r2, #1, #1
	str	r2, [sp, #32]
	ldr	r2, [r4, #96]
	str	r2, [sp, #28]
	ldr	r10, [r4, #212]
	ldr	r2, [sp, #48]
	str	r10, [sp, #24]
	ldr	r10, [r4, #204]
	str	r6, [sp]
	add	r6, r6, #1
	stmib	sp, {r4, lr}
	str	ip, [sp, #12]
	str	r1, [sp, #16]
	rsb	r1, r5, #1024
	str	r10, [sp, #20]
	bl	scnprintf
	add	r5, r0, r5
	ldr	r1, [sp, #44]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r4, #184]
	rsb	r1, r5, #1024
	mov	r7, r0
	ldr	r3, [r4, #208]
	add	r0, r8, r5
	ldr	r2, [sp, #52]
	ubfx	ip, ip, #2, #1
	str	ip, [sp, #4]
	ldr	ip, [r4, #64]
	str	ip, [sp]
	bl	scnprintf
	add	r5, r5, r0
	mov	r1, r7
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #56]
	ldr	r2, [r3, #2028]
	mov	r3, r5
	cmp	r2, r6
	bhi	.L2243
.L2246:
	str	r3, [sp]
	ldrd	r0, [sp, #60]
	mov	r3, r8
	ldr	r2, [sp, #68]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r8
	bl	kfree
.L2240:
	mov	r0, r4
	add	sp, sp, #76
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2244:
	add	r6, r6, #1
	add	fp, fp, #84
	cmp	r6, r2
	bcc	.L2243
	b	.L2246
.L2248:
	mov	r8, #16
	b	.L2241
.L2251:
	mvn	r4, #11
	b	.L2240
	.fnend
	.size	ghsuart_data_read_stats, .-ghsuart_data_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_read_stats, %function
debug_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	strd	r8, [sp, #16]
	mov	r9, r1
	ldr	r4, [r6]
	strd	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #32]
	mov	fp, r3
	.pad #28
	sub	sp, sp, #28
	cmp	r6, r4
	moveq	lr, #0
	beq	.L2254
	movw	r8, #:lower16:debug_buffer
	movw	r7, #:lower16:.LC205
	sub	r4, r4, #4
	movt	r8, #:upper16:debug_buffer
	movt	r7, #:upper16:.LC205
	mov	r5, #0
.L2253:
	ldr	ip, [r4, #20]
	rsb	r1, r5, #4096
	add	r0, r8, r5
	mov	r2, r7
	mov	lr, r5
	cmp	ip, #0
	beq	.L2255
	ldr	lr, [ip, #136]
	ldr	r3, [r4]
	str	lr, [sp, #16]
	ldr	lr, [ip, #132]
	str	lr, [sp, #12]
	ldr	lr, [ip, #128]
	str	lr, [sp, #8]
	ldr	lr, [ip, #84]
	ldr	lr, [lr, #4]
	str	lr, [sp, #4]
	ldr	ip, [ip, #88]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	scnprintf
	ldr	r4, [r4, #4]
	add	r5, r5, r0
	mov	lr, r5
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L2253
.L2254:
	movw	r3, #:lower16:debug_buffer
	mov	r2, fp
	str	lr, [sp]
	mov	r1, r10
	mov	r0, r9
	movt	r3, #:upper16:debug_buffer
	bl	simple_read_from_buffer
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2255:
	ldr	r4, [r4, #4]
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L2253
	b	.L2254
	.fnend
	.size	debug_read_stats, .-debug_read_stats
	.section	.exit.text,"ax",%progbits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_exit, %function
gether_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3404]
	b	destroy_workqueue
	.fnend
	.size	gether_exit, .-gether_exit
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_function_cleanup, %function
qdss_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2202
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L2271
.L2261:
	movw	r8, #:lower16:.LANCHOR0
	movt	r8, #:upper16:.LANCHOR0
	ldr	r5, [r8, #284]!
	cmp	r5, r8
	ldr	r4, [r5]
	beq	.L2260
	ldr	r6, .L2272
	b	.L2262
.L2264:
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, r8
	ldr	r3, [r4]
	beq	.L2260
.L2265:
	mov	r5, r4
	mov	r4, r3
.L2262:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r0, [r5, #80]
	bl	destroy_workqueue
	ldr	r3, [r5, #12]
	mov	r1, r7
	mov	r0, r6
	cmp	r3, #0
	bne	.L2264
	mov	r0, r5
	bl	list_del
	sub	r0, r5, #116
	bl	kfree
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, r8
	ldr	r3, [r4]
	bne	.L2265
.L2260:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2271:
	movw	r1, #:lower16:.LC206
	ldr	r0, .L2272+4
	movt	r1, #:upper16:.LC206
	bl	__dynamic_pr_debug
	b	.L2261
.L2273:
	.align	2
.L2272:
	.word	.LANCHOR1+3408
	.word	.LANCHOR2+2184
	.fnend
	.size	qdss_function_cleanup, .-qdss_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_send_cbits_tomodem, %function
gsmd_ctrl_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #5
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #16
	sub	sp, sp, #16
	bhi	.L2275
	movw	ip, #:lower16:.LANCHOR1
	mov	r3, #84
	movt	ip, #:upper16:.LANCHOR1
	mla	r3, r3, r1, ip
	ldr	r4, [r3, #512]
	cmp	r4, #0
	beq	.L2275
	cmp	r0, #0
	beq	.L2295
	ands	r2, r2, #1
	bne	.L2296
	ldr	r1, [r4, #88]
	mov	r3, r2
	mov	r5, #2
	mov	ip, r5
	mov	r6, r2
	cmp	r1, r3
	beq	.L2274
.L2298:
	ldr	r1, [r4, #8]
	str	r3, [r4, #88]
	tst	r1, #1
	beq	.L2274
	movw	r0, #:lower16:.LANCHOR2
	movw	r1, #2226
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r1, [r0, r1]
	tst	r1, #4
	bne	.L2297
.L2282:
	ldr	r0, [r4]
	mov	r2, r5
	mov	r1, r6
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	smd_tiocmset
.L2296:
	ldr	r1, [r4, #88]
	mov	r6, #2
	mov	r5, #0
	mov	r3, r6
	mov	ip, r5
	cmp	r1, r3
	bne	.L2298
.L2274:
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2297:
	movw	r1, #:lower16:.LC208
	strd	r2, [sp]
	add	r0, r0, #2208
	movt	r1, #:upper16:.LC208
	str	ip, [sp, #8]
	ldr	r2, .L2299
	bl	__dynamic_pr_debug
	b	.L2282
.L2275:
	mov	r2, r1
	ldr	r1, .L2299
	movw	r0, #:lower16:.LC123
	movt	r0, #:upper16:.LC123
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L2295:
	ldr	r1, .L2299
	movw	r0, #:lower16:.LC207
	movt	r0, #:upper16:.LC207
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L2300:
	.align	2
.L2299:
	.word	.LANCHOR3+1140
	.fnend
	.size	gsmd_ctrl_send_cbits_tomodem, .-gsmd_ctrl_send_cbits_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_command_complete, %function
rmnet_smd_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r8, [r4, #84]
	cmp	r2, #0
	blt	.L2309
	add	r6, r4, #164
	mov	r5, r1
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r2, [r4, #308]
	ldr	r3, [r4, #448]
	cmp	r2, #0
	add	r3, r3, #1
	str	r3, [r4, #448]
	beq	.L2310
.L2303:
	mov	r3, r4
	ldr	r7, [r3, #108]!
	cmp	r7, r3
	beq	.L2311
	mov	r0, r7
	bl	list_del
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r1, [r5]
	ldr	r2, [r5, #48]
	ldr	r0, [r7, #-8]
	bl	memcpy
	ldr	r3, [r5, #48]
	mov	r0, r6
	str	r3, [r7, #-4]
	bl	_raw_spin_lock
	mov	r0, r7
	add	r2, r4, #124
	ldr	r1, [r4, #128]
	bl	__list_add
	mov	r0, r6
.L2308:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L2310:
	ldr	r0, [r4, #260]
	bl	smd_write_avail
	ldr	r3, [r5, #48]
	cmp	r0, r3
	strcc	r3, [r4, #308]
	bcc	.L2303
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r4, #260]
	ldr	r1, [r5]
	ldr	r2, [r5, #48]
	bl	smd_write
	ldr	r3, [r5, #48]
	cmp	r3, r0
	beq	.L2305
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC210
	movt	r1, #:upper16:.LC210
	add	r0, r0, #32
	bl	dev_err
.L2305:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r4, #452]
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #452]
	b	.L2308
.L2309:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC209
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC209
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
.L2311:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC211
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC211
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
	.fnend
	.size	rmnet_smd_command_complete, .-rmnet_smd_command_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_complete_epout, %function
rmnet_smd_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	add	r7, r1, #36
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r1, #44]
	ldr	r8, [r4, #84]
	add	r6, r4, #164
	cmn	r3, #104
	beq	.L2333
	cmp	r3, #0
	mov	r5, r1
	beq	.L2315
	cmn	r3, #108
	beq	.L2333
	ldr	r2, [r0, #4]
	movw	r1, #:lower16:.LC212
	ldr	r0, [r8]
	movt	r1, #:upper16:.LC212
	ldr	lr, [r5, #4]
	ldr	ip, [r5, #48]
	add	r0, r0, #32
	stm	sp, {ip, lr}
	bl	dev_err
.L2333:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r1, [r4, #152]
	mov	r0, r7
	add	r2, r4, #148
.L2332:
	bl	__list_add
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock
.L2315:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r2, [r4, #372]
	ldr	r3, [r4, #432]
	cmp	r2, #0
	add	r3, r3, #1
	str	r3, [r4, #432]
	bne	.L2316
	ldr	r0, [r4, #324]
	bl	smd_write_avail
	ldr	r3, [r5, #48]
	cmp	r0, r3
	strcc	r3, [r4, #372]
	bcc	.L2316
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r4, #324]
	ldr	r1, [r5]
	ldr	r2, [r5, #48]
	bl	smd_write
	ldr	r3, [r5, #48]
	cmp	r3, r0
	beq	.L2318
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC213
	movt	r1, #:upper16:.LC213
	add	r0, r0, #32
	bl	dev_err
.L2318:
	mov	r0, r6
	add	r9, r4, #148
	bl	_raw_spin_lock
	mov	r0, r7
	mov	r2, r9
	ldr	r1, [r4, #152]
	ldr	r3, [r4, #436]
	add	r3, r3, #1
	str	r3, [r4, #436]
	bl	__list_add
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r0, r6
	ldr	r10, [r4, #84]
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	b	.L2319
.L2321:
	bl	list_del
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #88]
	mov	r1, r8
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	r8, #0
	mov	r7, r0
	bne	.L2334
.L2319:
	ldr	r5, [r4, #148]
	cmp	r9, r5
	mov	r0, r5
	sub	r8, r5, #36
	bne	.L2321
.L2320:
	mov	r1, r7
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L2316:
	mov	r0, r7
	add	r2, r4, #156
	ldr	r1, [r4, #160]
	b	.L2332
.L2334:
	ldr	r0, [r10]
	movw	r1, #:lower16:.LC214
	mov	r2, r8
	movt	r1, #:upper16:.LC214
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r9
	mov	r0, r5
	ldr	r1, [r4, #152]
	bl	__list_add
	b	.L2320
	.fnend
	.size	rmnet_smd_complete_epout, .-rmnet_smd_complete_epout
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_control_rx_tlet, %function
rmnet_control_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #164
	add	r7, r0, #124
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r0, #84]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #124]
	mov	r10, r0
	cmp	r5, r7
	beq	.L2340
	add	r8, r4, #108
	b	.L2336
.L2338:
	bl	list_del
	ldr	r3, [r4, #448]
	mov	r1, r10
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #448]
	bl	_raw_spin_unlock_irqrestore
	ldmdb	r5, {r1, r2}
	ldr	r0, [r4, #260]
	bl	smd_write
	mov	fp, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #-4]
	mov	r10, r0
	mov	r2, r8
	mov	r0, r5
	cmp	r3, fp
	bne	.L2346
	ldr	r1, [r4, #112]
	ldr	r3, [r4, #452]
	add	r3, r3, #1
	str	r3, [r4, #452]
	bl	__list_add
	ldr	r5, [r4, #124]
	cmp	r5, r7
	beq	.L2340
.L2336:
	ldr	r0, [r4, #260]
	bl	smd_write_avail
	ldr	r3, [r5, #-4]
	cmp	r0, r3
	mov	r0, r5
	bge	.L2338
	movw	r2, #:lower16:.LANCHOR2
	str	r3, [r4, #308]
	movw	r3, #2250
	movt	r2, #:upper16:.LANCHOR2
	ldrh	r3, [r2, r3]
	tst	r3, #4
	bne	.L2347
.L2337:
	mov	r1, r10
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L2340:
	mov	r3, #0
	str	r3, [r4, #308]
	b	.L2337
.L2346:
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC210
	movt	r1, #:upper16:.LC210
	add	r0, r0, #32
	bl	dev_err
	b	.L2337
.L2347:
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC215
	movt	r2, #:upper16:.LC215
	ldr	r0, .L2348
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L2337
.L2349:
	.align	2
.L2348:
	.word	.LANCHOR2+2232
	.fnend
	.size	rmnet_control_rx_tlet, .-rmnet_control_rx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_write_w, %function
grmnet_ctrl_smd_write_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r6, [r0, #16]
	add	r6, r6, #108
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r0, [r5, #-68]
	cmp	r0, #0
	beq	.L2351
	ldr	r4, [r5, #-28]
	sub	r8, r5, #28
	cmp	r8, r4
	bne	.L2352
	b	.L2351
.L2360:
	bl	list_del
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldmdb	r4, {r1, r2}
	ldr	r0, [r5, #-68]
	bl	smd_write
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-4]
	mov	r7, r0
	cmp	r3, r10
	bne	.L2359
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r9
	bl	kfree
	ldr	r0, [r5, #-68]
	ldr	r3, [r5, #24]
	cmp	r0, #0
	add	r3, r3, #1
	str	r3, [r5, #24]
	beq	.L2351
	ldr	r4, [r5, #-28]
	cmp	r8, r4
	beq	.L2351
.L2352:
	bl	smd_write_avail
	ldr	r3, [r4, #-4]
	sub	r9, r4, #8
	cmp	r0, r3
	mov	r0, r4
	bge	.L2360
.L2351:
	mov	r1, r7
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L2359:
	movw	r0, #:lower16:.LC216
	mov	r2, r10
	ldr	r1, .L2361
	movt	r0, #:upper16:.LC216
	bl	printk
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r9
	bl	kfree
	b	.L2351
.L2362:
	.align	2
.L2361:
	.word	.LANCHOR3+1172
	.fnend
	.size	grmnet_ctrl_smd_write_w, .-grmnet_ctrl_smd_write_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_complete_epout, %function
rmnet_mux_smd_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r4, #364]
	cmp	r3, #0
	beq	.L2386
	ldr	r3, [r1, #44]
	add	r8, r1, #36
	add	r6, r4, #368
	ldr	r9, [r4, #84]
	cmn	r3, #104
	beq	.L2385
	cmp	r3, #0
	beq	.L2367
	cmn	r3, #108
	beq	.L2385
	ldr	r2, [r0, #4]
	movw	r1, #:lower16:.LC217
	ldr	r0, [r9]
	movt	r1, #:upper16:.LC217
	ldr	lr, [r5, #4]
	ldr	ip, [r5, #48]
	add	r0, r0, #32
	stm	sp, {ip, lr}
	bl	dev_err
.L2385:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r1, [r4, #116]
	mov	r0, r8
	add	r2, r4, #112
.L2384:
	bl	__list_add
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock
.L2367:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r4, #176]
	cmp	r3, #0
	bne	.L2368
	ldr	r0, [r4, #128]
	bl	smd_write_avail
	ldr	r3, [r5, #48]
	cmp	r0, r3
	strcc	r3, [r4, #176]
	bcs	.L2387
.L2368:
	mov	r0, r8
	add	r2, r4, #120
	ldr	r1, [r4, #124]
	b	.L2384
.L2386:
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	ldr	r3, [r3, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	bx	r3	@ indirect register sibling call
.L2387:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r4, #128]
	ldr	r1, [r5]
	ldr	r2, [r5, #48]
	bl	smd_write
	ldr	r3, [r5, #48]
	cmp	r3, r0
	beq	.L2370
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC218
	movt	r1, #:upper16:.LC218
	add	r0, r0, #32
	bl	dev_err
.L2370:
	ldr	r3, [r4, #400]
	mov	r0, r6
	add	r9, r4, #112
	add	r3, r3, #1
	str	r3, [r4, #400]
	bl	_raw_spin_lock
	mov	r2, r9
	ldr	r1, [r4, #116]
	mov	r0, r8
	bl	__list_add
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r0, r6
	ldr	r10, [r4, #84]
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	b	.L2371
.L2373:
	bl	list_del
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #88]
	mov	r1, r8
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	r8, #0
	mov	r7, r0
	bne	.L2388
.L2371:
	ldr	r5, [r4, #112]
	cmp	r9, r5
	mov	r0, r5
	sub	r8, r5, #36
	bne	.L2373
.L2372:
	mov	r1, r7
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L2388:
	ldr	r0, [r10]
	movw	r1, #:lower16:.LC214
	mov	r2, r8
	movt	r1, #:upper16:.LC214
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r9
	mov	r0, r5
	ldr	r1, [r4, #116]
	bl	__list_add
	b	.L2372
	.fnend
	.size	rmnet_mux_smd_complete_epout, .-rmnet_mux_smd_complete_epout
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_complete_epin, %function
rmnet_smd_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	add	r7, r1, #36
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	add	r6, r4, #140
	add	r5, r4, #164
	cmn	r2, #104
	beq	.L2391
	cmp	r2, #0
	beq	.L2392
	cmn	r2, #108
	beq	.L2391
	ldr	r3, [r4, #84]
	movw	r1, #:lower16:.LC219
	movt	r1, #:upper16:.LC219
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L2392:
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #140]
	cmp	r3, r6
	beq	.L2409
	mov	r2, r6
	mov	r0, r7
	ldr	r1, [r4, #144]
	bl	__list_add
	ldr	r3, [r4, #424]
	add	r3, r3, #1
	str	r3, [r4, #424]
.L2396:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L2409:
	mov	r2, r6
	mov	r0, r7
	ldr	r1, [r4, #144]
	bl	__list_add
	ldr	r3, [r4, #424]
	add	r1, r4, #332
	mov	r0, #0
	add	r6, r4, #328
	add	r3, r3, #1
	str	r3, [r4, #424]
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L2396
	mov	r0, r6
	bl	__tasklet_schedule
	b	.L2396
.L2391:
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r2, r6
	mov	r0, r7
	ldr	r1, [r4, #144]
	bl	__list_add
	b	.L2396
	.fnend
	.size	rmnet_smd_complete_epin, .-rmnet_smd_complete_epin
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_complete_epin, %function
rmnet_mux_smd_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r1, #32]
	ldr	r3, [r5, #364]
	cmp	r3, #0
	beq	.L2428
	ldr	r2, [r1, #44]
	add	r7, r5, #104
	add	r6, r5, #368
	add	r4, r1, #36
	cmn	r2, #104
	beq	.L2413
	cmp	r2, #0
	beq	.L2414
	cmn	r2, #108
	beq	.L2413
	ldr	r3, [r5, #84]
	movw	r1, #:lower16:.LC220
	movt	r1, #:upper16:.LC220
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L2414:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r5, #104]
	mov	r2, r7
	cmp	r3, r7
	beq	.L2415
	mov	r0, r4
	ldr	r1, [r5, #108]
	bl	__list_add
.L2416:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L2428:
	mov	r6, r0
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L2413:
	mov	r0, r6
	bl	_raw_spin_lock
	mov	r2, r7
	mov	r0, r4
	ldr	r1, [r5, #108]
	bl	__list_add
	b	.L2416
.L2415:
	mov	r0, r4
	ldr	r1, [r5, #108]
	bl	__list_add
	add	r1, r5, #136
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r0, r5, #132
	bne	.L2416
	bl	__tasklet_schedule
	b	.L2416
	.fnend
	.size	rmnet_mux_smd_complete_epin, .-rmnet_mux_smd_complete_epin
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_setup, %function
rmnet_smd_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r0, #168]
	ldrh	r9, [r1, #4]	@ unaligned
	ldrh	r8, [r1, #2]	@ unaligned
	ldr	r7, [r2, #24]
	cmp	r3, #0
	ldrh	r6, [r1, #6]	@ unaligned
	ldr	r10, [r7, #4]
	beq	.L2441
	ldrh	r3, [r1]	@ unaligned
	movw	r2, #8482
	mov	r4, r1
	mov	r5, r0
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r2
	beq	.L2432
	movw	r2, #41217
	cmp	r3, r2
	beq	.L2433
	cmp	r3, #8448
	beq	.L2444
.L2431:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #2274
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	mvneq	r6, #94
	bne	.L2445
.L2429:
	mov	r0, r6
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2433:
	cmp	r8, #0
	bne	.L2431
	add	fp, r0, #164
	mov	r0, fp
	bl	_raw_spin_lock
	mov	r2, r5
	ldr	r3, [r2, #132]!
	cmp	r3, r2
	beq	.L2446
	mov	r0, r3
	str	r3, [sp, #20]
	bl	list_del
	mov	r0, fp
	bl	_raw_spin_unlock
	ldr	r3, [sp, #20]
	ldr	r0, [r10]
	ldmdb	r3, {r1, r2}
	bl	memcpy
	ldr	r3, [sp, #20]
	mov	r0, fp
	ldr	r6, [r3, #-4]
	bl	_raw_spin_lock
	ldr	r1, [r5, #116]
	add	r2, r5, #116
	ldr	r3, [sp, #20]
	cmp	r2, r1
	ldr	r1, [r5, #120]
	mov	r0, r3
	beq	.L2437
	bl	__list_add
.L2438:
	mov	r0, fp
	bl	_raw_spin_unlock
	movw	r3, #:lower16:rmnet_txcommand_complete
	str	r5, [r10, #32]
	movt	r3, #:upper16:rmnet_txcommand_complete
	str	r3, [r10, #28]
	b	.L2439
.L2444:
	movw	r3, #:lower16:rmnet_smd_command_complete
	str	r0, [r10, #32]
	movt	r3, #:upper16:rmnet_smd_command_complete
	str	r3, [r10, #28]
.L2435:
	ldrb	r3, [r10, #26]	@ zero_extendqisi2
	str	r6, [r10, #4]
	mov	r1, r10
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r10, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	bge	.L2429
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC156
	mov	r2, r6
	movt	r1, #:upper16:.LC156
	add	r0, r0, #32
	bl	dev_err
	b	.L2429
.L2432:
	ands	r1, r8, #1
	ldr	r0, [r0, #260]
	movne	r2, #0
	movne	r1, #2
	moveq	r2, #2
	bl	smd_tiocmset
	mov	r6, r0
.L2439:
	cmp	r6, #0
	bge	.L2435
	b	.L2429
.L2437:
	bl	__list_add
	mov	r0, r8
	add	r1, r5, #268
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r0, r5, #264
	bne	.L2438
	bl	__tasklet_schedule
	b	.L2438
.L2445:
	ldr	r1, [r7]
	str	r8, [sp, #4]
	movw	r2, #:lower16:.LC17
	ldrb	r3, [r4]	@ zero_extendqisi2
	str	r9, [sp, #8]
	movt	r2, #:upper16:.LC17
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	add	r0, r0, #2256
	add	r1, r1, #32
	str	ip, [sp]
	str	r6, [sp, #12]
	mvn	r6, #94
	bl	__dynamic_dev_dbg
	b	.L2429
.L2446:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC169
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC169
	ldrb	r2, [r4]	@ zero_extendqisi2
	strd	r8, [sp]
	str	r6, [sp, #8]
	add	r0, r0, #32
	bl	_dev_info
	mov	r0, fp
	bl	_raw_spin_unlock
	b	.L2431
.L2441:
	mvn	r6, #106
	b	.L2429
	.fnend
	.size	rmnet_smd_setup, .-rmnet_smd_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_unbind, %function
rmnet_smd_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	add	r0, r1, #284
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	bl	tasklet_kill
	add	r0, r4, #264
	bl	tasklet_kill
	add	r0, r4, #348
	bl	tasklet_kill
	add	r0, r4, #328
	bl	tasklet_kill
	ldr	r0, [r4, #388]
	bl	flush_workqueue
	mov	r0, r4
	bl	rmnet_smd_free_buf
	mov	r3, #0
	ldr	r0, [r4, #388]
	str	r3, [r4, #88]
	str	r3, [r4, #92]
	str	r3, [r4, #96]
	bl	destroy_workqueue
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3412]
	bl	debugfs_remove_recursive
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	rmnet_smd_unbind, .-rmnet_smd_unbind
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_exit, %function
ghsuart_ctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3416]
	b	debugfs_remove_recursive
	.fnend
	.size	ghsuart_ctrl_exit, .-ghsuart_ctrl_exit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_exit, %function
ghsuart_data_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3420]
	b	debugfs_remove_recursive
	.fnend
	.size	ghsuart_data_exit, .-ghsuart_data_exit
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_cleanup, %function
diag_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR0
	str	r10, [sp, #24]
	movt	r8, #:upper16:.LANCHOR0
	str	lr, [sp, #28]
	ldr	r0, [r3, #3424]
	bl	debugfs_remove_recursive
	ldr	r5, [r8]
	cmp	r5, r8
	ldr	r4, [r5]
	beq	.L2451
	ldr	r6, .L2458
	b	.L2452
.L2454:
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, r8
	ldr	r3, [r4]
	beq	.L2451
.L2455:
	mov	r5, r4
	mov	r4, r3
.L2452:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #12]
	mov	r7, r0
	mov	r0, r6
	mov	r1, r7
	cmp	r3, #0
	bne	.L2454
	mov	r0, r5
	sub	r9, r5, #4
	bl	list_del
	mov	r0, r9
	bl	kfree
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, r8
	ldr	r3, [r4]
	bne	.L2455
.L2451:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2459:
	.align	2
.L2458:
	.word	.LANCHOR1+3428
	.fnend
	.size	diag_function_cleanup, .-diag_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_function_cleanup, %function
rmnet_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r3, [r4, #3432]
	str	lr, [sp, #12]
	cmp	r3, #0
	beq	.L2461
	ldr	r6, .L2468
	mov	r5, #0
.L2462:
	ldr	r0, [r6, #20]
	add	r5, r5, #1
	add	r6, r6, #24
	bl	kfree
	ldr	r3, [r4, #3432]
	cmp	r5, r3
	bcc	.L2462
.L2461:
	ldr	r0, [r4, #3436]
	bl	debugfs_remove_recursive
	mov	r3, #0
	ldr	r6, [sp, #8]
	str	r3, [r4, #3432]
	str	r3, [r4, #3440]
	str	r3, [r4, #3444]
	str	r3, [r4, #3448]
	str	r3, [r4, #3452]
	str	r3, [r4, #3456]
	str	r3, [r4, #3460]
	str	r3, [r4, #3464]
	str	r3, [r4, #3468]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2469:
	.align	2
.L2468:
	.word	.LANCHOR1+3316
	.fnend
	.size	rmnet_function_cleanup, .-rmnet_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_data_tx_tlet, %function
rmnet_data_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #164
	strd	r8, [sp, #16]
	add	r8, r0, #140
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r0, #84]
	b	.L2474
.L2484:
	ldr	r0, [r4, #324]
	bl	smd_read_avail
	cmp	r0, r7
	mov	r0, r6
	blt	.L2470
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #140]
	mov	r10, r0
	cmp	r8, r5
	mov	r0, r5
	sub	fp, r5, #36
	beq	.L2482
	bl	list_del
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r7
	ldr	r1, [r5, #-36]
	ldr	r0, [r4, #324]
	bl	smd_read
	str	r0, [r5, #-32]
	ldr	r0, [r4, #92]
	mov	r2, #32
	mov	r1, fp
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	mov	r0, r6
	bne	.L2483
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #428]
	mov	r1, r0
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #428]
	bl	_raw_spin_unlock_irqrestore
.L2474:
	ldr	r0, [r4, #324]
	bl	smd_cur_packet_size
	subs	r7, r0, #0
	bne	.L2484
.L2470:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2482:
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2298
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	beq	.L2470
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC221
	ldr	r0, .L2485
	movt	r2, #:upper16:.LC221
	add	r1, r1, #32
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	__dynamic_dev_dbg
.L2483:
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC222
	movt	r1, #:upper16:.LC222
	add	r0, r0, #32
	bl	dev_err
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r1, [r4, #144]
	mov	r0, r5
	mov	r2, r8
	bl	__list_add
	mov	r1, r7
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L2486:
	.align	2
.L2485:
	.word	.LANCHOR2+2280
	.fnend
	.size	rmnet_data_tx_tlet, .-rmnet_data_tx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_control_tx_tlet, %function
rmnet_control_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #:lower16:.LC1
	mov	r4, r0
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LC1
	add	r6, r0, #164
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #84]
	.pad #12
	sub	sp, sp, #12
	str	r3, [sp]
	str	r2, [sp, #4]
.L2492:
	add	r8, r4, #116
.L2491:
	add	r7, r4, #132
.L2490:
	ldr	r0, [r4, #260]
	add	r5, r4, #172
	bl	smd_cur_packet_size
	subs	r9, r0, #0
	beq	.L2487
	ldr	r0, [r4, #260]
	bl	smd_read_avail
	cmp	r0, r9
	mov	r0, r6
	blt	.L2487
	bl	_raw_spin_lock_irqsave
	ldr	r10, [r4, #116]
	mov	fp, r0
	cmp	r10, r8
	mov	r0, r10
	beq	.L2499
	bl	list_del
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r9
	ldr	r1, [r10, #-8]
	ldr	r0, [r4, #260]
	bl	smd_read
	str	r0, [r10, #-4]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r2, r7
	ldr	r1, [r4, #136]
	ldr	r3, [r4, #444]
	mov	r0, r10
	add	r3, r3, #1
	str	r3, [r4, #444]
	bl	__list_add
	mov	r1, r9
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r9, [r4, #84]
	ldr	r3, [r4, #100]
	ldr	r3, [r3]
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r5]
	add	r2, r2, #1
	strex	r1, r2, [r5]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #1
	bne	.L2490
	mov	r1, #0
	mvn	r0, #94
	strb	r0, [r3]
	strb	r2, [r3, #1]
	mov	r2, #32
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	r0, [r4, #104]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	strb	r1, [r3, #6]
	strb	r1, [r3, #7]
	ldrd	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bge	.L2491
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r1, r3, [r5]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r9]
	ldr	r1, [sp]
	add	r0, r0, #32
	bl	dev_err
	b	.L2492
.L2487:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2499:
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LC223
	movt	r1, #:upper16:.LC223
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mov	r1, fp
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_control_tx_tlet, .-rmnet_control_tx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_tx_pull, %function
gsmd_tx_pull:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r4, #:lower16:.LANCHOR2
	movw	r3, #2322
	movt	r4, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	sub	r2, r0, #52
	strd	r8, [sp, #16]
	mov	r5, r0
	sub	r9, r0, #8
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r4, r3]
	.pad #20
	sub	sp, sp, #20
	ldr	r7, [r0, #20]
	str	r2, [sp, #12]
	tst	r3, #4
	bne	.L2536
.L2501:
	sub	r6, r5, #48
	mov	r0, r6
	bl	_raw_spin_lock_irq
	ldr	r3, [r5, #16]
	cmp	r3, #0
	beq	.L2537
	ldr	r0, [r7]
	ldr	r8, [r3, #88]
	cmp	r0, #0
	beq	.L2512
	ldr	r3, [r5, #-8]
	cmp	r3, r9
	bne	.L2517
	b	.L2512
.L2539:
	ldr	r4, [r5, #-8]
	mov	r0, r4
	sub	fp, r4, #36
	bl	list_del
	cmp	r10, #2048
	ldr	r1, [r4, #-36]
	movlt	r2, r10
	movge	r2, #2048
	ldr	r0, [r7]
	bl	smd_read
	str	r0, [r4, #-32]
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	ldr	r3, [r8, #8]
	mov	r1, fp
	mov	r2, #208
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irq
	cmp	r10, #0
	bne	.L2538
	ldr	r2, [r4, #-32]
	ldr	r3, [r5, #120]
	add	r3, r3, r2
	str	r3, [r5, #120]
	ldr	r0, [r7]
	cmp	r0, #0
	beq	.L2516
	ldr	r3, [r5, #-8]
	cmp	r9, r3
	beq	.L2516
.L2517:
	bl	smd_read_avail
	subs	r10, r0, #0
	bne	.L2539
.L2516:
	ldr	r3, [r5, #16]
	cmp	r3, #0
	bne	.L2512
.L2518:
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq
.L2512:
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L2518
	ldr	r3, [r5, #-8]
	cmp	r9, r3
	beq	.L2518
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, r5
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3400]
	bl	queue_work_on
	b	.L2518
.L2537:
	movw	r3, #2346
	ldrh	r3, [r4, r3]
	tst	r3, #4
	bne	.L2540
.L2503:
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	sub	r3, r5, #52
	cmp	r3, #0
	beq	.L2500
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
	cmp	r0, #0
	bne	.L2507
.L2500:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2508:
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
	bl	smd_read
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
.L2507:
	bl	smd_read_avail
	subs	r2, r0, #0
	mov	r1, #0
	bne	.L2508
	b	.L2500
.L2536:
	ldr	ip, [r5, #-52]
	movw	r1, #:lower16:.LC224
	mov	r3, r2
	movt	r1, #:upper16:.LC224
	ldr	r2, .L2542
	add	r0, r4, #2304
	str	ip, [sp]
	str	r9, [sp, #4]
	bl	__dynamic_pr_debug
	b	.L2501
.L2540:
	movw	r1, #:lower16:.LC225
	ldr	r2, .L2542
	movt	r1, #:upper16:.LC225
	ldr	r0, .L2542+4
	bl	__dynamic_pr_debug
	b	.L2503
.L2538:
	movw	r0, #:lower16:.LC226
	ldr	r3, [r5, #-52]
	str	r10, [sp]
	movt	r0, #:upper16:.LC226
	ldr	r1, .L2542
	ldr	r2, [sp, #12]
	bl	printk
	ldr	r3, [r5, #16]
	cmp	r3, #0
	beq	.L2541
	mov	r0, r4
	mov	r1, r9
	ldr	r2, [r5, #-8]
	bl	__list_add
	b	.L2516
.L2541:
	ldr	r0, [r4, #-36]
	bl	kfree
	ldr	r3, [r8, #8]
	mov	r1, fp
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	b	.L2516
.L2543:
	.align	2
.L2542:
	.word	.LANCHOR3+1196
	.word	.LANCHOR2+2328
	.fnend
	.size	gsmd_tx_pull, .-gsmd_tx_pull
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_data_tx_tlet, %function
rmnet_mux_smd_data_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r0, #84]
	ldr	r3, [r0, #372]
	cmp	r3, #0
	beq	.L2544
	mov	r4, r0
	add	r7, r0, #368
	add	r8, r0, #104
	b	.L2548
.L2562:
	ldr	r0, [r4, #128]
	bl	smd_read_avail
	cmp	r0, r6
	mov	r0, r7
	blt	.L2544
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #104]
	mov	r10, r0
	cmp	r8, r5
	mov	r0, r5
	sub	fp, r5, #36
	beq	.L2560
	bl	list_del
	mov	r1, r10
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r6
	ldr	r1, [r5, #-36]
	ldr	r0, [r4, #128]
	bl	smd_read
	str	r0, [r5, #-32]
	ldr	r0, [r4, #92]
	mov	r1, fp
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L2561
	ldr	r2, [r4, #372]
	ldr	r3, [r4, #408]
	cmp	r2, #0
	add	r3, r3, #1
	str	r3, [r4, #408]
	beq	.L2544
.L2548:
	ldr	r0, [r4, #128]
	bl	smd_cur_packet_size
	subs	r6, r0, #0
	bne	.L2562
.L2544:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2560:
	mov	r0, r7
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #2370
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	beq	.L2544
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC227
	add	r0, r0, #2352
	movt	r2, #:upper16:.LC227
	add	r1, r1, #32
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	__dynamic_dev_dbg
.L2561:
	ldr	r3, [r9]
	movw	r1, #:lower16:.LC222
	mov	r2, r0
	movt	r1, #:upper16:.LC222
	add	r0, r3, #32
	bl	dev_err
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	ldr	r1, [r4, #108]
	mov	r0, r5
	mov	r2, r8
	bl	__list_add
	mov	r1, r6
	mov	r0, r7
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_mux_smd_data_tx_tlet, .-rmnet_mux_smd_data_tx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_disconnect_work, %function
gsmd_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2394
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR2
	str	lr, [sp, #4]
	mov	r4, r0
	ldrh	r3, [r3, r2]
	.pad #8
	sub	sp, sp, #8
	tst	r3, #4
	bne	.L2569
.L2564:
	ldr	r3, [r4, #-56]
	ldr	r0, [r3]
	bl	smd_close
	ldr	r3, [r4, #-56]
	mov	r2, #0
	str	r2, [r3]
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L2569:
	ldr	ip, [r4, #-128]
	movw	r1, #:lower16:.LC228
	sub	r3, r0, #128
	movt	r1, #:upper16:.LC228
	ldr	r2, .L2570
	ldr	r0, .L2570+4
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L2564
.L2571:
	.align	2
.L2570:
	.word	.LANCHOR3+1212
	.word	.LANCHOR2+2376
	.fnend
	.size	gsmd_disconnect_work, .-gsmd_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_disconnect_work, %function
rmnet_smd_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	sub	r0, r0, #124
	strd	r6, [sp, #8]
	mov	r5, #0
	mov	r7, r4
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	tasklet_kill
	sub	r0, r4, #144
	bl	tasklet_kill
	sub	r0, r4, #60
	bl	tasklet_kill
	sub	r0, r4, #80
	bl	tasklet_kill
	ldr	r0, [r4, #-148]
	bl	smd_close
	str	r5, [r4, #-104]
	ldr	r0, [r4, #-84]
	bl	smd_close
	str	r5, [r4, #-236]
	str	r5, [r4, #-40]
	ldr	r6, [r7, #-252]!
	cmp	r6, r7
	ldr	r5, [r6]
	beq	.L2573
	sub	r8, r4, #260
.L2574:
	mov	r0, r6
	bl	list_del
	mov	r0, r6
	mov	r2, r8
	ldr	r1, [r4, #-256]
	bl	__list_add
	cmp	r7, r5
	mov	r6, r5
	ldr	r5, [r5]
	bne	.L2574
.L2573:
	mov	r7, r4
	ldr	r6, [r7, #-284]!
	cmp	r6, r7
	ldr	r5, [r6]
	beq	.L2575
	sub	r8, r4, #300
.L2576:
	mov	r0, r6
	bl	list_del
	mov	r0, r6
	mov	r2, r8
	ldr	r1, [r4, #-296]
	bl	__list_add
	cmp	r7, r5
	mov	r6, r5
	ldr	r5, [r5]
	bne	.L2576
.L2575:
	mov	r7, r4
	ldr	r6, [r7, #-276]!
	cmp	r6, r7
	ldr	r5, [r6]
	beq	.L2577
	sub	r8, r4, #292
.L2578:
	mov	r0, r6
	bl	list_del
	mov	r0, r6
	mov	r2, r8
	ldr	r1, [r4, #-288]
	bl	__list_add
	cmp	r7, r5
	mov	r6, r5
	ldr	r5, [r5]
	bne	.L2578
.L2577:
	ldrb	r3, [r4, #-152]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L2572
	sub	r0, r4, #232
	bl	platform_driver_unregister
	mov	r3, #0
	strb	r3, [r4, #-152]
.L2572:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_smd_disconnect_work, .-rmnet_smd_disconnect_work
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	cleanup, %function
cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, .L2588
	b	platform_driver_unregister
.L2589:
	.align	2
.L2588:
	.word	.LANCHOR0+292
	.fnend
	.size	cleanup, .-cleanup
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_read_w, %function
grmnet_ctrl_smd_read_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #32]
	.pad #36
	sub	sp, sp, #36
	add	r10, r3, #108
	str	r3, [sp, #4]
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	ldr	r0, [r4, #-52]
	cmp	r0, #0
	beq	.L2591
	mov	r3, sp
	bic	r9, r3, #8128
	bic	r9, r9, #63
.L2602:
	bl	smd_cur_packet_size
	subs	r7, r0, #0
	ble	.L2591
	mov	r1, r5
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	mov	r1, #208
	mov	r0, r7
	bl	__kmalloc
	subs	r8, r0, #0
	beq	.L2590
	mov	r5, #0
.L2600:
	ldr	r0, [r4, #-52]
	bl	smd_read_avail
	subs	fp, r0, #0
	bne	.L2593
	ldr	r3, [r4, #-52]
	cmp	r3, #0
	beq	.L2594
	ldr	r0, [r9, #12]
	movw	r3, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r3, #:upper16:autoremove_wake_function
	sub	r6, r4, #28
	str	fp, [sp, #12]
	str	r1, [sp, #24]
	str	r0, [sp, #16]
	str	r3, [sp, #20]
	str	r1, [sp, #28]
	b	.L2596
.L2624:
	ldr	r3, [r4, #-52]
	cmp	r3, #0
	beq	.L2595
	bl	schedule
.L2596:
	mov	r2, #2
	add	r1, sp, #12
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r0, [r4, #-52]
	bl	smd_read_avail
	subs	fp, r0, #0
	beq	.L2624
.L2595:
	add	r1, sp, #12
	mov	r0, r6
	bl	finish_wait
.L2593:
	cmp	fp, #0
	ldr	r3, [r4, #-52]
	blt	.L2594
	cmp	r3, #0
	beq	.L2594
	add	r1, fp, r5
	cmp	r1, r7
	bgt	.L2625
	mov	r2, fp
	mov	r0, r3
	add	r1, r8, r5
	bl	smd_read
	subs	r2, r0, #0
	ble	.L2626
	add	r5, r5, r2
	cmp	r7, r5
	bgt	.L2600
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #4]
	mov	r5, r0
	ldr	r0, [r3, #104]
	cmp	r0, #0
	beq	.L2601
	ldr	r3, [r0, #92]
	cmp	r3, #0
	beq	.L2601
	mov	r2, r7
	mov	r1, r8
	blx	r3
	ldr	r3, [r4, #44]
	add	r3, r3, #1
	str	r3, [r4, #44]
.L2601:
	mov	r0, r8
	bl	kfree
	ldr	r0, [r4, #-52]
	cmp	r0, #0
	bne	.L2602
.L2591:
	mov	r1, r5
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
.L2590:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2594:
	movw	r0, #:lower16:.LC229
	ldr	r1, .L2627
	mov	r2, fp
	movt	r0, #:upper16:.LC229
	bl	printk
	mov	r0, r8
	bl	kfree
	b	.L2590
.L2626:
	movw	r0, #:lower16:.LC231
	ldr	r1, .L2627
	movt	r0, #:upper16:.LC231
	bl	printk
	mov	r0, r8
	bl	kfree
	b	.L2590
.L2625:
	movw	r0, #:lower16:.LC230
	ldr	r1, .L2627
	movt	r0, #:upper16:.LC230
	bl	printk
	mov	r0, r8
	bl	kfree
	b	.L2590
.L2628:
	.align	2
.L2627:
	.word	.LANCHOR3+1236
	.fnend
	.size	grmnet_ctrl_smd_read_w, .-grmnet_ctrl_smd_read_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_disable, %function
conn_gadget_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC232
	str	lr, [sp, #8]
	movt	r0, #:upper16:.LC232
	ldr	r1, [r4, #84]
	movw	r5, #:lower16:.LANCHOR2
	.pad #12
	sub	sp, sp, #12
	bl	printk
	movt	r5, #:upper16:.LANCHOR2
	movw	r2, #2418
	ldr	r3, [r4, #100]
	ldrh	r1, [r5, r2]
	mov	r0, #0
	mov	r2, #1
	str	r0, [r4, #100]
	str	r2, [r4, #104]
	tst	r1, #4
	str	r3, [r4, #212]
	bne	.L2636
.L2630:
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #200
	bl	__wake_up
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #144
	bl	__wake_up
	movw	r3, #2442
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L2637
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L2636:
	ldr	r3, .L2638
	movw	r1, #:lower16:.LC233
	add	r0, r5, #2400
	movt	r1, #:upper16:.LC233
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L2630
.L2637:
	ldr	r2, .L2638
	movw	r1, #:lower16:.LC234
	ldr	r0, .L2638+4
	movt	r1, #:upper16:.LC234
	ldr	r3, [r4]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	__dynamic_pr_debug
.L2639:
	.align	2
.L2638:
	.word	.LANCHOR3+1260
	.word	.LANCHOR2+2424
	.fnend
	.size	conn_gadget_function_disable, .-conn_gadget_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_function_disable, %function
acc_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2466
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR2
	str	lr, [sp, #4]
	mov	r4, r0
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L2646
.L2641:
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	ldr	r2, [r4, #92]
	and	r3, r3, #254
	orr	r3, r3, #2
	mov	r0, r2
	strb	r3, [r4, #100]
	ldr	r3, [r2, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	lr, [sp, #4]
	add	r0, r4, #1664
	mov	r3, #0
	ldr	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	add	sp, sp, #8
	b	__wake_up
.L2646:
	ldr	r1, [r4, #84]
	movw	r2, #:lower16:.LC235
	add	r0, r3, #2448
	movt	r2, #:upper16:.LC235
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L2641
	.fnend
	.size	acc_function_disable, .-acc_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_out, %function
acc_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, #1
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r4, [r3, #2488]
	str	r2, [r4, #1696]
	ldr	r3, [r1, #44]
	cmn	r3, #108
	beq	.L2654
.L2648:
	add	r0, r4, #1664
	mov	r3, #0
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	mov	r2, #1
	mov	r1, #3
	add	sp, sp, #8
	b	__wake_up
.L2654:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2490
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L2655
.L2649:
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	and	r3, r3, #254
	orr	r3, r3, #2
	strb	r3, [r4, #100]
	b	.L2648
.L2655:
	movw	r1, #:lower16:.LC236
	ldr	r0, .L2656
	movt	r1, #:upper16:.LC236
	bl	__dynamic_pr_debug
	b	.L2649
.L2657:
	.align	2
.L2656:
	.word	.LANCHOR2+2472
	.fnend
	.size	acc_complete_out, .-acc_complete_out
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_ctrlrequest, %function
mtp_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r2
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r3, [r2]	@ zero_extendqisi2
	.pad #16
	sub	sp, sp, #16
	ldrh	r8, [r2, #2]	@ unaligned
	ldrh	r6, [r2, #6]	@ unaligned
	cmp	r3, #128
	beq	.L2687
	and	r3, r3, #96
	ldrh	r9, [r2, #4]	@ unaligned
	cmp	r3, #64
	beq	.L2688
	cmp	r3, #32
	bne	.L2662
	movw	r7, #:lower16:.LANCHOR2
	movw	r1, #2538
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	movt	r7, #:upper16:.LANCHOR2
	movw	r2, #:lower16:.LANCHOR1
	ldrh	r1, [r7, r1]
	movt	r2, #:upper16:.LANCHOR1
	ldr	r10, [r2, #2500]
	tst	r1, #4
	bne	.L2689
.L2666:
	cmp	r3, #100
	beq	.L2690
	cmp	r3, #103
	bne	.L2662
	orrs	r3, r9, r8
	bne	.L2662
	ldr	r1, [r5, #4]
	mov	r2, #4
	movw	r3, #2586
	ldr	r4, [r1]
	strh	r2, [r4]	@ movhi
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L2691
.L2670:
	add	r7, r10, #88
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r10, #104]
	movw	r2, #8217
	movw	r3, #8193
	mov	r1, r0
	mov	r0, r7
	cmp	ip, #3
	moveq	r3, r2
	strh	r3, [r4, #2]	@ movhi
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #4
	cmp	r6, r0
	mov	r4, r0
	movls	r6, #0
	movhi	r6, #1
.L2663:
	ldr	r3, [r5, #4]
	mov	r2, #32
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfi	r1, r6, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r5, #4]
	str	r0, [r3, #4]
	ldr	r3, [r5]
	ldr	r1, [r5, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L2692
.L2658:
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2688:
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #2514
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	bne	.L2693
.L2665:
	cmp	r3, #1
	bne	.L2662
	ldrsb	r3, [r4]
	cmp	r3, #0
	bge	.L2662
	sub	r9, r9, #4
	cmp	r9, #1
	bhi	.L2662
	ldr	r1, .L2696
	cmp	r6, #40
	ldr	r3, [r5, #4]
	movcc	r4, r6
	movcs	r4, #40
.L2686:
	mov	r2, r4
	ldr	r0, [r3]
	bl	memcpy
	cmp	r4, r6
	mov	r0, r4
	movge	r6, #0
	movlt	r6, #1
	b	.L2663
.L2687:
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #6
	beq	.L2660
.L2662:
	mvn	r4, #94
	b	.L2658
.L2692:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC241
	movt	r1, #:upper16:.LC241
	ldr	r2, .L2696+4
	add	r0, r0, #32
	bl	dev_err
	b	.L2658
.L2690:
	orrs	r3, r9, r8
	bne	.L2662
	movw	r3, #2562
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L2694
.L2668:
	add	r4, r10, #88
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r10, #104]
	mov	r7, r0
	cmp	r3, #2
	beq	.L2695
.L2669:
	mov	r0, r4
	mov	r1, r7
	mov	r4, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	mov	r6, #0
	b	.L2663
.L2660:
	lsr	r3, r8, #8
	cmp	r3, #3
	bne	.L2662
	uxtb	r8, r8
	cmp	r8, #238
	bne	.L2662
	cmp	r6, #18
	ldr	r1, .L2696+8
	movcc	r4, r6
	movcs	r4, #18
	ldr	r3, [r5, #4]
	b	.L2686
.L2689:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC238
	str	r9, [sp]
	movt	r2, #:upper16:.LC238
	ldr	r0, .L2696+12
	str	r8, [sp, #4]
	str	r6, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	b	.L2666
.L2691:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC240
	movt	r2, #:upper16:.LC240
	ldr	r0, .L2696+16
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L2670
.L2693:
	ldr	r1, [r1]
	movw	r2, #:lower16:.LC237
	add	r0, r0, #2496
	movt	r2, #:upper16:.LC237
	str	r9, [sp]
	str	r8, [sp, #4]
	str	r6, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	b	.L2665
.L2695:
	mov	r8, #3
	add	r0, r10, #132
	mov	r1, r8
	mov	r3, #0
	mov	r2, #1
	str	r8, [r10, #104]
	bl	__wake_up
	mov	r1, r8
	add	r0, r10, #144
	mov	r3, #0
	mov	r2, #1
	bl	__wake_up
	b	.L2669
.L2694:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC239
	movt	r2, #:upper16:.LC239
	ldr	r0, .L2696+20
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L2668
.L2697:
	.align	2
.L2696:
	.word	.LANCHOR0+392
	.word	.LANCHOR3+1292
	.word	.LANCHOR0+372
	.word	.LANCHOR2+2520
	.word	.LANCHOR2+2568
	.word	.LANCHOR2+2544
	.fnend
	.size	mtp_function_ctrlrequest, .-mtp_function_ctrlrequest
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_disable, %function
mtp_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2610
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L2704
.L2699:
	ldr	r0, [r4, #92]
	mov	r5, #0
	str	r5, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r6, [sp, #8]
	mov	r3, r5
	add	r0, r4, #132
	mov	r2, #1
	ldrd	r4, [sp]
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L2704:
	ldr	r1, [r4, #84]
	movw	r2, #:lower16:.LC242
	add	r0, r3, #2592
	movt	r2, #:upper16:.LC242
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L2699
	.fnend
	.size	mtp_function_disable, .-mtp_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_complete_out, %function
mtp_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #2500]
	str	r2, [r0, #176]
	ldr	r3, [r1, #44]
	add	r0, r0, #132
	mov	r2, #1
	mov	r1, #3
	cmp	r3, #0
	movne	r3, #4
	strne	r3, [r0, #-28]
	mov	r3, #0
	b	__wake_up
	.fnend
	.size	mtp_complete_out, .-mtp_complete_out
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_setup, %function
ccid_function_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r2, [r0, #20]
	.pad #20
	sub	sp, sp, #20
	ldr	r3, [r0, #96]
	ldrh	r7, [r1, #4]	@ unaligned
	ldrh	r8, [r1, #2]	@ unaligned
	ldr	r4, [r2, #24]
	cmp	r3, #0
	ldrh	r6, [r1, #6]	@ unaligned
	ldr	r5, [r4, #4]
	beq	.L2718
	ldrh	ip, [r1]	@ unaligned
	movw	r3, #41218
	mov	lr, r0
	ldrb	r2, [r1]	@ zero_extendqisi2
	rev16	ip, ip
	uxth	ip, ip
	cmp	ip, r3
	beq	.L2713
	movw	r3, #41219
	cmp	ip, r3
	beq	.L2714
	movw	r3, #8449
	cmp	ip, r3
	beq	.L2724
.L2712:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #2634
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	mvneq	r4, #94
	bne	.L2725
.L2710:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L2714:
	ldr	r3, [r5, #4]
	cmp	r6, r3
	bhi	.L2712
	movw	r3, #:lower16:.LANCHOR0
	ldr	r2, [r5]
	cmp	r6, #4
	movt	r3, #:upper16:.LANCHOR0
	movcc	r9, r6
	ldr	r3, [r3, #451]	@ unaligned
	movcs	r9, #4
	str	r3, [r2]
	b	.L2716
.L2724:
	cmp	r6, #0
	bne	.L2712
	lsr	r3, r8, #8
	mov	r1, #1
	mov	r2, r1
	strb	r1, [lr, #140]
	add	r0, r0, #128
	mov	r4, r6
	strb	r8, [lr, #141]
	strb	r3, [lr, #142]
	mov	r3, r6
	strb	r6, [lr, #143]
	str	r1, [lr, #144]
	mov	r1, #3
	bl	__wake_up
	b	.L2710
.L2713:
	ldr	r3, [r5, #4]
	cmp	r6, r3
	bhi	.L2712
	movw	r3, #:lower16:.LANCHOR0
	ldr	r2, [r5]
	cmp	r6, #4
	movt	r3, #:upper16:.LANCHOR0
	movcc	r9, r6
	ldr	r3, [r3, #442]	@ unaligned
	movcs	r9, #4
	str	r3, [r2]
.L2716:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #2658
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L2726
.L2717:
	str	r9, [r5, #4]
	ldr	r3, [r4]
	mov	r1, r5
	mov	r2, #32
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L2710
	movw	r0, #:lower16:.LC244
	mov	r1, r4
	movt	r0, #:upper16:.LC244
	bl	printk
	b	.L2710
.L2725:
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC17
	str	r8, [sp]
	movt	r1, #:upper16:.LC17
	str	r7, [sp, #4]
	ldr	r0, .L2727
	str	r6, [sp, #8]
	mvn	r4, #94
	bl	__dynamic_pr_debug
	b	.L2710
.L2726:
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	str	r8, [sp]
	add	r0, r0, #2640
	ldrb	r2, [r1]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC243
	str	r7, [sp, #4]
	movt	r1, #:upper16:.LC243
	str	r6, [sp, #8]
	bl	__dynamic_pr_debug
	b	.L2717
.L2718:
	mvn	r4, #106
	b	.L2710
.L2728:
	.align	2
.L2727:
	.word	.LANCHOR2+2616
	.fnend
	.size	ccid_function_setup, .-ccid_function_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_complete_out, %function
ccid_bulk_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #44]
	movw	r3, #:lower16:.LANCHOR1
	mov	ip, #1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #3472]
	cmp	r2, #0
	mov	r2, ip
	movne	r3, #1
	add	r0, r1, #160
	str	ip, [r1, #188]
	strne	r3, [r1, #148]
	mov	r3, #0
	mov	r1, #3
	b	__wake_up
	.fnend
	.size	ccid_bulk_complete_out, .-ccid_bulk_complete_out
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_disable, %function
adb_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2682
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L2740
.L2735:
	ldr	r0, [r4, #92]
	mov	r5, #0
	mov	r6, #1
	str	r5, [r4, #100]
	str	r6, [r4, #104]
	strb	r5, [r4, #160]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	lr, [sp, #12]
	mov	r3, r5
	mov	r2, r6
	add	r0, r4, #128
	mov	r1, #3
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #16
	b	__wake_up
.L2740:
	ldr	r3, [r4, #84]
	movw	r2, #:lower16:.LC245
	movt	r2, #:upper16:.LC245
	ldr	r0, .L2741
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L2735
.L2742:
	.align	2
.L2741:
	.word	.LANCHOR2+2664
	.fnend
	.size	adb_function_disable, .-adb_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_complete_out, %function
adb_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3476]
	str	r2, [r0, #156]
	ldr	r3, [r1, #44]
	add	r0, r0, #128
	mov	r1, #3
	cmp	r3, #0
	cmnne	r3, #104
	mov	r3, #0
	strne	r2, [r0, #-24]
	mov	r2, #1
	b	__wake_up
	.fnend
	.size	adb_complete_out, .-adb_complete_out
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_setup, %function
acm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r1]	@ unaligned
	movw	r1, #8482
	ldr	r0, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldrh	r2, [r4, #2]	@ unaligned
	ldrh	r8, [r4, #4]	@ unaligned
	rev16	r3, r3
	ldrh	r9, [r4, #6]	@ unaligned
	uxth	r3, r3
	ldr	r7, [r0, #24]
	uxth	r10, r2
	cmp	r3, r1
	ldr	r5, [r7, #4]
	beq	.L2750
	movw	r2, #41249
	cmp	r3, r2
	beq	.L2751
	movw	r2, #8480
	cmp	r3, r2
	beq	.L2765
.L2759:
	mvn	r4, #94
.L2748:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2765:
	cmp	r9, #7
	bne	.L2759
	ldrb	r3, [r6, #144]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L2759
	ldr	r2, [r7]
	movw	r3, #:lower16:acm_complete_set_line_coding
	mov	fp, r9
	movt	r3, #:upper16:acm_complete_set_line_coding
	ldr	r2, [r2, #4]
	str	r6, [r2]
	str	r3, [r5, #28]
.L2753:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #2706
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L2766
.L2754:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	fp, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L2748
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC247
	mov	r3, r4
	ldrb	r2, [r6, #146]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC247
	add	r0, r0, #32
	bl	dev_err
	b	.L2748
.L2751:
	ldrb	r3, [r6, #144]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L2759
	cmp	r9, #7
	add	r1, r6, #160
	ldr	r0, [r5]
	movcc	fp, r9
	movcs	fp, #7
	mov	r2, fp
	bl	memcpy
	b	.L2753
.L2750:
	ldrb	r3, [r6, #144]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L2759
	movw	ip, #:lower16:.LANCHOR1
	mov	lr, #1
	strh	r2, [r6, #168]	@ movhi
	movt	ip, #:upper16:.LANCHOR1
	mov	r3, #0
	ldr	r0, .L2767
	mov	r2, lr
	mov	r1, lr
	mov	fp, r3
	str	lr, [ip, #2200]
	str	r10, [ip, #3480]
	bl	__wake_up
	b	.L2753
.L2766:
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC246
	add	r0, r0, #2688
	ldrb	r3, [r6, #146]	@ zero_extendqisi2
	str	r10, [sp, #8]
	movt	r2, #:upper16:.LC246
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	str	r8, [sp, #12]
	ldrb	lr, [r4]	@ zero_extendqisi2
	add	r1, r1, #32
	str	r9, [sp, #16]
	str	lr, [sp]
	str	ip, [sp, #4]
	bl	__dynamic_dev_dbg
	b	.L2754
.L2768:
	.align	2
.L2767:
	.word	.LANCHOR1+2204
	.fnend
	.size	acm_setup, .-acm_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_event_notify, %function
rmnet_smd_event_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #2
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #48]
	beq	.L2771
	cmp	r1, #3
	beq	.L2772
	cmp	r1, #1
	beq	.L2787
.L2769:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2787:
	ldr	r3, [r0, #20]
	ldr	r3, [r3, #168]
	cmp	r3, #0
	beq	.L2769
	cmp	r5, #0
	ldr	r0, [r0]
	bne	.L2788
.L2775:
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L2769
	add	r4, r4, #4
	mov	r0, #0
	add	r1, r4, #4
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L2769
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__tasklet_schedule
.L2772:
	add	r1, r0, #44
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_clear_bit
.L2771:
	add	r1, r0, #44
	mov	r0, #0
	bl	_set_bit
	ldr	r6, [sp, #8]
	add	r0, r4, #52
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L2788:
	bl	smd_write_avail
	cmp	r0, r5
	bge	.L2776
.L2786:
	ldr	r0, [r4]
	b	.L2775
.L2776:
	add	r1, r4, #28
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r0, r4, #24
	bne	.L2786
	bl	__tasklet_schedule
	b	.L2786
	.fnend
	.size	rmnet_smd_event_notify, .-rmnet_smd_event_notify
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_notify, %function
grmnet_ctrl_smd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2730
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r5, r0
	strd	r8, [sp, #16]
	mov	r4, r1
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L2829
.L2790:
	cmp	r4, #2
	beq	.L2793
	cmp	r4, #3
	beq	.L2794
	cmp	r4, #1
	beq	.L2830
.L2792:
	add	r0, r5, #24
	mov	r3, #0
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	mov	r2, #1
	mov	r1, #3
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up
.L2830:
	ldr	r0, [r5]
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L2796
	ldr	r2, [r5, #28]
	add	r3, r5, #28
	cmp	r2, r3
	beq	.L2831
.L2796:
	ldr	r0, [r5]
	bl	smd_write_avail
	cmp	r0, #0
	beq	.L2792
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r5, #68
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3484]
	bl	queue_work_on
	b	.L2792
.L2794:
	add	r1, r5, #8
	mov	r0, #0
	bl	_clear_bit
	cmp	r5, #0
	beq	.L2799
	ldr	r0, [r5, #104]
	cmp	r0, #0
	beq	.L2799
	ldr	r3, [r0, #104]
	cmp	r3, #0
	beq	.L2799
	blx	r3
.L2799:
	add	r8, r5, #108
	add	r7, r5, #40
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #40]
	mov	r9, r0
	cmp	r7, r4
	beq	.L2800
.L2801:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
	ldr	r4, [r5, #40]
	cmp	r7, r4
	bne	.L2801
.L2800:
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L2792
.L2793:
	add	r1, r5, #8
	mov	r0, #0
	bl	_set_bit
	cmp	r5, #0
	beq	.L2792
	ldr	r0, [r5, #104]
	cmp	r0, #0
	beq	.L2792
	ldr	r3, [r0, #108]
	cmp	r3, #0
	beq	.L2792
	blx	r3
	b	.L2792
.L2829:
	sub	r2, r1, #1
	cmp	r2, #2
	movwhi	r3, #:lower16:.LC182
	movthi	r3, #:upper16:.LC182
	bhi	.L2791
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r3, r3, r2, lsl #2
	ldr	r3, [r3, #1308]
.L2791:
	movw	r1, #:lower16:.LC248
	ldr	r2, .L2832
	movt	r1, #:upper16:.LC248
	ldr	r0, .L2832+4
	bl	__dynamic_pr_debug
	b	.L2790
.L2831:
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r5, #52
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3484]
	bl	queue_work_on
	b	.L2796
.L2833:
	.align	2
.L2832:
	.word	.LANCHOR3+1320
	.word	.LANCHOR2+2712
	.fnend
	.size	grmnet_ctrl_smd_notify, .-grmnet_ctrl_smd_notify
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_disconnect_w, %function
gctrl_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #52]
	tst	r3, #1
	bne	.L2836
	bx	lr
.L2836:
	add	r1, r0, #52
	mov	r0, #0
	b	_clear_bit
	.fnend
	.size	gctrl_disconnect_w, .-gctrl_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_disconnect_w, %function
ghsic_data_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #76]
	tst	r3, #1
	bne	.L2839
	bx	lr
.L2839:
	add	r1, r0, #76
	mov	r0, #0
	b	_clear_bit
	.fnend
	.size	ghsic_data_disconnect_w, .-ghsic_data_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_remove, %function
ghsuart_ctrl_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2754
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L2852
.L2841:
	ldr	r3, [r4, #4]
	movw	r2, #:lower16:.LANCHOR1
	mov	r1, #84
	movt	r2, #:upper16:.LANCHOR1
	mla	r3, r1, r3, r2
	ldr	r4, [r3, #1860]
	add	r6, r4, #8
	add	r5, r4, #88
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r4, #12]
	mov	r1, r0
	mov	r0, r6
	cmp	r4, #0
	beq	.L2853
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L2844
	mov	r0, r4
	blx	r3
.L2844:
	mov	r1, r5
	mov	r0, #0
	bl	_clear_bit
	mov	r1, r5
	mov	r0, #2
	bl	_clear_bit
.L2843:
	mov	r1, r5
	mov	r0, #1
	bl	_clear_bit
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2853:
	bl	_raw_spin_unlock_irqrestore
	b	.L2843
.L2852:
	movw	r1, #:lower16:.LC177
	add	r0, r3, #2736
	ldr	r2, .L2854
	movt	r1, #:upper16:.LC177
	ldr	r3, [r4]
	bl	__dynamic_pr_debug
	b	.L2841
.L2855:
	.align	2
.L2854:
	.word	.LANCHOR3+1344
	.fnend
	.size	ghsuart_ctrl_remove, .-ghsuart_ctrl_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_out_trigger, %function
f_midi_out_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #28]
	cmp	r1, #0
	ldr	r0, [r0, #12]
	ldr	r1, [r3, #200]
	add	r1, r1, #296
	bne	.L2858
	b	_clear_bit
.L2858:
	b	_set_bit
	.fnend
	.size	f_midi_out_trigger, .-f_midi_out_trigger
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_notify, %function
rmnet_mux_smd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #2
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #176]
	beq	.L2861
	cmp	r1, #3
	beq	.L2862
	cmp	r1, #1
	beq	.L2877
.L2859:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2877:
	ldr	r3, [r0, #372]
	cmp	r3, #0
	beq	.L2859
	cmp	r5, #0
	ldr	r0, [r0, #128]
	bne	.L2878
.L2865:
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L2859
	add	r1, r4, #136
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r0, r4, #132
	bne	.L2859
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__tasklet_schedule
.L2862:
	add	r1, r0, #172
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_clear_bit
.L2861:
	add	r1, r0, #172
	mov	r0, #0
	bl	_set_bit
	ldr	r6, [sp, #8]
	add	r0, r4, #180
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L2878:
	bl	smd_write_avail
	cmp	r0, r5
	bge	.L2866
.L2876:
	ldr	r0, [r4, #128]
	b	.L2865
.L2866:
	add	r1, r4, #156
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r0, r4, #152
	bne	.L2876
	bl	__tasklet_schedule
	b	.L2876
	.fnend
	.size	rmnet_mux_smd_notify, .-rmnet_mux_smd_notify
	.section	.init.text,"ax",%progbits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_init, %function
gsmd_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC249
	push	{r4, lr}
	.save {r4, lr}
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	movt	r0, #:upper16:.LC249
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmn	r0, #4096
	movt	r3, #:upper16:.LANCHOR1
	mov	r4, r3
	str	r0, [r3, #3488]
	bhi	.L2881
	ldr	ip, .L2888
	mov	r2, r0
	movw	r0, #:lower16:.LC250
	movt	r0, #:upper16:.LC250
	mov	r3, #0
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	str	r0, [r4, #3492]
	beq	.L2882
	cmn	r0, #4096
	bls	.L2881
.L2882:
	ldr	r0, [r4, #3488]
	bl	debugfs_remove
.L2881:
	mov	r3, #0
	mov	r0, r3
	strb	r3, [r4, #3496]
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L2889:
	.align	2
.L2888:
	.word	.LANCHOR3+1364
	.fnend
	.size	gsmd_ctrl_init, .-gsmd_ctrl_init
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_exit, %function
gsmd_ctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3492]
	bl	debugfs_remove
	ldr	r0, [r4, #3488]
	pop	{r4, lr}
	b	debugfs_remove
	.fnend
	.size	gsmd_ctrl_exit, .-gsmd_ctrl_exit
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_init, %function
gctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC251
	push	{r4, lr}
	.save {r4, lr}
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	movt	r0, #:upper16:.LC251
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmn	r0, #4096
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3500]
	bhi	.L2894
	ldr	ip, .L2901
	mov	r2, r0
	movw	r0, #:lower16:.LC250
	mov	r4, r3
	movt	r0, #:upper16:.LC250
	mov	r3, #0
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	str	r0, [r4, #3504]
	beq	.L2895
	cmn	r0, #4096
	bls	.L2894
.L2895:
	ldr	r0, [r4, #3500]
	bl	debugfs_remove
.L2894:
	mov	r0, #0
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L2902:
	.align	2
.L2901:
	.word	.LANCHOR3+1472
	.fnend
	.size	gctrl_init, .-gctrl_init
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_exit, %function
gctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3504]
	bl	debugfs_remove
	ldr	r0, [r4, #3500]
	pop	{r4, lr}
	b	debugfs_remove
	.fnend
	.size	gctrl_exit, .-gctrl_exit
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_init, %function
ghsic_data_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC252
	push	{r4, r5, lr}
	.save {r4, r5, lr}
	mov	r1, #0
	.pad #12
	sub	sp, sp, #12
	movt	r0, #:upper16:.LC252
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmn	r0, #4096
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3508]
	bhi	.L2907
	ldr	r5, .L2919
	mov	r2, r0
	movw	r0, #:lower16:.LC250
	mov	r4, r3
	movt	r0, #:upper16:.LC250
	mov	r3, #0
	mov	r1, #292
	str	r5, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	str	r0, [r4, #3512]
	beq	.L2910
	cmn	r0, #4096
	ldr	r2, [r4, #3508]
	bhi	.L2910
	add	r5, r5, #108
	movw	r0, #:lower16:.LC253
	movt	r0, #:upper16:.LC253
	mov	r3, #0
	mov	r1, #420
	str	r5, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	str	r0, [r4, #3516]
	beq	.L2910
	cmn	r0, #4096
	bls	.L2907
.L2910:
	ldr	r0, [r4, #3508]
	bl	debugfs_remove
.L2907:
	mov	r0, #0
	add	sp, sp, #12
	@ sp needed
	pop	{r4, r5, pc}
.L2920:
	.align	2
.L2919:
	.word	.LANCHOR3+1580
	.fnend
	.size	ghsic_data_init, .-ghsic_data_init
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_exit, %function
ghsic_data_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3512]
	bl	debugfs_remove
	ldr	r0, [r4, #3516]
	bl	debugfs_remove
	ldr	r0, [r4, #3508]
	pop	{r4, lr}
	b	debugfs_remove
	.fnend
	.size	ghsic_data_exit, .-ghsic_data_exit
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_init, %function
ghsuart_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC254
	push	{r4, lr}
	.save {r4, lr}
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	movt	r0, #:upper16:.LC254
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmp	r0, #0
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3416]
	beq	.L2924
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L2924
	ldr	ip, .L2936
	movw	r0, #:lower16:.LC250
	mov	r4, r3
	movt	r0, #:upper16:.LC250
	mov	r3, #0
	mov	r1, #420
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L2925
	cmn	r0, #4096
	movls	r0, #0
	bls	.L2923
.L2925:
	ldr	r0, [r4, #3416]
	bl	debugfs_remove
	mov	r3, #0
	str	r3, [r4, #3416]
.L2924:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2778
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	mvneq	r0, #18
	beq	.L2923
	movw	r1, #:lower16:.LC255
	ldr	r0, .L2936+4
	movt	r1, #:upper16:.LC255
	bl	__dynamic_pr_debug
	mvn	r0, #18
.L2923:
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L2937:
	.align	2
.L2936:
	.word	.LANCHOR3+1796
	.word	.LANCHOR2+2760
	.fnend
	.size	ghsuart_ctrl_init, .-ghsuart_ctrl_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_init, %function
ghsuart_data_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC256
	push	{r4, lr}
	.save {r4, lr}
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	movt	r0, #:upper16:.LC256
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmp	r0, #0
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3420]
	beq	.L2939
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L2939
	ldr	ip, .L2951
	movw	r0, #:lower16:.LC250
	mov	r4, r3
	movt	r0, #:upper16:.LC250
	mov	r3, #0
	mov	r1, #420
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L2940
	cmn	r0, #4096
	movls	r0, #0
	bls	.L2938
.L2940:
	ldr	r0, [r4, #3420]
	bl	debugfs_remove
.L2939:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #2802
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	mvneq	r0, #18
	beq	.L2938
	movw	r1, #:lower16:.LC257
	add	r0, r0, #2784
	movt	r1, #:upper16:.LC257
	bl	__dynamic_pr_debug
	mvn	r0, #18
.L2938:
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L2952:
	.align	2
.L2951:
	.word	.LANCHOR3+1904
	.fnend
	.size	ghsuart_data_init, .-ghsuart_data_init
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_init, %function
diag_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC258
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	movt	r0, #:upper16:.LC258
	add	r3, r4, #3520
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	str	r3, [r4, #3520]
	str	r3, [r4, #3524]
	bl	debugfs_create_dir
	cmp	r0, #0
	str	r0, [r4, #3424]
	beq	.L2955
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L2955
	ldr	ip, .L2962
	movw	r0, #:lower16:.LC250
	mov	r3, #0
	movt	r0, #:upper16:.LC250
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L2957
	cmn	r0, #4096
	bhi	.L2957
.L2955:
	mov	r0, #0
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L2957:
	ldr	r0, [r4, #3424]
	bl	debugfs_remove
	mov	r3, #0
	str	r3, [r4, #3424]
	b	.L2955
.L2963:
	.align	2
.L2962:
	.word	.LANCHOR3+2012
	.fnend
	.size	diag_function_init, .-diag_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_free_buf, %function
rmnet_sdio_free_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #188
	strd	r8, [sp, #16]
	mov	r9, #0
	strd	r10, [sp, #24]
	mov	r10, r0
	mov	r0, r6
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave
	str	r9, [r4, #328]
	str	r9, [r4, #356]
	str	r9, [r4, #360]
	str	r9, [r4, #364]
	str	r9, [r4, #368]
	str	r9, [r4, #372]
	ldr	r5, [r10, #132]!
	str	r0, [sp, #4]
	cmp	r5, r10
	ldr	r8, [r5]
	beq	.L2965
.L2966:
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del
	ldr	r3, [r4, #140]
	mov	r0, #0
	sub	r3, r3, #1
	str	r3, [r4, #140]
	str	r9, [r5, #-36]
	ldr	fp, [r4, #88]
	mov	r5, r8
	bl	kfree
	mov	r1, r7
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r10, r8
	ldr	r8, [r8]
	bne	.L2966
.L2965:
	mov	r9, r4
	ldr	r5, [r9, #160]!
	cmp	r5, r9
	ldr	r8, [r5]
	beq	.L2967
	mov	r10, #0
.L2968:
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del
	ldr	r3, [r4, #168]
	mov	r0, #0
	sub	r3, r3, #1
	str	r3, [r4, #168]
	str	r10, [r5, #-36]
	ldr	fp, [r4, #92]
	mov	r5, r8
	bl	kfree
	mov	r1, r7
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r9, r8
	ldr	r8, [r8]
	bne	.L2968
.L2967:
	mov	r9, r4
	ldr	r5, [r9, #108]!
	cmp	r5, r9
	ldr	r8, [r5]
	beq	.L2969
.L2970:
	mov	r0, r5
	sub	r10, r5, #8
	bl	list_del
	ldr	r3, [r4, #116]
	sub	r3, r3, #1
	str	r3, [r4, #116]
	ldr	r0, [r5, #-8]
	mov	r5, r8
	bl	kfree
	mov	r0, r10
	bl	kfree
	cmp	r9, r8
	ldr	r8, [r8]
	bne	.L2970
.L2969:
	mov	r9, r4
	ldr	r5, [r9, #120]!
	cmp	r5, r9
	ldr	r8, [r5]
	beq	.L2971
.L2972:
	mov	r0, r5
	sub	r10, r5, #8
	bl	list_del
	ldr	r3, [r4, #128]
	sub	r3, r3, #1
	str	r3, [r4, #128]
	ldr	r0, [r5, #-8]
	mov	r5, r8
	bl	kfree
	mov	r0, r10
	bl	kfree
	cmp	r9, r8
	ldr	r8, [r8]
	bne	.L2972
.L2971:
	ldr	r3, [r4, #144]
	add	r5, r4, #144
	cmp	r5, r3
	beq	.L2973
	mov	r8, #0
	b	.L2974
.L2990:
	ldr	r2, [r4, #152]
	sub	r2, r2, #1
	str	r2, [r4, #152]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #144]
	cmp	r3, r5
	beq	.L2973
.L2974:
	subs	r0, r3, #0
	bne	.L2990
.L2973:
	ldr	r3, [r4, #172]
	add	r5, r4, #172
	cmp	r3, r5
	beq	.L2975
	mov	r8, #0
	b	.L2976
.L2991:
	ldr	r2, [r4, #180]
	sub	r2, r2, #1
	str	r2, [r4, #180]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #172]
	cmp	r3, r5
	beq	.L2975
.L2976:
	subs	r0, r3, #0
	bne	.L2991
.L2975:
	ldrd	r4, [r4, #96]
	ldr	r0, [r5]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r1, [sp, #4]
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_sdio_free_buf, .-rmnet_sdio_free_buf
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_disable, %function
rmnet_sdio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #192]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r0, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r4
	str	r5, [r4, #192]
	str	r5, [r4, #196]
	bl	rmnet_sdio_free_buf
	add	r2, r4, #204
	ldr	r1, [r4, #200]
	mov	r0, #4
	bl	queue_work_on
	str	r5, [r4, #332]
	add	r2, r4, #336
	ldr	r1, [r4, #200]
	mov	r0, #4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on
	.fnend
	.size	rmnet_sdio_disable, .-rmnet_sdio_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_complete_epin, %function
rmnet_sdio_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r4, [r0]
	ldr	r2, [r1, #44]
	ldr	r6, [r1, #32]
	cmn	r2, #104
	beq	.L2999
	cmp	r2, #0
	beq	.L2999
	cmn	r2, #108
	beq	.L2999
	ldr	r3, [r4, #84]
	movw	r1, #:lower16:.LC219
	movt	r1, #:upper16:.LC219
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L2999:
	add	r7, r4, #188
	add	r8, r4, #132
	mov	r0, r7
	bl	_raw_spin_lock
	mov	r2, r8
	ldr	r1, [r4, #136]
	add	r0, r5, #36
	bl	__list_add
	ldr	r3, [r4, #140]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #140]
	bl	_raw_spin_unlock
	mov	r0, r6
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #192]
	cmp	r3, #0
	beq	.L2997
	ldr	r3, [r4, #320]
	tst	r3, #2
	bne	.L3032
.L2997:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3032:
	ldr	r3, [r4, #84]
	mov	r0, r7
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #132]
	str	r0, [sp, #8]
	cmp	r8, r3
	beq	.L3002
	ldr	r5, [r4, #144]
	add	r3, r4, #144
	str	r3, [sp, #4]
	cmp	r5, r3
	beq	.L3002
	mov	r9, #0
	b	.L3004
.L3034:
	ldr	r3, [r4, #152]
	sub	r3, r3, #1
	str	r3, [r4, #152]
	ldrd	r2, [r5]
	str	r9, [r5]
	str	r9, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r6, [r4, #132]
	str	r5, [r6, #-4]
	ldr	r3, [r5, #172]
	mov	r0, r6
	sub	r10, r6, #36
	str	r3, [r6, #-36]
	ldr	r3, [r5, #80]
	str	r3, [r6, #-32]
	bl	list_del
	ldr	r3, [r4, #140]
	mov	r0, r7
	sub	r3, r3, #1
	str	r3, [r4, #140]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #92]
	mov	r1, r10
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	fp, #0
	bne	.L3033
	ldr	r2, [r4, #132]
	ldr	r3, [r4, #356]
	cmp	r8, r2
	add	r3, r3, #1
	str	r3, [r4, #356]
	beq	.L3002
	ldr	r5, [r4, #144]
	ldr	r3, [sp, #4]
	cmp	r5, r3
	beq	.L3002
.L3004:
	cmp	r5, #0
	bne	.L3034
.L3002:
	ldr	r1, [sp, #8]
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L3033:
	ldr	r0, [r4, #192]
	cmp	r0, #0
	beq	.L3007
	ldr	r3, [sp, #12]
	movw	r1, #:lower16:.LC222
	mov	r2, fp
	movt	r1, #:upper16:.LC222
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r8
	mov	r0, r6
	ldr	r1, [r4, #136]
	bl	__list_add
	ldr	r3, [r4, #140]
	ldr	r2, [r4, #144]
	add	r3, r3, #1
	str	r3, [r4, #140]
	ldr	r3, [sp, #4]
	str	r2, [r5]
	str	r3, [r5, #4]
	str	r5, [r4, #144]
	str	r5, [r2, #4]
	ldr	r3, [r4, #152]
	add	r3, r3, #1
	str	r3, [r4, #152]
	b	.L3002
.L3007:
	str	r0, [r6, #-36]
	ldr	r4, [r4, #92]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r5
	bl	dev_kfree_skb_any
	b	.L3002
	.fnend
	.size	rmnet_sdio_complete_epin, .-rmnet_sdio_complete_epin
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_data_rx_work, %function
rmnet_sdio_data_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r8, [r0, #-152]
	ldr	r3, [r0, #84]
	tst	r3, #2
	beq	.L3042
	sub	r6, r0, #48
	mov	r4, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r3, r4
	mov	r7, r0
	ldr	r5, [r3, #-64]!
	cmp	r5, r3
	beq	.L3037
	cmp	r5, #0
	beq	.L3037
	ldr	r3, [r4, #-56]
	mov	ip, #0
	mov	r1, r0
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r4, #-56]
	ldrd	r2, [r5]
	str	ip, [r5]
	str	ip, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC260
	movt	r1, #:upper16:.LC260
	add	r0, r0, #32
	bl	dev_err
	mov	r0, r5
	bl	dev_kfree_skb_any
.L3037:
	mov	r1, r7
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L3042:
	movw	r0, #:lower16:.LC259
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC259
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L3043
	b	printk
.L3044:
	.align	2
.L3043:
	.word	.LANCHOR3+2120
	.fnend
	.size	rmnet_sdio_data_rx_work, .-rmnet_sdio_data_rx_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_write_data_tohost, %function
gbam_write_data_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	add	r7, r0, #8
	mov	r6, r0
	strd	r8, [sp, #16]
	mov	r0, r7
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #12]
	str	r0, [sp, #12]
	cmp	r3, #0
	moveq	r1, r0
	beq	.L3062
	ldr	r2, [r6, #28]
	add	r1, r6, #28
	ldr	r10, [r3, #84]
	str	r1, [sp, #4]
	cmp	r2, r1
	beq	.L3048
	ldr	r4, [r6, #36]
	add	r3, r6, #36
	str	r3, [sp, #8]
	cmp	r4, r3
	beq	.L3048
	movw	r8, #:lower16:.LANCHOR1
	movw	fp, #:lower16:.LANCHOR0
	movt	r8, #:upper16:.LANCHOR1
	movt	fp, #:upper16:.LANCHOR0
	mov	r9, #0
	b	.L3050
.L3064:
	ldr	r1, [r6, #44]
	ldr	r3, [r8, #3528]
	sub	r1, r1, #1
	add	r3, r3, r2
	str	r1, [r6, #44]
	ldrd	r0, [r4]
	str	r9, [r4]
	str	r9, [r4, #4]
	str	r3, [r8, #3528]
	str	r1, [r0, #4]
	str	r0, [r1]
	ldr	r5, [r6, #28]
	str	r4, [r5, #-4]
	ldr	r0, [r4, #172]
	sub	r1, r5, #36
	str	r1, [sp]
	str	r0, [r5, #-36]
	ldr	r0, [r4, #80]
	str	r0, [r5, #-32]
	ldr	r0, [fp, #488]
	cmp	r3, r0
	mov	r0, r5
	moveq	r2, #0
	streq	r9, [r8, #3528]
	ldrb	r3, [r5, #-10]	@ zero_extendqisi2
	bfi	r3, r2, #0, #1
	uxtb	r3, r3
	orr	r3, r3, #2
	strb	r3, [r5, #-10]
	bl	list_del
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r3, [r10, #8]
	mov	r2, #32
	mov	r0, r10
	ldr	r1, [sp]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r2, r0
	mov	r0, r7
	str	r2, [sp]
	bl	_raw_spin_lock
	ldr	r2, [sp]
	cmp	r2, #0
	bne	.L3063
	ldr	r2, [r6, #28]
	ldr	r3, [r6, #264]
	ldr	r1, [sp, #4]
	add	r3, r3, #1
	cmp	r2, r1
	str	r3, [r6, #264]
	beq	.L3048
	ldr	r4, [r6, #36]
	ldr	r3, [sp, #8]
	cmp	r4, r3
	beq	.L3048
.L3050:
	cmp	r4, #0
	mov	r2, #1
	bne	.L3064
.L3048:
	ldr	r1, [sp, #12]
.L3062:
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L3063:
	movw	r0, #:lower16:.LC261
	ldr	r1, .L3065
	movt	r0, #:upper16:.LC261
	bl	printk
	ldr	r1, [sp, #4]
	mov	r0, r5
	ldr	r2, [r6, #28]
	bl	__list_add
	mov	r0, r4
	bl	dev_kfree_skb_any
	b	.L3048
.L3066:
	.align	2
.L3065:
	.word	.LANCHOR3+2144
	.fnend
	.size	gbam_write_data_tohost, .-gbam_write_data_tohost
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_write_data_tohost_w, %function
gbam_write_data_tohost_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #-20]
	b	gbam_write_data_tohost
	.fnend
	.size	gbam_write_data_tohost_w, .-gbam_write_data_tohost_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_epin_complete, %function
gbam_epin_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
	ldr	r2, [r1, #44]
	ldr	r7, [r1, #32]
	cmn	r2, #104
	beq	.L3070
	cmp	r2, #0
	bne	.L3084
.L3071:
	mov	r0, r7
	bl	dev_kfree_skb_any
	cmp	r6, #0
	beq	.L3068
	add	r5, r6, #8
	mov	r0, r5
	bl	_raw_spin_lock
	add	r2, r6, #28
	ldr	r1, [r6, #32]
	add	r0, r4, #36
	bl	__list_add
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r6, #96
	ldrd	r4, [sp]
	movt	r3, #:upper16:.LANCHOR1
	ldrd	r6, [sp, #8]
	mov	r0, #4
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, [r3, #3532]
	b	queue_work_on
.L3084:
	cmn	r2, #108
	bne	.L3082
.L3070:
	mov	r0, r7
	bl	dev_kfree_skb_any
	ldr	r3, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L3068:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3082:
	movw	r0, #:lower16:.LC262
	ldr	r1, .L3085
	movt	r0, #:upper16:.LC262
	bl	printk
	b	.L3071
.L3086:
	.align	2
.L3085:
	.word	.LANCHOR3+2168
	.fnend
	.size	gbam_epin_complete, .-gbam_epin_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_receive, %function
ghsic_data_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	subs	r4, r0, #0
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	beq	.L3088
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L3088
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2826
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L3103
.L3091:
	add	r6, r4, #48
	add	r7, r4, #136
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #36]
	add	r1, r4, #32
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	mov	r8, r0
	stm	r5, {r1, r3}
	str	r5, [r3]
	ldr	r3, [r4, #40]
	ldr	r1, [r2, #492]
	str	r5, [r4, #36]
	add	r3, r3, #1
	cmp	r1, #0
	str	r3, [r4, #40]
	beq	.L3092
	ldr	r2, [r2, #496]
	cmp	r2, r3
	bls	.L3104
.L3092:
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r7
	mov	r0, #4
	ldr	r1, [r4, #84]
	bl	queue_work_on
	mov	r0, #0
.L3087:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3103:
	ldr	ip, [r5, #80]
	movw	r1, #:lower16:.LC263
	mov	r3, r4
	movt	r1, #:upper16:.LC263
	ldr	r2, .L3105
	ldr	r0, .L3105+4
	str	ip, [sp, #4]
	ldr	ip, [r4]
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L3091
.L3088:
	mov	r0, r5
	bl	dev_kfree_skb_any
	mvn	r0, #106
	b	.L3087
.L3104:
	add	r1, r4, #164
	mov	r0, #2
	bl	_set_bit
	ldr	r3, [r4, #196]
	mov	r1, r8
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #196]
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r7
	mov	r0, #4
	ldr	r1, [r4, #84]
	bl	queue_work_on
	mvn	r0, #15
	b	.L3087
.L3106:
	.align	2
.L3105:
	.word	.LANCHOR3+2188
	.word	.LANCHOR2+2808
	.fnend
	.size	ghsic_data_receive, .-ghsic_data_receive
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_start_xmit, %function
eth_start_xmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	add	r6, r1, #1152
	mov	r7, r0
	strd	r8, [sp, #16]
	mov	r0, r6
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1156]
	mov	r1, r0
	cmp	r3, #0
	beq	.L3172
	ldr	r9, [r3, #88]
	mov	r0, r6
	ldrh	r10, [r3, #98]
	ldrb	r3, [r3, #124]	@ zero_extendqisi2
	str	r3, [sp, #16]
	bl	_raw_spin_unlock_irqrestore
	cmp	r9, #0
	beq	.L3109
	add	r8, r4, #1168
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #16]
	str	r0, [sp, #20]
	cmp	r3, #0
	beq	.L3112
	ldr	r3, [r4, #1200]
	cmp	r3, #0
	beq	.L3173
.L3112:
	mov	r0, r8
	ldr	r1, [sp, #20]
	bl	_raw_spin_unlock_irqrestore
	tst	r10, #1
	bne	.L3119
	ldr	r2, [r7, #172]
	ldrb	r3, [r2]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L3119
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	ldrb	ip, [r2, #2]	@ zero_extendqisi2
	ldrb	r0, [r2, #3]	@ zero_extendqisi2
	and	r3, r3, r1
	ldrb	r1, [r2, #4]	@ zero_extendqisi2
	ldrb	r2, [r2, #5]	@ zero_extendqisi2
	and	r3, r3, ip
	and	r3, r3, r0
	and	r3, r3, r1
	and	r3, r3, r2
	cmp	r3, #255
	movne	r3, #2
	moveq	r3, #8
	tst	r3, r10
	beq	.L3109
.L3119:
	mov	r0, r8
	add	r10, r6, #20
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #1172]
	mov	fp, r0
	cmp	r10, r5
	beq	.L3174
	sub	r3, r5, #36
	mov	r0, r5
	str	r3, [sp, #20]
	bl	list_del
	ldr	r3, [r4, #1172]
	cmp	r10, r3
	beq	.L3175
.L3122:
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1232]
	mov	fp, r0
	cmp	r3, #0
	beq	.L3124
	ldr	r0, [r4, #1156]
	cmp	r0, #0
	beq	.L3125
	mov	r1, r7
	blx	r3
	mov	r7, r0
.L3125:
	cmp	r7, #0
	beq	.L3176
.L3124:
	ldr	r3, [sp, #16]
	cmp	r3, #0
	beq	.L3127
	movw	r0, #:lower16:.LANCHOR2
	movw	r1, #2850
	ldr	ip, [r4, #1220]
	movt	r0, #:upper16:.LANCHOR2
	ldr	r3, [r5, #-32]
	ldrh	r1, [r0, r1]
	tst	r1, #4
	bne	.L3177
.L3128:
	ldr	r1, [r4, #1156]
	mov	r2, ip
	ldr	r0, [r5, #-36]
	ldr	r1, [r1, #144]
	add	r0, r0, r3
	bl	memcpy
	ldr	r2, [r4, #1220]
	mov	r1, fp
	mov	r0, r6
	ldr	r3, [r5, #-32]
	add	r3, r3, r2
	str	r3, [r5, #-32]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #-36]
	ldr	r3, [r5, #-32]
	ldr	r2, [r7, #80]
	ldr	r1, [r7, #172]
	add	r0, r0, r3
	bl	memcpy
	ldr	r2, [r7, #80]
	mov	r0, r7
	ldr	r3, [r5, #-32]
	add	r3, r3, r2
	mov	fp, r3
	str	r3, [r5, #-32]
	bl	dev_kfree_skb_any
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1196]
	mov	r6, r0
	ldr	r2, [r4, #1228]
	add	r3, r3, #1
	cmp	r3, r2
	str	r3, [r4, #1196]
	ldr	r3, [r4, #1192]
	bcs	.L3130
	cmp	r3, #5
	bgt	.L3178
.L3130:
	add	r3, r3, #1
	mov	r2, #0
	mov	r1, r6
	mov	r0, r8
	str	r3, [r4, #1192]
	str	r2, [r4, #1196]
	bl	_raw_spin_unlock_irqrestore
.L3131:
	ldr	r3, [r4, #1156]
	ldrb	r2, [r3, #104]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L3144
	ldr	r3, [r3, #112]
	cmp	r3, fp
	beq	.L3179
.L3144:
	mov	r2, #1
.L3132:
	ldrb	r3, [r5, #-10]	@ zero_extendqisi2
	bfi	r3, r2, #1, #1
	uxtb	r2, r3
	strb	r3, [r5, #-10]
	tst	r2, #2
	beq	.L3133
	ldrb	r3, [r4, #1276]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L3133
	ldrh	r1, [r9, #20]
	sdiv	r3, fp, r1
	mls	r3, r1, r3, fp
	cmp	r3, #0
	bne	.L3133
	bfi	r2, r3, #1, #1
	add	fp, fp, #1
	strb	r2, [r5, #-10]
.L3133:
	str	fp, [r5, #-32]
	ldr	r3, [r4, #1164]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bls	.L3134
	ldr	r3, [r3, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	beq	.L3180
.L3134:
	ldrb	r3, [r5, #-10]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r5, #-10]
.L3136:
	ldr	r3, [r9, #8]
	sub	r1, r5, #36
	mov	r0, r9
	mov	r2, #32
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L3168
	movw	r3, #:lower16:jiffies
	movt	r3, #:upper16:jiffies
	ldr	r3, [r3]
	str	r3, [r4, #604]
.L3107:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3172:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L3109:
	mov	r0, r7
	bl	dev_kfree_skb_any
	mov	r0, #0
	b	.L3107
.L3168:
	ldr	r3, [sp, #16]
	cmp	r3, #0
	movne	r3, #0
	strne	r3, [r5, #-32]
	beq	.L3181
.L3126:
	ldr	r2, [r4, #1160]
	mov	r0, r8
	ldr	r3, [r2, #260]
	add	r3, r3, #1
	str	r3, [r2, #260]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1172]
	mov	r6, r0
	cmp	r10, r3
	beq	.L3182
.L3139:
	ldr	r1, [r4, #1176]
	mov	r2, r10
.L3171:
	mov	r0, r5
	bl	__list_add
	mov	r0, r8
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L3107
.L3175:
	ldr	r1, [r4, #576]
	cmp	r1, #0
	beq	.L3183
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
	b	.L3122
.L3173:
	ldr	r0, [r4, #1160]
	add	fp, r6, #20
	ldr	r5, [r4, #1172]
	ldr	r1, [r4, #1228]
	ldr	r0, [r0, #356]
	cmp	r5, fp
	add	r0, r0, #80
	mul	r1, r1, r0
	str	r1, [r4, #1200]
	bne	.L3114
	b	.L3112
.L3115:
	str	r3, [r5, #-4]
	ldr	r5, [r5]
	cmp	r5, fp
	beq	.L3112
.L3114:
	ldr	r2, [r5, #-36]
	cmp	r2, #0
	bne	.L3115
	movw	r1, #32800
	ldr	r0, [r4, #1200]
	bl	__kmalloc
	cmp	r0, #0
	mov	r3, #0
	str	r0, [r5, #-36]
	bne	.L3115
.L3116:
	ldr	r5, [r4, #1172]
	str	r0, [r4, #1200]
	cmp	r5, fp
	beq	.L3117
	mov	r4, r0
.L3118:
	ldr	r0, [r5, #-36]
	bl	kfree
	str	r4, [r5, #-36]
	ldr	r5, [r5]
	cmp	r5, fp
	bne	.L3118
.L3117:
	mov	r0, r8
	ldr	r1, [sp, #20]
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #11
	b	.L3107
.L3180:
	movw	r1, #:lower16:.LANCHOR0
	ldr	r2, [r4, #1188]
	movt	r1, #:upper16:.LANCHOR0
	ldr	r1, [r1, #500]
	add	r2, r2, #1
	cmp	r2, r1, lsr #1
	str	r2, [r4, #1188]
	beq	.L3184
	ldrb	r3, [r5, #-10]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #-10]
	b	.L3136
.L3181:
	mov	r0, r7
	bl	dev_kfree_skb_any
	b	.L3126
.L3179:
	ldrh	r3, [r9, #20]
	sdiv	r2, fp, r3
	mls	r2, r3, r2, fp
	adds	r2, r2, #0
	movne	r2, #1
	b	.L3132
.L3178:
	mov	r1, r10
	ldr	r2, [r4, #1172]
	b	.L3171
.L3127:
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	fp, [r7, #80]
	ldr	r3, [r7, #172]
	str	r3, [r5, #-36]
	str	r7, [r5, #-4]
	b	.L3131
.L3174:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #16
	b	.L3107
.L3176:
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L3126
.L3182:
	ldr	r1, [r4, #576]
	mov	r0, #0
	add	r1, r1, #80
	bl	_clear_bit
	b	.L3139
.L3184:
	ldrb	r2, [r5, #-10]	@ zero_extendqisi2
	bfi	r2, r3, #0, #1
	strb	r2, [r5, #-10]
	str	r3, [r4, #1188]
	b	.L3136
.L3177:
	ldr	lr, [r7, #84]
	movw	r1, #:lower16:.LC264
	add	r0, r0, #2832
	movt	r1, #:upper16:.LC264
	ldr	r2, .L3185
	str	lr, [sp, #8]
	ldr	lr, [r7, #80]
	stm	sp, {ip, lr}
	bl	__dynamic_pr_debug
	ldr	ip, [r4, #1220]
	ldr	r3, [r5, #-32]
	b	.L3128
.L3183:
	movw	r0, #:lower16:.LC109
	movw	r1, #1847
	movt	r0, #:upper16:.LC109
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC110
	movt	r0, #:upper16:.LC110
	bl	printk
	b	.L3122
.L3186:
	.align	2
.L3185:
	.word	.LANCHOR3+2208
	.fnend
	.size	eth_start_xmit, .-eth_start_xmit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_disconnect_work, %function
rmnet_mux_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #-20]
	cmp	r3, #3
	beq	.L3223
.L3188:
	sub	r6, r4, #16
	sub	r8, r4, #192
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #-192]
	mov	r7, r0
	cmp	r8, r5
	beq	.L3189
	mov	r9, #0
.L3190:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	str	r9, [r5, #-36]
	ldr	r5, [r4, #-296]
	mov	r0, #0
	bl	kfree
	mov	r1, r10
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #-192]
	cmp	r8, r5
	bne	.L3190
.L3189:
	ldr	r5, [r4, #-168]
	sub	r8, r4, #168
	cmp	r8, r5
	beq	.L3191
	mov	r9, #0
.L3192:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	str	r9, [r5, #-36]
	ldr	r5, [r4, #-292]
	mov	r0, #0
	bl	kfree
	mov	r1, r10
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #-168]
	cmp	r8, r5
	bne	.L3192
.L3191:
	ldr	r3, [r4, #-184]
	sub	r5, r4, #184
	cmp	r3, r5
	beq	.L3193
	mov	r8, #0
	b	.L3194
.L3224:
	ldr	r2, [r4, #-176]
	sub	r2, r2, #1
	str	r2, [r4, #-176]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #-184]
	cmp	r3, r5
	beq	.L3193
.L3194:
	subs	r0, r3, #0
	bne	.L3224
.L3193:
	ldr	r3, [r4, #-160]
	sub	r5, r4, #160
	cmp	r5, r3
	beq	.L3195
	mov	r8, #0
	b	.L3196
.L3225:
	ldr	r2, [r4, #-152]
	sub	r2, r2, #1
	str	r2, [r4, #-152]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #-160]
	cmp	r3, r5
	beq	.L3195
.L3196:
	subs	r0, r3, #0
	bne	.L3225
.L3195:
	ldr	r5, [r4, #-280]
	sub	r9, r4, #280
	cmp	r9, r5
	beq	.L3197
.L3198:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	ldr	r8, [r4, #-296]
	ldr	r0, [r5, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #-280]
	cmp	r9, r5
	bne	.L3198
.L3197:
	ldr	r5, [r4, #-272]
	sub	r9, r4, #272
	cmp	r9, r5
	beq	.L3199
.L3200:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	ldr	r8, [r4, #-292]
	ldr	r0, [r5, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #-272]
	cmp	r9, r5
	bne	.L3200
.L3199:
	ldr	r5, [r4, #-264]
	sub	r9, r4, #264
	cmp	r5, r9
	beq	.L3201
.L3202:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	ldr	r8, [r4, #-292]
	ldr	r0, [r5, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #-264]
	cmp	r9, r5
	bne	.L3202
.L3201:
	ldr	r5, [r4, #-68]
	sub	r9, r4, #68
	cmp	r9, r5
	beq	.L3203
.L3204:
	mov	r0, r5
	sub	r8, r5, #8
	bl	list_del
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r8
	bl	kfree
	ldr	r5, [r4, #-68]
	ldr	r3, [r4, #-48]
	cmp	r9, r5
	sub	r3, r3, #1
	str	r3, [r4, #-48]
	bne	.L3204
.L3203:
	ldr	r5, [r4, #-44]
	sub	r9, r4, #44
	cmp	r9, r5
	beq	.L3205
.L3206:
	mov	r0, r5
	sub	r8, r5, #8
	bl	list_del
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r8
	bl	kfree
	ldr	r5, [r4, #-44]
	ldr	r3, [r4, #-36]
	cmp	r9, r5
	sub	r3, r3, #1
	str	r3, [r4, #-36]
	bne	.L3206
.L3205:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r1, #0
	sub	r0, r4, #60
	mov	r3, r1
	mov	r2, #1
	str	r1, [r4, #-20]
	mov	r1, #3
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up
.L3223:
	sub	r0, r0, #232
	bl	tasklet_kill
	sub	r0, r4, #252
	bl	tasklet_kill
	b	.L3188
	.fnend
	.size	rmnet_mux_disconnect_work, .-rmnet_mux_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_sdio_data_rx_work, %function
rmnet_mux_sdio_data_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #128
	strd	r8, [sp, #16]
	sub	r8, r0, #16
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r0, #-156]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #-16]
	mov	fp, r0
	cmp	r8, r4
	beq	.L3227
	movw	r7, #:lower16:.LC265
	mov	r10, #0
	movt	r7, #:upper16:.LC265
	b	.L3228
.L3234:
	ldr	r3, [r5, #-8]
	sub	r3, r3, #1
	str	r3, [r5, #-8]
	ldrd	r2, [r4]
	str	r10, [r4]
	str	r10, [r4, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	ldr	r0, [r9]
	mov	r1, r7
	add	r0, r0, #32
	bl	dev_err
	mov	r0, r4
	bl	dev_kfree_skb_any
	ldr	r4, [r5, #-16]
	cmp	r8, r4
	beq	.L3227
.L3228:
	cmp	r4, #0
	mov	r1, fp
	mov	r0, r6
	bne	.L3234
.L3227:
	mov	r1, fp
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_mux_sdio_data_rx_work, .-rmnet_mux_sdio_data_rx_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_sdio_complete_epin, %function
rmnet_mux_sdio_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0]
	.pad #20
	sub	sp, sp, #20
	ldr	r8, [r1, #32]
	ldr	r7, [r4, #364]
	cmp	r7, #0
	beq	.L3266
	ldr	r2, [r1, #44]
	cmn	r2, #104
	beq	.L3238
	cmp	r2, #0
	beq	.L3238
	cmn	r2, #108
	beq	.L3238
	ldr	r3, [r4, #84]
	movw	r1, #:lower16:.LC220
	movt	r1, #:upper16:.LC220
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L3238:
	add	r7, r4, #368
	add	r10, r4, #192
	mov	r0, r7
	bl	_raw_spin_lock
	mov	r2, r10
	ldr	r1, [r4, #196]
	add	r0, r5, #36
	bl	__list_add
	mov	r0, r7
	bl	_raw_spin_unlock
	mov	r0, r8
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #372]
	cmp	r3, #0
	bne	.L3267
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3267:
	ldr	r3, [r4, #84]
	mov	r0, r7
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #192]
	str	r0, [sp, #8]
	cmp	r10, r3
	beq	.L3241
	ldr	r5, [r4, #200]
	add	r3, r4, #200
	str	r3, [sp, #4]
	cmp	r5, r3
	beq	.L3241
	mov	r8, #0
	b	.L3243
.L3269:
	ldr	r3, [r4, #208]
	sub	r3, r3, #1
	str	r3, [r4, #208]
	ldrd	r2, [r5]
	str	r8, [r5]
	str	r8, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r6, [r4, #192]
	str	r5, [r6, #-4]
	ldr	r3, [r5, #172]
	mov	r0, r6
	sub	fp, r6, #36
	str	r3, [r6, #-36]
	ldr	r3, [r5, #80]
	str	r3, [r6, #-32]
	bl	list_del
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r0, [r4, #92]
	mov	r1, fp
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	r9, #0
	bne	.L3268
	ldr	r2, [r4, #192]
	ldr	r3, [r4, #408]
	cmp	r10, r2
	add	r3, r3, #1
	str	r3, [r4, #408]
	beq	.L3241
	ldr	r5, [r4, #200]
	ldr	r3, [sp, #4]
	cmp	r5, r3
	beq	.L3241
.L3243:
	cmp	r5, #0
	bne	.L3269
.L3241:
	ldr	r1, [sp, #8]
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L3266:
	mov	r6, r0
	mov	r0, r8
	bl	dev_kfree_skb_any
	mov	r0, r7
	str	r7, [r5]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	bx	r3	@ indirect register sibling call
.L3268:
	ldr	r0, [r4, #372]
	mov	r3, r9
	mov	r9, fp
	cmp	r0, #0
	beq	.L3246
	mov	r2, r3
	ldr	r3, [sp, #12]
	movw	r1, #:lower16:.LC222
	movt	r1, #:upper16:.LC222
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r10
	mov	r0, r6
	ldr	r1, [r4, #196]
	bl	__list_add
	ldr	r2, [sp, #4]
	ldr	r3, [r4, #200]
	str	r3, [r5]
	str	r2, [r5, #4]
	str	r5, [r4, #200]
	str	r5, [r3, #4]
	ldr	r3, [r4, #208]
	add	r3, r3, #1
	str	r3, [r4, #208]
	b	.L3241
.L3246:
	str	r0, [r6, #-36]
	ldr	r4, [r4, #92]
	bl	kfree
	mov	r1, r9
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r5
	bl	dev_kfree_skb_any
	b	.L3241
	.fnend
	.size	rmnet_mux_sdio_complete_epin, .-rmnet_mux_sdio_complete_epin
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_sdio_complete_epout, %function
rmnet_mux_sdio_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	r7, [r1, #32]
	ldr	r8, [r4, #364]
	cmp	r8, #0
	beq	.L3289
	ldr	r3, [r1, #44]
	ldr	r8, [r4, #84]
	cmn	r3, #104
	beq	.L3273
	cmp	r3, #0
	beq	.L3274
	cmn	r3, #108
	beq	.L3273
	ldr	r2, [r0, #4]
	movw	r1, #:lower16:.LC217
	add	r6, r4, #368
	ldr	lr, [r5, #4]
	movt	r1, #:upper16:.LC217
	ldr	ip, [r5, #48]
	ldr	r0, [r8]
	stm	sp, {ip, lr}
	add	r0, r0, #32
	bl	dev_err
	mov	r0, r7
	bl	dev_kfree_skb_any
	mov	r0, r6
	bl	_raw_spin_lock
.L3275:
	movw	r3, #:lower16:.LANCHOR0
	ldr	r2, [r4, #312]
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #504]
	cmp	r2, r3
	bcs	.L3290
	mov	r0, r6
	bl	_raw_spin_unlock
	mvn	r3, #0
	mov	r2, #0
	mov	r1, #32
	movw	r0, #2056
	bl	__alloc_skb
	subs	r6, r0, #0
	beq	.L3279
	ldr	r0, [r6, #160]
	mov	ip, #2048
	mov	r2, #32
	ldr	r3, [r6, #172]
	mov	r1, r5
	add	r0, r0, #8
	add	r3, r3, #8
	str	r0, [r6, #160]
	str	r3, [r6, #172]
	stm	r5, {r3, ip}
	str	r6, [r5, #32]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	bne	.L3291
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3274:
	ldr	r1, [r1, #48]
	mov	r0, r7
	add	r6, r4, #368
	bl	skb_put
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r4, #228]
	add	r1, r4, #224
	add	r2, r4, #240
	mov	r0, #4
	stm	r7, {r1, r3}
	str	r7, [r3]
	ldr	r3, [r4, #232]
	str	r7, [r4, #228]
	ldr	r1, [r4, #380]
	add	r3, r3, #1
	str	r3, [r4, #232]
	bl	queue_work_on
	b	.L3275
.L3289:
	mov	r0, r7
	bl	dev_kfree_skb_any
	mov	r0, r8
	str	r8, [r5]
.L3288:
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L3273:
	mov	r0, r7
	bl	dev_kfree_skb_any
	mov	r3, #0
	mov	r0, r3
	str	r3, [r5]
	b	.L3288
.L3290:
	ldr	r1, [r4, #220]
	add	r0, r5, #36
	add	r2, r4, #216
	bl	__list_add
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L3291:
	mov	r0, r6
	bl	dev_kfree_skb_any
.L3277:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC266
	mov	r2, r7
	movt	r1, #:upper16:.LC266
	add	r0, r0, #32
	bl	dev_err
	ldr	r1, [r4, #220]
	add	r0, r5, #36
	add	r2, r4, #216
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__list_add
.L3279:
	mvn	r7, #11
	b	.L3277
	.fnend
	.size	rmnet_mux_sdio_complete_epout, .-rmnet_mux_sdio_complete_epout
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_unbind, %function
rmnet_sdio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	add	r0, r1, #252
	mov	r4, r1
	str	lr, [sp, #4]
	bl	cancel_delayed_work_sync
	ldr	r0, [r4, #200]
	bl	destroy_workqueue
	ldr	r2, [r4, #320]
	mov	r3, #0
	str	r3, [r4, #88]
	str	r3, [r4, #92]
	tst	r2, #2
	str	r3, [r4, #96]
	bne	.L3302
.L3293:
	ldr	r3, [r4, #324]
	tst	r3, #2
	beq	.L3294
	add	r1, r4, #324
	mov	r0, #1
	bl	_clear_bit
.L3294:
	ldr	r0, [r4, #352]
	bl	debugfs_remove_recursive
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
.L3302:
	add	r1, r4, #320
	mov	r0, #1
	bl	_clear_bit
	b	.L3293
	.fnend
	.size	rmnet_sdio_unbind, .-rmnet_sdio_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_connect_w, %function
grmnet_ctrl_smd_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #2874
	movt	r5, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #16]
	ldrh	r3, [r5, r3]
	.pad #12
	sub	sp, sp, #12
	ldr	r6, [r0, #-12]
	tst	r3, #4
	bne	.L3321
.L3304:
	ldr	r3, [r4, #-104]
	tst	r3, #2
	bne	.L3305
	ldr	r3, [r4, #-104]
	tst	r3, #4
	beq	.L3322
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L3322:
	sub	r1, r4, #104
	mov	r0, #2
	bl	_set_bit
	ldr	r0, .L3324
	mov	r3, #84
	mla	r0, r3, r6, r0
	add	r0, r0, #4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	platform_driver_register
.L3305:
	sub	r2, r4, #112
	movw	r3, #:lower16:grmnet_ctrl_smd_notify
	ldr	r0, [r4, #-108]
	mov	r1, r2
	movt	r3, #:upper16:grmnet_ctrl_smd_notify
	bl	smd_open
	subs	r2, r0, #0
	beq	.L3307
	cmn	r2, #11
	bne	.L3308
	movw	r3, #2898
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L3323
.L3309:
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, #250
	movt	r3, #:upper16:.LANCHOR1
	ldr	r5, [r3, #3484]
	bl	msecs_to_jiffies
	mov	r3, r0
	mov	r2, r4
	mov	r0, #4
	mov	r1, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	queue_delayed_work_on
.L3307:
	sub	r5, r4, #4
	ldr	r6, [r4, #-24]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-8]
	mov	r7, r0
	cmp	r3, #0
	beq	.L3310
	orr	r2, r6, #4
	mov	r1, r6
	ldr	r0, [r4, #-112]
	mvn	r2, r2
	bl	smd_tiocmset
.L3310:
	mov	r1, r7
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock_irqrestore
.L3321:
	movw	r1, #:lower16:.LC267
	ldr	r2, .L3324+4
	movt	r1, #:upper16:.LC267
	ldr	r0, .L3324+8
	bl	__dynamic_pr_debug
	b	.L3304
.L3323:
	movw	r1, #:lower16:.LC268
	ldr	r3, [r4, #-108]
	str	r2, [sp]
	movt	r1, #:upper16:.LC268
	ldr	r2, .L3324+4
	ldr	r0, .L3324+12
	bl	__dynamic_pr_debug
	b	.L3309
.L3308:
	mov	r3, r2
	ldr	r1, .L3324+4
	movw	r0, #:lower16:.LC269
	ldr	r2, [r4, #-108]
	movt	r0, #:upper16:.LC269
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	printk
.L3325:
	.align	2
.L3324:
	.word	.LANCHOR1+512
	.word	.LANCHOR3+2224
	.word	.LANCHOR2+2856
	.word	.LANCHOR2+2880
	.fnend
	.size	grmnet_ctrl_smd_connect_w, .-grmnet_ctrl_smd_connect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_open_sdio_work, %function
rmnet_mux_open_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #3536]
	cmp	r2, #90
	bgt	.L3330
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	add	r2, r2, #1
	str	r6, [sp, #8]
	mov	r0, #2000
	str	lr, [sp, #12]
	ldr	r5, [r4, #124]
	str	r2, [r3, #3536]
	bl	msecs_to_jiffies
	mov	r3, r0
	mov	r2, r4
	ldr	r6, [sp, #8]
	mov	r1, r5
	mov	r0, #4
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_delayed_work_on
.L3330:
	ldr	r3, [r0, #-172]
	movw	r1, #:lower16:.LC270
	movt	r1, #:upper16:.LC270
	ldr	r0, [r3]
	add	r0, r0, #32
	b	dev_err
	.fnend
	.size	rmnet_mux_open_sdio_work, .-rmnet_mux_open_sdio_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_start_rx, %function
gbam_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	add	r7, r0, #4
	mov	r6, r0
	strd	r8, [sp, #16]
	mov	r0, r7
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #12]
	mov	r8, r0
	cmp	r3, #0
	beq	.L3335
	movw	r5, #:lower16:.LANCHOR0
	ldr	r9, [r3, #88]
	add	r3, r6, #52
	movt	r5, #:upper16:.LANCHOR0
	str	r3, [sp, #4]
.L3333:
	ldr	r4, [r6, #52]
	mvn	r3, #0
	mov	r2, #0
	ldr	r0, [sp, #4]
	mov	r1, #32
	sub	r10, r4, #36
	cmp	r4, r0
	beq	.L3335
	ldr	r0, [r5, #508]
	cmp	r0, #0
	beq	.L3334
	ldr	r0, [r5, #512]
	ldr	ip, [r6, #68]
	cmp	ip, r0
	bcs	.L3335
.L3334:
	ldr	r0, [r5, #516]
	add	r0, r0, #8
	bl	__alloc_skb
	subs	fp, r0, #0
	mov	r0, r4
	beq	.L3335
	ldr	r1, [fp, #160]
	ldr	r2, [fp, #172]
	add	r1, r1, #8
	add	r2, r2, #8
	str	r1, [fp, #160]
	str	r2, [fp, #172]
	bl	list_del
	ldr	r2, [fp, #172]
	mov	r1, r8
	mov	r0, r7
	str	r2, [r4, #-36]
	ldr	r2, [r5, #516]
	str	r2, [r4, #-32]
	str	fp, [r4, #-4]
	bl	_raw_spin_unlock_irqrestore
	ldr	ip, [r9, #8]
	mov	r2, #32
	mov	r1, r10
	mov	r0, r9
	ldr	r8, [ip, #16]
	blx	r8
	str	r0, [sp]
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp]
	mov	r8, r0
	cmp	r3, #0
	bne	.L3353
	ldr	r3, [r6, #12]
	cmp	r3, #0
	bne	.L3333
.L3335:
	mov	r1, r8
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L3353:
	mov	r0, fp
	bl	dev_kfree_skb_any
	ldr	r0, .L3356
	bl	__printk_ratelimit
	cmp	r0, #0
	bne	.L3354
.L3337:
	ldr	r3, [r6, #12]
	cmp	r3, #0
	bne	.L3355
	ldr	r3, [r9, #8]
	mov	r1, r10
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	b	.L3335
.L3355:
	mov	r0, r4
	ldr	r2, [r6, #52]
	ldr	r1, [sp, #4]
	bl	__list_add
	b	.L3335
.L3354:
	movw	r0, #:lower16:.LC271
	ldr	r1, .L3356
	ldr	r2, [sp]
	movt	r0, #:upper16:.LC271
	bl	printk
	b	.L3337
.L3357:
	.align	2
.L3356:
	.word	.LANCHOR3+2252
	.fnend
	.size	gbam_start_rx, .-gbam_start_rx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_epout_complete, %function
gbam_epout_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r0]
	ldr	r6, [r1, #44]
	ldr	r8, [r1, #32]
	cmn	r6, #104
	beq	.L3360
	cmp	r6, #0
	beq	.L3361
	cmn	r6, #108
	beq	.L3360
	ldr	r0, .L3389
	bl	__printk_ratelimit
	cmp	r0, #0
	bne	.L3387
.L3363:
	mov	r0, r8
	add	r9, r5, #4
	bl	dev_kfree_skb_any
	mov	r0, r9
	bl	_raw_spin_lock
.L3362:
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldr	r3, [r6, #508]
	cmp	r3, #0
	beq	.L3364
	ldr	r2, [r5, #68]
	ldr	r3, [r6, #512]
	cmp	r2, r3
	bcc	.L3364
	ldr	r3, [r5, #276]
	cmp	r3, #0
	bne	.L3386
	ldr	r3, [r5, #272]
	mov	r2, #1
	str	r2, [r5, #276]
	add	r3, r3, r2
	str	r3, [r5, #272]
.L3386:
	ldr	r1, [r5, #56]
	add	r0, r4, #36
	add	r2, r5, #52
	bl	__list_add
	mov	r0, r9
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	_raw_spin_unlock
.L3360:
	mov	r0, r8
	bl	dev_kfree_skb_any
	mov	r3, #0
	mov	r1, r4
	mov	r0, r7
	str	r3, [r4]
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	bx	r3	@ indirect register sibling call
.L3364:
	mov	r0, r9
	bl	_raw_spin_unlock
	ldr	r0, [r6, #516]
	mvn	r3, #0
	mov	r2, #0
	mov	r1, #32
	add	r0, r0, #8
	bl	__alloc_skb
	subs	r8, r0, #0
	beq	.L3368
	ldr	ip, [r8, #160]
	mov	r0, r7
	mov	r2, #32
	ldr	r3, [r8, #172]
	mov	r1, r4
	add	ip, ip, #8
	add	r3, r3, #8
	str	ip, [r8, #160]
	str	r3, [r8, #172]
	str	r3, [r4]
	ldr	r3, [r6, #516]
	str	r3, [r4, #4]
	str	r8, [r4, #32]
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	bne	.L3388
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L3361:
	ldr	r1, [r1, #48]
	mov	r0, r8
	add	r9, r5, #4
	bl	skb_put
	mov	r0, r9
	bl	_raw_spin_lock
	ldr	r0, [r5, #64]
	add	r2, r5, #60
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r2, [r8]
	ldr	r1, [r3, #3532]
	add	r2, r5, #80
	str	r0, [r8, #4]
	str	r8, [r0]
	ldr	r3, [r5, #68]
	mov	r0, #4
	str	r8, [r5, #64]
	add	r3, r3, #1
	str	r3, [r5, #68]
	bl	queue_work_on
	b	.L3362
.L3388:
	mov	r0, r8
	bl	dev_kfree_skb_any
	ldr	r0, .L3389
	bl	__printk_ratelimit
	cmp	r0, #0
	beq	.L3368
	movw	r0, #:lower16:.LC273
	mov	r2, r6
	ldr	r1, .L3389
	movt	r0, #:upper16:.LC273
	bl	printk
.L3368:
	mov	r0, r9
	bl	_raw_spin_lock
	b	.L3386
.L3387:
	ldr	r1, [r4, #4]
	movw	r0, #:lower16:.LC272
	mov	r3, r6
	ldr	ip, [r4, #48]
	movt	r0, #:upper16:.LC272
	ldr	r2, [r7, #4]
	str	ip, [sp]
	str	r1, [sp, #4]
	ldr	r1, .L3389
	bl	printk
	b	.L3363
.L3390:
	.align	2
.L3389:
	.word	.LANCHOR3+2268
	.fnend
	.size	gbam_epout_complete, .-gbam_epout_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_ioctl, %function
usb_rmnet_mux_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #65024
	movt	r3, 32772
	cmp	r1, r3
	bne	.L3393
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3395
	mov	r0, #4
	bx	lr
.L3395:
	ldr	r1, [r0, #124]
	mov	r0, r2
	mov	r2, #4
	add	r1, r1, #352
	b	__copy_to_user
.L3393:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	usb_rmnet_mux_ctrl_ioctl, .-usb_rmnet_mux_ctrl_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_ioctl, %function
acc_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #19714
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, 16640
	str	r6, [sp, #8]
	cmp	r1, r3
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	beq	.L3398
	bls	.L3412
	movw	r3, #19716
	movt	r3, 16640
	cmp	r1, r3
	beq	.L3403
	bcc	.L3404
	movw	r3, #19717
	movt	r3, 16640
	cmp	r1, r3
	beq	.L3405
	movw	r3, #19718
	movt	r3, 16640
	cmp	r1, r3
	addeq	r4, r4, #1376
	addeq	r4, r4, #5
	bne	.L3410
.L3407:
	cmp	r4, #0
	beq	.L3410
	mov	r0, r4
	mov	r6, r2
	bl	strlen
	mov	r3, sp
	add	r5, r0, #1
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3413
.L3408:
	mvn	r0, #13
	b	.L3396
.L3412:
	movw	r3, #19720
	cmp	r1, r3
	beq	.L3400
	movw	r3, #19713
	movt	r3, 16640
	cmp	r1, r3
	beq	.L3401
	movw	r3, #19719
	cmp	r1, r3
	beq	.L3414
.L3410:
	mvn	r0, #21
.L3396:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3401:
	add	r4, r4, #101
	b	.L3407
.L3405:
	add	r4, r4, #1120
	add	r4, r4, #5
	b	.L3407
.L3413:
	mov	r1, r4
	mov	r0, r6
	mov	r2, r5
	bl	__copy_to_user
	cmp	r0, #0
	bne	.L3408
	mov	r0, r5
	b	.L3396
.L3404:
	add	r4, r4, #612
	add	r4, r4, #1
	b	.L3407
.L3400:
	ldr	r0, [r4, #1648]
	b	.L3396
.L3414:
	ldr	r0, [r4, #1644]
	b	.L3396
.L3403:
	add	r4, r4, #868
	add	r4, r4, #1
	b	.L3407
.L3398:
	add	r4, r4, #356
	add	r4, r4, #1
	b	.L3407
	.fnend
	.size	acc_ioctl, .-acc_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_ioctl, %function
ffs_epfile_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	ldr	r0, [r4, #36]
	ldr	r3, [r0, #92]
	cmp	r3, #2
	bne	.L3436
	add	r0, r0, #24
	mov	r5, r1
	mov	r6, r2
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #40]
	cmp	r3, #0
	mvneq	r5, #18
	beq	.L3418
	movw	r2, #26371
	cmp	r5, r2
	beq	.L3419
	bhi	.L3420
	movw	r2, #26369
	cmp	r5, r2
	beq	.L3421
	movw	r2, #26370
	cmp	r5, r2
	bne	.L3431
	ldr	r0, [r3]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L3433
	mov	r5, #0
	blx	r3
.L3418:
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
.L3415:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3420:
	movw	r2, #26497
	cmp	r5, r2
	beq	.L3423
	movw	r2, #26498
	movt	r2, 32777
	cmp	r5, r2
	bne	.L3431
	ldr	r0, [r4, #36]
	ldr	r2, [r0]
	ldr	r2, [r2, #16]
	cmp	r2, #3
	moveq	r2, #1
	beq	.L3427
	cmp	r2, #5
	moveq	r2, #2
	movne	r2, #0
.L3427:
	add	r2, r2, #2
	add	r0, r0, #24
	ldr	r4, [r3, r2, lsl #2]
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, #9; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3428
.L3429:
	mvn	r5, #13
	b	.L3415
.L3431:
	mvn	r5, #24
	b	.L3418
.L3421:
	ldr	r0, [r3]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #32]
	cmp	r3, #0
	beq	.L3432
	blx	r3
	mov	r5, r0
	b	.L3418
.L3423:
	ldrb	r5, [r3, #20]	@ zero_extendqisi2
	b	.L3418
.L3419:
	ldr	r0, [r3]
	mov	r1, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	mov	r5, r0
	b	.L3418
.L3436:
	movw	r0, #:lower16:.LC33
	movw	r1, #978
	movt	r0, #:upper16:.LC33
	mvn	r5, #18
	bl	warn_slowpath_null
	b	.L3415
.L3428:
	mov	r1, r4
	mov	r0, r6
	mov	r2, #9
	bl	__copy_to_user
	subs	r5, r0, #0
	beq	.L3415
	b	.L3429
.L3432:
	mvn	r5, #94
	b	.L3418
.L3433:
	mov	r5, r3
	b	.L3418
	.fnend
	.size	ffs_epfile_ioctl, .-ffs_epfile_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_ioctl, %function
rmnet_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r3, #2922
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR2
	mov	r7, r2
	movt	r6, #:upper16:.LANCHOR2
	str	r8, [sp, #16]
	mov	r8, r1
	ldrh	r3, [r6, r3]
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	ldr	r4, [r0, #124]
	tst	r3, #4
	bne	.L3455
.L3438:
	add	r5, r4, #28
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L3439
	movw	r3, #29186
	movt	r3, 32772
	cmp	r8, r3
	bne	.L3456
	ldr	r2, [r4, #12]
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	str	r2, [sp, #4]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3443
.L3445:
	movw	r0, #:lower16:.LC275
	mvn	r7, #13
	movt	r0, #:upper16:.LC275
	bl	printk
.L3444:
	movw	r3, #2946
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L3457
.L3446:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L3437:
	mov	r0, r7
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3443:
	mov	r2, #4
	mov	r0, r7
	add	r1, sp, r2
	bl	__copy_to_user
	subs	r7, r0, #0
	beq	.L3444
	b	.L3445
.L3455:
	movw	r1, #:lower16:.LC274
	mov	r3, r8
	ldr	r2, .L3458
	movt	r1, #:upper16:.LC274
	ldr	r0, .L3458+4
	bl	__dynamic_pr_debug
	b	.L3438
.L3457:
	movw	r1, #:lower16:.LC276
	ldr	r2, .L3458
	movt	r1, #:upper16:.LC276
	ldr	r3, [r4, #12]
	ldr	r0, .L3458+8
	bl	__dynamic_pr_debug
	b	.L3446
.L3439:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #15
	b	.L3437
.L3456:
	movw	r0, #:lower16:.LC277
	mvn	r7, #21
	movt	r0, #:upper16:.LC277
	bl	printk
	b	.L3446
.L3459:
	.align	2
.L3458:
	.word	.LANCHOR3+2288
	.word	.LANCHOR2+2904
	.word	.LANCHOR2+2928
	.fnend
	.size	rmnet_ctrl_ioctl, .-rmnet_ctrl_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_ioctl, %function
rndis_qc_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r3, #0
	movw	r4, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	ldr	r0, .L3484
	movt	r4, #:upper16:.LANCHOR1
	str	r8, [sp, #16]
	mov	r7, r2
	mov	r8, r1
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	strb	r3, [sp, #3]
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #2496]
	mov	r6, r0
	cmp	r3, #0
	beq	.L3480
	ldrb	r0, [r3, #132]	@ zero_extendqisi2
	add	r2, r3, #148
	ldr	r1, [r3, #136]
	strb	r0, [sp, #3]
	str	r1, [sp, #4]
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r5, [r2]
	add	r5, r5, #1
	strex	r1, r5, [r2]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r5, #1
	beq	.L3481
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r5, #15
.L3462:
	mov	r1, r6
	ldr	r0, .L3484
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3480:
	movw	r0, #:lower16:.LC62
	ldr	r1, .L3484+4
	mvn	r5, #18
	movt	r0, #:upper16:.LC62
	bl	printk
	b	.L3462
.L3481:
	mov	r1, r6
	ldr	r0, .L3484
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC278
	mov	r2, r8
	ldr	r1, .L3484+4
	movt	r0, #:upper16:.LC278
	bl	printk
	movw	r3, #26881
	movt	r3, 32769
	cmp	r8, r3
	beq	.L3465
	movw	r3, #26882
	movt	r3, 32772
	cmp	r8, r3
	bne	.L3482
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3471
.L3473:
	movw	r0, #:lower16:.LC279
	ldr	r1, .L3484+4
	mvn	r5, #13
	movt	r0, #:upper16:.LC279
	bl	printk
.L3472:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2970
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L3483
.L3470:
	ldr	r0, .L3484
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #2496]
	mov	r6, r0
	cmp	r3, #0
	beq	.L3480
	add	r2, r3, #148
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L3462
.L3471:
	mov	r2, #4
	mov	r0, r7
	add	r1, sp, r2
	bl	__copy_to_user
	cmp	r0, #0
	bne	.L3473
	mov	r5, r0
	b	.L3472
.L3482:
	movw	r0, #:lower16:.LC282
	ldr	r1, .L3484+4
	mvn	r5, #21
	movt	r0, #:upper16:.LC282
	bl	printk
	b	.L3470
.L3465:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #1; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3467
.L3469:
	movw	r0, #:lower16:.LC279
	ldr	r1, .L3484+4
	mvn	r5, #13
	movt	r0, #:upper16:.LC279
	bl	printk
.L3468:
	movw	r0, #:lower16:.LC280
	ldrb	r2, [sp, #3]	@ zero_extendqisi2
	ldr	r1, .L3484+4
	movt	r0, #:upper16:.LC280
	bl	printk
	b	.L3470
.L3483:
	movw	r1, #:lower16:.LC281
	ldr	r2, .L3484+4
	movt	r1, #:upper16:.LC281
	ldr	r3, [sp, #4]
	ldr	r0, .L3484+8
	bl	__dynamic_pr_debug
	b	.L3470
.L3467:
	mov	r2, r5
	mov	r0, r7
	add	r1, sp, #3
	bl	__copy_to_user
	cmp	r0, #0
	bne	.L3469
	mov	r5, r0
	b	.L3468
.L3485:
	.align	2
.L3484:
	.word	.LANCHOR1+2492
	.word	.LANCHOR3+2308
	.word	.LANCHOR2+2952
	.fnend
	.size	rndis_qc_ioctl, .-rndis_qc_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_ioctl, %function
mbim_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	ip, #2994
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	mov	r7, r2
	str	lr, [sp, #20]
	ldrh	r1, [r3, ip]
	ldr	r4, [r0, #124]
	tst	r1, #4
	bne	.L3505
.L3487:
	add	r5, r4, #96
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L3488
	movw	r3, #28419
	movt	r3, 32770
	cmp	r6, r3
	beq	.L3490
	movw	r3, #28418
	movt	r3, 32772
	cmp	r6, r3
	bne	.L3506
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3493
.L3495:
	movw	r0, #:lower16:.LC279
	ldr	r1, .L3507
	mvn	r6, #13
	movt	r0, #:upper16:.LC279
	bl	printk
.L3494:
	movw	r0, #:lower16:.LC283
	ldr	r1, .L3507
	ldr	r2, [r4, #224]
	movt	r0, #:upper16:.LC283
	bl	printk
	b	.L3496
.L3506:
	movw	r0, #:lower16:.LC285
	ldr	r1, .L3507
	mvn	r6, #21
	movt	r0, #:upper16:.LC285
	bl	printk
.L3496:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L3486:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3490:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #2; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3497
.L3499:
	movw	r0, #:lower16:.LC279
	ldr	r1, .L3507
	mvn	r6, #13
	movt	r0, #:upper16:.LC279
	bl	printk
.L3498:
	movw	r0, #:lower16:.LC284
	ldrh	r2, [r4, #228]
	ldr	r1, .L3507
	movt	r0, #:upper16:.LC284
	bl	printk
	b	.L3496
.L3493:
	mov	r0, r7
	mov	r2, #4
	add	r1, r4, #224
	bl	__copy_to_user
	subs	r6, r0, #0
	beq	.L3494
	b	.L3495
.L3497:
	mov	r0, r7
	mov	r2, #2
	add	r1, r4, #228
	bl	__copy_to_user
	subs	r6, r0, #0
	beq	.L3498
	b	.L3499
.L3505:
	movw	r1, #:lower16:.LC274
	add	r0, r3, #2976
	ldr	r2, .L3507
	movt	r1, #:upper16:.LC274
	mov	r3, r6
	bl	__dynamic_pr_debug
	b	.L3487
.L3488:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r6, #15
	b	.L3486
.L3508:
	.align	2
.L3507:
	.word	.LANCHOR3+2324
	.fnend
	.size	mbim_ioctl, .-mbim_ioctl
	.align	2
	.global	usb_rmnet_mux_ctrl_read
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_read, %function
usb_rmnet_mux_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r9, r1
	str	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #28]
	.pad #32
	sub	sp, sp, #32
	ldr	r4, [r0, #124]
	mov	r3, sp
	bic	r8, r3, #8128
	bic	r8, r8, #63
.L3510:
	ldr	r3, [r4, #372]
	cmp	r3, #0
	beq	.L3530
	add	r6, r4, #368
	add	r5, r4, #316
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r4, #316]
	mov	r1, r0
	cmp	r5, r7
	bne	.L3513
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #316]
	cmp	r5, r3
	bne	.L3510
	ldr	r3, [r4, #372]
	cmp	r3, #0
	beq	.L3510
	ldr	r0, [r8, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r2, #:upper16:autoremove_wake_function
	mov	r3, #0
	add	r6, r4, #324
	str	r3, [sp, #12]
	str	r0, [sp, #16]
	str	r2, [sp, #20]
	str	r1, [sp, #24]
	str	r1, [sp, #28]
	b	.L3517
.L3531:
	bl	schedule
.L3517:
	mov	r2, #1
	add	r1, sp, #12
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r3, [r4, #316]
	cmp	r5, r3
	bne	.L3515
	ldr	r3, [r4, #372]
	cmp	r3, #0
	beq	.L3515
	ldr	r3, [r8, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3531
	mov	r5, #65024
	add	r1, sp, #12
	mov	r0, r6
	movt	r5, 65535
	bl	finish_wait
.L3509:
	mov	r0, r5
	add	sp, sp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L3530:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #3018
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	mvneq	r5, #18
	beq	.L3509
	movw	r1, #:lower16:.LC286
	ldr	r2, .L3534
	mvn	r5, #18
	movt	r1, #:upper16:.LC286
	ldr	r0, .L3534+4
	bl	__dynamic_pr_debug
	b	.L3509
.L3515:
	add	r1, sp, #12
	mov	r0, r6
	bl	finish_wait
	b	.L3510
.L3513:
	ldr	r3, [r7, #-4]
	sub	r8, r7, #8
	cmp	r3, r10
	bhi	.L3532
	mov	r0, r7
	str	r1, [sp, #4]
	bl	list_del
	ldr	r3, [r4, #336]
	mov	r0, r6
	ldr	r1, [sp, #4]
	sub	r3, r3, #1
	str	r3, [r4, #336]
	bl	_raw_spin_unlock_irqrestore
	mov	r3, sp
	ldr	r5, [r7, #-4]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r9, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	mov	r0, r5
	beq	.L3533
.L3519:
	ldr	r3, [r4, #420]
	cmp	r0, #0
	movne	r5, r0
	add	r3, r3, #1
	str	r3, [r4, #420]
	ldr	r0, [r7, #-8]
	bl	kfree
	mov	r0, r8
	bl	kfree
	b	.L3509
.L3533:
	mov	r0, r9
	mov	r2, r5
	ldr	r1, [r7, #-8]
	bl	__copy_to_user
	b	.L3519
.L3532:
	mov	r0, r6
	mvn	r5, #11
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC287
	mov	r3, r10
	ldr	r1, .L3534
	ldr	r2, [r7, #-4]
	movt	r0, #:upper16:.LC287
	bl	printk
	b	.L3509
.L3535:
	.align	2
.L3534:
	.word	.LANCHOR3+2336
	.word	.LANCHOR2+3000
	.fnend
	.size	usb_rmnet_mux_ctrl_read, .-usb_rmnet_mux_ctrl_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_read, %function
rmnet_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	ip, r3
	strd	r6, [sp, #8]
	movw	r3, #3042
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	mov	r0, ip
	movt	r0, #:upper16:.LANCHOR2
	.pad #52
	sub	sp, sp, #52
	ldrh	r3, [r0, r3]
	stmib	sp, {r0, r2}
	str	r1, [sp, #12]
	tst	r3, #4
	bne	.L3568
.L3537:
	ldr	r3, [sp, #8]
	cmp	r3, #2048
	bhi	.L3569
	add	r3, r4, #20
	str	r3, [sp, #16]
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r1, r3
	.syntax divided
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r1]
	add	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L3540
	mov	r3, sp
	ldr	r8, .L3578
	add	r7, r4, #44
	bic	r9, r3, #8128
	add	r6, r4, #52
	bic	r9, r9, #63
.L3541:
	movw	fp, #:lower16:.LC291
	movt	fp, #:upper16:.LC291
.L3542:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #44]
	mov	r3, r0
	mov	r0, r6
	mov	r1, r3
	cmp	r5, r7
	bne	.L3543
	bl	_raw_spin_unlock_irqrestore
	ldrh	r3, [r8]
	tst	r3, #4
	bne	.L3570
	ldr	r10, [r4, #44]
	cmp	r7, r10
	bne	.L3542
.L3545:
	ldr	r0, [r9, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #40
	movt	r2, #:upper16:autoremove_wake_function
	mov	r3, #0
	add	r5, r4, #32
	str	r3, [sp, #28]
	str	r0, [sp, #32]
	str	r2, [sp, #36]
	str	r1, [sp, #40]
	str	r1, [sp, #44]
	b	.L3549
.L3571:
	bl	schedule
.L3549:
	mov	r2, #1
	add	r1, sp, #28
	mov	r0, r5
	bl	prepare_to_wait
	ldr	r3, [r4, #44]
	cmp	r3, r10
	bne	.L3547
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3571
	add	r1, sp, #28
	mov	r0, r5
	bl	finish_wait
	ldr	r2, [sp, #4]
	movw	r3, #3090
	ldrh	r3, [r2, r3]
	tst	r3, #4
	bne	.L3572
.L3557:
	ldr	r1, [sp, #16]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r4, #65024
	movt	r4, 65535
	b	.L3536
.L3570:
	ldr	r2, .L3578+4
	mov	r1, fp
	ldr	r0, .L3578+8
	bl	__dynamic_pr_debug
	ldr	r10, [r4, #44]
	cmp	r10, r7
	bne	.L3542
	b	.L3545
.L3543:
	mov	r0, r5
	str	r3, [sp, #20]
	sub	r7, r5, #8
	bl	list_del
	ldr	r3, [sp, #20]
	mov	r0, r6
	mov	r1, r3
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [sp, #8]
	ldr	r3, [r5, #-4]
	cmp	r3, r2
	bhi	.L3573
	ldr	r1, [sp, #4]
	movw	r2, #3114
	ldrh	r2, [r1, r2]
	tst	r2, #4
	bne	.L3574
.L3551:
	ldr	r1, [sp, #16]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	ldr	r2, [r5, #-4]
	bic	r3, r3, #8128
	ldr	r0, [sp, #12]
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r0, r2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3575
.L3552:
	cmp	r2, #0
	bne	.L3576
	ldr	r2, [sp, #4]
	movw	r3, #3138
	ldr	r4, [r5, #-4]
	ldrh	r3, [r2, r3]
	tst	r3, #4
	bne	.L3577
.L3554:
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r7
	bl	kfree
.L3536:
	mov	r0, r4
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3547:
	add	r1, sp, #28
	mov	r0, r5
	bl	finish_wait
	b	.L3541
.L3575:
	ldr	r1, [r5, #-8]
	bl	__copy_to_user
	mov	r2, r0
	b	.L3552
.L3568:
	movw	r1, #:lower16:.LC288
	mov	r3, r2
	ldr	r2, .L3578+4
	movt	r1, #:upper16:.LC288
	add	r0, r0, #3024
	bl	__dynamic_pr_debug
	b	.L3537
.L3577:
	movw	r1, #:lower16:.LC296
	mov	r3, r4
	ldr	r2, .L3578+4
	movt	r1, #:upper16:.LC296
	ldr	r0, .L3578+12
	bl	__dynamic_pr_debug
	ldr	r4, [r5, #-4]
	b	.L3554
.L3574:
	movw	r1, #:lower16:.LC294
	ldr	r2, .L3578+4
	movt	r1, #:upper16:.LC294
	ldr	r0, .L3578+16
	bl	__dynamic_pr_debug
	b	.L3551
.L3572:
	movw	r1, #:lower16:.LC292
	ldr	r0, .L3578+20
	movt	r1, #:upper16:.LC292
	bl	__dynamic_pr_debug
	b	.L3557
.L3573:
	movw	r0, #:lower16:.LC293
	mov	r1, r3
	movt	r0, #:upper16:.LC293
	bl	printk
	ldr	r1, [sp, #16]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r5, #-8]
	mvn	r4, #11
	bl	kfree
	mov	r0, r7
	bl	kfree
	b	.L3536
.L3576:
	movw	r0, #:lower16:.LC295
	mov	r1, r2
	movt	r0, #:upper16:.LC295
	mvn	r4, #13
	bl	printk
	b	.L3554
.L3540:
	ldr	r1, [sp, #16]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC290
	mvn	r4, #15
	movt	r0, #:upper16:.LC290
	bl	printk
	b	.L3536
.L3569:
	movw	r0, #:lower16:.LC289
	mov	r1, r3
	movt	r0, #:upper16:.LC289
	mov	r2, #2048
	bl	printk
	mvn	r4, #21
	b	.L3536
.L3579:
	.align	2
.L3578:
	.word	.LANCHOR2+3066
	.word	.LANCHOR3+2360
	.word	.LANCHOR2+3048
	.word	.LANCHOR2+3120
	.word	.LANCHOR2+3096
	.word	.LANCHOR2+3072
	.fnend
	.size	rmnet_ctrl_read, .-rmnet_ctrl_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_read, %function
acc_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #3162
	movt	r5, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r7, r2
	ldrh	r3, [r5, r3]
	strd	r8, [sp, #16]
	mov	r9, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	ldr	r4, [r0, #124]
	tst	r3, #4
	bne	.L3625
.L3581:
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	tst	r3, #2
	beq	.L3582
	movw	r3, #3186
	ldrh	r3, [r5, r3]
	tst	r3, #4
	mvneq	r4, #18
	bne	.L3626
.L3580:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3582:
	movw	r2, #3210
	cmp	r7, #16384
	ldrh	r2, [r5, r2]
	movcs	r7, #16384
	tst	r2, #4
	bne	.L3627
.L3584:
	ands	r3, r3, #1
	bne	.L3585
	mov	r2, sp
	str	r3, [sp, #4]
	add	r1, sp, #16
	bic	r8, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r8, r8, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r8, #12]
	add	r6, sp, #4
	add	r10, r4, #1664
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L3588
.L3628:
	bl	schedule
.L3588:
	mov	r2, #1
	mov	r1, r6
	mov	r0, r10
	bl	prepare_to_wait
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	tst	r3, #1
	bne	.L3586
	ldr	r3, [r8, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3628
	mov	r4, #65024
	mov	r1, r6
	mov	r0, r10
	movt	r4, 65535
	bl	finish_wait
.L3592:
	movw	r3, #3306
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L3580
	movw	r1, #:lower16:.LC303
	mov	r2, r4
	ldr	r0, .L3632
	movt	r1, #:upper16:.LC303
	bl	__dynamic_pr_debug
	b	.L3580
.L3586:
	mov	r1, r6
	mov	r0, r10
	bl	finish_wait
.L3585:
	ldr	r8, [r4, #1688]
	ldr	r3, [r4, #1696]
	cmp	r3, #0
	bne	.L3589
.L3590:
	str	r7, [r8, #4]
	ldr	r0, [r4, #96]
	mov	r3, #0
	mov	r2, #208
	mov	r1, r8
	str	r3, [r4, #1696]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L3597
	movw	r3, #3234
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L3629
.L3593:
	ldr	r3, [r4, #1696]
	cmp	r3, #0
	bne	.L3589
	mov	r2, sp
	str	r3, [sp, #4]
	add	r1, sp, #16
	bic	r10, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r10, r10, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r10, #12]
	add	r6, sp, #4
	add	fp, r4, #1664
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L3596
.L3630:
	bl	schedule
.L3596:
	mov	r2, #1
	mov	r1, r6
	mov	r0, fp
	bl	prepare_to_wait
	ldr	r3, [r4, #1696]
	cmp	r3, #0
	bne	.L3594
	ldr	r3, [r10, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3630
	mov	r1, r6
	mov	r0, fp
	bl	finish_wait
	ldr	r0, [r4, #96]
	mov	r1, r8
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	cmp	r0, #0
	beq	.L3603
	movw	r3, #3258
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L3603
	movw	r1, #:lower16:.LC301
	mov	r2, r0
	ldr	r0, .L3632+4
	movt	r1, #:upper16:.LC301
	mov	r4, #65024
	bl	__dynamic_pr_debug
	movt	r4, 65535
	b	.L3592
.L3594:
	mov	r1, r6
	mov	r0, fp
	bl	finish_wait
.L3589:
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	mov	r2, #0
	str	r2, [r4, #1696]
	tst	r3, #1
	beq	.L3597
	ldr	r3, [r8, #48]
	cmp	r3, r2
	bne	.L3598
	ldr	r8, [r4, #1688]
	b	.L3590
.L3626:
	movw	r1, #:lower16:.LC298
	ldr	r0, .L3632+8
	mvn	r4, #18
	movt	r1, #:upper16:.LC298
	bl	__dynamic_pr_debug
	b	.L3580
.L3627:
	movw	r1, #:lower16:.LC299
	ldr	r0, .L3632+12
	movt	r1, #:upper16:.LC299
	bl	__dynamic_pr_debug
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	b	.L3584
.L3603:
	mov	r4, #65024
	movt	r4, 65535
	b	.L3592
.L3597:
	mvn	r4, #4
	b	.L3592
.L3625:
	movw	r1, #:lower16:.LC297
	ldr	r0, .L3632+16
	movt	r1, #:upper16:.LC297
	bl	__dynamic_pr_debug
	b	.L3581
.L3629:
	movw	r1, #:lower16:.LC300
	mov	r2, r8
	ldr	r0, .L3632+20
	movt	r1, #:upper16:.LC300
	bl	__dynamic_pr_debug
	b	.L3593
.L3598:
	movw	r2, #3282
	ldrh	r2, [r5, r2]
	tst	r2, #4
	bne	.L3631
.L3599:
	mov	r2, sp
	cmp	r7, r3
	bic	r2, r2, #8128
	movcs	r4, r3
	bic	r2, r2, #63
	movcc	r4, r7
	ldr	r3, [r2, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r9, r4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	movne	r0, r4
	bne	.L3600
	mov	r0, r9
	mov	r2, r4
	ldr	r1, [r8]
	bl	__copy_to_user
.L3600:
	cmp	r0, #0
	mvnne	r4, #13
	b	.L3592
.L3631:
	movw	r1, #:lower16:.LC302
	ldr	r0, .L3632+24
	mov	r2, r8
	movt	r1, #:upper16:.LC302
	bl	__dynamic_pr_debug
	ldr	r3, [r8, #48]
	b	.L3599
.L3633:
	.align	2
.L3632:
	.word	.LANCHOR2+3288
	.word	.LANCHOR2+3240
	.word	.LANCHOR2+3168
	.word	.LANCHOR2+3192
	.word	.LANCHOR2+3144
	.word	.LANCHOR2+3216
	.word	.LANCHOR2+3264
	.fnend
	.size	acc_read, .-acc_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_read, %function
mtp_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #3330
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR2
	strd	r10, [sp, #24]
	movt	r8, #:upper16:.LANCHOR2
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #52
	sub	sp, sp, #52
	ldrh	r3, [r8, r3]
	str	r2, [sp, #12]
	str	r1, [sp, #20]
	ldr	r2, [r4, #84]
	tst	r3, #4
	str	r2, [sp, #16]
	bne	.L3698
.L3635:
	movw	r3, #3354
	ldrh	r3, [r8, r3]
	tst	r3, #4
	bne	.L3699
.L3636:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3637
	mov	r2, sp
	str	r3, [sp, #28]
	add	r1, sp, #40
	bic	r5, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r5, r5, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r5, #12]
	add	r6, sp, #28
	add	r7, r4, #132
	str	r0, [sp, #32]
	str	r2, [sp, #36]
	str	r1, [sp, #40]
	str	r1, [sp, #44]
	b	.L3640
.L3700:
	bl	schedule
.L3640:
	mov	r2, #1
	mov	r1, r6
	mov	r0, r7
	bl	prepare_to_wait
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3638
	ldr	r3, [r5, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3700
	mov	r1, r6
	mov	r0, r7
	mov	r6, #65024
	add	r10, r4, #88
	bl	finish_wait
	movt	r6, 65535
	b	.L3644
.L3638:
	mov	r1, r6
	mov	r0, r7
	bl	finish_wait
.L3637:
	ldr	r2, [sp, #12]
	movw	r3, #:lower16:.LANCHOR0
	ldr	r1, [r4, #96]
	movt	r3, #:upper16:.LANCHOR0
	sub	r7, r2, #1
	ldr	r2, [r3, #520]
	ldrh	r3, [r1, #20]
	add	r7, r7, r3
	rsb	r3, r3, #0
	and	r7, r7, r3
	cmp	r7, r2
	bhi	.L3660
	add	r10, r4, #88
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #104]
	cmp	r3, #3
	beq	.L3701
	mov	r3, #2
	mov	r0, r10
	str	r3, [r4, #104]
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	bic	r9, r3, #8128
	bic	r9, r9, #63
	b	.L3643
.L3704:
	cmp	r3, #3
	beq	.L3648
.L3647:
	cmp	r3, #2
	bne	.L3663
	ldr	r3, [r5, #48]
	cmp	r3, #0
	bne	.L3702
.L3643:
	ldr	r5, [r4, #168]
	mov	r3, #0
	mov	r2, #208
	str	r7, [r5, #4]
	ldr	r0, [r4, #96]
	mov	r1, r5
	str	r3, [r4, #176]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L3663
	ldr	r0, .L3709
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L3703
.L3645:
	ldr	r3, [r4, #104]
	ldr	r2, [r4, #176]
	cmp	r2, #0
	bne	.L3704
	cmp	r3, #2
	beq	.L3649
	cmp	r3, #3
	beq	.L3653
.L3663:
	mvn	r6, #4
.L3644:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #104]
	cmp	r3, #3
	mvneq	r6, #124
	beq	.L3657
	cmp	r3, #0
	movne	r3, #1
	strne	r3, [r4, #104]
.L3657:
	mov	r0, r10
	bl	_raw_spin_unlock_irq
	movw	r3, #3426
	ldrh	r3, [r8, r3]
	tst	r3, #4
	bne	.L3705
.L3634:
	mov	r0, r6
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3649:
	ldr	r0, [r9, #12]
	movw	r3, #:lower16:autoremove_wake_function
	add	r1, sp, #40
	movt	r3, #:upper16:autoremove_wake_function
	add	r6, sp, #28
	str	r2, [sp, #28]
	add	fp, r4, #132
	str	r0, [sp, #32]
	str	r3, [sp, #36]
	str	r1, [sp, #40]
	str	r1, [sp, #44]
	b	.L3652
.L3706:
	bl	schedule
.L3652:
	mov	r2, #1
	mov	r1, r6
	mov	r0, fp
	bl	prepare_to_wait
	ldr	r3, [r4, #176]
	cmp	r3, #0
	bne	.L3650
	ldr	r3, [r4, #104]
	cmp	r3, #2
	bne	.L3650
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3706
	mov	r1, r6
	mov	r0, fp
	bl	finish_wait
	ldr	r3, [r4, #104]
	cmp	r3, #3
	beq	.L3658
	ldr	r0, [r4, #96]
	mov	r1, r5
	mov	r6, #65024
	movt	r6, 65535
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L3644
.L3703:
	ldr	r3, [sp, #16]
	movw	r2, #:lower16:.LC300
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC300
	ldr	r1, [r3]
	mov	r3, r5
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L3645
.L3650:
	mov	r1, r6
	mov	r0, fp
	bl	finish_wait
	ldr	r3, [r4, #104]
	cmp	r3, #3
	bne	.L3647
.L3658:
	ldr	r3, [r4, #176]
	cmp	r3, #0
	bne	.L3648
.L3653:
	ldr	r0, [r4, #96]
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L3648:
	mov	r0, r10
	mvn	r6, #124
	bl	_raw_spin_lock_irq
	mov	r3, #3
	mov	r0, r10
	str	r3, [r4, #104]
	bl	_raw_spin_unlock_irq
	b	.L3644
.L3702:
	movw	r2, #3402
	ldrh	r2, [r8, r2]
	tst	r2, #4
	bne	.L3707
.L3655:
	ldr	r1, [sp, #12]
	mov	r2, sp
	bic	r2, r2, #8128
	bic	r2, r2, #63
	cmp	r1, r3
	movcc	r6, r1
	movcs	r6, r3
	ldr	r1, [sp, #20]
	ldr	r3, [r2, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r1, r6; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	movne	r0, r6
	beq	.L3708
.L3656:
	cmp	r0, #0
	mvnne	r6, #13
	b	.L3644
.L3699:
	ldr	r3, [sp, #16]
	movw	r2, #:lower16:.LC305
	movt	r2, #:upper16:.LC305
	ldr	r0, .L3709+4
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L3636
.L3698:
	mov	r3, r2
	movw	r2, #:lower16:.LC304
	ldr	r1, [r3]
	movt	r2, #:upper16:.LC304
	add	r0, r8, #3312
	ldr	r3, [sp, #12]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L3635
.L3705:
	ldr	r3, [sp, #16]
	movw	r2, #:lower16:.LC306
	movt	r2, #:upper16:.LC306
	ldr	r0, .L3709+8
	ldr	r1, [r3]
	mov	r3, r6
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L3634
.L3708:
	mov	r0, r1
	mov	r2, r6
	ldr	r1, [r5]
	bl	__copy_to_user
	b	.L3656
.L3660:
	mvn	r6, #21
	b	.L3634
.L3707:
	ldr	r2, [sp, #16]
	ldr	r0, .L3709+12
	ldr	r1, [r2]
	movw	r2, #:lower16:.LC302
	str	r3, [sp]
	movt	r2, #:upper16:.LC302
	mov	r3, r5
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r5, #48]
	b	.L3655
.L3701:
	mov	r3, #1
	mov	r0, r10
	mvn	r6, #124
	str	r3, [r4, #104]
	bl	_raw_spin_unlock_irq
	b	.L3634
.L3710:
	.align	2
.L3709:
	.word	.LANCHOR2+3378
	.word	.LANCHOR2+3336
	.word	.LANCHOR2+3408
	.word	.LANCHOR2+3384
	.fnend
	.size	mtp_read, .-mtp_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_ctrl_read, %function
ccid_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #124]
	.pad #24
	sub	sp, sp, #24
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L3712
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #3450
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L3713
.L3728:
	mvn	r0, #18
.L3711:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3712:
	ldr	r3, [r4, #144]
	mov	r7, r1
	mov	r5, r2
	cmp	r3, #0
	bne	.L3715
	mov	r2, sp
	str	r3, [sp, #4]
	add	r1, sp, #16
	bic	r6, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r6, r6, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r6, #12]
	add	r8, r4, #128
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L3718
.L3729:
	bl	schedule
.L3718:
	mov	r2, #1
	add	r1, sp, #4
	mov	r0, r8
	bl	prepare_to_wait
	ldr	r3, [r4, #144]
	cmp	r3, #0
	bne	.L3716
	ldr	r3, [r6, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3729
	mov	r0, r8
	add	r1, sp, #4
	bl	finish_wait
	mov	r0, #65024
	movt	r0, 65535
	b	.L3711
.L3716:
	add	r1, sp, #4
	mov	r0, r8
	bl	finish_wait
.L3715:
	ldr	r3, [r4, #96]
	mov	r2, #0
	str	r2, [r4, #144]
	cmp	r3, r2
	bne	.L3719
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #3474
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	beq	.L3728
	movw	r1, #:lower16:.LC286
	ldr	r2, .L3731
	add	r0, r0, #3456
	movt	r1, #:upper16:.LC286
	bl	__dynamic_pr_debug
	b	.L3728
.L3719:
	mov	r3, sp
	cmp	r5, #4
	bic	r3, r3, #8128
	movcs	r5, #4
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	movne	r0, r5
	beq	.L3730
.L3721:
	cmp	r0, #0
	moveq	r0, r5
	mvnne	r0, #13
	b	.L3711
.L3730:
	add	r1, r4, #140
	mov	r0, r7
	mov	r2, r5
	bl	__copy_to_user
	b	.L3721
.L3713:
	movw	r1, #:lower16:.LC286
	ldr	r2, .L3731
	movt	r1, #:upper16:.LC286
	ldr	r0, .L3731+4
	bl	__dynamic_pr_debug
	mvn	r0, #18
	b	.L3711
.L3732:
	.align	2
.L3731:
	.word	.LANCHOR3+2376
	.word	.LANCHOR2+3432
	.fnend
	.size	ccid_ctrl_read, .-ccid_ctrl_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_read, %function
modem_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #32]
	tst	r3, #2048
	bne	.L3741
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r2, #57344
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	mov	r5, r1
	ldr	r3, [r4, #2200]
	str	lr, [sp, #12]
	.pad #24
	sub	sp, sp, #24
	movt	r2, 65535
	mov	r1, sp
	and	r1, r1, r2
	cmp	r3, #0
	bne	.L3735
	str	r3, [sp, #4]
	movw	r0, #:lower16:autoremove_wake_function
	mov	r6, r1
	str	r3, [sp, #8]
	movt	r0, #:upper16:autoremove_wake_function
	str	r3, [sp, #12]
	str	r0, [sp, #12]
	str	r3, [sp, #16]
	str	r3, [sp, #20]
	ldr	r2, [r1, #12]
	add	r3, sp, #16
	str	r2, [sp, #8]
	str	r3, [sp, #16]
	str	r3, [sp, #20]
	b	.L3738
.L3746:
	bl	schedule
.L3738:
	mov	r2, #1
	add	r1, sp, #4
	ldr	r0, .L3747
	bl	prepare_to_wait
	ldr	r3, [r4, #2200]
	cmp	r3, #0
	bne	.L3736
	ldr	r3, [r6, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3746
	ldr	r0, .L3747
	add	r1, sp, #4
	bl	finish_wait
	mov	r0, #65024
	movt	r0, 65535
	b	.L3733
.L3736:
	add	r1, sp, #4
	ldr	r0, .L3747
	bl	finish_wait
	mov	r3, sp
	bic	r1, r3, #8128
	bic	r1, r1, #63
.L3735:
	ldr	r3, [r1, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r5, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L3740
	mov	r0, r5
	mov	r2, #4
	ldr	r1, .L3747+4
	bl	__copy_to_user
	cmp	r0, #0
	bne	.L3740
	str	r0, [r4, #2200]
	mov	r0, #4
.L3733:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3740:
	mvn	r0, #13
	b	.L3733
.L3741:
	mvn	r0, #10
	bx	lr
.L3748:
	.align	2
.L3747:
	.word	.LANCHOR1+2204
	.word	.LANCHOR1+3480
	.fnend
	.size	modem_read, .-modem_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_read, %function
adb_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #3498
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR2
	mov	r8, r2
	movt	r9, #:upper16:.LANCHOR2
	strd	r10, [sp, #24]
	ldrh	r3, [r9, r3]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r4, [r0, #124]
	str	r1, [sp, #4]
	tst	r3, #4
	bne	.L3803
.L3750:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #3476]
	cmp	r3, #0
	beq	.L3773
	cmp	r8, #4096
	bhi	.L3774
	add	r7, r4, #108
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r7]
	add	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L3801
	mov	r3, sp
	bic	r6, r3, #8128
	bic	r6, r6, #63
.L3752:
	ldr	r3, [r4, #100]
	cmp	r3, #0
	bne	.L3758
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3758
	ldr	r0, .L3814
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L3804
.L3753:
	ldr	r3, [r4, #100]
	cmp	r3, #0
	bne	.L3752
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3752
	ldr	r0, [r6, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r2, #:upper16:autoremove_wake_function
	add	r5, sp, #12
	str	r3, [sp, #12]
	add	r10, r4, #128
	str	r0, [sp, #16]
	str	r2, [sp, #20]
	str	r1, [sp, #24]
	str	r1, [sp, #28]
	b	.L3757
.L3805:
	bl	schedule
.L3757:
	mov	r2, #1
	mov	r1, r5
	mov	r0, r10
	bl	prepare_to_wait
	ldr	r3, [r4, #100]
	cmp	r3, #0
	bne	.L3755
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3755
	ldr	r3, [r6, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3805
	mov	r1, r5
	mov	r0, r10
	bl	finish_wait
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r8, #65024
	movt	r8, 65535
.L3749:
	mov	r0, r8
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3758:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3769
	mov	r3, sp
	bic	r10, r3, #8128
	bic	r10, r10, #63
	b	.L3760
.L3765:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3769
	ldr	r3, [r6, #48]
	cmp	r3, #0
	bne	.L3806
.L3760:
	ldr	r6, [r4, #152]
	mov	r1, #4096
	mov	r3, #0
	mov	r2, #32
	str	r1, [r6, #4]
	ldr	r0, [r4, #96]
	mov	r1, r6
	str	r3, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L3807
	ldr	r0, .L3814+4
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L3808
.L3764:
	ldr	r3, [r4, #156]
	cmp	r3, #0
	bne	.L3765
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3765
	ldr	r0, [r10, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r2, #:upper16:autoremove_wake_function
	add	r5, sp, #12
	str	r3, [sp, #12]
	add	fp, r4, #128
	str	r0, [sp, #16]
	str	r2, [sp, #20]
	str	r1, [sp, #24]
	str	r1, [sp, #28]
	b	.L3768
.L3809:
	bl	schedule
.L3768:
	mov	r2, #1
	mov	r1, r5
	mov	r0, fp
	bl	prepare_to_wait
	ldr	r3, [r4, #156]
	cmp	r3, #0
	bne	.L3766
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3766
	ldr	r3, [r10, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3809
	mov	r1, r5
	mov	r0, fp
	bl	finish_wait
	ldr	r0, [r4, #96]
	mov	r1, r6
	mov	r8, #65024
	movt	r8, 65535
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L3772
.L3810:
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #140
	bl	__wake_up
	b	.L3772
.L3769:
	mvn	r8, #4
.L3761:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3810
.L3772:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r3, #3618
	ldrh	r3, [r9, r3]
	tst	r3, #4
	beq	.L3749
	movw	r1, #:lower16:.LC310
	mov	r2, r8
	ldr	r0, .L3814+8
	movt	r1, #:upper16:.LC310
	bl	__dynamic_pr_debug
	b	.L3749
.L3804:
	movw	r1, #:lower16:.LC308
	sub	r0, r0, #18
	movt	r1, #:upper16:.LC308
	bl	__dynamic_pr_debug
	b	.L3753
.L3755:
	mov	r1, r5
	mov	r0, r10
	bl	finish_wait
	b	.L3752
.L3808:
	movw	r1, #:lower16:.LC300
	mov	r2, r6
	movt	r1, #:upper16:.LC300
	sub	r0, r0, #18
	bl	__dynamic_pr_debug
	b	.L3764
.L3766:
	mov	r1, r5
	mov	r0, fp
	bl	finish_wait
	b	.L3765
.L3807:
	movw	r3, #3546
	ldrh	r3, [r9, r3]
	tst	r3, #4
	bne	.L3811
.L3763:
	mov	r3, #1
	mvn	r8, #4
	str	r3, [r4, #104]
	b	.L3761
.L3806:
	movw	r2, #3594
	ldrh	r2, [r9, r2]
	tst	r2, #4
	bne	.L3812
.L3770:
	mov	r2, sp
	cmp	r3, r8
	ldr	r0, [sp, #4]
	bic	r1, r2, #8128
	movcc	r2, r3
	bic	r1, r1, #63
	movcs	r2, r8
	ldr	r3, [r1, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r0, r2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3813
.L3771:
	cmp	r2, #0
	mvnne	r8, #13
	b	.L3761
.L3803:
	movw	r1, #:lower16:.LC307
	ldr	r0, .L3814+12
	movt	r1, #:upper16:.LC307
	bl	__dynamic_pr_debug
	b	.L3750
.L3813:
	ldr	r1, [r6]
	bl	__copy_to_user
	mov	r2, r0
	b	.L3771
.L3801:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r8, #15
	b	.L3749
.L3774:
	mvn	r8, #21
	b	.L3749
.L3811:
	movw	r1, #:lower16:.LC309
	mov	r3, r0
	ldr	r0, .L3814+16
	mov	r2, r6
	movt	r1, #:upper16:.LC309
	bl	__dynamic_pr_debug
	b	.L3763
.L3812:
	movw	r1, #:lower16:.LC302
	ldr	r0, .L3814+20
	mov	r2, r6
	movt	r1, #:upper16:.LC302
	bl	__dynamic_pr_debug
	ldr	r3, [r6, #48]
	b	.L3770
.L3773:
	mvn	r8, #18
	b	.L3749
.L3815:
	.align	2
.L3814:
	.word	.LANCHOR2+3522
	.word	.LANCHOR2+3570
	.word	.LANCHOR2+3600
	.word	.LANCHOR2+3480
	.word	.LANCHOR2+3528
	.word	.LANCHOR2+3576
	.fnend
	.size	adb_read, .-adb_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_ctrl_ioctl, %function
ccid_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r3, #17154
	str	r6, [sp, #8]
	movt	r3, 16388
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	cmp	r1, r3
	ldr	r5, [r4, #112]
	ldr	r0, [r5]
	beq	.L3818
	movw	r3, #17155
	movt	r3, 32772
	cmp	r1, r3
	beq	.L3819
	movw	r3, #17153
	movt	r3, 16388
	cmp	r1, r3
	beq	.L3831
.L3817:
	ldr	r0, [r4, #100]
	mov	r1, r5
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L3832
.L3827:
	mov	r4, #0
.L3816:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3831:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L3824
	mov	r1, r2
	mov	r2, #4
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L3830
	mov	r3, #2
	str	r3, [r5, #4]
	ldr	r5, [r4, #112]
	b	.L3817
.L3819:
	mov	r3, sp
	add	r1, r4, #200
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r0, r2, #4; sbcccs r0, r0, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L3830
	mov	r0, r2
	mov	r2, #4
	bl	__copy_to_user
	cmp	r0, #0
	beq	.L3827
.L3830:
	mvn	r4, #13
	b	.L3816
.L3818:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L3824
	mov	r1, r2
	mov	r2, #4
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L3830
	mov	r3, #4
	str	r3, [r5, #4]
	ldr	r5, [r4, #112]
	b	.L3817
.L3824:
	mov	r1, #4
	bl	__memzero
	b	.L3830
.L3832:
	movw	r0, #:lower16:.LC311
	mov	r1, r4
	movt	r0, #:upper16:.LC311
	bl	printk
	b	.L3816
	.fnend
	.size	ccid_ctrl_ioctl, .-ccid_ctrl_ioctl
	.align	2
	.global	usb_rmnet_mux_ctrl_write
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_write, %function
usb_rmnet_mux_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #124]
	ldr	r3, [r4, #372]
	cmp	r3, #0
	bne	.L3834
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #3642
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	mvneq	r5, #18
	bne	.L3859
.L3833:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L3834:
	cmp	r2, #0
	mov	r5, r2
	beq	.L3860
	cmp	r2, #4096
	bhi	.L3861
	movw	r3, #:lower16:kmalloc_caches
	mov	r6, r1
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L3850
	mov	r2, #16
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r8, r0, #0
	beq	.L3839
.L3838:
	movw	r1, #32976
	mov	r0, r5
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r8]
	beq	.L3862
	mov	r3, sp
	str	r5, [r8, #4]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L3863
	mov	r1, r6
	mov	r2, r5
	bl	__copy_from_user
	subs	r9, r0, #0
	bne	.L3864
	add	r6, r4, #368
	add	r7, r4, #376
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #348]
	mov	r1, r4
	mov	r10, r0
	add	r0, r8, #8
	add	r3, r3, #1
	str	r3, [r4, #348]
	ldr	r2, [r1, #340]!
	bl	__list_add
	mov	r0, r6
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [r4, #84]
	ldr	r3, [r4, #100]
	ldr	r3, [r3]
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r7]
	add	r2, r2, #1
	strex	r1, r2, [r7]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #1
	bne	.L3833
	mvn	r1, #94
	strb	r1, [r3]
	strb	r2, [r3, #1]
	mov	r2, #32
	strb	r9, [r3, #2]
	strb	r9, [r3, #3]
	ldrb	r1, [r4, #360]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	strb	r9, [r3, #6]
	strb	r9, [r3, #7]
	ldrd	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bge	.L3833
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r1, r3, [r7]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC316
	movt	r1, #:upper16:.LC316
	add	r0, r0, #32
	bl	dev_err
	b	.L3833
.L3863:
	mov	r1, r5
	bl	__memzero
.L3842:
	movw	r0, #:lower16:.LC315
	mov	r2, r5
	ldr	r1, .L3865
	movt	r0, #:upper16:.LC315
	bl	printk
	ldr	r0, [r8]
	bl	kfree
	mov	r0, r8
	bl	kfree
	b	.L3833
.L3850:
	mov	r8, #16
	b	.L3838
.L3859:
	movw	r1, #:lower16:.LC286
	ldr	r2, .L3865
	mvn	r5, #18
	movt	r1, #:upper16:.LC286
	ldr	r0, .L3865+4
	bl	__dynamic_pr_debug
	b	.L3833
.L3860:
	movw	r0, #:lower16:.LC312
	ldr	r1, .L3865
	mvn	r5, #18
	movt	r0, #:upper16:.LC312
	bl	printk
	b	.L3833
.L3862:
	mov	r0, r8
	bl	kfree
.L3839:
	movw	r0, #:lower16:.LC314
	ldr	r1, .L3865
	mvn	r5, #11
	movt	r0, #:upper16:.LC314
	bl	printk
	b	.L3833
.L3861:
	movw	r0, #:lower16:.LC313
	mov	r3, r2
	ldr	r1, .L3865
	movt	r0, #:upper16:.LC313
	mov	r2, #4096
	bl	printk
	mvn	r5, #11
	b	.L3833
.L3864:
	mov	r5, r9
	b	.L3842
.L3866:
	.align	2
.L3865:
	.word	.LANCHOR3+2392
	.word	.LANCHOR2+3624
	.fnend
	.size	usb_rmnet_mux_ctrl_write, .-usb_rmnet_mux_ctrl_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_write, %function
rmnet_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r4, #:lower16:.LANCHOR2
	movw	r3, #3666
	movt	r4, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r5, r2
	ldrh	r3, [r4, r3]
	strd	r8, [sp, #16]
	mov	r7, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r6, [r0, #124]
	tst	r3, #4
	bne	.L3902
.L3868:
	cmp	r5, #0
	bne	.L3869
	movw	r3, #3690
	ldrh	r3, [r4, r3]
	tst	r3, #4
	bne	.L3903
.L3884:
	mvn	r7, #21
.L3867:
	mov	r0, r7
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3869:
	cmp	r5, #2048
	bhi	.L3904
	add	r8, r6, #24
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r8]
	add	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L3872
	ldr	r3, [r6, #8]
	cmp	r3, #0
	beq	.L3905
	mov	r1, #208
	mov	r0, r5
	bl	__kmalloc
	subs	r9, r0, #0
	beq	.L3906
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3907
	mov	r1, r5
	bl	__memzero
	mov	r1, r5
.L3878:
	cmp	r1, #0
	bne	.L3908
	add	r10, r6, #52
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	ldr	r0, [r6]
	cmp	r0, #0
	beq	.L3880
	ldr	r3, [r0, #92]
	cmp	r3, #0
	beq	.L3880
	mov	r2, r5
	mov	r1, r9
	blx	r3
	subs	r7, r0, #0
	bne	.L3909
	mov	r1, fp
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r9
	bl	kfree
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r3, #3762
	ldrh	r3, [r4, r3]
	tst	r3, #4
	bne	.L3910
.L3882:
	mov	r7, r5
	b	.L3867
.L3904:
	movw	r3, #3714
	ldrh	r3, [r4, r3]
	tst	r3, #4
	beq	.L3884
	movw	r1, #:lower16:.LC319
	mov	r2, r5
	ldr	r0, .L3912
	movt	r1, #:upper16:.LC319
	mov	r3, #2048
	bl	__dynamic_pr_debug
	mvn	r7, #21
	b	.L3867
.L3907:
	mov	r1, r7
	mov	r2, r5
	bl	__copy_from_user
	mov	r1, r0
	b	.L3878
.L3903:
	movw	r1, #:lower16:.LC318
	ldr	r0, .L3912+4
	mvn	r7, #21
	movt	r1, #:upper16:.LC318
	bl	__dynamic_pr_debug
	b	.L3867
.L3902:
	movw	r1, #:lower16:.LC317
	mov	r3, r2
	ldr	r2, .L3912+8
	movt	r1, #:upper16:.LC317
	add	r0, r4, #3648
	bl	__dynamic_pr_debug
	b	.L3868
.L3910:
	movw	r1, #:lower16:.LC326
	mov	r3, r5
	ldr	r2, .L3912+8
	movt	r1, #:upper16:.LC326
	ldr	r0, .L3912+12
	bl	__dynamic_pr_debug
	b	.L3882
.L3905:
	movw	r3, #3738
	ldrh	r3, [r4, r3]
	tst	r3, #4
	bne	.L3911
.L3875:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #31
	b	.L3867
.L3911:
	movw	r1, #:lower16:.LC321
	ldr	r0, .L3912+16
	movt	r1, #:upper16:.LC321
	bl	__dynamic_pr_debug
	b	.L3875
.L3880:
	movw	r0, #:lower16:.LC325
	movt	r0, #:upper16:.LC325
	bl	printk
	mov	r1, fp
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r9
	bl	kfree
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #21
	b	.L3867
.L3872:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC320
	mvn	r7, #15
	movt	r0, #:upper16:.LC320
	bl	printk
	b	.L3867
.L3909:
	movw	r0, #:lower16:.LC324
	mov	r1, r7
	movt	r0, #:upper16:.LC324
	bl	printk
	mov	r1, fp
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r9
	bl	kfree
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L3867
.L3908:
	movw	r0, #:lower16:.LC323
	movt	r0, #:upper16:.LC323
	bl	printk
	mov	r0, r9
	bl	kfree
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #13
	b	.L3867
.L3906:
	movw	r0, #:lower16:.LC322
	movt	r0, #:upper16:.LC322
	bl	printk
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #11
	b	.L3867
.L3913:
	.align	2
.L3912:
	.word	.LANCHOR2+3696
	.word	.LANCHOR2+3672
	.word	.LANCHOR3+2420
	.word	.LANCHOR2+3744
	.word	.LANCHOR2+3720
	.fnend
	.size	rmnet_ctrl_write, .-rmnet_ctrl_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_prepare_buffer, %function
ffs_prepare_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r4, r1, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L3916
	mov	r5, r0
	mov	r1, #208
	mov	r0, r4
	bl	__kmalloc
	subs	r6, r0, #0
	beq	.L3917
	mov	r2, r4
	mov	r1, r5
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L3922
.L3914:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3916:
	mov	r6, r4
	b	.L3914
.L3917:
	mvn	r6, #11
	b	.L3914
.L3922:
	mov	r0, r6
	mvn	r6, #13
	bl	kfree
	b	.L3914
	.fnend
	.size	ffs_prepare_buffer, .-ffs_prepare_buffer
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_get_drvinfo, %function
eth_get_drvinfo:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	movw	r1, #:lower16:.LC327
	mov	r5, r0
	movt	r1, #:upper16:.LC327
	str	r6, [sp, #8]
	add	r0, r4, #4
	mov	r2, #32
	str	lr, [sp, #12]
	bl	strlcpy
	movw	r1, #:lower16:.LC328
	add	r0, r4, #36
	movt	r1, #:upper16:.LC328
	mov	r2, #32
	bl	strlcpy
	ldr	r3, [r5, #1164]
	add	r0, r4, #68
	mov	r2, #32
	ldr	r1, [r3, #28]
	bl	strlcpy
	ldr	r3, [r5, #1164]
	add	r0, r4, #100
	mov	r2, #32
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, [r3, #76]
	cmp	r1, #0
	ldreq	r1, [r3, #40]
	b	strlcpy
	.fnend
	.size	eth_get_drvinfo, .-eth_get_drvinfo
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_qc_get_drvinfo, %function
eth_qc_get_drvinfo:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	movw	r1, #:lower16:.LC329
	mov	r5, r0
	movt	r1, #:upper16:.LC329
	str	r6, [sp, #8]
	add	r0, r4, #4
	mov	r2, #32
	str	lr, [sp, #12]
	bl	strlcpy
	movw	r1, #:lower16:.LC328
	add	r0, r4, #36
	movt	r1, #:upper16:.LC328
	mov	r2, #32
	bl	strlcpy
	ldr	r3, [r5, #1164]
	add	r0, r4, #68
	mov	r2, #32
	ldr	r1, [r3, #28]
	bl	strlcpy
	ldr	r3, [r5, #1164]
	add	r0, r4, #100
	mov	r2, #32
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, [r3, #76]
	cmp	r1, #0
	ldreq	r1, [r3, #40]
	b	strlcpy
	.fnend
	.size	eth_qc_get_drvinfo, .-eth_qc_get_drvinfo
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	pm_qos_store, %function
pm_qos_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	mov	r4, r3
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	add	r0, r0, #52
	mov	r1, r5
	mov	r2, #5
	bl	strlcpy
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	pm_qos_store, .-pm_qos_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_transports_store, %function
ecm_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L3933
	mov	r2, #50
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3934:
	.align	2
.L3933:
	.word	.LANCHOR1+3020
	.fnend
	.size	ecm_transports_store, .-ecm_transports_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_update_pid_and_serial_num, %function
usb_diag_update_pid_and_serial_num:
	.fnstart
	@ args = 0, pretend = 0, frame = 144
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r4, #:lower16:__stack_chk_guard
	movw	r5, #:lower16:.LANCHOR1
	movt	r4, #:upper16:__stack_chk_guard
	strd	r6, [sp, #8]
	mov	r2, #140
	ldr	r3, [r4]
	str	lr, [sp, #16]
	.pad #164
	sub	sp, sp, #164
	movt	r5, #:upper16:.LANCHOR1
	mov	r7, r0
	mov	r6, r1
	add	r0, sp, #16
	mov	r1, #0
	str	r3, [sp, #156]
	bl	memset
	ldr	r2, [r5, #3540]
	cmp	r2, #0
	beq	.L3949
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #3810
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L3950
.L3938:
	movw	r3, #10505
	cmp	r6, #0
	str	r7, [sp, #16]
	movt	r3, 28995
	str	r3, [sp, #148]
	beq	.L3951
	movw	r3, #21364
	mov	r1, r6
	movt	r3, 24980
	mov	r2, #128
	add	r0, sp, #20
	str	r3, [sp, #152]
	bl	strlcpy
.L3940:
	ldr	r2, [r5, #3540]
	add	r3, sp, #16
	add	r0, sp, #156
	sub	r2, r2, #4
.L3941:
	ldr	r1, [r3], #4
	cmp	r3, r0
	str	r1, [r2, #4]!
	bne	.L3941
	mov	r0, #0
.L3935:
	ldr	r2, [sp, #156]
	ldr	r3, [r4]
	cmp	r2, r3
	bne	.L3952
	add	sp, sp, #164
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L3951:
	mov	r1, #128
	add	r0, sp, #20
	str	r6, [sp, #152]
	bl	__memzero
	b	.L3940
.L3949:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #3786
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	mvneq	r0, #18
	beq	.L3935
	ldr	r3, .L3953
	movw	r1, #:lower16:.LC330
	movt	r1, #:upper16:.LC330
	ldr	r0, .L3953+4
	mov	r2, r3
	bl	__dynamic_pr_debug
	mvn	r0, #18
	b	.L3935
.L3950:
	ldr	r3, .L3953
	movw	r1, #:lower16:.LC331
	stm	sp, {r2, r7}
	movt	r1, #:upper16:.LC331
	str	r6, [sp, #8]
	add	r0, r0, #3792
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L3938
.L3952:
	bl	__stack_chk_fail
.L3954:
	.align	2
.L3953:
	.word	.LANCHOR3+2440
	.word	.LANCHOR2+3768
	.fnend
	.size	usb_diag_update_pid_and_serial_num, .-usb_diag_update_pid_and_serial_num
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	clients_store, %function
clients_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L3957
	mov	r2, #32
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3958:
	.align	2
.L3957:
	.word	.LANCHOR1+3544
	.fnend
	.size	clients_store, .-clients_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_xport_names_store, %function
rmnet_xport_names_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L3961
	mov	r2, #50
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3962:
	.align	2
.L3961:
	.word	.LANCHOR1+3072
	.fnend
	.size	rmnet_xport_names_store, .-rmnet_xport_names_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_transports_store, %function
rmnet_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L3965
	mov	r2, #50
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3966:
	.align	2
.L3965:
	.word	.LANCHOR1+3124
	.fnend
	.size	rmnet_transports_store, .-rmnet_transports_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_transports_store, %function
mbim_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L3969
	mov	r2, #50
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3970:
	.align	2
.L3969:
	.word	.LANCHOR1+3176
	.fnend
	.size	mbim_transports_store, .-mbim_transports_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_send, %function
audio_send:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r8, r0, #108
	strd	r10, [sp, #24]
	mov	r0, r8
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #92]
	cmp	r3, #0
	moveq	r1, r0
	beq	.L3991
	ldr	r2, [r5, #120]
	mov	r1, r0
	mov	r0, r8
	cmp	r2, #0
	beq	.L3992
	ldr	r3, [r3, #212]
	movw	r4, #44100
	adr	fp, .L3998
	ldrd	r10, [fp]
	str	r3, [sp, #12]
	bl	_raw_spin_unlock_irqrestore
	add	r0, sp, #16
	bl	ktime_get
	ldr	r2, [sp, #16]
	mov	ip, #0
	ldr	r3, [r5, #136]
	mov	r1, ip
	mov	lr, ip
	ldr	r9, [r5, #140]
	ldr	r0, [sp, #20]
	subs	r6, r2, r3
	sbc	r7, r0, r9
	ldr	r9, [r5, #144]
	.syntax divided
@ 350 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_audio_source.c" 1
	umull	r2, r3, r10, r6
	mov	r2, #0
@ 0 "" 2
@ 350 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_audio_source.c" 1
	umlal	r3, r2, fp, r6
	umlal	r3, r1, r10, r7
	mov	r3, #0
	adds	r2, r1, r2
	adc	r3, r3, #0
	umlal	r2, r3, fp, r7
@ 0 "" 2
	.arm
	.syntax unified
	lsr	r0, r2, #18
	mov	r7, r3
	adr	fp, .L3998+8
	ldrd	r10, [fp]
	lsr	r2, r7, #18
	orr	r0, r0, r7, lsl #14
	mov	r6, #440
	mov	r7, #0
	umull	r0, r1, r0, r4
	mla	r1, r4, r2, r1
	.syntax divided
@ 352 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_audio_source.c" 1
	umull	r2, r3, r10, r0
	cmn	r2, r10
	adcs	r3, r3, fp
	adc	r2, ip, #0
@ 0 "" 2
@ 352 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_audio_source.c" 1
	umlal	r3, r2, fp, r0
	umlal	r3, lr, r10, r1
	mov	r3, #0
	adds	r2, lr, r2
	adc	r3, r3, #0
	umlal	r2, r3, fp, r1
@ 0 "" 2
	.arm
	.syntax unified
	lsr	r2, r2, #9
	mov	fp, r3
	lsr	r1, fp, #9
	orr	r2, r2, fp, lsl #23
	subs	r3, r2, r9
	str	r3, [sp]
	ldr	r3, [r5, #148]
	sbc	r3, r1, r3
	str	r3, [sp, #4]
	ldrd	r10, [sp]
	cmp	r6, r10
	sbcs	r3, r7, fp
	blt	.L3994
	mov	r3, fp
	cmp	r10, #1
	sbcs	r3, r3, #0
	bge	.L3976
	mov	r2, #44
	mov	r3, #0
	strd	r2, [sp]
.L3976:
	add	r3, r5, #96
	ldrd	r10, [sp]
	ldr	r9, [sp, #12]
	str	r3, [sp, #8]
	b	.L3985
.L3997:
	sub	r7, r7, r1
	mov	r2, r7
	bl	memcpy
	cmp	r4, r7
	mov	r3, r7
	ble	.L3982
	ldr	r0, [r6]
	sub	r3, r4, r7
	mov	r2, r3
	ldr	r1, [r5, #112]
	str	r3, [sp, #12]
	add	r0, r0, r7
	bl	memcpy
	ldr	r3, [sp, #12]
	ldr	r2, [r5, #112]
	add	r3, r2, r3
	str	r3, [r5, #120]
.L3983:
	mov	r0, r8
	ldr	r1, [sp]
	str	r4, [r6, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #104]
	mov	r2, #32
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L3995
	ldr	r0, [r9, #80]
	lsl	r4, r4, #3
	mov	r1, #0
	ldr	r3, [r5, #144]
	ldr	r2, [r5, #148]
	udiv	r4, r4, r0
	subs	r10, r10, r4
	sbc	fp, fp, r1
	adds	r4, r3, r4
	adc	r3, r2, r1
	cmp	r10, #1
	sbcs	r2, fp, #0
	str	r4, [r5, #144]
	str	r3, [r5, #148]
	blt	.L3996
.L3985:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #8]
	mov	r4, r0
	ldr	r6, [r5, #96]
	cmp	r3, r6
	beq	.L3987
	mov	r0, r6
	sub	r6, r6, #36
	bl	list_del
.L3977:
	mov	r1, r4
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #92]
	str	r0, [sp]
	cmp	r3, #0
	beq	.L3993
	ldr	r1, [r5, #120]
	cmp	r1, #0
	beq	.L3993
	cmp	r6, #0
	beq	.L3993
	ldr	r4, [r9, #80]
	ldr	r7, [r5, #116]
	ldr	r0, [r6]
	mul	r4, r10, r4
	lsr	r4, r4, #3
	cmp	r4, #256
	movcs	r4, #256
	add	r3, r1, r4
	cmp	r7, r3
	bcc	.L3997
	mov	r2, r4
	str	r4, [sp, #12]
	bl	memcpy
	ldr	r3, [sp, #12]
.L3982:
	ldr	r1, [r5, #116]
	ldr	r2, [r5, #120]
	add	r3, r2, r3
	cmp	r3, r1
	str	r3, [r5, #120]
	ldrcs	r3, [r5, #112]
	strcs	r3, [r5, #120]
	b	.L3983
.L3995:
	mov	r1, r0
	movw	r0, #:lower16:.LC332
	movt	r0, #:upper16:.LC332
	bl	printk
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r4, r0
	ldr	r1, [r5, #100]
	add	r0, r6, #36
	ldr	r2, [sp, #8]
	bl	__list_add
	mov	r1, r4
.L3991:
	mov	r0, r8
.L3992:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L3994:
	subs	r2, r2, #44
	mov	r3, #0
	sbc	r1, r1, #0
	str	r2, [r5, #144]
	mov	r2, #44
	str	r1, [r5, #148]
	strd	r2, [sp]
	b	.L3976
.L3993:
	mov	r1, r0
	mov	r0, r8
	b	.L3992
.L3987:
	mov	r6, #0
	b	.L3977
.L3996:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3999:
	.align	3
.L3998:
	.word	-675924773
	.word	1125899906
	.word	-1924145349
	.word	-2095944041
	.fnend
	.size	audio_send, .-audio_send
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_playback_trigger, %function
audio_pcm_playback_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r3, [r0, #212]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r3, #200]
	cmp	r1, #6
	ldrls	pc, [pc, r1, asl #2]
	b	.L4005
.L4003:
	.word	.L4002
	.word	.L4004
	.word	.L4005
	.word	.L4005
	.word	.L4005
	.word	.L4002
	.word	.L4004
.L4004:
	mov	r0, sp
	mov	r6, #0
	bl	ktime_get
	ldrd	r2, [sp]
	mov	r7, #0
	mov	r0, r5
	strd	r2, [r5, #136]
	strd	r6, [r5, #144]
	bl	audio_send
	mov	r0, #0
.L4000:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L4002:
	add	r6, r5, #108
	mov	r4, #0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r4, [r5, #112]
	mov	r0, r6
	str	r4, [r5, #116]
	str	r4, [r5, #120]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	b	.L4000
.L4005:
	mvn	r0, #21
	b	.L4000
	.fnend
	.size	audio_pcm_playback_trigger, .-audio_pcm_playback_trigger
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_open, %function
audio_pcm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L4009
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	strd	r10, [sp, #20]
	str	lr, [sp, #28]
	ldrd	r2, [ip, #8]
	ldr	r8, [r0, #8]
	ldr	r6, [r0, #212]
	ldrd	r0, [ip]
	ldrd	r4, [ip, #16]
	ldrd	r10, [ip, #48]
	add	lr, r6, #208
	str	r8, [r6, #200]
	strd	r2, [r6, #216]
	ldrd	r2, [ip, #32]
	strd	r0, [r6, #208]
	ldrd	r0, [ip, #24]
	strd	r4, [r6, #224]
	ldrd	r4, [ip, #40]
	strd	r2, [r6, #240]
	ldrd	r2, [ip, #56]
	strd	r0, [r6, #232]
	mov	r0, r6
	strd	r4, [r6, #248]
	strd	r10, [lr, #48]
	strd	r2, [lr, #56]
	bl	snd_pcm_limit_hw_rates
	mov	r3, #2
	mov	r0, #0
	str	r3, [r6, #240]
	str	r7, [r8, #92]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldrd	r10, [sp, #20]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4010:
	.align	2
.L4009:
	.word	.LANCHOR3+2480
	.fnend
	.size	audio_pcm_open, .-audio_pcm_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	functions_show, %function
functions_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	add	r3, r0, #24
	mov	r9, r0
	mov	r0, r3
	str	r3, [sp, #4]
	bl	mutex_lock
	ldr	r7, [r9, #508]!
	cmp	r9, r7
	beq	.L4023
	movw	r8, #:lower16:.LC333
	sub	r7, r7, #120
	mov	r5, r10
	movt	r8, #:upper16:.LC333
	mov	fp, #58
.L4012:
	mov	r6, r7
	ldr	r4, [r6, #112]!
	cmp	r6, r4
	sub	r4, r4, #4
	beq	.L4015
.L4016:
	ldr	r3, [r4]
	mov	r0, r5
	mov	r2, r8
	mov	r1, #4096
	ldr	r3, [r3]
	bl	snprintf
	ldr	r4, [r4, #4]
	add	r5, r5, r0
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L4016
.L4015:
	ldr	r7, [r7, #120]
	cmp	r9, r7
	sub	r7, r7, #120
	beq	.L4024
	cmp	r10, r5
	strbne	fp, [r5, #-1]
	b	.L4012
.L4024:
	ldr	r0, [sp, #4]
	bl	mutex_unlock
	cmp	r10, r5
	sub	r0, r5, r10
	beq	.L4011
	mov	r3, #10
	strb	r3, [r5, #-1]
.L4011:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4023:
	ldr	r0, [sp, #4]
	bl	mutex_unlock
	mov	r0, #0
	b	.L4011
	.fnend
	.size	functions_show, .-functions_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_aliases_show, %function
ffs_aliases_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	ldr	r5, [r3, #3308]
	sub	r4, r5, #496
	mov	r0, r4
	bl	mutex_lock
	movw	r1, #:lower16:.LC82
	sub	r2, r5, #324
	mov	r0, r6
	movt	r1, #:upper16:.LC82
	bl	sprintf
	mov	r5, r0
	mov	r0, r4
	bl	mutex_unlock
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ffs_aliases_show, .-ffs_aliases_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_rx_push, %function
gsmd_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #3834
	mov	r4, r0
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR2
	movt	r6, #:upper16:.LANCHOR2
	strd	r8, [sp, #16]
	ldrh	r3, [r6, r3]
	strd	r10, [sp, #24]
	sub	fp, r0, #28
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r7, [r0, #44]
	tst	r3, #4
	bne	.L4068
.L4028:
	sub	r8, r4, #24
	sub	r10, r4, #8
	mov	r0, r8
	bl	_raw_spin_lock_irq
	ldr	r0, [r7]
	cmp	r0, #0
	beq	.L4033
	ldr	r5, [r4, #-8]
	cmp	r5, r10
	beq	.L4033
	movw	r9, #:lower16:.LC336
	movt	r9, #:upper16:.LC336
	str	r9, [sp, #12]
.L4038:
	ldr	r3, [r5, #8]
	cmn	r3, #108
	beq	.L4031
	cmp	r3, #0
	bne	.L4069
.L4032:
	bl	smd_write_avail
	cmp	r0, #0
	beq	.L4033
	ldr	r9, [r5, #12]
	cmp	r9, #0
	beq	.L4034
	ldr	r2, [r4, #-20]
	ldr	r1, [r5, #-36]
	ldr	r0, [r7]
	cmp	r2, #0
	subne	r9, r9, r2
	addne	r1, r1, r2
	mov	r2, r9
	bl	smd_write
	cmp	r0, #0
	blt	.L4070
	cmp	r0, r9
	bne	.L4071
	ldr	r2, [r4, #140]
	add	r3, r2, r9
	str	r3, [r4, #140]
.L4034:
	mov	r3, #0
	mov	r0, r5
	str	r3, [r4, #-20]
	bl	__list_del_entry
	mov	r1, r4
	mov	r0, r5
	ldr	r2, [r1, #-16]!
	bl	__list_add
	ldr	r0, [r7]
	cmp	r0, #0
	beq	.L4033
	ldr	r5, [r4, #-8]
	cmp	r10, r5
	bne	.L4038
.L4033:
	mov	r0, r8
	bl	_raw_spin_unlock_irq
	mov	r0, fp
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gsmd_start_rx
.L4031:
	movw	r3, #3858
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L4033
	movw	r1, #:lower16:.LC335
	ldr	r3, [r4, #-28]
	str	fp, [sp]
	movt	r1, #:upper16:.LC335
	ldr	r2, .L4072
	ldr	r0, .L4072+4
	bl	__dynamic_pr_debug
	b	.L4033
.L4068:
	ldr	ip, [r4, #-28]
	movw	r1, #:lower16:.LC334
	mov	r3, fp
	movt	r1, #:upper16:.LC334
	ldr	r2, .L4072
	ldr	r0, .L4072+8
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L4028
.L4071:
	ldr	r3, [r4, #-20]
	add	r2, r3, r0
	str	r2, [r4, #-20]
	b	.L4033
.L4069:
	str	r3, [sp]
	mov	r2, fp
	ldr	r1, .L4072
	ldr	r0, [sp, #12]
	ldr	r3, [r4, #-28]
	bl	printk
	ldr	r0, [r7]
	b	.L4032
.L4070:
	mov	r2, r0
	movw	r0, #:lower16:.LC337
	ldr	r1, .L4072
	movt	r0, #:upper16:.LC337
	bl	printk
	b	.L4033
.L4073:
	.align	2
.L4072:
	.word	.LANCHOR3+2544
	.word	.LANCHOR2+3840
	.word	.LANCHOR2+3816
	.fnend
	.size	gsmd_rx_push, .-gsmd_rx_push
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_rx_push, %function
gs_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r3, r0, #60
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	sub	r9, r0, #12
	mov	r0, r3
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	str	r3, [sp]
	bl	_raw_spin_lock_irq
	ldr	r7, [r4, #-52]
	ldr	r5, [r4, #-12]
	cmp	r9, r5
	beq	.L4075
	mov	r8, #0
	movw	r3, #:lower16:.LC338
	movt	r3, #:upper16:.LC338
	mov	r10, r8
	mov	fp, r8
	str	r3, [sp, #4]
.L4084:
	cmp	r7, #0
	beq	.L4076
	ldr	r3, [r7, #156]
	tst	r3, #1
	bne	.L4077
	ldr	r2, [r5, #8]
	cmn	r2, #108
	moveq	r10, #1
	beq	.L4079
	cmp	r2, #0
	bne	.L4114
.L4079:
	ldr	r6, [r5, #12]
	cmp	r6, #0
	beq	.L4076
	ldr	r3, [r4, #-4]
	mov	r2, #0
	mov	r0, r7
	ldr	r1, [r5, #-36]
	cmp	r3, #0
	subne	r6, r6, r3
	addne	r1, r1, r3
	mov	r3, r6
	bl	tty_insert_flip_string_fixed_flag
	ldr	r3, [r4, #72]
	cmp	r0, #0
	movne	r8, #1
	cmp	r0, r6
	add	r3, r3, r0
	str	r3, [r4, #72]
	bne	.L4115
	str	fp, [r4, #-4]
.L4076:
	mov	r0, r5
	bl	__list_del_entry
	mov	r1, r4
	mov	r0, r5
	ldr	r2, [r1, #-28]!
	bl	__list_add
	ldr	r3, [r4, #-20]
	ldr	r5, [r4, #-12]
	sub	r3, r3, #1
	cmp	r9, r5
	str	r3, [r4, #-20]
	bne	.L4084
	cmp	r7, #0
	moveq	r8, #0
	andne	r8, r8, #1
	cmp	r8, #0
	bne	.L4091
.L4088:
	cmp	r10, #0
	bne	.L4090
.L4075:
	ldr	r3, [r4, #-56]
	cmp	r3, #0
	beq	.L4090
	ldr	r0, [sp]
	bl	gs_start_rx
.L4090:
	ldr	r0, [sp]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq
.L4115:
	ldr	r3, [r4, #-4]
	add	r0, r3, r0
	str	r0, [r4, #-4]
.L4077:
	cmp	r8, #0
	bne	.L4091
	ldr	r3, [r4, #-12]
	cmp	r9, r3
	beq	.L4088
	ldr	r3, [r7, #156]
	tst	r3, #1
	bne	.L4088
	movw	r0, #:lower16:.LC339
	ldrb	r1, [r4, #-43]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC339
	bl	printk
	b	.L4088
.L4091:
	mov	r0, r7
	bl	tty_flip_buffer_push
	ldr	r3, [r4, #-12]
	cmp	r9, r3
	beq	.L4088
	ldr	r3, [r7, #156]
	tst	r3, #1
	bne	.L4088
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, r4
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3388]
	bl	queue_work_on
	b	.L4088
.L4114:
	ldrb	r1, [r4, #-43]	@ zero_extendqisi2
	ldr	r0, [sp, #4]
	bl	printk
	b	.L4079
	.fnend
	.size	gs_rx_push, .-gs_rx_push
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ch_probe, %function
gsdio_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #3882
	movt	r5, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r0
	str	lr, [sp, #24]
	ldrh	r3, [r5, r3]
	.pad #12
	sub	sp, sp, #12
	ldr	r7, [r0]
	tst	r3, #4
	bne	.L4140
.L4117:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4]
	cmp	r3, #0
	beq	.L4118
	ldr	r6, [r4, #24]
	movw	r3, #3906
	ldrh	r3, [r5, r3]
	ldr	r9, [r6, #120]
	tst	r3, #4
	ldr	r0, [r9]
	bne	.L4141
.L4119:
	mov	r2, #9
	mov	r1, r7
	bl	strncmp
	cmp	r0, #0
	beq	.L4120
	ldr	r3, [r4]
	cmp	r3, #1
	bls	.L4118
	ldr	r6, [r4, #128]
	movw	r3, #3906
	ldrh	r3, [r5, r3]
	ldr	r5, [r6, #120]
	tst	r3, #4
	ldr	r0, [r5]
	bne	.L4142
.L4122:
	mov	r2, #9
	mov	r1, r7
	bl	strncmp
	cmp	r0, #0
	beq	.L4120
.L4118:
	movw	r0, #:lower16:.LC341
	mov	r2, r7
	ldr	r1, .L4143
	movt	r0, #:upper16:.LC341
	bl	printk
	mvn	r0, #18
.L4116:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L4120:
	mov	r3, #1
	ldr	r4, [r4, #3396]
	movw	r0, #10000
	str	r3, [r6, #112]
	bl	msecs_to_jiffies
	mov	r3, r0
	mov	r1, r4
	mov	r0, #4
	add	r2, r6, #124
	bl	queue_delayed_work_on
	mov	r0, #0
	b	.L4116
.L4140:
	movw	r1, #:lower16:.LC177
	mov	r3, r7
	ldr	r2, .L4143
	movt	r1, #:upper16:.LC177
	ldr	r0, .L4143+4
	bl	__dynamic_pr_debug
	ldr	r7, [r8]
	b	.L4117
.L4141:
	movw	r1, #:lower16:.LC340
	mov	r3, r0
	str	r7, [sp]
	movt	r1, #:upper16:.LC340
	ldr	r2, .L4143
	ldr	r0, .L4143+8
	bl	__dynamic_pr_debug
	ldr	r7, [r8]
	ldr	r0, [r9]
	b	.L4119
.L4142:
	movw	r1, #:lower16:.LC340
	mov	r3, r0
	str	r7, [sp]
	movt	r1, #:upper16:.LC340
	ldr	r2, .L4143
	ldr	r0, .L4143+8
	bl	__dynamic_pr_debug
	ldr	r0, [r5]
	ldr	r7, [r8]
	b	.L4122
.L4144:
	.align	2
.L4143:
	.word	.LANCHOR3+2560
	.word	.LANCHOR2+3864
	.word	.LANCHOR2+3888
	.fnend
	.size	gsdio_ch_probe, .-gsdio_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ch_remove, %function
gsmd_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #3930
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r5, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L4163
.L4146:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r6, [r4, #212]
	cmp	r6, #0
	beq	.L4149
	ldr	r3, [r4, #236]
	mov	r2, #20
	ldr	r7, [r5]
	ldr	r5, [r3, #72]
	mov	r1, r7
	ldr	r0, [r5, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4148
	cmp	r6, #1
	bls	.L4149
	ldr	r3, [r4, #340]
	mov	r1, r7
	mov	r2, #20
	ldr	r5, [r3, #72]
	ldr	r0, [r5, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4148
.L4149:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4148:
	add	r4, r5, #8
	mov	r0, #1
	mov	r1, r4
	bl	_clear_bit
	mov	r0, #0
	mov	r1, r4
	bl	_clear_bit
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L4149
	bl	smd_close
	mov	r3, #0
	str	r3, [r5]
	b	.L4149
.L4163:
	movw	r1, #:lower16:.LC177
	ldr	r2, .L4164
	movt	r1, #:upper16:.LC177
	ldr	r3, [r5]
	ldr	r0, .L4164+4
	bl	__dynamic_pr_debug
	b	.L4146
.L4165:
	.align	2
.L4164:
	.word	.LANCHOR3+2576
	.word	.LANCHOR2+3912
	.fnend
	.size	gsmd_ch_remove, .-gsmd_ch_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ch_probe, %function
gsmd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #3954
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L4184
.L4167:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r7, [r4, #212]
	cmp	r7, #0
	beq	.L4168
	ldr	r5, [r4, #236]
	mov	r2, #20
	ldr	r8, [r6]
	ldr	r6, [r5, #72]
	mov	r1, r8
	ldr	r0, [r6, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4169
	cmp	r7, #1
	bls	.L4168
	ldr	r5, [r4, #340]
	mov	r1, r8
	mov	r2, #20
	ldr	r6, [r5, #72]
	ldr	r0, [r6, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4169
.L4168:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4169:
	add	r1, r6, #8
	mov	r0, #1
	add	r6, r5, #4
	bl	_set_bit
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #68]
	mov	r7, r0
	cmp	r3, #0
	beq	.L4170
	ldr	r4, [r4, #3400]
	mov	r0, #0
	bl	msecs_to_jiffies
	mov	r3, r0
	add	r2, r5, #76
	mov	r0, #4
	mov	r1, r4
	bl	queue_delayed_work_on
.L4170:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L4168
.L4184:
	movw	r1, #:lower16:.LC177
	add	r0, r3, #3936
	ldr	r2, .L4185
	movt	r1, #:upper16:.LC177
	ldr	r3, [r6]
	bl	__dynamic_pr_debug
	b	.L4167
.L4186:
	.align	2
.L4185:
	.word	.LANCHOR3+2592
	.fnend
	.size	gsmd_ch_probe, .-gsmd_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_ch_probe, %function
gbam_data_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #3978
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r5, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L4198
.L4188:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #424]
	cmp	r3, #0
	ble	.L4189
	movw	r0, #:lower16:.LC342
	mov	r2, #20
	ldr	r1, [r5]
	movt	r0, #:upper16:.LC342
	bl	strncmp
	cmp	r0, #0
	beq	.L4199
.L4189:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4199:
	ldr	r5, [r4, #428]
	mov	r0, #2
	add	r1, r5, #20
	add	r6, r5, #4
	bl	_set_bit
	mov	r0, r6
	add	r7, r5, #8
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L4190
	add	r2, r5, #284
	mov	r0, #4
	ldr	r1, [r4, #3532]
	bl	queue_work_on
.L4190:
	mov	r0, r7
	bl	_raw_spin_unlock
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L4189
.L4198:
	movw	r1, #:lower16:.LC177
	ldr	r2, .L4200
	movt	r1, #:upper16:.LC177
	ldr	r3, [r5]
	ldr	r0, .L4200+4
	bl	__dynamic_pr_debug
	b	.L4188
.L4201:
	.align	2
.L4200:
	.word	.LANCHOR3+2608
	.word	.LANCHOR2+3960
	.fnend
	.size	gbam_data_ch_probe, .-gbam_data_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_ch_remove, %function
grmnet_ctrl_smd_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #4002
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L4252
.L4203:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r4, [r5, #512]
	cmp	r4, #0
	beq	.L4204
	mov	r2, #20
	ldr	r0, [r4, #4]
	ldr	r1, [r6]
	bl	strncmp
	cmp	r0, #0
	beq	.L4205
.L4204:
	ldr	r4, [r5, #596]
	cmp	r4, #0
	beq	.L4206
	mov	r2, #20
	ldr	r0, [r4, #4]
	ldr	r1, [r6]
	bl	strncmp
	cmp	r0, #0
	beq	.L4205
.L4206:
	ldr	r4, [r5, #680]
	cmp	r4, #0
	beq	.L4207
	mov	r2, #20
	ldr	r0, [r4, #4]
	ldr	r1, [r6]
	bl	strncmp
	cmp	r0, #0
	beq	.L4205
.L4207:
	ldr	r4, [r5, #764]
	cmp	r4, #0
	beq	.L4208
	mov	r2, #20
	ldr	r0, [r4, #4]
	ldr	r1, [r6]
	bl	strncmp
	cmp	r0, #0
	beq	.L4205
.L4208:
	ldr	r4, [r5, #848]
	cmp	r4, #0
	beq	.L4209
	mov	r2, #20
	ldr	r0, [r4, #4]
	ldr	r1, [r6]
	bl	strncmp
	cmp	r0, #0
	beq	.L4205
.L4209:
	ldr	r4, [r5, #932]
	cmp	r4, #0
	beq	.L4211
	mov	r2, #20
	ldr	r0, [r4, #4]
	ldr	r1, [r6]
	bl	strncmp
	cmp	r0, #0
	beq	.L4205
.L4211:
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4205:
	add	r5, r4, #8
	mov	r0, #1
	mov	r1, r5
	bl	_clear_bit
	mov	r0, #0
	mov	r1, r5
	bl	_clear_bit
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L4211
	bl	smd_close
	mov	r3, #0
	str	r3, [r4]
	b	.L4211
.L4252:
	movw	r1, #:lower16:.LC177
	add	r0, r3, #3984
	ldr	r2, .L4253
	movt	r1, #:upper16:.LC177
	ldr	r3, [r6]
	bl	__dynamic_pr_debug
	b	.L4203
.L4254:
	.align	2
.L4253:
	.word	.LANCHOR3+2628
	.fnend
	.size	grmnet_ctrl_smd_ch_remove, .-grmnet_ctrl_smd_ch_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_ch_probe, %function
grmnet_ctrl_smd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #4026
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L4305
.L4256:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r4, [r5, #512]
	cmp	r4, #0
	beq	.L4257
	mov	r2, #20
	ldr	r0, [r4, #4]
	ldr	r1, [r6]
	bl	strncmp
	cmp	r0, #0
	beq	.L4258
.L4257:
	ldr	r4, [r5, #596]
	cmp	r4, #0
	beq	.L4259
	mov	r2, #20
	ldr	r0, [r4, #4]
	ldr	r1, [r6]
	bl	strncmp
	cmp	r0, #0
	beq	.L4258
.L4259:
	ldr	r4, [r5, #680]
	cmp	r4, #0
	beq	.L4260
	mov	r2, #20
	ldr	r0, [r4, #4]
	ldr	r1, [r6]
	bl	strncmp
	cmp	r0, #0
	beq	.L4258
.L4260:
	ldr	r4, [r5, #764]
	cmp	r4, #0
	beq	.L4261
	mov	r2, #20
	ldr	r0, [r4, #4]
	ldr	r1, [r6]
	bl	strncmp
	cmp	r0, #0
	beq	.L4258
.L4261:
	ldr	r4, [r5, #848]
	cmp	r4, #0
	beq	.L4262
	mov	r2, #20
	ldr	r0, [r4, #4]
	ldr	r1, [r6]
	bl	strncmp
	cmp	r0, #0
	beq	.L4258
.L4262:
	ldr	r4, [r5, #932]
	cmp	r4, #0
	beq	.L4263
	mov	r2, #20
	ldr	r0, [r4, #4]
	ldr	r1, [r6]
	bl	strncmp
	cmp	r0, #0
	beq	.L4258
.L4263:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4258:
	add	r6, r4, #8
	mov	r0, #2
	mov	r1, r6
	add	r7, r4, #108
	bl	_clear_bit
	mov	r1, r6
	mov	r0, #1
	bl	_set_bit
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #104]
	mov	r6, r0
	cmp	r3, #0
	beq	.L4264
	add	r2, r4, #112
	mov	r3, #0
	ldr	r1, [r5, #3484]
	mov	r0, #4
	bl	queue_delayed_work_on
.L4264:
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L4263
.L4305:
	movw	r1, #:lower16:.LC177
	ldr	r2, .L4306
	movt	r1, #:upper16:.LC177
	ldr	r3, [r6]
	ldr	r0, .L4306+4
	bl	__dynamic_pr_debug
	b	.L4256
.L4307:
	.align	2
.L4306:
	.word	.LANCHOR3+2656
	.word	.LANCHOR2+4008
	.fnend
	.size	grmnet_ctrl_smd_ch_probe, .-grmnet_ctrl_smd_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_remove, %function
ghsic_ctrl_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR2
	movw	r3, #4050
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	ip, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	ldrh	r3, [ip, r3]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0]
	tst	r3, #4
	bne	.L4348
.L4309:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r6, [r5, #1016]
	cmp	r6, #0
	beq	.L4310
	ldr	r4, [r5, #1020]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L4311
	cmp	r6, #1
	bls	.L4310
	ldr	r4, [r5, #1124]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L4311
	cmp	r6, #2
	beq	.L4310
	ldr	r4, [r5, #1228]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L4311
	cmp	r6, #3
	beq	.L4310
	ldr	r4, [r5, #1332]
	mov	r1, r7
	mov	r2, #20
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L4311
.L4310:
	movw	r0, #:lower16:.LC179
	mvn	r2, #21
	ldr	r1, .L4351
	movt	r0, #:upper16:.LC179
	bl	printk
	mvn	r0, #21
.L4308:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4311:
	add	r6, r4, #4
	add	r7, r4, #84
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #8]
	mov	r1, r0
	cmp	r5, #0
	beq	.L4349
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L4350
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #92]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #104]
	cmp	r3, #0
	beq	.L4318
.L4317:
	mov	r0, r5
	blx	r3
.L4318:
	mov	r1, r7
	mov	r0, #0
	bl	_clear_bit
.L4315:
	mov	r0, #1
	mov	r1, r7
	bl	_clear_bit
	mov	r0, #0
	b	.L4308
.L4350:
	str	r3, [r4, #92]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #120]
	cmp	r3, #0
	bne	.L4317
	b	.L4318
.L4349:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L4315
.L4348:
	movw	r1, #:lower16:.LC177
	mov	r4, r0
	ldr	r2, .L4351
	mov	r3, r7
	add	r0, ip, #4032
	movt	r1, #:upper16:.LC177
	bl	__dynamic_pr_debug
	ldr	r7, [r4]
	b	.L4309
.L4352:
	.align	2
.L4351:
	.word	.LANCHOR3+2684
	.fnend
	.size	ghsic_ctrl_remove, .-ghsic_ctrl_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_notify_modem, %function
gsmd_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	ip, [r3, #212]
	cmp	r1, ip
	bcs	.L4382
	cmp	r0, #0
	beq	.L4383
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ands	ip, r2, #1
	str	r6, [sp, #8]
	movne	ip, #2
	str	lr, [sp, #12]
	mov	lr, #104
	mla	r1, lr, r1, r3
	ldr	r4, [r1, #236]
	moveq	r1, #4
	movne	r1, #6
	tst	r2, #2
	moveq	r1, ip
	ldr	r3, [r4, #160]
	cmp	r3, r1
	beq	.L4353
	ldr	r3, [r4, #72]
	str	r1, [r4, #160]
	ldr	r2, [r3, #8]
	tst	r2, #1
	beq	.L4353
	tst	r1, #2
	ldr	r3, [r3]
	bne	.L4384
.L4361:
	ldrd	r4, [sp]
	mov	r0, r3
	mvn	r2, r1
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	smd_tiocmset
.L4353:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4384:
	mov	r5, r0
	mov	r0, r3
	bl	smd_tiocmget
	ands	r1, r0, #128
	movne	r1, #8
	movne	r3, #9
	moveq	r3, #1
	tst	r0, #64
	movne	r1, r3
	tst	r0, #256
	orrne	r1, r1, #2
	str	r1, [r4, #164]
	ldr	r3, [r5, #136]
	cmp	r3, #0
	beq	.L4381
	ldr	r0, [r4, #68]
	blx	r3
.L4381:
	ldr	r3, [r4, #72]
	ldr	r1, [r4, #160]
	ldr	r3, [r3]
	b	.L4361
.L4382:
	movw	r0, #:lower16:.LC173
	mov	r2, r1
	ldr	r1, .L4385
	movt	r0, #:upper16:.LC173
	b	printk
.L4383:
	movw	r0, #:lower16:.LC174
	ldr	r1, .L4385
	movt	r0, #:upper16:.LC174
	b	printk
.L4386:
	.align	2
.L4385:
	.word	.LANCHOR3+2704
	.fnend
	.size	gsmd_notify_modem, .-gsmd_notify_modem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_connect_work, %function
gsmd_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #4074
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r3, [r3, r2]
	.pad #8
	sub	sp, sp, #8
	sub	r6, r0, #76
	ldr	r5, [r0, #-4]
	tst	r3, #4
	bne	.L4404
.L4388:
	ldr	r3, [r5, #8]
	tst	r3, #2
	bne	.L4405
.L4387:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4405:
	movw	ip, #:lower16:gsmd_notify
	mov	r2, r5
	ldr	r0, [r5, #4]
	movt	ip, #:upper16:gsmd_notify
	mov	r3, r6
	mov	r1, #0
	str	ip, [sp]
	bl	smd_named_open_on_edge
	subs	r2, r0, #0
	beq	.L4387
	cmn	r2, #11
	bne	.L4392
	ldr	r0, .L4407
	ldrh	r3, [r0, #2]
	tst	r3, #4
	bne	.L4406
.L4393:
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, #250
	movt	r3, #:upper16:.LANCHOR1
	ldr	r5, [r3, #3400]
	bl	msecs_to_jiffies
	mov	r3, r0
	mov	r2, r4
	mov	r0, #4
	mov	r1, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_delayed_work_on
.L4404:
	ldr	ip, [r4, #-76]
	movw	r1, #:lower16:.LC228
	mov	r3, r6
	movt	r1, #:upper16:.LC228
	ldr	r2, .L4407+4
	ldr	r0, .L4407+8
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L4388
.L4406:
	movw	r1, #:lower16:.LC268
	ldr	r3, [r5, #4]
	sub	r0, r0, #16
	movt	r1, #:upper16:.LC268
	str	r2, [sp]
	ldr	r2, .L4407+4
	bl	__dynamic_pr_debug
	b	.L4393
.L4392:
	mov	r3, r2
	ldr	r1, .L4407+4
	movw	r0, #:lower16:.LC269
	ldr	r2, [r5, #4]
	movt	r0, #:upper16:.LC269
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L4408:
	.align	2
.L4407:
	.word	.LANCHOR2+4096
	.word	.LANCHOR3+2724
	.word	.LANCHOR2+4056
	.fnend
	.size	gsmd_connect_work, .-gsmd_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_write_tobam, %function
gbam_data_write_tobam:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r3, r0, #60
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r9, [r0, #-4]
	.pad #28
	sub	sp, sp, #28
	str	r3, [sp, #20]
	add	r6, r9, #4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r9, #12]
	mov	r7, r0
	cmp	r3, #0
	beq	.L4410
	movw	r8, #:lower16:.LANCHOR0
	movw	r10, #:lower16:.LC343
	ldr	r1, [r4, #160]
	movt	r8, #:upper16:.LANCHOR0
	movt	r10, #:upper16:.LC343
	b	.L4411
.L4437:
	str	r1, [r4, #-12]
	ldm	r5, {r1, r3}
	str	r2, [r5]
	str	r2, [r5, #4]
	str	r3, [r1, #4]
	str	r1, [r3]
	ldr	r1, [r4, #160]
	ldr	r3, [r4, #180]
	ldrh	r2, [r0]
	add	r1, r1, #1
	add	r3, r3, #1
	tst	r2, #4
	str	r1, [r4, #160]
	str	r3, [r4, #180]
	bne	.L4435
.L4413:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r1, r5
	ldr	r0, [r4, #-56]
	bl	msm_bam_dmux_write
	mov	fp, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	fp, #0
	mov	r7, r0
	bne	.L4436
	ldr	r1, [r4, #160]
	ldr	r3, [r4, #200]
	cmp	r1, r3
	strhi	r1, [r4, #200]
.L4411:
	ldr	ip, [r8, #524]
	mov	r2, #0
	mov	r3, r4
	ldr	fp, [r4, #-12]
	ldr	r0, .L4439
	cmp	ip, r1
	sub	r1, fp, #1
	bls	.L4412
	ldr	r5, [r3, #-20]!
	cmp	r5, r3
	beq	.L4412
	cmp	r5, #0
	bne	.L4437
.L4412:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r8, #528]
	cmp	fp, r3
	bcs	.L4409
	ldr	r3, [r4, #196]
	cmp	r3, #0
	beq	.L4419
	ldr	r3, [r4, #188]
	mov	r2, #0
	str	r2, [r4, #196]
	add	r3, r3, #1
	str	r3, [r4, #188]
.L4419:
	mov	r0, r9
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gbam_start_rx
.L4435:
	ldr	ip, [r9]
	sub	r0, r0, #18
	str	r1, [sp, #8]
	ldr	r2, [sp, #20]
	mov	r1, r10
	strd	r2, [sp]
	mov	r3, r9
	ldr	r2, .L4439+4
	str	ip, [sp, #12]
	bl	__dynamic_pr_debug
	b	.L4413
.L4409:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4436:
	ldr	r2, .L4439+8
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	bne	.L4438
.L4415:
	ldr	r1, [r4, #160]
	mov	r0, r5
	ldr	r2, [r4, #168]
	ldr	r3, [r4, #180]
	sub	r1, r1, #1
	add	r2, r2, #1
	sub	r3, r3, #1
	str	r1, [r4, #160]
	str	r2, [r4, #168]
	str	r3, [r4, #180]
	bl	dev_kfree_skb_any
	ldr	fp, [r4, #-12]
	b	.L4412
.L4410:
	mov	r1, r0
	mov	r0, r6
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L4438:
	ldr	r0, .L4439+12
	movw	r1, #:lower16:.LC344
	mov	r3, fp
	ldr	r2, .L4439+4
	movt	r1, #:upper16:.LC344
	sub	r0, r0, #8
	bl	__dynamic_pr_debug
	b	.L4415
.L4440:
	.align	2
.L4439:
	.word	.LANCHOR4-4062
	.word	.LANCHOR3+2744
	.word	.LANCHOR4-4032
	.word	.LANCHOR4-4048
	.fnend
	.size	gbam_data_write_tobam, .-gbam_data_write_tobam
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam2bam_resume_work, %function
gbam2bam_resume_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4450
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L4448
.L4442:
	mov	r2, #0
	ldrb	r0, [r4, #-203]	@ zero_extendqisi2
	mov	r1, r2
	bl	usb_bam_register_wake_cb
	ldr	r3, [r4, #-200]
	cmp	r3, #7
	beq	.L4449
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4449:
	sub	r0, r4, #196
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	usb_bam_resume
.L4448:
	movw	r1, #:lower16:.LC345
	sub	r0, r3, #32
	ldr	r2, .L4450+4
	movt	r1, #:upper16:.LC345
	bl	__dynamic_pr_debug
	b	.L4442
.L4451:
	.align	2
.L4450:
	.word	.LANCHOR4-4000
	.word	.LANCHOR3+2768
	.fnend
	.size	gbam2bam_resume_work, .-gbam2bam_resume_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam2bam_data_resume_work, %function
bam2bam_data_resume_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L4461
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrh	r3, [r2, #-6]
	tst	r3, #4
	bne	.L4459
.L4453:
	mov	r2, #0
	ldrb	r0, [r4, #-163]	@ zero_extendqisi2
	mov	r1, r2
	bl	usb_bam_register_wake_cb
	ldr	r3, [r4, #-156]
	cmp	r3, #7
	beq	.L4460
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4460:
	sub	r0, r4, #152
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	usb_bam_resume
.L4459:
	ldr	r3, .L4461+4
	movw	r1, #:lower16:.LC346
	sub	r0, r2, #24
	movt	r1, #:upper16:.LC346
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L4453
.L4462:
	.align	2
.L4461:
	.word	.LANCHOR4-3984
	.word	.LANCHOR3+2792
	.fnend
	.size	bam2bam_data_resume_work, .-bam2bam_data_resume_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam2bam_suspend_work, %function
gbam2bam_suspend_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4472
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	sub	r5, r0, #316
	str	lr, [sp, #12]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L4470
.L4464:
	movw	r1, #:lower16:gbam_wake_cb
	mov	r2, r5
	ldrb	r0, [r4, #-187]	@ zero_extendqisi2
	movt	r1, #:upper16:gbam_wake_cb
	bl	usb_bam_register_wake_cb
	ldr	r3, [r4, #-184]
	cmp	r3, #7
	beq	.L4471
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4471:
	movw	r1, #:lower16:gbam_stop
	movw	r0, #:lower16:gbam_start
	mov	r2, r5
	movt	r1, #:upper16:gbam_stop
	movt	r0, #:upper16:gbam_start
	bl	usb_bam_register_start_stop_cbs
	ldr	r6, [sp, #8]
	sub	r0, r4, #180
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	usb_bam_suspend
.L4470:
	movw	r1, #:lower16:.LC347
	sub	r0, r3, #32
	ldr	r2, .L4472+4
	movt	r1, #:upper16:.LC347
	bl	__dynamic_pr_debug
	b	.L4464
.L4473:
	.align	2
.L4472:
	.word	.LANCHOR4-3952
	.word	.LANCHOR3+2820
	.fnend
	.size	gbam2bam_suspend_work, .-gbam2bam_suspend_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam2bam_data_suspend_work, %function
bam2bam_data_suspend_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L4483
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	sub	r5, r0, #200
	str	lr, [sp, #12]
	ldrh	r3, [r2, #-6]
	tst	r3, #4
	bne	.L4481
.L4475:
	movw	r1, #:lower16:bam_data_wake_cb
	mov	r2, r5
	ldrb	r0, [r4, #-147]	@ zero_extendqisi2
	movt	r1, #:upper16:bam_data_wake_cb
	bl	usb_bam_register_wake_cb
	ldr	r3, [r4, #-140]
	cmp	r3, #7
	beq	.L4482
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4482:
	movw	r1, #:lower16:bam_data_stop
	movw	r0, #:lower16:bam_data_start
	mov	r2, r5
	movt	r1, #:upper16:bam_data_stop
	movt	r0, #:upper16:bam_data_start
	bl	usb_bam_register_start_stop_cbs
	ldr	r6, [sp, #8]
	sub	r0, r4, #136
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	usb_bam_suspend
.L4481:
	ldr	r3, .L4483+4
	movw	r1, #:lower16:.LC348
	sub	r0, r2, #24
	movt	r1, #:upper16:.LC348
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L4475
.L4484:
	.align	2
.L4483:
	.word	.LANCHOR4-3936
	.word	.LANCHOR3+2844
	.fnend
	.size	bam2bam_data_suspend_work, .-bam2bam_data_suspend_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam2bam_connect_work, %function
gbam2bam_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	sub	r8, r0, #284
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #-152]
	.pad #4
	sub	sp, sp, #4
	cmp	r3, #6
	beq	.L4528
	cmp	r3, #7
	beq	.L4529
.L4488:
	sub	r6, r4, #280
	sub	r5, r4, #276
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #-272]
	cmp	r3, #0
	beq	.L4530
	ldr	r0, [r3, #88]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r4, #-172]
	beq	.L4531
	str	r8, [r0, #32]
	ldr	r2, [r4, #-172]
	movw	r3, #:lower16:gbam_endless_rx_complete
	movt	r3, #:upper16:gbam_endless_rx_complete
	mov	fp, #0
	movw	r10, #65439
	mov	r7, #32
	movt	r10, 65534
	movt	r7, 1
	str	r3, [r2, #28]
	ldr	r3, [r4, #-172]
	mov	r1, #32
	str	fp, [r3, #4]
	ldr	r2, [r4, #-172]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r2, [r4, #-172]
	ldr	r3, [r4, #-164]
	and	r3, r3, r10
	orr	r3, r3, r7
	str	r3, [r2, #52]
	ldr	r3, [r4, #-272]
	ldr	r0, [r3, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	str	r0, [r4, #-168]
	mov	r0, r5
	bl	_raw_spin_unlock
	mov	r1, r9
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-168]
	cmp	r3, fp
	beq	.L4527
	str	r8, [r3, #32]
	ldr	r2, [r4, #-168]
	movw	r3, #:lower16:gbam_endless_tx_complete
	movt	r3, #:upper16:gbam_endless_tx_complete
	mov	r0, r6
	str	r3, [r2, #28]
	ldr	r3, [r4, #-168]
	str	fp, [r3, #4]
	ldr	r2, [r4, #-168]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r2, [r4, #-168]
	ldr	r3, [r4, #-160]
	and	r10, r10, r3
	orr	r7, r10, r7
	str	r7, [r2, #52]
	bl	_raw_spin_lock
	ldr	r3, [r4, #-272]
	cmp	r3, #0
	beq	.L4532
	ldr	r0, .L4542
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L4533
.L4495:
	ldr	r0, [r3, #88]
	mov	r2, #32
	ldr	r1, [r4, #-172]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L4534
.L4496:
	mov	r0, r6
	bl	_raw_spin_unlock
.L4494:
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #-272]
	cmp	r3, #0
	beq	.L4535
	ldr	r0, .L4542+4
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L4536
.L4499:
	ldr	r0, [r3, #84]
	mov	r2, #32
	ldr	r1, [r4, #-168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L4537
.L4500:
	mov	r0, r5
	bl	_raw_spin_unlock
.L4498:
	ldr	r3, [r4, #-152]
	cmp	r3, #6
	beq	.L4538
.L4501:
	ldr	r0, .L4542+8
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L4539
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4538:
	ldr	r3, [r4, #-284]
	cmp	r3, #0
	bne	.L4501
	movw	r0, #:lower16:gbam_peer_reset_cb
	mov	r1, r8
	movt	r0, #:upper16:gbam_peer_reset_cb
	bl	usb_bam_register_peer_reset_cb
	mov	r0, #1
	bl	usb_bam_client_ready
	subs	r2, r0, #0
	beq	.L4501
	movw	r0, #:lower16:.LC356
	ldr	r1, .L4542+12
	movt	r0, #:upper16:.LC356
	b	.L4525
.L4528:
	bl	usb_bam_reset_complete
	sub	r1, r4, #164
	ldrb	r0, [r4, #-156]	@ zero_extendqisi2
	bl	usb_bam_connect
	subs	r2, r0, #0
	bne	.L4540
	sub	r1, r4, #160
	ldrb	r0, [r4, #-155]	@ zero_extendqisi2
	bl	usb_bam_connect
	subs	r2, r0, #0
	beq	.L4488
	ldr	r1, .L4542+12
	movw	r0, #:lower16:.LC350
	movt	r0, #:upper16:.LC350
.L4525:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L4539:
	ldr	r2, .L4542+12
	movw	r1, #:lower16:.LC357
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC357
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	__dynamic_pr_debug
.L4536:
	movw	r1, #:lower16:.LC354
	sub	r0, r0, #32
	ldr	r2, .L4542+16
	movt	r1, #:upper16:.LC354
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #-272]
	b	.L4499
.L4533:
	movw	r1, #:lower16:.LC354
	sub	r0, r0, #24
	ldr	r2, .L4542+20
	movt	r1, #:upper16:.LC354
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #-272]
	b	.L4495
.L4530:
	ldr	r0, .L4542+24
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L4541
.L4490:
	mov	r0, r5
	bl	_raw_spin_unlock
	mov	r1, r9
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L4541:
	movw	r1, #:lower16:.LC352
	ldr	r2, .L4542+12
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC352
	bl	__dynamic_pr_debug
	b	.L4490
.L4531:
	mov	r0, r5
	bl	_raw_spin_unlock
	mov	r1, r9
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L4527:
	ldr	r1, .L4542+12
	movw	r0, #:lower16:.LC353
	movt	r0, #:upper16:.LC353
.L4526:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L4532:
	mov	r0, r6
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC117
	ldr	r1, .L4542+20
	movt	r0, #:upper16:.LC117
	bl	printk
	b	.L4494
.L4535:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC117
	ldr	r1, .L4542+16
	movt	r0, #:upper16:.LC117
	bl	printk
	b	.L4498
.L4534:
	movw	r0, #:lower16:.LC355
	ldr	r1, .L4542+20
	movt	r0, #:upper16:.LC355
	bl	printk
	b	.L4496
.L4537:
	movw	r0, #:lower16:.LC355
	ldr	r1, .L4542+16
	movt	r0, #:upper16:.LC355
	bl	printk
	b	.L4500
.L4529:
	movw	r0, #:lower16:.LC351
	ldr	r1, .L4542+12
	movt	r0, #:upper16:.LC351
	b	.L4526
.L4540:
	movw	r0, #:lower16:.LC349
	ldr	r1, .L4542+12
	movt	r0, #:upper16:.LC349
	b	.L4525
.L4543:
	.align	2
.L4542:
	.word	.LANCHOR4-3888
	.word	.LANCHOR4-3856
	.word	.LANCHOR4-3840
	.word	.LANCHOR3+2872
	.word	.LANCHOR3+2920
	.word	.LANCHOR3+2896
	.word	.LANCHOR4-3904
	.fnend
	.size	gbam2bam_connect_work, .-gbam2bam_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam2bam_data_connect_work, %function
bam2bam_data_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	sub	r5, r0, #168
	strd	r6, [sp, #8]
	ldr	r6, .L4619
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r6, #-14]
	tst	r3, #4
	bne	.L4605
.L4545:
	ldr	r3, [r4, #-108]
	cmp	r3, #7
	bne	.L4546
	ldr	r3, [r4, #-112]
	cmp	r3, #1
	beq	.L4606
	cmp	r3, #0
	mov	r2, #5
	mov	r3, #0
	str	r3, [r4, #-92]
	str	r2, [r4, #-80]
	beq	.L4607
.L4548:
	sub	r7, r4, #104
	mov	r0, r7
	bl	usb_bam_connect_ipa
	subs	r3, r0, #0
	bne	.L4601
	ldr	r3, [r4, #-112]
	mov	r2, #17
	mov	r1, #1
	str	r1, [r4, #-92]
	str	r2, [r4, #-80]
	cmp	r3, #0
	beq	.L4608
.L4550:
	mov	r0, r7
	bl	usb_bam_connect_ipa
	subs	r3, r0, #0
	bne	.L4601
	ldr	r3, [r4, #-112]
	cmp	r3, #1
	beq	.L4609
.L4552:
	ldr	r3, [r4, #-164]
	cmp	r3, #0
	beq	.L4610
	ldr	r0, [r3, #12]
	cmp	r0, #0
	beq	.L4611
	ldr	r3, [r0, #8]
	mov	r1, #208
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r4, #-132]
	beq	.L4544
	str	r5, [r0, #32]
	ldr	r2, [r4, #-132]
	movw	r3, #:lower16:bam_data_endless_rx_complete
	movt	r3, #:upper16:bam_data_endless_rx_complete
	mov	r9, #0
	movw	r8, #65439
	mov	r7, #32
	movt	r8, 65534
	movt	r7, 1
	str	r3, [r2, #28]
	ldr	r3, [r4, #-132]
	mov	r1, #208
	str	r9, [r3, #4]
	ldr	r2, [r4, #-132]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r2, [r4, #-132]
	ldr	r3, [r4, #-124]
	and	r3, r3, r8
	orr	r3, r3, r7
	str	r3, [r2, #52]
	ldr	r3, [r4, #-164]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, r9
	str	r0, [r4, #-128]
	beq	.L4544
	str	r5, [r0, #32]
	ldr	r2, [r4, #-128]
	movw	r3, #:lower16:bam_data_endless_tx_complete
	movt	r3, #:upper16:bam_data_endless_tx_complete
	str	r3, [r2, #28]
	ldr	r3, [r4, #-128]
	str	r9, [r3, #4]
	ldr	r2, [r4, #-128]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r2, [r4, #-128]
	ldr	r3, [r4, #-120]
	and	r8, r8, r3
	orr	r7, r8, r7
	str	r7, [r2, #52]
	ldr	r3, [r4, #-164]
	cmp	r3, r9
	beq	.L4560
	ldr	r2, .L4619+4
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	bne	.L4612
.L4561:
	ldr	r0, [r3, #12]
	mov	r2, #32
	ldr	r1, [r4, #-132]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L4613
.L4562:
	ldr	r3, [r4, #-164]
	cmp	r3, #0
	beq	.L4560
	ldr	r0, .L4619+8
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L4614
.L4564:
	ldr	r0, [r3, #8]
	mov	r2, #32
	ldr	r1, [r4, #-128]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L4615
.L4560:
	ldr	r3, [r4, #-108]
	cmp	r3, #7
	beq	.L4565
	movw	r0, #:lower16:bam_data_peer_reset_cb
	mov	r1, r5
	movt	r0, #:upper16:bam_data_peer_reset_cb
	bl	usb_bam_register_peer_reset_cb
	mov	r0, #1
	bl	usb_bam_client_ready
	subs	r3, r0, #0
	bne	.L4616
.L4565:
	ldr	r0, .L4619+12
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L4617
.L4544:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4607:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #3576]
	str	r2, [r4, #-12]
	ldr	r3, [r3, #3596]
	str	r3, [r4, #-16]
	b	.L4548
.L4608:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #3580]
	str	r2, [r4, #-12]
	ldr	r3, [r3, #3596]
	str	r3, [r4, #-16]
	b	.L4550
.L4546:
	bl	usb_bam_reset_complete
	sub	r1, r4, #124
	ldrb	r0, [r4, #-116]	@ zero_extendqisi2
	bl	usb_bam_connect
	subs	r2, r0, #0
	bne	.L4618
	sub	r1, r4, #120
	ldrb	r0, [r4, #-115]	@ zero_extendqisi2
	bl	usb_bam_connect
	subs	r2, r0, #0
	beq	.L4552
	ldr	r1, .L4619+16
	movw	r0, #:lower16:.LC350
	movt	r0, #:upper16:.LC350
.L4603:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L4605:
	ldr	r3, .L4619+16
	movw	r1, #:lower16:.LC358
	sub	r0, r6, #32
	movt	r1, #:upper16:.LC358
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L4545
.L4617:
	ldr	r3, .L4619+16
	movw	r1, #:lower16:.LC366
	sub	r0, r0, #24
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC366
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	mov	r2, r3
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__dynamic_pr_debug
.L4614:
	ldr	r3, .L4619+20
	movw	r1, #:lower16:.LC364
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC364
	mov	r2, r3
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #-164]
	b	.L4564
.L4612:
	ldr	r3, .L4619+24
	movw	r1, #:lower16:.LC364
	sub	r0, r6, #8
	movt	r1, #:upper16:.LC364
	mov	r2, r3
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #-164]
	b	.L4561
.L4601:
	ldr	r2, .L4619+16
	movw	r0, #:lower16:.LC360
	movt	r0, #:upper16:.LC360
.L4602:
	ldrd	r4, [sp]
	mov	r1, r2
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L4610:
	ldr	r1, .L4619+16
	movw	r0, #:lower16:.LC362
	movt	r0, #:upper16:.LC362
.L4604:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L4611:
	movw	r0, #:lower16:.LC363
	ldr	r1, .L4619+16
	movt	r0, #:upper16:.LC363
	b	.L4604
.L4609:
	ldr	r2, .L4619+16
	movw	r0, #:lower16:.LC361
	movt	r0, #:upper16:.LC361
.L4600:
	mov	r1, r2
	b	.L4603
.L4606:
	movw	r0, #:lower16:.LC359
	ldr	r2, .L4619+16
	movt	r0, #:upper16:.LC359
	b	.L4600
.L4618:
	movw	r0, #:lower16:.LC349
	ldr	r1, .L4619+16
	movt	r0, #:upper16:.LC349
	b	.L4603
.L4616:
	movw	r0, #:lower16:.LC365
	ldr	r2, .L4619+16
	movt	r0, #:upper16:.LC365
	b	.L4602
.L4615:
	movw	r0, #:lower16:.LC355
	ldr	r1, .L4619+20
	movt	r0, #:upper16:.LC355
	bl	printk
	b	.L4560
.L4613:
	movw	r0, #:lower16:.LC355
	ldr	r1, .L4619+24
	movt	r0, #:upper16:.LC355
	bl	printk
	b	.L4562
.L4620:
	.align	2
.L4619:
	.word	.LANCHOR4-3808
	.word	.LANCHOR4-3792
	.word	.LANCHOR4-3760
	.word	.LANCHOR4-3744
	.word	.LANCHOR3+2944
	.word	.LANCHOR3+3000
	.word	.LANCHOR3+2972
	.fnend
	.size	bam2bam_data_connect_work, .-bam2bam_data_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_peer_reset_cb, %function
bam_data_peer_reset_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L4631
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L4629
.L4622:
	mov	r0, #0
	bl	usb_bam_a2_reset
	subs	r4, r0, #0
	bne	.L4630
	mov	r1, r4
	bl	usb_bam_register_peer_reset_cb
.L4621:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4629:
	ldr	r3, .L4631+4
	movw	r1, #:lower16:.LC367
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC367
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L4622
.L4630:
	ldr	r2, .L4631+4
	movw	r0, #:lower16:.LC368
	mov	r3, r4
	movt	r0, #:upper16:.LC368
	mov	r1, r2
	bl	printk
	b	.L4621
.L4632:
	.align	2
.L4631:
	.word	.LANCHOR4-3712
	.word	.LANCHOR3+3028
	.fnend
	.size	bam_data_peer_reset_cb, .-bam_data_peer_reset_cb
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_init, %function
gqti_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	push	{r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L4636
	mov	r2, #56
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	bne	.L4634
	movw	r0, #:lower16:.LC369
	mvn	r7, #11
	movt	r0, #:upper16:.LC369
	bl	printk
	b	.L4633
.L4636:
	mov	r4, #16
.L4634:
	mov	r5, #0
	add	r3, r4, #44
	ldr	r2, .L4641
	movw	r1, #:lower16:.LC370
	movw	r6, #:lower16:.LANCHOR1
	movt	r1, #:upper16:.LC370
	add	r0, r4, #32
	str	r5, [r4, #8]
	movt	r6, #:upper16:.LANCHOR1
	str	r5, [r4, #12]
	str	r5, [r4, #16]
	str	r5, [r4, #20]
	str	r5, [r4, #24]
	str	r5, [r4, #28]
	str	r3, [r4, #44]
	str	r3, [r4, #48]
	str	r5, [r4, #52]
	bl	__init_waitqueue_head
	ldr	r0, .L4641+4
	str	r4, [r6, #3604]
	bl	misc_register
	subs	r7, r0, #0
	beq	.L4633
	movw	r0, #:lower16:.LC371
	movt	r0, #:upper16:.LC371
	bl	printk
	mov	r0, r4
	bl	kfree
	str	r5, [r6, #3604]
.L4633:
	mov	r0, r7
	pop	{r4, r5, r6, r7, r8, pc}
.L4642:
	.align	2
.L4641:
	.word	.LANCHOR1+3604
	.word	.LANCHOR0+532
	.fnend
	.size	gqti_ctrl_init, .-gqti_ctrl_init
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	accessory_function_init, %function
accessory_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r3, #44]
	cmp	r0, #0
	beq	.L4647
	mov	r2, #1792
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L4653
.L4644:
	mov	r7, #0
	movw	r1, #:lower16:.LC372
	ldr	r2, .L4655
	movt	r1, #:upper16:.LC372
	add	r0, r4, #1664
	str	r7, [r4, #88]
	mov	r6, #65024
	movw	r5, #:lower16:.LANCHOR1
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC373
	add	r0, r4, #1664
	ldr	r2, .L4655
	movt	r1, #:upper16:.LC373
	add	r0, r0, #12
	bl	__init_waitqueue_head
	add	r0, r4, #1648
	add	r2, r4, #1760
	str	r7, [r4, #1652]
	add	r0, r0, #8
	add	ip, r4, #1776
	add	r1, r4, #1696
	movw	r3, #:lower16:acc_start_work
	add	ip, ip, #8
	add	lr, r4, #1776
	str	r0, [r4, #1656]
	add	r2, r2, #8
	add	r1, r1, #8
	str	r0, [r4, #1660]
	movt	r6, 65535
	movt	r3, #:upper16:acc_start_work
	add	r0, r4, #1712
	movt	r5, #:upper16:.LANCHOR1
	str	r6, [r4, #1700]
	add	r0, r0, #4
	str	r1, [r4, #1704]
	str	r1, [r4, #1708]
	mov	r1, r7
	str	r3, [r4, #1712]
	mov	r3, r7
	str	r2, [r4, #1768]
	str	r2, [r4, #1772]
	mov	r2, r7
	str	lr, [r4, #1776]
	str	lr, [r4, #1780]
	str	ip, [r4, #1784]
	str	ip, [r4, #1788]
	bl	init_timer_key
	movw	ip, #:lower16:delayed_work_timer_fn
	add	r1, r4, #1696
	ldr	r0, .L4655+4
	add	r3, r4, #1744
	movw	r2, #:lower16:acc_hid_work
	str	r6, [r4, #1752]
	add	r3, r3, #12
	movt	ip, #:upper16:delayed_work_timer_fn
	str	r4, [r5, #2488]
	add	r1, r1, #4
	movt	r2, #:upper16:acc_hid_work
	str	ip, [r4, #1732]
	str	r1, [r4, #1736]
	str	r3, [r4, #1756]
	str	r3, [r4, #1760]
	str	r2, [r4, #1764]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L4654
.L4643:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4647:
	mov	r4, #16
	b	.L4644
.L4653:
	mvn	r5, #11
	b	.L4643
.L4654:
.L4646:
	mov	r0, r4
	bl	kfree
	movw	r0, #:lower16:.LC374
	movt	r0, #:upper16:.LC374
	bl	printk
	b	.L4643
.L4656:
	.align	2
.L4655:
	.word	.LANCHOR1+3608
	.word	.LANCHOR0+568
	.fnend
	.size	accessory_function_init, .-accessory_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_function_init, %function
rndis_qc_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r0, [r3, #36]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4, #4]
	beq	.L4659
	mov	r2, #272
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	mvneq	r4, #11
	beq	.L4657
.L4659:
	movw	r0, #:lower16:.LC375
	ldr	r1, .L4667
	movt	r0, #:upper16:.LC375
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	ldr	r0, .L4667+4
	movt	r3, #:upper16:.LANCHOR1
	str	r2, [r3, #2492]
	bl	misc_register
	subs	r4, r0, #0
	bne	.L4666
.L4657:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4666:
	movw	r0, #:lower16:.LC376
	ldr	r1, .L4667
	movt	r0, #:upper16:.LC376
	bl	printk
	b	.L4657
.L4668:
	.align	2
.L4667:
	.word	.LANCHOR3+3052
	.word	.LANCHOR0+604
	.fnend
	.size	rndis_qc_function_init, .-rndis_qc_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_init, %function
mtp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r3, #32]
	.pad #8
	sub	sp, sp, #8
	cmp	r0, #0
	beq	.L4674
	mov	r2, #256
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L4681
.L4670:
	mov	r5, #0
	movw	r1, #:lower16:.LC372
	ldr	r2, .L4683
	movt	r1, #:upper16:.LC372
	add	r0, r4, #132
	str	r5, [r4, #88]
	movw	r6, #:lower16:.LANCHOR1
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC373
	ldr	r2, .L4683
	add	r0, r4, #144
	movt	r1, #:upper16:.LC373
	movt	r6, #:upper16:.LANCHOR1
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC377
	ldr	r2, .L4683
	add	r0, r4, #156
	movt	r1, #:upper16:.LC377
	bl	__init_waitqueue_head
	add	r0, r4, #116
	movw	r2, #:lower16:.LC378
	str	r5, [r4, #108]
	add	r3, r4, #124
	movt	r2, #:upper16:.LC378
	str	r5, [r4, #112]
	str	r0, [r4, #116]
	mov	r1, #10
	str	r0, [r4, #120]
	movw	r0, #:lower16:.LC84
	movt	r1, 2
	str	r3, [r4, #124]
	movt	r0, #:upper16:.LC84
	str	r3, [r4, #128]
	mov	r3, r5
	str	r5, [sp]
	str	r2, [sp, #4]
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #180]
	beq	.L4676
	mov	r2, #65024
	movw	r1, #:lower16:send_file_work
	ldr	r0, .L4683+4
	movw	r3, #:lower16:receive_file_work
	movt	r2, 65535
	str	r4, [r6, #2500]
	add	lr, r4, #188
	add	ip, r4, #204
	movt	r1, #:upper16:send_file_work
	movt	r3, #:upper16:receive_file_work
	str	r2, [r4, #184]
	str	lr, [r4, #188]
	str	lr, [r4, #192]
	str	r1, [r4, #196]
	str	r2, [r4, #200]
	str	ip, [r4, #204]
	str	ip, [r4, #208]
	str	r3, [r4, #212]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L4682
.L4669:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4674:
	mov	r4, #16
	b	.L4670
.L4681:
	mvn	r5, #11
	b	.L4669
.L4682:
.L4673:
	ldr	r0, [r4, #180]
	bl	destroy_workqueue
.L4672:
	mov	r3, #0
	mov	r0, r4
	str	r3, [r6, #2500]
	bl	kfree
	movw	r0, #:lower16:.LC379
	movt	r0, #:upper16:.LC379
	bl	printk
	b	.L4669
.L4676:
	mvn	r5, #11
	b	.L4672
.L4684:
	.align	2
.L4683:
	.word	.LANCHOR1+3608
	.word	.LANCHOR0+640
	.fnend
	.size	mtp_function_init, .-mtp_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_init, %function
adb_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:kmalloc_caches
	mov	r5, r0
	movt	r4, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r4, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5, #4]
	beq	.L4687
	mov	r2, #8
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5, #4]
	beq	.L4690
.L4687:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L4692
	mov	r2, #164
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L4690
.L4689:
	mov	r5, #0
	movw	r1, #:lower16:.LC372
	ldr	r2, .L4701
	movt	r1, #:upper16:.LC372
	add	r0, r4, #128
	str	r5, [r4, #88]
	movw	r6, #:lower16:.LANCHOR1
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC373
	ldr	r2, .L4701
	add	r0, r4, #140
	movt	r1, #:upper16:.LC373
	movt	r6, #:upper16:.LANCHOR1
	bl	__init_waitqueue_head
	add	r3, r4, #120
	mov	r2, #1
	str	r5, [r4, #108]
	str	r5, [r4, #112]
	ldr	r0, .L4701+4
	str	r5, [r4, #116]
	str	r3, [r4, #120]
	str	r3, [r4, #124]
	strb	r2, [r4, #161]
	str	r4, [r6, #3476]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L4700
.L4685:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4692:
	mov	r4, #16
	b	.L4689
.L4690:
	mvn	r5, #11
	b	.L4685
.L4700:
.L4691:
	mov	r0, r4
	bl	kfree
	movw	r0, #:lower16:.LC380
	movt	r0, #:upper16:.LC380
	bl	printk
	b	.L4685
.L4702:
	.align	2
.L4701:
	.word	.LANCHOR1+3608
	.word	.LANCHOR0+676
	.fnend
	.size	adb_function_init, .-adb_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_sdio_function_init, %function
rmnet_smd_sdio_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r3, #36]
	.pad #8
	sub	sp, sp, #8
	cmp	r0, #0
	beq	.L4711
	mov	r2, #428
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L4718
.L4704:
	movw	r2, #:lower16:.LC381
	mov	r5, #0
	movt	r2, #:upper16:.LC381
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	mov	r1, #10
	str	r5, [sp]
	movw	r0, #:lower16:.LC84
	str	r2, [sp, #4]
	mov	r3, r5
	movt	r1, 2
	movt	r0, #:upper16:.LC84
	str	r4, [r6, #2480]
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #380]
	beq	.L4713
	mov	r7, #65024
	movw	r3, #:lower16:rmnet_mux_disconnect_work
	str	r5, [r4, #176]
	movt	r3, #:upper16:rmnet_mux_disconnect_work
	movt	r7, 65535
	str	r5, [r4, #368]
	add	r0, r4, #388
	movw	r1, #:lower16:rmnet_mux_smd_data_rx_tlet
	str	r5, [r4, #372]
	movt	r1, #:upper16:rmnet_mux_smd_data_rx_tlet
	mov	r2, r4
	str	r5, [r4, #376]
	str	r7, [r4, #384]
	add	r8, r4, #104
	str	r0, [r4, #388]
	str	r0, [r4, #392]
	add	r0, r4, #152
	str	r3, [r4, #396]
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_mux_smd_data_tx_tlet
	mov	r2, r4
	add	r0, r4, #132
	movt	r1, #:upper16:rmnet_mux_smd_data_tx_tlet
	bl	tasklet_init
	movw	r1, #:lower16:.LC382
	ldr	r2, .L4721
	add	r0, r4, #180
	movt	r1, #:upper16:.LC382
	bl	__init_waitqueue_head
	movw	r2, #:lower16:rmnet_mux_sdio_data_rx_work
	movw	ip, #:lower16:rmnet_mux_open_sdio_work
	str	r8, [r4, #104]
	movt	r2, #:upper16:rmnet_mux_sdio_data_rx_work
	movt	ip, #:upper16:rmnet_mux_open_sdio_work
	str	r8, [r4, #108]
	add	r1, r4, #112
	add	r0, r4, #260
	add	r3, r4, #120
	str	r1, [r4, #112]
	str	r2, [r4, #252]
	add	r2, r4, #244
	str	r1, [r4, #116]
	mov	r1, r5
	str	r3, [r4, #120]
	str	r3, [r4, #124]
	mov	r3, r5
	str	r7, [r4, #240]
	str	r2, [r4, #244]
	str	r2, [r4, #248]
	mov	r2, r5
	str	r7, [r4, #256]
	add	r7, r4, #192
	str	r0, [r4, #260]
	str	r0, [r4, #264]
	add	r0, r4, #272
	str	ip, [r4, #268]
	bl	init_timer_key
	mov	r3, r7
	add	r1, r4, #216
	movw	r0, #:lower16:delayed_work_timer_fn
	add	ip, r4, #316
	add	lr, r4, #256
	add	r2, r4, #224
	str	r3, [r4, #192]
	movt	r0, #:upper16:delayed_work_timer_fn
	add	r7, r4, #200
	str	r3, [r4, #196]
	add	r3, r4, #340
	str	r7, [r4, #200]
	str	r1, [r4, #216]
	str	r1, [r4, #220]
	movw	r1, #:lower16:.LC383
	str	r7, [r4, #204]
	movt	r1, #:upper16:.LC383
	str	r5, [r4, #208]
	str	r5, [r4, #212]
	str	r2, [r4, #224]
	str	r2, [r4, #228]
	ldr	r2, .L4721
	str	r5, [r4, #232]
	str	r5, [r4, #236]
	str	r0, [r4, #288]
	add	r0, r4, #324
	str	lr, [r4, #292]
	str	ip, [r4, #316]
	str	ip, [r4, #320]
	str	r3, [r4, #340]
	str	r3, [r4, #344]
	bl	__init_waitqueue_head
	ldr	r0, .L4721+4
	bl	misc_register
	subs	r5, r0, #0
	bne	.L4707
	movw	r0, #:lower16:.LC384
	mov	r1, r5
	movt	r0, #:upper16:.LC384
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r6, #3608]
	beq	.L4703
	cmn	r0, #4096
	bhi	.L4703
	ldr	ip, .L4721+8
	movw	r0, #:lower16:.LC250
	mov	r3, r4
	movt	r0, #:upper16:.LC250
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L4719
.L4703:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4707:
	movw	r0, #:lower16:.LC385
	ldr	r1, .L4721+12
	movt	r0, #:upper16:.LC385
	bl	printk
	ldr	r0, .L4721+16
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L4720
.L4709:
	ldr	r0, [r4, #380]
	bl	destroy_workqueue
.L4706:
	mov	r0, r4
	bl	kfree
	b	.L4703
.L4711:
	mov	r4, #16
	b	.L4704
.L4713:
	mvn	r5, #11
	b	.L4706
.L4719:
	ldr	r0, [r6, #3608]
	bl	debugfs_remove
	str	r5, [r6, #3608]
	b	.L4703
.L4720:
	movw	r1, #:lower16:.LC386
	ldr	r2, .L4721+20
	mov	r3, r5
	movt	r1, #:upper16:.LC386
	sub	r0, r0, #24
	bl	__dynamic_pr_debug
	b	.L4709
.L4718:
	mvn	r5, #11
	b	.L4703
.L4722:
	.align	2
.L4721:
	.word	.LANCHOR1+3608
	.word	.LANCHOR0+712
	.word	.LANCHOR3+3116
	.word	.LANCHOR3+3068
	.word	.LANCHOR4-3696
	.word	.LANCHOR3+3096
	.fnend
	.size	rmnet_smd_sdio_function_init, .-rmnet_smd_sdio_function_init
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_cleanup, %function
gqti_ctrl_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, .L4725
	bl	misc_deregister
	ldr	r0, [r4, #3604]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #3604]
	pop	{r4, pc}
.L4726:
	.align	2
.L4725:
	.word	.LANCHOR0+532
	.fnend
	.size	gqti_ctrl_cleanup, .-gqti_ctrl_cleanup
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	accessory_function_cleanup, %function
accessory_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	ldr	r0, .L4729
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	bl	misc_deregister
	ldr	r0, [r4, #2488]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #2488]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4730:
	.align	2
.L4729:
	.word	.LANCHOR0+568
	.fnend
	.size	accessory_function_cleanup, .-accessory_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_function_cleanup, %function
ncm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r0
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, .L4733
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	misc_deregister
	ldr	r0, [r4, #3612]
	bl	kfree
	ldr	r0, [r5, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r5, #4]
	str	r3, [r4, #3612]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4734:
	.align	2
.L4733:
	.word	.LANCHOR0+748
	.fnend
	.size	ncm_function_cleanup, .-ncm_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_function_cleanup, %function
rndis_qc_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movw	r0, #:lower16:.LC387
	ldr	r1, .L4737
	movt	r0, #:upper16:.LC387
	str	lr, [sp, #4]
	bl	printk
	ldr	r0, .L4737+4
	bl	misc_deregister
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	ldr	r0, [r4, #4]
	movt	r3, #:upper16:.LANCHOR1
	str	r2, [r3, #2496]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
.L4738:
	.align	2
.L4737:
	.word	.LANCHOR3+3224
	.word	.LANCHOR0+604
	.fnend
	.size	rndis_qc_function_cleanup, .-rndis_qc_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_cleanup, %function
mtp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r5, [r4, #2500]
	str	lr, [sp, #12]
	cmp	r5, #0
	beq	.L4739
	ldr	r0, .L4742
	bl	misc_deregister
	ldr	r0, [r5, #180]
	bl	destroy_workqueue
	mov	r3, #0
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	str	r3, [r4, #2500]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	kfree
.L4739:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4743:
	.align	2
.L4742:
	.word	.LANCHOR0+640
	.fnend
	.size	mtp_function_cleanup, .-mtp_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_cleanup, %function
ccid_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR0
	str	lr, [sp, #4]
	add	r0, r4, #784
	bl	misc_deregister
	add	r0, r4, #820
	bl	misc_deregister
	movw	r3, #:lower16:.LANCHOR1
	ldr	r4, [sp]
	movt	r3, #:upper16:.LANCHOR1
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r0, [r3, #3472]
	b	kfree
	.fnend
	.size	ccid_function_cleanup, .-ccid_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_cleanup, %function
adb_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r0
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, .L4748
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	misc_deregister
	ldr	r0, [r4, #3476]
	bl	kfree
	mov	r3, #0
	ldr	r0, [r5, #4]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	str	r3, [r4, #3476]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	kfree
.L4749:
	.align	2
.L4748:
	.word	.LANCHOR0+676
	.fnend
	.size	adb_function_cleanup, .-adb_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_sdio_function_cleanup, %function
rmnet_smd_sdio_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r4, [r3, #2480]
	ldr	r0, [r3, #3608]
	bl	debugfs_remove_recursive
	ldr	r0, .L4752
	bl	misc_deregister
	ldr	r0, [r4, #128]
	bl	smd_close
	ldr	r0, [r4, #380]
	bl	destroy_workqueue
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
.L4753:
	.align	2
.L4752:
	.word	.LANCHOR0+712
	.fnend
	.size	rmnet_smd_sdio_function_cleanup, .-rmnet_smd_sdio_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_function_cleanup, %function
mbim_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r0, #:lower16:.LC388
	movw	r4, #:lower16:.LANCHOR1
	ldr	r1, .L4760
	movt	r0, #:upper16:.LC388
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	printk
	ldr	r3, [r4, #3616]
	cmp	r3, #0
	beq	.L4755
	ldr	r0, [r4, #3620]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #3620]
.L4755:
	mov	r5, #0
	ldr	r0, .L4760+4
	str	r5, [r4, #3616]
	bl	misc_deregister
	ldr	r6, [sp, #8]
	str	r5, [r4, #2504]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4761:
	.align	2
.L4760:
	.word	.LANCHOR3+3244
	.word	.LANCHOR0+856
	.fnend
	.size	mbim_function_cleanup, .-mbim_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_io_complete, %function
ffs_epfile_io_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L4762
	ldr	r2, [r3, #4]
	cmp	r2, #0
	beq	.L4762
	ldr	r2, [r1, #32]
	cmp	r2, #0
	beq	.L4762
	ldr	r2, [r1, #44]
	cmp	r2, #0
	ldreq	r2, [r1, #48]
	str	r2, [r3, #24]
	ldr	r0, [r1, #32]
	b	complete
.L4762:
	bx	lr
	.fnend
	.size	ffs_epfile_io_complete, .-ffs_epfile_io_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_transmit, %function
f_midi_transmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #88]
	.pad #20
	sub	sp, sp, #20
	cmp	r3, #0
	str	r3, [sp, #4]
	beq	.L4774
	cmp	r1, #0
	mov	r10, r0
	mov	r5, r1
	beq	.L4821
.L4776:
	mov	r1, #0
	movw	r3, #:lower16:f_midi_complete
	movt	r3, #:upper16:f_midi_complete
	mov	r2, r1
	add	r7, r10, #100
	add	r9, r10, #228
	str	r1, [r5, #4]
	add	fp, r10, #164
	str	r3, [r5, #28]
.L4808:
	ldr	r4, [r9, #4]!
	ldr	r6, [r7, #4]!
	cmp	r4, #0
	beq	.L4777
	ldr	r3, [r4, #4]
	cmp	r6, #0
	cmpne	r3, #0
	beq	.L4777
	ldr	r1, [r10, #336]
	add	r3, r2, #3
	cmp	r1, r3
	bls	.L4777
.L4807:
	mov	r2, #1
	add	r1, sp, #15
	mov	r0, r6
	bl	snd_rawmidi_transmit
	cmp	r0, #1
	bne	.L4822
	ldrb	r3, [r4, #8]	@ zero_extendqisi2
	ldrb	r1, [sp, #15]	@ zero_extendqisi2
	lsl	r3, r3, #4
	cmp	r1, #247
	uxtb	r3, r3
	bhi	.L4823
	cmp	r1, #239
	bls	.L4781
	sub	r2, r1, #241
	cmp	r2, #6
	ldrls	pc, [pc, r2, asl #2]
	b	.L4782
.L4784:
	.word	.L4783
	.word	.L4785
	.word	.L4783
	.word	.L4789
	.word	.L4789
	.word	.L4787
	.word	.L4788
.L4788:
	ldrb	r2, [r4, #9]	@ zero_extendqisi2
	cmp	r2, #5
	beq	.L4790
	cmp	r2, #6
	bne	.L4824
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	orr	r3, r3, #7
	mvn	r0, #8
	ldrb	ip, [r4, #11]	@ zero_extendqisi2
	ldr	r2, [r5]
	ldr	r1, [r5, #4]
.L4819:
	strb	r3, [r2, r1]
	add	r3, r2, r1
	add	r1, r1, #4
	strb	lr, [r3, #1]
	strb	ip, [r3, #2]
	strb	r0, [r3, #3]
	str	r1, [r5, #4]
.L4789:
	mov	r3, #0
	strb	r3, [r4, #9]
	ldr	r2, [r5, #4]
.L4780:
	ldr	r3, [r10, #336]
	add	r1, r2, #3
	cmp	r1, r3
	bcc	.L4807
.L4777:
	cmp	fp, r7
	bne	.L4808
.L4826:
	cmp	r2, #0
	beq	.L4809
	ldr	r0, [sp, #4]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
.L4774:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4785:
	mov	r2, #2
	mvn	r3, #13
	strb	r2, [r4, #9]
	strb	r3, [r4, #10]
	ldr	r2, [r5, #4]
	b	.L4780
.L4783:
	mov	r3, #1
	strb	r3, [r4, #9]
	strb	r1, [r4, #10]
	ldr	r2, [r5, #4]
	b	.L4780
.L4782:
	mov	r2, #5
	mvn	r3, #15
	strb	r2, [r4, #9]
	strb	r3, [r4, #10]
	ldr	r2, [r5, #4]
	b	.L4780
.L4787:
	ldr	r2, [r5]
	orr	r3, r3, #5
	mov	r0, #0
	ldr	r1, [r5, #4]
	mvn	ip, #9
	strb	r3, [r2, r1]
	add	r3, r2, r1
	add	r1, r1, #4
	strb	ip, [r3, #1]
	strb	r0, [r3, #2]
	strb	r0, [r3, #3]
	str	r1, [r5, #4]
	strb	r0, [r4, #9]
	ldr	r2, [r5, #4]
	b	.L4780
.L4823:
	ldm	r5, {r0, r2}
	orr	r3, r3, #15
	mov	ip, #0
	strb	r3, [r0, r2]
	add	r0, r0, r2
	add	r2, r2, #4
	strb	r1, [r0, #1]
	strb	ip, [r0, #2]
	strb	ip, [r0, #3]
	str	r2, [r5, #4]
	b	.L4780
.L4781:
	tst	r1, #128
	bne	.L4825
	ldrb	r2, [r4, #9]	@ zero_extendqisi2
	sub	r2, r2, #1
	cmp	r2, #5
	ldrls	pc, [pc, r2, asl #2]
	b	.L4820
.L4797:
	.word	.L4796
	.word	.L4798
	.word	.L4799
	.word	.L4800
	.word	.L4801
	.word	.L4802
.L4802:
	ldr	r0, [r5]
	orr	r3, r3, #4
	ldr	r8, [r5]
	ldr	r2, [r5, #4]
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	ldrb	ip, [r4, #11]	@ zero_extendqisi2
	add	r0, r0, r2
	strb	r3, [r8, r2]
	add	r2, r2, #4
	mov	r3, #4
	strb	lr, [r0, #1]
	strb	ip, [r0, #2]
	strb	r1, [r0, #3]
	str	r2, [r5, #4]
	strb	r3, [r4, #9]
.L4820:
	ldr	r2, [r5, #4]
	b	.L4780
.L4801:
	mov	r3, #6
	strb	r3, [r4, #9]
	strb	r1, [r4, #11]
	ldr	r2, [r5, #4]
	b	.L4780
.L4800:
	mov	r3, #5
	strb	r3, [r4, #9]
	strb	r1, [r4, #10]
	ldr	r2, [r5, #4]
	b	.L4780
.L4799:
	ldrb	ip, [r4, #10]	@ zero_extendqisi2
	ldrb	lr, [r4, #11]	@ zero_extendqisi2
	cmp	ip, #239
	orrls	r2, r3, ip, lsr #4
	orrhi	r2, r3, #3
	movls	r3, #2
	movhi	r3, #0
	strb	r3, [r4, #9]
	ldr	r0, [r5]
	ldr	r8, [r5]
	ldr	r3, [r5, #4]
	strb	r2, [r8, r3]
	add	r0, r0, r3
	add	r2, r3, #4
	strb	ip, [r0, #1]
	strb	lr, [r0, #2]
	strb	r1, [r0, #3]
	str	r2, [r5, #4]
	b	.L4780
.L4798:
	mov	r3, #3
	strb	r3, [r4, #9]
	strb	r1, [r4, #11]
	ldr	r2, [r5, #4]
	b	.L4780
.L4796:
	ldrb	ip, [r4, #10]	@ zero_extendqisi2
	mov	lr, #0
	cmp	ip, #239
	movhi	r2, #0
	orrls	r3, r3, ip, lsr #4
	orrhi	r3, r3, #2
	strbhi	r2, [r4, #9]
	ldm	r5, {r0, r2}
	strb	r3, [r0, r2]
	add	r0, r0, r2
	add	r2, r2, #4
	strb	ip, [r0, #1]
	strb	r1, [r0, #2]
	strb	lr, [r0, #3]
	str	r2, [r5, #4]
	b	.L4780
.L4825:
	add	r3, r1, #64
	strb	r1, [r4, #10]
	uxtb	r3, r3
	cmp	r3, #31
	movhi	r3, #2
	strbls	r0, [r4, #9]
	strbhi	r3, [r4, #9]
	ldr	r2, [r5, #4]
	b	.L4780
.L4822:
	mov	r3, #0
	cmp	fp, r7
	str	r3, [r4, #4]
	ldr	r2, [r5, #4]
	bne	.L4808
	b	.L4826
.L4824:
	cmp	r2, #4
	bne	.L4789
	ldr	r2, [r5]
	orr	r3, r3, #5
	mov	r0, #0
	ldr	r1, [r5, #4]
	mvn	ip, #8
	strb	r3, [r2, r1]
	add	r3, r2, r1
	add	r1, r1, #4
	strb	ip, [r3, #1]
	strb	r0, [r3, #2]
	strb	r0, [r3, #3]
	str	r1, [r5, #4]
	b	.L4789
.L4790:
	orr	r3, r3, #6
	mvn	ip, #8
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	mov	r0, #0
	ldr	r2, [r5]
	ldr	r1, [r5, #4]
	b	.L4819
.L4821:
	mov	r0, r3
	ldr	r1, [r10, #336]
	bl	midi_alloc_ep_req
	subs	r5, r0, #0
	bne	.L4776
	ldr	r0, [r10, #84]
	movw	r1, #:lower16:.LC389
	movt	r1, #:upper16:.LC389
	add	r0, r0, #32
	bl	dev_err
	b	.L4774
.L4809:
	ldr	r0, [r5]
	bl	kfree
	ldr	r0, [sp, #4]
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	b	.L4774
	.fnend
	.size	f_midi_transmit, .-f_midi_transmit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_in_tasklet, %function
f_midi_in_tasklet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r1, #0
	b	f_midi_transmit
	.fnend
	.size	f_midi_in_tasklet, .-f_midi_in_tasklet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_register_card, %function
f_midi_register_card:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r3, #0
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	ldr	r0, [r0, #328]
	add	r2, sp, #8
	ldr	r1, [r4, #332]
	str	r2, [sp]
	mov	r2, r3
	bl	snd_card_create
	subs	r5, r0, #0
	blt	.L4839
	ldr	r0, [sp, #8]
	mov	r2, r4
	mov	r1, #8192
	ldr	r3, .L4842
	str	r0, [r4, #96]
	bl	snd_device_new
	subs	r5, r0, #0
	blt	.L4840
	movw	r2, #:lower16:.LC392
	movw	r3, #:lower16:.LC393
	ldr	r0, [sp, #8]
	movt	r2, #:upper16:.LC392
	movt	r3, #:upper16:.LC393
	ldm	r2, {r5, lr}
	movw	r1, #:lower16:.LC394
	ldr	ip, [r2, #8]
	movt	r1, #:upper16:.LC394
	ldrh	r7, [r3, #4]
	ldr	r8, [r3]
	ldrb	r3, [r3, #6]	@ zero_extendqisi2
	str	r5, [r0, #20]	@ unaligned
	str	lr, [r0, #24]	@ unaligned
	str	ip, [r0, #28]	@ unaligned
	str	r8, [r0, #36]	@ unaligned
	strh	r7, [r0, #40]	@ unaligned
	strb	r3, [r0, #42]
	str	r5, [r0, #68]	@ unaligned
	str	lr, [r0, #72]	@ unaligned
	str	ip, [r0, #76]	@ unaligned
	bl	snd_component_add
	ldr	r0, [sp, #8]
	add	ip, sp, #12
	mov	r2, #0
	ldr	r1, [r4, #320]
	ldr	r3, [r4, #324]
	stm	sp, {r1, ip}
	add	r1, r0, #68
	bl	snd_rawmidi_new
	subs	r5, r0, #0
	blt	.L4841
	ldr	r1, [sp, #8]
	ldr	r5, [sp, #12]
	add	r1, r1, #36
	add	r0, r5, #84
	str	r5, [r4, #100]
	bl	strcpy
	mov	r3, #7
	mov	r0, r5
	ldr	r2, .L4842+4
	mov	r1, #0
	str	r3, [r5, #16]
	str	r4, [r5, #200]
	bl	snd_rawmidi_set_ops
	ldr	r0, [sp, #12]
	mov	r1, #1
	ldr	r2, .L4842+8
	bl	snd_rawmidi_set_ops
	ldr	r0, [sp, #8]
	bl	snd_card_register
	subs	r5, r0, #0
	movge	r5, #0
	bge	.L4828
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC396
	movt	r1, #:upper16:.LC396
	add	r0, r0, #32
	bl	dev_err
	b	.L4830
.L4840:
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC391
	mov	r2, r5
	movt	r1, #:upper16:.LC391
	add	r0, r0, #32
	bl	dev_err
.L4830:
	ldr	r0, [r4, #96]
	cmp	r0, #0
	beq	.L4828
	bl	snd_card_free
	mov	r3, #0
	str	r3, [r4, #96]
.L4828:
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4839:
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC390
	movt	r1, #:upper16:.LC390
	add	r0, r0, #32
	bl	dev_err
	b	.L4830
.L4841:
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC395
	mov	r2, r5
	movt	r1, #:upper16:.LC395
	add	r0, r0, #32
	bl	dev_err
	b	.L4830
.L4843:
	.align	2
.L4842:
	.word	.LANCHOR0+892
	.word	.LANCHOR0+904
	.word	.LANCHOR0+920
	.fnend
	.size	f_midi_register_card, .-f_midi_register_card
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_in_trigger, %function
f_midi_in_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #12]
	ldr	r2, [r0, #28]
	add	r3, r3, #58
	ldr	r2, [r2, #200]
	ldr	r3, [r2, r3, lsl #2]
	cmp	r3, #0
	bxeq	lr
	cmp	r1, #0
	str	r1, [r3, #4]
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	add	r1, r2, #304
	mov	r0, #0
	add	r4, r2, #300
	str	lr, [sp, #4]
	bl	_test_and_set_bit
	cmp	r0, #0
	beq	.L4855
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4855:
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	__tasklet_hi_schedule
	.fnend
	.size	f_midi_in_trigger, .-f_midi_in_trigger
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	tx_complete, %function
tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r3, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0]
	cmp	r4, #0
	bne	.L4857
.L4896:
	ldr	r3, [r3, #8]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L4857:
	ldr	ip, [r4, #4]
	cmp	ip, #0
	beq	.L4896
	ldr	r3, [r1, #44]
	mov	r5, r1
	ldr	r7, [r4, #8]
	cmn	r3, #104
	beq	.L4878
	cmp	r3, #0
	beq	.L4861
	cmn	r3, #108
	beq	.L4878
	ldr	r3, [r7, #252]
	add	r3, r3, #1
	str	r3, [r7, #252]
	ldr	r1, [r4, #8]
.L4860:
	ldr	r3, [r1, #236]
	add	r6, r4, #16
	add	r8, r4, #20
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r1, #236]
	bl	_raw_spin_lock
	mov	r2, r8
	add	r0, r5, #36
	ldr	r1, [r4, #24]
	bl	__list_add
	ldr	r3, [r4, #4]
	ldr	r9, [r5, #32]
	ldrb	r3, [r3, #124]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L4877
	cmp	r9, #0
	beq	.L4897
	ldr	r0, [r4, #48]
	cmp	r0, #0
	beq	.L4877
	movw	r1, #32800
	bl	__kmalloc
	mov	r3, #0
	str	r0, [r5]
	str	r3, [r5, #32]
.L4872:
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r0, r9
	bl	dev_kfree_skb_any
.L4871:
	ldr	r3, [r4, #8]
	ldr	r0, [r3, #164]
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	beq	.L4898
.L4856:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4861:
	ldrb	r0, [r1, #26]	@ zero_extendqisi2
	ldr	r3, [r1, #4]
	ldr	r1, [r7, #244]
	tst	r0, #2
	subeq	r3, r3, #1
	add	r3, r1, r3
	str	r3, [r7, #244]
	ldr	r1, [r4, #8]
	b	.L4860
.L4877:
	mov	r3, #0
	str	r3, [r5]
	b	.L4872
.L4898:
	ldr	r4, [r3, #576]
	add	r1, r4, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L4856
	ldr	r0, [r4, #4]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__netif_schedule
.L4878:
	mov	r1, r7
	b	.L4860
.L4897:
	ldr	r3, [r4, #40]
	sub	r3, r3, #1
	str	r3, [r4, #40]
	str	r9, [r5, #4]
	ldr	r5, [r4, #20]
	cmp	r8, r5
	beq	.L4895
	ldr	r3, [r4, #4]
	mov	r0, r5
	ldr	r9, [r3, #88]
	bl	list_del
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r3, [r5, #-32]
	cmp	r3, #0
	beq	.L4866
	ldr	r2, [r4, #4]
	mov	r0, r3
	ldrb	r1, [r2, #104]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L4880
	ldr	r2, [r2, #112]
	cmp	r3, r2
	beq	.L4899
.L4880:
	mov	r1, #1
.L4867:
	ldrb	r2, [r5, #-10]	@ zero_extendqisi2
	bfi	r2, r1, #1, #1
	uxtb	r1, r2
	strb	r2, [r5, #-10]
	tst	r1, #2
	beq	.L4868
	ldrb	r2, [r4, #124]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L4868
	ldrh	ip, [r9, #20]
	sdiv	r2, r3, ip
	mls	r2, ip, r2, r3
	cmp	r2, #0
	bne	.L4868
	bfi	r1, r2, #1, #1
	add	r0, r3, #1
	strb	r1, [r5, #-10]
.L4868:
	str	r0, [r5, #-32]
	ldr	r3, [r9, #8]
	mov	r2, #32
	sub	r1, r5, #36
	mov	r0, r9
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L4900
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r4, #40]
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #40]
	bl	_raw_spin_unlock
	movw	r3, #:lower16:jiffies
	movt	r3, #:upper16:jiffies
	ldr	r3, [r3]
	str	r3, [r7, #604]
	b	.L4871
.L4866:
	mov	r0, r6
.L4894:
	bl	_raw_spin_lock
	mov	r2, r8
	mov	r0, r5
	ldr	r1, [r4, #24]
	bl	__list_add
.L4895:
	mov	r0, r6
	bl	_raw_spin_unlock
	b	.L4871
.L4899:
	ldrh	r2, [r9, #20]
	sdiv	r1, r3, r2
	mls	r1, r2, r1, r3
	adds	r1, r1, #0
	movne	r1, #1
	b	.L4867
.L4900:
	movw	r0, #:lower16:.LC397
	ldr	r1, .L4901
	movt	r0, #:upper16:.LC397
	bl	printk
	mov	r3, #0
	mov	r0, r6
	str	r3, [r5, #-32]
	b	.L4894
.L4902:
	.align	2
.L4901:
	.word	.LANCHOR3+3260
	.fnend
	.size	tx_complete, .-tx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_qc_open, %function
eth_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r0, #1160]
	ldr	r5, [r0, #164]
	ubfx	r5, r5, #2, #1
	cmp	r5, #0
	beq	.L4918
.L4905:
	add	r5, r4, #1152
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r0, [r4, #1156]
	cmp	r0, #0
	beq	.L4907
	ldr	r3, [r0, #112]
	cmp	r3, #0
	beq	.L4907
	blx	r3
.L4907:
	mov	r0, r5
	bl	_raw_spin_unlock_irq
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4918:
	bl	netif_carrier_off
	ldr	r0, [r4, #1160]
	bl	netif_carrier_on
	ldr	r3, [r4, #1160]
	mov	r0, r5
	ldr	r5, [r3, #576]
	add	r1, r5, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L4905
	ldr	r0, [r5, #4]
	bl	__netif_schedule
	b	.L4905
	.fnend
	.size	eth_qc_open, .-eth_qc_open
	.align	2
	.global	rndis_rm_hdr
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_rm_hdr, %function
rndis_rm_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR1
	mov	r8, r2
	movt	r9, #:upper16:.LANCHOR1
	str	lr, [sp, #24]
	ldr	ip, [r1, #80]
	ldr	r3, [r9, #3628]
	.pad #12
	sub	sp, sp, #12
	cmp	ip, r3
	strhi	ip, [r9, #3628]
	bhi	.L4921
	cmp	ip, #0
	beq	.L4935
.L4921:
	cmp	ip, #43
	bls	.L4923
	ldr	r3, [r4, #172]
	ldr	r6, [r3, #4]	@ unaligned
	ldr	r1, [r3, #8]	@ unaligned
	ldr	r5, [r3, #12]	@ unaligned
	ldr	lr, [r3]	@ unaligned
	cmp	ip, r6
	bcc	.L4924
	add	r3, r5, r1
	add	r3, r3, #8
	cmp	r3, r6
	bhi	.L4924
	cmp	lr, #1
	bne	.L4925
	mov	r7, #0
	b	.L4926
.L4940:
	cmp	r2, r5
	beq	.L4930
	bl	skb_clone
	sub	r1, r6, #44
	subs	r6, r0, #0
	mov	r0, r4
	beq	.L4939
	bl	skb_pull
	mov	r1, r5
	mov	r0, r6
	bl	skb_trim
	mov	r1, r6
	mov	r0, r8
	bl	skb_queue_tail
	ldr	ip, [r4, #80]
	cmp	ip, #0
	beq	.L4922
	cmp	ip, #43
	bls	.L4923
	ldr	r0, [r4, #172]
	ldr	r6, [r0, #4]	@ unaligned
	ldr	r1, [r0, #8]	@ unaligned
	ldr	r5, [r0, #12]	@ unaligned
	ldr	lr, [r0]	@ unaligned
	cmp	ip, r6
	add	r2, r1, r5
	bcc	.L4924
	add	r2, r2, #8
	cmp	r2, r6
	bhi	.L4924
	cmp	lr, #1
	bne	.L4925
.L4926:
	add	r1, r1, #8
	mov	r0, r4
	bl	skb_pull
	ldr	r3, [r4, #80]
	mov	r1, #32
	mov	r0, r4
	add	r7, r7, #1
	cmp	r3, r5
	sub	r2, r3, #1
	bne	.L4940
.L4930:
	mov	r1, r5
	mov	r0, r4
	bl	skb_trim
.L4922:
	ldr	r3, [r9, #3632]
	mov	r0, r8
	mov	r1, r4
	cmp	r3, r7
	strlt	r7, [r9, #3632]
	bl	skb_queue_tail
	mov	r0, #0
.L4919:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L4935:
	mov	r7, ip
	b	.L4922
.L4924:
	movw	r0, #:lower16:.LC399
	mov	r3, r1
	stm	sp, {r5, ip}
	mov	r2, r6
	mov	r1, lr
	movt	r0, #:upper16:.LC399
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #74
	b	.L4919
.L4923:
	movw	r0, #:lower16:.LC398
	mov	r1, ip
	mov	r2, #44
	movt	r0, #:upper16:.LC398
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #21
	b	.L4919
.L4939:
	movw	r0, #:lower16:.LC400
	ldr	r1, .L4941
	movt	r0, #:upper16:.LC400
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #11
	b	.L4919
.L4925:
	movw	r0, #:lower16:.LC399
	mov	r3, r1
	stm	sp, {r5, ip}
	mov	r2, r6
	mov	r1, lr
	movt	r0, #:upper16:.LC399
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #21
	b	.L4919
.L4942:
	.align	2
.L4941:
	.word	.LANCHOR3+3272
	.fnend
	.size	rndis_rm_hdr, .-rndis_rm_hdr
	.align	2
	.global	rndis_qc_rm_hdr
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_rm_hdr, %function
rndis_qc_rm_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #172]
	ldr	r3, [r5]	@ unaligned
	cmp	r3, #1
	bne	.L4948
	ldr	r1, [r5, #8]	@ unaligned
	mov	r0, r4
	mov	r6, r2
	add	r1, r1, #8
	bl	skb_pull
	cmp	r0, #0
	beq	.L4949
	ldr	r1, [r5, #12]	@ unaligned
	mov	r0, r4
	bl	skb_trim
	mov	r0, r6
	mov	r1, r4
	bl	skb_queue_tail
	mov	r0, #0
.L4943:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4948:
	mov	r0, r1
	bl	dev_kfree_skb_any
	mvn	r0, #21
	b	.L4943
.L4949:
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #74
	b	.L4943
	.fnend
	.size	rndis_qc_rm_hdr, .-rndis_qc_rm_hdr
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_proc_open, %function
rndis_proc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #-20]
	mov	r0, r1
	movw	r1, #:lower16:rndis_proc_show
	movt	r1, #:upper16:rndis_proc_show
	ldr	r2, [r3, #44]
	b	single_open
	.fnend
	.size	rndis_proc_open, .-rndis_proc_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_proc_show, %function
rndis_proc_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r1, #:lower16:.LC402
	movw	r3, #:lower16:.LC401
	strd	r6, [sp, #8]
	movt	r1, #:upper16:.LC402
	movt	r3, #:upper16:.LC401
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	ip, [r0, #76]
	.pad #44
	sub	sp, sp, #44
	ldrb	r4, [ip, #1]	@ zero_extendqisi2
	ldr	lr, [ip, #4]
	ldrb	r2, [ip]	@ zero_extendqisi2
	cmp	r4, #0
	moveq	r3, r1
	cmp	lr, #2
	movwhi	r7, #:lower16:.LC403
	movthi	r7, #:upper16:.LC403
	bhi	.L4953
	movw	r1, #:lower16:.LANCHOR3
	movt	r1, #:upper16:.LANCHOR3
	add	r1, r1, lr, lsl #2
	ldr	r7, [r1, #3288]
.L4953:
	ldr	r8, [ip, #8]
	ldr	r1, [ip, #16]
	cmp	r1, #0
	bne	.L4957
	ldr	r1, [ip, #12]
	mov	r6, #100
	movw	r5, #:lower16:.LC405
	movt	r5, #:upper16:.LC405
	mul	r6, r6, r1
.L4954:
	movw	lr, #:lower16:.LANCHOR1
	ldrb	r4, [ip, #36]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC406
	movt	lr, #:upper16:.LANCHOR1
	movt	r1, #:upper16:.LC406
	ldr	r9, [lr, #3628]
	ldr	lr, [lr, #3632]
	str	r9, [sp, #28]
	str	r4, [sp, #32]
	str	lr, [sp, #36]
	ldr	lr, [ip, #28]
	ldr	lr, [lr, #356]
	add	lr, lr, #80
	mul	lr, r4, lr
	str	lr, [sp, #24]
	ldr	lr, [ip, #40]
	str	lr, [sp, #20]
	ldr	ip, [ip, #32]
	stm	sp, {r7, r8}
	str	r6, [sp, #8]
	str	r5, [sp, #12]
	str	ip, [sp, #16]
	bl	seq_printf
	mov	r0, #0
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L4957:
	movw	r5, #:lower16:.LC404
	mov	r6, #0
	movt	r5, #:upper16:.LC404
	b	.L4954
	.fnend
	.size	rndis_proc_show, .-rndis_proc_show
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	get_ether_addr, %function
get_ether_addr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, r9, r10, lr}
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	subs	r5, r0, #0
	mov	r4, r1
	subne	r6, r1, #1
	addne	r9, r1, #5
	bne	.L4963
.L4964:
	mov	r0, r4
	mov	r1, #6
	bl	get_random_bytes
	ldrb	r3, [r4]	@ zero_extendqisi2
	mov	r0, #1
	bic	r3, r3, #1
	orr	r3, r3, #2
	strb	r3, [r4]
	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
.L4963:
	ldrb	r3, [r5]	@ zero_extendqisi2
	mov	r8, r5
	cmp	r3, #58
	cmpne	r3, #46
	addeq	r8, r5, #1
	mov	r5, r8
	ldrb	r0, [r5], #2	@ zero_extendqisi2
	bl	hex_to_bin
	mov	r7, r0
	ldrb	r0, [r8, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, r7, lsl #4
	strb	r0, [r6, #1]!
	cmp	r9, r6
	bne	.L4963
	ldrb	r3, [r4]	@ zero_extendqisi2
	ands	r0, r3, #1
	bne	.L4964
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	ldrb	lr, [r4, #2]	@ zero_extendqisi2
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	ldrb	r1, [r4, #4]	@ zero_extendqisi2
	orr	r3, r3, r2
	ldrb	r2, [r4, #5]	@ zero_extendqisi2
	orr	r3, r3, lr
	orr	r3, r3, ip
	orr	r3, r3, r1
	orrs	r3, r3, r2
	beq	.L4964
	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
	.fnend
	.size	get_ether_addr, .-get_ether_addr
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_lun_open, %function
fsg_lun_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r4, [r0, #24]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ands	r4, r4, #1
	beq	.L4972
.L4974:
	mov	r2, #0
	mov	r1, #131072
	mov	r0, r7
	mov	r4, #1
	bl	filp_open
	mov	r5, r0
	cmn	r5, #4096
	bhi	.L5019
.L4975:
	ldr	r3, [r5, #12]
	ldr	r2, [r5, #36]
	tst	r2, #2
	moveq	r4, #1
	cmp	r3, #0
	beq	.L4978
	ldr	r2, [r3, #32]
	cmp	r2, #0
	beq	.L4978
	ldrh	r3, [r2]
	and	r3, r3, #61440
	sub	r3, r3, #24576
	tst	r3, #53248
	beq	.L4979
.L4978:
	movw	r1, #:lower16:.LC408
	mov	r2, r7
	add	r0, r6, #48
	movt	r1, #:upper16:.LC408
	mvn	r8, #21
	bl	_dev_info
.L4980:
	mov	r3, sp
	mov	r0, r5
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #1024]
	bl	filp_close
.L4971:
	mov	r0, r8
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4979:
	ldr	r3, [r5, #16]
	cmp	r3, #0
	beq	.L4981
	ldr	r1, [r3, #8]
	cmp	r1, #0
	beq	.L5020
.L4982:
	ldr	r1, [r3, #12]
	cmp	r1, #0
	beq	.L5021
.L4983:
	ldr	r3, [r2, #32]
	ldr	r3, [r3]
.L5018:
	ldr	r1, [r3, #104]
	tst	r1, #1
	bne	.L4985
	.syntax divided
@ 165 "/home/Jprimero15/hlte/lolz/include/linux/seqlock.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldrd	r8, [r3, #96]
	.syntax divided
@ 221 "/home/Jprimero15/hlte/lolz/include/linux/seqlock.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r3, #104]
	cmp	r0, r1
	bne	.L5018
	cmp	r8, #0
	sbcs	r3, r9, #0
	blt	.L5022
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	tst	r3, #8
	beq	.L4988
	lsr	r2, r8, #11
	mov	r1, #11
	movw	r10, #65502
	orr	r2, r2, r9, lsl #21
	movt	r10, 255
	str	r1, [r6, #40]
	asr	r3, r9, r1
	mov	fp, #0
	cmp	r10, r2
	mov	r0, #2048
	sbcs	r1, fp, r3
	str	r0, [r6, #44]
	blt	.L4989
	mov	r0, #300
	mov	r1, #0
.L4990:
	cmp	r2, r0
	sbcs	r1, r3, r1
	blt	.L5023
.L4995:
	add	r1, r5, #28
	.syntax divided
@ 45 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r0, [r1]
	add	r0, r0, #1
	strex	ip, r0, [r1]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldrb	r1, [r6, #24]	@ zero_extendqisi2
	str	r5, [r6]
	ldr	r0, .L5024
	strd	r8, [r6, #8]
	strd	r2, [r6, #16]
	bfi	r1, r4, #1, #1
	strb	r1, [r6, #24]
	ldrh	r8, [r0, #-14]
	ubfx	r8, r8, #2, #1
	cmp	r8, #0
	beq	.L4980
	movw	r2, #:lower16:.LC414
	mov	r3, r7
	add	r1, r6, #48
	movt	r2, #:upper16:.LC414
	sub	r0, r0, #32
	mov	r8, #0
	bl	__dynamic_dev_dbg
	b	.L4980
.L4972:
	mov	r1, #2
	mov	r2, r4
	movt	r1, 2
	mov	r0, r7
	bl	filp_open
	cmn	r0, #30
	cmnne	r0, #13
	mov	r5, r0
	beq	.L4974
	cmn	r5, #4096
	bls	.L4975
.L5019:
	movw	r1, #:lower16:.LC407
	mov	r2, r7
	add	r0, r6, #48
	movt	r1, #:upper16:.LC407
	mov	r8, r5
	bl	_dev_info
	b	.L4971
.L5020:
	ldr	r1, [r3, #16]
	cmp	r1, #0
	bne	.L4982
.L4981:
	movw	r1, #:lower16:.LC409
	mov	r2, r7
	add	r0, r6, #48
	movt	r1, #:upper16:.LC409
	bl	_dev_info
	mvn	r8, #21
	b	.L4980
.L4988:
	ldr	r3, [r2, #312]
	cmp	r3, #0
	beq	.L4991
	ldr	r3, [r3, #88]
	ldr	r3, [r3, #492]
	cmp	r3, #0
	moveq	r3, #512
	beq	.L4992
	add	r3, r3, #776
	ldrh	r3, [r3]
	cmp	r3, #0
	moveq	r3, #512
.L4992:
	mov	r1, #8
	str	r3, [r6, #44]
.L4993:
	lsr	r3, r3, #1
	add	r1, r1, #1
	cmp	r3, #256
	bhi	.L4993
	str	r1, [r6, #40]
.L4994:
	rsb	r0, r1, #32
	lsr	r2, r8, r1
	subs	ip, r1, #32
	orr	r2, r2, r9, lsl r0
	mov	r0, #1
	asr	r3, r9, r1
	orrpl	r2, r2, r9, asr ip
	mov	r1, #0
	b	.L4990
.L5021:
	ldr	r3, [r3, #20]
	cmp	r3, #0
	moveq	r4, #1
	b	.L4983
.L5023:
	movw	r1, #:lower16:.LC413
	mov	r2, r7
	add	r0, r6, #48
	movt	r1, #:upper16:.LC413
	bl	_dev_info
	mvn	r8, #524
	b	.L4980
.L5022:
	movw	r1, #:lower16:.LC410
	mov	r2, r7
	add	r0, r6, #48
	movt	r1, #:upper16:.LC410
	bl	_dev_info
	b	.L4980
.L4989:
	add	r3, r6, #48
	movw	r1, #:lower16:.LC411
	mov	r0, r3
	movt	r1, #:upper16:.LC411
	mov	r2, r7
	str	r3, [sp, #4]
	bl	_dev_info
	ldr	r3, [sp, #4]
	movw	r2, #65502
	movw	r1, #:lower16:.LC412
	movt	r2, 255
	movt	r1, #:upper16:.LC412
	mov	r0, r3
	bl	_dev_info
	mov	r2, r10
	mov	r3, fp
	b	.L4995
.L4985:
	.syntax divided
@ 147 "/home/Jprimero15/hlte/lolz/include/linux/seqlock.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	b	.L5018
.L4991:
	mov	r3, #512
	mov	r1, #9
	str	r1, [r6, #40]
	str	r3, [r6, #44]
	b	.L4994
.L5025:
	.align	2
.L5024:
	.word	.LANCHOR4-3664
	.fnend
	.size	fsg_lun_open, .-fsg_lun_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_cleanup, %function
conn_gadget_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC415
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r1, .L5034
	movt	r0, #:upper16:.LC415
	str	lr, [sp, #4]
	movw	r4, #:lower16:.LANCHOR1
	bl	printk
	movw	r0, #:lower16:.LC416
	movt	r4, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC416
	bl	printk
	ldr	r3, [r4, #2484]
	cmp	r3, #0
	beq	.L5033
	ldr	r0, .L5034+4
	bl	misc_deregister
	ldr	r0, [r4, #2484]
	ldr	r3, [r0, #188]
	cmp	r3, #0
	beq	.L5028
	mov	r0, r3
	bl	vfree
	ldr	r0, [r4, #2484]
.L5028:
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #2484]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5033:
	movw	r0, #:lower16:.LC417
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC417
	add	sp, sp, #8
	ldr	r1, .L5034+8
	b	printk
.L5035:
	.align	2
.L5034:
	.word	.LANCHOR3+3300
	.word	.LANCHOR0+936
	.word	.LANCHOR3+3332
	.fnend
	.size	conn_gadget_function_cleanup, .-conn_gadget_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_init, %function
conn_gadget_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC418
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r1, .L5053
	movt	r0, #:upper16:.LC418
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	printk
	movw	r0, #:lower16:.LC419
	movt	r0, #:upper16:.LC419
	bl	printk
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L5042
	mov	r2, #220
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L5050
.L5037:
	mov	r5, #0
	movw	r1, #:lower16:.LC372
	ldr	r2, .L5053+4
	movt	r1, #:upper16:.LC372
	add	r0, r4, #144
	str	r5, [r4, #88]
	movw	r6, #:lower16:.LANCHOR1
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC373
	ldr	r2, .L5053+4
	add	r0, r4, #156
	movt	r1, #:upper16:.LC373
	movt	r6, #:upper16:.LANCHOR1
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC421
	ldr	r2, .L5053+4
	add	r0, r4, #200
	movt	r1, #:upper16:.LC421
	bl	__init_waitqueue_head
	add	r1, r4, #128
	add	r0, r4, #120
	str	r5, [r4, #108]
	add	r2, r4, #136
	mov	r3, #262144
	str	r5, [r4, #112]
	mov	ip, #4096
	str	r5, [r4, #116]
	str	r0, [r4, #120]
	strd	r0, [r4, #124]
	mov	r0, r3
	str	r1, [r4, #132]
	str	r2, [r4, #136]
	str	r2, [r4, #140]
	str	ip, [r4, #192]
	str	r3, [r4, #196]
	str	r5, [r4, #216]
	bl	vmalloc
	cmp	r0, r5
	mov	r1, r0
	str	r0, [r4, #188]
	beq	.L5051
	mov	r3, #1
	ldr	r2, [r4, #196]
	add	r0, r4, #168
	bl	__kfifo_init
	ldr	r0, .L5053+8
	str	r4, [r6, #2484]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L5052
.L5036:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5042:
	mov	r4, #16
	b	.L5037
.L5052:
	movw	r0, #:lower16:.LC423
	mov	r2, r5
	ldr	r1, .L5053+12
	movt	r0, #:upper16:.LC423
	bl	printk
.L5040:
	ldr	r0, [r4, #188]
	cmp	r0, #0
	beq	.L5041
	bl	vfree
.L5041:
	mov	r3, #0
	mov	r0, r4
	str	r3, [r6, #2484]
	bl	kfree
	movw	r0, #:lower16:.LC424
	ldr	r1, .L5053+12
	movt	r0, #:upper16:.LC424
	bl	printk
	b	.L5036
.L5051:
	movw	r0, #:lower16:.LC422
	ldr	r1, .L5053+12
	mvn	r5, #11
	movt	r0, #:upper16:.LC422
	bl	printk
	b	.L5040
.L5050:
	movw	r0, #:lower16:.LC420
	mvn	r5, #11
	movt	r0, #:upper16:.LC420
	bl	printk
	b	.L5036
.L5054:
	.align	2
.L5053:
	.word	.LANCHOR3+3352
	.word	.LANCHOR1+3636
	.word	.LANCHOR0+936
	.word	.LANCHOR3+3380
	.fnend
	.size	conn_gadget_function_init, .-conn_gadget_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_usb_buffer_size_store, %function
conn_gadget_usb_buffer_size_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r6, r3
	str	lr, [sp, #16]
	ldr	r3, [r5, #2484]
	.pad #12
	sub	sp, sp, #12
	cmp	r3, #0
	beq	.L5065
	ldr	r3, [r3, #100]
	cmp	r3, #0
	bne	.L5066
	movw	r1, #:lower16:.LC427
	mov	r0, r2
	movt	r1, #:upper16:.LC427
	add	r2, sp, #4
	bl	sscanf
	ldr	r4, [sp, #4]
	lsl	r4, r4, #16
	mov	r0, r4
	bl	vmalloc
	subs	r7, r0, #0
	beq	.L5067
	ldr	ip, [r5, #2484]
	ldr	r0, [ip, #188]
	cmp	r0, #0
	beq	.L5060
	bl	vfree
	ldr	ip, [r5, #2484]
.L5060:
	ldr	lr, [sp, #4]
	mov	r5, #0
	mov	r0, ip
	mov	r1, r7
	mov	r2, r4
	str	r5, [ip, #172]
	mov	r3, #1
	str	r7, [ip, #188]
	lsl	lr, lr, #10
	str	lr, [ip, #192]
	str	r4, [ip, #196]
	str	r5, [r0, #168]!
	bl	__kfifo_init
.L5055:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L5065:
	movw	r0, #:lower16:.LC425
	ldr	r1, .L5068
	movt	r0, #:upper16:.LC425
	bl	printk
	b	.L5055
.L5067:
	movw	r0, #:lower16:.LC428
	ldr	r1, .L5068
	movt	r0, #:upper16:.LC428
	bl	printk
	b	.L5055
.L5066:
	movw	r0, #:lower16:.LC426
	ldr	r1, .L5068
	movt	r0, #:upper16:.LC426
	bl	printk
	b	.L5055
.L5069:
	.align	2
.L5068:
	.word	.LANCHOR3+3400
	.fnend
	.size	conn_gadget_usb_buffer_size_store, .-conn_gadget_usb_buffer_size_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	remote_wakeup_store, %function
remote_wakeup_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r3
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	add	r2, sp, #8
	mov	r3, #0
	movw	r1, #:lower16:.LC427
	mov	r4, r0
	str	r3, [r2, #-4]!
	mov	r0, r6
	movt	r1, #:upper16:.LC427
	bl	sscanf
	ldr	r0, .L5086
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L5085
.L5071:
	mov	r0, r4
	ldr	r3, [r0, #508]!
	cmp	r0, r3
	sub	r3, r3, #120
	beq	.L5073
	ldr	r2, [sp, #4]
	cmp	r2, #0
	bne	.L5074
.L5075:
	ldrb	r2, [r3, #22]	@ zero_extendqisi2
	ldr	r1, [r3, #120]
	bic	r2, r2, #32
	cmp	r0, r1
	strb	r2, [r3, #22]
	sub	r3, r1, #120
	bne	.L5075
.L5073:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5074:
	ldrb	r2, [r3, #22]	@ zero_extendqisi2
	ldr	r1, [r3, #120]
	orr	r2, r2, #32
	cmp	r0, r1
	strb	r2, [r3, #22]
	sub	r3, r1, #120
	bne	.L5074
	b	.L5073
.L5085:
	ldr	lr, [sp, #4]
	movw	ip, #:lower16:.LC429
	movw	r3, #:lower16:.LC430
	movt	ip, #:upper16:.LC429
	movw	r1, #:lower16:.LC431
	ldr	r2, .L5086+4
	movt	r3, #:upper16:.LC430
	movt	r1, #:upper16:.LC431
	sub	r0, r0, #24
	cmp	lr, #0
	movne	r3, ip
	bl	__dynamic_pr_debug
	b	.L5071
.L5087:
	.align	2
.L5086:
	.word	.LANCHOR4-3648
	.word	.LANCHOR3+3436
	.fnend
	.size	remote_wakeup_store, .-remote_wakeup_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceProtocol_store, %function
bDeviceProtocol_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC77
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC77
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L5090
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strb	r2, [r3, #142]
.L5088:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5090:
	mvn	r0, #0
	b	.L5088
	.fnend
	.size	bDeviceProtocol_store, .-bDeviceProtocol_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceSubClass_store, %function
bDeviceSubClass_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC77
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC77
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L5094
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strb	r2, [r3, #141]
.L5092:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5094:
	mvn	r0, #0
	b	.L5092
	.fnend
	.size	bDeviceSubClass_store, .-bDeviceSubClass_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceClass_store, %function
bDeviceClass_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC77
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC77
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L5098
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strb	r2, [r3, #140]
.L5096:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5098:
	mvn	r0, #0
	b	.L5096
	.fnend
	.size	bDeviceClass_store, .-bDeviceClass_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bcdDevice_store, %function
bcdDevice_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC85
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC85
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L5102
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strh	r2, [r3, #148]	@ movhi
.L5100:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5102:
	mvn	r0, #0
	b	.L5100
	.fnend
	.size	bcdDevice_store, .-bcdDevice_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	idProduct_store, %function
idProduct_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC85
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC85
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L5106
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strh	r2, [r3, #146]	@ movhi
.L5104:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5106:
	mvn	r0, #0
	b	.L5104
	.fnend
	.size	idProduct_store, .-idProduct_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	idVendor_store, %function
idVendor_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC85
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC85
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L5110
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strh	r2, [r3, #144]	@ movhi
.L5108:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5110:
	mvn	r0, #0
	b	.L5108
	.fnend
	.size	idVendor_store, .-idVendor_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_product_store, %function
mass_storage_product_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r4, #16
	ldr	r5, [r0, #4]
	bhi	.L5115
	ldr	r2, [r5, #96]
	movw	r1, #:lower16:.LC84
	mov	r0, r6
	movt	r1, #:upper16:.LC84
	add	r2, r2, #218
	bl	sscanf
	cmp	r0, #1
	beq	.L5117
.L5115:
	mvn	r0, #21
.L5112:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5117:
	ldr	r2, [r5, #96]
	movw	r0, #:lower16:.LC432
	movt	r0, #:upper16:.LC432
	ldr	r1, .L5118
	add	r2, r2, #218
	bl	printk
	mov	r0, r4
	b	.L5112
.L5119:
	.align	2
.L5118:
	.word	.LANCHOR3+3456
	.fnend
	.size	mass_storage_product_store, .-mass_storage_product_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_vendor_store, %function
mass_storage_vendor_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r4, #8
	ldr	r5, [r0, #4]
	bhi	.L5123
	ldr	r2, [r5, #96]
	movw	r1, #:lower16:.LC84
	mov	r0, r6
	movt	r1, #:upper16:.LC84
	add	r2, r2, #209
	bl	sscanf
	cmp	r0, #1
	beq	.L5125
.L5123:
	mvn	r0, #21
.L5120:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5125:
	ldr	r2, [r5, #96]
	movw	r0, #:lower16:.LC433
	movt	r0, #:upper16:.LC433
	ldr	r1, .L5126
	add	r2, r2, #209
	bl	printk
	mov	r0, r4
	b	.L5120
.L5127:
	.align	2
.L5126:
	.word	.LANCHOR3+3484
	.fnend
	.size	mass_storage_vendor_store, .-mass_storage_vendor_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_inquiry_store, %function
mass_storage_inquiry_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r4, #28
	ldr	r3, [r0, #4]
	bhi	.L5131
	ldr	r2, [r3, #96]
	movw	r1, #:lower16:.LC434
	mov	r0, r5
	movt	r1, #:upper16:.LC434
	add	r2, r2, #180
	bl	sscanf
	cmp	r0, #1
	bne	.L5131
	mov	r0, r4
.L5128:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5131:
	mvn	r0, #21
	b	.L5128
	.fnend
	.size	mass_storage_inquiry_store, .-mass_storage_inquiry_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_ethaddr_store, %function
ecm_ethaddr_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r2
	mov	r4, r3
	str	lr, [sp, #8]
	.pad #20
	sub	sp, sp, #20
	bl	dev_get_drvdata
	ldr	r2, [r0, #4]
	mov	r0, r5
	movw	r1, #:lower16:.LC87
	movt	r1, #:upper16:.LC87
	add	r3, r2, #3
	add	ip, r2, #5
	add	r5, r2, #4
	add	lr, r2, #2
	str	lr, [sp]
	stmib	sp, {r3, r5, ip}
	add	r3, r2, #1
	bl	sscanf
	cmp	r0, #6
	moveq	r0, r4
	mvnne	r0, #21
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_ethaddr_store, .-ecm_ethaddr_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_max_pkt_per_xfer_store, %function
rndis_max_pkt_per_xfer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	movw	r1, #:lower16:.LC427
	ldr	r6, [r0, #4]
	add	r2, sp, #4
	movt	r1, #:upper16:.LC427
	mov	r0, r5
	bl	sscanf
	cmp	r0, #1
	ldreq	r3, [sp, #4]
	moveq	r0, r4
	mvnne	r0, #21
	strbeq	r3, [r6, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_max_pkt_per_xfer_store, .-rndis_max_pkt_per_xfer_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_vendorID_store, %function
rndis_vendorID_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	movw	r1, #:lower16:.LC435
	ldr	r6, [r0, #4]
	add	r2, sp, #4
	movt	r1, #:upper16:.LC435
	mov	r0, r5
	bl	sscanf
	cmp	r0, #1
	ldreq	r3, [sp, #4]
	moveq	r0, r4
	mvnne	r0, #21
	streq	r3, [r6, #8]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_vendorID_store, .-rndis_vendorID_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_wceis_store, %function
rndis_wceis_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	mov	r4, r3
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	movw	r1, #:lower16:.LC427
	ldr	r6, [r0, #4]
	add	r2, sp, #4
	movt	r1, #:upper16:.LC427
	mov	r0, r5
	bl	sscanf
	cmp	r0, #1
	bne	.L5147
	ldr	r3, [sp, #4]
	mov	r0, r4
	adds	r3, r3, #0
	movne	r3, #1
	strb	r3, [r6, #269]
.L5145:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5147:
	mvn	r0, #21
	b	.L5145
	.fnend
	.size	rndis_wceis_store, .-rndis_wceis_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_manufacturer_store, %function
rndis_manufacturer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r4, #255
	ldr	r2, [r0, #4]
	bhi	.L5151
	movw	r1, #:lower16:.LC436
	add	r2, r2, #13
	mov	r0, r5
	movt	r1, #:upper16:.LC436
	bl	sscanf
	cmp	r0, #1
	moveq	r0, r4
	mvnne	r0, #0
.L5149:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5151:
	mvn	r0, #21
	b	.L5149
	.fnend
	.size	rndis_manufacturer_store, .-rndis_manufacturer_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_instances_store, %function
acm_instances_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r3
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	movw	r1, #:lower16:.LC427
	ldr	r4, [r0, #4]
	add	r2, sp, #4
	movt	r1, #:upper16:.LC427
	mov	r0, r6
	bl	sscanf
	ldr	r2, [sp, #4]
	mov	r0, r5
	cmp	r2, #4
	movge	r2, #4
	str	r2, [r4]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	acm_instances_store, .-acm_instances_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_unwrap_ntb, %function
ncm_unwrap_ntb:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r7, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r0, #176]
	.pad #44
	sub	sp, sp, #44
	ldr	r1, [r1, #172]
	ldrb	r3, [r0, #180]	@ zero_extendqisi2
	ldr	r0, [r6]
	ldr	r2, [r1]	@ unaligned
	cmp	r3, #0
	moveq	fp, #14
	movne	fp, #18
	moveq	r8, #0
	movne	r8, #4
	cmp	r0, r2
	bne	.L5208
	ldrb	ip, [r1, #5]	@ zero_extendqisi2
	ldrb	r0, [r1, #4]	@ zero_extendqisi2
	ldr	r2, [r6, #8]
	orr	r0, r0, ip, lsl #8
	cmp	r0, r2
	bne	.L5209
	ldr	ip, [r6, #24]
	add	r9, r1, #8
	cmp	ip, #1
	beq	.L5162
	cmp	ip, #2
	ldreq	lr, [r1, #8]	@ unaligned
	bne	.L5203
.L5164:
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	ldr	r2, [r2, #36]
	cmp	r2, lr
	bcc	.L5210
	ldr	r2, [r6, #28]
	add	lr, r9, ip, lsl #1
	cmp	r2, #1
	beq	.L5167
	cmp	r2, #2
	ldreq	r2, [lr]	@ unaligned
	bne	.L5203
.L5169:
	cmp	r0, r2
	movls	r0, #0
	movhi	r0, #1
	ands	ip, r2, #3
	movne	ip, r0
	cmp	ip, #0
	bne	.L5211
	add	r1, r1, r2
	ldr	r0, [r6, #4]
	ldr	r2, [r1]	@ unaligned
	cmp	r0, r2
	beq	.L5171
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC443
	mvn	r5, #21
	movt	r1, #:upper16:.LC443
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L5159
.L5209:
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC440
	mvn	r5, #21
	movt	r1, #:upper16:.LC440
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
.L5159:
	mov	r0, r7
	bl	skb_queue_purge
	mov	r0, r4
	bl	dev_kfree_skb_any
.L5156:
	mov	r0, r5
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5208:
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC437
	mvn	r5, #21
	ldr	r2, [r4, #80]
	movt	r1, #:upper16:.LC437
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	ldr	r0, [r4, #172]
	mov	ip, #0
	mov	r3, #32
	mov	r2, #1
	movw	r1, #:lower16:.LC438
	movt	r1, #:upper16:.LC438
	str	r2, [sp]
	stmib	sp, {r0, r3, ip}
	movw	r0, #:lower16:.LC439
	movt	r0, #:upper16:.LC439
	bl	print_hex_dump
	b	.L5159
.L5162:
	ldrb	r2, [r1, #9]	@ zero_extendqisi2
	ldrb	lr, [r1, #8]	@ zero_extendqisi2
	orr	lr, lr, r2, lsl #8
	b	.L5164
.L5167:
	ldrb	lr, [lr, #1]	@ zero_extendqisi2
	ldrb	r2, [r9, ip, lsl #1]	@ zero_extendqisi2
	orr	r2, r2, lr, lsl #8
	b	.L5169
.L5210:
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC441
	mvn	r5, #21
	movt	r1, #:upper16:.LC441
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L5159
.L5171:
	ldrb	ip, [r1, #5]	@ zero_extendqisi2
	ldrb	r2, [r1, #4]	@ zero_extendqisi2
	ldr	lr, [r6, #12]
	ldr	r0, [r6, #20]
	orr	r2, r2, ip, lsl #8
	add	ip, lr, r0, lsl #3
	cmp	ip, r2
	bhi	.L5172
	ldr	r9, [r6, #16]
	udiv	ip, r2, r9
	mls	ip, r9, ip, r2
	cmp	ip, #0
	bne	.L5172
	ldr	ip, [r6, #32]
	sub	r3, r2, lr
	cmp	r0, #1
	ldr	r2, [r6, #36]
	add	r1, r1, #6
	ldr	r9, [r6, #40]
	str	r3, [sp, #16]
	add	lr, ip, r9
	add	lr, lr, r2
	add	ip, r1, lr, lsl #1
	beq	.L5175
	cmp	r0, #2
	bne	.L5203
	ldr	r3, [ip, #4]	@ unaligned
	mov	r2, ip
	mov	r1, #4
	str	r3, [sp, #36]
	ldr	r3, [r2], #4	@ unaligned
.L5177:
	ldr	r10, [sp, #16]
	add	r9, r2, r1
	str	r7, [sp, #16]
	str	r4, [sp, #20]
	ldr	r7, [sp, #36]
	str	r6, [sp, #24]
	str	r5, [sp, #28]
	str	fp, [sp, #32]
	b	.L5187
.L5216:
	mov	r1, #32
	ldr	r0, [sp, #20]
	str	r3, [sp, #36]
	bl	skb_clone
	subs	fp, r0, #0
	ldr	r3, [sp, #36]
	beq	.L5212
	mov	r1, r3
	bl	skb_pull
	cmp	r0, #0
	beq	.L5213
	sub	r1, r7, r8
	mov	r0, fp
	bl	skb_trim
	ldr	r0, [sp, #16]
	mov	r1, fp
	mov	r7, r5
	bl	skb_queue_tail
	ldr	r3, [sp, #24]
	ldr	r0, [r3, #20]
	mov	r3, r6
	lsl	r2, r0, #2
	sub	r10, r10, r2
	cmp	r2, r10
	bcs	.L5207
.L5187:
	ldr	r2, [sp, #32]
	cmp	r7, r2
	bcc	.L5214
	ldr	r2, [sp, #28]
	ldrb	r2, [r2, #180]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L5215
.L5179:
	cmp	r0, #1
	beq	.L5182
	cmp	r0, #2
	bne	.L5203
	mov	r2, r9
	ldr	r5, [r9, #4]	@ unaligned
	mov	r1, #4
	ldr	r6, [r2], #4	@ unaligned
.L5184:
	clz	r4, r5
	cmp	r6, #0
	lsr	r4, r4, #5
	moveq	r4, #1
	add	r9, r2, r1
	cmp	r4, #0
	beq	.L5216
	ldr	r4, [sp, #20]
	mov	r1, r3
	str	r7, [sp, #36]
	ldr	r7, [sp, #16]
	mov	r0, r4
	bl	skb_pull
	cmp	r0, #0
	bne	.L5217
.L5190:
	mvn	r5, #74
	b	.L5159
.L5172:
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC444
	movt	r1, #:upper16:.LC444
.L5206:
	ldr	r3, [r3, #24]
	mvn	r5, #21
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L5159
.L5182:
	mov	r2, r9
	ldrb	ip, [r9, #1]	@ zero_extendqisi2
	mov	r1, #2
	ldrb	r6, [r2], #2	@ zero_extendqisi2
	ldrb	r0, [r9, #3]	@ zero_extendqisi2
	ldrb	r5, [r9, #2]	@ zero_extendqisi2
	orr	r6, r6, ip, lsl #8
	orr	r5, r5, r0, lsl #8
	b	.L5184
.L5215:
	ldr	r2, [sp, #20]
	add	ip, r3, r7
	mvn	r0, #0
	sub	ip, ip, r8
	str	r3, [sp, #36]
	ldr	r1, [r2, #172]
	sub	r2, r7, r8
	ldr	r4, [r1, ip]	@ unaligned
	add	r1, r1, r3
	bl	crc32_le
	mvn	r0, r0
	cmp	r0, r4
	bne	.L5180
	ldr	r3, [sp, #24]
	ldr	r0, [r3, #20]
	ldr	r3, [sp, #36]
	b	.L5179
.L5211:
	movw	r1, #:lower16:.LC442
	ldr	r3, [r5, #20]
	movt	r1, #:upper16:.LC442
	b	.L5206
.L5175:
	ldrb	r9, [r1, lr, lsl #1]	@ zero_extendqisi2
	add	r2, ip, #2
	mov	r1, #2
	ldrb	r10, [ip, #1]	@ zero_extendqisi2
	ldrb	lr, [ip, #3]	@ zero_extendqisi2
	ldrb	ip, [ip, #2]	@ zero_extendqisi2
	orr	r3, r9, r10, lsl #8
	orr	ip, ip, lr, lsl #8
	str	ip, [sp, #36]
	b	.L5177
.L5217:
	ldr	r3, [sp, #36]
	mov	r0, r4
	sub	r1, r3, r8
	bl	skb_trim
	mov	r1, r4
	mov	r0, r7
	bl	skb_queue_tail
.L5207:
	mov	r5, #0
	b	.L5156
.L5214:
	movw	r1, #:lower16:.LC445
	mov	r2, r7
	ldr	r7, [sp, #16]
	ldr	r5, [sp, #28]
	movt	r1, #:upper16:.LC445
	ldr	r4, [sp, #20]
	ldr	r3, [r5, #20]
	b	.L5206
.L5212:
	mvn	r5, #21
	ldr	r7, [sp, #16]
	ldr	r4, [sp, #20]
	b	.L5159
.L5180:
	movw	r1, #:lower16:.LC446
	ldr	r7, [sp, #16]
	ldr	r5, [sp, #28]
	movt	r1, #:upper16:.LC446
	ldr	r4, [sp, #20]
	ldr	r3, [r5, #20]
	mvn	r5, #21
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L5159
.L5203:
	.syntax divided
@ 463 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_ncm.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_ncm.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 463, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L5213:
	ldr	r7, [sp, #16]
	ldr	r4, [sp, #20]
	b	.L5190
	.fnend
	.size	ncm_unwrap_ntb, .-ncm_unwrap_ntb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_wrap_ntb, %function
ncm_wrap_ntb:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	mov	r9, r0
	movw	r0, #:lower16:.LANCHOR0
	strd	r10, [sp, #24]
	movt	r0, #:upper16:.LANCHOR0
	str	lr, [sp, #32]
	ldr	r5, [r9, #176]
	.pad #20
	sub	sp, sp, #20
	ldrh	ip, [r0, #32]
	ldrh	r1, [r0, #28]
	ldrh	r0, [r0, #30]
	ldr	r8, [r5, #8]
	ldr	r3, [r5, #12]
	sub	r2, ip, #1
	rsb	ip, ip, #0
	ldr	lr, [r5, #20]
	sub	r4, r1, #1
	rsb	r1, r1, #0
	add	r2, r2, r8
	and	r2, r2, ip
	ldrb	ip, [r9, #180]	@ zero_extendqisi2
	add	r3, r3, lr, lsl #3
	sub	r8, r2, r8
	add	r3, r3, r2
	ldr	r2, [r6, #80]
	add	r4, r4, r3
	cmp	ip, #0
	and	r4, r4, r1
	ldr	r1, [r9, #112]
	moveq	r10, #0
	add	r4, r4, r0
	movne	r10, #4
	sub	r3, r4, r3
	add	r2, r4, r2
	str	r3, [sp, #4]
	add	r3, r2, r10
	cmp	r3, r1
	bhi	.L5257
	bcc	.L5258
.L5245:
	mov	fp, #0
	str	fp, [sp, #8]
.L5222:
	mov	r3, #32
	mov	r2, fp
	mov	r1, r4
	mov	r0, r6
	bl	skb_copy_expand
	mov	r7, r0
	mov	r0, r6
	bl	dev_kfree_skb_any
	cmp	r7, #0
	beq	.L5259
	mov	r1, r4
	mov	r0, r7
	bl	skb_push
	cmp	r4, #0
	mov	r6, r0
	bne	.L5260
.L5224:
	ldr	r3, [r5]
	add	ip, r6, #8
	lsr	r2, r3, #16
	strb	r3, [r6]
	ubfx	r1, r3, #8, #8
	lsr	r3, r2, #8
	strb	r1, [r6, #1]
	strb	r2, [r6, #2]
	strb	r3, [r6, #3]
	ldr	r3, [r5, #8]
	ubfx	r2, r3, #8, #8
	strb	r3, [r6, #4]
	strb	r2, [r6, #5]
	ldr	r0, [r5, #24]
	ldr	r3, [r7, #80]
	cmp	r0, #1
	add	fp, fp, r3
	beq	.L5226
	cmp	r0, #2
	bne	.L5255
	lsr	r3, fp, #16
	ubfx	r2, fp, #8, #8
	strb	fp, [r6, #8]
	lsr	r1, r3, #8
	strb	r2, [r6, #9]
	strb	r3, [r6, #10]
	strb	r1, [r6, #11]
.L5228:
	ldr	r2, [r5, #8]
	add	r1, ip, r0, lsl #1
	ldr	r3, [r5, #28]
	add	r2, r8, r2
	cmp	r3, #1
	beq	.L5230
	cmp	r3, #2
	bne	.L5255
	lsr	lr, r2, #16
	ubfx	r6, r2, #8, #8
	lsr	fp, lr, #8
	strb	lr, [r1, #2]
	strb	fp, [r1, #3]
	strb	r2, [ip, r0, lsl #1]
	strb	r6, [r1, #1]
.L5232:
	ldr	r0, [r5, #4]
	add	r3, r8, r3, lsl #1
	uxth	r6, r4
	add	r2, r1, r3
	add	fp, r2, #6
	lsr	r8, r0, #16
	ubfx	ip, r0, #8, #8
	lsr	lr, r8, #8
	strb	r8, [r2, #2]
	strb	lr, [r2, #3]
	strb	r0, [r1, r3]
	ldr	r1, [sp, #4]
	strb	ip, [r2, #1]
	ldr	r3, [r5, #8]
	sub	r3, r6, r3
	sub	r3, r3, r1
	uxth	r3, r3
	lsr	r1, r3, #8
	strb	r3, [r2, #4]
	strb	r1, [r2, #5]
	ldrb	r1, [r9, #180]	@ zero_extendqisi2
	ldr	r8, [r5, #32]
	ldr	r3, [r5, #36]
	ldr	r2, [r5, #40]
	cmp	r1, #0
	add	r8, r8, r2
	add	r8, r8, r3
	add	r9, fp, r8, lsl #1
	bne	.L5261
.L5233:
	ldr	r2, [r5, #20]
	cmp	r2, #1
	beq	.L5235
	cmp	r2, #2
	bne	.L5255
	lsr	r3, r4, #16
	lsr	r6, r6, #8
	lsr	r1, r3, #8
	strb	r3, [r9, #2]
	strb	r1, [r9, #3]
	strb	r4, [fp, r8, lsl #1]
	strb	r6, [r9, #1]
.L5237:
	ldr	r0, [r5, #20]
	add	r1, r9, r2, lsl #1
	ldr	r3, [r7, #80]
	cmp	r0, #1
	sub	r4, r3, r4
	beq	.L5239
	cmp	r0, #2
	bne	.L5255
	lsr	r3, r4, #16
	ubfx	r0, r4, #8, #8
	lsr	ip, r3, #8
	strb	r3, [r1, #2]
	strb	ip, [r1, #3]
	strb	r4, [r9, r2, lsl #1]
	strb	r0, [r1, #1]
.L5241:
	ldr	r3, [sp, #8]
	cmp	r3, #0
	bne	.L5242
.L5218:
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5258:
	ldr	r2, [r9, #88]
	ldr	r2, [r2, #28]
	ldrh	r1, [r2, #4]	@ unaligned
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	bne	.L5245
	movw	r0, #:lower16:.LC447
	mov	fp, #1
	movt	r0, #:upper16:.LC447
	bl	printk
	str	fp, [sp, #8]
	b	.L5222
.L5226:
	ubfx	r3, fp, #8, #8
	strb	fp, [r6, #8]
	strb	r3, [r6, #9]
	b	.L5228
.L5239:
	ubfx	r3, r4, #8, #8
	strb	r4, [r9, r2, lsl #1]
	strb	r3, [r1, #1]
	b	.L5241
.L5235:
	lsr	r6, r6, #8
	strb	r4, [fp, r8, lsl #1]
	strb	r6, [r9, #1]
	b	.L5237
.L5230:
	ubfx	lr, r2, #8, #8
	strb	r2, [ip, r0, lsl #1]
	strb	lr, [r1, #1]
	b	.L5232
.L5261:
	ldr	r2, [r7, #80]
	mvn	r0, #0
	ldr	r1, [r7, #172]
	sub	r2, r2, r4
	add	r1, r1, r4
	bl	crc32_le
	ldr	lr, [r7, #80]
	mvn	r2, r0
	mov	r1, r10
	ldr	r3, [r7, #172]
	lsr	ip, r2, #16
	ubfx	r0, r2, #8, #8
	lsr	r10, ip, #8
	str	r3, [sp, #4]
	add	r3, r3, lr
	str	r0, [sp, #12]
	mov	r0, r7
	strb	ip, [r3, #2]
	ldr	ip, [sp, #4]
	strb	r10, [r3, #3]
	strb	r2, [ip, lr]
	ldr	r2, [sp, #12]
	strb	r2, [r3, #1]
	bl	skb_put
	b	.L5233
.L5260:
	mov	r1, r4
	bl	__memzero
	b	.L5224
.L5257:
	mov	r0, r6
	mov	r7, #0
	bl	dev_kfree_skb_any
	b	.L5218
.L5255:
	.syntax divided
@ 445 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_ncm.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_ncm.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 445, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L5242:
	mov	r1, #1
	mov	r0, r7
	bl	skb_put
	mov	r1, #1
	bl	__memzero
	movw	r0, #:lower16:.LC449
	ldr	r1, .L5262
	ldr	r2, [r7, #80]
	movt	r0, #:upper16:.LC449
	bl	printk
	b	.L5218
.L5259:
	movw	r0, #:lower16:.LC448
	movt	r0, #:upper16:.LC448
	bl	printk
	b	.L5218
.L5263:
	.align	2
.L5262:
	.word	.LANCHOR3+3512
	.fnend
	.size	ncm_wrap_ntb, .-ncm_wrap_ntb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_start_work, %function
acc_start_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR0
	.save {lr}
	str	lr, [sp, #-4]!
	movw	r3, #:lower16:.LC450
	movt	r2, #:upper16:.LANCHOR0
	.pad #12
	sub	sp, sp, #12
	ldr	r0, [r2, #592]
	movt	r3, #:upper16:.LC450
	mov	ip, #0
	mov	r1, #2
	mov	r2, sp
	stm	sp, {r3, ip}
	add	r0, r0, #8
	bl	kobject_uevent_env
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
	.fnend
	.size	acc_start_work, .-acc_start_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_work, %function
ncm_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LC451
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	ip, #0
	str	lr, [sp, #4]
	movt	r2, #:upper16:.LC451
	.pad #16
	sub	sp, sp, #16
	movw	r3, #:lower16:.LC452
	movw	r4, #:lower16:.LANCHOR1
	ldr	r1, .L5270
	movt	r3, #:upper16:.LC452
	movt	r4, #:upper16:.LANCHOR1
	stm	sp, {r2, ip}
	movw	r0, #:lower16:.LC453
	ldrb	r2, [r4, #3636]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC453
	str	r3, [sp, #8]
	str	ip, [sp, #12]
	bl	printk
	ldrb	r3, [r4, #3636]	@ zero_extendqisi2
	mov	r1, #2
	cmp	r3, #0
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	addeq	r2, sp, #8
	ldr	r0, [r3, #772]
	movne	r2, sp
	add	r0, r0, #8
	bl	kobject_uevent_env
	add	sp, sp, #16
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5271:
	.align	2
.L5270:
	.word	.LANCHOR3+3528
	.fnend
	.size	ncm_work, .-ncm_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	macos_show, %function
macos_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	ldr	r3, [r0, #8]
	cmp	r3, #0
	beq	.L5273
	ldr	r0, [r3]
	bl	sec_get_ss_host_available
	mov	r4, r0
	bl	get_host_os_type
	cmp	r4, #1
	cmpeq	r0, #1
	mov	r3, r0
	movne	r6, #1
	beq	.L5278
.L5274:
	movw	r0, #:lower16:.LC455
	ldr	r1, .L5279
	mov	r2, r4
	movt	r0, #:upper16:.LC455
	bl	printk
.L5275:
	movw	r1, #:lower16:.LC77
	mov	r2, r6
	mov	r0, r5
	movt	r1, #:upper16:.LC77
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	sprintf
.L5273:
	movw	r0, #:lower16:.LC456
	ldr	r1, .L5279
	mvn	r6, #0
	movt	r0, #:upper16:.LC456
	bl	printk
	b	.L5275
.L5278:
	movw	r0, #:lower16:.LC454
	ldr	r1, .L5279
	str	r3, [sp, #4]
	movt	r0, #:upper16:.LC454
	mov	r6, #0
	bl	printk
	ldr	r3, [sp, #4]
	b	.L5274
.L5280:
	.align	2
.L5279:
	.word	.LANCHOR3+3540
	.fnend
	.size	macos_show, .-macos_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ss_host_available_show, %function
ss_host_available_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	ldr	r3, [r0, #8]
	cmp	r3, #0
	beq	.L5282
	ldr	r0, [r3]
	bl	sec_get_ss_host_available
	mov	r5, r0
	bl	get_host_os_type
	cmp	r5, #1
	cmpeq	r0, #1
	mov	r3, r0
	moveq	r4, #1
	movne	r4, #0
	beq	.L5287
.L5283:
	movw	r0, #:lower16:.LC455
	ldr	r1, .L5288
	mov	r2, r5
	movt	r0, #:upper16:.LC455
	bl	printk
.L5284:
	movw	r1, #:lower16:.LC77
	mov	r2, r4
	mov	r0, r6
	movt	r1, #:upper16:.LC77
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	sprintf
.L5282:
	movw	r0, #:lower16:.LC456
	ldr	r1, .L5288
	mvn	r4, #0
	movt	r0, #:upper16:.LC456
	bl	printk
	b	.L5284
.L5287:
	movw	r0, #:lower16:.LC454
	ldr	r1, .L5288
	str	r3, [sp, #4]
	movt	r0, #:upper16:.LC454
	mov	r4, #1
	bl	printk
	ldr	r3, [sp, #4]
	b	.L5283
.L5289:
	.align	2
.L5288:
	.word	.LANCHOR3+3552
	.fnend
	.size	ss_host_available_show, .-ss_host_available_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iSerial_store, %function
iSerial_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L5292
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L5297
	mov	r2, #256
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	ldr	r0, .L5297
	bl	strim
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5292:
	mvn	r0, #21
	bx	lr
.L5298:
	.align	2
.L5297:
	.word	.LANCHOR1+2220
	.fnend
	.size	iSerial_store, .-iSerial_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iProduct_store, %function
iProduct_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L5301
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L5306
	mov	r2, #256
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	ldr	r0, .L5306
	bl	strim
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5301:
	mvn	r0, #21
	bx	lr
.L5307:
	.align	2
.L5306:
	.word	.LANCHOR1+2508
	.fnend
	.size	iProduct_store, .-iProduct_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iManufacturer_store, %function
iManufacturer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L5310
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L5315
	mov	r2, #256
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	ldr	r0, .L5315
	bl	strim
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5310:
	mvn	r0, #21
	bx	lr
.L5316:
	.align	2
.L5315:
	.word	.LANCHOR1+2764
	.fnend
	.size	iManufacturer_store, .-iManufacturer_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_aliases_store, %function
ffs_aliases_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 264
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r4, #:lower16:__stack_chk_guard
	movt	r1, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r4, #:upper16:__stack_chk_guard
	str	r8, [sp, #16]
	mov	r5, r3
	ldr	r3, [r4]
	str	lr, [sp, #20]
	ldr	r6, [r1, #3308]
	.pad #264
	sub	sp, sp, #264
	mov	r8, r2
	str	r3, [sp, #260]
	sub	r7, r6, #496
	mov	r0, r7
	bl	mutex_lock
	ldrb	r3, [r6, #-504]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L5322
	mov	r1, r8
	mov	r2, #256
	add	r0, sp, #4
	bl	strlcpy
	add	r0, sp, #4
	bl	strim
	mov	r1, r0
	mov	r2, #256
	sub	r0, r6, #324
	bl	strlcpy
	mov	r0, r7
	bl	mutex_unlock
	mov	r0, r5
.L5317:
	ldr	r2, [sp, #260]
	ldr	r3, [r4]
	cmp	r2, r3
	bne	.L5323
	add	sp, sp, #264
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5322:
	mov	r0, r7
	bl	mutex_unlock
	mvn	r0, #15
	b	.L5317
.L5323:
	bl	__stack_chk_fail
	.fnend
	.size	ffs_aliases_store, .-ffs_aliases_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	functions_store, %function
functions_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 552
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r1, #:lower16:__stack_chk_guard
	strd	r6, [sp, #8]
	movt	r1, #:upper16:__stack_chk_guard
	mov	r6, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #556
	sub	sp, sp, #556
	str	r3, [sp, #16]
	ldr	r3, [r1]
	str	r1, [sp, #20]
	str	r3, [sp, #548]
	bl	dev_get_drvdata
	add	r3, r0, #24
	mov	r8, r0
	add	fp, r0, #508
	mov	r0, r3
	str	r3, [sp, #12]
	bl	mutex_lock
	ldrb	r5, [r8, #16]	@ zero_extendqisi2
	cmp	r5, #0
	bne	.L5367
	ldr	r4, [r8, #508]
	cmp	fp, r4
	sub	r4, r4, #120
	beq	.L5328
.L5327:
	mov	r9, r4
	ldr	r7, [r9, #112]!
	cmp	r9, r7
	beq	.L5330
.L5329:
	mov	r0, r7
	ldr	r3, [r7, #-4]!
	str	r5, [r3, #20]
	bl	list_del
	mov	r0, r7
	bl	kfree
	ldr	r7, [r4, #112]
	cmp	r7, r9
	bne	.L5329
.L5330:
	ldr	r3, [r4, #120]
	str	r9, [r4, #112]
	str	r9, [r4, #116]
	cmp	fp, r3
	sub	r4, r3, #120
	bne	.L5327
.L5328:
	mov	r1, r6
	mov	r2, #256
	add	r0, sp, #36
	movw	r5, #:lower16:.LC459
	bl	strlcpy
	add	r0, sp, #36
	movt	r5, #:upper16:.LC459
	bl	strim
	movw	r3, #:lower16:.LC457
	cmp	r0, #0
	str	fp, [sp]
	movt	r3, #:upper16:.LC457
	mov	r9, #0
	stmib	sp, {r3, fp}
	str	r0, [sp, #28]
	beq	.L5368
.L5344:
	add	r0, sp, #28
	ldr	r1, [sp, #4]
	bl	strsep
	cmp	r0, #0
	str	r0, [sp, #24]
	beq	.L5332
	ldr	r3, [sp]
	ldr	r2, [sp, #8]
	ldr	r3, [r3]
	cmp	r3, r2
	beq	.L5333
	sub	r10, r3, #120
	str	r3, [sp]
.L5334:
	cmp	r0, #0
	movw	fp, #:lower16:.LC462
	movt	fp, #:upper16:.LC462
	beq	.L5332
.L5343:
	mov	r1, r5
	add	r0, sp, #24
	add	r7, sp, #292
	bl	strsep
	mov	r6, r0
	mov	r2, #256
	mov	r0, r7
	add	r1, r8, #196
	bl	strlcpy
	add	r4, sp, #552
	str	r7, [r4, #-520]!
.L5339:
	mov	r1, r5
	mov	r0, r4
	bl	strsep
	subs	r1, r0, #0
	beq	.L5337
	mov	r0, r6
	bl	strcmp
	cmp	r0, #0
	beq	.L5338
.L5337:
	ldr	r3, [sp, #32]
	cmp	r3, #0
	bne	.L5339
	mov	r2, r6
	mov	r1, r10
	mov	r0, r8
	bl	android_enable_function
	cmp	r0, #0
	bne	.L5369
.L5342:
	ldr	r0, [sp, #24]
	cmp	r0, #0
	bne	.L5343
.L5332:
	ldr	r0, [sp, #28]
	cmp	r0, #0
	bne	.L5344
.L5368:
	ldr	r5, [sp]
	ldr	fp, [sp, #8]
	ldr	r4, [r5]
	cmp	r4, fp
	beq	.L5345
.L5346:
	mov	r0, r4
	sub	r4, r4, #120
	bl	list_del
	ldr	r3, [r8, #516]
	mov	r0, r4
	sub	r3, r3, #1
	str	r3, [r8, #516]
	bl	kfree
	ldr	r4, [r5]
	cmp	r4, fp
	bne	.L5346
.L5345:
	ldr	r0, [sp, #12]
	bl	mutex_unlock
	ldr	r0, [sp, #16]
.L5324:
	ldr	r3, [sp, #20]
	ldr	r2, [sp, #548]
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L5370
	add	sp, sp, #556
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5338:
	cmp	r9, #0
	beq	.L5371
.L5348:
	mov	r9, #1
	b	.L5342
.L5371:
	movw	r2, #:lower16:.LC460
	mov	r1, r10
	movt	r2, #:upper16:.LC460
	mov	r0, r8
	bl	android_enable_function
	subs	r2, r0, #0
	beq	.L5348
	movw	r0, #:lower16:.LC461
	ldr	r1, .L5373
	movt	r0, #:upper16:.LC461
	bl	printk
	b	.L5342
.L5333:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L5351
	mov	r2, #128
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r10, r0, #0
	beq	.L5372
.L5335:
	ldr	ip, [r8]
	movw	r1, #:lower16:android_unbind_config
	add	r3, r10, #112
	ldr	r2, [r8, #516]
	movt	r1, #:upper16:android_unbind_config
	mov	r0, #12480
	add	r2, r2, #1
	str	r2, [r8, #516]
	ldr	r2, [sp, #8]
	str	ip, [r10]
	str	r1, [r10, #12]
	ldr	r1, [r8, #516]
	strb	r1, [r10, #20]
	strh	r0, [r10, #22]	@ movhi
	add	r0, r10, #120
	str	r3, [r10, #112]
	str	r3, [r10, #116]
	ldr	r1, [r8, #512]
	bl	__list_add
	ldr	r3, [sp]
	ldr	r0, [sp, #24]
	ldr	r3, [r3]
	str	r3, [sp]
	b	.L5334
.L5351:
	mov	r10, #16
	b	.L5335
.L5370:
	bl	__stack_chk_fail
.L5369:
	mov	r3, r0
	mov	r2, r6
	ldr	r1, .L5373
	mov	r0, fp
	bl	printk
	b	.L5342
.L5367:
	ldr	r0, [sp, #12]
	bl	mutex_unlock
	mvn	r0, #15
	b	.L5324
.L5372:
	ldr	r2, .L5373+4
	movw	r0, #:lower16:.LC458
	mvn	r10, #11
	movt	r0, #:upper16:.LC458
	mov	r1, r2
	bl	printk
	ldr	r3, [sp]
	ldr	r0, [sp, #24]
	ldr	r3, [r3]
	str	r3, [sp]
	b	.L5334
.L5374:
	.align	2
.L5373:
	.word	.LANCHOR3+3600
	.word	.LANCHOR3+3576
	.fnend
	.size	functions_store, .-functions_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_bind, %function
android_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r1, .L5485
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	ldr	r4, [r8, #3312]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	fp, [r0]
	movw	r0, #:lower16:.LC463
	movt	r0, #:upper16:.LC463
	str	r7, [r4, #-512]
	bl	printk
	ldr	r3, [fp]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L5376
	mov	r1, #0
	mov	r0, fp
	blx	r3
.L5376:
	ldr	r3, [r8, #3640]
	cmp	r3, #1
	beq	.L5377
.L5383:
	ldrb	r3, [r7, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L5379
	add	r2, r3, #1
	movw	r4, #:lower16:.LANCHOR0
	uxtb	r2, r2
	movt	r4, #:upper16:.LANCHOR0
	cmp	r2, #254
	strb	r2, [r4, #150]
	strb	r2, [r4, #972]
	strb	r2, [r7, #48]
	beq	.L5379
	add	r3, r3, #2
	movw	r1, #:lower16:.LC468
	ldr	r0, .L5485+4
	uxtb	r3, r3
	movt	r1, #:upper16:.LC468
	mov	r2, #255
	strb	r3, [r7, #48]
	strb	r3, [r4, #980]
	strb	r3, [r4, #151]
	bl	strlcpy
	movw	r1, #:lower16:.LC468
	mov	r2, #255
	ldr	r0, .L5485+8
	movt	r1, #:upper16:.LC468
	bl	strlcpy
	movw	r1, #:lower16:.LC469
	mov	r2, #255
	ldr	r0, .L5485+12
	movt	r1, #:upper16:.LC469
	bl	strlcpy
	ldrb	r3, [r7, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L5379
	add	r3, r3, #1
	movw	r0, #:lower16:.LC470
	uxtb	r3, r3
	movt	r0, #:upper16:.LC470
	strb	r3, [r7, #48]
	ldr	r5, [fp, #28]
	strb	r3, [r4, #152]
	strb	r3, [r4, #988]
	mov	r1, r5
	bl	strcmp
	cmp	r0, #0
	bne	.L5480
	movw	r3, #513
.L5405:
	strh	r3, [r4, #148]	@ movhi
.L5406:
	mov	r3, #4
	mov	r6, #0
	str	r3, [r8, #3648]
.L5375:
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5480:
	movw	r0, #:lower16:.LC471
	mov	r1, r5
	movt	r0, #:upper16:.LC471
	bl	strcmp
	cmp	r0, #0
	beq	.L5410
	movw	r0, #:lower16:.LC472
	mov	r1, r5
	movt	r0, #:upper16:.LC472
	bl	strcmp
	cmp	r0, #0
	beq	.L5411
	movw	r0, #:lower16:.LC473
	mov	r1, r5
	movt	r0, #:upper16:.LC473
	bl	strcmp
	cmp	r0, #0
	beq	.L5412
	movw	r0, #:lower16:.LC474
	mov	r1, r5
	movt	r0, #:upper16:.LC474
	bl	strcmp
	cmp	r0, #0
	beq	.L5413
	movw	r0, #:lower16:.LC475
	mov	r1, r5
	movt	r0, #:upper16:.LC475
	bl	strcmp
	cmp	r0, #0
	beq	.L5414
	movw	r0, #:lower16:.LC476
	mov	r1, r5
	movt	r0, #:upper16:.LC476
	bl	strcmp
	cmp	r0, #0
	beq	.L5415
	movw	r0, #:lower16:.LC477
	mov	r1, r5
	movt	r0, #:upper16:.LC477
	bl	strcmp
	cmp	r0, #0
	beq	.L5416
	movw	r0, #:lower16:.LC478
	mov	r1, r5
	movt	r0, #:upper16:.LC478
	bl	strcmp
	cmp	r0, #0
	beq	.L5417
	movw	r0, #:lower16:.LC479
	mov	r1, r5
	movt	r0, #:upper16:.LC479
	bl	strcmp
	cmp	r0, #0
	beq	.L5418
	movw	r0, #:lower16:.LC480
	mov	r1, r5
	movt	r0, #:upper16:.LC480
	bl	strcmp
	cmp	r0, #0
	beq	.L5419
	movw	r0, #:lower16:.LC481
	mov	r1, r5
	movt	r0, #:upper16:.LC481
	bl	strcmp
	cmp	r0, #0
	beq	.L5420
	movw	r0, #:lower16:.LC482
	mov	r1, r5
	movt	r0, #:upper16:.LC482
	bl	strcmp
	cmp	r0, #0
	beq	.L5421
	movw	r0, #:lower16:.LC483
	mov	r1, r5
	movt	r0, #:upper16:.LC483
	bl	strcmp
	cmp	r0, #0
	beq	.L5422
	movw	r0, #:lower16:.LC484
	mov	r1, r5
	movt	r0, #:upper16:.LC484
	bl	strcmp
	cmp	r0, #0
	beq	.L5423
	movw	r0, #:lower16:.LC485
	mov	r1, r5
	movt	r0, #:upper16:.LC485
	bl	strcmp
	cmp	r0, #0
	beq	.L5424
	movw	r0, #:lower16:.LC486
	mov	r1, r5
	movt	r0, #:upper16:.LC486
	bl	strcmp
	cmp	r0, #0
	beq	.L5425
	movw	r0, #:lower16:.LC487
	mov	r1, r5
	movt	r0, #:upper16:.LC487
	bl	strcmp
	cmp	r0, #0
	beq	.L5426
	movw	r0, #:lower16:.LC488
	mov	r1, r5
	movt	r0, #:upper16:.LC488
	bl	strcmp
	cmp	r0, #0
	beq	.L5427
	movw	r0, #:lower16:.LC489
	mov	r1, r5
	movt	r0, #:upper16:.LC489
	bl	strcmp
	cmp	r0, #0
	beq	.L5428
	movw	r0, #:lower16:.LC490
	mov	r1, r5
	movt	r0, #:upper16:.LC490
	bl	strcmp
	cmp	r0, #0
	beq	.L5429
	movw	r0, #:lower16:.LC491
	mov	r1, r5
	movt	r0, #:upper16:.LC491
	bl	strcmp
	cmp	r0, #0
	beq	.L5430
	movw	r0, #:lower16:.LC492
	mov	r1, r5
	movt	r0, #:upper16:.LC492
	bl	strcmp
	cmp	r0, #0
	beq	.L5431
	movw	r0, #:lower16:.LC493
	mov	r1, r5
	movt	r0, #:upper16:.LC493
	bl	strcmp
	cmp	r0, #0
	beq	.L5432
	movw	r0, #:lower16:.LC494
	mov	r1, r5
	movt	r0, #:upper16:.LC494
	bl	strcmp
	cmp	r0, #0
	beq	.L5433
	movw	r0, #:lower16:.LC495
	mov	r1, r5
	movt	r0, #:upper16:.LC495
	bl	strcmp
	cmp	r0, #0
	beq	.L5434
	movw	r0, #:lower16:.LC496
	mov	r1, r5
	movt	r0, #:upper16:.LC496
	bl	strcmp
	cmp	r0, #0
	moveq	r3, #564
	beq	.L5405
	ldr	r2, .L5485+16
	movw	r0, #:lower16:.LC497
	mov	r3, r5
	movt	r0, #:upper16:.LC497
	sub	r1, r2, #40
	bl	printk
	movw	r3, #39321
	movt	r3, 65535
	strh	r3, [r4, #148]	@ movhi
	b	.L5406
.L5410:
	movw	r3, #514
	b	.L5405
.L5377:
	ldr	r1, [r4, #-516]
	ldr	r3, [r8, #3308]
	ldr	r2, .L5485+20
	mov	r0, r1
	sub	r1, r3, #520
	cmp	r3, r2
	str	r1, [sp, #8]
	beq	.L5380
	ldr	r3, [r3, #-512]
	cmp	r7, r3
	bne	.L5381
	b	.L5380
.L5384:
	ldr	r3, [r3, #-512]
	cmp	r7, r3
	beq	.L5478
.L5381:
	ldr	r3, [r1, #520]
	cmp	r3, r2
	sub	r1, r3, #520
	bne	.L5384
.L5478:
	str	r1, [sp, #8]
.L5380:
	ldr	r4, [r0]
	cmp	r4, #0
	beq	.L5383
	movw	r5, #:lower16:.LC464
	mov	r9, #1
	str	fp, [sp, #12]
	movt	r5, #:upper16:.LC464
	mov	r10, r0
.L5382:
	mov	r1, r5
	mov	r0, #208
	ldr	r2, [r4]
	bl	kasprintf
	cmp	r0, #0
	mov	r3, #0
	str	r0, [r4, #12]
	str	r3, [r4, #20]
	beq	.L5408
	ldr	r3, [sp, #8]
	mov	r2, r9
	ldr	r1, [r3, #12]
	str	r0, [sp]
	mov	r3, r4
	ldr	r0, [r8, #3644]
	bl	device_create
	cmn	r0, #4096
	str	r0, [r4, #8]
	bhi	.L5481
	ldr	r3, [r4, #24]
	cmp	r3, #0
	beq	.L5388
	mov	r1, r7
	mov	r0, r4
	blx	r3
	cmp	r0, #0
	bne	.L5482
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L5392
	ldr	r1, [r2]
	add	r6, r2, #4
	cmp	r1, #0
	bne	.L5479
	b	.L5392
.L5483:
	cmp	r0, #0
	bne	.L5475
	mov	r6, fp
.L5479:
	ldr	r0, [r4, #8]
.L5396:
	mov	fp, r6
	bl	device_create_file
	ldr	r1, [fp], #4
	cmp	r1, #0
	bne	.L5483
	cmp	r0, #0
	bne	.L5475
.L5392:
	add	r9, r9, #1
	add	r3, r10, r9, lsl #2
	ldr	r4, [r3, #-4]
	cmp	r4, #0
	bne	.L5382
	ldr	fp, [sp, #12]
	b	.L5383
.L5411:
	movw	r3, #515
	b	.L5405
.L5475:
	ldr	r2, .L5485+24
	mov	r10, r6
	mov	r6, r0
	movw	r0, #:lower16:.LC467
	ldr	r3, [r4]
	mov	r5, fp
	movt	r0, #:upper16:.LC467
	ldr	fp, [sp, #12]
	sub	r9, r10, #4
	mov	r1, r2
	bl	printk
	ldr	r3, [r4, #16]
	ldr	r1, [r5, #-8]
	cmp	r9, r3
	beq	.L5398
.L5397:
	ldr	r0, [r4, #8]
	bl	device_remove_file
	ldr	r1, [r9], #-4
	ldr	r3, [r4, #16]
	cmp	r9, r3
	bne	.L5397
.L5398:
	ldr	r3, [r4, #28]
	cmp	r3, #0
	beq	.L5390
	mov	r0, r4
	blx	r3
.L5390:
	ldr	r3, [r4, #8]
	ldr	r0, [r8, #3644]
	ldr	r1, [r3, #288]
	bl	device_destroy
	b	.L5387
.L5481:
	ldr	r2, .L5485+24
	movw	r0, #:lower16:.LC465
	movt	r0, #:upper16:.LC465
	ldr	r3, [r4, #12]
	ldr	fp, [sp, #12]
	mov	r1, r2
	bl	printk
	ldr	r6, [r4, #8]
.L5387:
	mov	r3, #0
	ldr	r0, [r4, #12]
	str	r3, [r4, #8]
	bl	kfree
.L5385:
	ldr	r3, [sp, #8]
	ldr	r9, [r3, #4]
	sub	r9, r9, #4
.L5399:
	ldr	r4, [r9, #4]!
	cmp	r4, #0
	beq	.L5484
.L5403:
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L5399
	ldr	r1, [r3, #288]
	ldr	r0, [r8, #3644]
	bl	device_destroy
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #28]
	cmp	r3, #0
	beq	.L5401
	mov	r0, r4
	blx	r3
.L5401:
	ldr	r5, [r4, #16]
	cmp	r5, #0
	beq	.L5399
	ldr	r1, [r5]
	add	r5, r5, #4
	cmp	r1, #0
	beq	.L5399
.L5402:
	ldr	r0, [r4, #8]
	bl	device_remove_file
	ldr	r1, [r5], #4
	cmp	r1, #0
	bne	.L5402
	ldr	r4, [r9, #4]!
	cmp	r4, #0
	bne	.L5403
.L5484:
	cmp	r6, #0
	bne	.L5375
	b	.L5383
.L5388:
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L5392
	ldr	r1, [r2]
	add	r6, r2, #4
	cmp	r1, #0
	bne	.L5396
	b	.L5392
.L5379:
	mvn	r6, #18
	b	.L5375
.L5412:
	movw	r3, #518
	b	.L5405
.L5413:
	mov	r3, #520
	b	.L5405
.L5408:
	mvn	r6, #11
	ldr	fp, [sp, #12]
	b	.L5385
.L5414:
	movw	r3, #529
	b	.L5405
.L5415:
	movw	r3, #530
	b	.L5405
.L5416:
	movw	r3, #531
	b	.L5405
.L5417:
	mov	r3, #532
	b	.L5405
.L5418:
	movw	r3, #534
	b	.L5405
.L5419:
	mov	r3, #536
	b	.L5405
.L5482:
	ldr	r2, .L5485+24
	mov	r6, r0
	movw	r0, #:lower16:.LC466
	ldr	r3, [r4]
	movt	r0, #:upper16:.LC466
	ldr	fp, [sp, #12]
	mov	r1, r2
	bl	printk
	b	.L5390
.L5420:
	movw	r3, #537
	b	.L5405
.L5433:
	movw	r3, #562
	b	.L5405
.L5432:
	movw	r3, #561
	b	.L5405
.L5431:
	mov	r3, #560
	b	.L5405
.L5430:
	movw	r3, #553
	b	.L5405
.L5429:
	mov	r3, #552
	b	.L5405
.L5428:
	movw	r3, #551
	b	.L5405
.L5434:
	movw	r3, #563
	b	.L5405
.L5421:
	mov	r3, #544
	b	.L5405
.L5423:
	movw	r3, #546
	b	.L5405
.L5422:
	movw	r3, #545
	b	.L5405
.L5427:
	movw	r3, #550
	b	.L5405
.L5426:
	movw	r3, #549
	b	.L5405
.L5425:
	mov	r3, #548
	b	.L5405
.L5424:
	movw	r3, #547
	b	.L5405
.L5486:
	.align	2
.L5485:
	.word	.LANCHOR3+3616
	.word	.LANCHOR1+2764
	.word	.LANCHOR1+2508
	.word	.LANCHOR1+2220
	.word	.LANCHOR3+3656
	.word	.LANCHOR1+3308
	.word	.LANCHOR3+3632
	.fnend
	.size	android_bind, .-android_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_work, %function
android_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r1, #:lower16:.LC498
	movw	r2, #:lower16:.LC499
	strd	r6, [sp, #8]
	movt	r1, #:upper16:.LC498
	movt	r2, #:upper16:.LC499
	strd	r8, [sp, #16]
	movw	r3, #:lower16:.LC501
	movw	ip, #:lower16:.LC500
	strd	r10, [sp, #24]
	movt	r3, #:upper16:.LC501
	movt	ip, #:upper16:.LC500
	str	lr, [sp, #32]
	ldr	r5, [r0, #-172]
	.pad #68
	sub	sp, sp, #68
	mov	r4, r0
	str	r1, [sp, #16]
	movw	r1, #:lower16:.LC502
	str	r2, [sp, #24]
	movw	r2, #:lower16:.LC503
	movt	r1, #:upper16:.LC502
	movt	r2, #:upper16:.LC503
	add	r6, r5, #60
	str	ip, [sp, #32]
	str	r3, [sp, #40]
	mov	r3, #0
	mov	r0, r6
	str	r3, [sp, #20]
	str	r3, [sp, #28]
	str	r3, [sp, #36]
	str	r3, [sp, #44]
	str	r1, [sp, #48]
	str	r3, [sp, #52]
	strd	r2, [sp, #56]
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r4, #-129]	@ zero_extendqisi2
	mov	r10, r0
	ldrb	r7, [r4, #-130]	@ zero_extendqisi2
	ldrb	r9, [r4, #-132]	@ zero_extendqisi2
	cmp	r3, r7
	ldr	r3, [r5, #12]
	beq	.L5488
	cmp	r3, #0
	beq	.L5489
	movw	r1, #:lower16:.LC504
	mov	r2, #3
	movt	r1, #:upper16:.LC504
	sub	r0, r4, #128
	bl	strncmp
	cmp	r0, #0
	beq	.L5490
	cmp	r7, #0
	eor	r3, r7, #1
	moveq	r2, #4
	addeq	r8, sp, #48
	beq	.L5492
	mov	r2, #3
	add	r8, sp, #40
.L5492:
	movw	r5, #:lower16:.LANCHOR1
	mov	r1, r10
	strb	r9, [r4, #-131]
	movt	r5, #:upper16:.LANCHOR1
	mov	r0, r6
	strb	r7, [r4, #-129]
	str	r3, [sp, #12]
	str	r2, [r5, #3652]
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [r4, #-136]
	cmp	r2, #0
	beq	.L5494
	add	fp, sp, #24
	ldr	r3, [sp, #12]
	b	.L5498
.L5488:
	cmp	r3, #0
	beq	.L5489
	movw	r5, #:lower16:.LANCHOR1
	mov	r3, #2
	strb	r9, [r4, #-131]
	movt	r5, #:upper16:.LANCHOR1
	mov	r1, r0
	mov	r0, r6
	str	r3, [r5, #3652]
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [r5, #3656]
	cmp	r6, #2
	beq	.L5493
	add	r8, sp, #32
.L5494:
	ldr	r3, [r5, #3652]
	sub	r3, r3, #3
	cmp	r3, #1
	bls	.L5512
	ldr	r0, [r4, #-168]
	mov	r2, r8
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env
.L5513:
	ldr	r3, [r5, #3652]
	str	r3, [r5, #3656]
.L5512:
	ldr	r2, .L5551
	movw	r0, #:lower16:.LC506
	movt	r0, #:upper16:.LC506
	ldr	r3, [r8]
	mov	r1, r2
	bl	printk
.L5487:
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5490:
	cmp	r7, #0
	bne	.L5549
	movw	r5, #:lower16:.LANCHOR1
	mov	r3, #4
	strb	r9, [r4, #-131]
	movt	r5, #:upper16:.LANCHOR1
	mov	r1, r10
	strb	r7, [r4, #-129]
	mov	r0, r6
	add	r8, sp, #48
	str	r3, [r5, #3652]
	bl	_raw_spin_unlock_irqrestore
	b	.L5494
.L5489:
	ldrb	r3, [r4, #-131]	@ zero_extendqisi2
	cmp	r3, r9
	beq	.L5495
	cmp	r9, #0
	movw	r5, #:lower16:.LANCHOR1
	bne	.L5496
	movt	r5, #:upper16:.LANCHOR1
	add	r8, sp, #16
	add	fp, sp, #24
	str	r9, [r5, #3652]
.L5507:
	mov	r1, r10
	mov	r0, r6
	strb	r9, [r4, #-131]
	strb	r7, [r4, #-129]
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [r4, #-136]
	cmp	r2, #0
	movne	r3, #0
	beq	.L5497
.L5498:
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldr	r1, [r6, #1004]
	cmp	r1, r3
	beq	.L5497
	ldr	r1, [r2, #4]
	cmp	r1, #0
	beq	.L5497
.L5518:
	cmp	r3, #0
	sub	r0, r4, #120
	str	r3, [sp, #12]
	addne	r1, r1, #1
	mvneq	r1, #0
	bl	pm_qos_update_request
	ldr	r3, [sp, #12]
	str	r3, [r6, #1004]
.L5497:
	cmp	r8, fp
	bne	.L5494
.L5499:
	ldr	r3, [r5, #3656]
	cmp	r3, #0
	bne	.L5550
.L5548:
	ldr	r3, [r5, #3652]
	sub	r3, r3, #3
	cmp	r3, #1
	movls	r8, fp
	bls	.L5512
	ldr	r0, [r4, #-168]
	mov	r2, fp
	mov	r1, #2
	mov	r8, fp
	add	r0, r0, #8
	bl	kobject_uevent_env
	ldr	r0, [r4, #-168]
	add	r2, sp, #56
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env
	b	.L5513
.L5495:
	mov	r1, r10
	mov	r0, r6
	strb	r7, [r4, #-129]
	bl	_raw_spin_unlock_irqrestore
	ldrb	r1, [r4, #-131]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC505
	ldr	r2, .L5551
	movt	r0, #:upper16:.LC505
	ldr	ip, [r5, #12]
	ldrb	r3, [r4, #-132]	@ zero_extendqisi2
	stm	sp, {r1, ip}
	mov	r1, r2
	bl	printk
	b	.L5487
.L5496:
	mov	r8, #1
	movt	r5, #:upper16:.LANCHOR1
	movw	r1, #:lower16:.LC504
	mov	r2, #3
	movt	r1, #:upper16:.LC504
	sub	r0, r4, #128
	str	r8, [r5, #3652]
	bl	strncmp
	cmp	r0, #0
	addeq	fp, sp, #24
	moveq	r8, fp
	beq	.L5507
	mov	r1, r10
	mov	r0, r6
	strb	r8, [r4, #-131]
	strb	r7, [r4, #-129]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-136]
	cmp	r3, #0
	beq	.L5546
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldr	r2, [r6, #1004]
	cmp	r2, #1
	beq	.L5546
	ldr	r1, [r3, #4]
	cmp	r1, #0
	beq	.L5546
	add	fp, sp, #24
	mov	r3, r8
	mov	r8, fp
	b	.L5518
.L5549:
	mov	r2, #1
	movw	r5, #:lower16:.LANCHOR1
	strb	r9, [r4, #-131]
	movt	r5, #:upper16:.LANCHOR1
	mov	r3, #3
	mov	r1, r10
	mov	r0, r6
	strb	r2, [r4, #-129]
	add	r8, sp, #40
	str	r3, [r5, #3652]
	bl	_raw_spin_unlock_irqrestore
	b	.L5494
.L5546:
	add	fp, sp, #24
	b	.L5499
.L5493:
	ldr	r2, .L5551
	movw	r0, #:lower16:.LC507
	movt	r0, #:upper16:.LC507
	mov	r1, r2
	bl	printk
	ldr	r0, [r4, #-168]
	add	r2, sp, #16
	mov	r1, r6
	add	r0, r0, #8
	bl	kobject_uevent_env
	ldr	r3, [r5, #3652]
	sub	r3, r3, #3
	cmp	r3, #1
	addls	r8, sp, #32
	bls	.L5512
	ldr	r0, [r4, #-168]
	add	r2, sp, #32
	mov	r1, r6
	mov	r8, r2
	add	r0, r0, #8
	bl	kobject_uevent_env
	b	.L5513
.L5550:
	ldr	r2, .L5551
	movw	r0, #:lower16:.LC507
	movt	r0, #:upper16:.LC507
	mov	r1, r2
	bl	printk
	ldr	r0, [r4, #-168]
	add	r2, sp, #16
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env
	b	.L5548
.L5552:
	.align	2
.L5551:
	.word	.LANCHOR3+3672
	.fnend
	.size	android_work, .-android_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_send_hid_event, %function
acc_complete_send_hid_event:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, [r1, #32]
	ldr	ip, [r1, #44]
	ldr	r3, [r1, #48]
	cmp	ip, #0
	bne	.L5557
	mov	r2, r1
	.save {lr}
	str	lr, [sp, #-4]!
	mov	lr, #1
	.pad #12
	sub	sp, sp, #12
	ldr	r2, [r2]
	mov	r1, ip
	ldr	r0, [r0, #8]
	str	lr, [sp]
	bl	hid_report_raw_event
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L5557:
	movw	r0, #:lower16:.LC508
	mov	r1, ip
	movt	r0, #:upper16:.LC508
	b	printk
	.fnend
	.size	acc_complete_send_hid_event, .-acc_complete_send_hid_event
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_work, %function
acc_hid_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r3, #2488]
	.pad #28
	sub	sp, sp, #28
	add	r9, sp, #8
	str	r9, [sp, #8]
	add	r7, r6, #88
	mov	r8, r6
	str	r9, [sp, #12]
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r8, #1776]!
	mov	r10, r0
	cmp	r5, r8
	ldr	r4, [r5]
	bne	.L5559
	b	.L5560
.L5561:
	cmp	r4, r8
	ldr	r3, [r4]
	beq	.L5560
.L5562:
	mov	r5, r4
	mov	r4, r3
.L5559:
	ldr	r3, [r5, #24]
	ldr	r2, [r5, #28]
	cmp	r2, r3
	bne	.L5561
	mov	r0, r5
	bl	__list_del_entry
	ldr	r2, [sp, #8]
	mov	r0, r5
	mov	r1, r9
	bl	__list_add
	cmp	r4, r8
	ldr	r3, [r4]
	bne	.L5562
.L5560:
	ldr	r2, [r6, #1784]
	add	r3, r6, #1776
	add	r3, r3, #8
	cmp	r3, r2
	addeq	r8, sp, #16
	streq	r8, [sp, #16]
	streq	r8, [sp, #20]
	beq	.L5564
	ldr	r1, [r6, #1788]
	add	r8, sp, #24
	str	r2, [r8, #-8]!
	str	r1, [sp, #20]
	str	r8, [r2, #4]
	ldr	r2, [sp, #20]
	str	r8, [r2]
	str	r3, [r6, #1784]
	str	r3, [r6, #1788]
.L5564:
	mov	r1, r10
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r4, [sp, #8]
	cmp	r4, r9
	ldr	r5, [r4]
	beq	.L5565
	movw	r3, #:lower16:.LC510
	movw	r10, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LC510
	movt	r10, #:upper16:.LANCHOR0
	str	r3, [sp, #4]
	b	.L5571
.L5576:
	mov	r5, r3
.L5571:
	bl	hid_allocate_device
	cmn	r0, #4096
	mov	fp, r0
	mvn	r2, #0
	mov	r1, #3
	bhi	.L5580
	ldr	r3, .L5582
	strh	r1, [r0, #32]	@ movhi
	ldr	ip, [r10, #592]
	str	r2, [r0, #36]
	str	r2, [r0, #40]
	str	r4, [r0, #3848]
	str	ip, [r0, #3200]
	str	r3, [r0, #3548]
	bl	hid_add_device
	subs	r1, r0, #0
	streq	fp, [r4, #8]
	bne	.L5581
.L5568:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	mov	r0, r4
	bl	__list_del_entry
	add	r1, r6, #1760
	mov	r0, r4
	ldr	r2, [r6, #1768]
	add	r1, r1, #8
	bl	__list_add
	mov	r1, fp
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L5570:
	cmp	r5, r9
	mov	r4, r5
	ldr	r3, [r5]
	bne	.L5576
.L5565:
	ldr	r4, [sp, #16]
	cmp	r4, r8
	ldr	r5, [r4]
	bne	.L5572
	b	.L5558
.L5575:
	mov	r4, r5
	mov	r5, r3
.L5572:
	mov	r0, r4
	bl	list_del
	ldr	r3, [r4, #8]
	subs	r0, r3, #0
	beq	.L5574
	bl	hid_destroy_device
.L5574:
	ldr	r0, [r4, #20]
	bl	kfree
	mov	r0, r4
	bl	kfree
	cmp	r5, r8
	ldr	r3, [r5]
	bne	.L5575
.L5558:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5580:
	cmp	r0, #0
	beq	.L5568
	b	.L5567
.L5581:
	movw	r0, #:lower16:.LC509
	movt	r0, #:upper16:.LC509
	bl	printk
	mov	r0, fp
	bl	hid_destroy_device
.L5567:
	mov	r1, r4
	ldr	r0, [sp, #4]
	bl	printk
	ldr	r0, [r4, #20]
	bl	kfree
	mov	r0, r4
	bl	kfree
	b	.L5570
.L5583:
	.align	2
.L5582:
	.word	.LANCHOR0+1008
	.fnend
	.size	acc_hid_work, .-acc_hid_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_parse, %function
acc_hid_parse:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #3848]
	ldr	r1, [r3, #20]
	ldr	r2, [r3, #24]
	bl	hid_parse_report
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
	.fnend
	.size	acc_hid_parse, .-acc_hid_parse
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_show_file, %function
fsg_show_file:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	mov	r6, r0
	bl	down_read
	ldr	r0, [r4, #-48]
	cmp	r0, #0
	moveq	r4, r0
	strbeq	r0, [r5]
	beq	.L5589
	add	r0, r0, #8
	movw	r2, #4095
	mov	r1, r5
	bl	d_path
	cmn	r0, #4096
	mov	r4, r0
	bhi	.L5589
	bl	strlen
	mov	r7, r0
	mov	r2, r0
	mov	r1, r4
	mov	r0, r5
	bl	memmove
	add	r4, r7, #1
	mov	r2, #10
	mov	r3, #0
	strb	r2, [r5, r7]
	strb	r3, [r5, r4]
.L5589:
	mov	r0, r6
	bl	up_read
	ldrd	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	fsg_show_file, .-fsg_show_file
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_store_ro, %function
fsg_store_ro:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r2
	strd	r6, [sp, #8]
	mov	r7, r3
	mov	r6, r0
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	mov	r5, r0
	add	r2, sp, #4
	mov	r0, r4
	mov	r1, #2
	bl	kstrtouint
	subs	r4, r0, #0
	beq	.L5601
.L5591:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L5601:
	mov	r0, r5
	bl	down_read
	ldr	r3, [r6, #-48]
	cmp	r3, #0
	beq	.L5593
	ldr	r0, .L5604
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	mvneq	r4, #15
	bne	.L5602
.L5594:
	mov	r0, r5
	bl	up_read
	b	.L5591
.L5593:
	ldr	r3, [sp, #4]
	ldrb	r2, [r6, #-24]	@ zero_extendqisi2
	ldr	r0, .L5604+4
	and	r3, r3, #1
	uxtb	r1, r3
	bfi	r2, r1, #1, #1
	bfi	r2, r1, #0, #1
	strb	r2, [r6, #-24]
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L5603
.L5595:
	mov	r4, r7
	b	.L5594
.L5602:
	movw	r2, #:lower16:.LC511
	mov	r1, r6
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC511
	bl	__dynamic_dev_dbg
	mvn	r4, #15
	b	.L5594
.L5603:
	movw	r2, #:lower16:.LC512
	mov	r1, r6
	movt	r2, #:upper16:.LC512
	sub	r0, r0, #24
	bl	__dynamic_dev_dbg
	b	.L5595
.L5605:
	.align	2
.L5604:
	.word	.LANCHOR4-3616
	.word	.LANCHOR4-3600
	.fnend
	.size	fsg_store_ro, .-fsg_store_ro
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_store_cdrom, %function
fsg_store_cdrom:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r2
	strd	r6, [sp, #8]
	mov	r7, r3
	mov	r6, r0
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	mov	r5, r0
	add	r2, sp, #4
	mov	r0, r4
	mov	r1, #2
	bl	kstrtouint
	subs	r4, r0, #0
	beq	.L5616
.L5606:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L5616:
	mov	r0, r5
	bl	down_read
	ldr	r3, [r6, #-48]
	cmp	r3, #0
	beq	.L5608
	ldr	r0, .L5619
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	mvneq	r4, #15
	bne	.L5617
.L5609:
	mov	r0, r5
	bl	up_read
	b	.L5606
.L5608:
	ldrb	r2, [r6, #-24]	@ zero_extendqisi2
	ldr	r3, [sp, #4]
	ldr	r0, .L5619+4
	bfi	r2, r3, #3, #1
	strb	r2, [r6, #-24]
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L5618
.L5610:
	mov	r4, r7
	b	.L5609
.L5617:
	movw	r2, #:lower16:.LC513
	mov	r1, r6
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC513
	bl	__dynamic_dev_dbg
	mvn	r4, #15
	b	.L5609
.L5618:
	movw	r2, #:lower16:.LC514
	and	r3, r3, #1
	mov	r1, r6
	movt	r2, #:upper16:.LC514
	sub	r0, r0, #24
	bl	__dynamic_dev_dbg
	b	.L5610
.L5620:
	.align	2
.L5619:
	.word	.LANCHOR4-3568
	.word	.LANCHOR4-3552
	.fnend
	.size	fsg_store_cdrom, .-fsg_store_cdrom
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_store_nofua, %function
fsg_store_nofua:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r1, #2
	mov	r4, r0
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r2
	add	r2, sp, #4
	mov	r5, r3
	bl	kstrtouint
	cmp	r0, #0
	bne	.L5621
	ldr	r3, [sp, #4]
	cmp	r3, #0
	beq	.L5625
.L5623:
	ldrb	r2, [r4, #-24]	@ zero_extendqisi2
	mov	r0, r5
	bfi	r2, r3, #7, #1
	strb	r2, [r4, #-24]
.L5621:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L5625:
	ldrb	r2, [r4, #-24]	@ zero_extendqisi2
	tst	r2, #128
	beq	.L5623
	ldr	r0, [r4, #-48]
	ubfx	r2, r2, #1, #1
	cmp	r0, #0
	moveq	r2, #1
	cmp	r2, #0
	bne	.L5623
	mov	r1, #1
	bl	vfs_fsync
	ldr	r3, [sp, #4]
	b	.L5623
	.fnend
	.size	fsg_store_nofua, .-fsg_store_nofua
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	send_message, %function
send_message:
	.fnstart
	@ args = 0, pretend = 0, frame = 256
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, r9, lr}
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r3, #:lower16:__stack_chk_guard
	ldr	r5, .L5641
	movt	r3, #:upper16:__stack_chk_guard
	.pad #260
	sub	sp, sp, #260
	ldr	r2, [r3]
	mov	r6, r3
	mov	r7, r0
	mov	r8, r1
	ldr	r4, [r0]
	ldrh	r3, [r5, #-14]
	str	r2, [sp, #252]
	tst	r3, #4
	beq	.L5627
	movw	r2, #:lower16:.LC515
	ldr	r3, .L5641+4
	add	r1, r4, #32
	movt	r2, #:upper16:.LC515
	sub	r0, r5, #32
	bl	__dynamic_dev_dbg
.L5627:
	movw	r0, #:lower16:.LC516
	mov	r2, r8
	ldr	r1, .L5641+4
	movt	r0, #:upper16:.LC516
	bl	printk
	cmp	r4, #0
	beq	.L5640
	movw	lr, #:lower16:.LC517
	add	ip, sp, #12
	movt	lr, #:upper16:.LC517
	add	r9, sp, #132
	ldmia	lr!, {r0, r1, r2, r3}
	str	ip, [sp]
	stmia	ip!, {r0, r1, r2, r3}
	movw	r2, #:lower16:.LC518
	ldm	lr, {r0, r1}
	mov	r3, r8
	movt	r2, #:upper16:.LC518
	stm	ip, {r0, r1}
	mov	r0, r9
	mov	r1, #120
	bl	snprintf
	ldr	r0, [r4, #356]
	mov	r3, #0
	str	r9, [sp, #4]
	str	r3, [sp, #8]
	cmp	r0, r3
	beq	.L5629
.L5632:
	ldr	r3, .L5641+8
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	beq	.L5631
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC520
	sub	r0, r5, #8
	movt	r2, #:upper16:.LC520
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L5631
.L5629:
	movw	r1, #:lower16:.LC519
	ldr	r2, .L5641+12
	movt	r1, #:upper16:.LC519
	bl	__class_create
	cmn	r0, #4096
	str	r0, [r4, #356]
	bls	.L5632
	mvn	r0, #0
	b	.L5626
.L5631:
	add	r0, r4, #40
	mov	r2, sp
	mov	r1, #2
	bl	kobject_uevent_env
.L5640:
	mov	r0, #0
.L5626:
	ldr	r2, [sp, #252]
	ldr	r3, [r6]
	cmp	r2, r3
	beq	.L5633
	bl	__stack_chk_fail
.L5633:
	add	sp, sp, #260
	@ sp needed
	pop	{r4, r5, r6, r7, r8, r9, pc}
.L5642:
	.align	2
.L5641:
	.word	.LANCHOR4-3520
	.word	.LANCHOR3+3688
	.word	.LANCHOR4-3504
	.word	.LANCHOR1+3660
	.fnend
	.size	send_message, .-send_message
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bulk_out_complete, %function
bulk_out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	lr, [sp, #16]
	.pad #20
	sub	sp, sp, #20
	ldr	r4, [r0]
	ldr	r3, [r1, #44]
	ldr	r6, [r1, #32]
	cmp	r3, #0
	bne	.L5644
	ldr	r0, [r1, #48]
	ldr	ip, [r6, #12]
	cmp	r0, ip
	beq	.L5646
	ldr	r2, .L5662
	ldrh	r2, [r2, #-14]
	tst	r2, #4
	bne	.L5650
.L5646:
	.syntax divided
@ 689 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r2, #0
	mov	r3, #1
	str	r3, [r6, #4]
	str	r2, [r6, #28]
	.syntax divided
@ 607 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r4, #168]
	str	r3, [r4, #148]
	cmp	r0, r2
	beq	.L5649
	bl	wake_up_process
.L5649:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock
.L5644:
	ldr	r2, .L5662
	ldrh	r2, [r2, #-14]
	tst	r2, #4
	bne	.L5661
.L5647:
	cmn	r3, #104
	bne	.L5646
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5646
	mov	r0, r7
	blx	r3
	b	.L5646
.L5661:
	ldr	r0, [r1, #48]
	ldr	ip, [r6, #12]
.L5650:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC521
	str	r3, [sp]
	stmib	sp, {r0, ip}
	ldr	r3, .L5662+4
	movt	r2, #:upper16:.LC521
	ldr	r0, .L5662+8
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r5, #44]
	b	.L5647
.L5663:
	.align	2
.L5662:
	.word	.LANCHOR4-3472
	.word	.LANCHOR3+3704
	.word	.LANCHOR4-3504
	.fnend
	.size	bulk_out_complete, .-bulk_out_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bulk_in_complete, %function
bulk_in_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	lr, [sp, #16]
	.pad #20
	sub	sp, sp, #20
	ldr	r5, [r0]
	ldr	r3, [r1, #44]
	ldr	r6, [r1, #32]
	cmp	r3, #0
	bne	.L5665
	ldr	ip, [r1, #4]
	ldr	r0, [r1, #48]
	cmp	r0, ip
	beq	.L5667
	ldr	r2, .L5683
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	bne	.L5671
.L5667:
	.syntax divided
@ 668 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	add	r4, r5, #44
	mov	r0, r4
	bl	_raw_spin_lock
	mov	r3, #0
	str	r3, [r6, #4]
	str	r3, [r6, #20]
	.syntax divided
@ 607 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r5, #168]
	mov	r3, #1
	str	r3, [r5, #148]
	cmp	r0, #0
	beq	.L5670
	bl	wake_up_process
.L5670:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock
.L5665:
	ldr	r2, .L5683
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	bne	.L5682
.L5668:
	cmn	r3, #104
	bne	.L5667
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5667
	mov	r0, r7
	blx	r3
	b	.L5667
.L5682:
	ldr	ip, [r1, #4]
	ldr	r0, [r1, #48]
.L5671:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC521
	str	r3, [sp]
	stmib	sp, {r0, ip}
	ldr	r3, .L5683+4
	movt	r2, #:upper16:.LC521
	ldr	r0, .L5683+8
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #44]
	b	.L5668
.L5684:
	.align	2
.L5683:
	.word	.LANCHOR4-3456
	.word	.LANCHOR3+3724
	.word	.LANCHOR4-3480
	.fnend
	.size	bulk_in_complete, .-bulk_in_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	sleep_thread, %function
sleep_thread:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, #57344
	strd	r6, [sp, #8]
	movw	r7, #:lower16:system_freezing_cnt
	movt	r5, 65535
	strd	r8, [sp, #16]
	add	r6, r0, #44
	mov	r8, r0
	str	r10, [sp, #24]
	movt	r7, #:upper16:system_freezing_cnt
	mov	r9, #1
	str	lr, [sp, #28]
	b	.L5690
.L5686:
	str	r9, [r0]
	.syntax divided
@ 819 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	mov	r0, r6
	and	r3, r3, r5
	ldr	r2, [r3, #12]
	ldr	r3, [r2, #4]
	ldr	r3, [r3]
	ands	r4, r3, #1
	bne	.L5691
	bl	_raw_spin_lock_irq
	ldr	r3, [r8, #148]
	mov	r0, r6
	cmp	r3, #0
	bne	.L5697
	bl	_raw_spin_unlock_irq
	bl	schedule
.L5690:
	ldr	r3, [r7]
	mov	r2, sp
	and	r2, r2, r5
	ldr	r0, [r2, #12]
	cmp	r3, #0
	beq	.L5686
	bl	freezing_slow_path
	cmp	r0, #0
	mov	r3, sp
	and	r3, r3, r5
	bne	.L5687
	ldr	r0, [r3, #12]
	b	.L5686
.L5687:
	mov	r0, #0
	bl	__refrigerator
	mov	r3, sp
	and	r3, r3, r5
	ldr	r0, [r3, #12]
	b	.L5686
.L5691:
	mvn	r4, #3
.L5688:
	mov	r5, #0
	mov	r0, r6
	str	r5, [r2]
	bl	_raw_spin_lock_irq
	mov	r0, r6
	str	r5, [r8, #148]
	bl	_raw_spin_unlock_irq
	.syntax divided
@ 836 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L5697:
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	and	r5, r5, r3
	ldr	r2, [r5, #12]
	b	.L5688
	.fnend
	.size	sleep_thread, .-sleep_thread
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	receive_file_work, %function
receive_file_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #-116]
	.pad #68
	sub	sp, sp, #68
	str	r3, [sp, #24]
	.syntax divided
@ 858 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r1, [r0, #16]
	ldrd	r6, [r0, #32]
	ldrd	r2, [r0, #24]
	str	r1, [sp, #20]
	cmp	r6, #0
	sbcs	r1, r7, #0
	strd	r2, [sp, #32]
	mvnlt	r3, #21
	strlt	r3, [r0, #52]
	blt	.L5698
	ldr	r5, .L5765
	mov	r4, r0
	ldrh	r3, [r5, #-14]
	tst	r3, #4
	bne	.L5754
.L5701:
	ldr	r3, [r4, #-104]
	mov	r9, #0
	ldrh	ip, [r3, #20]
	uxth	r8, ip
	subs	r2, r8, #1
	sbc	r3, r9, #0
	and	r0, r2, r6
	and	r1, r3, r7
	orrs	r3, r0, r1
	bne	.L5755
.L5702:
	ldr	r3, .L5765+4
	mov	r2, sp
	mov	r9, #0
	bic	r10, r2, #8128
	mov	r8, r9
	bic	r10, r10, #63
	sub	r3, r3, #8
	str	r3, [sp, #28]
	b	.L5703
.L5762:
	cmp	r6, r3
	mov	r0, r3
	sbcs	r3, r7, ip
	movlt	r0, r6
	mov	r3, r0
	str	r0, [r5, #48]
.L5720:
	subs	r6, r6, r3
	sbc	r7, r7, #0
.L5721:
	cmp	r2, r3
	bls	.L5712
	ldr	r3, .L5765+8
	ldrh	r3, [r3]
	tst	r3, #4
	moveq	r6, #0
	moveq	r7, #0
	bne	.L5756
.L5712:
	mov	r8, r5
.L5703:
	cmp	r6, #1
	sbcs	r3, r7, #0
	movge	r3, #1
	movlt	r3, #0
	cmp	r8, #0
	movne	r3, #1
	cmp	r3, #0
	beq	.L5757
	cmp	r6, #1
	sbcs	r3, r7, #0
	blt	.L5724
	add	r3, r9, #42
	movw	r2, #:lower16:.LANCHOR0
	add	r3, r4, r3, lsl #2
	movt	r2, #:upper16:.LANCHOR0
	ldr	r1, [r2, #520]
	mov	ip, #0
	ldr	r5, [r3, #-200]
	mov	r2, #208
	eor	r9, r9, #1
	str	r1, [r5, #4]
	ldr	r0, [r4, #-104]
	mov	r1, r5
	str	ip, [r4, #-24]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L5753
	cmp	r8, #0
	beq	.L5708
.L5704:
	ldr	r0, .L5765+12
	ldr	r3, [r8, #48]
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L5758
.L5709:
	mov	r2, r3
	ldr	r1, [r8]
	add	r3, sp, #32
	ldr	r0, [sp, #20]
	bl	vfs_write
	ldr	r3, .L5765+16
	mov	fp, r0
	ldrh	r3, [r3]
	tst	r3, #4
	bne	.L5759
.L5710:
	ldr	r3, [r8, #48]
	cmp	r3, fp
	bne	.L5753
.L5708:
	cmp	r5, #0
	beq	.L5712
	ldr	r3, [r4, #-96]
	ldr	r2, [r4, #-24]
	cmp	r2, #0
	bne	.L5713
	cmp	r3, #2
	beq	.L5760
.L5713:
	cmp	r3, #0
	cmpne	r3, #3
	moveq	ip, #1
	movne	ip, #0
	beq	.L5761
	ldr	r2, [r5, #4]
	mov	r1, #0
	ldr	r3, [r5, #48]
	cmp	r6, r2
	sbcs	r1, r7, r1
	blt	.L5762
	mov	r1, #0
	mvn	r0, #0
	cmp	r7, r1
	cmpeq	r6, r0
	beq	.L5721
	b	.L5720
.L5753:
	ldr	r3, [r4, #-96]
	cmp	r3, #0
	movne	r3, #4
	mvneq	r6, #4
	mvnne	r6, #4
	strne	r3, [r4, #-96]
.L5707:
	ldr	r0, .L5765+20
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L5763
.L5723:
	str	r6, [r4, #52]
	.syntax divided
@ 946 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
.L5698:
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5755:
	ldr	r3, .L5765+24
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	beq	.L5702
	ldr	r3, [sp, #24]
	movw	r2, #:lower16:.LC523
	sub	r0, r5, #8
	movt	r2, #:upper16:.LC523
	ldr	r1, [r3]
	strd	r6, [sp]
	ldr	r3, .L5765+28
	str	ip, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L5702
.L5724:
	mov	r5, #0
	b	.L5704
.L5760:
	ldr	r0, [r10, #12]
	movw	r3, #:lower16:autoremove_wake_function
	add	r1, sp, #56
	movt	r3, #:upper16:autoremove_wake_function
	sub	r8, r4, #68
	str	r2, [sp, #44]
	str	r1, [sp, #56]
	str	r0, [sp, #48]
	str	r3, [sp, #52]
	str	r1, [sp, #60]
	b	.L5715
.L5764:
	bl	schedule
.L5715:
	mov	r2, #1
	add	r1, sp, #44
	mov	r0, r8
	bl	prepare_to_wait
	ldr	r3, [r4, #-24]
	cmp	r3, #0
	bne	.L5714
	ldr	r3, [r4, #-96]
	cmp	r3, #2
	bne	.L5714
	ldr	r3, [r10, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L5764
.L5714:
	add	r1, sp, #44
	mov	r0, r8
	bl	finish_wait
	ldr	r3, [r4, #-96]
	b	.L5713
.L5759:
	ldr	r3, [sp, #24]
	movw	r2, #:lower16:.LC524
	movt	r2, #:upper16:.LC524
	ldr	r0, [sp, #28]
	ldr	r1, [r3]
	mov	r3, fp
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L5710
.L5758:
	ldr	r2, [sp, #24]
	sub	r0, r0, #18
	ldr	r1, [r2]
	movw	r2, #:lower16:.LC302
	str	r3, [sp]
	movt	r2, #:upper16:.LC302
	mov	r3, r8
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r8, #48]
	b	.L5709
.L5757:
	mov	r6, r3
	b	.L5707
.L5756:
	ldr	r3, [sp, #24]
	movw	r2, #:lower16:.LC525
	mov	r6, #0
	movt	r2, #:upper16:.LC525
	ldr	r0, .L5765+32
	mov	r7, #0
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L5712
.L5761:
	ldr	r2, [r4, #-24]
	cmp	r3, #0
	mvnne	r6, #124
	mvneq	r6, #4
	cmp	r2, #0
	bne	.L5707
	ldr	r0, [r4, #-104]
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L5707
.L5763:
	ldr	r3, [sp, #24]
	movw	r2, #:lower16:.LC526
	sub	r0, r0, #24
	movt	r2, #:upper16:.LC526
	ldr	r1, [r3]
	mov	r3, r6
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L5723
.L5754:
	ldr	r3, [sp, #24]
	movw	r2, #:lower16:.LC522
	sub	r0, r5, #32
	movt	r2, #:upper16:.LC522
	ldr	r1, [r3]
	strd	r6, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L5701
.L5766:
	.align	2
.L5765:
	.word	.LANCHOR4-3424
	.word	.LANCHOR4-3376
	.word	.LANCHOR4-3342
	.word	.LANCHOR4-3390
	.word	.LANCHOR4-3366
	.word	.LANCHOR4-3312
	.word	.LANCHOR4-3408
	.word	.LANCHOR3+3744
	.word	.LANCHOR4-3360
	.fnend
	.size	receive_file_work, .-receive_file_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_cleanup, %function
ffs_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movw	r0, #:lower16:.LC527
	movt	r0, #:upper16:.LC527
	str	lr, [sp, #4]
	bl	printk
	ldr	r0, .L5769
	bl	unregister_filesystem
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
.L5770:
	.align	2
.L5769:
	.word	.LANCHOR0+1036
	.fnend
	.size	ffs_function_cleanup, .-ffs_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_complete, %function
ffs_ep0_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r1, #32]
	add	r0, r0, #32
	b	complete_all
	.fnend
	.size	ffs_ep0_complete, .-ffs_ep0_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_init, %function
ffs_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4, #4]
	beq	.L5774
	mov	r2, #12
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	mvneq	r4, #11
	beq	.L5772
.L5774:
	ldr	r0, .L5779
	bl	register_filesystem
	subs	r4, r0, #0
	bne	.L5776
	movw	r0, #:lower16:.LC528
	movt	r0, #:upper16:.LC528
	bl	printk
.L5772:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5776:
	movw	r0, #:lower16:.LC529
	mov	r1, r4
	movt	r0, #:upper16:.LC529
	bl	printk
	b	.L5772
.L5780:
	.align	2
.L5779:
	.word	.LANCHOR0+1036
	.fnend
	.size	ffs_function_init, .-ffs_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_suspend, %function
rmnet_sdio_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #192]
	mov	r3, r0
	cmp	r2, #0
	bne	.L5783
	bx	lr
.L5783:
	add	r2, r0, #336
	ldr	r1, [r3, #200]
	mov	r0, #4
	ldr	ip, [r3, #332]
	bic	ip, ip, #2
	str	ip, [r3, #332]
	b	queue_work_on
	.fnend
	.size	rmnet_sdio_suspend, .-rmnet_sdio_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_hw_free, %function
audio_pcm_hw_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r4, r0
	str	lr, [sp, #8]
	ldr	r2, [r0, #184]
	.pad #12
	sub	sp, sp, #12
	cmp	r2, #0
	beq	.L5785
	ldr	r0, [r0]
	ldr	r3, [r4, #188]
	ldr	r1, [r4, #192]
	ldr	r0, [r0]
	ldr	r0, [r0, #496]
	cmp	r0, #0
	beq	.L5786
	ldr	ip, [r0, #276]
	cmp	ip, #0
	beq	.L5786
.L5787:
	mov	lr, #0
	str	lr, [sp]
	ldr	r5, [ip, #4]
	blx	r5
.L5785:
	mov	r3, #0
	mov	r0, r3
	str	r3, [r4, #184]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L5786:
	movw	ip, #:lower16:arm_dma_ops
	movt	ip, #:upper16:arm_dma_ops
	cmp	ip, #0
	bne	.L5787
	.syntax divided
@ 206 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/dma-mapping.h" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/dma-mapping.h"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 206, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
	.fnend
	.size	audio_pcm_hw_free, .-audio_pcm_hw_free
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_probe, %function
acc_hid_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	hid_open_report
	subs	r5, r0, #0
	bne	.L5796
	ldr	r3, [r4, #3548]
	mov	r0, r4
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	beq	.L5802
.L5796:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5802:
	mov	r1, #45
	mov	r0, r4
	bl	hid_connect
	subs	r5, r0, #0
	beq	.L5796
	ldr	r3, [r4, #3548]
	mov	r0, r4
	ldr	r3, [r3, #4]
	blx	r3
	b	.L5796
	.fnend
	.size	acc_hid_probe, .-acc_hid_probe
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_free_ctrl_pkt.part.5, %function
mbim_free_ctrl_pkt.part.5:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	mov	r4, r0
	ldr	r0, [r0]
	bl	kfree
	mov	r0, r4
	pop	{r4, lr}
	b	kfree
	.fnend
	.size	mbim_free_ctrl_pkt.part.5, .-mbim_free_ctrl_pkt.part.5
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_set_alt, %function
f_audio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	ldr	fp, .L5858
	mov	r10, r2
	strd	r8, [sp, #16]
	mov	r8, r0
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r0, #172]
	ldr	r7, [r0, #176]
	ldrh	r3, [fp, #-14]
	tst	r3, #4
	bne	.L5850
.L5806:
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldrb	r3, [r6, #16]	@ zero_extendqisi2
	cmp	r3, r4
	beq	.L5851
	ldrb	r3, [r6, #17]	@ zero_extendqisi2
	cmp	r3, r4
	bne	.L5818
	cmp	r10, #1
	bne	.L5819
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r1, [r5, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r7, r0, #0
	bne	.L5852
	str	r8, [r5]
	ldr	r0, [r6, #1076]
	bl	f_audio_buffer_alloc
	cmn	r0, #4096
	str	r0, [r8, #184]
	bhi	.L5821
	ldr	r3, [r6, #1080]
	cmp	r3, #0
	ble	.L5848
	movw	r9, #:lower16:f_audio_complete
	movt	r9, #:upper16:f_audio_complete
.L5822:
	ldr	r3, [r5, #8]
	mov	r1, #32
	mov	r0, r5
	add	r7, r7, #1
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	movw	r1, #32800
	beq	.L5824
	ldr	r0, [r6, #1084]
	bl	__kmalloc
	mov	r3, r0
	mov	r2, #32
	cmp	r3, #0
	mov	r0, r5
	mov	r1, r4
	str	r3, [r4]
	beq	.L5825
	ldr	r3, [r6, #1084]
	str	r3, [r4, #4]
	str	r9, [r4, #28]
	str	r8, [r4, #32]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bne	.L5853
	ldr	r3, [r6, #1080]
	cmp	r3, r7
	bgt	.L5822
.L5823:
	ldr	r2, .L5858+4
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	bne	.L5854
.L5827:
	strb	r10, [r8, #249]
.L5805:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5851:
	cmp	r10, #1
	bne	.L5808
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r1, [r7, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L5855
	str	r8, [r7]
	mov	r1, #32
	mov	r0, r7
	str	r4, [r8, #216]
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L5824
	movw	r1, #32800
	ldr	r0, [r6, #1072]
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	beq	.L5825
	ldr	ip, [r6, #1072]
	movw	r3, #:lower16:f_audio_complete
	mov	r1, r4
	movt	r3, #:upper16:f_audio_complete
	mov	r2, #32
	mov	r0, r7
	str	ip, [r4, #4]
	str	r3, [r4, #28]
	str	r8, [r4, #32]
	str	r4, [r8, #244]
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bne	.L5856
.L5813:
	movw	r3, #:lower16:system_wq
	add	r2, r8, #220
	movt	r3, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r3]
	bl	queue_work_on
.L5814:
	strb	r10, [r8, #248]
	b	.L5805
.L5821:
	movw	r0, #:lower16:.LC39
	ldr	r1, .L5858+8
	mvn	r4, #11
	movt	r0, #:upper16:.LC39
	bl	printk
	b	.L5805
.L5819:
	ldr	r4, [r8, #184]
	cmp	r4, #0
	beq	.L5828
	movw	r0, #:lower16:.LC538
	ldr	r1, .L5858+8
	movt	r0, #:upper16:.LC538
	bl	printk
	add	r0, r4, #8
	add	r2, r8, #204
	ldr	r1, [r8, #208]
	bl	__list_add
	movw	r3, #:lower16:system_wq
	add	r2, r8, #188
	movt	r3, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r3]
	bl	queue_work_on
	mov	r3, #0
	mov	r4, r3
	str	r3, [r8, #184]
	b	.L5827
.L5850:
	movw	r1, #:lower16:.LC530
	mov	r3, r4
	ldr	r2, .L5858+8
	movt	r1, #:upper16:.LC530
	sub	r0, fp, #32
	str	r10, [sp]
	bl	__dynamic_pr_debug
	b	.L5806
.L5828:
	movw	r0, #:lower16:.LC539
	ldr	r1, .L5858+8
	movt	r0, #:upper16:.LC539
	bl	printk
	b	.L5827
.L5808:
	add	r7, r8, #212
	add	r6, r8, #236
	mov	r0, r7
	mov	fp, #0
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	b	.L5816
.L5817:
	bl	list_del
	cmp	r5, #0
	bne	.L5857
.L5816:
	ldr	r4, [r8, #236]
	cmp	r4, r6
	sub	r5, r4, #8
	mov	r0, r4
	bne	.L5817
	mov	r1, r9
	mov	r0, r7
	mov	r4, #0
	bl	_raw_spin_unlock_irqrestore
	b	.L5814
.L5854:
	movw	r1, #:lower16:.LC537
	ldr	r2, .L5858+8
	sub	r0, fp, #8
	movt	r1, #:upper16:.LC537
	bl	__dynamic_pr_debug
	b	.L5827
.L5857:
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r5
	str	fp, [r4, #-8]
	bl	kfree
	b	.L5816
.L5848:
	mov	r4, r7
	b	.L5823
.L5853:
	movw	r0, #:lower16:.LC536
	mov	r3, r4
	ldr	r1, .L5858+8
	movt	r0, #:upper16:.LC536
	ldr	r2, [r5, #4]
	bl	printk
	ldr	r3, [r6, #1080]
	b	.L5823
.L5824:
	movw	r0, #:lower16:.LC532
	ldr	r1, .L5858+8
	mvn	r4, #11
	movt	r0, #:upper16:.LC532
	bl	printk
	b	.L5805
.L5825:
	movw	r0, #:lower16:.LC533
	ldr	r1, .L5858+8
	mvn	r4, #11
	movt	r0, #:upper16:.LC533
	bl	printk
	b	.L5805
.L5855:
	movw	r0, #:lower16:.LC531
	ldr	r1, .L5858+8
	movt	r0, #:upper16:.LC531
	bl	printk
	b	.L5805
.L5852:
	movw	r0, #:lower16:.LC535
	ldr	r1, .L5858+8
	mov	r4, r7
	movt	r0, #:upper16:.LC535
	bl	printk
	b	.L5805
.L5818:
	movw	r0, #:lower16:.LC540
	mov	r2, r4
	ldr	r1, .L5858+8
	mov	r3, #0
	movt	r0, #:upper16:.LC540
	mov	r4, r3
	bl	printk
	b	.L5805
.L5856:
	movw	r0, #:lower16:.LC534
	mov	r3, r4
	ldr	r1, .L5858+8
	ldr	r2, [r7, #4]
	movt	r0, #:upper16:.LC534
	bl	printk
	b	.L5813
.L5859:
	.align	2
.L5858:
	.word	.LANCHOR4-3280
	.word	.LANCHOR4-3264
	.word	.LANCHOR3+3764
	.fnend
	.size	f_audio_set_alt, .-f_audio_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_disable, %function
rmnet_mux_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #372]
	cmp	r3, #0
	bxeq	lr
	mov	r3, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	str	r3, [r0, #372]
	ldr	r0, [r0, #96]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L5862
	blx	r2
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
.L5862:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r5, [r4, #96]
	ldr	r6, [r4, #100]
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L5863
	blx	r2
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
.L5863:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L5864
	blx	r2
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
.L5864:
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	add	r2, r4, #384
	ldr	r1, [r4, #380]
	mov	r0, #4
	str	r3, [r4, #352]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on
	.fnend
	.size	rmnet_mux_disable, .-rmnet_mux_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ep_matches.part.13, %function
ep_matches.part.13:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	ip, [r2, #3]	@ zero_extendqisi2
	ands	r4, ip, #3
	beq	.L5880
	ldr	r9, [r1, #4]
	ldrb	ip, [r9]	@ zero_extendqisi2
	cmp	ip, #101
	beq	.L5933
.L5880:
	mov	r0, #0
.L5877:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L5933:
	mov	r7, r3
	ldrb	r3, [r9, #2]	@ zero_extendqisi2
	mov	r6, r1
	mov	r8, r0
	mov	r5, r2
	cmp	r3, #45
	beq	.L5881
	mov	r1, #45
	mov	r0, r9
	bl	strrchr
	subs	r10, r0, #0
	beq	.L5882
	cmp	r4, #2
	beq	.L5884
	cmp	r4, #3
	ldrb	r3, [r10, #2]	@ zero_extendqisi2
	bne	.L5928
	cmp	r3, #115
	beq	.L5880
	movw	r0, #:lower16:.LC472
	ldr	r1, [r8, #28]
	movt	r0, #:upper16:.LC472
	bl	strcmp
	cmp	r0, #0
	bne	.L5886
	ldrb	r3, [r10, #1]	@ zero_extendqisi2
	cmp	r3, #105
	beq	.L5880
.L5886:
	ldrb	r2, [r10, #-1]	@ zero_extendqisi2
	movw	r3, #:lower16:_ctype
	movt	r3, #:upper16:_ctype
	ldrb	r3, [r3, r2]	@ zero_extendqisi2
	tst	r3, #4
	beq	.L5898
	ldrh	r3, [r5, #4]	@ unaligned
	cmp	r3, #0
	ubfxne	r2, r3, #0, #11
	movne	r9, #0
	bne	.L5893
	mov	r9, r3
	b	.L5900
.L5928:
	cmp	r3, #115
	bne	.L5880
.L5887:
	ldrb	r2, [r10, #-1]	@ zero_extendqisi2
	movw	r3, #:lower16:_ctype
	movt	r3, #:upper16:_ctype
	ldrb	r3, [r3, r2]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L5881
.L5898:
	ldrsb	r3, [r5, #2]
	cmp	r3, #0
	blt	.L5934
	cmp	r2, #116
	bne	.L5880
.L5881:
	sub	r9, r4, #2
	cmp	r7, #0
	clz	r9, r9
	moveq	r3, #0
	lsr	r9, r9, #5
	movne	r3, r9
	cmp	r3, #0
	bne	.L5935
.L5889:
	ldrh	r3, [r5, #4]	@ unaligned
	cmp	r3, #0
	bne	.L5890
.L5900:
	ldrh	r3, [r6, #20]
	strh	r3, [r5, #4]	@ unaligned
.L5890:
	cmp	r4, #1
	ubfx	r2, r3, #0, #11
	beq	.L5892
	cmp	r4, #3
	beq	.L5893
.L5891:
	ldrb	r3, [r5, #2]	@ zero_extendqisi2
	movw	r2, #:lower16:_ctype
	movt	r2, #:upper16:_ctype
	and	r3, r3, #128
	strb	r3, [r5, #2]
	ldr	r0, [r6, #4]
	ldrb	r1, [r0, #2]	@ zero_extendqisi2
	ldrb	r2, [r2, r1]	@ zero_extendqisi2
	tst	r2, #4
	bne	.L5936
	movw	r1, #:lower16:.LANCHOR1
	movt	r1, #:upper16:.LANCHOR1
	ldr	r2, [r1, #3228]
	add	r2, r2, #1
	cmp	r2, #15
	str	r2, [r1, #3228]
	bhi	.L5880
	orr	r3, r3, r2
	uxtb	r3, r3
	strb	r3, [r5, #2]
.L5896:
	cmp	r7, #0
	moveq	r7, r9
	movne	r7, #0
	cmp	r7, #0
	beq	.L5897
	ldrh	r2, [r6, #20]
	cmp	r2, #64
	movge	r2, #64
	strh	r2, [r5, #4]	@ unaligned
.L5897:
	mov	r0, #1
	strb	r3, [r6, #25]
	b	.L5877
.L5893:
	ldr	r0, [r8, #20]
	cmp	r0, #2
	movls	r1, #1
	movhi	r1, #0
	cmp	r2, #64
	movls	r1, #0
	cmp	r1, #0
	bne	.L5880
.L5892:
	ldrh	r1, [r6, #20]
	cmp	r1, r2
	bcc	.L5880
	ldr	r1, [r8, #20]
	cmp	r1, #2
	bhi	.L5891
	cmp	r2, #1024
	bcs	.L5880
	tst	r3, #6144
	bne	.L5880
	b	.L5891
.L5936:
	add	r0, r0, #2
	mov	r2, #10
	mov	r1, #0
	bl	simple_strtoul
	ldrb	r3, [r5, #2]	@ zero_extendqisi2
	orr	r3, r3, r0
	uxtb	r3, r3
	strb	r3, [r5, #2]
	b	.L5896
.L5882:
	mov	r0, r9
	bl	strlen
	add	r10, r9, r0
	b	.L5887
.L5935:
	ldr	r2, [r8, #20]
	cmp	r2, #4
	bls	.L5902
	ldrb	r2, [r7, #3]	@ zero_extendqisi2
	ldrh	r1, [r6, #22]
	and	r2, r2, #31
	cmp	r1, r2
	bcc	.L5880
.L5902:
	mov	r9, r3
	b	.L5889
.L5884:
	ldrb	r3, [r10, #1]	@ zero_extendqisi2
	cmp	r3, #98
	bne	.L5880
	b	.L5887
.L5934:
	cmp	r2, #110
	bne	.L5880
	b	.L5881
	.fnend
	.size	ep_matches.part.13, .-ep_matches.part.13
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_mmap, %function
audio_pcm_mmap:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r2, [r0, #212]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r2, #544]
	cmp	r3, #0
	beq	.L5938
	ldr	lr, [r2, #548]
	cmp	lr, #0
	beq	.L5938
	ldr	r0, [r0]
	ldr	r2, [r2, #540]
	ldr	r0, [r0]
	ldr	r0, [r0, #496]
	cmp	r0, #0
	beq	.L5939
	ldr	ip, [r0, #276]
	cmp	ip, #0
	beq	.L5939
.L5940:
	mov	r4, #0
	str	lr, [sp]
	str	r4, [sp, #4]
	ldr	r4, [ip, #8]
	blx	r4
.L5937:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5939:
	movw	ip, #:lower16:arm_dma_ops
	movt	ip, #:upper16:arm_dma_ops
	cmp	ip, #0
	bne	.L5940
	.syntax divided
@ 236 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/dma-mapping.h" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/dma-mapping.h"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 236, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L5938:
	movw	r0, #:lower16:.LC541
	movt	r0, #:upper16:.LC541
	bl	printk
	mvn	r0, #21
	b	.L5937
	.fnend
	.size	audio_pcm_mmap, .-audio_pcm_mmap
	.align	2
	.global	gsdio_ctrl_wq
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ctrl_wq, %function
gsdio_ctrl_wq:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #80
	beq	.L5955
	bx	lr
.L5955:
	movw	r0, #:lower16:.LC114
	ldr	r1, .L5956
	movt	r0, #:upper16:.LC114
	b	printk
.L5957:
	.align	2
.L5956:
	.word	.LANCHOR3+3780
	.fnend
	.size	gsdio_ctrl_wq, .-gsdio_ctrl_wq
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_connect, %function
frmnet_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	subs	r2, r0, #0
	beq	.L5960
	mov	r3, #1
	str	r3, [r2, #124]
	bx	lr
.L5960:
	movw	r0, #:lower16:.LC542
	ldr	r1, .L5961
	movt	r0, #:upper16:.LC542
	b	printk
.L5962:
	.align	2
.L5961:
	.word	.LANCHOR3+3796
	.fnend
	.size	frmnet_connect, .-frmnet_connect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_in_max_packet_size_show, %function
conn_gadget_in_max_packet_size_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2484]
	cmp	r3, #0
	beq	.L5964
	ldr	r3, [r3, #92]
	cmp	r3, #0
	beq	.L5964
	movw	r1, #:lower16:.LC77
	mov	r0, r2
	ldrh	r2, [r3, #20]
	movt	r1, #:upper16:.LC77
	b	sprintf
.L5964:
	movw	r0, #:lower16:.LC425
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r1, .L5973
	movt	r0, #:upper16:.LC425
	str	lr, [sp, #4]
	bl	printk
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
.L5974:
	.align	2
.L5973:
	.word	.LANCHOR3+3812
	.fnend
	.size	conn_gadget_in_max_packet_size_show, .-conn_gadget_in_max_packet_size_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_out_max_packet_size_show, %function
conn_gadget_out_max_packet_size_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2484]
	cmp	r3, #0
	beq	.L5976
	ldr	r3, [r3, #96]
	cmp	r3, #0
	beq	.L5976
	movw	r1, #:lower16:.LC77
	mov	r0, r2
	ldrh	r2, [r3, #20]
	movt	r1, #:upper16:.LC77
	b	sprintf
.L5976:
	movw	r0, #:lower16:.LC425
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r1, .L5985
	movt	r0, #:upper16:.LC425
	str	lr, [sp, #4]
	bl	printk
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
.L5986:
	.align	2
.L5985:
	.word	.LANCHOR3+3848
	.fnend
	.size	conn_gadget_out_max_packet_size_show, .-conn_gadget_out_max_packet_size_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_usb_buffer_size_show, %function
conn_gadget_usb_buffer_size_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2484]
	cmp	r3, #0
	beq	.L5991
	ldr	r3, [r3, #192]
	mov	r0, r2
	movw	r1, #:lower16:.LC77
	movt	r1, #:upper16:.LC77
	add	r2, r3, #1020
	cmp	r3, #0
	add	r2, r2, #3
	movlt	r3, r2
	asr	r2, r3, #10
	b	sprintf
.L5991:
	movw	r0, #:lower16:.LC425
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r1, .L5994
	movt	r0, #:upper16:.LC425
	str	lr, [sp, #4]
	bl	printk
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
.L5995:
	.align	2
.L5994:
	.word	.LANCHOR3+3888
	.fnend
	.size	conn_gadget_usb_buffer_size_show, .-conn_gadget_usb_buffer_size_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bcdUSB_show, %function
bcdUSB_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #8]
	cmp	r3, #0
	beq	.L5997
	movw	r1, #:lower16:.LC85
	mov	r0, r4
	ldrh	r2, [r3, #19]	@ unaligned
	movt	r1, #:upper16:.LC85
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
.L5997:
	movw	r3, #:lower16:.LANCHOR0
	movw	r1, #:lower16:.LC85
	movt	r3, #:upper16:.LANCHOR0
	mov	r0, r4
	ldrh	r2, [r3, #138]
	movt	r1, #:upper16:.LC85
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
	.fnend
	.size	bcdUSB_show, .-bcdUSB_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	terminal_version_show, %function
terminal_version_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r4, #:lower16:.LANCHOR1
	movw	r5, #3660
	movt	r4, #:upper16:.LANCHOR1
	movw	r3, #3662
	strd	r6, [sp, #8]
	ldrh	ip, [r4, r5]
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	ldrh	lr, [r4, r3]
	movw	r1, #:lower16:.LC543
	mov	r0, r2
	movt	r1, #:upper16:.LC543
	mov	r6, r2
	lsr	r3, ip, #8
	uxtb	r2, ip
	str	lr, [sp]
	bl	sprintf
	ldrh	r3, [r4, r5]
	mov	r7, r0
	cmp	r3, #0
	bne	.L6006
.L6000:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L6006:
	movw	r0, #:lower16:.LC544
	mov	r2, r6
	ldr	r1, .L6007
	movt	r0, #:upper16:.LC544
	bl	printk
	b	.L6000
.L6008:
	.align	2
.L6007:
	.word	.LANCHOR3+3924
	.fnend
	.size	terminal_version_show, .-terminal_version_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_set_modem_cbits_w, %function
rmnet_sdio_set_modem_cbits_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #-12]
	tst	r3, #2
	beq	.L6009
	ldr	r2, .L6018
	ldrh	r3, [r2, #-14]
	tst	r3, #4
	bne	.L6017
.L6009:
	bx	lr
.L6017:
	movw	r1, #:lower16:.LC545
	ldr	r3, [r0, #-4]
	sub	r0, r2, #32
	movt	r1, #:upper16:.LC545
	ldr	r2, .L6018+4
	b	__dynamic_pr_debug
.L6019:
	.align	2
.L6018:
	.word	.LANCHOR4-3232
	.word	.LANCHOR3+3948
	.fnend
	.size	rmnet_sdio_set_modem_cbits_w, .-rmnet_sdio_set_modem_cbits_w
	.align	2
	.global	gsdio_read_complete
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_read_complete, %function
gsdio_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L6029
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	ldr	r4, [r0]
	ldrh	r3, [r2, #-6]
	tst	r3, #4
	bne	.L6027
.L6021:
	cmp	r4, #0
	beq	.L6028
	add	r5, r4, #4
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	add	r2, r4, #20
	ldr	r1, [r4, #24]
	add	r0, r6, #36
	bl	__list_add
	ldr	r3, [r4, #48]
	movw	r1, #:lower16:.LANCHOR1
	add	r2, r4, #28
	movt	r1, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r1, #3396]
	add	r3, r3, #1
	str	r3, [r4, #48]
	bl	queue_work_on
	mov	r1, r7
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock_irqrestore
.L6027:
	movw	r1, #:lower16:.LC170
	mov	r3, r0
	str	r4, [sp]
	sub	r0, r2, #24
	movt	r1, #:upper16:.LC170
	ldr	r2, .L6029+4
	bl	__dynamic_pr_debug
	b	.L6021
.L6028:
	ldr	r1, .L6029+4
	movw	r0, #:lower16:.LC114
	movt	r0, #:upper16:.LC114
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	printk
.L6030:
	.align	2
.L6029:
	.word	.LANCHOR4-3216
	.word	.LANCHOR3+3980
	.fnend
	.size	gsdio_read_complete, .-gsdio_read_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_open, %function
rmnet_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L6043
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r5, #-14]
	tst	r3, #4
	bne	.L6040
.L6032:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #3604]
	add	r2, r3, #16
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r6, [r2]
	add	r6, r6, #1
	strex	r1, r6, [r2]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r6, #1
	beq	.L6041
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r3, .L6043+4
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	mvneq	r0, #15
	bne	.L6042
.L6031:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6041:
	ldr	r0, [r4, #3604]
	str	r0, [r7, #124]
	add	r0, r0, #52
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #3604]
	mov	r1, r0
	strb	r6, [r3, #4]
	add	r0, r3, #52
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L6031
.L6040:
	movw	r1, #:lower16:.LC546
	sub	r0, r5, #32
	movt	r1, #:upper16:.LC546
	bl	__dynamic_pr_debug
	b	.L6032
.L6042:
	movw	r1, #:lower16:.LC547
	sub	r0, r5, #8
	movt	r1, #:upper16:.LC547
	bl	__dynamic_pr_debug
	mvn	r0, #15
	b	.L6031
.L6044:
	.align	2
.L6043:
	.word	.LANCHOR4-3184
	.word	.LANCHOR4-3168
	.fnend
	.size	rmnet_ctrl_open, .-rmnet_ctrl_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_poll, %function
rmnet_ctrl_poll:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	cmp	r4, #0
	beq	.L6059
	cmp	r1, #0
	beq	.L6048
	ldr	r3, [r1]
	cmp	r3, #0
	beq	.L6048
	mov	r2, r1
	add	r1, r4, #32
	blx	r3
.L6048:
	add	r5, r4, #52
	add	r4, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4]
	mov	r6, r0
	cmp	r3, r4
	moveq	r4, #0
	beq	.L6049
	ldr	r0, .L6061
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	moveq	r4, #65
	bne	.L6060
.L6049:
	mov	r1, r6
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L6045:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6060:
	movw	r1, #:lower16:.LC549
	ldr	r2, .L6061+4
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC549
	mov	r4, #65
	bl	__dynamic_pr_debug
	b	.L6049
.L6059:
	movw	r0, #:lower16:.LC548
	ldr	r1, .L6061+4
	mov	r4, #8
	movt	r0, #:upper16:.LC548
	bl	printk
	b	.L6045
.L6062:
	.align	2
.L6061:
	.word	.LANCHOR4-3136
	.word	.LANCHOR3+4000
	.fnend
	.size	rmnet_ctrl_poll, .-rmnet_ctrl_poll
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_send_cbits_tomodem, %function
ghsic_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	ip, #:lower16:.LANCHOR1
	movt	ip, #:upper16:.LANCHOR1
	ldr	r3, [ip, #1016]
	cmp	r0, #0
	cmpne	r1, r3
	bcs	.L6075
	mov	r3, #104
	mla	r1, r3, r1, ip
	ldr	r1, [r1, #1020]
	cmp	r1, #0
	beq	.L6076
	ldr	r3, [r1, #88]
	cmp	r3, r2
	beq	.L6063
	ldr	r3, [r1, #84]
	str	r2, [r1, #88]
	tst	r3, #1
	beq	.L6063
	ldr	r0, .L6078
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L6077
.L6063:
	bx	lr
.L6077:
	movw	r1, #:lower16:.LC550
	mov	r3, r2
	ldr	r2, .L6078+4
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC550
	b	__dynamic_pr_debug
.L6075:
	movw	r0, #:lower16:.LC123
	mov	r2, r1
	ldr	r1, .L6078+4
	movt	r0, #:upper16:.LC123
	b	printk
.L6076:
	movw	r0, #:lower16:.LC114
	ldr	r1, .L6078+4
	movt	r0, #:upper16:.LC114
	b	printk
.L6079:
	.align	2
.L6078:
	.word	.LANCHOR4-3120
	.word	.LANCHOR3+4016
	.fnend
	.size	ghsic_send_cbits_tomodem, .-ghsic_send_cbits_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_connect_w, %function
ghsic_ctrl_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r3, r0, #16
	bxeq	lr
	ldr	r2, [r0, #68]
	tst	r2, #2
	bxeq	lr
	ldr	r0, .L6096
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L6095
.L6082:
	movw	r0, #:lower16:.LC552
	ldr	r4, [sp]
	mvn	r2, #18
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC552
	add	sp, sp, #8
	ldr	r1, .L6096+4
	b	printk
.L6095:
	movw	r1, #:lower16:.LC551
	ldr	r2, .L6096+4
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC551
	bl	__dynamic_pr_debug
	b	.L6082
.L6097:
	.align	2
.L6096:
	.word	.LANCHOR4-3088
	.word	.LANCHOR3+4044
	.fnend
	.size	ghsic_ctrl_connect_w, .-ghsic_ctrl_connect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_unthrottle_tx, %function
ghsic_data_unthrottle_tx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r4, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L6098
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L6109
.L6098:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6109:
	add	r5, r4, #80
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #208]
	mov	r1, r0
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #208]
	bl	_raw_spin_unlock_irqrestore
	add	r2, r4, #120
	mov	r0, #4
	ldr	r1, [r4, #84]
	bl	queue_work_on
	ldr	r0, .L6110
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L6098
	movw	r1, #:lower16:.LC553
	ldr	r3, [r4]
	sub	r0, r0, #24
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC553
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r2, .L6110+4
	b	__dynamic_pr_debug
.L6111:
	.align	2
.L6110:
	.word	.LANCHOR4-3072
	.word	.LANCHOR3+4068
	.fnend
	.size	ghsic_data_unthrottle_tx, .-ghsic_data_unthrottle_tx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_send_cbits_tomodem, %function
ghsuart_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	ip, #:lower16:.LANCHOR1
	movt	ip, #:upper16:.LANCHOR1
	ldr	r3, [ip, #1856]
	cmp	r0, #0
	cmpne	r1, r3
	bcs	.L6124
	mov	r3, #84
	mla	r1, r3, r1, ip
	ldr	r1, [r1, #1860]
	cmp	r1, #0
	beq	.L6125
	ldr	r3, [r1, #92]
	cmp	r3, r2
	beq	.L6112
	ldr	r3, [r1, #88]
	str	r2, [r1, #92]
	tst	r3, #4
	beq	.L6112
	ldr	r0, .L6127
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L6126
.L6112:
	bx	lr
.L6126:
	movw	r1, #:lower16:.LC550
	mov	r3, r2
	ldr	r2, .L6127+4
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC550
	b	__dynamic_pr_debug
.L6124:
	movw	r0, #:lower16:.LC123
	mov	r2, r1
	ldr	r1, .L6127+4
	movt	r0, #:upper16:.LC123
	b	printk
.L6125:
	movw	r0, #:lower16:.LC114
	ldr	r1, .L6127+4
	movt	r0, #:upper16:.LC114
	b	printk
.L6128:
	.align	2
.L6127:
	.word	.LANCHOR4-3040
	.word	.LANCHOR5-4088
	.fnend
	.size	ghsuart_send_cbits_tomodem, .-ghsuart_send_cbits_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_wake_cb, %function
bam_data_wake_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L6144
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r4, [r0, #4]
	ldrh	r3, [r2, #-6]
	tst	r3, #4
	bne	.L6140
.L6130:
	cmp	r4, #0
	beq	.L6141
	ldr	r3, [r4]
	cmp	r3, #0
	beq	.L6142
	ldr	r0, [r3]
	cmp	r0, #0
	beq	.L6143
	ldr	r3, [r0]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L6135
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	bx	r3
.L6140:
	ldr	r3, .L6144+4
	movw	r1, #:lower16:.LC554
	sub	r0, r2, #24
	movt	r1, #:upper16:.LC554
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L6130
.L6135:
	mvn	r0, #94
.L6129:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6142:
	movw	r0, #:lower16:.LC556
	ldr	r1, .L6144+4
	movt	r0, #:upper16:.LC556
	bl	printk
	mvn	r0, #18
	b	.L6129
.L6141:
	movw	r0, #:lower16:.LC555
	ldr	r1, .L6144+4
	movt	r0, #:upper16:.LC555
	bl	printk
	mvn	r0, #18
	b	.L6129
.L6143:
	movw	r0, #:lower16:.LC557
	ldr	r1, .L6144+4
	movt	r0, #:upper16:.LC557
	bl	printk
	mvn	r0, #18
	b	.L6129
.L6145:
	.align	2
.L6144:
	.word	.LANCHOR4-3024
	.word	.LANCHOR5-4060
	.fnend
	.size	bam_data_wake_cb, .-bam_data_wake_cb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_ctrl_open, %function
ccid_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r3, #3472]
	ldr	r3, [r5, #96]
	cmp	r3, #0
	bne	.L6147
	ldr	r0, .L6154
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	mvneq	r0, #18
	bne	.L6153
.L6146:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6147:
	ldr	r4, [r5, #116]
	cmp	r4, #0
	beq	.L6149
	ldr	r0, .L6154+4
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	mvneq	r0, #15
	beq	.L6146
	movw	r1, #:lower16:.LC558
	sub	r0, r0, #24
	ldr	r2, .L6154+8
	movt	r1, #:upper16:.LC558
	bl	__dynamic_pr_debug
	mvn	r0, #15
	b	.L6146
.L6149:
	mov	r3, #1
	add	r7, r5, #92
	mov	r6, r1
	mov	r0, r7
	str	r3, [r5, #116]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r6, #124]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	b	.L6146
.L6153:
	movw	r1, #:lower16:.LC286
	sub	r0, r0, #32
	ldr	r2, .L6154+8
	movt	r1, #:upper16:.LC286
	bl	__dynamic_pr_debug
	mvn	r0, #18
	b	.L6146
.L6155:
	.align	2
.L6154:
	.word	.LANCHOR4-2992
	.word	.LANCHOR4-2976
	.word	.LANCHOR5-4040
	.fnend
	.size	ccid_ctrl_open, .-ccid_ctrl_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_open, %function
ccid_bulk_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r4, .L6169
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r3, #3472]
	ldrh	r3, [r4, #-14]
	tst	r3, #4
	bne	.L6167
.L6157:
	ldr	r3, [r5, #96]
	cmp	r3, #0
	bne	.L6158
	ldr	r3, .L6169+4
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	mvneq	r0, #18
	bne	.L6168
.L6156:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6158:
	ldr	r4, [r5, #152]
	cmp	r4, #0
	beq	.L6160
	ldr	r0, .L6169+8
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	mvneq	r0, #15
	beq	.L6156
	movw	r1, #:lower16:.LC560
	sub	r0, r0, #32
	ldr	r2, .L6169+12
	movt	r1, #:upper16:.LC560
	bl	__dynamic_pr_debug
	mvn	r0, #15
	b	.L6156
.L6160:
	mov	r3, #1
	add	r7, r5, #92
	str	r4, [r5, #148]
	mov	r0, r7
	str	r3, [r5, #152]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r6, #124]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	b	.L6156
.L6168:
	movw	r1, #:lower16:.LC286
	sub	r0, r4, #8
	ldr	r2, .L6169+12
	movt	r1, #:upper16:.LC286
	bl	__dynamic_pr_debug
	mvn	r0, #18
	b	.L6156
.L6167:
	movw	r1, #:lower16:.LC559
	sub	r0, r4, #32
	movt	r1, #:upper16:.LC559
	bl	__dynamic_pr_debug
	b	.L6157
.L6170:
	.align	2
.L6169:
	.word	.LANCHOR4-2944
	.word	.LANCHOR4-2928
	.word	.LANCHOR4-2896
	.word	.LANCHOR5-4024
	.fnend
	.size	ccid_bulk_open, .-ccid_bulk_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_disconnect, %function
frmnet_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	subs	r4, r0, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	beq	.L6193
	ldr	r3, [r4, #120]
	mov	r2, #0
	str	r2, [r4, #124]
	cmp	r3, r2
	beq	.L6194
	ldr	r0, [r4, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6176
	blx	r3
.L6176:
	ldr	r3, [r4, #140]
	mov	r1, #0
	mvn	r0, #94
	mov	r2, #32
	ldr	r3, [r3]
	strb	r0, [r3]
	strb	r1, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrh	r0, [r4, #112]
	strh	r0, [r3, #4]	@ unaligned
	strb	r1, [r3, #6]
	strb	r1, [r3, #7]
	ldrd	r0, [r4, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bge	.L6177
	ldr	r3, [r4, #120]
	cmp	r3, #0
	bne	.L6195
.L6171:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L6194:
	ldr	r0, .L6197
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L6171
	movw	r1, #:lower16:.LC561
	ldrd	r4, [sp]
	sub	r0, r0, #24
	ldrd	r6, [sp, #8]
	movt	r1, #:upper16:.LC561
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r2, .L6197+4
	b	__dynamic_pr_debug
.L6195:
	movw	r0, #:lower16:.LC562
	ldr	r1, .L6197+4
	movt	r0, #:upper16:.LC562
	bl	printk
.L6177:
	ldr	r0, .L6197+8
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L6196
.L6179:
	add	r8, r4, #132
	add	r7, r4, #144
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #144]
	mov	r9, r0
	cmp	r7, r5
	beq	.L6180
.L6181:
	mov	r0, r5
	sub	r6, r5, #8
	bl	list_del
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
	ldr	r5, [r4, #144]
	cmp	r7, r5
	bne	.L6181
.L6180:
	mov	r3, #0
	mov	r1, r9
	mov	r0, r8
	str	r3, [r4, #152]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L6196:
	movw	r1, #:lower16:.LC563
	ldrb	r3, [r4, #116]	@ zero_extendqisi2
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC563
	ldr	r2, .L6197+12
	bl	__dynamic_pr_debug
	b	.L6179
.L6193:
	movw	r0, #:lower16:.LC542
	mov	r2, r4
	ldr	r1, .L6197+4
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC542
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L6198:
	.align	2
.L6197:
	.word	.LANCHOR4-2880
	.word	.LANCHOR5-4008
	.word	.LANCHOR4-2848
	.word	.LANCHOR5-3988
	.fnend
	.size	frmnet_disconnect, .-frmnet_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_cmd_complete, %function
frmnet_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	ldr	r5, [r1, #32]
	.pad #12
	sub	sp, sp, #12
	cmp	r5, #0
	beq	.L6207
	ldr	r0, .L6209
	mov	r4, r1
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L6208
.L6201:
	ldr	lr, [r5, #96]
	cmp	lr, #0
	beq	.L6199
	ldrb	r0, [r5, #116]	@ zero_extendqisi2
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r4]
	ldr	r2, [r4, #48]
	add	r0, r0, r0, lsl #1
	add	r3, r3, r0, lsl #3
	ldrb	r0, [r3, #3328]	@ zero_extendqisi2
	mov	r3, lr
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	bx	r3
.L6208:
	ldrb	ip, [r5, #116]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC157
	mov	r3, r5
	movt	r1, #:upper16:.LC157
	ldr	r2, .L6209+4
	sub	r0, r0, #24
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L6201
.L6199:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L6207:
	ldr	r1, .L6209+4
	movw	r0, #:lower16:.LC564
	movt	r0, #:upper16:.LC564
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	printk
.L6210:
	.align	2
.L6209:
	.word	.LANCHOR4-2832
	.word	.LANCHOR5-3964
	.fnend
	.size	frmnet_cmd_complete, .-frmnet_cmd_complete
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_init, %function
gether_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LC565
	push	{r4, lr}
	.save {r4, lr}
	movt	r2, #:upper16:.LC565
	mov	r4, #0
	.pad #8
	sub	sp, sp, #8
	mov	r1, #10
	movw	r0, #:lower16:.LC84
	mov	r3, r4
	str	r4, [sp]
	movt	r1, 2
	movt	r0, #:upper16:.LC84
	str	r2, [sp, #4]
	mov	r2, #1
	bl	__alloc_workqueue_key
	movw	r3, #:lower16:.LANCHOR1
	cmp	r0, r4
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3404]
	movne	r0, r4
	bne	.L6211
	ldr	r2, .L6215
	movw	r0, #:lower16:.LC566
	movt	r0, #:upper16:.LC566
	mov	r1, r2
	bl	printk
	mvn	r0, #11
.L6211:
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L6216:
	.align	2
.L6215:
	.word	.LANCHOR5-3944
	.fnend
	.size	gether_init, .-gether_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	init, %function
init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r3, #:lower16:.LANCHOR0
	movw	lr, #:lower16:android_setup
	movt	r3, #:upper16:.LANCHOR0
	ldr	r4, .L6223
	movt	lr, #:upper16:android_setup
	movw	r0, #:lower16:android_disconnect
	movt	r0, #:upper16:android_disconnect
	movw	ip, #:lower16:android_suspend
	movw	r1, #:lower16:android_resume
	movw	r2, #:lower16:.LANCHOR1
	str	lr, [r3, #1100]
	movt	r2, #:upper16:.LANCHOR1
	movt	ip, #:upper16:android_suspend
	str	r0, [r3, #1104]
	movt	r1, #:upper16:android_resume
	mov	lr, #0
	add	r0, r3, #292
	str	r4, [r2, #3308]
	str	r4, [r2, #3312]
	str	ip, [r3, #1108]
	str	r1, [r3, #1112]
	str	lr, [r2, #3640]
	bl	platform_driver_register
	subs	r4, r0, #0
	beq	.L6217
	ldr	r2, .L6223+4
	movw	r0, #:lower16:.LC567
	movt	r0, #:upper16:.LC567
	mov	r1, r2
	bl	printk
.L6217:
	mov	r0, r4
	pop	{r4, pc}
.L6224:
	.align	2
.L6223:
	.word	.LANCHOR1+3308
	.word	.LANCHOR5-3932
	.fnend
	.size	init, .-init
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_flush, %function
conn_gadget_flush:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r0, #:lower16:.LC568
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	movt	r0, #:upper16:.LC568
	ldr	r4, [r3, #2484]
	bl	printk
	cmp	r4, #0
	beq	.L6229
	mov	r1, #1
	add	r0, r4, #200
	mov	r2, r1
	mov	r3, #0
	str	r1, [r4, #216]
	mov	r1, #3
	bl	__wake_up
	mov	r0, #0
.L6225:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6229:
	movw	r0, #:lower16:.LC569
	ldr	r1, .L6230
	movt	r0, #:upper16:.LC569
	bl	printk
	mvn	r0, #18
	b	.L6225
.L6231:
	.align	2
.L6230:
	.word	.LANCHOR5-3924
	.fnend
	.size	conn_gadget_flush, .-conn_gadget_flush
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_disconnect_w, %function
grmnet_ctrl_smd_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #-164]
	cmp	r0, #0
	beq	.L6233
	bl	smd_close
	mov	r3, #0
	str	r3, [r4, #-164]
.L6233:
	ldr	r3, [r4, #-156]
	tst	r3, #2
	bne	.L6234
	ldr	r3, [r4, #-156]
	tst	r3, #4
	beq	.L6232
.L6234:
	sub	r1, r4, #156
	mov	r0, #2
	bl	_clear_bit
	ldr	r0, [r4, #-64]
	mov	r2, #84
	ldr	r3, .L6240
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	mla	r0, r2, r0, r3
	add	r0, r0, #4
	b	platform_driver_unregister
.L6232:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6241:
	.align	2
.L6240:
	.word	.LANCHOR1+512
	.fnend
	.size	grmnet_ctrl_smd_disconnect_w, .-grmnet_ctrl_smd_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_disconnect_w, %function
ghsuart_ctrl_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #36]
	mov	r3, r0
	tst	r2, #1
	bne	.L6244
	bx	lr
.L6244:
	mov	r2, #0
	add	r1, r0, #36
	mov	r0, #2
	str	r2, [r3, #-36]
	b	_clear_bit
	.fnend
	.size	ghsuart_ctrl_disconnect_w, .-ghsuart_ctrl_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_disconnect_w, %function
ghsuart_data_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #60]
	mov	r3, r0
	tst	r2, #1
	bne	.L6247
	bx	lr
.L6247:
	mov	r2, #0
	add	r1, r0, #60
	mov	r0, #2
	str	r2, [r3, #-100]
	b	_clear_bit
	.fnend
	.size	ghsuart_data_disconnect_w, .-ghsuart_data_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_write_tomdm, %function
ghsuart_data_write_tomdm:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	subs	r5, r0, #144
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	beq	.L6248
	ldr	r3, [r0, #-140]
	cmp	r3, #0
	bne	.L6292
.L6248:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6292:
	sub	r6, r0, #40
	mov	r4, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #40]
	mov	r8, r0
	ubfx	r3, r3, #1, #1
	cmp	r3, #0
	bne	.L6258
	mov	r2, r4
	ldr	r7, [r2, #-56]!
	cmp	r7, r2
	beq	.L6252
	cmp	r7, #0
	beq	.L6252
	ldr	r2, [r4, #-48]
	ldr	r0, .L6300
	sub	r2, r2, #1
	str	r2, [r4, #-48]
	ldm	r7, {r1, r2}
	str	r3, [r7]
	str	r3, [r7, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L6293
.L6254:
	ldr	r1, .L6300+4
	ldr	r0, .L6300+8
	bl	___ratelimit
	cmp	r0, #0
	bne	.L6294
.L6251:
	ldr	r3, [r4, #68]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #68]
	bl	dev_kfree_skb_any
.L6252:
	mov	r0, r6
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, .L6300+12
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L6295
.L6255:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r4, #-132]
	mov	r8, r0
	cmp	r7, #0
	beq	.L6258
	ldr	r3, [r4, #40]
	tst	r3, #2
	bne	.L6258
	sub	r3, r4, #64
	movw	r9, #:lower16:.LANCHOR0
	movt	r9, #:upper16:.LANCHOR0
	str	r3, [sp, #12]
	b	.L6257
.L6297:
	ldr	r5, [r4, #-64]
	ldr	r0, [sp, #12]
	sub	r10, r5, #36
	cmp	r5, r0
	beq	.L6258
	ldr	r0, [r9, #1200]
	bl	__alloc_skb
	subs	fp, r0, #0
	mov	r0, r5
	beq	.L6258
	bl	list_del
	ldr	r2, [fp, #172]
	mov	r1, r8
	mov	r0, r6
	str	r2, [r5, #-36]
	ldr	r2, [r9, #1200]
	str	r2, [r5, #-32]
	str	fp, [r5, #-4]
	bl	_raw_spin_unlock_irqrestore
	ldr	ip, [r7, #8]
	mov	r2, #208
	mov	r1, r10
	mov	r0, r7
	ldr	r8, [ip, #16]
	blx	r8
	mov	r2, r0
	mov	r0, r6
	str	r2, [sp, #8]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [sp, #8]
	mov	r8, r0
	cmp	r2, #0
	bne	.L6296
.L6257:
	ldr	r0, [r4, #-140]
	mov	r2, #0
	mvn	r3, #0
	mov	r1, #32
	cmp	r0, r2
	bne	.L6297
.L6258:
	mov	r1, r8
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L6295:
	movw	r1, #:lower16:.LC551
	mov	r3, r5
	ldr	r2, .L6300+16
	movt	r1, #:upper16:.LC551
	sub	r0, r0, #24
	bl	__dynamic_pr_debug
	b	.L6255
.L6296:
	ldr	r9, .L6300+16
	mov	r0, fp
	bl	dev_kfree_skb_any
	ldr	r0, .L6300+20
	mov	r1, r9
	bl	___ratelimit
	cmp	r0, #0
	bne	.L6298
.L6259:
	ldr	r3, [r4, #-140]
	cmp	r3, #0
	bne	.L6299
	ldr	r3, [r7, #8]
	mov	r1, r10
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L6258
.L6293:
	ldr	lr, [r4, #-144]
	movw	r1, #:lower16:.LC570
	mov	r3, r5
	ldr	ip, [r4, #60]
	movt	r1, #:upper16:.LC570
	sub	r0, r0, #32
	ldr	r2, .L6300+4
	stm	sp, {ip, lr}
	bl	__dynamic_pr_debug
	b	.L6254
.L6299:
	mov	r0, r5
	ldr	r2, [r4, #-64]
	ldr	r1, [sp, #12]
	bl	__list_add
	b	.L6258
.L6294:
	movw	r0, #:lower16:.LC126
	mvn	r2, #18
	ldr	r1, .L6300+4
	movt	r0, #:upper16:.LC126
	bl	printk
	b	.L6251
.L6298:
	movw	r0, #:lower16:.LC571
	mov	r1, r9
	movt	r0, #:upper16:.LC571
	bl	printk
	b	.L6259
.L6301:
	.align	2
.L6300:
	.word	.LANCHOR4-2800
	.word	.LANCHOR5-3904
	.word	.LANCHOR0+1176
	.word	.LANCHOR4-2784
	.word	.LANCHOR5-3876
	.word	.LANCHOR0+1204
	.fnend
	.size	ghsuart_data_write_tomdm, .-ghsuart_data_write_tomdm
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_write_tohost, %function
ghsuart_data_write_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #160
	bxeq	lr
	ldr	r3, [r0, #-156]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	sub	r8, r0, #88
	strd	r10, [sp, #24]
	mov	r0, r8
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r4, #-152]
	mov	r10, r0
	cmp	r9, #0
	beq	.L6305
	ldr	r3, [r4, #-112]
	sub	r2, r4, #112
	str	r2, [sp, #8]
	cmp	r2, r3
	beq	.L6305
	ldr	r5, [r4, #-104]
	sub	r3, r4, #104
	str	r3, [sp, #12]
	cmp	r5, r3
	beq	.L6305
	movw	fp, #:lower16:.LANCHOR0
	mov	r7, #0
	movt	fp, #:upper16:.LANCHOR0
	mov	r3, fp
	mov	fp, r0
	mov	r10, r3
	b	.L6306
.L6326:
	ldr	r3, [r4, #-96]
	sub	r3, r3, #1
	str	r3, [r4, #-96]
	ldrd	r2, [r5]
	str	r7, [r5]
	str	r7, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r6, [r4, #-112]
	str	r5, [r6, #-4]
	ldr	r2, [r5, #172]
	sub	r3, r6, #36
	str	r2, [r6, #-36]
	ldr	r2, [r5, #80]
	str	r2, [r6, #-32]
	ldr	r2, [r4, #32]
	ldr	r0, [r10, #1228]
	add	r2, r2, #1
	cmp	r2, r0
	mov	r0, r6
	str	r2, [r4, #32]
	ldrb	r2, [r6, #-10]	@ zero_extendqisi2
	bfieq	r2, r7, #0, #1
	orrne	r2, r2, #1
	strbeq	r2, [r6, #-10]
	strbne	r2, [r6, #-10]
	streq	r7, [r4, #32]
	str	r3, [sp, #4]
	bl	list_del
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #4]
	mov	r2, #208
	mov	r0, r9
	ldr	ip, [r9, #8]
	mov	r1, r3
	ldr	r3, [ip, #16]
	blx	r3
	mov	r3, r0
	mov	r0, r8
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #4]
	mov	fp, r0
	cmp	r3, #0
	bne	.L6325
	ldr	r2, [r4, #-112]
	ldr	r3, [r4, #48]
	ldr	r1, [sp, #8]
	add	r3, r3, #1
	cmp	r1, r2
	str	r3, [r4, #48]
	beq	.L6321
	ldr	r5, [r4, #-104]
	ldr	r3, [sp, #12]
	cmp	r5, r3
	beq	.L6321
.L6306:
	cmp	r5, #0
	bne	.L6326
.L6321:
	mov	r10, fp
.L6305:
	mov	r1, r10
	mov	r0, r8
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L6325:
	mov	r10, r0
	movw	r0, #:lower16:.LC572
	ldr	r1, .L6327
	movt	r0, #:upper16:.LC572
	bl	printk
	ldr	r1, [sp, #8]
	mov	r0, r6
	ldr	r2, [r4, #-112]
	bl	__list_add
	mov	r0, r5
	bl	dev_kfree_skb_any
	b	.L6305
.L6328:
	.align	2
.L6327:
	.word	.LANCHOR5-3852
	.fnend
	.size	ghsuart_data_write_tohost, .-ghsuart_data_write_tohost
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_close_sdio_work, %function
rmnet_close_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L6380
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L6376
.L6330:
	ldr	r3, [r4, #-112]
	cmp	r3, #0
	beq	.L6329
	ldr	r0, [r4, #-208]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6333
	blx	r3
.L6333:
	sub	r5, r4, #116
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-204]
	mov	r2, #0
	mvn	ip, #94
	mov	r1, r0
	mov	r0, r5
	ldr	r3, [r3]
	strb	ip, [r3]
	strb	r2, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	ldrb	ip, [r4, #-200]	@ zero_extendqisi2
	strh	ip, [r3, #4]	@ unaligned
	strb	r2, [r3, #6]
	strb	r2, [r3, #7]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r0, [r4, #-208]
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	blt	.L6377
.L6334:
	ldr	r0, [r4, #-216]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6336
	blx	r3
.L6336:
	ldr	r0, [r4, #-212]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6337
	blx	r3
.L6337:
	sub	r0, r4, #68
	bl	cancel_work_sync
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-112]
	mov	r6, r0
	cmp	r3, #0
	subne	r9, r4, #172
	movne	r8, #0
	bne	.L6338
.L6348:
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L6377:
	ldr	r3, [r4, #-112]
	cmp	r3, #0
	bne	.L6378
.L6329:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L6376:
	movw	r1, #:lower16:.LC267
	sub	r0, r3, #32
	ldr	r2, .L6380+4
	movt	r1, #:upper16:.LC267
	bl	__dynamic_pr_debug
	b	.L6330
.L6339:
	bl	list_del
	ldr	r3, [r4, #-164]
	mov	r0, #0
	sub	r3, r3, #1
	str	r3, [r4, #-164]
	str	r8, [r7, #-36]
	ldr	r7, [r4, #-216]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L6338:
	ldr	r7, [r4, #-172]
	cmp	r7, r9
	mov	r0, r7
	sub	r10, r7, #36
	bne	.L6339
	sub	r9, r4, #144
	mov	r8, #0
	b	.L6340
.L6341:
	bl	list_del
	ldr	r3, [r4, #-136]
	mov	r0, #0
	sub	r3, r3, #1
	str	r3, [r4, #-136]
	str	r8, [r7, #-36]
	ldr	r7, [r4, #-212]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L6340:
	ldr	r7, [r4, #-144]
	cmp	r7, r9
	mov	r0, r7
	sub	r10, r7, #36
	bne	.L6341
	sub	r8, r4, #196
	b	.L6342
.L6343:
	bl	list_del
	ldr	r3, [r4, #-188]
	sub	r3, r3, #1
	str	r3, [r4, #-188]
	ldr	r0, [r7, #-8]
	bl	kfree
	mov	r0, r9
	bl	kfree
.L6342:
	ldr	r7, [r4, #-196]
	cmp	r7, r8
	mov	r0, r7
	sub	r9, r7, #8
	bne	.L6343
	sub	r8, r4, #184
	b	.L6344
.L6345:
	bl	list_del
	ldr	r3, [r4, #-176]
	sub	r3, r3, #1
	str	r3, [r4, #-176]
	ldr	r0, [r7, #-8]
	bl	kfree
	mov	r0, r9
	bl	kfree
.L6344:
	ldr	r7, [r4, #-184]
	cmp	r7, r8
	mov	r0, r7
	sub	r9, r7, #8
	bne	.L6345
	mov	r7, #0
	movw	r0, #:lower16:.LC573
	ldr	r1, .L6380+4
	movt	r0, #:upper16:.LC573
	sub	r8, r4, #160
	str	r7, [r4, #-108]
	bl	printk
	ldr	r3, [r4, #-160]
	cmp	r3, r8
	bne	.L6347
	b	.L6346
.L6379:
	ldr	r2, [r4, #-152]
	sub	r2, r2, #1
	str	r2, [r4, #-152]
	ldm	r3, {r1, r2}
	str	r7, [r3]
	str	r7, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #-160]
	cmp	r3, r8
	beq	.L6346
.L6347:
	subs	r0, r3, #0
	bne	.L6379
.L6346:
	ldr	r3, [r4, #-132]
	sub	r8, r4, #132
	cmp	r3, r8
	beq	.L6348
	mov	r7, #0
.L6349:
	subs	r0, r3, #0
	beq	.L6348
	ldr	r2, [r4, #-124]
	sub	r2, r2, #1
	str	r2, [r4, #-124]
	ldm	r3, {r1, r2}
	str	r7, [r3]
	str	r7, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #-132]
	cmp	r3, r8
	bne	.L6349
	b	.L6348
.L6378:
	movw	r0, #:lower16:.LC562
	ldr	r1, .L6380+4
	movt	r0, #:upper16:.LC562
	bl	printk
	b	.L6334
.L6381:
	.align	2
.L6380:
	.word	.LANCHOR4-2752
	.word	.LANCHOR5-3824
	.fnend
	.size	rmnet_close_sdio_work, .-rmnet_close_sdio_work
	.align	2
	.global	usb_gadget_connect_work
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_gadget_connect_work, %function
usb_gadget_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r2, .L6387
	movw	r4, #:lower16:speaker_status
	str	r6, [sp, #8]
	movt	r4, #:upper16:speaker_status
	mov	r5, r0
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	ldr	r6, [r0, #-444]
	ldr	ip, [r0, #52]
	movw	r0, #:lower16:.LC574
	ldr	r3, [r4]
	mov	r1, r2
	movt	r0, #:upper16:.LC574
	str	ip, [sp]
	bl	printk
	ldr	r3, [r4]
	cmp	r3, #0
	ble	.L6383
	ldr	r3, [r5, #52]
	add	r3, r3, #1
	cmp	r3, #59
	str	r3, [r5, #52]
	ble	.L6386
.L6383:
	ldr	r0, [r6]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L6382
	mov	r1, #1
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	bx	r3
.L6386:
	mov	r0, #50
	bl	msecs_to_jiffies
	movw	r1, #:lower16:system_wq
	mov	r3, r0
	movt	r1, #:upper16:system_wq
	mov	r2, r5
	ldr	r1, [r1]
	mov	r0, #4
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_delayed_work_on
.L6382:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6388:
	.align	2
.L6387:
	.word	.LANCHOR5-3800
	.fnend
	.size	usb_gadget_connect_work, .-usb_gadget_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_disconnect_work, %function
gbam_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-280]
	tst	r3, #2
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #-276]
	bl	msm_bam_dmux_close
	ldr	lr, [sp, #4]
	sub	r1, r4, #280
	mov	r0, #1
	ldr	r4, [sp]
	add	sp, sp, #8
	b	_clear_bit
	.fnend
	.size	gbam_disconnect_work, .-gbam_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam2bam_disconnect_work, %function
gbam2bam_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-168]
	cmp	r3, #7
	bxne	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	sub	r0, r0, #164
	str	lr, [sp, #4]
	bl	usb_bam_disconnect_ipa
	subs	r2, r0, #0
	bne	.L6405
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6405:
	movw	r0, #:lower16:.LC575
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC575
	add	sp, sp, #8
	ldr	r1, .L6406
	b	printk
.L6407:
	.align	2
.L6406:
	.word	.LANCHOR5-3776
	.fnend
	.size	gbam2bam_disconnect_work, .-gbam2bam_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam2bam_data_disconnect_work, %function
bam2bam_data_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-124]
	cmp	r3, #7
	bxne	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	sub	r0, r0, #120
	str	lr, [sp, #4]
	bl	usb_bam_disconnect_ipa
	subs	r2, r0, #0
	bne	.L6419
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6419:
	movw	r0, #:lower16:.LC575
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC575
	add	sp, sp, #8
	ldr	r1, .L6420
	b	printk
.L6421:
	.align	2
.L6420:
	.word	.LANCHOR5-3748
	.fnend
	.size	bam2bam_data_disconnect_work, .-bam2bam_data_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_function_init, %function
ncm_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r5, #:lower16:kmalloc_caches
	movt	r5, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	mov	r6, r0
	ldr	r0, [r5, #24]
	str	lr, [sp, #12]
	cmp	r0, #0
	beq	.L6427
	mov	r2, #16
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L6428
	ldr	r0, [r5, #24]
	cmp	r0, #0
	beq	.L6423
	mov	r2, #6
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r6, #4]
	beq	.L6433
.L6426:
	mov	ip, #65024
	movw	r1, #:lower16:ncm_work
	ldr	r0, .L6435
	mov	r3, r4
	movt	ip, 65535
	movt	r1, #:upper16:ncm_work
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	str	ip, [r3], #4
	str	r3, [r4, #4]
	str	r3, [r4, #8]
	str	r1, [r4, #12]
	str	r4, [r2, #3612]
	bl	misc_register
	cmp	r0, #0
	bne	.L6434
.L6422:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6427:
	mov	r4, #16
.L6423:
	mov	r3, #16
	str	r3, [r6, #4]
	b	.L6426
.L6433:
	mov	r0, r4
	bl	kfree
	mvn	r0, #11
	b	.L6422
.L6428:
	mvn	r0, #11
	b	.L6422
.L6434:
	movw	r0, #:lower16:.LC576
	ldr	r1, .L6435+4
	movt	r0, #:upper16:.LC576
	bl	printk
	mov	r0, #0
	b	.L6422
.L6436:
	.align	2
.L6435:
	.word	.LANCHOR0+748
	.word	.LANCHOR5-3716
	.fnend
	.size	ncm_function_init, .-ncm_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	show_timestamp, %function
show_timestamp:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #3664]
	.pad #28
	sub	sp, sp, #28
	cmp	r0, #0
	moveq	r4, r0
	beq	.L6437
	mov	fp, r3
	movw	r3, #:lower16:kmalloc_caches
	str	r1, [sp, #16]
	movt	r3, #:upper16:kmalloc_caches
	str	r2, [sp, #20]
	ldr	r0, [r3, #48]
	cmp	r0, #0
	beq	.L6446
	mov	r2, #4096
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L6450
.L6439:
	ldr	r7, .L6451
	add	r0, r7, #4
	bl	_raw_read_lock_irqsave
	ldr	r3, [r7]
	str	r0, [sp, #12]
	add	r4, r3, #1
	and	r4, r4, #31
	cmp	r3, r4
	moveq	r5, #0
	beq	.L6441
	movw	r8, #:lower16:.LC82
	mov	r5, #0
	movt	r8, #:upper16:.LC82
	sub	r9, r7, #4096
.L6440:
	add	r10, r9, r4, lsl #7
	mov	r1, #128
	mov	r0, r10
	bl	strnlen
	cmp	r0, #0
	rsb	r1, r5, #4096
	mov	r3, r10
	mov	r2, r8
	add	ip, r4, #1
	add	r0, r6, r5
	beq	.L6442
	bl	scnprintf
	ldr	r3, [r7]
	add	r4, r4, #1
	add	r5, r5, r0
	and	r4, r4, #31
	cmp	r3, r4
	bne	.L6440
.L6441:
	ldr	r0, .L6451+4
	ldr	r1, [sp, #12]
	bl	_raw_read_unlock_irqrestore
	ldrd	r0, [sp, #16]
	mov	r2, fp
	mov	r3, r6
	str	r5, [sp]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r6
	bl	kfree
.L6437:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6442:
	ldr	r3, [r7]
	and	r4, ip, #31
	cmp	r4, r3
	bne	.L6440
	b	.L6441
.L6446:
	mov	r6, #16
	b	.L6439
.L6450:
	mvn	r4, #11
	b	.L6437
.L6452:
	.align	2
.L6451:
	.word	dbg_data+4096
	.word	dbg_data+4100
	.fnend
	.size	show_timestamp, .-show_timestamp
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_connect_w, %function
ghsic_data_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r3, r0, #88
	bxeq	lr
	ldr	r2, [r0, #-84]
	cmp	r2, #0
	bxeq	lr
	ldr	r2, [r0, #92]
	tst	r2, #2
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	ldr	r0, .L6472
	str	lr, [sp, #4]
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L6471
.L6455:
	movw	r0, #:lower16:.LC577
	ldr	r2, [r4, #68]
	mvn	r3, #18
	ldr	r4, [sp]
	movt	r0, #:upper16:.LC577
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r1, .L6472+4
	b	printk
.L6471:
	movw	r1, #:lower16:.LC551
	ldr	r2, .L6472+4
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC551
	bl	__dynamic_pr_debug
	b	.L6455
.L6473:
	.align	2
.L6472:
	.word	.LANCHOR4-2736
	.word	.LANCHOR5-3696
	.fnend
	.size	ghsic_data_connect_w, .-ghsic_data_connect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_connect_w, %function
ghsuart_ctrl_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r3, r0, #36
	bxeq	lr
	ldr	r2, [r0, #52]
	tst	r2, #2
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	ldr	r0, .L6494
	str	r6, [sp, #8]
	ldr	r5, .L6494+4
	str	lr, [sp, #12]
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L6489
.L6476:
	ldr	r3, [r4, #52]
	tst	r3, #1
	beq	.L6477
	mov	r1, #900
	sub	r0, r4, #20
	bl	wait_for_completion_timeout
	cmp	r0, #0
	movweq	r0, #:lower16:.LC578
	subeq	r1, r5, #8
	movteq	r0, #:upper16:.LC578
	beq	.L6493
.L6477:
	movw	r0, #:lower16:.LC579
	sub	r1, r5, #8
	movt	r0, #:upper16:.LC579
.L6493:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L6489:
	movw	r1, #:lower16:.LC551
	sub	r2, r5, #8
	movt	r1, #:upper16:.LC551
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L6476
.L6495:
	.align	2
.L6494:
	.word	.LANCHOR4-2704
	.word	.LANCHOR5-3664
	.fnend
	.size	ghsuart_ctrl_connect_w, .-ghsuart_ctrl_connect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_connect_w, %function
ghsuart_data_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r3, r0, #112
	bxeq	lr
	ldr	r2, [r0, #-108]
	cmp	r2, #0
	bxeq	lr
	ldr	r2, [r0, #76]
	tst	r2, #2
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	ldr	r0, .L6520
	str	lr, [sp, #4]
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L6518
.L6498:
	ldr	r3, [r4, #76]
	tst	r3, #1
	beq	.L6499
	mov	r1, #900
	sub	r0, r4, #84
	bl	wait_for_completion_timeout
	cmp	r0, #0
	beq	.L6519
.L6499:
	movw	r0, #:lower16:.LC580
	ldr	r2, [r4, #68]
	mvn	r3, #18
	ldr	r4, [sp]
	movt	r0, #:upper16:.LC580
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r1, .L6520+4
	b	printk
.L6519:
	movw	r0, #:lower16:.LC578
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC578
	add	sp, sp, #8
	ldr	r1, .L6520+4
	b	printk
.L6518:
	movw	r1, #:lower16:.LC551
	ldr	r2, .L6520+4
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC551
	bl	__dynamic_pr_debug
	b	.L6498
.L6521:
	.align	2
.L6520:
	.word	.LANCHOR4-2688
	.word	.LANCHOR5-3648
	.fnend
	.size	ghsuart_data_connect_w, .-ghsuart_data_connect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	str_to_xport, %function
str_to_xport:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movw	r0, #:lower16:.LC581
	mov	r1, r4
	movt	r0, #:upper16:.LC581
	str	lr, [sp, #4]
	mov	r2, #12
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #1
	beq	.L6522
	movw	r0, #:lower16:.LC582
	mov	r2, #12
	movt	r0, #:upper16:.LC582
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #2
	beq	.L6522
	movw	r0, #:lower16:.LC583
	mov	r2, #12
	movt	r0, #:upper16:.LC583
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #3
	beq	.L6522
	movw	r0, #:lower16:.LC584
	mov	r2, #12
	movt	r0, #:upper16:.LC584
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #4
	beq	.L6522
	movw	r0, #:lower16:.LC585
	mov	r2, #12
	movt	r0, #:upper16:.LC585
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #5
	beq	.L6522
	movw	r0, #:lower16:.LC586
	mov	r2, #12
	movt	r0, #:upper16:.LC586
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #6
	beq	.L6522
	movw	r0, #:lower16:.LC587
	mov	r2, #12
	movt	r0, #:upper16:.LC587
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #7
	beq	.L6522
	movw	r0, #:lower16:.LC588
	mov	r2, #12
	movt	r0, #:upper16:.LC588
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #8
	beq	.L6522
	movw	r0, #:lower16:.LC589
	mov	r2, #12
	movt	r0, #:upper16:.LC589
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #9
	beq	.L6522
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #0
	moveq	r0, #10
	movne	r0, #0
.L6522:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	str_to_xport, .-str_to_xport
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	__ffs_event_add.part.70, %function
__ffs_event_add.part.70:
	.fnstart
	@ Volatile: function does not return.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	.syntax divided
@ 2155 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 2155, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
	.fnend
	.size	__ffs_event_add.part.70, .-__ffs_event_add.part.70
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_setup, %function
ffs_func_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #-28]
	ldr	r3, [r5, #92]
	cmp	r3, #2
	bne	.L6547
	ldrb	r3, [r1]	@ zero_extendqisi2
	and	r3, r3, #31
	cmp	r3, #1
	beq	.L6538
	cmp	r3, #2
	beq	.L6539
	mvn	r4, #94
.L6536:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6539:
	ldrh	r3, [r1, #4]	@ unaligned
	and	r3, r3, #15
	add	r0, r0, r3
	ldrb	r4, [r0, #-20]	@ zero_extendqisi2
	cmp	r4, #0
	beq	.L6550
.L6541:
	add	r6, r5, #116
	mov	r8, r1
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r1, [r5, #96]
	mov	r7, r0
	ldr	r2, [r8]	@ unaligned
	ldr	r3, [r8, #4]	@ unaligned
	ldrh	r0, [r5, #104]
	cmp	r1, #1
	strd	r2, [r5, #108]
	moveq	r3, #2
	add	r2, r5, #100
	strh	r4, [r5, #112]	@ movhi
	mov	ip, r2
	streq	r3, [r5, #96]
	cmp	r0, #0
	beq	.L6551
	add	r0, r0, r2
	mov	r3, r2
.L6546:
	ldrb	r1, [r3], #1	@ zero_extendqisi2
	cmp	r1, #4
	strbne	r1, [r2]
	addne	r2, r2, #1
	cmp	r0, r3
	bne	.L6546
	sub	r2, r2, ip
	add	r3, r2, #1
	uxth	r0, r2
	uxth	r3, r3
.L6544:
	add	r0, r5, r0
	strh	r3, [r5, #104]	@ movhi
	mov	ip, #4
	mov	r2, #1
	mov	r1, #3
	mov	r4, #0
	strb	ip, [r0, #100]
	mov	r0, r6
	bl	__wake_up_locked
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L6536
.L6538:
	ldrh	ip, [r5, #178]
	ldrh	lr, [r1, #4]	@ unaligned
	ldr	r4, [r0, #-4]
	cmp	ip, #0
	uxtb	lr, lr
	beq	.L6550
	mov	r2, r4
.L6542:
	mov	r3, r2
	ldrsh	r0, [r3], #2
	cmp	r0, #0
	blt	.L6540
	cmp	r0, lr
	beq	.L6559
.L6540:
	subs	ip, ip, #1
	mov	r2, r3
	bne	.L6542
.L6550:
	mvn	r4, #32
	b	.L6536
.L6559:
	sub	r2, r2, r4
	cmp	r2, #0
	asr	r4, r2, #1
	bge	.L6541
	b	.L6536
.L6551:
	mov	r3, #1
	b	.L6544
.L6547:
	mvn	r4, #18
	b	.L6536
	.fnend
	.size	ffs_func_setup, .-ffs_func_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_read, %function
ffs_epfile_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L6614
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r3, r2, #1
	strd	r6, [sp, #8]
	mvn	r3, r3, lsr #10
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	fp, r2
	mvn	r3, r3, lsl #10
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #52
	sub	sp, sp, #52
	ldrh	r2, [ip, #-14]
	add	r3, r3, #1
	mov	r10, r0
	str	r1, [sp, #20]
	ldr	r1, [r4, #36]
	str	r3, [sp, #12]
	tst	r2, #4
	str	r1, [sp, #16]
	bne	.L6604
.L6561:
	ldr	r6, [r4, #32]
	cmp	r6, #0
	bne	.L6585
	ldr	r3, [r4, #36]
	ldr	r3, [r3, #92]
	cmp	r3, #2
	bne	.L6563
	mov	r3, sp
	bic	r7, r3, #8128
	bic	r7, r7, #63
.L6564:
	ldr	r5, [r4, #40]
	cmp	r5, #0
	beq	.L6605
.L6583:
	ldrb	r9, [r4, #53]	@ zero_extendqisi2
	cmp	r9, #0
	beq	.L6569
	ldrb	r3, [r4, #54]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L6606
.L6570:
	ldr	r3, [r10, #32]
	mov	r0, r4
	tst	r3, #2048
	bne	.L6607
	bl	mutex_lock_interruptible
	subs	r8, r0, #0
	bne	.L6565
.L6574:
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #40]
	cmp	r3, r5
	bne	.L6608
	cmp	r9, #0
	bne	.L6609
	ldr	r7, [r5, #4]
	movw	r3, #:lower16:ffs_epfile_io_complete
	mov	r2, #32
	ldr	r0, [sp, #12]
	movt	r3, #:upper16:ffs_epfile_io_complete
	ldr	r8, [sp, #16]
	str	r6, [r7]
	mov	r1, r7
	str	r0, [r7, #4]
	str	r3, [r7, #28]
	str	r9, [r8, #68]!
	str	r8, [r7, #32]
	ldr	r0, [r5]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
	cmp	r9, #0
	blt	.L6592
	mov	r0, r8
	bl	wait_for_completion_interruptible
	cmp	r0, #0
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bne	.L6610
	bl	_raw_spin_lock_irq
	ldr	r0, [r4, #36]
	ldr	r3, [r4, #40]
	cmp	r5, r3
	beq	.L6580
	add	r0, r0, #24
	mvn	r8, #18
	bl	_raw_spin_unlock_irq
.L6577:
	mov	r0, r4
	bl	mutex_unlock
.L6565:
	mov	r0, r6
	bl	kfree
.L6560:
	mov	r0, r8
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6607:
	bl	mutex_trylock
	cmp	r0, #0
	bne	.L6574
.L6591:
	mvn	r8, #10
	b	.L6565
.L6569:
	cmp	r6, #0
	bne	.L6570
	movw	r1, #32976
	ldr	r0, [sp, #12]
	bl	__kmalloc
	subs	r6, r0, #0
	bne	.L6570
	mvn	r8, #11
	b	.L6560
.L6605:
	ldr	r3, [r10, #32]
	tst	r3, #2048
	bne	.L6591
	ldr	r3, [r4, #32]
	cmp	r3, #0
	bne	.L6588
	ldr	r0, [r7, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #40
	movt	r2, #:upper16:autoremove_wake_function
	add	r8, r4, #20
	str	r3, [sp, #28]
	str	r1, [sp, #40]
	str	r0, [sp, #32]
	str	r2, [sp, #36]
	str	r1, [sp, #44]
	b	.L6568
.L6611:
	bl	schedule
.L6568:
	mov	r2, #1
	add	r1, sp, #28
	mov	r0, r8
	bl	prepare_to_wait
	ldr	r5, [r4, #40]
	cmp	r5, #0
	bne	.L6566
	ldr	r3, [r7, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L6611
	mov	r0, r8
	add	r1, sp, #28
	mov	r8, #65024
	bl	finish_wait
	movt	r8, 65535
	b	.L6565
.L6566:
	add	r1, sp, #28
	mov	r0, r8
	bl	finish_wait
	b	.L6583
.L6580:
	ldr	r8, [r5, #24]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
	cmp	r8, #0
	ble	.L6577
	cmp	fp, r8
	mvncc	r8, #74
	bcc	.L6577
	mov	r3, sp
	ldr	r1, [sp, #20]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r1, r8; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L6612
.L6581:
	mvn	r8, #13
	b	.L6577
.L6608:
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
	mov	r0, r4
	bl	mutex_unlock
	ldr	r3, [r4, #36]
	ldr	r3, [r3, #92]
	cmp	r3, #2
	beq	.L6564
.L6563:
	movw	r0, #:lower16:.LC33
	movw	r1, #785
	movt	r0, #:upper16:.LC33
	mvn	r8, #18
	bl	warn_slowpath_null
	b	.L6565
.L6604:
	mov	r2, r3
	mov	r3, #1
	movw	r1, #:lower16:.LC590
	sub	r0, ip, #32
	strd	r2, [sp]
	movt	r1, #:upper16:.LC590
	ldr	r2, .L6614+4
	mov	r3, fp
	bl	__dynamic_pr_debug
	b	.L6561
.L6609:
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L6613
	ldr	r3, [r0, #8]
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
.L6584:
	ldr	r0, [r4, #36]
	mvn	r8, #73
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
	b	.L6577
.L6592:
	mvn	r8, #4
	b	.L6577
.L6610:
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #40]
	cmp	r5, r3
	bne	.L6579
	ldr	r0, [r5]
	mov	r1, r7
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L6579:
	ldr	r0, [r4, #36]
	mvn	r8, #3
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
	b	.L6577
.L6588:
	mvn	r8, #18
	b	.L6565
.L6612:
	mov	r0, r1
	mov	r2, r8
	mov	r1, r6
	bl	__copy_to_user
	cmp	r0, #0
	beq	.L6577
	b	.L6581
.L6585:
	mvn	r8, #18
	b	.L6560
.L6606:
	mvn	r8, #21
	b	.L6565
.L6613:
	movw	r0, #:lower16:.LC33
	mov	r1, #860
	movt	r0, #:upper16:.LC33
	bl	warn_slowpath_null
	b	.L6584
.L6615:
	.align	2
.L6614:
	.word	.LANCHOR4-2656
	.word	.LANCHOR5-3624
	.fnend
	.size	ffs_epfile_read, .-ffs_epfile_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_resume, %function
frmnet_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L6638
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r5, #:lower16:.LANCHOR1
	str	r6, [sp, #8]
	mov	r6, r0
	movt	r5, #:upper16:.LANCHOR1
	str	lr, [sp, #12]
	ldrb	r0, [r0, #116]	@ zero_extendqisi2
	.pad #8
	sub	sp, sp, #8
	ldrh	r2, [r3, #-6]
	add	r3, r0, r0, lsl #1
	tst	r2, #4
	add	r3, r5, r3, lsl #3
	ldr	r4, [r3, #3316]
	bne	.L6635
.L6617:
	cmp	r4, #10
	bhi	.L6619
	mov	r3, #1
	lsl	r3, r3, r4
	tst	r3, #1824
	bne	.L6616
	tst	r3, #192
	beq	.L6619
	sub	r4, r4, #6
	cmp	r4, #1
	bls	.L6636
.L6616:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6636:
	add	r3, r0, r0, lsl #1
	ldr	r0, .L6638+4
	add	r3, r5, r3, lsl #3
	ldrh	r2, [r0, #-14]
	ldrb	r3, [r3, #3324]	@ zero_extendqisi2
	tst	r2, #4
	add	r2, r5, r3, lsl #2
	ldr	r4, [r2, #3668]
	bne	.L6637
.L6621:
	ldr	r1, [r5, #3532]
	add	r2, r4, #332
	mov	r0, #4
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on
.L6635:
	sub	r2, r4, #1
	cmp	r2, #9
	movwhi	r3, #:lower16:.LC182
	movthi	r3, #:upper16:.LC182
	bhi	.L6618
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r3, r3, r2, lsl #2
	ldr	r3, [r3, #1100]
.L6618:
	movw	r1, #:lower16:.LC591
	str	r6, [sp]
	ldr	r2, .L6638+8
	str	r0, [sp, #4]
	movt	r1, #:upper16:.LC591
	ldr	r0, .L6638+12
	bl	__dynamic_pr_debug
	ldrb	r0, [r6, #116]	@ zero_extendqisi2
	b	.L6617
.L6637:
	movw	r1, #:lower16:.LC592
	ldr	r2, .L6638+16
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC592
	bl	__dynamic_pr_debug
	b	.L6621
.L6619:
	sub	r4, r4, #1
	cmp	r4, #9
	bhi	.L6624
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r4, r3, r4, lsl #2
	ldr	r2, [r4, #1100]
.L6622:
	ldr	r1, .L6638+8
	movw	r0, #:lower16:.LC593
	movt	r0, #:upper16:.LC593
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L6624:
	movw	r2, #:lower16:.LC182
	movt	r2, #:upper16:.LC182
	b	.L6622
.L6639:
	.align	2
.L6638:
	.word	.LANCHOR4-2640
	.word	.LANCHOR4-2608
	.word	.LANCHOR5-3608
	.word	.LANCHOR4-2664
	.word	.LANCHOR5-3592
	.fnend
	.size	frmnet_resume, .-frmnet_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_add_header, %function
rndis_add_header:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r4, [r0, #124]	@ zero_extendqisi2
	cmp	r4, #0
	beq	.L6641
	ldr	r4, [r0, #144]
	cmp	r4, #0
	beq	.L6642
	mov	r1, #44
	mov	r0, r4
	bl	__memzero
	mov	r3, #0
	mov	r2, #1
	ldr	r0, .L6653
	mov	r1, #36
	strb	r2, [r4]
	strb	r3, [r4, #1]
	strb	r3, [r4, #2]
	strb	r3, [r4, #3]
	ldr	r2, [r5, #80]
	strb	r1, [r4, #8]
	strb	r3, [r4, #9]
	strb	r3, [r4, #10]
	add	r2, r2, #44
	str	r2, [r4, #4]	@ unaligned
	strb	r3, [r4, #11]
	ldr	r3, [r5, #80]
	str	r3, [r4, #12]	@ unaligned
	ldrh	r1, [r0, #-6]
	tst	r1, #4
	bne	.L6652
.L6643:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6641:
	mov	r1, #44
	mov	r0, r5
	bl	skb_realloc_headroom
	subs	r7, r0, #0
	beq	.L6644
	mov	r1, #44
	bl	skb_push
	mov	r1, #44
	mov	r6, r0
	bl	__memzero
	mov	r3, #1
	mov	r2, #36
	strb	r3, [r6]
	strb	r4, [r6, #1]
	strb	r4, [r6, #2]
	strb	r4, [r6, #3]
	ldr	r3, [r7, #80]
	str	r3, [r6, #4]	@ unaligned
	strb	r2, [r6, #8]
	strb	r4, [r6, #9]
	strb	r4, [r6, #10]
	strb	r4, [r6, #11]
	ldr	r3, [r7, #80]
	sub	r3, r3, #44
	str	r3, [r6, #12]	@ unaligned
.L6644:
	mov	r0, r5
	mov	r5, r7
	bl	dev_kfree_skb_any
	b	.L6643
.L6652:
	movw	r1, #:lower16:.LC594
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC594
	bl	__dynamic_pr_debug
	b	.L6643
.L6642:
	movw	r0, #:lower16:.LC595
	mov	r5, r4
	movt	r0, #:upper16:.LC595
	bl	printk
	b	.L6643
.L6654:
	.align	2
.L6653:
	.word	.LANCHOR4-2592
	.fnend
	.size	rndis_add_header, .-rndis_add_header
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_init.part.89, %function
rndis_init.part.89:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movw	r1, #:lower16:.LC596
	str	r6, [sp, #8]
	movw	r6, #:lower16:__stack_chk_guard
	movt	r4, #:upper16:.LANCHOR1
	movt	r6, #:upper16:__stack_chk_guard
	str	lr, [sp, #12]
	.pad #32
	sub	sp, sp, #32
	ldr	r3, [r6]
	movt	r1, #:upper16:.LC596
	mov	r2, #0
	add	r5, r4, #3680
	add	r0, sp, #8
	str	r3, [sp, #28]
	bl	sprintf
	add	r0, sp, #8
	ldr	r3, .L6671
	mov	r2, #0
	mov	r1, #432
	str	r5, [sp]
	bl	proc_create_data
	cmp	r0, #0
	bne	.L6656
	ldr	r4, .L6671+4
	ldrh	r3, [r4, #-14]
	tst	r3, #4
	bne	.L6668
.L6657:
	ldr	r3, .L6671+8
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L6669
.L6658:
	mvn	r0, #4
	b	.L6655
.L6656:
	mov	r2, #0
	mov	r3, r5
	mov	r1, #1
	mov	r0, r2
	strh	r2, [r3], #52	@ movhi
	str	r2, [r4, #3684]
	str	r1, [r4, #3696]
	str	r3, [r4, #3732]
	str	r3, [r4, #3736]
	strb	r1, [r4, #3740]
.L6655:
	ldr	r2, [sp, #28]
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L6670
	add	sp, sp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6668:
	movw	r1, #:lower16:.LC597
	ldr	r2, .L6671+12
	sub	r0, r4, #32
	movt	r1, #:upper16:.LC597
	bl	__dynamic_pr_debug
	b	.L6657
.L6669:
	movw	r1, #:lower16:.LC598
	sub	r0, r4, #8
	movt	r1, #:upper16:.LC598
	bl	__dynamic_pr_debug
	b	.L6658
.L6670:
	bl	__stack_chk_fail
.L6672:
	.align	2
.L6671:
	.word	.LANCHOR5-3580
	.word	.LANCHOR4-2560
	.word	.LANCHOR4-2544
	.word	.LANCHOR5-3472
	.fnend
	.size	rndis_init.part.89, .-rndis_init.part.89
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_setup.part.91, %function
bam_data_setup.part.91:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r2, #0
	movw	r0, #:lower16:.LC599
	strd	r6, [sp, #8]
	mov	r3, r2
	movt	r0, #:upper16:.LC599
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	mov	r1, #10
	movw	r4, #:lower16:.LANCHOR1
	str	r2, [sp]
	mov	r2, #1
	movt	r4, #:upper16:.LANCHOR1
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r4, #3744]
	beq	.L6684
	movw	r2, #:lower16:kmalloc_caches
	ldr	r3, [r4, #3748]
	movt	r2, #:upper16:kmalloc_caches
	ldr	r0, [r2, #32]
	add	r3, r3, #1
	cmp	r0, #0
	str	r3, [r4, #3748]
	beq	.L6685
	mov	r2, #232
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L6686
.L6676:
	ldr	r6, .L6688
	mov	r5, #0
	movw	r1, #:lower16:bam2bam_data_connect_work
	movt	r1, #:upper16:bam2bam_data_connect_work
	mov	r2, #65024
	str	r5, [r3]
	movw	lr, #:lower16:bam2bam_data_disconnect_work
	movw	ip, #:lower16:bam2bam_data_suspend_work
	str	r3, [r3, #16]
	movt	r2, 65535
	movt	lr, #:upper16:bam2bam_data_disconnect_work
	ldrh	r0, [r6, #-14]
	movt	ip, #:upper16:bam2bam_data_suspend_work
	str	r3, [r4, #3752]
	str	r2, [r3, #168]
	add	r4, r3, #172
	str	r1, [r3, #180]
	movw	r1, #:lower16:bam2bam_data_resume_work
	movt	r1, #:upper16:bam2bam_data_resume_work
	str	r4, [r3, #172]
	ubfx	r0, r0, #2, #1
	str	r2, [r3, #184]
	str	lr, [r3, #196]
	cmp	r0, r5
	add	lr, r3, #188
	str	r2, [r3, #200]
	str	ip, [r3, #212]
	add	ip, r3, #204
	str	r2, [r3, #216]
	add	r2, r3, #220
	str	r4, [r3, #176]
	str	lr, [r3, #188]
	str	lr, [r3, #192]
	str	ip, [r3, #204]
	str	ip, [r3, #208]
	str	r2, [r3, #220]
	str	r2, [r3, #224]
	str	r1, [r3, #228]
	bne	.L6687
.L6673:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L6685:
	mov	r3, #16
	b	.L6676
.L6687:
	movw	r1, #:lower16:.LC602
	sub	r0, r6, #32
	ldr	r2, .L6688+4
	movt	r1, #:upper16:.LC602
	str	r5, [sp]
	bl	__dynamic_pr_debug
	mov	r0, r5
	b	.L6673
.L6686:
	ldr	ip, [r4, #3748]
	movw	r0, #:lower16:.LC601
	mov	r2, r3
	mov	r5, r3
	mov	r7, r3
	ldr	r1, .L6688+8
	movt	r0, #:upper16:.LC601
	ldr	r6, .L6688+12
	sub	r3, ip, #1
	str	r3, [r4, #3748]
	bl	printk
.L6677:
	ldr	r3, [r4, #3748]
	cmp	r5, r3
	blt	.L6679
	ldr	r0, [r4, #3744]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L6673
.L6684:
	movw	r0, #:lower16:.LC600
	ldr	r1, .L6688+8
	movt	r0, #:upper16:.LC600
	bl	printk
	mvn	r0, #11
	b	.L6673
.L6679:
	ldr	r0, [r6, r5, lsl #2]
	bl	kfree
	str	r7, [r6, r5, lsl #2]
	add	r5, r5, #1
	b	.L6677
.L6689:
	.align	2
.L6688:
	.word	.LANCHOR4-2512
	.word	.LANCHOR5-3444
	.word	.LANCHOR5-3460
	.word	.LANCHOR1+3752
	.fnend
	.size	bam_data_setup.part.91, .-bam_data_setup.part.91
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_bind_config, %function
android_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r1, .L6710
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r3, #3308]
	ldr	r0, [r0, #24]
	cmp	r3, r1
	beq	.L6691
	sub	r2, r3, #520
	ldr	r3, [r3, #-512]
	cmp	r0, r3
	bne	.L6692
	b	.L6691
.L6693:
	ldr	r3, [r3, #-512]
	cmp	r0, r3
	beq	.L6691
.L6692:
	ldr	r3, [r2, #520]
	cmp	r3, r1
	sub	r2, r3, #520
	bne	.L6693
.L6691:
	mov	r5, r6
	ldr	r4, [r5, #112]!
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L6694
.L6700:
	ldr	r0, [r4]
	mov	r1, r6
	ldr	r3, [r0, #40]
	blx	r3
	subs	r7, r0, #0
	bne	.L6708
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	bne	.L6700
.L6694:
	mov	r7, #0
.L6690:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6708:
	ldr	r2, .L6710+4
	movw	r0, #:lower16:.LC603
	add	r5, r6, #36
	ldr	r3, [r4]
	movt	r0, #:upper16:.LC603
	mov	r1, r2
	ldr	r3, [r3]
	bl	printk
	b	.L6697
.L6698:
	bl	list_del
	ldr	r3, [r4, #-36]
	cmp	r3, #0
	bne	.L6709
.L6697:
	ldr	r4, [r6, #36]
	cmp	r4, r5
	mov	r0, r4
	sub	r8, r4, #72
	bne	.L6698
	ldr	r3, [r6, #12]
	cmp	r3, #0
	beq	.L6690
	mov	r0, r6
	blx	r3
	b	.L6690
.L6709:
	mov	r1, r8
	mov	r0, r6
	blx	r3
	b	.L6697
.L6711:
	.align	2
.L6710:
	.word	.LANCHOR1+3308
	.word	.LANCHOR5-3420
	.fnend
	.size	android_bind_config, .-android_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_in_max_packet_size_store, %function
conn_gadget_in_max_packet_size_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r3
	bx	lr
	.fnend
	.size	conn_gadget_in_max_packet_size_store, .-conn_gadget_in_max_packet_size_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	_snd_pcm_hw_param_set.constprop.101, %function
_snd_pcm_hw_param_set.constprop.101:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	add	r0, r0, #4
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L6737
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L6716
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L6715
.L6716:
	lsr	r6, r1, #5
	and	r3, r1, #31
	mov	r5, #1
	add	r6, r4, r6, lsl #2
	mov	r1, #32
	ldr	r7, [r6, #4]
	and	r7, r7, r5, lsl r3
	bl	__memzero
	str	r7, [r6, #4]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L6723
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L6719
.L6723:
	mov	r0, r5
	b	.L6718
.L6737:
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L6715
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L6716
.L6715:
	lsr	r5, r1, #5
	and	r3, r1, #31
	mov	r2, #1
	add	r5, r4, r5, lsl #2
	mov	r1, #32
	ldr	r6, [r5, #4]
	and	r6, r6, r2, lsl r3
	bl	__memzero
	str	r6, [r5, #4]
	ldr	r0, [r4, #4]
	cmp	r0, #0
	bne	.L6738
	ldr	r3, [r4, #8]
	cmp	r3, #0
	bne	.L6713
.L6719:
	mvn	r0, #21
.L6718:
	ldr	r2, [r4, #512]
	ldr	r3, [r4, #516]
	orr	r2, r2, #1
	orr	r3, r3, #1
	str	r2, [r4, #512]
	str	r3, [r4, #516]
.L6713:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6738:
	mov	r0, #0
	b	.L6713
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.101, .-_snd_pcm_hw_param_set.constprop.101
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	_snd_pcm_hw_param_set.constprop.102, %function
_snd_pcm_hw_param_set.constprop.102:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	add	r0, r0, #36
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L6763
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L6742
	ldr	r3, [r4, #40]
	cmp	r3, #0
	beq	.L6741
.L6742:
	lsr	r6, r1, #5
	and	r3, r1, #31
	mov	r5, #1
	add	r6, r4, r6, lsl #2
	mov	r1, #32
	ldr	r7, [r6, #36]
	and	r7, r7, r5, lsl r3
	bl	__memzero
	str	r7, [r6, #36]
	ldr	r3, [r4, #36]
	cmp	r3, #0
	bne	.L6749
	ldr	r3, [r4, #40]
	cmp	r3, #0
	beq	.L6745
.L6749:
	mov	r0, r5
	b	.L6744
.L6763:
	ldr	r3, [r4, #40]
	cmp	r3, #0
	beq	.L6741
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L6742
.L6741:
	lsr	r5, r1, #5
	and	r3, r1, #31
	mov	r2, #1
	add	r5, r4, r5, lsl #2
	mov	r1, #32
	ldr	r6, [r5, #36]
	and	r6, r6, r2, lsl r3
	bl	__memzero
	str	r6, [r5, #36]
	ldr	r0, [r4, #36]
	cmp	r0, #0
	bne	.L6764
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L6739
.L6745:
	mvn	r0, #21
.L6744:
	ldr	r2, [r4, #512]
	ldr	r3, [r4, #516]
	orr	r2, r2, #2
	orr	r3, r3, #2
	str	r2, [r4, #512]
	str	r3, [r4, #516]
.L6739:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6764:
	mov	r0, #0
	b	.L6739
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.102, .-_snd_pcm_hw_param_set.constprop.102
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	_snd_pcm_hw_param_set.constprop.103, %function
_snd_pcm_hw_param_set.constprop.103:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, r1
	mov	r4, r0
	str	lr, [sp, #4]
	.pad #16
	sub	sp, sp, #16
	add	r0, r0, #284
	ldrb	r3, [sp, #12]	@ zero_extendqisi2
	add	r1, sp, #4
	str	r2, [sp, #4]
	str	r2, [sp, #8]
	and	r3, r3, #244
	orr	r3, r3, #4
	strb	r3, [sp, #12]
	bl	snd_interval_refine
	cmp	r0, #0
	beq	.L6765
	ldr	r2, [r4, #512]
	ldr	r3, [r4, #516]
	orr	r2, r2, #1024
	orr	r3, r3, #1024
	str	r2, [r4, #512]
	str	r3, [r4, #516]
.L6765:
	add	sp, sp, #16
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.103, .-_snd_pcm_hw_param_set.constprop.103
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	_snd_pcm_hw_param_set.constprop.104, %function
_snd_pcm_hw_param_set.constprop.104:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, r1
	mov	r4, r0
	str	lr, [sp, #4]
	.pad #16
	sub	sp, sp, #16
	add	r0, r0, #296
	ldrb	r3, [sp, #12]	@ zero_extendqisi2
	add	r1, sp, #4
	str	r2, [sp, #4]
	str	r2, [sp, #8]
	and	r3, r3, #244
	orr	r3, r3, #4
	strb	r3, [sp, #12]
	bl	snd_interval_refine
	cmp	r0, #0
	beq	.L6771
	ldr	r2, [r4, #512]
	ldr	r3, [r4, #516]
	orr	r2, r2, #2048
	orr	r3, r3, #2048
	str	r2, [r4, #512]
	str	r3, [r4, #516]
.L6771:
	add	sp, sp, #16
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.104, .-_snd_pcm_hw_param_set.constprop.104
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_function_init, %function
mbim_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r0, #:lower16:.LC604
	mov	r2, #1
	strd	r6, [sp, #8]
	ldr	r7, .L6788
	movt	r0, #:upper16:.LC604
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	sub	r5, r7, #12
	mov	r1, r5
	bl	printk
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L6782
	mov	r2, #236
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L6787
.L6778:
	movw	r5, #:lower16:.LANCHOR1
	mov	r6, #0
	ldr	r2, .L6788+4
	add	ip, r4, #208
	add	r3, r4, #216
	movt	r5, #:upper16:.LANCHOR1
	movw	r1, #:lower16:.LC372
	strb	r6, [r4, #136]
	add	r0, r4, #108
	movt	r1, #:upper16:.LC372
	str	r6, [r4, #204]
	str	ip, [r4, #208]
	str	ip, [r4, #212]
	str	r3, [r4, #216]
	str	r3, [r4, #220]
	str	r4, [r5, #3620]
	str	r6, [r5, #3624]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC373
	add	r0, r4, #120
	ldr	r2, .L6788+4
	movt	r1, #:upper16:.LC373
	bl	__init_waitqueue_head
	ldr	r3, [r5, #3616]
	str	r6, [r4, #92]
	str	r6, [r4, #96]
	ldr	r0, .L6788+8
	str	r6, [r4, #100]
	str	r6, [r4, #104]
	add	r3, r3, #1
	str	r4, [r5, #2504]
	str	r3, [r5, #3616]
	bl	misc_register
	subs	r4, r0, #0
	beq	.L6780
	movw	r0, #:lower16:.LC606
	sub	r1, r7, #12
	movt	r0, #:upper16:.LC606
	bl	printk
.L6779:
	movw	r0, #:lower16:.LC608
	sub	r1, r7, #12
	movt	r0, #:upper16:.LC608
	bl	printk
	ldr	r3, [r5, #3616]
	cmp	r3, #0
	beq	.L6777
	ldr	r0, [r5, #3620]
	bl	kfree
	mov	r3, #0
	str	r3, [r5, #3620]
.L6777:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6782:
	mov	r4, #16
	b	.L6778
.L6780:
	movw	r0, #:lower16:.LC607
	sub	r1, r7, #12
	ldr	r2, [r5, #3616]
	movt	r0, #:upper16:.LC607
	bl	printk
	b	.L6777
.L6787:
	movw	r0, #:lower16:.LC605
	mov	r1, r5
	movt	r0, #:upper16:.LC605
	movw	r5, #:lower16:.LANCHOR1
	bl	printk
	movt	r5, #:upper16:.LANCHOR1
	mvn	r4, #11
	b	.L6779
.L6789:
	.align	2
.L6788:
	.word	.LANCHOR5-3376
	.word	.LANCHOR1+3756
	.word	.LANCHOR0+856
	.fnend
	.size	mbim_function_init, .-mbim_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_reset_function_queue, %function
mbim_reset_function_queue:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L6808
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L6805
.L6791:
	add	r5, r4, #204
	mov	r0, r5
	bl	_raw_spin_lock
	movw	r3, #:lower16:kmalloc_caches
	mov	r2, #16
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L6792
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L6806
	mov	r1, #16
	mov	r2, #0
	stm	r3, {r1, r2}
.L6793:
	add	r0, r3, #8
	add	r2, r4, #208
	ldr	r1, [r4, #212]
	bl	__list_add
	mov	r0, r5
	bl	_raw_spin_unlock
	ldr	r0, .L6808+4
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L6807
.L6795:
	add	r0, r4, #108
	mov	r3, #0
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L6792:
	mov	r3, r2
	str	r2, [r0, #16]
	str	r0, [r0, #20]
	b	.L6793
.L6806:
	mvn	r3, #11
	b	.L6793
.L6805:
	movw	r1, #:lower16:.LC609
	sub	r0, r3, #24
	ldr	r2, .L6808+8
	movt	r1, #:upper16:.LC609
	bl	__dynamic_pr_debug
	b	.L6791
.L6807:
	ldr	r3, .L6808+8
	movw	r1, #:lower16:.LC610
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC610
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L6795
.L6809:
	.align	2
.L6808:
	.word	.LANCHOR4-2496
	.word	.LANCHOR4-2464
	.word	.LANCHOR5-3376
	.fnend
	.size	mbim_reset_function_queue, .-mbim_reset_function_queue
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_resume, %function
rndis_qc_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L6822
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L6820
.L6811:
	ldr	r0, .L6822+4
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r5, [r4, #3752]
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L6821
.L6812:
	ldr	r1, [r4, #3744]
	add	r2, r5, #216
	mov	r0, #4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work_on
.L6820:
	ldr	r3, .L6822+8
	movw	r1, #:lower16:.LC611
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC611
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L6811
.L6821:
	ldr	r3, .L6822+12
	mov	r2, #0
	movw	r1, #:lower16:.LC612
	movt	r1, #:upper16:.LC612
	sub	r0, r0, #32
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L6812
.L6823:
	.align	2
.L6822:
	.word	.LANCHOR4-2448
	.word	.LANCHOR4-2416
	.word	.LANCHOR5-3348
	.word	.LANCHOR5-3332
	.fnend
	.size	rndis_qc_resume, .-rndis_qc_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_suspend, %function
rndis_qc_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L6836
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L6834
.L6825:
	ldr	r0, .L6836+4
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r5, [r4, #3752]
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L6835
.L6826:
	ldr	r1, [r4, #3744]
	add	r2, r5, #200
	mov	r0, #4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work_on
.L6834:
	ldr	r3, .L6836+8
	movw	r1, #:lower16:.LC613
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC613
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L6825
.L6835:
	ldr	r3, .L6836+12
	mov	r2, #0
	movw	r1, #:lower16:.LC614
	movt	r1, #:upper16:.LC614
	sub	r0, r0, #32
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L6826
.L6837:
	.align	2
.L6836:
	.word	.LANCHOR4-2400
	.word	.LANCHOR4-2368
	.word	.LANCHOR5-3316
	.word	.LANCHOR5-3296
	.fnend
	.size	rndis_qc_suspend, .-rndis_qc_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_disconnect.constprop.112, %function
bam_data_disconnect.constprop.112:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L6864
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r0
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L6859
.L6839:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #3748]
	cmp	r3, #0
	ble	.L6860
	cmp	r5, #0
	beq	.L6861
	ldr	r5, [r4, #3752]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L6842
	ldr	r2, [r3, #8]
	cmp	r2, #0
	beq	.L6842
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L6842
	ldr	r0, [r3, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #4]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r5, #4]
	mov	r3, #0
	ldr	r2, [r2, #8]
	str	r3, [r2]
	ldr	r2, [r5, #4]
	ldr	r2, [r2, #12]
	str	r3, [r2]
	str	r3, [r5, #4]
.L6842:
	ldr	r3, [r5, #60]
	cmp	r3, #7
	beq	.L6862
	mov	r0, #0
	bl	usb_bam_client_ready
	cmp	r0, #0
	bne	.L6863
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L6862:
	ldr	r1, [r4, #3744]
	add	r2, r5, #184
	mov	r0, #4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work_on
.L6859:
	mov	ip, #0
	movw	r1, #:lower16:.LC157
	ldr	r2, .L6864+4
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC157
	mov	r3, r5
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L6839
.L6861:
	ldr	r1, .L6864+4
	movw	r0, #:lower16:.LC616
	movt	r0, #:upper16:.LC616
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	printk
.L6860:
	ldr	r1, .L6864+4
	movw	r0, #:lower16:.LC615
	mov	r2, #0
	movt	r0, #:upper16:.LC615
.L6858:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	printk
.L6863:
	ldr	r2, .L6864+4
	movw	r0, #:lower16:.LC617
	movt	r0, #:upper16:.LC617
	mov	r1, r2
	b	.L6858
.L6865:
	.align	2
.L6864:
	.word	.LANCHOR4-2352
	.word	.LANCHOR5-3276
	.fnend
	.size	bam_data_disconnect.constprop.112, .-bam_data_disconnect.constprop.112
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gen_ndis_query_resp.constprop.116, %function
gen_ndis_query_resp.constprop.116:
	.fnstart
	@ args = 0, pretend = 0, frame = 184
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r6, [sp, #8]
	subs	r6, r1, #0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #188
	sub	sp, sp, #188
	beq	.L6934
	ldr	r5, [r6, #8]
	cmp	r5, #0
	beq	.L6934
	mov	r3, #16
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	mov	r4, r0
	str	r3, [r5, #20]
	mov	r1, sp
	ldr	r0, [r7, #3708]
	bl	dev_get_stats
	movw	r3, #278
	add	r8, r5, #24
	movt	r3, 1
	mov	r9, r0
	cmp	r4, r3
	beq	.L6869
	bls	.L7043
	movw	r3, #257
	movt	r3, 257
	cmp	r4, r3
	beq	.L6888
	bls	.L7044
	movw	r3, #261
	movt	r3, 257
	cmp	r4, r3
	beq	.L6897
	bhi	.L6898
	movw	r3, #259
	movt	r3, 257
	cmp	r4, r3
	beq	.L6899
	bhi	.L6900
	ldr	r0, .L7063
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7045
.L6926:
	ldr	r3, [r7, #3708]
	cmp	r3, #0
	beq	.L6914
	ldr	r2, [r7, #3700]
	mov	r3, #30
	mov	r0, #0
	mov	r4, #6
	ldr	r1, [r2]	@ unaligned
	str	r1, [r5, #24]	@ unaligned
	ldrh	r2, [r2, #4]	@ unaligned
	strh	r2, [r8, #4]	@ unaligned
	b	.L6906
.L7043:
	movw	r3, #266
	movt	r3, 1
	cmp	r4, r3
	beq	.L6871
	bls	.L7046
	movw	r3, #270
	movt	r3, 1
	cmp	r4, r3
	beq	.L6880
	bhi	.L6881
	mov	r3, #268
	movt	r3, 1
	cmp	r4, r3
	beq	.L6882
	bls	.L7047
	ldr	r0, .L7063+4
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7048
.L6917:
	ldr	r7, [r7, #3720]
	cmp	r7, #0
	beq	.L6918
	mov	r0, r7
	bl	strlen
	mov	r4, r0
	mov	r2, r0
	mov	r1, r7
	mov	r0, r8
	bl	memcpy
	add	r3, r4, #24
	mov	r0, #0
	b	.L6906
.L7046:
	movw	r3, #259
	movt	r3, 1
	cmp	r4, r3
	beq	.L6873
	bls	.L7049
	movw	r3, #262
	movt	r3, 1
	cmp	r4, r3
	beq	.L6877
	movw	r3, #263
	movt	r3, 1
	cmp	r4, r3
	beq	.L6878
	mov	r3, #260
	movt	r3, 1
	cmp	r4, r3
	bne	.L6868
	ldr	r0, .L7063+8
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L6909
	movw	r1, #:lower16:.LC621
	ldr	r2, .L7063+12
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC621
	bl	__dynamic_pr_debug
	b	.L6909
.L7044:
	movw	r3, #258
	movt	r3, 2
	cmp	r4, r3
	beq	.L6890
	bls	.L7050
	mov	r3, #260
	movt	r3, 2
	cmp	r4, r3
	beq	.L6894
	bcc	.L6895
	movw	r3, #261
	movt	r3, 2
	cmp	r4, r3
	bne	.L6868
	ldr	r0, .L7063+16
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7051
.L6924:
	cmp	r9, #0
	beq	.L6914
	ldr	r2, [r9, #48]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L6906
.L6898:
	movw	r3, #258
	movt	r3, 258
	cmp	r4, r3
	beq	.L6902
	movw	r3, #259
	movt	r3, 258
	cmp	r4, r3
	beq	.L6903
	movw	r3, #257
	movt	r3, 258
	cmp	r4, r3
	bne	.L6868
	ldr	r0, .L7063+20
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7052
.L6930:
	cmp	r9, #0
	beq	.L6914
	ldr	r2, [r9, #104]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L6906
.L6881:
	movw	r3, #275
	movt	r3, 1
	cmp	r4, r3
	beq	.L6885
	mov	r3, #276
	movt	r3, 1
	cmp	r4, r3
	beq	.L6886
	movw	r3, #273
	movt	r3, 1
	cmp	r4, r3
	beq	.L6887
.L6868:
	movw	r0, #:lower16:.LC641
	mov	r2, r4
	ldr	r1, .L7063+12
	movt	r0, #:upper16:.LC641
	mov	r4, #0
	bl	printk
	movw	r0, #65012
	mov	r3, #24
	movt	r0, 65535
	b	.L6906
.L7049:
	movw	r3, #257
	movt	r3, 1
	cmp	r4, r3
	beq	.L6875
	movw	r3, #258
	movt	r3, 1
	cmp	r4, r3
	bne	.L6868
	ldr	r0, .L7063+24
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L6932
	movw	r1, #:lower16:.LC619
	ldr	r2, .L7063+12
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC619
	bl	__dynamic_pr_debug
	b	.L6932
.L7050:
	movw	r3, #514
	movt	r3, 1
	cmp	r4, r3
	beq	.L6892
	movw	r3, #257
	movt	r3, 2
	cmp	r4, r3
	bne	.L6868
	cmp	r0, #0
	beq	.L6914
	ldr	r2, [r0, #8]
	mov	r3, #28
	ldr	ip, [r0, #40]
	ldr	r1, [r0, #56]
.L7041:
	sub	r2, r2, ip
	mov	r0, #0
	sub	r2, r2, r1
	mov	r4, #4
	str	r2, [r5, #24]
.L6906:
	str	r4, [r5, #16]
	str	r3, [r6, #12]
	str	r3, [r5, #4]
.L6866:
	add	sp, sp, #188
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L6892:
	ldr	r3, .L7063+28
	ldrh	r3, [r3, #-14]
	tst	r3, #4
	bne	.L7053
.L6932:
	mov	r2, #0
	mov	r3, #28
	mov	r0, r2
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L6906
.L6873:
	ldr	r0, .L7063+32
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7054
.L6909:
	ldr	r2, [r7, #3688]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L6906
.L6890:
	cmp	r0, #0
	beq	.L6914
	mov	r3, #28
	ldr	r2, [r0]
	ldr	ip, [r0, #32]
	ldr	r1, [r0, #48]
	b	.L7041
.L6875:
	ldr	r3, .L7063+36
	ldrh	r3, [r3, #-14]
	tst	r3, #4
	bne	.L7055
.L6905:
	mov	r0, r8
	mov	r2, #112
	ldr	r1, .L7063+40
	bl	memcpy
	mov	r4, #112
	mov	r3, #136
	mov	r0, #0
	b	.L6906
.L6903:
	ldr	r0, .L7063+44
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L6932
	movw	r1, #:lower16:.LC640
	ldr	r2, .L7063+12
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC640
	bl	__dynamic_pr_debug
	b	.L6932
.L7047:
	ldr	r0, .L7063+48
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7056
.L6910:
	ldr	r3, [r7, #3708]
	cmp	r3, #0
	beq	.L6914
	ldr	r2, [r3, #356]
	mov	r0, #0
	mov	r4, #4
	mov	r3, #28
	str	r2, [r5, #24]
	b	.L6906
.L6886:
	ldr	r2, [r7, #3696]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L6906
.L6900:
	ldr	r0, .L7063+52
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7057
.L6928:
	mov	r2, #1
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L6906
.L6895:
	cmp	r0, #0
	beq	.L6914
	ldr	r2, [r9, #40]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L6906
.L6878:
	ldr	r3, [r7, #3696]
	cmp	r3, #1
	beq	.L6932
	ldr	r2, [r7, #3692]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L6906
.L6914:
	movw	r0, #65012
	mov	r3, #24
	movt	r0, 65535
	mov	r4, #0
	b	.L6906
.L6902:
	ldr	r3, .L7063+56
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	beq	.L6932
	movw	r1, #:lower16:.LC639
	ldr	r2, .L7063+12
	movt	r1, #:upper16:.LC639
	ldr	r0, .L7063+60
	bl	__dynamic_pr_debug
	b	.L6932
.L6877:
	ldr	r3, .L7063+64
	ldrh	r3, [r3, #-14]
	tst	r3, #4
	beq	.L6910
	movw	r1, #:lower16:.LC622
	ldr	r2, .L7063+12
	movt	r1, #:upper16:.LC622
	ldr	r0, .L7063+8
	bl	__dynamic_pr_debug
	b	.L6910
.L6899:
	ldr	r3, .L7063+68
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L7058
.L6927:
	mov	r2, #-536870912
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L6906
.L6887:
	ldr	r0, .L7063+72
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7059
.L6921:
	movw	r2, #1558
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L6906
.L6871:
	ldr	r0, .L7063+76
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L6910
	movw	r1, #:lower16:.LC623
	ldr	r2, .L7063+12
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC623
	bl	__dynamic_pr_debug
	b	.L6910
.L6885:
	ldr	r3, .L7063+80
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L7060
.L6923:
	mov	r2, #18
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L6906
.L6882:
	ldr	r3, .L7063+84
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L7061
.L6916:
	ldr	r2, [r7, #3712]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L6906
.L6869:
	ldr	r0, .L7063+88
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L6928
	movw	r1, #:lower16:.LC627
	ldr	r2, .L7063+12
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC627
	bl	__dynamic_pr_debug
	b	.L6928
.L6888:
	ldr	r0, .L7063+92
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L6926
	movw	r1, #:lower16:.LC633
	ldr	r2, .L7063+12
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC633
	bl	__dynamic_pr_debug
	b	.L6926
.L6897:
	ldr	r0, .L7063+96
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L6932
	movw	r1, #:lower16:.LC637
	ldr	r2, .L7063+12
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC637
	bl	__dynamic_pr_debug
	b	.L6932
.L6880:
	ldr	r0, .L7063+100
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7062
.L6920:
	ldr	r2, [r7, #3704]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	ldrh	r2, [r2]
	str	r2, [r5, #24]
	b	.L6906
.L6894:
	cmp	r0, #0
	beq	.L6914
	ldr	r2, [r9, #32]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L6906
.L6934:
	mvn	r0, #11
	b	.L6866
.L6918:
	mov	r0, r7
	mov	r3, #28
	str	r7, [r5, #24]
	mov	r4, #4
	b	.L6906
.L7057:
	movw	r1, #:lower16:.LC636
	ldr	r2, .L7063+12
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC636
	bl	__dynamic_pr_debug
	b	.L6928
.L7062:
	movw	r1, #:lower16:.LC628
	ldr	r2, .L7063+12
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC628
	bl	__dynamic_pr_debug
	b	.L6920
.L7052:
	movw	r1, #:lower16:.LC638
	ldr	r2, .L7063+12
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC638
	bl	__dynamic_pr_debug
	b	.L6930
.L7059:
	movw	r1, #:lower16:.LC629
	ldr	r2, .L7063+12
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC629
	bl	__dynamic_pr_debug
	b	.L6921
.L7055:
	movw	r1, #:lower16:.LC618
	ldr	r2, .L7063+12
	movt	r1, #:upper16:.LC618
	ldr	r0, .L7063+104
	bl	__dynamic_pr_debug
	b	.L6905
.L7056:
	movw	r1, #:lower16:.LC624
	ldr	r2, .L7063+12
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC624
	bl	__dynamic_pr_debug
	b	.L6910
.L7061:
	movw	r1, #:lower16:.LC625
	ldr	r2, .L7063+12
	movt	r1, #:upper16:.LC625
	ldr	r0, .L7063+108
	bl	__dynamic_pr_debug
	b	.L6916
.L7048:
	movw	r1, #:lower16:.LC626
	ldr	r2, .L7063+12
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC626
	bl	__dynamic_pr_debug
	b	.L6917
.L7058:
	movw	r1, #:lower16:.LC635
	ldr	r2, .L7063+12
	movt	r1, #:upper16:.LC635
	ldr	r0, .L7063+112
	bl	__dynamic_pr_debug
	b	.L6927
.L7060:
	movw	r1, #:lower16:.LC631
	ldr	r2, .L7063+12
	movt	r1, #:upper16:.LC631
	ldr	r0, .L7063+116
	bl	__dynamic_pr_debug
	b	.L6923
.L7051:
	movw	r1, #:lower16:.LC632
	ldr	r2, .L7063+12
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC632
	bl	__dynamic_pr_debug
	b	.L6924
.L7045:
	movw	r1, #:lower16:.LC634
	ldr	r2, .L7063+12
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC634
	bl	__dynamic_pr_debug
	b	.L6926
.L7054:
	movw	r1, #:lower16:.LC620
	ldr	r2, .L7063+12
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC620
	bl	__dynamic_pr_debug
	b	.L6909
.L7053:
	movw	r1, #:lower16:.LC630
	ldr	r2, .L7063+12
	movt	r1, #:upper16:.LC630
	ldr	r0, .L7063+72
	bl	__dynamic_pr_debug
	b	.L6932
.L7064:
	.align	2
.L7063:
	.word	.LANCHOR4-1936
	.word	.LANCHOR4-2128
	.word	.LANCHOR4-2256
	.word	.LANCHOR5-3256
	.word	.LANCHOR4-1984
	.word	.LANCHOR4-1840
	.word	.LANCHOR4-2304
	.word	.LANCHOR4-2032
	.word	.LANCHOR4-2272
	.word	.LANCHOR4-2320
	.word	.LANCHOR5-3236
	.word	.LANCHOR4-1792
	.word	.LANCHOR4-2176
	.word	.LANCHOR4-1888
	.word	.LANCHOR4-1824
	.word	.LANCHOR4-1848
	.word	.LANCHOR4-2224
	.word	.LANCHOR4-1920
	.word	.LANCHOR4-2064
	.word	.LANCHOR4-2208
	.word	.LANCHOR4-2016
	.word	.LANCHOR4-2160
	.word	.LANCHOR4-2112
	.word	.LANCHOR4-1968
	.word	.LANCHOR4-1872
	.word	.LANCHOR4-2080
	.word	.LANCHOR4-2352
	.word	.LANCHOR4-2184
	.word	.LANCHOR4-1944
	.word	.LANCHOR4-2040
	.fnend
	.size	gen_ndis_query_resp.constprop.116, .-gen_ndis_query_resp.constprop.116
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_init, %function
ccid_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L7071
	mov	r2, #204
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L7074
.L7066:
	add	ip, r4, #120
	mov	r0, #0
	ldr	r2, .L7076
	movw	r3, #:lower16:.LANCHOR1
	movw	r1, #:lower16:.LC383
	movt	r3, #:upper16:.LANCHOR1
	movt	r1, #:upper16:.LC383
	str	r0, [r4, #92]
	str	ip, [r4, #120]
	add	r0, r4, #128
	str	ip, [r4, #124]
	str	r4, [r3, #3472]
	bl	__init_waitqueue_head
	ldr	r0, .L7076+4
	bl	misc_register
	subs	r5, r0, #0
	bne	.L7068
	movw	r1, #:lower16:.LC642
	ldr	r2, .L7076
	add	r0, r4, #160
	movt	r1, #:upper16:.LC642
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC643
	ldr	r2, .L7076
	add	r0, r4, #172
	movt	r1, #:upper16:.LC643
	bl	__init_waitqueue_head
	add	r3, r4, #192
	ldr	r0, .L7076+8
	str	r3, [r4, #192]
	str	r3, [r4, #196]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L7075
.L7065:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7071:
	mov	r4, #16
	b	.L7066
.L7074:
	mvn	r5, #11
	b	.L7065
.L7075:
	movw	r0, #:lower16:.LC385
	ldr	r1, .L7076+12
	movt	r0, #:upper16:.LC385
	bl	printk
	movw	r0, #:lower16:.LC645
	mov	r2, r5
	ldr	r1, .L7076+16
	movt	r0, #:upper16:.LC645
	bl	printk
	ldr	r0, .L7076+4
	bl	misc_deregister
.L7070:
	mov	r0, r4
	bl	kfree
	movw	r0, #:lower16:.LC646
	movt	r0, #:upper16:.LC646
	bl	printk
	b	.L7065
.L7068:
	ldr	r6, .L7076+20
	movw	r0, #:lower16:.LC385
	movt	r0, #:upper16:.LC385
	sub	r1, r6, #4
	bl	printk
	movw	r0, #:lower16:.LC644
	mov	r2, r5
	add	r1, r6, #20
	movt	r0, #:upper16:.LC644
	bl	printk
	b	.L7070
.L7077:
	.align	2
.L7076:
	.word	.LANCHOR1+3756
	.word	.LANCHOR0+820
	.word	.LANCHOR0+784
	.word	.LANCHOR5-3088
	.word	.LANCHOR5-3100
	.word	.LANCHOR5-3120
	.fnend
	.size	ccid_function_init, .-ccid_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_cdc_notify_complete, %function
acm_cdc_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:__stack_chk_guard
	strd	r6, [sp, #8]
	movt	r4, #:upper16:__stack_chk_guard
	mov	r6, r1
	strd	r8, [sp, #16]
	ldr	r3, [r4]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r5, [r1, #32]
	.pad #24
	sub	sp, sp, #24
	str	r3, [sp, #20]
	add	r7, r5, #148
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #44]
	mov	r1, r0
	cmn	r3, #108
	beq	.L7093
	ldrb	r8, [r5, #147]	@ zero_extendqisi2
	mov	r0, r7
	str	r6, [r5, #156]
	bl	_raw_spin_unlock_irqrestore
	cmp	r8, #0
	beq	.L7078
	ldr	r3, [r5, #20]
	mov	r0, r7
	ldr	r8, [r3, #24]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #156]
	mov	r6, r0
	cmp	r3, #0
	moveq	r3, #1
	strbeq	r3, [r5, #147]
	bne	.L7094
.L7084:
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L7078:
	ldr	r2, [sp, #20]
	ldr	r3, [r4]
	cmp	r2, r3
	bne	.L7095
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7093:
	mov	r0, r7
	str	r6, [r5, #156]
	bl	_raw_spin_unlock_irqrestore
	b	.L7078
.L7095:
	bl	__stack_chk_fail
.L7094:
	ldr	r0, .L7097
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7096
.L7082:
	movw	r0, #:lower16:.LC648
	ldrh	r2, [r5, #170]
	mov	r9, #32
	ldrb	r1, [r5, #146]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC648
	bl	printk
	add	r0, sp, #10
	mov	r1, #10
	ldr	r10, [r5, #152]
	bl	__memzero
	ldr	r8, [r5, #156]
	mov	r2, #0
	mov	r0, #10
	mvn	r1, #94
	mov	ip, #2
	strb	r2, [r5, #147]
	str	r2, [r5, #156]
	ldr	r3, [r8]
	str	r0, [r8, #4]
	mov	r0, r7
	strb	r1, [r3]
	strb	r9, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	ldrb	r1, [r5, #144]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	r2, [r3, #7]
	ldrh	ip, [r5, #170]	@ unaligned
	ldr	r1, [sp, #14]	@ unaligned
	strh	ip, [sp, #10]	@ movhi
	ldr	ip, [sp, #10]	@ unaligned
	str	ip, [r3, #8]	@ unaligned
	str	r1, [r3, #12]	@ unaligned
	ldrh	r1, [sp, #18]	@ unaligned
	strh	r1, [r3, #16]	@ unaligned
	ldrh	r2, [r5, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock
	ldr	r3, [r10, #8]
	mov	r2, r9
	mov	r1, r8
	mov	r0, r10
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	r9, #0
	bge	.L7084
	ldr	r0, [r5, #20]
	movw	r1, #:lower16:.LC649
	mov	r3, r9
	movt	r1, #:upper16:.LC649
	ldrb	r2, [r5, #146]	@ zero_extendqisi2
	ldr	r0, [r0, #24]
	ldr	r0, [r0]
	add	r0, r0, #32
	bl	dev_err
	str	r8, [r5, #156]
	b	.L7084
.L7096:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC647
	sub	r0, r0, #24
	ldrh	ip, [r5, #170]
	movt	r2, #:upper16:.LC647
	ldrb	r3, [r5, #146]	@ zero_extendqisi2
	add	r1, r1, #32
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L7082
.L7098:
	.align	2
.L7097:
	.word	.LANCHOR4-1776
	.fnend
	.size	acm_cdc_notify_complete, .-acm_cdc_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_send_controlbits_tomodem, %function
ghsuart_send_controlbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR1
	movt	ip, #:upper16:.LANCHOR1
	ldr	r3, [ip, #1856]
	cmp	r0, #0
	cmpne	r1, r3
	bcs	.L7126
	mov	r3, #84
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mla	r1, r3, r1, ip
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #24
	sub	sp, sp, #24
	ldr	r4, [r1, #2032]
	cmp	r4, #0
	beq	.L7127
	ldr	r3, [r4, #196]
	cmp	r3, r2
	beq	.L7099
	ldr	r3, [r4, #188]
	str	r2, [r4, #196]
	tst	r3, #4
	beq	.L7099
	tst	r2, #1
	mov	r5, r2
	bne	.L7128
.L7106:
	ldr	r0, .L7131
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7129
.L7099:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7128:
	ldr	r0, .L7131+4
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7130
.L7107:
	add	r7, r4, #20
	mov	r8, #0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #24]
	mov	r1, r0
	str	r8, [r4, #200]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, r8
	beq	.L7106
	ldr	r3, [r6, #136]
	cmp	r3, r8
	beq	.L7106
	mov	r1, r8
	mov	r0, r6
	blx	r3
	b	.L7106
.L7129:
	ldr	r2, .L7131+8
	movw	r1, #:lower16:.LC550
	mov	r3, r5
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC550
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__dynamic_pr_debug
.L7130:
	mov	ip, #45
	movw	r1, #:lower16:.LC125
	ldr	r2, .L7131+12
	movt	r1, #:upper16:.LC125
	mov	r3, ip
	str	ip, [sp]
	sub	r0, r0, #32
	str	ip, [sp, #4]
	str	ip, [sp, #8]
	str	ip, [sp, #12]
	str	ip, [sp, #16]
	str	ip, [sp, #20]
	bl	__dynamic_pr_debug
	b	.L7107
.L7126:
	movw	r0, #:lower16:.LC123
	mov	r2, r1
	ldr	r1, .L7131+8
	movt	r0, #:upper16:.LC123
	b	printk
.L7127:
	ldr	r1, .L7131+8
	movw	r0, #:lower16:.LC114
	movt	r0, #:upper16:.LC114
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L7132:
	.align	2
.L7131:
	.word	.LANCHOR4-1728
	.word	.LANCHOR4-1744
	.word	.LANCHOR5-3064
	.word	.LANCHOR5-3028
	.fnend
	.size	ghsuart_send_controlbits_tomodem, .-ghsuart_send_controlbits_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_alloc_requests.constprop.131, %function
gsmd_alloc_requests.constprop.131:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	mov	r6, r1
	strd	r10, [sp, #24]
	ldr	fp, .L7156
	strd	r8, [sp, #16]
	mov	r9, r2
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldrh	r3, [fp, #-14]
	tst	r3, #4
	bne	.L7152
.L7134:
	movw	r8, #:lower16:kmalloc_caches
	mov	r5, #0
	movt	r8, #:upper16:kmalloc_caches
	mov	r10, #2048
.L7141:
	ldr	r3, [r7, #8]
	mov	r1, #32
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	mov	r2, #2048
	mov	r1, #32
	mov	ip, #16
	beq	.L7153
	str	r10, [r4, #4]
	ldr	r3, [r8, #44]
	subs	r0, r3, #0
	streq	ip, [r4]
	beq	.L7138
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4]
	beq	.L7154
.L7138:
	str	r9, [r4, #28]
	add	r0, r4, #36
	add	r5, r5, #1
	mov	r1, r6
	ldr	r2, [r6]
	bl	__list_add
	cmp	r5, #8
	bne	.L7141
.L7142:
	mov	r0, #0
.L7133:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7152:
	mov	r0, #2048
	mov	r2, #8
	str	r6, [sp]
	movw	r1, #:lower16:.LC650
	mov	r3, r7
	movt	r1, #:upper16:.LC650
	str	r2, [sp, #4]
	ldr	r2, .L7156+4
	str	r0, [sp, #8]
	sub	r0, fp, #32
	str	r9, [sp, #12]
	bl	__dynamic_pr_debug
	b	.L7134
.L7153:
	movw	r0, #:lower16:.LC651
	ldr	r1, .L7156+8
	movt	r0, #:upper16:.LC651
	bl	printk
.L7136:
	ldr	r3, .L7156+12
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L7155
.L7139:
	ldr	r3, [r6]
	cmp	r6, r3
	bne	.L7142
	mvn	r0, #11
	b	.L7133
.L7155:
	movw	r1, #:lower16:.LC653
	mov	r3, r5
	ldr	r2, .L7156+4
	sub	r0, fp, #8
	movt	r1, #:upper16:.LC653
	bl	__dynamic_pr_debug
	b	.L7139
.L7154:
	movw	r0, #:lower16:.LC652
	ldr	r1, .L7156+8
	movt	r0, #:upper16:.LC652
	bl	printk
	ldr	r3, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L7136
.L7157:
	.align	2
.L7156:
	.word	.LANCHOR4-1696
	.word	.LANCHOR5-3004
	.word	.LANCHOR5-2984
	.word	.LANCHOR4-1680
	.fnend
	.size	gsmd_alloc_requests.constprop.131, .-gsmd_alloc_requests.constprop.131
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_start_tx, %function
gs_start_tx:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	add	r10, r0, #76
	str	lr, [sp, #32]
	ldr	r3, [r0, #4]
	.pad #20
	sub	sp, sp, #20
	ldr	r5, [r0, #76]
	ldr	r7, [r3, #88]
	cmp	r10, r5
	beq	.L7179
	ldr	r3, [r0, #84]
	cmp	r3, #7
	bgt	.L7179
	movw	r9, #:lower16:.LANCHOR1
	mov	r4, r0
	mov	fp, #0
	movt	r9, #:upper16:.LANCHOR1
.L7160:
	ldr	r2, [r4, #92]
	sub	r8, r5, #36
	ldr	r1, [r4, #100]
	ldr	r6, [r4, #104]
	add	r6, r6, r2
	sub	r3, r6, r1
	udiv	r6, r3, r2
	mls	r6, r2, r6, r3
	cmp	r6, #4096
	bcs	.L7180
	cmp	r6, #0
	bne	.L7162
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	ldr	r3, [r9, #3756]
	cmp	r3, #0
	moveq	r6, r3
	beq	.L7166
	ldrh	r1, [r7, #20]
	sdiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	beq	.L7199
.L7166:
	mov	r2, #1
	mov	r3, #0
	mov	r1, r2
	add	r0, r4, #108
	bl	__wake_up
.L7168:
	cmp	fp, #0
	bne	.L7161
.L7158:
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7180:
	mov	r6, #4096
.L7162:
	ldr	fp, [r4, #96]
	ldr	r3, [r5, #-36]
	add	fp, fp, r2
	sub	fp, fp, r1
	cmp	fp, r6
	bcc	.L7200
	mov	r0, r3
	mov	r2, r6
	bl	memcpy
	cmp	fp, r6
	ldrhi	r3, [r4, #100]
	ldrls	r3, [r4, #96]
	addhi	r3, r3, r6
	str	r3, [r4, #100]
.L7164:
	mov	r0, r5
	str	r6, [r5, #-32]
	bl	list_del
	mov	r0, r4
	bl	_raw_spin_unlock
	ldr	r3, [r7, #8]
	mov	r2, #32
	mov	r1, r8
	mov	r0, r7
	ldr	r3, [r3, #16]
	blx	r3
	mov	r6, r0
	mov	r0, r4
	bl	_raw_spin_lock
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L7201
	cmp	r6, #0
	bne	.L7202
	ldr	r1, [r5, #-32]
	ldr	r5, [r4, #76]
	ldr	r3, [r4, #84]
	ldr	r2, [r4, #136]
	str	r1, [r9, #3756]
	cmp	r10, r5
	add	r3, r3, #1
	add	r2, r2, r1
	str	r3, [r4, #84]
	str	r2, [r4, #136]
	beq	.L7161
	cmp	r3, #7
	mov	fp, #1
	ble	.L7160
.L7161:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L7158
.L7204:
	bl	tty_wakeup
	b	.L7158
.L7200:
	mov	r0, r3
	sub	r3, r6, fp
	mov	r2, fp
	str	r3, [sp, #12]
	bl	memcpy
	add	r0, r0, fp
	ldr	fp, [sp, #12]
	ldr	r1, [r4, #96]
	mov	r2, fp
	bl	memcpy
	ldr	r3, [r4, #96]
	add	r3, r3, fp
	str	r3, [r4, #100]
	b	.L7164
.L7201:
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r8
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L7158
.L7202:
	ldr	r0, .L7207
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7203
.L7171:
	mov	r0, r5
	mov	r1, r10
	ldr	r2, [r4, #76]
	bl	__list_add
	ldr	r0, [r4, #8]
	cmp	r0, #0
	bne	.L7204
	b	.L7158
.L7179:
	mov	r6, #0
	b	.L7158
.L7199:
	str	r3, [r5, #-32]
	mov	r0, r5
	bl	list_del
	mov	r0, r4
	bl	_raw_spin_unlock
	ldr	r3, [r7, #8]
	mov	r2, #32
	mov	r1, r8
	mov	r0, r7
	ldr	r3, [r3, #16]
	blx	r3
	mov	r6, r0
	mov	r0, r4
	bl	_raw_spin_lock
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L7205
	cmp	r6, #0
	bne	.L7206
.L7169:
	mov	r3, #0
	str	r3, [r9, #3756]
	b	.L7166
.L7203:
	str	r6, [sp, #4]
	ldr	ip, [r7, #4]
	movw	r3, #:lower16:.LC165
	movw	r1, #:lower16:.LC166
	ldr	r2, .L7207+4
	movt	r3, #:upper16:.LC165
	movt	r1, #:upper16:.LC166
	sub	r0, r0, #32
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L7171
.L7205:
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r8
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L7168
.L7206:
	movw	r2, #:lower16:.LC165
	movw	r0, #:lower16:.LC654
	ldr	r1, .L7207+4
	movt	r2, #:upper16:.LC165
	mov	r3, r6
	movt	r0, #:upper16:.LC654
	bl	printk
	mov	r1, r10
	mov	r0, r5
	ldr	r2, [r4, #76]
	bl	__list_add
	b	.L7169
.L7208:
	.align	2
.L7207:
	.word	.LANCHOR4-1648
	.word	.LANCHOR5-2968
	.fnend
	.size	gs_start_tx, .-gs_start_tx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_flush_chars, %function
gs_flush_chars:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #272]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #4]
	mov	r5, r0
	cmp	r3, #0
	beq	.L7210
	mov	r0, r4
	bl	gs_start_tx
.L7210:
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	gs_flush_chars, .-gs_flush_chars
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_write, %function
gs_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #272]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	cmp	r5, #0
	mov	r6, r0
	bne	.L7230
.L7216:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L7221
	mov	r0, r4
	bl	gs_start_tx
.L7221:
	mov	r0, r4
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7230:
	ldr	r1, [r4, #92]
	ldr	r3, [r4, #100]
	ldr	r0, [r4, #104]
	add	r3, r3, r1
	sub	r3, r3, r0
	sub	r3, r3, #1
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r5, r3
	bhi	.L7231
.L7217:
	ldr	r8, [r4, #96]
	add	r1, r8, r1
	sub	r8, r1, r0
	cmp	r8, r5
	bcc	.L7232
	mov	r1, r7
	mov	r2, r5
	bl	memcpy
	cmp	r8, r5
	ldrhi	r3, [r4, #104]
	ldrls	r3, [r4, #96]
	addhi	r3, r3, r5
	str	r3, [r4, #104]
	b	.L7216
.L7231:
	subs	r5, r3, #0
	beq	.L7216
	b	.L7217
.L7232:
	mov	r2, r8
	mov	r1, r7
	sub	r9, r5, r8
	bl	memcpy
	mov	r2, r9
	add	r1, r7, r8
	ldr	r0, [r4, #96]
	bl	memcpy
	ldr	r2, [r4, #96]
	add	r2, r2, r9
	str	r2, [r4, #104]
	b	.L7216
	.fnend
	.size	gs_write, .-gs_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_write_complete, %function
gs_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r5, #48]
	mov	r1, r4
	mov	r6, r0
	ldr	r3, [r4, #140]
	add	r0, r5, #36
	add	r3, r3, r2
	str	r3, [r4, #140]
	ldr	r2, [r1, #76]!
	bl	__list_add
	ldr	r3, [r4, #84]
	sub	r3, r3, #1
	str	r3, [r4, #84]
	ldr	r3, [r5, #44]
	cmn	r3, #108
	beq	.L7235
	cmp	r3, #0
	bne	.L7247
.L7236:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L7235
	mov	r0, r4
	bl	gs_start_tx
.L7235:
	mov	r1, r6
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L7247:
	movw	r0, #:lower16:.LC655
	ldr	r1, .L7248
	ldr	r2, [r7, #4]
	movt	r0, #:upper16:.LC655
	bl	printk
	b	.L7236
.L7249:
	.align	2
.L7248:
	.word	.LANCHOR5-2956
	.fnend
	.size	gs_write_complete, .-gs_write_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_fs_mount, %function
ffs_fs_mount:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #33152
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	subs	r4, r3, #0
	strd	r6, [sp, #8]
	mov	r3, #0
	movt	ip, 65535
	strd	r8, [sp, #16]
	mov	r8, r0
	mov	r9, r2
	strd	r10, [sp, #24]
	mov	r10, r1
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	movw	lr, #16704
	strh	ip, [sp, #20]	@ movhi
	str	r3, [sp, #22]	@ unaligned
	str	r3, [sp, #26]	@ unaligned
	str	r3, [sp, #30]	@ unaligned
	strh	lr, [sp, #32]	@ movhi
	str	r3, [sp, #34]	@ unaligned
	strh	r3, [sp, #38]	@ movhi
	beq	.L7251
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L7251
	mov	fp, #32768
	movw	r3, #:lower16:.LC658
	str	r0, [sp, #12]
	movw	r2, #:lower16:.LC659
	movt	r3, #:upper16:.LC658
	movt	r2, #:upper16:.LC659
	movt	fp, 65535
	str	r3, [sp, #4]
	str	r2, [sp, #8]
.L7270:
	mov	r1, #44
	mov	r0, r4
	bl	strchr
	subs	r7, r0, #0
	mov	r1, #61
	movne	r3, #0
	mov	r0, r4
	strbne	r3, [r7]
	bl	strchr
	subs	r5, r0, #0
	beq	.L7288
	mov	r3, #0
	mov	r6, r5
	mov	r2, r3
	add	r1, sp, #16
	strb	r3, [r6], #1
	mov	r0, r6
	bl	simple_strtoul
	ldr	r2, [sp, #16]
	mov	r8, r0
	ldrb	r2, [r2]	@ zero_extendqisi2
	cmp	r2, #44
	cmpne	r2, #0
	bne	.L7289
	sub	r5, r5, r4
	cmp	r5, #4
	beq	.L7257
	cmp	r5, #5
	beq	.L7258
	cmp	r5, #3
	beq	.L7290
.L7256:
	movw	r0, #:lower16:.LC663
	mov	r1, r4
	movt	r0, #:upper16:.LC663
	bl	printk
.L7254:
	mvn	r0, #21
	b	.L7250
.L7286:
	ldr	r8, [sp, #12]
.L7251:
	movw	r3, #:lower16:ffs_sb_fill
	mov	r1, r10
	str	r9, [sp, #36]
	mov	r0, r8
	movt	r3, #:upper16:ffs_sb_fill
	add	r2, sp, #20
	bl	mount_single
.L7250:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7257:
	ldrb	r2, [r4]	@ zero_extendqisi2
	cmp	r2, #109
	bne	.L7256
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	add	r1, r4, #1
	cmp	r2, #111
	bne	.L7256
	ldrb	r2, [r1, #1]!	@ zero_extendqisi2
	cmp	r2, #100
	bne	.L7256
	ldrb	r2, [r1, #1]	@ zero_extendqisi2
	cmp	r2, #101
	bne	.L7256
	uxth	r3, r0
	movw	r2, #365
	movw	r1, #438
	and	r2, r2, r3
	and	r3, r3, r1
	orr	r2, r2, #16384
	orr	r3, r3, fp
	strh	r3, [sp, #20]	@ movhi
	strh	r2, [sp, #32]	@ movhi
	b	.L7261
.L7290:
	ldrb	r2, [r4]	@ zero_extendqisi2
	cmp	r2, #117
	beq	.L7291
	cmp	r2, #103
	bne	.L7256
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	cmp	r2, #105
	bne	.L7256
	ldrb	r2, [r4, #2]	@ zero_extendqisi2
	cmp	r2, #100
	bne	.L7256
	str	r0, [sp, #28]
	b	.L7261
.L7258:
	mov	r2, r5
	mov	r0, r4
	ldr	r1, [sp, #4]
	bl	memcmp
	cmp	r0, #0
	bne	.L7260
	movw	r2, #365
	and	r3, r2, r8
	orr	r3, r3, #16384
	strh	r3, [sp, #32]	@ movhi
.L7261:
	cmp	r7, #0
	beq	.L7286
	add	r4, r7, #1
	b	.L7270
.L7260:
	mov	r2, r5
	mov	r0, r4
	ldr	r1, [sp, #8]
	bl	memcmp
	cmp	r0, #0
	bne	.L7256
	movw	r2, #438
	and	r3, r2, r8
	orr	r3, r3, fp
	strh	r3, [sp, #20]	@ movhi
	b	.L7261
.L7288:
	movw	r0, #:lower16:.LC656
	mov	r1, r4
	movt	r0, #:upper16:.LC656
	bl	printk
	b	.L7254
.L7291:
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	cmp	r2, #105
	bne	.L7256
	ldrb	r2, [r4, #2]	@ zero_extendqisi2
	cmp	r2, #100
	bne	.L7256
	str	r0, [sp, #24]
	b	.L7261
.L7289:
	movw	r0, #:lower16:.LC657
	mov	r2, r6
	mov	r1, r4
	movt	r0, #:upper16:.LC657
	bl	printk
	b	.L7254
	.fnend
	.size	ffs_fs_mount, .-ffs_fs_mount
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_setup, %function
audio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #20
	sub	sp, sp, #20
	ldrb	r3, [r1]	@ zero_extendqisi2
	ldrh	r9, [r1, #4]	@ unaligned
	ldrh	r7, [r1, #2]	@ unaligned
	ldr	r6, [r2, #24]
	cmp	r3, #34
	ldrh	r8, [r1, #6]	@ unaligned
	ldr	r5, [r6, #4]
	beq	.L7294
	cmp	r3, #162
	bne	.L7303
	ldr	r0, .L7317
	ldr	fp, [r5]
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7314
.L7300:
	cmp	r7, #256
	bne	.L7303
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	sub	r3, r3, #129
	cmp	r3, #3
	bhi	.L7303
	mov	r1, #68
	mvn	r2, #83
	mov	r3, #0
	mov	r10, #3
	strb	r1, [fp]
	strb	r2, [fp, #1]
	strb	r3, [fp, #2]
.L7299:
	ldr	r0, .L7317+4
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7315
.L7302:
	ldrb	r0, [r5, #26]	@ zero_extendqisi2
	movw	r3, #:lower16:audio_control_complete
	str	r10, [r5, #4]
	movt	r3, #:upper16:audio_control_complete
	mov	r1, r5
	mov	r2, #32
	str	r3, [r5, #28]
	bfc	r0, #1, #1
	strb	r0, [r5, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L7292
	movw	r0, #:lower16:.LC666
	mov	r1, r4
	movt	r0, #:upper16:.LC666
	bl	printk
	b	.L7292
.L7303:
	mvn	r4, #94
.L7292:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7294:
	ldr	r0, .L7317+8
	ldrb	r2, [r1, #1]	@ zero_extendqisi2
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7316
.L7297:
	sub	r2, r2, #1
	cmp	r2, #3
	bhi	.L7303
	mov	r10, r8
	b	.L7299
.L7315:
	movw	r1, #:lower16:.LC665
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	sub	r0, r0, #24
	str	r7, [sp]
	movt	r1, #:upper16:.LC665
	ldrb	r2, [r4]	@ zero_extendqisi2
	str	r9, [sp, #4]
	str	r8, [sp, #8]
	bl	__dynamic_pr_debug
	b	.L7302
.L7316:
	movw	r1, #:lower16:.LC664
	sub	r0, r0, #24
	strd	r8, [sp]
	movt	r1, #:upper16:.LC664
	mov	r3, r7
	bl	__dynamic_pr_debug
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	b	.L7297
.L7314:
	lsr	ip, r9, #8
	ldrb	r2, [r1, #1]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC664
	movt	r1, #:upper16:.LC664
	mov	r3, r7
	sub	r0, r0, #32
	stm	sp, {r8, ip}
	bl	__dynamic_pr_debug
	b	.L7300
.L7318:
	.align	2
.L7317:
	.word	.LANCHOR4-1600
	.word	.LANCHOR4-1584
	.word	.LANCHOR4-1632
	.fnend
	.size	audio_setup, .-audio_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_qti_send_cpkt_tomodem, %function
grmnet_ctrl_qti_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	cmp	r2, #2048
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r5, r2
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r3, #3604]
	bhi	.L7346
	movw	r3, #:lower16:kmalloc_caches
	mov	r7, r1
	movt	r3, #:upper16:kmalloc_caches
	ldr	r6, [r3, #24]
	cmp	r6, #0
	beq	.L7322
	mov	r0, r6
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L7324
	mov	r1, #32
	mov	r0, r5
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r6]
	beq	.L7330
	cmn	r6, #4096
	str	r5, [r6, #4]
	bhi	.L7324
.L7326:
	ldr	r8, .L7350
	mov	r1, r7
	mov	r2, r5
	bl	memcpy
	str	r5, [r6, #4]
	ldrh	r3, [r8, #-14]
	tst	r3, #4
	bne	.L7347
.L7327:
	add	r7, r4, #52
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldrb	r5, [r4, #4]	@ zero_extendqisi2
	mov	r9, r0
	cmp	r5, #0
	beq	.L7348
	add	r0, r6, #8
	add	r2, r4, #44
	ldr	r1, [r4, #48]
	bl	__list_add
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, .L7350+4
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L7349
.L7329:
	add	r0, r4, #32
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	bl	__wake_up
	mov	r0, #0
.L7319:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7322:
	mov	r1, #32
	mov	r0, r2
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r6, #16]
	strne	r5, [r6, #20]
	movne	r6, #16
	bne	.L7326
	mov	r6, #16
.L7330:
	mov	r0, r6
	bl	kfree
.L7324:
	movw	r0, #:lower16:.LC668
	ldr	r1, .L7350+8
	movt	r0, #:upper16:.LC668
	bl	printk
	mvn	r0, #11
	b	.L7319
.L7347:
	movw	r1, #:lower16:.LC669
	mov	r3, r5
	ldr	r2, .L7350+8
	movt	r1, #:upper16:.LC669
	sub	r0, r8, #32
	bl	__dynamic_pr_debug
	b	.L7327
.L7349:
	movw	r1, #:lower16:.LC671
	sub	r0, r8, #8
	ldr	r2, .L7350+8
	movt	r1, #:upper16:.LC671
	bl	__dynamic_pr_debug
	b	.L7329
.L7346:
	movw	r0, #:lower16:.LC667
	mov	r1, r2
	movt	r0, #:upper16:.LC667
	mov	r2, #2048
	bl	printk
	mvn	r0, #21
	b	.L7319
.L7348:
	movw	r0, #:lower16:.LC670
	mov	r1, r4
	movt	r0, #:upper16:.LC670
	bl	printk
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r6]
	bl	kfree
	mov	r0, r6
	bl	kfree
	mov	r0, r5
	b	.L7319
.L7351:
	.align	2
.L7350:
	.word	.LANCHOR4-1552
	.word	.LANCHOR4-1536
	.word	.LANCHOR5-2936
	.fnend
	.size	grmnet_ctrl_qti_send_cpkt_tomodem, .-grmnet_ctrl_qti_send_cpkt_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	uasp_function_cleanup, %function
uasp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	uasp_function_cleanup, .-uasp_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_complete_epout, %function
rmnet_sdio_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r1, #44]
	ldr	r6, [r1, #32]
	ldr	r8, [r4, #84]
	cmn	r3, #104
	beq	.L7380
	cmp	r3, #0
	beq	.L7356
	cmn	r3, #108
	beq	.L7380
	ldr	r2, [r0, #4]
	movw	r1, #:lower16:.LC212
	ldr	lr, [r5, #4]
	movt	r1, #:upper16:.LC212
	ldr	ip, [r5, #48]
	ldr	r0, [r8]
	stm	sp, {ip, lr}
	add	r0, r0, #32
	bl	dev_err
	mov	r0, r6
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #320]
	tst	r3, #2
	beq	.L7357
	add	r7, r4, #188
	mov	r0, r7
	bl	_raw_spin_lock
.L7358:
	movw	r3, #:lower16:.LANCHOR0
	ldr	r2, [r4, #328]
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #1232]
	cmp	r2, r3
	bcs	.L7381
	mov	r0, r7
	bl	_raw_spin_unlock
	mvn	r3, #0
	mov	r2, #0
	mov	r1, #32
	movw	r0, #2056
	bl	__alloc_skb
	subs	r6, r0, #0
	beq	.L7362
	ldr	r0, [r6, #160]
	mov	ip, #2048
	mov	r2, #32
	ldr	r3, [r6, #172]
	mov	r1, r5
	add	r0, r0, #8
	add	r3, r3, #8
	str	r0, [r6, #160]
	str	r3, [r6, #172]
	stm	r5, {r3, ip}
	str	r6, [r5, #32]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	bne	.L7382
.L7353:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7357:
	movw	r0, #:lower16:.LC259
	ldr	r1, .L7383
	movt	r0, #:upper16:.LC259
	bl	printk
.L7380:
	mov	r0, r6
	bl	dev_kfree_skb_any
	mov	r3, #0
	mov	r0, r3
	str	r3, [r5]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	ldr	r3, [r3, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L7356:
	mov	r0, r6
	ldr	r1, [r1, #48]
	bl	skb_put
	ldr	r3, [r4, #320]
	tst	r3, #2
	beq	.L7357
	add	r7, r4, #188
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #176]
	add	r1, r4, #172
	add	r2, r4, #236
	mov	r0, #4
	stm	r6, {r1, r3}
	str	r6, [r3]
	ldr	r3, [r4, #180]
	str	r6, [r4, #176]
	ldr	r1, [r4, #200]
	add	r3, r3, #1
	str	r3, [r4, #180]
	bl	queue_work_on
	b	.L7358
.L7381:
	add	r0, r5, #36
	add	r2, r4, #160
	ldr	r1, [r4, #164]
	bl	__list_add
	ldr	r3, [r4, #168]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #168]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L7382:
	mov	r0, r6
	bl	dev_kfree_skb_any
.L7360:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC214
	mov	r2, r7
	movt	r1, #:upper16:.LC214
	add	r0, r0, #32
	bl	dev_err
	add	r0, r5, #36
	add	r2, r4, #160
	ldr	r1, [r4, #164]
	bl	__list_add
	ldr	r3, [r4, #168]
	add	r3, r3, #1
	str	r3, [r4, #168]
	b	.L7353
.L7362:
	mvn	r7, #11
	b	.L7360
.L7384:
	.align	2
.L7383:
	.word	.LANCHOR5-2900
	.fnend
	.size	rmnet_sdio_complete_epout, .-rmnet_sdio_complete_epout
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_command_complete, %function
rmnet_sdio_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r6, [r4, #84]
	cmp	r2, #0
	blt	.L7397
	ldr	r3, [r4, #324]
	tst	r3, #2
	bne	.L7398
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7398:
	movw	r3, #:lower16:kmalloc_caches
	mov	r5, r1
	ldr	r7, [r1, #48]
	movt	r3, #:upper16:kmalloc_caches
	ldr	r8, [r3, #24]
	cmp	r8, #0
	beq	.L7388
	mov	r0, r8
	mov	r2, #16
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r8, r0, #0
	beq	.L7390
	mov	r1, #32
	mov	r0, r7
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r8]
	beq	.L7394
	cmn	r8, #4096
	bhi	.L7390
.L7393:
	mov	r2, r7
	ldr	r1, [r5]
	add	r5, r4, #188
	bl	memcpy
	mov	r0, r5
	str	r7, [r8, #4]
	bl	_raw_spin_lock
	add	r2, r4, #108
	ldr	r1, [r4, #112]
	add	r0, r8, #8
	bl	__list_add
	ldr	r3, [r4, #116]
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #116]
	bl	_raw_spin_unlock
	ldrd	r6, [sp, #8]
	add	r2, r4, #220
	mov	r0, #4
	ldr	r1, [r4, #200]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	queue_work_on
.L7388:
	mov	r1, #32
	mov	r0, r7
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r8, #16]
	mov	r8, #16
	bne	.L7393
.L7394:
	mov	r0, r8
	bl	kfree
.L7390:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC672
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC672
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
.L7397:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC209
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC209
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
	.fnend
	.size	rmnet_sdio_command_complete, .-rmnet_sdio_command_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	uasp_function_init, %function
uasp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	uasp_function_init, .-uasp_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rx_complete, %function
rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	add	r7, r1, #36
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0]
	ldr	r3, [r1, #44]
	ldr	r6, [r1, #32]
	add	r8, r4, #28
	add	r5, r4, #16
	cmn	r3, #103
	beq	.L7402
	ble	.L7426
	cmn	r3, #75
	beq	.L7405
	cmp	r3, #0
	bne	.L7401
	mov	r0, r6
	ldr	r1, [r1, #48]
	bl	skb_put
	ldr	r3, [r4, #84]
	cmp	r3, #0
	beq	.L7407
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	ldr	r0, [r4, #4]
	cmp	r0, #0
	beq	.L7408
	mov	r1, r6
	add	r2, r4, #52
	ldr	r3, [r4, #84]
	blx	r3
	cmn	r0, #22
	mov	r6, r0
	beq	.L7427
	cmn	r0, #75
	beq	.L7428
	mov	r1, r9
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L7412
	b	.L7410
.L7405:
	ldr	r2, [r4, #8]
	ldr	r3, [r2, #276]
	add	r3, r3, #1
	str	r3, [r2, #276]
.L7401:
	mov	r0, r6
	bl	dev_kfree_skb_any
	ldr	r2, [r4, #8]
	ldr	r3, [r2, #248]
	add	r3, r3, #1
	str	r3, [r2, #248]
.L7412:
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r1, r8
	ldr	r2, [r4, #28]
	mov	r0, r7
	bl	__list_add
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #104
	ldrd	r4, [sp]
	movt	r3, #:upper16:.LANCHOR1
	ldrd	r6, [sp, #8]
	mov	r0, #4
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, [r3, #3404]
	b	queue_work_on
.L7426:
	cmn	r3, #108
	beq	.L7404
	cmn	r3, #104
	bne	.L7401
.L7404:
	mov	r0, r6
	bl	dev_kfree_skb_any
.L7410:
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r0, r7
	mov	r1, r8
	ldr	r2, [r4, #28]
	bl	__list_add
	ldrd	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock
.L7402:
	add	r1, r4, #120
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L7404
	movw	r3, #:lower16:system_wq
	add	r2, r4, #88
	movt	r3, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r3]
	bl	queue_work_on
	subs	r2, r0, #0
	bne	.L7404
	movw	r0, #:lower16:.LC673
	ldr	r1, [r4, #8]
	movt	r0, #:upper16:.LC673
	bl	printk
	b	.L7404
.L7407:
	mov	r1, r6
	add	r0, r4, #52
	bl	skb_queue_tail
	b	.L7412
.L7427:
	ldr	r2, [r4, #8]
	mov	r1, r9
	mov	r0, r4
	ldr	r3, [r2, #248]
	add	r3, r3, #1
	str	r3, [r2, #248]
	bl	_raw_spin_unlock_irqrestore
	b	.L7410
.L7428:
	ldr	r2, [r4, #8]
	mov	r1, r9
	mov	r0, r4
	ldr	r3, [r2, #276]
	add	r3, r3, #1
	str	r3, [r2, #276]
	bl	_raw_spin_unlock_irqrestore
	b	.L7410
.L7408:
	mov	r0, r6
	bl	dev_kfree_skb_any
	mov	r1, r9
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	b	.L7410
	.fnend
	.size	rx_complete, .-rx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_sdio_open, %function
debug_sdio_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	debug_sdio_open, .-debug_sdio_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_smd_open, %function
debug_smd_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	debug_smd_open, .-debug_smd_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_close, %function
modem_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	modem_close, .-modem_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_function_init, %function
qdss_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	qdss_function_init, .-qdss_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ptp_function_init, %function
ptp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	ptp_function_init, .-ptp_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_rmnet_sdio_open, %function
debug_rmnet_sdio_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	debug_rmnet_sdio_open, .-debug_rmnet_sdio_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	serial_debug_open, %function
serial_debug_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	serial_debug_open, .-serial_debug_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	dbg_rmnet_mux_open, %function
dbg_rmnet_mux_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	dbg_rmnet_mux_open, .-dbg_rmnet_mux_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_in_close, %function
f_midi_in_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_in_close, .-f_midi_in_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_out_close, %function
f_midi_out_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_out_close, .-f_midi_out_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_start, %function
acc_hid_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	acc_hid_start, .-acc_hid_start
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_open, %function
acc_hid_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	acc_hid_open, .-acc_hid_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_lun_release, %function
fsg_lun_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	fsg_lun_release, .-fsg_lun_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ptp_function_cleanup, %function
ptp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	ptp_function_cleanup, .-ptp_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_stop, %function
acc_hid_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	acc_hid_stop, .-acc_hid_stop
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_close, %function
acc_hid_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	acc_hid_close, .-acc_hid_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_do_descs.constprop.141, %function
ffs_do_descs.constprop.141:
	.fnstart
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	cmp	r1, #0
	ldr	r5, [sp, #16]
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	clz	lr, r0
	lsr	lr, lr, #5
	moveq	lr, #1
	cmp	lr, #0
	bne	.L7462
	cmp	r2, #1
	bls	.L7450
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r2, r3
	bcc	.L7450
	mov	r4, r2
.L7448:
	ldrb	ip, [r1, #1]	@ zero_extendqisi2
	sub	ip, ip, #4
	cmp	ip, #44
	ldrls	pc, [pc, ip, asl #2]
	b	.L7450
.L7452:
	.word	.L7451
	.word	.L7453
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7454
	.word	.L7450
	.word	.L7455
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7450
	.word	.L7456
.L7454:
	cmp	r3, #5
	bne	.L7450
.L7459:
	adds	r1, r1, r3
	add	lr, lr, #1
	moveq	ip, #1
	movne	ip, #0
	sub	r4, r4, r3
	cmp	r0, lr
	movne	r3, ip
	orreq	r3, ip, #1
	cmp	r3, #0
	bne	.L7474
	cmp	r4, #1
	bls	.L7450
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r4, r3
	bcs	.L7448
.L7450:
	ldr	r0, .L7476
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	mvneq	r0, #21
	bne	.L7475
.L7445:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7456:
	cmp	r3, #6
	beq	.L7459
	b	.L7450
.L7453:
	sub	ip, r3, #7
	tst	ip, #253
	bne	.L7450
	ldrb	ip, [r1, #2]	@ zero_extendqisi2
	ands	ip, ip, #15
	beq	.L7450
	ldrh	r6, [r5, #180]
	cmp	ip, r6
	strhgt	ip, [r5, #180]	@ movhi
	b	.L7459
.L7451:
	cmp	r3, #9
	bne	.L7450
	ldrb	ip, [r1, #2]	@ zero_extendqisi2
	ldrh	r6, [r5, #178]
	cmp	r6, ip
	addls	ip, ip, #1
	strhls	ip, [r5, #178]	@ movhi
	ldrb	ip, [r1, #8]	@ zero_extendqisi2
	cmp	ip, #0
	beq	.L7459
.L7473:
	ldrh	r6, [r5, #176]
	uxth	ip, ip
	cmp	r6, ip
	strhcc	ip, [r5, #176]	@ movhi
	b	.L7459
.L7455:
	cmp	r3, #8
	bne	.L7450
	ldrb	ip, [r1, #7]	@ zero_extendqisi2
	cmp	ip, #0
	bne	.L7473
	b	.L7459
.L7474:
	sub	r0, r2, r4
	b	.L7445
.L7462:
	mov	r0, #0
	b	.L7445
.L7475:
	movw	r1, #:lower16:.LC674
	sub	r0, r0, #32
	ldr	r2, .L7476+4
	movt	r1, #:upper16:.LC674
	mvn	r3, #21
	bl	__dynamic_pr_debug
	mvn	r0, #21
	b	.L7445
.L7477:
	.align	2
.L7476:
	.word	.LANCHOR4-1504
	.word	.LANCHOR5-2872
	.fnend
	.size	ffs_do_descs.constprop.141, .-ffs_do_descs.constprop.141
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_function_cleanup, %function
audio_source_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #4]
	b	kfree
	.fnend
	.size	audio_source_function_cleanup, .-audio_source_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_cleanup.part.80, %function
gserial_cleanup.part.80:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r6, #3760]
	str	lr, [sp, #24]
	.pad #28
	sub	sp, sp, #28
	cmp	r3, #0
	beq	.L7480
	mov	r4, #0
.L7481:
	mov	r1, r4
	ldr	r0, [r6, #3764]
	add	r4, r4, #1
	bl	tty_unregister_device
	ldr	r3, [r6, #3760]
	cmp	r4, r3
	bcc	.L7481
	cmp	r3, #0
	beq	.L7480
	mov	r3, sp
	ldr	r5, .L7505
	mov	r8, #0
	bic	r9, r3, #8128
	bic	r9, r9, #63
.L7482:
	mov	r0, r5
	bl	mutex_lock
	ldr	r4, [r5, #20]
	mov	r3, #0
	mov	r0, r5
	str	r3, [r5, #20]
	bl	mutex_unlock
	add	r0, r4, #60
	bl	cancel_work_sync
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #12]
	cmp	r3, #0
	bne	.L7483
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L7502
.L7483:
	mov	r0, r4
	add	r7, r4, #20
	bl	_raw_spin_unlock_irq
	ldr	r0, [r9, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #16
	mov	r3, #0
	movt	r2, #:upper16:autoremove_wake_function
	str	r3, [sp, #4]
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L7487
.L7485:
	bl	_raw_spin_unlock_irq
	bl	schedule
.L7487:
	mov	r2, #2
	add	r1, sp, #4
	mov	r0, r7
	bl	prepare_to_wait
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #12]
	mov	r0, r4
	cmp	r3, #0
	bne	.L7485
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L7485
	bl	_raw_spin_unlock_irq
	add	r1, sp, #4
	mov	r0, r7
	bl	finish_wait
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L7503
.L7488:
	mov	r0, r4
	add	r8, r8, #1
	bl	kfree
	ldr	r3, [r6, #3760]
	add	r5, r5, #24
	cmp	r8, r3
	bcc	.L7482
.L7480:
	mov	r4, #0
	ldr	r0, [r6, #3960]
	str	r4, [r6, #3760]
	bl	debugfs_remove_recursive
	ldr	r0, [r6, #3388]
	bl	destroy_workqueue
	ldr	r0, [r6, #3764]
	bl	tty_unregister_driver
	ldr	r0, [r6, #3764]
	bl	put_tty_driver
	ldr	r0, .L7505+4
	str	r4, [r6, #3764]
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7504
.L7479:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L7502:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L7488
.L7503:
	movw	r0, #:lower16:.LC675
	movw	r1, #1477
	movt	r0, #:upper16:.LC675
	add	r8, r8, #1
	bl	warn_slowpath_null
	mov	r0, r4
	add	r5, r5, #24
	bl	kfree
	ldr	r3, [r6, #3760]
	cmp	r3, r8
	bhi	.L7482
	b	.L7480
.L7504:
	movw	r1, #:lower16:.LC676
	ldr	r2, .L7505+8
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC676
	bl	__dynamic_pr_debug
	b	.L7479
.L7506:
	.align	2
.L7505:
	.word	.LANCHOR1+3768
	.word	.LANCHOR4-1488
	.word	.LANCHOR5-2856
	.fnend
	.size	gserial_cleanup.part.80, .-gserial_cleanup.part.80
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_function_cleanup, %function
acm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r3, #3764]
	cmp	r3, #0
	beq	.L7508
	bl	gserial_cleanup.part.80
.L7508:
	ldr	r0, [r4, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	acm_function_cleanup, .-acm_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_function_cleanup, %function
rndis_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_function_cleanup, .-rndis_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_function_cleanup, %function
mass_storage_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	mass_storage_function_cleanup, .-mass_storage_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	__ffs_data_do_entity, %function
__ffs_data_do_entity:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #2
	beq	.L7519
	cmp	r0, #3
	beq	.L7520
	cmp	r0, #1
	beq	.L7522
	mov	r0, #0
	bx	lr
.L7522:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #178]
	cmp	r1, r2
	addls	r2, r2, #1
	strhls	r2, [r3, #178]	@ movhi
	bx	lr
.L7520:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #180]
	and	r2, r2, #15
	cmp	r2, r1
	strhgt	r2, [r3, #180]	@ movhi
	bx	lr
.L7519:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #176]
	cmp	r1, r2
	strhcc	r2, [r3, #176]	@ movhi
	bx	lr
	.fnend
	.size	__ffs_data_do_entity, .-__ffs_data_do_entity
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_indicate_status_msg, %function
rndis_indicate_status_msg:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	lsl	r5, r0, #4
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	ldr	r10, .L7530
	sub	r4, r5, r0
	lsl	r4, r4, #2
	strd	r8, [sp, #16]
	str	lr, [sp, #28]
	add	r7, r10, r4
	ldr	r3, [r7, #4]
	cmp	r3, #0
	beq	.L7526
	movw	r3, #:lower16:kmalloc_caches
	mov	r9, r0
	movt	r3, #:upper16:kmalloc_caches
	mov	r8, r1
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L7527
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L7528
	add	r2, r6, #20
.L7525:
	movw	r3, #:lower16:.LANCHOR1
	sub	r5, r5, r9
	str	r2, [r6, #8]
	movt	r3, #:upper16:.LANCHOR1
	mov	r9, #20
	add	r3, r3, r5, lsl #2
	mov	r5, #0
	add	r2, r4, #52
	str	r9, [r6, #12]
	mov	r0, r6
	str	r5, [r6, #16]
	add	r2, r10, r2
	ldr	r1, [r3, #3736]
	bl	__list_add
	ldr	r3, [r6, #8]
	mov	r2, #7
	stm	r3, {r2, r9}
	str	r8, [r3, #8]
	str	r5, [r3, #12]
	str	r5, [r3, #16]
	ldr	r3, [r7, #44]
	ldr	r0, [r7, #48]
	blx	r3
	mov	r0, r5
.L7523:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7527:
	mov	r2, #36
	mov	r6, #16
	b	.L7525
.L7526:
	movw	r0, #65012
	movt	r0, 65535
	b	.L7523
.L7528:
	mvn	r0, #11
	b	.L7523
.L7531:
	.align	2
.L7530:
	.word	.LANCHOR1+3680
	.fnend
	.size	rndis_indicate_status_msg, .-rndis_indicate_status_msg
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_proc_write, %function
rndis_proc_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	subs	r9, r2, #0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #12]
	.pad #4
	sub	sp, sp, #4
	ldr	r3, [r3, #32]
	ldr	r3, [r3, #-20]
	ldr	r8, [r3, #44]
	beq	.L7533
	mov	r7, #0
	mov	r6, #57344
	movw	r10, #:lower16:.LC677
	mov	r4, r1
	mov	r5, r7
	movt	r6, 65535
	movt	r10, #:upper16:.LC677
	add	fp, r1, r9
.L7542:
	mov	r3, sp
	mov	r0, r4
	and	r3, r3, r6
	ldr	r1, [r3, #8]
	sub	r1, r1, #1
	.syntax divided
@ 1185 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/rndis.c" 1
	.ifnc r0,r0 ; .err ; .endif
	.ifnc r2,r2 ; .err ; .endif
	.ifnc r1,r1 ; .err ; .endif
	bl	__get_user_1
@ 0 "" 2
	.arm
	.syntax unified
	uxtb	r2, r2
	cmp	r0, #0
	sub	r3, r2, #48
	bne	.L7543
	cmp	r3, #52
	ldrls	pc, [pc, r3, asl #2]
	b	.L7535
.L7537:
	.word	.L7536
	.word	.L7536
	.word	.L7536
	.word	.L7536
	.word	.L7536
	.word	.L7536
	.word	.L7536
	.word	.L7536
	.word	.L7536
	.word	.L7536
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7538
	.word	.L7539
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7535
	.word	.L7538
	.word	.L7539
.L7539:
	ldrb	r0, [r8]	@ zero_extendqisi2
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #1
	movt	r3, #:upper16:.LANCHOR1
	mov	r1, #12
.L7552:
	rsb	ip, r0, r0, lsl #4
	movt	r1, 16385
	add	r3, r3, ip, lsl #2
	str	r2, [r3, #3696]
	bl	rndis_indicate_status_msg
.L7540:
	add	r4, r4, #1
	cmp	r4, fp
	bne	.L7542
.L7533:
	mov	r0, r9
.L7532:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7538:
	movw	r3, #:lower16:.LANCHOR1
	ldrb	r0, [r8]	@ zero_extendqisi2
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	mov	r1, #11
	b	.L7552
.L7536:
	add	r5, r5, r5, lsl #2
	mov	r7, #1
	add	r5, r3, r5, lsl r7
	b	.L7540
.L7535:
	cmp	r7, #0
	ldr	r0, .L7553
	strne	r5, [r8, #12]
	bne	.L7540
	ldrh	r3, [r0]
	tst	r3, #4
	beq	.L7540
	mov	r1, r10
	sub	r0, r0, #18
	bl	__dynamic_pr_debug
	b	.L7540
.L7543:
	mvn	r0, #13
	b	.L7532
.L7554:
	.align	2
.L7553:
	.word	.LANCHOR4-1470
	.fnend
	.size	rndis_proc_write, .-rndis_proc_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_complete, %function
f_audio_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r3, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #20
	sub	sp, sp, #20
	ldr	r6, [r1, #32]
	ldr	r7, [r1, #44]
	str	r3, [sp, #12]
	cmp	r7, r3
	bne	.L7594
	ldr	r3, [r6, #172]
	mov	r5, r0
	mov	r4, r1
	cmp	r3, r0
	beq	.L7597
	ldr	r3, [r6, #176]
	cmp	r3, r0
	beq	.L7598
	ldr	r5, [r6, #272]
	cmp	r5, #0
	beq	.L7555
	ldm	r1, {r1, r2}
	add	r0, sp, #12
	bl	memcpy
	ldrh	r2, [sp, #12]
	mov	r0, r5
	ldrb	r1, [r6, #268]	@ zero_extendqisi2
	ldr	r3, [r5, #36]
	blx	r3
	str	r7, [r6, #272]
.L7555:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L7597:
	ldr	r7, [r6, #184]
	cmp	r7, #0
	beq	.L7555
	movw	r8, #:lower16:.LANCHOR0
	ldr	ip, [r7, #4]
	movt	r8, #:upper16:.LANCHOR0
	ldr	r2, [r1, #48]
	ldr	r3, [r8, #1076]
	sub	r1, r3, ip
	cmp	r1, r2
	bcs	.L7561
	ldr	r0, .L7604
	ldrh	r1, [r0, #-6]
	tst	r1, #4
	bne	.L7599
.L7562:
	add	r0, r7, #8
	add	r2, r6, #204
	ldr	r1, [r6, #208]
	bl	__list_add
	movw	r3, #:lower16:system_wq
	add	r2, r6, #188
	movt	r3, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r3]
	bl	queue_work_on
	ldr	r0, [r8, #1076]
	bl	f_audio_buffer_alloc
	cmn	r0, #4096
	mov	r7, r0
	bhi	.L7563
	ldr	r2, [r4, #48]
	ldr	ip, [r0, #4]
.L7561:
	ldr	r0, [r7]
	ldr	r1, [r4]
	add	r0, r0, ip
	bl	memcpy
	ldr	ip, [r4, #48]
	mov	r1, r4
	mov	r2, #32
	ldr	r3, [r7, #4]
	mov	r0, r5
	add	r3, r3, ip
	str	r3, [r7, #4]
	str	r7, [r6, #184]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L7555
	ldr	r1, .L7604+4
	movw	r0, #:lower16:.LC679
	ldr	r2, [r5, #4]
	movt	r0, #:upper16:.LC679
.L7596:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk
.L7598:
	ldr	r7, [r6, #216]
	cmp	r7, #0
	beq	.L7600
.L7566:
	ldr	r0, .L7604+8
	ldr	r2, [r4, #48]
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7601
.L7570:
	ldm	r7, {r1, r3}
	ldr	r0, [r4]
	add	r1, r1, r3
	bl	memcpy
	ldr	r1, [r4, #48]
	movw	r2, #:lower16:.LANCHOR0
	ldr	r3, [r7, #4]
	movt	r2, #:upper16:.LANCHOR0
	ldr	r2, [r2, #1236]
	add	r3, r3, r1
	sub	r2, r2, r3
	str	r3, [r7, #4]
	ldr	r3, [r4, #48]
	cmp	r2, r3
	bcs	.L7569
	cmp	r7, #0
	beq	.L7571
	ldr	r0, [r7]
	bl	kfree
	mov	r3, #0
	mov	r0, r7
	str	r3, [r7]
	bl	kfree
.L7571:
	mov	r0, #0
	movw	r3, #:lower16:system_wq
	movt	r3, #:upper16:system_wq
	add	r2, r6, #220
	str	r0, [r6, #216]
	ldr	r1, [r3]
	mov	r0, #4
	bl	queue_work_on
.L7569:
	ldr	r3, [r5, #8]
	mov	r1, r4
	mov	r2, #32
	mov	r0, r5
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L7555
	movw	r0, #:lower16:.LC679
	ldr	r1, .L7604+12
	movt	r0, #:upper16:.LC679
	ldr	r2, [r5, #4]
	b	.L7596
.L7600:
	ldr	r0, .L7604+16
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7602
.L7567:
	add	r8, r6, #212
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r3, r6
	mov	r9, r0
	ldr	r0, [r3, #236]!
	cmp	r0, r3
	beq	.L7603
	sub	r7, r0, #8
	bl	list_del
	mov	r1, r9
	mov	r0, r8
	str	r7, [r6, #216]
	bl	_raw_spin_unlock_irqrestore
	b	.L7566
.L7601:
	movw	r1, #:lower16:.LC681
	mov	r3, r2
	ldr	r2, .L7604+12
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC681
	bl	__dynamic_pr_debug
	ldr	r2, [r4, #48]
	b	.L7570
.L7603:
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:system_wq
	add	r2, r6, #220
	movt	r3, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r3]
	bl	queue_work_on
	b	.L7569
.L7563:
	ldr	r1, .L7604+4
	movw	r0, #:lower16:.LC39
	movt	r0, #:upper16:.LC39
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk
.L7599:
	movw	r1, #:lower16:.LC678
	str	ip, [sp]
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC678
	str	r2, [sp, #4]
	ldr	r2, .L7604+4
	bl	__dynamic_pr_debug
	b	.L7562
.L7602:
	movw	r1, #:lower16:.LC680
	ldr	r2, .L7604+12
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC680
	bl	__dynamic_pr_debug
	b	.L7567
.L7594:
	ldr	r1, .L7604+20
	movw	r0, #:lower16:.LC682
	mov	r2, r7
	movt	r0, #:upper16:.LC682
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk
.L7605:
	.align	2
.L7604:
	.word	.LANCHOR4-1440
	.word	.LANCHOR5-2840
	.word	.LANCHOR4-1392
	.word	.LANCHOR5-2808
	.word	.LANCHOR4-1408
	.word	.LANCHOR5-2780
	.fnend
	.size	f_audio_complete, .-f_audio_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_unbind, %function
audio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r8, r1, #108
	add	r9, r1, #96
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	b	.L7607
.L7610:
	ldr	r6, [r5, #104]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L7607:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #96]
	mov	r6, r0
	cmp	r4, r9
	mov	r0, r4
	sub	r7, r4, #36
	beq	.L7612
	bl	list_del
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	bne	.L7610
.L7609:
	ldr	r0, [r5, #84]
	bl	snd_card_free_when_closed
	mov	r3, #0
	str	r3, [r5, #84]
	str	r3, [r5, #88]
	str	r3, [r5, #92]
	str	r3, [r5, #104]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7612:
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L7609
	.fnend
	.size	audio_unbind, .-audio_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	do_set_interface, %function
do_set_interface:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r3, [r0, #144]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	tst	r3, #32
	beq	.L7614
	ldr	r0, .L7650
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7649
.L7614:
	clz	r3, r7
	movw	r9, #:lower16:bulk_in_complete
	lsr	r3, r3, #5
	movw	r8, #:lower16:bulk_out_complete
	movt	r9, #:upper16:bulk_in_complete
	movt	r8, #:upper16:bulk_out_complete
	str	r3, [sp, #4]
	mov	r3, #0
	str	r3, [sp]
.L7623:
	ldr	fp, [r4, #8]
	cmp	fp, #0
	beq	.L7615
	mov	r6, #0
	mov	r10, r6
.L7618:
	ldr	r5, [r4, #68]
	add	r5, r5, r6
	add	r6, r6, #32
	ldr	r1, [r5, #16]
	cmp	r1, #0
	beq	.L7616
	ldr	r0, [fp, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	str	r10, [r5, #16]
.L7616:
	ldr	r1, [r5, #24]
	cmp	r1, #0
	beq	.L7617
	ldr	r0, [fp, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	str	r10, [r5, #24]
.L7617:
	cmp	r6, #128
	bne	.L7618
	mov	r0, #0
	mov	r2, #1
	mov	r3, r0
	mov	r1, #3
	str	r0, [r4, #8]
	add	r0, r4, #16
	bl	__wake_up
.L7615:
	ldm	sp, {r2, r6}
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	cmp	r2, #0
	movne	r6, #1
	bfc	r3, #5, #1
	cmp	r6, #0
	strb	r3, [r4, #144]
	bne	.L7613
	str	r7, [r4, #8]
.L7625:
	ldr	r10, [r7, #100]
	mov	r1, #32
	ldr	r5, [r4, #68]
	ldr	r3, [r10, #8]
	mov	r0, r10
	add	r5, r5, r6
	add	r6, r6, r1
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	mov	r1, #32
	str	r0, [r5, #16]
	beq	.L7647
	ldr	r10, [r7, #104]
	ldr	r3, [r10, #8]
	mov	r0, r10
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r5, #24]
	beq	.L7647
	ldr	r3, [r5]
	cmp	r6, #128
	str	r3, [r0]
	ldr	r2, [r5, #16]
	str	r3, [r2]
	ldr	r3, [r5, #24]
	str	r5, [r3, #32]
	ldr	r3, [r5, #16]
	str	r5, [r3, #32]
	ldr	r3, [r5, #16]
	str	r9, [r3, #28]
	ldr	r3, [r5, #24]
	str	r8, [r3, #28]
	bne	.L7625
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	ldr	r2, [r4, #92]
	orr	r3, r3, #32
	cmp	r2, #0
	strb	r3, [r4, #144]
	beq	.L7627
	mov	r2, #0
	mov	r0, #10496
	mov	r1, r2
	movt	r0, 6
.L7626:
	ldr	r3, [r4, #100]
	add	r1, r1, #1
	add	r3, r3, r2
	add	r2, r2, #392
	str	r0, [r3, #36]
	ldr	r3, [r4, #92]
	cmp	r3, r1
	bhi	.L7626
.L7627:
	mov	r3, #0
	str	r3, [sp]
.L7613:
	ldr	r0, [sp]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7649:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC683
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC683
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L7614
.L7647:
	ldr	r0, [r4]
	mvn	r3, #11
	movw	r1, #:lower16:.LC684
	movt	r1, #:upper16:.LC684
	str	r3, [sp]
	ldr	r2, [r10, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L7623
.L7651:
	.align	2
.L7650:
	.word	.LANCHOR4-1360
	.fnend
	.size	do_set_interface, .-do_set_interface
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_write_tohost, %function
ghsic_data_write_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #136
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #88
	strd	r8, [sp, #16]
	mov	r0, r7
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	bl	_raw_spin_lock_irqsave
	ldr	r8, [r4, #-128]
	mov	r9, r0
	cmp	r8, #0
	beq	.L7656
	movw	r3, #:lower16:.LANCHOR1
	movw	fp, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR1
	movw	r2, #16960
	movt	r2, 15
	movt	fp, #:upper16:.LANCHOR0
	str	r3, [sp, #8]
	sub	r3, r4, #112
	str	r3, [sp, #4]
	str	r2, [sp, #12]
.L7655:
	ldr	r3, [r4, #-112]
	ldr	r2, [sp, #4]
	cmp	r3, r2
	beq	.L7656
.L7664:
	mov	r3, r4
	ldr	r5, [r3, #-104]!
	cmp	r5, r3
	beq	.L7656
	cmp	r5, #0
	beq	.L7656
	ldr	r3, [r4, #-96]
	mov	r2, #0
	sub	r3, r3, #1
	str	r3, [r4, #-96]
	ldm	r5, {r1, r3}
	str	r2, [r5]
	str	r2, [r5, #4]
	str	r3, [r1, #4]
	str	r1, [r3]
	ldr	r6, [r4, #-112]
	str	r5, [r6, #-4]
	ldr	r1, [r5, #172]
	mov	r0, r6
	ldrb	r3, [r6, #-10]	@ zero_extendqisi2
	sub	r10, r6, #36
	str	r1, [r6, #-36]
	ldr	r1, [r5, #80]
	orr	r3, r3, #2
	str	r1, [r6, #-32]
	strb	r3, [r6, #-10]
	ldr	r3, [r4, #48]
	ldr	r1, [fp, #1240]
	add	r3, r3, #1
	cmp	r3, r1
	str	r3, [r4, #48]
	ldrb	r3, [r6, #-10]	@ zero_extendqisi2
	bfieq	r3, r2, #0, #1
	orrne	r3, r3, #1
	strbeq	r3, [r6, #-10]
	strbne	r3, [r6, #-10]
	streq	r2, [r4, #48]
	bl	list_del
	ldr	r3, [sp, #8]
	ldr	r3, [r3, #3664]
	cmp	r3, #0
	bne	.L7683
.L7659:
	mov	r1, r9
	mov	r0, r7
	str	r3, [r5, #44]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r8, #8]
	mov	r1, r10
	mov	r2, #208
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	cmp	r10, #0
	mov	r9, r0
	bne	.L7684
	ldr	r3, [r4, #56]
	ldr	r2, [fp, #492]
	add	r3, r3, #1
	cmp	r2, #0
	str	r3, [r4, #56]
	beq	.L7655
	ldr	r2, [r4, #-96]
	ldr	r3, [fp, #1244]
	cmp	r2, r3
	bhi	.L7655
	add	r1, r4, #28
	mov	r0, #2
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L7655
	ldr	r2, [r4, #-96]
	ldr	r3, [r4, #64]
	str	r2, [r4, #80]
	ldr	r2, [sp, #4]
	add	r3, r3, #1
	str	r3, [r4, #64]
	ldr	r3, [r4, #-112]
	cmp	r3, r2
	bne	.L7664
.L7656:
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7683:
	add	r0, sp, #16
	bl	do_gettimeofday
	ldr	r1, [sp, #12]
	ldr	r3, [sp, #16]
	ldr	r2, [sp, #20]
	ubfx	r3, r3, #0, #12
	mla	r3, r1, r3, r2
	b	.L7659
.L7684:
	movw	r0, #:lower16:.LC572
	ldr	r1, .L7685
	movt	r0, #:upper16:.LC572
	bl	printk
	ldr	r1, [sp, #4]
	mov	r0, r6
	ldr	r2, [r4, #-112]
	bl	__list_add
	mov	r0, r5
	bl	dev_kfree_skb_any
	b	.L7656
.L7686:
	.align	2
.L7685:
	.word	.LANCHOR5-2760
	.fnend
	.size	ghsic_data_write_tohost, .-ghsic_data_write_tohost
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_notify_complete, %function
mbim_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r7, [r1]
	ldr	r4, [r1, #32]
	add	r6, r4, #204
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r5, #44]
	cmn	r3, #104
	beq	.L7689
	cmp	r3, #0
	bne	.L7745
	add	r3, r4, #168
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, .L7756
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7746
.L7691:
	ldr	r7, .L7756+4
	ldr	r5, [r4, #160]
	ldrh	r3, [r7, #-14]
	tst	r3, #4
	bne	.L7747
.L7700:
	cmp	r5, #0
	beq	.L7702
	ldrb	r3, [r4, #164]	@ zero_extendqisi2
	ldr	r2, [r5]
	cmp	r3, #0
	beq	.L7704
	cmp	r3, #3
	bne	.L7748
	ldr	r7, .L7756+8
	ldrh	r3, [r7, #-14]
	tst	r3, #4
	bne	.L7749
.L7708:
	ldr	r3, [r4, #168]
	cmp	r3, #0
	bgt	.L7709
	ldr	r3, .L7756+12
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L7750
.L7702:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, .L7756+16
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7751
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7704:
	ldr	r3, [r4, #168]
	cmp	r3, #0
	bgt	.L7752
	ldr	r3, .L7756+20
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	beq	.L7702
	movw	r1, #:lower16:.LC690
	sub	r0, r7, #8
	ldr	r2, .L7756+24
	movt	r1, #:upper16:.LC690
	bl	__dynamic_pr_debug
	b	.L7702
.L7748:
	mvn	r3, #94
	add	r7, r4, #168
	strb	r3, [r2]
	ldrb	r3, [r4, #196]	@ zero_extendqisi2
	strh	r3, [r2, #4]	@ unaligned
	.syntax divided
@ 45 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r3, [r7]
	add	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, .L7756+28
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7753
.L7710:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r4, #156]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r5, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r5, #0
	beq	.L7702
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC695
	mov	r2, r5
	ldr	r1, .L7756+24
	movt	r0, #:upper16:.LC695
	bl	printk
	b	.L7702
.L7709:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r4, #156]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r5, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r5, #0
	beq	.L7702
	add	r3, r4, #168
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC693
	mov	r2, r5
	ldr	r1, .L7756+24
	movt	r0, #:upper16:.LC693
	bl	printk
	b	.L7702
.L7747:
	movw	r1, #:lower16:.LC688
	ldrb	r3, [r4, #164]	@ zero_extendqisi2
	sub	r0, r7, #32
	movt	r1, #:upper16:.LC688
	ldr	r2, .L7756+24
	bl	__dynamic_pr_debug
	b	.L7700
.L7751:
	ldr	r3, .L7756+32
	movw	r1, #:lower16:.LC696
	sub	r0, r0, #24
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC696
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	mov	r2, r3
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__dynamic_pr_debug
.L7746:
	movw	r1, #:lower16:.LC685
	ldr	r2, .L7756+32
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC685
	ldr	r3, [r4, #168]
	bl	__dynamic_pr_debug
	b	.L7691
.L7750:
	movw	r1, #:lower16:.LC692
	sub	r0, r7, #8
	ldr	r2, .L7756+24
	movt	r1, #:upper16:.LC692
	bl	__dynamic_pr_debug
	b	.L7702
.L7753:
	movw	r1, #:lower16:.LC694
	ldr	r2, .L7756+24
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC694
	ldr	r3, [r4, #168]
	bl	__dynamic_pr_debug
	b	.L7710
.L7749:
	movw	r1, #:lower16:.LC691
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	sub	r0, r7, #32
	movt	r1, #:upper16:.LC691
	ldr	r2, .L7756+24
	bl	__dynamic_pr_debug
	b	.L7708
.L7745:
	cmn	r3, #108
	beq	.L7689
	movw	r0, #:lower16:.LC687
	ldrb	r2, [r7, #1]	@ zero_extendqisi2
	ldr	r1, .L7756+32
	movt	r0, #:upper16:.LC687
	bl	printk
	b	.L7691
.L7689:
	mov	r3, #0
	movw	r0, #:lower16:.LC686
	ldr	r1, .L7756+32
	movt	r0, #:upper16:.LC686
	mov	r8, r4
	strb	r3, [r4, #164]
	str	r3, [r4, #168]
	bl	printk
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r5, [r8, #208]!
	cmp	r5, r8
	ldrne	r7, [r5]
	bne	.L7693
	b	.L7692
.L7754:
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r9
	bl	kfree
	cmp	r7, r8
	ldr	r3, [r7]
	beq	.L7692
.L7695:
	mov	r5, r7
	mov	r7, r3
.L7693:
	mov	r0, r5
	sub	r9, r5, #8
	bl	list_del
	cmp	r9, #0
	bne	.L7754
	cmp	r7, r8
	ldr	r3, [r7]
	bne	.L7695
.L7692:
	mov	r8, r4
	ldr	r5, [r8, #216]!
	cmp	r8, r5
	ldrne	r7, [r5]
	bne	.L7697
	b	.L7696
.L7755:
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r9
	bl	kfree
	cmp	r8, r7
	ldr	r3, [r7]
	beq	.L7696
.L7699:
	mov	r5, r7
	mov	r7, r3
.L7697:
	mov	r0, r5
	sub	r9, r5, #8
	bl	list_del
	cmp	r9, #0
	bne	.L7755
	cmp	r8, r7
	ldr	r3, [r7]
	bne	.L7699
.L7696:
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r0, r4
	bl	mbim_reset_function_queue
	mov	r0, r6
	bl	_raw_spin_lock
	b	.L7691
.L7752:
	movw	r0, #:lower16:.LC689
	ldr	r1, .L7756+24
	movt	r0, #:upper16:.LC689
	bl	printk
	b	.L7702
.L7757:
	.align	2
.L7756:
	.word	.LANCHOR4-1344
	.word	.LANCHOR4-1312
	.word	.LANCHOR4-1264
	.word	.LANCHOR4-1248
	.word	.LANCHOR4-1200
	.word	.LANCHOR4-1296
	.word	.LANCHOR5-2712
	.word	.LANCHOR4-1216
	.word	.LANCHOR5-2736
	.fnend
	.size	mbim_notify_complete, .-mbim_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_probe, %function
ghsic_data_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L7791
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r5, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r5, #:upper16:.LANCHOR1
	str	lr, [sp, #16]
	ldr	r6, [r5, #1436]
	.pad #12
	sub	sp, sp, #12
	ldr	r7, [r0]
	ldrh	r3, [r2, #-14]
	tst	r3, #4
	bne	.L7790
.L7759:
	cmp	r6, #0
	beq	.L7760
	ldr	r4, [r5, #1440]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L7761
	cmp	r6, #1
	bls	.L7760
	ldr	r4, [r5, #1544]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L7761
	cmp	r6, #2
	beq	.L7760
	ldr	r4, [r5, #1648]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L7761
	cmp	r6, #3
	beq	.L7760
	ldr	r4, [r5, #1752]
	mov	r1, r7
	mov	r2, #20
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L7761
.L7760:
	movw	r0, #:lower16:.LC179
	mvn	r2, #21
	ldr	r1, .L7791+4
	movt	r0, #:upper16:.LC179
	bl	printk
	mvn	r0, #21
.L7758:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L7761:
	mov	r0, #1
	add	r1, r4, #180
	bl	_set_bit
	ldr	r0, [r4, #4]
	cmp	r0, #0
	beq	.L7758
	add	r2, r4, #88
	mov	r0, #4
	ldr	r1, [r4, #84]
	bl	queue_work_on
	mov	r0, #0
	b	.L7758
.L7790:
	movw	r1, #:lower16:.LC697
	mov	r4, r0
	str	r6, [sp]
	mov	r3, r7
	sub	r0, r2, #32
	ldr	r2, .L7791+4
	movt	r1, #:upper16:.LC697
	bl	__dynamic_pr_debug
	ldr	r7, [r4]
	ldr	r6, [r5, #1436]
	b	.L7759
.L7792:
	.align	2
.L7791:
	.word	.LANCHOR4-1168
	.word	.LANCHOR5-2696
	.fnend
	.size	ghsic_data_probe, .-ghsic_data_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_probe, %function
ghsic_ctrl_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L7829
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0]
	ldrh	r3, [ip, #-6]
	tst	r3, #4
	bne	.L7828
.L7794:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r6, [r5, #1016]
	cmp	r6, #0
	beq	.L7795
	ldr	r4, [r5, #1020]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L7796
	cmp	r6, #1
	bls	.L7795
	ldr	r4, [r5, #1124]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L7796
	cmp	r6, #2
	beq	.L7795
	ldr	r4, [r5, #1228]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L7796
	cmp	r6, #3
	beq	.L7795
	ldr	r4, [r5, #1332]
	mov	r1, r7
	mov	r2, #20
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L7796
.L7795:
	movw	r0, #:lower16:.LC179
	mvn	r2, #21
	ldr	r1, .L7829+4
	movt	r0, #:upper16:.LC179
	bl	printk
	mvn	r0, #21
.L7793:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7796:
	add	r1, r4, #84
	mov	r0, #1
	add	r5, r4, #4
	bl	_set_bit
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #8]
	mov	r6, r0
	cmp	r3, #0
	beq	.L7799
	add	r2, r4, #16
	mov	r0, #4
	ldr	r1, [r4, #12]
	bl	queue_work_on
.L7799:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L7793
.L7828:
	movw	r1, #:lower16:.LC177
	mov	r4, r0
	ldr	r2, .L7829+4
	mov	r3, r7
	sub	r0, ip, #24
	movt	r1, #:upper16:.LC177
	bl	__dynamic_pr_debug
	ldr	r7, [r4]
	b	.L7794
.L7830:
	.align	2
.L7829:
	.word	.LANCHOR4-1152
	.word	.LANCHOR5-2676
	.fnend
	.size	ghsic_ctrl_probe, .-ghsic_ctrl_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_poll, %function
conn_gadget_poll:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r1, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	beq	.L7833
	ldr	r3, [r5]
	mov	r6, r0
	add	r1, r4, #144
	adds	r2, r3, #0
	movne	r2, #1
	cmn	r4, #144
	cmpne	r3, #0
	beq	.L7834
	mov	r2, r5
	blx	r3
	ldr	r3, [r5]
	adds	r2, r3, #0
	movne	r2, #1
.L7834:
	adds	r0, r4, #156
	add	r1, r4, #156
	movne	r0, #1
	tst	r2, r0
	beq	.L7833
	mov	r2, r5
	mov	r0, r6
	blx	r3
.L7833:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2484]
	cmp	r3, #0
	beq	.L7849
	ldr	r5, [r3, #100]
	cmp	r5, #0
	beq	.L7850
	add	r3, r4, #108
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #1
	beq	.L7851
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r5, #0
.L7840:
	add	r6, r4, #88
	add	r4, r4, #120
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4]
	mov	r1, r0
	mov	r0, r6
	cmp	r3, r4
	beq	.L7841
	orr	r5, r5, #260
	bl	_raw_spin_unlock_irqrestore
.L7831:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7851:
	ldr	r5, [r4, #168]
	ldr	r2, [r4, #172]
	cmp	r5, r2
	movne	r5, #65
	moveq	r5, #0
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L7840
.L7841:
	bl	_raw_spin_unlock_irqrestore
	b	.L7831
.L7850:
	movw	r0, #:lower16:.LC698
	ldr	r1, .L7852
	movt	r0, #:upper16:.LC698
	bl	printk
	b	.L7831
.L7849:
	movw	r0, #:lower16:.LC425
	ldr	r1, .L7852
	mov	r5, #40
	movt	r0, #:upper16:.LC425
	bl	printk
	b	.L7831
.L7853:
	.align	2
.L7852:
	.word	.LANCHOR5-2656
	.fnend
	.size	conn_gadget_poll, .-conn_gadget_poll
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_in, %function
acc_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r3, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r3, #2488]
	cmn	r2, #108
	beq	.L7861
.L7855:
	add	r5, r4, #88
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	add	r2, r4, #1648
	mov	r7, r0
	ldr	r1, [r4, #1660]
	add	r0, r6, #36
	add	r2, r2, #8
	bl	__list_add
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	add	r0, r4, #1664
	mov	r3, #0
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	r0, r0, #12
	mov	r2, #1
	ldr	r8, [sp, #16]
	mov	r1, #3
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
.L7861:
	ldr	r0, .L7863
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7862
.L7856:
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	and	r3, r3, #254
	orr	r3, r3, #2
	strb	r3, [r4, #100]
	b	.L7855
.L7862:
	movw	r1, #:lower16:.LC699
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC699
	bl	__dynamic_pr_debug
	b	.L7856
.L7864:
	.align	2
.L7863:
	.word	.LANCHOR4-1120
	.fnend
	.size	acc_complete_in, .-acc_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_read, %function
ffs_ep0_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 1, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:__stack_chk_guard
	strd	r8, [sp, #16]
	movt	r6, #:upper16:__stack_chk_guard
	mov	r8, r0
	strd	r10, [sp, #24]
	.setfp fp, sp, #32
	add	fp, sp, #32
	str	lr, [sp, #32]
	.pad #52
	sub	sp, sp, #52
	ldr	r3, [r6]
	str	r1, [fp, #-68]
	ldr	r5, [r0, #124]
	str	r2, [fp, #-64]
	str	r3, [fp, #-40]
	add	r4, r5, #96
	.syntax divided
@ 193 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
.L7866:
	.syntax divided
@ 170 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r1, [r4]
	mov	r2, #0
	teq	r1, #2
	strexeq r2, r3, [r4]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	bne	.L7866
	.syntax divided
@ 195 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #2
	beq	.L7899
	ldr	r3, [r8, #32]
	add	r9, r5, #4
	mov	r0, r9
	tst	r3, #2048
	bne	.L7925
	bl	mutex_lock_interruptible
	subs	r10, r0, #0
	blt	.L7865
.L7871:
	ldr	r3, [r5, #92]
	cmp	r3, #2
	mvnne	r10, #76
	movne	r8, #0
	beq	.L7926
.L7869:
	mov	r0, r9
	bl	mutex_unlock
	mov	r0, r8
	bl	kfree
.L7865:
	ldr	r2, [fp, #-40]
	mov	r0, r10
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L7927
	sub	sp, fp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7925:
	bl	mutex_trylock
	cmp	r0, #0
	bne	.L7871
	mvn	r10, #10
	b	.L7865
.L7926:
	add	r3, r5, #116
	mov	r0, r3
	str	r3, [fp, #-72]
	bl	_raw_spin_lock_irq
	.syntax divided
@ 193 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
.L7872:
	.syntax divided
@ 170 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r10, [r4]
	mov	r7, #0
	teq	r10, #2
	strexeq r7, r3, [r4]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r7, #0
	bne	.L7872
	.syntax divided
@ 195 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r10, #1
	beq	.L7874
	bcc	.L7875
	cmp	r10, #2
	mov	r8, r7
	mvneq	r10, #42
	mvnne	r10, #76
.L7873:
	ldr	r0, [fp, #-72]
	bl	_raw_spin_unlock_irq
	b	.L7869
.L7875:
	ldr	r2, [fp, #-64]
	movw	r3, #43691
	movt	r3, 43690
	umull	r3, r10, r3, r2
	lsrs	r3, r10, #3
	str	r3, [fp, #-76]
	beq	.L7903
	ldr	r3, [r8, #32]
	ldrh	r8, [r5, #104]
	tst	r3, #2048
	bne	.L7928
	cmp	r8, #0
	bne	.L7878
	mov	r10, #57344
	mov	r3, sp
	str	r9, [fp, #-80]
	movt	r10, 65535
	str	r8, [fp, #-60]
	movw	r2, #:lower16:autoremove_wake_function
	and	r3, r3, r10
	sub	r7, fp, #48
	ldr	r9, [fp, #-72]
	str	r8, [fp, #-56]
	mov	r1, #1
	movt	r2, #:upper16:autoremove_wake_function
	str	r8, [fp, #-52]
	str	r8, [fp, #-48]
	str	r8, [fp, #-44]
	ldr	r0, [r3, #12]
	mov	r8, r1
	str	r10, [fp, #-64]
	mov	r3, r7
	add	r10, r5, #120
	str	r1, [fp, #-60]
	str	r0, [fp, #-56]
	str	r2, [fp, #-52]
	str	r7, [fp, #-48]
	str	r7, [fp, #-44]
	b	.L7882
.L7929:
	mov	r0, r9
	bl	_raw_spin_unlock_irq
	bl	schedule
	mov	r0, r9
	bl	_raw_spin_lock_irq
	ldrh	r3, [r5, #104]
	cmp	r3, #0
	bne	.L7881
	ldr	r3, [fp, #-48]
.L7882:
	cmp	r3, r7
	bne	.L7879
	mov	r2, r10
	mov	r0, r7
	ldr	r1, [r5, #124]
	bl	__list_add
.L7879:
	ldr	r2, [fp, #-64]
	mov	r3, sp
	and	r3, r3, r2
	ldr	r2, [r3, #12]
	str	r8, [r2]
	.syntax divided
@ 635 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r4, [r3]
	ands	r4, r4, #1
	beq	.L7929
	mov	r0, r7
	ldr	r9, [fp, #-80]
	mvn	r10, #3
	bl	list_del
	ldr	r3, [fp, #-64]
	mov	r2, sp
	and	r3, r3, r2
	mov	r2, #0
	ldr	r1, [r3, #12]
	mov	r8, r2
	str	r2, [r1]
	b	.L7873
.L7874:
	ldrsb	r3, [r5, #108]
	cmp	r3, #0
	blt	.L7930
	ldrh	r3, [r5, #114]
	ldr	r0, [fp, #-72]
	ldr	r2, [fp, #-64]
	cmp	r3, r2
	movcc	r7, r3
	movcs	r7, r2
	bl	_raw_spin_unlock_irq
	cmp	r7, #0
	beq	.L7907
	mov	r1, #208
	mov	r0, r7
	bl	__kmalloc
	subs	r8, r0, #0
	beq	.L7931
.L7894:
	ldr	r0, [fp, #-72]
	bl	_raw_spin_lock_irq
	.syntax divided
@ 193 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
.L7895:
	.syntax divided
@ 170 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r1, [r4]
	mov	r2, #0
	teq	r1, #2
	strexeq r2, r3, [r4]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	bne	.L7895
	.syntax divided
@ 195 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #2
	mvneq	r10, #42
	beq	.L7873
	ldr	r4, [r5, #28]
	ldrh	r3, [r5, #114]
	ldr	r0, [fp, #-72]
	ldrb	r2, [r4, #26]	@ zero_extendqisi2
	cmp	r7, r3
	movcs	r3, #0
	movcc	r3, #1
	bfi	r2, r3, #1, #1
	strb	r2, [r4, #26]
	bl	_raw_spin_unlock_irq
	cmp	r8, #0
	str	r8, [r4]
	str	r7, [r4, #4]
	beq	.L7932
.L7896:
	ldr	r3, [r5]
	mov	r0, #0
	mov	r2, #32
	mov	r1, r4
	str	r0, [r5, #32]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r10, r0, #0
	blt	.L7869
	add	r0, r5, #32
	bl	wait_for_completion_interruptible
	cmp	r0, #0
	bne	.L7933
	ldr	r10, [r5, #48]
	str	r0, [r5, #96]
	cmp	r10, #0
	ble	.L7869
	mov	r2, r7
	mov	r1, r8
	ldr	r0, [fp, #-68]
	bl	__copy_to_user
	cmp	r0, #0
	mvnne	r10, #13
	b	.L7869
.L7928:
	cmp	r8, #0
	bne	.L7878
	mvn	r10, #10
	b	.L7873
.L7930:
	ldr	r0, [fp, #-72]
	bl	_raw_spin_unlock_irq
	ldrh	r3, [r5, #106]
	cmp	r3, #0
	beq	.L7893
	ldr	r2, [r5]
	mov	r1, r10
	mov	r8, r7
	mvn	r10, #50
	ldr	r0, [r2, #4]
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #24]
	blx	r2
	str	r7, [r5, #96]
	b	.L7869
.L7881:
	mov	r0, r7
	ldr	r9, [fp, #-80]
	bl	list_del
	ldr	r10, [fp, #-64]
	mov	r3, sp
	and	r10, r10, r3
	ldr	r3, [r10, #12]
	str	r4, [r3]
	ldrh	r8, [r5, #104]
.L7878:
	ldr	r3, [fp, #-76]
	mov	r4, sp
	cmp	r8, r3
	movcs	r8, r3
	add	r3, r8, r8, lsl #1
	lsl	r7, r3, #2
	add	r3, r7, #7
	cmp	r7, #0
	bic	r3, r3, #7
	sub	sp, sp, r3
	mov	r10, sp
	beq	.L7883
	mov	r1, r7
	mov	r0, sp
	bl	__memzero
.L7883:
	ldrb	r3, [r5, #100]	@ zero_extendqisi2
	cmp	r3, #4
	strb	r3, [r10, #8]
	bne	.L7884
	ldr	r1, [r5, #108]
	mov	r3, #1
	ldr	r2, [r5, #112]
	str	r1, [r10]	@ unaligned
	str	r2, [r10, #4]	@ unaligned
	str	r3, [r5, #96]
.L7884:
	cmp	r8, #1
	bls	.L7885
	ldrb	r3, [r5, #101]	@ zero_extendqisi2
	cmp	r3, #4
	strb	r3, [r10, #20]
	bne	.L7886
	ldr	r1, [r5, #108]
	mov	r3, #1
	ldr	r2, [r5, #112]
	str	r1, [r10, #12]	@ unaligned
	str	r2, [r10, #16]	@ unaligned
	str	r3, [r5, #96]
.L7886:
	cmp	r8, #2
	beq	.L7885
	ldrb	r3, [r5, #102]	@ zero_extendqisi2
	cmp	r3, #4
	strb	r3, [r10, #32]
	bne	.L7887
	ldr	r1, [r5, #108]
	mov	r3, #1
	ldr	r2, [r5, #112]
	str	r1, [r10, #24]	@ unaligned
	str	r2, [r10, #28]	@ unaligned
	str	r3, [r5, #96]
.L7887:
	cmp	r8, #3
	beq	.L7885
	ldrb	r3, [r5, #103]	@ zero_extendqisi2
	cmp	r3, #4
	strb	r3, [r10, #44]
	bne	.L7885
	ldr	r1, [r5, #108]
	mov	r3, #1
	ldr	r2, [r5, #112]
	str	r1, [r10, #36]	@ unaligned
	str	r2, [r10, #40]	@ unaligned
	str	r3, [r5, #96]
.L7885:
	ldrh	r3, [r5, #104]
	cmp	r8, r3
	movcs	r3, #0
	strhcs	r3, [r5, #104]	@ movhi
	bcs	.L7890
	sub	r3, r3, r8
	add	r0, r5, #100
	uxth	r2, r3
	add	r1, r0, r8
	strh	r2, [r5, #104]	@ movhi
	bl	memmove
.L7890:
	ldr	r0, [fp, #-72]
	bl	_raw_spin_unlock_irq
	mov	r0, r9
	bl	mutex_unlock
	mov	r1, r10
	mov	r2, r7
	ldr	r0, [fp, #-68]
	bl	__copy_to_user
	cmp	r0, #0
	mov	sp, r4
	moveq	r10, r7
	mvnne	r10, #13
	b	.L7865
.L7899:
	mvn	r10, #42
	b	.L7865
.L7903:
	mov	r8, r3
	mvn	r10, #21
	b	.L7873
.L7932:
	movw	r3, #47806
	movt	r3, 57005
	str	r3, [r4]
	b	.L7896
.L7931:
	mvn	r10, #11
	b	.L7869
.L7907:
	mov	r8, r7
	b	.L7894
.L7893:
	ldr	r0, .L7934
	ldrh	r8, [r0, #-6]
	ubfx	r8, r8, #2, #1
	cmp	r8, #0
	mvneq	r10, #2
	beq	.L7869
	movw	r1, #:lower16:.LC700
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC700
	mov	r8, r3
	mvn	r10, #2
	bl	__dynamic_pr_debug
	b	.L7869
.L7933:
	ldr	r2, [r5]
	mov	r1, r4
	mvn	r10, #3
	ldr	r0, [r2, #4]
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #20]
	blx	r2
	b	.L7869
.L7927:
	bl	__stack_chk_fail
.L7935:
	.align	2
.L7934:
	.word	.LANCHOR4-1104
	.fnend
	.size	ffs_ep0_read, .-ffs_ep0_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_remove, %function
android_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	strd	r8, [sp, #16]
	movt	r6, #:upper16:.LANCHOR1
	ldr	r8, .L7972
	str	r10, [sp, #24]
	ldr	r1, [r6, #3308]
	str	lr, [sp, #28]
	ldr	r7, [r0, #88]
	sub	r4, r1, #520
	mov	r5, r1
	cmp	r7, #0
	ldrbne	r2, [r7, #8]	@ zero_extendqisi2
	moveq	r2, r7
	cmp	r1, r8
	beq	.L7938
	ldr	r3, [r1, #-476]
	cmp	r3, #0
	beq	.L7938
	ldrb	r3, [r3, #8]	@ zero_extendqisi2
	cmp	r2, r3
	bne	.L7939
	b	.L7938
.L7940:
	ldr	r3, [r3, #-476]
	cmp	r3, #0
	beq	.L7938
	ldrb	r3, [r3, #8]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L7938
.L7939:
	ldr	r3, [r4, #520]
	cmp	r3, r8
	mov	r5, r3
	sub	r4, r3, #520
	bne	.L7940
.L7938:
	cmp	r4, #0
	beq	.L7941
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r1, [r3, #1248]
	cmp	r1, #0
	beq	.L7942
	ldr	r9, .L7972+4
.L7943:
	ldr	r0, [r4, #12]
	bl	device_remove_file
	ldr	r1, [r9], #4
	cmp	r1, #0
	bne	.L7943
.L7942:
	ldr	r3, [r4, #12]
	ldr	r0, [r6, #3644]
	ldr	r1, [r3, #288]
	bl	device_destroy
	cmp	r7, #0
	beq	.L7944
	ldr	r3, [r7, #4]
	cmp	r3, #0
	bne	.L7970
.L7944:
	mov	r0, r5
	bl	list_del
	ldr	r3, [r6, #3640]
	mov	r0, r4
	sub	r3, r3, #1
	str	r3, [r6, #3640]
	bl	kfree
	ldr	r1, [r6, #3308]
.L7941:
	cmp	r1, r8
	beq	.L7971
.L7946:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7970:
	add	r0, r4, #60
	bl	pm_qos_remove_request
	b	.L7944
.L7971:
	ldr	r0, [r6, #3644]
	bl	class_destroy
	ldr	r3, .L7972+8
	mov	r2, #0
	ldr	r0, [r6, #2476]
	str	r2, [r6, #3644]
	cmp	r0, r3
	bne	.L7946
	sub	r0, r0, #236
	bl	usb_gadget_unregister_driver
	b	.L7946
.L7973:
	.align	2
.L7972:
	.word	.LANCHOR1+3308
	.word	.LANCHOR0+1252
	.word	.LANCHOR0+1324
	.fnend
	.size	android_remove, .-android_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_complete_in, %function
ccid_bulk_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r3, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r3, #3472]
	cmp	r2, #0
	movne	r3, #1
	add	r5, r4, #92
	mov	r0, r5
	strne	r3, [r4, #148]
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	add	r2, r4, #192
	ldr	r1, [r4, #196]
	add	r0, r6, #36
	bl	__list_add
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	add	r0, r4, #172
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
	.fnend
	.size	ccid_bulk_complete_in, .-ccid_bulk_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_data_complete, %function
audio_data_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L7993
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7991
.L7981:
	add	r6, r4, #108
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	add	r2, r4, #96
	ldr	r1, [r4, #100]
	add	r0, r5, #36
	bl	__list_add
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #112]
	cmp	r3, #0
	beq	.L7980
	ldr	r6, [r5, #44]
	cmp	r6, #0
	bne	.L7980
	ldrd	r2, [r4, #124]
	ldr	r1, [r5, #48]
	add	r3, r3, r1
	cmp	r3, r2
	str	r3, [r4, #128]
	bcs	.L7992
.L7983:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	audio_send
.L7980:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7992:
	ldr	r0, [r4, #92]
	bl	snd_pcm_period_elapsed
	str	r6, [r4, #128]
	b	.L7983
.L7991:
	movw	r1, #:lower16:.LC701
	ldrd	r2, [r5, #44]
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC701
	bl	__dynamic_pr_debug
	b	.L7981
.L7994:
	.align	2
.L7993:
	.word	.LANCHOR4-1072
	.fnend
	.size	audio_data_complete, .-audio_data_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_complete_in, %function
adb_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r3, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r3, #3476]
	cmp	r2, #0
	movne	r3, #1
	add	r5, r4, #88
	mov	r0, r5
	strne	r3, [r4, #104]
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	add	r2, r4, #120
	ldr	r1, [r4, #124]
	add	r0, r6, #36
	bl	__list_add
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	add	r0, r4, #140
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
	.fnend
	.size	adb_complete_in, .-adb_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_unbind, %function
qdss_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L8040
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r1, [r0, #24]
	ldrh	r2, [r3, #-6]
	ldr	r5, [r1]
	tst	r2, #4
	bne	.L8037
.L8002:
	ldr	r0, [r4, #196]
	bl	flush_workqueue
	movw	r0, #:lower16:.LC494
	ldr	r1, [r5, #28]
	movt	r0, #:upper16:.LC494
	bl	strcmp
	subs	r1, r0, #0
	bne	.L8003
	ldr	r0, [r4, #108]
	bl	dwc3_tx_fifo_resize_request
.L8003:
	ldr	r6, .L8040+4
	ldrh	r3, [r6, #-14]
	tst	r3, #4
	bne	.L8038
.L8004:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #100]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #108]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, .L8040+8
	ldrh	r3, [r3, #-2]
	tst	r3, #4
	bne	.L8039
.L8008:
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bls	.L8009
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L8010
	bl	kfree
	ldr	r3, [r5, #20]
.L8009:
	cmp	r3, #2
	bhi	.L8010
.L8001:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8010:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L8001
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
.L8039:
	movw	r1, #:lower16:.LC704
	sub	r0, r6, #8
	movt	r1, #:upper16:.LC704
	bl	__dynamic_pr_debug
	b	.L8008
.L8037:
	movw	r1, #:lower16:.LC702
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC702
	bl	__dynamic_pr_debug
	b	.L8002
.L8038:
	movw	r1, #:lower16:.LC703
	sub	r0, r6, #32
	movt	r1, #:upper16:.LC703
	bl	__dynamic_pr_debug
	b	.L8004
.L8041:
	.align	2
.L8040:
	.word	.LANCHOR4-1056
	.word	.LANCHOR4-1024
	.word	.LANCHOR4-1012
	.fnend
	.size	qdss_unbind, .-qdss_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_suspend, %function
ffs_func_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #-28]
	add	r4, r6, #116
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #96]
	mov	r5, r0
	add	r2, r6, #100
	ldrh	r0, [r6, #104]
	mov	ip, r2
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r6, #96]
	cmp	r0, #0
	beq	.L8047
	add	r0, r0, r2
	mov	r3, r2
.L8046:
	ldrb	r1, [r3], #1	@ zero_extendqisi2
	cmp	r1, #5
	strbne	r1, [r2]
	addne	r2, r2, #1
	cmp	r0, r3
	bne	.L8046
	sub	r2, r2, ip
	add	r3, r2, #1
	uxth	r0, r2
	uxth	r3, r3
.L8044:
	add	r0, r6, r0
	strh	r3, [r6, #104]	@ movhi
	mov	ip, #5
	mov	r1, #3
	mov	r2, #1
	strb	ip, [r0, #100]
	mov	r0, r4
	bl	__wake_up_locked
	ldr	r6, [sp, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L8047:
	mov	r3, #1
	b	.L8044
	.fnend
	.size	ffs_func_suspend, .-ffs_func_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_resume, %function
ffs_func_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #-28]
	add	r4, r6, #116
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #96]
	mov	r5, r0
	add	r2, r6, #100
	ldrh	r0, [r6, #104]
	mov	lr, r2
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r6, #96]
	cmp	r0, #0
	beq	.L8058
	add	r0, r0, r2
	mov	r3, r2
.L8057:
	ldrb	r1, [r3], #1	@ zero_extendqisi2
	sub	ip, r1, #5
	cmp	ip, #1
	strbhi	r1, [r2]
	addhi	r2, r2, #1
	cmp	r0, r3
	bne	.L8057
	sub	r2, r2, lr
	add	r3, r2, #1
	uxth	r0, r2
	uxth	r3, r3
.L8055:
	add	r0, r6, r0
	strh	r3, [r6, #104]	@ movhi
	mov	ip, #6
	mov	r1, #3
	mov	r2, #1
	strb	ip, [r0, #100]
	mov	r0, r4
	bl	__wake_up_locked
	ldr	r6, [sp, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L8058:
	mov	r3, #1
	b	.L8055
	.fnend
	.size	ffs_func_resume, .-ffs_func_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	start_in_transfer, %function
start_in_transfer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #8]
	cmp	r4, #0
	beq	.L8062
	ldr	r0, [r4, #88]
	mov	r5, r1
	ldr	r6, [r4, #100]
	ldr	r7, [r1, #16]
	add	r0, r0, #44
	bl	_raw_spin_lock_irq
	mov	r3, #1
	mov	r2, #2
	str	r2, [r5, #4]
	str	r3, [r5, #20]
	ldr	r0, [r4, #88]
	add	r0, r0, #44
	bl	_raw_spin_unlock_irq
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	mov	r2, #208
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L8074
	mov	r2, #0
	cmn	r3, #108
	str	r2, [r5, #4]
	str	r2, [r5, #20]
	beq	.L8074
	cmn	r3, #95
	bne	.L8066
	ldr	r2, [r7, #4]
	cmp	r2, #0
	beq	.L8074
.L8066:
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC90
	movt	r1, #:upper16:.LC90
	ldr	r2, [r6, #4]
	add	r0, r0, #32
	bl	dev_warn
.L8074:
	mov	r0, #1
.L8064:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8062:
	ldr	r0, [r0]
	movw	r1, #:lower16:.LC88
	mov	r3, #796
	movt	r1, #:upper16:.LC88
	ldr	r2, .L8075
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC89
	movw	r1, #550
	movt	r0, #:upper16:.LC89
	bl	warn_slowpath_null
	mov	r0, r4
	b	.L8064
.L8076:
	.align	2
.L8075:
	.word	.LANCHOR5-2636
	.fnend
	.size	start_in_transfer, .-start_in_transfer
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	send_status, %function
send_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r4, r0, #44
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #104]
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r6, [r5, #60]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L8080
	b	.L8078
.L8102:
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L8078
.L8080:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	sleep_thread
	subs	r3, r0, #0
	mov	r0, r4
	beq	.L8102
.L8077:
	ldrd	r4, [sp]
	mov	r0, r3
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8078:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	cmp	r7, #0
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	beq	.L8081
	tst	r3, #4
	beq	.L8103
.L8082:
	ldr	r0, .L8105
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	moveq	r7, #2
	bne	.L8104
.L8085:
	ldr	r3, [r6]
	movw	r0, #21333
	movw	r2, #:lower16:.LANCHOR1
	movt	r0, 21314
	movt	r2, #:upper16:.LANCHOR1
	ldr	r1, [r2, #3964]
	str	r0, [r3]
	ldr	r0, [r5, #132]
	cmp	r1, #0
	str	r0, [r3, #4]
	ldr	r0, [r5, #136]
	str	r0, [r3, #8]
	beq	.L8087
	ldr	r1, [r5, #136]
	mov	r0, #0
	str	r0, [r2, #3964]
.L8087:
	str	r1, [r3, #8]
	mov	r2, #13
	mov	r0, r5
	strb	r7, [r3, #12]
	ldr	r3, [r6, #16]
	mov	r1, r6
	str	r2, [r3, #4]
	ldr	r3, [r6, #16]
	ldrb	r2, [r3, #26]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #26]
	bl	start_in_transfer
	cmp	r0, #0
	ldrne	r2, [r6, #8]
	movne	r3, #0
	mvneq	r3, #4
	strne	r2, [r5, #60]
	b	.L8077
.L8103:
	ldr	r7, [r7, #28]
	cmp	r7, #0
	beq	.L8085
.L8086:
	ldr	r0, .L8105+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	moveq	r7, #1
	beq	.L8085
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC706
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC706
	mov	r7, #1
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L8085
.L8081:
	tst	r3, #16
	and	r3, r3, #4
	beq	.L8084
	cmp	r3, #0
	bne	.L8082
	b	.L8085
.L8084:
	cmp	r3, #0
	beq	.L8086
	b	.L8082
.L8104:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC705
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC705
	mov	r7, #2
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L8085
.L8106:
	.align	2
.L8105:
	.word	.LANCHOR4-988
	.word	.LANCHOR4-964
	.fnend
	.size	send_status, .-send_status
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	do_write, %function
do_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r0, #104]
	.pad #68
	sub	sp, sp, #68
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	tst	r3, #2
	movne	r3, #9984
	mvnne	r0, #21
	movtne	r3, 7
	strne	r3, [r6, #28]
	bne	.L8107
	mov	r4, r0
	ldr	r0, [r6]
	add	r0, r0, #20
	bl	_raw_spin_lock
	ldr	r2, [r6]
	ldr	r3, [r2, #32]
	bic	r3, r3, #1048576
	bic	r3, r3, #4096
	str	r3, [r2, #32]
	ldr	r0, [r6]
	add	r0, r0, #20
	bl	_raw_spin_unlock
	ldrb	r3, [r4, #76]	@ zero_extendqisi2
	cmp	r3, #10
	beq	.L8174
	ldrb	r3, [r4, #77]	@ zero_extendqisi2
	ldr	r5, [r4, #78]	@ unaligned
	tst	r3, #231
	movne	r3, #9216
	rev	r5, r5
	movtne	r3, 5
	mvnne	r0, #21
	strne	r3, [r6, #28]
	bne	.L8107
	ldrsb	r2, [r6, #24]
	cmp	r2, #0
	blt	.L8111
	tst	r3, #8
	bne	.L8175
.L8111:
	ldrd	r2, [r6, #16]
	mov	r1, #0
	mov	r0, r5
	cmp	r5, r2
	sbcs	r3, r1, r3
	movge	r3, #8448
	mvnge	r0, #21
	movtge	r3, 5
	strge	r3, [r6, #28]
	bge	.L8107
	ldr	r3, [r6, #40]
	ldr	r9, [r4, #128]
	sub	r2, r3, #32
	lsl	r10, r5, r3
	lsl	fp, r5, r2
	str	r9, [sp, #40]
	cmp	r9, #0
	rsb	r2, r3, #32
	orr	fp, fp, r5, lsr r2
	beq	.L8115
	mov	r3, #57344
	strd	r10, [sp, #16]
	movw	r2, #3074
	movw	r1, #:lower16:.LANCHOR1
	strd	r10, [sp, #32]
	movt	r3, 65535
	movt	r2, 3
	movt	r1, #:upper16:.LANCHOR1
	mov	r8, #1
	str	r3, [sp, #44]
	str	r1, [sp, #48]
	str	r2, [sp, #52]
.L8114:
	ldr	r5, [r4, #60]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L8116
.L8177:
	cmp	r8, #0
	beq	.L8117
	ldrd	r2, [r6, #8]
	ldrd	r0, [sp, #16]
	cmp	r0, r2
	sbcs	r3, r1, r3
	bge	.L8176
	ldr	r2, [r4, #140]
	cmp	r9, #16384
	movcc	r3, r9
	movcs	r3, #16384
	adds	r0, r0, r3
	adc	r1, r1, #0
	subs	r9, r9, r3
	sub	r2, r2, r3
	movne	r8, #1
	strd	r0, [sp, #16]
	moveq	r8, #0
	mov	r0, r4
	str	r2, [r4, #140]
	str	r3, [r5, #12]
	ldr	r1, [r4, #108]
	udiv	r2, r3, r1
	mls	r2, r1, r2, r3
	cmp	r2, #0
	addne	r3, r3, r1
	mov	r1, r5
	subne	r3, r3, r2
	ldr	r2, [r5, #24]
	str	r3, [r2, #4]
	bl	start_out_transfer
	cmp	r0, #0
	beq	.L8115
	ldr	r3, [r5, #8]
	str	r3, [r4, #60]
	ldr	r5, [r4, #60]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L8177
.L8116:
	ldr	r5, [r4, #64]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L8122
	cmp	r8, #0
	beq	.L8115
.L8123:
	mov	r0, r4
	bl	sleep_thread
	cmp	r0, #0
	beq	.L8114
.L8107:
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8117:
	ldr	r5, [r4, #64]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L8115
.L8122:
	cmp	r3, #1
	bne	.L8123
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L8123
	.syntax divided
@ 1354 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r2, [r5, #8]
	mov	r3, #0
	str	r2, [r4, #64]
	ldr	r2, [r5, #24]
	str	r3, [r5, #4]
	ldr	r3, [r2, #44]
	cmp	r3, #0
	bne	.L8178
	ldrd	r10, [sp, #32]
	ldr	r3, [r6, #8]
	ldr	ip, [r6, #12]
	ldr	r2, [r2, #48]
	subs	r1, r3, r10
	sbc	lr, ip, fp
	str	r1, [sp, #24]
	mov	r1, #0
	str	lr, [sp, #28]
	ldrd	r10, [sp, #24]
	cmp	r10, r2
	sbcs	r1, fp, r1
	blt	.L8179
.L8126:
	ldr	r7, [r6, #44]
	ldr	r3, [r5, #12]
	rsb	r7, r7, #0
	cmp	r3, r2
	andls	r7, r7, r3
	andhi	r7, r7, r2
	cmp	r7, #0
	bne	.L8180
	ldr	r2, [r5, #24]
	ldr	r2, [r2, #48]
	cmp	r3, r2
	bls	.L8114
.L8145:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	mvn	r0, #4
	orr	r3, r3, #8
	strb	r3, [r4, #144]
	b	.L8107
.L8180:
	ldrd	r0, [sp, #32]
	add	r3, sp, #64
	mov	r2, r7
	strd	r0, [r3, #-8]!
	ldr	r1, [r5]
	ldr	r0, [r6]
	bl	vfs_write
	ldr	r2, [sp, #44]
	mov	r3, sp
	mov	r10, r0
	and	r3, r3, r2
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L8147
	cmp	r0, #0
	blt	.L8181
	cmp	r0, r7
	mov	r3, r0
	bcc	.L8182
	ldrd	r0, [sp, #32]
	ldr	r2, [r4, #136]
	adds	r0, r0, r10
	adc	r1, r1, r10, asr #31
	sub	r2, r2, r10
	str	r2, [r4, #136]
	strd	r0, [sp, #32]
	ldr	r1, [sp, #40]
	sub	r1, r1, r10
	str	r1, [sp, #40]
.L8132:
	cmp	r7, r3
	bne	.L8173
	ldr	r3, [sp, #48]
	ldr	r3, [r3, #3968]
	cmp	r3, #0
	bne	.L8173
	ldr	r3, [sp, #48]
	ldr	r3, [r3, #3964]
	cmp	r3, #0
	bne	.L8115
	ldr	r3, [r4, #68]
	ldr	r2, [r3, #4]
	cmp	r2, #2
	beq	.L8173
	ldr	r2, [r3, #36]
	cmp	r2, #2
	beq	.L8173
	ldr	r2, [r3, #68]
	cmp	r2, #2
	beq	.L8173
	ldr	r3, [r3, #100]
	cmp	r3, #2
	beq	.L8173
	cmp	r9, #0
	bne	.L8173
	ldr	r2, [sp, #48]
	mov	r3, #1
	mov	r0, r4
	str	r3, [r2, #3968]
	bl	send_status
.L8173:
	ldr	r3, [r5, #12]
.L8134:
	ldr	r2, [r5, #24]
	ldr	r2, [r2, #48]
	cmp	r2, r3
	bcc	.L8145
	ldr	r3, [sp, #40]
	cmp	r3, #0
	bne	.L8114
.L8115:
	mvn	r0, #4
	b	.L8107
.L8176:
	ldr	r3, [r6, #40]
	mov	r2, #8448
	mov	r10, r0
	movt	r2, 5
	mov	fp, r1
	mov	r8, #0
	str	r2, [r6, #28]
	subs	r1, r3, #32
	lsr	r2, r10, r3
	rsb	r3, r3, #32
	orr	r2, r2, fp, lsl r3
	movpl	r3, fp
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	str	r2, [r6, #32]
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	b	.L8114
.L8179:
	ldrd	r10, [sp, #32]
	movw	r1, #:lower16:.LC707
	add	r0, r6, #48
	movt	r1, #:upper16:.LC707
	strd	r10, [sp]
	str	r3, [sp, #8]
	str	ip, [sp, #12]
	bl	dev_err
	ldr	r2, [r6, #8]
	sub	r2, r2, r10
	b	.L8126
.L8182:
	ldr	r0, .L8184
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L8183
.L8131:
	ldr	r2, [r6, #44]
	mov	r3, r10
	ldrd	r10, [sp, #32]
	ldr	r1, [r4, #136]
	rsb	r2, r2, #0
	and	r2, r2, r3
	adds	r10, r10, r2
	mov	r3, r2
	adc	fp, fp, r2, asr #31
	sub	r2, r1, r2
	ldr	r1, [sp, #40]
	cmp	r3, r7
	str	r2, [r4, #136]
	strd	r10, [sp, #32]
	sub	r1, r1, r3
	str	r1, [sp, #40]
	bcs	.L8132
.L8144:
	ldr	r3, [r6, #40]
	ldrd	r10, [sp, #32]
	ldr	r2, [sp, #52]
	subs	r1, r3, #32
	str	r2, [r6, #28]
	lsr	r2, r10, r3
	rsb	r3, r3, #32
	orr	r2, r2, fp, lsl r3
	movpl	r3, fp
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	mov	r1, #1
	str	r2, [r6, #32]
	ldr	r2, [sp, #48]
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	ldr	r3, [r5, #12]
	str	r1, [r2, #3964]
	b	.L8134
.L8174:
	ldrb	r5, [r4, #79]	@ zero_extendqisi2
	ldrb	r2, [r4, #77]	@ zero_extendqisi2
	ldrb	r3, [r4, #78]	@ zero_extendqisi2
	orr	r5, r5, #167772160
	orr	r5, r5, r2, lsl #16
	orr	r5, r5, r3, lsl #8
	bic	r5, r5, #-16777216
	b	.L8111
.L8181:
	ldr	r0, .L8184+4
	ldrh	r3, [r0]
	tst	r3, #4
	beq	.L8144
	movw	r2, #:lower16:.LC708
	mov	r3, r10
	movt	r2, #:upper16:.LC708
	add	r1, r6, #48
	sub	r0, r0, #18
	bl	__dynamic_dev_dbg
	b	.L8144
.L8175:
	ldr	r0, [r6]
	add	r0, r0, #20
	bl	_raw_spin_lock
	ldr	r2, [r6]
	ldr	r3, [r2, #32]
	orr	r3, r3, #1048576
	orr	r3, r3, #4096
	str	r3, [r2, #32]
	ldr	r0, [r6]
	add	r0, r0, #20
	bl	_raw_spin_unlock
	b	.L8111
.L8147:
	mvn	r0, #3
	b	.L8107
.L8178:
	ldr	r3, [r6, #40]
	mov	r2, #2048
	mvn	r0, #4
	ldrd	r10, [sp, #32]
	movt	r2, 4
	str	r2, [r6, #28]
	subs	r1, r3, #32
	lsr	r2, r10, r3
	rsb	r3, r3, #32
	orr	r2, r2, fp, lsl r3
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	orrpl	r2, r2, fp, asr r1
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	str	r2, [r6, #32]
	b	.L8107
.L8183:
	movw	r2, #:lower16:.LC709
	mov	r3, r10
	str	r7, [sp]
	movt	r2, #:upper16:.LC709
	add	r1, r6, #48
	sub	r0, r0, #18
	bl	__dynamic_dev_dbg
	b	.L8131
.L8185:
	.align	2
.L8184:
	.word	.LANCHOR4-918
	.word	.LANCHOR4-942
	.fnend
	.size	do_write, .-do_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	do_read, %function
do_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r3, [r0, #76]	@ zero_extendqisi2
	.pad #44
	sub	sp, sp, #44
	ldrb	r2, [r0, #77]	@ zero_extendqisi2
	ldrb	ip, [r0, #78]	@ zero_extendqisi2
	ldr	r7, [r0, #104]
	cmp	r3, #8
	ldrb	r3, [r0, #79]	@ zero_extendqisi2
	beq	.L8230
	tst	r2, #231
	ldr	r1, [r0, #78]	@ unaligned
	movne	r2, #9216
	mvnne	r3, #21
	movtne	r2, 5
	rev	r1, r1
	strne	r2, [r7, #28]
	bne	.L8186
.L8188:
	ldrd	r2, [r7, #16]
	mov	r5, #0
	cmp	r1, r2
	sbcs	r3, r5, r3
	movge	r2, #8448
	mvnge	r3, #21
	movtge	r2, 5
	strge	r2, [r7, #28]
	bge	.L8186
	ldr	r3, [r7, #40]
	ldr	fp, [r0, #128]
	sub	r2, r3, #32
	lsl	r8, r1, r3
	lsl	r9, r1, r2
	cmp	fp, #0
	rsb	r2, r3, #32
	orr	r9, r9, r1, lsr r2
	beq	.L8191
	mov	r3, sp
	bic	r3, r3, #8128
	mov	r5, r0
	bic	r3, r3, #63
	add	r4, r0, #44
	str	r3, [sp, #24]
.L8203:
	ldr	r3, [r7, #8]
	mov	r0, r4
	ldr	r10, [r7, #12]
	str	r3, [sp, #8]
	bl	_raw_spin_lock_irq
	ldr	r6, [r5, #60]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L8193
	b	.L8192
.L8231:
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L8192
.L8193:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	sleep_thread
	subs	r3, r0, #0
	mov	r0, r4
	beq	.L8231
.L8186:
	mov	r0, r3
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8192:
	ldr	r3, [sp, #8]
	subs	r3, r3, r8
	str	r3, [sp, #16]
	sbc	r3, r10, r9
	cmp	fp, #16384
	str	r3, [sp, #20]
	movcc	r3, fp
	movcs	r3, #16384
	str	r3, [sp, #8]
	mov	r3, #0
	str	r3, [sp, #12]
	ldrd	r0, [sp, #8]
	ldrd	r2, [sp, #16]
	cmp	r2, r0
	sbcs	r1, r3, r1
	blt	.L8232
.L8194:
	ldr	r3, [sp, #8]
	mov	r0, r4
	str	r3, [sp, #28]
	bl	_raw_spin_unlock_irq
	ldr	r3, [sp, #8]
	cmp	r3, #0
	beq	.L8233
	mov	r2, r3
	add	r3, sp, #40
	strd	r8, [r3, #-8]!
	ldr	r1, [r6]
	ldr	r0, [r7]
	bl	vfs_read
	ldr	r3, [sp, #24]
	mov	r10, r0
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L8205
	cmp	r0, #0
	blt	.L8234
	ldr	r3, [sp, #28]
	cmp	r0, r3
	bcs	.L8199
	ldr	r0, .L8237
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L8235
.L8200:
	ldr	r2, [r7, #44]
	mov	r0, r4
	ldr	r3, [r5, #136]
	rsb	r2, r2, #0
	and	r10, r10, r2
	sub	r3, r3, r10
	adds	r8, r8, r10
	adc	r9, r9, r10, asr #31
	sub	fp, fp, r10
	str	r3, [r5, #136]
	bl	_raw_spin_lock_irq
	ldr	r2, [r6, #16]
	mov	r3, #1
	mov	r0, r4
	str	r10, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq
	ldr	r3, [sp, #28]
	cmp	r10, r3
	bcc	.L8204
.L8201:
	cmp	fp, #0
	beq	.L8191
	ldr	r3, [r6, #16]
	mov	r1, r6
	mov	r0, r5
	ldrb	r2, [r3, #26]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #26]
	bl	start_in_transfer
	cmp	r0, #0
	beq	.L8191
	ldr	r3, [r6, #8]
	str	r3, [r5, #60]
	b	.L8203
.L8232:
	strd	r2, [sp, #8]
	b	.L8194
.L8234:
	ldr	r0, .L8237+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8236
.L8198:
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r2, [r6, #16]
	mov	r1, #0
	mov	r3, #1
	mov	r0, r4
	str	r1, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq
.L8204:
	ldr	r3, [r7, #40]
	mov	r2, #4352
	movt	r2, 3
	str	r2, [r7, #28]
	subs	r1, r3, #32
	lsr	r2, r8, r3
	rsb	r3, r3, #32
	orr	r2, r2, r9, lsl r3
	mvn	r3, #4
	orrpl	r2, r2, r9, asr r1
	ldrb	r1, [r7, #24]	@ zero_extendqisi2
	str	r2, [r7, #32]
	orr	r2, r1, #64
	strb	r2, [r7, #24]
	b	.L8186
.L8230:
	orr	r1, r3, #134217728
	orr	r1, r1, r2, lsl #16
	orr	r1, r1, ip, lsl #8
	bic	r1, r1, #-16777216
	b	.L8188
.L8199:
	ldr	r3, [r5, #136]
	mov	r0, r4
	adds	r8, r8, r10
	adc	r9, r9, r10, asr #31
	sub	fp, fp, r10
	sub	r3, r3, r10
	str	r3, [r5, #136]
	bl	_raw_spin_lock_irq
	ldr	r2, [r6, #16]
	mov	r3, #1
	mov	r0, r4
	str	r10, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq
	b	.L8201
.L8191:
	mvn	r3, #4
	b	.L8186
.L8205:
	mvn	r3, #3
	b	.L8186
.L8235:
	ldr	r3, [sp, #8]
	movw	r2, #:lower16:.LC711
	add	r1, r7, #48
	movt	r2, #:upper16:.LC711
	sub	r0, r0, #18
	str	r3, [sp]
	mov	r3, r10
	bl	__dynamic_dev_dbg
	b	.L8200
.L8236:
	movw	r2, #:lower16:.LC710
	mov	r3, r10
	movt	r2, #:upper16:.LC710
	add	r1, r7, #48
	sub	r0, r0, #20
	bl	__dynamic_dev_dbg
	b	.L8198
.L8233:
	ldr	r3, [r7, #40]
	mov	r2, #8448
	mov	r0, r4
	movt	r2, 5
	str	r2, [r7, #28]
	subs	r1, r3, #32
	lsr	r2, r8, r3
	rsb	r3, r3, #32
	orr	r2, r2, r9, lsl r3
	ldrb	r3, [r7, #24]	@ zero_extendqisi2
	orrpl	r2, r2, r9, asr r1
	orr	r3, r3, #64
	strb	r3, [r7, #24]
	str	r2, [r7, #32]
	bl	_raw_spin_lock_irq
	ldr	r2, [r6, #16]
	mov	r3, #1
	mov	r1, #0
	mov	r0, r4
	str	r1, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq
	mvn	r3, #4
	b	.L8186
.L8238:
	.align	2
.L8237:
	.word	.LANCHOR4-870
	.word	.LANCHOR4-892
	.fnend
	.size	do_read, .-do_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_sb_fill, %function
ffs_sb_fill:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r0, [r3, #32]
	.pad #12
	sub	sp, sp, #12
	cmp	r0, #0
	beq	.L8247
	mov	r2, #212
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	bne	.L8240
.L8264:
	mvn	r0, #11
.L8239:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L8247:
	mov	r4, #16
.L8240:
	mov	r8, #0
	mov	r6, #1
	ldr	r2, .L8265
	movw	r1, #:lower16:.LC712
	add	r0, r4, #4
	movt	r1, #:upper16:.LC712
	str	r6, [r4, #84]
	mov	r9, #12
	str	r8, [r4, #88]
	str	r8, [r4, #92]
	bl	__mutex_init
	movw	r1, #:lower16:.LC713
	ldr	r2, .L8265
	add	r0, r4, #116
	movt	r1, #:upper16:.LC713
	str	r8, [r4, #24]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC714
	ldr	r2, .L8265
	add	r0, r4, #36
	movt	r1, #:upper16:.LC714
	str	r8, [r4, #32]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC714
	ldr	r2, .L8265
	add	r0, r4, #72
	movt	r1, #:upper16:.LC714
	str	r8, [r4, #68]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC714
	ldr	r2, .L8265
	add	r0, r4, #56
	movt	r1, #:upper16:.LC714
	str	r8, [r4, #52]
	bl	__init_waitqueue_head
	strh	r6, [r4, #106]	@ movhi
	ldr	ip, .L8265+4
	movw	r1, #29537
	str	r5, [r4, #192]
	ldr	r3, [r7, #16]
	movt	r1, 2660
	mov	lr, #4096
	mov	r0, r5
	str	r3, [r4, #136]
	ldrd	r2, [r7]
	strd	r2, [r4, #196]
	ldr	r3, [r7, #8]
	str	r3, [r4, #204]
	strb	r9, [r5, #13]
	str	lr, [r5, #16]
	str	ip, [r5, #36]
	str	r1, [r5, #56]
	str	r4, [r5, #616]
	str	r6, [r5, #628]
	ldrh	r3, [r7, #12]
	strh	r3, [r7]	@ movhi
	bl	new_inode
	subs	r6, r0, #0
	beq	.L8242
	mov	r0, sp
	bl	current_kernel_time
	bl	get_next_ino
	str	r0, [r6, #40]
	ldrh	r3, [r7]
	movw	r1, #:lower16:simple_dir_operations
	movt	r1, #:upper16:simple_dir_operations
	cmp	r1, r8
	strh	r3, [r6]	@ movhi
	ldrd	r2, [sp]
	ldr	r0, [r7, #4]
	str	r0, [r6, #4]
	ldr	r0, [r7, #8]
	strne	r1, [r6, #200]
	strd	r2, [r6, #52]
	strd	r2, [r6, #60]
	strd	r2, [r6, #68]
	movw	r3, #:lower16:simple_dir_inode_operations
	movt	r3, #:upper16:simple_dir_inode_operations
	str	r0, [r6, #8]
	cmp	r3, #0
	str	r8, [r6, #328]
	strne	r3, [r6, #24]
.L8242:
	mov	r0, r6
	bl	d_make_root
	cmp	r0, #0
	str	r0, [r5, #60]
	beq	.L8264
	movw	r1, #:lower16:.LC715
	ldr	r6, [r5, #616]
	movt	r1, #:upper16:.LC715
	bl	d_alloc_name
	subs	r7, r0, #0
	beq	.L8264
	mov	r0, r5
	bl	new_inode
	subs	r5, r0, #0
	beq	.L8246
	mov	r0, sp
	bl	current_kernel_time
	bl	get_next_ino
	str	r0, [r5, #40]
	ldrh	r3, [r6, #196]
	mov	r1, r5
	ldr	ip, .L8265+8
	mov	r0, r7
	strh	r3, [r5]	@ movhi
	ldr	lr, [r6, #200]
	ldrd	r2, [sp]
	str	lr, [r5, #4]
	ldr	lr, [r6, #204]
	str	lr, [r5, #8]
	strd	r2, [r5, #52]
	strd	r2, [r5, #60]
	strd	r2, [r5, #68]
	str	ip, [r5, #200]
	str	r4, [r5, #328]
	bl	d_instantiate
	mov	r0, r7
	bl	d_rehash
	mov	r0, #0
	b	.L8239
.L8246:
	mov	r0, r7
	bl	dput
	b	.L8264
.L8266:
	.align	2
.L8265:
	.word	.LANCHOR1+3972
	.word	.LANCHOR5-2616
	.word	.LANCHOR5-2512
	.fnend
	.size	ffs_sb_fill, .-ffs_sb_fill
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_add_header, %function
rndis_qc_add_header:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r1
	mov	r1, #44
	mov	r0, r6
	str	lr, [sp, #12]
	bl	skb_realloc_headroom
	subs	r5, r0, #0
	beq	.L8268
	mov	r1, #44
	bl	skb_push
	mov	r1, #44
	mov	r4, r0
	bl	__memzero
	mov	r3, #0
	mov	r2, #1
	mov	r1, #36
	strb	r2, [r4]
	strb	r3, [r4, #1]
	strb	r3, [r4, #2]
	strb	r3, [r4, #3]
	ldr	r2, [r5, #80]
	str	r2, [r4, #4]	@ unaligned
	strb	r1, [r4, #8]
	strb	r3, [r4, #9]
	strb	r3, [r4, #10]
	strb	r3, [r4, #11]
	ldr	r3, [r5, #80]
	sub	r3, r3, #44
	str	r3, [r4, #12]	@ unaligned
.L8268:
	mov	r0, r6
	bl	dev_kfree_skb_any
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_qc_add_header, .-rndis_qc_add_header
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_unbind, %function
ecm_qc_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L8292
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L8289
.L8274:
	ldr	r0, .L8292+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8290
.L8275:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3752]
	bl	kfree
	ldr	r0, [r4, #3744]
	mov	r3, #0
	str	r3, [r4, #3752]
	cmp	r0, r3
	beq	.L8276
	bl	destroy_workqueue
.L8276:
	ldr	r3, [r6, #24]
	mov	r2, #0
	str	r2, [r4, #3744]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L8291
.L8277:
	cmp	r3, #2
	bls	.L8278
	ldr	r0, [r5, #8]
	bl	kfree
.L8278:
	ldr	r0, [r5, #16]
	bl	kfree
	ldr	r3, [r5, #148]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r5, #144]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR0
	mov	r0, r5
	str	r2, [r3, #1380]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
.L8291:
	ldr	r0, [r5, #12]
	bl	kfree
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L8277
.L8290:
	movw	r1, #:lower16:.LC717
	ldr	r2, .L8292+8
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC717
	bl	__dynamic_pr_debug
	b	.L8275
.L8289:
	ldr	r1, [r6, #24]
	movw	r2, #:lower16:.LC716
	sub	r0, r3, #20
	movt	r2, #:upper16:.LC716
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L8274
.L8293:
	.align	2
.L8292:
	.word	.LANCHOR4-844
	.word	.LANCHOR4-820
	.word	.LANCHOR5-2404
	.fnend
	.size	ecm_qc_unbind, .-ecm_qc_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_disconnect_work, %function
usb_qdss_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L8320
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L8316
.L8295:
	ldr	r5, [r4, #-64]
	movw	r0, #:lower16:.LC719
	movt	r0, #:upper16:.LC719
	ldr	r3, [r5]
	ldr	r3, [r3, #84]
	ldr	r6, [r3]
	bl	printk
	movw	r0, #:lower16:.LC494
	movt	r0, #:upper16:.LC494
	ldr	r1, [r6, #28]
	bl	strcmp
	cmp	r0, #0
	beq	.L8317
.L8297:
	ldr	r5, [r4, #-48]
	cmp	r5, #0
	beq	.L8294
	mov	r3, #0
	ldr	r0, [r4, #-44]
	mov	r1, #1
	mov	r2, r3
	blx	r5
	ldr	r0, .L8320+4
	ldr	r2, [r4, #-88]
	ldrh	r3, [r0, #-2]
	ldr	r4, [r2]
	tst	r3, #4
	bne	.L8318
.L8301:
	mov	r2, #1
	mov	r3, #0
	ldr	r0, [r4, #28]
	mov	r1, r2
	bl	usb_bam_get_connection_idx
	movw	r3, #:lower16:.LANCHOR1
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3984]
	bl	kfree
	uxtb	r0, r4
	bl	usb_bam_disconnect_pipe
	cmp	r0, #0
	bne	.L8319
.L8294:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8317:
	mov	r0, r5
	bl	msm_ep_unconfig
	cmp	r0, #0
	beq	.L8297
	movw	r0, #:lower16:.LC720
	movt	r0, #:upper16:.LC720
	bl	printk
	movw	r0, #:lower16:.LC721
	ldr	r1, .L8320+8
	movt	r0, #:upper16:.LC721
	bl	printk
	b	.L8297
.L8316:
	movw	r1, #:lower16:.LC718
	sub	r0, r3, #20
	movt	r1, #:upper16:.LC718
	bl	__dynamic_pr_debug
	b	.L8295
.L8318:
	movw	r1, #:lower16:.LC722
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC722
	bl	__dynamic_pr_debug
	b	.L8301
.L8319:
	movw	r0, #:lower16:.LC723
	movt	r0, #:upper16:.LC723
	bl	printk
	movw	r0, #:lower16:.LC724
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC724
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L8321:
	.align	2
.L8320:
	.word	.LANCHOR4-796
	.word	.LANCHOR4-772
	.word	.LANCHOR5-2384
	.fnend
	.size	usb_qdss_disconnect_work, .-usb_qdss_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_write, %function
acc_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L8375
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r1, [r3, #-2]
	.pad #44
	sub	sp, sp, #44
	ldr	r4, [r0, #124]
	str	r2, [sp]
	tst	r1, #4
	bne	.L8367
.L8323:
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	and	r2, r3, #3
	cmp	r2, #1
	beq	.L8368
	ldr	r0, .L8375+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	mvneq	r3, #18
	streq	r3, [sp]
	bne	.L8369
.L8322:
	ldr	r0, [sp]
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8368:
	cmp	r5, #0
	beq	.L8345
	tst	r3, #1
	beq	.L8326
	mov	r3, #57344
	movw	r2, #:lower16:autoremove_wake_function
	movt	r3, 65535
	movt	r2, #:upper16:autoremove_wake_function
	add	r8, r4, #1648
	add	r6, r4, #88
	add	r8, r8, #8
	str	r3, [sp, #4]
	str	r2, [sp, #8]
	b	.L8329
.L8372:
	mov	r2, r9
	mov	r1, r7
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L8340
	str	r9, [r10, #4]
	ldr	r0, [r4, #92]
	mov	r2, #208
	mov	r1, r10
	ldr	ip, [r0, #8]
	ldr	fp, [ip, #16]
	blx	fp
	cmp	r0, #0
	blt	.L8370
	subs	r5, r5, r9
	add	r7, r7, r9
	beq	.L8325
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L8326
.L8329:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r10, [r4, #1656]
	mov	r9, r0
	cmp	r10, r8
	beq	.L8371
	mov	r0, r10
	sub	r10, r10, #36
	bl	list_del
	mov	r1, r9
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r10, #0
	beq	.L8331
.L8332:
	cmp	r5, #16384
	movhi	r9, #16384
	movhi	r2, #0
	bhi	.L8338
	ldr	r2, [r4, #92]
	mov	r9, r5
	ldrh	r1, [r2, #20]
	udiv	r2, r5, r1
	mls	r2, r1, r2, r5
	clz	r2, r2
	lsr	r2, r2, #5
.L8338:
	ldrb	r1, [r10, #26]	@ zero_extendqisi2
	mov	r3, sp
	ldr	r0, [sp, #4]
	bfi	r1, r2, #1, #1
	and	ip, r3, r0
	ldr	r0, [r10]
	strb	r1, [r10, #26]
	ldr	r2, [ip, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r7, r9; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L8372
	mov	r1, r9
	bl	__memzero
.L8340:
	mvn	r3, #13
	str	r3, [sp]
.L8343:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	ldr	r1, [r4, #1660]
	add	r0, r10, #36
	mov	r2, r8
	bl	__list_add
	mov	r1, r5
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L8325:
	ldr	r0, .L8375+8
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	beq	.L8322
	movw	r1, #:lower16:.LC729
	ldr	r2, [sp]
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC729
	bl	__dynamic_pr_debug
	b	.L8322
.L8371:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L8331:
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	ands	r3, r3, #1
	beq	.L8348
	ldr	r1, [sp, #4]
	mov	r3, #0
	mov	r2, sp
	add	r9, r4, #1664
	str	r5, [sp, #12]
	str	r3, [sp, #20]
	add	r9, r9, #12
	str	r3, [sp, #24]
	and	r2, r2, r1
	str	r3, [sp, #28]
	ldr	r1, [sp, #8]
	mov	fp, r2
	str	r3, [sp, #32]
	str	r3, [sp, #36]
	ldr	r2, [r2, #12]
	add	r3, sp, #32
	str	r2, [sp, #24]
	str	r1, [sp, #28]
	str	r3, [sp, #32]
	str	r3, [sp, #36]
	b	.L8337
.L8374:
	bl	schedule
.L8337:
	mov	r2, #1
	add	r1, sp, #20
	mov	r0, r9
	bl	prepare_to_wait
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1656]
	mov	r10, r0
	cmp	r8, r3
	mov	r0, r3
	sub	r5, r3, #36
	beq	.L8373
	bl	list_del
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	bne	.L8335
.L8334:
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	ands	r3, r3, #1
	beq	.L8366
	ldr	r3, [fp, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L8374
	mov	r3, #65024
	movt	r3, 65535
.L8366:
	add	r1, sp, #20
	mov	r0, r9
	str	r3, [sp]
	bl	finish_wait
	b	.L8325
.L8373:
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L8334
.L8335:
	add	r1, sp, #20
	mov	r0, r9
	mov	r10, r5
	ldr	r5, [sp, #12]
	bl	finish_wait
	b	.L8332
.L8348:
	str	r3, [sp]
	b	.L8325
.L8367:
	movw	r1, #:lower16:.LC725
	sub	r0, r3, #20
	movt	r1, #:upper16:.LC725
	bl	__dynamic_pr_debug
	b	.L8323
.L8326:
	ldr	r0, .L8375+12
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	mvneq	r3, #4
	streq	r3, [sp]
	beq	.L8325
	mvn	r3, #4
	movw	r1, #:lower16:.LC727
	movt	r1, #:upper16:.LC727
	sub	r0, r0, #20
	str	r3, [sp]
	bl	__dynamic_pr_debug
	b	.L8325
.L8369:
	mvn	r3, #18
	movw	r1, #:lower16:.LC726
	movt	r1, #:upper16:.LC726
	sub	r0, r0, #20
	str	r3, [sp]
	bl	__dynamic_pr_debug
	b	.L8322
.L8370:
	ldr	ip, .L8375+16
	ldrh	r2, [ip, #-2]
	tst	r2, #4
	mvneq	r3, #4
	streq	r3, [sp]
	beq	.L8343
	movw	r1, #:lower16:.LC728
	mov	r2, r0
	movt	r1, #:upper16:.LC728
	sub	r0, ip, #20
	bl	__dynamic_pr_debug
	mvn	r3, #4
	str	r3, [sp]
	b	.L8343
.L8345:
	str	r5, [sp]
	b	.L8325
.L8376:
	.align	2
.L8375:
	.word	.LANCHOR4-748
	.word	.LANCHOR4-724
	.word	.LANCHOR4-652
	.word	.LANCHOR4-700
	.word	.LANCHOR4-676
	.fnend
	.size	acc_write, .-acc_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_write_tomdm, %function
ghsic_data_write_tomdm:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	subs	r5, r0, #120
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	beq	.L8377
	ldr	r3, [r0, #-116]
	cmp	r3, #0
	bne	.L8434
.L8377:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8434:
	sub	r8, r0, #40
	mov	r4, r0
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #44]
	mov	r7, r0
	ubfx	r3, r3, #1, #1
	cmp	r3, #0
	bne	.L8383
	mov	r2, r4
	ldr	r6, [r2, #-56]!
	cmp	r6, r2
	beq	.L8383
	cmp	r6, #0
	beq	.L8383
	ldr	r2, [r4, #-48]
	ldr	r0, .L8443
	ldr	r9, .L8443+4
	sub	r2, r2, #1
	str	r2, [r4, #-48]
	ldm	r6, {r1, r2}
	str	r3, [r6]
	str	r3, [r6, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8384
.L8385:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #3664]
	cmp	r3, #0
	bne	.L8435
.L8381:
	mov	r1, r7
	str	r3, [r6, #40]
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	sub	r9, r9, #4
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	mov	r1, r9
	ldr	r0, .L8443+8
	bl	___ratelimit
	cmp	r0, #0
	bne	.L8436
.L8382:
	ldr	r3, [r4, #92]
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #92]
	bl	dev_kfree_skb_any
.L8383:
.L8380:
	mov	r0, r8
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, .L8443+12
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8437
.L8386:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r4, #-108]
	mov	r6, r0
	cmp	r9, #0
	beq	.L8388
	movw	r3, #16960
	movw	r7, #:lower16:.LANCHOR0
	movt	r3, 15
	movw	r10, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR0
	movt	r10, #:upper16:.LANCHOR1
	str	r3, [sp, #20]
	b	.L8387
.L8389:
	mov	r2, #0
	mov	r1, #208
	ldr	r0, [r7, #1428]
	mvn	r3, #0
	bl	__alloc_skb
	subs	fp, r0, #0
	mov	r2, #208
	ldr	r1, [sp, #8]
	mov	r0, r9
	beq	.L8438
	ldr	ip, [fp, #172]
	str	r6, [fp, #28]
	str	ip, [r5, #-36]
	ldr	ip, [r7, #1428]
	str	ip, [r5, #-32]
	str	fp, [r5, #-4]
	ldr	ip, [r10, #3664]
	cmp	ip, #0
	bne	.L8439
.L8391:
	str	ip, [fp, #32]
	ldr	ip, [r9, #8]
	ldr	r6, [ip, #16]
	blx	r6
	mov	r2, r0
	mov	r0, r8
	str	r2, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [sp, #12]
	mov	r6, r0
	cmp	r2, #0
	bne	.L8440
.L8387:
	ldr	r3, [r4, #-116]
	sub	r2, r4, #64
	str	r2, [sp, #16]
	cmp	r3, #0
	beq	.L8388
	ldr	r5, [r4, #-64]
	sub	r3, r5, #36
	cmp	r5, r2
	mov	r0, r5
	str	r3, [sp, #8]
	beq	.L8388
	ldr	r2, [r4, #-48]
	ldr	r3, [r7, #1424]
	cmp	r2, r3
	bhi	.L8388
	bl	list_del
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [r10, #3664]
	cmp	r6, #0
	beq	.L8389
	add	r0, sp, #24
	bl	do_gettimeofday
	ldr	r2, [sp, #20]
	ldr	r6, [sp, #24]
	ldr	r3, [sp, #28]
	ubfx	r6, r6, #0, #12
	mla	r6, r2, r6, r3
	b	.L8389
.L8439:
	add	r0, sp, #24
	bl	do_gettimeofday
	add	r3, sp, #20
	mov	r2, #208
	ldr	r1, [sp, #8]
	ldm	r3, {r3, ip, lr}
	mov	r0, r9
	ubfx	ip, ip, #0, #12
	mla	ip, r3, ip, lr
	b	.L8391
.L8440:
	ldr	r7, .L8443+16
	mov	r0, fp
	bl	dev_kfree_skb_any
	ldr	r0, .L8443+20
	mov	r1, r7
	bl	___ratelimit
	cmp	r0, #0
	bne	.L8441
.L8394:
	ldr	r3, [r4, #-116]
	cmp	r3, #0
	bne	.L8442
	ldr	r3, [r9, #8]
	mov	r0, r9
	ldr	r1, [sp, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L8388:
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L8377
.L8435:
	add	r0, sp, #24
	bl	do_gettimeofday
	ldr	r3, [sp, #24]
	movw	r2, #16960
	ldr	r1, [sp, #28]
	movt	r2, 15
	ubfx	r3, r3, #0, #12
	mla	r3, r2, r3, r1
	b	.L8381
.L8437:
	movw	r1, #:lower16:.LC551
	mov	r3, r5
	ldr	r2, .L8443+16
	movt	r1, #:upper16:.LC551
	sub	r0, r0, #20
	bl	__dynamic_pr_debug
	b	.L8386
.L8438:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	ldr	r2, [r4, #-64]
	mov	r0, r5
	ldr	r1, [sp, #16]
	bl	__list_add
	b	.L8388
.L8384:
	ldr	lr, [r4, #-120]
	movw	r1, #:lower16:.LC570
	mov	r3, r5
	ldr	ip, [r4, #68]
	movt	r1, #:upper16:.LC570
	sub	r2, r9, #4
	sub	r0, r0, #20
	stm	sp, {ip, lr}
	bl	__dynamic_pr_debug
	b	.L8385
.L8442:
	mov	r0, r5
	ldr	r2, [r4, #-64]
	ldr	r1, [sp, #16]
	bl	__list_add
	b	.L8388
.L8436:
	movw	r0, #:lower16:.LC126
	mov	r1, r9
	mvn	r2, #18
	movt	r0, #:upper16:.LC126
	bl	printk
	b	.L8382
.L8441:
	movw	r0, #:lower16:.LC571
	mov	r1, r7
	movt	r0, #:upper16:.LC571
	bl	printk
	b	.L8394
.L8444:
	.align	2
.L8443:
	.word	.LANCHOR4-628
	.word	.LANCHOR5-2352
	.word	.LANCHOR0+1400
	.word	.LANCHOR4-604
	.word	.LANCHOR5-2332
	.word	.LANCHOR0+1432
	.fnend
	.size	ghsic_data_write_tomdm, .-ghsic_data_write_tomdm
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_suspend, %function
mbim_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC730
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	ldr	r1, .L8452
	str	lr, [sp, #8]
	movt	r0, #:upper16:.LC730
	.pad #12
	sub	sp, sp, #12
	bl	printk
	ldr	r0, .L8452+4
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r5, [r4, #3752]
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L8451
.L8446:
	ldr	r1, [r4, #3744]
	add	r2, r5, #200
	mov	r0, #4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work_on
.L8451:
	ldr	r3, .L8452+8
	mov	r2, #0
	movw	r1, #:lower16:.LC614
	movt	r1, #:upper16:.LC614
	sub	r0, r0, #32
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L8446
.L8453:
	.align	2
.L8452:
	.word	.LANCHOR5-2312
	.word	.LANCHOR4-2368
	.word	.LANCHOR5-3296
	.fnend
	.size	mbim_suspend, .-mbim_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_resume, %function
mbim_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC731
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	ldr	r1, .L8461
	str	lr, [sp, #8]
	movt	r0, #:upper16:.LC731
	.pad #12
	sub	sp, sp, #12
	bl	printk
	ldr	r0, .L8461+4
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r5, [r4, #3752]
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L8460
.L8455:
	ldr	r1, [r4, #3744]
	add	r2, r5, #216
	mov	r0, #4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work_on
.L8460:
	ldr	r3, .L8461+8
	mov	r2, #0
	movw	r1, #:lower16:.LC612
	movt	r1, #:upper16:.LC612
	sub	r0, r0, #32
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L8455
.L8462:
	.align	2
.L8461:
	.word	.LANCHOR5-2296
	.word	.LANCHOR4-2416
	.word	.LANCHOR5-3332
	.fnend
	.size	mbim_resume, .-mbim_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_suspend, %function
ecm_qc_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L8475
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8473
.L8464:
	ldr	r0, .L8475+4
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r5, [r4, #3752]
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L8474
.L8465:
	ldr	r1, [r4, #3744]
	add	r2, r5, #200
	mov	r0, #4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work_on
.L8473:
	movw	r1, #:lower16:.LC732
	ldr	r2, .L8475+8
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC732
	bl	__dynamic_pr_debug
	b	.L8464
.L8474:
	ldr	r3, .L8475+12
	mov	r2, #0
	movw	r1, #:lower16:.LC614
	movt	r1, #:upper16:.LC614
	sub	r0, r0, #32
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L8465
.L8476:
	.align	2
.L8475:
	.word	.LANCHOR4-580
	.word	.LANCHOR4-2368
	.word	.LANCHOR5-2284
	.word	.LANCHOR5-3296
	.fnend
	.size	ecm_qc_suspend, .-ecm_qc_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_resume, %function
ecm_qc_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L8489
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8487
.L8478:
	ldr	r0, .L8489+4
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r5, [r4, #3752]
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L8488
.L8479:
	ldr	r1, [r4, #3744]
	add	r2, r5, #216
	mov	r0, #4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work_on
.L8487:
	movw	r1, #:lower16:.LC733
	ldr	r2, .L8489+8
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC733
	bl	__dynamic_pr_debug
	b	.L8478
.L8488:
	ldr	r3, .L8489+12
	mov	r2, #0
	movw	r1, #:lower16:.LC612
	movt	r1, #:upper16:.LC612
	sub	r0, r0, #32
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L8479
.L8490:
	.align	2
.L8489:
	.word	.LANCHOR4-556
	.word	.LANCHOR4-2416
	.word	.LANCHOR5-2268
	.word	.LANCHOR5-3332
	.fnend
	.size	ecm_qc_resume, .-ecm_qc_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_unbind, %function
mbim_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L8505
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r6, [r1, #136]	@ zero_extendqisi2
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L8503
.L8492:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	add	r6, r5, r6, lsl #2
	ldr	r0, [r6, #3752]
	bl	kfree
	ldr	r0, [r5, #3744]
	mov	r3, #0
	str	r3, [r6, #3752]
	cmp	r0, r3
	beq	.L8493
	bl	destroy_workqueue
.L8493:
	ldr	r3, [r7, #24]
	mov	r2, #0
	str	r2, [r5, #3744]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L8504
.L8494:
	cmp	r3, #2
	bls	.L8495
	ldr	r0, [r4, #8]
	bl	kfree
.L8495:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r3, [r4, #160]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR0
	strb	r2, [r3, #250]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8504:
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r7, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L8494
.L8503:
	movw	r1, #:lower16:.LC717
	sub	r0, r3, #20
	ldr	r2, .L8505+4
	movt	r1, #:upper16:.LC717
	bl	__dynamic_pr_debug
	b	.L8492
.L8506:
	.align	2
.L8505:
	.word	.LANCHOR4-820
	.word	.LANCHOR5-2404
	.fnend
	.size	mbim_unbind, .-mbim_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_read, %function
mbim_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L8568
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #52
	sub	sp, sp, #52
	ldr	r4, [r0, #124]
	str	r2, [sp, #8]
	ldrh	r2, [r3, #-2]
	str	r1, [sp, #12]
	tst	r2, #4
	bne	.L8556
.L8508:
	cmp	r4, #0
	beq	.L8557
	ldr	r3, [sp, #8]
	cmp	r3, #4096
	bhi	.L8558
	add	r3, r4, #100
	str	r3, [sp, #4]
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r1, r3
	.syntax divided
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r1]
	add	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L8554
	mov	r3, sp
	ldr	r8, .L8568+4
	movw	r6, #:lower16:.LC737
	bic	r5, r3, #8128
	movt	r6, #:upper16:.LC737
	bic	r5, r5, #63
.L8512:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	bne	.L8517
	ldr	r3, [r4, #232]
	cmp	r3, #0
	beq	.L8518
.L8517:
	ldr	r3, [r4, #232]
	cmp	r3, #0
	bne	.L8559
	add	r3, r4, #208
	add	r6, r4, #204
	mov	r0, r6
	mov	r5, r3
	str	r3, [sp, #20]
	bl	_raw_spin_lock_irqsave
	ldr	r10, [r4, #208]
	mov	r7, r0
	cmp	r10, r5
	movne	r5, r10
	bne	.L8521
	movw	r3, #:lower16:.LC291
	mov	r2, sp
	ldr	fp, .L8568+8
	movt	r3, #:upper16:.LC291
	bic	r9, r2, #8128
	bic	r9, r9, #63
	mov	r5, r10
	str	r3, [sp, #16]
	b	.L8520
.L8523:
	ldr	r0, .L8568+12
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L8560
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #208]
	mov	r7, r0
	cmp	r10, r5
	bne	.L8521
.L8520:
	ldrh	r3, [fp, #-2]
	tst	r3, #4
	bne	.L8561
.L8522:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #208]
	cmp	r3, r5
	bne	.L8523
	ldr	r0, [r9, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #40
	movt	r2, #:upper16:autoremove_wake_function
	mov	r3, #0
	add	r7, sp, #28
	add	r8, r4, #108
	str	r3, [sp, #28]
	str	r0, [sp, #32]
	str	r2, [sp, #36]
	str	r1, [sp, #40]
	str	r1, [sp, #44]
	b	.L8526
.L8562:
	bl	schedule
.L8526:
	mov	r2, #1
	mov	r1, r7
	mov	r0, r8
	bl	prepare_to_wait
	ldr	r3, [r4, #208]
	cmp	r3, r5
	bne	.L8524
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L8562
	mov	r1, r7
	mov	r0, r8
	bl	finish_wait
	movw	r0, #:lower16:.LC741
	ldr	r1, .L8568+4
	movt	r0, #:upper16:.LC741
	bl	printk
	ldr	r1, [sp, #4]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r4, #65024
	movt	r4, 65535
.L8507:
	mov	r0, r4
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8561:
	ldr	r2, .L8568+4
	ldr	r1, [sp, #16]
	ldr	r0, .L8568+16
	bl	__dynamic_pr_debug
	b	.L8522
.L8560:
	movw	r1, #:lower16:.LC738
	ldr	r2, .L8568+4
	sub	r0, r0, #18
	movt	r1, #:upper16:.LC738
	bl	__dynamic_pr_debug
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #208]
	mov	r7, r0
	cmp	r5, r10
	bne	.L8521
	ldr	r5, [sp, #20]
	b	.L8520
.L8521:
	ldr	r3, [r5, #-4]
	sub	r8, r5, #8
	ldr	r2, [sp, #8]
	cmp	r3, r2
	bhi	.L8563
	ldr	r0, .L8568+20
	ldrh	r2, [r0, #-2]
	tst	r2, #4
	bne	.L8564
.L8531:
	mov	r0, r5
	bl	list_del
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [sp, #4]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	ldr	r2, [r5, #-4]
	bic	r3, r3, #8128
	ldr	r0, [sp, #12]
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r0, r2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L8565
.L8532:
	cmp	r2, #0
	bne	.L8566
	ldr	r0, .L8568+24
	ldr	r4, [r5, #-4]
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8567
.L8534:
	cmp	r8, #0
	beq	.L8507
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r8
	bl	kfree
	b	.L8507
.L8524:
	mov	r1, r7
	mov	r0, r8
	bl	finish_wait
	b	.L8523
.L8565:
	ldr	r1, [r5, #-8]
	bl	__copy_to_user
	mov	r2, r0
	b	.L8532
.L8556:
	movw	r1, #:lower16:.LC288
	sub	r0, r3, #20
	ldr	r2, .L8568+4
	movt	r1, #:upper16:.LC288
	ldr	r3, [sp, #8]
	bl	__dynamic_pr_debug
	b	.L8508
.L8567:
	movw	r1, #:lower16:.LC296
	mov	r3, r4
	ldr	r2, .L8568+4
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC296
	bl	__dynamic_pr_debug
	ldr	r4, [r5, #-4]
	b	.L8534
.L8564:
	movw	r1, #:lower16:.LC294
	ldr	r2, .L8568+4
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC294
	bl	__dynamic_pr_debug
	b	.L8531
.L8559:
	ldr	r1, [sp, #4]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r4, #4
	b	.L8507
.L8563:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [sp, #4]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC739
	ldr	r1, .L8568+4
	mvn	r4, #11
	ldr	r2, [r5, #-4]
	movt	r0, #:upper16:.LC739
	ldr	r3, [sp, #8]
	bl	printk
	b	.L8507
.L8566:
	movw	r0, #:lower16:.LC740
	ldr	r1, .L8568+4
	mvn	r4, #11
	movt	r0, #:upper16:.LC740
	bl	printk
	b	.L8534
.L8518:
	mov	r1, r8
	mov	r0, r6
	bl	printk
	ldr	r3, [r4, #88]
	cmp	r3, #0
	bne	.L8512
	ldr	r3, [r4, #232]
	cmp	r3, #0
	bne	.L8512
	ldr	r0, [r5, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #40
	movt	r2, #:upper16:autoremove_wake_function
	add	r7, sp, #28
	str	r3, [sp, #28]
	add	r9, r4, #108
	str	r0, [sp, #32]
	str	r2, [sp, #36]
	str	r1, [sp, #40]
	str	r1, [sp, #44]
.L8516:
	mov	r2, #1
	mov	r1, r7
	mov	r0, r9
	bl	prepare_to_wait
	ldr	r3, [r4, #88]
	cmp	r3, #0
	bne	.L8514
	ldr	r3, [r4, #232]
	cmp	r3, #0
	bne	.L8514
	ldr	r3, [r5, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L8515
	bl	schedule
	b	.L8516
.L8554:
	ldr	r1, [sp, #4]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC736
	ldr	r1, .L8568+4
	mvn	r4, #15
	movt	r0, #:upper16:.LC736
	bl	printk
	b	.L8507
.L8515:
	mov	r1, r7
	mov	r0, r9
	bl	finish_wait
	ldr	r1, [sp, #4]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r4, #65024
	movt	r4, 65535
	b	.L8507
.L8514:
	mov	r1, r7
	mov	r0, r9
	bl	finish_wait
	b	.L8512
.L8557:
	movw	r0, #:lower16:.LC734
	ldr	r1, .L8568+4
	mvn	r4, #18
	movt	r0, #:upper16:.LC734
	bl	printk
	b	.L8507
.L8558:
	movw	r0, #:lower16:.LC735
	mov	r2, r3
	ldr	r1, .L8568+4
	movt	r0, #:upper16:.LC735
	mov	r3, #4096
	bl	printk
	mvn	r4, #21
	b	.L8507
.L8569:
	.align	2
.L8568:
	.word	.LANCHOR4-532
	.word	.LANCHOR5-2252
	.word	.LANCHOR4-508
	.word	.LANCHOR4-486
	.word	.LANCHOR4-528
	.word	.LANCHOR4-460
	.word	.LANCHOR4-436
	.fnend
	.size	mbim_read, .-mbim_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gaudio_open_streams, %function
gaudio_open_streams:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r4, [r7, #3988]
	.pad #28
	sub	sp, sp, #28
	cmp	r4, #0
	beq	.L8629
	ldr	r0, .L8644
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8630
.L8573:
	movw	r6, #:lower16:kmalloc_caches
	mov	r3, #3
	ldr	r9, [r4, #124]
	movt	r6, #:upper16:kmalloc_caches
	mov	r2, #8000
	ldr	r0, [r6, #40]
	str	r3, [r4, #128]
	mov	r3, #2
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	cmp	r0, #0
	str	r2, [r4, #140]
	beq	.L8600
	mov	r2, #604
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L8631
.L8574:
	mov	r0, r5
	bl	_snd_pcm_hw_params_any
	ldr	r1, [r4, #128]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.101
	ldr	r1, [r4, #132]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.102
	ldr	r1, [r4, #136]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.103
	ldr	r1, [r4, #140]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.104
	mov	r2, #0
	movw	r1, #16707
	mov	r0, r9
	bl	snd_pcm_kernel_ioctl
	subs	r2, r0, #0
	blt	.L8632
.L8576:
	movw	r1, #16657
	mov	r2, r5
	movt	r1, 49756
	mov	r0, r9
	bl	snd_pcm_kernel_ioctl
	subs	r8, r0, #0
	blt	.L8633
	mov	r2, #0
	mov	r0, r9
	movw	r1, #16704
	bl	snd_pcm_kernel_ioctl
	subs	r2, r0, #0
	blt	.L8634
.L8578:
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L8602
	ldr	r3, [r5, #8]
	cmp	r3, #0
	bne	.L8603
.L8579:
	str	r3, [r4, #128]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L8604
	ldr	r3, [r5, #40]
	cmp	r3, #0
	movne	r1, #32
	bne	.L8581
.L8582:
	str	r3, [r4, #132]
	ldr	r3, [r5, #284]
	mov	r0, r5
	str	r3, [r4, #136]
	ldr	r3, [r5, #296]
	str	r3, [r4, #140]
	bl	kfree
	ldr	r0, .L8644+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8635
.L8583:
	ldr	r0, .L8644+8
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8636
.L8584:
	ldr	r5, [r7, #3988]
	mov	ip, #3
	mov	r1, #2
	ldr	r0, [r6, #40]
	mov	r2, #1
	mov	r3, #8000
	ldr	r7, [r5, #152]
	cmp	r0, #0
	ldr	r9, [r7, #212]
	str	ip, [r5, #156]
	str	r1, [r5, #160]
	strd	r2, [r5, #164]
	beq	.L8606
	mov	r2, #604
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L8637
.L8585:
	mov	r0, r4
	bl	_snd_pcm_hw_params_any
	ldr	r1, [r5, #156]
	mov	r0, r4
	bl	_snd_pcm_hw_param_set.constprop.101
	ldr	r1, [r5, #160]
	mov	r0, r4
	bl	_snd_pcm_hw_param_set.constprop.102
	ldr	r1, [r5, #164]
	mov	r0, r4
	bl	_snd_pcm_hw_param_set.constprop.103
	ldr	r1, [r5, #168]
	mov	r0, r4
	bl	_snd_pcm_hw_param_set.constprop.104
	mov	r2, #0
	movw	r1, #16707
	mov	r0, r7
	bl	snd_pcm_kernel_ioctl
	subs	r2, r0, #0
	blt	.L8638
.L8587:
	movw	r1, #16657
	mov	r2, r4
	movt	r1, 49756
	mov	r0, r7
	bl	snd_pcm_kernel_ioctl
	subs	r8, r0, #0
	blt	.L8639
	mov	r2, #0
	movw	r1, #16704
	mov	r0, r7
	bl	snd_pcm_kernel_ioctl
	subs	r2, r0, #0
	blt	.L8640
.L8589:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L8607
	ldr	r3, [r4, #8]
	cmp	r3, #0
	bne	.L8608
.L8590:
	str	r3, [r5, #156]
	ldr	r3, [r4, #36]
	cmp	r3, #0
	bne	.L8609
	ldr	r3, [r4, #40]
	cmp	r3, #0
	movne	r1, #32
	bne	.L8592
.L8593:
	str	r3, [r5, #160]
	ldr	r3, [r4, #284]
	str	r3, [r5, #164]
	ldr	r3, [r4, #296]
	str	r3, [r5, #168]
	ldr	r0, [r9, #44]
	bl	snd_pcm_format_physical_width
	str	r0, [r9, #80]
	mov	r0, r4
	bl	kfree
	ldr	r0, [r6, #28]
	cmp	r0, #0
	beq	.L8611
	mov	r2, #104
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L8641
	ldr	r0, .L8644+12
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8642
.L8595:
	ldr	r3, [r4, #332]
	mov	r2, #1
	mov	ip, #0
	mvn	lr, #-2147483648
	movw	r1, #16659
	mov	r0, r7
	movt	r1, 49256
	str	ip, [r6]
	str	r2, [r6, #4]
	lsr	r3, r3, r2
	str	r3, [r6, #12]
	str	r3, [r6, #16]
	str	r2, [r6, #20]
	mov	r2, r6
	str	lr, [r6, #24]
	str	ip, [r6, #28]
	str	ip, [r6, #32]
	bl	snd_pcm_kernel_ioctl
	subs	r8, r0, #0
	blt	.L8643
	mov	r0, r6
	bl	kfree
	ldr	r3, .L8644+16
	ldrh	r3, [r3, #-2]
	tst	r3, #4
	ldrne	r4, .L8644+20
	bne	.L8598
.L8597:
	cmp	r8, #0
	bne	.L8586
	movw	r0, #:lower16:.LC757
	ldr	r1, .L8644+24
	movt	r0, #:upper16:.LC757
	bl	printk
.L8570:
	mov	r0, r8
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L8639:
	movw	r0, #:lower16:.LC745
	mov	r2, r8
	ldr	r1, .L8644+28
	movt	r0, #:upper16:.LC745
	bl	printk
	mov	r0, r4
	bl	kfree
.L8586:
	movw	r0, #:lower16:.LC756
	mov	r2, r8
	ldr	r1, .L8644+24
	movt	r0, #:upper16:.LC756
	bl	printk
	b	.L8570
.L8606:
	mov	r4, #16
	b	.L8585
.L8600:
	mov	r5, #16
	b	.L8574
.L8611:
	ldr	r0, .L8644+12
	mov	r6, #16
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	beq	.L8595
.L8642:
	ldrb	ip, [r4, #388]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC753
	sub	r0, r0, #20
	ldr	r3, [r4, #380]
	movt	r1, #:upper16:.LC753
	ldr	r2, .L8644+32
	ubfx	ip, ip, #3, #1
	str	ip, [sp, #16]
	ldrb	ip, [r4, #388]	@ zero_extendqisi2
	ubfx	ip, ip, #2, #1
	str	ip, [sp, #12]
	ldrb	ip, [r4, #388]	@ zero_extendqisi2
	ubfx	ip, ip, #1, #1
	str	ip, [sp, #8]
	ldrb	ip, [r4, #388]	@ zero_extendqisi2
	and	ip, ip, #1
	str	ip, [sp, #4]
	ldr	ip, [r4, #384]
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L8595
.L8609:
	mov	r1, #0
.L8592:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L8593
.L8604:
	mov	r1, #0
.L8581:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L8582
.L8636:
	movw	r1, #:lower16:.LC749
	ldr	r2, .L8644+24
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC749
	bl	__dynamic_pr_debug
	b	.L8584
.L8630:
	movw	r1, #:lower16:.LC743
	sub	r0, r0, #20
	ldr	r2, .L8644+24
	movt	r1, #:upper16:.LC743
	bl	__dynamic_pr_debug
	ldr	r4, [r7, #3988]
	b	.L8573
.L8643:
	ldr	r4, .L8644+20
	movw	r0, #:lower16:.LC754
	mov	r2, r8
	movt	r0, #:upper16:.LC754
	sub	r1, r4, #4
	bl	printk
	mov	r0, r6
	bl	kfree
	ldr	r3, .L8644+16
	ldrh	r3, [r3, #-2]
	tst	r3, #4
	beq	.L8586
.L8598:
	ldr	r3, [r5, #156]
	movw	r1, #:lower16:.LC755
	sub	r2, r4, #4
	ldr	ip, [r5, #168]
	movt	r1, #:upper16:.LC755
	ldr	r0, .L8644+36
	str	ip, [sp, #8]
	ldr	ip, [r5, #164]
	str	ip, [sp, #4]
	ldr	ip, [r5, #160]
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L8597
.L8635:
	ldr	r3, [r4, #128]
	movw	r1, #:lower16:.LC747
	sub	r0, r0, #20
	ldr	ip, [r4, #140]
	movt	r1, #:upper16:.LC747
	ldr	r2, .L8644+40
	str	ip, [sp, #8]
	ldr	ip, [r4, #136]
	str	ip, [sp, #4]
	ldr	ip, [r4, #132]
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L8583
.L8607:
	mov	r1, #0
.L8591:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L8590
.L8602:
	mov	r1, #0
.L8580:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L8579
.L8608:
	mov	r1, #32
	b	.L8591
.L8603:
	mov	r1, #32
	b	.L8580
.L8631:
	mvn	r8, #11
.L8575:
	movw	r0, #:lower16:.LC748
	mov	r2, r8
	ldr	r1, .L8644+24
	movt	r0, #:upper16:.LC748
	bl	printk
	b	.L8570
.L8638:
	movw	r0, #:lower16:.LC744
	ldr	r1, .L8644+28
	movt	r0, #:upper16:.LC744
	bl	printk
	b	.L8587
.L8640:
	movw	r0, #:lower16:.LC751
	ldr	r1, .L8644+28
	movt	r0, #:upper16:.LC751
	bl	printk
	b	.L8589
.L8629:
	ldr	r2, .L8644+24
	movw	r0, #:lower16:.LC742
	mvn	r8, #18
	movt	r0, #:upper16:.LC742
	mov	r1, r2
	bl	printk
	b	.L8570
.L8632:
	movw	r0, #:lower16:.LC744
	ldr	r1, .L8644+40
	movt	r0, #:upper16:.LC744
	bl	printk
	b	.L8576
.L8634:
	movw	r0, #:lower16:.LC746
	ldr	r1, .L8644+40
	movt	r0, #:upper16:.LC746
	bl	printk
	b	.L8578
.L8633:
	movw	r0, #:lower16:.LC745
	mov	r2, r8
	ldr	r1, .L8644+40
	movt	r0, #:upper16:.LC745
	bl	printk
	mov	r0, r5
	bl	kfree
	b	.L8575
.L8637:
	movw	r0, #:lower16:.LC750
	ldr	r1, .L8644+28
	mvn	r8, #11
	movt	r0, #:upper16:.LC750
	bl	printk
	b	.L8586
.L8641:
	movw	r0, #:lower16:.LC752
	ldr	r1, .L8644+28
	mvn	r8, #11
	movt	r0, #:upper16:.LC752
	bl	printk
	b	.L8586
.L8645:
	.align	2
.L8644:
	.word	.LANCHOR4-412
	.word	.LANCHOR4-388
	.word	.LANCHOR4-364
	.word	.LANCHOR4-340
	.word	.LANCHOR4-316
	.word	.LANCHOR5-2192
	.word	.LANCHOR5-2240
	.word	.LANCHOR5-2196
	.word	.LANCHOR5-2172
	.word	.LANCHOR4-336
	.word	.LANCHOR5-2220
	.fnend
	.size	gaudio_open_streams, .-gaudio_open_streams
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_playback_work, %function
f_audio_playback_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	sub	r7, r0, #8
	mov	r6, r0
	strd	r8, [sp, #16]
	mov	r0, r7
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	bl	_raw_spin_lock_irqsave
	mov	r3, r6
	mov	r8, r0
	ldr	r4, [r3, #16]!
	cmp	r4, r3
	beq	.L8667
	mov	r0, r4
	movw	r5, #:lower16:.LANCHOR4
	bl	list_del
	sub	r3, r4, #8
	mov	r1, r8
	mov	r0, r7
	movt	r5, #:upper16:.LANCHOR4
	str	r3, [sp, #12]
	bl	_raw_spin_unlock_irqrestore
	sub	r3, r5, #292
	ldrh	r3, [r3, #-2]
	tst	r3, #4
	bne	.L8668
.L8648:
	ldmdb	r4, {r3, r8}
	ldr	r10, [r6, #-64]
	cmp	r8, #0
	str	r3, [sp, #8]
	ldr	fp, [r10, #212]
	beq	.L8669
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	ldrb	r3, [r7, #2216]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L8670
.L8651:
	mov	r3, sp
	bic	r7, r3, #8128
	lsl	r3, r8, #3
	bic	r7, r7, #63
	str	r3, [sp, #16]
.L8658:
	ldr	r3, [fp, #160]
	mov	r2, #146
	movw	r1, #16704
	mov	r0, r10
	ldr	r3, [r3]
	cmp	r3, #7
	mvn	r2, r2, lsr r3
	bhi	.L8653
	ands	r2, r2, #1
	bne	.L8653
	bl	snd_pcm_kernel_ioctl
	cmp	r0, #0
	blt	.L8671
.L8653:
	ldr	r3, [fp, #80]
	ldr	r0, .L8675
	ldr	r1, [sp, #8]
	cmp	r3, #0
	beq	.L8672
	ldrh	ip, [r0]
	ldr	r2, [sp, #16]
	ubfx	ip, ip, #2, #1
	cmp	ip, #0
	udiv	r9, r2, r3
	bne	.L8673
	ldr	r3, [r7, #8]
	mov	r2, r9
	ldr	r0, [r6, #-64]
	str	ip, [r7, #8]
	str	r3, [sp, #20]
	bl	snd_pcm_lib_write
	cmp	r9, r0
	mov	r2, r0
	bne	.L8656
.L8657:
	mov	r3, r2
	ldrh	r2, [r5, #-246]
	mov	r1, sp
	ldr	r0, [sp, #20]
	bic	r1, r1, #8128
	bic	r1, r1, #63
	tst	r2, #4
	str	r0, [r1, #8]
	bne	.L8674
.L8650:
	ldr	r5, [sp, #12]
	cmp	r5, #0
	beq	.L8646
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r3, #0
	mov	r0, r5
	str	r3, [r4, #-8]
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	kfree
.L8646:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8670:
	bl	gaudio_open_streams
	cmp	r0, #0
	moveq	r3, #1
	strbeq	r3, [r7, #2216]
	beq	.L8651
	movw	r0, #:lower16:.LC761
	ldr	r1, .L8675+4
	movt	r0, #:upper16:.LC761
	bl	printk
	b	.L8650
.L8668:
	movw	r1, #:lower16:.LC759
	sub	r0, r5, #312
	ldr	r2, .L8675+8
	movt	r1, #:upper16:.LC759
	ldr	r3, [r4, #-4]
	bl	__dynamic_pr_debug
	b	.L8648
.L8674:
	movw	r1, #:lower16:.LC766
	ldr	r2, .L8675+4
	movt	r1, #:upper16:.LC766
	ldr	r0, .L8675+12
	bl	__dynamic_pr_debug
	b	.L8650
.L8673:
	movw	r1, #:lower16:.LC764
	ldr	r2, .L8675+4
	sub	r0, r0, #18
	movt	r1, #:upper16:.LC764
	strd	r8, [sp]
	bl	__dynamic_pr_debug
	ldr	ip, [r7, #8]
	mov	r3, #0
	mov	r2, r9
	ldr	r0, [r6, #-64]
	ldr	r1, [sp, #8]
	str	r3, [r7, #8]
	str	ip, [sp, #20]
	bl	snd_pcm_lib_write
	cmp	r9, r0
	mov	r2, r0
	beq	.L8657
.L8656:
	ldr	r3, .L8675+16
	movw	r0, #:lower16:.LC765
	movt	r0, #:upper16:.LC765
	sub	r1, r3, #4
	bl	printk
	ldr	r3, [sp, #20]
	str	r3, [r7, #8]
	b	.L8658
.L8667:
	movw	r0, #:lower16:.LC758
	ldr	r1, .L8675+8
	movt	r0, #:upper16:.LC758
	bl	printk
	mov	r1, r8
	mov	r0, r7
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L8669:
	movw	r0, #:lower16:.LC760
	ldr	r1, .L8675+4
	movt	r0, #:upper16:.LC760
	bl	printk
	b	.L8650
.L8672:
	movw	r0, #:lower16:.LC763
	ldr	r1, .L8675+4
	movt	r0, #:upper16:.LC763
	bl	printk
	b	.L8650
.L8671:
	ldr	r5, .L8675+16
	mov	r2, r0
	movw	r0, #:lower16:.LC746
	movt	r0, #:upper16:.LC746
	sub	r1, r5, #4
	bl	printk
	movw	r0, #:lower16:.LC762
	sub	r1, r5, #28
	movt	r0, #:upper16:.LC762
	bl	printk
	b	.L8650
.L8676:
	.align	2
.L8675:
	.word	.LANCHOR4-270
	.word	.LANCHOR5-2132
	.word	.LANCHOR5-2156
	.word	.LANCHOR4-264
	.word	.LANCHOR5-2128
	.fnend
	.size	f_audio_playback_work, .-f_audio_playback_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_complete_in, %function
mtp_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r3, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r3, #2500]
	cmp	r2, #0
	movne	r3, #4
	add	r5, r4, #88
	mov	r0, r5
	strne	r3, [r4, #104]
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	add	r2, r4, #116
	ldr	r1, [r4, #120]
	add	r0, r6, #36
	bl	__list_add
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	add	r0, r4, #144
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
	.fnend
	.size	mtp_complete_in, .-mtp_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_complete_intr, %function
mtp_complete_intr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r3, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r3, #2500]
	cmp	r2, #0
	movne	r3, #4
	add	r5, r4, #88
	mov	r0, r5
	strne	r3, [r4, #104]
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	add	r2, r4, #124
	ldr	r1, [r4, #128]
	add	r0, r6, #36
	bl	__list_add
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	add	r0, r4, #156
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
	.fnend
	.size	mtp_complete_intr, .-mtp_complete_intr
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_unbind, %function
f_audio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, [r1, #16]
	mov	r4, r1
	str	lr, [sp, #4]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	f_audio_unbind, .-f_audio_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_put_char, %function
gs_put_char:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r4, [r0, #272]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #92]
	mov	r1, r0
	ldr	r3, [r4, #100]
	ldr	ip, [r4, #104]
	add	r3, r3, r5
	sub	r3, r3, ip
	sub	r3, r3, #1
	udiv	r2, r3, r5
	mls	r3, r5, r2, r3
	cmp	r3, #0
	moveq	r5, r3
	beq	.L8692
	ldr	r2, [r4, #96]
	add	r5, r2, r5
	subs	r3, r5, ip
	beq	.L8697
	cmp	r3, #1
	strb	r6, [ip]
	bne	.L8698
	ldr	r2, [r4, #96]
	mov	r5, r3
	str	r2, [r4, #104]
.L8692:
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8697:
	strb	r6, [r2]
	ldr	r3, [r4, #96]
	mov	r5, #1
	add	r3, r3, r5
	str	r3, [r4, #104]
	b	.L8692
.L8698:
	ldr	r3, [r4, #104]
	mov	r5, #1
	add	r3, r3, r5
	str	r3, [r4, #104]
	b	.L8692
	.fnend
	.size	gs_put_char, .-gs_put_char
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_function_unbind_config, %function
ncm_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r4, #3992]
	cmp	r3, #0
	beq	.L8699
	ldr	r0, [r3, #8]
	bl	unregister_netdev
	ldr	r0, [r4, #3992]
	add	r0, r0, #88
	bl	flush_work
	ldr	r3, [r4, #3992]
	ldr	r0, [r3, #8]
	bl	free_netdev
	mov	r3, #0
	str	r3, [r4, #3992]
.L8699:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ncm_function_unbind_config, .-ncm_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_function_unbind_config, %function
ecm_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r4, #3992]
	cmp	r3, #0
	beq	.L8705
	ldr	r0, [r3, #8]
	bl	unregister_netdev
	ldr	r0, [r4, #3992]
	add	r0, r0, #88
	bl	flush_work
	ldr	r3, [r4, #3992]
	ldr	r0, [r3, #8]
	bl	free_netdev
	mov	r3, #0
	str	r3, [r4, #3992]
.L8705:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_function_unbind_config, .-ecm_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_function_unbind_config, %function
rndis_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r4, #3992]
	cmp	r3, #0
	beq	.L8711
	ldr	r0, [r3, #8]
	bl	unregister_netdev
	ldr	r0, [r4, #3992]
	add	r0, r0, #88
	bl	flush_work
	ldr	r3, [r4, #3992]
	ldr	r0, [r3, #8]
	bl	free_netdev
	mov	r3, #0
	str	r3, [r4, #3992]
.L8711:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_function_unbind_config, .-rndis_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_complete_in, %function
conn_gadget_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r3, #:lower16:.LANCHOR1
	mov	r5, r1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #16]
	ldr	r2, [r1, #44]
	.pad #12
	sub	sp, sp, #12
	ldr	r4, [r3, #2484]
	cmp	r2, #0
	bne	.L8727
.L8718:
	add	r6, r4, #88
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	add	r2, r4, #120
	ldr	r1, [r4, #124]
	add	r0, r5, #36
	bl	__list_add
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	add	r0, r4, #156
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	__wake_up
.L8727:
	movw	r0, #:lower16:.LANCHOR4
	mov	r2, #1
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, #-222]
	str	r2, [r4, #104]
	tst	r3, #4
	bne	.L8728
.L8719:
	movw	r0, #:lower16:.LC767
	ldr	r1, .L8729
	ldr	r2, [r5, #44]
	movt	r0, #:upper16:.LC767
	bl	printk
	b	.L8718
.L8728:
	ldr	r3, .L8729
	movw	r1, #:lower16:.LC233
	str	r2, [sp]
	movt	r1, #:upper16:.LC233
	sub	r0, r0, #240
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L8719
.L8730:
	.align	2
.L8729:
	.word	.LANCHOR5-2112
	.fnend
	.size	conn_gadget_complete_in, .-conn_gadget_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	lookup_string, %function
lookup_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r3
	strd	r6, [sp, #8]
	mov	r7, r1
	sub	r6, r0, #4
	strd	r8, [sp, #16]
	mov	r8, r2
	mov	r9, #126
	str	r10, [sp, #24]
	add	r10, r1, #2
	str	lr, [sp, #28]
	.pad #8
	sub	sp, sp, #8
.L8732:
	ldr	r3, [r6, #4]!
	cmp	r3, #0
	beq	.L8754
	ldrh	r2, [r3]
	cmp	r2, r8
	bne	.L8732
	cmp	r5, #0
	beq	.L8755
	ldr	r3, [r3, #4]
	cmp	r3, #0
	bne	.L8753
	b	.L8732
.L8756:
	adds	r3, r3, #8
	beq	.L8732
.L8753:
	ldr	r4, [r3, #4]
	cmp	r4, #0
	beq	.L8732
	ldrb	r2, [r3]	@ zero_extendqisi2
	cmp	r5, r2
	bne	.L8756
	mov	r0, r4
	bl	strlen
	cmp	r0, #126
	mov	r3, r10
	str	r9, [sp]
	movcc	r1, r0
	movcs	r1, #126
	mov	r2, #1
	mov	r0, r4
	bl	utf8s_to_utf16s
	cmp	r0, #0
	blt	.L8732
	add	r3, r0, #1
	mov	r2, #3
	lsl	r3, r3, #1
	strb	r2, [r7, #1]
	uxtb	r3, r3
	subs	r0, r3, #0
	strb	r3, [r7]
	beq	.L8732
.L8731:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L8754:
	mvn	r0, #21
	b	.L8731
.L8755:
	mov	r2, #4
	mov	r1, #3
	mov	r0, r2
	strb	r2, [r7]
	strb	r1, [r7, #1]
	ldrh	r2, [r3]
	strb	r2, [r7, #2]
	ldrh	r3, [r3]
	lsr	r3, r3, #8
	strb	r3, [r7, #3]
	b	.L8731
	.fnend
	.size	lookup_string, .-lookup_string
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_unbind, %function
acm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR1
	mov	r2, #1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	ip, #:upper16:.LANCHOR1
	mov	r4, r1
	str	r6, [sp, #8]
	add	r0, ip, #2192
	str	lr, [sp, #12]
	mov	lr, #0
	mov	r3, lr
	mov	r1, r2
	str	r2, [ip, #2200]
	add	r0, r0, #12
	str	lr, [ip, #3996]
	bl	__wake_up
	movw	r0, #:lower16:.LC768
	movt	r0, #:upper16:.LC768
	bl	printk
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r5, [r4, #152]
	ldr	r6, [r4, #156]
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r6
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, [r4]
	bl	kfree
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
	.fnend
	.size	acm_unbind, .-acm_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	halt_bulk_in_endpoint, %function
halt_bulk_in_endpoint:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR4
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	movt	ip, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	ldrh	r3, [ip, #-198]
	str	lr, [sp, #12]
	ldr	r5, [r0, #100]
	tst	r3, #4
	bne	.L8776
.L8760:
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
	cmp	r0, #0
	bne	.L8765
	b	.L8775
.L8764:
	mov	r0, #100
	bl	msleep_interruptible
	cmp	r0, #0
	mov	r1, #1
	bne	.L8767
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	cmp	r0, #0
	beq	.L8775
.L8765:
	cmn	r0, #11
	beq	.L8764
	ldr	r3, [r4, #84]
	movw	r1, #:lower16:.LC771
	mov	r2, r0
	movt	r1, #:upper16:.LC771
	add	r0, r3, #32
	bl	dev_warn
.L8775:
	mov	r0, #0
.L8759:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8767:
	mvn	r0, #3
	b	.L8759
.L8776:
	ldr	r1, [r4, #84]
	movw	r3, #:lower16:.LC769
	movw	r2, #:lower16:.LC770
	sub	r0, ip, #216
	movt	r3, #:upper16:.LC769
	movt	r2, #:upper16:.LC770
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L8760
	.fnend
	.size	halt_bulk_in_endpoint, .-halt_bulk_in_endpoint
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_unbind, %function
f_midi_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LANCHOR4
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	movt	r0, #:upper16:.LANCHOR4
	str	lr, [sp, #4]
	ldr	r2, [r1, #20]
	ldrh	r3, [r0, #-174]
	ldr	r2, [r2, #24]
	tst	r3, #4
	bne	.L8791
.L8778:
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, #186]
	tst	r3, #4
	bne	.L8792
.L8779:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	mov	r3, #0
	str	r3, [r4, #96]
	cmp	r0, r3
	beq	.L8780
	bl	snd_card_free
.L8780:
	ldr	r0, [r4, #332]
	bl	kfree
	mov	r3, #0
	ldr	r0, [r4, #16]
	str	r3, [r4, #332]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
.L8791:
	ldr	r1, [r2]
	movw	r2, #:lower16:.LC772
	sub	r0, r0, #192
	movt	r2, #:upper16:.LC772
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #20]
	ldr	r2, [r3, #24]
	b	.L8778
.L8792:
	ldr	r1, [r2]
	movw	r2, #:lower16:.LC12
	add	r0, r0, #168
	movt	r2, #:upper16:.LC12
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L8779
	.fnend
	.size	f_midi_unbind, .-f_midi_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_unbind, %function
ncm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	movt	r3, #:upper16:.LANCHOR4
	str	lr, [sp, #4]
	ldrh	r2, [r3, #-150]
	tst	r2, #4
	bne	.L8799
.L8794:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #168]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #164]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR0
	mov	r0, r4
	str	r2, [r3, #1468]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
.L8799:
	ldr	r1, [r0, #24]
	movw	r2, #:lower16:.LC773
	sub	r0, r3, #168
	movt	r2, #:upper16:.LC773
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L8794
	.fnend
	.size	ncm_unbind, .-ncm_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_unbind, %function
ecm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	movt	r3, #:upper16:.LANCHOR4
	str	lr, [sp, #4]
	ldrh	r2, [r3, #-126]
	tst	r2, #4
	bne	.L8806
.L8801:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #168]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #164]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR0
	mov	r0, r4
	str	r2, [r3, #1508]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
.L8806:
	ldr	r1, [r0, #24]
	movw	r2, #:lower16:.LC716
	sub	r0, r3, #144
	movt	r2, #:upper16:.LC716
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L8801
	.fnend
	.size	ecm_unbind, .-ecm_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_function_unbind_config, %function
rndis_qc_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC774
	movw	r0, #:lower16:init_net
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r1, #:upper16:.LC774
	movt	r0, #:upper16:init_net
	str	lr, [sp, #4]
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L8807
	.syntax divided
@ 17 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		mrs	ip, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	movw	r2, #:lower16:__per_cpu_offset
	bic	r1, r3, #8128
	movt	r2, #:upper16:__per_cpu_offset
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
	ldr	r1, [r2, r1, lsl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, ip	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	bl	unregister_netdev
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	free_netdev
.L8807:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_qc_function_unbind_config, .-rndis_qc_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_start, %function
bam_data_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #4]
	beq	.L8834
	cmp	r3, #0
	beq	.L8810
	ldr	r0, .L8838
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L8835
.L8816:
	ldr	r0, [r3, #8]
	mov	r2, #32
	ldr	r1, [r4, #40]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L8836
.L8810:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L8834:
	cmp	r3, #0
	beq	.L8810
	ldr	r0, .L8838+4
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L8837
.L8814:
	ldr	r0, [r3, #12]
	mov	r2, #32
	ldr	r1, [r4, #36]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	movwne	r0, #:lower16:.LC355
	ldrne	r1, .L8838+8
	bne	.L8833
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L8836:
	ldr	r1, .L8838+12
	movw	r0, #:lower16:.LC355
.L8833:
	ldr	r4, [sp]
	movt	r0, #:upper16:.LC355
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk
.L8835:
	ldr	r3, .L8838+12
	movw	r1, #:lower16:.LC364
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC364
	mov	r2, r3
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #4]
	b	.L8816
.L8837:
	ldr	r3, .L8838+8
	movw	r1, #:lower16:.LC364
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC364
	mov	r2, r3
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #4]
	b	.L8814
.L8839:
	.align	2
.L8838:
	.word	.LANCHOR4-3760
	.word	.LANCHOR4-3792
	.word	.LANCHOR3+2972
	.word	.LANCHOR3+3000
	.fnend
	.size	bam_data_start, .-bam_data_start
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_write, %function
adb_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r3, #3476]
	.pad #52
	sub	sp, sp, #52
	ldr	r4, [r0, #124]
	str	r1, [sp, #8]
	str	r2, [sp, #16]
	cmp	r3, #0
	beq	.L8867
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	str	r3, [sp, #4]
	ldrh	r3, [r3, #-102]
	tst	r3, #4
	bne	.L8888
.L8842:
	add	r3, r4, #112
	str	r3, [sp, #20]
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r1, r3
	.syntax divided
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r1]
	add	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L8889
	mov	fp, #57344
	ldr	r10, [sp, #16]
	movw	r3, #:lower16:autoremove_wake_function
	movt	fp, 65535
	movt	r3, #:upper16:autoremove_wake_function
	mov	r2, fp
	str	fp, [sp]
	str	r3, [sp, #12]
.L8843:
	mov	r3, sp
	and	r9, r3, r2
.L8866:
	cmp	r10, #0
	beq	.L8890
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L8863
	add	r7, r4, #120
	add	r5, r4, #88
.L8844:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #120]
	mov	r8, r0
	cmp	r3, r7
	mov	r0, r3
	sub	r6, r3, #36
	beq	.L8891
	bl	list_del
	mov	r1, r8
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L8847
.L8848:
	ldr	r2, [sp]
	mov	r3, sp
	cmp	r10, #4096
	movcc	r8, r10
	movcs	r8, #4096
	ldr	r0, [r6]
	and	r2, r3, r2
	ldr	r3, [sp, #8]
	ldr	r2, [r2, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r3, r8; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	bne	.L8856
	mov	r2, r8
	mov	r1, r3
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L8857
	str	r8, [r6, #4]
	ldr	r0, [r4, #92]
	mov	r2, #32
	mov	r1, r6
	ldr	ip, [r0, #8]
	ldr	r9, [ip, #16]
	blx	r9
	cmp	r0, #0
	blt	.L8892
	sub	r10, r10, r8
	ldr	r2, [sp]
	ldr	r3, [sp, #8]
	add	r3, r3, r8
	str	r3, [sp, #8]
	b	.L8843
.L8891:
	mov	r1, r8
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L8847:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L8893
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L8844
.L8863:
	ldr	r3, [sp, #4]
	ldrh	r3, [r3, #-78]
	tst	r3, #4
	mvneq	r8, #4
	beq	.L8845
	movw	r1, #:lower16:.LC776
	ldr	r0, .L8900
	mvn	r8, #4
	movt	r1, #:upper16:.LC776
	bl	__dynamic_pr_debug
	b	.L8845
.L8893:
	ldr	r1, [sp, #12]
	str	r3, [sp, #28]
	add	r2, sp, #40
	str	r3, [sp, #32]
	add	r8, r4, #140
	str	r3, [sp, #36]
	str	r3, [sp, #40]
	str	r3, [sp, #44]
	ldr	r3, [r9, #12]
	str	r3, [sp, #32]
	str	r1, [sp, #36]
	str	r2, [sp, #40]
	str	r2, [sp, #44]
	b	.L8855
.L8895:
	bl	schedule
.L8855:
	mov	r2, #1
	add	r1, sp, #28
	mov	r0, r8
	bl	prepare_to_wait
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #120]
	mov	fp, r0
	cmp	r3, r7
	mov	r0, r3
	sub	r6, r3, #36
	beq	.L8894
	bl	list_del
	mov	r1, fp
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	bne	.L8852
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L8853
.L8898:
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L8895
	mov	r0, r8
	mov	r8, #65024
	add	r1, sp, #28
	movt	r8, 65535
	bl	finish_wait
.L8845:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L8896
.L8865:
	ldr	r1, [sp, #20]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r3, [sp, #4]
	ldrh	r3, [r3, #-30]
	tst	r3, #4
	bne	.L8897
.L8840:
	mov	r0, r8
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8856:
	mov	r1, r8
	bl	__memzero
.L8857:
	mvn	r8, #13
.L8861:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r2, r7
	ldr	r1, [r4, #124]
	add	r0, r6, #36
	bl	__list_add
	mov	r1, r9
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L8865
.L8896:
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #128
	bl	__wake_up
	b	.L8865
.L8894:
	mov	r1, fp
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L8898
.L8853:
	add	r1, sp, #28
	mov	r0, r8
	bl	finish_wait
	b	.L8866
.L8852:
	add	r1, sp, #28
	mov	r0, r8
	bl	finish_wait
	b	.L8848
.L8888:
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LC775
	movt	r1, #:upper16:.LC775
	sub	r0, r3, #120
	bl	__dynamic_pr_debug
	b	.L8842
.L8897:
	movw	r1, #:lower16:.LC778
	mov	r2, r8
	ldr	r0, .L8900+4
	movt	r1, #:upper16:.LC778
	bl	__dynamic_pr_debug
	b	.L8840
.L8890:
	ldr	r8, [sp, #16]
	b	.L8845
.L8889:
	ldr	r1, [sp, #20]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r8, #15
	b	.L8840
.L8892:
	ldr	r3, [sp, #4]
	ldrh	r3, [r3, #-54]
	tst	r3, #4
	bne	.L8899
.L8860:
	mov	r3, #1
	mvn	r8, #4
	str	r3, [r4, #104]
	b	.L8861
.L8867:
	mvn	r8, #18
	b	.L8840
.L8899:
	movw	r1, #:lower16:.LC777
	mov	r2, r0
	ldr	r0, .L8900+8
	movt	r1, #:upper16:.LC777
	bl	__dynamic_pr_debug
	b	.L8860
.L8901:
	.align	2
.L8900:
	.word	.LANCHOR4-96
	.word	.LANCHOR4-48
	.word	.LANCHOR4-72
	.fnend
	.size	adb_write, .-adb_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_unbind, %function
conn_gadget_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC779
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	movt	r0, #:upper16:.LC779
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	bl	printk
	movw	r0, #:lower16:.LANCHOR4
	ldr	r1, [r4, #100]
	mov	ip, #0
	movt	r0, #:upper16:.LANCHOR4
	mov	r2, #1
	ldrh	r3, [r0, #-6]
	str	ip, [r4, #100]
	str	r2, [r4, #104]
	str	r1, [r4, #212]
	tst	r3, #4
	bne	.L8919
.L8903:
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #200
	bl	__wake_up
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #144
	bl	__wake_up
	add	r9, r4, #128
	add	r5, r4, #88
	b	.L8904
.L8905:
	bl	list_del
	mov	r1, r8
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L8908
	ldr	r8, [r4, #96]
	ldr	r0, [r6, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L8904:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #128]
	mov	r8, r0
	cmp	r9, r6
	mov	r0, r6
	sub	r7, r6, #36
	bne	.L8905
	mov	r1, r8
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L8908:
	add	r9, r4, #136
	b	.L8906
.L8909:
	bl	list_del
	mov	r1, r8
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L8912
	ldr	r8, [r4, #96]
	ldr	r0, [r6, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L8906:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #136]
	mov	r8, r0
	cmp	r6, r9
	mov	r0, r6
	sub	r7, r6, #36
	bne	.L8909
	mov	r1, r8
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L8912:
	add	r9, r4, #120
	b	.L8910
.L8913:
	bl	list_del
	mov	r1, r8
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L8920
	ldr	r8, [r4, #92]
	ldr	r0, [r6, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L8910:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #120]
	mov	r8, r0
	cmp	r6, r9
	mov	r0, r6
	sub	r7, r6, #36
	bne	.L8913
	mov	r1, r8
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	_raw_spin_unlock_irqrestore
.L8920:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L8919:
	ldr	r3, .L8921
	movw	r1, #:lower16:.LC233
	str	r2, [sp]
	movt	r1, #:upper16:.LC233
	sub	r0, r0, #24
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L8903
.L8922:
	.align	2
.L8921:
	.word	.LANCHOR5-2088
	.fnend
	.size	conn_gadget_function_unbind, .-conn_gadget_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_unbind, %function
rndis_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LANCHOR4
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r5, #:lower16:__stack_chk_guard
	movt	r0, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	movt	r5, #:upper16:__stack_chk_guard
	str	lr, [sp, #12]
	ldrh	r2, [r0, #18]
	.pad #24
	sub	sp, sp, #24
	ldr	r3, [r5]
	mov	r4, r1
	ldr	r6, [r1, #164]
	tst	r2, #4
	str	r3, [sp, #20]
	bne	.L8937
.L8924:
	cmp	r6, #0
	movwgt	r3, #:lower16:.LANCHOR1
	movtgt	r3, #:upper16:.LANCHOR1
	bgt	.L8925
	rsb	r6, r6, r6, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r6, r3, r6, lsl #2
	mov	r2, #0
	strb	r2, [r6, #3681]
.L8925:
	ldrb	r2, [r3, #3740]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L8926
	mov	r6, #0
	movw	r1, #:lower16:.LC596
	movt	r1, #:upper16:.LC596
	mov	r2, r6
	mov	r0, sp
	strb	r6, [r3, #3740]
	bl	sprintf
	mov	r0, sp
	mov	r1, r6
	bl	remove_proc_entry
.L8926:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #172]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r4
	bl	kfree
	ldr	r2, [sp, #20]
	ldr	r3, [r5]
	cmp	r2, r3
	bne	.L8938
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8937:
	movw	r1, #:lower16:.LC267
	ldr	r2, .L8939
	movt	r1, #:upper16:.LC267
	bl	__dynamic_pr_debug
	b	.L8924
.L8938:
	bl	__stack_chk_fail
.L8940:
	.align	2
.L8939:
	.word	.LANCHOR5-2060
	.fnend
	.size	rndis_unbind, .-rndis_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_usb_unbind, %function
android_usb_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r2, .L8966
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	str	r8, [sp, #16]
	ldr	r3, [r7, #3308]
	str	lr, [sp, #20]
	cmp	r3, r2
	sub	r4, r3, #520
	bne	.L8944
	b	.L8942
.L8964:
	ldr	r3, [r4, #520]
	cmp	r3, r2
	sub	r4, r3, #520
	beq	.L8942
.L8944:
	ldr	r3, [r3, #-512]
	cmp	r0, r3
	bne	.L8964
.L8942:
	movw	r0, #:lower16:.LC780
	ldr	r1, .L8966+4
	movt	r0, #:upper16:.LC780
	bl	printk
	mov	r3, #0
	mov	r2, #48
	add	r0, r4, #180
	strb	r2, [r7, #2220]
	strb	r3, [r7, #2508]
	strb	r3, [r7, #2764]
	bl	cancel_work_sync
	ldr	r6, [r4, #4]
	sub	r6, r6, #4
.L8945:
	ldr	r4, [r6, #4]!
	cmp	r4, #0
	beq	.L8965
.L8949:
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L8945
	ldr	r1, [r3, #288]
	ldr	r0, [r7, #3644]
	bl	device_destroy
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #28]
	cmp	r3, #0
	beq	.L8947
	mov	r0, r4
	blx	r3
.L8947:
	ldr	r5, [r4, #16]
	cmp	r5, #0
	beq	.L8945
	ldr	r1, [r5]
	add	r5, r5, #4
	cmp	r1, #0
	beq	.L8945
.L8948:
	ldr	r0, [r4, #8]
	bl	device_remove_file
	ldr	r1, [r5], #4
	cmp	r1, #0
	bne	.L8948
	ldr	r4, [r6, #4]!
	cmp	r4, #0
	bne	.L8949
.L8965:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8967:
	.align	2
.L8966:
	.word	.LANCHOR1+3308
	.word	.LANCHOR5-2040
	.fnend
	.size	android_usb_unbind, .-android_usb_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_ioctl, %function
conn_gadget_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r3, #29441
	ubfx	r4, r1, #8, #8
	movw	ip, #29442
	strd	r6, [sp, #8]
	movt	r3, 32772
	str	lr, [sp, #16]
	mov	lr, #29440
	.pad #44
	sub	sp, sp, #44
	movt	ip, 32772
	mov	r0, #0
	movt	lr, 32772
	cmp	r4, #115
	str	lr, [sp, #4]
	str	r3, [sp, #8]
	str	ip, [sp, #12]
	str	r0, [sp, #16]
	bne	.L9009
	mov	r5, r2
	uxtb	r2, r1
	cmp	r2, #2
	bhi	.L9010
	ubfx	r2, r1, #16, #14
	cmp	r2, #0
	beq	.L9011
	cmp	r1, #0
	bge	.L9012
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r4, [r2, #2484]
	cmp	r4, #0
	beq	.L9013
	cmp	r1, r3
	beq	.L8975
	cmp	r1, ip
	beq	.L8976
	cmp	r1, lr
	movne	r2, r0
	beq	.L9014
.L8968:
	mov	r0, r2
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L8976:
	ldr	r2, [r4, #100]
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	cmp	r2, #0
	movne	r2, #1
	moveq	r2, #2
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r5, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	str	r2, [sp, #20]
	movne	r2, #4
	beq	.L9015
.L8989:
	movw	r0, #:lower16:.LC787
	ldr	r1, .L9019
	movt	r0, #:upper16:.LC787
	bl	printk
	movw	r0, #:lower16:.LC789
	mvn	r2, #13
	ldr	r1, .L9019+4
	movt	r0, #:upper16:.LC789
	bl	printk
	mvn	r2, #13
	b	.L8968
.L9014:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r5, #16; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	movne	r2, #16
	beq	.L9016
.L8978:
	movw	r0, #:lower16:.LC785
	ldr	r1, .L9019+4
	movt	r0, #:upper16:.LC785
	bl	printk
	mvn	r2, #13
	b	.L8968
.L8975:
	ldr	r2, [r4, #100]
	ldr	r3, [r4, #212]
	cmp	r3, r2
	beq	.L8979
.L9008:
	cmp	r2, #0
	mov	r3, sp
	str	r2, [r4, #212]
	bic	r3, r3, #8128
	moveq	r2, #2
	movne	r2, #1
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	str	r2, [sp, #20]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r5, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	movne	r2, #4
	beq	.L9017
.L8986:
	movw	r0, #:lower16:.LC787
	ldr	r1, .L9019
	movt	r0, #:upper16:.LC787
	bl	printk
	movw	r0, #:lower16:.LC788
	mvn	r2, #13
	ldr	r1, .L9019+4
	movt	r0, #:upper16:.LC788
	bl	printk
	mvn	r2, #13
	b	.L8968
.L8979:
	ldr	r3, [r4, #216]
	cmp	r3, #0
	bne	.L8981
	mov	r2, sp
	str	r3, [sp, #20]
	add	r1, sp, #32
	bic	r6, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r6, r6, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r6, #12]
	add	r7, r4, #200
	str	r0, [sp, #24]
	str	r2, [sp, #28]
	str	r1, [sp, #32]
	str	r1, [sp, #36]
	b	.L8984
.L9018:
	bl	schedule
.L8984:
	mov	r2, #1
	add	r1, sp, #20
	mov	r0, r7
	bl	prepare_to_wait
	ldr	r3, [r4, #100]
	ldr	r2, [r4, #212]
	cmp	r2, r3
	bne	.L8982
	ldr	r3, [r4, #216]
	cmp	r3, #0
	bne	.L8983
	ldr	r3, [r6, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L9018
.L8982:
	add	r1, sp, #20
	mov	r0, r7
	bl	finish_wait
	ldr	r2, [r4, #100]
	b	.L9008
.L9015:
	mov	r2, #4
	mov	r0, r5
	add	r1, sp, #20
	bl	__copy_to_user
	subs	r2, r0, #0
	beq	.L8968
	b	.L8989
.L9016:
	mov	r2, #16
	mov	r0, r5
	add	r1, sp, #4
	bl	__copy_to_user
	subs	r2, r0, #0
	beq	.L8968
	b	.L8978
.L9017:
	mov	r2, #4
	mov	r0, r5
	add	r1, sp, #20
	bl	__copy_to_user
	subs	r2, r0, #0
	beq	.L8968
	b	.L8986
.L8983:
	add	r1, sp, #20
	mov	r0, r7
	bl	finish_wait
	ldr	r3, [r4, #100]
	str	r3, [r4, #212]
.L8981:
	movw	r0, #:lower16:.LC786
	ldr	r1, .L9019+4
	movt	r0, #:upper16:.LC786
	bl	printk
	mvn	r2, #3
	b	.L8968
.L9009:
	movw	r0, #:lower16:.LC781
	mov	r2, r4
	ldr	r1, .L9019+4
	movt	r0, #:upper16:.LC781
	bl	printk
	mvn	r2, #21
	b	.L8968
.L9013:
	movw	r0, #:lower16:.LC425
	ldr	r1, .L9019+4
	movt	r0, #:upper16:.LC425
	bl	printk
	mvn	r2, #18
	b	.L8968
.L9012:
	movw	r0, #:lower16:.LC784
	ldr	r1, .L9019+4
	movt	r0, #:upper16:.LC784
	bl	printk
	mvn	r2, #21
	b	.L8968
.L9011:
	movw	r0, #:lower16:.LC783
	ldr	r1, .L9019+4
	movt	r0, #:upper16:.LC783
	bl	printk
	mvn	r2, #21
	b	.L8968
.L9010:
	movw	r0, #:lower16:.LC782
	ldr	r1, .L9019+4
	movt	r0, #:upper16:.LC782
	bl	printk
	mvn	r2, #24
	b	.L8968
.L9020:
	.align	2
.L9019:
	.word	.LANCHOR5-2000
	.word	.LANCHOR5-2020
	.fnend
	.size	conn_gadget_ioctl, .-conn_gadget_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rx_fill, %function
rx_fill:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	add	r3, r0, #28
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, r3
	strd	r8, [sp, #16]
	add	r9, r0, #16
	strd	r10, [sp, #24]
	mov	r0, r9
	mov	r10, r1
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	str	r3, [sp, #16]
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r6, #28]
	mov	r4, r0
	cmp	r7, r5
	beq	.L9022
	movw	r3, #:lower16:.LANCHOR0
	mov	r8, #0
	movt	r3, #:upper16:.LANCHOR0
	mov	fp, r10
	str	r3, [sp, #20]
	b	.L9039
.L9072:
	ldr	r3, [r3, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L9046
	ldr	r3, [sp, #20]
	ldr	r3, [r3, #500]
	lsl	r3, r3, #1
	cmp	r3, r8
	blt	.L9022
.L9073:
	mov	r0, r5
	sub	r10, r5, #36
	bl	__list_del_entry
	mov	r1, r4
	mov	r0, r9
	str	r5, [r5]
	str	r5, [r5, #4]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L9068
	ldr	r7, [r3, #92]
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L9067
	ldmib	r6, {r2, ip}
	ldrh	r3, [r7, #20]
	ldr	r1, [r6, #72]
	ldr	r0, [r2, #100]
	ldr	r4, [ip, #356]
	cmp	r1, #0
	add	r4, r4, r0
	add	r4, r4, #33
	add	r4, r4, r3
	udiv	r0, r4, r3
	mls	r3, r3, r0, r4
	sub	r4, r4, r3
	ldrb	r3, [r2, #104]	@ zero_extendqisi2
	mulne	r4, r1, r4
	cmp	r3, #0
	beq	.L9028
	ldr	r3, [r2, #108]
	cmp	r4, r3
	movcc	r4, r3
.L9028:
	movw	r0, #:lower16:.LANCHOR4
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, #42]
	tst	r3, #4
	bne	.L9069
.L9029:
	mvn	r3, #0
	mov	r2, #0
	mov	r1, fp
	add	r0, r4, #2
	bl	__alloc_skb
	subs	r3, r0, #0
	beq	.L9030
	ldr	lr, [r3, #160]
	mov	r1, r10
	mov	r0, r7
	ldr	ip, [r3, #172]
	mov	r2, fp
	str	r3, [sp, #12]
	add	lr, lr, #2
	add	ip, ip, #2
	str	lr, [r3, #160]
	str	ip, [r3, #172]
	str	ip, [r5, #-36]
	str	r4, [r5, #-32]
	str	r3, [r5, #-4]
	ldr	ip, [r7, #8]
	ldr	r4, [ip, #16]
	blx	r4
	cmn	r0, #12
	mov	r4, r0
	ldr	r3, [sp, #12]
	beq	.L9070
	cmp	r0, #0
	bne	.L9071
.L9035:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #16]
	mov	r4, r0
	ldr	r5, [r6, #28]
	cmp	r3, r5
	beq	.L9022
.L9039:
	ldr	r3, [r6, #12]
	add	r8, r8, #1
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bhi	.L9072
.L9046:
	mov	r3, #2
	cmp	r3, r8
	bge	.L9073
.L9022:
	mov	r1, r4
	mov	r0, r9
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L9070:
	add	r4, r6, #120
	mov	r0, #0
	mov	r1, r4
	mov	fp, r3
	bl	_test_and_set_bit
	cmp	r0, #0
	mov	r7, r4
	bne	.L9041
	movw	r1, #:lower16:system_wq
	add	r2, r6, #88
	movt	r1, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r1]
	bl	queue_work_on
	cmp	r0, #0
	bne	.L9041
.L9044:
	movw	r0, #:lower16:.LC673
	mov	r2, #0
	ldr	r1, [r6, #8]
	movt	r0, #:upper16:.LC673
	bl	printk
	cmp	fp, #0
	bne	.L9041
.L9025:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r4, r0
	ldr	r2, [r6, #28]
	mov	r0, r5
	ldr	r1, [sp, #16]
	bl	__list_add
	mov	r1, r4
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r1, r7
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	beq	.L9074
.L9021:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9068:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	add	r7, r6, #120
	b	.L9025
.L9071:
	mov	r0, r3
	bl	dev_kfree_skb_any
	cmp	r4, #0
	bge	.L9035
.L9067:
	add	r4, r6, #120
	b	.L9034
.L9041:
	mov	r0, fp
	bl	dev_kfree_skb_any
.L9034:
	mov	r7, r4
	b	.L9025
.L9069:
	ldr	r3, .L9075
	movw	r1, #:lower16:.LC790
	str	r4, [sp]
	movt	r1, #:upper16:.LC790
	add	r0, r0, #24
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L9029
.L9030:
	add	r4, r6, #120
	mov	fp, r3
	mov	r1, r4
	mov	r7, r4
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L9025
	movw	r1, #:lower16:system_wq
	add	r2, r6, #88
	movt	r1, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r1]
	bl	queue_work_on
	cmp	r0, #0
	bne	.L9025
	b	.L9044
.L9074:
	movw	r3, #:lower16:system_wq
	add	r2, r6, #88
	movt	r3, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r3]
	bl	queue_work_on
	subs	r2, r0, #0
	bne	.L9021
	ldr	r1, [r6, #8]
	movw	r0, #:lower16:.LC673
	movt	r0, #:upper16:.LC673
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L9076:
	.align	2
.L9075:
	.word	.LANCHOR5-1960
	.fnend
	.size	rx_fill, .-rx_fill
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_work, %function
eth_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r0, #0
	add	r1, r4, #32
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L9077
	ldr	r3, [r4, #-80]
	ldr	r3, [r3, #164]
	tst	r3, #1
	bne	.L9086
.L9077:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9086:
	sub	r5, r4, #88
	ldr	r6, [sp, #8]
	mov	r1, #208
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	rx_fill
	.fnend
	.size	eth_work, .-eth_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	process_rx_w, %function
process_rx_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-100]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LC791
	mov	r6, #0
	strd	r10, [sp, #24]
	ldr	r10, .L9115
	movt	r7, #:upper16:.LC791
	strd	r8, [sp, #16]
	sub	r8, r0, #52
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	sub	r9, r10, #12
.L9090:
	mov	r0, r8
	bl	skb_dequeue
	subs	r5, r0, #0
	beq	.L9113
.L9099:
	cmp	r6, #0
	blt	.L9091
	ldr	fp, [r5, #80]
	cmp	fp, #13
	bls	.L9092
	movw	r3, #1514
	cmp	fp, r3
	bls	.L9094
	ldr	r3, [r4, #-100]
	mov	r1, r7
	ldr	r0, [r3]
	bl	strcmp
	cmp	r0, #0
	bne	.L9096
	ldr	r3, [r4, #-96]
	ldr	r3, [r3, #356]
	add	r3, r3, #14
	cmp	fp, r3
	bls	.L9097
.L9095:
	movw	r0, #:lower16:.LC792
	mov	r2, fp
	movt	r0, #:upper16:.LC792
	mov	r1, r9
	bl	printk
.L9096:
	ldr	r2, [r4, #-96]
	movw	r0, #:lower16:.LC794
	sub	r1, r10, #12
	movt	r0, #:upper16:.LC794
	ldr	r3, [r2, #248]
	add	r3, r3, #1
	str	r3, [r2, #248]
	ldr	r2, [r4, #-96]
	ldr	r3, [r2, #272]
	add	r3, r3, #1
	str	r3, [r2, #272]
	ldr	r2, [r5, #80]
	bl	printk
	mov	r0, r5
	bl	dev_kfree_skb_any
	mov	r0, r8
	bl	skb_dequeue
	subs	r5, r0, #0
	bne	.L9099
.L9113:
	ldr	r3, [r4, #-96]
	ldr	r3, [r3, #164]
	tst	r3, #1
	bne	.L9114
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9097:
	movw	r0, #:lower16:.LC793
	mov	r2, fp
	movt	r0, #:upper16:.LC793
	mov	r1, r9
	bl	printk
.L9094:
	ldr	r1, [r4, #-96]
	mov	r0, r5
	bl	eth_type_trans
	strh	r0, [r5, #102]	@ movhi
	ldr	r2, [r4, #-96]
	mov	r0, r5
	ldr	r3, [r2, #232]
	add	r3, r3, #1
	str	r3, [r2, #232]
	ldr	r2, [r4, #-96]
	ldr	r1, [r5, #80]
	ldr	r3, [r2, #240]
	add	r3, r3, r1
	str	r3, [r2, #240]
	bl	netif_rx_ni
	mov	r6, r0
	b	.L9090
.L9091:
	ldr	r3, [r4, #-100]
	mov	r1, r7
	ldr	r0, [r3]
	bl	strcmp
	cmp	r0, #0
	ldreq	fp, [r5, #80]
	bne	.L9096
	b	.L9095
.L9092:
	ldr	r3, [r4, #-100]
	mov	r1, r7
	ldr	r0, [r3]
	bl	strcmp
	cmp	r0, #0
	beq	.L9095
	b	.L9096
.L9114:
	sub	r0, r4, #104
	mov	r1, #208
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	rx_fill
.L9116:
	.align	2
.L9115:
	.word	.LANCHOR5-1936
	.fnend
	.size	process_rx_w, .-process_rx_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_open, %function
eth_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	add	r6, r0, #1152
	str	lr, [sp, #12]
	ldr	r3, [r0, #1160]
	ldr	r5, [r3, #164]
	ubfx	r5, r5, #2, #1
	cmp	r5, #0
	beq	.L9118
.L9119:
	mov	r0, r6
	bl	_raw_spin_lock_irq
	ldr	r0, [r4, #1156]
	cmp	r0, #0
	beq	.L9121
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L9121
	blx	r3
.L9121:
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9118:
	mov	r1, #208
	mov	r0, r6
	bl	rx_fill
	ldr	r3, [r4, #1160]
	mov	r0, r5
	str	r5, [r4, #1188]
	ldr	r5, [r3, #576]
	add	r1, r5, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L9119
	ldr	r0, [r5, #4]
	bl	__netif_schedule
	b	.L9119
	.fnend
	.size	eth_open, .-eth_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	terminal_version_store, %function
terminal_version_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r1, #:lower16:.LC795
	mov	r5, r2
	str	r6, [sp, #8]
	mov	r0, r2
	movt	r1, #:upper16:.LC795
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	mov	r6, r3
	add	r2, sp, #4
	movw	r4, #:lower16:.LANCHOR1
	bl	sscanf
	ldr	ip, [sp, #4]
	movw	r3, #3660
	movt	r4, #:upper16:.LANCHOR1
	movw	r0, #:lower16:.LC81
	mov	r2, r5
	ldr	r1, .L9141
	movt	r0, #:upper16:.LC81
	strh	ip, [r4, r3]	@ movhi
	bl	printk
	ldr	r5, [sp, #4]
	cmp	r5, #0
	bne	.L9139
	ldrb	r3, [r4, #3636]	@ zero_extendqisi2
	cmp	r3, #0
	strbeq	r3, [r4, #3636]
	bne	.L9140
.L9137:
	mov	r3, #0
	movw	r1, #3660
	movw	r2, #3662
	strh	r3, [r4, r1]	@ movhi
	strh	r3, [r4, r2]	@ movhi
.L9135:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9139:
	ldrb	r2, [r4, #3636]	@ zero_extendqisi2
	cmp	r2, #0
	movne	r3, #1
	strbne	r3, [r4, #3636]
	bne	.L9135
	movw	r0, #:lower16:.LC796
	ldr	r1, .L9141+4
	mov	r3, #1
	movt	r0, #:upper16:.LC796
	bl	printk
	movw	r3, #:lower16:system_wq
	mov	ip, #1
	ldr	r2, [r4, #3612]
	movt	r3, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r3]
	strb	ip, [r4, #3636]
	bl	queue_work_on
	b	.L9135
.L9140:
	movw	r0, #:lower16:.LC796
	mov	r3, r5
	ldr	r1, .L9141+4
	mov	r2, #1
	movt	r0, #:upper16:.LC796
	bl	printk
	movw	r3, #:lower16:system_wq
	ldr	r2, [r4, #3612]
	mov	r0, #4
	movt	r3, #:upper16:system_wq
	strb	r5, [r4, #3636]
	ldr	r1, [r3]
	bl	queue_work_on
	b	.L9137
.L9142:
	.align	2
.L9141:
	.word	.LANCHOR5-1932
	.word	.LANCHOR5-1908
	.fnend
	.size	terminal_version_store, .-terminal_version_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_unbind, %function
rndis_qc_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR4
	movw	r7, #:lower16:__stack_chk_guard
	movt	r6, #:upper16:.LANCHOR4
	str	r8, [sp, #16]
	movt	r7, #:upper16:__stack_chk_guard
	str	lr, [sp, #20]
	ldrh	r2, [r6, #66]
	.pad #24
	sub	sp, sp, #24
	ldr	r3, [r7]
	mov	r8, r0
	tst	r2, #4
	str	r3, [sp, #20]
	bne	.L9168
.L9144:
	ldr	r0, .L9173
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L9169
.L9145:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3752]
	bl	kfree
	ldr	r0, [r4, #3744]
	mov	r3, #0
	str	r3, [r4, #3752]
	cmp	r0, r3
	beq	.L9146
	bl	destroy_workqueue
.L9146:
	ldrh	r3, [r6, #18]
	mov	r2, #0
	ldr	r6, [r5, #144]
	str	r2, [r4, #3744]
	tst	r3, #4
	bne	.L9170
.L9147:
	cmp	r6, #0
	bgt	.L9148
	rsb	r6, r6, r6, lsl #4
	mov	r3, #0
	add	r6, r4, r6, lsl #2
	strb	r3, [r6, #3681]
.L9148:
	ldrb	r3, [r4, #3740]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L9171
.L9149:
	ldr	r3, [r8, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L9150
	ldr	r0, [r5, #8]
	bl	kfree
.L9150:
	ldr	r0, [r5, #16]
	bl	kfree
	ldr	r3, [r5, #160]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r5, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, .L9173+4
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r0, r5
	bl	kfree
	mov	r3, #0
	mov	r1, r6
	ldr	r0, .L9173+4
	str	r3, [r4, #2496]
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [sp, #20]
	ldr	r3, [r7]
	cmp	r2, r3
	bne	.L9172
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9171:
	mov	r6, #0
	movw	r1, #:lower16:.LC596
	mov	r2, r6
	movt	r1, #:upper16:.LC596
	mov	r0, sp
	strb	r6, [r4, #3740]
	bl	sprintf
	mov	r0, sp
	mov	r1, r6
	bl	remove_proc_entry
	b	.L9149
.L9169:
	movw	r1, #:lower16:.LC717
	ldr	r2, .L9173+8
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC717
	bl	__dynamic_pr_debug
	b	.L9145
.L9170:
	movw	r1, #:lower16:.LC267
	movw	r0, #:lower16:.LANCHOR4
	ldr	r2, .L9173+12
	movt	r1, #:upper16:.LC267
	movt	r0, #:upper16:.LANCHOR4
	bl	__dynamic_pr_debug
	b	.L9147
.L9168:
	movw	r1, #:lower16:.LC797
	ldr	r2, .L9173+16
	add	r0, r6, #48
	movt	r1, #:upper16:.LC797
	bl	__dynamic_pr_debug
	b	.L9144
.L9172:
	bl	__stack_chk_fail
.L9174:
	.align	2
.L9173:
	.word	.LANCHOR4-820
	.word	.LANCHOR1+2492
	.word	.LANCHOR5-2404
	.word	.LANCHOR5-2060
	.word	.LANCHOR5-1892
	.fnend
	.size	rndis_qc_unbind, .-rndis_qc_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_store_file, %function
fsg_store_file:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	mov	r5, r3
	strd	r6, [sp, #8]
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	ldrb	r3, [r4, #-24]	@ zero_extendqisi2
	mov	r6, r0
	tst	r3, #16
	beq	.L9176
	ldr	r3, [r4, #-48]
	cmp	r3, #0
	beq	.L9176
	movw	r0, #:lower16:.LANCHOR4
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, #90]
	tst	r3, #4
	mvneq	r7, #15
	bne	.L9201
.L9175:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9176:
	cmp	r5, #0
	beq	.L9178
	sub	r3, r5, #1
	ldrb	r2, [r7, r3]	@ zero_extendqisi2
	cmp	r2, #10
	beq	.L9202
	mov	r0, r6
	bl	down_write
	ldr	r0, [r4, #-48]
	cmp	r0, #0
	beq	.L9181
.L9180:
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r8, [r3, #114]
	ubfx	r8, r8, #2, #1
	cmp	r8, #0
	bne	.L9187
	bl	fput
	mov	r3, #14848
	str	r8, [r4, #-48]
	movt	r3, 2
	str	r3, [r4, #-12]
.L9181:
	ldrb	r3, [r7]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L9203
.L9183:
	mov	r0, r6
	bl	up_write
.L9182:
	mov	r7, r5
	b	.L9175
.L9178:
	mov	r0, r6
	bl	down_write
	ldr	r0, [r4, #-48]
	cmp	r0, #0
	beq	.L9183
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, #114]
	tst	r3, #4
	bne	.L9187
	bl	fput
	mov	r3, #14848
	str	r5, [r4, #-48]
	movt	r3, 2
	str	r3, [r4, #-12]
	b	.L9183
.L9203:
	mov	r1, r7
	sub	r0, r4, #48
	bl	fsg_lun_open
	subs	r7, r0, #0
	bne	.L9184
	mov	r3, #10240
	mov	r0, r6
	movt	r3, 6
	str	r3, [r4, #-12]
	bl	up_write
	b	.L9182
.L9202:
	mov	r2, #0
	mov	r0, r6
	strb	r2, [r7, r3]
	bl	down_write
	ldr	r0, [r4, #-48]
	cmp	r0, #0
	bne	.L9180
	ldrb	r3, [r7]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L9183
	b	.L9203
.L9187:
	movw	r2, #:lower16:.LC799
	mov	r1, r4
	ldr	r0, .L9204
	movt	r2, #:upper16:.LC799
	bl	__dynamic_dev_dbg
	ldr	r0, [r4, #-48]
	bl	fput
	mov	r3, #14848
	mov	r2, #0
	movt	r3, 2
	cmp	r5, #0
	str	r2, [r4, #-48]
	str	r3, [r4, #-12]
	bne	.L9181
	b	.L9183
.L9184:
	mov	r0, r6
	bl	up_write
	cmp	r7, #0
	blt	.L9175
	b	.L9182
.L9201:
	movw	r2, #:lower16:.LC798
	mov	r1, r4
	add	r0, r0, #72
	movt	r2, #:upper16:.LC798
	bl	__dynamic_dev_dbg
	mvn	r7, #15
	b	.L9175
.L9205:
	.align	2
.L9204:
	.word	.LANCHOR4+96
	.fnend
	.size	fsg_store_file, .-fsg_store_file
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_function_unbind, %function
acc_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	add	r7, r1, #88
	strd	r8, [sp, #16]
	add	r9, r1, #1648
	str	r10, [sp, #24]
	add	r9, r9, #8
	str	lr, [sp, #28]
	b	.L9207
.L9208:
	bl	list_del
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L9209
	ldr	r8, [r4, #92]
	ldr	r0, [r5, #-36]
	bl	kfree
	mov	r1, r6
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L9207:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #1656]
	mov	r8, r0
	cmp	r9, r5
	mov	r0, r5
	sub	r6, r5, #36
	bne	.L9208
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L9209:
	ldr	r5, [r4, #1688]
	cmp	r5, #0
	beq	.L9211
	ldr	r6, [r4, #96]
	ldr	r0, [r5]
	bl	kfree
	mov	r1, r5
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L9211:
	ldr	r5, [r4, #1692]
	cmp	r5, #0
	beq	.L9212
	ldr	r6, [r4, #96]
	ldr	r0, [r5]
	bl	kfree
	mov	r1, r5
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L9212:
	ldr	r0, .L9226
	add	r9, r4, #1760
	bl	hid_unregister_driver
	mov	r0, r7
	add	r9, r9, #8
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #1768]
	mov	r8, r0
	cmp	r6, r9
	ldr	r5, [r6]
	beq	.L9213
	add	r10, r4, #1776
	add	r10, r10, #8
	b	.L9214
.L9217:
	mov	r5, r3
.L9214:
	mov	r0, r6
	bl	list_del
	mov	r0, r6
	mov	r1, r10
	ldr	r2, [r4, #1784]
	bl	__list_add
	cmp	r9, r5
	mov	r6, r5
	ldr	r3, [r5]
	bne	.L9217
.L9213:
	mov	r9, r4
	ldr	r6, [r9, #1776]!
	cmp	r6, r9
	ldr	r5, [r6]
	beq	.L9215
	add	r10, r9, #8
	b	.L9216
.L9218:
	mov	r5, r3
.L9216:
	mov	r0, r6
	bl	list_del
	mov	r0, r6
	mov	r1, r10
	ldr	r2, [r4, #1784]
	bl	__list_add
	cmp	r5, r9
	mov	r6, r5
	ldr	r3, [r5]
	bne	.L9218
.L9215:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:system_wq
	add	r2, r4, #1744
	ldrd	r4, [sp]
	movt	r3, #:upper16:system_wq
	ldrd	r6, [sp, #8]
	add	r2, r2, #8
	ldrd	r8, [sp, #16]
	mov	r0, #4
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, [r3]
	b	queue_work_on
.L9227:
	.align	2
.L9226:
	.word	.LANCHOR0+1536
	.fnend
	.size	acc_function_unbind, .-acc_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_free_buffers.part.50, %function
ghsuart_data_free_buffers.part.50:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #72
	mov	r0, r6
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r8, [r4, #8]
	mov	r7, r0
	cmp	r8, #0
	beq	.L9237
	ldr	r5, [r4, #48]
	add	r9, r4, #48
	cmp	r9, r5
	beq	.L9230
.L9231:
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del
	ldr	r3, [r8, #8]
	mov	r1, r5
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #48]
	cmp	r9, r5
	bne	.L9231
.L9230:
	ldr	r3, [r4, #56]
	add	r5, r4, #56
	cmp	r5, r3
	beq	.L9232
	mov	r8, #0
	b	.L9233
.L9250:
	ldr	r2, [r4, #64]
	sub	r2, r2, #1
	str	r2, [r4, #64]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #56]
	cmp	r3, r5
	beq	.L9232
.L9233:
	subs	r0, r3, #0
	bne	.L9250
.L9232:
	mov	r1, r7
	mov	r0, r6
	add	r6, r4, #104
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r8, [r4, #12]
	mov	r7, r0
	cmp	r8, #0
	beq	.L9237
	ldr	r5, [r4, #80]
	add	r9, r4, #80
	cmp	r9, r5
	beq	.L9235
.L9236:
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del
	ldr	r3, [r8, #8]
	mov	r1, r5
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #80]
	cmp	r9, r5
	bne	.L9236
.L9235:
	ldr	r3, [r4, #88]
	add	r5, r4, #88
	cmp	r3, r5
	beq	.L9237
	mov	r8, #0
	b	.L9238
.L9251:
	ldr	r2, [r4, #96]
	sub	r2, r2, #1
	str	r2, [r4, #96]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #88]
	cmp	r3, r5
	beq	.L9237
.L9238:
	subs	r0, r3, #0
	bne	.L9251
.L9237:
	mov	r1, r7
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	ghsuart_data_free_buffers.part.50, .-ghsuart_data_free_buffers.part.50
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_remove, %function
ghsuart_data_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	ldr	r5, .L9289
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #138]
	tst	r2, #4
	bne	.L9285
.L9253:
	movw	r3, #:lower16:.LANCHOR1
	ldr	r2, [r4, #4]
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #2028]
	cmp	r2, r1
	bcs	.L9287
	mov	r1, #84
	mla	r2, r1, r2, r3
	ldr	r4, [r2, #2032]
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L9256
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L9256
	blx	r3
.L9256:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L9257
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L9257
	blx	r3
.L9257:
	cmp	r4, #0
	beq	.L9258
	mov	r0, r4
	bl	ghsuart_data_free_buffers.part.50
.L9258:
	ldr	r6, [r4, #16]
	cmp	r6, #0
	beq	.L9288
.L9260:
	movw	r0, #:lower16:.LC800
	ldr	r2, [r4, #180]
	sub	r1, r5, #4
	add	r4, r4, #188
	movt	r0, #:upper16:.LC800
	bl	printk
	mov	r1, r4
	mov	r0, #1
	bl	_clear_bit
	mov	r1, r4
	mov	r0, #0
	bl	_clear_bit
	mov	r0, #2
	mov	r1, r4
	bl	_clear_bit
	mov	r0, #0
.L9252:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9288:
	add	r8, r4, #20
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r4, #24]
	mov	r1, r0
	str	r6, [r4, #200]
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L9260
	ldr	r3, [r7, #120]
	cmp	r3, #0
	beq	.L9260
	mov	r0, r7
	blx	r3
	b	.L9260
.L9285:
	movw	r1, #:lower16:.LC177
	add	r0, r3, #120
	ldr	r3, [r4]
	movt	r1, #:upper16:.LC177
	sub	r2, r5, #4
	bl	__dynamic_pr_debug
	b	.L9253
.L9287:
	movw	r0, #:lower16:.LC179
	sub	r1, r5, #4
	movt	r0, #:upper16:.LC179
	bl	printk
	mvn	r0, #21
	b	.L9252
.L9290:
	.align	2
.L9289:
	.word	.LANCHOR5-1872
	.fnend
	.size	ghsuart_data_remove, .-ghsuart_data_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_free_buffers.part.49, %function
ghsic_data_free_buffers.part.49:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #48
	mov	r0, r6
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r8, [r4, #8]
	mov	r7, r0
	cmp	r8, #0
	beq	.L9300
	ldr	r5, [r4, #24]
	add	r9, r4, #24
	cmp	r9, r5
	beq	.L9293
.L9294:
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del
	ldr	r3, [r8, #8]
	mov	r1, r5
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #24]
	cmp	r9, r5
	bne	.L9294
.L9293:
	ldr	r3, [r4, #32]
	add	r5, r4, #32
	cmp	r5, r3
	beq	.L9295
	mov	r8, #0
	b	.L9296
.L9313:
	ldr	r2, [r4, #40]
	sub	r2, r2, #1
	str	r2, [r4, #40]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #32]
	cmp	r3, r5
	beq	.L9295
.L9296:
	subs	r0, r3, #0
	bne	.L9313
.L9295:
	mov	r1, r7
	mov	r0, r6
	add	r6, r4, #80
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r8, [r4, #12]
	mov	r7, r0
	cmp	r8, #0
	beq	.L9300
	ldr	r5, [r4, #56]
	add	r9, r4, #56
	cmp	r9, r5
	beq	.L9298
.L9299:
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del
	ldr	r3, [r8, #8]
	mov	r1, r5
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #56]
	cmp	r9, r5
	bne	.L9299
.L9298:
	ldr	r3, [r4, #64]
	add	r5, r4, #64
	cmp	r3, r5
	beq	.L9300
	mov	r8, #0
	b	.L9301
.L9314:
	ldr	r2, [r4, #72]
	sub	r2, r2, #1
	str	r2, [r4, #72]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #64]
	cmp	r3, r5
	beq	.L9300
.L9301:
	subs	r0, r3, #0
	bne	.L9314
.L9300:
	mov	r1, r7
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	ghsic_data_free_buffers.part.49, .-ghsic_data_free_buffers.part.49
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_remove, %function
ghsic_data_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR4
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	ip, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	ldrh	r3, [ip, #162]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0]
	tst	r3, #4
	bne	.L9364
.L9316:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r6, [r5, #1436]
	cmp	r6, #0
	beq	.L9317
	ldr	r4, [r5, #1440]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L9318
	cmp	r6, #1
	bls	.L9317
	ldr	r4, [r5, #1544]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L9318
	cmp	r6, #2
	beq	.L9317
	ldr	r4, [r5, #1648]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L9318
	cmp	r6, #3
	beq	.L9317
	ldr	r4, [r5, #1752]
	mov	r1, r7
	mov	r2, #20
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L9318
.L9317:
	movw	r0, #:lower16:.LC179
	mvn	r2, #21
	ldr	r1, .L9365
	movt	r0, #:upper16:.LC179
	bl	printk
	mvn	r0, #21
.L9315:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9318:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L9321
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L9321
	blx	r3
.L9321:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L9322
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L9322
	blx	r3
.L9322:
	add	r0, r4, #120
	bl	cancel_work_sync
	cmp	r4, #0
	beq	.L9323
	mov	r0, r4
	bl	ghsic_data_free_buffers.part.49
.L9323:
	add	r0, r4, #88
	add	r4, r4, #180
	bl	cancel_work_sync
	mov	r1, r4
	mov	r0, #0
	bl	_test_and_clear_bit
	mov	r0, #1
	mov	r1, r4
	bl	_clear_bit
	mov	r0, #0
	b	.L9315
.L9364:
	movw	r1, #:lower16:.LC177
	mov	r4, r0
	ldr	r2, .L9365
	mov	r3, r7
	add	r0, ip, #144
	movt	r1, #:upper16:.LC177
	bl	__dynamic_pr_debug
	ldr	r7, [r4]
	b	.L9316
.L9366:
	.align	2
.L9365:
	.word	.LANCHOR5-1856
	.fnend
	.size	ghsic_data_remove, .-ghsic_data_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_setup, %function
mbim_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r1, #4]	@ unaligned
	.pad #28
	sub	sp, sp, #28
	ldr	r10, [r0, #84]
	ldr	r3, [r0, #88]
	str	r2, [sp, #20]
	ldrh	r2, [r1, #2]	@ unaligned
	ldr	r4, [r10, #4]
	cmp	r3, #0
	str	r2, [sp, #16]
	ldrh	r8, [r1, #6]	@ unaligned
	beq	.L9469
	ldrh	r3, [r1]	@ unaligned
	mov	r5, r1
	movw	r1, #8582
	mov	r7, r0
	ldrb	r2, [r5]	@ zero_extendqisi2
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r1
	beq	.L9371
	bls	.L9470
	movw	r1, #41344
	cmp	r3, r1
	beq	.L9376
	bls	.L9471
	movw	r1, #41347
	cmp	r3, r1
	beq	.L9379
	movw	r1, #41349
	cmp	r3, r1
	bne	.L9370
	movw	r6, #:lower16:.LANCHOR4
	movw	r3, #354
	movt	r6, #:upper16:.LANCHOR4
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L9472
.L9393:
	ldr	r3, [sp, #16]
	adds	r3, r3, #0
	movne	r3, #1
	cmp	r8, #3
	orrls	r3, r3, #1
	cmp	r3, #0
	bne	.L9467
	ldrb	r3, [r7, #196]	@ zero_extendqisi2
	ldr	r2, [sp, #20]
	cmp	r3, r2
	bne	.L9467
	ldr	r3, [r7, #224]
	movw	r0, #378
	cmp	r8, #4
	ldr	r2, [r4]
	movle	fp, #0
	movgt	fp, #1
	lsr	r1, r3, #16
	strb	r3, [r2]
	ubfx	r3, r3, #8, #8
	lsr	ip, r1, #8
	strb	r3, [r2, #1]
	strb	r1, [r2, #2]
	strb	ip, [r2, #3]
	ldrh	r3, [r6, r0]
	tst	r3, #4
	moveq	r9, #4
	bne	.L9473
.L9382:
	movw	r3, #546
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L9474
.L9400:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r9, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	bfi	r3, fp, #1, #1
	strb	r3, [r4, #26]
	ldr	r3, [r10]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L9475
.L9367:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9470:
	movw	r1, #8453
	cmp	r3, r1
	beq	.L9373
	movw	r1, #8580
	cmp	r3, r1
	beq	.L9374
	cmp	r3, #8448
	beq	.L9476
.L9370:
	ldr	r1, [sp, #16]
	movw	r0, #:lower16:.LC820
	ldrb	r3, [r5, #1]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC820
	ldr	r4, .L9490
	str	r1, [sp]
	ldr	r1, [sp, #20]
	str	r1, [sp, #4]
	sub	r1, r4, #12
	str	r8, [sp, #8]
	bl	printk
	ldr	r2, [sp, #16]
.L9387:
	ldrb	r3, [r5]	@ zero_extendqisi2
	str	r2, [sp, #4]
	movw	r0, #:lower16:.LC823
	ldrb	ip, [r5, #1]	@ zero_extendqisi2
	sub	r1, r4, #12
	movt	r0, #:upper16:.LC823
	ldr	r2, [sp, #20]
	str	ip, [sp]
	str	r2, [sp, #8]
	mvn	r2, #94
	str	r8, [sp, #12]
	mov	r4, r2
	bl	printk
	b	.L9367
.L9379:
	movw	r6, #:lower16:.LANCHOR4
	movw	r3, #426
	movt	r6, #:upper16:.LANCHOR4
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L9477
.L9396:
	ldr	r3, [sp, #16]
	adds	r2, r3, #0
	movne	r2, #1
	cmp	r8, #1
	orrls	r2, r2, #1
	cmp	r2, #0
	bne	.L9468
	ldrb	r3, [r7, #196]	@ zero_extendqisi2
	ldr	r1, [sp, #20]
	cmp	r3, r1
	bne	.L9467
	ldr	r3, [r7, #200]
	cmp	r8, #2
	movw	r0, #450
	ldr	ip, .L9490+4
	movle	fp, #0
	movgt	fp, #1
	ldr	r1, [r4]
	subs	r3, r3, ip
	movne	r3, #1
	strb	r3, [r1]
	strb	r2, [r1, #1]
	ldrh	r2, [r6, r0]
	tst	r2, #4
	moveq	r9, #2
	beq	.L9382
	movw	r1, #:lower16:.LC816
	ldr	r2, .L9490+8
	mov	r9, #2
	movt	r1, #:upper16:.LC816
	ldr	r0, .L9490+12
	bl	__dynamic_pr_debug
	b	.L9382
.L9374:
	movw	r6, #:lower16:.LANCHOR4
	movw	r3, #474
	movt	r6, #:upper16:.LANCHOR4
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L9478
.L9397:
	cmp	r8, #0
	bne	.L9467
	ldrb	r3, [r7, #196]	@ zero_extendqisi2
	ldr	r2, [sp, #20]
	cmp	r3, r2
	bne	.L9467
	ldr	r3, [sp, #16]
	cmp	r3, #0
	beq	.L9398
	cmp	r3, #1
	bne	.L9405
	movw	r3, #522
	ldr	r2, .L9490+16
	ldrh	r3, [r6, r3]
	str	r2, [r7, #200]
	tst	r3, #4
	beq	.L9405
	movw	r1, #:lower16:.LC819
	ldr	r2, .L9490+8
	mov	r9, r8
	movt	r1, #:upper16:.LC819
	ldr	r0, .L9490+20
	mov	fp, r8
	bl	__dynamic_pr_debug
	b	.L9382
.L9405:
	mov	r9, r8
	mov	fp, r8
	b	.L9382
.L9373:
	movw	r6, #:lower16:.LANCHOR4
	movt	r6, #:upper16:.LANCHOR4
	ldrh	r3, [r6, #186]
	tst	r3, #4
	bne	.L9479
.L9381:
	movw	r3, #:lower16:fmbim_reset_cmd_complete
	str	r7, [r4, #32]
	adds	fp, r8, #0
	movt	r3, #:upper16:fmbim_reset_cmd_complete
	movne	fp, #1
	mov	r9, #0
	str	r3, [r4, #28]
	movw	r3, #546
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L9400
.L9474:
	ldr	r2, [sp, #16]
	movw	r1, #:lower16:.LC821
	ldrb	r3, [r5]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC821
	ldr	r0, .L9490+24
	str	r2, [sp, #4]
	ldr	r2, [sp, #20]
	ldrb	ip, [r5, #1]	@ zero_extendqisi2
	str	r8, [sp, #12]
	str	ip, [sp]
	str	r2, [sp, #8]
	ldr	r2, .L9490+8
	bl	__dynamic_pr_debug
	b	.L9400
.L9476:
	movw	r6, #:lower16:.LANCHOR4
	movt	r6, #:upper16:.LANCHOR4
	ldrh	r3, [r6, #210]
	tst	r3, #4
	bne	.L9480
.L9383:
	ldr	r3, [r4, #4]
	cmp	r8, r3
	bls	.L9384
	ldrh	r2, [r6, #234]
	tst	r2, #4
	bne	.L9481
.L9384:
	movw	r3, #:lower16:fmbim_cmd_complete
	mov	r9, r8
	str	r7, [r4, #32]
	movt	r3, #:upper16:fmbim_cmd_complete
	mov	fp, #0
	str	r3, [r4, #28]
	b	.L9382
.L9471:
	movw	r1, #41217
	cmp	r3, r1
	bne	.L9370
	movw	r6, #:lower16:.LANCHOR4
	movw	r3, #258
	movt	r6, #:upper16:.LANCHOR4
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L9482
.L9385:
	ldr	r3, [sp, #16]
	cmp	r3, #0
	bne	.L9483
	movw	r3, #282
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L9484
.L9388:
	add	r9, r7, #204
	mov	r0, r9
	bl	_raw_spin_lock
	ldr	fp, [r7, #216]!
	cmp	fp, r7
	beq	.L9485
	mov	r0, fp
	sub	r7, fp, #8
	bl	list_del
	mov	r0, r9
	bl	_raw_spin_unlock
	ldmdb	fp, {r1, r9}
	ldr	r0, [r4]
	cmp	r8, r9
	movcc	r9, r8
	mov	r2, r9
	bl	memcpy
	cmp	r7, #0
	beq	.L9390
	ldr	r0, [fp, #-8]
	bl	kfree
	mov	r0, r7
	bl	kfree
.L9390:
	movw	r3, #306
	cmp	r9, r8
	ldrh	r3, [r6, r3]
	movge	fp, #0
	movlt	fp, #1
	tst	r3, #4
	beq	.L9382
	movw	r1, #:lower16:.LC809
	mov	r3, r9
	ldr	r2, .L9490+8
	movt	r1, #:upper16:.LC809
	ldr	r0, .L9490+28
	bl	__dynamic_pr_debug
	b	.L9382
.L9376:
	movw	r6, #:lower16:.LANCHOR4
	movw	r3, #330
	movt	r6, #:upper16:.LANCHOR4
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L9486
.L9391:
	ldr	r3, [sp, #16]
	adds	r3, r3, #0
	movne	r3, #1
	cmp	r8, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L9467
	ldrb	r3, [r7, #196]	@ zero_extendqisi2
	ldr	r2, [sp, #20]
	cmp	r3, r2
	bne	.L9467
	cmp	r8, #28
	ldr	r1, .L9490+32
	movcc	r9, r8
	movcs	r9, #28
	ldr	r0, [r4]
	cmp	r9, r8
	mov	r2, r9
	movcs	fp, #0
	movcc	fp, #1
	bl	memcpy
	b	.L9382
.L9371:
	movw	r6, #:lower16:.LANCHOR4
	movw	r3, #402
	movt	r6, #:upper16:.LANCHOR4
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L9487
.L9394:
	sub	r3, r8, #4
	bic	r3, r3, #4
	uxth	r3, r3
	cmp	r3, #0
	bne	.L9488
	ldr	r3, [sp, #16]
	cmp	r3, #0
	bne	.L9468
	ldrb	r3, [r7, #196]	@ zero_extendqisi2
	ldr	r2, [sp, #20]
	cmp	r3, r2
	bne	.L9467
	movw	r3, #:lower16:mbim_ep0out_complete
	mov	r9, r8
	ldr	fp, [sp, #16]
	movt	r3, #:upper16:mbim_ep0out_complete
	str	r8, [r4, #4]
	str	r3, [r4, #28]
	str	r7, [r4, #32]
	b	.L9382
.L9398:
	movw	r3, #498
	ldr	r2, .L9490+4
	ldrh	r3, [r6, r3]
	str	r2, [r7, #200]
	tst	r3, #4
	bne	.L9489
	ldr	fp, [sp, #16]
	mov	r9, fp
	b	.L9382
.L9473:
	movw	r1, #:lower16:.LC812
	ldr	r2, .L9490+8
	mov	r9, #4
	movt	r1, #:upper16:.LC812
	ldr	r3, [r7, #224]
	ldr	r0, .L9490+36
	bl	__dynamic_pr_debug
	b	.L9382
.L9472:
	movw	r1, #:lower16:.LC811
	ldr	r2, .L9490+8
	add	r0, r6, #336
	movt	r1, #:upper16:.LC811
	bl	__dynamic_pr_debug
	b	.L9393
.L9478:
	movw	r1, #:lower16:.LC817
	ldr	r2, .L9490+8
	add	r0, r6, #456
	movt	r1, #:upper16:.LC817
	bl	__dynamic_pr_debug
	b	.L9397
.L9477:
	movw	r1, #:lower16:.LC815
	ldr	r2, .L9490+8
	add	r0, r6, #408
	movt	r1, #:upper16:.LC815
	bl	__dynamic_pr_debug
	b	.L9396
.L9487:
	movw	r1, #:lower16:.LC813
	ldr	r2, .L9490+8
	add	r0, r6, #384
	movt	r1, #:upper16:.LC813
	bl	__dynamic_pr_debug
	b	.L9394
.L9486:
	movw	r1, #:lower16:.LC810
	ldr	r2, .L9490+8
	add	r0, r6, #312
	movt	r1, #:upper16:.LC810
	bl	__dynamic_pr_debug
	b	.L9391
.L9484:
	ldr	r2, [sp, #16]
	movw	r1, #:lower16:.LC807
	ldrb	r3, [r5]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC807
	ldr	r0, .L9490+40
	str	r2, [sp, #4]
	ldr	r2, [sp, #20]
	ldrb	ip, [r5, #1]	@ zero_extendqisi2
	str	r8, [sp, #12]
	str	ip, [sp]
	str	r2, [sp, #8]
	ldr	r2, .L9490+8
	bl	__dynamic_pr_debug
	b	.L9388
.L9482:
	movw	r1, #:lower16:.LC805
	ldr	r2, .L9490+8
	add	r0, r6, #240
	movt	r1, #:upper16:.LC805
	bl	__dynamic_pr_debug
	b	.L9385
.L9480:
	movw	r1, #:lower16:.LC803
	ldr	r2, .L9490+8
	add	r0, r6, #192
	movt	r1, #:upper16:.LC803
	bl	__dynamic_pr_debug
	b	.L9383
.L9479:
	movw	r1, #:lower16:.LC802
	ldr	r2, .L9490+8
	add	r0, r6, #168
	movt	r1, #:upper16:.LC802
	bl	__dynamic_pr_debug
	b	.L9381
.L9481:
	movw	r1, #:lower16:.LC804
	ldr	r2, .L9490+8
	str	r3, [sp]
	movt	r1, #:upper16:.LC804
	mov	r3, r8
	ldr	r0, .L9490+44
	bl	__dynamic_pr_debug
	b	.L9384
.L9489:
	ldr	fp, [sp, #16]
	movw	r1, #:lower16:.LC818
	ldr	r2, .L9490+8
	movt	r1, #:upper16:.LC818
	ldr	r0, .L9490+48
	mov	r9, fp
	bl	__dynamic_pr_debug
	b	.L9382
.L9469:
	movw	r0, #:lower16:.LC801
	ldr	r1, .L9490+8
	mvn	r4, #106
	movt	r0, #:upper16:.LC801
	bl	printk
	b	.L9367
.L9475:
	movw	r0, #:lower16:.LC822
	ldrb	r3, [r5, #1]	@ zero_extendqisi2
	str	r4, [sp]
	ldr	r1, .L9490+8
	movt	r0, #:upper16:.LC822
	ldrb	r2, [r5]	@ zero_extendqisi2
	bl	printk
	b	.L9367
.L9483:
	ldr	r4, .L9490
	movw	r0, #:lower16:.LC806
	mov	r2, r8
	movt	r0, #:upper16:.LC806
	sub	r1, r4, #12
	bl	printk
	ldr	r2, [sp, #16]
	b	.L9387
.L9467:
	ldr	r4, .L9490
	ldr	r2, [sp, #16]
	b	.L9387
.L9488:
	ldr	r4, .L9490
	movw	r0, #:lower16:.LC814
	mov	r2, r8
	movt	r0, #:upper16:.LC814
	sub	r1, r4, #12
	bl	printk
	ldr	r2, [sp, #16]
	b	.L9387
.L9468:
	ldr	r4, .L9490
	mov	r2, r3
	b	.L9387
.L9485:
	ldr	r4, .L9490
	movw	r0, #:lower16:.LC808
	movt	r0, #:upper16:.LC808
	sub	r1, r4, #12
	bl	printk
	mov	r0, r9
	bl	_raw_spin_unlock
	ldr	r2, [sp, #16]
	b	.L9387
.L9491:
	.align	2
.L9490:
	.word	.LANCHOR5-1824
	.word	.LANCHOR0+1668
	.word	.LANCHOR5-1836
	.word	.LANCHOR4+432
	.word	.LANCHOR0+1712
	.word	.LANCHOR4+504
	.word	.LANCHOR4+528
	.word	.LANCHOR4+288
	.word	.LANCHOR0+196
	.word	.LANCHOR4+360
	.word	.LANCHOR4+264
	.word	.LANCHOR4+216
	.word	.LANCHOR4+480
	.fnend
	.size	mbim_setup, .-mbim_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_write, %function
conn_gadget_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r3, #2484]
	.pad #60
	sub	sp, sp, #60
	ldr	r5, [r0, #124]
	str	r1, [sp, #12]
	str	r2, [sp, #24]
	cmp	r3, #0
	beq	.L9534
	add	r3, r5, #112
	str	r3, [sp, #28]
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r1, r3
	.syntax divided
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r1]
	add	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L9535
	movw	r2, #:lower16:autoremove_wake_function
	mov	r3, #57344
	ldr	r10, [sp, #24]
	movt	r2, #:upper16:autoremove_wake_function
	movt	r3, 65535
	str	r3, [sp, #16]
	str	r2, [sp, #20]
	mov	r2, r3
.L9495:
	cmp	r10, #0
	mov	r3, sp
	and	r9, r3, r2
	beq	.L9536
.L9516:
	ldr	r3, [r5, #104]
	cmp	r3, #0
	bne	.L9500
	add	r6, r5, #88
	add	r7, r5, #120
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #120]
	mov	r8, r0
	cmp	r7, r4
	beq	.L9537
	mov	r0, r4
	sub	r4, r4, #36
	bl	list_del
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, #0
	beq	.L9498
.L9499:
	ldr	r9, [r5, #192]
	mov	r3, sp
	ldr	r2, [sp, #16]
	ldr	r0, [r4]
	cmp	r9, r10
	and	r2, r3, r2
	ldr	r3, [sp, #12]
	ldr	r2, [r2, #8]
	bcs	.L9538
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r3, r9; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L9533
	cmp	r9, #0
	bne	.L9539
.L9512:
	str	r9, [r4, #4]
	ldr	r0, [r5, #92]
	mov	r2, #32
	mov	r1, r4
	ldr	ip, [r0, #8]
	ldr	r8, [ip, #16]
	blx	r8
	cmp	r0, #0
	blt	.L9540
	ldr	r3, [sp, #12]
	sub	r10, r10, r9
	ldr	r2, [sp, #16]
	add	r3, r3, r9
	str	r3, [sp, #12]
	b	.L9495
.L9537:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L9498:
	ldr	r3, [r5, #104]
	cmp	r3, #0
	beq	.L9541
.L9500:
	movw	r0, #:lower16:.LC825
	ldr	r1, .L9546
	mvn	r8, #4
	movt	r0, #:upper16:.LC825
	bl	printk
.L9496:
	ldr	r1, [sp, #28]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L9492:
	mov	r0, r8
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9541:
	ldr	r1, [sp, #20]
	str	r3, [sp, #36]
	add	r2, sp, #48
	str	r3, [sp, #40]
	add	r8, r5, #156
	str	r3, [sp, #44]
	str	r3, [sp, #48]
	str	r3, [sp, #52]
	ldr	r3, [r9, #12]
	str	r3, [sp, #40]
	str	r1, [sp, #44]
	str	r2, [sp, #48]
	str	r2, [sp, #52]
	b	.L9506
.L9543:
	bl	schedule
.L9506:
	mov	r2, #1
	add	r1, sp, #36
	mov	r0, r8
	bl	prepare_to_wait
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #120]
	mov	fp, r0
	cmp	r7, r3
	mov	r0, r3
	sub	r4, r3, #36
	beq	.L9542
	bl	list_del
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, #0
	bne	.L9503
	ldr	r3, [r5, #104]
	cmp	r3, #0
	bne	.L9504
.L9544:
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L9543
	mov	r0, r8
	add	r1, sp, #36
	bl	finish_wait
	mov	r2, #65024
	movw	r0, #:lower16:.LC829
	ldr	r1, .L9546
	movt	r2, 65535
	movt	r0, #:upper16:.LC829
	mov	r8, #65024
	bl	printk
	movt	r8, 65535
	b	.L9496
.L9542:
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #104]
	cmp	r3, #0
	beq	.L9544
.L9504:
	add	r1, sp, #36
	mov	r0, r8
	bl	finish_wait
	cmp	r10, #0
	bne	.L9516
.L9536:
	ldr	r8, [sp, #24]
	b	.L9496
.L9503:
	add	r1, sp, #36
	mov	r0, r8
	bl	finish_wait
	b	.L9499
.L9538:
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r3, r10; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	bne	.L9509
	mov	r9, r10
.L9533:
	mov	r1, r3
	mov	r2, r9
	bl	__copy_from_user
	cmp	r0, #0
	beq	.L9512
	b	.L9511
.L9539:
	mov	r10, r9
.L9509:
	mov	r1, r10
	bl	__memzero
.L9511:
	movw	r0, #:lower16:.LC826
	movw	r9, #:lower16:.LANCHOR4
	ldr	r1, .L9546
	movt	r0, #:upper16:.LC826
	movt	r9, #:upper16:.LANCHOR4
	mvn	r8, #13
	bl	printk
.L9513:
	movw	r3, #594
	ldrh	r3, [r9, r3]
	tst	r3, #4
	bne	.L9545
.L9519:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	ldr	r1, [r5, #124]
	add	r0, r4, #36
	mov	r2, r7
	bl	__list_add
	mov	r1, r9
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L9496
.L9545:
	ldr	r3, .L9546
	movw	r1, #:lower16:.LC828
	movt	r1, #:upper16:.LC828
	ldr	r0, .L9546+4
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L9519
.L9540:
	movw	r9, #:lower16:.LANCHOR4
	movw	r3, #570
	movt	r9, #:upper16:.LANCHOR4
	mov	r2, #1
	ldrh	r3, [r9, r3]
	mov	r8, r0
	str	r2, [r5, #104]
	tst	r3, #4
	beq	.L9515
	ldr	r3, .L9546
	movw	r1, #:lower16:.LC233
	str	r2, [sp]
	movt	r1, #:upper16:.LC233
	add	r0, r9, #552
	mov	r2, r3
	bl	__dynamic_pr_debug
.L9515:
	movw	r0, #:lower16:.LC827
	mov	r2, r8
	ldr	r1, .L9546
	movt	r0, #:upper16:.LC827
	mvn	r8, #4
	bl	printk
	b	.L9513
.L9534:
	movw	r0, #:lower16:.LC425
	ldr	r1, .L9546
	mvn	r8, #18
	movt	r0, #:upper16:.LC425
	bl	printk
	b	.L9492
.L9535:
	ldr	r1, [sp, #28]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC824
	ldr	r1, .L9546
	mvn	r8, #15
	movt	r0, #:upper16:.LC824
	bl	printk
	b	.L9492
.L9547:
	.align	2
.L9546:
	.word	.LANCHOR5-1824
	.word	.LANCHOR4+576
	.fnend
	.size	conn_gadget_write, .-conn_gadget_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_disable, %function
qdss_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #618
	movt	r5, #:upper16:.LANCHOR4
	mov	r4, r0
	str	r6, [sp, #8]
	ldrh	r3, [r5, r3]
	str	lr, [sp, #12]
	tst	r3, #4
	bne	.L9571
.L9549:
	add	r6, r4, #188
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #92]
	mov	r1, r0
	cmp	r3, #0
	beq	.L9572
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #92]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #642
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L9573
.L9551:
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	tst	r3, #2
	beq	.L9552
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #192]	@ zero_extendqisi2
	bfc	r2, #1, #1
	uxtb	r3, r2
	strb	r2, [r4, #192]
.L9552:
	tst	r3, #4
	beq	.L9553
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #192]	@ zero_extendqisi2
	bfc	r2, #2, #1
	uxtb	r3, r2
	strb	r2, [r4, #192]
.L9553:
	tst	r3, #1
	beq	.L9554
	ldr	r0, [r4, #108]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r4, #192]
.L9554:
	add	r2, r4, #172
	ldr	r1, [r4, #196]
	mov	r0, #4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on
.L9572:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L9573:
	movw	r1, #:lower16:.LC831
	ldr	r0, .L9574
	movt	r1, #:upper16:.LC831
	bl	__dynamic_pr_debug
	b	.L9551
.L9571:
	movw	r1, #:lower16:.LC830
	add	r0, r5, #600
	movt	r1, #:upper16:.LC830
	bl	__dynamic_pr_debug
	b	.L9549
.L9575:
	.align	2
.L9574:
	.word	.LANCHOR4+624
	.fnend
	.size	qdss_disable, .-qdss_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_function_unbind_config, %function
ecm_qc_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, .L9585
	str	lr, [sp, #4]
	bl	strim
	mov	r1, r0
	movw	r0, #:lower16:.LC587
	movt	r0, #:upper16:.LC587
	bl	strcmp
	cmp	r0, #0
	bne	.L9584
.L9576:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L9584:
	movw	r1, #:lower16:.LC832
	movw	r0, #:lower16:init_net
	movt	r1, #:upper16:.LC832
	movt	r0, #:upper16:init_net
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L9576
	.syntax divided
@ 17 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		mrs	ip, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	movw	r2, #:lower16:__per_cpu_offset
	bic	r1, r3, #8128
	movt	r2, #:upper16:__per_cpu_offset
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
	ldr	r1, [r2, r1, lsl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, ip	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	bl	unregister_netdev
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	free_netdev
.L9586:
	.align	2
.L9585:
	.word	.LANCHOR1+3020
	.fnend
	.size	ecm_qc_function_unbind_config, .-ecm_qc_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_free_buffers, %function
gbam_free_buffers:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #4
	add	r7, r0, #8
	mov	r0, r6
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	r4, #0
	beq	.L9588
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L9588
	ldr	r5, [r4, #28]
	add	r10, r4, #28
	ldr	r9, [r3, #84]
	cmp	r10, r5
	beq	.L9589
.L9590:
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del
	ldr	r3, [r9, #8]
	mov	r1, r5
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #28]
	cmp	r10, r5
	bne	.L9590
	ldr	r3, [r4, #12]
.L9589:
	ldr	r5, [r4, #52]
	add	r10, r4, #52
	ldr	r9, [r3, #88]
	cmp	r10, r5
	beq	.L9591
.L9592:
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del
	ldr	r3, [r9, #8]
	mov	r1, r5
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #52]
	cmp	r10, r5
	bne	.L9592
.L9591:
	ldr	r3, [r4, #36]
	add	r5, r4, #36
	cmp	r5, r3
	beq	.L9593
	mov	r9, #0
	b	.L9594
.L9613:
	ldr	r2, [r4, #44]
	sub	r2, r2, #1
	str	r2, [r4, #44]
	ldm	r3, {r1, r2}
	str	r9, [r3]
	str	r9, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #36]
	cmp	r3, r5
	beq	.L9593
.L9594:
	subs	r0, r3, #0
	bne	.L9613
.L9593:
	ldr	r3, [r4, #60]
	add	r5, r4, #60
	cmp	r3, r5
	beq	.L9588
	mov	r9, #0
	b	.L9595
.L9614:
	ldr	r2, [r4, #68]
	sub	r2, r2, #1
	str	r2, [r4, #68]
	ldm	r3, {r1, r2}
	str	r9, [r3]
	str	r9, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #60]
	cmp	r3, r5
	beq	.L9588
.L9595:
	subs	r0, r3, #0
	bne	.L9614
.L9588:
	mov	r0, r7
	bl	_raw_spin_unlock
	ldrd	r4, [sp]
	mov	r1, r8
	mov	r0, r6
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	gbam_free_buffers, .-gbam_free_buffers
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_ch_remove, %function
gbam_data_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #666
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r3, r2]
	.pad #12
	sub	sp, sp, #12
	tst	r2, #4
	bne	.L9643
.L9616:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r7, [r4, #424]
	cmp	r7, #0
	ble	.L9617
	mov	r5, #0
	movw	r6, #:lower16:.LC342
	mov	r9, r5
	mov	fp, r5
	movt	r6, #:upper16:.LC342
.L9622:
	mov	r2, #20
	mov	r0, r6
	ldr	r1, [r8]
	bl	strncmp
	cmp	r0, #0
	beq	.L9644
.L9618:
	add	r5, r5, #1
	cmp	r7, r5
	bgt	.L9622
.L9617:
	mov	r0, #0
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9644:
	mov	r3, #84
	ldr	r2, .L9645
	mul	r3, r3, r5
	ldr	r7, [r3, r2]
	add	r3, r7, #8
	add	r10, r7, #4
	mov	r0, r10
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	str	r0, [sp, #4]
	add	r0, r7, #8
	bl	_raw_spin_lock
	ldr	r3, [r7, #12]
	add	r0, r7, #8
	cmp	r3, #0
	ldrne	fp, [r3, #84]
	ldrne	r9, [r3, #88]
	bl	_raw_spin_unlock
	ldr	r1, [sp, #4]
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	cmp	fp, #0
	beq	.L9620
	ldr	r3, [fp, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L9620
	mov	r0, fp
	blx	r3
.L9620:
	cmp	r9, #0
	beq	.L9621
	ldr	r3, [r9, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L9621
	mov	r0, r9
	blx	r3
.L9621:
	mov	r0, r7
	add	r10, r7, #20
	bl	gbam_free_buffers
	ldr	r0, [r7, #24]
	bl	msm_bam_dmux_close
	mov	r3, #0
	mov	r1, r10
	mov	r0, #2
	str	r3, [r7, #240]
	bl	_clear_bit
	mov	r1, r10
	mov	r0, #1
	bl	_clear_bit
	ldr	r7, [r4, #424]
	b	.L9618
.L9643:
	movw	r1, #:lower16:.LC177
	add	r0, r3, #648
	ldr	r2, .L9645+4
	movt	r1, #:upper16:.LC177
	ldr	r3, [r8]
	bl	__dynamic_pr_debug
	b	.L9616
.L9646:
	.align	2
.L9645:
	.word	.LANCHOR1+428
	.word	.LANCHOR5-1804
	.fnend
	.size	gbam_data_ch_remove, .-gbam_data_ch_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_unbind, %function
diag_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L9661
	cmp	r3, #2
	bhi	.L9662
.L9649:
	ldr	r0, [r6, #16]
	bl	kfree
	ldr	r3, [r6, #124]
	cmp	r3, #0
	beq	.L9650
	ldr	r2, [r3, #20]
	cmp	r2, r6
	moveq	r2, #0
	streq	r2, [r3, #20]
.L9650:
	add	r0, r6, #140
	add	r7, r6, #108
	bl	list_del
	mov	r9, r6
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r9, #100]!
	mov	r8, r0
	cmp	r4, r9
	ldr	r5, [r4]
	bne	.L9652
	b	.L9651
.L9655:
	mov	r5, r3
.L9652:
	mov	r0, r4
	sub	r4, r4, #36
	bl	list_del
	ldr	r0, [r6, #88]
	mov	r1, r4
	mov	r4, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r9, r5
	ldr	r3, [r5]
	bne	.L9655
.L9651:
	mov	r9, r6
	ldr	r4, [r9, #92]!
	cmp	r4, r9
	ldr	r5, [r4]
	bne	.L9654
	b	.L9653
.L9656:
	mov	r5, r3
.L9654:
	mov	r0, r4
	sub	r4, r4, #36
	bl	list_del
	ldr	r0, [r6, #84]
	mov	r1, r4
	mov	r4, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r9, r5
	ldr	r3, [r5]
	bne	.L9656
.L9653:
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, r6
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	kfree
.L9661:
	mov	r4, r0
	ldr	r0, [r1, #12]
	bl	kfree
	ldr	r3, [r4, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L9649
.L9662:
	ldr	r0, [r6, #8]
	bl	kfree
	b	.L9649
	.fnend
	.size	diag_function_unbind, .-diag_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_unbind, %function
mtp_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	add	r6, r1, #88
	strd	r8, [sp, #16]
	add	r9, r1, #116
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	b	.L9664
.L9665:
	bl	list_del
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L9666
	ldr	r8, [r4, #92]
	ldr	r0, [r5, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L9664:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #116]
	mov	r8, r0
	cmp	r9, r5
	mov	r0, r5
	sub	r7, r5, #36
	bne	.L9665
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L9666:
	ldr	r5, [r4, #168]
	cmp	r5, #0
	beq	.L9668
	ldr	r7, [r4, #96]
	ldr	r0, [r5]
	bl	kfree
	mov	r1, r5
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L9668:
	ldr	r5, [r4, #172]
	cmp	r5, #0
	beq	.L9669
	ldr	r7, [r4, #96]
	ldr	r0, [r5]
	bl	kfree
	mov	r1, r5
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L9669:
	add	r9, r4, #124
	b	.L9670
.L9671:
	bl	list_del
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L9672
	ldr	r8, [r4, #100]
	ldr	r0, [r5, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L9670:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #124]
	mov	r8, r0
	cmp	r5, r9
	mov	r0, r5
	sub	r7, r5, #36
	bne	.L9671
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L9672:
	mov	r3, #0
	str	r3, [r4, #104]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	mtp_function_unbind, .-mtp_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_suspend, %function
frmnet_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #690
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR4
	movw	r8, #:lower16:.LANCHOR1
	strd	r10, [sp, #24]
	movt	r9, #:upper16:.LANCHOR4
	movt	r8, #:upper16:.LANCHOR1
	str	lr, [sp, #32]
	ldrb	r2, [r0, #116]	@ zero_extendqisi2
	.pad #20
	sub	sp, sp, #20
	ldrh	r1, [r9, r3]
	add	r3, r2, r2, lsl #1
	tst	r1, #4
	add	r3, r8, r3, lsl #3
	ldr	r7, [r3, #3316]
	bne	.L9711
.L9682:
	ldr	r0, [r5, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L9684
	blx	r3
.L9684:
	ldr	r0, .L9715
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L9712
.L9685:
	add	r10, r5, #132
	add	r6, r5, #144
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #144]
	str	r0, [sp, #12]
	cmp	r6, r4
	beq	.L9686
.L9687:
	mov	r0, r4
	sub	fp, r4, #8
	bl	list_del
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, fp
	bl	kfree
	ldr	r4, [r5, #144]
	cmp	r6, r4
	bne	.L9687
.L9686:
	mov	r3, #0
	mov	r0, r10
	ldr	r1, [sp, #12]
	str	r3, [r5, #152]
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #10
	bhi	.L9688
	mov	r3, #1
	lsl	r3, r3, r7
	tst	r3, #1824
	bne	.L9681
	tst	r3, #192
	beq	.L9688
	sub	r7, r7, #6
	cmp	r7, #1
	bls	.L9713
.L9681:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9713:
	ldrb	r3, [r5, #116]	@ zero_extendqisi2
	movw	r2, #714
	ldrh	r2, [r9, r2]
	add	r3, r3, r3, lsl #1
	tst	r2, #4
	add	r3, r8, r3, lsl #3
	ldrb	r3, [r3, #3324]	@ zero_extendqisi2
	add	r2, r8, r3, lsl #2
	ldr	r4, [r2, #3668]
	bne	.L9714
.L9690:
	ldr	r1, [r8, #3532]
	add	r2, r4, #316
	mov	r0, #4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work_on
.L9711:
	sub	r1, r7, #1
	cmp	r1, #9
	movwhi	r3, #:lower16:.LC182
	movthi	r3, #:upper16:.LC182
	bhi	.L9683
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r3, r3, r1, lsl #2
	ldr	r3, [r3, #1100]
.L9683:
	movw	r1, #:lower16:.LC591
	str	r5, [sp]
	ldr	r0, .L9715+4
	movt	r1, #:upper16:.LC591
	str	r2, [sp, #4]
	ldr	r2, .L9715+8
	bl	__dynamic_pr_debug
	b	.L9682
.L9712:
	movw	r1, #:lower16:.LC563
	ldrb	r3, [r5, #116]	@ zero_extendqisi2
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC563
	ldr	r2, .L9715+12
	bl	__dynamic_pr_debug
	b	.L9685
.L9714:
	movw	r1, #:lower16:.LC833
	ldr	r2, .L9715+16
	movt	r1, #:upper16:.LC833
	ldr	r0, .L9715+20
	bl	__dynamic_pr_debug
	b	.L9690
.L9688:
	sub	r7, r7, #1
	cmp	r7, #9
	bhi	.L9693
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r7, r3, r7, lsl #2
	ldr	r2, [r7, #1100]
.L9691:
	ldr	r1, .L9715+8
	movw	r0, #:lower16:.LC593
	movt	r0, #:upper16:.LC593
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L9693:
	movw	r2, #:lower16:.LC182
	movt	r2, #:upper16:.LC182
	b	.L9691
.L9716:
	.align	2
.L9715:
	.word	.LANCHOR4-2848
	.word	.LANCHOR4+672
	.word	.LANCHOR5-1784
	.word	.LANCHOR5-3988
	.word	.LANCHOR5-1768
	.word	.LANCHOR4+696
	.fnend
	.size	frmnet_suspend, .-frmnet_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_disable, %function
ffs_func_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r0, #-28]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r6, #132]
	cmp	r9, #0
	beq	.L9718
	ldr	r3, [r9, #8]
	mov	r8, #1
	mov	r7, #0
	ldr	r4, [r9, #12]
	add	r0, r3, #24
	ldr	r5, [r3, #208]
	ldrh	fp, [r3, #180]
	add	r4, r4, #28
	bl	_raw_spin_lock_irqsave
	mov	r10, r0
.L9719:
	str	r8, [r5, #32]
	ldr	r3, [r4, #-28]
	subs	r0, r3, #0
	beq	.L9720
	ldr	r3, [r3, #8]
	add	r4, r4, #28
	add	r5, r5, #56
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #-56]
	subs	fp, fp, #1
	str	r7, [r3]
	str	r7, [r5, #-16]
	bne	.L9719
.L9722:
	ldr	r0, [r9, #8]
	mov	r1, r10
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	mov	r3, #0
	str	r3, [r6, #132]
.L9718:
	ldr	r7, [r6, #92]
	cmp	r7, #2
	bne	.L9717
	mov	r3, #0
	add	r4, r6, #116
	mov	r0, r4
	str	r3, [r6, #132]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #96]
	mov	r5, r0
	add	r0, r6, #100
	ldrh	r2, [r6, #104]
	mov	lr, r0
	cmp	r3, #1
	streq	r7, [r6, #96]
	cmp	r2, #0
	beq	.L9728
	add	r2, r2, r0
	mov	r3, r0
.L9727:
	ldrb	r1, [r3], #1	@ zero_extendqisi2
	sub	ip, r1, #5
	cmp	ip, #1
	strbls	r1, [r0]
	addls	r0, r0, #1
	cmp	r2, r3
	bne	.L9727
	sub	r2, r0, lr
	add	r1, r2, #1
	uxth	r2, r2
	uxth	r1, r1
.L9725:
	add	r3, r6, r2
	strh	r1, [r6, #104]	@ movhi
	mov	r0, #3
	mov	r2, #1
	mov	r1, r0
	strb	r0, [r3, #100]
	mov	r0, r4
	bl	__wake_up_locked
	mov	r1, r5
	mov	r0, r4
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L9720:
	subs	fp, fp, #1
	str	r3, [r5, #40]
	add	r4, r4, #28
	add	r5, r5, #56
	bne	.L9719
	b	.L9722
.L9728:
	mov	r1, #1
	b	.L9725
.L9717:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
	.fnend
	.size	ffs_func_disable, .-ffs_func_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_close, %function
gs_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #272]
	.pad #32
	sub	sp, sp, #32
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #12]
	cmp	r3, #1
	beq	.L9735
	cmp	r3, #0
	subne	r3, r3, #1
	strne	r3, [r4, #12]
	beq	.L9776
.L9737:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	add	sp, sp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L9776:
	movw	r0, #:lower16:.LC675
	movw	r1, #905
	movt	r0, #:upper16:.LC675
	bl	warn_slowpath_null
	b	.L9737
.L9735:
	movw	r6, #:lower16:.LANCHOR4
	movw	r3, #738
	movt	r6, #:upper16:.LANCHOR4
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L9777
.L9738:
	ldr	r0, [r4, #4]
	mov	r2, #0
	mov	r3, #1
	str	r2, [r4, #12]
	strb	r3, [r4, #16]
	cmp	r0, r2
	beq	.L9754
	ldr	r3, [r0, #120]
	cmp	r3, #0
	beq	.L9772
	blx	r3
.L9772:
	ldr	r1, [r4, #92]
	ldr	r2, [r4, #100]
	ldr	r0, [r4, #104]
	add	r3, r0, r1
	sub	r3, r3, r2
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	bne	.L9778
.L9756:
	str	r0, [r4, #100]
.L9740:
	mov	r3, #0
	movw	r2, #762
	str	r3, [r5, #272]
	str	r3, [r4, #8]
	strb	r3, [r4, #16]
	ldrh	r3, [r6, r2]
	tst	r3, #4
	bne	.L9779
.L9755:
	mov	r2, #1
	mov	r3, #0
	mov	r1, r2
	add	r0, r4, #20
	bl	__wake_up
	b	.L9737
.L9778:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L9775
	ldr	r1, [r4, #92]
	ldrd	r2, [r4, #100]
	add	r3, r3, r1
	sub	r3, r3, r2
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	bne	.L9747
.L9775:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
.L9746:
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L9754
	ldr	r0, [r4, #104]
	b	.L9756
.L9754:
	ldr	r0, [r4, #96]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #96]
	b	.L9740
.L9747:
	mov	r0, r4
	add	r10, r4, #108
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	movw	r2, #:lower16:autoremove_wake_function
	bic	r8, r3, #8128
	add	r1, sp, #24
	bic	r8, r8, #63
	mov	r3, #0
	ldr	r0, [r8, #12]
	movt	r2, #:upper16:autoremove_wake_function
	movw	r9, #4500
	str	r3, [sp, #12]
	str	r0, [sp, #16]
	str	r2, [sp, #20]
	str	r1, [sp, #24]
	str	r1, [sp, #28]
.L9753:
	mov	r2, #1
	add	r1, sp, #12
	mov	r0, r10
	bl	prepare_to_wait
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L9773
	ldr	r1, [r4, #92]
	mov	r0, r4
	ldrd	r2, [r4, #100]
	add	r3, r3, r1
	sub	r3, r3, r2
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	bne	.L9749
.L9774:
	bl	_raw_spin_unlock_irq
.L9750:
	add	r1, sp, #12
	mov	r0, r10
	bl	finish_wait
	b	.L9746
.L9749:
	bl	_raw_spin_unlock_irq
	ldr	r3, [r8, #12]
	mov	r0, r9
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L9750
	bl	schedule_timeout
	subs	r9, r0, #0
	bne	.L9753
	mov	r0, r4
	bl	_raw_spin_lock_irq
.L9773:
	mov	r0, r4
	b	.L9774
.L9779:
	movw	r1, #:lower16:.LC835
	ldrb	r2, [r4, #17]	@ zero_extendqisi2
	mov	r3, r5
	movt	r1, #:upper16:.LC835
	str	r7, [sp]
	ldr	r0, .L9780
	bl	__dynamic_pr_debug
	b	.L9755
.L9777:
	movw	r1, #:lower16:.LC834
	ldrb	r2, [r4, #17]	@ zero_extendqisi2
	mov	r3, r5
	movt	r1, #:upper16:.LC834
	add	r0, r6, #720
	str	r7, [sp]
	bl	__dynamic_pr_debug
	b	.L9738
.L9781:
	.align	2
.L9780:
	.word	.LANCHOR4+744
	.fnend
	.size	gs_close, .-gs_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_start_io, %function
rmnet_sdio_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #188
	strd	r8, [sp, #16]
	mov	r0, r6
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #192]
	mov	r7, r0
	cmp	r5, #0
	beq	.L9811
	ldr	r3, [r4, #320]
	tst	r3, #2
	beq	.L9785
	ldr	r3, [r4, #324]
	tst	r3, #2
	beq	.L9785
	movw	r9, #:lower16:rmnet_sdio_complete_epout
	mov	r5, #16
	movt	r9, #:upper16:rmnet_sdio_complete_epout
	add	r8, r4, #160
.L9786:
	ldr	r0, [r4, #88]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r8
	add	r0, r3, #36
	beq	.L9801
	cmn	r3, #4096
	bhi	.L9810
	str	r9, [r3, #28]
	ldr	r1, [r4, #164]
	bl	__list_add
	ldr	r3, [r4, #168]
	subs	r5, r5, #1
	add	r3, r3, #1
	str	r3, [r4, #168]
	bne	.L9786
	movw	r9, #:lower16:rmnet_sdio_complete_epin
	mov	r5, #200
	movt	r9, #:upper16:rmnet_sdio_complete_epin
	add	r10, r4, #132
.L9792:
	ldr	r0, [r4, #92]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r10
	add	r0, r3, #36
	beq	.L9801
	cmn	r3, #4096
	bhi	.L9810
	str	r9, [r3, #28]
	ldr	r1, [r4, #136]
	bl	__list_add
	ldr	r3, [r4, #140]
	subs	r5, r5, #1
	add	r3, r3, #1
	str	r3, [r4, #140]
	bne	.L9792
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r9, [r4, #84]
	ldr	r3, [r4, #192]
	cmp	r3, #0
	movne	r0, r6
	beq	.L9812
.L9809:
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #160]
	mov	r10, r0
	cmp	r8, r5
	beq	.L9794
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del
	ldr	r3, [r4, #168]
	mov	r1, r10
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r4, #168]
	bl	_raw_spin_unlock_irqrestore
	mov	r2, #0
	mov	r1, #32
	mvn	r3, #0
	movw	r0, #2056
	bl	__alloc_skb
	mov	r1, r7
	subs	r7, r0, #0
	mov	ip, #2048
	mov	r2, #32
	beq	.L9813
	ldr	r0, [r7, #160]
	ldr	r3, [r7, #172]
	add	r0, r0, #8
	add	r3, r3, #8
	str	r0, [r7, #160]
	str	r3, [r7, #172]
	str	r3, [r5, #-36]
	str	ip, [r5, #-32]
	str	r7, [r5, #-4]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	fp, r0, #0
	mov	r0, r6
	beq	.L9809
	mov	r0, r7
	bl	dev_kfree_skb_any
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r10, r0
.L9796:
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC214
	mov	r2, fp
	movt	r1, #:upper16:.LC214
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r8
	mov	r0, r5
	ldr	r1, [r4, #164]
	bl	__list_add
	ldr	r3, [r4, #168]
	add	r3, r3, #1
	str	r3, [r4, #168]
.L9794:
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r5, #0
	b	.L9782
.L9785:
	mov	r1, r7
	mov	r0, r6
	mov	r5, #0
	bl	_raw_spin_unlock_irqrestore
.L9782:
	mov	r0, r5
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9811:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L9782
.L9801:
	mvn	r5, #11
.L9790:
.L9789:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	bl	rmnet_sdio_free_buf
	mov	r3, #0
	str	r3, [r4, #88]
	str	r3, [r4, #92]
	str	r3, [r4, #96]
	b	.L9782
.L9813:
	mov	r0, r6
	mvn	fp, #11
	bl	_raw_spin_lock_irqsave
	mov	r10, r0
	b	.L9796
.L9812:
	movw	r0, #:lower16:.LC836
	ldr	r1, .L9814
	movt	r0, #:upper16:.LC836
	bl	printk
	b	.L9782
.L9810:
	mov	r5, r3
	b	.L9790
.L9815:
	.align	2
.L9814:
	.word	.LANCHOR5-1752
	.fnend
	.size	rmnet_sdio_start_io, .-rmnet_sdio_start_io
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_open_sdio_work, %function
rmnet_open_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #-168]
	ldr	r3, [r0, #72]
	ldr	r3, [r0, #68]
	ldr	r3, [r0, #68]
	tst	r3, #2
	beq	.L9817
	ldr	r3, [r0, #72]
	tst	r3, #2
	bne	.L9836
.L9817:
	movw	r5, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LANCHOR4
	movt	r5, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LANCHOR4
	movw	r2, #786
	ldr	r3, [r5, #4000]
	ldrh	r2, [r0, r2]
	add	r3, r3, #1
	tst	r2, #4
	str	r3, [r5, #4000]
	bne	.L9837
.L9820:
	cmp	r3, #90
	ble	.L9821
	ldr	r3, [r4, #72]
	tst	r3, #2
	beq	.L9838
	ldr	r3, [r4, #68]
	tst	r3, #2
	beq	.L9839
.L9816:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9839:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC840
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC840
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	add	r0, r0, #32
	b	dev_err
.L9838:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC839
	movt	r1, #:upper16:.LC839
	add	r0, r0, #32
	bl	dev_err
	ldr	r3, [r4, #68]
	tst	r3, #2
	bne	.L9816
	b	.L9839
.L9821:
	ldr	r5, [r4, #-52]
	mov	r0, #2000
	bl	msecs_to_jiffies
	mov	r3, r0
	mov	r2, r4
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	mov	r0, #4
	mov	r1, r5
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	queue_delayed_work_on
.L9837:
	movw	r1, #:lower16:.LC838
	ldr	r2, .L9840
	add	r0, r0, #768
	movt	r1, #:upper16:.LC838
	bl	__dynamic_pr_debug
	ldr	r3, [r5, #4000]
	b	.L9820
.L9836:
	sub	r0, r0, #252
	bl	rmnet_sdio_start_io
	ldr	r3, [r4, #-60]
	cmp	r3, #0
	beq	.L9818
	add	r2, r4, #84
	mov	r0, #4
	ldr	r1, [r4, #-52]
	bl	queue_work_on
.L9818:
	movw	r4, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC837
	ldr	r1, .L9840
	movt	r4, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC837
	ldr	r2, [r4, #4000]
	bl	printk
	mov	r3, #0
	str	r3, [r4, #4000]
	b	.L9816
.L9841:
	.align	2
.L9840:
	.word	.LANCHOR5-1732
	.fnend
	.size	rmnet_open_sdio_work, .-rmnet_open_sdio_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_complete, %function
f_midi_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r0
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r0, [r0]
	.pad #20
	sub	sp, sp, #20
	ldr	ip, [r1, #44]
	ldr	r3, [r0, #20]
	cmn	ip, #103
	ldr	r6, [r3, #24]
	bgt	.L9844
	cmn	ip, #104
	bge	.L9845
	cmn	ip, #121
	bne	.L9887
.L9846:
	ldr	r3, [r4, #8]
	mov	r2, #32
	mov	r1, r5
	mov	r0, r4
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L9888
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L9887:
	cmn	ip, #108
	bne	.L9843
.L9845:
	ldr	r3, [r0, #92]
	ldr	r0, [r5]
	cmp	r4, r3
	beq	.L9889
.L9853:
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r3, [r3, #12]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	bx	r3	@ indirect register sibling call
.L9888:
	ldr	ip, [r6]
	movw	r1, #:lower16:.LC842
	ldr	r3, [r5, #4]
	movt	r1, #:upper16:.LC842
	str	r0, [sp]
	ldr	r2, [r4, #4]
	add	r0, ip, #32
	bl	dev_err
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldr	r3, [r3, #24]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	bx	r3
.L9843:
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #810
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, r3]
	tst	r3, #4
	beq	.L9846
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC841
	add	r0, r0, #792
	ldr	r3, [r4, #4]
	str	ip, [sp]
	movt	r2, #:upper16:.LC841
	ldr	lr, [r5, #4]
	ldr	ip, [r5, #48]
	add	r1, r1, #32
	stmib	sp, {ip, lr}
	bl	__dynamic_dev_dbg
	b	.L9846
.L9844:
	cmp	ip, #0
	bne	.L9843
	ldr	r3, [r0, #92]
	cmp	r3, r4
	beq	.L9890
	ldr	r3, [r0, #88]
	cmp	r3, r4
	bne	.L9846
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	f_midi_transmit
.L9889:
	ldr	r2, [r5, #48]
	cmp	r2, #3
	bls	.L9853
	movw	r8, #:lower16:.LANCHOR5
	add	r6, r0, #1
	movt	r8, #:upper16:.LANCHOR5
	rsb	r7, r0, #6
	b	.L9855
.L9854:
	add	r3, r7, r6
	add	r6, r6, #4
	cmp	r2, r3
	bls	.L9891
.L9855:
	ldrb	r3, [r6, #-1]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L9854
	ldr	r1, [r4]
	lsr	ip, r3, #4
	add	r0, ip, #42
	ldr	r0, [r1, r0, lsl #2]
	cmp	r0, #0
	beq	.L9854
	ldr	r1, [r1, #296]
	lsr	r1, r1, ip
	tst	r1, #1
	beq	.L9854
	and	r3, r3, #15
	mov	r1, r6
	add	r3, r8, r3
	ldrb	r2, [r3, #-1708]	@ zero_extendqisi2
	bl	snd_rawmidi_receive
	ldr	r2, [r5, #48]
	b	.L9854
.L9890:
	ldr	r8, [r1]
	ldr	r2, [r1, #48]
	cmp	r2, #3
	bls	.L9846
	movw	r9, #:lower16:.LANCHOR5
	add	r7, r8, #1
	movt	r9, #:upper16:.LANCHOR5
	rsb	r8, r8, #6
	b	.L9851
.L9850:
	add	r3, r8, r7
	add	r7, r7, #4
	cmp	r3, r2
	bcs	.L9846
.L9851:
	ldrb	r3, [r7, #-1]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L9850
	ldr	r1, [r4]
	lsr	ip, r3, #4
	add	r0, ip, #42
	ldr	r0, [r1, r0, lsl #2]
	cmp	r0, #0
	beq	.L9850
	ldr	r1, [r1, #296]
	lsr	r1, r1, ip
	tst	r1, #1
	beq	.L9850
	and	r3, r3, #15
	mov	r1, r7
	add	r3, r9, r3
	ldrb	r2, [r3, #-1708]	@ zero_extendqisi2
	bl	snd_rawmidi_receive
	ldr	r2, [r5, #48]
	b	.L9850
.L9891:
	ldr	r0, [r5]
	b	.L9853
	.fnend
	.size	f_midi_complete, .-f_midi_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_write, %function
mtp_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	ip, r3
	strd	r6, [sp, #8]
	movw	r3, #834
	strd	r8, [sp, #16]
	mov	r6, r2
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r0, #124]
	mov	r0, ip
	movt	r0, #:upper16:.LANCHOR4
	.pad #60
	sub	sp, sp, #60
	ldrh	r3, [r0, r3]
	stm	sp, {r1, r2}
	ldr	r2, [r5, #84]
	str	r0, [sp, #20]
	tst	r3, #4
	str	r2, [sp, #28]
	bne	.L9941
.L9893:
	add	r7, r5, #88
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r5, #104]
	cmp	r3, #3
	beq	.L9942
	cmp	r3, #0
	beq	.L9943
	mov	r3, #2
	mov	r0, r7
	str	r3, [r5, #104]
	bl	_raw_spin_unlock_irq
	ldr	r3, [r5, #92]
	ldrh	r3, [r3, #20]
	sub	r3, r3, #1
	tst	r3, r6
	moveq	r9, #1
	movne	r9, #0
	orrs	r3, r9, r6
	beq	.L9897
	mov	r3, #57344
	movw	r2, #:lower16:autoremove_wake_function
	movt	r3, 65535
	movt	r2, #:upper16:autoremove_wake_function
	str	r3, [sp, #8]
	str	r2, [sp, #16]
	b	.L9915
.L9902:
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	ldr	r10, [r2, #1756]
	cmp	r10, r6
	movcs	r10, r6
	cmp	r10, #0
	bne	.L9944
.L9910:
	str	r10, [fp, #4]
	ldr	r0, [r5, #92]
	mov	r2, #208
	mov	r1, fp
	ldr	ip, [r0, #8]
	ldr	r4, [ip, #16]
	blx	r4
	cmp	r0, #0
	blt	.L9945
	ldr	r3, [sp]
	sub	r6, r6, r10
	add	r3, r3, r10
	str	r3, [sp]
	orrs	r3, r9, r6
	beq	.L9897
.L9915:
	ldr	r3, [r5, #104]
	cmp	r6, #0
	moveq	r9, #0
	cmp	r3, #2
	bne	.L9946
	mov	r0, r7
	add	r8, r5, #116
	bl	_raw_spin_lock_irqsave
	ldr	fp, [r5, #116]
	mov	r4, r0
	cmp	r8, fp
	beq	.L9947
	mov	r0, fp
	sub	fp, fp, #36
	bl	list_del
	mov	r1, r4
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	fp, #0
	bne	.L9902
	ldr	r3, [r5, #104]
	cmp	r3, #2
	mov	r3, #0
	bne	.L9919
.L9952:
	ldr	r1, [sp, #8]
	mov	r2, sp
	add	r10, r5, #144
	str	r3, [sp, #36]
	str	r3, [sp, #40]
	str	r3, [sp, #44]
	and	r1, r2, r1
	str	r3, [sp, #48]
	add	r2, sp, #48
	str	r3, [sp, #52]
	mov	r4, r1
	ldr	r3, [r1, #12]
	ldr	r1, [sp, #16]
	str	r10, [sp, #12]
	str	r6, [sp, #24]
	str	r3, [sp, #40]
	str	r1, [sp, #44]
	str	r2, [sp, #48]
	str	r2, [sp, #52]
	b	.L9907
.L9949:
	bl	schedule
.L9907:
	mov	r2, #1
	add	r1, sp, #36
	mov	r0, r10
	bl	prepare_to_wait
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #116]
	mov	fp, r0
	cmp	r8, r3
	mov	r0, r3
	sub	r6, r3, #36
	beq	.L9948
	bl	list_del
	mov	r1, fp
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	bne	.L9905
	ldr	r3, [r5, #104]
	cmp	r3, #2
	bne	.L9920
.L9951:
	ldr	r3, [r4, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L9949
	mov	r3, #65024
	movt	r3, 65535
	str	r3, [sp, #4]
.L9906:
	add	r1, sp, #36
	ldr	r0, [sp, #12]
	bl	finish_wait
.L9897:
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r5, #104]
	cmp	r3, #3
	beq	.L9923
	cmp	r3, #0
	movne	r3, #1
	strne	r3, [r5, #104]
.L9916:
	mov	r0, r7
	bl	_raw_spin_unlock_irq
	ldr	r2, [sp, #20]
	movw	r3, #906
	ldrh	r3, [r2, r3]
	tst	r3, #4
	bne	.L9950
.L9892:
	ldr	r0, [sp, #4]
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9944:
	ldr	r2, [sp, #8]
	mov	r3, sp
	ldr	r0, [fp]
	and	r2, r3, r2
	ldr	r3, [sp]
	ldr	r2, [r2, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r3, r10; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	bne	.L9911
	mov	r2, r10
	mov	r1, r3
	bl	__copy_from_user
	cmp	r0, #0
	beq	.L9910
	mov	r4, fp
	b	.L9912
.L9948:
	mov	r1, fp
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #104]
	cmp	r3, #2
	beq	.L9951
.L9920:
	mov	r3, #0
	str	r3, [sp, #4]
	b	.L9906
.L9947:
	mov	r1, r0
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #104]
	cmp	r3, #2
	mov	r3, #0
	beq	.L9952
.L9919:
	str	r3, [sp, #4]
	b	.L9897
.L9911:
	mov	r1, r10
	mov	r4, fp
	bl	__memzero
.L9912:
	mvn	r3, #13
	str	r3, [sp, #4]
.L9914:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	ldr	r1, [r5, #120]
	add	r0, r4, #36
	mov	r2, r8
	bl	__list_add
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L9897
.L9905:
	add	r1, sp, #36
	ldr	r0, [sp, #12]
	mov	fp, r6
	ldr	r6, [sp, #24]
	bl	finish_wait
	b	.L9902
.L9923:
	mvn	r3, #124
	str	r3, [sp, #4]
	b	.L9916
.L9946:
	ldr	r2, [sp, #20]
	movw	r3, #858
	ldrh	r3, [r2, r3]
	tst	r3, #4
	mvneq	r3, #4
	streq	r3, [sp, #4]
	beq	.L9897
	ldr	r3, [sp, #28]
	movw	r2, #:lower16:.LC844
	movt	r2, #:upper16:.LC844
	ldr	r0, .L9953
	ldr	r1, [r3]
	mvn	r3, #4
	str	r3, [sp, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L9897
.L9945:
	ldr	r2, [sp, #20]
	movw	r3, #882
	mov	r4, fp
	ldrh	r3, [r2, r3]
	tst	r3, #4
	mvneq	r3, #4
	streq	r3, [sp, #4]
	beq	.L9914
	ldr	r3, [sp, #28]
	mvn	ip, #4
	movw	r2, #:lower16:.LC845
	movt	r2, #:upper16:.LC845
	str	ip, [sp, #4]
	ldr	r1, [r3]
	mov	r3, r0
	ldr	r0, .L9953+4
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L9914
.L9941:
	mov	r3, r2
	movw	r2, #:lower16:.LC843
	ldr	r1, [r3]
	movt	r2, #:upper16:.LC843
	mov	r3, r6
	add	r0, r0, #816
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L9893
.L9950:
	ldr	r3, [sp, #28]
	movw	r2, #:lower16:.LC846
	movt	r2, #:upper16:.LC846
	ldr	r0, .L9953+8
	ldr	r1, [r3]
	ldr	r3, [sp, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L9892
.L9943:
	mvn	r3, #18
	mov	r0, r7
	str	r3, [sp, #4]
	bl	_raw_spin_unlock_irq
	b	.L9892
.L9942:
	mov	r3, #1
	mvn	r2, #124
	mov	r0, r7
	str	r3, [r5, #104]
	str	r2, [sp, #4]
	bl	_raw_spin_unlock_irq
	b	.L9892
.L9954:
	.align	2
.L9953:
	.word	.LANCHOR4+840
	.word	.LANCHOR4+864
	.word	.LANCHOR4+888
	.fnend
	.size	mtp_write, .-mtp_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_disable, %function
fsg_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r3, [r0, #94]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L9956
	ldr	r0, [r0, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	mov	r1, #0
	ldr	r2, [r4, #100]
	bfc	r3, #0, #1
	strb	r3, [r4, #94]
	str	r1, [r2]
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
.L9956:
	tst	r3, #2
	beq	.L9957
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	mov	r1, #0
	ldr	r2, [r4, #104]
	bfc	r3, #1, #1
	strb	r3, [r4, #94]
	str	r1, [r2]
.L9957:
	ldr	r3, [r4, #88]
	mov	r2, #0
	str	r2, [r3, #12]
	ldr	r4, [r4, #88]
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	mov	r6, r0
	cmp	r3, #4
	bgt	.L9959
	ldr	r3, [r4, #56]
	mov	r1, #4
	ldr	r2, [r4, #168]
	str	r1, [r4, #112]
	str	r3, [r4, #116]
	cmp	r2, #0
	beq	.L9959
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L9959:
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	fsg_disable, .-fsg_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_unbind, %function
adb_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r2, #0
	mov	r5, r1
	mov	r1, #1
	strd	r6, [sp, #8]
	mov	r3, r2
	strd	r8, [sp, #16]
	add	r0, r5, #128
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	str	r2, [r5, #100]
	mov	r2, r1
	str	r1, [r5, #104]
	mov	r1, #3
	bl	__wake_up
	ldr	r4, [r5, #152]
	cmp	r4, #0
	beq	.L9972
	ldr	r6, [r5, #96]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L9972:
	add	r9, r5, #120
	add	r8, r5, #88
	b	.L9973
.L9974:
	bl	list_del
	mov	r1, r7
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L9980
	ldr	r7, [r5, #92]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r6
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L9973:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #120]
	mov	r7, r0
	cmp	r9, r4
	mov	r0, r4
	sub	r6, r4, #36
	bne	.L9974
	mov	r1, r7
	mov	r0, r8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L9980:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	adb_function_unbind, .-adb_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	send_file_work, %function
send_file_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 72
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #-100]
	.pad #92
	sub	sp, sp, #92
	str	r3, [sp, #52]
	.syntax divided
@ 751 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r3, [r0, #32]
	ldrd	r10, [r0, #48]
	ldrd	r4, [r0, #40]
	str	r3, [sp, #20]
	cmp	r10, #0
	sbcs	r3, fp, #0
	strd	r4, [sp, #56]
	mvnlt	r3, #21
	strlt	r3, [r0, #68]
	blt	.L9981
	movw	r3, #:lower16:.LANCHOR4
	mov	r7, r0
	mov	r2, r3
	movw	r3, #930
	movt	r2, #:upper16:.LANCHOR4
	ldrh	r3, [r2, r3]
	str	r2, [sp, #48]
	tst	r3, #4
	bne	.L10039
.L9984:
	ldr	r5, [r7, #56]
	cmp	r5, #0
	bne	.L10040
.L9985:
	ldr	r3, [r7, #-92]
	ldrh	r3, [r3, #20]
	sub	r3, r3, #1
	asr	r1, r3, #31
	and	r3, r3, r10
	and	r2, r1, fp
	orrs	r3, r3, r2
	moveq	r9, #1
	movne	r9, #0
	cmp	r10, #1
	sbcs	r3, fp, #0
	movlt	r3, r9
	orrge	r3, r9, #1
	cmp	r3, #0
	beq	.L9986
	mov	r3, sp
	sub	r2, r7, #68
	bic	r3, r3, #8128
	sub	r8, r7, #96
	bic	r3, r3, #63
	str	r2, [sp, #16]
	str	r3, [sp, #44]
	b	.L10004
.L9990:
	ldr	r2, [r7, #-80]
	cmp	r2, #3
	beq	.L9997
.L10046:
	cmp	r4, #0
	beq	.L10036
	movw	r2, #:lower16:.LANCHOR0
	mov	r1, #0
	ldr	r3, [r4]
	movt	r2, #:upper16:.LANCHOR0
	ldr	r2, [r2, #1756]
	cmp	r2, r10
	sbcs	r1, r1, fp
	movge	r2, r10
	cmp	r5, #0
	beq	.L10000
	mov	r1, #2
	str	r10, [r3]
	strh	r1, [r3, #4]	@ movhi
	ldrh	r1, [r7, #60]
	strh	r1, [r3, #6]	@ movhi
	ldr	r1, [r7, #64]
	str	r1, [r3, #8]
	ldr	r3, [r4]
.L10000:
	add	r1, r3, r5
	sub	r2, r2, r5
	ldr	r0, [sp, #20]
	add	r3, sp, #56
	bl	vfs_read
	subs	r3, r0, #0
	blt	.L10037
	add	r5, r3, r5
	mov	r2, #208
	mov	r1, r4
	str	r5, [r4, #4]
	ldr	r0, [r7, #-92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L10041
	subs	r10, r10, r5
	and	r3, r9, #1
	sbc	fp, fp, r5, asr #31
	cmp	r10, #1
	mov	r5, #0
	sbcs	r2, fp, #0
	orrge	r3, r3, #1
	cmp	r3, r5
	beq	.L9986
.L10004:
	orrs	r3, r10, fp
	mov	r0, r8
	moveq	r9, #0
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #16]
	mov	r6, r0
	ldr	r4, [r7, #-68]
	cmp	r4, r3
	beq	.L10042
	mov	r0, r4
	sub	r4, r4, #36
	bl	list_del
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, #0
	movne	r3, #0
	bne	.L9990
.L9989:
	ldr	r3, [r7, #-80]
	cmp	r3, #2
	bne	.L10043
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #80
	ldr	r6, [sp, #16]
	ldr	ip, [sp, #44]
	movt	r2, #:upper16:autoremove_wake_function
	mov	r3, #0
	sub	r4, r7, #40
	str	r4, [sp, #24]
	ldr	r0, [ip, #12]
	str	r9, [sp, #28]
	strd	r10, [sp, #32]
	str	r5, [sp, #40]
	mov	r5, ip
	str	r3, [sp, #68]
	str	r0, [sp, #72]
	str	r2, [sp, #76]
	str	r1, [sp, #80]
	str	r1, [sp, #84]
	b	.L9996
.L10045:
	bl	schedule
.L9996:
	mov	r2, #1
	add	r1, sp, #68
	mov	r0, r4
	bl	prepare_to_wait
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r7, #-68]
	mov	fp, r0
	cmp	r3, r6
	mov	r0, r3
	sub	r9, r3, #36
	beq	.L10044
	bl	list_del
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r9, #0
	bne	.L10010
	ldr	r3, [r7, #-80]
	cmp	r3, #2
	bne	.L10011
.L10048:
	ldr	r3, [r5, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L10045
	ldr	r9, [sp, #28]
	mov	r3, #65024
	mov	r4, #0
	ldrd	r10, [sp, #32]
	movt	r3, 65535
	ldr	r5, [sp, #40]
.L9995:
	add	r1, sp, #68
	ldr	r0, [sp, #24]
	str	r3, [sp, #28]
	bl	finish_wait
	ldr	r2, [r7, #-80]
	ldr	r3, [sp, #28]
	cmp	r2, #3
	bne	.L10046
.L9997:
	cmp	r4, #0
	beq	.L10005
	mvn	r6, #124
	b	.L10001
.L10043:
	cmp	r3, #3
	beq	.L10005
.L9986:
	mov	r6, #0
.L9992:
	ldr	r2, [sp, #48]
	movw	r3, #978
	ldrh	r3, [r2, r3]
	tst	r3, #4
	bne	.L10047
.L10006:
	str	r6, [r7, #68]
	.syntax divided
@ 841 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
.L9981:
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10040:
	adds	r10, r10, #12
	mov	r5, #12
	adc	fp, fp, #0
	b	.L9985
.L10044:
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7, #-80]
	cmp	r3, #2
	beq	.L10048
.L10011:
	mov	r4, #0
	ldr	r9, [sp, #28]
	mov	r3, r4
	ldrd	r10, [sp, #32]
	ldr	r5, [sp, #40]
	b	.L9995
.L10042:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L9989
.L10010:
	mov	r4, r9
	mov	r3, #0
	ldr	r9, [sp, #28]
	ldrd	r10, [sp, #32]
	ldr	r5, [sp, #40]
	b	.L9995
.L10037:
	mov	r6, r3
.L10001:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	ldr	r1, [r7, #-64]
	add	r0, r4, #36
	ldr	r2, [sp, #16]
	bl	__list_add
	mov	r1, r5
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L9992
.L10041:
	ldr	r2, [sp, #48]
	movw	r3, #954
	ldrh	r3, [r2, r3]
	tst	r3, #4
	bne	.L10049
.L10003:
	ldr	r3, [r7, #-80]
	cmp	r3, #0
	mvneq	r6, #4
	beq	.L10001
	mov	r3, #4
	mvn	r6, #4
	str	r3, [r7, #-80]
	b	.L10001
.L10047:
	ldr	r3, [sp, #52]
	movw	r2, #:lower16:.LC849
	movt	r2, #:upper16:.LC849
	ldr	r0, .L10050
	ldr	r1, [r3]
	mov	r3, r6
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L10006
.L10039:
	ldr	r3, [sp, #52]
	movw	r2, #:lower16:.LC847
	movt	r2, #:upper16:.LC847
	ldr	r1, [r3]
	strd	r4, [sp]
	ldr	r3, [sp, #48]
	strd	r10, [sp, #8]
	add	r1, r1, #32
	add	r0, r3, #912
	bl	__dynamic_dev_dbg
	b	.L9984
.L10005:
	mvn	r6, #124
	b	.L9992
.L10036:
	mov	r6, r3
	b	.L9992
.L10049:
	ldr	r3, [sp, #52]
	movw	r2, #:lower16:.LC848
	movt	r2, #:upper16:.LC848
	ldr	r1, [r3]
	mov	r3, r0
	ldr	r0, .L10050+4
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L10003
.L10051:
	.align	2
.L10050:
	.word	.LANCHOR4+960
	.word	.LANCHOR4+936
	.fnend
	.size	send_file_work, .-send_file_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_setup, %function
rndis_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r1]	@ unaligned
	.pad #36
	sub	sp, sp, #36
	ldrh	r3, [r1, #4]	@ unaligned
	ldrh	r9, [r1, #2]	@ unaligned
	ldrh	r10, [r1, #6]	@ unaligned
	ldr	r1, [r0, #20]
	rev16	r2, r2
	uxth	r2, r2
	cmp	r2, #8448
	ldr	r8, [r1, #24]
	ldr	r5, [r8, #4]
	beq	.L10054
	movw	r1, #41217
	cmp	r2, r1
	bne	.L10077
	cmp	r9, #0
	bne	.L10077
	ldrb	r2, [r0, #120]	@ zero_extendqisi2
	cmp	r2, r3
	bne	.L10077
	ldr	r1, [r0, #144]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	rsb	r1, r1, r1, lsl #4
	lsl	r1, r1, #2
	add	r2, r7, r1
	add	r1, r1, #52
	ldr	r0, [r2, #3732]
	add	r2, r7, #3680
	add	r1, r2, r1
	cmp	r0, r1
	ldr	r2, [r0]
	beq	.L10077
	ldr	ip, [r0, #16]
	cmp	ip, #0
	bne	.L10060
	b	.L10081
.L10062:
	ldr	ip, [r2, #16]
	cmp	ip, #0
	beq	.L10059
	mov	r2, r0
.L10060:
	cmp	r2, r1
	ldr	r0, [r2]
	bne	.L10062
.L10077:
	mvn	r7, #94
.L10052:
	mov	r0, r7
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10054:
	cmp	r9, #0
	bne	.L10077
	ldrb	r2, [r0, #120]	@ zero_extendqisi2
	cmp	r2, r3
	bne	.L10077
	movw	r2, #:lower16:rndis_qc_command_complete
	mov	r7, r10
	movt	r2, #:upper16:rndis_qc_command_complete
	mov	fp, r9
	str	r2, [r5, #28]
.L10058:
	movw	r0, #:lower16:.LANCHOR4
	movw	r2, #1002
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r2, [r0, r2]
	tst	r2, #4
	bne	.L10082
.L10066:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	r7, [r5, #4]
	mov	r1, r5
	str	r6, [r5, #32]
	mov	r2, #32
	bfi	r3, fp, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r8]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	bge	.L10052
	movw	r0, #:lower16:.LC851
	mov	r2, r7
	ldr	r1, .L10084
	movt	r0, #:upper16:.LC851
	bl	printk
	b	.L10052
.L10081:
	mov	r2, r0
.L10059:
	ldr	fp, [r2, #8]
	mov	r1, #1
	ldr	r0, [r2, #12]
	str	r1, [r2, #16]
	cmp	fp, #0
	str	r0, [sp, #16]
	beq	.L10077
	mov	r2, r0
	mov	r1, fp
	ldr	r0, [r5]
	str	r3, [sp, #20]
	bl	memcpy
	movw	r2, #:lower16:rndis_qc_response_complete
	ldr	r3, .L10084+4
	movt	r2, #:upper16:rndis_qc_response_complete
	str	r2, [r5, #28]
	ldr	r1, [r6, #144]
	rsb	r1, r1, r1, lsl #4
	lsl	r1, r1, #2
	add	r7, r7, r1
	add	r1, r1, #52
	ldr	r2, [r7, #3732]
	add	r1, r3, r1
	ldr	r3, [sp, #20]
	cmp	r1, r2
	ldr	r7, [r2]
	beq	.L10063
	str	r10, [sp, #20]
	mov	r10, r9
	mov	r9, r3
	str	r6, [sp, #24]
	mov	r6, r5
	mov	r5, fp
	str	r4, [sp, #28]
	mov	fp, r2
	mov	r4, r1
	b	.L10065
.L10070:
	mov	r7, r0
.L10065:
	cmp	fp, #0
	beq	.L10064
	ldr	r0, [fp, #8]
	cmp	r5, r0
	beq	.L10083
.L10064:
	cmp	r7, r4
	mov	fp, r7
	ldr	r0, [r7]
	bne	.L10070
	mov	r5, r6
	mov	r3, r9
	ldr	r6, [sp, #24]
	mov	r9, r10
	ldr	r10, [sp, #20]
	ldr	r4, [sp, #28]
.L10063:
	ldr	r7, [sp, #16]
	cmp	r7, #0
	blt	.L10052
	cmp	r7, r10
	movge	fp, #0
	movlt	fp, #1
	b	.L10058
.L10083:
	mov	r0, fp
	bl	list_del
	mov	r0, fp
	bl	kfree
	b	.L10064
.L10082:
	ldrb	ip, [r4]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC850
	add	r0, r0, #984
	ldr	r1, [r8]
	movt	r2, #:upper16:.LC850
	ldrb	lr, [r4, #1]	@ zero_extendqisi2
	add	r1, r1, #32
	str	lr, [sp]
	str	r9, [sp, #4]
	str	r3, [sp, #8]
	mov	r3, ip
	str	r10, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L10066
.L10085:
	.align	2
.L10084:
	.word	.LANCHOR5-1692
	.word	.LANCHOR1+3680
	.fnend
	.size	rndis_qc_setup, .-rndis_qc_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_setup, %function
rndis_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r1]	@ unaligned
	.pad #36
	sub	sp, sp, #36
	ldrh	r3, [r1, #4]	@ unaligned
	ldrh	r9, [r1, #2]	@ unaligned
	ldrh	fp, [r1, #6]	@ unaligned
	ldr	r1, [r0, #20]
	rev16	r2, r2
	uxth	r2, r2
	cmp	r2, #8448
	ldr	r7, [r1, #24]
	ldr	r5, [r7, #4]
	beq	.L10088
	movw	r1, #41217
	cmp	r2, r1
	bne	.L10111
	cmp	r9, #0
	bne	.L10111
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, r3
	bne	.L10111
	ldr	r1, [r0, #164]
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	rsb	r1, r1, r1, lsl #4
	lsl	r1, r1, #2
	add	r2, r8, r1
	add	r1, r1, #52
	ldr	r0, [r2, #3732]
	add	r2, r8, #3680
	add	r1, r2, r1
	cmp	r0, r1
	ldr	r2, [r0]
	beq	.L10111
	ldr	ip, [r0, #16]
	cmp	ip, #0
	bne	.L10094
	b	.L10115
.L10096:
	ldr	ip, [r2, #16]
	cmp	ip, #0
	beq	.L10093
	mov	r2, r0
.L10094:
	cmp	r2, r1
	ldr	r0, [r2]
	bne	.L10096
.L10111:
	mvn	r6, #94
.L10086:
	mov	r0, r6
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10088:
	cmp	r9, #0
	bne	.L10111
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, r3
	bne	.L10111
	movw	r2, #:lower16:rndis_command_complete
	mov	r8, r9
	str	r0, [r5, #32]
	movt	r2, #:upper16:rndis_command_complete
	mov	r6, fp
	str	r2, [r5, #28]
.L10092:
	movw	r0, #:lower16:.LANCHOR4
	movw	r2, #1026
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r2, [r0, r2]
	tst	r2, #4
	bne	.L10116
.L10100:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	r6, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfi	r3, r8, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	bge	.L10086
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC852
	mov	r2, r6
	movt	r1, #:upper16:.LC852
	add	r0, r0, #32
	bl	dev_err
	b	.L10086
.L10115:
	mov	r2, r0
.L10093:
	ldr	r10, [r2, #8]
	mov	r1, #1
	ldr	r0, [r2, #12]
	str	r1, [r2, #16]
	cmp	r10, #0
	str	r0, [sp, #20]
	beq	.L10111
	mov	r2, r0
	mov	r1, r10
	ldr	r0, [r5]
	str	r3, [sp, #24]
	bl	memcpy
	movw	r2, #:lower16:rndis_response_complete
	str	r6, [r5, #32]
	ldr	r3, .L10118
	movt	r2, #:upper16:rndis_response_complete
	str	r2, [r5, #28]
	ldr	r2, [r6, #164]
	rsb	r2, r2, r2, lsl #4
	lsl	r2, r2, #2
	add	r8, r8, r2
	add	r2, r2, #52
	ldr	r8, [r8, #3732]
	add	r2, r3, r2
	ldr	r3, [sp, #24]
	cmp	r2, r8
	ldr	r6, [r8]
	beq	.L10097
	str	fp, [sp, #24]
	mov	fp, r9
	mov	r9, r3
	str	r4, [sp, #28]
	mov	r4, r10
	mov	r10, r2
	b	.L10099
.L10104:
	mov	r6, r1
.L10099:
	cmp	r8, #0
	beq	.L10098
	ldr	r1, [r8, #8]
	cmp	r4, r1
	beq	.L10117
.L10098:
	cmp	r6, r10
	mov	r8, r6
	ldr	r1, [r6]
	bne	.L10104
	mov	r3, r9
	ldr	r4, [sp, #28]
	mov	r9, fp
	ldr	fp, [sp, #24]
.L10097:
	ldr	r6, [sp, #20]
	cmp	r6, #0
	blt	.L10086
	cmp	r6, fp
	movge	r8, #0
	movlt	r8, #1
	b	.L10092
.L10117:
	mov	r0, r8
	bl	list_del
	mov	r0, r8
	bl	kfree
	b	.L10098
.L10116:
	ldrb	lr, [r4]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC850
	add	r0, r0, #1008
	ldr	r1, [r7]
	movt	r2, #:upper16:.LC850
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	add	r1, r1, #32
	str	ip, [sp]
	str	r9, [sp, #4]
	str	r3, [sp, #8]
	mov	r3, lr
	str	fp, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L10100
.L10119:
	.align	2
.L10118:
	.word	.LANCHOR1+3680
	.fnend
	.size	rndis_setup, .-rndis_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_set_alt, %function
ffs_func_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmn	r2, #1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r9, [r0, #-28]
	beq	.L10121
	ldrh	ip, [r9, #178]
	ldr	r4, [r0, #-4]
	cmp	ip, #0
	beq	.L10145
	uxtb	r1, r1
	mov	r5, r4
.L10124:
	mov	r3, r5
	ldrsh	lr, [r3], #2
	cmp	lr, #0
	blt	.L10123
	cmp	lr, r1
	beq	.L10162
.L10123:
	subs	ip, ip, #1
	mov	r5, r3
	bne	.L10124
.L10145:
	mvn	r5, #32
.L10120:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10162:
	subs	r5, r5, r4
	asrmi	r5, r5, #1
	bmi	.L10120
.L10121:
	ldr	r8, [r9, #132]
	mov	r6, r2
	str	r0, [sp]
	cmp	r8, #0
	beq	.L10125
	ldr	r3, [r8, #8]
	mov	r7, #1
	mov	r5, #0
	ldr	r4, [r8, #12]
	add	r0, r3, #24
	ldr	fp, [r3, #208]
	add	r4, r4, #28
	ldrh	r10, [r3, #180]
	bl	_raw_spin_lock_irqsave
	str	r0, [sp, #4]
.L10126:
	str	r7, [fp, #32]
	ldr	r3, [r4, #-28]
	subs	r0, r3, #0
	beq	.L10127
	ldr	r3, [r3, #8]
	add	r4, r4, #28
	add	fp, fp, #56
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #-56]
	subs	r10, r10, #1
	str	r5, [r3]
	str	r5, [fp, #-16]
	bne	.L10126
.L10129:
	ldr	r0, [r8, #8]
	ldr	r1, [sp, #4]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	mov	r3, #0
	str	r3, [r9, #132]
.L10125:
	ldr	r5, [r9, #92]
	cmp	r5, #2
	bne	.L10146
	cmn	r6, #1
	beq	.L10163
	ldr	r2, [sp]
	sub	r3, r2, #36
	str	r3, [r9, #132]
	ldr	fp, [r2, #-28]
	ldr	r4, [r2, #-24]
	ldr	r6, [fp, #208]
	add	r0, fp, #24
	ldrh	r10, [fp, #180]
	add	r4, r4, #28
	bl	_raw_spin_lock_irqsave
	str	r0, [sp, #4]
	add	r6, r6, #20
	b	.L10138
.L10165:
	str	r8, [r6, #20]
	ldrb	ip, [r7, #2]	@ zero_extendqisi2
	add	r6, r6, #56
	lsr	ip, ip, #7
	strb	ip, [r6, #-23]
	ldrb	ip, [r7, #3]	@ zero_extendqisi2
	and	ip, ip, r1
	sub	ip, ip, r2
	clz	ip, ip
	lsr	ip, ip, #5
	strb	ip, [r6, #-22]
	bl	__wake_up
	subs	r10, r10, #1
	beq	.L10164
.L10138:
	ldr	r3, [fp]
	sub	r8, r4, #28
	ldr	r3, [r3, #16]
	cmp	r3, #5
	subne	r3, r3, #3
	moveq	r3, #2
	clzne	r3, r3
	lsrne	r3, r3, #5
	add	r3, r3, #2
	ldr	r7, [r8, r3, lsl #2]
	cmp	r7, #0
	beq	.L10136
	ldr	r3, [r4, #-28]
	add	r4, r4, #28
	str	r8, [r3]
	ldr	r3, [r4, #-56]
	str	r7, [r3, #28]
	ldr	r3, [r4, #-56]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	mov	r2, #1
	mov	r1, #3
	mov	r0, r6
	mov	r3, r5
	beq	.L10165
	ldr	r3, [sp]
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-28]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	blt	.L10120
.L10144:
	add	r4, r9, #116
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r9, #96]
	mov	r6, r0
	add	r0, r9, #100
	ldrh	r2, [r9, #104]
	mov	lr, r0
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r9, #96]
	cmp	r2, #0
	beq	.L10149
	add	r2, r2, r0
	mov	r3, r0
.L10143:
	ldrb	r1, [r3], #1	@ zero_extendqisi2
	sub	ip, r1, #5
	cmp	ip, #1
	strbls	r1, [r0]
	addls	r0, r0, #1
	cmp	r2, r3
	bne	.L10143
	sub	r2, r0, lr
	add	r1, r2, #1
	uxth	r2, r2
	uxth	r1, r1
.L10141:
	add	r3, r9, r2
	strh	r1, [r9, #104]	@ movhi
	mov	r0, #2
	mov	r2, #1
	mov	r1, #3
	strb	r0, [r3, #100]
	mov	r0, r4
	bl	__wake_up_locked
	mov	r1, r6
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	b	.L10120
.L10127:
	subs	r10, r10, #1
	str	r3, [fp, #40]
	add	r4, r4, #28
	add	fp, fp, #56
	bne	.L10126
	b	.L10129
.L10163:
	mov	r3, #0
	add	r4, r9, #116
	mov	r0, r4
	str	r3, [r9, #132]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r9, #96]
	mov	r6, r0
	add	r0, r9, #100
	ldrh	r2, [r9, #104]
	mov	lr, r0
	cmp	r3, #1
	streq	r5, [r9, #96]
	cmp	r2, #0
	beq	.L10147
	add	r2, r2, r0
	mov	r3, r0
.L10134:
	ldrb	r1, [r3], #1	@ zero_extendqisi2
	sub	ip, r1, #5
	cmp	ip, #1
	strbls	r1, [r0]
	addls	r0, r0, #1
	cmp	r2, r3
	bne	.L10134
	sub	r2, r0, lr
	add	r1, r2, #1
	uxth	r2, r2
	uxth	r1, r1
.L10132:
	add	r3, r9, r2
	strh	r1, [r9, #104]	@ movhi
	mov	r0, #3
	mov	r2, #1
	mov	r1, r0
	mov	r5, #0
	strb	r0, [r3, #100]
	mov	r0, r4
	bl	__wake_up_locked
	mov	r1, r6
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	b	.L10120
.L10136:
	ldr	r3, [sp]
	mvn	r5, #21
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-28]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	b	.L10120
.L10164:
	ldr	r3, [sp]
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-28]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	b	.L10144
.L10149:
	mov	r1, #1
	b	.L10141
.L10147:
	mov	r1, #1
	b	.L10132
.L10146:
	mvn	r5, #18
	b	.L10120
	.fnend
	.size	ffs_func_set_alt, .-ffs_func_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_notify_modem, %function
gqti_ctrl_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r5, #:upper16:.LANCHOR4
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r3, #3604]
	movw	r3, #1050
	str	r2, [r4, #12]
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L10182
.L10167:
	add	r6, r4, #52
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r4, #4]	@ zero_extendqisi2
	mov	r7, r0
	cmp	r3, #0
	beq	.L10183
	movw	r3, #:lower16:kmalloc_caches
	mov	r2, #16
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L10169
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L10184
	mov	r1, #16
	mov	r2, #0
	stm	r3, {r1, r2}
.L10170:
	add	r0, r3, #8
	add	r2, r4, #44
	ldr	r1, [r4, #48]
	bl	__list_add
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #1074
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L10185
.L10172:
	add	r0, r4, #32
	mov	r3, #0
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	mov	r2, #1
	mov	r1, #3
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
.L10169:
	mov	r3, r2
	str	r2, [r0, #16]
	str	r0, [r0, #20]
	b	.L10170
.L10184:
	mvn	r3, #11
	b	.L10170
.L10182:
	movw	r1, #:lower16:.LC853
	ldr	r2, .L10186
	movt	r1, #:upper16:.LC853
	ldr	r0, .L10186+4
	bl	__dynamic_pr_debug
	b	.L10167
.L10185:
	movw	r1, #:lower16:.LC671
	ldr	r2, .L10186
	movt	r1, #:upper16:.LC671
	ldr	r0, .L10186+8
	bl	__dynamic_pr_debug
	b	.L10172
.L10183:
	movw	r0, #:lower16:.LC854
	mov	r2, r4
	ldr	r1, .L10186
	movt	r0, #:upper16:.LC854
	bl	printk
	ldrd	r4, [sp]
	mov	r1, r7
	mov	r0, r6
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L10187:
	.align	2
.L10186:
	.word	.LANCHOR5-1676
	.word	.LANCHOR4+1032
	.word	.LANCHOR4+1056
	.fnend
	.size	gqti_ctrl_notify_modem, .-gqti_ctrl_notify_modem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_data_rx_tlet, %function
rmnet_data_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #164
	add	r7, r0, #148
	strd	r8, [sp, #16]
	add	r9, r0, #156
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r10, [r0, #84]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #156]
	mov	r8, r0
	cmp	r9, r5
	bne	.L10189
	b	.L10193
.L10191:
	bl	list_del
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r5, #-36]
	ldr	r2, [r5, #12]
	ldr	r0, [r4, #324]
	bl	smd_write
	mov	fp, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #12]
	mov	r8, r0
	mov	r2, r7
	mov	r0, r5
	cmp	r3, fp
	bne	.L10204
	ldr	r1, [r4, #152]
	ldr	r3, [r4, #436]
	add	r3, r3, #1
	str	r3, [r4, #436]
	bl	__list_add
	ldr	r5, [r4, #156]
	cmp	r9, r5
	beq	.L10193
.L10189:
	ldr	r0, [r4, #324]
	bl	smd_write_avail
	ldr	r3, [r5, #12]
	cmp	r0, r3
	mov	r0, r5
	bcs	.L10191
	movw	r2, #:lower16:.LANCHOR4
	movw	r1, #1098
	str	r3, [r4, #372]
	movt	r2, #:upper16:.LANCHOR4
	ldrh	r3, [r2, r1]
	tst	r3, #4
	bne	.L10205
.L10190:
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	ldr	r10, [r4, #84]
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	b	.L10194
.L10196:
	bl	list_del
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #88]
	mov	r1, r9
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	r9, #0
	mov	r8, r0
	bne	.L10206
.L10194:
	ldr	r5, [r4, #148]
	cmp	r7, r5
	mov	r0, r5
	sub	r9, r5, #36
	bne	.L10196
.L10195:
	mov	r1, r8
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L10206:
	ldr	r0, [r10]
	movw	r1, #:lower16:.LC214
	mov	r2, r9
	movt	r1, #:upper16:.LC214
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r7
	mov	r0, r5
	ldr	r1, [r4, #152]
	bl	__list_add
	b	.L10195
.L10193:
	mov	r3, #0
	str	r3, [r4, #372]
	b	.L10190
.L10204:
	ldr	r0, [r10]
	movw	r1, #:lower16:.LC856
	movt	r1, #:upper16:.LC856
	add	r0, r0, #32
	bl	dev_err
	b	.L10190
.L10205:
	ldr	r1, [r10]
	movw	r2, #:lower16:.LC855
	movt	r2, #:upper16:.LC855
	ldr	r0, .L10207
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L10190
.L10208:
	.align	2
.L10207:
	.word	.LANCHOR4+1080
	.fnend
	.size	rmnet_data_rx_tlet, .-rmnet_data_rx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_data_rx_tlet, %function
rmnet_mux_smd_data_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #368
	add	r7, r0, #112
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r10, [r0, #84]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #372]
	mov	r8, r0
	cmp	r3, #0
	beq	.L10210
	ldr	r5, [r4, #120]
	add	r9, r4, #120
	cmp	r5, r9
	bne	.L10212
	b	.L10211
.L10213:
	bl	list_del
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r5, #-36]
	ldr	r2, [r5, #12]
	ldr	r0, [r4, #128]
	bl	smd_write
	mov	fp, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #12]
	mov	r8, r0
	mov	r2, r7
	mov	r0, r5
	cmp	r3, fp
	bne	.L10229
	ldr	r1, [r4, #116]
	ldr	r3, [r4, #400]
	add	r3, r3, #1
	str	r3, [r4, #400]
	bl	__list_add
	ldr	r3, [r4, #372]
	cmp	r3, #0
	beq	.L10210
	ldr	r5, [r4, #120]
	cmp	r5, r9
	beq	.L10211
.L10212:
	ldr	r0, [r4, #128]
	bl	smd_write_avail
	ldr	r3, [r5, #12]
	cmp	r0, r3
	mov	r0, r5
	bcs	.L10213
	movw	r0, #:lower16:.LANCHOR4
	movw	r2, #1122
	str	r3, [r4, #176]
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, r2]
	tst	r3, #4
	bne	.L10230
.L10210:
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	ldr	r10, [r4, #84]
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	b	.L10216
.L10218:
	bl	list_del
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #88]
	mov	r1, r9
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	r9, #0
	mov	r8, r0
	bne	.L10231
.L10216:
	ldr	r5, [r4, #112]
	cmp	r5, r7
	mov	r0, r5
	sub	r9, r5, #36
	bne	.L10218
.L10217:
	mov	r1, r8
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L10231:
	ldr	r0, [r10]
	movw	r1, #:lower16:.LC214
	mov	r2, r9
	movt	r1, #:upper16:.LC214
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r7
	mov	r0, r5
	ldr	r1, [r4, #116]
	bl	__list_add
	b	.L10217
.L10211:
	mov	r3, #0
	str	r3, [r4, #176]
	b	.L10210
.L10229:
	ldr	r0, [r10]
	movw	r1, #:lower16:.LC858
	movt	r1, #:upper16:.LC858
	add	r0, r0, #32
	bl	dev_err
	b	.L10210
.L10230:
	ldr	r1, [r10]
	movw	r2, #:lower16:.LC857
	add	r0, r0, #1104
	movt	r2, #:upper16:.LC857
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L10210
	.fnend
	.size	rmnet_mux_smd_data_rx_tlet, .-rmnet_mux_smd_data_rx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_disconnect, %function
android_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	add	r4, r0, #32
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	mov	r0, r4
	strd	r8, [sp, #16]
	movt	r7, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	ldr	r3, [r7, #3308]
	mov	r6, r0
	ldr	r2, .L10265
	sub	r5, r3, #520
	cmp	r3, r2
	bne	.L10235
	b	.L10233
.L10263:
	ldr	r3, [r5, #520]
	cmp	r3, r2
	sub	r5, r3, #520
	beq	.L10233
.L10235:
	ldr	r3, [r3, #-512]
	cmp	r6, r3
	bne	.L10263
.L10233:
	mov	r0, r4
	bl	dev_get_drvdata
	mov	fp, r0
	mov	r0, #0
	bl	set_string_mode
	movw	r0, #:lower16:.LC780
	ldr	r1, .L10265+4
	add	r9, fp, #60
	movt	r0, #:upper16:.LC780
	bl	printk
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r3, [fp, #12]
	mov	r10, r0
	cmp	r3, #0
	beq	.L10236
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, #18]
	tst	r2, #4
	bne	.L10264
.L10237:
	ldr	r4, [r3, #36]!
	cmp	r4, r3
	sub	r4, r4, #72
	beq	.L10239
	mov	r8, #0
.L10238:
	ldr	r3, [r4, #48]
	mov	r0, r4
	cmp	r3, #0
	beq	.L10240
	blx	r3
	str	r8, [r4, #80]
	ldr	r4, [r4, #72]
	ldr	r3, [fp, #12]
	add	r3, r3, #36
	cmp	r3, r4
	sub	r4, r4, #72
	bne	.L10238
.L10239:
	ldr	r2, [r7, #2476]
	mov	r3, #0
	str	r3, [fp, #12]
	str	r3, [fp, #56]
	ldr	r3, [r2, #32]
	cmp	r3, #0
	beq	.L10243
.L10242:
	mov	r0, fp
	blx	r3
.L10244:
	ldr	r3, [fp, #56]
	cmp	r3, #0
	beq	.L10243
	ldr	r0, [fp]
	movw	r1, #:lower16:.LC859
	movt	r1, #:upper16:.LC859
	add	r0, r0, #32
	bl	_dev_info
	mov	r3, #0
	str	r3, [fp, #56]
.L10243:
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	ldr	r7, [r7, #2488]
	add	r9, r7, #88
	add	r8, r7, #1760
	mov	r0, r9
	add	r8, r8, #8
	bl	_raw_spin_lock_irqsave
	ldr	r10, [r7, #1768]
	str	r0, [sp, #4]
	cmp	r10, r8
	ldr	r4, [r10]
	beq	.L10246
	add	fp, r7, #1776
	add	fp, fp, #8
	b	.L10247
.L10250:
	mov	r4, r2
.L10247:
	mov	r0, r10
	bl	list_del
	mov	r0, r10
	ldr	r2, [r7, #1784]
	mov	r1, fp
	bl	__list_add
	cmp	r8, r4
	mov	r10, r4
	ldr	r2, [r4]
	bne	.L10250
.L10246:
	mov	r8, r7
	ldr	r10, [r8, #1776]!
	cmp	r8, r10
	ldr	r4, [r10]
	beq	.L10248
	add	fp, r8, #8
	b	.L10249
.L10251:
	mov	r4, r2
.L10249:
	mov	r0, r10
	bl	list_del
	mov	r0, r10
	ldr	r2, [r7, #1784]
	mov	r1, fp
	bl	__list_add
	cmp	r8, r4
	mov	r10, r4
	ldr	r2, [r4]
	bne	.L10251
.L10248:
	mov	r0, r9
	ldr	r1, [sp, #4]
	movw	r4, #:lower16:system_wq
	bl	_raw_spin_unlock_irqrestore
	movt	r4, #:upper16:system_wq
	add	r2, r7, #1744
	ldr	r1, [r4]
	add	r6, r6, #60
	add	r2, r2, #8
	mov	r0, #4
	bl	queue_work_on
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r3, #0
	mov	r7, r0
	ldr	r1, [r4]
	add	r2, r5, #180
	mov	r0, #4
	strb	r3, [r5, #48]
	bl	queue_work_on
	mov	r1, r7
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L10236:
	ldr	r3, [r7, #2476]
	ldr	r3, [r3, #32]
	cmp	r3, #0
	bne	.L10242
	b	.L10244
.L10264:
	ldr	r1, [fp]
	movw	r2, #:lower16:.LC5
	movt	r2, #:upper16:.LC5
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [fp, #12]
	b	.L10237
.L10240:
	str	r3, [r4, #80]
	ldr	r4, [r4, #72]
	ldr	r3, [fp, #12]
	add	r3, r3, #36
	cmp	r4, r3
	sub	r4, r4, #72
	bne	.L10238
	b	.L10239
.L10266:
	.align	2
.L10265:
	.word	.LANCHOR1+3308
	.word	.LANCHOR5-1652
	.fnend
	.size	android_disconnect, .-android_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_start, %function
gbam_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L10289
	add	r5, r0, #8
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L10290
	ldr	r0, .L10295
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L10291
.L10273:
	ldr	r0, [r3, #84]
	mov	r2, #32
	ldr	r1, [r4, #116]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L10292
.L10274:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L10289:
	add	r5, r0, #4
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L10293
	ldr	r0, .L10295+4
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L10294
.L10270:
	ldr	r0, [r3, #88]
	mov	r2, #32
	ldr	r1, [r4, #112]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L10274
	movw	r0, #:lower16:.LC355
	ldr	r1, .L10295+8
	movt	r0, #:upper16:.LC355
	bl	printk
	b	.L10274
.L10291:
	movw	r1, #:lower16:.LC354
	sub	r0, r0, #32
	ldr	r2, .L10295+12
	movt	r1, #:upper16:.LC354
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #12]
	b	.L10273
.L10294:
	movw	r1, #:lower16:.LC354
	sub	r0, r0, #24
	ldr	r2, .L10295+8
	movt	r1, #:upper16:.LC354
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #12]
	b	.L10270
.L10293:
	mov	r0, r5
	bl	_raw_spin_unlock
	ldr	r1, .L10295+8
	movw	r0, #:lower16:.LC117
.L10288:
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC117
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L10290:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC117
	ldr	r1, .L10295+12
	b	.L10288
.L10292:
	movw	r0, #:lower16:.LC355
	ldr	r1, .L10295+12
	movt	r0, #:upper16:.LC355
	bl	printk
	b	.L10274
.L10296:
	.align	2
.L10295:
	.word	.LANCHOR4-3856
	.word	.LANCHOR4-3888
	.word	.LANCHOR3+2896
	.word	.LANCHOR3+2920
	.fnend
	.size	gbam_start, .-gbam_start
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_disconnect, %function
composite_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r0, r0, #32
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	mov	r5, r0
	mov	r0, #0
	bl	set_string_mode
	movw	r0, #:lower16:.LC780
	ldr	r1, .L10320
	add	r6, r5, #60
	movt	r0, #:upper16:.LC780
	bl	printk
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #12]
	mov	r7, r0
	cmp	r3, #0
	beq	.L10298
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, #18]
	tst	r2, #4
	bne	.L10319
.L10299:
	ldr	r4, [r3, #36]!
	cmp	r4, r3
	sub	r4, r4, #72
	beq	.L10301
	mov	r8, #0
.L10300:
	ldr	r3, [r4, #48]
	mov	r0, r4
	cmp	r3, #0
	beq	.L10302
	blx	r3
	str	r8, [r4, #80]
	ldr	r3, [r5, #12]
	ldr	r4, [r4, #72]
	add	r3, r3, #36
	cmp	r3, r4
	sub	r4, r4, #72
	bne	.L10300
.L10301:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2476]
	str	r2, [r5, #12]
	str	r2, [r5, #56]
	ldr	r3, [r3, #32]
	cmp	r3, r2
	beq	.L10305
.L10304:
	mov	r0, r5
	blx	r3
.L10306:
	ldr	r3, [r5, #56]
	cmp	r3, #0
	beq	.L10305
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC859
	movt	r1, #:upper16:.LC859
	add	r0, r0, #32
	bl	_dev_info
	mov	r3, #0
	str	r3, [r5, #56]
.L10305:
	mov	r1, r7
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L10298:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2476]
	ldr	r3, [r3, #32]
	cmp	r3, #0
	bne	.L10304
	b	.L10306
.L10319:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC5
	movt	r2, #:upper16:.LC5
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r5, #12]
	b	.L10299
.L10302:
	str	r3, [r4, #80]
	ldr	r3, [r5, #12]
	ldr	r4, [r4, #72]
	add	r3, r3, #36
	cmp	r4, r3
	sub	r4, r4, #72
	bne	.L10300
	b	.L10301
.L10321:
	.align	2
.L10320:
	.word	.LANCHOR5-1652
	.fnend
	.size	composite_disconnect, .-composite_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_common_release, %function
fsg_common_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #-224]
	cmp	r3, #7
	bne	.L10355
.L10323:
	ldr	r0, [r6, #-236]
	cmp	r0, #0
	beq	.L10327
	ldr	r5, [r6, #-244]
	cmp	r5, #0
	beq	.L10328
	ldr	r7, .L10358
	add	r4, r0, #48
	add	r9, r7, #16
	add	r8, r7, #32
.L10331:
	mov	r1, r7
	mov	r0, r4
	bl	device_remove_file
	mov	r1, r9
	mov	r0, r4
	bl	device_remove_file
	mov	r1, r8
	mov	r0, r4
	bl	device_remove_file
	mov	r0, r4
	ldr	r1, .L10358+4
	bl	device_remove_file
	ldr	r0, [r4, #-48]
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	cmp	r0, #0
	beq	.L10329
	ldrh	r2, [r3, #114]
	tst	r2, #4
	bne	.L10356
.L10330:
	bl	fput
	mov	r3, #0
	str	r3, [r4, #-48]
.L10329:
	mov	r0, r4
	add	r4, r4, #392
	bl	device_unregister
	subs	r5, r5, #1
	bne	.L10331
	ldr	r0, [r6, #-236]
.L10328:
	bl	kfree
.L10327:
	ldr	r5, [r6, #-268]
	add	r4, r5, #32
	add	r5, r5, #160
.L10332:
	ldr	r0, [r4, #-32]
	add	r4, r4, #32
	bl	kfree
	cmp	r5, r4
	bne	.L10332
	ldr	r0, [r6, #-268]
	bl	kfree
	ldrb	r3, [r6, #-192]	@ zero_extendqisi2
	tst	r3, #2
	bne	.L10357
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10355:
	sub	r4, r0, #292
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #-224]
	mov	r5, r0
	cmp	r3, #6
	bgt	.L10325
	ldr	r3, [r6, #-280]
	mov	r1, #6
	ldr	r2, [r6, #-168]
	str	r1, [r6, #-224]
	str	r3, [r6, #-220]
	cmp	r2, #0
	beq	.L10325
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L10325:
	mov	r0, r4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	sub	r0, r6, #184
	bl	wait_for_completion
	b	.L10323
.L10356:
	movw	r2, #:lower16:.LC799
	add	r0, r3, #96
	movt	r2, #:upper16:.LC799
	mov	r1, r4
	bl	__dynamic_dev_dbg
	ldr	r0, [r4, #-48]
	b	.L10330
.L10357:
	sub	r0, r6, #336
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	kfree
.L10359:
	.align	2
.L10358:
	.word	.LANCHOR0+1760
	.word	.LANCHOR0+1808
	.fnend
	.size	fsg_common_release, .-fsg_common_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_function_init, %function
mass_storage_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, r1
	strd	r8, [sp, #16]
	movw	r9, #:lower16:kmalloc_caches
	movt	r9, #:upper16:kmalloc_caches
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r9, #28]
	.pad #52
	sub	sp, sp, #52
	cmp	r0, #0
	beq	.L10407
	mov	r2, #100
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L10474
.L10361:
	mov	r2, #1
	mov	r1, #256
	movw	r3, #:lower16:.LC870
	str	r2, [r4]
	movt	r3, #:upper16:.LC870
	strh	r1, [r4, #8]	@ movhi
	strb	r2, [r4, #10]
	ldr	r0, [r9, #36]
	str	r3, [sp, #36]
	ldr	r10, [r7]
	cmp	r0, #0
	beq	.L10409
	mov	r2, #340
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L10364
.L10363:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	movw	r1, #32976
	mov	r0, #128
	orr	r3, r3, #2
	strb	r3, [r5, #144]
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r5, #68]
	beq	.L10475
	ldr	r3, [r4, #76]
	movw	r1, #32976
	mov	r0, #392
	str	r3, [r5, #172]
	ldr	r3, [r4, #80]
	str	r10, [r5]
	str	r3, [r5, #176]
	ldr	r3, [r10, #4]
	str	r3, [r5, #48]
	ldr	r3, [r7, #4]
	str	r7, [r5, #4]
	str	r3, [r5, #52]
	bl	__kmalloc
	subs	r8, r0, #0
	beq	.L10380
	add	r7, r5, #28
	movw	r1, #:lower16:.LC871
	ldr	r2, .L10480
	mov	r0, r7
	movt	r1, #:upper16:.LC871
	str	r8, [r5, #100]
	bl	__init_rwsem
	ldrb	r3, [r4, #10]	@ zero_extendqisi2
	movw	ip, #:lower16:fsg_lun_release
	mov	r1, r7
	ldrb	r2, [r8, #24]	@ zero_extendqisi2
	movt	ip, #:upper16:fsg_lun_release
	mov	r7, r8
	add	r0, r10, #32
	adds	r3, r3, #0
	movne	r3, #1
	bfi	r2, r3, #3, #1
	strb	r2, [r8, #24]
	ldrb	r2, [r4, #8]	@ zero_extendqisi2
	ldrb	r3, [r8, #24]	@ zero_extendqisi2
	and	r2, r2, #1
	bfi	r3, r2, #1, #1
	bfi	r3, r2, #0, #1
	mov	r2, r3
	strb	r3, [r8, #24]
	ldrb	r3, [r4, #9]	@ zero_extendqisi2
	bfi	r2, r3, #2, #1
	mov	r3, r2
	strb	r2, [r8, #24]
	ldrb	r2, [r4, #11]	@ zero_extendqisi2
	str	ip, [r8, #380]
	bfi	r3, r2, #7, #1
	strb	r3, [r8, #24]
	str	r0, [r7, #48]!
	mov	r0, r7
	bl	dev_set_drvdata
	ldr	r1, [r4, #68]
	mov	r2, #0
	movw	r3, #:lower16:.LC860
	movt	r3, #:upper16:.LC860
	mov	r0, r7
	cmp	r1, r2
	moveq	r1, r3
	bl	dev_set_name
	mov	r0, r7
	bl	device_register
	cmp	r0, #0
	bne	.L10476
	ldr	r1, .L10480+4
	mov	r0, r7
	bl	device_create_file
	cmp	r0, #0
	bne	.L10372
	ldr	r1, .L10480+8
	mov	r0, r7
	bl	device_create_file
	cmp	r0, #0
	bne	.L10372
	ldr	r1, .L10480+12
	mov	r0, r7
	bl	device_create_file
	cmp	r0, #0
	bne	.L10372
	mov	r0, r7
	ldr	r1, .L10480+16
	bl	device_create_file
	subs	r7, r0, #0
	movne	r8, r7
	movne	r9, r8
	bne	.L10374
	ldr	r1, [r4, #4]
	cmp	r1, #0
	beq	.L10377
	mov	r0, r8
	bl	fsg_lun_open
	cmp	r0, #0
	bne	.L10372
.L10378:
	ldr	r8, [r5, #68]
	mov	r3, #1
	str	r3, [r5, #92]
	add	fp, r8, #96
.L10379:
	mov	r2, #2
	mov	r1, #208
	mov	r0, #16384
	bl	kmalloc_order_trace
	cmp	r0, #0
	str	r0, [r8]
	beq	.L10380
	cmp	r8, fp
	beq	.L10477
	add	r8, r8, #32
	str	r8, [r8, #-24]
	b	.L10379
.L10364:
	mvn	r10, #11
.L10473:
	mov	r0, r4
	bl	kfree
.L10360:
	mov	r0, r10
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10377:
	ldrb	r2, [r8, #24]	@ zero_extendqisi2
	ands	r2, r2, #12
	bne	.L10378
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC873
	mvn	r8, #21
	movt	r1, #:upper16:.LC873
	add	r0, r0, #32
	bl	dev_err
	mov	r2, #1
	mov	r3, #7
	add	r0, r5, #336
	str	r2, [r5, #92]
	str	r3, [r5, #112]
	bl	fsg_common_release
.L10368:
	mov	r10, r8
	b	.L10473
.L10409:
	mov	r5, #16
	b	.L10363
.L10407:
	mov	r4, #16
	b	.L10361
.L10372:
	mov	r8, r0
	mov	r9, r0
.L10374:
	mov	r3, #1
	str	r3, [r5, #92]
.L10371:
	mov	r3, #7
	add	r0, r5, #336
	str	r3, [r5, #112]
	bl	fsg_common_release
.L10400:
	cmn	r9, #4096
	bhi	.L10368
	ldr	r3, [r4]
	cmp	r3, #0
	movne	r7, #0
	addne	r9, sp, #36
	movne	r5, r7
	bne	.L10402
	b	.L10403
.L10404:
	ldr	r3, [r4]
	add	r5, r5, #1
	cmp	r3, r5
	bls	.L10403
.L10402:
	ldr	r1, [r8, #100]
	ldr	r0, [r6, #8]
	ldr	r2, [r9, r5, lsl #2]
	add	r1, r1, r7
	add	r7, r7, #392
	add	r1, r1, #56
	add	r0, r0, #8
	bl	sysfs_create_link
	cmp	r0, #0
	beq	.L10404
	cmp	r5, #0
	mov	r10, r0
	beq	.L10406
.L10405:
	ldr	r0, [r6, #8]
	sub	r5, r5, #1
	ldr	r1, [r9, r5, lsl #2]
	add	r0, r0, #8
	bl	sysfs_remove_link
	cmp	r5, #0
	bne	.L10405
.L10406:
	add	r0, r8, #336
	bl	fsg_common_release
	b	.L10473
.L10403:
	str	r8, [r4, #96]
	mov	r10, #0
	str	r4, [r6, #4]
	b	.L10360
.L10475:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	tst	r3, #2
	beq	.L10364
	mov	r0, r5
	mvn	r10, #11
	bl	kfree
	b	.L10473
.L10476:
	ldr	ip, [r5]
	movw	r1, #:lower16:.LC872
	mov	r3, r0
	movt	r1, #:upper16:.LC872
	mov	r2, #0
	mov	r8, r0
	mov	r9, r0
	add	r0, ip, #32
	bl	_dev_info
	mov	r3, #0
	mov	r0, r7
	str	r3, [r5, #92]
	bl	put_device
	b	.L10371
.L10380:
	mov	r3, #7
	add	r0, r5, #336
	mvn	r8, #11
	str	r3, [r5, #112]
	bl	fsg_common_release
	b	.L10368
.L10477:
	ldr	r2, [r5, #68]
	movw	r3, #65535
	str	r2, [r8, #8]
	ldrh	r1, [r4, #92]
	cmp	r1, r3
	beq	.L10478
.L10383:
	ldr	r3, [r4, #84]
	movw	r2, #:lower16:.LC861
	add	r0, r5, #180
	ldr	ip, [r4, #88]
	movt	r2, #:upper16:.LC861
	cmp	r3, #0
	moveq	r3, r2
	cmp	ip, #0
	beq	.L10468
	movw	r8, #:lower16:.LC862
	movt	r8, #:upper16:.LC862
.L10386:
	movw	r2, #:lower16:.LC875
	str	ip, [sp]
	movt	r2, #:upper16:.LC875
	str	r1, [sp, #4]
	mov	r1, #29
	bl	snprintf
	ldm	r8, {r1, ip}
	movw	r2, #:lower16:.LC876
	movt	r2, #:upper16:.LC876
	ldr	r0, [r8, #8]
	ldm	r2, {r10, lr}
	mov	r2, #0
	strb	r2, [r5, #234]
	str	r1, [r5, #218]	@ unaligned
	ldr	r1, [r8, #12]
	str	r10, [r5, #209]	@ unaligned
	str	lr, [r5, #213]	@ unaligned
	str	ip, [r5, #222]	@ unaligned
	str	r0, [r5, #226]	@ unaligned
	str	r1, [r5, #230]	@ unaligned
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L10387
	ldr	r3, [r5]
	movw	r0, #:lower16:.LC477
	movt	r0, #:upper16:.LC477
	ldr	r1, [r3, #28]
	bl	strcmp
	adds	r3, r0, #0
	movne	r3, #1
.L10387:
	ldrb	lr, [r5, #144]	@ zero_extendqisi2
	mov	r10, #0
	mov	r2, #1
	movw	ip, #:lower16:.LC864
	movw	r0, #:lower16:fsg_main_thread
	str	r10, [r5, #44]
	movt	ip, #:upper16:.LC864
	movt	r0, #:upper16:fsg_main_thread
	str	r2, [r5, #336]
	mov	r1, r5
	mvn	r2, #0
	bfi	lr, r3, #0, #1
	strb	lr, [r5, #144]
	ldr	r3, [r4, #72]
	cmp	r3, r10
	moveq	r3, ip
	bl	kthread_create_on_node
	cmn	r0, #4096
	mov	r8, r0
	str	r0, [r5, #168]
	movhi	r9, r0
	bhi	.L10371
	movw	r1, #:lower16:.LC714
	ldr	r2, .L10480+20
	add	r0, r5, #156
	movt	r1, #:upper16:.LC714
	str	r10, [r5, #152]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC877
	ldr	r2, .L10480
	add	r0, r5, #16
	movt	r1, #:upper16:.LC877
	bl	__init_waitqueue_head
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC878
	movt	r1, #:upper16:.LC878
	add	r0, r0, #32
	bl	_dev_info
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC879
	movt	r1, #:upper16:.LC879
	ldr	r2, [r5, #92]
	add	r0, r0, #32
	bl	_dev_info
	ldr	r0, [r9, #48]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [sp, #16]
	beq	.L10390
	mov	r2, #4096
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	str	r0, [sp, #16]
.L10390:
	ldr	r3, [r5, #92]
	ldr	r8, [r5, #100]
	cmp	r3, #0
	str	r3, [sp, #12]
	ble	.L10391
	movw	r3, #:lower16:.LC865
	movw	r2, #:lower16:.LC866
	str	r4, [sp, #28]
	movw	fp, #:lower16:.LC868
	movt	r3, #:upper16:.LC865
	movt	r2, #:upper16:.LC866
	add	r8, r8, #48
	movt	fp, #:upper16:.LC868
	strd	r2, [sp, #20]
.L10392:
	ldr	r0, [r8, #-48]
	sub	r4, r8, #48
	cmp	r0, #0
	beq	.L10442
	ldr	r3, [sp, #16]
	mov	r2, #4096
	add	r0, r0, #8
	subs	r1, r3, #0
	beq	.L10394
	bl	d_path
	cmn	r0, #4096
	mov	r10, r0
	bhi	.L10394
.L10393:
	ldrb	r4, [r4, #24]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC867
	movw	lr, #:lower16:.LC869
	movt	ip, #:upper16:.LC867
	movt	lr, #:upper16:.LC869
	movw	r9, #:lower16:.LC881
	movw	r1, #:lower16:.LC880
	movt	r9, #:upper16:.LC881
	mov	r0, r8
	tst	r4, #4
	movt	r1, #:upper16:.LC880
	moveq	ip, fp
	tst	r4, #2
	moveq	lr, fp
	tst	r4, #8
	mov	r2, ip
	mov	r3, lr
	bne	.L10397
	str	fp, [sp]
	add	r7, r7, #1
	add	r8, r8, #392
	str	r10, [sp, #4]
	bl	_dev_info
	ldr	r3, [sp, #12]
	cmp	r3, r7
	bne	.L10392
.L10472:
	ldr	r4, [sp, #28]
.L10391:
	ldr	r0, [sp, #16]
	bl	kfree
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #1146
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L10479
.L10399:
	ldr	r0, [r5, #168]
	mov	r9, r5
	mov	r8, r5
	bl	wake_up_process
	b	.L10400
.L10397:
	movw	r1, #:lower16:.LC880
	stm	sp, {r9, r10}
	add	r7, r7, #1
	movt	r1, #:upper16:.LC880
	add	r8, r8, #392
	bl	_dev_info
	ldr	r3, [sp, #12]
	cmp	r3, r7
	bne	.L10392
	b	.L10472
.L10394:
	ldr	r10, [sp, #20]
	b	.L10393
.L10442:
	ldr	r10, [sp, #24]
	b	.L10393
.L10478:
	ldr	r8, [r10, #28]
	movw	r0, #:lower16:.LC470
	movt	r0, #:upper16:.LC470
	mov	r1, r8
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #769
	beq	.L10383
	movw	r0, #:lower16:.LC471
	mov	r1, r8
	movt	r0, #:upper16:.LC471
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #770
	beq	.L10383
	movw	r0, #:lower16:.LC472
	mov	r1, r8
	movt	r0, #:upper16:.LC472
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #771
	beq	.L10383
	movw	r0, #:lower16:.LC473
	mov	r1, r8
	movt	r0, #:upper16:.LC473
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #774
	beq	.L10383
	movw	r0, #:lower16:.LC474
	mov	r1, r8
	movt	r0, #:upper16:.LC474
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #776
	beq	.L10383
	movw	r0, #:lower16:.LC475
	mov	r1, r8
	movt	r0, #:upper16:.LC475
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #785
	beq	.L10383
	movw	r0, #:lower16:.LC476
	mov	r1, r8
	movt	r0, #:upper16:.LC476
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #786
	beq	.L10383
	movw	r0, #:lower16:.LC477
	mov	r1, r8
	movt	r0, #:upper16:.LC477
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #787
	beq	.L10383
	movw	r0, #:lower16:.LC478
	mov	r1, r8
	movt	r0, #:upper16:.LC478
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #788
	beq	.L10383
	movw	r0, #:lower16:.LC479
	mov	r1, r8
	movt	r0, #:upper16:.LC479
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #790
	beq	.L10383
	movw	r0, #:lower16:.LC480
	mov	r1, r8
	movt	r0, #:upper16:.LC480
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #792
	beq	.L10383
	movw	r0, #:lower16:.LC481
	mov	r1, r8
	movt	r0, #:upper16:.LC481
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #793
	beq	.L10383
	movw	r0, #:lower16:.LC482
	mov	r1, r8
	movt	r0, #:upper16:.LC482
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #800
	beq	.L10383
	movw	r0, #:lower16:.LC483
	mov	r1, r8
	movt	r0, #:upper16:.LC483
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #801
	beq	.L10383
	movw	r0, #:lower16:.LC484
	mov	r1, r8
	movt	r0, #:upper16:.LC484
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #802
	beq	.L10383
	movw	r0, #:lower16:.LC485
	mov	r1, r8
	movt	r0, #:upper16:.LC485
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #803
	beq	.L10383
	movw	r0, #:lower16:.LC486
	mov	r1, r8
	movt	r0, #:upper16:.LC486
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #804
	beq	.L10383
	movw	r0, #:lower16:.LC487
	mov	r1, r8
	movt	r0, #:upper16:.LC487
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #805
	beq	.L10383
	movw	r0, #:lower16:.LC488
	mov	r1, r8
	movt	r0, #:upper16:.LC488
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #806
	beq	.L10383
	movw	r0, #:lower16:.LC489
	mov	r1, r8
	movt	r0, #:upper16:.LC489
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #807
	beq	.L10383
	movw	r0, #:lower16:.LC490
	mov	r1, r8
	movt	r0, #:upper16:.LC490
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #808
	beq	.L10383
	movw	r0, #:lower16:.LC491
	mov	r1, r8
	movt	r0, #:upper16:.LC491
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #809
	beq	.L10383
	movw	r0, #:lower16:.LC492
	mov	r1, r8
	movt	r0, #:upper16:.LC492
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #816
	beq	.L10383
	movw	r0, #:lower16:.LC493
	mov	r1, r8
	movt	r0, #:upper16:.LC493
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #817
	beq	.L10383
	movw	r0, #:lower16:.LC494
	mov	r1, r8
	movt	r0, #:upper16:.LC494
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #818
	beq	.L10383
	movw	r0, #:lower16:.LC495
	mov	r1, r8
	movt	r0, #:upper16:.LC495
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #819
	beq	.L10383
	movw	r0, #:lower16:.LC496
	mov	r1, r8
	movt	r0, #:upper16:.LC496
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #820
	beq	.L10383
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC874
	mov	r2, r8
	movt	r1, #:upper16:.LC874
	add	r0, r0, #32
	bl	dev_warn
	movw	r1, #921
	b	.L10383
.L10468:
	ldr	r2, [r5, #100]
	ldrb	r2, [r2, #24]	@ zero_extendqisi2
	tst	r2, #8
	beq	.L10438
	movw	r8, #:lower16:.LC862
	movt	r8, #:upper16:.LC862
	mov	ip, r8
	b	.L10386
.L10474:
	mvn	r10, #11
	b	.L10360
.L10438:
	movw	ip, #:lower16:.LC863
	movw	r8, #:lower16:.LC862
	movt	ip, #:upper16:.LC863
	movt	r8, #:upper16:.LC862
	b	.L10386
.L10479:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC882
	ldr	r3, [r5, #168]
	movt	r2, #:upper16:.LC882
	ldr	r0, .L10480+24
	add	r1, r1, #32
	ldr	r3, [r3, #608]
	bl	__dynamic_dev_dbg
	b	.L10399
.L10481:
	.align	2
.L10480:
	.word	.LANCHOR1+4004
	.word	.LANCHOR0+1792
	.word	.LANCHOR0+1808
	.word	.LANCHOR0+1776
	.word	.LANCHOR0+1760
	.word	.LANCHOR1+3972
	.word	.LANCHOR4+1128
	.fnend
	.size	mass_storage_function_init, .-mass_storage_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_disable, %function
android_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r0, #8]
	ldr	r1, [r0, #20]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r0, #20]
	bne	.L10482
	mov	r6, r0
	ldr	r0, [r5]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L10484
	blx	r3
	ldr	r0, [r5]
.L10484:
	ldr	r0, [r0, #4]
	ldr	r1, [r5, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r4, [r6, #508]!
	cmp	r6, r4
	sub	r4, r4, #120
	beq	.L10482
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #:lower16:.LC5
	ldr	r10, .L10508
	movt	r3, #:upper16:.LANCHOR2
	movt	r2, #:upper16:.LC5
	movw	r9, #:lower16:.LC883
	add	r7, r5, #60
	movt	r9, #:upper16:.LC883
	str	r3, [sp]
	str	r2, [sp, #4]
	b	.L10493
.L10495:
	add	r0, r4, #28
	bl	list_del
.L10492:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r1, r4
	mov	r0, r5
	bl	unbind_config
.L10486:
	ldr	r4, [r4, #120]
	cmp	r6, r4
	sub	r4, r4, #120
	beq	.L10482
.L10493:
	mov	r3, r4
	sub	r1, r10, #12
	ldr	r2, [r5, #12]
	mov	r0, r9
	bl	printk
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #24]
	mov	r8, r0
	cmp	r3, #0
	beq	.L10506
	ldr	r3, [r5, #12]
	cmp	r4, r3
	bne	.L10495
	ldr	r3, [sp]
	ldrh	r3, [r3, #18]
	tst	r3, #4
	moveq	r2, r4
	bne	.L10507
.L10487:
	ldr	r3, [r2, #36]!
	cmp	r3, r2
	sub	fp, r3, #72
	beq	.L10489
.L10488:
	ldr	r3, [fp, #48]
	mov	r0, fp
	cmp	r3, #0
	beq	.L10490
	blx	r3
	mov	r3, #0
	str	r3, [fp, #80]
	ldr	r3, [r5, #12]
	ldr	fp, [fp, #72]
	add	r3, r3, #36
	cmp	r3, fp
	sub	fp, fp, #72
	bne	.L10488
.L10489:
	mov	r3, #0
	str	r3, [r5, #12]
	str	r3, [r5, #56]
	ldr	r3, [r4, #24]
	cmp	r3, #0
	beq	.L10492
	b	.L10495
.L10482:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10506:
	movw	r0, #:lower16:.LC102
	mov	r1, #896
	movt	r0, #:upper16:.LC102
	bl	warn_slowpath_null
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L10486
.L10490:
	str	r3, [fp, #80]
	ldr	r3, [r5, #12]
	ldr	fp, [fp, #72]
	add	r3, r3, #36
	cmp	fp, r3
	sub	fp, fp, #72
	bne	.L10488
	b	.L10489
.L10507:
	ldr	r1, [r5]
	ldm	sp, {r0, r2}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r2, [r5, #12]
	b	.L10487
.L10509:
	.align	2
.L10508:
	.word	.LANCHOR5-1616
	.fnend
	.size	android_disable, .-android_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_android_function_enable, %function
adb_android_function_enable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mov	r1, #1
	ldr	r0, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, #0
	beq	.L10512
	bx	lr
.L10512:
	b	android_disable
	.fnend
	.size	adb_android_function_enable, .-adb_android_function_enable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_release, %function
adb_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r1, .L10536
	ldr	r0, .L10536+4
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	___ratelimit
	cmp	r0, #0
	bne	.L10532
.L10514:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #3476]
	ldrb	r2, [r3, #160]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L10533
.L10515:
	add	r2, r3, #116
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10533:
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r6, [r3, #1852]
	ldr	r5, [r3, #1868]
	cmp	r5, #0
	beq	.L10534
.L10516:
	add	r7, r5, #24
	mov	r8, #0
	mov	r0, r7
	bl	mutex_lock
	ldrb	r3, [r6, #1]	@ zero_extendqisi2
	strb	r8, [r6]
	cmp	r3, r8
	beq	.L10535
	mov	r0, r5
	bl	android_disable
	str	r8, [r6, #4]
.L10520:
	mov	r0, r7
	bl	mutex_unlock
.L10519:
	ldr	r3, [r4, #3476]
	mov	r2, #1
	strb	r2, [r3, #161]
	b	.L10515
.L10534:
	ldr	r5, [r6, #4]
	cmp	r5, #0
	bne	.L10516
	movw	r0, #:lower16:.LC885
	ldr	r1, .L10536+8
	movt	r0, #:upper16:.LC885
	bl	printk
	ldrb	r3, [r6, #1]	@ zero_extendqisi2
	strb	r5, [r6]
	cmp	r3, #0
	moveq	r5, r3
	str	r5, [r6, #4]
	b	.L10519
.L10535:
	str	r3, [r6, #4]
	b	.L10520
.L10532:
	movw	r0, #:lower16:.LC884
	movt	r0, #:upper16:.LC884
	bl	printk
	b	.L10514
.L10537:
	.align	2
.L10536:
	.word	.LANCHOR5-1608
	.word	.LANCHOR0+1824
	.word	.LANCHOR5-1596
	.fnend
	.size	adb_release, .-adb_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_enable, %function
ffs_function_enable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mov	r1, #1
	ldr	r0, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, #0
	beq	.L10540
	bx	lr
.L10540:
	b	android_disable
	.fnend
	.size	ffs_function_enable, .-ffs_function_enable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_enable, %function
android_enable:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r6, [r0, #8]
	ldr	r5, [r0, #20]
	cmp	r5, #0
	beq	.L10719
	sub	r5, r5, #1
	mov	r9, r0
	cmp	r5, #0
	str	r5, [r0, #20]
	movne	r5, #0
	bne	.L10541
	mov	r7, r9
	ldr	r4, [r7, #508]!
	cmp	r7, r4
	sub	r4, r4, #120
	beq	.L10544
	ldr	r8, .L10736
	movw	r3, #:lower16:.LC891
	movw	r2, #:lower16:.LC894
	movt	r3, #:upper16:.LC891
	movt	r2, #:upper16:.LC894
	str	r3, [sp, #16]
	str	r2, [sp, #20]
.L10582:
	ldrh	r2, [r8]
	ldrb	r3, [r4, #20]	@ zero_extendqisi2
	tst	r2, #4
	bne	.L10720
.L10545:
	cmp	r3, #0
	bne	.L10546
	ldr	r2, .L10736+4
	mvn	r5, #21
	ldrh	r2, [r2]
	tst	r2, #4
	bne	.L10587
.L10548:
	ldr	r2, .L10736+8
	movw	r0, #:lower16:.LC895
	mov	r3, r5
	movt	r0, #:upper16:.LC895
	mov	r1, r2
	bl	printk
.L10541:
	mov	r0, r5
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10546:
	mov	r2, r6
	ldr	r1, [r2, #36]!
	cmp	r2, r1
	sub	r0, r1, #28
	bne	.L10552
	b	.L10549
.L10721:
	ldr	r1, [r0, #28]
	cmp	r2, r1
	sub	r0, r1, #28
	beq	.L10549
.L10552:
	ldrb	r1, [r1, #-8]	@ zero_extendqisi2
	cmp	r1, r3
	bne	.L10721
	ldr	r2, .L10736+4
	ldrh	r2, [r2]
	tst	r2, #4
	beq	.L10722
	ldr	r1, [r6]
	mvn	r5, #15
.L10547:
	ldr	ip, [r4]
	add	r1, r1, #32
	stm	sp, {r3, r5}
	ldr	r0, .L10736+12
	ldr	r2, [sp, #20]
	mov	r3, ip
	bl	__dynamic_dev_dbg
.L10581:
	cmp	r5, #0
	blt	.L10548
.L10580:
	ldr	r4, [r4, #120]
	cmp	r7, r4
	sub	r4, r4, #120
	bne	.L10582
.L10544:
	movw	r3, #:lower16:.LC896
	mov	r2, #0
	movt	r3, #:upper16:.LC896
	cmp	r9, #0
	str	r3, [sp, #24]
	str	r2, [sp, #28]
	beq	.L10541
	ldr	r6, .L10736+16
	movw	r0, #:lower16:.LC897
	add	r4, r9, #452
	movt	r0, #:upper16:.LC897
	mov	r2, r6
	mov	r1, r6
	bl	printk
	mov	r0, r4
	bl	work_busy
	cmp	r0, #0
	beq	.L10584
	mov	r0, r4
	bl	cancel_delayed_work
	movw	r0, #:lower16:.LC898
	mov	r2, r6
	mov	r1, r6
	movt	r0, #:upper16:.LC898
	bl	printk
.L10584:
	ldr	r0, [r9, #12]
	add	r2, sp, #24
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env
	mov	r3, #0
	mov	r0, #1
	str	r3, [r9, #504]
	bl	msecs_to_jiffies
	movw	r1, #:lower16:system_wq
	mov	r3, r0
	movt	r1, #:upper16:system_wq
	mov	r2, r4
	ldr	r1, [r1]
	mov	r0, #4
	bl	queue_delayed_work_on
	b	.L10541
.L10549:
	add	fp, r4, #28
	str	r6, [r4, #24]
	ldr	r1, [r6, #40]
	mov	r0, fp
	mov	r10, #0
	bl	__list_add
	add	r2, r4, #36
	mov	r1, #64
	add	r0, r4, #48
	str	r2, [r4, #36]
	str	r2, [r4, #40]
	strb	r10, [r4, #44]
	bl	__memzero
	mov	r0, r4
	bl	android_bind_config
	subs	r5, r0, #0
	blt	.L10723
	ldr	r3, .L10736+20
	ldr	r1, [r6]
	ldrh	r3, [r3]
	tst	r3, #4
	bne	.L10724
.L10556:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L10560
	ldr	r0, .L10736+24
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L10725
.L10560:
	ldr	r3, [r4, #52]
	cmp	r3, #0
	beq	.L10561
	ldr	r0, .L10736+24
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L10726
.L10561:
	ldr	r3, [r4, #56]
	cmp	r3, #0
	beq	.L10562
	ldr	r0, .L10736+24
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L10727
.L10562:
	ldr	r3, [r4, #60]
	cmp	r3, #0
	beq	.L10563
	ldr	r0, .L10736+24
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L10728
.L10563:
	ldr	r3, [r4, #64]
	cmp	r3, #0
	beq	.L10564
	ldr	r0, .L10736+24
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L10729
.L10564:
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L10565
	ldr	r0, .L10736+24
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L10730
.L10565:
	ldr	r3, [r4, #72]
	cmp	r3, #0
	beq	.L10566
	ldr	r0, .L10736+24
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L10731
.L10567:
	ldr	r3, [r4, #80]
	cmp	r3, #0
	beq	.L10568
.L10734:
	ldr	r0, .L10736+24
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L10732
.L10569:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L10571
.L10572:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L10573
.L10735:
	ldr	r0, .L10736+24
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L10733
.L10574:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L10576
.L10577:
	mov	r0, r1
	ldr	r3, [r0, #8]!
	cmp	r0, r3
	sub	r3, r3, #12
	beq	.L10578
.L10554:
	mov	r1, #0
.L10579:
	ldr	r2, [r3, #12]
	str	r1, [r3]
	cmp	r0, r2
	sub	r3, r2, #12
	bne	.L10579
.L10578:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	cmp	r5, #0
	str	r2, [r3, #3228]
	beq	.L10580
	ldr	r3, .L10736+4
	ldrh	r3, [r3]
	tst	r3, #4
	beq	.L10581
	ldr	r1, [r6]
	b	.L10586
.L10720:
	ldr	r1, [r6]
	str	r4, [sp, #4]
	ldr	ip, [r4]
	ldr	r0, .L10736+28
	ldr	r2, [sp, #16]
	add	r1, r1, #32
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldrb	r3, [r4, #20]	@ zero_extendqisi2
	b	.L10545
.L10723:
	mov	r0, fp
	bl	list_del
	str	r10, [r4, #24]
	ldr	r1, [r6]
	mov	r0, r1
	ldr	r3, [r0, #8]!
	cmp	r0, r3
	sub	r3, r3, #12
	bne	.L10554
	ldr	r2, .L10736+4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r10, [r3, #3228]
	ldrh	r3, [r2]
	tst	r3, #4
	beq	.L10548
.L10586:
	ldrb	r3, [r4, #20]	@ zero_extendqisi2
	b	.L10547
.L10731:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC893
	add	r1, r1, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC893
	mov	r3, #6
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
.L10566:
	ldr	r3, [r4, #76]
	cmp	r3, #0
	beq	.L10567
	ldr	r0, .L10736+24
	ldrh	r2, [r0]
	tst	r2, #4
	beq	.L10567
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC893
	add	r1, r1, #32
	mov	r3, #7
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC893
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #80]
	ldr	r1, [r6]
	cmp	r3, #0
	bne	.L10734
.L10568:
	ldr	r3, [r4, #84]
	cmp	r3, #0
	beq	.L10570
	ldr	r0, .L10736+24
	ldrh	r2, [r0]
	tst	r2, #4
	beq	.L10569
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC893
	add	r1, r1, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC893
	mov	r3, #9
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
.L10570:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L10571
	ldr	r0, .L10736+24
	ldrh	r2, [r0]
	tst	r2, #4
	beq	.L10572
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC893
	add	r1, r1, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC893
	mov	r3, #10
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
.L10571:
	ldr	r3, [r4, #92]
	cmp	r3, #0
	beq	.L10572
	ldr	r0, .L10736+24
	ldrh	r2, [r0]
	tst	r2, #4
	beq	.L10572
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC893
	add	r1, r1, #32
	mov	r3, #11
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC893
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #96]
	ldr	r1, [r6]
	cmp	r3, #0
	bne	.L10735
.L10573:
	ldr	r3, [r4, #100]
	cmp	r3, #0
	beq	.L10575
	ldr	r0, .L10736+24
	ldrh	r2, [r0]
	tst	r2, #4
	beq	.L10574
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC893
	add	r1, r1, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC893
	mov	r3, #13
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
.L10575:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L10576
	ldr	r0, .L10736+24
	ldrh	r2, [r0]
	tst	r2, #4
	beq	.L10577
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC893
	add	r1, r1, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC893
	mov	r3, #14
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
.L10576:
	ldr	r3, [r4, #108]
	cmp	r3, #0
	beq	.L10577
	ldr	r0, .L10736+24
	ldrh	r2, [r0]
	tst	r2, #4
	beq	.L10577
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC893
	add	r1, r1, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC893
	mov	r3, #15
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L10577
.L10587:
	ldr	r1, [r6]
	b	.L10547
.L10724:
	ldrb	r2, [r4, #45]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC868
	movw	lr, #:lower16:.LC886
	movt	ip, #:upper16:.LC868
	movt	lr, #:upper16:.LC886
	ldrb	r3, [r4, #20]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC887
	add	r10, r1, #32
	movt	r0, #:upper16:.LC887
	tst	r2, #1
	moveq	lr, ip
	tst	r2, #2
	moveq	r0, ip
	tst	r2, #4
	beq	.L10559
	ldr	r1, [r1, #20]
	movw	r2, #:lower16:.LC888
	movw	ip, #:lower16:.LC889
	movt	r2, #:upper16:.LC888
	movt	ip, #:upper16:.LC889
	cmp	r1, #2
	movhi	ip, r2
.L10559:
	movw	r2, #:lower16:.LC892
	mov	r1, r10
	stm	sp, {r4, lr}
	str	r0, [sp, #8]
	movt	r2, #:upper16:.LC892
	ldr	r0, .L10736+32
	str	ip, [sp, #12]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L10556
.L10732:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC893
	add	r1, r1, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC893
	mov	r3, #8
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L10568
.L10730:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC893
	add	r1, r1, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC893
	mov	r3, #5
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L10565
.L10729:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC893
	add	r1, r1, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC893
	mov	r3, #4
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L10564
.L10733:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC893
	add	r1, r1, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC893
	mov	r3, #12
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L10573
.L10728:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC893
	add	r1, r1, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC893
	mov	r3, #3
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L10563
.L10727:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC893
	add	r1, r1, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC893
	mov	r3, #2
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L10562
.L10726:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC893
	add	r1, r1, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC893
	mov	r3, #1
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L10561
.L10725:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC893
	add	r1, r1, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC893
	mov	r3, #0
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L10560
.L10719:
	movw	r0, #:lower16:.LC890
	mov	r1, #500
	movt	r0, #:upper16:.LC890
	bl	warn_slowpath_null
	b	.L10541
.L10722:
	mvn	r5, #15
	b	.L10548
.L10737:
	.align	2
.L10736:
	.word	.LANCHOR4+1170
	.word	.LANCHOR4+1194
	.word	.LANCHOR5-1576
	.word	.LANCHOR4+1176
	.word	.LANCHOR5-1560
	.word	.LANCHOR4+1218
	.word	.LANCHOR4+1242
	.word	.LANCHOR4+1152
	.word	.LANCHOR4+1200
	.fnend
	.size	android_enable, .-android_enable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	enable_store, %function
enable_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r3
	mov	r7, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	bl	dev_get_drvdata
	ldr	r4, [r0, #8]
	mov	r3, #0
	str	r3, [sp, #36]
	cmp	r4, r3
	mvneq	r4, #18
	bne	.L10785
.L10738:
	mov	r0, r4
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10785:
	add	r3, r0, #24
	mov	r5, r0
	mov	r0, r3
	str	r3, [sp, #8]
	bl	mutex_lock
	movw	r1, #:lower16:.LC427
	add	r2, sp, #36
	movt	r1, #:upper16:.LC427
	mov	r0, r7
	bl	sscanf
	movw	r0, #:lower16:.LC901
	ldrb	r2, [r5, #16]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC901
	ldr	r1, [sp, #36]
	bl	printk
	ldr	r3, [sp, #36]
	cmp	r3, #0
	beq	.L10740
	ldrb	r3, [r5, #16]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L10786
	ldr	r8, .L10793
	ldr	r0, .L10793+4
	sub	r1, r8, #4
	bl	___ratelimit
	cmp	r0, #0
	bne	.L10787
.L10756:
	ldr	r0, [sp, #8]
	mov	r4, r6
	bl	mutex_unlock
	b	.L10738
.L10740:
	ldrb	r1, [r5, #16]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L10788
	ldr	r0, [r4]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L10764
	blx	r3
.L10764:
	mov	r3, #0
	strb	r3, [r5, #16]
	b	.L10756
.L10788:
	mov	r0, r5
	mov	r9, r5
	bl	android_disable
	ldr	r7, [r9, #508]!
	sub	r7, r7, #120
.L10758:
	add	r3, r7, #120
	cmp	r3, r9
	beq	.L10764
	mov	r8, r7
	ldr	r4, [r8, #112]!
	cmp	r8, r4
	sub	r4, r4, #4
	beq	.L10760
.L10759:
	ldr	r3, [r4]
	mov	r0, r3
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L10761
	blx	r3
	ldr	r4, [r4, #4]
	cmp	r8, r4
	sub	r4, r4, #4
	bne	.L10759
.L10760:
	ldr	r7, [r7, #120]
	sub	r7, r7, #120
	b	.L10758
.L10761:
	ldr	r4, [r4, #4]
	cmp	r8, r4
	sub	r4, r4, #4
	bne	.L10759
	b	.L10760
.L10787:
	ldrb	ip, [r5, #16]	@ zero_extendqisi2
	movw	r3, #:lower16:.LC899
	movw	r2, #:lower16:.LC900
	movt	r3, #:upper16:.LC899
	movw	r0, #:lower16:.LC913
	movt	r2, #:upper16:.LC900
	sub	r1, r8, #4
	movt	r0, #:upper16:.LC913
	cmp	ip, #0
	movne	r2, r3
	bl	printk
	b	.L10756
.L10786:
	movw	r3, #:lower16:.LANCHOR1
	movw	ip, #:lower16:.LC903
	ldr	r0, .L10793+8
	movt	r3, #:upper16:.LANCHOR1
	movt	ip, #:upper16:.LC903
	ldr	r8, .L10793
	ldr	r3, [r3, #3648]
	movw	r1, #:lower16:.LC876
	mov	r2, #255
	movt	r1, #:upper16:.LC876
	str	ip, [sp, #16]
	movw	r10, #:lower16:.LANCHOR0
	movt	r10, #:upper16:.LANCHOR0
	mov	r9, r5
	strb	r3, [r4, #48]
	movw	r3, #:lower16:.LC904
	mov	r7, r3
	bl	strncpy
	mov	r3, r7
	movw	r1, #:lower16:.LC902
	ldr	r0, .L10793+12
	movt	r3, #:upper16:.LC904
	mov	r2, #255
	movt	r1, #:upper16:.LC902
	str	r3, [sp, #20]
	bl	strncpy
	movw	r2, #:lower16:.LC906
	ldr	r3, [r10, #144]
	mov	r1, r2
	ldrb	r2, [r10, #140]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC906
	str	r3, [r4, #25]	@ unaligned
	str	r1, [sp, #12]
	ldrh	r3, [r10, #148]
	strb	r2, [r4, #21]
	str	r5, [sp, #24]
	strh	r3, [r4, #29]	@ unaligned
	ldr	r3, [r9, #508]!
	sub	fp, r3, #120
.L10742:
	add	r7, fp, #120
	cmp	r7, r9
	beq	.L10789
	mov	r7, fp
	ldr	r5, [r7, #112]!
	sub	r5, r5, #4
.L10743:
	add	r3, r5, #4
	cmp	r3, r7
	bne	.L10748
	ldr	fp, [fp, #120]
	sub	fp, fp, #120
	b	.L10742
.L10789:
	movw	r1, #:lower16:.LC876
	mov	r2, #255
	ldr	r0, .L10793+8
	movt	r1, #:upper16:.LC876
	ldr	r5, [sp, #24]
	sub	r9, r8, #4
	bl	strncpy
	movw	r1, #:lower16:.LC902
	mov	r2, #255
	ldr	r0, .L10793+12
	movt	r1, #:upper16:.LC902
	bl	strncpy
	ldrb	lr, [r10, #141]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC909
	mov	r1, r9
	ldrh	ip, [r4, #29]	@ unaligned
	movt	r0, #:upper16:.LC909
	ldrb	r10, [r10, #142]	@ zero_extendqisi2
	ldrh	r3, [r4, #27]	@ unaligned
	strb	lr, [r4, #22]
	ldrh	r2, [r4, #25]	@ unaligned
	strb	r10, [r4, #23]
	str	ip, [sp]
	bl	printk
	movw	r0, #:lower16:.LC910
	ldrb	r3, [r4, #23]	@ zero_extendqisi2
	ldrb	r2, [r4, #22]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC910
	ldrb	r1, [r4, #21]	@ zero_extendqisi2
	bl	printk
	movw	r0, #:lower16:.LC911
	mov	r1, r9
	movt	r0, #:upper16:.LC911
	bl	printk
	ldr	r4, [r5, #508]
	sub	r4, r4, #120
.L10750:
	add	r3, r4, #120
	cmp	r7, r3
	beq	.L10790
	mov	r10, r4
	ldr	r9, [r10, #112]!
	sub	r9, r9, #4
.L10751:
	add	r3, r9, #4
	cmp	r3, r10
	beq	.L10791
	ldr	r0, [r9]
	ldr	r3, [r0, #32]
	cmp	r3, #0
	beq	.L10752
	blx	r3
.L10752:
	ldr	r9, [r9, #4]
	sub	r9, r9, #4
	b	.L10751
.L10791:
	ldr	r4, [r4, #120]
	sub	r4, r4, #120
	b	.L10750
.L10790:
	mov	r0, r5
	mov	r4, r6
	bl	android_enable
	cmp	r0, #0
	movge	r3, #1
	strbge	r3, [r5, #16]
	bge	.L10756
	sub	r2, r8, #4
	movw	r0, #:lower16:.LC912
	mov	r1, r2
	movt	r0, #:upper16:.LC912
	bl	printk
	mov	r3, #0
	ldr	r0, [sp, #8]
	strb	r3, [r5, #16]
	strb	r3, [r5, #48]
	bl	mutex_unlock
	b	.L10738
.L10748:
	ldr	r3, [r5]
	sub	r1, r8, #4
	ldr	r0, [sp, #16]
	ldr	r2, [r3]
	bl	printk
	ldr	r3, [r5]
	ldr	r1, [sp, #20]
	ldr	r3, [r3]
	mov	r0, r3
	str	r3, [sp, #28]
	bl	strcmp
	subs	r2, r0, #0
	ldr	r1, [sp, #12]
	ldr	r3, [sp, #28]
	mov	r0, r3
	beq	.L10792
	bl	strcmp
	subs	r2, r0, #0
	str	r2, [sp, #28]
	bne	.L10746
	ldrh	r3, [r4, #29]	@ unaligned
	movw	r0, #:lower16:.LC908
	movt	r0, #:upper16:.LC908
	cmp	r3, #1024
	beq	.L10745
	bl	printk
	ldr	r2, [sp, #28]
	mov	r3, #8
	strb	r2, [r4, #29]
	strb	r3, [r4, #30]
.L10746:
	ldr	r5, [r5, #4]
	sub	r5, r5, #4
	b	.L10743
.L10792:
	movw	r0, #:lower16:.LC905
	str	r2, [sp, #28]
	movt	r0, #:upper16:.LC905
	bl	printk
	mov	r3, #4
	ldr	r1, [sp, #12]
	ldr	r2, [sp, #28]
	strb	r2, [r4, #29]
	strb	r3, [r4, #30]
	ldr	r3, [r5]
	ldr	r0, [r3]
	bl	strcmp
	cmp	r0, #0
	bne	.L10746
.L10745:
	movw	r0, #:lower16:.LC907
	movt	r0, #:upper16:.LC907
	bl	printk
	mov	r2, #0
	mov	r3, #12
	strb	r2, [r4, #29]
	strb	r3, [r4, #30]
	b	.L10746
.L10794:
	.align	2
.L10793:
	.word	.LANCHOR5-1520
	.word	.LANCHOR0+1900
	.word	.LANCHOR1+2764
	.word	.LANCHOR1+2508
	.fnend
	.size	enable_store, .-enable_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_android_function_disable, %function
adb_android_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mov	r1, #0
	ldr	r0, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, r1
	beq	.L10797
	bx	lr
.L10797:
	b	android_enable
	.fnend
	.size	adb_android_function_disable, .-adb_android_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_open, %function
adb_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r0, .L10816
	strd	r6, [sp, #8]
	mov	r6, r1
	ldr	r1, .L10816+4
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	___ratelimit
	cmp	r0, #0
	bne	.L10814
.L10799:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #3476]
	cmp	r3, #0
	beq	.L10806
	add	r2, r3, #116
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r5, [r2]
	add	r5, r5, #1
	strex	r1, r5, [r2]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r5, #1
	bne	.L10801
	ldr	r3, [r4, #3476]
	mov	r2, #0
	str	r3, [r6, #124]
	ldrb	r1, [r3, #161]	@ zero_extendqisi2
	str	r2, [r3, #104]
	cmp	r1, r2
	bne	.L10815
.L10803:
	mov	r2, #1
	mov	r0, #0
	strb	r2, [r3, #160]
.L10798:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10815:
	movw	r1, #:lower16:.LANCHOR0
	strb	r2, [r3, #161]
	movt	r1, #:upper16:.LANCHOR0
	ldr	r7, [r1, #1852]
	ldr	r6, [r1, #1868]
	cmp	r6, #0
	strbeq	r5, [r7]
	streq	r6, [r7, #4]
	beq	.L10803
	add	r8, r6, #24
	mov	r0, r8
	bl	mutex_lock
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	strb	r5, [r7]
	str	r6, [r7, #4]
	cmp	r3, #0
	beq	.L10805
	mov	r0, r6
	bl	android_enable
.L10805:
	mov	r0, r8
	bl	mutex_unlock
	ldr	r3, [r4, #3476]
	b	.L10803
.L10801:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #15
	b	.L10798
.L10806:
	mvn	r0, #18
	b	.L10798
.L10814:
	movw	r0, #:lower16:.LC914
	movt	r0, #:upper16:.LC914
	bl	printk
	b	.L10799
.L10817:
	.align	2
.L10816:
	.word	.LANCHOR0+1924
	.word	.LANCHOR5-1508
	.fnend
	.size	adb_open, .-adb_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_disable, %function
ffs_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mov	r1, #0
	ldr	r0, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, r1
	beq	.L10820
	bx	lr
.L10820:
	b	android_enable
	.fnend
	.size	ffs_function_disable, .-ffs_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fmbim_reset_cmd_complete, %function
fmbim_reset_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L10839
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L10836
.L10822:
	add	r5, r4, #204
	mov	r0, r5
	bl	_raw_spin_lock
	movw	r3, #:lower16:kmalloc_caches
	mov	r2, #16
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L10823
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L10837
	mov	r1, #16
	mov	r2, #0
	stm	r3, {r1, r2}
.L10824:
	add	r0, r3, #8
	add	r2, r4, #208
	ldr	r1, [r4, #212]
	bl	__list_add
	mov	r0, r5
	bl	_raw_spin_unlock
	ldr	r0, .L10839+4
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L10838
.L10826:
	add	r0, r4, #108
	mov	r3, #0
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L10823:
	mov	r3, r2
	str	r2, [r0, #16]
	str	r0, [r0, #20]
	b	.L10824
.L10837:
	mvn	r3, #11
	b	.L10824
.L10836:
	movw	r1, #:lower16:.LC609
	ldr	r2, .L10839+8
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC609
	bl	__dynamic_pr_debug
	b	.L10822
.L10838:
	ldr	r3, .L10839+8
	movw	r1, #:lower16:.LC610
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC610
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L10826
.L10840:
	.align	2
.L10839:
	.word	.LANCHOR4-2496
	.word	.LANCHOR4-2464
	.word	.LANCHOR5-3376
	.fnend
	.size	fmbim_reset_cmd_complete, .-fmbim_reset_cmd_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_connect_work, %function
gbam_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r5, r0, #276
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	sub	r8, r0, #280
	strd	r10, [sp, #24]
	mov	r0, r8
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #-272]
	mov	r0, r5
	cmp	r3, #0
	beq	.L10888
	bl	_raw_spin_unlock
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-264]
	tst	r3, #4
	bne	.L10889
.L10841:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10889:
	sub	r3, r4, #284
	movw	r2, #:lower16:gbam_notify
	ldr	r0, [r4, #-260]
	mov	r1, r3
	movt	r2, #:upper16:gbam_notify
	str	r3, [sp, #24]
	bl	msm_bam_dmux_open
	subs	r6, r0, #0
	bne	.L10890
	movw	r3, #:lower16:.LANCHOR4
	sub	r1, r4, #264
	mov	r7, r3
	mov	r0, #1
	bl	_set_bit
	mov	r3, r7
	movt	r3, #:upper16:.LANCHOR4
	mov	r2, r3
	movw	r3, #1266
	ldrh	r3, [r2, r3]
	str	r2, [sp, #16]
	tst	r3, #4
	bne	.L10891
.L10846:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-272]
	str	r0, [sp, #20]
	cmp	r3, #0
	beq	.L10892
	ldr	r9, [r3, #88]
	movw	r2, #1290
	movw	r1, #:lower16:.LANCHOR0
	ldr	r3, [sp, #16]
	movt	r1, #:upper16:.LANCHOR0
	ldr	fp, [r1, #1948]
	str	r1, [sp, #36]
	ldrh	r3, [r3, r2]
	sub	r2, r4, #232
	str	r2, [sp, #32]
	tst	r3, #4
	bne	.L10893
.L10849:
	cmp	fp, #0
	ble	.L10850
	movw	r10, #:lower16:gbam_epout_complete
	str	r5, [sp, #28]
	mov	r7, #0
	movt	r10, #:upper16:gbam_epout_complete
	sub	r5, r4, #232
	b	.L10853
.L10851:
	str	r10, [r3, #28]
	add	r7, r7, #1
	ldr	r2, [r4, #-232]
	bl	__list_add
	cmp	fp, r7
	beq	.L10894
.L10853:
	ldr	r3, [r9, #8]
	mov	r1, #32
	mov	r0, r9
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r1, r5
	add	r0, r3, #36
	bne	.L10851
	ldr	r2, [sp, #16]
	movw	r3, #1314
	ldr	r5, [sp, #28]
	ldrh	r3, [r2, r3]
	tst	r3, #4
	bne	.L10895
.L10852:
	ldr	r3, [r4, #-232]
	ldr	r2, [sp, #32]
	cmp	r2, r3
	beq	.L10896
.L10850:
	mov	r0, r8
	ldr	r1, [sp, #20]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-272]
	mov	fp, r0
	cmp	r3, #0
	beq	.L10897
	ldr	r7, [r3, #84]
	movw	r2, #1290
	sub	r10, r4, #256
	ldr	r3, [sp, #16]
	ldrh	r3, [r3, r2]
	ldr	r2, [sp, #36]
	tst	r3, #4
	ldr	r9, [r2, #1952]
	bne	.L10898
.L10857:
	cmp	r9, #0
	ble	.L10858
	movw	r8, #:lower16:gbam_epin_complete
	movt	r8, #:upper16:gbam_epin_complete
	b	.L10862
.L10859:
	str	r8, [r3, #28]
	add	r6, r6, #1
	ldr	r2, [r4, #-256]
	bl	__list_add
	cmp	r9, r6
	beq	.L10858
.L10862:
	ldr	r3, [r7, #8]
	mov	r1, #32
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r1, r10
	add	r0, r3, #36
	bne	.L10859
	ldr	r2, [sp, #16]
	movw	r3, #1314
	ldrh	r3, [r2, r3]
	tst	r3, #4
	bne	.L10899
.L10860:
	ldr	r3, [r4, #-256]
	cmp	r10, r3
	beq	.L10900
.L10858:
	mov	r0, r5
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [sp, #24]
	bl	gbam_start_rx
	b	.L10848
.L10888:
	bl	_raw_spin_unlock
	mov	r1, r6
	mov	r0, r8
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L10892:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
.L10848:
	ldr	r2, [sp, #16]
	movw	r3, #1338
	ldrh	r3, [r2, r3]
	tst	r3, #4
	beq	.L10841
	ldr	r2, .L10901
	movw	r1, #:lower16:.LC357
	ldr	r0, .L10901+4
	movt	r1, #:upper16:.LC357
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	__dynamic_pr_debug
.L10894:
	ldr	r5, [sp, #28]
	b	.L10850
.L10897:
	ldr	r6, [r4, #-232]
	ldr	r7, [sp, #32]
	cmp	r7, r6
	beq	.L10887
.L10856:
	mov	r0, r6
	sub	r6, r6, #36
	bl	list_del
	ldr	r3, [r9, #8]
	mov	r1, r6
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [r4, #-232]
	cmp	r7, r6
	bne	.L10856
.L10887:
	mov	r1, fp
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	b	.L10848
.L10891:
	mov	r0, r2
	movw	r1, #:lower16:.LC551
	ldr	r2, .L10901+8
	movt	r1, #:upper16:.LC551
	ldr	r3, [sp, #24]
	add	r0, r0, #1248
	bl	__dynamic_pr_debug
	b	.L10846
.L10893:
	movw	r0, #:lower16:gbam_epout_complete
	mov	r3, r2
	ldr	r2, .L10901+12
	movt	r0, #:upper16:gbam_epout_complete
	movw	r1, #:lower16:.LC916
	stm	sp, {r3, fp}
	movt	r1, #:upper16:.LC916
	mov	r3, r9
	str	r0, [sp, #8]
	ldr	r0, .L10901+16
	bl	__dynamic_pr_debug
	b	.L10849
.L10898:
	movw	r0, #:lower16:gbam_epin_complete
	movw	r1, #:lower16:.LC916
	ldr	r2, .L10901+12
	movt	r0, #:upper16:gbam_epin_complete
	movt	r1, #:upper16:.LC916
	str	r10, [sp]
	mov	r3, r7
	str	r9, [sp, #4]
	str	r0, [sp, #8]
	ldr	r0, .L10901+16
	bl	__dynamic_pr_debug
	b	.L10857
.L10895:
	movw	r1, #:lower16:.LC653
	mov	r3, r7
	ldr	r2, .L10901+12
	movt	r1, #:upper16:.LC653
	ldr	r0, .L10901+20
	bl	__dynamic_pr_debug
	b	.L10852
.L10899:
	movw	r1, #:lower16:.LC653
	mov	r3, r6
	ldr	r2, .L10901+12
	movt	r1, #:upper16:.LC653
	ldr	r0, .L10901+20
	bl	__dynamic_pr_debug
	b	.L10860
.L10896:
	movw	r0, #:lower16:.LC917
	ldr	r1, .L10901+8
	movt	r0, #:upper16:.LC917
	bl	printk
	ldr	r1, [sp, #20]
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L10848
.L10900:
	movw	r0, #:lower16:.LC918
	ldr	r1, .L10901+8
	movt	r0, #:upper16:.LC918
	bl	printk
.L10861:
	ldr	r3, [r4, #-232]
	ldr	r2, [sp, #32]
	mov	r0, r3
	sub	r6, r3, #36
	cmp	r2, r3
	beq	.L10887
	bl	list_del
	ldr	r3, [r7, #8]
	mov	r1, r6
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L10861
.L10890:
	ldr	r1, .L10901
	movw	r0, #:lower16:.LC915
	mov	r3, r6
	ldr	r2, [r4, #-260]
	movt	r0, #:upper16:.LC915
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L10902:
	.align	2
.L10901:
	.word	.LANCHOR5-1496
	.word	.LANCHOR4+1320
	.word	.LANCHOR5-1476
	.word	.LANCHOR5-1460
	.word	.LANCHOR4+1272
	.word	.LANCHOR4+1296
	.fnend
	.size	gbam_connect_work, .-gbam_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_disable, %function
ccid_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r0, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r5, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r5, #108]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r4, [r5, #112]
	cmp	r4, #0
	beq	.L10904
	ldr	r6, [r5, #100]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L10904:
	ldr	r3, [r5, #156]
	cmp	r3, #0
	bne	.L10905
	ldr	r4, [r5, #184]
	cmp	r4, #0
	beq	.L10905
	ldr	r6, [r5, #108]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L10905:
	add	r9, r5, #192
	add	r8, r5, #92
	b	.L10906
.L10907:
	bl	list_del
	mov	r1, r7
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L10908
	ldr	r7, [r5, #104]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r6
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L10906:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #192]
	mov	r7, r0
	cmp	r9, r4
	mov	r0, r4
	sub	r6, r4, #36
	bne	.L10907
	mov	r1, r7
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
.L10908:
	mov	r4, #0
	add	r0, r5, #172
	mov	r3, r4
	mov	r2, #1
	mov	r1, #3
	str	r4, [r5, #96]
	str	r4, [r5, #200]
	bl	__wake_up
	mov	r3, r4
	add	r0, r5, #160
	mov	r2, #1
	mov	r1, #3
	bl	__wake_up
	ldrd	r6, [sp, #8]
	mov	r3, r4
	add	r0, r5, #128
	mov	r2, #1
	ldrd	r4, [sp]
	mov	r1, #3
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up
	.fnend
	.size	ccid_function_disable, .-ccid_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_peer_reset_cb, %function
gbam_peer_reset_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #1362
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L10963
.L10918:
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L10919
	ldr	r2, [r3, #84]
	cmp	r2, #0
	beq	.L10919
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L10919
	ldr	r0, [r3, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	ldr	r0, [r3, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #12]
	mov	r3, #0
	mov	r0, r3
	ldr	r2, [r2, #84]
	str	r3, [r2]
	ldr	r2, [r4, #12]
	ldr	r2, [r2, #88]
	str	r3, [r2]
	bl	usb_bam_a2_reset
	subs	r2, r0, #0
	bne	.L10964
.L10920:
	ldr	r3, [r4, #12]
	ldr	r3, [r3, #84]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	ldr	r3, [r4, #12]
	bne	.L10965
	ldr	r3, [r3, #84]
	str	r4, [r3]
	ldr	r3, [r4, #12]
	ldr	r3, [r3, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	ldr	r3, [r4, #12]
	bne	.L10966
	ldr	r3, [r3, #88]
	add	r5, r4, #4
	mov	r0, r5
	str	r4, [r3]
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L10967
	ldr	r0, .L10974
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L10968
.L10927:
	ldr	r0, [r3, #88]
	mov	r2, #32
	ldr	r1, [r4, #112]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L10969
.L10928:
	mov	r0, r5
	bl	_raw_spin_unlock
.L10926:
	add	r5, r4, #8
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L10970
	ldr	r0, .L10974+4
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L10971
.L10930:
	ldr	r0, [r3, #84]
	mov	r2, #32
	ldr	r1, [r4, #116]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L10972
.L10931:
	mov	r0, r5
	bl	_raw_spin_unlock
.L10921:
	ldr	r3, [r4, #132]
	cmp	r3, #6
	beq	.L10973
.L10934:
	mov	r5, #0
.L10917:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10919:
	mov	r0, #0
	bl	usb_bam_a2_reset
	subs	r2, r0, #0
	beq	.L10921
	movw	r0, #:lower16:.LC920
	ldr	r1, .L10974+8
	movt	r0, #:upper16:.LC920
	bl	printk
	ldr	r3, [r4, #132]
	cmp	r3, #6
	bne	.L10934
.L10973:
	ldr	r5, [r4]
	cmp	r5, #0
	bne	.L10934
	mov	r1, r5
	mov	r0, r5
	bl	usb_bam_register_peer_reset_cb
	b	.L10917
.L10963:
	movw	r1, #:lower16:.LC919
	add	r0, r3, #1344
	ldr	r2, .L10974+8
	movt	r1, #:upper16:.LC919
	bl	__dynamic_pr_debug
	b	.L10918
.L10971:
	movw	r1, #:lower16:.LC354
	sub	r0, r0, #32
	ldr	r2, .L10974+12
	movt	r1, #:upper16:.LC354
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #12]
	b	.L10930
.L10968:
	movw	r1, #:lower16:.LC354
	sub	r0, r0, #24
	ldr	r2, .L10974+16
	movt	r1, #:upper16:.LC354
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #12]
	b	.L10927
.L10967:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC117
	ldr	r1, .L10974+16
	movt	r0, #:upper16:.LC117
	bl	printk
	b	.L10926
.L10965:
	movw	r0, #:lower16:.LC921
	ldr	r1, .L10974+8
	ldr	r2, [r3, #84]
	movt	r0, #:upper16:.LC921
	bl	printk
	b	.L10917
.L10966:
	movw	r0, #:lower16:.LC922
	ldr	r2, [r3, #88]
	movt	r0, #:upper16:.LC922
	ldr	r1, .L10974+8
	bl	printk
	ldr	r3, [r4, #12]
	mov	r2, #0
	ldr	r3, [r3, #84]
	str	r2, [r3]
	b	.L10917
.L10972:
	movw	r0, #:lower16:.LC355
	ldr	r1, .L10974+12
	movt	r0, #:upper16:.LC355
	bl	printk
	b	.L10931
.L10969:
	movw	r0, #:lower16:.LC355
	ldr	r1, .L10974+16
	movt	r0, #:upper16:.LC355
	bl	printk
	b	.L10928
.L10970:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC117
	ldr	r1, .L10974+12
	movt	r0, #:upper16:.LC117
	bl	printk
	b	.L10921
.L10964:
	movw	r0, #:lower16:.LC920
	ldr	r1, .L10974+8
	movt	r0, #:upper16:.LC920
	bl	printk
	b	.L10920
.L10975:
	.align	2
.L10974:
	.word	.LANCHOR4-3888
	.word	.LANCHOR4-3856
	.word	.LANCHOR5-1440
	.word	.LANCHOR3+2920
	.word	.LANCHOR3+2896
	.fnend
	.size	gbam_peer_reset_cb, .-gbam_peer_reset_cb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_function_bind_config, %function
acm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r10, [r0, #4]
	.pad #36
	sub	sp, sp, #36
	ldr	r3, [r10]
	cmp	r3, #0
	ble	.L10994
	movw	r6, #:lower16:.LANCHOR0
	movw	fp, #:lower16:kmalloc_caches
	movw	r9, #:lower16:acm_connect
	movw	r3, #:lower16:acm_disconnect
	movt	r3, #:upper16:acm_disconnect
	mov	r5, r1
	movt	r6, #:upper16:.LANCHOR0
	movt	fp, #:upper16:kmalloc_caches
	movt	r9, #:upper16:acm_connect
	mov	r7, #0
	str	r3, [sp, #20]
.L10977:
	ldrb	r3, [r6, #1956]	@ zero_extendqisi2
	uxtb	r8, r7
	cmp	r3, #0
	bne	.L10979
	ldr	r2, [r5, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L10982
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r5, #24]
	strb	r3, [r6, #1956]
	strb	r3, [r6, #1996]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L10982
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r5, #24]
	strb	r3, [r6, #1964]
	strb	r3, [r6, #2008]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L10982
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	strb	r3, [r6, #1972]
	strb	r3, [r6, #2019]
.L10979:
	ldr	r0, [fp, #8]
	cmp	r0, #0
	beq	.L10996
	mov	r2, #172
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L11020
.L10983:
	ldr	r2, [sp, #20]
	movw	r3, #:lower16:acm_send_break
	mov	ip, #0
	movt	r3, #:upper16:acm_send_break
	movw	r1, #:lower16:.LC923
	str	r9, [r4, #116]
	movt	r1, #:upper16:.LC923
	mov	r0, #208
	strd	r2, [r4, #120]
	mov	r2, r8
	strb	r8, [r4, #146]
	str	ip, [r4, #148]
	bl	kasprintf
	cmp	r0, #0
	str	r0, [r4]
	beq	.L11021
	ldr	r1, .L11024
	movw	r2, #:lower16:acm_bind
	movw	lr, #:lower16:acm_unbind
	ldr	r3, .L11024+4
	movw	ip, #:lower16:acm_set_alt
	movt	r2, #:upper16:acm_bind
	movt	lr, #:upper16:acm_unbind
	movt	ip, #:upper16:acm_set_alt
	movw	r8, #:lower16:.LANCHOR4
	str	r1, [r4, #4]
	movw	r1, #:lower16:acm_disable
	movt	r8, #:upper16:.LANCHOR4
	str	r2, [r4, #32]
	movw	r2, #:lower16:acm_setup
	movt	r1, #:upper16:acm_disable
	str	lr, [r4, #36]
	movt	r2, #:upper16:acm_setup
	str	ip, [r4, #40]
	ldrh	r3, [r3]
	str	r1, [r4, #48]
	str	r2, [r4, #52]
	tst	r3, #4
	bne	.L11022
.L10985:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L10988
	add	r3, r4, #72
	str	r5, [r4, #20]
	add	r2, r5, #36
	mov	r0, r3
	ldr	r1, [r5, #40]
	str	r3, [sp, #24]
	bl	__list_add
	ldr	r3, [r4, #32]
	cmp	r3, #0
	beq	.L10999
	mov	r1, r4
	mov	r0, r5
	blx	r3
	subs	r2, r0, #0
	blt	.L11023
.L10989:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L10990
	ldr	r1, [r4, #16]
	cmp	r1, #0
	beq	.L10990
	orr	r1, r3, #4
	mov	r3, r1
	strb	r1, [r5, #45]
.L10990:
	tst	r3, #2
	bne	.L10991
	ldr	r1, [r4, #8]
	cmp	r1, #0
	beq	.L10991
	ldrb	r1, [r5, #45]	@ zero_extendqisi2
	orr	r1, r1, #2
	mov	r3, r1
	strb	r1, [r5, #45]
.L10991:
	tst	r3, #1
	bne	.L10992
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L10992
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L10992:
	cmp	r2, #0
	beq	.L10993
	movw	r3, #1410
	mov	r9, r2
	ldrh	r3, [r8, r3]
	tst	r3, #4
	bne	.L10986
.L10987:
	mov	r0, r4
	bl	kfree
.L10981:
	movw	r0, #:lower16:.LC926
	mov	r2, r7
	ldr	r1, .L11024+8
	movt	r0, #:upper16:.LC926
	bl	printk
.L10976:
	mov	r0, r9
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10993:
	ldr	r3, [r10]
	add	r7, r7, #1
	cmp	r3, r7
	bgt	.L10977
.L10994:
	mov	r9, #0
	b	.L10976
.L11022:
	ldr	ip, [r5]
	movw	r2, #:lower16:.LC924
	mov	r3, r0
	ldr	r1, [r5, #24]
	movt	r2, #:upper16:.LC924
	ldr	r0, .L11024+12
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r5, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L10985
.L10988:
	movw	r3, #1410
	mvn	r9, #21
	ldrh	r3, [r8, r3]
	tst	r3, #4
	beq	.L10987
.L10986:
	ldr	r1, [r5, #24]
	movw	r2, #:lower16:.LC925
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC925
	ldr	r0, .L11024+16
	ldr	r1, [r1]
	stm	sp, {r4, r9}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L10987
.L10996:
	mov	r4, #16
	b	.L10983
.L11023:
	ldr	r0, [sp, #24]
	str	r2, [sp, #28]
	bl	list_del
	mov	r3, #0
	ldr	r2, [sp, #28]
	str	r3, [r4, #20]
	b	.L10989
.L10982:
	mvn	r9, #18
	b	.L10981
.L10999:
	mov	r2, r3
	b	.L10989
.L11021:
	mov	r0, r4
	mvn	r9, #11
	bl	kfree
	b	.L10981
.L11020:
	mvn	r9, #11
	b	.L10981
.L11025:
	.align	2
.L11024:
	.word	.LANCHOR0+2020
	.word	.LANCHOR4+1386
	.word	.LANCHOR5-1420
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.fnend
	.size	acm_function_bind_config, .-acm_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_notify, %function
gbam_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r5, r2
	str	lr, [sp, #16]
	.pad #20
	sub	sp, sp, #20
	beq	.L11028
	cmp	r1, #1
	bne	.L11026
	cmp	r2, #0
	beq	.L11026
	mov	r0, r2
	add	r5, r4, #4
	bl	dev_kfree_skb_any
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	movw	r0, #:lower16:.LANCHOR4
	ldr	r3, [r4, #240]
	movw	r2, #1458
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r2, [r0, r2]
	sub	r3, r3, #1
	tst	r2, #4
	str	r3, [r4, #240]
	bne	.L11051
.L11034:
	mov	r1, r6
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #80
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3532]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	queue_work_on
.L11026:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L11028:
	cmp	r2, #0
	beq	.L11026
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #1434
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L11052
.L11030:
	add	r6, r4, #8
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r7, r0
	cmp	r3, #0
	beq	.L11033
	movw	r3, #:lower16:.LANCHOR0
	ldr	r2, [r4, #44]
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #2028]
	cmp	r2, r3
	bls	.L11032
	ldr	r3, [r4, #244]
	ldr	r0, .L11054
	add	r3, r3, #1
	str	r3, [r4, #244]
	bl	__printk_ratelimit
	cmp	r0, #0
	bne	.L11053
.L11033:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	dev_kfree_skb_any
.L11032:
	ldr	r3, [r4, #40]
	add	r2, r4, #36
	mov	r1, r0
	mov	r0, r6
	strd	r2, [r5]
	str	r5, [r3]
	ldr	r3, [r4, #44]
	str	r5, [r4, #40]
	add	r3, r3, #1
	str	r3, [r4, #44]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	gbam_write_data_tohost
.L11052:
	ldr	ip, [r0]
	add	r2, r0, #20
	mov	r3, r0
	ldr	r0, [r5, #80]
	movw	r1, #:lower16:.LC927
	movt	r1, #:upper16:.LC927
	str	ip, [sp]
	str	r2, [sp, #4]
	ldr	r2, .L11054
	str	r0, [sp, #8]
	ldr	r0, .L11054+4
	bl	__dynamic_pr_debug
	b	.L11030
.L11051:
	ldr	lr, [r4]
	add	r2, r4, #20
	movw	r1, #:lower16:.LC929
	ldr	ip, [r4, #260]
	movt	r1, #:upper16:.LC929
	add	r0, r0, #1440
	str	r3, [sp, #8]
	mov	r3, r2
	ldr	r2, .L11054+8
	str	lr, [sp, #12]
	str	r3, [sp]
	mov	r3, r4
	str	ip, [sp, #4]
	bl	__dynamic_pr_debug
	b	.L11034
.L11053:
	movw	r0, #:lower16:.LC928
	ldr	r1, .L11054
	ldr	r2, [r4, #244]
	movt	r0, #:upper16:.LC928
	bl	printk
	b	.L11033
.L11055:
	.align	2
.L11054:
	.word	.LANCHOR5-1392
	.word	.LANCHOR4+1416
	.word	.LANCHOR5-1372
	.fnend
	.size	gbam_notify, .-gbam_notify
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ch_remove, %function
gsdio_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #1482
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r3, r2]
	.pad #28
	sub	sp, sp, #28
	str	r0, [sp, #8]
	tst	r3, #4
	bne	.L11098
.L11057:
	movw	fp, #:lower16:.LANCHOR1
	movt	fp, #:upper16:.LANCHOR1
	ldr	r8, [fp]
	cmp	r8, #0
	beq	.L11085
	add	r7, fp, #4
	mov	r6, #0
	str	fp, [sp, #12]
.L11071:
	ldr	r3, [sp, #8]
	mov	r2, #9
	ldr	r4, [r7, #20]
	ldr	r1, [r3]
	ldr	r3, [r4, #120]
	ldr	r0, [r3]
	bl	strncmp
	subs	r5, r0, #0
	bne	.L11059
	ldr	r8, [r4, #96]
	mov	r3, #1
	str	r5, [r4, #108]
	str	r5, [r4, #112]
	str	r3, [r4, #116]
	cmp	r8, #0
	beq	.L11097
	ldr	r3, .L11100
	ldrh	r3, [r3]
	ubfx	r3, r3, #2, #1
	cmp	r3, #0
	moveq	r0, r8
	streq	r3, [r4, #176]
	bne	.L11099
.L11072:
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L11062
	mov	r1, #0
	blx	r3
.L11062:
	ldr	r0, [r8, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L11063
	blx	r3
.L11063:
	ldr	r0, [r8, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L11064
	blx	r3
.L11064:
	add	r3, r4, #4
	add	r0, r4, #28
	mov	r5, r3
	add	r9, r4, #12
	str	r3, [sp, #16]
	bl	cancel_work_sync
	add	r0, r4, #60
	bl	cancel_work_sync
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	fp, [r4, #12]
	str	r0, [sp, #20]
	ldr	r5, [r8, #92]
	cmp	r9, fp
	beq	.L11065
.L11066:
	mov	r0, fp
	sub	r10, fp, #36
	bl	list_del
	ldr	r0, [fp, #-36]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r10
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	fp, [r4, #12]
	cmp	r9, fp
	bne	.L11066
	ldr	r5, [r8, #92]
.L11065:
	ldr	fp, [r4, #20]
	add	r9, r4, #20
	cmp	r9, fp
	beq	.L11067
.L11068:
	mov	r0, fp
	sub	r10, fp, #36
	bl	list_del
	ldr	r0, [fp, #-36]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r10
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	fp, [r4, #20]
	cmp	r9, fp
	bne	.L11068
.L11067:
	ldr	r9, [r4, #52]
	add	r5, r4, #52
	ldr	r8, [r8, #88]
	cmp	r5, r9
	beq	.L11069
.L11070:
	mov	r0, r9
	sub	r10, r9, #36
	bl	list_del
	ldr	r0, [r9, #-36]
	bl	kfree
	ldr	r3, [r8, #8]
	mov	r1, r10
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r9, [r4, #52]
	cmp	r5, r9
	bne	.L11070
.L11069:
	mov	r3, #0
	ldrd	r0, [sp, #16]
	str	r3, [r4, #8]
	str	r3, [r4, #44]
	str	r3, [r4, #48]
	str	r3, [r4, #76]
	bl	_raw_spin_unlock_irqrestore
.L11097:
	ldr	r3, [sp, #12]
	ldr	r8, [r3]
.L11059:
	add	r6, r6, #1
	add	r7, r7, #104
	cmp	r6, r8
	bcc	.L11071
.L11085:
	mov	r0, #0
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11098:
	mov	r3, r0
	movw	r1, #:lower16:.LC177
	ldr	r2, .L11100+4
	movt	r1, #:upper16:.LC177
	ldr	r3, [r3]
	ldr	r0, .L11100+8
	bl	__dynamic_pr_debug
	b	.L11057
.L11099:
	str	r5, [sp, #4]
	ldr	ip, [r4]
	movw	r1, #:lower16:.LC930
	movt	r1, #:upper16:.LC930
	mov	r3, r4
	ldr	r0, .L11100+12
	ldr	r2, .L11100+16
	str	ip, [sp]
	bl	__dynamic_pr_debug
	ldr	r0, [r4, #96]
	str	r5, [r4, #176]
	cmp	r0, #0
	beq	.L11062
	b	.L11072
.L11101:
	.align	2
.L11100:
	.word	.LANCHOR4+1506
	.word	.LANCHOR5-1348
	.word	.LANCHOR4+1464
	.word	.LANCHOR4+1488
	.word	.LANCHOR5-1332
	.fnend
	.size	gsdio_ch_remove, .-gsdio_ch_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_connect_work, %function
rmnet_smd_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	sub	r2, r0, #132
	movw	r3, #:lower16:rmnet_smd_event_notify
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR0
	mov	r1, r2
	movt	r6, #:upper16:.LANCHOR0
	strd	r8, [sp, #16]
	mov	r4, r0
	str	r10, [sp, #24]
	movt	r3, #:upper16:rmnet_smd_event_notify
	str	lr, [sp, #28]
	.pad #24
	sub	sp, sp, #24
	ldr	r8, [r0, #-308]
	ldr	r0, [r6, #2032]
	bl	smd_open
	subs	r2, r0, #0
	bne	.L11119
	ldr	r3, [r4, #-88]
	ands	r3, r3, #1
	bne	.L11106
	mov	r2, sp
	str	r3, [sp, #4]
	add	r5, sp, #4
	bic	r1, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r1, r1, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r1, #12]
	add	r1, sp, #16
	sub	r7, r4, #80
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L11108
.L11120:
	bl	schedule
.L11108:
	mov	r2, #2
	mov	r1, r5
	mov	r0, r7
	bl	prepare_to_wait
	ldr	r3, [r4, #-88]
	tst	r3, #1
	beq	.L11120
	mov	r1, r5
	mov	r0, r7
	bl	finish_wait
.L11106:
	sub	r2, r4, #68
	movw	r3, #:lower16:rmnet_smd_event_notify
	ldr	r0, [r6, #2036]
	mov	r1, r2
	movt	r3, #:upper16:rmnet_smd_event_notify
	bl	smd_open
	cmp	r0, #0
	bne	.L11121
	ldr	r3, [r4, #-24]
	ands	r3, r3, #1
	bne	.L11110
	mov	r2, sp
	str	r3, [sp, #4]
	add	r5, sp, #4
	bic	r1, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r1, r1, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r1, #12]
	add	r1, sp, #16
	sub	r6, r4, #16
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L11112
.L11122:
	bl	schedule
.L11112:
	mov	r2, #2
	mov	r1, r5
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r3, [r4, #-24]
	tst	r3, #1
	beq	.L11122
	mov	r1, r5
	mov	r0, r6
	bl	finish_wait
.L11110:
	mov	r3, #1
	sub	r6, r4, #228
	ldr	r10, [r4, #-308]
	mov	r0, r6
	sub	r9, r4, #244
	str	r3, [r4, #-224]
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	b	.L11113
.L11115:
	bl	list_del
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #-304]
	mov	r1, r8
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	r8, #0
	mov	r7, r0
	bne	.L11123
.L11113:
	ldr	r5, [r4, #-244]
	cmp	r9, r5
	mov	r0, r5
	sub	r8, r5, #36
	bne	.L11115
.L11114:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L11102:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11119:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC931
	movt	r1, #:upper16:.LC931
	add	r0, r0, #32
	bl	dev_err
	ldrb	r3, [r4, #-136]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L11102
	sub	r0, r4, #216
	bl	platform_driver_register
	subs	r3, r0, #0
	moveq	r3, #1
	strbeq	r3, [r4, #-136]
	beq	.L11102
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC932
	movt	r1, #:upper16:.LC932
	ldr	r2, [r4, #-196]
	add	r0, r0, #32
	bl	dev_err
	b	.L11102
.L11123:
	ldr	r0, [r10]
	movw	r1, #:lower16:.LC214
	mov	r2, r8
	movt	r1, #:upper16:.LC214
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r9
	mov	r0, r5
	ldr	r1, [r4, #-240]
	bl	__list_add
	b	.L11114
.L11121:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC933
	movt	r1, #:upper16:.LC933
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #-132]
	bl	smd_close
	b	.L11102
	.fnend
	.size	rmnet_smd_connect_work, .-rmnet_smd_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_setup, %function
fsg_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #88]
	ldrh	lr, [r1, #4]	@ unaligned
	ldrh	r6, [r1, #2]	@ unaligned
	ldrh	r5, [r1, #6]	@ unaligned
	ldr	r2, [r3, #8]
	ldr	r0, [r3, #52]
	cmp	r2, #0
	beq	.L11125
	ldr	r2, [r3, #56]
	mov	ip, #0
	add	r2, r2, #1
	str	r2, [r3, #56]
	str	ip, [r0, #4]
	str	ip, [r0, #32]
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	cmp	r3, #254
	beq	.L11127
	cmp	r3, #255
	bne	.L11138
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r3, #33
	bne	.L11138
	ldrh	r3, [r4, #92]
	cmp	r3, lr
	bne	.L11140
	orrs	r3, r6, r5
	bne	.L11140
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #1530
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L11152
.L11129:
	ldr	r5, [r4, #88]
	add	r6, r5, #44
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #112]
	mov	r7, r0
	cmp	r3, #2
	bgt	.L11131
	ldr	r3, [r5, #56]
	mov	r1, #2
	ldr	r2, [r5, #168]
	str	r1, [r5, #112]
	str	r3, [r5, #116]
	cmp	r2, #0
	beq	.L11131
	mov	r0, #10
	bl	send_sig_info
.L11131:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [r4, #88]
	movw	r3, #1255
	movw	r4, #32767
	ldr	r2, [r2, #4]
	cmp	r2, #0
	moveq	r4, r3
	b	.L11124
.L11138:
	mvn	r4, #94
.L11124:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11127:
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r3, #161
	bne	.L11138
	ldrh	r3, [r4, #92]
	cmp	r3, lr
	bne	.L11140
	cmp	r5, #1
	cmpeq	r6, #0
	bne	.L11140
	ldr	r3, [r4, #88]
	mov	r1, #1
	mov	r2, #32
	ldr	ip, [r0]
	ldr	r3, [r3, #92]
	sub	r3, r3, #1
	strb	r3, [ip]
	str	r1, [r0, #4]
	ldr	r5, [r4, #88]
	ldrd	r0, [r5, #48]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	ldr	r3, [r5, #48]
	cmp	r0, #0
	cmnne	r0, #108
	mov	r4, r0
	str	r5, [r3]
	beq	.L11124
	mov	r3, r0
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC90
	ldr	r2, [r5, #48]
	movt	r1, #:upper16:.LC90
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_warn
	b	.L11124
.L11125:
	ldr	r0, [r3]
	movw	r1, #:lower16:.LC88
	movw	r3, #706
	movt	r1, #:upper16:.LC88
	ldr	r2, .L11153
	mvn	r4, #94
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC89
	movw	r1, #550
	movt	r0, #:upper16:.LC89
	bl	warn_slowpath_null
	b	.L11124
.L11140:
	mvn	r4, #32
	b	.L11124
.L11152:
	ldr	r1, [r4, #84]
	movw	r2, #:lower16:.LC934
	movt	r2, #:upper16:.LC934
	ldr	r0, .L11153+4
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11129
.L11154:
	.align	2
.L11153:
	.word	.LANCHOR5-1308
	.word	.LANCHOR4+1512
	.fnend
	.size	fsg_setup, .-fsg_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_unbind, %function
fsg_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #1554
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r0, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r4, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r0, r3]
	.pad #24
	sub	sp, sp, #24
	ldr	r5, [r1, #88]
	tst	r3, #4
	moveq	r3, r5
	bne	.L11171
.L11156:
	ldr	r2, [r3, #8]
	cmp	r2, r4
	beq	.L11172
.L11158:
	add	r0, r5, #336
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r0]
	sub	r3, r3, #1
	strex	r2, r3, [r0]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L11165
	bl	fsg_common_release
.L11165:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	mov	r0, r4
	bl	kfree
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11172:
	mov	r2, #0
	str	r2, [r3, #12]
	ldr	r6, [r4, #88]
	add	r7, r6, #44
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #112]
	mov	r8, r0
	cmp	r3, #4
	bgt	.L11160
	ldr	r3, [r6, #56]
	mov	r1, #4
	ldr	r2, [r6, #168]
	str	r1, [r6, #112]
	str	r3, [r6, #116]
	cmp	r2, #0
	beq	.L11160
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L11160:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #8]
	cmp	r3, r4
	bne	.L11158
	mov	r3, sp
	add	r1, sp, #16
	bic	r2, r3, #8128
	mov	r3, #0
	bic	r2, r2, #63
	add	r6, r5, #16
	ldr	r0, [r2, #12]
	movw	r2, #:lower16:autoremove_wake_function
	str	r3, [sp, #4]
	movt	r2, #:upper16:autoremove_wake_function
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L11164
.L11173:
	bl	schedule
.L11164:
	mov	r2, #2
	add	r1, sp, #4
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r3, [r5, #8]
	cmp	r3, r4
	beq	.L11173
	add	r1, sp, #4
	mov	r0, r6
	bl	finish_wait
	b	.L11158
.L11171:
	ldr	r1, [r1, #84]
	movw	r2, #:lower16:.LC772
	add	r0, r0, #1536
	movt	r2, #:upper16:.LC772
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #88]
	b	.L11156
	.fnend
	.size	fsg_unbind, .-fsg_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb30en_store, %function
usb30en_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r5, r3
	mov	r4, r2
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	.pad #20
	sub	sp, sp, #20
	bl	dev_get_drvdata
	mov	r6, r0
	bl	get_host_os_type
	subs	r3, r0, #0
	beq	.L11202
	movw	r1, #:lower16:.LC427
	mov	r0, r4
	movt	r1, #:upper16:.LC427
	add	r2, sp, #4
	bl	sscanf
	cmp	r0, #1
	bne	.L11177
	ldr	r1, [r6, #8]
	cmp	r1, #0
	beq	.L11177
	movw	r4, #:lower16:.LANCHOR1
	ldr	r2, [sp, #4]
	movt	r4, #:upper16:.LANCHOR1
	ldrb	r3, [r4, #3226]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L11203
	uxtb	r2, r2
	strb	r2, [r4, #3226]
	ldr	r0, [r1]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L11179
	mov	r1, #0
	blx	r3
	ldr	r3, [r6, #8]
	ldrb	r2, [r4, #3226]	@ zero_extendqisi2
	ldr	r0, [r3]
.L11179:
	cmp	r2, #0
	moveq	r1, #3
	movne	r1, #5
	bl	sec_set_speedlimit
	movw	r0, #:lower16:.LC937
	ldr	r1, .L11206
	movt	r0, #:upper16:.LC937
	bl	printk
	mov	r0, #200
	bl	msleep
	ldrb	r3, [r4, #3226]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L11204
	ldr	r3, [r6, #8]
	ldr	r0, [r3]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L11184
	mov	r1, #1
	blx	r3
.L11184:
	movw	r0, #:lower16:.LC938
	ldr	r1, .L11206
	movt	r0, #:upper16:.LC938
	bl	printk
.L11174:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L11204:
	movw	r2, #:lower16:.LC896
	cmp	r6, #0
	movt	r2, #:upper16:.LC896
	strd	r2, [sp, #8]
	beq	.L11184
	ldr	r7, .L11206+4
	movw	r0, #:lower16:.LC897
	add	r4, r6, #452
	movt	r0, #:upper16:.LC897
	mov	r2, r7
	mov	r1, r7
	bl	printk
	mov	r0, r4
	bl	work_busy
	cmp	r0, #0
	bne	.L11205
.L11183:
	ldr	r0, [r6, #12]
	add	r2, sp, #8
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env
	mov	r3, #0
	mov	r0, #1
	str	r3, [r6, #504]
	bl	msecs_to_jiffies
	movw	r1, #:lower16:system_wq
	mov	r3, r0
	movt	r1, #:upper16:system_wq
	mov	r2, r4
	ldr	r1, [r1]
	mov	r0, #4
	bl	queue_delayed_work_on
	b	.L11184
.L11203:
	movw	r0, #:lower16:.LC936
	ldr	r1, .L11206
	mov	r2, r3
	movt	r0, #:upper16:.LC936
	bl	printk
	b	.L11174
.L11177:
	movw	r0, #:lower16:.LC939
	ldr	r1, .L11206
	mvn	r5, #0
	movt	r0, #:upper16:.LC939
	bl	printk
	b	.L11174
.L11202:
	movw	r2, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC935
	ldr	r1, .L11206
	movt	r2, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC935
	strb	r3, [r2, #3226]
	bl	printk
	b	.L11174
.L11205:
	mov	r0, r4
	bl	cancel_delayed_work
	movw	r0, #:lower16:.LC898
	mov	r2, r7
	mov	r1, r7
	movt	r0, #:upper16:.LC898
	bl	printk
	b	.L11183
.L11207:
	.align	2
.L11206:
	.word	.LANCHOR5-1296
	.word	.LANCHOR5-1560
	.fnend
	.size	usb30en_store, .-usb30en_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_close, %function
rndis_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r4, #:lower16:.LANCHOR4
	movw	r3, #1578
	movt	r4, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r4, r3]
	.pad #12
	sub	sp, sp, #12
	tst	r3, #4
	bne	.L11229
.L11209:
	movw	r3, #1602
	ldr	r7, [r6, #164]
	ldrh	r3, [r4, r3]
	uxtb	r5, r7
	tst	r3, #4
	bne	.L11230
.L11210:
	movw	r4, #:lower16:.LANCHOR1
	cmp	r5, #0
	ldr	r10, .L11231
	movt	r4, #:upper16:.LANCHOR1
	lsl	r8, r7, #4
	mov	r1, #1
	streq	r5, [r4, #3688]
	streq	r5, [r4, #3692]
	sub	r5, r8, r7
	lsl	r5, r5, #2
	add	r3, r4, r5
	add	r9, r10, r5
	str	r1, [r3, #3696]
	ldr	r3, [r9, #4]
	cmp	r3, #0
	beq	.L11208
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L11216
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L11208
	add	r3, r6, #20
.L11214:
	sub	r7, r8, r7
	mov	fp, #20
	str	r3, [r6, #8]
	add	r4, r4, r7, lsl #2
	mov	r7, #0
	add	r2, r5, #52
	str	fp, [r6, #12]
	add	r2, r10, r2
	mov	r0, r6
	str	r7, [r6, #16]
	ldr	r1, [r4, #3736]
	bl	__list_add
	ldr	r3, [r6, #8]
	mov	r2, #12
	mov	r1, #7
	movt	r2, 16385
	stm	r3, {r1, fp}
	str	r2, [r3, #8]
	str	r7, [r3, #12]
	str	r7, [r3, #16]
	ldr	r3, [r9, #44]
	ldr	r0, [r9, #48]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	bx	r3	@ indirect register sibling call
.L11216:
	mov	r3, #36
	mov	r6, #16
	b	.L11214
.L11229:
	ldr	r1, [r6, #20]
	movw	r2, #:lower16:.LC82
	movt	r2, #:upper16:.LC82
	ldr	r3, .L11231+4
	ldr	r0, .L11231+8
	ldr	r1, [r1, #24]
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11209
.L11230:
	mov	ip, #0
	movw	r1, #:lower16:.LC940
	ldr	r2, .L11231+12
	mov	r3, ip
	movt	r1, #:upper16:.LC940
	ldr	r0, .L11231+16
	str	ip, [sp]
	bl	__dynamic_pr_debug
	ldr	r7, [r6, #164]
	b	.L11210
.L11208:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11232:
	.align	2
.L11231:
	.word	.LANCHOR1+3680
	.word	.LANCHOR5-1280
	.word	.LANCHOR4+1560
	.word	.LANCHOR5-1268
	.word	.LANCHOR4+1584
	.fnend
	.size	rndis_close, .-rndis_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_close, %function
rndis_qc_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r4, #:lower16:.LANCHOR4
	movw	r3, #1626
	movt	r4, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r4, r3]
	.pad #12
	sub	sp, sp, #12
	tst	r3, #4
	bne	.L11254
.L11234:
	movw	r3, #1602
	ldr	r7, [r6, #144]
	ldrh	r3, [r4, r3]
	uxtb	r5, r7
	tst	r3, #4
	bne	.L11255
.L11235:
	movw	r4, #:lower16:.LANCHOR1
	cmp	r5, #0
	ldr	r10, .L11256
	movt	r4, #:upper16:.LANCHOR1
	lsl	r8, r7, #4
	mov	r1, #1
	streq	r5, [r4, #3688]
	streq	r5, [r4, #3692]
	sub	r5, r8, r7
	lsl	r5, r5, #2
	add	r3, r4, r5
	add	r9, r10, r5
	str	r1, [r3, #3696]
	ldr	r3, [r9, #4]
	cmp	r3, #0
	beq	.L11233
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L11241
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L11233
	add	r3, r6, #20
.L11239:
	sub	r7, r8, r7
	mov	fp, #20
	str	r3, [r6, #8]
	add	r4, r4, r7, lsl #2
	mov	r7, #0
	add	r2, r5, #52
	str	fp, [r6, #12]
	add	r2, r10, r2
	mov	r0, r6
	str	r7, [r6, #16]
	ldr	r1, [r4, #3736]
	bl	__list_add
	ldr	r3, [r6, #8]
	mov	r2, #12
	mov	r1, #7
	movt	r2, 16385
	stm	r3, {r1, fp}
	str	r2, [r3, #8]
	str	r7, [r3, #12]
	str	r7, [r3, #16]
	ldr	r3, [r9, #44]
	ldr	r0, [r9, #48]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	bx	r3	@ indirect register sibling call
.L11241:
	mov	r3, #36
	mov	r6, #16
	b	.L11239
.L11254:
	ldr	r1, [r6, #20]
	movw	r2, #:lower16:.LC82
	movt	r2, #:upper16:.LC82
	ldr	r3, .L11256+4
	ldr	r0, .L11256+8
	ldr	r1, [r1, #24]
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11234
.L11255:
	mov	ip, #0
	movw	r1, #:lower16:.LC940
	ldr	r2, .L11256+12
	mov	r3, ip
	movt	r1, #:upper16:.LC940
	ldr	r0, .L11256+16
	str	ip, [sp]
	bl	__dynamic_pr_debug
	ldr	r7, [r6, #144]
	b	.L11235
.L11233:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11257:
	.align	2
.L11256:
	.word	.LANCHOR1+3680
	.word	.LANCHOR5-1244
	.word	.LANCHOR4+1608
	.word	.LANCHOR5-1268
	.word	.LANCHOR4+1584
	.fnend
	.size	rndis_qc_close, .-rndis_qc_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_setup, %function
composite_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r9, r1
	strd	r10, [sp, #24]
	mov	r10, r0
	add	r0, r0, #32
	str	lr, [sp, #32]
	.pad #68
	sub	sp, sp, #68
	bl	dev_get_drvdata
	ldrh	fp, [r9, #6]	@ unaligned
	ldrh	r6, [r9, #4]	@ unaligned
	ldrh	r7, [r9, #2]	@ unaligned
	ldr	r4, [r0, #4]
	cmp	fp, #4096
	bhi	.L11514
	ldrb	r2, [r4, #26]	@ zero_extendqisi2
	movw	r3, #:lower16:composite_setup_complete
	mov	r1, #0
	movt	r3, #:upper16:composite_setup_complete
	mov	r5, r0
	str	r1, [r4, #4]
	uxtb	r8, r6
	str	r3, [r4, #28]
	bfc	r2, #1, #1
	strb	r2, [r4, #26]
	ldr	r3, [r10, #4]
	str	r0, [r3]
	ldrb	r3, [r9, #1]	@ zero_extendqisi2
	cmp	r3, #11
	ldrls	pc, [pc, r3, asl #2]
	b	.L11261
.L11263:
	.word	.L11262
	.word	.L11264
	.word	.L11261
	.word	.L11264
	.word	.L11261
	.word	.L11261
	.word	.L11265
	.word	.L11261
	.word	.L11266
	.word	.L11267
	.word	.L11268
	.word	.L11269
.L11269:
	ldrb	r3, [r9]	@ zero_extendqisi2
	ldr	r0, [r0, #12]
	cmp	r3, #1
	beq	.L11714
.L11271:
	and	r3, r3, #31
	cmp	r3, #1
	beq	.L11445
.L11717:
	cmp	r3, #2
	bne	.L11517
	mov	r2, r0
	asr	r3, r6, #3
	ldr	r1, [r2, #36]!
	and	r6, r6, #15
	and	r3, r3, #16
	orr	r3, r3, r6
	cmp	r2, r1
	sub	r4, r1, #72
	beq	.L11517
	ldr	r1, [r1, #8]
	lsr	r1, r1, r3
	tst	r1, #1
	bne	.L11447
	mov	r6, #1
	lsl	r6, r6, r3
	b	.L11448
.L11449:
	ldr	r3, [r3, #8]
	tst	r3, r6
	bne	.L11447
.L11448:
	ldr	r3, [r4, #72]
	cmp	r2, r3
	sub	r4, r3, #72
	bne	.L11449
.L11517:
	mov	r4, #0
.L11444:
	cmp	r0, #0
	beq	.L11514
	ldr	r3, [r0, #16]
	cmp	r3, #0
	beq	.L11514
	mov	r1, r9
	blx	r3
	mov	r6, r0
	movw	r3, #32767
	cmp	r6, r3
	beq	.L11715
.L11258:
	mov	r0, r6
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11262:
	ldr	r2, [r10, #20]
	ldrb	r3, [r9]	@ zero_extendqisi2
	cmp	r2, #4
	bls	.L11709
	cmp	r3, #129
	bne	.L11709
	ldr	r3, [r4]
	mov	r2, #0
	cmp	fp, #2
	movls	fp, #0
	movhi	fp, #1
	strb	r2, [r3]
	strb	r2, [r3, #1]
	ldr	r2, [r0, #12]
	clz	r3, r2
	lsr	r3, r3, #5
	cmp	r8, #15
	orrhi	r3, r3, #1
	cmp	r3, #0
	beq	.L11716
.L11511:
	mov	r7, #2
	b	.L11293
.L11265:
	ldrb	r3, [r9]	@ zero_extendqisi2
	cmp	r3, #128
	beq	.L11270
.L11709:
	and	r3, r3, #31
	ldr	r0, [r5, #12]
	cmp	r3, #1
	bne	.L11717
.L11445:
	cmp	r8, #15
	movls	r3, #0
	movhi	r3, #1
	cmp	r0, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L11517
	add	r3, r8, #12
	ldr	r4, [r0, r3, lsl #2]
.L11447:
	cmp	r4, #0
	beq	.L11444
	ldr	r3, [r4, #52]
	cmp	r3, #0
	beq	.L11444
	mov	r1, r9
	mov	r0, r4
	blx	r3
	mov	r6, r0
	movw	r3, #32767
	cmp	r6, r3
	bne	.L11258
.L11715:
	movw	r7, #:lower16:.LANCHOR4
	movw	r3, #1866
	movt	r7, #:upper16:.LANCHOR4
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L11718
.L11452:
	movw	r2, #1890
	ldr	r3, [r5, #56]
	ldrh	r2, [r7, r2]
	add	r3, r3, #1
	tst	r2, #4
	str	r3, [r5, #56]
	bne	.L11453
.L11456:
	movw	r6, #32767
	b	.L11258
.L11264:
	ldr	r2, [r10, #20]
	ldrb	r3, [r9]	@ zero_extendqisi2
	cmp	r2, #4
	bls	.L11709
	cmp	r3, #1
	bne	.L11709
	cmp	r7, #0
	bne	.L11686
	ldr	r2, [r0, #12]
	cmp	r8, #15
	movls	r3, #0
	movhi	r3, #1
	cmp	r2, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L11514
	add	r8, r8, #12
	ldr	r0, [r2, r8, lsl #2]
	cmp	r0, #0
	beq	.L11514
	ldr	r3, [r0, #68]
	cmp	r3, #0
	beq	.L11710
	lsr	r1, r6, #8
	blx	r3
	subs	r6, r0, #0
	blt	.L11443
	movw	r9, #32767
	subs	r9, r6, r9
	movne	r9, #1
.L11336:
	cmp	r9, #0
	beq	.L11272
.L11454:
	cmp	r6, fp
	mov	r7, r6
	movge	fp, #0
	movlt	fp, #1
	b	.L11293
.L11267:
	ldrb	r3, [r9]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L11709
	add	r3, r0, #60
	mov	r0, r3
	str	r3, [sp, #20]
	bl	_raw_spin_lock
	ldr	r9, [r5]
	ldr	r3, [r5, #12]
	mov	r6, r9
	cmp	r3, #0
	beq	.L11390
	ldrb	r3, [r3, #20]	@ zero_extendqisi2
	cmp	r7, r3
	beq	.L11719
	cmp	r7, #0
	beq	.L11720
.L11459:
	mov	r8, r5
	str	r9, [sp, #28]
	mov	r9, r6
	ldr	r3, [r8, #36]!
	mov	r6, r5
	mov	r5, r4
	sub	r3, r3, #28
	mov	r4, r3
	b	.L11394
.L11400:
	ldrb	r3, [r4, #20]	@ zero_extendqisi2
	cmp	r7, r3
	beq	.L11708
	bl	check_config
	cmp	r0, #0
	bne	.L11708
	ldr	r3, [r4, #28]
	sub	r4, r3, #28
.L11394:
	add	r3, r4, #28
	mov	r0, r7
	cmp	r3, r8
	bne	.L11400
	mov	r4, r5
	ldr	r9, [sp, #28]
	mov	r5, r6
	mvn	r6, #21
	b	.L11401
.L11266:
	ldrb	r3, [r9]	@ zero_extendqisi2
	ldr	r0, [r0, #12]
	cmp	r3, #128
	bne	.L11271
	cmp	r0, #0
	beq	.L11427
	bl	get_config_number
	ldr	r3, [r4]
	add	r0, r0, #1
	strb	r0, [r3]
.L11428:
	adds	r7, fp, #0
	movne	r7, #1
	cmp	fp, r7
	movls	fp, #0
	movhi	fp, #1
	b	.L11293
.L11268:
	ldrb	r3, [r9]	@ zero_extendqisi2
	ldr	r0, [r0, #12]
	cmp	r3, #129
	bne	.L11271
	cmp	r8, #15
	movls	r3, #0
	movhi	r3, #1
	cmp	r0, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L11514
	add	r8, r8, #12
	ldr	r0, [r0, r8, lsl #2]
	cmp	r0, #0
	beq	.L11514
	ldr	r3, [r0, #44]
	cmp	r3, #0
	beq	.L11507
	mov	r1, r6
	blx	r3
	subs	r6, r0, #0
	blt	.L11258
.L11435:
	adds	r7, fp, #0
	ldr	r3, [r4]
	movne	r7, #1
	cmp	r7, fp
	movge	fp, #0
	movlt	fp, #1
	strb	r6, [r3]
.L11293:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r7, [r4, #4]
	mov	r2, #32
	mov	r1, r4
	bfi	r3, fp, #1, #1
	strb	r3, [r4, #26]
	ldr	r0, [r10, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	bge	.L11258
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #1914
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L11721
.L11455:
	ldr	ip, [r4, #4]
	mov	r3, #0
	ldr	lr, [r4, #48]
	str	r3, [r4, #44]
	cmp	lr, ip
	beq	.L11258
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, #42]
	tst	r2, #4
	beq	.L11258
	ldr	r1, [r10, #4]
	movw	r2, #:lower16:.LC6
	add	r0, r0, #24
	movt	r2, #:upper16:.LC6
	ldr	r1, [r1]
	ldr	r1, [r1]
	str	lr, [sp]
	str	ip, [sp, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11258
.L11261:
	ldrb	r3, [r9]	@ zero_extendqisi2
	b	.L11709
.L11278:
	ldr	r3, [r10, #20]
	cmp	r3, #2
	bls	.L11514
	ldr	r3, [r10, #16]
	cmp	r3, #4
	bls	.L11275
.L11514:
	mvn	r6, #94
	b	.L11258
.L11714:
	cmp	r8, #15
	movls	r3, #0
	movhi	r3, #1
	cmp	r0, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L11514
	add	r3, r8, #12
	ldr	r9, [r0, r3, lsl #2]
	cmp	r9, #0
	beq	.L11514
	cmp	r7, #0
	bne	.L11722
	ldr	r3, [r9, #44]
	cmp	r3, #0
	ldrne	r3, [r9, #40]
	beq	.L11710
.L11430:
	mov	r1, r6
	mov	r2, r7
	mov	r0, r9
	blx	r3
	movw	r3, #32767
	mov	r6, r0
	cmp	r0, r3
	beq	.L11432
	mvn	r9, r0
	lsr	r9, r9, #31
	b	.L11336
.L11270:
	lsr	r8, r7, #8
	sub	r3, r8, #1
	cmp	r3, #14
	ldrls	pc, [pc, r3, asl #2]
	b	.L11686
.L11274:
	.word	.L11273
	.word	.L11275
	.word	.L11276
	.word	.L11686
	.word	.L11686
	.word	.L11277
	.word	.L11278
	.word	.L11686
	.word	.L11686
	.word	.L11686
	.word	.L11686
	.word	.L11686
	.word	.L11686
	.word	.L11686
	.word	.L11279
.L11275:
	mov	r0, fp
	bl	set_config_mode
	ldr	r3, [r5]
	ldr	r2, [r3, #16]
	cmp	r2, #5
	str	r2, [sp, #24]
	beq	.L11307
	ldr	r3, [r3, #20]
	cmp	r3, #2
	movls	r3, #0
	strls	r3, [sp, #24]
	bls	.L11307
	cmp	r2, #3
	beq	.L11308
	cmp	r8, #7
	moveq	r3, #3
	movne	r3, #0
	str	r3, [sp, #24]
.L11307:
	uxtb	r0, r7
	bl	set_config_number
	mov	r2, r5
	ldr	r7, [r2, #36]!
	cmp	r2, r7
	sub	r7, r7, #28
	ldrne	r1, [sp, #24]
	bne	.L11309
	b	.L11472
.L11724:
	cmp	r1, #5
	bne	.L11680
	tst	r3, #1
	beq	.L11313
.L11314:
	cmp	r0, #0
	sub	r0, r0, #1
	beq	.L11723
.L11313:
	ldr	r7, [r7, #28]
	cmp	r2, r7
	sub	r7, r7, #28
	beq	.L11472
.L11309:
	cmp	r1, #3
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	bne	.L11724
	tst	r3, #2
	bne	.L11314
	b	.L11313
.L11279:
	ldr	r3, [r10, #20]
	cmp	r3, #4
	bhi	.L11384
	ldrb	r3, [r10, #377]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L11514
.L11384:
	ldr	ip, [r5, #4]
	mov	r2, #0
	mov	r3, #5
	mov	r0, #15
	mov	r8, #12
	mov	r1, #1
	mov	r7, #7
	mov	lr, #16
	ldr	r6, [ip]
	mov	ip, #2
	strb	r3, [r6]
	strb	r0, [r6, #1]
	strb	r3, [r6, #2]
	strb	r2, [r6, #3]
	strb	r2, [r6, #4]
	ldr	r3, [r5, #4]
	ldr	r3, [r3]
	strh	r8, [r6, #2]	@ movhi
	strb	r1, [r6, #4]
	strb	r7, [r3, #5]
	strb	lr, [r3, #6]
	strb	ip, [r3, #7]
	strb	r2, [r3, #8]
	strb	r2, [r3, #9]
	strb	r2, [r3, #10]
	strb	r2, [r3, #11]
	ldr	r3, [r5]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L11385
	ldr	lr, [r5, #4]
	movw	r8, #4106
	ldrh	ip, [r6, #2]	@ unaligned
	movt	r8, 3
	ldrb	r3, [r6, #4]	@ zero_extendqisi2
	ldr	lr, [lr]
	add	r7, ip, #10
	add	r3, r3, r1
	strh	r7, [r6, #2]	@ movhi
	add	r7, lr, ip
	strb	r3, [r6, #4]
	str	r8, [lr, ip]	@ unaligned
	strb	r0, [r7, #4]
	strb	r2, [r7, #5]
	strb	r1, [r7, #6]
	ldr	r3, [r5]
	ldr	r3, [r3]
	ldr	r3, [r3, #28]
	cmp	r3, r2
	beq	.L11386
	add	r0, sp, #60
	blx	r3
.L11387:
	ldrb	r3, [sp, #60]	@ zero_extendqisi2
	strb	r3, [r7, #7]
	ldrh	r3, [sp, #62]
	strh	r3, [r7, #8]	@ unaligned
.L11385:
	ldrh	r3, [r6, #2]	@ unaligned
	cmp	fp, r3
	bcc	.L11388
	movw	r9, #32767
	mov	r6, r3
	subs	r9, r3, r9
	movne	r9, #1
	b	.L11336
.L11277:
	ldr	r3, [r10, #20]
	cmp	r3, #2
	bls	.L11514
	ldr	r3, [r10, #16]
	cmp	r3, #4
	bhi	.L11514
	ldr	r1, [r0, #4]
	mov	r2, #10
	mov	r3, #6
	ldr	r8, [r1]
	strb	r2, [r8]
	strb	r3, [r8, #1]
	ldrh	r3, [r0, #19]	@ unaligned
	strh	r3, [r8, #2]	@ unaligned
	ldrb	r3, [r0, #21]	@ zero_extendqisi2
	strb	r3, [r8, #4]
	ldrb	r3, [r0, #22]	@ zero_extendqisi2
	strb	r3, [r8, #5]
	ldrb	r3, [r0, #23]	@ zero_extendqisi2
	strb	r3, [r8, #6]
	ldr	r3, [r0]
	ldr	r3, [r3, #4]
	ldrh	r3, [r3, #20]
	strb	r3, [r8, #7]
	ldr	r3, [r0]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bhi	.L11295
	mov	r7, r0
	ldr	r6, [r7, #36]!
	cmp	r7, r6
	sub	r6, r6, #28
	beq	.L11482
.L11296:
	mov	r3, #0
.L11471:
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	mov	r0, r6
	add	r1, r3, #1
	tst	r2, #4
	beq	.L11301
	bl	count_multi_config
	ldr	r6, [r6, #28]
	mov	r3, r0
	cmp	r7, r6
	sub	r6, r6, #28
	bne	.L11471
.L11297:
	cmp	fp, #10
	mov	r2, #0
	strb	r3, [r8, #8]
	movlt	r7, fp
	movge	r7, #10
	cmp	fp, r7
	strb	r2, [r8, #9]
	movle	fp, #0
	movgt	fp, #1
	b	.L11293
.L11276:
	mov	r0, fp
	bl	set_string_mode
	ldr	r3, [r4]
	ands	r9, r7, #255
	str	r3, [sp, #20]
	beq	.L11725
	ldrb	r3, [r5, #49]	@ zero_extendqisi2
	cmp	r9, r3
	beq	.L11726
	ldrb	r3, [r5, #50]	@ zero_extendqisi2
	cmp	r9, r3
	beq	.L11727
	ldrb	r3, [r5, #51]	@ zero_extendqisi2
	cmp	r9, r3
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	beq	.L11682
.L11368:
	ldr	r3, [r3, #2476]
	ldr	r0, [r3, #16]
	cmp	r0, #0
	beq	.L11371
	mov	r3, r9
	mov	r2, r6
	ldr	r1, [sp, #20]
	bl	lookup_string
	cmp	r0, #0
	ble	.L11371
.L11363:
	uxth	r3, r0
	cmp	r3, fp
	bhi	.L11388
	uxth	r6, r0
	movw	r9, #32767
	subs	r9, r6, r9
	movne	r9, #1
	b	.L11336
.L11686:
	mvn	r6, #94
.L11272:
	movw	r3, #32767
	sub	r3, r6, r3
	clz	r3, r3
	lsr	r3, r3, #5
.L11434:
	cmp	fp, #0
	moveq	r3, #0
	cmp	r3, #0
	beq	.L11258
	cmp	r5, #0
	beq	.L11456
	movw	r2, #:lower16:.LC959
	movw	r0, #:lower16:.LC102
	ldr	r3, .L11741
	movt	r2, #:upper16:.LC959
	movt	r0, #:upper16:.LC102
	movw	r1, #1500
	movw	r6, #32767
	bl	warn_slowpath_fmt
	b	.L11258
.L11453:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC953
	movt	r2, #:upper16:.LC953
	ldr	r0, .L11741+4
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11258
.L11718:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC952
	ldr	ip, [r4]
	movt	r2, #:upper16:.LC952
	ldr	r3, .L11741
	ldr	r0, .L11741+8
	add	r1, r1, #32
	stm	sp, {r8, ip}
	bl	__dynamic_dev_dbg
	b	.L11452
.L11680:
	tst	r3, #4
	bne	.L11314
	b	.L11313
.L11427:
	ldr	r3, [r4]
	strb	r0, [r3]
	b	.L11428
.L11376:
	ldr	r8, [r8, #72]
	ldr	r3, [sp, #20]
	cmp	r3, r8
	sub	r8, r8, #72
	bne	.L11373
.L11374:
	ldr	r3, [sp, #24]
	ldr	r2, [sp, #44]
	ldr	r3, [r3, #28]
	cmp	r2, r3
	sub	r3, r3, #28
	str	r3, [sp, #24]
	bne	.L11370
.L11472:
	mvn	r6, #21
	b	.L11258
.L11388:
	mov	r7, fp
	mov	fp, #0
	b	.L11293
.L11716:
	add	r8, r8, #12
	ldr	r0, [r2, r8, lsl #2]
	cmp	r0, #0
	beq	.L11511
	ldr	r3, [r0, #64]
	cmp	r3, #0
	beq	.L11438
	blx	r3
	subs	r3, r0, #0
	blt	.L11511
.L11438:
	ldr	r2, [r4]
	ubfx	r1, r3, #8, #8
	mov	r7, #2
	strb	r3, [r2]
	strb	r1, [r2, #1]
	b	.L11293
.L11721:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC958
	mov	r3, r6
	movt	r2, #:upper16:.LC958
	ldr	r0, .L11741+12
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11455
.L11722:
	ldr	r3, [r9, #40]
	cmp	r3, #0
	bne	.L11430
	b	.L11514
.L11723:
	ldr	r2, [r5, #4]
	mov	r3, #9
	ldr	r2, [r2]
	strb	r3, [r2]
	add	r3, r2, r3
	mov	r6, r2
	strb	r8, [r2, #1]
	str	r3, [sp, #32]
	ldrb	r3, [r7, #44]	@ zero_extendqisi2
	str	r2, [sp, #36]
	strb	r3, [r2, #4]
	bl	get_config_number
	add	r0, r0, #1
	strb	r0, [r6, #5]
	ldrb	r3, [r7, #21]	@ zero_extendqisi2
	strb	r3, [r6, #6]
	ldrb	r3, [r7, #22]	@ zero_extendqisi2
	mvn	r3, r3, lsl #25
	mvn	r3, r3, lsr #25
	strb	r3, [r6, #7]
	ldrb	r3, [r7, #23]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L11316
	ldr	r2, [r7, #24]
	mov	r3, #500
	ldr	r2, [r2, #64]
	sdiv	r3, r3, r2
	uxtb	r3, r3
.L11316:
	ldr	r2, [sp, #36]
	strb	r3, [r2, #8]
	ldr	r9, [r7, #8]
	cmp	r9, #0
	beq	.L11489
	ldr	r1, [r9]
	cmp	r1, #0
	beq	.L11490
	ldrb	r6, [r1]	@ zero_extendqisi2
	movw	r8, #4087
	ldr	r3, [sp, #32]
	b	.L11319
.L11321:
	ldrb	r6, [r1]	@ zero_extendqisi2
	cmp	r6, r8
	bhi	.L11472
.L11319:
	mov	r0, r3
	mov	r2, r6
	bl	memcpy
	ldr	r1, [r9, #4]!
	sub	r8, r8, r6
	add	r3, r0, r6
	cmp	r1, #0
	bne	.L11321
.L11318:
	ldr	r2, [sp, #32]
	subs	r6, r3, r2
	bmi	.L11258
	rsb	r3, r6, #4080
	add	r2, r2, r6
	add	r3, r3, #7
	mov	r1, r3
	str	r2, [sp, #32]
.L11317:
	mov	r2, r7
	ldr	r3, [r2, #36]!
	cmp	r2, r3
	str	r2, [sp, #20]
	sub	r3, r3, #72
	beq	.L11323
	ldr	r9, [sp, #32]
	str	r7, [sp, #28]
	mov	r8, r1
	str	r10, [sp, #52]
	ldr	r10, [sp, #24]
	mov	r7, r3
	str	r4, [sp, #40]
	str	fp, [sp, #44]
	str	r5, [sp, #48]
.L11333:
	ldr	r0, [r7]
	bl	is_available_function
	cmp	r0, #0
	beq	.L11324
	cmp	r10, #3
	beq	.L11326
	cmp	r10, #5
	bne	.L11681
	ldr	fp, [r7, #12]
.L11328:
	cmp	fp, #0
	beq	.L11324
	ldr	r1, [fp]
	mov	r6, r8
	cmp	r1, #0
	beq	.L11491
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r8, r4
	bcc	.L11472
	mov	r5, r9
	b	.L11330
.L11331:
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r4, r6
	bhi	.L11472
.L11330:
	mov	r0, r5
	mov	r2, r4
	bl	memcpy
	ldr	r1, [fp, #4]!
	sub	r6, r6, r4
	add	r5, r5, r4
	cmp	r1, #0
	bne	.L11331
	subs	r6, r5, r9
	bmi	.L11258
.L11329:
	mov	r1, r9
	mov	r2, r8
	ldr	r3, [sp, #28]
	mov	r0, r7
	str	r10, [sp]
	bl	change_conf
	cmp	r0, #0
	blt	.L11728
	sub	r8, r8, r6
	mov	r9, r5
.L11324:
	ldr	r7, [r7, #72]
	ldr	r3, [sp, #20]
	cmp	r3, r7
	sub	r7, r7, #72
	bne	.L11333
	ldr	r7, [sp, #28]
	str	r9, [sp, #32]
	ldr	r4, [sp, #40]
	ldr	fp, [sp, #44]
	ldr	r5, [sp, #48]
	ldr	r10, [sp, #52]
.L11323:
	mov	r0, r7
	ldr	r2, [sp, #32]
	ldr	r7, [sp, #36]
	sub	r6, r2, r7
	mov	r1, r7
	bl	set_interface_count
	uxth	r3, r6
	cmp	r6, #0
	strh	r3, [r7, #2]	@ unaligned
	blt	.L11258
	cmp	fp, r3
	bcc	.L11388
	uxth	r6, r6
	movw	r9, #32767
	subs	r9, r6, r9
	movne	r9, #1
	b	.L11336
.L11681:
	ldr	fp, [r7, #16]
	b	.L11328
.L11326:
	ldr	fp, [r7, #8]
	b	.L11328
.L11432:
	movw	r7, #:lower16:.LANCHOR4
	movw	r3, #1818
	movt	r7, #:upper16:.LANCHOR4
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L11729
.L11433:
	movw	r2, #1842
	ldr	r3, [r5, #56]
	ldrh	r2, [r7, r2]
	add	r3, r3, #1
	tst	r2, #4
	str	r3, [r5, #56]
	moveq	r3, #1
	beq	.L11434
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC953
	movt	r2, #:upper16:.LC953
	ldr	r0, .L11741+16
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	mov	r3, #1
	b	.L11434
.L11725:
	mov	r0, r3
	mov	r1, #256
	mov	r6, r3
	bl	__memzero
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #3
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2476]
	strb	r2, [r6, #1]
	ldr	ip, [r3, #16]
	cmp	ip, #0
	beq	.L11338
	ldr	r3, [ip]
	add	lr, r6, #2
	cmp	r3, #0
	beq	.L11338
	add	r0, r6, #254
.L11343:
	ldrh	r2, [r6, #2]
	ldrh	r1, [r3]
	cmp	r2, #0
	beq	.L11493
	cmp	lr, r0
	bcs	.L11493
	cmp	r1, r2
	beq	.L11340
	mov	r3, lr
	b	.L11341
.L11730:
	cmp	r3, r0
	bcs	.L11339
	cmp	r1, r2
	beq	.L11340
.L11341:
	ldrh	r2, [r3, #2]!
	cmp	r2, #0
	bne	.L11730
.L11339:
	strh	r1, [r3]	@ movhi
.L11340:
	ldr	r3, [ip, #4]!
	cmp	r3, #0
	bne	.L11343
.L11338:
	mov	r3, r5
	ldr	r7, [r3, #36]!
	cmp	r3, r7
	sub	r9, r7, #28
	beq	.L11344
	ldr	r2, [sp, #20]
	strd	r4, [sp, #24]
	str	r10, [sp, #32]
	mov	r10, r3
	add	r7, r2, #2
	add	r8, r2, #254
	mov	r4, r2
	mov	r5, r7
.L11359:
	ldr	lr, [r9, #4]
	cmp	lr, #0
	beq	.L11345
	ldr	r3, [lr]
	cmp	r3, #0
	beq	.L11345
.L11350:
	ldrh	r2, [r4, #2]
	ldrh	r1, [r3]
	cmp	r2, #0
	beq	.L11495
	cmp	r8, r5
	bls	.L11495
	cmp	r2, r1
	beq	.L11347
	mov	r3, r5
	b	.L11348
.L11731:
	cmp	r8, r3
	bls	.L11346
	cmp	r1, r2
	beq	.L11347
.L11348:
	ldrh	r2, [r3, #2]!
	cmp	r2, #0
	bne	.L11731
.L11346:
	strh	r1, [r3]	@ movhi
.L11347:
	ldr	r3, [lr, #4]!
	cmp	r3, #0
	bne	.L11350
.L11345:
	mov	r6, r9
	ldr	r7, [r6, #36]!
	cmp	r6, r7
	sub	r7, r7, #72
	beq	.L11351
.L11358:
	ldr	r0, [r7]
	bl	is_available_function
	cmp	r0, #0
	beq	.L11352
	ldr	r0, [r7, #4]
	cmp	r0, #0
	beq	.L11352
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L11352
.L11357:
	ldrh	r2, [r4, #2]
	ldrh	r1, [r3]
	cmp	r2, #0
	beq	.L11497
	cmp	r8, r5
	bls	.L11497
	cmp	r1, r2
	beq	.L11354
	mov	r3, r5
	b	.L11355
.L11732:
	cmp	r8, r3
	bls	.L11353
	cmp	r1, r2
	beq	.L11354
.L11355:
	ldrh	r2, [r3, #2]!
	cmp	r2, #0
	bne	.L11732
.L11353:
	strh	r1, [r3]	@ movhi
.L11354:
	ldr	r3, [r0, #4]!
	cmp	r3, #0
	bne	.L11357
.L11352:
	ldr	r7, [r7, #72]
	cmp	r6, r7
	sub	r7, r7, #72
	bne	.L11358
.L11351:
	ldr	r9, [r9, #28]
	cmp	r10, r9
	sub	r9, r9, #28
	bne	.L11359
	ldrd	r4, [sp, #24]
	ldr	r10, [sp, #32]
.L11344:
	mov	r3, #0
.L11360:
	ldr	r2, [sp, #20]
	add	r2, r2, r3, lsl #1
	ldrh	r2, [r2, #2]	@ unaligned
	cmp	r2, #0
	bne	.L11362
	cmp	r3, #0
	beq	.L11472
.L11361:
	add	r3, r3, #1
	ldr	r2, [sp, #20]
	lsl	r3, r3, #1
	uxtb	r3, r3
	mov	r0, r3
	strb	r3, [r2]
	b	.L11363
.L11497:
	mov	r3, r5
	b	.L11353
.L11495:
	mov	r3, r5
	b	.L11346
.L11371:
	mov	r2, r5
	ldr	r3, [r2, #36]!
	cmp	r2, r3
	sub	r3, r3, #28
	str	r3, [sp, #24]
	str	r2, [sp, #44]
	beq	.L11472
	ldr	r7, [sp, #20]
	str	r4, [sp, #28]
	str	fp, [sp, #32]
	str	r5, [sp, #36]
	str	r10, [sp, #40]
	add	r3, r7, #2
	mov	fp, r3
	ldr	r3, [sp, #24]
.L11370:
	ldr	r0, [r3, #4]
	cmp	r0, #0
	beq	.L11375
	mov	r3, r9
	mov	r2, r6
	mov	r1, r7
	bl	lookup_string
	cmp	r0, #0
	bgt	.L11704
.L11375:
	ldr	r3, [sp, #24]
	ldr	r8, [r3, #36]!
	cmp	r3, r8
	str	r3, [sp, #20]
	sub	r8, r8, #72
	beq	.L11374
	mov	r10, #126
.L11373:
	ldr	r5, [r8, #4]
	cmp	r5, #0
	subne	r5, r5, #4
	beq	.L11376
.L11377:
	ldr	r3, [r5, #4]!
	cmp	r3, #0
	beq	.L11376
	ldrh	r2, [r3]
	cmp	r2, r6
	bne	.L11377
	ldr	r3, [r3, #4]
	cmp	r3, #0
	bne	.L11711
	b	.L11377
.L11733:
	adds	r3, r3, #8
	beq	.L11377
.L11711:
	ldr	r4, [r3, #4]
	cmp	r4, #0
	beq	.L11377
	ldrb	r2, [r3]	@ zero_extendqisi2
	cmp	r9, r2
	bne	.L11733
	mov	r0, r4
	bl	strlen
	cmp	r0, #126
	mov	r3, fp
	str	r10, [sp]
	movcc	r1, r0
	movcs	r1, #126
	mov	r2, #1
	mov	r0, r4
	bl	utf8s_to_utf16s
	cmp	r0, #0
	blt	.L11377
	add	r3, r0, #1
	mov	r2, #3
	lsl	r3, r3, #1
	strb	r2, [r7, #1]
	uxtb	r3, r3
	subs	r0, r3, #0
	strb	r3, [r7]
	beq	.L11377
.L11704:
	ldr	r4, [sp, #28]
	ldr	fp, [sp, #32]
	ldr	r5, [sp, #36]
	ldr	r10, [sp, #40]
	b	.L11363
.L11489:
	movw	r3, #4087
	mov	r1, r3
	b	.L11317
.L11726:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r7, [r3, #3244]
	cmp	r7, #0
	bne	.L11365
	ldr	r2, [r3, #2476]
	ldr	r7, [r2, #8]
	cmp	r7, #0
	addeq	r7, r3, #3248
.L11365:
	mov	r0, r7
	bl	strlen
	ldr	r3, [sp, #20]
	mov	r2, #126
	cmp	r0, r2
	movcc	r1, r0
	movcs	r1, r2
	str	r2, [sp]
	mov	r0, r7
	mov	r2, #1
	add	r3, r3, #2
	bl	utf8s_to_utf16s
	cmp	r0, #0
	blt	.L11472
	add	r3, r0, #1
	ldr	r1, [sp, #20]
	mov	r2, #3
	lsl	r3, r3, #1
	uxtb	r3, r3
	mov	r0, r3
	strb	r3, [r1]
	strb	r2, [r1, #1]
	b	.L11363
.L11491:
	mov	r6, r1
	mov	r5, r9
	b	.L11329
.L11727:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r7, [r3, #3300]
	cmp	r7, #0
	ldreq	r2, [r3, #2476]
	ldreq	r7, [r2, #4]
	bne	.L11365
.L11367:
	cmp	r7, #0
	beq	.L11368
	b	.L11365
.L11362:
	add	r3, r3, #1
	cmp	r3, #127
	bne	.L11360
	b	.L11361
.L11493:
	mov	r3, lr
	b	.L11339
.L11308:
	ldr	r3, [sp, #24]
	cmp	r8, #7
	moveq	r3, #0
	str	r3, [sp, #24]
	b	.L11307
.L11682:
	ldr	r7, [r3, #3304]
	b	.L11367
.L11507:
	mov	r6, r3
	b	.L11435
.L11301:
	ldr	r6, [r6, #28]
	cmp	r7, r6
	sub	r6, r6, #28
	bne	.L11471
	b	.L11297
.L11295:
	ldr	r3, [r3, #16]
	mov	r7, r0
	ldr	r6, [r7, #36]!
	cmp	r3, #3
	beq	.L11734
	cmp	r7, r6
	sub	r6, r6, #28
	beq	.L11482
	cmp	r3, #5
	mov	r3, #0
	bne	.L11300
.L11299:
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	mov	r0, r6
	add	r1, r3, #1
	tst	r2, #1
	beq	.L11305
	bl	count_multi_config
	ldr	r6, [r6, #28]
	mov	r3, r0
	cmp	r7, r6
	sub	r6, r6, #28
	bne	.L11299
	b	.L11297
.L11303:
	ldr	r6, [r6, #28]
	cmp	r7, r6
	sub	r6, r6, #28
	beq	.L11297
.L11300:
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	mov	r0, r6
	add	r1, r3, #1
	tst	r2, #2
	beq	.L11303
	bl	count_multi_config
	ldr	r6, [r6, #28]
	mov	r3, r0
	cmp	r7, r6
	sub	r6, r6, #28
	bne	.L11300
	b	.L11297
.L11305:
	ldr	r6, [r6, #28]
	cmp	r7, r6
	sub	r6, r6, #28
	bne	.L11299
	b	.L11297
.L11443:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC957
	adds	fp, fp, #0
	mov	r2, r6
	movt	r1, #:upper16:.LC957
	movne	fp, #1
	add	r0, r0, #32
	bl	dev_err
	b	.L11293
.L11710:
	adds	fp, fp, #0
	movne	fp, #1
	b	.L11293
.L11729:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC952
	ldr	ip, [r9]
	movt	r2, #:upper16:.LC952
	ldr	r3, .L11741
	ldr	r0, .L11741+20
	add	r1, r1, #32
	stm	sp, {r8, ip}
	bl	__dynamic_dev_dbg
	b	.L11433
.L11490:
	ldr	r3, [sp, #32]
	b	.L11318
.L11734:
	cmp	r7, r6
	sub	r6, r6, #28
	bne	.L11296
.L11482:
	mov	r3, #0
	b	.L11297
.L11386:
	mov	r3, #500
	strb	r1, [sp, #60]
	strh	r3, [sp, #62]	@ movhi
	b	.L11387
.L11273:
	ldr	r3, [r0]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	movls	r7, #0
	movls	r9, r7
	bls	.L11280
	ldr	r7, [r3, #16]
	cmp	r7, #3
	beq	.L11478
	sub	r7, r7, #5
	mov	r9, #0
	clz	r7, r7
	lsr	r7, r7, #5
.L11280:
	mov	r8, r5
	ldr	r6, [r8, #36]!
	mov	r2, #0
	sub	r6, r6, #28
	b	.L11281
.L11736:
	tst	r3, #1
	beq	.L11283
.L11284:
	bl	count_multi_config
	mov	r2, r0
.L11283:
	ldr	r6, [r6, #28]
	sub	r6, r6, #28
.L11281:
	add	r3, r6, #28
	mov	r0, r6
	cmp	r3, r8
	add	r1, r2, #1
	beq	.L11735
	cmp	r7, #0
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	bne	.L11736
	cmp	r9, #0
	beq	.L11285
	tst	r3, #2
	bne	.L11284
	b	.L11283
.L11735:
	ldr	r1, [r5]
	strb	r2, [r5, #34]
	mov	r2, #2
	ldr	r3, [r1, #4]
	ldrh	r3, [r3, #20]
	strb	r3, [r5, #24]
	str	r2, [r5, #64]
	ldr	r3, [r10, #20]
	cmp	r3, #4
	bls	.L11287
	ldr	r3, [r10, #16]
	cmp	r3, #4
	bls	.L11288
	mov	r3, #0
	mov	r2, #9
	mov	ip, #3
	movw	r0, #:lower16:.LANCHOR4
	strb	r3, [r5, #19]
	movt	r0, #:upper16:.LANCHOR4
	movw	r3, #1650
	strb	ip, [r5, #20]
	strb	r2, [r5, #24]
	ldrh	r3, [r0, r3]
	mov	r2, #8
	str	r2, [r5, #64]
	tst	r3, #4
	beq	.L11290
	movw	r2, #:lower16:.LC941
	add	r1, r1, #32
	add	r0, r0, #1632
	movt	r2, #:upper16:.LC941
	bl	__dynamic_dev_dbg
.L11290:
	cmp	fp, #17
	add	r1, r5, #17
	ldr	r0, [r4]
	movls	r7, fp
	movhi	r7, #18
	mov	r2, r7
	bl	memcpy
	movw	r0, #:lower16:.LC944
	movt	r0, #:upper16:.LC944
	bl	printk
	cmp	fp, r7
	movls	fp, #0
	movhi	fp, #1
	b	.L11293
.L11288:
	mov	r0, #16
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	strb	r0, [r5, #19]
	strb	r2, [r5, #20]
	movw	r2, #1674
	ldrh	r3, [r3, r2]
	tst	r3, #4
	beq	.L11290
	movw	r2, #:lower16:.LC942
	add	r1, r1, #32
	ldr	r0, .L11741+24
	movt	r2, #:upper16:.LC942
	bl	__dynamic_dev_dbg
	b	.L11290
.L11287:
	ldrb	r3, [r10, #377]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L11290
	mov	ip, #1
	movw	r0, #:lower16:.LANCHOR4
	movt	r0, #:upper16:.LANCHOR4
	movw	r3, #1698
	strb	ip, [r5, #19]
	strb	r2, [r5, #20]
	ldrh	r3, [r0, r3]
	tst	r3, #4
	beq	.L11290
	movw	r2, #:lower16:.LC943
	add	r1, r1, #32
	movt	r2, #:upper16:.LC943
	add	r0, r0, #1680
	bl	__dynamic_dev_dbg
	b	.L11290
.L11728:
	movw	r0, #:lower16:.LC945
	ldr	r1, .L11741+28
	mvn	r6, #21
	movt	r0, #:upper16:.LC945
	bl	printk
	b	.L11258
.L11478:
	mov	r7, #0
	mov	r9, #1
	b	.L11280
.L11285:
	tst	r3, #4
	bne	.L11284
	b	.L11283
.L11708:
	str	r4, [sp, #24]
	mov	r4, r5
	mov	r5, r6
	ldr	r3, [r5, #12]
	mov	r6, r9
	ldr	r9, [sp, #28]
	cmp	r3, #0
	beq	.L11397
	mov	r0, r5
	bl	reset_config
.L11397:
	ldr	r0, [r9, #16]
	ldr	r8, [r5]
	bl	usb_speed_string
	ldr	r3, [sp, #24]
	mov	r2, r0
	add	r8, r8, #32
	cmp	r3, #0
	beq	.L11402
	movw	r1, #:lower16:.LC948
	ldr	r3, [r3]
	mov	r6, #0
	mov	r0, r1
	movw	r1, #:lower16:.LC947
	movt	r0, #:upper16:.LC948
	movt	r1, #:upper16:.LC947
	str	r3, [sp]
	mov	r3, r7
	str	r0, [sp, #36]
	movw	r0, #:lower16:.LC950
	movt	r0, #:upper16:.LC950
	str	r0, [sp, #40]
	mov	r0, r8
	bl	_dev_info
	ldr	r3, [sp, #24]
	str	r4, [sp, #28]
	mov	r1, r6
	mov	r4, r6
	add	r2, r3, #48
	str	r3, [r5, #12]
	str	r2, [sp, #32]
.L11422:
	ldr	r3, [sp, #32]
	ldr	r8, [r3], #4
	cmp	r8, #0
	str	r3, [sp, #32]
	beq	.L11403
	ldr	r3, [r9, #16]
	cmp	r3, #3
	beq	.L11405
	cmp	r3, #5
	str	r3, [sp, #44]
	bne	.L11684
	ldr	r0, [sp, #36]
	bl	power_supply_get_by_name
	ldr	r6, [r8, #12]
	ldr	r3, [sp, #44]
	cmp	r6, #0
	beq	.L11737
	cmp	r0, #0
	beq	.L11738
	add	r2, sp, #64
	mov	r1, #4
	str	r3, [r2, #-4]!
	ldr	r3, [r0, #40]
	blx	r3
.L11411:
	ldr	r2, [r6]
	cmp	r2, #0
	beq	.L11416
	add	r3, r8, #80
	str	r9, [sp, #44]
	mov	r9, r4
	mov	r4, r3
.L11413:
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	cmp	r1, #5
	bne	.L11412
	ldrb	r2, [r2, #2]	@ zero_extendqisi2
	mov	r1, r4
	asr	r0, r2, #3
	and	r2, r2, #15
	and	r0, r0, #16
	orr	r0, r0, r2
	bl	_set_bit
.L11412:
	ldr	r2, [r6, #4]!
	cmp	r2, #0
	bne	.L11413
	mov	r4, r9
	ldr	r9, [sp, #44]
.L11416:
	mov	r2, #0
	mov	r1, r4
	ldr	r3, [r8, #40]
	mov	r0, r8
	blx	r3
	subs	r6, r0, #0
	blt	.L11739
	movw	r3, #32767
	cmp	r6, r3
	beq	.L11740
.L11419:
	add	r4, r4, #1
	cmp	r4, #16
	bne	.L11422
.L11403:
	ldr	r3, [sp, #24]
	ldr	r4, [sp, #28]
	ldrb	r3, [r3, #23]	@ zero_extendqisi2
	cmp	r3, #0
	ldrne	r1, [r5, #64]
	mulne	r1, r1, r3
	moveq	r1, #500
.L11423:
	ldr	r3, [r9]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L11464
	mov	r0, r9
	blx	r3
.L11464:
	ldr	r3, [r5, #56]
	cmp	r3, #0
	bne	.L11467
	ldr	r0, [sp, #20]
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC954
	movt	r0, #:upper16:.LC954
	bl	printk
	cmp	r6, #0
	bne	.L11425
.L11466:
	cmp	r7, #0
	beq	.L11426
	sub	r0, r7, #1
	bl	set_config_number
.L11426:
	ldr	r3, [r10, #16]
	cmp	r3, #5
	beq	.L11469
	adds	fp, fp, #0
	mov	r7, #0
	movne	fp, #1
	b	.L11293
.L11467:
	movw	r6, #32767
.L11408:
	ldr	r0, [sp, #20]
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC954
	movt	r0, #:upper16:.LC954
	bl	printk
.L11425:
	ldr	r3, [r10, #16]
	mvn	r7, r6
	movw	r8, #32767
	lsr	r7, r7, #31
	cmp	r6, r8
	moveq	r9, #0
	andne	r9, r7, #1
	cmp	r3, #5
	bne	.L11336
	bl	get_host_os_type
	cmp	r0, #0
	bne	.L11336
.L11475:
	movw	r7, #:lower16:sec_qcom_usb_rdrv
	mov	r1, #0
	movt	r7, #:upper16:sec_qcom_usb_rdrv
	ldr	r0, [r7]
	bl	__gpio_set_value
	movw	r0, #:lower16:.LC955
	ldr	r1, .L11741
	ldr	r2, [r7]
	movt	r0, #:upper16:.LC955
	bl	printk
	movw	r0, #:lower16:.LC956
	movt	r0, #:upper16:.LC956
	bl	printk
	b	.L11336
.L11469:
	bl	get_host_os_type
	cmp	r0, #0
	beq	.L11518
	mov	r6, #0
	b	.L11454
.L11740:
	ldr	r0, .L11741+32
	ldrh	r3, [r0]
	tst	r3, #4
	beq	.L11420
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC952
	sub	r0, r0, #18
	ldr	ip, [r8]
	movt	r2, #:upper16:.LC952
	ldr	r3, .L11741+36
	add	r1, r1, #32
	stm	sp, {r4, ip}
	bl	__dynamic_dev_dbg
.L11420:
	ldr	r0, .L11741+40
	ldr	r3, [r5, #56]
	ldrh	r2, [r0]
	add	r3, r3, #1
	str	r3, [r5, #56]
	tst	r2, #4
	beq	.L11419
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC953
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC953
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11419
.L11518:
	mov	r6, r0
	mov	r9, #1
	b	.L11475
.L11739:
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #1746
	movt	r0, #:upper16:.LANCHOR4
	mov	r2, r4
	ldr	r4, [sp, #28]
	ldrh	r3, [r0, r3]
	tst	r3, #4
	beq	.L11417
	ldr	r1, [r5]
	str	r8, [sp, #4]
	mov	r3, r2
	str	r6, [sp, #8]
	ldr	ip, [r8]
	movw	r2, #:lower16:.LC951
	add	r0, r0, #1728
	movt	r2, #:upper16:.LC951
	add	r1, r1, #32
	str	ip, [sp]
	bl	__dynamic_dev_dbg
.L11417:
	mov	r0, r5
	bl	reset_config
.L11401:
	ldr	r3, [r9]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L11408
	mov	r0, r9
	mov	r1, #100
	blx	r3
	b	.L11408
.L11720:
	mov	r0, r5
	bl	reset_config
	ldr	r9, [r5]
.L11393:
	ldr	r0, [r6, #16]
	add	r8, r9, #32
	bl	usb_speed_string
	mov	r2, r0
.L11402:
	movw	r3, #:lower16:.LC960
	movw	r1, #:lower16:.LC947
	movt	r3, #:upper16:.LC960
	mov	r0, r8
	movt	r1, #:upper16:.LC947
	str	r3, [sp]
	mov	r3, r7
	bl	_dev_info
	ldr	r3, [r6]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L11713
	mov	r0, r6
	mov	r1, #100
	blx	r3
.L11713:
	ldr	r3, [r5, #56]
	cmp	r3, #0
	bne	.L11467
.L11696:
	ldr	r0, [sp, #20]
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC954
	movt	r0, #:upper16:.LC954
	bl	printk
	b	.L11466
.L11738:
	ldr	r1, .L11741+36
	ldr	r2, [sp, #36]
	ldr	r0, [sp, #40]
	bl	printk
	b	.L11411
.L11737:
	movw	r0, #:lower16:.LC949
	ldr	r1, .L11741+36
	mvn	r6, #21
	ldr	r2, [r8]
	movt	r0, #:upper16:.LC949
	ldr	r4, [sp, #28]
	bl	printk
	b	.L11408
.L11684:
	ldr	r6, [r8, #16]
	b	.L11411
.L11405:
	ldr	r6, [r8, #8]
	b	.L11411
.L11742:
	.align	2
.L11741:
	.word	.LANCHOR5-1204
	.word	.LANCHOR4+1872
	.word	.LANCHOR4+1848
	.word	.LANCHOR4+1896
	.word	.LANCHOR4+1824
	.word	.LANCHOR4+1800
	.word	.LANCHOR4+1656
	.word	.LANCHOR5-1228
	.word	.LANCHOR4+1770
	.word	.LANCHOR5-1216
	.word	.LANCHOR4+1794
	.word	.LANCHOR4+1704
.L11719:
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #1722
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r2]
	tst	r3, #4
	beq	.L11696
	movw	r2, #:lower16:.LC946
	add	r1, r9, #32
	ldr	r0, .L11741+44
	movt	r2, #:upper16:.LC946
	mov	r3, r7
	bl	__dynamic_dev_dbg
	b	.L11696
.L11390:
	cmp	r7, #0
	beq	.L11393
	b	.L11459
	.fnend
	.size	composite_setup, .-composite_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_function_init, %function
acm_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 80
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:__stack_chk_guard
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	movt	r3, #:upper16:__stack_chk_guard
	mov	r5, r1
	strd	r8, [sp, #16]
	movw	r9, #:lower16:kmalloc_caches
	strd	r10, [sp, #24]
	movt	r9, #:upper16:kmalloc_caches
	str	lr, [sp, #32]
	.pad #92
	sub	sp, sp, #92
	ldr	r2, [r3]
	str	r3, [sp, #12]
	ldr	r3, [r9, #24]
	str	r2, [sp, #84]
	cmp	r3, #0
	moveq	r3, #16
	streq	r3, [r0, #4]
	beq	.L11745
	mov	r0, r3
	mov	r2, #4
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	beq	.L11762
.L11745:
	ldr	r3, [r5]
	mov	r1, #0
	mov	r0, #4
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	str	r3, [sp, #20]
	bl	__alloc_tty_driver
	cmp	r0, #0
	str	r0, [r8, #3764]
	beq	.L11762
	movw	r2, #:lower16:.LC961
	movw	r3, #:lower16:tty_std_termios
	ldr	r1, .L11789
	movt	r3, #:upper16:tty_std_termios
	movt	r2, #:upper16:.LC961
	ldrd	r4, [r3]
	mov	lr, #3
	str	r2, [r0, #72]
	movw	r2, #:lower16:.LC962
	ldrd	r6, [r3, #8]
	movt	r2, #:upper16:.LC962
	ldrd	r10, [r3, #32]
	movt	lr, 1
	str	r2, [r0, #76]
	str	lr, [r0, #96]
	mov	lr, #14
	strd	r4, [r0, #100]
	ldrd	r4, [r3, #16]
	ldrd	r2, [r3, #24]
	strd	r6, [r0, #108]
	strd	r4, [r0, #116]
	movw	r4, #3261
	mov	r5, #0
	strd	r10, [r0, #132]
	strd	r2, [r0, #124]
	mov	r3, #9600
	str	r4, [r0, #108]
	str	r3, [r0, #136]
	str	r3, [r0, #140]
	str	lr, [r0, #144]
	bl	tty_set_operations
	movw	r2, #:lower16:.LC963
	mov	r1, #10
	str	r5, [sp]
	movt	r2, #:upper16:.LC963
	movw	r0, #:lower16:.LC84
	mov	r3, r5
	movt	r1, 2
	str	r2, [sp, #4]
	movt	r0, #:upper16:.LC84
	mov	r2, #1
	bl	__alloc_workqueue_key
	ldr	r3, .L11789+4
	cmp	r0, r5
	str	r0, [r8, #3388]
	str	r3, [sp, #16]
	beq	.L11764
	movw	r2, #:lower16:.LC964
	movw	r1, #:lower16:.LC965
	str	r8, [sp, #24]
	movt	r2, #:upper16:.LC964
	movt	r1, #:upper16:.LC965
	str	r3, [sp, #28]
	add	r7, r3, #236
	mov	r6, r3
	mov	r8, r2
	mov	r10, r1
	b	.L11751
.L11784:
	mov	r2, #144
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L11782
.L11749:
	mov	fp, #0
	mov	r0, r4
	mov	r2, r7
	mov	r1, r10
	str	fp, [r0], #20
	add	r6, r6, #24
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC966
	mov	r2, r7
	add	r0, r4, #108
	movt	r1, #:upper16:.LC966
	bl	__init_waitqueue_head
	mov	r2, #65024
	strb	r5, [r4, #17]
	movw	r3, #:lower16:gs_rx_push
	movt	r2, 65535
	add	r5, r5, #1
	add	r1, r4, #64
	add	ip, r4, #32
	add	r0, r4, #48
	movt	r3, #:upper16:gs_rx_push
	mov	lr, #8
	cmp	r5, #4
	str	ip, [r4, #32]
	str	r2, [r4, #60]
	add	r2, r4, #76
	strb	fp, [r4, #126]
	mov	fp, #9600
	str	ip, [r4, #36]
	str	r0, [r4, #48]
	str	r0, [r4, #52]
	str	r1, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r4, #72]
	str	r2, [r4, #76]
	str	r2, [r4, #80]
	str	fp, [r4, #120]
	strh	lr, [r4, #124]	@ movhi
	str	r4, [r6, #-4]
	beq	.L11783
.L11751:
	mov	r0, r6
	mov	r2, r7
	mov	r1, r8
	bl	__mutex_init
	ldr	r0, [r9, #8]
	cmp	r0, #0
	bne	.L11784
	mov	r4, #16
	b	.L11749
.L11783:
	ldr	r8, [sp, #24]
	ldr	r10, [sp, #28]
	ldr	r0, [r8, #3764]
	str	r5, [r8, #3760]
	bl	tty_register_driver
	subs	r4, r0, #0
	bne	.L11785
	ldr	r3, [sp, #20]
	movw	r6, #:lower16:.LC968
	mov	r5, r4
	ldr	r7, .L11789+8
	movt	r6, #:upper16:.LC968
	add	r9, r3, #32
.L11754:
	mov	r2, r9
	mov	r1, r5
	ldr	r0, [r8, #3764]
	bl	tty_register_device
	cmn	r0, #4096
	bhi	.L11786
.L11753:
	add	r5, r5, #1
	cmp	r5, #4
	bne	.L11754
	ldr	r9, .L11789+12
	movw	r7, #:lower16:.LC969
	mov	r5, #0
	movt	r7, #:upper16:.LC969
.L11757:
	mov	r2, r7
	mov	r3, r5
	ldr	r6, [r10, #20]
	mov	r1, #48
	add	r0, sp, #36
	bl	snprintf
	add	r0, sp, #36
	mov	r1, #0
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r8, #3960]
	beq	.L11756
	cmn	r0, #4096
	bhi	.L11756
	movw	r0, #:lower16:.LC970
	mov	r3, r6
	str	r9, [sp]
	mov	r1, #292
	movt	r0, #:upper16:.LC970
	bl	debugfs_create_file
	ldr	ip, .L11789+16
	movw	r0, #:lower16:.LC971
	mov	r3, r6
	ldr	r2, [r8, #3960]
	movt	r0, #:upper16:.LC971
	mov	r1, #420
	str	ip, [sp]
	bl	debugfs_create_file
.L11756:
	add	r5, r5, #1
	add	r10, r10, #24
	cmp	r5, #4
	bne	.L11757
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #1938
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L11787
.L11743:
	ldr	r3, [sp, #12]
	mov	r0, r4
	ldr	r2, [sp, #84]
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L11788
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11764:
	mvn	r4, #11
	mov	r5, #3
.L11748:
	add	r5, r5, r5, lsl #1
	ldr	r6, .L11789+20
	add	r5, r3, r5, lsl #3
.L11758:
	ldr	r0, [r5, #20]
	sub	r5, r5, #24
	bl	kfree
	cmp	r6, r5
	bne	.L11758
.L11759:
	ldr	r0, [r8, #3388]
	cmp	r0, #0
	beq	.L11760
	bl	destroy_workqueue
.L11760:
	ldr	r0, [r8, #3764]
	bl	put_tty_driver
	mov	r3, #0
	str	r3, [r8, #3764]
	b	.L11743
.L11762:
	mvn	r4, #11
	b	.L11743
.L11786:
	mov	r3, r0
	mov	r2, r5
	mov	r1, r7
	mov	r0, r6
	bl	printk
	b	.L11753
.L11787:
	movw	ip, #:lower16:.LC973
	movw	r1, #:lower16:.LC972
	ldr	r2, .L11789+8
	movt	ip, #:upper16:.LC973
	mov	r3, r5
	movt	r1, #:upper16:.LC972
	add	r0, r0, #1920
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L11743
.L11782:
.L11750:
	cmp	r5, #0
	ldr	r8, [sp, #24]
	mvneq	r4, #11
	beq	.L11759
	sub	r5, r5, #1
	mvn	r4, #11
	ldr	r3, [sp, #16]
	b	.L11748
.L11788:
	bl	__stack_chk_fail
.L11785:
	movw	r0, #:lower16:.LC967
	mov	r2, r4
	ldr	r1, .L11789+8
	movt	r0, #:upper16:.LC967
	mov	r5, #3
	bl	printk
	ldr	r3, [sp, #16]
	b	.L11748
.L11790:
	.align	2
.L11789:
	.word	.LANCHOR5-1188
	.word	.LANCHOR1+3768
	.word	.LANCHOR5-1064
	.word	.LANCHOR5-1048
	.word	.LANCHOR5-940
	.word	.LANCHOR1+3744
	.fnend
	.size	acm_function_init, .-acm_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_open, %function
rndis_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r4, #:lower16:.LANCHOR4
	movw	r3, #1962
	strd	r6, [sp, #8]
	movt	r4, #:upper16:.LANCHOR4
	mov	r5, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [r4, r3]
	ldr	r6, [r2, #24]
	tst	r3, #4
	ldr	r1, [r6]
	bne	.L11818
.L11792:
	ldr	r3, [r1, #20]
	ldr	r7, [r5, #164]
	cmp	r3, #4
	uxtb	r6, r7
	bls	.L11793
	ldr	r3, [r1, #16]
	cmp	r3, #5
	beq	.L11819
.L11795:
	cmp	r3, #3
	movne	r8, #97280
	moveq	r8, #4259840
.L11794:
	movw	r3, #1602
	ldrh	r3, [r4, r3]
	tst	r3, #4
	bne	.L11820
.L11796:
	movw	r4, #:lower16:.LANCHOR1
	cmp	r6, #0
	ldr	r10, .L11821
	movt	r4, #:upper16:.LANCHOR1
	mov	r1, #0
	streq	r8, [r4, #3692]
	lsl	r8, r7, #4
	streq	r6, [r4, #3688]
	sub	r5, r8, r7
	lsl	r5, r5, #2
	add	r3, r4, r5
	add	r9, r10, r5
	str	r1, [r3, #3696]
	ldr	r3, [r9, #4]
	cmp	r3, r1
	beq	.L11791
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, r1
	beq	.L11805
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L11791
	add	r3, r6, #20
.L11800:
	sub	r7, r8, r7
	mov	fp, #20
	str	r3, [r6, #8]
	add	r4, r4, r7, lsl #2
	mov	r7, #0
	add	r2, r5, #52
	str	fp, [r6, #12]
	add	r2, r10, r2
	mov	r0, r6
	str	r7, [r6, #16]
	ldr	r1, [r4, #3736]
	bl	__list_add
	ldr	r3, [r6, #8]
	mov	r2, #11
	mov	r1, #7
	movt	r2, 16385
	stm	r3, {r1, fp}
	str	r2, [r3, #8]
	str	r7, [r3, #12]
	str	r7, [r3, #16]
	ldr	r3, [r9, #44]
	ldr	r0, [r9, #48]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	bx	r3	@ indirect register sibling call
.L11793:
	cmp	r3, #2
	movls	r8, #97280
	bls	.L11794
	ldr	r3, [r1, #16]
	b	.L11795
.L11819:
	movw	r3, #1602
	mov	r8, #8519680
	ldrh	r3, [r4, r3]
	tst	r3, #4
	beq	.L11796
.L11820:
	movw	r1, #:lower16:.LC940
	mov	r3, #0
	ldr	r2, .L11821+4
	movt	r1, #:upper16:.LC940
	ldr	r0, .L11821+8
	str	r8, [sp]
	bl	__dynamic_pr_debug
	ldr	r7, [r5, #164]
	b	.L11796
.L11805:
	mov	r3, #36
	mov	r6, #16
	b	.L11800
.L11818:
	movw	r2, #:lower16:.LC82
	add	r1, r1, #32
	ldr	r3, .L11821+12
	movt	r2, #:upper16:.LC82
	ldr	r0, .L11821+16
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L11792
.L11791:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11822:
	.align	2
.L11821:
	.word	.LANCHOR1+3680
	.word	.LANCHOR5-1268
	.word	.LANCHOR4+1584
	.word	.LANCHOR5-832
	.word	.LANCHOR4+1944
	.fnend
	.size	rndis_open, .-rndis_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_open, %function
rndis_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #1986
	strd	r6, [sp, #8]
	movt	r5, #:upper16:.LANCHOR4
	mov	r4, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [r5, r3]
	ldr	r6, [r2, #24]
	tst	r3, #4
	ldr	r1, [r6]
	bne	.L11850
.L11824:
	ldr	r3, [r1, #20]
	ldr	r7, [r4, #144]
	cmp	r3, #4
	uxtb	r6, r7
	bls	.L11825
	ldr	r3, [r1, #16]
	cmp	r3, #5
	beq	.L11851
.L11827:
	cmp	r3, #3
	movne	r8, #97280
	moveq	r8, #4259840
.L11826:
	movw	r3, #1602
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L11852
.L11828:
	movw	r4, #:lower16:.LANCHOR1
	cmp	r6, #0
	ldr	r10, .L11853
	movt	r4, #:upper16:.LANCHOR1
	mov	r1, #0
	streq	r8, [r4, #3692]
	lsl	r8, r7, #4
	streq	r6, [r4, #3688]
	sub	r5, r8, r7
	lsl	r5, r5, #2
	add	r3, r4, r5
	add	r9, r10, r5
	str	r1, [r3, #3696]
	ldr	r3, [r9, #4]
	cmp	r3, r1
	beq	.L11823
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, r1
	beq	.L11837
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L11823
	add	r3, r6, #20
.L11832:
	sub	r7, r8, r7
	mov	fp, #20
	str	r3, [r6, #8]
	add	r4, r4, r7, lsl #2
	mov	r7, #0
	add	r2, r5, #52
	str	fp, [r6, #12]
	add	r2, r10, r2
	mov	r0, r6
	str	r7, [r6, #16]
	ldr	r1, [r4, #3736]
	bl	__list_add
	ldr	r3, [r6, #8]
	mov	r2, #11
	mov	r1, #7
	movt	r2, 16385
	stm	r3, {r1, fp}
	str	r2, [r3, #8]
	str	r7, [r3, #12]
	str	r7, [r3, #16]
	ldr	r3, [r9, #44]
	ldr	r0, [r9, #48]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	bx	r3	@ indirect register sibling call
.L11825:
	cmp	r3, #2
	movls	r8, #97280
	bls	.L11826
	ldr	r3, [r1, #16]
	b	.L11827
.L11851:
	movw	r3, #1602
	mov	r8, #8519680
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L11828
.L11852:
	movw	r1, #:lower16:.LC940
	mov	r3, #0
	ldr	r2, .L11853+4
	movt	r1, #:upper16:.LC940
	ldr	r0, .L11853+8
	str	r8, [sp]
	bl	__dynamic_pr_debug
	ldr	r7, [r4, #144]
	b	.L11828
.L11837:
	mov	r3, #36
	mov	r6, #16
	b	.L11832
.L11850:
	movw	r2, #:lower16:.LC82
	add	r1, r1, #32
	ldr	r3, .L11853+12
	movt	r2, #:upper16:.LC82
	add	r0, r5, #1968
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L11824
.L11823:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11854:
	.align	2
.L11853:
	.word	.LANCHOR1+3680
	.word	.LANCHOR5-1268
	.word	.LANCHOR4+1584
	.word	.LANCHOR5-820
	.fnend
	.size	rndis_qc_open, .-rndis_qc_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_request_ep_out, %function
conn_gadget_request_ep_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #88
	strd	r8, [sp, #16]
	add	r9, r0, #128
	str	r10, [sp, #24]
	add	r10, r0, #136
	str	lr, [sp, #28]
	b	.L11856
.L11859:
	bl	list_del
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	mov	r1, r7
	mov	r2, #32
	beq	.L11858
	ldr	r3, [r5, #192]
	str	r3, [r4, #-32]
	ldr	r0, [r5, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	mov	r0, r6
	blt	.L11862
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r1, [r5, #140]
	mov	r0, r4
	mov	r2, r10
	bl	__list_add
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L11856:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #128]
	mov	r8, r0
	cmp	r9, r4
	mov	r0, r4
	sub	r7, r4, #36
	bne	.L11859
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L11858:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11862:
	movw	r0, #:lower16:.LC974
	mov	r2, r7
	ldr	r1, .L11863
	movt	r0, #:upper16:.LC974
	bl	printk
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r1, [r5, #132]
	mov	r0, r4
	mov	r2, r9
	bl	__list_add
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L11858
.L11864:
	.align	2
.L11863:
	.word	.LANCHOR5-804
	.fnend
	.size	conn_gadget_request_ep_out, .-conn_gadget_request_ep_out
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_open, %function
conn_gadget_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r0, #:lower16:.LC975
	movw	r4, #:lower16:.LANCHOR1
	movt	r0, #:upper16:.LC975
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	mov	r5, r1
	str	lr, [sp, #12]
	bl	printk
	ldr	r3, [r4, #2484]
	cmp	r3, #0
	beq	.L11873
	ldr	r0, [r3, #216]
	cmp	r0, #0
	bne	.L11874
	add	r2, r3, #116
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	ip, r1, [r2]
	teq	ip, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #1
	bne	.L11869
	ldr	r3, [r4, #2484]
	str	r3, [r5, #124]
	ldr	r2, [r3, #100]
	str	r0, [r3, #104]
	cmp	r2, #0
	bne	.L11875
.L11871:
	mov	r0, #0
	str	r2, [r3, #212]
.L11865:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11873:
	movw	r0, #:lower16:.LC425
	ldr	r1, .L11876
	movt	r0, #:upper16:.LC425
	bl	printk
	mvn	r0, #18
	b	.L11865
.L11875:
	movw	r0, #:lower16:.LC426
	ldr	r1, .L11876
	movt	r0, #:upper16:.LC426
	bl	printk
	ldr	r0, [r4, #2484]
	bl	conn_gadget_request_ep_out
	ldr	r3, [r4, #2484]
	ldr	r2, [r3, #100]
	b	.L11871
.L11869:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC977
	ldr	r1, .L11876
	movt	r0, #:upper16:.LC977
	bl	printk
	mvn	r0, #15
	b	.L11865
.L11874:
	movw	r0, #:lower16:.LC976
	ldr	r1, .L11876
	movt	r0, #:upper16:.LC976
	bl	printk
	mvn	r0, #10
	b	.L11865
.L11877:
	.align	2
.L11876:
	.word	.LANCHOR5-776
	.fnend
	.size	conn_gadget_open, .-conn_gadget_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_read, %function
conn_gadget_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r3, [r3, #2484]
	.pad #28
	sub	sp, sp, #28
	ldr	r4, [r0, #124]
	str	r2, [sp]
	cmp	r3, #0
	beq	.L11906
	ldr	r3, [r4, #192]
	mov	r6, r2
	cmp	r3, r2
	bls	.L11907
	add	r5, r4, #108
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L11903
	mov	r3, sp
	mov	r8, r1
	bic	r7, r3, #8128
	ldrd	r2, [r4, #100]
	bic	r7, r7, #63
.L11882:
	cmp	r2, #0
	bne	.L11887
.L11901:
	cmp	r3, #0
	beq	.L11908
.L11889:
	mvn	r3, #4
	movw	r0, #:lower16:.LC981
	ldr	r1, .L11911
	movt	r0, #:upper16:.LC981
	str	r3, [sp]
	bl	printk
.L11891:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [sp]
.L11878:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L11887:
	cmp	r3, #0
	bne	.L11889
	ldr	r3, [r4, #168]
	ldr	r2, [r4, #172]
	subs	r3, r3, r2
	bne	.L11892
.L11894:
	mov	r3, #0
	movw	r0, #:lower16:.LC982
	ldr	r1, .L11911
	movt	r0, #:upper16:.LC982
	str	r3, [sp]
	bl	printk
.L11893:
	mov	r0, r4
	bl	conn_gadget_request_ep_out
	b	.L11891
.L11892:
	cmp	r6, r3
	mov	r1, r8
	movcs	r6, r3
	add	r0, r4, #168
	mov	r2, r6
	mov	r3, sp
	bl	__kfifo_to_user
	cmp	r6, #0
	mov	r2, r0
	beq	.L11894
	cmp	r0, #0
	blt	.L11909
	ldr	r2, [r4, #168]
	ldr	r3, [r4, #196]
	ldr	r1, [r4, #172]
	add	r3, r3, r3, lsr #31
	sub	r2, r2, r1
	cmp	r2, r3, asr #1
	bhi	.L11891
	b	.L11893
.L11909:
	mvn	r3, #13
	movw	r0, #:lower16:.LC983
	ldr	r1, .L11911
	movt	r0, #:upper16:.LC983
	str	r3, [sp]
	bl	printk
	b	.L11891
.L11903:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC979
	ldr	r1, .L11911
	movt	r0, #:upper16:.LC979
	bl	printk
	mvn	r0, #15
	b	.L11878
.L11907:
	movw	r0, #:lower16:.LC978
	ldr	r1, .L11911
	movt	r0, #:upper16:.LC978
	bl	printk
	mvn	r0, #21
	b	.L11878
.L11906:
	movw	r0, #:lower16:.LC425
	ldr	r1, .L11911
	movt	r0, #:upper16:.LC425
	bl	printk
	mvn	r0, #18
	b	.L11878
.L11908:
	movw	r0, #:lower16:.LC980
	ldr	r1, .L11911
	movt	r0, #:upper16:.LC980
	bl	printk
	ldrd	r2, [r4, #100]
	cmp	r2, #0
	bne	.L11882
	cmp	r3, #0
	bne	.L11901
	ldr	r0, [r7, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #16
	movt	r2, #:upper16:autoremove_wake_function
	add	r9, r4, #144
	str	r3, [sp, #4]
	str	r1, [sp, #16]
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #20]
	b	.L11886
.L11910:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L11884
	ldr	r3, [r7, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L11885
	bl	schedule
.L11886:
	mov	r2, #1
	add	r1, sp, #4
	mov	r0, r9
	bl	prepare_to_wait
	ldr	r3, [r4, #100]
	cmp	r3, #0
	beq	.L11910
.L11884:
	add	r1, sp, #4
	mov	r0, r9
	bl	finish_wait
	ldrd	r2, [r4, #100]
	b	.L11882
.L11885:
	mov	r0, r9
	add	r1, sp, #4
	bl	finish_wait
	mov	r2, #65024
	movw	r0, #:lower16:.LC984
	ldr	r1, .L11911
	movt	r2, 65535
	movt	r0, #:upper16:.LC984
	bl	printk
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #65024
	movt	r0, 65535
	b	.L11878
.L11912:
	.align	2
.L11911:
	.word	.LANCHOR5-756
	.fnend
	.size	conn_gadget_read, .-conn_gadget_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_send_break, %function
acm_send_break:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	cmp	r1, #0
	strd	r6, [sp, #8]
	movw	r6, #:lower16:__stack_chk_guard
	add	r7, r0, #148
	strd	r8, [sp, #16]
	movt	r6, #:upper16:__stack_chk_guard
	str	r10, [sp, #24]
	ldr	r2, [r6]
	str	lr, [sp, #28]
	ldrh	r3, [r0, #170]
	.pad #24
	sub	sp, sp, #24
	mov	r0, r7
	str	r2, [sp, #20]
	ldr	r2, [r4, #20]
	bic	r3, r3, #4
	uxth	r3, r3
	orrne	r3, r3, #4
	strh	r3, [r4, #170]	@ movhi
	ldr	r5, [r2, #24]
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	ldr	r0, [r4, #156]
	cmp	r0, #0
	moveq	r3, #1
	moveq	r5, r0
	strbeq	r3, [r4, #147]
	bne	.L11927
.L11918:
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [sp, #20]
	mov	r0, r5
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L11928
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11927:
	ldr	r0, .L11930
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L11929
.L11916:
	movw	r0, #:lower16:.LC648
	ldrh	r2, [r4, #170]
	mov	r5, #32
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC648
	bl	printk
	add	r0, sp, #10
	mov	r1, #10
	ldr	r10, [r4, #152]
	bl	__memzero
	ldr	r9, [r4, #156]
	mov	r2, #0
	mov	r0, #10
	mvn	r1, #94
	mov	ip, #2
	strb	r2, [r4, #147]
	str	r2, [r4, #156]
	ldr	r3, [r9]
	str	r0, [r9, #4]
	mov	r0, r7
	strb	r1, [r3]
	strb	r5, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	ldrb	r1, [r4, #144]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	r2, [r3, #7]
	ldrh	ip, [r4, #170]	@ unaligned
	ldr	r1, [sp, #14]	@ unaligned
	strh	ip, [sp, #10]	@ movhi
	ldr	ip, [sp, #10]	@ unaligned
	str	ip, [r3, #8]	@ unaligned
	str	r1, [r3, #12]	@ unaligned
	ldrh	r1, [sp, #18]	@ unaligned
	strh	r1, [r3, #16]	@ unaligned
	ldrh	r2, [r4, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock
	ldr	r3, [r10, #8]
	mov	r2, r5
	mov	r1, r9
	mov	r0, r10
	ldr	r3, [r3, #16]
	blx	r3
	mov	r5, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	r5, #0
	bge	.L11918
	ldr	r0, [r4, #20]
	movw	r1, #:lower16:.LC649
	mov	r3, r5
	movt	r1, #:upper16:.LC649
	ldrb	r2, [r4, #146]	@ zero_extendqisi2
	ldr	r0, [r0, #24]
	ldr	r0, [r0]
	add	r0, r0, #32
	bl	dev_err
	str	r9, [r4, #156]
	b	.L11918
.L11928:
	bl	__stack_chk_fail
.L11929:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC647
	sub	r0, r0, #24
	ldrh	ip, [r4, #170]
	movt	r2, #:upper16:.LC647
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	add	r1, r1, #32
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L11916
.L11931:
	.align	2
.L11930:
	.word	.LANCHOR4-1776
	.fnend
	.size	acm_send_break, .-acm_send_break
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_disconnect, %function
acm_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r5, #:lower16:__stack_chk_guard
	mov	r4, r0
	strd	r6, [sp, #8]
	movt	r5, #:upper16:__stack_chk_guard
	add	r6, r0, #148
	strd	r8, [sp, #16]
	ldr	r2, [r5]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r0, #170]
	.pad #24
	sub	sp, sp, #24
	ldr	r1, [r0, #20]
	mov	r0, r6
	str	r2, [sp, #20]
	bic	r3, r3, #3
	strh	r3, [r4, #170]	@ movhi
	ldr	r8, [r1, #24]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #156]
	mov	r7, r0
	cmp	r3, #0
	moveq	r3, #1
	strbeq	r3, [r4, #147]
	bne	.L11942
.L11936:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [sp, #20]
	ldr	r3, [r5]
	cmp	r2, r3
	bne	.L11943
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11942:
	ldr	r0, .L11945
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L11944
.L11934:
	movw	r0, #:lower16:.LC648
	ldrh	r2, [r4, #170]
	mov	r9, #32
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC648
	bl	printk
	add	r0, sp, #10
	mov	r1, #10
	ldr	r10, [r4, #152]
	bl	__memzero
	ldr	r8, [r4, #156]
	mov	r2, #0
	mov	r0, #10
	mvn	r1, #94
	mov	ip, #2
	strb	r2, [r4, #147]
	str	r2, [r4, #156]
	ldr	r3, [r8]
	str	r0, [r8, #4]
	mov	r0, r6
	strb	r1, [r3]
	strb	r9, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	ldrb	r1, [r4, #144]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	r2, [r3, #7]
	ldrh	ip, [r4, #170]	@ unaligned
	ldr	r1, [sp, #14]	@ unaligned
	strh	ip, [sp, #10]	@ movhi
	ldr	ip, [sp, #10]	@ unaligned
	str	ip, [r3, #8]	@ unaligned
	str	r1, [r3, #12]	@ unaligned
	ldrh	r1, [sp, #18]	@ unaligned
	strh	r1, [r3, #16]	@ unaligned
	ldrh	r2, [r4, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock
	ldr	r3, [r10, #8]
	mov	r2, r9
	mov	r1, r8
	mov	r0, r10
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r9, #0
	bge	.L11936
	ldr	r0, [r4, #20]
	movw	r1, #:lower16:.LC649
	mov	r3, r9
	movt	r1, #:upper16:.LC649
	ldrb	r2, [r4, #146]	@ zero_extendqisi2
	ldr	r0, [r0, #24]
	ldr	r0, [r0]
	add	r0, r0, #32
	bl	dev_err
	str	r8, [r4, #156]
	b	.L11936
.L11943:
	bl	__stack_chk_fail
.L11944:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC647
	sub	r0, r0, #24
	ldrh	ip, [r4, #170]
	movt	r2, #:upper16:.LC647
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	add	r1, r1, #32
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L11934
.L11946:
	.align	2
.L11945:
	.word	.LANCHOR4-1776
	.fnend
	.size	acm_disconnect, .-acm_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_connect, %function
acm_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r5, #:lower16:__stack_chk_guard
	mov	r4, r0
	strd	r6, [sp, #8]
	movt	r5, #:upper16:__stack_chk_guard
	add	r6, r0, #148
	strd	r8, [sp, #16]
	ldr	r2, [r5]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r0, #170]
	.pad #24
	sub	sp, sp, #24
	ldr	r1, [r0, #20]
	mov	r0, r6
	str	r2, [sp, #20]
	orr	r3, r3, #3
	strh	r3, [r4, #170]	@ movhi
	ldr	r8, [r1, #24]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #156]
	mov	r7, r0
	cmp	r3, #0
	moveq	r3, #1
	strbeq	r3, [r4, #147]
	bne	.L11957
.L11951:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [sp, #20]
	ldr	r3, [r5]
	cmp	r2, r3
	bne	.L11958
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11957:
	ldr	r0, .L11960
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L11959
.L11949:
	movw	r0, #:lower16:.LC648
	ldrh	r2, [r4, #170]
	mov	r9, #32
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC648
	bl	printk
	add	r0, sp, #10
	mov	r1, #10
	ldr	r10, [r4, #152]
	bl	__memzero
	ldr	r8, [r4, #156]
	mov	r2, #0
	mov	r0, #10
	mvn	r1, #94
	mov	ip, #2
	strb	r2, [r4, #147]
	str	r2, [r4, #156]
	ldr	r3, [r8]
	str	r0, [r8, #4]
	mov	r0, r6
	strb	r1, [r3]
	strb	r9, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	ldrb	r1, [r4, #144]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	r2, [r3, #7]
	ldrh	ip, [r4, #170]	@ unaligned
	ldr	r1, [sp, #14]	@ unaligned
	strh	ip, [sp, #10]	@ movhi
	ldr	ip, [sp, #10]	@ unaligned
	str	ip, [r3, #8]	@ unaligned
	str	r1, [r3, #12]	@ unaligned
	ldrh	r1, [sp, #18]	@ unaligned
	strh	r1, [r3, #16]	@ unaligned
	ldrh	r2, [r4, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock
	ldr	r3, [r10, #8]
	mov	r2, r9
	mov	r1, r8
	mov	r0, r10
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r9, #0
	bge	.L11951
	ldr	r0, [r4, #20]
	movw	r1, #:lower16:.LC649
	mov	r3, r9
	movt	r1, #:upper16:.LC649
	ldrb	r2, [r4, #146]	@ zero_extendqisi2
	ldr	r0, [r0, #24]
	ldr	r0, [r0]
	add	r0, r0, #32
	bl	dev_err
	str	r8, [r4, #156]
	b	.L11951
.L11958:
	bl	__stack_chk_fail
.L11959:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC647
	sub	r0, r0, #24
	ldrh	ip, [r4, #170]
	movt	r2, #:upper16:.LC647
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	add	r1, r1, #32
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L11949
.L11961:
	.align	2
.L11960:
	.word	.LANCHOR4-1776
	.fnend
	.size	acm_connect, .-acm_connect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_write, %function
ffs_ep0_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #44
	sub	sp, sp, #44
	add	r6, r4, #96
	.syntax divided
@ 193 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
.L11963:
	.syntax divided
@ 170 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	lr, [r6]
	mov	ip, #0
	teq	lr, #2
	strexeq ip, r3, [r6]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	ip, #0
	bne	.L11963
	.syntax divided
@ 195 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	lr, #2
	beq	.L12037
	ldr	r3, [r0, #32]
	add	r10, r4, #4
	mov	fp, r2
	mov	r7, r1
	mov	r0, r10
	tst	r3, #2048
	bne	.L12101
	bl	mutex_lock_interruptible
	subs	r5, r0, #0
	blt	.L11962
.L11969:
	ldr	r3, [r4, #92]
	cmp	r3, #1
	bls	.L11967
	cmp	r3, #2
	bne	.L12102
	add	r9, r4, #116
	mov	r0, r9
	bl	_raw_spin_lock_irq
	.syntax divided
@ 193 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
.L12022:
	.syntax divided
@ 170 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r2, [r6]
	mov	r8, #0
	teq	r2, #2
	strexeq r8, r3, [r6]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r8, #0
	bne	.L12022
	.syntax divided
@ 195 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L12046
	cmp	r2, #2
	moveq	r7, r8
	mvneq	r5, #42
	beq	.L12024
	ldrsb	r3, [r4, #108]
	cmp	r3, #0
	blt	.L12026
	mov	r0, r9
	bl	_raw_spin_unlock_irq
	ldrh	r3, [r4, #106]
	cmp	r3, #0
	beq	.L12027
	ldr	r3, [r4]
	mvn	r5, #50
	mov	r1, #1
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	str	r8, [r4, #96]
.L11966:
	mov	r0, r10
	bl	mutex_unlock
.L11962:
	mov	r0, r5
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12101:
	bl	mutex_trylock
	cmp	r0, #0
	bne	.L11969
	mvn	r5, #10
	b	.L11962
.L11967:
	cmp	fp, #15
	bls	.L12040
	mov	r0, r7
	mov	r1, fp
	bl	ffs_prepare_buffer
	cmn	r0, #4096
	mov	r6, r0
	movhi	r5, r0
	bhi	.L11966
	ldr	r3, [r4, #92]
	cmp	r3, #0
	bne	.L11971
	movw	r0, #:lower16:.LC985
	movt	r0, #:upper16:.LC985
	bl	printk
	ldr	r3, [r6]	@ unaligned
	cmp	r3, #1
	bne	.L11986
	ldr	r3, [r6, #4]	@ unaligned
	cmp	fp, r3
	bne	.L11986
	ldr	r9, [r6, #8]	@ unaligned
	add	r8, r6, #16
	sub	r7, fp, #16
	ldr	r3, [r6, #12]	@ unaligned
	cmp	r9, #0
	str	r3, [sp, #12]
	beq	.L12041
	movw	r3, #:lower16:__ffs_data_do_entity
	mov	r2, r7
	str	r4, [sp]
	movt	r3, #:upper16:__ffs_data_do_entity
	mov	r1, r8
	mov	r0, r9
	bl	ffs_do_descs.constprop.141
	subs	r5, r0, #0
	blt	.L11975
	ldr	r0, [sp, #12]
	add	r8, r8, r5
	sub	r7, r7, r5
.L11974:
	cmp	r0, #0
	beq	.L11976
	movw	r3, #:lower16:__ffs_data_do_entity
	mov	r2, r7
	str	r4, [sp]
	movt	r3, #:upper16:__ffs_data_do_entity
	mov	r1, r8
	bl	ffs_do_descs.constprop.141
	subs	r2, r0, #0
	str	r2, [sp, #16]
	blt	.L12042
	add	r3, r2, #8
	cmp	r7, r3
	bcc	.L11978
.L11977:
	ldr	r1, [r8, r2]	@ unaligned
	movw	r3, #56924
	movt	r3, 85
	cmp	r1, r3
	beq	.L12103
.L11986:
	mov	r0, r6
	mvn	r5, #21
	bl	kfree
	mov	r0, r10
	bl	mutex_unlock
	b	.L11962
.L12102:
	mov	r0, r10
	mvn	r5, #76
	bl	mutex_unlock
	b	.L11962
.L11971:
	movw	r0, #:lower16:.LC986
	movt	r0, #:upper16:.LC986
	bl	printk
	ldr	r3, [r6]	@ unaligned
	cmp	r3, #2
	bne	.L11986
	ldr	r3, [r6, #4]	@ unaligned
	cmp	fp, r3
	bne	.L11986
	ldr	r3, [r6, #12]	@ unaligned
	ldr	r9, [r6, #8]	@ unaligned
	str	r3, [sp, #12]
	clz	r3, r3
	clz	r2, r9
	lsr	r3, r3, #5
	lsr	r2, r2, #5
	cmp	r2, r3
	bne	.L11986
	ldrh	r3, [r4, #176]
	cmp	r9, r3
	str	r3, [sp, #16]
	bcc	.L11986
	cmp	r3, #0
	beq	.L12104
	ldr	r0, [sp, #12]
	mov	r1, #208
	mla	r2, r3, r0, r0
	add	r3, r0, #1
	add	r8, r3, r0, lsl #1
	lsl	r5, r3, #2
	add	r2, r2, r0
	lsl	r8, r8, #2
	add	r3, r3, r2, lsl #1
	lsl	r0, r3, #2
	bl	__kmalloc
	subs	r3, r0, #0
	str	r3, [sp, #20]
	beq	.L12105
	add	r0, r3, r5
	mov	r1, r3
	ldr	r3, [sp, #12]
	mov	r2, r0
.L11990:
	subs	r3, r3, #1
	str	r2, [r1], #4
	add	r2, r2, #8
	bne	.L11990
	str	r3, [r0, #-4]
	ldr	r3, [sp, #20]
	sub	r5, fp, #16
	cmp	r5, #2
	add	r7, r6, #16
	add	r8, r3, r8
	bls	.L11991
	add	r3, r0, #8
	str	r4, [sp, #24]
	mov	r4, r3
	str	fp, [sp, #28]
.L11992:
	ldrb	r0, [r7, #1]	@ zero_extendqisi2
	sub	r5, r5, #2
	ldrb	r1, [r7], #2	@ zero_extendqisi2
	str	r8, [r4, #-4]
	ldr	fp, [sp, #16]
	orr	r1, r1, r0, lsl #8
	strh	r1, [r4, #-8]	@ movhi
	b	.L11994
.L12107:
	cmp	fp, #0
	beq	.L11993
	str	r7, [r8, #4]
	sub	fp, fp, #1
	add	r8, r8, #8
.L11993:
	subs	r9, r9, #1
	add	r3, r0, #1
	mvn	r0, r0
	add	r7, r7, r3
	add	r5, r5, r0
	beq	.L12106
.L11994:
	mov	r1, r5
	mov	r0, r7
	bl	strnlen
	cmp	r5, r0
	bne	.L12107
.L11991:
	ldr	r0, [sp, #20]
	bl	kfree
	b	.L11986
.L12046:
	mov	r7, r2
	mvn	r5, #2
.L12024:
	mov	r0, r9
	bl	_raw_spin_unlock_irq
.L12031:
	mov	r0, r7
	bl	kfree
	mov	r0, r10
	bl	mutex_unlock
	b	.L11962
.L12103:
	add	r1, r8, r2
	ldr	r3, [sp, #12]
	ldr	r1, [r1, #4]	@ unaligned
	orr	r3, r3, r9
	orrs	r3, r3, r1
	str	r1, [sp, #20]
	beq	.L11986
	cmp	r1, #0
	sub	r7, r7, #8
	mov	r0, r1
	sub	r7, r7, r2
	beq	.L12043
	add	r2, r2, #8
	movw	r3, #:lower16:__ffs_data_do_entity
	str	r4, [sp]
	add	r1, r8, r2
	movt	r3, #:upper16:__ffs_data_do_entity
	mov	r2, r7
	bl	ffs_do_descs.constprop.141
	subs	r3, r0, #0
	blt	.L12044
.L11983:
	cmp	r3, r7
	bne	.L11986
	ldr	r2, [sp, #16]
	str	r6, [r4, #144]
	ldr	r1, [sp, #20]
	str	r3, [r4, #160]
	str	r9, [r4, #164]
	add	r5, r5, r2
	add	r2, r5, r3
	ldr	r3, [sp, #12]
	cmp	r1, #0
	str	r5, [r4, #152]
	addne	r5, r5, #24
	str	r2, [r4, #148]
	str	r3, [r4, #168]
	mov	r3, #1
	strne	r5, [r4, #156]
	mov	r5, fp
	str	r3, [r4, #92]
	str	r1, [r4, #172]
	b	.L11966
.L12105:
	mov	r0, r6
	mvn	r5, #11
	bl	kfree
	b	.L11966
.L12026:
	ldrh	r5, [r4, #114]
	mov	r0, r9
	cmp	r5, fp
	movcs	r5, fp
	bl	_raw_spin_unlock_irq
	mov	r1, r5
	mov	r0, r7
	bl	ffs_prepare_buffer
	cmn	r0, #4096
	mov	r7, r0
	movhi	r5, r0
	bhi	.L11966
	mov	r0, r9
	bl	_raw_spin_lock_irq
	.syntax divided
@ 193 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
.L12029:
	.syntax divided
@ 170 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r2, [r6]
	mov	r3, #0
	teq	r2, #2
	strexeq r3, r8, [r6]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L12029
	.syntax divided
@ 195 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #2
	mvneq	r5, #42
	beq	.L12024
	ldr	r6, [r4, #28]
	mov	r0, r9
	ldrh	r3, [r4, #114]
	ldrb	r2, [r6, #26]	@ zero_extendqisi2
	cmp	r5, r3
	movcs	r3, #0
	movcc	r3, #1
	bfi	r2, r3, #1, #1
	strb	r2, [r6, #26]
	bl	_raw_spin_unlock_irq
	cmp	r7, #0
	str	r7, [r6]
	str	r5, [r6, #4]
	beq	.L12108
.L12032:
	ldr	r3, [r4]
	mov	r0, #0
	mov	r2, #32
	mov	r1, r6
	str	r0, [r4, #32]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	blt	.L12031
	add	r0, r4, #32
	bl	wait_for_completion_interruptible
	cmp	r0, #0
	bne	.L12109
	ldr	r5, [r4, #48]
	str	r0, [r4, #96]
	b	.L12031
.L12040:
	mvn	r5, #21
	b	.L11966
.L12106:
	ldr	r3, [sp, #12]
	strb	r9, [r8]
	add	r8, r8, #8
	str	r9, [r8, #-4]
	subs	r3, r3, #1
	str	r3, [sp, #12]
	beq	.L12110
	cmp	r5, #2
	add	r4, r4, #8
	bhi	.L11992
	b	.L11991
.L12104:
	mov	r0, r6
	bl	kfree
.L11988:
	ldrh	r5, [r4, #180]
	movw	r1, #32976
	rsb	r0, r5, r5, lsl #3
	lsl	r0, r0, #3
	bl	__kmalloc
	subs	r7, r0, #0
	beq	.L11996
	cmp	r5, #0
	beq	.L12035
	movw	r3, #:lower16:.LC987
	movw	r2, #:lower16:.LC988
	str	fp, [sp, #28]
	movt	r3, #:upper16:.LC987
	add	r1, r5, #1
	movt	r2, #:upper16:.LC988
	mov	r6, r7
	str	r3, [sp, #16]
	mov	r5, #1
	add	r3, r7, #48
	str	r3, [sp, #12]
	str	r2, [sp, #20]
	str	r1, [sp, #24]
.L12034:
	ldr	r2, .L12114
	mov	r0, r6
	str	r4, [r6, #36]
	ldr	r1, [sp, #16]
	bl	__mutex_init
	ldr	r1, [sp, #20]
	add	r0, r6, #20
	ldr	r2, .L12114
	bl	__init_waitqueue_head
	ldr	r8, [sp, #12]
	movw	r1, #:lower16:.LC989
	mov	r2, r5
	movt	r1, #:upper16:.LC989
	mov	r0, r8
	bl	sprintf
	ldr	fp, [r4, #192]
	mov	r1, r8
	ldr	r0, [fp, #60]
	ldr	r8, [fp, #616]
	bl	d_alloc_name
	subs	r9, r0, #0
	beq	.L11998
	mov	r0, fp
	bl	new_inode
	subs	fp, r0, #0
	beq	.L11999
	add	r0, sp, #32
	add	r5, r5, #1
	bl	current_kernel_time
	bl	get_next_ino
	str	r0, [fp, #40]
	ldrh	ip, [r8, #196]
	mov	r1, fp
	ldrd	r2, [sp, #32]
	mov	r0, r9
	ldr	lr, .L12114+4
	strh	ip, [fp]	@ movhi
	ldr	ip, [r8, #200]
	str	ip, [fp, #4]
	ldr	ip, [r8, #204]
	str	ip, [fp, #8]
	strd	r2, [fp, #52]
	strd	r2, [fp, #60]
	strd	r2, [fp, #68]
	str	lr, [fp, #200]
	str	r6, [fp, #328]
	bl	d_instantiate
	mov	r0, r9
	bl	d_rehash
	ldr	r3, [sp, #24]
	cmn	r6, #44
	add	r6, r6, #56
	strne	r9, [r6, #-12]
	cmp	r3, r5
	bne	.L12034
	ldr	fp, [sp, #28]
.L12035:
	mov	r3, #2
	mov	r0, r10
	str	r3, [r4, #92]
	str	r7, [r4, #208]
	bl	mutex_unlock
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r8, [r3, #2060]
	cmp	r8, #0
	beq	.L12111
	add	r6, r8, #24
	ldr	r5, [r3, #2044]
	mov	r0, r6
	bl	mutex_lock
	ldr	r3, [r4, #92]
	cmp	r3, #2
	beq	.L12010
.L12012:
	movw	r0, #:lower16:.LC33
	movw	r1, #1443
	movt	r0, #:upper16:.LC33
	mvn	r5, #76
	bl	warn_slowpath_null
	mov	r0, r6
	bl	mutex_unlock
.L12011:
	mov	r3, #3
	str	r3, [r4, #92]
	b	.L11962
.L11999:
	mov	r0, r9
	bl	dput
.L11998:
	subs	r5, r5, #1
	beq	.L12006
	ldr	r3, [r7]
	cmp	r3, #1
	bne	.L12002
	ldr	r2, [r7, #24]
	add	r3, r7, #24
	cmp	r2, r3
	bne	.L12002
	mov	r6, r7
	mov	r8, #0
.L12003:
	ldr	r0, [r6, #44]
	cmp	r0, #0
	beq	.L12004
	bl	d_delete
	ldr	r0, [r6, #44]
	bl	dput
	str	r8, [r6, #44]
.L12004:
	subs	r5, r5, #1
	add	r6, r6, #56
	beq	.L12006
	ldr	r3, [r6]
	cmp	r3, #1
	bne	.L12002
	ldr	r2, [r6, #24]
	add	r3, r6, #24
	cmp	r2, r3
	beq	.L12003
.L12002:
	.syntax divided
@ 1521 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1522, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L12006:
	mov	r0, r7
	bl	kfree
.L11996:
	mov	r3, #3
	mvn	r5, #11
	str	r3, [r4, #92]
	b	.L11966
.L12037:
	mvn	r5, #42
	b	.L11962
.L11976:
	cmp	r7, #7
	bhi	.L12112
	cmp	r9, #0
	beq	.L11986
	ldr	r3, [sp, #12]
	mov	r2, r3
	str	r3, [sp, #16]
.L11978:
	mov	r3, #0
	sub	r7, r7, r2
	str	r3, [sp, #20]
	b	.L11983
.L12044:
	mov	r5, r3
.L11975:
	mov	r0, r6
	bl	kfree
	b	.L11966
.L12111:
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #2010
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r2]
	tst	r3, #4
	mvneq	r5, #18
	beq	.L12011
	movw	r1, #:lower16:.LC990
	ldr	r2, .L12114+8
	mvn	r5, #18
	movt	r1, #:upper16:.LC990
	ldr	r0, .L12114+12
	bl	__dynamic_pr_debug
	b	.L12011
.L12027:
	ldr	r0, .L12114+16
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	mvneq	r5, #2
	beq	.L11966
	movw	r1, #:lower16:.LC700
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC700
	mvn	r5, #2
	bl	__dynamic_pr_debug
	b	.L11966
.L12041:
	mov	r5, r9
	mov	r0, r3
	b	.L11974
.L12042:
	mov	r5, r2
	b	.L11975
.L12108:
	movw	r3, #47806
	movt	r3, 57005
	str	r3, [r6]
	b	.L12032
.L12010:
	add	r7, r4, #128
	mov	r0, #1
	ldr	r9, [r8, #8]
	mov	r1, r7
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L12012
	ldrh	r3, [r4, #176]
	ldrb	r10, [r9, #48]	@ zero_extendqisi2
	cmp	r3, #254
	bhi	.L12014
	add	r3, r3, r10
	cmp	r3, #254
	bhi	.L12014
	ldr	r2, [r9]
	strb	r3, [r9, #48]
	mov	r1, #208
	ldr	r0, [r2, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r4, #28]
	beq	.L12015
	movw	r3, #:lower16:ffs_ep0_complete
	movt	r3, #:upper16:ffs_ep0_complete
	str	r3, [r0, #28]
	ldr	r3, [r4, #28]
	str	r4, [r3, #32]
	ldr	r0, [r4, #188]
	cmp	r0, #0
	beq	.L12016
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L12016
	add	ip, r10, #1
.L12019:
	ldr	r3, [r3, #4]
	ldr	r2, [r3, #4]
	cmp	r2, #0
	beq	.L12017
	add	r3, r3, #8
	mov	r2, ip
.L12018:
	strb	r2, [r3, #-8]
	add	r3, r3, #8
	ldr	r1, [r3, #-4]
	add	r2, r2, #1
	cmp	r1, #0
	bne	.L12018
.L12017:
	ldr	r3, [r0, #4]!
	cmp	r3, #0
	bne	.L12019
.L12016:
	ldr	r2, [r9]
	mov	r3, r4
	str	r2, [r3], #84
	.syntax divided
@ 45 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldrb	r3, [r5, #1]	@ zero_extendqisi2
	mov	r2, #1
	strb	r2, [r5]
	stmib	r5, {r4, r8}
	cmp	r3, #0
	bne	.L12113
.L12021:
	mov	r0, r6
	mov	r5, fp
	bl	mutex_unlock
	mov	r1, r7
	mov	r0, #0
	bl	_set_bit
	b	.L11962
.L12113:
	mov	r0, r8
	bl	android_enable
	b	.L12021
.L12043:
	mov	r3, r1
	b	.L11983
.L12109:
	ldr	r3, [r4]
	mov	r1, r6
	mvn	r5, #3
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L12031
.L12110:
	cmp	r5, #0
	ldr	r4, [sp, #24]
	ldr	fp, [sp, #28]
	bne	.L11991
	ldr	r3, [sp, #20]
	str	r6, [r4, #184]
	str	r3, [r4, #188]
	b	.L11988
.L12015:
	mov	r0, r6
	mvn	r5, #11
	bl	mutex_unlock
	b	.L12011
.L12014:
	mov	r0, r6
	mvn	r5, #18
	bl	mutex_unlock
	b	.L12011
.L12112:
	ldr	r3, [sp, #12]
	mov	r2, r3
	str	r3, [sp, #16]
	b	.L11977
.L12115:
	.align	2
.L12114:
	.word	.LANCHOR1+4004
	.word	.LANCHOR5-736
	.word	.LANCHOR5-628
	.word	.LANCHOR4+1992
	.word	.LANCHOR4-1104
	.fnend
	.size	ffs_ep0_write, .-ffs_ep0_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_data_clear, %function
ffs_data_clear:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	mov	r0, #0
	add	r4, r5, #128
	strd	r6, [sp, #8]
	mov	r1, r4
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_test_and_clear_bit
	cmp	r0, #0
	bne	.L12148
.L12118:
	ldr	r7, [r5]
	cmp	r7, #0
	bne	.L12149
	ldr	r8, [r5, #208]
	cmp	r8, #0
	beq	.L12127
	ldrh	r6, [r5, #180]
	cmp	r6, #0
	beq	.L12133
	ldr	r3, [r8]
	cmp	r3, #1
	bne	.L12129
	ldr	r2, [r8, #24]
	add	r3, r8, #24
	cmp	r2, r3
	bne	.L12129
	mov	r4, r8
.L12130:
	ldr	r0, [r4, #44]
	cmp	r0, #0
	beq	.L12131
	bl	d_delete
	ldr	r0, [r4, #44]
	bl	dput
	str	r7, [r4, #44]
.L12131:
	subs	r6, r6, #1
	add	r4, r4, #56
	beq	.L12133
	ldr	r3, [r4]
	cmp	r3, #1
	bne	.L12129
	ldr	r2, [r4, #24]
	add	r3, r4, #24
	cmp	r2, r3
	beq	.L12130
.L12129:
	.syntax divided
@ 1521 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1522, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L12133:
	mov	r0, r8
	bl	kfree
.L12127:
	ldr	r0, [r5, #144]
	bl	kfree
	ldr	r0, [r5, #184]
	bl	kfree
	ldrd	r6, [sp, #8]
	ldr	r0, [r5, #188]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	kfree
.L12148:
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r8, [r3, #2044]
	ldr	r7, [r3, #2060]
	cmp	r7, #0
	beq	.L12150
.L12119:
	add	r0, r7, #24
	bl	mutex_lock
	ldrb	r3, [r8, #1]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L12120
	mov	r0, r7
	bl	android_disable
.L12120:
	mov	r6, #0
	strb	r6, [r8]
	str	r6, [r8, #4]
	str	r6, [r8, #8]
	ldr	r3, [r5]
	cmp	r3, r6
	beq	.L12151
	ldr	r0, [r3, #4]
	ldr	r1, [r5, #28]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r3, r5
	str	r6, [r5, #28]
	str	r6, [r3], #84
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L12152
.L12136:
	mov	r1, r4
	mov	r0, #1
	bl	_clear_bit
.L12122:
	cmp	r7, #0
	beq	.L12118
	add	r0, r7, #24
	bl	mutex_unlock
	b	.L12118
.L12149:
	.syntax divided
@ 1394 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1394, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L12150:
	ldr	r7, [r8, #8]
	cmp	r7, #0
	bne	.L12119
	movw	r0, #:lower16:.LC991
	ldr	r1, .L12153
	movt	r0, #:upper16:.LC991
	bl	printk
	b	.L12120
.L12151:
	movw	r0, #:lower16:.LC33
	movw	r1, #1475
	movt	r0, #:upper16:.LC33
	bl	warn_slowpath_null
	b	.L12122
.L12152:
	movw	r0, #:lower16:.LC992
	ldr	r1, .L12153+4
	movt	r0, #:upper16:.LC992
	bl	printk
	mov	r0, r5
	bl	ffs_data_clear
	ldr	r2, [r5, #120]
	add	r3, r5, #120
	cmp	r2, r3
	bne	.L12123
	ldr	r2, [r5, #40]
	add	r3, r5, #40
	cmp	r2, r3
	bne	.L12123
	mov	r0, r5
	bl	kfree
	b	.L12136
.L12123:
	.syntax divided
@ 1345 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1346, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L12154:
	.align	2
.L12153:
	.word	.LANCHOR5-600
	.word	.LANCHOR5-572
	.fnend
	.size	ffs_data_clear, .-ffs_data_clear
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_release, %function
ffs_ep0_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #124]
	add	r3, r4, #88
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r5, [r3]
	sub	r5, r5, #1
	strex	r2, r5, [r3]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r5, #0
	bne	.L12156
	mov	r3, #3
	mov	r0, r4
	str	r3, [r4, #92]
	bl	ffs_data_clear
	str	r5, [r4, #92]
	str	r5, [r4, #96]
	strh	r5, [r4, #104]	@ movhi
	str	r5, [r4, #128]
	str	r5, [r4, #144]
	str	r5, [r4, #148]
	str	r5, [r4, #152]
	str	r5, [r4, #156]
	str	r5, [r4, #160]
	str	r5, [r4, #164]
	str	r5, [r4, #168]
	str	r5, [r4, #172]
	str	r5, [r4, #176]
	strh	r5, [r4, #180]	@ movhi
	str	r5, [r4, #184]
	str	r5, [r4, #188]
	str	r5, [r4, #208]
.L12156:
	add	r3, r4, #84
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L12161
.L12157:
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12161:
	movw	r0, #:lower16:.LC992
	ldr	r1, .L12162
	movt	r0, #:upper16:.LC992
	bl	printk
	mov	r0, r4
	bl	ffs_data_clear
	ldr	r2, [r4, #120]
	add	r3, r4, #120
	cmp	r2, r3
	bne	.L12158
	ldr	r2, [r4, #40]
	add	r3, r4, #40
	cmp	r2, r3
	bne	.L12158
	mov	r0, r4
	bl	kfree
	b	.L12157
.L12158:
	.syntax divided
@ 1345 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1346, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L12163:
	.align	2
.L12162:
	.word	.LANCHOR5-572
	.fnend
	.size	ffs_ep0_release, .-ffs_ep0_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_release, %function
ffs_epfile_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r2, #1
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r3, [r0, #328]
	ldr	r4, [r3, #36]
	str	r2, [r3, #32]
	add	r3, r4, #88
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r5, [r3]
	sub	r5, r5, #1
	strex	r2, r5, [r3]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r5, #0
	bne	.L12165
	mov	r3, #3
	mov	r0, r4
	str	r3, [r4, #92]
	bl	ffs_data_clear
	str	r5, [r4, #92]
	str	r5, [r4, #96]
	strh	r5, [r4, #104]	@ movhi
	str	r5, [r4, #128]
	str	r5, [r4, #144]
	str	r5, [r4, #148]
	str	r5, [r4, #152]
	str	r5, [r4, #156]
	str	r5, [r4, #160]
	str	r5, [r4, #164]
	str	r5, [r4, #168]
	str	r5, [r4, #172]
	str	r5, [r4, #176]
	strh	r5, [r4, #180]	@ movhi
	str	r5, [r4, #184]
	str	r5, [r4, #188]
	str	r5, [r4, #208]
.L12165:
	add	r3, r4, #84
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L12170
.L12166:
	mov	r3, #0
	mov	r0, r3
	str	r3, [r6, #124]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12170:
	movw	r0, #:lower16:.LC992
	ldr	r1, .L12171
	movt	r0, #:upper16:.LC992
	bl	printk
	mov	r0, r4
	bl	ffs_data_clear
	ldr	r2, [r4, #120]
	add	r3, r4, #120
	cmp	r2, r3
	bne	.L12167
	ldr	r2, [r4, #40]
	add	r3, r4, #40
	cmp	r2, r3
	bne	.L12167
	mov	r0, r4
	bl	kfree
	b	.L12166
.L12167:
	.syntax divided
@ 1345 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1346, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L12172:
	.align	2
.L12171:
	.word	.LANCHOR5-572
	.fnend
	.size	ffs_epfile_release, .-ffs_epfile_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_unbind, %function
ffs_func_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	sub	r8, r1, #36
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r1, #-28]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r6, #132]
	cmp	r3, r8
	beq	.L12198
.L12174:
	add	r4, r6, #116
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #96]
	mov	r5, r0
	add	r0, r6, #100
	ldrh	r2, [r6, #104]
	mov	lr, r0
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r6, #96]
	cmp	r2, #0
	beq	.L12188
	add	r2, r2, r0
	mov	r3, r0
.L12182:
	ldrb	r1, [r3], #1	@ zero_extendqisi2
	sub	ip, r1, #5
	cmp	ip, #1
	strbls	r1, [r0]
	addls	r0, r0, #1
	cmp	r2, r3
	bne	.L12182
	sub	r2, r0, lr
	add	r1, r2, #1
	uxth	r2, r2
	uxth	r1, r1
.L12180:
	add	r3, r6, r2
	strh	r1, [r6, #104]	@ movhi
	mov	r0, #1
	mov	r1, #3
	mov	r2, r0
	mov	r6, #0
	strb	r0, [r3, #100]
	mov	r0, r4
	bl	__wake_up_locked
	mov	r1, r5
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7, #-28]
	ldr	r4, [r7, #-24]
	add	r0, r3, #24
	ldrh	r5, [r3, #180]
	bl	_raw_spin_lock_irqsave
	add	r4, r4, #28
	mov	r9, r0
.L12184:
	ldr	r0, [r4, #-28]
	cmp	r0, #0
	beq	.L12183
	ldr	r1, [r4, #-24]
	cmp	r1, #0
	beq	.L12183
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L12183:
	subs	r5, r5, #1
	str	r6, [r4, #-28]
	add	r4, r4, #28
	str	r6, [r4, #-52]
	bne	.L12184
	ldr	r0, [r7, #-28]
	mov	r1, r9
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	ldr	r4, [r7, #-28]
	add	r3, r4, #84
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L12199
.L12185:
	ldr	r0, [r7, #-24]
	bl	kfree
	mov	r0, r8
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	kfree
.L12198:
	ldr	r4, [r1, #-24]
	add	r0, r6, #24
	mov	r10, #1
	mov	r9, #0
	ldrh	fp, [r6, #180]
	ldr	r5, [r6, #208]
	bl	_raw_spin_lock_irqsave
	add	r4, r4, #28
	str	r0, [sp, #4]
.L12175:
	str	r10, [r5, #32]
	ldr	r0, [r4, #-28]
	cmp	r0, #0
	beq	.L12176
	ldr	r2, [r0, #8]
	add	r4, r4, #28
	add	r5, r5, #56
	ldr	r2, [r2, #4]
	blx	r2
	ldr	r2, [r4, #-56]
	subs	fp, fp, #1
	str	r9, [r2]
	str	r9, [r5, #-16]
	bne	.L12175
.L12178:
	ldr	r0, [r7, #-28]
	ldr	r1, [sp, #4]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	mov	r3, #0
	str	r3, [r6, #132]
	b	.L12174
.L12188:
	mov	r1, #1
	b	.L12180
.L12176:
	subs	fp, fp, #1
	str	r0, [r5, #40]
	add	r4, r4, #28
	add	r5, r5, #56
	bne	.L12175
	b	.L12178
.L12199:
	movw	r0, #:lower16:.LC992
	ldr	r1, .L12200
	movt	r0, #:upper16:.LC992
	bl	printk
	mov	r0, r4
	bl	ffs_data_clear
	ldr	r2, [r4, #120]
	add	r3, r4, #120
	cmp	r2, r3
	bne	.L12186
	ldr	r2, [r4, #40]
	add	r3, r4, #40
	cmp	r2, r3
	bne	.L12186
	mov	r0, r4
	bl	kfree
	b	.L12185
.L12186:
	.syntax divided
@ 1345 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1346, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L12201:
	.align	2
.L12200:
	.word	.LANCHOR5-572
	.fnend
	.size	ffs_func_unbind, .-ffs_func_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_fs_kill_sb, %function
ffs_fs_kill_sb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	bl	kill_litter_super
	ldr	r4, [r4, #616]
	cmp	r4, #0
	beq	.L12202
	add	r3, r4, #84
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L12209
.L12202:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L12209:
	movw	r0, #:lower16:.LC992
	ldr	r1, .L12210
	movt	r0, #:upper16:.LC992
	bl	printk
	mov	r0, r4
	bl	ffs_data_clear
	ldr	r2, [r4, #120]
	add	r3, r4, #120
	cmp	r2, r3
	bne	.L12206
	ldr	r2, [r4, #40]
	add	r3, r4, #40
	cmp	r2, r3
	bne	.L12206
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
.L12206:
	.syntax divided
@ 1345 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1346, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L12211:
	.align	2
.L12210:
	.word	.LANCHOR5-572
	.fnend
	.size	ffs_fs_kill_sb, .-ffs_fs_kill_sb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	transport_store, %function
transport_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r7, #2480]
	.pad #44
	sub	sp, sp, #44
	str	r3, [sp, #4]
	ldr	r3, [r4, #372]
	cmp	r3, #0
	beq	.L12323
	movw	r1, #:lower16:.LC427
	mov	r0, r2
	movt	r1, #:upper16:.LC427
	add	r2, sp, #16
	bl	sscanf
	ldr	r1, [sp, #16]
	movw	r3, #:lower16:.LC583
	movw	r2, #:lower16:.LC582
	ldr	r8, [r4, #364]
	movt	r3, #:upper16:.LC583
	movt	r2, #:upper16:.LC582
	cmp	r1, #0
	moveq	r5, #3
	movne	r5, #2
	moveq	r2, r3
	cmp	r8, r5
	beq	.L12324
	movw	r6, #:lower16:.LANCHOR4
	movw	r3, #2034
	movt	r6, #:upper16:.LANCHOR4
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L12325
.L12217:
	mov	r3, #0
	cmp	r8, #0
	str	r3, [r4, #364]
	beq	.L12218
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L12219
	blx	r3
.L12219:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L12220
	blx	r3
.L12220:
	cmp	r8, #2
	beq	.L12221
	cmp	r8, #3
	bne	.L12218
	add	r3, r4, #368
	add	r0, r4, #152
	mov	r9, r3
	add	r8, r4, #104
	str	r3, [sp, #12]
	bl	tasklet_kill
	add	r0, r4, #132
	bl	tasklet_kill
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	fp, [r4, #104]
	str	r0, [sp, #8]
	cmp	r8, fp
	beq	.L12232
.L12233:
	mov	r0, fp
	sub	r10, fp, #36
	bl	list_del
	ldr	r9, [r4, #88]
	ldr	r0, [fp, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r9, #8]
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	fp, [r4, #104]
	cmp	r8, fp
	bne	.L12233
.L12232:
	ldr	fp, [r4, #112]
	add	r8, r4, #112
	cmp	r8, fp
	beq	.L12234
.L12235:
	mov	r0, fp
	sub	r10, fp, #36
	bl	list_del
	ldr	r9, [r4, #92]
	ldr	r0, [fp, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r9, #8]
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	fp, [r4, #112]
	cmp	r8, fp
	bne	.L12235
.L12234:
	ldr	fp, [r4, #120]
	add	r8, r4, #120
	cmp	r8, fp
	beq	.L12236
.L12237:
	mov	r0, fp
	sub	r10, fp, #36
	bl	list_del
	ldr	r9, [r4, #92]
	ldr	r0, [fp, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r9, #8]
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	fp, [r4, #120]
	cmp	r8, fp
	bne	.L12237
.L12236:
	ldr	r1, [sp, #8]
	ldr	r0, [sp, #12]
	bl	_raw_spin_unlock_irqrestore
.L12333:
	cmp	r5, #2
	str	r5, [r4, #364]
	bne	.L12326
.L12269:
	movw	r7, #:lower16:rmnet_mux_sdio_complete_epout
	mov	r5, #16
	movt	r7, #:upper16:rmnet_mux_sdio_complete_epout
	add	r8, r4, #216
.L12239:
	ldr	r0, [r4, #88]
	mov	r1, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r8
	add	r0, r3, #36
	beq	.L12242
	cmn	r3, #4096
	bhi	.L12242
	str	r7, [r3, #28]
	ldr	r1, [r4, #220]
	bl	__list_add
	subs	r5, r5, #1
	bne	.L12239
	movw	r7, #:lower16:rmnet_mux_sdio_complete_epin
	mov	r5, #100
	movt	r7, #:upper16:rmnet_mux_sdio_complete_epin
	add	r10, r4, #192
.L12244:
	ldr	r0, [r4, #92]
	mov	r1, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r10
	add	r0, r3, #36
	beq	.L12242
	cmn	r3, #4096
	bhi	.L12242
	str	r7, [r3, #28]
	ldr	r1, [r4, #196]
	bl	__list_add
	subs	r5, r5, #1
	bne	.L12244
	ldr	r3, [r4, #372]
	cmp	r3, #0
	bne	.L12245
	movw	r3, #2082
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L12242
	movw	r1, #:lower16:.LC997
	ldr	r2, .L12338
	movt	r1, #:upper16:.LC997
	ldr	r0, .L12338+4
	bl	__dynamic_pr_debug
	b	.L12242
.L12218:
	movw	r3, #2058
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L12327
.L12231:
	cmp	r5, #2
	str	r5, [r4, #364]
	beq	.L12269
.L12326:
	cmp	r5, #3
	bne	.L12328
	ldr	r3, [r4, #172]
	tst	r3, #1
	beq	.L12329
.L12251:
	movw	r10, #:lower16:kmalloc_caches
	movw	r8, #:lower16:rmnet_mux_smd_complete_epout
	movt	r10, #:upper16:kmalloc_caches
	movt	r8, #:upper16:rmnet_mux_smd_complete_epout
	mov	r7, #8
.L12258:
	ldr	r6, [r4, #88]
	mov	r1, #208
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	mov	r2, #2048
	bne	.L12330
.L12242:
	ldr	r0, [sp, #4]
.L12212:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12330:
	str	r2, [r5, #4]
	ldr	r3, [r10, #44]
	mov	ip, #16
	mov	r1, #208
	subs	r0, r3, #0
	streq	ip, [r5]
	beq	.L12257
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L12257
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L12242
.L12257:
	cmn	r5, #4096
	add	fp, r4, #112
	mov	r6, #2048
	mov	r2, fp
	add	r0, r5, #36
	bhi	.L12242
	str	r6, [r5, #4]
	str	r8, [r5, #28]
	str	r4, [r5, #32]
	ldr	r1, [r4, #116]
	bl	__list_add
	subs	r7, r7, #1
	bne	.L12258
	movw	r8, #:lower16:rmnet_mux_smd_complete_epin
	mov	r9, r6
	movt	r8, #:upper16:rmnet_mux_smd_complete_epin
	mov	r7, #8
.L12261:
	ldr	r6, [r4, #92]
	mov	r1, #208
	ldr	r2, [r6, #8]
	mov	r0, r6
	ldr	r2, [r2, #8]
	blx	r2
	subs	r5, r0, #0
	beq	.L12242
	str	r9, [r5, #4]
	ldr	ip, [r10, #44]
	mov	lr, #16
	mov	r2, #2048
	mov	r1, #208
	subs	r0, ip, #0
	streq	lr, [r5]
	beq	.L12260
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L12260
	ldr	r2, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r2, #12]
	blx	r3
	b	.L12242
.L12221:
	add	r3, r4, #368
	add	fp, r4, #192
	mov	r0, r3
	mov	r8, #0
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r4, #192]
	str	r8, [r4, #312]
	str	r0, [sp, #8]
	cmp	fp, r9
	beq	.L12223
.L12224:
	mov	r0, r9
	sub	r10, r9, #36
	bl	list_del
	str	r8, [r9, #-36]
	ldr	r9, [r4, #88]
	mov	r0, #0
	bl	kfree
	mov	r1, r10
	ldr	r2, [r9, #8]
	mov	r0, r9
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r9, [r4, #192]
	cmp	fp, r9
	bne	.L12224
.L12223:
	ldr	r9, [r4, #216]
	add	r8, r4, #216
	cmp	r8, r9
	beq	.L12225
	mov	fp, #0
.L12226:
	mov	r0, r9
	sub	r10, r9, #36
	bl	list_del
	str	fp, [r9, #-36]
	ldr	r9, [r4, #92]
	mov	r0, #0
	bl	kfree
	mov	r1, r10
	ldr	r2, [r9, #8]
	mov	r0, r9
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r9, [r4, #216]
	cmp	r8, r9
	bne	.L12226
.L12225:
	ldr	r3, [r4, #200]
	add	r8, r4, #200
	cmp	r8, r3
	beq	.L12227
	mov	fp, #0
	b	.L12228
.L12331:
	ldr	r2, [r4, #208]
	sub	r2, r2, #1
	str	r2, [r4, #208]
	ldm	r3, {r1, r2}
	str	fp, [r3]
	str	fp, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #200]
	cmp	r3, r8
	beq	.L12227
.L12228:
	subs	r0, r3, #0
	bne	.L12331
.L12227:
	ldr	r3, [r4, #224]
	add	r8, r4, #224
	cmp	r8, r3
	beq	.L12236
	mov	fp, #0
	b	.L12230
.L12332:
	ldr	r2, [r4, #232]
	sub	r2, r2, #1
	str	r2, [r4, #232]
	ldm	r3, {r1, r2}
	str	fp, [r3]
	str	fp, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #224]
	cmp	r8, r3
	beq	.L12236
.L12230:
	subs	r0, r3, #0
	bne	.L12332
	ldr	r1, [sp, #8]
	ldr	r0, [sp, #12]
	bl	_raw_spin_unlock_irqrestore
	b	.L12333
.L12260:
	cmn	r5, #4096
	add	r2, r4, #104
	add	r0, r5, #36
	bhi	.L12242
	str	r8, [r5, #28]
	str	r4, [r5, #32]
	ldr	r1, [r4, #108]
	bl	__list_add
	subs	r7, r7, #1
	bne	.L12261
	add	r6, r4, #368
	ldr	r8, [r4, #84]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	b	.L12262
.L12264:
	bl	list_del
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #88]
	mov	r1, r10
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	r10, #0
	mov	r7, r0
	bne	.L12334
.L12262:
	ldr	r5, [r4, #112]
	cmp	fp, r5
	mov	r0, r5
	sub	r10, r5, #36
	bne	.L12264
.L12263:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L12242
.L12329:
	movw	r3, #:lower16:rmnet_mux_smd_notify
	mov	r2, r4
	ldr	r0, [r7, #4004]
	movt	r3, #:upper16:rmnet_mux_smd_notify
	add	r1, r4, #128
	ldr	r5, [r4, #84]
	bl	smd_open
	cmp	r0, #0
	bne	.L12335
	ldr	r3, [r4, #172]
	ands	r3, r3, #1
	bne	.L12251
	mov	r2, sp
	str	r3, [sp, #20]
	add	r5, r4, #180
	bic	r1, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r1, r1, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r1, #12]
	add	r1, sp, #32
	str	r0, [sp, #24]
	str	r2, [sp, #28]
	str	r1, [sp, #32]
	str	r1, [sp, #36]
	b	.L12255
.L12336:
	bl	schedule
.L12255:
	mov	r2, #2
	add	r1, sp, #20
	mov	r0, r5
	bl	prepare_to_wait
	ldr	r3, [r4, #172]
	tst	r3, #1
	beq	.L12336
	add	r1, sp, #20
	mov	r0, r5
	bl	finish_wait
	b	.L12251
.L12325:
	movw	r1, #:lower16:.LC995
	add	r0, r6, #2016
	movt	r1, #:upper16:.LC995
	bl	__dynamic_pr_debug
	ldr	r8, [r4, #364]
	b	.L12217
.L12335:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC933
	movt	r1, #:upper16:.LC933
	add	r0, r0, #32
	bl	dev_err
	b	.L12242
.L12327:
	movw	r1, #:lower16:.LC996
	ldr	r2, .L12338+8
	movt	r1, #:upper16:.LC996
	ldr	r0, .L12338+12
	bl	__dynamic_pr_debug
	b	.L12231
.L12334:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC214
	mov	r2, r10
	movt	r1, #:upper16:.LC214
	add	r0, r0, #32
	bl	dev_err
	mov	r2, fp
	mov	r0, r5
	ldr	r1, [r4, #116]
	bl	__list_add
	b	.L12263
.L12245:
	ldr	r9, [r4, #84]
	add	r7, r4, #368
	mov	r0, r7
.L12321:
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #216]
	mov	fp, r0
	cmp	r8, r5
	beq	.L12246
	mov	r0, r5
	sub	r6, r5, #36
	bl	list_del
	mov	r1, fp
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r2, #0
	mov	r1, #208
	mvn	r3, #0
	movw	r0, #2056
	bl	__alloc_skb
	mov	r1, r6
	subs	r6, r0, #0
	mov	ip, #2048
	mov	r2, #208
	beq	.L12337
	ldr	r0, [r6, #160]
	ldr	r3, [r6, #172]
	add	r0, r0, #8
	add	r3, r3, #8
	str	r0, [r6, #160]
	str	r3, [r6, #172]
	str	r3, [r5, #-36]
	str	ip, [r5, #-32]
	str	r6, [r5, #-4]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r10, r0, #0
	mov	r0, r7
	beq	.L12321
	mov	r0, r6
	bl	dev_kfree_skb_any
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
.L12248:
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC266
	mov	r2, r10
	movt	r1, #:upper16:.LC266
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r8
	mov	r0, r5
	ldr	r1, [r4, #220]
	bl	__list_add
.L12246:
	mov	r1, fp
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L12242
.L12328:
	movw	r0, #:lower16:.LC998
	ldr	r1, .L12338+8
	movt	r0, #:upper16:.LC998
	bl	printk
	b	.L12242
.L12323:
	movw	r0, #:lower16:.LC993
	ldr	r1, .L12338+8
	movt	r0, #:upper16:.LC993
	bl	printk
	mvn	r0, #21
	b	.L12212
.L12324:
	movw	ip, #:lower16:.LANCHOR3
	movw	r0, #:lower16:.LC994
	ldr	r1, .L12338+8
	movt	ip, #:upper16:.LANCHOR3
	mov	r3, r2
	add	ip, ip, r8, lsl #2
	movt	r0, #:upper16:.LC994
	ldr	r2, [ip, #1096]
	bl	printk
	mov	r0, #0
	b	.L12212
.L12337:
	mov	r0, r7
	mvn	r10, #11
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	b	.L12248
.L12339:
	.align	2
.L12338:
	.word	.LANCHOR5-540
	.word	.LANCHOR4+2064
	.word	.LANCHOR5-556
	.word	.LANCHOR4+2040
	.fnend
	.size	transport_store, .-transport_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_read, %function
ccid_bulk_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #2106
	strd	r6, [sp, #8]
	mov	r7, r2
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR4
	movt	r9, #:upper16:.LANCHOR4
	strd	r10, [sp, #24]
	mov	r10, r1
	ldrh	r3, [r9, r3]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	ldr	r4, [r0, #124]
	tst	r3, #4
	bne	.L12383
.L12341:
	movw	r2, #522
	cmp	r7, r2
	bhi	.L12384
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L12344
	mov	r3, sp
	add	r5, r4, #92
	bic	r8, r3, #8128
	bic	r8, r8, #63
	b	.L12345
.L12349:
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L12362
.L12390:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L12385
	ldr	r2, [r6, #48]
	cmp	r2, #0
	bne	.L12355
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L12345:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L12386
	ldr	r6, [r4, #184]
	mov	r3, #0
	mov	r1, r0
	mov	r0, r5
	str	r7, [r6, #4]
	str	r3, [r4, #188]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #108]
	mov	r1, r6
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L12387
	ldr	r3, [r4, #188]
	cmp	r3, #0
	bne	.L12349
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L12349
	ldr	r2, [r4, #96]
	cmp	r2, #0
	beq	.L12349
	ldr	r0, [r8, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #16
	movt	r2, #:upper16:autoremove_wake_function
	add	fp, r4, #160
	str	r3, [sp, #4]
	str	r1, [sp, #16]
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #20]
	b	.L12352
.L12388:
	bl	schedule
.L12352:
	mov	r2, #1
	add	r1, sp, #4
	mov	r0, fp
	bl	prepare_to_wait
	ldr	r3, [r4, #188]
	cmp	r3, #0
	bne	.L12350
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L12350
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L12350
	ldr	r3, [r8, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L12388
	add	r1, sp, #4
	mov	r0, fp
	bl	finish_wait
	ldr	r0, [r4, #108]
	mov	r3, #1
	mov	r7, #65024
	mov	r1, r6
	movt	r7, 65535
	str	r3, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L12346:
	movw	r3, #2202
	ldrh	r3, [r9, r3]
	tst	r3, #4
	bne	.L12389
.L12340:
	mov	r0, r7
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12350:
	add	r1, sp, #4
	mov	r0, fp
	bl	finish_wait
	ldr	r3, [r4, #148]
	cmp	r3, #0
	beq	.L12390
.L12362:
	mvn	r7, #4
	b	.L12346
.L12386:
	movw	r3, #2130
	ldrh	r3, [r9, r3]
	tst	r3, #4
	mvneq	r7, #18
	beq	.L12340
	movw	r1, #:lower16:.LC286
	ldr	r2, .L12392
	mvn	r7, #18
	movt	r1, #:upper16:.LC286
	ldr	r0, .L12392+4
	bl	__dynamic_pr_debug
	b	.L12340
.L12385:
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #2154
	ldrh	r3, [r9, r3]
	tst	r3, #4
	bne	.L12354
.L12360:
	mvn	r7, #18
	b	.L12346
.L12355:
	mov	r3, #1
	cmp	r2, r7
	mov	r1, r0
	mov	r0, r5
	str	r3, [r4, #156]
	movcc	r8, r2
	movcs	r8, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r10, r8; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L12391
.L12356:
	cmp	r8, #0
	mov	r0, r5
	mvnne	r7, #13
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	mov	r2, #0
	mov	r8, r0
	str	r2, [r4, #156]
	cmp	r3, r2
	bne	.L12358
	ldr	r6, [r4, #184]
	cmp	r6, r2
	beq	.L12359
	ldr	r4, [r4, #108]
	ldr	r0, [r6]
	bl	kfree
	mov	r1, r6
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
.L12359:
	mov	r1, r8
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #2178
	ldrh	r3, [r9, r3]
	tst	r3, #4
	beq	.L12360
	movw	r1, #:lower16:.LC286
	ldr	r2, .L12392
	mvn	r7, #18
	movt	r1, #:upper16:.LC286
	ldr	r0, .L12392+8
	bl	__dynamic_pr_debug
	b	.L12346
.L12391:
	mov	r2, r8
	mov	r0, r10
	ldr	r1, [r6]
	bl	__copy_to_user
	mov	r8, r0
	b	.L12356
.L12358:
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	b	.L12346
.L12383:
	movw	r1, #:lower16:.LC999
	ldr	r0, .L12392+12
	movt	r1, #:upper16:.LC999
	bl	__dynamic_pr_debug
	b	.L12341
.L12389:
	movw	r1, #:lower16:.LC1003
	mov	r2, r7
	ldr	r0, .L12392+16
	movt	r1, #:upper16:.LC1003
	bl	__dynamic_pr_debug
	b	.L12340
.L12354:
	movw	r1, #:lower16:.LC286
	ldr	r2, .L12392
	mvn	r7, #18
	movt	r1, #:upper16:.LC286
	ldr	r0, .L12392+20
	bl	__dynamic_pr_debug
	b	.L12346
.L12387:
	movw	r0, #:lower16:.LC1002
	ldr	r1, .L12392
	mvn	r7, #4
	movt	r0, #:upper16:.LC1002
	bl	printk
	mov	r3, #1
	str	r3, [r4, #148]
	b	.L12346
.L12384:
	movw	r0, #:lower16:.LC1000
	mov	r3, r7
	ldr	r1, .L12392
	movt	r0, #:upper16:.LC1000
	mvn	r7, #11
	bl	printk
	b	.L12340
.L12344:
	movw	r0, #:lower16:.LC1001
	ldr	r1, .L12392
	mvn	r7, #4
	movt	r0, #:upper16:.LC1001
	bl	printk
	b	.L12346
.L12393:
	.align	2
.L12392:
	.word	.LANCHOR5-516
	.word	.LANCHOR4+2112
	.word	.LANCHOR4+2160
	.word	.LANCHOR4+2088
	.word	.LANCHOR4+2184
	.word	.LANCHOR4+2136
	.fnend
	.size	ccid_bulk_read, .-ccid_bulk_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_ioctl, %function
modem_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r5, #:lower16:__stack_chk_guard
	movw	r3, #21249
	movt	r5, #:upper16:__stack_chk_guard
	movt	r3, 16388
	strd	r6, [sp, #8]
	ldr	ip, [r5]
	strd	r8, [sp, #16]
	cmp	r1, r3
	str	r10, [sp, #24]
	mov	r7, r2
	str	lr, [sp, #28]
	.pad #24
	sub	sp, sp, #24
	str	ip, [sp, #20]
	bne	.L12410
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r4, [r3, #3996]
	cmp	r4, #0
	moveq	r0, r4
	beq	.L12394
	ldr	r3, [r4, #20]
	add	r6, r4, #148
	strh	r2, [r4, #170]	@ movhi
	mov	r0, r6
	ldr	r8, [r3, #24]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #156]
	mov	r7, r0
	cmp	r3, #0
	moveq	r3, #1
	strbeq	r3, [r4, #147]
	bne	.L12411
.L12402:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
.L12394:
	ldr	r2, [sp, #20]
	ldr	r3, [r5]
	cmp	r2, r3
	bne	.L12412
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12410:
	movw	r3, #21251
	movt	r3, 16388
	cmp	r1, r3
	bne	.L12413
	movw	r0, #:lower16:.LC1004
	mov	r1, r2
	movt	r0, #:upper16:.LC1004
	bl	printk
	movw	ip, #:lower16:.LANCHOR1
	mov	r3, #1
	ldr	r0, .L12415
	movt	ip, #:upper16:.LANCHOR1
	mov	r2, r3
	mov	r1, r3
	str	r3, [ip, #2200]
	mov	r3, #0
	str	r7, [ip, #3480]
	bl	__wake_up
	mov	r0, #0
	b	.L12394
.L12412:
	bl	__stack_chk_fail
.L12413:
	movw	r0, #:lower16:.LC1005
	movt	r0, #:upper16:.LC1005
	bl	printk
	movw	r0, #65021
	movt	r0, 65535
	b	.L12394
.L12411:
	ldr	r0, .L12415+4
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L12414
.L12400:
	movw	r0, #:lower16:.LC648
	ldrh	r2, [r4, #170]
	mov	r9, #32
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC648
	bl	printk
	add	r0, sp, #10
	mov	r1, #10
	ldr	r10, [r4, #152]
	bl	__memzero
	ldr	r8, [r4, #156]
	mov	r2, #0
	mov	r0, #10
	mvn	r1, #94
	mov	ip, #2
	strb	r2, [r4, #147]
	str	r2, [r4, #156]
	ldr	r3, [r8]
	str	r0, [r8, #4]
	mov	r0, r6
	strb	r1, [r3]
	strb	r9, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	ldrb	r1, [r4, #144]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	r2, [r3, #7]
	ldrh	ip, [r4, #170]	@ unaligned
	ldr	r1, [sp, #14]	@ unaligned
	strh	ip, [sp, #10]	@ movhi
	ldr	ip, [sp, #10]	@ unaligned
	str	ip, [r3, #8]	@ unaligned
	str	r1, [r3, #12]	@ unaligned
	ldrh	r1, [sp, #18]	@ unaligned
	strh	r1, [r3, #16]	@ unaligned
	ldrh	r2, [r4, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock
	ldr	r3, [r10, #8]
	mov	r2, r9
	mov	r1, r8
	mov	r0, r10
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r9, #0
	bge	.L12402
	ldr	r0, [r4, #20]
	movw	r1, #:lower16:.LC649
	mov	r3, r9
	movt	r1, #:upper16:.LC649
	ldrb	r2, [r4, #146]	@ zero_extendqisi2
	ldr	r0, [r0, #24]
	ldr	r0, [r0]
	add	r0, r0, #32
	bl	dev_err
	str	r8, [r4, #156]
	b	.L12402
.L12414:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC647
	sub	r0, r0, #24
	ldrh	ip, [r4, #170]
	movt	r2, #:upper16:.LC647
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	add	r1, r1, #32
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L12400
.L12416:
	.align	2
.L12415:
	.word	.LANCHOR1+2204
	.word	.LANCHOR4-1776
	.fnend
	.size	modem_ioctl, .-modem_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_ioctl, %function
mtp_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #60
	sub	sp, sp, #60
	add	r5, r4, #112
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r0, r3, [r5]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L12418
	movw	r3, #19713
	mov	r8, r2
	movt	r3, 16416
	mov	r6, r1
	cmp	r1, r3
	bhi	.L12420
	mov	r3, #19712
	movt	r3, 16416
	cmp	r1, r3
	bcs	.L12421
	movw	r3, #19715
	movt	r3, 16392
	cmp	r1, r3
	bne	.L12419
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r8, #8; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L12435
	mov	r1, r8
	mov	r2, #8
	add	r0, sp, #16
	bl	__copy_from_user
	cmp	r0, #0
	movwne	r6, #:lower16:.LANCHOR4
	mvnne	r8, #13
	movtne	r6, #:upper16:.LANCHOR4
	bne	.L12434
	movw	r6, #:lower16:.LANCHOR4
	movw	r3, #2226
	ldr	r8, [sp, #16]
	movt	r6, #:upper16:.LANCHOR4
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L12488
.L12438:
	cmp	r8, #28
	bhi	.L12458
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L12459
	mov	r0, #1000
	add	r9, r4, #88
	bl	msecs_to_jiffies
	str	r0, [sp, #4]
	mov	r0, r9
	add	r10, r4, #124
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r4, #124]
	mov	fp, r0
	cmp	r10, r7
	beq	.L12489
	mov	r0, r7
	sub	r7, r7, #36
	bl	list_del
	mov	r1, fp
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L12440
.L12441:
	mov	r3, sp
	ldr	r1, [sp, #20]
	bic	r3, r3, #8128
	ldr	r0, [r7]
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r1, r8; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L12490
	cmp	r8, #0
	bne	.L12491
.L12453:
	str	r8, [r7, #4]
	ldr	r0, [r4, #100]
	mov	r2, #208
	mov	r1, r7
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r8, r0, #0
	beq	.L12434
	mov	r0, r9
.L12487:
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	ldr	r1, [r4, #128]
	add	r0, r7, #36
	mov	r2, r10
	bl	__list_add
	mov	r1, fp
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	b	.L12434
.L12420:
	movw	r3, #19716
	movt	r3, 16416
	cmp	r1, r3
	beq	.L12421
.L12419:
	add	r7, r4, #88
	mvn	r8, #21
.L12433:
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #104]
	cmp	r3, #3
	mvneq	r8, #124
	beq	.L12454
	cmp	r3, #0
	movne	r3, #1
	strne	r3, [r4, #104]
.L12454:
	movw	r6, #:lower16:.LANCHOR4
	mov	r0, r7
	movt	r6, #:upper16:.LANCHOR4
	bl	_raw_spin_unlock_irq
.L12434:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r3, #2250
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L12492
.L12417:
	mov	r0, r8
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12421:
	add	r7, r4, #88
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #104]
	cmp	r3, #3
	beq	.L12493
	cmp	r3, #0
	beq	.L12494
	mov	r3, #2
	mov	r0, r7
	str	r3, [r4, #104]
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r8, #32; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L12427
	mov	r1, r8
	mov	r2, #32
	add	r0, sp, #24
	bl	__copy_from_user
	subs	r9, r0, #0
	mvnne	r8, #13
	bne	.L12433
	ldr	r0, [sp, #24]
	bl	fget
	subs	r8, r0, #0
	mvneq	r8, #8
	beq	.L12433
	str	r8, [r4, #216]
	ldrd	r2, [sp, #32]
	strd	r2, [r4, #224]
	ldrd	r2, [sp, #40]
	strd	r2, [r4, #232]
	.syntax divided
@ 1028 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	movw	r3, #19716
	movt	r3, 16416
	cmp	r6, r3
	beq	.L12495
	mov	r3, #19712
	movt	r3, 16416
	cmp	r6, r3
	addeq	r2, r4, #184
	addne	r2, r4, #200
	streq	r9, [r4, #240]
.L12431:
	ldr	r1, [r4, #180]
	mov	r0, #4
	bl	queue_work_on
	ldr	r0, [r4, #180]
	bl	flush_workqueue
	mov	r0, r8
	bl	fput
	.syntax divided
@ 1052 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r8, [r4, #252]
	b	.L12433
.L12435:
	mov	r1, #8
	add	r0, sp, #16
	movw	r6, #:lower16:.LANCHOR4
	mvn	r8, #13
	bl	__memzero
	movt	r6, #:upper16:.LANCHOR4
	b	.L12434
.L12494:
	mov	r0, r7
	movw	r6, #:lower16:.LANCHOR4
	bl	_raw_spin_unlock_irq
	movt	r6, #:upper16:.LANCHOR4
	mvn	r8, #18
	b	.L12434
.L12492:
	ldr	r1, [r4, #84]
	movw	r2, #:lower16:.LC1007
	mov	r3, r8
	movt	r2, #:upper16:.LC1007
	ldr	r0, .L12498
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12417
.L12493:
	mov	r3, #1
	mov	r0, r7
	movw	r6, #:lower16:.LANCHOR4
	mvn	r8, #124
	str	r3, [r4, #104]
	movt	r6, #:upper16:.LANCHOR4
	bl	_raw_spin_unlock_irq
	b	.L12434
.L12427:
	mov	r1, #32
	add	r0, sp, #24
	bl	__memzero
	mvn	r8, #13
	b	.L12433
.L12488:
	ldr	r1, [r4, #84]
	movw	r2, #:lower16:.LC1006
	mov	r3, r8
	movt	r2, #:upper16:.LC1006
	add	r0, r6, #2208
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12438
.L12459:
	mvn	r8, #18
	b	.L12434
.L12418:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r8, #15
	b	.L12417
.L12490:
	mov	r2, r8
	bl	__copy_from_user
	cmp	r0, #0
	beq	.L12453
.L12452:
	mov	r0, r9
	mvn	r8, #13
	b	.L12487
.L12489:
	mov	r1, r0
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
.L12440:
	mov	r3, sp
	movw	r2, #:lower16:autoremove_wake_function
	ldr	fp, [sp, #4]
	bic	r3, r3, #8128
	add	r1, sp, #36
	bic	r3, r3, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r3, #12]
	add	ip, r4, #156
	str	r3, [sp, #12]
	mov	r3, #0
	str	ip, [sp, #4]
	str	r3, [sp, #24]
	str	r0, [sp, #28]
	str	r2, [sp, #32]
	str	r1, [sp, #36]
	str	r1, [sp, #40]
.L12446:
	add	r1, sp, #24
	mov	r2, #1
	ldr	r0, [sp, #4]
	bl	prepare_to_wait
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #124]
	mov	r1, r0
	cmp	r10, r3
	mov	r0, r3
	sub	r7, r3, #36
	beq	.L12496
	str	r1, [sp, #8]
	bl	list_del
	ldr	r1, [sp, #8]
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	bne	.L12444
.L12443:
	ldr	r3, [sp, #12]
	mov	r0, fp
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L12445
	bl	schedule_timeout
	subs	fp, r0, #0
	bne	.L12446
.L12449:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r4, #124]
	mov	fp, r0
	cmp	r10, r7
	beq	.L12497
	mov	r0, r7
	sub	r7, r7, #36
	bl	list_del
	mov	r1, fp
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	add	r1, sp, #24
	ldr	r0, [sp, #4]
	bl	finish_wait
	cmp	r7, #0
	bne	.L12441
.L12486:
	mvn	r8, #61
	b	.L12434
.L12491:
	mov	r1, r8
	bl	__memzero
	b	.L12452
.L12495:
	mov	r3, #1
	add	r2, r4, #184
	str	r3, [r4, #240]
	ldrh	r3, [sp, #48]
	strh	r3, [r4, #244]	@ movhi
	ldr	r3, [sp, #52]
	str	r3, [r4, #248]
	b	.L12431
.L12445:
	add	r1, sp, #24
	ldr	r0, [sp, #4]
	bl	finish_wait
	b	.L12486
.L12496:
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	b	.L12443
.L12458:
	mvn	r8, #21
	b	.L12434
.L12444:
	cmp	fp, #0
	beq	.L12449
	add	r1, sp, #24
	ldr	r0, [sp, #4]
	bl	finish_wait
	b	.L12441
.L12497:
	mov	r1, r0
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	add	r1, sp, #24
	ldr	r0, [sp, #4]
	mvn	r8, #61
	bl	finish_wait
	b	.L12434
.L12499:
	.align	2
.L12498:
	.word	.LANCHOR4+2232
	.fnend
	.size	mtp_ioctl, .-mtp_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_bind_config, %function
adb_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC1008
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r0, #:upper16:.LC1008
	str	r8, [sp, #16]
	mov	r5, r1
	movw	r6, #:lower16:.LANCHOR4
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	ldr	r4, [r3, #3476]
	bl	printk
	ldr	r3, .L12534
	movw	r2, #:lower16:.LC1009
	movt	r6, #:upper16:.LANCHOR4
	ldr	r1, [r5, #24]
	movt	r2, #:upper16:.LC1009
	str	r2, [r4]
	add	r2, r3, #16
	str	r2, [r4, #8]
	str	r3, [r4, #16]
	str	r1, [r4, #84]
	ldr	r2, [r5, #24]
	movw	r1, #:lower16:adb_function_bind
	movt	r1, #:upper16:adb_function_bind
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	str	r1, [r4, #32]
	movw	r1, #1386
	cmp	r2, #4
	movw	r2, #:lower16:adb_function_set_alt
	addhi	r3, r3, #32
	movt	r2, #:upper16:adb_function_set_alt
	strhi	r3, [r4, #12]
	movw	r3, #:lower16:adb_function_unbind
	movt	r3, #:upper16:adb_function_unbind
	str	r3, [r4, #36]
	movw	r3, #:lower16:adb_function_disable
	str	r2, [r4, #40]
	ldrh	r2, [r6, r1]
	movt	r3, #:upper16:adb_function_disable
	str	r3, [r4, #48]
	tst	r2, #4
	bne	.L12531
.L12502:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L12510
	add	r8, r4, #72
	str	r5, [r4, #20]
	add	r2, r5, #36
	mov	r0, r8
	ldr	r1, [r5, #40]
	bl	__list_add
	ldr	r7, [r4, #32]
	cmp	r7, #0
	beq	.L12504
	mov	r1, r4
	mov	r0, r5
	blx	r7
	subs	r7, r0, #0
	blt	.L12532
.L12504:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L12505
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L12505
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L12505:
	tst	r3, #2
	bne	.L12506
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L12506
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L12506:
	tst	r3, #1
	bne	.L12507
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L12507
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L12507:
	cmp	r7, #0
	bne	.L12503
	b	.L12500
.L12531:
	ldr	ip, [r5]
	movw	r3, #:lower16:.LC1009
	movw	r2, #:lower16:.LC924
	ldr	r1, [r5, #24]
	movt	r3, #:upper16:.LC1009
	movt	r2, #:upper16:.LC924
	ldr	r0, .L12534+4
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r5, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L12502
.L12510:
	mvn	r7, #21
.L12503:
	movw	r3, #1410
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L12533
.L12500:
	mov	r0, r7
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12533:
	ldr	r1, [r5, #24]
	movw	r2, #:lower16:.LC925
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC925
	ldr	r0, .L12534+8
	ldr	r1, [r1]
	stm	sp, {r4, r7}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12500
.L12532:
	mov	r0, r8
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L12504
.L12535:
	.align	2
.L12534:
	.word	.LANCHOR0+2092
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.fnend
	.size	adb_function_bind_config, .-adb_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_bind_config, %function
ccid_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR4
	movw	r2, #2274
	movt	r5, #:upper16:.LANCHOR4
	movw	r3, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	ldrh	r2, [r5, r2]
	movt	r3, #:upper16:.LANCHOR1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	mov	r6, r1
	.pad #16
	sub	sp, sp, #16
	ldr	r4, [r3, #3472]
	tst	r2, #4
	bne	.L12570
.L12537:
	ldr	r2, .L12574
	movw	r0, #:lower16:ccid_function_bind
	movw	r1, #:lower16:ccid_function_unbind
	ldr	ip, [r6, #24]
	movt	r0, #:upper16:ccid_function_bind
	movt	r1, #:upper16:ccid_function_unbind
	movw	r3, #:lower16:.LC1011
	movt	r3, #:upper16:.LC1011
	add	lr, r2, #24
	str	r3, [r4]
	str	r2, [r4, #16]
	movw	r2, #:lower16:ccid_function_set_alt
	movt	r2, #:upper16:ccid_function_set_alt
	strd	r0, [r4, #32]
	movw	r0, #1386
	str	lr, [r4, #8]
	movw	r1, #:lower16:ccid_function_setup
	str	r2, [r4, #40]
	ldrh	r0, [r5, r0]
	movw	r2, #:lower16:ccid_function_disable
	movt	r1, #:upper16:ccid_function_setup
	movt	r2, #:upper16:ccid_function_disable
	str	r2, [r4, #48]
	tst	r0, #4
	str	r1, [r4, #52]
	str	ip, [r4, #84]
	bne	.L12571
.L12538:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L12546
	add	r8, r4, #72
	str	r6, [r4, #20]
	add	r2, r6, #36
	mov	r0, r8
	ldr	r1, [r6, #40]
	bl	__list_add
	ldr	r7, [r4, #32]
	cmp	r7, #0
	beq	.L12540
	mov	r1, r4
	mov	r0, r6
	blx	r7
	subs	r7, r0, #0
	blt	.L12572
.L12540:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L12541
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L12541
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r6, #45]
.L12541:
	tst	r3, #2
	bne	.L12542
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L12542
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r6, #45]
.L12542:
	tst	r3, #1
	bne	.L12543
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L12543
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #45]
.L12543:
	cmp	r7, #0
	bne	.L12539
	b	.L12536
.L12571:
	ldr	ip, [r6]
	movw	r2, #:lower16:.LC924
	ldr	r1, [r6, #24]
	movt	r2, #:upper16:.LC924
	ldr	r0, .L12574+4
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r6, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L12538
.L12546:
	mvn	r7, #21
.L12539:
	movw	r3, #1410
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L12573
.L12536:
	mov	r0, r7
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12570:
	movw	r1, #:lower16:.LC1010
	add	r0, r5, #2256
	movt	r1, #:upper16:.LC1010
	bl	__dynamic_pr_debug
	b	.L12537
.L12573:
	ldr	r1, [r6, #24]
	movw	r2, #:lower16:.LC925
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC925
	ldr	r0, .L12574+8
	ldr	r1, [r1]
	stm	sp, {r4, r7}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12536
.L12572:
	mov	r0, r8
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L12540
.L12575:
	.align	2
.L12574:
	.word	.LANCHOR0+2148
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.fnend
	.size	ccid_function_bind_config, .-ccid_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_sdio_bind_config, %function
rmnet_smd_sdio_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r3, #2480]
	.pad #16
	sub	sp, sp, #16
	cmp	r4, #0
	beq	.L12585
	movw	r6, #:lower16:.LANCHOR4
	movw	r3, #2298
	movt	r6, #:upper16:.LANCHOR4
	mov	r5, r1
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L12611
.L12578:
	ldr	r2, .L12615
	movw	r1, #:lower16:rmnet_mux_bind
	movw	r3, #:lower16:.LC1013
	movt	r1, #:upper16:rmnet_mux_bind
	movw	r0, #:lower16:rmnet_mux_unbind
	movt	r0, #:upper16:rmnet_mux_unbind
	movt	r3, #:upper16:.LC1013
	add	ip, r2, #8
	str	r1, [r4, #32]
	movw	r1, #:lower16:rmnet_mux_set_alt
	str	r2, [r4, #4]
	add	r2, r2, #28
	movt	r1, #:upper16:rmnet_mux_set_alt
	str	r3, [r4]
	str	r2, [r4, #8]
	movw	r2, #1386
	str	ip, [r4, #16]
	str	r0, [r4, #36]
	movw	r0, #:lower16:rmnet_mux_setup
	str	r1, [r4, #40]
	ldrh	ip, [r6, r2]
	movw	r1, #:lower16:rmnet_mux_disable
	movw	r2, #:lower16:rmnet_mux_suspend
	movt	r0, #:upper16:rmnet_mux_setup
	movt	r1, #:upper16:rmnet_mux_disable
	movt	r2, #:upper16:rmnet_mux_suspend
	tst	ip, #4
	str	r1, [r4, #48]
	str	r0, [r4, #52]
	str	r2, [r4, #56]
	bne	.L12612
.L12579:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L12587
	add	r8, r4, #72
	str	r5, [r4, #20]
	add	r2, r5, #36
	mov	r0, r8
	ldr	r1, [r5, #40]
	bl	__list_add
	ldr	r7, [r4, #32]
	cmp	r7, #0
	beq	.L12581
	mov	r1, r4
	mov	r0, r5
	blx	r7
	subs	r7, r0, #0
	blt	.L12613
.L12581:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L12582
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L12582
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L12582:
	tst	r3, #2
	bne	.L12583
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L12583
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L12583:
	tst	r3, #1
	bne	.L12584
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L12584
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L12584:
	cmp	r7, #0
	bne	.L12580
	b	.L12576
.L12612:
	ldr	ip, [r5]
	movw	r2, #:lower16:.LC924
	ldr	r1, [r5, #24]
	movt	r2, #:upper16:.LC924
	ldr	r0, .L12615+4
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r5, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L12579
.L12587:
	mvn	r7, #21
.L12580:
	movw	r3, #1410
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L12614
.L12576:
	mov	r0, r7
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12611:
	movw	r1, #:lower16:.LC1012
	ldr	r0, .L12615+8
	movt	r1, #:upper16:.LC1012
	bl	__dynamic_pr_debug
	b	.L12578
.L12614:
	ldr	r1, [r5, #24]
	movw	r2, #:lower16:.LC925
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC925
	ldr	r0, .L12615+12
	ldr	r1, [r1]
	stm	sp, {r4, r7}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12576
.L12613:
	mov	r0, r8
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L12581
.L12585:
	mvn	r7, #18
	b	.L12576
.L12616:
	.align	2
.L12615:
	.word	.LANCHOR0+2196
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+2280
	.word	.LANCHOR4+1392
	.fnend
	.size	rmnet_smd_sdio_bind_config, .-rmnet_smd_sdio_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	accessory_function_bind_config, %function
accessory_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC1014
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r0, #:upper16:.LC1014
	str	r8, [sp, #16]
	mov	r5, r1
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	ldr	r4, [r3, #2488]
	bl	printk
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldrb	r2, [r3, #2244]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L12618
	ldr	r1, [r5, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L12627
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [r3, #2244]
	strb	r2, [r3, #2268]
.L12618:
	ldr	r3, .L12653
	movw	r2, #:lower16:.LC1015
	movw	r6, #:lower16:.LANCHOR4
	ldr	r0, [r5, #24]
	movt	r2, #:upper16:.LC1015
	movt	r6, #:upper16:.LANCHOR4
	strd	r2, [r4]
	add	r1, r3, #24
	add	r2, r3, #8
	str	r1, [r4, #8]
	movw	r1, #:lower16:acc_function_bind
	str	r2, [r4, #16]
	movt	r1, #:upper16:acc_function_bind
	str	r0, [r4, #84]
	ldr	r2, [r5, #24]
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	str	r1, [r4, #32]
	movw	r1, #1386
	cmp	r2, #4
	movw	r2, #:lower16:acc_function_set_alt
	addhi	r3, r3, #40
	movt	r2, #:upper16:acc_function_set_alt
	strhi	r3, [r4, #12]
	movw	r3, #:lower16:acc_function_unbind
	movt	r3, #:upper16:acc_function_unbind
	str	r3, [r4, #36]
	movw	r3, #:lower16:acc_function_disable
	str	r2, [r4, #40]
	ldrh	r2, [r6, r1]
	movt	r3, #:upper16:acc_function_disable
	str	r3, [r4, #48]
	tst	r2, #4
	bne	.L12650
.L12621:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L12629
	add	r8, r4, #72
	str	r5, [r4, #20]
	add	r2, r5, #36
	mov	r0, r8
	ldr	r1, [r5, #40]
	bl	__list_add
	ldr	r7, [r4, #32]
	cmp	r7, #0
	beq	.L12623
	mov	r1, r4
	mov	r0, r5
	blx	r7
	subs	r7, r0, #0
	blt	.L12651
.L12623:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L12624
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L12624
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L12624:
	tst	r3, #2
	bne	.L12625
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L12625
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L12625:
	tst	r3, #1
	bne	.L12626
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L12626
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L12626:
	cmp	r7, #0
	bne	.L12622
	b	.L12617
.L12650:
	ldr	ip, [r5]
	movw	r3, #:lower16:.LC1015
	movw	r2, #:lower16:.LC924
	ldr	r1, [r5, #24]
	movt	r3, #:upper16:.LC1015
	movt	r2, #:upper16:.LC924
	ldr	r0, .L12653+4
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r5, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L12621
.L12629:
	mvn	r7, #21
.L12622:
	movw	r3, #1410
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L12652
.L12617:
	mov	r0, r7
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12652:
	ldr	r1, [r5, #24]
	movw	r2, #:lower16:.LC925
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC925
	ldr	r0, .L12653+8
	ldr	r1, [r1]
	stm	sp, {r4, r7}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12617
.L12651:
	mov	r0, r8
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L12623
.L12627:
	mvn	r7, #18
	b	.L12617
.L12654:
	.align	2
.L12653:
	.word	.LANCHOR0+2272
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.fnend
	.size	accessory_function_bind_config, .-accessory_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_bind_config, %function
mtp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC1016
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r0, #:upper16:.LC1016
	str	r8, [sp, #16]
	mov	r5, r1
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	ldr	r4, [r3, #2500]
	bl	printk
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldrb	r2, [r3, #2336]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L12656
	ldr	r1, [r5, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L12665
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [r3, #2336]
	strb	r2, [r3, #2360]
.L12656:
	ldr	r3, .L12691
	movw	r2, #:lower16:.LC1017
	movw	r6, #:lower16:.LANCHOR4
	ldr	r0, [r5, #24]
	movt	r2, #:upper16:.LC1017
	movt	r6, #:upper16:.LANCHOR4
	strd	r2, [r4]
	add	r1, r3, #28
	add	r2, r3, #8
	str	r1, [r4, #8]
	movw	r1, #:lower16:mtp_function_bind
	str	r2, [r4, #16]
	movt	r1, #:upper16:mtp_function_bind
	str	r0, [r4, #84]
	ldr	r2, [r5, #24]
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	str	r1, [r4, #32]
	movw	r1, #1386
	cmp	r2, #4
	movw	r2, #:lower16:mtp_function_set_alt
	addhi	r3, r3, #48
	movt	r2, #:upper16:mtp_function_set_alt
	strhi	r3, [r4, #12]
	movw	r3, #:lower16:mtp_function_unbind
	movt	r3, #:upper16:mtp_function_unbind
	str	r3, [r4, #36]
	movw	r3, #:lower16:mtp_function_disable
	str	r2, [r4, #40]
	ldrh	r2, [r6, r1]
	movt	r3, #:upper16:mtp_function_disable
	str	r3, [r4, #48]
	tst	r2, #4
	bne	.L12688
.L12659:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L12667
	add	r8, r4, #72
	str	r5, [r4, #20]
	add	r2, r5, #36
	mov	r0, r8
	ldr	r1, [r5, #40]
	bl	__list_add
	ldr	r7, [r4, #32]
	cmp	r7, #0
	beq	.L12661
	mov	r1, r4
	mov	r0, r5
	blx	r7
	subs	r7, r0, #0
	blt	.L12689
.L12661:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L12662
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L12662
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L12662:
	tst	r3, #2
	bne	.L12663
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L12663
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L12663:
	tst	r3, #1
	bne	.L12664
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L12664
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L12664:
	cmp	r7, #0
	bne	.L12660
	b	.L12655
.L12688:
	ldr	ip, [r5]
	movw	r3, #:lower16:.LC1017
	movw	r2, #:lower16:.LC924
	ldr	r1, [r5, #24]
	movt	r3, #:upper16:.LC1017
	movt	r2, #:upper16:.LC924
	ldr	r0, .L12691+4
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r5, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L12659
.L12667:
	mvn	r7, #21
.L12660:
	movw	r3, #1410
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L12690
.L12655:
	mov	r0, r7
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12690:
	ldr	r1, [r5, #24]
	movw	r2, #:lower16:.LC925
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC925
	ldr	r0, .L12691+8
	ldr	r1, [r1]
	stm	sp, {r4, r7}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12655
.L12689:
	mov	r0, r8
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L12661
.L12665:
	mvn	r7, #18
	b	.L12655
.L12692:
	.align	2
.L12691:
	.word	.LANCHOR0+2364
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.fnend
	.size	mtp_function_bind_config, .-mtp_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ptp_function_bind_config, %function
ptp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC1016
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r0, #:upper16:.LC1016
	str	r8, [sp, #16]
	mov	r5, r1
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	ldr	r4, [r3, #2500]
	bl	printk
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldrb	r2, [r3, #2336]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L12694
	ldr	r1, [r5, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L12703
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [r3, #2336]
	strb	r2, [r3, #2360]
.L12694:
	ldr	r3, .L12729
	movw	r2, #:lower16:.LC1017
	movw	r6, #:lower16:.LANCHOR4
	ldr	r0, [r5, #24]
	movt	r2, #:upper16:.LC1017
	movt	r6, #:upper16:.LANCHOR4
	strd	r2, [r4]
	add	r1, r3, #100
	add	r2, r3, #80
	str	r1, [r4, #8]
	movw	r1, #:lower16:mtp_function_bind
	str	r2, [r4, #16]
	movt	r1, #:upper16:mtp_function_bind
	str	r0, [r4, #84]
	ldr	r2, [r5, #24]
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	str	r1, [r4, #32]
	movw	r1, #1386
	cmp	r2, #4
	movw	r2, #:lower16:mtp_function_set_alt
	addhi	r3, r3, #120
	movt	r2, #:upper16:mtp_function_set_alt
	strhi	r3, [r4, #12]
	movw	r3, #:lower16:mtp_function_unbind
	movt	r3, #:upper16:mtp_function_unbind
	str	r3, [r4, #36]
	movw	r3, #:lower16:mtp_function_disable
	str	r2, [r4, #40]
	ldrh	r2, [r6, r1]
	movt	r3, #:upper16:mtp_function_disable
	str	r3, [r4, #48]
	tst	r2, #4
	bne	.L12726
.L12697:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L12705
	add	r8, r4, #72
	str	r5, [r4, #20]
	add	r2, r5, #36
	mov	r0, r8
	ldr	r1, [r5, #40]
	bl	__list_add
	ldr	r7, [r4, #32]
	cmp	r7, #0
	beq	.L12699
	mov	r1, r4
	mov	r0, r5
	blx	r7
	subs	r7, r0, #0
	blt	.L12727
.L12699:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L12700
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L12700
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L12700:
	tst	r3, #2
	bne	.L12701
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L12701
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L12701:
	tst	r3, #1
	bne	.L12702
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L12702
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L12702:
	cmp	r7, #0
	bne	.L12698
	b	.L12693
.L12726:
	ldr	ip, [r5]
	movw	r3, #:lower16:.LC1017
	movw	r2, #:lower16:.LC924
	ldr	r1, [r5, #24]
	movt	r3, #:upper16:.LC1017
	movt	r2, #:upper16:.LC924
	ldr	r0, .L12729+4
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r5, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L12697
.L12705:
	mvn	r7, #21
.L12698:
	movw	r3, #1410
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L12728
.L12693:
	mov	r0, r7
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12728:
	ldr	r1, [r5, #24]
	movw	r2, #:lower16:.LC925
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC925
	ldr	r0, .L12729+8
	ldr	r1, [r1]
	stm	sp, {r4, r7}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12693
.L12727:
	mov	r0, r8
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L12699
.L12703:
	mvn	r7, #18
	b	.L12693
.L12730:
	.align	2
.L12729:
	.word	.LANCHOR0+2364
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.fnend
	.size	ptp_function_bind_config, .-ptp_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_bind_config, %function
conn_gadget_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC1018
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	ldr	r1, .L12764
	movt	r0, #:upper16:.LC1018
	str	r8, [sp, #16]
	movw	r6, #:lower16:.LANCHOR4
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	movt	r6, #:upper16:.LANCHOR4
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC1019
	movt	r3, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC1019
	ldr	r4, [r3, #2484]
	bl	printk
	ldr	r2, .L12764+4
	movw	r3, #:lower16:conn_gadget_function_bind
	movw	r0, #:lower16:conn_gadget_function_unbind
	movw	r1, #:lower16:conn_gadget_function_set_alt
	movt	r3, #:upper16:conn_gadget_function_bind
	ldr	ip, [r5, #24]
	movt	r0, #:upper16:conn_gadget_function_unbind
	movt	r1, #:upper16:conn_gadget_function_set_alt
	str	r2, [r4, #16]
	str	r3, [r4, #32]
	movw	r3, #:lower16:.LC906
	strd	r0, [r4, #36]
	add	r0, r2, #16
	add	r2, r2, #32
	movt	r3, #:upper16:.LC906
	str	r2, [r4, #12]
	movw	r2, #1386
	str	r3, [r4]
	str	r0, [r4, #8]
	ldrh	r1, [r6, r2]
	movw	r2, #:lower16:conn_gadget_function_disable
	movt	r2, #:upper16:conn_gadget_function_disable
	str	ip, [r4, #84]
	str	r2, [r4, #48]
	tst	r1, #4
	bne	.L12761
.L12732:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L12740
	add	r8, r4, #72
	str	r5, [r4, #20]
	add	r2, r5, #36
	mov	r0, r8
	ldr	r1, [r5, #40]
	bl	__list_add
	ldr	r7, [r4, #32]
	cmp	r7, #0
	beq	.L12734
	mov	r1, r4
	mov	r0, r5
	blx	r7
	subs	r7, r0, #0
	blt	.L12762
.L12734:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L12735
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L12735
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L12735:
	tst	r3, #2
	bne	.L12736
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L12736
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L12736:
	tst	r3, #1
	bne	.L12737
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L12737
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L12737:
	cmp	r7, #0
	bne	.L12733
	b	.L12731
.L12761:
	ldr	ip, [r5]
	movw	r2, #:lower16:.LC924
	ldr	r1, [r5, #24]
	movt	r2, #:upper16:.LC924
	ldr	r0, .L12764+8
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r5, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L12732
.L12740:
	mvn	r7, #21
.L12733:
	movw	r3, #1410
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L12763
.L12731:
	mov	r0, r7
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12763:
	ldr	r1, [r5, #24]
	movw	r2, #:lower16:.LC925
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC925
	ldr	r0, .L12764+12
	ldr	r1, [r1]
	stm	sp, {r4, r7}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12731
.L12762:
	mov	r0, r8
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L12734
.L12765:
	.align	2
.L12764:
	.word	.LANCHOR5-500
	.word	.LANCHOR0+2516
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.fnend
	.size	conn_gadget_function_bind_config, .-conn_gadget_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_open, %function
ncm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #2322
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r4, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L12788
.L12767:
	add	r7, r4, #188
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r6, [r4, #168]
	mov	r3, #1
	mov	r2, #2
	strb	r2, [r4, #172]
	strb	r3, [r4, #173]
	cmp	r6, #0
	beq	.L12769
	ldr	ip, [r4, #20]
	mov	r3, #0
	mov	r2, #16
	ldr	r5, [r6]
	mov	r0, #42
	mov	r1, #8
	ldr	r8, [ip, #24]
	strb	r0, [r5, #1]
	strb	r3, [r5, #2]
	strb	r3, [r5, #3]
	strb	r1, [r5, #6]
	strb	r3, [r5, #7]
	str	r2, [r6, #4]
	ldr	r3, [r8]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	movls	r3, #28672
	movtls	r3, 148
	bhi	.L12789
.L12770:
	ldr	r2, [r6]
	movw	r9, #:lower16:.LANCHOR2
	movw	r1, #546
	movt	r9, #:upper16:.LANCHOR2
	str	r3, [r2, #8]
	str	r3, [r2, #12]
	ldrh	r3, [r9, r1]
	tst	r3, #4
	bne	.L12790
.L12771:
	mov	r1, #1
	mvn	r2, #94
	mov	r3, #0
	mov	r0, r7
	strb	r1, [r4, #172]
	strb	r2, [r5]
	ldrb	r2, [r4, #148]	@ zero_extendqisi2
	strh	r2, [r5, #4]	@ unaligned
	str	r3, [r4, #168]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #164]
	mov	r2, #32
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r5, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	r5, #0
	bge	.L12769
	movw	r3, #570
	str	r6, [r4, #168]
	ldrh	r3, [r9, r3]
	tst	r3, #4
	bne	.L12791
.L12769:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock
.L12789:
	ldr	r1, [r3, #16]
	mov	r2, #0
	mov	r3, #28672
	movt	r2, 6500
	movt	r3, 148
	cmp	r1, #3
	moveq	r3, r2
	b	.L12770
.L12788:
	ldr	r1, [r4, #20]
	movw	r2, #:lower16:.LC82
	add	r0, r3, #2304
	movt	r2, #:upper16:.LC82
	ldr	r3, .L12792
	ldr	r1, [r1, #24]
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12767
.L12791:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC25
	mov	r3, r5
	movt	r2, #:upper16:.LC25
	ldr	r0, .L12792+4
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12769
.L12790:
	ldr	r3, [r8]
	ldr	r2, [r3, #20]
	add	r1, r3, #32
	cmp	r2, #2
	movls	r3, #28672
	movtls	r3, 148
	bls	.L12772
	ldr	r0, [r3, #16]
	mov	r2, #0
	mov	r3, #28672
	movt	r2, 6500
	movt	r3, 148
	cmp	r0, #3
	moveq	r3, r2
.L12772:
	movw	r2, #:lower16:.LC24
	ldr	r0, .L12792+8
	movt	r2, #:upper16:.LC24
	bl	__dynamic_dev_dbg
	b	.L12771
.L12793:
	.align	2
.L12792:
	.word	.LANCHOR5-464
	.word	.LANCHOR2+552
	.word	.LANCHOR2+528
	.fnend
	.size	ncm_open, .-ncm_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_close, %function
ncm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #2346
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r4, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L12816
.L12795:
	add	r7, r4, #188
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r6, [r4, #168]
	mov	r3, #0
	mov	r2, #2
	strb	r2, [r4, #172]
	strb	r3, [r4, #173]
	cmp	r6, r3
	beq	.L12797
	ldr	ip, [r4, #20]
	mov	r2, #16
	mov	r0, #42
	ldr	r5, [r6]
	mov	r1, #8
	ldr	r8, [ip, #24]
	strb	r0, [r5, #1]
	strb	r3, [r5, #2]
	strb	r3, [r5, #3]
	strb	r1, [r5, #6]
	strb	r3, [r5, #7]
	str	r2, [r6, #4]
	ldr	r3, [r8]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	movls	r3, #28672
	movtls	r3, 148
	bhi	.L12817
.L12798:
	ldr	r2, [r6]
	movw	r9, #:lower16:.LANCHOR2
	movw	r1, #546
	movt	r9, #:upper16:.LANCHOR2
	str	r3, [r2, #8]
	str	r3, [r2, #12]
	ldrh	r3, [r9, r1]
	tst	r3, #4
	bne	.L12818
.L12799:
	mov	r1, #1
	mvn	r2, #94
	mov	r3, #0
	mov	r0, r7
	strb	r1, [r4, #172]
	strb	r2, [r5]
	ldrb	r2, [r4, #148]	@ zero_extendqisi2
	strh	r2, [r5, #4]	@ unaligned
	str	r3, [r4, #168]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #164]
	mov	r2, #32
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r5, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	r5, #0
	bge	.L12797
	movw	r3, #570
	str	r6, [r4, #168]
	ldrh	r3, [r9, r3]
	tst	r3, #4
	bne	.L12819
.L12797:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock
.L12817:
	ldr	r1, [r3, #16]
	mov	r2, #0
	mov	r3, #28672
	movt	r2, 6500
	movt	r3, 148
	cmp	r1, #3
	moveq	r3, r2
	b	.L12798
.L12816:
	ldr	r1, [r4, #20]
	movw	r2, #:lower16:.LC82
	movt	r2, #:upper16:.LC82
	ldr	r3, .L12820
	ldr	r0, .L12820+4
	ldr	r1, [r1, #24]
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12795
.L12819:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC25
	mov	r3, r5
	movt	r2, #:upper16:.LC25
	ldr	r0, .L12820+8
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12797
.L12818:
	ldr	r3, [r8]
	ldr	r2, [r3, #20]
	add	r1, r3, #32
	cmp	r2, #2
	movls	r3, #28672
	movtls	r3, 148
	bls	.L12800
	ldr	r0, [r3, #16]
	mov	r2, #0
	mov	r3, #28672
	movt	r2, 6500
	movt	r3, 148
	cmp	r0, #3
	moveq	r3, r2
.L12800:
	movw	r2, #:lower16:.LC24
	ldr	r0, .L12820+12
	movt	r2, #:upper16:.LC24
	bl	__dynamic_dev_dbg
	b	.L12799
.L12821:
	.align	2
.L12820:
	.word	.LANCHOR5-452
	.word	.LANCHOR4+2328
	.word	.LANCHOR2+552
	.word	.LANCHOR2+528
	.fnend
	.size	ncm_close, .-ncm_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_bind_config, %function
ffs_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r2, [r0, #4]
	.pad #20
	sub	sp, sp, #20
	ldr	r0, [r3, #28]
	ldr	r7, [r1, #24]
	ldr	r5, [r2, #4]
	cmp	r0, #0
	beq	.L12839
	mov	r2, #120
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	mvneq	r7, #11
	bne	.L12823
.L12822:
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L12839:
	mov	r4, #16
.L12823:
	movw	r3, #:lower16:.LC1020
	movw	r1, #:lower16:ffs_func_bind
	movt	r3, #:upper16:.LC1020
	movw	r2, #:lower16:ffs_func_set_alt
	movt	r1, #:upper16:ffs_func_bind
	movt	r2, #:upper16:ffs_func_set_alt
	str	r3, [r4, #36]
	movw	r3, #:lower16:ffs_func_unbind
	ldr	ip, [r5, #188]
	movt	r3, #:upper16:ffs_func_unbind
	movw	r0, #:lower16:ffs_func_disable
	str	r6, [r4]
	str	r1, [r4, #68]
	movw	r1, #:lower16:ffs_func_setup
	movt	r0, #:upper16:ffs_func_disable
	str	r2, [r4, #76]
	movw	r2, #:lower16:ffs_func_resume
	movt	r1, #:upper16:ffs_func_setup
	str	r3, [r4, #72]
	movw	r3, #:lower16:ffs_func_suspend
	movt	r2, #:upper16:ffs_func_resume
	movt	r3, #:upper16:ffs_func_suspend
	str	ip, [r4, #40]
	str	r0, [r4, #84]
	str	r1, [r4, #88]
	str	r3, [r4, #92]
	add	r3, r5, #84
	str	r2, [r4, #96]
	ldr	r2, [r7]
	stmib	r4, {r2, r5}
	.syntax divided
@ 45 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #1386
	movt	r5, #:upper16:.LANCHOR4
	add	r8, r4, #36
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L12872
.L12825:
	ldr	r3, [r4, #76]
	cmp	r3, #0
	beq	.L12829
	ldr	r3, [r4, #84]
	cmp	r3, #0
	beq	.L12829
	add	r9, r4, #108
	str	r6, [r4, #56]
	add	r2, r6, #36
	mov	r0, r9
	ldr	r1, [r6, #40]
	bl	__list_add
	ldr	r7, [r4, #68]
	cmp	r7, #0
	beq	.L12830
	mov	r1, r8
	mov	r0, r6
	blx	r7
	subs	r7, r0, #0
	blt	.L12873
.L12830:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L12831
	ldr	r2, [r4, #52]
	cmp	r2, #0
	beq	.L12831
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r6, #45]
.L12831:
	tst	r3, #2
	bne	.L12832
	ldr	r2, [r4, #44]
	cmp	r2, #0
	beq	.L12832
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r6, #45]
.L12832:
	tst	r3, #1
	bne	.L12833
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L12833
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #45]
.L12833:
	cmp	r7, #0
	beq	.L12822
	movw	r3, #1410
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L12828
	b	.L12827
.L12829:
	movw	r3, #1410
	mvn	r7, #21
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L12828
.L12827:
	ldr	r1, [r6, #24]
	movw	r2, #:lower16:.LC925
	ldr	r3, [r4, #36]
	movt	r2, #:upper16:.LC925
	ldr	r0, .L12875
	ldr	r1, [r1]
	str	r8, [sp]
	str	r7, [sp, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L12828:
	ldr	r3, [r4, #8]
	mov	r8, #0
	ldr	r5, [r4, #12]
	add	r0, r3, #24
	ldrh	r6, [r3, #180]
	bl	_raw_spin_lock_irqsave
	add	r5, r5, #28
	mov	r9, r0
.L12835:
	ldr	r0, [r5, #-28]
	cmp	r0, #0
	beq	.L12834
	ldr	r1, [r5, #-24]
	cmp	r1, #0
	beq	.L12834
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L12834:
	subs	r6, r6, #1
	str	r8, [r5, #-28]
	add	r5, r5, #28
	str	r8, [r5, #-52]
	bne	.L12835
	ldr	r0, [r4, #8]
	mov	r1, r9
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	ldr	r5, [r4, #8]
	add	r3, r5, #84
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L12874
.L12836:
	ldr	r0, [r4, #12]
	bl	kfree
	mov	r0, r4
	bl	kfree
	b	.L12822
.L12872:
	ldr	ip, [r6]
	movw	r2, #:lower16:.LC924
	ldr	r1, [r6, #24]
	movt	r2, #:upper16:.LC924
	ldr	r3, [r4, #36]
	ldr	r0, .L12875+4
	ldr	r1, [r1]
	stm	sp, {r8, ip}
	str	r6, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12825
.L12873:
	mov	r0, r9
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #56]
	b	.L12830
.L12874:
	movw	r0, #:lower16:.LC992
	ldr	r1, .L12875+8
	movt	r0, #:upper16:.LC992
	bl	printk
	mov	r0, r5
	bl	ffs_data_clear
	ldr	r2, [r5, #120]
	add	r3, r5, #120
	cmp	r2, r3
	bne	.L12837
	ldr	r2, [r5, #40]
	add	r3, r5, #40
	cmp	r2, r3
	bne	.L12837
	mov	r0, r5
	bl	kfree
	b	.L12836
.L12837:
	.syntax divided
@ 1345 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1346, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L12876:
	.align	2
.L12875:
	.word	.LANCHOR4+1392
	.word	.LANCHOR4+1368
	.word	.LANCHOR5-572
	.fnend
	.size	ffs_function_bind_config, .-ffs_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_function_bind_config, %function
mbim_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r3, #2370
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR4
	mov	r7, r1
	movt	r6, #:upper16:.LANCHOR4
	strd	r8, [sp, #16]
	ldrh	r3, [r6, r3]
	str	lr, [sp, #24]
	.pad #20
	sub	sp, sp, #20
	tst	r3, #4
	bne	.L12934
.L12878:
	ldr	r0, .L12944
	movw	r4, #:lower16:.LANCHOR1
	bl	strim
	mov	r8, r0
	movw	r0, #:lower16:.LC1022
	ldr	r1, .L12944+4
	movt	r0, #:upper16:.LC1022
	mov	r2, #0
	movt	r4, #:upper16:.LANCHOR1
	bl	printk
	ldr	r5, [r4, #3616]
	cmp	r5, #0
	beq	.L12935
	movw	r0, #:lower16:.LC1024
	mov	r2, r5
	ldr	r1, .L12944+8
	movt	r0, #:upper16:.LC1024
	bl	printk
	movw	r3, #2394
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L12936
.L12881:
	cmp	r5, #1
	bne	.L12937
	ldr	r3, [r4, #3744]
	cmp	r3, #0
	beq	.L12884
	movw	r3, #2418
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L12938
.L12886:
	movw	r0, #:lower16:.LC607
	movw	r5, #:lower16:.LANCHOR0
	ldr	r1, .L12944+8
	movt	r0, #:upper16:.LC607
	mov	r2, #1
	movt	r5, #:upper16:.LANCHOR0
	bl	printk
	ldrb	r3, [r5, #2572]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L12939
.L12887:
	ldr	r4, [r4, #3620]
	cmp	r4, #0
	beq	.L12940
	ldr	lr, .L12944+12
	movw	r2, #:lower16:.LC1031
	movw	r3, #:lower16:mbim_unbind
	movt	r2, #:upper16:.LC1031
	movt	r3, #:upper16:mbim_unbind
	mov	r0, r8
	movw	r1, #:lower16:mbim_bind
	ldr	r8, [r7, #24]
	str	r3, [r4, #36]
	movw	r3, #:lower16:mbim_setup
	movt	r1, #:upper16:mbim_bind
	add	r9, lr, #964
	movt	r3, #:upper16:mbim_setup
	movw	ip, #:lower16:mbim_get_alt
	stm	r4, {r2, r9}
	movw	r2, #:lower16:mbim_set_alt
	movt	ip, #:upper16:mbim_get_alt
	movt	r2, #:upper16:mbim_set_alt
	str	r1, [r4, #32]
	movw	r1, #:lower16:mbim_disable
	movt	r1, #:upper16:mbim_disable
	str	r2, [r4, #40]
	movw	r2, #:lower16:mbim_suspend
	str	r3, [r4, #52]
	movw	r3, #:lower16:mbim_resume
	movt	r2, #:upper16:mbim_suspend
	movt	r3, #:upper16:mbim_resume
	str	ip, [r4, #44]
	str	r1, [r4, #48]
	mov	r1, #16384
	strd	r2, [r4, #56]
	mov	r2, #0
	str	r8, [r4, #84]
	str	r2, [r4, #88]
	str	lr, [r4, #200]
	str	r1, [r4, #224]
	bl	str_to_xport
	cmp	r0, #7
	str	r0, [r4, #132]
	beq	.L12891
	mov	r3, #6
	str	r3, [r4, #132]
.L12892:
	movw	r3, #1386
	add	r2, r4, #208
	ldrh	r1, [r6, r3]
	add	r3, r4, #216
	str	r2, [r4, #208]
	strd	r2, [r4, #212]
	str	r3, [r4, #220]
	tst	r1, #4
	bne	.L12941
.L12893:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L12901
	add	r8, r4, #72
	str	r7, [r4, #20]
	add	r2, r7, #36
	mov	r0, r8
	ldr	r1, [r7, #40]
	bl	__list_add
	ldr	r5, [r4, #32]
	cmp	r5, #0
	beq	.L12895
	mov	r1, r4
	mov	r0, r7
	blx	r5
	subs	r5, r0, #0
	blt	.L12942
.L12895:
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L12896
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L12896
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r7, #45]
.L12896:
	tst	r3, #2
	bne	.L12897
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L12897
	ldrb	r2, [r7, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r7, #45]
.L12897:
	tst	r3, #1
	bne	.L12898
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L12898
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r7, #45]
.L12898:
	cmp	r5, #0
	bne	.L12894
	b	.L12899
.L12939:
	ldr	r2, [r7, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L12889
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r7, #24]
	strb	r3, [r5, #2572]
	strb	r3, [r5, #2604]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L12889
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	strb	r3, [r5, #2580]
	strb	r3, [r5, #2616]
	strb	r3, [r5, #2628]
	b	.L12887
.L12941:
	ldr	ip, [r7]
	movw	r2, #:lower16:.LC924
	ldr	r1, [r7, #24]
	movt	r2, #:upper16:.LC924
	ldr	r3, [r4]
	ldr	r0, .L12944+16
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r7, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L12893
.L12901:
	mvn	r5, #21
.L12894:
	movw	r3, #1410
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L12943
.L12899:
	movw	r0, #:lower16:.LC1032
	mov	r2, r5
	ldr	r1, .L12944+4
	movt	r0, #:upper16:.LC1032
	bl	printk
.L12877:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L12891:
	mov	r3, #8192
	mov	r2, #16
	mov	r1, #1
	str	r3, [r5, #200]
	strh	r1, [r5, #204]	@ movhi
	str	r3, [r5, #212]
	strh	r2, [r5, #222]	@ movhi
	b	.L12892
.L12884:
	bl	bam_data_setup.part.91
	subs	r5, r0, #0
	beq	.L12886
.L12883:
	movw	r0, #:lower16:.LC1028
	mov	r2, r5
	ldr	r1, .L12944+8
	movt	r0, #:upper16:.LC1028
	bl	printk
	movw	r0, #:lower16:.LC1029
	ldr	r1, .L12944+4
	movt	r0, #:upper16:.LC1029
	bl	printk
	b	.L12877
.L12934:
	ldr	r2, .L12944
	movw	r1, #:lower16:.LC1021
	add	r0, r6, #2352
	ldr	r3, .L12944+20
	movt	r1, #:upper16:.LC1021
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L12878
.L12936:
	movw	r1, #:lower16:.LC1025
	mov	r3, r5
	ldr	r2, .L12944+24
	movt	r1, #:upper16:.LC1025
	ldr	r0, .L12944+28
	bl	__dynamic_pr_debug
	b	.L12881
.L12938:
	movw	r1, #:lower16:.LC1027
	ldr	r2, .L12944+24
	movt	r1, #:upper16:.LC1027
	ldr	r0, .L12944+32
	bl	__dynamic_pr_debug
	b	.L12886
.L12943:
	ldr	r1, [r7, #24]
	movw	r2, #:lower16:.LC925
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC925
	ldr	r0, .L12944+36
	ldr	r1, [r1]
	strd	r4, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12899
.L12942:
	mov	r0, r8
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L12895
.L12889:
	mvn	r5, #18
	b	.L12877
.L12940:
	movw	r0, #:lower16:.LC1030
	ldr	r1, .L12944+4
	mvn	r5, #11
	movt	r0, #:upper16:.LC1030
	bl	printk
	b	.L12877
.L12937:
	movw	r0, #:lower16:.LC1026
	mov	r2, r5
	ldr	r1, .L12944+24
	movt	r0, #:upper16:.LC1026
	mvn	r5, #21
	bl	printk
	b	.L12883
.L12935:
	movw	r0, #:lower16:.LC1023
	mov	r3, r5
	ldr	r1, .L12944+4
	mov	r2, r5
	movt	r0, #:upper16:.LC1023
	bl	printk
	mvn	r5, #18
	b	.L12877
.L12945:
	.align	2
.L12944:
	.word	.LANCHOR1+3176
	.word	.LANCHOR5-412
	.word	.LANCHOR5-392
	.word	.LANCHOR0+1668
	.word	.LANCHOR4+1368
	.word	.LANCHOR5-440
	.word	.LANCHOR5-3460
	.word	.LANCHOR4+2376
	.word	.LANCHOR4+2400
	.word	.LANCHOR4+1392
	.fnend
	.size	mbim_function_bind_config, .-mbim_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_function_bind_config, %function
mass_storage_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r2, [r3, #2640]	@ zero_extendqisi2
	.pad #16
	sub	sp, sp, #16
	ldr	r0, [r0, #4]
	cmp	r2, #0
	ldr	r6, [r0, #96]
	bne	.L12947
	ldr	r0, [r1, #24]
	ldrb	r2, [r0, #48]	@ zero_extendqisi2
	cmp	r2, #253
	mvnhi	r6, #18
	bhi	.L12946
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r0, #48]
	strb	r2, [r3, #2640]
	strb	r2, [r3, #2664]
.L12947:
	movw	r3, #:lower16:kmalloc_caches
	mov	r5, r1
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L12961
	mov	r2, #108
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	mvneq	r6, #11
	bne	.L12949
.L12946:
	mov	r0, r6
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12961:
	mov	r4, #16
.L12949:
	ldr	ip, .L12986
	movw	r0, #:lower16:fsg_bind
	movw	r1, #:lower16:fsg_unbind
	movt	r0, #:upper16:fsg_bind
	movt	r1, #:upper16:fsg_unbind
	movw	r3, #:lower16:.LC1033
	movw	r2, #:lower16:fsg_set_alt
	movt	r2, #:upper16:fsg_set_alt
	movt	r3, #:upper16:.LC1033
	str	r6, [r4, #88]
	movw	r7, #:lower16:.LANCHOR4
	strd	r0, [r4, #32]
	movt	r7, #:upper16:.LANCHOR4
	movw	r0, #1386
	stm	r4, {r3, ip}
	movw	r1, #:lower16:fsg_setup
	str	r2, [r4, #40]
	ldrh	r0, [r7, r0]
	movw	r2, #:lower16:fsg_disable
	movt	r1, #:upper16:fsg_setup
	movt	r2, #:upper16:fsg_disable
	str	r2, [r4, #48]
	tst	r0, #4
	str	r1, [r4, #52]
	bne	.L12984
.L12950:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L12953
	add	r8, r4, #72
	str	r5, [r4, #20]
	add	r2, r5, #36
	mov	r0, r8
	ldr	r1, [r5, #40]
	bl	__list_add
	ldr	r6, [r4, #32]
	cmp	r6, #0
	beq	.L12954
	mov	r1, r4
	mov	r0, r5
	blx	r6
	subs	r6, r0, #0
	blt	.L12985
.L12954:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L12955
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L12955
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L12955:
	tst	r3, #2
	bne	.L12956
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L12956
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L12956:
	tst	r3, #1
	bne	.L12957
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L12957
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L12957:
	cmp	r6, #0
	beq	.L12958
	movw	r3, #1410
	ldrh	r3, [r7, r3]
	tst	r3, #4
	beq	.L12952
	b	.L12951
.L12984:
	ldr	ip, [r5]
	movw	r2, #:lower16:.LC924
	ldr	r1, [r5, #24]
	movt	r2, #:upper16:.LC924
	ldr	r0, .L12986+4
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r5, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L12950
.L12953:
	movw	r3, #1410
	mvn	r6, #21
	ldrh	r3, [r7, r3]
	tst	r3, #4
	beq	.L12952
.L12951:
	ldr	r1, [r5, #24]
	movw	r2, #:lower16:.LC925
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC925
	ldr	r0, .L12986+8
	ldr	r1, [r1]
	stm	sp, {r4, r6}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L12952:
	mov	r0, r4
	bl	kfree
	b	.L12946
.L12958:
	ldr	r3, [r4, #88]
	add	r2, r3, #336
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #1
	bgt	.L12946
	movw	r4, #:lower16:.LANCHOR6
	movt	r4, #:upper16:.LANCHOR6
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L12946
	movw	r0, #:lower16:.LC1034
	mov	r1, #47
	movt	r0, #:upper16:.LC1034
	bl	warn_slowpath_null
	mov	r3, #1
	strb	r3, [r4]
	b	.L12946
.L12985:
	mov	r0, r8
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L12954
.L12987:
	.align	2
.L12986:
	.word	.LANCHOR0+2668
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.fnend
	.size	mass_storage_function_bind_config, .-mass_storage_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_function_bind_config, %function
rmnet_sdio_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r0, [r3, #36]
	.pad #20
	sub	sp, sp, #20
	cmp	r0, #0
	beq	.L13002
	mov	r2, #376
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L13027
.L12989:
	movw	r2, #:lower16:.LC1035
	mov	r5, #0
	movt	r2, #:upper16:.LC1035
	mov	r1, #10
	movw	r0, #:lower16:.LC84
	mov	r3, r5
	str	r5, [sp]
	str	r2, [sp, #4]
	movt	r1, 2
	movt	r0, #:upper16:.LC84
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #200]
	beq	.L13004
	movw	r0, #:lower16:rmnet_sdio_disconnect_work
	add	r8, r4, #208
	str	r5, [r4, #188]
	add	lr, r4, #224
	movt	r0, #:upper16:rmnet_sdio_disconnect_work
	str	r5, [r4, #192]
	mov	r6, #65024
	movw	ip, #:lower16:rmnet_sdio_set_modem_cbits_w
	str	r5, [r4, #196]
	movw	r2, #:lower16:rmnet_sdio_control_rx_work
	movw	r3, #:lower16:rmnet_sdio_data_rx_work
	str	r8, [r4, #208]
	movw	r1, #:lower16:rmnet_open_sdio_work
	movt	r6, 65535
	str	r8, [r4, #212]
	movt	ip, #:upper16:rmnet_sdio_set_modem_cbits_w
	add	r8, r4, #240
	movt	r2, #:upper16:rmnet_sdio_control_rx_work
	movt	r3, #:upper16:rmnet_sdio_data_rx_work
	str	r6, [r4, #204]
	movt	r1, #:upper16:rmnet_open_sdio_work
	str	r0, [r4, #216]
	add	r0, r4, #340
	str	lr, [r4, #224]
	movw	r9, #:lower16:rmnet_sdio_bind
	str	lr, [r4, #228]
	add	lr, r4, #256
	movt	r9, #:upper16:rmnet_sdio_bind
	str	r6, [r4, #220]
	str	r2, [r4, #232]
	mov	r2, r5
	str	r6, [r4, #236]
	str	r8, [r4, #240]
	str	r8, [r4, #244]
	movw	r8, #:lower16:.LANCHOR4
	str	r3, [r4, #248]
	mov	r3, r5
	movt	r8, #:upper16:.LANCHOR4
	str	r6, [r4, #252]
	str	lr, [r4, #256]
	str	lr, [r4, #260]
	str	r1, [r4, #264]
	mov	r1, r5
	str	r6, [r4, #336]
	str	r0, [r4, #340]
	str	r0, [r4, #344]
	add	r0, r4, #268
	str	ip, [r4, #348]
	bl	init_timer_key
	movw	lr, #:lower16:rmnet_sdio_unbind
	movw	ip, #:lower16:rmnet_sdio_setup
	ldr	r2, .L13030
	movt	lr, #:upper16:rmnet_sdio_unbind
	movt	ip, #:upper16:rmnet_sdio_setup
	movw	r0, #:lower16:delayed_work_timer_fn
	movw	r1, #:lower16:rmnet_close_sdio_work
	movw	r3, #:lower16:.LC1036
	movt	r0, #:upper16:delayed_work_timer_fn
	str	lr, [r4, #36]
	movw	lr, #:lower16:rmnet_sdio_disable
	movt	r1, #:upper16:rmnet_close_sdio_work
	str	ip, [r4, #52]
	movt	lr, #:upper16:rmnet_sdio_disable
	movw	ip, #:lower16:rmnet_sdio_suspend
	movt	ip, #:upper16:rmnet_sdio_suspend
	str	r2, [r4, #4]
	movt	r3, #:upper16:.LC1036
	str	r9, [r4, #32]
	movw	r9, #:lower16:rmnet_sdio_set_alt
	str	lr, [r4, #48]
	add	lr, r2, #8
	movt	r9, #:upper16:rmnet_sdio_set_alt
	add	r2, r2, #28
	str	r3, [r4]
	str	ip, [r4, #56]
	add	ip, r4, #108
	str	r2, [r4, #8]
	add	r2, r4, #308
	str	lr, [r4, #16]
	add	lr, r4, #120
	str	r9, [r4, #40]
	add	r9, r4, #252
	str	ip, [r4, #108]
	str	ip, [r4, #112]
	add	ip, r4, #160
	str	lr, [r4, #120]
	str	lr, [r4, #124]
	add	lr, r4, #132
	str	ip, [r4, #160]
	str	ip, [r4, #164]
	add	ip, r4, #172
	str	lr, [r4, #132]
	str	lr, [r4, #136]
	add	lr, r4, #144
	str	r5, [r4, #152]
	str	ip, [r4, #172]
	str	ip, [r4, #176]
	movw	ip, #1386
	str	lr, [r4, #144]
	str	lr, [r4, #148]
	str	r5, [r4, #156]
	str	r5, [r4, #180]
	str	r5, [r4, #184]
	str	r0, [r4, #284]
	str	r9, [r4, #288]
	str	r6, [r4, #304]
	str	r2, [r4, #308]
	str	r2, [r4, #312]
	str	r1, [r4, #316]
	ldrh	r2, [r8, ip]
	tst	r2, #4
	bne	.L13028
.L12992:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L12995
	add	r6, r4, #72
	str	r7, [r4, #20]
	add	r2, r7, #36
	mov	r0, r6
	ldr	r1, [r7, #40]
	bl	__list_add
	ldr	r5, [r4, #32]
	cmp	r5, #0
	beq	.L12996
	mov	r1, r4
	mov	r0, r7
	blx	r5
	subs	r5, r0, #0
	blt	.L13029
.L12996:
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L12997
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L12997
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r7, #45]
.L12997:
	tst	r3, #2
	bne	.L12998
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L12998
	ldrb	r2, [r7, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r7, #45]
.L12998:
	tst	r3, #1
	bne	.L12999
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L12999
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r7, #45]
.L12999:
	cmp	r5, #0
	beq	.L13000
	movw	r3, #1410
	ldrh	r3, [r8, r3]
	tst	r3, #4
	beq	.L12994
	b	.L12993
.L13028:
	ldr	ip, [r7]
	movw	r2, #:lower16:.LC924
	ldr	r1, [r7, #24]
	movt	r2, #:upper16:.LC924
	ldr	r0, .L13030+4
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r7, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, r5
	bne	.L12992
.L12995:
	movw	r3, #1410
	mvn	r5, #21
	ldrh	r3, [r8, r3]
	tst	r3, #4
	beq	.L12994
.L12993:
	ldr	r1, [r7, #24]
	movw	r2, #:lower16:.LC925
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC925
	ldr	r0, .L13030+8
	ldr	r1, [r1]
	strd	r4, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L12994:
	ldr	r0, [r4, #200]
	bl	destroy_workqueue
.L12991:
	mov	r0, r4
	bl	kfree
.L12988:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L13000:
	movw	r0, #:lower16:.LC1037
	mov	r1, r5
	movt	r0, #:upper16:.LC1037
	bl	debugfs_create_dir
	cmn	r0, #4096
	mov	r2, r0
	str	r0, [r4, #352]
	bhi	.L12988
	ldr	ip, .L13030+12
	movw	r0, #:lower16:.LC250
	mov	r3, r4
	mov	r1, #292
	movt	r0, #:upper16:.LC250
	str	ip, [sp]
	bl	debugfs_create_file
	b	.L12988
.L13002:
	mov	r4, #16
	b	.L12989
.L13004:
	mvn	r5, #11
	b	.L12991
.L13029:
	mov	r0, r6
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L12996
.L13027:
	mvn	r5, #11
	b	.L12988
.L13031:
	.align	2
.L13030:
	.word	.LANCHOR0+2676
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.word	.LANCHOR5-376
	.fnend
	.size	rmnet_sdio_function_bind_config, .-rmnet_sdio_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_open, %function
ecm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #2442
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r4, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r3, r2]
	ldr	r2, [r0, #20]
	tst	r3, #4
	bne	.L13050
.L13033:
	ldr	r6, [r4, #168]
	mov	r3, #1
	strb	r3, [r4, #172]
	strb	r3, [r4, #173]
	cmp	r6, #0
	beq	.L13032
	ldr	r5, [r6]
	mov	r3, #0
	mov	r1, #8
	ldr	r8, [r2, #24]
	movw	r7, #:lower16:.LANCHOR2
	movw	r2, #378
	movt	r7, #:upper16:.LANCHOR2
	strb	r3, [r5, #1]
	ldrb	r0, [r4, #173]	@ zero_extendqisi2
	strh	r0, [r5, #2]	@ unaligned
	strb	r3, [r5, #6]
	strb	r3, [r5, #7]
	str	r1, [r6, #4]
	ldrh	r3, [r7, r2]
	tst	r3, #4
	bne	.L13051
.L13036:
	mov	r1, #2
	mvn	r0, #94
	mov	r3, #0
	mov	r2, #32
	strb	r1, [r4, #172]
	mov	r1, r6
	strb	r0, [r5]
	ldrb	r0, [r4, #148]	@ zero_extendqisi2
	strh	r0, [r5, #4]	@ unaligned
	ldr	r0, [r4, #164]
	str	r3, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L13052
.L13032:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13052:
	movw	r3, #426
	str	r6, [r4, #168]
	ldrh	r3, [r7, r3]
	tst	r3, #4
	beq	.L13032
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC25
	mov	r3, r0
	ldrd	r4, [sp]
	movt	r2, #:upper16:.LC25
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r1, r1, #32
	add	sp, sp, #24
	ldr	r0, .L13053
	b	__dynamic_dev_dbg
.L13050:
	ldr	r1, [r2, #24]
	movw	r2, #:lower16:.LC82
	movt	r2, #:upper16:.LC82
	ldr	r3, .L13053+4
	ldr	r0, .L13053+8
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r2, [r4, #20]
	b	.L13033
.L13051:
	ldrb	lr, [r4, #173]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC20
	movw	r3, #:lower16:.LC21
	ldr	r1, [r8]
	movt	ip, #:upper16:.LC20
	movw	r2, #:lower16:.LC23
	movt	r3, #:upper16:.LC21
	add	r0, r7, #360
	movt	r2, #:upper16:.LC23
	cmp	lr, #0
	movne	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L13036
.L13054:
	.align	2
.L13053:
	.word	.LANCHOR2+408
	.word	.LANCHOR5-268
	.word	.LANCHOR4+2424
	.fnend
	.size	ecm_open, .-ecm_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_close, %function
ecm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #2466
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r4, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, r2]
	ldr	r1, [r0, #20]
	tst	r2, #4
	bne	.L13073
.L13056:
	ldr	r6, [r4, #168]
	mov	r3, #0
	mov	r2, #1
	strb	r2, [r4, #172]
	strb	r3, [r4, #173]
	cmp	r6, r3
	beq	.L13055
	ldr	r5, [r6]
	mov	r0, #8
	movw	r7, #:lower16:.LANCHOR2
	ldr	r8, [r1, #24]
	movt	r7, #:upper16:.LANCHOR2
	movw	r2, #378
	strb	r3, [r5, #1]
	ldrb	r1, [r4, #173]	@ zero_extendqisi2
	strh	r1, [r5, #2]	@ unaligned
	strb	r3, [r5, #6]
	strb	r3, [r5, #7]
	str	r0, [r6, #4]
	ldrh	r3, [r7, r2]
	tst	r3, #4
	bne	.L13074
.L13059:
	mov	r1, #2
	mvn	r0, #94
	mov	r3, #0
	mov	r2, #32
	strb	r1, [r4, #172]
	mov	r1, r6
	strb	r0, [r5]
	ldrb	r0, [r4, #148]	@ zero_extendqisi2
	strh	r0, [r5, #4]	@ unaligned
	ldr	r0, [r4, #164]
	str	r3, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L13075
.L13055:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13075:
	movw	r3, #426
	str	r6, [r4, #168]
	ldrh	r3, [r7, r3]
	tst	r3, #4
	beq	.L13055
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC25
	mov	r3, r0
	ldrd	r4, [sp]
	movt	r2, #:upper16:.LC25
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r1, r1, #32
	add	sp, sp, #24
	ldr	r0, .L13076
	b	__dynamic_dev_dbg
.L13073:
	ldr	r1, [r1, #24]
	movw	r2, #:lower16:.LC82
	add	r0, r3, #2448
	movt	r2, #:upper16:.LC82
	ldr	r3, .L13076+4
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r1, [r4, #20]
	b	.L13056
.L13074:
	ldrb	lr, [r4, #173]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC20
	movw	r3, #:lower16:.LC21
	ldr	r1, [r8]
	movt	ip, #:upper16:.LC20
	movw	r2, #:lower16:.LC23
	movt	r3, #:upper16:.LC21
	add	r0, r7, #360
	movt	r2, #:upper16:.LC23
	cmp	lr, #0
	movne	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L13059
.L13077:
	.align	2
.L13076:
	.word	.LANCHOR2+408
	.word	.LANCHOR5-256
	.fnend
	.size	ecm_close, .-ecm_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_open, %function
ecm_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #2490
	movt	r5, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r4, r0
	ldrh	r3, [r5, r3]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r0, #20]
	tst	r3, #4
	bne	.L13096
.L13079:
	ldr	r7, [r4, #148]
	mov	r3, #1
	strb	r3, [r4, #152]
	strb	r3, [r4, #153]
	cmp	r7, #0
	beq	.L13078
	ldr	r6, [r7]
	mov	r3, #0
	mov	r1, #8
	ldr	r8, [r2, #24]
	movw	r2, #2514
	strb	r3, [r6, #1]
	ldrb	r0, [r4, #153]	@ zero_extendqisi2
	strh	r0, [r6, #2]	@ unaligned
	strb	r3, [r6, #6]
	strb	r3, [r6, #7]
	str	r1, [r7, #4]
	ldrh	r3, [r5, r2]
	tst	r3, #4
	bne	.L13097
.L13082:
	mov	r1, #2
	mvn	r0, #94
	mov	r3, #0
	mov	r2, #32
	strb	r1, [r4, #152]
	mov	r1, r7
	strb	r0, [r6]
	ldrb	r0, [r4, #120]	@ zero_extendqisi2
	strh	r0, [r6, #4]	@ unaligned
	ldr	r0, [r4, #144]
	str	r3, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L13098
.L13078:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13098:
	movw	r3, #2538
	str	r7, [r4, #148]
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L13078
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC25
	mov	r3, r0
	ldrd	r4, [sp]
	movt	r2, #:upper16:.LC25
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r1, r1, #32
	add	sp, sp, #24
	ldr	r0, .L13099
	b	__dynamic_dev_dbg
.L13096:
	ldr	r1, [r2, #24]
	movw	r2, #:lower16:.LC82
	movt	r2, #:upper16:.LC82
	ldr	r3, .L13099+4
	ldr	r0, .L13099+8
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r2, [r4, #20]
	b	.L13079
.L13097:
	ldrb	lr, [r4, #153]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC20
	movw	r3, #:lower16:.LC21
	ldr	r1, [r8]
	movt	ip, #:upper16:.LC20
	movw	r2, #:lower16:.LC23
	movt	r3, #:upper16:.LC21
	movt	r2, #:upper16:.LC23
	ldr	r0, .L13099+12
	cmp	lr, #0
	movne	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L13082
.L13100:
	.align	2
.L13099:
	.word	.LANCHOR4+2520
	.word	.LANCHOR5-244
	.word	.LANCHOR4+2472
	.word	.LANCHOR4+2496
	.fnend
	.size	ecm_qc_open, .-ecm_qc_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_close, %function
ecm_qc_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #2562
	movt	r5, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r4, r0
	ldrh	r3, [r5, r3]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r0, #20]
	tst	r3, #4
	bne	.L13119
.L13102:
	ldr	r7, [r4, #148]
	mov	r3, #0
	mov	r2, #1
	strb	r2, [r4, #152]
	strb	r3, [r4, #153]
	cmp	r7, r3
	beq	.L13101
	ldr	r6, [r7]
	mov	r0, #8
	movw	r2, #2514
	ldr	r8, [r1, #24]
	strb	r3, [r6, #1]
	ldrb	r1, [r4, #153]	@ zero_extendqisi2
	strh	r1, [r6, #2]	@ unaligned
	strb	r3, [r6, #6]
	strb	r3, [r6, #7]
	str	r0, [r7, #4]
	ldrh	r3, [r5, r2]
	tst	r3, #4
	bne	.L13120
.L13105:
	mov	r1, #2
	mvn	r0, #94
	mov	r3, #0
	mov	r2, #32
	strb	r1, [r4, #152]
	mov	r1, r7
	strb	r0, [r6]
	ldrb	r0, [r4, #120]	@ zero_extendqisi2
	strh	r0, [r6, #4]	@ unaligned
	ldr	r0, [r4, #144]
	str	r3, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L13121
.L13101:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13121:
	movw	r3, #2538
	str	r7, [r4, #148]
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L13101
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC25
	mov	r3, r0
	ldrd	r4, [sp]
	movt	r2, #:upper16:.LC25
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r1, r1, #32
	add	sp, sp, #24
	ldr	r0, .L13122
	b	__dynamic_dev_dbg
.L13119:
	ldr	r1, [r1, #24]
	movw	r2, #:lower16:.LC82
	add	r0, r5, #2544
	movt	r2, #:upper16:.LC82
	ldr	r3, .L13122+4
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r1, [r4, #20]
	b	.L13102
.L13120:
	ldrb	lr, [r4, #153]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC20
	movw	r3, #:lower16:.LC21
	ldr	r1, [r8]
	movt	ip, #:upper16:.LC20
	movw	r2, #:lower16:.LC23
	movt	r3, #:upper16:.LC21
	movt	r2, #:upper16:.LC23
	ldr	r0, .L13122+8
	cmp	lr, #0
	movne	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L13105
.L13123:
	.align	2
.L13122:
	.word	.LANCHOR4+2520
	.word	.LANCHOR5-232
	.word	.LANCHOR4+2496
	.fnend
	.size	ecm_qc_close, .-ecm_qc_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_notify_complete, %function
ecm_qc_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r5, [r1, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	ip, [r1, #44]
	ldr	r2, [r5, #20]
	cmn	ip, #104
	beq	.L13126
	cmp	ip, #0
	beq	.L13127
	cmn	ip, #108
	beq	.L13126
	movw	r3, #:lower16:.LANCHOR4
	movw	r1, #2586
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r1]
	tst	r3, #4
	bne	.L13167
.L13127:
	cmp	r4, #0
	str	r4, [r5, #148]
	beq	.L13124
	ldrb	r3, [r5, #152]	@ zero_extendqisi2
	ldr	r7, [r2, #24]
	ldr	r6, [r4]
	cmp	r3, #1
	beq	.L13131
	bcc	.L13124
	cmp	r3, #2
	bne	.L13130
	mov	r3, #0
	mov	r1, #8
	mov	r2, #16
	mov	r0, #42
	strb	r0, [r6, #1]
	strb	r3, [r6, #2]
	strb	r3, [r6, #3]
	strb	r1, [r6, #6]
	strb	r3, [r6, #7]
	ldr	r1, [r4]
	str	r2, [r4, #4]
	ldr	r3, [r7]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	movls	r3, #28672
	movtls	r3, 148
	bls	.L13135
	ldr	r0, [r3, #16]
	mov	r2, #0
	mov	r3, #28672
	movt	r2, 6500
	movt	r3, 148
	cmp	r0, #3
	moveq	r3, r2
.L13135:
	movw	r2, #:lower16:.LANCHOR4
	movw	r0, #2610
	str	r3, [r1, #8]
	movt	r2, #:upper16:.LANCHOR4
	str	r3, [r1, #12]
	ldrh	r3, [r2, r0]
	tst	r3, #4
	bne	.L13168
.L13136:
	mov	r3, #0
	strb	r3, [r5, #152]
.L13130:
	mvn	r0, #94
	mov	r3, #0
	mov	r2, #32
	mov	r1, r4
	strb	r0, [r6]
	ldrb	r0, [r5, #120]	@ zero_extendqisi2
	strh	r0, [r6, #4]	@ unaligned
	ldr	r0, [r5, #144]
	str	r3, [r5, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bge	.L13124
	movw	r2, #:lower16:.LANCHOR4
	movw	r3, #2538
	str	r4, [r5, #148]
	movt	r2, #:upper16:.LANCHOR4
	ldrh	r3, [r2, r3]
	tst	r3, #4
	bne	.L13169
.L13124:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L13126:
	mov	r3, #0
	strb	r3, [r5, #152]
	b	.L13127
.L13131:
	mov	r3, #0
	mov	r2, #8
	movw	r0, #:lower16:.LANCHOR4
	strb	r3, [r6, #1]
	ldrb	r1, [r5, #153]	@ zero_extendqisi2
	movt	r0, #:upper16:.LANCHOR4
	strb	r3, [r6, #6]
	strb	r3, [r6, #7]
	movw	r3, #2514
	strh	r1, [r6, #2]	@ unaligned
	str	r2, [r4, #4]
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L13170
.L13133:
	mov	r3, #2
	strb	r3, [r5, #152]
	b	.L13130
.L13167:
	ldr	r1, [r2, #24]
	movw	r2, #:lower16:.LC22
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC22
	ldr	r0, .L13171
	ldr	r1, [r1]
	ldrb	r3, [r3, #1]	@ zero_extendqisi2
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r2, [r5, #20]
	b	.L13127
.L13169:
	ldr	r1, [r7]
	mov	r3, r0
	movw	r2, #:lower16:.LC25
	ldr	r0, .L13171+4
	movt	r2, #:upper16:.LC25
	add	r1, r1, #32
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	__dynamic_dev_dbg
.L13168:
	ldr	r3, [r7]
	ldr	r2, [r3, #20]
	add	r1, r3, #32
	cmp	r2, #2
	movls	r3, #28672
	movtls	r3, 148
	bls	.L13137
	ldr	r0, [r3, #16]
	mov	r2, #0
	mov	r3, #28672
	movt	r2, 6500
	movt	r3, 148
	cmp	r0, #3
	moveq	r3, r2
.L13137:
	movw	r2, #:lower16:.LC24
	ldr	r0, .L13171+8
	movt	r2, #:upper16:.LC24
	bl	__dynamic_dev_dbg
	b	.L13136
.L13170:
	ldrb	lr, [r5, #153]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC20
	movw	r3, #:lower16:.LC21
	ldr	r1, [r7]
	movt	ip, #:upper16:.LC20
	movw	r2, #:lower16:.LC23
	movt	r3, #:upper16:.LC21
	movt	r2, #:upper16:.LC23
	add	r0, r0, #2496
	cmp	lr, #0
	movne	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L13133
.L13172:
	.align	2
.L13171:
	.word	.LANCHOR4+2568
	.word	.LANCHOR4+2520
	.word	.LANCHOR4+2592
	.fnend
	.size	ecm_qc_notify_complete, .-ecm_qc_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_write, %function
ccid_bulk_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #2634
	mov	r5, r2
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR4
	movt	r7, #:upper16:.LANCHOR4
	strd	r8, [sp, #16]
	mov	r9, r1
	ldrh	r3, [r7, r3]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r4, [r0, #124]
	tst	r3, #4
	bne	.L13223
.L13174:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L13175
	movw	r3, #2658
	ldrh	r3, [r7, r3]
	tst	r3, #4
	mvneq	r5, #18
	bne	.L13224
.L13173:
	mov	r0, r5
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13175:
	cmp	r5, #0
	beq	.L13225
	cmp	r5, #524
	bcs	.L13226
	add	r8, r4, #92
	add	r10, r4, #192
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #192]
	mov	fp, r0
	cmp	r10, r6
	beq	.L13227
	mov	r0, r6
	sub	r6, r6, #36
	bl	list_del
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L13180
.L13181:
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L13228
	mov	r3, sp
	ldr	r0, [r6]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r9, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L13189
	mov	r1, r9
	mov	r2, r5
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L13190
	str	r5, [r6, #4]
	ldr	r0, [r4, #104]
	mov	r2, #208
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L13229
.L13188:
	movw	r3, #2754
	ldrh	r3, [r7, r3]
	tst	r3, #4
	beq	.L13173
	movw	r1, #:lower16:.LC1041
	mov	r2, r5
	ldr	r0, .L13237
	movt	r1, #:upper16:.LC1041
	bl	__dynamic_pr_debug
	b	.L13173
.L13189:
	mov	r1, r5
	bl	__memzero
.L13190:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L13192
	movw	r3, #2682
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L13230
.L13193:
	cmp	r6, #0
	mvneq	r5, #18
	beq	.L13188
	ldr	r4, [r4, #104]
	mvn	r5, #18
	ldr	r0, [r6]
	bl	kfree
	mov	r1, r6
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	b	.L13188
.L13224:
	movw	r1, #:lower16:.LC286
	ldr	r2, .L13237+4
	mvn	r5, #18
	movt	r1, #:upper16:.LC286
	ldr	r0, .L13237+8
	bl	__dynamic_pr_debug
	b	.L13173
.L13227:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
.L13180:
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L13202
	mov	r2, sp
	str	r3, [sp, #12]
	add	r1, sp, #24
	bic	fp, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	fp, fp, #63
	add	ip, r4, #172
	ldr	r0, [fp, #12]
	movt	r2, #:upper16:autoremove_wake_function
	str	ip, [sp, #4]
	str	r0, [sp, #16]
	mov	r0, ip
	str	r2, [sp, #20]
	str	r1, [sp, #24]
	str	r1, [sp, #28]
	b	.L13186
.L13232:
	bl	schedule
	ldr	r0, [sp, #4]
.L13186:
	add	r1, sp, #12
	mov	r2, #1
	bl	prepare_to_wait
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #192]
	mov	r1, r0
	cmp	r10, r3
	mov	r0, r3
	sub	r6, r3, #36
	beq	.L13231
	str	r1, [sp]
	bl	list_del
	ldr	r1, [sp]
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	bne	.L13184
.L13183:
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L13203
	ldr	r3, [fp, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L13232
	add	r1, sp, #12
	mov	r5, #65024
	ldr	r0, [sp, #4]
	movt	r5, 65535
	bl	finish_wait
	b	.L13188
.L13229:
	movw	r3, #2706
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L13233
.L13195:
	mov	r3, #1
	mov	r0, r8
	str	r3, [r4, #148]
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	mov	r2, r10
	ldr	r1, [r4, #196]
	add	r0, r6, #36
	bl	__list_add
	mov	r1, r5
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	mov	r9, r0
	cmp	r3, #0
	mvnne	r5, #4
	beq	.L13234
.L13196:
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L13188
.L13223:
	movw	r1, #:lower16:.LC1038
	ldr	r0, .L13237+12
	movt	r1, #:upper16:.LC1038
	bl	__dynamic_pr_debug
	b	.L13174
.L13202:
	mov	r6, #0
	b	.L13181
.L13192:
	mov	r0, r8
	mvn	r5, #13
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	ldr	r1, [r4, #196]
	add	r0, r6, #36
	mov	r2, r10
	bl	__list_add
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L13188
.L13225:
	movw	r0, #:lower16:.LC312
	ldr	r1, .L13237+4
	mvn	r5, #18
	movt	r0, #:upper16:.LC312
	bl	printk
	b	.L13173
.L13234:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #2730
	ldrh	r3, [r7, r3]
	tst	r3, #4
	beq	.L13198
	b	.L13235
.L13199:
	bl	list_del
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L13236
	ldr	fp, [r4, #104]
	ldr	r0, [r5, #-36]
	bl	kfree
	mov	r1, r6
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
.L13198:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #192]
	mov	fp, r0
	cmp	r10, r5
	mov	r0, r5
	sub	r6, r5, #36
	bne	.L13199
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mvn	r5, #18
	b	.L13196
.L13203:
	mov	r6, #0
.L13184:
	add	r1, sp, #12
	ldr	r0, [sp, #4]
	bl	finish_wait
	b	.L13181
.L13231:
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L13183
.L13236:
	mvn	r5, #18
	b	.L13196
.L13233:
	movw	r1, #:lower16:.LC1040
	mov	r2, r0
	ldr	r0, .L13237+16
	movt	r1, #:upper16:.LC1040
	bl	__dynamic_pr_debug
	b	.L13195
.L13235:
	movw	r1, #:lower16:.LC286
	ldr	r2, .L13237+4
	movt	r1, #:upper16:.LC286
	ldr	r0, .L13237+20
	bl	__dynamic_pr_debug
	b	.L13198
.L13230:
	movw	r1, #:lower16:.LC286
	ldr	r2, .L13237+4
	movt	r1, #:upper16:.LC286
	ldr	r0, .L13237+24
	bl	__dynamic_pr_debug
	b	.L13193
.L13228:
	movw	r0, #:lower16:.LC1039
	ldr	r1, .L13237+4
	mvn	r5, #4
	movt	r0, #:upper16:.LC1039
	bl	printk
	b	.L13188
.L13226:
	movw	r0, #:lower16:.LC1000
	mov	r3, r5
	ldr	r1, .L13237+4
	movt	r0, #:upper16:.LC1000
	movw	r2, #523
	bl	printk
	mvn	r5, #11
	b	.L13173
.L13238:
	.align	2
.L13237:
	.word	.LANCHOR4+2736
	.word	.LANCHOR5-216
	.word	.LANCHOR4+2640
	.word	.LANCHOR4+2616
	.word	.LANCHOR4+2688
	.word	.LANCHOR4+2712
	.word	.LANCHOR4+2664
	.fnend
	.size	ccid_bulk_write, .-ccid_bulk_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fmbim_cmd_complete, %function
fmbim_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r8, [r1, #48]
	cmp	r6, #0
	beq	.L13260
	ldr	r2, [r1, #44]
	cmp	r2, #0
	blt	.L13261
	movw	r7, #:lower16:.LANCHOR4
	movw	r3, #2778
	movt	r7, #:upper16:.LANCHOR4
	mov	r5, r1
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L13262
.L13242:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L13248
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L13263
.L13243:
	mov	r1, #32
	mov	r0, r8
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	strne	r8, [r4, #4]
	beq	.L13264
.L13244:
	movw	r3, #2802
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L13265
.L13246:
	ldr	r0, [r4], #8
	mov	r2, r8
	ldr	r1, [r5]
	add	r5, r6, #204
	bl	memcpy
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r0, r4
	add	r2, r6, #208
	ldr	r1, [r6, #212]
	bl	__list_add
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r3, #2826
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L13266
.L13247:
	add	r0, r6, #108
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
.L13248:
	mov	r4, #16
	b	.L13243
.L13263:
	mvn	r4, #11
	b	.L13244
.L13264:
	mov	r0, r4
	mvn	r4, #11
	bl	kfree
	b	.L13244
.L13265:
	movw	r1, #:lower16:.LC669
	mov	r3, r8
	ldr	r2, .L13267
	movt	r1, #:upper16:.LC669
	ldr	r0, .L13267+4
	bl	__dynamic_pr_debug
	b	.L13246
.L13266:
	movw	r1, #:lower16:.LC671
	ldr	r2, .L13267
	movt	r1, #:upper16:.LC671
	ldr	r0, .L13267+8
	bl	__dynamic_pr_debug
	b	.L13247
.L13262:
	ldrb	ip, [r6, #136]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC157
	mov	r3, r6
	movt	r1, #:upper16:.LC157
	ldr	r2, .L13267
	ldr	r0, .L13267+12
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L13242
.L13260:
	ldr	r1, .L13267
	movw	r0, #:lower16:.LC1042
	movt	r0, #:upper16:.LC1042
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L13261:
	ldr	r1, .L13267
	movw	r0, #:lower16:.LC1043
	movt	r0, #:upper16:.LC1043
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L13268:
	.align	2
.L13267:
	.word	.LANCHOR5-200
	.word	.LANCHOR4+2784
	.word	.LANCHOR4+2808
	.word	.LANCHOR4+2760
	.fnend
	.size	fmbim_cmd_complete, .-fmbim_cmd_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_write, %function
ffs_epfile_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L13315
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	mov	r8, r2
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r3, #-14]
	.pad #20
	sub	sp, sp, #20
	ldr	r4, [r0, #124]
	str	r1, [sp, #12]
	tst	r2, #4
	ldr	fp, [r4, #36]
	bne	.L13309
.L13270:
	ldr	r5, [r4, #32]
	cmp	r5, #0
	bne	.L13291
	ldr	r3, [r4, #36]
	ldr	r3, [r3, #92]
	cmp	r3, #2
	bne	.L13272
	ldr	r6, [r4, #40]
	cmp	r6, #0
	beq	.L13293
.L13274:
	ldrb	r10, [r4, #53]	@ zero_extendqisi2
	cmp	r10, #0
	bne	.L13277
	ldrb	r3, [r4, #54]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L13310
.L13278:
	ldr	r3, [r7, #32]
	mov	r0, r4
	tst	r3, #2048
	beq	.L13279
	bl	mutex_trylock
	cmp	r0, #0
	beq	.L13298
.L13282:
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #40]
	cmp	r3, r6
	bne	.L13311
	cmp	r10, #0
	beq	.L13312
	ldr	r7, [r6, #4]
	movw	r3, #:lower16:ffs_epfile_io_complete
	mov	r9, fp
	movt	r3, #:upper16:ffs_epfile_io_complete
	mov	r0, #0
	mov	r2, #32
	stm	r7, {r5, r8}
	mov	r1, r7
	str	r3, [r7, #28]
	str	r0, [r9, #52]!
	str	r9, [r7, #32]
	ldr	r0, [r6]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r8, r0
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
	cmp	r8, #0
	blt	.L13299
	mov	r0, r9
	bl	wait_for_completion_interruptible
	cmp	r0, #0
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bne	.L13313
	bl	_raw_spin_lock_irq
	ldr	r0, [r4, #36]
	ldr	r3, [r4, #40]
	add	r0, r0, #24
	cmp	r6, r3
	ldreq	r9, [r6, #24]
	mvnne	r9, #18
	bl	_raw_spin_unlock_irq
.L13285:
	mov	r0, r4
	bl	mutex_unlock
.L13276:
	mov	r0, r5
	bl	kfree
.L13269:
	mov	r0, r9
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13277:
	cmp	r5, #0
	bne	.L13278
	movw	r1, #32976
	mov	r0, r8
	bl	__kmalloc
	subs	r5, r0, #0
	beq	.L13296
	mov	r2, r8
	ldr	r1, [sp, #12]
	bl	__copy_from_user
	cmp	r0, #0
	beq	.L13278
	mvn	r9, #13
	b	.L13276
.L13279:
	bl	mutex_lock_interruptible
	subs	r9, r0, #0
	bne	.L13276
	b	.L13282
.L13293:
	mov	r5, r6
.L13273:
	ldr	r3, [r7, #32]
	tst	r3, #2048
	mvnne	r9, #10
	mvneq	r9, #18
	b	.L13276
.L13311:
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
	mov	r0, r4
	bl	mutex_unlock
	ldr	r3, [r4, #36]
	ldr	r3, [r3, #92]
	cmp	r3, #2
	beq	.L13275
.L13272:
	movw	r0, #:lower16:.LC33
	movw	r1, #785
	movt	r0, #:upper16:.LC33
	mvn	r9, #18
	bl	warn_slowpath_null
	b	.L13276
.L13309:
	mov	ip, #0
	movw	r1, #:lower16:.LC590
	ldr	r2, .L13315+4
	sub	r0, r3, #32
	movt	r1, #:upper16:.LC590
	mov	r3, r8
	stm	sp, {r8, ip}
	bl	__dynamic_pr_debug
	b	.L13270
.L13275:
	ldr	r6, [r4, #40]
	cmp	r6, #0
	bne	.L13274
	b	.L13273
.L13296:
	mvn	r9, #11
	b	.L13269
.L13299:
	mvn	r9, #4
	b	.L13285
.L13312:
	ldr	r0, [r6]
	cmp	r0, #0
	beq	.L13314
	ldr	r3, [r0, #8]
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
.L13290:
	ldr	r0, [r4, #36]
	mvn	r9, #73
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
	b	.L13285
.L13313:
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #40]
	cmp	r6, r3
	bne	.L13287
	ldr	r0, [r6]
	mov	r1, r7
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L13287:
	ldr	r0, [r4, #36]
	mvn	r9, #3
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
	b	.L13285
.L13298:
	mvn	r9, #10
	b	.L13276
.L13291:
	mvn	r9, #18
	b	.L13269
.L13310:
	mvn	r9, #21
	b	.L13276
.L13314:
	movw	r0, #:lower16:.LC33
	mov	r1, #860
	movt	r0, #:upper16:.LC33
	bl	warn_slowpath_null
	b	.L13290
.L13316:
	.align	2
.L13315:
	.word	.LANCHOR4-2656
	.word	.LANCHOR5-3624
	.fnend
	.size	ffs_epfile_write, .-ffs_epfile_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_command_complete, %function
rmnet_mux_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r8, [r6, #84]
	cmp	r2, #0
	blt	.L13331
	movw	r3, #:lower16:kmalloc_caches
	mov	r5, r1
	ldr	r7, [r1, #48]
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L13325
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L13320
.L13319:
	movw	r1, #32800
	mov	r0, r7
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	beq	.L13332
	add	r8, r6, #368
	str	r7, [r4, #4]
	mov	r0, r8
	bl	_raw_spin_lock
	ldr	r3, [r6, #356]
	cmp	r3, #0
	bne	.L13333
	mov	r0, r8
	bl	_raw_spin_unlock
	ldr	r0, [r4]
	bl	kfree
	mov	r0, r4
	bl	kfree
	ldr	r3, [r6, #424]
	ldr	r1, .L13335
	ldr	r0, .L13335+4
	add	r3, r3, #1
	str	r3, [r6, #424]
	bl	___ratelimit
	cmp	r0, #0
	bne	.L13334
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13325:
	mov	r4, #16
	b	.L13319
.L13331:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC1044
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC1044
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
.L13333:
	ldr	r0, [r4], #8
	mov	r2, r7
	ldr	r1, [r5]
	bl	memcpy
	add	r2, r6, #316
	ldr	r1, [r6, #320]
	mov	r0, r4
	bl	__list_add
	ldr	r3, [r6, #336]
	mov	r0, r8
	add	r3, r3, #1
	str	r3, [r6, #336]
	bl	_raw_spin_unlock
	ldrd	r4, [sp]
	add	r0, r6, #324
	mov	r3, #0
	ldrd	r6, [sp, #8]
	mov	r2, #1
	mov	r1, #3
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
.L13332:
	mov	r0, r4
	bl	kfree
.L13320:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC1045
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC1045
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
.L13334:
	movw	r0, #:lower16:.LC1046
	ldr	r2, [r6, #424]
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC1046
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L13335
	b	printk
.L13336:
	.align	2
.L13335:
	.word	.LANCHOR5-180
	.word	.LANCHOR0+2724
	.fnend
	.size	rmnet_mux_command_complete, .-rmnet_mux_command_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	accessory_function_ctrlrequest, %function
accessory_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r3, #:lower16:.LANCHOR1
	mov	r5, r1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r0, [r2]	@ zero_extendqisi2
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	ldr	r4, [r3, #2488]
	cmp	r0, #64
	beq	.L13396
	cmp	r1, #51
	cmpeq	r0, #192
	bne	.L13380
	ldr	r3, [r5, #4]
	mov	r6, #2
	mov	r1, #256
	add	r0, r4, #101
	ldr	r3, [r3]
	strh	r6, [r3]	@ movhi
	bl	__memzero
	add	r0, r4, #356
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r4, #612
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r4, #868
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r4, #1120
	mov	r1, #256
	add	r0, r0, #5
	bl	__memzero
	add	r0, r4, #1376
	mov	r1, #256
	add	r0, r0, #5
	bl	__memzero
	mov	r2, #0
	mov	r3, r6
	str	r2, [r4, #1644]
	str	r2, [r4, #1648]
.L13340:
	ldr	r1, [r5, #4]
	mov	r2, #32
	ldrb	r0, [r1, #26]	@ zero_extendqisi2
	bfc	r0, #1, #1
	strb	r0, [r1, #26]
	ldr	r1, [r5, #4]
	str	r3, [r1, #4]
	ldr	r3, [r5]
	ldr	r1, [r5, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L13397
.L13337:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13396:
	cmp	r1, #53
	beq	.L13398
	cmp	r1, #52
	ldrh	r7, [r2, #4]	@ unaligned
	ldrh	r6, [r2, #6]	@ unaligned
	beq	.L13399
	cmp	r1, #58
	cmpeq	r7, #0
	ldrh	r8, [r2, #2]	@ unaligned
	moveq	r3, #1
	movne	r3, #0
	cmp	r6, #0
	movne	r3, #0
	cmp	r3, #0
	movne	r3, #0
	strne	r8, [r4, #1648]
	bne	.L13340
	cmp	r1, #54
	beq	.L13400
	cmp	r1, #55
	beq	.L13401
	cmp	r1, #56
	beq	.L13402
	cmp	r1, #57
	bne	.L13380
	add	r9, r4, #88
	add	r4, r4, #1760
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r4, #8]
	add	r4, r4, #8
	cmp	r4, r7
	bne	.L13377
	b	.L13374
.L13403:
	ldr	r7, [r7]
	cmp	r4, r7
	beq	.L13374
.L13377:
	ldr	r3, [r7, #16]
	cmp	r8, r3
	bne	.L13403
	mov	r1, r0
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L13395
	ldr	r1, [r5, #4]
	movw	r2, #:lower16:acc_complete_send_hid_event
	mov	r3, r6
	movt	r2, #:upper16:acc_complete_send_hid_event
	str	r7, [r1, #32]
	ldr	r1, [r5, #4]
	str	r2, [r1, #28]
	b	.L13340
.L13397:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC1047
	movt	r1, #:upper16:.LC1047
	ldr	r2, .L13410
	add	r0, r0, #32
	bl	dev_err
	b	.L13337
.L13399:
	str	r7, [r4, #1640]
	ldr	r1, [r5]
	movw	r2, #:lower16:acc_complete_set_string
	movt	r2, #:upper16:acc_complete_set_string
	mov	r3, r6
	ldr	r1, [r1, #4]
	str	r4, [r1]
	ldr	r1, [r5, #4]
	str	r2, [r1, #28]
	b	.L13340
.L13380:
.L13345:
	mvn	r4, #94
	b	.L13337
.L13398:
	mov	r3, #1
	mov	r0, #200
	str	r3, [r4, #1644]
	bl	msecs_to_jiffies
	movw	r1, #:lower16:system_wq
	add	r2, r4, #1696
	movt	r1, #:upper16:system_wq
	mov	r3, r0
	add	r2, r2, #4
	mov	r0, #4
	ldr	r1, [r1]
	bl	queue_delayed_work_on
	mov	r3, #0
	b	.L13340
.L13374:
	mov	r1, r0
	mov	r0, r9
	mvn	r4, #21
	bl	_raw_spin_unlock_irqrestore
	b	.L13337
.L13400:
	cmp	r7, #0
	beq	.L13395
	add	r9, r4, #88
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1768]
	add	r1, r4, #1760
	mov	r10, r0
	add	r1, r1, #8
	cmp	r1, r3
	mov	r6, r3
	bne	.L13349
	b	.L13346
.L13404:
	ldr	r3, [r3]
	cmp	r1, r3
	mov	r6, r3
	beq	.L13346
.L13349:
	ldr	r2, [r3, #16]
	cmp	r8, r2
	bne	.L13404
	cmp	r3, #0
	beq	.L13346
.L13350:
	mov	r0, r6
	bl	__list_del_entry
	add	r1, r4, #1776
	mov	r0, r6
	ldr	r2, [r4, #1784]
	add	r1, r1, #8
	bl	__list_add
.L13351:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L13378
	mov	r2, #32
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L13356
.L13355:
	movw	r1, #32800
	mov	r0, r7
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r6, #20]
	beq	.L13405
	mov	r1, r4
	mov	r0, r6
	str	r4, [r6, #12]
	str	r8, [r6, #16]
	str	r7, [r6, #24]
	ldr	r2, [r1, #1776]!
	bl	__list_add
	mov	r1, r10
	mov	r0, r9
.L13394:
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:system_wq
	add	r2, r4, #1744
	movt	r3, #:upper16:system_wq
	add	r2, r2, #8
	ldr	r1, [r3]
	mov	r0, #4
	bl	queue_work_on
	mov	r3, #0
	b	.L13340
.L13401:
	add	r6, r4, #88
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1768]
	add	r1, r4, #1760
	mov	r7, r0
	add	r1, r1, #8
	cmp	r1, r3
	mov	r9, r3
	bne	.L13362
	b	.L13359
.L13406:
	ldr	r3, [r3]
	cmp	r1, r3
	mov	r9, r3
	beq	.L13359
.L13362:
	ldr	r2, [r3, #16]
	cmp	r8, r2
	bne	.L13406
	cmp	r3, #0
	beq	.L13359
.L13363:
	mov	r0, r9
	bl	__list_del_entry
	add	r1, r4, #1776
	mov	r0, r9
	ldr	r2, [r4, #1784]
	add	r1, r1, #8
	bl	__list_add
	mov	r1, r7
	mov	r0, r6
	b	.L13394
.L13402:
	add	r10, r4, #88
	add	r4, r4, #1776
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r4]
	mov	r1, r0
	cmp	r4, r9
	bne	.L13372
	b	.L13369
.L13407:
	ldr	r9, [r9]
	cmp	r4, r9
	beq	.L13369
.L13372:
	ldr	r3, [r9, #16]
	cmp	r8, r3
	bne	.L13407
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	cmp	r9, #0
	beq	.L13395
	ldr	r3, [r9, #28]
	cmp	r7, r3
	bne	.L13395
	ldr	r3, [r9, #24]
	add	r7, r6, r7
	cmp	r7, r3
	bgt	.L13395
	ldr	r1, [r5, #4]
	movw	r2, #:lower16:acc_complete_set_hid_report_desc
	mov	r3, r6
	movt	r2, #:upper16:acc_complete_set_hid_report_desc
	str	r9, [r1, #32]
	ldr	r1, [r5, #4]
	str	r2, [r1, #28]
	b	.L13340
.L13378:
	mov	r6, #16
	b	.L13355
.L13369:
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
.L13395:
	mvn	r4, #21
	b	.L13337
.L13346:
	ldr	r6, [r4, #1776]
	add	r2, r4, #1776
	cmp	r2, r6
	bne	.L13354
	b	.L13351
.L13408:
	ldr	r6, [r6]
	cmp	r2, r6
	beq	.L13351
.L13354:
	ldr	r3, [r6, #16]
	cmp	r8, r3
	bne	.L13408
	cmp	r6, #0
	beq	.L13351
	b	.L13350
.L13359:
	ldr	r3, [r4, #1776]
	add	r1, r4, #1776
	cmp	r1, r3
	mov	r9, r3
	bne	.L13367
	b	.L13364
.L13409:
	ldr	r3, [r3]
	cmp	r1, r3
	mov	r9, r3
	beq	.L13364
.L13367:
	ldr	r2, [r3, #16]
	cmp	r8, r2
	bne	.L13409
	cmp	r3, #0
	bne	.L13363
.L13364:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mvn	r4, #21
	b	.L13337
.L13405:
	mov	r0, r6
	bl	kfree
.L13356:
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	mvn	r4, #11
	b	.L13337
.L13411:
	.align	2
.L13410:
	.word	.LANCHOR5-152
	.fnend
	.size	accessory_function_ctrlrequest, .-accessory_function_ctrlrequest
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_send_cpkt_tomodem, %function
grmnet_ctrl_smd_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #5
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	ip, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bhi	.L13413
	movw	r6, #:lower16:.LANCHOR1
	mov	r3, #84
	movt	r6, #:upper16:.LANCHOR1
	mla	r3, r3, r0, r6
	ldr	r4, [r3, #512]
	cmp	r4, #0
	beq	.L13413
	movw	r3, #:lower16:kmalloc_caches
	mov	r8, r1
	movt	r3, #:upper16:kmalloc_caches
	mov	r5, r2
	ldr	r7, [r3, #24]
	cmp	r7, #0
	beq	.L13414
	mov	r0, r7
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r7, r0, #0
	beq	.L13417
	mov	r1, #32
	mov	r0, r5
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r7]
	beq	.L13421
	cmn	r7, #4096
	str	r5, [r7, #4]
	bhi	.L13417
.L13418:
	mov	r1, r8
	mov	r2, r5
	add	r8, r4, #108
	bl	memcpy
	str	r5, [r7, #4]
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	ldr	r0, [r4, #8]
	ands	r5, r0, #1
	beq	.L13438
	add	r0, r7, #8
	add	r2, r4, #40
	ldr	r1, [r4, #44]
	bl	__list_add
	ldr	r1, [r6, #3484]
	add	r2, r4, #68
	mov	r0, #4
	bl	queue_work_on
	mov	r1, r9
	mov	r0, r8
	mov	r5, #0
	bl	_raw_spin_unlock_irqrestore
.L13412:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13414:
	mov	r1, #32
	mov	r0, r2
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r7, #16]
	strne	r5, [r7, #20]
	movne	r7, #16
	bne	.L13418
	mov	r7, #16
.L13421:
	mov	r0, r7
	bl	kfree
.L13417:
	movw	r0, #:lower16:.LC668
	ldr	r1, .L13439
	mvn	r5, #11
	movt	r0, #:upper16:.LC668
	bl	printk
	b	.L13412
.L13438:
	ldr	r0, [r7]
	bl	kfree
	mov	r0, r7
	bl	kfree
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L13412
.L13413:
	movw	r0, #:lower16:.LC123
	mov	r2, ip
	ldr	r1, .L13439
	movt	r0, #:upper16:.LC123
	mvn	r5, #18
	bl	printk
	b	.L13412
.L13440:
	.align	2
.L13439:
	.word	.LANCHOR5-136
	.fnend
	.size	grmnet_ctrl_smd_send_cpkt_tomodem, .-grmnet_ctrl_smd_send_cpkt_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_send_cpkt_response, %function
frmnet_send_cpkt_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	cmpne	r0, #0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #8
	sub	sp, sp, #8
	beq	.L13487
	movw	r3, #:lower16:kmalloc_caches
	mov	r5, r2
	movt	r3, #:upper16:kmalloc_caches
	ldr	r4, [r3, #24]
	cmp	r4, #0
	beq	.L13444
	mov	r0, r4
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L13446
	mov	r1, #32
	mov	r0, r5
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	beq	.L13461
	cmn	r4, #4096
	str	r5, [r4, #4]
	bhi	.L13446
.L13448:
	mov	r1, r7
	mov	r2, r5
	movw	r7, #:lower16:.LANCHOR4
	bl	memcpy
	movt	r7, #:upper16:.LANCHOR4
	movw	r3, #2850
	str	r5, [r4, #4]
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L13488
.L13449:
	ldr	r3, [r6, #120]
	cmp	r3, #0
	beq	.L13450
	ldr	r3, [r6, #124]
	cmp	r3, #0
	bne	.L13451
.L13450:
	ldr	r0, [r4]
	bl	kfree
	mov	r0, r4
	bl	kfree
	mov	r0, #0
.L13441:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13444:
	mov	r1, #32
	mov	r0, r2
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4, #16]
	strne	r5, [r4, #20]
	movne	r4, #16
	bne	.L13448
	mov	r4, #16
.L13461:
	mov	r0, r4
	bl	kfree
.L13446:
	movw	r0, #:lower16:.LC668
	ldr	r1, .L13492
	movt	r0, #:upper16:.LC668
	bl	printk
	mvn	r0, #11
	b	.L13441
.L13451:
	add	r5, r6, #132
	add	r8, r6, #144
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r2, r8
	ldr	r1, [r6, #148]
	add	r0, r4, #8
	bl	__list_add
	mov	r1, r9
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #2874
	ldr	r9, [r6, #140]
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L13489
.L13452:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #120]
	cmp	r9, #0
	moveq	r4, #1
	clz	r3, r3
	lsr	r3, r3, #5
	movne	r4, r3
	cmp	r4, #0
	bne	.L13453
	ldr	r3, [r9]
	cmp	r3, #0
	beq	.L13453
	ldr	r3, [r6, #152]
	add	r3, r3, #1
	cmp	r3, #1
	str	r3, [r6, #152]
	beq	.L13455
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	b	.L13441
.L13453:
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L13441
.L13488:
	ldrb	ip, [r6, #116]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC157
	mov	r3, r6
	movt	r1, #:upper16:.LC157
	ldr	r2, .L13492
	add	r0, r7, #2832
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L13449
.L13455:
	ldr	r2, [r9]
	mvn	ip, #94
	mov	r1, r0
	mov	r0, r5
	strb	ip, [r2]
	strb	r3, [r2, #1]
	strb	r4, [r2, #2]
	strb	r4, [r2, #3]
	ldrh	r3, [r6, #112]
	strh	r3, [r2, #4]	@ unaligned
	strb	r4, [r2, #6]
	strb	r4, [r2, #7]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r0, [r6, #136]
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bne	.L13456
.L13486:
	mov	r0, #0
	b	.L13441
.L13489:
	ldrb	ip, [r6, #116]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC1049
	mov	r3, r6
	movt	r1, #:upper16:.LC1049
	ldr	r2, .L13492+4
	ldr	r0, .L13492+8
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L13452
.L13456:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r6, #144]
	mov	r10, r0
	cmp	r8, r9
	beq	.L13457
	ldr	r3, [r6, #152]
	cmp	r3, #0
	bne	.L13490
	movw	r2, #2898
	ldrh	r2, [r7, r2]
	tst	r2, #4
	bne	.L13491
.L13459:
	mov	r1, r10
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	b	.L13486
.L13490:
	sub	r3, r3, #1
	mov	r0, r9
	str	r3, [r6, #152]
	sub	r6, r9, #8
	bl	list_del
	ldr	r0, [r9, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
.L13457:
	mov	r1, r10
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #2922
	ldrh	r3, [r7, r3]
	tst	r3, #4
	beq	.L13486
	movw	r1, #:lower16:.LC161
	mov	r2, r4
	ldr	r0, .L13492+12
	movt	r1, #:upper16:.LC161
	bl	__dynamic_pr_debug
	mov	r0, #0
	b	.L13441
.L13491:
	movw	r1, #:lower16:.LC159
	ldr	r2, .L13492+4
	movt	r1, #:upper16:.LC159
	ldr	r0, .L13492+16
	bl	__dynamic_pr_debug
	b	.L13459
.L13487:
	movw	r0, #:lower16:.LC1048
	mov	r3, r1
	ldr	r1, .L13492
	mov	r2, r6
	movt	r0, #:upper16:.LC1048
	bl	printk
	mvn	r0, #18
	b	.L13441
.L13493:
	.align	2
.L13492:
	.word	.LANCHOR5-100
	.word	.LANCHOR5-72
	.word	.LANCHOR4+2856
	.word	.LANCHOR4+2904
	.word	.LANCHOR4+2880
	.fnend
	.size	frmnet_send_cpkt_response, .-frmnet_send_cpkt_response
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_capture_work, %function
f_audio_capture_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r4, #:lower16:.LANCHOR0
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	movt	r4, #:upper16:.LANCHOR0
	strd	r8, [sp, #16]
	mov	r6, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r3, #24]
	.pad #28
	sub	sp, sp, #28
	ldr	r5, [r4, #1236]
	cmp	r3, #0
	beq	.L13506
	mov	r0, r3
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	str	r3, [sp, #8]
	beq	.L13511
.L13495:
	mov	r0, r5
	movw	r1, #32800
	bl	__kmalloc
	ldr	r3, [sp, #8]
	cmp	r0, #0
	mov	r8, r0
	str	r0, [r3]
	beq	.L13512
.L13496:
	ldr	r3, [r4, #1236]
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r9, [r6, #-68]
	str	r3, [sp, #12]
	ldrb	r3, [r5, #2216]	@ zero_extendqisi2
	ldr	fp, [r9, #212]
	cmp	r3, #0
	beq	.L13513
.L13497:
	mov	r3, sp
	movw	r10, #:lower16:.LANCHOR4
	bic	r7, r3, #8128
	ldr	r3, [sp, #12]
	movt	r10, #:upper16:.LANCHOR4
	bic	r7, r7, #63
	lsl	r3, r3, #3
	str	r3, [sp, #20]
.L13504:
	ldr	r3, [fp, #160]
	mov	r2, #146
	movw	r1, #16704
	mov	r0, r9
	ldr	r3, [r3]
	cmp	r3, #7
	mvn	r2, r2, lsr r3
	bhi	.L13500
	ands	r2, r2, #1
	bne	.L13500
	bl	snd_pcm_kernel_ioctl
	cmp	r0, #0
	blt	.L13514
.L13500:
	ldr	r3, .L13517
	mov	ip, #0
	mov	r1, r8
	ldr	r5, [fp, #80]
	mov	r0, r9
	ldr	lr, [sp, #20]
	ldrh	r2, [r3]
	udiv	r5, lr, r5
	ldr	lr, [r7, #8]
	str	ip, [r7, #8]
	tst	r2, #4
	str	lr, [sp, #16]
	bne	.L13515
	mov	r2, r5
	bl	snd_pcm_lib_read
	cmp	r5, r0
	mov	r2, r0
	bne	.L13502
.L13503:
	mov	r3, sp
	ldr	r2, [sp, #16]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	str	r2, [r3, #8]
.L13499:
	movw	r3, #2970
	ldrh	r3, [r10, r3]
	tst	r3, #4
	bne	.L13516
.L13505:
	sub	r4, r6, #8
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #8]
	mov	r5, r0
	add	r2, r6, #16
	ldr	r1, [r6, #20]
	add	r0, r3, #8
	bl	__list_add
	mov	r1, r5
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L13506:
	mov	r3, #16
	str	r3, [sp, #8]
	b	.L13495
.L13513:
	bl	gaudio_open_streams
	subs	r2, r0, #0
	moveq	r3, #1
	strbeq	r3, [r5, #2216]
	beq	.L13497
	movw	r0, #:lower16:.LC1050
	ldr	r1, .L13517+4
	movw	r10, #:lower16:.LANCHOR4
	movt	r0, #:upper16:.LC1050
	movt	r10, #:upper16:.LANCHOR4
	bl	printk
	b	.L13499
.L13516:
	movw	r1, #:lower16:.LC1053
	ldr	r2, .L13517+8
	movt	r1, #:upper16:.LC1053
	ldr	r3, [r4, #1236]
	ldr	r0, .L13517+12
	bl	__dynamic_pr_debug
	b	.L13505
.L13515:
	ldr	r2, [sp, #12]
	movw	r1, #:lower16:.LC1051
	sub	r0, r3, #18
	movt	r1, #:upper16:.LC1051
	mov	r3, r5
	str	r2, [sp]
	ldr	r2, .L13517+4
	bl	__dynamic_pr_debug
	mov	r2, r5
	mov	r1, r8
	mov	r0, r9
	bl	snd_pcm_lib_read
	cmp	r5, r0
	mov	r2, r0
	beq	.L13503
.L13502:
	movw	r0, #:lower16:.LC1052
	ldr	r1, .L13517+4
	movt	r0, #:upper16:.LC1052
	bl	printk
	ldr	r3, [sp, #16]
	str	r3, [r7, #8]
	b	.L13504
.L13514:
	mov	r2, r0
	movw	r0, #:lower16:.LC751
	ldr	r1, .L13517+4
	movt	r0, #:upper16:.LC751
	bl	printk
	movw	r0, #:lower16:.LC762
	ldr	r1, .L13517+8
	movt	r0, #:upper16:.LC762
	bl	printk
	b	.L13499
.L13512:
	movw	r0, #:lower16:.LC40
	ldr	r1, .L13517+16
	movt	r0, #:upper16:.LC40
	bl	printk
	mvn	r3, #11
	ldr	r0, [sp, #8]
	str	r3, [sp, #8]
	bl	kfree
	mvn	r3, #0
	ldr	r8, [r3, #-11]
	b	.L13496
.L13511:
	mvn	r3, #11
	movw	r0, #:lower16:.LC39
	ldr	r1, .L13517+16
	movt	r0, #:upper16:.LC39
	str	r3, [sp, #8]
	bl	printk
	mvn	r3, #0
	ldr	r8, [r3, #-11]
	b	.L13496
.L13518:
	.align	2
.L13517:
	.word	.LANCHOR4+2946
	.word	.LANCHOR5-40
	.word	.LANCHOR5-24
	.word	.LANCHOR4+2952
	.word	.LANCHOR3+96
	.fnend
	.size	f_audio_capture_work, .-f_audio_capture_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_write, %function
mbim_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #2994
	mov	r5, r2
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR4
	movt	r6, #:upper16:.LANCHOR4
	strd	r8, [sp, #16]
	mov	r8, r1
	ldrh	r3, [r6, r3]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r4, [r0, #124]
	tst	r3, #4
	bne	.L13572
.L13520:
	cmp	r4, #0
	beq	.L13573
	cmp	r5, #0
	beq	.L13574
	cmp	r5, #4096
	bhi	.L13575
	add	r7, r4, #104
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r7]
	add	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L13525
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L13576
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L13547
	mov	r2, #16
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r9, r0, #0
	beq	.L13577
.L13528:
	mov	r1, #208
	mov	r0, r5
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r9]
	strne	r5, [r9, #4]
	beq	.L13578
.L13529:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r8, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L13579
	mov	r1, r5
	bl	__memzero
	mov	r2, r5
.L13531:
	cmp	r2, #0
	bne	.L13580
	movw	r3, #3018
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L13581
.L13533:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L13582
	ldrb	r3, [r4, #164]	@ zero_extendqisi2
	cmp	r3, #3
	bne	.L13583
	add	r8, r4, #204
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r10, r0
	add	r2, r4, #216
	ldr	r1, [r4, #220]
	add	r0, r9, #8
	bl	__list_add
	mov	r1, r10
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #3042
	ldr	r10, [r4, #160]
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L13584
.L13537:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #88]
	mov	fp, r0
	cmp	r3, #0
	beq	.L13585
	cmp	r10, #0
	beq	.L13586
	ldr	r3, [r10]
	cmp	r3, #0
	beq	.L13587
	add	r9, r4, #168
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r9]
	add	r3, r3, #1
	strex	r2, r3, [r9]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	beq	.L13541
	movw	r3, #3066
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L13588
.L13542:
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
.L13535:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r3, #3114
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L13589
.L13544:
	mov	r0, r5
.L13519:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13579:
	mov	r2, r5
	mov	r1, r8
	bl	__copy_from_user
	mov	r2, r0
	b	.L13531
.L13547:
	mov	r9, #16
	b	.L13528
.L13541:
	ldr	r2, [r10]
	mov	ip, #0
	mvn	lr, #94
	mov	r0, #8
	mov	r1, fp
	str	r0, [r10, #4]
	mov	r0, r8
	strb	lr, [r2]
	strb	r3, [r2, #1]
	strb	ip, [r2, #2]
	strb	ip, [r2, #3]
	ldrb	r3, [r4, #196]	@ zero_extendqisi2
	strh	r3, [r2, #4]	@ unaligned
	strb	ip, [r2, #6]
	strb	ip, [r2, #7]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #156]
	mov	r2, #32
	mov	r1, r10
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L13590
.L13543:
	movw	r3, #3090
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L13535
	movw	r1, #:lower16:.LC1065
	ldr	r2, .L13591
	movt	r1, #:upper16:.LC1065
	ldr	r0, .L13591+4
	bl	__dynamic_pr_debug
	b	.L13535
.L13577:
	mvn	r3, #0
	mvn	r9, #11
	ldr	r0, [r3, #-11]
	b	.L13529
.L13578:
	mov	r0, r9
	mvn	r9, #11
	bl	kfree
	mvn	r3, #0
	ldr	r0, [r3, #-11]
	b	.L13529
.L13572:
	movw	r2, #:lower16:.LANCHOR5
	movw	r1, #:lower16:.LC317
	movt	r2, #:upper16:.LANCHOR5
	movt	r1, #:upper16:.LC317
	mov	r3, r5
	add	r0, r6, #2976
	bl	__dynamic_pr_debug
	b	.L13520
.L13589:
	movw	r2, #:lower16:.LANCHOR5
	movw	r1, #:lower16:.LC326
	ldr	r0, .L13591+8
	movt	r2, #:upper16:.LANCHOR5
	movt	r1, #:upper16:.LC326
	mov	r3, r5
	bl	__dynamic_pr_debug
	b	.L13544
.L13581:
	ldrb	ip, [r4, #136]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC1056
	mov	r3, r4
	movt	r1, #:upper16:.LC1056
	ldr	r2, .L13591+12
	ldr	r0, .L13591+16
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L13533
.L13584:
	ldrb	ip, [r4, #136]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC1059
	mov	r3, r4
	movt	r1, #:upper16:.LC1059
	ldr	r2, .L13591
	ldr	r0, .L13591+20
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L13537
.L13588:
	movw	r1, #:lower16:.LC1063
	ldr	r2, .L13591
	movt	r1, #:upper16:.LC1063
	ldr	r3, [r4, #168]
	ldr	r0, .L13591+24
	bl	__dynamic_pr_debug
	b	.L13542
.L13574:
	movw	r1, #:lower16:.LANCHOR5
	movw	r0, #:lower16:.LC312
	movt	r1, #:upper16:.LANCHOR5
	movt	r0, #:upper16:.LC312
	bl	printk
	mvn	r0, #18
	b	.L13519
.L13580:
	movw	r1, #:lower16:.LANCHOR5
	movw	r0, #:lower16:.LC315
	movt	r1, #:upper16:.LANCHOR5
	movt	r0, #:upper16:.LC315
	bl	printk
	mov	r0, r9
	bl	mbim_free_ctrl_pkt.part.5
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #0
	b	.L13519
.L13582:
	movw	r0, #:lower16:.LC1057
	mov	r2, r4
	ldr	r1, .L13591+12
	movt	r0, #:upper16:.LC1057
	bl	printk
	mov	r0, r9
	bl	mbim_free_ctrl_pkt.part.5
	b	.L13535
.L13585:
	movw	r0, #:lower16:.LC1060
	mov	r2, r4
	ldr	r1, .L13591
	movt	r0, #:upper16:.LC1060
	bl	printk
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L13535
.L13586:
	movw	r0, #:lower16:.LC1061
	mov	r2, r4
	ldr	r1, .L13591
	movt	r0, #:upper16:.LC1061
	bl	printk
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L13535
.L13587:
	movw	r0, #:lower16:.LC1062
	mov	r2, r4
	ldr	r1, .L13591
	movt	r0, #:upper16:.LC1062
	bl	printk
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L13535
.L13583:
	movw	r0, #:lower16:.LC1058
	ldr	r1, .L13591+12
	mov	r2, r4
	movt	r0, #:upper16:.LC1058
	bl	printk
	mov	r0, r9
	bl	mbim_free_ctrl_pkt.part.5
	b	.L13535
.L13573:
	movw	r1, #:lower16:.LANCHOR5
	movw	r0, #:lower16:.LC734
	movt	r1, #:upper16:.LANCHOR5
	movt	r0, #:upper16:.LC734
	bl	printk
	mvn	r0, #18
	b	.L13519
.L13576:
	movw	r1, #:lower16:.LANCHOR5
	movw	r0, #:lower16:.LC74
	movt	r1, #:upper16:.LANCHOR5
	movt	r0, #:upper16:.LC74
	bl	printk
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #31
	b	.L13519
.L13525:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r1, #:lower16:.LANCHOR5
	movw	r0, #:lower16:.LC1055
	movt	r1, #:upper16:.LANCHOR5
	movt	r0, #:upper16:.LC1055
	bl	printk
	mvn	r0, #15
	b	.L13519
.L13575:
	movw	r1, #:lower16:.LANCHOR5
	movw	r0, #:lower16:.LC1054
	mov	r2, r5
	movt	r1, #:upper16:.LANCHOR5
	movt	r0, #:upper16:.LC1054
	mov	r3, #4096
	bl	printk
	mvn	r0, #11
	b	.L13519
.L13590:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r9]
	sub	r3, r3, #1
	strex	r1, r3, [r9]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC1064
	ldr	r1, .L13591
	movt	r0, #:upper16:.LC1064
	bl	printk
	b	.L13543
.L13592:
	.align	2
.L13591:
	.word	.LANCHOR5+40
	.word	.LANCHOR4+3072
	.word	.LANCHOR4+3096
	.word	.LANCHOR5+12
	.word	.LANCHOR4+3000
	.word	.LANCHOR4+3024
	.word	.LANCHOR4+3048
	.fnend
	.size	mbim_write, .-mbim_write
	.align	2
	.global	usb_gadget_get_string
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_gadget_get_string, %function
usb_gadget_get_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	beq	.L13613
	ldr	r3, [r0, #4]
	cmp	r3, #0
	beq	.L13614
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	ldr	r4, [r3, #4]
	.pad #12
	sub	sp, sp, #12
	cmp	r4, #0
	beq	.L13597
	ldrb	r0, [r3]	@ zero_extendqisi2
	cmp	r0, r1
	bne	.L13599
	b	.L13598
.L13615:
	ldr	r4, [r3, #4]
	cmp	r4, #0
	beq	.L13597
	ldrb	r0, [r3]	@ zero_extendqisi2
	cmp	r1, r0
	beq	.L13598
.L13599:
	adds	r3, r3, #8
	bne	.L13615
.L13597:
	mvn	r1, #21
	b	.L13593
.L13598:
	mov	r0, r4
	mov	r5, r2
	bl	strlen
	mov	r2, #126
	add	r3, r5, #2
	cmp	r0, r2
	movcc	r1, r0
	movcs	r1, r2
	str	r2, [sp]
	mov	r0, r4
	mov	r2, #1
	bl	utf8s_to_utf16s
	cmp	r0, #0
	blt	.L13597
	add	r3, r0, #1
	mov	r2, #3
	lsl	r3, r3, #1
	strb	r2, [r5, #1]
	uxtb	r3, r3
	mov	r1, r3
	strb	r3, [r5]
.L13593:
	mov	r0, r1
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L13613:
	mov	r3, #4
	mov	ip, #3
	mov	r1, r3
	strb	r3, [r2]
	strb	ip, [r2, #1]
	ldrh	r3, [r0]
	strb	r3, [r2, #2]
	ldrh	r3, [r0]
	lsr	r3, r3, #8
	strb	r3, [r2, #3]
.L13610:
	mov	r0, r1
	bx	lr
.L13614:
	mvn	r1, #21
	b	.L13610
	.fnend
	.size	usb_gadget_get_string, .-usb_gadget_get_string
	.align	2
	.global	usb_find_descriptor_fillbuf
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_find_descriptor_fillbuf, %function
usb_find_descriptor_fillbuf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #0
	beq	.L13631
	ldr	ip, [r2]
	cmp	ip, #0
	beq	.L13624
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldrb	lr, [ip, #1]	@ zero_extendqisi2
	cmp	lr, r3
	bne	.L13621
.L13619:
	ldrb	r4, [ip]	@ zero_extendqisi2
	cmp	r1, r4
	bcc	.L13623
	mov	r1, ip
	mov	r2, r4
	bl	memcpy
	mov	r0, r4
.L13616:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L13621:
	ldr	ip, [r2, #4]!
	cmp	ip, #0
	beq	.L13632
	ldrb	lr, [ip, #1]	@ zero_extendqisi2
	cmp	lr, r3
	beq	.L13619
	b	.L13621
.L13624:
	mvn	r0, #1
	bx	lr
.L13632:
	mvn	r0, #1
	b	.L13616
.L13623:
	mvn	r0, #21
	b	.L13616
.L13631:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	usb_find_descriptor_fillbuf, .-usb_find_descriptor_fillbuf
	.align	2
	.global	usb_descriptor_fillbuf
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_descriptor_fillbuf, %function
usb_descriptor_fillbuf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	subs	r6, r2, #0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L13637
	mov	r5, r1
	ldr	r1, [r6]
	cmp	r1, #0
	beq	.L13640
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r5, r4
	bcc	.L13637
	mov	r7, r0
	mov	r3, r0
	b	.L13638
.L13639:
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r4, r5
	bhi	.L13637
.L13638:
	mov	r0, r3
	mov	r2, r4
	bl	memcpy
	ldr	r1, [r6, #4]!
	sub	r5, r5, r4
	add	r3, r0, r4
	cmp	r1, #0
	bne	.L13639
	sub	r0, r3, r7
.L13633:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13637:
	mvn	r0, #21
	b	.L13633
.L13640:
	mov	r0, r1
	b	.L13633
	.fnend
	.size	usb_descriptor_fillbuf, .-usb_descriptor_fillbuf
	.align	2
	.global	usb_gadget_config_buf
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_gadget_config_buf, %function
usb_gadget_config_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #0
	cmpne	r2, #8
	bls	.L13653
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	sub	r6, r2, #9
	strd	r8, [sp, #16]
	mov	r8, r3
	add	r9, r7, #9
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r1, [r0]	@ unaligned
	ldr	r3, [r0, #4]	@ unaligned
	str	r1, [r7]	@ unaligned
	str	r3, [r7, #4]	@ unaligned
	ldrb	r3, [r0, #8]	@ zero_extendqisi2
	strb	r3, [r7, #8]
	ldr	r1, [r8]
	cmp	r1, #0
	beq	.L13649
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r6, r4
	bcc	.L13646
	mov	r5, r9
	b	.L13647
.L13648:
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r4, r6
	bhi	.L13646
.L13647:
	mov	r0, r5
	mov	r2, r4
	bl	memcpy
	ldr	r1, [r8, #4]!
	sub	r6, r6, r4
	add	r5, r5, r4
	cmp	r1, #0
	bne	.L13648
	subs	r0, r5, r9
	bmi	.L13642
	add	r0, r0, #9
	cmp	r0, #65536
	bge	.L13646
.L13645:
	ldrb	r3, [r7, #7]	@ zero_extendqisi2
	mov	r1, #9
	mov	r2, #2
	strb	r1, [r7]
	strb	r2, [r7, #1]
	mvn	r3, r3, lsl #25
	strh	r0, [r7, #2]	@ unaligned
	mvn	r3, r3, lsr #25
	strb	r3, [r7, #7]
.L13642:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13646:
	mvn	r0, #21
	b	.L13642
.L13649:
	mov	r0, #9
	b	.L13645
.L13653:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	usb_gadget_config_buf, .-usb_gadget_config_buf
	.align	2
	.global	usb_copy_descriptors
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_copy_descriptors, %function
usb_copy_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r0]
	cmp	r2, #0
	beq	.L13660
	mov	r3, #0
	mov	r1, r0
	mov	r0, r3
	b	.L13656
.L13661:
	mov	r3, lr
.L13656:
	ldrb	ip, [r2]	@ zero_extendqisi2
	add	lr, r3, #1
	ldr	r2, [r1, #4]!
	add	r0, r0, ip
	cmp	r2, #0
	bne	.L13661
	add	r3, r3, #2
	lsl	r4, r3, #2
	add	r0, r0, r4
.L13655:
	mov	r1, #208
	bl	__kmalloc
	subs	r6, r0, #0
	beq	.L13654
	ldr	r1, [r5]
	add	r3, r6, r4
	mov	r4, r6
	cmp	r1, #0
	beq	.L13658
.L13659:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, r3
	bl	memcpy
	str	r0, [r4], #4
	ldr	r2, [r5]
	ldr	r1, [r5, #4]!
	ldrb	r2, [r2]	@ zero_extendqisi2
	cmp	r1, #0
	add	r3, r0, r2
	bne	.L13659
.L13658:
	mov	r3, #0
	str	r3, [r4]
.L13654:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13660:
	mov	r0, #4
	mov	r4, r0
	b	.L13655
	.fnend
	.size	usb_copy_descriptors, .-usb_copy_descriptors
	.align	2
	.global	usb_assign_descriptors
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_assign_descriptors, %function
usb_assign_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	subs	r0, r1, #0
	strd	r6, [sp, #8]
	mov	r6, r3
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	ip, [r4, #20]
	ldr	r3, [ip, #24]
	ldr	r5, [r3]
	beq	.L13673
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L13672
.L13673:
	cmp	r7, #0
	beq	.L13671
	ldr	r3, [r5, #20]
	cmp	r3, #2
	bhi	.L13682
.L13671:
	cmp	r6, #0
	beq	.L13675
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bhi	.L13683
.L13675:
	mov	r0, #0
.L13668:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13683:
	mov	r0, r6
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L13675
.L13681:
	ldr	r0, [r4, #16]
.L13672:
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	mvn	r0, #11
	b	.L13668
.L13682:
	mov	r0, r7
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	bne	.L13671
	b	.L13681
	.fnend
	.size	usb_assign_descriptors, .-usb_assign_descriptors
	.align	2
	.global	usb_free_all_descriptors
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_free_all_descriptors, %function
usb_free_all_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #12]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	usb_free_all_descriptors, .-usb_free_all_descriptors
	.align	2
	.global	usb_ep_autoconfig_ss
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_ep_autoconfig_ss, %function
usb_ep_autoconfig_ss:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	fp, [r0, #28]
	.pad #12
	sub	sp, sp, #12
	movw	r0, #:lower16:.LC470
	ldrb	r6, [r1, #3]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC470
	str	r2, [sp]
	mov	r1, fp
	bl	strcmp
	ldr	r9, [r5, #8]!
	cmp	r0, #0
	and	r6, r6, #3
	sub	r4, r9, #12
	mov	r10, r9
	bne	.L13687
	cmp	r6, #3
	beq	.L13796
	movw	r0, #:lower16:.LC473
	mov	r1, fp
	movt	r0, #:upper16:.LC473
	bl	strcmp
	cmp	r0, #0
	bne	.L13697
.L13698:
	cmp	r6, #2
	beq	.L13797
.L13697:
	cmp	r10, r5
	beq	.L13702
.L13696:
	movw	r9, #:lower16:_ctype
	movw	r10, #:lower16:.LANCHOR1
	movw	fp, #:lower16:.LC472
	movt	r9, #:upper16:_ctype
	movt	r10, #:upper16:.LANCHOR1
	movt	fp, #:upper16:.LC472
	b	.L13723
.L13705:
	ldr	r4, [r4, #12]
	cmp	r5, r4
	sub	r4, r4, #12
	beq	.L13702
.L13723:
	ldr	r2, [r4]
	cmp	r2, #0
	bne	.L13705
	ldrb	r6, [r7, #3]	@ zero_extendqisi2
	ands	r6, r6, #3
	beq	.L13705
	ldr	r2, [r4, #4]
	ldrb	r1, [r2]	@ zero_extendqisi2
	cmp	r1, #101
	bne	.L13705
	ldrb	r1, [r2, #2]	@ zero_extendqisi2
	cmp	r1, #45
	beq	.L13706
	mov	r0, r2
	mov	r1, #45
	str	r2, [sp, #4]
	bl	strrchr
	subs	r3, r0, #0
	ldr	r2, [sp, #4]
	beq	.L13707
	cmp	r6, #2
	beq	.L13709
	cmp	r6, #3
	ldrb	r2, [r3, #2]	@ zero_extendqisi2
	bne	.L13782
	cmp	r2, #115
	str	r3, [sp, #4]
	beq	.L13705
	mov	r0, fp
	ldr	r1, [r8, #28]
	bl	strcmp
	cmp	r0, #0
	ldr	r3, [sp, #4]
	bne	.L13711
	ldrb	r2, [r3, #1]	@ zero_extendqisi2
	cmp	r2, #105
	beq	.L13705
.L13711:
	ldrb	r2, [r3, #-1]	@ zero_extendqisi2
	ldrb	r1, [r9, r2]	@ zero_extendqisi2
	tst	r1, #4
	beq	.L13724
	ldrh	r2, [r7, #4]	@ unaligned
	cmp	r2, #0
	bne	.L13785
	str	r2, [sp, #4]
	ldrh	r2, [r4, #20]
	strh	r2, [r7, #4]	@ unaligned
.L13715:
	cmp	r6, #1
	ubfx	r1, r2, #0, #11
	beq	.L13717
	cmp	r6, #3
	bne	.L13716
.L13718:
	ldr	r3, [r8, #20]
	cmp	r3, #2
	movls	r0, #1
	movhi	r0, #0
	cmp	r1, #64
	movls	r0, #0
	cmp	r0, #0
	bne	.L13705
.L13717:
	ldrh	r0, [r4, #20]
	cmp	r0, r1
	bcc	.L13705
	ldr	r0, [r8, #20]
	cmp	r0, #2
	bhi	.L13716
	cmp	r1, #1024
	bcs	.L13705
	tst	r2, #6144
	bne	.L13705
.L13716:
	ldrb	r2, [r7, #2]	@ zero_extendqisi2
	and	r2, r2, #128
	strb	r2, [r7, #2]
	ldr	r0, [r4, #4]
	ldrb	r1, [r0, #2]	@ zero_extendqisi2
	ldrb	r1, [r9, r1]	@ zero_extendqisi2
	tst	r1, #4
	bne	.L13798
	ldr	r1, [r10, #3228]
	add	r1, r1, #1
	cmp	r1, #15
	str	r1, [r10, #3228]
	bhi	.L13705
	orr	r3, r2, r1
	uxtb	r3, r3
	strb	r3, [r7, #2]
.L13721:
	ldm	sp, {r2, fp}
	cmp	r2, #0
	movne	fp, #0
	cmp	fp, #0
	beq	.L13722
	ldrh	r2, [r4, #20]
	cmp	r2, #64
	movge	r2, #64
	strh	r2, [r7, #4]	@ unaligned
.L13722:
	strb	r3, [r4, #25]
.L13693:
	mov	r3, #0
	str	r3, [r4, #28]
	str	r3, [r4, #32]
	b	.L13686
.L13687:
	movw	r0, #:lower16:.LC473
	mov	r1, fp
	movt	r0, #:upper16:.LC473
	bl	strcmp
	cmp	r0, #0
	bne	.L13697
	cmp	r6, #3
	bne	.L13698
	cmp	r5, r9
	movwne	r9, #:lower16:.LC1068
	movne	r6, r4
	movtne	r9, #:upper16:.LC1068
	bne	.L13699
	b	.L13702
.L13799:
	ldr	r6, [r6, #12]
	cmp	r5, r6
	sub	r6, r6, #12
	beq	.L13696
.L13699:
	mov	r1, r9
	ldr	r0, [r6, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L13799
.L13703:
	cmp	r6, #0
	beq	.L13696
	ldr	r3, [r6]
	cmp	r3, #0
	bne	.L13696
	mov	r2, r7
	mov	r1, r6
	ldr	r3, [sp]
	mov	r0, r8
	bl	ep_matches.part.13
	cmp	r0, #0
	bne	.L13732
	ldr	r10, [r8, #8]
	sub	r4, r10, #12
	b	.L13697
.L13796:
	cmp	r5, r9
	beq	.L13702
	movw	r9, #:lower16:.LC1066
	mov	r6, r4
	movt	r9, #:upper16:.LC1066
	b	.L13691
.L13800:
	ldr	r6, [r6, #12]
	cmp	r5, r6
	sub	r6, r6, #12
	beq	.L13692
.L13691:
	mov	r1, r9
	ldr	r0, [r6, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L13800
	cmp	r6, #0
	beq	.L13692
	ldr	r3, [r6]
	cmp	r3, #0
	bne	.L13692
	mov	r2, r7
	mov	r1, r6
	ldr	r3, [sp]
	mov	r0, r8
	bl	ep_matches.part.13
	cmp	r0, #0
	bne	.L13732
	ldr	r4, [r8, #8]
	cmp	r5, r4
	sub	r4, r4, #12
	bne	.L13692
.L13702:
	mov	r4, #0
.L13686:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13707:
	mov	r0, r2
	str	r2, [sp, #4]
	bl	strlen
	ldr	r2, [sp, #4]
	add	r3, r2, r0
.L13712:
	ldrb	r2, [r3, #-1]	@ zero_extendqisi2
	ldrb	r1, [r9, r2]	@ zero_extendqisi2
	tst	r1, #4
	bne	.L13706
.L13724:
	ldrsb	r1, [r7, #2]
	cmp	r1, #0
	blt	.L13801
	cmp	r2, #116
	bne	.L13705
.L13706:
	sub	r3, r6, #2
	clz	r3, r3
	lsr	r3, r3, #5
	mov	r2, r3
	str	r3, [sp, #4]
	ldr	r3, [sp]
	cmp	r3, #0
	moveq	r2, #0
	cmp	r2, #0
	bne	.L13802
.L13714:
	ldrh	r2, [r7, #4]	@ unaligned
	cmp	r2, #0
	bne	.L13715
	ldrh	r2, [r4, #20]
	strh	r2, [r7, #4]	@ unaligned
	b	.L13715
.L13797:
	ldrsb	r3, [r7, #2]
	cmp	r3, #0
	bge	.L13697
	cmp	r5, r9
	beq	.L13702
	movw	r9, #:lower16:.LC1069
	mov	r6, r4
	movt	r9, #:upper16:.LC1069
	b	.L13704
.L13803:
	ldr	r6, [r6, #12]
	cmp	r5, r6
	sub	r6, r6, #12
	beq	.L13696
.L13704:
	mov	r1, r9
	ldr	r0, [r6, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L13803
	b	.L13703
.L13802:
	ldr	r1, [r8, #20]
	cmp	r1, #4
	bls	.L13733
	ldrb	r1, [r3, #3]	@ zero_extendqisi2
	ldrh	r0, [r4, #22]
	and	r1, r1, #31
	cmp	r0, r1
	bcc	.L13705
.L13733:
	str	r2, [sp, #4]
	b	.L13714
.L13692:
	movw	r9, #:lower16:.LC1067
	mov	r6, r4
	movt	r9, #:upper16:.LC1067
	b	.L13695
.L13804:
	ldr	r6, [r6, #12]
	cmp	r5, r6
	sub	r6, r6, #12
	beq	.L13696
.L13695:
	mov	r1, r9
	ldr	r0, [r6, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L13804
	b	.L13703
.L13709:
	ldrb	r2, [r3, #1]	@ zero_extendqisi2
	cmp	r2, #98
	bne	.L13705
	b	.L13712
.L13782:
	cmp	r2, #115
	bne	.L13705
	b	.L13712
.L13798:
	add	r0, r0, #2
	mov	r2, #10
	mov	r1, #0
	bl	simple_strtoul
	ldrb	r3, [r7, #2]	@ zero_extendqisi2
	orr	r3, r3, r0
	uxtb	r3, r3
	strb	r3, [r7, #2]
	b	.L13721
.L13801:
	cmp	r2, #110
	bne	.L13705
	b	.L13706
.L13732:
	mov	r4, r6
	b	.L13693
.L13785:
	mov	r3, #0
	ubfx	r1, r2, #0, #11
	str	r3, [sp, #4]
	b	.L13718
	.fnend
	.size	usb_ep_autoconfig_ss, .-usb_ep_autoconfig_ss
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	__ffs_func_bind_do_descs, %function
__ffs_func_bind_do_descs:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	bne	.L13820
	ldr	r0, [r3, #48]
	cmp	r0, #0
	beq	.L13808
	str	r2, [r0, r1, lsl #2]
	mov	r0, #2
.L13809:
	cmp	r2, #0
	beq	.L13820
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	cmp	r1, #5
	beq	.L13823
.L13820:
	mov	r0, #0
	bx	lr
.L13808:
	ldr	r0, [r3, #44]
	cmp	r0, #0
	ldreq	ip, [r3, #52]
	strne	r2, [r0, r1, lsl #2]
	movne	r0, #1
	streq	r2, [ip, r1, lsl #2]
	b	.L13809
.L13823:
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r7, [r2, #2]	@ zero_extendqisi2
	.pad #4
	sub	sp, sp, #4
	ldr	r8, [r3, #12]
	and	r7, r7, #15
	sub	r5, r7, #1
	rsb	r5, r5, r5, lsl #3
	lsl	r5, r5, #2
	add	r6, r8, r5
	add	r0, r6, r0, lsl #2
	ldr	r1, [r0, #8]
	cmp	r1, #0
	bne	.L13813
	str	r2, [r0, #8]
	ldr	r4, [r8, r5]
	cmp	r4, #0
	beq	.L13812
	ldr	r3, [r6, #8]
	ldrh	r0, [r2, #4]	@ unaligned
	ldrb	r3, [r3, #2]	@ zero_extendqisi2
	cmp	r0, #0
	movne	r0, #0
	strb	r3, [r2, #2]
	bne	.L13805
	ldr	r3, [r6, #8]
	ldrh	r3, [r3, #4]	@ unaligned
	strh	r3, [r2, #4]	@ unaligned
.L13805:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13812:
	mov	r10, r2
	ldr	r0, [r3, #4]
	mov	r2, r4
	mov	r1, r10
	mov	r9, r3
	bl	usb_ep_autoconfig_ss
	subs	fp, r0, #0
	beq	.L13814
	ldr	r3, [r9, #12]
	mov	r1, #208
	ldr	r2, [fp, #8]
	add	r3, r3, r5
	str	r3, [fp]
	ldr	r3, [r2, #8]
	blx	r3
	subs	r3, r0, #0
	beq	.L13815
	str	fp, [r8, r5]
	mov	r0, r4
	str	r3, [r6, #4]
	ldrb	r3, [r10, #2]	@ zero_extendqisi2
	and	r3, r3, #15
	add	r3, r9, r3
	strb	r7, [r3, #16]
	b	.L13805
.L13813:
	mvn	r0, #21
	b	.L13805
.L13814:
	movw	r0, #65012
	movt	r0, 65535
	b	.L13805
.L13815:
	mvn	r0, #11
	b	.L13805
	.fnend
	.size	__ffs_func_bind_do_descs, .-__ffs_func_bind_do_descs
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_bind, %function
diag_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r7, [r0, #24]
	cmp	r3, #15
	movhi	r3, #237
	bhi	.L13825
	add	r1, r3, #12
	add	r2, r3, #1
	str	r4, [r0, r1, lsl #2]
	strb	r2, [r0, #44]
.L13825:
	movw	r5, #:lower16:.LANCHOR0
	mov	r2, #0
	ldr	r1, .L13881
	movt	r5, #:upper16:.LANCHOR0
	strb	r3, [r5, #2750]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L13826
	str	r0, [r4, #88]
	mov	r2, #0
	ldr	r1, .L13881+4
	str	r4, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L13826
	str	r3, [r4, #84]
	add	r0, r5, #2784
	str	r4, [r3]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L13843
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L13878
.L13828:
	ldr	r3, [r4, #120]
	cmp	r3, #0
	beq	.L13846
	ldrb	r2, [r5, #2750]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L13846
	ldr	r2, [r4, #116]
	ldrb	r1, [r2, #33]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L13834
.L13876:
	ldrh	r0, [r2, #27]	@ unaligned
	mov	r5, #0
	blx	r3
	b	.L13824
.L13826:
	mvn	r5, #18
.L13827:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L13833
.L13841:
	bl	kfree
.L13833:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L13838
	bl	kfree
.L13838:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L13839
	bl	kfree
.L13839:
	ldr	r3, [r4, #84]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L13824
	mov	r2, #0
	str	r2, [r3]
.L13824:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13878:
	ldrb	r2, [r5, #2762]	@ zero_extendqisi2
	ldrb	r3, [r5, #2774]	@ zero_extendqisi2
	ldr	r0, .L13881+8
	strb	r2, [r5, #2802]
	strb	r3, [r5, #2814]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L13829
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L13828
	ldrb	r2, [r5, #2762]	@ zero_extendqisi2
	add	r0, r5, #2864
	ldrb	r3, [r5, #2774]	@ zero_extendqisi2
	strb	r2, [r5, #2842]
	strb	r3, [r5, #2854]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L13828
	mvn	r5, #11
	b	.L13833
.L13834:
	ldr	r0, [r2, #44]
	ldr	r0, [r0, #16]
	ldr	r0, [r0]
	ldr	r5, [r0, #4]
	cmp	r5, #0
	bne	.L13877
	b	.L13824
.L13880:
	ldrb	ip, [r5]	@ zero_extendqisi2
	cmp	ip, r1
	beq	.L13879
	adds	r5, r5, #8
	beq	.L13824
.L13877:
	ldr	r0, [r5, #4]
	cmp	r0, #0
	bne	.L13880
.L13846:
	mov	r5, #0
	b	.L13824
.L13843:
	mvn	r5, #11
	b	.L13827
.L13829:
	ldr	r0, [r4, #12]
	mvn	r5, #11
	cmp	r0, #0
	bne	.L13841
	b	.L13838
.L13879:
	mov	r1, r0
	b	.L13876
.L13882:
	.align	2
.L13881:
	.word	.LANCHOR0+2760
	.word	.LANCHOR0+2772
	.word	.LANCHOR0+2824
	.fnend
	.size	diag_function_bind, .-diag_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_bind, %function
rmnet_smd_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r8, [r0, #24]
	str	r8, [r1, #84]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L13886
	movw	r5, #:lower16:.LANCHOR0
	mov	r4, r1
	ldr	r1, .L13944
	mov	r7, r0
	add	r2, r3, #12
	add	r0, r3, #1
	movt	r5, #:upper16:.LANCHOR0
	str	r4, [r7, r2, lsl #2]
	mov	r2, #0
	strb	r0, [r7, #44]
	strb	r3, [r5, #2890]
	strb	r3, [r4, #104]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L13886
	str	r8, [r0]
	mov	r2, #0
	add	r1, r5, #2912
	str	r0, [r4, #92]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L13886
	str	r8, [r0]
	mov	r2, #0
	ldr	r1, .L13944+4
	str	r0, [r4, #88]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	subs	r6, r0, #0
	beq	.L13886
	str	r8, [r6]
	str	r6, [r4, #96]
	ldr	r3, [r7, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L13942
.L13887:
	ldr	r3, [r6, #8]
	mov	r1, #208
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L13888
	mov	r2, #8
	movw	r7, #:lower16:kmalloc_caches
	movt	r7, #:upper16:kmalloc_caches
	str	r2, [r5, #4]
	ldr	r0, [r7, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5]
	beq	.L13890
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L13890
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L13888:
	mvn	r3, #11
	mov	r5, r3
	str	r3, [r4, #100]
.L13883:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13942:
	ldrb	r1, [r5, #2902]	@ zero_extendqisi2
	ldrb	r2, [r5, #2914]	@ zero_extendqisi2
	ldrb	r3, [r5, #2926]	@ zero_extendqisi2
	strb	r1, [r5, #2938]
	strb	r2, [r5, #2950]
	strb	r3, [r5, #2962]
	b	.L13887
.L13890:
	cmn	r5, #4096
	str	r5, [r4, #100]
	bhi	.L13883
	movw	r3, #:lower16:rmnet_smd_notify_complete
	mov	r2, #8
	movt	r3, #:upper16:rmnet_smd_notify_complete
	mov	r6, #4
	mov	r8, #16
	str	r3, [r5, #28]
	ldr	r3, [r4, #100]
	str	r4, [r3, #32]
	ldr	r3, [r4, #100]
	str	r2, [r3, #4]
.L13896:
	ldr	r3, [r7, #24]
	mov	r2, #16
	mov	r1, #208
	mov	r5, r2
	subs	r0, r3, #0
	beq	.L13891
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L13922
.L13891:
	ldr	r3, [r7, #44]
	mov	r2, #2048
	mov	r1, #208
	subs	r0, r3, #0
	streq	r8, [r5]
	beq	.L13894
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	beq	.L13941
.L13894:
	cmn	r5, #4096
	add	r2, r4, #108
	add	r0, r5, #8
	bhi	.L13895
	ldr	r1, [r4, #112]
	bl	__list_add
	subs	r6, r6, #1
	bne	.L13896
	mov	r6, #8
	mov	r8, #16
.L13901:
	ldr	r3, [r7, #24]
	mov	r2, #16
	mov	r1, #208
	mov	r5, r2
	subs	r0, r3, #0
	beq	.L13897
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L13922
.L13897:
	ldr	r3, [r7, #44]
	mov	r2, #2048
	mov	r1, #208
	subs	r0, r3, #0
	streq	r8, [r5]
	beq	.L13900
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	beq	.L13941
.L13900:
	cmn	r5, #4096
	add	r2, r4, #116
	add	r0, r5, #8
	bhi	.L13895
	ldr	r1, [r4, #120]
	bl	__list_add
	subs	r6, r6, #1
	bne	.L13901
	movw	r9, #:lower16:rmnet_smd_complete_epout
	mov	r8, #8
	movt	r9, #:upper16:rmnet_smd_complete_epout
	mov	r10, #2048
.L13905:
	ldr	r6, [r4, #88]
	mov	r1, #208
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L13922
	str	r10, [r5, #4]
	ldr	r3, [r7, #44]
	mov	ip, #16
	mov	r2, #2048
	mov	r1, #208
	subs	r0, r3, #0
	streq	ip, [r5]
	beq	.L13904
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L13904
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	mvn	r5, #11
	ldr	r3, [r3, #12]
	blx	r3
	b	.L13895
.L13922:
	mvn	r5, #11
.L13895:
	mov	r0, r4
	bl	rmnet_smd_free_buf
	mov	r3, #0
	str	r3, [r4, #88]
	str	r3, [r4, #92]
	str	r3, [r4, #96]
	b	.L13883
.L13941:
	mov	r0, r5
	mvn	r5, #11
	bl	kfree
	b	.L13895
.L13904:
	cmn	r5, #4096
	add	r2, r4, #148
	add	r0, r5, #36
	bhi	.L13895
	str	r10, [r5, #4]
	str	r9, [r5, #28]
	str	r4, [r5, #32]
	ldr	r1, [r4, #152]
	bl	__list_add
	subs	r8, r8, #1
	bne	.L13905
	movw	r9, #:lower16:rmnet_smd_complete_epin
	mov	r5, #8
	movt	r9, #:upper16:rmnet_smd_complete_epin
	mov	r10, #2048
.L13909:
	ldr	r8, [r4, #92]
	mov	r1, #208
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	beq	.L13922
	str	r10, [r6, #4]
	ldr	r3, [r7, #44]
	mov	ip, #16
	mov	r2, #2048
	mov	r1, #208
	subs	r0, r3, #0
	streq	ip, [r6]
	beq	.L13908
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r6]
	bne	.L13908
	ldr	r3, [r8, #8]
	mov	r1, r6
	mov	r0, r8
	mvn	r5, #11
	ldr	r3, [r3, #12]
	blx	r3
	b	.L13895
.L13886:
	mvn	r5, #18
	b	.L13883
.L13908:
	cmn	r6, #4096
	add	r2, r4, #140
	add	r0, r6, #36
	bhi	.L13943
	str	r9, [r6, #28]
	str	r4, [r6, #32]
	ldr	r1, [r4, #144]
	bl	__list_add
	subs	r5, r5, #1
	bne	.L13909
	b	.L13883
.L13943:
	mov	r5, r6
	b	.L13895
.L13945:
	.align	2
.L13944:
	.word	.LANCHOR0+2900
	.word	.LANCHOR0+2924
	.fnend
	.size	rmnet_smd_bind, .-rmnet_smd_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_bind, %function
rmnet_sdio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r8, [r0, #24]
	.pad #28
	sub	sp, sp, #28
	str	r8, [r1, #84]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L13989
	movw	r7, #:lower16:.LANCHOR0
	mov	ip, r0
	mov	r5, r1
	movt	r7, #:upper16:.LANCHOR0
	add	r1, r3, #12
	add	r2, r3, #1
	ldrb	r6, [r7, #2987]	@ zero_extendqisi2
	strb	r3, [r7, #2974]
	str	r5, [r0, r1, lsl #2]
	movw	r0, #:lower16:.LC470
	strb	r2, [ip, #44]
	movt	r0, #:upper16:.LC470
	strb	r3, [r5, #104]
	ldr	r4, [r8]
	and	r6, r6, #3
	ldr	fp, [r4, #28]
	str	r4, [sp, #4]
	str	ip, [sp, #8]
	mov	r1, fp
	bl	strcmp
	cmp	r0, #0
	bne	.L13949
	ldr	r9, [r4, #8]!
	cmp	r6, #3
	sub	r10, r9, #12
	beq	.L14057
	movw	r0, #:lower16:.LC473
	mov	r1, fp
	movt	r0, #:upper16:.LC473
	bl	strcmp
	cmp	r0, #0
	bne	.L13958
.L13960:
	cmp	r6, #2
	beq	.L14058
.L13958:
	cmp	r9, r4
	beq	.L13961
.L13959:
	ldrb	r6, [r7, #2987]	@ zero_extendqisi2
	and	r6, r6, #3
.L13990:
	movw	fp, #:lower16:.LC472
	movw	r2, #:lower16:_ctype
	movw	r9, #:lower16:.LANCHOR1
	movt	fp, #:upper16:.LC472
	movt	r2, #:upper16:_ctype
	movt	r9, #:upper16:.LANCHOR1
	mov	r3, r5
	str	fp, [sp, #12]
	mov	r5, r8
	mov	r8, r9
	mov	r9, r2
	mov	r2, r3
	b	.L13985
.L13968:
	ldr	r10, [r10, #12]
	cmp	r4, r10
	sub	r10, r10, #12
	beq	.L14059
.L13985:
	ldr	r3, [r10]
	cmp	r3, #0
	bne	.L13968
	cmp	r6, #0
	beq	.L13968
	ldr	fp, [r10, #4]
	ldrb	r3, [fp]	@ zero_extendqisi2
	cmp	r3, #101
	bne	.L13968
	ldrb	r3, [fp, #2]	@ zero_extendqisi2
	cmp	r3, #45
	beq	.L13969
	mov	r1, #45
	mov	r0, fp
	str	r2, [sp, #16]
	bl	strrchr
	subs	r3, r0, #0
	ldr	r2, [sp, #16]
	beq	.L13970
	cmp	r6, #2
	beq	.L13972
	cmp	r6, #3
	ldrb	r1, [r3, #2]	@ zero_extendqisi2
	bne	.L14048
	cmp	r1, #115
	str	r3, [sp, #16]
	beq	.L13968
	ldr	r3, [sp, #4]
	str	r2, [sp, #20]
	ldr	r0, [sp, #12]
	ldr	r1, [r3, #28]
	bl	strcmp
	cmp	r0, #0
	ldr	r3, [sp, #16]
	ldr	r2, [sp, #20]
	bne	.L13974
	ldrb	r1, [r3, #1]	@ zero_extendqisi2
	cmp	r1, #105
	bne	.L13974
	b	.L13968
.L13949:
	movw	r0, #:lower16:.LC473
	mov	r1, fp
	movt	r0, #:upper16:.LC473
	bl	strcmp
	ldr	r2, [r4, #8]!
	cmp	r0, #0
	sub	r10, r2, #12
	mov	r9, r2
	bne	.L13958
	cmp	r6, #3
	bne	.L13960
	cmp	r4, r2
	beq	.L13961
	movw	fp, #:lower16:.LC1068
	mov	r9, r10
	movt	fp, #:upper16:.LC1068
	b	.L13963
.L14060:
	ldr	r9, [r9, #12]
	cmp	r4, r9
	sub	r9, r9, #12
	beq	.L13959
.L13963:
	mov	r1, fp
	ldr	r0, [r9, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L14060
.L13966:
	cmp	r9, #0
	beq	.L13990
	ldr	r3, [r9]
	cmp	r3, #0
	bne	.L13990
	ldr	r6, [sp, #4]
	mov	r1, r9
	ldr	r2, .L14066
	mov	r0, r6
	bl	ep_matches.part.13
	cmp	r0, #0
	bne	.L13994
	ldr	r9, [r6, #8]
	sub	r10, r9, #12
	b	.L13958
.L14059:
	mov	r5, r2
.L13961:
	ldr	r3, [r5, #96]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r5, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r5, #92]
	cmp	r3, #0
	beq	.L13989
	mov	r2, #0
	mvn	r0, #18
	str	r2, [r3]
.L13946:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13989:
	mvn	r0, #18
	b	.L13946
.L13970:
	mov	r0, fp
	str	r2, [sp, #16]
	bl	strlen
	ldr	r2, [sp, #16]
	add	r3, fp, r0
.L13974:
	ldrb	r3, [r3, #-1]	@ zero_extendqisi2
	ldrb	r1, [r9, r3]	@ zero_extendqisi2
	tst	r1, #4
	bne	.L13969
	ldr	r1, .L14066+4
	ldrsb	r1, [r1]
	cmp	r1, #0
	blt	.L14061
	cmp	r3, #116
	bne	.L13968
.L13969:
	ldr	r1, .L14066
	ldrh	r3, [r1, #4]
	cmp	r3, #0
	ldrheq	r3, [r10, #20]
	strheq	r3, [r1, #4]	@ movhi
	cmp	r6, #1
	ubfx	r1, r3, #0, #11
	beq	.L13978
	cmp	r6, #3
	bne	.L13977
	ldr	r0, [sp, #4]
	ldr	ip, [r0, #20]
	cmp	ip, #2
	movls	r0, #1
	movhi	r0, #0
	cmp	r1, #64
	movls	r0, #0
	cmp	r0, #0
	bne	.L13968
.L13978:
	ldrh	r0, [r10, #20]
	cmp	r0, r1
	bcc	.L13968
	ldr	r0, [sp, #4]
	ldr	r0, [r0, #20]
	cmp	r0, #2
	bhi	.L13977
	cmp	r1, #1024
	bcs	.L13968
	tst	r3, #6144
	bne	.L13968
.L13977:
	ldrb	r1, [r7, #2986]	@ zero_extendqisi2
	ldr	r0, [r10, #4]
	and	r1, r1, #128
	strb	r1, [r7, #2986]
	ldrb	r3, [r0, #2]	@ zero_extendqisi2
	ldrb	r3, [r9, r3]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L14062
	ldr	r0, [r8, #3228]
	add	r0, r0, #1
	cmp	r0, #15
	str	r0, [r8, #3228]
	bhi	.L13968
	mov	r8, r5
	mov	r5, r2
	orr	r2, r1, r0
	uxtb	r2, r2
	strb	r2, [r7, #2986]
.L13982:
	cmp	r6, #2
	bne	.L13983
	ldrh	r1, [r10, #20]
	ldr	r3, .L14066
	cmp	r1, #64
	movge	r1, #64
	strh	r1, [r3, #4]	@ movhi
.L13983:
	mov	r1, #0
	cmp	r10, #0
	strb	r2, [r10, #25]
	str	r1, [r10, #28]
	str	r1, [r10, #32]
	beq	.L13961
.L13984:
	str	r8, [r10]
	mov	r2, #0
	ldr	r1, .L14066+8
	str	r10, [r5, #92]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L13961
	str	r8, [r0]
	mov	r2, #0
	ldr	r1, .L14066+12
	str	r0, [r5, #88]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L13961
	ldr	r3, [sp, #8]
	str	r8, [r0]
	str	r0, [r5, #96]
	ldr	r3, [r3, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L13986
	ldrb	r1, [r7, #2986]	@ zero_extendqisi2
	ldrb	r2, [r7, #2998]	@ zero_extendqisi2
	ldrb	r3, [r7, #3010]	@ zero_extendqisi2
	strb	r1, [r7, #3022]
	strb	r2, [r7, #3034]
	strb	r3, [r7, #3046]
.L13986:
	mov	r3, #0
	add	r2, r5, #252
	ldr	r1, [r5, #200]
	mov	r0, #4
	bl	queue_delayed_work_on
	mov	r0, #0
	b	.L13946
.L14058:
	ldrb	r2, [r7, #2986]	@ zero_extendqisi2
	lsrs	r3, r2, #7
	beq	.L13958
	cmp	r9, r4
	beq	.L13961
	movw	fp, #:lower16:.LC1069
	mov	r9, r10
	movt	fp, #:upper16:.LC1069
	b	.L13967
.L14063:
	ldr	r9, [r9, #12]
	cmp	r4, r9
	sub	r9, r9, #12
	beq	.L13959
.L13967:
	mov	r1, fp
	ldr	r0, [r9, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L14063
	b	.L13966
.L14057:
	cmp	r4, r9
	beq	.L13961
	movw	fp, #:lower16:.LC1066
	mov	r6, r10
	movt	fp, #:upper16:.LC1066
	b	.L13953
.L14064:
	ldr	r6, [r6, #12]
	cmp	r4, r6
	sub	r6, r6, #12
	beq	.L13954
.L13953:
	mov	r1, fp
	ldr	r0, [r6, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L14064
	cmp	r6, #0
	beq	.L13954
	ldr	r3, [r6]
	cmp	r3, #0
	bne	.L13954
	ldr	r9, [sp, #4]
	mov	r1, r6
	ldr	r2, .L14066
	mov	r0, r9
	bl	ep_matches.part.13
	cmp	r0, #0
	bne	.L13992
	ldr	r3, [r9, #8]
	cmp	r3, r4
	mov	r9, r3
	sub	r10, r3, #12
	beq	.L13961
.L13954:
	movw	fp, #:lower16:.LC1067
	mov	r6, r10
	movt	fp, #:upper16:.LC1067
	b	.L13957
.L14065:
	ldr	r6, [r6, #12]
	cmp	r4, r6
	sub	r6, r6, #12
	beq	.L13958
.L13957:
	mov	r1, fp
	ldr	r0, [r6, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L14065
	cmp	r6, #0
	beq	.L13959
	ldr	r3, [r6]
	cmp	r3, #0
	bne	.L13959
	ldr	r9, [sp, #4]
	mov	r1, r6
	ldr	r2, .L14066
	mov	r0, r9
	bl	ep_matches.part.13
	cmp	r0, #0
	bne	.L13992
	ldr	r9, [r9, #8]
	sub	r10, r9, #12
	b	.L13958
.L13972:
	ldrb	r1, [r3, #1]	@ zero_extendqisi2
	cmp	r1, #98
	bne	.L13968
	b	.L13974
.L14048:
	cmp	r1, #115
	bne	.L13968
	b	.L13974
.L14062:
	mov	r8, r5
	add	r0, r0, #2
	mov	r5, r2
	mov	r1, #0
	mov	r2, #10
	bl	simple_strtoul
	ldrb	r2, [r7, #2986]	@ zero_extendqisi2
	orr	r2, r2, r0
	uxtb	r2, r2
	strb	r2, [r7, #2986]
	b	.L13982
.L14061:
	cmp	r3, #110
	bne	.L13968
	b	.L13969
.L13992:
	mov	r10, r6
.L13955:
	mov	r2, #0
	str	r2, [r10, #28]
	str	r2, [r10, #32]
	b	.L13984
.L13994:
	mov	r10, r9
	b	.L13955
.L14067:
	.align	2
.L14066:
	.word	.LANCHOR0+2984
	.word	.LANCHOR0+2986
	.word	.LANCHOR0+2996
	.word	.LANCHOR0+3008
	.fnend
	.size	rmnet_sdio_bind, .-rmnet_sdio_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_bind, %function
audio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r5, .L14085
	movw	r4, #:lower16:.LANCHOR0
	strd	r6, [sp, #8]
	movt	r4, #:upper16:.LANCHOR0
	movw	ip, #44100
	strd	r8, [sp, #16]
	mov	r3, #2
	mov	r6, #0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	movw	lr, #3076
	.pad #12
	sub	sp, sp, #12
	strh	ip, [r4, lr]	@ movhi
	ldr	lr, [r0, #24]
	strb	r3, [r4, #3063]
	cmp	r2, #15
	strb	r3, [r4, #3072]
	strb	r6, [r5, #2]
	str	ip, [sp, #4]
	bhi	.L14069
	add	r3, r2, #1
	add	ip, r2, #12
	strb	r2, [r4, #3082]
	uxtb	r3, r3
	str	r1, [r0, ip, lsl #2]
	cmp	r3, #15
	strb	r3, [r0, #44]
	bhi	.L14069
	mov	r6, r0
	mov	r5, r1
	strb	r3, [r4, #3094]
	add	r0, r2, #2
	add	r1, r3, #12
	strb	r3, [r4, #3106]
	mov	r2, #0
	str	r5, [r6, r1, lsl #2]
	ldr	r1, .L14085+4
	strb	r0, [r6, #44]
	ldr	r0, [lr]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L14069
	str	r7, [r5, #104]
	movw	r10, #:lower16:kmalloc_caches
	movw	r9, #:lower16:audio_data_complete
	str	r5, [r7]
	ldr	r3, [r6, #24]
	movt	r10, #:upper16:kmalloc_caches
	movt	r9, #:upper16:audio_data_complete
	mov	r8, #4
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	ldrbhi	r3, [r4, #3118]	@ zero_extendqisi2
	strbhi	r3, [r4, #3130]
.L14074:
	ldr	r3, [r7, #8]
	mov	r1, #208
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	mov	r2, #256
	mov	r1, #208
	mov	r3, #16
	beq	.L14071
	ldr	ip, [r10, #32]
	subs	r0, ip, #0
	streq	r3, [r4]
	beq	.L14073
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4]
	beq	.L14084
.L14073:
	mov	r3, #256
	add	r6, r5, #108
	mov	r0, r6
	str	r3, [r4, #4]
	str	r9, [r4, #28]
	str	r5, [r4, #32]
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	add	r2, r5, #96
	ldr	r1, [r5, #100]
	add	r0, r4, #36
	bl	__list_add
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	subs	r8, r8, #1
	bne	.L14074
	mov	r0, r8
	b	.L14068
.L14084:
	ldr	r3, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L14071:
	mvn	r0, #11
.L14068:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14069:
.L14075:
	mvn	r0, #18
	b	.L14068
.L14086:
	.align	2
.L14085:
	.word	.LANCHOR0+3076
	.word	.LANCHOR0+3116
	.fnend
	.size	audio_bind, .-audio_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_bind, %function
ecm_qc_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	.pad #16
	sub	sp, sp, #16
	ldr	r7, [r0, #24]
	cmp	r2, #15
	bhi	.L14088
	add	r3, r2, #1
	add	r1, r2, #12
	movw	r5, #:lower16:.LANCHOR0
	mov	r6, r0
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR0
	strb	r3, [r0, #44]
	strb	r2, [r4, #120]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	strb	r2, [r5, #3142]
	strb	r2, [r5, #3155]
	cmp	r3, #15
	bhi	.L14088
	add	r1, r3, #12
	add	r0, r3, #1
	strb	r3, [r5, #3156]
	strb	r3, [r5, #3162]
	mov	r2, #0
	str	r4, [r6, r1, lsl #2]
	add	r1, r5, #3184
	strb	r0, [r6, #44]
	strb	r3, [r5, #3174]
	strb	r3, [r4, #121]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14088
	str	r0, [r4, #88]
	mov	r2, #0
	ldr	r1, .L14154
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14088
	str	r0, [r4, #92]
	mov	r2, #0
	ldr	r1, .L14154+4
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L14088
	str	r3, [r4, #144]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r8, r0
	str	r0, [r4, #148]
	beq	.L14092
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L14091
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L14091:
	str	r0, [r8]
	ldr	r3, [r4, #148]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L14092
	str	r4, [r3, #32]
	ldr	r2, [r4, #148]
	movw	r3, #:lower16:ecm_qc_notify_complete
	movt	r3, #:upper16:ecm_qc_notify_complete
	ldr	r0, .L14154+8
	str	r3, [r2, #28]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L14092
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L14153
.L14093:
	movw	r2, #:lower16:.LANCHOR4
	movw	r3, #3138
	movt	r2, #:upper16:.LANCHOR4
	movw	r1, #:lower16:ecm_qc_open
	ldrh	r0, [r2, r3]
	movw	r3, #:lower16:ecm_qc_close
	movt	r1, #:upper16:ecm_qc_open
	movt	r3, #:upper16:ecm_qc_close
	str	r1, [r4, #112]
	str	r3, [r4, #116]
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	bne	.L14096
	mov	r5, r0
.L14087:
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14153:
	ldrb	r1, [r5, #3186]	@ zero_extendqisi2
	ldrb	r2, [r5, #3198]	@ zero_extendqisi2
	ldrb	r3, [r5, #3210]	@ zero_extendqisi2
	ldr	r0, .L14154+12
	strb	r1, [r5, #3262]
	strb	r2, [r5, #3274]
	strb	r3, [r5, #3286]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L14094
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L14093
	ldrb	r3, [r5, #3210]	@ zero_extendqisi2
	ldrb	r1, [r5, #3186]	@ zero_extendqisi2
	ldrb	r2, [r5, #3198]	@ zero_extendqisi2
	ldr	r0, .L14154+16
	strb	r1, [r5, #3338]
	strb	r2, [r5, #3350]
	strb	r3, [r5, #3362]
	bl	usb_copy_descriptors
	ldr	r3, [r4, #8]
	str	r0, [r4, #12]
	cmp	r3, #0
	bne	.L14093
.L14094:
	ldr	r0, [r4, #12]
	mvn	r5, #11
	cmp	r0, #0
	beq	.L14100
.L14106:
	bl	kfree
.L14099:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L14100
	bl	kfree
.L14100:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L14101
	bl	kfree
.L14101:
	ldr	r3, [r4, #148]
	cmp	r3, #0
	beq	.L14102
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #144]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L14102:
	ldr	r3, [r4, #144]
	movw	r0, #:lower16:.LC1073
	ldr	r1, .L14154+20
	movt	r0, #:upper16:.LC1073
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	mov	r3, r5
	ldr	r2, [r4]
	bl	printk
	b	.L14087
.L14096:
	ldr	r5, [r6, #24]
	add	r0, r2, #3120
	movw	ip, #:lower16:.LC1070
	ldr	r6, [r4, #92]
	movt	ip, #:upper16:.LC1070
	movw	r3, #:lower16:.LC1071
	ldr	lr, [r4, #144]
	movt	r3, #:upper16:.LC1071
	ldr	r1, [r7]
	ldr	r5, [r5]
	ldr	r2, [lr, #4]
	ldr	lr, [r4, #88]
	add	r1, r1, #32
	ldr	r5, [r5, #20]
	str	r2, [sp, #8]
	ldr	r4, [r6, #4]
	movw	r2, #:lower16:.LC1072
	movt	r2, #:upper16:.LC1072
	cmp	r5, #2
	mov	r5, #0
	movhi	r3, ip
	str	r4, [sp, #4]
	ldr	ip, [lr, #4]
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L14087
.L14088:
	mvn	r5, #18
.L14090:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	bne	.L14106
	b	.L14099
.L14092:
	mvn	r5, #11
	b	.L14090
.L14155:
	.align	2
.L14154:
	.word	.LANCHOR0+3196
	.word	.LANCHOR0+3208
	.word	.LANCHOR0+3220
	.word	.LANCHOR0+3296
	.word	.LANCHOR0+3372
	.word	.LANCHOR5+72
	.fnend
	.size	ecm_qc_bind, .-ecm_qc_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_bind, %function
mbim_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	ldr	r1, .L14221
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r7, [r0, #24]
	movw	r0, #:lower16:.LC388
	.pad #20
	sub	sp, sp, #20
	movt	r0, #:upper16:.LC388
	bl	printk
	str	r7, [r4, #84]
	ldrb	r3, [r6, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L14157
	add	r1, r3, #12
	add	r2, r3, #1
	movw	r5, #:lower16:.LANCHOR0
	str	r4, [r6, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR0
	strb	r2, [r6, #44]
	strb	r3, [r4, #196]
	ldrb	r0, [r6, #44]	@ zero_extendqisi2
	strb	r3, [r5, #2598]
	strb	r3, [r5, #3426]
	strb	r3, [r5, #3435]
	cmp	r0, #15
	bhi	.L14157
	add	r2, r0, #12
	add	r3, r0, #1
	strb	r0, [r5, #2610]
	mov	r8, #0
	strb	r0, [r5, #2622]
	add	r1, r5, #3440
	str	r4, [r6, r2, lsl #2]
	mov	r2, r8
	strb	r3, [r6, #44]
	strb	r0, [r5, #3436]
	str	r7, [r4, #140]
	str	r4, [r4, #144]
	strb	r0, [r4, #197]
	strb	r8, [r4, #198]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r9, r0, #0
	beq	.L14215
	movw	r0, #:lower16:.LC1075
	ldr	r1, .L14221
	movt	r0, #:upper16:.LC1075
	bl	printk
	str	r7, [r9]
	mov	r2, r8
	ldr	r1, .L14221+4
	str	r9, [r4, #148]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r9, r0, #0
	beq	.L14216
	movw	r0, #:lower16:.LC1077
	ldr	r1, .L14221
	movt	r0, #:upper16:.LC1077
	bl	printk
	str	r7, [r9]
	mov	r2, r8
	ldr	r1, .L14221+8
	str	r9, [r4, #152]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r8, r0, #0
	beq	.L14217
	movw	r0, #:lower16:.LC1079
	ldr	r1, .L14221
	movt	r0, #:upper16:.LC1079
	bl	printk
	str	r8, [r4, #156]
	ldr	r3, [r8, #8]
	mov	r1, #208
	str	r7, [r8]
	mov	r0, r8
	ldr	r3, [r3, #8]
	blx	r3
	subs	r7, r0, #0
	streq	r7, [r4, #160]
	beq	.L14163
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r7]
	beq	.L14165
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	mov	r9, r0
	str	r0, [r7]
	beq	.L14218
.L14165:
	mov	r3, #16
	movw	r0, #:lower16:.LC1080
	ldr	r1, .L14221
	movt	r0, #:upper16:.LC1080
	str	r3, [r7, #4]
	str	r7, [r4, #160]
	ldr	r7, .L14221+12
	bl	printk
	ldr	r2, [r4, #160]
	movw	r3, #:lower16:mbim_notify_complete
	movt	r3, #:upper16:mbim_notify_complete
	add	r0, r7, #12
	str	r4, [r2, #32]
	ldr	r2, [r4, #160]
	str	r3, [r2, #28]
	ldr	r3, [r4, #132]
	cmp	r3, #7
	movne	r3, #4064
	moveq	r3, #2048
	strh	r3, [r7, #9]	@ unaligned
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L14169
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L14219
.L14168:
	ldrb	r3, [r6, #20]	@ zero_extendqisi2
	sub	r2, r3, #2
	cmp	r2, #2
	bhi	.L14172
	movw	r2, #:lower16:.LANCHOR4
	movw	r1, #3162
	movt	r2, #:upper16:.LANCHOR4
	ldrh	r2, [r2, r1]
	tst	r2, #4
	bne	.L14220
.L14173:
	add	r3, r3, #48
	strb	r3, [r5, #250]
.L14172:
	ldr	ip, [r6, #24]
	movw	r1, #:lower16:.LC1070
	movw	r3, #:lower16:.LC1071
	ldr	r2, [r4, #156]
	movt	r1, #:upper16:.LC1070
	movw	r0, #:lower16:.LC1083
	ldr	lr, [r4, #152]
	movt	r3, #:upper16:.LC1071
	movt	r0, #:upper16:.LC1083
	ldr	r6, [ip]
	ldr	r5, [r2, #4]
	ldr	ip, [r4, #148]
	ldrb	r2, [r4, #136]	@ zero_extendqisi2
	ldr	r4, [r6, #20]
	str	r5, [sp, #8]
	ldr	lr, [lr, #4]
	mov	r5, #0
	cmp	r4, #2
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	movhi	r3, r1
	ldr	r1, .L14221
	str	ip, [sp]
	bl	printk
	b	.L14156
.L14216:
	movw	r0, #:lower16:.LC1076
	ldr	r1, .L14221
	mvn	r5, #18
	movt	r0, #:upper16:.LC1076
	bl	printk
.L14159:
	movw	r0, #:lower16:.LC1084
	mov	r3, r5
	ldr	r1, .L14221
	movt	r0, #:upper16:.LC1084
	ldr	r2, [r4]
	bl	printk
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L14176
	bl	kfree
.L14176:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L14177
	bl	kfree
.L14177:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L14178
	bl	kfree
.L14178:
	ldr	r3, [r4, #160]
	cmp	r3, #0
	beq	.L14179
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L14179:
	ldr	r3, [r4, #156]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #152]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #148]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
.L14156:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L14215:
	movw	r0, #:lower16:.LC1074
	ldr	r1, .L14221
	mvn	r5, #18
	movt	r0, #:upper16:.LC1074
	bl	printk
	b	.L14159
.L14219:
	ldrb	r1, [r5, #3442]	@ zero_extendqisi2
	add	r0, r7, #96
	ldrb	r2, [r5, #3454]	@ zero_extendqisi2
	ldrb	r3, [r5, #3466]	@ zero_extendqisi2
	strb	r1, [r5, #3538]
	strb	r2, [r5, #3550]
	strb	r3, [r5, #3562]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L14169
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L14168
	ldrb	r1, [r5, #3442]	@ zero_extendqisi2
	add	r0, r7, #180
	ldrb	r2, [r5, #3454]	@ zero_extendqisi2
	ldrb	r3, [r5, #3466]	@ zero_extendqisi2
	strb	r1, [r5, #3622]
	strb	r2, [r5, #3634]
	strb	r3, [r5, #3646]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L14168
.L14169:
	mvn	r5, #11
	b	.L14159
.L14217:
	movw	r0, #:lower16:.LC1078
	ldr	r1, .L14221
	mvn	r5, #18
	movt	r0, #:upper16:.LC1078
	bl	printk
	b	.L14159
.L14218:
	ldr	r3, [r8, #8]
	mov	r1, r7
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	str	r9, [r4, #160]
.L14163:
	movw	r0, #:lower16:.LC1081
	ldr	r1, .L14221
	mvn	r5, #11
	movt	r0, #:upper16:.LC1081
	bl	printk
	b	.L14159
.L14220:
	movw	r1, #:lower16:.LC1082
	ldr	r2, .L14221
	movt	r1, #:upper16:.LC1082
	ldr	r0, .L14221+16
	bl	__dynamic_pr_debug
	ldrb	r3, [r6, #20]	@ zero_extendqisi2
	b	.L14173
.L14157:
	mvn	r5, #18
	b	.L14159
.L14222:
	.align	2
.L14221:
	.word	.LANCHOR5+84
	.word	.LANCHOR0+3452
	.word	.LANCHOR0+3464
	.word	.LANCHOR0+3476
	.word	.LANCHOR4+3144
	.fnend
	.size	mbim_bind, .-mbim_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_bind, %function
ecm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #16
	sub	sp, sp, #16
	ldr	r7, [r0, #24]
	cmp	r3, #15
	bhi	.L14224
	add	r1, r3, #12
	add	r2, r3, #1
	mov	r5, r0
	movw	r6, #:lower16:.LANCHOR0
	str	r4, [r0, r1, lsl #2]
	movt	r6, #:upper16:.LANCHOR0
	strb	r2, [r0, #44]
	strb	r3, [r4, #148]
	ldrb	r0, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r6, #3718]
	strb	r3, [r6, #3726]
	strb	r3, [r6, #3739]
	cmp	r0, #15
	bls	.L14225
.L14224:
	ldr	r3, [r4, #168]
	mvn	r5, #18
.L14226:
	cmp	r3, #0
	beq	.L14230
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #164]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L14230:
	ldr	r3, [r4, #164]
	movw	r1, #:lower16:.LC1086
	movt	r1, #:upper16:.LC1086
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r7]
	mov	r3, r5
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L14223:
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14225:
	add	r1, r0, #12
	add	r3, r0, #1
	strb	r0, [r6, #3740]
	strb	r0, [r6, #3746]
	mov	r2, #0
	str	r4, [r5, r1, lsl #2]
	ldr	r1, .L14267
	strb	r3, [r5, #44]
	strb	r0, [r6, #3758]
	strb	r0, [r4, #149]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14224
	str	r0, [r4, #88]
	mov	r2, #0
	ldr	r1, .L14267+4
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14224
	str	r0, [r4, #92]
	mov	r2, #0
	add	r1, r6, #3792
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L14224
	str	r3, [r4, #164]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r8, r0
	str	r0, [r4, #168]
	beq	.L14240
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L14231
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L14231:
	str	r0, [r8]
	ldr	r3, [r4, #168]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L14242
	str	r4, [r3, #32]
	ldr	r0, [r4, #168]
	movw	r3, #:lower16:ecm_notify_complete
	movt	r3, #:upper16:ecm_notify_complete
	ldrb	r1, [r6, #3770]	@ zero_extendqisi2
	ldrb	r2, [r6, #3782]	@ zero_extendqisi2
	str	r3, [r0, #28]
	ldr	r0, [r4, #20]
	ldrb	r3, [r6, #3794]	@ zero_extendqisi2
	strb	r1, [r6, #3806]
	strb	r2, [r6, #3818]
	strb	r1, [r6, #3842]
	ldr	r1, [r0, #24]
	ldr	r0, .L14267+8
	strb	r3, [r6, #3830]
	strb	r2, [r6, #3854]
	strb	r3, [r6, #3866]
	ldr	r6, [r1]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L14234
	ldr	r3, [r6, #20]
	cmp	r3, #2
	bhi	.L14266
.L14233:
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #3186
	movt	r3, #:upper16:.LANCHOR4
	movw	r1, #:lower16:ecm_open
	ldrh	r3, [r3, r2]
	movw	r2, #:lower16:ecm_close
	movt	r1, #:upper16:ecm_open
	movt	r2, #:upper16:ecm_close
	str	r1, [r4, #136]
	str	r2, [r4, #140]
	ubfx	r3, r3, #2, #1
	cmp	r3, #0
	moveq	r5, r3
	beq	.L14223
	ldr	r3, [r5, #24]
	ldr	r1, [r7]
	ldr	r3, [r3]
	add	r1, r1, #32
	ldr	r0, [r3, #20]
	cmp	r0, #4
	bhi	.L14244
	movw	r2, #:lower16:.LC1070
	movw	r3, #:lower16:.LC1071
	movt	r2, #:upper16:.LC1070
	cmp	r0, #2
	movt	r3, #:upper16:.LC1071
	movhi	r3, r2
.L14236:
	ldr	ip, [r4, #88]
	movw	r2, #:lower16:.LC1072
	mov	r5, #0
	ldr	r0, [r4, #164]
	movt	r2, #:upper16:.LC1072
	ldr	lr, [r4, #92]
	ldr	r4, [r0, #4]
	ldr	r0, .L14267+12
	str	r4, [sp, #8]
	ldr	lr, [lr, #4]
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L14223
.L14242:
	mvn	r5, #11
	b	.L14226
.L14240:
	mvn	r5, #11
	b	.L14230
.L14266:
	ldr	r0, .L14267+16
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L14234
	ldr	r3, [r6, #20]
	cmp	r3, #4
	bls	.L14233
	ldr	r0, .L14267+20
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L14233
.L14234:
	ldr	r0, [r4, #16]
	mvn	r5, #11
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #168]
	b	.L14226
.L14244:
	movw	r3, #:lower16:.LC1085
	movt	r3, #:upper16:.LC1085
	b	.L14236
.L14268:
	.align	2
.L14267:
	.word	.LANCHOR0+3768
	.word	.LANCHOR0+3780
	.word	.LANCHOR0+3876
	.word	.LANCHOR4+3168
	.word	.LANCHOR0+3920
	.word	.LANCHOR0+3964
	.fnend
	.size	ecm_bind, .-ecm_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_bind, %function
f_audio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR4
	mov	r6, r0
	strd	r8, [sp, #16]
	movt	r7, #:upper16:.LANCHOR4
	movw	r9, #3210
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r7, r9]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r1, #136]
	ldr	r8, [r0, #24]
	tst	r2, #4
	movweq	r5, #:lower16:.LANCHOR0
	uxtbeq	r2, r3
	movteq	r5, #:upper16:.LANCHOR0
	strbeq	r2, [r5, #4023]
	bne	.L14301
.L14271:
	movw	r9, #3234
	strb	r2, [r5, #4032]
	ldr	r3, [r4, #164]
	ldrh	r2, [r7, r9]
	tst	r2, #4
	uxtbeq	r2, r3
	strbeq	r2, [r5, #4047]
	bne	.L14302
.L14273:
	movw	r1, #3258
	strb	r2, [r5, #4056]
	ldr	r3, [r4, #140]
	ldrh	r2, [r7, r1]
	tst	r2, #4
	bne	.L14303
.L14274:
	movw	r2, #3282
	ldr	r1, .L14308
	ubfx	r0, r3, #16, #8
	ldrh	r2, [r7, r2]
	movw	ip, #4036
	str	r3, [sp, #4]
	strh	r3, [r5, ip]	@ movhi
	ldr	r3, [r4, #168]
	strb	r0, [r1, #2]
	tst	r2, #4
	bne	.L14304
.L14275:
	ldrb	r2, [r6, #44]	@ zero_extendqisi2
	movw	ip, #4060
	ubfx	r0, r3, #16, #8
	ldr	r1, .L14308+4
	str	r3, [sp, #4]
	strh	r3, [r5, ip]	@ movhi
	cmp	r2, #15
	strb	r0, [r1, #2]
	bhi	.L14305
	add	r3, r2, #1
	add	r1, r2, #12
	strb	r2, [r5, #4066]
	uxtb	r3, r3
	str	r4, [r6, r1, lsl #2]
	cmp	r3, #15
	strb	r3, [r6, #44]
	bhi	.L14279
	add	r1, r3, #12
	add	r2, r2, #2
	strb	r3, [r5, #16]
	mov	r9, #0
	strb	r3, [r5, #4078]
	str	r4, [r6, r1, lsl #2]
	strb	r2, [r6, #44]
	strb	r9, [r4, #248]
	ldrb	r1, [r6, #44]	@ zero_extendqisi2
	strb	r3, [r5, #4090]
	cmp	r1, #15
	bhi	.L14279
	movw	r7, #:lower16:.LANCHOR7
	add	r2, r1, #12
	strb	r1, [r5, #17]
	movt	r7, #:upper16:.LANCHOR7
	add	r3, r1, #1
	sub	r10, r7, #4048
	str	r4, [r6, r2, lsl #2]
	mov	r2, r9
	sub	r5, r10, #12
	strb	r3, [r6, #44]
	strb	r1, [r7, #-4082]
	strb	r1, [r7, #-4070]
	mov	r1, r5
	strb	r9, [r4, #249]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14306
	str	r0, [r4, #176]
	mov	r2, r9
	mov	r1, r10
	str	r8, [r0]
	str	r5, [r0, #28]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	subs	r5, r0, #0
	beq	.L14307
	str	r5, [r4, #172]
	ldr	r6, .L14308+8
	str	r8, [r5]
	ldrb	r2, [r7, #-4058]	@ zero_extendqisi2
	str	r10, [r5, #28]
	ldr	r1, [r4, #20]
	ldrb	r3, [r7, #-4046]	@ zero_extendqisi2
	mov	r0, r6
	and	r2, r2, #127
	ldr	r1, [r1, #24]
	and	r3, r3, #127
	strb	r2, [r7, #-4020]
	strb	r3, [r7, #-3988]
	ldr	r7, [r1]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L14282
	ldr	r3, [r7, #20]
	cmp	r3, #2
	bhi	.L14283
.L14284:
	mov	r0, #0
.L14269:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L14283:
	mov	r0, r6
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	bne	.L14284
	ldr	r0, [r4, #16]
.L14282:
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	mov	r3, #0
	mvn	r0, #11
	str	r3, [r5]
	b	.L14269
.L14304:
	movw	r1, #:lower16:.LC1087
	ldr	r2, .L14308+12
	movt	r1, #:upper16:.LC1087
	ldr	r0, .L14308+16
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #168]
	b	.L14275
.L14302:
	movw	r1, #:lower16:.LC1087
	ldr	r2, .L14308+20
	movt	r1, #:upper16:.LC1087
	ldr	r0, .L14308+24
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #164]
	ldrh	r1, [r7, r9]
	uxtb	r2, r3
	tst	r1, #4
	strb	r2, [r5, #4047]
	beq	.L14273
	movw	r1, #:lower16:.LC1087
	ldr	r2, .L14308+20
	movt	r1, #:upper16:.LC1087
	ldr	r0, .L14308+24
	bl	__dynamic_pr_debug
	ldrb	r2, [r4, #164]	@ zero_extendqisi2
	b	.L14273
.L14303:
	movw	r1, #:lower16:.LC1087
	ldr	r2, .L14308+28
	movt	r1, #:upper16:.LC1087
	ldr	r0, .L14308+32
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #140]
	b	.L14274
.L14301:
	movw	r1, #:lower16:.LC1087
	ldr	r2, .L14308+36
	movw	r5, #:lower16:.LANCHOR0
	movt	r1, #:upper16:.LC1087
	ldr	r0, .L14308+40
	movt	r5, #:upper16:.LANCHOR0
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #136]
	ldrh	r1, [r7, r9]
	uxtb	r2, r3
	tst	r1, #4
	strb	r2, [r5, #4023]
	beq	.L14271
	movw	r1, #:lower16:.LC1087
	ldr	r2, .L14308+36
	movt	r1, #:upper16:.LC1087
	ldr	r0, .L14308+40
	bl	__dynamic_pr_debug
	ldrb	r2, [r4, #136]	@ zero_extendqisi2
	b	.L14271
.L14279:
	ldr	r2, .L14308+44
	movw	r0, #:lower16:.LC1089
	movt	r0, #:upper16:.LC1089
	mov	r1, r2
	bl	printk
	mvn	r0, #18
	b	.L14269
.L14306:
	ldr	r2, .L14308+44
	movw	r0, #:lower16:.LC1090
	movt	r0, #:upper16:.LC1090
	mov	r1, r2
	bl	printk
	mvn	r0, #18
	b	.L14269
.L14307:
	ldr	r2, .L14308+44
	movw	r0, #:lower16:.LC1091
	movt	r0, #:upper16:.LC1091
	mov	r1, r2
	bl	printk
	mvn	r0, #11
	b	.L14269
.L14305:
	ldr	r2, .L14308+44
	movw	r0, #:lower16:.LC1088
	movt	r0, #:upper16:.LC1088
	mov	r1, r2
	bl	printk
	mvn	r0, #18
	b	.L14269
.L14309:
	.align	2
.L14308:
	.word	.LANCHOR0+4036
	.word	.LANCHOR0+4060
	.word	.LANCHOR7-3972
	.word	.LANCHOR5+188
	.word	.LANCHOR4+3264
	.word	.LANCHOR5+128
	.word	.LANCHOR4+3216
	.word	.LANCHOR5+160
	.word	.LANCHOR4+3240
	.word	.LANCHOR5+96
	.word	.LANCHOR4+3192
	.word	.LANCHOR5+216
	.fnend
	.size	f_audio_bind, .-f_audio_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_bind, %function
ncm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #16
	sub	sp, sp, #16
	ldr	r7, [r0, #24]
	cmp	r3, #15
	bhi	.L14311
	add	r1, r3, #12
	add	r2, r3, #1
	mov	r5, r0
	movw	r6, #:lower16:.LANCHOR7
	str	r4, [r0, r1, lsl #2]
	movt	r6, #:upper16:.LANCHOR7
	strb	r2, [r0, #44]
	strb	r3, [r4, #148]
	ldrb	r0, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r6, #-3894]
	strb	r3, [r6, #-3886]
	strb	r3, [r6, #-3873]
	cmp	r0, #15
	bls	.L14358
.L14311:
	mvn	r5, #18
.L14313:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #168]
	cmp	r3, #0
	beq	.L14323
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #164]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L14323:
	ldr	r3, [r4, #164]
	movw	r1, #:lower16:.LC1086
	movt	r1, #:upper16:.LC1086
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r7]
	mov	r3, r5
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L14310:
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14358:
	add	r1, r0, #12
	add	r3, r0, #1
	strb	r0, [r6, #-3872]
	strb	r0, [r6, #-3866]
	mov	r2, #0
	str	r4, [r5, r1, lsl #2]
	ldr	r1, .L14360
	strb	r3, [r5, #44]
	strb	r0, [r6, #-3854]
	strb	r0, [r4, #149]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14311
	str	r0, [r4, #88]
	mov	r2, #0
	ldr	r1, .L14360+4
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14311
	str	r0, [r4, #92]
	mov	r2, #0
	ldr	r1, .L14360+8
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L14311
	str	r3, [r4, #164]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r8, r0
	str	r0, [r4, #168]
	beq	.L14315
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L14314
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L14314:
	str	r0, [r8]
	ldr	r3, [r4, #168]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L14315
	str	r4, [r3, #32]
	ldr	r2, [r4, #168]
	movw	r3, #:lower16:ncm_notify_complete
	movt	r3, #:upper16:ncm_notify_complete
	ldrb	r0, [r6, #-3842]	@ zero_extendqisi2
	ldrb	r1, [r6, #-3830]	@ zero_extendqisi2
	str	r3, [r2, #28]
	ldr	r3, [r4, #20]
	ldrb	r2, [r6, #-3818]	@ zero_extendqisi2
	strb	r0, [r6, #-3806]
	ldr	r0, .L14360+12
	strb	r1, [r6, #-3794]
	ldr	r3, [r3, #24]
	strb	r2, [r6, #-3782]
	ldr	r6, [r3]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L14319
	ldr	r3, [r6, #20]
	cmp	r3, #2
	bhi	.L14359
.L14317:
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #3306
	movt	r3, #:upper16:.LANCHOR4
	movw	r1, #:lower16:ncm_open
	ldrh	r3, [r3, r2]
	movw	r2, #:lower16:ncm_close
	movt	r1, #:upper16:ncm_open
	movt	r2, #:upper16:ncm_close
	str	r1, [r4, #136]
	str	r2, [r4, #140]
	ubfx	r3, r3, #2, #1
	cmp	r3, #0
	moveq	r5, r3
	beq	.L14310
	ldr	lr, [r5, #24]
	movw	r0, #:lower16:.LC1071
	movw	r3, #:lower16:.LC1070
	ldr	ip, [r4, #164]
	movt	r0, #:upper16:.LC1071
	movt	r3, #:upper16:.LC1070
	ldr	r2, [r4, #92]
	ldr	r1, [r7]
	ldr	r5, [lr]
	ldr	lr, [ip, #4]
	ldr	ip, [r4, #88]
	add	r1, r1, #32
	ldr	r4, [r5, #20]
	mov	r5, #0
	str	lr, [sp, #8]
	ldr	lr, [r2, #4]
	movw	r2, #:lower16:.LC1092
	movt	r2, #:upper16:.LC1092
	cmp	r4, #2
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	movls	r3, r0
	ldr	r0, .L14360+16
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L14310
.L14315:
	mvn	r5, #11
	b	.L14313
.L14359:
	ldr	r0, .L14360+20
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	bne	.L14317
.L14319:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	b	.L14317
.L14361:
	.align	2
.L14360:
	.word	.LANCHOR7-3844
	.word	.LANCHOR7-3832
	.word	.LANCHOR7-3820
	.word	.LANCHOR7-3772
	.word	.LANCHOR4+3288
	.word	.LANCHOR7-3724
	.fnend
	.size	ncm_bind, .-ncm_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_bind, %function
fsg_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #24]
	.pad #20
	sub	sp, sp, #20
	ldr	r9, [r3]
	str	r9, [r1, #84]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L14407
	mov	r7, r1
	add	ip, r3, #12
	add	r1, r3, #1
	movw	r6, #:lower16:.LANCHOR7
	str	r7, [r0, ip, lsl #2]
	movw	r2, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR7
	strb	r1, [r0, #44]
	movt	r2, #:upper16:.LANCHOR0
	movw	r0, #:lower16:.LC470
	strh	r3, [r7, #92]	@ movhi
	ldr	r10, [r9, #28]
	movt	r0, #:upper16:.LC470
	ldrb	r8, [r6, #-3673]	@ zero_extendqisi2
	strb	r3, [r2, #2658]
	add	r5, r9, #8
	mov	r1, r10
	bl	strcmp
	cmp	r0, #0
	and	r8, r8, #3
	bne	.L14364
	ldr	r3, [r9, #8]
	cmp	r8, #3
	sub	r4, r3, #12
	mov	fp, r3
	beq	.L14464
	movw	r0, #:lower16:.LC473
	mov	r1, r10
	movt	r0, #:upper16:.LC473
	bl	strcmp
	cmp	r0, #0
	bne	.L14374
.L14375:
	cmp	r8, #2
	beq	.L14465
.L14374:
	cmp	fp, r5
	beq	.L14377
.L14373:
	ldrb	r8, [r6, #-3673]	@ zero_extendqisi2
	and	r8, r8, #3
.L14406:
	movw	r3, #:lower16:.LC472
	movw	r10, #:lower16:_ctype
	movw	fp, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LC472
	movt	fp, #:upper16:.LANCHOR1
	movt	r10, #:upper16:_ctype
	mov	r2, r7
	str	r3, [sp, #4]
	mov	r7, fp
	mov	fp, r10
	b	.L14401
.L14384:
	ldr	r4, [r4, #12]
	cmp	r5, r4
	sub	r4, r4, #12
	beq	.L14466
.L14401:
	ldr	r1, [r4]
	cmp	r1, #0
	bne	.L14384
	cmp	r8, #0
	beq	.L14384
	ldr	r10, [r4, #4]
	ldrb	r1, [r10]	@ zero_extendqisi2
	cmp	r1, #101
	bne	.L14384
	ldrb	r1, [r10, #2]	@ zero_extendqisi2
	cmp	r1, #45
	beq	.L14385
	mov	r1, #45
	mov	r0, r10
	str	r2, [sp, #8]
	bl	strrchr
	subs	r3, r0, #0
	ldr	r2, [sp, #8]
	beq	.L14386
	cmp	r8, #2
	beq	.L14388
	cmp	r8, #3
	ldrb	r1, [r3, #2]	@ zero_extendqisi2
	bne	.L14457
	cmp	r1, #115
	str	r3, [sp, #8]
	beq	.L14384
	ldr	r1, [r9, #28]
	str	r2, [sp, #12]
	ldr	r0, [sp, #4]
	bl	strcmp
	cmp	r0, #0
	ldr	r3, [sp, #8]
	ldr	r2, [sp, #12]
	bne	.L14390
	ldrb	r1, [r3, #1]	@ zero_extendqisi2
	cmp	r1, #105
	bne	.L14390
	b	.L14384
.L14364:
	movw	r0, #:lower16:.LC473
	mov	r1, r10
	movt	r0, #:upper16:.LC473
	bl	strcmp
	ldr	r3, [r9, #8]
	cmp	r0, #0
	sub	r4, r3, #12
	mov	fp, r3
	bne	.L14374
	cmp	r8, #3
	bne	.L14375
	cmp	r5, r3
	beq	.L14377
	movw	fp, #:lower16:.LC1068
	mov	r10, r4
	movt	fp, #:upper16:.LC1068
	b	.L14376
.L14467:
	ldr	r10, [r10, #12]
	cmp	r5, r10
	sub	r10, r10, #12
	beq	.L14373
.L14376:
	mov	r1, fp
	ldr	r0, [r10, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L14467
	cmp	r10, #0
	beq	.L14406
	ldr	r3, [r10]
	cmp	r3, #0
	ldreq	r2, .L14474
	bne	.L14406
.L14463:
	mov	r1, r10
	mov	r0, r9
	bl	ep_matches.part.13
	cmp	r0, #0
	beq	.L14460
	mov	r4, r10
	b	.L14370
.L14466:
	mov	r7, r2
.L14377:
	ldr	r0, [r7, #84]
	movw	r1, #:lower16:.LC1093
	movt	r1, #:upper16:.LC1093
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #65012
	movt	r0, 65535
.L14362:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14386:
	mov	r0, r10
	str	r2, [sp, #8]
	bl	strlen
	ldr	r2, [sp, #8]
	add	r3, r10, r0
.L14390:
	ldrb	r1, [r3, #-1]	@ zero_extendqisi2
	ldrb	r0, [fp, r1]	@ zero_extendqisi2
	tst	r0, #4
	bne	.L14385
	ldr	r0, .L14474+4
	ldrsb	r0, [r0]
	cmp	r0, #0
	blt	.L14468
	cmp	r1, #116
	bne	.L14384
.L14385:
	ldr	r3, .L14474+8
	ldrh	r1, [r3, #-8]
	cmp	r1, #0
	ldrheq	r1, [r4, #20]
	strheq	r1, [r3, #-8]	@ movhi
	cmp	r8, #1
	ubfx	r0, r1, #0, #11
	beq	.L14394
	cmp	r8, #3
	bne	.L14393
	ldr	r3, [r9, #20]
	cmp	r3, #2
	movls	ip, #1
	movhi	ip, #0
	cmp	r0, #64
	movls	ip, #0
	cmp	ip, #0
	bne	.L14384
.L14394:
	ldrh	ip, [r4, #20]
	cmp	ip, r0
	bcc	.L14384
	ldr	ip, [r9, #20]
	cmp	ip, #2
	bhi	.L14393
	cmp	r0, #1024
	bcs	.L14384
	tst	r1, #6144
	bne	.L14384
.L14393:
	ldrb	ip, [r6, #-3674]	@ zero_extendqisi2
	ldr	r0, [r4, #4]
	and	ip, ip, #128
	strb	ip, [r6, #-3674]
	ldrb	r1, [r0, #2]	@ zero_extendqisi2
	ldrb	r1, [fp, r1]	@ zero_extendqisi2
	tst	r1, #4
	bne	.L14469
	ldr	r1, [r7, #3228]
	add	r1, r1, #1
	cmp	r1, #15
	str	r1, [r7, #3228]
	bhi	.L14384
	orr	r3, ip, r1
	mov	r7, r2
	uxtb	r3, r3
	strb	r3, [r6, #-3674]
.L14398:
	cmp	r8, #2
	bne	.L14399
	ldrh	r2, [r4, #20]
	ldr	r1, .L14474+8
	cmp	r2, #64
	movge	r2, #64
	strh	r2, [r1, #-8]	@ movhi
.L14399:
	mov	r2, #0
	cmp	r4, #0
	strb	r3, [r4, #25]
	str	r2, [r4, #28]
	str	r2, [r4, #32]
	beq	.L14377
.L14400:
	ldr	r3, [r7, #88]
	mov	r0, r9
	mov	r2, #0
	ldr	r1, .L14474+8
	str	r3, [r4]
	str	r4, [r7, #100]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L14377
	ldr	r2, [r7, #88]
	mov	r1, #15
	ldr	r0, .L14474+12
	str	r2, [r3]
	ldr	ip, [r7, #20]
	str	r3, [r7, #104]
	ldrb	r2, [r6, #-3674]	@ zero_extendqisi2
	ldrb	r3, [r6, #-3662]	@ zero_extendqisi2
	strb	r1, [r6, #-3614]
	strb	r1, [r6, #-3594]
	ldr	r1, [ip, #24]
	strb	r2, [r6, #-3650]
	strb	r3, [r6, #-3638]
	strb	r2, [r6, #-3626]
	strb	r3, [r6, #-3606]
	ldr	r4, [r1]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r7, #16]
	beq	.L14402
	ldr	r3, [r4, #20]
	cmp	r3, #2
	bhi	.L14470
.L14403:
	mov	r0, #0
	b	.L14362
.L14465:
	ldr	r3, .L14474+8
	ldrsb	r3, [r3, #-10]
	cmp	r3, #0
	bge	.L14374
	cmp	r5, fp
	beq	.L14377
	movw	fp, #:lower16:.LC1069
	mov	r10, r4
	movt	fp, #:upper16:.LC1069
	b	.L14383
.L14471:
	ldr	r10, [r10, #12]
	cmp	r5, r10
	sub	r10, r10, #12
	beq	.L14373
.L14383:
	mov	r1, fp
	ldr	r0, [r10, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L14471
	cmp	r10, #0
	beq	.L14406
	ldr	r3, [r10]
	cmp	r3, #0
	bne	.L14406
	ldr	r2, .L14474+8
	sub	r2, r2, #12
	b	.L14463
.L14464:
	cmp	r5, r3
	beq	.L14377
	movw	r10, #:lower16:.LC1066
	mov	r8, r4
	movt	r10, #:upper16:.LC1066
	b	.L14368
.L14472:
	ldr	r8, [r8, #12]
	cmp	r5, r8
	sub	r8, r8, #12
	beq	.L14369
.L14368:
	mov	r1, r10
	ldr	r0, [r8, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L14472
	cmp	r8, #0
	beq	.L14369
	ldr	r3, [r8]
	cmp	r3, #0
	bne	.L14369
	ldr	r2, .L14474
	mov	r1, r8
	mov	r0, r9
	bl	ep_matches.part.13
	cmp	r0, #0
	bne	.L14409
	ldr	r4, [r9, #8]
	cmp	r5, r4
	sub	r4, r4, #12
	beq	.L14377
.L14369:
	movw	r10, #:lower16:.LC1067
	mov	r8, r4
	movt	r10, #:upper16:.LC1067
	b	.L14372
.L14473:
	ldr	r8, [r8, #12]
	cmp	r5, r8
	sub	r8, r8, #12
	beq	.L14373
.L14372:
	mov	r1, r10
	ldr	r0, [r8, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L14473
	cmp	r8, #0
	beq	.L14373
	ldr	r3, [r8]
	cmp	r3, #0
	bne	.L14373
	ldr	r2, .L14474
	mov	r1, r8
	mov	r0, r9
	bl	ep_matches.part.13
	cmp	r0, #0
	beq	.L14460
.L14409:
	mov	r4, r8
.L14370:
	mov	r3, #0
	str	r3, [r4, #28]
	str	r3, [r4, #32]
	b	.L14400
.L14470:
	ldr	r0, .L14474+16
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r7, #8]
	beq	.L14461
	ldr	r3, [r4, #20]
	cmp	r3, #4
	bls	.L14403
	ldr	r0, .L14474+20
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r7, #12]
	bne	.L14403
.L14461:
	ldr	r0, [r7, #16]
.L14402:
	bl	kfree
	ldr	r0, [r7, #8]
	bl	kfree
	ldr	r0, [r7, #12]
	bl	kfree
	b	.L14377
.L14388:
	ldrb	r1, [r3, #1]	@ zero_extendqisi2
	cmp	r1, #98
	bne	.L14384
	b	.L14390
.L14457:
	cmp	r1, #115
	bne	.L14384
	b	.L14390
.L14407:
	mvn	r0, #18
	b	.L14362
.L14469:
	mov	r7, r2
	add	r0, r0, #2
	mov	r2, #10
	mov	r1, #0
	bl	simple_strtoul
	ldrb	r3, [r6, #-3674]	@ zero_extendqisi2
	orr	r3, r3, r0
	uxtb	r3, r3
	strb	r3, [r6, #-3674]
	b	.L14398
.L14468:
	cmp	r1, #110
	bne	.L14384
	b	.L14385
.L14460:
	ldr	fp, [r9, #8]
	sub	r4, fp, #12
	b	.L14374
.L14475:
	.align	2
.L14474:
	.word	.LANCHOR7-3676
	.word	.LANCHOR7-3674
	.word	.LANCHOR7-3664
	.word	.LANCHOR7-3588
	.word	.LANCHOR7-3572
	.word	.LANCHOR7-3556
	.fnend
	.size	fsg_bind, .-fsg_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_bind, %function
ccid_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #8
	sub	sp, sp, #8
	ldr	r5, [r0, #24]
	cmp	r3, #15
	bls	.L14477
	mvn	r3, #18
	movw	r0, #:lower16:.LC1094
	ldr	r1, .L14503
	mov	r2, r3
	movt	r0, #:upper16:.LC1094
	str	r3, [r4, #88]
	bl	printk
	ldr	r0, [r4, #88]
.L14476:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14477:
	movw	r6, #:lower16:.LANCHOR7
	add	r1, r3, #12
	add	r2, r3, #1
	movt	r6, #:upper16:.LANCHOR7
	str	r4, [r0, r1, lsl #2]
	sub	r1, r6, #3520
	strb	r2, [r0, #44]
	mov	r2, #0
	str	r3, [r4, #88]
	strb	r3, [r6, #-3530]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14499
	str	r0, [r4, #100]
	mov	r2, #0
	ldr	r1, .L14503+4
	str	r5, [r0]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14500
	str	r0, [r4, #104]
	mov	r2, #0
	ldr	r1, .L14503+8
	str	r5, [r0]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L14501
	str	r3, [r4, #108]
	ldr	r0, .L14503+12
	str	r5, [r3]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L14483
	ldr	r3, [r5]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L14502
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #3330
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L14488
.L14498:
	mov	r0, #0
	b	.L14476
.L14502:
	ldrb	r1, [r6, #-3506]	@ zero_extendqisi2
	ldrb	r2, [r6, #-3494]	@ zero_extendqisi2
	ldrb	r3, [r6, #-3518]	@ zero_extendqisi2
	ldr	r0, .L14503+16
	strb	r1, [r6, #-3482]
	strb	r2, [r6, #-3470]
	strb	r3, [r6, #-3458]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L14483
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #3330
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r2]
	tst	r3, #4
	beq	.L14498
	ldr	r3, [r5]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	movwhi	r3, #:lower16:.LC1070
	movthi	r3, #:upper16:.LC1070
	bhi	.L14487
.L14488:
	movw	r3, #:lower16:.LC1071
	movt	r3, #:upper16:.LC1071
.L14487:
	ldr	ip, [r4, #104]
	movw	r1, #:lower16:.LC1096
	ldr	lr, [r4, #108]
	movt	r1, #:upper16:.LC1096
	ldr	r2, .L14503
	ldr	r0, .L14503+20
	ldr	lr, [lr, #4]
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L14498
.L14501:
	movw	r0, #:lower16:.LC1076
	ldr	r1, .L14503
	movt	r0, #:upper16:.LC1076
	bl	printk
.L14483:
	ldr	r2, [r4, #108]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r4, #108]
.L14481:
	ldr	r2, [r4, #104]
	mov	r3, #0
	mvn	r0, #18
	str	r3, [r2]
	str	r3, [r4, #104]
	b	.L14476
.L14500:
	movw	r0, #:lower16:.LC1074
	ldr	r1, .L14503
	movt	r0, #:upper16:.LC1074
	bl	printk
	b	.L14481
.L14499:
	movw	r0, #:lower16:.LC1095
	ldr	r1, .L14503
	movt	r0, #:upper16:.LC1095
	bl	printk
	mvn	r0, #18
	b	.L14476
.L14504:
	.align	2
.L14503:
	.word	.LANCHOR5+232
	.word	.LANCHOR7-3508
	.word	.LANCHOR7-3496
	.word	.LANCHOR0+2148
	.word	.LANCHOR0+2172
	.word	.LANCHOR4+3312
	.fnend
	.size	ccid_function_bind, .-ccid_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_bind, %function
qdss_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #3354
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r5, r1
	str	r8, [sp, #16]
	mov	r6, r0
	str	lr, [sp, #20]
	ldrh	r2, [r3, r2]
	ldr	r3, [r0, #24]
	tst	r2, #4
	ldr	r7, [r3]
	bne	.L14557
.L14506:
	ldr	r3, [r7, #20]
	cmp	r3, #2
	bls	.L14558
	ldrb	r3, [r6, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L14510
	add	r1, r3, #12
	add	r2, r3, #1
	movw	r4, #:lower16:.LANCHOR7
	str	r5, [r6, r1, lsl #2]
	movt	r4, #:upper16:.LANCHOR7
	strb	r2, [r6, #44]
	strb	r3, [r5, #89]
	ldrb	ip, [r6, #44]	@ zero_extendqisi2
	strb	r3, [r4, #-3446]
	cmp	ip, #15
	bhi	.L14510
	add	r2, ip, #12
	add	r3, ip, #1
	strb	ip, [r4, #-3434]
	mov	r0, r7
	str	r5, [r6, r2, lsl #2]
	sub	r2, r4, #3424
	strb	r3, [r6, #44]
	add	r1, r2, #8
	strb	ip, [r5, #88]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L14513
	ldr	r2, .L14563
	str	r3, [r5, #108]
	mov	r0, r7
	str	r5, [r3]
	add	r1, r2, #8
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14513
	str	r0, [r5, #104]
	ldr	r2, .L14563+4
	sub	r1, r4, #3376
	str	r5, [r0]
	mov	r0, r7
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L14513
	str	r3, [r5, #100]
	sub	r0, r4, #3328
	str	r5, [r3]
	ldrb	r1, [r4, #-3414]	@ zero_extendqisi2
	ldrb	r2, [r4, #-3394]	@ zero_extendqisi2
	ldrb	r3, [r4, #-3374]	@ zero_extendqisi2
	strb	r1, [r4, #-3362]
	strb	r2, [r4, #-3350]
	strb	r3, [r4, #-3338]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r5, #8]
	beq	.L14516
	ldr	r3, [r7, #20]
	cmp	r3, #4
	bhi	.L14559
.L14515:
	movw	r0, #:lower16:.LC494
	ldr	r1, [r7, #28]
	movt	r0, #:upper16:.LC494
	bl	strcmp
	subs	r4, r0, #0
	movne	r4, #0
	beq	.L14560
.L14505:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14559:
	ldr	r0, .L14563+8
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r5, #12]
	bne	.L14515
.L14516:
	movw	r0, #:lower16:.LC1101
	movt	r0, #:upper16:.LC1101
	bl	printk
.L14512:
	ldr	r4, .L14563+12
	ldrh	r3, [r4, #-14]
	tst	r3, #4
	bne	.L14561
.L14517:
	ldr	r3, [r5, #104]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r5, #100]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r5, #108]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, .L14563+16
	ldrh	r3, [r3, #-2]
	tst	r3, #4
	bne	.L14562
.L14521:
	ldr	r3, [r7, #20]
	cmp	r3, #4
	bls	.L14522
	ldr	r0, [r5, #12]
	cmp	r0, #0
	beq	.L14522
	bl	kfree
	ldr	r3, [r7, #20]
.L14522:
	cmp	r3, #2
	movwls	r4, #65012
	movtls	r4, 65535
	bls	.L14505
	ldr	r0, [r5, #8]
	movw	r4, #65012
	cmp	r0, #0
	movteq	r4, 65535
	beq	.L14505
	bl	kfree
	movt	r4, 65535
	b	.L14505
.L14560:
	mov	r1, #1
	ldr	r0, [r5, #108]
	bl	dwc3_tx_fifo_resize_request
	b	.L14505
.L14557:
	movw	r1, #:lower16:.LC1097
	ldr	r0, .L14563+20
	movt	r1, #:upper16:.LC1097
	bl	__dynamic_pr_debug
	b	.L14506
.L14513:
	movw	r0, #:lower16:.LC1100
	movt	r0, #:upper16:.LC1100
	bl	printk
	b	.L14512
.L14510:
	movw	r0, #:lower16:.LC1099
	mvn	r4, #18
	movt	r0, #:upper16:.LC1099
	bl	printk
	b	.L14505
.L14558:
	movw	r0, #:lower16:.LC1098
	movw	r4, #65012
	movt	r0, #:upper16:.LC1098
	movt	r4, 65535
	bl	printk
	b	.L14505
.L14562:
	movw	r1, #:lower16:.LC704
	sub	r0, r4, #8
	movt	r1, #:upper16:.LC704
	bl	__dynamic_pr_debug
	b	.L14521
.L14561:
	movw	r1, #:lower16:.LC703
	sub	r0, r4, #32
	movt	r1, #:upper16:.LC703
	bl	__dynamic_pr_debug
	b	.L14517
.L14564:
	.align	2
.L14563:
	.word	.LANCHOR7-3404
	.word	.LANCHOR7-3384
	.word	.LANCHOR7-3304
	.word	.LANCHOR4-1024
	.word	.LANCHOR4-1012
	.word	.LANCHOR4+3336
	.fnend
	.size	qdss_bind, .-qdss_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_bind, %function
rmnet_mux_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #24]
	str	r7, [r1, #84]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L14572
	movw	r5, #:lower16:.LANCHOR7
	mov	r4, r1
	mov	r6, r0
	add	r2, r3, #12
	add	r0, r3, #1
	movt	r5, #:upper16:.LANCHOR7
	sub	r1, r5, #3248
	str	r4, [r6, r2, lsl #2]
	mov	r2, #0
	strb	r0, [r6, #44]
	sub	r1, r1, #8
	strb	r3, [r5, #-3266]
	strb	r3, [r4, #360]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14568
	str	r7, [r0]
	mov	r2, #0
	ldr	r1, .L14592
	str	r0, [r4, #92]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14568
	str	r7, [r0]
	mov	r2, #0
	sub	r1, r5, #3232
	str	r0, [r4, #88]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14568
	str	r7, [r0]
	str	r0, [r4, #96]
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L14569
	ldrb	r1, [r5, #-3254]	@ zero_extendqisi2
	ldrb	r2, [r5, #-3242]	@ zero_extendqisi2
	ldrb	r3, [r5, #-3230]	@ zero_extendqisi2
	strb	r1, [r5, #-3218]
	strb	r2, [r5, #-3206]
	strb	r3, [r5, #-3194]
.L14569:
	mov	r3, #0
	add	r2, r4, #256
	ldr	r1, [r4, #380]
	mov	r0, #4
	bl	queue_delayed_work_on
	mov	r0, #0
	b	.L14565
.L14568:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	beq	.L14572
	mov	r2, #0
	mvn	r0, #18
	str	r2, [r3]
.L14565:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14572:
	mvn	r0, #18
	b	.L14565
.L14593:
	.align	2
.L14592:
	.word	.LANCHOR7-3244
	.fnend
	.size	rmnet_mux_bind, .-rmnet_mux_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_bind, %function
f_midi_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 512
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #:lower16:.LANCHOR7
	mov	r4, r1
	movt	r5, #:upper16:.LANCHOR7
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r3, [r5, #-3184]	@ zero_extendqisi2
	.pad #516
	sub	sp, sp, #516
	ldr	r7, [r0, #24]
	cmp	r3, #0
	bne	.L14595
	ldrb	r3, [r7, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bls	.L14596
.L14598:
	mvn	r5, #18
.L14597:
	ldr	r3, [r4, #92]
	cmp	r3, #0
	beq	.L14600
.L14610:
	mov	r2, #0
	str	r2, [r3]
.L14600:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
.L14609:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC1086
	mov	r3, r5
	movt	r1, #:upper16:.LC1086
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L14594:
	mov	r0, r5
	add	sp, sp, #516
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14596:
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r5, #-3184]
	strb	r3, [r7, #48]
.L14595:
	ldrb	r3, [r6, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L14598
	add	r1, r3, #1
	add	r2, r3, #12
	strb	r3, [r5, #-3166]
	uxtb	r1, r1
	str	r4, [r6, r2, lsl #2]
	cmp	r1, #15
	strb	r1, [r6, #44]
	bhi	.L14598
	ldr	r8, .L14628
	add	r0, r1, #12
	add	r3, r3, #2
	strb	r1, [r5, #-3154]
	mov	r2, #0
	str	r4, [r6, r0, lsl #2]
	strb	r1, [r5, #-3136]
	strb	r3, [r6, #44]
	sub	r1, r8, #12
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	str	r0, [r4, #88]
	beq	.L14599
	str	r7, [r0]
	mov	r2, #0
	mov	r1, r8
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	str	r0, [r4, #92]
	beq	.L14611
	str	r7, [r0]
	movw	r1, #32976
	mov	r0, #292
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [sp, #8]
	beq	.L14612
	sub	r2, r8, #48
	sub	r1, r8, #24
	sub	r3, r8, #36
	mov	lr, r8
	str	r2, [r0]
	add	r2, r8, #12
	stmib	r0, {r1, r3}
	ldr	r3, [r4, #320]
	ldr	r1, [r4, #324]
	str	r2, [r0, #12]
	ldr	r10, [r4, #320]
	add	r3, r3, r1
	rsb	r3, r3, r3, lsl #4
	cmp	r10, #0
	add	r3, r3, #7
	strh	r3, [r8, #17]	@ unaligned
	beq	.L14613
	add	r2, sp, #368
	movw	r10, #9222
	mov	r3, #1
	mov	fp, #0
	movw	ip, #9225
	movt	r10, 514
	str	r2, [sp, #4]
	str	r7, [sp, #16]
	add	r2, lr, #32
	mov	r9, r3
	mov	r8, fp
	movt	ip, 259
	add	r1, sp, #32
	add	lr, lr, #23
	str	r2, [sp, #12]
	mov	r7, r10
	ldr	r2, [sp, #4]
	str	r6, [sp, #4]
	str	r5, [sp, #20]
.L14602:
	str	r7, [r1]	@ unaligned
	add	fp, fp, #1
	add	r0, r0, #8
	strb	r3, [r1, #4]
	add	r3, r3, #2
	strb	r8, [r1, #5]
	sub	r6, r3, #1
	add	r10, r3, #3
	str	r1, [r0, #8]
	ldrb	r5, [r1, #4]	@ zero_extendqisi2
	add	r1, r1, #6
	str	ip, [r2]	@ unaligned
	strb	r6, [r2, #4]
	strb	r9, [r2, #5]
	strb	r5, [r2, #6]
	strb	r9, [r2, #7]
	strb	r8, [r2, #8]
	str	r2, [r0, #12]
	ldrb	r5, [r2, #4]	@ zero_extendqisi2
	add	r2, r2, #9
	strb	r5, [lr, #1]!
	ldr	r5, [r4, #320]
	cmp	r5, fp
	bhi	.L14602
	mov	ip, r10
	ldr	r6, [sp, #4]
	mov	r10, r5
	lsl	r2, ip, #2
	ldr	r7, [sp, #16]
	ldr	r5, [sp, #20]
	add	r1, r2, #4
	add	lr, r2, #8
.L14601:
	ldr	r0, [r4, #324]
	cmp	r0, #0
	beq	.L14614
	ldr	r1, [sp, #8]
	movw	r10, #9225
	mov	fp, #0
	ldr	r2, .L14628+4
	movt	r10, 515
	mov	r9, fp
	mov	lr, #1
	add	r0, r1, ip, lsl #2
	movw	r1, #9222
	movt	r1, 258
	sub	r8, r2, #5
	sub	ip, ip, r3
	str	r1, [sp, #4]
	add	r1, sp, #128
	str	r2, [sp, #16]
	add	r2, sp, #224
	str	r7, [sp, #20]
	mov	r7, r10
	str	r6, [sp, #24]
	str	r5, [sp, #28]
.L14604:
	ldr	r5, [sp, #4]
	add	fp, fp, #1
	add	r0, r0, #8
	str	r5, [r1]	@ unaligned
	strb	r3, [r1, #4]
	add	r3, r3, #2
	strb	r9, [r1, #5]
	sub	r6, r3, #1
	add	r10, ip, r3
	str	r1, [r0, #-8]
	ldrb	r5, [r1, #4]	@ zero_extendqisi2
	add	r1, r1, #6
	str	r7, [r2]	@ unaligned
	strb	r6, [r2, #4]
	strb	lr, [r2, #5]
	strb	r5, [r2, #6]
	strb	lr, [r2, #7]
	strb	r9, [r2, #8]
	str	r2, [r0, #-4]
	ldrb	r5, [r1, #-2]	@ zero_extendqisi2
	add	r2, r2, #9
	strb	r5, [r8, #1]!
	ldr	r5, [r4, #324]
	cmp	r5, fp
	bhi	.L14604
	uxtb	r0, r5
	mov	ip, r10
	ldr	r7, [sp, #20]
	lsl	r2, ip, #2
	ldr	r10, [r4, #320]
	add	r3, r0, #4
	ldr	r6, [sp, #24]
	ldr	r5, [sp, #28]
	uxtb	r3, r3
	add	r1, r2, #4
	add	lr, r2, #8
.L14603:
	strb	r3, [r5, #-3100]
	ldr	r3, [sp, #8]
	add	ip, ip, #3
	uxtb	r10, r10
	strb	r0, [r5, #-3097]
	add	r0, r10, #4
	add	r8, r3, ip, lsl #2
	strb	r0, [r5, #-3080]
	mov	r0, r3
	strb	r10, [r5, #-3077]
	mov	r10, #0
	str	r8, [sp, #4]
	ldr	r8, [sp, #16]
	sub	fp, r8, #8
	ldr	r8, [sp, #12]
	sub	r9, r8, #12
	ldr	r8, .L14628
	sub	r8, r8, #12
	add	r3, r8, #12
	str	r3, [r0, r2]
	ldr	r3, [sp, #4]
	str	fp, [r0, r1]
	str	r8, [r0, lr]
	str	r9, [r0, ip, lsl #2]
	str	r10, [r3, #4]
	bl	usb_copy_descriptors
	cmp	r0, r10
	str	r0, [r4, #16]
	beq	.L14605
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L14608
	ldr	r2, .L14628
	mov	r3, #512
	ldr	r0, [sp, #8]
	strh	r3, [r8, #4]	@ movhi
	strh	r3, [r2, #4]	@ movhi
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L14605
.L14608:
	ldr	r0, [sp, #8]
	mov	r5, #0
	bl	kfree
	b	.L14594
.L14599:
	ldr	r3, [r4, #92]
	mvn	r5, #18
	cmp	r3, #0
	bne	.L14610
	b	.L14609
.L14611:
	mvn	r5, #18
	b	.L14600
.L14612:
	mvn	r5, #11
	b	.L14597
.L14605:
	ldr	r0, [sp, #8]
	mvn	r5, #18
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	b	.L14597
.L14613:
	ldr	r0, .L14628
	mov	lr, #24
	mov	r1, #20
	mov	r2, #16
	mov	ip, #4
	mov	r3, #1
	add	r0, r0, #32
	str	r0, [sp, #12]
	b	.L14601
.L14614:
	ldr	r3, .L14628+4
	str	r3, [sp, #16]
	mov	r3, #4
	b	.L14603
.L14629:
	.align	2
.L14628:
	.word	.LANCHOR7-3120
	.word	.LANCHOR7-3072
	.fnend
	.size	f_midi_bind, .-f_midi_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_bind, %function
frmnet_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #8
	sub	sp, sp, #8
	ldr	r6, [r0, #24]
	cmp	r3, #15
	bls	.L14631
	mvn	r3, #18
	movw	r0, #:lower16:.LC1094
	ldr	r1, .L14675
	mov	r2, r3
	movt	r0, #:upper16:.LC1094
	str	r3, [r4, #112]
	bl	printk
	ldr	r0, [r4, #112]
.L14630:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14631:
	add	r1, r3, #12
	movw	r5, #:lower16:.LANCHOR7
	add	r2, r3, #1
	movt	r5, #:upper16:.LANCHOR7
	str	r4, [r0, r1, lsl #2]
	sub	r1, r5, #3040
	strb	r2, [r0, #44]
	sub	r1, r1, #8
	mov	r2, #0
	str	r3, [r4, #112]
	strb	r3, [r5, #-3058]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14671
	str	r0, [r4, #84]
	mov	r2, #0
	ldr	r1, .L14675+4
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14672
	str	r0, [r4, #88]
	mov	r2, #0
	sub	r1, r5, #3024
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L14673
	str	r7, [r4, #136]
	ldr	r3, [r7, #8]
	mov	r1, #208
	str	r6, [r7]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r8, r0, #0
	beq	.L14638
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r8]
	beq	.L14640
	mov	r2, #8
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r8]
	bne	.L14640
	ldr	r3, [r7, #8]
	mov	r1, r8
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L14638:
	mvn	r3, #11
	str	r3, [r4, #140]
.L14654:
	movw	r0, #:lower16:.LC1102
	ldr	r1, .L14675
	movt	r0, #:upper16:.LC1102
	bl	printk
	ldr	r5, [r4, #136]
.L14642:
	mov	r3, #0
	mvn	r0, #11
	str	r3, [r5]
	str	r3, [r4, #136]
.L14637:
	ldr	r2, [r4, #88]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r4, #88]
.L14635:
	ldr	r2, [r4, #84]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r4, #84]
	b	.L14630
.L14640:
	mov	r3, #8
	cmn	r8, #4096
	str	r3, [r8, #4]
	str	r8, [r4, #140]
	bhi	.L14654
	movw	r3, #:lower16:frmnet_notify_complete
	ldr	r0, .L14675+8
	movt	r3, #:upper16:frmnet_notify_complete
	str	r3, [r8, #28]
	ldr	r3, [r4, #140]
	str	r4, [r3, #32]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L14643
	ldr	r2, [r6]
	ldr	r3, [r2, #20]
	cmp	r3, #2
	bhi	.L14674
.L14644:
	ldr	ip, [r4, #84]
	movw	r1, #:lower16:.LC1071
	movw	r3, #:lower16:.LC1070
	ldr	r0, [r4, #88]
	movt	r1, #:upper16:.LC1071
	movt	r3, #:upper16:.LC1070
	ldr	r5, [r2, #20]
	ldrb	r2, [r4, #116]	@ zero_extendqisi2
	ldr	lr, [r0, #4]
	movw	r0, #:lower16:.LC1103
	cmp	r5, #2
	movt	r0, #:upper16:.LC1103
	movls	r3, r1
	ldr	r1, .L14675
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	printk
	mov	r0, #0
	b	.L14630
.L14643:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L14649
.L14655:
	bl	kfree
.L14649:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L14652
	bl	kfree
.L14652:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L14653
	bl	kfree
.L14653:
	ldr	r5, [r4, #136]
	ldr	r6, [r4, #140]
	cmp	r6, #0
	beq	.L14642
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #136]
	b	.L14642
.L14674:
	ldrb	r1, [r5, #-3046]	@ zero_extendqisi2
	ldrb	r2, [r5, #-3034]	@ zero_extendqisi2
	ldrb	r3, [r5, #-3022]	@ zero_extendqisi2
	ldr	r0, .L14675+12
	strb	r1, [r5, #-2990]
	strb	r2, [r5, #-2978]
	strb	r3, [r5, #-2966]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L14645
	ldr	r2, [r6]
	ldr	r3, [r2, #20]
	cmp	r3, #4
	bls	.L14644
	ldrb	r2, [r5, #-3034]	@ zero_extendqisi2
	ldrb	r1, [r5, #-3046]	@ zero_extendqisi2
	ldrb	r3, [r5, #-3022]	@ zero_extendqisi2
	ldr	r0, .L14675+16
	strb	r1, [r5, #-2934]
	strb	r2, [r5, #-2922]
	strb	r3, [r5, #-2910]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	ldrne	r2, [r6]
	beq	.L14649
	b	.L14644
.L14645:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	bne	.L14655
	b	.L14652
.L14671:
	movw	r0, #:lower16:.LC1074
	ldr	r1, .L14675
	movt	r0, #:upper16:.LC1074
	bl	printk
	mvn	r0, #18
	b	.L14630
.L14673:
	movw	r0, #:lower16:.LC1095
	ldr	r1, .L14675
	movt	r0, #:upper16:.LC1095
	bl	printk
	mvn	r0, #18
	b	.L14637
.L14672:
	movw	r0, #:lower16:.LC1076
	ldr	r1, .L14675
	movt	r0, #:upper16:.LC1076
	bl	printk
	mvn	r0, #18
	b	.L14635
.L14676:
	.align	2
.L14675:
	.word	.LANCHOR5+252
	.word	.LANCHOR7-3036
	.word	.LANCHOR7-3012
	.word	.LANCHOR7-2956
	.word	.LANCHOR7-2900
	.fnend
	.size	frmnet_bind, .-frmnet_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_bind, %function
acm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #16
	sub	sp, sp, #16
	ldr	r8, [r0, #24]
	cmp	r3, #15
	bhi	.L14678
	mov	r5, r0
	add	r1, r3, #1
	add	r0, r3, #12
	movw	r2, #:lower16:.LANCHOR0
	movw	r6, #:lower16:.LANCHOR7
	movt	r2, #:upper16:.LANCHOR0
	str	r4, [r5, r0, lsl #2]
	movt	r6, #:upper16:.LANCHOR7
	strb	r1, [r5, #44]
	strb	r3, [r4, #144]
	ldrb	r0, [r5, #44]	@ zero_extendqisi2
	strb	r3, [r2, #1990]
	strb	r3, [r2, #2014]
	strb	r3, [r6, #-2865]
	cmp	r0, #15
	bls	.L14737
.L14678:
	mvn	r7, #18
.L14682:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L14690
	bl	kfree
.L14690:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L14691
	bl	kfree
.L14691:
	ldr	r5, [r4, #152]
	ldr	r6, [r4, #156]
	cmp	r6, #0
	beq	.L14692
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #152]
.L14692:
	cmp	r5, #0
	movw	r1, #:lower16:.LC1107
	movne	r3, #0
	movt	r1, #:upper16:.LC1107
	strne	r3, [r5]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r8]
	mov	r3, r4
	str	r7, [sp]
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L14677:
	mov	r0, r7
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L14737:
	add	r1, r0, #12
	add	r3, r0, #1
	strb	r0, [r2, #2002]
	strb	r0, [r6, #-2864]
	mov	r2, #0
	str	r4, [r5, r1, lsl #2]
	ldr	r1, .L14741
	strb	r3, [r5, #44]
	strb	r0, [r6, #-2856]
	strb	r0, [r4, #145]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14678
	str	r0, [r4, #88]
	mov	r2, #0
	ldr	r1, .L14741+4
	str	r8, [r0]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14678
	str	r0, [r4, #92]
	mov	r2, #0
	ldr	r1, .L14741+8
	str	r8, [r0]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L14678
	str	r7, [r4, #152]
	ldr	r3, [r7, #8]
	mov	r1, #208
	str	r8, [r7]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r9, r0, #0
	beq	.L14679
	mov	r2, #10
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	str	r2, [r9, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r9]
	beq	.L14681
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	mov	r10, r0
	str	r0, [r9]
	bne	.L14681
	ldr	r3, [r7, #8]
	mov	r0, r7
	mov	r1, r9
	mvn	r7, #18
	ldr	r3, [r3, #12]
	blx	r3
	str	r10, [r4, #156]
	b	.L14682
.L14681:
	movw	r3, #:lower16:acm_cdc_notify_complete
	str	r9, [r4, #156]
	ldrb	r1, [r6, #-2850]	@ zero_extendqisi2
	movt	r3, #:upper16:acm_cdc_notify_complete
	ldrb	r2, [r6, #-2838]	@ zero_extendqisi2
	ldr	r0, .L14741+12
	str	r3, [r9, #28]
	ldr	r3, [r4, #156]
	strb	r1, [r6, #-2714]
	strb	r2, [r6, #-2702]
	strb	r1, [r6, #-2678]
	ldrb	r1, [r6, #-2826]	@ zero_extendqisi2
	str	r4, [r3, #32]
	ldr	r3, [r4, #20]
	strb	r1, [r6, #-2690]
	ldr	r3, [r3, #24]
	strb	r2, [r6, #-2666]
	ldr	r6, [r3]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L14685
	ldr	r3, [r6, #20]
	cmp	r3, #2
	bhi	.L14738
.L14683:
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #3378
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L14739
.L14686:
	cmp	r4, #0
	beq	.L14740
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC1106
	movt	r3, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC1106
	mov	r7, #0
	str	r4, [r3, #3996]
	bl	printk
	b	.L14677
.L14679:
	mvn	r7, #18
	str	r9, [r4, #156]
	b	.L14682
.L14738:
	ldr	r0, .L14741+16
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L14685
	ldr	r3, [r6, #20]
	cmp	r3, #4
	bls	.L14683
	ldr	r0, .L14741+20
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L14683
.L14685:
	ldr	r0, [r4, #16]
	mvn	r7, #11
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	b	.L14682
.L14739:
	ldr	r2, [r5, #24]
	ldr	r1, [r8]
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	ldr	r2, [r2]
	add	r1, r1, #32
	ldr	r0, [r2, #20]
	cmp	r0, #4
	bhi	.L14697
	movw	r2, #:lower16:.LC1070
	movw	ip, #:lower16:.LC1071
	movt	r2, #:upper16:.LC1070
	cmp	r0, #2
	movt	ip, #:upper16:.LC1071
	movhi	ip, r2
.L14687:
	ldr	r0, [r4, #92]
	movw	r2, #:lower16:.LC1104
	ldr	lr, [r4, #152]
	movt	r2, #:upper16:.LC1104
	ldr	r5, [lr, #4]
	ldr	lr, [r4, #88]
	str	r5, [sp, #12]
	ldr	r5, [r0, #4]
	ldr	r0, .L14741+24
	str	r5, [sp, #8]
	ldr	lr, [lr, #4]
	stm	sp, {ip, lr}
	bl	__dynamic_dev_dbg
	b	.L14686
.L14697:
	movw	ip, #:lower16:.LC1085
	movt	ip, #:upper16:.LC1085
	b	.L14687
.L14740:
	movw	r0, #:lower16:.LC1105
	mov	r7, r4
	movt	r0, #:upper16:.LC1105
	bl	printk
	b	.L14677
.L14742:
	.align	2
.L14741:
	.word	.LANCHOR7-2852
	.word	.LANCHOR7-2840
	.word	.LANCHOR7-2828
	.word	.LANCHOR7-2656
	.word	.LANCHOR7-2816
	.word	.LANCHOR7-2772
	.word	.LANCHOR4+3360
	.fnend
	.size	acm_bind, .-acm_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_bind, %function
rndis_qc_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #20
	sub	sp, sp, #20
	ldr	r8, [r0, #24]
	cmp	r3, #15
	bhi	.L14744
	add	r1, r3, #12
	add	r2, r3, #1
	movw	r5, #:lower16:.LANCHOR7
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR7
	strb	r2, [r0, #44]
	strb	r3, [r4, #120]
	ldrb	r0, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r5, #-2610]
	strb	r3, [r5, #-2602]
	strb	r3, [r5, #-2589]
	cmp	r0, #15
	bhi	.L14829
	add	r1, r0, #12
	add	r3, r0, #1
	strb	r0, [r5, #-2588]
	strb	r0, [r5, #-2582]
	mov	r2, #0
	str	r4, [r6, r1, lsl #2]
	ldr	r1, .L14839
	strb	r3, [r6, #44]
	strb	r0, [r4, #121]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14829
	str	r0, [r4, #88]
	mov	r2, #0
	sub	r1, r5, #2560
	str	r8, [r0]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14829
	str	r0, [r4, #92]
	mov	r2, #0
	ldr	r1, .L14839+4
	str	r8, [r0]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L14829
	str	r3, [r4, #156]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r8, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r7, r0
	str	r0, [r4, #160]
	beq	.L14748
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L14747
	mov	r2, #8
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L14747:
	str	r0, [r7]
	ldr	r2, [r4, #160]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L14748
	mov	r1, #8
	movw	r3, #:lower16:rndis_qc_response_complete
	ldr	r0, .L14839+8
	movt	r3, #:upper16:rndis_qc_response_complete
	str	r1, [r2, #4]
	ldr	r2, [r4, #160]
	str	r4, [r2, #32]
	ldr	r2, [r4, #160]
	str	r3, [r2, #28]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L14748
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L14830
.L14749:
	movw	r5, #:lower16:.LANCHOR1
	movw	r1, #:lower16:rndis_qc_open
	movt	r5, #:upper16:.LANCHOR1
	movw	r2, #:lower16:rndis_qc_close
	ldrb	r3, [r5, #3681]	@ zero_extendqisi2
	movt	r1, #:upper16:rndis_qc_open
	movt	r2, #:upper16:rndis_qc_close
	str	r1, [r4, #112]
	str	r2, [r4, #116]
	cmp	r3, #0
	bne	.L14831
	movw	r9, #:lower16:.LANCHOR4
	movw	r1, #3402
	str	r4, [r5, #3728]
	movt	r9, #:upper16:.LANCHOR4
	movw	r2, #:lower16:rndis_qc_response_available
	ldrh	ip, [r9, r1]
	movt	r2, #:upper16:rndis_qc_response_available
	mov	r1, #1
	add	r0, r5, #3680
	strb	r1, [r5, #3681]
	strh	r1, [r0, #36]	@ movhi
	tst	ip, #4
	str	r2, [r5, #3724]
	bne	.L14832
.L14754:
	movw	r2, #1602
	mov	r3, #0
	ldrh	r7, [r9, r2]
	str	r3, [r4, #144]
	ubfx	r7, r7, #2, #1
	cmp	r7, r3
	moveq	r3, r7
	bne	.L14833
.L14755:
	movw	r2, #3450
	rsb	r3, r3, r3, lsl #4
	ldr	fp, [r4, #128]
	ldrh	r0, [r9, r2]
	mov	r1, #0
	add	r3, r5, r3, lsl #2
	add	r2, r4, #122
	ldr	r10, [r4, #140]
	str	r1, [r5, #3688]
	str	r1, [r5, #3692]
	tst	r0, #4
	str	r2, [r3, #3700]
	bne	.L14834
.L14769:
	cmp	r10, #0
	moveq	r7, #1
	cmp	r7, #0
	bne	.L14772
	movw	r3, #3474
	ldr	r7, [r4, #144]
	str	fp, [r5, #3712]
	ldrh	r3, [r9, r3]
	str	r10, [r5, #3720]
	ldrb	fp, [r4, #132]	@ zero_extendqisi2
	tst	r3, #4
	moveq	r10, r7
	bne	.L14835
.L14756:
	uxtb	r3, r7
	movw	r2, #3498
	ldrh	r2, [r9, r2]
	rsb	r3, r3, r3, lsl #4
	add	r3, r5, r3, lsl #2
	tst	r2, #4
	strb	fp, [r3, #3716]
	bne	.L14836
.L14757:
	movw	r3, #3522
	uxtb	r10, r10
	ldrh	r0, [r9, r3]
	mov	r3, #2
	rsb	r10, r10, r10, lsl #4
	add	r5, r5, r10, lsl r3
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	strb	r3, [r5, #3717]
	moveq	r5, r0
	bne	.L14837
.L14743:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14831:
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #3426
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L14827
.L14829:
	ldr	r8, [r6, #24]
.L14744:
	mvn	r5, #18
.L14746:
	ldr	r3, [r8]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L14838
.L14760:
	cmp	r3, #2
	bhi	.L14761
.L14762:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L14763
	bl	kfree
.L14763:
	ldr	r3, [r4, #160]
	cmp	r3, #0
	beq	.L14764
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L14764:
	ldr	r3, [r4, #156]
	movw	r0, #:lower16:.LC1073
	ldr	r1, .L14839+12
	movt	r0, #:upper16:.LC1073
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	mov	r3, r5
	ldr	r2, [r4]
	bl	printk
	b	.L14743
.L14830:
	ldrb	r1, [r5, #-2570]	@ zero_extendqisi2
	ldrb	r2, [r5, #-2558]	@ zero_extendqisi2
	ldrb	r3, [r5, #-2546]	@ zero_extendqisi2
	ldr	r0, .L14839+16
	strb	r1, [r5, #-2490]
	strb	r2, [r5, #-2478]
	strb	r3, [r5, #-2466]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L14748
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L14749
	ldrb	r1, [r5, #-2570]	@ zero_extendqisi2
	ldrb	r2, [r5, #-2558]	@ zero_extendqisi2
	ldrb	r3, [r5, #-2546]	@ zero_extendqisi2
	ldr	r0, .L14839+20
	strb	r1, [r5, #-2410]
	strb	r2, [r5, #-2398]
	strb	r3, [r5, #-2386]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L14749
	ldr	r3, [r6, #24]
	mvn	r5, #11
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L14760
.L14827:
	movw	r1, #:lower16:.LC1109
	add	r0, r0, #3408
	movt	r1, #:upper16:.LC1109
	mvn	r5, #18
	bl	__dynamic_pr_debug
	ldr	r8, [r6, #24]
	b	.L14746
.L14834:
	movw	r1, #:lower16:.LC267
	ldr	r2, .L14839+24
	movt	r1, #:upper16:.LC267
	ldr	r0, .L14839+28
	bl	__dynamic_pr_debug
	b	.L14769
.L14833:
	movw	r1, #:lower16:.LC940
	str	r3, [sp]
	ldr	r2, .L14839+32
	movt	r1, #:upper16:.LC940
	ldr	r0, .L14839+36
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #144]
	uxtb	r7, r3
	adds	r7, r7, #0
	movne	r7, #1
	b	.L14755
.L14835:
	movw	r1, #:lower16:.LC267
	ldr	r2, .L14839+40
	movt	r1, #:upper16:.LC267
	ldr	r0, .L14839+44
	bl	__dynamic_pr_debug
	ldr	r10, [r4, #144]
	b	.L14756
.L14836:
	movw	r1, #:lower16:.LC267
	ldr	r2, .L14839+48
	movt	r1, #:upper16:.LC267
	ldr	r0, .L14839+52
	bl	__dynamic_pr_debug
	b	.L14757
.L14837:
	ldr	r3, [r6, #24]
	ldr	r1, [r8]
	ldr	r3, [r3]
	add	r1, r1, #32
	ldr	r2, [r3, #20]
	cmp	r2, #4
	movwhi	r3, #:lower16:.LC1085
	movthi	r3, #:upper16:.LC1085
	bhi	.L14759
	movw	r0, #:lower16:.LC1070
	movw	r3, #:lower16:.LC1071
	movt	r0, #:upper16:.LC1070
	cmp	r2, #2
	movt	r3, #:upper16:.LC1071
	movhi	r3, r0
.L14759:
	ldr	ip, [r4, #88]
	movw	r2, #:lower16:.LC1110
	mov	r5, #0
	ldr	r0, [r4, #156]
	movt	r2, #:upper16:.LC1110
	ldr	lr, [r4, #92]
	ldr	r4, [r0, #4]
	ldr	r0, .L14839+56
	str	r4, [sp, #8]
	ldr	lr, [lr, #4]
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L14743
.L14832:
	movw	r1, #:lower16:.LC1108
	ldr	r2, .L14839+60
	movt	r1, #:upper16:.LC1108
	ldr	r0, .L14839+64
	bl	__dynamic_pr_debug
	b	.L14754
.L14838:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L14761
	bl	kfree
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L14760
.L14772:
	mov	r5, #0
	ldr	r8, [r6, #24]
	b	.L14746
.L14761:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L14762
	bl	kfree
	b	.L14762
.L14748:
	mvn	r5, #11
	ldr	r8, [r6, #24]
	b	.L14746
.L14840:
	.align	2
.L14839:
	.word	.LANCHOR7-2572
	.word	.LANCHOR7-2548
	.word	.LANCHOR7-2536
	.word	.LANCHOR5+360
	.word	.LANCHOR7-2456
	.word	.LANCHOR7-2376
	.word	.LANCHOR5+280
	.word	.LANCHOR4+3432
	.word	.LANCHOR5-1268
	.word	.LANCHOR4+1584
	.word	.LANCHOR5+304
	.word	.LANCHOR4+3456
	.word	.LANCHOR5+328
	.word	.LANCHOR4+3480
	.word	.LANCHOR4+3504
	.word	.LANCHOR5+264
	.word	.LANCHOR4+3384
	.fnend
	.size	rndis_qc_bind, .-rndis_qc_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_bind, %function
conn_gadget_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r9, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #24]
	movw	r0, #:lower16:.LC1111
	.pad #20
	sub	sp, sp, #20
	movt	r0, #:upper16:.LC1111
	str	r3, [r1, #84]
	bl	printk
	ldrb	r3, [r9, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L14856
	movw	r5, #:lower16:.LANCHOR4
	movw	r2, #3546
	movt	r5, #:upper16:.LANCHOR4
	movw	r0, #:lower16:.LANCHOR7
	ldrh	r1, [r5, r2]
	movt	r0, #:upper16:.LANCHOR7
	add	r2, r3, #1
	mov	ip, r0
	add	r0, r3, #12
	strb	r3, [ip, #-2318]
	tst	r1, #4
	str	r4, [r9, r0, lsl #2]
	str	ip, [sp, #12]
	strb	r2, [r9, #44]
	ldr	r7, [r4, #84]
	bne	.L14879
.L14843:
	mov	r2, #0
	ldr	r1, .L14884
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r6, r0, #0
	beq	.L14880
	movw	r3, #3570
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L14881
.L14845:
	str	r4, [r6]
	mov	r2, #0
	ldr	r1, .L14884+4
	str	r6, [r4, #92]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L14882
	movw	r3, #3594
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L14883
.L14847:
	movw	r8, #:lower16:conn_gadget_complete_out
	mov	r6, #4
	str	r4, [r7]
	movt	r8, #:upper16:conn_gadget_complete_out
	add	r5, r4, #88
	str	r7, [r4, #96]
	add	fp, r4, #128
.L14851:
	ldr	r1, [r4, #192]
	mov	r0, r7
	cmp	r1, #0
	moveq	r1, #4096
	bl	conn_gadget_request_new
	subs	r7, r0, #0
	mov	r0, r5
	beq	.L14849
	str	r8, [r7, #28]
	bl	_raw_spin_lock_irqsave
	mov	r10, r0
	mov	r2, fp
	ldr	r1, [r4, #132]
	add	r0, r7, #36
	bl	__list_add
	mov	r1, r10
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	subs	r6, r6, #1
	beq	.L14857
	ldr	r7, [r4, #96]
	b	.L14851
.L14857:
	movw	r8, #:lower16:conn_gadget_complete_in
	mov	r6, #4
	movt	r8, #:upper16:conn_gadget_complete_in
	add	fp, r4, #120
.L14850:
	ldr	r0, [r4, #92]
	ldr	r1, [r4, #192]
	cmp	r1, #0
	moveq	r1, #4096
	bl	conn_gadget_request_new
	subs	r7, r0, #0
	mov	r0, r5
	beq	.L14849
	str	r8, [r7, #28]
	bl	_raw_spin_lock_irqsave
	mov	r10, r0
	mov	r2, fp
	ldr	r1, [r4, #124]
	add	r0, r7, #36
	bl	__list_add
	mov	r1, r10
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	subs	r6, r6, #1
	bne	.L14850
	ldr	r3, [r9, #24]
	ldr	r2, [r3]
	ldr	r2, [r2, #20]
	cmp	r2, #2
	movwls	r1, #:lower16:.LC1071
	movtls	r1, #:upper16:.LC1071
	bls	.L14854
	ldr	ip, [sp, #12]
	ldrb	r0, [ip, #-2306]	@ zero_extendqisi2
	ldrb	r1, [ip, #-2294]	@ zero_extendqisi2
	strb	r0, [ip, #-2282]
	strb	r1, [ip, #-2270]
	ldr	r2, [r3]
	ldr	r2, [r2, #20]
	cmp	r2, #4
	bls	.L14855
	strb	r0, [ip, #-2258]
	strb	r1, [ip, #-2246]
	ldr	r3, [r3]
	ldr	r2, [r3, #20]
	cmp	r2, #4
	movwhi	r1, #:lower16:.LC1085
	movthi	r1, #:upper16:.LC1085
	bhi	.L14854
.L14855:
	movw	r3, #:lower16:.LC1070
	movw	r1, #:lower16:.LC1071
	movt	r3, #:upper16:.LC1070
	cmp	r2, #2
	movt	r1, #:upper16:.LC1071
	movhi	r1, r3
.L14854:
	movw	r0, #:lower16:.LC1118
	ldr	r2, [r4]
	ldr	ip, [r4, #96]
	movt	r0, #:upper16:.LC1118
	ldr	r3, [r4, #92]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	ldr	r3, [r3, #4]
	bl	printk
	mov	r0, #0
.L14841:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14883:
	movw	r1, #:lower16:.LC1116
	ldr	r2, .L14884+8
	movt	r1, #:upper16:.LC1116
	ldr	r3, [r7, #4]
	ldr	r0, .L14884+12
	bl	__dynamic_pr_debug
	b	.L14847
.L14879:
	movw	r1, #:lower16:.LC1112
	mov	r3, r4
	ldr	r2, .L14884+8
	movt	r1, #:upper16:.LC1112
	ldr	r0, .L14884+16
	bl	__dynamic_pr_debug
	b	.L14843
.L14881:
	movw	r1, #:lower16:.LC1114
	ldr	r2, .L14884+8
	movt	r1, #:upper16:.LC1114
	ldr	r3, [r6, #4]
	ldr	r0, .L14884+20
	bl	__dynamic_pr_debug
	b	.L14845
.L14856:
	mvn	r0, #18
	b	.L14841
.L14849:
	movw	r0, #:lower16:.LC1117
	ldr	r1, .L14884+8
	movt	r0, #:upper16:.LC1117
	bl	printk
	mvn	r0, #0
	b	.L14841
.L14882:
	movw	r0, #:lower16:.LC1115
	movt	r0, #:upper16:.LC1115
	bl	printk
	mvn	r0, #18
	b	.L14841
.L14880:
	movw	r0, #:lower16:.LC1113
	movt	r0, #:upper16:.LC1113
	bl	printk
	mvn	r0, #18
	b	.L14841
.L14885:
	.align	2
.L14884:
	.word	.LANCHOR7-2308
	.word	.LANCHOR7-2296
	.word	.LANCHOR5+376
	.word	.LANCHOR4+3576
	.word	.LANCHOR4+3528
	.word	.LANCHOR4+3552
	.fnend
	.size	conn_gadget_function_bind, .-conn_gadget_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_function_bind, %function
acc_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #3618
	movt	r5, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r4, r1
	strd	r8, [sp, #16]
	mov	r6, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r5, r3]
	.pad #36
	sub	sp, sp, #36
	ldr	r2, [r0, #24]
	tst	r3, #4
	str	r2, [sp, #16]
	bne	.L14960
.L14887:
	movw	r7, #:lower16:.LANCHOR0
	movw	r2, #:lower16:.LC1120
	movt	r7, #:upper16:.LANCHOR0
	movt	r2, #:upper16:.LC1120
	add	r0, r7, #1536
	mov	r1, #0
	bl	__hid_register_driver
	subs	r8, r0, #0
	bne	.L14886
	str	r8, [r4, #1644]
	ldrb	r3, [r6, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L14892
	movw	r2, #3642
	add	r1, r3, #12
	strb	r3, [r7, #2262]
	ldrh	r2, [r5, r2]
	add	r3, r3, #1
	str	r4, [r6, r1, lsl #2]
	strb	r3, [r6, #44]
	ldr	r9, [r4, #84]
	tst	r2, #4
	bne	.L14961
.L14890:
	mov	r2, #0
	ldr	r1, .L14972
	ldr	r0, [r9]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L14962
	movw	r3, #3690
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L14963
.L14893:
	str	r4, [r7]
	mov	r2, #0
	ldr	r1, .L14972+4
	str	r7, [r4, #92]
	ldr	r0, [r9]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L14964
	movw	r3, #3738
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L14965
.L14895:
	str	r4, [r7]
	mov	r2, #0
	ldr	r1, .L14972+4
	str	r7, [r4, #96]
	ldr	r0, [r9]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L14966
	movw	r3, #3786
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L14967
.L14897:
	add	r3, r4, #1648
	movw	fp, #:lower16:acc_complete_in
	str	r4, [r7]
	add	r3, r3, #8
	movt	fp, #:upper16:acc_complete_in
	str	r7, [r4, #96]
	add	r10, r4, #88
	mov	r9, #4
	str	r3, [sp, #20]
	str	r5, [sp, #24]
.L14901:
	ldr	r5, [r4, #92]
	mov	r1, #208
	ldr	r2, [r5, #8]
	mov	r0, r5
	ldr	r2, [r2, #8]
	blx	r2
	subs	r7, r0, #0
	mov	r1, #208
	mov	r2, #2
	mov	r0, #16384
	beq	.L14900
	bl	kmalloc_order_trace
	mov	r2, r0
	mov	r0, r10
	cmp	r2, #0
	str	r2, [r7]
	beq	.L14968
	str	fp, [r7, #28]
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	ldr	r1, [r4, #1660]
	add	r0, r7, #36
	ldr	r2, [sp, #20]
	bl	__list_add
	mov	r1, r5
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	subs	r9, r9, #1
	bne	.L14901
	movw	r3, #:lower16:acc_complete_out
	add	r7, r4, #1680
	ldr	r5, [sp, #24]
	movt	r3, #:upper16:acc_complete_out
	add	r7, r7, #8
	str	r3, [sp, #28]
	add	r3, r4, #1696
	str	r3, [sp, #24]
.L14903:
	ldr	fp, [r4, #96]
	mov	r1, #208
	ldr	r2, [fp, #8]
	mov	r0, fp
	ldr	r2, [r2, #8]
	blx	r2
	subs	r9, r0, #0
	mov	r2, #2
	mov	r1, #208
	mov	r0, #16384
	beq	.L14900
	bl	kmalloc_order_trace
	cmp	r0, #0
	str	r0, [r9]
	beq	.L14969
	ldr	r3, [sp, #28]
	str	r3, [r9, #28]
	ldr	r3, [sp, #24]
	str	r9, [r7], #4
	cmp	r3, r7
	bne	.L14903
	ldr	r2, [r6, #24]
	ldr	r3, [r2]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L14911
	movw	r3, #:lower16:.LANCHOR7
	movt	r3, #:upper16:.LANCHOR7
	ldrb	r0, [r3, #-2234]	@ zero_extendqisi2
	ldrb	r1, [r3, #-2222]	@ zero_extendqisi2
	strb	r0, [r3, #-2210]
	strb	r1, [r3, #-2198]
	ldr	ip, [r2]
	ldr	ip, [ip, #20]
	cmp	ip, #4
	strbhi	r0, [r3, #-2186]
	strbhi	r1, [r3, #-2174]
.L14911:
	movw	r3, #3810
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L14970
.L14886:
	mov	r0, r8
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14962:
	movw	r3, #3666
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L14971
.L14892:
	mvn	r8, #18
	b	.L14886
.L14966:
	movw	r3, #3762
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L14892
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC1124
	mvn	r8, #18
	movt	r2, #:upper16:.LC1124
	ldr	r0, .L14972+8
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14886
.L14961:
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC1121
	mov	r3, r4
	movt	r2, #:upper16:.LC1121
	ldr	r0, .L14972+12
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14890
.L14968:
	ldr	r2, [r5, #8]
	mov	r1, r7
	mov	r0, r5
	ldr	r3, [r2, #12]
	blx	r3
.L14900:
	movw	r0, #:lower16:.LC1126
	movt	r0, #:upper16:.LC1126
	bl	printk
	ldr	r8, [sp, #20]
	b	.L14905
.L14964:
	movw	r3, #3714
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L14892
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC1124
	mvn	r8, #18
	movt	r2, #:upper16:.LC1124
	ldr	r0, .L14972+16
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14886
.L14960:
	mov	r3, r2
	movw	r2, #:lower16:.LC1119
	ldr	r1, [r3]
	movt	r2, #:upper16:.LC1119
	add	r0, r5, #3600
	mov	r3, r4
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14887
.L14969:
	ldr	r3, [fp, #8]
	mov	r1, r9
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
	b	.L14900
.L14970:
	ldr	ip, [r4, #96]
	movw	r0, #:lower16:.LC1070
	movw	r3, #:lower16:.LC1071
	ldr	lr, [r2]
	movt	r0, #:upper16:.LC1070
	movt	r3, #:upper16:.LC1071
	ldr	r2, [r4, #92]
	ldr	r1, [sp, #16]
	ldr	ip, [ip, #4]
	ldr	r5, [lr, #20]
	ldr	lr, [r4]
	ldr	r1, [r1]
	str	ip, [sp, #8]
	ldr	ip, [r2, #4]
	movw	r2, #:lower16:.LC1127
	cmp	r5, #2
	movt	r2, #:upper16:.LC1127
	movhi	r3, r0
	str	lr, [sp]
	ldr	r0, .L14972+20
	add	r1, r1, #32
	str	ip, [sp, #4]
	bl	__dynamic_dev_dbg
	b	.L14886
.L14971:
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC1122
	mvn	r8, #18
	movt	r2, #:upper16:.LC1122
	ldr	r0, .L14972+24
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14886
.L14906:
	bl	list_del
	mov	r1, r7
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L14907
	ldr	r7, [r4, #92]
	ldr	r0, [r5, #-36]
	bl	kfree
	mov	r1, r6
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L14905:
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #1656]
	mov	r7, r0
	cmp	r8, r5
	mov	r0, r5
	sub	r6, r5, #36
	bne	.L14906
	mov	r1, r7
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
.L14907:
	ldr	r5, [r4, #1688]
	cmp	r5, #0
	beq	.L14909
	ldr	r6, [r4, #96]
	ldr	r0, [r5]
	bl	kfree
	mov	r1, r5
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L14909:
	ldr	r5, [r4, #1692]
	cmp	r5, #0
	beq	.L14910
	ldr	r4, [r4, #96]
	ldr	r0, [r5]
	bl	kfree
	mov	r1, r5
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
.L14910:
	mvn	r8, #0
	b	.L14886
.L14963:
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC1123
	movt	r2, #:upper16:.LC1123
	ldr	r3, [r7, #4]
	ldr	r0, .L14972+28
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14893
.L14965:
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC1125
	movt	r2, #:upper16:.LC1125
	ldr	r3, [r7, #4]
	ldr	r0, .L14972+32
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14895
.L14967:
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC1125
	movt	r2, #:upper16:.LC1125
	ldr	r3, [r7, #4]
	ldr	r0, .L14972+36
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14897
.L14973:
	.align	2
.L14972:
	.word	.LANCHOR7-2236
	.word	.LANCHOR7-2224
	.word	.LANCHOR4+3744
	.word	.LANCHOR4+3624
	.word	.LANCHOR4+3696
	.word	.LANCHOR4+3792
	.word	.LANCHOR4+3648
	.word	.LANCHOR4+3672
	.word	.LANCHOR4+3720
	.word	.LANCHOR4+3768
	.fnend
	.size	acc_function_bind, .-acc_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_bind, %function
mtp_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #3834
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR4
	movt	r8, #:upper16:.LANCHOR4
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r8, r3]
	.pad #36
	sub	sp, sp, #36
	ldr	r2, [r0, #24]
	str	r0, [sp, #20]
	tst	r3, #4
	str	r2, [r1, #84]
	str	r2, [sp, #28]
	bne	.L15054
.L14975:
	ldr	r3, [sp, #20]
	ldrb	r3, [r3, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L15053
	movw	r2, #3858
	ldr	ip, [sp, #20]
	movw	r6, #:lower16:.LANCHOR0
	ldrh	r2, [r8, r2]
	add	r0, r3, #12
	add	r1, r3, #1
	movt	r6, #:upper16:.LANCHOR0
	str	r4, [ip, r0, lsl #2]
	tst	r2, #4
	strb	r1, [ip, #44]
	ldr	r5, [r4, #84]
	strb	r3, [r6, #2354]
	bne	.L15055
.L14978:
	mov	r2, #0
	ldr	r1, .L15066
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L15056
	movw	r3, #3906
	ldrh	r3, [r8, r3]
	tst	r3, #4
	bne	.L15057
.L14981:
	str	r4, [r7]
	mov	r2, #0
	ldr	r1, .L15066+4
	str	r7, [r4, #92]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L15058
	movw	r3, #3954
	ldrh	r3, [r8, r3]
	tst	r3, #4
	bne	.L15059
.L14983:
	str	r4, [r7]
	mov	r2, #0
	ldr	r1, .L15066+8
	str	r7, [r4, #96]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L15060
	movw	r3, #4002
	ldrh	r3, [r8, r3]
	tst	r3, #4
	bne	.L15061
.L14985:
	str	r4, [r7]
	ldr	r1, [r6, #1756]
	movw	r9, #:lower16:.LANCHOR7
	str	r7, [r4, #100]
	cmp	r1, #16384
	movhi	r3, #4
	movthi	r9, #:upper16:.LANCHOR7
	strhi	r3, [r9, #-2128]
	bls	.L15062
.L14987:
	movw	r3, #:lower16:mtp_complete_in
	mov	r5, #0
	str	r8, [sp, #24]
	movt	r3, #:upper16:mtp_complete_in
	add	r7, r4, #88
	add	fp, r4, #116
	str	r3, [sp, #16]
	b	.L14996
.L14989:
	ldr	r3, [sp, #16]
	str	r3, [r10, #28]
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	mov	r2, fp
	ldr	r1, [r4, #120]
	add	r0, r10, #36
	bl	__list_add
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r9, #-2128]
	cmp	r5, r3
	bcs	.L15051
	ldr	r1, [r6, #1756]
.L14996:
	ldr	r0, [r4, #92]
	add	r5, r5, #1
	bl	mtp_request_new
	subs	r10, r0, #0
	mov	r0, r7
	bne	.L14989
	ldr	r3, [r6, #1756]
	ldr	r8, [sp, #24]
	cmp	r3, #16384
	bls	.L14991
	add	r3, r4, #116
	add	r7, r4, #88
	str	r6, [sp, #16]
	mov	r10, r3
	b	.L14992
.L14993:
	bl	list_del
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	fp, #0
	beq	.L15063
	ldr	r6, [r4, #92]
	ldr	r0, [r5, #-36]
	bl	kfree
	mov	r1, fp
	ldr	r2, [r6, #8]
	mov	r0, r6
	ldr	r3, [r2, #12]
	blx	r3
.L14992:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #116]
	mov	r6, r0
	cmp	r10, r5
	mov	r0, r5
	sub	fp, r5, #36
	bne	.L14993
	mov	r1, r6
	mov	r0, r7
	ldr	r6, [sp, #16]
	bl	_raw_spin_unlock_irqrestore
.L14994:
	mov	r3, #16384
	mov	r2, #8
	mov	r1, r3
	str	r3, [r6, #1756]
	mov	r3, r2
	str	r2, [r9, #-2128]
.L14986:
	cmp	r3, #0
	bne	.L14987
	b	.L14988
.L15056:
	movw	r3, #3882
	ldrh	r3, [r8, r3]
	tst	r3, #4
	beq	.L15053
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1122
	movt	r2, #:upper16:.LC1122
	ldr	r0, .L15066+12
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L15053:
	mvn	r0, #18
.L14974:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15058:
	movw	r3, #3930
	ldrh	r3, [r8, r3]
	tst	r3, #4
	beq	.L15053
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1124
	movt	r2, #:upper16:.LC1124
	ldr	r0, .L15066+16
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	mvn	r0, #18
	b	.L14974
.L15051:
	ldr	r8, [sp, #24]
.L14988:
	ldr	r1, [r6, #520]
	ubfx	r3, r1, #0, #10
	cmp	r3, #0
	bne	.L15064
.L14997:
	ldr	r10, [r4, #96]
	movw	r5, #:lower16:mtp_complete_out
	mov	r7, #16384
	movt	r5, #:upper16:mtp_complete_out
.L15005:
	mov	r0, r10
	bl	mtp_request_new
	cmp	r0, #0
	beq	.L14998
	str	r5, [r0, #28]
	ldr	r1, [r6, #520]
	str	r0, [r4, #168]
	ldr	r0, [r4, #96]
	bl	mtp_request_new
	cmp	r0, #0
	beq	.L14999
	movw	r3, #:lower16:kmalloc_caches
	movw	r10, #:lower16:mtp_complete_intr
	str	r5, [r0, #28]
	movt	r3, #:upper16:kmalloc_caches
	movt	r10, #:upper16:mtp_complete_intr
	str	r0, [r4, #172]
	mov	r7, #5
	str	r3, [sp, #16]
.L15000:
	ldr	r5, [r4, #100]
	mov	r1, #208
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	mov	r2, #28
	mov	r1, #208
	mov	r3, #16
	beq	.L14991
	ldr	r0, [sp, #16]
	ldr	ip, [r0, #24]
	subs	r0, ip, #0
	streq	r3, [r6]
	beq	.L15007
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r6]
	beq	.L15065
.L15007:
	add	r5, r4, #88
	str	r10, [r6, #28]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	add	r2, r4, #124
	ldr	r1, [r4, #128]
	add	r0, r6, #36
	bl	__list_add
	mov	r1, fp
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	subs	r7, r7, #1
	bne	.L15000
	ldr	r3, [sp, #20]
	ldr	r2, [r3, #24]
	ldr	r3, [r2]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L15008
	ldrb	r1, [r9, #-2162]	@ zero_extendqisi2
	ldrb	r3, [r9, #-2150]	@ zero_extendqisi2
	strb	r1, [r9, #-2122]
	strb	r3, [r9, #-2110]
	ldr	r0, [r2]
	ldr	r0, [r0, #20]
	cmp	r0, #4
	strbhi	r1, [r9, #-2098]
	strbhi	r3, [r9, #-2086]
.L15008:
	movw	r3, #4026
	ldrh	r0, [r8, r3]
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	beq	.L14974
	ldr	ip, [r4, #96]
	movw	r0, #:lower16:.LC1070
	movw	r3, #:lower16:.LC1071
	ldr	lr, [r2]
	movt	r0, #:upper16:.LC1070
	movt	r3, #:upper16:.LC1071
	ldr	r2, [r4, #92]
	ldr	r1, [sp, #28]
	ldr	ip, [ip, #4]
	ldr	r5, [lr, #20]
	ldr	lr, [r4]
	ldr	r1, [r1]
	str	ip, [sp, #8]
	ldr	ip, [r2, #4]
	movw	r2, #:lower16:.LC1127
	cmp	r5, #2
	movt	r2, #:upper16:.LC1127
	movhi	r3, r0
	str	lr, [sp]
	ldr	r0, .L15066+20
	add	r1, r1, #32
	str	ip, [sp, #4]
	bl	__dynamic_dev_dbg
	mov	r0, #0
	b	.L14974
.L15065:
	ldr	r3, [r5, #8]
	mov	r1, r6
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L14991:
	movw	r0, #:lower16:.LC1132
	movt	r0, #:upper16:.LC1132
	bl	printk
	mvn	r0, #0
	b	.L14974
.L15064:
	mov	r3, #16384
	mov	r1, r3
	str	r3, [r6, #520]
	b	.L14997
.L15060:
	movw	r3, #3978
	ldrh	r3, [r8, r3]
	tst	r3, #4
	beq	.L15053
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1130
	movt	r2, #:upper16:.LC1130
	ldr	r0, .L15066+24
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	mvn	r0, #18
	b	.L14974
.L15063:
	ldr	r6, [sp, #16]
	b	.L14994
.L15054:
	mov	r3, r2
	movw	r2, #:lower16:.LC1128
	ldr	r0, .L15066+28
	ldr	r1, [r3]
	movt	r2, #:upper16:.LC1128
	mov	r3, r4
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14975
.L15055:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1121
	mov	r3, r4
	movt	r2, #:upper16:.LC1121
	ldr	r0, .L15066+32
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14978
.L15057:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1123
	movt	r2, #:upper16:.LC1123
	ldr	r3, [r7, #4]
	ldr	r0, .L15066+36
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14981
.L15062:
	movt	r9, #:upper16:.LANCHOR7
	ldr	r3, [r9, #-2128]
	b	.L14986
.L15059:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1129
	movt	r2, #:upper16:.LC1129
	ldr	r3, [r7, #4]
	ldr	r0, .L15066+40
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14983
.L15061:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1131
	movt	r2, #:upper16:.LC1131
	ldr	r3, [r7, #4]
	ldr	r0, .L15066+44
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14985
.L14998:
	ldr	r3, [r6, #520]
	cmp	r3, #16384
	bls	.L14991
	ldr	r10, [r4, #96]
.L15003:
	mov	r1, #16384
	str	r7, [r6, #520]
	b	.L15005
.L14999:
	ldr	r3, [r6, #520]
	cmp	r3, #16384
	bls	.L14991
	ldr	r10, [r4, #96]
	ldr	fp, [r4, #172]
	cmp	fp, #0
	beq	.L15003
	ldr	r0, [fp]
	bl	kfree
	ldr	r3, [r10, #8]
	mov	r0, r10
	mov	r1, fp
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r10, [r4, #96]
	b	.L15003
.L15067:
	.align	2
.L15066:
	.word	.LANCHOR7-2164
	.word	.LANCHOR7-2152
	.word	.LANCHOR7-2140
	.word	.LANCHOR4+3864
	.word	.LANCHOR4+3912
	.word	.LANCHOR4+4008
	.word	.LANCHOR4+3960
	.word	.LANCHOR4+3816
	.word	.LANCHOR4+3840
	.word	.LANCHOR4+3888
	.word	.LANCHOR4+3936
	.word	.LANCHOR4+3984
	.fnend
	.size	mtp_function_bind, .-mtp_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_bind, %function
adb_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #4050
	movt	r5, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r4, r1
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r5, r3]
	.pad #28
	sub	sp, sp, #28
	ldr	r2, [r0, #24]
	tst	r3, #4
	str	r2, [r1, #84]
	str	r2, [sp, #16]
	bne	.L15116
.L15069:
	ldrb	r3, [r8, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L15115
	movw	r2, #4074
	movw	r9, #:lower16:.LANCHOR7
	ldrh	r2, [r5, r2]
	add	r0, r3, #12
	add	r1, r3, #1
	movt	r9, #:upper16:.LANCHOR7
	str	r4, [r8, r0, lsl #2]
	strb	r3, [r9, #-2074]
	tst	r2, #4
	strb	r1, [r8, #44]
	ldr	r5, [r4, #84]
	bne	.L15117
.L15072:
	mov	r2, #0
	ldr	r1, .L15124
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	subs	r6, r0, #0
	beq	.L15118
	ldr	r7, .L15124+4
	ldrh	r3, [r7, #-14]
	tst	r3, #4
	bne	.L15119
.L15075:
	str	r4, [r6]
	mov	r2, #0
	ldr	r1, .L15124+8
	str	r6, [r4, #92]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	subs	r6, r0, #0
	beq	.L15120
	ldr	r3, .L15124+12
	ldrh	r3, [r3, #-14]
	tst	r3, #4
	bne	.L15121
.L15077:
	str	r4, [r6]
	mov	r1, #208
	mov	r0, r6
	str	r6, [r4, #96]
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L15079
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #48]
	str	r3, [sp, #20]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5]
	beq	.L15081
	mov	r2, #4096
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	beq	.L15122
.L15081:
	movw	r3, #:lower16:adb_complete_out
	movw	r10, #:lower16:adb_complete_in
	movt	r3, #:upper16:adb_complete_out
	movt	r10, #:upper16:adb_complete_in
	mov	r7, #4
	str	r3, [r5, #28]
	str	r5, [r4, #152]
.L15087:
	ldr	r5, [r4, #92]
	mov	r1, #208
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	mov	r2, #4096
	mov	r1, #208
	mov	r3, #16
	beq	.L15079
	ldr	r0, [sp, #20]
	ldr	ip, [r0, #48]
	subs	r0, ip, #0
	streq	r3, [r6]
	beq	.L15084
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r6]
	beq	.L15123
.L15084:
	add	r5, r4, #88
	str	r10, [r6, #28]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	add	r2, r4, #120
	ldr	r1, [r4, #124]
	add	r0, r6, #36
	bl	__list_add
	mov	r1, fp
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	subs	r7, r7, #1
	bne	.L15087
	ldr	r2, [r8, #24]
	ldr	r3, [r2]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L15085
	ldrb	r1, [r9, #-2062]	@ zero_extendqisi2
	ldrb	r3, [r9, #-2050]	@ zero_extendqisi2
	strb	r1, [r9, #-2038]
	strb	r3, [r9, #-2026]
	ldr	r0, [r2]
	ldr	r0, [r0, #20]
	cmp	r0, #4
	strbhi	r1, [r9, #-2014]
	strbhi	r3, [r9, #-2002]
.L15085:
	ldr	r3, .L15124+16
	ldrh	r0, [r3, #-6]
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	beq	.L15068
	ldr	lr, [r4, #96]
	movw	ip, #:lower16:.LC1070
	movw	r3, #:lower16:.LC1071
	ldr	r1, .L15124+12
	movt	ip, #:upper16:.LC1070
	movt	r3, #:upper16:.LC1071
	ldr	r5, [r2]
	ldr	r2, [r4, #92]
	ldr	lr, [lr, #4]
	sub	r0, r1, #8
	ldr	r1, [sp, #16]
	ldr	r5, [r5, #20]
	ldr	r4, [r4]
	ldr	r1, [r1]
	str	lr, [sp, #8]
	ldr	lr, [r2, #4]
	cmp	r5, #2
	movw	r2, #:lower16:.LC1127
	movhi	r3, ip
	movt	r2, #:upper16:.LC1127
	add	r1, r1, #32
	stm	sp, {r4, lr}
	bl	__dynamic_dev_dbg
	mov	r0, #0
	b	.L15068
.L15118:
	ldr	r0, .L15124+20
	ldrh	r3, [r0, #2]
	tst	r3, #4
	beq	.L15115
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1122
	sub	r0, r0, #16
	movt	r2, #:upper16:.LC1122
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L15115:
	mvn	r0, #18
.L15068:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15120:
	ldr	r3, .L15124+24
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	beq	.L15115
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1124
	sub	r0, r7, #8
	movt	r2, #:upper16:.LC1124
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	mvn	r0, #18
	b	.L15068
.L15123:
	ldr	r3, [r5, #8]
	mov	r1, r6
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L15079:
	movw	r0, #:lower16:.LC1135
	movt	r0, #:upper16:.LC1135
	bl	printk
	mvn	r0, #0
	b	.L15068
.L15116:
	mov	r3, r2
	movw	r2, #:lower16:.LC1133
	ldr	r1, [r3]
	movt	r2, #:upper16:.LC1133
	add	r0, r5, #4032
	mov	r3, r4
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L15069
.L15117:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1121
	mov	r3, r4
	movt	r2, #:upper16:.LC1121
	ldr	r0, .L15124+28
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L15072
.L15122:
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L15079
.L15119:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1123
	sub	r0, r7, #32
	movt	r2, #:upper16:.LC1123
	ldr	r3, [r6, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L15075
.L15121:
	ldr	r3, .L15124+12
	movw	r2, #:lower16:.LC1134
	ldr	r1, [r5]
	movt	r2, #:upper16:.LC1134
	sub	r0, r3, #32
	ldr	r3, [r6, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L15077
.L15125:
	.align	2
.L15124:
	.word	.LANCHOR7-2064
	.word	.LANCHOR8-4048
	.word	.LANCHOR7-2052
	.word	.LANCHOR8-4000
	.word	.LANCHOR8-3984
	.word	.LANCHOR4+4096
	.word	.LANCHOR8-4032
	.word	.LANCHOR4+4056
	.fnend
	.size	adb_function_bind, .-adb_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_do_descs.constprop.142, %function
ffs_do_descs.constprop.142:
	.fnstart
	@ args = 4, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	mov	r5, #0
	strd	r6, [sp, #8]
	mov	r6, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	fp, r0
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r7, [sp, #56]
	str	r2, [sp, #4]
.L15145:
	ldr	r3, [r7, #48]
	cmp	r5, fp
	lsl	r1, r5, #2
	moveq	r4, #0
	cmp	r3, #0
	beq	.L15128
	cmp	r4, #0
	str	r4, [r3, r5, lsl #2]
	mov	r2, #2
	beq	.L15131
.L15161:
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	cmp	r3, #5
	beq	.L15160
.L15135:
	cmp	r6, #1
	bls	.L15137
	ldrb	r2, [r4]	@ zero_extendqisi2
	cmp	r6, r2
	bcc	.L15137
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	sub	r3, r3, #4
	cmp	r3, #44
	ldrls	pc, [pc, r3, asl #2]
	b	.L15137
.L15139:
	.word	.L15138
	.word	.L15140
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15141
	.word	.L15137
	.word	.L15142
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15137
	.word	.L15143
.L15141:
	cmp	r2, #5
	bne	.L15137
.L15144:
	sub	r6, r6, r2
	add	r4, r4, r2
	add	r5, r5, #1
	b	.L15145
.L15143:
	cmp	r2, #6
	beq	.L15144
.L15137:
	ldr	r0, .L15162
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	mvneq	r6, #21
	beq	.L15126
	movw	r1, #:lower16:.LC674
	sub	r0, r0, #32
	ldr	r2, .L15162+4
	movt	r1, #:upper16:.LC674
	mvn	r3, #21
	bl	__dynamic_pr_debug
	mvn	r6, #21
	b	.L15126
.L15140:
	sub	r3, r2, #7
	tst	r3, #253
	bne	.L15137
	ldrb	r3, [r4, #2]	@ zero_extendqisi2
	tst	r3, #15
	bne	.L15144
	b	.L15137
.L15138:
	cmp	r2, #9
	beq	.L15144
	b	.L15137
.L15142:
	cmp	r2, #8
	beq	.L15144
	b	.L15137
.L15128:
	ldr	r2, [r7, #44]
	cmp	r2, #0
	ldreq	r3, [r7, #52]
	strne	r4, [r2, r1]
	movne	r2, #1
	streq	r4, [r3, r1]
	cmp	r4, #0
	bne	.L15161
.L15131:
	ldr	r3, [sp, #4]
	sub	r6, r3, r6
.L15126:
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15160:
	ldrb	r3, [r4, #2]	@ zero_extendqisi2
	ldr	r10, [r7, #12]
	and	r3, r3, #15
	sub	r8, r3, #1
	rsb	r8, r8, r8, lsl #3
	str	r3, [sp, #8]
	lsl	r3, r8, #2
	add	r9, r10, r3
	add	r2, r9, r2, lsl #2
	ldr	r1, [r2, #8]
	cmp	r1, #0
	bne	.L15148
	str	r4, [r2, #8]
	ldr	r2, [r10, r8, lsl #2]
	cmp	r2, #0
	beq	.L15134
	ldr	r3, [r9, #8]
	ldrh	r2, [r4, #4]	@ unaligned
	ldrb	r3, [r3, #2]	@ zero_extendqisi2
	cmp	r2, #0
	strb	r3, [r4, #2]
	bne	.L15135
	ldr	r3, [r9, #8]
	ldrh	r3, [r3, #4]	@ unaligned
	strh	r3, [r4, #4]	@ unaligned
	b	.L15135
.L15134:
	mov	r1, r4
	ldr	r0, [r7, #4]
	str	r3, [sp, #12]
	bl	usb_ep_autoconfig_ss
	subs	r2, r0, #0
	beq	.L15149
	ldr	lr, [r7, #12]
	mov	r1, #208
	ldr	r3, [sp, #12]
	str	r2, [sp, #12]
	ldr	ip, [r2, #8]
	add	r3, lr, r3
	str	r3, [r2]
	ldr	r3, [ip, #8]
	blx	r3
	cmp	r0, #0
	beq	.L15150
	ldr	r2, [sp, #12]
	str	r2, [r10, r8, lsl #2]
	ldr	r2, [sp, #8]
	str	r0, [r9, #4]
	ldrb	r3, [r4, #2]	@ zero_extendqisi2
	and	r3, r3, #15
	add	r3, r7, r3
	strb	r2, [r3, #16]
	b	.L15135
.L15148:
	mvn	r6, #21
.L15133:
	ldr	r0, .L15162+8
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L15126
	movw	r1, #:lower16:.LC1136
	mov	r2, r5
	movt	r1, #:upper16:.LC1136
	mov	r3, r6
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L15126
.L15149:
	movw	r6, #65012
	movt	r6, 65535
	b	.L15133
.L15150:
	mvn	r6, #11
	b	.L15133
.L15163:
	.align	2
.L15162:
	.word	.LANCHOR4-1504
	.word	.LANCHOR5-2872
	.word	.LANCHOR8-3952
	.fnend
	.size	ffs_do_descs.constprop.142, .-ffs_do_descs.constprop.142
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_bind, %function
ffs_func_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r2, r1, #36
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r1, #-32]
	.pad #44
	sub	sp, sp, #44
	ldr	r6, [r1, #-28]
	str	r2, [sp, #12]
	ldr	r3, [r3, #20]
	ldr	r4, [r6, #164]
	adds	r0, r4, #0
	movne	r0, #1
	cmp	r3, #2
	movls	r10, #0
	strls	r10, [sp, #20]
	bls	.L15165
	ldr	r10, [r6, #168]
	cmp	r10, #0
	movne	r0, #1
	movne	r10, r0
	cmp	r3, #4
	movls	r3, #0
	strls	r3, [sp, #20]
	bls	.L15165
	ldr	r3, [r6, #172]
	cmp	r3, #0
	movne	r0, #1
	streq	r3, [sp, #20]
	strne	r0, [sp, #20]
.L15165:
	ldrh	r3, [r6, #180]
	cmp	r4, #0
	lsl	r2, r3, #3
	sub	ip, r2, r3
	sub	r3, r2, r3
	lsl	ip, ip, #2
	str	ip, [sp, #16]
	addne	ip, r4, #1
	moveq	ip, r4
	add	r3, r3, ip
	cmp	r10, #0
	lsl	r2, r3, #2
	str	r2, [sp, #32]
	ldrne	r2, [r6, #168]
	addne	r2, r2, #1
	addne	r3, r3, r2
	lsl	r2, r3, #2
	str	r2, [sp, #24]
	ldr	r2, [sp, #20]
	cmp	r2, #0
	beq	.L15213
	ldr	r2, [r6, #172]
	add	r2, r2, #1
	add	r3, r3, r2
	lsl	r2, r3, #2
	str	r2, [sp, #28]
.L15169:
	ldrh	fp, [r6, #178]
	cmp	r0, #0
	ldr	r9, [r6, #148]
	add	r3, fp, r3, lsl #1
	lsl	fp, fp, #1
	lsl	r5, r3, #1
	add	r0, r9, #3
	str	r3, [sp, #36]
	add	r0, r0, r5
	bic	r0, r0, #3
	beq	.L15214
	mov	r7, r1
	mov	r1, #208
	bl	__kmalloc
	subs	r8, r0, #0
	mvneq	r4, #11
	beq	.L15164
	ldr	r3, [sp, #16]
	cmp	r3, #0
	bne	.L15253
.L15171:
	ldr	r1, [r6, #144]
	add	r5, r8, r5
	mov	r0, r5
	ldr	r2, [r6, #152]
	add	r1, r1, #16
	bl	memcpy
	ldr	r3, [r7, #-28]
	ldr	r3, [r3, #172]
	cmp	r3, #0
	bne	.L15254
.L15172:
	ldr	r3, [sp, #28]
	cmp	fp, #0
	add	r3, r8, r3
	bne	.L15255
.L15173:
	ldrh	r1, [r6, #180]
	cmp	r1, #0
	beq	.L15174
	rsb	r2, r1, r1, lsl #3
	mvn	r0, #0
	add	r2, r8, r2, lsl #2
.L15175:
	subs	r1, r1, #1
	strb	r0, [r2, #20]
	sub	r2, r2, #28
	bne	.L15175
.L15174:
	cmp	r4, #0
	str	r8, [r7, #-24]
	str	r3, [r7, #-4]
	beq	.L15176
	ldr	ip, [sp, #12]
	mov	r2, r9
	ldr	r3, [sp, #16]
	add	r1, r8, r3
	movw	r3, #:lower16:__ffs_func_bind_do_descs
	movt	r3, #:upper16:__ffs_func_bind_do_descs
	str	r1, [r7, #16]
	mov	r1, r5
	ldr	r0, [r6, #164]
	str	ip, [sp]
	bl	ffs_do_descs.constprop.142
	subs	r4, r0, #0
	blt	.L15164
.L15176:
	cmp	r10, #0
	beq	.L15177
	ldr	r3, [sp, #32]
	sub	fp, r9, r4
	mov	r2, fp
	add	r1, r8, r3
	movw	r3, #:lower16:__ffs_func_bind_do_descs
	movt	r3, #:upper16:__ffs_func_bind_do_descs
	str	r1, [r7, #8]
	ldr	r1, [sp, #12]
	ldr	r0, [r6, #168]
	str	r1, [sp]
	add	r1, r5, r4
	bl	ffs_do_descs.constprop.142
	cmp	r0, #0
	blt	.L15256
	ldr	r3, [sp, #20]
	cmp	r3, #0
	beq	.L15257
.L15204:
	ldr	ip, [sp, #12]
	add	r4, r4, r0
	sub	r2, fp, r0
	ldr	r3, [sp, #24]
	add	r1, r5, r4
	add	r3, r8, r3
	str	r3, [r7, #12]
	movw	r3, #:lower16:__ffs_func_bind_do_descs
	ldr	r0, [r6, #172]
	movt	r3, #:upper16:__ffs_func_bind_do_descs
	str	ip, [sp]
	bl	ffs_do_descs.constprop.142
	subs	r4, r0, #0
	blt	.L15164
	cmp	r10, #0
	ldr	r3, [r6, #164]
	bne	.L15258
.L15202:
	ldr	r1, [r6, #172]
.L15203:
	adds	r1, r1, r3
	moveq	r0, #1
	movne	r0, #0
	cmp	r5, #0
	moveq	r0, #1
	cmp	r0, #0
	bne	.L15180
	cmp	r9, #1
	bls	.L15218
	ldr	r3, [sp, #36]
	ldrb	r3, [r8, r3, lsl #1]	@ zero_extendqisi2
	cmp	r9, r3
	bcc	.L15218
	mov	r4, r9
.L15182:
	ldrb	r2, [r5, #1]	@ zero_extendqisi2
	sub	r2, r2, #4
	cmp	r2, #44
	ldrls	pc, [pc, r2, asl #2]
	b	.L15218
.L15185:
	.word	.L15184
	.word	.L15186
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15187
	.word	.L15218
	.word	.L15188
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15218
	.word	.L15189
.L15259:
	subs	r4, r9, r4
	bmi	.L15164
.L15180:
	add	r5, r6, #116
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #96]
	mov	r7, r0
	add	r0, r6, #100
	ldrh	r2, [r6, #104]
	mov	lr, r0
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r6, #96]
	cmp	r2, #0
	beq	.L15219
	add	r2, r0, r2
	mov	r3, r0
.L15201:
	ldrb	r1, [r3], #1	@ zero_extendqisi2
	sub	ip, r1, #5
	cmp	ip, #1
	strbls	r1, [r0]
	addls	r0, r0, #1
	cmp	r2, r3
	bne	.L15201
	sub	r2, r0, lr
	add	r1, r2, #1
	uxth	r2, r2
	uxth	r1, r1
.L15199:
	add	r3, r6, r2
	strh	r1, [r6, #104]	@ movhi
	mov	r4, #0
	mov	r0, r5
	mov	r1, #3
	mov	r2, #1
	strb	r4, [r3, #100]
	bl	__wake_up_locked
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L15164:
	mov	r0, r4
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15213:
	ldr	r2, [sp, #24]
	str	r2, [sp, #28]
	b	.L15169
.L15186:
	sub	r2, r3, #7
	tst	r2, #253
	bne	.L15218
	ldrb	r2, [r5, #2]	@ zero_extendqisi2
	tst	r2, #15
	bne	.L15194
.L15218:
	mvn	r4, #21
.L15183:
	ldr	r0, .L15261
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L15164
	movw	r1, #:lower16:.LC674
	ldr	r2, .L15261+4
	mov	r3, r4
	movt	r1, #:upper16:.LC674
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L15164
.L15187:
	cmp	r3, #5
	bne	.L15218
.L15194:
	adds	r5, r5, r3
	add	r0, r0, #1
	moveq	r2, #1
	movne	r2, #0
	sub	r4, r4, r3
	cmp	r1, r0
	movne	r3, r2
	orreq	r3, r2, #1
	cmp	r3, #0
	bne	.L15259
	cmp	r4, #1
	bls	.L15218
	ldrb	r3, [r5]	@ zero_extendqisi2
	cmp	r4, r3
	bcs	.L15182
	b	.L15218
.L15189:
	cmp	r3, #6
	beq	.L15194
	b	.L15218
.L15184:
	cmp	r3, #9
	bne	.L15218
	ldrb	r2, [r5, #2]	@ zero_extendqisi2
	ldr	ip, [r7, #-4]
	lsl	lr, r2, #1
	ldrsh	ip, [ip, lr]
	cmp	ip, #0
	blt	.L15260
.L15190:
	ldrb	r2, [r5, #8]	@ zero_extendqisi2
	strb	ip, [r5, #2]
	cmp	r2, #0
	beq	.L15194
	ldr	ip, [r7, #-28]
	sub	r2, r2, #-536870911
	ldr	ip, [ip, #188]
	ldr	ip, [ip]
	ldr	ip, [ip, #4]
	ldrb	r2, [ip, r2, lsl #3]	@ zero_extendqisi2
	strb	r2, [r5, #8]
	b	.L15194
.L15258:
	ldr	r2, [r6, #168]
	add	r3, r3, r2
	b	.L15202
.L15188:
	cmp	r3, #8
	bne	.L15218
	ldrb	r2, [r5, #7]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L15194
	ldr	ip, [r7, #-28]
	sub	r2, r2, #-536870911
	ldr	ip, [ip, #188]
	ldr	ip, [ip]
	ldr	ip, [ip, #4]
	ldrb	r2, [ip, r2, lsl #3]	@ zero_extendqisi2
	strb	r2, [r5, #7]
	b	.L15194
.L15255:
	mov	r0, r3
	mov	r2, fp
	mov	r1, #255
	bl	memset
	mov	r3, r0
	b	.L15173
.L15254:
	ldr	r1, [r6, #144]
	ldr	r0, [r6, #152]
	ldr	r3, [r6, #156]
	ldr	r2, [r6, #160]
	add	r0, r5, r0
	add	r1, r1, r3
	bl	memcpy
	b	.L15172
.L15253:
	mov	r1, r3
	bl	__memzero
	b	.L15171
.L15260:
	ldr	r8, [r7, #-36]
	ldrb	ip, [r8, #44]	@ zero_extendqisi2
	cmp	ip, #15
	bls	.L15191
	ldr	r0, .L15261+8
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L15192
	mvn	r4, #18
	b	.L15183
.L15191:
	add	r2, ip, #1
	add	r10, ip, #12
	str	r7, [r8, r10, lsl #2]
	strb	r2, [r8, #44]
	ldr	r2, [r7, #-4]
	strh	ip, [r2, lr]	@ movhi
	ldr	r2, [r7, #-4]
	ldrsh	ip, [r2, lr]
	b	.L15190
.L15214:
	movw	r4, #65012
	movt	r4, 65535
	b	.L15164
.L15219:
	mov	r1, #1
	b	.L15199
.L15177:
	ldr	r3, [sp, #20]
	cmp	r3, #0
	movne	r0, r10
	subne	fp, r9, r4
	bne	.L15204
	ldr	r3, [r6, #164]
	ldr	r1, [sp, #20]
	b	.L15203
.L15257:
	mov	r1, r3
	ldrd	r2, [r6, #164]
	add	r3, r3, r2
	b	.L15203
.L15256:
	mov	r4, r0
	b	.L15164
.L15192:
	movw	r1, #:lower16:.LC1137
	mvn	r3, #18
	movt	r1, #:upper16:.LC1137
	sub	r0, r0, #24
	mov	r4, r3
	bl	__dynamic_pr_debug
	b	.L15183
.L15262:
	.align	2
.L15261:
	.word	.LANCHOR4-1504
	.word	.LANCHOR5-2872
	.word	.LANCHOR8-3936
	.fnend
	.size	ffs_func_bind, .-ffs_func_bind
	.align	2
	.global	usb_ep_autoconfig
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_ep_autoconfig, %function
usb_ep_autoconfig:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r7, r0
	mov	r6, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r10, [r0, #28]
	movw	r0, #:lower16:.LC470
	ldrb	r8, [r1, #3]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	movt	r0, #:upper16:.LC470
	mov	r1, r10
	bl	strcmp
	ldr	r9, [r5, #8]!
	cmp	r0, #0
	and	r8, r8, #3
	sub	r4, r9, #12
	mov	fp, r9
	bne	.L15264
	cmp	r8, #3
	beq	.L15351
	movw	r0, #:lower16:.LC473
	mov	r1, r10
	movt	r0, #:upper16:.LC473
	bl	strcmp
	cmp	r0, #0
	bne	.L15274
.L15275:
	cmp	r8, #2
	beq	.L15352
.L15274:
	cmp	fp, r5
	beq	.L15279
.L15273:
	movw	r8, #:lower16:_ctype
	movw	r9, #:lower16:.LANCHOR1
	movw	r10, #:lower16:.LC472
	movt	r8, #:upper16:_ctype
	movt	r9, #:upper16:.LANCHOR1
	movt	r10, #:upper16:.LC472
	b	.L15298
.L15282:
	ldr	r4, [r4, #12]
	cmp	r5, r4
	sub	r4, r4, #12
	beq	.L15279
.L15298:
	ldr	r3, [r4]
	cmp	r3, #0
	bne	.L15282
	ldrb	r3, [r6, #3]	@ zero_extendqisi2
	ands	fp, r3, #3
	beq	.L15282
	ldr	r3, [r4, #4]
	ldrb	r2, [r3]	@ zero_extendqisi2
	cmp	r2, #101
	bne	.L15282
	ldrb	r2, [r3, #2]	@ zero_extendqisi2
	cmp	r2, #45
	beq	.L15283
	mov	r0, r3
	mov	r1, #45
	str	r3, [sp, #4]
	bl	strrchr
	subs	r2, r0, #0
	ldr	r3, [sp, #4]
	beq	.L15284
	cmp	fp, #2
	beq	.L15286
	cmp	fp, #3
	ldrb	r3, [r2, #2]	@ zero_extendqisi2
	bne	.L15339
	cmp	r3, #115
	str	r2, [sp, #4]
	beq	.L15282
	mov	r0, r10
	ldr	r1, [r7, #28]
	bl	strcmp
	cmp	r0, #0
	ldr	r2, [sp, #4]
	bne	.L15288
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #105
	bne	.L15288
	b	.L15282
.L15264:
	movw	r0, #:lower16:.LC473
	mov	r1, r10
	movt	r0, #:upper16:.LC473
	bl	strcmp
	cmp	r0, #0
	bne	.L15274
	cmp	r8, #3
	bne	.L15275
	cmp	r5, r9
	movwne	r9, #:lower16:.LC1068
	movne	r8, r4
	movtne	r9, #:upper16:.LC1068
	bne	.L15276
	b	.L15279
.L15353:
	ldr	r8, [r8, #12]
	cmp	r5, r8
	sub	r8, r8, #12
	beq	.L15273
.L15276:
	mov	r1, r9
	ldr	r0, [r8, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L15353
.L15280:
	cmp	r8, #0
	beq	.L15273
	ldr	r3, [r8]
	cmp	r3, #0
	bne	.L15273
	mov	r2, r6
	mov	r1, r8
	mov	r0, r7
	bl	ep_matches.part.13
	cmp	r0, #0
	bne	.L15303
	ldr	fp, [r7, #8]
	sub	r4, fp, #12
	b	.L15274
.L15351:
	cmp	r5, r9
	beq	.L15279
	movw	r9, #:lower16:.LC1066
	mov	r8, r4
	movt	r9, #:upper16:.LC1066
	b	.L15268
.L15354:
	ldr	r8, [r8, #12]
	cmp	r5, r8
	sub	r8, r8, #12
	beq	.L15269
.L15268:
	mov	r1, r9
	ldr	r0, [r8, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L15354
	cmp	r8, #0
	beq	.L15269
	ldr	r3, [r8]
	cmp	r3, #0
	bne	.L15269
	mov	r2, r6
	mov	r1, r8
	mov	r0, r7
	bl	ep_matches.part.13
	cmp	r0, #0
	bne	.L15303
	ldr	r4, [r7, #8]
	cmp	r5, r4
	sub	r4, r4, #12
	bne	.L15269
.L15279:
	mov	r4, #0
.L15263:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15284:
	mov	r0, r3
	str	r3, [sp, #4]
	bl	strlen
	ldr	r3, [sp, #4]
	add	r2, r3, r0
.L15288:
	ldrb	r3, [r2, #-1]	@ zero_extendqisi2
	ldrb	r2, [r8, r3]	@ zero_extendqisi2
	tst	r2, #4
	bne	.L15283
	ldrsb	r2, [r6, #2]
	cmp	r2, #0
	blt	.L15355
	cmp	r3, #116
	bne	.L15282
.L15283:
	ldrh	r3, [r6, #4]	@ unaligned
	cmp	r3, #0
	ldrheq	r3, [r4, #20]
	strheq	r3, [r6, #4]	@ unaligned
	cmp	fp, #1
	ubfx	r2, r3, #0, #11
	beq	.L15292
	cmp	fp, #3
	bne	.L15291
	ldr	r0, [r7, #20]
	cmp	r0, #2
	movls	r1, #1
	movhi	r1, #0
	cmp	r2, #64
	movls	r1, #0
	cmp	r1, #0
	bne	.L15282
.L15292:
	ldrh	r1, [r4, #20]
	cmp	r1, r2
	bcc	.L15282
	ldr	r1, [r7, #20]
	cmp	r1, #2
	bhi	.L15291
	cmp	r2, #1024
	bcs	.L15282
	tst	r3, #6144
	bne	.L15282
.L15291:
	ldrb	r3, [r6, #2]	@ zero_extendqisi2
	and	r3, r3, #128
	strb	r3, [r6, #2]
	ldr	r0, [r4, #4]
	ldrb	r2, [r0, #2]	@ zero_extendqisi2
	ldrb	r2, [r8, r2]	@ zero_extendqisi2
	tst	r2, #4
	bne	.L15356
	ldr	r2, [r9, #3228]
	add	r2, r2, #1
	cmp	r2, #15
	str	r2, [r9, #3228]
	bhi	.L15282
	orr	r3, r3, r2
	uxtb	r3, r3
	strb	r3, [r6, #2]
.L15296:
	cmp	fp, #2
	bne	.L15297
	ldrh	r2, [r4, #20]
	cmp	r2, #64
	movge	r2, #64
	strh	r2, [r6, #4]	@ unaligned
.L15297:
	strb	r3, [r4, #25]
.L15270:
	mov	r3, #0
	str	r3, [r4, #28]
	str	r3, [r4, #32]
	b	.L15263
.L15352:
	ldrsb	r3, [r6, #2]
	cmp	r3, #0
	bge	.L15274
	cmp	r5, r9
	beq	.L15279
	movw	r9, #:lower16:.LC1069
	mov	r8, r4
	movt	r9, #:upper16:.LC1069
	b	.L15281
.L15357:
	ldr	r8, [r8, #12]
	cmp	r5, r8
	sub	r8, r8, #12
	beq	.L15273
.L15281:
	mov	r1, r9
	ldr	r0, [r8, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L15357
	b	.L15280
.L15269:
	movw	r9, #:lower16:.LC1067
	mov	r8, r4
	movt	r9, #:upper16:.LC1067
	b	.L15272
.L15358:
	ldr	r8, [r8, #12]
	cmp	r5, r8
	sub	r8, r8, #12
	beq	.L15273
.L15272:
	mov	r1, r9
	ldr	r0, [r8, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L15358
	b	.L15280
.L15286:
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #98
	bne	.L15282
	b	.L15288
.L15339:
	cmp	r3, #115
	bne	.L15282
	b	.L15288
.L15356:
	add	r0, r0, #2
	mov	r2, #10
	mov	r1, #0
	bl	simple_strtoul
	ldrb	r3, [r6, #2]	@ zero_extendqisi2
	orr	r3, r3, r0
	uxtb	r3, r3
	strb	r3, [r6, #2]
	b	.L15296
.L15355:
	cmp	r3, #110
	bne	.L15282
	b	.L15283
.L15303:
	mov	r4, r8
	b	.L15270
	.fnend
	.size	usb_ep_autoconfig, .-usb_ep_autoconfig
	.align	2
	.global	usb_ep_autoconfig_reset
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_ep_autoconfig_reset, %function
usb_ep_autoconfig_reset:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #8]!
	cmp	r0, r3
	sub	r3, r3, #12
	beq	.L15360
	mov	r1, #0
.L15361:
	ldr	r2, [r3, #12]
	str	r1, [r3]
	cmp	r0, r2
	sub	r3, r2, #12
	bne	.L15361
.L15360:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	str	r2, [r3, #3228]
	bx	lr
	.fnend
	.size	usb_ep_autoconfig_reset, .-usb_ep_autoconfig_reset
	.align	2
	.global	config_ep_by_speed
	.syntax unified
	.arm
	.fpu softvfp
	.type	config_ep_by_speed, %function
config_ep_by_speed:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r2
	str	r6, [sp, #8]
	add	r0, r0, #32
	mov	r6, r1
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r6, #0
	clz	r3, r5
	lsr	r3, r3, #5
	moveq	r3, #1
	cmp	r4, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L15371
	ldr	r3, [r4, #16]
	cmp	r3, #3
	beq	.L15367
	cmp	r3, #5
	beq	.L15413
.L15366:
	ldr	ip, [r6, #16]
	mov	r6, #0
.L15370:
	ldr	r3, [ip]
	cmp	r3, #0
	beq	.L15371
	ldrb	r2, [r3, #1]	@ zero_extendqisi2
	cmp	r2, #5
	bne	.L15373
	b	.L15372
.L15374:
	ldrb	r1, [r3, #1]	@ zero_extendqisi2
	cmp	r1, #5
	beq	.L15372
.L15373:
	ldr	r3, [ip, #4]!
	cmp	r3, #0
	bne	.L15374
.L15371:
	mvn	r0, #4
.L15363:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15413:
	ldr	r3, [r4, #20]
	cmp	r3, #4
	bhi	.L15414
.L15369:
	cmp	r3, #2
	bls	.L15366
	ldr	ip, [r6, #8]
	mov	r6, #0
	b	.L15370
.L15372:
	cmp	ip, #0
	beq	.L15371
	ldrb	lr, [r5, #25]	@ zero_extendqisi2
	ldrb	r2, [r3, #2]	@ zero_extendqisi2
	cmp	r2, lr
	beq	.L15375
.L15380:
	ldr	r3, [ip, #4]
	add	r1, ip, #4
	cmp	r3, #0
	bne	.L15379
	b	.L15371
.L15377:
	ldr	r3, [r1, #4]!
	cmp	r3, #0
	beq	.L15371
.L15379:
	ldrb	ip, [r3, #1]	@ zero_extendqisi2
	cmp	ip, #5
	bne	.L15377
	subs	ip, r1, #0
	beq	.L15371
	ldrb	r1, [r3, #2]	@ zero_extendqisi2
	cmp	r1, lr
	bne	.L15380
.L15375:
	ldrb	r2, [r5, #24]	@ zero_extendqisi2
	mov	r1, #0
	ldrh	lr, [r3, #4]	@ unaligned
	cmp	r6, r1
	and	r2, r2, #131
	bfi	r2, r1, #0, #2
	strh	lr, [r5, #20]	@ movhi
	str	r1, [r5, #32]
	strb	r2, [r5, #24]
	str	r3, [r5, #28]
	beq	.L15382
	ldr	r2, [ip, #4]
	cmp	r2, #0
	beq	.L15371
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	cmp	r1, #48
	bne	.L15371
	str	r2, [r5, #32]
	ldr	r1, [r4, #16]
	cmp	r1, #5
	beq	.L15415
.L15382:
	mov	r0, #0
	b	.L15363
.L15367:
	ldr	r3, [r4, #20]
	b	.L15369
.L15414:
	ldr	ip, [r6, #12]
	mov	r6, #1
	b	.L15370
.L15415:
	ldrb	r3, [r3, #3]	@ zero_extendqisi2
	and	r3, r3, #3
	cmp	r3, #1
	beq	.L15384
	bcc	.L15416
.L15385:
	ldrb	r3, [r2, #2]	@ zero_extendqisi2
	mov	r0, #0
	ldrb	r2, [r5, #24]	@ zero_extendqisi2
	add	r3, r3, #1
	bfi	r2, r3, #2, #5
	strb	r2, [r5, #24]
	b	.L15363
.L15384:
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	ldrb	r1, [r2, #3]	@ zero_extendqisi2
	bfi	r3, r1, #0, #2
	strb	r3, [r5, #24]
	b	.L15385
.L15416:
	ldrb	r3, [r2, #2]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L15386
	ldr	r0, [r0]
	movw	r1, #:lower16:.LC1138
	movt	r1, #:upper16:.LC1138
	add	r0, r0, #32
	bl	dev_err
.L15386:
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	mov	r2, #1
	mov	r0, #0
	bfi	r3, r2, #2, #5
	strb	r3, [r5, #24]
	b	.L15363
	.fnend
	.size	config_ep_by_speed, .-config_ep_by_speed
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_set_alt, %function
diag_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #88]
	ldr	r5, [r3, #24]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L15420
	mov	r1, r4
	ldr	r2, [r4, #84]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L15420
	ldr	r3, [r4, #124]
	cmp	r3, #0
	beq	.L15423
	str	r4, [r3, #20]
	ldr	r3, [r4, #88]
	str	r4, [r3]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15428
	ldr	r3, [r4, #84]
	str	r4, [r3]
	ldr	r3, [r4, #84]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15429
	add	r6, r4, #108
	str	r5, [r4, #128]
	mov	r0, r6
	str	r5, [r4, #132]
	str	r5, [r4, #136]
	bl	_raw_spin_lock_irqsave
	mov	r3, #1
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #112]
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [r4, #124]
	ldr	r3, [r2, #12]
	cmp	r3, #0
	beq	.L15417
	ldr	r0, [r2, #16]
	mov	r1, r5
	mov	r2, r5
	blx	r3
.L15417:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15429:
	ldr	r2, [r4, #84]
	movw	r1, #:lower16:.LC1139
	mov	r3, r5
	ldr	r0, [r4, #116]
	movt	r1, #:upper16:.LC1139
	ldr	r2, [r2, #4]
	ldr	r0, [r0]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L15417
.L15428:
	ldr	r2, [r4, #88]
	movw	r1, #:lower16:.LC1139
	mov	r3, r5
	ldr	r0, [r4, #116]
	movt	r1, #:upper16:.LC1139
	ldr	r2, [r2, #4]
	ldr	r0, [r0]
	add	r0, r0, #32
	bl	dev_err
	b	.L15417
.L15420:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r5, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #84]
	str	r3, [r2, #28]
	b	.L15417
.L15423:
	mvn	r5, #18
	b	.L15417
	.fnend
	.size	diag_function_set_alt, .-diag_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_set_alt, %function
rmnet_smd_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #84]
	ldr	r2, [r0, #92]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15441
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15442
	mov	r1, r4
	ldr	r2, [r4, #88]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15443
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15444
	mov	r1, r4
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15445
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15446
	add	r2, r4, #392
	ldr	r1, [r4, #388]
	mov	r0, #4
	bl	queue_work_on
	b	.L15430
.L15442:
	ldr	r2, [r4, #92]
	movw	r1, #:lower16:.LC1139
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1139
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
.L15430:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15444:
	ldr	r2, [r4, #88]
	movw	r1, #:lower16:.LC1139
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1139
.L15440:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L15430
.L15446:
	ldr	r2, [r4, #96]
	movw	r1, #:lower16:.LC1139
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1139
.L15439:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L15430
.L15441:
	ldr	r2, [r4, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC1140
	movt	r1, #:upper16:.LC1140
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L15430
.L15443:
	ldr	r2, [r4, #88]
	mov	r0, #0
	movw	r1, #:lower16:.LC1140
	movt	r1, #:upper16:.LC1140
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #88]
	ldr	r0, [r6]
	b	.L15440
.L15445:
	ldr	r2, [r4, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC1140
	movt	r1, #:upper16:.LC1140
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	b	.L15439
	.fnend
	.size	rmnet_smd_set_alt, .-rmnet_smd_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_set_alt, %function
rmnet_sdio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #84]
	ldr	r3, [r0, #92]
	str	r0, [r3]
	ldr	r2, [r0, #92]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15468
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15469
	ldr	r3, [r4, #88]
	mov	r1, r4
	str	r4, [r3]
	ldr	r2, [r4, #88]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15470
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15471
	mov	r1, r4
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15472
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15473
	ldr	r6, [r4, #96]
	mov	r1, #32
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	bne	.L15474
.L15455:
	mvn	r3, #11
	mov	r5, r3
	str	r3, [r4, #100]
.L15460:
	movw	r0, #:lower16:.LC1142
	ldr	r1, .L15475
	movt	r0, #:upper16:.LC1142
	bl	printk
	b	.L15447
.L15469:
	ldr	r2, [r4, #92]
	movw	r1, #:lower16:.LC1139
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1139
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
.L15447:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15471:
	ldr	r2, [r4, #88]
	movw	r1, #:lower16:.LC1139
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1139
.L15467:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L15447
.L15473:
	ldr	r2, [r4, #96]
	movw	r1, #:lower16:.LC1139
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1139
.L15466:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L15447
.L15474:
	mov	r2, #8
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	str	r2, [r5, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5]
	beq	.L15457
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L15457
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L15455
.L15457:
	cmn	r5, #4096
	str	r5, [r4, #100]
	bhi	.L15460
	movw	r3, #:lower16:rmnet_sdio_notify_complete
	mov	r1, #8
	movt	r3, #:upper16:rmnet_sdio_notify_complete
	mov	r2, #1
	mov	r0, r4
	str	r3, [r5, #28]
	ldr	r3, [r4, #100]
	str	r4, [r3, #32]
	ldr	r3, [r4, #100]
	str	r1, [r3, #4]
	str	r2, [r4, #192]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	rmnet_sdio_start_io
.L15468:
	ldr	r2, [r4, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC1141
	movt	r1, #:upper16:.LC1141
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L15447
.L15470:
	ldr	r2, [r4, #88]
	mov	r0, #0
	movw	r1, #:lower16:.LC1141
	movt	r1, #:upper16:.LC1141
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #88]
	ldr	r0, [r6]
	b	.L15467
.L15472:
	ldr	r2, [r4, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC1141
	movt	r1, #:upper16:.LC1141
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	b	.L15466
.L15476:
	.align	2
.L15475:
	.word	.LANCHOR5+412
	.fnend
	.size	rmnet_sdio_set_alt, .-rmnet_sdio_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_set_alt, %function
audio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15493
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r2
	mov	r4, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r0, #20]
	ldrh	r2, [r3, #-14]
	ldr	r7, [r1, #24]
	tst	r2, #4
	bne	.L15490
.L15478:
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldrb	r3, [r3, #3106]	@ zero_extendqisi2
	cmp	r3, r5
	beq	.L15491
.L15484:
	mov	r5, #0
.L15477:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15491:
	cmp	r6, #0
	ldrb	r8, [r4, #152]	@ zero_extendqisi2
	beq	.L15480
	cmp	r8, #0
	bne	.L15484
	mov	r1, r4
	ldr	r2, [r4, #104]
	ldr	r0, [r7]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15492
	ldr	r3, [r4, #104]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	moveq	r3, #1
	strbeq	r3, [r4, #152]
	beq	.L15477
	ldr	r2, [r4, #104]
	movw	r1, #:lower16:.LC1145
	mov	r3, r5
	ldr	r0, [r7]
	movt	r1, #:upper16:.LC1145
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L15477
.L15480:
	cmp	r8, #0
	beq	.L15485
	ldr	r0, [r4, #104]
	mov	r5, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	strb	r6, [r4, #152]
	b	.L15477
.L15490:
	movw	r1, #:lower16:.LC1143
	sub	r0, r3, #32
	movt	r1, #:upper16:.LC1143
	mov	r3, r6
	mov	r2, r5
	bl	__dynamic_pr_debug
	b	.L15478
.L15485:
	mov	r5, r6
	b	.L15477
.L15492:
	ldr	r2, [r4, #104]
	movw	r1, #:lower16:.LC1144
	mov	r3, r5
	movt	r1, #:upper16:.LC1144
	str	r8, [r2, #28]
	ldr	r2, [r4, #104]
	ldr	r0, [r7]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L15477
.L15494:
	.align	2
.L15493:
	.word	.LANCHOR8-3904
	.fnend
	.size	audio_set_alt, .-audio_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_stop, %function
eth_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r1, [r0, #576]
	cmp	r1, #0
	beq	.L15509
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
.L15504:
	add	r6, r5, #1152
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #1156]
	mov	r7, r0
	cmp	r4, #0
	beq	.L15498
	ldr	r3, [r4, #140]
	cmp	r3, #0
	beq	.L15499
	mov	r0, r4
	blx	r3
.L15499:
	ldr	r3, [r4, #88]
	ldr	r1, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r9, [r3, #28]
	ldr	r8, [r1, #28]
	ldr	r3, [r2, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #164]
	tst	r3, #4
	beq	.L15510
.L15498:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
.L15495:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15510:
	mov	r1, r4
	ldr	r2, [r4, #88]
	ldr	r0, [r5, #1164]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L15503
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r5, #1164]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L15503
	ldr	r3, [r4, #88]
	str	r9, [r3, #28]
	ldr	r3, [r4, #92]
	str	r8, [r3, #28]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	b	.L15498
.L15509:
	movw	r0, #:lower16:.LC109
	movw	r1, #1847
	movt	r0, #:upper16:.LC109
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC110
	movt	r0, #:upper16:.LC110
	bl	printk
	b	.L15504
.L15503:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L15495
	.fnend
	.size	eth_stop, .-eth_stop
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_function_set_alt, %function
acc_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L15528
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	mov	r3, r2
	str	lr, [sp, #12]
	ldr	r0, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	ldrh	r2, [ip, #-6]
	ldr	r6, [r0, #24]
	tst	r2, #4
	ldr	r0, [r6]
	bne	.L15523
.L15512:
	mov	r1, r4
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15524
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15525
	mov	r1, r4
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15526
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15527
	ldrb	ip, [r4, #100]	@ zero_extendqisi2
	mov	r2, #1
	add	r0, r4, #1664
	mov	r3, r5
	mov	r1, #3
	orr	ip, ip, r2
	strb	ip, [r4, #100]
	bl	__wake_up
.L15511:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15525:
	ldr	r2, [r4, #92]
	movw	r1, #:lower16:.LC1147
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1147
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L15511
.L15527:
	ldr	r2, [r4, #96]
	movw	r1, #:lower16:.LC1147
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1147
.L15522:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L15511
.L15523:
	movw	r2, #:lower16:.LC1146
	str	r3, [sp]
	mov	r3, r1
	movt	r2, #:upper16:.LC1146
	add	r1, r0, #32
	sub	r0, ip, #24
	bl	__dynamic_dev_dbg
	ldr	r0, [r6]
	b	.L15512
.L15524:
	ldr	r2, [r4, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC1141
	movt	r1, #:upper16:.LC1141
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L15511
.L15526:
	ldr	r2, [r4, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC1141
	movt	r1, #:upper16:.LC1141
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	b	.L15522
.L15529:
	.align	2
.L15528:
	.word	.LANCHOR8-3888
	.fnend
	.size	acc_function_set_alt, .-acc_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_set_alt, %function
fsg_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #88]
	ldr	r2, [r0, #100]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15530
	ldr	r3, [r4, #100]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L15540
.L15530:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15540:
	ldr	r3, [r4, #100]
	mov	r1, r4
	str	r6, [r3]
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	ldr	r2, [r4, #104]
	orr	r3, r3, #1
	strb	r3, [r4, #94]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	beq	.L15541
.L15532:
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r4, #94]
	b	.L15530
.L15541:
	ldr	r3, [r4, #104]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15532
	ldr	r3, [r4, #104]
	add	r1, r4, #96
	str	r6, [r3]
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	ldr	r2, [r4, #104]
	orr	r3, r3, #2
	strb	r3, [r4, #94]
	ldr	r3, [r2, #28]
	ldrh	r3, [r3, #4]	@ unaligned
	str	r3, [r6, #108]
	bl	_clear_bit
	ldr	r2, [r4, #88]
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r5, [r3, #3964]
	str	r4, [r2, #12]
	ldr	r4, [r4, #88]
	str	r5, [r3, #3968]
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	mov	r6, r0
	cmp	r3, #4
	bgt	.L15534
	ldr	r3, [r4, #56]
	mov	r1, #4
	ldr	r2, [r4, #168]
	str	r1, [r4, #112]
	str	r3, [r4, #116]
	cmp	r2, #0
	beq	.L15534
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L15534:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	movw	r5, #32767
	b	.L15530
	.fnend
	.size	fsg_set_alt, .-fsg_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_set_alt, %function
mtp_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L15560
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	mov	r3, r2
	str	lr, [sp, #12]
	ldr	r0, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	ldrh	r2, [ip, #-14]
	ldr	r6, [r0, #24]
	tst	r2, #4
	ldr	r0, [r6]
	bne	.L15555
.L15543:
	mov	r1, r4
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15556
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15557
	mov	r1, r4
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15558
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15559
	ldr	r3, [r4, #100]
	ldr	r2, .L15560+4
	str	r2, [r3, #28]
	ldr	r3, [r4, #100]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L15549
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
.L15542:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15557:
	ldr	r2, [r4, #92]
	movw	r1, #:lower16:.LC1147
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1147
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L15542
.L15555:
	movw	r2, #:lower16:.LC1148
	str	r3, [sp]
	mov	r3, r1
	movt	r2, #:upper16:.LC1148
	add	r1, r0, #32
	sub	r0, ip, #32
	bl	__dynamic_dev_dbg
	ldr	r0, [r6]
	b	.L15543
.L15556:
	ldr	r2, [r4, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC1141
	movt	r1, #:upper16:.LC1141
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L15542
.L15558:
	ldr	r2, [r4, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC1141
	movt	r1, #:upper16:.LC1141
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
.L15554:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L15542
.L15549:
	mov	r1, #1
	add	r0, r4, #132
	mov	r2, r1
	mov	r3, r5
	str	r1, [r4, #104]
	mov	r1, #3
	bl	__wake_up
	b	.L15542
.L15559:
	movw	r1, #:lower16:.LC1147
	mov	r3, r5
	ldr	r2, [r4, #96]
	movt	r1, #:upper16:.LC1147
	ldr	r0, [r6]
	b	.L15554
.L15561:
	.align	2
.L15560:
	.word	.LANCHOR8-3856
	.word	.LANCHOR7-2140
	.fnend
	.size	mtp_function_set_alt, .-mtp_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_set_alt, %function
ccid_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r1, #32
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r9, [r0, #84]
	ldr	r7, [r0, #100]
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L15563
	mov	r2, #4
	movw	r6, #:lower16:kmalloc_caches
	movt	r6, #:upper16:kmalloc_caches
	str	r2, [r5, #4]
	ldr	r0, [r6, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5]
	beq	.L15565
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L15565
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L15563:
	mvn	r3, #11
	str	r3, [r4, #112]
.L15588:
	movw	r0, #:lower16:.LC1102
	ldr	r1, .L15611
	movt	r0, #:upper16:.LC1102
	bl	printk
	ldr	r5, [r4, #112]
.L15562:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15565:
	cmn	r5, #4096
	str	r5, [r4, #112]
	bhi	.L15588
	movw	r3, #:lower16:ccid_notify_complete
	mov	r1, #32
	movt	r3, #:upper16:ccid_notify_complete
	str	r3, [r5, #28]
	ldr	r3, [r4, #112]
	str	r4, [r3, #32]
	ldr	r7, [r4, #108]
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L15592
	movw	r2, #522
	str	r2, [r5, #4]
	ldr	r0, [r6, #40]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5]
	beq	.L15569
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L15569
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	mvn	r5, #11
	ldr	r3, [r3, #12]
	blx	r3
.L15567:
	movw	r0, #:lower16:.LC1149
	ldr	r1, .L15611
	movt	r0, #:upper16:.LC1149
	bl	printk
.L15570:
	ldr	r6, [r4, #112]
	cmp	r6, #0
	beq	.L15562
	ldr	r4, [r4, #100]
	ldr	r0, [r6]
	bl	kfree
	mov	r1, r6
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	b	.L15562
.L15569:
	cmn	r5, #4096
	bhi	.L15567
	movw	r3, #:lower16:ccid_bulk_complete_out
	movw	r8, #:lower16:ccid_bulk_complete_in
	str	r4, [r5, #32]
	movt	r3, #:upper16:ccid_bulk_complete_out
	movt	r8, #:upper16:ccid_bulk_complete_in
	mov	r7, #4
	str	r3, [r5, #28]
	str	r5, [r4, #184]
.L15575:
	ldr	r10, [r4, #104]
	mov	r1, #32
	ldr	r3, [r10, #8]
	mov	r0, r10
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L15593
	movw	r3, #523
	mov	ip, #16
	mov	r1, #32
	movw	r2, #523
	str	r3, [r5, #4]
	ldr	r3, [r6, #40]
	subs	r0, r3, #0
	streq	ip, [r5]
	beq	.L15573
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L15573
	ldr	r3, [r10, #8]
	mov	r1, r5
	mov	r0, r10
	mvn	r5, #11
	ldr	r3, [r3, #12]
	blx	r3
.L15571:
	movw	r0, #:lower16:.LC1150
	ldr	r1, .L15611
	movt	r0, #:upper16:.LC1150
	bl	printk
.L15574:
	ldr	r6, [r4, #184]
	cmp	r6, #0
	beq	.L15570
	ldr	r7, [r4, #108]
	ldr	r0, [r6]
	bl	kfree
	mov	r1, r6
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L15570
.L15573:
	add	r3, r4, #192
	cmn	r5, #4096
	add	r10, r4, #92
	mov	r0, r10
	str	r3, [sp, #4]
	bhi	.L15571
	str	r8, [r5, #28]
	str	r4, [r5, #32]
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	add	r2, r4, #192
	ldr	r1, [r4, #196]
	add	r0, r5, #36
	bl	__list_add
	mov	r1, fp
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	subs	r7, r7, #1
	bne	.L15575
	mov	r1, r4
	ldr	r2, [r4, #100]
	ldr	r0, [r9]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15606
	ldr	r3, [r4, #100]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15607
	ldr	r3, [r4, #100]
	mov	r1, r4
	str	r4, [r3]
	ldr	r2, [r4, #104]
	ldr	r0, [r9]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15608
	ldr	r3, [r4, #104]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15609
	mov	r1, r4
	ldr	r2, [r4, #108]
	ldr	r0, [r9]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15610
	ldr	r3, [r4, #108]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	moveq	r3, #1
	streq	r3, [r4, #96]
	streq	r3, [r4, #200]
	beq	.L15562
	ldr	r2, [r4, #108]
	movw	r0, #:lower16:.LC1152
	mov	r3, r5
	movt	r0, #:upper16:.LC1152
	ldr	r1, .L15611
	ldr	r2, [r2, #4]
	bl	printk
.L15583:
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
.L15580:
.L15577:
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #100]
	mov	r2, #0
	str	r2, [r3]
	b	.L15585
.L15586:
	bl	list_del
	mov	r1, r8
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L15574
	ldr	r8, [r4, #104]
	ldr	r0, [r6, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L15585:
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #4]
	mov	r8, r0
	ldr	r6, [r4, #192]
	cmp	r3, r6
	mov	r0, r6
	sub	r7, r6, #36
	bne	.L15586
	mov	r1, r8
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	b	.L15574
.L15593:
	mvn	r5, #11
	b	.L15571
.L15592:
	mvn	r5, #11
	b	.L15567
.L15606:
	ldr	r2, [r4, #100]
	movw	r0, #:lower16:.LC1151
	mov	r3, r5
	ldr	r1, .L15611
	movt	r0, #:upper16:.LC1151
	str	r7, [r2, #28]
	ldr	r2, [r4, #100]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L15585
.L15607:
	ldr	r2, [r4, #100]
	movw	r0, #:lower16:.LC1152
	mov	r3, r5
	ldr	r1, .L15611
	movt	r0, #:upper16:.LC1152
	ldr	r2, [r2, #4]
	bl	printk
	b	.L15585
.L15608:
	ldr	r2, [r4, #104]
	movw	r0, #:lower16:.LC1151
	mov	r3, r5
	ldr	r1, .L15611
	movt	r0, #:upper16:.LC1151
	str	r7, [r2, #28]
	ldr	r2, [r4, #104]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L15580
.L15609:
	ldr	r2, [r4, #104]
	movw	r0, #:lower16:.LC1152
	mov	r3, r5
	ldr	r1, .L15611
	movt	r0, #:upper16:.LC1152
	ldr	r2, [r2, #4]
	bl	printk
	b	.L15580
.L15610:
	ldr	r2, [r4, #108]
	movw	r0, #:lower16:.LC1151
	mov	r3, r5
	ldr	r1, .L15611
	movt	r0, #:upper16:.LC1151
	str	r7, [r2, #28]
	ldr	r2, [r4, #108]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L15583
.L15612:
	.align	2
.L15611:
	.word	.LANCHOR5+432
	.fnend
	.size	ccid_function_set_alt, .-ccid_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_set_alt, %function
adb_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L15630
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	mov	r3, r2
	str	lr, [sp, #12]
	ldr	r0, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	ldrh	r2, [ip, #-6]
	ldr	r6, [r0, #24]
	tst	r2, #4
	ldr	r0, [r6]
	bne	.L15625
.L15614:
	mov	r1, r4
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15626
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15627
	mov	r1, r4
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15628
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15629
	mov	r1, #1
	add	r0, r4, #128
	mov	r2, r1
	mov	r3, r5
	str	r1, [r4, #100]
	mov	r1, #3
	bl	__wake_up
.L15613:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15627:
	ldr	r2, [r4, #92]
	movw	r1, #:lower16:.LC1147
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1147
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L15613
.L15629:
	ldr	r2, [r4, #96]
	movw	r1, #:lower16:.LC1147
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1147
.L15624:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L15613
.L15625:
	movw	r2, #:lower16:.LC1153
	str	r3, [sp]
	mov	r3, r1
	movt	r2, #:upper16:.LC1153
	add	r1, r0, #32
	sub	r0, ip, #24
	bl	__dynamic_dev_dbg
	ldr	r0, [r6]
	b	.L15614
.L15626:
	ldr	r2, [r4, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC1141
	movt	r1, #:upper16:.LC1141
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L15613
.L15628:
	ldr	r2, [r4, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC1141
	movt	r1, #:upper16:.LC1141
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	b	.L15624
.L15631:
	.align	2
.L15630:
	.word	.LANCHOR8-3840
	.fnend
	.size	adb_function_set_alt, .-adb_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_set_alt, %function
qdss_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15673
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldr	r1, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	ldrh	r0, [r3, #-14]
	ldr	r1, [r1, #24]
	tst	r0, #4
	ldr	r6, [r1]
	bne	.L15668
.L15633:
	cmp	r2, #0
	bne	.L15647
	ldr	r3, [r6, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L15669
	ldrb	r3, [r4, #89]	@ zero_extendqisi2
	cmp	r3, r5
	beq	.L15670
	ldrb	r3, [r4, #88]	@ zero_extendqisi2
	cmp	r3, r5
	beq	.L15671
.L15639:
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	and	r3, r3, #7
	cmp	r3, #7
	moveq	r3, #1
	streq	r3, [r4, #92]
	beq	.L15642
	ldr	r3, [r4, #92]
	cmp	r3, #0
	bne	.L15642
.L15667:
	mov	r5, #0
.L15632:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15642:
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L15667
	add	r2, r4, #156
	ldr	r1, [r4, #196]
	mov	r0, #4
	bl	queue_work_on
	b	.L15667
.L15670:
	mov	r0, r6
	mov	r1, r4
	ldr	r2, [r4, #108]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L15640
	ldr	r3, [r4, #108]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15634
	ldr	r3, [r4, #108]
	str	r4, [r3]
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r4, #192]
	b	.L15639
.L15671:
	mov	r1, r4
	mov	r0, r6
	ldr	r2, [r4, #104]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L15640
	ldr	r3, [r4, #104]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15634
	ldr	r3, [r4, #104]
	mov	r0, r6
	mov	r1, r4
	str	r4, [r3]
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	ldr	r2, [r4, #100]
	orr	r3, r3, #2
	strb	r3, [r4, #192]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L15640
	ldr	r3, [r4, #100]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15634
	ldr	r3, [r4, #100]
	str	r4, [r3]
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	orr	r3, r3, #4
	strb	r3, [r4, #192]
	b	.L15639
.L15668:
	movw	r1, #:lower16:.LC1154
	sub	r0, r3, #32
	str	r2, [sp, #4]
	movt	r1, #:upper16:.LC1154
	bl	__dynamic_pr_debug
	ldr	r2, [sp, #4]
	b	.L15633
.L15640:
	mvn	r5, #21
	b	.L15632
.L15647:
	mov	r5, #0
.L15634:
	movw	r0, #:lower16:.LC1156
	movt	r0, #:upper16:.LC1156
	bl	printk
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #642
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L15672
.L15644:
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	tst	r3, #2
	beq	.L15645
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #192]	@ zero_extendqisi2
	bfc	r2, #1, #1
	uxtb	r3, r2
	strb	r2, [r4, #192]
.L15645:
	tst	r3, #4
	beq	.L15646
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #192]	@ zero_extendqisi2
	bfc	r2, #2, #1
	uxtb	r3, r2
	strb	r2, [r4, #192]
.L15646:
	tst	r3, #1
	beq	.L15632
	ldr	r0, [r4, #108]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r4, #192]
	b	.L15632
.L15669:
	movw	r0, #:lower16:.LC1155
	mvn	r5, #21
	movt	r0, #:upper16:.LC1155
	bl	printk
	b	.L15634
.L15672:
	movw	r1, #:lower16:.LC831
	add	r0, r0, #624
	movt	r1, #:upper16:.LC831
	bl	__dynamic_pr_debug
	b	.L15644
.L15674:
	.align	2
.L15673:
	.word	.LANCHOR8-3808
	.fnend
	.size	qdss_set_alt, .-qdss_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_set_alt, %function
rmnet_mux_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r1, #32
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #84]
	ldr	r6, [r0, #96]
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	bne	.L15696
.L15676:
	mvn	r3, #11
	mov	r5, r3
	str	r3, [r4, #100]
.L15675:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15696:
	mov	r2, #8
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	str	r2, [r5, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5]
	beq	.L15678
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L15678
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L15676
.L15678:
	cmn	r5, #4096
	str	r5, [r4, #100]
	bhi	.L15675
	movw	r3, #:lower16:rmnet_mux_notify_complete
	mov	r2, #8
	movt	r3, #:upper16:rmnet_mux_notify_complete
	mov	r1, r4
	str	r3, [r5, #28]
	ldr	r3, [r4, #100]
	str	r4, [r3, #32]
	ldr	r3, [r4, #100]
	str	r2, [r3, #4]
	ldr	r3, [r4, #92]
	str	r4, [r3]
	ldr	r2, [r4, #92]
	ldr	r0, [r7]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15697
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15698
	ldr	r3, [r4, #88]
	mov	r1, r4
	str	r4, [r3]
	ldr	r2, [r4, #88]
	ldr	r0, [r7]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15699
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15700
	mov	r1, r4
	ldr	r2, [r4, #96]
	ldr	r0, [r7]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15701
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15702
	mov	r3, #1
	str	r5, [r4, #312]
	str	r3, [r4, #372]
	str	r5, [r4, #400]
	str	r5, [r4, #404]
	str	r5, [r4, #408]
	str	r5, [r4, #412]
	str	r5, [r4, #416]
	str	r5, [r4, #420]
	str	r5, [r4, #424]
	b	.L15675
.L15698:
	ldr	r2, [r4, #92]
	movw	r1, #:lower16:.LC1139
	mov	r3, r5
	ldr	r0, [r7]
	movt	r1, #:upper16:.LC1139
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L15675
.L15700:
	ldr	r2, [r4, #88]
	movw	r1, #:lower16:.LC1139
	mov	r3, r5
	ldr	r0, [r7]
	movt	r1, #:upper16:.LC1139
.L15694:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L15675
.L15702:
	ldr	r2, [r4, #96]
	movw	r1, #:lower16:.LC1139
	mov	r3, r5
	ldr	r0, [r7]
	movt	r1, #:upper16:.LC1139
.L15695:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L15675
.L15697:
	ldr	r2, [r4, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC1141
	movt	r1, #:upper16:.LC1141
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #92]
	ldr	r0, [r7]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L15675
.L15699:
	ldr	r2, [r4, #88]
	mov	r0, #0
	movw	r1, #:lower16:.LC1141
	movt	r1, #:upper16:.LC1141
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #88]
	ldr	r0, [r7]
	b	.L15694
.L15701:
	ldr	r2, [r4, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC1141
	movt	r1, #:upper16:.LC1141
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #96]
	ldr	r0, [r7]
	b	.L15695
	.fnend
	.size	rmnet_mux_set_alt, .-rmnet_mux_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_set_alt, %function
conn_gadget_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC1157
	str	r6, [sp, #8]
	mov	r3, r2
	movt	r0, #:upper16:.LC1157
	str	lr, [sp, #12]
	ldr	ip, [r4, #20]
	mov	r2, r1
	ldr	r1, .L15710
	ldr	r6, [ip, #24]
	bl	printk
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15703
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L15709
.L15703:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15709:
	mov	r1, r4
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15708
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L15706
.L15708:
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L15703
.L15706:
	ldr	r3, [r4, #100]
	mov	r6, #1
	movw	r0, #:lower16:.LC1158
	ldr	r1, .L15710
	movt	r0, #:upper16:.LC1158
	str	r6, [r4, #100]
	str	r5, [r4, #104]
	str	r3, [r4, #212]
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2484]
	str	r5, [r3, #168]
	mov	r0, r3
	str	r5, [r3, #172]
	bl	conn_gadget_request_ep_out
	mov	r3, r5
	mov	r2, r6
	add	r0, r4, #200
	mov	r1, #3
	bl	__wake_up
	mov	r3, r5
	mov	r2, r6
	add	r0, r4, #144
	mov	r1, #3
	bl	__wake_up
	b	.L15703
.L15711:
	.align	2
.L15710:
	.word	.LANCHOR5+456
	.fnend
	.size	conn_gadget_function_set_alt, .-conn_gadget_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_set_alt, %function
f_midi_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r0, #20]
	ldr	r5, [r0, #88]
	ldr	r7, [r2, #24]
	ldr	r3, [r5]
	cmp	r3, #0
	beq	.L15713
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #4]
	blx	r3
.L15713:
	mov	r2, r5
	mov	r1, r4
	ldr	r0, [r4, #84]
	bl	config_ep_by_speed
	subs	r6, r0, #0
	ldrne	r0, [r7]
	bne	.L15741
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r1, [r5, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L15743
	str	r4, [r5]
	ldr	r2, [r4, #20]
	ldr	r5, [r4, #92]
	ldr	r8, [r2, #24]
	ldr	r3, [r5]
	cmp	r3, #0
	beq	.L15717
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #4]
	blx	r3
.L15717:
	mov	r2, r5
	mov	r1, r4
	ldr	r0, [r4, #84]
	bl	config_ep_by_speed
	subs	r6, r0, #0
	bne	.L15744
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r1, [r5, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L15745
	str	r4, [r5]
	ldr	r2, [r4, #92]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L15720
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #92]
.L15720:
	mov	r1, r4
	ldr	r0, [r4, #84]
	bl	config_ep_by_speed
	subs	r6, r0, #0
	bne	.L15746
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L15747
	ldr	r3, [r4, #92]
	str	r4, [r3]
	ldr	r3, [r4, #340]
	cmp	r3, #0
	beq	.L15712
	movw	r7, #:lower16:f_midi_complete
	mov	r5, r6
	movt	r7, #:upper16:f_midi_complete
.L15725:
	ldr	r0, [r4, #92]
	add	r5, r5, #1
	ldr	r1, [r4, #336]
	bl	midi_alloc_ep_req
	cmp	r0, #0
	mov	r2, #32
	mov	r1, r0
	beq	.L15726
	str	r7, [r0, #28]
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	bne	.L15748
	ldr	r3, [r4, #340]
	cmp	r3, r5
	bhi	.L15725
	b	.L15712
.L15743:
	ldr	r0, [r7]
.L15742:
	movw	r1, #:lower16:.LC1160
	mov	r3, r6
	ldr	r2, [r5, #4]
	movt	r1, #:upper16:.LC1160
	add	r0, r0, #32
	bl	dev_err
.L15712:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15748:
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC1161
	ldr	r2, [r4, #92]
	movt	r1, #:upper16:.LC1161
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L15712
.L15745:
	ldr	r0, [r8]
	b	.L15742
.L15744:
	ldr	r0, [r8]
.L15741:
	movw	r1, #:lower16:.LC1159
	mov	r3, r6
	ldr	r2, [r5, #4]
	movt	r1, #:upper16:.LC1159
	add	r0, r0, #32
	bl	dev_err
	b	.L15712
.L15747:
	ldr	r2, [r4, #92]
	movw	r1, #:lower16:.LC1160
	mov	r3, r6
	ldr	r0, [r7]
	movt	r1, #:upper16:.LC1160
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L15712
.L15726:
	mvn	r6, #11
	b	.L15712
.L15746:
	ldr	r2, [r4, #92]
	movw	r1, #:lower16:.LC1159
	mov	r3, r6
	ldr	r0, [r7]
	movt	r1, #:upper16:.LC1159
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L15712
	.fnend
	.size	f_midi_set_alt, .-f_midi_set_alt
	.align	2
	.global	usb_add_function
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_add_function, %function
usb_add_function:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #1386
	movt	r5, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r4, r1
	ldrh	r3, [r5, r3]
	str	r8, [sp, #16]
	mov	r6, r0
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	tst	r3, #4
	bne	.L15779
.L15750:
	ldr	r3, [r4, #40]
	cmp	r3, #0
	beq	.L15758
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L15758
	add	r8, r4, #72
	str	r6, [r4, #20]
	add	r2, r6, #36
	mov	r0, r8
	ldr	r1, [r6, #40]
	bl	__list_add
	ldr	r7, [r4, #32]
	cmp	r7, #0
	beq	.L15752
	mov	r1, r4
	mov	r0, r6
	blx	r7
	subs	r7, r0, #0
	blt	.L15780
.L15752:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L15753
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L15753
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r6, #45]
.L15753:
	tst	r3, #2
	bne	.L15754
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L15754
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r6, #45]
.L15754:
	tst	r3, #1
	bne	.L15755
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L15755
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #45]
.L15755:
	cmp	r7, #0
	bne	.L15751
	b	.L15749
.L15758:
	mvn	r7, #21
.L15751:
	movw	r3, #1410
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L15781
.L15749:
	mov	r0, r7
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15779:
	ldr	r3, [r1]
	movw	r2, #:lower16:.LC924
	ldr	ip, [r6]
	movt	r2, #:upper16:.LC924
	ldr	r1, [r6, #24]
	ldr	r0, .L15782
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r6, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L15750
.L15781:
	ldr	r1, [r6, #24]
	movw	r2, #:lower16:.LC925
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC925
	ldr	r0, .L15782+4
	ldr	r1, [r1]
	stm	sp, {r4, r7}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L15749
.L15780:
	mov	r0, r8
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L15752
.L15783:
	.align	2
.L15782:
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.fnend
	.size	usb_add_function, .-usb_add_function
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_function_bind_config, %function
midi_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #4]
	cmp	r7, #0
	beq	.L15785
	mvn	r3, #0
	str	r3, [r7]
	str	r3, [r7, #4]
.L15785:
	movw	r5, #:lower16:kmalloc_caches
	movt	r5, #:upper16:kmalloc_caches
	ldr	r0, [r5, #36]
	cmp	r0, #0
	beq	.L15793
	mov	r2, #344
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L15806
	ldr	r0, [r5, #24]
	cmp	r0, #0
	beq	.L15807
.L15804:
	mov	r2, #12
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L15808
.L15791:
	mov	r5, #0
	movw	r1, #:lower16:f_midi_in_tasklet
	mov	r2, r4
	movt	r1, #:upper16:f_midi_in_tasklet
	strd	r4, [r3]
	add	r0, r4, #300
	strb	r5, [r3, #8]
	str	r3, [r4, #232]
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	str	r3, [r4, #84]
	bl	tasklet_init
	mov	r0, r5
	mov	r1, #208
	bl	kstrdup
	mov	r3, #1
	mvn	ip, #0
	mov	r1, #1024
	mov	r2, #32
	str	r3, [r4, #320]
	str	r3, [r4, #324]
	str	ip, [r4, #328]
	str	r0, [r4, #332]
	mov	r0, r4
	str	r1, [r4, #336]
	str	r2, [r4, #340]
	bl	f_midi_register_card
	subs	r5, r0, #0
	bge	.L15809
.L15789:
	ldr	r0, [r4, #232]
	bl	kfree
.L15788:
	mov	r0, r4
	bl	kfree
.L15784:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15793:
	ldr	r0, [r5, #24]
	mov	r4, #16
	cmp	r0, #0
	bne	.L15804
.L15807:
	mov	r3, #16
	b	.L15791
.L15808:
	mvn	r5, #11
	b	.L15788
.L15809:
	ldr	lr, .L15810
	movw	r3, #:lower16:.LC1162
	movw	ip, #:lower16:f_midi_bind
	movt	r3, #:upper16:.LC1162
	movw	r1, #:lower16:f_midi_unbind
	movw	r2, #:lower16:f_midi_set_alt
	movt	ip, #:upper16:f_midi_bind
	movt	r1, #:upper16:f_midi_unbind
	movt	r2, #:upper16:f_midi_set_alt
	stm	r4, {r3, lr}
	movw	r3, #:lower16:f_midi_disable
	mov	r0, r6
	movt	r3, #:upper16:f_midi_disable
	str	ip, [r4, #32]
	str	r1, [r4, #36]
	mov	r1, r4
	str	r2, [r4, #40]
	str	r3, [r4, #48]
	bl	usb_add_function
	subs	r5, r0, #0
	bne	.L15789
	cmp	r7, #0
	beq	.L15784
	ldr	r3, [r4, #100]
	ldr	r3, [r3]
	ldr	r3, [r3]
	str	r3, [r7]
	ldr	r3, [r4, #100]
	ldr	r3, [r3, #12]
	str	r3, [r7, #4]
	ldr	r3, [r4, #100]
	ldr	r3, [r3]
	ldr	r3, [r3]
	str	r3, [r7]
	ldr	r3, [r4, #100]
	ldr	r3, [r3, #12]
	str	r3, [r7, #4]
	b	.L15784
.L15806:
	mvn	r5, #11
	b	.L15784
.L15811:
	.align	2
.L15810:
	.word	.LANCHOR7-1992
	.fnend
	.size	midi_function_bind_config, .-midi_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_function_bind_config, %function
qdss_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L15842
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L15836
.L15813:
	movw	r3, #:lower16:.LANCHOR7
	movt	r3, #:upper16:.LANCHOR7
	ldrb	r2, [r3, #-1984]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L15814
	ldr	r1, [r7, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L15817
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r7, #24]
	strb	r2, [r3, #-3440]
	strb	r2, [r3, #-1984]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L15817
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [r3, #-3428]
	strb	r2, [r3, #-1976]
.L15814:
	movw	r8, #:lower16:.LANCHOR0
	ldr	r0, .L15842+4
	movt	r8, #:upper16:.LANCHOR0
	mov	r5, r8
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #284]!
	mov	r9, r0
	cmp	r4, r5
	sub	r4, r4, #4
	beq	.L15818
	movw	r6, #:lower16:.LC1164
	movt	r6, #:upper16:.LC1164
	b	.L15820
.L15837:
	ldr	r4, [r4, #4]
	cmp	r4, r5
	sub	r4, r4, #4
	beq	.L15818
.L15820:
	mov	r0, r6
	ldr	r1, [r4]
	bl	strcmp
	cmp	r0, #0
	bne	.L15837
	movw	r6, #:lower16:.LC1164
	sub	r5, r4, #112
	movt	r6, #:upper16:.LC1164
	str	r5, [r4, #20]
.L15826:
	mov	r1, r9
	ldr	r0, .L15842+4
	mov	r8, #0
	bl	_raw_spin_unlock_irqrestore
	ldr	ip, .L15842+8
	movw	r2, #:lower16:qdss_bind
	movw	r3, #:lower16:qdss_unbind
	ldr	r9, [r7, #24]
	movt	r2, #:upper16:qdss_bind
	movt	r3, #:upper16:qdss_unbind
	movw	lr, #:lower16:qdss_set_alt
	str	r6, [r5]
	add	r6, r5, #148
	movt	lr, #:upper16:qdss_set_alt
	mov	r0, r7
	add	r1, ip, #1360
	str	ip, [r5, #16]
	add	r1, r1, #8
	stmib	r5, {r1, ip}
	movw	ip, #:lower16:qdss_disable
	movw	r1, #:lower16:usb_qdss_connect_work
	movt	ip, #:upper16:qdss_disable
	strd	r2, [r5, #32]
	mov	r2, #65024
	movw	r3, #:lower16:usb_qdss_disconnect_work
	movt	r2, 65535
	str	lr, [r5, #40]
	str	ip, [r5, #48]
	add	ip, r5, #140
	add	lr, r5, #160
	movt	r1, #:upper16:usb_qdss_connect_work
	movt	r3, #:upper16:usb_qdss_disconnect_work
	str	r9, [r5, #84]
	str	ip, [r5, #140]
	str	ip, [r5, #144]
	add	ip, r5, #176
	str	r6, [r5, #148]
	str	r6, [r5, #152]
	str	r2, [r5, #156]
	str	lr, [r5, #160]
	str	lr, [r5, #164]
	str	r1, [r5, #168]
	mov	r1, r5
	str	r2, [r5, #172]
	str	ip, [r5, #176]
	str	ip, [r5, #180]
	str	r3, [r5, #184]
	str	r8, [r5, #188]
	bl	usb_add_function
	subs	r6, r0, #0
	bne	.L15838
.L15812:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L15818:
	ldr	r0, .L15842+12
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L15839
.L15825:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L15827
	mov	r2, #200
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L15840
.L15821:
	mov	r1, r9
	ldr	r0, .L15842+4
	movw	r6, #:lower16:.LC1164
	bl	_raw_spin_unlock_irqrestore
	movt	r6, #:upper16:.LC1164
	mov	r3, #0
	mov	r1, #10
	movw	r0, #:lower16:.LC84
	movt	r1, 2
	movt	r0, #:upper16:.LC84
	stm	sp, {r3, r6}
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r5, #196]
	beq	.L15841
	ldr	r0, .L15842+4
	add	r4, r5, #112
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	ldr	r2, .L15842+16
	add	r0, r5, #116
	ldr	r1, [r8, #288]
	str	r6, [r5, #112]
	bl	__list_add
	b	.L15826
.L15827:
	mov	r5, #16
	b	.L15821
.L15836:
	movw	r1, #:lower16:.LC1163
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1163
	bl	__dynamic_pr_debug
	b	.L15813
.L15839:
	movw	r1, #:lower16:.LC1165
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1165
	bl	__dynamic_pr_debug
	b	.L15825
.L15817:
	mvn	r6, #18
.L15816:
	movw	r0, #:lower16:.LC1168
	ldr	r1, .L15842+20
	movt	r0, #:upper16:.LC1168
	bl	printk
	b	.L15812
.L15841:
	mov	r0, r5
	mvn	r6, #11
	bl	kfree
	b	.L15816
.L15838:
	movw	r0, #:lower16:.LC1167
	movt	r0, #:upper16:.LC1167
	bl	printk
	mov	r0, r5
	str	r8, [r4, #20]
	bl	kfree
	b	.L15816
.L15840:
	movw	r0, #:lower16:.LC1166
	mvn	r6, #11
	movt	r0, #:upper16:.LC1166
	bl	printk
	mov	r1, r9
	ldr	r0, .L15842+4
	bl	_raw_spin_unlock_irqrestore
	b	.L15816
.L15843:
	.align	2
.L15842:
	.word	.LANCHOR8-3792
	.word	.LANCHOR1+3408
	.word	.LANCHOR7-3328
	.word	.LANCHOR8-3760
	.word	.LANCHOR0+284
	.word	.LANCHOR5+488
	.fnend
	.size	qdss_function_bind_config, .-qdss_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_function_bind_config, %function
audio_source_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mvn	ip, #0
	mov	r3, #0
	strd	r6, [sp, #8]
	mov	r2, r3
	mov	r7, r1
	str	r8, [sp, #16]
	mov	r1, r3
	str	lr, [sp, #20]
	ldr	r5, [r0, #4]
	.pad #16
	sub	sp, sp, #16
	add	lr, sp, #8
	mov	r0, ip
	str	ip, [r5]
	str	ip, [r5, #4]
	str	lr, [sp]
	bl	snd_card_create
	subs	r4, r0, #0
	beq	.L15852
.L15844:
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15852:
	ldr	r3, [r7, #24]
	add	r6, sp, #12
	movw	r1, #:lower16:.LC1169
	ldr	lr, [sp, #8]
	mov	r2, r4
	movt	r1, #:upper16:.LC1169
	ldr	ip, [r3]
	mov	r3, #1
	mov	r0, lr
	add	ip, ip, #32
	str	ip, [lr, #496]
	stm	sp, {r4, r6}
	movw	r6, #:lower16:.LANCHOR7
	bl	snd_pcm_new
	subs	r4, r0, #0
	movtne	r6, #:upper16:.LANCHOR7
	bne	.L15848
	ldr	r3, [sp, #12]
	movt	r6, #:upper16:.LANCHOR7
	movw	r1, #:lower16:.LC1170
	sub	r8, r6, #1952
	movt	r1, #:upper16:.LC1170
	mov	r2, #80
	str	r4, [r3, #16]
	add	r0, r3, #88
	str	r8, [r3, #272]
	str	r3, [r6, #-1864]
	bl	strlcpy
	ldr	r0, [sp, #12]
	mov	r1, r4
	sub	r2, r6, #1792
	bl	snd_pcm_set_ops
	mov	ip, #65536
	mov	r3, r4
	ldr	r0, [sp, #12]
	mov	r2, r4
	mov	r1, #2
	str	ip, [sp]
	bl	snd_pcm_lib_preallocate_pages_for_all
	ldr	r0, [sp, #8]
	movw	r1, #:lower16:.LC1171
	mov	r2, #16
	movt	r1, #:upper16:.LC1171
	add	r0, r0, #20
	bl	strlcpy
	ldr	r0, [sp, #8]
	mov	r2, #32
	add	r1, r0, #20
	add	r0, r0, #36
	bl	strlcpy
	ldr	r0, [sp, #8]
	movw	r1, #:lower16:.LC1172
	mov	r2, #80
	movt	r1, #:upper16:.LC1172
	add	r0, r0, #68
	bl	strlcpy
	ldr	r0, [sp, #8]
	bl	snd_card_register
	subs	r4, r0, #0
	bne	.L15848
	mov	r1, r8
	mov	r0, r7
	bl	usb_add_function
	subs	r4, r0, #0
	beq	.L15853
.L15846:
.L15847:
.L15848:
	ldr	r0, [r6, #-1868]
	bl	snd_card_free
	b	.L15844
.L15853:
	ldr	r3, [sp, #12]
	ldr	r2, [r3]
	ldr	r2, [r2]
	str	r2, [r5]
	ldr	r2, [r3, #12]
	ldr	r3, [sp, #8]
	str	r2, [r5, #4]
	str	r3, [r6, #-1868]
	b	.L15844
	.fnend
	.size	audio_source_function_bind_config, .-audio_source_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_function_bind_config, %function
rmnet_smd_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r0, [r3, #36]
	.pad #12
	sub	sp, sp, #12
	cmp	r0, #0
	beq	.L15862
	mov	r2, #456
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L15869
.L15855:
	movw	r2, #:lower16:.LC1035
	mov	r5, #0
	movt	r2, #:upper16:.LC1035
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	mov	r1, #10
	str	r5, [sp]
	movw	r0, #:lower16:.LC84
	str	r2, [sp, #4]
	mov	r3, r5
	movt	r1, 2
	movt	r0, #:upper16:.LC84
	str	r4, [r6, #3392]
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #388]
	beq	.L15864
	add	r1, r4, #396
	mov	r2, #65024
	str	r5, [r4, #164]
	movw	r0, #:lower16:rmnet_smd_connect_work
	movw	r3, #:lower16:rmnet_smd_disconnect_work
	str	r5, [r4, #168]
	add	ip, r4, #412
	movt	r3, #:upper16:rmnet_smd_disconnect_work
	str	r5, [r4, #172]
	movt	r2, 65535
	movt	r0, #:upper16:rmnet_smd_connect_work
	str	r1, [r4, #396]
	str	r1, [r4, #400]
	movw	r1, #:lower16:rmnet_control_rx_tlet
	add	r9, r4, #108
	str	r5, [r4, #308]
	movt	r1, #:upper16:rmnet_control_rx_tlet
	add	r8, r4, #116
	str	r5, [r4, #372]
	str	r2, [r4, #392]
	str	r0, [r4, #404]
	add	r0, r4, #284
	str	r2, [r4, #408]
	mov	r2, r4
	str	ip, [r4, #412]
	str	ip, [r4, #416]
	str	r3, [r4, #420]
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_control_tx_tlet
	mov	r2, r4
	add	r0, r4, #264
	movt	r1, #:upper16:rmnet_control_tx_tlet
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_data_rx_tlet
	mov	r2, r4
	add	r0, r4, #348
	movt	r1, #:upper16:rmnet_data_rx_tlet
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_data_tx_tlet
	mov	r2, r4
	add	r0, r4, #328
	movt	r1, #:upper16:rmnet_data_tx_tlet
	bl	tasklet_init
	movw	r1, #:lower16:.LC1173
	ldr	r2, .L15871
	add	r0, r4, #312
	movt	r1, #:upper16:.LC1173
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC1174
	ldr	r2, .L15871
	add	r0, r4, #376
	movt	r1, #:upper16:.LC1174
	bl	__init_waitqueue_head
	ldr	r3, .L15871+4
	movw	lr, #:lower16:rmnet_smd_ch_probe
	movw	ip, #:lower16:rmnet_smd_bind
	movt	lr, #:upper16:rmnet_smd_ch_probe
	movt	ip, #:upper16:rmnet_smd_bind
	movw	r1, #:lower16:.LC1175
	movw	r2, #:lower16:.LC868
	movt	r1, #:upper16:.LC1175
	movt	r2, #:upper16:.LC868
	str	lr, [r4, #176]
	sub	lr, r3, #8
	mov	r0, r7
	str	r1, [r4]
	movw	r1, #:lower16:rmnet_smd_setup
	add	r7, r4, #124
	str	lr, [r4, #4]
	movw	lr, #:lower16:rmnet_smd_set_alt
	movt	r1, #:upper16:rmnet_smd_setup
	str	ip, [r4, #32]
	movw	ip, #:lower16:rmnet_smd_disable
	movt	lr, #:upper16:rmnet_smd_set_alt
	str	r5, [r4, #204]
	movw	r5, #:lower16:rmnet_smd_unbind
	movt	ip, #:upper16:rmnet_smd_disable
	str	r3, [r4, #16]
	movt	r5, #:upper16:rmnet_smd_unbind
	add	r3, r3, #20
	str	r3, [r4, #8]
	add	r3, r4, #156
	str	r5, [r4, #36]
	add	r5, r4, #132
	str	lr, [r4, #40]
	add	lr, r4, #140
	str	ip, [r4, #48]
	add	ip, r4, #148
	str	r1, [r4, #52]
	mov	r1, r4
	str	r9, [r4, #108]
	str	r9, [r4, #112]
	str	r8, [r4, #116]
	str	r8, [r4, #120]
	str	r7, [r4, #124]
	str	r7, [r4, #128]
	str	r5, [r4, #132]
	str	r5, [r4, #136]
	str	lr, [r4, #140]
	str	lr, [r4, #144]
	str	ip, [r4, #148]
	str	ip, [r4, #152]
	str	r3, [r4, #156]
	str	r3, [r4, #160]
	str	r2, [r4, #196]
	bl	usb_add_function
	subs	r5, r0, #0
	beq	.L15870
.L15858:
	ldr	r0, [r4, #388]
	bl	destroy_workqueue
.L15857:
	mov	r0, r4
	bl	kfree
.L15854:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L15870:
	movw	r0, #:lower16:.LC1176
	mov	r1, r5
	movt	r0, #:upper16:.LC1176
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r6, #3412]
	beq	.L15854
	cmn	r0, #4096
	bhi	.L15854
	ldr	ip, .L15871+8
	movw	r0, #:lower16:.LC250
	mov	r3, r4
	movt	r0, #:upper16:.LC250
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L15861
	cmn	r0, #4096
	bls	.L15854
.L15861:
	ldr	r0, [r6, #3412]
	bl	debugfs_remove
	mov	r3, #0
	str	r3, [r6, #3412]
	b	.L15854
.L15862:
	mov	r4, #16
	b	.L15855
.L15864:
	mvn	r5, #11
	b	.L15857
.L15869:
	mvn	r5, #11
	b	.L15854
.L15872:
	.align	2
.L15871:
	.word	.LANCHOR1+4008
	.word	.LANCHOR7-1728
	.word	.LANCHOR5+516
	.fnend
	.size	rmnet_smd_function_bind_config, .-rmnet_smd_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_function_bind_config, %function
rndis_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:__stack_chk_guard
	strd	r8, [sp, #16]
	movt	r6, #:upper16:__stack_chk_guard
	strd	r10, [sp, #24]
	ldr	r3, [r6]
	str	lr, [sp, #32]
	ldr	r4, [r0, #4]
	.pad #60
	sub	sp, sp, #60
	str	r3, [sp, #52]
	cmp	r4, #0
	beq	.L15911
	mov	r7, r1
	ldrb	r1, [r4, #5]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1178
	ldrb	r3, [r4]	@ zero_extendqisi2
	movw	r5, #:lower16:.LANCHOR1
	movt	r0, #:upper16:.LC1178
	ldr	r2, .L15918
	movt	r5, #:upper16:.LANCHOR1
	str	r1, [sp, #16]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	mov	r1, r2
	str	ip, [sp, #12]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldr	fp, [r5, #3992]
	ldr	r3, [r7, #24]
	cmp	fp, #0
	ldr	r8, [r3]
	bne	.L15890
	mov	r2, #1
	mov	r0, #132
	mov	r1, r2
	bl	alloc_etherdev_mqs
	subs	r9, r0, #0
	mvneq	r8, #11
	bne	.L15912
.L15876:
	ldr	r2, .L15918
	movw	r0, #:lower16:.LC1187
	movt	r0, #:upper16:.LC1187
	mov	r1, r2
	bl	printk
.L15873:
	ldr	r2, [sp, #52]
	mov	r0, r8
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L15913
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15890:
	mvn	r8, #15
	b	.L15876
.L15911:
	ldr	r2, .L15918
	movw	r0, #:lower16:.LC1177
	mvn	r8, #0
	movt	r0, #:upper16:.LC1177
	mov	r1, r2
	bl	printk
	b	.L15873
.L15913:
	bl	__stack_chk_fail
.L15912:
	add	r10, r9, #1152
	str	fp, [r9, #1152]
	movw	r2, #:lower16:eth_work
	movw	ip, #:lower16:process_rx_w
	add	r3, r10, #92
	str	r9, [r9, #1160]
	str	fp, [r9, #1168]
	movt	r2, #:upper16:eth_work
	movt	ip, #:upper16:process_rx_w
	str	fp, [r9, #1212]
	mov	r1, #65024
	add	lr, r10, #108
	str	fp, [r9, #1216]
	add	fp, r10, #20
	movt	r1, 65535
	str	fp, [r9, #1172]
	str	fp, [r9, #1176]
	add	fp, r10, #28
	str	r3, [r9, #1244]
	str	fp, [r9, #1180]
	str	fp, [r9, #1184]
	add	fp, r10, #52
	str	r3, [r9, #1248]
	movw	r3, #:lower16:.LC1179
	str	r2, [r9, #1252]
	movw	r2, #:lower16:.LC1180
	movt	r3, #:upper16:.LC1179
	str	ip, [r9, #1268]
	add	ip, r8, #32
	movt	r2, #:upper16:.LC1180
	str	fp, [r9, #1204]
	str	fp, [r9, #1208]
	str	r1, [r9, #1240]
	str	r1, [r9, #1256]
	mov	r1, #16
	str	lr, [r9, #1260]
	str	lr, [r9, #1264]
	str	ip, [sp, #28]
	bl	snprintf
	ldr	r0, [r5, #4008]
	ldr	r1, [r9, #484]
	bl	get_ether_addr
	cmp	r0, #0
	bne	.L15914
.L15877:
	ldr	r2, [r4]	@ unaligned
	add	r3, r10, #125
	movw	r0, #:lower16:.LC1183
	movt	r0, #:upper16:.LC1183
	movw	fp, #:lower16:.LANCHOR7
	str	r3, [sp, #24]
	movt	fp, #:upper16:.LANCHOR7
	str	r2, [r9, #1277]	@ unaligned
	ldrh	r2, [r4, #4]	@ unaligned
	strh	r2, [r10, #129]	@ unaligned
	bl	printk
	ldr	r1, .L15918+4
	sub	r2, fp, #1680
	add	r3, r8, #32
	sub	r2, r2, #8
	mov	r0, r9
	str	r2, [r9, #736]
	add	r2, r1, #136
	str	r1, [r9, #328]
	str	r2, [r9, #332]
	str	r3, [r9, #688]
	str	r8, [r9, #1164]
	bl	register_netdev
	subs	r8, r0, #0
	bge	.L15878
	ldr	r0, .L15918+8
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L15915
.L15879:
	mov	r0, r9
	bl	free_netdev
	b	.L15876
.L15914:
	movw	r2, #:lower16:.LC1181
	movw	r1, #:lower16:.LC1182
	movt	r2, #:upper16:.LC1181
	movt	r1, #:upper16:.LC1182
	add	r0, r8, #32
	bl	dev_warn
	b	.L15877
.L15915:
	movw	r2, #:lower16:.LC1184
	mov	r3, r8
	ldr	r1, [sp, #28]
	movt	r2, #:upper16:.LC1184
	sub	r0, r0, #24
	bl	__dynamic_dev_dbg
	b	.L15879
.L15878:
	movw	r0, #:lower16:.LC1185
	ldr	r2, [r9, #484]
	ldr	r1, [r9, #1160]
	movt	r0, #:upper16:.LC1185
	bl	printk
	movw	r0, #:lower16:.LC1186
	ldr	r1, [r9, #1160]
	ldr	r2, [sp, #24]
	movt	r0, #:upper16:.LC1186
	bl	printk
	mov	r0, r9
	str	r10, [r5, #3992]
	bl	netif_carrier_off
	cmp	r8, #0
	bne	.L15876
	ldrb	r2, [r4, #269]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L15881
	sub	r1, fp, #1664
	mov	ip, #480
	mov	r2, #3
	mvn	r0, #31
	strh	ip, [r1, #4]	@ movhi
	mov	r1, #1
	strb	r2, [fp, #-1658]
	strb	r0, [fp, #-1651]
	strb	r1, [fp, #-1650]
	strb	r2, [fp, #-1649]
.L15881:
	ldrb	r2, [r5, #3740]	@ zero_extendqisi2
	ldr	r10, [r4, #8]
	cmp	r2, #0
	beq	.L15916
.L15887:
	ldrb	r2, [fp, #-1644]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L15882
	ldr	r1, [r7, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L15884
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r7, #24]
	strb	r2, [fp, #-1648]
	strb	r2, [fp, #-1644]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L15884
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r7, #24]
	strb	r2, [fp, #-1636]
	strb	r2, [fp, #-1604]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L15884
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [fp, #-1657]
	strb	r2, [fp, #-1628]
.L15882:
	movw	r2, #:lower16:kmalloc_caches
	movt	r2, #:upper16:kmalloc_caches
	ldr	r0, [r2, #8]
	cmp	r0, #0
	beq	.L15892
	mov	r2, #180
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r9, r0, #0
	beq	.L15917
.L15885:
	ldr	r8, [r4]	@ unaligned
	mov	r0, r7
	movw	ip, #:lower16:rndis_add_header
	ldr	lr, [fp, #-1600]
	movt	ip, #:upper16:rndis_add_header
	movw	r3, #:lower16:.LC1179
	ldr	r1, [fp, #-1596]
	movt	r3, #:upper16:.LC1179
	movw	r2, #:lower16:rndis_rm_hdr
	movt	r2, #:upper16:rndis_rm_hdr
	add	r4, r4, #13
	str	r8, [r9, #150]	@ unaligned
	ldrh	r7, [r4, #-9]	@ unaligned
	ldr	r8, .L15918+12
	str	ip, [r9, #128]
	movw	ip, #:lower16:rndis_set_alt
	movt	ip, #:upper16:rndis_set_alt
	str	r10, [r9, #156]
	str	r1, [r9, #120]
	movw	r1, #:lower16:rndis_bind
	movt	r1, #:upper16:rndis_bind
	stm	r9, {r3, r8}
	movw	r3, #:lower16:rndis_setup
	str	lr, [r9, #116]
	movw	lr, #:lower16:rndis_unbind
	movt	r3, #:upper16:rndis_setup
	str	r1, [r9, #32]
	movw	r1, #:lower16:rndis_disable
	movt	lr, #:upper16:rndis_unbind
	movt	r1, #:upper16:rndis_disable
	str	lr, [r9, #36]
	str	ip, [r9, #40]
	mov	ip, #0
	str	r1, [r9, #48]
	mov	r1, #44
	str	r3, [r9, #52]
	strh	ip, [r9, #98]	@ movhi
	str	r1, [r9, #100]
	mov	r1, r9
	str	r2, [r9, #132]
	strh	r7, [r9, #154]	@ unaligned
	str	r4, [r9, #160]
	bl	usb_add_function
	subs	r8, r0, #0
	beq	.L15873
	mov	r0, r9
	bl	kfree
.L15886:
	ldrb	r3, [r5, #3740]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L15873
	mov	r4, #0
	movw	r1, #:lower16:.LC596
	mov	r2, r4
	movt	r1, #:upper16:.LC596
	add	r0, sp, #32
	strb	r4, [r5, #3740]
	bl	sprintf
	add	r0, sp, #32
	mov	r1, r4
	bl	remove_proc_entry
	b	.L15873
.L15916:
	bl	rndis_init.part.89
	subs	r8, r0, #0
	bge	.L15887
	b	.L15873
.L15892:
	mov	r9, #16
	b	.L15885
.L15917:
	mvn	r8, #11
	b	.L15886
.L15884:
	mvn	r8, #18
	b	.L15873
.L15919:
	.align	2
.L15918:
	.word	.LANCHOR5+624
	.word	.LANCHOR5+652
	.word	.LANCHOR8-3744
	.word	.LANCHOR7-1592
	.fnend
	.size	rndis_function_bind_config, .-rndis_function_bind_config
	.align	2
	.global	usb_function_deactivate
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_function_deactivate, %function
usb_function_deactivate:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #20]
	ldr	r4, [r3, #24]
	add	r5, r4, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r1, [r4, #52]
	mov	r7, r0
	cmp	r1, #0
	bne	.L15921
	ldr	r0, [r4]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L15923
	blx	r3
	subs	r6, r0, #0
	bne	.L15922
	ldr	r1, [r4, #52]
.L15921:
	add	r1, r1, #1
	mov	r6, #0
	str	r1, [r4, #52]
.L15922:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, r6
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15923:
	mvn	r6, #94
	b	.L15922
	.fnend
	.size	usb_function_deactivate, .-usb_function_deactivate
	.align	2
	.global	usb_function_activate
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_function_activate, %function
usb_function_activate:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r4, [r3, #24]
	add	r5, r4, #60
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #52]
	cmp	r3, #0
	beq	.L15932
	sub	r3, r3, #1
	cmp	r3, #0
	str	r3, [r4, #52]
	bne	.L15933
	ldr	r0, [r4]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L15929
	mov	r1, #1
	blx	r3
	mov	r4, r0
.L15927:
	mov	r0, r5
	bl	_raw_spin_unlock
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15933:
	mov	r4, #0
	b	.L15927
.L15932:
	movw	r0, #:lower16:.LC102
	movw	r1, #315
	movt	r0, #:upper16:.LC102
	mvn	r4, #21
	bl	warn_slowpath_null
	b	.L15927
.L15929:
	mvn	r4, #94
	b	.L15927
	.fnend
	.size	usb_function_activate, .-usb_function_activate
	.align	2
	.global	usb_interface_id
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_interface_id, %function
usb_interface_id:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L15936
	add	ip, r3, #12
	add	r2, r3, #1
	str	r1, [r0, ip, lsl #2]
	strb	r2, [r0, #44]
.L15934:
	mov	r0, r3
	bx	lr
.L15936:
	mvn	r3, #18
	b	.L15934
	.fnend
	.size	usb_interface_id, .-usb_interface_id
	.align	2
	.global	usb_add_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_add_config, %function
usb_add_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r4, #:lower16:.LANCHOR4
	movw	r3, #1170
	movt	r4, #:upper16:.LANCHOR4
	mov	r5, r1
	strd	r6, [sp, #8]
	ldrh	r1, [r4, r3]
	strd	r8, [sp, #16]
	mov	r6, r0
	str	lr, [sp, #24]
	mov	r7, r2
	.pad #20
	sub	sp, sp, #20
	ldrb	r3, [r5, #20]	@ zero_extendqisi2
	tst	r1, #4
	bne	.L16088
.L15938:
	cmp	r3, #0
	cmpne	r7, #0
	mvneq	r7, #21
	bne	.L16089
.L15939:
	movw	r3, #1194
	ldrh	r3, [r4, r3]
	tst	r3, #4
	bne	.L16090
.L15937:
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L16089:
	mov	r2, r6
	ldr	r1, [r2, #36]!
	cmp	r2, r1
	sub	r0, r1, #28
	bne	.L15942
	b	.L15940
.L16091:
	ldr	r1, [r0, #28]
	cmp	r2, r1
	sub	r0, r1, #28
	beq	.L15940
.L15942:
	ldrb	r1, [r1, #-8]	@ zero_extendqisi2
	cmp	r1, r3
	bne	.L16091
	mvn	r7, #15
	b	.L15939
.L15940:
	add	r9, r5, #28
	str	r6, [r5, #24]
	ldr	r1, [r6, #40]
	mov	r0, r9
	mov	r8, #0
	bl	__list_add
	add	r3, r5, #36
	mov	r1, #64
	add	r0, r5, #48
	str	r3, [r5, #36]
	str	r3, [r5, #40]
	strb	r8, [r5, #44]
	bl	__memzero
	mov	r0, r5
	blx	r7
	subs	r7, r0, #0
	blt	.L16092
	movw	r3, #1218
	ldr	r1, [r6]
	ldrh	r3, [r4, r3]
	tst	r3, #4
	bne	.L16093
.L15946:
	ldr	r3, [r5, #48]
	cmp	r3, #0
	beq	.L15950
	movw	r2, #1242
	ldrh	r2, [r4, r2]
	tst	r2, #4
	bne	.L16094
.L15950:
	ldr	r3, [r5, #52]
	cmp	r3, #0
	beq	.L15951
	movw	r2, #1242
	ldrh	r2, [r4, r2]
	tst	r2, #4
	bne	.L16095
.L15951:
	ldr	r3, [r5, #56]
	cmp	r3, #0
	beq	.L15952
	movw	r2, #1242
	ldrh	r2, [r4, r2]
	tst	r2, #4
	bne	.L16096
.L15952:
	ldr	r3, [r5, #60]
	cmp	r3, #0
	beq	.L15953
	movw	r2, #1242
	ldrh	r2, [r4, r2]
	tst	r2, #4
	bne	.L16097
.L15953:
	ldr	r3, [r5, #64]
	cmp	r3, #0
	beq	.L15954
	movw	r2, #1242
	ldrh	r2, [r4, r2]
	tst	r2, #4
	bne	.L16098
.L15954:
	ldr	r3, [r5, #68]
	cmp	r3, #0
	beq	.L15955
	movw	r2, #1242
	ldrh	r2, [r4, r2]
	tst	r2, #4
	bne	.L16099
.L15955:
	ldr	r3, [r5, #72]
	cmp	r3, #0
	beq	.L15956
	movw	r2, #1242
	ldrh	r2, [r4, r2]
	tst	r2, #4
	bne	.L16100
.L15957:
	ldr	r3, [r5, #80]
	cmp	r3, #0
	beq	.L15958
	movw	r2, #1242
	ldrh	r2, [r4, r2]
	tst	r2, #4
	bne	.L16101
.L15959:
	ldr	r3, [r5, #88]
	cmp	r3, #0
	beq	.L15960
	movw	r2, #1242
	ldrh	r2, [r4, r2]
	tst	r2, #4
	bne	.L16102
.L15961:
	ldr	r3, [r5, #96]
	cmp	r3, #0
	beq	.L15962
	movw	r2, #1242
	ldrh	r2, [r4, r2]
	tst	r2, #4
	bne	.L16103
.L15963:
	ldr	r3, [r5, #104]
	cmp	r3, #0
	beq	.L15964
	movw	r2, #1242
	ldrh	r2, [r4, r2]
	tst	r2, #4
	bne	.L16104
.L15964:
	ldr	r3, [r5, #108]
	cmp	r3, #0
	beq	.L15965
	movw	r2, #1242
	ldrh	r2, [r4, r2]
	tst	r2, #4
	bne	.L16105
.L15965:
	ldr	r3, [r1, #8]!
	cmp	r1, r3
	sub	r3, r3, #12
	beq	.L15966
.L15944:
	mov	r0, #0
.L15967:
	ldr	r2, [r3, #12]
	str	r0, [r3]
	cmp	r1, r2
	sub	r3, r2, #12
	bne	.L15967
.L15966:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	cmp	r7, #0
	str	r2, [r3, #3228]
	beq	.L15937
	b	.L15939
.L16088:
	ldr	r1, [r6]
	str	r5, [sp, #4]
	movw	r2, #:lower16:.LC891
	ldr	ip, [r5]
	movt	r2, #:upper16:.LC891
	add	r0, r4, #1152
	add	r1, r1, #32
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldrb	r3, [r5, #20]	@ zero_extendqisi2
	b	.L15938
.L16090:
	ldr	r1, [r6]
	str	r7, [sp, #4]
	movw	r2, #:lower16:.LC894
	ldrb	ip, [r5, #20]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC894
	ldr	r3, [r5]
	ldr	r0, .L16106
	add	r1, r1, #32
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L15937
.L16092:
	mov	r0, r9
	bl	list_del
	str	r8, [r5, #24]
	ldr	r1, [r6]
	ldr	r3, [r1, #8]!
	cmp	r1, r3
	sub	r3, r3, #12
	bne	.L15944
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r8, [r3, #3228]
	b	.L15939
.L16103:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC893
	add	r1, r1, #32
	movt	r2, #:upper16:.LC893
	ldr	r0, .L16106+4
	mov	r3, #12
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
.L15962:
	ldr	r3, [r5, #100]
	cmp	r3, #0
	beq	.L15963
	movw	r2, #1242
	ldrh	r2, [r4, r2]
	tst	r2, #4
	beq	.L15963
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC893
	add	r1, r1, #32
	movt	r2, #:upper16:.LC893
	ldr	r0, .L16106+4
	mov	r3, #13
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L15963
.L16102:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC893
	add	r1, r1, #32
	movt	r2, #:upper16:.LC893
	ldr	r0, .L16106+4
	mov	r3, #10
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
.L15960:
	ldr	r3, [r5, #92]
	cmp	r3, #0
	beq	.L15961
	movw	r2, #1242
	ldrh	r2, [r4, r2]
	tst	r2, #4
	beq	.L15961
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC893
	add	r1, r1, #32
	movt	r2, #:upper16:.LC893
	ldr	r0, .L16106+4
	mov	r3, #11
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L15961
.L16101:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC893
	add	r1, r1, #32
	movt	r2, #:upper16:.LC893
	ldr	r0, .L16106+4
	mov	r3, #8
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
.L15958:
	ldr	r3, [r5, #84]
	cmp	r3, #0
	beq	.L15959
	movw	r2, #1242
	ldrh	r2, [r4, r2]
	tst	r2, #4
	beq	.L15959
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC893
	add	r1, r1, #32
	movt	r2, #:upper16:.LC893
	ldr	r0, .L16106+4
	mov	r3, #9
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L15959
.L16100:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC893
	add	r1, r1, #32
	movt	r2, #:upper16:.LC893
	ldr	r0, .L16106+4
	mov	r3, #6
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
.L15956:
	ldr	r3, [r5, #76]
	cmp	r3, #0
	beq	.L15957
	movw	r2, #1242
	ldrh	r2, [r4, r2]
	tst	r2, #4
	beq	.L15957
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC893
	add	r1, r1, #32
	movt	r2, #:upper16:.LC893
	ldr	r0, .L16106+4
	mov	r3, #7
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L15957
.L16093:
	ldrb	ip, [r5, #45]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC868
	movw	lr, #:lower16:.LC886
	movt	r2, #:upper16:.LC868
	movt	lr, #:upper16:.LC886
	ldrb	r3, [r5, #20]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC887
	add	r8, r1, #32
	movt	r0, #:upper16:.LC887
	tst	ip, #1
	moveq	lr, r2
	tst	ip, #2
	moveq	r0, r2
	tst	ip, #4
	moveq	ip, r2
	beq	.L15949
	ldr	r1, [r1, #20]
	movw	r2, #:lower16:.LC889
	movw	ip, #:lower16:.LC888
	movt	r2, #:upper16:.LC889
	movt	ip, #:upper16:.LC888
	cmp	r1, #2
	movls	ip, r2
.L15949:
	movw	r2, #:lower16:.LC892
	mov	r1, r8
	stm	sp, {r5, lr}
	str	r0, [sp, #8]
	movt	r2, #:upper16:.LC892
	ldr	r0, .L16106+8
	str	ip, [sp, #12]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L15946
.L16105:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC893
	add	r1, r1, #32
	movt	r2, #:upper16:.LC893
	ldr	r0, .L16106+4
	mov	r3, #15
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L15965
.L16104:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC893
	add	r1, r1, #32
	movt	r2, #:upper16:.LC893
	ldr	r0, .L16106+4
	mov	r3, #14
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L15964
.L16099:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC893
	add	r1, r1, #32
	movt	r2, #:upper16:.LC893
	ldr	r0, .L16106+4
	mov	r3, #5
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L15955
.L16094:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC893
	add	r1, r1, #32
	movt	r2, #:upper16:.LC893
	ldr	r0, .L16106+4
	mov	r3, #0
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L15950
.L16096:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC893
	add	r1, r1, #32
	movt	r2, #:upper16:.LC893
	ldr	r0, .L16106+4
	mov	r3, #2
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L15952
.L16095:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC893
	add	r1, r1, #32
	movt	r2, #:upper16:.LC893
	ldr	r0, .L16106+4
	mov	r3, #1
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L15951
.L16098:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC893
	add	r1, r1, #32
	movt	r2, #:upper16:.LC893
	ldr	r0, .L16106+4
	mov	r3, #4
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L15954
.L16097:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC893
	add	r1, r1, #32
	movt	r2, #:upper16:.LC893
	ldr	r0, .L16106+4
	mov	r3, #3
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L15953
.L16107:
	.align	2
.L16106:
	.word	.LANCHOR4+1176
	.word	.LANCHOR4+1224
	.word	.LANCHOR4+1200
	.fnend
	.size	usb_add_config, .-usb_add_config
	.align	2
	.global	usb_remove_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_remove_config, %function
usb_remove_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	movw	r0, #:lower16:.LC883
	strd	r6, [sp, #8]
	mov	r6, r1
	movt	r0, #:upper16:.LC883
	strd	r8, [sp, #16]
	ldr	r1, .L16130
	mov	r3, r6
	str	r10, [sp, #24]
	add	r7, r5, #60
	str	lr, [sp, #28]
	ldr	r2, [r5, #12]
	bl	printk
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r6, #24]
	mov	r9, r0
	cmp	r4, #0
	beq	.L16127
	ldr	r8, [r5, #12]
	cmp	r8, r6
	beq	.L16128
.L16118:
	add	r0, r6, #28
	bl	list_del
.L16116:
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldrd	r8, [sp, #16]
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	unbind_config
.L16128:
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, #18]
	tst	r3, #4
	moveq	r3, r8
	bne	.L16129
.L16111:
	ldr	r4, [r3, #36]!
	cmp	r4, r3
	sub	r4, r4, #72
	beq	.L16113
	mov	r10, #0
.L16112:
	ldr	r3, [r4, #48]
	mov	r0, r4
	cmp	r3, #0
	beq	.L16114
	blx	r3
	str	r10, [r4, #80]
	ldr	r3, [r5, #12]
	ldr	r4, [r4, #72]
	add	r3, r3, #36
	cmp	r3, r4
	sub	r4, r4, #72
	bne	.L16112
.L16113:
	mov	r3, #0
	str	r3, [r5, #12]
	str	r3, [r5, #56]
	ldr	r3, [r8, #24]
	cmp	r3, #0
	beq	.L16116
	b	.L16118
.L16127:
	movw	r0, #:lower16:.LC102
	mov	r1, #896
	movt	r0, #:upper16:.LC102
	bl	warn_slowpath_null
	mov	r0, r7
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L16114:
	str	r3, [r4, #80]
	ldr	r3, [r5, #12]
	ldr	r4, [r4, #72]
	add	r3, r3, #36
	cmp	r4, r3
	sub	r4, r4, #72
	bne	.L16112
	b	.L16113
.L16129:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC5
	movt	r2, #:upper16:.LC5
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r5, #12]
	b	.L16111
.L16131:
	.align	2
.L16130:
	.word	.LANCHOR5-1628
	.fnend
	.size	usb_remove_config, .-usb_remove_config
	.align	2
	.global	usb_string_id
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_string_id, %function
usb_string_id:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	mov	r2, r0
	cmp	r3, #253
	bhi	.L16134
	add	r3, r3, #1
	uxtb	r3, r3
	mov	r0, r3
	strb	r3, [r2, #48]
	bx	lr
.L16134:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	usb_string_id, .-usb_string_id
	.align	2
	.global	usb_string_ids_tab
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_string_ids_tab, %function
usb_string_ids_tab:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #4]
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	cmp	r2, #0
	mov	r2, r3
	beq	.L16136
	cmp	r3, #253
	bgt	.L16137
	add	r1, r1, #8
.L16138:
	ldr	ip, [r1, #4]
	add	r3, r3, #1
	add	r1, r1, #8
	uxtb	r2, r3
	cmp	ip, #0
	strb	r2, [r1, #-16]
	beq	.L16136
	cmp	r3, #254
	bne	.L16138
.L16137:
	mvn	r3, #18
	mov	r0, r3
	bx	lr
.L16136:
	mov	r3, #0
	strb	r2, [r0, #48]
	mov	r0, r3
	bx	lr
	.fnend
	.size	usb_string_ids_tab, .-usb_string_ids_tab
	.align	2
	.global	usb_string_ids_n
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_string_ids_n, %function
usb_string_ids_n:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #254
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	bhi	.L16151
	add	r1, r3, r1
	cmp	r1, #254
	bhi	.L16151
	strb	r1, [r0, #48]
	add	r0, r3, #1
	bx	lr
.L16151:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	usb_string_ids_n, .-usb_string_ids_n
	.align	2
	.global	usb_composite_probe
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_composite_probe, %function
usb_composite_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	beq	.L16157
	ldr	r3, [r0, #12]
	cmp	r1, #0
	cmpne	r3, #0
	beq	.L16157
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	lr, [r0]
	cmp	lr, #0
	beq	.L16165
.L16154:
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LANCHOR0
	movw	r4, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR1
	mov	ip, r1
	movw	r1, #:lower16:composite_bind
	str	lr, [r2, #1088]
	movt	r1, #:upper16:composite_bind
	cmp	r3, #0
	mov	r3, r0
	streq	lr, [r0, #4]
	ldr	lr, [r3]
	add	r0, r2, #1088
	str	r3, [r4, #2476]
	str	ip, [r4, #3232]
	str	lr, [r2, #1116]
	ldr	r3, [r3, #20]
	str	r3, [r2, #1092]
	bl	usb_gadget_probe_driver
	cmp	r0, #0
	movne	r3, #0
	strne	r3, [r4, #2476]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L16165:
	movw	r3, #:lower16:.LC1188
	movt	r3, #:upper16:.LC1188
	mov	lr, r3
	str	r3, [r0]
	b	.L16154
.L16157:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	usb_composite_probe, .-usb_composite_probe
	.section	.devinit.text,"ax",%progbits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_probe, %function
android_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r8, #:lower16:__stack_chk_guard
	ldr	r2, [r0, #292]
	movt	r8, #:upper16:__stack_chk_guard
	.pad #44
	sub	sp, sp, #44
	ldr	r3, [r8]
	mov	r6, r0
	cmp	r2, #0
	str	r3, [sp, #36]
	beq	.L16167
	ldr	r5, .L16231
	add	r4, r0, #8
	ldrh	r3, [r5, #-14]
	tst	r3, #4
	beq	.L16168
	movw	r2, #:lower16:.LC1189
	mov	r1, r4
	movt	r2, #:upper16:.LC1189
	sub	r0, r5, #32
	bl	__dynamic_dev_dbg
.L16168:
	mov	r0, r4
	mov	r2, #208
	mov	r1, #52
	bl	devm_kzalloc
	subs	r7, r0, #0
	bne	.L16169
	movw	r0, #:lower16:.LC1190
	ldr	r1, .L16231+4
	mvn	r5, #11
	movt	r0, #:upper16:.LC1190
	bl	printk
	b	.L16166
.L16169:
	movw	r1, #:lower16:.LC1191
	mov	r3, #1
	ldr	r0, [r6, #292]
	movt	r1, #:upper16:.LC1191
	add	r2, r7, #4
	bl	of_property_read_u32_array
	movw	r1, #:lower16:.LC1192
	mov	r2, #0
	ldr	r0, [r6, #292]
	movt	r1, #:upper16:.LC1192
	mov	r4, r2
	bl	of_find_property
	subs	r0, r0, r4
	movw	r1, #:lower16:.LC1193
	movne	r0, #1
	movt	r1, #:upper16:.LC1193
	mov	r2, r4
	strb	r0, [r7, #9]
	ldr	r0, [r6, #292]
	bl	of_find_property
	subs	r0, r0, r4
	movw	r1, #:lower16:.LC1194
	movne	r0, #1
	mov	r3, r4
	mov	r2, r4
	movt	r1, #:upper16:.LC1194
	strb	r0, [r7, #11]
	ldr	r0, [r6, #292]
	str	r4, [sp]
	bl	of_property_read_string_helper
	cmp	r0, #3
	mov	r9, r0
	ble	.L16202
	movw	r0, #:lower16:.LC1195
	ldr	r1, .L16231+4
	mvn	r5, #21
	movt	r0, #:upper16:.LC1195
	bl	printk
	b	.L16166
.L16202:
	ldr	fp, .L16231+4
	movw	r10, #:lower16:.LC1194
	movt	r10, #:upper16:.LC1194
.L16171:
	cmp	r4, r9
	bge	.L16229
	mov	ip, #0
	add	r2, sp, #40
	str	r4, [sp]
	mov	r1, r10
	mov	r3, #1
	ldr	r0, [r6, #292]
	str	ip, [r2, #-20]!
	bl	of_property_read_string_helper
	ldr	r1, [sp, #20]
	cmp	r1, #0
	bne	.L16172
.L16173:
	add	r4, r4, #1
	b	.L16171
.L16172:
	mov	r0, #10
	add	r3, r7, #12
	mov	r2, r0
	mla	r3, r0, r4, r3
	mov	r0, r3
	str	r3, [sp, #12]
	bl	strlcpy
	ldr	r2, .L16231+8
	ldr	r3, [sp, #12]
	ldrh	r2, [r2]
	tst	r2, #4
	beq	.L16173
	movw	r1, #:lower16:.LC1196
	mov	r2, fp
	movt	r1, #:upper16:.LC1196
	sub	r0, r5, #8
	bl	__dynamic_pr_debug
	b	.L16173
.L16229:
	str	r9, [r7, #44]
	b	.L16175
.L16167:
	ldr	r7, [r0, #88]
.L16175:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3644]
	mov	r9, r4
	cmp	r0, #0
	bne	.L16176
	movw	r1, #:lower16:.LC1197
	ldr	r2, .L16231+12
	movt	r1, #:upper16:.LC1197
	bl	__class_create
	cmn	r0, #4096
	str	r0, [r4, #3644]
	movhi	r5, r0
	bhi	.L16166
.L16176:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #40]
	cmp	r0, #0
	beq	.L16203
	mov	r2, #528
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	bne	.L16177
	ldr	r2, .L16231+4
	movw	r0, #:lower16:.LC1198
	mvn	r5, #11
	movt	r0, #:upper16:.LC1198
	mov	r1, r2
	bl	printk
	b	.L16178
.L16203:
	mov	r4, #16
.L16177:
	ldr	lr, [r6]
	mov	r2, #1
	mov	r0, #65024
	ldr	r3, .L16231+16
	movw	r5, #:lower16:android_work
	movw	r1, #:lower16:usb_gadget_connect_work
	mov	ip, #0
	movt	r0, 65535
	movt	r5, #:upper16:android_work
	movt	r1, #:upper16:usb_gadget_connect_work
	str	lr, [r4]
	add	lr, r4, #508
	add	r10, r4, #520
	str	r3, [r4, #4]
	add	r3, r4, #184
	str	r2, [r4, #20]
	add	r2, r4, #456
	str	r0, [r4, #180]
	str	r3, [r4, #184]
	str	r3, [r4, #188]
	mov	r3, ip
	str	r5, [r4, #192]
	str	r0, [r4, #452]
	add	r0, r4, #468
	str	r2, [r4, #456]
	str	r2, [r4, #460]
	mov	r2, ip
	str	r1, [r4, #464]
	mov	r1, ip
	str	lr, [r4, #508]
	str	lr, [r4, #512]
	str	ip, [r4, #516]
	bl	init_timer_key
	movw	r3, #:lower16:delayed_work_timer_fn
	add	r0, r4, #452
	ldr	r2, .L16231+12
	movt	r3, #:upper16:delayed_work_timer_fn
	movw	r1, #:lower16:.LC1199
	movt	r1, #:upper16:.LC1199
	str	r3, [r4, #484]
	str	r0, [r4, #488]
	add	r0, r4, #24
	bl	__mutex_init
	mov	r0, r10
	ldr	r2, .L16231+20
	str	r7, [r4, #44]
	ldr	r1, [r9, #3312]
	bl	__list_add
	ldr	r3, [r9, #3640]
	cmp	r7, #0
	mov	r2, #0
	ldrbne	ip, [r7, #8]	@ zero_extendqisi2
	moveq	ip, r7
	mov	r1, #512
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r9, #3640]
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	mov	r5, r3
	strb	ip, [r3, #1172]
	bl	platform_get_resource
	cmp	r0, #0
	beq	.L16180
	ldm	r0, {r1, r2}
	add	r6, r6, #8
	mov	r0, r6
	add	r2, r2, #1
	sub	r2, r2, r1
	bl	devm_ioremap
	cmp	r0, #0
	str	r0, [r9, #3540]
	bne	.L16182
	movw	r1, #:lower16:.LC1200
	mov	r0, r6
	movt	r1, #:upper16:.LC1200
	mvn	r5, #11
	bl	dev_err
	b	.L16183
.L16180:
	ldr	r0, .L16231+24
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L16182
	movw	r2, #:lower16:.LC1201
	add	r1, r6, #8
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC1201
	bl	__dynamic_dev_dbg
.L16182:
	add	r6, sp, #25
	movw	r2, #:lower16:.LC1202
	ldrb	r3, [r5, #1172]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC1202
	mov	r1, #11
	mov	r0, r6
	bl	snprintf
	mov	r3, #0
	str	r6, [sp]
	ldr	r0, [r9, #3644]
	mov	r2, r3
	mov	r1, r3
	bl	device_create
	cmn	r0, #4096
	mov	r5, r0
	str	r0, [r4, #12]
	bls	.L16185
	cmp	r0, #0
	beq	.L16187
	b	.L16189
.L16185:
	mov	r1, r4
	ldr	r6, .L16231+28
	bl	dev_set_drvdata
.L16188:
	ldr	r1, [r6, #4]!
	ldr	r0, [r4, #12]
	cmp	r1, #0
	beq	.L16187
	bl	device_create_file
	subs	r5, r0, #0
	beq	.L16188
	ldr	r3, [r4, #12]
	ldr	r0, [r9, #3644]
	ldr	r1, [r3, #288]
	bl	device_destroy
.L16189:
	ldr	r2, .L16231+4
	movw	r0, #:lower16:.LC1203
	movt	r0, #:upper16:.LC1203
	mov	r1, r2
	bl	printk
	b	.L16183
.L16187:
	ldr	r2, [r4, #12]
	cmn	r2, #4096
	bls	.L16192
	movw	r0, #:lower16:.LC1204
	ldr	r1, .L16231+32
	movt	r0, #:upper16:.LC1204
	bl	printk
	ldr	r5, [r4, #12]
	cmp	r5, #0
	beq	.L16193
	b	.L16194
.L16192:
	mov	r0, r2
	ldr	r1, .L16231+36
	bl	device_create_file
	subs	r5, r0, #0
	beq	.L16193
	movw	r0, #:lower16:.LC1205
	ldr	r1, .L16231+32
	movt	r0, #:upper16:.LC1205
	bl	printk
.L16194:
	movw	r0, #:lower16:.LC1206
	ldr	r1, .L16231+4
	movt	r0, #:upper16:.LC1206
	bl	printk
	b	.L16166
.L16193:
	movw	r1, #:lower16:android_bind
	ldr	r0, .L16231+40
	movt	r1, #:upper16:android_bind
	bl	usb_composite_probe
	subs	r5, r0, #0
	beq	.L16195
	ldr	r2, .L16231+4
	movw	r0, #:lower16:.LC1207
	movt	r0, #:upper16:.LC1207
	mov	r1, r2
	bl	printk
	b	.L16196
.L16195:
	cmp	r7, #0
	beq	.L16197
	ldr	r3, [r7, #4]
	cmp	r3, #0
	beq	.L16197
	mvn	r2, #0
	mov	r1, #1
	add	r0, r4, #60
	bl	pm_qos_add_request
.L16197:
	movw	r1, #:lower16:.LC1208
	mov	r2, #5
	movt	r1, #:upper16:.LC1208
	add	r0, r4, #52
	bl	strlcpy
	ldr	r0, .L16231+44
	bl	misc_register
	subs	r5, r0, #0
	beq	.L16198
	movw	r0, #:lower16:.LC1209
	mov	r1, r5
	movt	r0, #:upper16:.LC1209
	bl	printk
	movw	r0, #:lower16:.LC1210
	ldr	r1, .L16231+4
	movt	r0, #:upper16:.LC1210
	bl	printk
	b	.L16196
.L16198:
	ldr	r2, .L16231+12
	movw	r1, #:lower16:.LC1211
	movt	r1, #:upper16:.LC1211
	sub	r0, r2, #1808
	bl	__init_waitqueue_head
	b	.L16166
.L16196:
	ldr	r6, .L16231+28
.L16199:
	ldr	r1, [r6, #4]!
	ldr	r0, [r4, #12]
	cmp	r1, #0
	beq	.L16230
	bl	device_remove_file
	b	.L16199
.L16230:
	ldr	r1, [r0, #288]
	ldr	r0, [r9, #3644]
	bl	device_destroy
.L16183:
	mov	r0, r10
	bl	list_del
	ldr	r3, [r9, #3640]
	mov	r0, r4
	sub	r3, r3, #1
	str	r3, [r9, #3640]
	bl	kfree
.L16178:
	ldr	r3, .L16231+20
	ldr	r2, [r9, #3308]
	cmp	r2, r3
	bne	.L16166
	ldr	r0, [r9, #3644]
	bl	class_destroy
	mov	r3, #0
	str	r3, [r9, #3644]
.L16166:
	ldr	r2, [sp, #36]
	mov	r0, r5
	ldr	r3, [r8]
	cmp	r2, r3
	beq	.L16201
	bl	__stack_chk_fail
.L16201:
	add	sp, sp, #44
	@ sp needed
	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
.L16232:
	.align	2
.L16231:
	.word	.LANCHOR8-3712
	.word	.LANCHOR5+952
	.word	.LANCHOR8-3702
	.word	.LANCHOR1+4012
	.word	.LANCHOR7-1584
	.word	.LANCHOR1+3308
	.word	.LANCHOR8-3664
	.word	.LANCHOR0+1244
	.word	.LANCHOR5+968
	.word	.LANCHOR7-1480
	.word	.LANCHOR0+1324
	.word	.LANCHOR7-1464
	.fnend
	.size	android_probe, .-android_probe
	.text
	.align	2
	.global	usb_composite_unregister
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_composite_unregister, %function
usb_composite_unregister:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2476]
	cmp	r3, r0
	beq	.L16235
	bx	lr
.L16235:
	ldr	r0, .L16236
	b	usb_gadget_unregister_driver
.L16237:
	.align	2
.L16236:
	.word	.LANCHOR0+1088
	.fnend
	.size	usb_composite_unregister, .-usb_composite_unregister
	.align	2
	.global	usb_composite_setup_continue
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_composite_setup_continue, %function
usb_composite_setup_continue:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16263
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	ldr	r7, [r0, #4]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L16259
.L16239:
	add	r5, r4, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #56]
	mov	r6, r0
	cmp	r3, #0
	bne	.L16240
	cmp	r4, #0
	bne	.L16260
.L16242:
	mov	r1, r6
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L16240:
	sub	r3, r3, #1
	cmp	r3, #0
	str	r3, [r4, #56]
	bne	.L16242
	ldr	r8, .L16263+4
	ldrh	r3, [r8, #-14]
	tst	r3, #4
	bne	.L16261
.L16244:
	mov	r3, #0
	mov	r2, #32
	mov	r1, r7
	str	r3, [r7, #4]
	ldr	r3, [r4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bge	.L16242
	ldr	r3, .L16263+8
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L16262
.L16245:
	ldr	ip, [r7, #4]
	mov	r3, #0
	ldr	lr, [r7, #48]
	str	r3, [r7, #44]
	cmp	lr, ip
	beq	.L16242
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, #42]
	tst	r2, #4
	beq	.L16242
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC6
	add	r0, r0, #24
	movt	r2, #:upper16:.LC6
	ldr	r1, [r1, #4]
	ldr	r1, [r1]
	ldr	r1, [r1]
	str	lr, [sp]
	str	ip, [sp, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L16242
.L16260:
	movw	r2, #:lower16:.LC1212
	movw	r0, #:lower16:.LC102
	ldr	r3, .L16263+12
	movt	r2, #:upper16:.LC1212
	movt	r0, #:upper16:.LC102
	movw	r1, #1845
	bl	warn_slowpath_fmt
	b	.L16242
.L16259:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC82
	sub	r0, r3, #24
	movt	r2, #:upper16:.LC82
	ldr	r3, .L16263+12
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L16239
.L16261:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC1213
	sub	r0, r8, #32
	movt	r2, #:upper16:.LC1213
	ldr	r3, .L16263+12
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L16244
.L16262:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC958
	mov	r3, r0
	movt	r2, #:upper16:.LC958
	sub	r0, r8, #8
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L16245
.L16264:
	.align	2
.L16263:
	.word	.LANCHOR8-3648
	.word	.LANCHOR8-3616
	.word	.LANCHOR8-3600
	.word	.LANCHOR5+996
	.fnend
	.size	usb_composite_setup_continue, .-usb_composite_setup_continue
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	handle_exception, %function
handle_exception:
	.fnstart
	@ args = 0, pretend = 0, frame = 128
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	add	r7, r0, #44
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #128
	sub	sp, sp, #128
	mov	r3, sp
	bic	r10, r3, #8128
	bic	r10, r10, #63
.L16272:
	movw	r8, #1284
	b	.L16267
.L16338:
	cmp	r5, #10
	bne	.L16337
.L16267:
	ldr	r4, [r10, #12]
	ldr	r0, [r4, #1036]
	add	r0, r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r2, sp
	add	r1, r4, #1040
	mov	r0, r4
	bl	dequeue_signal
	mov	r5, r0
	ldr	r0, [r4, #1036]
	mov	r1, r9
	add	r0, r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	bne	.L16338
	ldr	r3, [r6, #8]
	cmp	r3, #0
	beq	.L16274
	mov	r8, r5
.L16273:
	ldr	r4, [r6, #68]
	add	r4, r4, r8
	add	r8, r8, #32
	ldr	r3, [r4, #20]
	cmp	r3, #0
	beq	.L16275
	ldr	r3, [r6, #8]
	ldr	r1, [r4, #16]
	ldr	r0, [r3, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L16275:
	ldr	r3, [r4, #28]
	cmp	r3, #0
	beq	.L16276
	ldr	r3, [r6, #8]
	ldr	r1, [r4, #24]
	ldr	r0, [r3, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L16276:
	cmp	r8, #128
	bne	.L16273
	b	.L16279
.L16339:
	bl	sleep_thread
	cmp	r0, #0
	bne	.L16265
.L16279:
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #68]
	mov	r0, r7
	ldr	r1, [r3, #20]
	ldr	r4, [r3, #28]
	ldr	ip, [r3, #52]
	ldr	r9, [r3, #60]
	ldr	r2, [r3, #84]
	ldr	r8, [r3, #92]
	add	r1, r1, r4
	ldr	r4, [r3, #116]
	ldr	lr, [r3, #124]
	add	r3, ip, r9
	add	r1, r1, r3
	add	r3, r2, r8
	add	r3, r3, r1
	add	r4, r4, lr
	add	r4, r4, r3
	bl	_raw_spin_unlock_irq
	cmp	r4, #0
	mov	r0, r6
	bne	.L16339
	ldr	r3, [r6, #8]
	ldrb	r2, [r3, #94]	@ zero_extendqisi2
	tst	r2, #1
	beq	.L16280
	ldr	r0, [r3, #100]
	ldr	r1, [r0, #8]
	ldr	r1, [r1, #36]
	cmp	r1, #0
	beq	.L16280
	blx	r1
	ldr	r3, [r6, #8]
	ldrb	r2, [r3, #94]	@ zero_extendqisi2
.L16280:
	tst	r2, #2
	beq	.L16274
	ldr	r0, [r3, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L16274
	blx	r3
.L16274:
	mov	r0, r7
	mov	r9, #0
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #68]
	str	r9, [r3, #4]
	ldr	r3, [r6, #68]
	str	r9, [r3, #36]
	ldr	r3, [r6, #68]
	str	r9, [r3, #68]
	ldr	r3, [r6, #68]
	str	r9, [r3, #100]
	ldr	r3, [r6, #68]
	ldr	r8, [r6, #112]
	str	r3, [r6, #60]
	cmp	r8, #1
	str	r3, [r6, #64]
	beq	.L16282
	ldr	r3, [r6, #92]
	ldr	r4, [r6, #116]
	cmp	r3, r9
	movne	r0, r9
	movne	r1, r0
	beq	.L16284
.L16283:
	ldr	r3, [r6, #100]
	add	r5, r5, #1
	add	r3, r3, r0
	add	r0, r0, #392
	ldrb	r2, [r3, #24]	@ zero_extendqisi2
	str	r1, [r3, #28]
	str	r1, [r3, #32]
	str	r1, [r3, #36]
	and	r2, r2, #239
	bfi	r2, r1, #6, #1
	strb	r2, [r3, #24]
	ldr	r3, [r6, #92]
	cmp	r3, r5
	bhi	.L16283
.L16284:
	mov	r3, #0
	sub	r8, r8, #2
	mov	r0, r7
	str	r3, [r6, #112]
	bl	_raw_spin_unlock_irq
	cmp	r8, #5
	ldrls	pc, [pc, r8, asl #2]
	b	.L16265
.L16289:
	.word	.L16288
	.word	.L16265
	.word	.L16290
	.word	.L16265
	.word	.L16291
	.word	.L16291
.L16288:
	ldr	r1, [r6, #8]
	cmp	r1, #0
	beq	.L16292
	add	r1, r1, #96
	mov	r0, #0
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L16294
	ldr	r3, [r6, #8]
	mov	r1, #0
	ldr	r0, [r3, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
.L16294:
	ldr	r3, [r6, #56]
	cmp	r3, r4
	bne	.L16265
	ldr	r0, [r6, #4]
	cmp	r0, #0
	bne	.L16336
	ldrd	r0, [r6, #48]
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	ldr	r2, [r6, #48]
	cmp	r0, #0
	cmnne	r0, #108
	mov	r3, r0
	str	r6, [r2]
	beq	.L16265
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC90
	ldr	r2, [r6, #48]
	movt	r1, #:upper16:.LC90
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_warn
.L16265:
	add	sp, sp, #128
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L16337:
	ldr	r3, [r6, #112]
	cmp	r3, #5
	ble	.L16340
.L16268:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #112]
	mov	r4, r0
	cmp	r3, #6
	bgt	.L16270
	ldr	r3, [r6, #56]
	mov	r1, #6
	ldr	r2, [r6, #168]
	str	r1, [r6, #112]
	str	r3, [r6, #116]
	cmp	r2, #0
	beq	.L16270
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L16270:
	mov	r1, r4
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L16272
.L16340:
	ldr	r0, .L16342
	ldrh	r3, [r0]
	tst	r3, #4
	beq	.L16268
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC1214
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC1214
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L16268
.L16282:
	mvn	r3, #7
	mov	r0, r7
	str	r3, [r6, #112]
	bl	_raw_spin_unlock_irq
	mov	r0, r6
	bl	send_status
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #112]
	cmn	r3, #8
	beq	.L16341
.L16286:
	mov	r0, r7
	bl	_raw_spin_unlock_irq
	b	.L16265
.L16291:
	mov	r1, #0
	mov	r0, r6
	bl	do_set_interface
	mov	r0, r7
	bl	_raw_spin_lock_irq
	mov	r3, #7
	mov	r0, r7
	str	r3, [r6, #112]
	bl	_raw_spin_unlock_irq
	b	.L16265
.L16290:
	mov	r0, r6
	ldr	r1, [r6, #12]
	bl	do_set_interface
	ldr	r3, [r6, #12]
	cmp	r3, #0
	beq	.L16265
	ldr	r0, [r6, #4]
.L16336:
	bl	usb_composite_setup_continue
	b	.L16265
.L16341:
	str	r9, [r6, #112]
	b	.L16286
.L16292:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC88
	movw	r3, #3112
	movt	r1, #:upper16:.LC88
	ldr	r2, .L16342+4
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC89
	movw	r1, #550
	movt	r0, #:upper16:.LC89
	bl	warn_slowpath_null
	b	.L16265
.L16343:
	.align	2
.L16342:
	.word	.LANCHOR8-3582
	.word	.LANCHOR5+1028
	.fnend
	.size	handle_exception, .-handle_exception
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_main_thread, %function
fsg_main_thread:
	.fnstart
	@ args = 0, pretend = 0, frame = 96
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #5121
	movw	r4, #257
	strd	r6, [sp, #8]
	movw	r7, #22737
	movt	r4, 5121
	strd	r8, [sp, #16]
	movw	r9, #21333
	movt	r7, 6687
	strd	r10, [sp, #24]
	mov	fp, r0
	mov	r0, #2
	str	lr, [sp, #32]
	.pad #108
	sub	sp, sp, #108
	add	r10, fp, #44
	bl	allow_signal
	mov	r0, #15
	movt	r9, 17218
	bl	allow_signal
	mov	r0, #9
	bl	allow_signal
	mov	r0, #10
	bl	allow_signal
	bl	set_freezable
	mov	r3, sp
	mov	r1, r5
	bic	r3, r3, #8128
	movw	r0, #21250
	mov	r2, #0
	bic	r3, r3, #63
	movt	r5, 41472
	movt	r1, 256
	movt	r0, 5
	str	r2, [r3, #8]
	strd	r4, [sp, #12]
	str	r1, [sp, #20]
	str	r0, [sp, #24]
.L16345:
	ldr	r3, [fp, #112]
	cmp	r3, #7
	beq	.L16769
.L16540:
	cmp	r3, #0
	bgt	.L16346
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L16346
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	tst	r3, #32
	beq	.L16770
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r4, [fp, #60]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L16350
.L16352:
	mov	r0, r10
	bl	_raw_spin_unlock_irq
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	bne	.L16345
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L16352
.L16350:
	mov	r0, r10
	bl	_raw_spin_unlock_irq
	mov	r2, #31
	mov	r0, fp
	str	r2, [r4, #12]
	ldr	r1, [fp, #108]
	udiv	r3, r2, r1
	mul	r3, r1, r3
	subs	r3, r2, r3
	addne	r2, r1, r2
	mov	r1, r4
	subne	r2, r2, r3
	ldr	r3, [r4, #24]
	str	r2, [r3, #4]
	bl	start_out_transfer
	cmp	r0, #0
	bne	.L16749
	b	.L16345
.L16771:
	bl	_raw_spin_unlock_irq
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	bne	.L16345
.L16749:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	mov	r0, r10
	cmp	r3, #1
	bne	.L16771
	bl	_raw_spin_unlock_irq
	.syntax divided
@ 2858 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r6, [fp, #8]
	cmp	r6, #0
	beq	.L16357
	ldr	r3, [r4, #24]
	ldr	r5, [r6, #88]
	ldr	r8, [r3]
	ldr	r2, [r3, #44]
	cmp	r2, #0
	bne	.L16756
	ldr	r1, [r6, #96]
	tst	r1, #1
	bne	.L16360
	ldr	r3, [r3, #48]
	cmp	r3, #31
	bne	.L16361
	ldr	r2, [r8]
	cmp	r2, r9
	bne	.L16361
	ldrb	r3, [r8, #13]	@ zero_extendqisi2
	cmp	r3, #7
	bhi	.L16375
	ldrb	r2, [r8, #12]	@ zero_extendqisi2
	bics	r2, r2, #128
	str	r2, [sp, #28]
	beq	.L16772
.L16375:
	ldr	r0, .L16813
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L16773
.L16377:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	ands	r5, r3, #1
	bne	.L16378
	mov	r0, r10
	bl	_raw_spin_lock_irq
	mov	r0, r10
	str	r5, [r4, #4]
	bl	_raw_spin_unlock_irq
	b	.L16345
.L16346:
	mov	r0, fp
	bl	handle_exception
	ldr	r3, [fp, #112]
	cmp	r3, #7
	bne	.L16540
.L16769:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	mov	r3, #0
	mov	r0, r10
	str	r3, [fp, #168]
	bl	_raw_spin_unlock_irq
	ldr	r3, [fp, #172]
	cmp	r3, #0
	beq	.L16544
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L16544
	mov	r0, fp
	blx	r3
	cmp	r0, #0
	blt	.L16544
.L16545:
	add	r0, fp, #152
	mov	r1, #0
	bl	complete_and_exit
.L16770:
	mov	r0, fp
	bl	sleep_thread
	b	.L16345
.L16544:
	ldr	r5, [fp, #92]
	add	r8, fp, #28
	mov	r0, r8
	ldr	r4, [fp, #100]
	bl	down_write
	cmp	r5, #0
	sub	r5, r5, #1
	beq	.L16543
	movw	r7, #:lower16:.LANCHOR4
	mov	r6, #14848
	movw	r9, #:lower16:.LC799
	add	r4, r4, #48
	movt	r7, #:upper16:.LANCHOR4
	movt	r6, 2
	movt	r9, #:upper16:.LC799
.L16548:
	ldr	r0, [r4, #-48]
	cmp	r0, #0
	beq	.L16546
	ldrh	r3, [r7, #114]
	tst	r3, #4
	bne	.L16774
.L16547:
	bl	fput
	mov	r3, #0
	str	r3, [r4, #-48]
	str	r6, [r4, #-12]
.L16546:
	sub	r5, r5, #1
	add	r4, r4, #392
	cmn	r5, #1
	bne	.L16548
.L16543:
	mov	r0, r8
	bl	up_write
	b	.L16545
.L16378:
	movw	r0, #:lower16:.LANCHOR4
	ldr	ip, [r6, #100]
	movw	r2, #:lower16:.LC769
	movt	r0, #:upper16:.LANCHOR4
	ldr	r5, [r6, #104]
	movw	r3, #:lower16:.LC1215
	ldrh	r1, [r0, #-198]
	movt	r2, #:upper16:.LC769
	movt	r3, #:upper16:.LC1215
	cmp	r5, ip
	moveq	r3, r2
	tst	r1, #4
	bne	.L16775
.L16380:
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
	mov	r0, r6
	bl	halt_bulk_in_endpoint
.L16756:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	mov	r3, #0
	mov	r0, r10
	str	r3, [r4, #4]
	bl	_raw_spin_unlock_irq
	b	.L16345
.L16772:
	ldrb	r2, [r8, #14]	@ zero_extendqisi2
	sub	r1, r2, #1
	cmp	r1, #15
	bhi	.L16375
	add	r1, r8, #15
	str	r2, [r5, #72]
	add	r0, r5, #76
	bl	memcpy
	ldrsb	r3, [r8, #12]
	mov	r0, r10
	ldr	r2, [r5, #92]
	cmp	r3, #0
	movge	r3, #1
	movlt	r3, #2
	str	r3, [r5, #120]
	ldr	r3, [r8, #8]
	cmp	r3, #0
	str	r3, [r5, #124]
	moveq	r3, #3
	streq	r3, [r5, #120]
	ldrb	r3, [r8, #13]	@ zero_extendqisi2
	cmp	r3, r2
	str	r3, [r5, #96]
	ldrcc	r2, [r5, #100]
	movcc	r1, #392
	movcs	r3, #0
	mlacc	r3, r1, r3, r2
	str	r3, [r5, #104]
	ldr	r3, [r8, #4]
	str	r3, [r5, #132]
	bl	_raw_spin_lock_irq
	mov	r3, #0
	mov	r0, r10
	str	r3, [r4, #4]
	bl	_raw_spin_unlock_irq
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [fp, #112]
	cmp	r3, #0
	bgt	.L16385
	mvn	r3, #8
	str	r3, [fp, #112]
.L16385:
	mov	r0, r10
	bl	_raw_spin_unlock_irq
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r4, [fp, #60]
	str	r4, [fp, #64]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L16386
.L16387:
	mov	r0, r10
	bl	_raw_spin_unlock_irq
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	bne	.L16345
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L16387
.L16386:
	mov	r0, r10
	add	r8, fp, #28
	bl	_raw_spin_unlock_irq
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	mov	r0, r8
	and	r3, r3, #251
	bfc	r3, #3, #1
	strb	r3, [fp, #144]
	bl	down_read
	ldrb	r2, [fp, #76]	@ zero_extendqisi2
	cmp	r2, #37
	beq	.L16389
	bls	.L16776
	cmp	r2, #68
	beq	.L16406
	bls	.L16777
	cmp	r2, #168
	beq	.L16414
	bls	.L16778
	cmp	r2, #190
	beq	.L16418
	cmp	r2, #250
	beq	.L16419
	cmp	r2, #170
	beq	.L16779
.L16388:
	ldr	r5, .L16813+4
	mov	r6, #0
	movw	r1, #:lower16:.LC1252
	movt	r1, #:upper16:.LC1252
	str	r6, [fp, #128]
	mov	r0, r5
	bl	sprintf
	str	r6, [sp]
	mov	r2, r6
	mvn	r3, #0
	str	r5, [sp, #4]
	mov	r0, fp
	ldr	r1, [fp, #72]
	bl	check_command
	subs	r5, r0, #0
	bne	.L16421
	ldr	r3, [fp, #104]
.L16759:
	mov	r2, #335872
	mvn	r1, #21
	str	r1, [sp, #28]
	str	r2, [r3, #28]
.L16423:
	mov	r0, r8
	ldr	r5, [sp, #28]
	bl	up_read
.L16550:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r3, r3, #1
	bne	.L16345
	cmn	r5, #22
	beq	.L16505
	cmp	r5, #0
	ldrlt	r6, [fp, #120]
	blt	.L16506
	mov	r3, r5
.L16505:
	ldr	r6, [fp, #120]
	cmp	r6, #2
	bne	.L16506
	ldr	r2, [fp, #128]
	mov	r1, #1
	ldr	r0, [r4, #16]
	cmp	r3, r2
	movcs	r3, r2
	str	r3, [r0, #4]
	str	r1, [r4, #4]
	ldr	r6, [fp, #120]
	ldr	r2, [fp, #136]
	sub	r3, r2, r3
	str	r3, [fp, #136]
.L16506:
	cmp	r6, #1
	beq	.L16508
	bcc	.L16509
	cmp	r6, #2
	bne	.L16507
	ldr	r3, [fp, #124]
	cmp	r3, #0
	beq	.L16507
	ldr	r3, [fp, #8]
	cmp	r3, #0
	beq	.L16780
	ldr	r4, [fp, #60]
	ldr	r2, [fp, #136]
	ldr	r3, [r4, #16]
	cmp	r2, #0
	bne	.L16518
	ldrb	ip, [r3, #26]	@ zero_extendqisi2
	mov	r1, r4
	mov	r0, fp
	bfi	ip, r2, #1, #1
	strb	ip, [r3, #26]
	bl	start_in_transfer
	cmp	r0, #0
	beq	.L16345
	ldr	r3, [r4, #8]
	str	r3, [fp, #60]
.L16507:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [fp, #112]
	mov	r0, r10
	cmp	r3, #0
	mvnle	r3, #7
	strle	r3, [fp, #112]
	bl	_raw_spin_unlock_irq
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #3968]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3, #3968]
	bne	.L16345
	mov	r0, fp
	bl	send_status
	subs	r4, r0, #0
	bne	.L16345
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [fp, #112]
	mov	r0, r10
	cmp	r3, #0
	strle	r4, [fp, #112]
	bl	_raw_spin_unlock_irq
	b	.L16345
.L16774:
	mov	r2, r9
	mov	r1, r4
	ldr	r0, .L16813+8
	bl	__dynamic_dev_dbg
	ldr	r0, [r4, #-48]
	b	.L16547
.L16357:
	ldr	r0, [fp]
	movw	r1, #:lower16:.LC88
	movw	r3, #2859
	ldr	r2, .L16813+12
	movt	r1, #:upper16:.LC88
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC89
	movw	r1, #550
	movt	r0, #:upper16:.LC89
	bl	warn_slowpath_null
	mov	r0, r10
	bl	_raw_spin_lock_irq
	mov	r0, r10
	str	r6, [r4, #4]
	bl	_raw_spin_unlock_irq
	b	.L16345
.L16361:
	ldr	r0, .L16813+16
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L16781
.L16363:
	ldr	r0, .L16813+20
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L16782
.L16364:
	ldr	r0, [r6, #100]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	beq	.L16365
	blx	r2
.L16366:
	cmp	r0, #0
	beq	.L16369
	cmn	r0, #11
	bne	.L16783
	mov	r0, #100
	bl	msleep_interruptible
	cmp	r0, #0
	bne	.L16369
	ldr	r0, [r6, #100]
	ldr	r2, [r0, #8]
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L16371
	blx	r3
	b	.L16366
.L16449:
	tst	r2, #16
	bne	.L16784
	cmp	r3, #0
	beq	.L16423
	ldr	r3, [fp, #172]
	cmp	r3, #0
	beq	.L16458
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L16458
	ldr	r2, [fp, #100]
	mov	r1, r6
	mov	r0, fp
	sub	r2, r6, r2
	asr	r2, r2, #3
	mul	r2, r7, r2
	blx	r3
	subs	r5, r0, #0
	blt	.L16421
	bne	.L16423
.L16458:
	mov	r0, r8
	bl	up_read
	mov	r0, r8
	bl	down_write
	ldr	r3, [r6]
	cmp	r3, #0
	beq	.L16457
	movw	r0, #:lower16:.LANCHOR4
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, #114]
	tst	r3, #4
	bne	.L16785
.L16459:
	ldr	r0, [r6]
	bl	fput
	mov	r3, #0
	str	r3, [r6]
.L16457:
	mov	r0, r8
	bl	up_write
	mov	r0, r8
	bl	down_read
	movw	r1, #:lower16:.LC1238
	mov	r0, fp
	movt	r1, #:upper16:.LC1238
	bl	send_message
	ldr	r3, [fp, #172]
	cmp	r3, #0
	beq	.L16423
	ldr	r3, [r3, #8]
	cmp	r3, #0
	beq	.L16423
	ldr	r2, [fp, #100]
	mov	r1, r6
	mov	r0, fp
	sub	r2, r6, r2
	asr	r2, r2, #3
	mul	r2, r7, r2
	blx	r3
	and	r5, r0, r0, asr #31
.L16421:
	mov	r0, r8
	bl	up_read
	cmn	r5, #4
	bne	.L16550
	b	.L16345
.L16776:
	cmp	r2, #21
	beq	.L16391
	bhi	.L16392
	cmp	r2, #8
	beq	.L16393
	bhi	.L16394
	cmp	r2, #0
	beq	.L16395
	cmp	r2, #3
	bne	.L16388
	ldrb	ip, [fp, #80]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1234
	mov	r2, #0
	movt	r0, #:upper16:.LC1234
	mov	r3, #16
	str	r2, [sp]
	mov	r1, #6
	mov	r2, #2
	str	r0, [sp, #4]
	mov	r0, fp
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L16421
	ldr	r2, [fp, #104]
	ldr	r6, [r4]
	cmp	r2, #0
	beq	.L16786
	ldrb	r1, [r2, #24]	@ zero_extendqisi2
	mov	r0, #0
	ldr	r3, [r2, #28]
	ldr	ip, [r2, #32]
	str	r0, [r2, #28]
	str	r0, [r2, #32]
	ubfx	r5, r1, #6, #1
	bfi	r1, r0, #6, #1
	lsl	r5, r5, #7
	strb	r1, [r2, #24]
	str	ip, [sp, #28]
.L16445:
	mov	r1, #18
	mov	r0, r6
	str	r3, [sp, #48]
	bl	__memzero
	ldr	lr, [sp, #28]
	orr	r5, r5, #112
	ldr	r3, [sp, #48]
	strb	r5, [r6]
	lsr	r2, lr, #16
	lsr	r0, r3, #16
	lsr	r1, r2, #8
	lsr	ip, r3, #8
	strb	r0, [r6, #2]
	strb	r1, [r6, #3]
	mov	r1, #18
	strb	r2, [r6, #4]
	mov	r2, #10
	strb	r3, [r6, #13]
	ubfx	r3, lr, #8, #8
	strb	lr, [r6, #6]
	strb	r3, [r6, #5]
	strb	r2, [r6, #7]
	strb	ip, [r6, #12]
	str	r1, [sp, #28]
	b	.L16423
.L16508:
	ldr	r3, [fp, #136]
	cmp	r3, #0
	beq	.L16507
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	ands	r5, r3, #8
	bne	.L16787
.L16528:
	ldr	r3, [fp, #64]
	ldr	r2, [r3, #4]
	cmp	r2, #0
	bne	.L16535
	ldr	r3, [fp, #140]
	cmp	r3, #0
	beq	.L16507
	ldr	r6, [fp, #60]
	ldr	r2, [r6, #4]
	cmp	r2, #0
	beq	.L16552
.L16532:
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	beq	.L16528
	b	.L16345
.L16535:
	cmp	r2, #1
	bne	.L16526
	.syntax divided
@ 2060 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r2, [r3, #8]
	str	r5, [r3, #4]
	str	r2, [fp, #64]
	ldr	r2, [r3, #24]
	ldr	r3, [r3, #12]
	ldr	r1, [r2, #48]
	cmp	r1, r3
	bcc	.L16527
	ldr	r3, [r2, #44]
	cmp	r3, #0
	beq	.L16528
.L16527:
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r3, [fp, #112]
	mov	r4, r0
	cmp	r3, #1
	bgt	.L16530
	ldr	r3, [fp, #56]
	mov	r1, #1
	ldr	r2, [fp, #168]
	str	r1, [fp, #112]
	str	r3, [fp, #116]
	cmp	r2, #0
	beq	.L16530
.L16768:
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L16530:
	mov	r1, r4
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	b	.L16345
.L16526:
	ldr	r6, [fp, #60]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L16532
	ldr	r3, [fp, #140]
	cmp	r3, #0
	beq	.L16532
.L16552:
	cmp	r3, #16384
	mov	r1, r6
	movcc	r4, r3
	movcs	r4, #16384
	mov	r0, fp
	str	r4, [r6, #12]
	ldr	r3, [fp, #108]
	udiv	r2, r4, r3
	mls	r2, r3, r2, r4
	cmp	r2, #0
	addne	r3, r4, r3
	moveq	r3, r4
	subne	r3, r3, r2
	ldr	r2, [r6, #24]
	str	r3, [r2, #4]
	bl	start_out_transfer
	cmp	r0, #0
	beq	.L16345
	ldr	r3, [fp, #140]
	ldr	r2, [r6, #8]
	sub	r3, r3, r4
	str	r2, [fp, #60]
	str	r3, [fp, #140]
	b	.L16528
.L16509:
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L16507
	ldr	r2, [fp, #8]
	cmp	r2, #0
	movweq	r1, #:lower16:.LC88
	movweq	r3, #2120
	ldreq	r0, [fp]
	beq	.L16757
	movw	r0, #:lower16:.LANCHOR4
	ldr	lr, [r2, #100]
	movw	r1, #:lower16:.LC769
	movt	r0, #:upper16:.LANCHOR4
	ldr	r4, [r2, #104]
	movw	r3, #:lower16:.LC1215
	ldrh	ip, [r0, #-198]
	movt	r1, #:upper16:.LC769
	movt	r3, #:upper16:.LC1215
	cmp	r4, lr
	moveq	r3, r1
	tst	ip, #4
	bne	.L16788
.L16514:
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
	ldr	r0, [fp, #8]
	bl	halt_bulk_in_endpoint
.L16515:
	cmp	r0, #0
	bne	.L16345
	b	.L16507
.L16777:
	cmp	r2, #47
	beq	.L16408
	bhi	.L16409
	cmp	r2, #40
	beq	.L16410
	cmp	r2, #42
	bne	.L16388
	ldrb	r1, [fp, #83]	@ zero_extendqisi2
	ldrb	r3, [fp, #84]	@ zero_extendqisi2
	ldr	r2, [fp, #104]
	orr	r3, r3, r1, lsl #8
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L16481
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L16481:
	mov	r3, #1
	movw	r0, #:lower16:.LC1245
	mov	r2, r3
	movt	r0, #:upper16:.LC1245
	str	r3, [sp]
	mov	r1, #10
	movw	r3, #446
.L16764:
	str	r0, [sp, #4]
	mov	r0, fp
	bl	check_command
	subs	r5, r0, #0
	bne	.L16421
	mov	r0, fp
	bl	do_write
	mov	r5, r0
	b	.L16421
.L16392:
	cmp	r2, #26
	beq	.L16399
	bls	.L16789
	cmp	r2, #30
	beq	.L16403
	cmp	r2, #35
	beq	.L16404
	cmp	r2, #27
	bne	.L16388
	movw	ip, #:lower16:.LC1235
	mov	r0, #0
	movt	ip, #:upper16:.LC1235
	mov	r3, #18
	str	r0, [fp, #128]
	mov	r2, #3
	mov	r1, #6
	stm	sp, {r0, ip}
	mov	r0, fp
	bl	check_command
	subs	r5, r0, #0
	bne	.L16421
	ldr	r6, [fp, #104]
	cmp	r6, #0
	beq	.L16426
	ldrb	r2, [r6, #24]	@ zero_extendqisi2
	tst	r2, #4
	moveq	r3, #335872
	mvneq	r2, #21
	streq	r3, [r6, #28]
	streq	r2, [sp, #28]
	beq	.L16423
	ldrb	r3, [fp, #77]	@ zero_extendqisi2
	tst	r3, #254
	bne	.L16447
	ldrb	r3, [fp, #80]	@ zero_extendqisi2
	tst	r3, #252
	bne	.L16447
	tst	r3, #1
	and	r3, r3, #2
	beq	.L16449
	cmp	r3, #0
	beq	.L16450
	movw	r1, #:lower16:.LC1236
	mov	r0, fp
	movt	r1, #:upper16:.LC1236
	bl	send_message
.L16450:
	ldr	r3, [r6]
	cmp	r3, #0
	bne	.L16423
	mov	r3, #14848
	mvn	r2, #21
	movt	r3, 2
	str	r2, [sp, #28]
	str	r3, [r6, #28]
	b	.L16423
.L16371:
	mov	r1, #1
	ldr	r3, [r2, #24]
	blx	r3
	b	.L16366
.L16778:
	cmp	r2, #85
	beq	.L16416
	cmp	r2, #90
	bne	.L16388
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC1225
	mov	r2, #0
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC1225
	movw	r3, #390
	str	r2, [sp]
	mov	r0, fp
	mov	r2, #2
	str	r1, [sp, #4]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L16421
.L16751:
	mov	r1, r4
	mov	r0, fp
	bl	do_mode_sense
	mov	r5, r0
	b	.L16421
.L16409:
	cmp	r2, #53
	beq	.L16412
	cmp	r2, #67
	bne	.L16388
	ldr	r3, [fp, #104]
	cmp	r3, #0
	beq	.L16388
	ldrb	r3, [r3, #24]	@ zero_extendqisi2
	tst	r3, #8
	beq	.L16388
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC1232
	mov	r2, #1
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC1232
	movw	r3, #962
	str	r2, [sp]
	mov	r0, fp
	mov	r2, #2
	str	r1, [sp, #4]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L16421
	ldrb	r3, [fp, #77]	@ zero_extendqisi2
	ldrb	r5, [fp, #82]	@ zero_extendqisi2
	ldrb	r0, [fp, #85]	@ zero_extendqisi2
	ldr	r6, [r4]
	and	r1, r3, #253
	ldr	r2, [fp, #104]
	and	r3, r3, #2
	cmp	r5, #1
	cmpls	r1, #0
	movne	r5, #1
	moveq	r5, #0
	lsr	lr, r0, #6
	bne	.L16790
	cmp	lr, #2
	beq	.L16791
	mov	r1, #20
	mov	r0, r6
	str	r2, [sp, #28]
	str	r3, [sp, #48]
	bl	__memzero
	ldr	r3, [sp, #48]
	mov	r2, #1
	mov	r0, #18
	mov	r1, #22
	strb	r0, [r6, #1]
	strb	r2, [r6, #2]
	cmp	r3, #0
	strb	r2, [r6, #3]
	strb	r1, [r6, #5]
	strb	r2, [r6, #6]
	ldr	r2, [sp, #28]
	bne	.L16792
	str	r3, [r6, #8]	@ unaligned
	mvn	r0, #85
	mov	r3, #20
	strb	r1, [r6, #13]
	strb	r0, [r6, #14]
	str	r3, [sp, #28]
	ldr	r3, [r2, #16]
	lsr	r2, r3, #16
	ubfx	r1, r3, #8, #8
	strb	r2, [r6, #17]
	strb	r3, [r6, #19]
	lsr	r3, r2, #8
	strb	r1, [r6, #18]
	strb	r3, [r6, #16]
	b	.L16423
.L16394:
	cmp	r2, #10
	beq	.L16397
	cmp	r2, #18
	bne	.L16388
	ldrb	ip, [fp, #80]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1220
	mov	r2, #0
	movt	r0, #:upper16:.LC1220
	mov	r3, #16
	str	r2, [sp]
	mov	r1, #6
	mov	r2, #2
	str	r0, [sp, #4]
	mov	r0, fp
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L16421
	ldr	r2, [fp, #104]
	ldr	r6, [r4]
	cmp	r2, #0
	beq	.L16793
	ldrb	ip, [r2, #24]	@ zero_extendqisi2
	mov	r5, #0
	mov	r0, #2
	ldr	r3, .L16813+24
	movw	r1, #:lower16:.LANCHOR1
	add	lr, fp, #218
	movt	r1, #:upper16:.LANCHOR1
	tst	ip, #8
	str	r1, [sp, #28]
	mov	r1, lr
	moveq	ip, r5
	movne	ip, #5
	str	lr, [sp, #48]
	strb	ip, [r6]
	ldrb	r2, [r2, #24]	@ zero_extendqisi2
	strb	r0, [r6, #2]
	strb	r0, [r6, #3]
	mov	r0, r3
	mov	r3, #31
	lsl	r2, r2, #5
	strb	r3, [r6, #4]
	strb	r5, [r6, #5]
	bic	ip, r2, #127
	strb	r5, [r6, #6]
	mov	r2, #16
	strb	r5, [r6, #7]
	strb	ip, [r6, #1]
	bl	strncpy
	ldr	r1, [sp, #28]
	ldr	r0, [sp, #48]
	strb	r5, [r1, #4028]
	bl	strlen
	cmp	r0, #11
	ldr	r3, .L16813+24
	bhi	.L16425
	ldr	r2, [fp, #96]
	cmp	r2, r5
	beq	.L16425
	mov	r0, r3
	bl	strlen
	ldr	r3, .L16813+24
	movw	r2, #:lower16:.LC1221
	movt	r2, #:upper16:.LC1221
	ldr	ip, [r2]
	ldrh	r2, [r2, #4]
	add	r1, r3, r0
	str	ip, [r3, r0]	@ unaligned
	strh	r2, [r1, #4]	@ unaligned
	ldr	r2, [sp, #28]
	strb	r5, [r2, #4028]
.L16425:
	mov	r1, #1
	mov	ip, #36
	str	r3, [sp]
	add	r5, fp, #180
	movw	r2, #:lower16:.LC875
	movt	r2, #:upper16:.LC875
	str	r1, [sp, #4]
	mov	r0, r5
	mov	r1, #29
	add	r3, fp, #209
	str	ip, [sp, #28]
	bl	snprintf
	ldr	r0, [fp, #180]	@ unaligned
	ldr	r1, [fp, #184]	@ unaligned
	ldr	r2, [fp, #188]	@ unaligned
	ldr	ip, [fp, #192]	@ unaligned
	str	r0, [r6, #8]	@ unaligned
	str	r1, [r6, #12]	@ unaligned
	str	r2, [r6, #16]	@ unaligned
	str	ip, [r6, #20]	@ unaligned
	ldr	r2, [fp, #204]	@ unaligned
	ldr	r0, [fp, #196]	@ unaligned
	ldr	r1, [fp, #200]	@ unaligned
	str	r0, [r6, #24]	@ unaligned
	str	r1, [r6, #28]	@ unaligned
	str	r2, [r6, #32]	@ unaligned
	ldrb	r2, [fp, #208]	@ zero_extendqisi2
	strb	r2, [r6, #36]
	b	.L16423
.L16773:
	ldrb	ip, [r8, #14]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC1219
	sub	r0, r0, #18
	ldr	r1, [r6, #84]
	movt	r2, #:upper16:.LC1219
	str	ip, [sp, #4]
	ldrb	ip, [r8, #12]	@ zero_extendqisi2
	add	r1, r1, #32
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L16377
.L16783:
	ldr	r3, [r6, #84]
	movw	r1, #:lower16:.LC1218
	mov	r2, r0
	movt	r1, #:upper16:.LC1218
	add	r0, r3, #32
	bl	dev_warn
.L16369:
	add	r1, r6, #96
	mov	r0, #0
	bl	_set_bit
	b	.L16756
.L16518:
	ldrb	r2, [r3, #26]	@ zero_extendqisi2
	mov	r1, r4
	mov	r0, fp
	orr	r2, r2, #2
	strb	r2, [r3, #26]
	bl	start_in_transfer
	cmp	r0, #0
	bne	.L16519
	ldrb	r2, [fp, #144]	@ zero_extendqisi2
	ldr	r3, [r4, #8]
	tst	r2, #1
	str	r3, [fp, #60]
	beq	.L16345
.L16551:
	ldr	r0, [fp, #8]
	bl	halt_bulk_in_endpoint
	b	.L16515
.L16780:
	ldr	r0, [fp]
	movw	r1, #:lower16:.LC88
	movw	r3, #2135
.L16757:
	movt	r1, #:upper16:.LC88
	ldr	r2, .L16813+28
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC89
	movw	r1, #550
	movt	r0, #:upper16:.LC89
	bl	warn_slowpath_null
	b	.L16345
.L16397:
	ldrb	r3, [fp, #80]	@ zero_extendqisi2
	ldr	r2, [fp, #104]
	cmp	r3, #0
	moveq	r3, #256
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L16480
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L16480:
	mov	r3, #1
	movw	r0, #:lower16:.LC1244
	mov	r2, r3
	movt	r0, #:upper16:.LC1244
	str	r3, [sp]
	mov	r1, #6
	mov	r3, #30
	b	.L16764
.L16393:
	ldrb	r3, [fp, #80]	@ zero_extendqisi2
	ldr	r2, [fp, #104]
	cmp	r3, #0
	moveq	r3, #256
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L16431
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L16431:
	mov	r2, #1
	movw	r0, #:lower16:.LC1227
	movt	r0, #:upper16:.LC1227
	mov	r3, #30
	str	r2, [sp]
	mov	r1, #6
	mov	r2, #2
.L16761:
	str	r0, [sp, #4]
	mov	r0, fp
	bl	check_command
	subs	r5, r0, #0
	bne	.L16421
	mov	r0, fp
	bl	do_read
	mov	r5, r0
	b	.L16421
.L16410:
	ldrb	r1, [fp, #83]	@ zero_extendqisi2
	ldrb	r3, [fp, #84]	@ zero_extendqisi2
	ldr	r2, [fp, #104]
	orr	r3, r3, r1, lsl #8
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L16432
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L16432:
	mov	r2, #1
	movw	r0, #:lower16:.LC1228
	movt	r0, #:upper16:.LC1228
	movw	r3, #446
	str	r2, [sp]
	mov	r1, #10
	mov	r2, #2
	b	.L16761
.L16416:
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC1223
	mov	r2, #0
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC1223
	movw	r3, #386
	str	r2, [sp]
	mov	r0, fp
	mov	r2, #1
	str	r1, [sp, #4]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L16421
.L16767:
	ldr	r3, [fp, #104]
	cmp	r3, #0
	bne	.L16759
.L16426:
	mvn	r3, #21
	str	r3, [sp, #28]
	b	.L16423
.L16814:
	.align	2
.L16813:
	.word	.LANCHOR8-3510
	.word	.LANCHOR1+4032
	.word	.LANCHOR4+96
	.word	.LANCHOR5+1048
	.word	.LANCHOR8-3558
	.word	.LANCHOR8-3534
	.word	.LANCHOR1+4012
	.word	.LANCHOR5+1120
	.word	.LANCHOR8-3438
	.word	.LANCHOR5+1100
	.word	.LANCHOR8-3390
	.word	.LANCHOR5+1068
	.word	.LANCHOR8-3414
	.word	.LANCHOR8-3462
	.word	.LANCHOR8-3486
.L16395:
	movw	r0, #:lower16:.LC1240
	mov	r1, #1
	str	r2, [fp, #128]
	movt	r0, #:upper16:.LC1240
	mov	r3, r2
	str	r1, [sp]
	mov	r2, #3
	mov	r1, #6
	str	r0, [sp, #4]
	mov	r0, fp
	bl	check_command
	mov	r5, r0
	b	.L16421
.L16412:
	movw	ip, #:lower16:.LC1239
	mov	r3, #0
	movt	ip, #:upper16:.LC1239
	mov	r6, #1
	str	r3, [fp, #128]
	mov	r2, #3
	mov	r1, #10
	mov	r0, fp
	stm	sp, {r6, ip}
	mov	r3, #444
	bl	check_command
	subs	r5, r0, #0
	bne	.L16421
	ldr	r5, [fp, #104]
	ldr	r0, [r5]
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	cmp	r0, #0
	ubfx	r3, r3, #1, #1
	moveq	r3, r6
	cmp	r3, #0
	bne	.L16423
	mov	r1, r6
	bl	vfs_fsync
	cmp	r0, #0
	beq	.L16423
	movw	r3, #3074
	mov	r2, #0
	movt	r3, 3
	str	r2, [sp, #28]
	str	r3, [r5, #28]
	b	.L16423
.L16404:
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC1233
	mov	r2, #1
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC1233
	mov	r3, #384
	str	r2, [sp]
	mov	r0, fp
	mov	r2, #2
	str	r1, [sp, #4]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L16421
	ldr	r1, [fp, #104]
	mov	r2, #134217728
	mov	r0, #12
	ldr	r3, [r4]
	mov	ip, #2
	str	r0, [sp, #28]
	str	r2, [r3]	@ unaligned
	ldr	r2, [r1, #16]
	lsr	r0, r2, #16
	strb	r2, [r3, #7]
	ubfx	r2, r2, #8, #8
	strb	r0, [r3, #5]
	strb	r2, [r3, #6]
	lsr	r2, r0, #8
	strb	r2, [r3, #4]
	ldr	r2, [r1, #44]
	strb	ip, [r3, #8]
	lsr	r1, r2, #16
	ubfx	r0, r2, #8, #8
	strb	r1, [r3, #9]
	strb	r0, [r3, #10]
	strb	r2, [r3, #11]
	b	.L16423
.L16403:
	movw	ip, #:lower16:.LC1226
	mov	r0, #0
	movt	ip, #:upper16:.LC1226
	mov	r3, #16
	str	r0, [fp, #128]
	mov	r2, #3
	mov	r1, #6
	stm	sp, {r0, ip}
	mov	r0, fp
	bl	check_command
	subs	r5, r0, #0
	bne	.L16421
	ldr	r5, [fp, #104]
	cmp	r5, #0
	beq	.L16426
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	tst	r3, #4
	moveq	r3, #335872
	mvneq	r2, #21
	streq	r2, [sp, #28]
	streq	r3, [r5, #28]
	beq	.L16423
	ldrb	r6, [fp, #80]	@ zero_extendqisi2
	bics	r2, r6, #1
	str	r2, [sp, #28]
	bne	.L16794
	and	r1, r3, #144
	mvn	r2, r6
	cmp	r1, #16
	movne	r2, #0
	andeq	r2, r2, #1
	cmp	r2, #0
	bne	.L16795
.L16429:
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	bfi	r3, r6, #4, #1
	strb	r3, [r5, #24]
	b	.L16423
.L16399:
	ldrb	ip, [fp, #80]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1224
	mov	r2, #0
	movt	r0, #:upper16:.LC1224
	mov	r3, #22
	str	r2, [sp]
	mov	r1, #6
	mov	r2, #2
	str	r0, [sp, #4]
	mov	r0, fp
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L16421
	b	.L16751
.L16391:
	ldrb	ip, [fp, #80]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1222
	mov	r2, #0
	movt	r0, #:upper16:.LC1222
	mov	r3, #18
	str	r2, [sp]
	mov	r1, #6
	mov	r2, #1
	str	r0, [sp, #4]
	mov	r0, fp
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L16421
	b	.L16767
.L16408:
	movw	ip, #:lower16:.LC1241
	mov	r3, #0
	movt	ip, #:upper16:.LC1241
	mov	r1, #1
	str	r3, [fp, #128]
	mov	r2, #3
	mov	r0, fp
	stm	sp, {r1, ip}
	movw	r3, #446
	mov	r1, #10
	bl	check_command
	subs	r5, r0, #0
	bne	.L16421
	ldr	r6, [fp, #104]
	mov	r1, #0
	ldr	ip, [fp, #78]	@ unaligned
	ldrd	r2, [r6, #16]
	rev	ip, ip
	cmp	ip, r2
	sbcs	r3, r1, r3
	movge	r3, #8448
	mvnge	r5, #21
	movtge	r3, 5
	strge	r3, [r6, #28]
	bge	.L16421
	ldrb	r3, [fp, #77]	@ zero_extendqisi2
	bics	r0, r3, #16
	movne	r3, #9216
	mvnne	r5, #21
	movtne	r3, 5
	strne	r3, [r6, #28]
	bne	.L16421
	ldrb	r1, [fp, #83]	@ zero_extendqisi2
	ldrb	r3, [fp, #84]	@ zero_extendqisi2
	orrs	r1, r3, r1, lsl #8
	beq	.L16501
	ldr	r2, [r6, #40]
	str	r0, [sp, #36]
	ldr	r0, [r6]
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	sub	lr, r2, #32
	lsl	r1, r1, r2
	cmp	r0, #0
	ubfx	r3, r3, #1, #1
	moveq	r3, #1
	str	r1, [sp, #52]
	ldr	r1, [sp, #36]
	cmp	r3, #0
	ldr	r3, [fp, #60]
	orr	r1, r1, ip, lsl lr
	str	r1, [sp, #36]
	rsb	r1, r2, #32
	ldr	lr, [sp, #36]
	str	r3, [sp, #60]
	lsl	r3, ip, r2
	str	r3, [sp, #32]
	orr	r1, lr, ip, lsr r1
	str	r1, [sp, #36]
	beq	.L16796
.L16463:
	mov	r3, #57344
	mov	r2, sp
	movt	r3, 65535
	mov	r5, r3
	and	r3, r2, r3
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r1, r3, #1
	bne	.L16755
	ldr	r3, [r6]
	mvn	r2, #0
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #32]
	ldr	r0, [r3, #32]
	bl	invalidate_mapping_pages
	mov	r3, sp
	mov	r2, r5
	and	r3, r3, r5
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r5, [r3]
	ands	r5, r5, #1
	bne	.L16755
	mov	r3, sp
	str	r4, [sp, #28]
	str	r8, [sp, #48]
	and	r2, r2, r3
	str	r5, [sp, #56]
	ldr	r5, [sp, #52]
	str	r9, [sp, #52]
	ldrd	r8, [sp, #64]
	str	r2, [sp, #84]
.L16466:
	cmp	r5, #0
	beq	.L16797
	ldr	r1, [r6, #8]
	cmp	r5, #16384
	mov	r3, #0
	ldr	ip, [sp, #32]
	movcc	r2, r5
	movcs	r2, #16384
	ldr	r0, [r6, #12]
	subs	r8, r1, ip
	ldr	r1, [sp, #36]
	sbc	r9, r0, r1
	cmp	r2, r8
	sbcs	r1, r3, r9
	movlt	r8, r2
	movlt	r9, r3
	cmp	r8, #0
	str	r8, [sp, #80]
	beq	.L16798
	ldrd	r0, [sp, #32]
	add	r3, sp, #104
	mov	r2, r8
	strd	r0, [r3, #-8]!
	ldr	r1, [sp, #60]
	ldr	r0, [r6]
	ldr	r1, [r1]
	bl	vfs_read
	ldr	r3, [sp, #84]
	mov	r4, r0
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L16742
	cmp	r0, #0
	blt	.L16799
	ldr	r3, [sp, #80]
	cmp	r3, r0
	bls	.L16473
	ldr	r0, .L16813+32
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L16800
.L16474:
	ldr	r3, [r6, #44]
	rsb	r3, r3, #0
	and	r4, r4, r3
.L16473:
	cmp	r4, #0
	beq	.L16801
	ldrd	r2, [sp, #32]
	sub	r5, r5, r4
	adds	r2, r2, r4
	adc	r3, r3, r4, asr #31
	strd	r2, [sp, #32]
	b	.L16466
.L16406:
	ldr	r3, [fp, #104]
	cmp	r3, #0
	beq	.L16388
	ldrb	r3, [r3, #24]	@ zero_extendqisi2
	tst	r3, #8
	beq	.L16388
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC1231
	mov	r2, #1
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC1231
	movw	r3, #446
	str	r2, [sp]
	mov	r0, fp
	mov	r2, #2
	str	r1, [sp, #4]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L16421
	ldrb	r3, [fp, #77]	@ zero_extendqisi2
	ldr	r6, [fp, #78]	@ unaligned
	ldr	r5, [r4]
	ldr	ip, [fp, #104]
	bics	r2, r3, #2
	and	lr, r3, #2
	rev	r6, r6
	str	r2, [sp, #28]
	bne	.L16802
	ldrd	r2, [ip, #16]
	mov	r1, #0
	cmp	r6, r2
	sbcs	r3, r1, r3
	bge	.L16803
	mov	r1, #8
	mov	r0, r5
	str	lr, [sp, #48]
	bl	__memzero
	ldr	lr, [sp, #48]
	mov	r3, #1
	strb	r3, [r5]
	cmp	lr, #0
	bne	.L16804
	lsr	r3, r6, #16
	mov	r2, #8
	ubfx	r1, r6, #8, #8
	str	r2, [sp, #28]
	lsr	r2, r3, r2
	strb	r2, [r5, #4]
	strb	r3, [r5, #5]
	strb	r1, [r5, #6]
	strb	r6, [r5, #7]
	b	.L16423
.L16779:
	ldr	r3, [fp, #82]	@ unaligned
	ldr	r2, [fp, #104]
	rev	r3, r3
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L16482
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L16482:
	mov	r3, #1
	movw	r0, #:lower16:.LC1246
	mov	r2, r3
	movt	r0, #:upper16:.LC1246
	str	r3, [sp]
	mov	r1, #12
	movw	r3, #1022
	b	.L16764
.L16419:
	ldrb	r5, [fp, #80]	@ zero_extendqisi2
	add	r3, fp, #235
	movw	r0, #:lower16:.LC1251
	ldr	r1, .L16813+36
	movt	r0, #:upper16:.LC1251
	str	r3, [sp, #28]
	str	r5, [fp, #128]
	mov	r2, r5
	ldr	r6, [r4]
	bl	printk
	ldr	r1, [fp, #128]
	cmp	r1, #0
	bne	.L16805
.L16502:
	cmp	r5, #101
	mov	r0, r6
	ldr	r1, [sp, #28]
	movhi	r2, #101
	movls	r2, r5
	movhi	r5, r2
	bl	memcpy
	str	r5, [sp, #28]
	b	.L16423
.L16418:
	ldrb	ip, [fp, #83]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC1250
	mov	r1, #1
	ldrb	r0, [fp, #82]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC1250
	mov	r3, #956
	ldrb	lr, [fp, #84]	@ zero_extendqisi2
	stm	sp, {r1, r2}
	mov	r2, #2
	mov	r1, #12
	lsl	ip, ip, #8
	orr	ip, ip, r0, lsl #16
	mov	r0, fp
	orr	ip, ip, lr
	lsl	ip, ip, #9
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L16421
	ldrb	r5, [fp, #83]	@ zero_extendqisi2
	ldrb	r1, [fp, #82]	@ zero_extendqisi2
	ldrb	r3, [fp, #84]	@ zero_extendqisi2
	ldr	r2, [fp, #78]	@ unaligned
	lsl	r5, r5, #8
	orr	r5, r5, r1, lsl #16
	rev	ip, r2
	orrs	r5, r5, r3
	str	ip, [sp, #84]
	beq	.L16421
	ldr	r3, [fp, #104]
	mov	r1, #0
	str	r3, [sp, #80]
	ldrd	r2, [r3, #16]
	cmp	ip, r2
	sbcs	r3, r1, r3
	bge	.L16806
	ldrb	r3, [fp, #85]	@ zero_extendqisi2
	and	r3, r3, #248
	cmp	r3, #248
	str	r3, [sp, #88]
	beq	.L16807
	ldr	r2, [sp, #84]
	ldr	r3, [fp, #128]
	lsr	r1, r2, #23
	lsl	r2, r2, #9
	cmp	r3, #0
	mov	r0, r3
	str	r2, [sp, #40]
	str	r1, [sp, #44]
	beq	.L16501
.L16487:
	mov	r3, sp
	str	r4, [sp, #28]
	str	r8, [sp, #48]
	bic	r3, r3, #8128
	str	r9, [sp, #56]
	ldrd	r8, [sp, #40]
	bic	r3, r3, #63
	str	r7, [sp, #60]
	ldr	r7, [sp, #80]
	str	r10, [sp, #52]
	mov	r10, r0
	str	r3, [sp, #92]
.L16486:
	ldr	r1, [r7, #8]
	cmp	r10, #16384
	mov	r3, #0
	ldr	r0, [r7, #12]
	movcc	r2, r10
	movcs	r2, #16384
	subs	r1, r1, r8
	str	r1, [sp, #72]
	sbc	r1, r0, r9
	str	r1, [sp, #76]
	ldrd	r0, [sp, #72]
	cmp	r2, r0
	sbcs	r1, r3, r1
	strdlt	r2, [sp, #72]
.L16488:
	ldrd	r0, [sp, #72]
	ubfx	r3, r8, #0, #12
	cmp	r3, #0
	mov	r4, r0
	beq	.L16489
	rsb	r4, r3, #4096
	cmp	r4, r0
	movcs	r4, r0
.L16489:
	ldr	r6, [fp, #60]
	b	.L16490
.L16491:
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	bne	.L16743
.L16490:
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L16491
	cmp	r4, #0
	beq	.L16808
	ldr	r3, [sp, #88]
	strd	r8, [sp, #96]
	mov	r2, r4
	ldr	r1, [r6]
	ldr	r0, [r7]
	cmp	r3, #248
	add	r3, sp, #96
	addeq	r1, r1, #16
	bl	vfs_read
	ldr	r3, [sp, #92]
	mov	r5, r0
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L16561
	cmp	r0, #0
	blt	.L16809
	cmp	r4, r0
	bls	.L16498
	ldr	r0, .L16813+40
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L16810
.L16499:
	ldr	r3, [fp, #136]
	bic	r5, r5, #508
	mov	r2, #1
	bic	r5, r5, #3
	adds	r8, r8, r5
	sub	r10, r10, r5
	adc	r9, r9, r5, asr #31
	cmp	r4, r5
	sub	r3, r3, r5
	str	r3, [fp, #136]
	ldr	r3, [r6, #16]
	str	r5, [r3, #4]
	str	r2, [r6, #4]
	bhi	.L16811
.L16500:
	cmp	r10, #0
	beq	.L16744
	mov	r1, r6
	mov	r0, fp
	bl	start_in_transfer
	cmp	r0, #0
	beq	.L16745
	ldr	r3, [r6, #8]
	str	r3, [fp, #60]
	b	.L16486
.L16389:
	movw	ip, #:lower16:.LC1230
	mov	r1, #1
	movt	ip, #:upper16:.LC1230
	mov	r6, #8
	mov	r3, #316
	mov	r2, #2
	str	r6, [fp, #128]
	mov	r0, fp
	stm	sp, {r1, ip}
	mov	r1, #10
	bl	check_command
	subs	r5, r0, #0
	bne	.L16421
	ldrb	r2, [fp, #84]	@ zero_extendqisi2
	ldr	r0, [fp, #78]	@ unaligned
	ldr	r3, [r4]
	ldr	r1, [fp, #104]
	cmp	r2, #1
	rev	r0, r0
	bhi	.L16434
	eor	r2, r2, #1
	cmp	r0, #0
	moveq	r2, #0
	andne	r2, r2, #1
	cmp	r2, #0
	bne	.L16434
	ldr	r2, [r1, #16]
	str	r6, [sp, #28]
	sub	r2, r2, #1
	lsr	r0, r2, #16
	ubfx	ip, r2, #8, #8
	strb	r2, [r3, #3]
	lsr	r2, r0, #8
	strb	r2, [r3]
	strb	r0, [r3, #1]
	strb	ip, [r3, #2]
	ldr	r2, [r1, #44]
	lsr	r1, r2, #16
	ubfx	r0, r2, #8, #8
	strb	r1, [r3, #5]
	strb	r2, [r3, #7]
	lsr	r2, r1, #8
	strb	r0, [r3, #6]
	strb	r2, [r3, #4]
	b	.L16423
.L16414:
	ldr	r3, [fp, #82]	@ unaligned
	ldr	r2, [fp, #104]
	rev	r3, r3
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L16433
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L16433:
	mov	r2, #1
	movw	r0, #:lower16:.LC1229
	movt	r0, #:upper16:.LC1229
	movw	r3, #1022
	str	r2, [sp]
	mov	r1, #12
	mov	r2, #2
	b	.L16761
.L16519:
	ldrb	r2, [fp, #144]	@ zero_extendqisi2
	ldr	r3, [r4, #8]
	tst	r2, #1
	str	r3, [fp, #60]
	bne	.L16551
	b	.L16507
.L16775:
	ldr	r1, [r6, #84]
	movw	r2, #:lower16:.LC770
	sub	r0, r0, #216
	movt	r2, #:upper16:.LC770
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L16380
.L16360:
	mov	r0, r10
	str	r2, [sp, #28]
	bl	_raw_spin_lock_irq
	ldr	r2, [sp, #28]
	mov	r0, r10
	str	r2, [r4, #4]
	bl	_raw_spin_unlock_irq
	b	.L16345
.L16365:
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
	b	.L16366
.L16805:
	mov	r0, r6
	bl	__memzero
	b	.L16502
.L16788:
	ldr	r1, [r2, #84]
	movw	r2, #:lower16:.LC770
	sub	r0, r0, #216
	movt	r2, #:upper16:.LC770
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L16514
.L16742:
	strd	r8, [sp, #64]
	ldr	r4, [sp, #28]
	ldrd	r8, [sp, #48]
.L16755:
	mvn	r5, #3
	b	.L16421
.L16782:
	ldr	r1, [r6, #84]
	movw	r2, #:lower16:.LC1217
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC1217
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L16364
.L16781:
	ldr	r1, [r6, #84]
	movw	r2, #:lower16:.LC1216
	sub	r0, r0, #18
	ldr	ip, [r8]
	movt	r2, #:upper16:.LC1216
	add	r1, r1, #32
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L16363
.L16743:
	strd	r8, [sp, #40]
	mov	r5, r0
	ldr	r4, [sp, #28]
	ldr	r8, [sp, #48]
	ldr	r10, [sp, #52]
	ldr	r9, [sp, #56]
	ldr	r7, [sp, #60]
	b	.L16421
.L16789:
	cmp	r2, #22
	beq	.L16401
	cmp	r2, #23
	bne	.L16388
	movw	r0, #:lower16:.LC1247
	ldr	r1, .L16813+44
	movt	r0, #:upper16:.LC1247
	bl	printk
	movw	r1, #:lower16:.LC1248
	mov	r0, fp
	movt	r1, #:upper16:.LC1248
	bl	send_message
	b	.L16423
.L16807:
	ldr	r3, [sp, #84]
	lsr	r2, r3, #21
	lsl	r3, r3, #11
	str	r3, [sp, #40]
	str	r2, [sp, #44]
	mov	r2, #2352
	mov	r0, r2
	b	.L16487
.L16796:
	mov	r1, #1
	bl	vfs_fsync
	b	.L16463
.L16798:
	mov	r2, #8448
	ldr	r3, [r6, #40]
	strd	r8, [sp, #64]
	movt	r2, 5
	ldr	r4, [sp, #28]
	ldr	r0, [sp, #36]
	str	r2, [r6, #28]
	ldr	r2, [sp, #32]
	subs	r1, r3, #32
	ldrd	r8, [sp, #48]
	ldr	r5, [sp, #56]
	lsr	r2, r2, r3
	rsb	r3, r3, #32
	orr	r2, r2, r0, lsl r3
	movpl	r3, r0
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	str	r2, [r6, #32]
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	b	.L16421
.L16797:
	strd	r8, [sp, #64]
	ldr	r4, [sp, #28]
	ldrd	r8, [sp, #48]
	ldr	r5, [sp, #56]
	b	.L16421
.L16787:
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r3, [fp, #112]
	mov	r4, r0
	cmp	r3, #1
	bgt	.L16530
	ldr	r3, [fp, #56]
	str	r6, [fp, #112]
	ldr	r2, [fp, #168]
	str	r3, [fp, #116]
	cmp	r2, #0
	bne	.L16768
	b	.L16530
.L16793:
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	mov	r1, #36
	mov	r0, r6
	str	r1, [sp, #28]
	orr	r3, r3, #16
	strb	r3, [fp, #144]
	bl	__memzero
	mov	r2, #127
	mov	r3, #31
	strb	r2, [r6]
	strb	r3, [r6, #4]
	b	.L16423
.L16745:
	strd	r8, [sp, #40]
	ldr	r4, [sp, #28]
	ldr	r8, [sp, #48]
	ldr	r10, [sp, #52]
	ldr	r9, [sp, #56]
	ldr	r7, [sp, #60]
.L16501:
	mvn	r5, #4
	b	.L16421
.L16800:
	movw	r2, #:lower16:.LC1243
	mov	r3, r4
	str	r8, [sp]
	movt	r2, #:upper16:.LC1243
	add	r1, r6, #48
	sub	r0, r0, #18
	bl	__dynamic_dev_dbg
	b	.L16474
.L16795:
	ldr	r0, [r5]
	ubfx	r3, r3, #1, #1
	cmp	r0, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L16429
	mov	r1, #1
	bl	vfs_fsync
	b	.L16429
.L16498:
	ldr	r3, [fp, #136]
	mov	r2, #1
	adds	r8, r8, r0
	adc	r9, r9, r0, asr #31
	sub	r10, r10, r0
	sub	r3, r3, r0
	str	r3, [fp, #136]
	ldr	r3, [r6, #16]
	str	r0, [r3, #4]
	str	r2, [r6, #4]
	b	.L16500
.L16809:
	ldr	r0, .L16813+48
	strd	r8, [sp, #40]
	ldr	r4, [sp, #28]
	ldr	r8, [sp, #48]
	ldr	r10, [sp, #52]
	ldrh	r3, [r0]
	ldr	r9, [sp, #56]
	ldr	r7, [sp, #60]
	tst	r3, #4
	bne	.L16812
.L16497:
	ldr	r2, [r6, #16]
	mov	r1, #0
	mov	r3, #1
	str	r1, [r2, #4]
	str	r3, [r6, #4]
.L16549:
	ldr	r2, [sp, #40]
	mov	r1, #4352
	ldr	r0, [sp, #80]
	movt	r1, 3
	ldr	ip, [sp, #44]
	lsr	r2, r2, #9
	ldrb	r3, [r0, #24]	@ zero_extendqisi2
	str	r1, [r0, #28]
	orr	r2, r2, ip, lsl #23
	orr	r3, r3, #64
	strb	r3, [r0, #24]
	str	r2, [r0, #32]
.L16493:
	ldr	r3, [sp, #88]
	cmp	r3, #248
	bne	.L16501
	ldr	r3, [sp, #84]
	movw	r1, #4500
	mov	r2, #75
	mvn	ip, #0
	mov	r5, #0
	add	r0, r3, #150
	ldr	r3, [r6]
	mov	r6, #60
	sdiv	r1, r0, r1
	sdiv	lr, r0, r2
	str	r1, [sp, #28]
	mov	r1, r3
	mls	r2, r2, lr, r0
	add	r0, r3, #2064
	strb	r5, [r1], #1
	str	ip, [r3, #1]	@ unaligned
	str	ip, [r1, #4]	@ unaligned
	strh	ip, [r1, #8]	@ unaligned
	mov	ip, #1
	ldr	r1, [sp, #28]
	strb	r5, [r3, #11]
	mvn	r5, #4
	strb	ip, [r3, #15]
	sdiv	ip, lr, r6
	strb	r1, [r3, #12]
	mov	r1, #288
	strb	r2, [r3, #14]
	mls	ip, r6, ip, lr
	strb	ip, [r3, #13]
	bl	__memzero
	b	.L16421
.L16786:
	ldrb	r2, [fp, #144]	@ zero_extendqisi2
	mov	r1, #0
	mov	r3, #9472
	movt	r3, 5
	str	r1, [sp, #28]
	orr	r2, r2, #16
	strb	r2, [fp, #144]
	b	.L16445
.L16561:
	strd	r8, [sp, #40]
	ldr	r4, [sp, #28]
	ldr	r8, [sp, #48]
	ldr	r10, [sp, #52]
	ldr	r9, [sp, #56]
	ldr	r7, [sp, #60]
	b	.L16755
.L16808:
	strd	r8, [sp, #40]
	mov	r1, #8448
	mov	lr, r4
	ldr	r0, [sp, #80]
	movt	r1, 5
	ldr	r4, [sp, #28]
	ldr	r2, [sp, #40]
	ldr	ip, [sp, #44]
	ldrb	r3, [r0, #24]	@ zero_extendqisi2
	str	r1, [r0, #28]
	ldr	r8, [sp, #48]
	lsr	r2, r2, #9
	ldr	r10, [sp, #52]
	ldr	r9, [sp, #56]
	orr	r2, r2, ip, lsl #23
	orr	r3, r3, #64
	ldr	r7, [sp, #60]
	strb	r3, [r0, #24]
	str	r2, [r0, #32]
	ldr	r3, [r6, #16]
	mov	r2, #1
	str	lr, [r3, #4]
	str	r2, [r6, #4]
	b	.L16493
.L16744:
	strd	r8, [sp, #40]
	ldr	r4, [sp, #28]
	ldr	r8, [sp, #48]
	ldr	r10, [sp, #52]
	ldr	r9, [sp, #56]
	ldr	r7, [sp, #60]
	b	.L16493
.L16811:
	strd	r8, [sp, #40]
	ldr	r4, [sp, #28]
	ldr	r8, [sp, #48]
	ldr	r10, [sp, #52]
	ldr	r9, [sp, #56]
	ldr	r7, [sp, #60]
	b	.L16549
.L16810:
	movw	r2, #:lower16:.LC711
	mov	r3, r5
	str	r4, [sp]
	movt	r2, #:upper16:.LC711
	add	r1, r7, #48
	sub	r0, r0, #18
	bl	__dynamic_dev_dbg
	b	.L16499
.L16806:
	ldr	r2, [sp, #80]
	mov	r3, #8448
	mvn	r5, #21
	movt	r3, 5
	str	r3, [r2, #28]
	b	.L16421
.L16794:
	mov	r3, #9216
	mvn	r2, #21
	movt	r3, 5
	str	r2, [sp, #28]
	str	r3, [r5, #28]
	b	.L16423
.L16434:
	mov	r3, #9216
	mvn	r2, #21
	movt	r3, 5
	str	r2, [sp, #28]
	str	r3, [r1, #28]
	b	.L16423
.L16799:
	mov	r1, r0
	ldr	r0, .L16813+52
	strd	r8, [sp, #64]
	ldr	r4, [sp, #28]
	ldrd	r8, [sp, #48]
	ldrh	r3, [r0]
	tst	r3, #4
	beq	.L16472
	movw	r2, #:lower16:.LC1242
	mov	r3, r1
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC1242
	add	r1, r6, #48
	bl	__dynamic_dev_dbg
.L16472:
	mov	r2, #4352
	ldr	r3, [r6, #40]
	mov	r5, #0
	movt	r2, 3
	ldr	r0, [sp, #36]
	str	r2, [r6, #28]
	ldr	r2, [sp, #32]
	subs	r1, r3, #32
	lsr	r2, r2, r3
	rsb	r3, r3, #32
	orr	r2, r2, r0, lsl r3
	movpl	r3, r0
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	str	r2, [r6, #32]
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	b	.L16421
.L16447:
	mov	r3, #9216
	mvn	r2, #21
	movt	r3, 5
	str	r2, [sp, #28]
	str	r3, [r6, #28]
	b	.L16423
.L16804:
	lsr	r3, r6, #2
	mov	r2, #75
	ldr	r1, [sp, #28]
	mov	lr, #60
	add	r3, r3, #150
	movw	ip, #4500
	udiv	r0, r3, r2
	strb	r1, [r5, #4]
	mov	r1, #8
	udiv	ip, r3, ip
	str	r1, [sp, #28]
	udiv	r1, r0, lr
	mls	r3, r2, r0, r3
	strb	ip, [r5, #5]
	strb	r3, [r5, #7]
	mls	r1, lr, r1, r0
	strb	r1, [r5, #6]
	b	.L16423
.L16803:
	mov	r3, #8448
	mvn	r2, #21
	movt	r3, 5
	str	r2, [sp, #28]
	str	r3, [ip, #28]
	b	.L16423
.L16802:
	mov	r3, #9216
	mvn	r2, #21
	movt	r3, 5
	str	r2, [sp, #28]
	str	r3, [ip, #28]
	b	.L16423
.L16784:
	ldr	r0, .L16813+56
	ldrh	r3, [r0]
	tst	r3, #4
	beq	.L16453
	movw	r2, #:lower16:.LC1237
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC1237
	add	r1, r6, #48
	bl	__dynamic_dev_dbg
.L16453:
	ldr	r3, [sp, #24]
	str	r3, [r6, #28]
	mvn	r3, #21
	str	r3, [sp, #28]
	b	.L16423
.L16785:
	movw	r2, #:lower16:.LC799
	add	r1, r6, #48
	movt	r2, #:upper16:.LC799
	add	r0, r0, #96
	bl	__dynamic_dev_dbg
	b	.L16459
.L16801:
	strd	r8, [sp, #64]
	ldr	r4, [sp, #28]
	ldrd	r8, [sp, #48]
	b	.L16472
.L16401:
	movw	r0, #:lower16:.LC1247
	ldr	r1, .L16815
	movt	r0, #:upper16:.LC1247
	bl	printk
	movw	r1, #:lower16:.LC1249
	mov	r0, fp
	movt	r1, #:upper16:.LC1249
	bl	send_message
	b	.L16423
.L16792:
	mov	r0, #131072
	mvn	r3, #85
	mov	ip, #60
	movw	lr, #4500
	str	r0, [r6, #8]	@ unaligned
	strb	r1, [r6, #13]
	mov	r1, #75
	strb	r3, [r6, #14]
	ldr	r3, [r2, #16]
	mov	r2, #20
	strb	r5, [r6, #16]
	str	r2, [sp, #28]
	lsr	r3, r3, #2
	add	r3, r3, #150
	udiv	r0, r3, r1
	udiv	lr, r3, lr
	udiv	r2, r0, ip
	mls	r3, r1, r0, r3
	strb	lr, [r6, #17]
	strb	r3, [r6, #19]
	mls	r2, ip, r2, r0
	strb	r2, [r6, #18]
	b	.L16423
.L16791:
	ldr	r0, [sp, #12]
	mov	r1, #256
	cmp	r3, #0
	ldr	ip, [sp, #16]
	movt	r1, 20
	str	r0, [r6, #2]	@ unaligned
	mov	r0, #40960
	str	r1, [r6, #14]	@ unaligned
	mov	r1, #256
	str	r0, [r6, #6]	@ unaligned
	mov	r0, #65536
	str	ip, [r6, #26]	@ unaligned
	mov	ip, #161
	str	r0, [r6, #10]	@ unaligned
	str	ip, [r6, #18]	@ unaligned
	str	r1, [r6, #22]	@ unaligned
	strb	r5, [r6, #30]
	strb	r5, [r6, #31]
	strb	r5, [r6, #32]
	beq	.L16441
	strb	r5, [r6, #33]
	ldr	r3, [r2, #16]
	mov	r1, #1
	mov	r2, #75
	mov	ip, #60
	strb	r1, [r6, #37]
	movw	r0, #4500
	strb	r5, [r6, #39]
	add	r3, r3, #150
	strb	r1, [r6, #40]
	strb	lr, [r6, #46]
	mov	lr, #20
	sdiv	r1, r3, r2
	strb	lr, [r6, #38]
	sdiv	r0, r3, r0
	sdiv	lr, r1, ip
	mls	r3, r2, r1, r3
	strb	r0, [r6, #34]
	strb	r5, [r6, #41]
	strb	r5, [r6, #42]
	strb	r3, [r6, #36]
	strb	r5, [r6, #43]
	strb	r5, [r6, #44]
	strb	r5, [r6, #45]
	strb	r5, [r6, #47]
	mls	r1, ip, lr, r1
	strb	r1, [r6, #35]
.L16442:
	mov	r3, #46
	mov	r2, #0
	mov	r5, #48
	strb	r2, [r6]
	strb	r3, [r6, #1]
	b	.L16421
.L16790:
	mov	r3, #9216
	mvn	r1, #21
	movt	r3, 5
	str	r1, [sp, #28]
	str	r3, [r2, #28]
	b	.L16423
.L16812:
	ldr	r1, [sp, #80]
	movw	r2, #:lower16:.LC710
	mov	r3, r5
	movt	r2, #:upper16:.LC710
	sub	r0, r0, #18
	add	r1, r1, #48
	bl	__dynamic_dev_dbg
	b	.L16497
.L16441:
	ldr	r2, [r2, #16]
	ldr	r1, [sp, #20]
	str	r3, [r6, #41]	@ unaligned
	strb	r3, [r6, #45]
	str	r1, [r6, #37]	@ unaligned
	lsr	r1, r2, #16
	strb	r3, [r6, #46]
	strb	r3, [r6, #47]
	lsr	r3, r1, #8
	strb	r2, [r6, #36]
	ubfx	r2, r2, #8, #8
	strb	r3, [r6, #33]
	strb	r1, [r6, #34]
	strb	r2, [r6, #35]
	b	.L16442
.L16816:
	.align	2
.L16815:
	.word	.LANCHOR5+1084
	.fnend
	.size	fsg_main_thread, .-fsg_main_thread
	.align	2
	.global	usb_diag_open
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_open, %function
usb_diag_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r5, #:lower16:.LANCHOR0
	strd	r6, [sp, #8]
	movt	r5, #:upper16:.LANCHOR0
	mov	r6, r0
	ldr	r0, .L16831
	strd	r8, [sp, #16]
	mov	r7, r1
	str	r10, [sp, #24]
	mov	r8, r2
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5]
	mov	r9, r0
	cmp	r5, r4
	beq	.L16818
	sub	r4, r4, #4
	b	.L16820
.L16829:
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L16818
.L16820:
	mov	r0, r6
	ldr	r1, [r4]
	bl	strcmp
	cmp	r0, #0
	bne	.L16829
	mov	r1, r9
	ldr	r0, .L16831
	bl	_raw_spin_unlock_irqrestore
.L16822:
	str	r6, [r4]
	ldr	r0, .L16831
	str	r8, [r4, #12]
	str	r7, [r4, #16]
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:.LANCHOR0
	mov	r6, r0
	ldr	r1, [r5, #4]
	add	r0, r4, #4
	movt	r2, #:upper16:.LANCHOR0
	bl	__list_add
	mov	r1, r6
	ldr	r0, .L16831
	bl	_raw_spin_unlock_irqrestore
.L16817:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L16818:
	ldr	r0, .L16831
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L16830
	mov	r2, #24
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	bne	.L16822
	mvn	r4, #11
	b	.L16817
.L16830:
	mov	r4, #16
	b	.L16822
.L16832:
	.align	2
.L16831:
	.word	.LANCHOR1+3428
	.fnend
	.size	usb_diag_open, .-usb_diag_open
	.align	2
	.global	usb_diag_close
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_close, %function
usb_diag_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, #0
	ldr	r0, .L16841
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	str	r5, [r4, #12]
	add	r0, r4, #4
	str	r5, [r4, #16]
	bl	list_del
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r3, [r2, #3520]!
	cmp	r3, r2
	sub	r3, r3, #140
	beq	.L16835
.L16834:
	ldr	r1, [r3, #124]
	cmp	r1, r4
	beq	.L16840
	ldr	r3, [r3, #140]
	cmp	r3, r2
	sub	r3, r3, #140
	bne	.L16834
.L16835:
	mov	r0, r4
	bl	kfree
	ldrd	r4, [sp]
	mov	r1, r6
	ldr	r0, .L16841
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L16840:
	ldr	r1, [r3, #140]
	str	r5, [r3, #124]
	cmp	r1, r2
	sub	r3, r1, #140
	bne	.L16834
	b	.L16835
.L16842:
	.align	2
.L16841:
	.word	.LANCHOR1+3428
	.fnend
	.size	usb_diag_close, .-usb_diag_close
	.align	2
	.global	usb_diag_alloc_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_alloc_req, %function
usb_diag_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #20]
	.pad #12
	sub	sp, sp, #12
	cmp	r4, #0
	beq	.L16858
	add	fp, r4, #108
	mov	r5, r4
	mov	r0, fp
	mov	r10, r2
	mov	r8, r1
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r5, #100]!
	str	r0, [sp, #4]
	cmp	r6, r5
	ldr	r7, [r6]
	bne	.L16846
	b	.L16845
.L16859:
	mov	r7, r3
.L16846:
	mov	r0, r6
	sub	r6, r6, #36
	bl	list_del
	ldr	r0, [r4, #88]
	mov	r1, r6
	mov	r6, r7
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r5, r7
	ldr	r3, [r7]
	bne	.L16859
.L16845:
	mov	r7, r4
	ldr	r6, [r7, #92]!
	cmp	r6, r7
	ldr	r9, [r6]
	bne	.L16848
	b	.L16847
.L16860:
	mov	r9, r3
.L16848:
	mov	r0, r6
	sub	r6, r6, #36
	bl	list_del
	ldr	r0, [r4, #84]
	mov	r1, r6
	mov	r6, r9
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r9
	ldr	r3, [r9]
	bne	.L16860
.L16847:
	cmp	r8, #0
	ble	.L16849
	movw	r9, #:lower16:diag_write_complete
	mov	r6, #0
	movt	r9, #:upper16:diag_write_complete
	b	.L16851
.L16872:
	str	r9, [r3, #28]
	ldr	r1, [r4, #104]
	bl	__list_add
	cmp	r8, r6
	beq	.L16849
.L16851:
	ldr	r0, [r4, #88]
	mov	r1, #32
	add	r6, r6, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r5
	add	r0, r3, #36
	bne	.L16872
.L16850:
	ldr	r6, [r4, #100]
	cmp	r6, r5
	ldr	r8, [r6]
	bne	.L16855
	b	.L16854
.L16861:
	mov	r8, r3
.L16855:
	mov	r0, r6
	sub	r6, r6, #36
	bl	list_del
	ldr	r0, [r4, #88]
	mov	r1, r6
	mov	r6, r8
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r5, r8
	ldr	r3, [r8]
	bne	.L16861
.L16854:
	ldr	r5, [r4, #92]
	cmp	r5, r7
	ldr	r6, [r5]
	bne	.L16857
	b	.L16856
.L16862:
	mov	r6, r3
.L16857:
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del
	ldr	r0, [r4, #84]
	mov	r1, r5
	mov	r5, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r6
	ldr	r3, [r6]
	bne	.L16862
.L16856:
	mov	r0, fp
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #11
.L16843:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16849:
	cmp	r10, #0
	ble	.L16852
	movw	r8, #:lower16:diag_read_complete
	mov	r6, #0
	movt	r8, #:upper16:diag_read_complete
	b	.L16853
.L16873:
	str	r8, [r3, #28]
	ldr	r1, [r4, #96]
	bl	__list_add
	cmp	r10, r6
	beq	.L16852
.L16853:
	ldr	r0, [r4, #84]
	mov	r1, #32
	add	r6, r6, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r7
	add	r0, r3, #36
	bne	.L16873
	b	.L16850
.L16852:
	mov	r0, fp
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L16843
.L16858:
	mvn	r0, #18
	b	.L16843
	.fnend
	.size	usb_diag_alloc_req, .-usb_diag_alloc_req
	.align	2
	.global	usb_diag_read
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_read, %function
usb_diag_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #20]
	cmp	r4, #0
	beq	.L16878
	add	r8, r4, #108
	mov	r6, r1
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	mov	r10, r0
	cmp	r3, #0
	beq	.L16884
	ldr	r5, [r4, #92]
	add	r9, r4, #92
	cmp	r9, r5
	beq	.L16885
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del
	mov	r1, r10
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6]
	mov	r1, r7
	mov	r2, #32
	str	r3, [r5, #-36]
	ldr	r3, [r6, #4]
	str	r3, [r5, #-32]
	str	r6, [r5, #-4]
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L16886
.L16874:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L16886:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r2, r9
	ldr	r1, [r4, #96]
	mov	r0, r5
	bl	__list_add
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, .L16887
	ldr	r0, .L16887+4
	bl	___ratelimit
	cmp	r0, #0
	mvneq	r0, #4
	beq	.L16874
	ldr	r3, [r4, #116]
	movw	r1, #:lower16:.LC1254
	movt	r1, #:upper16:.LC1254
	ldr	r2, .L16887
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mvn	r0, #4
	b	.L16874
.L16878:
	mvn	r0, #18
	b	.L16874
.L16884:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L16874
.L16885:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #116]
	movw	r1, #:lower16:.LC1253
	movt	r1, #:upper16:.LC1253
	ldr	r2, .L16887
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mvn	r0, #10
	b	.L16874
.L16888:
	.align	2
.L16887:
	.word	.LANCHOR5+1136
	.word	.LANCHOR7-1428
	.fnend
	.size	usb_diag_read, .-usb_diag_read
	.align	2
	.global	usb_diag_write
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_write, %function
usb_diag_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #20]
	cmp	r4, #0
	beq	.L16895
	add	r8, r4, #108
	mov	r6, r1
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	mov	r10, r0
	cmp	r3, #0
	beq	.L16900
	ldr	r5, [r4, #100]
	add	r9, r4, #100
	cmp	r9, r5
	beq	.L16901
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del
	mov	r1, r10
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6]
	mov	r1, r7
	mov	r2, #32
	str	r3, [r5, #-36]
	ldr	r3, [r6, #4]
	str	r3, [r5, #-32]
	str	r6, [r5, #-4]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L16902
	ldr	r2, [r4, #128]
	ldr	r3, [r4, #136]
	add	r2, r2, #1
	add	r3, r3, #1
	str	r2, [r4, #128]
	str	r3, [r4, #136]
.L16889:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L16895:
	mvn	r0, #18
	b	.L16889
.L16900:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L16889
.L16902:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r2, r9
	ldr	r1, [r4, #104]
	mov	r0, r5
	bl	__list_add
	ldr	r1, .L16903
	ldr	r0, .L16903+4
	bl	___ratelimit
	cmp	r0, #0
	beq	.L16894
	ldr	r3, [r4, #116]
	movw	r1, #:lower16:.LC1254
	movt	r1, #:upper16:.LC1254
	ldr	r2, .L16903
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L16894:
	mov	r0, r8
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L16889
.L16901:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #116]
	movw	r1, #:lower16:.LC1253
	movt	r1, #:upper16:.LC1253
	ldr	r2, .L16903
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mvn	r0, #10
	b	.L16889
.L16904:
	.align	2
.L16903:
	.word	.LANCHOR5+1152
	.word	.LANCHOR7-1404
	.fnend
	.size	usb_diag_write, .-usb_diag_write
	.align	2
	.global	diag_function_add
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_add, %function
diag_function_add:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16928
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	mov	r6, r1
	str	r8, [sp, #16]
	mov	r8, r2
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L16924
.L16906:
	movw	r5, #:lower16:.LANCHOR0
	movt	r5, #:upper16:.LANCHOR0
	ldr	r4, [r5]
	cmp	r5, r4
	sub	r4, r4, #4
	bne	.L16909
	b	.L16907
.L16925:
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L16907
.L16909:
	mov	r0, r6
	ldr	r1, [r4]
	bl	strcmp
	cmp	r0, #0
	bne	.L16925
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L16926
	mov	r2, #148
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L16927
.L16911:
	movw	r3, #:lower16:.LANCHOR1
	add	r6, r5, #140
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, r6
	add	r2, r3, #3520
	ldr	r1, [r3, #3524]
	bl	__list_add
	str	r8, [r5, #120]
	ldr	r3, .L16928+4
	movw	ip, #:lower16:diag_function_bind
	str	r4, [r5, #124]
	ldr	r2, [r7, #24]
	movt	ip, #:upper16:diag_function_bind
	movw	r1, #:lower16:diag_function_unbind
	movw	r0, #:lower16:diag_function_set_alt
	movt	r1, #:upper16:diag_function_unbind
	movt	r0, #:upper16:diag_function_set_alt
	mov	lr, #0
	str	r2, [r5, #116]
	ldr	r4, [r4]
	movw	r2, #:lower16:diag_function_disable
	movt	r2, #:upper16:diag_function_disable
	str	r3, [r5, #16]
	add	r3, r3, #40
	str	r4, [r5]
	str	r3, [r5, #8]
	add	r3, r5, #100
	str	ip, [r5, #32]
	add	ip, r5, #92
	str	r1, [r5, #36]
	mov	r1, r5
	str	r0, [r5, #40]
	mov	r0, r7
	str	r2, [r5, #48]
	str	ip, [r5, #92]
	str	ip, [r5, #96]
	str	r3, [r5, #100]
	str	r3, [r5, #104]
	str	lr, [r5, #108]
	bl	usb_add_function
	subs	r4, r0, #0
	beq	.L16905
	ldr	r3, [r7, #24]
	movw	r1, #:lower16:.LC1256
	movt	r1, #:upper16:.LC1256
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	mov	r0, r6
	bl	list_del
	mov	r0, r5
	bl	kfree
.L16905:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L16907:
	ldr	r3, [r7, #24]
	movw	r1, #:lower16:.LC1257
	mvn	r4, #18
	movt	r1, #:upper16:.LC1257
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	b	.L16905
.L16926:
	mov	r5, #16
	b	.L16911
.L16924:
	ldr	r1, [r7, #24]
	movw	r2, #:lower16:.LC1255
	sub	r0, r3, #24
	movt	r2, #:upper16:.LC1255
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L16906
.L16927:
	mvn	r4, #11
	b	.L16905
.L16929:
	.align	2
.L16928:
	.word	.LANCHOR8-3360
	.word	.LANCHOR0+2784
	.fnend
	.size	diag_function_add, .-diag_function_add
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_bind_config, %function
diag_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r2, .L16952
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:__stack_chk_guard
	mov	r8, r1
	strd	r10, [sp, #24]
	movt	r9, #:upper16:__stack_chk_guard
	str	lr, [sp, #32]
	ldr	r3, [r3, #3308]
	.pad #44
	sub	sp, sp, #44
	ldr	r0, [r9]
	ldr	r1, [r1, #24]
	cmp	r3, r2
	sub	r5, r3, #520
	str	r0, [sp, #36]
	bne	.L16933
	b	.L16931
.L16949:
	ldr	r3, [r5, #520]
	cmp	r3, r2
	sub	r5, r3, #520
	beq	.L16931
.L16933:
	ldr	r3, [r3, #-512]
	cmp	r1, r3
	bne	.L16949
.L16931:
	mov	r2, #32
	ldr	r1, .L16952+4
	add	r0, sp, #4
	bl	strlcpy
	add	r0, sp, #4
	movw	r6, #:lower16:.LC459
	bl	strim
	movw	r10, #:lower16:usb_diag_update_pid_and_serial_num
	movt	r6, #:upper16:.LC459
	str	r0, [sp]
	movt	r10, #:upper16:usb_diag_update_pid_and_serial_num
	mov	r4, #0
	mvn	r7, #0
	b	.L16934
.L16937:
	mov	r1, r6
	mov	r0, sp
	bl	strsep
	cmp	r4, #0
	mov	fp, r0
	movne	r2, #0
	bne	.L16935
	ldr	r2, [r5, #44]
	cmp	r2, #0
	beq	.L16940
	ldr	r2, [r2]
	cmp	r2, #0
	moveq	r2, r10
.L16935:
	cmp	fp, #0
	beq	.L16936
	mov	r1, fp
	mov	r0, r8
	bl	diag_function_add
	subs	r7, r0, #0
	bne	.L16950
.L16936:
	ldr	r0, [sp]
	add	r4, r4, #1
.L16934:
	cmp	r0, #0
	bne	.L16937
	ldr	r2, [sp, #36]
	mov	r0, r7
	ldr	r3, [r9]
	cmp	r2, r3
	bne	.L16951
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16940:
	movw	r2, #:lower16:usb_diag_update_pid_and_serial_num
	movt	r2, #:upper16:usb_diag_update_pid_and_serial_num
	b	.L16935
.L16950:
	movw	r0, #:lower16:.LC1258
	mov	r2, fp
	ldr	r1, .L16952+8
	movt	r0, #:upper16:.LC1258
	bl	printk
	b	.L16936
.L16951:
	bl	__stack_chk_fail
.L16953:
	.align	2
.L16952:
	.word	.LANCHOR1+3308
	.word	.LANCHOR1+3544
	.word	.LANCHOR5+1168
	.fnend
	.size	diag_function_bind_config, .-diag_function_bind_config
	.align	2
	.global	send_sps_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	send_sps_req, %function
send_sps_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16971
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
	ldrh	r1, [r3, #-14]
	ldr	r2, [r6, #84]
	tst	r1, #4
	ldr	r7, [r2]
	bne	.L16967
.L16955:
	ldr	r3, [r4, #8]
	mov	r1, #32
	mov	r0, r4
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L16968
	movw	r0, #:lower16:.LC494
	ldr	r1, [r7, #28]
	movt	r0, #:upper16:.LC494
	bl	strcmp
	movw	r3, #:lower16:.LANCHOR1
	cmp	r0, #0
	movt	r3, #:upper16:.LANCHOR1
	moveq	r2, #32768
	ldr	r3, [r3, #3972]
	orreq	r3, r3, #1312
	bne	.L16969
.L16959:
	str	r2, [r5, #4]
	mov	r1, r5
	mov	r0, r4
	str	r3, [r5, #52]
	mov	r2, #32
	str	r5, [r6, #96]
	ldr	r3, [r4, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L16970
.L16954:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L16969:
	bic	r3, r3, #65536
	mov	r2, #0
	bic	r3, r3, #96
	orr	r3, r3, #65536
	orr	r3, r3, #32
	b	.L16959
.L16967:
	movw	r1, #:lower16:.LC1259
	sub	r0, r3, #32
	movt	r1, #:upper16:.LC1259
	bl	__dynamic_pr_debug
	b	.L16955
.L16970:
	movw	r0, #:lower16:.LC1261
	movt	r0, #:upper16:.LC1261
	bl	printk
	mvn	r0, #4
	b	.L16954
.L16968:
	movw	r0, #:lower16:.LC1260
	movt	r0, #:upper16:.LC1260
	bl	printk
	mvn	r0, #11
	b	.L16954
.L16972:
	.align	2
.L16971:
	.word	.LANCHOR8-3328
	.fnend
	.size	send_sps_req, .-send_sps_req
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_connect_work, %function
usb_qdss_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L17013
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L17005
.L16974:
	ldr	r5, [r4, #-48]
	ldr	r6, .L17013+4
	ldr	r3, [r5]
	ldrh	r2, [r6, #-14]
	ldr	r3, [r3, #84]
	tst	r2, #4
	ldr	r7, [r3]
	bne	.L17006
.L16975:
	movw	r0, #:lower16:.LC494
	ldr	r1, [r7, #28]
	movt	r0, #:upper16:.LC494
	bl	strcmp
	cmp	r0, #0
	beq	.L17007
	ldr	r3, .L17013+8
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L17008
.L16978:
	ldr	r0, .L17013+12
	ldr	r2, [r4, #-72]
	ldr	r9, [r4, #-48]
	ldrh	r3, [r0, #-2]
	ldr	r6, [r2]
	tst	r3, #4
	bne	.L17009
.L16980:
	mov	r2, #1
	mov	r3, #0
	ldr	r0, [r6, #28]
	mov	r1, r2
	movw	r5, #:lower16:.LANCHOR1
	bl	usb_bam_get_connection_idx
	uxtb	r7, r0
	ldr	r1, .L17013+16
	movt	r5, #:upper16:.LANCHOR1
	mov	r0, r7
	bl	usb_bam_connect
	movw	r3, #:lower16:kmalloc_caches
	mov	r8, r0
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5, #3984]
	beq	.L16982
	mov	r2, #16
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5, #3984]
	beq	.L17010
.L16982:
	ldr	r0, [r6, #28]
	bl	usb_bam_set_qdss_core
	ldr	r3, .L17013+20
	mov	r1, #0
	mov	r0, r7
	ldr	r2, [r5, #3984]
	stm	sp, {r1, r2}
	add	r1, r3, #4
	sub	r2, r3, #4
	bl	get_bam2bam_connection_info
	movw	r0, #:lower16:.LC494
	ldr	r1, [r6, #28]
	movt	r0, #:upper16:.LC494
	bl	strcmp
	cmp	r0, #0
	beq	.L17011
.L16984:
	cmp	r8, #0
	bne	.L16983
	ldr	r5, [r4, #-32]
	cmp	r5, #0
	beq	.L16986
	sub	r3, r4, #44
	mov	r2, r8
	ldr	r0, [r4, #-28]
	mov	r1, r8
	blx	r5
.L16986:
	ldr	r0, [r4, #-48]
	bl	send_sps_req
	cmp	r0, #0
	bne	.L17012
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L17007:
	mov	r0, r5
	bl	msm_ep_config
	cmp	r0, #0
	beq	.L16978
	movw	r0, #:lower16:.LC1264
	movt	r0, #:upper16:.LC1264
	bl	printk
	movw	r0, #:lower16:.LC1265
	movt	r0, #:upper16:.LC1265
.L17004:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk
.L17011:
	ldr	r2, [r5, #3984]
	mov	r0, r9
	ldrb	r3, [r5, #3972]	@ zero_extendqisi2
	ldmib	r2, {r1, r2}
	bl	msm_data_fifo_config
	b	.L16984
.L17005:
	movw	r1, #:lower16:.LC1262
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC1262
	bl	__dynamic_pr_debug
	b	.L16974
.L17006:
	movw	r1, #:lower16:.LC1263
	sub	r0, r6, #32
	movt	r1, #:upper16:.LC1263
	bl	__dynamic_pr_debug
	b	.L16975
.L17009:
	movw	r1, #:lower16:.LC722
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC722
	bl	__dynamic_pr_debug
	b	.L16980
.L17008:
	movw	r1, #:lower16:.LC1266
	sub	r0, r6, #8
	movt	r1, #:upper16:.LC1266
	bl	__dynamic_pr_debug
	b	.L16978
.L17010:
	movw	r0, #:lower16:.LC1267
	movt	r0, #:upper16:.LC1267
	bl	printk
.L16983:
	movw	r0, #:lower16:.LC1268
	movt	r0, #:upper16:.LC1268
	b	.L17004
.L17012:
	movw	r0, #:lower16:.LC1269
	movt	r0, #:upper16:.LC1269
	b	.L17004
.L17014:
	.align	2
.L17013:
	.word	.LANCHOR8-3312
	.word	.LANCHOR8-3280
	.word	.LANCHOR8-3264
	.word	.LANCHOR4-772
	.word	.LANCHOR1+3972
	.word	.LANCHOR1+3976
	.fnend
	.size	usb_qdss_connect_work, .-usb_qdss_connect_work
	.align	2
	.global	init_data
	.syntax unified
	.arm
	.fpu softvfp
	.type	init_data, %function
init_data:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, .L17030
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0]
	ldrh	r2, [r5, #-14]
	ldr	r3, [r3, #84]
	tst	r2, #4
	ldr	r6, [r3]
	bne	.L17027
.L17016:
	movw	r0, #:lower16:.LC494
	ldr	r1, [r6, #28]
	movt	r0, #:upper16:.LC494
	bl	strcmp
	cmp	r0, #0
	beq	.L17028
	ldr	r3, .L17030+4
	ldrh	r4, [r3, #-6]
	ubfx	r4, r4, #2, #1
	cmp	r4, #0
	bne	.L17029
.L17015:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L17028:
	mov	r0, r4
	bl	msm_ep_config
	subs	r4, r0, #0
	beq	.L17015
	movw	r0, #:lower16:.LC1264
	movt	r0, #:upper16:.LC1264
	bl	printk
	b	.L17015
.L17027:
	movw	r1, #:lower16:.LC1263
	sub	r0, r5, #32
	movt	r1, #:upper16:.LC1263
	bl	__dynamic_pr_debug
	b	.L17016
.L17029:
	movw	r1, #:lower16:.LC1266
	sub	r0, r5, #8
	movt	r1, #:upper16:.LC1266
	mov	r4, #0
	bl	__dynamic_pr_debug
	b	.L17015
.L17031:
	.align	2
.L17030:
	.word	.LANCHOR8-3280
	.word	.LANCHOR8-3264
	.fnend
	.size	init_data, .-init_data
	.align	2
	.global	uninit_data
	.syntax unified
	.arm
	.fpu softvfp
	.type	uninit_data, %function
uninit_data:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC719
	str	r6, [sp, #8]
	movt	r0, #:upper16:.LC719
	str	lr, [sp, #12]
	ldr	r3, [r4]
	ldr	r3, [r3, #84]
	ldr	r5, [r3]
	bl	printk
	movw	r0, #:lower16:.LC494
	movt	r0, #:upper16:.LC494
	ldr	r1, [r5, #28]
	bl	strcmp
	cmp	r0, #0
	movne	r4, #0
	beq	.L17039
.L17032:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L17039:
	mov	r0, r4
	bl	msm_ep_unconfig
	subs	r4, r0, #0
	beq	.L17032
	movw	r0, #:lower16:.LC720
	movt	r0, #:upper16:.LC720
	bl	printk
	b	.L17032
	.fnend
	.size	uninit_data, .-uninit_data
	.align	2
	.global	usb_qdss_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_free_req, %function
usb_qdss_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L17055
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L17053
.L17041:
	ldr	r6, [r4, #20]
	cmp	r6, #0
	beq	.L17054
	mov	r7, r6
	ldr	r4, [r7, #148]!
	cmp	r4, r7
	ldr	r5, [r4]
	bne	.L17044
	b	.L17043
.L17047:
	mov	r5, r3
.L17044:
	mov	r0, r4
	sub	r4, r4, #36
	bl	list_del
	ldr	r0, [r6, #104]
	mov	r1, r4
	mov	r4, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r5
	ldr	r3, [r5]
	bne	.L17047
.L17043:
	mov	r7, r6
	ldr	r4, [r7, #140]!
	cmp	r7, r4
	ldr	r5, [r4]
	bne	.L17046
	b	.L17040
.L17048:
	mov	r5, r3
.L17046:
	mov	r0, r4
	sub	r4, r4, #36
	bl	list_del
	ldr	r0, [r6, #100]
	mov	r1, r4
	mov	r4, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r5
	ldr	r3, [r5]
	bne	.L17048
.L17040:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L17053:
	movw	r1, #:lower16:.LC1270
	sub	r0, r3, #32
	movt	r1, #:upper16:.LC1270
	bl	__dynamic_pr_debug
	b	.L17041
.L17054:
	movw	r0, #:lower16:.LC1271
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC1271
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L17056:
	.align	2
.L17055:
	.word	.LANCHOR8-3232
	.fnend
	.size	usb_qdss_free_req, .-usb_qdss_free_req
	.align	2
	.global	usb_qdss_alloc_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_alloc_req, %function
usb_qdss_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L17076
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r8, r2
	mov	r9, r0
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r3, #-6]
	ldr	r4, [r0, #20]
	tst	r2, #4
	bne	.L17072
.L17058:
	cmp	r8, #0
	cmpgt	r7, #0
	movle	r5, #1
	movgt	r5, #0
	cmp	r4, #0
	moveq	r5, #1
	cmp	r5, #0
	movweq	r6, #:lower16:qdss_ctrl_write_complete
	addeq	r10, r4, #148
	movteq	r6, #:upper16:qdss_ctrl_write_complete
	bne	.L17073
.L17059:
	ldr	r0, [r4, #104]
	mov	r1, #32
	add	r5, r5, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r10
	add	r0, r3, #36
	beq	.L17074
	str	r6, [r3, #28]
	ldr	r1, [r4, #152]
	bl	__list_add
	cmp	r7, r5
	bgt	.L17059
	movw	r6, #:lower16:qdss_ctrl_read_complete
	mov	r5, #0
	movt	r6, #:upper16:qdss_ctrl_read_complete
	add	r7, r4, #140
.L17064:
	ldr	r0, [r4, #100]
	mov	r1, #32
	add	r5, r5, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r7
	add	r0, r3, #36
	beq	.L17075
	str	r6, [r3, #28]
	ldr	r1, [r4, #144]
	bl	__list_add
	cmp	r8, r5
	bgt	.L17064
	mov	r0, #0
.L17057:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L17072:
	movw	r1, #:lower16:.LC1272
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC1272
	bl	__dynamic_pr_debug
	b	.L17058
.L17074:
	movw	r0, #:lower16:.LC1274
	movt	r0, #:upper16:.LC1274
	bl	printk
.L17062:
	mov	r0, r9
	bl	usb_qdss_free_req
	mvn	r0, #11
	b	.L17057
.L17075:
	movw	r0, #:lower16:.LC1275
	movt	r0, #:upper16:.LC1275
	bl	printk
	b	.L17062
.L17073:
	movw	r0, #:lower16:.LC1273
	movt	r0, #:upper16:.LC1273
	bl	printk
	mvn	r0, #18
	b	.L17057
.L17077:
	.align	2
.L17076:
	.word	.LANCHOR8-3216
	.fnend
	.size	usb_qdss_alloc_req, .-usb_qdss_alloc_req
	.align	2
	.global	usb_qdss_ctrl_read
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_ctrl_read, %function
usb_qdss_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L17095
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r3, #-14]
	ldr	r4, [r0, #20]
	tst	r2, #4
	bne	.L17091
.L17079:
	cmp	r4, #0
	beq	.L17083
	add	r8, r4, #188
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #92]
	mov	r10, r0
	cmp	r3, #0
	beq	.L17092
	ldr	r5, [r4, #140]
	add	r9, r4, #140
	cmp	r9, r5
	beq	.L17093
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del
	mov	r1, r10
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6]
	mov	r1, r7
	mov	r2, #32
	str	r3, [r5, #-36]
	ldr	r3, [r6, #4]
	str	r3, [r5, #-32]
	str	r6, [r5, #-4]
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L17094
.L17078:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L17091:
	movw	r1, #:lower16:.LC1276
	sub	r0, r3, #32
	movt	r1, #:upper16:.LC1276
	bl	__dynamic_pr_debug
	b	.L17079
.L17083:
	mvn	r0, #18
	b	.L17078
.L17092:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L17078
.L17094:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r2, r9
	ldr	r1, [r4, #144]
	mov	r0, r5
	bl	__list_add
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC1278
	movt	r0, #:upper16:.LC1278
	bl	printk
	mvn	r0, #4
	b	.L17078
.L17093:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC1277
	movt	r0, #:upper16:.LC1277
	bl	printk
	mvn	r0, #10
	b	.L17078
.L17096:
	.align	2
.L17095:
	.word	.LANCHOR8-3184
	.fnend
	.size	usb_qdss_ctrl_read, .-usb_qdss_ctrl_read
	.align	2
	.global	usb_qdss_ctrl_write
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_ctrl_write, %function
usb_qdss_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L17114
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r3, #-6]
	ldr	r4, [r0, #20]
	tst	r2, #4
	bne	.L17110
.L17098:
	cmp	r4, #0
	beq	.L17102
	add	r8, r4, #188
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #92]
	mov	r10, r0
	cmp	r3, #0
	beq	.L17111
	ldr	r5, [r4, #148]
	add	r9, r4, #148
	cmp	r9, r5
	beq	.L17112
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del
	mov	r1, r10
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6]
	mov	r1, r7
	mov	r2, #32
	str	r3, [r5, #-36]
	ldr	r3, [r6, #4]
	str	r3, [r5, #-32]
	str	r6, [r5, #-4]
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L17113
.L17097:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L17110:
	movw	r1, #:lower16:.LC1279
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC1279
	bl	__dynamic_pr_debug
	b	.L17098
.L17102:
	mvn	r0, #18
	b	.L17097
.L17111:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L17097
.L17113:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r2, r9
	ldr	r1, [r4, #152]
	mov	r0, r5
	bl	__list_add
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC1278
	movt	r0, #:upper16:.LC1278
	bl	printk
	mvn	r0, #4
	b	.L17097
.L17112:
	movw	r0, #:lower16:.LC1280
	movt	r0, #:upper16:.LC1280
	bl	printk
	mov	r0, r8
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #10
	b	.L17097
.L17115:
	.align	2
.L17114:
	.word	.LANCHOR8-3168
	.fnend
	.size	usb_qdss_ctrl_write, .-usb_qdss_ctrl_write
	.align	2
	.global	usb_qdss_open
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_open, %function
usb_qdss_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r10, [sp, #24]
	ldr	r10, .L17144
	mov	fp, r1
	strd	r8, [sp, #16]
	mov	r8, r2
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [r10, #-14]
	tst	r3, #4
	bne	.L17136
.L17117:
	cmp	r8, #0
	beq	.L17137
	movw	r7, #:lower16:.LANCHOR0
	ldr	r0, .L17144+4
	movt	r7, #:upper16:.LANCHOR0
	mov	r5, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #284]!
	mov	r9, r0
	cmp	r4, r5
	sub	r4, r4, #4
	bne	.L17122
	b	.L17120
.L17138:
	ldr	r4, [r4, #4]
	cmp	r4, r5
	sub	r4, r4, #4
	beq	.L17120
.L17122:
	mov	r0, r6
	ldr	r1, [r4]
	bl	strcmp
	cmp	r0, #0
	bne	.L17138
	ldr	r0, .L17144+8
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L17139
.L17129:
	sub	r5, r4, #112
	str	r5, [r4, #20]
.L17125:
	mov	r3, #1
	mov	r1, r9
	ldr	r0, .L17144+4
	str	r6, [r4]
	str	r8, [r4, #12]
	str	fp, [r4, #16]
	str	r3, [r4, #24]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #92]
	cmp	r3, #1
	beq	.L17140
.L17116:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L17120:
	ldr	r3, .L17144+12
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L17141
.L17127:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L17130
	mov	r2, #200
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L17142
.L17123:
	mov	r1, r9
	ldr	r0, .L17144+4
	bl	_raw_spin_unlock_irqrestore
	mov	r2, #0
	mov	r1, #10
	movw	r0, #:lower16:.LC84
	mov	r3, r2
	stm	sp, {r2, r6}
	movt	r1, 2
	movt	r0, #:upper16:.LC84
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r5, #196]
	beq	.L17143
	ldr	r0, .L17144+4
	add	r4, r5, #112
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	ldr	r2, .L17144+16
	add	r0, r5, #116
	ldr	r1, [r7, #288]
	bl	__list_add
	b	.L17125
.L17130:
	mov	r5, #16
	b	.L17123
.L17141:
	movw	r1, #:lower16:.LC1283
	sub	r0, r10, #8
	movt	r1, #:upper16:.LC1283
	bl	__dynamic_pr_debug
	b	.L17127
.L17139:
	movw	r1, #:lower16:.LC1284
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1284
	bl	__dynamic_pr_debug
	b	.L17129
.L17140:
	add	r2, r5, #156
	ldr	r1, [r5, #196]
	mov	r0, #4
	bl	queue_work_on
	b	.L17116
.L17143:
	mov	r0, r5
	mvn	r4, #11
	bl	kfree
	b	.L17116
.L17136:
	movw	r1, #:lower16:.LC1281
	sub	r0, r10, #32
	movt	r1, #:upper16:.LC1281
	bl	__dynamic_pr_debug
	b	.L17117
.L17142:
	mov	r1, r9
	ldr	r0, .L17144+4
	mvn	r4, #11
	bl	_raw_spin_unlock_irqrestore
	b	.L17116
.L17137:
	movw	r0, #:lower16:.LC1282
	mov	r4, r8
	movt	r0, #:upper16:.LC1282
	bl	printk
	b	.L17116
.L17145:
	.align	2
.L17144:
	.word	.LANCHOR8-3136
	.word	.LANCHOR1+3408
	.word	.LANCHOR8-3088
	.word	.LANCHOR8-3120
	.word	.LANCHOR0+284
	.fnend
	.size	usb_qdss_open, .-usb_qdss_open
	.align	2
	.global	usb_qdss_close
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_close, %function
usb_qdss_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L17155
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #20]
	ldrh	r1, [r3, #-6]
	ldr	r2, [r4, #84]
	tst	r1, #4
	ldr	r6, [r2]
	bne	.L17153
.L17147:
	ldr	r0, .L17155+4
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r1, [r4, #96]
	ldr	r0, [r4, #108]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r1, [r4, #96]
	ldr	r0, [r4, #108]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r3, #0
	mov	r1, r7
	ldr	r0, .L17155+4
	str	r3, [r4, #96]
	str	r3, [r5, #24]
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC494
	ldr	r1, [r6, #28]
	movt	r0, #:upper16:.LC494
	bl	strcmp
	cmp	r0, #0
	beq	.L17154
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L17154:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	msm_dwc3_restart_usb_session
.L17153:
	movw	r1, #:lower16:.LC1285
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC1285
	bl	__dynamic_pr_debug
	b	.L17147
.L17156:
	.align	2
.L17155:
	.word	.LANCHOR8-3072
	.word	.LANCHOR1+3408
	.fnend
	.size	usb_qdss_close, .-usb_qdss_close
	.align	2
	.global	rmnet_smd_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_bind_config, %function
rmnet_smd_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r0, [r3, #36]
	.pad #12
	sub	sp, sp, #12
	cmp	r0, #0
	beq	.L17165
	mov	r2, #456
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L17172
.L17158:
	movw	r2, #:lower16:.LC1035
	mov	r5, #0
	movt	r2, #:upper16:.LC1035
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	mov	r1, #10
	str	r5, [sp]
	movw	r0, #:lower16:.LC84
	str	r2, [sp, #4]
	mov	r3, r5
	movt	r1, 2
	movt	r0, #:upper16:.LC84
	str	r4, [r6, #3392]
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #388]
	beq	.L17167
	add	r1, r4, #396
	mov	r2, #65024
	str	r5, [r4, #164]
	movw	r0, #:lower16:rmnet_smd_connect_work
	movw	r3, #:lower16:rmnet_smd_disconnect_work
	str	r5, [r4, #168]
	add	ip, r4, #412
	movt	r3, #:upper16:rmnet_smd_disconnect_work
	str	r5, [r4, #172]
	movt	r2, 65535
	movt	r0, #:upper16:rmnet_smd_connect_work
	str	r1, [r4, #396]
	str	r1, [r4, #400]
	movw	r1, #:lower16:rmnet_control_rx_tlet
	add	r9, r4, #108
	str	r5, [r4, #308]
	movt	r1, #:upper16:rmnet_control_rx_tlet
	add	r8, r4, #116
	str	r5, [r4, #372]
	str	r2, [r4, #392]
	str	r0, [r4, #404]
	add	r0, r4, #284
	str	r2, [r4, #408]
	mov	r2, r4
	str	ip, [r4, #412]
	str	ip, [r4, #416]
	str	r3, [r4, #420]
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_control_tx_tlet
	mov	r2, r4
	add	r0, r4, #264
	movt	r1, #:upper16:rmnet_control_tx_tlet
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_data_rx_tlet
	mov	r2, r4
	add	r0, r4, #348
	movt	r1, #:upper16:rmnet_data_rx_tlet
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_data_tx_tlet
	mov	r2, r4
	add	r0, r4, #328
	movt	r1, #:upper16:rmnet_data_tx_tlet
	bl	tasklet_init
	movw	r1, #:lower16:.LC1173
	ldr	r2, .L17174
	add	r0, r4, #312
	movt	r1, #:upper16:.LC1173
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC1174
	ldr	r2, .L17174
	add	r0, r4, #376
	movt	r1, #:upper16:.LC1174
	bl	__init_waitqueue_head
	ldr	r3, .L17174+4
	movw	lr, #:lower16:rmnet_smd_ch_probe
	movw	ip, #:lower16:rmnet_smd_bind
	movt	lr, #:upper16:rmnet_smd_ch_probe
	movt	ip, #:upper16:rmnet_smd_bind
	movw	r1, #:lower16:.LC1175
	movw	r2, #:lower16:.LC868
	movt	r1, #:upper16:.LC1175
	movt	r2, #:upper16:.LC868
	str	lr, [r4, #176]
	sub	lr, r3, #8
	mov	r0, r7
	str	r1, [r4]
	movw	r1, #:lower16:rmnet_smd_setup
	add	r7, r4, #124
	str	lr, [r4, #4]
	movw	lr, #:lower16:rmnet_smd_set_alt
	movt	r1, #:upper16:rmnet_smd_setup
	str	ip, [r4, #32]
	movw	ip, #:lower16:rmnet_smd_disable
	movt	lr, #:upper16:rmnet_smd_set_alt
	str	r5, [r4, #204]
	movw	r5, #:lower16:rmnet_smd_unbind
	movt	ip, #:upper16:rmnet_smd_disable
	str	r3, [r4, #16]
	movt	r5, #:upper16:rmnet_smd_unbind
	add	r3, r3, #20
	str	r3, [r4, #8]
	add	r3, r4, #156
	str	r5, [r4, #36]
	add	r5, r4, #132
	str	lr, [r4, #40]
	add	lr, r4, #140
	str	ip, [r4, #48]
	add	ip, r4, #148
	str	r1, [r4, #52]
	mov	r1, r4
	str	r9, [r4, #108]
	str	r9, [r4, #112]
	str	r8, [r4, #116]
	str	r8, [r4, #120]
	str	r7, [r4, #124]
	str	r7, [r4, #128]
	str	r5, [r4, #132]
	str	r5, [r4, #136]
	str	lr, [r4, #140]
	str	lr, [r4, #144]
	str	ip, [r4, #148]
	str	ip, [r4, #152]
	str	r3, [r4, #156]
	str	r3, [r4, #160]
	str	r2, [r4, #196]
	bl	usb_add_function
	subs	r5, r0, #0
	beq	.L17173
.L17161:
	ldr	r0, [r4, #388]
	bl	destroy_workqueue
.L17160:
	mov	r0, r4
	bl	kfree
.L17157:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L17173:
	movw	r0, #:lower16:.LC1176
	mov	r1, r5
	movt	r0, #:upper16:.LC1176
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r6, #3412]
	beq	.L17157
	cmn	r0, #4096
	bhi	.L17157
	ldr	ip, .L17174+8
	movw	r0, #:lower16:.LC250
	mov	r3, r4
	movt	r0, #:upper16:.LC250
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L17164
	cmn	r0, #4096
	bls	.L17157
.L17164:
	ldr	r0, [r6, #3412]
	bl	debugfs_remove
	mov	r3, #0
	str	r3, [r6, #3412]
	b	.L17157
.L17165:
	mov	r4, #16
	b	.L17158
.L17167:
	mvn	r5, #11
	b	.L17160
.L17172:
	mvn	r5, #11
	b	.L17157
.L17175:
	.align	2
.L17174:
	.word	.LANCHOR1+4008
	.word	.LANCHOR7-1728
	.word	.LANCHOR5+516
	.fnend
	.size	rmnet_smd_bind_config, .-rmnet_smd_bind_config
	.align	2
	.global	rmnet_sdio_function_add
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_function_add, %function
rmnet_sdio_function_add:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r0, [r3, #36]
	.pad #20
	sub	sp, sp, #20
	cmp	r0, #0
	beq	.L17190
	mov	r2, #376
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L17215
.L17177:
	movw	r2, #:lower16:.LC1035
	mov	r5, #0
	movt	r2, #:upper16:.LC1035
	mov	r1, #10
	movw	r0, #:lower16:.LC84
	mov	r3, r5
	str	r5, [sp]
	str	r2, [sp, #4]
	movt	r1, 2
	movt	r0, #:upper16:.LC84
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #200]
	beq	.L17192
	movw	r0, #:lower16:rmnet_sdio_disconnect_work
	add	r8, r4, #208
	str	r5, [r4, #188]
	add	lr, r4, #224
	movt	r0, #:upper16:rmnet_sdio_disconnect_work
	str	r5, [r4, #192]
	mov	r6, #65024
	movw	ip, #:lower16:rmnet_sdio_set_modem_cbits_w
	str	r5, [r4, #196]
	movw	r2, #:lower16:rmnet_sdio_control_rx_work
	movw	r3, #:lower16:rmnet_sdio_data_rx_work
	str	r8, [r4, #208]
	movw	r1, #:lower16:rmnet_open_sdio_work
	movt	r6, 65535
	str	r8, [r4, #212]
	movt	ip, #:upper16:rmnet_sdio_set_modem_cbits_w
	add	r8, r4, #240
	movt	r2, #:upper16:rmnet_sdio_control_rx_work
	movt	r3, #:upper16:rmnet_sdio_data_rx_work
	str	r6, [r4, #204]
	movt	r1, #:upper16:rmnet_open_sdio_work
	str	r0, [r4, #216]
	add	r0, r4, #340
	str	lr, [r4, #224]
	movw	r9, #:lower16:rmnet_sdio_bind
	str	lr, [r4, #228]
	add	lr, r4, #256
	movt	r9, #:upper16:rmnet_sdio_bind
	str	r6, [r4, #220]
	str	r2, [r4, #232]
	mov	r2, r5
	str	r6, [r4, #236]
	str	r8, [r4, #240]
	str	r8, [r4, #244]
	movw	r8, #:lower16:.LANCHOR4
	str	r3, [r4, #248]
	mov	r3, r5
	movt	r8, #:upper16:.LANCHOR4
	str	r6, [r4, #252]
	str	lr, [r4, #256]
	str	lr, [r4, #260]
	str	r1, [r4, #264]
	mov	r1, r5
	str	r6, [r4, #336]
	str	r0, [r4, #340]
	str	r0, [r4, #344]
	add	r0, r4, #268
	str	ip, [r4, #348]
	bl	init_timer_key
	movw	lr, #:lower16:rmnet_sdio_unbind
	movw	ip, #:lower16:rmnet_sdio_setup
	ldr	r2, .L17218
	movt	lr, #:upper16:rmnet_sdio_unbind
	movt	ip, #:upper16:rmnet_sdio_setup
	movw	r0, #:lower16:delayed_work_timer_fn
	movw	r1, #:lower16:rmnet_close_sdio_work
	movw	r3, #:lower16:.LC1036
	movt	r0, #:upper16:delayed_work_timer_fn
	str	lr, [r4, #36]
	movw	lr, #:lower16:rmnet_sdio_disable
	movt	r1, #:upper16:rmnet_close_sdio_work
	str	ip, [r4, #52]
	movt	lr, #:upper16:rmnet_sdio_disable
	movw	ip, #:lower16:rmnet_sdio_suspend
	movt	ip, #:upper16:rmnet_sdio_suspend
	str	r2, [r4, #4]
	movt	r3, #:upper16:.LC1036
	str	r9, [r4, #32]
	movw	r9, #:lower16:rmnet_sdio_set_alt
	str	lr, [r4, #48]
	add	lr, r2, #8
	movt	r9, #:upper16:rmnet_sdio_set_alt
	add	r2, r2, #28
	str	r3, [r4]
	str	ip, [r4, #56]
	add	ip, r4, #108
	str	r2, [r4, #8]
	add	r2, r4, #308
	str	lr, [r4, #16]
	add	lr, r4, #120
	str	r9, [r4, #40]
	add	r9, r4, #252
	str	ip, [r4, #108]
	str	ip, [r4, #112]
	add	ip, r4, #160
	str	lr, [r4, #120]
	str	lr, [r4, #124]
	add	lr, r4, #132
	str	ip, [r4, #160]
	str	ip, [r4, #164]
	add	ip, r4, #172
	str	lr, [r4, #132]
	str	lr, [r4, #136]
	add	lr, r4, #144
	str	r5, [r4, #152]
	str	ip, [r4, #172]
	str	ip, [r4, #176]
	movw	ip, #1386
	str	lr, [r4, #144]
	str	lr, [r4, #148]
	str	r5, [r4, #156]
	str	r5, [r4, #180]
	str	r5, [r4, #184]
	str	r0, [r4, #284]
	str	r9, [r4, #288]
	str	r6, [r4, #304]
	str	r2, [r4, #308]
	str	r2, [r4, #312]
	str	r1, [r4, #316]
	ldrh	r2, [r8, ip]
	tst	r2, #4
	bne	.L17216
.L17180:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L17183
	add	r6, r4, #72
	str	r7, [r4, #20]
	add	r2, r7, #36
	mov	r0, r6
	ldr	r1, [r7, #40]
	bl	__list_add
	ldr	r5, [r4, #32]
	cmp	r5, #0
	beq	.L17184
	mov	r1, r4
	mov	r0, r7
	blx	r5
	subs	r5, r0, #0
	blt	.L17217
.L17184:
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L17185
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L17185
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r7, #45]
.L17185:
	tst	r3, #2
	bne	.L17186
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L17186
	ldrb	r2, [r7, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r7, #45]
.L17186:
	tst	r3, #1
	bne	.L17187
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L17187
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r7, #45]
.L17187:
	cmp	r5, #0
	beq	.L17188
	movw	r3, #1410
	ldrh	r3, [r8, r3]
	tst	r3, #4
	beq	.L17182
	b	.L17181
.L17216:
	ldr	ip, [r7]
	movw	r2, #:lower16:.LC924
	ldr	r1, [r7, #24]
	movt	r2, #:upper16:.LC924
	ldr	r0, .L17218+4
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r7, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, r5
	bne	.L17180
.L17183:
	movw	r3, #1410
	mvn	r5, #21
	ldrh	r3, [r8, r3]
	tst	r3, #4
	beq	.L17182
.L17181:
	ldr	r1, [r7, #24]
	movw	r2, #:lower16:.LC925
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC925
	ldr	r0, .L17218+8
	ldr	r1, [r1]
	strd	r4, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L17182:
	ldr	r0, [r4, #200]
	bl	destroy_workqueue
.L17179:
	mov	r0, r4
	bl	kfree
.L17176:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L17188:
	movw	r0, #:lower16:.LC1037
	mov	r1, r5
	movt	r0, #:upper16:.LC1037
	bl	debugfs_create_dir
	cmn	r0, #4096
	mov	r2, r0
	str	r0, [r4, #352]
	bhi	.L17176
	ldr	ip, .L17218+12
	movw	r0, #:lower16:.LC250
	mov	r3, r4
	mov	r1, #292
	movt	r0, #:upper16:.LC250
	str	ip, [sp]
	bl	debugfs_create_file
	b	.L17176
.L17190:
	mov	r4, #16
	b	.L17177
.L17192:
	mvn	r5, #11
	b	.L17179
.L17217:
	mov	r0, r6
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L17184
.L17215:
	mvn	r5, #11
	b	.L17176
.L17219:
	.align	2
.L17218:
	.word	.LANCHOR0+2676
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.word	.LANCHOR5-376
	.fnend
	.size	rmnet_sdio_function_add, .-rmnet_sdio_function_add
	.align	2
	.global	frmnet_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_free_req, %function
frmnet_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	frmnet_free_req, .-frmnet_free_req
	.align	2
	.global	audio_source_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_bind_config, %function
audio_source_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mvn	r2, #0
	mov	r3, #0
	strd	r6, [sp, #8]
	mov	r5, r1
	mov	r7, r0
	str	r8, [sp, #16]
	mov	r0, r2
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	add	ip, sp, #8
	str	r2, [r1]
	str	r2, [r1, #4]
	mov	r2, r3
	mov	r1, r3
	str	ip, [sp]
	bl	snd_card_create
	subs	r4, r0, #0
	beq	.L17230
.L17222:
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L17230:
	ldr	r3, [r7, #24]
	add	r6, sp, #12
	movw	r1, #:lower16:.LC1169
	ldr	lr, [sp, #8]
	mov	r2, r4
	movt	r1, #:upper16:.LC1169
	ldr	ip, [r3]
	mov	r3, #1
	mov	r0, lr
	add	ip, ip, #32
	str	ip, [lr, #496]
	stm	sp, {r4, r6}
	movw	r6, #:lower16:.LANCHOR7
	bl	snd_pcm_new
	subs	r4, r0, #0
	movtne	r6, #:upper16:.LANCHOR7
	bne	.L17226
	ldr	r3, [sp, #12]
	movt	r6, #:upper16:.LANCHOR7
	movw	r1, #:lower16:.LC1170
	sub	r8, r6, #1952
	movt	r1, #:upper16:.LC1170
	mov	r2, #80
	str	r4, [r3, #16]
	add	r0, r3, #88
	str	r8, [r3, #272]
	str	r3, [r6, #-1864]
	bl	strlcpy
	ldr	r0, [sp, #12]
	mov	r1, r4
	sub	r2, r6, #1792
	bl	snd_pcm_set_ops
	mov	ip, #65536
	mov	r3, r4
	ldr	r0, [sp, #12]
	mov	r2, r4
	mov	r1, #2
	str	ip, [sp]
	bl	snd_pcm_lib_preallocate_pages_for_all
	ldr	r0, [sp, #8]
	movw	r1, #:lower16:.LC1171
	mov	r2, #16
	movt	r1, #:upper16:.LC1171
	add	r0, r0, #20
	bl	strlcpy
	ldr	r0, [sp, #8]
	mov	r2, #32
	add	r1, r0, #20
	add	r0, r0, #36
	bl	strlcpy
	ldr	r0, [sp, #8]
	movw	r1, #:lower16:.LC1172
	mov	r2, #80
	movt	r1, #:upper16:.LC1172
	add	r0, r0, #68
	bl	strlcpy
	ldr	r0, [sp, #8]
	bl	snd_card_register
	subs	r4, r0, #0
	bne	.L17226
	mov	r1, r8
	mov	r0, r7
	bl	usb_add_function
	subs	r4, r0, #0
	beq	.L17231
.L17224:
.L17225:
.L17226:
	ldr	r0, [r6, #-1868]
	bl	snd_card_free
	b	.L17222
.L17231:
	ldrd	r2, [sp, #8]
	ldr	r1, [r3]
	ldr	r1, [r1]
	str	r1, [r5]
	ldr	r3, [r3, #12]
	str	r3, [r5, #4]
	str	r2, [r6, #-1868]
	b	.L17222
	.fnend
	.size	audio_source_bind_config, .-audio_source_bind_config
	.align	2
	.global	gs_alloc_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_alloc_req, %function
gs_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r6, r1
	mov	r1, r2
	str	r8, [sp, #16]
	mov	r7, r0
	str	lr, [sp, #20]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L17232
	mov	r1, r5
	mov	r0, r6
	str	r6, [r4, #4]
	bl	__kmalloc
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L17238
.L17232:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L17238:
	ldr	r2, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L17232
	.fnend
	.size	gs_alloc_req, .-gs_alloc_req
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_start_io, %function
gs_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	adds	r2, r0, #44
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #32
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #4]
	.pad #12
	sub	sp, sp, #12
	str	r2, [sp]
	ldr	r5, [r3, #92]
	beq	.L17277
	ldr	r8, [r0, #44]
	rsb	r8, r8, #8
	cmp	r8, #0
	ble	.L17242
	movw	r10, #:lower16:kmalloc_caches
	movw	r9, #:lower16:gs_read_complete
	movt	r10, #:upper16:kmalloc_caches
	movt	r9, #:upper16:gs_read_complete
	mov	r7, #0
.L17241:
	ldr	r3, [r5, #8]
	mov	r1, #32
	mov	r0, r5
	ldr	r3, [r3, #8]
	blx	r3
	subs	fp, r0, #0
	mov	r2, #4096
	beq	.L17249
	str	r2, [fp, #4]
	ldr	r3, [r10, #48]
	mov	ip, #16
	mov	r1, #32
	subs	r0, r3, #0
	streq	ip, [fp]
	beq	.L17251
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [fp]
	bne	.L17251
.L17245:
	ldr	r3, [r5, #8]
	mov	r1, fp
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L17249:
	ldr	r3, [r4, #32]
	cmp	r6, r3
	beq	.L17252
.L17247:
	ldr	r3, [r4, #4]
.L17242:
	adds	r2, r4, #88
	add	r8, r4, #76
	ldr	r9, [r3, #88]
	str	r2, [sp, #4]
	beq	.L17279
	ldr	r10, [r4, #88]
	rsb	r10, r10, #8
	cmp	r10, #0
	movwgt	fp, #:lower16:gs_write_complete
	movgt	r7, #0
	movtgt	fp, #:upper16:gs_write_complete
	bgt	.L17255
	b	.L17256
.L17259:
	str	fp, [r3, #28]
	ldr	r1, [r4, #80]
	bl	__list_add
	ldr	r3, [r4, #88]
	cmp	r10, r7
	add	r3, r3, #1
	str	r3, [r4, #88]
	ble	.L17256
.L17255:
	mov	r2, #32
	mov	r1, #4096
	mov	r0, r9
	add	r7, r7, #1
	bl	gs_alloc_req
	subs	r3, r0, #0
	mov	r2, r8
	add	r0, r3, #36
	bne	.L17259
.L17257:
	ldr	r3, [r4, #76]
	cmp	r8, r3
	ldreq	r8, [sp]
	beq	.L17260
.L17256:
	mov	r7, #0
	mov	r0, r4
	str	r7, [r4, #56]
	bl	gs_start_rx
	ldr	r3, [r4, #4]
	mov	r2, r0
	cmp	r3, r7
	beq	.L17265
	ldr	r0, [r4, #8]
	cmp	r0, r7
	beq	.L17265
	cmp	r2, #0
	beq	.L17267
	bl	tty_wakeup
	mov	r0, r7
.L17239:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L17251:
	str	r9, [fp, #28]
	add	r0, fp, #36
	mov	r2, r6
	ldr	r1, [r4, #36]
	add	r7, r7, #1
	bl	__list_add
	ldr	r3, [r4, #44]
	cmp	r8, r7
	add	r3, r3, #1
	str	r3, [r4, #44]
	bgt	.L17241
	b	.L17247
.L17277:
	movw	r9, #:lower16:kmalloc_caches
	movw	r8, #:lower16:gs_read_complete
	movt	r9, #:upper16:kmalloc_caches
	movt	r8, #:upper16:gs_read_complete
	adds	r7, r0, #44
	b	.L17240
.L17307:
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [fp]
	beq	.L17245
.L17246:
	str	r8, [fp, #28]
	add	r0, fp, #36
	add	r7, r7, #1
	mov	r2, r6
	ldr	r1, [r4, #36]
	bl	__list_add
	cmp	r7, #8
	beq	.L17247
.L17240:
	ldr	r3, [r5, #8]
	mov	r1, #32
	mov	r0, r5
	ldr	r3, [r3, #8]
	blx	r3
	subs	fp, r0, #0
	mov	r2, #4096
	beq	.L17249
	str	r2, [fp, #4]
	ldr	r3, [r9, #48]
	mov	r1, #32
	mov	ip, #16
	subs	r0, r3, #0
	bne	.L17307
	str	ip, [fp]
	b	.L17246
.L17261:
	ldr	r7, [r4, #32]
	cmp	r6, r7
	mov	r0, r7
	sub	r9, r7, #36
	beq	.L17252
	bl	list_del
	ldr	r0, [r7, #-36]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r9
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #44]
	sub	r3, r3, #1
	str	r3, [r4, #44]
.L17260:
	cmp	r8, #0
	beq	.L17263
	b	.L17261
.L17308:
	bl	list_del
	ldr	r0, [r7, #-36]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r8
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L17263:
	ldr	r7, [r4, #32]
	cmp	r6, r7
	mov	r0, r7
	sub	r8, r7, #36
	bne	.L17308
.L17252:
	mvn	r0, #11
	b	.L17239
.L17279:
	movw	r10, #:lower16:gs_write_complete
	adds	r7, r4, #88
	movt	r10, #:upper16:gs_write_complete
	b	.L17254
.L17309:
	str	r10, [r3, #28]
	ldr	r1, [r4, #80]
	bl	__list_add
	cmp	r7, #8
	beq	.L17256
.L17254:
	mov	r2, #32
	mov	r1, #4096
	mov	r0, r9
	add	r7, r7, #1
	bl	gs_alloc_req
	subs	r3, r0, #0
	mov	r2, r8
	add	r0, r3, #36
	bne	.L17309
	b	.L17257
.L17268:
	ldr	r7, [r4, #32]
	cmp	r6, r7
	mov	r0, r7
	sub	r9, r7, #36
	beq	.L17269
	bl	list_del
	ldr	r0, [r7, #-36]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r9
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #44]
	sub	r3, r3, #1
	str	r3, [r4, #44]
.L17267:
	ldr	r3, [sp]
	cmp	r3, #0
	beq	.L17270
	b	.L17268
.L17310:
	bl	list_del
	ldr	r0, [r7, #-36]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r9
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L17270:
	ldr	r7, [r4, #32]
	cmp	r6, r7
	mov	r0, r7
	sub	r9, r7, #36
	bne	.L17310
.L17269:
	ldr	r3, [r4, #4]
	ldr	r6, [r3, #88]
.L17272:
	ldr	r3, [sp, #4]
	cmp	r3, #0
	beq	.L17275
	b	.L17273
.L17311:
	bl	list_del
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L17275:
	ldr	r5, [r4, #76]
	cmp	r8, r5
	mov	r0, r5
	sub	r7, r5, #36
	bne	.L17311
.L17274:
	mvn	r0, #4
	b	.L17239
.L17273:
	ldr	r5, [r4, #76]
	cmp	r8, r5
	mov	r0, r5
	sub	r7, r5, #36
	beq	.L17274
	bl	list_del
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #88]
	sub	r3, r3, #1
	str	r3, [r4, #88]
	b	.L17272
.L17265:
	movw	r0, #:lower16:.LC1286
	ldr	r1, .L17312
	movt	r0, #:upper16:.LC1286
	bl	printk
	mvn	r0, #4
	b	.L17239
.L17313:
	.align	2
.L17312:
	.word	.LANCHOR5+1196
	.fnend
	.size	gs_start_io, .-gs_start_io
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_open, %function
gs_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	ldr	r6, .L17348
	mov	r7, r0
	str	r8, [sp, #16]
	mov	r8, r1
	str	lr, [sp, #20]
	ldr	r5, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	add	r3, r6, #20
	add	r5, r5, r5, lsl #1
	lsl	r5, r5, #3
	add	r6, r6, r5
	add	r5, r5, r3
.L17321:
	mov	r0, r6
	bl	mutex_lock
	ldr	r4, [r5]
	subs	r0, r4, #0
	beq	.L17342
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L17317
	add	r3, r3, #1
	mov	r0, r4
	mov	r5, #0
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irq
	mov	r0, r6
	bl	mutex_unlock
.L17314:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L17342:
	mov	r0, r6
	mvn	r5, #18
	bl	mutex_unlock
	b	.L17314
.L17317:
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	mov	r0, r4
	cmp	r3, #0
	bne	.L17318
	mov	r3, #1
	strb	r3, [r4, #16]
	bl	_raw_spin_unlock_irq
	mov	r0, r6
	bl	mutex_unlock
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L17343
.L17320:
	str	r4, [r7, #272]
	ldr	r5, [r4, #4]
	mov	r3, #0
	mov	r2, #1
	str	r7, [r4, #8]
	str	r2, [r4, #12]
	cmp	r5, r3
	strb	r3, [r4, #16]
	beq	.L17328
	ldr	r0, .L17348+4
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L17344
.L17329:
	mov	r0, r4
	bl	gs_start_io
	ldr	r3, [r5, #116]
	cmp	r3, #0
	beq	.L17328
	mov	r0, r5
	blx	r3
.L17328:
	ldr	r0, .L17348+8
	ldrh	r5, [r0, #-14]
	ubfx	r5, r5, #2, #1
	cmp	r5, #0
	bne	.L17345
.L17326:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	b	.L17314
.L17318:
	bl	_raw_spin_unlock_irq
	mov	r0, r6
	bl	mutex_unlock
	mov	r0, #1
	bl	msleep
	b	.L17321
.L17343:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #52]
	cmp	r0, #0
	beq	.L17346
	mov	r2, #8192
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4, #96]
	beq	.L17324
.L17323:
	mov	r2, #8192
	mov	r0, r4
	str	r2, [r4, #92]
	str	r3, [r4, #100]
	str	r3, [r4, #104]
	bl	_raw_spin_lock_irq
	b	.L17320
.L17345:
	movw	r1, #:lower16:.LC1289
	ldrb	r2, [r4, #17]	@ zero_extendqisi2
	mov	r3, r7
	movt	r1, #:upper16:.LC1289
	str	r8, [sp]
	sub	r0, r0, #32
	mov	r5, #0
	bl	__dynamic_pr_debug
	b	.L17326
.L17346:
	mov	r2, #16
	mov	r3, r2
	str	r2, [r4, #96]
	b	.L17323
.L17344:
	movw	r1, #:lower16:.LC1288
	ldrb	r2, [r4, #17]	@ zero_extendqisi2
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1288
	bl	__dynamic_pr_debug
	b	.L17329
.L17324:
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r0, .L17348+12
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L17347
.L17325:
	mov	r3, #0
	mvn	r5, #11
	strb	r3, [r4, #16]
	b	.L17326
.L17347:
	movw	r1, #:lower16:.LC1287
	ldrb	r2, [r4, #17]	@ zero_extendqisi2
	mov	r3, r7
	movt	r1, #:upper16:.LC1287
	str	r8, [sp]
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L17325
.L17349:
	.align	2
.L17348:
	.word	.LANCHOR1+3768
	.word	.LANCHOR8-3024
	.word	.LANCHOR8-2992
	.word	.LANCHOR8-3040
	.fnend
	.size	gs_open, .-gs_open
	.align	2
	.global	gs_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_free_req, %function
gs_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	gs_free_req, .-gs_free_req
	.align	2
	.global	gserial_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_setup, %function
gserial_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 88
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:__stack_chk_guard
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:__stack_chk_guard
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	sub	r8, r1, #1
	strd	r10, [sp, #24]
	cmp	r8, #7
	str	lr, [sp, #32]
	.pad #100
	sub	sp, sp, #100
	str	r3, [sp, #20]
	ldr	r3, [r3]
	str	r0, [sp, #28]
	str	r3, [sp, #92]
	bhi	.L17369
	mov	r10, r1
	mov	r1, #0
	mov	r0, r10
	movw	r9, #:lower16:.LANCHOR1
	bl	__alloc_tty_driver
	movt	r9, #:upper16:.LANCHOR1
	cmp	r0, #0
	str	r0, [r9, #3764]
	beq	.L17370
	movw	r2, #:lower16:.LC961
	movw	r3, #:lower16:tty_std_termios
	ldr	r1, .L17397
	movt	r2, #:upper16:.LC961
	movt	r3, #:upper16:tty_std_termios
	ldrd	r6, [r3]
	mov	lr, #3
	str	r2, [r0, #72]
	ldrd	r4, [r3, #32]
	movw	r2, #:lower16:.LC962
	movt	r2, #:upper16:.LC962
	movt	lr, 1
	str	r2, [r0, #76]
	strd	r4, [sp, #8]
	ldrd	r4, [r3, #8]
	str	lr, [r0, #96]
	mov	lr, #14
	strd	r6, [r0, #100]
	ldrd	r6, [r3, #16]
	ldrd	r2, [r3, #24]
	strd	r4, [r0, #108]
	ldrd	r4, [sp, #8]
	strd	r6, [r0, #116]
	movw	r6, #3261
	str	lr, [r0, #144]
	strd	r2, [r0, #124]
	mov	r3, #9600
	str	r6, [r0, #108]
	strd	r4, [r0, #132]
	mov	r5, #0
	str	r3, [r0, #136]
	str	r3, [r0, #140]
	bl	tty_set_operations
	movw	r2, #:lower16:.LC963
	mov	r1, #10
	str	r5, [sp]
	movt	r2, #:upper16:.LC963
	movw	r0, #:lower16:.LC84
	mov	r3, r5
	movt	r1, 2
	str	r2, [sp, #4]
	movt	r0, #:upper16:.LC84
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r9, #3388]
	beq	.L17371
	ldr	r3, .L17397+4
	movw	r2, #:lower16:.LC964
	movw	r1, #:lower16:.LC965
	movt	r2, #:upper16:.LC964
	movt	r1, #:upper16:.LC965
	movw	fp, #:lower16:kmalloc_caches
	movt	fp, #:upper16:kmalloc_caches
	str	r2, [sp, #8]
	str	r1, [sp, #16]
	add	r8, r3, #236
	mov	r6, r3
	str	r3, [sp, #24]
	mov	r1, r2
	str	r9, [sp, #32]
	str	r3, [sp, #36]
	b	.L17357
.L17392:
	mov	r2, #144
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L17390
.L17355:
	mov	r9, #0
	mov	r0, r4
	ldr	r1, [sp, #16]
	mov	r2, r8
	add	r7, r5, #1
	str	r9, [r0], #20
	add	r6, r6, #24
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC966
	mov	r2, r8
	add	r0, r4, #108
	movt	r1, #:upper16:.LC966
	bl	__init_waitqueue_head
	mov	r1, #65024
	add	lr, r4, #32
	strb	r5, [r4, #17]
	movt	r1, 65535
	movw	r2, #:lower16:gs_rx_push
	add	r0, r4, #64
	add	ip, r4, #48
	str	lr, [r4, #32]
	str	lr, [r4, #36]
	movt	r2, #:upper16:gs_rx_push
	mov	lr, #8
	strb	r9, [r4, #126]
	cmp	r10, r7
	mov	r9, #9600
	str	r1, [r4, #60]
	add	r1, r4, #76
	str	ip, [r4, #48]
	str	ip, [r4, #52]
	str	r0, [r4, #64]
	str	r0, [r4, #68]
	str	r2, [r4, #72]
	str	r1, [r4, #76]
	str	r1, [r4, #80]
	str	r9, [r4, #120]
	strh	lr, [r4, #124]	@ movhi
	str	r4, [r6, #-4]
	beq	.L17391
	ldr	r1, [sp, #8]
	mov	r5, r7
.L17357:
	mov	r0, r6
	mov	r2, r8
	bl	__mutex_init
	ldr	r0, [fp, #8]
	cmp	r0, #0
	bne	.L17392
	mov	r4, #16
	b	.L17355
.L17391:
	ldr	r9, [sp, #32]
	ldr	r0, [r9, #3764]
	str	r10, [r9, #3760]
	bl	tty_register_driver
	subs	r6, r0, #0
	bne	.L17393
	ldr	r3, [sp, #28]
	movw	r8, #:lower16:.LC968
	mov	r4, r6
	ldr	r10, .L17397+8
	movt	r8, #:upper16:.LC968
	add	r5, r3, #32
.L17360:
	mov	r2, r5
	mov	r1, r4
	ldr	r0, [r9, #3764]
	bl	tty_register_device
	cmn	r0, #4096
	bhi	.L17394
.L17359:
	add	r4, r4, #1
	cmp	r4, r7
	bne	.L17360
	ldr	r10, .L17397+12
	movw	r8, #:lower16:.LC969
	mov	r4, #0
	ldr	r5, [sp, #36]
	movt	r8, #:upper16:.LC969
.L17363:
	mov	r2, r8
	mov	r3, r4
	ldr	fp, [r5, #20]
	mov	r1, #48
	add	r0, sp, #44
	bl	snprintf
	add	r0, sp, #44
	mov	r1, #0
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r9, #3960]
	beq	.L17362
	cmn	r0, #4096
	bhi	.L17362
	movw	r0, #:lower16:.LC970
	mov	r3, fp
	str	r10, [sp]
	mov	r1, #292
	movt	r0, #:upper16:.LC970
	bl	debugfs_create_file
	ldr	ip, .L17397+16
	movw	r0, #:lower16:.LC971
	mov	r3, fp
	ldr	r2, [r9, #3960]
	movt	r0, #:upper16:.LC971
	mov	r1, #420
	str	ip, [sp]
	bl	debugfs_create_file
.L17362:
	add	r4, r4, #1
	add	r5, r5, #24
	cmp	r4, r7
	bne	.L17363
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #1938
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L17395
.L17352:
	ldr	r3, [sp, #20]
	mov	r0, r6
	ldr	r2, [sp, #92]
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L17396
	add	sp, sp, #100
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L17371:
	ldr	r3, .L17397+4
	mvn	r6, #11
	str	r3, [sp, #24]
.L17354:
	add	r5, r8, r8, lsl #1
	ldr	r4, .L17397+20
	add	r5, r3, r5, lsl #3
.L17365:
	ldr	r0, [r5, #20]
	sub	r5, r5, #24
	bl	kfree
	cmp	r4, r5
	bne	.L17365
.L17366:
	ldr	r0, [r9, #3388]
	cmp	r0, #0
	beq	.L17367
	bl	destroy_workqueue
.L17367:
	ldr	r0, [r9, #3764]
	bl	put_tty_driver
	mov	r3, #0
	str	r3, [r9, #3764]
	b	.L17352
.L17394:
	mov	r3, r0
	mov	r2, r4
	mov	r1, r10
	mov	r0, r8
	bl	printk
	b	.L17359
.L17369:
	mvn	r6, #21
	b	.L17352
.L17395:
	movw	r3, #:lower16:.LC973
	cmp	r4, #1
	ldr	r2, .L17397+8
	movt	r3, #:upper16:.LC973
	movw	ip, #:lower16:.LC868
	movt	ip, #:upper16:.LC868
	movne	ip, r3
	movw	r1, #:lower16:.LC972
	mov	r3, r4
	movt	r1, #:upper16:.LC972
	str	ip, [sp]
	add	r0, r0, #1920
	bl	__dynamic_pr_debug
	b	.L17352
.L17390:
.L17356:
	cmp	r5, #0
	mvn	r6, #11
	ldr	r9, [sp, #32]
	sub	r8, r5, #1
	beq	.L17366
	ldr	r3, [sp, #24]
	b	.L17354
.L17370:
	mvn	r6, #11
	b	.L17352
.L17396:
	bl	__stack_chk_fail
.L17393:
	movw	r0, #:lower16:.LC967
	mov	r2, r6
	ldr	r1, .L17397+8
	movt	r0, #:upper16:.LC967
	mov	r8, r5
	bl	printk
	ldr	r3, [sp, #24]
	b	.L17354
.L17398:
	.align	2
.L17397:
	.word	.LANCHOR5-1188
	.word	.LANCHOR1+3768
	.word	.LANCHOR5-1064
	.word	.LANCHOR5-1048
	.word	.LANCHOR5-940
	.word	.LANCHOR1+3744
	.fnend
	.size	gserial_setup, .-gserial_setup
	.align	2
	.global	gserial_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_cleanup, %function
gserial_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #3764]
	cmp	r3, #0
	beq	.L17399
	b	gserial_cleanup.part.80
.L17399:
	bx	lr
	.fnend
	.size	gserial_cleanup, .-gserial_cleanup
	.align	2
	.global	gserial_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_connect, %function
gserial_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r3, #3764]
	cmp	r2, #0
	beq	.L17410
	ldr	r2, [r3, #3760]
	cmp	r1, r2
	bcs	.L17410
	ldr	r2, [r0, #88]
	add	r1, r1, r1, lsl #1
	mov	r4, r0
	add	r3, r3, r1, lsl #3
	ldr	ip, [r2, #8]
	mov	r0, r2
	ldr	r6, [r3, #3788]
	ldr	r1, [r2, #28]
	ldr	r3, [ip]
	blx	r3
	subs	r5, r0, #0
	blt	.L17401
	ldr	r3, [r4, #88]
	str	r6, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bge	.L17419
.L17403:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #88]
	mov	r2, #0
	str	r2, [r3]
.L17401:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L17419:
	ldr	r3, [r4, #92]
	mov	r0, r6
	str	r6, [r3]
	bl	_raw_spin_lock_irqsave
	str	r6, [r4, #84]
	ldr	r1, [r6, #120]
	mov	r7, r0
	str	r4, [r6, #4]
	str	r1, [r4, #96]
	ldrh	r1, [r6, #124]
	strh	r1, [r4, #100]	@ movhi
	ldrb	r2, [r6, #126]	@ zero_extendqisi2
	strb	r2, [r4, #102]
	ldr	r3, [r6, #12]
	cmp	r3, #0
	beq	.L17404
	ldr	r0, .L17421
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L17420
.L17405:
	mov	r0, r6
	bl	gs_start_io
	ldr	r3, [r4, #116]
	cmp	r3, #0
	beq	.L17407
.L17418:
	mov	r0, r4
	blx	r3
.L17407:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L17401
.L17404:
	ldr	r3, [r4, #120]
	cmp	r3, #0
	bne	.L17418
	b	.L17407
.L17410:
	mvn	r5, #5
	b	.L17401
.L17420:
	movw	r1, #:lower16:.LC1290
	ldrb	r2, [r6, #17]	@ zero_extendqisi2
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1290
	bl	__dynamic_pr_debug
	b	.L17405
.L17422:
	.align	2
.L17421:
	.word	.LANCHOR8-2976
	.fnend
	.size	gserial_connect, .-gserial_connect
	.align	2
	.global	gserial_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_disconnect, %function
gserial_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #84]
	cmp	r4, #0
	beq	.L17423
	mov	r8, r0
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	ldr	r0, [r8, #96]
	mov	r2, #0
	str	r0, [r4, #120]
	ldrh	r0, [r8, #100]
	strh	r0, [r4, #124]	@ movhi
	ldrb	r1, [r8, #102]	@ zero_extendqisi2
	str	r2, [r4, #4]
	strb	r1, [r4, #126]
	str	r2, [r8, #84]
	ldr	r3, [r4, #12]
	cmp	r3, r2
	bne	.L17425
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L17426
.L17425:
	mov	r2, #1
	add	r0, r4, #108
	mov	r3, #0
	mov	r1, r2
	bl	__wake_up
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L17426
	bl	tty_hangup
.L17426:
	mov	r1, r5
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r8, #92]
	mov	r5, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r8, #92]
	str	r5, [r3]
	ldr	r0, [r8, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r8, #88]
	mov	r0, r4
	str	r5, [r3]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r7, r0
	cmp	r3, r5
	bne	.L17428
	ldrb	r5, [r4, #16]	@ zero_extendqisi2
	cmp	r5, #0
	beq	.L17442
.L17428:
	ldr	r5, [r4, #32]
	add	r9, r4, #32
	ldr	r6, [r8, #92]
	cmp	r9, r5
	beq	.L17429
.L17430:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r10
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #32]
	cmp	r9, r5
	bne	.L17430
	ldr	r6, [r8, #92]
.L17429:
	ldr	r5, [r4, #48]
	add	r9, r4, #48
	cmp	r9, r5
	beq	.L17431
.L17432:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r10
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #48]
	cmp	r9, r5
	bne	.L17432
.L17431:
	ldr	r5, [r4, #76]
	add	r9, r4, #76
	ldr	r6, [r8, #88]
	cmp	r9, r5
	beq	.L17433
.L17434:
	mov	r0, r5
	sub	r8, r5, #36
	bl	list_del
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r8
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #76]
	cmp	r9, r5
	bne	.L17434
.L17433:
	mov	r3, #0
	mov	r1, r7
	mov	r0, r4
	str	r3, [r4, #40]
	str	r3, [r4, #44]
	str	r3, [r4, #84]
	str	r3, [r4, #88]
	str	r3, [r4, #128]
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L17423:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L17442:
	ldr	r0, [r4, #96]
	bl	kfree
	str	r5, [r4, #96]
	b	.L17428
	.fnend
	.size	gserial_disconnect, .-gserial_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_disable, %function
acm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L17450
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L17449
.L17444:
	mov	r0, r4
	bl	gserial_disconnect
	ldr	r0, [r4, #152]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #152]
	mov	r2, #0
	str	r2, [r3]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L17449:
	ldr	r1, [r4, #20]
	movw	r2, #:lower16:.LC1291
	sub	r0, r3, #32
	movt	r2, #:upper16:.LC1291
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	ldr	r1, [r1, #24]
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L17444
.L17451:
	.align	2
.L17450:
	.word	.LANCHOR8-2944
	.fnend
	.size	acm_disable, .-acm_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_set_alt, %function
acm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r2, [r0, #144]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r5, [r3, #24]
	beq	.L17483
	ldrb	r3, [r0, #145]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L17457
	ldr	r2, [r0, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L17458
	ldr	r0, .L17486
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L17484
.L17459:
	mov	r0, r4
	bl	gserial_disconnect
	ldr	r2, [r4, #88]
.L17458:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L17460
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L17460
.L17461:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L17466
	ldr	r0, [r5]
	mov	r1, r4
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L17466
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
	mov	r0, r4
	bl	gserial_connect
.L17452:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L17460:
	ldr	ip, .L17486+4
	ldr	r0, [r5]
	ldrh	r3, [ip, #-14]
	tst	r3, #4
	bne	.L17485
.L17462:
	mov	r1, r4
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L17466
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L17466
	ldr	r2, [r4, #88]
	b	.L17461
.L17483:
	ldr	r2, [r0, #152]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L17454
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #152]
.L17454:
	ldr	r0, [r5]
	mov	r1, r4
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L17457
	ldr	r3, [r4, #152]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	ldr	r3, [r4, #152]
	str	r4, [r3]
	b	.L17452
.L17466:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r5, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L17452
.L17484:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1292
	sub	r0, r0, #24
	movt	r2, #:upper16:.LC1292
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L17459
.L17485:
	movw	r2, #:lower16:.LC1293
	add	r1, r0, #32
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC1293
	sub	r0, ip, #32
	bl	__dynamic_dev_dbg
	ldr	r2, [r4, #88]
	ldr	r0, [r5]
	b	.L17462
.L17457:
	mvn	r5, #21
	b	.L17452
.L17487:
	.align	2
.L17486:
	.word	.LANCHOR8-2928
	.word	.LANCHOR8-2896
	.fnend
	.size	acm_set_alt, .-acm_set_alt
	.align	2
	.global	gsdio_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_free_req, %function
gsdio_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	gsdio_free_req, .-gsdio_free_req
	.align	2
	.global	gsdio_alloc_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_alloc_req, %function
gsdio_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r6, r1
	mov	r1, r2
	str	r8, [sp, #16]
	mov	r7, r0
	str	lr, [sp, #20]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L17494
	mov	r1, r5
	mov	r0, r6
	str	r6, [r4, #4]
	bl	__kmalloc
	cmp	r0, #0
	mov	r5, r0
	str	r0, [r4]
	beq	.L17495
.L17490:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L17494:
	movw	r0, #:lower16:.LC651
	ldr	r1, .L17496
	movt	r0, #:upper16:.LC651
	bl	printk
	b	.L17490
.L17495:
	movw	r0, #:lower16:.LC652
	ldr	r1, .L17496
	movt	r0, #:upper16:.LC652
	bl	printk
	ldr	r3, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	mov	r4, r5
	ldr	r3, [r3, #12]
	blx	r3
	b	.L17490
.L17497:
	.align	2
.L17496:
	.word	.LANCHOR5+1208
	.fnend
	.size	gsdio_alloc_req, .-gsdio_alloc_req
	.align	2
	.global	gsdio_free_requests
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_free_requests, %function
gsdio_free_requests:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1]
	cmp	r1, r4
	beq	.L17498
	mov	r5, r1
	mov	r6, r0
.L17500:
	mov	r0, r4
	sub	r7, r4, #36
	bl	list_del
	ldr	r0, [r4, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r4, [r5]
	cmp	r5, r4
	bne	.L17500
.L17498:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	gsdio_free_requests, .-gsdio_free_requests
	.set	gsmd_free_requests,gsdio_free_requests
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_notify, %function
gsmd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r1, r1, #1
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r5, [r0, #72]
	cmp	r1, #3
	ldrls	pc, [pc, r1, asl #2]
	b	.L17503
.L17506:
	.word	.L17505
	.word	.L17507
	.word	.L17508
	.word	.L17509
.L17509:
	ldr	r0, [r5]
	bl	smd_tiocmget
	ands	r1, r0, #128
	movne	r1, #8
	movne	r3, #9
	moveq	r3, #1
	tst	r0, #64
	movne	r1, r3
	tst	r0, #256
	ldr	r0, [r4, #68]
	orrne	r1, r1, #2
	str	r1, [r4, #164]
	cmp	r0, #0
	beq	.L17503
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L17503
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	bx	r3
.L17508:
	ldr	r0, .L17588
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L17579
.L17519:
	add	r1, r5, #8
	mov	r0, #0
	add	r8, r4, #4
	bl	_clear_bit
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L17580
	ldr	r7, [r3, #88]
	mov	r1, r0
	mov	r0, r8
	ldr	r6, [r3, #92]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L17521
	mov	r0, r7
	blx	r3
.L17521:
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L17522
	mov	r0, r6
	blx	r3
.L17522:
	mov	r0, r8
	bl	_raw_spin_lock
	ldr	r0, [r4, #68]
	cmp	r0, #0
	beq	.L17523
	ldr	r5, [r4, #12]
	add	r9, r4, #12
	cmp	r5, r9
	beq	.L17524
.L17525:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r10
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #12]
	cmp	r9, r5
	bne	.L17525
.L17524:
	ldr	r5, [r4, #20]
	add	r9, r4, #20
	cmp	r5, r9
	beq	.L17526
.L17527:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r10
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #20]
	cmp	r9, r5
	bne	.L17527
.L17526:
	ldr	r5, [r4, #44]
	add	r9, r4, #44
	cmp	r9, r5
	beq	.L17528
.L17529:
	mov	r0, r5
	sub	r6, r5, #36
	bl	list_del
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r6
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #44]
	cmp	r9, r5
	bne	.L17529
.L17528:
	ldr	r0, [r4, #68]
	mov	r3, #0
	str	r3, [r4, #8]
	str	r3, [r4, #164]
.L17523:
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L17530
	ldr	r1, [r4, #164]
	blx	r3
.L17530:
	mov	r0, r8
	b	.L17578
.L17507:
	ldr	r6, .L17588+4
	ldrh	r3, [r6, #-14]
	tst	r3, #4
	bne	.L17581
.L17513:
	add	r1, r5, #8
	mov	r0, #0
	bl	_set_bit
	ldr	r3, .L17588+8
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L17582
.L17514:
	add	r5, r4, #4
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L17517
	ldr	r3, [r4, #72]
	add	r6, r4, #12
	ldr	r1, [r4, #160]
	ldr	r0, [r3]
	mvn	r2, r1
	bl	smd_tiocmset_from_cb
	ldr	r3, [r4, #68]
	movw	r2, #:lower16:gsmd_read_complete
	mov	r1, r6
	movt	r2, #:upper16:gsmd_read_complete
	ldr	r0, [r3, #92]
	bl	gsmd_alloc_requests.constprop.131
	cmp	r0, #0
	bne	.L17583
	ldr	r3, [r4, #68]
	movw	r2, #:lower16:gsmd_write_complete
	add	r1, r4, #44
	movt	r2, #:upper16:gsmd_write_complete
	ldr	r0, [r3, #88]
	bl	gsmd_alloc_requests.constprop.131
	cmp	r0, #0
	bne	.L17584
	mov	r0, r5
	bl	_raw_spin_unlock
	ldrd	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	gsmd_start_rx
.L17505:
	ldr	r0, .L17588+12
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L17585
.L17510:
	ldr	r0, [r5]
	bl	smd_read_avail
	cmp	r0, #0
	bne	.L17586
.L17511:
	ldr	r0, [r5]
	bl	smd_write_avail
	cmp	r0, #0
	bne	.L17587
.L17503:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L17583:
	movw	r0, #:lower16:.LC1297
	ldr	r1, .L17588+16
	movt	r0, #:upper16:.LC1297
	bl	printk
.L17517:
	mov	r0, r5
.L17578:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock
.L17586:
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #52
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3400]
	bl	queue_work_on
	b	.L17511
.L17587:
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #28
	ldrd	r4, [sp]
	movt	r3, #:upper16:.LANCHOR1
	ldrd	r6, [sp, #8]
	mov	r0, #4
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, [r3, #3400]
	b	queue_work_on
.L17580:
	mov	r1, r0
	ldrd	r4, [sp]
	mov	r0, r8
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L17579:
	movw	r1, #:lower16:.LC1299
	ldr	r2, .L17588+20
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1299
	bl	__dynamic_pr_debug
	b	.L17519
.L17581:
	movw	r1, #:lower16:.LC1295
	ldr	r2, .L17588+20
	sub	r0, r6, #32
	movt	r1, #:upper16:.LC1295
	bl	__dynamic_pr_debug
	b	.L17513
.L17585:
	movw	r1, #:lower16:.LC1294
	ldr	r2, .L17588+20
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1294
	bl	__dynamic_pr_debug
	b	.L17510
.L17582:
	movw	r1, #:lower16:.LC1296
	sub	r0, r6, #8
	ldr	r2, .L17588+16
	movt	r1, #:upper16:.LC1296
	mov	r3, r4
	bl	__dynamic_pr_debug
	b	.L17514
.L17584:
	ldr	r3, [r4, #68]
	mov	r1, r6
	ldr	r0, [r3, #92]
	bl	gsmd_free_requests
	movw	r0, #:lower16:.LC1298
	ldr	r1, .L17588+16
	movt	r0, #:upper16:.LC1298
	bl	printk
	b	.L17517
.L17589:
	.align	2
.L17588:
	.word	.LANCHOR8-2800
	.word	.LANCHOR8-2848
	.word	.LANCHOR8-2832
	.word	.LANCHOR8-2880
	.word	.LANCHOR5+1236
	.word	.LANCHOR5+1224
	.fnend
	.size	gsmd_notify, .-gsmd_notify
	.align	2
	.global	gsdio_alloc_requests
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_alloc_requests, %function
gsdio_alloc_requests:
	.fnstart
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L17612
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	mov	r6, r1
	strd	r8, [sp, #16]
	mov	r8, r3
	mov	r9, r2
	str	r10, [sp, #24]
	ldrh	r3, [ip, #-6]
	str	lr, [sp, #28]
	.pad #16
	sub	sp, sp, #16
	ldr	r10, [sp, #48]
	tst	r3, #4
	bne	.L17608
.L17591:
	cmp	r9, #0
	ble	.L17592
	mov	r5, #0
.L17598:
	ldr	r3, [r7, #8]
	mov	r1, #32
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	mov	r1, #32
	mov	r0, r8
	beq	.L17609
	str	r8, [r4, #4]
	bl	__kmalloc
	mov	r3, r0
	mov	r1, r6
	cmp	r3, #0
	add	r0, r4, #36
	str	r3, [r4]
	beq	.L17610
	str	r10, [r4, #28]
	add	r5, r5, #1
	ldr	r2, [r6]
	bl	__list_add
	cmp	r9, r5
	bne	.L17598
.L17592:
	mov	r0, #0
.L17590:
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L17608:
	movw	r1, #:lower16:.LC650
	sub	r0, ip, #24
	ldr	r2, .L17612+4
	movt	r1, #:upper16:.LC650
	mov	r3, r7
	stm	sp, {r6, r9}
	str	r8, [sp, #8]
	str	r10, [sp, #12]
	bl	__dynamic_pr_debug
	b	.L17591
.L17609:
	movw	r0, #:lower16:.LC651
	ldr	r1, .L17612+8
	movt	r0, #:upper16:.LC651
	bl	printk
.L17594:
	ldr	r0, .L17612+12
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L17611
.L17596:
	ldr	r3, [r6]
	cmp	r6, r3
	bne	.L17592
	mvn	r0, #11
	b	.L17590
.L17611:
	movw	r1, #:lower16:.LC653
	mov	r3, r5
	ldr	r2, .L17612+4
	movt	r1, #:upper16:.LC653
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L17596
.L17610:
	movw	r0, #:lower16:.LC652
	ldr	r1, .L17612+8
	movt	r0, #:upper16:.LC652
	bl	printk
	ldr	r3, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L17594
.L17613:
	.align	2
.L17612:
	.word	.LANCHOR8-2784
	.word	.LANCHOR5+1252
	.word	.LANCHOR5+1208
	.word	.LANCHOR8-2752
	.fnend
	.size	gsdio_alloc_requests, .-gsdio_alloc_requests
	.align	2
	.global	gsdio_start_rx
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_start_rx, %function
gsdio_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	subs	r4, r0, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #8
	sub	sp, sp, #8
	beq	.L17637
	ldr	r0, .L17644
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L17638
.L17616:
	add	r6, r4, #4
	mov	r0, r6
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L17639
	ldr	r2, [r4, #108]
	cmp	r2, #0
	beq	.L17640
	add	r8, r4, #12
	mov	r9, #2048
	ldr	r7, [r3, #92]
	b	.L17622
.L17624:
	bl	list_del
	str	r9, [r5, #-32]
	ldr	r3, [r4, #44]
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r4, #44]
	bl	_raw_spin_unlock_irq
	ldr	r3, [r7, #8]
	mov	r1, r10
	mov	r2, #32
	mov	r0, r7
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irq
	cmp	r10, #0
	bne	.L17641
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L17642
.L17622:
	ldr	r5, [r4, #12]
	cmp	r8, r5
	mov	r0, r5
	sub	r10, r5, #36
	bne	.L17624
	b	.L17619
.L17640:
	ldr	r0, .L17644+4
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L17643
.L17619:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irq
.L17639:
	ldr	r0, .L17644+8
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L17619
.L17636:
	movw	r1, #:lower16:.LC225
	ldr	r2, .L17644+12
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC225
	bl	__dynamic_pr_debug
	b	.L17619
.L17642:
	ldr	r0, .L17644+16
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L17619
	b	.L17636
.L17638:
	ldr	ip, [r4]
	movw	r1, #:lower16:.LC228
	mov	r3, r4
	movt	r1, #:upper16:.LC228
	ldr	r2, .L17644+12
	sub	r0, r0, #24
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L17616
.L17643:
	movw	r1, #:lower16:.LC1300
	ldr	r2, .L17644+12
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1300
	bl	__dynamic_pr_debug
	b	.L17619
.L17641:
	movw	r0, #:lower16:.LC116
	ldr	r3, [r4]
	mov	r2, r4
	ldr	r1, .L17644+12
	movt	r0, #:upper16:.LC116
	bl	printk
	mov	r2, r8
	mov	r0, r5
	ldr	r1, [r4, #16]
	bl	__list_add
	ldr	r3, [r4, #44]
	add	r3, r3, #1
	str	r3, [r4, #44]
	b	.L17619
.L17637:
	ldr	r1, .L17644+12
	movw	r0, #:lower16:.LC114
	movt	r0, #:upper16:.LC114
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L17645:
	.align	2
.L17644:
	.word	.LANCHOR8-2736
	.word	.LANCHOR8-2688
	.word	.LANCHOR8-2704
	.word	.LANCHOR5+1276
	.word	.LANCHOR8-2656
	.fnend
	.size	gsdio_start_rx, .-gsdio_start_rx
	.align	2
	.global	gsdio_rx_push
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_rx_push, %function
gsdio_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L17703
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #28
	strd	r8, [sp, #16]
	sub	r8, r0, #8
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r3, #-6]
	.pad #20
	sub	sp, sp, #20
	tst	r2, #4
	bne	.L17691
.L17647:
	sub	r6, r4, #24
	mov	r0, r6
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L17692
	ldr	r5, [r4, #-8]
	ldr	r9, [r3, #92]
	cmp	r8, r5
	beq	.L17650
	ldr	r3, [r5, #8]
	cmn	r3, #108
	beq	.L17652
	cmp	r3, #0
	bne	.L17693
.L17653:
	ldr	r3, [r4, #80]
	sub	r10, r5, #36
	cmp	r3, #0
	beq	.L17694
	mov	r0, r5
	bl	list_del
	ldr	r3, [r4, #20]
	cmp	r7, #0
	sub	r3, r3, #1
	str	r3, [r4, #20]
	beq	.L17695
	cmp	r10, #0
	beq	.L17696
	ldr	fp, .L17703+4
	ldrh	r3, [fp, #-14]
	tst	r3, #4
	bne	.L17697
.L17658:
	ldr	r3, [r4, #80]
	cmp	r3, #0
	beq	.L17698
	ldr	fp, .L17703+8
	ldrh	r3, [fp, #-14]
	tst	r3, #4
	bne	.L17699
.L17660:
	ldr	r3, [r5, #12]
	cmp	r3, #0
	bne	.L17661
	ldr	r3, .L17703+12
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L17700
.L17662:
	mov	r3, #0
	str	r3, [r4, #-20]
.L17656:
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L17701
	mov	r1, r8
	mov	r0, r5
	ldr	r2, [r4, #-8]
	bl	__list_add
	ldr	r3, [r4, #20]
	add	r3, r3, #1
	str	r3, [r4, #20]
.L17650:
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gsdio_start_rx
.L17652:
	ldr	r0, .L17703+16
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L17650
	movw	r1, #:lower16:.LC1303
	ldr	r3, [r4, #-28]
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1303
	ldr	r2, .L17703+20
	str	r7, [sp]
	bl	__dynamic_pr_debug
	b	.L17650
.L17698:
	ldr	r3, .L17703+24
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	beq	.L17656
	movw	r1, #:lower16:.LC1307
	sub	r0, fp, #8
	ldr	r2, .L17703+28
	movt	r1, #:upper16:.LC1307
	bl	__dynamic_pr_debug
	b	.L17656
.L17692:
	ldr	r0, .L17703+32
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L17702
.L17690:
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq
.L17691:
	ldr	ip, [r4, #-28]
	movw	r1, #:lower16:.LC1301
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC1301
	ldr	r2, .L17703+20
	mov	r3, r7
	str	ip, [sp]
	str	r8, [sp, #4]
	bl	__dynamic_pr_debug
	b	.L17647
.L17697:
	ldr	lr, [r4, #-28]
	movw	r1, #:lower16:.LC1306
	mov	r3, r7
	ldr	ip, [r4, #-20]
	movt	r1, #:upper16:.LC1306
	sub	r0, fp, #32
	ldr	r2, .L17703+28
	str	ip, [sp, #12]
	ldr	ip, [r5, #12]
	str	lr, [sp]
	stmib	sp, {r10, ip}
	bl	__dynamic_pr_debug
	b	.L17658
.L17699:
	movw	r1, #:lower16:.LC1308
	mvn	r3, #18
	ldr	r2, .L17703+28
	movt	r1, #:upper16:.LC1308
	sub	r0, fp, #32
	bl	__dynamic_pr_debug
	b	.L17660
.L17700:
	movw	r1, #:lower16:.LC1309
	sub	r0, fp, #8
	ldr	r2, .L17703+28
	movt	r1, #:upper16:.LC1309
	bl	__dynamic_pr_debug
	b	.L17662
.L17702:
	movw	r1, #:lower16:.LC1302
	ldr	r2, .L17703+20
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1302
	bl	__dynamic_pr_debug
	b	.L17690
.L17701:
	str	r3, [r4, #-20]
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r9, #8]
	mov	r1, r10
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	b	.L17690
.L17693:
	movw	r0, #:lower16:.LC336
	mov	r2, r7
	ldr	r1, .L17703+20
	str	r3, [sp]
	movt	r0, #:upper16:.LC336
	ldr	r3, [r4, #-28]
	bl	printk
	b	.L17653
.L17694:
	movw	r0, #:lower16:.LC1304
	ldr	r1, .L17703+20
	movt	r0, #:upper16:.LC1304
	bl	printk
	mov	r0, r5
	bl	__list_del_entry
	ldr	r2, [r4, #-16]
	mov	r0, r5
	sub	r1, r4, #16
	bl	__list_add
	ldrd	r2, [r4, #16]
	add	r2, r2, #1
	sub	r3, r3, #1
	strd	r2, [r4, #16]
	b	.L17650
.L17696:
	movw	r0, #:lower16:.LC1305
	ldr	r1, .L17703+28
	ldr	r2, [r4, #-28]
	movt	r0, #:upper16:.LC1305
	bl	printk
	b	.L17656
.L17695:
	movw	r0, #:lower16:.LC114
	ldr	r1, .L17703+28
	movt	r0, #:upper16:.LC114
	bl	printk
	b	.L17656
.L17661:
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	mov	r0, r6
	bl	_raw_spin_lock_irq
	movw	r0, #:lower16:.LC1310
	mvn	r3, #18
	ldr	r1, .L17703+28
	ldr	r2, [r4, #-28]
	movt	r0, #:upper16:.LC1310
	bl	printk
	b	.L17656
.L17704:
	.align	2
.L17703:
	.word	.LANCHOR8-2640
	.word	.LANCHOR8-2560
	.word	.LANCHOR8-2512
	.word	.LANCHOR8-2496
	.word	.LANCHOR8-2592
	.word	.LANCHOR5+1292
	.word	.LANCHOR8-2544
	.word	.LANCHOR5+1308
	.word	.LANCHOR8-2608
	.fnend
	.size	gsdio_rx_push, .-gsdio_rx_push
	.align	2
	.global	gsdio_write
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_write, %function
gsdio_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r4, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #16
	sub	sp, sp, #16
	beq	.L17727
	cmp	r1, #0
	mov	r5, r1
	beq	.L17728
	ldr	r6, .L17733
	ldrh	r3, [r6, #-14]
	tst	r3, #4
	bne	.L17729
.L17709:
	ldr	r3, [r4, #108]
	cmp	r3, #0
	beq	.L17730
	ldr	r6, .L17733+4
	ldrh	r3, [r6, #-14]
	tst	r3, #4
	bne	.L17731
.L17711:
	ldr	r3, [r5, #48]
	cmp	r3, #0
	bne	.L17712
	ldr	r3, .L17733+8
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L17732
.L17713:
	mov	r3, #0
	str	r3, [r4, #8]
.L17707:
	mvn	r0, #18
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L17730:
	ldr	r3, .L17733+12
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	beq	.L17707
	movw	r1, #:lower16:.LC1307
	sub	r0, r6, #8
	ldr	r2, .L17733+16
	movt	r1, #:upper16:.LC1307
	bl	__dynamic_pr_debug
	b	.L17707
.L17729:
	ldr	lr, [r4, #8]
	str	r5, [sp, #4]
	movw	r1, #:lower16:.LC1306
	ldr	ip, [r5, #48]
	movt	r1, #:upper16:.LC1306
	mov	r3, r4
	ldr	r2, .L17733+16
	sub	r0, r6, #32
	str	ip, [sp, #8]
	str	lr, [sp, #12]
	ldr	ip, [r4]
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L17709
.L17731:
	movw	r1, #:lower16:.LC1308
	mvn	r3, #18
	ldr	r2, .L17733+16
	movt	r1, #:upper16:.LC1308
	sub	r0, r6, #32
	bl	__dynamic_pr_debug
	b	.L17711
.L17732:
	movw	r1, #:lower16:.LC1309
	sub	r0, r6, #8
	ldr	r2, .L17733+16
	movt	r1, #:upper16:.LC1309
	bl	__dynamic_pr_debug
	b	.L17713
.L17727:
	movw	r0, #:lower16:.LC114
	ldr	r1, .L17733+16
	movt	r0, #:upper16:.LC114
	bl	printk
	b	.L17707
.L17728:
	movw	r0, #:lower16:.LC1305
	ldr	r1, .L17733+16
	ldr	r2, [r4]
	movt	r0, #:upper16:.LC1305
	bl	printk
	b	.L17707
.L17712:
	add	r5, r4, #4
	mov	r0, r5
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	_raw_spin_lock_irq
	movw	r0, #:lower16:.LC1310
	mvn	r3, #18
	ldr	r1, .L17733+16
	ldr	r2, [r4]
	movt	r0, #:upper16:.LC1310
	bl	printk
	b	.L17707
.L17734:
	.align	2
.L17733:
	.word	.LANCHOR8-2560
	.word	.LANCHOR8-2512
	.word	.LANCHOR8-2496
	.word	.LANCHOR8-2544
	.word	.LANCHOR5+1308
	.fnend
	.size	gsdio_write, .-gsdio_write
	.align	2
	.global	gsdio_read_pending
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_read_pending, %function
gsdio_read_pending:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	beq	.L17744
	ldr	r3, [r0, #120]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L17745
	movw	r4, #:lower16:.LC1311
	strd	r6, [sp, #8]
	ldr	r7, .L17745+4
	movt	r4, #:upper16:.LC1311
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	sub	r6, r5, #32
.L17738:
	ldrh	r3, [r5, #-14]
	tst	r3, #4
	bne	.L17739
.L17740:
	b	.L17740
.L17739:
	mvn	r3, #18
	mov	r2, r7
	mov	r1, r4
	mov	r0, r6
	bl	__dynamic_pr_debug
	b	.L17738
.L17744:
	movw	r0, #:lower16:.LC114
	ldr	r1, .L17745+4
	movt	r0, #:upper16:.LC114
	b	printk
.L17746:
	.align	2
.L17745:
	.word	.LANCHOR8-2464
	.word	.LANCHOR5+1320
	.fnend
	.size	gsdio_read_pending, .-gsdio_read_pending
	.align	2
	.global	gsdio_tx_pull
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_tx_pull, %function
gsdio_tx_pull:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L17764
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #8
	strd	r8, [sp, #16]
	sub	r8, r0, #60
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r3, #-6]
	.pad #8
	sub	sp, sp, #8
	tst	r2, #4
	bne	.L17760
.L17748:
	ldr	r3, [r4, #36]
	cmp	r3, #0
	beq	.L17761
	sub	r5, r4, #56
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r7, [r4, #-8]
	cmp	r6, r7
	beq	.L17750
	ldr	r3, [r4, #48]
	cmp	r3, #0
	bne	.L17751
	ldr	r0, .L17764+4
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L17762
.L17750:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irq
.L17760:
	ldr	ip, [r4, #-60]
	movw	r1, #:lower16:.LC224
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC224
	ldr	r2, .L17764+8
	mov	r3, r8
	str	ip, [sp]
	str	r6, [sp, #4]
	bl	__dynamic_pr_debug
	b	.L17748
.L17762:
	movw	r1, #:lower16:.LC1313
	ldr	r2, .L17764+8
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1313
	bl	__dynamic_pr_debug
	b	.L17750
.L17761:
	ldr	r1, .L17764+8
	movw	r0, #:lower16:.LC1312
	movt	r0, #:upper16:.LC1312
	bl	printk
	mov	r0, r8
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	gsdio_read_pending
.L17751:
	ldr	r3, [r4, #36]
	mov	r0, r7
	sub	r10, r7, #36
	ldr	r9, [r3, #88]
	bl	list_del
	ldr	r3, [r4, #16]
	mov	r0, r5
	sub	r3, r3, #1
	str	r3, [r4, #16]
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	_raw_spin_lock_irq
	mvn	r1, #18
	movw	r0, #:lower16:.LC1314
	ldr	r3, [r4, #-60]
	mov	r2, r8
	movt	r0, #:upper16:.LC1314
	str	r1, [sp]
	ldr	r1, .L17764+8
	bl	printk
	ldr	r3, [r4, #36]
	cmp	r3, #0
	beq	.L17763
	mov	r1, r6
	mov	r0, r7
	ldr	r2, [r4, #-8]
	bl	__list_add
	ldr	r3, [r4, #16]
	add	r3, r3, #1
	str	r3, [r4, #16]
	b	.L17750
.L17763:
	ldr	r0, [r7, #-36]
	bl	kfree
	ldr	r3, [r9, #8]
	mov	r1, r10
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	b	.L17750
.L17765:
	.align	2
.L17764:
	.word	.LANCHOR8-2448
	.word	.LANCHOR8-2416
	.word	.LANCHOR5+1340
	.fnend
	.size	gsdio_tx_pull, .-gsdio_tx_pull
	.align	2
	.global	gsdio_start_io
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_start_io, %function
gsdio_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L17814
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r3, #-6]
	.pad #28
	sub	sp, sp, #28
	tst	r2, #4
	bne	.L17804
.L17767:
	add	r3, r4, #4
	mov	r0, r3
	str	r3, [sp, #16]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	str	r0, [sp, #20]
	cmp	r3, #0
	beq	.L17805
	ldr	fp, .L17814+4
	add	r8, r4, #12
	ldr	r6, [r3, #92]
	ldrh	r3, [fp, #-6]
	tst	r3, #4
	bne	.L17806
.L17770:
	movw	r7, #:lower16:kmalloc_caches
	movw	r10, #:lower16:gsdio_read_complete
	movt	r7, #:upper16:kmalloc_caches
	movt	r10, #:upper16:gsdio_read_complete
	mov	r5, #0
.L17784:
	ldr	r3, [r6, #8]
	mov	r1, #32
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r9, r0, #0
	mov	r3, #2048
	mov	r1, #32
	mov	r2, r3
	mov	ip, #16
	beq	.L17807
	str	r3, [r9, #4]
	ldr	r3, [r7, #44]
	subs	r0, r3, #0
	streq	ip, [r9]
	beq	.L17774
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r9]
	beq	.L17808
.L17774:
	str	r10, [r9, #28]
	add	r0, r9, #36
	add	r5, r5, #1
	mov	r1, r8
	ldr	r2, [r4, #12]
	bl	__list_add
	cmp	r5, #8
	bne	.L17784
.L17776:
	ldrh	r1, [fp, #-6]
	mov	r3, #8
	add	fp, r4, #52
	ldr	r2, [r4, #96]
	str	r3, [r4, #44]
	tst	r1, #4
	ldr	r6, [r2, #88]
	bne	.L17809
.L17777:
	movw	r7, #:lower16:kmalloc_caches
	movw	r10, #:lower16:gsdio_write_complete
	movt	r7, #:upper16:kmalloc_caches
	movt	r10, #:upper16:gsdio_write_complete
	mov	r5, #0
.L17785:
	ldr	r3, [r6, #8]
	mov	r1, #32
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r9, r0, #0
	mov	r3, #2048
	mov	r1, #32
	mov	r2, r3
	mov	ip, #16
	beq	.L17810
	str	r3, [r9, #4]
	ldr	r3, [r7, #44]
	subs	r0, r3, #0
	streq	ip, [r9]
	beq	.L17781
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r9]
	beq	.L17811
.L17781:
	str	r10, [r9, #28]
	add	r0, r9, #36
	add	r5, r5, #1
	mov	r1, fp
	ldr	r2, [r4, #52]
	bl	__list_add
	cmp	r5, #8
	bne	.L17785
.L17783:
	mov	r3, #8
	ldrd	r0, [sp, #16]
	str	r3, [r4, #76]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	bl	gsdio_start_rx
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #60
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3396]
	bl	queue_work_on
	mov	r0, #0
.L17766:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L17804:
	movw	r1, #:lower16:.LC267
	sub	r0, r3, #24
	ldr	r2, .L17814+8
	movt	r1, #:upper16:.LC267
	bl	__dynamic_pr_debug
	b	.L17767
.L17806:
	movw	ip, #:lower16:gsdio_read_complete
	mov	r3, #2048
	ldr	r2, .L17814+12
	movt	ip, #:upper16:gsdio_read_complete
	mov	r0, #8
	str	r8, [sp]
	movw	r1, #:lower16:.LC650
	stmib	sp, {r0, r3, ip}
	movt	r1, #:upper16:.LC650
	mov	r3, r6
	sub	r0, fp, #24
	bl	__dynamic_pr_debug
	b	.L17770
.L17809:
	movw	r2, #:lower16:gsdio_write_complete
	mov	r0, #2048
	str	fp, [sp]
	movt	r2, #:upper16:gsdio_write_complete
	movw	r1, #:lower16:.LC650
	str	r3, [sp, #4]
	movt	r1, #:upper16:.LC650
	str	r0, [sp, #8]
	mov	r3, r6
	str	r2, [sp, #12]
	ldr	r0, .L17814+16
	ldr	r2, .L17814+12
	bl	__dynamic_pr_debug
	b	.L17777
.L17805:
	mov	r1, r0
	ldr	r0, [sp, #16]
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #18
	b	.L17766
.L17810:
	movw	r0, #:lower16:.LC651
	ldr	r1, .L17814+20
	movt	r0, #:upper16:.LC651
	bl	printk
.L17779:
	ldr	r0, .L17814+24
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L17812
.L17782:
	ldr	r3, [r4, #52]
	cmp	fp, r3
	bne	.L17783
	ldr	r3, [r4, #96]
	mov	r1, r8
	ldr	r0, [r3, #92]
	bl	gsdio_free_requests
	mov	r3, #0
	ldrd	r0, [sp, #16]
	str	r3, [r4, #44]
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC1316
	ldr	r1, .L17814+8
	movt	r0, #:upper16:.LC1316
	bl	printk
	mvn	r0, #11
	b	.L17766
.L17812:
	movw	r1, #:lower16:.LC653
	mov	r3, r5
	ldr	r2, .L17814+12
	movt	r1, #:upper16:.LC653
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L17782
.L17808:
	movw	r0, #:lower16:.LC652
	ldr	r1, .L17814+20
	movt	r0, #:upper16:.LC652
	bl	printk
	ldr	r2, [r6, #8]
	mov	r1, r9
	mov	r0, r6
	ldr	r3, [r2, #12]
	blx	r3
.L17772:
	ldr	r0, .L17814+24
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L17813
.L17775:
	ldr	r3, [r4, #12]
	cmp	r8, r3
	bne	.L17776
	ldrd	r0, [sp, #16]
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC1315
	ldr	r1, .L17814+8
	movt	r0, #:upper16:.LC1315
	bl	printk
	mvn	r0, #11
	b	.L17766
.L17813:
	movw	r1, #:lower16:.LC653
	mov	r3, r5
	ldr	r2, .L17814+12
	movt	r1, #:upper16:.LC653
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L17775
.L17811:
	movw	r0, #:lower16:.LC652
	ldr	r1, .L17814+20
	movt	r0, #:upper16:.LC652
	bl	printk
	ldr	r2, [r6, #8]
	mov	r1, r9
	mov	r0, r6
	ldr	r3, [r2, #12]
	blx	r3
	b	.L17779
.L17807:
	movw	r0, #:lower16:.LC651
	ldr	r1, .L17814+20
	movt	r0, #:upper16:.LC651
	bl	printk
	b	.L17772
.L17815:
	.align	2
.L17814:
	.word	.LANCHOR8-2400
	.word	.LANCHOR8-2784
	.word	.LANCHOR5+1356
	.word	.LANCHOR5+1252
	.word	.LANCHOR8-2808
	.word	.LANCHOR5+1208
	.word	.LANCHOR8-2752
	.fnend
	.size	gsdio_start_io, .-gsdio_start_io
	.align	2
	.global	gsdio_port_free
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_port_free, %function
gsdio_port_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r2, r0
	mov	r3, #104
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r0, #:lower16:.LANCHOR1
	str	lr, [sp, #4]
	mul	r3, r3, r2
	movt	r0, #:upper16:.LANCHOR1
	add	r1, r0, r3
	ldr	r4, [r1, #24]
	cmp	r4, #0
	beq	.L17819
	add	r0, r1, #28
	bl	platform_driver_unregister
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
.L17819:
	movw	r0, #:lower16:.LC173
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC173
	add	sp, sp, #8
	ldr	r1, .L17820
	b	printk
.L17821:
	.align	2
.L17820:
	.word	.LANCHOR5+1372
	.fnend
	.size	gsdio_port_free, .-gsdio_port_free
	.align	2
	.global	gsdio_ctrl_modem_status
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ctrl_modem_status, %function
gsdio_ctrl_modem_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #1506
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movt	r3, #:upper16:.LANCHOR4
	str	lr, [sp, #8]
	mov	r4, r0
	ldrh	r2, [r3, r2]
	mov	r5, r1
	.pad #12
	sub	sp, sp, #12
	tst	r2, #4
	bne	.L17845
.L17823:
	ands	r1, r4, #128
	moveq	r3, #1
	streq	r1, [r5, #176]
	beq	.L17825
	mov	r2, #8
	mov	r3, #9
	mov	r1, r2
	str	r2, [r5, #176]
.L17825:
	tst	r4, #64
	ldr	r0, [r5, #96]
	movne	r1, r3
	strne	r3, [r5, #176]
	tst	r4, #256
	orrne	r1, r1, #2
	strne	r1, [r5, #176]
	cmp	r0, #0
	beq	.L17822
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L17822
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	bx	r3
.L17822:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L17845:
	ldr	ip, [r5]
	movw	r1, #:lower16:.LC930
	add	r0, r3, #1488
	movt	r1, #:upper16:.LC930
	ldr	r2, .L17846
	mov	r3, r5
	str	ip, [sp]
	str	r4, [sp, #4]
	bl	__dynamic_pr_debug
	b	.L17823
.L17847:
	.align	2
.L17846:
	.word	.LANCHOR5-1332
	.fnend
	.size	gsdio_ctrl_modem_status, .-gsdio_ctrl_modem_status
	.align	2
	.global	gsdio_ch_notify
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ch_notify, %function
gsdio_ch_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L17861
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r0
	str	lr, [sp, #8]
	mov	r4, r1
	.pad #12
	sub	sp, sp, #12
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L17859
.L17849:
	cmp	r4, #2
	movweq	r3, #:lower16:.LANCHOR1
	addeq	r2, r5, #28
	beq	.L17858
	cmp	r4, #1
	beq	.L17860
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L17860:
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r5, #60
.L17858:
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3396]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work_on
.L17859:
	ldr	lr, [r5]
	movw	r1, #:lower16:.LC1317
	cmp	r4, #1
	movt	r1, #:upper16:.LC1317
	movw	ip, #:lower16:.LC1318
	ldr	r2, .L17861+4
	movt	ip, #:upper16:.LC1318
	moveq	ip, r1
	movw	r1, #:lower16:.LC1319
	sub	r0, r3, #32
	movt	r1, #:upper16:.LC1319
	mov	r3, r5
	str	lr, [sp]
	str	ip, [sp, #4]
	bl	__dynamic_pr_debug
	b	.L17849
.L17862:
	.align	2
.L17861:
	.word	.LANCHOR8-2368
	.word	.LANCHOR5+1388
	.fnend
	.size	gsdio_ch_notify, .-gsdio_ch_notify
	.align	2
	.global	gsdio_port_alloc
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_port_alloc, %function
gsdio_port_alloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r2
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r3, #8]
	.pad #12
	sub	sp, sp, #12
	cmp	r0, #0
	beq	.L17867
	mov	r2, #192
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L17873
.L17864:
	mov	r6, #0
	str	r8, [r4]
	add	r2, r4, #20
	mov	r1, #65024
	movw	r9, #:lower16:gsdio_rx_push
	str	r6, [r4, #4]
	ldr	r3, [r5]	@ unaligned
	movw	lr, #:lower16:gsdio_tx_pull
	movw	r0, #:lower16:gsdio_ctrl_wq
	movw	ip, #:lower16:gsdio_open_work
	movt	r1, 65535
	movt	lr, #:upper16:gsdio_tx_pull
	movt	ip, #:upper16:gsdio_open_work
	movt	r0, #:upper16:gsdio_ctrl_wq
	str	r3, [r4, #100]
	ldrh	r3, [r5, #4]	@ unaligned
	movt	r9, #:upper16:gsdio_rx_push
	strh	r3, [r4, #104]	@ movhi
	ldrb	fp, [r5, #6]	@ zero_extendqisi2
	add	r5, r4, #12
	add	r3, r4, #32
	str	r5, [r4, #12]
	str	r5, [r4, #16]
	add	r5, r4, #52
	str	r2, [r4, #20]
	str	r2, [r4, #24]
	add	r2, r4, #64
	str	r1, [r4, #28]
	str	r3, [r4, #32]
	str	r3, [r4, #36]
	add	r3, r4, #84
	str	r5, [r4, #52]
	str	r5, [r4, #56]
	add	r5, r4, #128
	str	r9, [r4, #40]
	str	r1, [r4, #60]
	str	r2, [r4, #64]
	str	r2, [r4, #68]
	mov	r2, r6
	str	lr, [r4, #72]
	str	r1, [r4, #80]
	str	r3, [r4, #84]
	str	r3, [r4, #88]
	mov	r3, r6
	str	r0, [r4, #92]
	add	r0, r4, #140
	strb	fp, [r4, #106]
	str	r1, [r4, #124]
	mov	r1, r6
	str	r5, [r4, #128]
	str	r5, [r4, #132]
	mov	r5, #104
	str	ip, [r4, #136]
	bl	init_timer_key
	ldr	r0, .L17876
	mul	r5, r5, r8
	movw	r2, #:lower16:delayed_work_timer_fn
	movt	r2, #:upper16:delayed_work_timer_fn
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	movw	ip, #:lower16:gsdio_ch_probe
	movw	r1, #:lower16:gsdio_ch_remove
	str	r2, [r4, #156]
	movt	ip, #:upper16:gsdio_ch_probe
	add	r2, r3, r5
	movt	r1, #:upper16:gsdio_ch_remove
	ldrh	lr, [r0, #-6]
	add	r8, r4, #124
	add	r5, r2, #28
	str	r8, [r4, #160]
	str	r4, [r2, #24]
	tst	lr, #4
	str	r7, [r4, #120]
	str	ip, [r2, #28]
	str	r1, [r2, #32]
	ldr	r3, [r7]
	str	r3, [r2, #48]
	str	r6, [r2, #56]
	bne	.L17874
.L17866:
	mov	r0, r5
	bl	platform_driver_register
	ldr	r3, .L17876+4
	ldrh	r0, [r3, #-14]
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	bne	.L17875
.L17863:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L17867:
	mov	r4, #16
	b	.L17864
.L17875:
	ldr	ip, [r4]
	movw	r1, #:lower16:.LC228
	sub	r0, r3, #32
	movt	r1, #:upper16:.LC228
	mov	r3, r4
	ldr	r2, .L17876+8
	str	ip, [sp]
	bl	__dynamic_pr_debug
	mov	r0, #0
	b	.L17863
.L17874:
	ldr	ip, [r7]
	movw	r1, #:lower16:.LC1321
	mov	r3, r4
	movt	r1, #:upper16:.LC1321
	ldr	r2, .L17876+8
	sub	r0, r0, #24
	str	ip, [sp, #4]
	ldr	ip, [r4]
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L17866
.L17873:
	movw	r0, #:lower16:.LC1320
	ldr	r1, .L17876+8
	movt	r0, #:upper16:.LC1320
	bl	printk
	mvn	r0, #11
	b	.L17863
.L17877:
	.align	2
.L17876:
	.word	.LANCHOR8-2352
	.word	.LANCHOR8-2320
	.word	.LANCHOR5+1404
	.fnend
	.size	gsdio_port_alloc, .-gsdio_port_alloc
	.align	2
	.global	gsdio_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_connect, %function
gsdio_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r3]
	cmp	r1, r2
	bcs	.L17894
	cmp	r0, #0
	mov	r4, r0
	beq	.L17895
	mov	r2, #104
	mla	r1, r2, r1, r3
	ldr	r5, [r1, #24]
	add	r6, r5, #4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	movw	r3, #:lower16:gsdio_ctrl_notify_modem
	mov	r1, r0
	str	r4, [r5, #96]
	movt	r3, #:upper16:gsdio_ctrl_notify_modem
	mov	r0, r6
	str	r3, [r4, #140]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L17896
	ldr	r3, [r4, #88]
	str	r5, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L17897
	ldr	r3, [r4, #92]
	str	r5, [r3]
	ldr	r3, [r5, #108]
	cmp	r3, #0
	beq	.L17878
	ldr	r0, .L17899
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L17898
.L17885:
	mov	r0, r5
	bl	gsdio_start_io
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L17878
	mov	r0, r4
	ldr	r1, [r5, #176]
	blx	r3
.L17878:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L17898:
	movw	r1, #:lower16:.LC1323
	ldr	r2, .L17899+4
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1323
	bl	__dynamic_pr_debug
	b	.L17885
.L17894:
	movw	r0, #:lower16:.LC173
	mov	r2, r1
	ldr	r1, .L17899+4
	movt	r0, #:upper16:.LC173
	mvn	r6, #21
	bl	printk
	b	.L17878
.L17897:
	movw	r0, #:lower16:.LC1322
	mov	r2, r6
	ldr	r1, .L17899+4
	movt	r0, #:upper16:.LC1322
	bl	printk
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	str	r3, [r5, #96]
	ldr	r2, [r4, #88]
	str	r3, [r2]
	b	.L17878
.L17896:
	movw	r0, #:lower16:.LC1322
	mov	r2, r6
	ldr	r1, .L17899+4
	movt	r0, #:upper16:.LC1322
	bl	printk
	mov	r3, #0
	str	r3, [r5, #96]
	b	.L17878
.L17895:
	movw	r0, #:lower16:.LC174
	ldr	r1, .L17899+4
	mvn	r6, #21
	movt	r0, #:upper16:.LC174
	bl	printk
	b	.L17878
.L17900:
	.align	2
.L17899:
	.word	.LANCHOR8-2304
	.word	.LANCHOR5+1424
	.fnend
	.size	gsdio_connect, .-gsdio_connect
	.align	2
	.global	gsdio_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_disconnect, %function
gsdio_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3]
	cmp	r1, r2
	bcs	.L17915
	cmp	r0, #0
	beq	.L17916
	mov	ip, #104
	mov	r2, r1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r5, #0
	strd	r8, [sp, #16]
	mov	r9, r0
	mov	r0, #4
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r1, [r3, #3396]
	mla	r3, ip, r2, r3
	.pad #4
	sub	sp, sp, #4
	ldr	r4, [r3, #24]
	add	r2, r4, #80
	add	r7, r4, r0
	str	r5, [r4, #180]
	bl	queue_work_on
	mov	r0, r7
	add	r10, r4, #12
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #96]
	mov	r0, r7
	str	r5, [r4, #184]
	str	r5, [r4, #188]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r9, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r9, #92]
	str	r5, [r3]
	ldr	r0, [r9, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r9, #88]
	mov	r0, r7
	str	r5, [r3]
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #12]
	mov	r8, r0
	ldr	r6, [r9, #92]
	cmp	r10, r5
	beq	.L17904
.L17905:
	mov	r0, r5
	sub	fp, r5, #36
	bl	list_del
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, fp
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #12]
	cmp	r10, r5
	bne	.L17905
	ldr	r6, [r9, #92]
.L17904:
	ldr	r5, [r4, #20]
	add	r10, r4, #20
	cmp	r10, r5
	beq	.L17906
.L17907:
	mov	r0, r5
	sub	fp, r5, #36
	bl	list_del
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, fp
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #20]
	cmp	r10, r5
	bne	.L17907
.L17906:
	ldr	r5, [r4, #52]
	add	r10, r4, #52
	ldr	r6, [r9, #88]
	cmp	r10, r5
	beq	.L17908
.L17909:
	mov	r0, r5
	sub	r9, r5, #36
	bl	list_del
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r9
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #52]
	cmp	r10, r5
	bne	.L17909
.L17908:
	mov	r3, #0
	mov	r1, r8
	mov	r0, r7
	str	r3, [r4, #8]
	str	r3, [r4, #44]
	str	r3, [r4, #48]
	str	r3, [r4, #76]
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L17915:
	movw	r0, #:lower16:.LC173
	mov	r2, r1
	ldr	r1, .L17917
	movt	r0, #:upper16:.LC173
	b	printk
.L17916:
	movw	r0, #:lower16:.LC174
	ldr	r1, .L17917
	movt	r0, #:upper16:.LC174
	b	printk
.L17918:
	.align	2
.L17917:
	.word	.LANCHOR5+1440
	.fnend
	.size	gsdio_disconnect, .-gsdio_disconnect
	.align	2
	.global	gsdio_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_setup, %function
gsdio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L17954
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	str	r1, [sp, #12]
	ldrh	r1, [r2, #-14]
	tst	r1, #4
	bne	.L17945
.L17920:
	ldr	r3, [sp, #12]
	sub	r3, r3, #1
	cmp	r3, #1
	bhi	.L17946
	movw	r2, #:lower16:.LC963
	mov	r7, #0
	movt	r2, #:upper16:.LC963
	mov	r1, #10
	movw	r0, #:lower16:.LC84
	mov	r3, r7
	str	r7, [sp]
	str	r2, [sp, #4]
	movt	r1, 2
	movt	r0, #:upper16:.LC84
	mov	r2, #1
	movw	r9, #:lower16:.LANCHOR1
	bl	__alloc_workqueue_key
	movt	r9, #:upper16:.LANCHOR1
	cmp	r0, r7
	str	r0, [r9, #3396]
	beq	.L17947
	movw	r10, #:lower16:kmalloc_caches
	ldr	r8, .L17954+4
	add	r5, r9, #4
	movt	r10, #:upper16:kmalloc_caches
	b	.L17930
.L17952:
	mov	r2, #192
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L17948
.L17924:
	movw	r0, #:lower16:gsdio_tx_pull
	add	fp, r4, #12
	str	r7, [r4]
	movt	r0, #:upper16:gsdio_tx_pull
	movw	r2, #:lower16:gsdio_rx_push
	str	fp, [r4, #12]
	movt	r2, #:upper16:gsdio_rx_push
	mov	r1, #65024
	str	fp, [r4, #16]
	add	fp, r4, #20
	movw	r3, #:lower16:gsdio_ctrl_wq
	movw	ip, #:lower16:gsdio_open_work
	mov	r6, #0
	str	r0, [r4, #72]
	add	r0, r4, #32
	movt	r1, 65535
	movt	r3, #:upper16:gsdio_ctrl_wq
	movt	ip, #:upper16:gsdio_open_work
	str	r6, [r4, #4]
	str	fp, [r4, #20]
	mov	lr, #9600
	str	fp, [r4, #24]
	add	fp, r4, #52
	str	r2, [r4, #40]
	mov	r2, #8
	str	r0, [r4, #32]
	str	r0, [r4, #36]
	add	r0, r4, #64
	str	r1, [r4, #28]
	str	fp, [r4, #52]
	str	fp, [r4, #56]
	add	fp, r4, #84
	str	r1, [r4, #60]
	str	r0, [r4, #64]
	str	r0, [r4, #68]
	add	r0, r4, #128
	str	r1, [r4, #80]
	str	fp, [r4, #84]
	str	fp, [r4, #88]
	add	fp, r5, #24
	str	r3, [r4, #92]
	mov	r3, r6
	str	lr, [r4, #100]
	strh	r2, [r4, #104]	@ movhi
	mov	r2, r6
	strb	r6, [r4, #106]
	str	r1, [r4, #124]
	mov	r1, r6
	str	r0, [r4, #128]
	str	r0, [r4, #132]
	add	r0, r4, #140
	str	ip, [r4, #136]
	bl	init_timer_key
	ldr	r0, .L17954+8
	movw	r1, #:lower16:delayed_work_timer_fn
	add	r3, r4, #124
	movt	r1, #:upper16:delayed_work_timer_fn
	movw	r2, #:lower16:gsdio_ch_probe
	movt	r2, #:upper16:gsdio_ch_probe
	str	r1, [r4, #156]
	ldrh	r0, [r0]
	str	r3, [r4, #160]
	movw	r3, #:lower16:gsdio_ch_remove
	str	r4, [r5, #20]
	movt	r3, #:upper16:gsdio_ch_remove
	str	r8, [r4, #120]
	ldr	r1, [r8]
	str	r2, [r5, #24]
	tst	r0, #4
	str	r3, [r5, #28]
	str	r1, [r5, #44]
	str	r6, [r5, #52]
	bne	.L17949
.L17927:
	mov	r0, fp
	bl	platform_driver_register
	ldr	r0, .L17954+12
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L17950
	ldr	r3, [r9]
	add	r3, r3, #1
	str	r3, [r9]
.L17929:
	ldr	r3, [sp, #12]
	add	r7, r7, #1
	add	r5, r5, #104
	add	r8, r8, #12
	cmp	r7, r3
	beq	.L17951
.L17930:
	movw	r1, #:lower16:.LC1327
	mov	r0, r5
	ldr	r2, .L17954+16
	movt	r1, #:upper16:.LC1327
	bl	__mutex_init
	ldr	r0, [r10, #8]
	cmp	r0, #0
	bne	.L17952
	mov	r4, #16
	b	.L17924
.L17950:
	ldr	ip, [r4]
	movw	r1, #:lower16:.LC228
	mov	r3, r4
	sub	r0, r0, #18
	movt	r1, #:upper16:.LC228
	ldr	r2, .L17954+20
	str	ip, [sp]
	bl	__dynamic_pr_debug
	ldr	r3, [r9]
	add	r3, r3, #1
	str	r3, [r9]
	b	.L17929
.L17949:
	str	r1, [sp, #4]
	ldr	ip, [r4]
	movw	r1, #:lower16:.LC1321
	mov	r3, r4
	ldr	r2, .L17954+20
	movt	r1, #:upper16:.LC1321
	ldr	r0, .L17954+24
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L17927
.L17951:
	movw	r0, #:lower16:.LC1329
	mov	r1, #0
	movt	r0, #:upper16:.LC1329
	bl	debugfs_create_dir
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L17936
	ldr	ip, .L17954+28
	movw	r0, #:lower16:.LC250
	mov	r3, #0
	movt	r0, #:upper16:.LC250
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	mov	r0, #0
.L17919:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L17945:
	ldr	r3, [sp, #12]
	movw	r1, #:lower16:.LC1324
	movt	r1, #:upper16:.LC1324
	str	r3, [sp]
	mov	r3, r0
	sub	r0, r2, #32
	ldr	r2, .L17954+32
	bl	__dynamic_pr_debug
	b	.L17920
.L17936:
	mov	r0, #0
	b	.L17919
.L17948:
	movw	r0, #:lower16:.LC1320
	ldr	r1, .L17954+20
	movt	r0, #:upper16:.LC1320
	bl	printk
	movw	r0, #:lower16:.LC1328
	ldr	r1, .L17954+32
	movt	r0, #:upper16:.LC1328
	bl	printk
	ldr	r3, [r9]
	cmp	r3, #0
	beq	.L17926
	ldr	r4, [r9, #24]
	cmp	r4, #0
	beq	.L17931
	add	r0, r9, #28
	bl	platform_driver_unregister
	mov	r0, r4
	bl	kfree
.L17932:
	ldr	r3, [r9]
	cmp	r3, #1
	bls	.L17926
	ldr	r4, [r9, #128]
	cmp	r4, #0
	beq	.L17953
	ldr	r0, .L17954+36
	bl	platform_driver_unregister
	mov	r0, r4
	bl	kfree
.L17926:
	ldr	r0, [r9, #3396]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L17919
.L17947:
	movw	r0, #:lower16:.LC1326
	ldr	r1, .L17954+32
	movt	r0, #:upper16:.LC1326
	bl	printk
	mvn	r0, #11
	b	.L17919
.L17946:
	movw	r0, #:lower16:.LC1325
	ldr	r1, .L17954+32
	mov	r3, #2
	movt	r0, #:upper16:.LC1325
	ldr	r2, [sp, #12]
	bl	printk
	mvn	r0, #21
	b	.L17919
.L17953:
	movw	r0, #:lower16:.LC173
	mov	r2, #1
	ldr	r1, .L17954+40
	movt	r0, #:upper16:.LC173
	bl	printk
	b	.L17926
.L17931:
	movw	r0, #:lower16:.LC173
	mov	r2, r4
	ldr	r1, .L17954+40
	movt	r0, #:upper16:.LC173
	bl	printk
	b	.L17932
.L17955:
	.align	2
.L17954:
	.word	.LANCHOR8-2272
	.word	.LANCHOR7-1380
	.word	.LANCHOR8-2358
	.word	.LANCHOR8-2334
	.word	.LANCHOR1+4048
	.word	.LANCHOR5+1404
	.word	.LANCHOR8-2376
	.word	.LANCHOR5+1472
	.word	.LANCHOR5+1460
	.word	.LANCHOR1+132
	.word	.LANCHOR5+1372
	.fnend
	.size	gsdio_setup, .-gsdio_setup
	.align	2
	.global	gsmd_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_connect, %function
gsmd_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L17972
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r5, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L17967
.L17957:
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r3, [r6, #212]
	cmp	r5, r3
	bcs	.L17968
	cmp	r4, #0
	beq	.L17969
	mov	r3, #104
	mov	r7, #0
	mla	r5, r3, r5, r6
	ldr	r5, [r5, #236]
	add	r8, r5, #4
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	movw	r3, #:lower16:gsmd_notify_modem
	mov	r1, r0
	str	r4, [r5, #68]
	movt	r3, #:upper16:gsmd_notify_modem
	mov	r0, r8
	str	r3, [r4, #140]
	str	r7, [r5, #168]
	str	r7, [r5, #172]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r8, r0, #0
	bne	.L17970
	ldr	r3, [r4, #88]
	str	r5, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r8, r0, #0
	bne	.L17971
	ldr	r3, [r4, #92]
	ldr	r4, [r6, #3400]
	str	r5, [r3]
	bl	msecs_to_jiffies
	mov	r3, r0
	mov	r1, r4
	mov	r0, #4
	add	r2, r5, #76
	bl	queue_delayed_work_on
.L17956:
	mov	r0, r8
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L17967:
	movw	r1, #:lower16:.LC1330
	sub	r0, r3, #24
	ldr	r2, .L17972+4
	movt	r1, #:upper16:.LC1330
	mov	r3, r4
	str	r5, [sp]
	bl	__dynamic_pr_debug
	b	.L17957
.L17968:
	movw	r0, #:lower16:.LC1331
	mov	r2, r5
	ldr	r1, .L17972+4
	movt	r0, #:upper16:.LC1331
	mvn	r8, #21
	bl	printk
	b	.L17956
.L17971:
	movw	r0, #:lower16:.LC922
	ldr	r1, .L17972+4
	movt	r0, #:upper16:.LC922
	ldr	r2, [r4, #92]
	bl	printk
	str	r7, [r5, #68]
	ldr	r3, [r4, #88]
	str	r7, [r3]
	b	.L17956
.L17970:
	movw	r0, #:lower16:.LC921
	ldr	r1, .L17972+4
	movt	r0, #:upper16:.LC921
	ldr	r2, [r4, #88]
	bl	printk
	str	r7, [r5, #68]
	b	.L17956
.L17969:
	movw	r0, #:lower16:.LC174
	ldr	r1, .L17972+4
	mvn	r8, #21
	movt	r0, #:upper16:.LC174
	bl	printk
	b	.L17956
.L17973:
	.align	2
.L17972:
	.word	.LANCHOR8-2256
	.word	.LANCHOR5+1580
	.fnend
	.size	gsmd_connect, .-gsmd_connect
	.align	2
	.global	gsmd_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_disconnect, %function
gsmd_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18000
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r3, #-14]
	.pad #20
	sub	sp, sp, #20
	tst	r2, #4
	bne	.L17996
.L17975:
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	ldr	r3, [r7, #212]
	cmp	r4, r3
	bcs	.L17997
	cmp	r6, #0
	beq	.L17998
	mov	r3, #104
	mov	r9, #0
	mla	r4, r3, r4, r7
	ldr	r5, [r4, #236]
	add	r8, r5, #4
	add	fp, r5, #12
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r9, [r5, #68]
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r6, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r6, #92]
	str	r9, [r3]
	ldr	r0, [r6, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r6, #88]
	mov	r0, r8
	str	r9, [r3]
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #12]
	str	r0, [sp, #12]
	ldr	r10, [r6, #92]
	cmp	r4, fp
	beq	.L17978
.L17979:
	mov	r0, r4
	sub	r9, r4, #36
	bl	list_del
	ldr	r0, [r4, #-36]
	bl	kfree
	ldr	r3, [r10, #8]
	mov	r1, r9
	mov	r0, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r4, [r5, #12]
	cmp	fp, r4
	bne	.L17979
	ldr	r10, [r6, #92]
.L17978:
	ldr	r4, [r5, #20]
	add	fp, r5, #20
	cmp	fp, r4
	beq	.L17980
.L17981:
	mov	r0, r4
	sub	r9, r4, #36
	bl	list_del
	ldr	r0, [r4, #-36]
	bl	kfree
	ldr	r3, [r10, #8]
	mov	r1, r9
	mov	r0, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r4, [r5, #20]
	cmp	fp, r4
	bne	.L17981
.L17980:
	ldr	r4, [r5, #44]
	add	r10, r5, #44
	ldr	r6, [r6, #88]
	cmp	r4, r10
	beq	.L17982
.L17983:
	mov	r0, r4
	sub	fp, r4, #36
	bl	list_del
	ldr	r0, [r4, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, fp
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r4, [r5, #44]
	cmp	r10, r4
	bne	.L17983
.L17982:
	mov	r4, #0
	mov	r0, r8
	ldr	r1, [sp, #12]
	str	r4, [r5, #8]
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r5, #72]
	mov	r0, r4
	add	r1, r1, #8
	bl	_test_and_clear_bit
	cmp	r0, r4
	bne	.L17999
.L17984:
	ldr	r3, [r5, #72]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L17974
	ldr	r1, [r7, #3400]
	add	r2, r5, #128
	mov	r0, #4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work_on
.L17974:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L17999:
	ldr	r3, [r5, #72]
	str	r4, [r5, #160]
	mov	r1, r4
	mvn	r2, #0
	ldr	r0, [r3]
	bl	smd_tiocmset
	b	.L17984
.L17996:
	movw	r1, #:lower16:.LC1330
	sub	r0, r3, #32
	ldr	r2, .L18000+4
	movt	r1, #:upper16:.LC1330
	mov	r3, r6
	str	r4, [sp]
	bl	__dynamic_pr_debug
	b	.L17975
.L17997:
	ldr	r1, .L18000+4
	movw	r0, #:lower16:.LC173
	mov	r2, r4
	movt	r0, #:upper16:.LC173
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L17998:
	ldr	r1, .L18000+4
	movw	r0, #:lower16:.LC174
	movt	r0, #:upper16:.LC174
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L18001:
	.align	2
.L18000:
	.word	.LANCHOR8-2224
	.word	.LANCHOR5+1596
	.fnend
	.size	gsmd_disconnect, .-gsmd_disconnect
	.align	2
	.global	gsmd_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_setup, %function
gsmd_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18033
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r3, #-6]
	.pad #28
	sub	sp, sp, #28
	str	r1, [sp, #12]
	tst	r2, #4
	bne	.L18024
.L18003:
	ldr	r3, [sp, #12]
	sub	r3, r3, #1
	cmp	r3, #1
	bhi	.L18025
	movw	r2, #:lower16:.LC1334
	mov	r7, #0
	movt	r2, #:upper16:.LC1334
	mov	r1, #10
	movw	r0, #:lower16:.LC84
	mov	r3, r7
	str	r7, [sp]
	str	r2, [sp, #4]
	movt	r1, 2
	movt	r0, #:upper16:.LC84
	mov	r2, #1
	movw	r10, #:lower16:.LANCHOR1
	bl	__alloc_workqueue_key
	movt	r10, #:upper16:.LANCHOR1
	cmp	r0, r7
	str	r0, [r10, #3400]
	beq	.L18026
	movw	r3, #:lower16:kmalloc_caches
	movw	r2, #:lower16:.LC1336
	ldr	r9, .L18033+4
	movt	r3, #:upper16:kmalloc_caches
	movt	r2, #:upper16:.LC1336
	mov	r8, #65024
	add	r5, r10, #216
	movt	r8, 65535
	str	r3, [sp, #16]
	str	r2, [sp, #20]
	b	.L18011
.L18030:
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L18027
.L18007:
	movw	r3, #:lower16:gsmd_rx_push
	add	r0, r4, #12
	str	r7, [r4]
	movt	r3, #:upper16:gsmd_rx_push
	movw	r1, #:lower16:gsmd_tx_pull
	str	r6, [r4, #4]
	movw	ip, #:lower16:gsmd_connect_work
	add	lr, r4, #32
	str	r0, [r4, #12]
	movt	ip, #:upper16:gsmd_connect_work
	add	r2, r4, #56
	str	r0, [r4, #16]
	movt	r1, #:upper16:gsmd_tx_pull
	add	r0, r4, #80
	str	r8, [r4, #28]
	add	fp, r4, #20
	str	r3, [r4, #40]
	add	r3, r4, #44
	str	fp, [r4, #20]
	str	fp, [r4, #24]
	str	lr, [r4, #32]
	str	lr, [r4, #36]
	str	r3, [r4, #44]
	str	r3, [r4, #48]
	mov	r3, r6
	str	r8, [r4, #52]
	str	r2, [r4, #56]
	str	r2, [r4, #60]
	mov	r2, r6
	str	r1, [r4, #64]
	mov	r1, r6
	str	r9, [r4, #72]
	add	r9, r9, #12
	str	r8, [r4, #76]
	str	r0, [r4, #80]
	str	r0, [r4, #84]
	add	r0, r4, #92
	str	ip, [r4, #88]
	bl	init_timer_key
	movw	r0, #:lower16:delayed_work_timer_fn
	movw	r1, #:lower16:gsmd_disconnect_work
	str	r8, [r4, #128]
	movw	r2, #:lower16:gsmd_ch_probe
	movw	r3, #:lower16:gsmd_ch_remove
	add	lr, r4, #132
	movt	r0, #:upper16:delayed_work_timer_fn
	movt	r1, #:upper16:gsmd_disconnect_work
	movt	r2, #:upper16:gsmd_ch_probe
	movt	r3, #:upper16:gsmd_ch_remove
	add	ip, r4, #76
	str	r0, [r4, #108]
	add	r0, r5, #24
	add	r5, r5, #104
	str	ip, [r4, #112]
	str	lr, [r4, #132]
	str	lr, [r4, #136]
	str	r1, [r4, #140]
	str	r4, [r5, #-84]
	strd	r2, [r5, #-80]
	ldr	r3, [r4, #72]
	ldr	r3, [r3, #4]
	str	r3, [r5, #-60]
	str	r6, [r5, #-52]
	bl	platform_driver_register
	ldr	r0, .L18033+8
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L18028
	ldr	r3, [sp, #12]
	add	r7, r7, #1
	cmp	r7, r3
	beq	.L18029
.L18011:
	ldr	r2, .L18033+12
	mov	r0, r5
	mov	r6, #0
	ldr	r1, [sp, #20]
	bl	__mutex_init
	ldr	r0, [sp, #16]
	mov	r2, #176
	movw	r1, #32976
	ldr	r3, [r10, #212]
	ldr	ip, [r0, #8]
	add	r3, r3, #1
	str	r3, [r10, #212]
	cmp	ip, r6
	mov	r0, ip
	bne	.L18030
	mov	r4, #16
	b	.L18007
.L18028:
	movw	r1, #:lower16:.LC602
	mov	r3, r4
	str	r7, [sp]
	sub	r0, r0, #18
	movt	r1, #:upper16:.LC602
	ldr	r2, .L18033+16
	bl	__dynamic_pr_debug
	ldr	r3, [sp, #12]
	add	r7, r7, #1
	cmp	r7, r3
	bne	.L18011
.L18029:
	movw	r0, #:lower16:.LC1338
	mov	r1, #0
	movt	r0, #:upper16:.LC1338
	bl	debugfs_create_dir
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L18015
	ldr	ip, .L18033+20
	movw	r0, #:lower16:.LC250
	mov	r3, #0
	movt	r0, #:upper16:.LC250
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	mov	r0, #0
.L18002:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L18024:
	mov	r2, r1
	movw	r1, #:lower16:.LC1332
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC1332
	mov	r3, r4
	str	r2, [sp]
	ldr	r2, .L18033+24
	bl	__dynamic_pr_debug
	b	.L18003
.L18015:
	mov	r0, #0
	b	.L18002
.L18027:
	ldr	r3, [r10, #212]
	movw	r0, #:lower16:.LC1337
	mov	r2, r7
	movt	r0, #:upper16:.LC1337
	ldr	r1, .L18033+24
	sub	r3, r3, #1
	str	r3, [r10, #212]
	bl	printk
	ldr	r3, [r10, #212]
	cmp	r3, r6
	beq	.L18009
	ldr	r0, [r10, #236]
	cmp	r0, #0
	beq	.L18031
.L18012:
	cmp	r3, #1
	bls	.L18009
	ldr	r0, [r10, #340]
	cmp	r0, #0
	beq	.L18032
.L18009:
	ldr	r0, [r10, #3400]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L18002
.L18031:
	bl	kfree
	ldr	r3, [r10, #212]
	b	.L18012
.L18032:
	bl	kfree
	b	.L18009
.L18026:
	movw	r0, #:lower16:.LC1335
	ldr	r1, .L18033+24
	movt	r0, #:upper16:.LC1335
	bl	printk
	mvn	r0, #11
	b	.L18002
.L18025:
	movw	r0, #:lower16:.LC1333
	mov	r3, r4
	ldr	r1, .L18033+24
	movt	r0, #:upper16:.LC1333
	ldr	r2, [sp, #12]
	bl	printk
	mvn	r0, #21
	b	.L18002
.L18034:
	.align	2
.L18033:
	.word	.LANCHOR8-2208
	.word	.LANCHOR7-1356
	.word	.LANCHOR8-2190
	.word	.LANCHOR1+4048
	.word	.LANCHOR5+1624
	.word	.LANCHOR5+1640
	.word	.LANCHOR5+1612
	.fnend
	.size	gsmd_setup, .-gsmd_setup
	.align	2
	.global	gsmd_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_cleanup, %function
gsmd_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	gsmd_cleanup, .-gsmd_cleanup
	.align	2
	.global	gbam_data_recv_cb
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_recv_cb, %function
gbam_data_recv_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	subs	r5, r1, #0
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	.pad #20
	sub	sp, sp, #20
	beq	.L18036
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #1434
	movt	r3, #:upper16:.LANCHOR4
	mov	r4, r0
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L18049
.L18038:
	add	r6, r4, #8
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r7, r0
	cmp	r3, #0
	beq	.L18041
	movw	r3, #:lower16:.LANCHOR0
	ldr	r2, [r4, #44]
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #2028]
	cmp	r2, r3
	bls	.L18040
	ldr	r3, [r4, #244]
	ldr	r0, .L18051
	add	r3, r3, #1
	str	r3, [r4, #244]
	bl	__printk_ratelimit
	cmp	r0, #0
	bne	.L18050
.L18041:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	dev_kfree_skb_any
.L18040:
	ldr	r3, [r4, #40]
	add	r2, r4, #36
	mov	r1, r0
	mov	r0, r6
	strd	r2, [r5]
	str	r5, [r3]
	ldr	r3, [r4, #44]
	str	r5, [r4, #40]
	add	r3, r3, #1
	str	r3, [r4, #44]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	gbam_write_data_tohost
.L18036:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L18049:
	ldr	ip, [r0]
	add	r2, r0, #20
	mov	r3, r0
	ldr	r0, [r5, #80]
	movw	r1, #:lower16:.LC927
	movt	r1, #:upper16:.LC927
	str	ip, [sp]
	str	r2, [sp, #4]
	ldr	r2, .L18051
	str	r0, [sp, #8]
	ldr	r0, .L18051+4
	bl	__dynamic_pr_debug
	b	.L18038
.L18050:
	movw	r0, #:lower16:.LC928
	ldr	r1, .L18051
	ldr	r2, [r4, #244]
	movt	r0, #:upper16:.LC928
	bl	printk
	b	.L18041
.L18052:
	.align	2
.L18051:
	.word	.LANCHOR5-1392
	.word	.LANCHOR4+1416
	.fnend
	.size	gbam_data_recv_cb, .-gbam_data_recv_cb
	.align	2
	.global	gbam_data_write_done
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_write_done, %function
gbam_data_write_done:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r0, r1
	str	r6, [sp, #8]
	add	r5, r4, #4
	str	lr, [sp, #12]
	.pad #16
	sub	sp, sp, #16
	bl	dev_kfree_skb_any
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	movw	r0, #:lower16:.LANCHOR4
	ldr	r3, [r4, #240]
	movw	r2, #1458
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r2, [r0, r2]
	sub	r3, r3, #1
	tst	r2, #4
	str	r3, [r4, #240]
	bne	.L18062
.L18055:
	mov	r1, r6
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #80
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3532]
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on
.L18062:
	ldr	lr, [r4]
	add	r2, r4, #20
	movw	r1, #:lower16:.LC929
	ldr	ip, [r4, #260]
	movt	r1, #:upper16:.LC929
	add	r0, r0, #1440
	str	r3, [sp, #8]
	mov	r3, r2
	ldr	r2, .L18063
	str	lr, [sp, #12]
	str	r3, [sp]
	mov	r3, r4
	str	ip, [sp, #4]
	bl	__dynamic_pr_debug
	b	.L18055
.L18064:
	.align	2
.L18063:
	.word	.LANCHOR5-1372
	.fnend
	.size	gbam_data_write_done, .-gbam_data_write_done
	.align	2
	.global	gbam_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_disconnect, %function
gbam_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18101
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r9, r2
	strd	r10, [sp, #24]
	mov	r10, r1
	str	lr, [sp, #32]
	ldrh	r2, [r3, #-6]
	.pad #20
	sub	sp, sp, #20
	tst	r2, #4
	bne	.L18095
.L18066:
	cmp	r9, #5
	beq	.L18096
	sub	r3, r9, #6
	cmp	r3, #1
	bhi	.L18069
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #4048]
	cmp	r10, r3
	bge	.L18097
.L18069:
	cmp	r4, #0
	beq	.L18075
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	add	r3, r5, r10, lsl #2
	ldr	r6, [r3, #3668]
	str	r4, [r6, #16]
.L18074:
	add	r8, r6, #4
	mov	r7, #0
	mov	r0, r8
	add	fp, r6, #8
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, fp
	str	r1, [sp, #12]
	bl	_raw_spin_lock
	mov	r0, fp
	str	r7, [r6, #12]
	str	r7, [r5, #3528]
	bl	_raw_spin_unlock
	ldr	r1, [sp, #12]
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #84]
	bic	r2, r9, #2
	cmp	r2, #5
	str	r7, [r3]
	ldr	r3, [r4, #88]
	str	r7, [r3]
	beq	.L18098
	cmp	r9, #6
	cmpeq	r10, #0
	beq	.L18099
.L18065:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L18096:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r3, [r5, #424]
	cmp	r10, r3
	bge	.L18100
	cmp	r4, #0
	beq	.L18075
	mov	r3, #84
	mla	r3, r3, r10, r5
	ldr	r6, [r3, #428]
	mov	r0, r6
	str	r4, [r6, #16]
	bl	gbam_free_buffers
	b	.L18074
.L18098:
	ldr	r1, [r5, #3532]
	add	r2, r6, #300
	mov	r0, #4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work_on
.L18095:
	movw	r1, #:lower16:.LC1339
	sub	r0, r3, #24
	ldr	r2, .L18101+4
	movt	r1, #:upper16:.LC1339
	mov	r3, r4
	str	r10, [sp]
	bl	__dynamic_pr_debug
	b	.L18066
.L18099:
	mov	r0, r7
	bl	usb_bam_client_ready
	cmp	r0, #0
	beq	.L18065
	movw	r0, #:lower16:.LC1342
	ldr	r1, .L18101+4
	movt	r0, #:upper16:.LC1342
	b	.L18094
.L18097:
	ldr	r1, .L18101+4
	movw	r0, #:lower16:.LC615
	mov	r2, r10
	movt	r0, #:upper16:.LC615
.L18093:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L18075:
	ldr	r1, .L18101+4
	movw	r0, #:lower16:.LC1341
	movt	r0, #:upper16:.LC1341
.L18094:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L18100:
	movw	r0, #:lower16:.LC1340
	mov	r2, r10
	ldr	r1, .L18101+4
	movt	r0, #:upper16:.LC1340
	b	.L18093
.L18102:
	.align	2
.L18101:
	.word	.LANCHOR8-2160
	.word	.LANCHOR5+1748
	.fnend
	.size	gbam_disconnect, .-gbam_disconnect
	.align	2
	.global	gbam_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_connect, %function
gbam_connect:
	.fnstart
	@ args = 4, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	ip, .L18136
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r5, r2
	mov	r7, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	str	r3, [sp, #8]
	ldrb	r3, [sp, #56]	@ zero_extendqisi2
	str	r3, [sp, #12]
	ldrh	r3, [ip, #-14]
	tst	r3, #4
	bne	.L18131
.L18104:
	cmp	r5, #5
	beq	.L18132
	sub	r3, r5, #6
	cmp	r3, #1
	bhi	.L18108
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #4048]
	cmp	r7, r3
	bge	.L18130
.L18108:
	cmp	r4, #0
	beq	.L18115
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	add	r7, r6, r7, lsl #2
	ldr	fp, [r7, #3668]
.L18114:
	ldr	r3, [r4, #84]
	ldr	ip, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [ip]
	blx	r3
	subs	r10, r0, #0
	bne	.L18133
	ldr	r3, [r4, #84]
	str	fp, [r3]
	ldr	r3, [r4, #88]
	ldr	ip, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [ip]
	blx	r3
	subs	r10, r0, #0
	bne	.L18134
	ldr	r1, [r4, #88]
	add	r7, fp, #4
	add	r8, fp, #8
	mov	r0, r7
	str	fp, [r1]
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r0, r8
	bl	_raw_spin_lock
	cmp	r5, #5
	str	r4, [fp, #12]
	beq	.L18135
	mov	r0, r8
	bl	_raw_spin_unlock
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #6
	bne	.L18113
	ldr	r3, [sp, #8]
	str	r4, [fp, #16]
	strb	r3, [fp, #128]
	ldr	r3, [sp, #12]
	strb	r3, [fp, #129]
.L18112:
	add	r2, fp, #284
	mov	r0, #4
	ldr	r1, [r6, #3532]
	str	r5, [fp, #132]
	bl	queue_work_on
.L18103:
	mov	r0, r10
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L18113:
	cmp	r5, #7
	bne	.L18112
	ldr	r3, [sp, #8]
	add	r0, fp, #120
	add	r1, fp, #124
	str	r4, [fp, #16]
	strb	r3, [fp, #136]
	ldr	r3, [sp, #12]
	strd	r0, [fp, #140]
	strb	r3, [fp, #137]
	b	.L18112
.L18132:
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r3, [r6, #424]
	cmp	r7, r3
	bge	.L18130
	cmp	r4, #0
	beq	.L18115
	mov	r3, #84
	mla	r7, r3, r7, r6
	ldr	fp, [r7, #428]
	b	.L18114
.L18135:
	mov	r0, r8
	str	r10, [fp, #240]
	str	r10, [fp, #244]
	str	r10, [fp, #248]
	str	r10, [fp, #260]
	str	r10, [fp, #264]
	str	r10, [fp, #268]
	str	r10, [fp, #272]
	str	r10, [fp, #276]
	str	r10, [fp, #280]
	bl	_raw_spin_unlock
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L18112
.L18131:
	movw	r1, #:lower16:.LC1339
	sub	r0, ip, #32
	ldr	r2, .L18136+4
	movt	r1, #:upper16:.LC1339
	mov	r3, r4
	str	r7, [sp]
	bl	__dynamic_pr_debug
	b	.L18104
.L18130:
	movw	r0, #:lower16:.LC173
	mov	r2, r7
	ldr	r1, .L18136+4
	movt	r0, #:upper16:.LC173
	mvn	r10, #18
	bl	printk
	b	.L18103
.L18133:
	movw	r0, #:lower16:.LC921
	ldr	r1, .L18136+4
	ldr	r2, [r4, #84]
	movt	r0, #:upper16:.LC921
	bl	printk
	b	.L18103
.L18115:
	movw	r0, #:lower16:.LC1341
	ldr	r1, .L18136+4
	mvn	r10, #18
	movt	r0, #:upper16:.LC1341
	bl	printk
	b	.L18103
.L18134:
	movw	r0, #:lower16:.LC922
	ldr	r1, .L18136+4
	ldr	r2, [r4, #88]
	movt	r0, #:upper16:.LC922
	bl	printk
	ldr	r2, [r4, #84]
	mov	r1, #0
	str	r1, [r2]
	b	.L18103
.L18137:
	.align	2
.L18136:
	.word	.LANCHOR8-2128
	.word	.LANCHOR5+1764
	.fnend
	.size	gbam_connect, .-gbam_connect
	.align	2
	.global	gbam_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_setup, %function
gbam_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18191
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r3, #-6]
	.pad #20
	sub	sp, sp, #20
	str	r1, [sp, #12]
	tst	r2, #4
	bne	.L18188
.L18139:
	ldr	r3, [sp, #12]
	orrs	r2, r4, r3
	beq	.L18140
	cmp	r3, #3
	cmpls	r4, #1
	movhi	r3, #1
	movls	r3, #0
	bhi	.L18140
	movw	r0, #:lower16:.LC1345
	mov	r2, #1
	str	r3, [sp]
	movt	r0, #:upper16:.LC1345
	mov	r1, #10
	bl	__alloc_workqueue_key
	movw	r6, #:lower16:.LANCHOR1
	cmp	r0, #0
	movt	r6, #:upper16:.LANCHOR1
	str	r0, [r6, #3532]
	beq	.L18143
	cmp	r4, #0
	beq	.L18145
	movw	r7, #:lower16:kmalloc_caches
	ldr	r3, [r6, #424]
	movt	r7, #:upper16:kmalloc_caches
	ldr	r0, [r7, #36]
	add	r3, r3, #1
	cmp	r0, #0
	str	r3, [r6, #424]
	beq	.L18162
	mov	r2, #348
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L18189
.L18146:
	add	fp, r4, #304
	movw	r10, #:lower16:gbam_data_write_tobam
	ldr	r3, .L18191+4
	movt	r10, #:upper16:gbam_data_write_tobam
	mov	r2, #65024
	str	r4, [r4, #76]
	movt	r2, 65535
	movw	r8, #:lower16:gbam_connect_work
	str	fp, [r4, #308]
	add	fp, r4, #28
	movw	r7, #:lower16:gbam_disconnect_work
	movw	r0, #:lower16:gbam_write_data_tohost_w
	movw	lr, #:lower16:gbam_data_ch_probe
	str	fp, [r4, #28]
	movw	ip, #:lower16:gbam_data_ch_remove
	movw	r1, #:lower16:.LC342
	str	fp, [r4, #32]
	add	fp, r4, #52
	mov	r5, #0
	str	r10, [r4, #92]
	add	r10, r4, #36
	movt	r0, #:upper16:gbam_write_data_tohost_w
	str	r2, [r4, #80]
	movt	lr, #:upper16:gbam_data_ch_probe
	movt	ip, #:upper16:gbam_data_ch_remove
	str	fp, [r4, #52]
	movt	r1, #:upper16:.LC342
	add	r9, r4, #288
	str	r10, [r4, #36]
	movt	r8, #:upper16:gbam_connect_work
	movt	r7, #:upper16:gbam_disconnect_work
	str	r10, [r4, #40]
	add	r10, r4, #60
	str	fp, [r4, #56]
	add	fp, r4, #84
	str	r2, [r4, #96]
	str	r2, [r4, #284]
	str	r2, [r4, #300]
	ldr	r2, [r4, #308]
	str	r5, [r4]
	str	r10, [r4, #60]
	str	r10, [r4, #64]
	mov	r10, #8
	str	fp, [r4, #84]
	str	fp, [r4, #88]
	add	fp, r4, #100
	str	r5, [r4, #4]
	str	r5, [r4, #8]
	str	r5, [r4, #44]
	str	r5, [r4, #48]
	str	r5, [r4, #68]
	str	r5, [r4, #72]
	str	fp, [r4, #100]
	str	fp, [r4, #104]
	str	r0, [r4, #108]
	mov	r0, r3
	str	r9, [r4, #288]
	str	r9, [r4, #292]
	str	r8, [r4, #296]
	str	r2, [r4, #304]
	str	r7, [r4, #312]
	str	r10, [r4, #24]
	str	r4, [r3, #-4]
	str	lr, [r6, #432]
	str	ip, [r3, #4]
	str	r1, [r3, #20]
	str	r5, [r3, #28]
	bl	platform_driver_register
	ldr	r0, .L18191+8
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L18190
.L18145:
	ldr	r3, [sp, #12]
	cmp	r3, #0
	beq	.L18150
	movw	r7, #:lower16:kmalloc_caches
	mov	r5, #65024
	ldr	r8, .L18191+12
	movt	r7, #:upper16:kmalloc_caches
	movt	r5, 65535
	mov	r4, #0
	b	.L18155
.L18153:
	ldr	r3, [sp, #12]
	add	r4, r4, #1
	cmp	r4, r3
	beq	.L18150
.L18155:
	ldr	ip, [r6, #4048]
	mov	r2, #348
	movw	r1, #32976
	ldr	lr, [r7, #36]
	mov	r3, #16
	ldr	r9, .L18191+16
	add	ip, ip, #1
	subs	r0, lr, #0
	str	ip, [r6, #4048]
	beq	.L18151
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L18152
.L18151:
	ldr	lr, .L18191+20
	mov	r2, #0
	str	r4, [r3]
	movw	ip, #:lower16:gbam2bam_connect_work
	movw	r0, #:lower16:gbam2bam_disconnect_work
	str	r2, [r3, #4]
	movt	ip, #:upper16:gbam2bam_connect_work
	movw	r1, #:lower16:gbam2bam_suspend_work
	str	r2, [r3, #8]
	movw	r2, #:lower16:gbam2bam_resume_work
	add	r10, r3, #288
	ldrh	fp, [lr]
	movt	r0, #:upper16:gbam2bam_disconnect_work
	add	lr, r3, #304
	movt	r1, #:upper16:gbam2bam_suspend_work
	movt	r2, #:upper16:gbam2bam_resume_work
	str	r3, [r9, r4, lsl #2]
	str	ip, [r3, #296]
	add	r9, r3, #336
	add	ip, r3, #320
	str	r3, [r3, #76]
	tst	fp, #4
	str	r5, [r3, #284]
	str	r10, [r3, #288]
	str	r10, [r3, #292]
	str	r5, [r3, #300]
	str	lr, [r3, #304]
	str	lr, [r3, #308]
	str	r0, [r3, #312]
	str	r5, [r3, #316]
	str	ip, [r3, #320]
	str	ip, [r3, #324]
	str	r1, [r3, #328]
	str	r5, [r3, #332]
	str	r9, [r3, #336]
	str	r9, [r3, #340]
	str	r2, [r3, #344]
	beq	.L18153
	movw	r1, #:lower16:.LC602
	str	r4, [sp]
	ldr	r2, .L18191+24
	movt	r1, #:upper16:.LC602
	mov	r0, r8
	bl	__dynamic_pr_debug
	ldr	r3, [sp, #12]
	add	r4, r4, #1
	cmp	r4, r3
	bne	.L18155
.L18150:
	movw	r0, #:lower16:.LC1347
	mov	r1, #0
	movt	r0, #:upper16:.LC1347
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r6, #3436]
	beq	.L18157
	cmn	r0, #4096
	bhi	.L18157
	ldr	ip, .L18191+28
	movw	r0, #:lower16:.LC250
	mov	r3, #0
	movt	r0, #:upper16:.LC250
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L18158
	cmn	r0, #4096
	bhi	.L18158
.L18157:
	mov	r0, #0
.L18138:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L18190:
	movw	r1, #:lower16:.LC602
	mov	r3, r4
	ldr	r2, .L18191+32
	movt	r1, #:upper16:.LC602
	str	r5, [sp]
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L18145
.L18162:
	mov	r4, #16
	b	.L18146
.L18158:
	ldr	r0, [r6, #3436]
	bl	debugfs_remove
	mov	r3, #0
	mov	r0, r3
	str	r3, [r6, #3436]
	b	.L18138
.L18188:
	mov	r2, r1
	movw	r1, #:lower16:.LC1343
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC1343
	mov	r3, r4
	str	r2, [sp]
	ldr	r2, .L18191+36
	bl	__dynamic_pr_debug
	b	.L18139
.L18189:
	ldr	r3, [r6, #424]
	movw	r0, #:lower16:.LC1337
	mov	r2, r4
	movt	r0, #:upper16:.LC1337
	ldr	r1, .L18191+36
	sub	r3, r3, #1
	str	r3, [r6, #424]
	bl	printk
.L18154:
	ldr	r3, [r6, #424]
	cmp	r3, #0
	ble	.L18148
	ldr	r0, [r6, #428]
	cmp	r0, #0
	beq	.L18148
	bl	kfree
	ldr	r0, .L18191+4
	bl	platform_driver_unregister
.L18148:
	ldr	r3, [r6, #4048]
	cmp	r3, #0
	ble	.L18160
	ldr	r5, .L18191+16
	mov	r4, #0
.L18161:
	ldr	r0, [r5, r4, lsl #2]
	add	r4, r4, #1
	bl	kfree
	ldr	r3, [r6, #4048]
	cmp	r3, r4
	bgt	.L18161
.L18160:
	ldr	r0, [r6, #3532]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L18138
.L18152:
	ldr	r3, [r6, #4048]
	movw	r0, #:lower16:.LC1337
	mov	r2, r4
	ldr	r1, .L18191+36
	movt	r0, #:upper16:.LC1337
	sub	r3, r3, #1
	str	r3, [r6, #4048]
	bl	printk
	b	.L18154
.L18140:
	movw	r0, #:lower16:.LC1344
	ldr	r1, .L18191+36
	mov	r2, r4
	movt	r0, #:upper16:.LC1344
	ldr	r3, [sp, #12]
	bl	printk
	mvn	r0, #21
	b	.L18138
.L18143:
	movw	r0, #:lower16:.LC1346
	ldr	r1, .L18191+36
	movt	r0, #:upper16:.LC1346
	bl	printk
	mvn	r0, #11
	b	.L18138
.L18192:
	.align	2
.L18191:
	.word	.LANCHOR8-2112
	.word	.LANCHOR1+432
	.word	.LANCHOR8-2080
	.word	.LANCHOR8-2088
	.word	.LANCHOR1+3668
	.word	.LANCHOR8-2070
	.word	.LANCHOR5+1808
	.word	.LANCHOR5+1828
	.word	.LANCHOR5+1792
	.word	.LANCHOR5+1780
	.fnend
	.size	gbam_setup, .-gbam_setup
	.align	2
	.global	gbam_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_cleanup, %function
gbam_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3436]
	b	debugfs_remove_recursive
	.fnend
	.size	gbam_cleanup, .-gbam_cleanup
	.align	2
	.global	gbam_suspend
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_suspend, %function
gbam_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r2, r2, #6
	cmp	r2, #1
	bxhi	lr
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #714
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r0, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	movw	r4, #:lower16:.LANCHOR1
	str	lr, [sp, #12]
	ldrh	r3, [r0, r3]
	movt	r4, #:upper16:.LANCHOR1
	add	r2, r4, r1, lsl #2
	ldr	r5, [r2, #3668]
	tst	r3, #4
	bne	.L18203
.L18196:
	add	r2, r5, #316
	ldr	r1, [r4, #3532]
	mov	r0, #4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on
.L18203:
	mov	r3, r1
	movw	r1, #:lower16:.LC833
	ldr	r2, .L18204
	movt	r1, #:upper16:.LC833
	add	r0, r0, #696
	bl	__dynamic_pr_debug
	b	.L18196
.L18205:
	.align	2
.L18204:
	.word	.LANCHOR5-1768
	.fnend
	.size	gbam_suspend, .-gbam_suspend
	.align	2
	.global	gbam_resume
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_resume, %function
gbam_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r2, r2, #6
	cmp	r2, #1
	bxhi	lr
	ldr	r0, .L18216
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	str	r6, [sp, #8]
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #12]
	add	r2, r4, r1, lsl #2
	ldrh	r3, [r0, #-14]
	ldr	r5, [r2, #3668]
	tst	r3, #4
	bne	.L18215
.L18208:
	add	r2, r5, #332
	ldr	r1, [r4, #3532]
	mov	r0, #4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on
.L18215:
	mov	r3, r1
	movw	r1, #:lower16:.LC592
	ldr	r2, .L18216+4
	movt	r1, #:upper16:.LC592
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L18208
.L18217:
	.align	2
.L18216:
	.word	.LANCHOR4-2608
	.word	.LANCHOR5-3592
	.fnend
	.size	gbam_resume, .-gbam_resume
	.align	2
	.global	gsmd_ctrl_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_connect, %function
gsmd_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18234
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L18232
.L18219:
	uxtb	r3, r5
	cmp	r3, #5
	bhi	.L18220
	movw	r4, #:lower16:.LANCHOR1
	mov	r2, #84
	movt	r4, #:upper16:.LANCHOR1
	mla	r3, r2, r3, r4
	ldr	r3, [r3, #512]
	cmp	r3, #0
	beq	.L18220
	cmp	r6, #0
	beq	.L18233
	mla	r5, r2, r5, r4
	ldr	r5, [r5, #512]
	add	r7, r5, #108
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:grmnet_ctrl_smd_send_cpkt_tomodem
	movw	r3, #:lower16:gsmd_ctrl_send_cbits_tomodem
	str	r6, [r5, #104]
	movt	r2, #:upper16:grmnet_ctrl_smd_send_cpkt_tomodem
	movt	r3, #:upper16:gsmd_ctrl_send_cbits_tomodem
	mov	r1, r0
	mov	r0, r7
	strd	r2, [r6, #96]
	bl	_raw_spin_unlock_irqrestore
	add	r2, r5, #112
	mov	r3, #0
	ldr	r1, [r4, #3484]
	mov	r0, #4
	bl	queue_delayed_work_on
	mov	r0, #0
.L18218:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L18232:
	movw	r1, #:lower16:.LC1339
	sub	r0, r3, #32
	ldr	r2, .L18234+4
	movt	r1, #:upper16:.LC1339
	mov	r3, r6
	str	r5, [sp]
	bl	__dynamic_pr_debug
	b	.L18219
.L18220:
	movw	r0, #:lower16:.LC1348
	mov	r2, r5
	ldr	r1, .L18234+4
	movt	r0, #:upper16:.LC1348
	bl	printk
	mvn	r0, #18
	b	.L18218
.L18233:
	movw	r0, #:lower16:.LC1341
	ldr	r1, .L18234+4
	movt	r0, #:upper16:.LC1341
	bl	printk
	mvn	r0, #18
	b	.L18218
.L18235:
	.align	2
.L18234:
	.word	.LANCHOR8-2032
	.word	.LANCHOR5+1936
	.fnend
	.size	gsmd_ctrl_connect, .-gsmd_ctrl_connect
	.align	2
	.global	gsmd_ctrl_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_disconnect, %function
gsmd_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18259
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r3, #-6]
	.pad #8
	sub	sp, sp, #8
	tst	r2, #4
	bne	.L18256
.L18237:
	cmp	r6, #5
	bhi	.L18238
	movw	r8, #:lower16:.LANCHOR1
	mov	r3, #84
	movt	r8, #:upper16:.LANCHOR1
	mla	r3, r3, r6, r8
	ldr	r5, [r3, #512]
	cmp	r5, #0
	beq	.L18238
	cmp	r4, #0
	beq	.L18257
	add	r9, r5, #108
	add	r7, r5, #40
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r3, #0
	mov	r10, r0
	str	r3, [r5, #104]
	str	r3, [r4, #96]
	str	r3, [r4, #100]
	ldr	r4, [r5, #40]
	str	r3, [r5, #88]
	cmp	r7, r4
	beq	.L18241
.L18242:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
	ldr	r4, [r5, #40]
	cmp	r7, r4
	bne	.L18242
.L18241:
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	add	r1, r5, #8
	mov	r0, #0
	bl	_test_and_clear_bit
	cmp	r0, #0
	bne	.L18258
.L18243:
	ldr	r1, [r8, #3484]
	add	r2, r5, #164
	mov	r3, #0
	mov	r0, #4
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	queue_delayed_work_on
.L18258:
	ldr	r0, [r5]
	ldr	r1, [r5, #88]
	orr	r2, r1, #4
	mvn	r2, r2
	bl	smd_tiocmset
	b	.L18243
.L18256:
	movw	r1, #:lower16:.LC1339
	sub	r0, r3, #24
	ldr	r2, .L18259+4
	movt	r1, #:upper16:.LC1339
	mov	r3, r4
	str	r6, [sp]
	bl	__dynamic_pr_debug
	b	.L18237
.L18238:
	ldr	r1, .L18259+4
	movw	r0, #:lower16:.LC1348
	mov	r2, r6
	movt	r0, #:upper16:.LC1348
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L18257:
	ldr	r1, .L18259+4
	movw	r0, #:lower16:.LC1341
	movt	r0, #:upper16:.LC1341
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L18260:
	.align	2
.L18259:
	.word	.LANCHOR8-2016
	.word	.LANCHOR5+1956
	.fnend
	.size	gsmd_ctrl_disconnect, .-gsmd_ctrl_disconnect
	.align	2
	.global	gsmd_ctrl_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_setup, %function
gsmd_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18298
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r3, #-14]
	.pad #44
	sub	sp, sp, #44
	str	r1, [sp, #16]
	str	r2, [sp, #28]
	tst	r3, #4
	bne	.L18291
.L18262:
	cmp	r4, #1
	bhi	.L18292
	ldr	r3, [sp, #16]
	sub	r3, r3, #1
	cmp	r3, #2
	bhi	.L18293
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r3, [sp, #24]
	ldrb	r3, [r3, #3496]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L18294
.L18266:
	ldr	r2, [sp, #16]
	add	r1, r4, r4, lsl #1
	add	r3, r3, #1
	ldr	r0, [sp, #24]
	mov	r8, r1
	str	r1, [sp, #32]
	add	r2, r1, r2
	cmp	r2, r1
	strb	r3, [r0, #3496]
	bls	.L18268
	movw	r2, #:lower16:grmnet_ctrl_smd_connect_w
	mov	r3, #84
	movt	r2, #:upper16:grmnet_ctrl_smd_connect_w
	movw	fp, #:lower16:kmalloc_caches
	mul	r3, r3, r1
	mov	r9, #65024
	movt	fp, #:upper16:kmalloc_caches
	str	r2, [sp, #20]
	ldr	r2, .L18298+4
	movt	r9, 65535
	mov	r10, #0
	str	r3, [sp, #36]
	add	r6, r2, r3
	b	.L18273
.L18297:
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L18295
.L18269:
	add	ip, r4, #116
	mov	r3, r5
	str	r8, [r4, #100]
	mov	r2, r5
	mov	r1, r5
	str	r5, [r4, #108]
	add	r0, r4, #128
	str	r9, [r4, #112]
	ldr	r10, [sp, #12]
	str	ip, [r4, #116]
	str	ip, [r4, #120]
	ldr	ip, [sp, #20]
	str	ip, [r4, #124]
	bl	init_timer_key
	movw	ip, #:lower16:grmnet_ctrl_smd_disconnect_w
	add	r0, r4, #168
	str	r7, [r4, #144]
	movt	ip, #:upper16:grmnet_ctrl_smd_disconnect_w
	add	r3, r4, #112
	mov	r2, r5
	mov	r1, r5
	str	r3, [r4, #148]
	mov	r3, r5
	str	r9, [r4, #164]
	str	r0, [r4, #168]
	str	r0, [r4, #172]
	add	r0, r4, #180
	str	ip, [r4, #176]
	bl	init_timer_key
	movw	r3, #:lower16:.LANCHOR5
	add	r2, r4, #164
	str	r4, [r4, #84]
	movt	r3, #:upper16:.LANCHOR5
	movw	r1, #:lower16:.LC1353
	str	r7, [r4, #196]
	add	r3, r3, r8, lsl #2
	movt	r1, #:upper16:.LC1353
	str	r2, [r4, #200]
	add	r0, r4, #12
	ldr	r2, .L18298+8
	ldr	r3, [r3, #1996]
	str	r3, [r4, #4]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC1354
	ldr	r2, .L18298+8
	add	r0, r4, #24
	movt	r1, #:upper16:.LC1354
	bl	__init_waitqueue_head
	ldr	lr, .L18298+12
	movw	r0, #:lower16:grmnet_ctrl_smd_read_w
	add	ip, r4, #40
	movt	r0, #:upper16:grmnet_ctrl_smd_read_w
	movw	r1, #:lower16:grmnet_ctrl_smd_write_w
	movw	r2, #:lower16:grmnet_ctrl_smd_ch_probe
	movw	r3, #:lower16:grmnet_ctrl_smd_ch_remove
	str	ip, [r4, #40]
	str	ip, [r4, #44]
	movt	r3, #:upper16:grmnet_ctrl_smd_ch_remove
	add	ip, r4, #56
	movt	r1, #:upper16:grmnet_ctrl_smd_write_w
	movt	r2, #:upper16:grmnet_ctrl_smd_ch_probe
	ldrh	lr, [lr]
	str	r0, [r4, #64]
	add	r0, r4, #72
	str	r9, [r4, #52]
	str	ip, [r4, #56]
	str	ip, [r4, #60]
	tst	lr, #4
	str	r9, [r4, #68]
	str	r0, [r4, #72]
	str	r0, [r4, #76]
	str	r1, [r4, #80]
	str	r4, [r6]
	strd	r2, [r6, #4]
	ldr	r3, [r4, #4]
	str	r3, [r6, #24]
	str	r5, [r6, #32]
	bne	.L18296
.L18272:
	ldr	r3, [sp, #16]
	add	r8, r8, #1
	add	r6, r6, #84
	cmp	r10, r3
	beq	.L18268
.L18273:
	ldr	r3, [fp, #32]
	mov	r5, #0
	add	r0, r10, #1
	movw	r7, #:lower16:delayed_work_timer_fn
	mov	r2, #216
	str	r0, [sp, #12]
	movt	r7, #:upper16:delayed_work_timer_fn
	movw	r1, #32976
	cmp	r3, r5
	mov	r0, r3
	bne	.L18297
	mov	r4, #16
	b	.L18269
.L18296:
	ldr	r0, .L18298
	movw	r1, #:lower16:.LC602
	mov	r3, r4
	movt	r1, #:upper16:.LC602
	ldr	r2, .L18298+16
	str	r8, [sp]
	sub	r0, r0, #8
	bl	__dynamic_pr_debug
	b	.L18272
.L18268:
	ldr	r3, [sp, #28]
	cmp	r3, #0
	moveq	r0, r3
	beq	.L18261
	ldr	r2, [sp, #32]
	mov	r0, #0
	strb	r2, [r3]
.L18261:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L18294:
	movw	r0, #:lower16:.LC1351
	str	r3, [sp]
	mov	r2, #1
	movt	r0, #:upper16:.LC1351
	mov	r1, #10
	bl	__alloc_workqueue_key
	ldr	r3, [sp, #24]
	cmp	r0, #0
	str	r0, [r3, #3484]
	beq	.L18267
	ldrb	r3, [r3, #3496]	@ zero_extendqisi2
	b	.L18266
.L18291:
	ldr	r0, .L18298
	mov	r3, r1
	movw	r1, #:lower16:.LC1349
	ldr	r2, .L18298+20
	movt	r1, #:upper16:.LC1349
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L18262
.L18295:
	movw	r0, #:lower16:.LC1337
	mov	r2, r8
	ldr	r1, .L18298+20
	movt	r0, #:upper16:.LC1337
	bl	printk
	cmp	r10, r5
	beq	.L18271
	ldr	r3, [sp, #36]
	add	r5, r3, #4
	ldr	r3, .L18298+4
	add	r5, r3, r5
.L18275:
	ldr	r3, [r5, #-4]
	add	r4, r4, #1
	subs	r0, r3, #0
	beq	.L18274
	bl	kfree
	mov	r0, r5
	bl	platform_driver_unregister
.L18274:
	cmp	r10, r4
	add	r5, r5, #84
	bne	.L18275
.L18271:
	ldr	r2, [sp, #24]
	ldrb	r3, [r2, #3496]	@ zero_extendqisi2
	sub	r3, r3, #1
	uxtb	r3, r3
	cmp	r3, #0
	strb	r3, [r2, #3496]
	mvnne	r0, #11
	bne	.L18261
	ldr	r0, [r2, #3484]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L18261
.L18293:
	movw	r0, #:lower16:.LC1026
	ldr	r1, .L18298+20
	movt	r0, #:upper16:.LC1026
	ldr	r2, [sp, #16]
	bl	printk
	mvn	r0, #21
	b	.L18261
.L18292:
	movw	r0, #:lower16:.LC1350
	mov	r2, r4
	ldr	r1, .L18298+20
	movt	r0, #:upper16:.LC1350
	bl	printk
	mvn	r0, #21
	b	.L18261
.L18267:
	movw	r0, #:lower16:.LC1352
	ldr	r1, .L18298+20
	movt	r0, #:upper16:.LC1352
	bl	printk
	mvn	r0, #11
	b	.L18261
.L18299:
	.align	2
.L18298:
	.word	.LANCHOR8-1984
	.word	.LANCHOR1+512
	.word	.LANCHOR1+4052
	.word	.LANCHOR8-1974
	.word	.LANCHOR5+2020
	.word	.LANCHOR5+1980
	.fnend
	.size	gsmd_ctrl_setup, .-gsmd_ctrl_setup
	.align	2
	.global	gqti_ctrl_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_connect, %function
gqti_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18313
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L18311
.L18301:
	cmp	r5, #0
	beq	.L18312
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r4, [r3, #3604]
	add	r6, r4, #52
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:grmnet_ctrl_qti_send_cpkt_tomodem
	movw	r3, #:lower16:gqti_ctrl_notify_modem
	str	r5, [r4]
	movt	r2, #:upper16:grmnet_ctrl_qti_send_cpkt_tomodem
	movt	r3, #:upper16:gqti_ctrl_notify_modem
	mov	r1, r0
	mov	r0, r6
	strd	r2, [r5, #96]
	bl	_raw_spin_unlock_irqrestore
	mov	r1, #1
	add	r0, r4, #32
	mov	r2, r1
	mov	r3, #0
	str	r1, [r4, #8]
	mov	r1, #3
	bl	__wake_up
	cmp	r4, #0
	beq	.L18306
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L18300
	ldr	r4, [r0, #108]
	cmp	r4, #0
	beq	.L18306
	blx	r4
	mov	r0, #0
.L18300:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L18306:
	mov	r0, r4
	b	.L18300
.L18311:
	movw	r1, #:lower16:.LC1355
	sub	r0, r3, #32
	ldr	r2, .L18313+4
	movt	r1, #:upper16:.LC1355
	mov	r3, r5
	bl	__dynamic_pr_debug
	b	.L18301
.L18312:
	movw	r0, #:lower16:.LC1341
	ldr	r1, .L18313+4
	movt	r0, #:upper16:.LC1341
	bl	printk
	mvn	r0, #18
	b	.L18300
.L18314:
	.align	2
.L18313:
	.word	.LANCHOR8-1936
	.word	.LANCHOR5+2048
	.fnend
	.size	gqti_ctrl_connect, .-gqti_ctrl_connect
	.align	2
	.global	gqti_ctrl_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_disconnect, %function
gqti_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L18356
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r5, [r3, #3604]
	ldrh	r3, [r2, #-6]
	tst	r3, #4
	bne	.L18350
.L18316:
	cmp	r6, #0
	beq	.L18351
	cmp	r5, #0
	beq	.L18318
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L18318
	ldr	r3, [r0, #104]
	cmp	r3, #0
	beq	.L18318
	blx	r3
.L18318:
	mov	r4, #0
	mov	r7, r5
	add	r8, r5, #52
	str	r4, [r5, #8]
	mov	r0, r8
	str	r4, [r5, #12]
	bl	_raw_spin_lock_irqsave
	str	r4, [r7], #44
	mov	r9, r0
	str	r4, [r6, #96]
	str	r4, [r6, #100]
	ldr	r4, [r5, #44]
	cmp	r7, r4
	beq	.L18319
.L18320:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
	ldr	r4, [r5, #44]
	cmp	r4, r7
	bne	.L18320
.L18319:
	mov	r1, r9
	mov	r0, r8
	movw	r4, #:lower16:.LANCHOR4
	bl	_raw_spin_unlock_irqrestore
	movt	r4, #:upper16:.LANCHOR4
	movw	r3, #1050
	ldrh	r3, [r4, r3]
	tst	r3, #4
	bne	.L18352
.L18321:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r5, #4]	@ zero_extendqisi2
	mov	r6, r0
	cmp	r3, #0
	beq	.L18353
	movw	r3, #:lower16:kmalloc_caches
	mov	r2, #16
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L18323
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L18354
	mov	r1, #16
	mov	r2, #0
	stm	r3, {r1, r2}
.L18324:
	add	r0, r3, #8
	mov	r2, r7
	ldr	r1, [r5, #48]
	bl	__list_add
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #1074
	ldrh	r3, [r4, r3]
	tst	r3, #4
	bne	.L18355
.L18326:
	add	r0, r5, #32
	mov	r3, #0
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	mov	r2, #1
	mov	r1, #3
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up
.L18323:
	mov	r3, r2
	str	r2, [r0, #16]
	str	r0, [r0, #20]
	b	.L18324
.L18354:
	mvn	r3, #11
	b	.L18324
.L18352:
	movw	r1, #:lower16:.LC853
	ldr	r2, .L18356+4
	movt	r1, #:upper16:.LC853
	ldr	r0, .L18356+8
	bl	__dynamic_pr_debug
	b	.L18321
.L18350:
	movw	r1, #:lower16:.LC1355
	sub	r0, r2, #24
	ldr	r2, .L18356+12
	movt	r1, #:upper16:.LC1355
	mov	r3, r6
	bl	__dynamic_pr_debug
	b	.L18316
.L18355:
	movw	r1, #:lower16:.LC671
	ldr	r2, .L18356+4
	movt	r1, #:upper16:.LC671
	ldr	r0, .L18356+16
	bl	__dynamic_pr_debug
	b	.L18326
.L18353:
	movw	r0, #:lower16:.LC854
	mov	r2, r5
	ldr	r1, .L18356+4
	movt	r0, #:upper16:.LC854
	bl	printk
	ldrd	r4, [sp]
	mov	r1, r6
	mov	r0, r8
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L18351:
	movw	r0, #:lower16:.LC1341
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC1341
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, .L18356+12
	b	printk
.L18357:
	.align	2
.L18356:
	.word	.LANCHOR8-1920
	.word	.LANCHOR5-1676
	.word	.LANCHOR4+1032
	.word	.LANCHOR5+2068
	.word	.LANCHOR4+1056
	.fnend
	.size	gqti_ctrl_disconnect, .-gqti_ctrl_disconnect
	.align	2
	.global	ghsic_ctrl_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_connect, %function
ghsic_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18373
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L18369
.L18359:
	movw	r2, #:lower16:.LANCHOR1
	clz	r3, r6
	movt	r2, #:upper16:.LANCHOR1
	lsr	r3, r3, #5
	ldr	r1, [r2, #1016]
	cmp	r4, r1
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L18370
	mov	r3, #104
	mla	r4, r3, r4, r2
	ldr	r4, [r4, #1020]
	cmp	r4, #0
	beq	.L18371
	add	r7, r4, #4
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #48]
	mov	r1, r0
	cmp	r3, #0
	beq	.L18372
.L18363:
	cmp	r3, #1
	bne	.L18364
	ldr	r0, [r6, #92]
	movw	r2, #:lower16:ghsic_send_cpkt_tomodem
	movw	r3, #:lower16:ghsic_send_cbits_tomodem
	movt	r2, #:upper16:ghsic_send_cpkt_tomodem
	movt	r3, #:upper16:ghsic_send_cbits_tomodem
	str	r0, [r4, #52]
	strd	r2, [r6, #96]
.L18364:
	mov	r5, #0
	mov	r0, r7
	str	r6, [r4, #8]
	str	r5, [r4, #96]
	str	r5, [r4, #100]
	str	r5, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
	add	r2, r4, #16
	mov	r0, #4
	ldr	r1, [r4, #12]
	bl	queue_work_on
	mov	r0, r5
.L18358:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L18372:
	movw	r3, #:lower16:ghsic_send_cbits_tomodem
	movt	r3, #:upper16:ghsic_send_cbits_tomodem
	str	r3, [r6, #140]
	ldr	r3, [r4, #48]
	b	.L18363
.L18369:
	movw	r1, #:lower16:.LC563
	sub	r0, r3, #32
	ldr	r2, .L18373+4
	movt	r1, #:upper16:.LC563
	mov	r3, r4
	bl	__dynamic_pr_debug
	b	.L18359
.L18370:
	movw	r0, #:lower16:.LC173
	mov	r2, r4
	ldr	r1, .L18373+4
	movt	r0, #:upper16:.LC173
	bl	printk
	mvn	r0, #18
	b	.L18358
.L18371:
	movw	r0, #:lower16:.LC114
	ldr	r1, .L18373+4
	movt	r0, #:upper16:.LC114
	bl	printk
	mvn	r0, #18
	b	.L18358
.L18374:
	.align	2
.L18373:
	.word	.LANCHOR8-1888
	.word	.LANCHOR5+2092
	.fnend
	.size	ghsic_ctrl_connect, .-ghsic_ctrl_connect
	.align	2
	.global	ghsic_ctrl_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_disconnect, %function
ghsic_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18389
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L18385
.L18376:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #104
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #1016]
	mla	r3, r2, r5, r3
	cmp	r5, r1
	ldr	r4, [r3, #1020]
	bhi	.L18386
	clz	r3, r4
	cmp	r6, #0
	lsr	r3, r3, #5
	moveq	r5, #1
	movne	r5, r3
	cmp	r5, #0
	bne	.L18387
	ldr	r8, [r4, #48]
	add	r7, r4, #4
	mov	r0, r7
	cmp	r8, #0
	beq	.L18388
	bl	_raw_spin_lock_irqsave
	str	r5, [r6, #96]
	str	r5, [r6, #100]
.L18380:
	mov	r3, #0
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	str	r3, [r4, #52]
	str	r3, [r4, #88]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	add	r2, r4, #32
	mov	r0, #4
	ldr	r1, [r4, #12]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	queue_work_on
.L18388:
	bl	_raw_spin_lock_irqsave
	str	r8, [r6, #140]
	b	.L18380
.L18385:
	movw	r1, #:lower16:.LC563
	sub	r0, r3, #24
	ldr	r2, .L18389+4
	movt	r1, #:upper16:.LC563
	mov	r3, r5
	bl	__dynamic_pr_debug
	b	.L18376
.L18386:
	movw	r0, #:lower16:.LC173
	mov	r2, r5
	ldr	r1, .L18389+4
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC173
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L18387:
	movw	r0, #:lower16:.LC1341
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC1341
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L18389+4
	b	printk
.L18390:
	.align	2
.L18389:
	.word	.LANCHOR8-1872
	.word	.LANCHOR5+2112
	.fnend
	.size	ghsic_ctrl_disconnect, .-ghsic_ctrl_disconnect
	.align	2
	.global	ghsic_ctrl_set_port_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_set_port_name, %function
ghsic_ctrl_set_port_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r2, [r4, #4052]
	str	lr, [sp, #12]
	cmp	r2, #3
	bhi	.L18397
	mov	r3, r0
	add	r5, r4, #1020
	mov	r0, #104
	cmp	r3, #0
	movne	r1, r3
	mla	r2, r0, r2, r5
	add	r0, r2, #84
	mov	r2, #20
	bl	strlcpy
	ldr	r0, [r4, #4052]
	mov	r3, #104
	movw	r1, #:lower16:.LC1357
	movt	r1, #:upper16:.LC1357
	mov	r2, #20
	mla	r0, r3, r0, r5
	add	r0, r0, #84
	bl	strlcat
	ldr	r3, [r4, #4052]
	ldr	r6, [sp, #8]
	add	r3, r3, #1
	str	r3, [r4, #4052]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L18397:
	movw	r0, #:lower16:.LC1356
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC1356
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, .L18398
	b	printk
.L18399:
	.align	2
.L18398:
	.word	.LANCHOR5+2136
	.fnend
	.size	ghsic_ctrl_set_port_name, .-ghsic_ctrl_set_port_name
	.align	2
	.global	ghsic_ctrl_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_setup, %function
ghsic_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r3, r0
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	movw	fp, #:lower16:.LANCHOR1
	strd	r8, [sp, #16]
	movt	fp, #:upper16:.LANCHOR1
	str	lr, [sp, #32]
	.pad #52
	sub	sp, sp, #52
	ldr	r2, [fp, #1016]
	str	r1, [sp, #16]
	add	r1, r2, r0
	cmp	r1, #4
	str	r1, [sp, #8]
	movle	r1, #0
	movgt	r1, #1
	cmp	r0, #0
	str	r2, [sp, #36]
	moveq	r1, #1
	str	r2, [sp, #40]
	cmp	r1, #0
	bne	.L18426
	ldr	r2, .L18432
	ldrh	r2, [r2, #-14]
	tst	r2, #4
	bne	.L18427
.L18403:
	ldr	r3, [sp, #8]
	ldr	r6, [sp, #36]
	cmp	r6, r3
	bcs	.L18400
	mov	r3, #104
	movw	r2, #:lower16:kmalloc_caches
	str	fp, [sp, #12]
	mov	r1, #10
	movw	r0, #:lower16:.LC84
	mul	r3, r3, r6
	mov	ip, #65024
	movt	r2, #:upper16:kmalloc_caches
	movt	r1, 2
	movt	r0, #:upper16:.LC84
	movt	ip, 65535
	str	r2, [sp, #20]
	add	r5, r3, #84
	str	r1, [sp, #24]
	str	r3, [sp, #44]
	ldr	r3, .L18432+4
	str	r0, [sp, #28]
	str	ip, [sp, #32]
	add	r5, r3, r5
	b	.L18411
.L18431:
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L18428
.L18404:
	mov	r3, r7
	mov	r2, #1
	ldr	r1, [sp, #24]
	ldr	r0, [sp, #28]
	str	r7, [sp]
	movw	r8, #:lower16:ghsic_ctrl_status
	str	r5, [sp, #4]
	add	r10, r4, #20
	bl	__alloc_workqueue_key
	mov	r9, r0
	movw	r2, #:lower16:ghsic_ctrl_probe
	cmp	r9, #0
	movw	r3, #:lower16:ghsic_ctrl_remove
	movw	lr, #:lower16:ghsic_ctrl_connect_w
	movw	ip, #:lower16:gctrl_disconnect_w
	str	r9, [r4, #12]
	sub	r0, r5, #80
	movt	r2, #:upper16:ghsic_ctrl_probe
	movt	r3, #:upper16:ghsic_ctrl_remove
	movw	r1, #:lower16:ghsic_ctrl_receive
	movt	lr, #:upper16:ghsic_ctrl_connect_w
	movt	ip, #:upper16:gctrl_disconnect_w
	add	r9, r4, #36
	beq	.L18429
	ldr	fp, [sp, #16]
	movt	r1, #:upper16:ghsic_ctrl_receive
	movt	r8, #:upper16:ghsic_ctrl_status
	str	r7, [r4, #4]
	ldr	r7, [sp, #32]
	str	r6, [r4]
	cmp	fp, #0
	str	r7, [r4, #16]
	streq	r8, [r4, #76]
	str	r10, [r4, #20]
	str	r10, [r4, #24]
	str	lr, [r4, #28]
	str	r7, [r4, #32]
	str	r9, [r4, #36]
	str	r9, [r4, #40]
	str	ip, [r4, #44]
	str	fp, [r4, #48]
	str	r4, [r4, #56]
	str	r5, [r4, #64]
	str	r1, [r4, #72]
	str	r4, [r5, #-84]
	strd	r2, [r5, #-80]
	mov	r3, #0
	str	r5, [r5, #-60]
	str	r3, [r5, #-52]
	bl	platform_driver_register
	ldr	r3, .L18432+8
	ldrh	r3, [r3]
	tst	r3, #4
	bne	.L18430
.L18408:
	ldr	r3, [sp, #8]
	add	r6, r6, #1
	add	r5, r5, #104
	cmp	r3, r6
	bls	.L18400
.L18411:
	ldr	lr, [sp, #12]
	mov	r7, #0
	mov	r2, #108
	ldr	r1, [sp, #20]
	ldr	r3, [lr, #1016]
	ldr	ip, [r1, #28]
	movw	r1, #32976
	add	r3, r3, #1
	cmp	ip, r7
	mov	r0, ip
	str	r3, [lr, #1016]
	bne	.L18431
	mov	r4, #16
	b	.L18404
.L18430:
	ldr	r0, .L18432
	movw	r1, #:lower16:.LC602
	mov	r3, r4
	movt	r1, #:upper16:.LC602
	ldr	r2, .L18432+12
	str	r6, [sp]
	sub	r0, r0, #8
	bl	__dynamic_pr_debug
	b	.L18408
.L18428:
	ldr	fp, [sp, #12]
.L18405:
	ldr	r3, [fp, #1016]
	movw	r0, #:lower16:.LC1337
	mov	r2, r6
	movt	r0, #:upper16:.LC1337
	ldr	r1, .L18432+16
	sub	r3, r3, #1
	str	r3, [fp, #1016]
	bl	printk
	ldr	r2, [sp, #36]
	ldr	r3, [fp, #1016]
	cmp	r2, r3
	bcs	.L18410
	ldr	r3, [sp, #44]
	mov	r5, r2
	add	r4, r3, #4
	ldr	r3, .L18432+4
	add	r4, r3, r4
.L18412:
	ldr	r6, [r4, #-4]
	add	r5, r5, #1
	ldr	r0, [r6, #12]
	bl	destroy_workqueue
	mov	r0, r6
	bl	kfree
	mov	r0, r4
	add	r4, r4, #104
	bl	platform_driver_unregister
	ldr	r3, [fp, #1016]
	cmp	r5, r3
	bcc	.L18412
.L18410:
	mvn	r3, #11
	str	r3, [sp, #36]
	ldr	r3, [sp, #40]
	str	r3, [fp, #1016]
.L18400:
	ldr	r0, [sp, #36]
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L18427:
	ldr	r0, .L18432
	movw	r1, #:lower16:.LC1349
	ldr	r2, .L18432+16
	movt	r1, #:upper16:.LC1349
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L18403
.L18429:
	movw	r0, #:lower16:.LC1358
	mov	r2, r5
	ldr	r1, .L18432+12
	movt	r0, #:upper16:.LC1358
	ldr	fp, [sp, #12]
	bl	printk
	b	.L18405
.L18426:
	mov	r2, r3
	movw	r0, #:lower16:.LC1026
	ldr	r1, .L18432+16
	mvn	r3, #21
	movt	r0, #:upper16:.LC1026
	str	r3, [sp, #36]
	bl	printk
	b	.L18400
.L18433:
	.align	2
.L18432:
	.word	.LANCHOR8-1840
	.word	.LANCHOR1+1020
	.word	.LANCHOR8-1830
	.word	.LANCHOR5+2184
	.word	.LANCHOR5+2164
	.fnend
	.size	ghsic_ctrl_setup, .-ghsic_ctrl_setup
	.align	2
	.global	ghsic_data_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_disconnect, %function
ghsic_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18453
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L18450
.L18435:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #104
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #1436]
	mla	r3, r2, r6, r3
	cmp	r6, r1
	ldr	r4, [r3, #1440]
	bhi	.L18451
	clz	r0, r4
	cmp	r5, #0
	lsr	r0, r0, #5
	moveq	r5, #1
	movne	r5, r0
	cmp	r5, #0
	bne	.L18452
	mov	r0, r4
	bl	ghsic_data_free_buffers.part.49
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L18438
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #8]
	str	r5, [r3]
.L18438:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L18439
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	mov	r2, #0
	str	r2, [r3]
.L18439:
	mov	r5, #0
	add	r8, r4, #48
	mov	r0, r8
	add	r7, r4, #164
	str	r5, [r4, #4]
	add	r6, r4, #80
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r1, r7
	str	r5, [r4, #8]
	mov	r0, #2
	str	r5, [r4, #184]
	bl	_clear_bit
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	mov	r1, r7
	str	r5, [r4, #12]
	mov	r0, #1
	bl	_clear_bit
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	add	r2, r4, #104
	mov	r0, #4
	ldr	r1, [r4, #84]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	queue_work_on
.L18450:
	movw	r1, #:lower16:.LC563
	sub	r0, r3, #32
	ldr	r2, .L18453+4
	movt	r1, #:upper16:.LC563
	mov	r3, r6
	bl	__dynamic_pr_debug
	b	.L18435
.L18451:
	movw	r0, #:lower16:.LC173
	mov	r2, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC173
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, .L18453+4
	b	printk
.L18452:
	movw	r0, #:lower16:.LC114
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC114
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, .L18453+4
	b	printk
.L18454:
	.align	2
.L18453:
	.word	.LANCHOR8-1792
	.word	.LANCHOR5+2204
	.fnend
	.size	ghsic_data_disconnect, .-ghsic_data_disconnect
	.align	2
	.global	ghsic_data_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_connect, %function
ghsic_data_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18474
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L18468
.L18456:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #104
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #1436]
	mla	r3, r2, r6, r3
	cmp	r6, r1
	ldr	r4, [r3, #1440]
	bhi	.L18469
	cmp	r4, #0
	cmpne	r5, #0
	beq	.L18470
	ldr	r3, [r4, #16]
	add	r7, r4, #48
	add	r6, r4, #80
	mov	r0, r7
	cmp	r3, #0
	beq	.L18471
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #84]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #88]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR7
	movt	r3, #:upper16:.LANCHOR7
	ldr	r2, [r3, #-1324]
	ldr	r3, [r3, #-1320]
	str	r2, [r4, #20]
	str	r3, [r4, #52]
	ldr	r3, [r5, #84]
	str	r4, [r3]
	ldr	r3, [r5, #88]
	str	r4, [r3]
.L18461:
	ldr	r3, [r4, #8]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L18472
	ldr	r3, [r4, #12]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L18473
	mov	r3, #1
	mov	r0, r7
	str	r3, [r4, #4]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #192]
	mov	r0, r7
	str	r5, [r4, #196]
	str	r5, [r4, #200]
	str	r5, [r4, #216]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #188]
	mov	r0, r6
	str	r5, [r4, #204]
	str	r5, [r4, #208]
	str	r5, [r4, #212]
	bl	_raw_spin_unlock_irqrestore
	add	r2, r4, #88
	mov	r0, #4
	ldr	r1, [r4, #84]
	bl	queue_work_on
.L18455:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L18471:
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #88]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #92]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR7
	movt	r3, #:upper16:.LANCHOR7
	ldr	r2, [r3, #-1332]
	ldr	r3, [r3, #-1328]
	str	r2, [r4, #20]
	str	r3, [r4, #52]
	ldr	r3, [r5, #88]
	str	r4, [r3]
	ldr	r3, [r5, #92]
	str	r4, [r3]
	b	.L18461
.L18468:
	movw	r1, #:lower16:.LC563
	sub	r0, r3, #24
	ldr	r2, .L18474+4
	movt	r1, #:upper16:.LC563
	mov	r3, r6
	bl	__dynamic_pr_debug
	b	.L18456
.L18473:
	movw	r0, #:lower16:.LC922
	ldr	r1, .L18474+4
	ldr	r2, [r4, #12]
	movt	r0, #:upper16:.LC922
	bl	printk
	ldr	r0, [r4, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L18455
.L18470:
	movw	r0, #:lower16:.LC114
	ldr	r1, .L18474+4
	mvn	r5, #18
	movt	r0, #:upper16:.LC114
	bl	printk
	b	.L18455
.L18469:
	movw	r0, #:lower16:.LC173
	mov	r2, r6
	ldr	r1, .L18474+4
	movt	r0, #:upper16:.LC173
	mvn	r5, #18
	bl	printk
	b	.L18455
.L18472:
	movw	r0, #:lower16:.LC921
	ldr	r1, .L18474+4
	ldr	r2, [r4, #8]
	movt	r0, #:upper16:.LC921
	bl	printk
	b	.L18455
.L18475:
	.align	2
.L18474:
	.word	.LANCHOR8-1776
	.word	.LANCHOR5+2228
	.fnend
	.size	ghsic_data_connect, .-ghsic_data_connect
	.align	2
	.global	ghsic_data_set_port_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_set_port_name, %function
ghsic_data_set_port_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r2, [r4, #4056]
	str	lr, [sp, #12]
	cmp	r2, #3
	bhi	.L18482
	mov	r3, r0
	add	r5, r4, #1440
	mov	r0, #104
	cmp	r3, #0
	movne	r1, r3
	mla	r2, r0, r2, r5
	add	r0, r2, #84
	mov	r2, #20
	bl	strlcpy
	ldr	r0, [r4, #4056]
	mov	r3, #104
	movw	r1, #:lower16:.LC1359
	movt	r1, #:upper16:.LC1359
	mov	r2, #20
	mla	r0, r3, r0, r5
	add	r0, r0, #84
	bl	strlcat
	ldr	r3, [r4, #4056]
	ldr	r6, [sp, #8]
	add	r3, r3, #1
	str	r3, [r4, #4056]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L18482:
	movw	r0, #:lower16:.LC1356
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC1356
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, .L18483
	b	printk
.L18484:
	.align	2
.L18483:
	.word	.LANCHOR5+2248
	.fnend
	.size	ghsic_data_set_port_name, .-ghsic_data_set_port_name
	.align	2
	.global	ghsic_data_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_setup, %function
ghsic_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r2, r3
	strd	r6, [sp, #8]
	mov	r3, r0
	strd	r8, [sp, #16]
	movt	r2, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #60
	sub	sp, sp, #60
	str	r2, [sp, #24]
	ldr	r2, [r2, #1436]
	str	r1, [sp, #28]
	add	r1, r2, r0
	cmp	r1, #4
	str	r1, [sp, #20]
	movle	r1, #0
	movgt	r1, #1
	cmp	r0, #0
	str	r2, [sp, #44]
	moveq	r1, #1
	str	r2, [sp, #48]
	cmp	r1, #0
	bne	.L18510
	ldr	r2, .L18516
	ldrh	r2, [r2, #-14]
	tst	r2, #4
	bne	.L18511
.L18488:
	ldr	r3, [sp, #20]
	ldr	r8, [sp, #44]
	cmp	r8, r3
	bcs	.L18485
	movw	r2, #:lower16:kmalloc_caches
	mov	r3, #104
	movt	r2, #:upper16:kmalloc_caches
	mov	r1, #10
	mul	r3, r3, r8
	movw	r0, #:lower16:.LC84
	mov	fp, #65024
	str	r2, [sp, #32]
	ldr	r2, .L18516+4
	movt	r1, 2
	movt	r0, #:upper16:.LC84
	movt	fp, 65535
	mov	r4, r8
	mov	r6, fp
	str	r1, [sp, #36]
	str	r3, [sp, #52]
	add	r3, r3, #84
	add	r10, r2, r3
	str	r0, [sp, #40]
	mov	r5, r10
	b	.L18495
.L18515:
	bl	kmem_cache_alloc_trace
	subs	r7, r0, #0
	beq	.L18512
.L18489:
	mov	r3, r8
	mov	r2, #1
	ldr	r1, [sp, #36]
	ldr	r0, [sp, #40]
	str	r8, [sp]
	movw	fp, #:lower16:ghsic_data_connect_w
	str	r5, [sp, #4]
	movw	r10, #:lower16:ghsic_data_disconnect_w
	movw	r9, #:lower16:ghsic_data_write_tohost
	bl	__alloc_workqueue_key
	mov	r3, r0
	movw	ip, #:lower16:ghsic_data_write_tomdm
	movw	lr, #:lower16:ghsic_data_receive
	movw	r1, #:lower16:ghsic_data_unthrottle_tx
	str	r3, [sp, #12]
	movw	r2, #:lower16:ghsic_data_probe
	movt	fp, #:upper16:ghsic_data_connect_w
	str	r3, [r7, #84]
	movw	r3, #:lower16:ghsic_data_remove
	movt	r10, #:upper16:ghsic_data_disconnect_w
	movt	r3, #:upper16:ghsic_data_remove
	movt	r9, #:upper16:ghsic_data_write_tohost
	sub	r0, r5, #80
	movt	ip, #:upper16:ghsic_data_write_tomdm
	str	r3, [sp, #16]
	ldr	r3, [sp, #12]
	movt	lr, #:upper16:ghsic_data_receive
	movt	r1, #:upper16:ghsic_data_unthrottle_tx
	movt	r2, #:upper16:ghsic_data_probe
	cmp	r3, #0
	beq	.L18513
	add	r3, r7, #24
	str	r4, [r7]
	str	r3, [r7, #24]
	str	r3, [r7, #28]
	add	r3, r7, #32
	str	r8, [r7, #40]
	str	r3, [r7, #32]
	str	r3, [r7, #36]
	add	r3, r7, #56
	str	r8, [r7, #72]
	str	r3, [r7, #56]
	str	r3, [r7, #60]
	add	r3, r7, #64
	str	r8, [r7, #80]
	str	r8, [r7, #48]
	str	r3, [r7, #64]
	str	r3, [r7, #68]
	add	r3, r7, #92
	str	r8, [r7, #44]
	str	r8, [r7, #76]
	str	r3, [r7, #92]
	str	r3, [r7, #96]
	add	r3, r7, #108
	str	r6, [r7, #88]
	str	fp, [r7, #100]
	str	r3, [r7, #108]
	str	r3, [r7, #112]
	add	r3, r7, #124
	str	r6, [r7, #104]
	str	r10, [r7, #116]
	str	r3, [r7, #124]
	str	r3, [r7, #128]
	add	r3, r7, #140
	str	r6, [r7, #120]
	str	ip, [r7, #132]
	str	r3, [r7, #140]
	str	r3, [r7, #144]
	ldr	r3, [sp, #28]
	str	r6, [r7, #136]
	str	r9, [r7, #148]
	str	r3, [r7, #16]
	ldr	r3, [sp, #16]
	str	r7, [r7, #152]
	str	r5, [r7, #160]
	str	lr, [r7, #168]
	str	r1, [r7, #176]
	str	r7, [r5, #-84]
	str	r2, [r5, #-80]
	str	r3, [r5, #-76]
	str	r5, [r5, #-60]
	str	r8, [r5, #-52]
	bl	platform_driver_register
	ldr	r3, .L18516+8
	ldrh	r3, [r3]
	tst	r3, #4
	bne	.L18514
.L18492:
	ldr	r3, [sp, #20]
	add	r4, r4, #1
	add	r5, r5, #104
	cmp	r3, r4
	bls	.L18485
.L18495:
	ldr	lr, [sp, #24]
	mov	r8, #0
	mov	r2, #220
	ldr	r1, [sp, #32]
	ldr	r3, [lr, #1436]
	ldr	ip, [r1, #32]
	movw	r1, #32976
	add	r3, r3, #1
	cmp	ip, r8
	mov	r0, ip
	str	r3, [lr, #1436]
	bne	.L18515
	mov	r7, #16
	b	.L18489
.L18514:
	ldr	r0, .L18516
	movw	r1, #:lower16:.LC164
	mov	r3, r4
	ldr	r2, .L18516+12
	movt	r1, #:upper16:.LC164
	sub	r0, r0, #8
	bl	__dynamic_pr_debug
	b	.L18492
.L18512:
	mov	r8, r4
.L18490:
	ldr	r4, [sp, #24]
	movw	r0, #:lower16:.LC1337
	mov	r2, r8
	movt	r0, #:upper16:.LC1337
	ldr	r1, .L18516+16
	ldr	r3, [r4, #1436]
	sub	r3, r3, #1
	str	r3, [r4, #1436]
	bl	printk
	ldr	r2, [sp, #44]
	ldr	r3, [r4, #1436]
	cmp	r2, r3
	bcs	.L18494
	ldr	r7, [sp, #24]
	mov	r5, r2
	ldr	r3, [sp, #52]
	add	r4, r3, #4
	ldr	r3, .L18516+4
	add	r4, r3, r4
.L18496:
	ldr	r6, [r4, #-4]
	add	r5, r5, #1
	ldr	r0, [r6, #84]
	bl	destroy_workqueue
	mov	r0, r6
	bl	kfree
	mov	r0, r4
	add	r4, r4, #104
	bl	platform_driver_unregister
	ldr	r3, [r7, #1436]
	cmp	r5, r3
	bcc	.L18496
.L18494:
	mvn	r3, #11
	ldr	r2, [sp, #48]
	str	r3, [sp, #44]
	ldr	r3, [sp, #24]
	str	r2, [r3, #1436]
.L18485:
	ldr	r0, [sp, #44]
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L18511:
	ldr	r0, .L18516
	movw	r1, #:lower16:.LC1360
	ldr	r2, .L18516+16
	movt	r1, #:upper16:.LC1360
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L18488
.L18513:
	movw	r0, #:lower16:.LC1358
	mov	r2, r5
	ldr	r1, .L18516+12
	movt	r0, #:upper16:.LC1358
	mov	r8, r4
	bl	printk
	mov	r0, r7
	bl	kfree
	b	.L18490
.L18510:
	mov	r2, r3
	movw	r0, #:lower16:.LC1026
	ldr	r1, .L18516+16
	mvn	r3, #21
	movt	r0, #:upper16:.LC1026
	str	r3, [sp, #44]
	bl	printk
	b	.L18485
.L18517:
	.align	2
.L18516:
	.word	.LANCHOR8-1744
	.word	.LANCHOR1+1440
	.word	.LANCHOR8-1734
	.word	.LANCHOR5+2296
	.word	.LANCHOR5+2276
	.fnend
	.size	ghsic_data_setup, .-ghsic_data_setup
	.align	2
	.global	ghsuart_ctrl_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_connect, %function
ghsuart_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18533
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L18530
.L18519:
	movw	r3, #:lower16:.LANCHOR1
	clz	r5, r6
	movt	r3, #:upper16:.LANCHOR1
	lsr	r5, r5, #5
	ldr	r2, [r3, #1856]
	cmp	r4, r2
	orrhi	r5, r5, #1
	cmp	r5, #0
	bne	.L18531
	mov	r2, #84
	mla	r4, r2, r4, r3
	ldr	r4, [r4, #1860]
	cmp	r4, #0
	beq	.L18532
	add	r7, r4, #8
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r6, #92]
	movw	r2, #:lower16:ghsuart_send_cpkt_tomodem
	movw	r3, #:lower16:ghsuart_send_cbits_tomodem
	movt	r2, #:upper16:ghsuart_send_cpkt_tomodem
	movt	r3, #:upper16:ghsuart_send_cbits_tomodem
	mov	r1, r0
	mov	r0, r7
	str	ip, [r4, #68]
	strd	r2, [r6, #96]
	str	r6, [r4, #12]
	str	r5, [r4, #96]
	str	r5, [r4, #100]
	str	r5, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #88]
	ubfx	r0, r0, #1, #1
	cmp	r0, #0
	beq	.L18518
	add	r2, r4, #36
	mov	r0, #4
	ldr	r1, [r4, #32]
	bl	queue_work_on
	mov	r0, r5
.L18518:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L18530:
	movw	r1, #:lower16:.LC563
	sub	r0, r3, #32
	ldr	r2, .L18533+4
	movt	r1, #:upper16:.LC563
	mov	r3, r4
	bl	__dynamic_pr_debug
	b	.L18519
.L18531:
	movw	r0, #:lower16:.LC173
	mov	r2, r4
	ldr	r1, .L18533+4
	movt	r0, #:upper16:.LC173
	bl	printk
	mvn	r0, #18
	b	.L18518
.L18532:
	movw	r0, #:lower16:.LC114
	ldr	r1, .L18533+4
	movt	r0, #:upper16:.LC114
	bl	printk
	mvn	r0, #18
	b	.L18518
.L18534:
	.align	2
.L18533:
	.word	.LANCHOR8-1696
	.word	.LANCHOR5+2320
	.fnend
	.size	ghsuart_ctrl_connect, .-ghsuart_ctrl_connect
	.align	2
	.global	ghsuart_ctrl_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_disconnect, %function
ghsuart_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18546
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L18543
.L18536:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #1856]
	cmp	r4, r2
	bhi	.L18544
	mov	r2, #84
	cmp	r6, #0
	mla	r4, r2, r4, r3
	ldr	r5, [r4, #1860]
	clz	r4, r5
	lsr	r4, r4, #5
	moveq	r4, #1
	cmp	r4, #0
	bne	.L18545
	add	r7, r5, #8
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r4, [r6, #96]
	mov	r0, r7
	str	r4, [r6, #100]
	str	r4, [r5, #12]
	str	r4, [r5, #68]
	str	r4, [r5, #92]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	add	r2, r5, #52
	mov	r0, #4
	ldr	r1, [r5, #32]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	queue_work_on
.L18543:
	movw	r1, #:lower16:.LC563
	sub	r0, r3, #24
	ldr	r2, .L18546+4
	movt	r1, #:upper16:.LC563
	mov	r3, r4
	bl	__dynamic_pr_debug
	b	.L18536
.L18544:
	movw	r0, #:lower16:.LC173
	mov	r2, r4
	ldr	r1, .L18546+4
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC173
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L18545:
	movw	r0, #:lower16:.LC1341
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC1341
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L18546+4
	b	printk
.L18547:
	.align	2
.L18546:
	.word	.LANCHOR8-1680
	.word	.LANCHOR5+2344
	.fnend
	.size	ghsuart_ctrl_disconnect, .-ghsuart_ctrl_disconnect
	.align	2
	.global	ghsuart_ctrl_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_setup, %function
ghsuart_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r3, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	ldr	r2, [r8, #1856]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	str	r1, [sp, #12]
	add	r1, r2, r0
	cmp	r1, #2
	str	r1, [sp, #8]
	movle	r1, #0
	movgt	r1, #1
	cmp	r0, #0
	str	r2, [sp, #20]
	moveq	r1, #1
	str	r2, [sp, #24]
	cmp	r1, #0
	bne	.L18573
	ldr	r2, .L18579
	ldrh	r2, [r2, #-14]
	tst	r2, #4
	bne	.L18574
.L18551:
	ldr	r3, [sp, #8]
	ldr	r7, [sp, #20]
	cmp	r7, r3
	bcs	.L18548
	ldr	r2, .L18579+4
	mov	r3, #84
	movw	r1, #:lower16:.LC84
	movt	r1, #:upper16:.LC84
	movw	r10, #:lower16:kmalloc_caches
	movw	r9, #:lower16:.LC1361
	mov	fp, #10
	movt	r10, #:upper16:kmalloc_caches
	movt	r9, #:upper16:.LC1361
	str	r1, [sp, #16]
	mla	r3, r3, r7, r2
	movt	fp, 2
	add	r3, r3, #4
	mov	r5, r3
	str	r3, [sp, #28]
	b	.L18558
.L18578:
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L18575
.L18552:
	mov	r3, r6
	mov	r2, #1
	ldr	r0, [sp, #16]
	mov	r1, fp
	stm	sp, {r6, r9}
	bl	__alloc_workqueue_key
	mov	r3, r0
	movw	r1, #:lower16:.LC714
	ldr	r2, .L18579+8
	cmp	r3, #0
	add	r0, r4, #20
	movt	r1, #:upper16:.LC714
	str	r3, [r4, #32]
	beq	.L18576
	ldr	r3, [sp, #12]
	str	r7, [r4]
	str	r3, [r4, #4]
	str	r6, [r4, #8]
	str	r6, [r4, #16]
	bl	__init_waitqueue_head
	mov	r3, #65024
	add	r2, r4, #40
	movt	r3, 65535
	movw	lr, #:lower16:ghsuart_ctrl_connect_w
	movt	lr, #:upper16:ghsuart_ctrl_connect_w
	movw	r0, #:lower16:ghsuart_ctrl_disconnect_w
	str	r3, [r4, #36]
	movw	r1, #:lower16:ghsuart_ctrl_receive
	add	ip, r4, #56
	str	r2, [r4, #40]
	movt	r0, #:upper16:ghsuart_ctrl_disconnect_w
	movt	r1, #:upper16:ghsuart_ctrl_receive
	str	r2, [r4, #44]
	movw	r2, #:lower16:ghsuart_ctrl_probe
	str	lr, [r4, #48]
	movt	r2, #:upper16:ghsuart_ctrl_probe
	mov	lr, #42
	str	r3, [r4, #52]
	movw	r3, #:lower16:ghsuart_ctrl_remove
	movt	r3, #:upper16:ghsuart_ctrl_remove
	str	ip, [r4, #56]
	str	ip, [r4, #60]
	str	r0, [r4, #64]
	mov	r0, r5
	str	r4, [r4, #72]
	str	lr, [r4, #76]
	str	r1, [r4, #84]
	str	r4, [r5, #-4]
	strd	r2, [r5]
	str	r9, [r5, #20]
	str	r6, [r5, #28]
	bl	platform_driver_register
	cmp	r0, #0
	ldr	r3, .L18579+12
	blt	.L18570
	ldrh	r3, [r3]
	tst	r3, #4
	bne	.L18577
.L18555:
	ldr	r3, [sp, #8]
	add	r7, r7, #1
	add	r5, r5, #84
	cmp	r3, r7
	bls	.L18548
.L18558:
	ldr	r3, [r8, #1856]
	mov	r6, #0
	mov	r2, #108
	ldr	ip, [r10, #28]
	movw	r1, #32976
	add	r3, r3, #1
	cmp	ip, r6
	mov	r0, ip
	str	r3, [r8, #1856]
	bne	.L18578
	mov	r4, #16
	b	.L18552
.L18570:
	mov	r6, r0
.L18553:
	ldr	r3, [r8, #1856]
	movw	r0, #:lower16:.LC1337
	mov	r2, r7
	movt	r0, #:upper16:.LC1337
	ldr	r1, .L18579+16
	sub	r3, r3, #1
	str	r3, [r8, #1856]
	bl	printk
	ldr	r2, [sp, #20]
	ldr	r3, [r8, #1856]
	cmp	r2, r3
	bcs	.L18557
	ldr	r4, [sp, #28]
	mov	r5, r2
.L18556:
	ldr	r7, [r4, #-4]
	add	r5, r5, #1
	ldr	r0, [r7, #32]
	bl	destroy_workqueue
	mov	r0, r4
	add	r4, r4, #84
	bl	platform_driver_unregister
	mov	r0, r7
	bl	kfree
	ldr	r3, [r8, #1856]
	cmp	r5, r3
	bcc	.L18556
.L18557:
	ldr	r3, [sp, #24]
	str	r6, [sp, #20]
	str	r3, [r8, #1856]
.L18548:
	ldr	r0, [sp, #20]
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L18577:
	ldr	r0, .L18579
	movw	r1, #:lower16:.LC602
	mov	r3, r4
	movt	r1, #:upper16:.LC602
	ldr	r2, .L18579+20
	str	r7, [sp]
	sub	r0, r0, #8
	bl	__dynamic_pr_debug
	b	.L18555
.L18574:
	ldr	r0, .L18579
	movw	r1, #:lower16:.LC1349
	ldr	r2, .L18579+16
	movt	r1, #:upper16:.LC1349
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L18551
.L18575:
	mvn	r6, #11
	b	.L18553
.L18576:
	movw	r2, #:lower16:.LC1361
	movw	r0, #:lower16:.LC1358
	ldr	r1, .L18579+20
	movt	r2, #:upper16:.LC1361
	movt	r0, #:upper16:.LC1358
	bl	printk
	mov	r0, r4
	mvn	r6, #11
	bl	kfree
	b	.L18553
.L18573:
	mov	r2, r3
	movw	r0, #:lower16:.LC1026
	ldr	r1, .L18579+16
	mvn	r3, #21
	movt	r0, #:upper16:.LC1026
	str	r3, [sp, #20]
	bl	printk
	b	.L18548
.L18580:
	.align	2
.L18579:
	.word	.LANCHOR8-1648
	.word	.LANCHOR1+1860
	.word	.LANCHOR1+3972
	.word	.LANCHOR8-1638
	.word	.LANCHOR5+2368
	.word	.LANCHOR5+2388
	.fnend
	.size	ghsuart_ctrl_setup, .-ghsuart_ctrl_setup
	.align	2
	.global	event_string
	.syntax unified
	.arm
	.fpu softvfp
	.type	event_string, %function
event_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #8
	bhi	.L18583
	movw	r3, #:lower16:.LANCHOR5
	movt	r3, #:upper16:.LANCHOR5
	add	r3, r3, r0, lsl #2
	ldr	r0, [r3, #2412]
	bx	lr
.L18583:
	movw	r0, #:lower16:.LC182
	movt	r0, #:upper16:.LC182
	bx	lr
	.fnend
	.size	event_string, .-event_string
	.align	2
	.global	ghsuart_data_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_disconnect, %function
ghsuart_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18605
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L18601
.L18585:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #84
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #2028]
	mla	r3, r2, r5, r3
	cmp	r5, r1
	ldr	r4, [r3, #2032]
	bhi	.L18602
	clz	r3, r4
	cmp	r6, #0
	lsr	r3, r3, #5
	moveq	r5, #1
	movne	r5, r3
	cmp	r5, #0
	bne	.L18603
	mov	r0, r4
	bl	ghsuart_data_free_buffers.part.50
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L18588
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #8]
	str	r5, [r3]
.L18588:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L18589
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	mov	r2, #0
	str	r2, [r3]
.L18589:
	ldr	r5, [r4, #16]
	mov	r3, #0
	str	r3, [r4, #4]
	cmp	r5, r3
	beq	.L18604
.L18590:
	add	r8, r4, #72
	mov	r5, #0
	mov	r0, r8
	add	r7, r4, #184
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r1, r7
	str	r5, [r4, #8]
	mov	r0, #2
	str	r5, [r4, #192]
	add	r6, r4, #104
	bl	_clear_bit
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	mov	r1, r7
	str	r5, [r4, #12]
	mov	r0, #1
	bl	_clear_bit
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	add	r2, r4, #128
	mov	r0, #4
	ldr	r1, [r4, #108]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	queue_work_on
.L18604:
	add	r7, r4, #20
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r6, #140]
	mov	r0, r7
	str	r5, [r4, #24]
	str	r5, [r4, #196]
	bl	_raw_spin_unlock_irqrestore
	b	.L18590
.L18601:
	movw	r1, #:lower16:.LC563
	sub	r0, r3, #32
	ldr	r2, .L18605+4
	movt	r1, #:upper16:.LC563
	mov	r3, r5
	bl	__dynamic_pr_debug
	b	.L18585
.L18602:
	movw	r0, #:lower16:.LC173
	mov	r2, r5
	ldr	r1, .L18605+4
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC173
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L18603:
	movw	r0, #:lower16:.LC114
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC114
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, .L18605+4
	b	printk
.L18606:
	.align	2
.L18605:
	.word	.LANCHOR8-1600
	.word	.LANCHOR5+2448
	.fnend
	.size	ghsuart_data_disconnect, .-ghsuart_data_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_disable, %function
frmnet_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18656
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #20
	sub	sp, sp, #20
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L18651
.L18608:
	ldr	r0, [r5, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r5, #136]
	mov	r3, #0
	ldr	r0, .L18656+4
	str	r3, [r2]
	ldrh	r2, [r0, #-14]
	str	r3, [r5, #120]
	tst	r2, #4
	bne	.L18652
.L18609:
	add	r8, r5, #132
	add	r7, r5, #144
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #144]
	mov	r9, r0
	cmp	r7, r4
	beq	.L18610
.L18611:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
	ldr	r4, [r5, #144]
	cmp	r7, r4
	bne	.L18611
.L18610:
	mov	r3, #0
	mov	r0, r8
	mov	r1, r9
	movw	r4, #:lower16:.LANCHOR1
	str	r3, [r5, #152]
	movt	r4, #:upper16:.LANCHOR1
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, .L18656+8
	ldrb	r0, [r5, #116]	@ zero_extendqisi2
	ldrh	r1, [r3, #-14]
	lsl	r3, r0, #1
	add	r2, r3, r0
	add	r2, r4, r2, lsl #3
	tst	r1, #4
	ldr	r6, [r2, #3316]
	ldr	r8, [r2, #3320]
	bne	.L18653
.L18612:
	add	r1, r3, r0
	sub	r2, r8, #3
	add	r1, r4, r1, lsl #3
	ldr	r7, [r1, #3328]
	cmp	r2, #7
	ldrls	pc, [pc, r2, asl #2]
	b	.L18615
.L18617:
	.word	.L18616
	.word	.L18618
	.word	.L18615
	.word	.L18615
	.word	.L18615
	.word	.L18619
	.word	.L18620
	.word	.L18621
.L18620:
	ldr	r0, .L18656+12
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L18622
	movw	r1, #:lower16:.LC563
	sub	r0, r0, #24
	ldr	r2, .L18656+16
	movt	r1, #:upper16:.LC563
	mov	r3, r7
	bl	__dynamic_pr_debug
.L18622:
	ldr	r3, [r4, #1856]
	cmp	r7, r3
	bhi	.L18654
	mov	r3, #84
	cmp	r5, #0
	mla	r7, r3, r7, r4
	ldr	r8, [r7, #1860]
	clz	r7, r8
	lsr	r7, r7, #5
	moveq	r7, #1
	cmp	r7, #0
	bne	.L18655
	add	r9, r8, #8
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r7, [r5, #96]
	mov	r0, r9
	str	r7, [r5, #100]
	str	r7, [r8, #12]
	str	r7, [r8, #68]
	str	r7, [r8, #92]
	bl	_raw_spin_unlock_irqrestore
	add	r2, r8, #52
	mov	r0, #4
	ldr	r1, [r8, #32]
	bl	queue_work_on
	ldrb	r0, [r5, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
.L18621:
	add	r0, r3, r0
	add	r4, r4, r0, lsl #3
	sub	r3, r6, #5
	ldr	r1, [r4, #3324]
	cmp	r3, #5
	ldrls	pc, [pc, r3, asl #2]
	b	.L18626
.L18628:
	.word	.L18627
	.word	.L18627
	.word	.L18627
	.word	.L18629
	.word	.L18630
	.word	.L18607
.L18630:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	ghsuart_data_disconnect
.L18629:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	ghsic_data_disconnect
.L18627:
	uxtb	r1, r1
	mov	r2, r6
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	gbam_disconnect
.L18607:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L18619:
	mov	r0, r5
	mov	r1, r7
	bl	ghsic_ctrl_disconnect
	ldrb	r0, [r5, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L18621
.L18616:
	mov	r0, r5
	uxtb	r1, r7
	bl	gsmd_ctrl_disconnect
	ldrb	r0, [r5, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L18621
.L18618:
	mov	r0, r5
	bl	gqti_ctrl_disconnect
	ldrb	r0, [r5, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L18621
.L18652:
	movw	r1, #:lower16:.LC563
	ldrb	r3, [r5, #116]	@ zero_extendqisi2
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC563
	ldr	r2, .L18656+20
	bl	__dynamic_pr_debug
	b	.L18609
.L18653:
	sub	r2, r8, #1
	cmp	r2, #9
	movwhi	r3, #:lower16:.LC182
	movthi	r3, #:upper16:.LC182
	bhi	.L18613
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r3, r3, r2, lsl #2
	ldr	r3, [r3, #1100]
.L18613:
	sub	r1, r6, #1
	cmp	r1, #9
	movwhi	r2, #:lower16:.LC182
	movthi	r2, #:upper16:.LC182
	bhi	.L18614
	movw	r2, #:lower16:.LANCHOR3
	movt	r2, #:upper16:.LANCHOR3
	add	r2, r2, r1, lsl #2
	ldr	r2, [r2, #1100]
.L18614:
	movw	r1, #:lower16:.LC1362
	stm	sp, {r2, r5}
	ldr	r2, .L18656+24
	str	r0, [sp, #8]
	movt	r1, #:upper16:.LC1362
	ldr	r0, .L18656
	bl	__dynamic_pr_debug
	ldrb	r0, [r5, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L18612
.L18651:
	movw	r1, #:lower16:.LC563
	sub	r0, r3, #24
	ldr	r2, .L18656+28
	ldrb	r3, [r5, #116]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC563
	bl	__dynamic_pr_debug
	b	.L18608
.L18615:
	sub	r8, r8, #1
	cmp	r8, #9
	bhi	.L18636
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r8, r3, r8, lsl #2
	ldr	r2, [r8, #1100]
.L18632:
	ldr	r1, .L18656+24
	movw	r0, #:lower16:.LC593
	movt	r0, #:upper16:.LC593
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk
.L18626:
	sub	r6, r6, #1
	cmp	r6, #9
	bhi	.L18636
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r6, r3, r6, lsl #2
	ldr	r2, [r6, #1100]
	b	.L18632
.L18636:
	movw	r2, #:lower16:.LC182
	movt	r2, #:upper16:.LC182
	b	.L18632
.L18654:
	movw	r0, #:lower16:.LC173
	mov	r2, r7
	ldr	r1, .L18656+16
	movt	r0, #:upper16:.LC173
	bl	printk
	ldrb	r0, [r5, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L18621
.L18655:
	movw	r0, #:lower16:.LC1341
	ldr	r1, .L18656+16
	movt	r0, #:upper16:.LC1341
	bl	printk
	ldrb	r0, [r5, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L18621
.L18657:
	.align	2
.L18656:
	.word	.LANCHOR8-1584
	.word	.LANCHOR4-2848
	.word	.LANCHOR8-1552
	.word	.LANCHOR8-1680
	.word	.LANCHOR5+2344
	.word	.LANCHOR5-3988
	.word	.LANCHOR5+2488
	.word	.LANCHOR5+2472
	.fnend
	.size	frmnet_disable, .-frmnet_disable
	.align	2
	.global	ghsuart_data_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_connect, %function
ghsuart_data_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18677
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L18671
.L18659:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #84
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #2028]
	mla	r3, r2, r6, r3
	cmp	r6, r1
	ldr	r4, [r3, #2032]
	bhi	.L18672
	cmp	r4, #0
	cmpne	r5, #0
	beq	.L18673
	ldr	r3, [r4, #16]
	add	r7, r4, #72
	add	r6, r4, #104
	mov	r0, r7
	cmp	r3, #0
	beq	.L18674
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #84]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #88]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR7
	movt	r3, #:upper16:.LANCHOR7
	ldr	r2, [r3, #-1308]
	ldr	r3, [r3, #-1304]
	str	r2, [r4, #44]
	str	r3, [r4, #76]
	ldr	r3, [r5, #84]
	str	r4, [r3]
	ldr	r3, [r5, #88]
	str	r4, [r3]
.L18664:
	ldr	r3, [r4, #8]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L18675
	ldr	r3, [r4, #12]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L18676
	mov	r3, #1
	mov	r0, r7
	str	r3, [r4, #4]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #208]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #204]
	mov	r0, r6
	str	r5, [r4, #212]
	bl	_raw_spin_unlock_irqrestore
	add	r2, r4, #112
	mov	r0, #4
	ldr	r1, [r4, #108]
	bl	queue_work_on
.L18658:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L18674:
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #88]
	mov	r1, r0
	mov	r0, r7
	add	r8, r4, #20
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #92]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR7
	mov	r0, r8
	movt	r3, #:upper16:.LANCHOR7
	ldr	r2, [r3, #-1316]
	ldr	r3, [r3, #-1312]
	str	r2, [r4, #44]
	str	r3, [r4, #76]
	ldr	r3, [r5, #88]
	str	r4, [r3]
	ldr	r3, [r5, #92]
	str	r4, [r3]
	bl	_raw_spin_lock_irqsave
	movw	r3, #:lower16:ghsuart_send_controlbits_tomodem
	mov	r1, r0
	movt	r3, #:upper16:ghsuart_send_controlbits_tomodem
	mov	r0, r8
	str	r3, [r5, #140]
	str	r5, [r4, #24]
	bl	_raw_spin_unlock_irqrestore
	b	.L18664
.L18671:
	movw	r1, #:lower16:.LC563
	sub	r0, r3, #24
	ldr	r2, .L18677+4
	movt	r1, #:upper16:.LC563
	mov	r3, r6
	bl	__dynamic_pr_debug
	b	.L18659
.L18676:
	movw	r0, #:lower16:.LC922
	ldr	r1, .L18677+4
	ldr	r2, [r4, #12]
	movt	r0, #:upper16:.LC922
	bl	printk
	ldr	r0, [r4, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L18658
.L18673:
	movw	r0, #:lower16:.LC114
	ldr	r1, .L18677+4
	mvn	r5, #18
	movt	r0, #:upper16:.LC114
	bl	printk
	b	.L18658
.L18672:
	movw	r0, #:lower16:.LC173
	mov	r2, r6
	ldr	r1, .L18677+4
	movt	r0, #:upper16:.LC173
	mvn	r5, #18
	bl	printk
	b	.L18658
.L18675:
	movw	r0, #:lower16:.LC921
	ldr	r1, .L18677+4
	ldr	r2, [r4, #8]
	movt	r0, #:upper16:.LC921
	bl	printk
	b	.L18658
.L18678:
	.align	2
.L18677:
	.word	.LANCHOR8-1536
	.word	.LANCHOR5+2512
	.fnend
	.size	ghsuart_data_connect, .-ghsuart_data_connect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_set_alt, %function
frmnet_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	ldr	r6, .L18814
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r5, [r0, #128]
	ldrh	r3, [r6, #-14]
	tst	r3, #4
	bne	.L18800
.L18680:
	ldr	r2, [r4, #136]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L18681
	ldr	r3, .L18814+4
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L18801
.L18682:
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #136]
.L18681:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	subs	r9, r0, #0
	bne	.L18802
	ldr	r3, [r4, #136]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r9, r0, #0
	bne	.L18803
	ldr	r3, [r4, #136]
	str	r4, [r3]
	ldr	r2, [r4, #84]
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L18686
	ldr	r3, [r4, #88]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L18686
.L18687:
	mov	r3, #1
	mov	r7, r4
	str	r3, [r4, #120]
	ldr	r5, [r7, #144]!
	cmp	r7, r5
	beq	.L18679
	ldr	r8, .L18814+8
	movw	fp, #:lower16:.LC1049
	add	r6, r4, #132
	movt	fp, #:upper16:.LC1049
.L18735:
	ldrh	r3, [r8]
	ldr	r10, [r4, #140]
	tst	r3, #4
	bne	.L18804
.L18725:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #120]
	clz	r3, r10
	lsr	r3, r3, #5
	cmp	r2, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L18799
	ldr	r2, [r10]
	cmp	r2, #0
	beq	.L18799
	ldr	r2, [r4, #152]
	add	r2, r2, #1
	cmp	r2, #1
	str	r2, [r4, #152]
	beq	.L18729
.L18799:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L18728:
	ldr	r5, [r5]
	cmp	r7, r5
	bne	.L18735
.L18679:
	mov	r0, r9
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L18729:
	ldr	ip, [r10]
	mvn	lr, #94
	mov	r1, r0
	mov	r0, r6
	strb	lr, [ip]
	strb	r2, [ip, #1]
	strb	r3, [ip, #2]
	strb	r3, [ip, #3]
	ldrh	r2, [r4, #112]
	strh	r2, [ip, #4]	@ unaligned
	strb	r3, [ip, #6]
	strb	r3, [ip, #7]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r0, [r4, #136]
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r10, r0, #0
	beq	.L18728
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #144]
	str	r0, [sp, #20]
	cmp	r7, r2
	beq	.L18731
	ldr	r3, [r4, #152]
	cmp	r3, #0
	bne	.L18805
	ldr	r0, .L18814+12
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L18806
.L18733:
	mov	r0, r6
	ldr	r1, [sp, #20]
	bl	_raw_spin_unlock_irqrestore
	b	.L18728
.L18804:
	ldrb	ip, [r4, #116]	@ zero_extendqisi2
	mov	r3, r4
	mov	r1, fp
	ldr	r2, .L18814+16
	ldr	r0, .L18814+20
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L18725
.L18686:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L18689
	mov	r1, r4
	ldr	r2, [r4, #88]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L18689
	ldr	r3, .L18814+24
	movw	r5, #:lower16:.LANCHOR1
	ldrb	r0, [r4, #116]	@ zero_extendqisi2
	movt	r5, #:upper16:.LANCHOR1
	ldr	r2, [r4, #128]
	ldrh	r1, [r3, #-14]
	lsl	r3, r0, #1
	ldr	r8, [r2]
	add	r2, r3, r0
	add	r2, r5, r2, lsl #3
	tst	r1, #4
	ldr	r6, [r2, #3316]
	ldr	r7, [r2, #3320]
	bne	.L18807
.L18690:
	add	r1, r3, r0
	sub	r2, r7, #3
	add	r1, r5, r1, lsl #3
	ldr	r10, [r1, #3328]
	cmp	r2, #7
	ldrls	pc, [pc, r2, asl #2]
	b	.L18693
.L18695:
	.word	.L18694
	.word	.L18696
	.word	.L18693
	.word	.L18693
	.word	.L18693
	.word	.L18697
	.word	.L18698
	.word	.L18699
.L18694:
	ldr	r0, .L18814+28
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L18808
.L18700:
	uxtb	r2, r10
	cmp	r2, #5
	bhi	.L18701
	mov	r3, #84
	mla	r2, r3, r2, r5
	ldr	r2, [r2, #512]
	cmp	r2, #0
	beq	.L18701
	cmp	r4, #0
	beq	.L18809
	mla	r3, r3, r10, r5
	ldr	r10, [r3, #512]
	add	fp, r10, #108
	mov	r0, fp
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:grmnet_ctrl_smd_send_cpkt_tomodem
	movw	r3, #:lower16:gsmd_ctrl_send_cbits_tomodem
	str	r4, [r10, #104]
	movt	r2, #:upper16:grmnet_ctrl_smd_send_cpkt_tomodem
	movt	r3, #:upper16:gsmd_ctrl_send_cbits_tomodem
	mov	r1, r0
	mov	r0, fp
	strd	r2, [r4, #96]
	bl	_raw_spin_unlock_irqrestore
	mov	r3, #0
	add	r2, r10, #112
	ldr	r1, [r5, #3484]
	mov	r0, #4
	bl	queue_delayed_work_on
	ldrb	r0, [r4, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
.L18699:
	add	r3, r3, r0
	add	r5, r5, r3, lsl #3
	sub	r2, r6, #5
	ldr	r5, [r5, #3324]
	cmp	r2, #5
	ldrls	pc, [pc, r2, asl #2]
	b	.L18712
.L18714:
	.word	.L18713
	.word	.L18715
	.word	.L18716
	.word	.L18717
	.word	.L18718
	.word	.L18739
.L18805:
	sub	r3, r3, #1
	mov	r0, r2
	str	r2, [sp, #28]
	str	r3, [r4, #152]
	sub	r3, r2, #8
	str	r3, [sp, #24]
	bl	list_del
	ldr	r2, [sp, #28]
	ldr	r0, [r2, #-8]
	bl	kfree
	ldr	r3, [sp, #24]
	mov	r0, r3
	bl	kfree
.L18731:
	mov	r0, r6
	ldr	r1, [sp, #20]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, .L18814+32
	ldrh	r3, [r0]
	tst	r3, #4
	beq	.L18728
	movw	r1, #:lower16:.LC161
	mov	r2, r10
	movt	r1, #:upper16:.LC161
	sub	r0, r0, #18
	bl	__dynamic_pr_debug
	b	.L18728
.L18698:
	mov	r1, r10
	mov	r0, r4
	bl	ghsuart_ctrl_connect
	subs	r2, r0, #0
	bne	.L18710
.L18798:
	ldrb	r0, [r4, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L18699
.L18697:
	mov	r1, r10
	mov	r0, r4
	bl	ghsic_ctrl_connect
	subs	r2, r0, #0
	beq	.L18798
	movw	r0, #:lower16:.LC1366
	ldr	r1, .L18814+36
	mov	r9, r2
	movt	r0, #:upper16:.LC1366
	bl	printk
	b	.L18687
.L18696:
	ldr	r0, .L18814+40
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L18810
.L18705:
	cmp	r4, #0
	beq	.L18811
	ldr	r10, [r5, #3604]
	add	fp, r10, #52
	mov	r0, fp
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:grmnet_ctrl_qti_send_cpkt_tomodem
	movw	r3, #:lower16:gqti_ctrl_notify_modem
	str	r4, [r10]
	movt	r2, #:upper16:grmnet_ctrl_qti_send_cpkt_tomodem
	movt	r3, #:upper16:gqti_ctrl_notify_modem
	mov	r1, r0
	mov	r0, fp
	strd	r2, [r4, #96]
	bl	_raw_spin_unlock_irqrestore
	mov	r1, #1
	add	r0, r10, #32
	mov	r2, r1
	mov	r3, #0
	str	r1, [r10, #8]
	mov	r1, #3
	bl	__wake_up
	cmp	r10, #0
	beq	.L18798
	ldr	r0, [r10]
	cmp	r0, #0
	beq	.L18798
	ldr	r3, [r0, #108]
	cmp	r3, #0
	beq	.L18798
	blx	r3
	b	.L18798
.L18739:
	mov	r9, #0
	b	.L18687
.L18718:
	mov	r1, r5
	mov	r0, r4
	bl	ghsuart_data_connect
	subs	r9, r0, #0
	beq	.L18687
	movw	r0, #:lower16:.LC1371
	mov	r2, r9
	ldr	r1, .L18814+36
	movt	r0, #:upper16:.LC1371
	bl	printk
	mov	r1, r5
	mov	r0, r4
	bl	ghsuart_ctrl_disconnect
	b	.L18687
.L18717:
	mov	r1, r5
	mov	r0, r4
	bl	ghsic_data_connect
	subs	r9, r0, #0
	beq	.L18687
	movw	r0, #:lower16:.LC1370
	mov	r2, r9
	ldr	r1, .L18814+36
	movt	r0, #:upper16:.LC1370
	bl	printk
	mov	r1, r5
	mov	r0, r4
	bl	ghsic_ctrl_disconnect
	b	.L18687
.L18716:
	mov	r3, r5
	mov	r2, #0
	ldr	r0, [r8, #28]
	mov	r1, #2
	uxtb	r10, r5
	bl	usb_bam_get_connection_idx
	mov	r6, r0
	mov	r3, r5
	ldr	r0, [r8, #28]
	mov	r2, #1
	mov	r1, #2
	bl	usb_bam_get_connection_idx
	orrs	r3, r0, r6
	bmi	.L18812
	uxtb	r0, r0
	uxtb	r3, r6
	mov	r2, #7
	mov	r1, r10
	str	r0, [sp]
	mov	r0, r4
	bl	gbam_connect
	subs	r5, r0, #0
	beq	.L18687
	movw	r0, #:lower16:.LC1369
	mov	r2, r5
	ldr	r1, .L18814+36
	movt	r0, #:upper16:.LC1369
	bl	printk
	cmp	r7, #4
	beq	.L18813
	mov	r1, r10
	mov	r0, r4
	mov	r9, r5
	bl	gsmd_ctrl_disconnect
	b	.L18687
.L18715:
	mov	r2, #0
	mov	r3, r5
	ldr	r0, [r8, #28]
	mov	r1, r2
	uxtb	r7, r5
	bl	usb_bam_get_connection_idx
	mov	r9, r0
	mov	r3, r5
	ldr	r0, [r8, #28]
	mov	r2, #1
	mov	r1, #0
	bl	usb_bam_get_connection_idx
	orrs	r3, r0, r9
	bmi	.L18719
	uxtb	r3, r9
	uxtb	r2, r0
.L18720:
	str	r2, [sp]
	mov	r1, r7
	mov	r0, r4
	mov	r2, r6
	bl	gbam_connect
	subs	r9, r0, #0
	beq	.L18687
	movw	r0, #:lower16:.LC1369
	mov	r2, r9
	ldr	r1, .L18814+36
	movt	r0, #:upper16:.LC1369
	bl	printk
	mov	r1, r7
	mov	r0, r4
	bl	gsmd_ctrl_disconnect
	b	.L18687
.L18713:
	mov	r2, #0
	uxtb	r7, r5
	mov	r3, r2
	b	.L18720
.L18800:
	ldrb	ip, [r0, #116]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC153
	mov	r3, r0
	movt	r1, #:upper16:.LC153
	ldr	r2, .L18814+44
	sub	r0, r6, #32
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L18680
.L18801:
	movw	r1, #:lower16:.LC1363
	ldr	r2, .L18814+44
	sub	r0, r6, #8
	ldrb	r3, [r4, #116]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC1363
	bl	__dynamic_pr_debug
	ldr	r2, [r4, #136]
	b	.L18682
.L18802:
	ldr	r2, [r4, #136]
	mov	r0, #0
	movw	r1, #:lower16:.LC1141
	movt	r1, #:upper16:.LC1141
	mov	r3, r9
	str	r0, [r2, #28]
	ldr	r2, [r4, #136]
	ldr	r0, [r5]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L18679
.L18807:
	sub	r2, r7, #1
	cmp	r2, #9
	movwhi	r3, #:lower16:.LC182
	movthi	r3, #:upper16:.LC182
	bhi	.L18691
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r3, r3, r2, lsl #2
	ldr	r3, [r3, #1100]
.L18691:
	sub	r1, r6, #1
	cmp	r1, #9
	movwhi	r2, #:lower16:.LC182
	movthi	r2, #:upper16:.LC182
	bhi	.L18692
	movw	r2, #:lower16:.LANCHOR3
	movt	r2, #:upper16:.LANCHOR3
	add	r2, r2, r1, lsl #2
	ldr	r2, [r2, #1100]
.L18692:
	movw	r1, #:lower16:.LC1362
	stm	sp, {r2, r4}
	ldr	r2, .L18814+36
	str	r0, [sp, #8]
	movt	r1, #:upper16:.LC1362
	ldr	r0, .L18814+4
	bl	__dynamic_pr_debug
	ldrb	r0, [r4, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L18690
.L18689:
	ldr	r2, [r4, #84]
	mov	r3, #0
	mvn	r9, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #88]
	str	r3, [r2, #28]
	b	.L18679
.L18806:
	movw	r1, #:lower16:.LC159
	ldr	r2, .L18814+16
	sub	r0, r0, #18
	movt	r1, #:upper16:.LC159
	bl	__dynamic_pr_debug
	b	.L18733
.L18810:
	movw	r1, #:lower16:.LC1355
	ldr	r2, .L18814+48
	mov	r3, r4
	movt	r1, #:upper16:.LC1355
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L18705
.L18808:
	movw	r1, #:lower16:.LC1339
	mov	r3, r4
	ldr	r2, .L18814+52
	movt	r1, #:upper16:.LC1339
	str	r10, [sp]
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L18700
.L18803:
	ldr	r2, [r4, #136]
	movw	r0, #:lower16:.LC1152
	mov	r3, r9
	ldr	r1, .L18814+44
	movt	r0, #:upper16:.LC1152
	ldr	r2, [r2, #4]
	bl	printk
	b	.L18679
.L18710:
	movw	r0, #:lower16:.LC1367
	ldr	r1, .L18814+36
	mov	r9, r2
	movt	r0, #:upper16:.LC1367
	bl	printk
	b	.L18687
.L18693:
	sub	r7, r7, #1
	cmp	r7, #9
	bhi	.L18740
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r3, r3, r7, lsl #2
	ldr	r2, [r3, #1100]
.L18724:
	movw	r0, #:lower16:.LC593
	ldr	r1, .L18814+36
	mvn	r9, #18
	movt	r0, #:upper16:.LC593
	bl	printk
	b	.L18687
.L18712:
	sub	r6, r6, #1
	cmp	r6, #9
	bhi	.L18740
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r6, r3, r6, lsl #2
	ldr	r2, [r6, #1100]
	b	.L18724
.L18740:
	movw	r2, #:lower16:.LC182
	movt	r2, #:upper16:.LC182
	b	.L18724
.L18811:
	movw	r0, #:lower16:.LC1341
	ldr	r1, .L18814+48
	mvn	r9, #18
	movt	r0, #:upper16:.LC1341
	bl	printk
	movw	r0, #:lower16:.LC1365
	mov	r2, r9
	ldr	r1, .L18814+36
	movt	r0, #:upper16:.LC1365
	bl	printk
	b	.L18687
.L18701:
	movw	r0, #:lower16:.LC1348
	mov	r2, r10
	ldr	r1, .L18814+52
	movt	r0, #:upper16:.LC1348
	bl	printk
.L18704:
	movw	r0, #:lower16:.LC1364
	mvn	r2, #18
	ldr	r1, .L18814+36
	movt	r0, #:upper16:.LC1364
	mov	r9, r2
	bl	printk
	b	.L18687
.L18809:
	movw	r0, #:lower16:.LC1341
	ldr	r1, .L18814+52
	movt	r0, #:upper16:.LC1341
	bl	printk
	b	.L18704
.L18719:
	movw	r0, #:lower16:.LC1368
	ldr	r1, .L18814+36
	mov	r9, #0
	movt	r0, #:upper16:.LC1368
	bl	printk
	mov	r1, r7
	mov	r0, r4
	bl	gsmd_ctrl_disconnect
	b	.L18687
.L18812:
	movw	r0, #:lower16:.LC1368
	ldr	r1, .L18814+36
	mov	r9, #0
	movt	r0, #:upper16:.LC1368
	bl	printk
	mov	r1, r10
	mov	r0, r4
	bl	gsmd_ctrl_disconnect
	b	.L18687
.L18813:
	mov	r0, r4
	mov	r9, r5
	bl	gqti_ctrl_disconnect
	b	.L18687
.L18815:
	.align	2
.L18814:
	.word	.LANCHOR8-1504
	.word	.LANCHOR8-1488
	.word	.LANCHOR4+2874
	.word	.LANCHOR4+2898
	.word	.LANCHOR5-72
	.word	.LANCHOR4+2856
	.word	.LANCHOR8-1456
	.word	.LANCHOR8-2032
	.word	.LANCHOR4+2922
	.word	.LANCHOR5+2552
	.word	.LANCHOR8-1936
	.word	.LANCHOR5+2536
	.word	.LANCHOR5+2048
	.word	.LANCHOR5+1936
	.fnend
	.size	frmnet_set_alt, .-frmnet_set_alt
	.align	2
	.global	ghsuart_data_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_setup, %function
ghsuart_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r3, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	ldr	r2, [r9, #2028]
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	str	r1, [sp, #12]
	add	r10, r2, r0
	str	r2, [sp, #28]
	cmp	r10, #4
	str	r2, [sp, #32]
	movle	r1, #0
	movgt	r1, #1
	cmp	r0, #0
	moveq	r1, #1
	cmp	r1, #0
	bne	.L18842
	ldr	r0, .L18847
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L18843
.L18819:
	ldr	r1, [sp, #28]
	cmp	r1, r10
	bge	.L18816
	ldr	r2, .L18847+4
	mov	r3, #84
	mov	fp, #10
	ldr	r0, [sp, #12]
	movw	ip, #:lower16:.LC84
	mov	r7, r1
	movt	ip, #:upper16:.LC84
	mla	r3, r3, r1, r2
	str	ip, [sp, #24]
	cmp	r0, #0
	movw	r0, #:lower16:kmalloc_caches
	movne	lr, fp
	moveq	lr, #11
	add	r3, r3, #4
	movt	r0, #:upper16:kmalloc_caches
	mov	r6, r3
	movt	fp, 2
	str	r0, [sp, #16]
	str	lr, [sp, #20]
	str	r3, [sp, #36]
	b	.L18825
.L18846:
	mov	r2, #216
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L18821
.L18820:
	ldr	r3, .L18847+8
	mov	r5, #0
	mov	r2, #1
	mov	r1, fp
	ldr	r0, [sp, #24]
	ldr	r8, [r3, r7, lsl #2]
	mov	r3, r5
	stm	sp, {r5, r8}
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #108]
	beq	.L18844
	movw	r1, #:lower16:.LC714
	str	r7, [r4]
	ldr	r2, .L18847+12
	str	r5, [r4, #20]
	movt	r1, #:upper16:.LC714
	add	r0, r4, #32
	str	r5, [r4, #28]
	str	r5, [r4, #104]
	str	r5, [r4, #72]
	bl	__init_waitqueue_head
	movw	r0, #:lower16:ghsuart_data_disconnect_w
	mov	r3, #65024
	ldr	r1, [sp, #12]
	movt	r0, #:upper16:ghsuart_data_disconnect_w
	movw	r2, #:lower16:ghsuart_data_connect_w
	movt	r3, 65535
	movt	r2, #:upper16:ghsuart_data_connect_w
	movw	lr, #:lower16:ghsuart_data_write_tomdm
	movw	ip, #:lower16:ghsuart_data_write_tohost
	str	r0, [r4, #140]
	add	r0, r4, #116
	movt	lr, #:upper16:ghsuart_data_write_tomdm
	str	r1, [r4, #16]
	movw	r1, #:lower16:ghsuart_data_probe
	movt	ip, #:upper16:ghsuart_data_write_tohost
	str	r3, [r4, #112]
	movt	r1, #:upper16:ghsuart_data_probe
	strd	r2, [r4, #124]
	movw	r2, #:lower16:ghsuart_data_remove
	str	r0, [r4, #116]
	movt	r2, #:upper16:ghsuart_data_remove
	str	r0, [r4, #120]
	add	r0, r4, #132
	str	r3, [r4, #144]
	str	r3, [r4, #160]
	add	r3, r4, #48
	str	r3, [r4, #48]
	str	r3, [r4, #52]
	add	r3, r4, #80
	str	r0, [r4, #132]
	str	r0, [r4, #136]
	add	r0, r4, #148
	str	lr, [r4, #156]
	add	lr, r4, #164
	str	r3, [r4, #80]
	str	r3, [r4, #84]
	ldr	r3, [sp, #20]
	str	r5, [r4, #64]
	str	r0, [r4, #148]
	str	r0, [r4, #152]
	add	r0, r4, #56
	str	r5, [r4, #68]
	str	r0, [r4, #56]
	str	r0, [r4, #60]
	add	r0, r4, #88
	str	r5, [r4, #96]
	str	r0, [r4, #88]
	str	r0, [r4, #92]
	mov	r0, r6
	str	r5, [r4, #100]
	str	lr, [r4, #164]
	str	lr, [r4, #168]
	str	ip, [r4, #172]
	str	r4, [r4, #176]
	str	r3, [r4, #180]
	str	r4, [r6, #-4]
	stm	r6, {r1, r2}
	str	r8, [r6, #20]
	str	r5, [r6, #28]
	bl	platform_driver_register
	ldr	r0, .L18847+16
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L18845
	add	r7, r7, #1
	add	r6, r6, #84
	cmp	r10, r7
	ble	.L18816
.L18825:
	ldr	r2, [sp, #16]
	ldr	r3, [r9, #2028]
	ldr	r0, [r2, #32]
	add	r3, r3, #1
	str	r3, [r9, #2028]
	cmp	r0, #0
	bne	.L18846
	mov	r4, #16
	b	.L18820
.L18845:
	movw	r1, #:lower16:.LC602
	str	r7, [sp]
	mov	r3, r4
	sub	r0, r0, #18
	movt	r1, #:upper16:.LC602
	ldr	r2, .L18847+20
	add	r7, r7, #1
	add	r6, r6, #84
	bl	__dynamic_pr_debug
	cmp	r10, r7
	bgt	.L18825
.L18816:
	ldr	r0, [sp, #28]
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L18843:
	movw	r1, #:lower16:.LC1360
	ldr	r2, .L18847+24
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1360
	bl	__dynamic_pr_debug
	b	.L18819
.L18844:
	movw	r0, #:lower16:.LC1358
	mov	r2, r8
	ldr	r1, .L18847+20
	movt	r0, #:upper16:.LC1358
	bl	printk
	mov	r0, r4
	bl	kfree
.L18821:
	ldr	r3, [r9, #2028]
	movw	r0, #:lower16:.LC1337
	mov	r2, r7
	movt	r0, #:upper16:.LC1337
	ldr	r1, .L18847+24
	sub	r3, r3, #1
	str	r3, [r9, #2028]
	bl	printk
	ldr	r2, [sp, #28]
	ldr	r3, [r9, #2028]
	cmp	r2, r3
	bcs	.L18826
	ldr	r4, [sp, #36]
	mov	r5, r2
.L18824:
	ldr	r6, [r4, #-4]
	add	r5, r5, #1
	ldr	r0, [r6, #108]
	bl	destroy_workqueue
	mov	r0, r6
	bl	kfree
	mov	r0, r4
	add	r4, r4, #84
	bl	platform_driver_unregister
	ldr	r3, [r9, #2028]
	cmp	r5, r3
	bcc	.L18824
.L18826:
	ldr	r3, [sp, #32]
	str	r3, [r9, #2028]
	mvn	r3, #11
	str	r3, [sp, #28]
	b	.L18816
.L18842:
	mov	r2, r3
	movw	r0, #:lower16:.LC1026
	ldr	r1, .L18847+24
	mvn	r3, #21
	movt	r0, #:upper16:.LC1026
	str	r3, [sp, #28]
	bl	printk
	b	.L18816
.L18848:
	.align	2
.L18847:
	.word	.LANCHOR8-1440
	.word	.LANCHOR1+2032
	.word	.LANCHOR5+2592
	.word	.LANCHOR1+3972
	.word	.LANCHOR8-1422
	.word	.LANCHOR5+2600
	.word	.LANCHOR5+2572
	.fnend
	.size	ghsuart_data_setup, .-ghsuart_data_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_function_bind_config, %function
rmnet_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 136
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #:lower16:__stack_chk_guard
	strd	r6, [sp, #8]
	movt	r3, #:upper16:__stack_chk_guard
	mov	r6, r1
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	fp, [r9, #4060]
	.pad #172
	sub	sp, sp, #172
	str	r3, [sp, #32]
	ldr	r3, [r3]
	cmp	fp, #0
	str	r3, [sp, #164]
	beq	.L19020
.L18850:
	ldr	r3, [r9, #4064]
	cmp	r3, #0
	ble	.L18909
	ldr	fp, .L19042
	movw	r3, #:lower16:.LC1378
	mov	r5, #0
	movt	r3, #:upper16:.LC1378
	ldr	r8, .L19042+4
	str	r3, [sp, #40]
	sub	r3, fp, #24
	str	r3, [sp, #36]
.L18914:
	ldrh	r3, [fp, #-6]
	tst	r3, #4
	bne	.L19021
.L18915:
	ldr	r2, [r9, #3432]
	cmp	r5, r2
	bcs	.L19022
	movw	r2, #:lower16:.LANCHOR7
	movt	r2, #:upper16:.LANCHOR7
	ldrb	r3, [r2, #-1300]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L18918
	ldr	r1, [r6, #24]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19023
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	strb	r3, [r2, #-1300]
.L18918:
	ldr	r4, [r8, #20]
	add	r7, r4, #132
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #24]
	movw	r1, #:lower16:.LC1381
	mov	r10, r0
	mov	r2, r5
	movt	r1, #:upper16:.LC1381
	mov	r0, #32
	str	r3, [r4, #128]
	bl	kasprintf
	str	r0, [r4]
	mov	r1, r10
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4]
	cmp	r3, #0
	beq	.L19024
	ldr	r2, .L19042+8
	movw	r0, #:lower16:frmnet_bind
	movw	r1, #:lower16:frmnet_unbind
	ldr	ip, .L19042+12
	movt	r0, #:upper16:frmnet_bind
	movt	r1, #:upper16:frmnet_unbind
	movw	r7, #:lower16:.LANCHOR4
	movt	r7, #:upper16:.LANCHOR4
	str	r2, [r4, #4]
	movw	r2, #:lower16:frmnet_set_alt
	movt	r2, #:upper16:frmnet_set_alt
	strd	r0, [r4, #32]
	movw	r0, #:lower16:frmnet_setup
	movw	r1, #:lower16:frmnet_suspend
	movt	r0, #:upper16:frmnet_setup
	str	r2, [r4, #40]
	movw	r2, #:lower16:frmnet_disable
	ldrh	ip, [ip]
	movt	r2, #:upper16:frmnet_disable
	movt	r1, #:upper16:frmnet_suspend
	str	r2, [r4, #48]
	movw	r2, #:lower16:frmnet_resume
	movt	r2, #:upper16:frmnet_resume
	strd	r0, [r4, #52]
	movw	r0, #:lower16:frmnet_send_cpkt_response
	movw	r1, #:lower16:frmnet_disconnect
	movt	r0, #:upper16:frmnet_send_cpkt_response
	str	r2, [r4, #60]
	movw	r2, #:lower16:frmnet_connect
	movt	r1, #:upper16:frmnet_disconnect
	movt	r2, #:upper16:frmnet_connect
	tst	ip, #4
	str	r0, [r4, #92]
	str	r1, [r4, #104]
	str	r2, [r4, #108]
	bne	.L19025
.L18921:
	add	r10, r4, #72
	str	r6, [r4, #20]
	add	r2, r6, #36
	mov	r0, r10
	ldr	r1, [r6, #40]
	bl	__list_add
	ldr	r3, [r4, #32]
	cmp	r3, #0
	beq	.L18939
	mov	r1, r4
	mov	r0, r6
	blx	r3
	subs	r2, r0, #0
	blt	.L19026
.L18926:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L18927
	ldr	r1, [r4, #16]
	cmp	r1, #0
	beq	.L18927
	orr	r1, r3, #4
	mov	r3, r1
	strb	r1, [r6, #45]
.L18927:
	tst	r3, #2
	bne	.L18928
	ldr	r1, [r4, #8]
	cmp	r1, #0
	beq	.L18928
	ldrb	r1, [r6, #45]	@ zero_extendqisi2
	orr	r1, r1, #2
	mov	r3, r1
	strb	r1, [r6, #45]
.L18928:
	tst	r3, #1
	bne	.L18929
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L18929
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #45]
.L18929:
	cmp	r2, #0
	beq	.L18930
	movw	r3, #1410
	mov	r10, r2
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L18924
.L18925:
	movw	r0, #:lower16:.LC1383
	mov	r2, r10
	ldr	r1, .L19042+16
	movt	r0, #:upper16:.LC1383
	bl	printk
	ldr	r0, [r4]
	bl	kfree
.L18917:
	movw	r0, #:lower16:.LC1385
	mov	r2, r5
	ldr	r1, .L19042+20
	movt	r0, #:upper16:.LC1385
	bl	printk
.L18849:
	ldr	r3, [sp, #32]
	mov	r0, r10
	ldr	r2, [sp, #164]
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L19027
	add	sp, sp, #172
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L18930:
	ldr	r0, .L19042+24
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L19028
.L19018:
	ldr	r3, [r9, #4064]
	add	r5, r5, #1
	add	r8, r8, #24
	cmp	r3, r5
	bgt	.L18914
.L18909:
.L18884:
	mov	r10, #0
	b	.L18849
.L19028:
	movw	r1, #:lower16:.LC1384
	ldr	r2, .L19042+16
	sub	r0, r0, #18
	movt	r1, #:upper16:.LC1384
	bl	__dynamic_pr_debug
	b	.L19018
.L19021:
	mov	r3, r6
	ldr	r2, .L19042+16
	ldrd	r0, [sp, #36]
	bl	__dynamic_pr_debug
	b	.L18915
.L19025:
	ldr	ip, [r6]
	movw	r2, #:lower16:.LC924
	ldr	r1, [r6, #24]
	movt	r2, #:upper16:.LC924
	ldr	r0, .L19042+28
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r6, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L19029
.L18923:
	movw	r3, #1410
	mvn	r10, #21
	ldrh	r3, [r7, r3]
	tst	r3, #4
	beq	.L18925
.L18924:
	ldr	r1, [r6, #24]
	movw	r2, #:lower16:.LC925
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC925
	ldr	r0, .L19042+32
	ldr	r1, [r1]
	stm	sp, {r4, r10}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L18925
.L19026:
	mov	r0, r10
	str	r2, [sp, #44]
	bl	list_del
	mov	r3, #0
	ldr	r2, [sp, #44]
	str	r3, [r4, #20]
	b	.L18926
.L19020:
	mov	r3, #1
	ldr	r1, .L19042+36
	mov	r2, #50
	add	r0, sp, #64
	movw	r4, #:lower16:.LC459
	str	r3, [r9, #4060]
	movt	r4, #:upper16:.LC459
	bl	strlcpy
	add	r0, sp, #64
	bl	strim
	str	r0, [sp, #56]
	mov	r2, #50
	add	r1, r9, #3072
	add	r0, sp, #114
	bl	strlcpy
	add	r0, sp, #114
	bl	strim
	str	fp, [sp, #36]
	str	r6, [sp, #40]
	str	fp, [sp, #44]
	str	r0, [sp, #60]
	b	.L18852
.L18885:
	mov	r1, r4
	add	r0, sp, #56
	bl	strsep
	mov	r5, r0
	mov	r1, r4
	add	r0, sp, #56
	bl	strsep
	cmp	r5, #0
	cmpne	r0, #0
	bne	.L19030
.L18852:
	ldr	r3, [sp, #56]
	cmp	r3, #0
	bne	.L18885
	ldr	r2, .L19042+40
	ldr	r0, [r9, #3448]
	ldr	r3, [r9, #3452]
	ldr	r6, [sp, #40]
	ldrh	r1, [r2, #-14]
	tst	r1, #4
	bne	.L19031
.L18886:
	cmp	r0, #0
	bne	.L18887
	cmp	r3, #0
	beq	.L18891
.L18887:
	mov	r1, r3
	bl	gbam_setup
	subs	r10, r0, #0
	bne	.L18890
.L18891:
	ldr	r1, [r9, #3440]
	cmp	r1, #0
	bne	.L19032
.L18889:
	ldr	r0, [r9, #3460]
	cmp	r0, #0
	bne	.L19033
.L18895:
	ldr	r0, [r9, #3456]
	cmp	r0, #0
	bne	.L19034
.L18899:
	ldr	r0, [r9, #3468]
	cmp	r0, #0
	bne	.L19035
.L18903:
	ldr	r0, [r9, #3464]
	cmp	r0, #0
	beq	.L18850
	mov	r1, #1
	bl	ghsuart_ctrl_setup
	subs	r10, r0, #0
	blt	.L18890
	ldr	r3, [r9, #3432]
	cmp	r3, #0
	beq	.L18850
	ldr	r2, [r9, #3320]
	cmp	r2, #9
	streq	r10, [r9, #3328]
	addeq	r10, r10, #1
	cmp	r3, #1
	bls	.L18850
	ldr	r2, [r9, #3344]
	cmp	r2, #9
	streq	r10, [r9, #3352]
	addeq	r10, r10, #1
	cmp	r3, #2
	beq	.L18850
	ldr	r3, [r9, #3368]
	cmp	r3, #9
	streq	r10, [r9, #3376]
	b	.L18850
.L19032:
	add	r2, sp, #55
	mov	r0, #0
	bl	gsmd_ctrl_setup
	subs	r10, r0, #0
	beq	.L19036
.L18890:
	movw	r0, #:lower16:.LC1386
	ldr	r1, .L19042+20
	movt	r0, #:upper16:.LC1386
	bl	printk
	b	.L18849
.L19030:
	ldr	r3, [sp, #60]
	mov	r7, r0
	cmp	r3, #0
	beq	.L18853
	mov	r1, r4
	add	r0, sp, #60
	bl	strsep
	str	r0, [sp, #36]
.L18853:
	ldr	r3, [r9, #3432]
	cmp	r3, #2
	bhi	.L19037
	ldr	r2, .L19042+44
	ldrh	r2, [r2]
	tst	r2, #4
	bne	.L19038
.L18856:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L18936
	mov	r2, #160
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r2, r0, #0
	beq	.L19039
.L18857:
	ldr	r8, [r9, #3432]
	add	r3, r2, #144
	mov	r1, #0
	mov	r0, r5
	str	r3, [r2, #144]
	lsl	r10, r8, #1
	str	r3, [r2, #148]
	strb	r8, [r2, #116]
	add	r3, r10, r8
	str	r1, [r2, #132]
	add	r6, r9, r3, lsl #3
	str	r8, [r6, #3332]
	str	r2, [r6, #3336]
	bl	str_to_xport
	mov	fp, r0
	mov	r0, r7
	str	fp, [r6, #3320]
	bl	str_to_xport
	sub	r1, fp, #3
	str	r0, [r6, #3316]
	cmp	r1, #7
	ldrls	pc, [pc, r1, asl #2]
	b	.L18858
.L18860:
	.word	.L18859
	.word	.L18861
	.word	.L18858
	.word	.L18858
	.word	.L18858
	.word	.L18862
	.word	.L18863
	.word	.L18864
.L18939:
	mov	r2, r3
	b	.L18926
.L18936:
	mov	r2, #16
	b	.L18857
.L18862:
	ldr	r2, [r9, #4052]
	cmp	r2, #3
	bhi	.L19040
	ldr	fp, .L19042+48
	mov	r0, #104
	ldr	r3, [sp, #36]
	mla	r2, r0, r2, fp
	cmp	r3, #0
	movne	r1, r3
	moveq	r1, r5
	add	r0, r2, #84
	moveq	r2, #20
	movne	r2, #20
	bl	strlcpy
	ldr	r0, [r9, #4052]
	mov	ip, #104
	movw	r1, #:lower16:.LC1357
	movt	r1, #:upper16:.LC1357
	mov	r2, #20
	mla	r0, ip, r0, fp
	add	r0, r0, #84
	bl	strlcat
	ldr	r3, [r9, #4052]
	add	r3, r3, #1
	str	r3, [r9, #4052]
.L18866:
	add	r3, r10, r8
	ldr	r2, [r9, #3456]
	add	r3, r9, r3, lsl #3
	ldr	r0, [r3, #3316]
	add	r1, r2, #1
	str	r2, [r3, #3328]
	str	r1, [r9, #3456]
.L18864:
	sub	r3, r0, #5
	cmp	r3, #5
	ldrls	pc, [pc, r3, asl #2]
	b	.L18870
.L18872:
	.word	.L18871
	.word	.L18873
	.word	.L18873
	.word	.L18874
	.word	.L18875
	.word	.L18876
.L18874:
	ldr	r2, [r9, #4056]
	cmp	r2, #3
	bhi	.L19041
	ldr	r5, .L19042+52
	mov	r0, #104
	ldr	r3, [sp, #36]
	mla	r2, r0, r2, r5
	cmp	r3, #0
	movne	r1, r3
	moveq	r1, r7
	add	r0, r2, #84
	mov	r2, #20
	bl	strlcpy
	ldr	r0, [r9, #4056]
	mov	r3, #104
	movw	r1, #:lower16:.LC1359
	movt	r1, #:upper16:.LC1359
	mov	r2, #20
	mla	r0, r3, r0, r5
	add	r0, r0, #84
	bl	strlcat
	ldr	r3, [r9, #4056]
	add	r3, r3, #1
	str	r3, [r9, #4056]
.L18878:
	ldr	r2, [r9, #3460]
	add	r3, r10, r8
	add	r3, r9, r3, lsl #3
	add	r1, r2, #1
	str	r2, [r3, #3324]
	str	r1, [r9, #3460]
.L18876:
	ldr	r2, [r9, #3432]
	ldr	r3, [r9, #4064]
	add	r2, r2, #1
	add	r3, r3, #1
	str	r2, [r9, #3432]
	str	r3, [r9, #4064]
	b	.L18852
.L18875:
	ldr	r2, [r9, #3468]
	add	r3, r10, r8
	add	r3, r9, r3, lsl #3
	add	r1, r2, #1
	str	r2, [r3, #3324]
	str	r1, [r9, #3468]
	b	.L18876
.L18873:
	ldr	r2, [r9, #3452]
	add	r3, r10, r8
	add	r3, r9, r3, lsl #3
	add	r1, r2, #1
	str	r2, [r3, #3324]
	str	r1, [r9, #3452]
	b	.L18876
.L18871:
	ldr	r2, [r9, #3448]
	add	r3, r10, r8
	add	r3, r9, r3, lsl #3
	add	r1, r2, #1
	str	r2, [r3, #3324]
	str	r1, [r9, #3448]
	b	.L18876
.L18863:
	ldr	r2, [r9, #3464]
	add	r3, r10, r8
	add	r3, r9, r3, lsl #3
	add	r1, r2, #1
	str	r2, [r3, #3328]
	str	r1, [r9, #3464]
	b	.L18864
.L18861:
	ldr	r2, [r9, #3444]
	add	r3, r10, r8
	add	r3, r9, r3, lsl #3
	add	r1, r2, #1
	str	r2, [r3, #3328]
	str	r1, [r9, #3444]
	b	.L18864
.L18859:
	ldr	r2, [r9, #3440]
	add	r3, r10, r8
	add	r3, r9, r3, lsl #3
	add	r1, r2, #1
	str	r2, [r3, #3328]
	str	r1, [r9, #3440]
	b	.L18864
.L19033:
	mov	r1, #1
	bl	ghsic_data_setup
	subs	r10, r0, #0
	blt	.L18890
	ldr	r3, [r9, #3432]
	cmp	r3, #0
	beq	.L18895
	ldr	r2, [r9, #3316]
	cmp	r2, #8
	streq	r10, [r9, #3324]
	addeq	r10, r10, #1
	cmp	r3, #1
	bls	.L18895
	ldr	r2, [r9, #3340]
	cmp	r2, #8
	streq	r10, [r9, #3348]
	addeq	r10, r10, #1
	cmp	r3, #2
	beq	.L18895
	ldr	r3, [r9, #3364]
	cmp	r3, #8
	streq	r10, [r9, #3372]
	b	.L18895
.L19034:
	mov	r1, #1
	bl	ghsic_ctrl_setup
	subs	r10, r0, #0
	blt	.L18890
	ldr	r3, [r9, #3432]
	cmp	r3, #0
	beq	.L18899
	ldr	r2, [r9, #3320]
	cmp	r2, #8
	streq	r10, [r9, #3328]
	addeq	r10, r10, #1
	cmp	r3, #1
	bls	.L18899
	ldr	r2, [r9, #3344]
	cmp	r2, #8
	streq	r10, [r9, #3352]
	addeq	r10, r10, #1
	cmp	r3, #2
	beq	.L18899
	ldr	r3, [r9, #3368]
	cmp	r3, #8
	streq	r10, [r9, #3376]
	b	.L18899
.L19035:
	mov	r1, #1
	bl	ghsuart_data_setup
	subs	r10, r0, #0
	blt	.L18890
	ldr	r3, [r9, #3432]
	cmp	r3, #0
	beq	.L18903
	ldr	r2, [r9, #3316]
	cmp	r2, #9
	streq	r10, [r9, #3324]
	addeq	r10, r10, #1
	cmp	r3, #1
	bls	.L18903
	ldr	r2, [r9, #3340]
	cmp	r2, #9
	streq	r10, [r9, #3348]
	addeq	r10, r10, #1
	cmp	r3, #2
	beq	.L18903
	ldr	r3, [r9, #3364]
	cmp	r3, #9
	streq	r10, [r9, #3372]
	b	.L18903
.L19036:
	ldr	r3, [r9, #3432]
	cmp	r3, #0
	beq	.L18889
	ldr	r1, [r9, #3336]
	ldrb	r2, [sp, #55]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L18892
	ldrb	r0, [r1, #116]	@ zero_extendqisi2
	add	r0, r2, r0
	strb	r0, [r1, #116]
.L18892:
	cmp	r3, #1
	bls	.L18889
	ldr	r1, [r9, #3360]
	cmp	r1, #0
	beq	.L18893
	ldrb	r0, [r1, #116]	@ zero_extendqisi2
	add	r0, r2, r0
	strb	r0, [r1, #116]
.L18893:
	cmp	r3, #2
	beq	.L18889
	ldr	r3, [r9, #3384]
	cmp	r3, #0
	beq	.L18889
	ldrb	r1, [r3, #116]	@ zero_extendqisi2
	add	r2, r2, r1
	strb	r2, [r3, #116]
	b	.L18889
.L19031:
	ldr	r5, [r9, #3432]
	movw	r1, #:lower16:.LC1377
	ldr	ip, [r9, #3440]
	movt	r1, #:upper16:.LC1377
	ldr	lr, [r9, #3460]
	ldr	r4, [r9, #3456]
	str	r5, [sp, #24]
	stm	sp, {r3, lr}
	mov	r3, r0
	sub	r0, r2, #32
	str	ip, [sp, #12]
	ldr	r2, [r9, #3464]
	ldr	ip, [r9, #3468]
	str	ip, [sp, #8]
	str	r4, [sp, #16]
	str	r2, [sp, #20]
	ldr	r2, .L19042+56
	bl	__dynamic_pr_debug
	ldr	r0, [r9, #3448]
	ldr	r3, [r9, #3452]
	b	.L18886
.L19038:
	movw	r1, #:lower16:.LC1373
	ldr	r2, .L19042+60
	stm	sp, {r5, r7}
	movt	r1, #:upper16:.LC1373
	ldr	r0, .L19042+64
	bl	__dynamic_pr_debug
	b	.L18856
.L19024:
	movw	r0, #:lower16:.LC1382
	ldr	r1, .L19042+16
	mvn	r10, #11
	movt	r0, #:upper16:.LC1382
	bl	printk
	b	.L18917
.L19022:
	movw	r0, #:lower16:.LC1379
	ldr	r1, .L19042+16
	mov	r3, r5
	movt	r0, #:upper16:.LC1379
	mvn	r10, #18
	bl	printk
	b	.L18917
.L19023:
	movw	r0, #:lower16:.LC1380
	mvn	r2, #18
	ldr	r1, .L19042+16
	movt	r0, #:upper16:.LC1380
	mov	r10, r2
	bl	printk
	b	.L18917
.L19040:
	movw	r0, #:lower16:.LC1356
	ldr	r1, .L19042+68
	movt	r0, #:upper16:.LC1356
	bl	printk
	b	.L18866
.L19029:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L18923
	b	.L18921
.L19041:
	movw	r0, #:lower16:.LC1356
	ldr	r1, .L19042+72
	movt	r0, #:upper16:.LC1356
	bl	printk
	b	.L18878
.L18870:
	mov	r1, r0
	movw	r0, #:lower16:.LC1375
	ldr	fp, [sp, #44]
	mov	r2, r1
	movt	r0, #:upper16:.LC1375
	ldr	r1, .L19042+60
	bl	printk
.L18869:
	ldr	r3, [r9, #3432]
	cmp	r3, #0
	ldrne	r4, .L19042+4
	beq	.L18882
.L18883:
	ldr	r0, [r4, #20]
	add	fp, fp, #1
	add	r4, r4, #24
	bl	kfree
	ldr	r3, [r9, #3432]
	cmp	fp, r3
	bcc	.L18883
.L18882:
	mov	r3, #0
	mvn	r10, #18
	str	r3, [r9, #3432]
	str	r3, [r9, #3440]
	str	r3, [r9, #3444]
	str	r3, [r9, #3448]
	str	r3, [r9, #3456]
	str	r3, [r9, #3460]
	str	r3, [r9, #3464]
	str	r3, [r9, #3468]
	b	.L18855
.L18858:
	movw	r0, #:lower16:.LC1375
	mov	r2, fp
	ldr	r1, .L19042+60
	movt	r0, #:upper16:.LC1375
	ldr	fp, [sp, #44]
	bl	printk
	b	.L18869
.L19037:
	movw	r0, #:lower16:.LC1372
	mov	r2, #3
	ldr	r1, .L19042+60
	movt	r0, #:upper16:.LC1372
	mvn	r10, #21
	bl	printk
.L18855:
	movw	r0, #:lower16:.LC1376
	mov	r3, r7
	ldr	r1, .L19042+20
	mov	r2, r5
	movt	r0, #:upper16:.LC1376
	bl	printk
	b	.L18849
.L19027:
	bl	__stack_chk_fail
.L19039:
	movw	r0, #:lower16:.LC1374
	ldr	r1, .L19042+60
	mvn	r10, #11
	movt	r0, #:upper16:.LC1374
	bl	printk
	b	.L18855
.L19043:
	.align	2
.L19042:
	.word	.LANCHOR8-1344
	.word	.LANCHOR1+3316
	.word	.LANCHOR7-1284
	.word	.LANCHOR4+1386
	.word	.LANCHOR5+2692
	.word	.LANCHOR5+2644
	.word	.LANCHOR8-1326
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.word	.LANCHOR1+3124
	.word	.LANCHOR8-1360
	.word	.LANCHOR8-1398
	.word	.LANCHOR1+1020
	.word	.LANCHOR1+1440
	.word	.LANCHOR5+2672
	.word	.LANCHOR5+2624
	.word	.LANCHOR8-1416
	.word	.LANCHOR5+2136
	.word	.LANCHOR5+2248
	.fnend
	.size	rmnet_function_bind_config, .-rmnet_function_bind_config
	.align	2
	.global	notify_control_line_state
	.syntax unified
	.arm
	.fpu softvfp
	.type	notify_control_line_state, %function
notify_control_line_state:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR1
	.save {lr}
	str	lr, [sp, #-4]!
	mov	lr, #1
	movt	ip, #:upper16:.LANCHOR1
	mov	r2, lr
	mov	r1, lr
	mov	r3, #0
	str	lr, [ip, #2200]
	ldr	lr, [sp], #4
	str	r0, [ip, #3480]
	add	r0, ip, #2192
	add	r0, r0, #12
	b	__wake_up
	.fnend
	.size	notify_control_line_state, .-notify_control_line_state
	.align	2
	.global	modem_register
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_register, %function
modem_register:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r2, r0, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	beq	.L19050
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC1106
	movt	r3, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC1106
	str	r2, [r3, #3996]
	bl	printk
	mov	r0, #0
.L19046:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L19050:
	movw	r0, #:lower16:.LC1105
	movt	r0, #:upper16:.LC1105
	bl	printk
	mvn	r0, #0
	b	.L19046
	.fnend
	.size	modem_register, .-modem_register
	.align	2
	.global	modem_unregister
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_unregister, %function
modem_unregister:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, #1
	movt	ip, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	mov	lr, #0
	add	r0, ip, #2192
	mov	r3, lr
	add	r0, r0, #12
	mov	r1, r2
	str	r2, [ip, #2200]
	str	lr, [ip, #3996]
	bl	__wake_up
	movw	r0, #:lower16:.LC768
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC768
	add	sp, sp, #8
	b	printk
	.fnend
	.size	modem_unregister, .-modem_unregister
	.align	2
	.global	acm_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_bind_config, %function
acm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r2, [r3, #1956]	@ zero_extendqisi2
	.pad #16
	sub	sp, sp, #16
	cmp	r2, #0
	bne	.L19054
	ldr	ip, [r0, #24]
	ldrb	r2, [ip, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L19057
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [ip, #48]
	ldr	ip, [r0, #24]
	strb	r2, [r3, #1956]
	strb	r2, [r3, #1996]
	ldrb	r2, [ip, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L19057
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [ip, #48]
	ldr	ip, [r0, #24]
	strb	r2, [r3, #1964]
	strb	r2, [r3, #2008]
	ldrb	r2, [ip, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L19057
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r3, #1972]
	strb	r2, [r3, #2019]
	strb	r2, [ip, #48]
.L19054:
	movw	r3, #:lower16:kmalloc_caches
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	mov	r6, r1
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L19068
	mov	r2, #172
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L19094
.L19058:
	movw	r0, #:lower16:acm_connect
	movw	r1, #:lower16:acm_disconnect
	strb	r6, [r4, #146]
	movt	r0, #:upper16:acm_connect
	movt	r1, #:upper16:acm_disconnect
	movw	r3, #:lower16:acm_send_break
	mov	ip, #0
	movt	r3, #:upper16:acm_send_break
	strd	r0, [r4, #116]
	movw	r1, #:lower16:.LC923
	mov	r2, r6
	movt	r1, #:upper16:.LC923
	str	r3, [r4, #124]
	mov	r0, #208
	str	ip, [r4, #148]
	bl	kasprintf
	cmp	r0, #0
	str	r0, [r4]
	beq	.L19095
	ldr	r3, .L19098
	movw	ip, #:lower16:acm_bind
	movw	r1, #:lower16:acm_unbind
	movw	r2, #:lower16:acm_set_alt
	movt	r1, #:upper16:acm_unbind
	movt	r2, #:upper16:acm_set_alt
	movt	ip, #:upper16:acm_bind
	movw	r6, #:lower16:.LANCHOR4
	str	r3, [r4, #4]
	movt	r6, #:upper16:.LANCHOR4
	movw	r3, #1386
	str	ip, [r4, #32]
	str	r1, [r4, #36]
	movw	r1, #:lower16:acm_setup
	str	r2, [r4, #40]
	ldrh	r3, [r6, r3]
	movw	r2, #:lower16:acm_disable
	movt	r1, #:upper16:acm_setup
	movt	r2, #:upper16:acm_disable
	str	r2, [r4, #48]
	tst	r3, #4
	str	r1, [r4, #52]
	bne	.L19096
.L19060:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L19063
	add	r8, r4, #72
	str	r5, [r4, #20]
	add	r2, r5, #36
	mov	r0, r8
	ldr	r1, [r5, #40]
	bl	__list_add
	ldr	r7, [r4, #32]
	cmp	r7, #0
	beq	.L19064
	mov	r1, r4
	mov	r0, r5
	blx	r7
	subs	r7, r0, #0
	blt	.L19097
.L19064:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L19065
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L19065
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L19065:
	tst	r3, #2
	bne	.L19066
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L19066
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L19066:
	tst	r3, #1
	bne	.L19067
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L19067
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L19067:
	cmp	r7, #0
	beq	.L19053
	movw	r3, #1410
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L19062
	b	.L19061
.L19096:
	ldr	ip, [r5]
	movw	r2, #:lower16:.LC924
	mov	r3, r0
	ldr	r1, [r5, #24]
	movt	r2, #:upper16:.LC924
	ldr	r0, .L19098+4
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r5, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L19060
.L19063:
	movw	r3, #1410
	mvn	r7, #21
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L19062
.L19061:
	ldr	r1, [r5, #24]
	movw	r2, #:lower16:.LC925
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC925
	ldr	r0, .L19098+8
	ldr	r1, [r1]
	stm	sp, {r4, r7}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L19062:
	mov	r0, r4
	bl	kfree
.L19053:
	mov	r0, r7
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L19068:
	mov	r4, #16
	b	.L19058
.L19097:
	mov	r0, r8
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L19064
.L19057:
	mvn	r7, #18
	b	.L19053
.L19095:
	mov	r0, r4
	mvn	r7, #11
	bl	kfree
	b	.L19053
.L19094:
	mvn	r7, #11
	b	.L19053
.L19099:
	.align	2
.L19098:
	.word	.LANCHOR0+2020
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.fnend
	.size	acm_bind_config, .-acm_bind_config
	.align	2
	.global	adb_req_put
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_req_put, %function
adb_req_put:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r4, r0, #88
	mov	r0, r4
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	mov	r6, r2
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	ldr	r1, [r7, #4]
	add	r0, r6, #36
	mov	r2, r7
	bl	__list_add
	ldrd	r6, [sp, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	adb_req_put, .-adb_req_put
	.align	2
	.global	adb_req_get
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_req_get, %function
adb_req_get:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #88
	mov	r4, r1
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4]
	mov	r6, r0
	cmp	r4, r3
	beq	.L19104
	mov	r0, r3
	sub	r4, r3, #36
	bl	list_del
.L19103:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L19104:
	mov	r4, #0
	b	.L19103
	.fnend
	.size	adb_req_get, .-adb_req_get
	.align	2
	.global	f_midi_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_bind_config, %function
f_midi_bind_config:
	.fnstart
	@ args = 16, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r9, [sp, #60]
	cmp	r9, #0
	beq	.L19107
	mvn	ip, #0
	str	ip, [r9]
	str	ip, [r9, #4]
.L19107:
	ldr	ip, [sp, #48]
	cmp	ip, #16
	cmpls	r3, #16
	bhi	.L19117
	movw	fp, #:lower16:kmalloc_caches
	mov	r10, r0
	stm	sp, {r1, r2}
	movt	fp, #:upper16:kmalloc_caches
	mov	r8, r3
	ldr	r0, [fp, #36]
	cmp	r0, #0
	beq	.L19118
	mov	r2, #344
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L19134
.L19109:
	cmp	r8, #0
	addne	r7, r5, #228
	movne	r6, r8
	movne	r4, #0
	beq	.L19135
.L19112:
	ldr	ip, [fp, #24]
	mov	r2, #12
	movw	r1, #32976
	mov	r3, #16
	subs	r0, ip, #0
	beq	.L19110
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L19121
.L19110:
	mov	r2, #0
	str	r5, [r3]
	strb	r4, [r3, #8]
	add	r4, r4, #1
	cmp	r4, r8
	str	r2, [r3, #4]
	str	r3, [r7, #4]!
	bne	.L19112
.L19113:
	ldr	r3, [r10, #24]
	movw	r1, #:lower16:f_midi_in_tasklet
	mov	r2, r5
	movt	r1, #:upper16:f_midi_in_tasklet
	add	r0, r5, #300
	ldr	r3, [r3]
	str	r3, [r5, #84]
	bl	tasklet_init
	ldr	r0, [sp, #4]
	mov	r1, #208
	bl	kstrdup
	ldr	r3, [sp, #48]
	str	r8, [r5, #320]
	str	r3, [r5, #324]
	ldr	r3, [sp]
	str	r0, [r5, #332]
	mov	r0, r5
	str	r3, [r5, #328]
	ldr	r3, [sp, #52]
	str	r3, [r5, #336]
	ldr	r3, [sp, #56]
	str	r3, [r5, #340]
	bl	f_midi_register_card
	subs	r7, r0, #0
	bge	.L19136
.L19111:
	cmp	r6, #0
	beq	.L19115
	add	r6, r5, r6, lsl #2
	add	r4, r5, #232
	add	r6, r6, #232
.L19116:
	ldr	r0, [r6, #-4]!
	bl	kfree
	cmp	r4, r6
	bne	.L19116
.L19115:
	mov	r0, r5
	bl	kfree
.L19106:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L19136:
	ldr	lr, .L19137
	movw	r3, #:lower16:.LC1162
	movw	ip, #:lower16:f_midi_bind
	movt	r3, #:upper16:.LC1162
	movw	r1, #:lower16:f_midi_unbind
	movw	r2, #:lower16:f_midi_set_alt
	movt	ip, #:upper16:f_midi_bind
	movt	r1, #:upper16:f_midi_unbind
	movt	r2, #:upper16:f_midi_set_alt
	stm	r5, {r3, lr}
	movw	r3, #:lower16:f_midi_disable
	mov	r0, r10
	movt	r3, #:upper16:f_midi_disable
	str	ip, [r5, #32]
	str	r1, [r5, #36]
	mov	r1, r5
	str	r2, [r5, #40]
	str	r3, [r5, #48]
	bl	usb_add_function
	subs	r7, r0, #0
	bne	.L19111
	cmp	r9, #0
	beq	.L19106
	ldr	r3, [r5, #100]
	ldr	r3, [r3]
	ldr	r3, [r3]
	str	r3, [r9]
	ldr	r3, [r5, #100]
	ldr	r3, [r3, #12]
	str	r3, [r9, #4]
	ldr	r3, [r5, #100]
	ldr	r3, [r3]
	ldr	r3, [r3]
	str	r3, [r9]
	ldr	r3, [r5, #100]
	ldr	r3, [r3, #12]
	str	r3, [r9, #4]
	b	.L19106
.L19118:
	mov	r5, #16
	b	.L19109
.L19121:
	mov	r6, r4
	mvn	r7, #11
	b	.L19111
.L19135:
	mov	r6, r8
	b	.L19113
.L19117:
	mvn	r7, #21
	b	.L19106
.L19134:
	mvn	r7, #11
	b	.L19106
.L19138:
	.align	2
.L19137:
	.word	.LANCHOR7-1992
	.fnend
	.size	f_midi_bind_config, .-f_midi_bind_config
	.align	2
	.global	rndis_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_bind_config, %function
rndis_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:__stack_chk_guard
	movt	r6, #:upper16:__stack_chk_guard
	strd	r8, [sp, #16]
	subs	r9, r1, #0
	ldr	r3, [r6]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #40
	sub	sp, sp, #40
	str	r3, [sp, #36]
	beq	.L19158
	movw	r7, #:lower16:.LANCHOR1
	mov	r8, r0
	movt	r7, #:upper16:.LANCHOR1
	ldrb	r3, [r7, #3740]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L19141
.L19144:
	movw	r5, #:lower16:.LANCHOR7
	movt	r5, #:upper16:.LANCHOR7
	ldrb	r3, [r5, #-1644]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L19143
	ldr	r2, [r8, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19146
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r8, #24]
	strb	r3, [r5, #-1648]
	strb	r3, [r5, #-1644]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19146
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r8, #24]
	strb	r3, [r5, #-1636]
	strb	r3, [r5, #-1604]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19146
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	strb	r3, [r5, #-1657]
	strb	r3, [r5, #-1628]
.L19143:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L19159
	mov	r2, #180
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L19188
.L19147:
	ldr	r2, [r9]	@ unaligned
	movw	r3, #:lower16:.LC1179
	movw	r0, #:lower16:rndis_bind
	ldr	ip, .L19192
	movw	r1, #:lower16:rndis_unbind
	movt	r0, #:upper16:rndis_bind
	movt	r1, #:upper16:rndis_unbind
	movt	r3, #:upper16:.LC1179
	ldr	lr, [r5, #-1600]
	str	r2, [r4, #150]	@ unaligned
	movw	r2, #:lower16:rndis_set_alt
	ldrh	r10, [r9, #4]	@ unaligned
	movt	r2, #:upper16:rndis_set_alt
	movw	r9, #:lower16:.LANCHOR4
	str	ip, [r4, #4]
	movt	r9, #:upper16:.LANCHOR4
	strd	r0, [r4, #32]
	ldr	ip, [r5, #-1596]
	str	r3, [r4]
	movw	r1, #:lower16:rndis_add_header
	str	r2, [r4, #40]
	movw	r2, #1386
	movt	r1, #:upper16:rndis_add_header
	ldrh	r0, [r9, r2]
	movw	r2, #:lower16:rndis_rm_hdr
	str	lr, [r4, #116]
	movt	r2, #:upper16:rndis_rm_hdr
	str	ip, [r4, #120]
	str	r1, [r4, #128]
	movw	r1, #:lower16:rndis_disable
	movt	r1, #:upper16:rndis_disable
	tst	r0, #4
	movw	r0, #:lower16:rndis_setup
	movt	r0, #:upper16:rndis_setup
	str	r2, [r4, #132]
	mov	r2, #0
	str	r1, [r4, #48]
	str	r0, [r4, #52]
	mov	r0, #44
	strh	r2, [r4, #98]	@ movhi
	str	r0, [r4, #100]
	strh	r10, [r4, #154]	@ unaligned
	str	r2, [r4, #156]
	str	r2, [r4, #160]
	bne	.L19189
.L19149:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L19152
	add	r10, r4, #72
	str	r8, [r4, #20]
	add	r2, r8, #36
	mov	r0, r10
	ldr	r1, [r8, #40]
	bl	__list_add
	ldr	r5, [r4, #32]
	cmp	r5, #0
	beq	.L19153
	mov	r1, r4
	mov	r0, r8
	blx	r5
	subs	r5, r0, #0
	blt	.L19190
.L19153:
	ldrb	r3, [r8, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L19154
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L19154
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r8, #45]
.L19154:
	tst	r3, #2
	bne	.L19155
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L19155
	ldrb	r2, [r8, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r8, #45]
.L19155:
	tst	r3, #1
	bne	.L19156
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L19156
	ldrb	r3, [r8, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r8, #45]
.L19156:
	cmp	r5, #0
	beq	.L19139
	movw	r3, #1410
	ldrh	r3, [r9, r3]
	tst	r3, #4
	beq	.L19151
	b	.L19150
.L19189:
	ldr	ip, [r8]
	movw	r2, #:lower16:.LC924
	ldr	r1, [r8, #24]
	movt	r2, #:upper16:.LC924
	ldr	r0, .L19192+4
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r8, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L19149
.L19152:
	movw	r3, #1410
	mvn	r5, #21
	ldrh	r3, [r9, r3]
	tst	r3, #4
	beq	.L19151
.L19150:
	ldr	r1, [r8, #24]
	movw	r2, #:lower16:.LC925
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC925
	ldr	r0, .L19192+8
	ldr	r1, [r1]
	strd	r4, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L19151:
	mov	r0, r4
	bl	kfree
.L19148:
	ldrb	r3, [r7, #3740]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L19139
	mov	r4, #0
	movw	r1, #:lower16:.LC596
	movt	r1, #:upper16:.LC596
	mov	r2, r4
	add	r0, sp, #16
	strb	r4, [r7, #3740]
	bl	sprintf
	add	r0, sp, #16
	mov	r1, r4
	bl	remove_proc_entry
.L19139:
	ldr	r2, [sp, #36]
	mov	r0, r5
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L19191
	add	sp, sp, #40
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L19141:
	bl	rndis_init.part.89
	subs	r5, r0, #0
	bge	.L19144
	b	.L19139
.L19159:
	mov	r4, #16
	b	.L19147
.L19188:
	mvn	r5, #11
	b	.L19148
.L19190:
	mov	r0, r10
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L19153
.L19146:
	mvn	r5, #18
	b	.L19139
.L19158:
	mvn	r5, #21
	b	.L19139
.L19191:
	bl	__stack_chk_fail
.L19193:
	.align	2
.L19192:
	.word	.LANCHOR7-1592
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.fnend
	.size	rndis_bind_config, .-rndis_bind_config
	.align	2
	.global	rndis_bind_config_vendor
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_bind_config_vendor, %function
rndis_bind_config_vendor:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #:lower16:__stack_chk_guard
	movt	r5, #:upper16:__stack_chk_guard
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	subs	r9, r1, #0
	ldr	r1, [r5]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	str	r1, [sp, #36]
	beq	.L19213
	movw	r6, #:lower16:.LANCHOR1
	mov	fp, r3
	movt	r6, #:upper16:.LANCHOR1
	mov	r7, r0
	ldrb	r3, [r6, #3740]	@ zero_extendqisi2
	mov	r10, r2
	cmp	r3, #0
	beq	.L19196
.L19199:
	movw	r8, #:lower16:.LANCHOR7
	movt	r8, #:upper16:.LANCHOR7
	ldrb	r3, [r8, #-1644]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L19198
	ldr	r2, [r7, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19201
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r7, #24]
	strb	r3, [r8, #-1648]
	strb	r3, [r8, #-1644]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19201
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r7, #24]
	strb	r3, [r8, #-1636]
	strb	r3, [r8, #-1604]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19201
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	strb	r3, [r8, #-1657]
	strb	r3, [r8, #-1628]
.L19198:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L19214
	mov	r2, #180
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L19243
.L19202:
	ldr	r2, [r9]	@ unaligned
	movw	r0, #:lower16:rndis_unbind
	movw	r3, #:lower16:.LC1179
	ldr	lr, .L19247
	movt	r0, #:upper16:rndis_unbind
	movw	ip, #:lower16:rndis_bind
	movt	ip, #:upper16:rndis_bind
	movt	r3, #:upper16:.LC1179
	str	r2, [r4, #150]	@ unaligned
	movw	r2, #:lower16:rndis_set_alt
	ldrh	r1, [r9, #4]	@ unaligned
	movt	r2, #:upper16:rndis_set_alt
	movw	r9, #:lower16:.LANCHOR4
	str	lr, [r4, #4]
	str	r0, [r4, #36]
	ldr	r0, [r8, #-1600]
	movt	r9, #:upper16:.LANCHOR4
	str	ip, [r4, #32]
	ldr	lr, [r8, #-1596]
	movw	ip, #:lower16:rndis_add_header
	str	r2, [r4, #40]
	movw	r2, #1386
	movt	ip, #:upper16:rndis_add_header
	str	r3, [r4]
	ldrh	r2, [r9, r2]
	str	r0, [r4, #116]
	movw	r0, #:lower16:rndis_setup
	movt	r0, #:upper16:rndis_setup
	strh	r1, [r4, #154]	@ unaligned
	movw	r1, #:lower16:rndis_rm_hdr
	movt	r1, #:upper16:rndis_rm_hdr
	tst	r2, #4
	str	r0, [r4, #52]
	movw	r2, #:lower16:rndis_disable
	mov	r0, #0
	str	lr, [r4, #120]
	movt	r2, #:upper16:rndis_disable
	str	r1, [r4, #132]
	mov	r1, #44
	str	r2, [r4, #48]
	strh	r0, [r4, #98]	@ movhi
	str	r1, [r4, #100]
	str	ip, [r4, #128]
	strd	r10, [r4, #156]
	bne	.L19244
.L19204:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L19207
	add	r10, r4, #72
	str	r7, [r4, #20]
	add	r2, r7, #36
	mov	r0, r10
	ldr	r1, [r7, #40]
	bl	__list_add
	ldr	r8, [r4, #32]
	cmp	r8, #0
	beq	.L19208
	mov	r1, r4
	mov	r0, r7
	blx	r8
	subs	r8, r0, #0
	blt	.L19245
.L19208:
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L19209
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L19209
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r7, #45]
.L19209:
	tst	r3, #2
	bne	.L19210
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L19210
	ldrb	r2, [r7, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r7, #45]
.L19210:
	tst	r3, #1
	bne	.L19211
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L19211
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r7, #45]
.L19211:
	cmp	r8, #0
	beq	.L19194
	movw	r3, #1410
	ldrh	r3, [r9, r3]
	tst	r3, #4
	beq	.L19206
	b	.L19205
.L19244:
	ldr	ip, [r7]
	movw	r2, #:lower16:.LC924
	ldr	r1, [r7, #24]
	movt	r2, #:upper16:.LC924
	ldr	r0, .L19247+4
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r7, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L19204
.L19207:
	movw	r3, #1410
	mvn	r8, #21
	ldrh	r3, [r9, r3]
	tst	r3, #4
	beq	.L19206
.L19205:
	ldr	r1, [r7, #24]
	movw	r2, #:lower16:.LC925
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC925
	ldr	r0, .L19247+8
	ldr	r1, [r1]
	stm	sp, {r4, r8}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L19206:
	mov	r0, r4
	bl	kfree
.L19203:
	ldrb	r3, [r6, #3740]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L19194
	mov	r4, #0
	movw	r1, #:lower16:.LC596
	movt	r1, #:upper16:.LC596
	mov	r2, r4
	add	r0, sp, #16
	strb	r4, [r6, #3740]
	bl	sprintf
	add	r0, sp, #16
	mov	r1, r4
	bl	remove_proc_entry
.L19194:
	ldr	r2, [sp, #36]
	mov	r0, r8
	ldr	r3, [r5]
	cmp	r2, r3
	bne	.L19246
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L19196:
	bl	rndis_init.part.89
	subs	r8, r0, #0
	bge	.L19199
	b	.L19194
.L19214:
	mov	r4, #16
	b	.L19202
.L19243:
	mvn	r8, #11
	b	.L19203
.L19245:
	mov	r0, r10
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L19208
.L19201:
	mvn	r8, #18
	b	.L19194
.L19213:
	mvn	r8, #21
	b	.L19194
.L19246:
	bl	__stack_chk_fail
.L19248:
	.align	2
.L19247:
	.word	.LANCHOR7-1592
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.fnend
	.size	rndis_bind_config_vendor, .-rndis_bind_config_vendor
	.align	2
	.global	rndis_signal_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_signal_connect, %function
rndis_signal_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r1, #0
	strd	r6, [sp, #8]
	lsl	r6, r0, #4
	movt	r4, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	sub	r5, r6, r0
	str	r10, [sp, #24]
	add	r10, r4, #3680
	lsl	r5, r5, #2
	str	lr, [sp, #28]
	add	r3, r4, r5
	add	r8, r10, r5
	str	r1, [r3, #3696]
	ldr	r3, [r8, #4]
	cmp	r3, r1
	beq	.L19252
	movw	r3, #:lower16:kmalloc_caches
	mov	r9, r0
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, r1
	beq	.L19253
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r7, r0, #0
	beq	.L19254
	add	r3, r7, #20
.L19251:
	sub	r6, r6, r9
	mov	r9, #20
	str	r3, [r7, #8]
	add	r4, r4, r6, lsl #2
	mov	r6, #0
	add	r2, r5, #52
	str	r9, [r7, #12]
	add	r2, r10, r2
	mov	r0, r7
	str	r6, [r7, #16]
	ldr	r1, [r4, #3736]
	bl	__list_add
	ldr	r3, [r7, #8]
	mov	r2, #11
	mov	r1, #7
	movt	r2, 16385
	stm	r3, {r1, r9}
	str	r2, [r3, #8]
	str	r6, [r3, #12]
	str	r6, [r3, #16]
	ldr	r3, [r8, #44]
	ldr	r0, [r8, #48]
	blx	r3
	mov	r0, r6
.L19249:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L19253:
	mov	r3, #36
	mov	r7, #16
	b	.L19251
.L19252:
	movw	r0, #65012
	movt	r0, 65535
	b	.L19249
.L19254:
	mvn	r0, #11
	b	.L19249
	.fnend
	.size	rndis_signal_connect, .-rndis_signal_connect
	.align	2
	.global	rndis_signal_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_signal_disconnect, %function
rndis_signal_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r1, #1
	strd	r6, [sp, #8]
	lsl	r6, r0, #4
	movt	r4, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	sub	r5, r6, r0
	str	r10, [sp, #24]
	add	r10, r4, #3680
	lsl	r5, r5, #2
	str	lr, [sp, #28]
	add	r3, r4, r5
	add	r8, r10, r5
	str	r1, [r3, #3696]
	ldr	r3, [r8, #4]
	cmp	r3, #0
	beq	.L19259
	movw	r3, #:lower16:kmalloc_caches
	mov	r9, r0
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L19260
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r7, r0, #0
	beq	.L19261
	add	r3, r7, #20
.L19258:
	sub	r6, r6, r9
	mov	r9, #20
	str	r3, [r7, #8]
	add	r4, r4, r6, lsl #2
	mov	r6, #0
	add	r2, r5, #52
	str	r9, [r7, #12]
	add	r2, r10, r2
	mov	r0, r7
	str	r6, [r7, #16]
	ldr	r1, [r4, #3736]
	bl	__list_add
	ldr	r3, [r7, #8]
	mov	r2, #12
	mov	r1, #7
	movt	r2, 16385
	stm	r3, {r1, r9}
	str	r2, [r3, #8]
	str	r6, [r3, #12]
	str	r6, [r3, #16]
	ldr	r3, [r8, #44]
	ldr	r0, [r8, #48]
	blx	r3
	mov	r0, r6
.L19256:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L19260:
	mov	r3, #36
	mov	r7, #16
	b	.L19258
.L19259:
	movw	r0, #65012
	movt	r0, 65535
	b	.L19256
.L19261:
	mvn	r0, #11
	b	.L19256
	.fnend
	.size	rndis_signal_disconnect, .-rndis_signal_disconnect
	.align	2
	.global	rndis_uninit
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_uninit, %function
rndis_uninit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	bxgt	lr
	rsb	r0, r0, r0, lsl #4
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r1, #0
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	lsl	r3, r0, #2
	movt	r6, #:upper16:.LANCHOR1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	add	r2, r6, r3
	ldr	r3, [r2, #3732]
	add	r6, r2, #3728
	mov	r8, r2
	str	r1, [r2, #3684]
	add	r6, r6, #4
	ldr	r4, [r3]
.L19265:
	cmp	r6, r3
	beq	.L19263
	ldr	r2, [r3, #16]
	cmp	r2, #0
	bne	.L19271
	b	.L19285
.L19273:
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L19270
	mov	r4, r3
.L19271:
	cmp	r4, r6
	ldr	r3, [r4]
	bne	.L19273
.L19263:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L19285:
	mov	r4, r3
.L19270:
	ldr	r7, [r4, #8]
	mov	r3, #1
	str	r3, [r4, #16]
	cmp	r7, #0
	beq	.L19263
	ldr	r5, [r8, #3732]
	cmp	r5, r6
	ldr	r4, [r5]
	bne	.L19268
	b	.L19286
.L19275:
	mov	r4, r3
.L19268:
	cmp	r5, #0
	beq	.L19267
	ldr	r3, [r5, #8]
	cmp	r7, r3
	beq	.L19287
.L19267:
	cmp	r4, r6
	mov	r5, r4
	ldr	r3, [r4]
	bne	.L19275
	ldr	r3, [r8, #3732]
	ldr	r4, [r3]
	b	.L19265
.L19287:
	mov	r0, r5
	bl	list_del
	mov	r0, r5
	bl	kfree
	b	.L19267
.L19286:
	mov	r3, r6
	b	.L19265
	.fnend
	.size	rndis_uninit, .-rndis_uninit
	.align	2
	.global	rndis_set_host_mac
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_host_mac, %function
rndis_set_host_mac:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	rsb	r0, r0, r0, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r3, r3, r0, lsl #2
	str	r1, [r3, #3700]
	bx	lr
	.fnend
	.size	rndis_set_host_mac, .-rndis_set_host_mac
	.align	2
	.global	rndis_msg_parser
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_msg_parser, %function
rndis_msg_parser:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	subs	r5, r1, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #64
	sub	sp, sp, #64
	beq	.L19290
	cmp	r0, #0
	ldr	r2, [r5]	@ unaligned
	ldr	r4, [r5, #4]	@ unaligned
	bne	.L19302
	sub	r3, r2, #2
	cmp	r3, #6
	ldrls	pc, [pc, r3, asl #2]
	b	.L19293
.L19295:
	.word	.L19294
	.word	.L19296
	.word	.L19297
	.word	.L19298
	.word	.L19299
	.word	.L19293
	.word	.L19300
.L19299:
	ldr	r0, .L19419
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L19407
.L19319:
	movw	r7, #:lower16:.LANCHOR1
	mov	r8, #1
	movt	r7, #:upper16:.LANCHOR1
	ldr	r3, [r7, #3732]
	add	r9, r7, #3680
	add	r6, r9, #52
	ldr	r4, [r3]
.L19323:
	cmp	r3, r6
	beq	.L19330
	ldr	r2, [r3, #16]
	cmp	r2, #0
	bne	.L19328
	b	.L19408
.L19331:
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L19327
	mov	r4, r3
.L19328:
	cmp	r4, r6
	ldr	r3, [r4]
	bne	.L19331
.L19330:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L19409
	mov	r2, #36
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L19290
	add	r3, r5, #20
.L19325:
	mov	r4, #0
	mov	r6, #16
	str	r3, [r5, #8]
	add	r2, r9, #52
	mov	r0, r5
	str	r6, [r5, #12]
	str	r4, [r5, #16]
	ldr	r1, [r7, #3736]
	bl	__list_add
	ldr	r3, [r5, #8]
	mov	r1, #-2147483642
	mov	r2, #1
	stm	r3, {r1, r6}
	str	r4, [r3, #8]
	str	r2, [r3, #12]
	ldr	r3, [r7, #3724]
	ldr	r0, [r7, #3728]
	blx	r3
	mov	r0, r4
.L19289:
	add	sp, sp, #64
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L19294:
	ldr	r0, .L19419+4
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L19410
.L19301:
	movw	r7, #:lower16:.LANCHOR1
	mov	r2, #1
	movt	r7, #:upper16:.LANCHOR1
	ldr	r3, [r7, #3708]
	str	r2, [r7, #3684]
	cmp	r3, #0
	beq	.L19302
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L19335
	mov	r2, #72
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L19290
	add	r3, r6, #20
.L19303:
	mov	r4, #0
	mov	r8, #52
	str	r3, [r6, #8]
	ldr	r2, .L19419+8
	mov	r0, r6
	str	r8, [r6, #12]
	str	r4, [r6, #16]
	ldr	r1, [r7, #3736]
	bl	__list_add
	ldr	r3, [r6, #8]
	mov	r1, #-2147483646
	mov	r2, #1
	stm	r3, {r1, r8}
	ldr	r1, [r5, #8]
	str	r1, [r3, #8]
	str	r4, [r3, #12]
	str	r2, [r3, #16]
	str	r4, [r3, #20]
	str	r2, [r3, #24]
	str	r4, [r3, #28]
	ldrb	r2, [r7, #3716]	@ zero_extendqisi2
	ldr	r1, [r7, #3708]
	str	r2, [r3, #32]
	ldrb	r2, [r7, #3716]	@ zero_extendqisi2
	ldr	r1, [r1, #356]
	str	r4, [r3, #44]
	str	r4, [r3, #48]
	add	r1, r1, #80
	mul	r2, r2, r1
	str	r2, [r3, #36]
	ldrb	r2, [r7, #3717]	@ zero_extendqisi2
	str	r2, [r3, #40]
	ldr	r3, [r7, #3724]
	ldr	r0, [r7, #3728]
	blx	r3
	mov	r0, r4
	b	.L19289
.L19296:
	ldr	r0, .L19419+12
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L19411
.L19304:
	movw	r5, #:lower16:.LANCHOR1
	mov	r4, #0
	movt	r5, #:upper16:.LANCHOR1
	ldr	r0, [r5, #3708]
	str	r4, [r5, #3684]
	cmp	r0, r4
	beq	.L19289
	bl	netif_carrier_off
	ldr	r3, [r5, #3708]
	ldr	r5, [r3, #576]
	cmp	r5, r4
	beq	.L19412
	mov	r0, r4
	add	r1, r5, #80
	bl	_set_bit
	mov	r0, r4
	b	.L19289
.L19297:
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	ldr	r3, [r7, #3708]
	cmp	r3, #0
	beq	.L19302
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L19337
	mov	r2, #156
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L19290
	add	r2, r4, #20
.L19306:
	mov	r3, #136
	mov	r8, #0
	mov	r0, r4
	strd	r2, [r4, #8]
	ldr	r2, .L19419+8
	str	r8, [r4, #16]
	ldr	r1, [r7, #3736]
	bl	__list_add
	ldr	r6, [r4, #8]
	mov	r3, #-2147483644
	mov	r1, r4
	str	r3, [r6]
	ldr	r3, [r5, #8]
	str	r3, [r6, #8]
	ldr	r0, [r5, #12]
	bl	gen_ndis_query_resp.constprop.116
	cmp	r0, #0
	beq	.L19307
	mov	r0, #187
	mov	r3, #24
	movt	r0, 49152
	str	r3, [r6, #4]
	str	r8, [r6, #16]
	str	r8, [r6, #20]
.L19307:
	str	r0, [r6, #12]
	ldr	r3, [r7, #3724]
	ldr	r0, [r7, #3728]
	blx	r3
	mov	r0, #0
	b	.L19289
.L19408:
	mov	r4, r3
.L19327:
	ldr	r10, [r4, #8]
	str	r8, [r4, #16]
	cmp	r10, #0
	beq	.L19330
	ldr	r5, [r7, #3732]
	cmp	r5, r6
	ldr	r4, [r5]
	bne	.L19322
	b	.L19413
.L19341:
	mov	r4, r3
.L19322:
	cmp	r5, #0
	beq	.L19321
	ldr	r3, [r5, #8]
	cmp	r10, r3
	beq	.L19414
.L19321:
	cmp	r4, r6
	mov	r5, r4
	ldr	r3, [r4]
	bne	.L19341
	ldr	r3, [r7, #3732]
	ldr	r4, [r3]
	b	.L19323
.L19414:
	mov	r0, r5
	bl	list_del
	mov	r0, r5
	bl	kfree
	b	.L19321
.L19409:
	mov	r3, #36
	mov	r5, #16
	b	.L19325
.L19413:
	mov	r3, r6
	b	.L19323
.L19298:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L19339
	mov	r2, #36
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L19290
	add	r3, r4, #20
.L19308:
	movw	r7, #:lower16:.LANCHOR1
	str	r3, [r4, #8]
	mov	r8, #16
	mov	r3, #0
	movt	r7, #:upper16:.LANCHOR1
	add	r2, r7, #3728
	mov	r0, r4
	str	r8, [r4, #12]
	str	r3, [r4, #16]
	add	r2, r2, #4
	ldr	r1, [r7, #3736]
	bl	__list_add
	ldr	r6, [r4, #8]
	mov	r2, #-2147483643
	ldr	r3, [r5, #16]
	ldr	r0, [r5, #20]
	stm	r6, {r2, r8}
	ldr	r2, [r5, #8]
	str	r2, [r6, #8]
	ldr	r1, [r4, #8]
	ldr	r2, [r5, #12]
	cmp	r1, #0
	beq	.L19309
	movw	r1, #270
	movt	r1, 1
	cmp	r2, r1
	beq	.L19311
	movw	r1, #259
	movt	r1, 257
	cmp	r2, r1
	bne	.L19415
	ldr	r0, .L19419+16
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L19416
.L19316:
	mov	r3, #0
	str	r3, [r6, #12]
.L19318:
	ldr	r3, [r7, #3724]
	ldr	r0, [r7, #3728]
	blx	r3
	mov	r0, #0
	b	.L19289
.L19300:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L19345
	mov	r2, #36
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r7, r0, #0
	beq	.L19290
	add	r3, r7, #20
.L19332:
	movw	r6, #:lower16:.LANCHOR1
	mov	r4, #0
	str	r3, [r7, #8]
	movt	r6, #:upper16:.LANCHOR1
	mov	r8, #16
	add	r2, r6, #3728
	mov	r0, r7
	add	r2, r2, #4
	str	r8, [r7, #12]
	str	r4, [r7, #16]
	ldr	r1, [r6, #3736]
	bl	__list_add
	ldr	r3, [r7, #8]
	mov	r2, #-2147483640
	stm	r3, {r2, r8}
	ldr	r2, [r5, #8]
	str	r2, [r3, #8]
	str	r4, [r3, #12]
	ldr	r3, [r6, #3724]
	ldr	r0, [r6, #3728]
	blx	r3
	mov	r0, r4
	b	.L19289
.L19337:
	mov	r2, #36
	mov	r4, #16
	b	.L19306
.L19335:
	mov	r3, #36
	mov	r6, #16
	b	.L19303
.L19415:
	movw	r0, #:lower16:.LC1390
	ldr	r1, .L19419+20
	movt	r0, #:upper16:.LC1390
	bl	printk
.L19309:
	mov	r3, #187
	movt	r3, 49152
	str	r3, [r6, #12]
	b	.L19318
.L19311:
	add	r1, r5, r0
	ldr	r3, [r7, #3704]
	ldr	r2, [r1, #8]	@ unaligned
	ldr	r0, .L19419+24
	strh	r2, [r3]	@ movhi
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L19417
.L19313:
	ldr	r3, [r7, #3704]
	ldr	r0, [r7, #3708]
	ldrh	r4, [r3]
	cmp	r4, #0
	beq	.L19314
	mov	r3, #2
	str	r3, [r7, #3684]
	bl	netif_carrier_on
	ldr	r3, [r7, #3708]
	ldr	r2, [r3, #164]
	tst	r2, #1
	beq	.L19316
	ldr	r4, [r3, #576]
	mov	r0, #0
	add	r1, r4, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L19316
	ldr	r0, [r4, #4]
	bl	__netif_schedule
	b	.L19316
.L19314:
	mov	r3, #1
	str	r3, [r7, #3684]
	bl	netif_carrier_off
	ldr	r3, [r7, #3708]
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L19418
	add	r1, r1, #80
	mov	r0, r4
	bl	_set_bit
	b	.L19316
.L19290:
	mvn	r0, #11
	b	.L19289
.L19302:
	movw	r0, #65012
	movt	r0, 65535
	b	.L19289
.L19411:
	movw	r1, #:lower16:.LC1388
	ldr	r2, .L19419+28
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1388
	bl	__dynamic_pr_debug
	b	.L19304
.L19410:
	movw	r1, #:lower16:.LC1387
	ldr	r2, .L19419+28
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1387
	bl	__dynamic_pr_debug
	b	.L19301
.L19407:
	movw	r1, #:lower16:.LC1391
	ldr	r2, .L19419+28
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1391
	bl	__dynamic_pr_debug
	b	.L19319
.L19345:
	mov	r3, #36
	mov	r7, #16
	b	.L19332
.L19339:
	mov	r3, #36
	mov	r4, #16
	b	.L19308
.L19412:
	movw	r0, #:lower16:.LC109
	movw	r1, #1847
	movt	r0, #:upper16:.LC109
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC110
	movt	r0, #:upper16:.LC110
	bl	printk
	mov	r0, r5
	b	.L19289
.L19416:
	movw	r1, #:lower16:.LC635
	ldr	r2, .L19419+20
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC635
	bl	__dynamic_pr_debug
	b	.L19316
.L19417:
	ldr	r3, [r7, #3704]
	movw	r1, #:lower16:.LC1389
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1389
	ldr	r2, .L19419+20
	ldrh	r3, [r3]
	bl	__dynamic_pr_debug
	b	.L19313
.L19418:
	movw	r0, #:lower16:.LC109
	movw	r1, #1847
	movt	r0, #:upper16:.LC109
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC110
	movt	r0, #:upper16:.LC110
	bl	printk
	b	.L19316
.L19293:
	movw	r0, #:lower16:.LC1392
	ldr	r1, .L19419+28
	mov	r3, r4
	movt	r0, #:upper16:.LC1392
	bl	printk
	cmp	r4, #0
	beq	.L19302
	ldr	r8, .L19419+32
	movw	r7, #:lower16:.LC1393
	mov	r6, #0
	movt	r7, #:upper16:.LC1393
	sub	r9, r8, #32
	b	.L19334
.L19333:
	add	r6, r6, #16
	cmp	r6, r4
	bcs	.L19302
.L19334:
	ldrh	r3, [r8, #-14]
	tst	r3, #4
	beq	.L19333
	add	ip, r5, r6
	ldrb	r3, [r5, r6]	@ zero_extendqisi2
	mov	r2, r6
	ldrb	lr, [ip, #15]	@ zero_extendqisi2
	mov	r1, r7
	mov	r0, r9
	str	lr, [sp, #56]
	ldrb	lr, [ip, #14]	@ zero_extendqisi2
	str	lr, [sp, #52]
	ldrb	lr, [ip, #13]	@ zero_extendqisi2
	str	lr, [sp, #48]
	ldrb	lr, [ip, #12]	@ zero_extendqisi2
	str	lr, [sp, #44]
	ldrb	lr, [ip, #11]	@ zero_extendqisi2
	str	lr, [sp, #40]
	ldrb	lr, [ip, #10]	@ zero_extendqisi2
	str	lr, [sp, #36]
	ldrb	lr, [ip, #9]	@ zero_extendqisi2
	str	lr, [sp, #32]
	ldrb	lr, [ip, #8]	@ zero_extendqisi2
	str	lr, [sp, #28]
	ldrb	lr, [ip, #7]	@ zero_extendqisi2
	str	lr, [sp, #24]
	ldrb	lr, [ip, #6]	@ zero_extendqisi2
	str	lr, [sp, #20]
	ldrb	lr, [ip, #5]	@ zero_extendqisi2
	str	lr, [sp, #16]
	ldrb	lr, [ip, #4]	@ zero_extendqisi2
	str	lr, [sp, #12]
	ldrb	lr, [ip, #3]	@ zero_extendqisi2
	str	lr, [sp, #8]
	ldrb	lr, [ip, #2]	@ zero_extendqisi2
	str	lr, [sp, #4]
	ldrb	ip, [ip, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L19333
.L19420:
	.align	2
.L19419:
	.word	.LANCHOR8-1200
	.word	.LANCHOR8-1296
	.word	.LANCHOR1+3732
	.word	.LANCHOR8-1264
	.word	.LANCHOR8-1216
	.word	.LANCHOR5+2732
	.word	.LANCHOR8-1248
	.word	.LANCHOR5+2712
	.word	.LANCHOR8-1168
	.fnend
	.size	rndis_msg_parser, .-rndis_msg_parser
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_command_complete, %function
rndis_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r5, #20]
	cmp	r3, #0
	beq	.L19421
	ldr	r6, [r3, #24]
	cmp	r6, #0
	beq	.L19421
	mov	r4, r1
	ldrb	r0, [r5, #164]	@ zero_extendqisi2
	ldr	r1, [r1]
	bl	rndis_msg_parser
	subs	r2, r0, #0
	blt	.L19436
.L19425:
	ldr	r3, [r4]
	ldr	r2, [r3]
	cmp	r2, #2
	beq	.L19437
.L19421:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L19437:
	ldr	r0, .L19439
	ldr	r2, [r3, #20]
	ldrh	r1, [r0, #-6]
	cmp	r2, #2048
	movls	ip, #0
	movhi	ip, #1
	tst	r1, #4
	strb	ip, [r5, #124]
	bne	.L19438
.L19426:
	movw	r3, #:lower16:.LANCHOR7
	movt	r3, #:upper16:.LANCHOR7
	ldr	r3, [r3, #-1596]
	cmp	r3, #1
	movls	r3, #0
	strbls	r3, [r5, #124]
	b	.L19421
.L19436:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC1394
	ldr	ip, [r4, #4]
	movt	r1, #:upper16:.LC1394
	ldr	r3, [r4, #48]
	add	r0, r0, #32
	str	ip, [sp]
	bl	dev_err
	b	.L19425
.L19438:
	ldr	r4, [r3, #20]
	movw	lr, #:lower16:.LC900
	cmp	r2, #2048
	ldr	r1, [r6]
	movt	lr, #:upper16:.LC900
	movw	ip, #:lower16:.LC899
	movt	ip, #:upper16:.LC899
	movls	ip, lr
	ldr	r3, .L19439+4
	movw	r2, #:lower16:.LC1395
	sub	r0, r0, #24
	movt	r2, #:upper16:.LC1395
	stm	sp, {r4, ip}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L19426
.L19440:
	.align	2
.L19439:
	.word	.LANCHOR8-1152
	.word	.LANCHOR5+2752
	.fnend
	.size	rndis_command_complete, .-rndis_command_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_command_complete, %function
rndis_qc_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r4, r1
	str	lr, [sp, #8]
	ldr	r5, [r1, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r1, [r1]
	ldrb	r0, [r5, #144]	@ zero_extendqisi2
	bl	rndis_msg_parser
	subs	r2, r0, #0
	blt	.L19450
.L19442:
	ldr	r3, [r4]
	ldr	r2, [r3]
	cmp	r2, #2
	beq	.L19451
.L19441:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L19451:
	ldr	r0, .L19452
	ldr	r1, [r3, #20]
	ldrh	r2, [r0, #-14]
	str	r1, [r5, #136]
	tst	r2, #4
	beq	.L19441
	ldr	r2, .L19452+4
	movw	r1, #:lower16:.LC1397
	sub	r0, r0, #32
	ldr	r3, [r3, #20]
	movt	r1, #:upper16:.LC1397
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	__dynamic_pr_debug
.L19450:
	ldr	ip, [r4, #4]
	movw	r0, #:lower16:.LC1396
	ldr	r3, [r4, #48]
	movt	r0, #:upper16:.LC1396
	ldr	r1, .L19452+4
	str	ip, [sp]
	bl	printk
	b	.L19442
.L19453:
	.align	2
.L19452:
	.word	.LANCHOR8-1120
	.word	.LANCHOR5+2776
	.fnend
	.size	rndis_qc_command_complete, .-rndis_qc_command_complete
	.align	2
	.global	rndis_register
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_register, %function
rndis_register:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	beq	.L19457
	movw	r3, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldrb	r4, [r3, #3681]	@ zero_extendqisi2
	cmp	r4, #0
	bne	.L19456
	movw	r2, #:lower16:.LANCHOR4
	movw	ip, #3402
	str	r0, [r3, #3724]
	movt	r2, #:upper16:.LANCHOR4
	str	r1, [r3, #3728]
	mov	r1, #1
	ldrh	r0, [r2, ip]
	add	r2, r3, #3680
	strb	r1, [r3, #3681]
	strh	r1, [r2, #36]	@ movhi
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	bne	.L19464
.L19454:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L19456:
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #3426
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, r3]
	tst	r3, #4
	mvneq	r0, #18
	beq	.L19454
	movw	r1, #:lower16:.LC1109
	add	r0, r0, #3408
	movt	r1, #:upper16:.LC1109
	bl	__dynamic_pr_debug
	mvn	r0, #18
	b	.L19454
.L19464:
	movw	r1, #:lower16:.LC1108
	mov	r3, r4
	ldr	r2, .L19465
	movt	r1, #:upper16:.LC1108
	ldr	r0, .L19465+4
	bl	__dynamic_pr_debug
	mov	r0, r4
	b	.L19454
.L19457:
	mvn	r0, #21
	bx	lr
.L19466:
	.align	2
.L19465:
	.word	.LANCHOR5+264
	.word	.LANCHOR4+3384
	.fnend
	.size	rndis_register, .-rndis_register
	.align	2
	.global	rndis_deregister
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_deregister, %function
rndis_deregister:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR4
	str	lr, [sp, #4]
	ldrh	r2, [r3, #18]
	tst	r2, #4
	bne	.L19474
.L19468:
	cmp	r4, #0
	bgt	.L19467
	rsb	r4, r4, r4, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r4, r3, r4, lsl #2
	mov	r3, #0
	strb	r3, [r4, #3681]
.L19467:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L19474:
	movw	r1, #:lower16:.LC267
	mov	r0, r3
	ldr	r2, .L19475
	movt	r1, #:upper16:.LC267
	bl	__dynamic_pr_debug
	b	.L19468
.L19476:
	.align	2
.L19475:
	.word	.LANCHOR5-2060
	.fnend
	.size	rndis_deregister, .-rndis_deregister
	.align	2
	.global	rndis_set_param_dev
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_param_dev, %function
rndis_set_param_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L19487
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	mov	r6, r2
	mov	r5, r1
	str	lr, [sp, #12]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L19486
.L19478:
	cmp	r5, #0
	beq	.L19480
	cmp	r4, #0
	bne	.L19481
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR1
	str	r4, [r3, #3628]
	str	r4, [r3, #3632]
	str	r6, [r3, #3704]
	str	r5, [r3, #3708]
.L19477:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L19486:
	movw	r1, #:lower16:.LC267
	sub	r0, r3, #24
	ldr	r2, .L19487+4
	movt	r1, #:upper16:.LC267
	bl	__dynamic_pr_debug
	b	.L19478
.L19481:
	mvn	r0, #0
	b	.L19477
.L19480:
	mvn	r0, #21
	b	.L19477
.L19488:
	.align	2
.L19487:
	.word	.LANCHOR8-1104
	.word	.LANCHOR5+2804
	.fnend
	.size	rndis_set_param_dev, .-rndis_set_param_dev
	.align	2
	.global	rndis_set_param_vendor
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_param_vendor, %function
rndis_set_param_vendor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	ip, #3450
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	mov	r5, r0
	str	lr, [sp, #12]
	ldrh	r3, [r3, ip]
	mov	r4, r2
	mov	r6, r1
	tst	r3, #4
	bne	.L19497
.L19490:
	clz	r0, r4
	cmp	r5, #0
	lsr	r0, r0, #5
	movne	r0, #1
	cmp	r0, #0
	bne	.L19492
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [r3, #3712]
	str	r4, [r3, #3720]
.L19489:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L19497:
	movw	r1, #:lower16:.LC267
	ldr	r2, .L19498
	movt	r1, #:upper16:.LC267
	ldr	r0, .L19498+4
	bl	__dynamic_pr_debug
	b	.L19490
.L19492:
	mvn	r0, #0
	b	.L19489
.L19499:
	.align	2
.L19498:
	.word	.LANCHOR5+280
	.word	.LANCHOR4+3432
	.fnend
	.size	rndis_set_param_vendor, .-rndis_set_param_vendor
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_bind, %function
rndis_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #16
	sub	sp, sp, #16
	ldr	r7, [r0, #24]
	cmp	r3, #15
	bhi	.L19501
	add	r1, r3, #12
	add	r2, r3, #1
	mov	r5, r0
	movw	r6, #:lower16:.LANCHOR7
	str	r4, [r0, r1, lsl #2]
	movt	r6, #:upper16:.LANCHOR7
	strb	r2, [r0, #44]
	strb	r3, [r4, #148]
	ldrb	r0, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r6, #-1662]
	strb	r3, [r6, #-1654]
	strb	r3, [r6, #-1273]
	cmp	r0, #15
	bls	.L19568
.L19501:
	mvn	r5, #18
.L19503:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #172]
	cmp	r3, #0
	beq	.L19517
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L19517:
	ldr	r3, [r4, #168]
	movw	r1, #:lower16:.LC1086
	movt	r1, #:upper16:.LC1086
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r7]
	mov	r3, r5
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L19500:
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L19568:
	add	r1, r0, #12
	add	r3, r0, #1
	strb	r0, [r6, #-1610]
	strb	r0, [r6, #-1272]
	mov	r2, #0
	str	r4, [r5, r1, lsl #2]
	ldr	r1, .L19574
	strb	r3, [r5, #44]
	strb	r0, [r4, #149]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L19501
	str	r0, [r4, #88]
	mov	r2, #0
	ldr	r1, .L19574+4
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L19501
	str	r0, [r4, #92]
	mov	r2, #0
	ldr	r1, .L19574+8
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L19501
	str	r3, [r4, #168]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r8, r0
	str	r0, [r4, #172]
	beq	.L19505
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L19504
	mov	r2, #8
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L19504:
	str	r0, [r8]
	ldr	r3, [r4, #172]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L19505
	mov	r1, #8
	movw	r2, #:lower16:rndis_response_complete
	movt	r2, #:upper16:rndis_response_complete
	str	r1, [r3, #4]
	ldr	r0, [r4, #172]
	ldrb	r3, [r6, #-1266]	@ zero_extendqisi2
	ldrb	r1, [r6, #-1254]	@ zero_extendqisi2
	str	r4, [r0, #32]
	ldr	r0, [r4, #172]
	strb	r3, [r6, #-1230]
	strb	r1, [r6, #-1218]
	strb	r3, [r6, #-1194]
	ldrb	r3, [r6, #-1242]	@ zero_extendqisi2
	str	r2, [r0, #28]
	ldr	r2, [r4, #20]
	ldr	r0, .L19574+12
	strb	r3, [r6, #-1206]
	ldr	r2, [r2, #24]
	strb	r1, [r6, #-1182]
	strb	r3, [r6, #-1170]
	ldr	r8, [r2]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L19508
	ldr	r3, [r8, #20]
	cmp	r3, #2
	bhi	.L19569
.L19507:
	movw	r8, #:lower16:.LANCHOR1
	movw	r1, #:lower16:rndis_open
	movt	r8, #:upper16:.LANCHOR1
	movw	r2, #:lower16:rndis_close
	ldrb	r3, [r8, #3681]	@ zero_extendqisi2
	movt	r1, #:upper16:rndis_open
	movt	r2, #:upper16:rndis_close
	str	r1, [r4, #136]
	str	r2, [r4, #140]
	cmp	r3, #0
	bne	.L19509
	movw	r10, #:lower16:.LANCHOR4
	movw	r1, #3402
	str	r4, [r8, #3728]
	movt	r10, #:upper16:.LANCHOR4
	movw	r2, #:lower16:rndis_response_available
	ldrh	ip, [r10, r1]
	movt	r2, #:upper16:rndis_response_available
	mov	r1, #1
	add	r0, r8, #3680
	strb	r1, [r8, #3681]
	strh	r1, [r0, #36]	@ movhi
	tst	ip, #4
	str	r2, [r8, #3724]
	bne	.L19570
.L19510:
	movw	r2, #1602
	mov	r3, #0
	ldrh	r9, [r10, r2]
	str	r3, [r4, #164]
	ubfx	r9, r9, #2, #1
	cmp	r9, r3
	moveq	r3, r9
	bne	.L19571
.L19511:
	movw	r2, #3474
	rsb	r3, r3, r3, lsl #4
	ldrb	r6, [r6, #-1600]	@ zero_extendqisi2
	ldrh	r0, [r10, r2]
	mov	r1, #0
	add	r3, r8, r3, lsl #2
	add	r2, r4, #150
	str	r1, [r8, #3688]
	str	r1, [r8, #3692]
	tst	r0, #4
	str	r2, [r3, #3700]
	bne	.L19572
.L19522:
	ldr	r2, [r4, #160]
	rsb	r9, r9, r9, lsl #4
	add	r8, r8, r9, lsl #2
	cmp	r2, #0
	strb	r6, [r8, #3716]
	beq	.L19515
	ldr	r1, [r4, #156]
	cmp	r1, #0
	bne	.L19573
.L19515:
	ldr	r3, .L19574+16
	ldrh	r3, [r3, #-14]
	ubfx	r3, r3, #2, #1
	cmp	r3, #0
	bne	.L19513
	mov	r5, r3
	b	.L19500
.L19505:
	mvn	r5, #11
	b	.L19503
.L19569:
	ldr	r0, .L19574+20
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L19508
	ldr	r3, [r8, #20]
	cmp	r3, #4
	bls	.L19507
	ldr	r0, .L19574+24
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L19507
.L19508:
	ldr	r0, [r4, #16]
	mvn	r5, #11
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	b	.L19503
.L19509:
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #3426
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, r3]
	tst	r3, #4
	beq	.L19501
	movw	r1, #:lower16:.LC1109
	add	r0, r0, #3408
	movt	r1, #:upper16:.LC1109
	mvn	r5, #18
	bl	__dynamic_pr_debug
	b	.L19503
.L19573:
	ldrb	r0, [r4, #164]	@ zero_extendqisi2
	bl	rndis_set_param_vendor
	cmp	r0, #0
	beq	.L19515
	mov	r5, #0
	b	.L19503
.L19570:
	movw	r1, #:lower16:.LC1108
	ldr	r2, .L19574+28
	movt	r1, #:upper16:.LC1108
	ldr	r0, .L19574+32
	bl	__dynamic_pr_debug
	b	.L19510
.L19513:
	ldr	r3, [r5, #24]
	ldr	r1, [r7]
	ldr	r3, [r3]
	add	r1, r1, #32
	ldr	r0, [r3, #20]
	cmp	r0, #4
	bhi	.L19526
	movw	r2, #:lower16:.LC1070
	movw	r3, #:lower16:.LC1071
	movt	r2, #:upper16:.LC1070
	cmp	r0, #2
	movt	r3, #:upper16:.LC1071
	movhi	r3, r2
.L19516:
	ldr	ip, [r4, #88]
	movw	r2, #:lower16:.LC1110
	mov	r5, #0
	ldr	r0, [r4, #168]
	movt	r2, #:upper16:.LC1110
	ldr	lr, [r4, #92]
	ldr	r4, [r0, #4]
	ldr	r0, .L19574+36
	str	r4, [sp, #8]
	ldr	lr, [lr, #4]
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L19500
.L19572:
	movw	r1, #:lower16:.LC267
	ldr	r2, .L19574+40
	movt	r1, #:upper16:.LC267
	ldr	r0, .L19574+44
	bl	__dynamic_pr_debug
	b	.L19522
.L19571:
	movw	r1, #:lower16:.LC940
	str	r3, [sp]
	ldr	r2, .L19574+48
	movt	r1, #:upper16:.LC940
	ldr	r0, .L19574+52
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #164]
	uxtb	r9, r3
	b	.L19511
.L19526:
	movw	r3, #:lower16:.LC1085
	movt	r3, #:upper16:.LC1085
	b	.L19516
.L19575:
	.align	2
.L19574:
	.word	.LANCHOR7-1268
	.word	.LANCHOR7-1256
	.word	.LANCHOR7-1244
	.word	.LANCHOR7-1160
	.word	.LANCHOR8-1072
	.word	.LANCHOR7-1116
	.word	.LANCHOR7-1072
	.word	.LANCHOR5+264
	.word	.LANCHOR4+3384
	.word	.LANCHOR8-1104
	.word	.LANCHOR5+304
	.word	.LANCHOR4+3456
	.word	.LANCHOR5-1268
	.word	.LANCHOR4+1584
	.fnend
	.size	rndis_bind, .-rndis_bind
	.align	2
	.global	rndis_set_param_medium
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_param_medium, %function
rndis_set_param_medium:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	ip, #1602
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r0, [r3, ip]
	mov	r5, r2
	.pad #8
	sub	sp, sp, #8
	mov	r6, r1
	tst	r0, #4
	bne	.L19584
.L19577:
	cmp	r4, #0
	bne	.L19579
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [r3, #3688]
	str	r5, [r3, #3692]
.L19576:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L19584:
	movw	r1, #:lower16:.LC940
	add	r0, r3, #1584
	ldr	r2, .L19585
	movt	r1, #:upper16:.LC940
	mov	r3, r6
	str	r5, [sp]
	bl	__dynamic_pr_debug
	b	.L19577
.L19579:
	mvn	r0, #0
	b	.L19576
.L19586:
	.align	2
.L19585:
	.word	.LANCHOR5-1268
	.fnend
	.size	rndis_set_param_medium, .-rndis_set_param_medium
	.align	2
	.global	rndis_set_max_pkt_xfer
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_max_pkt_xfer, %function
rndis_set_max_pkt_xfer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #3474
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r2, [r3, r2]
	mov	r5, r1
	tst	r2, #4
	bne	.L19593
.L19588:
	rsb	r4, r4, r4, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r3, r3, r4, lsl #2
	strb	r5, [r3, #3716]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L19593:
	movw	r1, #:lower16:.LC267
	add	r0, r3, #3456
	ldr	r2, .L19594
	movt	r1, #:upper16:.LC267
	bl	__dynamic_pr_debug
	b	.L19588
.L19595:
	.align	2
.L19594:
	.word	.LANCHOR5+304
	.fnend
	.size	rndis_set_max_pkt_xfer, .-rndis_set_max_pkt_xfer
	.align	2
	.global	rndis_set_pkt_alignment_factor
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_pkt_alignment_factor, %function
rndis_set_pkt_alignment_factor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #3498
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r3, [r3, r2]
	mov	r5, r1
	tst	r3, #4
	bne	.L19602
.L19597:
	rsb	r4, r4, r4, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r3, r3, r4, lsl #2
	strb	r5, [r3, #3717]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L19602:
	movw	r1, #:lower16:.LC267
	ldr	r2, .L19603
	movt	r1, #:upper16:.LC267
	ldr	r0, .L19603+4
	bl	__dynamic_pr_debug
	b	.L19597
.L19604:
	.align	2
.L19603:
	.word	.LANCHOR5+328
	.word	.LANCHOR4+3480
	.fnend
	.size	rndis_set_pkt_alignment_factor, .-rndis_set_pkt_alignment_factor
	.align	2
	.global	rndis_add_hdr
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_add_hdr, %function
rndis_add_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L19605
	mov	r1, #44
	bl	skb_push
	mov	r1, #44
	mov	r4, r0
	bl	__memzero
	mov	r3, #0
	mov	r2, #1
	mov	r1, #36
	strb	r2, [r4]
	strb	r3, [r4, #1]
	strb	r3, [r4, #2]
	strb	r3, [r4, #3]
	ldr	r2, [r5, #80]
	str	r2, [r4, #4]	@ unaligned
	strb	r1, [r4, #8]
	strb	r3, [r4, #9]
	strb	r3, [r4, #10]
	strb	r3, [r4, #11]
	ldr	r3, [r5, #80]
	sub	r3, r3, #44
	str	r3, [r4, #12]	@ unaligned
.L19605:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_add_hdr, .-rndis_add_hdr
	.align	2
	.global	rndis_free_response
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_free_response, %function
rndis_free_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	rsb	r0, r0, r0, lsl #4
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	lsl	r0, r0, #2
	movt	r6, #:upper16:.LANCHOR1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	add	r3, r6, r0
	ldr	r5, [r3, #3732]
	add	r6, r3, #3728
	add	r6, r6, #4
	cmp	r5, r6
	ldr	r4, [r5]
	movne	r7, r1
	bne	.L19614
	b	.L19611
.L19615:
	mov	r4, r3
.L19614:
	cmp	r5, #0
	beq	.L19613
	ldr	r3, [r5, #8]
	cmp	r3, r7
	beq	.L19621
.L19613:
	cmp	r6, r4
	mov	r5, r4
	ldr	r3, [r4]
	bne	.L19615
.L19611:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L19621:
	mov	r0, r5
	bl	list_del
	mov	r0, r5
	bl	kfree
	b	.L19613
	.fnend
	.size	rndis_free_response, .-rndis_free_response
	.align	2
	.global	rndis_get_next_response
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_get_next_response, %function
rndis_get_next_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	beq	.L19628
	rsb	r0, r0, r0, lsl #4
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	lsl	r0, r0, #2
	add	r3, r2, r0
	ldr	ip, [r3, #3732]
	add	r2, r3, #3728
	add	r2, r2, #4
	cmp	ip, r2
	ldr	r3, [ip]
	beq	.L19628
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	r0, [ip, #16]
	cmp	r0, #0
	bne	.L19625
	b	.L19635
.L19626:
	ldr	lr, [r3, #16]
	cmp	lr, #0
	beq	.L19624
	mov	r3, ip
.L19625:
	cmp	r2, r3
	ldr	ip, [r3]
	bne	.L19626
	mov	r0, #0
	ldr	pc, [sp], #4
.L19635:
	mov	r3, ip
.L19624:
	ldr	r2, [r3, #12]
	mov	r0, #1
	str	r0, [r3, #16]
	str	r2, [r1]
	ldr	r0, [r3, #8]
	ldr	pc, [sp], #4
.L19628:
	mov	r0, #0
	bx	lr
	.fnend
	.size	rndis_get_next_response, .-rndis_get_next_response
	.align	2
	.global	rndis_init
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_init, %function
rndis_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r4, #:lower16:.LANCHOR1
	movw	r5, #:lower16:__stack_chk_guard
	movt	r4, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r5, #:upper16:__stack_chk_guard
	str	lr, [sp, #16]
	ldrb	r6, [r4, #3740]	@ zero_extendqisi2
	.pad #36
	sub	sp, sp, #36
	ldr	r3, [r5]
	cmp	r6, #0
	str	r3, [sp, #28]
	bne	.L19654
	movw	r1, #:lower16:.LC596
	mov	r2, r6
	movt	r1, #:upper16:.LC596
	add	r0, sp, #8
	add	r7, r4, #3680
	bl	sprintf
	add	r0, sp, #8
	ldr	r3, .L19659
	mov	r2, r6
	mov	r1, #432
	str	r7, [sp]
	bl	proc_create_data
	cmp	r0, #0
	bne	.L19655
	ldr	r4, .L19659+4
	ldrh	r3, [r4, #-14]
	tst	r3, #4
	bne	.L19656
.L19639:
	ldr	r3, .L19659+8
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L19657
.L19640:
	mvn	r0, #4
.L19636:
	ldr	r2, [sp, #28]
	ldr	r3, [r5]
	cmp	r2, r3
	bne	.L19658
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L19655:
	mov	r3, r7
	mov	r2, #1
	str	r6, [r4, #3684]
	mov	r0, r6
	strh	r6, [r3], #52	@ movhi
	str	r2, [r4, #3696]
	str	r3, [r4, #3732]
	str	r3, [r4, #3736]
	strb	r2, [r4, #3740]
	b	.L19636
.L19654:
	mov	r0, #0
	b	.L19636
.L19656:
	movw	r1, #:lower16:.LC597
	ldr	r2, .L19659+12
	sub	r0, r4, #32
	movt	r1, #:upper16:.LC597
	bl	__dynamic_pr_debug
	b	.L19639
.L19657:
	movw	r1, #:lower16:.LC598
	sub	r0, r4, #8
	movt	r1, #:upper16:.LC598
	bl	__dynamic_pr_debug
	b	.L19640
.L19658:
	bl	__stack_chk_fail
.L19660:
	.align	2
.L19659:
	.word	.LANCHOR5-3580
	.word	.LANCHOR4-2560
	.word	.LANCHOR4-2544
	.word	.LANCHOR5-3472
	.fnend
	.size	rndis_init, .-rndis_init
	.align	2
	.global	rndis_exit
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_exit, %function
rndis_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movw	r4, #:lower16:__stack_chk_guard
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #8]
	movt	r4, #:upper16:__stack_chk_guard
	ldrb	r1, [r3, #3740]	@ zero_extendqisi2
	.pad #28
	sub	sp, sp, #28
	ldr	r2, [r4]
	cmp	r1, #0
	str	r2, [sp, #20]
	bne	.L19668
.L19661:
	ldr	r2, [sp, #20]
	ldr	r3, [r4]
	cmp	r2, r3
	bne	.L19669
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L19668:
	mov	r5, #0
	movw	r1, #:lower16:.LC596
	mov	r2, r5
	movt	r1, #:upper16:.LC596
	mov	r0, sp
	strb	r5, [r3, #3740]
	bl	sprintf
	mov	r0, sp
	mov	r1, r5
	bl	remove_proc_entry
	b	.L19661
.L19669:
	bl	__stack_chk_fail
	.fnend
	.size	rndis_exit, .-rndis_exit
	.align	2
	.global	ecm_ipa_init
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_ipa_init, %function
ecm_ipa_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	ecm_ipa_init, .-ecm_ipa_init
	.align	2
	.global	ecm_qc_get_ipa_rx_cb
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_get_ipa_rx_cb, %function
ecm_qc_get_ipa_rx_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3576]
	bx	lr
	.fnend
	.size	ecm_qc_get_ipa_rx_cb, .-ecm_qc_get_ipa_rx_cb
	.align	2
	.global	ecm_qc_get_ipa_tx_cb
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_get_ipa_tx_cb, %function
ecm_qc_get_ipa_tx_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3580]
	bx	lr
	.fnend
	.size	ecm_qc_get_ipa_tx_cb, .-ecm_qc_get_ipa_tx_cb
	.align	2
	.global	ecm_qc_get_ipa_priv
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_get_ipa_priv, %function
ecm_qc_get_ipa_priv:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3596]
	bx	lr
	.fnend
	.size	ecm_qc_get_ipa_priv, .-ecm_qc_get_ipa_priv
	.align	2
	.global	ecm_qc_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_bind_config, %function
ecm_qc_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	mov	r8, r0
	movw	r0, #:lower16:.LC472
	strd	r10, [sp, #24]
	movt	r0, #:upper16:.LC472
	mov	r9, r2
	str	lr, [sp, #32]
	ldr	r3, [r8, #24]
	.pad #44
	sub	sp, sp, #44
	ldr	r3, [r3]
	ldr	r4, [r3, #28]
	mov	r1, r4
	bl	strcmp
	cmp	r0, #0
	beq	.L19711
	movw	r0, #:lower16:.LC475
	mov	r1, r4
	movt	r0, #:upper16:.LC475
	bl	strcmp
	cmp	r0, #0
	cmpne	r6, #0
	beq	.L19711
	movw	r4, #:lower16:.LANCHOR4
	movw	r3, #2394
	movt	r4, #:upper16:.LANCHOR4
	ldrh	r3, [r4, r3]
	tst	r3, #4
	bne	.L19741
.L19676:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r3, [r5, #3744]
	cmp	r3, #0
	beq	.L19677
	movw	r3, #2418
	ldrh	r3, [r4, r3]
	tst	r3, #4
	bne	.L19742
.L19679:
	ldr	r0, .L19756
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L19743
.L19680:
	movw	r7, #:lower16:.LANCHOR0
	movt	r7, #:upper16:.LANCHOR0
	ldrb	r3, [r7, #1368]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L19681
	ldr	r2, [r8, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19683
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r8, #24]
	strb	r3, [r7, #1368]
	strb	r3, [r7, #3148]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19683
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r1, [r8, #24]
	strb	r3, [r7, #1384]
	strb	r3, [r7, #3180]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19683
	add	r3, r3, #1
	movw	r2, #:lower16:.LANCHOR7
	uxtb	r3, r3
	movt	r2, #:upper16:.LANCHOR7
	strb	r3, [r1, #48]
	strb	r3, [r2, #-1013]
	strb	r3, [r7, #1376]
.L19681:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L19712
	mov	r2, #172
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L19744
.L19684:
	ldr	r10, .L19756+4
	mov	r0, r9
	bl	str_to_xport
	str	r0, [r4, #124]
	ldrh	r3, [r10, #-14]
	tst	r3, #4
	bne	.L19745
.L19685:
	cmp	r0, #7
	add	r9, r4, #128
	beq	.L19746
	ldrb	fp, [r6, #5]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC1402
	mov	r1, #14
	ldrb	r10, [r6, #4]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC1402
	mov	r0, r9
	ldrb	r5, [r6, #3]	@ zero_extendqisi2
	ldrb	lr, [r6, #2]	@ zero_extendqisi2
	ldrb	ip, [r6, #1]	@ zero_extendqisi2
	ldrb	r3, [r6]	@ zero_extendqisi2
	strd	r10, [sp, #12]
	stm	sp, {ip, lr}
	str	r5, [sp, #8]
	bl	snprintf
.L19705:
	ldr	lr, .L19756+8
	movw	r3, #:lower16:.LC1403
	movw	ip, #:lower16:ecm_qc_unbind
	movt	r3, #:upper16:.LC1403
	movt	ip, #:upper16:ecm_qc_unbind
	str	r9, [r7, #1380]
	movw	r1, #:lower16:ecm_qc_bind
	movw	r2, #:lower16:ecm_qc_set_alt
	movt	r1, #:upper16:ecm_qc_bind
	movt	r2, #:upper16:ecm_qc_set_alt
	stm	r4, {r3, lr}
	movw	r3, #:lower16:ecm_qc_get_alt
	mov	r0, r8
	movt	r3, #:upper16:ecm_qc_get_alt
	str	r1, [r4, #32]
	movw	r1, #:lower16:ecm_qc_setup
	str	ip, [r4, #36]
	movw	ip, #:lower16:ecm_qc_disable
	movt	r1, #:upper16:ecm_qc_setup
	movt	ip, #:upper16:ecm_qc_disable
	str	r2, [r4, #40]
	movw	r2, #:lower16:ecm_qc_suspend
	str	r3, [r4, #44]
	movw	r3, #:lower16:ecm_qc_resume
	movt	r2, #:upper16:ecm_qc_suspend
	str	ip, [r4, #48]
	movt	r3, #:upper16:ecm_qc_resume
	mov	ip, #15
	str	r1, [r4, #52]
	mov	r1, r4
	str	r2, [r4, #56]
	str	r3, [r4, #60]
	strh	ip, [r4, #98]	@ movhi
	bl	usb_add_function
	subs	r10, r0, #0
	bne	.L19747
	ldr	r3, [r4, #124]
	cmp	r3, #7
	beq	.L19748
.L19674:
	mov	r0, r10
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L19712:
	mov	r4, #16
	b	.L19684
.L19748:
	ldr	r0, .L19756+12
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L19749
.L19708:
	ldr	r0, .L19756+16
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	beq	.L19674
	movw	r1, #:lower16:.LC1406
	ldr	r2, .L19756+20
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC1406
	bl	__dynamic_pr_debug
	b	.L19674
.L19746:
	ldr	r6, [r5, #4068]
	ldr	r3, .L19756+24
	cmp	r6, #0
	str	r3, [sp, #36]
	addne	fp, r3, #13
	bne	.L19690
	b	.L19694
.L19750:
	ldrb	r0, [r6, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	mov	r1, r0
	ldrb	r0, [r6, #2]	@ zero_extendqisi2
	str	r1, [sp, #32]
	bl	hex_to_bin
	ldr	r3, .L19756+28
	ldr	r1, [sp, #32]
	ldr	r2, [sp, #28]
	orr	r0, r0, r1, lsl #4
	strb	r0, [fp, #1]!
	cmp	fp, r3
	beq	.L19693
.L19692:
	mov	r6, r2
.L19690:
	ldrb	r1, [r6]	@ zero_extendqisi2
	add	r2, r6, #3
	str	r2, [sp, #28]
	cmp	r1, #58
	cmpne	r1, #46
	mov	r0, r1
	beq	.L19750
	bl	hex_to_bin
	mov	r2, r0
	ldrb	r0, [r6, #1]	@ zero_extendqisi2
	str	r2, [sp, #28]
	bl	hex_to_bin
	ldr	r2, [sp, #28]
	ldr	r3, .L19756+28
	orr	r0, r0, r2, lsl #4
	add	r2, r6, #2
	strb	r0, [fp, #1]!
	cmp	r3, fp
	bne	.L19692
.L19693:
	ldrb	r3, [r5, #3590]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L19751
.L19694:
	ldr	r3, [sp, #36]
	mov	r1, #6
	add	r0, r3, #14
	bl	get_random_bytes
	ldr	r2, .L19756+32
	ldrb	r3, [r5, #3590]	@ zero_extendqisi2
	ldrh	r2, [r2, #-2]
	bic	r3, r3, #1
	orr	r3, r3, #2
	tst	r2, #4
	strb	r3, [r5, #3590]
	bne	.L19752
.L19695:
	ldr	r6, [r5, #4072]
	cmp	r6, #0
	beq	.L19703
	ldr	r3, [sp, #36]
	add	fp, r3, #7
	add	r10, r3, #13
	b	.L19699
.L19753:
	ldrb	r0, [r6, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	mov	r3, r0
	ldrb	r0, [r6, #2]	@ zero_extendqisi2
	str	r3, [sp, #32]
	bl	hex_to_bin
	ldrd	r2, [sp, #28]
	orr	r0, r0, r3, lsl #4
	strb	r0, [fp, #1]!
	cmp	fp, r10
	beq	.L19702
.L19701:
	mov	r6, r2
.L19699:
	ldrb	r3, [r6]	@ zero_extendqisi2
	add	r2, r6, #3
	str	r2, [sp, #28]
	cmp	r3, #58
	cmpne	r3, #46
	mov	r0, r3
	beq	.L19753
	bl	hex_to_bin
	mov	r3, r0
	ldrb	r0, [r6, #1]	@ zero_extendqisi2
	str	r3, [sp, #28]
	bl	hex_to_bin
	ldr	r3, [sp, #28]
	add	r2, r6, #2
	orr	r0, r0, r3, lsl #4
	strb	r0, [fp, #1]!
	cmp	r10, fp
	bne	.L19701
.L19702:
	ldrb	r3, [r5, #3584]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L19754
.L19703:
	ldr	r0, .L19756+36
	mov	r1, #6
	bl	get_random_bytes
	ldr	r0, .L19756+40
	ldrb	r3, [r5, #3584]	@ zero_extendqisi2
	ldrh	r2, [r0, #-2]
	bic	r3, r3, #1
	orr	r3, r3, #2
	tst	r2, #4
	strb	r3, [r5, #3584]
	bne	.L19755
.L19740:
	ldrb	r6, [r5, #3585]	@ zero_extendqisi2
	ldrb	r1, [r5, #3586]	@ zero_extendqisi2
	ldrb	r0, [r5, #3587]	@ zero_extendqisi2
	ldrb	lr, [r5, #3588]	@ zero_extendqisi2
	ldrb	ip, [r5, #3589]	@ zero_extendqisi2
.L19704:
	movw	r2, #:lower16:.LC1402
	str	r6, [sp]
	movt	r2, #:upper16:.LC1402
	str	r1, [sp, #4]
	mov	r1, #14
	str	r0, [sp, #8]
	mov	r0, r9
	str	lr, [sp, #12]
	str	ip, [sp, #16]
	bl	snprintf
	b	.L19705
.L19754:
	ldrb	r6, [r5, #3585]	@ zero_extendqisi2
	ldrb	r1, [r5, #3586]	@ zero_extendqisi2
	ldrb	r0, [r5, #3587]	@ zero_extendqisi2
	ldrb	lr, [r5, #3588]	@ zero_extendqisi2
	orr	r2, r3, r6
	ldrb	ip, [r5, #3589]	@ zero_extendqisi2
	orr	r2, r1, r2
	orr	r2, r0, r2
	orr	r2, lr, r2
	orrs	r2, ip, r2
	beq	.L19703
	b	.L19704
.L19751:
	ldrb	r1, [r5, #3591]	@ zero_extendqisi2
	ldrb	r2, [r5, #3592]	@ zero_extendqisi2
	ldrb	r0, [r5, #3593]	@ zero_extendqisi2
	orr	r3, r3, r1
	ldrb	r1, [r5, #3594]	@ zero_extendqisi2
	orr	r3, r3, r2
	ldrb	r2, [r5, #3595]	@ zero_extendqisi2
	orr	r3, r3, r0
	orr	r3, r3, r1
	orrs	r3, r3, r2
	beq	.L19694
	b	.L19695
.L19677:
	bl	bam_data_setup.part.91
	subs	r10, r0, #0
	beq	.L19679
	movw	r0, #:lower16:.LC1028
	mov	r2, r10
	ldr	r1, .L19756+44
	movt	r0, #:upper16:.LC1028
	bl	printk
	movw	r0, #:lower16:.LC1029
	ldr	r1, .L19756+20
	movt	r0, #:upper16:.LC1029
	bl	printk
	b	.L19674
.L19741:
	movw	r1, #:lower16:.LC1025
	mov	r3, #1
	ldr	r2, .L19756+48
	movt	r1, #:upper16:.LC1025
	ldr	r0, .L19756+52
	bl	__dynamic_pr_debug
	b	.L19676
.L19743:
	movw	r1, #:lower16:.LC1398
	ldr	r2, .L19756+20
	mov	r3, r9
	movt	r1, #:upper16:.LC1398
	sub	r0, r0, #24
	bl	__dynamic_pr_debug
	b	.L19680
.L19745:
	movw	r1, #:lower16:.LC1399
	mov	r3, r0
	ldr	r2, .L19756+20
	movt	r1, #:upper16:.LC1399
	sub	r0, r10, #32
	bl	__dynamic_pr_debug
	ldr	r0, [r4, #124]
	b	.L19685
.L19742:
	movw	r1, #:lower16:.LC1027
	ldr	r2, .L19756+48
	movt	r1, #:upper16:.LC1027
	ldr	r0, .L19756+56
	bl	__dynamic_pr_debug
	b	.L19679
.L19711:
	mvn	r10, #21
	b	.L19674
.L19749:
	ldr	r3, .L19756+60
	movw	r1, #:lower16:.LC1405
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC1405
	ldr	r2, .L19756+20
	str	r3, [sp]
	sub	r3, r3, #6
	bl	__dynamic_pr_debug
	b	.L19708
.L19683:
	mvn	r10, #18
	b	.L19674
.L19755:
	movw	r1, #:lower16:.LC1401
	sub	r0, r0, #20
	ldr	r2, .L19756+64
	movt	r1, #:upper16:.LC1401
	bl	__dynamic_pr_debug
	ldrb	r3, [r5, #3584]	@ zero_extendqisi2
	b	.L19740
.L19752:
	movw	r1, #:lower16:.LC1400
	sub	r0, r10, #8
	ldr	r2, .L19756+64
	movt	r1, #:upper16:.LC1400
	bl	__dynamic_pr_debug
	b	.L19695
.L19744:
	mvn	r10, #11
	b	.L19674
.L19747:
	movw	r0, #:lower16:.LC1404
	ldr	r1, .L19756+20
	movt	r0, #:upper16:.LC1404
	bl	printk
	mov	r3, #0
	mov	r0, r4
	str	r3, [r7, #1380]
	bl	kfree
	b	.L19674
.L19757:
	.align	2
.L19756:
	.word	.LANCHOR8-1056
	.word	.LANCHOR8-1024
	.word	.LANCHOR7-1000
	.word	.LANCHOR8-964
	.word	.LANCHOR8-940
	.word	.LANCHOR5+2844
	.word	.LANCHOR1+3576
	.word	.LANCHOR1+3595
	.word	.LANCHOR8-1012
	.word	.LANCHOR1+3584
	.word	.LANCHOR8-988
	.word	.LANCHOR5+2824
	.word	.LANCHOR5-3460
	.word	.LANCHOR4+2376
	.word	.LANCHOR4+2400
	.word	.LANCHOR1+3590
	.word	.LANCHOR5+2864
	.fnend
	.size	ecm_qc_bind_config, .-ecm_qc_bind_config
	.align	2
	.global	fmbim_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	fmbim_free_req, %function
fmbim_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r1, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L19758
	mov	r4, r0
	ldr	r0, [r5]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L19758:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	fmbim_free_req, .-fmbim_free_req
	.align	2
	.global	mbim_configure_params
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_configure_params, %function
mbim_configure_params:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L19763
	movw	r0, #:lower16:.LC1407
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r0, #:upper16:.LC1407
	str	lr, [sp, #4]
	mov	r1, r2
	bl	printk
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #0
	ldr	pc, [sp], #4
.L19764:
	.align	2
.L19763:
	.word	.LANCHOR5+2884
	.fnend
	.size	mbim_configure_params, .-mbim_configure_params
	.align	2
	.global	mbim_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_bind_config, %function
mbim_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r4, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r6, r1
	mov	r7, r0
	movw	r0, #:lower16:.LC1022
	strd	r8, [sp, #16]
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #24]
	ldr	r1, .L19827
	.pad #20
	sub	sp, sp, #20
	mov	r8, r2
	movt	r0, #:upper16:.LC1022
	mov	r2, r6
	bl	printk
	ldr	r5, [r4, #3616]
	cmp	r5, r6
	bls	.L19818
	movw	r0, #:lower16:.LC1024
	mov	r2, r5
	ldr	r1, .L19827+4
	movt	r0, #:upper16:.LC1024
	movw	r6, #:lower16:.LANCHOR4
	bl	printk
	movt	r6, #:upper16:.LANCHOR4
	movw	r3, #2394
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L19819
.L19768:
	cmp	r5, #1
	bne	.L19820
	ldr	r3, [r4, #3744]
	cmp	r3, #0
	beq	.L19771
	movw	r3, #2418
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L19821
.L19773:
	movw	r0, #:lower16:.LC607
	movw	r5, #:lower16:.LANCHOR0
	ldr	r1, .L19827+4
	movt	r0, #:upper16:.LC607
	mov	r2, #1
	movt	r5, #:upper16:.LANCHOR0
	bl	printk
	ldrb	r3, [r5, #2572]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L19822
.L19774:
	ldr	r4, [r4, #3620]
	cmp	r4, #0
	beq	.L19823
	ldr	lr, .L19827+8
	movw	r2, #:lower16:.LC1031
	movw	r3, #:lower16:mbim_unbind
	movt	r2, #:upper16:.LC1031
	movt	r3, #:upper16:mbim_unbind
	mov	r0, r8
	movw	r1, #:lower16:mbim_bind
	ldr	r8, [r7, #24]
	str	r3, [r4, #36]
	movw	r3, #:lower16:mbim_setup
	movt	r1, #:upper16:mbim_bind
	add	r9, lr, #964
	movt	r3, #:upper16:mbim_setup
	movw	ip, #:lower16:mbim_get_alt
	stm	r4, {r2, r9}
	movw	r2, #:lower16:mbim_set_alt
	movt	ip, #:upper16:mbim_get_alt
	movt	r2, #:upper16:mbim_set_alt
	str	r1, [r4, #32]
	movw	r1, #:lower16:mbim_disable
	movt	r1, #:upper16:mbim_disable
	str	r2, [r4, #40]
	movw	r2, #:lower16:mbim_suspend
	str	r3, [r4, #52]
	movw	r3, #:lower16:mbim_resume
	movt	r2, #:upper16:mbim_suspend
	movt	r3, #:upper16:mbim_resume
	str	ip, [r4, #44]
	str	r1, [r4, #48]
	mov	r1, #16384
	strd	r2, [r4, #56]
	mov	r2, #0
	str	r8, [r4, #84]
	str	r2, [r4, #88]
	str	lr, [r4, #200]
	str	r1, [r4, #224]
	bl	str_to_xport
	cmp	r0, #7
	str	r0, [r4, #132]
	beq	.L19778
	mov	r3, #6
	str	r3, [r4, #132]
.L19779:
	movw	r3, #1386
	add	r2, r4, #208
	ldrh	r1, [r6, r3]
	add	r3, r4, #216
	str	r2, [r4, #208]
	strd	r2, [r4, #212]
	str	r3, [r4, #220]
	tst	r1, #4
	bne	.L19824
.L19780:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L19788
	add	r8, r4, #72
	str	r7, [r4, #20]
	add	r2, r7, #36
	mov	r0, r8
	ldr	r1, [r7, #40]
	bl	__list_add
	ldr	r5, [r4, #32]
	cmp	r5, #0
	beq	.L19782
	mov	r1, r4
	mov	r0, r7
	blx	r5
	subs	r5, r0, #0
	blt	.L19825
.L19782:
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L19783
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L19783
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r7, #45]
.L19783:
	tst	r3, #2
	bne	.L19784
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L19784
	ldrb	r2, [r7, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r7, #45]
.L19784:
	tst	r3, #1
	bne	.L19785
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L19785
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r7, #45]
.L19785:
	cmp	r5, #0
	bne	.L19781
	b	.L19786
.L19822:
	ldr	r2, [r7, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19776
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r7, #24]
	strb	r3, [r5, #2572]
	strb	r3, [r5, #2604]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19776
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	strb	r3, [r5, #2580]
	strb	r3, [r5, #2616]
	strb	r3, [r5, #2628]
	b	.L19774
.L19824:
	ldr	ip, [r7]
	movw	r2, #:lower16:.LC924
	ldr	r1, [r7, #24]
	movt	r2, #:upper16:.LC924
	ldr	r3, [r4]
	ldr	r0, .L19827+12
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r7, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L19780
.L19788:
	mvn	r5, #21
.L19781:
	movw	r3, #1410
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L19826
.L19786:
	movw	r0, #:lower16:.LC1032
	mov	r2, r5
	ldr	r1, .L19827
	movt	r0, #:upper16:.LC1032
	bl	printk
.L19765:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L19778:
	mov	r3, #8192
	mov	r2, #16
	mov	r1, #1
	str	r3, [r5, #200]
	strh	r1, [r5, #204]	@ movhi
	str	r3, [r5, #212]
	strh	r2, [r5, #222]	@ movhi
	b	.L19779
.L19771:
	bl	bam_data_setup.part.91
	subs	r5, r0, #0
	beq	.L19773
.L19770:
	movw	r0, #:lower16:.LC1028
	mov	r2, r5
	ldr	r1, .L19827+4
	movt	r0, #:upper16:.LC1028
	bl	printk
	movw	r0, #:lower16:.LC1029
	ldr	r1, .L19827
	movt	r0, #:upper16:.LC1029
	bl	printk
	b	.L19765
.L19819:
	movw	r1, #:lower16:.LC1025
	mov	r3, r5
	ldr	r2, .L19827+16
	movt	r1, #:upper16:.LC1025
	ldr	r0, .L19827+20
	bl	__dynamic_pr_debug
	b	.L19768
.L19821:
	movw	r1, #:lower16:.LC1027
	ldr	r2, .L19827+16
	movt	r1, #:upper16:.LC1027
	ldr	r0, .L19827+24
	bl	__dynamic_pr_debug
	b	.L19773
.L19826:
	ldr	r1, [r7, #24]
	movw	r2, #:lower16:.LC925
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC925
	ldr	r0, .L19827+28
	ldr	r1, [r1]
	strd	r4, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L19786
.L19825:
	mov	r0, r8
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L19782
.L19776:
	mvn	r5, #18
	b	.L19765
.L19823:
	movw	r0, #:lower16:.LC1030
	ldr	r1, .L19827
	mvn	r5, #11
	movt	r0, #:upper16:.LC1030
	bl	printk
	b	.L19765
.L19820:
	movw	r0, #:lower16:.LC1026
	mov	r2, r5
	ldr	r1, .L19827+16
	movt	r0, #:upper16:.LC1026
	mvn	r5, #21
	bl	printk
	b	.L19770
.L19818:
	movw	r0, #:lower16:.LC1023
	mov	r3, r5
	ldr	r1, .L19827
	mov	r2, r6
	movt	r0, #:upper16:.LC1023
	bl	printk
	mvn	r5, #18
	b	.L19765
.L19828:
	.align	2
.L19827:
	.word	.LANCHOR5-412
	.word	.LANCHOR5-392
	.word	.LANCHOR0+1668
	.word	.LANCHOR4+1368
	.word	.LANCHOR5-3460
	.word	.LANCHOR4+2376
	.word	.LANCHOR4+2400
	.word	.LANCHOR4+1392
	.fnend
	.size	mbim_bind_config, .-mbim_bind_config
	.align	2
	.global	bam_data_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_disconnect, %function
bam_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L19855
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L19850
.L19830:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #3748]
	cmp	r5, r3
	bge	.L19851
	cmp	r6, #0
	beq	.L19852
	add	r5, r4, r5, lsl #2
	ldr	r5, [r5, #3752]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L19833
	ldr	r2, [r3, #8]
	cmp	r2, #0
	beq	.L19833
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L19833
	ldr	r0, [r3, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #4]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r5, #4]
	mov	r3, #0
	ldr	r2, [r2, #8]
	str	r3, [r2]
	ldr	r2, [r5, #4]
	ldr	r2, [r2, #12]
	str	r3, [r2]
	str	r3, [r5, #4]
.L19833:
	ldr	r3, [r5, #60]
	cmp	r3, #7
	beq	.L19853
	mov	r0, #0
	bl	usb_bam_client_ready
	cmp	r0, #0
	bne	.L19854
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L19853:
	ldr	r1, [r4, #3744]
	add	r2, r5, #184
	mov	r0, #4
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on
.L19850:
	movw	r1, #:lower16:.LC157
	sub	r0, r3, #24
	ldr	r2, .L19855+4
	movt	r1, #:upper16:.LC157
	mov	r3, r6
	str	r5, [sp]
	bl	__dynamic_pr_debug
	b	.L19830
.L19852:
	ldr	r1, .L19855+4
	movw	r0, #:lower16:.LC616
	movt	r0, #:upper16:.LC616
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L19851:
	ldr	r1, .L19855+4
	movw	r0, #:lower16:.LC615
	mov	r2, r5
	movt	r0, #:upper16:.LC615
.L19849:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L19854:
	ldr	r2, .L19855+4
	movw	r0, #:lower16:.LC617
	movt	r0, #:upper16:.LC617
	mov	r1, r2
	b	.L19849
.L19856:
	.align	2
.L19855:
	.word	.LANCHOR4-2352
	.word	.LANCHOR5-3276
	.fnend
	.size	bam_data_disconnect, .-bam_data_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_disable, %function
mbim_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	ldr	r1, .L19875
	strd	r6, [sp, #8]
	mov	r7, r0
	movw	r0, #:lower16:.LC1408
	movt	r0, #:upper16:.LC1408
	strd	r8, [sp, #16]
	add	r8, r7, #204
	str	r10, [sp, #24]
	mov	r9, r7
	str	lr, [sp, #28]
	bl	printk
	mov	r3, #0
	mov	r0, r8
	str	r3, [r7, #88]
	strb	r3, [r7, #164]
	bl	_raw_spin_lock
	ldr	r4, [r9, #208]!
	cmp	r4, r9
	ldr	r5, [r4]
	bne	.L19858
	b	.L19859
.L19873:
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
	cmp	r9, r5
	ldr	r3, [r5]
	beq	.L19859
.L19861:
	mov	r4, r5
	mov	r5, r3
.L19858:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del
	cmp	r6, #0
	bne	.L19873
	cmp	r9, r5
	ldr	r3, [r5]
	bne	.L19861
.L19859:
	mov	r9, r7
	ldr	r4, [r9, #216]!
	cmp	r4, r9
	ldr	r5, [r4]
	bne	.L19862
	b	.L19863
.L19874:
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
	cmp	r9, r5
	ldr	r3, [r5]
	beq	.L19863
.L19865:
	mov	r4, r5
	mov	r5, r3
.L19862:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del
	cmp	r6, #0
	bne	.L19874
	cmp	r9, r5
	ldr	r3, [r5]
	bne	.L19865
.L19863:
	mov	r0, r8
	bl	_raw_spin_unlock
	mov	r0, r7
	bl	mbim_reset_function_queue
	movw	r0, #:lower16:.LC1409
	ldrb	r3, [r7, #136]	@ zero_extendqisi2
	mov	r2, r7
	ldr	r1, .L19875+4
	movt	r0, #:upper16:.LC1409
	bl	printk
	add	r0, r7, #140
	ldrb	r1, [r7, #136]	@ zero_extendqisi2
	bl	bam_data_disconnect
	ldr	r0, [r7, #156]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L19866
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r7, #156]
	mov	r2, #0
	str	r2, [r3]
.L19866:
	mov	r3, #0
	movw	r0, #:lower16:.LC1410
	ldr	r1, .L19875
	movt	r0, #:upper16:.LC1410
	str	r3, [r7, #168]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L19876:
	.align	2
.L19875:
	.word	.LANCHOR5+2908
	.word	.LANCHOR5+2924
	.fnend
	.size	mbim_disable, .-mbim_disable
	.align	2
	.global	bam_data_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_connect, %function
bam_data_connect:
	.fnstart
	@ args = 8, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L19894
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r4, r1
	mov	r7, r2
	strd	r8, [sp, #16]
	mov	r9, r3
	str	r10, [sp, #24]
	ldrh	r3, [ip, #-2]
	str	lr, [sp, #28]
	.pad #8
	sub	sp, sp, #8
	ldrb	r8, [sp, #40]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L19889
.L19878:
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r3, [r6, #3748]
	cmp	r3, r4
	ble	.L19890
	cmp	r5, #0
	beq	.L19891
	ldr	r3, [r5, #8]
	add	r4, r6, r4, lsl #2
	ldr	r4, [r4, #3752]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r10, r0, #0
	bne	.L19892
	ldr	r3, [r5, #8]
	str	r4, [r3]
	ldr	r3, [r5, #12]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r10, r0, #0
	bne	.L19893
	ldr	r3, [r5, #12]
	cmp	r7, #7
	str	r4, [r3]
	ldr	r3, [sp, #44]
	str	r5, [r4, #4]
	strb	r9, [r4, #52]
	strb	r8, [r4, #53]
	str	r3, [r4, #56]
	str	r7, [r4, #60]
	bne	.L19884
	add	r2, r4, #44
	add	r3, r4, #48
	strb	r9, [r4, #64]
	strb	r8, [r4, #65]
	strd	r2, [r4, #68]
.L19884:
	add	r2, r4, #168
	mov	r0, #4
	ldr	r1, [r6, #3744]
	bl	queue_work_on
.L19877:
	mov	r0, r10
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L19889:
	movw	r1, #:lower16:.LC157
	sub	r0, ip, #20
	ldr	r2, .L19894+4
	movt	r1, #:upper16:.LC157
	mov	r3, r5
	str	r4, [sp]
	bl	__dynamic_pr_debug
	b	.L19878
.L19891:
	movw	r0, #:lower16:.LC616
	ldr	r1, .L19894+4
	mvn	r10, #18
	movt	r0, #:upper16:.LC616
	bl	printk
	b	.L19877
.L19893:
	movw	r0, #:lower16:.LC922
	ldr	r2, [r5, #12]
	movt	r0, #:upper16:.LC922
	ldr	r1, .L19894+4
	bl	printk
	ldr	r3, [r5, #8]
	mov	r2, #0
	str	r2, [r3]
	b	.L19877
.L19890:
	movw	r0, #:lower16:.LC173
	mov	r2, r4
	ldr	r1, .L19894+4
	movt	r0, #:upper16:.LC173
	mvn	r10, #18
	bl	printk
	b	.L19877
.L19892:
	movw	r0, #:lower16:.LC921
	ldr	r1, .L19894+4
	ldr	r2, [r5, #8]
	movt	r0, #:upper16:.LC921
	bl	printk
	b	.L19877
.L19895:
	.align	2
.L19894:
	.word	.LANCHOR8-916
	.word	.LANCHOR5+2944
	.fnend
	.size	bam_data_connect, .-bam_data_connect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_set_alt, %function
mbim_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r5, [r0, #196]	@ zero_extendqisi2
	.pad #8
	sub	sp, sp, #8
	ldr	r8, [r0, #84]
	cmp	r5, r1
	beq	.L19923
	ldrb	r3, [r0, #197]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L19898
	movw	r0, #:lower16:.LC1414
	ldr	r1, .L19933
	movt	r0, #:upper16:.LC1414
	bl	printk
	cmp	r6, #1
	bhi	.L19898
	ldr	r3, [r4, #148]
	ldr	r3, [r3]
	cmp	r3, #0
	bne	.L19924
.L19904:
	cmp	r6, #1
	beq	.L19925
.L19905:
	add	r5, r4, #204
	strb	r6, [r4, #198]
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r3, #3
	mov	r0, r5
	strb	r3, [r4, #164]
	bl	_raw_spin_unlock
.L19903:
	mov	r5, #1
	movw	r0, #:lower16:.LC1427
	ldr	r1, .L19933
	mov	r7, #0
	movt	r0, #:upper16:.LC1427
	str	r5, [r4, #88]
	bl	printk
	mov	r2, r5
	mov	r3, r7
	mov	r1, #3
	add	r0, r4, #108
	bl	__wake_up
	mov	r2, r5
	add	r0, r4, #120
	mov	r3, r7
	mov	r1, #3
	bl	__wake_up
.L19896:
	mov	r0, r7
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L19925:
	movw	r0, #:lower16:.LC1416
	ldr	r1, .L19933
	movt	r0, #:upper16:.LC1416
	bl	printk
	ldr	r3, [r4, #148]
	ldr	r5, [r3, #28]
	cmp	r5, #0
	beq	.L19926
	movw	r0, #:lower16:.LC1426
	ldr	r1, .L19933
	movt	r0, #:upper16:.LC1426
	bl	printk
	b	.L19905
.L19926:
	movw	r0, #:lower16:.LC1417
	ldr	r1, .L19933
	movt	r0, #:upper16:.LC1417
	bl	printk
	mov	r1, r4
	ldr	r2, [r4, #148]
	ldr	r0, [r8]
	bl	config_ep_by_speed
	subs	r7, r0, #0
	bne	.L19927
	ldr	r3, [r4, #148]
	movw	r0, #:lower16:.LC1419
	ldr	r1, .L19933
	movt	r0, #:upper16:.LC1419
	ldr	r2, [r3, #28]
	bl	printk
	mov	r1, r4
	ldr	r2, [r4, #152]
	ldr	r0, [r8]
	bl	config_ep_by_speed
	subs	r7, r0, #0
	bne	.L19928
	ldr	r3, [r4, #152]
	movw	r0, #:lower16:.LC1421
	movt	r0, #:upper16:.LC1421
	ldr	r1, .L19933
	ldr	r2, [r3, #28]
	bl	printk
	ldr	r0, .L19933+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L19929
.L19909:
	ldr	lr, [r4, #84]
	movw	r0, #:lower16:.LC1423
	mov	r2, r4
	ldr	ip, [r4, #132]
	movt	r0, #:upper16:.LC1423
	ldrb	r3, [r4, #136]	@ zero_extendqisi2
	ldr	r1, .L19933+8
	ldr	r7, [lr]
	cmp	ip, #7
	moveq	r5, #2
	movne	r5, #0
	bl	printk
	mov	r1, r5
	mov	r2, #0
	ldrb	r3, [r4, #136]	@ zero_extendqisi2
	ldr	r0, [r7, #28]
	bl	usb_bam_get_connection_idx
	mov	r8, r0
	mov	r1, r5
	ldrb	r3, [r4, #136]	@ zero_extendqisi2
	mov	r2, #1
	ldr	r0, [r7, #28]
	bl	usb_bam_get_connection_idx
	uxtb	ip, r0
	mov	r0, #1
	ldr	r2, [r4, #132]
	ldrb	r1, [r4, #136]	@ zero_extendqisi2
	uxtb	r3, r8
	str	ip, [sp]
	str	r0, [sp, #4]
	add	r0, r4, #140
	bl	bam_data_connect
	subs	r2, r0, #0
	bne	.L19930
	movw	r0, #:lower16:.LC1425
	ldr	r1, .L19933+8
	movt	r0, #:upper16:.LC1425
	bl	printk
	b	.L19905
.L19898:
	movw	r0, #:lower16:.LC1428
	ldr	r1, .L19933
	mvn	r7, #21
	movt	r0, #:upper16:.LC1428
	bl	printk
	b	.L19896
.L19928:
	ldr	r2, [r4, #152]
	movw	r0, #:lower16:.LC1420
	mov	r3, r7
	ldr	r1, .L19933
	movt	r0, #:upper16:.LC1420
	str	r5, [r2, #28]
	ldr	r2, [r4, #152]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L19896
.L19927:
	ldr	r2, [r4, #148]
	movw	r0, #:lower16:.LC1418
	mov	r3, r7
	ldr	r1, .L19933
	movt	r0, #:upper16:.LC1418
	str	r5, [r2, #28]
	ldr	r2, [r4, #148]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L19896
.L19930:
	movw	r0, #:lower16:.LC1424
	ldr	r1, .L19933+8
	movt	r0, #:upper16:.LC1424
	bl	printk
	b	.L19905
.L19929:
	movw	r1, #:lower16:.LC1422
	ldr	r2, .L19933
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC1422
	bl	__dynamic_pr_debug
	b	.L19909
.L19924:
	movw	r0, #:lower16:.LC1415
	ldr	r1, .L19933
	movt	r0, #:upper16:.LC1415
	bl	printk
	ldr	r3, .L19933+12
	mov	r2, #16384
	mov	r1, #0
	str	r1, [r4, #88]
	str	r3, [r4, #200]
	str	r2, [r4, #224]
	b	.L19904
.L19923:
	movw	r0, #:lower16:.LC1411
	ldr	r1, .L19933
	movt	r0, #:upper16:.LC1411
	bl	printk
	cmp	r6, #0
	bne	.L19898
	ldr	r3, [r4, #156]
	ldr	r3, [r3]
	cmp	r3, #0
	bne	.L19931
.L19899:
	mov	r1, r4
	ldr	r2, [r4, #156]
	ldr	r0, [r8]
	bl	config_ep_by_speed
	subs	r7, r0, #0
	bne	.L19932
	ldr	r3, [r4, #156]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r7, r0, #0
	ldreq	r3, [r4, #156]
	streq	r4, [r3]
	beq	.L19903
	ldr	r2, [r4, #156]
	movw	r0, #:lower16:.LC1152
	mov	r3, r7
	ldr	r1, .L19933
	movt	r0, #:upper16:.LC1152
	ldr	r2, [r2, #4]
	bl	printk
	b	.L19896
.L19931:
	movw	r0, #:lower16:.LC1412
	mov	r2, r5
	ldr	r1, .L19933
	movt	r0, #:upper16:.LC1412
	bl	printk
	ldr	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L19899
.L19932:
	ldr	r2, [r4, #156]
	mov	ip, #0
	movw	r0, #:lower16:.LC1413
	mov	r3, r7
	ldr	r1, .L19933
	movt	r0, #:upper16:.LC1413
	str	ip, [r2, #28]
	ldr	r2, [r4, #156]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L19896
.L19934:
	.align	2
.L19933:
	.word	.LANCHOR5+2964
	.word	.LANCHOR8-892
	.word	.LANCHOR5+2980
	.word	.LANCHOR0+1668
	.fnend
	.size	mbim_set_alt, .-mbim_set_alt
	.align	2
	.global	bam_data_destroy
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_destroy, %function
bam_data_destroy:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L19946
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L19945
.L19936:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	add	r5, r4, r5, lsl #2
	ldr	r0, [r5, #3752]
	bl	kfree
	ldr	r0, [r4, #3744]
	mov	r3, #0
	str	r3, [r5, #3752]
	cmp	r0, r3
	beq	.L19937
	bl	destroy_workqueue
.L19937:
	mov	r3, #0
	ldr	r6, [sp, #8]
	mov	r0, r3
	str	r3, [r4, #3744]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L19945:
	movw	r1, #:lower16:.LC717
	sub	r0, r3, #20
	ldr	r2, .L19946+4
	movt	r1, #:upper16:.LC717
	bl	__dynamic_pr_debug
	b	.L19936
.L19947:
	.align	2
.L19946:
	.word	.LANCHOR4-820
	.word	.LANCHOR5-2404
	.fnend
	.size	bam_data_destroy, .-bam_data_destroy
	.align	2
	.global	bam_data_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_setup, %function
bam_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR4
	movw	r3, #2394
	movt	r4, #:upper16:.LANCHOR4
	mov	r5, r0
	str	r6, [sp, #8]
	ldrh	r3, [r4, r3]
	str	lr, [sp, #12]
	tst	r3, #4
	bne	.L19958
.L19949:
	cmp	r5, #1
	bne	.L19959
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #3744]
	cmp	r3, #0
	beq	.L19952
	movw	r3, #2418
	ldrh	r0, [r4, r3]
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	bne	.L19960
.L19948:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L19952:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	bam_data_setup.part.91
.L19958:
	movw	r1, #:lower16:.LC1025
	mov	r3, r0
	ldr	r2, .L19961
	movt	r1, #:upper16:.LC1025
	ldr	r0, .L19961+4
	bl	__dynamic_pr_debug
	b	.L19949
.L19960:
	movw	r1, #:lower16:.LC1027
	ldr	r2, .L19961
	movt	r1, #:upper16:.LC1027
	ldr	r0, .L19961+8
	bl	__dynamic_pr_debug
	mov	r0, #0
	b	.L19948
.L19959:
	movw	r0, #:lower16:.LC1026
	mov	r2, r5
	ldr	r1, .L19961
	movt	r0, #:upper16:.LC1026
	bl	printk
	mvn	r0, #21
	b	.L19948
.L19962:
	.align	2
.L19961:
	.word	.LANCHOR5-3460
	.word	.LANCHOR4+2376
	.word	.LANCHOR4+2400
	.fnend
	.size	bam_data_setup, .-bam_data_setup
	.align	2
	.global	bam_data_suspend
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_suspend, %function
bam_data_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L19970
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movw	r4, #:lower16:.LANCHOR1
	str	lr, [sp, #8]
	movt	r4, #:upper16:.LANCHOR1
	.pad #12
	sub	sp, sp, #12
	add	r1, r4, r0, lsl #2
	ldrh	r3, [r2, #-14]
	ldr	r5, [r1, #3752]
	tst	r3, #4
	bne	.L19969
.L19964:
	ldr	r1, [r4, #3744]
	add	r2, r5, #200
	mov	r0, #4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work_on
.L19969:
	ldr	r3, .L19970+4
	movw	r1, #:lower16:.LC614
	str	r0, [sp]
	movt	r1, #:upper16:.LC614
	sub	r0, r2, #32
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L19964
.L19971:
	.align	2
.L19970:
	.word	.LANCHOR4-2368
	.word	.LANCHOR5-3296
	.fnend
	.size	bam_data_suspend, .-bam_data_suspend
	.align	2
	.global	bam_data_resume
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_resume, %function
bam_data_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L19979
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movw	r4, #:lower16:.LANCHOR1
	str	lr, [sp, #8]
	movt	r4, #:upper16:.LANCHOR1
	.pad #12
	sub	sp, sp, #12
	add	r1, r4, r0, lsl #2
	ldrh	r3, [r2, #-14]
	ldr	r5, [r1, #3752]
	tst	r3, #4
	bne	.L19978
.L19973:
	ldr	r1, [r4, #3744]
	add	r2, r5, #216
	mov	r0, #4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work_on
.L19978:
	ldr	r3, .L19979+4
	movw	r1, #:lower16:.LC612
	str	r0, [sp]
	movt	r1, #:upper16:.LC612
	sub	r0, r2, #32
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L19973
.L19980:
	.align	2
.L19979:
	.word	.LANCHOR4-2416
	.word	.LANCHOR5-3332
	.fnend
	.size	bam_data_resume, .-bam_data_resume
	.align	2
	.global	ecm_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_bind_config, %function
ecm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	movw	r0, #:lower16:.LC472
	strd	r8, [sp, #16]
	mov	r6, r1
	movt	r0, #:upper16:.LC472
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r8, [r7, #24]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r8]
	ldr	r4, [r3, #28]
	mov	r1, r4
	bl	strcmp
	cmp	r0, #0
	beq	.L19996
	movw	r0, #:lower16:.LC475
	mov	r1, r4
	movt	r0, #:upper16:.LC475
	bl	strcmp
	cmp	r0, #0
	cmpne	r6, #0
	beq	.L19996
	movw	r5, #:lower16:.LANCHOR0
	movt	r5, #:upper16:.LANCHOR0
	ldrb	r3, [r5, #1496]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L19983
	ldrb	r3, [r8, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19985
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r8, #48]
	ldr	r2, [r7, #24]
	strb	r3, [r5, #1496]
	strb	r3, [r5, #3732]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19985
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r1, [r7, #24]
	strb	r3, [r5, #1512]
	strb	r3, [r5, #3764]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19985
	add	r3, r3, #1
	movw	r2, #:lower16:.LANCHOR7
	uxtb	r3, r3
	movt	r2, #:upper16:.LANCHOR7
	strb	r3, [r1, #48]
	ldr	r1, [r7, #24]
	strb	r3, [r2, #-989]
	strb	r3, [r5, #1504]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19985
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	strb	r3, [r5, #1520]
	strb	r3, [r5, #3723]
.L19983:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L19997
	mov	r2, #176
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L20023
.L19986:
	ldrb	ip, [r6, #1]	@ zero_extendqisi2
	add	r8, r4, #150
	movw	r2, #:lower16:.LC1402
	ldrb	fp, [r6, #5]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC1402
	mov	r1, #14
	ldrb	r10, [r6, #4]	@ zero_extendqisi2
	mov	r0, r8
	ldrb	r9, [r6, #3]	@ zero_extendqisi2
	ldrb	lr, [r6, #2]	@ zero_extendqisi2
	ldrb	r3, [r6]	@ zero_extendqisi2
	movw	r6, #:lower16:.LANCHOR4
	movt	r6, #:upper16:.LANCHOR4
	strd	r10, [sp, #12]
	stm	sp, {ip, lr}
	str	r9, [sp, #8]
	bl	snprintf
	ldr	ip, .L20026
	movw	r3, #:lower16:.LC1403
	movw	r0, #:lower16:ecm_bind
	movw	r2, #:lower16:ecm_unbind
	movt	r3, #:upper16:.LC1403
	str	r8, [r5, #1508]
	movw	r1, #:lower16:ecm_set_alt
	movt	r0, #:upper16:ecm_bind
	movt	r2, #:upper16:ecm_unbind
	movt	r1, #:upper16:ecm_set_alt
	stm	r4, {r3, ip}
	movw	ip, #1386
	str	r0, [r4, #32]
	movw	r0, #:lower16:ecm_get_alt
	str	r2, [r4, #36]
	movt	r0, #:upper16:ecm_get_alt
	movw	r2, #:lower16:ecm_setup
	str	r1, [r4, #40]
	ldrh	ip, [r6, ip]
	movw	r1, #:lower16:ecm_disable
	movt	r1, #:upper16:ecm_disable
	movt	r2, #:upper16:ecm_setup
	strd	r0, [r4, #44]
	mov	r0, #15
	tst	ip, #4
	str	r2, [r4, #52]
	strh	r0, [r4, #98]	@ movhi
	bne	.L20024
.L19987:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L19990
	add	r9, r4, #72
	str	r7, [r4, #20]
	add	r2, r7, #36
	mov	r0, r9
	ldr	r1, [r7, #40]
	bl	__list_add
	ldr	r8, [r4, #32]
	cmp	r8, #0
	beq	.L19991
	mov	r1, r4
	mov	r0, r7
	blx	r8
	subs	r8, r0, #0
	blt	.L20025
.L19991:
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L19992
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L19992
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r7, #45]
.L19992:
	tst	r3, #2
	bne	.L19993
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L19993
	ldrb	r2, [r7, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r7, #45]
.L19993:
	tst	r3, #1
	bne	.L19994
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L19994
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r7, #45]
.L19994:
	cmp	r8, #0
	beq	.L19981
	movw	r3, #1410
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L19989
	b	.L19988
.L20024:
	ldr	ip, [r7]
	movw	r2, #:lower16:.LC924
	ldr	r1, [r7, #24]
	movt	r2, #:upper16:.LC924
	ldr	r0, .L20026+4
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r7, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L19987
.L19990:
	movw	r3, #1410
	mvn	r8, #21
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L19989
.L19988:
	ldr	r1, [r7, #24]
	movw	r2, #:lower16:.LC925
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC925
	ldr	r0, .L20026+8
	ldr	r1, [r1]
	stm	sp, {r4, r8}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L19989:
	mov	r3, #0
	mov	r0, r4
	str	r3, [r5, #1508]
	bl	kfree
.L19981:
	mov	r0, r8
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L19997:
	mov	r4, #16
	b	.L19986
.L20025:
	mov	r0, r9
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L19991
.L19996:
	mvn	r8, #21
	b	.L19981
.L19985:
	mvn	r8, #18
	b	.L19981
.L20023:
	mvn	r8, #11
	b	.L19981
.L20027:
	.align	2
.L20026:
	.word	.LANCHOR7-976
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.fnend
	.size	ecm_bind_config, .-ecm_bind_config
	.align	2
	.global	rndis_qc_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_bind_config, %function
rndis_qc_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:__stack_chk_guard
	movt	r7, #:upper16:__stack_chk_guard
	strd	r8, [sp, #16]
	subs	r9, r1, #0
	ldr	r3, [r7]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #40
	sub	sp, sp, #40
	str	r3, [sp, #36]
	beq	.L20051
	movw	r5, #:lower16:.LANCHOR1
	mov	r8, r0
	movt	r5, #:upper16:.LANCHOR1
	ldrb	r3, [r5, #3740]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L20030
.L20033:
	movw	r6, #:lower16:.LANCHOR4
	movw	r3, #2394
	movt	r6, #:upper16:.LANCHOR4
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L20083
.L20032:
	ldr	r3, [r5, #3744]
	cmp	r3, #0
	beq	.L20034
	movw	r3, #2418
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L20084
.L20036:
	movw	r3, #:lower16:.LANCHOR7
	movt	r3, #:upper16:.LANCHOR7
	ldrb	r2, [r3, #-968]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L20037
	ldr	r1, [r8, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L20039
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r8, #24]
	strb	r2, [r3, #-2596]
	strb	r2, [r3, #-968]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L20039
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r8, #24]
	strb	r2, [r3, #-2576]
	strb	r2, [r3, #-960]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L20039
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [r3, #-2605]
	strb	r2, [r3, #-952]
.L20037:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L20052
	mov	r2, #184
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L20085
.L20040:
	ldr	r2, [r9]	@ unaligned
	movw	r0, #:lower16:rndis_qc_bind
	movw	r1, #:lower16:rndis_qc_unbind
	ldr	ip, .L20089
	movt	r0, #:upper16:rndis_qc_bind
	movt	r1, #:upper16:rndis_qc_unbind
	movw	r3, #:lower16:.LC1179
	movt	r3, #:upper16:.LC1179
	str	r2, [r4, #122]	@ unaligned
	movw	r2, #:lower16:rndis_qc_set_alt
	ldrh	lr, [r9, #4]	@ unaligned
	movt	r2, #:upper16:rndis_qc_set_alt
	stm	r4, {r3, ip}
	strd	r0, [r4, #32]
	movw	r1, #1386
	movw	r0, #:lower16:rndis_qc_rm_hdr
	str	r2, [r4, #40]
	movw	r2, #:lower16:rndis_qc_add_header
	ldrh	ip, [r6, r1]
	movw	r1, #:lower16:rndis_qc_setup
	movt	r2, #:upper16:rndis_qc_add_header
	movt	r0, #:upper16:rndis_qc_rm_hdr
	movt	r1, #:upper16:rndis_qc_setup
	strh	lr, [r4, #126]	@ unaligned
	str	r1, [r4, #52]
	movw	r1, #:lower16:rndis_qc_resume
	tst	ip, #4
	str	r2, [r4, #104]
	movw	r2, #:lower16:rndis_qc_disable
	movt	r1, #:upper16:rndis_qc_resume
	str	r0, [r4, #108]
	movw	r0, #:lower16:rndis_qc_suspend
	movt	r2, #:upper16:rndis_qc_disable
	movt	r0, #:upper16:rndis_qc_suspend
	mov	ip, #44
	str	r2, [r4, #48]
	mov	r2, #0
	strd	r0, [r4, #56]
	mov	r0, #1
	strh	r2, [r4, #98]	@ movhi
	str	ip, [r4, #100]
	str	r2, [r4, #128]
	strb	r0, [r4, #132]
	str	r2, [r4, #140]
	bne	.L20086
.L20042:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L20082
	add	r9, r4, #72
	str	r8, [r4, #20]
	add	r2, r8, #36
	mov	r0, r9
	ldr	r1, [r8, #40]
	bl	__list_add
	ldr	r10, [r4, #32]
	cmp	r10, #0
	beq	.L20045
	mov	r1, r4
	mov	r0, r8
	blx	r10
	subs	r10, r0, #0
	blt	.L20087
.L20045:
	ldrb	r3, [r8, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L20046
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L20046
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r8, #45]
.L20046:
	tst	r3, #2
	bne	.L20047
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L20047
	ldrb	r2, [r8, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r8, #45]
.L20047:
	tst	r3, #1
	bne	.L20048
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L20048
	ldrb	r3, [r8, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r8, #45]
.L20048:
	cmp	r10, #0
	streq	r4, [r5, #2496]
	beq	.L20028
	movw	r3, #1410
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L20041
.L20043:
	ldr	r1, [r8, #24]
	movw	r2, #:lower16:.LC925
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC925
	ldr	r0, .L20089+4
	ldr	r1, [r1]
	stm	sp, {r4, r10}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20041
.L20030:
	bl	rndis_init.part.89
	subs	r10, r0, #0
	bge	.L20033
	b	.L20028
.L20086:
	ldr	ip, [r8]
	movw	r2, #:lower16:.LC924
	ldr	r1, [r8, #24]
	movt	r2, #:upper16:.LC924
	ldr	r0, .L20089+8
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r8, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L20042
.L20082:
	movw	r3, #1410
	mvn	r10, #21
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L20043
.L20041:
	mov	r0, r4
	mov	r4, #0
	bl	kfree
	ldrb	r3, [r5, #3740]	@ zero_extendqisi2
	str	r4, [r5, #2496]
	cmp	r3, r4
	beq	.L20028
	movw	r1, #:lower16:.LC596
	add	r0, sp, #16
	strb	r4, [r5, #3740]
	movt	r1, #:upper16:.LC596
	mov	r2, r4
	bl	sprintf
	add	r0, sp, #16
	mov	r1, r4
	bl	remove_proc_entry
.L20028:
	ldr	r2, [sp, #36]
	mov	r0, r10
	ldr	r3, [r7]
	cmp	r2, r3
	bne	.L20088
	add	sp, sp, #40
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L20052:
	mov	r4, #16
	b	.L20040
.L20085:
	mvn	r10, #11
	b	.L20041
.L20034:
	bl	bam_data_setup.part.91
	subs	r10, r0, #0
	beq	.L20036
	movw	r0, #:lower16:.LC1028
	mov	r2, r10
	ldr	r1, .L20089+12
	movt	r0, #:upper16:.LC1028
	bl	printk
	movw	r0, #:lower16:.LC1029
	ldr	r1, .L20089+16
	movt	r0, #:upper16:.LC1029
	bl	printk
	b	.L20028
.L20083:
	movw	r1, #:lower16:.LC1025
	mov	r3, #1
	ldr	r2, .L20089+20
	movt	r1, #:upper16:.LC1025
	ldr	r0, .L20089+24
	bl	__dynamic_pr_debug
	b	.L20032
.L20084:
	movw	r1, #:lower16:.LC1027
	ldr	r2, .L20089+20
	movt	r1, #:upper16:.LC1027
	ldr	r0, .L20089+28
	bl	__dynamic_pr_debug
	b	.L20036
.L20087:
	mov	r0, r9
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L20045
.L20039:
	mvn	r10, #18
	b	.L20028
.L20051:
	mvn	r10, #21
	b	.L20028
.L20088:
	bl	__stack_chk_fail
.L20090:
	.align	2
.L20089:
	.word	.LANCHOR7-936
	.word	.LANCHOR4+1392
	.word	.LANCHOR4+1368
	.word	.LANCHOR5+3000
	.word	.LANCHOR5+3020
	.word	.LANCHOR5-3460
	.word	.LANCHOR4+2376
	.word	.LANCHOR4+2400
	.fnend
	.size	rndis_qc_bind_config, .-rndis_qc_bind_config
	.align	2
	.global	rndis_qc_bind_config_vendor
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_bind_config_vendor, %function
rndis_qc_bind_config_vendor:
	.fnstart
	@ args = 4, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:__stack_chk_guard
	movt	r7, #:upper16:__stack_chk_guard
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	subs	fp, r1, #0
	ldr	r1, [r7]
	str	lr, [sp, #32]
	.pad #52
	sub	sp, sp, #52
	ldrb	r9, [sp, #88]	@ zero_extendqisi2
	strd	r2, [sp, #16]
	str	r1, [sp, #44]
	beq	.L20115
	movw	r5, #:lower16:.LANCHOR1
	mov	r8, r0
	movt	r5, #:upper16:.LANCHOR1
	ldrb	r3, [r5, #3740]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L20093
.L20096:
	movw	r6, #:lower16:.LANCHOR4
	movw	r3, #2394
	movt	r6, #:upper16:.LANCHOR4
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L20148
.L20095:
	ldr	r3, [r5, #3744]
	cmp	r3, #0
	beq	.L20097
	movw	r3, #2418
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L20149
.L20099:
	movw	r3, #:lower16:.LANCHOR7
	movt	r3, #:upper16:.LANCHOR7
	ldrb	r2, [r3, #-968]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L20100
	ldr	r1, [r8, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L20102
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r8, #24]
	strb	r2, [r3, #-2596]
	strb	r2, [r3, #-968]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L20102
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r8, #24]
	strb	r2, [r3, #-2576]
	strb	r2, [r3, #-960]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L20102
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [r3, #-2605]
	strb	r2, [r3, #-952]
.L20100:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L20116
	mov	r2, #184
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L20150
.L20103:
	ldr	r2, [fp]	@ unaligned
	movw	r1, #:lower16:rndis_qc_unbind
	movw	r3, #:lower16:.LC1179
	ldr	lr, .L20154
	movt	r1, #:upper16:rndis_qc_unbind
	movw	ip, #:lower16:rndis_qc_bind
	movt	ip, #:upper16:rndis_qc_bind
	movt	r3, #:upper16:.LC1179
	cmp	r9, #0
	str	r2, [r4, #122]	@ unaligned
	movw	r2, #:lower16:rndis_qc_set_alt
	ldrh	r0, [fp, #4]	@ unaligned
	movt	r2, #:upper16:rndis_qc_set_alt
	stm	r4, {r3, lr}
	moveq	r9, #15
	str	r1, [r4, #36]
	movw	r1, #1386
	str	ip, [r4, #32]
	movw	ip, #:lower16:rndis_qc_setup
	str	r2, [r4, #40]
	movw	r2, #:lower16:rndis_qc_rm_hdr
	ldrh	lr, [r6, r1]
	movt	r2, #:upper16:rndis_qc_rm_hdr
	movw	r1, #:lower16:rndis_qc_add_header
	movt	r1, #:upper16:rndis_qc_add_header
	movt	ip, #:upper16:rndis_qc_setup
	strh	r0, [r4, #126]	@ unaligned
	ldr	r0, [sp, #16]
	str	ip, [r4, #52]
	tst	lr, #4
	mov	ip, #0
	str	r2, [r4, #108]
	movw	r2, #:lower16:rndis_qc_resume
	movt	r2, #:upper16:rndis_qc_resume
	str	r1, [r4, #104]
	movw	r1, #:lower16:rndis_qc_suspend
	movt	r1, #:upper16:rndis_qc_suspend
	str	r0, [r4, #128]
	movw	r0, #:lower16:rndis_qc_disable
	movt	r0, #:upper16:rndis_qc_disable
	str	r2, [r4, #60]
	ldr	r2, [sp, #20]
	str	r0, [r4, #48]
	mov	r0, #44
	str	r1, [r4, #56]
	strh	ip, [r4, #98]	@ movhi
	str	r0, [r4, #100]
	strb	r9, [r4, #132]
	str	r2, [r4, #140]
	bne	.L20151
.L20106:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L20147
	add	r9, r4, #72
	str	r8, [r4, #20]
	add	r2, r8, #36
	mov	r0, r9
	ldr	r1, [r8, #40]
	bl	__list_add
	ldr	r10, [r4, #32]
	cmp	r10, #0
	beq	.L20109
	mov	r1, r4
	mov	r0, r8
	blx	r10
	subs	r10, r0, #0
	blt	.L20152
.L20109:
	ldrb	r3, [r8, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L20110
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L20110
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r8, #45]
.L20110:
	tst	r3, #2
	bne	.L20111
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L20111
	ldrb	r2, [r8, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r8, #45]
.L20111:
	tst	r3, #1
	bne	.L20112
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L20112
	ldrb	r3, [r8, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r8, #45]
.L20112:
	cmp	r10, #0
	streq	r4, [r5, #2496]
	beq	.L20091
	movw	r3, #1410
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L20104
.L20107:
	ldr	r1, [r8, #24]
	movw	r2, #:lower16:.LC925
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC925
	ldr	r0, .L20154+4
	ldr	r1, [r1]
	stm	sp, {r4, r10}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20104
.L20093:
	bl	rndis_init.part.89
	subs	r10, r0, #0
	bge	.L20096
	b	.L20091
.L20151:
	ldr	ip, [r8]
	movw	r2, #:lower16:.LC924
	ldr	r1, [r8, #24]
	movt	r2, #:upper16:.LC924
	ldr	r0, .L20154+8
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r8, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L20106
.L20147:
	movw	r3, #1410
	mvn	r10, #21
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L20107
.L20104:
	mov	r0, r4
	mov	r4, #0
	bl	kfree
	ldrb	r3, [r5, #3740]	@ zero_extendqisi2
	str	r4, [r5, #2496]
	cmp	r3, r4
	beq	.L20091
	movw	r1, #:lower16:.LC596
	add	r0, sp, #24
	strb	r4, [r5, #3740]
	movt	r1, #:upper16:.LC596
	mov	r2, r4
	bl	sprintf
	add	r0, sp, #24
	mov	r1, r4
	bl	remove_proc_entry
.L20091:
	ldr	r2, [sp, #44]
	mov	r0, r10
	ldr	r3, [r7]
	cmp	r2, r3
	bne	.L20153
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L20116:
	mov	r4, #16
	b	.L20103
.L20150:
	mvn	r10, #11
	b	.L20104
.L20097:
	bl	bam_data_setup.part.91
	subs	r10, r0, #0
	beq	.L20099
	movw	r0, #:lower16:.LC1028
	mov	r2, r10
	ldr	r1, .L20154+12
	movt	r0, #:upper16:.LC1028
	bl	printk
	movw	r0, #:lower16:.LC1029
	ldr	r1, .L20154+16
	movt	r0, #:upper16:.LC1029
	bl	printk
	b	.L20091
.L20148:
	movw	r1, #:lower16:.LC1025
	mov	r3, #1
	ldr	r2, .L20154+20
	movt	r1, #:upper16:.LC1025
	ldr	r0, .L20154+24
	bl	__dynamic_pr_debug
	b	.L20095
.L20149:
	movw	r1, #:lower16:.LC1027
	ldr	r2, .L20154+20
	movt	r1, #:upper16:.LC1027
	ldr	r0, .L20154+28
	bl	__dynamic_pr_debug
	b	.L20099
.L20152:
	mov	r0, r9
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L20109
.L20102:
	mvn	r10, #18
	b	.L20091
.L20115:
	mvn	r10, #21
	b	.L20091
.L20153:
	bl	__stack_chk_fail
.L20155:
	.align	2
.L20154:
	.word	.LANCHOR7-936
	.word	.LANCHOR4+1392
	.word	.LANCHOR4+1368
	.word	.LANCHOR5+3000
	.word	.LANCHOR5+3020
	.word	.LANCHOR5-3460
	.word	.LANCHOR4+2376
	.word	.LANCHOR4+2400
	.fnend
	.size	rndis_qc_bind_config_vendor, .-rndis_qc_bind_config_vendor
	.align	2
	.global	gether_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_setup, %function
gether_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	ldr	r6, [r4, #3992]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	cmp	r6, #0
	bne	.L20161
	mov	r2, #1
	mov	r5, r0
	mov	r7, r1
	mov	r0, #132
	mov	r1, r2
	bl	alloc_etherdev_mqs
	subs	r8, r0, #0
	mvneq	r5, #11
	bne	.L20170
.L20156:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L20161:
	mvn	r5, #15
	b	.L20156
.L20170:
	add	r9, r8, #1152
	movw	r2, #:lower16:eth_work
	str	r6, [r8, #1152]
	add	r3, r9, #20
	movt	r2, #:upper16:eth_work
	str	r8, [r8, #1160]
	mov	r1, #65024
	movw	ip, #:lower16:process_rx_w
	str	r6, [r8, #1168]
	str	r3, [r8, #1172]
	add	lr, r9, #108
	movt	r1, 65535
	str	r3, [r8, #1176]
	add	r3, r9, #28
	movt	ip, #:upper16:process_rx_w
	add	r10, r9, #92
	str	r3, [r8, #1180]
	str	r3, [r8, #1184]
	add	r3, r9, #52
	str	r3, [r8, #1204]
	str	r3, [r8, #1208]
	movw	r3, #:lower16:.LC1429
	str	r2, [r8, #1252]
	movw	r2, #:lower16:.LC1180
	movt	r3, #:upper16:.LC1429
	str	r6, [r8, #1212]
	movt	r2, #:upper16:.LC1180
	str	r6, [r8, #1216]
	add	r6, r5, #32
	str	r1, [r8, #1240]
	str	r10, [r8, #1244]
	str	r10, [r8, #1248]
	str	r1, [r8, #1256]
	mov	r1, #16
	str	lr, [r8, #1260]
	str	lr, [r8, #1264]
	str	ip, [r8, #1268]
	bl	snprintf
	ldr	r0, [r4, #4008]
	ldr	r1, [r8, #484]
	bl	get_ether_addr
	cmp	r0, #0
	bne	.L20171
.L20158:
	ldr	r3, [r7]	@ unaligned
	add	r10, r9, #125
	movw	r0, #:lower16:.LC1183
	movt	r0, #:upper16:.LC1183
	str	r3, [r8, #1277]	@ unaligned
	ldrh	r3, [r7, #4]	@ unaligned
	strh	r3, [r10, #4]	@ unaligned
	bl	printk
	ldr	r3, .L20173
	mov	r0, r8
	ldr	r1, .L20173+4
	add	r2, r3, #136
	str	r3, [r8, #328]
	str	r6, [r8, #688]
	str	r2, [r8, #332]
	str	r1, [r8, #736]
	str	r5, [r8, #1164]
	bl	register_netdev
	subs	r5, r0, #0
	bge	.L20159
	ldr	r0, .L20173+8
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L20172
.L20160:
	mov	r0, r8
	bl	free_netdev
	b	.L20156
.L20171:
	movw	r2, #:lower16:.LC1181
	movw	r1, #:lower16:.LC1182
	movt	r2, #:upper16:.LC1181
	movt	r1, #:upper16:.LC1182
	mov	r0, r6
	bl	dev_warn
	b	.L20158
.L20172:
	movw	r2, #:lower16:.LC1184
	mov	r1, r6
	movt	r2, #:upper16:.LC1184
	mov	r3, r5
	sub	r0, r0, #24
	bl	__dynamic_dev_dbg
	b	.L20160
.L20159:
	movw	r0, #:lower16:.LC1185
	ldr	r2, [r8, #484]
	ldr	r1, [r8, #1160]
	movt	r0, #:upper16:.LC1185
	bl	printk
	movw	r0, #:lower16:.LC1186
	mov	r2, r10
	ldr	r1, [r8, #1160]
	movt	r0, #:upper16:.LC1186
	bl	printk
	mov	r0, r8
	str	r9, [r4, #3992]
	bl	netif_carrier_off
	b	.L20156
.L20174:
	.align	2
.L20173:
	.word	.LANCHOR5+652
	.word	.LANCHOR7-1688
	.word	.LANCHOR8-3744
	.fnend
	.size	gether_setup, .-gether_setup
	.align	2
	.global	gether_setup_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_setup_name, %function
gether_setup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	ldr	r8, [r4, #3992]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	cmp	r8, #0
	bne	.L20180
	mov	r7, r2
	mov	r2, #1
	mov	r5, r0
	mov	r6, r1
	mov	r0, #132
	mov	r1, r2
	bl	alloc_etherdev_mqs
	subs	r9, r0, #0
	mvneq	r5, #11
	bne	.L20189
.L20175:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L20180:
	mvn	r5, #15
	b	.L20175
.L20189:
	movw	r2, #:lower16:eth_work
	add	r10, r9, #1152
	str	r8, [r9, #1152]
	movt	r2, #:upper16:eth_work
	mov	r3, r7
	str	r9, [r9, #1160]
	add	r7, r10, #92
	mov	r1, #65024
	str	r8, [r9, #1168]
	movw	ip, #:lower16:process_rx_w
	add	lr, r10, #108
	str	r8, [r9, #1212]
	str	r2, [r9, #1252]
	add	r2, r10, #52
	movt	r1, 65535
	movt	ip, #:upper16:process_rx_w
	str	r2, [r9, #1204]
	str	r8, [r9, #1216]
	add	r8, r10, #20
	str	r7, [r9, #1244]
	str	r7, [r9, #1248]
	add	r7, r10, #28
	str	r8, [r9, #1172]
	str	r2, [r9, #1208]
	movw	r2, #:lower16:.LC1180
	str	r8, [r9, #1176]
	movt	r2, #:upper16:.LC1180
	str	r7, [r9, #1180]
	str	r7, [r9, #1184]
	add	r7, r5, #32
	str	r1, [r9, #1240]
	str	r1, [r9, #1256]
	mov	r1, #16
	str	lr, [r9, #1260]
	str	lr, [r9, #1264]
	str	ip, [r9, #1268]
	bl	snprintf
	ldr	r0, [r4, #4008]
	ldr	r1, [r9, #484]
	bl	get_ether_addr
	cmp	r0, #0
	bne	.L20190
.L20177:
	ldr	r3, [r6]	@ unaligned
	add	r8, r10, #125
	movw	r0, #:lower16:.LC1183
	movt	r0, #:upper16:.LC1183
	str	r3, [r9, #1277]	@ unaligned
	ldrh	r3, [r6, #4]	@ unaligned
	strh	r3, [r8, #4]	@ unaligned
	bl	printk
	ldr	r3, .L20192
	mov	r0, r9
	ldr	r1, .L20192+4
	add	r2, r3, #136
	str	r3, [r9, #328]
	str	r7, [r9, #688]
	str	r2, [r9, #332]
	str	r1, [r9, #736]
	str	r5, [r9, #1164]
	bl	register_netdev
	subs	r5, r0, #0
	bge	.L20178
	ldr	r0, .L20192+8
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L20191
.L20179:
	mov	r0, r9
	bl	free_netdev
	b	.L20175
.L20190:
	movw	r2, #:lower16:.LC1181
	movw	r1, #:lower16:.LC1182
	movt	r2, #:upper16:.LC1181
	movt	r1, #:upper16:.LC1182
	mov	r0, r7
	bl	dev_warn
	b	.L20177
.L20191:
	movw	r2, #:lower16:.LC1184
	mov	r1, r7
	movt	r2, #:upper16:.LC1184
	mov	r3, r5
	sub	r0, r0, #24
	bl	__dynamic_dev_dbg
	b	.L20179
.L20178:
	movw	r0, #:lower16:.LC1185
	ldr	r2, [r9, #484]
	ldr	r1, [r9, #1160]
	movt	r0, #:upper16:.LC1185
	bl	printk
	movw	r0, #:lower16:.LC1186
	mov	r2, r8
	ldr	r1, [r9, #1160]
	movt	r0, #:upper16:.LC1186
	bl	printk
	mov	r0, r9
	str	r10, [r4, #3992]
	bl	netif_carrier_off
	b	.L20175
.L20193:
	.align	2
.L20192:
	.word	.LANCHOR5+652
	.word	.LANCHOR7-1688
	.word	.LANCHOR8-3744
	.fnend
	.size	gether_setup_name, .-gether_setup_name
	.align	2
	.global	gether_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_cleanup, %function
gether_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r4, #3992]
	cmp	r3, #0
	beq	.L20194
	ldr	r0, [r3, #8]
	bl	unregister_netdev
	ldr	r0, [r4, #3992]
	add	r0, r0, #88
	bl	flush_work
	ldr	r3, [r4, #3992]
	ldr	r0, [r3, #8]
	bl	free_netdev
	mov	r3, #0
	str	r3, [r4, #3992]
.L20194:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gether_cleanup, .-gether_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_function_bind_config, %function
ecm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #4]
	.pad #36
	sub	sp, sp, #36
	cmp	r4, #0
	beq	.L20259
	movw	r6, #:lower16:.LANCHOR1
	ldr	r3, [r1, #24]
	mov	r5, r1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r9, [r6, #3992]
	ldr	r7, [r3]
	cmp	r9, #0
	bne	.L20221
	mov	r2, #1
	mov	r0, #132
	mov	r1, r2
	bl	alloc_etherdev_mqs
	subs	r8, r0, #0
	mvneq	r7, #11
	bne	.L20260
.L20203:
	ldr	r2, .L20266
	movw	r0, #:lower16:.LC1187
	movt	r0, #:upper16:.LC1187
	mov	r1, r2
	bl	printk
.L20200:
	mov	r0, r7
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L20221:
	mvn	r7, #15
	b	.L20203
.L20260:
	add	r10, r8, #1152
	movw	r2, #:lower16:eth_work
	str	r9, [r8, #1152]
	add	r3, r10, #20
	movt	r2, #:upper16:eth_work
	str	r8, [r8, #1160]
	mov	r1, #65024
	movw	ip, #:lower16:process_rx_w
	str	r9, [r8, #1168]
	str	r3, [r8, #1172]
	add	lr, r10, #108
	movt	r1, 65535
	str	r3, [r8, #1176]
	add	r3, r10, #28
	movt	ip, #:upper16:process_rx_w
	add	fp, r10, #92
	str	r3, [r8, #1180]
	str	r3, [r8, #1184]
	add	r3, r10, #52
	str	r3, [r8, #1204]
	str	r3, [r8, #1208]
	movw	r3, #:lower16:.LC1431
	str	r2, [r8, #1252]
	movw	r2, #:lower16:.LC1180
	movt	r3, #:upper16:.LC1431
	str	r9, [r8, #1212]
	movt	r2, #:upper16:.LC1180
	str	r9, [r8, #1216]
	str	r1, [r8, #1240]
	str	fp, [r8, #1244]
	str	fp, [r8, #1248]
	add	fp, r7, #32
	str	r1, [r8, #1256]
	mov	r1, #16
	str	lr, [r8, #1260]
	str	lr, [r8, #1264]
	str	ip, [r8, #1268]
	bl	snprintf
	ldr	r0, [r6, #4008]
	ldr	r1, [r8, #484]
	bl	get_ether_addr
	cmp	r0, #0
	bne	.L20261
.L20204:
	ldr	r3, [r4]	@ unaligned
	add	r2, r10, #125
	movw	r0, #:lower16:.LC1183
	movt	r0, #:upper16:.LC1183
	movw	r9, #:lower16:.LANCHOR7
	str	r2, [sp, #28]
	movt	r9, #:upper16:.LANCHOR7
	str	r3, [r8, #1277]	@ unaligned
	ldrh	r3, [r4, #4]	@ unaligned
	strh	r3, [r10, #129]	@ unaligned
	bl	printk
	ldr	r2, .L20266+4
	sub	r3, r9, #1680
	mov	r0, r8
	sub	r3, r3, #8
	str	r3, [r8, #736]
	add	r3, r2, #136
	str	r2, [r8, #328]
	str	r3, [r8, #332]
	str	fp, [r8, #688]
	str	r7, [r8, #1164]
	bl	register_netdev
	subs	r7, r0, #0
	bge	.L20205
	ldr	r0, .L20266+8
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L20262
.L20206:
	mov	r0, r8
	bl	free_netdev
	b	.L20203
.L20259:
	ldr	r2, .L20266
	movw	r0, #:lower16:.LC1430
	mvn	r7, #21
	movt	r0, #:upper16:.LC1430
	mov	r1, r2
	bl	printk
	b	.L20200
.L20261:
	movw	r2, #:lower16:.LC1181
	movw	r1, #:lower16:.LC1182
	movt	r2, #:upper16:.LC1181
	movt	r1, #:upper16:.LC1182
	mov	r0, fp
	bl	dev_warn
	b	.L20204
.L20262:
	movw	r2, #:lower16:.LC1184
	mov	r1, fp
	movt	r2, #:upper16:.LC1184
	mov	r3, r7
	sub	r0, r0, #24
	bl	__dynamic_dev_dbg
	b	.L20206
.L20205:
	movw	r0, #:lower16:.LC1185
	ldr	r2, [r8, #484]
	ldr	r1, [r8, #1160]
	movt	r0, #:upper16:.LC1185
	bl	printk
	movw	r0, #:lower16:.LC1186
	ldr	r1, [r8, #1160]
	ldr	r2, [sp, #28]
	movt	r0, #:upper16:.LC1186
	bl	printk
	mov	r0, r8
	str	r10, [r6, #3992]
	bl	netif_carrier_off
	cmp	r7, #0
	bne	.L20203
	ldr	r6, [r5, #24]
	movw	r0, #:lower16:.LC472
	movt	r0, #:upper16:.LC472
	ldr	r3, [r6]
	ldr	r8, [r3, #28]
	mov	r1, r8
	bl	strcmp
	cmp	r0, #0
	beq	.L20224
	movw	r0, #:lower16:.LC475
	mov	r1, r8
	movt	r0, #:upper16:.LC475
	bl	strcmp
	cmp	r0, #0
	beq	.L20224
	movw	r8, #:lower16:.LANCHOR0
	movt	r8, #:upper16:.LANCHOR0
	ldrb	r3, [r8, #1496]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L20209
	ldrb	r3, [r6, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L20211
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r6, #48]
	ldr	r2, [r5, #24]
	strb	r3, [r8, #1496]
	strb	r3, [r8, #3732]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L20211
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r5, #24]
	strb	r3, [r8, #1512]
	strb	r3, [r8, #3764]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L20211
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r5, #24]
	strb	r3, [r8, #1504]
	strb	r3, [r9, #-989]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L20211
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	strb	r3, [r8, #1520]
	strb	r3, [r8, #3723]
.L20209:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L20225
	mov	r2, #176
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L20263
.L20212:
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	add	r9, r6, #150
	movw	r2, #:lower16:.LC1402
	ldrb	r3, [r4]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC1402
	mov	r1, #14
	mov	r0, r9
	movw	r10, #:lower16:.LANCHOR4
	movt	r10, #:upper16:.LANCHOR4
	str	ip, [sp, #16]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #12]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	snprintf
	ldr	ip, .L20266+12
	movw	r3, #:lower16:.LC1403
	movw	r0, #:lower16:ecm_bind
	movw	r2, #:lower16:ecm_unbind
	movt	r3, #:upper16:.LC1403
	str	r9, [r8, #1508]
	movw	r1, #:lower16:ecm_set_alt
	movt	r0, #:upper16:ecm_bind
	movt	r2, #:upper16:ecm_unbind
	movt	r1, #:upper16:ecm_set_alt
	stm	r6, {r3, ip}
	movw	ip, #1386
	str	r0, [r6, #32]
	movw	r0, #:lower16:ecm_get_alt
	str	r2, [r6, #36]
	movt	r0, #:upper16:ecm_get_alt
	movw	r2, #:lower16:ecm_setup
	str	r1, [r6, #40]
	ldrh	ip, [r10, ip]
	movw	r1, #:lower16:ecm_disable
	movt	r1, #:upper16:ecm_disable
	movt	r2, #:upper16:ecm_setup
	strd	r0, [r6, #44]
	mov	r0, #15
	tst	ip, #4
	str	r2, [r6, #52]
	strh	r0, [r6, #98]	@ movhi
	bne	.L20264
.L20213:
	ldr	r3, [r6, #48]
	cmp	r3, #0
	beq	.L20216
	add	r4, r6, #72
	str	r5, [r6, #20]
	add	r2, r5, #36
	mov	r0, r4
	ldr	r1, [r5, #40]
	bl	__list_add
	ldr	r3, [r6, #32]
	cmp	r3, #0
	beq	.L20217
	mov	r1, r6
	mov	r0, r5
	blx	r3
	subs	r7, r0, #0
	blt	.L20265
.L20217:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L20218
	ldr	r2, [r6, #16]
	cmp	r2, #0
	beq	.L20218
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L20218:
	tst	r3, #2
	bne	.L20219
	ldr	r2, [r6, #8]
	cmp	r2, #0
	beq	.L20219
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L20219:
	tst	r3, #1
	bne	.L20220
	ldr	r3, [r6, #12]
	cmp	r3, #0
	beq	.L20220
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L20220:
	cmp	r7, #0
	beq	.L20200
	movw	r3, #1410
	ldrh	r3, [r10, r3]
	tst	r3, #4
	bne	.L20214
.L20215:
	mov	r3, #0
	mov	r0, r6
	str	r3, [r8, #1508]
	bl	kfree
.L20208:
	ldr	r2, .L20266
	movw	r0, #:lower16:.LC1432
	movt	r0, #:upper16:.LC1432
	mov	r1, r2
	bl	printk
	bl	gether_cleanup
	b	.L20200
.L20264:
	ldr	ip, [r5]
	movw	r2, #:lower16:.LC924
	ldr	r1, [r5, #24]
	movt	r2, #:upper16:.LC924
	ldr	r0, .L20266+16
	ldr	r1, [r1]
	stm	sp, {r6, ip}
	str	r5, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r6, #40]
	cmp	r3, #0
	bne	.L20213
.L20216:
	movw	r3, #1410
	mvn	r7, #21
	ldrh	r3, [r10, r3]
	tst	r3, #4
	beq	.L20215
.L20214:
	ldr	r1, [r5, #24]
	movw	r2, #:lower16:.LC925
	ldr	r3, [r6]
	movt	r2, #:upper16:.LC925
	ldr	r0, .L20266+20
	ldr	r1, [r1]
	strd	r6, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20215
.L20225:
	mov	r6, #16
	b	.L20212
.L20265:
	mov	r0, r4
	bl	list_del
	mov	r3, #0
	str	r3, [r6, #20]
	b	.L20217
.L20224:
	mvn	r7, #21
	b	.L20208
.L20211:
	mvn	r7, #18
	b	.L20208
.L20263:
	mvn	r7, #11
	b	.L20208
.L20267:
	.align	2
.L20266:
	.word	.LANCHOR5+3048
	.word	.LANCHOR5+652
	.word	.LANCHOR8-3744
	.word	.LANCHOR7-976
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.fnend
	.size	ecm_function_bind_config, .-ecm_function_bind_config
	.align	2
	.global	gether_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_connect, %function
gether_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r3, #3992]
	cmp	r6, #0
	mvneq	r0, #21
	beq	.L20268
	movw	r3, #:lower16:kmalloc_caches
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4, #144]
	beq	.L20271
	mov	r2, #44
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #144]
	beq	.L20297
.L20271:
	ldr	r3, [r4, #88]
	str	r6, [r3]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L20273
	ldr	r3, [r4, #92]
	str	r6, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L20298
.L20274:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	cmp	r5, #0
	blt	.L20273
.L20296:
	ldr	r0, [r6, #8]
.L20268:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L20273:
	ldr	r0, [r4, #144]
	bl	kfree
.L20272:
	mov	r0, r5
	b	.L20268
.L20298:
	ldr	r3, [r6, #12]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bls	.L20284
	ldr	r3, [r3, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L20284
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r8, [r3, #500]
	lsl	r8, r8, #1
	b	.L20275
.L20284:
	mov	r8, #2
.L20275:
	add	r7, r6, #16
	mov	r0, r7
	bl	_raw_spin_lock
	mov	r2, r8
	add	r0, r6, #20
	ldr	r1, [r4, #88]
	bl	prealloc
	subs	r5, r0, #0
	blt	.L20276
	mov	r2, r8
	ldr	r1, [r4, #92]
	add	r0, r6, #28
	bl	prealloc
	mov	r5, r0
	mov	r0, r7
	bl	_raw_spin_unlock
	cmp	r5, #0
	beq	.L20299
.L20277:
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L20274
.L20276:
	mov	r0, r7
	bl	_raw_spin_unlock
	b	.L20277
.L20297:
	movw	r0, #:lower16:.LC1433
	ldr	r1, .L20300
	mvn	r5, #11
	movt	r0, #:upper16:.LC1433
	bl	printk
	b	.L20272
.L20299:
	ldrb	r3, [r4, #96]	@ zero_extendqisi2
	mov	r0, r6
	strb	r3, [r6, #124]
	ldr	r3, [r4, #100]
	str	r3, [r6, #68]
	ldr	r3, [r4, #132]
	str	r3, [r6, #84]
	ldr	r3, [r4, #128]
	str	r3, [r6, #80]
	ldr	r3, [r4, #116]
	str	r3, [r6, #72]
	ldr	r3, [r4, #120]
	str	r3, [r6, #76]
	bl	_raw_spin_lock
	str	r4, [r6, #4]
	str	r5, [r6, #40]
	str	r5, [r6, #44]
	str	r5, [r6, #48]
	str	r6, [r4, #84]
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #164]
	tst	r3, #1
	beq	.L20278
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L20279
.L20295:
	mov	r0, r4
	blx	r3
.L20279:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r6, #8]
	bl	netif_carrier_on
	ldr	r0, [r6, #8]
	ldr	r3, [r0, #164]
	tst	r3, #1
	beq	.L20268
	mov	r1, #32
	mov	r0, r6
	bl	rx_fill
	ldr	r2, [r6, #8]
	mov	r3, #0
	mov	r0, r3
	str	r3, [r6, #36]
	ldr	r4, [r2, #576]
	add	r1, r4, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L20296
	ldr	r0, [r4, #4]
	bl	__netif_schedule
	ldr	r0, [r6, #8]
	b	.L20268
.L20278:
	ldr	r3, [r4, #140]
	cmp	r3, #0
	bne	.L20295
	b	.L20279
.L20301:
	.align	2
.L20300:
	.word	.LANCHOR5+3076
	.fnend
	.size	gether_connect, .-gether_connect
	.align	2
	.global	gether_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_disconnect, %function
gether_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #84]
	cmp	r4, #0
	beq	.L20302
	ldr	r3, [r4, #8]
	mov	r6, r0
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L20323
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
.L20313:
	ldr	r0, [r4, #8]
	add	r7, r4, #16
	add	r9, r4, #20
	bl	netif_carrier_off
	ldr	r0, [r6, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r5, [r4, #20]
	cmp	r9, r5
	beq	.L20306
	mov	r10, #0
	b	.L20305
.L20307:
	ldr	r0, [r6, #88]
.L20321:
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r5, [r4, #20]
	cmp	r5, r9
	beq	.L20306
.L20305:
	mov	r0, r5
	sub	r8, r5, #36
	bl	list_del
	mov	r0, r7
	bl	_raw_spin_unlock
	ldrb	r3, [r6, #124]	@ zero_extendqisi2
	mov	r1, r8
	cmp	r3, #0
	beq	.L20307
	ldr	r0, [r5, #-36]
	bl	kfree
	str	r10, [r5, #-36]
	mov	r1, r8
	ldr	r0, [r6, #88]
	b	.L20321
.L20306:
	mov	r5, #0
	ldr	r0, [r6, #144]
	add	r8, r4, #28
	bl	kfree
	mov	r0, r7
	str	r5, [r6, #144]
	bl	_raw_spin_unlock
	ldr	r3, [r6, #88]
	str	r5, [r3]
	ldr	r3, [r6, #88]
	str	r5, [r3, #28]
	ldr	r0, [r6, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L20322
.L20324:
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r0, [r6, #92]
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L20322:
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r5, [r4, #28]
	cmp	r5, r8
	bne	.L20324
	mov	r0, r7
	add	r7, r4, #64
	bl	_raw_spin_unlock
	mov	r0, r7
	add	r5, r4, #52
	bl	_raw_spin_lock
	ldr	r3, [r4, #52]
	cmp	r3, r5
	beq	.L20311
	mov	r8, #0
	b	.L20312
.L20325:
	ldr	r2, [r4, #60]
	sub	r2, r2, #1
	str	r2, [r4, #60]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #52]
	cmp	r3, r5
	beq	.L20311
.L20312:
	subs	r0, r3, #0
	bne	.L20325
.L20311:
	mov	r0, r7
	mov	r5, #0
	bl	_raw_spin_unlock
	ldr	r3, [r6, #92]
	mov	r0, r4
	str	r5, [r3]
	ldr	r3, [r6, #92]
	str	r5, [r3, #28]
	str	r5, [r4, #68]
	str	r5, [r4, #80]
	str	r5, [r4, #84]
	bl	_raw_spin_lock
	str	r5, [r4, #4]
	mov	r0, r4
	str	r5, [r6, #84]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock
.L20323:
	movw	r0, #:lower16:.LC109
	movw	r1, #1847
	movt	r0, #:upper16:.LC109
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC110
	movt	r0, #:upper16:.LC110
	bl	printk
	b	.L20313
.L20302:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	gether_disconnect, .-gether_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_disable, %function
rndis_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #168]
	ldr	r3, [r3]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	ldr	r0, .L20360
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20356
.L20328:
	ldr	r3, [r7, #164]
	cmp	r3, #0
	ble	.L20329
.L20334:
	mov	r0, r7
	bl	gether_disconnect
	ldr	r0, [r7, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r7, #168]
	mov	r2, #0
	str	r2, [r3]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L20329:
	rsb	r3, r3, r3, lsl #4
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	lsl	r3, r3, #2
	mov	r1, #0
	add	r2, r6, r3
	ldr	r3, [r2, #3732]
	add	r6, r2, #3728
	mov	r9, r2
	str	r1, [r2, #3684]
	add	r6, r6, #4
	ldr	r4, [r3]
.L20330:
	cmp	r6, r3
	beq	.L20334
	ldr	r2, [r3, #16]
	cmp	r2, #0
	bne	.L20336
	b	.L20357
.L20342:
	mov	r4, r3
.L20336:
	cmp	r4, r6
	ldr	r3, [r4]
	beq	.L20334
	ldr	r2, [r4, #16]
	cmp	r2, #0
	bne	.L20342
.L20335:
	ldr	r8, [r4, #8]
	mov	r3, #1
	str	r3, [r4, #16]
	cmp	r8, #0
	beq	.L20334
	ldr	r5, [r9, #3732]
	cmp	r5, r6
	ldr	r4, [r5]
	bne	.L20333
	b	.L20358
.L20340:
	mov	r4, r3
.L20333:
	cmp	r5, #0
	beq	.L20332
	ldr	r3, [r5, #8]
	cmp	r8, r3
	beq	.L20359
.L20332:
	cmp	r4, r6
	mov	r5, r4
	ldr	r3, [r4]
	bne	.L20340
	ldr	r3, [r9, #3732]
	ldr	r4, [r3]
	b	.L20330
.L20359:
	mov	r0, r5
	bl	list_del
	mov	r0, r5
	bl	kfree
	b	.L20332
.L20358:
	mov	r3, r6
	b	.L20330
.L20357:
	mov	r4, r3
	b	.L20335
.L20356:
	ldr	r3, [r7, #20]
	movw	r2, #:lower16:.LC1434
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1434
	ldr	r3, [r3, #24]
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20328
.L20361:
	.align	2
.L20360:
	.word	.LANCHOR8-868
	.fnend
	.size	rndis_disable, .-rndis_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_alt, %function
rndis_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r5, [r3, #24]
	beq	.L20430
	ldrb	r3, [r0, #149]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L20393
	ldr	r2, [r0, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L20369
	ldr	r0, .L20440
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20431
.L20370:
	mov	r0, r4
	bl	gether_disconnect
	ldr	r2, [r4, #88]
.L20369:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L20371
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L20371
.L20372:
	ldr	r0, .L20440+4
	mov	r3, #0
	strb	r3, [r4, #96]
	strh	r3, [r4, #98]	@ movhi
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20432
.L20376:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r7, [r5, #3992]
	cmp	r7, #0
	beq	.L20393
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4, #144]
	beq	.L20379
	mov	r2, #44
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #144]
	beq	.L20433
.L20379:
	ldr	r3, [r4, #88]
	str	r7, [r3]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L20381
	ldr	r3, [r4, #92]
	str	r7, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	beq	.L20434
.L20382:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	cmp	r6, #0
	blt	.L20381
.L20429:
	ldr	r6, [r7, #8]
.L20380:
.L20390:
	cmn	r6, #4096
	movhi	r0, r6
	bhi	.L20362
	ldr	r0, .L20440+8
	add	r7, r4, #98
	ldrb	r4, [r4, #164]	@ zero_extendqisi2
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L20435
.L20392:
	clz	r3, r6
	cmp	r4, #0
	lsr	r3, r3, #5
	movne	r3, #1
	cmp	r3, #0
	bne	.L20396
	mov	r0, r3
	str	r3, [r5, #3628]
	str	r3, [r5, #3632]
	str	r7, [r5, #3704]
	str	r6, [r5, #3708]
.L20362:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L20371:
	ldr	r3, .L20440+12
	ldr	r0, [r5]
	ldrh	r1, [r3, #-2]
	tst	r1, #4
	bne	.L20436
.L20373:
	mov	r1, r4
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L20375
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L20372
.L20375:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L20362
.L20430:
	ldr	r0, [r0, #168]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L20364
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #168]
.L20364:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L20437
.L20365:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #168]
	mov	r0, #0
	str	r4, [r3]
	b	.L20362
.L20393:
	mvn	r0, #21
	b	.L20362
.L20381:
	ldr	r0, [r4, #144]
	bl	kfree
	b	.L20390
.L20432:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1437
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1437
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20376
.L20434:
	ldr	r3, [r7, #12]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bhi	.L20438
.L20395:
	mov	r9, #2
.L20383:
	add	r8, r7, #16
	mov	r0, r8
	bl	_raw_spin_lock
	mov	r2, r9
	add	r0, r7, #20
	ldr	r1, [r4, #88]
	bl	prealloc
	subs	r6, r0, #0
	blt	.L20384
	mov	r2, r9
	ldr	r1, [r4, #92]
	add	r0, r7, #28
	bl	prealloc
	mov	r6, r0
	mov	r0, r8
	bl	_raw_spin_unlock
	cmp	r6, #0
	beq	.L20439
.L20385:
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L20382
.L20435:
	movw	r1, #:lower16:.LC267
	ldr	r2, .L20440+16
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC267
	bl	__dynamic_pr_debug
	b	.L20392
.L20438:
	ldr	r3, [r3, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L20395
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r9, [r3, #500]
	lsl	r9, r9, #1
	b	.L20383
.L20431:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1435
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1435
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20370
.L20436:
	movw	r2, #:lower16:.LC1436
	add	r1, r0, #32
	movt	r2, #:upper16:.LC1436
	sub	r0, r3, #20
	bl	__dynamic_dev_dbg
	ldr	r2, [r4, #88]
	ldr	r0, [r5]
	b	.L20373
.L20384:
	mov	r0, r8
	bl	_raw_spin_unlock
	b	.L20385
.L20396:
	mov	r0, #0
	b	.L20362
.L20437:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L20393
	ldr	r0, [r4, #168]
	ldr	r1, [r0, #28]
	b	.L20365
.L20439:
	ldrb	r3, [r4, #96]	@ zero_extendqisi2
	mov	r0, r7
	strb	r3, [r7, #124]
	ldr	r3, [r4, #100]
	str	r3, [r7, #68]
	ldr	r3, [r4, #132]
	str	r3, [r7, #84]
	ldr	r3, [r4, #128]
	str	r3, [r7, #80]
	ldr	r3, [r4, #116]
	str	r3, [r7, #72]
	ldr	r3, [r4, #120]
	str	r3, [r7, #76]
	bl	_raw_spin_lock
	str	r4, [r7, #4]
	str	r6, [r7, #40]
	str	r6, [r7, #44]
	str	r6, [r7, #48]
	str	r7, [r4, #84]
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #164]
	tst	r3, #1
	beq	.L20386
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L20387
.L20428:
	mov	r0, r4
	blx	r3
.L20387:
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r0, [r7, #8]
	bl	netif_carrier_on
	ldr	r6, [r7, #8]
	ldr	r3, [r6, #164]
	tst	r3, #1
	beq	.L20390
	mov	r1, #32
	mov	r0, r7
	bl	rx_fill
	ldr	r2, [r7, #8]
	mov	r3, #0
	mov	r0, r3
	str	r3, [r7, #36]
	ldr	r6, [r2, #576]
	add	r1, r6, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L20429
	ldr	r0, [r6, #4]
	bl	__netif_schedule
	b	.L20429
.L20386:
	ldr	r3, [r4, #140]
	cmp	r3, #0
	bne	.L20428
	b	.L20387
.L20433:
	movw	r0, #:lower16:.LC1433
	ldr	r1, .L20440+20
	mvn	r6, #11
	movt	r0, #:upper16:.LC1433
	bl	printk
	b	.L20390
.L20441:
	.align	2
.L20440:
	.word	.LANCHOR8-844
	.word	.LANCHOR8-796
	.word	.LANCHOR8-1104
	.word	.LANCHOR8-820
	.word	.LANCHOR5+2804
	.word	.LANCHOR5+3076
	.fnend
	.size	rndis_set_alt, .-rndis_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_disable, %function
ecm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L20457
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L20456
.L20443:
	ldr	r3, [r4, #88]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L20444
	mov	r0, r4
	bl	gether_disconnect
.L20444:
	ldr	r0, [r4, #164]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L20442
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #164]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #164]
	str	r3, [r2, #28]
.L20442:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L20456:
	ldr	r1, [r4, #20]
	sub	r0, r3, #20
	movw	r2, #:lower16:.LC1438
	movt	r2, #:upper16:.LC1438
	ldr	r3, [r1, #24]
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20443
.L20458:
	.align	2
.L20457:
	.word	.LANCHOR8-772
	.fnend
	.size	ecm_disable, .-ecm_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_set_alt, %function
ecm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	mov	r5, r2
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r0, [r0, #148]	@ zero_extendqisi2
	ldr	r3, [r4, #20]
	cmp	r0, r1
	ldr	r6, [r3, #24]
	beq	.L20505
	ldrb	r3, [r4, #149]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r3, r1
	bne	.L20465
	ldr	r2, [r4, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L20466
	ldr	r0, .L20512
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20506
.L20467:
	mov	r0, r4
	bl	gether_disconnect
	ldr	r2, [r4, #88]
.L20466:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L20468
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L20468
.L20469:
	cmp	r5, #1
	bne	.L20473
	ldr	r3, [r6]
	movw	r0, #:lower16:.LC479
	movt	r0, #:upper16:.LC479
	ldr	r1, [r3, #28]
	bl	strcmp
	ldr	r3, .L20512+4
	mov	r2, #15
	adds	r0, r0, #0
	movne	r0, #1
	strh	r2, [r4, #98]	@ movhi
	ldrh	r2, [r3, #-2]
	strb	r0, [r4, #96]
	tst	r2, #4
	bne	.L20507
.L20474:
	mov	r0, r4
	bl	gether_connect
	cmn	r0, #4096
	bhi	.L20459
.L20473:
	ldr	r7, [r4, #168]
	mov	r3, #1
	strb	r3, [r4, #172]
	cmp	r7, #0
	beq	.L20478
	ldr	r2, [r4, #20]
	mov	r3, #0
	mov	r1, #8
	ldr	r6, [r7]
	movw	r8, #:lower16:.LANCHOR2
	movt	r8, #:upper16:.LANCHOR2
	ldr	r9, [r2, #24]
	movw	r2, #378
	strb	r3, [r6, #1]
	ldrb	r0, [r4, #173]	@ zero_extendqisi2
	strh	r0, [r6, #2]	@ unaligned
	strb	r3, [r6, #6]
	strb	r3, [r6, #7]
	str	r1, [r7, #4]
	ldrh	r3, [r8, r2]
	tst	r3, #4
	bne	.L20508
.L20476:
	mov	r1, #2
	mvn	r3, #94
	mov	r5, #0
	mov	r2, #32
	strb	r1, [r4, #172]
	mov	r1, r7
	strb	r3, [r6]
	ldrb	r3, [r4, #148]	@ zero_extendqisi2
	strh	r3, [r6, #4]	@ unaligned
	ldr	r0, [r4, #164]
	str	r5, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L20509
.L20478:
	mov	r0, #0
.L20459:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L20468:
	ldr	r3, .L20512+8
	ldr	r0, [r6]
	ldrh	r1, [r3, #-2]
	tst	r1, #4
	bne	.L20510
.L20470:
	mov	r1, r4
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L20472
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L20469
.L20472:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L20459
.L20505:
	cmp	r2, #0
	bne	.L20465
	ldr	r0, [r4, #164]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L20463
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #164]
.L20463:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L20511
.L20464:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #164]
	mov	r0, #0
	str	r4, [r3]
	b	.L20459
.L20509:
	movw	r3, #426
	str	r7, [r4, #168]
	ldrh	r3, [r8, r3]
	tst	r3, #4
	beq	.L20478
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC25
	mov	r3, r0
	movt	r2, #:upper16:.LC25
	ldr	r0, .L20512+12
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	mov	r0, r5
	b	.L20459
.L20465:
	mvn	r0, #21
	b	.L20459
.L20506:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC1439
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1439
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20467
.L20510:
	movw	r2, #:lower16:.LC1440
	add	r1, r0, #32
	movt	r2, #:upper16:.LC1440
	sub	r0, r3, #20
	bl	__dynamic_dev_dbg
	ldr	r2, [r4, #88]
	ldr	r0, [r6]
	b	.L20470
.L20507:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC1441
	sub	r0, r3, #20
	movt	r2, #:upper16:.LC1441
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20474
.L20511:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L20465
	ldr	r0, [r4, #164]
	ldr	r1, [r0, #28]
	b	.L20464
.L20508:
	ldrb	lr, [r4, #173]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC20
	movw	r3, #:lower16:.LC21
	ldr	r1, [r9]
	movt	ip, #:upper16:.LC20
	movw	r2, #:lower16:.LC23
	movt	r3, #:upper16:.LC21
	add	r0, r8, #360
	movt	r2, #:upper16:.LC23
	cmp	lr, #0
	movne	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20476
.L20513:
	.align	2
.L20512:
	.word	.LANCHOR8-748
	.word	.LANCHOR8-700
	.word	.LANCHOR8-724
	.word	.LANCHOR2+408
	.fnend
	.size	ecm_set_alt, .-ecm_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_disable, %function
ncm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L20529
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L20528
.L20515:
	ldr	r3, [r4, #88]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L20516
	mov	r0, r4
	bl	gether_disconnect
.L20516:
	ldr	r0, [r4, #164]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L20514
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #164]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #164]
	str	r3, [r2, #28]
.L20514:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L20528:
	ldr	r1, [r4, #20]
	sub	r0, r3, #20
	movw	r2, #:lower16:.LC1442
	movt	r2, #:upper16:.LC1442
	ldr	r3, [r1, #24]
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20515
.L20530:
	.align	2
.L20529:
	.word	.LANCHOR8-676
	.fnend
	.size	ncm_disable, .-ncm_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_set_alt, %function
ncm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r1, [r0, #148]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	r1, r5
	ldr	r6, [r3, #24]
	beq	.L20571
	ldrb	r3, [r0, #149]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r3, r5
	bne	.L20539
	cmp	r2, #0
	beq	.L20548
	ldr	r2, [r0, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	bne	.L20572
.L20540:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L20542
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L20542
.L20543:
	ldr	r3, [r6]
	movw	r0, #:lower16:.LC479
	movt	r0, #:upper16:.LC479
	ldr	r1, [r3, #28]
	bl	strcmp
	adds	r2, r0, #0
	mov	r3, #15
	movne	r2, #1
	mov	r0, r4
	strb	r2, [r4, #96]
	strh	r3, [r4, #98]	@ movhi
	bl	gether_connect
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L20548
	ldrh	r3, [r4, #182]
	str	r2, [r4, #184]
	movw	r0, #:lower16:.LC1448
	movt	r0, #:upper16:.LC1448
	sub	r3, r3, #14
	str	r3, [r2, #356]
	ldr	r3, [r4, #184]
	ldr	r1, [r3, #356]
	bl	printk
	mov	r0, #0
	b	.L20531
.L20548:
	mov	r0, r2
.L20531:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L20571:
	cmp	r2, #0
	bne	.L20539
	ldr	r0, [r0, #164]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L20535
	ldr	r3, .L20578
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L20573
.L20536:
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #164]
.L20535:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L20574
.L20537:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #164]
	mov	r0, #0
	str	r4, [r3]
	b	.L20531
.L20542:
	ldr	r3, .L20578+4
	ldr	r0, [r6]
	ldrh	r1, [r3, #-2]
	tst	r1, #4
	bne	.L20575
.L20544:
	mov	r1, r4
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L20546
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L20543
.L20546:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L20531
.L20539:
	mvn	r0, #21
	b	.L20531
.L20574:
	ldr	ip, .L20578+8
	ldr	r1, [r6]
	ldrh	r3, [ip, #-2]
	tst	r3, #4
	bne	.L20576
.L20538:
	mov	r2, r0
	mov	r0, r1
	mov	r1, r4
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L20539
	ldr	r0, [r4, #164]
	ldr	r1, [r0, #28]
	b	.L20537
.L20573:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC1443
	sub	r0, r3, #20
	movt	r2, #:upper16:.LC1443
	mov	r3, r5
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r0, [r4, #164]
	b	.L20536
.L20575:
	movw	r2, #:lower16:.LC1447
	add	r1, r0, #32
	movt	r2, #:upper16:.LC1447
	sub	r0, r3, #20
	bl	__dynamic_dev_dbg
	ldr	r2, [r4, #88]
	ldr	r0, [r6]
	b	.L20544
.L20576:
	movw	r2, #:lower16:.LC1444
	add	r1, r1, #32
	mov	r3, r5
	sub	r0, ip, #20
	movt	r2, #:upper16:.LC1444
	bl	__dynamic_dev_dbg
	ldr	r0, [r4, #164]
	ldr	r1, [r6]
	b	.L20538
.L20572:
	ldr	r0, .L20578+12
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20577
.L20541:
	movw	r0, #:lower16:.LC1446
	ldr	r1, .L20578+16
	movt	r0, #:upper16:.LC1446
	bl	printk
	mov	r0, r4
	bl	gether_disconnect
	movw	r3, #:lower16:.LANCHOR0
	mov	r1, #0
	ldr	r2, [r4, #88]
	movt	r3, #:upper16:.LANCHOR0
	mov	ip, #15
	add	r0, r3, #48
	strh	ip, [r4, #98]	@ movhi
	mov	ip, #16384
	str	r1, [r4, #100]
	str	r0, [r4, #176]
	movw	r0, #9014
	strb	r1, [r4, #180]
	ldr	r3, [r3, #36]
	str	r3, [r4, #108]
	str	ip, [r4, #112]
	strh	r0, [r4, #182]	@ movhi
	str	r1, [r4, #184]
	b	.L20540
.L20577:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC1445
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1445
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20541
.L20579:
	.align	2
.L20578:
	.word	.LANCHOR8-652
	.word	.LANCHOR8-580
	.word	.LANCHOR8-628
	.word	.LANCHOR8-604
	.word	.LANCHOR5+3092
	.fnend
	.size	ncm_set_alt, .-ncm_set_alt
	.align	2
	.global	gether_qc_get_macs
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_get_macs, %function
gether_qc_get_macs:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r10, [sp, #24]
	movw	r10, #:lower16:.LANCHOR1
	movt	r10, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	mov	r8, r0
	ldr	r4, [r10, #4068]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	cmp	r4, #0
	subne	r5, r0, #1
	addne	r9, r0, #5
	bne	.L20584
	b	.L20588
.L20606:
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	mov	fp, r0
	ldrb	r0, [r4, #2]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, fp, lsl #4
	strb	r0, [r5, #1]!
	cmp	r9, r5
	beq	.L20587
.L20586:
	mov	r4, r6
.L20584:
	ldrb	r3, [r4]	@ zero_extendqisi2
	add	r6, r4, #3
	cmp	r3, #58
	cmpne	r3, #46
	mov	r0, r3
	beq	.L20606
	bl	hex_to_bin
	mov	r6, r0
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, r6, lsl #4
	add	r6, r4, #2
	strb	r0, [r5, #1]!
	cmp	r9, r5
	bne	.L20586
.L20587:
	ldrb	r3, [r8]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L20607
.L20588:
	mov	r0, r8
	mov	r1, #6
	bl	get_random_bytes
	ldrb	r3, [r8]	@ zero_extendqisi2
	ldr	r0, .L20612
	bic	r3, r3, #1
	orr	r3, r3, #2
	strb	r3, [r8]
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20608
.L20589:
	ldr	r4, [r10, #4072]
	cmp	r4, #0
	subne	r5, r7, #1
	addne	r8, r7, #5
	bne	.L20593
	b	.L20597
.L20609:
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	mov	r9, r0
	ldrb	r0, [r4, #2]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, r9, lsl #4
	strb	r0, [r5, #1]!
	cmp	r5, r8
	beq	.L20596
.L20595:
	mov	r4, r6
.L20593:
	ldrb	r3, [r4]	@ zero_extendqisi2
	add	r6, r4, #3
	cmp	r3, #58
	cmpne	r3, #46
	mov	r0, r3
	beq	.L20609
	bl	hex_to_bin
	mov	r6, r0
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, r6, lsl #4
	add	r6, r4, #2
	strb	r0, [r5, #1]!
	cmp	r8, r5
	bne	.L20595
.L20596:
	ldrb	r3, [r7]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L20610
.L20597:
	mov	r0, r7
	mov	r1, #6
	bl	get_random_bytes
	ldrb	r3, [r7]	@ zero_extendqisi2
	ldr	r0, .L20612+4
	bic	r3, r3, #1
	orr	r3, r3, #2
	strb	r3, [r7]
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20611
.L20580:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L20607:
	ldrb	r1, [r8, #1]	@ zero_extendqisi2
	ldrb	r2, [r8, #2]	@ zero_extendqisi2
	ldrb	r0, [r8, #3]	@ zero_extendqisi2
	orr	r3, r3, r1
	ldrb	r1, [r8, #4]	@ zero_extendqisi2
	orr	r3, r3, r2
	ldrb	r2, [r8, #5]	@ zero_extendqisi2
	orr	r3, r3, r0
	orr	r3, r3, r1
	orrs	r3, r3, r2
	beq	.L20588
	b	.L20589
.L20610:
	ldrb	r2, [r7, #1]	@ zero_extendqisi2
	ldrb	ip, [r7, #2]	@ zero_extendqisi2
	ldrb	r0, [r7, #3]	@ zero_extendqisi2
	ldrb	r1, [r7, #4]	@ zero_extendqisi2
	orr	r3, r3, r2
	ldrb	r2, [r7, #5]	@ zero_extendqisi2
	orr	r3, r3, ip
	orr	r3, r3, r0
	orr	r3, r3, r1
	orrs	r3, r3, r2
	beq	.L20597
	b	.L20580
.L20611:
	ldr	r2, .L20612+8
	movw	r1, #:lower16:.LC1401
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC1401
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	__dynamic_pr_debug
.L20608:
	movw	r1, #:lower16:.LC1400
	ldr	r2, .L20612+8
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC1400
	bl	__dynamic_pr_debug
	b	.L20589
.L20613:
	.align	2
.L20612:
	.word	.LANCHOR8-1012
	.word	.LANCHOR8-988
	.word	.LANCHOR5+2864
	.fnend
	.size	gether_qc_get_macs, .-gether_qc_get_macs
	.align	2
	.global	gether_qc_setup_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_setup_name, %function
gether_qc_setup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r2
	mov	r2, #1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	strd	r0, [sp, #8]
	mov	r0, #28
	mov	r1, r2
	bl	alloc_etherdev_mqs
	subs	r5, r0, #0
	beq	.L20633
	mov	r1, #0
	movw	r2, #:lower16:.LC1180
	movw	fp, #:lower16:.LANCHOR1
	mov	r3, r4
	str	r1, [r5, #1152]
	movt	r2, #:upper16:.LC1180
	movt	fp, #:upper16:.LANCHOR1
	str	r5, [r5, #1160]
	mov	r1, #16
	bl	snprintf
	ldr	r4, [fp, #4068]
	add	r3, r6, #32
	ldr	r6, [r5, #484]
	str	r3, [sp, #4]
	cmp	r4, #0
	subne	r9, r6, #1
	addne	r10, r6, #5
	bne	.L20618
	b	.L20622
.L20647:
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	mov	r7, r0
	ldrb	r0, [r4, #2]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, r7, lsl #4
	strb	r0, [r9, #1]!
	cmp	r10, r9
	beq	.L20621
.L20620:
	mov	r4, r8
.L20618:
	ldrb	r3, [r4]	@ zero_extendqisi2
	add	r8, r4, #3
	cmp	r3, #58
	cmpne	r3, #46
	mov	r0, r3
	beq	.L20647
	bl	hex_to_bin
	mov	r8, r0
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, r8, lsl #4
	add	r8, r4, #2
	strb	r0, [r9, #1]!
	cmp	r10, r9
	bne	.L20620
.L20621:
	ldrb	r3, [r6]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L20648
.L20622:
	mov	r1, #6
	mov	r0, r6
	bl	get_random_bytes
	ldrb	r3, [r6]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC1181
	movw	r1, #:lower16:.LC1182
	movt	r2, #:upper16:.LC1181
	movt	r1, #:upper16:.LC1182
	ldr	r0, [sp, #4]
	bic	r3, r3, #1
	orr	r3, r3, #2
	strb	r3, [r6]
	bl	dev_warn
.L20617:
	ldr	r4, [fp, #4072]
	add	r6, r5, #1152
	add	r7, r6, #21
	cmp	r4, #0
	addne	fp, r5, #1168
	addne	r6, r6, #26
	addne	fp, fp, #4
	bne	.L20625
	b	.L20629
.L20649:
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	mov	r10, r0
	ldrb	r0, [r4, #2]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, r10, lsl #4
	strb	r0, [fp, #1]!
	cmp	fp, r6
	beq	.L20628
.L20627:
	mov	r4, r9
.L20625:
	ldrb	r3, [r4]	@ zero_extendqisi2
	add	r9, r4, #3
	cmp	r3, #58
	cmpne	r3, #46
	mov	r0, r3
	beq	.L20649
	bl	hex_to_bin
	mov	r9, r0
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, r9, lsl #4
	add	r9, r4, #2
	strb	r0, [fp, #1]!
	cmp	r6, fp
	bne	.L20627
.L20628:
	ldrb	r3, [r5, #1173]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L20650
.L20629:
	mov	r1, #6
	mov	r0, r7
	bl	get_random_bytes
	ldrb	r3, [r5, #1173]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC1449
	movw	r1, #:lower16:.LC1182
	movt	r2, #:upper16:.LC1449
	movt	r1, #:upper16:.LC1182
	ldr	r0, [sp, #4]
	bic	r3, r3, #1
	orr	r3, r3, #2
	strb	r3, [r5, #1173]
	bl	dev_warn
.L20624:
	ldr	r2, [sp, #12]
	cmp	r2, #0
	beq	.L20630
	ldr	r3, [r7]	@ unaligned
	str	r3, [r2]	@ unaligned
	ldrh	r3, [r7, #4]	@ unaligned
	strh	r3, [r2, #4]	@ unaligned
.L20630:
	ldr	r3, .L20652
	mov	r0, r5
	add	r2, r3, #136
	str	r3, [r5, #328]
	str	r2, [r5, #332]
	bl	netif_carrier_off
	ldr	r2, [sp, #4]
	mov	r0, r5
	ldr	r3, .L20652+4
	str	r2, [r5, #688]
	ldr	r2, [sp, #8]
	str	r3, [r5, #736]
	str	r2, [r5, #1164]
	bl	register_netdev
	subs	r4, r0, #0
	bge	.L20631
	ldr	r0, .L20652+8
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20651
.L20632:
	mov	r0, r5
	bl	free_netdev
.L20614:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L20648:
	ldrb	r1, [r6, #1]	@ zero_extendqisi2
	ldrb	r2, [r6, #2]	@ zero_extendqisi2
	ldrb	r0, [r6, #3]	@ zero_extendqisi2
	orr	r3, r3, r1
	ldrb	r1, [r6, #4]	@ zero_extendqisi2
	orr	r3, r3, r2
	ldrb	r2, [r6, #5]	@ zero_extendqisi2
	orr	r3, r3, r0
	orr	r3, r3, r1
	orrs	r3, r3, r2
	beq	.L20622
	b	.L20617
.L20650:
	ldrb	r1, [r5, #1174]	@ zero_extendqisi2
	ldrb	r2, [r5, #1175]	@ zero_extendqisi2
	ldrb	r0, [r5, #1176]	@ zero_extendqisi2
	orr	r3, r3, r1
	ldrb	r1, [r5, #1177]	@ zero_extendqisi2
	orr	r3, r3, r2
	ldrb	r2, [r5, #1178]	@ zero_extendqisi2
	orr	r3, r3, r0
	orr	r3, r3, r1
	orrs	r3, r3, r2
	beq	.L20629
	b	.L20624
.L20651:
	movw	r2, #:lower16:.LC1184
	mov	r3, r4
	ldr	r1, [sp, #4]
	movt	r2, #:upper16:.LC1184
	sub	r0, r0, #20
	bl	__dynamic_dev_dbg
	b	.L20632
.L20633:
	mvn	r4, #11
	b	.L20614
.L20631:
	movw	r0, #:lower16:.LC1185
	ldr	r2, [r5, #484]
	ldr	r1, [r5, #1160]
	movt	r0, #:upper16:.LC1185
	bl	printk
	movw	r0, #:lower16:.LC1186
	mov	r2, r7
	ldr	r1, [r5, #1160]
	movt	r0, #:upper16:.LC1186
	bl	printk
	b	.L20614
.L20653:
	.align	2
.L20652:
	.word	.LANCHOR5+3104
	.word	.LANCHOR7-928
	.word	.LANCHOR8-556
	.fnend
	.size	gether_qc_setup_name, .-gether_qc_setup_name
	.align	2
	.global	gether_qc_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_setup, %function
gether_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r2, #:lower16:.LC1429
	movt	r2, #:upper16:.LC1429
	b	gether_qc_setup_name
	.fnend
	.size	gether_qc_setup, .-gether_qc_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_function_bind_config, %function
rndis_qc_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:__stack_chk_guard
	strd	r8, [sp, #16]
	movt	r7, #:upper16:__stack_chk_guard
	strd	r10, [sp, #24]
	ldr	r3, [r7]
	str	lr, [sp, #32]
	ldr	r4, [r0, #4]
	.pad #52
	sub	sp, sp, #52
	str	r3, [sp, #44]
	cmp	r4, #0
	beq	.L20692
	mov	r8, r1
	ldrb	r1, [r4, #5]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1178
	ldrb	r3, [r4]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC1178
	ldr	r2, .L20700
	str	r1, [sp, #16]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	mov	r1, r2
	str	ip, [sp, #12]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldr	r3, [r8, #24]
	movw	r2, #:lower16:.LC1179
	mov	r1, r4
	movt	r2, #:upper16:.LC1179
	ldr	r0, [r3]
	bl	gether_qc_setup_name
	subs	fp, r0, #0
	bne	.L20693
	ldrb	r3, [r4, #269]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L20659
	movw	r3, #:lower16:.LANCHOR7
	mvn	r1, #31
	movt	r3, #:upper16:.LANCHOR7
	mov	ip, #1
	sub	r2, r3, #2608
	mov	r0, #480
	sub	r2, r2, #4
	strb	r1, [r3, #-2599]
	mov	r1, #3
	strh	r0, [r2, #4]	@ movhi
	strb	r1, [r3, #-2606]
	strb	ip, [r3, #-2598]
	strb	r1, [r3, #-2597]
.L20659:
	movw	r6, #:lower16:.LANCHOR1
	ldrb	r9, [r4, #12]	@ zero_extendqisi2
	movt	r6, #:upper16:.LANCHOR1
	ldr	r10, [r4, #8]
	ldrb	r3, [r6, #3740]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L20694
.L20670:
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #2394
	movt	r5, #:upper16:.LANCHOR4
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L20695
.L20660:
	ldr	r3, [r6, #3744]
	cmp	r3, #0
	beq	.L20661
	movw	r3, #2418
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L20696
.L20663:
	movw	r3, #:lower16:.LANCHOR7
	movt	r3, #:upper16:.LANCHOR7
	ldrb	r2, [r3, #-968]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L20664
	ldr	r1, [r8, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L20666
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r8, #24]
	strb	r2, [r3, #-2596]
	strb	r2, [r3, #-968]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L20666
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r8, #24]
	strb	r2, [r3, #-2576]
	strb	r2, [r3, #-960]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L20666
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [r3, #-2605]
	strb	r2, [r3, #-952]
.L20664:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L20673
	mov	r2, #184
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L20697
.L20667:
	ldr	r1, [r4]	@ unaligned
	movw	r2, #:lower16:rndis_qc_add_header
	movw	ip, #:lower16:.LC1179
	ldr	r3, .L20700+4
	movt	r2, #:upper16:rndis_qc_add_header
	movt	ip, #:upper16:.LC1179
	cmp	r9, #0
	add	r4, r4, #13
	moveq	r9, #15
	mov	r0, r8
	str	r1, [r5, #122]	@ unaligned
	ldrh	lr, [r4, #-9]	@ unaligned
	movw	r1, #:lower16:rndis_qc_bind
	movt	r1, #:upper16:rndis_qc_bind
	str	ip, [r5]
	movw	ip, #:lower16:rndis_qc_set_alt
	str	r3, [r5, #4]
	movw	r3, #:lower16:rndis_qc_rm_hdr
	movt	ip, #:upper16:rndis_qc_set_alt
	str	r2, [r5, #104]
	movt	r3, #:upper16:rndis_qc_rm_hdr
	movw	r2, #:lower16:rndis_qc_unbind
	movt	r2, #:upper16:rndis_qc_unbind
	str	r1, [r5, #32]
	movw	r1, #:lower16:rndis_qc_disable
	movt	r1, #:upper16:rndis_qc_disable
	str	r3, [r5, #108]
	movw	r3, #:lower16:rndis_qc_setup
	str	r2, [r5, #36]
	movt	r3, #:upper16:rndis_qc_setup
	movw	r2, #:lower16:rndis_qc_suspend
	movt	r2, #:upper16:rndis_qc_suspend
	str	ip, [r5, #40]
	str	r1, [r5, #48]
	mov	r1, #0
	str	r3, [r5, #52]
	movw	r3, #:lower16:rndis_qc_resume
	str	r2, [r5, #56]
	movt	r3, #:upper16:rndis_qc_resume
	mov	r2, #44
	str	r3, [r5, #60]
	strh	r1, [r5, #98]	@ movhi
	mov	r1, r5
	str	r2, [r5, #100]
	strh	lr, [r5, #126]	@ unaligned
	str	r10, [r5, #128]
	strb	r9, [r5, #132]
	str	r4, [r5, #140]
	bl	usb_add_function
	subs	fp, r0, #0
	streq	r5, [r6, #2496]
	beq	.L20655
.L20668:
	mov	r0, r5
	mov	r4, #0
	bl	kfree
	ldrb	r3, [r6, #3740]	@ zero_extendqisi2
	str	r4, [r6, #2496]
	cmp	r3, r4
	bne	.L20698
.L20655:
	ldr	r2, [sp, #44]
	mov	r0, fp
	ldr	r3, [r7]
	cmp	r2, r3
	bne	.L20699
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L20694:
	bl	rndis_init.part.89
	subs	fp, r0, #0
	bge	.L20670
	b	.L20655
.L20673:
	mov	r5, #16
	b	.L20667
.L20698:
	movw	r1, #:lower16:.LC596
	mov	r2, r4
	strb	r4, [r6, #3740]
	movt	r1, #:upper16:.LC596
	add	r0, sp, #24
	bl	sprintf
	add	r0, sp, #24
	mov	r1, r4
	bl	remove_proc_entry
	b	.L20655
.L20697:
	mvn	fp, #11
	b	.L20668
.L20661:
	bl	bam_data_setup.part.91
	subs	fp, r0, #0
	beq	.L20663
	movw	r0, #:lower16:.LC1028
	mov	r2, fp
	ldr	r1, .L20700+8
	movt	r0, #:upper16:.LC1028
	bl	printk
	movw	r0, #:lower16:.LC1029
	ldr	r1, .L20700+12
	movt	r0, #:upper16:.LC1029
	bl	printk
	b	.L20655
.L20695:
	movw	r1, #:lower16:.LC1025
	mov	r3, #1
	ldr	r2, .L20700+16
	movt	r1, #:upper16:.LC1025
	ldr	r0, .L20700+20
	bl	__dynamic_pr_debug
	b	.L20660
.L20696:
	movw	r1, #:lower16:.LC1027
	ldr	r2, .L20700+16
	movt	r1, #:upper16:.LC1027
	ldr	r0, .L20700+24
	bl	__dynamic_pr_debug
	b	.L20663
.L20666:
	mvn	fp, #18
	b	.L20655
.L20692:
	ldr	r2, .L20700
	movw	r0, #:lower16:.LC1177
	mvn	fp, #21
	movt	r0, #:upper16:.LC1177
	mov	r1, r2
	bl	printk
	b	.L20655
.L20693:
	ldr	r2, .L20700
	movw	r0, #:lower16:.LC1187
	movt	r0, #:upper16:.LC1187
	mov	r1, r2
	bl	printk
	b	.L20655
.L20699:
	bl	__stack_chk_fail
.L20701:
	.align	2
.L20700:
	.word	.LANCHOR5+3404
	.word	.LANCHOR7-936
	.word	.LANCHOR5+3000
	.word	.LANCHOR5+3020
	.word	.LANCHOR5-3460
	.word	.LANCHOR4+2376
	.word	.LANCHOR4+2400
	.fnend
	.size	rndis_qc_function_bind_config, .-rndis_qc_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_function_bind_config, %function
ecm_qc_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r4, [r0, #4]
	.pad #12
	sub	sp, sp, #12
	cmp	r4, #0
	beq	.L20717
	ldr	r0, .L20720
	mov	r6, r1
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20718
.L20705:
	ldr	r0, .L20720+4
	bl	strim
	mov	r1, r0
	mov	r5, r0
	movw	r0, #:lower16:.LC587
	movt	r0, #:upper16:.LC587
	bl	strcmp
	cmp	r0, #0
	beq	.L20706
	ldr	r3, [r6, #24]
	movw	r2, #:lower16:.LC1431
	mov	r1, r4
	movt	r2, #:upper16:.LC1431
	ldr	r0, [r3]
	bl	gether_qc_setup_name
	subs	r7, r0, #0
	bne	.L20719
.L20706:
	mov	r2, r5
	mov	r1, r4
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	ecm_qc_bind_config
.L20718:
	ldr	r2, .L20720+4
	movw	r1, #:lower16:.LC1450
	sub	r0, r0, #20
	ldr	r3, .L20720+8
	movt	r1, #:upper16:.LC1450
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L20705
.L20719:
	ldr	r2, .L20720+8
	movw	r0, #:lower16:.LC1187
	movt	r0, #:upper16:.LC1187
	mov	r1, r2
	bl	printk
.L20702:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L20717:
	ldr	r2, .L20720+8
	movw	r0, #:lower16:.LC1430
	mvn	r7, #21
	movt	r0, #:upper16:.LC1430
	mov	r1, r2
	bl	printk
	b	.L20702
.L20721:
	.align	2
.L20720:
	.word	.LANCHOR8-532
	.word	.LANCHOR1+3020
	.word	.LANCHOR5+3436
	.fnend
	.size	ecm_qc_function_bind_config, .-ecm_qc_function_bind_config
	.align	2
	.global	gether_qc_cleanup_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_cleanup_name, %function
gether_qc_cleanup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, r0
	movw	r0, #:lower16:init_net
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r0, #:upper16:init_net
	str	lr, [sp, #4]
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L20722
	.syntax divided
@ 17 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		mrs	ip, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	movw	r2, #:lower16:__per_cpu_offset
	bic	r1, r3, #8128
	movt	r2, #:upper16:__per_cpu_offset
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
	ldr	r1, [r2, r1, lsl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, ip	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	bl	unregister_netdev
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	free_netdev
.L20722:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gether_qc_cleanup_name, .-gether_qc_cleanup_name
	.align	2
	.global	gether_qc_connect_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_connect_name, %function
gether_qc_connect_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	movw	r0, #:lower16:init_net
	movt	r0, #:upper16:init_net
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L20728
	.syntax divided
@ 17 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		mrs	r0, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	movw	r2, #:lower16:__per_cpu_offset
	bic	r1, r3, #8128
	movt	r2, #:upper16:__per_cpu_offset
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
	ldr	r1, [r2, r1, lsl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r0	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	adds	r7, r4, #1152
	beq	.L20728
	ldrb	r3, [r5, #96]	@ zero_extendqisi2
	mov	r0, r7
	strb	r3, [r4, #1172]
	ldr	r3, [r5, #100]
	str	r3, [r4, #1168]
	bl	_raw_spin_lock
	str	r5, [r4, #1156]
	str	r7, [r5, #84]
	ldr	r3, [r4, #1160]
	ldr	r3, [r3, #164]
	tst	r3, #1
	beq	.L20729
	ldr	r3, [r5, #112]
	cmp	r3, #0
	beq	.L20730
.L20747:
	mov	r0, r5
	blx	r3
.L20730:
	mov	r0, r7
	bl	_raw_spin_unlock
	cmp	r6, #0
	ldr	r0, [r4, #1160]
	beq	.L20725
	bl	netif_carrier_on
	ldr	r0, [r4, #1160]
	ldr	r3, [r0, #164]
	tst	r3, #1
	beq	.L20725
	ldr	r5, [r0, #576]
	mov	r0, #0
	add	r1, r5, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	bne	.L20733
.L20748:
	ldr	r0, [r4, #1160]
	b	.L20725
.L20728:
	mvn	r0, #21
.L20725:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L20729:
	ldr	r3, [r5, #116]
	cmp	r3, #0
	bne	.L20747
	b	.L20730
.L20733:
	ldr	r0, [r5, #4]
	bl	__netif_schedule
	b	.L20748
	.fnend
	.size	gether_qc_connect_name, .-gether_qc_connect_name
	.align	2
	.global	gether_qc_disconnect_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_disconnect_name, %function
gether_qc_disconnect_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movw	r0, #:lower16:init_net
	movt	r0, #:upper16:init_net
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L20749
	.syntax divided
@ 17 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		mrs	r0, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	movw	r2, #:lower16:__per_cpu_offset
	bic	r1, r3, #8128
	movt	r2, #:upper16:__per_cpu_offset
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
	ldr	r1, [r2, r1, lsl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r0	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	adds	r6, r4, #1152
	beq	.L20749
	ldr	r3, [r4, #1160]
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L20759
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
.L20754:
	ldr	r0, [r4, #1160]
	bl	netif_carrier_off
	mov	r0, r6
	bl	_raw_spin_lock
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #1156]
	str	r3, [r5, #84]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L20749:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L20759:
	movw	r0, #:lower16:.LC109
	movw	r1, #1847
	movt	r0, #:upper16:.LC109
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC110
	movt	r0, #:upper16:.LC110
	bl	printk
	b	.L20754
	.fnend
	.size	gether_qc_disconnect_name, .-gether_qc_disconnect_name
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_disable, %function
ecm_qc_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L20808
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L20801
.L20761:
	ldr	r3, [r4, #88]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L20763
	ldr	r0, .L20808+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20802
.L20764:
	ldr	r0, .L20808+8
	add	r6, r4, #156
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L20803
.L20765:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r3, [r5, #3748]
	cmp	r3, #0
	ble	.L20804
	cmp	r6, #0
	beq	.L20805
	ldr	r6, [r5, #3752]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L20769
	ldr	r2, [r3, #8]
	cmp	r2, #0
	beq	.L20769
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L20769
	ldr	r0, [r3, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r6, #4]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r6, #4]
	mov	r3, #0
	ldr	r2, [r2, #8]
	str	r3, [r2]
	ldr	r2, [r6, #4]
	ldr	r2, [r2, #12]
	str	r3, [r2]
	str	r3, [r6, #4]
.L20769:
	ldr	r3, [r6, #60]
	cmp	r3, #7
	beq	.L20806
	mov	r0, #0
	bl	usb_bam_client_ready
	cmp	r0, #0
	bne	.L20807
.L20767:
	ldr	r3, [r4, #124]
	cmp	r3, #7
	beq	.L20763
	movw	r1, #:lower16:.LC832
	mov	r0, r4
	movt	r1, #:upper16:.LC832
	bl	gether_qc_disconnect_name
.L20763:
	ldr	r0, [r4, #144]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L20760
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #144]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #144]
	str	r3, [r2, #28]
.L20760:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L20806:
	add	r2, r6, #184
	ldr	r1, [r5, #3744]
	mov	r0, #4
	bl	queue_work_on
	b	.L20767
.L20802:
	movw	r1, #:lower16:.LC1451
	ldr	r2, .L20808+12
	mov	r3, r4
	movt	r1, #:upper16:.LC1451
	sub	r0, r0, #20
	bl	__dynamic_pr_debug
	b	.L20764
.L20803:
	mov	r3, #0
	movw	r1, #:lower16:.LC157
	ldr	r2, .L20808+16
	movt	r1, #:upper16:.LC157
	sub	r0, r0, #24
	str	r3, [sp]
	mov	r3, r6
	bl	__dynamic_pr_debug
	b	.L20765
.L20801:
	ldr	r1, [r4, #20]
	sub	r0, r3, #20
	movw	r2, #:lower16:.LC1438
	movt	r2, #:upper16:.LC1438
	ldr	r3, [r1, #24]
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20761
.L20805:
	movw	r0, #:lower16:.LC616
	ldr	r1, .L20808+16
	movt	r0, #:upper16:.LC616
	bl	printk
	b	.L20767
.L20804:
	movw	r0, #:lower16:.LC615
	mov	r2, #0
	ldr	r1, .L20808+16
	movt	r0, #:upper16:.LC615
	bl	printk
	b	.L20767
.L20807:
	ldr	r2, .L20808+16
	movw	r0, #:lower16:.LC617
	movt	r0, #:upper16:.LC617
	mov	r1, r2
	bl	printk
	b	.L20767
.L20809:
	.align	2
.L20808:
	.word	.LANCHOR8-508
	.word	.LANCHOR8-484
	.word	.LANCHOR4-2352
	.word	.LANCHOR5+3464
	.word	.LANCHOR5-3276
	.fnend
	.size	ecm_qc_disable, .-ecm_qc_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_set_alt, %function
ecm_qc_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	mov	r5, r2
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r0, [r0, #120]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r4, #20]
	cmp	r0, r1
	ldr	r6, [r3, #24]
	beq	.L20893
	ldrb	r3, [r4, #121]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r3, r1
	bne	.L20892
	ldr	r2, [r4, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L20817
	ldr	r0, .L20908
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20894
.L20818:
	ldr	r0, .L20908+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20895
.L20819:
	add	r0, r4, #156
	bl	bam_data_disconnect.constprop.112
	ldr	r3, [r4, #124]
	cmp	r3, #7
	beq	.L20890
	movw	r1, #:lower16:.LC832
	mov	r0, r4
	movt	r1, #:upper16:.LC832
	bl	gether_qc_disconnect_name
.L20890:
	ldr	r2, [r4, #88]
.L20817:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L20821
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L20821
.L20822:
	cmp	r5, #1
	bne	.L20891
	ldr	r3, [r6]
	movw	r0, #:lower16:.LC479
	movt	r0, #:upper16:.LC479
	ldr	r1, [r3, #28]
	bl	strcmp
	ldr	r3, .L20908+8
	mov	r2, #15
	adds	r0, r0, #0
	movne	r0, #1
	strh	r2, [r4, #98]	@ movhi
	ldrh	r2, [r3, #-2]
	strb	r0, [r4, #96]
	tst	r2, #4
	bne	.L20896
.L20828:
	ldr	r3, [r4, #124]
	cmp	r3, #7
	beq	.L20829
	movw	r1, #:lower16:.LC832
	mov	r2, #1
	movt	r1, #:upper16:.LC832
	mov	r0, r4
	bl	gether_qc_connect_name
	cmn	r0, #4096
	bhi	.L20810
	ldr	r2, [r4, #20]
	ldr	r3, [r4, #124]
	ldr	r2, [r2, #24]
	cmp	r3, #7
	movne	r6, #0
	moveq	r6, #2
	ldr	r5, [r2]
.L20831:
	ldr	ip, [r4, #88]
	mov	r3, #0
	str	r2, [r4, #156]
	ldr	r0, [r4, #92]
	mov	r2, r3
	mov	r1, r6
	str	r4, [r4, #160]
	add	r7, r4, #156
	str	ip, [r4, #164]
	str	r0, [r4, #168]
	ldr	r0, [r5, #28]
	bl	usb_bam_get_connection_idx
	uxtb	r10, r0
	mov	r3, #0
	ldr	r0, [r5, #28]
	mov	r2, #1
	mov	r1, r6
	bl	usb_bam_get_connection_idx
	ldr	r3, .L20908+12
	uxtb	r9, r0
	ldr	r8, [r4, #124]
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L20897
.L20832:
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r3, [r6, #3748]
	cmp	r3, #0
	ble	.L20898
	cmp	r7, #0
	beq	.L20899
	ldr	r3, [r4, #164]
	ldr	r5, [r6, #3752]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	fp, r0, #0
	bne	.L20900
	ldr	r3, [r4, #164]
	str	r5, [r3]
	ldr	r3, [r4, #168]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	fp, r0, #0
	bne	.L20901
	ldr	r3, [r4, #168]
	cmp	r8, #7
	str	r5, [r3]
	str	r7, [r5, #4]
	strb	r10, [r5, #52]
	strb	r9, [r5, #53]
	str	fp, [r5, #56]
	str	r8, [r5, #60]
	bne	.L20838
	add	r2, r5, #44
	add	r3, r5, #48
	strb	r10, [r5, #64]
	strb	r9, [r5, #65]
	strd	r2, [r5, #68]
.L20838:
	add	r2, r5, #168
	mov	r0, #4
	ldr	r1, [r6, #3744]
	bl	queue_work_on
	ldr	r0, .L20908+16
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20902
.L20840:
	mov	r3, #1
	ldr	r2, [r4, #20]
	ldr	r5, [r4, #148]
	strb	r3, [r4, #152]
	strb	r3, [r4, #153]
	cmp	r5, #0
	beq	.L20849
	ldr	r6, [r5]
	mov	r3, #0
	mov	r1, #8
	ldr	r8, [r2, #24]
	movw	r7, #:lower16:.LANCHOR4
	movw	r2, #2514
	movt	r7, #:upper16:.LANCHOR4
	strb	r3, [r6, #1]
	ldrb	r0, [r4, #153]	@ zero_extendqisi2
	strh	r0, [r6, #2]	@ unaligned
	strb	r3, [r6, #6]
	strb	r3, [r6, #7]
	str	r1, [r5, #4]
	ldrh	r3, [r7, r2]
	tst	r3, #4
	bne	.L20903
.L20842:
	mov	r1, #2
	mvn	r0, #94
	mov	r3, #0
	mov	r2, #32
	strb	r1, [r4, #152]
	mov	r1, r5
	strb	r0, [r6]
	ldrb	r0, [r4, #120]	@ zero_extendqisi2
	strh	r0, [r6, #4]	@ unaligned
	ldr	r0, [r4, #144]
	str	r3, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L20844
.L20891:
	mov	r3, #1
	ldr	r2, [r4, #20]
	ldr	r5, [r4, #148]
	strb	r3, [r4, #152]
	cmp	r5, #0
	beq	.L20849
	movw	r7, #:lower16:.LANCHOR4
	movt	r7, #:upper16:.LANCHOR4
.L20846:
	ldr	r8, [r5]
	mov	r3, #0
	mov	r1, #8
	ldr	r9, [r2, #24]
	movw	r2, #2514
	strb	r3, [r8, #1]
	ldrb	r0, [r4, #153]	@ zero_extendqisi2
	strh	r0, [r8, #2]	@ unaligned
	strb	r3, [r8, #6]
	strb	r3, [r8, #7]
	str	r1, [r5, #4]
	ldrh	r3, [r7, r2]
	tst	r3, #4
	bne	.L20904
.L20847:
	mov	r1, #2
	mvn	r3, #94
	mov	r6, #0
	mov	r2, #32
	strb	r1, [r4, #152]
	mov	r1, r5
	strb	r3, [r8]
	ldrb	r3, [r4, #120]	@ zero_extendqisi2
	strh	r3, [r8, #4]	@ unaligned
	ldr	r0, [r4, #144]
	str	r6, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L20905
.L20849:
	mov	r0, #0
.L20810:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L20821:
	ldr	r3, .L20908+20
	ldr	r0, [r6]
	ldrh	r1, [r3, #-2]
	tst	r1, #4
	bne	.L20906
.L20823:
	mov	r1, r4
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L20825
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L20822
.L20825:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L20810
.L20893:
	cmp	r2, #0
	bne	.L20892
	ldr	r0, [r4, #144]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L20814
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #144]
.L20814:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L20907
.L20815:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #144]
	mov	r0, #0
	str	r4, [r3]
	b	.L20810
.L20905:
	movw	r3, #2538
	str	r5, [r4, #148]
	ldrh	r3, [r7, r3]
	tst	r3, #4
	beq	.L20849
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC25
	mov	r3, r0
	movt	r2, #:upper16:.LC25
	ldr	r0, .L20908+24
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	mov	r0, r6
	b	.L20810
.L20900:
	movw	r0, #:lower16:.LC921
	ldr	r1, .L20908+28
	movt	r0, #:upper16:.LC921
	ldr	r2, [r4, #164]
	bl	printk
.L20834:
	movw	r0, #:lower16:.LC1452
	mov	r2, fp
	ldr	r1, .L20908+32
	movt	r0, #:upper16:.LC1452
	bl	printk
.L20892:
	mvn	r0, #21
	b	.L20810
.L20829:
	ldr	r3, [r4, #20]
	mov	r6, #2
	ldr	r2, [r3, #24]
	ldr	r5, [r2]
	b	.L20831
.L20844:
	movw	r3, #2538
	str	r5, [r4, #148]
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L20845
	mov	r3, #1
	ldr	r2, [r4, #20]
	strb	r3, [r4, #152]
	b	.L20846
.L20894:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC1439
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1439
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20818
.L20895:
	movw	r1, #:lower16:.LC1451
	ldr	r2, .L20908+36
	mov	r3, r4
	movt	r1, #:upper16:.LC1451
	sub	r0, r0, #20
	bl	__dynamic_pr_debug
	b	.L20819
.L20906:
	movw	r2, #:lower16:.LC1440
	add	r1, r0, #32
	movt	r2, #:upper16:.LC1440
	sub	r0, r3, #20
	bl	__dynamic_dev_dbg
	ldr	r2, [r4, #88]
	ldr	r0, [r6]
	b	.L20823
.L20896:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC1441
	sub	r0, r3, #20
	movt	r2, #:upper16:.LC1441
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20828
.L20897:
	mov	ip, #0
	movw	r1, #:lower16:.LC157
	ldr	r2, .L20908+28
	sub	r0, r3, #20
	movt	r1, #:upper16:.LC157
	mov	r3, r7
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L20832
.L20902:
	movw	r1, #:lower16:.LC1453
	ldr	r2, .L20908+32
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC1453
	bl	__dynamic_pr_debug
	b	.L20840
.L20907:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L20892
	ldr	r0, [r4, #144]
	ldr	r1, [r0, #28]
	b	.L20815
.L20904:
	ldrb	lr, [r4, #153]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC20
	movw	r3, #:lower16:.LC21
	ldr	r1, [r9]
	movt	ip, #:upper16:.LC20
	movw	r2, #:lower16:.LC23
	movt	r3, #:upper16:.LC21
	movt	r2, #:upper16:.LC23
	ldr	r0, .L20908+40
	cmp	lr, #0
	movne	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20847
.L20903:
	ldrb	lr, [r4, #153]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC20
	movw	r3, #:lower16:.LC21
	ldr	r1, [r8]
	movt	ip, #:upper16:.LC20
	movw	r2, #:lower16:.LC23
	movt	r3, #:upper16:.LC21
	add	r0, r7, #2496
	movt	r2, #:upper16:.LC23
	cmp	lr, #0
	movne	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20842
.L20845:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC25
	mov	r3, r0
	movt	r2, #:upper16:.LC25
	ldr	r0, .L20908+24
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20891
.L20899:
	movw	r0, #:lower16:.LC616
	ldr	r1, .L20908+28
	movt	r0, #:upper16:.LC616
	bl	printk
	movw	r0, #:lower16:.LC1452
	mvn	r2, #18
	ldr	r1, .L20908+32
	movt	r0, #:upper16:.LC1452
	bl	printk
	mvn	r0, #21
	b	.L20810
.L20898:
	movw	r0, #:lower16:.LC173
	mov	r2, #0
	ldr	r1, .L20908+28
	movt	r0, #:upper16:.LC173
	mvn	fp, #18
	bl	printk
	b	.L20834
.L20901:
	movw	r0, #:lower16:.LC922
	ldr	r2, [r4, #168]
	movt	r0, #:upper16:.LC922
	ldr	r1, .L20908+28
	bl	printk
	ldr	r3, [r4, #164]
	mov	r2, #0
	str	r2, [r3]
	b	.L20834
.L20909:
	.align	2
.L20908:
	.word	.LANCHOR8-460
	.word	.LANCHOR8-484
	.word	.LANCHOR8-412
	.word	.LANCHOR8-916
	.word	.LANCHOR8-388
	.word	.LANCHOR8-436
	.word	.LANCHOR4+2520
	.word	.LANCHOR5+2944
	.word	.LANCHOR5+3488
	.word	.LANCHOR5+3464
	.word	.LANCHOR4+2496
	.fnend
	.size	ecm_qc_set_alt, .-ecm_qc_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_disable, %function
rndis_qc_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #156]
	ldr	r3, [r3]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC1454
	strd	r6, [sp, #8]
	ldr	r1, .L20940
	movt	r0, #:upper16:.LC1454
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	bl	printk
	ldr	r2, [r4, #144]
	cmp	r2, #0
	ble	.L20912
.L20919:
	ldr	r0, .L20940+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20939
.L20914:
	add	r0, r4, #168
	bl	bam_data_disconnect.constprop.112
	movw	r1, #:lower16:.LC774
	mov	r0, r4
	movt	r1, #:upper16:.LC774
	bl	gether_qc_disconnect_name
	ldr	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #156]
	mov	r2, #0
	str	r2, [r3]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L20912:
	mov	r5, #60
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	mov	r1, #0
	mul	r5, r5, r2
	add	r2, r3, r5
	add	r5, r2, #3728
	add	r5, r5, #4
	str	r1, [r2, #3684]
	mov	r8, r5
.L20915:
	ldr	r3, [r8]
	cmp	r3, r5
	ldr	r2, [r3]
	beq	.L20919
	ldr	r1, [r3, #16]
	cmp	r1, #0
	beq	.L20920
	mov	r3, r2
	b	.L20921
.L20925:
	mov	r3, r1
.L20921:
	cmp	r3, r5
	ldr	r1, [r3]
	beq	.L20919
	ldr	r2, [r3, #16]
	cmp	r2, #0
	bne	.L20925
.L20920:
	ldr	r9, [r3, #8]
	mov	r2, #1
	str	r2, [r3, #16]
	cmp	r9, #0
	beq	.L20919
	ldr	r6, [r8]
	cmp	r6, r5
	ldrne	r7, [r6]
	bne	.L20918
	b	.L20915
.L20917:
	cmp	r7, r5
	mov	r6, r7
	ldr	r3, [r7]
	beq	.L20915
	mov	r7, r3
.L20918:
	cmp	r6, #0
	beq	.L20917
	ldr	r3, [r6, #8]
	cmp	r9, r3
	bne	.L20917
	mov	r0, r6
	bl	list_del
	mov	r0, r6
	bl	kfree
	b	.L20917
.L20939:
	ldr	r2, .L20940+8
	movw	r1, #:lower16:.LC1455
	mov	r3, r4
	movt	r1, #:upper16:.LC1455
	sub	r0, r0, #20
	str	r2, [sp]
	bl	__dynamic_pr_debug
	b	.L20914
.L20941:
	.align	2
.L20940:
	.word	.LANCHOR5+3508
	.word	.LANCHOR8-364
	.word	.LANCHOR5+3528
	.fnend
	.size	rndis_qc_disable, .-rndis_qc_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_set_alt, %function
rndis_qc_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r2, [r0, #120]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r8, [r3, #24]
	beq	.L20992
	ldrb	r3, [r0, #121]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L20948
	ldr	ip, [r0, #88]
	ldr	r3, [ip]
	cmp	r3, #0
	beq	.L20949
	ldr	r0, .L21004
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20993
.L20950:
	ldr	r0, .L21004+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20994
.L20951:
	add	r0, r4, #168
	bl	bam_data_disconnect.constprop.112
	movw	r1, #:lower16:.LC774
	mov	r0, r4
	movt	r1, #:upper16:.LC774
	bl	gether_qc_disconnect_name
	ldr	ip, [r4, #88]
.L20949:
	ldr	r3, [ip, #28]
	cmp	r3, #0
	beq	.L20952
	ldr	lr, [r4, #92]
	ldr	r3, [lr, #28]
	cmp	r3, #0
	beq	.L20952
.L20953:
	ldr	r2, [r4, #20]
	mov	r5, #0
	add	r7, r4, #168
	mov	r3, r5
	mov	r1, r5
	strb	r5, [r4, #96]
	strh	r5, [r4, #98]	@ movhi
	ldr	r0, [r2, #24]
	mov	r2, r5
	ldr	r6, [r0]
	str	r0, [r4, #168]
	str	r4, [r4, #172]
	str	ip, [r4, #176]
	str	lr, [r4, #180]
	ldr	r0, [r6, #28]
	bl	usb_bam_get_connection_idx
	uxtb	r10, r0
	mov	r3, r5
	ldr	r0, [r6, #28]
	mov	r2, #1
	mov	r1, r5
	bl	usb_bam_get_connection_idx
	ldr	r3, .L21004+8
	uxtb	r9, r0
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L20995
.L20957:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r3, [r5, #3748]
	cmp	r3, #0
	ble	.L20996
	cmp	r7, #0
	beq	.L20997
	ldr	r3, [r4, #176]
	ldr	r6, [r5, #3752]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	fp, r0, #0
	bne	.L20998
	ldr	r3, [r4, #176]
	str	r6, [r3]
	ldr	r3, [r4, #180]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	fp, r0, #0
	bne	.L20999
	ldr	lr, [r4, #180]
	mov	r3, #6
	mov	ip, #2
	add	r2, r6, #168
	ldr	r1, [r5, #3744]
	mov	r0, #4
	str	r6, [lr]
	str	r7, [r6, #4]
	strb	r10, [r6, #52]
	strb	r9, [r6, #53]
	str	ip, [r6, #56]
	str	r3, [r6, #60]
	bl	queue_work_on
	movw	r0, #:lower16:.LC1456
	ldr	r1, .L21004+12
	movt	r0, #:upper16:.LC1456
	bl	printk
	ldr	r0, .L21004+16
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L21000
.L20964:
	movw	r1, #:lower16:.LC774
	mov	r2, #0
	movt	r1, #:upper16:.LC774
	mov	r0, r4
	bl	gether_qc_connect_name
	cmn	r0, #4096
	mov	r6, r0
	movhi	fp, r0
	bhi	.L20942
	ldr	r0, .L21004+20
	add	r7, r4, #98
	ldrb	r4, [r4, #144]	@ zero_extendqisi2
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L21001
.L20966:
	clz	r3, r6
	cmp	r4, #0
	lsr	r3, r3, #5
	movne	r3, #1
	cmp	r3, #0
	bne	.L20942
	str	r3, [r5, #3628]
	str	r3, [r5, #3632]
	str	r7, [r5, #3704]
	str	r6, [r5, #3708]
.L20942:
	mov	r0, fp
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L20952:
	ldr	r3, .L21004+24
	ldr	r0, [r8]
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L21002
.L20954:
	mov	r2, ip
	mov	r1, r4
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L20956
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r8]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L20956
	ldr	ip, [r4, #88]
	ldr	lr, [r4, #92]
	b	.L20953
.L20992:
	ldr	r0, [r0, #156]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L20944
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #156]
.L20944:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L21003
.L20945:
	ldr	r3, [r0, #8]
	mov	fp, #0
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #156]
	str	r4, [r3]
	b	.L20942
.L20995:
	movw	r1, #:lower16:.LC157
	sub	r0, r3, #20
	ldr	r2, .L21004+28
	movt	r1, #:upper16:.LC157
	mov	r3, r7
	str	r5, [sp]
	bl	__dynamic_pr_debug
	b	.L20957
.L21000:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC1457
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1457
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20964
.L21001:
	movw	r1, #:lower16:.LC267
	ldr	r2, .L21004+32
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC267
	bl	__dynamic_pr_debug
	b	.L20966
.L20994:
	ldr	r2, .L21004+36
	movw	r1, #:lower16:.LC1455
	mov	r3, r4
	movt	r1, #:upper16:.LC1455
	sub	r0, r0, #20
	str	r2, [sp]
	bl	__dynamic_pr_debug
	b	.L20951
.L20993:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC1435
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1435
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20950
.L21002:
	movw	r2, #:lower16:.LC1436
	add	r1, r0, #32
	movt	r2, #:upper16:.LC1436
	sub	r0, r3, #20
	bl	__dynamic_dev_dbg
	ldr	ip, [r4, #88]
	ldr	r0, [r8]
	b	.L20954
.L20948:
	mvn	fp, #21
	b	.L20942
.L20956:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	fp, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L20942
.L21003:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r8]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L20948
	ldr	r0, [r4, #156]
	ldr	r1, [r0, #28]
	b	.L20945
.L20996:
	movw	r0, #:lower16:.LC173
	mov	r2, #0
	ldr	r1, .L21004+28
	movt	r0, #:upper16:.LC173
	mvn	fp, #18
	bl	printk
.L20959:
	movw	r0, #:lower16:.LC1452
	mov	r2, fp
	ldr	r1, .L21004+12
	movt	r0, #:upper16:.LC1452
	mvn	fp, #21
	bl	printk
	b	.L20942
.L20999:
	movw	r0, #:lower16:.LC922
	ldr	r2, [r4, #180]
	movt	r0, #:upper16:.LC922
	ldr	r1, .L21004+28
	bl	printk
	ldr	r3, [r4, #176]
	mov	r2, #0
	str	r2, [r3]
	b	.L20959
.L20997:
	movw	r0, #:lower16:.LC616
	ldr	r1, .L21004+28
	mvn	fp, #21
	movt	r0, #:upper16:.LC616
	bl	printk
	movw	r0, #:lower16:.LC1452
	mvn	r2, #18
	ldr	r1, .L21004+12
	movt	r0, #:upper16:.LC1452
	bl	printk
	b	.L20942
.L20998:
	movw	r0, #:lower16:.LC921
	ldr	r1, .L21004+28
	ldr	r2, [r4, #176]
	movt	r0, #:upper16:.LC921
	bl	printk
	b	.L20959
.L21005:
	.align	2
.L21004:
	.word	.LANCHOR8-340
	.word	.LANCHOR8-364
	.word	.LANCHOR8-916
	.word	.LANCHOR5+3552
	.word	.LANCHOR8-292
	.word	.LANCHOR8-1104
	.word	.LANCHOR8-316
	.word	.LANCHOR5+2944
	.word	.LANCHOR5+2804
	.word	.LANCHOR5+3528
	.fnend
	.size	rndis_qc_set_alt, .-rndis_qc_set_alt
	.align	2
	.global	pcm_buffer_size
	.syntax unified
	.arm
	.fpu softvfp
	.type	pcm_buffer_size, %function
pcm_buffer_size:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L21016
	ldr	r3, [r0, #380]
	ldrh	r1, [r2, #-2]
	tst	r1, #4
	bne	.L21015
	mov	r0, r3
	bx	lr
.L21015:
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	sub	r0, r2, #20
	str	r6, [sp, #8]
	movw	r1, #:lower16:.LC753
	str	lr, [sp, #12]
	ldrb	ip, [r4, #388]	@ zero_extendqisi2
	.pad #24
	sub	sp, sp, #24
	ldr	r6, [r4, #384]
	movt	r1, #:upper16:.LC753
	ubfx	lr, ip, #3, #1
	ubfx	r5, ip, #2, #1
	ubfx	r2, ip, #1, #1
	and	ip, ip, #1
	stm	sp, {r6, ip}
	str	r2, [sp, #8]
	ldr	r2, .L21016+4
	str	r5, [sp, #12]
	str	lr, [sp, #16]
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #380]
	mov	r0, r3
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L21017:
	.align	2
.L21016:
	.word	.LANCHOR4-340
	.word	.LANCHOR5-2172
	.fnend
	.size	pcm_buffer_size, .-pcm_buffer_size
	.align	2
	.global	pcm_period_size
	.syntax unified
	.arm
	.fpu softvfp
	.type	pcm_period_size, %function
pcm_period_size:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #332]
	bx	lr
	.fnend
	.size	pcm_period_size, .-pcm_period_size
	.align	2
	.global	u_audio_clear
	.syntax unified
	.arm
	.fpu softvfp
	.type	u_audio_clear, %function
u_audio_clear:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	strb	r2, [r3, #2216]
	bx	lr
	.fnend
	.size	u_audio_clear, .-u_audio_clear
	.align	2
	.global	gaudio_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gaudio_setup, %function
gaudio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	subs	r4, r0, #0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	beq	.L21066
	movw	r6, #:lower16:.LANCHOR7
	mov	r2, #0
	movt	r6, #:upper16:.LANCHOR7
	mov	r1, #2
	ldr	r0, [r6, #-904]
	bl	filp_open
	cmn	r0, #4096
	mov	r5, r0
	str	r0, [r4, #92]
	bhi	.L21067
	mov	r2, #0
	mov	r1, #1
	ldr	r0, [r6, #-900]
	str	r4, [r4, #88]
	bl	filp_open
	cmn	r0, #4096
	str	r0, [r4, #120]
	bhi	.L21068
	movw	r7, #:lower16:.LANCHOR8
	movt	r7, #:upper16:.LANCHOR8
	sub	r3, r7, #268
	ldrh	r3, [r3, #-2]
	tst	r3, #4
	bne	.L21069
.L21026:
	ldr	r2, [r0, #124]
	movw	r8, #:lower16:kmalloc_caches
	mov	r3, #2
	movt	r8, #:upper16:kmalloc_caches
	mov	ip, #3
	ldr	r0, [r8, #40]
	ldr	r1, [r2]
	mov	r2, #8000
	str	r4, [r4, #116]
	cmp	r0, #0
	str	r1, [r4, #124]
	str	ip, [r4, #128]
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	str	r2, [r4, #140]
	beq	.L21042
	mov	r2, #604
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L21070
.L21027:
	mov	r0, r5
	bl	_snd_pcm_hw_params_any
	ldr	r1, [r4, #128]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.101
	ldr	r1, [r4, #132]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.102
	ldr	r1, [r4, #136]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.103
	mov	r0, r5
	ldr	r1, [r4, #140]
	bl	_snd_pcm_hw_param_set.constprop.104
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L21043
	ldr	r3, [r5, #8]
	cmp	r3, #0
	movne	r1, #32
	bne	.L21028
.L21029:
	str	r3, [r4, #128]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L21045
	ldr	r3, [r5, #40]
	cmp	r3, #0
	movne	r1, #32
	bne	.L21030
.L21031:
	str	r3, [r4, #132]
	ldr	r3, [r5, #284]
	mov	r0, r5
	str	r3, [r4, #136]
	ldr	r3, [r5, #296]
	str	r3, [r4, #140]
	bl	kfree
	ldrh	r3, [r7, #-246]
	tst	r3, #4
	bne	.L21071
.L21032:
	mov	r2, #0
	ldr	r0, [r6, #-896]
	mov	r1, r2
	bl	filp_open
	cmn	r0, #4096
	str	r0, [r4, #148]
	bhi	.L21072
	ldr	r2, [r0, #124]
	mov	lr, #3
	mov	ip, #2
	ldr	r0, [r8, #40]
	mov	r1, #1
	mov	r3, #8000
	ldr	r2, [r2]
	str	r4, [r4, #144]
	cmp	r0, #0
	str	r2, [r4, #152]
	str	lr, [r4, #156]
	str	ip, [r4, #160]
	str	r1, [r4, #164]
	str	r3, [r4, #168]
	beq	.L21047
	mov	r2, #604
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L21073
.L21034:
	mov	r0, r5
	bl	_snd_pcm_hw_params_any
	ldr	r1, [r4, #156]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.101
	ldr	r1, [r4, #160]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.102
	ldr	r1, [r4, #164]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.103
	mov	r0, r5
	ldr	r1, [r4, #168]
	bl	_snd_pcm_hw_param_set.constprop.104
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L21048
	ldr	r3, [r5, #8]
	cmp	r3, #0
	movne	r1, #32
	bne	.L21036
.L21037:
	str	r3, [r4, #156]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L21050
	ldr	r3, [r5, #40]
	cmp	r3, #0
	movne	r1, #32
	bne	.L21038
.L21039:
	str	r3, [r4, #160]
	ldr	r3, [r5, #284]
	mov	r0, r5
	str	r3, [r4, #164]
	ldr	r3, [r5, #296]
	str	r3, [r4, #168]
	bl	kfree
	ldrh	r3, [r7, #-222]
	tst	r3, #4
	bne	.L21074
.L21040:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r5, [r3, #3988]
	cmp	r5, #0
	movne	r5, #0
	streq	r4, [r3, #3988]
.L21020:
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L21042:
	mov	r5, #16
	b	.L21027
.L21047:
	mov	r5, #16
	b	.L21034
.L21045:
	mov	r1, #0
.L21030:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L21031
.L21043:
	mov	r1, #0
.L21028:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L21029
.L21067:
	movw	r0, #:lower16:.LC1458
	ldr	r1, .L21075
	movt	r0, #:upper16:.LC1458
	ldr	r2, [r6, #-904]
	bl	printk
	mov	r3, #0
	cmp	r5, #0
	str	r3, [r4, #92]
	beq	.L21040
	b	.L21022
.L21048:
	mov	r1, #0
.L21036:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L21037
.L21050:
	mov	r1, #0
.L21038:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L21039
.L21068:
	movw	r0, #:lower16:.LC1459
	ldr	r1, .L21075
	mvn	r5, #21
	movt	r0, #:upper16:.LC1459
	ldr	r2, [r6, #-900]
	bl	printk
	mov	r3, #0
	str	r3, [r4, #120]
.L21022:
	movw	r0, #:lower16:.LC1464
	ldr	r1, .L21075+4
	movt	r0, #:upper16:.LC1464
	bl	printk
	b	.L21020
.L21069:
	movw	r1, #:lower16:.LC1460
	sub	r0, r7, #288
	ldr	r2, .L21075
	movt	r1, #:upper16:.LC1460
	ldr	r3, [r6, #-900]
	bl	__dynamic_pr_debug
	ldr	r0, [r4, #120]
	b	.L21026
.L21072:
	movw	r0, #:lower16:.LC1462
	ldr	r1, .L21075
	mvn	r5, #21
	movt	r0, #:upper16:.LC1462
	ldr	r2, [r6, #-896]
	bl	printk
	mov	r3, #0
	str	r3, [r4, #144]
	str	r3, [r4, #148]
	str	r3, [r4, #152]
	b	.L21022
.L21071:
	ldr	r3, [r4, #128]
	movw	r1, #:lower16:.LC747
	ldr	ip, [r4, #140]
	movt	r1, #:upper16:.LC747
	ldr	r2, .L21075+8
	ldr	r0, .L21075+12
	str	ip, [sp, #8]
	ldr	ip, [r4, #136]
	str	ip, [sp, #4]
	ldr	ip, [r4, #132]
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L21032
.L21074:
	ldr	r3, [r4, #156]
	movw	r1, #:lower16:.LC755
	ldr	ip, [r4, #168]
	movt	r1, #:upper16:.LC755
	ldr	r2, .L21075+16
	ldr	r0, .L21075+20
	str	ip, [sp, #8]
	ldr	ip, [r4, #164]
	str	ip, [sp, #4]
	ldr	ip, [r4, #160]
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L21040
.L21070:
	movw	r0, #:lower16:.LC1461
	mvn	r2, #11
	ldr	r1, .L21075
	movt	r0, #:upper16:.LC1461
	mov	r5, r2
	bl	printk
	b	.L21022
.L21073:
	movw	r0, #:lower16:.LC1463
	mvn	r2, #11
	ldr	r1, .L21075
	movt	r0, #:upper16:.LC1463
	mov	r5, r2
	bl	printk
	b	.L21022
.L21066:
	ldr	r2, .L21075
	movw	r0, #:lower16:.LC742
	mvn	r5, #18
	movt	r0, #:upper16:.LC742
	mov	r1, r2
	bl	printk
	b	.L21022
.L21076:
	.align	2
.L21075:
	.word	.LANCHOR5+3576
	.word	.LANCHOR5+3652
	.word	.LANCHOR5+3596
	.word	.LANCHOR8-264
	.word	.LANCHOR5+3624
	.word	.LANCHOR8-240
	.fnend
	.size	gaudio_setup, .-gaudio_setup
	.align	2
	.global	gaudio_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gaudio_cleanup, %function
gaudio_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r5, [r4, #3988]
	str	lr, [sp, #12]
	cmp	r5, #0
	beq	.L21077
	movw	r0, #:lower16:.LANCHOR8
	movt	r0, #:upper16:.LANCHOR8
	ldrh	r3, [r0, #-198]
	tst	r3, #4
	bne	.L21099
.L21079:
	ldr	r0, [r5, #92]
	cmp	r0, #0
	beq	.L21080
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #1024]
	bl	filp_close
.L21080:
	ldr	r0, [r5, #120]
	cmp	r0, #0
	beq	.L21081
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #1024]
	bl	filp_close
.L21081:
	ldr	r0, [r5, #148]
	cmp	r0, #0
	beq	.L21082
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #1024]
	bl	filp_close
.L21082:
	mov	r3, #0
	str	r3, [r4, #3988]
.L21077:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L21099:
	movw	r1, #:lower16:.LC1465
	ldr	r2, .L21100
	sub	r0, r0, #216
	movt	r1, #:upper16:.LC1465
	bl	__dynamic_pr_debug
	b	.L21079
.L21101:
	.align	2
.L21100:
	.word	.LANCHOR5+3668
	.fnend
	.size	gaudio_cleanup, .-gaudio_cleanup
	.align	2
	.global	control_selector_init
	.syntax unified
	.arm
	.fpu softvfp
	.type	control_selector_init, %function
control_selector_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	movw	r4, #:lower16:.LANCHOR7
	movt	r4, #:upper16:.LANCHOR7
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	add	r8, r5, #252
	sub	r0, r4, #892
	str	lr, [sp, #20]
	mov	r2, r8
	mov	r1, r8
	str	r8, [r5, #252]
	sub	r6, r4, #884
	sub	r7, r4, #852
	str	r8, [r5, #256]
	bl	__list_add
	mov	r1, r8
	sub	r0, r4, #860
	ldr	r2, [r5, #252]
	bl	__list_add
	mov	r2, r6
	mov	r1, r6
	str	r6, [r4, #-884]
	sub	r0, r4, #828
	str	r6, [r4, #-880]
	add	r8, r5, #260
	bl	__list_add
	mov	r1, r6
	sub	r0, r4, #784
	ldr	r2, [r4, #-884]
	bl	__list_add
	mov	r2, r7
	mov	r1, r7
	str	r7, [r4, #-852]
	sub	r0, r4, #740
	str	r7, [r4, #-848]
	sub	r6, r4, #4000
	bl	__list_add
	mov	r1, r7
	sub	r0, r4, #696
	ldr	r2, [r4, #-852]
	bl	__list_add
	movw	r2, #65472
	movw	r1, #58272
	str	r8, [r5, #260]
	movw	ip, #65520
	mov	r3, #48
	str	r8, [r5, #264]
	sub	r7, r4, #4032
	sub	r0, r6, #4
	str	r2, [r4, #-764]
	str	r1, [r4, #-760]
	add	r6, r6, #4
	str	ip, [r4, #-756]
	str	r2, [r4, #-676]
	mov	r2, r8
	str	r1, [r4, #-672]
	mov	r1, r8
	str	r3, [r4, #-752]
	str	ip, [r4, #-668]
	str	r3, [r4, #-664]
	bl	__list_add
	mov	r1, r8
	sub	r0, r7, #4
	ldr	r2, [r5, #260]
	add	r7, r7, #4
	bl	__list_add
	sub	r0, r4, #652
	mov	r2, r7
	str	r7, [r4, #-4028]
	mov	r1, r7
	str	r7, [r4, #-4024]
	bl	__list_add
	sub	r0, r4, #608
	mov	r2, r6
	str	r6, [r4, #-3996]
	mov	r1, r6
	str	r6, [r4, #-3992]
	bl	__list_add
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	control_selector_init, .-control_selector_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_function_bind_config, %function
audio_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L21113
	mov	r2, #276
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L21134
.L21105:
	ldr	ip, [r5, #24]
	movw	r1, #:lower16:.LC1466
	movw	r3, #:lower16:f_audio_bind
	ldr	r0, .L21137
	movt	r1, #:upper16:.LC1466
	movw	r2, #:lower16:f_audio_unbind
	movt	r3, #:upper16:f_audio_bind
	movt	r2, #:upper16:f_audio_unbind
	add	lr, r4, #204
	ldr	r6, [ip]
	str	r1, [r4]
	movw	r1, #:lower16:f_audio_get_alt
	str	r0, [r4, #4]
	movw	r0, #:lower16:f_audio_set_alt
	movt	r1, #:upper16:f_audio_get_alt
	movt	r0, #:upper16:f_audio_set_alt
	str	r3, [r4, #32]
	movw	r3, #:lower16:f_audio_setup
	str	r2, [r4, #36]
	movw	r2, #:lower16:f_audio_disable
	mov	ip, #0
	movt	r3, #:upper16:f_audio_setup
	movt	r2, #:upper16:f_audio_disable
	strd	r0, [r4, #40]
	add	r1, r4, #236
	mov	r0, r4
	strd	r2, [r4, #48]
	str	r6, [r4, #84]
	str	ip, [r4, #180]
	str	lr, [r4, #204]
	str	lr, [r4, #208]
	str	ip, [r4, #212]
	str	r1, [r4, #236]
	str	r1, [r4, #240]
	bl	control_selector_init
	mov	r2, #65024
	movw	r1, #:lower16:f_audio_playback_work
	movw	r3, #:lower16:f_audio_capture_work
	movt	r2, 65535
	add	r0, r4, #192
	add	ip, r4, #224
	movt	r1, #:upper16:f_audio_playback_work
	movt	r3, #:upper16:f_audio_capture_work
	str	r2, [r4, #188]
	str	r0, [r4, #192]
	strd	r0, [r4, #196]
	mov	r0, r4
	str	r2, [r4, #220]
	str	ip, [r4, #224]
	str	ip, [r4, #228]
	str	r3, [r4, #232]
	bl	gaudio_setup
	subs	r6, r0, #0
	bge	.L21135
.L21107:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r7, [r5, #3988]
	cmp	r7, #0
	beq	.L21108
	movw	r0, #:lower16:.LANCHOR8
	movt	r0, #:upper16:.LANCHOR8
	ldrh	r3, [r0, #-198]
	tst	r3, #4
	bne	.L21136
.L21109:
	ldr	r0, [r7, #92]
	cmp	r0, #0
	beq	.L21110
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #1024]
	bl	filp_close
.L21110:
	ldr	r0, [r7, #120]
	cmp	r0, #0
	beq	.L21111
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #1024]
	bl	filp_close
.L21111:
	ldr	r0, [r7, #148]
	cmp	r0, #0
	beq	.L21112
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #1024]
	bl	filp_close
.L21112:
	mov	r3, #0
	str	r3, [r5, #3988]
.L21108:
	mov	r0, r4
	bl	kfree
.L21104:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L21135:
	mov	r0, r5
	mov	r1, r4
	bl	usb_add_function
	subs	r6, r0, #0
	beq	.L21104
	ldr	r2, .L21137+4
	movw	r0, #:lower16:.LC1467
	mov	r3, r6
	movt	r0, #:upper16:.LC1467
	mov	r1, r2
	bl	printk
	b	.L21108
.L21113:
	mov	r4, #16
	b	.L21105
.L21136:
	movw	r1, #:lower16:.LC1465
	ldr	r2, .L21137+8
	sub	r0, r0, #216
	movt	r1, #:upper16:.LC1465
	bl	__dynamic_pr_debug
	b	.L21109
.L21134:
	mvn	r6, #11
	b	.L21104
.L21138:
	.align	2
.L21137:
	.word	.LANCHOR7-564
	.word	.LANCHOR5+3692
	.word	.LANCHOR5+3668
	.fnend
	.size	audio_function_bind_config, .-audio_function_bind_config
	.align	2
	.global	audio_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_bind_config, %function
audio_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L21148
	mov	r2, #276
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L21169
.L21140:
	ldr	ip, [r5, #24]
	movw	r1, #:lower16:.LC1466
	movw	r3, #:lower16:f_audio_bind
	ldr	r0, .L21172
	movt	r1, #:upper16:.LC1466
	movw	r2, #:lower16:f_audio_unbind
	movt	r3, #:upper16:f_audio_bind
	movt	r2, #:upper16:f_audio_unbind
	add	lr, r4, #204
	ldr	r6, [ip]
	str	r1, [r4]
	movw	r1, #:lower16:f_audio_get_alt
	str	r0, [r4, #4]
	movw	r0, #:lower16:f_audio_set_alt
	movt	r1, #:upper16:f_audio_get_alt
	movt	r0, #:upper16:f_audio_set_alt
	str	r3, [r4, #32]
	movw	r3, #:lower16:f_audio_setup
	str	r2, [r4, #36]
	movw	r2, #:lower16:f_audio_disable
	mov	ip, #0
	movt	r3, #:upper16:f_audio_setup
	movt	r2, #:upper16:f_audio_disable
	strd	r0, [r4, #40]
	add	r1, r4, #236
	mov	r0, r4
	strd	r2, [r4, #48]
	str	r6, [r4, #84]
	str	ip, [r4, #180]
	str	lr, [r4, #204]
	str	lr, [r4, #208]
	str	ip, [r4, #212]
	str	r1, [r4, #236]
	str	r1, [r4, #240]
	bl	control_selector_init
	mov	r2, #65024
	movw	r1, #:lower16:f_audio_playback_work
	movw	r3, #:lower16:f_audio_capture_work
	movt	r2, 65535
	add	r0, r4, #192
	add	ip, r4, #224
	movt	r1, #:upper16:f_audio_playback_work
	movt	r3, #:upper16:f_audio_capture_work
	str	r2, [r4, #188]
	str	r0, [r4, #192]
	strd	r0, [r4, #196]
	mov	r0, r4
	str	r2, [r4, #220]
	str	ip, [r4, #224]
	str	ip, [r4, #228]
	str	r3, [r4, #232]
	bl	gaudio_setup
	subs	r6, r0, #0
	bge	.L21170
.L21142:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r7, [r5, #3988]
	cmp	r7, #0
	beq	.L21143
	movw	r0, #:lower16:.LANCHOR8
	movt	r0, #:upper16:.LANCHOR8
	ldrh	r3, [r0, #-198]
	tst	r3, #4
	bne	.L21171
.L21144:
	ldr	r0, [r7, #92]
	cmp	r0, #0
	beq	.L21145
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #1024]
	bl	filp_close
.L21145:
	ldr	r0, [r7, #120]
	cmp	r0, #0
	beq	.L21146
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #1024]
	bl	filp_close
.L21146:
	ldr	r0, [r7, #148]
	cmp	r0, #0
	beq	.L21147
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #1024]
	bl	filp_close
.L21147:
	mov	r3, #0
	str	r3, [r5, #3988]
.L21143:
	mov	r0, r4
	bl	kfree
.L21139:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L21170:
	mov	r0, r5
	mov	r1, r4
	bl	usb_add_function
	subs	r6, r0, #0
	beq	.L21139
	ldr	r2, .L21172+4
	movw	r0, #:lower16:.LC1467
	mov	r3, r6
	movt	r0, #:upper16:.LC1467
	mov	r1, r2
	bl	printk
	b	.L21143
.L21148:
	mov	r4, #16
	b	.L21140
.L21171:
	movw	r1, #:lower16:.LC1465
	ldr	r2, .L21172+8
	sub	r0, r0, #216
	movt	r1, #:upper16:.LC1465
	bl	__dynamic_pr_debug
	b	.L21144
.L21169:
	mvn	r6, #11
	b	.L21139
.L21173:
	.align	2
.L21172:
	.word	.LANCHOR7-564
	.word	.LANCHOR5+3692
	.word	.LANCHOR5+3668
	.fnend
	.size	audio_bind_config, .-audio_bind_config
	.align	2
	.global	conn_gadget_req_put
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_req_put, %function
conn_gadget_req_put:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r4, r0, #88
	mov	r0, r4
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	mov	r6, r2
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	ldr	r1, [r7, #4]
	add	r0, r6, #36
	mov	r2, r7
	bl	__list_add
	ldrd	r6, [sp, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	conn_gadget_req_put, .-conn_gadget_req_put
	.align	2
	.global	conn_gadget_req_get
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_req_get, %function
conn_gadget_req_get:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #88
	mov	r4, r1
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4]
	mov	r6, r0
	cmp	r4, r3
	beq	.L21178
	mov	r0, r3
	sub	r4, r3, #36
	bl	list_del
.L21177:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L21178:
	mov	r4, #0
	b	.L21177
	.fnend
	.size	conn_gadget_req_get, .-conn_gadget_req_get
	.align	2
	.global	conn_gadget_req_move
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_req_move, %function
conn_gadget_req_move:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r5, r0, #88
	add	r4, r3, #36
	mov	r0, r5
	strd	r6, [sp, #8]
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r0, r4
	bl	__list_del_entry
	mov	r0, r4
	ldr	r1, [r7, #4]
	mov	r2, r7
	bl	__list_add
	ldr	r8, [sp, #16]
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	conn_gadget_req_move, .-conn_gadget_req_move
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_complete_out, %function
conn_gadget_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r5, r1
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r4, [r3, #2484]
	.pad #12
	sub	sp, sp, #12
	ldr	r1, [r1, #44]
	ldr	r3, [r4, #192]
	ldr	r2, [r4, #196]
	cmp	r1, #0
	add	r3, r3, r3, lsl #2
	sub	r6, r2, r3
	bne	.L21194
	add	r0, r4, #168
	ldr	r1, [r5]
	ldr	r2, [r5, #48]
	bl	__kfifo_in
	ldr	r3, [r4, #168]
	ldr	r2, [r4, #172]
	sub	r3, r3, r2
	cmp	r6, r3
	bls	.L21195
	ldr	r0, [r4, #96]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	blt	.L21196
.L21187:
	add	r0, r4, #144
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	__wake_up
.L21195:
	add	r6, r4, #88
	add	r5, r5, #36
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	mov	r0, r5
	bl	__list_del_entry
	mov	r0, r5
	ldr	r1, [r4, #132]
	add	r2, r4, #128
	bl	__list_add
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L21187
.L21196:
	movw	r0, #:lower16:.LC974
	ldr	r1, .L21198
	mov	r2, r5
	movt	r0, #:upper16:.LC974
	bl	printk
.L21193:
	mov	r3, r5
	add	r2, r4, #128
	add	r1, r4, #136
	mov	r0, r4
	bl	conn_gadget_req_move
	b	.L21187
.L21194:
	cmn	r1, #104
	beq	.L21185
	movw	r0, #:lower16:.LANCHOR8
	mov	r2, #1
	movt	r0, #:upper16:.LANCHOR8
	ldrh	r3, [r0, #-174]
	str	r2, [r4, #104]
	tst	r3, #4
	bne	.L21197
.L21185:
	movw	r0, #:lower16:.LC767
	ldr	r1, .L21198
	ldr	r2, [r5, #44]
	movt	r0, #:upper16:.LC767
	bl	printk
	b	.L21193
.L21197:
	ldr	r3, .L21198
	movw	r1, #:lower16:.LC233
	str	r2, [sp]
	movt	r1, #:upper16:.LC233
	sub	r0, r0, #192
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L21185
.L21199:
	.align	2
.L21198:
	.word	.LANCHOR5+3712
	.fnend
	.size	conn_gadget_complete_out, .-conn_gadget_complete_out
	.align	2
	.global	conn_gadget_empty
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_empty, %function
conn_gadget_empty:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	add	r6, r0, #88
	mov	r0, r6
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5]
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	sub	r4, r4, r5
	clz	r4, r4
	lsr	r4, r4, #5
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	conn_gadget_empty, .-conn_gadget_empty
	.align	2
	.global	ncm_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_bind_config, %function
ncm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	movw	r0, #:lower16:.LC472
	strd	r8, [sp, #16]
	mov	r6, r1
	movt	r0, #:upper16:.LC472
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r7, #24]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r4]
	ldr	r5, [r3, #28]
	mov	r1, r5
	bl	strcmp
	cmp	r0, #0
	beq	.L21217
	movw	r0, #:lower16:.LC475
	mov	r1, r5
	movt	r0, #:upper16:.LC475
	bl	strcmp
	cmp	r0, #0
	cmpne	r6, #0
	beq	.L21217
	movw	r5, #:lower16:.LANCHOR0
	movt	r5, #:upper16:.LANCHOR0
	ldrb	r3, [r5, #1456]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L21204
	ldrb	r3, [r4, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L21206
	add	r3, r3, #1
	movw	r2, #:lower16:.LANCHOR7
	uxtb	r3, r3
	movt	r2, #:upper16:.LANCHOR7
	strb	r3, [r4, #48]
	ldr	r1, [r7, #24]
	strb	r3, [r2, #-3880]
	strb	r3, [r5, #1456]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L21206
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	ldr	r1, [r7, #24]
	strb	r3, [r2, #-3860]
	strb	r3, [r2, #-3848]
	strb	r3, [r5, #1472]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L21206
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	ldr	r1, [r7, #24]
	strb	r3, [r2, #-553]
	strb	r3, [r5, #1464]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L21206
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	strb	r3, [r2, #-3889]
	strb	r3, [r5, #1480]
.L21204:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L21218
	mov	r2, #192
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L21244
.L21207:
	ldrb	lr, [r6, #2]	@ zero_extendqisi2
	add	r8, r4, #150
	movw	r2, #:lower16:.LC1402
	ldrb	ip, [r6, #1]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC1402
	mov	r0, r8
	ldrb	fp, [r6, #5]	@ zero_extendqisi2
	mov	r1, #14
	ldrb	r10, [r6, #4]	@ zero_extendqisi2
	ldrb	r9, [r6, #3]	@ zero_extendqisi2
	ldrb	r3, [r6]	@ zero_extendqisi2
	stm	sp, {ip, lr}
	movw	r6, #:lower16:.LANCHOR4
	movt	r6, #:upper16:.LANCHOR4
	str	r9, [sp, #8]
	strd	r10, [sp, #12]
	bl	snprintf
	ldr	r1, .L21247
	movw	r0, #:lower16:ncm_unbind
	mov	r2, #0
	ldr	lr, .L21247+4
	movt	r0, #:upper16:ncm_unbind
	str	r8, [r5, #1468]
	movw	ip, #:lower16:ncm_bind
	mov	r8, #15
	movt	ip, #:upper16:ncm_bind
	movw	r3, #:lower16:.LC791
	strh	r8, [r4, #98]	@ movhi
	movt	r3, #:upper16:.LC791
	str	r1, [r4, #176]
	movw	r1, #:lower16:ncm_set_alt
	movt	r1, #:upper16:ncm_set_alt
	str	r2, [r4, #100]
	strb	r2, [r4, #180]
	str	r2, [r4, #188]
	ldr	r8, [r5, #36]
	stm	r4, {r3, lr}
	strd	r0, [r4, #36]
	movw	r1, #:lower16:ncm_get_alt
	movw	r0, #:lower16:ncm_disable
	str	ip, [r4, #32]
	movt	r1, #:upper16:ncm_get_alt
	movw	ip, #1386
	ldrh	lr, [r6, ip]
	movw	ip, #:lower16:ncm_setup
	movt	r0, #:upper16:ncm_disable
	str	r1, [r4, #44]
	movw	r1, #:lower16:ncm_wrap_ntb
	movt	ip, #:upper16:ncm_setup
	movt	r1, #:upper16:ncm_wrap_ntb
	str	r0, [r4, #48]
	movw	r0, #9014
	str	r2, [r4, #184]
	movw	r2, #:lower16:ncm_unwrap_ntb
	movt	r2, #:upper16:ncm_unwrap_ntb
	str	ip, [r4, #52]
	tst	lr, #4
	mov	ip, #16384
	str	r8, [r4, #108]
	str	r1, [r4, #128]
	mov	r1, #1
	strb	r1, [r4, #104]
	str	ip, [r4, #112]
	str	r2, [r4, #132]
	strh	r0, [r4, #182]	@ movhi
	bne	.L21245
.L21208:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L21211
	add	r9, r4, #72
	str	r7, [r4, #20]
	add	r2, r7, #36
	mov	r0, r9
	ldr	r1, [r7, #40]
	bl	__list_add
	ldr	r8, [r4, #32]
	cmp	r8, #0
	beq	.L21212
	mov	r1, r4
	mov	r0, r7
	blx	r8
	subs	r8, r0, #0
	blt	.L21246
.L21212:
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L21213
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L21213
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r7, #45]
.L21213:
	tst	r3, #2
	bne	.L21214
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L21214
	ldrb	r2, [r7, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r7, #45]
.L21214:
	tst	r3, #1
	bne	.L21215
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L21215
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r7, #45]
.L21215:
	cmp	r8, #0
	beq	.L21202
	movw	r3, #1410
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L21210
	b	.L21209
.L21245:
	ldr	ip, [r7]
	movw	r2, #:lower16:.LC924
	ldr	r1, [r7, #24]
	movt	r2, #:upper16:.LC924
	ldr	r0, .L21247+8
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r7, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L21208
.L21211:
	movw	r3, #1410
	mvn	r8, #21
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L21210
.L21209:
	ldr	r1, [r7, #24]
	movw	r2, #:lower16:.LC925
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC925
	ldr	r0, .L21247+12
	ldr	r1, [r1]
	stm	sp, {r4, r8}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L21210:
	mov	r3, #0
	mov	r0, r4
	str	r3, [r5, #1468]
	bl	kfree
.L21202:
	mov	r0, r8
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L21218:
	mov	r4, #16
	b	.L21207
.L21246:
	mov	r0, r9
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L21212
.L21217:
	mvn	r8, #21
	b	.L21202
.L21206:
	mvn	r8, #18
	b	.L21202
.L21244:
	mvn	r8, #11
	b	.L21202
.L21248:
	.align	2
.L21247:
	.word	.LANCHOR0+48
	.word	.LANCHOR7-540
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.fnend
	.size	ncm_bind_config, .-ncm_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_function_bind_config, %function
ncm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #4]
	.pad #16
	sub	sp, sp, #16
	cmp	r4, #0
	beq	.L21250
	mov	r3, #0
	mov	r2, #2
	ldr	r0, .L21261
	movw	lr, #52429
	mov	r5, r1
	str	r2, [r4]	@ unaligned
	movt	lr, 52428
	mov	r2, r3
	strb	r3, [r4, #4]
	strb	r3, [r4, #5]
	b	.L21251
.L21255:
	sub	r3, r2, r3
	add	r2, r2, #1
	add	r3, r3, #1
	cmp	r2, #256
	ldrb	ip, [r4, r3]	@ zero_extendqisi2
	eor	r1, r1, ip
	strb	r1, [r4, r3]
	beq	.L21256
.L21251:
	umull	r1, r3, lr, r2
	ldrb	r1, [r0], #1	@ zero_extendqisi2
	lsr	r3, r3, #2
	cmp	r1, #0
	add	r3, r3, r3, lsl #2
	bne	.L21255
.L21256:
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1469
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC1469
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldr	r1, .L21261+4
	str	ip, [sp, #12]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1470
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC1470
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldr	r1, .L21261+4
	str	ip, [sp, #12]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldr	r3, [r5, #24]
	movw	r2, #:lower16:.LC791
	mov	r1, r4
	movt	r2, #:upper16:.LC791
	ldr	r0, [r3]
	bl	gether_setup_name
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	mov	r6, r0
	movw	r0, #:lower16:.LC1471
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC1471
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldr	r1, .L21261+4
	str	ip, [sp, #12]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	cmp	r6, #0
	bne	.L21260
	mov	r1, r4
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	ncm_bind_config
.L21250:
	ldr	r2, .L21261+4
	movw	r0, #:lower16:.LC1468
	mvn	r6, #0
	movt	r0, #:upper16:.LC1468
	mov	r1, r2
	bl	printk
.L21249:
	mov	r0, r6
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L21260:
	ldr	r2, .L21261+4
	movw	r0, #:lower16:.LC1187
	movt	r0, #:upper16:.LC1187
	mov	r1, r2
	bl	printk
	b	.L21249
.L21262:
	.align	2
.L21261:
	.word	.LANCHOR1+2220
	.word	.LANCHOR5+3740
	.fnend
	.size	ncm_function_bind_config, .-ncm_function_bind_config
	.align	2
	.global	is_ncm_ready
	.syntax unified
	.arm
	.fpu softvfp
	.type	is_ncm_ready, %function
is_ncm_ready:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC1179
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r1, #:upper16:.LC1179
	str	lr, [sp, #4]
	bl	strcmp
	cmp	r0, #0
	beq	.L21264
	movw	r1, #:lower16:.LC791
	mov	r0, r4
	movt	r1, #:upper16:.LC791
	bl	strcmp
	cmp	r0, #0
	movne	r0, #0
	bne	.L21265
.L21264:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldrb	r0, [r3, #3636]	@ zero_extendqisi2
	cmp	r0, #0
	bne	.L21272
.L21265:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L21272:
	movw	r0, #:lower16:.LC1472
	mov	r2, r4
	ldr	r1, .L21273
	movt	r0, #:upper16:.LC1472
	bl	printk
	mov	r0, #1
	b	.L21265
.L21274:
	.align	2
.L21273:
	.word	.LANCHOR5+3768
	.fnend
	.size	is_ncm_ready, .-is_ncm_ready
	.align	2
	.global	set_ncm_device_descriptor
	.syntax unified
	.arm
	.fpu softvfp
	.type	set_ncm_device_descriptor, %function
set_ncm_device_descriptor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {lr}
	str	lr, [sp, #-4]!
	mov	ip, r0
	mov	r2, #2
	mov	r3, #93
	mov	lr, #104
	ldr	r1, .L21277
	strb	r2, [ip, #4]
	movw	r0, #:lower16:.LC1473
	strb	r3, [ip, #10]
	movt	r0, #:upper16:.LC1473
	mov	r3, r2
	strb	lr, [ip, #11]
	movw	r2, #26717
	ldr	lr, [sp], #4
	b	printk
.L21278:
	.align	2
.L21277:
	.word	.LANCHOR5+3784
	.fnend
	.size	set_ncm_device_descriptor, .-set_ncm_device_descriptor
	.align	2
	.global	set_ncm_ready
	.syntax unified
	.arm
	.fpu softvfp
	.type	set_ncm_ready, %function
set_ncm_ready:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r0
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldrb	r2, [r4, #3636]	@ zero_extendqisi2
	str	lr, [sp, #12]
	cmp	r2, r0
	bne	.L21283
.L21280:
	cmp	r5, #0
	bne	.L21279
	movw	r2, #3660
	movw	r3, #3662
	strh	r5, [r4, r2]	@ movhi
	strh	r5, [r4, r3]	@ movhi
.L21279:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L21283:
	movw	r0, #:lower16:.LC796
	mov	r3, r5
	ldr	r1, .L21284
	movt	r0, #:upper16:.LC796
	bl	printk
	movw	r3, #:lower16:system_wq
	ldr	r2, [r4, #3612]
	mov	r0, #4
	movt	r3, #:upper16:system_wq
	strb	r5, [r4, #3636]
	ldr	r1, [r3]
	bl	queue_work_on
	b	.L21280
.L21285:
	.align	2
.L21284:
	.word	.LANCHOR5-1908
	.fnend
	.size	set_ncm_ready, .-set_ncm_ready
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_setup, %function
android_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r4, r3
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	stmib	sp, {r0, r3}
	add	r0, r0, #32
	bl	dev_get_drvdata
	ldr	r3, [r4, #3308]
	mov	r6, r0
	ldr	r2, .L21402
	sub	r9, r3, #520
	cmp	r3, r2
	bne	.L21289
	b	.L21287
.L21386:
	ldr	r3, [r9, #520]
	cmp	r3, r2
	sub	r9, r3, #520
	beq	.L21287
.L21289:
	ldr	r3, [r3, #-512]
	cmp	r6, r3
	bne	.L21386
.L21287:
	ldr	r3, [r6, #4]
	movw	r2, #:lower16:composite_setup_complete
	mov	r0, #0
	movt	r2, #:upper16:composite_setup_complete
	mov	r10, r9
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	str	r0, [r3, #4]
	str	r2, [r3, #28]
	bfc	r1, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [sp, #4]
	ldr	r3, [r3, #4]
	str	r6, [r3]
	ldr	r8, [r10, #508]!
	cmp	r10, r8
	sub	r8, r8, #120
	beq	.L21290
	mvn	fp, #94
.L21294:
	mov	r5, r8
	ldr	r4, [r5, #112]!
	cmp	r5, r4
	sub	r4, r4, #4
	bne	.L21293
	b	.L21291
.L21292:
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L21291
.L21293:
	ldr	r0, [r4]
	mov	r2, r7
	mov	r1, r6
	ldr	r3, [r0, #48]
	cmp	r3, #0
	beq	.L21292
	blx	r3
	subs	fp, r0, #0
	blt	.L21292
.L21291:
	ldr	r8, [r8, #120]
	cmp	r10, r8
	sub	r8, r8, #120
	bne	.L21294
	ldr	r4, [r6, #12]
	adds	r4, r4, #0
	movne	r4, #1
	cmp	fp, #0
	blt	.L21296
.L21297:
	add	r5, r6, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r9, #48]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L21339
	mov	r3, #1
	mov	r1, r0
	mov	r0, r5
	strb	r3, [r9, #48]
	bl	_raw_spin_unlock_irqrestore
.L21340:
	movw	r3, #:lower16:system_wq
	add	r2, r9, #180
	movt	r3, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r3]
	bl	queue_work_on
.L21286:
	mov	r0, fp
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L21339:
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	mov	r1, r0
	mov	r0, r5
	cmp	r3, #9
	beq	.L21387
.L21385:
	bl	_raw_spin_unlock_irqrestore
	b	.L21286
.L21290:
	ldr	r4, [r6, #12]
	adds	r4, r4, #0
	movne	r4, #1
.L21296:
	ldrb	r2, [r7]	@ zero_extendqisi2
	ldrh	ip, [r7, #4]	@ unaligned
	ldrh	r1, [r7, #2]	@ unaligned
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	and	r0, r2, #96
	cmp	r0, #64
	uxth	r8, ip
	uxth	r10, r1
	bne	.L21298
	cmp	r3, #240
	beq	.L21388
.L21298:
	ldr	r1, [sp, #8]
	cmp	r2, #64
	ldr	r5, [r1, #2488]
	beq	.L21389
	cmp	r3, #51
	cmpeq	r2, #192
	bne	.L21306
	ldr	r3, [r6, #4]
	mov	r8, #2
	mov	r1, #256
	add	r0, r5, #101
	ldr	r3, [r3]
	strh	r8, [r3]	@ movhi
	bl	__memzero
	add	r0, r5, #356
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r5, #612
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r5, #868
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r5, #1120
	mov	r1, #256
	add	r0, r0, #5
	bl	__memzero
	add	r0, r5, #1376
	mov	r1, #256
	add	r0, r0, #5
	bl	__memzero
	mov	r3, #0
	str	r3, [r5, #1644]
	str	r3, [r5, #1648]
.L21301:
	ldr	r3, [r6, #4]
	mov	r2, #32
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfc	r1, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r6, #4]
	str	r8, [r3, #4]
	ldr	r3, [r6]
	ldr	r1, [r6, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	fp, r0, #0
	bge	.L21297
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC1047
	movt	r1, #:upper16:.LC1047
	ldr	r2, .L21402+4
	add	r0, r0, #32
	bl	dev_err
.L21306:
	mov	r1, r7
	ldr	r0, [sp, #4]
	bl	composite_setup
	mov	fp, r0
	b	.L21297
.L21387:
	ldr	r3, [r6, #12]
	cmp	r3, #0
	beq	.L21385
	cmp	r4, #0
	bne	.L21385
	bl	_raw_spin_unlock_irqrestore
	b	.L21340
.L21389:
	cmp	r3, #53
	beq	.L21390
	ldrh	r2, [r7, #6]	@ unaligned
	cmp	r3, #52
	str	r2, [sp, #8]
	beq	.L21391
	mov	r1, r2
	cmp	r3, #58
	cmpeq	r8, #0
	moveq	r2, #1
	movne	r2, #0
	cmp	r1, #0
	movne	r2, #0
	cmp	r2, #0
	movne	r8, #0
	strne	r10, [r5, #1648]
	bne	.L21301
	cmp	r3, #54
	beq	.L21392
	cmp	r3, #55
	beq	.L21393
	cmp	r3, #56
	beq	.L21394
	cmp	r3, #57
	bne	.L21306
	add	r3, r5, #88
	add	r5, r5, #1760
	mov	r0, r3
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	fp, [r5, #8]
	add	r5, r5, #8
	mov	r1, r0
	ldr	r3, [sp, #12]
	cmp	r5, fp
	bne	.L21338
	b	.L21335
.L21395:
	ldr	fp, [fp]
	cmp	r5, fp
	beq	.L21335
.L21338:
	ldr	r2, [fp, #16]
	cmp	r10, r2
	bne	.L21395
	mov	r0, r3
	bl	_raw_spin_unlock_irqrestore
	cmp	fp, #0
	beq	.L21306
	ldr	r2, [r6, #4]
	movw	r3, #:lower16:acc_complete_send_hid_event
	ldr	r8, [sp, #8]
	movt	r3, #:upper16:acc_complete_send_hid_event
	str	fp, [r2, #32]
	ldr	r2, [r6, #4]
	str	r3, [r2, #28]
	b	.L21301
.L21391:
	str	r8, [r5, #1640]
	ldr	r2, [r6]
	movw	r3, #:lower16:acc_complete_set_string
	movt	r3, #:upper16:acc_complete_set_string
	ldr	r8, [sp, #8]
	ldr	r2, [r2, #4]
	str	r5, [r2]
	ldr	r2, [r6, #4]
	str	r3, [r2, #28]
	b	.L21301
.L21390:
	mov	r3, #1
	mov	r0, #200
	mov	r8, #0
	str	r3, [r5, #1644]
	bl	msecs_to_jiffies
	movw	r1, #:lower16:system_wq
	add	r2, r5, #1696
	movt	r1, #:upper16:system_wq
	mov	r3, r0
	add	r2, r2, #4
	ldr	r1, [r1]
	mov	r0, #4
	bl	queue_delayed_work_on
	b	.L21301
.L21335:
	mov	r0, r3
	bl	_raw_spin_unlock_irqrestore
	b	.L21306
.L21394:
	add	r3, r5, #88
	add	r5, r5, #1776
	mov	r0, r3
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	fp, [r5]
	mov	r1, r0
	ldr	r3, [sp, #12]
	cmp	r5, fp
	bne	.L21333
	b	.L21335
.L21396:
	ldr	fp, [fp]
	cmp	r5, fp
	beq	.L21335
.L21333:
	ldr	r2, [fp, #16]
	cmp	r10, r2
	bne	.L21396
	mov	r0, r3
	bl	_raw_spin_unlock_irqrestore
	cmp	fp, #0
	beq	.L21306
	ldr	r3, [fp, #28]
	cmp	r8, r3
	bne	.L21306
	ldr	r1, [sp, #8]
	ldr	r2, [fp, #24]
	add	r3, r1, r8
	cmp	r3, r2
	bgt	.L21306
	ldr	r2, [r6, #4]
	movw	r3, #:lower16:acc_complete_set_hid_report_desc
	mov	r8, r1
	movt	r3, #:upper16:acc_complete_set_hid_report_desc
	str	fp, [r2, #32]
	ldr	r2, [r6, #4]
	str	r3, [r2, #28]
	b	.L21301
.L21393:
	add	r8, r5, #88
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #1768]
	add	r2, r5, #1760
	mov	fp, r0
	add	r2, r2, #8
	cmp	r2, r3
	bne	.L21323
	b	.L21320
.L21397:
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L21320
.L21323:
	ldr	r1, [r3, #16]
	cmp	r10, r1
	bne	.L21397
	cmp	r3, #0
	beq	.L21320
.L21324:
	mov	r0, r3
	str	r3, [sp, #8]
	bl	__list_del_entry
	ldr	r3, [sp, #8]
	add	r1, r5, #1776
	add	r1, r1, #8
	ldr	r2, [r5, #1784]
	mov	r0, r3
	bl	__list_add
	mov	r1, fp
	mov	r0, r8
.L21384:
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:system_wq
	add	r2, r5, #1744
	movt	r3, #:upper16:system_wq
	add	r2, r2, #8
	ldr	r1, [r3]
	mov	r0, #4
	mov	r8, #0
	bl	queue_work_on
	b	.L21301
.L21392:
	cmp	r8, #0
	beq	.L21306
	add	fp, r5, #88
	mov	r0, fp
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #1768]
	add	r2, r5, #1760
	str	r0, [sp, #8]
	add	r2, r2, #8
	cmp	r2, r3
	bne	.L21310
	b	.L21307
.L21398:
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L21307
.L21310:
	ldr	r1, [r3, #16]
	cmp	r10, r1
	bne	.L21398
	cmp	r3, #0
	beq	.L21307
.L21311:
	mov	r0, r3
	str	r3, [sp, #12]
	bl	__list_del_entry
	ldr	r3, [sp, #12]
	add	r1, r5, #1776
	add	r1, r1, #8
	ldr	r2, [r5, #1784]
	mov	r0, r3
	bl	__list_add
.L21312:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L21346
	mov	r2, #32
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L21317
.L21316:
	movw	r1, #32800
	mov	r0, r8
	str	r3, [sp, #12]
	bl	__kmalloc
	ldr	r3, [sp, #12]
	cmp	r0, #0
	str	r0, [r3, #20]
	beq	.L21399
	mov	r1, r5
	mov	r0, r3
	str	r5, [r3, #12]
	str	r10, [r3, #16]
	str	r8, [r3, #24]
	ldr	r2, [r1, #1776]!
	bl	__list_add
	ldr	r1, [sp, #8]
	mov	r0, fp
	b	.L21384
.L21320:
	ldr	r3, [r5, #1776]
	add	r2, r5, #1776
	cmp	r2, r3
	bne	.L21328
	b	.L21325
.L21400:
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L21325
.L21328:
	ldr	r1, [r3, #16]
	cmp	r10, r1
	bne	.L21400
	cmp	r3, #0
	bne	.L21324
.L21325:
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L21306
.L21388:
	ldr	r10, [sp, #8]
	movw	r5, #3660
	movw	r8, #3662
	mov	r0, #1
	mov	fp, #0
	strh	ip, [r10, r8]	@ movhi
	strh	r1, [r10, r5]	@ movhi
	bl	set_ncm_ready
	movw	r0, #:lower16:.LC1474
	ldrh	r3, [r10, r8]
	ldrh	r2, [r10, r5]
	movt	r0, #:upper16:.LC1474
	ldr	r1, .L21402+8
	bl	printk
	ldr	r3, [r6, #4]
	mov	r2, #32
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfc	r1, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r6, #4]
	str	fp, [r3, #4]
	ldr	r3, [r6]
	ldr	r1, [r6, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, fp
	bge	.L21297
	movw	r0, #:lower16:.LC1475
	ldr	r1, .L21402+8
	movt	r0, #:upper16:.LC1475
	bl	printk
	b	.L21297
.L21307:
	ldr	r3, [r5, #1776]
	add	r2, r5, #1776
	cmp	r2, r3
	bne	.L21315
	b	.L21312
.L21401:
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L21312
.L21315:
	ldr	r1, [r3, #16]
	cmp	r10, r1
	bne	.L21401
	cmp	r3, #0
	beq	.L21312
	b	.L21311
.L21399:
	mov	r0, r3
	bl	kfree
.L21317:
	mov	r0, fp
	ldr	r1, [sp, #8]
	bl	_raw_spin_unlock_irqrestore
	b	.L21306
.L21346:
	mov	r3, #16
	b	.L21316
.L21403:
	.align	2
.L21402:
	.word	.LANCHOR1+3308
	.word	.LANCHOR5-152
	.word	.LANCHOR5+3812
	.fnend
	.size	android_setup, .-android_setup
	.align	2
	.global	schedule_usb_gadget_connect_work
	.syntax unified
	.arm
	.fpu softvfp
	.type	schedule_usb_gadget_connect_work, %function
schedule_usb_gadget_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LC896
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r2, #0
	movt	r3, #:upper16:.LC896
	str	r6, [sp, #8]
	cmp	r0, #0
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	str	r3, [sp]
	str	r2, [sp, #4]
	bne	.L21415
.L21404:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L21415:
	ldr	r6, .L21417
	mov	r4, r0
	movw	r0, #:lower16:.LC897
	add	r5, r4, #452
	movt	r0, #:upper16:.LC897
	mov	r2, r6
	mov	r1, r6
	bl	printk
	mov	r0, r5
	bl	work_busy
	cmp	r0, #0
	bne	.L21416
.L21406:
	ldr	r0, [r4, #12]
	mov	r2, sp
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env
	mov	r3, #0
	mov	r0, #1
	str	r3, [r4, #504]
	bl	msecs_to_jiffies
	movw	r1, #:lower16:system_wq
	mov	r3, r0
	movt	r1, #:upper16:system_wq
	mov	r2, r5
	ldr	r1, [r1]
	mov	r0, #4
	bl	queue_delayed_work_on
	b	.L21404
.L21416:
	mov	r0, r5
	bl	cancel_delayed_work
	movw	r0, #:lower16:.LC898
	mov	r2, r6
	mov	r1, r6
	movt	r0, #:upper16:.LC898
	bl	printk
	b	.L21406
.L21418:
	.align	2
.L21417:
	.word	.LANCHOR5-1560
	.fnend
	.size	schedule_usb_gadget_connect_work, .-schedule_usb_gadget_connect_work
	.global	terminal_mode_vendor_id
	.global	terminal_mode_version
	.global	diag_dload
	.global	conn_gadget_function
	.global	usb30en
	.global	speaker_output_terminal_desc
	.global	speaker_input_terminal_desc
	.global	uac1_ac_header_desc
	.global	uac1_ac_interface_desc
	.global	_rndis_qc
	.global	bam2bam_data_ports
	.global	rndis_ul_max_xfer_size_rcvd
	.global	rndis_ul_max_pkt_per_xfer_rcvd
	.global	mtp_ext_config_desc
	.global	mtp_tx_reqs
	.global	mtp_tx_req_len
	.global	mtp_rx_req_len
	.global	ghsuart_data_stats_ops
	.global	ghsuart_data_tx_intr_thld
	.global	ghsic_stats_ops
	.global	gdata_timestamp_ops
	.global	ghsic_data_tx_intr_thld
	.global	gctrl_dfile
	.global	gctrl_dent
	.global	gctrl_stats_ops
	.global	smd_ctrl_dfile
	.global	smd_ctrl_dent
	.global	gsmd_ctrl_stats_ops
	.global	online_clients
	.global	gbam_dent
	.global	gbam_stats_ops
	.global	bam2bam_ports
	.global	smd_pi
	.global	sport_info
	.global	gs_dent
	.global	debug_adb_ops
	.global	debug_rst_ops
	.global	dent_rmnet_mux
	.global	rmnet_mux_svlte_debug_stats_ops
	.global	debug_rmnet_sdio_stats_ops
	.global	sdio_rx_fctrl_dis_thld
	.global	sdio_rx_fctrl_en_thld
	.global	sdio_tx_pkt_drop_thld
	.global	dent_smd
	.global	rmnet_smd_debug_stats_ops
	.global	dent_diag
	.section	.rodata
	.align	3
	.set	.LANCHOR3,. + 0
	.set	.LANCHOR5,. + 8184
	.type	__func__.38520, %object
	.size	__func__.38520, 24
__func__.38520:
	.ascii	"usb_rmnet_mux_ctrl_open\000"
	.type	__func__.57143, %object
	.size	__func__.57143, 13
__func__.57143:
	.ascii	"ecm_qc_setup\000"
	.space	3
	.type	__func__.58190, %object
	.size	__func__.58190, 27
__func__.58190:
	.ascii	"rndis_qc_response_complete\000"
	.space	1
	.type	__func__.58182, %object
	.size	__func__.58182, 28
__func__.58182:
	.ascii	"rndis_qc_response_available\000"
	.type	__func__.62145, %object
	.size	__func__.62145, 21
__func__.62145:
	.ascii	"f_audio_buffer_alloc\000"
	.space	3
	.type	__func__.63454, %object
	.size	__func__.63454, 10
__func__.63454:
	.ascii	"ncm_setup\000"
	.space	2
	.type	__func__.63438, %object
	.size	__func__.63438, 22
__func__.63438:
	.ascii	"ncm_setdgram_complete\000"
	.space	2
	.type	__func__.64440, %object
	.size	__func__.64440, 23
__func__.64440:
	.ascii	"sua_version_info_store\000"
	.space	1
	.type	__func__.58326, %object
	.size	__func__.58326, 21
__func__.58326:
	.ascii	"rndis_qc_release_dev\000"
	.space	3
	.type	__func__.58316, %object
	.size	__func__.58316, 18
__func__.58316:
	.ascii	"rndis_qc_open_dev\000"
	.space	2
	.type	__func__.57679, %object
	.size	__func__.57679, 13
__func__.57679:
	.ascii	"mbim_release\000"
	.space	3
	.type	__func__.57671, %object
	.size	__func__.57671, 10
__func__.57671:
	.ascii	"mbim_open\000"
	.space	2
	.type	__func__.48405, %object
	.size	__func__.48405, 16
__func__.48405:
	.ascii	"gsdio_open_work\000"
	.type	__func__.64797, %object
	.size	__func__.64797, 11
__func__.64797:
	.ascii	"state_show\000"
	.space	1
	.type	__func__.64712, %object
	.size	__func__.64712, 12
__func__.64712:
	.ascii	"enable_show\000"
	.type	__func__.45750, %object
	.size	__func__.45750, 19
__func__.45750:
	.ascii	"start_out_transfer\000"
	.space	1
	.type	dirletter.46080, %object
	.size	dirletter.46080, 4
dirletter.46080:
	.byte	117
	.byte	111
	.byte	105
	.byte	110
	.type	__func__.64430, %object
	.size	__func__.64430, 22
__func__.64430:
	.ascii	"sua_version_info_show\000"
	.space	2
	.type	__func__.25499, %object
	.size	__func__.25499, 15
__func__.25499:
	.ascii	"composite_bind\000"
	.space	1
	.type	__func__.48612, %object
	.size	__func__.48612, 14
__func__.48612:
	.ascii	"gsmd_start_rx\000"
	.space	2
	.type	__func__.49323, %object
	.size	__func__.49323, 21
__func__.49323:
	.ascii	"gbam_stop_endless_rx\000"
	.space	3
	.type	__func__.49330, %object
	.size	__func__.49330, 21
__func__.49330:
	.ascii	"gbam_stop_endless_tx\000"
	.space	3
	.type	__func__.49437, %object
	.size	__func__.49437, 13
__func__.49437:
	.ascii	"gbam_wake_cb\000"
	.space	3
	.type	__func__.49282, %object
	.size	__func__.49282, 25
__func__.49282:
	.ascii	"gbam_endless_tx_complete\000"
	.space	3
	.type	__func__.49275, %object
	.size	__func__.49275, 25
__func__.49275:
	.ascii	"gbam_endless_rx_complete\000"
	.space	3
	.type	__func__.50984, %object
	.size	__func__.50984, 24
__func__.50984:
	.ascii	"ghsic_send_cpkt_tomodem\000"
	.type	__func__.51049, %object
	.size	__func__.51049, 18
__func__.51049:
	.ascii	"ghsic_ctrl_status\000"
	.space	2
	.type	__func__.51995, %object
	.size	__func__.51995, 26
__func__.51995:
	.ascii	"ghsuart_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.57486, %object
	.size	__func__.57486, 21
__func__.57486:
	.ascii	"mbim_ep0out_complete\000"
	.space	3
	.type	__func__.57783, %object
	.size	__func__.57783, 25
__func__.57783:
	.ascii	"bam_data_stop_endless_rx\000"
	.space	3
	.type	__func__.57790, %object
	.size	__func__.57790, 25
__func__.57790:
	.ascii	"bam_data_stop_endless_tx\000"
	.space	3
	.type	__func__.57762, %object
	.size	__func__.57762, 29
__func__.57762:
	.ascii	"bam_data_endless_tx_complete\000"
	.space	3
	.type	__func__.57755, %object
	.size	__func__.57755, 29
__func__.57755:
	.ascii	"bam_data_endless_rx_complete\000"
	.space	3
	.type	__func__.62401, %object
	.size	__func__.62401, 14
__func__.62401:
	.ascii	"f_audio_setup\000"
	.space	2
	.type	__func__.62254, %object
	.size	__func__.62254, 19
__func__.62254:
	.ascii	"audio_set_intf_req\000"
	.space	1
	.type	__func__.62285, %object
	.size	__func__.62285, 19
__func__.62285:
	.ascii	"audio_get_intf_req\000"
	.space	1
	.type	__func__.62323, %object
	.size	__func__.62323, 23
__func__.62323:
	.ascii	"audio_set_endpoint_req\000"
	.space	1
	.type	__func__.62365, %object
	.size	__func__.62365, 23
__func__.62365:
	.ascii	"audio_get_endpoint_req\000"
	.space	1
	.type	__func__.64974, %object
	.size	__func__.64974, 22
__func__.64974:
	.ascii	"android_unbind_config\000"
	.space	2
	.type	__func__.64602, %object
	.size	__func__.64602, 24
__func__.64602:
	.ascii	"android_enable_function\000"
	.type	__func__.64588, %object
	.size	__func__.64588, 21
__func__.64588:
	.ascii	"check_streaming_func\000"
	.space	3
	.type	__func__.39001, %object
	.size	__func__.39001, 13
__func__.39001:
	.ascii	"frmnet_setup\000"
	.space	3
	.type	__func__.38969, %object
	.size	__func__.38969, 23
__func__.38969:
	.ascii	"frmnet_notify_complete\000"
	.space	1
	.type	__func__.57558, %object
	.size	__func__.57558, 17
__func__.57558:
	.ascii	"mbim_ctrlrequest\000"
	.space	3
	.type	__func__.38836, %object
	.size	__func__.38836, 14
__func__.38836:
	.ascii	"frmnet_unbind\000"
	.space	2
	.type	__func__.47319, %object
	.size	__func__.47319, 12
__func__.47319:
	.ascii	"gs_start_rx\000"
	.type	__func__.48304, %object
	.size	__func__.48304, 21
__func__.48304:
	.ascii	"gsdio_write_complete\000"
	.space	3
	.type	__func__.48378, %object
	.size	__func__.48378, 24
__func__.48378:
	.ascii	"gsdio_ctrl_notify_modem\000"
	.type	__func__.48695, %object
	.size	__func__.48695, 20
__func__.48695:
	.ascii	"gsmd_write_complete\000"
	.type	__func__.48688, %object
	.size	__func__.48688, 19
__func__.48688:
	.ascii	"gsmd_read_complete\000"
	.space	1
	.type	__func__.52052, %object
	.size	__func__.52052, 19
__func__.52052:
	.ascii	"ghsuart_ctrl_probe\000"
	.space	1
	.type	__func__.52521, %object
	.size	__func__.52521, 19
__func__.52521:
	.ascii	"ghsuart_data_probe\000"
	.space	1
	.type	CSWTCH.1840, %object
	.size	CSWTCH.1840, 40
CSWTCH.1840:
	.word	.LC581
	.word	.LC582
	.word	.LC583
	.word	.LC584
	.word	.LC585
	.word	.LC586
	.word	.LC587
	.word	.LC588
	.word	.LC589
	.word	.LC1491
	.type	__func__.49768, %object
	.size	__func__.49768, 29
__func__.49768:
	.ascii	"gsmd_ctrl_send_cbits_tomodem\000"
	.space	3
	.type	__func__.49739, %object
	.size	__func__.49739, 24
__func__.49739:
	.ascii	"grmnet_ctrl_smd_write_w\000"
	.type	__func__.48671, %object
	.size	__func__.48671, 13
__func__.48671:
	.ascii	"gsmd_tx_pull\000"
	.space	3
	.type	__func__.48755, %object
	.size	__func__.48755, 21
__func__.48755:
	.ascii	"gsmd_disconnect_work\000"
	.space	3
	.type	__func__.49711, %object
	.size	__func__.49711, 23
__func__.49711:
	.ascii	"grmnet_ctrl_smd_read_w\000"
	.space	1
	.type	__func__.63145, %object
	.size	__func__.63145, 29
__func__.63145:
	.ascii	"conn_gadget_function_disable\000"
	.space	3
	.type	__func__.54476, %object
	.size	__func__.54476, 16
__func__.54476:
	.ascii	"mtp_ctrlrequest\000"
	.type	CSWTCH.1933, %object
	.size	CSWTCH.1933, 12
CSWTCH.1933:
	.word	.LC1488
	.word	.LC1489
	.word	.LC1490
	.type	__func__.49785, %object
	.size	__func__.49785, 23
__func__.49785:
	.ascii	"grmnet_ctrl_smd_notify\000"
	.space	1
	.type	__func__.52063, %object
	.size	__func__.52063, 20
__func__.52063:
	.ascii	"ghsuart_ctrl_remove\000"
	.type	gsmd_ctrl_stats_ops, %object
	.size	gsmd_ctrl_stats_ops, 108
gsmd_ctrl_stats_ops:
	.space	8
	.word	gsmd_ctrl_read_stats
	.word	gsmd_ctrl_reset_stats
	.space	92
	.type	gctrl_stats_ops, %object
	.size	gctrl_stats_ops, 108
gctrl_stats_ops:
	.space	8
	.word	gctrl_read_stats
	.word	gctrl_reset_stats
	.space	92
	.type	ghsic_stats_ops, %object
	.size	ghsic_stats_ops, 108
ghsic_stats_ops:
	.space	8
	.word	ghsic_data_read_stats
	.word	ghsic_data_reset_stats
	.space	92
	.type	gdata_timestamp_ops, %object
	.size	gdata_timestamp_ops, 108
gdata_timestamp_ops:
	.space	8
	.word	show_timestamp
	.space	96
	.type	ghsuart_ctrl_stats_ops, %object
	.size	ghsuart_ctrl_stats_ops, 108
ghsuart_ctrl_stats_ops:
	.space	8
	.word	ghsuart_ctrl_read_stats
	.word	ghsuart_ctrl_reset_stats
	.space	92
	.type	ghsuart_data_stats_ops, %object
	.size	ghsuart_data_stats_ops, 108
ghsuart_data_stats_ops:
	.space	8
	.word	ghsuart_data_read_stats
	.word	ghsuart_data_reset_stats
	.space	92
	.type	debug_fdiag_ops, %object
	.size	debug_fdiag_ops, 108
debug_fdiag_ops:
	.space	8
	.word	debug_read_stats
	.word	debug_reset_stats
	.space	28
	.word	debug_open
	.space	60
	.type	__func__.37432, %object
	.size	__func__.37432, 24
__func__.37432:
	.ascii	"rmnet_sdio_data_rx_work\000"
	.type	__func__.49182, %object
	.size	__func__.49182, 23
__func__.49182:
	.ascii	"gbam_write_data_tohost\000"
	.space	1
	.type	__func__.49253, %object
	.size	__func__.49253, 19
__func__.49253:
	.ascii	"gbam_epin_complete\000"
	.space	1
	.type	__func__.51435, %object
	.size	__func__.51435, 19
__func__.51435:
	.ascii	"ghsic_data_receive\000"
	.space	1
	.type	__func__.58619, %object
	.size	__func__.58619, 15
__func__.58619:
	.ascii	"eth_start_xmit\000"
	.space	1
	.type	__func__.49811, %object
	.size	__func__.49811, 26
__func__.49811:
	.ascii	"grmnet_ctrl_smd_connect_w\000"
	.space	2
	.type	__func__.49301, %object
	.size	__func__.49301, 14
__func__.49301:
	.ascii	"gbam_start_rx\000"
	.space	2
	.type	__func__.49268, %object
	.size	__func__.49268, 20
__func__.49268:
	.ascii	"gbam_epout_complete\000"
	.type	__func__.50132, %object
	.size	__func__.50132, 17
__func__.50132:
	.ascii	"rmnet_ctrl_ioctl\000"
	.space	3
	.type	__func__.58342, %object
	.size	__func__.58342, 15
__func__.58342:
	.ascii	"rndis_qc_ioctl\000"
	.space	1
	.type	__func__.57688, %object
	.size	__func__.57688, 11
__func__.57688:
	.ascii	"mbim_ioctl\000"
	.space	1
	.type	__func__.38544, %object
	.size	__func__.38544, 24
__func__.38544:
	.ascii	"usb_rmnet_mux_ctrl_read\000"
	.type	__func__.50086, %object
	.size	__func__.50086, 16
__func__.50086:
	.ascii	"rmnet_ctrl_read\000"
	.type	__func__.53519, %object
	.size	__func__.53519, 15
__func__.53519:
	.ascii	"ccid_ctrl_read\000"
	.space	1
	.type	__func__.38568, %object
	.size	__func__.38568, 25
__func__.38568:
	.ascii	"usb_rmnet_mux_ctrl_write\000"
	.space	3
	.type	__func__.50115, %object
	.size	__func__.50115, 17
__func__.50115:
	.ascii	"rmnet_ctrl_write\000"
	.space	3
	.type	__func__.65106, %object
	.size	__func__.65106, 35
__func__.65106:
	.ascii	"usb_diag_update_pid_and_serial_num\000"
	.space	5
	.type	audio_hw_info, %object
	.size	audio_hw_info, 64
audio_hw_info:
	.word	65811
	.space	4
	.word	4
	.word	0
	.space	4
	.word	44100
	.word	44100
	.word	2
	.word	2
	.word	1048576
	.word	64
	.word	524288
	.word	2
	.word	1024
	.space	8
	.type	__func__.48636, %object
	.size	__func__.48636, 13
__func__.48636:
	.ascii	"gsmd_rx_push\000"
	.space	3
	.type	__func__.48432, %object
	.size	__func__.48432, 15
__func__.48432:
	.ascii	"gsdio_ch_probe\000"
	.space	1
	.type	__func__.48814, %object
	.size	__func__.48814, 15
__func__.48814:
	.ascii	"gsmd_ch_remove\000"
	.space	1
	.type	__func__.48800, %object
	.size	__func__.48800, 14
__func__.48800:
	.ascii	"gsmd_ch_probe\000"
	.space	2
	.type	__func__.49476, %object
	.size	__func__.49476, 19
__func__.49476:
	.ascii	"gbam_data_ch_probe\000"
	.space	1
	.type	__func__.49878, %object
	.size	__func__.49878, 26
__func__.49878:
	.ascii	"grmnet_ctrl_smd_ch_remove\000"
	.space	2
	.type	__func__.49863, %object
	.size	__func__.49863, 25
__func__.49863:
	.ascii	"grmnet_ctrl_smd_ch_probe\000"
	.space	3
	.type	__func__.51078, %object
	.size	__func__.51078, 18
__func__.51078:
	.ascii	"ghsic_ctrl_remove\000"
	.space	2
	.type	__func__.48764, %object
	.size	__func__.48764, 18
__func__.48764:
	.ascii	"gsmd_notify_modem\000"
	.space	2
	.type	__func__.48745, %object
	.size	__func__.48745, 18
__func__.48745:
	.ascii	"gsmd_connect_work\000"
	.space	2
	.type	__func__.49233, %object
	.size	__func__.49233, 22
__func__.49233:
	.ascii	"gbam_data_write_tobam\000"
	.space	2
	.type	__func__.49455, %object
	.size	__func__.49455, 21
__func__.49455:
	.ascii	"gbam2bam_resume_work\000"
	.space	3
	.type	__func__.57928, %object
	.size	__func__.57928, 25
__func__.57928:
	.ascii	"bam2bam_data_resume_work\000"
	.space	3
	.type	__func__.49446, %object
	.size	__func__.49446, 22
__func__.49446:
	.ascii	"gbam2bam_suspend_work\000"
	.space	2
	.type	__func__.57919, %object
	.size	__func__.57919, 26
__func__.57919:
	.ascii	"bam2bam_data_suspend_work\000"
	.space	2
	.type	__func__.49424, %object
	.size	__func__.49424, 22
__func__.49424:
	.ascii	"gbam2bam_connect_work\000"
	.space	2
	.type	__func__.49309, %object
	.size	__func__.49309, 22
__func__.49309:
	.ascii	"gbam_start_endless_rx\000"
	.space	2
	.type	__func__.49316, %object
	.size	__func__.49316, 22
__func__.49316:
	.ascii	"gbam_start_endless_tx\000"
	.space	2
	.type	__func__.57821, %object
	.size	__func__.57821, 26
__func__.57821:
	.ascii	"bam2bam_data_connect_work\000"
	.space	2
	.type	__func__.57769, %object
	.size	__func__.57769, 26
__func__.57769:
	.ascii	"bam_data_start_endless_rx\000"
	.space	2
	.type	__func__.57776, %object
	.size	__func__.57776, 26
__func__.57776:
	.ascii	"bam_data_start_endless_tx\000"
	.space	2
	.type	__func__.57798, %object
	.size	__func__.57798, 23
__func__.57798:
	.ascii	"bam_data_peer_reset_cb\000"
	.space	1
	.type	__func__.58358, %object
	.size	__func__.58358, 14
__func__.58358:
	.ascii	"rndis_qc_init\000"
	.space	2
	.type	__func__.38589, %object
	.size	__func__.38589, 27
__func__.38589:
	.ascii	"rmnet_mux_ctrl_device_init\000"
	.space	1
	.type	__func__.38605, %object
	.size	__func__.38605, 20
__func__.38605:
	.ascii	"rmnet_smd_sdio_init\000"
	.type	rmnet_mux_svlte_debug_stats_ops, %object
	.size	rmnet_mux_svlte_debug_stats_ops, 108
rmnet_mux_svlte_debug_stats_ops:
	.space	8
	.word	rmnet_mux_read_stats
	.word	rmnet_mux_reset_stats
	.space	28
	.word	dbg_rmnet_mux_open
	.space	60
	.type	__func__.58363, %object
	.size	__func__.58363, 17
__func__.58363:
	.ascii	"rndis_qc_cleanup\000"
	.space	3
	.type	__func__.57716, %object
	.size	__func__.57716, 14
__func__.57716:
	.ascii	"fmbim_cleanup\000"
	.space	2
	.type	__func__.58567, %object
	.size	__func__.58567, 12
__func__.58567:
	.ascii	"tx_complete\000"
	.type	__func__.56830, %object
	.size	__func__.56830, 13
__func__.56830:
	.ascii	"rndis_rm_hdr\000"
	.space	3
	.type	CSWTCH.2716, %object
	.size	CSWTCH.2716, 12
CSWTCH.2716:
	.word	.LC1485
	.word	.LC1486
	.word	.LC1487
	.type	__func__.63222, %object
	.size	__func__.63222, 29
__func__.63222:
	.ascii	"conn_gadget_function_cleanup\000"
	.space	3
	.type	__func__.63213, %object
	.size	__func__.63213, 20
__func__.63213:
	.ascii	"conn_gadget_cleanup\000"
	.type	__func__.63218, %object
	.size	__func__.63218, 26
__func__.63218:
	.ascii	"conn_gadget_function_init\000"
	.space	2
	.type	__func__.63160, %object
	.size	__func__.63160, 18
__func__.63160:
	.ascii	"conn_gadget_setup\000"
	.space	2
	.type	__func__.63180, %object
	.size	__func__.63180, 34
__func__.63180:
	.ascii	"conn_gadget_usb_buffer_size_store\000"
	.space	2
	.type	__func__.64626, %object
	.size	__func__.64626, 20
__func__.64626:
	.ascii	"remote_wakeup_store\000"
	.type	__func__.64420, %object
	.size	__func__.64420, 27
__func__.64420:
	.ascii	"mass_storage_product_store\000"
	.space	1
	.type	__func__.64403, %object
	.size	__func__.64403, 26
__func__.64403:
	.ascii	"mass_storage_vendor_store\000"
	.space	2
	.type	__func__.63530, %object
	.size	__func__.63530, 13
__func__.63530:
	.ascii	"ncm_wrap_ntb\000"
	.space	3
	.type	__func__.63615, %object
	.size	__func__.63615, 9
__func__.63615:
	.ascii	"ncm_work\000"
	.space	3
	.type	__func__.64953, %object
	.size	__func__.64953, 11
__func__.64953:
	.ascii	"macos_show\000"
	.space	1
	.type	__func__.64943, %object
	.size	__func__.64943, 23
__func__.64943:
	.ascii	"ss_host_available_show\000"
	.space	1
	.type	__func__.65092, %object
	.size	__func__.65092, 21
__func__.65092:
	.ascii	"alloc_android_config\000"
	.space	3
	.type	__func__.64695, %object
	.size	__func__.64695, 16
__func__.64695:
	.ascii	"functions_store\000"
	.type	__func__.64986, %object
	.size	__func__.64986, 13
__func__.64986:
	.ascii	"android_bind\000"
	.space	3
	.type	__func__.64530, %object
	.size	__func__.64530, 23
__func__.64530:
	.ascii	"android_init_functions\000"
	.space	1
	.type	longname, %object
	.size	longname, 15
longname:
	.ascii	"Gadget Android\000"
	.space	1
	.type	__func__.63729, %object
	.size	__func__.63729, 13
__func__.63729:
	.ascii	"android_work\000"
	.space	3
	.type	__func__.45629, %object
	.size	__func__.45629, 13
__func__.45629:
	.ascii	"send_message\000"
	.space	3
	.type	__func__.45713, %object
	.size	__func__.45713, 18
__func__.45713:
	.ascii	"bulk_out_complete\000"
	.space	2
	.type	__func__.45705, %object
	.size	__func__.45705, 17
__func__.45705:
	.ascii	"bulk_in_complete\000"
	.space	3
	.type	__func__.54404, %object
	.size	__func__.54404, 18
__func__.54404:
	.ascii	"receive_file_work\000"
	.space	2
	.type	__func__.62429, %object
	.size	__func__.62429, 16
__func__.62429:
	.ascii	"f_audio_set_alt\000"
	.type	__func__.48369, %object
	.size	__func__.48369, 14
__func__.48369:
	.ascii	"gsdio_ctrl_wq\000"
	.space	2
	.type	__func__.38929, %object
	.size	__func__.38929, 15
__func__.38929:
	.ascii	"frmnet_connect\000"
	.space	1
	.type	__func__.63203, %object
	.size	__func__.63203, 36
__func__.63203:
	.ascii	"conn_gadget_in_max_packet_size_show\000"
	.type	__func__.63191, %object
	.size	__func__.63191, 37
__func__.63191:
	.ascii	"conn_gadget_out_max_packet_size_show\000"
	.space	3
	.type	__func__.63170, %object
	.size	__func__.63170, 33
__func__.63170:
	.ascii	"conn_gadget_usb_buffer_size_show\000"
	.space	3
	.type	__func__.63665, %object
	.size	__func__.63665, 22
__func__.63665:
	.ascii	"terminal_version_show\000"
	.space	2
	.type	__func__.37515, %object
	.size	__func__.37515, 29
__func__.37515:
	.ascii	"rmnet_sdio_set_modem_cbits_w\000"
	.space	3
	.type	__func__.48293, %object
	.size	__func__.48293, 20
__func__.48293:
	.ascii	"gsdio_read_complete\000"
	.type	__func__.50144, %object
	.size	__func__.50144, 16
__func__.50144:
	.ascii	"rmnet_ctrl_poll\000"
	.type	__func__.50992, %object
	.size	__func__.50992, 25
__func__.50992:
	.ascii	"ghsic_send_cbits_tomodem\000"
	.space	3
	.type	__func__.51006, %object
	.size	__func__.51006, 21
__func__.51006:
	.ascii	"ghsic_ctrl_connect_w\000"
	.space	3
	.type	__func__.51401, %object
	.size	__func__.51401, 25
__func__.51401:
	.ascii	"ghsic_data_unthrottle_tx\000"
	.space	3
	.type	__func__.52005, %object
	.size	__func__.52005, 27
__func__.52005:
	.ascii	"ghsuart_send_cbits_tomodem\000"
	.space	1
	.type	__func__.57886, %object
	.size	__func__.57886, 17
__func__.57886:
	.ascii	"bam_data_wake_cb\000"
	.space	3
	.type	__func__.53498, %object
	.size	__func__.53498, 15
__func__.53498:
	.ascii	"ccid_ctrl_open\000"
	.space	1
	.type	__func__.53398, %object
	.size	__func__.53398, 15
__func__.53398:
	.ascii	"ccid_bulk_open\000"
	.space	1
	.type	__func__.38936, %object
	.size	__func__.38936, 18
__func__.38936:
	.ascii	"frmnet_disconnect\000"
	.space	2
	.type	__func__.38843, %object
	.size	__func__.38843, 23
__func__.38843:
	.ascii	"frmnet_purge_responses\000"
	.space	1
	.type	__func__.38958, %object
	.size	__func__.38958, 20
__func__.38958:
	.ascii	"frmnet_cmd_complete\000"
	.type	__func__.58744, %object
	.size	__func__.58744, 12
__func__.58744:
	.ascii	"gether_init\000"
	.type	__func__.65160, %object
	.size	__func__.65160, 5
__func__.65160:
	.ascii	"init\000"
	.space	3
	.type	__func__.63050, %object
	.size	__func__.63050, 18
__func__.63050:
	.ascii	"conn_gadget_flush\000"
	.space	2
	.type	__func__.52345, %object
	.size	__func__.52345, 25
__func__.52345:
	.ascii	"ghsuart_data_write_tomdm\000"
	.space	3
	.type	__func__.52389, %object
	.size	__func__.52389, 22
__func__.52389:
	.ascii	"ghsuart_data_start_rx\000"
	.space	2
	.type	__func__.52329, %object
	.size	__func__.52329, 26
__func__.52329:
	.ascii	"ghsuart_data_write_tohost\000"
	.space	2
	.type	__func__.37542, %object
	.size	__func__.37542, 22
__func__.37542:
	.ascii	"rmnet_close_sdio_work\000"
	.space	2
	.type	__func__.63738, %object
	.size	__func__.63738, 24
__func__.63738:
	.ascii	"usb_gadget_connect_work\000"
	.type	__func__.49396, %object
	.size	__func__.49396, 25
__func__.49396:
	.ascii	"gbam2bam_disconnect_work\000"
	.space	3
	.type	__func__.57807, %object
	.size	__func__.57807, 29
__func__.57807:
	.ascii	"bam2bam_data_disconnect_work\000"
	.space	3
	.type	__func__.63623, %object
	.size	__func__.63623, 18
__func__.63623:
	.ascii	"ncm_function_init\000"
	.space	2
	.type	__func__.51550, %object
	.size	__func__.51550, 21
__func__.51550:
	.ascii	"ghsic_data_connect_w\000"
	.space	3
	.type	__func__.52015, %object
	.size	__func__.52015, 23
__func__.52015:
	.ascii	"ghsuart_ctrl_connect_w\000"
	.space	1
	.type	__func__.52492, %object
	.size	__func__.52492, 23
__func__.52492:
	.ascii	"ghsuart_data_connect_w\000"
	.space	1
	.type	__func__.44576, %object
	.size	__func__.44576, 14
__func__.44576:
	.ascii	"ffs_epfile_io\000"
	.space	2
	.type	__func__.38875, %object
	.size	__func__.38875, 14
__func__.38875:
	.ascii	"frmnet_resume\000"
	.space	2
	.type	__func__.49652, %object
	.size	__func__.49652, 12
__func__.49652:
	.ascii	"gbam_resume\000"
	.type	rndis_proc_fops, %object
	.size	rndis_proc_fops, 108
rndis_proc_fops:
	.word	0
	.word	seq_lseek
	.word	seq_read
	.word	rndis_proc_write
	.space	28
	.word	rndis_proc_open
	.space	4
	.word	single_release
	.space	52
	.type	__func__.56901, %object
	.size	__func__.56901, 11
__func__.56901:
	.ascii	"rndis_init\000"
	.space	1
	.type	__func__.57871, %object
	.size	__func__.57871, 15
__func__.57871:
	.ascii	"bam_data_setup\000"
	.space	1
	.type	__func__.57836, %object
	.size	__func__.57836, 24
__func__.57836:
	.ascii	"bam2bam_data_port_alloc\000"
	.type	__func__.64556, %object
	.size	__func__.64556, 31
__func__.64556:
	.ascii	"android_bind_enabled_functions\000"
	.space	1
	.type	__func__.57701, %object
	.size	__func__.57701, 10
__func__.57701:
	.ascii	"mbim_init\000"
	.space	2
	.type	__func__.57427, %object
	.size	__func__.57427, 26
__func__.57427:
	.ascii	"mbim_reset_function_queue\000"
	.space	2
	.type	__func__.58256, %object
	.size	__func__.58256, 16
__func__.58256:
	.ascii	"rndis_qc_resume\000"
	.type	__func__.57910, %object
	.size	__func__.57910, 16
__func__.57910:
	.ascii	"bam_data_resume\000"
	.type	__func__.58251, %object
	.size	__func__.58251, 17
__func__.58251:
	.ascii	"rndis_qc_suspend\000"
	.space	3
	.type	__func__.57903, %object
	.size	__func__.57903, 17
__func__.57903:
	.ascii	"bam_data_suspend\000"
	.space	3
	.type	__func__.57844, %object
	.size	__func__.57844, 20
__func__.57844:
	.ascii	"bam_data_disconnect\000"
	.type	__func__.56548, %object
	.size	__func__.56548, 20
__func__.56548:
	.ascii	"gen_ndis_query_resp\000"
	.type	oid_supported_list, %object
	.size	oid_supported_list, 112
oid_supported_list:
	.word	65793
	.word	65794
	.word	65795
	.word	65796
	.word	65798
	.word	65799
	.word	65802
	.word	65803
	.word	65804
	.word	65805
	.word	65814
	.word	65806
	.word	65809
	.word	65812
	.word	66050
	.word	131329
	.word	131330
	.word	131331
	.word	131332
	.word	131333
	.word	16843009
	.word	16843010
	.word	16843011
	.word	16843013
	.word	16843012
	.word	16908545
	.word	16908546
	.word	16908547
	.type	__func__.53549, %object
	.size	__func__.53549, 22
__func__.53549:
	.ascii	"ccid_ctrl_device_init\000"
	.space	2
	.type	__func__.53562, %object
	.size	__func__.53562, 11
__func__.53562:
	.ascii	"ccid_setup\000"
	.space	1
	.type	__func__.53489, %object
	.size	__func__.53489, 22
__func__.53489:
	.ascii	"ccid_bulk_device_init\000"
	.space	2
	.type	__func__.52547, %object
	.size	__func__.52547, 33
__func__.52547:
	.ascii	"ghsuart_send_controlbits_tomodem\000"
	.space	3
	.type	__func__.52425, %object
	.size	__func__.52425, 23
__func__.52425:
	.ascii	"ghsuart_dunctrl_status\000"
	.space	1
	.type	__func__.48600, %object
	.size	__func__.48600, 20
__func__.48600:
	.ascii	"gsmd_alloc_requests\000"
	.type	__func__.48587, %object
	.size	__func__.48587, 15
__func__.48587:
	.ascii	"gsmd_alloc_req\000"
	.space	1
	.type	__func__.47302, %object
	.size	__func__.47302, 12
__func__.47302:
	.ascii	"gs_start_tx\000"
	.type	__func__.47366, %object
	.size	__func__.47366, 18
__func__.47366:
	.ascii	"gs_write_complete\000"
	.space	2
	.type	__func__.50015, %object
	.size	__func__.50015, 34
__func__.50015:
	.ascii	"grmnet_ctrl_qti_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.37456, %object
	.size	__func__.37456, 26
__func__.37456:
	.ascii	"rmnet_sdio_complete_epout\000"
	.space	2
	.type	__func__.44881, %object
	.size	__func__.44881, 13
__func__.44881:
	.ascii	"ffs_do_descs\000"
	.space	3
	.type	__func__.47624, %object
	.size	__func__.47624, 16
__func__.47624:
	.ascii	"gserial_cleanup\000"
	.type	__func__.62196, %object
	.size	__func__.62196, 29
__func__.62196:
	.ascii	"f_audio_playback_ep_complete\000"
	.space	3
	.type	__func__.62220, %object
	.size	__func__.62220, 28
__func__.62220:
	.ascii	"f_audio_capture_ep_complete\000"
	.type	__func__.62238, %object
	.size	__func__.62238, 17
__func__.62238:
	.ascii	"f_audio_complete\000"
	.space	3
	.type	__func__.51423, %object
	.size	__func__.51423, 24
__func__.51423:
	.ascii	"ghsic_data_write_tohost\000"
	.type	__func__.57472, %object
	.size	__func__.57472, 21
__func__.57472:
	.ascii	"mbim_notify_complete\000"
	.space	3
	.type	__func__.57457, %object
	.size	__func__.57457, 15
__func__.57457:
	.ascii	"mbim_do_notify\000"
	.space	1
	.type	__func__.51588, %object
	.size	__func__.51588, 17
__func__.51588:
	.ascii	"ghsic_data_probe\000"
	.space	3
	.type	__func__.51065, %object
	.size	__func__.51065, 17
__func__.51065:
	.ascii	"ghsic_ctrl_probe\000"
	.space	3
	.type	__func__.62979, %object
	.size	__func__.62979, 17
__func__.62979:
	.ascii	"conn_gadget_poll\000"
	.space	3
	.type	__func__.45745, %object
	.size	__func__.45745, 18
__func__.45745:
	.ascii	"start_in_transfer\000"
	.space	2
	.type	ffs_sb_operations, %object
	.size	ffs_sb_operations, 104
ffs_sb_operations:
	.space	16
	.word	generic_delete_inode
	.space	24
	.word	simple_statfs
	.space	56
	.type	ffs_ep0_operations, %object
	.size	ffs_ep0_operations, 108
ffs_ep0_operations:
	.word	0
	.word	no_llseek
	.word	ffs_ep0_read
	.word	ffs_ep0_write
	.space	16
	.word	ffs_ep0_ioctl
	.space	8
	.word	ffs_ep0_open
	.space	4
	.word	ffs_ep0_release
	.space	52
	.type	__func__.57864, %object
	.size	__func__.57864, 17
__func__.57864:
	.ascii	"bam_data_destroy\000"
	.space	3
	.type	__func__.30998, %object
	.size	__func__.30998, 25
__func__.30998:
	.ascii	"usb_qdss_disconnect_work\000"
	.space	3
	.type	__func__.51454, %object
	.size	__func__.51454, 23
__func__.51454:
	.ascii	"ghsic_data_write_tomdm\000"
	.space	1
	.type	__func__.51504, %object
	.size	__func__.51504, 20
__func__.51504:
	.ascii	"ghsic_data_start_rx\000"
	.type	__func__.57584, %object
	.size	__func__.57584, 13
__func__.57584:
	.ascii	"mbim_suspend\000"
	.space	3
	.type	__func__.57588, %object
	.size	__func__.57588, 12
__func__.57588:
	.ascii	"mbim_resume\000"
	.type	__func__.57179, %object
	.size	__func__.57179, 15
__func__.57179:
	.ascii	"ecm_qc_suspend\000"
	.space	1
	.type	__func__.57184, %object
	.size	__func__.57184, 14
__func__.57184:
	.ascii	"ecm_qc_resume\000"
	.space	2
	.type	__func__.57624, %object
	.size	__func__.57624, 10
__func__.57624:
	.ascii	"mbim_read\000"
	.space	2
	.type	__func__.61928, %object
	.size	__func__.61928, 20
__func__.61928:
	.ascii	"gaudio_open_streams\000"
	.type	__func__.61897, %object
	.size	__func__.61897, 24
__func__.61897:
	.ascii	"playback_prepare_params\000"
	.type	__func__.61909, %object
	.size	__func__.61909, 23
__func__.61909:
	.ascii	"capture_prepare_params\000"
	.space	1
	.type	__func__.61886, %object
	.size	__func__.61886, 16
__func__.61886:
	.ascii	"pcm_buffer_size\000"
	.type	__func__.62184, %object
	.size	__func__.62184, 22
__func__.62184:
	.ascii	"f_audio_playback_work\000"
	.space	2
	.type	__func__.61946, %object
	.size	__func__.61946, 17
__func__.61946:
	.ascii	"u_audio_playback\000"
	.space	3
	.type	__func__.62933, %object
	.size	__func__.62933, 24
__func__.62933:
	.ascii	"conn_gadget_complete_in\000"
	.type	__func__.63118, %object
	.size	__func__.63118, 28
__func__.63118:
	.ascii	"conn_gadget_function_unbind\000"
	.type	__func__.56748, %object
	.size	__func__.56748, 17
__func__.56748:
	.ascii	"rndis_deregister\000"
	.space	3
	.type	__func__.64998, %object
	.size	__func__.64998, 19
__func__.64998:
	.ascii	"android_usb_unbind\000"
	.space	1
	.type	__func__.63090, %object
	.size	__func__.63090, 18
__func__.63090:
	.ascii	"conn_gadget_ioctl\000"
	.space	2
	.type	__func__.63079, %object
	.size	__func__.63079, 37
__func__.63079:
	.ascii	"conn_gadget_bind_status_copy_to_user\000"
	.space	3
	.type	__func__.58453, %object
	.size	__func__.58453, 10
__func__.58453:
	.ascii	"rx_submit\000"
	.space	2
	.type	__func__.58537, %object
	.size	__func__.58537, 13
__func__.58537:
	.ascii	"process_rx_w\000"
	.space	3
	.type	__func__.63673, %object
	.size	__func__.63673, 23
__func__.63673:
	.ascii	"terminal_version_store\000"
	.space	1
	.type	__func__.63658, %object
	.size	__func__.63658, 14
__func__.63658:
	.ascii	"set_ncm_ready\000"
	.space	2
	.type	__func__.58288, %object
	.size	__func__.58288, 16
__func__.58288:
	.ascii	"rndis_qc_unbind\000"
	.type	__func__.52532, %object
	.size	__func__.52532, 20
__func__.52532:
	.ascii	"ghsuart_data_remove\000"
	.type	__func__.51597, %object
	.size	__func__.51597, 18
__func__.51597:
	.ascii	"ghsic_data_remove\000"
	.space	2
	.type	__func__.57512, %object
	.size	__func__.57512, 11
__func__.57512:
	.ascii	"mbim_setup\000"
	.space	1
	.type	__func__.63028, %object
	.size	__func__.63028, 18
__func__.63028:
	.ascii	"conn_gadget_write\000"
	.space	2
	.type	__func__.49493, %object
	.size	__func__.49493, 20
__func__.49493:
	.ascii	"gbam_data_ch_remove\000"
	.type	__func__.38859, %object
	.size	__func__.38859, 15
__func__.38859:
	.ascii	"frmnet_suspend\000"
	.space	1
	.type	__func__.49643, %object
	.size	__func__.49643, 13
__func__.49643:
	.ascii	"gbam_suspend\000"
	.space	3
	.type	__func__.37378, %object
	.size	__func__.37378, 20
__func__.37378:
	.ascii	"rmnet_sdio_start_rx\000"
	.type	__func__.37603, %object
	.size	__func__.37603, 21
__func__.37603:
	.ascii	"rmnet_open_sdio_work\000"
	.space	3
	.type	f_midi_cin_length, %object
	.size	f_midi_cin_length, 16
f_midi_cin_length:
	.byte	0
	.byte	0
	.byte	2
	.byte	3
	.byte	3
	.byte	1
	.byte	2
	.byte	3
	.byte	3
	.byte	3
	.byte	3
	.byte	3
	.byte	2
	.byte	2
	.byte	3
	.byte	1
	.type	__func__.58226, %object
	.size	__func__.58226, 15
__func__.58226:
	.ascii	"rndis_qc_setup\000"
	.space	1
	.type	__func__.50002, %object
	.size	__func__.50002, 24
__func__.50002:
	.ascii	"rmnet_ctrl_queue_notify\000"
	.type	__func__.25463, %object
	.size	__func__.25463, 21
__func__.25463:
	.ascii	"composite_disconnect\000"
	.space	3
	.type	__func__.25267, %object
	.size	__func__.25267, 18
__func__.25267:
	.ascii	"usb_remove_config\000"
	.space	2
	.type	__func__.53114, %object
	.size	__func__.53114, 12
__func__.53114:
	.ascii	"adb_release\000"
	.type	__func__.63874, %object
	.size	__func__.63874, 20
__func__.63874:
	.ascii	"adb_closed_callback\000"
	.type	__func__.63756, %object
	.size	__func__.63756, 15
__func__.63756:
	.ascii	"android_enable\000"
	.space	1
	.type	__func__.63743, %object
	.size	__func__.63743, 33
__func__.63743:
	.ascii	"schedule_usb_gadget_connect_work\000"
	.space	3
	.type	__func__.64736, %object
	.size	__func__.64736, 13
__func__.64736:
	.ascii	"enable_store\000"
	.space	3
	.type	__func__.53107, %object
	.size	__func__.53107, 9
__func__.53107:
	.ascii	"adb_open\000"
	.space	3
	.type	__func__.49409, %object
	.size	__func__.49409, 18
__func__.49409:
	.ascii	"gbam_connect_work\000"
	.space	2
	.type	__func__.49350, %object
	.size	__func__.49350, 14
__func__.49350:
	.ascii	"gbam_start_io\000"
	.space	2
	.type	__func__.49163, %object
	.size	__func__.49163, 20
__func__.49163:
	.ascii	"gbam_alloc_requests\000"
	.type	__func__.49466, %object
	.size	__func__.49466, 19
__func__.49466:
	.ascii	"gbam_peer_reset_cb\000"
	.space	1
	.type	__func__.63915, %object
	.size	__func__.63915, 25
__func__.63915:
	.ascii	"acm_function_bind_config\000"
	.space	3
	.type	__func__.49201, %object
	.size	__func__.49201, 18
__func__.49201:
	.ascii	"gbam_data_recv_cb\000"
	.space	2
	.type	__func__.49216, %object
	.size	__func__.49216, 21
__func__.49216:
	.ascii	"gbam_data_write_done\000"
	.space	3
	.type	__func__.48416, %object
	.size	__func__.48416, 16
__func__.48416:
	.ascii	"gsdio_ch_remove\000"
	.type	__func__.48386, %object
	.size	__func__.48386, 24
__func__.48386:
	.ascii	"gsdio_ctrl_modem_status\000"
	.type	__func__.45723, %object
	.size	__func__.45723, 10
__func__.45723:
	.ascii	"fsg_setup\000"
	.space	2
	.type	__func__.64933, %object
	.size	__func__.64933, 14
__func__.64933:
	.ascii	"usb30en_store\000"
	.space	2
	.type	__func__.56462, %object
	.size	__func__.56462, 12
__func__.56462:
	.ascii	"rndis_close\000"
	.type	__func__.56769, %object
	.size	__func__.56769, 23
__func__.56769:
	.ascii	"rndis_set_param_medium\000"
	.space	1
	.type	__func__.58269, %object
	.size	__func__.58269, 15
__func__.58269:
	.ascii	"rndis_qc_close\000"
	.space	1
	.type	__func__.25112, %object
	.size	__func__.25112, 11
__func__.25112:
	.ascii	"config_buf\000"
	.space	1
	.type	__func__.25189, %object
	.size	__func__.25189, 11
__func__.25189:
	.ascii	"set_config\000"
	.space	1
	.type	__func__.25391, %object
	.size	__func__.25391, 16
__func__.25391:
	.ascii	"composite_setup\000"
	.type	gs_tty_ops, %object
	.size	gs_tty_ops, 124
gs_tty_ops:
	.space	12
	.word	gs_open
	.word	gs_close
	.space	8
	.word	gs_write
	.word	gs_put_char
	.word	gs_flush_chars
	.word	gs_write_room
	.word	gs_chars_in_buffer
	.space	16
	.word	gs_unthrottle
	.space	12
	.word	gs_break_ctl
	.space	16
	.word	gs_tiocmget
	.word	gs_tiocmset
	.space	16
	.type	__func__.47590, %object
	.size	__func__.47590, 14
__func__.47590:
	.ascii	"gserial_setup\000"
	.space	2
	.type	debug_adb_ops, %object
	.size	debug_adb_ops, 108
debug_adb_ops:
	.space	8
	.word	debug_read_status
	.space	32
	.word	serial_debug_open
	.space	60
	.type	debug_rst_ops, %object
	.size	debug_rst_ops, 108
debug_rst_ops:
	.space	12
	.word	debug_write_reset
	.space	28
	.word	serial_debug_open
	.space	60
	.type	__func__.56456, %object
	.size	__func__.56456, 11
__func__.56456:
	.ascii	"rndis_open\000"
	.space	1
	.type	__func__.58263, %object
	.size	__func__.58263, 14
__func__.58263:
	.ascii	"rndis_qc_open\000"
	.space	2
	.type	__func__.62904, %object
	.size	__func__.62904, 27
__func__.62904:
	.ascii	"conn_gadget_request_ep_out\000"
	.space	1
	.type	__func__.63044, %object
	.size	__func__.63044, 17
__func__.63044:
	.ascii	"conn_gadget_open\000"
	.space	3
	.type	__func__.62993, %object
	.size	__func__.62993, 17
__func__.62993:
	.ascii	"conn_gadget_read\000"
	.space	3
	.type	ffs_epfile_operations, %object
	.size	ffs_epfile_operations, 108
ffs_epfile_operations:
	.word	0
	.word	no_llseek
	.word	ffs_epfile_read
	.word	ffs_epfile_write
	.space	16
	.word	ffs_epfile_ioctl
	.space	8
	.word	ffs_epfile_open
	.space	4
	.word	ffs_epfile_release
	.space	52
	.type	__func__.63828, %object
	.size	__func__.63828, 26
__func__.63828:
	.ascii	"functionfs_ready_callback\000"
	.space	2
	.type	__func__.63834, %object
	.size	__func__.63834, 27
__func__.63834:
	.ascii	"functionfs_closed_callback\000"
	.space	1
	.type	__func__.44722, %object
	.size	__func__.44722, 13
__func__.44722:
	.ascii	"ffs_data_put\000"
	.space	3
	.type	__func__.38393, %object
	.size	__func__.38393, 16
__func__.38393:
	.ascii	"transport_store\000"
	.type	__func__.37974, %object
	.size	__func__.37974, 24
__func__.37974:
	.ascii	"rmnet_mux_sdio_start_rx\000"
	.type	__func__.53426, %object
	.size	__func__.53426, 15
__func__.53426:
	.ascii	"ccid_bulk_read\000"
	.space	1
	.type	__func__.63227, %object
	.size	__func__.63227, 33
__func__.63227:
	.ascii	"conn_gadget_function_bind_config\000"
	.space	3
	.type	__func__.63567, %object
	.size	__func__.63567, 9
__func__.63567:
	.ascii	"ncm_open\000"
	.space	3
	.type	__func__.63573, %object
	.size	__func__.63573, 10
__func__.63573:
	.ascii	"ncm_close\000"
	.space	2
	.type	__func__.64083, %object
	.size	__func__.64083, 26
__func__.64083:
	.ascii	"mbim_function_bind_config\000"
	.space	2
	.type	__func__.57612, %object
	.size	__func__.57612, 17
__func__.57612:
	.ascii	"mbim_bind_config\000"
	.space	3
	.type	__func__.57399, %object
	.size	__func__.57399, 15
__func__.57399:
	.ascii	"mbim_bam_setup\000"
	.space	1
	.type	debug_rmnet_sdio_stats_ops, %object
	.size	debug_rmnet_sdio_stats_ops, 108
debug_rmnet_sdio_stats_ops:
	.space	8
	.word	rmnet_sdio_read_stats
	.word	rmnet_sdio_reset_stats
	.space	28
	.word	debug_rmnet_sdio_open
	.space	60
	.type	__func__.58058, %object
	.size	__func__.58058, 9
__func__.58058:
	.ascii	"ecm_open\000"
	.space	3
	.type	__func__.58064, %object
	.size	__func__.58064, 10
__func__.58064:
	.ascii	"ecm_close\000"
	.space	2
	.type	__func__.57190, %object
	.size	__func__.57190, 12
__func__.57190:
	.ascii	"ecm_qc_open\000"
	.type	__func__.57196, %object
	.size	__func__.57196, 13
__func__.57196:
	.ascii	"ecm_qc_close\000"
	.space	3
	.type	__func__.53461, %object
	.size	__func__.53461, 16
__func__.53461:
	.ascii	"ccid_bulk_write\000"
	.type	__func__.57496, %object
	.size	__func__.57496, 19
__func__.57496:
	.ascii	"fmbim_cmd_complete\000"
	.space	1
	.type	__func__.38245, %object
	.size	__func__.38245, 27
__func__.38245:
	.ascii	"rmnet_mux_command_complete\000"
	.space	1
	.type	__func__.55784, %object
	.size	__func__.55784, 16
__func__.55784:
	.ascii	"acc_ctrlrequest\000"
	.type	__func__.49754, %object
	.size	__func__.49754, 34
__func__.49754:
	.ascii	"grmnet_ctrl_smd_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.38946, %object
	.size	__func__.38946, 26
__func__.38946:
	.ascii	"frmnet_send_cpkt_response\000"
	.space	2
	.type	__func__.38914, %object
	.size	__func__.38914, 31
__func__.38914:
	.ascii	"frmnet_ctrl_response_available\000"
	.space	1
	.type	__func__.61962, %object
	.size	__func__.61962, 16
__func__.61962:
	.ascii	"u_audio_capture\000"
	.type	__func__.62206, %object
	.size	__func__.62206, 21
__func__.62206:
	.ascii	"f_audio_capture_work\000"
	.space	3
	.type	__func__.57665, %object
	.size	__func__.57665, 11
__func__.57665:
	.ascii	"mbim_write\000"
	.space	1
	.type	__func__.57390, %object
	.size	__func__.57390, 25
__func__.57390:
	.ascii	"fmbim_send_cpkt_response\000"
	.space	3
	.type	__func__.57378, %object
	.size	__func__.57378, 30
__func__.57378:
	.ascii	"fmbim_ctrl_response_available\000"
	.space	2
	.type	__func__.57207, %object
	.size	__func__.57207, 12
__func__.57207:
	.ascii	"ecm_qc_bind\000"
	.type	__func__.57597, %object
	.size	__func__.57597, 10
__func__.57597:
	.ascii	"mbim_bind\000"
	.space	2
	.type	__func__.61969, %object
	.size	__func__.61969, 30
__func__.61969:
	.ascii	"u_audio_get_playback_channels\000"
	.space	2
	.type	__func__.61979, %object
	.size	__func__.61979, 29
__func__.61979:
	.ascii	"u_audio_get_capture_channels\000"
	.space	3
	.type	__func__.61974, %object
	.size	__func__.61974, 26
__func__.61974:
	.ascii	"u_audio_get_playback_rate\000"
	.space	2
	.type	__func__.61984, %object
	.size	__func__.61984, 25
__func__.61984:
	.ascii	"u_audio_get_capture_rate\000"
	.space	3
	.type	__func__.62462, %object
	.size	__func__.62462, 13
__func__.62462:
	.ascii	"f_audio_bind\000"
	.space	3
	.type	__func__.53386, %object
	.size	__func__.53386, 19
__func__.53386:
	.ascii	"ccid_function_bind\000"
	.space	1
	.type	__func__.39026, %object
	.size	__func__.39026, 12
__func__.39026:
	.ascii	"frmnet_bind\000"
	.type	__func__.56739, %object
	.size	__func__.56739, 15
__func__.56739:
	.ascii	"rndis_register\000"
	.space	1
	.type	__func__.56762, %object
	.size	__func__.56762, 23
__func__.56762:
	.ascii	"rndis_set_param_vendor\000"
	.space	1
	.type	__func__.56775, %object
	.size	__func__.56775, 23
__func__.56775:
	.ascii	"rndis_set_max_pkt_xfer\000"
	.space	1
	.type	__func__.56781, %object
	.size	__func__.56781, 31
__func__.56781:
	.ascii	"rndis_set_pkt_alignment_factor\000"
	.space	1
	.type	__func__.58280, %object
	.size	__func__.58280, 14
__func__.58280:
	.ascii	"rndis_qc_bind\000"
	.space	2
	.type	__func__.62963, %object
	.size	__func__.62963, 34
__func__.62963:
	.ascii	"conn_gadget_create_bulk_endpoints\000"
	.space	2
	.type	__func__.37615, %object
	.size	__func__.37615, 19
__func__.37615:
	.ascii	"rmnet_sdio_set_alt\000"
	.space	1
	.type	__func__.53362, %object
	.size	__func__.53362, 22
__func__.53362:
	.ascii	"ccid_function_set_alt\000"
	.space	2
	.type	__func__.63136, %object
	.size	__func__.63136, 29
__func__.63136:
	.ascii	"conn_gadget_function_set_alt\000"
	.space	3
	.type	__func__.64154, %object
	.size	__func__.64154, 26
__func__.64154:
	.ascii	"qdss_function_bind_config\000"
	.space	2
	.type	rmnet_smd_debug_stats_ops, %object
	.size	rmnet_smd_debug_stats_ops, 108
rmnet_smd_debug_stats_ops:
	.space	8
	.word	rmnet_smd_debug_read_stats
	.word	rmnet_smd_debug_reset_stats
	.space	28
	.word	rmnet_smd_debug_open
	.space	60
	.type	__func__.64223, %object
	.size	__func__.64223, 27
__func__.64223:
	.ascii	"rndis_function_bind_config\000"
	.space	1
	.type	eth_netdev_ops, %object
	.size	eth_netdev_ops, 136
eth_netdev_ops:
	.space	8
	.word	eth_open
	.word	eth_stop
	.word	eth_start_xmit
	.space	12
	.word	eth_mac_addr
	.word	eth_validate_addr
	.space	8
	.word	ueth_change_mtu
	.space	84
	.type	ops, %object
	.size	ops, 164
ops:
	.space	8
	.word	eth_get_drvinfo
	.space	28
	.word	ethtool_op_get_link
	.space	120
	.type	__func__.65124, %object
	.size	__func__.65124, 14
__func__.65124:
	.ascii	"android_probe\000"
	.space	2
	.type	__func__.63679, %object
	.size	__func__.63679, 26
__func__.63679:
	.ascii	"create_terminal_attribute\000"
	.space	2
	.type	__func__.25546, %object
	.size	__func__.25546, 29
__func__.25546:
	.ascii	"usb_composite_setup_continue\000"
	.space	3
	.type	__func__.46216, %object
	.size	__func__.46216, 17
__func__.46216:
	.ascii	"handle_exception\000"
	.space	3
	.type	__func__.46164, %object
	.size	__func__.46164, 17
__func__.46164:
	.ascii	"get_next_command\000"
	.space	3
	.type	__func__.45636, %object
	.size	__func__.45636, 14
__func__.45636:
	.ascii	"do_timer_stop\000"
	.space	2
	.type	__func__.45640, %object
	.size	__func__.45640, 15
__func__.45640:
	.ascii	"do_timer_reset\000"
	.space	1
	.type	__func__.45647, %object
	.size	__func__.45647, 17
__func__.45647:
	.ascii	"get_version_info\000"
	.space	3
	.type	__func__.46050, %object
	.size	__func__.46050, 13
__func__.46050:
	.ascii	"finish_reply\000"
	.space	3
	.type	__func__.26043, %object
	.size	__func__.26043, 14
__func__.26043:
	.ascii	"usb_diag_read\000"
	.space	2
	.type	__func__.26061, %object
	.size	__func__.26061, 15
__func__.26061:
	.ascii	"usb_diag_write\000"
	.space	1
	.type	__func__.64137, %object
	.size	__func__.64137, 26
__func__.64137:
	.ascii	"diag_function_bind_config\000"
	.space	2
	.type	__func__.47404, %object
	.size	__func__.47404, 12
__func__.47404:
	.ascii	"gs_start_io\000"
	.type	__func__.48202, %object
	.size	__func__.48202, 16
__func__.48202:
	.ascii	"gsdio_alloc_req\000"
	.type	__func__.48729, %object
	.size	__func__.48729, 12
__func__.48729:
	.ascii	"gsmd_notify\000"
	.type	__func__.48701, %object
	.size	__func__.48701, 14
__func__.48701:
	.ascii	"gsmd_start_io\000"
	.space	2
	.type	__func__.48225, %object
	.size	__func__.48225, 21
__func__.48225:
	.ascii	"gsdio_alloc_requests\000"
	.space	3
	.type	__func__.48236, %object
	.size	__func__.48236, 15
__func__.48236:
	.ascii	"gsdio_start_rx\000"
	.space	1
	.type	__func__.48272, %object
	.size	__func__.48272, 14
__func__.48272:
	.ascii	"gsdio_rx_push\000"
	.space	2
	.type	__func__.48257, %object
	.size	__func__.48257, 12
__func__.48257:
	.ascii	"gsdio_write\000"
	.type	__func__.48319, %object
	.size	__func__.48319, 19
__func__.48319:
	.ascii	"gsdio_read_pending\000"
	.space	1
	.type	__func__.48332, %object
	.size	__func__.48332, 14
__func__.48332:
	.ascii	"gsdio_tx_pull\000"
	.space	2
	.type	__func__.48353, %object
	.size	__func__.48353, 15
__func__.48353:
	.ascii	"gsdio_start_io\000"
	.space	1
	.type	__func__.48362, %object
	.size	__func__.48362, 16
__func__.48362:
	.ascii	"gsdio_port_free\000"
	.type	__func__.48393, %object
	.size	__func__.48393, 16
__func__.48393:
	.ascii	"gsdio_ch_notify\000"
	.type	__func__.48444, %object
	.size	__func__.48444, 17
__func__.48444:
	.ascii	"gsdio_port_alloc\000"
	.space	3
	.type	__func__.48459, %object
	.size	__func__.48459, 14
__func__.48459:
	.ascii	"gsdio_connect\000"
	.space	2
	.type	__func__.48470, %object
	.size	__func__.48470, 17
__func__.48470:
	.ascii	"gsdio_disconnect\000"
	.space	3
	.type	__func__.48528, %object
	.size	__func__.48528, 12
__func__.48528:
	.ascii	"gsdio_setup\000"
	.type	debug_gsdio_ops, %object
	.size	debug_gsdio_ops, 108
debug_gsdio_ops:
	.space	8
	.word	debug_sdio_read_stats
	.word	debug_sdio_reset_stats
	.space	28
	.word	debug_sdio_open
	.space	60
	.type	__func__.48774, %object
	.size	__func__.48774, 13
__func__.48774:
	.ascii	"gsmd_connect\000"
	.space	3
	.type	__func__.48785, %object
	.size	__func__.48785, 16
__func__.48785:
	.ascii	"gsmd_disconnect\000"
	.type	__func__.48886, %object
	.size	__func__.48886, 11
__func__.48886:
	.ascii	"gsmd_setup\000"
	.space	1
	.type	__func__.48834, %object
	.size	__func__.48834, 16
__func__.48834:
	.ascii	"gsmd_port_alloc\000"
	.type	debug_gsmd_ops, %object
	.size	debug_gsmd_ops, 108
debug_gsmd_ops:
	.space	8
	.word	debug_smd_read_stats
	.word	debug_smd_reset_stats
	.space	28
	.word	debug_smd_open
	.space	60
	.type	__func__.49591, %object
	.size	__func__.49591, 16
__func__.49591:
	.ascii	"gbam_disconnect\000"
	.type	__func__.49607, %object
	.size	__func__.49607, 13
__func__.49607:
	.ascii	"gbam_connect\000"
	.space	3
	.type	__func__.49618, %object
	.size	__func__.49618, 11
__func__.49618:
	.ascii	"gbam_setup\000"
	.space	1
	.type	__func__.49522, %object
	.size	__func__.49522, 16
__func__.49522:
	.ascii	"gbam_port_alloc\000"
	.type	__func__.49535, %object
	.size	__func__.49535, 20
__func__.49535:
	.ascii	"gbam2bam_port_alloc\000"
	.type	gbam_stats_ops, %object
	.size	gbam_stats_ops, 108
gbam_stats_ops:
	.space	8
	.word	gbam_read_stats
	.word	gbam_reset_stats
	.space	92
	.type	__func__.49824, %object
	.size	__func__.49824, 18
__func__.49824:
	.ascii	"gsmd_ctrl_connect\000"
	.space	2
	.type	__func__.49846, %object
	.size	__func__.49846, 21
__func__.49846:
	.ascii	"gsmd_ctrl_disconnect\000"
	.space	3
	.type	__func__.49913, %object
	.size	__func__.49913, 16
__func__.49913:
	.ascii	"gsmd_ctrl_setup\000"
	.type	ctrl_names, %object
	.size	ctrl_names, 24
ctrl_names:
	.word	.LC1727
	.word	.LC1728
	.word	.LC1729
	.word	.LC1728
	.space	8
	.type	__func__.49902, %object
	.size	__func__.49902, 27
__func__.49902:
	.ascii	"grmnet_ctrl_smd_port_alloc\000"
	.space	1
	.type	__func__.50033, %object
	.size	__func__.50033, 18
__func__.50033:
	.ascii	"gqti_ctrl_connect\000"
	.space	2
	.type	__func__.50044, %object
	.size	__func__.50044, 21
__func__.50044:
	.ascii	"gqti_ctrl_disconnect\000"
	.space	3
	.type	__func__.51019, %object
	.size	__func__.51019, 19
__func__.51019:
	.ascii	"ghsic_ctrl_connect\000"
	.space	1
	.type	__func__.51038, %object
	.size	__func__.51038, 22
__func__.51038:
	.ascii	"ghsic_ctrl_disconnect\000"
	.space	2
	.type	__func__.51105, %object
	.size	__func__.51105, 25
__func__.51105:
	.ascii	"ghsic_ctrl_set_port_name\000"
	.space	3
	.type	__func__.51114, %object
	.size	__func__.51114, 17
__func__.51114:
	.ascii	"ghsic_ctrl_setup\000"
	.space	3
	.type	__func__.51095, %object
	.size	__func__.51095, 17
__func__.51095:
	.ascii	"gctrl_port_alloc\000"
	.space	3
	.type	__func__.51625, %object
	.size	__func__.51625, 22
__func__.51625:
	.ascii	"ghsic_data_disconnect\000"
	.space	2
	.type	__func__.51642, %object
	.size	__func__.51642, 19
__func__.51642:
	.ascii	"ghsic_data_connect\000"
	.space	1
	.type	__func__.51777, %object
	.size	__func__.51777, 25
__func__.51777:
	.ascii	"ghsic_data_set_port_name\000"
	.space	3
	.type	__func__.51786, %object
	.size	__func__.51786, 17
__func__.51786:
	.ascii	"ghsic_data_setup\000"
	.space	3
	.type	__func__.51610, %object
	.size	__func__.51610, 22
__func__.51610:
	.ascii	"ghsic_data_port_alloc\000"
	.space	2
	.type	__func__.52024, %object
	.size	__func__.52024, 21
__func__.52024:
	.ascii	"ghsuart_ctrl_connect\000"
	.space	3
	.type	__func__.52042, %object
	.size	__func__.52042, 24
__func__.52042:
	.ascii	"ghsuart_ctrl_disconnect\000"
	.type	__func__.52093, %object
	.size	__func__.52093, 19
__func__.52093:
	.ascii	"ghsuart_ctrl_setup\000"
	.space	1
	.type	__func__.52080, %object
	.size	__func__.52080, 24
__func__.52080:
	.ascii	"ghsuart_ctrl_port_alloc\000"
	.type	CSWTCH.3053, %object
	.size	CSWTCH.3053, 36
CSWTCH.3053:
	.word	.LC1476
	.word	.LC1477
	.word	.LC1478
	.word	.LC1479
	.word	.LC1480
	.word	.LC1481
	.word	.LC1482
	.word	.LC1483
	.word	.LC1484
	.type	__func__.52573, %object
	.size	__func__.52573, 24
__func__.52573:
	.ascii	"ghsuart_data_disconnect\000"
	.type	__func__.38889, %object
	.size	__func__.38889, 15
__func__.38889:
	.ascii	"frmnet_disable\000"
	.space	1
	.type	__func__.38814, %object
	.size	__func__.38814, 23
__func__.38814:
	.ascii	"gport_rmnet_disconnect\000"
	.space	1
	.type	__func__.52593, %object
	.size	__func__.52593, 21
__func__.52593:
	.ascii	"ghsuart_data_connect\000"
	.space	3
	.type	__func__.38900, %object
	.size	__func__.38900, 15
__func__.38900:
	.ascii	"frmnet_set_alt\000"
	.space	1
	.type	__func__.38791, %object
	.size	__func__.38791, 20
__func__.38791:
	.ascii	"gport_rmnet_connect\000"
	.type	__func__.52675, %object
	.size	__func__.52675, 19
__func__.52675:
	.ascii	"ghsuart_data_setup\000"
	.space	1
	.type	ghsuart_data_names, %object
	.size	ghsuart_data_names, 8
ghsuart_data_names:
	.word	.LC1719
	.word	.LC1720
	.type	__func__.52556, %object
	.size	__func__.52556, 24
__func__.52556:
	.ascii	"ghsuart_data_port_alloc\000"
	.type	__func__.39061, %object
	.size	__func__.39061, 17
__func__.39061:
	.ascii	"frmnet_init_port\000"
	.space	3
	.type	__func__.63981, %object
	.size	__func__.63981, 27
__func__.63981:
	.ascii	"rmnet_function_bind_config\000"
	.space	1
	.type	__func__.38764, %object
	.size	__func__.38764, 18
__func__.38764:
	.ascii	"rmnet_gport_setup\000"
	.space	2
	.type	__func__.39040, %object
	.size	__func__.39040, 19
__func__.39040:
	.ascii	"frmnet_bind_config\000"
	.space	1
	.type	__func__.56716, %object
	.size	__func__.56716, 17
__func__.56716:
	.ascii	"rndis_msg_parser\000"
	.space	3
	.type	__func__.56628, %object
	.size	__func__.56628, 18
__func__.56628:
	.ascii	"gen_ndis_set_resp\000"
	.space	2
	.type	__func__.56406, %object
	.size	__func__.56406, 23
__func__.56406:
	.ascii	"rndis_command_complete\000"
	.space	1
	.type	__func__.58204, %object
	.size	__func__.58204, 26
__func__.58204:
	.ascii	"rndis_qc_command_complete\000"
	.space	2
	.type	__func__.56755, %object
	.size	__func__.56755, 20
__func__.56755:
	.ascii	"rndis_set_param_dev\000"
	.type	__func__.57089, %object
	.size	__func__.57089, 17
__func__.57089:
	.ascii	"ecm_qc_bam_setup\000"
	.space	3
	.type	__func__.57222, %object
	.size	__func__.57222, 19
__func__.57222:
	.ascii	"ecm_qc_bind_config\000"
	.space	1
	.type	__func__.58839, %object
	.size	__func__.58839, 19
__func__.58839:
	.ascii	"gether_qc_get_macs\000"
	.space	1
	.type	__func__.57405, %object
	.size	__func__.57405, 22
__func__.57405:
	.ascii	"mbim_configure_params\000"
	.space	2
	.type	__func__.57580, %object
	.size	__func__.57580, 13
__func__.57580:
	.ascii	"mbim_disable\000"
	.space	3
	.type	__func__.57418, %object
	.size	__func__.57418, 20
__func__.57418:
	.ascii	"mbim_bam_disconnect\000"
	.type	__func__.57857, %object
	.size	__func__.57857, 17
__func__.57857:
	.ascii	"bam_data_connect\000"
	.space	3
	.type	__func__.57568, %object
	.size	__func__.57568, 13
__func__.57568:
	.ascii	"mbim_set_alt\000"
	.space	3
	.type	__func__.57414, %object
	.size	__func__.57414, 17
__func__.57414:
	.ascii	"mbim_bam_connect\000"
	.space	3
	.type	__func__.58149, %object
	.size	__func__.58149, 19
__func__.58149:
	.ascii	"rndis_qc_bam_setup\000"
	.space	1
	.type	__func__.58308, %object
	.size	__func__.58308, 28
__func__.58308:
	.ascii	"rndis_qc_bind_config_vendor\000"
	.type	__func__.64339, %object
	.size	__func__.64339, 25
__func__.64339:
	.ascii	"ecm_function_bind_config\000"
	.space	3
	.type	__func__.58718, %object
	.size	__func__.58718, 15
__func__.58718:
	.ascii	"gether_connect\000"
	.space	1
	.type	__func__.63496, %object
	.size	__func__.63496, 12
__func__.63496:
	.ascii	"ncm_set_alt\000"
	.type	eth_qc_netdev_ops, %object
	.size	eth_qc_netdev_ops, 136
eth_qc_netdev_ops:
	.space	8
	.word	eth_qc_open
	.word	eth_qc_stop
	.word	eth_qc_start_xmit
	.space	12
	.word	eth_mac_addr
	.word	eth_validate_addr
	.space	8
	.word	ueth_qc_change_mtu
	.space	84
	.type	qc_ethtool_ops, %object
	.size	qc_ethtool_ops, 164
qc_ethtool_ops:
	.space	8
	.word	eth_qc_get_drvinfo
	.space	28
	.word	ethtool_op_get_link
	.space	120
	.type	__func__.64230, %object
	.size	__func__.64230, 30
__func__.64230:
	.ascii	"rndis_qc_function_bind_config\000"
	.space	2
	.type	__func__.64032, %object
	.size	__func__.64032, 28
__func__.64032:
	.ascii	"ecm_qc_function_bind_config\000"
	.type	__func__.57105, %object
	.size	__func__.57105, 22
__func__.57105:
	.ascii	"ecm_qc_bam_disconnect\000"
	.space	2
	.type	__func__.57099, %object
	.size	__func__.57099, 19
__func__.57099:
	.ascii	"ecm_qc_bam_connect\000"
	.space	1
	.type	__func__.58246, %object
	.size	__func__.58246, 17
__func__.58246:
	.ascii	"rndis_qc_disable\000"
	.space	3
	.type	__func__.58163, %object
	.size	__func__.58163, 24
__func__.58163:
	.ascii	"rndis_qc_bam_disconnect\000"
	.type	__func__.58158, %object
	.size	__func__.58158, 21
__func__.58158:
	.ascii	"rndis_qc_bam_connect\000"
	.space	3
	.type	__func__.61991, %object
	.size	__func__.61991, 20
__func__.61991:
	.ascii	"gaudio_open_snd_dev\000"
	.type	__func__.61916, %object
	.size	__func__.61916, 27
__func__.61916:
	.ascii	"playback_default_hw_params\000"
	.space	1
	.type	__func__.61922, %object
	.size	__func__.61922, 26
__func__.61922:
	.ascii	"capture_default_hw_params\000"
	.space	2
	.type	__func__.62004, %object
	.size	__func__.62004, 13
__func__.62004:
	.ascii	"gaudio_setup\000"
	.space	3
	.type	__func__.61999, %object
	.size	__func__.61999, 21
__func__.61999:
	.ascii	"gaudio_close_snd_dev\000"
	.space	3
	.type	__func__.62491, %object
	.size	__func__.62491, 18
__func__.62491:
	.ascii	"audio_bind_config\000"
	.space	2
	.type	__func__.62942, %object
	.size	__func__.62942, 25
__func__.62942:
	.ascii	"conn_gadget_complete_out\000"
	.space	3
	.type	__func__.63635, %object
	.size	__func__.63635, 25
__func__.63635:
	.ascii	"ncm_function_bind_config\000"
	.space	3
	.type	__func__.63650, %object
	.size	__func__.63650, 13
__func__.63650:
	.ascii	"is_ncm_ready\000"
	.space	3
	.type	__func__.63654, %object
	.size	__func__.63654, 26
__func__.63654:
	.ascii	"set_ncm_device_descriptor\000"
	.space	2
	.type	__func__.63687, %object
	.size	__func__.63687, 22
__func__.63687:
	.ascii	"terminal_ctrl_request\000"
	.space	2
	.type	__func__.44474, %object
	.size	__func__.44474, 16
__func__.44474:
	.ascii	"__ffs_ep0_stall\000"
	.type	__func__.44853, %object
	.size	__func__.44853, 12
__func__.44853:
	.ascii	"ffs_do_desc\000"
	.type	__func__.38141, %object
	.size	__func__.38141, 27
__func__.38141:
	.ascii	"rmnet_mux_smd_data_rx_tlet\000"
	.space	1
	.type	__func__.38118, %object
	.size	__func__.38118, 27
__func__.38118:
	.ascii	"rmnet_mux_smd_data_tx_tlet\000"
	.space	1
	.type	__func__.38267, %object
	.size	__func__.38267, 16
__func__.38267:
	.ascii	"rmnet_mux_setup\000"
	.type	__func__.38595, %object
	.size	__func__.38595, 28
__func__.38595:
	.ascii	"rmnet_smd_sdio_function_add\000"
	.type	__func__.31146, %object
	.size	__func__.31146, 13
__func__.31146:
	.ascii	"qdss_cleanup\000"
	.space	3
	.type	__func__.30974, %object
	.size	__func__.30974, 10
__func__.30974:
	.ascii	"qdss_bind\000"
	.space	2
	.type	__func__.30964, %object
	.size	__func__.30964, 11
__func__.30964:
	.ascii	"clear_desc\000"
	.space	1
	.type	__func__.30958, %object
	.size	__func__.30958, 10
__func__.30958:
	.ascii	"clear_eps\000"
	.space	2
	.type	__func__.30983, %object
	.size	__func__.30983, 12
__func__.30983:
	.ascii	"qdss_unbind\000"
	.type	__func__.31028, %object
	.size	__func__.31028, 13
__func__.31028:
	.ascii	"qdss_set_alt\000"
	.space	3
	.type	__func__.30989, %object
	.size	__func__.30989, 17
__func__.30989:
	.ascii	"qdss_eps_disable\000"
	.space	3
	.type	__func__.31005, %object
	.size	__func__.31005, 13
__func__.31005:
	.ascii	"qdss_disable\000"
	.space	3
	.type	__func__.31017, %object
	.size	__func__.31017, 22
__func__.31017:
	.ascii	"usb_qdss_connect_work\000"
	.space	2
	.type	__func__.30853, %object
	.size	__func__.30853, 25
__func__.30853:
	.ascii	"set_qdss_data_connection\000"
	.space	3
	.type	__func__.31040, %object
	.size	__func__.31040, 17
__func__.31040:
	.ascii	"qdss_bind_config\000"
	.space	3
	.type	__func__.53053, %object
	.size	__func__.53053, 9
__func__.53053:
	.ascii	"adb_read\000"
	.space	3
	.type	__func__.53088, %object
	.size	__func__.53088, 10
__func__.53088:
	.ascii	"adb_write\000"
	.space	2
	.type	__func__.53032, %object
	.size	__func__.53032, 26
__func__.53032:
	.ascii	"adb_create_bulk_endpoints\000"
	.space	2
	.type	__func__.53126, %object
	.size	__func__.53126, 18
__func__.53126:
	.ascii	"adb_function_bind\000"
	.space	2
	.type	__func__.53146, %object
	.size	__func__.53146, 21
__func__.53146:
	.ascii	"adb_function_set_alt\000"
	.space	3
	.type	__func__.53153, %object
	.size	__func__.53153, 21
__func__.53153:
	.ascii	"adb_function_disable\000"
	.space	3
	.type	__func__.53411, %object
	.size	__func__.53411, 18
__func__.53411:
	.ascii	"ccid_bulk_release\000"
	.space	2
	.type	__func__.53339, %object
	.size	__func__.53339, 20
__func__.53339:
	.ascii	"ccid_function_setup\000"
	.type	__func__.53555, %object
	.size	__func__.53555, 17
__func__.53555:
	.ascii	"ccid_bind_config\000"
	.space	3
	.type	__func__.54376, %object
	.size	__func__.54376, 15
__func__.54376:
	.ascii	"send_file_work\000"
	.space	1
	.type	__func__.54312, %object
	.size	__func__.54312, 9
__func__.54312:
	.ascii	"mtp_read\000"
	.space	3
	.type	__func__.54345, %object
	.size	__func__.54345, 10
__func__.54345:
	.ascii	"mtp_write\000"
	.space	2
	.type	__func__.54427, %object
	.size	__func__.54427, 15
__func__.54427:
	.ascii	"mtp_send_event\000"
	.space	1
	.type	__func__.54453, %object
	.size	__func__.54453, 10
__func__.54453:
	.ascii	"mtp_ioctl\000"
	.space	2
	.type	__func__.54273, %object
	.size	__func__.54273, 26
__func__.54273:
	.ascii	"mtp_create_bulk_endpoints\000"
	.space	2
	.type	__func__.54497, %object
	.size	__func__.54497, 18
__func__.54497:
	.ascii	"mtp_function_bind\000"
	.space	2
	.type	__func__.54524, %object
	.size	__func__.54524, 21
__func__.54524:
	.ascii	"mtp_function_set_alt\000"
	.space	3
	.type	__func__.54531, %object
	.size	__func__.54531, 21
__func__.54531:
	.ascii	"mtp_function_disable\000"
	.space	3
	.type	__func__.46067, %object
	.size	__func__.46067, 12
__func__.46067:
	.ascii	"send_status\000"
	.type	__func__.46085, %object
	.size	__func__.46085, 14
__func__.46085:
	.ascii	"check_command\000"
	.space	2
	.type	__func__.45809, %object
	.size	__func__.45809, 11
__func__.45809:
	.ascii	"do_read_cd\000"
	.space	1
	.type	__func__.45864, %object
	.size	__func__.45864, 9
__func__.45864:
	.ascii	"do_write\000"
	.space	3
	.type	__func__.45902, %object
	.size	__func__.45902, 10
__func__.45902:
	.ascii	"do_verify\000"
	.space	2
	.type	__func__.45990, %object
	.size	__func__.45990, 14
__func__.45990:
	.ascii	"do_start_stop\000"
	.space	2
	.type	__func__.45835, %object
	.size	__func__.45835, 8
__func__.45835:
	.ascii	"do_read\000"
	.type	__func__.45682, %object
	.size	__func__.45682, 13
__func__.45682:
	.ascii	"fsg_set_halt\000"
	.space	3
	.type	__func__.46024, %object
	.size	__func__.46024, 23
__func__.46024:
	.ascii	"wedge_bulk_in_endpoint\000"
	.space	1
	.type	__func__.46151, %object
	.size	__func__.46151, 13
__func__.46151:
	.ascii	"received_cbw\000"
	.space	3
	.type	__func__.46178, %object
	.size	__func__.46178, 17
__func__.46178:
	.ascii	"do_set_interface\000"
	.space	3
	.type	__func__.46305, %object
	.size	__func__.46305, 16
__func__.46305:
	.ascii	"fsg_common_init\000"
	.type	__func__.45449, %object
	.size	__func__.45449, 14
__func__.45449:
	.ascii	"fsg_lun_close\000"
	.space	2
	.type	__func__.45530, %object
	.size	__func__.45530, 16
__func__.45530:
	.ascii	"fsg_store_cdrom\000"
	.type	__func__.45497, %object
	.size	__func__.45497, 13
__func__.45497:
	.ascii	"fsg_store_ro\000"
	.space	3
	.type	__func__.45444, %object
	.size	__func__.45444, 13
__func__.45444:
	.ascii	"fsg_lun_open\000"
	.space	3
	.type	__func__.45518, %object
	.size	__func__.45518, 15
__func__.45518:
	.ascii	"fsg_store_file\000"
	.space	1
	.type	__func__.46328, %object
	.size	__func__.46328, 11
__func__.46328:
	.ascii	"fsg_unbind\000"
	.space	1
	.type	__func__.55661, %object
	.size	__func__.55661, 9
__func__.55661:
	.ascii	"acc_read\000"
	.space	3
	.type	__func__.55695, %object
	.size	__func__.55695, 10
__func__.55695:
	.ascii	"acc_write\000"
	.space	2
	.type	__func__.55526, %object
	.size	__func__.55526, 16
__func__.55526:
	.ascii	"acc_complete_in\000"
	.type	__func__.55533, %object
	.size	__func__.55533, 17
__func__.55533:
	.ascii	"acc_complete_out\000"
	.space	3
	.type	__func__.55629, %object
	.size	__func__.55629, 22
__func__.55629:
	.ascii	"create_bulk_endpoints\000"
	.space	2
	.type	__func__.55795, %object
	.size	__func__.55795, 18
__func__.55795:
	.ascii	"acc_function_bind\000"
	.space	2
	.type	__func__.55885, %object
	.size	__func__.55885, 21
__func__.55885:
	.ascii	"acc_function_set_alt\000"
	.space	3
	.type	__func__.55892, %object
	.size	__func__.55892, 21
__func__.55892:
	.ascii	"acc_function_disable\000"
	.space	3
	.type	__func__.64493, %object
	.size	__func__.64493, 24
__func__.64493:
	.ascii	"android_uasp_connect_cb\000"
	.type	__func__.63413, %object
	.size	__func__.63413, 20
__func__.63413:
	.ascii	"ncm_notify_complete\000"
	.type	__func__.63391, %object
	.size	__func__.63391, 14
__func__.63391:
	.ascii	"ncm_do_notify\000"
	.space	2
	.type	__func__.63584, %object
	.size	__func__.63584, 9
__func__.63584:
	.ascii	"ncm_bind\000"
	.space	3
	.type	__func__.63591, %object
	.size	__func__.63591, 11
__func__.63591:
	.ascii	"ncm_unbind\000"
	.space	1
	.type	__func__.63423, %object
	.size	__func__.63423, 20
__func__.63423:
	.ascii	"ncm_ep0out_complete\000"
	.type	__func__.63561, %object
	.size	__func__.63561, 12
__func__.63561:
	.ascii	"ncm_disable\000"
	.type	__func__.58855, %object
	.size	__func__.58855, 21
__func__.58855:
	.ascii	"gether_qc_setup_name\000"
	.space	3
	.type	__func__.58709, %object
	.size	__func__.58709, 18
__func__.58709:
	.ascii	"gether_setup_name\000"
	.space	2
	.type	__func__.58239, %object
	.size	__func__.58239, 17
__func__.58239:
	.ascii	"rndis_qc_set_alt\000"
	.space	3
	.type	__func__.58006, %object
	.size	__func__.58006, 20
__func__.58006:
	.ascii	"ecm_notify_complete\000"
	.type	__func__.58075, %object
	.size	__func__.58075, 9
__func__.58075:
	.ascii	"ecm_bind\000"
	.space	3
	.type	__func__.58082, %object
	.size	__func__.58082, 11
__func__.58082:
	.ascii	"ecm_unbind\000"
	.space	1
	.type	__func__.57985, %object
	.size	__func__.57985, 14
__func__.57985:
	.ascii	"ecm_do_notify\000"
	.space	2
	.type	__func__.58037, %object
	.size	__func__.58037, 12
__func__.58037:
	.ascii	"ecm_set_alt\000"
	.type	__func__.58021, %object
	.size	__func__.58021, 10
__func__.58021:
	.ascii	"ecm_setup\000"
	.space	2
	.type	__func__.58052, %object
	.size	__func__.58052, 12
__func__.58052:
	.ascii	"ecm_disable\000"
	.type	__func__.57128, %object
	.size	__func__.57128, 23
__func__.57128:
	.ascii	"ecm_qc_notify_complete\000"
	.space	1
	.type	__func__.57214, %object
	.size	__func__.57214, 14
__func__.57214:
	.ascii	"ecm_qc_unbind\000"
	.space	2
	.type	__func__.57077, %object
	.size	__func__.57077, 17
__func__.57077:
	.ascii	"ecm_qc_do_notify\000"
	.space	3
	.type	__func__.57159, %object
	.size	__func__.57159, 15
__func__.57159:
	.ascii	"ecm_qc_set_alt\000"
	.space	1
	.type	__func__.57174, %object
	.size	__func__.57174, 15
__func__.57174:
	.ascii	"ecm_qc_disable\000"
	.space	1
	.type	__func__.56884, %object
	.size	__func__.56884, 17
__func__.56884:
	.ascii	"rndis_proc_write\000"
	.space	3
	.type	__func__.56371, %object
	.size	__func__.56371, 17
__func__.56371:
	.ascii	"rndis_add_header\000"
	.space	3
	.type	__func__.56381, %object
	.size	__func__.56381, 25
__func__.56381:
	.ascii	"rndis_response_available\000"
	.space	3
	.type	__func__.56473, %object
	.size	__func__.56473, 11
__func__.56473:
	.ascii	"rndis_bind\000"
	.space	1
	.type	__func__.56440, %object
	.size	__func__.56440, 14
__func__.56440:
	.ascii	"rndis_set_alt\000"
	.space	2
	.type	__func__.56394, %object
	.size	__func__.56394, 24
__func__.56394:
	.ascii	"rndis_response_complete\000"
	.type	__func__.56427, %object
	.size	__func__.56427, 12
__func__.56427:
	.ascii	"rndis_setup\000"
	.type	__func__.56449, %object
	.size	__func__.56449, 14
__func__.56449:
	.ascii	"rndis_disable\000"
	.space	2
	.type	__func__.53897, %object
	.size	__func__.53897, 14
__func__.53897:
	.ascii	"f_midi_unbind\000"
	.space	2
	.type	__func__.53860, %object
	.size	__func__.53860, 16
__func__.53860:
	.ascii	"f_midi_complete\000"
	.type	__func__.53888, %object
	.size	__func__.53888, 15
__func__.53888:
	.ascii	"f_midi_disable\000"
	.space	1
	.type	__func__.52880, %object
	.size	__func__.52880, 24
__func__.52880:
	.ascii	"acm_notify_serial_state\000"
	.type	__func__.52920, %object
	.size	__func__.52920, 9
__func__.52920:
	.ascii	"acm_bind\000"
	.space	3
	.type	__func__.52844, %object
	.size	__func__.52844, 12
__func__.52844:
	.ascii	"acm_set_alt\000"
	.type	__func__.52808, %object
	.size	__func__.52808, 29
__func__.52808:
	.ascii	"acm_complete_set_line_coding\000"
	.space	3
	.type	__func__.52833, %object
	.size	__func__.52833, 10
__func__.52833:
	.ascii	"acm_setup\000"
	.space	2
	.type	__func__.52852, %object
	.size	__func__.52852, 12
__func__.52852:
	.ascii	"acm_disable\000"
	.type	__func__.52689, %object
	.size	__func__.52689, 18
__func__.52689:
	.ascii	"ghsuart_data_init\000"
	.space	2
	.type	__func__.52305, %object
	.size	__func__.52305, 28
__func__.52305:
	.ascii	"ghsuart_data_alloc_requests\000"
	.type	__func__.52410, %object
	.size	__func__.52410, 22
__func__.52410:
	.ascii	"ghsuart_data_start_io\000"
	.space	2
	.type	__func__.52455, %object
	.size	__func__.52455, 21
__func__.52455:
	.ascii	"ghsuart_notify_event\000"
	.space	3
	.type	__func__.52151, %object
	.size	__func__.52151, 18
__func__.52151:
	.ascii	"ghsuart_ctrl_init\000"
	.space	2
	.type	__func__.51384, %object
	.size	__func__.51384, 26
__func__.51384:
	.ascii	"ghsic_data_alloc_requests\000"
	.space	2
	.type	__func__.51529, %object
	.size	__func__.51529, 20
__func__.51529:
	.ascii	"ghsic_data_start_io\000"
	.type	__func__.50059, %object
	.size	__func__.50059, 16
__func__.50059:
	.ascii	"rmnet_ctrl_open\000"
	.type	__func__.50071, %object
	.size	__func__.50071, 19
__func__.50071:
	.ascii	"rmnet_ctrl_release\000"
	.space	1
	.type	__func__.47637, %object
	.size	__func__.47637, 16
__func__.47637:
	.ascii	"gserial_connect\000"
	.type	__func__.47419, %object
	.size	__func__.47419, 8
__func__.47419:
	.ascii	"gs_open\000"
	.type	__func__.47438, %object
	.size	__func__.47438, 9
__func__.47438:
	.ascii	"gs_close\000"
	.space	3
	.type	__func__.40950, %object
	.size	__func__.40950, 20
__func__.40950:
	.ascii	"audio_data_complete\000"
	.type	__func__.41009, %object
	.size	__func__.41009, 14
__func__.41009:
	.ascii	"audio_set_alt\000"
	.space	2
	.type	__func__.41015, %object
	.size	__func__.41015, 14
__func__.41015:
	.ascii	"audio_disable\000"
	.space	2
	.type	__func__.40978, %object
	.size	__func__.40978, 30
__func__.40978:
	.ascii	"audio_source_get_endpoint_req\000"
	.space	2
	.type	__func__.40960, %object
	.size	__func__.40960, 30
__func__.40960:
	.ascii	"audio_source_set_endpoint_req\000"
	.space	2
	.type	__func__.40999, %object
	.size	__func__.40999, 12
__func__.40999:
	.ascii	"audio_setup\000"
	.type	__func__.37278, %object
	.size	__func__.37278, 26
__func__.37278:
	.ascii	"rmnet_sdio_ctl_receive_cb\000"
	.space	2
	.type	__func__.37299, %object
	.size	__func__.37299, 24
__func__.37299:
	.ascii	"rmnet_sdio_sts_callback\000"
	.type	__func__.37362, %object
	.size	__func__.37362, 17
__func__.37362:
	.ascii	"rmnet_sdio_setup\000"
	.space	3
	.type	__func__.31852, %object
	.size	__func__.31852, 22
__func__.31852:
	.ascii	"rmnet_control_rx_tlet\000"
	.space	2
	.type	__func__.31957, %object
	.size	__func__.31957, 19
__func__.31957:
	.ascii	"rmnet_data_rx_tlet\000"
	.space	1
	.type	__func__.31932, %object
	.size	__func__.31932, 19
__func__.31932:
	.ascii	"rmnet_data_tx_tlet\000"
	.space	1
	.type	__func__.32040, %object
	.size	__func__.32040, 19
__func__.32040:
	.ascii	"rmnet_smd_ch_probe\000"
	.space	1
	.type	__func__.31897, %object
	.size	__func__.31897, 16
__func__.31897:
	.ascii	"rmnet_smd_setup\000"
	.type	__func__.31133, %object
	.size	__func__.31133, 15
__func__.31133:
	.ascii	"usb_qdss_close\000"
	.space	1
	.type	__func__.31108, %object
	.size	__func__.31108, 14
__func__.31108:
	.ascii	"usb_qdss_open\000"
	.space	2
	.type	__func__.31085, %object
	.size	__func__.31085, 20
__func__.31085:
	.ascii	"usb_qdss_ctrl_write\000"
	.type	__func__.31068, %object
	.size	__func__.31068, 19
__func__.31068:
	.ascii	"usb_qdss_ctrl_read\000"
	.space	1
	.type	__func__.30901, %object
	.size	__func__.30901, 25
__func__.30901:
	.ascii	"qdss_ctrl_write_complete\000"
	.space	3
	.type	__func__.30913, %object
	.size	__func__.30913, 24
__func__.30913:
	.ascii	"qdss_ctrl_read_complete\000"
	.type	__func__.30945, %object
	.size	__func__.30945, 19
__func__.30945:
	.ascii	"usb_qdss_alloc_req\000"
	.space	1
	.type	__func__.30925, %object
	.size	__func__.30925, 18
__func__.30925:
	.ascii	"usb_qdss_free_req\000"
	.space	2
	.type	__func__.30861, %object
	.size	__func__.30861, 10
__func__.30861:
	.ascii	"init_data\000"
	.space	2
	.type	__func__.30843, %object
	.size	__func__.30843, 13
__func__.30843:
	.ascii	"send_sps_req\000"
	.space	3
	.type	__func__.26073, %object
	.size	__func__.26073, 22
__func__.26073:
	.ascii	"diag_function_disable\000"
	.space	2
	.type	__func__.26119, %object
	.size	__func__.26119, 18
__func__.26119:
	.ascii	"diag_function_add\000"
	.space	2
	.type	__func__.25506, %object
	.size	__func__.25506, 18
__func__.25506:
	.ascii	"composite_suspend\000"
	.space	2
	.type	__func__.25521, %object
	.size	__func__.25521, 17
__func__.25521:
	.ascii	"composite_resume\000"
	.space	3
	.type	__func__.25370, %object
	.size	__func__.25370, 25
__func__.25370:
	.ascii	"composite_setup_complete\000"
	.space	3
	.type	__func__.25257, %object
	.size	__func__.25257, 14
__func__.25257:
	.ascii	"unbind_config\000"
	.space	2
	.type	__func__.25170, %object
	.size	__func__.25170, 13
__func__.25170:
	.ascii	"reset_config\000"
	.space	3
	.type	__func__.25228, %object
	.size	__func__.25228, 15
__func__.25228:
	.ascii	"usb_add_config\000"
	.space	1
	.type	__func__.25067, %object
	.size	__func__.25067, 17
__func__.25067:
	.ascii	"usb_add_function\000"
	.space	3
	.type	mirrorlink_shortname, %object
	.size	mirrorlink_shortname, 8
mirrorlink_shortname:
	.ascii	"usb_ncm\000"
	.type	conn_gadget_fops, %object
	.size	conn_gadget_fops, 108
conn_gadget_fops:
	.word	0
	.space	4
	.word	conn_gadget_read
	.word	conn_gadget_write
	.space	12
	.word	conn_gadget_poll
	.word	conn_gadget_ioctl
	.space	8
	.word	conn_gadget_open
	.word	conn_gadget_flush
	.word	conn_gadget_release
	.space	52
	.type	conn_gadget_shortname, %object
	.size	conn_gadget_shortname, 17
conn_gadget_shortname:
	.ascii	"android_ssusbcon\000"
	.space	3
	.type	__param_str_audio_capture_buf_size, %object
	.size	__param_str_audio_capture_buf_size, 31
__param_str_audio_capture_buf_size:
	.ascii	"android.audio_capture_buf_size\000"
	.space	1
	.type	__param_str_req_capture_count, %object
	.size	__param_str_req_capture_count, 26
__param_str_req_capture_count:
	.ascii	"android.req_capture_count\000"
	.space	2
	.type	__param_str_req_capture_buf_size, %object
	.size	__param_str_req_capture_buf_size, 29
__param_str_req_capture_buf_size:
	.ascii	"android.req_capture_buf_size\000"
	.space	3
	.type	__param_str_audio_playback_buf_size, %object
	.size	__param_str_audio_playback_buf_size, 32
__param_str_audio_playback_buf_size:
	.ascii	"android.audio_playback_buf_size\000"
	.type	__param_str_req_playback_count, %object
	.size	__param_str_req_playback_count, 27
__param_str_req_playback_count:
	.ascii	"android.req_playback_count\000"
	.space	1
	.type	__param_str_req_playback_buf_size, %object
	.size	__param_str_req_playback_buf_size, 30
__param_str_req_playback_buf_size:
	.ascii	"android.req_playback_buf_size\000"
	.space	2
	.type	__param_str_fn_cntl, %object
	.size	__param_str_fn_cntl, 16
__param_str_fn_cntl:
	.ascii	"android.fn_cntl\000"
	.type	__param_str_fn_cap, %object
	.size	__param_str_fn_cap, 15
__param_str_fn_cap:
	.ascii	"android.fn_cap\000"
	.space	1
	.type	__param_str_fn_play, %object
	.size	__param_str_fn_play, 16
__param_str_fn_play:
	.ascii	"android.fn_play\000"
	.type	__param_str_qc_host_addr, %object
	.size	__param_str_qc_host_addr, 21
__param_str_qc_host_addr:
	.ascii	"android.qc_host_addr\000"
	.space	3
	.type	__param_str_qc_dev_addr, %object
	.size	__param_str_qc_dev_addr, 20
__param_str_qc_dev_addr:
	.ascii	"android.qc_dev_addr\000"
	.type	__param_str_host_addr, %object
	.size	__param_str_host_addr, 18
__param_str_host_addr:
	.ascii	"android.host_addr\000"
	.space	2
	.type	__param_str_dev_addr, %object
	.size	__param_str_dev_addr, 17
__param_str_dev_addr:
	.ascii	"android.dev_addr\000"
	.space	3
	.type	__param_str_qmult, %object
	.size	__param_str_qmult, 14
__param_str_qmult:
	.ascii	"android.qmult\000"
	.space	2
	.type	rndis_qc_fops, %object
	.size	rndis_qc_fops, 108
rndis_qc_fops:
	.word	0
	.space	28
	.word	rndis_qc_ioctl
	.space	8
	.word	rndis_qc_open_dev
	.space	4
	.word	rndis_qc_release_dev
	.space	52
	.type	mbim_fops, %object
	.size	mbim_fops, 108
mbim_fops:
	.word	0
	.space	4
	.word	mbim_read
	.word	mbim_write
	.space	16
	.word	mbim_ioctl
	.space	8
	.word	mbim_open
	.space	4
	.word	mbim_release
	.space	52
	.type	__param_str_rndis_ul_max_xfer_size_rcvd, %object
	.size	__param_str_rndis_ul_max_xfer_size_rcvd, 36
__param_str_rndis_ul_max_xfer_size_rcvd:
	.ascii	"android.rndis_ul_max_xfer_size_rcvd\000"
	.type	__param_str_rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	__param_str_rndis_ul_max_pkt_per_xfer_rcvd, 39
__param_str_rndis_ul_max_pkt_per_xfer_rcvd:
	.ascii	"android.rndis_ul_max_pkt_per_xfer_rcvd\000"
	.space	1
	.type	__param_str_rndis_ul_max_pkt_per_xfer, %object
	.size	__param_str_rndis_ul_max_pkt_per_xfer, 34
__param_str_rndis_ul_max_pkt_per_xfer:
	.ascii	"android.rndis_ul_max_pkt_per_xfer\000"
	.space	2
	.type	__param_str_rndis_dl_max_pkt_per_xfer, %object
	.size	__param_str_rndis_dl_max_pkt_per_xfer, 34
__param_str_rndis_dl_max_pkt_per_xfer:
	.ascii	"android.rndis_dl_max_pkt_per_xfer\000"
	.space	2
	.type	acc_hid_table, %object
	.size	acc_hid_table, 32
acc_hid_table:
	.short	3
	.space	2
	.word	-1
	.word	-1
	.space	4
	.space	16
	.type	acc_fops, %object
	.size	acc_fops, 108
acc_fops:
	.word	0
	.space	4
	.word	acc_read
	.word	acc_write
	.space	16
	.word	acc_ioctl
	.space	8
	.word	acc_open
	.space	4
	.word	acc_release
	.space	52
	.type	mtp_fops, %object
	.size	mtp_fops, 108
mtp_fops:
	.word	0
	.space	4
	.word	mtp_read
	.word	mtp_write
	.space	16
	.word	mtp_ioctl
	.space	8
	.word	mtp_open
	.space	4
	.word	mtp_release
	.space	52
	.type	mtp_shortname, %object
	.size	mtp_shortname, 8
mtp_shortname:
	.ascii	"mtp_usb\000"
	.type	__param_str_mtp_tx_reqs, %object
	.size	__param_str_mtp_tx_reqs, 20
__param_str_mtp_tx_reqs:
	.ascii	"android.mtp_tx_reqs\000"
	.type	__param_str_mtp_tx_req_len, %object
	.size	__param_str_mtp_tx_req_len, 23
__param_str_mtp_tx_req_len:
	.ascii	"android.mtp_tx_req_len\000"
	.space	1
	.type	__param_str_mtp_rx_req_len, %object
	.size	__param_str_mtp_rx_req_len, 23
__param_str_mtp_rx_req_len:
	.ascii	"android.mtp_rx_req_len\000"
	.space	1
	.type	ccid_ctrl_fops, %object
	.size	ccid_ctrl_fops, 108
ccid_ctrl_fops:
	.word	0
	.space	4
	.word	ccid_ctrl_read
	.space	20
	.word	ccid_ctrl_ioctl
	.space	8
	.word	ccid_ctrl_open
	.space	4
	.word	ccid_ctrl_release
	.space	52
	.type	ccid_bulk_fops, %object
	.size	ccid_bulk_fops, 108
ccid_bulk_fops:
	.word	0
	.space	4
	.word	ccid_bulk_read
	.word	ccid_bulk_write
	.space	28
	.word	ccid_bulk_open
	.space	4
	.word	ccid_bulk_release
	.space	52
	.type	adb_fops, %object
	.size	adb_fops, 108
adb_fops:
	.word	0
	.space	4
	.word	adb_read
	.word	adb_write
	.space	28
	.word	adb_open
	.space	4
	.word	adb_release
	.space	52
	.type	adb_shortname, %object
	.size	adb_shortname, 12
adb_shortname:
	.ascii	"android_adb\000"
	.type	modem_fops, %object
	.size	modem_fops, 108
modem_fops:
	.word	0
	.word	no_llseek
	.word	modem_read
	.space	16
	.word	modem_poll
	.word	modem_ioctl
	.space	8
	.word	modem_open
	.space	4
	.word	modem_close
	.space	52
	.type	__param_str_ghsuart_data_tx_intr_thld, %object
	.size	__param_str_ghsuart_data_tx_intr_thld, 34
__param_str_ghsuart_data_tx_intr_thld:
	.ascii	"android.ghsuart_data_tx_intr_thld\000"
	.space	2
	.type	__param_str_ghsuart_data_rx_req_size, %object
	.size	__param_str_ghsuart_data_rx_req_size, 33
__param_str_ghsuart_data_rx_req_size:
	.ascii	"android.ghsuart_data_rx_req_size\000"
	.space	3
	.type	__param_str_ghsuart_data_serial_rx_q_size, %object
	.size	__param_str_ghsuart_data_serial_rx_q_size, 38
__param_str_ghsuart_data_serial_rx_q_size:
	.ascii	"android.ghsuart_data_serial_rx_q_size\000"
	.space	2
	.type	__param_str_ghsuart_data_serial_tx_q_size, %object
	.size	__param_str_ghsuart_data_serial_tx_q_size, 38
__param_str_ghsuart_data_serial_tx_q_size:
	.ascii	"android.ghsuart_data_serial_tx_q_size\000"
	.space	2
	.type	__param_str_ghsuart_data_rmnet_rx_q_size, %object
	.size	__param_str_ghsuart_data_rmnet_rx_q_size, 37
__param_str_ghsuart_data_rmnet_rx_q_size:
	.ascii	"android.ghsuart_data_rmnet_rx_q_size\000"
	.space	3
	.type	__param_str_ghsuart_data_rmnet_tx_q_size, %object
	.size	__param_str_ghsuart_data_rmnet_tx_q_size, 37
__param_str_ghsuart_data_rmnet_tx_q_size:
	.ascii	"android.ghsuart_data_rmnet_tx_q_size\000"
	.space	3
	.type	__param_str_record_timestamp, %object
	.size	__param_str_record_timestamp, 25
__param_str_record_timestamp:
	.ascii	"android.record_timestamp\000"
	.space	3
	.type	__param_str_ghsic_data_pend_limit_with_bridge, %object
	.size	__param_str_ghsic_data_pend_limit_with_bridge, 42
__param_str_ghsic_data_pend_limit_with_bridge:
	.ascii	"android.ghsic_data_pend_limit_with_bridge\000"
	.space	2
	.type	__param_str_ghsic_data_fctrl_dis_thld, %object
	.size	__param_str_ghsic_data_fctrl_dis_thld, 34
__param_str_ghsic_data_fctrl_dis_thld:
	.ascii	"android.ghsic_data_fctrl_dis_thld\000"
	.space	2
	.type	__param_str_ghsic_data_fctrl_en_thld, %object
	.size	__param_str_ghsic_data_fctrl_en_thld, 33
__param_str_ghsic_data_fctrl_en_thld:
	.ascii	"android.ghsic_data_fctrl_en_thld\000"
	.space	3
	.type	__param_str_ghsic_data_fctrl_support, %object
	.size	__param_str_ghsic_data_fctrl_support, 33
__param_str_ghsic_data_fctrl_support:
	.ascii	"android.ghsic_data_fctrl_support\000"
	.space	3
	.type	__param_str_ghsic_data_tx_intr_thld, %object
	.size	__param_str_ghsic_data_tx_intr_thld, 32
__param_str_ghsic_data_tx_intr_thld:
	.ascii	"android.ghsic_data_tx_intr_thld\000"
	.type	__param_str_ghsic_data_rx_req_size, %object
	.size	__param_str_ghsic_data_rx_req_size, 31
__param_str_ghsic_data_rx_req_size:
	.ascii	"android.ghsic_data_rx_req_size\000"
	.space	1
	.type	__param_str_ghsic_data_serial_rx_q_size, %object
	.size	__param_str_ghsic_data_serial_rx_q_size, 36
__param_str_ghsic_data_serial_rx_q_size:
	.ascii	"android.ghsic_data_serial_rx_q_size\000"
	.type	__param_str_ghsic_data_serial_tx_q_size, %object
	.size	__param_str_ghsic_data_serial_tx_q_size, 36
__param_str_ghsic_data_serial_tx_q_size:
	.ascii	"android.ghsic_data_serial_tx_q_size\000"
	.type	__param_str_ghsic_data_rmnet_rx_q_size, %object
	.size	__param_str_ghsic_data_rmnet_rx_q_size, 35
__param_str_ghsic_data_rmnet_rx_q_size:
	.ascii	"android.ghsic_data_rmnet_rx_q_size\000"
	.space	1
	.type	__param_str_ghsic_data_rmnet_tx_q_size, %object
	.size	__param_str_ghsic_data_rmnet_tx_q_size, 35
__param_str_ghsic_data_rmnet_tx_q_size:
	.ascii	"android.ghsic_data_rmnet_tx_q_size\000"
	.space	1
	.type	rmnet_ctrl_fops, %object
	.size	rmnet_ctrl_fops, 108
rmnet_ctrl_fops:
	.word	0
	.space	4
	.word	rmnet_ctrl_read
	.word	rmnet_ctrl_write
	.space	12
	.word	rmnet_ctrl_poll
	.word	rmnet_ctrl_ioctl
	.space	8
	.word	rmnet_ctrl_open
	.space	4
	.word	rmnet_ctrl_release
	.space	52
	.type	__param_str_dl_intr_threshold, %object
	.size	__param_str_dl_intr_threshold, 26
__param_str_dl_intr_threshold:
	.ascii	"android.dl_intr_threshold\000"
	.space	2
	.type	__param_str_bam_mux_rx_req_size, %object
	.size	__param_str_bam_mux_rx_req_size, 28
__param_str_bam_mux_rx_req_size:
	.ascii	"android.bam_mux_rx_req_size\000"
	.type	__param_str_bam_mux_rx_q_size, %object
	.size	__param_str_bam_mux_rx_q_size, 26
__param_str_bam_mux_rx_q_size:
	.ascii	"android.bam_mux_rx_q_size\000"
	.space	2
	.type	__param_str_bam_mux_tx_q_size, %object
	.size	__param_str_bam_mux_tx_q_size, 26
__param_str_bam_mux_tx_q_size:
	.ascii	"android.bam_mux_tx_q_size\000"
	.space	2
	.type	__param_str_bam_mux_rx_fctrl_dis_thld, %object
	.size	__param_str_bam_mux_rx_fctrl_dis_thld, 34
__param_str_bam_mux_rx_fctrl_dis_thld:
	.ascii	"android.bam_mux_rx_fctrl_dis_thld\000"
	.space	2
	.type	__param_str_bam_mux_rx_fctrl_support, %object
	.size	__param_str_bam_mux_rx_fctrl_support, 33
__param_str_bam_mux_rx_fctrl_support:
	.ascii	"android.bam_mux_rx_fctrl_support\000"
	.space	3
	.type	__param_str_bam_mux_rx_fctrl_en_thld, %object
	.size	__param_str_bam_mux_rx_fctrl_en_thld, 33
__param_str_bam_mux_rx_fctrl_en_thld:
	.ascii	"android.bam_mux_rx_fctrl_en_thld\000"
	.space	3
	.type	__param_str_bam_mux_tx_pkt_drop_thld, %object
	.size	__param_str_bam_mux_tx_pkt_drop_thld, 33
__param_str_bam_mux_tx_pkt_drop_thld:
	.ascii	"android.bam_mux_tx_pkt_drop_thld\000"
	.space	3
	.type	__param_str_bam_pending_limit, %object
	.size	__param_str_bam_pending_limit, 26
__param_str_bam_pending_limit:
	.ascii	"android.bam_pending_limit\000"
	.space	2
	.type	fsg_string_interface, %object
	.size	fsg_string_interface, 13
fsg_string_interface:
	.ascii	"Mass Storage\000"
	.space	3
	.type	rmnet_mux_ctrl_fops, %object
	.size	rmnet_mux_ctrl_fops, 108
rmnet_mux_ctrl_fops:
	.word	0
	.space	4
	.word	usb_rmnet_mux_ctrl_read
	.word	usb_rmnet_mux_ctrl_write
	.space	16
	.word	usb_rmnet_mux_ctrl_ioctl
	.space	8
	.word	usb_rmnet_mux_ctrl_open
	.space	4
	.word	usb_rmnet_mux_ctrl_release
	.space	52
	.type	__param_str_mux_sdio_rx_fctrl_dis_thld, %object
	.size	__param_str_mux_sdio_rx_fctrl_dis_thld, 35
__param_str_mux_sdio_rx_fctrl_dis_thld:
	.ascii	"android.mux_sdio_rx_fctrl_dis_thld\000"
	.space	1
	.type	__param_str_mux_sdio_rx_fctrl_en_thld, %object
	.size	__param_str_mux_sdio_rx_fctrl_en_thld, 34
__param_str_mux_sdio_rx_fctrl_en_thld:
	.ascii	"android.mux_sdio_rx_fctrl_en_thld\000"
	.space	2
	.type	__param_str_mux_sdio_tx_pkt_drop_thld, %object
	.size	__param_str_mux_sdio_tx_pkt_drop_thld, 34
__param_str_mux_sdio_tx_pkt_drop_thld:
	.ascii	"android.mux_sdio_tx_pkt_drop_thld\000"
	.space	2
	.type	__param_str_rmnet_mux_smd_data_ch, %object
	.size	__param_str_rmnet_mux_smd_data_ch, 30
__param_str_rmnet_mux_smd_data_ch:
	.ascii	"android.rmnet_mux_smd_data_ch\000"
	.space	2
	.type	__param_str_rmnet_mux_sdio_data_ch, %object
	.size	__param_str_rmnet_mux_sdio_data_ch, 31
__param_str_rmnet_mux_sdio_data_ch:
	.ascii	"android.rmnet_mux_sdio_data_ch\000"
	.space	1
	.type	__param_str_rmnet_mux_sdio_ctl_ch, %object
	.size	__param_str_rmnet_mux_sdio_ctl_ch, 30
__param_str_rmnet_mux_sdio_ctl_ch:
	.ascii	"android.rmnet_mux_sdio_ctl_ch\000"
	.space	2
	.type	__param_str_sdio_rx_fctrl_dis_thld, %object
	.size	__param_str_sdio_rx_fctrl_dis_thld, 31
__param_str_sdio_rx_fctrl_dis_thld:
	.ascii	"android.sdio_rx_fctrl_dis_thld\000"
	.space	1
	.type	__param_str_sdio_rx_fctrl_en_thld, %object
	.size	__param_str_sdio_rx_fctrl_en_thld, 30
__param_str_sdio_rx_fctrl_en_thld:
	.ascii	"android.sdio_rx_fctrl_en_thld\000"
	.space	2
	.type	__param_str_sdio_tx_pkt_drop_thld, %object
	.size	__param_str_sdio_tx_pkt_drop_thld, 30
__param_str_sdio_tx_pkt_drop_thld:
	.ascii	"android.sdio_tx_pkt_drop_thld\000"
	.space	2
	.type	__param_str_rmnet_sdio_data_ch, %object
	.size	__param_str_rmnet_sdio_data_ch, 27
__param_str_rmnet_sdio_data_ch:
	.ascii	"android.rmnet_sdio_data_ch\000"
	.space	1
	.type	__param_str_rmnet_sdio_ctl_ch, %object
	.size	__param_str_rmnet_sdio_ctl_ch, 26
__param_str_rmnet_sdio_ctl_ch:
	.ascii	"android.rmnet_sdio_ctl_ch\000"
	.space	2
	.type	__param_str_rmnet_data_ch, %object
	.size	__param_str_rmnet_data_ch, 22
__param_str_rmnet_data_ch:
	.ascii	"android.rmnet_data_ch\000"
	.space	2
	.type	__param_str_rmnet_ctl_ch, %object
	.size	__param_str_rmnet_ctl_ch, 21
__param_str_rmnet_ctl_ch:
	.ascii	"android.rmnet_ctl_ch\000"
	.space	3
	.type	__param_str_iSerialNumber, %object
	.size	__param_str_iSerialNumber, 22
__param_str_iSerialNumber:
	.ascii	"android.iSerialNumber\000"
	.space	2
	.type	__param_str_iProduct, %object
	.size	__param_str_iProduct, 17
__param_str_iProduct:
	.ascii	"android.iProduct\000"
	.space	3
	.type	__param_str_iManufacturer, %object
	.size	__param_str_iManufacturer, 22
__param_str_iManufacturer:
	.ascii	"android.iManufacturer\000"
	.space	2
	.type	__param_str_bcdDevice, %object
	.size	__param_str_bcdDevice, 18
__param_str_bcdDevice:
	.ascii	"android.bcdDevice\000"
	.space	2
	.type	__param_str_idProduct, %object
	.size	__param_str_idProduct, 18
__param_str_idProduct:
	.ascii	"android.idProduct\000"
	.space	2
	.type	__param_str_idVendor, %object
	.size	__param_str_idVendor, 17
__param_str_idVendor:
	.ascii	"android.idVendor\000"
	.data
	.align	3
	.set	.LANCHOR0,. + 0
	.set	.LANCHOR7,. + 8184
	.type	usb_diag_ch_list, %object
	.size	usb_diag_ch_list, 8
usb_diag_ch_list:
	.word	usb_diag_ch_list
	.word	usb_diag_ch_list
	.type	uac1_ac_header_desc, %object
	.size	uac1_ac_header_desc, 10
uac1_ac_header_desc:
	.byte	10
	.byte	36
	.byte	1
	.2byte	256
	.2byte	52
	.byte	2
	.space	2
	.space	2
	.type	ntb_parameters, %object
	.size	ntb_parameters, 28
ntb_parameters:
	.short	28
	.short	3
	.word	16384
	.short	4
	.short	0
	.short	4
	.space	2
	.word	16384
	.short	4
	.short	0
	.short	4
	.space	2
	.type	ndp16_opts, %object
	.size	ndp16_opts, 44
ndp16_opts:
	.word	1213023054
	.word	810369870
	.word	12
	.word	8
	.word	4
	.word	1
	.word	1
	.word	1
	.word	0
	.word	0
	.word	1
	.type	ndp32_opts, %object
	.size	ndp32_opts, 44
ndp32_opts:
	.word	1751999342
	.word	812475246
	.word	16
	.word	16
	.word	8
	.word	2
	.word	2
	.word	2
	.word	1
	.word	2
	.word	2
	.type	device_desc, %object
	.size	device_desc, 18
device_desc:
	.byte	18
	.byte	1
	.short	512
	.byte	0
	.space	3
	.short	6353
	.short	1
	.short	-1
	.space	3
	.byte	1
	.space	2
	.type	dev_attr_suspended, %object
	.size	dev_attr_suspended, 16
dev_attr_suspended:
	.word	.LC1765
	.short	292
	.space	2
	.word	composite_show_suspended
	.word	0
	.type	_rs.51997, %object
	.size	_rs.51997, 24
_rs.51997:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	mbim_ntb_parameters, %object
	.size	mbim_ntb_parameters, 28
mbim_ntb_parameters:
	.short	28
	.short	1
	.word	16384
	.short	4
	.short	0
	.short	4
	.space	2
	.word	4096
	.short	4
	.short	0
	.short	4
	.short	0
	.type	mbim_ext_config_desc, %object
	.size	mbim_ext_config_desc, 40
mbim_ext_config_desc:
	.word	40
	.short	256
	.short	4
	.byte	1
	.space	7
	.byte	0
	.byte	1
	.byte	65
	.byte	76
	.byte	84
	.byte	82
	.byte	67
	.byte	70
	.byte	71
	.space	1
	.space	14
	.type	mbim_os_string, %object
	.size	mbim_os_string, 18
mbim_os_string:
	.byte	18
	.byte	3
	.byte	77
	.byte	0
	.byte	83
	.byte	0
	.byte	70
	.byte	0
	.byte	84
	.byte	0
	.byte	49
	.byte	0
	.byte	48
	.byte	0
	.byte	48
	.byte	0
	.byte	-91
	.byte	0
	.space	2
	.type	usb_qdss_ch_list, %object
	.size	usb_qdss_ch_list, 8
usb_qdss_ch_list:
	.word	usb_qdss_ch_list
	.word	usb_qdss_ch_list
	.type	android_platform_driver, %object
	.size	android_platform_driver, 80
android_platform_driver:
	.word	android_probe
	.word	android_remove
	.space	12
	.word	.LC1197
	.space	16
	.word	usb_android_dt_match
	.space	32
	.word	android_id_table
	.type	mtp_os_string, %object
	.size	mtp_os_string, 18
mtp_os_string:
	.byte	18
	.byte	3
	.byte	77
	.byte	0
	.byte	83
	.byte	0
	.byte	70
	.byte	0
	.byte	84
	.byte	0
	.byte	49
	.byte	0
	.byte	48
	.byte	0
	.byte	48
	.byte	0
	.byte	1
	.byte	0
	.space	2
	.type	mtp_ext_config_desc, %object
	.size	mtp_ext_config_desc, 40
mtp_ext_config_desc:
	.word	40
	.short	256
	.short	4
	.byte	1
	.space	7
	.byte	0
	.byte	1
	.byte	77
	.byte	84
	.byte	80
	.space	5
	.space	14
	.type	ccid_class_desc, %object
	.size	ccid_class_desc, 54
ccid_class_desc:
	.byte	54
	.byte	33
	.short	272
	.byte	0
	.byte	2
	.4byte	1
	.4byte	3580
	.4byte	3580
	.byte	0
	.4byte	9600
	.4byte	9600
	.byte	0
	.word	0
	.word	0
	.word	0
	.word	131198
	.word	512
	.byte	0
	.byte	0
	.short	0
	.byte	0
	.byte	1
	.space	2
	.type	dl_intr_threshold, %object
	.size	dl_intr_threshold, 4
dl_intr_threshold:
	.word	20
	.type	ghsic_data_fctrl_support, %object
	.size	ghsic_data_fctrl_support, 4
ghsic_data_fctrl_support:
	.word	1
	.type	ghsic_data_fctrl_en_thld, %object
	.size	ghsic_data_fctrl_en_thld, 4
ghsic_data_fctrl_en_thld:
	.word	500
	.type	qmult, %object
	.size	qmult, 4
qmult:
	.word	10
	.type	mux_sdio_rx_fctrl_en_thld, %object
	.size	mux_sdio_rx_fctrl_en_thld, 4
mux_sdio_rx_fctrl_en_thld:
	.word	1000
	.type	bam_mux_rx_fctrl_support, %object
	.size	bam_mux_rx_fctrl_support, 4
bam_mux_rx_fctrl_support:
	.word	1
	.type	bam_mux_rx_fctrl_en_thld, %object
	.size	bam_mux_rx_fctrl_en_thld, 4
bam_mux_rx_fctrl_en_thld:
	.word	500
	.type	bam_mux_rx_req_size, %object
	.size	bam_mux_rx_req_size, 4
bam_mux_rx_req_size:
	.word	2048
	.type	mtp_rx_req_len, %object
	.size	mtp_rx_req_len, 4
mtp_rx_req_len:
	.word	16384
	.type	bam_pending_limit, %object
	.size	bam_pending_limit, 4
bam_pending_limit:
	.word	220
	.type	bam_mux_rx_fctrl_dis_thld, %object
	.size	bam_mux_rx_fctrl_dis_thld, 4
bam_mux_rx_fctrl_dis_thld:
	.word	300
	.type	rmnet_device, %object
	.size	rmnet_device, 36
rmnet_device:
	.word	255
	.word	.LC1724
	.word	rmnet_ctrl_fops
	.space	24
	.type	acc_device, %object
	.size	acc_device, 36
acc_device:
	.word	255
	.word	.LC1701
	.word	acc_fops
	.space	24
	.type	rndis_qc_device, %object
	.size	rndis_qc_device, 36
rndis_qc_device:
	.word	255
	.word	.LC1611
	.word	rndis_qc_fops
	.space	24
	.type	mtp_device, %object
	.size	mtp_device, 36
mtp_device:
	.word	255
	.word	mtp_shortname
	.word	mtp_fops
	.space	24
	.type	adb_device, %object
	.size	adb_device, 36
adb_device:
	.word	255
	.word	adb_shortname
	.word	adb_fops
	.space	24
	.type	rmnet_mux_ctrl_dev, %object
	.size	rmnet_mux_ctrl_dev, 36
rmnet_mux_ctrl_dev:
	.word	255
	.word	.LC1752
	.word	rmnet_mux_ctrl_fops
	.space	24
	.type	mirrorlink_device, %object
	.size	mirrorlink_device, 36
mirrorlink_device:
	.word	255
	.word	mirrorlink_shortname
	.space	28
	.type	ccid_bulk_device, %object
	.size	ccid_bulk_device, 36
ccid_bulk_device:
	.word	255
	.word	.LC1709
	.word	ccid_bulk_fops
	.space	24
	.type	ccid_ctrl_device, %object
	.size	ccid_ctrl_device, 36
ccid_ctrl_device:
	.word	255
	.word	.LC1708
	.word	ccid_ctrl_fops
	.space	24
	.type	mbim_device, %object
	.size	mbim_device, 36
mbim_device:
	.word	255
	.word	.LC1635
	.word	mbim_fops
	.space	24
	.type	ops.54002, %object
	.size	ops.54002, 12
ops.54002:
	.word	f_midi_snd_free
	.space	8
	.type	gmidi_in_ops, %object
	.size	gmidi_in_ops, 16
gmidi_in_ops:
	.word	f_midi_in_open
	.word	f_midi_in_close
	.word	f_midi_in_trigger
	.space	4
	.type	gmidi_out_ops, %object
	.size	gmidi_out_ops, 16
gmidi_out_ops:
	.word	f_midi_out_open
	.word	f_midi_out_close
	.word	f_midi_out_trigger
	.space	4
	.type	conn_gadget_device, %object
	.size	conn_gadget_device, 36
conn_gadget_device:
	.word	255
	.word	conn_gadget_shortname
	.word	conn_gadget_fops
	.space	24
	.type	strings_dev, %object
	.size	strings_dev, 32
strings_dev:
	.space	4
	.word	manufacturer_string
	.space	4
	.word	product_string
	.space	4
	.word	serial_string
	.space	8
	.type	last_vote.63707, %object
	.size	last_vote.63707, 4
last_vote.63707:
	.word	-1
	.type	acc_hid_ll_driver, %object
	.size	acc_hid_ll_driver, 28
acc_hid_ll_driver:
	.word	acc_hid_start
	.word	acc_hid_stop
	.word	acc_hid_open
	.word	acc_hid_close
	.space	8
	.word	acc_hid_parse
	.type	ffs_fs_type, %object
	.size	ffs_fs_type, 36
ffs_fs_type:
	.word	.LC1747
	.space	4
	.word	ffs_fs_mount
	.space	8
	.word	ffs_fs_kill_sb
	.word	0
	.space	8
	.type	req_capture_buf_size, %object
	.size	req_capture_buf_size, 4
req_capture_buf_size:
	.word	32
	.type	audio_playback_buf_size, %object
	.size	audio_playback_buf_size, 4
audio_playback_buf_size:
	.word	8192
	.type	req_playback_count, %object
	.size	req_playback_count, 4
req_playback_count:
	.word	48
	.type	req_playback_buf_size, %object
	.size	req_playback_buf_size, 4
req_playback_buf_size:
	.word	32
	.type	composite_driver, %object
	.size	composite_driver, 88
composite_driver:
	.space	8
	.word	composite_unbind
	.word	composite_setup
	.word	composite_disconnect
	.word	composite_suspend
	.word	composite_resume
	.space	8
	.word	0
	.space	44
	.space	4
	.type	_rs.52347, %object
	.size	_rs.52347, 24
_rs.52347:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	ghsuart_data_rx_req_size, %object
	.size	ghsuart_data_rx_req_size, 4
ghsuart_data_rx_req_size:
	.word	2048
	.type	_rs.52399, %object
	.size	_rs.52399, 24
_rs.52399:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	ghsuart_data_tx_intr_thld, %object
	.size	ghsuart_data_tx_intr_thld, 4
ghsuart_data_tx_intr_thld:
	.word	1
	.type	sdio_rx_fctrl_en_thld, %object
	.size	sdio_rx_fctrl_en_thld, 4
sdio_rx_fctrl_en_thld:
	.word	1000
	.type	audio_capture_buf_size, %object
	.size	audio_capture_buf_size, 4
audio_capture_buf_size:
	.word	8192
	.type	ghsic_data_tx_intr_thld, %object
	.size	ghsic_data_tx_intr_thld, 4
ghsic_data_tx_intr_thld:
	.word	20
	.type	ghsic_data_fctrl_dis_thld, %object
	.size	ghsic_data_fctrl_dis_thld, 4
ghsic_data_fctrl_dis_thld:
	.word	300
	.type	android_usb_attributes, %object
	.size	android_usb_attributes, 76
android_usb_attributes:
	.word	dev_attr_idVendor
	.word	dev_attr_idProduct
	.word	dev_attr_bcdDevice
	.word	dev_attr_bDeviceClass
	.word	dev_attr_bDeviceSubClass
	.word	dev_attr_bDeviceProtocol
	.word	dev_attr_iManufacturer
	.word	dev_attr_iProduct
	.word	dev_attr_iSerial
	.word	dev_attr_functions
	.word	dev_attr_enable
	.word	dev_attr_pm_qos
	.word	dev_attr_state
	.word	dev_attr_bcdUSB
	.word	dev_attr_usb30en
	.word	dev_attr_ss_host_available
	.word	dev_attr_macos
	.word	dev_attr_remote_wakeup
	.word	0
	.type	android_usb_driver, %object
	.size	android_usb_driver, 44
android_usb_driver:
	.word	.LC1197
	.space	8
	.word	device_desc
	.word	dev_strings
	.word	5
	.space	4
	.word	android_usb_unbind
	.space	12
	.type	ecm_qc_string_defs, %object
	.size	ecm_qc_string_defs, 32
ecm_qc_string_defs:
	.space	4
	.word	.LC1623
	.space	4
	.word	0
	.space	4
	.word	.LC1624
	.space	8
	.type	_rs.51459, %object
	.size	_rs.51459, 24
_rs.51459:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	ghsic_data_pend_limit_with_bridge, %object
	.size	ghsic_data_pend_limit_with_bridge, 4
ghsic_data_pend_limit_with_bridge:
	.word	500
	.type	ghsic_data_rx_req_size, %object
	.size	ghsic_data_rx_req_size, 4
ghsic_data_rx_req_size:
	.word	2048
	.type	_rs.51517, %object
	.size	_rs.51517, 24
_rs.51517:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	ncm_string_defs, %object
	.size	ncm_string_defs, 40
ncm_string_defs:
	.space	4
	.word	.LC1550
	.space	4
	.word	0
	.space	4
	.word	.LC1551
	.space	4
	.word	.LC1552
	.space	8
	.type	ecm_string_defs, %object
	.size	ecm_string_defs, 40
ecm_string_defs:
	.space	4
	.word	.LC1623
	.space	4
	.word	0
	.space	4
	.word	.LC1624
	.space	4
	.word	.LC1625
	.space	8
	.type	acc_hid_driver, %object
	.size	acc_hid_driver, 132
acc_hid_driver:
	.word	.LC1700
	.word	acc_hid_table
	.space	12
	.word	acc_hid_probe
	.space	108
	.type	mbim_ndp16_opts, %object
	.size	mbim_ndp16_opts, 44
mbim_ndp16_opts:
	.word	1213023054
	.word	810369870
	.word	12
	.word	8
	.word	4
	.word	1
	.word	1
	.word	1
	.word	0
	.word	0
	.word	1
	.type	mbim_ndp32_opts, %object
	.size	mbim_ndp32_opts, 44
mbim_ndp32_opts:
	.word	1751999342
	.word	812475246
	.word	16
	.word	16
	.word	8
	.word	2
	.word	2
	.word	2
	.word	1
	.word	2
	.word	2
	.type	mtp_tx_req_len, %object
	.size	mtp_tx_req_len, 4
mtp_tx_req_len:
	.word	16384
	.type	dev_attr_cdrom, %object
	.size	dev_attr_cdrom, 16
dev_attr_cdrom:
	.word	.LC1740
	.short	420
	.space	2
	.word	fsg_show_cdrom
	.word	fsg_store_cdrom
	.type	dev_attr_nofua, %object
	.size	dev_attr_nofua, 16
dev_attr_nofua:
	.word	.LC1742
	.short	420
	.space	2
	.word	fsg_show_nofua
	.word	fsg_store_nofua
	.type	dev_attr_ro, %object
	.size	dev_attr_ro, 16
dev_attr_ro:
	.word	.LC1743
	.short	420
	.space	2
	.word	fsg_show_ro
	.word	fsg_store_ro
	.type	dev_attr_file, %object
	.size	dev_attr_file, 16
dev_attr_file:
	.word	.LC1741
	.short	420
	.space	2
	.word	fsg_show_file
	.word	fsg_store_file
	.type	rl.53112, %object
	.size	rl.53112, 24
rl.53112:
	.word	0
	.word	3000
	.word	1
	.space	12
	.type	adb_function, %object
	.size	adb_function, 52
adb_function:
	.word	.LC1009
	.space	20
	.word	adb_function_init
	.word	adb_function_cleanup
	.word	adb_android_function_enable
	.word	adb_android_function_disable
	.word	adb_function_bind_config
	.space	8
	.type	rl.64725, %object
	.size	rl.64725, 24
rl.64725:
	.word	0
	.word	3000
	.word	1
	.space	12
	.type	rl.53105, %object
	.size	rl.53105, 24
rl.53105:
	.word	0
	.word	3000
	.word	1
	.space	12
	.type	bam_mux_rx_q_size, %object
	.size	bam_mux_rx_q_size, 4
bam_mux_rx_q_size:
	.word	16
	.type	bam_mux_tx_q_size, %object
	.size	bam_mux_tx_q_size, 4
bam_mux_tx_q_size:
	.word	200
	.type	acm_string_defs, %object
	.size	acm_string_defs, 32
acm_string_defs:
	.space	4
	.word	.LC1712
	.space	4
	.word	.LC1713
	.space	4
	.word	.LC1714
	.space	8
	.type	acm_control_interface_desc, %object
	.size	acm_control_interface_desc, 9
acm_control_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	1
	.space	1
	.space	3
	.type	acm_data_interface_desc, %object
	.size	acm_data_interface_desc, 9
acm_data_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	acm_iad_descriptor, %object
	.size	acm_iad_descriptor, 8
acm_iad_descriptor:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	2
	.byte	1
	.space	1
	.type	acm_strings, %object
	.size	acm_strings, 8
acm_strings:
	.word	acm_string_table
	.word	0
	.type	bam_mux_tx_pkt_drop_thld, %object
	.size	bam_mux_tx_pkt_drop_thld, 4
bam_mux_tx_pkt_drop_thld:
	.word	1000
	.type	rmnet_ctl_ch, %object
	.size	rmnet_ctl_ch, 4
rmnet_ctl_ch:
	.word	.LC868
	.type	rmnet_data_ch, %object
	.size	rmnet_data_ch, 4
rmnet_data_ch:
	.word	.LC868
	.type	ffs_function, %object
	.size	ffs_function, 52
ffs_function:
	.word	.LC460
	.space	12
	.word	ffs_function_attributes
	.space	4
	.word	ffs_function_init
	.word	ffs_function_cleanup
	.word	ffs_function_enable
	.word	ffs_function_disable
	.word	ffs_function_bind_config
	.space	8
	.type	fs_adb_descs, %object
	.size	fs_adb_descs, 16
fs_adb_descs:
	.word	adb_interface_desc
	.word	adb_fullspeed_in_desc
	.word	adb_fullspeed_out_desc
	.word	0
	.type	hs_adb_descs, %object
	.size	hs_adb_descs, 16
hs_adb_descs:
	.word	adb_interface_desc
	.word	adb_highspeed_in_desc
	.word	adb_highspeed_out_desc
	.word	0
	.type	ss_adb_descs, %object
	.size	ss_adb_descs, 24
ss_adb_descs:
	.word	adb_interface_desc
	.word	adb_superspeed_in_desc
	.word	adb_superspeed_in_comp_desc
	.word	adb_superspeed_out_desc
	.word	adb_superspeed_out_comp_desc
	.word	0
	.type	ccid_fs_descs, %object
	.size	ccid_fs_descs, 24
ccid_fs_descs:
	.word	ccid_interface_desc
	.word	ccid_class_desc
	.word	ccid_fs_notify_desc
	.word	ccid_fs_in_desc
	.word	ccid_fs_out_desc
	.word	0
	.type	ccid_hs_descs, %object
	.size	ccid_hs_descs, 24
ccid_hs_descs:
	.word	ccid_interface_desc
	.word	ccid_class_desc
	.word	ccid_hs_notify_desc
	.word	ccid_hs_in_desc
	.word	ccid_hs_out_desc
	.word	0
	.type	rmnet_mux_strings, %object
	.size	rmnet_mux_strings, 8
rmnet_mux_strings:
	.word	rmnet_mux_string_table
	.word	0
	.type	rmnet_mux_fs_function, %object
	.size	rmnet_mux_fs_function, 20
rmnet_mux_fs_function:
	.word	rmnet_mux_interface_desc
	.word	rmnet_mux_fs_notify_desc
	.word	rmnet_mux_fs_in_desc
	.word	rmnet_mux_fs_out_desc
	.word	0
	.type	rmnet_mux_hs_function, %object
	.size	rmnet_mux_hs_function, 20
rmnet_mux_hs_function:
	.word	rmnet_mux_interface_desc
	.word	rmnet_mux_hs_notify_desc
	.word	rmnet_mux_hs_in_desc
	.word	rmnet_mux_hs_out_desc
	.word	0
	.type	acc_string_defs, %object
	.size	acc_string_defs, 16
acc_string_defs:
	.space	4
	.word	.LC1702
	.space	8
	.type	acc_interface_desc, %object
	.size	acc_interface_desc, 9
acc_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	2
	.byte	-1
	.byte	-1
	.byte	0
	.space	1
	.space	3
	.type	acc_strings, %object
	.size	acc_strings, 8
acc_strings:
	.word	acc_string_table
	.word	0
	.type	fs_acc_descs, %object
	.size	fs_acc_descs, 16
fs_acc_descs:
	.word	acc_interface_desc
	.word	acc_fullspeed_in_desc
	.word	acc_fullspeed_out_desc
	.word	0
	.type	hs_acc_descs, %object
	.size	hs_acc_descs, 16
hs_acc_descs:
	.word	acc_interface_desc
	.word	acc_highspeed_in_desc
	.word	acc_highspeed_out_desc
	.word	0
	.type	ss_acc_descs, %object
	.size	ss_acc_descs, 24
ss_acc_descs:
	.word	acc_interface_desc
	.word	acc_superspeed_in_desc
	.word	acc_superspeed_in_comp_desc
	.word	acc_superspeed_out_desc
	.word	acc_superspeed_out_comp_desc
	.word	0
	.type	mtp_string_defs, %object
	.size	mtp_string_defs, 16
mtp_string_defs:
	.space	4
	.word	.LC1704
	.space	8
	.type	mtp_interface_desc, %object
	.size	mtp_interface_desc, 9
mtp_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	3
	.byte	-1
	.byte	-1
	.byte	0
	.space	1
	.space	3
	.type	mtp_strings, %object
	.size	mtp_strings, 8
mtp_strings:
	.word	mtp_string_table
	.word	0
	.type	fs_mtp_descs, %object
	.size	fs_mtp_descs, 20
fs_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_fullspeed_in_desc
	.word	mtp_fullspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	hs_mtp_descs, %object
	.size	hs_mtp_descs, 20
hs_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_highspeed_in_desc
	.word	mtp_highspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	ss_mtp_descs, %object
	.size	ss_mtp_descs, 32
ss_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_superspeed_in_desc
	.word	mtp_superspeed_in_comp_desc
	.word	mtp_superspeed_out_desc
	.word	mtp_superspeed_out_comp_desc
	.word	mtp_intr_desc
	.word	mtp_superspeed_intr_comp_desc
	.word	0
	.type	fs_ptp_descs, %object
	.size	fs_ptp_descs, 20
fs_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_fullspeed_in_desc
	.word	mtp_fullspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	hs_ptp_descs, %object
	.size	hs_ptp_descs, 20
hs_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_highspeed_in_desc
	.word	mtp_highspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	ss_ptp_descs, %object
	.size	ss_ptp_descs, 32
ss_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_superspeed_in_desc
	.word	mtp_superspeed_in_comp_desc
	.word	mtp_superspeed_out_desc
	.word	mtp_superspeed_out_comp_desc
	.word	mtp_intr_desc
	.word	mtp_superspeed_intr_comp_desc
	.word	0
	.type	fs_conn_gadget_descs, %object
	.size	fs_conn_gadget_descs, 16
fs_conn_gadget_descs:
	.word	conn_gadget_interface_desc
	.word	conn_gadget_fullspeed_in_desc
	.word	conn_gadget_fullspeed_out_desc
	.word	0
	.type	hs_conn_gadget_descs, %object
	.size	hs_conn_gadget_descs, 16
hs_conn_gadget_descs:
	.word	conn_gadget_interface_desc
	.word	conn_gadget_highspeed_in_desc
	.word	conn_gadget_highspeed_out_desc
	.word	0
	.type	ss_conn_gadget_descs, %object
	.size	ss_conn_gadget_descs, 24
ss_conn_gadget_descs:
	.word	conn_gadget_interface_desc
	.word	conn_gadget_superspeed_in_desc
	.word	conn_gadget_superspeed_bulk_comp_desc
	.word	conn_gadget_superspeed_out_desc
	.word	conn_gadget_superspeed_bulk_comp_desc
	.word	0
	.type	mbim_string_defs, %object
	.size	mbim_string_defs, 24
mbim_string_defs:
	.space	4
	.word	.LC1677
	.space	4
	.word	.LC1678
	.space	8
	.type	mbim_control_intf, %object
	.size	mbim_control_intf, 9
mbim_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	14
	.byte	0
	.space	1
	.space	3
	.type	mbim_data_nop_intf, %object
	.size	mbim_data_nop_intf, 9
mbim_data_nop_intf:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	2
	.space	1
	.space	3
	.type	mbim_data_intf, %object
	.size	mbim_data_intf, 9
mbim_data_intf:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	2
	.space	1
	.space	3
	.type	mbim_strings, %object
	.size	mbim_strings, 8
mbim_strings:
	.word	mbim_string_table
	.word	0
	.type	fsg_strings, %object
	.size	fsg_strings, 16
fsg_strings:
	.byte	0
	.space	3
	.word	fsg_string_interface
	.space	8
	.type	fsg_intf_desc, %object
	.size	fsg_intf_desc, 9
fsg_intf_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	8
	.byte	6
	.byte	80
	.byte	0
	.space	3
	.type	fsg_strings_array, %object
	.size	fsg_strings_array, 8
fsg_strings_array:
	.word	fsg_stringtab
	.word	0
	.type	rmnet_sdio_strings, %object
	.size	rmnet_sdio_strings, 8
rmnet_sdio_strings:
	.word	rmnet_sdio_string_table
	.word	0
	.type	rmnet_sdio_fs_function, %object
	.size	rmnet_sdio_fs_function, 20
rmnet_sdio_fs_function:
	.word	rmnet_sdio_interface_desc
	.word	rmnet_sdio_fs_notify_desc
	.word	rmnet_sdio_fs_in_desc
	.word	rmnet_sdio_fs_out_desc
	.word	0
	.type	rmnet_sdio_hs_function, %object
	.size	rmnet_sdio_hs_function, 20
rmnet_sdio_hs_function:
	.word	rmnet_sdio_interface_desc
	.word	rmnet_sdio_hs_notify_desc
	.word	rmnet_sdio_hs_in_desc
	.word	rmnet_sdio_hs_out_desc
	.word	0
	.type	_rs.38243, %object
	.size	_rs.38243, 24
_rs.38243:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	intf_desc, %object
	.size	intf_desc, 9
intf_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	-1
	.byte	16
	.byte	1
	.space	1
	.space	3
	.type	fs_bulk_in_desc, %object
	.size	fs_bulk_in_desc, 9
fs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.byte	0
	.space	2
	.space	3
	.type	fs_bulk_out_desc, %object
	.size	fs_bulk_out_desc, 9
fs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.byte	0
	.space	2
	.space	3
	.type	fs_diag_desc, %object
	.size	fs_diag_desc, 16
fs_diag_desc:
	.word	intf_desc
	.word	fs_bulk_in_desc
	.word	fs_bulk_out_desc
	.word	0
	.type	hs_bulk_in_desc, %object
	.size	hs_bulk_in_desc, 9
hs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.byte	0
	.space	2
	.space	3
	.type	hs_bulk_out_desc, %object
	.size	hs_bulk_out_desc, 9
hs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.byte	0
	.space	2
	.space	3
	.type	hs_diag_desc, %object
	.size	hs_diag_desc, 16
hs_diag_desc:
	.word	intf_desc
	.word	hs_bulk_in_desc
	.word	hs_bulk_out_desc
	.word	0
	.type	ss_bulk_in_desc, %object
	.size	ss_bulk_in_desc, 9
ss_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_bulk_out_desc, %object
	.size	ss_bulk_out_desc, 9
ss_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_diag_desc, %object
	.size	ss_diag_desc, 24
ss_diag_desc:
	.word	intf_desc
	.word	ss_bulk_in_desc
	.word	ss_bulk_in_comp_desc
	.word	ss_bulk_out_desc
	.word	ss_bulk_out_comp_desc
	.word	0
	.type	rmnet_smd_interface_desc, %object
	.size	rmnet_smd_interface_desc, 9
rmnet_smd_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_smd_fs_in_desc, %object
	.size	rmnet_smd_fs_in_desc, 9
rmnet_smd_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_smd_fs_out_desc, %object
	.size	rmnet_smd_fs_out_desc, 9
rmnet_smd_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_smd_fs_notify_desc, %object
	.size	rmnet_smd_fs_notify_desc, 9
rmnet_smd_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_smd_hs_in_desc, %object
	.size	rmnet_smd_hs_in_desc, 9
rmnet_smd_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_smd_hs_out_desc, %object
	.size	rmnet_smd_hs_out_desc, 9
rmnet_smd_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_smd_hs_notify_desc, %object
	.size	rmnet_smd_hs_notify_desc, 9
rmnet_smd_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rmnet_sdio_interface_desc, %object
	.size	rmnet_sdio_interface_desc, 9
rmnet_sdio_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_sdio_fs_in_desc, %object
	.size	rmnet_sdio_fs_in_desc, 9
rmnet_sdio_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_sdio_fs_out_desc, %object
	.size	rmnet_sdio_fs_out_desc, 9
rmnet_sdio_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_sdio_fs_notify_desc, %object
	.size	rmnet_sdio_fs_notify_desc, 9
rmnet_sdio_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_sdio_hs_in_desc, %object
	.size	rmnet_sdio_hs_in_desc, 9
rmnet_sdio_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_sdio_hs_out_desc, %object
	.size	rmnet_sdio_hs_out_desc, 9
rmnet_sdio_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_sdio_hs_notify_desc, %object
	.size	rmnet_sdio_hs_notify_desc, 9
rmnet_sdio_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	input_terminal_desc, %object
	.size	input_terminal_desc, 12
input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	1
	.short	513
	.byte	0
	.space	1
	.short	3
	.space	2
	.type	as_type_i_desc, %object
	.size	as_type_i_desc, 11
as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.space	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	audio_source_ac_interface_desc, %object
	.size	audio_source_ac_interface_desc, 9
audio_source_ac_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	0
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	as_interface_alt_0_desc, %object
	.size	as_interface_alt_0_desc, 9
as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	as_interface_alt_1_desc, %object
	.size	as_interface_alt_1_desc, 9
as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	fs_as_in_ep_desc, %object
	.size	fs_as_in_ep_desc, 9
fs_as_in_ep_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	13
	.short	256
	.byte	1
	.space	2
	.space	3
	.type	hs_as_in_ep_desc, %object
	.size	hs_as_in_ep_desc, 9
hs_as_in_ep_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	13
	.short	256
	.byte	4
	.space	2
	.space	3
	.type	ecm_qc_control_intf, %object
	.size	ecm_qc_control_intf, 9
ecm_qc_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_union_desc, %object
	.size	ecm_qc_union_desc, 5
ecm_qc_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ecm_qc_data_nop_intf, %object
	.size	ecm_qc_data_nop_intf, 9
ecm_qc_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_data_intf, %object
	.size	ecm_qc_data_intf, 9
ecm_qc_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_fs_in_desc, %object
	.size	ecm_qc_fs_in_desc, 9
ecm_qc_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	ecm_qc_fs_out_desc, %object
	.size	ecm_qc_fs_out_desc, 9
ecm_qc_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	ecm_qc_fs_notify_desc, %object
	.size	ecm_qc_fs_notify_desc, 9
ecm_qc_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	ecm_qc_fs_function, %object
	.size	ecm_qc_fs_function, 40
ecm_qc_fs_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_fs_notify_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_fs_in_desc
	.word	ecm_qc_fs_out_desc
	.word	0
	.type	ecm_qc_hs_in_desc, %object
	.size	ecm_qc_hs_in_desc, 9
ecm_qc_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ecm_qc_hs_out_desc, %object
	.size	ecm_qc_hs_out_desc, 9
ecm_qc_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ecm_qc_hs_notify_desc, %object
	.size	ecm_qc_hs_notify_desc, 9
ecm_qc_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ecm_qc_hs_function, %object
	.size	ecm_qc_hs_function, 40
ecm_qc_hs_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_hs_notify_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_hs_in_desc
	.word	ecm_qc_hs_out_desc
	.word	0
	.type	ecm_qc_ss_in_desc, %object
	.size	ecm_qc_ss_in_desc, 9
ecm_qc_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ecm_qc_ss_out_desc, %object
	.size	ecm_qc_ss_out_desc, 9
ecm_qc_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ecm_qc_ss_notify_desc, %object
	.size	ecm_qc_ss_notify_desc, 9
ecm_qc_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ecm_qc_ss_function, %object
	.size	ecm_qc_ss_function, 52
ecm_qc_ss_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_ss_notify_desc
	.word	ecm_qc_ss_notify_comp_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_ss_in_desc
	.word	ecm_qc_ss_in_comp_desc
	.word	ecm_qc_ss_out_desc
	.word	ecm_qc_ss_out_comp_desc
	.word	0
	.type	mbim_iad_desc, %object
	.size	mbim_iad_desc, 8
mbim_iad_desc:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	14
	.byte	0
	.space	1
	.type	mbim_union_desc, %object
	.size	mbim_union_desc, 5
mbim_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	fs_mbim_in_desc, %object
	.size	fs_mbim_in_desc, 9
fs_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_mbim_out_desc, %object
	.size	fs_mbim_out_desc, 9
fs_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_mbim_notify_desc, %object
	.size	fs_mbim_notify_desc, 9
fs_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	32
	.space	2
	.space	3
	.type	mbb_desc, %object
	.size	mbb_desc, 12
mbb_desc:
	.byte	12
	.byte	36
	.byte	27
	.2byte	256
	.2byte	4096
	.byte	32
	.byte	-128
	.2byte	4064
	.byte	32
	.type	mbim_fs_function, %object
	.size	mbim_fs_function, 48
mbim_fs_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	fs_mbim_notify_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	fs_mbim_in_desc
	.word	fs_mbim_out_desc
	.word	0
	.type	hs_mbim_in_desc, %object
	.size	hs_mbim_in_desc, 9
hs_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_mbim_out_desc, %object
	.size	hs_mbim_out_desc, 9
hs_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_mbim_notify_desc, %object
	.size	hs_mbim_notify_desc, 9
hs_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	9
	.space	2
	.space	3
	.type	mbim_hs_function, %object
	.size	mbim_hs_function, 48
mbim_hs_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	hs_mbim_notify_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	hs_mbim_in_desc
	.word	hs_mbim_out_desc
	.word	0
	.type	ss_mbim_in_desc, %object
	.size	ss_mbim_in_desc, 9
ss_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_mbim_out_desc, %object
	.size	ss_mbim_out_desc, 9
ss_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_mbim_notify_desc, %object
	.size	ss_mbim_notify_desc, 9
ss_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	9
	.space	2
	.space	3
	.type	mbim_ss_function, %object
	.size	mbim_ss_function, 60
mbim_ss_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	ss_mbim_notify_desc
	.word	ss_mbim_notify_comp_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	ss_mbim_in_desc
	.word	ss_mbim_in_comp_desc
	.word	ss_mbim_out_desc
	.word	ss_mbim_out_comp_desc
	.word	0
	.type	ecm_iad_descriptor, %object
	.size	ecm_iad_descriptor, 8
ecm_iad_descriptor:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	ecm_control_intf, %object
	.size	ecm_control_intf, 9
ecm_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.space	3
	.type	ecm_union_desc, %object
	.size	ecm_union_desc, 5
ecm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ecm_data_nop_intf, %object
	.size	ecm_data_nop_intf, 9
ecm_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_data_intf, %object
	.size	ecm_data_intf, 9
ecm_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	fs_ecm_in_desc, %object
	.size	fs_ecm_in_desc, 9
fs_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_ecm_out_desc, %object
	.size	fs_ecm_out_desc, 9
fs_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_ecm_notify_desc, %object
	.size	fs_ecm_notify_desc, 9
fs_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	hs_ecm_in_desc, %object
	.size	hs_ecm_in_desc, 9
hs_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ecm_out_desc, %object
	.size	hs_ecm_out_desc, 9
hs_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ecm_notify_desc, %object
	.size	hs_ecm_notify_desc, 9
hs_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ss_ecm_in_desc, %object
	.size	ss_ecm_in_desc, 9
ss_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_ecm_out_desc, %object
	.size	ss_ecm_out_desc, 9
ss_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_ecm_notify_desc, %object
	.size	ss_ecm_notify_desc, 9
ss_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ecm_fs_function, %object
	.size	ecm_fs_function, 44
ecm_fs_function:
	.word	ecm_iad_descriptor
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	fs_ecm_notify_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	fs_ecm_in_desc
	.word	fs_ecm_out_desc
	.word	0
	.type	ecm_hs_function, %object
	.size	ecm_hs_function, 44
ecm_hs_function:
	.word	ecm_iad_descriptor
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	hs_ecm_notify_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	hs_ecm_in_desc
	.word	hs_ecm_out_desc
	.word	0
	.type	ecm_ss_function, %object
	.size	ecm_ss_function, 52
ecm_ss_function:
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	ss_ecm_notify_desc
	.word	ss_ecm_intr_comp_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	ss_ecm_in_desc
	.word	ss_ecm_bulk_comp_desc
	.word	ss_ecm_out_desc
	.word	ss_ecm_bulk_comp_desc
	.word	0
	.type	speaker_input_terminal_desc, %object
	.size	speaker_input_terminal_desc, 12
speaker_input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	3
	.short	257
	.byte	4
	.space	1
	.short	3
	.space	2
	.type	speaker_as_type_i_desc, %object
	.size	speaker_as_type_i_desc, 11
speaker_as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.space	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	microphone_input_terminal_desc, %object
	.size	microphone_input_terminal_desc, 12
microphone_input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	1
	.short	513
	.byte	2
	.byte	1
	.short	3
	.space	2
	.type	microphone_as_type_i_desc, %object
	.size	microphone_as_type_i_desc, 11
microphone_as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.byte	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	uac1_ac_interface_desc, %object
	.size	uac1_ac_interface_desc, 9
uac1_ac_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	0
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	microphone_as_interface_alt_0_desc, %object
	.size	microphone_as_interface_alt_0_desc, 9
microphone_as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	microphone_as_interface_alt_1_desc, %object
	.size	microphone_as_interface_alt_1_desc, 9
microphone_as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	speaker_as_interface_alt_0_desc, %object
	.size	speaker_as_interface_alt_0_desc, 9
speaker_as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	speaker_as_interface_alt_1_desc, %object
	.size	speaker_as_interface_alt_1_desc, 9
speaker_as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	microphone_as_ep_in_desc, %object
	.size	microphone_as_ep_in_desc, 9
microphone_as_ep_in_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	5
	.short	32
	.byte	4
	.space	2
	.space	3
	.type	speaker_as_ep_out_desc, %object
	.size	speaker_as_ep_out_desc, 9
speaker_as_ep_out_desc:
	.byte	9
	.byte	5
	.byte	0
	.byte	9
	.short	32
	.byte	4
	.space	2
	.space	3
	.type	microphone_as_iso_in, %object
	.size	microphone_as_iso_in, 32
microphone_as_iso_in:
	.word	microphone_as_iso_in
	.word	microphone_as_iso_in
	.space	12
	.word	.LC1579
	.byte	1
	.space	3
	.word	microphone_as_iso_in_desc
	.type	speaker_as_iso_out, %object
	.size	speaker_as_iso_out, 32
speaker_as_iso_out:
	.word	speaker_as_iso_out
	.word	speaker_as_iso_out
	.space	12
	.word	.LC1581
	.byte	1
	.space	3
	.word	speaker_as_iso_out_desc
	.type	f_audio_desc, %object
	.size	f_audio_desc, 76
f_audio_desc:
	.word	uac1_ac_interface_desc
	.word	uac1_ac_header_desc
	.word	microphone_input_terminal_desc
	.word	microphone_output_terminal_desc
	.word	speaker_input_terminal_desc
	.word	speaker_output_terminal_desc
	.word	microphone_as_interface_alt_0_desc
	.word	microphone_as_interface_alt_1_desc
	.word	microphone_as_header_desc
	.word	microphone_as_type_i_desc
	.word	microphone_as_ep_in_desc
	.word	microphone_as_iso_in_desc
	.word	speaker_as_interface_alt_0_desc
	.word	speaker_as_interface_alt_1_desc
	.word	speaker_as_header_desc
	.word	speaker_as_type_i_desc
	.word	speaker_as_ep_out_desc
	.word	speaker_as_iso_out_desc
	.word	0
	.type	ncm_iad_desc, %object
	.size	ncm_iad_desc, 8
ncm_iad_desc:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	13
	.byte	0
	.space	1
	.type	ncm_control_intf, %object
	.size	ncm_control_intf, 9
ncm_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	13
	.byte	0
	.space	1
	.space	3
	.type	ncm_union_desc, %object
	.size	ncm_union_desc, 5
ncm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ncm_data_nop_intf, %object
	.size	ncm_data_nop_intf, 9
ncm_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	1
	.space	1
	.space	3
	.type	ncm_data_intf, %object
	.size	ncm_data_intf, 9
ncm_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	1
	.space	1
	.space	3
	.type	fs_ncm_in_desc, %object
	.size	fs_ncm_in_desc, 9
fs_ncm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_ncm_out_desc, %object
	.size	fs_ncm_out_desc, 9
fs_ncm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_ncm_notify_desc, %object
	.size	fs_ncm_notify_desc, 9
fs_ncm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	hs_ncm_in_desc, %object
	.size	hs_ncm_in_desc, 9
hs_ncm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ncm_out_desc, %object
	.size	hs_ncm_out_desc, 9
hs_ncm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ncm_notify_desc, %object
	.size	hs_ncm_notify_desc, 9
hs_ncm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ncm_fs_function, %object
	.size	ncm_fs_function, 48
ncm_fs_function:
	.word	ncm_iad_desc
	.word	ncm_control_intf
	.word	ncm_header_desc
	.word	ncm_union_desc
	.word	necm_desc
	.word	ncm_desc
	.word	fs_ncm_notify_desc
	.word	ncm_data_nop_intf
	.word	ncm_data_intf
	.word	fs_ncm_in_desc
	.word	fs_ncm_out_desc
	.word	0
	.type	ncm_hs_function, %object
	.size	ncm_hs_function, 48
ncm_hs_function:
	.word	ncm_iad_desc
	.word	ncm_control_intf
	.word	ncm_header_desc
	.word	ncm_union_desc
	.word	necm_desc
	.word	ncm_desc
	.word	hs_ncm_notify_desc
	.word	ncm_data_nop_intf
	.word	ncm_data_intf
	.word	hs_ncm_in_desc
	.word	hs_ncm_out_desc
	.word	0
	.type	fsg_fs_bulk_in_desc, %object
	.size	fsg_fs_bulk_in_desc, 9
fsg_fs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fsg_fs_bulk_out_desc, %object
	.size	fsg_fs_bulk_out_desc, 9
fsg_fs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fsg_hs_bulk_in_desc, %object
	.size	fsg_hs_bulk_in_desc, 9
fsg_hs_bulk_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	fsg_hs_bulk_out_desc, %object
	.size	fsg_hs_bulk_out_desc, 9
fsg_hs_bulk_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.byte	1
	.space	2
	.space	3
	.type	fsg_ss_bulk_in_desc, %object
	.size	fsg_ss_bulk_in_desc, 9
fsg_ss_bulk_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	fsg_ss_bulk_in_comp_desc, %object
	.size	fsg_ss_bulk_in_comp_desc, 6
fsg_ss_bulk_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	fsg_ss_bulk_out_desc, %object
	.size	fsg_ss_bulk_out_desc, 9
fsg_ss_bulk_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	fsg_ss_bulk_out_comp_desc, %object
	.size	fsg_ss_bulk_out_comp_desc, 6
fsg_ss_bulk_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	fsg_fs_function, %object
	.size	fsg_fs_function, 16
fsg_fs_function:
	.word	fsg_intf_desc
	.word	fsg_fs_bulk_in_desc
	.word	fsg_fs_bulk_out_desc
	.word	0
	.type	fsg_hs_function, %object
	.size	fsg_hs_function, 16
fsg_hs_function:
	.word	fsg_intf_desc
	.word	fsg_hs_bulk_in_desc
	.word	fsg_hs_bulk_out_desc
	.word	0
	.type	fsg_ss_function, %object
	.size	fsg_ss_function, 24
fsg_ss_function:
	.word	fsg_intf_desc
	.word	fsg_ss_bulk_in_desc
	.word	fsg_ss_bulk_in_comp_desc
	.word	fsg_ss_bulk_out_desc
	.word	fsg_ss_bulk_out_comp_desc
	.word	0
	.type	ccid_interface_desc, %object
	.size	ccid_interface_desc, 9
ccid_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	11
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ccid_fs_notify_desc, %object
	.size	ccid_fs_notify_desc, 9
ccid_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	4
	.byte	32
	.space	2
	.space	3
	.type	ccid_fs_in_desc, %object
	.size	ccid_fs_in_desc, 9
ccid_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	ccid_fs_out_desc, %object
	.size	ccid_fs_out_desc, 9
ccid_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	ccid_hs_in_desc, %object
	.size	ccid_hs_in_desc, 9
ccid_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ccid_hs_out_desc, %object
	.size	ccid_hs_out_desc, 9
ccid_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ccid_hs_notify_desc, %object
	.size	ccid_hs_notify_desc, 9
ccid_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	4
	.byte	9
	.space	2
	.space	3
	.type	qdss_data_intf_desc, %object
	.size	qdss_data_intf_desc, 9
qdss_data_intf_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	1
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	qdss_ctrl_intf_desc, %object
	.size	qdss_ctrl_intf_desc, 9
qdss_ctrl_intf_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	2
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	qdss_data_ep_comp_desc, %object
	.size	qdss_data_ep_comp_desc, 6
qdss_data_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	1
	.byte	0
	.short	0
	.space	2
	.type	qdss_ss_data_desc, %object
	.size	qdss_ss_data_desc, 9
qdss_ss_data_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_ctrl_in_ep_comp_desc, %object
	.size	qdss_ctrl_in_ep_comp_desc, 6
qdss_ctrl_in_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	0
	.byte	0
	.short	0
	.space	2
	.type	qdss_ss_ctrl_in_desc, %object
	.size	qdss_ss_ctrl_in_desc, 9
qdss_ss_ctrl_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_ctrl_out_ep_comp_desc, %object
	.size	qdss_ctrl_out_ep_comp_desc, 6
qdss_ctrl_out_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	0
	.byte	0
	.short	0
	.space	2
	.type	qdss_ss_ctrl_out_desc, %object
	.size	qdss_ss_ctrl_out_desc, 9
qdss_ss_ctrl_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_hs_data_desc, %object
	.size	qdss_hs_data_desc, 9
qdss_hs_data_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	qdss_hs_ctrl_in_desc, %object
	.size	qdss_hs_ctrl_in_desc, 9
qdss_hs_ctrl_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	qdss_hs_ctrl_out_desc, %object
	.size	qdss_hs_ctrl_out_desc, 9
qdss_hs_ctrl_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	qdss_hs_desc, %object
	.size	qdss_hs_desc, 24
qdss_hs_desc:
	.word	qdss_data_intf_desc
	.word	qdss_hs_data_desc
	.word	qdss_ctrl_intf_desc
	.word	qdss_hs_ctrl_in_desc
	.word	qdss_hs_ctrl_out_desc
	.word	0
	.type	qdss_ss_desc, %object
	.size	qdss_ss_desc, 36
qdss_ss_desc:
	.word	qdss_data_intf_desc
	.word	qdss_ss_data_desc
	.word	qdss_data_ep_comp_desc
	.word	qdss_ctrl_intf_desc
	.word	qdss_ss_ctrl_in_desc
	.word	qdss_ctrl_in_ep_comp_desc
	.word	qdss_ss_ctrl_out_desc
	.word	qdss_ctrl_out_ep_comp_desc
	.word	0
	.type	rmnet_mux_interface_desc, %object
	.size	rmnet_mux_interface_desc, 9
rmnet_mux_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_mux_fs_in_desc, %object
	.size	rmnet_mux_fs_in_desc, 9
rmnet_mux_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_mux_fs_out_desc, %object
	.size	rmnet_mux_fs_out_desc, 9
rmnet_mux_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_mux_fs_notify_desc, %object
	.size	rmnet_mux_fs_notify_desc, 9
rmnet_mux_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_mux_hs_in_desc, %object
	.size	rmnet_mux_hs_in_desc, 9
rmnet_mux_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_mux_hs_out_desc, %object
	.size	rmnet_mux_hs_out_desc, 9
rmnet_mux_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_mux_hs_notify_desc, %object
	.size	rmnet_mux_hs_notify_desc, 9
rmnet_mux_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	midi_string_defs, %object
	.size	midi_string_defs, 16
midi_string_defs:
	.space	4
	.word	.LC1706
	.space	8
	.type	midi_ac_interface_desc, %object
	.size	midi_ac_interface_desc, 9
midi_ac_interface_desc:
	.byte	9
	.byte	4
	.space	3
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	midi_ms_interface_desc, %object
	.size	midi_ms_interface_desc, 9
midi_ms_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	1
	.byte	3
	.space	2
	.space	3
	.type	midi_ac_header_desc, %object
	.size	midi_ac_header_desc, 9
midi_ac_header_desc:
	.byte	9
	.byte	36
	.byte	1
	.2byte	256
	.2byte	9
	.byte	1
	.space	1
	.space	3
	.type	midi_bulk_in_desc, %object
	.size	midi_bulk_in_desc, 9
midi_bulk_in_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	midi_bulk_out_desc, %object
	.size	midi_bulk_out_desc, 9
midi_bulk_out_desc:
	.byte	9
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	midi_ms_header_desc, %object
	.size	midi_ms_header_desc, 7
midi_ms_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.2byte	256
	.space	2
	.space	1
	.type	midi_ms_in_desc, %object
	.size	midi_ms_in_desc, 20
midi_ms_in_desc:
	.space	1
	.byte	37
	.byte	1
	.space	17
	.type	midi_ms_out_desc, %object
	.size	midi_ms_out_desc, 20
midi_ms_out_desc:
	.space	1
	.byte	37
	.byte	1
	.space	17
	.type	rmnet_interface_desc, %object
	.size	rmnet_interface_desc, 9
rmnet_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-32
	.byte	0
	.space	1
	.space	3
	.type	rmnet_fs_in_desc, %object
	.size	rmnet_fs_in_desc, 9
rmnet_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_fs_out_desc, %object
	.size	rmnet_fs_out_desc, 9
rmnet_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_fs_notify_desc, %object
	.size	rmnet_fs_notify_desc, 9
rmnet_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_fs_function, %object
	.size	rmnet_fs_function, 20
rmnet_fs_function:
	.word	rmnet_interface_desc
	.word	rmnet_fs_notify_desc
	.word	rmnet_fs_in_desc
	.word	rmnet_fs_out_desc
	.word	0
	.type	rmnet_hs_in_desc, %object
	.size	rmnet_hs_in_desc, 9
rmnet_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_hs_out_desc, %object
	.size	rmnet_hs_out_desc, 9
rmnet_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_hs_notify_desc, %object
	.size	rmnet_hs_notify_desc, 9
rmnet_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rmnet_hs_function, %object
	.size	rmnet_hs_function, 20
rmnet_hs_function:
	.word	rmnet_interface_desc
	.word	rmnet_hs_notify_desc
	.word	rmnet_hs_in_desc
	.word	rmnet_hs_out_desc
	.word	0
	.type	rmnet_ss_in_desc, %object
	.size	rmnet_ss_in_desc, 9
rmnet_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rmnet_ss_out_desc, %object
	.size	rmnet_ss_out_desc, 9
rmnet_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rmnet_ss_notify_desc, %object
	.size	rmnet_ss_notify_desc, 9
rmnet_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rmnet_ss_function, %object
	.size	rmnet_ss_function, 32
rmnet_ss_function:
	.word	rmnet_interface_desc
	.word	rmnet_ss_notify_desc
	.word	rmnet_ss_notify_comp_desc
	.word	rmnet_ss_in_desc
	.word	rmnet_ss_in_comp_desc
	.word	rmnet_ss_out_desc
	.word	rmnet_ss_out_comp_desc
	.word	0
	.type	acm_union_desc, %object
	.size	acm_union_desc, 5
acm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	acm_call_mgmt_descriptor, %object
	.size	acm_call_mgmt_descriptor, 5
acm_call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.space	1
	.space	3
	.type	acm_fs_in_desc, %object
	.size	acm_fs_in_desc, 9
acm_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	acm_fs_out_desc, %object
	.size	acm_fs_out_desc, 9
acm_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	acm_fs_notify_desc, %object
	.size	acm_fs_notify_desc, 9
acm_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	10
	.byte	32
	.space	2
	.space	3
	.type	acm_hs_function, %object
	.size	acm_hs_function, 44
acm_hs_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_hs_notify_desc
	.word	acm_data_interface_desc
	.word	acm_hs_in_desc
	.word	acm_hs_out_desc
	.word	0
	.type	acm_ss_function, %object
	.size	acm_ss_function, 56
acm_ss_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_hs_notify_desc
	.word	acm_ss_bulk_comp_desc
	.word	acm_data_interface_desc
	.word	acm_ss_in_desc
	.word	acm_ss_bulk_comp_desc
	.word	acm_ss_out_desc
	.word	acm_ss_bulk_comp_desc
	.word	0
	.type	acm_hs_in_desc, %object
	.size	acm_hs_in_desc, 9
acm_hs_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acm_hs_out_desc, %object
	.size	acm_hs_out_desc, 9
acm_hs_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acm_hs_notify_desc, %object
	.size	acm_hs_notify_desc, 9
acm_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	10
	.byte	9
	.space	2
	.space	3
	.type	acm_ss_in_desc, %object
	.size	acm_ss_in_desc, 9
acm_ss_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acm_ss_out_desc, %object
	.size	acm_ss_out_desc, 9
acm_ss_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acm_fs_function, %object
	.size	acm_fs_function, 44
acm_fs_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_fs_notify_desc
	.word	acm_data_interface_desc
	.word	acm_fs_in_desc
	.word	acm_fs_out_desc
	.word	0
	.type	rndis_qc_iad_descriptor, %object
	.size	rndis_qc_iad_descriptor, 8
rndis_qc_iad_descriptor:
	.byte	8
	.byte	11
	.byte	0
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	rndis_qc_control_intf, %object
	.size	rndis_qc_control_intf, 9
rndis_qc_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	-1
	.space	1
	.space	3
	.type	rndis_qc_union_desc, %object
	.size	rndis_qc_union_desc, 5
rndis_qc_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	rndis_qc_data_intf, %object
	.size	rndis_qc_data_intf, 9
rndis_qc_data_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	rndis_qc_fs_in_desc, %object
	.size	rndis_qc_fs_in_desc, 9
rndis_qc_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	rndis_qc_fs_out_desc, %object
	.size	rndis_qc_fs_out_desc, 9
rndis_qc_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	rndis_qc_fs_notify_desc, %object
	.size	rndis_qc_fs_notify_desc, 9
rndis_qc_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	eth_qc_fs_function, %object
	.size	eth_qc_fs_function, 44
eth_qc_fs_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_fs_notify_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_fs_in_desc
	.word	rndis_qc_fs_out_desc
	.word	0
	.type	rndis_qc_hs_in_desc, %object
	.size	rndis_qc_hs_in_desc, 9
rndis_qc_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rndis_qc_hs_out_desc, %object
	.size	rndis_qc_hs_out_desc, 9
rndis_qc_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rndis_qc_hs_notify_desc, %object
	.size	rndis_qc_hs_notify_desc, 9
rndis_qc_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	eth_qc_hs_function, %object
	.size	eth_qc_hs_function, 44
eth_qc_hs_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_hs_notify_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_hs_in_desc
	.word	rndis_qc_hs_out_desc
	.word	0
	.type	rndis_qc_ss_in_desc, %object
	.size	rndis_qc_ss_in_desc, 9
rndis_qc_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rndis_qc_ss_out_desc, %object
	.size	rndis_qc_ss_out_desc, 9
rndis_qc_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rndis_qc_ss_notify_desc, %object
	.size	rndis_qc_ss_notify_desc, 9
rndis_qc_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	eth_qc_ss_function, %object
	.size	eth_qc_ss_function, 56
eth_qc_ss_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_ss_notify_desc
	.word	rndis_qc_ss_intr_comp_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_ss_in_desc
	.word	rndis_qc_ss_bulk_comp_desc
	.word	rndis_qc_ss_out_desc
	.word	rndis_qc_ss_bulk_comp_desc
	.word	0
	.type	conn_gadget_interface_desc, %object
	.size	conn_gadget_interface_desc, 9
conn_gadget_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	2
	.byte	-1
	.byte	64
	.byte	1
	.space	1
	.space	3
	.type	conn_gadget_fullspeed_in_desc, %object
	.size	conn_gadget_fullspeed_in_desc, 9
conn_gadget_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	conn_gadget_fullspeed_out_desc, %object
	.size	conn_gadget_fullspeed_out_desc, 9
conn_gadget_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	conn_gadget_highspeed_in_desc, %object
	.size	conn_gadget_highspeed_in_desc, 9
conn_gadget_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	conn_gadget_highspeed_out_desc, %object
	.size	conn_gadget_highspeed_out_desc, 9
conn_gadget_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	conn_gadget_superspeed_in_desc, %object
	.size	conn_gadget_superspeed_in_desc, 9
conn_gadget_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	conn_gadget_superspeed_out_desc, %object
	.size	conn_gadget_superspeed_out_desc, 9
conn_gadget_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acc_fullspeed_in_desc, %object
	.size	acc_fullspeed_in_desc, 9
acc_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	acc_fullspeed_out_desc, %object
	.size	acc_fullspeed_out_desc, 9
acc_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	acc_highspeed_in_desc, %object
	.size	acc_highspeed_in_desc, 9
acc_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acc_highspeed_out_desc, %object
	.size	acc_highspeed_out_desc, 9
acc_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acc_superspeed_in_desc, %object
	.size	acc_superspeed_in_desc, 9
acc_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acc_superspeed_out_desc, %object
	.size	acc_superspeed_out_desc, 9
acc_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	mtp_fullspeed_in_desc, %object
	.size	mtp_fullspeed_in_desc, 9
mtp_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	mtp_fullspeed_out_desc, %object
	.size	mtp_fullspeed_out_desc, 9
mtp_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	mtp_intr_desc, %object
	.size	mtp_intr_desc, 9
mtp_intr_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	28
	.byte	6
	.space	2
	.space	3
	.type	mtp_tx_reqs, %object
	.size	mtp_tx_reqs, 4
mtp_tx_reqs:
	.word	8
	.type	mtp_highspeed_in_desc, %object
	.size	mtp_highspeed_in_desc, 9
mtp_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	mtp_highspeed_out_desc, %object
	.size	mtp_highspeed_out_desc, 9
mtp_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	mtp_superspeed_in_desc, %object
	.size	mtp_superspeed_in_desc, 9
mtp_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	mtp_superspeed_out_desc, %object
	.size	mtp_superspeed_out_desc, 9
mtp_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	adb_interface_desc, %object
	.size	adb_interface_desc, 9
adb_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	2
	.byte	-1
	.byte	66
	.byte	1
	.space	1
	.space	3
	.type	adb_fullspeed_in_desc, %object
	.size	adb_fullspeed_in_desc, 9
adb_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	adb_fullspeed_out_desc, %object
	.size	adb_fullspeed_out_desc, 9
adb_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	adb_highspeed_in_desc, %object
	.size	adb_highspeed_in_desc, 9
adb_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	adb_highspeed_out_desc, %object
	.size	adb_highspeed_out_desc, 9
adb_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	adb_superspeed_in_desc, %object
	.size	adb_superspeed_in_desc, 9
adb_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	adb_superspeed_out_desc, %object
	.size	adb_superspeed_out_desc, 9
adb_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	midi_strings, %object
	.size	midi_strings, 8
midi_strings:
	.word	midi_stringtab
	.word	0
	.type	qdss_string_defs, %object
	.size	qdss_string_defs, 24
qdss_string_defs:
	.space	4
	.word	.LC1761
	.space	4
	.word	.LC1762
	.space	8
	.type	qdss_strings, %object
	.size	qdss_strings, 8
qdss_strings:
	.word	qdss_string_table
	.word	0
	.type	_audio_dev, %object
	.size	_audio_dev, 160
_audio_dev:
	.word	.LC1171
	.space	4
	.word	hs_audio_desc
	.space	4
	.word	fs_audio_desc
	.space	12
	.word	audio_bind
	.word	audio_unbind
	.word	audio_set_alt
	.space	4
	.word	audio_disable
	.word	audio_setup
	.space	28
	.space	12
	.word	_audio_dev+96
	.word	_audio_dev+96
	.space	4
	.word	0
	.space	48
	.type	audio_playback_ops, %object
	.size	audio_playback_ops, 56
audio_playback_ops:
	.word	audio_pcm_open
	.word	audio_pcm_close
	.word	snd_pcm_lib_ioctl
	.word	audio_pcm_hw_params
	.word	audio_pcm_hw_free
	.word	audio_pcm_prepare
	.word	audio_pcm_playback_trigger
	.word	audio_pcm_pointer
	.space	12
	.word	audio_pcm_mmap
	.space	8
	.type	rmnet_smd_strings, %object
	.size	rmnet_smd_strings, 8
rmnet_smd_strings:
	.word	rmnet_smd_string_table
	.word	0
	.type	rmnet_smd_fs_function, %object
	.size	rmnet_smd_fs_function, 20
rmnet_smd_fs_function:
	.word	rmnet_smd_interface_desc
	.word	rmnet_smd_fs_notify_desc
	.word	rmnet_smd_fs_in_desc
	.word	rmnet_smd_fs_out_desc
	.word	0
	.type	rmnet_smd_hs_function, %object
	.size	rmnet_smd_hs_function, 20
rmnet_smd_hs_function:
	.word	rmnet_smd_interface_desc
	.word	rmnet_smd_hs_notify_desc
	.word	rmnet_smd_hs_in_desc
	.word	rmnet_smd_hs_out_desc
	.word	0
	.type	gadget_type, %object
	.size	gadget_type, 24
gadget_type:
	.word	.LC1607
	.space	20
	.type	rndis_iad_descriptor, %object
	.size	rndis_iad_descriptor, 8
rndis_iad_descriptor:
	.byte	8
	.byte	11
	.byte	0
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	rndis_control_intf, %object
	.size	rndis_control_intf, 9
rndis_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	-1
	.space	1
	.space	3
	.type	rndis_string_defs, %object
	.size	rndis_string_defs, 32
rndis_string_defs:
	.space	4
	.word	.LC1619
	.space	4
	.word	.LC1620
	.space	4
	.word	.LC1621
	.space	8
	.type	rndis_data_intf, %object
	.size	rndis_data_intf, 9
rndis_data_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	rndis_ul_max_pkt_per_xfer, %object
	.size	rndis_ul_max_pkt_per_xfer, 4
rndis_ul_max_pkt_per_xfer:
	.word	3
	.type	rndis_dl_max_pkt_per_xfer, %object
	.size	rndis_dl_max_pkt_per_xfer, 4
rndis_dl_max_pkt_per_xfer:
	.word	3
	.type	rndis_strings, %object
	.size	rndis_strings, 8
rndis_strings:
	.word	rndis_string_table
	.word	0
	.type	supported_functions, %object
	.size	supported_functions, 104
supported_functions:
	.word	ffs_function
	.word	mbim_function
	.word	ecm_qc_function
	.word	audio_function
	.word	rmnet_smd_function
	.word	rmnet_sdio_function
	.word	rmnet_smd_sdio_function
	.word	rmnet_function
	.word	diag_function
	.word	qdss_function
	.word	adb_function
	.word	midi_function
	.word	ccid_function
	.word	acm_function
	.word	mtp_function
	.word	ptp_function
	.word	rndis_function
	.word	rndis_qc_function
	.word	ecm_function
	.word	ncm_function
	.word	mass_storage_function
	.word	accessory_function
	.word	conn_gadget_function
	.word	audio_source_function
	.word	uasp_function
	.word	0
	.type	dev_attr_terminal_version, %object
	.size	dev_attr_terminal_version, 16
dev_attr_terminal_version:
	.word	.LC1548
	.short	420
	.space	2
	.word	terminal_version_show
	.word	terminal_version_store
	.type	modem_device, %object
	.size	modem_device, 36
modem_device:
	.word	123
	.word	.LC1715
	.word	modem_fops
	.space	24
	.type	rl.26038, %object
	.size	rl.26038, 24
rl.26038:
	.word	0
	.word	3000
	.word	1
	.space	12
	.type	rl.26056, %object
	.size	rl.26056, 24
rl.26056:
	.word	0
	.word	3000
	.word	1
	.space	12
	.type	sport_info, %object
	.size	sport_info, 24
sport_info:
	.word	.LC1738
	.space	4
	.word	9
	.word	.LC1739
	.space	4
	.word	10
	.type	smd_pi, %object
	.size	smd_pi, 24
smd_pi:
	.space	4
	.word	.LC1732
	.space	4
	.space	4
	.word	.LC1733
	.space	4
	.type	ghsic_data_serial_tx_q_size, %object
	.size	ghsic_data_serial_tx_q_size, 4
ghsic_data_serial_tx_q_size:
	.word	20
	.type	ghsic_data_serial_rx_q_size, %object
	.size	ghsic_data_serial_rx_q_size, 4
ghsic_data_serial_rx_q_size:
	.word	10
	.type	ghsic_data_rmnet_tx_q_size, %object
	.size	ghsic_data_rmnet_tx_q_size, 4
ghsic_data_rmnet_tx_q_size:
	.word	300
	.type	ghsic_data_rmnet_rx_q_size, %object
	.size	ghsic_data_rmnet_rx_q_size, 4
ghsic_data_rmnet_rx_q_size:
	.word	50
	.type	ghsuart_data_serial_tx_q_size, %object
	.size	ghsuart_data_serial_tx_q_size, 4
ghsuart_data_serial_tx_q_size:
	.word	5
	.type	ghsuart_data_serial_rx_q_size, %object
	.size	ghsuart_data_serial_rx_q_size, 4
ghsuart_data_serial_rx_q_size:
	.word	5
	.type	ghsuart_data_rmnet_tx_q_size, %object
	.size	ghsuart_data_rmnet_tx_q_size, 4
ghsuart_data_rmnet_tx_q_size:
	.word	20
	.type	ghsuart_data_rmnet_rx_q_size, %object
	.size	ghsuart_data_rmnet_rx_q_size, 4
ghsuart_data_rmnet_rx_q_size:
	.word	10
	.type	rmnet_string_defs, %object
	.size	rmnet_string_defs, 16
rmnet_string_defs:
	.space	4
	.word	.LC1750
	.space	8
	.type	rmnet_strings, %object
	.size	rmnet_strings, 8
rmnet_strings:
	.word	rmnet_string_table
	.word	0
	.type	rndis_union_desc, %object
	.size	rndis_union_desc, 5
rndis_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	fs_in_desc, %object
	.size	fs_in_desc, 9
fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_out_desc, %object
	.size	fs_out_desc, 9
fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_notify_desc, %object
	.size	fs_notify_desc, 9
fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	hs_in_desc, %object
	.size	hs_in_desc, 9
hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_out_desc, %object
	.size	hs_out_desc, 9
hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_notify_desc, %object
	.size	hs_notify_desc, 9
hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	ss_in_desc, %object
	.size	ss_in_desc, 9
ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_out_desc, %object
	.size	ss_out_desc, 9
ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_notify_desc, %object
	.size	ss_notify_desc, 9
ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	eth_fs_function, %object
	.size	eth_fs_function, 44
eth_fs_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	fs_notify_desc
	.word	rndis_data_intf
	.word	fs_in_desc
	.word	fs_out_desc
	.word	0
	.type	eth_hs_function, %object
	.size	eth_hs_function, 44
eth_hs_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	hs_notify_desc
	.word	rndis_data_intf
	.word	hs_in_desc
	.word	hs_out_desc
	.word	0
	.type	eth_ss_function, %object
	.size	eth_ss_function, 56
eth_ss_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	ss_notify_desc
	.word	ss_intr_comp_desc
	.word	rndis_data_intf
	.word	ss_in_desc
	.word	ss_bulk_comp_desc
	.word	ss_out_desc
	.word	ss_bulk_comp_desc
	.word	0
	.type	ecm_qc_desc, %object
	.size	ecm_qc_desc, 13
ecm_qc_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	1514
	.short	0
	.byte	0
	.space	3
	.type	ecm_qc_strings, %object
	.size	ecm_qc_strings, 8
ecm_qc_strings:
	.word	ecm_qc_string_table
	.word	0
	.type	ecm_desc, %object
	.size	ecm_desc, 13
ecm_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	1514
	.short	0
	.byte	0
	.space	3
	.type	ecm_strings, %object
	.size	ecm_strings, 8
ecm_strings:
	.word	ecm_string_table
	.word	0
	.type	rndis_qc_string_defs, %object
	.size	rndis_qc_string_defs, 32
rndis_qc_string_defs:
	.space	4
	.word	.LC1619
	.space	4
	.word	.LC1620
	.space	4
	.word	.LC1621
	.space	8
	.type	rndis_qc_strings, %object
	.size	rndis_qc_strings, 8
rndis_qc_strings:
	.word	rndis_qc_string_table
	.word	0
	.type	qc_gadget_type, %object
	.size	qc_gadget_type, 24
qc_gadget_type:
	.word	.LC1607
	.space	20
	.type	fn_cntl, %object
	.size	fn_cntl, 4
fn_cntl:
	.word	.LC1601
	.type	fn_play, %object
	.size	fn_play, 4
fn_play:
	.word	.LC1603
	.type	fn_cap, %object
	.size	fn_cap, 4
fn_cap:
	.word	.LC1602
	.type	microphone_fu_controls, %object
	.size	microphone_fu_controls, 32
microphone_fu_controls:
	.word	microphone_fu_controls
	.word	microphone_fu_controls
	.space	12
	.word	.LC1583
	.space	8
	.type	speaker_fu_controls, %object
	.size	speaker_fu_controls, 32
speaker_fu_controls:
	.word	speaker_fu_controls
	.word	speaker_fu_controls
	.space	12
	.word	.LC1586
	.space	8
	.type	microphone_mute_control, %object
	.size	microphone_mute_control, 44
microphone_mute_control:
	.word	microphone_mute_control
	.word	microphone_mute_control
	.word	.LC1585
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	microphone_volume_control, %object
	.size	microphone_volume_control, 44
microphone_volume_control:
	.word	microphone_volume_control
	.word	microphone_volume_control
	.word	.LC1584
	.byte	2
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_mute_control, %object
	.size	speaker_mute_control, 44
speaker_mute_control:
	.word	speaker_mute_control
	.word	speaker_mute_control
	.word	.LC1588
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_volume_control, %object
	.size	speaker_volume_control, 44
speaker_volume_control:
	.word	speaker_volume_control
	.word	speaker_volume_control
	.word	.LC1587
	.byte	2
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	microphone_sample_freq_control, %object
	.size	microphone_sample_freq_control, 44
microphone_sample_freq_control:
	.word	microphone_sample_freq_control
	.word	microphone_sample_freq_control
	.word	.LC1580
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_sample_freq_control, %object
	.size	speaker_sample_freq_control, 44
speaker_sample_freq_control:
	.word	speaker_sample_freq_control
	.word	speaker_sample_freq_control
	.word	.LC1582
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	audio_strings, %object
	.size	audio_strings, 8
audio_strings:
	.word	audio_stringtab_dev
	.word	0
	.type	necm_desc, %object
	.size	necm_desc, 13
necm_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	9014
	.short	0
	.byte	0
	.space	3
	.type	ncm_strings, %object
	.size	ncm_strings, 8
ncm_strings:
	.word	ncm_string_table
	.word	0
	.type	usb_android_dt_match, %object
	.size	usb_android_dt_match, 392
usb_android_dt_match:
	.space	64
	.ascii	"qcom,android-usb\000"
	.space	111
	.space	4
	.space	196
	.type	dev_attr_remote_wakeup, %object
	.size	dev_attr_remote_wakeup, 16
dev_attr_remote_wakeup:
	.word	.LC1496
	.short	420
	.space	2
	.word	remote_wakeup_show
	.word	remote_wakeup_store
	.type	dev_attr_state, %object
	.size	dev_attr_state, 16
dev_attr_state:
	.word	.LC1497
	.short	292
	.space	2
	.word	state_show
	.word	0
	.type	dev_attr_pm_qos, %object
	.size	dev_attr_pm_qos, 16
dev_attr_pm_qos:
	.word	.LC1498
	.short	420
	.space	2
	.word	pm_qos_show
	.word	pm_qos_store
	.type	dev_attr_enable, %object
	.size	dev_attr_enable, 16
dev_attr_enable:
	.word	.LC1499
	.short	420
	.space	2
	.word	enable_show
	.word	enable_store
	.type	dev_attr_functions, %object
	.size	dev_attr_functions, 16
dev_attr_functions:
	.word	.LC1500
	.short	420
	.space	2
	.word	functions_show
	.word	functions_store
	.type	dev_attr_macos, %object
	.size	dev_attr_macos, 16
dev_attr_macos:
	.word	.LC1501
	.short	420
	.space	2
	.word	macos_show
	.word	0
	.type	dev_attr_ss_host_available, %object
	.size	dev_attr_ss_host_available, 16
dev_attr_ss_host_available:
	.word	.LC1502
	.short	420
	.space	2
	.word	ss_host_available_show
	.word	0
	.type	dev_attr_usb30en, %object
	.size	dev_attr_usb30en, 16
dev_attr_usb30en:
	.word	.LC1503
	.short	420
	.space	2
	.word	usb30en_show
	.word	usb30en_store
	.type	dev_attr_bcdUSB, %object
	.size	dev_attr_bcdUSB, 16
dev_attr_bcdUSB:
	.word	.LC1504
	.short	420
	.space	2
	.word	bcdUSB_show
	.word	0
	.type	dev_attr_iSerial, %object
	.size	dev_attr_iSerial, 16
dev_attr_iSerial:
	.word	.LC1505
	.short	420
	.space	2
	.word	iSerial_show
	.word	iSerial_store
	.type	dev_attr_iProduct, %object
	.size	dev_attr_iProduct, 16
dev_attr_iProduct:
	.word	.LC1506
	.short	420
	.space	2
	.word	iProduct_show
	.word	iProduct_store
	.type	dev_attr_iManufacturer, %object
	.size	dev_attr_iManufacturer, 16
dev_attr_iManufacturer:
	.word	.LC1507
	.short	420
	.space	2
	.word	iManufacturer_show
	.word	iManufacturer_store
	.type	dev_attr_bDeviceProtocol, %object
	.size	dev_attr_bDeviceProtocol, 16
dev_attr_bDeviceProtocol:
	.word	.LC1508
	.short	420
	.space	2
	.word	bDeviceProtocol_show
	.word	bDeviceProtocol_store
	.type	dev_attr_bDeviceSubClass, %object
	.size	dev_attr_bDeviceSubClass, 16
dev_attr_bDeviceSubClass:
	.word	.LC1509
	.short	420
	.space	2
	.word	bDeviceSubClass_show
	.word	bDeviceSubClass_store
	.type	dev_attr_bDeviceClass, %object
	.size	dev_attr_bDeviceClass, 16
dev_attr_bDeviceClass:
	.word	.LC1510
	.short	420
	.space	2
	.word	bDeviceClass_show
	.word	bDeviceClass_store
	.type	dev_attr_bcdDevice, %object
	.size	dev_attr_bcdDevice, 16
dev_attr_bcdDevice:
	.word	.LC1511
	.short	420
	.space	2
	.word	bcdDevice_show
	.word	bcdDevice_store
	.type	dev_attr_idProduct, %object
	.size	dev_attr_idProduct, 16
dev_attr_idProduct:
	.word	.LC1512
	.short	420
	.space	2
	.word	idProduct_show
	.word	idProduct_store
	.type	dev_attr_idVendor, %object
	.size	dev_attr_idVendor, 16
dev_attr_idVendor:
	.word	.LC1513
	.short	420
	.space	2
	.word	idVendor_show
	.word	idVendor_store
	.type	uasp_function, %object
	.size	uasp_function, 52
uasp_function:
	.word	.LC1517
	.space	20
	.word	uasp_function_init
	.word	uasp_function_cleanup
	.space	8
	.word	uasp_function_bind_config
	.space	8
	.type	audio_source_function, %object
	.size	audio_source_function, 52
audio_source_function:
	.word	.LC1171
	.space	12
	.word	audio_source_function_attributes
	.space	4
	.word	audio_source_function_init
	.word	audio_source_function_cleanup
	.space	8
	.word	audio_source_function_bind_config
	.word	audio_source_function_unbind_config
	.space	4
	.type	audio_source_function_attributes, %object
	.size	audio_source_function_attributes, 8
audio_source_function_attributes:
	.word	dev_attr_pcm
	.word	0
	.type	dev_attr_pcm, %object
	.size	dev_attr_pcm, 16
dev_attr_pcm:
	.word	.LC1519
	.short	420
	.space	2
	.word	audio_source_pcm_show
	.word	0
	.type	accessory_function, %object
	.size	accessory_function, 52
accessory_function:
	.word	.LC1015
	.space	20
	.word	accessory_function_init
	.word	accessory_function_cleanup
	.space	8
	.word	accessory_function_bind_config
	.space	4
	.word	accessory_function_ctrlrequest
	.type	mass_storage_function, %object
	.size	mass_storage_function, 52
mass_storage_function:
	.word	.LC1520
	.space	12
	.word	mass_storage_function_attributes
	.space	4
	.word	mass_storage_function_init
	.word	mass_storage_function_cleanup
	.space	8
	.word	mass_storage_function_bind_config
	.space	8
	.type	mass_storage_function_attributes, %object
	.size	mass_storage_function_attributes, 20
mass_storage_function_attributes:
	.word	dev_attr_inquiry_string
	.word	dev_attr_vendor_string
	.word	dev_attr_product_string
	.word	dev_attr_sua_version_info
	.word	0
	.type	dev_attr_sua_version_info, %object
	.size	dev_attr_sua_version_info, 16
dev_attr_sua_version_info:
	.word	.LC1521
	.short	420
	.space	2
	.word	sua_version_info_show
	.word	sua_version_info_store
	.type	dev_attr_product_string, %object
	.size	dev_attr_product_string, 16
dev_attr_product_string:
	.word	.LC1522
	.short	420
	.space	2
	.word	mass_storage_product_show
	.word	mass_storage_product_store
	.type	dev_attr_vendor_string, %object
	.size	dev_attr_vendor_string, 16
dev_attr_vendor_string:
	.word	.LC1523
	.short	420
	.space	2
	.word	mass_storage_vendor_show
	.word	mass_storage_vendor_store
	.type	dev_attr_inquiry_string, %object
	.size	dev_attr_inquiry_string, 16
dev_attr_inquiry_string:
	.word	.LC1524
	.short	420
	.space	2
	.word	mass_storage_inquiry_show
	.word	mass_storage_inquiry_store
	.type	ecm_function, %object
	.size	ecm_function, 52
ecm_function:
	.word	.LC1431
	.space	12
	.word	ecm_function_attributes
	.space	4
	.word	ecm_function_init
	.word	ecm_function_cleanup
	.space	8
	.word	ecm_function_bind_config
	.word	ecm_function_unbind_config
	.space	4
	.type	rndis_qc_function, %object
	.size	rndis_qc_function, 52
rndis_qc_function:
	.word	.LC1525
	.space	12
	.word	rndis_function_attributes
	.space	4
	.word	rndis_qc_function_init
	.word	rndis_qc_function_cleanup
	.space	8
	.word	rndis_qc_function_bind_config
	.word	rndis_qc_function_unbind_config
	.space	4
	.type	rndis_function, %object
	.size	rndis_function, 52
rndis_function:
	.word	.LC1179
	.space	12
	.word	rndis_function_attributes
	.space	4
	.word	rndis_function_init
	.word	rndis_function_cleanup
	.space	8
	.word	rndis_function_bind_config
	.word	rndis_function_unbind_config
	.space	4
	.type	rndis_function_attributes, %object
	.size	rndis_function_attributes, 24
rndis_function_attributes:
	.word	dev_attr_manufacturer
	.word	dev_attr_wceis
	.word	dev_attr_ethaddr
	.word	dev_attr_vendorID
	.word	dev_attr_max_pkt_per_xfer
	.word	0
	.type	dev_attr_max_pkt_per_xfer, %object
	.size	dev_attr_max_pkt_per_xfer, 16
dev_attr_max_pkt_per_xfer:
	.word	.LC1526
	.short	420
	.space	2
	.word	rndis_max_pkt_per_xfer_show
	.word	rndis_max_pkt_per_xfer_store
	.type	dev_attr_vendorID, %object
	.size	dev_attr_vendorID, 16
dev_attr_vendorID:
	.word	.LC1527
	.short	420
	.space	2
	.word	rndis_vendorID_show
	.word	rndis_vendorID_store
	.type	dev_attr_ethaddr, %object
	.size	dev_attr_ethaddr, 16
dev_attr_ethaddr:
	.word	.LC1528
	.short	420
	.space	2
	.word	rndis_ethaddr_show
	.word	rndis_ethaddr_store
	.type	dev_attr_wceis, %object
	.size	dev_attr_wceis, 16
dev_attr_wceis:
	.word	.LC1529
	.short	420
	.space	2
	.word	rndis_wceis_show
	.word	rndis_wceis_store
	.type	dev_attr_manufacturer, %object
	.size	dev_attr_manufacturer, 16
dev_attr_manufacturer:
	.word	.LC1530
	.short	420
	.space	2
	.word	rndis_manufacturer_show
	.word	rndis_manufacturer_store
	.type	ptp_function, %object
	.size	ptp_function, 52
ptp_function:
	.word	.LC1531
	.space	20
	.word	ptp_function_init
	.word	ptp_function_cleanup
	.space	8
	.word	ptp_function_bind_config
	.space	4
	.word	mtp_function_ctrlrequest
	.type	mtp_function, %object
	.size	mtp_function, 52
mtp_function:
	.word	.LC1017
	.space	20
	.word	mtp_function_init
	.word	mtp_function_cleanup
	.space	8
	.word	mtp_function_bind_config
	.space	4
	.word	mtp_function_ctrlrequest
	.type	ccid_function, %object
	.size	ccid_function, 52
ccid_function:
	.word	.LC1011
	.space	20
	.word	ccid_function_init
	.word	ccid_function_cleanup
	.space	8
	.word	ccid_function_bind_config
	.space	8
	.type	qdss_function, %object
	.size	qdss_function, 52
qdss_function:
	.word	.LC1164
	.space	20
	.word	qdss_function_init
	.word	qdss_function_cleanup
	.space	8
	.word	qdss_function_bind_config
	.space	8
	.type	diag_function, %object
	.size	diag_function, 52
diag_function:
	.word	.LC1532
	.space	12
	.word	diag_function_attributes
	.space	4
	.word	diag_function_init
	.word	diag_function_cleanup
	.space	8
	.word	diag_function_bind_config
	.space	8
	.type	diag_function_attributes, %object
	.size	diag_function_attributes, 8
diag_function_attributes:
	.word	dev_attr_clients
	.word	0
	.type	dev_attr_clients, %object
	.size	dev_attr_clients, 16
dev_attr_clients:
	.word	.LC1533
	.short	128
	.space	2
	.word	0
	.word	clients_store
	.type	audio_function, %object
	.size	audio_function, 52
audio_function:
	.word	.LC1466
	.space	36
	.word	audio_function_bind_config
	.space	8
	.type	mbim_function, %object
	.size	mbim_function, 52
mbim_function:
	.word	.LC1031
	.space	12
	.word	mbim_function_attributes
	.space	4
	.word	mbim_function_init
	.word	mbim_function_cleanup
	.space	8
	.word	mbim_function_bind_config
	.space	4
	.word	mbim_function_ctrlrequest
	.type	mbim_function_attributes, %object
	.size	mbim_function_attributes, 8
mbim_function_attributes:
	.word	dev_attr_mbim_transports
	.word	0
	.type	dev_attr_mbim_transports, %object
	.size	dev_attr_mbim_transports, 16
dev_attr_mbim_transports:
	.word	.LC1534
	.short	420
	.space	2
	.word	mbim_transports_show
	.word	mbim_transports_store
	.type	ecm_qc_function, %object
	.size	ecm_qc_function, 52
ecm_qc_function:
	.word	.LC1536
	.space	12
	.word	ecm_function_attributes
	.space	4
	.word	ecm_function_init
	.word	ecm_function_cleanup
	.space	8
	.word	ecm_qc_function_bind_config
	.word	ecm_qc_function_unbind_config
	.space	4
	.type	ecm_function_attributes, %object
	.size	ecm_function_attributes, 12
ecm_function_attributes:
	.word	dev_attr_ecm_transports
	.word	dev_attr_ecm_ethaddr
	.word	0
	.type	dev_attr_ecm_transports, %object
	.size	dev_attr_ecm_transports, 16
dev_attr_ecm_transports:
	.word	.LC1537
	.short	420
	.space	2
	.word	ecm_transports_show
	.word	ecm_transports_store
	.type	dev_attr_ecm_ethaddr, %object
	.size	dev_attr_ecm_ethaddr, 16
dev_attr_ecm_ethaddr:
	.word	.LC1538
	.short	420
	.space	2
	.word	ecm_ethaddr_show
	.word	ecm_ethaddr_store
	.type	rmnet_function, %object
	.size	rmnet_function, 52
rmnet_function:
	.word	.LC1175
	.space	12
	.word	rmnet_function_attributes
	.space	8
	.word	rmnet_function_cleanup
	.space	8
	.word	rmnet_function_bind_config
	.space	8
	.type	rmnet_function_attributes, %object
	.size	rmnet_function_attributes, 12
rmnet_function_attributes:
	.word	dev_attr_rmnet_transports
	.word	dev_attr_rmnet_xport_names
	.word	0
	.type	dev_attr_rmnet_xport_names, %object
	.size	dev_attr_rmnet_xport_names, 16
dev_attr_rmnet_xport_names:
	.word	.LC1540
	.short	420
	.space	2
	.word	rmnet_xport_names_show
	.word	rmnet_xport_names_store
	.type	dev_attr_rmnet_transports, %object
	.size	dev_attr_rmnet_transports, 16
dev_attr_rmnet_transports:
	.word	.LC1541
	.short	420
	.space	2
	.word	rmnet_transports_show
	.word	rmnet_transports_store
	.type	rmnet_smd_sdio_function, %object
	.size	rmnet_smd_sdio_function, 52
rmnet_smd_sdio_function:
	.word	.LC1013
	.space	12
	.word	rmnet_smd_sdio_attributes
	.space	4
	.word	rmnet_smd_sdio_function_init
	.word	rmnet_smd_sdio_function_cleanup
	.space	8
	.word	rmnet_smd_sdio_bind_config
	.space	8
	.type	rmnet_smd_sdio_attributes, %object
	.size	rmnet_smd_sdio_attributes, 8
rmnet_smd_sdio_attributes:
	.word	dev_attr_transport
	.word	0
	.type	rmnet_sdio_function, %object
	.size	rmnet_sdio_function, 52
rmnet_sdio_function:
	.word	.LC1036
	.space	36
	.word	rmnet_sdio_function_bind_config
	.space	8
	.type	rmnet_smd_function, %object
	.size	rmnet_smd_function, 52
rmnet_smd_function:
	.word	.LC1542
	.space	36
	.word	rmnet_smd_function_bind_config
	.space	8
	.type	acm_function, %object
	.size	acm_function, 52
acm_function:
	.word	.LC904
	.space	12
	.word	acm_function_attributes
	.space	4
	.word	acm_function_init
	.word	acm_function_cleanup
	.space	8
	.word	acm_function_bind_config
	.space	8
	.type	acm_function_attributes, %object
	.size	acm_function_attributes, 8
acm_function_attributes:
	.word	dev_attr_instances
	.word	0
	.type	dev_attr_instances, %object
	.size	dev_attr_instances, 16
dev_attr_instances:
	.word	.LC1543
	.short	420
	.space	2
	.word	acm_instances_show
	.word	acm_instances_store
	.type	midi_function, %object
	.size	midi_function, 52
midi_function:
	.word	.LC1544
	.space	12
	.word	midi_function_attributes
	.space	4
	.word	midi_function_init
	.word	midi_function_cleanup
	.space	8
	.word	midi_function_bind_config
	.space	8
	.type	midi_function_attributes, %object
	.size	midi_function_attributes, 8
midi_function_attributes:
	.word	dev_attr_alsa
	.word	0
	.type	dev_attr_alsa, %object
	.size	dev_attr_alsa, 16
dev_attr_alsa:
	.word	.LC1545
	.short	292
	.space	2
	.word	midi_alsa_show
	.word	0
	.type	ffs_function_attributes, %object
	.size	ffs_function_attributes, 8
ffs_function_attributes:
	.word	dev_attr_aliases
	.word	0
	.type	dev_attr_aliases, %object
	.size	dev_attr_aliases, 16
dev_attr_aliases:
	.word	.LC1547
	.short	420
	.space	2
	.word	ffs_aliases_show
	.word	ffs_aliases_store
	.type	dev_strings, %object
	.size	dev_strings, 8
dev_strings:
	.word	stringtab_dev
	.word	0
	.type	stringtab_dev, %object
	.size	stringtab_dev, 8
stringtab_dev:
	.short	1033
	.space	2
	.word	strings_dev
	.type	ncm_function, %object
	.size	ncm_function, 52
ncm_function:
	.word	.LC791
	.space	20
	.word	ncm_function_init
	.word	ncm_function_cleanup
	.space	8
	.word	ncm_function_bind_config
	.word	ncm_function_unbind_config
	.space	4
	.type	ncm_string_table, %object
	.size	ncm_string_table, 8
ncm_string_table:
	.short	1033
	.space	2
	.word	ncm_string_defs
	.type	ncm_desc, %object
	.size	ncm_desc, 6
ncm_desc:
	.byte	6
	.byte	36
	.byte	26
	.2byte	256
	.byte	9
	.space	2
	.type	ncm_header_desc, %object
	.size	ncm_header_desc, 5
ncm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	conn_gadget_function, %object
	.size	conn_gadget_function, 52
conn_gadget_function:
	.word	.LC906
	.space	12
	.word	conn_gadget_function_attributes
	.space	4
	.word	conn_gadget_function_init
	.word	conn_gadget_function_cleanup
	.space	8
	.word	conn_gadget_function_bind_config
	.space	8
	.type	conn_gadget_function_attributes, %object
	.size	conn_gadget_function_attributes, 16
conn_gadget_function_attributes:
	.word	dev_attr_usb_buffer_size
	.word	dev_attr_out_max_packet_size
	.word	dev_attr_in_max_packet_size
	.word	0
	.type	dev_attr_in_max_packet_size, %object
	.size	dev_attr_in_max_packet_size, 16
dev_attr_in_max_packet_size:
	.word	.LC1553
	.short	420
	.space	2
	.word	conn_gadget_in_max_packet_size_show
	.word	conn_gadget_in_max_packet_size_store
	.type	dev_attr_out_max_packet_size, %object
	.size	dev_attr_out_max_packet_size, 16
dev_attr_out_max_packet_size:
	.word	.LC1554
	.short	420
	.space	2
	.word	conn_gadget_out_max_packet_size_show
	.word	conn_gadget_out_max_packet_size_store
	.type	dev_attr_usb_buffer_size, %object
	.size	dev_attr_usb_buffer_size, 16
dev_attr_usb_buffer_size:
	.word	.LC1555
	.short	420
	.space	2
	.word	conn_gadget_usb_buffer_size_show
	.word	conn_gadget_usb_buffer_size_store
	.type	conn_gadget_superspeed_bulk_comp_desc, %object
	.size	conn_gadget_superspeed_bulk_comp_desc, 6
conn_gadget_superspeed_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	___modver_attr, %object
	.size	___modver_attr, 36
___modver_attr:
	.word	.LC1561
	.short	292
	.space	2
	.word	__modver_version_show
	.space	16
	.word	.LC1120
	.word	.LC1562
	.type	audio_stringtab_dev, %object
	.size	audio_stringtab_dev, 8
audio_stringtab_dev:
	.short	1033
	.space	2
	.word	audio_string_defs
	.type	microphone_as_iso_in_desc, %object
	.size	microphone_as_iso_in_desc, 7
microphone_as_iso_in_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	microphone_as_header_desc, %object
	.size	microphone_as_header_desc, 7
microphone_as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	2
	.byte	1
	.2byte	1
	.space	1
	.type	speaker_as_iso_out_desc, %object
	.size	speaker_as_iso_out_desc, 7
speaker_as_iso_out_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	speaker_as_header_desc, %object
	.size	speaker_as_header_desc, 7
speaker_as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	3
	.byte	1
	.2byte	1
	.space	1
	.type	microphone_output_terminal_desc, %object
	.size	microphone_output_terminal_desc, 9
microphone_output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	2
	.short	257
	.byte	1
	.byte	1
	.space	1
	.space	3
	.type	speaker_output_terminal_desc, %object
	.size	speaker_output_terminal_desc, 9
speaker_output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	4
	.short	769
	.byte	3
	.byte	3
	.space	1
	.space	3
	.type	req_capture_count, %object
	.size	req_capture_count, 4
req_capture_count:
	.word	48
	.type	rndis_qc_string_table, %object
	.size	rndis_qc_string_table, 8
rndis_qc_string_table:
	.short	1033
	.space	2
	.word	rndis_qc_string_defs
	.type	rndis_qc_ss_bulk_comp_desc, %object
	.size	rndis_qc_ss_bulk_comp_desc, 6
rndis_qc_ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rndis_qc_ss_intr_comp_desc, %object
	.size	rndis_qc_ss_intr_comp_desc, 6
rndis_qc_ss_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	rndis_qc_acm_descriptor, %object
	.size	rndis_qc_acm_descriptor, 4
rndis_qc_acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	0
	.type	rndis_qc_call_mgmt_descriptor, %object
	.size	rndis_qc_call_mgmt_descriptor, 5
rndis_qc_call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.byte	1
	.space	3
	.type	rndis_qc_header_desc, %object
	.size	rndis_qc_header_desc, 5
rndis_qc_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	ecm_string_table, %object
	.size	ecm_string_table, 8
ecm_string_table:
	.short	1033
	.space	2
	.word	ecm_string_defs
	.type	ss_ecm_bulk_comp_desc, %object
	.size	ss_ecm_bulk_comp_desc, 6
ss_ecm_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_ecm_intr_comp_desc, %object
	.size	ss_ecm_intr_comp_desc, 6
ss_ecm_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	16
	.space	2
	.type	ecm_header_desc, %object
	.size	ecm_header_desc, 5
ecm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	mbim_string_table, %object
	.size	mbim_string_table, 8
mbim_string_table:
	.short	1033
	.space	2
	.word	mbim_string_defs
	.type	ss_mbim_out_comp_desc, %object
	.size	ss_mbim_out_comp_desc, 6
ss_mbim_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_mbim_in_comp_desc, %object
	.size	ss_mbim_in_comp_desc, 6
ss_mbim_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_mbim_notify_comp_desc, %object
	.size	ss_mbim_notify_comp_desc, 6
ss_mbim_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	64
	.space	2
	.type	ext_mbb_desc, %object
	.size	ext_mbb_desc, 8
ext_mbb_desc:
	.byte	8
	.byte	36
	.byte	28
	.2byte	256
	.byte	64
	.short	1500
	.type	mbim_header_desc, %object
	.size	mbim_header_desc, 5
mbim_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	ecm_qc_string_table, %object
	.size	ecm_qc_string_table, 8
ecm_qc_string_table:
	.short	1033
	.space	2
	.word	ecm_qc_string_defs
	.type	ecm_qc_ss_out_comp_desc, %object
	.size	ecm_qc_ss_out_comp_desc, 6
ecm_qc_ss_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ecm_qc_ss_in_comp_desc, %object
	.size	ecm_qc_ss_in_comp_desc, 6
ecm_qc_ss_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ecm_qc_ss_notify_comp_desc, %object
	.size	ecm_qc_ss_notify_comp_desc, 6
ecm_qc_ss_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	16
	.space	2
	.type	ecm_qc_header_desc, %object
	.size	ecm_qc_header_desc, 5
ecm_qc_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	rndis_string_table, %object
	.size	rndis_string_table, 8
rndis_string_table:
	.short	1033
	.space	2
	.word	rndis_string_defs
	.type	ss_bulk_comp_desc, %object
	.size	ss_bulk_comp_desc, 6
ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_intr_comp_desc, %object
	.size	ss_intr_comp_desc, 6
ss_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	rndis_acm_descriptor, %object
	.size	rndis_acm_descriptor, 4
rndis_acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	0
	.type	call_mgmt_descriptor, %object
	.size	call_mgmt_descriptor, 5
call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.byte	1
	.space	3
	.type	header_desc, %object
	.size	header_desc, 5
header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	acc_string_table, %object
	.size	acc_string_table, 8
acc_string_table:
	.short	1033
	.space	2
	.word	acc_string_defs
	.type	acc_superspeed_out_comp_desc, %object
	.size	acc_superspeed_out_comp_desc, 6
acc_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acc_superspeed_in_comp_desc, %object
	.size	acc_superspeed_in_comp_desc, 6
acc_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	mtp_string_table, %object
	.size	mtp_string_table, 8
mtp_string_table:
	.short	1033
	.space	2
	.word	mtp_string_defs
	.type	mtp_superspeed_intr_comp_desc, %object
	.size	mtp_superspeed_intr_comp_desc, 6
mtp_superspeed_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	28
	.space	2
	.type	mtp_superspeed_out_comp_desc, %object
	.size	mtp_superspeed_out_comp_desc, 6
mtp_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.byte	2
	.space	3
	.space	2
	.type	mtp_superspeed_in_comp_desc, %object
	.size	mtp_superspeed_in_comp_desc, 6
mtp_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.byte	2
	.space	3
	.space	2
	.type	ptp_interface_desc, %object
	.size	ptp_interface_desc, 9
ptp_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	3
	.byte	6
	.byte	1
	.byte	1
	.space	1
	.space	3
	.type	midi_stringtab, %object
	.size	midi_stringtab, 8
midi_stringtab:
	.short	1033
	.space	2
	.word	midi_string_defs
	.type	adb_superspeed_out_comp_desc, %object
	.size	adb_superspeed_out_comp_desc, 6
adb_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	adb_superspeed_in_comp_desc, %object
	.size	adb_superspeed_in_comp_desc, 6
adb_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acm_string_table, %object
	.size	acm_string_table, 8
acm_string_table:
	.short	1033
	.space	2
	.word	acm_string_defs
	.type	acm_ss_bulk_comp_desc, %object
	.size	acm_ss_bulk_comp_desc, 6
acm_ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acm_descriptor, %object
	.size	acm_descriptor, 4
acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	2
	.type	acm_header_desc, %object
	.size	acm_header_desc, 5
acm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	fsg_stringtab, %object
	.size	fsg_stringtab, 8
fsg_stringtab:
	.short	1033
	.space	2
	.word	fsg_strings
	.type	fs_audio_desc, %object
	.size	fs_audio_desc, 48
fs_audio_desc:
	.word	audio_source_ac_interface_desc
	.word	audio_source_ac_header_desc
	.word	input_terminal_desc
	.word	output_terminal_desc
	.word	feature_unit_desc
	.word	as_interface_alt_0_desc
	.word	as_interface_alt_1_desc
	.word	as_header_desc
	.word	as_type_i_desc
	.word	fs_as_in_ep_desc
	.word	as_iso_in_desc
	.word	0
	.type	hs_audio_desc, %object
	.size	hs_audio_desc, 48
hs_audio_desc:
	.word	audio_source_ac_interface_desc
	.word	audio_source_ac_header_desc
	.word	input_terminal_desc
	.word	output_terminal_desc
	.word	feature_unit_desc
	.word	as_interface_alt_0_desc
	.word	as_interface_alt_1_desc
	.word	as_header_desc
	.word	as_type_i_desc
	.word	hs_as_in_ep_desc
	.word	as_iso_in_desc
	.word	0
	.type	as_iso_in_desc, %object
	.size	as_iso_in_desc, 7
as_iso_in_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	as_header_desc, %object
	.size	as_header_desc, 7
as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	output_terminal_desc, %object
	.size	output_terminal_desc, 9
output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	3
	.short	257
	.byte	2
	.byte	2
	.space	1
	.space	3
	.type	feature_unit_desc, %object
	.size	feature_unit_desc, 9
feature_unit_desc:
	.byte	9
	.byte	36
	.byte	6
	.byte	2
	.byte	1
	.byte	2
	.space	3
	.space	3
	.type	audio_source_ac_header_desc, %object
	.size	audio_source_ac_header_desc, 10
audio_source_ac_header_desc:
	.byte	10
	.byte	36
	.byte	1
	.2byte	256
	.2byte	40
	.byte	2
	.byte	0
	.byte	1
	.space	2
	.type	rmnet_string_table, %object
	.size	rmnet_string_table, 8
rmnet_string_table:
	.short	1033
	.space	2
	.word	rmnet_string_defs
	.type	rmnet_ss_out_comp_desc, %object
	.size	rmnet_ss_out_comp_desc, 6
rmnet_ss_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rmnet_ss_in_comp_desc, %object
	.size	rmnet_ss_in_comp_desc, 6
rmnet_ss_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rmnet_ss_notify_comp_desc, %object
	.size	rmnet_ss_notify_comp_desc, 6
rmnet_ss_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	dev_attr_transport, %object
	.size	dev_attr_transport, 16
dev_attr_transport:
	.word	.LC1753
	.short	420
	.space	2
	.word	0
	.word	transport_store
	.type	rmnet_mux_string_table, %object
	.size	rmnet_mux_string_table, 8
rmnet_mux_string_table:
	.short	1033
	.space	2
	.word	rmnet_mux_string_defs
	.type	rmnet_mux_string_defs, %object
	.size	rmnet_mux_string_defs, 16
rmnet_mux_string_defs:
	.space	4
	.word	.LC1750
	.space	8
	.type	mux_sdio_rx_fctrl_dis_thld, %object
	.size	mux_sdio_rx_fctrl_dis_thld, 4
mux_sdio_rx_fctrl_dis_thld:
	.word	500
	.type	mux_sdio_tx_pkt_drop_thld, %object
	.size	mux_sdio_tx_pkt_drop_thld, 4
mux_sdio_tx_pkt_drop_thld:
	.word	1000
	.type	rmnet_sdio_string_table, %object
	.size	rmnet_sdio_string_table, 8
rmnet_sdio_string_table:
	.short	1033
	.space	2
	.word	rmnet_sdio_string_defs
	.type	rmnet_sdio_string_defs, %object
	.size	rmnet_sdio_string_defs, 16
rmnet_sdio_string_defs:
	.space	4
	.word	.LC1758
	.space	8
	.type	sdio_rx_fctrl_dis_thld, %object
	.size	sdio_rx_fctrl_dis_thld, 4
sdio_rx_fctrl_dis_thld:
	.word	500
	.type	sdio_tx_pkt_drop_thld, %object
	.size	sdio_tx_pkt_drop_thld, 4
sdio_tx_pkt_drop_thld:
	.word	1000
	.type	rmnet_smd_string_table, %object
	.size	rmnet_smd_string_table, 8
rmnet_smd_string_table:
	.short	1033
	.space	2
	.word	rmnet_smd_string_defs
	.type	rmnet_smd_string_defs, %object
	.size	rmnet_smd_string_defs, 16
rmnet_smd_string_defs:
	.space	4
	.word	.LC1758
	.space	8
	.type	qdss_string_table, %object
	.size	qdss_string_table, 8
qdss_string_table:
	.short	1033
	.space	2
	.word	qdss_string_defs
	.type	ss_bulk_out_comp_desc, %object
	.size	ss_bulk_out_comp_desc, 6
ss_bulk_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_bulk_in_comp_desc, %object
	.size	ss_bulk_in_comp_desc, 6
ss_bulk_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.bss
	.align	2
	.set	.LANCHOR1,. + 0
	.type	n_sdio_ports, %object
	.size	n_sdio_ports, 4
n_sdio_ports:
	.space	4
	.type	sdio_ports, %object
	.size	sdio_ports, 208
sdio_ports:
	.space	208
	.type	n_smd_ports, %object
	.size	n_smd_ports, 4
n_smd_ports:
	.space	4
	.type	smd_ports, %object
	.size	smd_ports, 208
smd_ports:
	.space	208
	.type	n_bam_ports, %object
	.size	n_bam_ports, 4
n_bam_ports:
	.space	4
	.type	bam_ports, %object
	.size	bam_ports, 84
bam_ports:
	.space	84
	.type	ctrl_smd_ports, %object
	.size	ctrl_smd_ports, 504
ctrl_smd_ports:
	.space	504
	.type	no_ctrl_ports, %object
	.size	no_ctrl_ports, 4
no_ctrl_ports:
	.space	4
	.type	gctrl_ports, %object
	.size	gctrl_ports, 416
gctrl_ports:
	.space	416
	.type	no_data_ports, %object
	.size	no_data_ports, 4
no_data_ports:
	.space	4
	.type	gdata_ports, %object
	.size	gdata_ports, 416
gdata_ports:
	.space	416
	.type	num_ctrl_ports, %object
	.size	num_ctrl_ports, 4
num_ctrl_ports:
	.space	4
	.type	ghsuart_ctrl_ports, %object
	.size	ghsuart_ctrl_ports, 168
ghsuart_ctrl_ports:
	.space	168
	.type	num_data_ports, %object
	.size	num_data_ports, 4
num_data_ports:
	.space	4
	.type	ghsuart_data_ports, %object
	.size	ghsuart_data_ports, 168
ghsuart_data_ports:
	.space	168
	.type	read_state, %object
	.size	read_state, 4
read_state:
	.space	4
	.type	modem_wait_q, %object
	.size	modem_wait_q, 12
modem_wait_q:
	.space	12
	.type	audio_reinit, %object
	.size	audio_reinit, 1
audio_reinit:
	.space	1
	.space	3
	.type	serial_string, %object
	.size	serial_string, 256
serial_string:
	.space	256
	.type	composite, %object
	.size	composite, 4
composite:
	.space	4
	.type	rmux_dev, %object
	.size	rmux_dev, 4
rmux_dev:
	.space	4
	.type	_conn_gadget_dev, %object
	.size	_conn_gadget_dev, 4
_conn_gadget_dev:
	.space	4
	.type	_acc_dev, %object
	.size	_acc_dev, 4
_acc_dev:
	.space	4
	.type	rndis_lock, %object
	.size	rndis_lock, 4
rndis_lock:
	.space	4
	.type	_rndis_qc, %object
	.size	_rndis_qc, 4
_rndis_qc:
	.space	4
	.type	_mtp_dev, %object
	.size	_mtp_dev, 4
_mtp_dev:
	.space	4
	.type	_mbim_dev, %object
	.size	_mbim_dev, 4
_mbim_dev:
	.space	4
	.type	product_string, %object
	.size	product_string, 256
product_string:
	.space	256
	.type	manufacturer_string, %object
	.size	manufacturer_string, 256
manufacturer_string:
	.space	256
	.type	ecm_transports, %object
	.size	ecm_transports, 50
ecm_transports:
	.space	50
	.space	2
	.type	rmnet_xport_names, %object
	.size	rmnet_xport_names, 50
rmnet_xport_names:
	.space	50
	.space	2
	.type	rmnet_transports, %object
	.size	rmnet_transports, 50
rmnet_transports:
	.space	50
	.space	2
	.type	mbim_transports, %object
	.size	mbim_transports, 50
mbim_transports:
	.space	50
	.type	usb30en, %object
	.size	usb30en, 1
usb30en:
	.space	1
	.space	1
	.type	epnum, %object
	.size	epnum, 4
epnum:
	.space	4
	.type	composite_gadget_bind, %object
	.size	composite_gadget_bind, 4
composite_gadget_bind:
	.space	4
	.type	idVendor, %object
	.size	idVendor, 2
idVendor:
	.space	2
	.type	idProduct, %object
	.size	idProduct, 2
idProduct:
	.space	2
	.type	bcdDevice, %object
	.size	bcdDevice, 2
bcdDevice:
	.space	2
	.space	2
	.type	iManufacturer, %object
	.size	iManufacturer, 4
iManufacturer:
	.space	4
	.type	composite_manufacturer, %object
	.size	composite_manufacturer, 50
composite_manufacturer:
	.space	50
	.space	2
	.type	iProduct, %object
	.size	iProduct, 4
iProduct:
	.space	4
	.type	iSerialNumber, %object
	.size	iSerialNumber, 4
iSerialNumber:
	.space	4
	.type	android_dev_list, %object
	.size	android_dev_list, 8
android_dev_list:
	.space	8
	.type	rmnet_ports, %object
	.size	rmnet_ports, 72
rmnet_ports:
	.space	72
	.type	gserial_wq, %object
	.size	gserial_wq, 4
gserial_wq:
	.space	4
	.type	rmnet_smd, %object
	.size	rmnet_smd, 4
rmnet_smd:
	.space	4
	.type	gsdio_wq, %object
	.size	gsdio_wq, 4
gsdio_wq:
	.space	4
	.type	gsmd_wq, %object
	.size	gsmd_wq, 4
gsmd_wq:
	.space	4
	.type	uether_wq, %object
	.size	uether_wq, 4
uether_wq:
	.space	4
	.type	d_lock, %object
	.size	d_lock, 4
d_lock:
	.space	4
	.type	dent_smd, %object
	.size	dent_smd, 4
dent_smd:
	.space	4
	.type	ghsuart_ctrl_dent, %object
	.size	ghsuart_ctrl_dent, 4
ghsuart_ctrl_dent:
	.space	4
	.type	ghsuart_data_dent, %object
	.size	ghsuart_data_dent, 4
ghsuart_data_dent:
	.space	4
	.type	dent_diag, %object
	.size	dent_diag, 4
dent_diag:
	.space	4
	.type	ch_lock, %object
	.size	ch_lock, 4
ch_lock:
	.space	4
	.type	nr_rmnet_ports, %object
	.size	nr_rmnet_ports, 4
nr_rmnet_ports:
	.space	4
	.type	gbam_dent, %object
	.size	gbam_dent, 4
gbam_dent:
	.space	4
	.type	no_ctrl_smd_ports, %object
	.size	no_ctrl_smd_ports, 4
no_ctrl_smd_ports:
	.space	4
	.type	no_ctrl_qti_ports, %object
	.size	no_ctrl_qti_ports, 4
no_ctrl_qti_ports:
	.space	4
	.type	no_data_bam_ports, %object
	.size	no_data_bam_ports, 4
no_data_bam_ports:
	.space	4
	.type	no_data_bam2bam_ports, %object
	.size	no_data_bam2bam_ports, 4
no_data_bam2bam_ports:
	.space	4
	.type	no_ctrl_hsic_ports, %object
	.size	no_ctrl_hsic_ports, 4
no_ctrl_hsic_ports:
	.space	4
	.type	no_data_hsic_ports, %object
	.size	no_data_hsic_ports, 4
no_data_hsic_ports:
	.space	4
	.type	no_ctrl_hsuart_ports, %object
	.size	no_ctrl_hsuart_ports, 4
no_ctrl_hsuart_ports:
	.space	4
	.type	no_data_hsuart_ports, %object
	.size	no_data_hsuart_ports, 4
no_data_hsuart_ports:
	.space	4
	.type	_ccid_dev, %object
	.size	_ccid_dev, 4
_ccid_dev:
	.space	4
	.type	_adb_dev, %object
	.size	_adb_dev, 4
_adb_dev:
	.space	4
	.type	control_line_state, %object
	.size	control_line_state, 4
control_line_state:
	.space	4
	.type	grmnet_ctrl_wq, %object
	.size	grmnet_ctrl_wq, 4
grmnet_ctrl_wq:
	.space	4
	.type	smd_ctrl_dent, %object
	.size	smd_ctrl_dent, 4
smd_ctrl_dent:
	.space	4
	.type	smd_ctrl_dfile, %object
	.size	smd_ctrl_dfile, 4
smd_ctrl_dfile:
	.space	4
	.type	online_clients, %object
	.size	online_clients, 1
online_clients:
	.space	1
	.space	3
	.type	gctrl_dent, %object
	.size	gctrl_dent, 4
gctrl_dent:
	.space	4
	.type	gctrl_dfile, %object
	.size	gctrl_dfile, 4
gctrl_dfile:
	.space	4
	.type	gdata_dent, %object
	.size	gdata_dent, 4
gdata_dent:
	.space	4
	.type	gdata_dfile_stats, %object
	.size	gdata_dfile_stats, 4
gdata_dfile_stats:
	.space	4
	.type	gdata_dfile_tstamp, %object
	.size	gdata_dfile_tstamp, 4
gdata_dfile_tstamp:
	.space	4
	.type	diag_dev_list, %object
	.size	diag_dev_list, 8
diag_dev_list:
	.space	8
	.type	n_tx_req_queued, %object
	.size	n_tx_req_queued, 4
n_tx_req_queued:
	.space	4
	.type	gbam_wq, %object
	.size	gbam_wq, 4
gbam_wq:
	.space	4
	.type	retry_cnt.38363, %object
	.size	retry_cnt.38363, 4
retry_cnt.38363:
	.space	4
	.type	diag_dload, %object
	.size	diag_dload, 4
diag_dload:
	.space	4
	.type	diag_clients, %object
	.size	diag_clients, 32
diag_clients:
	.space	32
	.type	ipa_params, %object
	.size	ipa_params, 28
ipa_params:
	.space	28
	.type	__key.50157, %object
	.size	__key.50157, 0
__key.50157:
	.type	ctrl_port, %object
	.size	ctrl_port, 4
ctrl_port:
	.space	4
	.type	__key.55905, %object
	.size	__key.55905, 0
__key.55905:
	.type	__key.55906, %object
	.size	__key.55906, 0
__key.55906:
	.type	__key.54545, %object
	.size	__key.54545, 0
__key.54545:
	.type	__key.54546, %object
	.size	__key.54546, 0
__key.54546:
	.type	__key.54547, %object
	.size	__key.54547, 0
__key.54547:
	.type	__key.53165, %object
	.size	__key.53165, 0
__key.53165:
	.type	__key.53166, %object
	.size	__key.53166, 0
__key.53166:
	.type	__key.38460, %object
	.size	__key.38460, 0
__key.38460:
	.type	__key.38588, %object
	.size	__key.38588, 0
__key.38588:
	.type	dent_rmnet_mux, %object
	.size	dent_rmnet_mux, 4
dent_rmnet_mux:
	.space	4
	.type	_ncm_dev, %object
	.size	_ncm_dev, 4
_ncm_dev:
	.space	4
	.type	nr_mbim_ports, %object
	.size	nr_mbim_ports, 4
nr_mbim_ports:
	.space	4
	.type	mbim_ports, %object
	.size	mbim_ports, 8
mbim_ports:
	.space	8
	.type	rndis_ul_max_xfer_size_rcvd, %object
	.size	rndis_ul_max_xfer_size_rcvd, 4
rndis_ul_max_xfer_size_rcvd:
	.space	4
	.type	rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	rndis_ul_max_pkt_per_xfer_rcvd, 4
rndis_ul_max_pkt_per_xfer_rcvd:
	.space	4
	.type	__key.63157, %object
	.size	__key.63157, 0
__key.63157:
	.type	__key.63158, %object
	.size	__key.63158, 0
__key.63158:
	.type	__key.63159, %object
	.size	__key.63159, 0
__key.63159:
	.type	ncm_connect, %object
	.size	ncm_connect, 1
ncm_connect:
	.space	1
	.space	3
	.type	android_dev_count, %object
	.size	android_dev_count, 4
android_dev_count:
	.space	4
	.type	android_class, %object
	.size	android_class, 4
android_class:
	.space	4
	.type	composite_string_index, %object
	.size	composite_string_index, 4
composite_string_index:
	.space	4
	.type	next_state.63723, %object
	.size	next_state.63723, 4
next_state.63723:
	.space	4
	.type	last_uevent.63722, %object
	.size	last_uevent.63722, 4
last_uevent.63722:
	.space	4
	.type	__key.45630, %object
	.size	__key.45630, 0
__key.45630:
	.type	terminal_mode_version, %object
	.size	terminal_mode_version, 2
terminal_mode_version:
	.space	2
	.type	terminal_mode_vendor_id, %object
	.size	terminal_mode_vendor_id, 2
terminal_mode_vendor_id:
	.space	2
	.type	record_timestamp, %object
	.size	record_timestamp, 4
record_timestamp:
	.space	4
	.type	bam2bam_ports, %object
	.size	bam2bam_ports, 12
bam2bam_ports:
	.space	12
	.type	rndis_per_dev_params, %object
	.size	rndis_per_dev_params, 60
rndis_per_dev_params:
	.space	60
	.type	rndis_initialized, %object
	.size	rndis_initialized, 1
rndis_initialized:
	.space	1
	.space	3
	.type	bam_data_wq, %object
	.size	bam_data_wq, 4
bam_data_wq:
	.space	4
	.type	n_bam2bam_data_ports, %object
	.size	n_bam2bam_data_ports, 4
n_bam2bam_data_ports:
	.space	4
	.type	bam2bam_data_ports, %object
	.size	bam2bam_data_ports, 4
bam2bam_data_ports:
	.space	4
	.type	__key.57704, %object
	.size	__key.57704, 0
__key.57704:
	.type	__key.57705, %object
	.size	__key.57705, 0
__key.57705:
	.type	__key.53548, %object
	.size	__key.53548, 0
__key.53548:
	.type	__key.53487, %object
	.size	__key.53487, 0
__key.53487:
	.type	__key.53488, %object
	.size	__key.53488, 0
__key.53488:
	.type	prev_len.47295, %object
	.size	prev_len.47295, 4
prev_len.47295:
	.space	4
	.type	n_ports, %object
	.size	n_ports, 4
n_ports:
	.space	4
	.type	gs_tty_driver, %object
	.size	gs_tty_driver, 4
gs_tty_driver:
	.space	4
	.type	ports, %object
	.size	ports, 192
ports:
	.space	192
	.type	gs_dent, %object
	.size	gs_dent, 4
gs_dent:
	.space	4
	.type	write_error_after_csw_sent, %object
	.size	write_error_after_csw_sent, 4
write_error_after_csw_sent:
	.space	4
	.type	csw_hack_sent, %object
	.size	csw_hack_sent, 4
csw_hack_sent:
	.space	4
	.type	__key.44730, %object
	.size	__key.44730, 0
__key.44730:
	.type	__key.44732, %object
	.size	__key.44732, 0
__key.44732:
	.type	__key.8231, %object
	.size	__key.8231, 0
__key.8231:
	.type	bam_info, %object
	.size	bam_info, 16
bam_info:
	.space	16
	.type	the_card, %object
	.size	the_card, 4
the_card:
	.space	4
	.type	the_dev, %object
	.size	the_dev, 4
the_dev:
	.space	4
	.type	acm_data, %object
	.size	acm_data, 4
acm_data:
	.space	4
	.type	retry_cnt.37602, %object
	.size	retry_cnt.37602, 4
retry_cnt.37602:
	.space	4
	.type	__key.46290, %object
	.size	__key.46290, 0
__key.46290:
	.type	__key.46299, %object
	.size	__key.46299, 0
__key.46299:
	.type	__key.47586, %object
	.size	__key.47586, 0
__key.47586:
	.type	__key.47532, %object
	.size	__key.47532, 0
__key.47532:
	.type	__key.47533, %object
	.size	__key.47533, 0
__key.47533:
	.type	__key.44767, %object
	.size	__key.44767, 0
__key.44767:
	.type	__key.44768, %object
	.size	__key.44768, 0
__key.44768:
	.type	rmnet_mux_smd_data_ch, %object
	.size	rmnet_mux_smd_data_ch, 4
rmnet_mux_smd_data_ch:
	.space	4
	.type	__key.32160, %object
	.size	__key.32160, 0
__key.32160:
	.type	__key.32161, %object
	.size	__key.32161, 0
__key.32161:
	.type	dev_addr, %object
	.size	dev_addr, 4
dev_addr:
	.space	4
	.type	__key.65131, %object
	.size	__key.65131, 0
__key.65131:
	.type	__key.65136, %object
	.size	__key.65136, 0
__key.65136:
	.type	__key.52751, %object
	.size	__key.52751, 0
__key.52751:
	.type	new_product_name.45912, %object
	.size	new_product_name.45912, 17
new_product_name.45912:
	.space	17
	.space	3
	.type	unknown.46106, %object
	.size	unknown.46106, 16
unknown.46106:
	.space	16
	.type	__key.48529, %object
	.size	__key.48529, 0
__key.48529:
	.type	__key.48887, %object
	.size	__key.48887, 0
__key.48887:
	.type	n_bam2bam_ports, %object
	.size	n_bam2bam_ports, 4
n_bam2bam_ports:
	.space	4
	.type	__key.49897, %object
	.size	__key.49897, 0
__key.49897:
	.type	__key.49898, %object
	.size	__key.49898, 0
__key.49898:
	.type	port_num.51104, %object
	.size	port_num.51104, 4
port_num.51104:
	.space	4
	.type	port_num.51776, %object
	.size	port_num.51776, 4
port_num.51776:
	.space	4
	.type	rmnet_initialized.63979, %object
	.size	rmnet_initialized.63979, 4
rmnet_initialized.63979:
	.space	4
	.type	ports.63980, %object
	.size	ports.63980, 4
ports.63980:
	.space	4
	.type	qc_dev_addr, %object
	.size	qc_dev_addr, 4
qc_dev_addr:
	.space	4
	.type	qc_host_addr, %object
	.size	qc_host_addr, 4
qc_host_addr:
	.space	4
	.type	audio_string_defs, %object
	.size	audio_string_defs, 8
audio_string_defs:
	.space	8
	.type	host_addr, %object
	.size	host_addr, 4
host_addr:
	.space	4
	.type	dbg_data, %object
	.size	dbg_data, 4104
dbg_data:
	.space	4104
	.type	rmnet_mux_sdio_data_ch, %object
	.size	rmnet_mux_sdio_data_ch, 4
rmnet_mux_sdio_data_ch:
	.space	4
	.type	rmnet_mux_sdio_ctl_ch, %object
	.size	rmnet_mux_sdio_ctl_ch, 4
rmnet_mux_sdio_ctl_ch:
	.space	4
	.type	rmnet_sdio_data_ch, %object
	.size	rmnet_sdio_data_ch, 4
rmnet_sdio_data_ch:
	.space	4
	.type	rmnet_sdio_ctl_ch, %object
	.size	rmnet_sdio_ctl_ch, 4
rmnet_sdio_ctl_ch:
	.space	4
	.type	debug_buffer, %object
	.size	debug_buffer, 4096
debug_buffer:
	.space	4096
	.section	.data.unlikely,"aw",%progbits
	.set	.LANCHOR6,. + 0
	.type	__warned.11106, %object
	.size	__warned.11106, 1
__warned.11106:
	.space	1
	.section	.devinit.rodata,"a",%progbits
	.align	2
	.type	android_id_table, %object
	.size	android_id_table, 48
android_id_table:
	.ascii	"android_usb\000"
	.space	8
	.space	4
	.ascii	"android_usb_hsic\000"
	.space	3
	.space	4
	.section	.exitcall.exit,"aw",%progbits
	.align	2
	.type	__exitcall_cleanup, %object
	.size	__exitcall_cleanup, 4
__exitcall_cleanup:
	.word	cleanup
	.type	__exitcall_gether_exit, %object
	.size	__exitcall_gether_exit, 4
__exitcall_gether_exit:
	.word	gether_exit
	.type	__exitcall_ghsuart_data_exit, %object
	.size	__exitcall_ghsuart_data_exit, 4
__exitcall_ghsuart_data_exit:
	.word	ghsuart_data_exit
	.type	__exitcall_ghsuart_ctrl_exit, %object
	.size	__exitcall_ghsuart_ctrl_exit, 4
__exitcall_ghsuart_ctrl_exit:
	.word	ghsuart_ctrl_exit
	.type	__exitcall_ghsic_data_exit, %object
	.size	__exitcall_ghsic_data_exit, 4
__exitcall_ghsic_data_exit:
	.word	ghsic_data_exit
	.type	__exitcall_gctrl_exit, %object
	.size	__exitcall_gctrl_exit, 4
__exitcall_gctrl_exit:
	.word	gctrl_exit
	.type	__exitcall_gqti_ctrl_cleanup, %object
	.size	__exitcall_gqti_ctrl_cleanup, 4
__exitcall_gqti_ctrl_cleanup:
	.word	gqti_ctrl_cleanup
	.type	__exitcall_gsmd_ctrl_exit, %object
	.size	__exitcall_gsmd_ctrl_exit, 4
__exitcall_gsmd_ctrl_exit:
	.word	gsmd_ctrl_exit
	.section	.initcall6.init,"aw",%progbits
	.align	2
	.type	__initcall_init6, %object
	.size	__initcall_init6, 4
__initcall_init6:
	.word	init
	.type	__initcall_gether_init6, %object
	.size	__initcall_gether_init6, 4
__initcall_gether_init6:
	.word	gether_init
	.type	__initcall_ghsuart_data_init6, %object
	.size	__initcall_ghsuart_data_init6, 4
__initcall_ghsuart_data_init6:
	.word	ghsuart_data_init
	.type	__initcall_ghsuart_ctrl_init6, %object
	.size	__initcall_ghsuart_ctrl_init6, 4
__initcall_ghsuart_ctrl_init6:
	.word	ghsuart_ctrl_init
	.type	__initcall_ghsic_data_init6, %object
	.size	__initcall_ghsic_data_init6, 4
__initcall_ghsic_data_init6:
	.word	ghsic_data_init
	.type	__initcall_gctrl_init6, %object
	.size	__initcall_gctrl_init6, 4
__initcall_gctrl_init6:
	.word	gctrl_init
	.type	__initcall_gqti_ctrl_init6, %object
	.size	__initcall_gqti_ctrl_init6, 4
__initcall_gqti_ctrl_init6:
	.word	gqti_ctrl_init
	.type	__initcall_gsmd_ctrl_init6, %object
	.size	__initcall_gsmd_ctrl_init6, 4
__initcall_gsmd_ctrl_init6:
	.word	gsmd_ctrl_init
	.section	.rodata.str1.4,"aMS",%progbits,1
	.align	2
.LC0:
	.ascii	"rmnet notify ep error %d\012\000"
	.space	2
.LC1:
	.ascii	"rmnet notify ep enqueue error %d\012\000"
	.space	2
.LC2:
	.ascii	"rmnet notifyep error %d\012\000"
	.space	3
.LC3:
	.ascii	"rmnet notify ep enq error %d\012\000"
	.space	2
.LC4:
	.ascii	"rmnet_mux notifyep error %d\012\000"
	.space	3
.LC5:
	.ascii	"reset config\012\000"
	.space	2
.LC6:
	.ascii	"setup complete --> %d, %d/%d\012\000"
	.space	2
.LC7:
	.ascii	"resume\012\000"
.LC8:
	.ascii	"suspend\012\000"
	.space	3
.LC9:
	.ascii	"diag_function_disable\012\000"
	.space	1
.LC10:
	.ascii	"acm ttyGS%d completion, err %d\012\000"
.LC11:
	.ascii	"acm ttyGS%d short resp, len %d\012\000"
.LC12:
	.ascii	"disable\012\000"
	.space	3
.LC13:
	.ascii	"RNDIS %s response error %d, %d/%d\012\000"
	.space	1
.LC14:
	.ascii	"notify/1 --> %d\012\000"
	.space	3
.LC15:
	.ascii	"notify/0 --> %d\012\000"
	.space	3
.LC16:
	.ascii	"packet filter %02x\012\000"
.LC17:
	.ascii	"invalid control req%02x.%02x v%04x i%04x l%d\012\000"
	.space	2
.LC18:
	.ascii	"ecm req%02x.%02x v%04x i%04x l%d\012\000"
	.space	2
.LC19:
	.ascii	"ecm req %02x.%02x response err %d\012\000"
	.space	1
.LC20:
	.ascii	"true\000"
	.space	3
.LC21:
	.ascii	"false\000"
	.space	2
.LC22:
	.ascii	"event %02x --> %d\012\000"
	.space	1
.LC23:
	.ascii	"notify connect %s\012\000"
	.space	1
.LC24:
	.ascii	"notify speed %d\012\000"
	.space	3
.LC25:
	.ascii	"notify --> %d\012\000"
	.space	1
.LC26:
	.ascii	"Bad control-OUT transfer\012\000"
	.space	2
.LC27:
	.ascii	"Got wrong INPUT SIZE (%d) from host\012\000"
	.space	3
.LC28:
	.ascii	"unbind function '%s'/%pK\012\000"
	.space	2
.LC29:
	.ascii	"unbind config '%s'/%pK\012\000"
.LC30:
	.ascii	"rmnet control SDIO write failed\012\000"
	.space	3
.LC31:
	.ascii	"ctrl resp queue empty %02x.%02x v%04x i%04x l%d\012"
	.ascii	"\000"
	.space	3
.LC32:
	.ascii	"rmnet_mux ep0 enqueue err %d\012\000"
	.space	2
.LC33:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs."
	.ascii	"c\000"
	.space	3
.LC34:
	.ascii	"<3>%s: device is already opened\012\000"
	.space	3
.LC35:
	.ascii	"<3>%s: ecm req %02x.%02x response err %d\012\000"
	.space	2
.LC36:
	.ascii	"<3>%s: %s(): cdev or config is NULL.\012\000"
	.space	2
.LC37:
	.ascii	"<6>%s: RNDIS %s response error %d, %d/%d\012\000"
	.space	2
.LC38:
	.ascii	"<6>%s: notify/0 --> %d\012\000"
.LC39:
	.ascii	"<3>%s: Failed to allocate playback_copy_buf\000"
.LC40:
	.ascii	"<3>%s: Failed to allocate playback_copy_buf buffer\000"
	.space	1
.LC41:
	.ascii	"<6>conn_gadget_release\012\000"
.LC42:
	.ascii	"<6>list_for_each...\012\000"
	.space	3
.LC43:
	.ascii	"NCM16 selected\012\000"
.LC44:
	.ascii	"NCM32 selected\012\000"
.LC45:
	.ascii	"non-CRC mode selected\012\000"
	.space	1
.LC46:
	.ascii	"CRC mode selected\012\000"
	.space	1
.LC47:
	.ascii	"<3>usb:%s * Host asked current MaxDatagramSize, sen"
	.ascii	"ding %d *\012\000"
	.space	2
.LC48:
	.ascii	"ncm req%02x.%02x v%04x i%04x l%d\012\000"
	.space	2
.LC49:
	.ascii	"ncm req %02x.%02x response err %d\012\000"
	.space	1
.LC50:
	.ascii	"<3>usb:%s * Bad control-OUT transfer *\012\000"
.LC51:
	.ascii	"<3>usb:%s * Got wrong MTU SIZE (%d) from host *\012"
	.ascii	"\000"
	.space	3
.LC52:
	.ascii	"<3>usb:%s * MTU SIZE is larger than NTB SIZE (%d) f"
	.ascii	"rom host * \012\000"
.LC53:
	.ascii	"<3>************************************************"
	.ascii	"*\012\000"
	.space	2
.LC54:
	.ascii	"<3>usb:%s * Set MTU SIZE %d *\012\000"
	.space	1
.LC55:
	.ascii	"<3>acc_complete_set_string, err %d\012\000"
.LC56:
	.ascii	"<3>unknown accessory string index %d\012\000"
	.space	2
.LC57:
	.ascii	"<6>acc_release\012\000"
.LC58:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_acc"
	.ascii	"essory.c\000"
.LC59:
	.ascii	"<6>acc_open\012\000"
	.space	3
.LC60:
	.ascii	"<7>usb: %s buf=%s[%d], %s\012\000"
	.space	1
.LC61:
	.ascii	"<6>%s: Close rndis QC file\000"
	.space	1
.LC62:
	.ascii	"<3>%s: rndis_qc_dev not present\012\000"
	.space	3
.LC63:
	.ascii	"<6>%s: Open rndis QC driver\012\000"
	.space	3
.LC64:
	.ascii	"<3>%s: rndis_qc_dev not created yet\012\000"
	.space	3
.LC65:
	.ascii	"<6>%s: rndis QC file opened\012\000"
	.space	3
.LC66:
	.ascii	"<3>%s: Already opened\012\000"
	.space	1
.LC67:
	.ascii	"<6>mtp_release\012\000"
.LC68:
	.ascii	"<6>mtp_open\012\000"
	.space	3
.LC69:
	.ascii	"<3>CCID notify ep error %d\012\000"
.LC70:
	.ascii	"<6>%s: Close mbim file\000"
	.space	1
.LC71:
	.ascii	"<6>%s: Open mbim driver\012\000"
	.space	3
.LC72:
	.ascii	"<3>%s: mbim_dev not created yet\012\000"
	.space	3
.LC73:
	.ascii	"<6>%s: Lock mbim_dev->open_excl for open\012\000"
	.space	2
.LC74:
	.ascii	"<3>%s: USB cable not connected\012\000"
.LC75:
	.ascii	"<6>%s: Exit, mbim file opened\012\000"
	.space	1
.LC76:
	.ascii	"<3>%s: port:%pK port#%d unable to open sdio ch:%s\012"
	.ascii	"\000"
	.space	1
.LC77:
	.ascii	"%d\012\000"
.LC78:
	.ascii	"CONFIGURED\000"
	.space	1
.LC79:
	.ascii	"DISCONNECTED\000"
	.space	3
.LC80:
	.ascii	"CONNECTED\000"
	.space	2
.LC81:
	.ascii	"<7>usb: %s buf=%s\012\000"
	.space	1
.LC82:
	.ascii	"%s\012\000"
.LC83:
	.ascii	"<7>usb: %s dev->enabled=%d\012\000"
.LC84:
	.ascii	"%s\000"
	.space	1
.LC85:
	.ascii	"%04x\012\000"
	.space	2
.LC86:
	.ascii	"%d %d\012\000"
	.space	1
.LC87:
	.ascii	"%02x:%02x:%02x:%02x:%02x:%02x\012\000"
	.space	1
.LC88:
	.ascii	"common->fsg is NULL in %s at %u\012\000"
	.space	3
.LC89:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mas"
	.ascii	"s_storage.c\000"
	.space	1
.LC90:
	.ascii	"error in submission: %s --> %d\012\000"
.LC91:
	.ascii	"failed to override string ID\012\000"
	.space	2
.LC92:
	.ascii	"rmnet %s response error %d, %d/%d\012\000"
	.space	1
.LC93:
	.ascii	"rmnet_mux %s response error %d, %d/%d\012\000"
	.space	1
.LC94:
	.ascii	"%01x\012\000"
	.space	2
.LC95:
	.ascii	"%u\012\000"
.LC96:
	.ascii	", H%c=%u\000"
	.space	3
.LC97:
	.ascii	"%s is buggy! Expected length %d but we got %d\012\000"
	.space	1
.LC98:
	.ascii	"using LUN %d from CBW, not LUN %d from CDB\012\000"
.LC99:
	.ascii	"unsupported LUN %d\012\000"
.LC100:
	.ascii	"%s\015\012\000"
	.space	3
.LC101:
	.ascii	"<7>usb: %s version %s\012\000"
	.space	1
.LC102:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/compo"
	.ascii	"site.c\000"
	.space	2
.LC103:
	.ascii	"<7>usb: %s idVendor=0x%x, idProduct=0x%x\012\000"
	.space	2
.LC104:
	.ascii	"<7>usb: %s bcdDevice=0x%x\012\000"
	.space	1
.LC105:
	.ascii	"%s %s with %s\000"
	.space	2
.LC106:
	.ascii	"<7>usb: %s composite_manufacturer=%s\012\000"
	.space	2
.LC107:
	.ascii	"userspace failed to provide iSerialNumber\012\000"
	.space	1
.LC108:
	.ascii	"%s ready\012\000"
	.space	2
.LC109:
	.ascii	"/home/Jprimero15/hlte/lolz/include/linux/netdevice."
	.ascii	"h\000"
	.space	3
.LC110:
	.ascii	"<6>netif_stop_queue() cannot be called before regis"
	.ascii	"ter_netdev()\012\000"
	.space	3
.LC111:
	.ascii	"qdss_ctrl_read_complete\012\000"
	.space	3
.LC112:
	.ascii	"qdss_ctrl_write_complete\012\000"
	.space	2
.LC113:
	.ascii	"audio_disable\012\000"
	.space	1
.LC114:
	.ascii	"<3>%s: port is null\012\000"
	.space	3
.LC115:
	.ascii	"%s: USB disconnected\012\000"
	.space	2
.LC116:
	.ascii	"<3>%s: usb ep out queue failedport:%pK, port#%d\012"
	.ascii	"\000"
	.space	3
.LC117:
	.ascii	"<3>%s: port->port_usb is NULL\000"
	.space	2
.LC118:
	.ascii	"%s: dequeue\012\000"
	.space	3
.LC119:
	.ascii	"<3>%s: error dequeuing transfer, %d\012\000"
	.space	3
.LC120:
	.ascii	"%s: woken up by peer\012\000"
	.space	2
.LC121:
	.ascii	"%s status: %d\012\000"
	.space	1
.LC122:
	.ascii	"Close rmnet control file\000"
	.space	3
.LC123:
	.ascii	"<3>%s: Invalid portno#%d\012\000"
	.space	2
.LC124:
	.ascii	"%s: ctrl_pkt:%d bytes\012\000"
	.space	1
.LC125:
	.ascii	"%s - input control lines: dcd%c dsr%c break%c ring%"
	.ascii	"c framing%c parity%c overrun%c\012\000"
	.space	1
.LC126:
	.ascii	"<3>%s: write error:%d\012\000"
	.space	1
.LC127:
	.ascii	"<3>%s: Bad control-OUT transfer\012\000"
	.space	3
.LC128:
	.ascii	"<3>%s: Illegal INPUT SIZE (%d) from host\012\000"
	.space	2
.LC129:
	.ascii	"<3>%s: Illegal NTB length %d\012\000"
	.space	2
.LC130:
	.ascii	"%s: Set NTB INPUT SIZE %d\012\000"
	.space	1
.LC131:
	.ascii	"<3>%s: %s: Failed\012\000"
	.space	1
.LC132:
	.ascii	"%s: %s: dequeue\012\000"
	.space	3
.LC133:
	.ascii	"<3>%s: %s: error dequeuing transfer, %d\012\000"
	.space	3
.LC134:
	.ascii	"%s: %s: status: %d\012\000"
.LC135:
	.ascii	"%s: USB_DIR_OUT | USB_TYPE_CLASS | USB_RECIP_INTERF"
	.ascii	"ACE\000"
	.space	1
.LC136:
	.ascii	"%s: bRequest 0x%x, w_value 0x%04x, len %d, entity %"
	.ascii	"d\012\000"
	.space	2
.LC137:
	.ascii	"%s: USB_DIR_IN | USB_TYPE_CLASS | USB_RECIP_INTERFA"
	.ascii	"CE\000"
	.space	2
.LC138:
	.ascii	"%s: USB_DIR_OUT | USB_TYPE_CLASS | USB_RECIP_ENDPOI"
	.ascii	"NT\000"
	.space	2
.LC139:
	.ascii	"%s: bRequest 0x%x, w_value 0x%04x, len %d, endp %d,"
	.ascii	" epnum %d\012\000"
	.space	2
.LC140:
	.ascii	"<3>%s: Unknown command\000"
	.space	1
.LC141:
	.ascii	"%s: USB_DIR_IN | USB_TYPE_CLASS | USB_RECIP_ENDPOIN"
	.ascii	"T\000"
	.space	3
.LC142:
	.ascii	"%s: bRequest 0x%x, w_value 0x%04x, len %d, ep %d\012"
	.ascii	"\000"
	.space	2
.LC143:
	.ascii	"<3>%s: Unknown control request %02x.%02x v%04x i%04"
	.ascii	"x l%d\012\000"
	.space	2
.LC144:
	.ascii	"%s: audio req %02x.%02x v%04x i%04x l%d\012\000"
	.space	3
.LC145:
	.ascii	"<3>%s: audio response failed on err %d\012\000"
.LC146:
	.ascii	"<3>%s: STALL\012\000"
	.space	2
.LC147:
	.ascii	"%s: setting streaming_enabled to false.\012\000"
	.space	3
.LC148:
	.ascii	"<3>%s: %s is enabled in other device\012\000"
	.space	2
.LC149:
	.ascii	"<3>%s: Failed to alloc f_holder\012\000"
	.space	3
.LC150:
	.ascii	"%s: func:%s is enabled.\012\000"
	.space	3
.LC151:
	.ascii	"%s: set streaming_enabled to true\012\000"
	.space	1
.LC152:
	.ascii	"ccid_bulk_release\012\000"
	.space	1
.LC153:
	.ascii	"%s:dev:%pK port#%d\012\000"
.LC154:
	.ascii	"%s: usb cable is not connected\012\000"
.LC155:
	.ascii	"<3>ctrl resp queue empty  req%02x.%02x v%04x i%04x "
	.ascii	"l%d\012\000"
.LC156:
	.ascii	"rmnet ep0 enqueue err %d\012\000"
	.space	2
.LC157:
	.ascii	"%s: dev:%pK port#%d\012\000"
	.space	3
.LC158:
	.ascii	"<3>rmnet notify ep error %d\012\000"
	.space	3
.LC159:
	.ascii	"%s: Invalid notify_count=%lu to decrement\012\000"
	.space	1
.LC160:
	.ascii	"<3>%s: Invalid notify_count=%lu to decrement\012\000"
	.space	2
.LC161:
	.ascii	"ep enqueue error %d\012\000"
	.space	3
.LC162:
	.ascii	"%s: %02x.%02x v%04x i%04x l%u\000"
	.space	2
.LC163:
	.ascii	"<3>%s: response queue error: %d\000"
.LC164:
	.ascii	"%s: portno:%d\012\000"
	.space	1
.LC165:
	.ascii	"queue\000"
	.space	2
.LC166:
	.ascii	"%s: %s %s err %d\012\000"
	.space	2
.LC167:
	.ascii	"Probe called for device: %s\012\000"
	.space	3
.LC168:
	.ascii	"<3>acc_complete_set_hid_report_desc, err %d\012\000"
	.space	3
.LC169:
	.ascii	"qmi resp empty  req%02x.%02x v%04x i%04x l%d\012\000"
	.space	2
.LC170:
	.ascii	"%s: ep:%pK port:%pK\012\000"
	.space	3
.LC171:
	.ascii	"<4>%s: port:%pK port#%d unexpected %s status %d\012"
	.ascii	"\000"
	.space	3
.LC172:
	.ascii	"%s: %s shutdown\012\000"
	.space	3
.LC173:
	.ascii	"<3>%s: invalid portno#%d\012\000"
	.space	2
.LC174:
	.ascii	"<3>%s: gser is null\012\000"
	.space	3
.LC175:
	.ascii	"%s: port:%pK port#%d ctrl_bits:%08x\012\000"
	.space	3
.LC176:
	.ascii	"<3>%s: port:%pK port#%d sdio not connected\012\000"
.LC177:
	.ascii	"%s: name:%s\012\000"
	.space	3
.LC178:
	.ascii	"%s: name:%s num_data_ports= %d\012\000"
.LC179:
	.ascii	"<3>%s: invalid port: %d\012\000"
	.space	3
.LC180:
	.ascii	"smd_control_ch_opened: %lu\012smd_data_ch_opened: %"
	.ascii	"lu\012usb online : %d\012dpkts_from_modem: %lu\012d"
	.ascii	"pkts_to_host: %lu\012pending_dpkts_to_host: %lu\012"
	.ascii	"dpkts_from_host: %lu\012dpkts_to_modem: %lu\012pend"
	.ascii	"ing_dpkts_to_modem: %lu\012cpkts_from_modem: %lu\012"
	.ascii	"cpkts_to_host: %lu\012pending_cpkts_to_host: %lu\012"
	.ascii	"cpkts_from_host: %lu\012cpkts_to_modem: %lu\012pend"
	.ascii	"ing_cpkts_to_modem: %lu\012smd_read_avail_ctrl: %d\012"
	.ascii	"smd_write_avail_ctrl: %d\012smd_read_avail_data: %d"
	.ascii	"\012smd_write_avail_data: %d\012\000"
.LC181:
	.ascii	"-*-DATA-*-\012dpkts_tohost:%lu epInPool:%u tx_size:"
	.ascii	"%u drp_cnt:%lu\012dpkts_tomodem:%lu epOutPool:%u rx"
	.ascii	"_size:%u pending:%u\012-*-QMI-*-\012cpkts_tomodem:%"
	.ascii	"lu  qmi_req_q:%u cbits:%d\012cpkts_tolaptop:%lu qmi"
	.ascii	"_resp_q:%u notify_cnt:%d\012-*-MISC-*-\012data_ch_s"
	.ascii	"tatus: %lu ctrl_ch_status: %lu\012\000"
	.space	2
.LC182:
	.ascii	"UNDEFINED\000"
	.space	2
.LC183:
	.ascii	"dpkts_tomsm:  %lu\012dpkts_tomdm: %lu\012cpkts_tomd"
	.ascii	"m: %lu\012dpkts_tolaptop: %lu\012cpkts_tolaptop:  %"
	.ascii	"lu\012cbits_to_modem: %lu\012tx skb size:     %u\012"
	.ascii	"rx_skb_size:     %u\012dpkts_pending_at_dmux: %u\012"
	.ascii	"tx drp cnt: %lu\012cpkts_drp_cnt: %lu\012cpkt_tx_ql"
	.ascii	"en: %lu\012cpkt_rx_qlen_to_modem: %lu\012xport: %s\012"
	.ascii	"ctr_ch_opened:\011%d\012\000"
.LC184:
	.ascii	"<3>usb: tty or gser is NULL !!\012\000"
.LC185:
	.ascii	"nbytes_from_host: %lu\012\000"
	.space	1
.LC186:
	.ascii	"nbytes_to_tty: %lu\012\000"
.LC187:
	.ascii	"nbytes_with_usb_OUT_txr: %lu\012\000"
	.space	2
.LC188:
	.ascii	"nbytes_from_tty: %lu\012\000"
	.space	2
.LC189:
	.ascii	"nbytes_to_host: %lu\012\000"
	.space	3
.LC190:
	.ascii	"nbytes_with_usb_IN_txr: %lu\012\000"
	.space	3
.LC191:
	.ascii	"tty_flags: %lu\012\000"
.LC192:
	.ascii	"DTR_status: %d\012\000"
.LC193:
	.ascii	"###PORT:%d port:%pK###\012nbytes_tolaptop: %lu\012n"
	.ascii	"bytes_tomodem:  %lu\012cbits_to_modem:  %u\012cbits"
	.ascii	"_to_laptop: %u\012read_pool_len:   %lu\012read_queu"
	.ascii	"e_len:  %lu\012write_pool_len:  %lu\012n_read:     "
	.ascii	"     %u\012sdio_open:       %d\012sdio_probe:      "
	.ascii	"%d\012\000"
	.space	3
.LC194:
	.ascii	"###PORT:%d###\012nbytes_tolaptop: %lu\012nbytes_tom"
	.ascii	"odem:  %lu\012cbits_to_modem:  %u\012cbits_to_lapto"
	.ascii	"p: %u\012n_read: %u\012smd_read_avail: %d\012smd_wr"
	.ascii	"ite_avail: %d\012CH_OPENED: %d\012CH_READY: %d\012\000"
	.space	2
.LC195:
	.ascii	"#PORT:%d port:%pK data_ch:%pK#\012dpkts_to_usbhost:"
	.ascii	" %lu\012dpkts_to_modem:  %lu\012dpkts_pwith_bam: %u"
	.ascii	"\012to_usbhost_dcnt:  %u\012tomodem__dcnt:  %u\012r"
	.ascii	"x_flow_control_disable_count: %u\012rx_flow_control"
	.ascii	"_enable_count: %u\012rx_flow_control_triggered: %u\012"
	.ascii	"max_num_pkts_pending_with_bam: %u\012tx_buf_len:\011"
	.ascii	" %u\012rx_buf_len:\011 %u\012data_ch_open:   %d\012"
	.ascii	"data_ch_ready:  %d\012\000"
.LC196:
	.ascii	"HIGH\000"
	.space	3
.LC197:
	.ascii	"LOW\000"
.LC198:
	.ascii	"#PORT:%d port:%pK ctrl_ch:%pK#\012to_usbhost: %lu\012"
	.ascii	"to_modem:   %lu\012DTR:        %s\012ch_open:    %d"
	.ascii	"\012ch_ready:   %d\012read_avail: %d\012write_avail"
	.ascii	":%d\012\000"
	.space	1
.LC199:
	.ascii	"\012Name:        %s\012#PORT:%d port: %pK\012to_usb"
	.ascii	"host:    %lu\012to_modem:      %lu\012cpkt_drp_cnt:"
	.ascii	"  %lu\012DTR:           %s\012ch_open:       %d\012"
	.ascii	"ch_ready:      %d\012\000"
.LC200:
	.ascii	"\012Name:           %s\012#PORT:%d port#:   %pK\012"
	.ascii	"data_ch_open:\011   %d\012data_ch_ready:    %d\012\012"
	.ascii	"******UL INFO*****\012\012dpkts_to_modem:   %lu\012"
	.ascii	"tomodem_drp_cnt:  %u\012rx_buf_len:       %u\012tx "
	.ascii	"thld cnt       %u\012tx unthld cnt     %u\012TX_THR"
	.ascii	"OTTLED      %d\012\000"
.LC201:
	.ascii	"\012******DL INFO******\012\012dpkts_to_usbhost: %l"
	.ascii	"u\012tx_buf_len:\011   %u\012rx thld cnt\011   %u\012"
	.ascii	"rx unthld cnt\011   %u\012uthld pnd skbs    %u\012R"
	.ascii	"X_THROTTLED\011   %d\012\000"
	.space	3
.LC202:
	.ascii	"#PORT:%d port: %pK\012to_usbhost:    %lu\012to_mode"
	.ascii	"m:      %lu\012cpkt_drp_cnt:  %lu\012DTR:          "
	.ascii	" %s\012\000"
	.space	1
.LC203:
	.ascii	"\012Name:           %s\012#PORT:%d port#:   %pK\012"
	.ascii	"data_ch_open:\011   %d\012data_ch_ready:    %d\012d"
	.ascii	"ata_ch_connected: %d\012\012******UL INFO*****\012\012"
	.ascii	"dpkts_to_modem:   %lu\012tomodem_drp_cnt:  %u\012rx"
	.ascii	"_buf_len:       %u\012TX_THROTTLED      %d\012\000"
.LC204:
	.ascii	"\012******DL INFO******\012\012dpkts_to_usbhost: %l"
	.ascii	"u\012tx_buf_len:\011   %u\012RX_THROTTLED\011   %d\012"
	.ascii	"\000"
	.space	2
.LC205:
	.ascii	"---Name: %s---\012endpoints: %s, %s\012dpkts_tolapt"
	.ascii	"op: %lu\012dpkts_tomodem:  %lu\012pkts_tolaptop_pen"
	.ascii	"ding: %u\012\000"
.LC206:
	.ascii	"qdss_cleanup\012\000"
	.space	2
.LC207:
	.ascii	"<3>%s: grmnet is null\012\000"
	.space	1
.LC208:
	.ascii	"%s: ctrl_tomodem:%d ctrl_bits:%d setbits:%d clearbi"
	.ascii	"ts:%d\012\000"
	.space	2
.LC209:
	.ascii	"rmnet command error %d\012\000"
.LC210:
	.ascii	"rmnet control smd write failed\012\000"
.LC211:
	.ascii	"rmnet QMI pool is empty\012\000"
	.space	3
.LC212:
	.ascii	"RMNET %s response error %d, %d/%d\012\000"
	.space	1
.LC213:
	.ascii	"rmnet data smd write failed\012\000"
	.space	3
.LC214:
	.ascii	"rmnet data rx enqueue err %d\012\000"
	.space	2
.LC215:
	.ascii	"rmnet control smd channel full\012\000"
.LC216:
	.ascii	"<3>%s: smd_write failed err:%d\012\000"
.LC217:
	.ascii	"RMNET_MUX %s response error %d, %d/%d\012\000"
	.space	1
.LC218:
	.ascii	"rmnet_mux data smd write failed\012\000"
	.space	3
.LC219:
	.ascii	"rmnet data tx ep error %d\012\000"
	.space	1
.LC220:
	.ascii	"rmnet_mux data tx ep error %d\012\000"
	.space	1
.LC221:
	.ascii	"rmnet data Tx buffers full\012\000"
.LC222:
	.ascii	"rmnet tx data enqueue err %d\012\000"
	.space	2
.LC223:
	.ascii	"rmnet QMI Tx buffers full\012\000"
	.space	1
.LC224:
	.ascii	"%s: port:%pK port#%d pool:%pK\012\000"
	.space	1
.LC225:
	.ascii	"%s: usb is disconnected\012\000"
	.space	3
.LC226:
	.ascii	"<3>%s: usb ep out queue failedport:%pK, port#%d err"
	.ascii	":%d\012\000"
.LC227:
	.ascii	"rmnet_mux data Tx buffers full\012\000"
.LC228:
	.ascii	"%s: port:%pK port#%d\012\000"
	.space	2
.LC229:
	.ascii	"<3>%s:smd read_avail failure:%d or channel closed c"
	.ascii	"h=%pK\000"
	.space	3
.LC230:
	.ascii	"<3>%s: SMD sending incorrect pkt\012\000"
	.space	2
.LC231:
	.ascii	"<3>%s: smd read failure %d\012\000"
.LC232:
	.ascii	"<3>conn_gadget_function_disable cdev %pK\012\000"
	.space	2
.LC233:
	.ascii	"%s: %s: error %d\012\000"
	.space	2
.LC234:
	.ascii	"%s: %s disabled\012\000"
	.space	3
.LC235:
	.ascii	"acc_function_disable\012\000"
	.space	2
.LC236:
	.ascii	"acc_complete_out set disconnected\000"
	.space	2
.LC237:
	.ascii	"vendor request: %d index: %d value: %d length: %d\012"
	.ascii	"\000"
	.space	1
.LC238:
	.ascii	"class request: %d index: %d value: %d length: %d\012"
	.ascii	"\000"
	.space	2
.LC239:
	.ascii	"MTP_REQ_CANCEL\012\000"
.LC240:
	.ascii	"MTP_REQ_GET_DEVICE_STATUS\012\000"
	.space	1
.LC241:
	.ascii	"%s: response queue error\012\000"
	.space	2
.LC242:
	.ascii	"mtp_function_disable\012\000"
	.space	2
.LC243:
	.ascii	"ccid req%02x.%02x v%04x i%04x l%d\012\000"
	.space	1
.LC244:
	.ascii	"<3>ccid ep0 enqueue err %d\012\000"
.LC245:
	.ascii	"adb_function_disable cdev %pK\012\000"
	.space	1
.LC246:
	.ascii	"acm ttyGS%d req%02x.%02x v%04x i%04x l%d\012\000"
	.space	2
.LC247:
	.ascii	"acm response on ttyGS%d, err %d\012\000"
	.space	3
.LC248:
	.ascii	"%s: EVENT_(%s)\012\000"
.LC249:
	.ascii	"usb_rmnet_ctrl_smd\000"
	.space	1
.LC250:
	.ascii	"status\000"
	.space	1
.LC251:
	.ascii	"ghsic_ctrl_xport\000"
	.space	3
.LC252:
	.ascii	"ghsic_data_xport\000"
	.space	3
.LC253:
	.ascii	"timestamp\000"
	.space	2
.LC254:
	.ascii	"ghsuart_ctrl_xport\000"
	.space	1
.LC255:
	.ascii	"mode debugfs file is not available\012\000"
.LC256:
	.ascii	"ghsuart_data_xport\000"
	.space	1
.LC257:
	.ascii	"mode debugfs file is not available\000"
	.space	1
.LC258:
	.ascii	"usb_diag\000"
	.space	3
.LC259:
	.ascii	"<6>%s: sdio data ch not open\012\000"
	.space	2
.LC260:
	.ascii	"rmnet SDIO data write failed\012\000"
	.space	2
.LC261:
	.ascii	"<3>%s: usb epIn failed with %d\012\000"
.LC262:
	.ascii	"<3>%s: data tx ep error %d\012\000"
.LC263:
	.ascii	"%s: p:%pK#%d skb_len:%d\012\000"
	.space	3
.LC264:
	.ascii	"%s: req->length:%d header_len:%u\012skb->len:%d skb"
	.ascii	"->data_len:%d\012\000"
	.space	1
.LC265:
	.ascii	"rmnet_mux SDIO data write failed\012\000"
	.space	2
.LC266:
	.ascii	"rmnet_mux data rx enqueue err %d\012\000"
	.space	2
.LC267:
	.ascii	"%s:\012\000"
	.space	3
.LC268:
	.ascii	"%s: SMD port not ready - rescheduling:%s err:%d\012"
	.ascii	"\000"
	.space	3
.LC269:
	.ascii	"<3>%s: unable to open smd port:%s err:%d\012\000"
	.space	2
.LC270:
	.ascii	"Unable to open SDIO DATA channel\012\000"
	.space	2
.LC271:
	.ascii	"<3>%s: rx queue failed %d\012\000"
	.space	1
.LC272:
	.ascii	"<3>%s: %s response error %d, %d/%d\012\000"
.LC273:
	.ascii	"<3>%s: data rx enqueue err %d\012\000"
	.space	1
.LC274:
	.ascii	"%s: Received command %d\000"
.LC275:
	.ascii	"<3>copying to user space failed\000"
.LC276:
	.ascii	"%s: Sent line_state: %d\000"
.LC277:
	.ascii	"<3>wrong parameter\000"
	.space	1
.LC278:
	.ascii	"<6>%s: Received command %d\012\000"
.LC279:
	.ascii	"<3>%s: copying to user space failed\000"
.LC280:
	.ascii	"<6>%s: Sent max packets per xfer %d\000"
.LC281:
	.ascii	"%s: Sent max packet size %d\000"
.LC282:
	.ascii	"<3>%s: Unsupported IOCTL\000"
	.space	3
.LC283:
	.ascii	"<6>%s: Sent NTB size %d\000"
.LC284:
	.ascii	"<6>%s: Sent NTB datagrams count %d\000"
	.space	1
.LC285:
	.ascii	"<3>%s: wrong parameter\000"
	.space	1
.LC286:
	.ascii	"%s: USB cable not connected\012\000"
	.space	3
.LC287:
	.ascii	"<3>%s: cpkt size:%d > buf size:%d\012\000"
	.space	1
.LC288:
	.ascii	"%s: Enter(%d)\012\000"
	.space	1
.LC289:
	.ascii	"<3>Buffer size is too big %d, should be at most %d\012"
	.ascii	"\000"
.LC290:
	.ascii	"<3>Previous reading is not finished yet\012\000"
	.space	3
.LC291:
	.ascii	"%s: Requests list is empty. Wait.\012\000"
	.space	1
.LC292:
	.ascii	"Waiting failed\012\000"
.LC293:
	.ascii	"<3>cpkt size too big:%d > buf size:%d\012\000"
	.space	1
.LC294:
	.ascii	"%s: cpkt size:%d\012\000"
	.space	2
.LC295:
	.ascii	"<3>copy_to_user failed: err %d\012\000"
.LC296:
	.ascii	"%s: copied %d bytes to user\012\000"
	.space	3
.LC297:
	.ascii	"acc_read(%d)\012\000"
	.space	2
.LC298:
	.ascii	"acc_read disconnected\000"
	.space	2
.LC299:
	.ascii	"acc_read: waiting for online\012\000"
	.space	2
.LC300:
	.ascii	"rx %pK queue\012\000"
	.space	2
.LC301:
	.ascii	"acc_read: cancelling failed %d\000"
	.space	1
.LC302:
	.ascii	"rx %pK %d\012\000"
	.space	1
.LC303:
	.ascii	"acc_read returning %d\012\000"
	.space	1
.LC304:
	.ascii	"mtp_read(%d)\012\000"
	.space	2
.LC305:
	.ascii	"mtp_read: waiting for online state\012\000"
.LC306:
	.ascii	"mtp_read returning %d\012\000"
	.space	1
.LC307:
	.ascii	"adb_read(%d)\012\000"
	.space	2
.LC308:
	.ascii	"adb_read: waiting for online state\012\000"
.LC309:
	.ascii	"adb_read: failed to queue req %pK (%d)\012\000"
.LC310:
	.ascii	"adb_read returning %d\012\000"
	.space	1
.LC311:
	.ascii	"<3>ccid notify ep enqueue error %d\012\000"
.LC312:
	.ascii	"<3>%s: zero length ctrl pkt\012\000"
	.space	3
.LC313:
	.ascii	"<3>%s: max_pkt_size:%d given_pkt_size:%d\012\000"
	.space	2
.LC314:
	.ascii	"<3>%s: cannot allocate rmnet_mux ctrl pkt\012\000"
	.space	1
.LC315:
	.ascii	"<3>%s: copy_from_user failed err:%d\012\000"
	.space	3
.LC316:
	.ascii	"rmnet_mux notify ep enqueue error %d\012\000"
	.space	2
.LC317:
	.ascii	"%s: Enter(%d)\000"
	.space	2
.LC318:
	.ascii	"zero length ctrl pkt\012\000"
	.space	2
.LC319:
	.ascii	"given pkt size too big:%d > max_pkt_size:%d\012\000"
	.space	3
.LC320:
	.ascii	"<3>Previous writing not finished yet\012\000"
	.space	2
.LC321:
	.ascii	"USB cable not connected\012\000"
	.space	3
.LC322:
	.ascii	"<3>failed to allocate ctrl pkt\012\000"
.LC323:
	.ascii	"<3>copy_from_user failed err:%d\012\000"
	.space	3
.LC324:
	.ascii	"<3>failed to send ctrl packet. error=%d\012\000"
	.space	3
.LC325:
	.ascii	"<3>send_cpkt_response callback is NULL\012\000"
.LC326:
	.ascii	"%s: Exit(%d)\000"
	.space	3
.LC327:
	.ascii	"g_ether\000"
.LC328:
	.ascii	"29-May-2008\000"
.LC329:
	.ascii	"g_qc_ether\000"
	.space	1
.LC330:
	.ascii	"%s: %s: unable to update PID and serial_no\012\000"
.LC331:
	.ascii	"%s: %s: dload:%pK pid:%x serial_num:%s\012\000"
.LC332:
	.ascii	"<3>usb_ep_queue failed ret: %d\012\000"
.LC333:
	.ascii	"%s,\000"
.LC334:
	.ascii	"%s: port:%pK port#%d\000"
	.space	3
.LC335:
	.ascii	"%s: req status shutdown portno#%d port:%pK\012\000"
.LC336:
	.ascii	"<4>%s: port:%pK port#%d Unexpected Rx Status:%d\012"
	.ascii	"\000"
	.space	3
.LC337:
	.ascii	"<3>%s: smd write failed err:%d\012\000"
.LC338:
	.ascii	"<4>ttyGS%d: unexpected RX status %d\012\000"
	.space	3
.LC339:
	.ascii	"<4>ttyGS%d: RX not scheduled?\012\000"
	.space	1
.LC340:
	.ascii	"%s: sdio_ch_name:%s dev_name:%s\012\000"
	.space	3
.LC341:
	.ascii	"<6>%s: name:%s is not found\012\000"
	.space	3
.LC342:
	.ascii	"bam_dmux_ch_8\000"
	.space	2
.LC343:
	.ascii	"%s: port:%pK d:%pK tom:%lu pbam:%u pno:%d\012\000"
	.space	1
.LC344:
	.ascii	"%s: write error:%d\012\000"
.LC345:
	.ascii	"%s: resume work started\012\000"
	.space	3
.LC346:
	.ascii	"%s: %s: resume work started\012\000"
	.space	3
.LC347:
	.ascii	"%s: suspend work started\012\000"
	.space	2
.LC348:
	.ascii	"%s: %s: suspend work started\012\000"
	.space	2
.LC349:
	.ascii	"<3>%s: usb_bam_connect (src) failed: err:%d\012\000"
	.space	3
.LC350:
	.ascii	"<3>%s: usb_bam_connect (dst) failed: err:%d\012\000"
	.space	3
.LC351:
	.ascii	"<3>%s:teth_bridge_init() failed\012\000"
	.space	3
.LC352:
	.ascii	"%s: usb cable is disconnected, exiting\012\000"
.LC353:
	.ascii	"<3>%s: out of memory\012\000"
	.space	2
.LC354:
	.ascii	"%s: enqueue\012\000"
	.space	3
.LC355:
	.ascii	"<3>%s: error enqueuing transfer, %d\012\000"
	.space	3
.LC356:
	.ascii	"<3>%s: usb_bam_client_ready failed: err:%d\012\000"
.LC357:
	.ascii	"%s: done\012\000"
	.space	2
.LC358:
	.ascii	"%s: %s: Connect workqueue started\000"
	.space	2
.LC359:
	.ascii	"<3>%s: %s:teth_bridge_init() failed\012\000"
	.space	3
.LC360:
	.ascii	"<3>%s: %s: usb_bam_connect_ipa failed: err:%d\012\000"
	.space	1
.LC361:
	.ascii	"<3>%s: %s:teth_bridge_connect() failed\012\000"
.LC362:
	.ascii	"<3>%s: port_usb is NULL\000"
.LC363:
	.ascii	"<3>%s: port_usb->out (bulk out ep) is NULL\000"
	.space	1
.LC364:
	.ascii	"%s: %s: enqueue\012\000"
	.space	3
.LC365:
	.ascii	"<3>%s: %s: usb_bam_client_ready failed: err:%d\012\000"
.LC366:
	.ascii	"%s: %s: Connect workqueue done\000"
	.space	1
.LC367:
	.ascii	"%s: %s: reset by peer\012\000"
	.space	1
.LC368:
	.ascii	"<3>%s: %s: BAM reset failed %d\012\000"
.LC369:
	.ascii	"<3>Failed to allocate rmnet control device\012\000"
.LC370:
	.ascii	"&port->read_wq\000"
	.space	1
.LC371:
	.ascii	"<3>rmnet control driver failed to register\000"
	.space	1
.LC372:
	.ascii	"&dev->read_wq\000"
	.space	2
.LC373:
	.ascii	"&dev->write_wq\000"
	.space	1
.LC374:
	.ascii	"<3>USB accessory gadget driver failed to initialize"
	.ascii	"\012\000"
	.space	3
.LC375:
	.ascii	"<6>%s: initialize rndis QC instance\012\000"
	.space	3
.LC376:
	.ascii	"<3>%s: rndis QC driver failed to register\000"
	.space	2
.LC377:
	.ascii	"&dev->intr_wq\000"
	.space	2
.LC378:
	.ascii	"f_mtp\000"
	.space	2
.LC379:
	.ascii	"<3>mtp gadget driver failed to initialize\012\000"
	.space	1
.LC380:
	.ascii	"<3>adb gadget driver failed to initialize\012\000"
	.space	1
.LC381:
	.ascii	"k_rmnet_mux_work\000"
	.space	3
.LC382:
	.ascii	"&smd_dev->smd_data.wait\000"
.LC383:
	.ascii	"&ctrl_dev->tx_wait_q\000"
	.space	3
.LC384:
	.ascii	"usb_rmnet_mux\000"
	.space	2
.LC385:
	.ascii	"<3>%s: failed to register misc device\012\000"
	.space	1
.LC386:
	.ascii	"%s: rmnet_mux_ctrl_device_init failed, err:%d\012\000"
	.space	1
.LC387:
	.ascii	"<6>%s: rndis QC cleanup\000"
.LC388:
	.ascii	"<6>%s: Enter\000"
	.space	3
.LC389:
	.ascii	"gmidi_transmit: midi_alloc_ep_request failed\012\000"
	.space	2
.LC390:
	.ascii	"snd_card_create() failed\012\000"
	.space	2
.LC391:
	.ascii	"snd_device_new() failed: error %d\012\000"
	.space	1
.LC394:
	.ascii	"MIDI\000"
	.space	3
.LC395:
	.ascii	"snd_rawmidi_new() failed: error %d\012\000"
.LC396:
	.ascii	"snd_card_register() failed\012\000"
.LC392:
	.ascii	"MIDI Gadget\000"
.LC393:
	.ascii	"f_midi\000"
	.space	1
.LC397:
	.ascii	"<3>usb:%s tx queue err %d\012\000"
	.space	1
.LC398:
	.ascii	"<3>invalid rndis pkt: skblen:%u hdr_len:%u\000"
	.space	1
.LC399:
	.ascii	"<3>invalid rndis message: %d/%d/%d/%d, len:%d\012\000"
	.space	1
.LC400:
	.ascii	"<3>%s:skb clone failed\012\000"
.LC401:
	.ascii	"y\000"
	.space	2
.LC402:
	.ascii	"n\000"
	.space	2
.LC403:
	.ascii	"?\000"
	.space	2
.LC404:
	.ascii	"disconnected\000"
	.space	3
.LC405:
	.ascii	"connected\000"
	.space	2
.LC406:
	.ascii	"Config Nr. %d\012used      : %s\012state     : %s\012"
	.ascii	"medium    : 0x%08X\012speed     : %d\012cable     :"
	.ascii	" %s\012vendor ID : 0x%08X\012vendor    : %s\012ul-m"
	.ascii	"ax-xfer-size:%d max-xfer-size-rcvd: %d\012ul-max-pk"
	.ascii	"ts-per-xfer:%d max-pkts-per-xfer-rcvd:%d\012\000"
	.space	3
.LC407:
	.ascii	"unable to open backing file: %s\012\000"
	.space	3
.LC408:
	.ascii	"invalid file type: %s\012\000"
	.space	1
.LC409:
	.ascii	"file not readable: %s\012\000"
	.space	1
.LC410:
	.ascii	"unable to find file size: %s\012\000"
	.space	2
.LC411:
	.ascii	"file too big: %s\012\000"
	.space	2
.LC412:
	.ascii	"using only first %d blocks\012\000"
.LC413:
	.ascii	"file too small: %s\012\000"
.LC414:
	.ascii	"open backing file: %s\012\000"
	.space	1
.LC415:
	.ascii	"<3>%s(#) call conn_gadget_cleanup\012\000"
	.space	1
.LC416:
	.ascii	"<6>conn_gadget_cleanup\012\000"
.LC417:
	.ascii	"<3>%s() _conn_gadget_dev is not allocated\012\000"
	.space	1
.LC418:
	.ascii	"<3>%s(#) call conn_gadget_setup\012\000"
	.space	3
.LC419:
	.ascii	"<6>conn_gadget_setup\012\000"
	.space	2
.LC420:
	.ascii	"<3>alloc conn_gadget_dev F\012\000"
.LC421:
	.ascii	"&dev->ioctl_wq\000"
	.space	1
.LC422:
	.ascii	"<3>%s: error rd_queue vmalloc\012\000"
	.space	1
.LC423:
	.ascii	"<3>%s: misc_register f %d\012\000"
	.space	1
.LC424:
	.ascii	"<3>%s() conn_gadget gadget driver failed to initial"
	.ascii	"ize\012\000"
.LC425:
	.ascii	"<3>%s() _conn_gadget_dev is NULL\012\000"
	.space	2
.LC426:
	.ascii	"<3>%s() _conn_gaddget_dev onlined\012\000"
	.space	1
.LC427:
	.ascii	"%d\000"
	.space	1
.LC428:
	.ascii	"<3>%s() rd_queue_buf vmalloc f\012\000"
.LC429:
	.ascii	"enabling\000"
	.space	3
.LC430:
	.ascii	"disabling\000"
	.space	2
.LC431:
	.ascii	"%s: android_usb: %s remote wakeup\012\000"
	.space	1
.LC432:
	.ascii	"<7>%s: product %s\000"
	.space	2
.LC433:
	.ascii	"<7>%s: vendor %s\000"
	.space	3
.LC434:
	.ascii	"%28s\000"
	.space	3
.LC435:
	.ascii	"%04x\000"
	.space	3
.LC436:
	.ascii	"%255s\000"
	.space	2
.LC437:
	.ascii	"Wrong NTH SIGN, skblen %d\012\000"
	.space	1
.LC438:
	.ascii	"HEAD:\000"
	.space	2
.LC439:
	.ascii	"<6>\000"
.LC440:
	.ascii	"Wrong NTB headersize\012\000"
	.space	2
.LC441:
	.ascii	"OUT size exceeded\012\000"
	.space	1
.LC442:
	.ascii	"Bad index: %x\012\000"
	.space	1
.LC443:
	.ascii	"Wrong NDP SIGN\012\000"
.LC444:
	.ascii	"Bad NDP length: %x\012\000"
.LC445:
	.ascii	"Bad dgram length: %x\012\000"
	.space	2
.LC446:
	.ascii	"Bad CRC\012\000"
	.space	3
.LC447:
	.ascii	"<3>usb: force short packet %d  \012\000"
	.space	3
.LC448:
	.ascii	"<3>Dropped skb \012\000"
	.space	3
.LC449:
	.ascii	"<3>usb:%s final Expanding the buffer %d \012\000"
	.space	2
.LC450:
	.ascii	"ACCESSORY=START\000"
.LC451:
	.ascii	"NCM_DEVICE=START\000"
	.space	3
.LC452:
	.ascii	"NCM_DEVICE=RELEASE\000"
	.space	1
.LC453:
	.ascii	"<7>usb: %s ncm_connect=%d\012\000"
	.space	1
.LC454:
	.ascii	"<3>usb: %s superspeed available \012\000"
	.space	2
.LC455:
	.ascii	"<3>usb: %s ss_host_available(%d), windowsos(%d)\012"
	.ascii	"\000"
	.space	3
.LC456:
	.ascii	"<3>usb: %s gadget not available \012\000"
	.space	2
.LC457:
	.ascii	":\000"
	.space	2
.LC458:
	.ascii	"<3>%s: %s(): Failed to alloc memory for android con"
	.ascii	"f\012\000"
	.space	2
.LC459:
	.ascii	",\000"
	.space	2
.LC460:
	.ascii	"ffs\000"
.LC461:
	.ascii	"<3>%s: android_usb: Cannot enable ffs (%d)\000"
	.space	1
.LC462:
	.ascii	"<3>%s: android_usb: Cannot enable '%s' (%d)\000"
.LC463:
	.ascii	"<7>usb: %s disconnect\012\000"
	.space	1
.LC464:
	.ascii	"f_%s\000"
	.space	3
.LC465:
	.ascii	"<3>%s: %s: Failed to create dev %s\000"
	.space	1
.LC466:
	.ascii	"<3>%s: %s: Failed to init %s\000"
	.space	3
.LC467:
	.ascii	"<3>%s: %s: Failed to create function %s attributes\000"
	.space	1
.LC468:
	.ascii	"Android\000"
.LC469:
	.ascii	"0123456789ABCDEF\000"
	.space	3
.LC470:
	.ascii	"net2280\000"
.LC471:
	.ascii	"dummy_udc\000"
	.space	2
.LC472:
	.ascii	"pxa25x_udc\000"
	.space	1
.LC473:
	.ascii	"goku_udc\000"
	.space	3
.LC474:
	.ascii	"omap_udc\000"
	.space	3
.LC475:
	.ascii	"pxa27x_udc\000"
	.space	1
.LC476:
	.ascii	"s3c2410_udc\000"
.LC477:
	.ascii	"at91_udc\000"
	.space	3
.LC478:
	.ascii	"imx_udc\000"
.LC479:
	.ascii	"musb-hdrc\000"
	.space	2
.LC480:
	.ascii	"atmel_usba_udc\000"
	.space	1
.LC481:
	.ascii	"fsl-usb2-udc\000"
	.space	3
.LC482:
	.ascii	"amd5536udc\000"
	.space	1
.LC483:
	.ascii	"m66592_udc\000"
	.space	1
.LC484:
	.ascii	"fsl_qe_udc\000"
	.space	1
.LC485:
	.ascii	"ci13xxx_pci\000"
.LC486:
	.ascii	"langwell_udc\000"
	.space	3
.LC487:
	.ascii	"r8a66597_udc\000"
	.space	3
.LC488:
	.ascii	"s3c-hsotg\000"
	.space	2
.LC489:
	.ascii	"pch_udc\000"
.LC490:
	.ascii	"ci13xxx_msm\000"
.LC491:
	.ascii	"renesas_usbhs_udc\000"
	.space	2
.LC492:
	.ascii	"s3c-hsudc\000"
	.space	2
.LC493:
	.ascii	"net2272\000"
.LC494:
	.ascii	"dwc3-gadget\000"
.LC495:
	.ascii	"msm72k_udc\000"
	.space	1
.LC496:
	.ascii	"ci13xxx_msm_hsic\000"
	.space	3
.LC497:
	.ascii	"<4>%s: %s: controller '%s' not recognized\012\000"
	.space	1
.LC498:
	.ascii	"USB_STATE=DISCONNECTED\000"
	.space	1
.LC499:
	.ascii	"USB_STATE=CONNECTED\000"
.LC500:
	.ascii	"USB_STATE=CONFIGURED\000"
	.space	3
.LC501:
	.ascii	"USB_STATE=SUSPENDED\000"
.LC502:
	.ascii	"USB_STATE=RESUMED\000"
	.space	2
.LC503:
	.ascii	"USB_CONNECTION=CONNECTED\000"
	.space	3
.LC504:
	.ascii	"low\000"
.LC505:
	.ascii	"<6>%s: %s: did not send uevent (%d %d %pK)\012\000"
.LC506:
	.ascii	"<6>%s: %s: sent uevent %s\012\000"
	.space	1
.LC507:
	.ascii	"<6>%s: %s: sent missed DISCONNECT event\012\000"
	.space	3
.LC508:
	.ascii	"<3>acc_complete_send_hid_event, err %d\012\000"
.LC509:
	.ascii	"<3>can't add hid device: %d\012\000"
	.space	3
.LC510:
	.ascii	"<3>can't add HID device %pK\012\000"
	.space	3
.LC511:
	.ascii	"read-only status change prevented\012\000"
	.space	1
.LC512:
	.ascii	"read-only status set to %d\012\000"
.LC513:
	.ascii	"cdrom status change prevented\012\000"
	.space	1
.LC514:
	.ascii	"cdrom status set to %d\012\000"
.LC515:
	.ascii	"%s called\012\000"
	.space	1
.LC516:
	.ascii	"<6>%s (%s)\012\000"
.LC517:
	.ascii	"SWITCH_NAME=USB_MESSAGE\000"
.LC518:
	.ascii	"SWITCH_STATE=%s\000"
.LC519:
	.ascii	"usb_msg\000"
.LC520:
	.ascii	"Send cd eject message to daemon\012\000"
	.space	3
.LC521:
	.ascii	"%s --> %d, %u/%u\012\000"
	.space	2
.LC522:
	.ascii	"receive_file_work(%lld)\012\000"
	.space	3
.LC523:
	.ascii	"%s- count(%lld) not multiple of mtu(%d)\012\000"
	.space	3
.LC524:
	.ascii	"vfs_write %d\012\000"
	.space	2
.LC525:
	.ascii	"got short packet\012\000"
	.space	2
.LC526:
	.ascii	"receive_file_work returning %d\012\000"
.LC527:
	.ascii	"<6>unloading\012\000"
	.space	2
.LC528:
	.ascii	"<6>file system registered\012\000"
	.space	1
.LC529:
	.ascii	"<3>failed registering file system (%d)\012\000"
.LC530:
	.ascii	"%s: intf %d, alt %d\012\000"
	.space	3
.LC531:
	.ascii	"<3>%s: Failed to enable capture ep\000"
	.space	1
.LC532:
	.ascii	"<3>%s: request allocation failed\012\000"
	.space	2
.LC533:
	.ascii	"<3>%s: request buffer allocation failed\012\000"
	.space	3
.LC534:
	.ascii	"<3>%s: Failed to queue %s req: err %d\012\000"
	.space	1
.LC535:
	.ascii	"<3>%s: Failed to enable playback ep\000"
.LC536:
	.ascii	"<3>%s: Failed to queue %s queue req: err %d\012\000"
	.space	3
.LC537:
	.ascii	"%s: Allocated %d requests\012\000"
	.space	1
.LC538:
	.ascii	"<3>%s: Schedule playback_work\000"
	.space	2
.LC539:
	.ascii	"<3>%s: playback_buf is empty. Stop.\000"
.LC540:
	.ascii	"<3>%s: Interface %d. Do nothing. Return %d\012\000"
.LC541:
	.ascii	"<3>Physical address or size of buf is NULL\000"
	.space	1
.LC542:
	.ascii	"<3>%s: Invalid grmnet:%pK\012\000"
	.space	1
.LC543:
	.ascii	"major %x minor %x vendor %x\012\000"
	.space	3
.LC544:
	.ascii	"<7>usb: %s terminal_mode %s\012\000"
	.space	3
.LC545:
	.ascii	"%s: cbits_to_modem:%d\012\000"
	.space	1
.LC546:
	.ascii	"Open rmnet_ctrl_qti device file\012\000"
	.space	3
.LC547:
	.ascii	"Already opened\012\000"
.LC548:
	.ascii	"<3>%s on a NULL device\012\000"
.LC549:
	.ascii	"%s sets POLLIN for rmnet_ctrl_qti_port\012\000"
.LC550:
	.ascii	"%s: ctrl_tomodem:%d\012\000"
	.space	3
.LC551:
	.ascii	"%s: port:%pK\012\000"
	.space	2
.LC552:
	.ascii	"<3>%s: ctrl bridge open failed :%d\012\000"
.LC553:
	.ascii	"%s: port num =%d unthrottled\012\000"
	.space	2
.LC554:
	.ascii	"%s: %s: woken up by peer\012\000"
	.space	2
.LC555:
	.ascii	"<3>%s: FAILED: d_port == NULL\000"
	.space	2
.LC556:
	.ascii	"<3>%s: FAILED: d_port->cdev == NULL\000"
.LC557:
	.ascii	"<3>%s: FAILED: d_port->cdev->gadget == NULL\000"
.LC558:
	.ascii	"%s: ctrl device is already opened\012\000"
	.space	1
.LC559:
	.ascii	"ccid_bulk_open\012\000"
.LC560:
	.ascii	"%s: bulk device is already opened\012\000"
	.space	1
.LC561:
	.ascii	"%s: nothing to do\012\000"
	.space	1
.LC562:
	.ascii	"<3>%s: rmnet notify ep enqueue error %d\012\000"
	.space	3
.LC563:
	.ascii	"%s: port#%d\012\000"
	.space	3
.LC564:
	.ascii	"<3>%s: rmnet dev is null\012\000"
	.space	2
.LC565:
	.ascii	"uether\000"
	.space	1
.LC566:
	.ascii	"<3>%s: %s: Unable to create workqueue: uether\012\000"
	.space	1
.LC567:
	.ascii	"<3>%s: %s(): Failed to register androidplatform dri"
	.ascii	"ver\012\000"
.LC568:
	.ascii	"<6>conn_gadget_flush\012\000"
	.space	2
.LC569:
	.ascii	"<3>%s() _conn_gadget_dev is invalid\012\000"
	.space	3
.LC570:
	.ascii	"%s: port:%pK tom:%lu pno:%d\012\000"
	.space	3
.LC571:
	.ascii	"<3>%s: rx queue failed\012\000"
.LC572:
	.ascii	"<3>%s: usb epIn failed\012\000"
.LC573:
	.ascii	"<6>%s: setting notify count to zero\012\000"
	.space	3
.LC574:
	.ascii	"<6>%s: %s: speaker_status: %d, speaker_check_count "
	.ascii	"%d\012\000"
	.space	1
.LC575:
	.ascii	"<3>%s: usb_bam_disconnect_ipa failed: err:%d\012\000"
	.space	2
.LC576:
	.ascii	"usb: %s - usb_ncm misc driver fail \012\000"
	.space	3
.LC577:
	.ascii	"<3>%s: unable open bridge ch:%d err:%d\012\000"
.LC578:
	.ascii	"<3>%s: smux close timedout\012\000"
.LC579:
	.ascii	"<3> %s smux_open failed\012\000"
	.space	3
.LC580:
	.ascii	"<3>%s: unable to open smux ch:%d err:%d\012\000"
	.space	3
.LC581:
	.ascii	"TTY\000"
.LC582:
	.ascii	"SDIO\000"
	.space	3
.LC583:
	.ascii	"SMD\000"
.LC584:
	.ascii	"QTI\000"
.LC585:
	.ascii	"BAM\000"
.LC586:
	.ascii	"BAM2BAM\000"
.LC587:
	.ascii	"BAM2BAM_IPA\000"
.LC588:
	.ascii	"HSIC\000"
	.space	3
.LC589:
	.ascii	"HSUART\000"
	.space	1
.LC590:
	.ascii	"%s: len %d, buffer_len %d, read %d\012\000"
.LC591:
	.ascii	"%s: data xport: %s dev: %pK portno: %d\012\000"
.LC592:
	.ascii	"%s: resumed port %d\012\000"
	.space	3
.LC593:
	.ascii	"<3>%s: Un-supported transport: %s\012\000"
	.space	1
.LC594:
	.ascii	"MessageLength:%d DataLength:%d\012\000"
.LC595:
	.ascii	"<3>RNDIS header is NULL.\012\000"
	.space	2
.LC596:
	.ascii	"driver/rndis-%03d\000"
	.space	2
.LC597:
	.ascii	"%s: remove entries\000"
	.space	1
.LC598:
	.ascii	"\012\000"
	.space	2
.LC599:
	.ascii	"k_bam_data\000"
	.space	1
.LC600:
	.ascii	"<3>%s: Failed to create workqueue\012\000"
	.space	1
.LC601:
	.ascii	"<3>%s: Failed to alloc port:%d\012\000"
.LC602:
	.ascii	"%s: port:%pK portno:%d\012\000"
.LC603:
	.ascii	"<3>%s: %s: %s failed\012\000"
	.space	2
.LC604:
	.ascii	"<6>%s: initialize %d instances\012\000"
.LC605:
	.ascii	"<3>%s: Failed to allocate mbim dev\012\000"
.LC606:
	.ascii	"<3>%s: mbim driver failed to register\000"
	.space	2
.LC607:
	.ascii	"<6>%s: Initialized %d ports\012\000"
	.space	3
.LC608:
	.ascii	"<3>%s: Failed\000"
	.space	2
.LC609:
	.ascii	"%s: Queue empty packet for QBI\000"
	.space	1
.LC610:
	.ascii	"%s: %s: Wake up read queue\000"
	.space	1
.LC611:
	.ascii	"%s: %s: rndis resumed\012\000"
	.space	1
.LC612:
	.ascii	"%s: %s: resumed port %d\012\000"
	.space	3
.LC613:
	.ascii	"%s: %s: rndis suspended\012\000"
	.space	3
.LC614:
	.ascii	"%s: %s: suspended port %d\012\000"
	.space	1
.LC615:
	.ascii	"<3>%s: invalid bam2bam portno#%d\012\000"
	.space	2
.LC616:
	.ascii	"<3>%s: data port is null\012\000"
	.space	2
.LC617:
	.ascii	"<3>%s: %s: usb_bam_client_ready failed\012\000"
.LC618:
	.ascii	"%s: OID_GEN_SUPPORTED_LIST\012\000"
.LC619:
	.ascii	"%s: OID_GEN_HARDWARE_STATUS\012\000"
	.space	3
.LC620:
	.ascii	"%s: OID_GEN_MEDIA_SUPPORTED\012\000"
	.space	3
.LC621:
	.ascii	"%s: OID_GEN_MEDIA_IN_USE\012\000"
	.space	2
.LC622:
	.ascii	"%s: OID_GEN_MAXIMUM_FRAME_SIZE\012\000"
.LC623:
	.ascii	"%s: OID_GEN_TRANSMIT_BLOCK_SIZE\012\000"
	.space	3
.LC624:
	.ascii	"%s: OID_GEN_RECEIVE_BLOCK_SIZE\012\000"
.LC625:
	.ascii	"%s: OID_GEN_VENDOR_ID\012\000"
	.space	1
.LC626:
	.ascii	"%s: OID_GEN_VENDOR_DESCRIPTION\012\000"
.LC627:
	.ascii	"%s: OID_GEN_VENDOR_DRIVER_VERSION\012\000"
	.space	1
.LC628:
	.ascii	"%s: OID_GEN_CURRENT_PACKET_FILTER\012\000"
	.space	1
.LC629:
	.ascii	"%s: OID_GEN_MAXIMUM_TOTAL_SIZE\012\000"
.LC630:
	.ascii	"%s: OID_GEN_PHYSICAL_MEDIUM\012\000"
	.space	3
.LC631:
	.ascii	"%s: OID_GEN_MAC_OPTIONS\012\000"
	.space	3
.LC632:
	.ascii	"%s: OID_GEN_RCV_NO_BUFFER\012\000"
	.space	1
.LC633:
	.ascii	"%s: OID_802_3_PERMANENT_ADDRESS\012\000"
	.space	3
.LC634:
	.ascii	"%s: OID_802_3_CURRENT_ADDRESS\012\000"
	.space	1
.LC635:
	.ascii	"%s: OID_802_3_MULTICAST_LIST\012\000"
	.space	2
.LC636:
	.ascii	"%s: OID_802_3_MAXIMUM_LIST_SIZE\012\000"
	.space	3
.LC637:
	.ascii	"%s: OID_802_3_MAC_OPTIONS\012\000"
	.space	1
.LC638:
	.ascii	"%s: OID_802_3_RCV_ERROR_ALIGNMENT\012\000"
	.space	1
.LC639:
	.ascii	"%s: OID_802_3_XMIT_ONE_COLLISION\012\000"
	.space	2
.LC640:
	.ascii	"%s: OID_802_3_XMIT_MORE_COLLISIONS\012\000"
.LC641:
	.ascii	"<4>%s: query unknown OID 0x%08X\012\000"
	.space	3
.LC642:
	.ascii	"&bulk_dev->read_wq\000"
	.space	1
.LC643:
	.ascii	"&bulk_dev->write_wq\000"
.LC644:
	.ascii	"<3>%s: ccid_ctrl_device_init failed, err:%d\012\000"
	.space	3
.LC645:
	.ascii	"<3>%s: ccid_bulk_device_init failed, err:%d\012\000"
	.space	3
.LC646:
	.ascii	"<3>ccid gadget driver failed to initialize\012\000"
.LC647:
	.ascii	"acm ttyGS%d serial state %04x\012\000"
	.space	1
.LC648:
	.ascii	"<7>acm ttyGS%d serial state %04x\012\000"
	.space	2
.LC649:
	.ascii	"acm ttyGS%d can't notify serial state, %d\012\000"
	.space	1
.LC650:
	.ascii	"%s: ep:%pK head:%pK num:%d size:%d cb:%pK\000"
	.space	2
.LC651:
	.ascii	"<3>%s: usb alloc request failed\012\000"
	.space	3
.LC652:
	.ascii	"<3>%s: request buf allocation failed\012\000"
	.space	2
.LC653:
	.ascii	"%s: req allocated:%d\012\000"
	.space	2
.LC654:
	.ascii	"<3>%s: %s err %d\012\000"
	.space	2
.LC655:
	.ascii	"<4>%s: unexpected %s status %d\012\000"
.LC656:
	.ascii	"<3>'=' missing in %s\012\000"
	.space	2
.LC657:
	.ascii	"<3>%s: invalid value: %s\012\000"
	.space	2
.LC658:
	.ascii	"rmode\000"
	.space	2
.LC659:
	.ascii	"fmode\000"
	.space	2
.LC660:
	.ascii	"mode\000"
	.space	3
.LC661:
	.ascii	"uid\000"
.LC662:
	.ascii	"gid\000"
.LC663:
	.ascii	"<3>%s: invalid option\012\000"
	.space	1
.LC664:
	.ascii	"bRequest 0x%x, w_value 0x%04x, len %d, endpoint %d\012"
	.ascii	"\000"
.LC665:
	.ascii	"audio req%02x.%02x v%04x i%04x l%d\012\000"
.LC666:
	.ascii	"<3>audio response on err %d\012\000"
	.space	3
.LC667:
	.ascii	"<3>given pkt size too big:%d > max_pkt_size:%d\012\000"
.LC668:
	.ascii	"<3>%s: Unable to allocate ctrl pkt\012\000"
.LC669:
	.ascii	"%s: Add to cpkt_req_q packet with len = %d\012\000"
.LC670:
	.ascii	"<3>rmnet file handler %pK is not open\000"
	.space	2
.LC671:
	.ascii	"%s: Wake up read queue\000"
	.space	1
.LC672:
	.ascii	"unable to allocate memory for QMI req\012\000"
	.space	1
.LC673:
	.ascii	"<3>%s: kevent %d may have been dropped\012\000"
.LC674:
	.ascii	"%s returns %d\012\000"
	.space	1
.LC675:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/u_ser"
	.ascii	"ial.c\000"
	.space	3
.LC676:
	.ascii	"%s: cleaned up ttyGS* support\012\000"
	.space	1
.LC677:
	.ascii	"%c is not valid\012\000"
	.space	3
.LC678:
	.ascii	"%s: audio_playback_buf_size %d - copy_buf->actual %"
	.ascii	"d, req->actual %d\000"
	.space	3
.LC679:
	.ascii	"<3>%s: Failed to queue %s req: err - %d\012\000"
	.space	3
.LC680:
	.ascii	"%s: copy_buf == 0\000"
	.space	2
.LC681:
	.ascii	"%s: Copy %d bytes\000"
	.space	2
.LC682:
	.ascii	"<3>%s: Failed completion: status %d\000"
.LC683:
	.ascii	"reset interface\012\000"
	.space	3
.LC684:
	.ascii	"can't allocate request for %s\012\000"
	.space	1
.LC685:
	.ascii	"%s: notify_count = %d\000"
	.space	2
.LC686:
	.ascii	"<6>%s: ESHUTDOWN/ECONNRESET, connection gone\000"
	.space	3
.LC687:
	.ascii	"<3>%s: Unknown event %02x --> %d\012\000"
	.space	2
.LC688:
	.ascii	"%s: notify_state: %d\000"
	.space	3
.LC689:
	.ascii	"<3>%s: Pending notifications in MBIM_NOTIFY_NONE\012"
	.ascii	"\000"
	.space	2
.LC690:
	.ascii	"%s: No pending notifications\012\000"
	.space	2
.LC691:
	.ascii	"%s: Notification %02x sent\012\000"
.LC692:
	.ascii	"%s: notify_response_avaliable: done\000"
.LC693:
	.ascii	"<3>%s: Queue notify request failed, err: %d\000"
.LC694:
	.ascii	"%s: queue request: notify_count = %d\000"
	.space	3
.LC695:
	.ascii	"<3>%s: usb_ep_queue failed, err: %d\000"
.LC696:
	.ascii	"%s: %s: Exit\012\000"
	.space	2
.LC697:
	.ascii	"%s: name:%s no_data_ports= %d\012\000"
	.space	1
.LC698:
	.ascii	"<3>%s() _conn_gadget_dev is offlined\012\000"
	.space	2
.LC699:
	.ascii	"acc_complete_in set disconnected\000"
	.space	3
.LC700:
	.ascii	"bogus ep0 stall!\012\000"
	.space	2
.LC701:
	.ascii	"audio_data_complete req->status %d req->actual %d\012"
	.ascii	"\000"
	.space	1
.LC702:
	.ascii	"qdss_unbind\012\000"
	.space	3
.LC703:
	.ascii	"clear_eps\012\000"
	.space	1
.LC704:
	.ascii	"clear_desc\012\000"
.LC705:
	.ascii	"sending phase-error status\012\000"
.LC706:
	.ascii	"sending command-failure status\012\000"
.LC707:
	.ascii	"write %u @ %llu beyond end %llu\012\000"
	.space	3
.LC708:
	.ascii	"error in file write: %d\012\000"
	.space	3
.LC709:
	.ascii	"partial file write: %d/%u\012\000"
	.space	1
.LC710:
	.ascii	"error in file read: %d\012\000"
.LC711:
	.ascii	"partial file read: %d/%u\012\000"
	.space	2
.LC712:
	.ascii	"&ffs->mutex\000"
.LC713:
	.ascii	"&ffs->ev.waitq\000"
	.space	1
.LC714:
	.ascii	"&x->wait\000"
	.space	3
.LC715:
	.ascii	"ep0\000"
.LC716:
	.ascii	"ecm unbind\012\000"
.LC717:
	.ascii	"%s: bam_data_destroy: Freeing ports\012\000"
	.space	3
.LC718:
	.ascii	"usb_qdss_disconnect_work\012\000"
	.space	2
.LC719:
	.ascii	"<3>uninit_data\012\000"
.LC720:
	.ascii	"<3>msm_ep_unconfig failed\012\000"
	.space	1
.LC721:
	.ascii	"<3>%s: uninit_data error\012\000"
	.space	2
.LC722:
	.ascii	"set_qdss_data_connection\012\000"
	.space	2
.LC723:
	.ascii	"<3>usb_bam_disconnection error\012\000"
.LC724:
	.ascii	"<3>qdss_disconnect error\000"
	.space	3
.LC725:
	.ascii	"acc_write(%d)\012\000"
	.space	1
.LC726:
	.ascii	"acc_write disconnected or not online\000"
	.space	3
.LC727:
	.ascii	"acc_write dev->error\012\000"
	.space	2
.LC728:
	.ascii	"acc_write: xfer error %d\012\000"
	.space	2
.LC729:
	.ascii	"acc_write returning %d\012\000"
.LC730:
	.ascii	"<6>%s: mbim suspended\012\000"
	.space	1
.LC731:
	.ascii	"<6>%s: mbim resumed\012\000"
	.space	3
.LC732:
	.ascii	"%s: ecm suspended\012\000"
	.space	1
.LC733:
	.ascii	"%s: ecm resumed\012\000"
	.space	3
.LC734:
	.ascii	"<3>%s: Received NULL mbim pointer\012\000"
	.space	1
.LC735:
	.ascii	"<3>%s: Buffer size is too big %d, should be at most"
	.ascii	" %d\012\000"
.LC736:
	.ascii	"<3>%s: Previous reading is not finished yet\012\000"
	.space	3
.LC737:
	.ascii	"<3>%s: USB cable not connected. Wait.\012\000"
	.space	1
.LC738:
	.ascii	"%s: Received request packet\012\000"
	.space	3
.LC739:
	.ascii	"<3>%s: cpkt size too big:%d > buf size:%d\012\000"
	.space	1
.LC740:
	.ascii	"<3>%s: copy_to_user failed: err %d\012\000"
.LC741:
	.ascii	"<3>%s: Waiting failed\012\000"
	.space	1
.LC742:
	.ascii	"<3>%s: %s: Card is NULL\000"
.LC743:
	.ascii	"%s: Initialize hw params\000"
	.space	3
.LC744:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_DROP failed: %d\012\000"
.LC745:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_HW_PARAMS failed: %d\012\000"
	.space	3
.LC746:
	.ascii	"<3>%s: Preparing playback failed: %d\012\000"
	.space	2
.LC747:
	.ascii	"%s: playback params: access %x, format %x, channels"
	.ascii	" %d, rate %d\012\000"
	.space	3
.LC748:
	.ascii	"<3>%s: Setting playback params failed: err %d\000"
	.space	2
.LC749:
	.ascii	"%s: Initialized playback params\000"
.LC750:
	.ascii	"<3>%s: Failed to allocate hw params\000"
.LC751:
	.ascii	"<3>%s: Preparing capture failed: %d\012\000"
	.space	3
.LC752:
	.ascii	"<3>%s: Failed to allocate sw params\000"
.LC753:
	.ascii	"%s: buffer_bytes = (%d,%d) omin=%d omax=%d int=%d e"
	.ascii	"mpty=%d\012\000"
.LC754:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_SW_PARAMS failed: %d\012\000"
	.space	3
.LC755:
	.ascii	"%s: capture params: access %x, format %x, channels "
	.ascii	"%d, rate %d\012\000"
.LC756:
	.ascii	"<3>%s: Setting capture params failed: err %d\000"
	.space	3
.LC757:
	.ascii	"<6>%s: Initialized capture params\000"
	.space	2
.LC758:
	.ascii	"<3>%s: playback_buf is empty\000"
	.space	3
.LC759:
	.ascii	"%s: play_buf->actual = %d\000"
	.space	2
.LC760:
	.ascii	"<3>%s: Buffer is empty, no data to play\000"
.LC761:
	.ascii	"<3>%s: Failed to init audio streams\000"
.LC762:
	.ascii	"<3>%s: copying failed\000"
	.space	2
.LC763:
	.ascii	"<3>%s: SND failure - runtime->frame_bits == 0\000"
	.space	2
.LC764:
	.ascii	"%s: runtime->frame_bits = %d, count = %d, frames = "
	.ascii	"%d\000"
	.space	2
.LC765:
	.ascii	"<3>%s: snd_pcm_lib_write failed with err %d\012\000"
	.space	3
.LC766:
	.ascii	"%s: Done. Sent %d frames\000"
	.space	3
.LC767:
	.ascii	"<3>%s() req->status f %d\012\000"
	.space	2
.LC768:
	.ascii	"<6>DUN is unregisterd\012\000"
	.space	1
.LC769:
	.ascii	"bulk-in\000"
.LC770:
	.ascii	"%s set halt\012\000"
	.space	3
.LC771:
	.ascii	"usb_ep_set_halt -> %d\012\000"
	.space	1
.LC772:
	.ascii	"unbind\012\000"
.LC773:
	.ascii	"ncm unbind\012\000"
.LC774:
	.ascii	"rndis0\000"
	.space	1
.LC775:
	.ascii	"adb_write(%d)\012\000"
	.space	1
.LC776:
	.ascii	"adb_write dev->error\012\000"
	.space	2
.LC777:
	.ascii	"adb_write: xfer error %d\012\000"
	.space	2
.LC778:
	.ascii	"adb_write returning %d\012\000"
.LC779:
	.ascii	"<3>conn_gadget_function_unbind\012\000"
.LC780:
	.ascii	"<7>usb: %s\012\000"
.LC781:
	.ascii	"<3>%s() cmd is not proper ioctl type %c\012\000"
	.space	3
.LC782:
	.ascii	"<3>%s() cmd is not proper ioctl number %d\012\000"
	.space	1
.LC783:
	.ascii	"<3>%s() cmd has no buffer\012\000"
	.space	1
.LC784:
	.ascii	"<3>%s() cmd has invalid direction\012\000"
	.space	1
.LC785:
	.ascii	"<3>%s() SUPPORT_LIST copy_to_user f %d\012\000"
.LC786:
	.ascii	"<3>%s() close called\012\000"
	.space	2
.LC787:
	.ascii	"<3>%s() copy_to_user f %d\012\000"
	.space	1
.LC788:
	.ascii	"<3>%s() WAIT_NOTIFY copy_to_user f %d\012\000"
	.space	1
.LC789:
	.ascii	"<3>%s() GET_STATUS copy_to_user f %d\012\000"
	.space	2
.LC790:
	.ascii	"%s: %s: size: %d\000"
	.space	3
.LC791:
	.ascii	"ncm\000"
.LC792:
	.ascii	"<3>usb: %s  drop incase of NCM rx length %d\012\000"
	.space	3
.LC793:
	.ascii	"<3>usb: %s  Dont drop incase of NCM rx length %d\012"
	.ascii	"\000"
	.space	2
.LC794:
	.ascii	"<3>usb: %s Drop rx length %d\012\000"
	.space	2
.LC795:
	.ascii	"%x\000"
	.space	1
.LC796:
	.ascii	"<7>usb: %s old status=%d, new status=%d\012\000"
	.space	3
.LC797:
	.ascii	"%s: rndis_qc_unbind: free\000"
	.space	2
.LC798:
	.ascii	"eject attempt prevented\012\000"
	.space	3
.LC799:
	.ascii	"close backing file\012\000"
.LC800:
	.ascii	"<3>%s:Unable to close smux channel: %d\012\000"
.LC801:
	.ascii	"<6>%s: usb cable is not connected\012\000"
	.space	1
.LC802:
	.ascii	"%s: USB_CDC_RESET_FUNCTION\000"
	.space	1
.LC803:
	.ascii	"%s: USB_CDC_SEND_ENCAPSULATED_COMMAND\000"
	.space	2
.LC804:
	.ascii	"%s: w_length > req->length: %d > %d\000"
.LC805:
	.ascii	"%s: USB_CDC_GET_ENCAPSULATED_RESPONSE\000"
	.space	2
.LC806:
	.ascii	"<3>%s: w_length > 0: %d\000"
.LC807:
	.ascii	"%s: req%02x.%02x v%04x i%04x l%d\012\000"
	.space	2
.LC808:
	.ascii	"<3>%s: ctrl resp queue empty\012\000"
	.space	2
.LC809:
	.ascii	"%s: copied encapsulated_response %d bytes\000"
	.space	2
.LC810:
	.ascii	"%s: USB_CDC_GET_NTB_PARAMETERS\000"
	.space	1
.LC811:
	.ascii	"%s: USB_CDC_GET_NTB_INPUT_SIZE\000"
	.space	1
.LC812:
	.ascii	"%s: Reply to host INPUT SIZE %d\012\000"
	.space	3
.LC813:
	.ascii	"%s: USB_CDC_SET_NTB_INPUT_SIZE\000"
	.space	1
.LC814:
	.ascii	"<3>%s: wrong NTB length %d\000"
	.space	1
.LC815:
	.ascii	"%s: USB_CDC_GET_NTB_FORMAT\000"
	.space	1
.LC816:
	.ascii	"%s: NTB FORMAT: sending %d\012\000"
.LC817:
	.ascii	"%s: USB_CDC_SET_NTB_FORMAT\000"
	.space	1
.LC818:
	.ascii	"%s: NCM16 selected\012\000"
.LC819:
	.ascii	"%s: NCM32 selected\012\000"
.LC820:
	.ascii	"<3>%s: invalid control req: %02x.%02x v%04x i%04x l"
	.ascii	"%d\012\000"
	.space	1
.LC821:
	.ascii	"%s: control request: %02x.%02x v%04x i%04x l%d\012\000"
.LC822:
	.ascii	"<3>%s: queueing req failed: %02x.%02x, err %d\012\000"
	.space	1
.LC823:
	.ascii	"<3>%s: ctrl req err %d: %02x.%02x v%04x i%04x l%d\012"
	.ascii	"\000"
	.space	1
.LC824:
	.ascii	"<3>%s() conn_gadget_lock(write_excl) f\012\000"
.LC825:
	.ascii	"<3>%s() conn_gadget_write dev->error\012\000"
	.space	2
.LC826:
	.ascii	"<3>%s: copy_from_user failed\012\000"
	.space	2
.LC827:
	.ascii	"<3>%s() xfer error %d\012\000"
	.space	1
.LC828:
	.ascii	"%s: %s: req_put\012\000"
	.space	3
.LC829:
	.ascii	"<3>%s: wait_event_interruptible(wrwq,reqget) failed"
	.ascii	" %d\012\000"
.LC830:
	.ascii	"qdss_disable\012\000"
	.space	2
.LC831:
	.ascii	"qdss_eps_disable\012\000"
	.space	2
.LC832:
	.ascii	"ecm0\000"
	.space	3
.LC833:
	.ascii	"%s: suspended port %d\012\000"
	.space	1
.LC834:
	.ascii	"gs_close: ttyGS%d (%pK,%pK) ...\012\000"
	.space	3
.LC835:
	.ascii	"gs_close: ttyGS%d (%pK,%pK) done!\012\000"
	.space	1
.LC836:
	.ascii	"<3>%s: USB not connected\012\000"
	.space	2
.LC837:
	.ascii	"<6>%s: usb rmnet sdio channels are open retry_cnt:%"
	.ascii	"d\012\000"
	.space	2
.LC838:
	.ascii	"%s: usb rmnet sdio open retry_cnt:%d\012\000"
	.space	2
.LC839:
	.ascii	"Unable to open control SDIO channel\012\000"
	.space	3
.LC840:
	.ascii	"Unable to open DATA SDIO channel\012\000"
	.space	2
.LC841:
	.ascii	"%s complete --> %d, %d/%d\012\000"
	.space	1
.LC842:
	.ascii	"kill %s:  resubmit %d bytes --> %d\012\000"
.LC843:
	.ascii	"mtp_write(%d)\012\000"
	.space	1
.LC844:
	.ascii	"mtp_write dev->error\012\000"
	.space	2
.LC845:
	.ascii	"mtp_write: xfer error %d\012\000"
	.space	2
.LC846:
	.ascii	"mtp_write returning %d\012\000"
.LC847:
	.ascii	"send_file_work(%lld %lld)\012\000"
	.space	1
.LC848:
	.ascii	"send_file_work: xfer error %d\012\000"
	.space	1
.LC849:
	.ascii	"send_file_work returning %d\012\000"
	.space	3
.LC850:
	.ascii	"rndis req%02x.%02x v%04x i%04x l%d\012\000"
.LC851:
	.ascii	"<3>%s: rndis response on err %d\012\000"
	.space	3
.LC852:
	.ascii	"rndis response on err %d\012\000"
	.space	2
.LC853:
	.ascii	"%s: Queue empty packet for QTI\000"
	.space	1
.LC854:
	.ascii	"<3>%s: rmnet ctrl file handler %pK is not open\000"
	.space	1
.LC855:
	.ascii	"rmnet SMD data channel full\012\000"
	.space	3
.LC856:
	.ascii	"rmnet SMD data write failed\012\000"
	.space	3
.LC857:
	.ascii	"rmnet_mux SMD data channel full\012\000"
	.space	3
.LC858:
	.ascii	"rmnet_mux SMD data write failed\012\000"
	.space	3
.LC859:
	.ascii	"delayed status mismatch..resetting\012\000"
.LC860:
	.ascii	"lun%d\000"
	.space	2
.LC861:
	.ascii	"Linux\000"
	.space	2
.LC862:
	.ascii	"File-Stor Gadget\000"
	.space	3
.LC863:
	.ascii	"File-CD Gadget\000"
	.space	1
.LC864:
	.ascii	"file-storage\000"
	.space	3
.LC865:
	.ascii	"(no medium)\000"
.LC866:
	.ascii	"(error)\000"
.LC867:
	.ascii	"removable \000"
	.space	1
.LC868:
	.ascii	"\000"
	.space	3
.LC869:
	.ascii	"read only \000"
	.space	1
.LC870:
	.ascii	"lun\000"
.LC871:
	.ascii	"&common->filesem\000"
	.space	3
.LC872:
	.ascii	"failed to register LUN%d: %d\012\000"
	.space	2
.LC873:
	.ascii	"no file given for LUN%d\012\000"
	.space	3
.LC874:
	.ascii	"controller '%s' not recognized\012\000"
.LC875:
	.ascii	"%-8s%-16s%04x\000"
	.space	2
.LC876:
	.ascii	"SAMSUNG\000"
.LC877:
	.ascii	"&common->fsg_wait\000"
	.space	2
.LC878:
	.ascii	"Mass Storage Function, version: 2009/09/11\012\000"
.LC879:
	.ascii	"Number of LUNs=%d\012\000"
	.space	1
.LC880:
	.ascii	"LUN: %s%s%sfile: %s\012\000"
	.space	3
.LC881:
	.ascii	"CD-ROM \000"
.LC882:
	.ascii	"I/O thread pid: %d\012\000"
.LC883:
	.ascii	"<7>usb: %s cdev->config=%pK, config=%pK\012\000"
	.space	3
.LC884:
	.ascii	"<6>adb_release\012\000"
.LC885:
	.ascii	"<3>%s: adb_closed_callback: data->dev is NULL\000"
	.space	2
.LC886:
	.ascii	" super\000"
	.space	1
.LC887:
	.ascii	" high\000"
	.space	2
.LC888:
	.ascii	" full\000"
	.space	2
.LC889:
	.ascii	" full/low\000"
	.space	2
.LC890:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/andro"
	.ascii	"id.c\000"
.LC891:
	.ascii	"adding config #%u '%s'/%pK\012\000"
.LC892:
	.ascii	"cfg %d/%pK speeds:%s%s%s\012\000"
	.space	2
.LC893:
	.ascii	"  interface %d = %s/%pK\012\000"
	.space	3
.LC894:
	.ascii	"added config '%s'/%u --> %d\012\000"
	.space	3
.LC895:
	.ascii	"<3>%s: %s: usb_add_config failed : err: %d\012\000"
.LC896:
	.ascii	"USB_CONNECTION=READY\000"
	.space	3
.LC897:
	.ascii	"<6>%s: %s\012\000"
	.space	1
.LC898:
	.ascii	"<6>%s: %s  canceling the work\012\000"
	.space	1
.LC899:
	.ascii	"enabled\000"
.LC900:
	.ascii	"disabled\000"
	.space	3
.LC901:
	.ascii	"<6>usb: enabled: %d, dev->enabled: %d\012\000"
	.space	1
.LC902:
	.ascii	"SAMSUNG_Android\000"
.LC903:
	.ascii	"<7>usb: %s f_holder->f:%s\012\000"
	.space	1
.LC904:
	.ascii	"acm\000"
.LC905:
	.ascii	"<7>usb: acm is enabled. (bcdDevice=0x400)\012\000"
	.space	1
.LC906:
	.ascii	"conn_gadget\000"
.LC907:
	.ascii	"<7>usb: conn_gadget + kies (bcdDevice=0xC00)\012\000"
	.space	2
.LC908:
	.ascii	"<7>usb: conn_gadget only (bcdDevice=0x800)\012\000"
.LC909:
	.ascii	"<7>usb: %s vendor=%x,product=%x,bcdDevice=%x\000"
	.space	3
.LC910:
	.ascii	"<7>,Class=%x,SubClass=%x,Protocol=%x\012\000"
	.space	2
.LC911:
	.ascii	"<7>usb: %s next cmd : usb_add_config\012\000"
	.space	2
.LC912:
	.ascii	"<3>%s: %s: android_enable failed\012\000"
	.space	2
.LC913:
	.ascii	"<3>%s: android_usb: already %s\012\000"
.LC914:
	.ascii	"<6>adb_open\012\000"
	.space	3
.LC915:
	.ascii	"<3>%s: unable open bam ch:%d err:%d\012\000"
	.space	3
.LC916:
	.ascii	"%s: ep:%pK head:%pK num:%d cb:%pK\000"
	.space	2
.LC917:
	.ascii	"<3>%s: rx req allocation failed\012\000"
	.space	3
.LC918:
	.ascii	"<3>%s: tx req allocation failed\012\000"
	.space	3
.LC919:
	.ascii	"%s: reset by peer\012\000"
	.space	1
.LC920:
	.ascii	"<3>%s: BAM reset failed %d\012\000"
.LC921:
	.ascii	"<3>%s: usb_ep_enable failed eptype:IN ep:%pK\000"
	.space	3
.LC922:
	.ascii	"<3>%s: usb_ep_enable failed eptype:OUT ep:%pK\000"
	.space	2
.LC923:
	.ascii	"acm%u\000"
	.space	2
.LC924:
	.ascii	"adding '%s'/%pK to config '%s'/%pK\012\000"
.LC925:
	.ascii	"adding '%s'/%pK --> %d\012\000"
.LC926:
	.ascii	"<3>%s: Could not bind acm%u config\012\000"
.LC927:
	.ascii	"%s: p:%pK#%d d:%pK skb_len:%d\012\000"
	.space	1
.LC928:
	.ascii	"<3>%s: tx pkt dropped: tx_drop_cnt:%u\012\000"
	.space	1
.LC929:
	.ascii	"%s: port:%pK d:%pK tom:%lu pbam:%u, pno:%d\012\000"
.LC930:
	.ascii	"%s: port:%pK port#%d event:%08x\012\000"
	.space	3
.LC931:
	.ascii	"Unable to open control smd channel: %d\012\000"
.LC932:
	.ascii	"pdrv %s register failed %d\012\000"
.LC933:
	.ascii	"Unable to open data smd channel\012\000"
	.space	3
.LC934:
	.ascii	"bulk reset request\012\000"
.LC935:
	.ascii	"<3>usb: %s MAC host is always disabled \012\000"
	.space	3
.LC936:
	.ascii	"<6>usb: %s ignore!! usb30en(%d), value(%d)\012\000"
.LC937:
	.ascii	"<7>usb: %s B4 disconectng gadget\012\000"
	.space	2
.LC938:
	.ascii	"<7>usb: %s after usb_gadget_connect\012\000"
	.space	3
.LC939:
	.ascii	"<3>usb: %s Failed to set the usb30_en value\012\000"
	.space	3
.LC940:
	.ascii	"%s: %u %u\012\000"
	.space	1
.LC941:
	.ascii	"Config SS device in SS\012\000"
.LC942:
	.ascii	"Config SS device in HS\012\000"
.LC943:
	.ascii	"Config HS device with LPM(L1)\012\000"
	.space	1
.LC944:
	.ascii	"<7>usb: GET_DES\012\000"
	.space	3
.LC945:
	.ascii	"<7>usb: %s failed to change configuration\012\000"
	.space	1
.LC946:
	.ascii	"already in the same config with value %d\012\000"
	.space	2
.LC947:
	.ascii	"%s config #%d: %s\012\000"
	.space	1
.LC948:
	.ascii	"battery\000"
.LC949:
	.ascii	"<3>%s(): No SS desc for function:%s\012\000"
	.space	3
.LC950:
	.ascii	"<3>%s: fail to get %s psy\012\000"
	.space	1
.LC951:
	.ascii	"interface %d (%s/%pK) alt 0 --> %d\012\000"
.LC952:
	.ascii	"%s: interface %d (%s) requested delayed status\012\000"
.LC953:
	.ascii	"delayed_status count %d\012\000"
	.space	3
.LC954:
	.ascii	"<7>usb: SET_CON\012\000"
	.space	3
.LC955:
	.ascii	"<6>%s sec_qcom_usb_rdrv = %d, disable\012\000"
	.space	1
.LC956:
	.ascii	"<6>Redriver OFF in Mac OS\012\000"
	.space	1
.LC957:
	.ascii	"func_suspend() returned error %d\012\000"
	.space	2
.LC958:
	.ascii	"ep_queue --> %d\012\000"
	.space	3
.LC959:
	.ascii	"%s: Delayed status not supported for w_length != 0\000"
	.space	1
.LC960:
	.ascii	"unconfigured\000"
	.space	3
.LC961:
	.ascii	"g_serial\000"
	.space	3
.LC962:
	.ascii	"ttyGS\000"
	.space	2
.LC963:
	.ascii	"k_gserial\000"
	.space	2
.LC964:
	.ascii	"&ports[i].lock\000"
	.space	1
.LC965:
	.ascii	"&port->close_wait\000"
	.space	2
.LC966:
	.ascii	"&port->drain_wait\000"
	.space	2
.LC967:
	.ascii	"<3>%s: cannot register, err %d\012\000"
.LC968:
	.ascii	"<4>%s: no classdev for port %d, err %ld\012\000"
	.space	3
.LC969:
	.ascii	"usb_serial%d\000"
	.space	3
.LC970:
	.ascii	"readstatus\000"
	.space	1
.LC971:
	.ascii	"reset\000"
	.space	2
.LC972:
	.ascii	"%s: registered %d ttyGS* device%s\012\000"
	.space	1
.LC973:
	.ascii	"s\000"
	.space	2
.LC974:
	.ascii	"<3>%s() failed to queue req %pK (%d)\012\000"
	.space	2
.LC975:
	.ascii	"<6>conn_gadget_open\012\000"
	.space	3
.LC976:
	.ascii	"<3>%s() handle closing now. open again\012\000"
.LC977:
	.ascii	"<3>%s() conn_gadget_lock(open_excl) f\012\000"
	.space	1
.LC978:
	.ascii	"<3>%s() count is too large (%d)\012\000"
	.space	3
.LC979:
	.ascii	"<3>%s() conn_gadget_lock(read_excl) f\012\000"
	.space	1
.LC980:
	.ascii	"<3>%s() waiting for online state\012\000"
	.space	2
.LC981:
	.ascii	"<3>%s() dev->error has value\012\000"
	.space	2
.LC982:
	.ascii	"<3>%s() zero queue\012\000"
.LC983:
	.ascii	"<3>%s() kfifo_to_user f %d\012\000"
.LC984:
	.ascii	"<3>%s() wait_event_interruptible f %d\012\000"
	.space	1
.LC985:
	.ascii	"<6>read descriptors\012\000"
	.space	3
.LC986:
	.ascii	"<6>read strings\012\000"
	.space	3
.LC987:
	.ascii	"&epfile->mutex\000"
	.space	1
.LC988:
	.ascii	"&epfile->wait\000"
	.space	2
.LC989:
	.ascii	"ep%u\000"
	.space	3
.LC990:
	.ascii	"%s: start adbd only in ADB composition\012\000"
.LC991:
	.ascii	"<3>%s: adb_closed_callback: config->dev is NULL\000"
.LC992:
	.ascii	"<6>%s(): freeing\012\000"
	.space	2
.LC993:
	.ascii	"<3>%s: usb cable is not connected\012\000"
	.space	1
.LC994:
	.ascii	"<3>%s: given_xport:%s cur_xport:%s doing nothing\012"
	.ascii	"\000"
	.space	2
.LC995:
	.ascii	"usb_rmnet_mux: TransportRequested: %s\012\000"
	.space	1
.LC996:
	.ascii	"%s: undefined xport, do nothing\012\000"
	.space	3
.LC997:
	.ascii	"%s: USB not connected\012\000"
	.space	1
.LC998:
	.ascii	"<3>%s: undefined transport\012\000"
.LC999:
	.ascii	"ccid_bulk_read(%d)\012\000"
.LC1000:
	.ascii	"<3>%s: max_buffer_size:%d given_pkt_size:%d\012\000"
	.space	3
.LC1001:
	.ascii	"<3>%s bulk_dev_error\012\000"
	.space	2
.LC1002:
	.ascii	"<3>%s usb ep queue failed\012\000"
	.space	1
.LC1003:
	.ascii	"ccid_bulk_read returning %d\012\000"
	.space	3
.LC1004:
	.ascii	"<1>DUN : DTR %d\012\000"
	.space	3
.LC1005:
	.ascii	"<6>modem_ioctl: Unknown ioctl cmd(0x%x).\012\000"
	.space	2
.LC1006:
	.ascii	"mtp_send_event(%d)\012\000"
.LC1007:
	.ascii	"ioctl returning %d\012\000"
.LC1008:
	.ascii	"<6>adb_bind_config\012\000"
.LC1009:
	.ascii	"adb\000"
.LC1010:
	.ascii	"ccid_bind_config\012\000"
	.space	2
.LC1011:
	.ascii	"ccid\000"
	.space	3
.LC1012:
	.ascii	"rmnet_smd_sdio_function_add\012\000"
	.space	3
.LC1013:
	.ascii	"rmnet_smd_sdio\000"
	.space	1
.LC1014:
	.ascii	"<6>acc_bind_config\012\000"
.LC1015:
	.ascii	"accessory\000"
	.space	2
.LC1016:
	.ascii	"<6>mtp_bind_config\012\000"
.LC1017:
	.ascii	"mtp\000"
.LC1018:
	.ascii	"<3>%s(#) call conn_gadget_bind_config\012\000"
	.space	1
.LC1019:
	.ascii	"<6>conn_gadget_bind_config\012\000"
.LC1020:
	.ascii	"Function FS Gadget\000"
	.space	1
.LC1021:
	.ascii	"%s: %s: mbim transport is %s\000"
	.space	3
.LC1022:
	.ascii	"<6>%s: port number %u\000"
	.space	2
.LC1023:
	.ascii	"<3>%s: Can not add port %u. Max ports = %d\000"
	.space	1
.LC1024:
	.ascii	"<6>%s: no_ports:%d\012\000"
.LC1025:
	.ascii	"%s: requested %d BAM2BAM ports\000"
	.space	1
.LC1026:
	.ascii	"<3>%s: Invalid num of ports count:%d\012\000"
	.space	2
.LC1027:
	.ascii	"%s: bam_data is already setup\000"
	.space	2
.LC1028:
	.ascii	"<3>%s: bam_data_setup failed err: %d\012\000"
	.space	2
.LC1029:
	.ascii	"<3>%s: bam setup failed\000"
.LC1030:
	.ascii	"<6>%s: mbim struct not allocated\000"
	.space	3
.LC1031:
	.ascii	"usb_mbim\000"
	.space	3
.LC1032:
	.ascii	"<6>%s: Exit status %d\000"
	.space	2
.LC1033:
	.ascii	"Mass Storage Function\000"
	.space	2
.LC1034:
	.ascii	"/home/Jprimero15/hlte/lolz/include/linux/kref.h\000"
.LC1035:
	.ascii	"k_rmnet_work\000"
	.space	3
.LC1036:
	.ascii	"rmnet_sdio\000"
	.space	1
.LC1037:
	.ascii	"usb_rmnet_sdio\000"
	.space	1
.LC1038:
	.ascii	"ccid_bulk_write(%d)\012\000"
	.space	3
.LC1039:
	.ascii	"<3> %s dev->error\012\000"
	.space	1
.LC1040:
	.ascii	"ccid_bulk_write: xfer error %d\012\000"
.LC1041:
	.ascii	"ccid_bulk_write returning %d\012\000"
	.space	2
.LC1042:
	.ascii	"<3>%s: mbim dev is null\012\000"
	.space	3
.LC1043:
	.ascii	"<3>%s: mbim command error %d\012\000"
	.space	2
.LC1044:
	.ascii	"rmnet_mux command error %d\012\000"
.LC1045:
	.ascii	"unable to allocate memory for ctrl req\012\000"
.LC1046:
	.ascii	"<3>%s: ctrl pkts dropped: cpkts_drp_cnt: %lu\012\000"
	.space	2
.LC1047:
	.ascii	"%s setup response queue error\012\000"
	.space	1
.LC1048:
	.ascii	"<3>%s: Invalid grmnet/buf, grmnet:%pK buf:%pK\012\000"
	.space	1
.LC1049:
	.ascii	"%s:dev:%pK portno#%d\012\000"
	.space	2
.LC1050:
	.ascii	"<3>%s: Failed to init audio streams: err %d\000"
.LC1051:
	.ascii	"%s: frames = %d, count = %d\000"
.LC1052:
	.ascii	"<3>%s: Capture error: %d\012\000"
	.space	2
.LC1053:
	.ascii	"%s: Queue capture packet: size %d\000"
	.space	2
.LC1054:
	.ascii	"<3>%s: given pkt size too big:%d > max_pkt_size:%d\012"
	.ascii	"\000"
.LC1055:
	.ascii	"<3>%s: Previous writing not finished yet\012\000"
	.space	2
.LC1056:
	.ascii	"%s: dev:%pK port_num#%d\012\000"
	.space	3
.LC1057:
	.ascii	"<3>%s: dev:%pK is not connected\012\000"
	.space	3
.LC1058:
	.ascii	"<3>%s: dev:%pK state=%d, recover!!\012\000"
.LC1059:
	.ascii	"%s: dev:%pK portno#%d\012\000"
	.space	1
.LC1060:
	.ascii	"<3>%s: dev:%pK is not online\012\000"
	.space	2
.LC1061:
	.ascii	"<3>%s: dev:%pK req is NULL\012\000"
.LC1062:
	.ascii	"<3>%s: dev:%pK req->buf is NULL\012\000"
	.space	3
.LC1063:
	.ascii	"%s: delay ep_queue: notifications queue is busy[%d]"
	.ascii	"\000"
.LC1064:
	.ascii	"<3>%s: ep enqueue error %d\012\000"
.LC1065:
	.ascii	"%s: Successful Exit\000"
.LC1066:
	.ascii	"ep-e\000"
	.space	3
.LC1067:
	.ascii	"ep-f\000"
	.space	3
.LC1068:
	.ascii	"ep3-bulk\000"
	.space	3
.LC1069:
	.ascii	"ep2-bulk\000"
	.space	3
.LC1070:
	.ascii	"dual\000"
	.space	3
.LC1071:
	.ascii	"full\000"
	.space	3
.LC1072:
	.ascii	"CDC Ethernet: %s speed IN/%s OUT/%s NOTIFY/%s\012\000"
	.space	1
.LC1073:
	.ascii	"<3>%s: %s: can't bind, err %d\012\000"
	.space	1
.LC1074:
	.ascii	"<3>%s: usb epin autoconfig failed\012\000"
	.space	1
.LC1075:
	.ascii	"<6>%s: usb epin autoconfig succeeded\012\000"
	.space	2
.LC1076:
	.ascii	"<3>%s: usb epout autoconfig failed\012\000"
.LC1077:
	.ascii	"<6>%s: usb epout autoconfig succeeded\012\000"
	.space	1
.LC1078:
	.ascii	"<3>%s: usb notify ep autoconfig failed\012\000"
.LC1079:
	.ascii	"<6>%s: usb notify ep autoconfig succeeded\012\000"
	.space	1
.LC1080:
	.ascii	"<6>%s: allocated notify ep request & request buffer"
	.ascii	"\012\000"
	.space	3
.LC1081:
	.ascii	"<6>%s: failed to allocate notify request\012\000"
	.space	2
.LC1082:
	.ascii	"%s: MBIM in configuration %d\000"
	.space	3
.LC1083:
	.ascii	"<6>%s: mbim(%d): %s speed IN/%s OUT/%s NOTIFY/%s\012"
	.ascii	"\000"
	.space	2
.LC1084:
	.ascii	"<3>%s: %s failed to bind, err %d\012\000"
	.space	2
.LC1085:
	.ascii	"super\000"
	.space	2
.LC1086:
	.ascii	"%s: can't bind, err %d\012\000"
.LC1087:
	.ascii	"%s: Return %d\000"
	.space	2
.LC1088:
	.ascii	"<3>%s: %s: failed to allocate desc interface\000"
	.space	3
.LC1089:
	.ascii	"<3>%s: %s: failed to allocate alt interface\000"
.LC1090:
	.ascii	"<3>%s: %s: failed to autoconfig in endpoint\000"
.LC1091:
	.ascii	"<3>%s: %s: failed to autoconfig out endpoint\000"
	.space	3
.LC1092:
	.ascii	"CDC Network: %s speed IN/%s OUT/%s NOTIFY/%s\012\000"
	.space	2
.LC1093:
	.ascii	"unable to autoconfigure all endpoints\012\000"
	.space	1
.LC1094:
	.ascii	"<3>%s: unable to allocate ifc id, err:%d\000"
	.space	3
.LC1095:
	.ascii	"<3>%s: usb epnotify autoconfig failed\012\000"
	.space	1
.LC1096:
	.ascii	"%s: CCID %s Speed, IN:%s OUT:%s\012\000"
	.space	3
.LC1097:
	.ascii	"qdss_bind\012\000"
	.space	1
.LC1098:
	.ascii	"<3>qdss_bind: full-speed is not supported\012\000"
	.space	1
.LC1099:
	.ascii	"<3>interface allocation error\012\000"
	.space	1
.LC1100:
	.ascii	"<3>ep_autoconfig error\012\000"
.LC1101:
	.ascii	"<3>usb_copy_descriptors error\012\000"
	.space	1
.LC1102:
	.ascii	"<3>%s: unable to allocate memory for notify req\012"
	.ascii	"\000"
	.space	3
.LC1103:
	.ascii	"<6>%s: RmNet(%d) %s Speed, IN:%s OUT:%s\012\000"
	.space	3
.LC1104:
	.ascii	"acm ttyGS%d: %s speed IN/%s OUT/%s NOTIFY/%s\012\000"
	.space	2
.LC1105:
	.ascii	"<6>DUN register failed. data is null.\012\000"
	.space	1
.LC1106:
	.ascii	"<6>DUN is registerd\012\000"
	.space	3
.LC1107:
	.ascii	"%s/%pK: can't bind, err %d\012\000"
.LC1108:
	.ascii	"%s: configNr = %d\012\000"
	.space	1
.LC1109:
	.ascii	"failed\012\000"
.LC1110:
	.ascii	"RNDIS: %s speed IN/%s OUT/%s NOTIFY/%s\012\000"
.LC1111:
	.ascii	"<3>conn_gadget_function_bind dev: %pK\012\000"
	.space	1
.LC1112:
	.ascii	"%s: create_bulk_endpoints dev: %pK\012\000"
.LC1113:
	.ascii	"<3>usb_ep_autoconfig for ep_in failed\012\000"
	.space	1
.LC1114:
	.ascii	"%s: usb_ep_autoconfig for ep_in got %s\012\000"
.LC1115:
	.ascii	"<3>usb_ep_autoconfig for ep_out failed\012\000"
.LC1116:
	.ascii	"%s: usb_ep_autoconfig for conn_gadget ep_out got %s"
	.ascii	"\012\000"
	.space	3
.LC1117:
	.ascii	"<3>%s() conn_gadget_bind() could not allocate reque"
	.ascii	"sts\012\000"
.LC1118:
	.ascii	"<3>%s speed %s: IN/%s, OUT/%s\012\000"
	.space	1
.LC1119:
	.ascii	"acc_function_bind dev: %pK\012\000"
.LC1120:
	.ascii	"android\000"
.LC1121:
	.ascii	"create_bulk_endpoints dev: %pK\012\000"
.LC1122:
	.ascii	"usb_ep_autoconfig for ep_in failed\012\000"
.LC1123:
	.ascii	"usb_ep_autoconfig for ep_in got %s\012\000"
.LC1124:
	.ascii	"usb_ep_autoconfig for ep_out failed\012\000"
	.space	3
.LC1125:
	.ascii	"usb_ep_autoconfig for ep_out got %s\012\000"
	.space	3
.LC1126:
	.ascii	"<3>acc_bind() could not allocate requests\012\000"
	.space	1
.LC1127:
	.ascii	"%s speed %s: IN/%s, OUT/%s\012\000"
.LC1128:
	.ascii	"mtp_function_bind dev: %pK\012\000"
.LC1129:
	.ascii	"usb_ep_autoconfig for mtp ep_out got %s\012\000"
	.space	3
.LC1130:
	.ascii	"usb_ep_autoconfig for ep_intr failed\012\000"
	.space	2
.LC1131:
	.ascii	"usb_ep_autoconfig for mtp ep_intr got %s\012\000"
	.space	2
.LC1132:
	.ascii	"<3>mtp_bind() could not allocate requests\012\000"
	.space	1
.LC1133:
	.ascii	"adb_function_bind dev: %pK\012\000"
.LC1134:
	.ascii	"usb_ep_autoconfig for adb ep_out got %s\012\000"
	.space	3
.LC1135:
	.ascii	"<3>adb_bind() could not allocate requests\012\000"
	.space	1
.LC1136:
	.ascii	"entity DESCRIPTOR(%02lx); ret = %d\012\000"
.LC1137:
	.ascii	"entity INTERFACE(%02x); ret = %d\012\000"
	.space	2
.LC1138:
	.ascii	"ep0 bMaxBurst must be 0\012\000"
	.space	3
.LC1139:
	.ascii	"can't enable %s, result %d\012\000"
.LC1140:
	.ascii	"config_ep_by_speed failed for ep %s, result %d\012\000"
.LC1141:
	.ascii	"config_ep_by_speed failes for ep %s, result %d\012\000"
.LC1142:
	.ascii	"<3>%s: unable to allocate memory for notify ep\012\000"
.LC1143:
	.ascii	"audio_set_alt intf %d, alt %d\012\000"
	.space	1
.LC1144:
	.ascii	"config_ep fail ep %s, result %d\012\000"
	.space	3
.LC1145:
	.ascii	"failedto enable ep%s, result %d\012\000"
	.space	3
.LC1146:
	.ascii	"acc_function_set_alt intf: %d alt: %d\012\000"
	.space	1
.LC1147:
	.ascii	"failed to enable ep %s, result %d\012\000"
	.space	1
.LC1148:
	.ascii	"mtp_function_set_alt intf: %d alt: %d\012\000"
	.space	1
.LC1149:
	.ascii	"<3>%s: unable to allocate memory for out req\012\000"
	.space	2
.LC1150:
	.ascii	"<3>%s: unable to allocate memory for in req\012\000"
	.space	3
.LC1151:
	.ascii	"<3>%s: config_ep_by_speed failed for ep#%s, err#%d\012"
	.ascii	"\000"
.LC1152:
	.ascii	"<3>%s: usb ep#%s enable failed, err#%d\012\000"
.LC1153:
	.ascii	"adb_function_set_alt intf: %d alt: %d\012\000"
	.space	1
.LC1154:
	.ascii	"qdss_set_alt\012\000"
	.space	2
.LC1155:
	.ascii	"<3>qdss_st_alt: qdss supportes HS or SS only\012\000"
	.space	2
.LC1156:
	.ascii	"<3>qdss_set_alt failed\012\000"
.LC1157:
	.ascii	"<3>%s: intf: %d alt: %d\012\000"
	.space	3
.LC1158:
	.ascii	"<3>%s() kfifo_reset\012\000"
	.space	3
.LC1159:
	.ascii	"can't configure %s: %d\012\000"
.LC1160:
	.ascii	"can't start %s: %d\012\000"
.LC1161:
	.ascii	"%s queue req: %d\012\000"
	.space	2
.LC1162:
	.ascii	"gmidi function\000"
	.space	1
.LC1163:
	.ascii	"qdss_bind_config\012\000"
	.space	2
.LC1164:
	.ascii	"qdss\000"
	.space	3
.LC1165:
	.ascii	"qdss_bind_config allocating channel\012\000"
	.space	3
.LC1166:
	.ascii	"<3>qdss_bind_config: allocating channel failed\012\000"
.LC1167:
	.ascii	"<3>qdss usb_add_function failed\012\000"
	.space	3
.LC1168:
	.ascii	"<3>%s: qdss: Cannot open channel qdss\000"
	.space	2
.LC1169:
	.ascii	"USB audio source\000"
	.space	3
.LC1170:
	.ascii	"USB gadget audio\000"
	.space	3
.LC1171:
	.ascii	"audio_source\000"
	.space	3
.LC1172:
	.ascii	"USB accessory audio source\000"
	.space	1
.LC1173:
	.ascii	"&dev->smd_ctl.wait\000"
	.space	1
.LC1174:
	.ascii	"&dev->smd_data.wait\000"
.LC1175:
	.ascii	"rmnet\000"
	.space	2
.LC1176:
	.ascii	"usb_rmnet_smd\000"
	.space	2
.LC1177:
	.ascii	"<3>%s: %s: rndis_pdata\012\000"
.LC1178:
	.ascii	"<6>%s: %s MAC: %02X:%02X:%02X:%02X:%02X:%02X\012\000"
	.space	2
.LC1179:
	.ascii	"rndis\000"
	.space	2
.LC1180:
	.ascii	"%s%%d\000"
	.space	2
.LC1181:
	.ascii	"self\000"
	.space	3
.LC1182:
	.ascii	"using random %s ethernet address\012\000"
	.space	2
.LC1183:
	.ascii	"<7>usb: set unique host mac\012\000"
	.space	3
.LC1184:
	.ascii	"register_netdev failed, %d\012\000"
.LC1185:
	.ascii	"<6>%s: MAC %pM\012\000"
.LC1186:
	.ascii	"<6>%s: HOST MAC %pM\012\000"
	.space	3
.LC1187:
	.ascii	"<3>%s: %s: gether_setup failed\012\000"
.LC1188:
	.ascii	"composite\000"
	.space	2
.LC1189:
	.ascii	"device tree enabled\012\000"
	.space	3
.LC1190:
	.ascii	"<3>%s: unable to allocate platform data\012\000"
	.space	3
.LC1191:
	.ascii	"qcom,android-usb-swfi-latency\000"
	.space	2
.LC1192:
	.ascii	"qcom,android-usb-cdrom\000"
	.space	1
.LC1193:
	.ascii	"qcom,android-usb-internal-ums\000"
	.space	2
.LC1194:
	.ascii	"qcom,streaming-func\000"
.LC1195:
	.ascii	"<3>%s: Invalid number of functions used.\012\000"
	.space	2
.LC1196:
	.ascii	"%s: name of streaming function:%s\012\000"
	.space	1
.LC1197:
	.ascii	"android_usb\000"
.LC1198:
	.ascii	"<3>%s: %s(): Failed to alloc memory for android_dev"
	.ascii	"\012\000"
	.space	3
.LC1199:
	.ascii	"&android_dev->mutex\000"
.LC1200:
	.ascii	"ioremap failed\012\000"
.LC1201:
	.ascii	"failed to get mem resource\012\000"
.LC1202:
	.ascii	"android%d\000"
	.space	2
.LC1203:
	.ascii	"<3>%s: %s(): android_create_device failed\012\000"
	.space	1
.LC1204:
	.ascii	"<7>usb: %s error pdev(%pK)\012\000"
.LC1205:
	.ascii	"<7>usb: %s failed to create attr\012\000"
	.space	2
.LC1206:
	.ascii	"<3>usb: %s To create terminal_atttrr is failed\012\000"
.LC1207:
	.ascii	"<3>%s: %s(): Failed to register android composite d"
	.ascii	"river\012\000"
	.space	2
.LC1208:
	.ascii	"high\000"
	.space	3
.LC1209:
	.ascii	"<3>DUN register is failed, ret = %d\012\000"
	.space	3
.LC1210:
	.ascii	"<3>usb: %s modem misc register is failed\012\000"
	.space	2
.LC1211:
	.ascii	"&modem_wait_q\000"
	.space	2
.LC1212:
	.ascii	"%s: Unexpected call\012\000"
	.space	3
.LC1213:
	.ascii	"%s: Completing delayed status\012\000"
	.space	1
.LC1214:
	.ascii	"Main thread exiting on signal\012\000"
	.space	1
.LC1215:
	.ascii	"bulk-out\000"
	.space	3
.LC1216:
	.ascii	"invalid CBW: len %u sig 0x%x\012\000"
	.space	2
.LC1217:
	.ascii	"bulk-in set wedge\012\000"
	.space	1
.LC1218:
	.ascii	"usb_ep_set_wedge -> %d\012\000"
.LC1219:
	.ascii	"non-meaningful CBW: lun = %u, flags = 0x%x, cmdlen "
	.ascii	"%u\012\000"
	.space	1
.LC1220:
	.ascii	"INQUIRY\000"
.LC1221:
	.ascii	" Card\000"
	.space	2
.LC1222:
	.ascii	"MODE SELECT(6)\000"
	.space	1
.LC1223:
	.ascii	"MODE SELECT(10)\000"
.LC1224:
	.ascii	"MODE SENSE(6)\000"
	.space	2
.LC1225:
	.ascii	"MODE SENSE(10)\000"
	.space	1
.LC1226:
	.ascii	"PREVENT-ALLOW MEDIUM REMOVAL\000"
	.space	3
.LC1227:
	.ascii	"READ(6)\000"
.LC1228:
	.ascii	"READ(10)\000"
	.space	3
.LC1229:
	.ascii	"READ(12)\000"
	.space	3
.LC1230:
	.ascii	"READ CAPACITY\000"
	.space	2
.LC1231:
	.ascii	"READ HEADER\000"
.LC1232:
	.ascii	"READ TOC\000"
	.space	3
.LC1233:
	.ascii	"READ FORMAT CAPACITIES\000"
	.space	1
.LC1234:
	.ascii	"REQUEST SENSE\000"
	.space	2
.LC1235:
	.ascii	"START-STOP UNIT\000"
.LC1236:
	.ascii	"Load AT\000"
.LC1237:
	.ascii	"unload attempt prevented\012\000"
	.space	2
.LC1238:
	.ascii	"Load User\000"
	.space	2
.LC1239:
	.ascii	"SYNCHRONIZE CACHE\000"
	.space	2
.LC1240:
	.ascii	"TEST UNIT READY\000"
.LC1241:
	.ascii	"VERIFY\000"
	.space	1
.LC1242:
	.ascii	"error in file verify: %d\012\000"
	.space	2
.LC1243:
	.ascii	"partial file verify: %d/%u\012\000"
.LC1244:
	.ascii	"WRITE(6)\000"
	.space	3
.LC1245:
	.ascii	"WRITE(10)\000"
	.space	2
.LC1246:
	.ascii	"WRITE(12)\000"
	.space	2
.LC1247:
	.ascii	"<6>%s called\012\000"
	.space	2
.LC1248:
	.ascii	"time stop\000"
	.space	2
.LC1249:
	.ascii	"time reset\000"
	.space	1
.LC1250:
	.ascii	"READ CD\000"
.LC1251:
	.ascii	"usb: %s : common->version_string[%d]=%s\015\012\000"
	.space	2
.LC1252:
	.ascii	"Unknown x%02x\000"
	.space	2
.LC1253:
	.ascii	"%s: no requests available\012\000"
	.space	1
.LC1254:
	.ascii	"%s: cannot queue read request\012\000"
	.space	1
.LC1255:
	.ascii	"diag_function_add\012\000"
	.space	1
.LC1256:
	.ascii	"usb_add_function failed\012\000"
	.space	3
.LC1257:
	.ascii	"unable to get diag usb channel\012\000"
.LC1258:
	.ascii	"<3>%s: diag: Cannot open channel '%s'\000"
	.space	2
.LC1259:
	.ascii	"send_sps_req\012\000"
	.space	2
.LC1260:
	.ascii	"<3>usb_ep_alloc_request failed\012\000"
.LC1261:
	.ascii	"<3>send_sps_req: usb_ep_queue error\012\000"
	.space	3
.LC1262:
	.ascii	"usb_qdss_connect_work\012\000"
	.space	1
.LC1263:
	.ascii	"init_data\012\000"
	.space	1
.LC1264:
	.ascii	"<3>msm_ep_config failed\012\000"
	.space	3
.LC1265:
	.ascii	"<3>init_data error\000"
	.space	1
.LC1266:
	.ascii	"QDSS is used with non DWC3 core\012\000"
	.space	3
.LC1267:
	.ascii	"<3>qdss_data_connection: memory alloc failed\012\000"
	.space	2
.LC1268:
	.ascii	"<3>set_qdss_data_connection error\000"
	.space	2
.LC1269:
	.ascii	"<3>send_sps_req error\012\000"
	.space	1
.LC1270:
	.ascii	"usb_qdss_free_req\012\000"
	.space	1
.LC1271:
	.ascii	"<3>usb_qdss_free_req: qdss ctx is NULL\012\000"
.LC1272:
	.ascii	"usb_qdss_alloc_req\012\000"
.LC1273:
	.ascii	"<3>usb_qdss_alloc_req: missing params\012\000"
	.space	1
.LC1274:
	.ascii	"<3>usb_qdss_alloc_req: ctrl_in allocation err\012\000"
	.space	1
.LC1275:
	.ascii	"<3>usb_qdss_alloc_req:ctrl_out allocation err\012\000"
	.space	1
.LC1276:
	.ascii	"usb_qdss_ctrl_read\012\000"
.LC1277:
	.ascii	"<3>error: usb_qdss_ctrl_read list is empty\012\000"
.LC1278:
	.ascii	"<3>qdss usb_ep_queue failed\012\000"
	.space	3
.LC1279:
	.ascii	"usb_qdss_ctrl_write\012\000"
	.space	3
.LC1280:
	.ascii	"<3>error: usb_qdss_ctrl_write list is empty\012\000"
	.space	3
.LC1281:
	.ascii	"usb_qdss_open\012\000"
	.space	1
.LC1282:
	.ascii	"<3>usb_qdss_open: notification func is missing\012\000"
.LC1283:
	.ascii	"usb_qdss_open: allocation qdss ctx\012\000"
.LC1284:
	.ascii	"usb_qdss_open: qdss ctx found\012\000"
	.space	1
.LC1285:
	.ascii	"usb_qdss_close\012\000"
.LC1286:
	.ascii	"<3>usb:[%s] port_usb or port_tty is NULL!! started("
	.ascii	"%d)\012\000"
.LC1287:
	.ascii	"gs_open: ttyGS%d (%pK,%pK) no buffer\012\000"
	.space	2
.LC1288:
	.ascii	"gs_open: start ttyGS%d\012\000"
.LC1289:
	.ascii	"gs_open: ttyGS%d (%pK,%pK)\012\000"
.LC1290:
	.ascii	"gserial_connect: start ttyGS%d\012\000"
.LC1291:
	.ascii	"acm ttyGS%d deactivated\012\000"
	.space	3
.LC1292:
	.ascii	"reset acm ttyGS%d\012\000"
	.space	1
.LC1293:
	.ascii	"activate acm ttyGS%d\012\000"
	.space	2
.LC1294:
	.ascii	"%s: Event data\012\000"
.LC1295:
	.ascii	"%s: Event Open\012\000"
.LC1296:
	.ascii	"%s: port: %pK\012\000"
	.space	1
.LC1297:
	.ascii	"<3>%s: unable to allocate out requests\012\000"
.LC1298:
	.ascii	"<3>%s: unable to allocate IN requests\012\000"
	.space	1
.LC1299:
	.ascii	"%s: Event Close\012\000"
	.space	3
.LC1300:
	.ascii	"%s: sdio is not open\012\000"
	.space	2
.LC1301:
	.ascii	"%s: port:%pK port#%d read_queue:%pK\000"
.LC1302:
	.ascii	"%s: usb cable is disconencted\012\000"
	.space	1
.LC1303:
	.ascii	"%s: req status shutdown portno#%d port:%pK\000"
	.space	1
.LC1304:
	.ascii	"<3>%s: sio channel is not open\012\000"
.LC1305:
	.ascii	"<3>%s: usb request is null port#%d\012\000"
.LC1306:
	.ascii	"%s: port:%pK port#%d req:%pK actual:%d n_read:%d\012"
	.ascii	"\000"
	.space	2
.LC1307:
	.ascii	"%s: SDIO IO is not supported\012\000"
	.space	2
.LC1308:
	.ascii	"%s: sdio_write_avail:%d\000"
.LC1309:
	.ascii	"%s: req->actual is already zero,update bytes read\012"
	.ascii	"\000"
	.space	1
.LC1310:
	.ascii	"<3>%s: port#%d sdio write failed err:%d\000"
.LC1311:
	.ascii	"%s: flushed out %d bytes\012\000"
	.space	2
.LC1312:
	.ascii	"<3>%s: usb disconnected\012\000"
	.space	3
.LC1313:
	.ascii	"%s: SDIO channel is not open\012\000"
	.space	2
.LC1314:
	.ascii	"<3>%s: port:%pK port#%d sdio read failed err:%d\000"
.LC1315:
	.ascii	"<3>%s: unable to allocate out reqs\012\000"
.LC1316:
	.ascii	"<3>%s: unable to allocate in reqs\012\000"
	.space	1
.LC1317:
	.ascii	"READ AVAIL\000"
	.space	1
.LC1318:
	.ascii	"WRITE_AVAIL\000"
.LC1319:
	.ascii	"%s: port:%pK port#%d event:%s\012\000"
	.space	1
.LC1320:
	.ascii	"<3>%s: port allocation failed\012\000"
	.space	1
.LC1321:
	.ascii	"%s: port:%pK port#%d sdio_name: %s\012\000"
.LC1322:
	.ascii	"<3>%s: failed to enable in ep w/ err:%d\012\000"
	.space	3
.LC1323:
	.ascii	"%s: sdio is already open, start io\012\000"
.LC1324:
	.ascii	"%s: gadget:(%pK) count:%d\012\000"
	.space	1
.LC1325:
	.ascii	"<3>%s: invalid number of ports count:%d max_ports:%"
	.ascii	"d\012\000"
	.space	2
.LC1326:
	.ascii	"<3>%s: unable to create workqueue gsdio_wq\012\000"
.LC1327:
	.ascii	"&sdio_ports[i].lock\000"
.LC1328:
	.ascii	"<3>%s: sdio logical port allocation failed\012\000"
.LC1329:
	.ascii	"usb_gsdio\000"
	.space	2
.LC1330:
	.ascii	"%s: gserial:%pK portno:%u\012\000"
	.space	1
.LC1331:
	.ascii	"<3>%s: Invalid port no#%d\000"
	.space	2
.LC1332:
	.ascii	"%s: g:%pK count: %d\012\000"
	.space	3
.LC1333:
	.ascii	"<3>%s: Invalid num of ports count:%d gadget:%pK\012"
	.ascii	"\000"
	.space	3
.LC1334:
	.ascii	"k_gsmd\000"
	.space	1
.LC1335:
	.ascii	"<3>%s: Unable to create workqueue gsmd_wq\012\000"
	.space	1
.LC1336:
	.ascii	"&smd_ports[i].lock\000"
	.space	1
.LC1337:
	.ascii	"<3>%s: Unable to alloc port:%d\012\000"
.LC1338:
	.ascii	"usb_gsmd\000"
	.space	3
.LC1339:
	.ascii	"%s: grmnet:%pK port#%d\012\000"
.LC1340:
	.ascii	"<3>%s: invalid bam portno#%d\012\000"
	.space	2
.LC1341:
	.ascii	"<3>%s: grmnet port is null\012\000"
.LC1342:
	.ascii	"<3>%s: usb_bam_client_ready failed\012\000"
.LC1343:
	.ascii	"%s: requested BAM ports:%d and BAM2BAM ports:%d\012"
	.ascii	"\000"
	.space	3
.LC1344:
	.ascii	"<3>%s: Invalid num of ports count:%d,%d\012\000"
	.space	3
.LC1345:
	.ascii	"k_gbam\000"
	.space	1
.LC1346:
	.ascii	"<3>%s: Unable to create workqueue gbam_wq\012\000"
	.space	1
.LC1347:
	.ascii	"usb_rmnet\000"
	.space	2
.LC1348:
	.ascii	"<3>%s: Invalid port_num#%d\012\000"
.LC1349:
	.ascii	"%s: requested ports:%d\012\000"
.LC1350:
	.ascii	"<3>%s: Invalid client:%d\012\000"
	.space	2
.LC1351:
	.ascii	"gsmd_ctrl\000"
	.space	2
.LC1352:
	.ascii	"<3>%s: Unable to create workqueue grmnet_ctrl\012\000"
	.space	1
.LC1353:
	.ascii	"&c->wait\000"
	.space	3
.LC1354:
	.ascii	"&c->smd_wait_q\000"
	.space	1
.LC1355:
	.ascii	"%s: grmnet:%pK\012\000"
.LC1356:
	.ascii	"<3>%s: setting xport name for invalid port num %d\012"
	.ascii	"\000"
	.space	1
.LC1357:
	.ascii	"_ctrl\000"
	.space	2
.LC1358:
	.ascii	"<3>%s: Unable to create workqueue:%s\012\000"
	.space	2
.LC1359:
	.ascii	"_data\000"
	.space	2
.LC1360:
	.ascii	"%s: count: %d\012\000"
	.space	1
.LC1361:
	.ascii	"SMUX_RMNET_CTL_HSUART\000"
	.space	2
.LC1362:
	.ascii	"%s: ctrl xport: %s data xport: %s dev: %pK portno: "
	.ascii	"%d\012\000"
	.space	1
.LC1363:
	.ascii	"%s: reset port:%d\012\000"
	.space	1
.LC1364:
	.ascii	"<3>%s: gsmd_ctrl_connect failed: err:%d\012\000"
	.space	3
.LC1365:
	.ascii	"<3>%s: gqti_ctrl_connect failed: err:%d\012\000"
	.space	3
.LC1366:
	.ascii	"<3>%s: ghsic_ctrl_connect failed: err:%d\012\000"
	.space	2
.LC1367:
	.ascii	"<3>%s: ghsuart_ctrl_connect failed: err:%d\012\000"
.LC1368:
	.ascii	"<3>%s: usb_bam_get_connection_idx failed\012\000"
	.space	2
.LC1369:
	.ascii	"<3>%s: gbam_connect failed: err:%d\012\000"
.LC1370:
	.ascii	"<3>%s: ghsic_data_connect failed: err:%d\012\000"
	.space	2
.LC1371:
	.ascii	"<3>%s: ghsuart_data_connect failed: err:%d\012\000"
.LC1372:
	.ascii	"<3>%s: Max-%d instances supported\012\000"
	.space	1
.LC1373:
	.ascii	"%s: port#:%d, ctrl port: %s data port: %s\012\000"
	.space	1
.LC1374:
	.ascii	"<3>%s: Unable to allocate rmnet device\012\000"
.LC1375:
	.ascii	"<3>%s: Un-supported transport: %u\012\000"
	.space	1
.LC1376:
	.ascii	"<3>%s: rmnet: Cannot open ctrl port:'%s' data port:"
	.ascii	"'%s'\012\000"
	.space	3
.LC1377:
	.ascii	"%s: bam ports: %u bam2bam ports: %u data hsic ports"
	.ascii	": %u data hsuart ports: %u smd ports: %u ctrl hsic "
	.ascii	"ports: %u ctrl hsuart ports: %u nr_rmnet_ports: %u\012"
	.ascii	"\000"
	.space	2
.LC1378:
	.ascii	"%s: usb config:%pK\012\000"
.LC1379:
	.ascii	"<3>%s: supporting ports#%u port_id:%u\000"
	.space	2
.LC1380:
	.ascii	"<3>%s: failed to get string id, err:%d\012\000"
.LC1381:
	.ascii	"rmnet%d\000"
.LC1382:
	.ascii	"<3>%s: cannot allocate memory for name\012\000"
.LC1383:
	.ascii	"<3>%s: usb add function failed: %d\012\000"
.LC1384:
	.ascii	"%s: complete\012\000"
	.space	2
.LC1385:
	.ascii	"<3>%s: Could not bind rmnet%u config\012\000"
	.space	2
.LC1386:
	.ascii	"<3>%s: rmnet: Cannot setup transports\000"
	.space	2
.LC1387:
	.ascii	"%s: REMOTE_NDIS_INITIALIZE_MSG\012\000"
.LC1388:
	.ascii	"%s: REMOTE_NDIS_HALT_MSG\012\000"
	.space	2
.LC1389:
	.ascii	"%s: OID_GEN_CURRENT_PACKET_FILTER %08x\012\000"
.LC1390:
	.ascii	"<4>%s: set unknown OID 0x%08X, size %d\012\000"
.LC1391:
	.ascii	"%s: REMOTE_NDIS_RESET_MSG\012\000"
	.space	1
.LC1392:
	.ascii	"<4>%s: unknown RNDIS message 0x%08X len %d\012\000"
.LC1393:
	.ascii	"%03d:  %02x %02x %02x %02x %02x %02x %02x %02x %02x"
	.ascii	" %02x %02x %02x %02x %02x %02x %02x\012\000"
.LC1394:
	.ascii	"RNDIS command error %d, %d/%d\012\000"
	.space	1
.LC1395:
	.ascii	"%s: MaxTransferSize: %d : Multi_pkt_txr: %s\012\000"
	.space	3
.LC1396:
	.ascii	"<3>%s: RNDIS command error %d, %d/%d\012\000"
	.space	2
.LC1397:
	.ascii	"%s: MaxTransferSize: %d\012\000"
	.space	3
.LC1398:
	.ascii	"%s: data transport type is %s\000"
	.space	2
.LC1399:
	.ascii	"%s: set xport = %d\000"
	.space	1
.LC1400:
	.ascii	"%s: using random dev_mac ethernet address\012\000"
	.space	1
.LC1401:
	.ascii	"%s: using random host_mac ethernet address\012\000"
.LC1402:
	.ascii	"%02X%02X%02X%02X%02X%02X\000"
	.space	3
.LC1403:
	.ascii	"cdc_ethernet\000"
	.space	3
.LC1404:
	.ascii	"<3>%s: failed to add function\000"
	.space	2
.LC1405:
	.ascii	"%s: setting ecm_ipa, host_ethaddr=%pM, device_ethad"
	.ascii	"dr=%pM\000"
	.space	2
.LC1406:
	.ascii	"%s: ecm_ipa successful created\000"
	.space	1
.LC1407:
	.ascii	"<3>%s: %s: teth_bridge_set_aggr_params failed\012\000"
	.space	1
.LC1408:
	.ascii	"<6>%s: SET DEVICE OFFLINE\000"
	.space	2
.LC1409:
	.ascii	"<6>%s: dev:%pK port:%d. Do nothing.\012\000"
	.space	3
.LC1410:
	.ascii	"<6>%s: mbim deactivated\012\000"
	.space	3
.LC1411:
	.ascii	"<6>%s: CONTROL_INTERFACE\000"
	.space	3
.LC1412:
	.ascii	"<6>%s: reset mbim control %d\012\000"
	.space	2
.LC1413:
	.ascii	"<3>%s: Failed configuring notify ep %s: err %d\012\000"
.LC1414:
	.ascii	"<6>%s: DATA_INTERFACE\000"
	.space	2
.LC1415:
	.ascii	"<6>%s: reset mbim\012\000"
	.space	1
.LC1416:
	.ascii	"<6>%s: Alt set 1, initialize ports\000"
	.space	1
.LC1417:
	.ascii	"<6>%s: Choose endpoints\000"
.LC1418:
	.ascii	"<3>%s: IN ep %s failed: %d\012\000"
.LC1419:
	.ascii	"<6>%s: Set mbim port in_desc = 0x%pK\012\000"
	.space	2
.LC1420:
	.ascii	"<3>%s: OUT ep %s failed: %d\012\000"
	.space	3
.LC1421:
	.ascii	"<6>%s: Set mbim port out_desc = 0x%pK\012\000"
	.space	1
.LC1422:
	.ascii	"%s: Activate mbim\012\000"
	.space	1
.LC1423:
	.ascii	"<6>%s: dev:%pK portno:%d\012\000"
	.space	2
.LC1424:
	.ascii	"<3>%s: bam_data_setup failed: err:%d\012\000"
	.space	2
.LC1425:
	.ascii	"<6>%s: mbim bam connected\012\000"
	.space	1
.LC1426:
	.ascii	"<6>%s: PORTS already SET\000"
	.space	3
.LC1427:
	.ascii	"<6>%s: SET DEVICE ONLINE\000"
	.space	3
.LC1428:
	.ascii	"<3>%s: ERROR: Illegal Interface\000"
.LC1429:
	.ascii	"usb\000"
.LC1430:
	.ascii	"<3>%s: %s: ecm_pdata\012\000"
	.space	2
.LC1431:
	.ascii	"ecm\000"
.LC1432:
	.ascii	"<3>%s: %s: ecm_bind_config failed\012\000"
	.space	1
.LC1433:
	.ascii	"<3>%s: RNDIS header memory allocation failed.\012\000"
	.space	1
.LC1434:
	.ascii	"rndis deactivated\012\000"
	.space	1
.LC1435:
	.ascii	"reset rndis\012\000"
	.space	3
.LC1436:
	.ascii	"init rndis\012\000"
.LC1437:
	.ascii	"RNDIS RX/TX early activation ... \012\000"
	.space	1
.LC1438:
	.ascii	"ecm deactivated\012\000"
	.space	3
.LC1439:
	.ascii	"reset ecm\012\000"
	.space	1
.LC1440:
	.ascii	"init ecm\012\000"
	.space	2
.LC1441:
	.ascii	"activate ecm\012\000"
	.space	2
.LC1442:
	.ascii	"ncm deactivated\012\000"
	.space	3
.LC1443:
	.ascii	"reset ncm control %d\012\000"
	.space	2
.LC1444:
	.ascii	"init ncm ctrl %d\012\000"
	.space	2
.LC1445:
	.ascii	"reset ncm\012\000"
	.space	1
.LC1446:
	.ascii	"<7>usb: %s gather_disconnect\012\000"
	.space	2
.LC1447:
	.ascii	"init ncm\012\000"
	.space	2
.LC1448:
	.ascii	"<3>activate ncm setting MTU size (%d)\012\000"
	.space	1
.LC1449:
	.ascii	"host\000"
	.space	3
.LC1450:
	.ascii	"%s: %s: ecm_transport is %s\000"
.LC1451:
	.ascii	"%s: dev:%pK. Disconnect BAM.\012\000"
	.space	2
.LC1452:
	.ascii	"<3>%s: bam_data_connect failed: err:%d\012\000"
.LC1453:
	.ascii	"%s: ecm bam connected\012\000"
	.space	1
.LC1454:
	.ascii	"<6>%s: rndis deactivated\012\000"
	.space	2
.LC1455:
	.ascii	"%s: dev:%pK. %s Disconnect BAM.\012\000"
	.space	3
.LC1456:
	.ascii	"<6>%s: rndis bam connected\012\000"
.LC1457:
	.ascii	"RNDIS RX/TX early activation ...\012\000"
	.space	2
.LC1458:
	.ascii	"<3>%s: unable to open sound control device file: %s"
	.ascii	"\012\000"
	.space	3
.LC1459:
	.ascii	"<3>%s: No such PCM playback device: %s\012\000"
.LC1460:
	.ascii	"%s: Initialized PCM playback device: %s\012\000"
	.space	3
.LC1461:
	.ascii	"<3>%s: Setting playback HW params failed: err %d\000"
	.space	3
.LC1462:
	.ascii	"<3>%s: No such PCM capture device: %s\012\000"
	.space	1
.LC1463:
	.ascii	"<3>%s: Setting capture HW params failed: err %d\000"
.LC1464:
	.ascii	"<3>%s: Failed to open snd devices\012\000"
	.space	1
.LC1465:
	.ascii	"%s: Enter\000"
	.space	2
.LC1466:
	.ascii	"audio\000"
	.space	2
.LC1467:
	.ascii	"<3>%s: %s: Failed to add usb audio function, err = "
	.ascii	"%d\000"
	.space	2
.LC1468:
	.ascii	"<3>%s: %s: ncm_pdata\012\000"
	.space	2
.LC1469:
	.ascii	"<7>usb: %s MAC:%02X:%02X:%02X:%02X:%02X:%02X\012\000"
	.space	2
.LC1470:
	.ascii	"<7>usb: %s before MAC:%02X:%02X:%02X:%02X:%02X:%02X"
	.ascii	"\012\000"
	.space	3
.LC1471:
	.ascii	"<7>usb: %s after MAC:%02X:%02X:%02X:%02X:%02X:%02X\012"
	.ascii	"\000"
.LC1472:
	.ascii	"<7>usb: %s ncm ready (%s)\012\000"
	.space	1
.LC1473:
	.ascii	"<7>usb: %s idProduct=0x%x, DeviceClass=0x%x\012\000"
	.space	3
.LC1474:
	.ascii	"<7>usb: %s ver=0x%x vendor_id=0x%x\012\000"
.LC1475:
	.ascii	"<7>usb: %s failed usb_ep_queue\012\000"
.LC1476:
	.ascii	"SMUX_CONNECTED\000"
	.space	1
.LC1477:
	.ascii	"SMUX_DISCONNECTED\000"
	.space	2
.LC1478:
	.ascii	"SMUX_READ_DONE\000"
	.space	1
.LC1479:
	.ascii	"SMUX_READ_FAIL\000"
	.space	1
.LC1480:
	.ascii	"SMUX_WRITE_DONE\000"
.LC1481:
	.ascii	"SMUX_WRITE_FAIL\000"
.LC1482:
	.ascii	"SMUX_TIOCM_UPDATE\000"
	.space	2
.LC1483:
	.ascii	"SMUX_LOW_WM_HIT\000"
.LC1484:
	.ascii	"SMUX_HIGH_WM_HIT\000"
	.space	3
.LC1485:
	.ascii	"RNDIS_UNINITIALIZED\000"
.LC1486:
	.ascii	"RNDIS_INITIALIZED\000"
	.space	2
.LC1487:
	.ascii	"RNDIS_DATA_INITIALIZED\000"
	.space	1
.LC1488:
	.ascii	"DATA\000"
	.space	3
.LC1489:
	.ascii	"OPEN\000"
	.space	3
.LC1490:
	.ascii	"CLOSE\000"
	.space	2
.LC1491:
	.ascii	"NONE\000"
	.space	3
.LC1492:
	.ascii	"name of streaming function:%s\012\000"
	.space	1
.LC1493:
	.ascii	"%s: dload:%pK pid:%x serial_num:%s\012\000"
.LC1494:
	.ascii	"%s: unable to update PID and serial_no\012\000"
.LC1495:
	.ascii	"setting streaming_enabled to false.\012\000"
	.space	3
.LC1496:
	.ascii	"remote_wakeup\000"
	.space	2
.LC1497:
	.ascii	"state\000"
	.space	2
.LC1498:
	.ascii	"pm_qos\000"
	.space	1
.LC1499:
	.ascii	"enable\000"
	.space	1
.LC1500:
	.ascii	"functions\000"
	.space	2
.LC1501:
	.ascii	"macos\000"
	.space	2
.LC1502:
	.ascii	"ss_host_available\000"
	.space	2
.LC1503:
	.ascii	"usb30en\000"
.LC1504:
	.ascii	"bcdUSB\000"
	.space	1
.LC1505:
	.ascii	"iSerial\000"
.LC1506:
	.ascii	"iProduct\000"
	.space	3
.LC1507:
	.ascii	"iManufacturer\000"
	.space	2
.LC1508:
	.ascii	"bDeviceProtocol\000"
.LC1509:
	.ascii	"bDeviceSubClass\000"
.LC1510:
	.ascii	"bDeviceClass\000"
	.space	3
.LC1511:
	.ascii	"bcdDevice\000"
	.space	2
.LC1512:
	.ascii	"idProduct\000"
	.space	2
.LC1513:
	.ascii	"idVendor\000"
	.space	3
.LC1514:
	.ascii	"android_usb: %s remote wakeup\012\000"
	.space	1
.LC1515:
	.ascii	"func:%s is enabled.\012\000"
	.space	3
.LC1516:
	.ascii	"set streaming_enabled to true\012\000"
	.space	1
.LC1517:
	.ascii	"uasp\000"
	.space	3
.LC1518:
	.ascii	"UASP %s\012\000"
	.space	3
.LC1519:
	.ascii	"pcm\000"
.LC1520:
	.ascii	"mass_storage\000"
	.space	3
.LC1521:
	.ascii	"sua_version_info\000"
	.space	3
.LC1522:
	.ascii	"product_string\000"
	.space	1
.LC1523:
	.ascii	"vendor_string\000"
	.space	2
.LC1524:
	.ascii	"inquiry_string\000"
	.space	1
.LC1525:
	.ascii	"rndis_qc\000"
	.space	3
.LC1526:
	.ascii	"max_pkt_per_xfer\000"
	.space	3
.LC1527:
	.ascii	"vendorID\000"
	.space	3
.LC1528:
	.ascii	"ethaddr\000"
.LC1529:
	.ascii	"wceis\000"
	.space	2
.LC1530:
	.ascii	"manufacturer\000"
	.space	3
.LC1531:
	.ascii	"ptp\000"
.LC1532:
	.ascii	"diag\000"
	.space	3
.LC1533:
	.ascii	"clients\000"
.LC1534:
	.ascii	"mbim_transports\000"
.LC1535:
	.ascii	"%s: mbim transport is %s\000"
	.space	3
.LC1536:
	.ascii	"ecm_qc\000"
	.space	1
.LC1537:
	.ascii	"ecm_transports\000"
	.space	1
.LC1538:
	.ascii	"ecm_ethaddr\000"
.LC1539:
	.ascii	"%s: ecm_transport is %s\000"
.LC1540:
	.ascii	"transport_names\000"
.LC1541:
	.ascii	"transports\000"
	.space	1
.LC1542:
	.ascii	"rmnet_smd\000"
	.space	2
.LC1543:
	.ascii	"instances\000"
	.space	2
.LC1544:
	.ascii	"midi\000"
	.space	3
.LC1545:
	.ascii	"alsa\000"
	.space	3
.LC1546:
	.ascii	"start adbd only in ADB composition\012\000"
.LC1547:
	.ascii	"aliases\000"
.LC1548:
	.ascii	"terminal_version\000"
	.space	3
.LC1549:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_ncm"
	.ascii	".c\000"
	.space	2
.LC1550:
	.ascii	"CDC Network Control Model (NCM)\000"
.LC1551:
	.ascii	"CDC Network Data\000"
	.space	3
.LC1552:
	.ascii	"CDC NCM\000"
.LC1553:
	.ascii	"in_max_packet_size\000"
	.space	1
.LC1554:
	.ascii	"out_max_packet_size\000"
.LC1555:
	.ascii	"usb_buffer_size\000"
.LC1556:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_con"
	.ascii	"n_gadget.c\000"
	.space	2
.LC1557:
	.ascii	"%s disabled\012\000"
	.space	3
.LC1558:
	.ascii	"%s: error %d\012\000"
	.space	2
.LC1559:
	.ascii	"%s: req_put\012\000"
	.space	3
.LC1560:
	.ascii	"usb_ep_autoconfig for conn_gadget ep_out got %s\012"
	.ascii	"\000"
	.space	3
.LC1561:
	.ascii	"version\000"
.LC1562:
	.ascii	"1.0\000"
.LC1563:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_uac"
	.ascii	"1.c\000"
	.space	1
.LC1564:
	.ascii	"Allocated %d requests\012\000"
	.space	1
.LC1565:
	.ascii	"intf %d, alt %d\012\000"
	.space	3
.LC1566:
	.ascii	"audio req %02x.%02x v%04x i%04x l%d\012\000"
	.space	3
.LC1567:
	.ascii	"USB_DIR_IN | USB_TYPE_CLASS | USB_RECIP_ENDPOINT\000"
	.space	3
.LC1568:
	.ascii	"USB_DIR_OUT | USB_TYPE_CLASS | USB_RECIP_ENDPOINT\000"
	.space	2
.LC1569:
	.ascii	"USB_DIR_IN | USB_TYPE_CLASS | USB_RECIP_INTERFACE\000"
	.space	2
.LC1570:
	.ascii	"USB_DIR_OUT | USB_TYPE_CLASS | USB_RECIP_INTERFACE\000"
	.space	1
.LC1571:
	.ascii	"bRequest 0x%x, w_value 0x%04x, len %d, ep %d\012\000"
	.space	2
.LC1572:
	.ascii	"bRequest 0x%x, w_value 0x%04x, len %d, endp %d, epn"
	.ascii	"um %d\012\000"
	.space	2
.LC1573:
	.ascii	"bRequest 0x%x, w_value 0x%04x, len %d, entity %d\012"
	.ascii	"\000"
	.space	2
.LC1574:
	.ascii	"Copy %d bytes\000"
	.space	2
.LC1575:
	.ascii	"copy_buf == 0\000"
	.space	2
.LC1576:
	.ascii	"Queue capture packet: size %d\000"
	.space	2
.LC1577:
	.ascii	"audio_playback_buf_size %d - copy_buf->actual %d, r"
	.ascii	"eq->actual %d\000"
	.space	3
.LC1578:
	.ascii	"play_buf->actual = %d\000"
	.space	2
.LC1579:
	.ascii	"Microphone Iso-IN Endpoint Control\000"
	.space	1
.LC1580:
	.ascii	"Microphone Sampling Frequency Control\000"
	.space	2
.LC1581:
	.ascii	"Speaker Iso-out Endpoint Control\000"
	.space	3
.LC1582:
	.ascii	"Speaker Sampling Frequency Control\000"
	.space	1
.LC1583:
	.ascii	"Microphone Feature Unit Controls\000"
	.space	3
.LC1584:
	.ascii	"Microphone Volume Control\000"
	.space	2
.LC1585:
	.ascii	"Microphone Mute Control\000"
.LC1586:
	.ascii	"Speaker Function Unit Controls\000"
	.space	1
.LC1587:
	.ascii	"Speaker Volume Control\000"
	.space	1
.LC1588:
	.ascii	"Speaker Mute Control\000"
	.space	3
.LC1589:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/u_uac"
	.ascii	"1.c\000"
	.space	1
.LC1590:
	.ascii	"Enter\000"
	.space	2
.LC1591:
	.ascii	"Initialized PCM playback device: %s\012\000"
	.space	3
.LC1592:
	.ascii	"Return %d\000"
	.space	2
.LC1593:
	.ascii	"frames = %d, count = %d\000"
.LC1594:
	.ascii	"Done. Sent %d frames\000"
	.space	3
.LC1595:
	.ascii	"runtime->frame_bits = %d, count = %d, frames = %d\000"
	.space	2
.LC1596:
	.ascii	"Initialized playback params\000"
.LC1597:
	.ascii	"Initialize hw params\000"
	.space	3
.LC1598:
	.ascii	"capture params: access %x, format %x, channels %d, "
	.ascii	"rate %d\012\000"
.LC1599:
	.ascii	"playback params: access %x, format %x, channels %d,"
	.ascii	" rate %d\012\000"
	.space	3
.LC1600:
	.ascii	"buffer_bytes = (%d,%d) omin=%d omax=%d int=%d empty"
	.ascii	"=%d\012\000"
.LC1601:
	.ascii	"/dev/snd/controlC0\000"
	.space	1
.LC1602:
	.ascii	"/dev/snd/pcmC0D6c\000"
	.space	2
.LC1603:
	.ascii	"/dev/snd/pcmC0D5p\000"
	.space	2
.LC1604:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/u_qc_"
	.ascii	"ether.c\000"
	.space	1
.LC1605:
	.ascii	"using random host_mac ethernet address\012\000"
.LC1606:
	.ascii	"using random dev_mac ethernet address\012\000"
	.space	1
.LC1607:
	.ascii	"gadget\000"
	.space	1
.LC1608:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/u_eth"
	.ascii	"er.c\000"
.LC1609:
	.ascii	"req->length:%d header_len:%u\012skb->len:%d skb->da"
	.ascii	"ta_len:%d\012\000"
	.space	1
.LC1610:
	.ascii	"%s: size: %d\000"
	.space	3
.LC1611:
	.ascii	"android_rndis_qc\000"
	.space	3
.LC1612:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_qc_"
	.ascii	"rndis.c\000"
	.space	1
.LC1613:
	.ascii	"Sent max packet size %d\000"
.LC1614:
	.ascii	"rndis_qc_unbind: free\000"
	.space	2
.LC1615:
	.ascii	"%s: rndis resumed\012\000"
	.space	1
.LC1616:
	.ascii	"%s: rndis suspended\012\000"
	.space	3
.LC1617:
	.ascii	"MaxTransferSize: %d\012\000"
	.space	3
.LC1618:
	.ascii	"dev:%pK. %s Disconnect BAM.\012\000"
	.space	3
.LC1619:
	.ascii	"RNDIS Communications Control\000"
	.space	3
.LC1620:
	.ascii	"RNDIS Ethernet Data\000"
.LC1621:
	.ascii	"RNDIS\000"
	.space	2
.LC1622:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_ecm"
	.ascii	".c\000"
	.space	2
.LC1623:
	.ascii	"CDC Ethernet Control Model (ECM)\000"
	.space	3
.LC1624:
	.ascii	"CDC Ethernet Data\000"
	.space	2
.LC1625:
	.ascii	"CDC ECM\000"
.LC1626:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/u_bam"
	.ascii	"_data.c\000"
	.space	1
.LC1627:
	.ascii	"bam_data is already setup\000"
	.space	2
.LC1628:
	.ascii	"requested %d BAM2BAM ports\000"
	.space	1
.LC1629:
	.ascii	"bam_data_destroy: Freeing ports\012\000"
	.space	3
.LC1630:
	.ascii	"dev:%pK port#%d\012\000"
	.space	3
.LC1631:
	.ascii	"port:%pK portno:%d\012\000"
.LC1632:
	.ascii	"%s: Connect workqueue done\000"
	.space	1
.LC1633:
	.ascii	"%s: Connect workqueue started\000"
	.space	2
.LC1634:
	.ascii	"%s: status: %d\012\000"
.LC1635:
	.ascii	"android_mbim\000"
	.space	3
.LC1636:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mbi"
	.ascii	"m.c\000"
	.space	1
.LC1637:
	.ascii	"Received command %d\000"
.LC1638:
	.ascii	"Exit(%d)\000"
	.space	3
.LC1639:
	.ascii	"Enter(%d)\000"
	.space	2
.LC1640:
	.ascii	"copied %d bytes to user\012\000"
	.space	3
.LC1641:
	.ascii	"cpkt size:%d\012\000"
	.space	2
.LC1642:
	.ascii	"Received request packet\012\000"
	.space	3
.LC1643:
	.ascii	"Requests list is empty. Wait.\012\000"
	.space	1
.LC1644:
	.ascii	"Enter(%d)\012\000"
	.space	1
.LC1645:
	.ascii	"MBIM in configuration %d\000"
	.space	3
.LC1646:
	.ascii	"Activate mbim\012\000"
	.space	1
.LC1647:
	.ascii	"%02x.%02x v%04x i%04x l%u\000"
	.space	2
.LC1648:
	.ascii	"control request: %02x.%02x v%04x i%04x l%d\012\000"
.LC1649:
	.ascii	"USB_CDC_SET_NTB_FORMAT\000"
	.space	1
.LC1650:
	.ascii	"NTB FORMAT: sending %d\012\000"
.LC1651:
	.ascii	"USB_CDC_GET_NTB_FORMAT\000"
	.space	1
.LC1652:
	.ascii	"USB_CDC_SET_NTB_INPUT_SIZE\000"
	.space	1
.LC1653:
	.ascii	"Reply to host INPUT SIZE %d\012\000"
	.space	3
.LC1654:
	.ascii	"USB_CDC_GET_NTB_INPUT_SIZE\000"
	.space	1
.LC1655:
	.ascii	"USB_CDC_GET_NTB_PARAMETERS\000"
	.space	1
.LC1656:
	.ascii	"copied encapsulated_response %d bytes\000"
	.space	2
.LC1657:
	.ascii	"req%02x.%02x v%04x i%04x l%d\012\000"
	.space	2
.LC1658:
	.ascii	"USB_CDC_GET_ENCAPSULATED_RESPONSE\000"
	.space	2
.LC1659:
	.ascii	"w_length > req->length: %d > %d\000"
.LC1660:
	.ascii	"USB_CDC_SEND_ENCAPSULATED_COMMAND\000"
	.space	2
.LC1661:
	.ascii	"USB_CDC_RESET_FUNCTION\000"
	.space	1
.LC1662:
	.ascii	"Wake up read queue\000"
	.space	1
.LC1663:
	.ascii	"Add to cpkt_req_q packet with len = %d\012\000"
.LC1664:
	.ascii	"Set NTB INPUT SIZE %d\012\000"
	.space	1
.LC1665:
	.ascii	"%s: Exit\012\000"
	.space	2
.LC1666:
	.ascii	"notify_count = %d\000"
	.space	2
.LC1667:
	.ascii	"queue request: notify_count = %d\000"
	.space	3
.LC1668:
	.ascii	"notify_response_avaliable: done\000"
.LC1669:
	.ascii	"Notification %02x sent\012\000"
.LC1670:
	.ascii	"No pending notifications\012\000"
	.space	2
.LC1671:
	.ascii	"notify_state: %d\000"
	.space	3
.LC1672:
	.ascii	"Queue empty packet for QBI\000"
	.space	1
.LC1673:
	.ascii	"dev:%pK port_num#%d\012\000"
	.space	3
.LC1674:
	.ascii	"Successful Exit\000"
.LC1675:
	.ascii	"delay ep_queue: notifications queue is busy[%d]\000"
.LC1676:
	.ascii	"dev:%pK portno#%d\012\000"
	.space	1
.LC1677:
	.ascii	"MBIM Control\000"
	.space	3
.LC1678:
	.ascii	"MBIM Data\000"
	.space	2
.LC1679:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_qc_"
	.ascii	"ecm.c\000"
	.space	3
.LC1680:
	.ascii	"ecm_ipa successful created\000"
	.space	1
.LC1681:
	.ascii	"setting ecm_ipa, host_ethaddr=%pM, device_ethaddr=%"
	.ascii	"pM\000"
	.space	2
.LC1682:
	.ascii	"set xport = %d\000"
	.space	1
.LC1683:
	.ascii	"data transport type is %s\000"
	.space	2
.LC1684:
	.ascii	"ecm resumed\012\000"
	.space	3
.LC1685:
	.ascii	"ecm suspended\012\000"
	.space	1
.LC1686:
	.ascii	"dev:%pK. Disconnect BAM.\012\000"
	.space	2
.LC1687:
	.ascii	"ecm bam connected\012\000"
	.space	1
.LC1688:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/rndis"
	.ascii	".c\000"
	.space	2
.LC1689:
	.ascii	"%s: REMOTE_NDIS_KEEPALIVE_MSG\012\000"
	.space	1
.LC1690:
	.ascii	"%03d: %08x %08x %08x %08x\012\000"
	.space	1
.LC1691:
	.ascii	"set OID %08x value, len %d:\012\000"
	.space	3
.LC1692:
	.ascii	"%s: OID_GEN_RCV_ERROR\012\000"
	.space	1
.LC1693:
	.ascii	"%s: OID_GEN_XMIT_ERROR\012\000"
.LC1694:
	.ascii	"%s: OID_GEN_RCV_OK\012\000"
.LC1695:
	.ascii	"%s: OID_GEN_XMIT_OK\012\000"
	.space	3
.LC1696:
	.ascii	"%s: OID_GEN_MEDIA_CONNECT_STATUS\012\000"
	.space	2
.LC1697:
	.ascii	"%s: OID_GEN_LINK_SPEED\012\000"
.LC1698:
	.ascii	"query OID %08x value, len %d:\012\000"
	.space	1
.LC1699:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_rnd"
	.ascii	"is.c\000"
.LC1700:
	.ascii	"USB accessory\000"
	.space	2
.LC1701:
	.ascii	"usb_accessory\000"
	.space	2
.LC1702:
	.ascii	"Android Accessory Interface\000"
.LC1703:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mtp"
	.ascii	".c\000"
	.space	2
.LC1704:
	.ascii	"MTP\000"
.LC1705:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mid"
	.ascii	"i.c\000"
	.space	1
.LC1706:
	.ascii	"MIDI function\000"
	.space	2
.LC1707:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_cci"
	.ascii	"d.c\000"
	.space	1
.LC1708:
	.ascii	"ccid_ctrl\000"
	.space	2
.LC1709:
	.ascii	"ccid_bulk\000"
	.space	2
.LC1710:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_adb"
	.ascii	".c\000"
	.space	2
.LC1711:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_acm"
	.ascii	".c\000"
	.space	2
.LC1712:
	.ascii	"CDC Abstract Control Model (ACM)\000"
	.space	3
.LC1713:
	.ascii	"CDC ACM Data\000"
	.space	3
.LC1714:
	.ascii	"CDC Serial\000"
	.space	1
.LC1715:
	.ascii	"dun\000"
.LC1716:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/u_dat"
	.ascii	"a_hsuart.c\000"
	.space	2
.LC1717:
	.ascii	"%s: event type: %s \000"
.LC1718:
	.ascii	"%s: ep:%s head:%pK num:%d cb:%pK\000"
	.space	3
.LC1719:
	.ascii	"SMUX_DUN_DATA_HSUART\000"
	.space	3
.LC1720:
	.ascii	"SMUX_RMNET_DATA_HSUART\000"
	.space	1
.LC1721:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/u_ctr"
	.ascii	"l_hsuart.c\000"
	.space	2
.LC1722:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/u_dat"
	.ascii	"a_hsic.c\000"
.LC1723:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/u_ctr"
	.ascii	"l_hsic.c\000"
.LC1724:
	.ascii	"rmnet_ctrl\000"
	.space	1
.LC1725:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/u_rmn"
	.ascii	"et_ctrl_qti.c\000"
	.space	3
.LC1726:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/u_rmn"
	.ascii	"et_ctrl_smd.c\000"
	.space	3
.LC1727:
	.ascii	"DATA40_CNTL\000"
.LC1728:
	.ascii	"DATA39_CNTL\000"
.LC1729:
	.ascii	"DATA38_CNTL\000"
.LC1730:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/u_bam"
	.ascii	".c\000"
	.space	2
.LC1731:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/u_smd"
	.ascii	".c\000"
	.space	2
.LC1732:
	.ascii	"DS\000"
	.space	1
.LC1733:
	.ascii	"UNUSED\000"
	.space	1
.LC1734:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/u_sdi"
	.ascii	"o.c\000"
	.space	1
.LC1735:
	.ascii	"%s: USB is already open, start io\012\000"
	.space	1
.LC1736:
	.ascii	"%s: SDIO data:%s ctrl:%d are open\012\000"
	.space	1
.LC1737:
	.ascii	"%s: read_avail:%d port:%pK port#%d\012\000"
.LC1738:
	.ascii	"SDIO_DUN\000"
	.space	3
.LC1739:
	.ascii	"SDIO_NMEA\000"
	.space	2
.LC1740:
	.ascii	"cdrom\000"
	.space	2
.LC1741:
	.ascii	"file\000"
	.space	3
.LC1742:
	.ascii	"nofua\000"
	.space	2
.LC1743:
	.ascii	"ro\000"
	.space	1
.LC1744:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/stora"
	.ascii	"ge_common.c\000"
	.space	1
.LC1745:
	.ascii	"entity STRING(%02x); ret = %d\012\000"
	.space	1
.LC1746:
	.ascii	"entity ENDPOINT(%02x); ret = %d\012\000"
	.space	3
.LC1747:
	.ascii	"functionfs\000"
	.space	1
.LC1748:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_aud"
	.ascii	"io_source.c\000"
	.space	1
.LC1749:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_rmn"
	.ascii	"et.c\000"
.LC1750:
	.ascii	"RmNet\000"
	.space	2
.LC1751:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_rmn"
	.ascii	"et_smd_sdio.c\000"
	.space	3
.LC1752:
	.ascii	"rmnet_mux_ctrl\000"
	.space	1
.LC1753:
	.ascii	"transport\000"
	.space	2
.LC1754:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_rmn"
	.ascii	"et_sdio.c\000"
	.space	3
.LC1755:
	.ascii	"rmnet_sdio_sts_callback: id: %d\012\000"
	.space	3
.LC1756:
	.ascii	"unable to allocate memory for QMI resp\012\000"
.LC1757:
	.ascii	"USB disconnected\012\000"
	.space	2
.LC1758:
	.ascii	"QMI RmNet\000"
	.space	2
.LC1759:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_rmn"
	.ascii	"et_smd.c\000"
.LC1760:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_qds"
	.ascii	"s.c\000"
	.space	1
.LC1761:
	.ascii	"QDSS DATA\000"
	.space	2
.LC1762:
	.ascii	"QDSS CTRL\000"
	.space	2
.LC1763:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/u_qds"
	.ascii	"s.c\000"
	.space	1
.LC1764:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_dia"
	.ascii	"g.c\000"
	.space	1
.LC1765:
	.ascii	"suspended\000"
	.space	2
.LC1766:
	.ascii	"HNP on another port\012\000"
	.space	3
.LC1767:
	.ascii	"HNP available\012\000"
	.section	__modver,"a",%progbits
	.align	2
	.type	__modver_attr, %object
	.size	__modver_attr, 4
__modver_attr:
	.word	___modver_attr
	.section	__param,"a",%progbits
	.align	2
	.type	__param_audio_capture_buf_size, %object
	.size	__param_audio_capture_buf_size, 16
__param_audio_capture_buf_size:
	.word	__param_str_audio_capture_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	audio_capture_buf_size
	.type	__param_req_capture_count, %object
	.size	__param_req_capture_count, 16
__param_req_capture_count:
	.word	__param_str_req_capture_count
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_capture_count
	.type	__param_req_capture_buf_size, %object
	.size	__param_req_capture_buf_size, 16
__param_req_capture_buf_size:
	.word	__param_str_req_capture_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_capture_buf_size
	.type	__param_audio_playback_buf_size, %object
	.size	__param_audio_playback_buf_size, 16
__param_audio_playback_buf_size:
	.word	__param_str_audio_playback_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	audio_playback_buf_size
	.type	__param_req_playback_count, %object
	.size	__param_req_playback_count, 16
__param_req_playback_count:
	.word	__param_str_req_playback_count
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_playback_count
	.type	__param_req_playback_buf_size, %object
	.size	__param_req_playback_buf_size, 16
__param_req_playback_buf_size:
	.word	__param_str_req_playback_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_playback_buf_size
	.type	__param_fn_cntl, %object
	.size	__param_fn_cntl, 16
__param_fn_cntl:
	.word	__param_str_fn_cntl
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_cntl
	.type	__param_fn_cap, %object
	.size	__param_fn_cap, 16
__param_fn_cap:
	.word	__param_str_fn_cap
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_cap
	.type	__param_fn_play, %object
	.size	__param_fn_play, 16
__param_fn_play:
	.word	__param_str_fn_play
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_play
	.type	__param_qc_host_addr, %object
	.size	__param_qc_host_addr, 16
__param_qc_host_addr:
	.word	__param_str_qc_host_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	qc_host_addr
	.type	__param_qc_dev_addr, %object
	.size	__param_qc_dev_addr, 16
__param_qc_dev_addr:
	.word	__param_str_qc_dev_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	qc_dev_addr
	.type	__param_host_addr, %object
	.size	__param_host_addr, 16
__param_host_addr:
	.word	__param_str_host_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	host_addr
	.type	__param_dev_addr, %object
	.size	__param_dev_addr, 16
__param_dev_addr:
	.word	__param_str_dev_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	dev_addr
	.type	__param_qmult, %object
	.size	__param_qmult, 16
__param_qmult:
	.word	__param_str_qmult
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	qmult
	.type	__param_rndis_ul_max_xfer_size_rcvd, %object
	.size	__param_rndis_ul_max_xfer_size_rcvd, 16
__param_rndis_ul_max_xfer_size_rcvd:
	.word	__param_str_rndis_ul_max_xfer_size_rcvd
	.word	param_ops_int
	.short	292
	.short	-1
	.word	rndis_ul_max_xfer_size_rcvd
	.type	__param_rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	__param_rndis_ul_max_pkt_per_xfer_rcvd, 16
__param_rndis_ul_max_pkt_per_xfer_rcvd:
	.word	__param_str_rndis_ul_max_pkt_per_xfer_rcvd
	.word	param_ops_int
	.short	292
	.short	-1
	.word	rndis_ul_max_pkt_per_xfer_rcvd
	.type	__param_rndis_ul_max_pkt_per_xfer, %object
	.size	__param_rndis_ul_max_pkt_per_xfer, 16
__param_rndis_ul_max_pkt_per_xfer:
	.word	__param_str_rndis_ul_max_pkt_per_xfer
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	rndis_ul_max_pkt_per_xfer
	.type	__param_rndis_dl_max_pkt_per_xfer, %object
	.size	__param_rndis_dl_max_pkt_per_xfer, 16
__param_rndis_dl_max_pkt_per_xfer:
	.word	__param_str_rndis_dl_max_pkt_per_xfer
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	rndis_dl_max_pkt_per_xfer
	.type	__param_mtp_tx_reqs, %object
	.size	__param_mtp_tx_reqs, 16
__param_mtp_tx_reqs:
	.word	__param_str_mtp_tx_reqs
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_tx_reqs
	.type	__param_mtp_tx_req_len, %object
	.size	__param_mtp_tx_req_len, 16
__param_mtp_tx_req_len:
	.word	__param_str_mtp_tx_req_len
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_tx_req_len
	.type	__param_mtp_rx_req_len, %object
	.size	__param_mtp_rx_req_len, 16
__param_mtp_rx_req_len:
	.word	__param_str_mtp_rx_req_len
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_rx_req_len
	.type	__param_ghsuart_data_tx_intr_thld, %object
	.size	__param_ghsuart_data_tx_intr_thld, 16
__param_ghsuart_data_tx_intr_thld:
	.word	__param_str_ghsuart_data_tx_intr_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_tx_intr_thld
	.type	__param_ghsuart_data_rx_req_size, %object
	.size	__param_ghsuart_data_rx_req_size, 16
__param_ghsuart_data_rx_req_size:
	.word	__param_str_ghsuart_data_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rx_req_size
	.type	__param_ghsuart_data_serial_rx_q_size, %object
	.size	__param_ghsuart_data_serial_rx_q_size, 16
__param_ghsuart_data_serial_rx_q_size:
	.word	__param_str_ghsuart_data_serial_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_serial_rx_q_size
	.type	__param_ghsuart_data_serial_tx_q_size, %object
	.size	__param_ghsuart_data_serial_tx_q_size, 16
__param_ghsuart_data_serial_tx_q_size:
	.word	__param_str_ghsuart_data_serial_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_serial_tx_q_size
	.type	__param_ghsuart_data_rmnet_rx_q_size, %object
	.size	__param_ghsuart_data_rmnet_rx_q_size, 16
__param_ghsuart_data_rmnet_rx_q_size:
	.word	__param_str_ghsuart_data_rmnet_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rmnet_rx_q_size
	.type	__param_ghsuart_data_rmnet_tx_q_size, %object
	.size	__param_ghsuart_data_rmnet_tx_q_size, 16
__param_ghsuart_data_rmnet_tx_q_size:
	.word	__param_str_ghsuart_data_rmnet_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rmnet_tx_q_size
	.type	__param_record_timestamp, %object
	.size	__param_record_timestamp, 16
__param_record_timestamp:
	.word	__param_str_record_timestamp
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	record_timestamp
	.type	__param_ghsic_data_pend_limit_with_bridge, %object
	.size	__param_ghsic_data_pend_limit_with_bridge, 16
__param_ghsic_data_pend_limit_with_bridge:
	.word	__param_str_ghsic_data_pend_limit_with_bridge
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_pend_limit_with_bridge
	.type	__param_ghsic_data_fctrl_dis_thld, %object
	.size	__param_ghsic_data_fctrl_dis_thld, 16
__param_ghsic_data_fctrl_dis_thld:
	.word	__param_str_ghsic_data_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_dis_thld
	.type	__param_ghsic_data_fctrl_en_thld, %object
	.size	__param_ghsic_data_fctrl_en_thld, 16
__param_ghsic_data_fctrl_en_thld:
	.word	__param_str_ghsic_data_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_en_thld
	.type	__param_ghsic_data_fctrl_support, %object
	.size	__param_ghsic_data_fctrl_support, 16
__param_ghsic_data_fctrl_support:
	.word	__param_str_ghsic_data_fctrl_support
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_support
	.type	__param_ghsic_data_tx_intr_thld, %object
	.size	__param_ghsic_data_tx_intr_thld, 16
__param_ghsic_data_tx_intr_thld:
	.word	__param_str_ghsic_data_tx_intr_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_tx_intr_thld
	.type	__param_ghsic_data_rx_req_size, %object
	.size	__param_ghsic_data_rx_req_size, 16
__param_ghsic_data_rx_req_size:
	.word	__param_str_ghsic_data_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rx_req_size
	.type	__param_ghsic_data_serial_rx_q_size, %object
	.size	__param_ghsic_data_serial_rx_q_size, 16
__param_ghsic_data_serial_rx_q_size:
	.word	__param_str_ghsic_data_serial_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_serial_rx_q_size
	.type	__param_ghsic_data_serial_tx_q_size, %object
	.size	__param_ghsic_data_serial_tx_q_size, 16
__param_ghsic_data_serial_tx_q_size:
	.word	__param_str_ghsic_data_serial_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_serial_tx_q_size
	.type	__param_ghsic_data_rmnet_rx_q_size, %object
	.size	__param_ghsic_data_rmnet_rx_q_size, 16
__param_ghsic_data_rmnet_rx_q_size:
	.word	__param_str_ghsic_data_rmnet_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rmnet_rx_q_size
	.type	__param_ghsic_data_rmnet_tx_q_size, %object
	.size	__param_ghsic_data_rmnet_tx_q_size, 16
__param_ghsic_data_rmnet_tx_q_size:
	.word	__param_str_ghsic_data_rmnet_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rmnet_tx_q_size
	.type	__param_dl_intr_threshold, %object
	.size	__param_dl_intr_threshold, 16
__param_dl_intr_threshold:
	.word	__param_str_dl_intr_threshold
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	dl_intr_threshold
	.type	__param_bam_mux_rx_req_size, %object
	.size	__param_bam_mux_rx_req_size, 16
__param_bam_mux_rx_req_size:
	.word	__param_str_bam_mux_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_req_size
	.type	__param_bam_mux_rx_q_size, %object
	.size	__param_bam_mux_rx_q_size, 16
__param_bam_mux_rx_q_size:
	.word	__param_str_bam_mux_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_q_size
	.type	__param_bam_mux_tx_q_size, %object
	.size	__param_bam_mux_tx_q_size, 16
__param_bam_mux_tx_q_size:
	.word	__param_str_bam_mux_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_tx_q_size
	.type	__param_bam_mux_rx_fctrl_dis_thld, %object
	.size	__param_bam_mux_rx_fctrl_dis_thld, 16
__param_bam_mux_rx_fctrl_dis_thld:
	.word	__param_str_bam_mux_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_dis_thld
	.type	__param_bam_mux_rx_fctrl_support, %object
	.size	__param_bam_mux_rx_fctrl_support, 16
__param_bam_mux_rx_fctrl_support:
	.word	__param_str_bam_mux_rx_fctrl_support
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_support
	.type	__param_bam_mux_rx_fctrl_en_thld, %object
	.size	__param_bam_mux_rx_fctrl_en_thld, 16
__param_bam_mux_rx_fctrl_en_thld:
	.word	__param_str_bam_mux_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_en_thld
	.type	__param_bam_mux_tx_pkt_drop_thld, %object
	.size	__param_bam_mux_tx_pkt_drop_thld, 16
__param_bam_mux_tx_pkt_drop_thld:
	.word	__param_str_bam_mux_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_tx_pkt_drop_thld
	.type	__param_bam_pending_limit, %object
	.size	__param_bam_pending_limit, 16
__param_bam_pending_limit:
	.word	__param_str_bam_pending_limit
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_pending_limit
	.type	__param_mux_sdio_rx_fctrl_dis_thld, %object
	.size	__param_mux_sdio_rx_fctrl_dis_thld, 16
__param_mux_sdio_rx_fctrl_dis_thld:
	.word	__param_str_mux_sdio_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_rx_fctrl_dis_thld
	.type	__param_mux_sdio_rx_fctrl_en_thld, %object
	.size	__param_mux_sdio_rx_fctrl_en_thld, 16
__param_mux_sdio_rx_fctrl_en_thld:
	.word	__param_str_mux_sdio_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_rx_fctrl_en_thld
	.type	__param_mux_sdio_tx_pkt_drop_thld, %object
	.size	__param_mux_sdio_tx_pkt_drop_thld, 16
__param_mux_sdio_tx_pkt_drop_thld:
	.word	__param_str_mux_sdio_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_tx_pkt_drop_thld
	.type	__param_rmnet_mux_smd_data_ch, %object
	.size	__param_rmnet_mux_smd_data_ch, 16
__param_rmnet_mux_smd_data_ch:
	.word	__param_str_rmnet_mux_smd_data_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_mux_smd_data_ch
	.type	__param_rmnet_mux_sdio_data_ch, %object
	.size	__param_rmnet_mux_sdio_data_ch, 16
__param_rmnet_mux_sdio_data_ch:
	.word	__param_str_rmnet_mux_sdio_data_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_mux_sdio_data_ch
	.type	__param_rmnet_mux_sdio_ctl_ch, %object
	.size	__param_rmnet_mux_sdio_ctl_ch, 16
__param_rmnet_mux_sdio_ctl_ch:
	.word	__param_str_rmnet_mux_sdio_ctl_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_mux_sdio_ctl_ch
	.type	__param_sdio_rx_fctrl_dis_thld, %object
	.size	__param_sdio_rx_fctrl_dis_thld, 16
__param_sdio_rx_fctrl_dis_thld:
	.word	__param_str_sdio_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_rx_fctrl_dis_thld
	.type	__param_sdio_rx_fctrl_en_thld, %object
	.size	__param_sdio_rx_fctrl_en_thld, 16
__param_sdio_rx_fctrl_en_thld:
	.word	__param_str_sdio_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_rx_fctrl_en_thld
	.type	__param_sdio_tx_pkt_drop_thld, %object
	.size	__param_sdio_tx_pkt_drop_thld, 16
__param_sdio_tx_pkt_drop_thld:
	.word	__param_str_sdio_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_tx_pkt_drop_thld
	.type	__param_rmnet_sdio_data_ch, %object
	.size	__param_rmnet_sdio_data_ch, 16
__param_rmnet_sdio_data_ch:
	.word	__param_str_rmnet_sdio_data_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_sdio_data_ch
	.type	__param_rmnet_sdio_ctl_ch, %object
	.size	__param_rmnet_sdio_ctl_ch, 16
__param_rmnet_sdio_ctl_ch:
	.word	__param_str_rmnet_sdio_ctl_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_sdio_ctl_ch
	.type	__param_rmnet_data_ch, %object
	.size	__param_rmnet_data_ch, 16
__param_rmnet_data_ch:
	.word	__param_str_rmnet_data_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_data_ch
	.type	__param_rmnet_ctl_ch, %object
	.size	__param_rmnet_ctl_ch, 16
__param_rmnet_ctl_ch:
	.word	__param_str_rmnet_ctl_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_ctl_ch
	.type	__param_iSerialNumber, %object
	.size	__param_iSerialNumber, 16
__param_iSerialNumber:
	.word	__param_str_iSerialNumber
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iSerialNumber
	.type	__param_iProduct, %object
	.size	__param_iProduct, 16
__param_iProduct:
	.word	__param_str_iProduct
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iProduct
	.type	__param_iManufacturer, %object
	.size	__param_iManufacturer, 16
__param_iManufacturer:
	.word	__param_str_iManufacturer
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iManufacturer
	.type	__param_bcdDevice, %object
	.size	__param_bcdDevice, 16
__param_bcdDevice:
	.word	__param_str_bcdDevice
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	bcdDevice
	.type	__param_idProduct, %object
	.size	__param_idProduct, 16
__param_idProduct:
	.word	__param_str_idProduct
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	idProduct
	.type	__param_idVendor, %object
	.size	__param_idVendor, 16
__param_idVendor:
	.word	__param_str_idVendor
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	idVendor
	.section	__verbose,"aw",%progbits
	.align	3
	.set	.LANCHOR2,. + 0
	.set	.LANCHOR4,. + 8184
	.set	.LANCHOR8,. + 16368
	.type	descriptor.25169, %object
	.size	descriptor.25169, 24
descriptor.25169:
	.word	.LC1120
	.word	__func__.25170
	.word	.LC102
	.word	.LC5
	.byte	109
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25369, %object
	.size	descriptor.25369, 24
descriptor.25369:
	.word	.LC1120
	.word	__func__.25370
	.word	.LC102
	.word	.LC6
	.byte	134
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25520, %object
	.size	descriptor.25520, 24
descriptor.25520:
	.word	.LC1120
	.word	__func__.25521
	.word	.LC102
	.word	.LC7
	.byte	197
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25505, %object
	.size	descriptor.25505, 24
descriptor.25505:
	.word	.LC1120
	.word	__func__.25506
	.word	.LC102
	.word	.LC8
	.byte	172
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.26072, %object
	.size	descriptor.26072, 24
descriptor.26072:
	.word	.LC1120
	.word	__func__.26073
	.word	.LC1764
	.word	.LC9
	.byte	27
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52807, %object
	.size	descriptor.52807, 24
descriptor.52807:
	.word	.LC1120
	.word	__func__.52808
	.word	.LC1711
	.word	.LC10
	.byte	204
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52809, %object
	.size	descriptor.52809, 24
descriptor.52809:
	.word	.LC1120
	.word	__func__.52808
	.word	.LC1711
	.word	.LC11
	.byte	211
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53887, %object
	.size	descriptor.53887, 24
descriptor.53887:
	.word	.LC1120
	.word	__func__.53888
	.word	.LC1705
	.word	.LC12
	.byte	138
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56393, %object
	.size	descriptor.56393, 24
descriptor.56393:
	.word	.LC1120
	.word	__func__.56394
	.word	.LC1699
	.word	.LC13
	.byte	3
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56396, %object
	.size	descriptor.56396, 24
descriptor.56396:
	.word	.LC1120
	.word	__func__.56394
	.word	.LC1699
	.word	.LC14
	.byte	17
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56380, %object
	.size	descriptor.56380, 24
descriptor.56380:
	.word	.LC1120
	.word	__func__.56381
	.word	.LC1699
	.word	.LC15
	.byte	231
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58020, %object
	.size	descriptor.58020, 24
descriptor.58020:
	.word	.LC1120
	.word	__func__.58021
	.word	.LC1622
	.word	.LC16
	.byte	230
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58025, %object
	.size	descriptor.58025, 24
descriptor.58025:
	.word	.LC1120
	.word	__func__.58021
	.word	.LC1622
	.word	.LC18
	.byte	3
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58024, %object
	.size	descriptor.58024, 24
descriptor.58024:
	.word	.LC1120
	.word	__func__.58021
	.word	.LC1622
	.word	.LC17
	.byte	252
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58005, %object
	.size	descriptor.58005, 24
descriptor.58005:
	.word	.LC1120
	.word	__func__.58006
	.word	.LC1622
	.word	.LC22
	.byte	202
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57984, %object
	.size	descriptor.57984, 24
descriptor.57984:
	.word	.LC1120
	.word	__func__.57985
	.word	.LC1622
	.word	.LC23
	.byte	145
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57988, %object
	.size	descriptor.57988, 24
descriptor.57988:
	.word	.LC1120
	.word	__func__.57985
	.word	.LC1622
	.word	.LC24
	.byte	160
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57989, %object
	.size	descriptor.57989, 24
descriptor.57989:
	.word	.LC1120
	.word	__func__.57985
	.word	.LC1622
	.word	.LC25
	.byte	171
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63422, %object
	.size	descriptor.63422, 24
descriptor.63422:
	.word	.LC1120
	.word	__func__.63423
	.word	.LC1549
	.word	.LC26
	.byte	100
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63425, %object
	.size	descriptor.63425, 24
descriptor.63425:
	.word	.LC1120
	.word	__func__.63423
	.word	.LC1549
	.word	.LC27
	.byte	107
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63412, %object
	.size	descriptor.63412, 24
descriptor.63412:
	.word	.LC1120
	.word	__func__.63413
	.word	.LC1549
	.word	.LC22
	.byte	82
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63390, %object
	.size	descriptor.63390, 24
descriptor.63390:
	.word	.LC1120
	.word	__func__.63391
	.word	.LC1549
	.word	.LC23
	.byte	8
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63394, %object
	.size	descriptor.63394, 24
descriptor.63394:
	.word	.LC1120
	.word	__func__.63391
	.word	.LC1549
	.word	.LC24
	.byte	23
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63395, %object
	.size	descriptor.63395, 24
descriptor.63395:
	.word	.LC1120
	.word	__func__.63391
	.word	.LC1549
	.word	.LC25
	.byte	41
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25256, %object
	.size	descriptor.25256, 24
descriptor.25256:
	.word	.LC1120
	.word	__func__.25257
	.word	.LC102
	.word	.LC28
	.byte	97
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25261, %object
	.size	descriptor.25261, 24
descriptor.25261:
	.word	.LC1120
	.word	__func__.25257
	.word	.LC102
	.word	.LC29
	.byte	103
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38266, %object
	.size	descriptor.38266, 24
descriptor.38266:
	.word	.LC1120
	.word	__func__.38267
	.word	.LC1751
	.word	.LC31
	.byte	90
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38275, %object
	.size	descriptor.38275, 24
descriptor.38275:
	.word	.LC1120
	.word	__func__.38267
	.word	.LC1751
	.word	.LC17
	.byte	135
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57142, %object
	.size	descriptor.57142, 24
descriptor.57142:
	.word	.LC1120
	.word	__func__.57143
	.word	.LC1679
	.word	.LC16
	.byte	53
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57147, %object
	.size	descriptor.57147, 24
descriptor.57147:
	.word	.LC1120
	.word	__func__.57143
	.word	.LC1679
	.word	.LC18
	.byte	82
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57146, %object
	.size	descriptor.57146, 24
descriptor.57146:
	.word	.LC1120
	.word	__func__.57143
	.word	.LC1679
	.word	.LC17
	.byte	75
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58196, %object
	.size	descriptor.58196, 24
descriptor.58196:
	.word	.LC1120
	.word	__func__.58190
	.word	.LC1612
	.word	.LC14
	.byte	62
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63453, %object
	.size	descriptor.63453, 24
descriptor.63453:
	.word	.LC1120
	.word	__func__.63454
	.word	.LC1549
	.word	.LC16
	.byte	187
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63466, %object
	.size	descriptor.63466, 24
descriptor.63466:
	.word	.LC1120
	.word	__func__.63454
	.word	.LC1549
	.word	.LC43
	.byte	7
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63469, %object
	.size	descriptor.63469, 24
descriptor.63469:
	.word	.LC1120
	.word	__func__.63454
	.word	.LC1549
	.word	.LC44
	.byte	11
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63477, %object
	.size	descriptor.63477, 24
descriptor.63477:
	.word	.LC1120
	.word	__func__.63454
	.word	.LC1549
	.word	.LC45
	.byte	44
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63480, %object
	.size	descriptor.63480, 24
descriptor.63480:
	.word	.LC1120
	.word	__func__.63454
	.word	.LC1549
	.word	.LC46
	.byte	49
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63485, %object
	.size	descriptor.63485, 24
descriptor.63485:
	.word	.LC1120
	.word	__func__.63454
	.word	.LC1549
	.word	.LC17
	.byte	96
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63486, %object
	.size	descriptor.63486, 24
descriptor.63486:
	.word	.LC1120
	.word	__func__.63454
	.word	.LC1549
	.word	.LC48
	.byte	103
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46084, %object
	.size	descriptor.46084, 24
descriptor.46084:
	.word	.LC1120
	.word	__func__.46085
	.word	.LC89
	.word	.LC97
	.byte	41
	.byte	9
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46086, %object
	.size	descriptor.46086, 24
descriptor.46086:
	.word	.LC1120
	.word	__func__.46085
	.word	.LC89
	.word	.LC98
	.byte	52
	.byte	9
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46087, %object
	.size	descriptor.46087, 24
descriptor.46087:
	.word	.LC1120
	.word	__func__.46085
	.word	.LC89
	.word	.LC99
	.byte	71
	.byte	9
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30912, %object
	.size	descriptor.30912, 24
descriptor.30912:
	.word	.LC1120
	.word	__func__.30913
	.word	.LC1760
	.word	.LC111
	.byte	209
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30900, %object
	.size	descriptor.30900, 24
descriptor.30900:
	.word	.LC1120
	.word	__func__.30901
	.word	.LC1760
	.word	.LC112
	.byte	175
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.41014, %object
	.size	descriptor.41014, 24
descriptor.41014:
	.word	.LC1120
	.word	__func__.41015
	.word	.LC1748
	.word	.LC113
	.byte	69
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48616, %object
	.size	descriptor.48616, 24
descriptor.48616:
	.word	.LC1120
	.word	__func__.48612
	.word	.LC1731
	.word	.LC115
	.byte	181
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49324, %object
	.size	descriptor.49324, 24
descriptor.49324:
	.word	.LC1120
	.word	__func__.49323
	.word	.LC1730
	.word	.LC118
	.byte	97
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49331, %object
	.size	descriptor.49331, 24
descriptor.49331:
	.word	.LC1120
	.word	__func__.49330
	.word	.LC1730
	.word	.LC118
	.byte	117
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49436, %object
	.size	descriptor.49436, 24
descriptor.49436:
	.word	.LC1120
	.word	__func__.49437
	.word	.LC1730
	.word	.LC120
	.byte	169
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49281, %object
	.size	descriptor.49281, 24
descriptor.49281:
	.word	.LC1120
	.word	__func__.49282
	.word	.LC1730
	.word	.LC121
	.byte	244
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49274, %object
	.size	descriptor.49274, 24
descriptor.49274:
	.word	.LC1120
	.word	__func__.49275
	.word	.LC1730
	.word	.LC121
	.byte	237
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50070, %object
	.size	descriptor.50070, 24
descriptor.50070:
	.word	.LC1120
	.word	__func__.50071
	.word	.LC1725
	.word	.LC122
	.byte	230
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50985, %object
	.size	descriptor.50985, 24
descriptor.50985:
	.word	.LC1120
	.word	__func__.50984
	.word	.LC1723
	.word	.LC124
	.byte	130
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51048, %object
	.size	descriptor.51048, 24
descriptor.51048:
	.word	.LC1120
	.word	__func__.51049
	.word	.LC1723
	.word	.LC125
	.byte	70
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51996, %object
	.size	descriptor.51996, 24
descriptor.51996:
	.word	.LC1120
	.word	__func__.51995
	.word	.LC1721
	.word	.LC124
	.byte	183
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57488, %object
	.size	descriptor.57488, 24
descriptor.57488:
	.word	.LC1120
	.word	__func__.57486
	.word	.LC1636
	.word	.LC1664
	.byte	233
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57782, %object
	.size	descriptor.57782, 24
descriptor.57782:
	.word	.LC1120
	.word	__func__.57783
	.word	.LC1626
	.word	.LC118
	.byte	128
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57789, %object
	.size	descriptor.57789, 24
descriptor.57789:
	.word	.LC1120
	.word	__func__.57790
	.word	.LC1626
	.word	.LC118
	.byte	142
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57761, %object
	.size	descriptor.57761, 24
descriptor.57761:
	.word	.LC1120
	.word	__func__.57762
	.word	.LC1626
	.word	.LC1634
	.byte	89
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57754, %object
	.size	descriptor.57754, 24
descriptor.57754:
	.word	.LC1120
	.word	__func__.57755
	.word	.LC1626
	.word	.LC1634
	.byte	81
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62400, %object
	.size	descriptor.62400, 24
descriptor.62400:
	.word	.LC1120
	.word	__func__.62401
	.word	.LC1563
	.word	.LC1570
	.byte	74
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62253, %object
	.size	descriptor.62253, 24
descriptor.62253:
	.word	.LC1120
	.word	__func__.62254
	.word	.LC1563
	.word	.LC1573
	.byte	137
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62404, %object
	.size	descriptor.62404, 24
descriptor.62404:
	.word	.LC1120
	.word	__func__.62401
	.word	.LC1563
	.word	.LC1569
	.byte	79
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62284, %object
	.size	descriptor.62284, 24
descriptor.62284:
	.word	.LC1120
	.word	__func__.62285
	.word	.LC1563
	.word	.LC1573
	.byte	174
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62406, %object
	.size	descriptor.62406, 24
descriptor.62406:
	.word	.LC1120
	.word	__func__.62401
	.word	.LC1563
	.word	.LC1568
	.byte	84
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62322, %object
	.size	descriptor.62322, 24
descriptor.62322:
	.word	.LC1120
	.word	__func__.62323
	.word	.LC1563
	.word	.LC1572
	.byte	228
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62408, %object
	.size	descriptor.62408, 24
descriptor.62408:
	.word	.LC1120
	.word	__func__.62401
	.word	.LC1563
	.word	.LC1567
	.byte	89
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62364, %object
	.size	descriptor.62364, 24
descriptor.62364:
	.word	.LC1120
	.word	__func__.62365
	.word	.LC1563
	.word	.LC1571
	.byte	26
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62410, %object
	.size	descriptor.62410, 24
descriptor.62410:
	.word	.LC1120
	.word	__func__.62401
	.word	.LC1563
	.word	.LC1566
	.byte	104
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.64973, %object
	.size	descriptor.64973, 24
descriptor.64973:
	.word	.LC1120
	.word	__func__.64974
	.word	.LC890
	.word	.LC1495
	.byte	91
	.byte	13
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.64603, %object
	.size	descriptor.64603, 24
descriptor.64603:
	.word	.LC1120
	.word	__func__.64602
	.word	.LC890
	.word	.LC1515
	.byte	222
	.byte	10
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.64587, %object
	.size	descriptor.64587, 24
descriptor.64587:
	.word	.LC1120
	.word	__func__.64588
	.word	.LC890
	.word	.LC1516
	.byte	188
	.byte	10
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53410, %object
	.size	descriptor.53410, 24
descriptor.53410:
	.word	.LC1120
	.word	__func__.53411
	.word	.LC1707
	.word	.LC152
	.byte	91
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.39000, %object
	.size	descriptor.39000, 24
descriptor.39000:
	.word	.LC1120
	.word	__func__.39001
	.word	.LC1749
	.word	.LC153
	.byte	222
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.39002, %object
	.size	descriptor.39002, 24
descriptor.39002:
	.word	.LC1120
	.word	__func__.39001
	.word	.LC1749
	.word	.LC154
	.byte	225
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.39016, %object
	.size	descriptor.39016, 24
descriptor.39016:
	.word	.LC1120
	.word	__func__.39001
	.word	.LC1749
	.word	.LC17
	.byte	27
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38968, %object
	.size	descriptor.38968, 24
descriptor.38968:
	.word	.LC1120
	.word	__func__.38969
	.word	.LC1749
	.word	.LC157
	.byte	153
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38981, %object
	.size	descriptor.38981, 24
descriptor.38981:
	.word	.LC1120
	.word	__func__.38969
	.word	.LC1749
	.word	.LC159
	.byte	179
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38987, %object
	.size	descriptor.38987, 24
descriptor.38987:
	.word	.LC1120
	.word	__func__.38969
	.word	.LC1749
	.word	.LC161
	.byte	204
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57557, %object
	.size	descriptor.57557, 24
descriptor.57557:
	.word	.LC1120
	.word	__func__.57558
	.word	.LC1636
	.word	.LC1647
	.byte	253
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38835, %object
	.size	descriptor.38835, 24
descriptor.38835:
	.word	.LC1120
	.word	__func__.38836
	.word	.LC1749
	.word	.LC164
	.byte	73
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47318, %object
	.size	descriptor.47318, 24
descriptor.47318:
	.word	.LC1120
	.word	__func__.47319
	.word	.LC675
	.word	.LC166
	.byte	1
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.32039, %object
	.size	descriptor.32039, 24
descriptor.32039:
	.word	.LC1120
	.word	__func__.32040
	.word	.LC1759
	.word	.LC167
	.byte	170
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.37361, %object
	.size	descriptor.37361, 24
descriptor.37361:
	.word	.LC1120
	.word	__func__.37362
	.word	.LC1754
	.word	.LC17
	.byte	91
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48303, %object
	.size	descriptor.48303, 24
descriptor.48303:
	.word	.LC1120
	.word	__func__.48304
	.word	.LC1734
	.word	.LC170
	.byte	159
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48312, %object
	.size	descriptor.48312, 24
descriptor.48312:
	.word	.LC1120
	.word	__func__.48304
	.word	.LC1734
	.word	.LC172
	.byte	182
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48379, %object
	.size	descriptor.48379, 24
descriptor.48379:
	.word	.LC1120
	.word	__func__.48378
	.word	.LC1734
	.word	.LC175
	.byte	158
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48694, %object
	.size	descriptor.48694, 24
descriptor.48694:
	.word	.LC1120
	.word	__func__.48695
	.word	.LC1731
	.word	.LC170
	.byte	133
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48687, %object
	.size	descriptor.48687, 24
descriptor.48687:
	.word	.LC1120
	.word	__func__.48688
	.word	.LC1731
	.word	.LC170
	.byte	107
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52051, %object
	.size	descriptor.52051, 24
descriptor.52051:
	.word	.LC1120
	.word	__func__.52052
	.word	.LC1721
	.word	.LC177
	.byte	89
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52520, %object
	.size	descriptor.52520, 24
descriptor.52520:
	.word	.LC1120
	.word	__func__.52521
	.word	.LC1716
	.word	.LC178
	.byte	156
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31145, %object
	.size	descriptor.31145, 24
descriptor.31145:
	.word	.LC1120
	.word	__func__.31146
	.word	.LC1760
	.word	.LC206
	.byte	79
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49769, %object
	.size	descriptor.49769, 24
descriptor.49769:
	.word	.LC1120
	.word	__func__.49768
	.word	.LC1726
	.word	.LC208
	.byte	47
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31851, %object
	.size	descriptor.31851, 24
descriptor.31851:
	.word	.LC1120
	.word	__func__.31852
	.word	.LC1759
	.word	.LC215
	.byte	194
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31896, %object
	.size	descriptor.31896, 24
descriptor.31896:
	.word	.LC1120
	.word	__func__.31897
	.word	.LC1759
	.word	.LC17
	.byte	95
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31931, %object
	.size	descriptor.31931, 24
descriptor.31931:
	.word	.LC1120
	.word	__func__.31932
	.word	.LC1759
	.word	.LC221
	.byte	159
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48670, %object
	.size	descriptor.48670, 24
descriptor.48670:
	.word	.LC1120
	.word	__func__.48671
	.word	.LC1731
	.word	.LC224
	.byte	48
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48672, %object
	.size	descriptor.48672, 24
descriptor.48672:
	.word	.LC1120
	.word	__func__.48671
	.word	.LC1731
	.word	.LC225
	.byte	53
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38117, %object
	.size	descriptor.38117, 24
descriptor.38117:
	.word	.LC1120
	.word	__func__.38118
	.word	.LC1751
	.word	.LC227
	.byte	193
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48754, %object
	.size	descriptor.48754, 24
descriptor.48754:
	.word	.LC1120
	.word	__func__.48755
	.word	.LC1731
	.word	.LC228
	.byte	89
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63144, %object
	.size	descriptor.63144, 24
descriptor.63144:
	.word	.LC1120
	.word	__func__.63145
	.word	.LC1556
	.word	.LC1558
	.byte	239
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63146, %object
	.size	descriptor.63146, 24
descriptor.63146:
	.word	.LC1120
	.word	__func__.63145
	.word	.LC1556
	.word	.LC1557
	.byte	250
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55891, %object
	.size	descriptor.55891, 24
descriptor.55891:
	.word	.LC1120
	.word	__func__.55892
	.word	.LC58
	.word	.LC235
	.byte	163
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55532, %object
	.size	descriptor.55532, 24
descriptor.55532:
	.word	.LC1120
	.word	__func__.55533
	.word	.LC58
	.word	.LC236
	.byte	68
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54475, %object
	.size	descriptor.54475, 24
descriptor.54475:
	.word	.LC1120
	.word	__func__.54476
	.word	.LC1703
	.word	.LC237
	.byte	124
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54477, %object
	.size	descriptor.54477, 24
descriptor.54477:
	.word	.LC1120
	.word	__func__.54476
	.word	.LC1703
	.word	.LC238
	.byte	135
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54478, %object
	.size	descriptor.54478, 24
descriptor.54478:
	.word	.LC1120
	.word	__func__.54476
	.word	.LC1703
	.word	.LC239
	.byte	139
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54483, %object
	.size	descriptor.54483, 24
descriptor.54483:
	.word	.LC1120
	.word	__func__.54476
	.word	.LC1703
	.word	.LC240
	.byte	160
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54530, %object
	.size	descriptor.54530, 24
descriptor.54530:
	.word	.LC1120
	.word	__func__.54531
	.word	.LC1703
	.word	.LC242
	.byte	50
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53338, %object
	.size	descriptor.53338, 24
descriptor.53338:
	.word	.LC1120
	.word	__func__.53339
	.word	.LC1707
	.word	.LC17
	.byte	78
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53340, %object
	.size	descriptor.53340, 24
descriptor.53340:
	.word	.LC1120
	.word	__func__.53339
	.word	.LC1707
	.word	.LC243
	.byte	85
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53152, %object
	.size	descriptor.53152, 24
descriptor.53152:
	.word	.LC1120
	.word	__func__.53153
	.word	.LC1710
	.word	.LC245
	.byte	131
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52832, %object
	.size	descriptor.52832, 24
descriptor.52832:
	.word	.LC1120
	.word	__func__.52833
	.word	.LC1711
	.word	.LC246
	.byte	57
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49784, %object
	.size	descriptor.49784, 24
descriptor.49784:
	.word	.LC1120
	.word	__func__.49785
	.word	.LC1726
	.word	.LC248
	.byte	73
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52062, %object
	.size	descriptor.52062, 24
descriptor.52062:
	.word	.LC1120
	.word	__func__.52063
	.word	.LC1721
	.word	.LC177
	.byte	109
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52150, %object
	.size	descriptor.52150, 24
descriptor.52150:
	.word	.LC1120
	.word	__func__.52151
	.word	.LC1721
	.word	.LC255
	.byte	74
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52688, %object
	.size	descriptor.52688, 24
descriptor.52688:
	.word	.LC1120
	.word	__func__.52689
	.word	.LC1716
	.word	.LC257
	.byte	125
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51434, %object
	.size	descriptor.51434, 24
descriptor.51434:
	.word	.LC1120
	.word	__func__.51435
	.word	.LC1722
	.word	.LC263
	.byte	14
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58618, %object
	.size	descriptor.58618, 24
descriptor.58618:
	.word	.LC1120
	.word	__func__.58619
	.word	.LC1608
	.word	.LC1609
	.byte	15
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49810, %object
	.size	descriptor.49810, 24
descriptor.49810:
	.word	.LC1120
	.word	__func__.49811
	.word	.LC1726
	.word	.LC267
	.byte	122
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49812, %object
	.size	descriptor.49812, 24
descriptor.49812:
	.word	.LC1120
	.word	__func__.49811
	.word	.LC1726
	.word	.LC268
	.byte	137
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50131, %object
	.size	descriptor.50131, 24
descriptor.50131:
	.word	.LC1120
	.word	__func__.50132
	.word	.LC1725
	.word	.LC274
	.byte	136
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50134, %object
	.size	descriptor.50134, 24
descriptor.50134:
	.word	.LC1120
	.word	__func__.50132
	.word	.LC1725
	.word	.LC276
	.byte	150
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58347, %object
	.size	descriptor.58347, 24
descriptor.58347:
	.word	.LC1120
	.word	__func__.58342
	.word	.LC1612
	.word	.LC1613
	.byte	197
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57687, %object
	.size	descriptor.57687, 24
descriptor.57687:
	.word	.LC1120
	.word	__func__.57688
	.word	.LC1636
	.word	.LC1637
	.byte	162
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38543, %object
	.size	descriptor.38543, 24
descriptor.38543:
	.word	.LC1120
	.word	__func__.38544
	.word	.LC1751
	.word	.LC286
	.byte	41
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50085, %object
	.size	descriptor.50085, 24
descriptor.50085:
	.word	.LC1120
	.word	__func__.50086
	.word	.LC1725
	.word	.LC288
	.byte	249
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50091, %object
	.size	descriptor.50091, 24
descriptor.50091:
	.word	.LC1120
	.word	__func__.50086
	.word	.LC1725
	.word	.LC291
	.byte	13
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50098, %object
	.size	descriptor.50098, 24
descriptor.50098:
	.word	.LC1120
	.word	__func__.50086
	.word	.LC1725
	.word	.LC292
	.byte	17
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50102, %object
	.size	descriptor.50102, 24
descriptor.50102:
	.word	.LC1120
	.word	__func__.50086
	.word	.LC1725
	.word	.LC294
	.byte	36
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50103, %object
	.size	descriptor.50103, 24
descriptor.50103:
	.word	.LC1120
	.word	__func__.50086
	.word	.LC1725
	.word	.LC296
	.byte	46
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55660, %object
	.size	descriptor.55660, 24
descriptor.55660:
	.word	.LC1120
	.word	__func__.55661
	.word	.LC58
	.word	.LC297
	.byte	94
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55662, %object
	.size	descriptor.55662, 24
descriptor.55662:
	.word	.LC1120
	.word	__func__.55661
	.word	.LC58
	.word	.LC298
	.byte	97
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55663, %object
	.size	descriptor.55663, 24
descriptor.55663:
	.word	.LC1120
	.word	__func__.55661
	.word	.LC58
	.word	.LC299
	.byte	105
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55673, %object
	.size	descriptor.55673, 24
descriptor.55673:
	.word	.LC1120
	.word	__func__.55661
	.word	.LC58
	.word	.LC300
	.byte	128
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55680, %object
	.size	descriptor.55680, 24
descriptor.55680:
	.word	.LC1120
	.word	__func__.55661
	.word	.LC58
	.word	.LC301
	.byte	139
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55681, %object
	.size	descriptor.55681, 24
descriptor.55681:
	.word	.LC1120
	.word	__func__.55661
	.word	.LC58
	.word	.LC302
	.byte	151
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55682, %object
	.size	descriptor.55682, 24
descriptor.55682:
	.word	.LC1120
	.word	__func__.55661
	.word	.LC58
	.word	.LC303
	.byte	160
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54311, %object
	.size	descriptor.54311, 24
descriptor.54311:
	.word	.LC1120
	.word	__func__.54312
	.word	.LC1703
	.word	.LC304
	.byte	52
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54313, %object
	.size	descriptor.54313, 24
descriptor.54313:
	.word	.LC1120
	.word	__func__.54312
	.word	.LC1703
	.word	.LC305
	.byte	55
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54322, %object
	.size	descriptor.54322, 24
descriptor.54322:
	.word	.LC1120
	.word	__func__.54312
	.word	.LC1703
	.word	.LC300
	.byte	87
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54329, %object
	.size	descriptor.54329, 24
descriptor.54329:
	.word	.LC1120
	.word	__func__.54312
	.word	.LC1703
	.word	.LC302
	.byte	112
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54330, %object
	.size	descriptor.54330, 24
descriptor.54330:
	.word	.LC1120
	.word	__func__.54312
	.word	.LC1703
	.word	.LC306
	.byte	128
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53518, %object
	.size	descriptor.53518, 24
descriptor.53518:
	.word	.LC1120
	.word	__func__.53519
	.word	.LC1707
	.word	.LC286
	.byte	83
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53526, %object
	.size	descriptor.53526, 24
descriptor.53526:
	.word	.LC1120
	.word	__func__.53519
	.word	.LC1707
	.word	.LC286
	.byte	96
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53052, %object
	.size	descriptor.53052, 24
descriptor.53052:
	.word	.LC1120
	.word	__func__.53053
	.word	.LC1710
	.word	.LC307
	.byte	64
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53054, %object
	.size	descriptor.53054, 24
descriptor.53054:
	.word	.LC1120
	.word	__func__.53053
	.word	.LC1710
	.word	.LC308
	.byte	76
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53066, %object
	.size	descriptor.53066, 24
descriptor.53066:
	.word	.LC1120
	.word	__func__.53053
	.word	.LC1710
	.word	.LC309
	.byte	97
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53067, %object
	.size	descriptor.53067, 24
descriptor.53067:
	.word	.LC1120
	.word	__func__.53053
	.word	.LC1710
	.word	.LC300
	.byte	102
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53074, %object
	.size	descriptor.53074, 24
descriptor.53074:
	.word	.LC1120
	.word	__func__.53053
	.word	.LC1710
	.word	.LC302
	.byte	120
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53075, %object
	.size	descriptor.53075, 24
descriptor.53075:
	.word	.LC1120
	.word	__func__.53053
	.word	.LC1710
	.word	.LC310
	.byte	133
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38567, %object
	.size	descriptor.38567, 24
descriptor.38567:
	.word	.LC1120
	.word	__func__.38568
	.word	.LC1751
	.word	.LC286
	.byte	95
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50114, %object
	.size	descriptor.50114, 24
descriptor.50114:
	.word	.LC1120
	.word	__func__.50115
	.word	.LC1725
	.word	.LC317
	.byte	64
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50116, %object
	.size	descriptor.50116, 24
descriptor.50116:
	.word	.LC1120
	.word	__func__.50115
	.word	.LC1725
	.word	.LC318
	.byte	67
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50117, %object
	.size	descriptor.50117, 24
descriptor.50117:
	.word	.LC1120
	.word	__func__.50115
	.word	.LC1725
	.word	.LC319
	.byte	73
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50118, %object
	.size	descriptor.50118, 24
descriptor.50118:
	.word	.LC1120
	.word	__func__.50115
	.word	.LC1725
	.word	.LC321
	.byte	83
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50122, %object
	.size	descriptor.50122, 24
descriptor.50122:
	.word	.LC1120
	.word	__func__.50115
	.word	.LC1725
	.word	.LC326
	.byte	125
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.65105, %object
	.size	descriptor.65105, 24
descriptor.65105:
	.word	.LC1120
	.word	__func__.65106
	.word	.LC890
	.word	.LC1494
	.byte	156
	.byte	14
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.65107, %object
	.size	descriptor.65107, 24
descriptor.65107:
	.word	.LC1120
	.word	__func__.65106
	.word	.LC890
	.word	.LC1493
	.byte	161
	.byte	14
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48635, %object
	.size	descriptor.48635, 24
descriptor.48635:
	.word	.LC1120
	.word	__func__.48636
	.word	.LC1731
	.word	.LC334
	.byte	216
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48642, %object
	.size	descriptor.48642, 24
descriptor.48642:
	.word	.LC1120
	.word	__func__.48636
	.word	.LC1731
	.word	.LC335
	.byte	230
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48431, %object
	.size	descriptor.48431, 24
descriptor.48431:
	.word	.LC1120
	.word	__func__.48432
	.word	.LC1734
	.word	.LC177
	.byte	68
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48433, %object
	.size	descriptor.48433, 24
descriptor.48433:
	.word	.LC1120
	.word	__func__.48432
	.word	.LC1734
	.word	.LC340
	.byte	75
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48813, %object
	.size	descriptor.48813, 24
descriptor.48813:
	.word	.LC1120
	.word	__func__.48814
	.word	.LC1731
	.word	.LC177
	.byte	18
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48799, %object
	.size	descriptor.48799, 24
descriptor.48799:
	.word	.LC1120
	.word	__func__.48800
	.word	.LC1731
	.word	.LC177
	.byte	249
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49475, %object
	.size	descriptor.49475, 24
descriptor.49475:
	.word	.LC1120
	.word	__func__.49476
	.word	.LC1730
	.word	.LC177
	.byte	23
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49877, %object
	.size	descriptor.49877, 24
descriptor.49877:
	.word	.LC1120
	.word	__func__.49878
	.word	.LC1726
	.word	.LC177
	.byte	41
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49862, %object
	.size	descriptor.49862, 24
descriptor.49862:
	.word	.LC1120
	.word	__func__.49863
	.word	.LC1726
	.word	.LC177
	.byte	8
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51077, %object
	.size	descriptor.51077, 24
descriptor.51077:
	.word	.LC1120
	.word	__func__.51078
	.word	.LC1723
	.word	.LC177
	.byte	126
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48744, %object
	.size	descriptor.48744, 24
descriptor.48744:
	.word	.LC1120
	.word	__func__.48745
	.word	.LC1731
	.word	.LC228
	.byte	60
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48746, %object
	.size	descriptor.48746, 24
descriptor.48746:
	.word	.LC1120
	.word	__func__.48745
	.word	.LC1731
	.word	.LC268
	.byte	71
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49232, %object
	.size	descriptor.49232, 24
descriptor.49232:
	.word	.LC1120
	.word	__func__.49233
	.word	.LC1730
	.word	.LC343
	.byte	88
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49237, %object
	.size	descriptor.49237, 24
descriptor.49237:
	.word	.LC1120
	.word	__func__.49233
	.word	.LC1730
	.word	.LC344
	.byte	94
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49454, %object
	.size	descriptor.49454, 24
descriptor.49454:
	.word	.LC1120
	.word	__func__.49455
	.word	.LC1730
	.word	.LC345
	.byte	193
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57927, %object
	.size	descriptor.57927, 24
descriptor.57927:
	.word	.LC1120
	.word	__func__.57928
	.word	.LC1626
	.word	.LC345
	.byte	116
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49445, %object
	.size	descriptor.49445, 24
descriptor.49445:
	.word	.LC1120
	.word	__func__.49446
	.word	.LC1730
	.word	.LC347
	.byte	179
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57918, %object
	.size	descriptor.57918, 24
descriptor.57918:
	.word	.LC1120
	.word	__func__.57919
	.word	.LC1626
	.word	.LC347
	.byte	100
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49428, %object
	.size	descriptor.49428, 24
descriptor.49428:
	.word	.LC1120
	.word	__func__.49424
	.word	.LC1730
	.word	.LC352
	.byte	104
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49310, %object
	.size	descriptor.49310, 24
descriptor.49310:
	.word	.LC1120
	.word	__func__.49309
	.word	.LC1730
	.word	.LC354
	.byte	59
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49317, %object
	.size	descriptor.49317, 24
descriptor.49317:
	.word	.LC1120
	.word	__func__.49316
	.word	.LC1730
	.word	.LC354
	.byte	78
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49429, %object
	.size	descriptor.49429, 24
descriptor.49429:
	.word	.LC1120
	.word	__func__.49424
	.word	.LC1730
	.word	.LC357
	.byte	157
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57820, %object
	.size	descriptor.57820, 24
descriptor.57820:
	.word	.LC1120
	.word	__func__.57821
	.word	.LC1626
	.word	.LC1633
	.byte	207
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57768, %object
	.size	descriptor.57768, 24
descriptor.57768:
	.word	.LC1120
	.word	__func__.57769
	.word	.LC1626
	.word	.LC354
	.byte	100
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57775, %object
	.size	descriptor.57775, 24
descriptor.57775:
	.word	.LC1120
	.word	__func__.57776
	.word	.LC1626
	.word	.LC354
	.byte	114
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57822, %object
	.size	descriptor.57822, 24
descriptor.57822:
	.word	.LC1120
	.word	__func__.57821
	.word	.LC1626
	.word	.LC1632
	.byte	81
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57797, %object
	.size	descriptor.57797, 24
descriptor.57797:
	.word	.LC1120
	.word	__func__.57798
	.word	.LC1626
	.word	.LC919
	.byte	156
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38604, %object
	.size	descriptor.38604, 24
descriptor.38604:
	.word	.LC1120
	.word	__func__.38605
	.word	.LC1751
	.word	.LC386
	.byte	239
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45443, %object
	.size	descriptor.45443, 24
descriptor.45443:
	.word	.LC1120
	.word	__func__.45444
	.word	.LC1744
	.word	.LC414
	.byte	221
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.64625, %object
	.size	descriptor.64625, 24
descriptor.64625:
	.word	.LC1120
	.word	__func__.64626
	.word	.LC890
	.word	.LC1514
	.byte	14
	.byte	11
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45496, %object
	.size	descriptor.45496, 24
descriptor.45496:
	.word	.LC1120
	.word	__func__.45497
	.word	.LC1744
	.word	.LC511
	.byte	130
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45498, %object
	.size	descriptor.45498, 24
descriptor.45498:
	.word	.LC1120
	.word	__func__.45497
	.word	.LC1744
	.word	.LC512
	.byte	135
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45529, %object
	.size	descriptor.45529, 24
descriptor.45529:
	.word	.LC1120
	.word	__func__.45530
	.word	.LC1744
	.word	.LC513
	.byte	221
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45531, %object
	.size	descriptor.45531, 24
descriptor.45531:
	.word	.LC1120
	.word	__func__.45530
	.word	.LC1744
	.word	.LC514
	.byte	225
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45628, %object
	.size	descriptor.45628, 24
descriptor.45628:
	.word	.LC1120
	.word	__func__.45629
	.word	.LC89
	.word	.LC515
	.byte	219
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45632, %object
	.size	descriptor.45632, 24
descriptor.45632:
	.word	.LC1120
	.word	__func__.45629
	.word	.LC89
	.word	.LC520
	.byte	240
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45712, %object
	.size	descriptor.45712, 24
descriptor.45712:
	.word	.LC1120
	.word	__func__.45713
	.word	.LC89
	.word	.LC521
	.byte	172
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45704, %object
	.size	descriptor.45704, 24
descriptor.45704:
	.word	.LC1120
	.word	__func__.45705
	.word	.LC89
	.word	.LC521
	.byte	151
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54403, %object
	.size	descriptor.54403, 24
descriptor.54403:
	.word	.LC1120
	.word	__func__.54404
	.word	.LC1703
	.word	.LC522
	.byte	100
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54405, %object
	.size	descriptor.54405, 24
descriptor.54405:
	.word	.LC1120
	.word	__func__.54404
	.word	.LC1703
	.word	.LC523
	.byte	103
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54407, %object
	.size	descriptor.54407, 24
descriptor.54407:
	.word	.LC1120
	.word	__func__.54404
	.word	.LC1703
	.word	.LC302
	.byte	125
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54408, %object
	.size	descriptor.54408, 24
descriptor.54408:
	.word	.LC1120
	.word	__func__.54404
	.word	.LC1703
	.word	.LC524
	.byte	128
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54415, %object
	.size	descriptor.54415, 24
descriptor.54415:
	.word	.LC1120
	.word	__func__.54404
	.word	.LC1703
	.word	.LC525
	.byte	166
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54418, %object
	.size	descriptor.54418, 24
descriptor.54418:
	.word	.LC1120
	.word	__func__.54404
	.word	.LC1703
	.word	.LC526
	.byte	175
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62428, %object
	.size	descriptor.62428, 24
descriptor.62428:
	.word	.LC1120
	.word	__func__.62429
	.word	.LC1563
	.word	.LC1565
	.byte	139
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62442, %object
	.size	descriptor.62442, 24
descriptor.62442:
	.word	.LC1120
	.word	__func__.62429
	.word	.LC1563
	.word	.LC1564
	.byte	227
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.37514, %object
	.size	descriptor.37514, 24
descriptor.37514:
	.word	.LC1120
	.word	__func__.37515
	.word	.LC1754
	.word	.LC545
	.byte	221
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48292, %object
	.size	descriptor.48292, 24
descriptor.48292:
	.word	.LC1120
	.word	__func__.48293
	.word	.LC1734
	.word	.LC170
	.byte	138
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50058, %object
	.size	descriptor.50058, 24
descriptor.50058:
	.word	.LC1120
	.word	__func__.50059
	.word	.LC1725
	.word	.LC546
	.byte	209
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50060, %object
	.size	descriptor.50060, 24
descriptor.50060:
	.word	.LC1120
	.word	__func__.50059
	.word	.LC1725
	.word	.LC547
	.byte	212
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50148, %object
	.size	descriptor.50148, 24
descriptor.50148:
	.word	.LC1120
	.word	__func__.50144
	.word	.LC1725
	.word	.LC549
	.byte	178
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50993, %object
	.size	descriptor.50993, 24
descriptor.50993:
	.word	.LC1120
	.word	__func__.50992
	.word	.LC1723
	.word	.LC550
	.byte	163
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51005, %object
	.size	descriptor.51005, 24
descriptor.51005:
	.word	.LC1120
	.word	__func__.51006
	.word	.LC1723
	.word	.LC551
	.byte	181
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51400, %object
	.size	descriptor.51400, 24
descriptor.51400:
	.word	.LC1120
	.word	__func__.51401
	.word	.LC1722
	.word	.LC553
	.byte	185
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52006, %object
	.size	descriptor.52006, 24
descriptor.52006:
	.word	.LC1120
	.word	__func__.52005
	.word	.LC1721
	.word	.LC550
	.byte	222
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57885, %object
	.size	descriptor.57885, 24
descriptor.57885:
	.word	.LC1120
	.word	__func__.57886
	.word	.LC1626
	.word	.LC120
	.byte	27
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53497, %object
	.size	descriptor.53497, 24
descriptor.53497:
	.word	.LC1120
	.word	__func__.53498
	.word	.LC1707
	.word	.LC286
	.byte	49
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53499, %object
	.size	descriptor.53499, 24
descriptor.53499:
	.word	.LC1120
	.word	__func__.53498
	.word	.LC1707
	.word	.LC558
	.byte	53
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53397, %object
	.size	descriptor.53397, 24
descriptor.53397:
	.word	.LC1120
	.word	__func__.53398
	.word	.LC1707
	.word	.LC559
	.byte	66
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53399, %object
	.size	descriptor.53399, 24
descriptor.53399:
	.word	.LC1120
	.word	__func__.53398
	.word	.LC1707
	.word	.LC286
	.byte	68
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53400, %object
	.size	descriptor.53400, 24
descriptor.53400:
	.word	.LC1120
	.word	__func__.53398
	.word	.LC1707
	.word	.LC560
	.byte	73
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38937, %object
	.size	descriptor.38937, 24
descriptor.38937:
	.word	.LC1120
	.word	__func__.38936
	.word	.LC1749
	.word	.LC561
	.byte	61
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38842, %object
	.size	descriptor.38842, 24
descriptor.38842:
	.word	.LC1120
	.word	__func__.38843
	.word	.LC1749
	.word	.LC563
	.byte	91
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38959, %object
	.size	descriptor.38959, 24
descriptor.38959:
	.word	.LC1120
	.word	__func__.38958
	.word	.LC1749
	.word	.LC157
	.byte	136
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52344, %object
	.size	descriptor.52344, 24
descriptor.52344:
	.word	.LC1120
	.word	__func__.52345
	.word	.LC1716
	.word	.LC570
	.byte	248
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52388, %object
	.size	descriptor.52388, 24
descriptor.52388:
	.word	.LC1120
	.word	__func__.52389
	.word	.LC1716
	.word	.LC551
	.byte	92
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.37541, %object
	.size	descriptor.37541, 24
descriptor.37541:
	.word	.LC1120
	.word	__func__.37542
	.word	.LC1754
	.word	.LC267
	.byte	23
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51549, %object
	.size	descriptor.51549, 24
descriptor.51549:
	.word	.LC1120
	.word	__func__.51550
	.word	.LC1722
	.word	.LC551
	.byte	18
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52014, %object
	.size	descriptor.52014, 24
descriptor.52014:
	.word	.LC1120
	.word	__func__.52015
	.word	.LC1721
	.word	.LC551
	.byte	236
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52491, %object
	.size	descriptor.52491, 24
descriptor.52491:
	.word	.LC1120
	.word	__func__.52492
	.word	.LC1716
	.word	.LC551
	.byte	85
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.44575, %object
	.size	descriptor.44575, 24
descriptor.44575:
	.word	.LC1120
	.word	__func__.44576
	.word	.LC33
	.word	.LC590
	.byte	5
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38874, %object
	.size	descriptor.38874, 24
descriptor.38874:
	.word	.LC1120
	.word	__func__.38875
	.word	.LC1749
	.word	.LC591
	.byte	146
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49651, %object
	.size	descriptor.49651, 24
descriptor.49651:
	.word	.LC1120
	.word	__func__.49652
	.word	.LC1730
	.word	.LC592
	.byte	45
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56370, %object
	.size	descriptor.56370, 24
descriptor.56370:
	.word	.LC1120
	.word	__func__.56371
	.word	.LC1699
	.word	.LC594
	.byte	190
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56900, %object
	.size	descriptor.56900, 24
descriptor.56900:
	.word	.LC1120
	.word	__func__.56901
	.word	.LC1688
	.word	.LC597
	.byte	235
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56905, %object
	.size	descriptor.56905, 24
descriptor.56905:
	.word	.LC1120
	.word	__func__.56901
	.word	.LC1688
	.word	.LC598
	.byte	240
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57835, %object
	.size	descriptor.57835, 24
descriptor.57835:
	.word	.LC1120
	.word	__func__.57836
	.word	.LC1626
	.word	.LC1631
	.byte	111
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57426, %object
	.size	descriptor.57426, 24
descriptor.57426:
	.word	.LC1120
	.word	__func__.57427
	.word	.LC1636
	.word	.LC1672
	.byte	52
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57428, %object
	.size	descriptor.57428, 24
descriptor.57428:
	.word	.LC1120
	.word	__func__.57427
	.word	.LC1636
	.word	.LC671
	.byte	66
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58255, %object
	.size	descriptor.58255, 24
descriptor.58255:
	.word	.LC1120
	.word	__func__.58256
	.word	.LC1612
	.word	.LC1615
	.byte	13
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57909, %object
	.size	descriptor.57909, 24
descriptor.57909:
	.word	.LC1120
	.word	__func__.57910
	.word	.LC1626
	.word	.LC592
	.byte	89
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58250, %object
	.size	descriptor.58250, 24
descriptor.58250:
	.word	.LC1120
	.word	__func__.58251
	.word	.LC1612
	.word	.LC1616
	.byte	6
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57902, %object
	.size	descriptor.57902, 24
descriptor.57902:
	.word	.LC1120
	.word	__func__.57903
	.word	.LC1626
	.word	.LC833
	.byte	75
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57843, %object
	.size	descriptor.57843, 24
descriptor.57843:
	.word	.LC1120
	.word	__func__.57844
	.word	.LC1626
	.word	.LC1630
	.byte	121
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56554, %object
	.size	descriptor.56554, 24
descriptor.56554:
	.word	.LC1120
	.word	__func__.56548
	.word	.LC1688
	.word	.LC618
	.byte	214
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56560, %object
	.size	descriptor.56560, 24
descriptor.56560:
	.word	.LC1120
	.word	__func__.56548
	.word	.LC1688
	.word	.LC619
	.byte	224
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56562, %object
	.size	descriptor.56562, 24
descriptor.56562:
	.word	.LC1120
	.word	__func__.56548
	.word	.LC1688
	.word	.LC620
	.byte	237
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56564, %object
	.size	descriptor.56564, 24
descriptor.56564:
	.word	.LC1120
	.word	__func__.56548
	.word	.LC1688
	.word	.LC621
	.byte	244
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56566, %object
	.size	descriptor.56566, 24
descriptor.56566:
	.word	.LC1120
	.word	__func__.56548
	.word	.LC1688
	.word	.LC622
	.byte	252
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56570, %object
	.size	descriptor.56570, 24
descriptor.56570:
	.word	.LC1120
	.word	__func__.56548
	.word	.LC1688
	.word	.LC623
	.byte	19
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56572, %object
	.size	descriptor.56572, 24
descriptor.56572:
	.word	.LC1120
	.word	__func__.56548
	.word	.LC1688
	.word	.LC624
	.byte	29
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56574, %object
	.size	descriptor.56574, 24
descriptor.56574:
	.word	.LC1120
	.word	__func__.56548
	.word	.LC1688
	.word	.LC625
	.byte	39
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56576, %object
	.size	descriptor.56576, 24
descriptor.56576:
	.word	.LC1120
	.word	__func__.56548
	.word	.LC1688
	.word	.LC626
	.byte	47
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56578, %object
	.size	descriptor.56578, 24
descriptor.56578:
	.word	.LC1120
	.word	__func__.56548
	.word	.LC1688
	.word	.LC627
	.byte	61
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56580, %object
	.size	descriptor.56580, 24
descriptor.56580:
	.word	.LC1120
	.word	__func__.56548
	.word	.LC1688
	.word	.LC628
	.byte	69
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56582, %object
	.size	descriptor.56582, 24
descriptor.56582:
	.word	.LC1120
	.word	__func__.56548
	.word	.LC1688
	.word	.LC629
	.byte	76
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56586, %object
	.size	descriptor.56586, 24
descriptor.56586:
	.word	.LC1120
	.word	__func__.56548
	.word	.LC1688
	.word	.LC630
	.byte	91
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56588, %object
	.size	descriptor.56588, 24
descriptor.56588:
	.word	.LC1120
	.word	__func__.56548
	.word	.LC1688
	.word	.LC631
	.byte	101
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56598, %object
	.size	descriptor.56598, 24
descriptor.56598:
	.word	.LC1120
	.word	__func__.56548
	.word	.LC1688
	.word	.LC632
	.byte	154
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56600, %object
	.size	descriptor.56600, 24
descriptor.56600:
	.word	.LC1120
	.word	__func__.56548
	.word	.LC1688
	.word	.LC633
	.byte	165
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56602, %object
	.size	descriptor.56602, 24
descriptor.56602:
	.word	.LC1120
	.word	__func__.56548
	.word	.LC1688
	.word	.LC634
	.byte	177
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56604, %object
	.size	descriptor.56604, 24
descriptor.56604:
	.word	.LC1120
	.word	__func__.56548
	.word	.LC1688
	.word	.LC635
	.byte	189
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56606, %object
	.size	descriptor.56606, 24
descriptor.56606:
	.word	.LC1120
	.word	__func__.56548
	.word	.LC1688
	.word	.LC636
	.byte	197
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56608, %object
	.size	descriptor.56608, 24
descriptor.56608:
	.word	.LC1120
	.word	__func__.56548
	.word	.LC1688
	.word	.LC637
	.byte	204
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56610, %object
	.size	descriptor.56610, 24
descriptor.56610:
	.word	.LC1120
	.word	__func__.56548
	.word	.LC1688
	.word	.LC638
	.byte	213
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56612, %object
	.size	descriptor.56612, 24
descriptor.56612:
	.word	.LC1120
	.word	__func__.56548
	.word	.LC1688
	.word	.LC639
	.byte	222
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56614, %object
	.size	descriptor.56614, 24
descriptor.56614:
	.word	.LC1120
	.word	__func__.56548
	.word	.LC1688
	.word	.LC640
	.byte	229
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52879, %object
	.size	descriptor.52879, 24
descriptor.52879:
	.word	.LC1120
	.word	__func__.52880
	.word	.LC1711
	.word	.LC647
	.byte	218
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52424, %object
	.size	descriptor.52424, 24
descriptor.52424:
	.word	.LC1120
	.word	__func__.52425
	.word	.LC1716
	.word	.LC125
	.byte	201
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52549, %object
	.size	descriptor.52549, 24
descriptor.52549:
	.word	.LC1120
	.word	__func__.52547
	.word	.LC1716
	.word	.LC550
	.byte	11
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48599, %object
	.size	descriptor.48599, 24
descriptor.48599:
	.word	.LC1120
	.word	__func__.48600
	.word	.LC1731
	.word	.LC650
	.byte	151
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48601, %object
	.size	descriptor.48601, 24
descriptor.48601:
	.word	.LC1120
	.word	__func__.48600
	.word	.LC1731
	.word	.LC653
	.byte	156
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47303, %object
	.size	descriptor.47303, 24
descriptor.47303:
	.word	.LC1120
	.word	__func__.47302
	.word	.LC675
	.word	.LC166
	.byte	193
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.40959, %object
	.size	descriptor.40959, 24
descriptor.40959:
	.word	.LC1120
	.word	__func__.40960
	.word	.LC1748
	.word	.LC664
	.byte	200
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.40977, %object
	.size	descriptor.40977, 24
descriptor.40977:
	.word	.LC1120
	.word	__func__.40978
	.word	.LC1748
	.word	.LC664
	.byte	227
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.40998, %object
	.size	descriptor.40998, 24
descriptor.40998:
	.word	.LC1120
	.word	__func__.40999
	.word	.LC1748
	.word	.LC665
	.byte	20
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50016, %object
	.size	descriptor.50016, 24
descriptor.50016:
	.word	.LC1120
	.word	__func__.50015
	.word	.LC1725
	.word	.LC669
	.byte	107
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50020, %object
	.size	descriptor.50020, 24
descriptor.50020:
	.word	.LC1120
	.word	__func__.50015
	.word	.LC1725
	.word	.LC671
	.byte	122
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.44882, %object
	.size	descriptor.44882, 24
descriptor.44882:
	.word	.LC1120
	.word	__func__.44881
	.word	.LC33
	.word	.LC674
	.byte	47
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47623, %object
	.size	descriptor.47623, 24
descriptor.47623:
	.word	.LC1120
	.word	__func__.47624
	.word	.LC675
	.word	.LC676
	.byte	209
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56883, %object
	.size	descriptor.56883, 24
descriptor.56883:
	.word	.LC1120
	.word	__func__.56884
	.word	.LC1688
	.word	.LC677
	.byte	187
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62195, %object
	.size	descriptor.62195, 24
descriptor.62195:
	.word	.LC1120
	.word	__func__.62196
	.word	.LC1563
	.word	.LC1577
	.byte	11
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62219, %object
	.size	descriptor.62219, 24
descriptor.62219:
	.word	.LC1120
	.word	__func__.62220
	.word	.LC1563
	.word	.LC1575
	.byte	66
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62227, %object
	.size	descriptor.62227, 24
descriptor.62227:
	.word	.LC1120
	.word	__func__.62220
	.word	.LC1563
	.word	.LC1574
	.byte	80
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46177, %object
	.size	descriptor.46177, 24
descriptor.46177:
	.word	.LC1120
	.word	__func__.46178
	.word	.LC89
	.word	.LC683
	.byte	72
	.byte	11
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57471, %object
	.size	descriptor.57471, 24
descriptor.57471:
	.word	.LC1120
	.word	__func__.57472
	.word	.LC1636
	.word	.LC1666
	.byte	171
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57456, %object
	.size	descriptor.57456, 24
descriptor.57456:
	.word	.LC1120
	.word	__func__.57457
	.word	.LC1636
	.word	.LC1671
	.byte	105
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57459, %object
	.size	descriptor.57459, 24
descriptor.57459:
	.word	.LC1120
	.word	__func__.57457
	.word	.LC1636
	.word	.LC1670
	.byte	118
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57461, %object
	.size	descriptor.57461, 24
descriptor.57461:
	.word	.LC1120
	.word	__func__.57457
	.word	.LC1636
	.word	.LC1669
	.byte	123
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57462, %object
	.size	descriptor.57462, 24
descriptor.57462:
	.word	.LC1120
	.word	__func__.57457
	.word	.LC1636
	.word	.LC1668
	.byte	126
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57463, %object
	.size	descriptor.57463, 24
descriptor.57463:
	.word	.LC1120
	.word	__func__.57457
	.word	.LC1636
	.word	.LC1667
	.byte	151
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57477, %object
	.size	descriptor.57477, 24
descriptor.57477:
	.word	.LC1120
	.word	__func__.57472
	.word	.LC1636
	.word	.LC1665
	.byte	194
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51587, %object
	.size	descriptor.51587, 24
descriptor.51587:
	.word	.LC1120
	.word	__func__.51588
	.word	.LC1722
	.word	.LC697
	.byte	97
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51064, %object
	.size	descriptor.51064, 24
descriptor.51064:
	.word	.LC1120
	.word	__func__.51065
	.word	.LC1723
	.word	.LC177
	.byte	98
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55525, %object
	.size	descriptor.55525, 24
descriptor.55525:
	.word	.LC1120
	.word	__func__.55526
	.word	.LC58
	.word	.LC699
	.byte	53
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.44473, %object
	.size	descriptor.44473, 24
descriptor.44473:
	.word	.LC1120
	.word	__func__.44474
	.word	.LC33
	.word	.LC700
	.byte	150
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.40949, %object
	.size	descriptor.40949, 24
descriptor.40949:
	.word	.LC1120
	.word	__func__.40950
	.word	.LC1748
	.word	.LC701
	.byte	176
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30982, %object
	.size	descriptor.30982, 24
descriptor.30982:
	.word	.LC1120
	.word	__func__.30983
	.word	.LC1760
	.word	.LC702
	.byte	160
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30957, %object
	.size	descriptor.30957, 24
descriptor.30957:
	.word	.LC1120
	.word	__func__.30958
	.word	.LC1760
	.word	.LC703
	.byte	41
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30963, %object
	.size	descriptor.30963, 24
descriptor.30963:
	.word	.LC1120
	.word	__func__.30964
	.word	.LC1760
	.word	.LC704
	.byte	53
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46066, %object
	.size	descriptor.46066, 24
descriptor.46066:
	.word	.LC1120
	.word	__func__.46067
	.word	.LC89
	.word	.LC705
	.byte	187
	.byte	8
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46068, %object
	.size	descriptor.46068, 24
descriptor.46068:
	.word	.LC1120
	.word	__func__.46067
	.word	.LC89
	.word	.LC706
	.byte	191
	.byte	8
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45863, %object
	.size	descriptor.45863, 24
descriptor.45863:
	.word	.LC1120
	.word	__func__.45864
	.word	.LC89
	.word	.LC708
	.byte	127
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45865, %object
	.size	descriptor.45865, 24
descriptor.45865:
	.word	.LC1120
	.word	__func__.45864
	.word	.LC89
	.word	.LC709
	.byte	131
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45834, %object
	.size	descriptor.45834, 24
descriptor.45834:
	.word	.LC1120
	.word	__func__.45835
	.word	.LC89
	.word	.LC710
	.byte	161
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45836, %object
	.size	descriptor.45836, 24
descriptor.45836:
	.word	.LC1120
	.word	__func__.45835
	.word	.LC89
	.word	.LC711
	.byte	165
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57213, %object
	.size	descriptor.57213, 24
descriptor.57213:
	.word	.LC1120
	.word	__func__.57214
	.word	.LC1679
	.word	.LC716
	.byte	169
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57863, %object
	.size	descriptor.57863, 24
descriptor.57863:
	.word	.LC1120
	.word	__func__.57864
	.word	.LC1626
	.word	.LC1629
	.byte	225
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30997, %object
	.size	descriptor.30997, 24
descriptor.30997:
	.word	.LC1120
	.word	__func__.30998
	.word	.LC1760
	.word	.LC718
	.byte	198
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30852, %object
	.size	descriptor.30852, 24
descriptor.30852:
	.word	.LC1120
	.word	__func__.30853
	.word	.LC1763
	.word	.LC722
	.byte	68
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55694, %object
	.size	descriptor.55694, 24
descriptor.55694:
	.word	.LC1120
	.word	__func__.55695
	.word	.LC58
	.word	.LC725
	.byte	172
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55696, %object
	.size	descriptor.55696, 24
descriptor.55696:
	.word	.LC1120
	.word	__func__.55695
	.word	.LC58
	.word	.LC726
	.byte	175
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55697, %object
	.size	descriptor.55697, 24
descriptor.55697:
	.word	.LC1120
	.word	__func__.55695
	.word	.LC58
	.word	.LC727
	.byte	181
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55705, %object
	.size	descriptor.55705, 24
descriptor.55705:
	.word	.LC1120
	.word	__func__.55695
	.word	.LC58
	.word	.LC728
	.byte	214
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55708, %object
	.size	descriptor.55708, 24
descriptor.55708:
	.word	.LC1120
	.word	__func__.55695
	.word	.LC58
	.word	.LC729
	.byte	229
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51453, %object
	.size	descriptor.51453, 24
descriptor.51453:
	.word	.LC1120
	.word	__func__.51454
	.word	.LC1722
	.word	.LC570
	.byte	58
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51503, %object
	.size	descriptor.51503, 24
descriptor.51503:
	.word	.LC1120
	.word	__func__.51504
	.word	.LC1722
	.word	.LC551
	.byte	165
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57178, %object
	.size	descriptor.57178, 24
descriptor.57178:
	.word	.LC1120
	.word	__func__.57179
	.word	.LC1679
	.word	.LC1685
	.byte	221
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57183, %object
	.size	descriptor.57183, 24
descriptor.57183:
	.word	.LC1120
	.word	__func__.57184
	.word	.LC1679
	.word	.LC1684
	.byte	228
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57623, %object
	.size	descriptor.57623, 24
descriptor.57623:
	.word	.LC1120
	.word	__func__.57624
	.word	.LC1636
	.word	.LC1644
	.byte	235
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57637, %object
	.size	descriptor.57637, 24
descriptor.57637:
	.word	.LC1120
	.word	__func__.57624
	.word	.LC1636
	.word	.LC1643
	.byte	16
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57644, %object
	.size	descriptor.57644, 24
descriptor.57644:
	.word	.LC1120
	.word	__func__.57624
	.word	.LC1636
	.word	.LC1642
	.byte	25
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57653, %object
	.size	descriptor.57653, 24
descriptor.57653:
	.word	.LC1120
	.word	__func__.57624
	.word	.LC1636
	.word	.LC1641
	.byte	39
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57654, %object
	.size	descriptor.57654, 24
descriptor.57654:
	.word	.LC1120
	.word	__func__.57624
	.word	.LC1636
	.word	.LC1640
	.byte	50
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61929, %object
	.size	descriptor.61929, 24
descriptor.61929:
	.word	.LC1120
	.word	__func__.61928
	.word	.LC1589
	.word	.LC1597
	.byte	143
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61898, %object
	.size	descriptor.61898, 24
descriptor.61898:
	.word	.LC1120
	.word	__func__.61897
	.word	.LC1589
	.word	.LC1599
	.byte	200
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61930, %object
	.size	descriptor.61930, 24
descriptor.61930:
	.word	.LC1120
	.word	__func__.61928
	.word	.LC1589
	.word	.LC1596
	.byte	153
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61885, %object
	.size	descriptor.61885, 24
descriptor.61885:
	.word	.LC1120
	.word	__func__.61886
	.word	.LC1589
	.word	.LC1600
	.byte	129
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61910, %object
	.size	descriptor.61910, 24
descriptor.61910:
	.word	.LC1120
	.word	__func__.61909
	.word	.LC1589
	.word	.LC1598
	.byte	39
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62187, %object
	.size	descriptor.62187, 24
descriptor.62187:
	.word	.LC1120
	.word	__func__.62184
	.word	.LC1563
	.word	.LC1578
	.byte	245
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61948, %object
	.size	descriptor.61948, 24
descriptor.61948:
	.word	.LC1120
	.word	__func__.61946
	.word	.LC1589
	.word	.LC1595
	.byte	220
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61949, %object
	.size	descriptor.61949, 24
descriptor.61949:
	.word	.LC1120
	.word	__func__.61946
	.word	.LC1589
	.word	.LC1594
	.byte	232
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62932, %object
	.size	descriptor.62932, 24
descriptor.62932:
	.word	.LC1120
	.word	__func__.62933
	.word	.LC1556
	.word	.LC1558
	.byte	88
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45681, %object
	.size	descriptor.45681, 24
descriptor.45681:
	.word	.LC1120
	.word	__func__.45682
	.word	.LC89
	.word	.LC770
	.byte	83
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53896, %object
	.size	descriptor.53896, 24
descriptor.53896:
	.word	.LC1120
	.word	__func__.53897
	.word	.LC1705
	.word	.LC772
	.byte	154
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63590, %object
	.size	descriptor.63590, 24
descriptor.63590:
	.word	.LC1120
	.word	__func__.63591
	.word	.LC1549
	.word	.LC773
	.byte	154
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58081, %object
	.size	descriptor.58081, 24
descriptor.58081:
	.word	.LC1120
	.word	__func__.58082
	.word	.LC1622
	.word	.LC716
	.byte	35
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53087, %object
	.size	descriptor.53087, 24
descriptor.53087:
	.word	.LC1120
	.word	__func__.53088
	.word	.LC1710
	.word	.LC775
	.byte	147
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53089, %object
	.size	descriptor.53089, 24
descriptor.53089:
	.word	.LC1120
	.word	__func__.53088
	.word	.LC1710
	.word	.LC776
	.byte	154
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53097, %object
	.size	descriptor.53097, 24
descriptor.53097:
	.word	.LC1120
	.word	__func__.53088
	.word	.LC1710
	.word	.LC777
	.byte	183
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53100, %object
	.size	descriptor.53100, 24
descriptor.53100:
	.word	.LC1120
	.word	__func__.53088
	.word	.LC1710
	.word	.LC778
	.byte	204
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63117, %object
	.size	descriptor.63117, 24
descriptor.63117:
	.word	.LC1120
	.word	__func__.63118
	.word	.LC1556
	.word	.LC1558
	.byte	145
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56747, %object
	.size	descriptor.56747, 24
descriptor.56747:
	.word	.LC1120
	.word	__func__.56748
	.word	.LC1688
	.word	.LC267
	.byte	166
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58452, %object
	.size	descriptor.58452, 24
descriptor.58452:
	.word	.LC1120
	.word	__func__.58453
	.word	.LC1608
	.word	.LC1610
	.byte	245
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58287, %object
	.size	descriptor.58287, 24
descriptor.58287:
	.word	.LC1120
	.word	__func__.58288
	.word	.LC1612
	.word	.LC1614
	.byte	221
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45517, %object
	.size	descriptor.45517, 24
descriptor.45517:
	.word	.LC1120
	.word	__func__.45518
	.word	.LC1744
	.word	.LC798
	.byte	176
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45448, %object
	.size	descriptor.45448, 24
descriptor.45448:
	.word	.LC1120
	.word	__func__.45449
	.word	.LC1744
	.word	.LC799
	.byte	233
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52531, %object
	.size	descriptor.52531, 24
descriptor.52531:
	.word	.LC1120
	.word	__func__.52532
	.word	.LC1716
	.word	.LC177
	.byte	183
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51596, %object
	.size	descriptor.51596, 24
descriptor.51596:
	.word	.LC1120
	.word	__func__.51597
	.word	.LC1722
	.word	.LC177
	.byte	123
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57514, %object
	.size	descriptor.57514, 24
descriptor.57514:
	.word	.LC1120
	.word	__func__.57512
	.word	.LC1636
	.word	.LC1661
	.byte	56
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57517, %object
	.size	descriptor.57517, 24
descriptor.57517:
	.word	.LC1120
	.word	__func__.57512
	.word	.LC1636
	.word	.LC1660
	.byte	65
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57518, %object
	.size	descriptor.57518, 24
descriptor.57518:
	.word	.LC1120
	.word	__func__.57512
	.word	.LC1636
	.word	.LC1659
	.byte	69
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57520, %object
	.size	descriptor.57520, 24
descriptor.57520:
	.word	.LC1120
	.word	__func__.57512
	.word	.LC1636
	.word	.LC1658
	.byte	79
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57521, %object
	.size	descriptor.57521, 24
descriptor.57521:
	.word	.LC1120
	.word	__func__.57512
	.word	.LC1636
	.word	.LC1657
	.byte	88
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57527, %object
	.size	descriptor.57527, 24
descriptor.57527:
	.word	.LC1120
	.word	__func__.57512
	.word	.LC1636
	.word	.LC1656
	.byte	107
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57529, %object
	.size	descriptor.57529, 24
descriptor.57529:
	.word	.LC1120
	.word	__func__.57512
	.word	.LC1636
	.word	.LC1655
	.byte	114
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57531, %object
	.size	descriptor.57531, 24
descriptor.57531:
	.word	.LC1120
	.word	__func__.57512
	.word	.LC1636
	.word	.LC1654
	.byte	127
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57532, %object
	.size	descriptor.57532, 24
descriptor.57532:
	.word	.LC1120
	.word	__func__.57512
	.word	.LC1636
	.word	.LC1653
	.byte	135
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57534, %object
	.size	descriptor.57534, 24
descriptor.57534:
	.word	.LC1120
	.word	__func__.57512
	.word	.LC1636
	.word	.LC1652
	.byte	141
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57537, %object
	.size	descriptor.57537, 24
descriptor.57537:
	.word	.LC1120
	.word	__func__.57512
	.word	.LC1636
	.word	.LC1651
	.byte	163
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57538, %object
	.size	descriptor.57538, 24
descriptor.57538:
	.word	.LC1120
	.word	__func__.57512
	.word	.LC1636
	.word	.LC1650
	.byte	171
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57540, %object
	.size	descriptor.57540, 24
descriptor.57540:
	.word	.LC1120
	.word	__func__.57512
	.word	.LC1636
	.word	.LC1649
	.byte	178
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57542, %object
	.size	descriptor.57542, 24
descriptor.57542:
	.word	.LC1120
	.word	__func__.57512
	.word	.LC1636
	.word	.LC43
	.byte	185
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57545, %object
	.size	descriptor.57545, 24
descriptor.57545:
	.word	.LC1120
	.word	__func__.57512
	.word	.LC1636
	.word	.LC44
	.byte	189
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57548, %object
	.size	descriptor.57548, 24
descriptor.57548:
	.word	.LC1120
	.word	__func__.57512
	.word	.LC1636
	.word	.LC1648
	.byte	212
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63036, %object
	.size	descriptor.63036, 24
descriptor.63036:
	.word	.LC1120
	.word	__func__.63028
	.word	.LC1556
	.word	.LC1558
	.byte	115
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63039, %object
	.size	descriptor.63039, 24
descriptor.63039:
	.word	.LC1120
	.word	__func__.63028
	.word	.LC1556
	.word	.LC1559
	.byte	130
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31004, %object
	.size	descriptor.31004, 24
descriptor.31004:
	.word	.LC1120
	.word	__func__.31005
	.word	.LC1760
	.word	.LC830
	.byte	222
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30988, %object
	.size	descriptor.30988, 24
descriptor.30988:
	.word	.LC1120
	.word	__func__.30989
	.word	.LC1760
	.word	.LC831
	.byte	175
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49492, %object
	.size	descriptor.49492, 24
descriptor.49492:
	.word	.LC1120
	.word	__func__.49493
	.word	.LC1730
	.word	.LC177
	.byte	58
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38858, %object
	.size	descriptor.38858, 24
descriptor.38858:
	.word	.LC1120
	.word	__func__.38859
	.word	.LC1749
	.word	.LC591
	.byte	113
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49642, %object
	.size	descriptor.49642, 24
descriptor.49642:
	.word	.LC1120
	.word	__func__.49643
	.word	.LC1730
	.word	.LC833
	.byte	28
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47437, %object
	.size	descriptor.47437, 24
descriptor.47437:
	.word	.LC1120
	.word	__func__.47438
	.word	.LC675
	.word	.LC834
	.byte	143
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47445, %object
	.size	descriptor.47445, 24
descriptor.47445:
	.word	.LC1120
	.word	__func__.47438
	.word	.LC675
	.word	.LC835
	.byte	182
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.37604, %object
	.size	descriptor.37604, 24
descriptor.37604:
	.word	.LC1120
	.word	__func__.37603
	.word	.LC1754
	.word	.LC838
	.byte	211
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53859, %object
	.size	descriptor.53859, 24
descriptor.53859:
	.word	.LC1120
	.word	__func__.53860
	.word	.LC1705
	.word	.LC841
	.byte	39
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54344, %object
	.size	descriptor.54344, 24
descriptor.54344:
	.word	.LC1120
	.word	__func__.54345
	.word	.LC1703
	.word	.LC843
	.byte	142
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54346, %object
	.size	descriptor.54346, 24
descriptor.54346:
	.word	.LC1120
	.word	__func__.54345
	.word	.LC1703
	.word	.LC844
	.byte	170
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54354, %object
	.size	descriptor.54354, 24
descriptor.54354:
	.word	.LC1120
	.word	__func__.54345
	.word	.LC1703
	.word	.LC845
	.byte	197
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54357, %object
	.size	descriptor.54357, 24
descriptor.54357:
	.word	.LC1120
	.word	__func__.54345
	.word	.LC1703
	.word	.LC846
	.byte	219
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54375, %object
	.size	descriptor.54375, 24
descriptor.54375:
	.word	.LC1120
	.word	__func__.54376
	.word	.LC1703
	.word	.LC847
	.byte	249
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54384, %object
	.size	descriptor.54384, 24
descriptor.54384:
	.word	.LC1120
	.word	__func__.54376
	.word	.LC1703
	.word	.LC848
	.byte	54
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54387, %object
	.size	descriptor.54387, 24
descriptor.54387:
	.word	.LC1120
	.word	__func__.54376
	.word	.LC1703
	.word	.LC849
	.byte	70
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58225, %object
	.size	descriptor.58225, 24
descriptor.58225:
	.word	.LC1120
	.word	__func__.58226
	.word	.LC1612
	.word	.LC850
	.byte	149
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56426, %object
	.size	descriptor.56426, 24
descriptor.56426:
	.word	.LC1120
	.word	__func__.56427
	.word	.LC1699
	.word	.LC850
	.byte	121
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50001, %object
	.size	descriptor.50001, 24
descriptor.50001:
	.word	.LC1120
	.word	__func__.50002
	.word	.LC1725
	.word	.LC853
	.byte	61
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50006, %object
	.size	descriptor.50006, 24
descriptor.50006:
	.word	.LC1120
	.word	__func__.50002
	.word	.LC1725
	.word	.LC671
	.byte	81
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31956, %object
	.size	descriptor.31956, 24
descriptor.31956:
	.word	.LC1120
	.word	__func__.31957
	.word	.LC1759
	.word	.LC855
	.byte	200
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38140, %object
	.size	descriptor.38140, 24
descriptor.38140:
	.word	.LC1120
	.word	__func__.38141
	.word	.LC1751
	.word	.LC857
	.byte	236
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46304, %object
	.size	descriptor.46304, 24
descriptor.46304:
	.word	.LC1120
	.word	__func__.46305
	.word	.LC89
	.word	.LC882
	.byte	177
	.byte	13
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25227, %object
	.size	descriptor.25227, 24
descriptor.25227:
	.word	.LC1120
	.word	__func__.25228
	.word	.LC102
	.word	.LC891
	.byte	28
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25248, %object
	.size	descriptor.25248, 24
descriptor.25248:
	.word	.LC1120
	.word	__func__.25228
	.word	.LC102
	.word	.LC894
	.byte	83
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25241, %object
	.size	descriptor.25241, 24
descriptor.25241:
	.word	.LC1120
	.word	__func__.25228
	.word	.LC102
	.word	.LC892
	.byte	63
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25244, %object
	.size	descriptor.25244, 24
descriptor.25244:
	.word	.LC1120
	.word	__func__.25228
	.word	.LC102
	.word	.LC893
	.byte	71
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49349, %object
	.size	descriptor.49349, 24
descriptor.49349:
	.word	.LC1120
	.word	__func__.49350
	.word	.LC1730
	.word	.LC551
	.byte	151
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49162, %object
	.size	descriptor.49162, 24
descriptor.49162:
	.word	.LC1120
	.word	__func__.49163
	.word	.LC1730
	.word	.LC916
	.byte	173
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49164, %object
	.size	descriptor.49164, 24
descriptor.49164:
	.word	.LC1120
	.word	__func__.49163
	.word	.LC1730
	.word	.LC653
	.byte	178
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49410, %object
	.size	descriptor.49410, 24
descriptor.49410:
	.word	.LC1120
	.word	__func__.49409
	.word	.LC1730
	.word	.LC357
	.byte	35
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49465, %object
	.size	descriptor.49465, 24
descriptor.49465:
	.word	.LC1120
	.word	__func__.49466
	.word	.LC1730
	.word	.LC919
	.byte	214
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25066, %object
	.size	descriptor.25066, 24
descriptor.25066:
	.word	.LC1120
	.word	__func__.25067
	.word	.LC102
	.word	.LC924
	.byte	225
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25069, %object
	.size	descriptor.25069, 24
descriptor.25069:
	.word	.LC1120
	.word	__func__.25067
	.word	.LC102
	.word	.LC925
	.byte	2
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49200, %object
	.size	descriptor.49200, 24
descriptor.49200:
	.word	.LC1120
	.word	__func__.49201
	.word	.LC1730
	.word	.LC927
	.byte	11
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49215, %object
	.size	descriptor.49215, 24
descriptor.49215:
	.word	.LC1120
	.word	__func__.49216
	.word	.LC1730
	.word	.LC929
	.byte	53
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48415, %object
	.size	descriptor.48415, 24
descriptor.48415:
	.word	.LC1120
	.word	__func__.48416
	.word	.LC1734
	.word	.LC177
	.byte	18
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48385, %object
	.size	descriptor.48385, 24
descriptor.48385:
	.word	.LC1120
	.word	__func__.48386
	.word	.LC1734
	.word	.LC930
	.byte	182
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45726, %object
	.size	descriptor.45726, 24
descriptor.45726:
	.word	.LC1120
	.word	__func__.45723
	.word	.LC89
	.word	.LC934
	.byte	216
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46327, %object
	.size	descriptor.46327, 24
descriptor.46327:
	.word	.LC1120
	.word	__func__.46328
	.word	.LC89
	.word	.LC772
	.byte	243
	.byte	13
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56461, %object
	.size	descriptor.56461, 24
descriptor.56461:
	.word	.LC1120
	.word	__func__.56462
	.word	.LC1699
	.word	.LC82
	.byte	248
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56768, %object
	.size	descriptor.56768, 24
descriptor.56768:
	.word	.LC1120
	.word	__func__.56769
	.word	.LC1688
	.word	.LC940
	.byte	203
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58268, %object
	.size	descriptor.58268, 24
descriptor.58268:
	.word	.LC1120
	.word	__func__.58269
	.word	.LC1612
	.word	.LC82
	.byte	43
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25390, %object
	.size	descriptor.25390, 24
descriptor.25390:
	.word	.LC1120
	.word	__func__.25391
	.word	.LC102
	.word	.LC941
	.byte	192
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25392, %object
	.size	descriptor.25392, 24
descriptor.25392:
	.word	.LC1120
	.word	__func__.25391
	.word	.LC102
	.word	.LC942
	.byte	195
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25393, %object
	.size	descriptor.25393, 24
descriptor.25393:
	.word	.LC1120
	.word	__func__.25391
	.word	.LC102
	.word	.LC943
	.byte	199
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25188, %object
	.size	descriptor.25188, 24
descriptor.25188:
	.word	.LC1120
	.word	__func__.25189
	.word	.LC102
	.word	.LC946
	.byte	136
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25214, %object
	.size	descriptor.25214, 24
descriptor.25214:
	.word	.LC1120
	.word	__func__.25189
	.word	.LC102
	.word	.LC951
	.byte	234
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25215, %object
	.size	descriptor.25215, 24
descriptor.25215:
	.word	.LC1120
	.word	__func__.25189
	.word	.LC102
	.word	.LC952
	.byte	243
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25216, %object
	.size	descriptor.25216, 24
descriptor.25216:
	.word	.LC1120
	.word	__func__.25189
	.word	.LC102
	.word	.LC953
	.byte	246
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25428, %object
	.size	descriptor.25428, 24
descriptor.25428:
	.word	.LC1120
	.word	__func__.25391
	.word	.LC102
	.word	.LC952
	.byte	77
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25429, %object
	.size	descriptor.25429, 24
descriptor.25429:
	.word	.LC1120
	.word	__func__.25391
	.word	.LC102
	.word	.LC953
	.byte	80
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25452, %object
	.size	descriptor.25452, 24
descriptor.25452:
	.word	.LC1120
	.word	__func__.25391
	.word	.LC102
	.word	.LC952
	.byte	198
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25453, %object
	.size	descriptor.25453, 24
descriptor.25453:
	.word	.LC1120
	.word	__func__.25391
	.word	.LC102
	.word	.LC953
	.byte	201
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25455, %object
	.size	descriptor.25455, 24
descriptor.25455:
	.word	.LC1120
	.word	__func__.25391
	.word	.LC102
	.word	.LC958
	.byte	213
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47598, %object
	.size	descriptor.47598, 24
descriptor.47598:
	.word	.LC1120
	.word	__func__.47590
	.word	.LC675
	.word	.LC972
	.byte	138
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56455, %object
	.size	descriptor.56455, 24
descriptor.56455:
	.word	.LC1120
	.word	__func__.56456
	.word	.LC1699
	.word	.LC82
	.byte	237
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58262, %object
	.size	descriptor.58262, 24
descriptor.58262:
	.word	.LC1120
	.word	__func__.58263
	.word	.LC1612
	.word	.LC82
	.byte	32
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63827, %object
	.size	descriptor.63827, 24
descriptor.63827:
	.word	.LC1120
	.word	__func__.63828
	.word	.LC890
	.word	.LC1546
	.byte	158
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38394, %object
	.size	descriptor.38394, 24
descriptor.38394:
	.word	.LC1120
	.word	__func__.38393
	.word	.LC1751
	.word	.LC995
	.byte	191
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38436, %object
	.size	descriptor.38436, 24
descriptor.38436:
	.word	.LC1120
	.word	__func__.38393
	.word	.LC1751
	.word	.LC996
	.byte	14
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.37973, %object
	.size	descriptor.37973, 24
descriptor.37973:
	.word	.LC1120
	.word	__func__.37974
	.word	.LC1751
	.word	.LC997
	.byte	125
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53425, %object
	.size	descriptor.53425, 24
descriptor.53425:
	.word	.LC1120
	.word	__func__.53426
	.word	.LC1707
	.word	.LC999
	.byte	106
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53432, %object
	.size	descriptor.53432, 24
descriptor.53432:
	.word	.LC1120
	.word	__func__.53426
	.word	.LC1707
	.word	.LC286
	.byte	123
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53442, %object
	.size	descriptor.53442, 24
descriptor.53442:
	.word	.LC1120
	.word	__func__.53426
	.word	.LC1707
	.word	.LC286
	.byte	152
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53446, %object
	.size	descriptor.53446, 24
descriptor.53446:
	.word	.LC1120
	.word	__func__.53426
	.word	.LC1707
	.word	.LC286
	.byte	173
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53447, %object
	.size	descriptor.53447, 24
descriptor.53447:
	.word	.LC1120
	.word	__func__.53426
	.word	.LC1707
	.word	.LC1003
	.byte	182
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54426, %object
	.size	descriptor.54426, 24
descriptor.54426:
	.word	.LC1120
	.word	__func__.54427
	.word	.LC1703
	.word	.LC1006
	.byte	187
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54452, %object
	.size	descriptor.54452, 24
descriptor.54452:
	.word	.LC1120
	.word	__func__.54453
	.word	.LC1703
	.word	.LC1007
	.byte	55
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53554, %object
	.size	descriptor.53554, 24
descriptor.53554:
	.word	.LC1120
	.word	__func__.53555
	.word	.LC1707
	.word	.LC1010
	.byte	176
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38594, %object
	.size	descriptor.38594, 24
descriptor.38594:
	.word	.LC1120
	.word	__func__.38595
	.word	.LC1751
	.word	.LC1012
	.byte	196
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63566, %object
	.size	descriptor.63566, 24
descriptor.63566:
	.word	.LC1120
	.word	__func__.63567
	.word	.LC1549
	.word	.LC82
	.byte	18
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63572, %object
	.size	descriptor.63572, 24
descriptor.63572:
	.word	.LC1120
	.word	__func__.63573
	.word	.LC1549
	.word	.LC82
	.byte	30
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.64082, %object
	.size	descriptor.64082, 24
descriptor.64082:
	.word	.LC1120
	.word	__func__.64083
	.word	.LC890
	.word	.LC1535
	.byte	224
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57870, %object
	.size	descriptor.57870, 24
descriptor.57870:
	.word	.LC1120
	.word	__func__.57871
	.word	.LC1626
	.word	.LC1628
	.byte	239
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57872, %object
	.size	descriptor.57872, 24
descriptor.57872:
	.word	.LC1120
	.word	__func__.57871
	.word	.LC1626
	.word	.LC1627
	.byte	247
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58057, %object
	.size	descriptor.58057, 24
descriptor.58057:
	.word	.LC1120
	.word	__func__.58058
	.word	.LC1622
	.word	.LC82
	.byte	149
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58063, %object
	.size	descriptor.58063, 24
descriptor.58063:
	.word	.LC1120
	.word	__func__.58064
	.word	.LC1622
	.word	.LC82
	.byte	159
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57189, %object
	.size	descriptor.57189, 24
descriptor.57189:
	.word	.LC1120
	.word	__func__.57190
	.word	.LC1679
	.word	.LC82
	.byte	0
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57076, %object
	.size	descriptor.57076, 24
descriptor.57076:
	.word	.LC1120
	.word	__func__.57077
	.word	.LC1679
	.word	.LC23
	.byte	144
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57081, %object
	.size	descriptor.57081, 24
descriptor.57081:
	.word	.LC1120
	.word	__func__.57077
	.word	.LC1679
	.word	.LC25
	.byte	170
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57195, %object
	.size	descriptor.57195, 24
descriptor.57195:
	.word	.LC1120
	.word	__func__.57196
	.word	.LC1679
	.word	.LC82
	.byte	10
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57127, %object
	.size	descriptor.57127, 24
descriptor.57127:
	.word	.LC1120
	.word	__func__.57128
	.word	.LC1679
	.word	.LC22
	.byte	24
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57080, %object
	.size	descriptor.57080, 24
descriptor.57080:
	.word	.LC1120
	.word	__func__.57077
	.word	.LC1679
	.word	.LC24
	.byte	159
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53460, %object
	.size	descriptor.53460, 24
descriptor.53460:
	.word	.LC1120
	.word	__func__.53461
	.word	.LC1707
	.word	.LC1038
	.byte	196
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53462, %object
	.size	descriptor.53462, 24
descriptor.53462:
	.word	.LC1120
	.word	__func__.53461
	.word	.LC1707
	.word	.LC286
	.byte	199
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53470, %object
	.size	descriptor.53470, 24
descriptor.53470:
	.word	.LC1120
	.word	__func__.53461
	.word	.LC1707
	.word	.LC286
	.byte	232
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53471, %object
	.size	descriptor.53471, 24
descriptor.53471:
	.word	.LC1120
	.word	__func__.53461
	.word	.LC1707
	.word	.LC1040
	.byte	244
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53475, %object
	.size	descriptor.53475, 24
descriptor.53475:
	.word	.LC1120
	.word	__func__.53461
	.word	.LC1707
	.word	.LC286
	.byte	252
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53479, %object
	.size	descriptor.53479, 24
descriptor.53479:
	.word	.LC1120
	.word	__func__.53461
	.word	.LC1707
	.word	.LC1041
	.byte	6
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57497, %object
	.size	descriptor.57497, 24
descriptor.57497:
	.word	.LC1120
	.word	__func__.57496
	.word	.LC1636
	.word	.LC1630
	.byte	7
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57498, %object
	.size	descriptor.57498, 24
descriptor.57498:
	.word	.LC1120
	.word	__func__.57496
	.word	.LC1636
	.word	.LC1663
	.byte	15
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57499, %object
	.size	descriptor.57499, 24
descriptor.57499:
	.word	.LC1120
	.word	__func__.57496
	.word	.LC1636
	.word	.LC1662
	.byte	24
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38947, %object
	.size	descriptor.38947, 24
descriptor.38947:
	.word	.LC1120
	.word	__func__.38946
	.word	.LC1749
	.word	.LC157
	.byte	108
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38913, %object
	.size	descriptor.38913, 24
descriptor.38913:
	.word	.LC1120
	.word	__func__.38914
	.word	.LC1749
	.word	.LC1049
	.byte	243
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38921, %object
	.size	descriptor.38921, 24
descriptor.38921:
	.word	.LC1120
	.word	__func__.38914
	.word	.LC1749
	.word	.LC159
	.byte	17
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38924, %object
	.size	descriptor.38924, 24
descriptor.38924:
	.word	.LC1120
	.word	__func__.38914
	.word	.LC1749
	.word	.LC161
	.byte	27
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61964, %object
	.size	descriptor.61964, 24
descriptor.61964:
	.word	.LC1120
	.word	__func__.61962
	.word	.LC1589
	.word	.LC1593
	.byte	19
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62207, %object
	.size	descriptor.62207, 24
descriptor.62207:
	.word	.LC1120
	.word	__func__.62206
	.word	.LC1563
	.word	.LC1576
	.byte	51
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57664, %object
	.size	descriptor.57664, 24
descriptor.57664:
	.word	.LC1120
	.word	__func__.57665
	.word	.LC1636
	.word	.LC1639
	.byte	66
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57391, %object
	.size	descriptor.57391, 24
descriptor.57391:
	.word	.LC1120
	.word	__func__.57390
	.word	.LC1636
	.word	.LC1673
	.byte	186
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57377, %object
	.size	descriptor.57377, 24
descriptor.57377:
	.word	.LC1120
	.word	__func__.57378
	.word	.LC1636
	.word	.LC1676
	.byte	125
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57382, %object
	.size	descriptor.57382, 24
descriptor.57382:
	.word	.LC1120
	.word	__func__.57378
	.word	.LC1636
	.word	.LC1675
	.byte	149
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57383, %object
	.size	descriptor.57383, 24
descriptor.57383:
	.word	.LC1120
	.word	__func__.57378
	.word	.LC1636
	.word	.LC1674
	.byte	171
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57666, %object
	.size	descriptor.57666, 24
descriptor.57666:
	.word	.LC1120
	.word	__func__.57665
	.word	.LC1636
	.word	.LC1638
	.byte	114
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57206, %object
	.size	descriptor.57206, 24
descriptor.57206:
	.word	.LC1120
	.word	__func__.57207
	.word	.LC1679
	.word	.LC1072
	.byte	134
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57599, %object
	.size	descriptor.57599, 24
descriptor.57599:
	.word	.LC1120
	.word	__func__.57597
	.word	.LC1636
	.word	.LC1645
	.byte	74
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58074, %object
	.size	descriptor.58074, 24
descriptor.58074:
	.word	.LC1120
	.word	__func__.58075
	.word	.LC1622
	.word	.LC1072
	.byte	8
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61968, %object
	.size	descriptor.61968, 24
descriptor.61968:
	.word	.LC1120
	.word	__func__.61969
	.word	.LC1589
	.word	.LC1592
	.byte	35
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61978, %object
	.size	descriptor.61978, 24
descriptor.61978:
	.word	.LC1120
	.word	__func__.61979
	.word	.LC1589
	.word	.LC1592
	.byte	47
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61973, %object
	.size	descriptor.61973, 24
descriptor.61973:
	.word	.LC1120
	.word	__func__.61974
	.word	.LC1589
	.word	.LC1592
	.byte	41
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61983, %object
	.size	descriptor.61983, 24
descriptor.61983:
	.word	.LC1120
	.word	__func__.61984
	.word	.LC1589
	.word	.LC1592
	.byte	53
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63583, %object
	.size	descriptor.63583, 24
descriptor.63583:
	.word	.LC1120
	.word	__func__.63584
	.word	.LC1549
	.word	.LC1092
	.byte	126
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53389, %object
	.size	descriptor.53389, 24
descriptor.53389:
	.word	.LC1120
	.word	__func__.53386
	.word	.LC1707
	.word	.LC1096
	.byte	46
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30973, %object
	.size	descriptor.30973, 24
descriptor.30973:
	.word	.LC1120
	.word	__func__.30974
	.word	.LC1760
	.word	.LC1097
	.byte	69
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52919, %object
	.size	descriptor.52919, 24
descriptor.52919:
	.word	.LC1120
	.word	__func__.52920
	.word	.LC1711
	.word	.LC1104
	.byte	132
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56738, %object
	.size	descriptor.56738, 24
descriptor.56738:
	.word	.LC1120
	.word	__func__.56739
	.word	.LC1688
	.word	.LC1108
	.byte	155
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56743, %object
	.size	descriptor.56743, 24
descriptor.56743:
	.word	.LC1120
	.word	__func__.56739
	.word	.LC1688
	.word	.LC1109
	.byte	159
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56761, %object
	.size	descriptor.56761, 24
descriptor.56761:
	.word	.LC1120
	.word	__func__.56762
	.word	.LC1688
	.word	.LC267
	.byte	191
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56774, %object
	.size	descriptor.56774, 24
descriptor.56774:
	.word	.LC1120
	.word	__func__.56775
	.word	.LC1688
	.word	.LC267
	.byte	214
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56780, %object
	.size	descriptor.56780, 24
descriptor.56780:
	.word	.LC1120
	.word	__func__.56781
	.word	.LC1688
	.word	.LC267
	.byte	221
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58279, %object
	.size	descriptor.58279, 24
descriptor.58279:
	.word	.LC1120
	.word	__func__.58280
	.word	.LC1612
	.word	.LC1110
	.byte	186
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62962, %object
	.size	descriptor.62962, 24
descriptor.62962:
	.word	.LC1120
	.word	__func__.62963
	.word	.LC1556
	.word	.LC1121
	.byte	150
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62964, %object
	.size	descriptor.62964, 24
descriptor.62964:
	.word	.LC1120
	.word	__func__.62963
	.word	.LC1556
	.word	.LC1123
	.byte	157
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62965, %object
	.size	descriptor.62965, 24
descriptor.62965:
	.word	.LC1120
	.word	__func__.62963
	.word	.LC1556
	.word	.LC1560
	.byte	166
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55794, %object
	.size	descriptor.55794, 24
descriptor.55794:
	.word	.LC1120
	.word	__func__.55795
	.word	.LC58
	.word	.LC1119
	.byte	187
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55628, %object
	.size	descriptor.55628, 24
descriptor.55628:
	.word	.LC1120
	.word	__func__.55629
	.word	.LC58
	.word	.LC1121
	.byte	30
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55630, %object
	.size	descriptor.55630, 24
descriptor.55630:
	.word	.LC1120
	.word	__func__.55629
	.word	.LC58
	.word	.LC1122
	.byte	34
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55631, %object
	.size	descriptor.55631, 24
descriptor.55631:
	.word	.LC1120
	.word	__func__.55629
	.word	.LC58
	.word	.LC1123
	.byte	37
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55632, %object
	.size	descriptor.55632, 24
descriptor.55632:
	.word	.LC1120
	.word	__func__.55629
	.word	.LC58
	.word	.LC1124
	.byte	43
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55633, %object
	.size	descriptor.55633, 24
descriptor.55633:
	.word	.LC1120
	.word	__func__.55629
	.word	.LC58
	.word	.LC1125
	.byte	46
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55634, %object
	.size	descriptor.55634, 24
descriptor.55634:
	.word	.LC1120
	.word	__func__.55629
	.word	.LC58
	.word	.LC1124
	.byte	52
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55635, %object
	.size	descriptor.55635, 24
descriptor.55635:
	.word	.LC1120
	.word	__func__.55629
	.word	.LC58
	.word	.LC1125
	.byte	55
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55796, %object
	.size	descriptor.55796, 24
descriptor.55796:
	.word	.LC1120
	.word	__func__.55795
	.word	.LC58
	.word	.LC1127
	.byte	225
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54496, %object
	.size	descriptor.54496, 24
descriptor.54496:
	.word	.LC1120
	.word	__func__.54497
	.word	.LC1703
	.word	.LC1128
	.byte	197
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54272, %object
	.size	descriptor.54272, 24
descriptor.54272:
	.word	.LC1120
	.word	__func__.54273
	.word	.LC1703
	.word	.LC1121
	.byte	212
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54274, %object
	.size	descriptor.54274, 24
descriptor.54274:
	.word	.LC1120
	.word	__func__.54273
	.word	.LC1703
	.word	.LC1122
	.byte	216
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54275, %object
	.size	descriptor.54275, 24
descriptor.54275:
	.word	.LC1120
	.word	__func__.54273
	.word	.LC1703
	.word	.LC1123
	.byte	219
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54276, %object
	.size	descriptor.54276, 24
descriptor.54276:
	.word	.LC1120
	.word	__func__.54273
	.word	.LC1703
	.word	.LC1124
	.byte	225
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54277, %object
	.size	descriptor.54277, 24
descriptor.54277:
	.word	.LC1120
	.word	__func__.54273
	.word	.LC1703
	.word	.LC1129
	.byte	228
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54278, %object
	.size	descriptor.54278, 24
descriptor.54278:
	.word	.LC1120
	.word	__func__.54273
	.word	.LC1703
	.word	.LC1130
	.byte	234
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54279, %object
	.size	descriptor.54279, 24
descriptor.54279:
	.word	.LC1120
	.word	__func__.54273
	.word	.LC1703
	.word	.LC1131
	.byte	237
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54498, %object
	.size	descriptor.54498, 24
descriptor.54498:
	.word	.LC1120
	.word	__func__.54497
	.word	.LC1703
	.word	.LC1127
	.byte	229
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53125, %object
	.size	descriptor.53125, 24
descriptor.53125:
	.word	.LC1120
	.word	__func__.53126
	.word	.LC1710
	.word	.LC1133
	.byte	29
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53031, %object
	.size	descriptor.53031, 24
descriptor.53031:
	.word	.LC1120
	.word	__func__.53032
	.word	.LC1710
	.word	.LC1121
	.byte	14
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53033, %object
	.size	descriptor.53033, 24
descriptor.53033:
	.word	.LC1120
	.word	__func__.53032
	.word	.LC1710
	.word	.LC1122
	.byte	18
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53034, %object
	.size	descriptor.53034, 24
descriptor.53034:
	.word	.LC1120
	.word	__func__.53032
	.word	.LC1710
	.word	.LC1123
	.byte	21
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53035, %object
	.size	descriptor.53035, 24
descriptor.53035:
	.word	.LC1120
	.word	__func__.53032
	.word	.LC1710
	.word	.LC1124
	.byte	27
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53036, %object
	.size	descriptor.53036, 24
descriptor.53036:
	.word	.LC1120
	.word	__func__.53032
	.word	.LC1710
	.word	.LC1134
	.byte	30
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53127, %object
	.size	descriptor.53127, 24
descriptor.53127:
	.word	.LC1120
	.word	__func__.53126
	.word	.LC1710
	.word	.LC1127
	.byte	60
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.44880, %object
	.size	descriptor.44880, 24
descriptor.44880:
	.word	.LC1120
	.word	__func__.44881
	.word	.LC33
	.word	.LC1136
	.byte	38
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.44852, %object
	.size	descriptor.44852, 24
descriptor.44852:
	.word	.LC1120
	.word	__func__.44853
	.word	.LC33
	.word	.LC1137
	.byte	210
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.41008, %object
	.size	descriptor.41008, 24
descriptor.41008:
	.word	.LC1120
	.word	__func__.41009
	.word	.LC1748
	.word	.LC1143
	.byte	39
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55884, %object
	.size	descriptor.55884, 24
descriptor.55884:
	.word	.LC1120
	.word	__func__.55885
	.word	.LC58
	.word	.LC1146
	.byte	119
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54523, %object
	.size	descriptor.54523, 24
descriptor.54523:
	.word	.LC1120
	.word	__func__.54524
	.word	.LC1703
	.word	.LC1148
	.byte	0
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53145, %object
	.size	descriptor.53145, 24
descriptor.53145:
	.word	.LC1120
	.word	__func__.53146
	.word	.LC1710
	.word	.LC1153
	.byte	88
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31027, %object
	.size	descriptor.31027, 24
descriptor.31027:
	.word	.LC1120
	.word	__func__.31028
	.word	.LC1760
	.word	.LC1154
	.byte	20
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31039, %object
	.size	descriptor.31039, 24
descriptor.31039:
	.word	.LC1120
	.word	__func__.31040
	.word	.LC1760
	.word	.LC1163
	.byte	86
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31051, %object
	.size	descriptor.31051, 24
descriptor.31051:
	.word	.LC1120
	.word	__func__.31040
	.word	.LC1760
	.word	.LC1165
	.byte	111
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58708, %object
	.size	descriptor.58708, 24
descriptor.58708:
	.word	.LC1120
	.word	__func__.58709
	.word	.LC1608
	.word	.LC1184
	.byte	76
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.65123, %object
	.size	descriptor.65123, 24
descriptor.65123:
	.word	.LC1120
	.word	__func__.65124
	.word	.LC890
	.word	.LC1189
	.byte	196
	.byte	14
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.65127, %object
	.size	descriptor.65127, 24
descriptor.65127:
	.word	.LC1120
	.word	__func__.65124
	.word	.LC890
	.word	.LC1492
	.byte	233
	.byte	14
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.65138, %object
	.size	descriptor.65138, 24
descriptor.65138:
	.word	.LC1120
	.word	__func__.65124
	.word	.LC890
	.word	.LC1201
	.byte	30
	.byte	15
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25545, %object
	.size	descriptor.25545, 24
descriptor.25545:
	.word	.LC1120
	.word	__func__.25546
	.word	.LC102
	.word	.LC82
	.byte	49
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25552, %object
	.size	descriptor.25552, 24
descriptor.25552:
	.word	.LC1120
	.word	__func__.25546
	.word	.LC102
	.word	.LC1213
	.byte	56
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25553, %object
	.size	descriptor.25553, 24
descriptor.25553:
	.word	.LC1120
	.word	__func__.25546
	.word	.LC102
	.word	.LC958
	.byte	60
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46215, %object
	.size	descriptor.46215, 24
descriptor.46215:
	.word	.LC1120
	.word	__func__.46216
	.word	.LC89
	.word	.LC1214
	.byte	211
	.byte	11
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46150, %object
	.size	descriptor.46150, 24
descriptor.46150:
	.word	.LC1120
	.word	__func__.46151
	.word	.LC89
	.word	.LC1216
	.byte	201
	.byte	10
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46023, %object
	.size	descriptor.46023, 24
descriptor.46023:
	.word	.LC1120
	.word	__func__.46024
	.word	.LC89
	.word	.LC1217
	.byte	237
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46152, %object
	.size	descriptor.46152, 24
descriptor.46152:
	.word	.LC1120
	.word	__func__.46151
	.word	.LC89
	.word	.LC1219
	.byte	224
	.byte	10
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45989, %object
	.size	descriptor.45989, 24
descriptor.45989:
	.word	.LC1120
	.word	__func__.45990
	.word	.LC89
	.word	.LC1237
	.byte	124
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45901, %object
	.size	descriptor.45901, 24
descriptor.45901:
	.word	.LC1120
	.word	__func__.45902
	.word	.LC89
	.word	.LC1242
	.byte	45
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45903, %object
	.size	descriptor.45903, 24
descriptor.45903:
	.word	.LC1120
	.word	__func__.45902
	.word	.LC89
	.word	.LC1243
	.byte	49
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45808, %object
	.size	descriptor.45808, 24
descriptor.45808:
	.word	.LC1120
	.word	__func__.45809
	.word	.LC89
	.word	.LC710
	.byte	16
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45810, %object
	.size	descriptor.45810, 24
descriptor.45810:
	.word	.LC1120
	.word	__func__.45809
	.word	.LC89
	.word	.LC711
	.byte	20
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.26118, %object
	.size	descriptor.26118, 24
descriptor.26118:
	.word	.LC1120
	.word	__func__.26119
	.word	.LC1764
	.word	.LC1255
	.byte	202
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30842, %object
	.size	descriptor.30842, 24
descriptor.30842:
	.word	.LC1120
	.word	__func__.30843
	.word	.LC1763
	.word	.LC1259
	.byte	35
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31016, %object
	.size	descriptor.31016, 24
descriptor.31016:
	.word	.LC1120
	.word	__func__.31017
	.word	.LC1760
	.word	.LC1262
	.byte	244
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30860, %object
	.size	descriptor.30860, 24
descriptor.30860:
	.word	.LC1120
	.word	__func__.30861
	.word	.LC1763
	.word	.LC1263
	.byte	115
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30862, %object
	.size	descriptor.30862, 24
descriptor.30862:
	.word	.LC1120
	.word	__func__.30861
	.word	.LC1763
	.word	.LC1266
	.byte	122
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30924, %object
	.size	descriptor.30924, 24
descriptor.30924:
	.word	.LC1120
	.word	__func__.30925
	.word	.LC1760
	.word	.LC1270
	.byte	229
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30944, %object
	.size	descriptor.30944, 24
descriptor.30944:
	.word	.LC1120
	.word	__func__.30945
	.word	.LC1760
	.word	.LC1272
	.byte	2
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31067, %object
	.size	descriptor.31067, 24
descriptor.31067:
	.word	.LC1120
	.word	__func__.31068
	.word	.LC1760
	.word	.LC1276
	.byte	164
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31084, %object
	.size	descriptor.31084, 24
descriptor.31084:
	.word	.LC1120
	.word	__func__.31085
	.word	.LC1760
	.word	.LC1279
	.byte	209
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31107, %object
	.size	descriptor.31107, 24
descriptor.31107:
	.word	.LC1120
	.word	__func__.31108
	.word	.LC1760
	.word	.LC1281
	.byte	0
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31119, %object
	.size	descriptor.31119, 24
descriptor.31119:
	.word	.LC1120
	.word	__func__.31108
	.word	.LC1760
	.word	.LC1283
	.byte	17
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31123, %object
	.size	descriptor.31123, 24
descriptor.31123:
	.word	.LC1120
	.word	__func__.31108
	.word	.LC1760
	.word	.LC1284
	.byte	33
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31132, %object
	.size	descriptor.31132, 24
descriptor.31132:
	.word	.LC1120
	.word	__func__.31133
	.word	.LC1760
	.word	.LC1285
	.byte	58
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47418, %object
	.size	descriptor.47418, 24
descriptor.47418:
	.word	.LC1120
	.word	__func__.47419
	.word	.LC675
	.word	.LC1287
	.byte	78
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47422, %object
	.size	descriptor.47422, 24
descriptor.47422:
	.word	.LC1120
	.word	__func__.47419
	.word	.LC675
	.word	.LC1288
	.byte	100
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47423, %object
	.size	descriptor.47423, 24
descriptor.47423:
	.word	.LC1120
	.word	__func__.47419
	.word	.LC675
	.word	.LC1289
	.byte	107
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47636, %object
	.size	descriptor.47636, 24
descriptor.47636:
	.word	.LC1120
	.word	__func__.47637
	.word	.LC675
	.word	.LC1290
	.byte	16
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52851, %object
	.size	descriptor.52851, 24
descriptor.52851:
	.word	.LC1120
	.word	__func__.52852
	.word	.LC1711
	.word	.LC1291
	.byte	136
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52843, %object
	.size	descriptor.52843, 24
descriptor.52843:
	.word	.LC1120
	.word	__func__.52844
	.word	.LC1711
	.word	.LC1292
	.byte	92
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52845, %object
	.size	descriptor.52845, 24
descriptor.52845:
	.word	.LC1120
	.word	__func__.52844
	.word	.LC1711
	.word	.LC1293
	.byte	100
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48728, %object
	.size	descriptor.48728, 24
descriptor.48728:
	.word	.LC1120
	.word	__func__.48729
	.word	.LC1731
	.word	.LC1294
	.byte	25
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48732, %object
	.size	descriptor.48732, 24
descriptor.48732:
	.word	.LC1120
	.word	__func__.48729
	.word	.LC1731
	.word	.LC1295
	.byte	32
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48700, %object
	.size	descriptor.48700, 24
descriptor.48700:
	.word	.LC1120
	.word	__func__.48701
	.word	.LC1731
	.word	.LC1296
	.byte	164
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48734, %object
	.size	descriptor.48734, 24
descriptor.48734:
	.word	.LC1120
	.word	__func__.48729
	.word	.LC1731
	.word	.LC1299
	.byte	37
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48224, %object
	.size	descriptor.48224, 24
descriptor.48224:
	.word	.LC1120
	.word	__func__.48225
	.word	.LC1734
	.word	.LC650
	.byte	157
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48226, %object
	.size	descriptor.48226, 24
descriptor.48226:
	.word	.LC1120
	.word	__func__.48225
	.word	.LC1734
	.word	.LC653
	.byte	162
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48237, %object
	.size	descriptor.48237, 24
descriptor.48237:
	.word	.LC1120
	.word	__func__.48236
	.word	.LC1734
	.word	.LC228
	.byte	183
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48238, %object
	.size	descriptor.48238, 24
descriptor.48238:
	.word	.LC1120
	.word	__func__.48236
	.word	.LC1734
	.word	.LC225
	.byte	188
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48240, %object
	.size	descriptor.48240, 24
descriptor.48240:
	.word	.LC1120
	.word	__func__.48236
	.word	.LC1734
	.word	.LC1300
	.byte	193
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48245, %object
	.size	descriptor.48245, 24
descriptor.48245:
	.word	.LC1120
	.word	__func__.48236
	.word	.LC1734
	.word	.LC225
	.byte	222
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48271, %object
	.size	descriptor.48271, 24
descriptor.48271:
	.word	.LC1120
	.word	__func__.48272
	.word	.LC1734
	.word	.LC1301
	.byte	57
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48273, %object
	.size	descriptor.48273, 24
descriptor.48273:
	.word	.LC1120
	.word	__func__.48272
	.word	.LC1734
	.word	.LC1302
	.byte	62
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48278, %object
	.size	descriptor.48278, 24
descriptor.48278:
	.word	.LC1120
	.word	__func__.48272
	.word	.LC1734
	.word	.LC1303
	.byte	77
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48258, %object
	.size	descriptor.48258, 24
descriptor.48258:
	.word	.LC1120
	.word	__func__.48257
	.word	.LC1734
	.word	.LC1306
	.byte	253
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48259, %object
	.size	descriptor.48259, 24
descriptor.48259:
	.word	.LC1120
	.word	__func__.48257
	.word	.LC1734
	.word	.LC1307
	.byte	0
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48260, %object
	.size	descriptor.48260, 24
descriptor.48260:
	.word	.LC1120
	.word	__func__.48257
	.word	.LC1734
	.word	.LC1308
	.byte	6
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48261, %object
	.size	descriptor.48261, 24
descriptor.48261:
	.word	.LC1120
	.word	__func__.48257
	.word	.LC1734
	.word	.LC1309
	.byte	13
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48320, %object
	.size	descriptor.48320, 24
descriptor.48320:
	.word	.LC1120
	.word	__func__.48319
	.word	.LC1734
	.word	.LC1311
	.byte	212
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48331, %object
	.size	descriptor.48331, 24
descriptor.48331:
	.word	.LC1120
	.word	__func__.48332
	.word	.LC1734
	.word	.LC224
	.byte	222
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48341, %object
	.size	descriptor.48341, 24
descriptor.48341:
	.word	.LC1120
	.word	__func__.48332
	.word	.LC1734
	.word	.LC1313
	.byte	247
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48352, %object
	.size	descriptor.48352, 24
descriptor.48352:
	.word	.LC1120
	.word	__func__.48353
	.word	.LC1734
	.word	.LC267
	.byte	57
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48392, %object
	.size	descriptor.48392, 24
descriptor.48392:
	.word	.LC1120
	.word	__func__.48393
	.word	.LC1734
	.word	.LC1319
	.byte	204
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48450, %object
	.size	descriptor.48450, 24
descriptor.48450:
	.word	.LC1120
	.word	__func__.48444
	.word	.LC1734
	.word	.LC1321
	.byte	135
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48451, %object
	.size	descriptor.48451, 24
descriptor.48451:
	.word	.LC1120
	.word	__func__.48444
	.word	.LC1734
	.word	.LC228
	.byte	139
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48463, %object
	.size	descriptor.48463, 24
descriptor.48463:
	.word	.LC1120
	.word	__func__.48459
	.word	.LC1734
	.word	.LC1323
	.byte	188
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48527, %object
	.size	descriptor.48527, 24
descriptor.48527:
	.word	.LC1120
	.word	__func__.48528
	.word	.LC1734
	.word	.LC1324
	.byte	91
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48773, %object
	.size	descriptor.48773, 24
descriptor.48773:
	.word	.LC1120
	.word	__func__.48774
	.word	.LC1731
	.word	.LC1330
	.byte	148
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48784, %object
	.size	descriptor.48784, 24
descriptor.48784:
	.word	.LC1120
	.word	__func__.48785
	.word	.LC1731
	.word	.LC1330
	.byte	198
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48885, %object
	.size	descriptor.48885, 24
descriptor.48885:
	.word	.LC1120
	.word	__func__.48886
	.word	.LC1731
	.word	.LC1332
	.byte	181
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48833, %object
	.size	descriptor.48833, 24
descriptor.48833:
	.word	.LC1120
	.word	__func__.48834
	.word	.LC1731
	.word	.LC602
	.byte	77
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49590, %object
	.size	descriptor.49590, 24
descriptor.49590:
	.word	.LC1120
	.word	__func__.49591
	.word	.LC1730
	.word	.LC1339
	.byte	65
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49606, %object
	.size	descriptor.49606, 24
descriptor.49606:
	.word	.LC1120
	.word	__func__.49607
	.word	.LC1730
	.word	.LC1339
	.byte	133
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49617, %object
	.size	descriptor.49617, 24
descriptor.49617:
	.word	.LC1120
	.word	__func__.49618
	.word	.LC1730
	.word	.LC1343
	.byte	218
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49521, %object
	.size	descriptor.49521, 24
descriptor.49521:
	.word	.LC1120
	.word	__func__.49522
	.word	.LC1730
	.word	.LC602
	.byte	151
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49534, %object
	.size	descriptor.49534, 24
descriptor.49534:
	.word	.LC1120
	.word	__func__.49535
	.word	.LC1730
	.word	.LC602
	.byte	181
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49823, %object
	.size	descriptor.49823, 24
descriptor.49823:
	.word	.LC1120
	.word	__func__.49824
	.word	.LC1726
	.word	.LC1339
	.byte	161
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49845, %object
	.size	descriptor.49845, 24
descriptor.49845:
	.word	.LC1120
	.word	__func__.49846
	.word	.LC1726
	.word	.LC1339
	.byte	217
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49912, %object
	.size	descriptor.49912, 24
descriptor.49912:
	.word	.LC1120
	.word	__func__.49913
	.word	.LC1726
	.word	.LC1349
	.byte	121
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49901, %object
	.size	descriptor.49901, 24
descriptor.49901:
	.word	.LC1120
	.word	__func__.49902
	.word	.LC1726
	.word	.LC602
	.byte	110
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50032, %object
	.size	descriptor.50032, 24
descriptor.50032:
	.word	.LC1120
	.word	__func__.50033
	.word	.LC1725
	.word	.LC1355
	.byte	144
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50043, %object
	.size	descriptor.50043, 24
descriptor.50043:
	.word	.LC1120
	.word	__func__.50044
	.word	.LC1725
	.word	.LC1355
	.byte	174
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51018, %object
	.size	descriptor.51018, 24
descriptor.51018:
	.word	.LC1120
	.word	__func__.51019
	.word	.LC1723
	.word	.LC563
	.byte	221
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51037, %object
	.size	descriptor.51037, 24
descriptor.51037:
	.word	.LC1120
	.word	__func__.51038
	.word	.LC1723
	.word	.LC563
	.byte	22
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51115, %object
	.size	descriptor.51115, 24
descriptor.51115:
	.word	.LC1120
	.word	__func__.51114
	.word	.LC1723
	.word	.LC1349
	.byte	5
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51099, %object
	.size	descriptor.51099, 24
descriptor.51099:
	.word	.LC1120
	.word	__func__.51095
	.word	.LC1723
	.word	.LC602
	.byte	218
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51624, %object
	.size	descriptor.51624, 24
descriptor.51624:
	.word	.LC1120
	.word	__func__.51625
	.word	.LC1722
	.word	.LC563
	.byte	226
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51641, %object
	.size	descriptor.51641, 24
descriptor.51641:
	.word	.LC1120
	.word	__func__.51642
	.word	.LC1722
	.word	.LC563
	.byte	21
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51787, %object
	.size	descriptor.51787, 24
descriptor.51787:
	.word	.LC1120
	.word	__func__.51786
	.word	.LC1722
	.word	.LC1360
	.byte	133
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51617, %object
	.size	descriptor.51617, 24
descriptor.51617:
	.word	.LC1120
	.word	__func__.51610
	.word	.LC1722
	.word	.LC164
	.byte	216
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52023, %object
	.size	descriptor.52023, 24
descriptor.52023:
	.word	.LC1120
	.word	__func__.52024
	.word	.LC1721
	.word	.LC563
	.byte	6
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52041, %object
	.size	descriptor.52041, 24
descriptor.52041:
	.word	.LC1120
	.word	__func__.52042
	.word	.LC1721
	.word	.LC563
	.byte	57
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52094, %object
	.size	descriptor.52094, 24
descriptor.52094:
	.word	.LC1120
	.word	__func__.52093
	.word	.LC1721
	.word	.LC1349
	.byte	204
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52084, %object
	.size	descriptor.52084, 24
descriptor.52084:
	.word	.LC1120
	.word	__func__.52080
	.word	.LC1721
	.word	.LC602
	.byte	186
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52572, %object
	.size	descriptor.52572, 24
descriptor.52572:
	.word	.LC1120
	.word	__func__.52573
	.word	.LC1716
	.word	.LC563
	.byte	78
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38888, %object
	.size	descriptor.38888, 24
descriptor.38888:
	.word	.LC1120
	.word	__func__.38889
	.word	.LC1749
	.word	.LC563
	.byte	172
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38813, %object
	.size	descriptor.38813, 24
descriptor.38813:
	.word	.LC1120
	.word	__func__.38814
	.word	.LC1749
	.word	.LC1362
	.byte	21
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52592, %object
	.size	descriptor.52592, 24
descriptor.52592:
	.word	.LC1120
	.word	__func__.52593
	.word	.LC1716
	.word	.LC563
	.byte	137
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38899, %object
	.size	descriptor.38899, 24
descriptor.38899:
	.word	.LC1120
	.word	__func__.38900
	.word	.LC1749
	.word	.LC153
	.byte	192
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38901, %object
	.size	descriptor.38901, 24
descriptor.38901:
	.word	.LC1120
	.word	__func__.38900
	.word	.LC1749
	.word	.LC1363
	.byte	195
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38790, %object
	.size	descriptor.38790, 24
descriptor.38790:
	.word	.LC1120
	.word	__func__.38791
	.word	.LC1749
	.word	.LC1362
	.byte	149
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52676, %object
	.size	descriptor.52676, 24
descriptor.52676:
	.word	.LC1120
	.word	__func__.52675
	.word	.LC1716
	.word	.LC1360
	.byte	94
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52564, %object
	.size	descriptor.52564, 24
descriptor.52564:
	.word	.LC1120
	.word	__func__.52556
	.word	.LC1716
	.word	.LC602
	.byte	67
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.39062, %object
	.size	descriptor.39062, 24
descriptor.39062:
	.word	.LC1120
	.word	__func__.39061
	.word	.LC1749
	.word	.LC1373
	.byte	4
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38763, %object
	.size	descriptor.38763, 24
descriptor.38763:
	.word	.LC1120
	.word	__func__.38764
	.word	.LC1749
	.word	.LC1377
	.byte	60
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.39039, %object
	.size	descriptor.39039, 24
descriptor.39039:
	.word	.LC1120
	.word	__func__.39040
	.word	.LC1749
	.word	.LC1378
	.byte	171
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.39044, %object
	.size	descriptor.39044, 24
descriptor.39044:
	.word	.LC1120
	.word	__func__.39040
	.word	.LC1749
	.word	.LC1384
	.byte	221
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56715, %object
	.size	descriptor.56715, 24
descriptor.56715:
	.word	.LC1120
	.word	__func__.56716
	.word	.LC1688
	.word	.LC1387
	.byte	70
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56718, %object
	.size	descriptor.56718, 24
descriptor.56718:
	.word	.LC1120
	.word	__func__.56716
	.word	.LC1688
	.word	.LC1388
	.byte	77
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56634, %object
	.size	descriptor.56634, 24
descriptor.56634:
	.word	.LC1120
	.word	__func__.56628
	.word	.LC1688
	.word	.LC1389
	.byte	27
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56637, %object
	.size	descriptor.56637, 24
descriptor.56637:
	.word	.LC1120
	.word	__func__.56628
	.word	.LC1688
	.word	.LC635
	.byte	48
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56722, %object
	.size	descriptor.56722, 24
descriptor.56722:
	.word	.LC1120
	.word	__func__.56716
	.word	.LC1688
	.word	.LC1391
	.byte	95
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56727, %object
	.size	descriptor.56727, 24
descriptor.56727:
	.word	.LC1120
	.word	__func__.56716
	.word	.LC1688
	.word	.LC1393
	.byte	132
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56405, %object
	.size	descriptor.56405, 24
descriptor.56405:
	.word	.LC1120
	.word	__func__.56406
	.word	.LC1699
	.word	.LC1395
	.byte	52
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58205, %object
	.size	descriptor.58205, 24
descriptor.58205:
	.word	.LC1120
	.word	__func__.58204
	.word	.LC1612
	.word	.LC1617
	.byte	85
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56754, %object
	.size	descriptor.56754, 24
descriptor.56754:
	.word	.LC1120
	.word	__func__.56755
	.word	.LC1688
	.word	.LC267
	.byte	174
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56472, %object
	.size	descriptor.56472, 24
descriptor.56472:
	.word	.LC1120
	.word	__func__.56473
	.word	.LC1699
	.word	.LC1110
	.byte	109
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57223, %object
	.size	descriptor.57223, 24
descriptor.57223:
	.word	.LC1120
	.word	__func__.57222
	.word	.LC1679
	.word	.LC1683
	.byte	219
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57224, %object
	.size	descriptor.57224, 24
descriptor.57224:
	.word	.LC1120
	.word	__func__.57222
	.word	.LC1679
	.word	.LC1682
	.byte	252
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58838, %object
	.size	descriptor.58838, 24
descriptor.58838:
	.word	.LC1120
	.word	__func__.58839
	.word	.LC1604
	.word	.LC1606
	.byte	241
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58840, %object
	.size	descriptor.58840, 24
descriptor.58840:
	.word	.LC1120
	.word	__func__.58839
	.word	.LC1604
	.word	.LC1605
	.byte	243
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57225, %object
	.size	descriptor.57225, 24
descriptor.57225:
	.word	.LC1120
	.word	__func__.57222
	.word	.LC1679
	.word	.LC1681
	.byte	41
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57226, %object
	.size	descriptor.57226, 24
descriptor.57226:
	.word	.LC1120
	.word	__func__.57222
	.word	.LC1679
	.word	.LC1680
	.byte	48
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57856, %object
	.size	descriptor.57856, 24
descriptor.57856:
	.word	.LC1120
	.word	__func__.57857
	.word	.LC1626
	.word	.LC1630
	.byte	166
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57570, %object
	.size	descriptor.57570, 24
descriptor.57570:
	.word	.LC1120
	.word	__func__.57568
	.word	.LC1636
	.word	.LC1646
	.byte	116
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56448, %object
	.size	descriptor.56448, 24
descriptor.56448:
	.word	.LC1120
	.word	__func__.56449
	.word	.LC1699
	.word	.LC1434
	.byte	214
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56439, %object
	.size	descriptor.56439, 24
descriptor.56439:
	.word	.LC1120
	.word	__func__.56440
	.word	.LC1699
	.word	.LC1435
	.byte	158
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56441, %object
	.size	descriptor.56441, 24
descriptor.56441:
	.word	.LC1120
	.word	__func__.56440
	.word	.LC1699
	.word	.LC1436
	.byte	163
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56442, %object
	.size	descriptor.56442, 24
descriptor.56442:
	.word	.LC1120
	.word	__func__.56440
	.word	.LC1699
	.word	.LC1437
	.byte	191
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58051, %object
	.size	descriptor.58051, 24
descriptor.58051:
	.word	.LC1120
	.word	__func__.58052
	.word	.LC1622
	.word	.LC1438
	.byte	113
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58036, %object
	.size	descriptor.58036, 24
descriptor.58036:
	.word	.LC1120
	.word	__func__.58037
	.word	.LC1622
	.word	.LC1439
	.byte	46
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58038, %object
	.size	descriptor.58038, 24
descriptor.58038:
	.word	.LC1120
	.word	__func__.58037
	.word	.LC1622
	.word	.LC1440
	.byte	52
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58040, %object
	.size	descriptor.58040, 24
descriptor.58040:
	.word	.LC1120
	.word	__func__.58037
	.word	.LC1622
	.word	.LC1441
	.byte	75
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63560, %object
	.size	descriptor.63560, 24
descriptor.63560:
	.word	.LC1120
	.word	__func__.63561
	.word	.LC1549
	.word	.LC1442
	.byte	238
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63495, %object
	.size	descriptor.63495, 24
descriptor.63495:
	.word	.LC1120
	.word	__func__.63496
	.word	.LC1549
	.word	.LC1443
	.byte	129
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63497, %object
	.size	descriptor.63497, 24
descriptor.63497:
	.word	.LC1120
	.word	__func__.63496
	.word	.LC1549
	.word	.LC1444
	.byte	134
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63498, %object
	.size	descriptor.63498, 24
descriptor.63498:
	.word	.LC1120
	.word	__func__.63496
	.word	.LC1549
	.word	.LC1445
	.byte	150
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63500, %object
	.size	descriptor.63500, 24
descriptor.63500:
	.word	.LC1120
	.word	__func__.63496
	.word	.LC1549
	.word	.LC1447
	.byte	168
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58854, %object
	.size	descriptor.58854, 24
descriptor.58854:
	.word	.LC1120
	.word	__func__.58855
	.word	.LC1604
	.word	.LC1184
	.byte	62
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.64033, %object
	.size	descriptor.64033, 24
descriptor.64033:
	.word	.LC1120
	.word	__func__.64032
	.word	.LC890
	.word	.LC1539
	.byte	119
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57173, %object
	.size	descriptor.57173, 24
descriptor.57173:
	.word	.LC1120
	.word	__func__.57174
	.word	.LC1679
	.word	.LC1438
	.byte	204
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57104, %object
	.size	descriptor.57104, 24
descriptor.57104:
	.word	.LC1120
	.word	__func__.57105
	.word	.LC1679
	.word	.LC1686
	.byte	238
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57158, %object
	.size	descriptor.57158, 24
descriptor.57158:
	.word	.LC1120
	.word	__func__.57159
	.word	.LC1679
	.word	.LC1439
	.byte	125
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57160, %object
	.size	descriptor.57160, 24
descriptor.57160:
	.word	.LC1120
	.word	__func__.57159
	.word	.LC1679
	.word	.LC1440
	.byte	137
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57162, %object
	.size	descriptor.57162, 24
descriptor.57162:
	.word	.LC1120
	.word	__func__.57159
	.word	.LC1679
	.word	.LC1441
	.byte	160
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57100, %object
	.size	descriptor.57100, 24
descriptor.57100:
	.word	.LC1120
	.word	__func__.57099
	.word	.LC1679
	.word	.LC1687
	.byte	227
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58162, %object
	.size	descriptor.58162, 24
descriptor.58162:
	.word	.LC1120
	.word	__func__.58163
	.word	.LC1612
	.word	.LC1618
	.byte	203
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58238, %object
	.size	descriptor.58238, 24
descriptor.58238:
	.word	.LC1120
	.word	__func__.58239
	.word	.LC1612
	.word	.LC1435
	.byte	187
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58240, %object
	.size	descriptor.58240, 24
descriptor.58240:
	.word	.LC1120
	.word	__func__.58239
	.word	.LC1612
	.word	.LC1436
	.byte	197
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58241, %object
	.size	descriptor.58241, 24
descriptor.58241:
	.word	.LC1120
	.word	__func__.58239
	.word	.LC1612
	.word	.LC1457
	.byte	228
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61993, %object
	.size	descriptor.61993, 24
descriptor.61993:
	.word	.LC1120
	.word	__func__.61991
	.word	.LC1589
	.word	.LC1591
	.byte	92
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61915, %object
	.size	descriptor.61915, 24
descriptor.61915:
	.word	.LC1120
	.word	__func__.61916
	.word	.LC1589
	.word	.LC1599
	.byte	85
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61921, %object
	.size	descriptor.61921, 24
descriptor.61921:
	.word	.LC1120
	.word	__func__.61922
	.word	.LC1589
	.word	.LC1598
	.byte	128
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61998, %object
	.size	descriptor.61998, 24
descriptor.61998:
	.word	.LC1120
	.word	__func__.61999
	.word	.LC1589
	.word	.LC1590
	.byte	132
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62941, %object
	.size	descriptor.62941, 24
descriptor.62941:
	.word	.LC1120
	.word	__func__.62942
	.word	.LC1556
	.word	.LC1558
	.byte	109
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.64492, %object
	.size	descriptor.64492, 24
descriptor.64492:
	.word	.LC1120
	.word	__func__.64493
	.word	.LC890
	.word	.LC1518
	.byte	229
	.byte	9
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56724, %object
	.size	descriptor.56724, 24
descriptor.56724:
	.word	.LC1120
	.word	__func__.56716
	.word	.LC1688
	.word	.LC1689
	.byte	103
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56629, %object
	.size	descriptor.56629, 24
descriptor.56629:
	.word	.LC1120
	.word	__func__.56628
	.word	.LC1688
	.word	.LC1690
	.byte	11
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56627, %object
	.size	descriptor.56627, 24
descriptor.56627:
	.word	.LC1120
	.word	__func__.56628
	.word	.LC1688
	.word	.LC1691
	.byte	5
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56596, %object
	.size	descriptor.56596, 24
descriptor.56596:
	.word	.LC1120
	.word	__func__.56548
	.word	.LC1688
	.word	.LC1692
	.byte	145
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56594, %object
	.size	descriptor.56594, 24
descriptor.56594:
	.word	.LC1120
	.word	__func__.56548
	.word	.LC1688
	.word	.LC1693
	.byte	135
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56592, %object
	.size	descriptor.56592, 24
descriptor.56592:
	.word	.LC1120
	.word	__func__.56548
	.word	.LC1688
	.word	.LC1694
	.byte	124
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56590, %object
	.size	descriptor.56590, 24
descriptor.56590:
	.word	.LC1120
	.word	__func__.56548
	.word	.LC1688
	.word	.LC1695
	.byte	113
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56584, %object
	.size	descriptor.56584, 24
descriptor.56584:
	.word	.LC1120
	.word	__func__.56548
	.word	.LC1688
	.word	.LC1696
	.byte	84
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56568, %object
	.size	descriptor.56568, 24
descriptor.56568:
	.word	.LC1120
	.word	__func__.56548
	.word	.LC1688
	.word	.LC1697
	.byte	7
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56549, %object
	.size	descriptor.56549, 24
descriptor.56549:
	.word	.LC1120
	.word	__func__.56548
	.word	.LC1688
	.word	.LC1690
	.byte	197
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56547, %object
	.size	descriptor.56547, 24
descriptor.56547:
	.word	.LC1120
	.word	__func__.56548
	.word	.LC1688
	.word	.LC1698
	.byte	191
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52454, %object
	.size	descriptor.52454, 24
descriptor.52454:
	.word	.LC1120
	.word	__func__.52455
	.word	.LC1716
	.word	.LC1717
	.byte	250
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52409, %object
	.size	descriptor.52409, 24
descriptor.52409:
	.word	.LC1120
	.word	__func__.52410
	.word	.LC1716
	.word	.LC551
	.byte	145
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52304, %object
	.size	descriptor.52304, 24
descriptor.52304:
	.word	.LC1120
	.word	__func__.52305
	.word	.LC1716
	.word	.LC1718
	.byte	157
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51528, %object
	.size	descriptor.51528, 24
descriptor.51528:
	.word	.LC1120
	.word	__func__.51529
	.word	.LC1722
	.word	.LC551
	.byte	222
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51385, %object
	.size	descriptor.51385, 24
descriptor.51385:
	.word	.LC1120
	.word	__func__.51384
	.word	.LC1722
	.word	.LC653
	.byte	159
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51383, %object
	.size	descriptor.51383, 24
descriptor.51383:
	.word	.LC1120
	.word	__func__.51384
	.word	.LC1722
	.word	.LC1718
	.byte	154
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48407, %object
	.size	descriptor.48407, 24
descriptor.48407:
	.word	.LC1120
	.word	__func__.48405
	.word	.LC1734
	.word	.LC1735
	.byte	2
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48406, %object
	.size	descriptor.48406, 24
descriptor.48406:
	.word	.LC1120
	.word	__func__.48405
	.word	.LC1734
	.word	.LC1736
	.byte	247
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48343, %object
	.size	descriptor.48343, 24
descriptor.48343:
	.word	.LC1120
	.word	__func__.48332
	.word	.LC1734
	.word	.LC1737
	.byte	255
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.44862, %object
	.size	descriptor.44862, 24
descriptor.44862:
	.word	.LC1120
	.word	__func__.44853
	.word	.LC33
	.word	.LC1745
	.byte	237
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.44858, %object
	.size	descriptor.44858, 24
descriptor.44858:
	.word	.LC1120
	.word	__func__.44853
	.word	.LC33
	.word	.LC1746
	.byte	222
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.44854, %object
	.size	descriptor.44854, 24
descriptor.44854:
	.word	.LC1120
	.word	__func__.44853
	.word	.LC33
	.word	.LC1745
	.byte	212
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.37298, %object
	.size	descriptor.37298, 24
descriptor.37298:
	.word	.LC1120
	.word	__func__.37299
	.word	.LC1754
	.word	.LC1755
	.byte	170
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.37280, %object
	.size	descriptor.37280, 24
descriptor.37280:
	.word	.LC1120
	.word	__func__.37278
	.word	.LC1754
	.word	.LC1756
	.byte	144
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.37279, %object
	.size	descriptor.37279, 24
descriptor.37279:
	.word	.LC1120
	.word	__func__.37278
	.word	.LC1754
	.word	.LC1757
	.byte	138
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25421, %object
	.size	descriptor.25421, 24
descriptor.25421:
	.word	.LC1120
	.word	__func__.25391
	.word	.LC102
	.word	.LC1766
	.byte	8
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25420, %object
	.size	descriptor.25420, 24
descriptor.25420:
	.word	.LC1120
	.word	__func__.25391
	.word	.LC102
	.word	.LC1767
	.byte	6
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.ident	"GCC: (Linaro GCC 7.4-2019.02) 7.4.1 20181213 [linaro-7.4-2019.02 revision 56ec6f6b99cc167ff0c2f8e1a2eed33b1edc85d4]"
	.section	.note.GNU-stack,"",%progbits
// Generated by Lolz Kernel
