debug_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {lr}
	str	lr, [sp, #-4]!
	movw	lr, #:lower16:.LANCHOR0
	movt	lr, #:upper16:.LANCHOR0
	ldr	r3, [lr]
	cmp	lr, r3
	beq	.L3
	sub	r3, r3, #4
	mov	ip, #0
.L2:
	ldr	r1, [r3, #20]
	cmp	r1, #0
	beq	.L4
	str	ip, [r1, #128]
	str	ip, [r1, #132]
	str	ip, [r1, #136]
	ldr	r3, [r3, #4]
	cmp	lr, r3
	sub	r3, r3, #4
	bne	.L2
.L3:
	mov	r0, r2
	ldr	pc, [sp], #4
.L4:
	ldr	r3, [r3, #4]
	cmp	lr, r3
	sub	r3, r3, #4
	bne	.L2
	mov	r0, r2
	ldr	pc, [sp], #4
	.fnend
	.size	debug_reset_stats, .-debug_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_open, %function
debug_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	debug_open, .-debug_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_txcommand_complete, %function
rmnet_txcommand_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	add	r5, r4, #164
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #440]
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #440]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
	.fnend
	.size	rmnet_txcommand_complete, .-rmnet_txcommand_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_debug_reset_stats, %function
rmnet_smd_debug_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	add	r5, r4, #164
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r3, #0
	mov	r1, r0
	mov	r0, r5
	str	r3, [r4, #424]
	str	r3, [r4, #428]
	str	r3, [r4, #432]
	str	r3, [r4, #436]
	str	r3, [r4, #440]
	str	r3, [r4, #444]
	str	r3, [r4, #448]
	str	r3, [r4, #452]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, r6
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_smd_debug_reset_stats, .-rmnet_smd_debug_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_debug_open, %function
rmnet_smd_debug_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	rmnet_smd_debug_open, .-rmnet_smd_debug_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_disconnect_work, %function
rmnet_sdio_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	rmnet_sdio_disconnect_work, .-rmnet_sdio_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_reset_stats, %function
rmnet_sdio_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #124]
	mov	r1, #0
	mov	r0, r2
	str	r1, [r3, #328]
	str	r1, [r3, #356]
	str	r1, [r3, #360]
	str	r1, [r3, #364]
	str	r1, [r3, #368]
	str	r1, [r3, #372]
	bx	lr
	.fnend
	.size	rmnet_sdio_reset_stats, .-rmnet_sdio_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_suspend, %function
rmnet_mux_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #372]
	cmp	r3, #0
	beq	.L17
	ldr	r3, [r0, #352]
	bic	r3, r3, #2
	str	r3, [r0, #352]
.L17:
	bx	lr
	.fnend
	.size	rmnet_mux_suspend, .-rmnet_mux_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_unbind, %function
rmnet_mux_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #0
	str	r3, [r1, #172]
	bx	lr
	.fnend
	.size	rmnet_mux_unbind, .-rmnet_mux_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_reset_stats, %function
rmnet_mux_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #124]
	mov	r1, #0
	mov	r0, r2
	str	r1, [r3, #312]
	str	r1, [r3, #400]
	str	r1, [r3, #404]
	str	r1, [r3, #408]
	str	r1, [r3, #412]
	str	r1, [r3, #416]
	str	r1, [r3, #420]
	str	r1, [r3, #424]
	bx	lr
	.fnend
	.size	rmnet_mux_reset_stats, .-rmnet_mux_reset_stats
	.align	2
	.global	usb_rmnet_mux_ctrl_release
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_release, %function
usb_rmnet_mux_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	mov	r4, #0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r1, #124]
	add	r6, r7, #368
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r4, [r7, #356]
	mov	r0, r6
	str	r4, [r5, #124]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	usb_rmnet_mux_ctrl_release, .-usb_rmnet_mux_ctrl_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_control_complete, %function
audio_control_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	audio_control_complete, .-audio_control_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_close, %function
audio_pcm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #8]
	add	r5, r6, #108
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r4, [r6, #92]
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	audio_pcm_close, .-audio_pcm_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_prepare, %function
audio_pcm_prepare:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	ip, r0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r1, [ip, #212]
	mov	lr, #0
	mov	r0, lr
	ldr	r4, [r1, #60]
	ldr	r2, [r1, #80]
	ldr	r3, [r1, #200]
	mul	r2, r2, r4
	str	lr, [r3, #128]
	lsr	r2, r2, #3
	str	r2, [r3, #124]
	ldr	r2, [r1, #540]
	str	r2, [r3, #112]
	ldr	ip, [ip, #212]
	ldr	lr, [ip, #68]
	ldr	r1, [ip, #80]
	str	r2, [r3, #120]
	mul	r1, r1, lr
	add	r2, r2, r1, lsr #3
	str	r2, [r3, #116]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	audio_pcm_prepare, .-audio_pcm_prepare
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_pointer, %function
audio_pcm_pointer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #212]
	ldr	r0, [r3, #80]
	ldr	r2, [r3, #200]
	ldr	r1, [r2, #112]
	ldr	r3, [r2, #120]
	sub	r3, r3, r1
	lsl	r3, r3, #3
	udiv	r0, r3, r0
	bx	lr
	.fnend
	.size	audio_pcm_pointer, .-audio_pcm_pointer
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_ioctl, %function
ffs_ep0_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #26496
	ldr	r0, [r0, #124]
	cmp	r1, ip
	beq	.L46
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L40
	ldr	r3, [r0]
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L40
	bx	r3
.L46:
	mov	r3, r2
	ldr	r2, [r0, #132]
	cmp	r2, #0
	beq	.L37
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	r1, [r2, #8]
	ldr	lr, [r2, #32]
	ldrh	r1, [r1, #178]
	cmp	r1, #0
	beq	.L38
	uxtb	r2, r3
	mov	ip, lr
.L36:
	mov	r3, ip
	ldrsh	r0, [r3], #2
	cmp	r0, #0
	blt	.L35
	cmp	r0, r2
	beq	.L47
.L35:
	subs	r1, r1, #1
	mov	ip, r3
	bne	.L36
.L38:
	mvn	r0, #32
	ldr	pc, [sp], #4
.L47:
	sub	r0, ip, lr
	asr	r0, r0, #1
	ldr	pc, [sp], #4
.L40:
	mvn	r0, #24
	bx	lr
.L37:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	ffs_ep0_ioctl, .-ffs_ep0_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_write_room, %function
gs_write_room:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #272]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #4]
	mov	r1, r0
	cmp	r3, #0
	moveq	r5, r3
	beq	.L49
	ldr	r2, [r4, #92]
	ldr	r3, [r4, #100]
	ldr	r0, [r4, #104]
	add	r3, r3, r2
	sub	r3, r3, r0
	sub	r3, r3, #1
	udiv	r5, r3, r2
	mls	r5, r2, r5, r3
.L49:
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_write_room, .-gs_write_room
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_chars_in_buffer, %function
gs_chars_in_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r4, [r0, #272]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #92]
	mov	r1, r0
	mov	r0, r4
	ldr	ip, [r4, #100]
	ldr	r3, [r4, #104]
	add	r3, r3, r2
	sub	r3, r3, ip
	udiv	r4, r3, r2
	mls	r4, r2, r4, r3
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gs_chars_in_buffer, .-gs_chars_in_buffer
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_break_ctl, %function
gs_break_ctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r5, [r0, #272]
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r0, [r5, #4]
	cmp	r0, #0
	moveq	r4, r0
	beq	.L55
	ldr	r4, [r0, #124]
	cmp	r4, #0
	beq	.L55
	mov	r1, r6
	blx	r4
	mov	r4, r0
.L55:
	mov	r0, r5
	bl	_raw_spin_unlock_irq
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_break_ctl, .-gs_break_ctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_tiocmget, %function
gs_tiocmget:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #272]
	mov	r0, r6
	bl	_raw_spin_lock_irq
	ldr	r5, [r6, #4]
	cmp	r5, #0
	mvneq	r4, #18
	beq	.L60
	ldr	r4, [r5, #108]
	cmp	r4, #0
	beq	.L61
	mov	r0, r5
	blx	r4
	cmp	r0, #0
	movne	r4, #2
	moveq	r4, #0
.L61:
	ldr	r3, [r5, #112]
	cmp	r3, #0
	beq	.L63
	mov	r0, r5
	blx	r3
	cmp	r0, #0
	orrne	r4, r4, #4
.L63:
	ldrh	r3, [r5, #104]
	tst	r3, #64
	orrne	r4, r4, #64
	tst	r3, #128
	orrne	r4, r4, #128
.L60:
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_tiocmget, .-gs_tiocmget
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_tiocmset, %function
gs_tiocmset:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r2
	strd	r8, [sp, #16]
	mov	r8, r1
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r7, [r0, #272]
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r4, [r7, #4]
	cmp	r4, #0
	beq	.L86
	ands	r5, r8, #128
	and	r9, r6, #128
	beq	.L83
	ldr	r5, [r4, #132]
	cmp	r5, #0
	beq	.L84
	ldrh	r3, [r4, #104]
	mov	r1, #1
	mov	r0, r4
	orr	r3, r3, #128
	strh	r3, [r4, #104]	@ movhi
	blx	r5
	mov	r5, r0
.L83:
	cmp	r9, #0
	beq	.L84
	ldr	r2, [r4, #132]
	cmp	r2, #0
	beq	.L84
	ldrh	r3, [r4, #104]
	mov	r1, #0
	mov	r0, r4
	bic	r3, r3, #128
	strh	r3, [r4, #104]	@ movhi
	blx	r2
	mov	r5, r0
.L84:
	tst	r8, #64
	and	r6, r6, #64
	bne	.L108
.L85:
	cmp	r6, #0
	beq	.L82
	ldr	r2, [r4, #128]
	cmp	r2, #0
	beq	.L82
	ldrh	r3, [r4, #104]
	mov	r0, r4
	mov	r1, #0
	bic	r3, r3, #64
	strh	r3, [r4, #104]	@ movhi
	blx	r2
	mov	r5, r0
.L82:
	mov	r0, r7
	bl	_raw_spin_unlock_irq
	ldrd	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L108:
	ldr	r2, [r4, #128]
	cmp	r2, #0
	beq	.L82
	ldrh	r3, [r4, #104]
	mov	r1, #1
	mov	r0, r4
	orr	r3, r3, #64
	strh	r3, [r4, #104]	@ movhi
	blx	r2
	mov	r5, r0
	b	.L85
.L86:
	mvn	r5, #18
	b	.L82
	.fnend
	.size	gs_tiocmset, .-gs_tiocmset
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_write_reset, %function
debug_write_reset:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	mov	r3, #0
	mov	r1, r0
	mov	r0, r4
	str	r3, [r4, #128]
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	debug_write_reset, .-debug_write_reset
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_sdio_reset_stats, %function
debug_sdio_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r7]
	str	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #28]
	cmp	r3, #0
	beq	.L112
	mov	r5, #0
	add	r6, r7, #4
	mov	r9, r5
.L113:
	ldr	r4, [r6, #20]
	add	r5, r5, #1
	add	r6, r6, #104
	add	r8, r4, #4
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r9, [r4, #184]
	mov	r0, r8
	str	r9, [r4, #188]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7]
	cmp	r5, r3
	bcc	.L113
.L112:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	debug_sdio_reset_stats, .-debug_sdio_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_smd_reset_stats, %function
debug_smd_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r7, #212]
	str	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #28]
	cmp	r3, #0
	beq	.L120
	mov	r5, #0
	add	r6, r7, #216
	mov	r9, r5
.L121:
	ldr	r4, [r6, #20]
	add	r5, r5, #1
	add	r6, r6, #104
	add	r8, r4, #4
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r9, [r4, #168]
	mov	r0, r8
	str	r9, [r4, #172]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7, #212]
	cmp	r5, r3
	bcc	.L121
.L120:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	debug_smd_reset_stats, .-debug_smd_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_reset_stats, %function
gbam_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r3, #424]
	cmp	r2, #0
	ble	.L128
	ldr	r4, [r3, #428]
	cmp	r4, #0
	beq	.L128
	add	r5, r4, #4
	add	r6, r4, #8
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #240]
	str	r3, [r4, #244]
	str	r3, [r4, #248]
	str	r3, [r4, #260]
	str	r3, [r4, #264]
	str	r3, [r4, #268]
	str	r3, [r4, #272]
	str	r3, [r4, #276]
	str	r3, [r4, #280]
	bl	_raw_spin_unlock
	mov	r1, r8
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L128:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	gbam_reset_stats, .-gbam_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_reset_stats, %function
gsmd_ctrl_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	ldr	r5, .L142
	strd	r6, [sp, #8]
	mov	r7, #0
	strd	r8, [sp, #16]
	mov	r9, r2
	str	r10, [sp, #24]
	add	r8, r5, #504
	str	lr, [sp, #28]
.L136:
	ldr	r4, [r5]
	add	r5, r5, #84
	cmp	r4, #0
	add	r6, r4, #108
	mov	r0, r6
	beq	.L135
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r7, [r4, #92]
	mov	r0, r6
	str	r7, [r4, #96]
	bl	_raw_spin_unlock_irqrestore
.L135:
	cmp	r5, r8
	bne	.L136
	mov	r0, r9
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L143:
	.align	2
.L142:
	.word	.LANCHOR1+512
	.fnend
	.size	gsmd_ctrl_reset_stats, .-gsmd_ctrl_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_receive, %function
ghsic_ctrl_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	subs	r4, r0, #0
	str	lr, [sp, #4]
	moveq	r0, r4
	beq	.L144
	ldr	r3, [r4, #52]
	cmp	r3, #0
	beq	.L147
	ldr	r0, [r4, #8]
	blx	r3
	ldr	r3, [r4, #100]
	add	r3, r3, #1
	str	r3, [r4, #100]
.L144:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L147:
	mov	r0, r3
	b	.L144
	.fnend
	.size	ghsic_ctrl_receive, .-ghsic_ctrl_receive
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_reset_stats, %function
gctrl_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	str	r10, [sp, #24]
	mov	r10, r2
	ldr	r3, [r9, #1016]
	str	lr, [sp, #28]
	cmp	r3, #0
	beq	.L150
	mov	r5, #0
	add	r6, r9, #1020
	mov	r8, r5
.L151:
	ldr	r4, [r6]
	cmp	r4, #0
	add	r7, r4, #4
	mov	r0, r7
	beq	.L152
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r8, [r4, #96]
	mov	r0, r7
	str	r8, [r4, #100]
	add	r5, r5, #1
	add	r6, r6, #104
	str	r8, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r9, #1016]
	cmp	r3, r5
	bhi	.L151
.L150:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L152:
	add	r5, r5, #1
	add	r6, r6, #104
	cmp	r5, r3
	bcc	.L151
	b	.L150
	.fnend
	.size	gctrl_reset_stats, .-gctrl_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_reset_stats, %function
ghsic_data_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	movw	fp, #:lower16:.LANCHOR1
	mov	r10, r2
	strd	r8, [sp, #16]
	movt	fp, #:upper16:.LANCHOR1
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r3, [fp, #1436]
	cmp	r3, #0
	beq	.L159
	mov	r6, #0
	add	r7, fp, #1440
	mov	r5, r6
.L160:
	ldr	r4, [r7]
	cmp	r4, #0
	add	r8, r4, #80
	add	r9, r4, #48
	mov	r0, r8
	beq	.L161
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #188]
	mov	r0, r8
	str	r5, [r4, #204]
	add	r6, r6, #1
	add	r7, r7, #104
	str	r5, [r4, #208]
	str	r5, [r4, #212]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #192]
	mov	r0, r9
	str	r5, [r4, #196]
	str	r5, [r4, #200]
	str	r5, [r4, #216]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [fp, #1436]
	cmp	r3, r6
	bhi	.L160
.L159:
	mov	r0, r10
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L161:
	add	r6, r6, #1
	add	r7, r7, #104
	cmp	r6, r3
	bcc	.L160
	b	.L159
	.fnend
	.size	ghsic_data_reset_stats, .-ghsic_data_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_reset_stats, %function
ghsuart_ctrl_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r7, #1856]
	str	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #28]
	cmp	r3, #0
	beq	.L168
	ldr	r6, .L176
	mov	r5, #0
	mov	r9, r5
.L169:
	ldr	r4, [r6]
	cmp	r4, #0
	add	r8, r4, #8
	mov	r0, r8
	beq	.L170
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r9, [r4, #96]
	mov	r0, r8
	str	r9, [r4, #100]
	add	r5, r5, #1
	add	r6, r6, #84
	str	r9, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7, #1856]
	cmp	r3, r5
	bhi	.L169
.L168:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L170:
	add	r5, r5, #1
	add	r6, r6, #84
	cmp	r5, r3
	bcc	.L169
	b	.L168
.L177:
	.align	2
.L176:
	.word	.LANCHOR1+1860
	.fnend
	.size	ghsuart_ctrl_reset_stats, .-ghsuart_ctrl_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_reset_stats, %function
ghsuart_data_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r7, #2028]
	strd	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	cmp	r3, #0
	beq	.L179
	mov	r5, #0
	add	r6, r7, #2032
	mov	r8, r5
.L180:
	ldr	r4, [r6]
	cmp	r4, #0
	add	fp, r4, #104
	add	r9, r4, #72
	mov	r0, fp
	beq	.L181
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r8, [r4, #204]
	mov	r0, fp
	str	r8, [r4, #212]
	add	r5, r5, #1
	add	r6, r6, #84
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r8, [r4, #208]
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7, #2028]
	cmp	r3, r5
	bhi	.L180
.L179:
	mov	r0, r10
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L181:
	add	r5, r5, #1
	add	r6, r6, #84
	cmp	r5, r3
	bcc	.L180
	b	.L179
	.fnend
	.size	ghsuart_data_reset_stats, .-ghsuart_data_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_open, %function
modem_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, r2
	str	r2, [r3, #2200]
	bx	lr
	.fnend
	.size	modem_open, .-modem_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_poll, %function
modem_poll:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r2, r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	beq	.L189
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L189
	ldr	r1, .L200
	blx	r3
.L189:
	movw	r3, #:lower16:.LANCHOR1
	ldr	r4, [sp]
	add	sp, sp, #4
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #2200]
	cmp	r0, #0
	movne	r0, #65
	ldr	pc, [sp], #4
.L201:
	.align	2
.L200:
	.word	.LANCHOR1+2204
	.fnend
	.size	modem_poll, .-modem_poll
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_ctrl_release, %function
ccid_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #124]
	mov	r3, #0
	mov	r0, r3
	str	r3, [r2, #116]
	bx	lr
	.fnend
	.size	ccid_ctrl_release, .-ccid_ctrl_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_snd_free, %function
f_midi_snd_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_snd_free, .-f_midi_snd_free
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_in_open, %function
f_midi_in_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #12]
	ldr	r2, [r0, #28]
	ldr	r2, [r2, #200]
	add	r3, r2, r3, lsl #2
	ldr	r1, [r3, #232]
	cmp	r1, #0
	beq	.L206
	str	r0, [r3, #104]
	ldr	r3, [r0, #12]
	mov	r1, #0
	mov	r0, r1
	add	r3, r3, #58
	ldr	r3, [r2, r3, lsl #2]
	strb	r1, [r3, #9]
	bx	lr
.L206:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	f_midi_in_open, .-f_midi_in_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_out_open, %function
f_midi_out_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #12]
	mov	r2, r0
	ldr	r1, [r0, #28]
	cmp	r3, #15
	ldr	r1, [r1, #200]
	addle	r3, r3, #42
	movle	r0, #0
	mvngt	r0, #21
	strle	r2, [r1, r3, lsl #2]
	bx	lr
	.fnend
	.size	f_midi_out_open, .-f_midi_out_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_get_alt, %function
ecm_qc_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #120]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L212
	ldr	r3, [r0, #88]
	ldr	r0, [r3]
	adds	r0, r0, #0
	movne	r0, #1
	bx	lr
.L212:
	mov	r0, #0
	bx	lr
	.fnend
	.size	ecm_qc_get_alt, .-ecm_qc_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_get_alt, %function
mbim_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #196]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L215
	ldrb	r3, [r0, #197]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L216
	ldrb	r0, [r0, #198]	@ zero_extendqisi2
	bx	lr
.L215:
	mov	r0, #0
	bx	lr
.L216:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	mbim_get_alt, .-mbim_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_get_alt, %function
ecm_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #148]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L219
	ldr	r3, [r0, #88]
	ldr	r0, [r3]
	adds	r0, r0, #0
	movne	r0, #1
	bx	lr
.L219:
	mov	r0, #0
	bx	lr
	.fnend
	.size	ecm_get_alt, .-ecm_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ueth_change_mtu, %function
ueth_change_mtu:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #1152
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1156]
	mov	r1, r0
	cmp	r3, #0
	bne	.L222
	sub	r0, r6, #15
	movw	r2, #1499
	cmp	r0, r2
	bhi	.L223
	str	r6, [r4, #356]
	mov	r4, r3
.L221:
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L222:
	mvn	r4, #15
	b	.L221
.L223:
	mvn	r4, #33
	b	.L221
	.fnend
	.size	ueth_change_mtu, .-ueth_change_mtu
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ueth_qc_change_mtu, %function
ueth_qc_change_mtu:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #1152
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1156]
	mov	r1, r0
	cmp	r3, #0
	bne	.L227
	sub	r0, r6, #15
	movw	r2, #1499
	cmp	r0, r2
	bhi	.L228
	str	r6, [r4, #356]
	mov	r4, r3
.L226:
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L227:
	mvn	r4, #15
	b	.L226
.L228:
	mvn	r4, #33
	b	.L226
	.fnend
	.size	ueth_qc_change_mtu, .-ueth_qc_change_mtu
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_qc_start_xmit, %function
eth_qc_start_xmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	eth_qc_start_xmit, .-eth_qc_start_xmit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_get_alt, %function
f_audio_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldrb	r2, [r3, #16]	@ zero_extendqisi2
	cmp	r2, r1
	beq	.L235
	ldrb	r3, [r3, #17]	@ zero_extendqisi2
	cmp	r3, r1
	ldrbeq	r0, [r0, #249]	@ zero_extendqisi2
	movne	r0, #0
	bx	lr
.L235:
	ldrb	r0, [r0, #248]	@ zero_extendqisi2
	bx	lr
	.fnend
	.size	f_audio_get_alt, .-f_audio_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_disable, %function
f_audio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	strb	r2, [r3, #2216]
	bx	lr
	.fnend
	.size	f_audio_disable, .-f_audio_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	generic_set_cmd, %function
generic_set_cmd:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	add	r1, r1, #4
	str	r2, [r0, r1, lsl #2]
	mov	r0, #0
	bx	lr
	.fnend
	.size	generic_set_cmd, .-generic_set_cmd
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	generic_get_cmd, %function
generic_get_cmd:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	add	r1, r1, #4
	ldr	r0, [r0, r1, lsl #2]
	bx	lr
	.fnend
	.size	generic_get_cmd, .-generic_get_cmd
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_out_max_packet_size_store, %function
conn_gadget_out_max_packet_size_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r3
	bx	lr
	.fnend
	.size	conn_gadget_out_max_packet_size_store, .-conn_gadget_out_max_packet_size_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_get_alt, %function
ncm_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #148]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L242
	ldr	r3, [r0, #88]
	ldr	r0, [r3]
	adds	r0, r0, #0
	movne	r0, #1
	bx	lr
.L242:
	mov	r0, #0
	bx	lr
	.fnend
	.size	ncm_get_alt, .-ncm_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_function_unbind_config, %function
audio_source_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mvn	r2, #0
	str	r2, [r3]
	str	r2, [r3, #4]
	bx	lr
	.fnend
	.size	audio_source_function_unbind_config, .-audio_source_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	uasp_function_bind_config, %function
uasp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mvn	r0, #18
	bx	lr
	.fnend
	.size	uasp_function_bind_config, .-uasp_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_set_endpoint_complete, %function
audio_set_endpoint_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r3, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	ldr	r5, [r1, #32]
	ldr	r4, [r1, #44]
	str	r3, [sp, #4]
	cmp	r4, r3
	bne	.L245
	ldr	r6, [r5, #272]
	cmp	r6, r3
	beq	.L245
	ldm	r1, {r1, r2}
	add	r0, sp, #4
	bl	memcpy
	ldr	r2, [sp, #4]
	mov	r0, r6
	ldrb	r1, [r5, #268]	@ zero_extendqisi2
	ldr	r3, [r6, #36]
	blx	r3
	str	r4, [r5, #272]
.L245:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	audio_set_endpoint_complete, .-audio_set_endpoint_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_function_init, %function
midi_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L257
	mov	r4, r0
	mov	r2, #8
	mov	r0, r3
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4, #4]
	beq	.L255
.L253:
	mvn	r2, #0
	mov	r0, #0
	str	r2, [r3]
	str	r2, [r3, #4]
.L251:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L257:
	mov	r2, #16
	mov	r3, r2
	str	r2, [r0, #4]
	b	.L253
.L255:
	mvn	r0, #11
	b	.L251
	.fnend
	.size	midi_function_init, .-midi_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_function_init, %function
ecm_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L265
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, #6
	mov	r4, r0
	movw	r1, #32976
	mov	r0, r3
	str	lr, [sp, #4]
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	mvneq	r3, #11
	movne	r3, #0
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, r3
	ldr	pc, [sp], #4
.L265:
	mov	r2, #16
	str	r2, [r0, #4]
	mov	r0, r3
	bx	lr
	.fnend
	.size	ecm_function_init, .-ecm_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_function_init, %function
rndis_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L273
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, #272
	mov	r4, r0
	movw	r1, #32976
	mov	r0, r3
	str	lr, [sp, #4]
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	mvneq	r3, #11
	movne	r3, #0
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, r3
	ldr	pc, [sp], #4
.L273:
	mov	r2, #16
	str	r2, [r0, #4]
	mov	r0, r3
	bx	lr
	.fnend
	.size	rndis_function_init, .-rndis_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_function_init, %function
audio_source_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L277
	mov	r2, #8
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L280
.L275:
	mvn	r2, #0
	mov	r0, #0
	str	r2, [r3]
	str	r2, [r3, #4]
	str	r3, [r4, #4]
.L274:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L277:
	mov	r3, #16
	b	.L275
.L280:
	mvn	r0, #11
	b	.L274
	.fnend
	.size	audio_source_function_init, .-audio_source_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_request_new, %function
adb_request_new:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	mov	r6, r1
	mov	r1, #208
	str	lr, [sp, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L281
	mov	r0, r6
	mov	r1, #208
	bl	__kmalloc
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L287
.L281:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L287:
	ldr	r2, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L281
	.fnend
	.size	adb_request_new, .-adb_request_new
	.set	conn_gadget_request_new,adb_request_new
	.set	mtp_request_new,adb_request_new
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_alloc_ep_req, %function
midi_alloc_ep_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	mov	r1, #32
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L288
	mov	r0, r5
	mov	r1, #32
	str	r5, [r4, #4]
	bl	__kmalloc
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L294
.L288:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L294:
	ldr	r2, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L288
	.fnend
	.size	midi_alloc_ep_req, .-midi_alloc_ep_req
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_unbind, %function
ccid_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	ldr	r3, [r0, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L296
	ldr	r0, [r1, #8]
	bl	kfree
.L296:
	ldr	r0, [r4, #16]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	ccid_function_unbind, .-ccid_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_receive, %function
ghsuart_ctrl_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r0, #0
	str	r6, [sp, #8]
	moveq	r4, r5
	mov	r6, r1
	str	lr, [sp, #12]
	beq	.L299
	ldr	r3, [r5, #68]
	cmp	r3, #0
	beq	.L301
	ldr	r0, [r5, #12]
	blx	r3
	ldr	r3, [r5, #100]
	mov	r4, r0
	add	r3, r3, #1
	str	r3, [r5, #100]
.L299:
	mov	r0, r6
	bl	kfree
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L301:
	mov	r4, r3
	b	.L299
	.fnend
	.size	ghsuart_ctrl_receive, .-ghsuart_ctrl_receive
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_function_cleanup, %function
ecm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_function_cleanup, .-ecm_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_function_cleanup, %function
midi_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #4]
	b	kfree
	.fnend
	.size	midi_function_cleanup, .-midi_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_notify_complete, %function
rmnet_smd_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r5, #84]
	cmn	r2, #104
	beq	.L308
	cmp	r2, #0
	mov	r6, r0
	mov	r4, r1
	beq	.L309
	cmn	r2, #108
	beq	.L308
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC0
	movt	r1, #:upper16:.LC0
	add	r0, r0, #32
	bl	dev_err
.L309:
	ldr	r3, [r5, #96]
	cmp	r3, r6
	beq	.L330
.L306:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L330:
	add	r6, r5, #172
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L306
	ldr	r0, [r5, #96]
	mov	r2, #32
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L306
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC1
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC1
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
.L308:
	mov	r3, #0
	str	r3, [r5, #172]
	b	.L306
	.fnend
	.size	rmnet_smd_notify_complete, .-rmnet_smd_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_notify_complete, %function
rmnet_sdio_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r4, #84]
	cmn	r2, #104
	beq	.L333
	cmp	r2, #0
	mov	r5, r1
	beq	.L334
	cmn	r2, #108
	beq	.L333
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC2
	movt	r1, #:upper16:.LC2
	add	r0, r0, #32
	bl	dev_err
.L334:
	ldr	r3, [r4, #324]
	tst	r3, #2
	beq	.L331
	add	r6, r4, #196
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L331
	ldr	r0, [r4, #96]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L355
.L331:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L333:
	mov	r3, #0
	str	r3, [r4, #196]
	b	.L331
.L355:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC3
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC3
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
	.fnend
	.size	rmnet_sdio_notify_complete, .-rmnet_sdio_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_notify_complete, %function
rmnet_mux_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r4, #84]
	cmn	r2, #104
	beq	.L358
	cmp	r2, #0
	mov	r5, r1
	beq	.L359
	cmn	r2, #108
	beq	.L358
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC4
	movt	r1, #:upper16:.LC4
	add	r0, r0, #32
	bl	dev_err
.L359:
	add	r6, r4, #376
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L356
	ldr	r0, [r4, #96]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L377
.L356:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L377:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC3
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC3
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
.L358:
	mov	r3, #0
	str	r3, [r4, #376]
	b	.L356
	.fnend
	.size	rmnet_mux_notify_complete, .-rmnet_mux_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_ethaddr_store, %function
rndis_ethaddr_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	movw	r5, #52429
	str	r6, [sp, #8]
	movt	r5, 52428
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	ldr	ip, [r0, #4]
	mov	r2, #0
	mov	r0, #2
	mov	r1, r2
	ldr	r3, .L385
	str	r0, [ip]
	strh	r2, [ip, #4]	@ movhi
	b	.L379
.L380:
	sub	r2, r1, r2
	add	r1, r1, #1
	add	r2, r2, #1
	cmp	r1, #256
	ldrb	lr, [ip, r2]	@ zero_extendqisi2
	eor	r0, r0, lr
	strb	r0, [ip, r2]
	beq	.L383
.L379:
	umull	r0, r2, r5, r1
	ldrb	r0, [r3], #1	@ zero_extendqisi2
	lsr	r2, r2, #2
	cmp	r0, #0
	add	r2, r2, r2, lsl #2
	bne	.L380
.L383:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L386:
	.align	2
.L385:
	.word	.LANCHOR1+2220
	.fnend
	.size	rndis_ethaddr_store, .-rndis_ethaddr_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_hw_params, %function
audio_pcm_hw_params:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #284]
	movw	r2, #44100
	ldr	ip, [r1, #296]
	cmp	r3, #2
	cmpeq	ip, r2
	bne	.L393
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r5, r0, #176
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	ip, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [ip]
	ldr	lr, [r3, #496]
	ldrd	r2, [lr, #248]
	orrs	r3, r2, r3
	beq	.L403
.L389:
	mov	r3, #2
	mov	lr, #0
	add	r2, r0, #188
	str	r3, [r0, #176]
	ldr	r3, [ip]
	ldr	r3, [r3, #496]
	str	r3, [r0, #180]
	str	lr, [r0, #196]
	ldr	r3, [ip]
	ldr	lr, [r1, #380]
	ldr	r3, [r3, #496]
	cmp	r3, #0
	beq	.L390
	ldr	ip, [r3, #276]
	cmp	ip, #0
	beq	.L390
.L391:
	mov	r6, #0
	mov	r4, r0
	mov	r7, r1
	mov	r0, r3
	str	r6, [sp]
	mov	r1, lr
	mov	r3, #208
	ldr	r8, [ip]
	blx	r8
	cmp	r0, r6
	str	r0, [r4, #184]
	beq	.L395
	ldr	r2, [r7, #380]
	cmp	r5, r6
	ldr	r3, [r4, #212]
	str	r2, [r4, #192]
	beq	.L392
	str	r5, [r3, #552]
	ldr	r2, [r4, #184]
	mov	r0, r6
	str	r2, [r3, #540]
	ldr	r2, [r4, #188]
	str	r2, [r3, #544]
	ldr	r2, [r4, #192]
	str	r2, [r3, #548]
.L387:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L403:
	mvn	r2, #0
	mov	r3, #0
	strd	r2, [lr, #248]
	ldr	ip, [r0]
	b	.L389
.L390:
	movw	ip, #:lower16:arm_dma_ops
	movt	ip, #:upper16:arm_dma_ops
	cmp	ip, #0
	bne	.L391
	.syntax divided
@ 175 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/dma-mapping.h" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/dma-mapping.h"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 175, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L392:
	mov	r0, r5
	str	r5, [r3, #540]
	str	r5, [r3, #544]
	str	r5, [r3, #548]
	str	r5, [r3, #552]
	b	.L387
.L393:
	mvn	r0, #21
	bx	lr
.L395:
	mvn	r0, #11
	b	.L387
	.fnend
	.size	audio_pcm_hw_params, .-audio_pcm_hw_params
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_open, %function
ffs_ep0_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	ldr	r2, [r3, #92]
	cmp	r2, #3
	beq	.L406
	add	r2, r3, #84
	str	r3, [r1, #124]
	.syntax divided
@ 45 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	add	r2, r3, #88
	.syntax divided
@ 45 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #0
	bx	lr
.L406:
	mvn	r0, #15
	bx	lr
	.fnend
	.size	ffs_ep0_open, .-ffs_ep0_open
	.section	.text.unlikely,"ax",%progbits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	reset_config, %function
reset_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	mov	r5, r0
	ldrh	r2, [r3, #18]
	tst	r2, #4
	beq	.L408
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC5
	mov	r0, r3
	movt	r2, #:upper16:.LC5
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L408:
	ldr	r3, [r5, #12]
	mov	r6, #0
	ldr	r4, [r3, #36]
	sub	r4, r4, #72
.L409:
	ldr	r3, [r5, #12]
	add	r2, r4, #72
	mov	r0, r4
	add	r3, r3, #36
	cmp	r2, r3
	beq	.L419
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L410
	blx	r3
.L410:
	ldr	r3, [r4, #72]
	str	r6, [r4, #80]
	sub	r4, r3, #72
	b	.L409
.L419:
	str	r6, [r5, #12]
	str	r6, [r5, #56]
	pop	{r4, r5, r6, pc}
	.fnend
	.size	reset_config, .-reset_config
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_setup_complete, %function
composite_setup_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	cmp	r3, #0
	bne	.L421
	ldr	r2, [r1, #4]
	ldr	ip, [r1, #48]
	cmp	ip, r2
	bxeq	lr
.L421:
	movw	r2, #:lower16:.LANCHOR2
	movt	r2, #:upper16:.LANCHOR2
	ldrh	ip, [r2, #42]
	tst	ip, #4
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r4, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	lr, [r1, #4]
	add	r0, r2, #24
	movw	r2, #:lower16:.LC6
	ldr	ip, [r1, #48]
	movt	r2, #:upper16:.LC6
	ldr	r1, [r4]
	stm	sp, {ip, lr}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	composite_setup_complete, .-composite_setup_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_resume, %function
composite_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r0
	add	r0, r0, #32
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	mov	r5, r0
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, #66]
	tst	r3, #4
	bne	.L454
.L431:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2476]
	ldr	r3, [r3, #40]
	cmp	r3, #0
	beq	.L432
	mov	r0, r5
	blx	r3
.L432:
	ldr	r2, [r5, #12]
	cmp	r2, #0
	beq	.L434
	mov	r1, r2
	ldr	r4, [r1, #36]!
	cmp	r1, r4
	sub	r4, r4, #72
	beq	.L436
.L435:
	ldr	r3, [r4, #60]
	mov	r0, r4
	cmp	r3, #0
	beq	.L437
	blx	r3
	ldr	r2, [r5, #12]
	ldr	r4, [r4, #72]
	add	r1, r2, #36
	cmp	r1, r4
	sub	r4, r4, #72
	bne	.L435
.L436:
	ldrb	r3, [r2, #23]	@ zero_extendqisi2
	cmp	r3, #0
	ldrne	r1, [r5, #64]
	moveq	r1, #500
	mulne	r1, r1, r3
	ldr	r3, [r6]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L434
	mov	r0, r6
	blx	r3
.L434:
	ldrb	r3, [r5, #16]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r5, #16]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L437:
	ldr	r4, [r4, #72]
	cmp	r1, r4
	sub	r4, r4, #72
	bne	.L435
	b	.L436
.L454:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC7
	add	r0, r0, #48
	movt	r2, #:upper16:.LC7
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L431
	.fnend
	.size	composite_resume, .-composite_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_suspend, %function
composite_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	add	r0, r0, #32
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	mov	r6, r0
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, #90]
	tst	r3, #4
	bne	.L474
.L456:
	ldr	r3, [r6, #12]
	cmp	r3, #0
	beq	.L457
	ldr	r4, [r3, #36]!
	cmp	r3, r4
	sub	r4, r4, #72
	beq	.L457
.L458:
	ldr	r2, [r4, #56]
	mov	r0, r4
	cmp	r2, #0
	beq	.L459
	blx	r2
	ldr	r3, [r6, #12]
	ldr	r4, [r4, #72]
	add	r3, r3, #36
	cmp	r3, r4
	sub	r4, r4, #72
	bne	.L458
.L457:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2476]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L461
	mov	r0, r6
	blx	r3
.L461:
	ldrb	r3, [r6, #16]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #16]
	ldr	r3, [r5]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L455
	mov	r0, r5
	mov	r1, #2
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	bx	r3
.L459:
	ldr	r4, [r4, #72]
	cmp	r3, r4
	sub	r4, r4, #72
	bne	.L458
	b	.L457
.L474:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC8
	add	r0, r0, #72
	movt	r2, #:upper16:.LC8
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L456
.L455:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	composite_suspend, .-composite_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_disable, %function
diag_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrh	r2, [r3, #114]
	tst	r2, #4
	bne	.L492
.L476:
	add	r5, r4, #108
	mov	r6, #0
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r6, [r4, #112]
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #124]
	cmp	r3, r6
	beq	.L477
	ldr	r5, [r3, #12]
	cmp	r5, r6
	beq	.L477
	mov	r2, r6
	mov	r1, #1
	ldr	r0, [r3, #16]
	blx	r5
.L477:
	ldr	r0, [r4, #88]
	mov	r5, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #88]
	str	r5, [r3]
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #84]
	str	r5, [r3]
	ldr	r3, [r4, #124]
	cmp	r3, r5
	strne	r5, [r3, #20]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L492:
	ldr	r1, [r4, #116]
	movw	r2, #:lower16:.LC9
	add	r0, r3, #96
	movt	r2, #:upper16:.LC9
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L476
	.fnend
	.size	diag_function_disable, .-diag_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_complete_set_line_coding, %function
acm_complete_set_line_coding:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	ip, [r1, #44]
	ldr	r2, [r3, #20]
	cmp	ip, #0
	ldr	lr, [r2, #24]
	beq	.L494
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, #138]
	tst	r2, #4
	bne	.L505
.L493:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L494:
	ldr	ip, [r1, #48]
	cmp	ip, #7
	beq	.L496
	mov	r4, r0
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, #162]
	tst	r2, #4
	bne	.L506
.L497:
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldr	r3, [r3, #24]
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	bx	r3
.L496:
	ldr	r2, [r1]
	add	r1, r3, #160
	ldr	r0, [r2]	@ unaligned
	str	r0, [r3, #160]
	ldrh	r3, [r2, #4]	@ unaligned
	strh	r3, [r1, #4]	@ movhi
	ldrb	r3, [r2, #6]	@ zero_extendqisi2
	strb	r3, [r1, #6]
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L505:
	ldr	r1, [lr]
	movw	r2, #:lower16:.LC10
	add	r0, r0, #120
	ldrb	r3, [r3, #146]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC10
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L493
.L506:
	ldr	r1, [lr]
	movw	r2, #:lower16:.LC11
	add	r0, r0, #144
	ldrb	r3, [r3, #146]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC11
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L497
	.fnend
	.size	acm_complete_set_line_coding, .-acm_complete_set_line_coding
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_disable, %function
f_midi_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR2
	str	lr, [sp, #4]
	ldrh	r2, [r3, #186]
	tst	r2, #4
	bne	.L513
.L508:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	bx	r3
.L513:
	ldr	r1, [r4, #20]
	add	r0, r3, #168
	movw	r2, #:lower16:.LC12
	movt	r2, #:upper16:.LC12
	ldr	r3, [r1, #24]
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L508
	.fnend
	.size	f_midi_disable, .-f_midi_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_response_complete, %function
rndis_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r5, [r1, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r3, [r5, #20]
	cmp	r3, #0
	beq	.L514
	ldr	r7, [r3, #24]
	cmp	r7, #0
	beq	.L514
	ldr	ip, [r1, #44]
	cmn	ip, #104
	beq	.L519
	cmp	ip, #0
	mov	r6, r0
	mov	r4, r1
	beq	.L520
	cmn	ip, #108
	beq	.L519
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, #210]
	tst	r3, #4
	bne	.L547
.L520:
	ldr	r3, [r5, #168]
	cmp	r3, r6
	beq	.L548
.L514:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L548:
	add	r6, r5, #176
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L514
	ldr	r0, [r5, #168]
	mov	r1, r4
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L514
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	ip, #:lower16:.LANCHOR2
	movt	ip, #:upper16:.LANCHOR2
	ldrh	r2, [ip, #234]
	tst	r2, #4
	beq	.L514
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC14
	mov	r3, r0
	movt	r2, #:upper16:.LC14
	add	r0, ip, #216
	add	r1, r1, #32
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	__dynamic_dev_dbg
.L519:
	mov	r3, #0
	str	r3, [r5, #176]
	b	.L514
.L547:
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC13
	add	r0, r0, #192
	ldr	r3, [r6, #4]
	str	ip, [sp]
	movt	r2, #:upper16:.LC13
	ldr	lr, [r4, #4]
	ldr	ip, [r4, #48]
	add	r1, r1, #32
	stmib	sp, {ip, lr}
	bl	__dynamic_dev_dbg
	b	.L520
	.fnend
	.size	rndis_response_complete, .-rndis_response_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_response_available, %function
rndis_response_available:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #176
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r1, [r0, #172]
	ldr	r6, [r3, #24]
	ldr	ip, [r1]
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	beq	.L563
.L549:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L563:
	ldr	r2, [r0, #168]
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L549
	mov	r4, r0
	mov	r0, #0
	str	r3, [ip]
	mov	r2, #32
	str	r0, [ip, #4]
	ldr	r0, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L549
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	ip, #:lower16:.LANCHOR2
	movw	r2, #258
	movt	ip, #:upper16:.LANCHOR2
	ldrh	r2, [ip, r2]
	tst	r2, #4
	beq	.L549
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC15
	mov	r3, r0
	ldrd	r4, [sp]
	add	r0, ip, #240
	movt	r2, #:upper16:.LC15
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	add	r1, r1, #32
	b	__dynamic_dev_dbg
	.fnend
	.size	rndis_response_available, .-rndis_response_available
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_setup, %function
ecm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	movw	r2, #17185
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r1, [r1]	@ unaligned
	.pad #20
	sub	sp, sp, #20
	ldr	r3, [r0, #20]
	ldrh	r6, [r4, #2]	@ unaligned
	ldrh	ip, [r4, #4]	@ unaligned
	cmp	r1, r2
	ldrh	lr, [r4, #6]	@ unaligned
	ldr	r7, [r3, #24]
	uxth	r8, r6
	ldrb	r3, [r4]	@ zero_extendqisi2
	bne	.L565
	cmp	lr, #0
	beq	.L576
.L565:
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #330
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	mvneq	r5, #94
	bne	.L577
.L564:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L576:
	ldrb	r9, [r0, #148]	@ zero_extendqisi2
	mov	r5, r0
	cmp	r9, ip
	bne	.L565
	movw	r10, #:lower16:.LANCHOR2
	movw	r3, #282
	ldr	fp, [r7, #4]
	movt	r10, #:upper16:.LANCHOR2
	ldrh	r3, [r10, r3]
	tst	r3, #4
	bne	.L578
.L567:
	movw	r3, #306
	strh	r6, [r5, #98]	@ movhi
	ldrh	r3, [r10, r3]
	tst	r3, #4
	bne	.L579
.L569:
	ldrb	r3, [fp, #26]	@ zero_extendqisi2
	mov	r0, #0
	mov	r1, fp
	mov	r2, #32
	str	r0, [fp, #4]
	bfc	r3, #1, #1
	strb	r3, [fp, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bge	.L564
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC19
	str	r5, [sp]
	movt	r1, #:upper16:.LC19
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	ldrb	r2, [r4]	@ zero_extendqisi2
	add	r0, r0, #32
	bl	dev_err
	b	.L564
.L577:
	ldr	r1, [r7]
	str	r8, [sp, #4]
	movw	r2, #:lower16:.LC17
	ldrb	r4, [r4, #1]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC17
	add	r0, r0, #312
	mvn	r5, #94
	add	r1, r1, #32
	str	r4, [sp]
	str	ip, [sp, #8]
	str	lr, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L564
.L579:
	ldr	r1, [r7]
	mov	r0, #0
	movw	r2, #:lower16:.LC18
	ldrb	r3, [r4]	@ zero_extendqisi2
	str	r8, [sp, #4]
	movt	r2, #:upper16:.LC18
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	add	r1, r1, #32
	str	ip, [sp]
	str	r9, [sp, #8]
	str	r0, [sp, #12]
	ldr	r0, .L580
	bl	__dynamic_dev_dbg
	b	.L569
.L578:
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC16
	mov	r3, r8
	movt	r2, #:upper16:.LC16
	add	r0, r10, #264
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L567
.L581:
	.align	2
.L580:
	.word	.LANCHOR2+288
	.fnend
	.size	ecm_setup, .-ecm_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_notify_complete, %function
ecm_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r5, [r1, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	ip, [r1, #44]
	ldr	r2, [r5, #20]
	cmn	ip, #104
	beq	.L584
	cmp	ip, #0
	beq	.L585
	cmn	ip, #108
	beq	.L584
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #354
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L631
.L585:
	cmp	r4, #0
	str	r4, [r5, #168]
	beq	.L582
	ldrb	r3, [r5, #172]	@ zero_extendqisi2
	ldr	r7, [r2, #24]
	ldr	r6, [r4]
	cmp	r3, #1
	beq	.L589
	bcc	.L582
	cmp	r3, #2
	bne	.L588
	mov	r3, #0
	mov	r1, #8
	mov	r2, #16
	mov	r0, #42
	strb	r0, [r6, #1]
	strb	r3, [r6, #2]
	strb	r3, [r6, #3]
	strb	r1, [r6, #6]
	strb	r3, [r6, #7]
	ldr	r1, [r4]
	str	r2, [r4, #4]
	ldr	r3, [r7]
	ldr	r2, [r3, #20]
	cmp	r2, #4
	bls	.L593
	ldr	r2, [r3, #16]
	cmp	r2, #5
	beq	.L632
.L595:
	mov	r0, #0
	mov	r3, #28672
	movt	r0, 6500
	cmp	r2, #3
	movt	r3, 148
	moveq	r3, r0
.L594:
	movw	r2, #:lower16:.LANCHOR2
	movw	r0, #402
	str	r3, [r1, #8]
	movt	r2, #:upper16:.LANCHOR2
	str	r3, [r1, #12]
	ldrh	r3, [r2, r0]
	tst	r3, #4
	bne	.L633
.L596:
	mov	r3, #0
	strb	r3, [r5, #172]
.L588:
	mvn	r0, #94
	mov	r3, #0
	mov	r2, #32
	mov	r1, r4
	strb	r0, [r6]
	ldrb	r0, [r5, #148]	@ zero_extendqisi2
	strh	r0, [r6, #4]	@ unaligned
	ldr	r0, [r5, #164]
	str	r3, [r5, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bge	.L582
	movw	ip, #:lower16:.LANCHOR2
	movw	r3, #426
	str	r4, [r5, #168]
	movt	ip, #:upper16:.LANCHOR2
	ldrh	r3, [ip, r3]
	tst	r3, #4
	bne	.L634
.L582:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L584:
	mov	r3, #0
	strb	r3, [r5, #172]
	b	.L585
.L589:
	mov	r3, #0
	mov	r2, #8
	movw	r0, #:lower16:.LANCHOR2
	strb	r3, [r6, #1]
	ldrb	r1, [r5, #173]	@ zero_extendqisi2
	movt	r0, #:upper16:.LANCHOR2
	strb	r3, [r6, #6]
	strb	r3, [r6, #7]
	movw	r3, #378
	strh	r1, [r6, #2]	@ unaligned
	str	r2, [r4, #4]
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L635
.L591:
	mov	r3, #2
	strb	r3, [r5, #172]
	b	.L588
.L593:
	cmp	r2, #2
	movls	r3, #28672
	movtls	r3, 148
	bls	.L594
	ldr	r2, [r3, #16]
	b	.L595
.L631:
	ldr	r1, [r2, #24]
	movw	r2, #:lower16:.LC22
	add	r0, r0, #336
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC22
	ldr	r1, [r1]
	ldrb	r3, [r3, #1]	@ zero_extendqisi2
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r2, [r5, #20]
	b	.L585
.L634:
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC25
	mov	r3, r0
	movt	r2, #:upper16:.LC25
	add	r0, ip, #408
	add	r1, r1, #32
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	__dynamic_dev_dbg
.L632:
	mov	r3, #0
	movt	r3, 13000
	b	.L594
.L633:
	ldr	r3, [r7]
	ldr	r2, [r3, #20]
	add	r1, r3, #32
	cmp	r2, #4
	bls	.L597
	ldr	r2, [r3, #16]
	cmp	r2, #5
	beq	.L636
.L599:
	mov	r0, #0
	mov	r3, #28672
	movt	r0, 6500
	cmp	r2, #3
	movt	r3, 148
	moveq	r3, r0
.L598:
	movw	r2, #:lower16:.LC24
	ldr	r0, .L637
	movt	r2, #:upper16:.LC24
	bl	__dynamic_dev_dbg
	b	.L596
.L635:
	ldrb	lr, [r5, #173]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC20
	movw	r3, #:lower16:.LC21
	ldr	r1, [r7]
	movt	ip, #:upper16:.LC20
	movw	r2, #:lower16:.LC23
	movt	r3, #:upper16:.LC21
	movt	r2, #:upper16:.LC23
	add	r0, r0, #360
	cmp	lr, #0
	movne	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L591
.L597:
	cmp	r2, #2
	movls	r3, #28672
	movtls	r3, 148
	bls	.L598
	ldr	r2, [r3, #16]
	b	.L599
.L636:
	mov	r3, #0
	movt	r3, 13000
	b	.L598
.L638:
	.align	2
.L637:
	.word	.LANCHOR2+384
	.fnend
	.size	ecm_notify_complete, .-ecm_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_ep0out_complete, %function
ncm_ep0out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, #0
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r1, #32]
	ldr	r3, [r1, #44]
	ldr	ip, [r4]
	str	r2, [r1, #32]
	cmp	r3, r2
	bne	.L640
	ldr	r3, [r1, #4]
	ldr	r2, [r1, #48]
	cmp	r2, r3
	beq	.L641
.L640:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #450
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L654
.L642:
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r3, #24]
	bx	r3
.L641:
	ldr	r3, [r1]
	ldr	r3, [r3]	@ unaligned
	cmp	r3, #2048
	bcc	.L643
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	ldr	r2, [r2, #24]
	cmp	r2, r3
	bcs	.L644
.L643:
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #474
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	beq	.L642
	ldr	r1, [ip]
	movw	r2, #:lower16:.LC27
	add	r0, r0, #456
	movt	r2, #:upper16:.LC27
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L642
.L654:
	ldr	r1, [ip]
	movw	r2, #:lower16:.LC26
	add	r0, r0, #432
	movt	r2, #:upper16:.LC26
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L642
.L644:
	str	r3, [r0, #112]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ncm_ep0out_complete, .-ncm_ep0out_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_notify_complete, %function
ncm_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	ldr	r8, [r1]
	ldr	r4, [r1, #32]
	ldr	r3, [r4, #20]
	add	r6, r4, #188
	mov	r0, r6
	ldr	r7, [r3, #24]
	bl	_raw_spin_lock
	ldr	ip, [r5, #44]
	cmn	ip, #104
	beq	.L657
	cmp	ip, #0
	beq	.L658
	cmn	ip, #108
	beq	.L657
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #498
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L698
.L658:
	cmp	r5, #0
	str	r5, [r4, #168]
	beq	.L660
	ldrb	r3, [r4, #172]	@ zero_extendqisi2
	ldr	r2, [r4, #20]
	ldr	r7, [r5]
	cmp	r3, #1
	ldr	r8, [r2, #24]
	beq	.L662
	bcc	.L660
	cmp	r3, #2
	bne	.L661
	mov	r3, #0
	mov	r1, #8
	mov	r2, #16
	mov	r0, #42
	strb	r0, [r7, #1]
	strb	r3, [r7, #2]
	strb	r3, [r7, #3]
	strb	r1, [r7, #6]
	strb	r3, [r7, #7]
	ldr	r1, [r5]
	str	r2, [r5, #4]
	ldr	r3, [r8]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	movls	r3, #28672
	movtls	r3, 148
	bls	.L666
	ldr	r0, [r3, #16]
	mov	r2, #0
	mov	r3, #28672
	movt	r2, 6500
	movt	r3, 148
	cmp	r0, #3
	moveq	r3, r2
.L666:
	movw	r2, #:lower16:.LANCHOR2
	movw	r0, #546
	str	r3, [r1, #8]
	movt	r2, #:upper16:.LANCHOR2
	str	r3, [r1, #12]
	ldrh	r3, [r2, r0]
	tst	r3, #4
	bne	.L699
.L667:
	mov	r3, #1
	strb	r3, [r4, #172]
.L661:
	mvn	r2, #94
	mov	r3, #0
	mov	r0, r6
	strb	r2, [r7]
	ldrb	r2, [r4, #148]	@ zero_extendqisi2
	strh	r2, [r7, #4]	@ unaligned
	str	r3, [r4, #168]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #164]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r7, #0
	bge	.L660
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #570
	str	r5, [r4, #168]
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L700
.L660:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L657:
	mov	r3, #0
	strb	r3, [r4, #172]
	b	.L658
.L662:
	mov	r3, #0
	mov	r2, #8
	movw	r0, #:lower16:.LANCHOR2
	strb	r3, [r7, #1]
	ldrb	r1, [r4, #173]	@ zero_extendqisi2
	movt	r0, #:upper16:.LANCHOR2
	strb	r3, [r7, #6]
	strb	r3, [r7, #7]
	movw	r3, #522
	strh	r1, [r7, #2]	@ unaligned
	str	r2, [r5, #4]
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L701
.L664:
	mov	r3, #0
	strb	r3, [r4, #172]
	b	.L661
.L698:
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC22
	add	r0, r0, #480
	ldrb	r3, [r8, #1]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC22
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L658
.L700:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC25
	mov	r3, r7
	movt	r2, #:upper16:.LC25
	add	r0, r0, #552
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L660
.L699:
	ldr	r3, [r8]
	ldr	r2, [r3, #20]
	add	r1, r3, #32
	cmp	r2, #2
	movls	r3, #28672
	movtls	r3, 148
	bls	.L668
	ldr	r0, [r3, #16]
	mov	r2, #0
	mov	r3, #28672
	movt	r2, 6500
	movt	r3, 148
	cmp	r0, #3
	moveq	r3, r2
.L668:
	movw	r2, #:lower16:.LC24
	ldr	r0, .L702
	movt	r2, #:upper16:.LC24
	bl	__dynamic_dev_dbg
	b	.L667
.L701:
	ldrb	lr, [r4, #173]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC21
	movw	r3, #:lower16:.LC20
	ldr	r1, [r8]
	movt	ip, #:upper16:.LC21
	movw	r2, #:lower16:.LC23
	movt	r3, #:upper16:.LC20
	movt	r2, #:upper16:.LC23
	add	r0, r0, #504
	cmp	lr, #0
	moveq	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L664
.L703:
	.align	2
.L702:
	.word	.LANCHOR2+528
	.fnend
	.size	ncm_notify_complete, .-ncm_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	unbind_config, %function
unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	add	r6, r1, #36
	strd	r8, [sp, #16]
	ldr	r9, .L726
	movw	r8, #:lower16:.LC28
	strd	r10, [sp, #24]
	movt	r8, #:upper16:.LC28
	mov	r10, r0
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	sub	fp, r9, #18
	b	.L706
.L708:
	bl	list_del
	ldr	r3, [r4, #-36]
	cmp	r3, #0
	bne	.L723
.L706:
	ldr	r4, [r5, #36]
	cmp	r6, r4
	mov	r0, r4
	sub	r7, r4, #72
	bne	.L708
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L709
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #618
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	bne	.L724
.L710:
	mov	r0, r5
	blx	r3
.L709:
	mov	r0, #0
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L723:
	ldrh	r2, [r9]
	tst	r2, #4
	bne	.L725
.L707:
	mov	r1, r7
	mov	r0, r5
	blx	r3
	b	.L706
.L725:
	ldr	r3, [r4, #-72]
	str	r7, [sp]
	mov	r2, r8
	ldr	r1, [r10]
	mov	r0, fp
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #-36]
	b	.L707
.L724:
	ldr	r1, [r10]
	movw	r2, #:lower16:.LC29
	str	r5, [sp]
	add	r0, r0, #600
	ldr	r3, [r5]
	movt	r2, #:upper16:.LC29
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r5, #12]
	b	.L710
.L727:
	.align	2
.L726:
	.word	.LANCHOR2+594
	.fnend
	.size	unbind_config, .-unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_free_buf, %function
rmnet_smd_free_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r3, #0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	mov	r8, r0
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	str	r3, [r0, #424]
	str	r3, [r0, #428]
	str	r3, [r0, #432]
	str	r3, [r0, #436]
	str	r3, [r0, #440]
	str	r3, [r0, #444]
	str	r3, [r0, #448]
	str	r3, [r0, #452]
	ldr	r4, [r8, #140]!
	cmp	r4, r8
	ldr	r5, [r4]
	beq	.L729
.L730:
	mov	r0, r4
	sub	r9, r4, #36
	bl	list_del
	ldr	r7, [r6, #88]
	ldr	r0, [r4, #-36]
	mov	r4, r5
	bl	kfree
	mov	r1, r9
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r8, r5
	ldr	r5, [r5]
	bne	.L730
.L729:
	mov	r8, r6
	ldr	r4, [r8, #148]!
	cmp	r4, r8
	ldr	r5, [r4]
	beq	.L731
.L732:
	mov	r0, r4
	sub	r9, r4, #36
	bl	list_del
	ldr	r7, [r6, #92]
	ldr	r0, [r4, #-36]
	mov	r4, r5
	bl	kfree
	mov	r1, r9
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r8, r5
	ldr	r5, [r5]
	bne	.L732
.L731:
	mov	r8, r6
	ldr	r4, [r8, #108]!
	cmp	r4, r8
	ldr	r5, [r4]
	beq	.L733
.L734:
	mov	r0, r4
	sub	r7, r4, #8
	bl	list_del
	ldr	r0, [r4, #-8]
	mov	r4, r5
	bl	kfree
	mov	r0, r7
	bl	kfree
	cmp	r8, r5
	ldr	r5, [r5]
	bne	.L734
.L733:
	mov	r8, r6
	ldr	r4, [r8, #116]!
	cmp	r4, r8
	ldr	r5, [r4]
	beq	.L735
.L736:
	mov	r0, r4
	sub	r7, r4, #8
	bl	list_del
	ldr	r0, [r4, #-8]
	mov	r4, r5
	bl	kfree
	mov	r0, r7
	bl	kfree
	cmp	r8, r5
	ldr	r5, [r5]
	bne	.L736
.L735:
	ldrd	r4, [r6, #96]
	ldr	r0, [r5]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	rmnet_smd_free_buf, .-rmnet_smd_free_buf
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_control_rx_work, %function
rmnet_sdio_control_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #32
	strd	r8, [sp, #16]
	sub	r8, r0, #112
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r9, [r0, #-136]
	b	.L745
.L748:
	bl	list_del
	ldr	r3, [r5, #-104]
	mov	r1, r10
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r5, #-104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-4]
	cmn	r3, #19
	bne	.L747
	ldr	r3, [r5, #152]
	add	r3, r3, #1
	str	r3, [r5, #152]
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r7
	bl	kfree
.L745:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #-112]
	mov	r10, r0
	cmp	r4, r8
	mov	r0, r4
	sub	r7, r4, #8
	bne	.L748
.L743:
	mov	r1, r10
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L747:
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC30
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC30
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	r0, r0, #32
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	dev_err
	.fnend
	.size	rmnet_sdio_control_rx_work, .-rmnet_sdio_control_rx_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_setup, %function
rmnet_mux_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r0, #372]
	ldrh	r9, [r1, #4]	@ unaligned
	ldrh	r6, [r1, #2]	@ unaligned
	ldr	r8, [r2, #24]
	cmp	r3, #0
	ldrh	r7, [r1, #6]	@ unaligned
	ldr	r10, [r8, #4]
	beq	.L759
	ldrh	r3, [r1]	@ unaligned
	movw	r2, #8482
	mov	r4, r1
	mov	r5, r0
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r2
	beq	.L752
	movw	r2, #41217
	cmp	r3, r2
	beq	.L753
	cmp	r3, #8448
	beq	.L754
.L767:
	movw	r5, #:lower16:.LANCHOR2
	movt	r5, #:upper16:.LANCHOR2
.L751:
	movw	r3, #666
	ldrh	r3, [r5, r3]
	tst	r3, #4
	mvneq	r4, #94
	bne	.L768
.L749:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L753:
	cmp	r6, #0
	bne	.L767
	add	fp, r0, #368
	mov	r0, fp
	bl	_raw_spin_lock
	mov	r2, r5
	ldr	r3, [r2, #340]!
	cmp	r3, r2
	beq	.L769
	mov	r0, r3
	sub	r4, r3, #8
	str	r3, [sp, #20]
	bl	list_del
	ldr	r2, [r5, #348]
	mov	r0, fp
	sub	r2, r2, #1
	str	r2, [r5, #348]
	bl	_raw_spin_unlock
	ldr	r3, [sp, #20]
	ldr	r0, [r10]
	ldmdb	r3, {r1, r6}
	cmp	r7, r6
	movcc	r6, r7
	mov	r2, r6
	bl	memcpy
	ldr	r3, [sp, #20]
	movw	r2, #:lower16:rmnet_mux_response_complete
	str	r5, [r10, #32]
	movt	r2, #:upper16:rmnet_mux_response_complete
	str	r2, [r10, #28]
	ldr	r0, [r3, #-8]
	bl	kfree
	mov	r0, r4
	bl	kfree
	ldr	r3, [r5, #416]
	cmp	r6, r7
	movge	r7, #0
	movlt	r7, #1
	add	r3, r3, #1
	str	r3, [r5, #416]
	b	.L755
.L754:
	movw	r3, #:lower16:rmnet_mux_command_complete
	mov	r6, r7
	str	r0, [r10, #32]
	movt	r3, #:upper16:rmnet_mux_command_complete
	mov	r7, #0
	str	r3, [r10, #28]
.L755:
	ldrb	r3, [r10, #26]	@ zero_extendqisi2
	str	r6, [r10, #4]
	mov	r1, r10
	mov	r2, #32
	bfi	r3, r7, #1, #1
	strb	r3, [r10, #26]
	ldr	r3, [r8]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L749
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC32
	mov	r2, r4
	movt	r1, #:upper16:.LC32
	add	r0, r0, #32
	bl	dev_err
	b	.L749
.L752:
	ldr	r3, [r0, #352]
	adds	r7, r7, #0
	movne	r7, #1
	ands	r6, r6, #1
	movne	r6, #0
	orrne	r3, r3, #2
	biceq	r3, r3, #2
	str	r3, [r0, #352]
	b	.L755
.L769:
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #642
	movt	r5, #:upper16:.LANCHOR2
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L770
.L757:
	mov	r0, fp
	bl	_raw_spin_unlock
	b	.L751
.L768:
	ldr	r1, [r8]
	str	r6, [sp, #4]
	movw	r2, #:lower16:.LC17
	ldrb	r3, [r4]	@ zero_extendqisi2
	str	r9, [sp, #8]
	movt	r2, #:upper16:.LC17
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	mvn	r4, #94
	ldr	r0, .L771
	add	r1, r1, #32
	str	ip, [sp]
	str	r7, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L749
.L759:
	mvn	r4, #106
	b	.L749
.L770:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC31
	add	r0, r5, #624
	ldrb	r3, [r4]	@ zero_extendqisi2
	str	r6, [sp, #4]
	movt	r2, #:upper16:.LC31
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	add	r1, r1, #32
	str	ip, [sp]
	str	r9, [sp, #8]
	str	r7, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L757
.L772:
	.align	2
.L771:
	.word	.LANCHOR2+648
	.fnend
	.size	rmnet_mux_setup, .-rmnet_mux_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_write_complete, %function
diag_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0]
	ldr	r6, [r1, #32]
	ldr	r2, [r5, #136]
	sub	ip, r2, #1
	str	ip, [r5, #136]
	ldr	ip, [r1, #44]
	cmp	ip, #0
	bne	.L774
	ldrh	r0, [r0, #20]
	ldr	ip, [r1, #4]
	cmp	ip, r0
	bcc	.L774
	udiv	lr, ip, r0
	mls	r0, r0, lr, ip
	cmp	r0, #0
	bne	.L774
	str	r2, [r5, #136]
	ldr	ip, [r1, #48]
	mov	r2, #32
	str	r0, [r1, #4]
	str	ip, [r6, #8]
	ldr	r3, [r1, #44]
	str	r3, [r6, #12]
	ldr	r0, [r5, #88]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	r3, [r0, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #16]
	bx	r3
.L774:
	add	r7, r5, #108
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	add	r2, r5, #100
	ldr	r1, [r5, #104]
	add	r0, r4, #36
	bl	__list_add
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L787
.L775:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #124]
	cmp	r3, #0
	beq	.L773
	ldr	lr, [r3, #12]
	cmp	lr, #0
	beq	.L773
	mov	r2, r6
	ldr	r0, [r3, #16]
	mov	r1, #2
	ldrd	r4, [sp]
	mov	r3, lr
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L787:
	ldr	r3, [r4, #48]
	str	r3, [r6, #8]
	ldr	r3, [r4, #44]
	str	r3, [r6, #12]
	b	.L775
.L773:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	diag_write_complete, .-diag_write_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_read_complete, %function
diag_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r1, #32]
	ldr	r3, [r1, #48]
	ldr	r4, [r0]
	str	r3, [r6, #8]
	ldr	r3, [r1, #44]
	add	r7, r4, #108
	mov	r0, r7
	str	r3, [r6, #12]
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	add	r2, r4, #92
	ldr	r1, [r4, #96]
	add	r0, r5, #36
	bl	__list_add
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r4, #124]
	ldr	r3, [r4, #132]
	cmp	r1, #0
	add	r3, r3, #1
	str	r3, [r4, #132]
	beq	.L788
	ldr	r3, [r1, #12]
	cmp	r3, #0
	beq	.L788
	mov	r2, r6
	ldr	r0, [r1, #16]
	mov	r1, #3
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L788:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	diag_read_complete, .-diag_read_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	prealloc, %function
prealloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #0
	beq	.L821
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	sub	r2, r2, #1
	strd	r6, [sp, #8]
	mov	r6, r1
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	cmp	r0, r4
	sub	r4, r4, #36
	bne	.L799
	b	.L824
.L802:
	cmn	r5, #1
	mov	r2, r5
	beq	.L801
.L799:
	ldr	r4, [r4, #36]
	sub	r5, r2, #1
	cmp	r7, r4
	sub	r4, r4, #36
	bne	.L802
	ldr	r3, [r6, #28]
	cmp	r2, #0
	ldrb	r4, [r3, #2]	@ zero_extendqisi2
	lsr	r3, r4, #7
	beq	.L803
.L807:
	movw	r2, #:lower16:rx_complete
	movw	r4, #:lower16:tx_complete
	movt	r2, #:upper16:rx_complete
	cmp	r3, #0
	movt	r4, #:upper16:tx_complete
	moveq	r4, r2
	b	.L806
.L804:
	str	r4, [r3, #28]
	ldr	r2, [r7]
	bl	__list_add
	cmp	r5, #0
	sub	r5, r5, #1
	beq	.L803
.L806:
	ldr	r3, [r6, #8]
	mov	r1, #32
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r1, r7
	add	r0, r3, #36
	bne	.L804
	ldr	r3, [r7]
	cmp	r7, r3
	beq	.L798
.L803:
	mov	r0, #0
.L797:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L801:
	mov	r0, r4
	ldr	r5, [r0, #36]!
	bl	list_del
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	sub	r4, r5, #36
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r5
	bne	.L801
	b	.L803
.L824:
	ldr	r3, [r1, #28]
	mov	r5, r2
	ldrb	r3, [r3, #2]	@ zero_extendqisi2
	lsr	r3, r3, #7
	b	.L807
.L798:
	mvn	r0, #11
	b	.L797
.L821:
	mvn	r0, #11
	bx	lr
	.fnend
	.size	prealloc, .-prealloc
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_open, %function
ffs_epfile_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r2, [r0, #328]
	ldr	r3, [r2, #36]
	ldr	r3, [r3, #92]
	cmp	r3, #2
	bne	.L829
	str	r2, [r1, #124]
	ldr	r3, [r2, #36]
	add	r1, r3, #84
	.syntax divided
@ 45 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r0, [r1]
	add	r0, r0, #1
	strex	ip, r0, [r1]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	add	r1, r3, #88
	.syntax divided
@ 45 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r0, [r1]
	add	r0, r0, #1
	strex	ip, r0, [r1]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
	mov	r0, r3
	str	r3, [r2, #32]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L829:
	movw	r0, #:lower16:.LC33
	movw	r1, #946
	movt	r0, #:upper16:.LC33
	bl	warn_slowpath_null
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
	.fnend
	.size	ffs_epfile_open, .-ffs_epfile_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	do_mode_sense, %function
do_mode_sense:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r3, [r0, #77]	@ zero_extendqisi2
	ldrb	r8, [r0, #76]	@ zero_extendqisi2
	ldr	r7, [r0, #104]
	ldr	r5, [r1]
	tst	r3, #247
	bne	.L840
	ldrb	r4, [r0, #78]	@ zero_extendqisi2
	lsr	r9, r4, #6
	and	r4, r4, #63
	cmp	r9, #3
	moveq	r3, #14592
	mvneq	r0, #21
	movteq	r3, 5
	streq	r3, [r7, #28]
	beq	.L830
	mov	r1, #8
	mov	r0, r5
	bl	__memzero
	sub	r3, r4, #63
	cmp	r8, #26
	ldrb	r2, [r7, #24]	@ zero_extendqisi2
	clz	r3, r3
	lsr	r3, r3, #5
	beq	.L846
	lsl	r2, r2, #6
	add	r6, r5, #8
	bic	r2, r2, #127
	movw	r10, #65535
	strb	r2, [r5, #3]
.L835:
	cmp	r4, #8
	orreq	r3, r3, #1
	cmp	r3, #0
	bne	.L847
	cmp	r4, #42
	beq	.L839
.L840:
	mov	r3, #9216
	mvn	r0, #21
	movt	r3, 5
	str	r3, [r7, #28]
.L830:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L846:
	lsl	r2, r2, #6
	add	r6, r5, #4
	mov	r10, #255
	bic	r2, r2, #127
	strb	r2, [r5, #2]
	b	.L835
.L847:
	mov	r3, #10
	mov	r2, #8
	mov	r1, r3
	add	r0, r6, #2
	strb	r2, [r6]
	strb	r3, [r6, #1]
	bl	__memzero
	cmp	r9, #1
	beq	.L837
	mvn	r3, #0
	mov	r2, #4
	strb	r2, [r6, #2]
	strb	r3, [r6, #4]
	strb	r3, [r6, #5]
	str	r3, [r6, #8]	@ unaligned
.L837:
	add	r0, r6, #12
.L838:
	sub	r0, r0, r5
	cmp	r10, r0
	blt	.L840
	cmp	r8, #26
	subeq	r3, r0, #1
	strbeq	r3, [r5]
	beq	.L830
	sub	r3, r0, #2
	uxth	r3, r3
	lsr	r2, r3, #8
	strb	r2, [r5]
	strb	r3, [r5, #1]
	b	.L830
.L839:
	mov	r3, #26
	add	r0, r6, #2
	strb	r4, [r6]
	mov	r1, r3
	strb	r3, [r6, #1]
	bl	__memzero
	mov	r3, #2
	mov	r1, #4
	mov	r2, #40
	add	r0, r6, #28
	strb	r3, [r6, #2]
	strb	r3, [r6, #3]
	strb	r1, [r6, #4]
	strb	r2, [r6, #6]
	b	.L838
	.fnend
	.size	do_mode_sense, .-do_mode_sense
	.align	2
	.global	usb_rmnet_mux_ctrl_open
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_open, %function
usb_rmnet_mux_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r3, #2480]
	add	r6, r5, #368
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #356]
	mov	r1, r0
	cmp	r4, #0
	bne	.L852
	mov	r3, #1
	mov	r0, r6
	str	r3, [r5, #356]
	str	r5, [r7, #124]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
.L848:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L852:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	movw	r1, #:lower16:.LANCHOR3
	movw	r0, #:lower16:.LC34
	movt	r1, #:upper16:.LANCHOR3
	movt	r0, #:upper16:.LC34
	bl	printk
	mvn	r0, #15
	b	.L848
	.fnend
	.size	usb_rmnet_mux_ctrl_open, .-usb_rmnet_mux_ctrl_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_setup, %function
ecm_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	movw	r2, #17185
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r1, [r1]	@ unaligned
	.pad #20
	sub	sp, sp, #20
	ldr	r3, [r0, #20]
	ldrh	r6, [r4, #2]	@ unaligned
	ldrh	ip, [r4, #4]	@ unaligned
	cmp	r1, r2
	ldrh	lr, [r4, #6]	@ unaligned
	ldr	r7, [r3, #24]
	uxth	r8, r6
	ldrb	r3, [r4]	@ zero_extendqisi2
	bne	.L854
	cmp	lr, #0
	beq	.L865
.L854:
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #738
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	mvneq	r5, #94
	bne	.L866
.L853:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L865:
	ldrb	r9, [r0, #120]	@ zero_extendqisi2
	mov	r5, r0
	cmp	r9, ip
	bne	.L854
	movw	r10, #:lower16:.LANCHOR2
	movw	r3, #690
	ldr	fp, [r7, #4]
	movt	r10, #:upper16:.LANCHOR2
	ldrh	r3, [r10, r3]
	tst	r3, #4
	bne	.L867
.L856:
	movw	r3, #714
	strh	r6, [r5, #98]	@ movhi
	ldrh	r3, [r10, r3]
	tst	r3, #4
	bne	.L868
.L858:
	ldrb	r3, [fp, #26]	@ zero_extendqisi2
	mov	r2, #0
	mov	r1, fp
	str	r2, [fp, #4]
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [fp, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bge	.L853
	movw	r0, #:lower16:.LC35
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	str	r5, [sp]
	ldr	r1, .L869
	movt	r0, #:upper16:.LC35
	ldrb	r2, [r4]	@ zero_extendqisi2
	bl	printk
	b	.L853
.L866:
	ldr	r1, [r7]
	str	r8, [sp, #4]
	movw	r2, #:lower16:.LC17
	ldrb	r4, [r4, #1]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC17
	add	r0, r0, #720
	mvn	r5, #94
	add	r1, r1, #32
	str	r4, [sp]
	str	ip, [sp, #8]
	str	lr, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L853
.L867:
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC16
	mov	r3, r8
	movt	r2, #:upper16:.LC16
	add	r0, r10, #672
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L856
.L868:
	ldr	r1, [r7]
	mov	r0, #0
	movw	r2, #:lower16:.LC18
	ldrb	r3, [r4]	@ zero_extendqisi2
	str	r8, [sp, #4]
	movt	r2, #:upper16:.LC18
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	add	r1, r1, #32
	str	ip, [sp]
	str	r9, [sp, #8]
	str	r0, [sp, #12]
	ldr	r0, .L869+4
	bl	__dynamic_dev_dbg
	b	.L858
.L870:
	.align	2
.L869:
	.word	.LANCHOR3+24
	.word	.LANCHOR2+696
	.fnend
	.size	ecm_qc_setup, .-ecm_qc_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_response_complete, %function
rndis_qc_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r5, [r1, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r1, #44]
	ldr	r2, [r5, #20]
	cmp	r2, #0
	beq	.L872
	ldr	r7, [r2, #24]
	cmp	r7, #0
	beq	.L872
	cmn	r3, #104
	beq	.L875
	cmp	r3, #0
	mov	r6, r0
	mov	r4, r1
	bne	.L903
.L876:
	ldr	r3, [r5, #156]
	cmp	r3, r6
	beq	.L904
.L871:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L903:
	cmn	r3, #108
	beq	.L875
	ldr	r1, [r1, #4]
	movw	r0, #:lower16:.LC37
	ldr	ip, [r4, #48]
	movt	r0, #:upper16:.LC37
	ldr	r2, [r6, #4]
	str	ip, [sp]
	str	r1, [sp, #4]
	ldr	r1, .L905
	bl	printk
	b	.L876
.L875:
	mov	r3, #0
	str	r3, [r5, #164]
	b	.L871
.L904:
	add	r6, r5, #164
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L871
	ldr	r0, [r5, #156]
	mov	r1, r4
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L871
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	ip, #:lower16:.LANCHOR2
	movw	r2, #762
	movt	ip, #:upper16:.LANCHOR2
	ldrh	r2, [ip, r2]
	tst	r2, #4
	beq	.L871
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC14
	mov	r3, r0
	movt	r2, #:upper16:.LC14
	add	r0, ip, #744
	add	r1, r1, #32
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	__dynamic_dev_dbg
.L872:
	ldr	r2, .L905
	movw	r0, #:lower16:.LC36
	movt	r0, #:upper16:.LC36
	mov	r1, r2
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	printk
.L906:
	.align	2
.L905:
	.word	.LANCHOR3+40
	.fnend
	.size	rndis_qc_response_complete, .-rndis_qc_response_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_response_available, %function
rndis_qc_response_available:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #164
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r1, [r0, #160]
	ldr	ip, [r1]
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L907
	mov	r4, r0
	mov	r0, #0
	str	r3, [ip]
	mov	r2, #32
	str	r0, [ip, #4]
	ldr	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L915
.L907:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L915:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r1, r3, [r5]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC38
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC38
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, .L916
	b	printk
.L917:
	.align	2
.L916:
	.word	.LANCHOR3+68
	.fnend
	.size	rndis_qc_response_available, .-rndis_qc_response_available
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_buffer_alloc, %function
f_audio_buffer_alloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L921
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L923
.L919:
	mov	r0, r5
	movw	r1, #32800
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	beq	.L924
.L918:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L921:
	mov	r4, #16
	b	.L919
.L924:
	movw	r0, #:lower16:.LC40
	ldr	r1, .L925
	movt	r0, #:upper16:.LC40
	bl	printk
	mov	r0, r4
	mvn	r4, #11
	bl	kfree
	b	.L918
.L923:
	movw	r0, #:lower16:.LC39
	ldr	r1, .L925
	mvn	r4, #11
	movt	r0, #:upper16:.LC39
	bl	printk
	b	.L918
.L926:
	.align	2
.L925:
	.word	.LANCHOR3+96
	.fnend
	.size	f_audio_buffer_alloc, .-f_audio_buffer_alloc
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_release, %function
conn_gadget_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r0, #:lower16:.LC41
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC41
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	printk
	ldr	r0, [r4, #2484]
	add	r0, r0, #88
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	ldr	r0, [r4, #2484]
	mov	r3, r0
	ldr	ip, [r3, #136]!
	cmp	ip, r3
	bne	.L932
.L928:
	add	r0, r0, #88
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #2484]
	mov	r0, #0
	add	r2, r3, #116
	str	r0, [r3, #216]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	ip, r1, [r2]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L932:
	ldr	r6, [ip]
	sub	r3, ip, #36
	movw	r7, #:lower16:.LC42
	mov	r5, r3
	movt	r7, #:upper16:.LC42
	sub	r6, r6, #36
.L929:
	add	r0, r0, #88
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	bl	printk
	ldr	r3, [r4, #2484]
	mov	r1, r5
	mov	r5, r6
	ldr	r0, [r3, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r0, [r4, #2484]
	add	r0, r0, #88
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	ldr	r0, [r4, #2484]
	ldr	r3, [r6, #36]!
	add	r2, r0, #136
	cmp	r6, r2
	sub	r6, r3, #36
	beq	.L928
	b	.L929
	.fnend
	.size	conn_gadget_release, .-conn_gadget_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_setup, %function
ncm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r1]	@ unaligned
	movw	r1, #8586
	ldr	r3, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldrh	r8, [r4, #2]	@ unaligned
	ldrh	fp, [r4, #4]	@ unaligned
	rev16	r2, r2
	ldrh	r7, [r4, #6]	@ unaligned
	ldr	r6, [r3, #24]
	uxth	r2, r2
	uxth	r9, r8
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r2, r1
	ldr	r10, [r6, #4]
	beq	.L935
	bls	.L975
	movw	r1, #41349
	cmp	r2, r1
	beq	.L942
	bhi	.L943
	movw	r1, #41344
	cmp	r2, r1
	beq	.L944
	movw	r1, #41347
	cmp	r2, r1
	bne	.L934
	adds	r2, r9, #0
	movne	r2, #1
	cmp	r7, #1
	orrls	r2, r2, #1
	cmp	r2, #0
	beq	.L976
.L934:
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #906
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	mvneq	r5, #94
	bne	.L977
.L933:
	mov	r0, r5
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L975:
	movw	r1, #8580
	cmp	r2, r1
	beq	.L937
	bls	.L978
	movw	r1, #8582
	cmp	r2, r1
	beq	.L940
	movw	r1, #8584
	cmp	r2, r1
	bne	.L934
	cmp	r9, #0
	cmpeq	r7, #2
	bne	.L934
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, fp
	bne	.L934
	movw	r3, #:lower16:ncm_setdgram_complete
	mov	r8, #2
	str	r0, [r10, #32]
	movt	r3, #:upper16:ncm_setdgram_complete
	b	.L974
.L943:
	movw	r1, #41351
	cmp	r2, r1
	beq	.L946
	movw	r1, #41353
	cmp	r2, r1
	bne	.L934
	adds	r2, r9, #0
	movne	r2, #1
	cmp	r7, #1
	orrls	r2, r2, #1
	cmp	r2, #0
	bne	.L934
	ldrb	r1, [r0, #148]	@ zero_extendqisi2
	cmp	r1, fp
	bne	.L934
	movw	r3, #:lower16:.LANCHOR2
	ldrb	r1, [r0, #180]	@ zero_extendqisi2
	mov	r8, #2
	mov	r0, r3
	ldr	r3, [r10]
	movt	r0, #:upper16:.LANCHOR2
	str	r0, [sp, #20]
	strb	r1, [r3]
	strb	r2, [r3, #1]
	mov	r2, r0
	b	.L949
.L940:
	cmp	r9, #0
	cmpeq	r7, #4
	bne	.L934
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, fp
	bne	.L934
	movw	r3, #:lower16:ncm_ep0out_complete
	mov	r8, #4
	str	r0, [r10, #32]
	movt	r3, #:upper16:ncm_ep0out_complete
.L974:
	movw	r2, #:lower16:.LANCHOR2
	str	r8, [r10, #4]
	movt	r2, #:upper16:.LANCHOR2
	str	r3, [r10, #28]
	str	r2, [sp, #20]
	b	.L949
.L946:
	adds	r2, r9, #0
	movne	r2, #1
	cmp	r7, #1
	orrls	r2, r2, #1
	cmp	r2, #0
	bne	.L934
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, fp
	bne	.L934
	ldrh	r2, [r0, #182]
	movw	r1, #:lower16:.LANCHOR2
	movw	r0, #:lower16:.LC47
	ldr	r3, [r10]
	movt	r1, #:upper16:.LANCHOR2
	movt	r0, #:upper16:.LC47
	mov	r8, #2
	str	r1, [sp, #20]
	ldr	r1, .L983
	lsr	ip, r2, #8
	strb	r2, [r3]
	strb	ip, [r3, #1]
	ldrh	r2, [r5, #182]
	bl	printk
	ldr	r2, [sp, #20]
	b	.L949
.L944:
	adds	r2, r9, #0
	movne	r2, #1
	cmp	r7, #0
	moveq	r2, #1
	cmp	r2, #0
	bne	.L934
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, fp
	bne	.L934
	movw	r3, #:lower16:.LANCHOR2
	cmp	r7, #28
	ldr	r1, .L983+4
	movt	r3, #:upper16:.LANCHOR2
	movcc	r2, r7
	ldr	r0, [r10]
	movcs	r2, #28
	mov	r8, r2
	str	r3, [sp, #20]
	bl	memcpy
	ldr	r2, [sp, #20]
	b	.L949
.L978:
	movw	r1, #8515
	cmp	r2, r1
	bne	.L934
	cmp	r7, #0
	bne	.L934
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, fp
	bne	.L934
	movw	r3, #:lower16:.LANCHOR2
	mov	r2, r3
	movw	r3, #786
	movt	r2, #:upper16:.LANCHOR2
	ldrh	r3, [r2, r3]
	str	r2, [sp, #20]
	tst	r3, #4
	bne	.L979
.L948:
	strh	r8, [r5, #98]	@ movhi
	ldr	r2, [sp, #20]
	mov	r8, #0
	b	.L949
.L942:
	adds	r2, r9, #0
	movne	r2, #1
	cmp	r7, #3
	orrls	r2, r2, #1
	cmp	r2, #0
	bne	.L934
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, fp
	bne	.L934
	ldr	r3, [r0, #112]
	movw	r2, #:lower16:.LANCHOR2
	mov	r8, #4
	mov	r1, r2
	ldr	r2, [r10]
	movt	r1, #:upper16:.LANCHOR2
	str	r1, [sp, #20]
	lsr	r1, r3, #16
	strb	r3, [r2]
	ubfx	r3, r3, #8, #8
	lsr	r0, r1, #8
	strb	r3, [r2, #1]
	strb	r1, [r2, #2]
	strb	r0, [r2, #3]
	ldr	r2, [sp, #20]
	b	.L949
.L935:
	cmp	r7, #0
	bne	.L934
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, fp
	bne	.L934
	cmp	r9, #0
	beq	.L953
	cmp	r9, #1
	bne	.L934
	movw	r3, #:lower16:.LANCHOR2
	strb	r9, [r0, #180]
	mov	r2, r3
	movw	r3, #882
	movt	r2, #:upper16:.LANCHOR2
	ldrh	r3, [r2, r3]
	str	r2, [sp, #20]
	tst	r3, #4
	moveq	r1, #16777216
	bne	.L980
.L955:
	ldr	r2, [r5, #176]
	mov	r8, #0
	ldr	r3, [r2, #4]
	bic	r3, r3, #16777216
	str	r3, [r2, #4]
	ldr	r2, [r5, #176]
	ldr	r3, [r2, #4]
	orr	r3, r3, r1
	str	r3, [r2, #4]
	ldr	r2, [sp, #20]
	b	.L949
.L937:
	cmp	r7, #0
	bne	.L934
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, fp
	bne	.L934
	cmp	r9, #0
	beq	.L950
	cmp	r9, #1
	bne	.L934
	movw	r3, #:lower16:.LANCHOR2
	ldr	r2, .L983+8
	mov	r1, r3
	movw	r3, #834
	movt	r1, #:upper16:.LANCHOR2
	ldrh	r3, [r1, r3]
	str	r2, [r0, #176]
	str	r1, [sp, #20]
	tst	r3, #4
	bne	.L981
.L952:
	ldr	r2, [sp, #20]
	mov	r8, #0
.L949:
	movw	r3, #930
	ldrh	r3, [r2, r3]
	tst	r3, #4
	bne	.L982
.L957:
	ldrb	r3, [r10, #26]	@ zero_extendqisi2
	str	r8, [r10, #4]
	mov	r1, r10
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r10, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bge	.L933
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC49
	str	r5, [sp]
	movt	r1, #:upper16:.LC49
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	ldrb	r2, [r4]	@ zero_extendqisi2
	add	r0, r0, #32
	bl	dev_err
	b	.L933
.L977:
	ldr	r1, [r6]
	str	r9, [sp, #4]
	movw	r2, #:lower16:.LC17
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC17
	add	r0, r0, #888
	mvn	r5, #94
	add	r1, r1, #32
	str	ip, [sp]
	str	fp, [sp, #8]
	str	r7, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L933
.L976:
	ldrb	r1, [r0, #148]	@ zero_extendqisi2
	cmp	r1, fp
	bne	.L934
	ldr	r3, [r5, #176]
	movw	r1, #:lower16:.LANCHOR2
	mov	r8, #2
	ldr	r0, .L983+12
	movt	r1, #:upper16:.LANCHOR2
	str	r1, [sp, #20]
	ldr	r1, [r10]
	subs	r3, r3, r0
	movne	r3, #1
	strb	r3, [r1]
	strb	r2, [r1, #1]
	ldr	r2, [sp, #20]
	b	.L949
.L982:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC48
	ldrb	r3, [r4]	@ zero_extendqisi2
	str	r9, [sp, #4]
	movt	r2, #:upper16:.LC48
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	ldr	r0, .L983+16
	add	r1, r1, #32
	str	ip, [sp]
	str	fp, [sp, #8]
	str	r7, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L957
.L950:
	movw	r3, #:lower16:.LANCHOR2
	ldr	r2, .L983+12
	mov	r1, r3
	movw	r3, #810
	movt	r1, #:upper16:.LANCHOR2
	ldrh	r3, [r1, r3]
	str	r2, [r0, #176]
	str	r1, [sp, #20]
	tst	r3, #4
	beq	.L952
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC43
	mov	r8, r9
	ldr	r3, [sp, #20]
	movt	r2, #:upper16:.LC43
	add	r1, r1, #32
	add	r0, r3, #792
	bl	__dynamic_dev_dbg
	ldr	r2, [sp, #20]
	b	.L949
.L953:
	movw	r3, #:lower16:.LANCHOR2
	strb	r9, [r0, #180]
	mov	r2, r3
	movw	r3, #858
	movt	r2, #:upper16:.LANCHOR2
	ldrh	r3, [r2, r3]
	str	r2, [sp, #20]
	tst	r3, #4
	moveq	r1, r9
	beq	.L955
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC45
	ldr	r3, [sp, #20]
	movt	r2, #:upper16:.LC45
	add	r1, r1, #32
	add	r0, r3, #840
	bl	__dynamic_dev_dbg
	mov	r1, r9
	b	.L955
.L979:
	ldr	r1, [r6]
	mov	r0, r2
	movw	r2, #:lower16:.LC16
	mov	r3, r9
	movt	r2, #:upper16:.LC16
	add	r0, r0, #768
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L948
.L980:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC46
	ldr	r3, [sp, #20]
	movt	r2, #:upper16:.LC46
	add	r1, r1, #32
	add	r0, r3, #864
	bl	__dynamic_dev_dbg
	mov	r1, #16777216
	b	.L955
.L981:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC44
	mov	r8, r7
	ldr	r3, [sp, #20]
	movt	r2, #:upper16:.LC44
	add	r1, r1, #32
	add	r0, r3, #816
	bl	__dynamic_dev_dbg
	ldr	r2, [sp, #20]
	b	.L949
.L984:
	.align	2
.L983:
	.word	.LANCHOR3+120
	.word	.LANCHOR0+20
	.word	.LANCHOR0+92
	.word	.LANCHOR0+48
	.word	.LANCHOR2+912
	.fnend
	.size	ncm_setup, .-ncm_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_setdgram_complete, %function
ncm_setdgram_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR0
	str	r6, [sp, #8]
	mov	r5, #0
	str	lr, [sp, #12]
	ldr	r2, [r3, #24]
	ldr	r0, [r3, #36]
	ldr	ip, [r1, #32]
	str	r5, [r1, #32]
	ldr	lr, [r1, #44]
	cmp	r0, r2
	movcs	r0, r2
	cmp	lr, r5
	bne	.L986
	ldr	r2, [r1, #4]
	ldr	lr, [r1, #48]
	cmp	lr, r2
	bne	.L986
	ldr	r1, [r1]
	movw	lr, #7500
	ldrb	r5, [r1, #1]	@ zero_extendqisi2
	ldrb	r2, [r1]	@ zero_extendqisi2
	orr	r2, r2, r5, lsl #8
	sub	r1, r2, #1504
	sub	r1, r1, #10
	cmp	r1, lr
	bhi	.L996
	ldrh	r1, [r3, #44]
	add	r3, r1, #11
	rsb	r1, r1, #0
	and	r3, r3, r1
	add	r3, r3, #12
	add	r3, r3, r2
	cmp	r3, r0
	bhi	.L997
	ldr	r3, [ip, #184]
	strh	r2, [ip, #182]	@ movhi
	movw	r0, #:lower16:.LC54
	movt	r0, #:upper16:.LC54
	cmp	r3, #0
	subne	r1, r2, #14
	strne	r1, [r3, #356]
	ldr	r1, .L998
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L997:
	movw	r0, #:lower16:.LC52
	ldr	r1, .L998
	movt	r0, #:upper16:.LC52
	bl	printk
	movw	r0, #:lower16:.LC53
	movt	r0, #:upper16:.LC53
	bl	printk
.L988:
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #24]
	bx	r3
.L986:
	movw	r0, #:lower16:.LC50
	ldr	r1, .L998
	movt	r0, #:upper16:.LC50
	bl	printk
	b	.L988
.L996:
	movw	r0, #:lower16:.LC51
	ldr	r1, .L998
	movt	r0, #:upper16:.LC51
	bl	printk
	b	.L988
.L999:
	.align	2
.L998:
	.word	.LANCHOR3+132
	.fnend
	.size	ncm_setdgram_complete, .-ncm_setdgram_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_set_string, %function
acc_complete_set_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r1, #44]
	ldr	r0, [r0]
	ldr	r6, [r1, #48]
	cmp	r3, #0
	movwne	r0, #:lower16:.LC55
	movne	r1, r3
	movtne	r0, #:upper16:.LC55
	bne	.L1015
	ldr	r3, [r0, #1640]
	cmp	r3, #5
	ldrls	pc, [pc, r3, asl #2]
	b	.L1002
.L1004:
	.word	.L1003
	.word	.L1005
	.word	.L1006
	.word	.L1007
	.word	.L1008
	.word	.L1009
.L1009:
	add	r7, r0, #1376
	add	r7, r7, #5
.L1010:
	cmp	r7, #0
	beq	.L1002
	add	r4, r0, #88
	mov	r5, r1
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	cmp	r6, #255
	mov	r8, r0
	ldr	r1, [r5]
	movge	r6, #255
	mov	r0, r7
	mov	r2, r6
	bl	memcpy
	mov	r3, #0
	mov	r1, r8
	mov	r0, r4
	strb	r3, [r7, r6]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L1003:
	add	r7, r0, #101
	b	.L1010
.L1005:
	add	r7, r0, #356
	add	r7, r7, #1
	b	.L1010
.L1006:
	add	r7, r0, #612
	add	r7, r7, #1
	b	.L1010
.L1007:
	add	r7, r0, #868
	add	r7, r7, #1
	b	.L1010
.L1008:
	add	r7, r0, #1120
	add	r7, r7, #5
	b	.L1010
.L1002:
	movw	r0, #:lower16:.LC56
	mov	r1, r3
	movt	r0, #:upper16:.LC56
.L1015:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
	.fnend
	.size	acc_complete_set_string, .-acc_complete_set_string
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_release, %function
acc_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r0, #:lower16:.LC57
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC57
	str	lr, [sp, #4]
	bl	printk
	ldr	r3, [r4, #2488]
	add	r3, r3, #1648
	add	r3, r3, #4
	.syntax divided
@ 37 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r2, #0
	.syntax divided
@ 52 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@	__xchg4
1:	ldrex	r1, [r3]
	strex	r0, r2, [r3]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 98 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, r2
	beq	.L1019
.L1017:
	ldr	r3, [r4, #2488]
	mov	r0, #0
	ldrb	r2, [r3, #100]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #100]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1019:
	movw	r0, #:lower16:.LC58
	movw	r1, #799
	movt	r0, #:upper16:.LC58
	bl	warn_slowpath_null
	b	.L1017
	.fnend
	.size	acc_release, .-acc_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_open, %function
acc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC59
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	movt	r0, #:upper16:.LC59
	str	lr, [sp, #4]
	bl	printk
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r3, [r2, #2488]
	add	r3, r3, #1648
	add	r3, r3, #4
	.syntax divided
@ 37 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #1
	.syntax divided
@ 52 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@	__xchg4
1:	ldrex	ip, [r3]
	strex	r1, r0, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 98 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	ip, #0
	bne	.L1022
	ldr	r3, [r2, #2488]
	mov	r0, ip
	ldrb	r2, [r3, #100]	@ zero_extendqisi2
	bfi	r2, ip, #1, #1
	strb	r2, [r3, #100]
	str	r3, [r4, #124]
.L1020:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1022:
	mvn	r0, #15
	b	.L1020
	.fnend
	.size	acc_open, .-acc_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	sua_version_info_store, %function
sua_version_info_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	ldr	r6, [r0, #4]
	cmp	r4, #100
	mov	r1, r5
	movls	r2, r4
	movhi	r2, #100
	ldr	r0, [r6, #96]
	add	r0, r0, #235
	bl	memcpy
	ldr	ip, [r6, #96]
	movw	r0, #:lower16:.LC60
	mov	r2, r5
	ldr	r1, .L1028
	mov	r3, #4
	movt	r0, #:upper16:.LC60
	add	ip, ip, #235
	str	ip, [sp]
	bl	printk
	mov	r0, r4
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1029:
	.align	2
.L1028:
	.word	.LANCHOR3+156
	.fnend
	.size	sua_version_info_store, .-sua_version_info_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_release_dev, %function
rndis_qc_release_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC61
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r1, .L1035
	movw	r4, #:lower16:.LANCHOR1
	movt	r0, #:upper16:.LC61
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	movt	r4, #:upper16:.LANCHOR1
	bl	printk
	ldr	r0, .L1035+4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #2496]
	mov	r5, r0
	cmp	r3, #0
	beq	.L1034
	add	r2, r3, #152
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, .L1035+4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
.L1030:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1034:
	movw	r0, #:lower16:.LC62
	ldr	r1, .L1035
	movt	r0, #:upper16:.LC62
	bl	printk
	ldr	r0, .L1035+4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #18
	b	.L1030
.L1036:
	.align	2
.L1035:
	.word	.LANCHOR3+180
	.word	.LANCHOR1+2492
	.fnend
	.size	rndis_qc_release_dev, .-rndis_qc_release_dev
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_open_dev, %function
rndis_qc_open_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC63
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	str	r6, [sp, #8]
	movt	r0, #:upper16:.LC63
	mov	r6, r1
	ldr	r1, .L1043
	str	lr, [sp, #12]
	movt	r4, #:upper16:.LANCHOR1
	bl	printk
	ldr	r0, .L1043+4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #2496]
	mov	r5, r0
	cmp	r3, #0
	beq	.L1042
	add	r2, r3, #152
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #1
	bne	.L1040
	ldr	r3, [r4, #2496]
	mov	r1, r5
	ldr	r0, .L1043+4
	str	r3, [r6, #124]
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC65
	ldr	r1, .L1043
	movt	r0, #:upper16:.LC65
	bl	printk
	mov	r0, #0
.L1037:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1042:
	movw	r0, #:lower16:.LC64
	ldr	r1, .L1043
	movt	r0, #:upper16:.LC64
	bl	printk
	ldr	r0, .L1043+4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #18
	b	.L1037
.L1040:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC66
	ldr	r1, .L1043
	movt	r0, #:upper16:.LC66
	bl	printk
	ldr	r0, .L1043+4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #15
	b	.L1037
.L1044:
	.align	2
.L1043:
	.word	.LANCHOR3+204
	.word	.LANCHOR1+2492
	.fnend
	.size	rndis_qc_open_dev, .-rndis_qc_open_dev
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_release, %function
mtp_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC67
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r0, #:upper16:.LC67
	str	lr, [sp, #4]
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2500]
	add	r2, r3, #108
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
	.fnend
	.size	mtp_release, .-mtp_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_open, %function
mtp_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC68
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	movt	r0, #:upper16:.LC68
	str	lr, [sp, #4]
	bl	printk
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r3, [r2, #2500]
	add	r0, r3, #108
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	ip, [r0]
	add	ip, ip, #1
	strex	r1, ip, [r0]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	ip, #1
	bne	.L1048
	ldr	r3, [r2, #2500]
	mov	r0, #0
	ldr	r2, [r3, #104]
	cmp	r2, #0
	strne	ip, [r3, #104]
	str	r3, [r4, #124]
.L1047:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1048:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r0]
	sub	r2, r2, #1
	strex	r1, r2, [r0]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #15
	b	.L1047
	.fnend
	.size	mtp_open, .-mtp_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_notify_complete, %function
ccid_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r1, [r1, #44]
	cmn	r1, #104
	beq	.L1053
	cmp	r1, #0
	beq	.L1053
	cmn	r1, #108
	beq	.L1053
	movw	r0, #:lower16:.LC69
	movt	r0, #:upper16:.LC69
	b	printk
.L1053:
	bx	lr
	.fnend
	.size	ccid_notify_complete, .-ccid_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_release, %function
mbim_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC70
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r1, .L1067
	movt	r0, #:upper16:.LC70
	str	lr, [sp, #4]
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2504]
	add	r2, r3, #92
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
.L1068:
	.align	2
.L1067:
	.word	.LANCHOR3+224
	.fnend
	.size	mbim_release, .-mbim_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_open, %function
mbim_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r0, #:lower16:.LC71
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r1
	movt	r0, #:upper16:.LC71
	ldr	r1, .L1078
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	printk
	ldr	r3, [r4, #2504]
	cmp	r3, #0
	beq	.L1076
	add	r2, r3, #92
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #1
	bne	.L1072
	movw	r0, #:lower16:.LC73
	ldr	r1, .L1078
	movt	r0, #:upper16:.LC73
	bl	printk
	ldr	r3, [r4, #2504]
	ldr	r2, [r3, #88]
	cmp	r2, #0
	beq	.L1077
.L1074:
	mov	r4, #0
	movw	r0, #:lower16:.LC75
	str	r3, [r5, #124]
	movt	r0, #:upper16:.LC75
	ldr	r1, .L1078
	str	r4, [r3, #232]
	bl	printk
	mov	r0, r4
.L1069:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1072:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC66
	ldr	r1, .L1078
	movt	r0, #:upper16:.LC66
	bl	printk
	mvn	r0, #15
	b	.L1069
.L1076:
	movw	r0, #:lower16:.LC72
	ldr	r1, .L1078
	movt	r0, #:upper16:.LC72
	bl	printk
	mvn	r0, #18
	b	.L1069
.L1077:
	movw	r0, #:lower16:.LC74
	ldr	r1, .L1078
	movt	r0, #:upper16:.LC74
	bl	printk
	ldr	r3, [r4, #2504]
	b	.L1074
.L1079:
	.align	2
.L1078:
	.word	.LANCHOR3+240
	.fnend
	.size	mbim_open, .-mbim_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_open_work, %function
gsdio_open_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r2, r0
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	r1, .L1082
	ldr	ip, [r2, #-4]
	.pad #12
	sub	sp, sp, #12
	movw	r0, #:lower16:.LC76
	ldr	r3, [r2, #-124]!
	movt	r0, #:upper16:.LC76
	ldr	ip, [ip]
	str	ip, [sp]
	bl	printk
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L1083:
	.align	2
.L1082:
	.word	.LANCHOR3+252
	.fnend
	.size	gsdio_open_work, .-gsdio_open_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	remote_wakeup_show, %function
remote_wakeup_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #516]
	cmp	r3, #0
	moveq	r0, r3
	beq	.L1084
	ldr	r3, [r0, #508]
	movw	r2, #:lower16:.LC77
	mov	r1, #4096
	movt	r2, #:upper16:.LC77
	mov	r0, r4
	ldrb	r3, [r3, #-98]	@ zero_extendqisi2
	ubfx	r3, r3, #5, #1
	bl	snprintf
	mov	r0, #2
.L1084:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	remote_wakeup_show, .-remote_wakeup_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	state_show, %function
state_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	ldr	r4, [r0, #8]
	cmp	r4, #0
	movweq	r4, #:lower16:.LC79
	movteq	r4, #:upper16:.LC79
	beq	.L1089
	add	r7, r4, #60
	mov	r5, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r1, r0
	cmp	r3, #0
	movwne	r4, #:lower16:.LC78
	movtne	r4, #:upper16:.LC78
	beq	.L1095
.L1090:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L1089:
	movw	r0, #:lower16:.LC81
	mov	r2, r4
	ldr	r1, .L1096
	movt	r0, #:upper16:.LC81
	bl	printk
	movw	r2, #:lower16:.LC82
	mov	r3, r4
	ldrd	r4, [sp]
	mov	r0, r6
	movt	r2, #:upper16:.LC82
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	mov	r1, #4096
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	snprintf
.L1095:
	ldrb	r2, [r5, #48]	@ zero_extendqisi2
	movw	r3, #:lower16:.LC80
	movw	r4, #:lower16:.LC79
	movt	r3, #:upper16:.LC80
	movt	r4, #:upper16:.LC79
	cmp	r2, #0
	movne	r4, r3
	b	.L1090
.L1097:
	.align	2
.L1096:
	.word	.LANCHOR3+268
	.fnend
	.size	state_show, .-state_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	pm_qos_show, %function
pm_qos_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	movw	r2, #:lower16:.LC82
	add	r3, r0, #52
	ldr	lr, [sp, #4]
	mov	r0, r4
	movt	r2, #:upper16:.LC82
	ldr	r4, [sp]
	mov	r1, #4096
	add	sp, sp, #8
	b	snprintf
	.fnend
	.size	pm_qos_show, .-pm_qos_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	enable_show, %function
enable_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	mov	r4, r0
	movw	r0, #:lower16:.LC83
	ldr	r1, .L1102
	ldrb	r2, [r4, #16]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC83
	bl	printk
	movw	r2, #:lower16:.LC77
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	mov	r0, r5
	movt	r2, #:upper16:.LC77
	mov	r1, #4096
	bl	snprintf
	ldrd	r4, [sp]
	mov	r0, #2
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1103:
	.align	2
.L1102:
	.word	.LANCHOR3+280
	.fnend
	.size	enable_show, .-enable_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iSerial_show, %function
iSerial_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC84
	ldr	r3, .L1105
	movt	r2, #:upper16:.LC84
	mov	r1, #4096
	b	snprintf
.L1106:
	.align	2
.L1105:
	.word	.LANCHOR1+2220
	.fnend
	.size	iSerial_show, .-iSerial_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iProduct_show, %function
iProduct_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC84
	ldr	r3, .L1108
	movt	r2, #:upper16:.LC84
	mov	r1, #4096
	b	snprintf
.L1109:
	.align	2
.L1108:
	.word	.LANCHOR1+2508
	.fnend
	.size	iProduct_show, .-iProduct_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iManufacturer_show, %function
iManufacturer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC84
	ldr	r3, .L1111
	movt	r2, #:upper16:.LC84
	mov	r1, #4096
	b	snprintf
.L1112:
	.align	2
.L1111:
	.word	.LANCHOR1+2764
	.fnend
	.size	iManufacturer_show, .-iManufacturer_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceProtocol_show, %function
bDeviceProtocol_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC77
	ldrb	r3, [r3, #142]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC77
	mov	r1, #4096
	b	snprintf
	.fnend
	.size	bDeviceProtocol_show, .-bDeviceProtocol_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceSubClass_show, %function
bDeviceSubClass_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC77
	ldrb	r3, [r3, #141]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC77
	mov	r1, #4096
	b	snprintf
	.fnend
	.size	bDeviceSubClass_show, .-bDeviceSubClass_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceClass_show, %function
bDeviceClass_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC77
	ldrb	r3, [r3, #140]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC77
	mov	r1, #4096
	b	snprintf
	.fnend
	.size	bDeviceClass_show, .-bDeviceClass_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bcdDevice_show, %function
bcdDevice_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC85
	str	lr, [sp, #4]
	movt	r2, #:upper16:.LC85
	mov	r1, #4096
	ldrh	r3, [r3, #148]
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
	.fnend
	.size	bcdDevice_show, .-bcdDevice_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	idProduct_show, %function
idProduct_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC85
	str	lr, [sp, #4]
	movt	r2, #:upper16:.LC85
	mov	r1, #4096
	ldrh	r3, [r3, #146]
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
	.fnend
	.size	idProduct_show, .-idProduct_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	idVendor_show, %function
idVendor_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC85
	str	lr, [sp, #4]
	movt	r2, #:upper16:.LC85
	mov	r1, #4096
	ldrh	r3, [r3, #144]
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
	.fnend
	.size	idVendor_show, .-idVendor_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_pcm_show, %function
audio_source_pcm_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	ldr	ip, [r0, #4]
	movw	r2, #:lower16:.LC86
	mov	r1, #4096
	movt	r2, #:upper16:.LC86
	mov	r0, r4
	ldm	ip, {r3, ip}
	str	ip, [sp]
	bl	snprintf
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	audio_source_pcm_show, .-audio_source_pcm_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_inquiry_show, %function
mass_storage_inquiry_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC82
	mov	r0, r4
	movt	r2, #:upper16:.LC82
	ldr	r4, [sp]
	mov	r1, #4096
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r3, #96]
	add	r3, r3, #180
	b	snprintf
	.fnend
	.size	mass_storage_inquiry_show, .-mass_storage_inquiry_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_ethaddr_show, %function
ecm_ethaddr_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #24
	sub	sp, sp, #24
	bl	dev_get_drvdata
	ldr	ip, [r0, #4]
	movw	r2, #:lower16:.LC87
	mov	r1, #4096
	movt	r2, #:upper16:.LC87
	mov	r0, r4
	ldrb	lr, [ip, #5]	@ zero_extendqisi2
	ldrb	r3, [ip]	@ zero_extendqisi2
	str	lr, [sp, #16]
	ldrb	lr, [ip, #4]	@ zero_extendqisi2
	str	lr, [sp, #12]
	ldrb	lr, [ip, #3]	@ zero_extendqisi2
	str	lr, [sp, #8]
	ldrb	lr, [ip, #2]	@ zero_extendqisi2
	str	lr, [sp, #4]
	ldrb	ip, [ip, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	snprintf
	mov	r0, #18
	add	sp, sp, #24
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_ethaddr_show, .-ecm_ethaddr_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_transports_show, %function
ecm_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC82
	ldr	r3, .L1129
	movt	r2, #:upper16:.LC82
	mov	r1, #4096
	b	snprintf
.L1130:
	.align	2
.L1129:
	.word	.LANCHOR1+3020
	.fnend
	.size	ecm_transports_show, .-ecm_transports_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_max_pkt_per_xfer_show, %function
rndis_max_pkt_per_xfer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC77
	mov	r0, r4
	movt	r2, #:upper16:.LC77
	ldr	r4, [sp]
	mov	r1, #4096
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldrb	r3, [r3, #12]	@ zero_extendqisi2
	b	snprintf
	.fnend
	.size	rndis_max_pkt_per_xfer_show, .-rndis_max_pkt_per_xfer_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_vendorID_show, %function
rndis_vendorID_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC85
	mov	r0, r4
	movt	r2, #:upper16:.LC85
	ldr	r4, [sp]
	mov	r1, #4096
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r3, #8]
	b	snprintf
	.fnend
	.size	rndis_vendorID_show, .-rndis_vendorID_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_ethaddr_show, %function
rndis_ethaddr_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #24
	sub	sp, sp, #24
	bl	dev_get_drvdata
	ldr	ip, [r0, #4]
	movw	r2, #:lower16:.LC87
	mov	r1, #4096
	movt	r2, #:upper16:.LC87
	mov	r0, r4
	ldrb	lr, [ip, #5]	@ zero_extendqisi2
	ldrb	r3, [ip]	@ zero_extendqisi2
	str	lr, [sp, #16]
	ldrb	lr, [ip, #4]	@ zero_extendqisi2
	str	lr, [sp, #12]
	ldrb	lr, [ip, #3]	@ zero_extendqisi2
	str	lr, [sp, #8]
	ldrb	lr, [ip, #2]	@ zero_extendqisi2
	str	lr, [sp, #4]
	ldrb	ip, [ip, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	snprintf
	mov	r0, #18
	add	sp, sp, #24
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_ethaddr_show, .-rndis_ethaddr_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_wceis_show, %function
rndis_wceis_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC77
	mov	r0, r4
	movt	r2, #:upper16:.LC77
	mov	r1, #4096
	ldrb	r3, [r3, #269]	@ zero_extendqisi2
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_wceis_show, .-rndis_wceis_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_manufacturer_show, %function
rndis_manufacturer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC82
	mov	r0, r4
	movt	r2, #:upper16:.LC82
	ldr	r4, [sp]
	mov	r1, #4096
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	add	r3, r3, #13
	b	snprintf
	.fnend
	.size	rndis_manufacturer_show, .-rndis_manufacturer_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_xport_names_show, %function
rmnet_xport_names_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC82
	ldr	r3, .L1142
	movt	r2, #:upper16:.LC82
	mov	r1, #4096
	b	snprintf
.L1143:
	.align	2
.L1142:
	.word	.LANCHOR1+3072
	.fnend
	.size	rmnet_xport_names_show, .-rmnet_xport_names_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_transports_show, %function
rmnet_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC82
	ldr	r3, .L1145
	movt	r2, #:upper16:.LC82
	mov	r1, #4096
	b	snprintf
.L1146:
	.align	2
.L1145:
	.word	.LANCHOR1+3124
	.fnend
	.size	rmnet_transports_show, .-rmnet_transports_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_transports_show, %function
mbim_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC82
	ldr	r3, .L1148
	movt	r2, #:upper16:.LC82
	mov	r1, #4096
	b	snprintf
.L1149:
	.align	2
.L1148:
	.word	.LANCHOR1+3176
	.fnend
	.size	mbim_transports_show, .-mbim_transports_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	start_out_transfer, %function
start_out_transfer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #8]
	cmp	r4, #0
	beq	.L1151
	ldr	r0, [r4, #88]
	mov	r5, r1
	ldr	r6, [r4, #104]
	ldr	r7, [r1, #24]
	add	r0, r0, #44
	bl	_raw_spin_lock_irq
	mov	r3, #1
	mov	r2, #2
	str	r2, [r5, #4]
	str	r3, [r5, #28]
	ldr	r0, [r4, #88]
	add	r0, r0, #44
	bl	_raw_spin_unlock_irq
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	mov	r2, #208
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L1163
	mov	r2, #0
	cmn	r3, #108
	str	r2, [r5, #4]
	str	r2, [r5, #28]
	beq	.L1163
	cmn	r3, #95
	bne	.L1155
	ldr	r2, [r7, #4]
	cmp	r2, #0
	beq	.L1163
.L1155:
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC90
	movt	r1, #:upper16:.LC90
	ldr	r2, [r6, #4]
	add	r0, r0, #32
	bl	dev_warn
.L1163:
	mov	r0, #1
.L1153:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1151:
	ldr	r0, [r0]
	movw	r1, #:lower16:.LC88
	movw	r3, #805
	movt	r1, #:upper16:.LC88
	ldr	r2, .L1164
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC89
	movw	r1, #550
	movt	r0, #:upper16:.LC89
	bl	warn_slowpath_null
	mov	r0, r4
	b	.L1153
.L1165:
	.align	2
.L1164:
	.word	.LANCHOR3+292
	.fnend
	.size	start_out_transfer, .-start_out_transfer
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	override_id, %function
override_id:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	mov	r4, r1
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L1167
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bls	.L1168
	ldr	r0, [r0]
	movw	r1, #:lower16:.LC91
	movt	r1, #:upper16:.LC91
	add	r0, r0, #32
	bl	dev_warn
	b	.L1167
.L1168:
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r0, #48]
	strb	r3, [r1]
.L1167:
	ldrb	r0, [r4]	@ zero_extendqisi2
	pop	{r4, pc}
	.fnend
	.size	override_id, .-override_id
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_response_complete, %function
rmnet_sdio_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	cmn	r3, #104
	bxeq	lr
	cmp	r3, #0
	bxeq	lr
	cmn	r3, #108
	bxeq	lr
	mov	ip, r1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC92
	str	lr, [sp, #4]
	ldr	r2, [r0, #4]
	.pad #8
	sub	sp, sp, #8
	ldr	r4, [ip, #32]
	movt	r1, #:upper16:.LC92
	ldr	lr, [ip, #4]
	ldr	ip, [ip, #48]
	ldr	r0, [r4, #84]
	ldr	r0, [r0]
	stm	sp, {ip, lr}
	add	r0, r0, #32
	bl	_dev_info
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_sdio_response_complete, .-rmnet_sdio_response_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_response_complete, %function
rmnet_mux_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	cmn	r3, #104
	bxeq	lr
	cmp	r3, #0
	bxeq	lr
	cmn	r3, #108
	bxeq	lr
	mov	ip, r1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC93
	str	lr, [sp, #4]
	ldr	r2, [r0, #4]
	.pad #8
	sub	sp, sp, #8
	ldr	r4, [ip, #32]
	movt	r1, #:upper16:.LC93
	ldr	lr, [ip, #4]
	ldr	ip, [ip, #48]
	ldr	r0, [r4, #84]
	ldr	r0, [r0]
	stm	sp, {ip, lr}
	add	r0, r0, #32
	bl	_dev_info
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_mux_response_complete, .-rmnet_mux_response_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_show_suspended, %function
composite_show_suspended:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldrb	r2, [r0, #16]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC77
	mov	r0, r4
	movt	r1, #:upper16:.LC77
	and	r2, r2, #1
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	composite_show_suspended, .-composite_show_suspended
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb30en_show, %function
usb30en_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movw	r1, #:lower16:.LC94
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, r2
	movt	r1, #:upper16:.LC94
	ldrb	r2, [r3, #3226]	@ zero_extendqisi2
	b	sprintf
	.fnend
	.size	usb30en_show, .-usb30en_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_show_ro, %function
fsg_show_ro:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r3, r0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	ldr	r2, [r3, #-48]
	movw	r1, #:lower16:.LC77
	movt	r1, #:upper16:.LC77
	cmp	r2, #0
	ldrb	r2, [r3, #-24]	@ zero_extendqisi2
	ubfxne	r2, r2, #1, #1
	andeq	r2, r2, #1
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	fsg_show_ro, .-fsg_show_ro
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_show_nofua, %function
fsg_show_nofua:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC95
	str	lr, [sp, #4]
	ldrb	r3, [r0, #-24]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC95
	mov	r0, r2
	lsr	r2, r3, #7
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	fsg_show_nofua, .-fsg_show_nofua
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_show_cdrom, %function
fsg_show_cdrom:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC77
	str	lr, [sp, #4]
	ldrb	r3, [r0, #-24]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC77
	mov	r0, r2
	ubfx	r2, r3, #3, #1
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	fsg_show_cdrom, .-fsg_show_cdrom
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	check_command, %function
check_command:
	.fnstart
	@ args = 8, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	mov	r5, r1
	strd	r6, [sp, #8]
	movw	r6, #:lower16:__stack_chk_guard
	mov	r7, r3
	strd	r8, [sp, #16]
	movt	r6, #:upper16:__stack_chk_guard
	mov	r9, r2
	str	r10, [sp, #24]
	ldr	ip, [r6]
	str	lr, [sp, #28]
	ldrb	r8, [r0, #77]	@ zero_extendqisi2
	mov	lr, #0
	ldr	r0, [r0, #120]
	.pad #32
	sub	sp, sp, #32
	ldr	r3, [r4, #124]
	ldr	r10, [sp, #68]
	strb	lr, [sp, #8]
	lsr	r8, r8, #5
	str	ip, [sp, #28]
	cmp	r0, lr
	bne	.L1265
.L1214:
	ldr	r2, [r4, #128]
	cmp	r2, #0
	beq	.L1215
	cmp	r2, r3
	bls	.L1216
	ldrb	r2, [r4, #144]	@ zero_extendqisi2
	cmp	r9, r0
	str	r3, [r4, #128]
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	orr	r2, r2, #4
	strb	r2, [r4, #144]
	beq	.L1217
	cmp	r3, #0
	bne	.L1220
.L1217:
	ldr	r3, [r4, #72]
	cmp	r3, r5
	beq	.L1219
	blt	.L1220
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #954
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	bne	.L1266
.L1221:
	mov	r5, r3
.L1219:
	ldr	r3, [r4, #96]
	cmp	r3, r8
	beq	.L1222
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #978
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	bne	.L1267
.L1222:
	ldr	r1, [r4, #104]
	ldrb	r3, [r4, #76]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L1223
	cmp	r3, #3
	beq	.L1224
	ldrb	r2, [r1, #24]	@ zero_extendqisi2
	mov	r3, #0
	ldr	r0, [r1, #36]
	str	r3, [r1, #28]
	str	r3, [r1, #32]
	bfi	r2, r3, #6, #1
	cmp	r0, r3
	strb	r2, [r1, #24]
	beq	.L1224
	ldrb	r2, [r4, #76]	@ zero_extendqisi2
	cmp	r2, #18
	cmpne	r2, #3
	strne	r0, [r1, #28]
	mvnne	r0, #21
	strne	r3, [r1, #36]
	bne	.L1213
.L1224:
	ldrb	r3, [r4, #77]	@ zero_extendqisi2
	cmp	r5, #1
	and	r3, r3, #31
	strb	r3, [r4, #77]
	ble	.L1231
.L1233:
	mov	r3, #1
	add	r4, r4, #76
	mov	r0, r3
.L1230:
	ldrb	r2, [r4, #1]!	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L1228
	ands	r2, r7, r0, lsl r3
	beq	.L1268
.L1228:
	add	r3, r3, #1
	cmp	r5, r3
	bgt	.L1230
	cmp	r1, #0
	beq	.L1232
.L1231:
	ldr	r3, [r1]
	ldr	r2, [sp, #64]
	cmp	r3, #0
	movne	r3, #0
	andeq	r3, r2, #1
	cmp	r3, #0
	movne	r3, #14848
	mvnne	r0, #21
	movtne	r3, 2
	strne	r3, [r1, #28]
	bne	.L1213
.L1232:
	mov	r0, #0
.L1213:
	ldr	r2, [sp, #28]
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L1269
	add	sp, sp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1215:
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	b	.L1217
.L1265:
	movw	r2, #:lower16:.LANCHOR3
	movw	r1, #:lower16:.LC96
	movt	r2, #:upper16:.LANCHOR3
	movt	r1, #:upper16:.LC96
	add	r0, r2, r0
	ldrb	r2, [r0, #312]	@ zero_extendqisi2
	add	r0, sp, #8
	bl	sprintf
	ldr	r0, [r4, #120]
	ldr	r3, [r4, #124]
	b	.L1214
.L1223:
	ldrb	r2, [r4, #144]	@ zero_extendqisi2
	cmp	r3, #18
	cmpne	r3, #3
	bfi	r2, r1, #4, #1
	strb	r2, [r4, #144]
	beq	.L1226
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #1002
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L1227
.L1264:
	mvn	r0, #21
	b	.L1213
.L1268:
	cmp	r1, #0
	beq	.L1264
	mov	r3, #9216
	mvn	r0, #21
	movt	r3, 5
	str	r3, [r1, #28]
	b	.L1213
.L1226:
	ldrb	r3, [r4, #77]	@ zero_extendqisi2
	cmp	r5, #1
	and	r3, r3, #31
	strb	r3, [r4, #77]
	bgt	.L1233
	b	.L1232
.L1267:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC98
	str	r8, [sp]
	movt	r2, #:upper16:.LC98
	add	r0, r0, #960
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L1222
.L1266:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC97
	add	r0, r0, #936
	str	r5, [sp]
	movt	r2, #:upper16:.LC97
	str	r3, [sp, #4]
	mov	r3, r10
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #72]
	b	.L1221
.L1216:
	cmp	r9, r0
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	beq	.L1217
.L1220:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	mvn	r0, #21
	orr	r3, r3, #4
	strb	r3, [r4, #144]
	b	.L1213
.L1227:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC99
	add	r0, r0, #984
	movt	r2, #:upper16:.LC99
	ldr	r3, [r4, #96]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L1264
.L1269:
	bl	__stack_chk_fail
	.fnend
	.size	check_command, .-check_command
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	sua_version_info_show, %function
sua_version_info_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r1, #:lower16:.LC100
	mov	r0, r4
	movt	r1, #:upper16:.LC100
	ldr	r2, [r3, #96]
	add	r2, r2, #235
	bl	sprintf
	mov	r5, r0
	movw	r0, #:lower16:.LC101
	ldr	r1, .L1272
	mov	r2, r4
	movt	r0, #:upper16:.LC101
	bl	printk
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1273:
	.align	2
.L1272:
	.word	.LANCHOR3+316
	.fnend
	.size	sua_version_info_show, .-sua_version_info_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_product_show, %function
mass_storage_product_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r1, #:lower16:.LC82
	mov	r0, r4
	movt	r1, #:upper16:.LC82
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r2, [r3, #96]
	add	r2, r2, #218
	b	sprintf
	.fnend
	.size	mass_storage_product_show, .-mass_storage_product_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_vendor_show, %function
mass_storage_vendor_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r1, #:lower16:.LC82
	mov	r0, r4
	movt	r1, #:upper16:.LC82
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r2, [r3, #96]
	add	r2, r2, #209
	b	sprintf
	.fnend
	.size	mass_storage_vendor_show, .-mass_storage_vendor_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_instances_show, %function
acm_instances_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r1, #:lower16:.LC77
	mov	r0, r4
	movt	r1, #:upper16:.LC77
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r2, [r3]
	b	sprintf
	.fnend
	.size	acm_instances_show, .-acm_instances_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_alsa_show, %function
midi_alsa_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r1, #:lower16:.LC86
	mov	r0, r4
	movt	r1, #:upper16:.LC86
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldrd	r2, [r3]
	b	sprintf
	.fnend
	.size	midi_alsa_show, .-midi_alsa_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_unbind, %function
composite_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	add	r7, r0, #32
	str	r8, [sp, #16]
	mov	r8, r0
	mov	r0, r7
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	ldr	r3, [r0, #12]
	mov	r4, r0
	cmp	r3, #0
	bne	.L1299
.L1283:
	ldr	r0, [r4, #36]
	add	r6, r4, #36
	cmp	r6, r0
	beq	.L1284
.L1285:
	sub	r5, r0, #28
	bl	list_del
	mov	r1, r5
	mov	r0, r4
	bl	unbind_config
	ldr	r0, [r4, #36]
	cmp	r6, r0
	bne	.L1285
.L1284:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r3, [r5, #2476]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L1286
	mov	r0, r4
	blx	r3
.L1286:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L1287
	ldr	r0, [r3]
	bl	kfree
	ldr	r0, [r8, #4]
	ldr	r1, [r4, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L1287:
	ldr	r1, .L1300
	mov	r0, r7
	bl	device_remove_file
	mov	r0, r4
	bl	kfree
	mov	r0, r7
	mov	r1, #0
	bl	dev_set_drvdata
	mov	r3, #0
	str	r3, [r5, #2476]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1299:
	movw	r0, #:lower16:.LC102
	movw	r1, #1556
	movt	r0, #:upper16:.LC102
	bl	warn_slowpath_null
	b	.L1283
.L1301:
	.align	2
.L1300:
	.word	.LANCHOR0+156
	.fnend
	.size	composite_unbind, .-composite_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_bind, %function
composite_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	movw	r6, #:lower16:kmalloc_caches
	movt	r6, #:upper16:kmalloc_caches
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r6, #28]
	.pad #8
	sub	sp, sp, #8
	cmp	r0, #0
	beq	.L1319
	mov	r2, #68
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L1348
.L1303:
	mov	r3, #0
	add	r7, r5, #32
	str	r5, [r4]
	mov	r1, r4
	mov	r0, r7
	str	r3, [r4, #60]
	bl	dev_set_drvdata
	add	r3, r4, #36
	mov	r1, #208
	str	r3, [r4, #36]
	str	r3, [r4, #40]
	ldr	r0, [r5, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	mov	r8, r0
	str	r0, [r4, #4]
	beq	.L1305
	ldr	r0, [r6, #48]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L1306
	mov	r2, #4096
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L1306:
	str	r0, [r8]
	ldr	r2, [r4, #4]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L1305
	movw	r3, #:lower16:composite_setup_complete
	movw	r6, #:lower16:.LANCHOR1
	movt	r3, #:upper16:composite_setup_complete
	movt	r6, #:upper16:.LANCHOR1
	ldr	r0, [r6, #2476]
	str	r3, [r2, #28]
	ldr	r2, [r5, #4]
	mov	r3, #4096
	str	r4, [r2]
	ldr	r1, [r4]
	str	r3, [r4, #8]
	str	r0, [r4, #44]
	ldr	r3, [r1, #8]!
	cmp	r1, r3
	sub	r3, r3, #12
	beq	.L1307
	mov	r0, #0
.L1308:
	ldr	r2, [r3, #12]
	str	r0, [r3]
	cmp	r1, r2
	sub	r3, r2, #12
	bne	.L1308
.L1307:
	mov	r2, #0
	mov	r0, r4
	ldr	r3, [r6, #3232]
	str	r2, [r6, #3228]
	blx	r3
	subs	r8, r0, #0
	bge	.L1349
.L1309:
	mov	r0, r5
	bl	composite_unbind
.L1302:
	mov	r0, r8
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1305:
	mvn	r8, #11
	b	.L1309
.L1319:
	mov	r4, #16
	b	.L1303
.L1348:
	mvn	r8, #11
	b	.L1302
.L1349:
	ldr	r1, [r6, #2476]
	movw	r3, #3236
	ldrh	r2, [r6, r3]
	movw	r3, #3238
	ldrh	r3, [r6, r3]
	ldr	r1, [r1, #12]
	cmp	r2, #0
	ldr	lr, [r1, #4]	@ unaligned
	ldr	ip, [r1, #8]	@ unaligned
	ldr	r0, [r1, #12]	@ unaligned
	ldr	r8, [r1]	@ unaligned
	str	r8, [r4, #17]	@ unaligned
	str	lr, [r4, #21]	@ unaligned
	str	ip, [r4, #25]	@ unaligned
	str	r0, [r4, #29]	@ unaligned
	ldrh	r1, [r1, #16]	@ unaligned
	movw	r0, #:lower16:.LC103
	strhne	r2, [r4, #25]	@ unaligned
	cmp	r3, #0
	movt	r0, #:upper16:.LC103
	strhne	r3, [r4, #27]	@ unaligned
	strh	r1, [r4, #33]	@ unaligned
	movw	r1, #3240
	ldrh	r1, [r6, r1]
	cmp	r1, #0
	strhne	r1, [r4, #29]	@ unaligned
	ldr	r1, .L1352
	bl	printk
	movw	r3, #3240
	movw	r0, #:lower16:.LC104
	ldr	r1, .L1352
	ldrh	r2, [r6, r3]
	movt	r0, #:upper16:.LC104
	bl	printk
	ldr	r3, [r6, #3244]
	cmp	r3, #0
	beq	.L1350
.L1313:
	add	r1, r4, #31
	mov	r0, r4
	bl	override_id
	strb	r0, [r4, #49]
.L1314:
	movw	r0, #:lower16:.LC106
	ldr	r2, .L1352+4
	movt	r0, #:upper16:.LC106
	ldr	r1, .L1352
	bl	printk
	ldr	r3, [r6, #3300]
	cmp	r3, #0
	beq	.L1351
.L1315:
	add	r1, r4, #32
	mov	r0, r4
	bl	override_id
	strb	r0, [r4, #50]
.L1316:
	ldr	r3, [r6, #3304]
	cmp	r3, #0
	beq	.L1317
	add	r1, r4, #33
	mov	r0, r4
	bl	override_id
	strb	r0, [r4, #51]
.L1317:
	ldr	r3, [r6, #2476]
	ldrb	r3, [r3, #24]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L1318
	ldrb	r3, [r4, #33]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L1318
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC107
	movt	r1, #:upper16:.LC107
	add	r0, r0, #32
	bl	dev_warn
.L1318:
	mov	r0, r7
	ldr	r1, .L1352+8
	bl	device_create_file
	subs	r8, r0, #0
	bne	.L1309
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC108
	ldr	r3, [r6, #2476]
	movt	r1, #:upper16:.LC108
	add	r0, r0, #32
	ldr	r2, [r3]
	bl	_dev_info
	b	.L1302
.L1351:
	ldrb	r3, [r4, #32]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L1316
	ldr	r3, [r6, #2476]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	bne	.L1315
	b	.L1316
.L1350:
	ldrb	r3, [r4, #31]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L1314
	ldr	r3, [r6, #2476]
	ldr	r3, [r3, #8]
	cmp	r3, #0
	bne	.L1313
	ldrb	r3, [r6, #3248]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L1313
	ldr	r3, .L1352+12
	movw	r2, #:lower16:.LC105
	mov	r1, #50
	ldr	ip, [r5, #28]
	movt	r2, #:upper16:.LC105
	ldr	r0, .L1352+4
	stm	sp, {r3, ip}
	sub	r3, r3, #130
	bl	snprintf
	b	.L1313
.L1353:
	.align	2
.L1352:
	.word	.LANCHOR3+340
	.word	.LANCHOR1+3248
	.word	.LANCHOR0+156
	.word	init_uts_ns+134
	.fnend
	.size	composite_bind, .-composite_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_qc_stop, %function
eth_qc_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r0, #576]
	ldr	r6, [r0, #1156]
	cmp	r1, #0
	beq	.L1366
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
.L1357:
	add	r5, r4, #1152
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1156]
	mov	r7, r0
	cmp	r3, #0
	beq	.L1356
	ldr	r3, [r6, #116]
	cmp	r3, #0
	beq	.L1356
	mov	r0, r6
	blx	r3
.L1356:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1366:
	movw	r0, #:lower16:.LC109
	movw	r1, #1847
	movt	r0, #:upper16:.LC109
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC110
	movt	r0, #:upper16:.LC110
	bl	printk
	b	.L1357
	.fnend
	.size	eth_qc_stop, .-eth_qc_stop
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_ctrl_read_complete, %function
qdss_ctrl_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1026
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r5, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, r2]
	ldr	r4, [r0]
	ldr	r6, [r1, #32]
	tst	r2, #4
	bne	.L1374
.L1368:
	ldr	r3, [r5, #48]
	add	r7, r4, #188
	mov	r0, r7
	str	r3, [r6, #8]
	ldr	r3, [r5, #44]
	str	r3, [r6, #12]
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	add	r2, r4, #140
	ldr	r1, [r4, #144]
	add	r0, r5, #36
	bl	__list_add
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	lr, [r4, #124]
	cmp	lr, #0
	beq	.L1367
	mov	r2, r6
	mov	ip, lr
	ldr	r0, [r4, #128]
	ldrd	r4, [sp]
	mov	r3, #0
	mov	r1, #2
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	ip	@ indirect register sibling call
.L1374:
	movw	r1, #:lower16:.LC111
	add	r0, r3, #1008
	movt	r1, #:upper16:.LC111
	bl	__dynamic_pr_debug
	b	.L1368
.L1367:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	qdss_ctrl_read_complete, .-qdss_ctrl_read_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_ctrl_write_complete, %function
qdss_ctrl_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1050
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r4, r1
	str	r8, [sp, #16]
	mov	r7, r0
	str	lr, [sp, #20]
	ldrh	r3, [r3, r2]
	ldr	r5, [r0]
	ldr	r6, [r1, #32]
	tst	r3, #4
	bne	.L1387
.L1376:
	ldr	r3, [r4, #44]
	cmp	r3, #0
	bne	.L1377
	ldrh	r3, [r7, #20]
	ldr	r2, [r4, #4]
	cmp	r2, r3
	bcc	.L1377
	udiv	r1, r2, r3
	mls	r3, r3, r1, r2
	cmp	r3, #0
	bne	.L1377
	ldr	r0, [r4, #48]
	str	r3, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	str	r0, [r6, #8]
	ldr	r3, [r4, #44]
	str	r3, [r6, #12]
	ldr	r0, [r5, #104]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	r3, [r0, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #16]
	bx	r3
.L1377:
	add	r7, r5, #188
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	add	r2, r5, #148
	ldr	r1, [r5, #152]
	add	r0, r4, #36
	bl	__list_add
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L1388
.L1378:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	lr, [r5, #124]
	cmp	lr, #0
	beq	.L1375
	mov	r2, r6
	mov	ip, lr
	ldr	r0, [r5, #128]
	ldrd	r4, [sp]
	mov	r3, #0
	mov	r1, #4
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	ip	@ indirect register sibling call
.L1388:
	ldr	r3, [r4, #48]
	str	r3, [r6, #8]
	ldr	r3, [r4, #44]
	str	r3, [r6, #12]
	b	.L1378
.L1387:
	movw	r1, #:lower16:.LC112
	ldr	r0, .L1389
	movt	r1, #:upper16:.LC112
	bl	__dynamic_pr_debug
	b	.L1376
.L1375:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1390:
	.align	2
.L1389:
	.word	.LANCHOR2+1032
	.fnend
	.size	qdss_ctrl_write_complete, .-qdss_ctrl_write_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_disable, %function
audio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1074
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR2
	str	lr, [sp, #4]
	mov	r4, r0
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L1401
.L1392:
	ldrb	r3, [r4, #152]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L1391
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	strb	r3, [r4, #152]
.L1391:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1401:
	movw	r1, #:lower16:.LC113
	add	r0, r3, #1056
	movt	r1, #:upper16:.LC113
	bl	__dynamic_pr_debug
	b	.L1392
	.fnend
	.size	audio_disable, .-audio_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_start_rx, %function
gsmd_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	subs	r5, r0, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	beq	.L1417
	add	r6, r5, #4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #68]
	mov	r7, r0
	cmp	r3, #0
	beq	.L1418
	add	r9, r5, #12
	mov	r10, #2048
	ldr	r8, [r3, #92]
	b	.L1406
.L1420:
	ldr	r4, [r5, #12]
	cmp	r9, r4
	mov	r0, r4
	sub	fp, r4, #36
	beq	.L1405
	bl	list_del
	mov	r1, r7
	mov	r0, r6
	str	r10, [r4, #-32]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r8, #8]
	mov	r1, fp
	mov	r2, #208
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	fp, #0
	mov	r7, r0
	bne	.L1419
.L1406:
	ldr	r3, [r5, #72]
	ldr	r3, [r3, #8]
	tst	r3, #1
	bne	.L1420
.L1405:
	mov	r1, r7
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L1418:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1098
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	beq	.L1405
	movw	r1, #:lower16:.LC115
	ldr	r2, .L1421
	movt	r1, #:upper16:.LC115
	ldr	r0, .L1421+4
	bl	__dynamic_pr_debug
	b	.L1405
.L1419:
	movw	r0, #:lower16:.LC116
	mov	r2, r5
	ldr	r1, .L1421
	ldr	r3, [r5]
	movt	r0, #:upper16:.LC116
	bl	printk
	mov	r2, r9
	mov	r0, r4
	ldr	r1, [r5, #16]
	bl	__list_add
	b	.L1405
.L1417:
	ldr	r1, .L1421
	movw	r0, #:lower16:.LC114
	movt	r0, #:upper16:.LC114
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L1422:
	.align	2
.L1421:
	.word	.LANCHOR3+356
	.word	.LANCHOR2+1080
	.fnend
	.size	gsmd_start_rx, .-gsmd_start_rx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_stop, %function
gbam_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L1445
	add	r5, r0, #8
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L1446
	movw	r3, #:lower16:.LANCHOR2
	movw	r1, #1146
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r1]
	tst	r3, #4
	bne	.L1447
.L1429:
	ldr	r0, [r2, #84]
	ldr	r1, [r4, #116]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	subs	r2, r0, #0
	bne	.L1448
.L1430:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L1445:
	add	r5, r0, #4
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L1449
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #1122
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	bne	.L1450
.L1426:
	ldr	r0, [r3, #88]
	ldr	r1, [r4, #112]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	subs	r2, r0, #0
	beq	.L1430
	movw	r0, #:lower16:.LC119
	ldr	r1, .L1451
	movt	r0, #:upper16:.LC119
	bl	printk
	b	.L1430
.L1447:
	movw	r1, #:lower16:.LC118
	ldr	r2, .L1451+4
	movt	r1, #:upper16:.LC118
	ldr	r0, .L1451+8
	bl	__dynamic_pr_debug
	ldr	r2, [r4, #12]
	b	.L1429
.L1450:
	movw	r1, #:lower16:.LC118
	add	r0, r0, #1104
	ldr	r2, .L1451
	movt	r1, #:upper16:.LC118
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #12]
	b	.L1426
.L1449:
	mov	r0, r5
	bl	_raw_spin_unlock
	ldr	r1, .L1451
	movw	r0, #:lower16:.LC117
.L1444:
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC117
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L1446:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC117
	ldr	r1, .L1451+4
	b	.L1444
.L1448:
	movw	r0, #:lower16:.LC119
	ldr	r1, .L1451+4
	movt	r0, #:upper16:.LC119
	bl	printk
	b	.L1430
.L1452:
	.align	2
.L1451:
	.word	.LANCHOR3+372
	.word	.LANCHOR3+396
	.word	.LANCHOR2+1128
	.fnend
	.size	gbam_stop, .-gbam_stop
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_wake_cb, %function
gbam_wake_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1170
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR2
	str	lr, [sp, #4]
	ldr	r4, [r0, #16]
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L1460
.L1454:
	ldr	r3, [r4, #128]
	ldr	r0, [r3]
	ldr	r3, [r0]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L1455
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	bx	r3
.L1460:
	movw	r1, #:lower16:.LC120
	add	r0, r3, #1152
	ldr	r2, .L1461
	movt	r1, #:upper16:.LC120
	bl	__dynamic_pr_debug
	b	.L1454
.L1455:
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #94
	ldr	pc, [sp], #4
.L1462:
	.align	2
.L1461:
	.word	.LANCHOR3+420
	.fnend
	.size	gbam_wake_cb, .-gbam_wake_cb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_endless_tx_complete, %function
gbam_endless_tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1194
	movt	r3, #:upper16:.LANCHOR2
	mov	r0, r1
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L1465
	bx	lr
.L1465:
	movw	r1, #:lower16:.LC121
	ldr	r3, [r0, #44]
	movt	r1, #:upper16:.LC121
	ldr	r2, .L1466
	ldr	r0, .L1466+4
	b	__dynamic_pr_debug
.L1467:
	.align	2
.L1466:
	.word	.LANCHOR3+436
	.word	.LANCHOR2+1176
	.fnend
	.size	gbam_endless_tx_complete, .-gbam_endless_tx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_endless_rx_complete, %function
gbam_endless_rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #1218
	movt	r0, #:upper16:.LANCHOR2
	mov	r2, r1
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L1470
	bx	lr
.L1470:
	movw	r1, #:lower16:.LC121
	ldr	r3, [r2, #44]
	add	r0, r0, #1200
	movt	r1, #:upper16:.LC121
	ldr	r2, .L1471
	b	__dynamic_pr_debug
.L1472:
	.align	2
.L1471:
	.word	.LANCHOR3+464
	.fnend
	.size	gbam_endless_rx_complete, .-gbam_endless_rx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_release, %function
rmnet_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1242
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrh	r3, [r3, r2]
	ldr	r4, [r1, #124]
	tst	r3, #4
	bne	.L1479
.L1474:
	add	r6, r4, #52
	mov	r5, #0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	strb	r5, [r4, #4]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	add	r3, r4, #16
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1479:
	movw	r1, #:lower16:.LC122
	ldr	r0, .L1480
	movt	r1, #:upper16:.LC122
	bl	__dynamic_pr_debug
	b	.L1474
.L1481:
	.align	2
.L1480:
	.word	.LANCHOR2+1224
	.fnend
	.size	rmnet_ctrl_release, .-rmnet_ctrl_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_send_cpkt_tomodem, %function
ghsic_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	ip, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r3, #1016]
	cmp	r0, r1
	bcs	.L1493
	mov	r6, r2
	mov	r2, #104
	mla	r3, r2, r0, r3
	ldr	r5, [r3, #1020]
	cmp	r5, #0
	beq	.L1494
	mov	r1, #32
	mov	r0, r6
	bl	__kmalloc
	subs	r7, r0, #0
	beq	.L1488
	mov	r1, r4
	mov	r2, r6
	bl	memcpy
	ldr	r0, [r5, #84]
	ands	r4, r0, #1
	beq	.L1495
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #1266
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L1496
.L1487:
	ldr	r3, [r5, #96]
	mov	r4, #0
	add	r3, r3, #1
	str	r3, [r5, #96]
.L1482:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1495:
	ldr	r3, [r5, #104]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r5, #104]
	bl	kfree
	b	.L1482
.L1496:
	movw	r1, #:lower16:.LC124
	mov	r3, r6
	ldr	r2, .L1497
	movt	r1, #:upper16:.LC124
	add	r0, r0, #1248
	bl	__dynamic_pr_debug
	b	.L1487
.L1488:
	mvn	r4, #11
	b	.L1482
.L1493:
	movw	r0, #:lower16:.LC123
	mov	r2, ip
	ldr	r1, .L1497
	movt	r0, #:upper16:.LC123
	mvn	r4, #18
	bl	printk
	b	.L1482
.L1494:
	movw	r0, #:lower16:.LC114
	ldr	r1, .L1497
	mvn	r4, #18
	movt	r0, #:upper16:.LC114
	bl	printk
	b	.L1482
.L1498:
	.align	2
.L1497:
	.word	.LANCHOR3+492
	.fnend
	.size	ghsic_send_cpkt_tomodem, .-ghsic_send_cpkt_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_status, %function
ghsic_ctrl_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1290
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	mov	r5, r0
	str	lr, [sp, #12]
	ldrh	r3, [r3, r2]
	mov	r4, r1
	.pad #24
	sub	sp, sp, #24
	tst	r3, #4
	bne	.L1526
.L1500:
	ldr	r0, [r5, #8]
	str	r4, [r5, #92]
	cmp	r0, #0
	beq	.L1499
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L1499
	mov	r1, r4
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	bx	r3
.L1499:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1526:
	tst	r1, #1
	movw	r1, #:lower16:.LC125
	ldr	r2, .L1527
	movne	r3, #43
	moveq	r3, #45
	ldr	r0, .L1527+4
	tst	r4, #2
	movt	r1, #:upper16:.LC125
	movne	lr, #43
	moveq	lr, #45
	tst	r4, #4
	movne	r6, #43
	moveq	r6, #45
	str	lr, [sp]
	tst	r4, #8
	movne	ip, #43
	moveq	ip, #45
	tst	r4, #16
	movne	lr, #43
	moveq	lr, #45
	stmib	sp, {r6, ip}
	tst	r4, #32
	movne	ip, #43
	moveq	ip, #45
	str	lr, [sp, #12]
	tst	r4, #64
	str	ip, [sp, #16]
	movne	ip, #43
	moveq	ip, #45
	str	ip, [sp, #20]
	bl	__dynamic_pr_debug
	b	.L1500
.L1528:
	.align	2
.L1527:
	.word	.LANCHOR3+516
	.word	.LANCHOR2+1272
	.fnend
	.size	ghsic_ctrl_status, .-ghsic_ctrl_status
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_send_cpkt_tomodem, %function
ghsuart_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	ip, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [ip, #1856]
	mov	lr, r0
	cmp	r0, r1
	bcs	.L1544
	mov	r3, #84
	mla	ip, r3, r0, ip
	ldr	r4, [ip, #1860]
	cmp	r4, #0
	beq	.L1545
	ldr	r0, [r4, #88]
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	beq	.L1546
	mov	r1, #32
	mov	r0, r2
	mov	r5, r2
	bl	__kmalloc
	subs	r7, r0, #0
	mvneq	r0, #11
	beq	.L1529
	mov	r1, r6
	mov	r2, r5
	bl	memcpy
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #1314
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L1547
.L1534:
	ldr	r1, .L1549
	ldr	r0, .L1549+4
	bl	___ratelimit
	cmp	r0, #0
	bne	.L1548
.L1535:
	ldr	r3, [r4, #104]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #104]
	bl	kfree
	mvn	r0, #18
.L1529:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1546:
	ldr	r3, [r4, #104]
	add	r3, r3, #1
	str	r3, [r4, #104]
	b	.L1529
.L1547:
	movw	r1, #:lower16:.LC124
	mov	r3, r5
	ldr	r2, .L1549
	movt	r1, #:upper16:.LC124
	add	r0, r0, #1296
	bl	__dynamic_pr_debug
	b	.L1534
.L1545:
	movw	r0, #:lower16:.LC114
	ldr	r1, .L1549
	movt	r0, #:upper16:.LC114
	bl	printk
	mvn	r0, #18
	b	.L1529
.L1544:
	movw	r0, #:lower16:.LC123
	mov	r2, lr
	ldr	r1, .L1549
	movt	r0, #:upper16:.LC123
	bl	printk
	mvn	r0, #18
	b	.L1529
.L1548:
	movw	r0, #:lower16:.LC126
	mvn	r2, #18
	ldr	r1, .L1549
	movt	r0, #:upper16:.LC126
	bl	printk
	b	.L1535
.L1550:
	.align	2
.L1549:
	.word	.LANCHOR3+536
	.word	.LANCHOR0+172
	.fnend
	.size	ghsuart_send_cpkt_tomodem, .-ghsuart_send_cpkt_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_ep0out_complete, %function
mbim_ep0out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r3, #0
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	ldr	r5, [r1, #32]
	ldr	r2, [r1, #44]
	str	r3, [r1, #32]
	cmp	r2, r3
	bne	.L1552
	ldr	r0, [r1, #4]
	ldr	r3, [r1, #48]
	cmp	r3, r0
	bne	.L1552
	cmp	r3, #4
	beq	.L1568
	cmp	r3, #8
	bne	.L1558
	ldr	r3, [r1]
	ldr	r4, [r3]	@ unaligned
	cmp	r4, #2048
	bcc	.L1559
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	ldr	r2, [r2, #200]
	cmp	r2, r4
	bcc	.L1559
	ldrb	r2, [r3, #5]	@ zero_extendqisi2
	ldrb	r3, [r3, #4]	@ zero_extendqisi2
	orr	r3, r3, r2, lsl #8
	strh	r3, [r5, #228]	@ movhi
.L1557:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1338
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L1569
.L1561:
	str	r4, [r5, #224]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1568:
	ldr	r3, [r1]
	ldr	r4, [r3]	@ unaligned
	cmp	r4, #2048
	bcc	.L1559
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #200]
	cmp	r3, r4
	bcs	.L1557
.L1559:
	movw	r0, #:lower16:.LC128
	mov	r2, r4
	ldr	r1, .L1570
	movt	r0, #:upper16:.LC128
	bl	printk
.L1554:
	ldr	r3, [r6, #8]
	mov	r0, r6
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
	ldr	r2, .L1570
	movw	r0, #:lower16:.LC131
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC131
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	mov	r1, r2
	b	printk
.L1569:
	movw	r1, #:lower16:.LC130
	mov	r3, r4
	ldr	r2, .L1570
	movt	r1, #:upper16:.LC130
	ldr	r0, .L1570+4
	bl	__dynamic_pr_debug
	b	.L1561
.L1552:
	movw	r0, #:lower16:.LC127
	ldr	r1, .L1570
	movt	r0, #:upper16:.LC127
	bl	printk
	b	.L1554
.L1558:
	movw	r0, #:lower16:.LC129
	ldr	r1, .L1570
	movt	r0, #:upper16:.LC129
	bl	printk
	b	.L1554
.L1571:
	.align	2
.L1570:
	.word	.LANCHOR3+564
	.word	.LANCHOR2+1320
	.fnend
	.size	mbim_ep0out_complete, .-mbim_ep0out_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_stop, %function
bam_data_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #4]
	beq	.L1596
	cmp	r3, #0
	beq	.L1572
	movw	r2, #:lower16:.LANCHOR2
	movw	r1, #1386
	movt	r2, #:upper16:.LANCHOR2
	ldrh	r2, [r2, r1]
	tst	r2, #4
	bne	.L1597
.L1578:
	ldr	r0, [r3, #8]
	ldr	r1, [r4, #40]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	subs	r3, r0, #0
	bne	.L1598
.L1572:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1596:
	cmp	r3, #0
	beq	.L1572
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #1362
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	bne	.L1599
.L1576:
	ldr	r0, [r3, #12]
	ldr	r1, [r4, #36]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	subs	r3, r0, #0
	ldrne	r2, .L1600
	bne	.L1595
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1598:
	ldr	r2, .L1600+4
.L1595:
	movw	r0, #:lower16:.LC133
	ldr	r4, [sp]
	mov	r1, r2
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC133
	add	sp, sp, #8
	b	printk
.L1597:
	ldr	r3, .L1600+4
	movw	r1, #:lower16:.LC132
	movt	r1, #:upper16:.LC132
	ldr	r0, .L1600+8
	mov	r2, r3
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #4]
	b	.L1578
.L1599:
	ldr	r3, .L1600
	movw	r1, #:lower16:.LC132
	add	r0, r0, #1344
	movt	r1, #:upper16:.LC132
	mov	r2, r3
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #4]
	b	.L1576
.L1601:
	.align	2
.L1600:
	.word	.LANCHOR3+588
	.word	.LANCHOR3+616
	.word	.LANCHOR2+1368
	.fnend
	.size	bam_data_stop, .-bam_data_stop
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_endless_tx_complete, %function
bam_data_endless_tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #1410
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bxeq	lr
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	r3, .L1611
	.pad #12
	sub	sp, sp, #12
	ldr	r2, [r1, #44]
	movw	r1, #:lower16:.LC134
	add	r0, r0, #1392
	movt	r1, #:upper16:.LC134
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L1612:
	.align	2
.L1611:
	.word	.LANCHOR3+644
	.fnend
	.size	bam_data_endless_tx_complete, .-bam_data_endless_tx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_endless_rx_complete, %function
bam_data_endless_rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1434
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bxeq	lr
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	r3, .L1622
	.pad #12
	sub	sp, sp, #12
	ldr	r2, [r1, #44]
	movw	r1, #:lower16:.LC134
	movt	r1, #:upper16:.LC134
	ldr	r0, .L1622+4
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L1623:
	.align	2
.L1622:
	.word	.LANCHOR3+676
	.word	.LANCHOR2+1416
	.fnend
	.size	bam_data_endless_rx_complete, .-bam_data_endless_rx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_setup, %function
f_audio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r2, [r1]	@ zero_extendqisi2
	.pad #52
	sub	sp, sp, #52
	ldrh	r1, [r1, #4]	@ unaligned
	ldr	r3, [r0, #20]
	cmp	r2, #34
	str	r1, [sp, #16]
	ldrh	r1, [r4, #2]	@ unaligned
	ldr	fp, [r3, #24]
	str	r1, [sp, #20]
	ldrh	r3, [r4, #6]	@ unaligned
	ldr	r6, [fp, #4]
	str	r3, [sp, #24]
	beq	.L1626
	bls	.L1718
	cmp	r2, #161
	beq	.L1629
	cmp	r2, #162
	bne	.L1625
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #1602
	movt	r5, #:upper16:.LANCHOR2
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L1719
	ldr	r9, [sp, #16]
	mov	r3, r1
	str	r6, [sp, #32]
	ldr	r2, [sp, #24]
	str	r2, [sp, #28]
.L1662:
	movw	r2, #1626
	and	r9, r9, #127
	ldrb	r8, [r4, #1]	@ zero_extendqisi2
	ldrh	r2, [r5, r2]
	lsr	r10, r3, #8
	tst	r2, #4
	bne	.L1720
.L1663:
	ldr	r3, [r7, #260]!
	cmp	r7, r3
	beq	.L1652
	ldrb	r2, [r3, #16]	@ zero_extendqisi2
	cmp	r2, r9
	bne	.L1674
.L1666:
	ldr	r2, [r3, #8]!
	cmp	r3, r2
	beq	.L1652
	ldrb	r1, [r2, #12]	@ zero_extendqisi2
	cmp	r1, r10
	beq	.L1669
.L1673:
	ldr	r2, [r2]
	cmp	r3, r2
	beq	.L1652
	ldrb	r1, [r2, #12]	@ zero_extendqisi2
	cmp	r10, r1
	bne	.L1673
.L1669:
	and	r8, r8, #15
	sub	r3, r8, #1
	cmp	r3, #3
	bhi	.L1652
	ldr	r3, [sp, #32]
	add	r8, r8, #4
	add	r1, sp, #48
	ldr	r0, [r3]
	ldr	r3, [r2, r8, lsl #2]
	ldr	r2, [sp, #28]
	str	r3, [r1, #-4]!
	mov	r8, r2
	bl	memcpy
	movw	r3, #1650
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L1675
.L1723:
	ldr	r2, [sp, #20]
	movw	r1, #:lower16:.LC144
	ldrb	r3, [r4]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC144
	ldr	r0, .L1729
	str	r2, [sp, #4]
	ldr	r2, [sp, #16]
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	str	r2, [sp, #8]
	ldr	r2, [sp, #24]
	str	ip, [sp]
	str	r2, [sp, #12]
	ldr	r2, .L1729+4
	bl	__dynamic_pr_debug
	b	.L1675
.L1629:
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #1506
	movt	r5, #:upper16:.LANCHOR2
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L1721
	ldr	r0, [sp, #16]
	mov	r10, r6
	str	r1, [sp, #32]
	ldr	r3, [sp, #24]
	mov	r8, r3
	str	r3, [sp, #28]
.L1641:
	movw	r3, #1530
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	lsr	r0, r0, #8
	ldrh	r3, [r5, r3]
	uxtb	r9, r0
	str	r2, [sp, #36]
	mvn	r2, #94
	tst	r3, #4
	str	r2, [sp, #44]
	bne	.L1722
.L1642:
	mov	r1, r7
	ldr	r3, [r1, #252]!
	cmp	r1, r3
	beq	.L1643
	ldrb	r2, [r3, #16]	@ zero_extendqisi2
	cmp	r2, r9
	bne	.L1645
	b	.L1644
.L1648:
	ldrb	r2, [r3, #16]	@ zero_extendqisi2
	cmp	r9, r2
	beq	.L1644
.L1645:
	ldr	r3, [r3]
	cmp	r1, r3
	bne	.L1648
.L1643:
	movw	r3, #:lower16:f_audio_complete
	add	r1, sp, #44
	ldr	r0, [r10]
	movt	r3, #:upper16:f_audio_complete
	ldr	r2, [sp, #28]
	str	r3, [r10, #28]
	str	r7, [r10, #32]
	bl	memcpy
.L1640:
	movw	r3, #1650
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L1723
.L1675:
	ldrb	r3, [r6, #26]	@ zero_extendqisi2
	str	r8, [r6, #4]
	mov	r1, r6
	mov	r2, #32
	orr	r3, r3, #2
	strb	r3, [r6, #26]
	ldr	r3, [fp]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L1724
.L1624:
	mov	r0, r4
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1667:
	ldrb	r2, [r3, #16]	@ zero_extendqisi2
	cmp	r9, r2
	beq	.L1666
.L1674:
	ldr	r3, [r3]
	cmp	r7, r3
	bne	.L1667
	b	.L1652
.L1718:
	cmp	r2, #33
	bne	.L1625
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #1458
	movt	r5, #:upper16:.LANCHOR2
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L1725
	ldr	r0, [sp, #16]
	mov	r10, r6
	str	r1, [sp, #32]
	ldr	r8, [sp, #24]
.L1631:
	movw	r2, #1482
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	lsr	r0, r0, #8
	ldrh	r2, [r5, r2]
	uxtb	r9, r0
	and	r1, r3, #15
	tst	r2, #4
	str	r1, [sp, #28]
	bne	.L1726
.L1632:
	mov	r1, r7
	ldr	r3, [r1, #252]!
	cmp	r3, r1
	beq	.L1633
	ldrb	r2, [r3, #16]	@ zero_extendqisi2
	cmp	r2, r9
	bne	.L1635
	b	.L1634
.L1639:
	ldrb	r2, [r3, #16]	@ zero_extendqisi2
	cmp	r9, r2
	beq	.L1634
.L1635:
	ldr	r3, [r3]
	cmp	r3, r1
	bne	.L1639
.L1633:
	ldr	r2, [sp, #28]
	movw	r3, #:lower16:f_audio_complete
	movt	r3, #:upper16:f_audio_complete
	strb	r2, [r7, #268]
	str	r3, [r10, #28]
	str	r7, [r10, #32]
	b	.L1640
.L1626:
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #1554
	movt	r5, #:upper16:.LANCHOR2
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L1727
	ldr	r0, [sp, #16]
	mov	r3, r1
	str	r6, [sp, #32]
	ldr	r2, [sp, #24]
	str	r2, [sp, #28]
.L1649:
	movw	r2, #1578
	and	r8, r0, #127
	ldrb	r10, [r4, #1]	@ zero_extendqisi2
	ldrh	r2, [r5, r2]
	lsr	r9, r3, #8
	tst	r2, #4
	bne	.L1728
.L1650:
	mov	r2, r7
	ldr	r3, [r2, #260]!
	cmp	r2, r3
	beq	.L1652
	ldrb	r1, [r3, #16]	@ zero_extendqisi2
	cmp	r1, r8
	bne	.L1661
.L1653:
	ldr	r2, [r3, #8]!
	cmp	r3, r2
	beq	.L1652
	ldrb	r1, [r2, #12]	@ zero_extendqisi2
	cmp	r1, r9
	beq	.L1656
.L1660:
	ldr	r2, [r2]
	cmp	r3, r2
	beq	.L1652
	ldrb	r1, [r2, #12]	@ zero_extendqisi2
	cmp	r9, r1
	bne	.L1660
.L1656:
	ands	r10, r10, #15
	beq	.L1658
	cmp	r10, #4
	bls	.L1659
	cmp	r10, #5
	bne	.L1658
.L1652:
	movw	r0, #:lower16:.LC146
	ldr	r1, .L1729+4
	mvn	r4, #94
	movt	r0, #:upper16:.LC146
	bl	printk
	b	.L1624
.L1654:
	ldrb	r1, [r3, #16]	@ zero_extendqisi2
	cmp	r8, r1
	beq	.L1653
.L1661:
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L1654
	b	.L1652
.L1644:
	ldr	r0, [r3, #8]!
	cmp	r0, r3
	beq	.L1643
	ldr	r2, [sp, #32]
	lsr	r1, r2, #8
	b	.L1647
.L1646:
	ldr	r0, [r0]
	cmp	r3, r0
	beq	.L1643
.L1647:
	ldrb	r2, [r0, #12]	@ zero_extendqisi2
	cmp	r2, r1
	bne	.L1646
	ldr	r2, [r0, #40]
	cmp	r2, #0
	beq	.L1646
	ldr	r3, [sp, #36]
	and	r1, r3, #15
	blx	r2
	str	r0, [sp, #44]
	b	.L1643
.L1634:
	ldr	r2, [r3, #8]!
	cmp	r2, r3
	beq	.L1633
	ldr	r0, [sp, #32]
	ldrb	r1, [r2, #12]	@ zero_extendqisi2
	lsr	r0, r0, #8
	cmp	r1, r0
	bne	.L1637
	b	.L1636
.L1638:
	ldrb	r1, [r2, #12]	@ zero_extendqisi2
	cmp	r0, r1
	beq	.L1636
.L1637:
	ldr	r2, [r2]
	cmp	r2, r3
	bne	.L1638
	b	.L1633
.L1659:
	movw	r3, #:lower16:audio_set_endpoint_complete
	strb	r10, [r7, #268]
	ldr	r8, [sp, #28]
	str	r2, [r7, #272]
	ldr	r2, [sp, #32]
	movt	r3, #:upper16:audio_set_endpoint_complete
	str	r3, [r2, #28]
	str	r7, [r2, #32]
	b	.L1640
.L1636:
	str	r2, [r7, #272]
	b	.L1633
.L1725:
	movw	r1, #:lower16:.LC135
	ldr	r2, .L1729+4
	add	r0, r5, #1440
	movt	r1, #:upper16:.LC135
	bl	__dynamic_pr_debug
	ldr	r3, [r7, #20]
	ldrh	r2, [r4, #2]	@ unaligned
	ldrh	r0, [r4, #4]	@ unaligned
	ldrh	r8, [r4, #6]	@ unaligned
	ldr	r3, [r3, #24]
	str	r2, [sp, #32]
	ldr	r10, [r3, #4]
	b	.L1631
.L1726:
	ldr	r2, [sp, #32]
	movw	r1, #:lower16:.LC136
	movt	r1, #:upper16:.LC136
	stm	sp, {r2, r8}
	ldr	r2, .L1729+8
	str	r0, [sp, #8]
	ldr	r0, .L1729+12
	bl	__dynamic_pr_debug
	b	.L1632
.L1727:
	movw	r1, #:lower16:.LC138
	ldr	r2, .L1729+4
	add	r0, r5, #1536
	movt	r1, #:upper16:.LC138
	bl	__dynamic_pr_debug
	ldr	r2, [r7, #20]
	ldrh	r3, [r4, #6]	@ unaligned
	ldrh	r0, [r4, #4]	@ unaligned
	ldr	r2, [r2, #24]
	str	r3, [sp, #28]
	ldrh	r3, [r4, #2]	@ unaligned
	ldr	r2, [r2, #4]
	str	r2, [sp, #32]
	b	.L1649
.L1722:
	ldr	r3, [sp, #32]
	movw	r1, #:lower16:.LC136
	movt	r1, #:upper16:.LC136
	ldr	r2, .L1729+16
	str	r3, [sp]
	ldr	r3, [sp, #36]
	str	r8, [sp, #4]
	str	r0, [sp, #8]
	ldr	r0, .L1729+20
	bl	__dynamic_pr_debug
	b	.L1642
.L1721:
	movw	r1, #:lower16:.LC137
	ldr	r2, .L1729+4
	add	r0, r5, #1488
	movt	r1, #:upper16:.LC137
	bl	__dynamic_pr_debug
	ldrh	r2, [r4, #6]	@ unaligned
	ldr	r3, [r7, #20]
	ldrh	r0, [r4, #4]	@ unaligned
	str	r2, [sp, #28]
	ldrh	r2, [r4, #2]	@ unaligned
	ldr	r3, [r3, #24]
	ldr	r8, [sp, #28]
	str	r2, [sp, #32]
	ldr	r10, [r3, #4]
	b	.L1641
.L1728:
	ldr	r2, [sp, #28]
	movw	r1, #:lower16:.LC139
	str	r3, [sp]
	movt	r1, #:upper16:.LC139
	mov	r3, r10
	str	r2, [sp, #4]
	ldr	r2, .L1729+24
	str	r0, [sp, #8]
	ldr	r0, .L1729+28
	str	r8, [sp, #12]
	bl	__dynamic_pr_debug
	b	.L1650
.L1719:
	movw	r1, #:lower16:.LC141
	ldr	r2, .L1729+4
	add	r0, r5, #1584
	movt	r1, #:upper16:.LC141
	bl	__dynamic_pr_debug
	ldr	r2, [r7, #20]
	ldrh	r3, [r4, #6]	@ unaligned
	ldrh	r9, [r4, #4]	@ unaligned
	ldr	r2, [r2, #24]
	str	r3, [sp, #28]
	ldrh	r3, [r4, #2]	@ unaligned
	ldr	r2, [r2, #4]
	str	r2, [sp, #32]
	b	.L1662
.L1720:
	ldr	r2, [sp, #28]
	movw	r1, #:lower16:.LC142
	str	r3, [sp]
	movt	r1, #:upper16:.LC142
	mov	r3, r8
	ldr	r0, .L1729+32
	stmib	sp, {r2, r9}
	ldr	r2, .L1729+36
	bl	__dynamic_pr_debug
	b	.L1663
.L1724:
	movw	r0, #:lower16:.LC145
	mov	r2, r4
	ldr	r1, .L1729+4
	movt	r0, #:upper16:.LC145
	bl	printk
	b	.L1624
.L1625:
	ldr	r1, [sp, #20]
	movw	r0, #:lower16:.LC143
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC143
	str	r1, [sp]
	ldr	r1, [sp, #16]
	str	r1, [sp, #4]
	ldr	r1, [sp, #24]
	str	r1, [sp, #8]
	ldr	r1, .L1729+4
	bl	printk
	b	.L1652
.L1658:
	movw	r0, #:lower16:.LC140
	ldr	r1, .L1729+24
	movt	r0, #:upper16:.LC140
	bl	printk
	b	.L1652
.L1730:
	.align	2
.L1729:
	.word	.LANCHOR2+1632
	.word	.LANCHOR3+708
	.word	.LANCHOR3+724
	.word	.LANCHOR2+1464
	.word	.LANCHOR3+744
	.word	.LANCHOR2+1512
	.word	.LANCHOR3+764
	.word	.LANCHOR2+1560
	.word	.LANCHOR2+1608
	.word	.LANCHOR3+788
	.fnend
	.size	f_audio_setup, .-f_audio_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_unbind_config, %function
android_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	ip, .L1748
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	mov	r5, r0
	str	lr, [sp, #12]
	ldr	r3, [r3, #3308]
	ldr	r1, [r0, #24]
	cmp	r3, ip
	beq	.L1732
	sub	r2, r3, #520
	ldr	r3, [r3, #-512]
	cmp	r1, r3
	bne	.L1733
	b	.L1732
.L1734:
	ldr	r3, [r3, #-512]
	cmp	r1, r3
	beq	.L1732
.L1733:
	ldr	r3, [r2, #520]
	cmp	r3, ip
	sub	r2, r3, #520
	bne	.L1734
.L1732:
	ldr	r3, [r1]
	ldrb	r2, [r3, #378]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L1736
	movw	r2, #:lower16:.LANCHOR2
	movw	r0, #1674
	movt	r2, #:upper16:.LANCHOR2
	mov	r1, #0
	ldrh	r2, [r2, r0]
	strb	r1, [r3, #378]
	tst	r2, #4
	bne	.L1747
.L1736:
	mov	r6, r5
	ldr	r4, [r6, #112]!
	cmp	r6, r4
	sub	r4, r4, #4
	beq	.L1731
.L1738:
	ldr	r3, [r4]
	mov	r1, r5
	mov	r0, r3
	ldr	r3, [r3, #44]
	cmp	r3, #0
	beq	.L1740
	blx	r3
	ldr	r4, [r4, #4]
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L1738
.L1731:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1740:
	ldr	r4, [r4, #4]
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L1738
	b	.L1731
.L1747:
	movw	r1, #:lower16:.LC147
	ldr	r2, .L1748+4
	movt	r1, #:upper16:.LC147
	ldr	r0, .L1748+8
	bl	__dynamic_pr_debug
	b	.L1736
.L1749:
	.align	2
.L1748:
	.word	.LANCHOR1+3308
	.word	.LANCHOR3+812
	.word	.LANCHOR2+1656
	.fnend
	.size	android_unbind_config, .-android_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_enable_function, %function
android_enable_function:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r9, r2
	movw	r8, #:lower16:.LC148
	strd	r10, [sp, #24]
	movt	r8, #:upper16:.LC148
	mov	fp, r0
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r6, [r0, #4]
	ldr	r2, [r0, #8]
	mov	r10, r1
	ldr	r3, [r0, #44]
	sub	r6, r6, #4
	str	r3, [sp]
	ldr	r3, [r2]
	str	r3, [sp, #4]
.L1751:
	ldr	r5, [r6, #4]!
	mov	r0, r9
	cmp	r5, #0
	beq	.L1770
	ldr	r4, [r5]
	mov	r1, r4
	bl	strcmp
	subs	r7, r0, #0
	bne	.L1751
	ldr	r1, [r5, #20]
	cmp	r1, fp
	cmpne	r1, #0
	bne	.L1771
	movw	r2, #:lower16:kmalloc_caches
	movt	r2, #:upper16:kmalloc_caches
	ldr	r0, [r2, #24]
	cmp	r0, #0
	beq	.L1761
	mov	r2, #12
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L1772
.L1754:
	str	fp, [r5, #20]
	add	r2, r10, #112
	movw	r6, #:lower16:.LANCHOR2
	str	r5, [r0], #4
	ldr	r1, [r10, #116]
	movt	r6, #:upper16:.LANCHOR2
	bl	__list_add
	movw	r3, #1698
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L1773
.L1756:
	ldr	r2, [sp]
	ldr	r8, [r5]
	ldr	r3, [r2, #44]
	cmp	r3, #0
	ble	.L1750
	add	r3, r3, r3, lsl #2
	add	r4, r2, #12
	add	r5, r4, r3, lsl #1
	b	.L1759
.L1757:
	cmp	r5, r4
	beq	.L1750
.L1759:
	mov	r1, r4
	mov	r0, r8
	bl	strcmp
	cmp	r0, #0
	add	r4, r4, #10
	bne	.L1757
	movw	r3, #1722
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L1774
.L1758:
	ldr	r2, [sp, #4]
	mov	r3, #1
	mov	r7, #0
	strb	r3, [r2, #378]
.L1750:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1761:
	mov	r0, #16
	b	.L1754
.L1770:
	mvn	r7, #21
	b	.L1750
.L1773:
	movw	r1, #:lower16:.LC150
	add	r0, r6, #1680
	ldr	r2, .L1775
	movt	r1, #:upper16:.LC150
	ldr	r3, [r5]
	bl	__dynamic_pr_debug
	b	.L1756
.L1774:
	movw	r1, #:lower16:.LC151
	ldr	r2, .L1775+4
	movt	r1, #:upper16:.LC151
	ldr	r0, .L1775+8
	bl	__dynamic_pr_debug
	b	.L1758
.L1771:
	mov	r2, r4
	ldr	r1, .L1775
	mov	r0, r8
	bl	printk
	b	.L1751
.L1772:
	movw	r0, #:lower16:.LC149
	ldr	r1, .L1775
	mvn	r7, #11
	movt	r0, #:upper16:.LC149
	bl	printk
	b	.L1750
.L1776:
	.align	2
.L1775:
	.word	.LANCHOR3+836
	.word	.LANCHOR3+860
	.word	.LANCHOR2+1704
	.fnend
	.size	android_enable_function, .-android_enable_function
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_release, %function
ccid_bulk_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #1746
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r0, #:upper16:.LANCHOR2
	str	lr, [sp, #4]
	ldr	r4, [r1, #124]
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L1783
.L1778:
	mov	r3, #0
	mov	r0, r3
	str	r3, [r4, #152]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1783:
	movw	r1, #:lower16:.LC152
	add	r0, r0, #1728
	movt	r1, #:upper16:.LC152
	bl	__dynamic_pr_debug
	b	.L1778
	.fnend
	.size	ccid_bulk_release, .-ccid_bulk_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_setup, %function
frmnet_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r4, #:lower16:.LANCHOR2
	movw	r3, #1770
	movt	r4, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r5, r1
	strd	r8, [sp, #16]
	mov	r6, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r4, r3]
	.pad #28
	sub	sp, sp, #28
	ldr	r8, [r0, #128]
	ldrh	fp, [r1, #4]	@ unaligned
	ldrh	r10, [r1, #2]	@ unaligned
	tst	r3, #4
	ldrh	r9, [r1, #6]	@ unaligned
	ldr	r7, [r8, #4]
	bne	.L1801
.L1785:
	ldr	r3, [r6, #120]
	cmp	r3, #0
	bne	.L1786
	movw	r3, #1794
	ldrh	r3, [r4, r3]
	tst	r3, #4
	mvneq	r4, #106
	bne	.L1802
.L1784:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1786:
	ldrh	r3, [r5]	@ unaligned
	movw	r2, #8482
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r2
	beq	.L1789
	movw	r2, #41217
	cmp	r3, r2
	beq	.L1790
	cmp	r3, #8448
	beq	.L1803
.L1788:
	movw	r3, #1818
	ldrh	r3, [r4, r3]
	tst	r3, #4
	mvneq	r4, #94
	beq	.L1784
	ldr	r1, [r8]
	str	r10, [sp, #4]
	movw	r2, #:lower16:.LC17
	ldrb	r3, [r5]	@ zero_extendqisi2
	str	fp, [sp, #8]
	movt	r2, #:upper16:.LC17
	ldrb	ip, [r5, #1]	@ zero_extendqisi2
	mvn	r4, #94
	ldr	r0, .L1805
	add	r1, r1, #32
	str	ip, [sp]
	str	r9, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L1784
.L1789:
	ldr	r5, [r6, #100]
	adds	r9, r9, #0
	movne	r9, #1
	cmp	r5, #0
	beq	.L1795
	ldrb	r1, [r6, #116]	@ zero_extendqisi2
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, r10
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, r6
	mov	r4, #0
	add	r1, r1, r1, lsl #1
	add	r3, r3, r1, lsl #3
	ldrb	r1, [r3, #3328]	@ zero_extendqisi2
	blx	r5
.L1792:
	ldrb	r3, [r7, #26]	@ zero_extendqisi2
	str	r4, [r7, #4]
	mov	r1, r7
	mov	r2, #32
	bfi	r3, r9, #1, #1
	strb	r3, [r7, #26]
	ldr	r3, [r8]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L1784
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC156
	mov	r2, r4
	movt	r1, #:upper16:.LC156
	add	r0, r0, #32
	bl	dev_err
	b	.L1784
.L1803:
	movw	r3, #:lower16:frmnet_cmd_complete
	mov	r4, r9
	str	r6, [r7, #32]
	movt	r3, #:upper16:frmnet_cmd_complete
	mov	r9, #0
	str	r3, [r7, #28]
	b	.L1792
.L1802:
	movw	r1, #:lower16:.LC154
	ldr	r2, .L1805+4
	mvn	r4, #106
	movt	r1, #:upper16:.LC154
	ldr	r0, .L1805+8
	bl	__dynamic_pr_debug
	b	.L1784
.L1790:
	cmp	r10, #0
	bne	.L1788
	add	r3, r6, #132
	mov	r0, r3
	str	r3, [sp, #20]
	bl	_raw_spin_lock
	mov	r3, r6
	ldr	r6, [r3, #144]!
	cmp	r6, r3
	beq	.L1804
	mov	r0, r6
	sub	r5, r6, #8
	bl	list_del
	ldr	r0, [sp, #20]
	bl	_raw_spin_unlock
	ldmdb	r6, {r1, r4}
	ldr	r0, [r7]
	cmp	r9, r4
	movcc	r4, r9
	cmp	r4, r9
	mov	r2, r4
	movge	r9, #0
	movlt	r9, #1
	bl	memcpy
	ldr	r0, [r6, #-8]
	bl	kfree
	mov	r0, r5
	bl	kfree
	b	.L1792
.L1801:
	ldrb	ip, [r0, #116]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC153
	mov	r3, r0
	movt	r1, #:upper16:.LC153
	ldr	r2, .L1805+4
	ldr	r0, .L1805+12
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L1785
.L1795:
	mov	r4, r5
	b	.L1792
.L1804:
	movw	r0, #:lower16:.LC155
	ldrb	r2, [r5, #1]	@ zero_extendqisi2
	mov	r3, r10
	str	fp, [sp]
	movt	r0, #:upper16:.LC155
	ldrb	r1, [r5]	@ zero_extendqisi2
	str	r9, [sp, #4]
	bl	printk
	ldr	r0, [sp, #20]
	bl	_raw_spin_unlock
	b	.L1788
.L1806:
	.align	2
.L1805:
	.word	.LANCHOR2+1800
	.word	.LANCHOR3+884
	.word	.LANCHOR2+1776
	.word	.LANCHOR2+1752
	.fnend
	.size	frmnet_setup, .-frmnet_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_notify_complete, %function
frmnet_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r4, #:lower16:.LANCHOR2
	movw	r3, #1842
	movt	r4, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldrh	r3, [r4, r3]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r1, #32]
	ldr	r7, [r1, #44]
	tst	r3, #4
	bne	.L1846
.L1808:
	cmn	r7, #104
	beq	.L1810
	cmp	r7, #0
	bne	.L1847
.L1811:
	ldr	r3, [r5, #124]
	cmp	r3, #0
	bne	.L1848
.L1807:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L1847:
	cmn	r7, #108
	bne	.L1841
.L1810:
	add	r4, r5, #132
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r3, #0
	mov	r0, r4
	str	r3, [r5, #152]
.L1844:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	_raw_spin_unlock_irqrestore
.L1848:
	add	r7, r5, #132
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #152]
	mov	r8, r0
	cmp	r3, #0
	beq	.L1814
	sub	r3, r3, #1
	mov	r1, r0
	cmp	r3, #0
	mov	r0, r7
	str	r3, [r5, #152]
	beq	.L1844
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #136]
	mov	r1, r6
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r8, r0, #0
	beq	.L1807
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r3, r5
	mov	r9, r0
	ldr	r6, [r3, #144]!
	cmp	r6, r3
	beq	.L1818
	ldr	r2, [r5, #152]
	cmp	r2, #0
	beq	.L1819
	sub	r2, r2, #1
	mov	r0, r6
	str	r2, [r5, #152]
	sub	r5, r6, #8
	bl	list_del
	ldr	r0, [r6, #-8]
	bl	kfree
	mov	r0, r5
	bl	kfree
.L1818:
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #1890
	ldrh	r3, [r4, r3]
	tst	r3, #4
	beq	.L1807
	ldr	r0, .L1850
	movw	r1, #:lower16:.LC161
	mov	r2, r8
	movt	r1, #:upper16:.LC161
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	__dynamic_pr_debug
.L1846:
	ldrb	ip, [r5, #116]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC157
	mov	r3, r5
	movt	r1, #:upper16:.LC157
	ldr	r2, .L1850+4
	add	r0, r4, #1824
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L1808
.L1814:
	movw	r2, #1866
	ldrh	r2, [r4, r2]
	tst	r2, #4
	bne	.L1849
.L1816:
	mov	r1, r8
.L1845:
	mov	r0, r7
	b	.L1844
.L1841:
	movw	r0, #:lower16:.LC158
	mov	r1, r7
	movt	r0, #:upper16:.LC158
	bl	printk
	b	.L1811
.L1849:
	movw	r1, #:lower16:.LC159
	ldr	r2, .L1850+4
	movt	r1, #:upper16:.LC159
	ldr	r0, .L1850+8
	bl	__dynamic_pr_debug
	b	.L1816
.L1819:
	movw	r0, #:lower16:.LC160
	ldr	r1, .L1850+4
	movt	r0, #:upper16:.LC160
	bl	printk
	mov	r1, r9
	b	.L1845
.L1851:
	.align	2
.L1850:
	.word	.LANCHOR2+1872
	.word	.LANCHOR3+900
	.word	.LANCHOR2+1848
	.fnend
	.size	frmnet_notify_complete, .-frmnet_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_function_ctrlrequest, %function
mbim_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r1, #12]
	.pad #16
	sub	sp, sp, #16
	ldrh	r7, [r2, #4]	@ unaligned
	ldrh	r8, [r2, #2]	@ unaligned
	ldrh	r6, [r2, #6]	@ unaligned
	cmp	r3, #0
	bne	.L1855
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldrb	r3, [r3, #250]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L1855
	mov	r4, r2
	movw	r2, #:lower16:.LANCHOR2
	mov	r5, r1
	movt	r2, #:upper16:.LANCHOR2
	ldrb	r3, [r4]	@ zero_extendqisi2
	movw	r1, #1914
	ldrh	r2, [r2, r1]
	tst	r2, #4
	bne	.L1869
.L1856:
	cmp	r3, #128
	beq	.L1870
	cmp	r3, #192
	bne	.L1855
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	cmp	r3, #165
	cmpeq	r7, #4
	bne	.L1855
	ldr	r3, [r5, #4]
	cmp	r6, #40
	movcc	r4, r6
	movcs	r4, #40
	ldr	r1, .L1873
	mov	r2, r4
	ldr	r0, [r3]
	bl	memcpy
.L1858:
	ldr	r1, [r5, #4]
	cmp	r6, r4
	mov	r2, #32
	movle	r3, #0
	movgt	r3, #1
	ldrb	r0, [r1, #26]	@ zero_extendqisi2
	bfi	r0, r3, #1, #1
	strb	r0, [r1, #26]
	ldr	r3, [r5, #4]
	str	r4, [r3, #4]
	ldr	r3, [r5]
	ldr	r1, [r5, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	blt	.L1871
.L1852:
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1870:
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	cmp	r3, #6
	beq	.L1872
.L1855:
	mvn	r4, #94
	b	.L1852
.L1872:
	lsr	r3, r8, #8
	cmp	r3, #3
	bne	.L1855
	uxtb	r8, r8
	cmp	r8, #238
	bne	.L1855
	ldr	r3, [r5, #4]
	cmp	r6, #18
	movcc	r4, r6
	movcs	r4, #18
	ldr	r1, .L1873+4
	mov	r2, r4
	ldr	r0, [r3]
	bl	memcpy
	b	.L1858
.L1869:
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC162
	movt	r1, #:upper16:.LC162
	ldr	r2, .L1873+8
	ldr	r0, .L1873+12
	str	ip, [sp]
	str	r8, [sp, #4]
	str	r7, [sp, #8]
	str	r6, [sp, #12]
	bl	__dynamic_pr_debug
	ldrb	r3, [r4]	@ zero_extendqisi2
	b	.L1856
.L1871:
	movw	r0, #:lower16:.LC163
	ldr	r1, .L1873+8
	movt	r0, #:upper16:.LC163
	bl	printk
	b	.L1852
.L1874:
	.align	2
.L1873:
	.word	.LANCHOR0+224
	.word	.LANCHOR0+264
	.word	.LANCHOR3+924
	.word	.LANCHOR2+1896
	.fnend
	.size	mbim_function_ctrlrequest, .-mbim_function_ctrlrequest
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_unbind, %function
frmnet_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1938
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	mov	r5, r0
	str	lr, [sp, #12]
	ldrh	r2, [r3, r2]
	mov	r4, r1
	tst	r2, #4
	bne	.L1883
.L1876:
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L1884
.L1877:
	cmp	r3, #2
	bls	.L1878
	ldr	r0, [r4, #8]
	bl	kfree
.L1878:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r5, [r4, #136]
	ldr	r6, [r4, #140]
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [sp, #8]
	ldr	r0, [r4]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
.L1884:
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L1877
.L1883:
	movw	r1, #:lower16:.LC164
	add	r0, r3, #1920
	ldr	r2, .L1885
	ldrb	r3, [r4, #116]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC164
	bl	__dynamic_pr_debug
	b	.L1876
.L1886:
	.align	2
.L1885:
	.word	.LANCHOR3+944
	.fnend
	.size	frmnet_unbind, .-frmnet_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_start_rx, %function
gs_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r8, r0, #32
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r2, [r0, #4]
	.pad #8
	sub	sp, sp, #8
	ldr	r5, [r0, #32]
	ldr	r3, [r0, #40]
	ldr	r6, [r2, #92]
	cmp	r8, r5
	beq	.L1888
	ldr	r2, [r0, #8]
	cmp	r2, #0
	beq	.L1888
	cmp	r3, #7
	bgt	.L1888
	mov	r4, r0
	mov	r9, #4096
	b	.L1889
.L1890:
	cmp	r10, #0
	bne	.L1904
	ldr	r5, [r4, #32]
	ldr	r3, [r4, #40]
	cmp	r8, r5
	add	r3, r3, #1
	str	r3, [r4, #40]
	beq	.L1888
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L1888
	cmp	r3, #7
	bgt	.L1888
.L1889:
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del
	mov	r0, r4
	str	r9, [r5, #-32]
	bl	_raw_spin_unlock
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r2, #32
	mov	r0, r6
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r4
	bl	_raw_spin_lock
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L1890
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #40]
.L1888:
	mov	r0, r3
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1904:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1962
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L1905
.L1892:
	mov	r1, r8
	mov	r0, r5
	ldr	r2, [r4, #32]
	bl	__list_add
	ldr	r3, [r4, #40]
	b	.L1888
.L1905:
	str	r10, [sp, #4]
	ldr	ip, [r6, #4]
	movw	r3, #:lower16:.LC165
	movw	r1, #:lower16:.LC166
	movt	r3, #:upper16:.LC165
	ldr	r2, .L1906
	movt	r1, #:upper16:.LC166
	ldr	r0, .L1906+4
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L1892
.L1907:
	.align	2
.L1906:
	.word	.LANCHOR3+960
	.word	.LANCHOR2+1944
	.fnend
	.size	gs_start_rx, .-gs_start_rx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_disable, %function
rmnet_smd_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	mov	r3, #0
	str	lr, [sp, #4]
	ldr	r0, [r0, #96]
	str	r3, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L1909
	blx	r2
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
.L1909:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L1910
	blx	r2
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
.L1910:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L1911
	blx	r2
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
.L1911:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	lr, [sp, #4]
	add	r2, r4, #408
	mov	r0, #4
	ldr	r1, [r4, #388]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	queue_work_on
	.fnend
	.size	rmnet_smd_disable, .-rmnet_smd_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_read_complete, %function
gs_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r5, #48]
	mov	r6, r0
	add	r2, r4, #48
	add	r0, r5, #36
	ldr	r1, [r4, #52]
	ldr	r3, [r4, #128]
	add	r3, r3, ip
	str	r3, [r4, #128]
	bl	__list_add
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #60
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3388]
	bl	queue_work_on
	ldr	lr, [sp, #12]
	mov	r1, r6
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	gs_read_complete, .-gs_read_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_unthrottle, %function
gs_unthrottle:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #272]
	cmp	r4, #0
	beq	.L1924
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #4]
	mov	r5, r0
	cmp	r3, #0
	beq	.L1926
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #60
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3388]
	bl	queue_work_on
.L1926:
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L1924:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_unthrottle, .-gs_unthrottle
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_resume, %function
android_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	add	r0, r0, #32
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	movw	r3, #:lower16:.LANCHOR1
	ldr	r2, .L1941
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #3308]
	cmp	r3, r2
	sub	r4, r3, #520
	bne	.L1934
	b	.L1932
.L1940:
	ldr	r3, [r4, #520]
	cmp	r3, r2
	sub	r4, r3, #520
	beq	.L1932
.L1934:
	ldr	r3, [r3, #-512]
	cmp	r0, r3
	bne	.L1940
.L1932:
	add	r5, r0, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r4, #50]	@ zero_extendqisi2
	mov	r7, r0
	cmp	r3, #0
	beq	.L1935
	mov	r0, #0
	movw	r3, #:lower16:system_wq
	movt	r3, #:upper16:system_wq
	add	r2, r4, #180
	strb	r0, [r4, #50]
	ldr	r1, [r3]
	mov	r0, #4
	bl	queue_work_on
.L1935:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, r6
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	composite_resume
.L1942:
	.align	2
.L1941:
	.word	.LANCHOR1+3308
	.fnend
	.size	android_resume, .-android_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_suspend, %function
android_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	add	r0, r0, #32
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	movw	r3, #:lower16:.LANCHOR1
	ldr	r2, .L1950
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #3308]
	cmp	r3, r2
	sub	r4, r3, #520
	bne	.L1946
	b	.L1944
.L1949:
	ldr	r3, [r4, #520]
	cmp	r3, r2
	sub	r4, r3, #520
	beq	.L1944
.L1946:
	ldr	r3, [r3, #-512]
	cmp	r0, r3
	bne	.L1949
.L1944:
	add	r5, r0, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r4, #50]	@ zero_extendqisi2
	mov	r7, r0
	cmp	r3, #0
	bne	.L1947
	mov	r0, #1
	movw	r3, #:lower16:system_wq
	movt	r3, #:upper16:system_wq
	add	r2, r4, #180
	strb	r0, [r4, #50]
	ldr	r1, [r3]
	mov	r0, #4
	bl	queue_work_on
.L1947:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, r6
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	composite_suspend
.L1951:
	.align	2
.L1950:
	.word	.LANCHOR1+3308
	.fnend
	.size	android_suspend, .-android_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_ch_probe, %function
rmnet_smd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1986
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR2
	str	lr, [sp, #4]
	movw	r4, #:lower16:.LANCHOR1
	ldrh	r2, [r3, r2]
	movt	r4, #:upper16:.LANCHOR1
	ldr	r1, [r4, #3392]
	tst	r2, #4
	bne	.L1958
.L1953:
	add	r2, r1, #392
	mov	r0, #4
	ldr	r1, [r1, #388]
	bl	queue_work_on
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
.L1958:
	ldr	r1, [r1, #84]
	mov	ip, r0
	movw	r2, #:lower16:.LC167
	add	r0, r3, #1968
	movt	r2, #:upper16:.LC167
	ldr	r3, [ip]
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r1, [r4, #3392]
	b	.L1953
	.fnend
	.size	rmnet_smd_ch_probe, .-rmnet_smd_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_set_hid_report_desc, %function
acc_complete_set_hid_report_desc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	ldr	r3, [r1, #44]
	ldr	r5, [r1, #48]
	ldr	r6, [r4, #12]
	cmp	r3, #0
	bne	.L1963
	ldr	r0, [r4, #20]
	mov	r2, r5
	ldr	r3, [r4, #28]
	ldr	r1, [r1]
	add	r0, r0, r3
	bl	memcpy
	ldr	r3, [r4, #24]
	ldr	r2, [r4, #28]
	add	r5, r5, r2
	cmp	r5, r3
	str	r5, [r4, #28]
	beq	.L1964
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1964:
	movw	r3, #:lower16:system_wq
	add	r2, r6, #1744
	ldrd	r4, [sp]
	movt	r3, #:upper16:system_wq
	ldr	r6, [sp, #8]
	add	r2, r2, #8
	ldr	lr, [sp, #12]
	mov	r0, #4
	add	sp, sp, #16
	ldr	r1, [r3]
	b	queue_work_on
.L1963:
	movw	r0, #:lower16:.LC168
	ldrd	r4, [sp]
	mov	r1, r3
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC168
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
	.fnend
	.size	acc_complete_set_hid_report_desc, .-acc_complete_set_hid_report_desc
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_setup, %function
rmnet_sdio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r0, #192]
	ldrh	r9, [r1, #4]	@ unaligned
	ldrh	r8, [r1, #2]	@ unaligned
	ldr	r7, [r2, #24]
	cmp	r3, #0
	ldrh	r6, [r1, #6]	@ unaligned
	ldr	r10, [r7, #4]
	beq	.L1975
	ldrh	r3, [r1]	@ unaligned
	movw	r2, #8482
	mov	r4, r1
	mov	r5, r0
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r2
	beq	.L1968
	movw	r2, #41217
	cmp	r3, r2
	beq	.L1969
	cmp	r3, #8448
	beq	.L1978
.L1967:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2010
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	mvneq	r4, #94
	bne	.L1979
.L1965:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1969:
	cmp	r8, #0
	bne	.L1967
	add	fp, r0, #188
	mov	r0, fp
	bl	_raw_spin_lock
	mov	r2, r5
	ldr	r3, [r2, #120]!
	cmp	r3, r2
	beq	.L1980
	mov	r0, r3
	sub	r8, r3, #8
	str	r3, [sp, #20]
	bl	list_del
	ldr	r2, [r5, #128]
	mov	r0, fp
	sub	r2, r2, #1
	str	r2, [r5, #128]
	bl	_raw_spin_unlock
	ldr	r3, [sp, #20]
	ldr	r0, [r10]
	ldmdb	r3, {r1, r4}
	cmp	r6, r4
	movcc	r4, r6
	mov	r2, r4
	bl	memcpy
	ldr	r3, [sp, #20]
	movw	r2, #:lower16:rmnet_sdio_response_complete
	str	r5, [r10, #32]
	movt	r2, #:upper16:rmnet_sdio_response_complete
	str	r2, [r10, #28]
	ldr	r0, [r3, #-8]
	bl	kfree
	mov	r0, r8
	bl	kfree
	ldr	r3, [r5, #368]
	cmp	r4, r6
	movge	r6, #0
	movlt	r6, #1
	add	r3, r3, #1
	str	r3, [r5, #368]
	b	.L1971
.L1978:
	movw	r3, #:lower16:rmnet_sdio_command_complete
	mov	r4, r6
	str	r0, [r10, #32]
	movt	r3, #:upper16:rmnet_sdio_command_complete
	mov	r6, #0
	str	r3, [r10, #28]
.L1971:
	ldrb	r3, [r10, #26]	@ zero_extendqisi2
	str	r4, [r10, #4]
	mov	r1, r10
	mov	r2, #32
	bfi	r3, r6, #1, #1
	strb	r3, [r10, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L1965
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC156
	mov	r2, r4
	movt	r1, #:upper16:.LC156
	add	r0, r0, #32
	bl	dev_err
	b	.L1965
.L1968:
	ldr	r3, [r0, #332]
	tst	r8, #1
	add	r2, r0, #336
	mov	r4, #0
	mov	r0, #4
	ldr	r1, [r5, #200]
	orrne	r3, r3, #2
	biceq	r3, r3, #2
	str	r3, [r5, #332]
	bl	queue_work_on
	subs	r6, r6, r4
	movne	r6, #1
	b	.L1971
.L1979:
	ldr	r1, [r7]
	str	r8, [sp, #4]
	movw	r2, #:lower16:.LC17
	ldrb	r3, [r4]	@ zero_extendqisi2
	str	r9, [sp, #8]
	movt	r2, #:upper16:.LC17
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	mvn	r4, #94
	ldr	r0, .L1981
	add	r1, r1, #32
	str	ip, [sp]
	str	r6, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L1965
.L1980:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC169
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC169
	ldrb	r2, [r4]	@ zero_extendqisi2
	strd	r8, [sp]
	str	r6, [sp, #8]
	add	r0, r0, #32
	bl	_dev_info
	mov	r0, fp
	bl	_raw_spin_unlock
	b	.L1967
.L1975:
	mvn	r4, #106
	b	.L1965
.L1982:
	.align	2
.L1981:
	.word	.LANCHOR2+1992
	.fnend
	.size	rmnet_sdio_setup, .-rmnet_sdio_setup
	.align	2
	.global	gsdio_write_complete
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_write_complete, %function
gsdio_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #2034
	movt	r5, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r7, r1
	ldrh	r3, [r5, r3]
	strd	r8, [sp, #16]
	mov	r8, r0
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	ldr	r4, [r0]
	tst	r3, #4
	bne	.L2000
.L1984:
	cmp	r4, #0
	beq	.L2001
	add	r6, r4, #4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r4
	mov	r9, r0
	ldr	r2, [r1, #52]!
	add	r0, r7, #36
	bl	__list_add
	ldr	r3, [r4, #76]
	add	r3, r3, #1
	str	r3, [r4, #76]
	ldr	r3, [r7, #44]
	cmn	r3, #108
	beq	.L1987
	cmp	r3, #0
	bne	.L2002
.L1988:
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #60
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3396]
	bl	queue_work_on
.L1989:
	mov	r1, r9
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	_raw_spin_unlock_irqrestore
.L1987:
	movw	r3, #2058
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L1989
	movw	r1, #:lower16:.LC172
	ldr	r2, .L2003
	movt	r1, #:upper16:.LC172
	ldr	r3, [r8, #4]
	ldr	r0, .L2003+4
	bl	__dynamic_pr_debug
	b	.L1989
.L2000:
	movw	r1, #:lower16:.LC170
	mov	r3, r0
	ldr	r2, .L2003
	movt	r1, #:upper16:.LC170
	add	r0, r5, #2016
	str	r4, [sp]
	bl	__dynamic_pr_debug
	b	.L1984
.L2002:
	ldr	ip, [r8, #4]
	movw	r0, #:lower16:.LC171
	mov	r2, r4
	ldr	r1, .L2003
	movt	r0, #:upper16:.LC171
	str	ip, [sp]
	str	r3, [sp, #4]
	ldr	r3, [r4]
	bl	printk
	b	.L1988
.L2001:
	ldr	r1, .L2003
	movw	r0, #:lower16:.LC114
	movt	r0, #:upper16:.LC114
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk
.L2004:
	.align	2
.L2003:
	.word	.LANCHOR3+972
	.word	.LANCHOR2+2040
	.fnend
	.size	gsdio_write_complete, .-gsdio_write_complete
	.align	2
	.global	gsdio_ctrl_notify_modem
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ctrl_notify_modem, %function
gsdio_ctrl_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r3, [r4]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	cmp	r1, r3
	bcs	.L2022
	cmp	r0, #0
	beq	.L2023
	mov	ip, #104
	lsl	r3, r2, #1
	mla	r1, ip, r1, r4
	and	r3, r3, #2
	ldr	r5, [r1, #24]
	ldr	r1, [r5, #180]
	cmp	r1, r3
	beq	.L2005
	mov	r6, r0
	movw	r0, #:lower16:.LANCHOR2
	str	r3, [r5, #180]
	movw	r1, #2082
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r1]
	tst	r3, #4
	bne	.L2024
.L2009:
	ldr	r3, [r5, #108]
	cmp	r3, #0
	beq	.L2025
	ldr	r3, [r5, #180]
	cmp	r3, #0
	beq	.L2011
	ldr	r3, [r6, #136]
	cmp	r3, #0
	beq	.L2011
	mov	r0, r6
	ldr	r1, [r5, #176]
	blx	r3
.L2011:
	ldr	r1, [r4, #3396]
	add	r2, r5, #80
	mov	r0, #4
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on
.L2005:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2024:
	str	r2, [sp, #4]
	ldr	lr, [r5]
	movw	r1, #:lower16:.LC175
	movt	r1, #:upper16:.LC175
	mov	r3, r5
	ldr	r2, .L2026
	add	r0, r0, #2064
	str	lr, [sp]
	bl	__dynamic_pr_debug
	b	.L2009
.L2022:
	mov	r2, r1
	ldr	r1, .L2026
	movw	r0, #:lower16:.LC173
	movt	r0, #:upper16:.LC173
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L2023:
	ldr	r1, .L2026
	movw	r0, #:lower16:.LC174
	movt	r0, #:upper16:.LC174
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L2025:
	ldr	r1, .L2026
	movw	r0, #:lower16:.LC176
	mov	r2, r5
	ldr	r3, [r5]
	movt	r0, #:upper16:.LC176
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L2027:
	.align	2
.L2026:
	.word	.LANCHOR3+996
	.fnend
	.size	gsdio_ctrl_notify_modem, .-gsdio_ctrl_notify_modem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_write_complete, %function
gsmd_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2106
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r5, r1
	str	lr, [sp, #16]
	ldrh	r3, [r3, r2]
	.pad #12
	sub	sp, sp, #12
	mov	r6, r0
	ldr	r4, [r0]
	tst	r3, #4
	bne	.L2044
.L2029:
	cmp	r4, #0
	beq	.L2045
	add	r7, r4, #4
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #72]
	ldr	r3, [r3, #8]
	tst	r3, #1
	beq	.L2031
	ldr	r3, [r5, #44]
	cmn	r3, #108
	beq	.L2031
	cmp	r3, #0
	bne	.L2046
.L2033:
	mov	r1, r4
	add	r0, r5, #36
	ldr	r2, [r1, #44]!
	bl	__list_add
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #52
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3400]
	bl	queue_work_on
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock
.L2031:
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r0, [r5]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	bx	r3	@ indirect register sibling call
.L2044:
	movw	r1, #:lower16:.LC170
	mov	r3, r0
	ldr	r2, .L2047
	movt	r1, #:upper16:.LC170
	str	r4, [sp]
	ldr	r0, .L2047+4
	bl	__dynamic_pr_debug
	b	.L2029
.L2045:
	ldr	r1, .L2047
	movw	r0, #:lower16:.LC114
	movt	r0, #:upper16:.LC114
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	printk
.L2046:
	ldr	ip, [r6, #4]
	movw	r0, #:lower16:.LC171
	mov	r2, r4
	ldr	r1, .L2047
	movt	r0, #:upper16:.LC171
	str	ip, [sp]
	str	r3, [sp, #4]
	ldr	r3, [r4]
	bl	printk
	b	.L2033
.L2048:
	.align	2
.L2047:
	.word	.LANCHOR3+1020
	.word	.LANCHOR2+2088
	.fnend
	.size	gsmd_write_complete, .-gsmd_write_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_read_complete, %function
gsmd_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2130
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r5, r0
	str	lr, [sp, #16]
	ldrh	r2, [r3, r2]
	.pad #12
	sub	sp, sp, #12
	mov	r6, r1
	ldr	r4, [r0]
	tst	r2, #4
	bne	.L2061
.L2050:
	cmp	r4, #0
	beq	.L2062
	add	r7, r4, #4
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #72]
	ldr	r3, [r3, #8]
	tst	r3, #1
	beq	.L2052
	ldr	r3, [r6, #44]
	cmn	r3, #108
	beq	.L2052
	add	r0, r6, #36
	add	r2, r4, #20
	ldr	r1, [r4, #24]
	bl	__list_add
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #28
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3400]
	bl	queue_work_on
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock
.L2052:
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r6
	mov	r0, r5
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	bx	r3	@ indirect register sibling call
.L2061:
	movw	r1, #:lower16:.LC170
	add	r0, r3, #2112
	ldr	r2, .L2063
	movt	r1, #:upper16:.LC170
	mov	r3, r5
	str	r4, [sp]
	bl	__dynamic_pr_debug
	b	.L2050
.L2062:
	ldr	r1, .L2063
	movw	r0, #:lower16:.LC114
	movt	r0, #:upper16:.LC114
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	printk
.L2064:
	.align	2
.L2063:
	.word	.LANCHOR3+1040
	.fnend
	.size	gsmd_read_complete, .-gsmd_read_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_probe, %function
ghsuart_ctrl_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2154
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L2075
.L2066:
	ldr	r3, [r4, #4]
	movw	r2, #:lower16:.LANCHOR1
	mov	r1, #84
	movt	r2, #:upper16:.LANCHOR1
	mov	r0, #1
	mla	r3, r1, r3, r2
	ldr	r4, [r3, #1860]
	add	r1, r4, #88
	add	r5, r4, #8
	bl	_set_bit
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r6, r0
	cmp	r3, #0
	beq	.L2067
	add	r2, r4, #36
	mov	r0, #4
	ldr	r1, [r4, #32]
	bl	queue_work_on
.L2067:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2075:
	movw	r1, #:lower16:.LC177
	ldr	r2, .L2076
	movt	r1, #:upper16:.LC177
	ldr	r3, [r4]
	ldr	r0, .L2076+4
	bl	__dynamic_pr_debug
	b	.L2066
.L2077:
	.align	2
.L2076:
	.word	.LANCHOR3+1060
	.word	.LANCHOR2+2136
	.fnend
	.size	ghsuart_ctrl_probe, .-ghsuart_ctrl_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_probe, %function
ghsuart_data_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR2
	movw	r3, #2178
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movt	r2, #:upper16:.LANCHOR2
	str	lr, [sp, #8]
	movw	r4, #:lower16:.LANCHOR1
	ldrh	r3, [r2, r3]
	movt	r4, #:upper16:.LANCHOR1
	mov	r5, r0
	.pad #12
	sub	sp, sp, #12
	ldr	r0, [r4, #2028]
	tst	r3, #4
	bne	.L2087
.L2079:
	ldr	r2, [r5, #4]
	cmp	r2, r0
	bcs	.L2088
	mov	r3, #84
	mov	r0, #1
	mla	r2, r3, r2, r4
	ldr	r4, [r2, #2032]
	add	r1, r4, #188
	bl	_set_bit
	ldr	r0, [r4, #4]
	cmp	r0, #0
	beq	.L2078
	add	r2, r4, #112
	mov	r0, #4
	ldr	r1, [r4, #108]
	bl	queue_work_on
	mov	r0, #0
.L2078:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L2087:
	movw	r1, #:lower16:.LC178
	ldr	r3, [r5]
	str	r0, [sp]
	movt	r1, #:upper16:.LC178
	add	r0, r2, #2160
	ldr	r2, .L2089
	bl	__dynamic_pr_debug
	ldr	r0, [r4, #2028]
	b	.L2079
.L2088:
	movw	r0, #:lower16:.LC179
	ldr	r1, .L2089
	movt	r0, #:upper16:.LC179
	bl	printk
	mvn	r0, #21
	b	.L2078
.L2090:
	.align	2
.L2089:
	.word	.LANCHOR3+1080
	.fnend
	.size	ghsuart_data_probe, .-ghsuart_data_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_debug_read_stats, %function
rmnet_smd_debug_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 184
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #:lower16:kmalloc_caches
	strd	r6, [sp, #8]
	movt	r5, #:upper16:kmalloc_caches
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #260
	sub	sp, sp, #260
	str	r1, [sp, #84]
	strd	r2, [sp, #88]
	add	lr, r4, #260
	add	ip, r4, #324
	ldrd	r2, [lr]
	ldrd	r0, [lr, #8]
	ldrd	r6, [ip]
	strd	r2, [sp, #128]
	ldrd	r2, [lr, #16]
	strd	r0, [sp, #136]
	ldrd	r0, [lr, #24]
	strd	r2, [sp, #144]
	ldrd	r2, [lr, #32]
	strd	r0, [sp, #152]
	ldrd	r0, [lr, #40]
	strd	r6, [sp, #192]
	ldrd	r6, [ip, #24]
	strd	r2, [sp, #160]
	ldrd	r2, [lr, #48]
	strd	r0, [sp, #168]
	ldrd	r0, [lr, #56]
	strd	r2, [sp, #176]
	ldrd	r2, [ip, #8]
	strd	r0, [sp, #184]
	ldrd	r0, [ip, #16]
	strd	r2, [sp, #200]
	ldrd	r2, [ip, #32]
	strd	r0, [sp, #208]
	ldrd	r0, [ip, #40]
	strd	r6, [sp, #216]
	ldrd	r6, [ip, #48]
	strd	r2, [sp, #224]
	ldrd	r2, [ip, #56]
	strd	r0, [sp, #232]
	ldr	r0, [r5, #36]
	strd	r6, [sp, #240]
	strd	r2, [sp, #248]
	cmp	r0, #0
	beq	.L2094
	mov	r2, #512
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L2097
.L2092:
	add	r10, r4, #164
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	lr, [r4, #168]
	ldr	r3, [r4, #440]
	ldr	r2, [r4, #444]
	ldr	r8, [r4, #424]
	ldr	r9, [r4, #428]
	ldr	r7, [r4, #432]
	ldr	ip, [r4, #448]
	strd	r2, [sp, #72]
	ldr	r3, [sp, #172]
	ldr	r2, [sp, #236]
	sub	r1, r9, r8
	ldr	r6, [r4, #436]
	str	r0, [sp, #112]
	ldr	r0, [r4, #260]
	str	ip, [sp, #80]
	ldr	fp, [r4, #452]
	str	lr, [sp, #96]
	strd	r2, [sp, #116]
	str	r1, [sp, #124]
	bl	smd_read_avail
	str	r0, [sp, #100]
	ldr	r0, [r4, #260]
	bl	smd_write_avail
	str	r0, [sp, #104]
	ldr	r0, [r4, #324]
	bl	smd_read_avail
	str	r0, [sp, #108]
	ldr	r0, [r4, #324]
	sub	r4, r7, r6
	bl	smd_write_avail
	ldr	r3, [sp, #76]
	str	r8, [sp, #12]
	ldr	ip, [sp, #80]
	str	r6, [sp, #24]
	ldr	r2, [sp, #116]
	str	r4, [sp, #28]
	ldr	r6, [sp, #72]
	ldr	r1, [sp, #96]
	sub	ip, ip, fp
	ldr	r4, [sp, #76]
	str	r2, [sp]
	ldr	r2, [sp, #72]
	str	r0, [sp, #68]
	mov	r0, r5
	str	ip, [sp, #52]
	ldr	ip, [sp, #100]
	stmib	sp, {r1, r9}
	ldr	r1, [sp, #124]
	sub	lr, r2, r3
	movw	r2, #:lower16:.LC180
	ldr	r3, [sp, #120]
	movt	r2, #:upper16:.LC180
	str	ip, [sp, #56]
	ldr	ip, [sp, #104]
	str	lr, [sp, #40]
	ldr	lr, [sp, #80]
	str	r1, [sp, #16]
	mov	r1, #512
	str	r7, [sp, #20]
	str	r6, [sp, #32]
	str	ip, [sp, #60]
	ldr	ip, [sp, #108]
	str	r4, [sp, #36]
	str	lr, [sp, #44]
	str	fp, [sp, #48]
	str	ip, [sp, #64]
	bl	scnprintf
	mov	r4, r0
	ldr	r1, [sp, #112]
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	str	r4, [sp]
	mov	r3, r5
	ldrd	r0, [sp, #84]
	ldr	r2, [sp, #92]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L2091:
	mov	r0, r4
	add	sp, sp, #260
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2094:
	mov	r5, #16
	b	.L2092
.L2097:
	mvn	r4, #11
	b	.L2091
	.fnend
	.size	rmnet_smd_debug_read_stats, .-rmnet_smd_debug_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_read_stats, %function
rmnet_sdio_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:kmalloc_caches
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	ip, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r8, r2
	mov	r9, r3
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #124]
	.pad #64
	sub	sp, sp, #64
	ldr	r0, [ip, #40]
	cmp	r0, #0
	beq	.L2101
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L2104
.L2099:
	add	r6, r4, #188
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r1, [r4, #196]
	movw	r2, #:lower16:.LC181
	mov	r10, r0
	ldr	ip, [r4, #324]
	movt	r2, #:upper16:.LC181
	mov	r0, r5
	ldr	r3, [r4, #356]
	str	ip, [sp, #56]
	ldr	ip, [r4, #320]
	str	r1, [sp, #48]
	mov	r1, #4096
	str	ip, [sp, #52]
	ldr	ip, [r4, #128]
	str	ip, [sp, #44]
	ldr	ip, [r4, #368]
	str	ip, [sp, #40]
	ldr	ip, [r4, #332]
	str	ip, [sp, #36]
	ldr	ip, [r4, #116]
	str	ip, [sp, #32]
	ldr	ip, [r4, #372]
	str	ip, [sp, #28]
	ldr	ip, [r4, #328]
	str	ip, [sp, #24]
	ldr	ip, [r4, #180]
	str	ip, [sp, #20]
	ldr	ip, [r4, #168]
	str	ip, [sp, #16]
	ldr	ip, [r4, #360]
	str	ip, [sp, #12]
	ldr	ip, [r4, #364]
	str	ip, [sp, #8]
	ldr	ip, [r4, #152]
	str	ip, [sp, #4]
	ldr	ip, [r4, #140]
	str	ip, [sp]
	bl	scnprintf
	mov	r4, r0
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	str	r4, [sp]
	mov	r2, r9
	mov	r1, r8
	mov	r0, r7
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L2098:
	mov	r0, r4
	add	sp, sp, #64
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2101:
	mov	r5, #16
	b	.L2099
.L2104:
	mvn	r4, #11
	b	.L2098
	.fnend
	.size	rmnet_sdio_read_stats, .-rmnet_sdio_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_read_stats, %function
rmnet_mux_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	ip, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r8, r2
	mov	r9, r3
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #92
	sub	sp, sp, #92
	ldr	r0, [ip, #40]
	cmp	r0, #0
	beq	.L2109
	mov	r2, #1024
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L2113
.L2106:
	add	r6, r4, #368
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #208]
	ldr	r2, [r4, #364]
	ldr	fp, [r4, #404]
	ldr	r1, [r4, #408]
	str	r3, [sp, #60]
	ldr	r3, [r4, #232]
	str	r0, [sp, #84]
	ldr	r0, [r4, #412]
	sub	r2, r2, #1
	cmp	r2, #9
	ldr	r10, [r4, #416]
	movwhi	ip, #:lower16:.LC182
	ldr	lr, [r4, #424]
	str	r3, [sp, #64]
	ldr	r3, [r4, #312]
	movthi	ip, #:upper16:.LC182
	str	r3, [sp, #68]
	ldr	r3, [r4, #336]
	str	r0, [sp, #72]
	ldr	r0, [r4, #420]
	str	r3, [sp, #76]
	ldr	r3, [r4, #348]
	str	r3, [sp, #80]
	ldr	r3, [r4, #352]
	str	r3, [sp, #56]
	ldr	r3, [r4, #400]
	bls	.L2114
.L2108:
	ldr	r4, [r4, #356]
	movw	r2, #:lower16:.LC183
	str	fp, [sp]
	str	r10, [sp, #12]
	ldr	r10, [sp, #56]
	movt	r2, #:upper16:.LC183
	str	lr, [sp, #36]
	ldr	lr, [sp, #76]
	strd	r0, [sp, #4]
	mov	r1, #1024
	mov	r0, r5
	str	r10, [sp, #16]
	ldr	r10, [sp, #60]
	str	ip, [sp, #48]
	str	r4, [sp, #52]
	str	r10, [sp, #20]
	ldr	r10, [sp, #64]
	str	lr, [sp, #40]
	ldr	lr, [sp, #80]
	str	r10, [sp, #24]
	ldr	r10, [sp, #68]
	str	r10, [sp, #28]
	ldr	r10, [sp, #72]
	str	lr, [sp, #44]
	str	r10, [sp, #32]
	bl	scnprintf
	mov	r4, r0
	ldr	r1, [sp, #84]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	str	r4, [sp]
	mov	r2, r9
	mov	r1, r8
	mov	r0, r7
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L2105:
	mov	r0, r4
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2114:
	movw	ip, #:lower16:.LANCHOR3
	movt	ip, #:upper16:.LANCHOR3
	add	r2, ip, r2, lsl #2
	ldr	ip, [r2, #1100]
	b	.L2108
.L2109:
	mov	r5, #16
	b	.L2106
.L2113:
	mvn	r4, #11
	b	.L2105
	.fnend
	.size	rmnet_mux_read_stats, .-rmnet_mux_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_read_status, %function
debug_read_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r0, #124]
	.pad #20
	sub	sp, sp, #20
	ldmib	r5, {r7, r8}
	cmp	r7, #0
	cmpne	r8, #0
	beq	.L2128
	mov	fp, r3
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	mov	r9, r1
	ldr	r0, [r3, #36]
	mov	r10, r2
	cmp	r0, #0
	beq	.L2121
	mov	r2, #512
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L2129
.L2118:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:.LC185
	mov	r1, #512
	ldr	r3, [r5, #128]
	movt	r2, #:upper16:.LC185
	str	r0, [sp, #12]
	mov	r0, r6
	bl	scnprintf
	movw	r2, #:lower16:.LC186
	rsb	r1, r0, #512
	ldr	r3, [r5, #132]
	mov	r4, r0
	movt	r2, #:upper16:.LC186
	add	r0, r6, r0
	bl	scnprintf
	ldr	ip, [r5, #128]
	add	r4, r4, r0
	movw	r2, #:lower16:.LC187
	ldr	r3, [r5, #132]
	rsb	r1, r4, #512
	add	r0, r6, r4
	movt	r2, #:upper16:.LC187
	sub	r3, ip, r3
	bl	scnprintf
	add	r4, r4, r0
	movw	r2, #:lower16:.LC188
	ldr	r3, [r5, #136]
	rsb	r1, r4, #512
	add	r0, r6, r4
	movt	r2, #:upper16:.LC188
	bl	scnprintf
	add	r4, r4, r0
	movw	r2, #:lower16:.LC189
	ldr	r3, [r5, #140]
	rsb	r1, r4, #512
	add	r0, r6, r4
	movt	r2, #:upper16:.LC189
	bl	scnprintf
	ldr	ip, [r5, #136]
	add	r4, r4, r0
	movw	r2, #:lower16:.LC190
	ldr	r3, [r5, #140]
	rsb	r1, r4, #512
	add	r0, r6, r4
	movt	r2, #:upper16:.LC190
	sub	r3, ip, r3
	bl	scnprintf
	add	r4, r4, r0
	movw	r2, #:lower16:.LC191
	ldr	r3, [r8, #156]
	rsb	r1, r4, #512
	add	r0, r6, r4
	movt	r2, #:upper16:.LC191
	bl	scnprintf
	ldr	r3, [r7, #108]
	add	r4, r4, r0
	cmp	r3, #0
	beq	.L2119
	mov	r0, r7
	blx	r3
	cmp	r0, #0
	movw	r2, #:lower16:.LC192
	rsb	r1, r4, #512
	add	r0, r6, r4
	movne	r3, #2
	moveq	r3, #0
	movt	r2, #:upper16:.LC192
	bl	scnprintf
	add	r4, r4, r0
.L2119:
	mov	r0, r5
	ldr	r1, [sp, #12]
	bl	_raw_spin_unlock_irqrestore
	str	r4, [sp]
	mov	r2, fp
	mov	r1, r10
	mov	r0, r9
	mov	r3, r6
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r6
	bl	kfree
.L2115:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2121:
	mov	r6, #16
	b	.L2118
.L2129:
	mvn	r4, #11
	b	.L2115
.L2128:
	movw	r0, #:lower16:.LC184
	mvn	r4, #21
	movt	r0, #:upper16:.LC184
	bl	printk
	b	.L2115
	.fnend
	.size	debug_read_status, .-debug_read_status
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_sdio_read_stats, %function
debug_sdio_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #68
	sub	sp, sp, #68
	str	r1, [sp, #52]
	strd	r2, [sp, #56]
	cmp	r0, #0
	beq	.L2136
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r10, r0, #0
	beq	.L2140
.L2131:
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	ldr	r5, [r8]
	cmp	r5, #0
	beq	.L2134
	mov	r5, #0
	movw	r3, #:lower16:.LC193
	movt	r3, #:upper16:.LC193
	mov	r6, r5
	add	r7, r8, #4
	str	r3, [sp, #48]
.L2133:
	ldr	r4, [r7, #20]
	add	r7, r7, #104
	add	r9, r4, #4
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r4, #112]
	mov	r3, r6
	rsb	r1, r5, #4096
	mov	fp, r0
	ldr	r2, [sp, #48]
	add	r0, r10, r5
	add	r6, r6, #1
	str	ip, [sp, #40]
	ldr	ip, [r4, #108]
	str	ip, [sp, #36]
	ldr	ip, [r4, #8]
	str	ip, [sp, #32]
	ldr	ip, [r4, #76]
	str	ip, [sp, #28]
	ldr	ip, [r4, #48]
	str	ip, [sp, #24]
	ldr	ip, [r4, #44]
	str	ip, [sp, #20]
	ldr	ip, [r4, #176]
	str	ip, [sp, #16]
	ldr	ip, [r4, #180]
	str	ip, [sp, #12]
	ldr	ip, [r4, #188]
	str	ip, [sp, #8]
	ldr	ip, [r4, #184]
	stm	sp, {r4, ip}
	bl	scnprintf
	add	r5, r5, r0
	mov	r1, fp
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r8]
	cmp	r6, r3
	bcc	.L2133
.L2134:
	mov	r3, r10
	ldrd	r0, [sp, #52]
	str	r5, [sp]
	ldr	r2, [sp, #60]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r10
	bl	kfree
.L2130:
	mov	r0, r4
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2136:
	mov	r10, #16
	b	.L2131
.L2140:
	mvn	r4, #11
	b	.L2130
	.fnend
	.size	debug_sdio_read_stats, .-debug_sdio_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_smd_read_stats, %function
debug_smd_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #36]
	.pad #92
	sub	sp, sp, #92
	str	r1, [sp, #76]
	strd	r2, [sp, #80]
	cmp	r0, #0
	beq	.L2148
	mov	r2, #512
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	str	r3, [sp, #64]
	beq	.L2154
.L2142:
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	ldr	r3, [r7, #212]
	cmp	r3, #0
	beq	.L2146
	add	fp, r7, #216
	mov	r6, #0
	movw	r3, #:lower16:.LC194
	mov	r8, fp
	movt	r3, #:upper16:.LC194
	mov	r9, r6
	mov	fp, r7
	str	r3, [sp, #72]
.L2145:
	ldr	r3, [sp, #64]
	ldr	r7, [r8, #20]
	add	r3, r3, r9
	add	r5, r7, #4
	ldr	r10, [r7, #72]
	str	r3, [sp, #44]
	rsb	r3, r9, #512
	mov	r0, r5
	str	r3, [sp, #48]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r7, #8]
	ldr	r4, [r10]
	str	r3, [sp, #60]
	ldr	r3, [r7, #160]
	cmp	r4, #0
	moveq	lr, r4
	str	r3, [sp, #52]
	ldr	r3, [r7, #164]
	str	r0, [sp, #68]
	mov	r0, r4
	str	r3, [sp, #56]
	ldr	r3, [r7, #168]
	ldr	r7, [r7, #172]
	str	r3, [sp, #48]
	beq	.L2144
	bl	smd_read_avail
	ldr	lr, [r10]
	mov	r4, r0
	cmp	lr, #0
	mov	r0, lr
	beq	.L2144
	bl	smd_write_avail
	mov	lr, r0
.L2144:
	ldr	ip, [r10, #8]
	rsb	r1, r9, #512
	add	r8, r8, #104
	ldr	r10, [r10, #8]
	str	r7, [sp]
	ldr	r0, [sp, #44]
	str	r4, [sp, #20]
	ldr	r7, [sp, #52]
	ldr	r3, [sp, #48]
	and	ip, ip, #1
	ubfx	r10, r10, #1, #1
	ldr	r2, [sp, #72]
	str	lr, [sp, #24]
	str	r7, [sp, #8]
	ldr	r7, [sp, #56]
	str	r3, [sp, #4]
	mov	r3, r6
	add	r6, r6, #1
	str	ip, [sp, #28]
	str	r7, [sp, #12]
	ldr	r7, [sp, #60]
	str	r10, [sp, #32]
	str	r7, [sp, #16]
	bl	scnprintf
	add	r9, r9, r0
	ldr	r1, [sp, #68]
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [fp, #212]
	cmp	r6, r3
	bcc	.L2145
	mov	r3, r9
.L2146:
	ldr	r5, [sp, #64]
	str	r3, [sp]
	ldrd	r0, [sp, #76]
	ldr	r2, [sp, #84]
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L2141:
	mov	r0, r4
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2148:
	mov	r3, #16
	str	r3, [sp, #64]
	b	.L2142
.L2154:
	mvn	r4, #11
	b	.L2141
	.fnend
	.size	debug_smd_read_stats, .-debug_smd_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_read_stats, %function
gbam_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r1
	mov	r9, r2
	strd	r10, [sp, #24]
	mov	r10, r3
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #68
	sub	sp, sp, #68
	cmp	r0, #0
	beq	.L2161
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L2165
.L2156:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #424]
	cmp	r2, #0
	ble	.L2166
	ldr	r4, [r3, #428]
	cmp	r4, #0
	beq	.L2159
	add	r6, r4, #4
	add	r7, r4, #8
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r0, [r4, #20]
	add	ip, r4, #20
	movw	r2, #:lower16:.LC195
	ldr	r1, [r4, #20]
	movt	r2, #:upper16:.LC195
	mov	r3, #0
	ubfx	r0, r0, #1, #1
	ubfx	r1, r1, #2, #1
	strd	r0, [sp, #52]
	ldr	lr, [r4, #68]
	mov	r1, #1024
	mov	r0, r5
	str	lr, [sp, #48]
	ldr	lr, [r4, #44]
	str	lr, [sp, #44]
	ldr	lr, [r4, #280]
	str	lr, [sp, #40]
	ldr	lr, [r4, #276]
	str	lr, [sp, #36]
	ldr	lr, [r4, #272]
	str	lr, [sp, #32]
	ldr	lr, [r4, #268]
	str	lr, [sp, #28]
	ldr	lr, [r4, #248]
	str	lr, [sp, #24]
	ldr	lr, [r4, #244]
	str	lr, [sp, #20]
	ldr	lr, [r4, #240]
	str	lr, [sp, #16]
	ldr	lr, [r4, #260]
	str	lr, [sp, #12]
	ldr	lr, [r4, #264]
	stm	sp, {r4, ip, lr}
	bl	scnprintf
	mov	r4, r0
	mov	r0, r7
	bl	_raw_spin_unlock
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L2159:
	str	r4, [sp]
	mov	r2, r10
	mov	r1, r9
	mov	r0, r8
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L2155:
	mov	r0, r4
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2166:
	mov	r4, #0
	b	.L2159
.L2161:
	mov	r5, #16
	b	.L2156
.L2165:
	mvn	r4, #11
	b	.L2155
	.fnend
	.size	gbam_read_stats, .-gbam_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_read_stats, %function
gsmd_ctrl_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #92
	sub	sp, sp, #92
	str	r1, [sp, #76]
	strd	r2, [sp, #80]
	cmp	r0, #0
	beq	.L2175
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	str	r3, [sp, #60]
	beq	.L2186
.L2168:
	ldr	r4, .L2187
	mov	r10, #0
	movw	r3, #:lower16:.LC197
	movw	r2, #:lower16:.LC196
	movw	r1, #:lower16:.LC198
	movt	r3, #:upper16:.LC197
	movt	r2, #:upper16:.LC196
	movt	r1, #:upper16:.LC198
	mov	fp, r10
	str	r3, [sp, #64]
	str	r2, [sp, #68]
	str	r1, [sp, #72]
.L2173:
	ldr	r9, [r4]
	ldr	r3, [sp, #60]
	cmp	r9, #0
	add	r6, r9, #108
	add	r8, r3, r10
	rsb	r3, r10, #1024
	mov	r0, r6
	str	r3, [sp, #40]
	beq	.L2170
	bl	_raw_spin_lock_irqsave
	ldr	lr, [sp, #68]
	str	r0, [sp, #52]
	ldr	r3, [r9, #92]
	ldr	ip, [r9, #88]
	ldr	r2, [r9]
	ldr	r1, [r9, #8]
	str	r3, [sp, #44]
	ldr	r3, [sp, #64]
	cmp	ip, #0
	ldr	r5, [r9, #8]
	movne	r3, lr
	cmp	r2, #0
	mov	r7, r2
	mov	ip, r2
	str	r3, [sp, #48]
	ldr	r3, [r9, #96]
	mov	r0, r2
	ubfx	r5, r5, #1, #1
	str	r3, [sp, #40]
	and	r3, r1, #1
	str	r3, [sp, #56]
	beq	.L2172
	bl	smd_read_avail
	ldr	ip, [r9]
	mov	r7, r0
	cmp	ip, #0
	mov	r0, ip
	beq	.L2172
	bl	smd_write_avail
	mov	ip, r0
.L2172:
	ldr	lr, [sp, #40]
	rsb	r1, r10, #1024
	mov	r0, r8
	mov	r3, fp
	ldr	r2, [sp, #72]
	str	r9, [sp]
	stmib	sp, {r9, lr}
	ldr	lr, [sp, #44]
	str	r5, [sp, #24]
	str	r7, [sp, #28]
	str	ip, [sp, #32]
	str	lr, [sp, #12]
	ldr	lr, [sp, #48]
	str	lr, [sp, #16]
	ldr	lr, [sp, #56]
	str	lr, [sp, #20]
	bl	scnprintf
	add	r10, r10, r0
	ldr	r1, [sp, #52]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L2170:
	add	fp, fp, #1
	add	r4, r4, #84
	cmp	fp, #6
	bne	.L2173
	ldr	r5, [sp, #60]
	str	r10, [sp]
	ldrd	r0, [sp, #76]
	ldr	r2, [sp, #84]
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L2167:
	mov	r0, r4
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2175:
	mov	r3, #16
	str	r3, [sp, #60]
	b	.L2168
.L2186:
	mvn	r4, #11
	b	.L2167
.L2188:
	.align	2
.L2187:
	.word	.LANCHOR1+512
	.fnend
	.size	gsmd_ctrl_read_stats, .-gsmd_ctrl_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_read_stats, %function
gctrl_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #68
	sub	sp, sp, #68
	str	r1, [sp, #52]
	strd	r2, [sp, #56]
	cmp	r0, #0
	beq	.L2197
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r10, r0, #0
	beq	.L2205
.L2190:
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	ldr	r3, [r9, #1016]
	cmp	r3, #0
	beq	.L2206
	mov	r5, #0
	movw	r2, #:lower16:.LC197
	str	r9, [sp, #48]
	movw	r1, #:lower16:.LC196
	movw	r0, #:lower16:.LC199
	movt	r2, #:upper16:.LC197
	movt	r1, #:upper16:.LC196
	movt	r0, #:upper16:.LC199
	mov	r7, r5
	add	r6, r9, #1020
	str	r2, [sp, #36]
	str	r1, [sp, #40]
	str	r0, [sp, #44]
.L2194:
	ldr	r4, [r6]
	mov	r2, r5
	cmp	r4, #0
	add	r8, r4, #4
	mov	r0, r8
	beq	.L2192
	bl	_raw_spin_lock_irqsave
	ldr	lr, [r4, #84]
	mov	fp, r0
	add	r0, r10, r5
	ldr	ip, [r4, #84]
	ldr	r3, [r4, #88]
	ldr	r9, [r4, #104]
	ldr	r2, [r4, #96]
	and	lr, lr, #1
	ubfx	ip, ip, #1, #1
	ldr	r1, [r4, #100]
	str	r7, [sp]
	cmp	r3, #0
	str	r4, [sp, #4]
	str	ip, [sp, #28]
	ldr	ip, [sp, #40]
	str	r9, [sp, #16]
	ldr	r9, [sp, #36]
	str	r1, [sp, #8]
	rsb	r1, r5, #1024
	str	r2, [sp, #12]
	ldr	r2, [sp, #44]
	movne	r9, ip
	str	r9, [sp, #20]
	ldr	r3, [r6, #24]
	str	lr, [sp, #24]
	bl	scnprintf
	add	r5, r5, r0
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #48]
	mov	r2, r5
	ldr	r3, [r3, #1016]
.L2192:
	add	r7, r7, #1
	add	r6, r6, #104
	cmp	r7, r3
	bcc	.L2194
.L2195:
	str	r2, [sp]
	mov	r3, r10
	ldrd	r0, [sp, #52]
	ldr	r2, [sp, #60]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r10
	bl	kfree
.L2189:
	mov	r0, r4
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2197:
	mov	r10, #16
	b	.L2190
.L2206:
	mov	r2, r3
	b	.L2195
.L2205:
	mvn	r4, #11
	b	.L2189
	.fnend
	.size	gctrl_read_stats, .-gctrl_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_read_stats, %function
ghsic_data_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #48]
	.pad #76
	sub	sp, sp, #76
	str	r1, [sp, #60]
	strd	r2, [sp, #64]
	cmp	r0, #0
	beq	.L2215
	mov	r2, #4096
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r10, r0, #0
	beq	.L2218
.L2208:
	movw	fp, #:lower16:.LANCHOR1
	movt	fp, #:upper16:.LANCHOR1
	ldr	r3, [fp, #1436]
	cmp	r3, #0
	beq	.L2219
	mov	r5, #0
	movw	r2, #:lower16:.LC200
	str	fp, [sp, #56]
	movw	r1, #:lower16:.LC201
	movt	r2, #:upper16:.LC200
	movt	r1, #:upper16:.LC201
	mov	r7, r5
	add	r6, fp, #1440
	str	r2, [sp, #48]
	str	r1, [sp, #52]
.L2210:
	ldr	r4, [r6]
	mov	r2, r5
	cmp	r4, #0
	add	r8, r4, #80
	add	r9, r4, #48
	mov	r0, r8
	beq	.L2211
	bl	_raw_spin_lock_irqsave
	ldr	lr, [r4, #180]
	rsb	r1, r5, #4096
	str	r0, [sp, #44]
	ldr	ip, [r4, #180]
	add	r0, r10, r5
	add	r6, r6, #104
	ldr	r3, [r4, #164]
	ldr	r2, [sp, #48]
	and	lr, lr, #1
	ubfx	ip, ip, #1, #1
	ubfx	r3, r3, #1, #1
	str	r3, [sp, #36]
	ldr	fp, [r4, #208]
	ldr	r3, [r6, #-80]
	str	fp, [sp, #32]
	ldr	fp, [r4, #204]
	str	fp, [sp, #28]
	ldr	fp, [r4, #72]
	str	fp, [sp, #24]
	ldr	fp, [r4, #212]
	str	fp, [sp, #20]
	ldr	fp, [r4, #188]
	str	r7, [sp]
	add	r7, r7, #1
	stmib	sp, {r4, lr}
	str	ip, [sp, #12]
	str	fp, [sp, #16]
	bl	scnprintf
	add	r5, r0, r5
	ldr	r1, [sp, #44]
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r4, #164]
	rsb	r1, r5, #4096
	mov	r8, r0
	ldr	r3, [r4, #192]
	add	r0, r10, r5
	ldr	r2, [sp, #52]
	ubfx	ip, ip, #2, #1
	str	ip, [sp, #16]
	ldr	ip, [r4, #216]
	str	ip, [sp, #12]
	ldr	ip, [r4, #200]
	str	ip, [sp, #8]
	ldr	ip, [r4, #196]
	str	ip, [sp, #4]
	ldr	ip, [r4, #40]
	str	ip, [sp]
	bl	scnprintf
	add	r5, r5, r0
	mov	r1, r8
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #56]
	mov	r2, r5
	ldr	r3, [r3, #1436]
	cmp	r3, r7
	bhi	.L2210
.L2213:
	str	r2, [sp]
	mov	r3, r10
	ldrd	r0, [sp, #60]
	ldr	r2, [sp, #68]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r10
	bl	kfree
.L2207:
	mov	r0, r4
	add	sp, sp, #76
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2211:
	add	r7, r7, #1
	add	r6, r6, #104
	cmp	r7, r3
	bcc	.L2210
	b	.L2213
.L2215:
	mov	r10, #16
	b	.L2208
.L2219:
	mov	r2, r3
	b	.L2213
.L2218:
	mvn	r4, #11
	b	.L2207
	.fnend
	.size	ghsic_data_read_stats, .-ghsic_data_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_read_stats, %function
ghsuart_ctrl_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #52
	sub	sp, sp, #52
	str	r1, [sp, #36]
	strd	r2, [sp, #40]
	cmp	r0, #0
	beq	.L2227
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r8, r0, #0
	beq	.L2236
.L2221:
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r2, [r6, #1856]
	cmp	r2, #0
	beq	.L2237
	mov	r4, #0
	movw	r10, #:lower16:.LC197
	str	r6, [sp, #28]
	movw	r9, #:lower16:.LC196
	movw	fp, #:lower16:.LC202
	movt	r9, #:upper16:.LC196
	mov	r5, r4
	movt	r10, #:upper16:.LC197
	movt	fp, #:upper16:.LC202
	str	r9, [sp, #32]
.L2225:
	mov	r3, #84
	ldr	r0, .L2238
	mov	r1, r4
	mul	r3, r3, r5
	ldr	r9, [r3, r0]
	cmp	r9, #0
	add	r6, r9, #8
	mov	r0, r6
	beq	.L2223
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r9, #92]
	mov	r3, r5
	mov	r7, r0
	ldr	r2, [r9, #96]
	add	r0, r8, r4
	ldr	r1, [r9, #100]
	ldr	lr, [r9, #104]
	str	r9, [sp]
	ldr	r9, [sp, #32]
	cmp	ip, #0
	moveq	r9, r10
	stmib	sp, {r1, r2, lr}
	mov	r2, fp
	rsb	r1, r4, #1024
	str	r9, [sp, #16]
	bl	scnprintf
	add	r4, r4, r0
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #28]
	mov	r1, r4
	ldr	r2, [r3, #1856]
.L2223:
	add	r5, r5, #1
	cmp	r5, r2
	bcc	.L2225
.L2226:
	str	r1, [sp]
	mov	r3, r8
	ldr	r0, [sp, #36]
	ldr	r1, [sp, #40]
	ldr	r2, [sp, #44]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r8
	bl	kfree
.L2220:
	mov	r0, r4
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2227:
	mov	r8, #16
	b	.L2221
.L2237:
	mov	r1, r2
	b	.L2226
.L2236:
	mvn	r4, #11
	b	.L2220
.L2239:
	.align	2
.L2238:
	.word	.LANCHOR1+1860
	.fnend
	.size	ghsuart_ctrl_read_stats, .-ghsuart_ctrl_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_read_stats, %function
ghsuart_data_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #76
	sub	sp, sp, #76
	str	r1, [sp, #60]
	strd	r2, [sp, #64]
	cmp	r0, #0
	beq	.L2248
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r8, r0, #0
	beq	.L2251
.L2241:
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	ldr	r3, [r7, #2028]
	cmp	r3, #0
	beq	.L2246
	mov	r5, #0
	movw	r1, #:lower16:.LC203
	str	r7, [sp, #56]
	movw	r0, #:lower16:.LC204
	movt	r1, #:upper16:.LC203
	movt	r0, #:upper16:.LC204
	mov	r2, r3
	mov	r6, r5
	add	fp, r7, #2032
	str	r1, [sp, #48]
	str	r0, [sp, #52]
.L2243:
	ldr	r4, [fp]
	mov	r3, r5
	cmp	r4, #0
	add	r7, r4, #104
	add	r9, r4, #72
	mov	r0, r7
	beq	.L2244
	bl	_raw_spin_lock_irqsave
	ldr	lr, [r4, #188]
	str	r0, [sp, #44]
	add	r0, r8, r5
	ldr	ip, [r4, #188]
	add	fp, fp, #84
	ldr	r1, [r4, #188]
	ldr	r2, [r4, #184]
	ldr	r3, [fp, #-60]
	and	lr, lr, #1
	ubfx	ip, ip, #1, #1
	ubfx	r1, r1, #2, #1
	ubfx	r2, r2, #1, #1
	str	r2, [sp, #32]
	ldr	r2, [r4, #96]
	str	r2, [sp, #28]
	ldr	r10, [r4, #212]
	ldr	r2, [sp, #48]
	str	r10, [sp, #24]
	ldr	r10, [r4, #204]
	str	r6, [sp]
	add	r6, r6, #1
	stmib	sp, {r4, lr}
	str	ip, [sp, #12]
	str	r1, [sp, #16]
	rsb	r1, r5, #1024
	str	r10, [sp, #20]
	bl	scnprintf
	add	r5, r0, r5
	ldr	r1, [sp, #44]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r4, #184]
	rsb	r1, r5, #1024
	mov	r7, r0
	ldr	r3, [r4, #208]
	add	r0, r8, r5
	ldr	r2, [sp, #52]
	ubfx	ip, ip, #2, #1
	str	ip, [sp, #4]
	ldr	ip, [r4, #64]
	str	ip, [sp]
	bl	scnprintf
	add	r5, r5, r0
	mov	r1, r7
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #56]
	ldr	r2, [r3, #2028]
	mov	r3, r5
	cmp	r2, r6
	bhi	.L2243
.L2246:
	str	r3, [sp]
	ldrd	r0, [sp, #60]
	mov	r3, r8
	ldr	r2, [sp, #68]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r8
	bl	kfree
.L2240:
	mov	r0, r4
	add	sp, sp, #76
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2244:
	add	r6, r6, #1
	add	fp, fp, #84
	cmp	r6, r2
	bcc	.L2243
	b	.L2246
.L2248:
	mov	r8, #16
	b	.L2241
.L2251:
	mvn	r4, #11
	b	.L2240
	.fnend
	.size	ghsuart_data_read_stats, .-ghsuart_data_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_read_stats, %function
debug_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	strd	r8, [sp, #16]
	mov	r9, r1
	ldr	r4, [r6]
	strd	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #32]
	mov	fp, r3
	.pad #28
	sub	sp, sp, #28
	cmp	r6, r4
	moveq	lr, #0
	beq	.L2254
	movw	r8, #:lower16:debug_buffer
	movw	r7, #:lower16:.LC205
	sub	r4, r4, #4
	movt	r8, #:upper16:debug_buffer
	movt	r7, #:upper16:.LC205
	mov	r5, #0
.L2253:
	ldr	ip, [r4, #20]
	rsb	r1, r5, #4096
	add	r0, r8, r5
	mov	r2, r7
	mov	lr, r5
	cmp	ip, #0
	beq	.L2255
	ldr	lr, [ip, #136]
	ldr	r3, [r4]
	str	lr, [sp, #16]
	ldr	lr, [ip, #132]
	str	lr, [sp, #12]
	ldr	lr, [ip, #128]
	str	lr, [sp, #8]
	ldr	lr, [ip, #84]
	ldr	lr, [lr, #4]
	str	lr, [sp, #4]
	ldr	ip, [ip, #88]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	scnprintf
	ldr	r4, [r4, #4]
	add	r5, r5, r0
	mov	lr, r5
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L2253
.L2254:
	movw	r3, #:lower16:debug_buffer
	mov	r2, fp
	str	lr, [sp]
	mov	r1, r10
	mov	r0, r9
	movt	r3, #:upper16:debug_buffer
	bl	simple_read_from_buffer
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2255:
	ldr	r4, [r4, #4]
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L2253
	b	.L2254
	.fnend
	.size	debug_read_stats, .-debug_read_stats
	.section	.exit.text,"ax",%progbits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_exit, %function
gether_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3404]
	b	destroy_workqueue
	.fnend
	.size	gether_exit, .-gether_exit
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_function_cleanup, %function
qdss_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2202
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L2271
.L2261:
	movw	r8, #:lower16:.LANCHOR0
	movt	r8, #:upper16:.LANCHOR0
	ldr	r5, [r8, #284]!
	cmp	r5, r8
	ldr	r4, [r5]
	beq	.L2260
	ldr	r6, .L2272
	b	.L2262
.L2264:
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, r8
	ldr	r3, [r4]
	beq	.L2260
.L2265:
	mov	r5, r4
	mov	r4, r3
.L2262:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r0, [r5, #80]
	bl	destroy_workqueue
	ldr	r3, [r5, #12]
	mov	r1, r7
	mov	r0, r6
	cmp	r3, #0
	bne	.L2264
	mov	r0, r5
	bl	list_del
	sub	r0, r5, #116
	bl	kfree
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, r8
	ldr	r3, [r4]
	bne	.L2265
.L2260:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2271:
	movw	r1, #:lower16:.LC206
	ldr	r0, .L2272+4
	movt	r1, #:upper16:.LC206
	bl	__dynamic_pr_debug
	b	.L2261
.L2273:
	.align	2
.L2272:
	.word	.LANCHOR1+3408
	.word	.LANCHOR2+2184
	.fnend
	.size	qdss_function_cleanup, .-qdss_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_send_cbits_tomodem, %function
gsmd_ctrl_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #5
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #16
	sub	sp, sp, #16
	bhi	.L2275
	movw	ip, #:lower16:.LANCHOR1
	mov	r3, #84
	movt	ip, #:upper16:.LANCHOR1
	mla	r3, r3, r1, ip
	ldr	r4, [r3, #512]
	cmp	r4, #0
	beq	.L2275
	cmp	r0, #0
	beq	.L2295
	ands	r2, r2, #1
	bne	.L2296
	ldr	r1, [r4, #88]
	mov	r3, r2
	mov	r5, #2
	mov	ip, r5
	mov	r6, r2
	cmp	r1, r3
	beq	.L2274
.L2298:
	ldr	r1, [r4, #8]
	str	r3, [r4, #88]
	tst	r1, #1
	beq	.L2274
	movw	r0, #:lower16:.LANCHOR2
	movw	r1, #2226
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r1, [r0, r1]
	tst	r1, #4
	bne	.L2297
.L2282:
	ldr	r0, [r4]
	mov	r2, r5
	mov	r1, r6
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	smd_tiocmset
.L2296:
	ldr	r1, [r4, #88]
	mov	r6, #2
	mov	r5, #0
	mov	r3, r6
	mov	ip, r5
	cmp	r1, r3
	bne	.L2298
.L2274:
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2297:
	movw	r1, #:lower16:.LC208
	strd	r2, [sp]
	add	r0, r0, #2208
	movt	r1, #:upper16:.LC208
	str	ip, [sp, #8]
	ldr	r2, .L2299
	bl	__dynamic_pr_debug
	b	.L2282
.L2275:
	mov	r2, r1
	ldr	r1, .L2299
	movw	r0, #:lower16:.LC123
	movt	r0, #:upper16:.LC123
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L2295:
	ldr	r1, .L2299
	movw	r0, #:lower16:.LC207
	movt	r0, #:upper16:.LC207
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L2300:
	.align	2
.L2299:
	.word	.LANCHOR3+1140
	.fnend
	.size	gsmd_ctrl_send_cbits_tomodem, .-gsmd_ctrl_send_cbits_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_command_complete, %function
rmnet_smd_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r8, [r4, #84]
	cmp	r2, #0
	blt	.L2309
	add	r6, r4, #164
	mov	r5, r1
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r2, [r4, #308]
	ldr	r3, [r4, #448]
	cmp	r2, #0
	add	r3, r3, #1
	str	r3, [r4, #448]
	beq	.L2310
.L2303:
	mov	r3, r4
	ldr	r7, [r3, #108]!
	cmp	r7, r3
	beq	.L2311
	mov	r0, r7
	bl	list_del
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r1, [r5]
	ldr	r2, [r5, #48]
	ldr	r0, [r7, #-8]
	bl	memcpy
	ldr	r3, [r5, #48]
	mov	r0, r6
	str	r3, [r7, #-4]
	bl	_raw_spin_lock
	mov	r0, r7
	add	r2, r4, #124
	ldr	r1, [r4, #128]
	bl	__list_add
	mov	r0, r6
.L2308:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L2310:
	ldr	r0, [r4, #260]
	bl	smd_write_avail
	ldr	r3, [r5, #48]
	cmp	r0, r3
	strcc	r3, [r4, #308]
	bcc	.L2303
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r4, #260]
	ldr	r1, [r5]
	ldr	r2, [r5, #48]
	bl	smd_write
	ldr	r3, [r5, #48]
	cmp	r3, r0
	beq	.L2305
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC210
	movt	r1, #:upper16:.LC210
	add	r0, r0, #32
	bl	dev_err
.L2305:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r4, #452]
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #452]
	b	.L2308
.L2309:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC209
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC209
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
.L2311:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC211
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC211
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
	.fnend
	.size	rmnet_smd_command_complete, .-rmnet_smd_command_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_complete_epout, %function
rmnet_smd_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	add	r7, r1, #36
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r1, #44]
	ldr	r8, [r4, #84]
	add	r6, r4, #164
	cmn	r3, #104
	beq	.L2333
	cmp	r3, #0
	mov	r5, r1
	beq	.L2315
	cmn	r3, #108
	beq	.L2333
	ldr	r2, [r0, #4]
	movw	r1, #:lower16:.LC212
	ldr	r0, [r8]
	movt	r1, #:upper16:.LC212
	ldr	lr, [r5, #4]
	ldr	ip, [r5, #48]
	add	r0, r0, #32
	stm	sp, {ip, lr}
	bl	dev_err
.L2333:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r1, [r4, #152]
	mov	r0, r7
	add	r2, r4, #148
.L2332:
	bl	__list_add
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock
.L2315:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r2, [r4, #372]
	ldr	r3, [r4, #432]
	cmp	r2, #0
	add	r3, r3, #1
	str	r3, [r4, #432]
	bne	.L2316
	ldr	r0, [r4, #324]
	bl	smd_write_avail
	ldr	r3, [r5, #48]
	cmp	r0, r3
	strcc	r3, [r4, #372]
	bcc	.L2316
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r4, #324]
	ldr	r1, [r5]
	ldr	r2, [r5, #48]
	bl	smd_write
	ldr	r3, [r5, #48]
	cmp	r3, r0
	beq	.L2318
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC213
	movt	r1, #:upper16:.LC213
	add	r0, r0, #32
	bl	dev_err
.L2318:
	mov	r0, r6
	add	r9, r4, #148
	bl	_raw_spin_lock
	mov	r0, r7
	mov	r2, r9
	ldr	r1, [r4, #152]
	ldr	r3, [r4, #436]
	add	r3, r3, #1
	str	r3, [r4, #436]
	bl	__list_add
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r0, r6
	ldr	r10, [r4, #84]
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	b	.L2319
.L2321:
	bl	list_del
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #88]
	mov	r1, r8
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	r8, #0
	mov	r7, r0
	bne	.L2334
.L2319:
	ldr	r5, [r4, #148]
	cmp	r9, r5
	mov	r0, r5
	sub	r8, r5, #36
	bne	.L2321
.L2320:
	mov	r1, r7
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L2316:
	mov	r0, r7
	add	r2, r4, #156
	ldr	r1, [r4, #160]
	b	.L2332
.L2334:
	ldr	r0, [r10]
	movw	r1, #:lower16:.LC214
	mov	r2, r8
	movt	r1, #:upper16:.LC214
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r9
	mov	r0, r5
	ldr	r1, [r4, #152]
	bl	__list_add
	b	.L2320
	.fnend
	.size	rmnet_smd_complete_epout, .-rmnet_smd_complete_epout
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_control_rx_tlet, %function
rmnet_control_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #164
	add	r7, r0, #124
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r0, #84]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #124]
	mov	r10, r0
	cmp	r5, r7
	beq	.L2340
	add	r8, r4, #108
	b	.L2336
.L2338:
	bl	list_del
	ldr	r3, [r4, #448]
	mov	r1, r10
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #448]
	bl	_raw_spin_unlock_irqrestore
	ldmdb	r5, {r1, r2}
	ldr	r0, [r4, #260]
	bl	smd_write
	mov	fp, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #-4]
	mov	r10, r0
	mov	r2, r8
	mov	r0, r5
	cmp	r3, fp
	bne	.L2346
	ldr	r1, [r4, #112]
	ldr	r3, [r4, #452]
	add	r3, r3, #1
	str	r3, [r4, #452]
	bl	__list_add
	ldr	r5, [r4, #124]
	cmp	r5, r7
	beq	.L2340
.L2336:
	ldr	r0, [r4, #260]
	bl	smd_write_avail
	ldr	r3, [r5, #-4]
	cmp	r0, r3
	mov	r0, r5
	bge	.L2338
	movw	r2, #:lower16:.LANCHOR2
	str	r3, [r4, #308]
	movw	r3, #2250
	movt	r2, #:upper16:.LANCHOR2
	ldrh	r3, [r2, r3]
	tst	r3, #4
	bne	.L2347
.L2337:
	mov	r1, r10
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L2340:
	mov	r3, #0
	str	r3, [r4, #308]
	b	.L2337
.L2346:
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC210
	movt	r1, #:upper16:.LC210
	add	r0, r0, #32
	bl	dev_err
	b	.L2337
.L2347:
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC215
	movt	r2, #:upper16:.LC215
	ldr	r0, .L2348
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L2337
.L2349:
	.align	2
.L2348:
	.word	.LANCHOR2+2232
	.fnend
	.size	rmnet_control_rx_tlet, .-rmnet_control_rx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_write_w, %function
grmnet_ctrl_smd_write_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r6, [r0, #16]
	add	r6, r6, #108
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r0, [r5, #-68]
	cmp	r0, #0
	beq	.L2351
	ldr	r4, [r5, #-28]
	sub	r8, r5, #28
	cmp	r8, r4
	bne	.L2352
	b	.L2351
.L2360:
	bl	list_del
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldmdb	r4, {r1, r2}
	ldr	r0, [r5, #-68]
	bl	smd_write
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-4]
	mov	r7, r0
	cmp	r3, r10
	bne	.L2359
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r9
	bl	kfree
	ldr	r0, [r5, #-68]
	ldr	r3, [r5, #24]
	cmp	r0, #0
	add	r3, r3, #1
	str	r3, [r5, #24]
	beq	.L2351
	ldr	r4, [r5, #-28]
	cmp	r8, r4
	beq	.L2351
.L2352:
	bl	smd_write_avail
	ldr	r3, [r4, #-4]
	sub	r9, r4, #8
	cmp	r0, r3
	mov	r0, r4
	bge	.L2360
.L2351:
	mov	r1, r7
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L2359:
	movw	r0, #:lower16:.LC216
	mov	r2, r10
	ldr	r1, .L2361
	movt	r0, #:upper16:.LC216
	bl	printk
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r9
	bl	kfree
	b	.L2351
.L2362:
	.align	2
.L2361:
	.word	.LANCHOR3+1172
	.fnend
	.size	grmnet_ctrl_smd_write_w, .-grmnet_ctrl_smd_write_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_complete_epout, %function
rmnet_mux_smd_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r4, #364]
	cmp	r3, #0
	beq	.L2386
	ldr	r3, [r1, #44]
	add	r8, r1, #36
	add	r6, r4, #368
	ldr	r9, [r4, #84]
	cmn	r3, #104
	beq	.L2385
	cmp	r3, #0
	beq	.L2367
	cmn	r3, #108
	beq	.L2385
	ldr	r2, [r0, #4]
	movw	r1, #:lower16:.LC217
	ldr	r0, [r9]
	movt	r1, #:upper16:.LC217
	ldr	lr, [r5, #4]
	ldr	ip, [r5, #48]
	add	r0, r0, #32
	stm	sp, {ip, lr}
	bl	dev_err
.L2385:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r1, [r4, #116]
	mov	r0, r8
	add	r2, r4, #112
.L2384:
	bl	__list_add
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock
.L2367:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r4, #176]
	cmp	r3, #0
	bne	.L2368
	ldr	r0, [r4, #128]
	bl	smd_write_avail
	ldr	r3, [r5, #48]
	cmp	r0, r3
	strcc	r3, [r4, #176]
	bcs	.L2387
.L2368:
	mov	r0, r8
	add	r2, r4, #120
	ldr	r1, [r4, #124]
	b	.L2384
.L2386:
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	ldr	r3, [r3, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	bx	r3	@ indirect register sibling call
.L2387:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r4, #128]
	ldr	r1, [r5]
	ldr	r2, [r5, #48]
	bl	smd_write
	ldr	r3, [r5, #48]
	cmp	r3, r0
	beq	.L2370
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC218
	movt	r1, #:upper16:.LC218
	add	r0, r0, #32
	bl	dev_err
.L2370:
	ldr	r3, [r4, #400]
	mov	r0, r6
	add	r9, r4, #112
	add	r3, r3, #1
	str	r3, [r4, #400]
	bl	_raw_spin_lock
	mov	r2, r9
	ldr	r1, [r4, #116]
	mov	r0, r8
	bl	__list_add
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r0, r6
	ldr	r10, [r4, #84]
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	b	.L2371
.L2373:
	bl	list_del
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #88]
	mov	r1, r8
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	r8, #0
	mov	r7, r0
	bne	.L2388
.L2371:
	ldr	r5, [r4, #112]
	cmp	r9, r5
	mov	r0, r5
	sub	r8, r5, #36
	bne	.L2373
.L2372:
	mov	r1, r7
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L2388:
	ldr	r0, [r10]
	movw	r1, #:lower16:.LC214
	mov	r2, r8
	movt	r1, #:upper16:.LC214
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r9
	mov	r0, r5
	ldr	r1, [r4, #116]
	bl	__list_add
	b	.L2372
	.fnend
	.size	rmnet_mux_smd_complete_epout, .-rmnet_mux_smd_complete_epout
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_complete_epin, %function
rmnet_smd_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	add	r7, r1, #36
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	add	r6, r4, #140
	add	r5, r4, #164
	cmn	r2, #104
	beq	.L2391
	cmp	r2, #0
	beq	.L2392
	cmn	r2, #108
	beq	.L2391
	ldr	r3, [r4, #84]
	movw	r1, #:lower16:.LC219
	movt	r1, #:upper16:.LC219
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L2392:
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #140]
	cmp	r3, r6
	beq	.L2409
	mov	r2, r6
	mov	r0, r7
	ldr	r1, [r4, #144]
	bl	__list_add
	ldr	r3, [r4, #424]
	add	r3, r3, #1
	str	r3, [r4, #424]
.L2396:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L2409:
	mov	r2, r6
	mov	r0, r7
	ldr	r1, [r4, #144]
	bl	__list_add
	ldr	r3, [r4, #424]
	add	r1, r4, #332
	mov	r0, #0
	add	r6, r4, #328
	add	r3, r3, #1
	str	r3, [r4, #424]
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L2396
	mov	r0, r6
	bl	__tasklet_schedule
	b	.L2396
.L2391:
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r2, r6
	mov	r0, r7
	ldr	r1, [r4, #144]
	bl	__list_add
	b	.L2396
	.fnend
	.size	rmnet_smd_complete_epin, .-rmnet_smd_complete_epin
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_complete_epin, %function
rmnet_mux_smd_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r1, #32]
	ldr	r3, [r5, #364]
	cmp	r3, #0
	beq	.L2428
	ldr	r2, [r1, #44]
	add	r7, r5, #104
	add	r6, r5, #368
	add	r4, r1, #36
	cmn	r2, #104
	beq	.L2413
	cmp	r2, #0
	beq	.L2414
	cmn	r2, #108
	beq	.L2413
	ldr	r3, [r5, #84]
	movw	r1, #:lower16:.LC220
	movt	r1, #:upper16:.LC220
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L2414:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r5, #104]
	mov	r2, r7
	cmp	r3, r7
	beq	.L2415
	mov	r0, r4
	ldr	r1, [r5, #108]
	bl	__list_add
.L2416:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L2428:
	mov	r6, r0
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L2413:
	mov	r0, r6
	bl	_raw_spin_lock
	mov	r2, r7
	mov	r0, r4
	ldr	r1, [r5, #108]
	bl	__list_add
	b	.L2416
.L2415:
	mov	r0, r4
	ldr	r1, [r5, #108]
	bl	__list_add
	add	r1, r5, #136
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r0, r5, #132
	bne	.L2416
	bl	__tasklet_schedule
	b	.L2416
	.fnend
	.size	rmnet_mux_smd_complete_epin, .-rmnet_mux_smd_complete_epin
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_setup, %function
rmnet_smd_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r0, #168]
	ldrh	r9, [r1, #4]	@ unaligned
	ldrh	r8, [r1, #2]	@ unaligned
	ldr	r7, [r2, #24]
	cmp	r3, #0
	ldrh	r6, [r1, #6]	@ unaligned
	ldr	r10, [r7, #4]
	beq	.L2441
	ldrh	r3, [r1]	@ unaligned
	movw	r2, #8482
	mov	r4, r1
	mov	r5, r0
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r2
	beq	.L2432
	movw	r2, #41217
	cmp	r3, r2
	beq	.L2433
	cmp	r3, #8448
	beq	.L2444
.L2431:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #2274
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	mvneq	r6, #94
	bne	.L2445
.L2429:
	mov	r0, r6
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2433:
	cmp	r8, #0
	bne	.L2431
	add	fp, r0, #164
	mov	r0, fp
	bl	_raw_spin_lock
	mov	r2, r5
	ldr	r3, [r2, #132]!
	cmp	r3, r2
	beq	.L2446
	mov	r0, r3
	str	r3, [sp, #20]
	bl	list_del
	mov	r0, fp
	bl	_raw_spin_unlock
	ldr	r3, [sp, #20]
	ldr	r0, [r10]
	ldmdb	r3, {r1, r2}
	bl	memcpy
	ldr	r3, [sp, #20]
	mov	r0, fp
	ldr	r6, [r3, #-4]
	bl	_raw_spin_lock
	ldr	r1, [r5, #116]
	add	r2, r5, #116
	ldr	r3, [sp, #20]
	cmp	r2, r1
	ldr	r1, [r5, #120]
	mov	r0, r3
	beq	.L2437
	bl	__list_add
.L2438:
	mov	r0, fp
	bl	_raw_spin_unlock
	movw	r3, #:lower16:rmnet_txcommand_complete
	str	r5, [r10, #32]
	movt	r3, #:upper16:rmnet_txcommand_complete
	str	r3, [r10, #28]
	b	.L2439
.L2444:
	movw	r3, #:lower16:rmnet_smd_command_complete
	str	r0, [r10, #32]
	movt	r3, #:upper16:rmnet_smd_command_complete
	str	r3, [r10, #28]
.L2435:
	ldrb	r3, [r10, #26]	@ zero_extendqisi2
	str	r6, [r10, #4]
	mov	r1, r10
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r10, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	bge	.L2429
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC156
	mov	r2, r6
	movt	r1, #:upper16:.LC156
	add	r0, r0, #32
	bl	dev_err
	b	.L2429
.L2432:
	ands	r1, r8, #1
	ldr	r0, [r0, #260]
	movne	r2, #0
	movne	r1, #2
	moveq	r2, #2
	bl	smd_tiocmset
	mov	r6, r0
.L2439:
	cmp	r6, #0
	bge	.L2435
	b	.L2429
.L2437:
	bl	__list_add
	mov	r0, r8
	add	r1, r5, #268
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r0, r5, #264
	bne	.L2438
	bl	__tasklet_schedule
	b	.L2438
.L2445:
	ldr	r1, [r7]
	str	r8, [sp, #4]
	movw	r2, #:lower16:.LC17
	ldrb	r3, [r4]	@ zero_extendqisi2
	str	r9, [sp, #8]
	movt	r2, #:upper16:.LC17
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	add	r0, r0, #2256
	add	r1, r1, #32
	str	ip, [sp]
	str	r6, [sp, #12]
	mvn	r6, #94
	bl	__dynamic_dev_dbg
	b	.L2429
.L2446:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC169
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC169
	ldrb	r2, [r4]	@ zero_extendqisi2
	strd	r8, [sp]
	str	r6, [sp, #8]
	add	r0, r0, #32
	bl	_dev_info
	mov	r0, fp
	bl	_raw_spin_unlock
	b	.L2431
.L2441:
	mvn	r6, #106
	b	.L2429
	.fnend
	.size	rmnet_smd_setup, .-rmnet_smd_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_unbind, %function
rmnet_smd_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	add	r0, r1, #284
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	bl	tasklet_kill
	add	r0, r4, #264
	bl	tasklet_kill
	add	r0, r4, #348
	bl	tasklet_kill
	add	r0, r4, #328
	bl	tasklet_kill
	ldr	r0, [r4, #388]
	bl	flush_workqueue
	mov	r0, r4
	bl	rmnet_smd_free_buf
	mov	r3, #0
	ldr	r0, [r4, #388]
	str	r3, [r4, #88]
	str	r3, [r4, #92]
	str	r3, [r4, #96]
	bl	destroy_workqueue
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3412]
	bl	debugfs_remove_recursive
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	rmnet_smd_unbind, .-rmnet_smd_unbind
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_exit, %function
ghsuart_ctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3416]
	b	debugfs_remove_recursive
	.fnend
	.size	ghsuart_ctrl_exit, .-ghsuart_ctrl_exit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_exit, %function
ghsuart_data_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3420]
	b	debugfs_remove_recursive
	.fnend
	.size	ghsuart_data_exit, .-ghsuart_data_exit
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_cleanup, %function
diag_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR0
	str	r10, [sp, #24]
	movt	r8, #:upper16:.LANCHOR0
	str	lr, [sp, #28]
	ldr	r0, [r3, #3424]
	bl	debugfs_remove_recursive
	ldr	r5, [r8]
	cmp	r5, r8
	ldr	r4, [r5]
	beq	.L2451
	ldr	r6, .L2458
	b	.L2452
.L2454:
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, r8
	ldr	r3, [r4]
	beq	.L2451
.L2455:
	mov	r5, r4
	mov	r4, r3
.L2452:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #12]
	mov	r7, r0
	mov	r0, r6
	mov	r1, r7
	cmp	r3, #0
	bne	.L2454
	mov	r0, r5
	sub	r9, r5, #4
	bl	list_del
	mov	r0, r9
	bl	kfree
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, r8
	ldr	r3, [r4]
	bne	.L2455
.L2451:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2459:
	.align	2
.L2458:
	.word	.LANCHOR1+3428
	.fnend
	.size	diag_function_cleanup, .-diag_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_function_cleanup, %function
rmnet_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r3, [r4, #3432]
	str	lr, [sp, #12]
	cmp	r3, #0
	beq	.L2461
	ldr	r6, .L2468
	mov	r5, #0
.L2462:
	ldr	r0, [r6, #20]
	add	r5, r5, #1
	add	r6, r6, #24
	bl	kfree
	ldr	r3, [r4, #3432]
	cmp	r5, r3
	bcc	.L2462
.L2461:
	ldr	r0, [r4, #3436]
	bl	debugfs_remove_recursive
	mov	r3, #0
	ldr	r6, [sp, #8]
	str	r3, [r4, #3432]
	str	r3, [r4, #3440]
	str	r3, [r4, #3444]
	str	r3, [r4, #3448]
	str	r3, [r4, #3452]
	str	r3, [r4, #3456]
	str	r3, [r4, #3460]
	str	r3, [r4, #3464]
	str	r3, [r4, #3468]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2469:
	.align	2
.L2468:
	.word	.LANCHOR1+3316
	.fnend
	.size	rmnet_function_cleanup, .-rmnet_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_data_tx_tlet, %function
rmnet_data_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #164
	strd	r8, [sp, #16]
	add	r8, r0, #140
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r0, #84]
	b	.L2474
.L2484:
	ldr	r0, [r4, #324]
	bl	smd_read_avail
	cmp	r0, r7
	mov	r0, r6
	blt	.L2470
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #140]
	mov	r10, r0
	cmp	r8, r5
	mov	r0, r5
	sub	fp, r5, #36
	beq	.L2482
	bl	list_del
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r7
	ldr	r1, [r5, #-36]
	ldr	r0, [r4, #324]
	bl	smd_read
	str	r0, [r5, #-32]
	ldr	r0, [r4, #92]
	mov	r2, #32
	mov	r1, fp
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	mov	r0, r6
	bne	.L2483
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #428]
	mov	r1, r0
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #428]
	bl	_raw_spin_unlock_irqrestore
.L2474:
	ldr	r0, [r4, #324]
	bl	smd_cur_packet_size
	subs	r7, r0, #0
	bne	.L2484
.L2470:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2482:
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2298
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	beq	.L2470
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC221
	ldr	r0, .L2485
	movt	r2, #:upper16:.LC221
	add	r1, r1, #32
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	__dynamic_dev_dbg
.L2483:
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC222
	movt	r1, #:upper16:.LC222
	add	r0, r0, #32
	bl	dev_err
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r1, [r4, #144]
	mov	r0, r5
	mov	r2, r8
	bl	__list_add
	mov	r1, r7
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L2486:
	.align	2
.L2485:
	.word	.LANCHOR2+2280
	.fnend
	.size	rmnet_data_tx_tlet, .-rmnet_data_tx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_control_tx_tlet, %function
rmnet_control_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #:lower16:.LC1
	mov	r4, r0
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LC1
	add	r6, r0, #164
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #84]
	.pad #12
	sub	sp, sp, #12
	str	r3, [sp]
	str	r2, [sp, #4]
.L2492:
	add	r8, r4, #116
.L2491:
	add	r7, r4, #132
.L2490:
	ldr	r0, [r4, #260]
	add	r5, r4, #172
	bl	smd_cur_packet_size
	subs	r9, r0, #0
	beq	.L2487
	ldr	r0, [r4, #260]
	bl	smd_read_avail
	cmp	r0, r9
	mov	r0, r6
	blt	.L2487
	bl	_raw_spin_lock_irqsave
	ldr	r10, [r4, #116]
	mov	fp, r0
	cmp	r10, r8
	mov	r0, r10
	beq	.L2499
	bl	list_del
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r9
	ldr	r1, [r10, #-8]
	ldr	r0, [r4, #260]
	bl	smd_read
	str	r0, [r10, #-4]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r2, r7
	ldr	r1, [r4, #136]
	ldr	r3, [r4, #444]
	mov	r0, r10
	add	r3, r3, #1
	str	r3, [r4, #444]
	bl	__list_add
	mov	r1, r9
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r9, [r4, #84]
	ldr	r3, [r4, #100]
	ldr	r3, [r3]
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r5]
	add	r2, r2, #1
	strex	r1, r2, [r5]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #1
	bne	.L2490
	mov	r1, #0
	mvn	r0, #94
	strb	r0, [r3]
	strb	r2, [r3, #1]
	mov	r2, #32
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	r0, [r4, #104]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	strb	r1, [r3, #6]
	strb	r1, [r3, #7]
	ldrd	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bge	.L2491
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r1, r3, [r5]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r9]
	ldr	r1, [sp]
	add	r0, r0, #32
	bl	dev_err
	b	.L2492
.L2487:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2499:
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LC223
	movt	r1, #:upper16:.LC223
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mov	r1, fp
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_control_tx_tlet, .-rmnet_control_tx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_tx_pull, %function
gsmd_tx_pull:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r4, #:lower16:.LANCHOR2
	movw	r3, #2322
	movt	r4, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	sub	r2, r0, #52
	strd	r8, [sp, #16]
	mov	r5, r0
	sub	r9, r0, #8
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r4, r3]
	.pad #20
	sub	sp, sp, #20
	ldr	r7, [r0, #20]
	str	r2, [sp, #12]
	tst	r3, #4
	bne	.L2536
.L2501:
	sub	r6, r5, #48
	mov	r0, r6
	bl	_raw_spin_lock_irq
	ldr	r3, [r5, #16]
	cmp	r3, #0
	beq	.L2537
	ldr	r0, [r7]
	ldr	r8, [r3, #88]
	cmp	r0, #0
	beq	.L2512
	ldr	r3, [r5, #-8]
	cmp	r3, r9
	bne	.L2517
	b	.L2512
.L2539:
	ldr	r4, [r5, #-8]
	mov	r0, r4
	sub	fp, r4, #36
	bl	list_del
	cmp	r10, #2048
	ldr	r1, [r4, #-36]
	movlt	r2, r10
	movge	r2, #2048
	ldr	r0, [r7]
	bl	smd_read
	str	r0, [r4, #-32]
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	ldr	r3, [r8, #8]
	mov	r1, fp
	mov	r2, #208
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irq
	cmp	r10, #0
	bne	.L2538
	ldr	r2, [r4, #-32]
	ldr	r3, [r5, #120]
	add	r3, r3, r2
	str	r3, [r5, #120]
	ldr	r0, [r7]
	cmp	r0, #0
	beq	.L2516
	ldr	r3, [r5, #-8]
	cmp	r9, r3
	beq	.L2516
.L2517:
	bl	smd_read_avail
	subs	r10, r0, #0
	bne	.L2539
.L2516:
	ldr	r3, [r5, #16]
	cmp	r3, #0
	bne	.L2512
.L2518:
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq
.L2512:
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L2518
	ldr	r3, [r5, #-8]
	cmp	r9, r3
	beq	.L2518
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, r5
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3400]
	bl	queue_work_on
	b	.L2518
.L2537:
	movw	r3, #2346
	ldrh	r3, [r4, r3]
	tst	r3, #4
	bne	.L2540
.L2503:
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	sub	r3, r5, #52
	cmp	r3, #0
	beq	.L2500
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
	cmp	r0, #0
	bne	.L2507
.L2500:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2508:
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
	bl	smd_read
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
.L2507:
	bl	smd_read_avail
	subs	r2, r0, #0
	mov	r1, #0
	bne	.L2508
	b	.L2500
.L2536:
	ldr	ip, [r5, #-52]
	movw	r1, #:lower16:.LC224
	mov	r3, r2
	movt	r1, #:upper16:.LC224
	ldr	r2, .L2542
	add	r0, r4, #2304
	str	ip, [sp]
	str	r9, [sp, #4]
	bl	__dynamic_pr_debug
	b	.L2501
.L2540:
	movw	r1, #:lower16:.LC225
	ldr	r2, .L2542
	movt	r1, #:upper16:.LC225
	ldr	r0, .L2542+4
	bl	__dynamic_pr_debug
	b	.L2503
.L2538:
	movw	r0, #:lower16:.LC226
	ldr	r3, [r5, #-52]
	str	r10, [sp]
	movt	r0, #:upper16:.LC226
	ldr	r1, .L2542
	ldr	r2, [sp, #12]
	bl	printk
	ldr	r3, [r5, #16]
	cmp	r3, #0
	beq	.L2541
	mov	r0, r4
	mov	r1, r9
	ldr	r2, [r5, #-8]
	bl	__list_add
	b	.L2516
.L2541:
	ldr	r0, [r4, #-36]
	bl	kfree
	ldr	r3, [r8, #8]
	mov	r1, fp
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	b	.L2516
.L2543:
	.align	2
.L2542:
	.word	.LANCHOR3+1196
	.word	.LANCHOR2+2328
	.fnend
	.size	gsmd_tx_pull, .-gsmd_tx_pull
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_data_tx_tlet, %function
rmnet_mux_smd_data_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r0, #84]
	ldr	r3, [r0, #372]
	cmp	r3, #0
	beq	.L2544
	mov	r4, r0
	add	r7, r0, #368
	add	r8, r0, #104
	b	.L2548
.L2562:
	ldr	r0, [r4, #128]
	bl	smd_read_avail
	cmp	r0, r6
	mov	r0, r7
	blt	.L2544
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #104]
	mov	r10, r0
	cmp	r8, r5
	mov	r0, r5
	sub	fp, r5, #36
	beq	.L2560
	bl	list_del
	mov	r1, r10
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r6
	ldr	r1, [r5, #-36]
	ldr	r0, [r4, #128]
	bl	smd_read
	str	r0, [r5, #-32]
	ldr	r0, [r4, #92]
	mov	r1, fp
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L2561
	ldr	r2, [r4, #372]
	ldr	r3, [r4, #408]
	cmp	r2, #0
	add	r3, r3, #1
	str	r3, [r4, #408]
	beq	.L2544
.L2548:
	ldr	r0, [r4, #128]
	bl	smd_cur_packet_size
	subs	r6, r0, #0
	bne	.L2562
.L2544:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2560:
	mov	r0, r7
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #2370
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	beq	.L2544
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC227
	add	r0, r0, #2352
	movt	r2, #:upper16:.LC227
	add	r1, r1, #32
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	__dynamic_dev_dbg
.L2561:
	ldr	r3, [r9]
	movw	r1, #:lower16:.LC222
	mov	r2, r0
	movt	r1, #:upper16:.LC222
	add	r0, r3, #32
	bl	dev_err
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	ldr	r1, [r4, #108]
	mov	r0, r5
	mov	r2, r8
	bl	__list_add
	mov	r1, r6
	mov	r0, r7
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_mux_smd_data_tx_tlet, .-rmnet_mux_smd_data_tx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_disconnect_work, %function
gsmd_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2394
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR2
	str	lr, [sp, #4]
	mov	r4, r0
	ldrh	r3, [r3, r2]
	.pad #8
	sub	sp, sp, #8
	tst	r3, #4
	bne	.L2569
.L2564:
	ldr	r3, [r4, #-56]
	ldr	r0, [r3]
	bl	smd_close
	ldr	r3, [r4, #-56]
	mov	r2, #0
	str	r2, [r3]
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L2569:
	ldr	ip, [r4, #-128]
	movw	r1, #:lower16:.LC228
	sub	r3, r0, #128
	movt	r1, #:upper16:.LC228
	ldr	r2, .L2570
	ldr	r0, .L2570+4
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L2564
.L2571:
	.align	2
.L2570:
	.word	.LANCHOR3+1212
	.word	.LANCHOR2+2376
	.fnend
	.size	gsmd_disconnect_work, .-gsmd_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_disconnect_work, %function
rmnet_smd_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	sub	r0, r0, #124
	strd	r6, [sp, #8]
	mov	r5, #0
	mov	r7, r4
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	tasklet_kill
	sub	r0, r4, #144
	bl	tasklet_kill
	sub	r0, r4, #60
	bl	tasklet_kill
	sub	r0, r4, #80
	bl	tasklet_kill
	ldr	r0, [r4, #-148]
	bl	smd_close
	str	r5, [r4, #-104]
	ldr	r0, [r4, #-84]
	bl	smd_close
	str	r5, [r4, #-236]
	str	r5, [r4, #-40]
	ldr	r6, [r7, #-252]!
	cmp	r6, r7
	ldr	r5, [r6]
	beq	.L2573
	sub	r8, r4, #260
.L2574:
	mov	r0, r6
	bl	list_del
	mov	r0, r6
	mov	r2, r8
	ldr	r1, [r4, #-256]
	bl	__list_add
	cmp	r7, r5
	mov	r6, r5
	ldr	r5, [r5]
	bne	.L2574
.L2573:
	mov	r7, r4
	ldr	r6, [r7, #-284]!
	cmp	r6, r7
	ldr	r5, [r6]
	beq	.L2575
	sub	r8, r4, #300
.L2576:
	mov	r0, r6
	bl	list_del
	mov	r0, r6
	mov	r2, r8
	ldr	r1, [r4, #-296]
	bl	__list_add
	cmp	r7, r5
	mov	r6, r5
	ldr	r5, [r5]
	bne	.L2576
.L2575:
	mov	r7, r4
	ldr	r6, [r7, #-276]!
	cmp	r6, r7
	ldr	r5, [r6]
	beq	.L2577
	sub	r8, r4, #292
.L2578:
	mov	r0, r6
	bl	list_del
	mov	r0, r6
	mov	r2, r8
	ldr	r1, [r4, #-288]
	bl	__list_add
	cmp	r7, r5
	mov	r6, r5
	ldr	r5, [r5]
	bne	.L2578
.L2577:
	ldrb	r3, [r4, #-152]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L2572
	sub	r0, r4, #232
	bl	platform_driver_unregister
	mov	r3, #0
	strb	r3, [r4, #-152]
.L2572:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_smd_disconnect_work, .-rmnet_smd_disconnect_work
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	cleanup, %function
cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, .L2588
	b	platform_driver_unregister
.L2589:
	.align	2
.L2588:
	.word	.LANCHOR0+292
	.fnend
	.size	cleanup, .-cleanup
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_read_w, %function
grmnet_ctrl_smd_read_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #32]
	.pad #36
	sub	sp, sp, #36
	add	r10, r3, #108
	str	r3, [sp, #4]
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	ldr	r0, [r4, #-52]
	cmp	r0, #0
	beq	.L2591
	mov	r3, sp
	bic	r9, r3, #8128
	bic	r9, r9, #63
.L2602:
	bl	smd_cur_packet_size
	subs	r7, r0, #0
	ble	.L2591
	mov	r1, r5
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	mov	r1, #208
	mov	r0, r7
	bl	__kmalloc
	subs	r8, r0, #0
	beq	.L2590
	mov	r5, #0
.L2600:
	ldr	r0, [r4, #-52]
	bl	smd_read_avail
	subs	fp, r0, #0
	bne	.L2593
	ldr	r3, [r4, #-52]
	cmp	r3, #0
	beq	.L2594
	ldr	r0, [r9, #12]
	movw	r3, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r3, #:upper16:autoremove_wake_function
	sub	r6, r4, #28
	str	fp, [sp, #12]
	str	r1, [sp, #24]
	str	r0, [sp, #16]
	str	r3, [sp, #20]
	str	r1, [sp, #28]
	b	.L2596
.L2624:
	ldr	r3, [r4, #-52]
	cmp	r3, #0
	beq	.L2595
	bl	schedule
.L2596:
	mov	r2, #2
	add	r1, sp, #12
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r0, [r4, #-52]
	bl	smd_read_avail
	subs	fp, r0, #0
	beq	.L2624
.L2595:
	add	r1, sp, #12
	mov	r0, r6
	bl	finish_wait
.L2593:
	cmp	fp, #0
	ldr	r3, [r4, #-52]
	blt	.L2594
	cmp	r3, #0
	beq	.L2594
	add	r1, fp, r5
	cmp	r1, r7
	bgt	.L2625
	mov	r2, fp
	mov	r0, r3
	add	r1, r8, r5
	bl	smd_read
	subs	r2, r0, #0
	ble	.L2626
	add	r5, r5, r2
	cmp	r7, r5
	bgt	.L2600
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #4]
	mov	r5, r0
	ldr	r0, [r3, #104]
	cmp	r0, #0
	beq	.L2601
	ldr	r3, [r0, #92]
	cmp	r3, #0
	beq	.L2601
	mov	r2, r7
	mov	r1, r8
	blx	r3
	ldr	r3, [r4, #44]
	add	r3, r3, #1
	str	r3, [r4, #44]
.L2601:
	mov	r0, r8
	bl	kfree
	ldr	r0, [r4, #-52]
	cmp	r0, #0
	bne	.L2602
.L2591:
	mov	r1, r5
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
.L2590:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2594:
	movw	r0, #:lower16:.LC229
	ldr	r1, .L2627
	mov	r2, fp
	movt	r0, #:upper16:.LC229
	bl	printk
	mov	r0, r8
	bl	kfree
	b	.L2590
.L2626:
	movw	r0, #:lower16:.LC231
	ldr	r1, .L2627
	movt	r0, #:upper16:.LC231
	bl	printk
	mov	r0, r8
	bl	kfree
	b	.L2590
.L2625:
	movw	r0, #:lower16:.LC230
	ldr	r1, .L2627
	movt	r0, #:upper16:.LC230
	bl	printk
	mov	r0, r8
	bl	kfree
	b	.L2590
.L2628:
	.align	2
.L2627:
	.word	.LANCHOR3+1236
	.fnend
	.size	grmnet_ctrl_smd_read_w, .-grmnet_ctrl_smd_read_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_disable, %function
conn_gadget_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC232
	str	lr, [sp, #8]
	movt	r0, #:upper16:.LC232
	ldr	r1, [r4, #84]
	movw	r5, #:lower16:.LANCHOR2
	.pad #12
	sub	sp, sp, #12
	bl	printk
	movt	r5, #:upper16:.LANCHOR2
	movw	r2, #2418
	ldr	r3, [r4, #100]
	ldrh	r1, [r5, r2]
	mov	r0, #0
	mov	r2, #1
	str	r0, [r4, #100]
	str	r2, [r4, #104]
	tst	r1, #4
	str	r3, [r4, #212]
	bne	.L2636
.L2630:
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #200
	bl	__wake_up
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #144
	bl	__wake_up
	movw	r3, #2442
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L2637
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L2636:
	ldr	r3, .L2638
	movw	r1, #:lower16:.LC233
	add	r0, r5, #2400
	movt	r1, #:upper16:.LC233
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L2630
.L2637:
	ldr	r2, .L2638
	movw	r1, #:lower16:.LC234
	ldr	r0, .L2638+4
	movt	r1, #:upper16:.LC234
	ldr	r3, [r4]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	__dynamic_pr_debug
.L2639:
	.align	2
.L2638:
	.word	.LANCHOR3+1260
	.word	.LANCHOR2+2424
	.fnend
	.size	conn_gadget_function_disable, .-conn_gadget_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_function_disable, %function
acc_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2466
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR2
	str	lr, [sp, #4]
	mov	r4, r0
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L2646
.L2641:
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	ldr	r2, [r4, #92]
	and	r3, r3, #254
	orr	r3, r3, #2
	mov	r0, r2
	strb	r3, [r4, #100]
	ldr	r3, [r2, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	lr, [sp, #4]
	add	r0, r4, #1664
	mov	r3, #0
	ldr	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	add	sp, sp, #8
	b	__wake_up
.L2646:
	ldr	r1, [r4, #84]
	movw	r2, #:lower16:.LC235
	add	r0, r3, #2448
	movt	r2, #:upper16:.LC235
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L2641
	.fnend
	.size	acc_function_disable, .-acc_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_out, %function
acc_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, #1
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r4, [r3, #2488]
	str	r2, [r4, #1696]
	ldr	r3, [r1, #44]
	cmn	r3, #108
	beq	.L2654
.L2648:
	add	r0, r4, #1664
	mov	r3, #0
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	mov	r2, #1
	mov	r1, #3
	add	sp, sp, #8
	b	__wake_up
.L2654:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2490
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L2655
.L2649:
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	and	r3, r3, #254
	orr	r3, r3, #2
	strb	r3, [r4, #100]
	b	.L2648
.L2655:
	movw	r1, #:lower16:.LC236
	ldr	r0, .L2656
	movt	r1, #:upper16:.LC236
	bl	__dynamic_pr_debug
	b	.L2649
.L2657:
	.align	2
.L2656:
	.word	.LANCHOR2+2472
	.fnend
	.size	acc_complete_out, .-acc_complete_out
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_ctrlrequest, %function
mtp_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r2
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r3, [r2]	@ zero_extendqisi2
	.pad #16
	sub	sp, sp, #16
	ldrh	r8, [r2, #2]	@ unaligned
	ldrh	r6, [r2, #6]	@ unaligned
	cmp	r3, #128
	beq	.L2687
	and	r3, r3, #96
	ldrh	r9, [r2, #4]	@ unaligned
	cmp	r3, #64
	beq	.L2688
	cmp	r3, #32
	bne	.L2662
	movw	r7, #:lower16:.LANCHOR2
	movw	r1, #2538
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	movt	r7, #:upper16:.LANCHOR2
	movw	r2, #:lower16:.LANCHOR1
	ldrh	r1, [r7, r1]
	movt	r2, #:upper16:.LANCHOR1
	ldr	r10, [r2, #2500]
	tst	r1, #4
	bne	.L2689
.L2666:
	cmp	r3, #100
	beq	.L2690
	cmp	r3, #103
	bne	.L2662
	orrs	r3, r9, r8
	bne	.L2662
	ldr	r1, [r5, #4]
	mov	r2, #4
	movw	r3, #2586
	ldr	r4, [r1]
	strh	r2, [r4]	@ movhi
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L2691
.L2670:
	add	r7, r10, #88
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r10, #104]
	movw	r2, #8217
	movw	r3, #8193
	mov	r1, r0
	mov	r0, r7
	cmp	ip, #3
	moveq	r3, r2
	strh	r3, [r4, #2]	@ movhi
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #4
	cmp	r6, r0
	mov	r4, r0
	movls	r6, #0
	movhi	r6, #1
.L2663:
	ldr	r3, [r5, #4]
	mov	r2, #32
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfi	r1, r6, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r5, #4]
	str	r0, [r3, #4]
	ldr	r3, [r5]
	ldr	r1, [r5, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L2692
.L2658:
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2688:
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #2514
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	bne	.L2693
.L2665:
	cmp	r3, #1
	bne	.L2662
	ldrsb	r3, [r4]
	cmp	r3, #0
	bge	.L2662
	sub	r9, r9, #4
	cmp	r9, #1
	bhi	.L2662
	ldr	r1, .L2696
	cmp	r6, #40
	ldr	r3, [r5, #4]
	movcc	r4, r6
	movcs	r4, #40
.L2686:
	mov	r2, r4
	ldr	r0, [r3]
	bl	memcpy
	cmp	r4, r6
	mov	r0, r4
	movge	r6, #0
	movlt	r6, #1
	b	.L2663
.L2687:
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #6
	beq	.L2660
.L2662:
	mvn	r4, #94
	b	.L2658
.L2692:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC241
	movt	r1, #:upper16:.LC241
	ldr	r2, .L2696+4
	add	r0, r0, #32
	bl	dev_err
	b	.L2658
.L2690:
	orrs	r3, r9, r8
	bne	.L2662
	movw	r3, #2562
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L2694
.L2668:
	add	r4, r10, #88
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r10, #104]
	mov	r7, r0
	cmp	r3, #2
	beq	.L2695
.L2669:
	mov	r0, r4
	mov	r1, r7
	mov	r4, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	mov	r6, #0
	b	.L2663
.L2660:
	lsr	r3, r8, #8
	cmp	r3, #3
	bne	.L2662
	uxtb	r8, r8
	cmp	r8, #238
	bne	.L2662
	cmp	r6, #18
	ldr	r1, .L2696+8
	movcc	r4, r6
	movcs	r4, #18
	ldr	r3, [r5, #4]
	b	.L2686
.L2689:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC238
	str	r9, [sp]
	movt	r2, #:upper16:.LC238
	ldr	r0, .L2696+12
	str	r8, [sp, #4]
	str	r6, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	b	.L2666
.L2691:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC240
	movt	r2, #:upper16:.LC240
	ldr	r0, .L2696+16
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L2670
.L2693:
	ldr	r1, [r1]
	movw	r2, #:lower16:.LC237
	add	r0, r0, #2496
	movt	r2, #:upper16:.LC237
	str	r9, [sp]
	str	r8, [sp, #4]
	str	r6, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	b	.L2665
.L2695:
	mov	r8, #3
	add	r0, r10, #132
	mov	r1, r8
	mov	r3, #0
	mov	r2, #1
	str	r8, [r10, #104]
	bl	__wake_up
	mov	r1, r8
	add	r0, r10, #144
	mov	r3, #0
	mov	r2, #1
	bl	__wake_up
	b	.L2669
.L2694:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC239
	movt	r2, #:upper16:.LC239
	ldr	r0, .L2696+20
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L2668
.L2697:
	.align	2
.L2696:
	.word	.LANCHOR0+392
	.word	.LANCHOR3+1292
	.word	.LANCHOR0+372
	.word	.LANCHOR2+2520
	.word	.LANCHOR2+2568
	.word	.LANCHOR2+2544
	.fnend
	.size	mtp_function_ctrlrequest, .-mtp_function_ctrlrequest
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_disable, %function
mtp_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2610
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L2704
.L2699:
	ldr	r0, [r4, #92]
	mov	r5, #0
	str	r5, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r6, [sp, #8]
	mov	r3, r5
	add	r0, r4, #132
	mov	r2, #1
	ldrd	r4, [sp]
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L2704:
	ldr	r1, [r4, #84]
	movw	r2, #:lower16:.LC242
	add	r0, r3, #2592
	movt	r2, #:upper16:.LC242
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L2699
	.fnend
	.size	mtp_function_disable, .-mtp_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_complete_out, %function
mtp_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #2500]
	str	r2, [r0, #176]
	ldr	r3, [r1, #44]
	add	r0, r0, #132
	mov	r2, #1
	mov	r1, #3
	cmp	r3, #0
	movne	r3, #4
	strne	r3, [r0, #-28]
	mov	r3, #0
	b	__wake_up
	.fnend
	.size	mtp_complete_out, .-mtp_complete_out
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_setup, %function
ccid_function_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r2, [r0, #20]
	.pad #20
	sub	sp, sp, #20
	ldr	r3, [r0, #96]
	ldrh	r7, [r1, #4]	@ unaligned
	ldrh	r8, [r1, #2]	@ unaligned
	ldr	r4, [r2, #24]
	cmp	r3, #0
	ldrh	r6, [r1, #6]	@ unaligned
	ldr	r5, [r4, #4]
	beq	.L2718
	ldrh	ip, [r1]	@ unaligned
	movw	r3, #41218
	mov	lr, r0
	ldrb	r2, [r1]	@ zero_extendqisi2
	rev16	ip, ip
	uxth	ip, ip
	cmp	ip, r3
	beq	.L2713
	movw	r3, #41219
	cmp	ip, r3
	beq	.L2714
	movw	r3, #8449
	cmp	ip, r3
	beq	.L2724
.L2712:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #2634
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	mvneq	r4, #94
	bne	.L2725
.L2710:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L2714:
	ldr	r3, [r5, #4]
	cmp	r6, r3
	bhi	.L2712
	movw	r3, #:lower16:.LANCHOR0
	ldr	r2, [r5]
	cmp	r6, #4
	movt	r3, #:upper16:.LANCHOR0
	movcc	r9, r6
	ldr	r3, [r3, #451]	@ unaligned
	movcs	r9, #4
	str	r3, [r2]
	b	.L2716
.L2724:
	cmp	r6, #0
	bne	.L2712
	lsr	r3, r8, #8
	mov	r1, #1
	mov	r2, r1
	strb	r1, [lr, #140]
	add	r0, r0, #128
	mov	r4, r6
	strb	r8, [lr, #141]
	strb	r3, [lr, #142]
	mov	r3, r6
	strb	r6, [lr, #143]
	str	r1, [lr, #144]
	mov	r1, #3
	bl	__wake_up
	b	.L2710
.L2713:
	ldr	r3, [r5, #4]
	cmp	r6, r3
	bhi	.L2712
	movw	r3, #:lower16:.LANCHOR0
	ldr	r2, [r5]
	cmp	r6, #4
	movt	r3, #:upper16:.LANCHOR0
	movcc	r9, r6
	ldr	r3, [r3, #442]	@ unaligned
	movcs	r9, #4
	str	r3, [r2]
.L2716:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #2658
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L2726
.L2717:
	str	r9, [r5, #4]
	ldr	r3, [r4]
	mov	r1, r5
	mov	r2, #32
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L2710
	movw	r0, #:lower16:.LC244
	mov	r1, r4
	movt	r0, #:upper16:.LC244
	bl	printk
	b	.L2710
.L2725:
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC17
	str	r8, [sp]
	movt	r1, #:upper16:.LC17
	str	r7, [sp, #4]
	ldr	r0, .L2727
	str	r6, [sp, #8]
	mvn	r4, #94
	bl	__dynamic_pr_debug
	b	.L2710
.L2726:
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	str	r8, [sp]
	add	r0, r0, #2640
	ldrb	r2, [r1]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC243
	str	r7, [sp, #4]
	movt	r1, #:upper16:.LC243
	str	r6, [sp, #8]
	bl	__dynamic_pr_debug
	b	.L2717
.L2718:
	mvn	r4, #106
	b	.L2710
.L2728:
	.align	2
.L2727:
	.word	.LANCHOR2+2616
	.fnend
	.size	ccid_function_setup, .-ccid_function_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_complete_out, %function
ccid_bulk_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #44]
	movw	r3, #:lower16:.LANCHOR1
	mov	ip, #1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #3472]
	cmp	r2, #0
	mov	r2, ip
	movne	r3, #1
	add	r0, r1, #160
	str	ip, [r1, #188]
	strne	r3, [r1, #148]
	mov	r3, #0
	mov	r1, #3
	b	__wake_up
	.fnend
	.size	ccid_bulk_complete_out, .-ccid_bulk_complete_out
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_disable, %function
adb_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2682
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L2740
.L2735:
	ldr	r0, [r4, #92]
	mov	r5, #0
	mov	r6, #1
	str	r5, [r4, #100]
	str	r6, [r4, #104]
	strb	r5, [r4, #160]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	lr, [sp, #12]
	mov	r3, r5
	mov	r2, r6
	add	r0, r4, #128
	mov	r1, #3
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #16
	b	__wake_up
.L2740:
	ldr	r3, [r4, #84]
	movw	r2, #:lower16:.LC245
	movt	r2, #:upper16:.LC245
	ldr	r0, .L2741
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L2735
.L2742:
	.align	2
.L2741:
	.word	.LANCHOR2+2664
	.fnend
	.size	adb_function_disable, .-adb_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_complete_out, %function
adb_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3476]
	str	r2, [r0, #156]
	ldr	r3, [r1, #44]
	add	r0, r0, #128
	mov	r1, #3
	cmp	r3, #0
	cmnne	r3, #104
	mov	r3, #0
	strne	r2, [r0, #-24]
	mov	r2, #1
	b	__wake_up
	.fnend
	.size	adb_complete_out, .-adb_complete_out
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_setup, %function
acm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r1]	@ unaligned
	movw	r1, #8482
	ldr	r0, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldrh	r2, [r4, #2]	@ unaligned
	ldrh	r8, [r4, #4]	@ unaligned
	rev16	r3, r3
	ldrh	r9, [r4, #6]	@ unaligned
	uxth	r3, r3
	ldr	r7, [r0, #24]
	uxth	r10, r2
	cmp	r3, r1
	ldr	r5, [r7, #4]
	beq	.L2750
	movw	r2, #41249
	cmp	r3, r2
	beq	.L2751
	movw	r2, #8480
	cmp	r3, r2
	beq	.L2765
.L2759:
	mvn	r4, #94
.L2748:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2765:
	cmp	r9, #7
	bne	.L2759
	ldrb	r3, [r6, #144]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L2759
	ldr	r2, [r7]
	movw	r3, #:lower16:acm_complete_set_line_coding
	mov	fp, r9
	movt	r3, #:upper16:acm_complete_set_line_coding
	ldr	r2, [r2, #4]
	str	r6, [r2]
	str	r3, [r5, #28]
.L2753:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #2706
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L2766
.L2754:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	fp, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L2748
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC247
	mov	r3, r4
	ldrb	r2, [r6, #146]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC247
	add	r0, r0, #32
	bl	dev_err
	b	.L2748
.L2751:
	ldrb	r3, [r6, #144]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L2759
	cmp	r9, #7
	add	r1, r6, #160
	ldr	r0, [r5]
	movcc	fp, r9
	movcs	fp, #7
	mov	r2, fp
	bl	memcpy
	b	.L2753
.L2750:
	ldrb	r3, [r6, #144]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L2759
	movw	ip, #:lower16:.LANCHOR1
	mov	lr, #1
	strh	r2, [r6, #168]	@ movhi
	movt	ip, #:upper16:.LANCHOR1
	mov	r3, #0
	ldr	r0, .L2767
	mov	r2, lr
	mov	r1, lr
	mov	fp, r3
	str	lr, [ip, #2200]
	str	r10, [ip, #3480]
	bl	__wake_up
	b	.L2753
.L2766:
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC246
	add	r0, r0, #2688
	ldrb	r3, [r6, #146]	@ zero_extendqisi2
	str	r10, [sp, #8]
	movt	r2, #:upper16:.LC246
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	str	r8, [sp, #12]
	ldrb	lr, [r4]	@ zero_extendqisi2
	add	r1, r1, #32
	str	r9, [sp, #16]
	str	lr, [sp]
	str	ip, [sp, #4]
	bl	__dynamic_dev_dbg
	b	.L2754
.L2768:
	.align	2
.L2767:
	.word	.LANCHOR1+2204
	.fnend
	.size	acm_setup, .-acm_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_event_notify, %function
rmnet_smd_event_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #2
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #48]
	beq	.L2771
	cmp	r1, #3
	beq	.L2772
	cmp	r1, #1
	beq	.L2787
.L2769:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2787:
	ldr	r3, [r0, #20]
	ldr	r3, [r3, #168]
	cmp	r3, #0
	beq	.L2769
	cmp	r5, #0
	ldr	r0, [r0]
	bne	.L2788
.L2775:
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L2769
	add	r4, r4, #4
	mov	r0, #0
	add	r1, r4, #4
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L2769
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__tasklet_schedule
.L2772:
	add	r1, r0, #44
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_clear_bit
.L2771:
	add	r1, r0, #44
	mov	r0, #0
	bl	_set_bit
	ldr	r6, [sp, #8]
	add	r0, r4, #52
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L2788:
	bl	smd_write_avail
	cmp	r0, r5
	bge	.L2776
.L2786:
	ldr	r0, [r4]
	b	.L2775
.L2776:
	add	r1, r4, #28
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r0, r4, #24
	bne	.L2786
	bl	__tasklet_schedule
	b	.L2786
	.fnend
	.size	rmnet_smd_event_notify, .-rmnet_smd_event_notify
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_notify, %function
grmnet_ctrl_smd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2730
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r5, r0
	strd	r8, [sp, #16]
	mov	r4, r1
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L2829
.L2790:
	cmp	r4, #2
	beq	.L2793
	cmp	r4, #3
	beq	.L2794
	cmp	r4, #1
	beq	.L2830
.L2792:
	add	r0, r5, #24
	mov	r3, #0
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	mov	r2, #1
	mov	r1, #3
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up
.L2830:
	ldr	r0, [r5]
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L2796
	ldr	r2, [r5, #28]
	add	r3, r5, #28
	cmp	r2, r3
	beq	.L2831
.L2796:
	ldr	r0, [r5]
	bl	smd_write_avail
	cmp	r0, #0
	beq	.L2792
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r5, #68
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3484]
	bl	queue_work_on
	b	.L2792
.L2794:
	add	r1, r5, #8
	mov	r0, #0
	bl	_clear_bit
	cmp	r5, #0
	beq	.L2799
	ldr	r0, [r5, #104]
	cmp	r0, #0
	beq	.L2799
	ldr	r3, [r0, #104]
	cmp	r3, #0
	beq	.L2799
	blx	r3
.L2799:
	add	r8, r5, #108
	add	r7, r5, #40
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #40]
	mov	r9, r0
	cmp	r7, r4
	beq	.L2800
.L2801:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
	ldr	r4, [r5, #40]
	cmp	r7, r4
	bne	.L2801
.L2800:
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L2792
.L2793:
	add	r1, r5, #8
	mov	r0, #0
	bl	_set_bit
	cmp	r5, #0
	beq	.L2792
	ldr	r0, [r5, #104]
	cmp	r0, #0
	beq	.L2792
	ldr	r3, [r0, #108]
	cmp	r3, #0
	beq	.L2792
	blx	r3
	b	.L2792
.L2829:
	sub	r2, r1, #1
	cmp	r2, #2
	movwhi	r3, #:lower16:.LC182
	movthi	r3, #:upper16:.LC182
	bhi	.L2791
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r3, r3, r2, lsl #2
	ldr	r3, [r3, #1308]
.L2791:
	movw	r1, #:lower16:.LC248
	ldr	r2, .L2832
	movt	r1, #:upper16:.LC248
	ldr	r0, .L2832+4
	bl	__dynamic_pr_debug
	b	.L2790
.L2831:
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r5, #52
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3484]
	bl	queue_work_on
	b	.L2796
.L2833:
	.align	2
.L2832:
	.word	.LANCHOR3+1320
	.word	.LANCHOR2+2712
	.fnend
	.size	grmnet_ctrl_smd_notify, .-grmnet_ctrl_smd_notify
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_disconnect_w, %function
gctrl_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #52]
	tst	r3, #1
	bne	.L2836
	bx	lr
.L2836:
	add	r1, r0, #52
	mov	r0, #0
	b	_clear_bit
	.fnend
	.size	gctrl_disconnect_w, .-gctrl_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_disconnect_w, %function
ghsic_data_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #76]
	tst	r3, #1
	bne	.L2839
	bx	lr
.L2839:
	add	r1, r0, #76
	mov	r0, #0
	b	_clear_bit
	.fnend
	.size	ghsic_data_disconnect_w, .-ghsic_data_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_remove, %function
ghsuart_ctrl_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2754
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L2852
.L2841:
	ldr	r3, [r4, #4]
	movw	r2, #:lower16:.LANCHOR1
	mov	r1, #84
	movt	r2, #:upper16:.LANCHOR1
	mla	r3, r1, r3, r2
	ldr	r4, [r3, #1860]
	add	r6, r4, #8
	add	r5, r4, #88
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r4, #12]
	mov	r1, r0
	mov	r0, r6
	cmp	r4, #0
	beq	.L2853
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L2844
	mov	r0, r4
	blx	r3
.L2844:
	mov	r1, r5
	mov	r0, #0
	bl	_clear_bit
	mov	r1, r5
	mov	r0, #2
	bl	_clear_bit
.L2843:
	mov	r1, r5
	mov	r0, #1
	bl	_clear_bit
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2853:
	bl	_raw_spin_unlock_irqrestore
	b	.L2843
.L2852:
	movw	r1, #:lower16:.LC177
	add	r0, r3, #2736
	ldr	r2, .L2854
	movt	r1, #:upper16:.LC177
	ldr	r3, [r4]
	bl	__dynamic_pr_debug
	b	.L2841
.L2855:
	.align	2
.L2854:
	.word	.LANCHOR3+1344
	.fnend
	.size	ghsuart_ctrl_remove, .-ghsuart_ctrl_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_out_trigger, %function
f_midi_out_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #28]
	cmp	r1, #0
	ldr	r0, [r0, #12]
	ldr	r1, [r3, #200]
	add	r1, r1, #296
	bne	.L2858
	b	_clear_bit
.L2858:
	b	_set_bit
	.fnend
	.size	f_midi_out_trigger, .-f_midi_out_trigger
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_notify, %function
rmnet_mux_smd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #2
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #176]
	beq	.L2861
	cmp	r1, #3
	beq	.L2862
	cmp	r1, #1
	beq	.L2877
.L2859:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2877:
	ldr	r3, [r0, #372]
	cmp	r3, #0
	beq	.L2859
	cmp	r5, #0
	ldr	r0, [r0, #128]
	bne	.L2878
.L2865:
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L2859
	add	r1, r4, #136
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r0, r4, #132
	bne	.L2859
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__tasklet_schedule
.L2862:
	add	r1, r0, #172
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_clear_bit
.L2861:
	add	r1, r0, #172
	mov	r0, #0
	bl	_set_bit
	ldr	r6, [sp, #8]
	add	r0, r4, #180
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L2878:
	bl	smd_write_avail
	cmp	r0, r5
	bge	.L2866
.L2876:
	ldr	r0, [r4, #128]
	b	.L2865
.L2866:
	add	r1, r4, #156
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r0, r4, #152
	bne	.L2876
	bl	__tasklet_schedule
	b	.L2876
	.fnend
	.size	rmnet_mux_smd_notify, .-rmnet_mux_smd_notify
	.section	.init.text,"ax",%progbits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_init, %function
gsmd_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC249
	push	{r4, lr}
	.save {r4, lr}
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	movt	r0, #:upper16:.LC249
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmn	r0, #4096
	movt	r3, #:upper16:.LANCHOR1
	mov	r4, r3
	str	r0, [r3, #3488]
	bhi	.L2881
	ldr	ip, .L2888
	mov	r2, r0
	movw	r0, #:lower16:.LC250
	movt	r0, #:upper16:.LC250
	mov	r3, #0
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	str	r0, [r4, #3492]
	beq	.L2882
	cmn	r0, #4096
	bls	.L2881
.L2882:
	ldr	r0, [r4, #3488]
	bl	debugfs_remove
.L2881:
	mov	r3, #0
	mov	r0, r3
	strb	r3, [r4, #3496]
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L2889:
	.align	2
.L2888:
	.word	.LANCHOR3+1364
	.fnend
	.size	gsmd_ctrl_init, .-gsmd_ctrl_init
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_exit, %function
gsmd_ctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3492]
	bl	debugfs_remove
	ldr	r0, [r4, #3488]
	pop	{r4, lr}
	b	debugfs_remove
	.fnend
	.size	gsmd_ctrl_exit, .-gsmd_ctrl_exit
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_init, %function
gctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC251
	push	{r4, lr}
	.save {r4, lr}
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	movt	r0, #:upper16:.LC251
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmn	r0, #4096
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3500]
	bhi	.L2894
	ldr	ip, .L2901
	mov	r2, r0
	movw	r0, #:lower16:.LC250
	mov	r4, r3
	movt	r0, #:upper16:.LC250
	mov	r3, #0
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	str	r0, [r4, #3504]
	beq	.L2895
	cmn	r0, #4096
	bls	.L2894
.L2895:
	ldr	r0, [r4, #3500]
	bl	debugfs_remove
.L2894:
	mov	r0, #0
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L2902:
	.align	2
.L2901:
	.word	.LANCHOR3+1472
	.fnend
	.size	gctrl_init, .-gctrl_init
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_exit, %function
gctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3504]
	bl	debugfs_remove
	ldr	r0, [r4, #3500]
	pop	{r4, lr}
	b	debugfs_remove
	.fnend
	.size	gctrl_exit, .-gctrl_exit
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_init, %function
ghsic_data_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC252
	push	{r4, r5, lr}
	.save {r4, r5, lr}
	mov	r1, #0
	.pad #12
	sub	sp, sp, #12
	movt	r0, #:upper16:.LC252
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmn	r0, #4096
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3508]
	bhi	.L2907
	ldr	r5, .L2919
	mov	r2, r0
	movw	r0, #:lower16:.LC250
	mov	r4, r3
	movt	r0, #:upper16:.LC250
	mov	r3, #0
	mov	r1, #292
	str	r5, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	str	r0, [r4, #3512]
	beq	.L2910
	cmn	r0, #4096
	ldr	r2, [r4, #3508]
	bhi	.L2910
	add	r5, r5, #108
	movw	r0, #:lower16:.LC253
	movt	r0, #:upper16:.LC253
	mov	r3, #0
	mov	r1, #420
	str	r5, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	str	r0, [r4, #3516]
	beq	.L2910
	cmn	r0, #4096
	bls	.L2907
.L2910:
	ldr	r0, [r4, #3508]
	bl	debugfs_remove
.L2907:
	mov	r0, #0
	add	sp, sp, #12
	@ sp needed
	pop	{r4, r5, pc}
.L2920:
	.align	2
.L2919:
	.word	.LANCHOR3+1580
	.fnend
	.size	ghsic_data_init, .-ghsic_data_init
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_exit, %function
ghsic_data_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3512]
	bl	debugfs_remove
	ldr	r0, [r4, #3516]
	bl	debugfs_remove
	ldr	r0, [r4, #3508]
	pop	{r4, lr}
	b	debugfs_remove
	.fnend
	.size	ghsic_data_exit, .-ghsic_data_exit
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_init, %function
ghsuart_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC254
	push	{r4, lr}
	.save {r4, lr}
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	movt	r0, #:upper16:.LC254
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmp	r0, #0
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3416]
	beq	.L2924
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L2924
	ldr	ip, .L2936
	movw	r0, #:lower16:.LC250
	mov	r4, r3
	movt	r0, #:upper16:.LC250
	mov	r3, #0
	mov	r1, #420
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L2925
	cmn	r0, #4096
	movls	r0, #0
	bls	.L2923
.L2925:
	ldr	r0, [r4, #3416]
	bl	debugfs_remove
	mov	r3, #0
	str	r3, [r4, #3416]
.L2924:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2778
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	mvneq	r0, #18
	beq	.L2923
	movw	r1, #:lower16:.LC255
	ldr	r0, .L2936+4
	movt	r1, #:upper16:.LC255
	bl	__dynamic_pr_debug
	mvn	r0, #18
.L2923:
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L2937:
	.align	2
.L2936:
	.word	.LANCHOR3+1796
	.word	.LANCHOR2+2760
	.fnend
	.size	ghsuart_ctrl_init, .-ghsuart_ctrl_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_init, %function
ghsuart_data_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC256
	push	{r4, lr}
	.save {r4, lr}
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	movt	r0, #:upper16:.LC256
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmp	r0, #0
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3420]
	beq	.L2939
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L2939
	ldr	ip, .L2951
	movw	r0, #:lower16:.LC250
	mov	r4, r3
	movt	r0, #:upper16:.LC250
	mov	r3, #0
	mov	r1, #420
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L2940
	cmn	r0, #4096
	movls	r0, #0
	bls	.L2938
.L2940:
	ldr	r0, [r4, #3420]
	bl	debugfs_remove
.L2939:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #2802
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	mvneq	r0, #18
	beq	.L2938
	movw	r1, #:lower16:.LC257
	add	r0, r0, #2784
	movt	r1, #:upper16:.LC257
	bl	__dynamic_pr_debug
	mvn	r0, #18
.L2938:
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L2952:
	.align	2
.L2951:
	.word	.LANCHOR3+1904
	.fnend
	.size	ghsuart_data_init, .-ghsuart_data_init
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_init, %function
diag_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC258
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	movt	r0, #:upper16:.LC258
	add	r3, r4, #3520
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	str	r3, [r4, #3520]
	str	r3, [r4, #3524]
	bl	debugfs_create_dir
	cmp	r0, #0
	str	r0, [r4, #3424]
	beq	.L2955
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L2955
	ldr	ip, .L2962
	movw	r0, #:lower16:.LC250
	mov	r3, #0
	movt	r0, #:upper16:.LC250
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L2957
	cmn	r0, #4096
	bhi	.L2957
.L2955:
	mov	r0, #0
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L2957:
	ldr	r0, [r4, #3424]
	bl	debugfs_remove
	mov	r3, #0
	str	r3, [r4, #3424]
	b	.L2955
.L2963:
	.align	2
.L2962:
	.word	.LANCHOR3+2012
	.fnend
	.size	diag_function_init, .-diag_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_free_buf, %function
rmnet_sdio_free_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #188
	strd	r8, [sp, #16]
	mov	r9, #0
	strd	r10, [sp, #24]
	mov	r10, r0
	mov	r0, r6
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave
	str	r9, [r4, #328]
	str	r9, [r4, #356]
	str	r9, [r4, #360]
	str	r9, [r4, #364]
	str	r9, [r4, #368]
	str	r9, [r4, #372]
	ldr	r5, [r10, #132]!
	str	r0, [sp, #4]
	cmp	r5, r10
	ldr	r8, [r5]
	beq	.L2965
.L2966:
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del
	ldr	r3, [r4, #140]
	mov	r0, #0
	sub	r3, r3, #1
	str	r3, [r4, #140]
	str	r9, [r5, #-36]
	ldr	fp, [r4, #88]
	mov	r5, r8
	bl	kfree
	mov	r1, r7
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r10, r8
	ldr	r8, [r8]
	bne	.L2966
.L2965:
	mov	r9, r4
	ldr	r5, [r9, #160]!
	cmp	r5, r9
	ldr	r8, [r5]
	beq	.L2967
	mov	r10, #0
.L2968:
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del
	ldr	r3, [r4, #168]
	mov	r0, #0
	sub	r3, r3, #1
	str	r3, [r4, #168]
	str	r10, [r5, #-36]
	ldr	fp, [r4, #92]
	mov	r5, r8
	bl	kfree
	mov	r1, r7
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r9, r8
	ldr	r8, [r8]
	bne	.L2968
.L2967:
	mov	r9, r4
	ldr	r5, [r9, #108]!
	cmp	r5, r9
	ldr	r8, [r5]
	beq	.L2969
.L2970:
	mov	r0, r5
	sub	r10, r5, #8
	bl	list_del
	ldr	r3, [r4, #116]
	sub	r3, r3, #1
	str	r3, [r4, #116]
	ldr	r0, [r5, #-8]
	mov	r5, r8
	bl	kfree
	mov	r0, r10
	bl	kfree
	cmp	r9, r8
	ldr	r8, [r8]
	bne	.L2970
.L2969:
	mov	r9, r4
	ldr	r5, [r9, #120]!
	cmp	r5, r9
	ldr	r8, [r5]
	beq	.L2971
.L2972:
	mov	r0, r5
	sub	r10, r5, #8
	bl	list_del
	ldr	r3, [r4, #128]
	sub	r3, r3, #1
	str	r3, [r4, #128]
	ldr	r0, [r5, #-8]
	mov	r5, r8
	bl	kfree
	mov	r0, r10
	bl	kfree
	cmp	r9, r8
	ldr	r8, [r8]
	bne	.L2972
.L2971:
	ldr	r3, [r4, #144]
	add	r5, r4, #144
	cmp	r5, r3
	beq	.L2973
	mov	r8, #0
	b	.L2974
.L2990:
	ldr	r2, [r4, #152]
	sub	r2, r2, #1
	str	r2, [r4, #152]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #144]
	cmp	r3, r5
	beq	.L2973
.L2974:
	subs	r0, r3, #0
	bne	.L2990
.L2973:
	ldr	r3, [r4, #172]
	add	r5, r4, #172
	cmp	r3, r5
	beq	.L2975
	mov	r8, #0
	b	.L2976
.L2991:
	ldr	r2, [r4, #180]
	sub	r2, r2, #1
	str	r2, [r4, #180]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #172]
	cmp	r3, r5
	beq	.L2975
.L2976:
	subs	r0, r3, #0
	bne	.L2991
.L2975:
	ldrd	r4, [r4, #96]
	ldr	r0, [r5]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r1, [sp, #4]
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_sdio_free_buf, .-rmnet_sdio_free_buf
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_disable, %function
rmnet_sdio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #192]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r0, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r4
	str	r5, [r4, #192]
	str	r5, [r4, #196]
	bl	rmnet_sdio_free_buf
	add	r2, r4, #204
	ldr	r1, [r4, #200]
	mov	r0, #4
	bl	queue_work_on
	str	r5, [r4, #332]
	add	r2, r4, #336
	ldr	r1, [r4, #200]
	mov	r0, #4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on
	.fnend
	.size	rmnet_sdio_disable, .-rmnet_sdio_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_complete_epin, %function
rmnet_sdio_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r4, [r0]
	ldr	r2, [r1, #44]
	ldr	r6, [r1, #32]
	cmn	r2, #104
	beq	.L2999
	cmp	r2, #0
	beq	.L2999
	cmn	r2, #108
	beq	.L2999
	ldr	r3, [r4, #84]
	movw	r1, #:lower16:.LC219
	movt	r1, #:upper16:.LC219
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L2999:
	add	r7, r4, #188
	add	r8, r4, #132
	mov	r0, r7
	bl	_raw_spin_lock
	mov	r2, r8
	ldr	r1, [r4, #136]
	add	r0, r5, #36
	bl	__list_add
	ldr	r3, [r4, #140]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #140]
	bl	_raw_spin_unlock
	mov	r0, r6
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #192]
	cmp	r3, #0
	beq	.L2997
	ldr	r3, [r4, #320]
	tst	r3, #2
	bne	.L3032
.L2997:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3032:
	ldr	r3, [r4, #84]
	mov	r0, r7
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #132]
	str	r0, [sp, #8]
	cmp	r8, r3
	beq	.L3002
	ldr	r5, [r4, #144]
	add	r3, r4, #144
	str	r3, [sp, #4]
	cmp	r5, r3
	beq	.L3002
	mov	r9, #0
	b	.L3004
.L3034:
	ldr	r3, [r4, #152]
	sub	r3, r3, #1
	str	r3, [r4, #152]
	ldrd	r2, [r5]
	str	r9, [r5]
	str	r9, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r6, [r4, #132]
	str	r5, [r6, #-4]
	ldr	r3, [r5, #172]
	mov	r0, r6
	sub	r10, r6, #36
	str	r3, [r6, #-36]
	ldr	r3, [r5, #80]
	str	r3, [r6, #-32]
	bl	list_del
	ldr	r3, [r4, #140]
	mov	r0, r7
	sub	r3, r3, #1
	str	r3, [r4, #140]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #92]
	mov	r1, r10
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	fp, #0
	bne	.L3033
	ldr	r2, [r4, #132]
	ldr	r3, [r4, #356]
	cmp	r8, r2
	add	r3, r3, #1
	str	r3, [r4, #356]
	beq	.L3002
	ldr	r5, [r4, #144]
	ldr	r3, [sp, #4]
	cmp	r5, r3
	beq	.L3002
.L3004:
	cmp	r5, #0
	bne	.L3034
.L3002:
	ldr	r1, [sp, #8]
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L3033:
	ldr	r0, [r4, #192]
	cmp	r0, #0
	beq	.L3007
	ldr	r3, [sp, #12]
	movw	r1, #:lower16:.LC222
	mov	r2, fp
	movt	r1, #:upper16:.LC222
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r8
	mov	r0, r6
	ldr	r1, [r4, #136]
	bl	__list_add
	ldr	r3, [r4, #140]
	ldr	r2, [r4, #144]
	add	r3, r3, #1
	str	r3, [r4, #140]
	ldr	r3, [sp, #4]
	str	r2, [r5]
	str	r3, [r5, #4]
	str	r5, [r4, #144]
	str	r5, [r2, #4]
	ldr	r3, [r4, #152]
	add	r3, r3, #1
	str	r3, [r4, #152]
	b	.L3002
.L3007:
	str	r0, [r6, #-36]
	ldr	r4, [r4, #92]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r5
	bl	dev_kfree_skb_any
	b	.L3002
	.fnend
	.size	rmnet_sdio_complete_epin, .-rmnet_sdio_complete_epin
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_data_rx_work, %function
rmnet_sdio_data_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r8, [r0, #-152]
	ldr	r3, [r0, #84]
	tst	r3, #2
	beq	.L3042
	sub	r6, r0, #48
	mov	r4, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r3, r4
	mov	r7, r0
	ldr	r5, [r3, #-64]!
	cmp	r5, r3
	beq	.L3037
	cmp	r5, #0
	beq	.L3037
	ldr	r3, [r4, #-56]
	mov	ip, #0
	mov	r1, r0
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r4, #-56]
	ldrd	r2, [r5]
	str	ip, [r5]
	str	ip, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC260
	movt	r1, #:upper16:.LC260
	add	r0, r0, #32
	bl	dev_err
	mov	r0, r5
	bl	dev_kfree_skb_any
.L3037:
	mov	r1, r7
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L3042:
	movw	r0, #:lower16:.LC259
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC259
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L3043
	b	printk
.L3044:
	.align	2
.L3043:
	.word	.LANCHOR3+2120
	.fnend
	.size	rmnet_sdio_data_rx_work, .-rmnet_sdio_data_rx_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_write_data_tohost, %function
gbam_write_data_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	add	r7, r0, #8
	mov	r6, r0
	strd	r8, [sp, #16]
	mov	r0, r7
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #12]
	str	r0, [sp, #12]
	cmp	r3, #0
	moveq	r1, r0
	beq	.L3062
	ldr	r2, [r6, #28]
	add	r1, r6, #28
	ldr	r10, [r3, #84]
	str	r1, [sp, #4]
	cmp	r2, r1
	beq	.L3048
	ldr	r4, [r6, #36]
	add	r3, r6, #36
	str	r3, [sp, #8]
	cmp	r4, r3
	beq	.L3048
	movw	r8, #:lower16:.LANCHOR1
	movw	fp, #:lower16:.LANCHOR0
	movt	r8, #:upper16:.LANCHOR1
	movt	fp, #:upper16:.LANCHOR0
	mov	r9, #0
	b	.L3050
.L3064:
	ldr	r1, [r6, #44]
	ldr	r3, [r8, #3528]
	sub	r1, r1, #1
	add	r3, r3, r2
	str	r1, [r6, #44]
	ldrd	r0, [r4]
	str	r9, [r4]
	str	r9, [r4, #4]
	str	r3, [r8, #3528]
	str	r1, [r0, #4]
	str	r0, [r1]
	ldr	r5, [r6, #28]
	str	r4, [r5, #-4]
	ldr	r0, [r4, #172]
	sub	r1, r5, #36
	str	r1, [sp]
	str	r0, [r5, #-36]
	ldr	r0, [r4, #80]
	str	r0, [r5, #-32]
	ldr	r0, [fp, #488]
	cmp	r3, r0
	mov	r0, r5
	moveq	r2, #0
	streq	r9, [r8, #3528]
	ldrb	r3, [r5, #-10]	@ zero_extendqisi2
	bfi	r3, r2, #0, #1
	uxtb	r3, r3
	orr	r3, r3, #2
	strb	r3, [r5, #-10]
	bl	list_del
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r3, [r10, #8]
	mov	r2, #32
	mov	r0, r10
	ldr	r1, [sp]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r2, r0
	mov	r0, r7
	str	r2, [sp]
	bl	_raw_spin_lock
	ldr	r2, [sp]
	cmp	r2, #0
	bne	.L3063
	ldr	r2, [r6, #28]
	ldr	r3, [r6, #264]
	ldr	r1, [sp, #4]
	add	r3, r3, #1
	cmp	r2, r1
	str	r3, [r6, #264]
	beq	.L3048
	ldr	r4, [r6, #36]
	ldr	r3, [sp, #8]
	cmp	r4, r3
	beq	.L3048
.L3050:
	cmp	r4, #0
	mov	r2, #1
	bne	.L3064
.L3048:
	ldr	r1, [sp, #12]
.L3062:
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L3063:
	movw	r0, #:lower16:.LC261
	ldr	r1, .L3065
	movt	r0, #:upper16:.LC261
	bl	printk
	ldr	r1, [sp, #4]
	mov	r0, r5
	ldr	r2, [r6, #28]
	bl	__list_add
	mov	r0, r4
	bl	dev_kfree_skb_any
	b	.L3048
.L3066:
	.align	2
.L3065:
	.word	.LANCHOR3+2144
	.fnend
	.size	gbam_write_data_tohost, .-gbam_write_data_tohost
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_write_data_tohost_w, %function
gbam_write_data_tohost_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #-20]
	b	gbam_write_data_tohost
	.fnend
	.size	gbam_write_data_tohost_w, .-gbam_write_data_tohost_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_epin_complete, %function
gbam_epin_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
	ldr	r2, [r1, #44]
	ldr	r7, [r1, #32]
	cmn	r2, #104
	beq	.L3070
	cmp	r2, #0
	bne	.L3084
.L3071:
	mov	r0, r7
	bl	dev_kfree_skb_any
	cmp	r6, #0
	beq	.L3068
	add	r5, r6, #8
	mov	r0, r5
	bl	_raw_spin_lock
	add	r2, r6, #28
	ldr	r1, [r6, #32]
	add	r0, r4, #36
	bl	__list_add
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r6, #96
	ldrd	r4, [sp]
	movt	r3, #:upper16:.LANCHOR1
	ldrd	r6, [sp, #8]
	mov	r0, #4
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, [r3, #3532]
	b	queue_work_on
.L3084:
	cmn	r2, #108
	bne	.L3082
.L3070:
	mov	r0, r7
	bl	dev_kfree_skb_any
	ldr	r3, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L3068:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3082:
	movw	r0, #:lower16:.LC262
	ldr	r1, .L3085
	movt	r0, #:upper16:.LC262
	bl	printk
	b	.L3071
.L3086:
	.align	2
.L3085:
	.word	.LANCHOR3+2168
	.fnend
	.size	gbam_epin_complete, .-gbam_epin_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_receive, %function
ghsic_data_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	subs	r4, r0, #0
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	beq	.L3088
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L3088
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2826
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L3103
.L3091:
	add	r6, r4, #48
	add	r7, r4, #136
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #36]
	add	r1, r4, #32
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	mov	r8, r0
	stm	r5, {r1, r3}
	str	r5, [r3]
	ldr	r3, [r4, #40]
	ldr	r1, [r2, #492]
	str	r5, [r4, #36]
	add	r3, r3, #1
	cmp	r1, #0
	str	r3, [r4, #40]
	beq	.L3092
	ldr	r2, [r2, #496]
	cmp	r2, r3
	bls	.L3104
.L3092:
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r7
	mov	r0, #4
	ldr	r1, [r4, #84]
	bl	queue_work_on
	mov	r0, #0
.L3087:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3103:
	ldr	ip, [r5, #80]
	movw	r1, #:lower16:.LC263
	mov	r3, r4
	movt	r1, #:upper16:.LC263
	ldr	r2, .L3105
	ldr	r0, .L3105+4
	str	ip, [sp, #4]
	ldr	ip, [r4]
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L3091
.L3088:
	mov	r0, r5
	bl	dev_kfree_skb_any
	mvn	r0, #106
	b	.L3087
.L3104:
	add	r1, r4, #164
	mov	r0, #2
	bl	_set_bit
	ldr	r3, [r4, #196]
	mov	r1, r8
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #196]
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r7
	mov	r0, #4
	ldr	r1, [r4, #84]
	bl	queue_work_on
	mvn	r0, #15
	b	.L3087
.L3106:
	.align	2
.L3105:
	.word	.LANCHOR3+2188
	.word	.LANCHOR2+2808
	.fnend
	.size	ghsic_data_receive, .-ghsic_data_receive
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_start_xmit, %function
eth_start_xmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	add	r6, r1, #1152
	mov	r7, r0
	strd	r8, [sp, #16]
	mov	r0, r6
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1156]
	mov	r1, r0
	cmp	r3, #0
	beq	.L3172
	ldr	r9, [r3, #88]
	mov	r0, r6
	ldrh	r10, [r3, #98]
	ldrb	r3, [r3, #124]	@ zero_extendqisi2
	str	r3, [sp, #16]
	bl	_raw_spin_unlock_irqrestore
	cmp	r9, #0
	beq	.L3109
	add	r8, r4, #1168
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #16]
	str	r0, [sp, #20]
	cmp	r3, #0
	beq	.L3112
	ldr	r3, [r4, #1200]
	cmp	r3, #0
	beq	.L3173
.L3112:
	mov	r0, r8
	ldr	r1, [sp, #20]
	bl	_raw_spin_unlock_irqrestore
	tst	r10, #1
	bne	.L3119
	ldr	r2, [r7, #172]
	ldrb	r3, [r2]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L3119
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	ldrb	ip, [r2, #2]	@ zero_extendqisi2
	ldrb	r0, [r2, #3]	@ zero_extendqisi2
	and	r3, r3, r1
	ldrb	r1, [r2, #4]	@ zero_extendqisi2
	ldrb	r2, [r2, #5]	@ zero_extendqisi2
	and	r3, r3, ip
	and	r3, r3, r0
	and	r3, r3, r1
	and	r3, r3, r2
	cmp	r3, #255
	movne	r3, #2
	moveq	r3, #8
	tst	r3, r10
	beq	.L3109
.L3119:
	mov	r0, r8
	add	r10, r6, #20
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #1172]
	mov	fp, r0
	cmp	r10, r5
	beq	.L3174
	sub	r3, r5, #36
	mov	r0, r5
	str	r3, [sp, #20]
	bl	list_del
	ldr	r3, [r4, #1172]
	cmp	r10, r3
	beq	.L3175
.L3122:
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1232]
	mov	fp, r0
	cmp	r3, #0
	beq	.L3124
	ldr	r0, [r4, #1156]
	cmp	r0, #0
	beq	.L3125
	mov	r1, r7
	blx	r3
	mov	r7, r0
.L3125:
	cmp	r7, #0
	beq	.L3176
.L3124:
	ldr	r3, [sp, #16]
	cmp	r3, #0
	beq	.L3127
	movw	r0, #:lower16:.LANCHOR2
	movw	r1, #2850
	ldr	ip, [r4, #1220]
	movt	r0, #:upper16:.LANCHOR2
	ldr	r3, [r5, #-32]
	ldrh	r1, [r0, r1]
	tst	r1, #4
	bne	.L3177
.L3128:
	ldr	r1, [r4, #1156]
	mov	r2, ip
	ldr	r0, [r5, #-36]
	ldr	r1, [r1, #144]
	add	r0, r0, r3
	bl	memcpy
	ldr	r2, [r4, #1220]
	mov	r1, fp
	mov	r0, r6
	ldr	r3, [r5, #-32]
	add	r3, r3, r2
	str	r3, [r5, #-32]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #-36]
	ldr	r3, [r5, #-32]
	ldr	r2, [r7, #80]
	ldr	r1, [r7, #172]
	add	r0, r0, r3
	bl	memcpy
	ldr	r2, [r7, #80]
	mov	r0, r7
	ldr	r3, [r5, #-32]
	add	r3, r3, r2
	mov	fp, r3
	str	r3, [r5, #-32]
	bl	dev_kfree_skb_any
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1196]
	mov	r6, r0
	ldr	r2, [r4, #1228]
	add	r3, r3, #1
	cmp	r3, r2
	str	r3, [r4, #1196]
	ldr	r3, [r4, #1192]
	bcs	.L3130
	cmp	r3, #5
	bgt	.L3178
.L3130:
	add	r3, r3, #1
	mov	r2, #0
	mov	r1, r6
	mov	r0, r8
	str	r3, [r4, #1192]
	str	r2, [r4, #1196]
	bl	_raw_spin_unlock_irqrestore
.L3131:
	ldr	r3, [r4, #1156]
	ldrb	r2, [r3, #104]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L3144
	ldr	r3, [r3, #112]
	cmp	r3, fp
	beq	.L3179
.L3144:
	mov	r2, #1
.L3132:
	ldrb	r3, [r5, #-10]	@ zero_extendqisi2
	bfi	r3, r2, #1, #1
	uxtb	r2, r3
	strb	r3, [r5, #-10]
	tst	r2, #2
	beq	.L3133
	ldrb	r3, [r4, #1276]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L3133
	ldrh	r1, [r9, #20]
	sdiv	r3, fp, r1
	mls	r3, r1, r3, fp
	cmp	r3, #0
	bne	.L3133
	bfi	r2, r3, #1, #1
	add	fp, fp, #1
	strb	r2, [r5, #-10]
.L3133:
	str	fp, [r5, #-32]
	ldr	r3, [r4, #1164]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bls	.L3134
	ldr	r3, [r3, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	beq	.L3180
.L3134:
	ldrb	r3, [r5, #-10]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r5, #-10]
.L3136:
	ldr	r3, [r9, #8]
	sub	r1, r5, #36
	mov	r0, r9
	mov	r2, #32
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L3168
	movw	r3, #:lower16:jiffies
	movt	r3, #:upper16:jiffies
	ldr	r3, [r3]
	str	r3, [r4, #604]
.L3107:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3172:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L3109:
	mov	r0, r7
	bl	dev_kfree_skb_any
	mov	r0, #0
	b	.L3107
.L3168:
	ldr	r3, [sp, #16]
	cmp	r3, #0
	movne	r3, #0
	strne	r3, [r5, #-32]
	beq	.L3181
.L3126:
	ldr	r2, [r4, #1160]
	mov	r0, r8
	ldr	r3, [r2, #260]
	add	r3, r3, #1
	str	r3, [r2, #260]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1172]
	mov	r6, r0
	cmp	r10, r3
	beq	.L3182
.L3139:
	ldr	r1, [r4, #1176]
	mov	r2, r10
.L3171:
	mov	r0, r5
	bl	__list_add
	mov	r0, r8
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L3107
.L3175:
	ldr	r1, [r4, #576]
	cmp	r1, #0
	beq	.L3183
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
	b	.L3122
.L3173:
	ldr	r0, [r4, #1160]
	add	fp, r6, #20
	ldr	r5, [r4, #1172]
	ldr	r1, [r4, #1228]
	ldr	r0, [r0, #356]
	cmp	r5, fp
	add	r0, r0, #80
	mul	r1, r1, r0
	str	r1, [r4, #1200]
	bne	.L3114
	b	.L3112
.L3115:
	str	r3, [r5, #-4]
	ldr	r5, [r5]
	cmp	r5, fp
	beq	.L3112
.L3114:
	ldr	r2, [r5, #-36]
	cmp	r2, #0
	bne	.L3115
	movw	r1, #32800
	ldr	r0, [r4, #1200]
	bl	__kmalloc
	cmp	r0, #0
	mov	r3, #0
	str	r0, [r5, #-36]
	bne	.L3115
.L3116:
	ldr	r5, [r4, #1172]
	str	r0, [r4, #1200]
	cmp	r5, fp
	beq	.L3117
	mov	r4, r0
.L3118:
	ldr	r0, [r5, #-36]
	bl	kfree
	str	r4, [r5, #-36]
	ldr	r5, [r5]
	cmp	r5, fp
	bne	.L3118
.L3117:
	mov	r0, r8
	ldr	r1, [sp, #20]
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #11
	b	.L3107
.L3180:
	movw	r1, #:lower16:.LANCHOR0
	ldr	r2, [r4, #1188]
	movt	r1, #:upper16:.LANCHOR0
	ldr	r1, [r1, #500]
	add	r2, r2, #1
	cmp	r2, r1, lsr #1
	str	r2, [r4, #1188]
	beq	.L3184
	ldrb	r3, [r5, #-10]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #-10]
	b	.L3136
.L3181:
	mov	r0, r7
	bl	dev_kfree_skb_any
	b	.L3126
.L3179:
	ldrh	r3, [r9, #20]
	sdiv	r2, fp, r3
	mls	r2, r3, r2, fp
	adds	r2, r2, #0
	movne	r2, #1
	b	.L3132
.L3178:
	mov	r1, r10
	ldr	r2, [r4, #1172]
	b	.L3171
.L3127:
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	fp, [r7, #80]
	ldr	r3, [r7, #172]
	str	r3, [r5, #-36]
	str	r7, [r5, #-4]
	b	.L3131
.L3174:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #16
	b	.L3107
.L3176:
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L3126
.L3182:
	ldr	r1, [r4, #576]
	mov	r0, #0
	add	r1, r1, #80
	bl	_clear_bit
	b	.L3139
.L3184:
	ldrb	r2, [r5, #-10]	@ zero_extendqisi2
	bfi	r2, r3, #0, #1
	strb	r2, [r5, #-10]
	str	r3, [r4, #1188]
	b	.L3136
.L3177:
	ldr	lr, [r7, #84]
	movw	r1, #:lower16:.LC264
	add	r0, r0, #2832
	movt	r1, #:upper16:.LC264
	ldr	r2, .L3185
	str	lr, [sp, #8]
	ldr	lr, [r7, #80]
	stm	sp, {ip, lr}
	bl	__dynamic_pr_debug
	ldr	ip, [r4, #1220]
	ldr	r3, [r5, #-32]
	b	.L3128
.L3183:
	movw	r0, #:lower16:.LC109
	movw	r1, #1847
	movt	r0, #:upper16:.LC109
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC110
	movt	r0, #:upper16:.LC110
	bl	printk
	b	.L3122
.L3186:
	.align	2
.L3185:
	.word	.LANCHOR3+2208
	.fnend
	.size	eth_start_xmit, .-eth_start_xmit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_disconnect_work, %function
rmnet_mux_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #-20]
	cmp	r3, #3
	beq	.L3223
.L3188:
	sub	r6, r4, #16
	sub	r8, r4, #192
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #-192]
	mov	r7, r0
	cmp	r8, r5
	beq	.L3189
	mov	r9, #0
.L3190:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	str	r9, [r5, #-36]
	ldr	r5, [r4, #-296]
	mov	r0, #0
	bl	kfree
	mov	r1, r10
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #-192]
	cmp	r8, r5
	bne	.L3190
.L3189:
	ldr	r5, [r4, #-168]
	sub	r8, r4, #168
	cmp	r8, r5
	beq	.L3191
	mov	r9, #0
.L3192:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	str	r9, [r5, #-36]
	ldr	r5, [r4, #-292]
	mov	r0, #0
	bl	kfree
	mov	r1, r10
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #-168]
	cmp	r8, r5
	bne	.L3192
.L3191:
	ldr	r3, [r4, #-184]
	sub	r5, r4, #184
	cmp	r3, r5
	beq	.L3193
	mov	r8, #0
	b	.L3194
.L3224:
	ldr	r2, [r4, #-176]
	sub	r2, r2, #1
	str	r2, [r4, #-176]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #-184]
	cmp	r3, r5
	beq	.L3193
.L3194:
	subs	r0, r3, #0
	bne	.L3224
.L3193:
	ldr	r3, [r4, #-160]
	sub	r5, r4, #160
	cmp	r5, r3
	beq	.L3195
	mov	r8, #0
	b	.L3196
.L3225:
	ldr	r2, [r4, #-152]
	sub	r2, r2, #1
	str	r2, [r4, #-152]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #-160]
	cmp	r3, r5
	beq	.L3195
.L3196:
	subs	r0, r3, #0
	bne	.L3225
.L3195:
	ldr	r5, [r4, #-280]
	sub	r9, r4, #280
	cmp	r9, r5
	beq	.L3197
.L3198:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	ldr	r8, [r4, #-296]
	ldr	r0, [r5, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #-280]
	cmp	r9, r5
	bne	.L3198
.L3197:
	ldr	r5, [r4, #-272]
	sub	r9, r4, #272
	cmp	r9, r5
	beq	.L3199
.L3200:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	ldr	r8, [r4, #-292]
	ldr	r0, [r5, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #-272]
	cmp	r9, r5
	bne	.L3200
.L3199:
	ldr	r5, [r4, #-264]
	sub	r9, r4, #264
	cmp	r5, r9
	beq	.L3201
.L3202:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	ldr	r8, [r4, #-292]
	ldr	r0, [r5, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #-264]
	cmp	r9, r5
	bne	.L3202
.L3201:
	ldr	r5, [r4, #-68]
	sub	r9, r4, #68
	cmp	r9, r5
	beq	.L3203
.L3204:
	mov	r0, r5
	sub	r8, r5, #8
	bl	list_del
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r8
	bl	kfree
	ldr	r5, [r4, #-68]
	ldr	r3, [r4, #-48]
	cmp	r9, r5
	sub	r3, r3, #1
	str	r3, [r4, #-48]
	bne	.L3204
.L3203:
	ldr	r5, [r4, #-44]
	sub	r9, r4, #44
	cmp	r9, r5
	beq	.L3205
.L3206:
	mov	r0, r5
	sub	r8, r5, #8
	bl	list_del
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r8
	bl	kfree
	ldr	r5, [r4, #-44]
	ldr	r3, [r4, #-36]
	cmp	r9, r5
	sub	r3, r3, #1
	str	r3, [r4, #-36]
	bne	.L3206
.L3205:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r1, #0
	sub	r0, r4, #60
	mov	r3, r1
	mov	r2, #1
	str	r1, [r4, #-20]
	mov	r1, #3
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up
.L3223:
	sub	r0, r0, #232
	bl	tasklet_kill
	sub	r0, r4, #252
	bl	tasklet_kill
	b	.L3188
	.fnend
	.size	rmnet_mux_disconnect_work, .-rmnet_mux_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_sdio_data_rx_work, %function
rmnet_mux_sdio_data_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #128
	strd	r8, [sp, #16]
	sub	r8, r0, #16
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r0, #-156]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #-16]
	mov	fp, r0
	cmp	r8, r4
	beq	.L3227
	movw	r7, #:lower16:.LC265
	mov	r10, #0
	movt	r7, #:upper16:.LC265
	b	.L3228
.L3234:
	ldr	r3, [r5, #-8]
	sub	r3, r3, #1
	str	r3, [r5, #-8]
	ldrd	r2, [r4]
	str	r10, [r4]
	str	r10, [r4, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	ldr	r0, [r9]
	mov	r1, r7
	add	r0, r0, #32
	bl	dev_err
	mov	r0, r4
	bl	dev_kfree_skb_any
	ldr	r4, [r5, #-16]
	cmp	r8, r4
	beq	.L3227
.L3228:
	cmp	r4, #0
	mov	r1, fp
	mov	r0, r6
	bne	.L3234
.L3227:
	mov	r1, fp
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_mux_sdio_data_rx_work, .-rmnet_mux_sdio_data_rx_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_sdio_complete_epin, %function
rmnet_mux_sdio_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0]
	.pad #20
	sub	sp, sp, #20
	ldr	r8, [r1, #32]
	ldr	r7, [r4, #364]
	cmp	r7, #0
	beq	.L3266
	ldr	r2, [r1, #44]
	cmn	r2, #104
	beq	.L3238
	cmp	r2, #0
	beq	.L3238
	cmn	r2, #108
	beq	.L3238
	ldr	r3, [r4, #84]
	movw	r1, #:lower16:.LC220
	movt	r1, #:upper16:.LC220
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L3238:
	add	r7, r4, #368
	add	r10, r4, #192
	mov	r0, r7
	bl	_raw_spin_lock
	mov	r2, r10
	ldr	r1, [r4, #196]
	add	r0, r5, #36
	bl	__list_add
	mov	r0, r7
	bl	_raw_spin_unlock
	mov	r0, r8
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #372]
	cmp	r3, #0
	bne	.L3267
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3267:
	ldr	r3, [r4, #84]
	mov	r0, r7
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #192]
	str	r0, [sp, #8]
	cmp	r10, r3
	beq	.L3241
	ldr	r5, [r4, #200]
	add	r3, r4, #200
	str	r3, [sp, #4]
	cmp	r5, r3
	beq	.L3241
	mov	r8, #0
	b	.L3243
.L3269:
	ldr	r3, [r4, #208]
	sub	r3, r3, #1
	str	r3, [r4, #208]
	ldrd	r2, [r5]
	str	r8, [r5]
	str	r8, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r6, [r4, #192]
	str	r5, [r6, #-4]
	ldr	r3, [r5, #172]
	mov	r0, r6
	sub	fp, r6, #36
	str	r3, [r6, #-36]
	ldr	r3, [r5, #80]
	str	r3, [r6, #-32]
	bl	list_del
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r0, [r4, #92]
	mov	r1, fp
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	r9, #0
	bne	.L3268
	ldr	r2, [r4, #192]
	ldr	r3, [r4, #408]
	cmp	r10, r2
	add	r3, r3, #1
	str	r3, [r4, #408]
	beq	.L3241
	ldr	r5, [r4, #200]
	ldr	r3, [sp, #4]
	cmp	r5, r3
	beq	.L3241
.L3243:
	cmp	r5, #0
	bne	.L3269
.L3241:
	ldr	r1, [sp, #8]
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L3266:
	mov	r6, r0
	mov	r0, r8
	bl	dev_kfree_skb_any
	mov	r0, r7
	str	r7, [r5]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	bx	r3	@ indirect register sibling call
.L3268:
	ldr	r0, [r4, #372]
	mov	r3, r9
	mov	r9, fp
	cmp	r0, #0
	beq	.L3246
	mov	r2, r3
	ldr	r3, [sp, #12]
	movw	r1, #:lower16:.LC222
	movt	r1, #:upper16:.LC222
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r10
	mov	r0, r6
	ldr	r1, [r4, #196]
	bl	__list_add
	ldr	r2, [sp, #4]
	ldr	r3, [r4, #200]
	str	r3, [r5]
	str	r2, [r5, #4]
	str	r5, [r4, #200]
	str	r5, [r3, #4]
	ldr	r3, [r4, #208]
	add	r3, r3, #1
	str	r3, [r4, #208]
	b	.L3241
.L3246:
	str	r0, [r6, #-36]
	ldr	r4, [r4, #92]
	bl	kfree
	mov	r1, r9
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r5
	bl	dev_kfree_skb_any
	b	.L3241
	.fnend
	.size	rmnet_mux_sdio_complete_epin, .-rmnet_mux_sdio_complete_epin
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_sdio_complete_epout, %function
rmnet_mux_sdio_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	r7, [r1, #32]
	ldr	r8, [r4, #364]
	cmp	r8, #0
	beq	.L3289
	ldr	r3, [r1, #44]
	ldr	r8, [r4, #84]
	cmn	r3, #104
	beq	.L3273
	cmp	r3, #0
	beq	.L3274
	cmn	r3, #108
	beq	.L3273
	ldr	r2, [r0, #4]
	movw	r1, #:lower16:.LC217
	add	r6, r4, #368
	ldr	lr, [r5, #4]
	movt	r1, #:upper16:.LC217
	ldr	ip, [r5, #48]
	ldr	r0, [r8]
	stm	sp, {ip, lr}
	add	r0, r0, #32
	bl	dev_err
	mov	r0, r7
	bl	dev_kfree_skb_any
	mov	r0, r6
	bl	_raw_spin_lock
.L3275:
	movw	r3, #:lower16:.LANCHOR0
	ldr	r2, [r4, #312]
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #504]
	cmp	r2, r3
	bcs	.L3290
	mov	r0, r6
	bl	_raw_spin_unlock
	mvn	r3, #0
	mov	r2, #0
	mov	r1, #32
	movw	r0, #2056
	bl	__alloc_skb
	subs	r6, r0, #0
	beq	.L3279
	ldr	r0, [r6, #160]
	mov	ip, #2048
	mov	r2, #32
	ldr	r3, [r6, #172]
	mov	r1, r5
	add	r0, r0, #8
	add	r3, r3, #8
	str	r0, [r6, #160]
	str	r3, [r6, #172]
	stm	r5, {r3, ip}
	str	r6, [r5, #32]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	bne	.L3291
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3274:
	ldr	r1, [r1, #48]
	mov	r0, r7
	add	r6, r4, #368
	bl	skb_put
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r4, #228]
	add	r1, r4, #224
	add	r2, r4, #240
	mov	r0, #4
	stm	r7, {r1, r3}
	str	r7, [r3]
	ldr	r3, [r4, #232]
	str	r7, [r4, #228]
	ldr	r1, [r4, #380]
	add	r3, r3, #1
	str	r3, [r4, #232]
	bl	queue_work_on
	b	.L3275
.L3289:
	mov	r0, r7
	bl	dev_kfree_skb_any
	mov	r0, r8
	str	r8, [r5]
.L3288:
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L3273:
	mov	r0, r7
	bl	dev_kfree_skb_any
	mov	r3, #0
	mov	r0, r3
	str	r3, [r5]
	b	.L3288
.L3290:
	ldr	r1, [r4, #220]
	add	r0, r5, #36
	add	r2, r4, #216
	bl	__list_add
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L3291:
	mov	r0, r6
	bl	dev_kfree_skb_any
.L3277:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC266
	mov	r2, r7
	movt	r1, #:upper16:.LC266
	add	r0, r0, #32
	bl	dev_err
	ldr	r1, [r4, #220]
	add	r0, r5, #36
	add	r2, r4, #216
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__list_add
.L3279:
	mvn	r7, #11
	b	.L3277
	.fnend
	.size	rmnet_mux_sdio_complete_epout, .-rmnet_mux_sdio_complete_epout
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_unbind, %function
rmnet_sdio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	add	r0, r1, #252
	mov	r4, r1
	str	lr, [sp, #4]
	bl	cancel_delayed_work_sync
	ldr	r0, [r4, #200]
	bl	destroy_workqueue
	ldr	r2, [r4, #320]
	mov	r3, #0
	str	r3, [r4, #88]
	str	r3, [r4, #92]
	tst	r2, #2
	str	r3, [r4, #96]
	bne	.L3302
.L3293:
	ldr	r3, [r4, #324]
	tst	r3, #2
	beq	.L3294
	add	r1, r4, #324
	mov	r0, #1
	bl	_clear_bit
.L3294:
	ldr	r0, [r4, #352]
	bl	debugfs_remove_recursive
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
.L3302:
	add	r1, r4, #320
	mov	r0, #1
	bl	_clear_bit
	b	.L3293
	.fnend
	.size	rmnet_sdio_unbind, .-rmnet_sdio_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_connect_w, %function
grmnet_ctrl_smd_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #2874
	movt	r5, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #16]
	ldrh	r3, [r5, r3]
	.pad #12
	sub	sp, sp, #12
	ldr	r6, [r0, #-12]
	tst	r3, #4
	bne	.L3321
.L3304:
	ldr	r3, [r4, #-104]
	tst	r3, #2
	bne	.L3305
	ldr	r3, [r4, #-104]
	tst	r3, #4
	beq	.L3322
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L3322:
	sub	r1, r4, #104
	mov	r0, #2
	bl	_set_bit
	ldr	r0, .L3324
	mov	r3, #84
	mla	r0, r3, r6, r0
	add	r0, r0, #4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	platform_driver_register
.L3305:
	sub	r2, r4, #112
	movw	r3, #:lower16:grmnet_ctrl_smd_notify
	ldr	r0, [r4, #-108]
	mov	r1, r2
	movt	r3, #:upper16:grmnet_ctrl_smd_notify
	bl	smd_open
	subs	r2, r0, #0
	beq	.L3307
	cmn	r2, #11
	bne	.L3308
	movw	r3, #2898
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L3323
.L3309:
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, #250
	movt	r3, #:upper16:.LANCHOR1
	ldr	r5, [r3, #3484]
	bl	msecs_to_jiffies
	mov	r3, r0
	mov	r2, r4
	mov	r0, #4
	mov	r1, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	queue_delayed_work_on
.L3307:
	sub	r5, r4, #4
	ldr	r6, [r4, #-24]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-8]
	mov	r7, r0
	cmp	r3, #0
	beq	.L3310
	orr	r2, r6, #4
	mov	r1, r6
	ldr	r0, [r4, #-112]
	mvn	r2, r2
	bl	smd_tiocmset
.L3310:
	mov	r1, r7
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock_irqrestore
.L3321:
	movw	r1, #:lower16:.LC267
	ldr	r2, .L3324+4
	movt	r1, #:upper16:.LC267
	ldr	r0, .L3324+8
	bl	__dynamic_pr_debug
	b	.L3304
.L3323:
	movw	r1, #:lower16:.LC268
	ldr	r3, [r4, #-108]
	str	r2, [sp]
	movt	r1, #:upper16:.LC268
	ldr	r2, .L3324+4
	ldr	r0, .L3324+12
	bl	__dynamic_pr_debug
	b	.L3309
.L3308:
	mov	r3, r2
	ldr	r1, .L3324+4
	movw	r0, #:lower16:.LC269
	ldr	r2, [r4, #-108]
	movt	r0, #:upper16:.LC269
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	printk
.L3325:
	.align	2
.L3324:
	.word	.LANCHOR1+512
	.word	.LANCHOR3+2224
	.word	.LANCHOR2+2856
	.word	.LANCHOR2+2880
	.fnend
	.size	grmnet_ctrl_smd_connect_w, .-grmnet_ctrl_smd_connect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_open_sdio_work, %function
rmnet_mux_open_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #3536]
	cmp	r2, #90
	bgt	.L3330
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	add	r2, r2, #1
	str	r6, [sp, #8]
	mov	r0, #2000
	str	lr, [sp, #12]
	ldr	r5, [r4, #124]
	str	r2, [r3, #3536]
	bl	msecs_to_jiffies
	mov	r3, r0
	mov	r2, r4
	ldr	r6, [sp, #8]
	mov	r1, r5
	mov	r0, #4
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_delayed_work_on
.L3330:
	ldr	r3, [r0, #-172]
	movw	r1, #:lower16:.LC270
	movt	r1, #:upper16:.LC270
	ldr	r0, [r3]
	add	r0, r0, #32
	b	dev_err
	.fnend
	.size	rmnet_mux_open_sdio_work, .-rmnet_mux_open_sdio_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_start_rx, %function
gbam_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	add	r7, r0, #4
	mov	r6, r0
	strd	r8, [sp, #16]
	mov	r0, r7
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #12]
	mov	r8, r0
	cmp	r3, #0
	beq	.L3335
	movw	r5, #:lower16:.LANCHOR0
	ldr	r9, [r3, #88]
	add	r3, r6, #52
	movt	r5, #:upper16:.LANCHOR0
	str	r3, [sp, #4]
.L3333:
	ldr	r4, [r6, #52]
	mvn	r3, #0
	mov	r2, #0
	ldr	r0, [sp, #4]
	mov	r1, #32
	sub	r10, r4, #36
	cmp	r4, r0
	beq	.L3335
	ldr	r0, [r5, #508]
	cmp	r0, #0
	beq	.L3334
	ldr	r0, [r5, #512]
	ldr	ip, [r6, #68]
	cmp	ip, r0
	bcs	.L3335
.L3334:
	ldr	r0, [r5, #516]
	add	r0, r0, #8
	bl	__alloc_skb
	subs	fp, r0, #0
	mov	r0, r4
	beq	.L3335
	ldr	r1, [fp, #160]
	ldr	r2, [fp, #172]
	add	r1, r1, #8
	add	r2, r2, #8
	str	r1, [fp, #160]
	str	r2, [fp, #172]
	bl	list_del
	ldr	r2, [fp, #172]
	mov	r1, r8
	mov	r0, r7
	str	r2, [r4, #-36]
	ldr	r2, [r5, #516]
	str	r2, [r4, #-32]
	str	fp, [r4, #-4]
	bl	_raw_spin_unlock_irqrestore
	ldr	ip, [r9, #8]
	mov	r2, #32
	mov	r1, r10
	mov	r0, r9
	ldr	r8, [ip, #16]
	blx	r8
	str	r0, [sp]
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp]
	mov	r8, r0
	cmp	r3, #0
	bne	.L3353
	ldr	r3, [r6, #12]
	cmp	r3, #0
	bne	.L3333
.L3335:
	mov	r1, r8
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L3353:
	mov	r0, fp
	bl	dev_kfree_skb_any
	ldr	r0, .L3356
	bl	__printk_ratelimit
	cmp	r0, #0
	bne	.L3354
.L3337:
	ldr	r3, [r6, #12]
	cmp	r3, #0
	bne	.L3355
	ldr	r3, [r9, #8]
	mov	r1, r10
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	b	.L3335
.L3355:
	mov	r0, r4
	ldr	r2, [r6, #52]
	ldr	r1, [sp, #4]
	bl	__list_add
	b	.L3335
.L3354:
	movw	r0, #:lower16:.LC271
	ldr	r1, .L3356
	ldr	r2, [sp]
	movt	r0, #:upper16:.LC271
	bl	printk
	b	.L3337
.L3357:
	.align	2
.L3356:
	.word	.LANCHOR3+2252
	.fnend
	.size	gbam_start_rx, .-gbam_start_rx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_epout_complete, %function
gbam_epout_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r0]
	ldr	r6, [r1, #44]
	ldr	r8, [r1, #32]
	cmn	r6, #104
	beq	.L3360
	cmp	r6, #0
	beq	.L3361
	cmn	r6, #108
	beq	.L3360
	ldr	r0, .L3389
	bl	__printk_ratelimit
	cmp	r0, #0
	bne	.L3387
.L3363:
	mov	r0, r8
	add	r9, r5, #4
	bl	dev_kfree_skb_any
	mov	r0, r9
	bl	_raw_spin_lock
.L3362:
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldr	r3, [r6, #508]
	cmp	r3, #0
	beq	.L3364
	ldr	r2, [r5, #68]
	ldr	r3, [r6, #512]
	cmp	r2, r3
	bcc	.L3364
	ldr	r3, [r5, #276]
	cmp	r3, #0
	bne	.L3386
	ldr	r3, [r5, #272]
	mov	r2, #1
	str	r2, [r5, #276]
	add	r3, r3, r2
	str	r3, [r5, #272]
.L3386:
	ldr	r1, [r5, #56]
	add	r0, r4, #36
	add	r2, r5, #52
	bl	__list_add
	mov	r0, r9
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	_raw_spin_unlock
.L3360:
	mov	r0, r8
	bl	dev_kfree_skb_any
	mov	r3, #0
	mov	r1, r4
	mov	r0, r7
	str	r3, [r4]
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	bx	r3	@ indirect register sibling call
.L3364:
	mov	r0, r9
	bl	_raw_spin_unlock
	ldr	r0, [r6, #516]
	mvn	r3, #0
	mov	r2, #0
	mov	r1, #32
	add	r0, r0, #8
	bl	__alloc_skb
	subs	r8, r0, #0
	beq	.L3368
	ldr	ip, [r8, #160]
	mov	r0, r7
	mov	r2, #32
	ldr	r3, [r8, #172]
	mov	r1, r4
	add	ip, ip, #8
	add	r3, r3, #8
	str	ip, [r8, #160]
	str	r3, [r8, #172]
	str	r3, [r4]
	ldr	r3, [r6, #516]
	str	r3, [r4, #4]
	str	r8, [r4, #32]
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	bne	.L3388
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L3361:
	ldr	r1, [r1, #48]
	mov	r0, r8
	add	r9, r5, #4
	bl	skb_put
	mov	r0, r9
	bl	_raw_spin_lock
	ldr	r0, [r5, #64]
	add	r2, r5, #60
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r2, [r8]
	ldr	r1, [r3, #3532]
	add	r2, r5, #80
	str	r0, [r8, #4]
	str	r8, [r0]
	ldr	r3, [r5, #68]
	mov	r0, #4
	str	r8, [r5, #64]
	add	r3, r3, #1
	str	r3, [r5, #68]
	bl	queue_work_on
	b	.L3362
.L3388:
	mov	r0, r8
	bl	dev_kfree_skb_any
	ldr	r0, .L3389
	bl	__printk_ratelimit
	cmp	r0, #0
	beq	.L3368
	movw	r0, #:lower16:.LC273
	mov	r2, r6
	ldr	r1, .L3389
	movt	r0, #:upper16:.LC273
	bl	printk
.L3368:
	mov	r0, r9
	bl	_raw_spin_lock
	b	.L3386
.L3387:
	ldr	r1, [r4, #4]
	movw	r0, #:lower16:.LC272
	mov	r3, r6
	ldr	ip, [r4, #48]
	movt	r0, #:upper16:.LC272
	ldr	r2, [r7, #4]
	str	ip, [sp]
	str	r1, [sp, #4]
	ldr	r1, .L3389
	bl	printk
	b	.L3363
.L3390:
	.align	2
.L3389:
	.word	.LANCHOR3+2268
	.fnend
	.size	gbam_epout_complete, .-gbam_epout_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_ioctl, %function
usb_rmnet_mux_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #65024
	movt	r3, 32772
	cmp	r1, r3
	bne	.L3393
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3395
	mov	r0, #4
	bx	lr
.L3395:
	ldr	r1, [r0, #124]
	mov	r0, r2
	mov	r2, #4
	add	r1, r1, #352
	b	__copy_to_user
.L3393:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	usb_rmnet_mux_ctrl_ioctl, .-usb_rmnet_mux_ctrl_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_ioctl, %function
acc_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #19714
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, 16640
	str	r6, [sp, #8]
	cmp	r1, r3
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	beq	.L3398
	bls	.L3412
	movw	r3, #19716
	movt	r3, 16640
	cmp	r1, r3
	beq	.L3403
	bcc	.L3404
	movw	r3, #19717
	movt	r3, 16640
	cmp	r1, r3
	beq	.L3405
	movw	r3, #19718
	movt	r3, 16640
	cmp	r1, r3
	addeq	r4, r4, #1376
	addeq	r4, r4, #5
	bne	.L3410
.L3407:
	cmp	r4, #0
	beq	.L3410
	mov	r0, r4
	mov	r6, r2
	bl	strlen
	mov	r3, sp
	add	r5, r0, #1
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3413
.L3408:
	mvn	r0, #13
	b	.L3396
.L3412:
	movw	r3, #19720
	cmp	r1, r3
	beq	.L3400
	movw	r3, #19713
	movt	r3, 16640
	cmp	r1, r3
	beq	.L3401
	movw	r3, #19719
	cmp	r1, r3
	beq	.L3414
.L3410:
	mvn	r0, #21
.L3396:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3401:
	add	r4, r4, #101
	b	.L3407
.L3405:
	add	r4, r4, #1120
	add	r4, r4, #5
	b	.L3407
.L3413:
	mov	r1, r4
	mov	r0, r6
	mov	r2, r5
	bl	__copy_to_user
	cmp	r0, #0
	bne	.L3408
	mov	r0, r5
	b	.L3396
.L3404:
	add	r4, r4, #612
	add	r4, r4, #1
	b	.L3407
.L3400:
	ldr	r0, [r4, #1648]
	b	.L3396
.L3414:
	ldr	r0, [r4, #1644]
	b	.L3396
.L3403:
	add	r4, r4, #868
	add	r4, r4, #1
	b	.L3407
.L3398:
	add	r4, r4, #356
	add	r4, r4, #1
	b	.L3407
	.fnend
	.size	acc_ioctl, .-acc_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_ioctl, %function
ffs_epfile_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	ldr	r0, [r4, #36]
	ldr	r3, [r0, #92]
	cmp	r3, #2
	bne	.L3436
	add	r0, r0, #24
	mov	r5, r1
	mov	r6, r2
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #40]
	cmp	r3, #0
	mvneq	r5, #18
	beq	.L3418
	movw	r2, #26371
	cmp	r5, r2
	beq	.L3419
	bhi	.L3420
	movw	r2, #26369
	cmp	r5, r2
	beq	.L3421
	movw	r2, #26370
	cmp	r5, r2
	bne	.L3431
	ldr	r0, [r3]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L3433
	mov	r5, #0
	blx	r3
.L3418:
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
.L3415:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3420:
	movw	r2, #26497
	cmp	r5, r2
	beq	.L3423
	movw	r2, #26498
	movt	r2, 32777
	cmp	r5, r2
	bne	.L3431
	ldr	r0, [r4, #36]
	ldr	r2, [r0]
	ldr	r2, [r2, #16]
	cmp	r2, #3
	moveq	r2, #1
	beq	.L3427
	cmp	r2, #5
	moveq	r2, #2
	movne	r2, #0
.L3427:
	add	r2, r2, #2
	add	r0, r0, #24
	ldr	r4, [r3, r2, lsl #2]
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, #9; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3428
.L3429:
	mvn	r5, #13
	b	.L3415
.L3431:
	mvn	r5, #24
	b	.L3418
.L3421:
	ldr	r0, [r3]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #32]
	cmp	r3, #0
	beq	.L3432
	blx	r3
	mov	r5, r0
	b	.L3418
.L3423:
	ldrb	r5, [r3, #20]	@ zero_extendqisi2
	b	.L3418
.L3419:
	ldr	r0, [r3]
	mov	r1, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	mov	r5, r0
	b	.L3418
.L3436:
	movw	r0, #:lower16:.LC33
	movw	r1, #978
	movt	r0, #:upper16:.LC33
	mvn	r5, #18
	bl	warn_slowpath_null
	b	.L3415
.L3428:
	mov	r1, r4
	mov	r0, r6
	mov	r2, #9
	bl	__copy_to_user
	subs	r5, r0, #0
	beq	.L3415
	b	.L3429
.L3432:
	mvn	r5, #94
	b	.L3418
.L3433:
	mov	r5, r3
	b	.L3418
	.fnend
	.size	ffs_epfile_ioctl, .-ffs_epfile_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_ioctl, %function
rmnet_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r3, #2922
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR2
	mov	r7, r2
	movt	r6, #:upper16:.LANCHOR2
	str	r8, [sp, #16]
	mov	r8, r1
	ldrh	r3, [r6, r3]
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	ldr	r4, [r0, #124]
	tst	r3, #4
	bne	.L3455
.L3438:
	add	r5, r4, #28
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L3439
	movw	r3, #29186
	movt	r3, 32772
	cmp	r8, r3
	bne	.L3456
	ldr	r2, [r4, #12]
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	str	r2, [sp, #4]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3443
.L3445:
	movw	r0, #:lower16:.LC275
	mvn	r7, #13
	movt	r0, #:upper16:.LC275
	bl	printk
.L3444:
	movw	r3, #2946
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L3457
.L3446:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L3437:
	mov	r0, r7
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3443:
	mov	r2, #4
	mov	r0, r7
	add	r1, sp, r2
	bl	__copy_to_user
	subs	r7, r0, #0
	beq	.L3444
	b	.L3445
.L3455:
	movw	r1, #:lower16:.LC274
	mov	r3, r8
	ldr	r2, .L3458
	movt	r1, #:upper16:.LC274
	ldr	r0, .L3458+4
	bl	__dynamic_pr_debug
	b	.L3438
.L3457:
	movw	r1, #:lower16:.LC276
	ldr	r2, .L3458
	movt	r1, #:upper16:.LC276
	ldr	r3, [r4, #12]
	ldr	r0, .L3458+8
	bl	__dynamic_pr_debug
	b	.L3446
.L3439:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #15
	b	.L3437
.L3456:
	movw	r0, #:lower16:.LC277
	mvn	r7, #21
	movt	r0, #:upper16:.LC277
	bl	printk
	b	.L3446
.L3459:
	.align	2
.L3458:
	.word	.LANCHOR3+2288
	.word	.LANCHOR2+2904
	.word	.LANCHOR2+2928
	.fnend
	.size	rmnet_ctrl_ioctl, .-rmnet_ctrl_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_ioctl, %function
rndis_qc_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r3, #0
	movw	r4, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	ldr	r0, .L3484
	movt	r4, #:upper16:.LANCHOR1
	str	r8, [sp, #16]
	mov	r7, r2
	mov	r8, r1
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	strb	r3, [sp, #3]
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #2496]
	mov	r6, r0
	cmp	r3, #0
	beq	.L3480
	ldrb	r0, [r3, #132]	@ zero_extendqisi2
	add	r2, r3, #148
	ldr	r1, [r3, #136]
	strb	r0, [sp, #3]
	str	r1, [sp, #4]
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r5, [r2]
	add	r5, r5, #1
	strex	r1, r5, [r2]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r5, #1
	beq	.L3481
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r5, #15
.L3462:
	mov	r1, r6
	ldr	r0, .L3484
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3480:
	movw	r0, #:lower16:.LC62
	ldr	r1, .L3484+4
	mvn	r5, #18
	movt	r0, #:upper16:.LC62
	bl	printk
	b	.L3462
.L3481:
	mov	r1, r6
	ldr	r0, .L3484
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC278
	mov	r2, r8
	ldr	r1, .L3484+4
	movt	r0, #:upper16:.LC278
	bl	printk
	movw	r3, #26881
	movt	r3, 32769
	cmp	r8, r3
	beq	.L3465
	movw	r3, #26882
	movt	r3, 32772
	cmp	r8, r3
	bne	.L3482
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3471
.L3473:
	movw	r0, #:lower16:.LC279
	ldr	r1, .L3484+4
	mvn	r5, #13
	movt	r0, #:upper16:.LC279
	bl	printk
.L3472:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2970
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L3483
.L3470:
	ldr	r0, .L3484
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #2496]
	mov	r6, r0
	cmp	r3, #0
	beq	.L3480
	add	r2, r3, #148
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L3462
.L3471:
	mov	r2, #4
	mov	r0, r7
	add	r1, sp, r2
	bl	__copy_to_user
	cmp	r0, #0
	bne	.L3473
	mov	r5, r0
	b	.L3472
.L3482:
	movw	r0, #:lower16:.LC282
	ldr	r1, .L3484+4
	mvn	r5, #21
	movt	r0, #:upper16:.LC282
	bl	printk
	b	.L3470
.L3465:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #1; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3467
.L3469:
	movw	r0, #:lower16:.LC279
	ldr	r1, .L3484+4
	mvn	r5, #13
	movt	r0, #:upper16:.LC279
	bl	printk
.L3468:
	movw	r0, #:lower16:.LC280
	ldrb	r2, [sp, #3]	@ zero_extendqisi2
	ldr	r1, .L3484+4
	movt	r0, #:upper16:.LC280
	bl	printk
	b	.L3470
.L3483:
	movw	r1, #:lower16:.LC281
	ldr	r2, .L3484+4
	movt	r1, #:upper16:.LC281
	ldr	r3, [sp, #4]
	ldr	r0, .L3484+8
	bl	__dynamic_pr_debug
	b	.L3470
.L3467:
	mov	r2, r5
	mov	r0, r7
	add	r1, sp, #3
	bl	__copy_to_user
	cmp	r0, #0
	bne	.L3469
	mov	r5, r0
	b	.L3468
.L3485:
	.align	2
.L3484:
	.word	.LANCHOR1+2492
	.word	.LANCHOR3+2308
	.word	.LANCHOR2+2952
	.fnend
	.size	rndis_qc_ioctl, .-rndis_qc_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_ioctl, %function
mbim_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	ip, #2994
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	mov	r7, r2
	str	lr, [sp, #20]
	ldrh	r1, [r3, ip]
	ldr	r4, [r0, #124]
	tst	r1, #4
	bne	.L3505
.L3487:
	add	r5, r4, #96
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L3488
	movw	r3, #28419
	movt	r3, 32770
	cmp	r6, r3
	beq	.L3490
	movw	r3, #28418
	movt	r3, 32772
	cmp	r6, r3
	bne	.L3506
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3493
.L3495:
	movw	r0, #:lower16:.LC279
	ldr	r1, .L3507
	mvn	r6, #13
	movt	r0, #:upper16:.LC279
	bl	printk
.L3494:
	movw	r0, #:lower16:.LC283
	ldr	r1, .L3507
	ldr	r2, [r4, #224]
	movt	r0, #:upper16:.LC283
	bl	printk
	b	.L3496
.L3506:
	movw	r0, #:lower16:.LC285
	ldr	r1, .L3507
	mvn	r6, #21
	movt	r0, #:upper16:.LC285
	bl	printk
.L3496:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L3486:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3490:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #2; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3497
.L3499:
	movw	r0, #:lower16:.LC279
	ldr	r1, .L3507
	mvn	r6, #13
	movt	r0, #:upper16:.LC279
	bl	printk
.L3498:
	movw	r0, #:lower16:.LC284
	ldrh	r2, [r4, #228]
	ldr	r1, .L3507
	movt	r0, #:upper16:.LC284
	bl	printk
	b	.L3496
.L3493:
	mov	r0, r7
	mov	r2, #4
	add	r1, r4, #224
	bl	__copy_to_user
	subs	r6, r0, #0
	beq	.L3494
	b	.L3495
.L3497:
	mov	r0, r7
	mov	r2, #2
	add	r1, r4, #228
	bl	__copy_to_user
	subs	r6, r0, #0
	beq	.L3498
	b	.L3499
.L3505:
	movw	r1, #:lower16:.LC274
	add	r0, r3, #2976
	ldr	r2, .L3507
	movt	r1, #:upper16:.LC274
	mov	r3, r6
	bl	__dynamic_pr_debug
	b	.L3487
.L3488:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r6, #15
	b	.L3486
.L3508:
	.align	2
.L3507:
	.word	.LANCHOR3+2324
	.fnend
	.size	mbim_ioctl, .-mbim_ioctl
	.align	2
	.global	usb_rmnet_mux_ctrl_read
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_read, %function
usb_rmnet_mux_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r9, r1
	str	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #28]
	.pad #32
	sub	sp, sp, #32
	ldr	r4, [r0, #124]
	mov	r3, sp
	bic	r8, r3, #8128
	bic	r8, r8, #63
.L3510:
	ldr	r3, [r4, #372]
	cmp	r3, #0
	beq	.L3530
	add	r6, r4, #368
	add	r5, r4, #316
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r4, #316]
	mov	r1, r0
	cmp	r5, r7
	bne	.L3513
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #316]
	cmp	r5, r3
	bne	.L3510
	ldr	r3, [r4, #372]
	cmp	r3, #0
	beq	.L3510
	ldr	r0, [r8, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r2, #:upper16:autoremove_wake_function
	mov	r3, #0
	add	r6, r4, #324
	str	r3, [sp, #12]
	str	r0, [sp, #16]
	str	r2, [sp, #20]
	str	r1, [sp, #24]
	str	r1, [sp, #28]
	b	.L3517
.L3531:
	bl	schedule
.L3517:
	mov	r2, #1
	add	r1, sp, #12
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r3, [r4, #316]
	cmp	r5, r3
	bne	.L3515
	ldr	r3, [r4, #372]
	cmp	r3, #0
	beq	.L3515
	ldr	r3, [r8, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3531
	mov	r5, #65024
	add	r1, sp, #12
	mov	r0, r6
	movt	r5, 65535
	bl	finish_wait
.L3509:
	mov	r0, r5
	add	sp, sp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L3530:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #3018
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	mvneq	r5, #18
	beq	.L3509
	movw	r1, #:lower16:.LC286
	ldr	r2, .L3534
	mvn	r5, #18
	movt	r1, #:upper16:.LC286
	ldr	r0, .L3534+4
	bl	__dynamic_pr_debug
	b	.L3509
.L3515:
	add	r1, sp, #12
	mov	r0, r6
	bl	finish_wait
	b	.L3510
.L3513:
	ldr	r3, [r7, #-4]
	sub	r8, r7, #8
	cmp	r3, r10
	bhi	.L3532
	mov	r0, r7
	str	r1, [sp, #4]
	bl	list_del
	ldr	r3, [r4, #336]
	mov	r0, r6
	ldr	r1, [sp, #4]
	sub	r3, r3, #1
	str	r3, [r4, #336]
	bl	_raw_spin_unlock_irqrestore
	mov	r3, sp
	ldr	r5, [r7, #-4]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r9, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	mov	r0, r5
	beq	.L3533
.L3519:
	ldr	r3, [r4, #420]
	cmp	r0, #0
	movne	r5, r0
	add	r3, r3, #1
	str	r3, [r4, #420]
	ldr	r0, [r7, #-8]
	bl	kfree
	mov	r0, r8
	bl	kfree
	b	.L3509
.L3533:
	mov	r0, r9
	mov	r2, r5
	ldr	r1, [r7, #-8]
	bl	__copy_to_user
	b	.L3519
.L3532:
	mov	r0, r6
	mvn	r5, #11
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC287
	mov	r3, r10
	ldr	r1, .L3534
	ldr	r2, [r7, #-4]
	movt	r0, #:upper16:.LC287
	bl	printk
	b	.L3509
.L3535:
	.align	2
.L3534:
	.word	.LANCHOR3+2336
	.word	.LANCHOR2+3000
	.fnend
	.size	usb_rmnet_mux_ctrl_read, .-usb_rmnet_mux_ctrl_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_read, %function
rmnet_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	ip, r3
	strd	r6, [sp, #8]
	movw	r3, #3042
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	mov	r0, ip
	movt	r0, #:upper16:.LANCHOR2
	.pad #52
	sub	sp, sp, #52
	ldrh	r3, [r0, r3]
	stmib	sp, {r0, r2}
	str	r1, [sp, #12]
	tst	r3, #4
	bne	.L3568
.L3537:
	ldr	r3, [sp, #8]
	cmp	r3, #2048
	bhi	.L3569
	add	r3, r4, #20
	str	r3, [sp, #16]
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r1, r3
	.syntax divided
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r1]
	add	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L3540
	mov	r3, sp
	ldr	r8, .L3578
	add	r7, r4, #44
	bic	r9, r3, #8128
	add	r6, r4, #52
	bic	r9, r9, #63
.L3541:
	movw	fp, #:lower16:.LC291
	movt	fp, #:upper16:.LC291
.L3542:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #44]
	mov	r3, r0
	mov	r0, r6
	mov	r1, r3
	cmp	r5, r7
	bne	.L3543
	bl	_raw_spin_unlock_irqrestore
	ldrh	r3, [r8]
	tst	r3, #4
	bne	.L3570
	ldr	r10, [r4, #44]
	cmp	r7, r10
	bne	.L3542
.L3545:
	ldr	r0, [r9, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #40
	movt	r2, #:upper16:autoremove_wake_function
	mov	r3, #0
	add	r5, r4, #32
	str	r3, [sp, #28]
	str	r0, [sp, #32]
	str	r2, [sp, #36]
	str	r1, [sp, #40]
	str	r1, [sp, #44]
	b	.L3549
.L3571:
	bl	schedule
.L3549:
	mov	r2, #1
	add	r1, sp, #28
	mov	r0, r5
	bl	prepare_to_wait
	ldr	r3, [r4, #44]
	cmp	r3, r10
	bne	.L3547
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3571
	add	r1, sp, #28
	mov	r0, r5
	bl	finish_wait
	ldr	r2, [sp, #4]
	movw	r3, #3090
	ldrh	r3, [r2, r3]
	tst	r3, #4
	bne	.L3572
.L3557:
	ldr	r1, [sp, #16]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r4, #65024
	movt	r4, 65535
	b	.L3536
.L3570:
	ldr	r2, .L3578+4
	mov	r1, fp
	ldr	r0, .L3578+8
	bl	__dynamic_pr_debug
	ldr	r10, [r4, #44]
	cmp	r10, r7
	bne	.L3542
	b	.L3545
.L3543:
	mov	r0, r5
	str	r3, [sp, #20]
	sub	r7, r5, #8
	bl	list_del
	ldr	r3, [sp, #20]
	mov	r0, r6
	mov	r1, r3
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [sp, #8]
	ldr	r3, [r5, #-4]
	cmp	r3, r2
	bhi	.L3573
	ldr	r1, [sp, #4]
	movw	r2, #3114
	ldrh	r2, [r1, r2]
	tst	r2, #4
	bne	.L3574
.L3551:
	ldr	r1, [sp, #16]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	ldr	r2, [r5, #-4]
	bic	r3, r3, #8128
	ldr	r0, [sp, #12]
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r0, r2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3575
.L3552:
	cmp	r2, #0
	bne	.L3576
	ldr	r2, [sp, #4]
	movw	r3, #3138
	ldr	r4, [r5, #-4]
	ldrh	r3, [r2, r3]
	tst	r3, #4
	bne	.L3577
.L3554:
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r7
	bl	kfree
.L3536:
	mov	r0, r4
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3547:
	add	r1, sp, #28
	mov	r0, r5
	bl	finish_wait
	b	.L3541
.L3575:
	ldr	r1, [r5, #-8]
	bl	__copy_to_user
	mov	r2, r0
	b	.L3552
.L3568:
	movw	r1, #:lower16:.LC288
	mov	r3, r2
	ldr	r2, .L3578+4
	movt	r1, #:upper16:.LC288
	add	r0, r0, #3024
	bl	__dynamic_pr_debug
	b	.L3537
.L3577:
	movw	r1, #:lower16:.LC296
	mov	r3, r4
	ldr	r2, .L3578+4
	movt	r1, #:upper16:.LC296
	ldr	r0, .L3578+12
	bl	__dynamic_pr_debug
	ldr	r4, [r5, #-4]
	b	.L3554
.L3574:
	movw	r1, #:lower16:.LC294
	ldr	r2, .L3578+4
	movt	r1, #:upper16:.LC294
	ldr	r0, .L3578+16
	bl	__dynamic_pr_debug
	b	.L3551
.L3572:
	movw	r1, #:lower16:.LC292
	ldr	r0, .L3578+20
	movt	r1, #:upper16:.LC292
	bl	__dynamic_pr_debug
	b	.L3557
.L3573:
	movw	r0, #:lower16:.LC293
	mov	r1, r3
	movt	r0, #:upper16:.LC293
	bl	printk
	ldr	r1, [sp, #16]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r5, #-8]
	mvn	r4, #11
	bl	kfree
	mov	r0, r7
	bl	kfree
	b	.L3536
.L3576:
	movw	r0, #:lower16:.LC295
	mov	r1, r2
	movt	r0, #:upper16:.LC295
	mvn	r4, #13
	bl	printk
	b	.L3554
.L3540:
	ldr	r1, [sp, #16]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC290
	mvn	r4, #15
	movt	r0, #:upper16:.LC290
	bl	printk
	b	.L3536
.L3569:
	movw	r0, #:lower16:.LC289
	mov	r1, r3
	movt	r0, #:upper16:.LC289
	mov	r2, #2048
	bl	printk
	mvn	r4, #21
	b	.L3536
.L3579:
	.align	2
.L3578:
	.word	.LANCHOR2+3066
	.word	.LANCHOR3+2360
	.word	.LANCHOR2+3048
	.word	.LANCHOR2+3120
	.word	.LANCHOR2+3096
	.word	.LANCHOR2+3072
	.fnend
	.size	rmnet_ctrl_read, .-rmnet_ctrl_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_read, %function
acc_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #3162
	movt	r5, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r7, r2
	ldrh	r3, [r5, r3]
	strd	r8, [sp, #16]
	mov	r9, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	ldr	r4, [r0, #124]
	tst	r3, #4
	bne	.L3625
.L3581:
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	tst	r3, #2
	beq	.L3582
	movw	r3, #3186
	ldrh	r3, [r5, r3]
	tst	r3, #4
	mvneq	r4, #18
	bne	.L3626
.L3580:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3582:
	movw	r2, #3210
	cmp	r7, #16384
	ldrh	r2, [r5, r2]
	movcs	r7, #16384
	tst	r2, #4
	bne	.L3627
.L3584:
	ands	r3, r3, #1
	bne	.L3585
	mov	r2, sp
	str	r3, [sp, #4]
	add	r1, sp, #16
	bic	r8, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r8, r8, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r8, #12]
	add	r6, sp, #4
	add	r10, r4, #1664
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L3588
.L3628:
	bl	schedule
.L3588:
	mov	r2, #1
	mov	r1, r6
	mov	r0, r10
	bl	prepare_to_wait
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	tst	r3, #1
	bne	.L3586
	ldr	r3, [r8, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3628
	mov	r4, #65024
	mov	r1, r6
	mov	r0, r10
	movt	r4, 65535
	bl	finish_wait
.L3592:
	movw	r3, #3306
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L3580
	movw	r1, #:lower16:.LC303
	mov	r2, r4
	ldr	r0, .L3632
	movt	r1, #:upper16:.LC303
	bl	__dynamic_pr_debug
	b	.L3580
.L3586:
	mov	r1, r6
	mov	r0, r10
	bl	finish_wait
.L3585:
	ldr	r8, [r4, #1688]
	ldr	r3, [r4, #1696]
	cmp	r3, #0
	bne	.L3589
.L3590:
	str	r7, [r8, #4]
	ldr	r0, [r4, #96]
	mov	r3, #0
	mov	r2, #208
	mov	r1, r8
	str	r3, [r4, #1696]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L3597
	movw	r3, #3234
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L3629
.L3593:
	ldr	r3, [r4, #1696]
	cmp	r3, #0
	bne	.L3589
	mov	r2, sp
	str	r3, [sp, #4]
	add	r1, sp, #16
	bic	r10, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r10, r10, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r10, #12]
	add	r6, sp, #4
	add	fp, r4, #1664
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L3596
.L3630:
	bl	schedule
.L3596:
	mov	r2, #1
	mov	r1, r6
	mov	r0, fp
	bl	prepare_to_wait
	ldr	r3, [r4, #1696]
	cmp	r3, #0
	bne	.L3594
	ldr	r3, [r10, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3630
	mov	r1, r6
	mov	r0, fp
	bl	finish_wait
	ldr	r0, [r4, #96]
	mov	r1, r8
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	cmp	r0, #0
	beq	.L3603
	movw	r3, #3258
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L3603
	movw	r1, #:lower16:.LC301
	mov	r2, r0
	ldr	r0, .L3632+4
	movt	r1, #:upper16:.LC301
	mov	r4, #65024
	bl	__dynamic_pr_debug
	movt	r4, 65535
	b	.L3592
.L3594:
	mov	r1, r6
	mov	r0, fp
	bl	finish_wait
.L3589:
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	mov	r2, #0
	str	r2, [r4, #1696]
	tst	r3, #1
	beq	.L3597
	ldr	r3, [r8, #48]
	cmp	r3, r2
	bne	.L3598
	ldr	r8, [r4, #1688]
	b	.L3590
.L3626:
	movw	r1, #:lower16:.LC298
	ldr	r0, .L3632+8
	mvn	r4, #18
	movt	r1, #:upper16:.LC298
	bl	__dynamic_pr_debug
	b	.L3580
.L3627:
	movw	r1, #:lower16:.LC299
	ldr	r0, .L3632+12
	movt	r1, #:upper16:.LC299
	bl	__dynamic_pr_debug
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	b	.L3584
.L3603:
	mov	r4, #65024
	movt	r4, 65535
	b	.L3592
.L3597:
	mvn	r4, #4
	b	.L3592
.L3625:
	movw	r1, #:lower16:.LC297
	ldr	r0, .L3632+16
	movt	r1, #:upper16:.LC297
	bl	__dynamic_pr_debug
	b	.L3581
.L3629:
	movw	r1, #:lower16:.LC300
	mov	r2, r8
	ldr	r0, .L3632+20
	movt	r1, #:upper16:.LC300
	bl	__dynamic_pr_debug
	b	.L3593
.L3598:
	movw	r2, #3282
	ldrh	r2, [r5, r2]
	tst	r2, #4
	bne	.L3631
.L3599:
	mov	r2, sp
	cmp	r7, r3
	bic	r2, r2, #8128
	movcs	r4, r3
	bic	r2, r2, #63
	movcc	r4, r7
	ldr	r3, [r2, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r9, r4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	movne	r0, r4
	bne	.L3600
	mov	r0, r9
	mov	r2, r4
	ldr	r1, [r8]
	bl	__copy_to_user
.L3600:
	cmp	r0, #0
	mvnne	r4, #13
	b	.L3592
.L3631:
	movw	r1, #:lower16:.LC302
	ldr	r0, .L3632+24
	mov	r2, r8
	movt	r1, #:upper16:.LC302
	bl	__dynamic_pr_debug
	ldr	r3, [r8, #48]
	b	.L3599
.L3633:
	.align	2
.L3632:
	.word	.LANCHOR2+3288
	.word	.LANCHOR2+3240
	.word	.LANCHOR2+3168
	.word	.LANCHOR2+3192
	.word	.LANCHOR2+3144
	.word	.LANCHOR2+3216
	.word	.LANCHOR2+3264
	.fnend
	.size	acc_read, .-acc_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_read, %function
mtp_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #3330
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR2
	strd	r10, [sp, #24]
	movt	r8, #:upper16:.LANCHOR2
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #52
	sub	sp, sp, #52
	ldrh	r3, [r8, r3]
	str	r2, [sp, #12]
	str	r1, [sp, #20]
	ldr	r2, [r4, #84]
	tst	r3, #4
	str	r2, [sp, #16]
	bne	.L3698
.L3635:
	movw	r3, #3354
	ldrh	r3, [r8, r3]
	tst	r3, #4
	bne	.L3699
.L3636:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3637
	mov	r2, sp
	str	r3, [sp, #28]
	add	r1, sp, #40
	bic	r5, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r5, r5, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r5, #12]
	add	r6, sp, #28
	add	r7, r4, #132
	str	r0, [sp, #32]
	str	r2, [sp, #36]
	str	r1, [sp, #40]
	str	r1, [sp, #44]
	b	.L3640
.L3700:
	bl	schedule
.L3640:
	mov	r2, #1
	mov	r1, r6
	mov	r0, r7
	bl	prepare_to_wait
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3638
	ldr	r3, [r5, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3700
	mov	r1, r6
	mov	r0, r7
	mov	r6, #65024
	add	r10, r4, #88
	bl	finish_wait
	movt	r6, 65535
	b	.L3644
.L3638:
	mov	r1, r6
	mov	r0, r7
	bl	finish_wait
.L3637:
	ldr	r2, [sp, #12]
	movw	r3, #:lower16:.LANCHOR0
	ldr	r1, [r4, #96]
	movt	r3, #:upper16:.LANCHOR0
	sub	r7, r2, #1
	ldr	r2, [r3, #520]
	ldrh	r3, [r1, #20]
	add	r7, r7, r3
	rsb	r3, r3, #0
	and	r7, r7, r3
	cmp	r7, r2
	bhi	.L3660
	add	r10, r4, #88
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #104]
	cmp	r3, #3
	beq	.L3701
	mov	r3, #2
	mov	r0, r10
	str	r3, [r4, #104]
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	bic	r9, r3, #8128
	bic	r9, r9, #63
	b	.L3643
.L3704:
	cmp	r3, #3
	beq	.L3648
.L3647:
	cmp	r3, #2
	bne	.L3663
	ldr	r3, [r5, #48]
	cmp	r3, #0
	bne	.L3702
.L3643:
	ldr	r5, [r4, #168]
	mov	r3, #0
	mov	r2, #208
	str	r7, [r5, #4]
	ldr	r0, [r4, #96]
	mov	r1, r5
	str	r3, [r4, #176]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L3663
	ldr	r0, .L3709
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L3703
.L3645:
	ldr	r3, [r4, #104]
	ldr	r2, [r4, #176]
	cmp	r2, #0
	bne	.L3704
	cmp	r3, #2
	beq	.L3649
	cmp	r3, #3
	beq	.L3653
.L3663:
	mvn	r6, #4
.L3644:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #104]
	cmp	r3, #3
	mvneq	r6, #124
	beq	.L3657
	cmp	r3, #0
	movne	r3, #1
	strne	r3, [r4, #104]
.L3657:
	mov	r0, r10
	bl	_raw_spin_unlock_irq
	movw	r3, #3426
	ldrh	r3, [r8, r3]
	tst	r3, #4
	bne	.L3705
.L3634:
	mov	r0, r6
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3649:
	ldr	r0, [r9, #12]
	movw	r3, #:lower16:autoremove_wake_function
	add	r1, sp, #40
	movt	r3, #:upper16:autoremove_wake_function
	add	r6, sp, #28
	str	r2, [sp, #28]
	add	fp, r4, #132
	str	r0, [sp, #32]
	str	r3, [sp, #36]
	str	r1, [sp, #40]
	str	r1, [sp, #44]
	b	.L3652
.L3706:
	bl	schedule
.L3652:
	mov	r2, #1
	mov	r1, r6
	mov	r0, fp
	bl	prepare_to_wait
	ldr	r3, [r4, #176]
	cmp	r3, #0
	bne	.L3650
	ldr	r3, [r4, #104]
	cmp	r3, #2
	bne	.L3650
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3706
	mov	r1, r6
	mov	r0, fp
	bl	finish_wait
	ldr	r3, [r4, #104]
	cmp	r3, #3
	beq	.L3658
	ldr	r0, [r4, #96]
	mov	r1, r5
	mov	r6, #65024
	movt	r6, 65535
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L3644
.L3703:
	ldr	r3, [sp, #16]
	movw	r2, #:lower16:.LC300
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC300
	ldr	r1, [r3]
	mov	r3, r5
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L3645
.L3650:
	mov	r1, r6
	mov	r0, fp
	bl	finish_wait
	ldr	r3, [r4, #104]
	cmp	r3, #3
	bne	.L3647
.L3658:
	ldr	r3, [r4, #176]
	cmp	r3, #0
	bne	.L3648
.L3653:
	ldr	r0, [r4, #96]
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L3648:
	mov	r0, r10
	mvn	r6, #124
	bl	_raw_spin_lock_irq
	mov	r3, #3
	mov	r0, r10
	str	r3, [r4, #104]
	bl	_raw_spin_unlock_irq
	b	.L3644
.L3702:
	movw	r2, #3402
	ldrh	r2, [r8, r2]
	tst	r2, #4
	bne	.L3707
.L3655:
	ldr	r1, [sp, #12]
	mov	r2, sp
	bic	r2, r2, #8128
	bic	r2, r2, #63
	cmp	r1, r3
	movcc	r6, r1
	movcs	r6, r3
	ldr	r1, [sp, #20]
	ldr	r3, [r2, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r1, r6; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	movne	r0, r6
	beq	.L3708
.L3656:
	cmp	r0, #0
	mvnne	r6, #13
	b	.L3644
.L3699:
	ldr	r3, [sp, #16]
	movw	r2, #:lower16:.LC305
	movt	r2, #:upper16:.LC305
	ldr	r0, .L3709+4
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L3636
.L3698:
	mov	r3, r2
	movw	r2, #:lower16:.LC304
	ldr	r1, [r3]
	movt	r2, #:upper16:.LC304
	add	r0, r8, #3312
	ldr	r3, [sp, #12]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L3635
.L3705:
	ldr	r3, [sp, #16]
	movw	r2, #:lower16:.LC306
	movt	r2, #:upper16:.LC306
	ldr	r0, .L3709+8
	ldr	r1, [r3]
	mov	r3, r6
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L3634
.L3708:
	mov	r0, r1
	mov	r2, r6
	ldr	r1, [r5]
	bl	__copy_to_user
	b	.L3656
.L3660:
	mvn	r6, #21
	b	.L3634
.L3707:
	ldr	r2, [sp, #16]
	ldr	r0, .L3709+12
	ldr	r1, [r2]
	movw	r2, #:lower16:.LC302
	str	r3, [sp]
	movt	r2, #:upper16:.LC302
	mov	r3, r5
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r5, #48]
	b	.L3655
.L3701:
	mov	r3, #1
	mov	r0, r10
	mvn	r6, #124
	str	r3, [r4, #104]
	bl	_raw_spin_unlock_irq
	b	.L3634
.L3710:
	.align	2
.L3709:
	.word	.LANCHOR2+3378
	.word	.LANCHOR2+3336
	.word	.LANCHOR2+3408
	.word	.LANCHOR2+3384
	.fnend
	.size	mtp_read, .-mtp_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_ctrl_read, %function
ccid_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #124]
	.pad #24
	sub	sp, sp, #24
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L3712
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #3450
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L3713
.L3728:
	mvn	r0, #18
.L3711:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3712:
	ldr	r3, [r4, #144]
	mov	r7, r1
	mov	r5, r2
	cmp	r3, #0
	bne	.L3715
	mov	r2, sp
	str	r3, [sp, #4]
	add	r1, sp, #16
	bic	r6, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r6, r6, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r6, #12]
	add	r8, r4, #128
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L3718
.L3729:
	bl	schedule
.L3718:
	mov	r2, #1
	add	r1, sp, #4
	mov	r0, r8
	bl	prepare_to_wait
	ldr	r3, [r4, #144]
	cmp	r3, #0
	bne	.L3716
	ldr	r3, [r6, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3729
	mov	r0, r8
	add	r1, sp, #4
	bl	finish_wait
	mov	r0, #65024
	movt	r0, 65535
	b	.L3711
.L3716:
	add	r1, sp, #4
	mov	r0, r8
	bl	finish_wait
.L3715:
	ldr	r3, [r4, #96]
	mov	r2, #0
	str	r2, [r4, #144]
	cmp	r3, r2
	bne	.L3719
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #3474
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	beq	.L3728
	movw	r1, #:lower16:.LC286
	ldr	r2, .L3731
	add	r0, r0, #3456
	movt	r1, #:upper16:.LC286
	bl	__dynamic_pr_debug
	b	.L3728
.L3719:
	mov	r3, sp
	cmp	r5, #4
	bic	r3, r3, #8128
	movcs	r5, #4
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	movne	r0, r5
	beq	.L3730
.L3721:
	cmp	r0, #0
	moveq	r0, r5
	mvnne	r0, #13
	b	.L3711
.L3730:
	add	r1, r4, #140
	mov	r0, r7
	mov	r2, r5
	bl	__copy_to_user
	b	.L3721
.L3713:
	movw	r1, #:lower16:.LC286
	ldr	r2, .L3731
	movt	r1, #:upper16:.LC286
	ldr	r0, .L3731+4
	bl	__dynamic_pr_debug
	mvn	r0, #18
	b	.L3711
.L3732:
	.align	2
.L3731:
	.word	.LANCHOR3+2376
	.word	.LANCHOR2+3432
	.fnend
	.size	ccid_ctrl_read, .-ccid_ctrl_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_read, %function
modem_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #32]
	tst	r3, #2048
	bne	.L3741
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r2, #57344
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	mov	r5, r1
	ldr	r3, [r4, #2200]
	str	lr, [sp, #12]
	.pad #24
	sub	sp, sp, #24
	movt	r2, 65535
	mov	r1, sp
	and	r1, r1, r2
	cmp	r3, #0
	bne	.L3735
	str	r3, [sp, #4]
	movw	r0, #:lower16:autoremove_wake_function
	mov	r6, r1
	str	r3, [sp, #8]
	movt	r0, #:upper16:autoremove_wake_function
	str	r3, [sp, #12]
	str	r0, [sp, #12]
	str	r3, [sp, #16]
	str	r3, [sp, #20]
	ldr	r2, [r1, #12]
	add	r3, sp, #16
	str	r2, [sp, #8]
	str	r3, [sp, #16]
	str	r3, [sp, #20]
	b	.L3738
.L3746:
	bl	schedule
.L3738:
	mov	r2, #1
	add	r1, sp, #4
	ldr	r0, .L3747
	bl	prepare_to_wait
	ldr	r3, [r4, #2200]
	cmp	r3, #0
	bne	.L3736
	ldr	r3, [r6, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3746
	ldr	r0, .L3747
	add	r1, sp, #4
	bl	finish_wait
	mov	r0, #65024
	movt	r0, 65535
	b	.L3733
.L3736:
	add	r1, sp, #4
	ldr	r0, .L3747
	bl	finish_wait
	mov	r3, sp
	bic	r1, r3, #8128
	bic	r1, r1, #63
.L3735:
	ldr	r3, [r1, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r5, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L3740
	mov	r0, r5
	mov	r2, #4
	ldr	r1, .L3747+4
	bl	__copy_to_user
	cmp	r0, #0
	bne	.L3740
	str	r0, [r4, #2200]
	mov	r0, #4
.L3733:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3740:
	mvn	r0, #13
	b	.L3733
.L3741:
	mvn	r0, #10
	bx	lr
.L3748:
	.align	2
.L3747:
	.word	.LANCHOR1+2204
	.word	.LANCHOR1+3480
	.fnend
	.size	modem_read, .-modem_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_read, %function
adb_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #3498
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR2
	mov	r8, r2
	movt	r9, #:upper16:.LANCHOR2
	strd	r10, [sp, #24]
	ldrh	r3, [r9, r3]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r4, [r0, #124]
	str	r1, [sp, #4]
	tst	r3, #4
	bne	.L3803
.L3750:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #3476]
	cmp	r3, #0
	beq	.L3773
	cmp	r8, #4096
	bhi	.L3774
	add	r7, r4, #108
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r7]
	add	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L3801
	mov	r3, sp
	bic	r6, r3, #8128
	bic	r6, r6, #63
.L3752:
	ldr	r3, [r4, #100]
	cmp	r3, #0
	bne	.L3758
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3758
	ldr	r0, .L3814
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L3804
.L3753:
	ldr	r3, [r4, #100]
	cmp	r3, #0
	bne	.L3752
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3752
	ldr	r0, [r6, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r2, #:upper16:autoremove_wake_function
	add	r5, sp, #12
	str	r3, [sp, #12]
	add	r10, r4, #128
	str	r0, [sp, #16]
	str	r2, [sp, #20]
	str	r1, [sp, #24]
	str	r1, [sp, #28]
	b	.L3757
.L3805:
	bl	schedule
.L3757:
	mov	r2, #1
	mov	r1, r5
	mov	r0, r10
	bl	prepare_to_wait
	ldr	r3, [r4, #100]
	cmp	r3, #0
	bne	.L3755
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3755
	ldr	r3, [r6, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3805
	mov	r1, r5
	mov	r0, r10
	bl	finish_wait
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r8, #65024
	movt	r8, 65535
.L3749:
	mov	r0, r8
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3758:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3769
	mov	r3, sp
	bic	r10, r3, #8128
	bic	r10, r10, #63
	b	.L3760
.L3765:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3769
	ldr	r3, [r6, #48]
	cmp	r3, #0
	bne	.L3806
.L3760:
	ldr	r6, [r4, #152]
	mov	r1, #4096
	mov	r3, #0
	mov	r2, #32
	str	r1, [r6, #4]
	ldr	r0, [r4, #96]
	mov	r1, r6
	str	r3, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L3807
	ldr	r0, .L3814+4
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L3808
.L3764:
	ldr	r3, [r4, #156]
	cmp	r3, #0
	bne	.L3765
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3765
	ldr	r0, [r10, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r2, #:upper16:autoremove_wake_function
	add	r5, sp, #12
	str	r3, [sp, #12]
	add	fp, r4, #128
	str	r0, [sp, #16]
	str	r2, [sp, #20]
	str	r1, [sp, #24]
	str	r1, [sp, #28]
	b	.L3768
.L3809:
	bl	schedule
.L3768:
	mov	r2, #1
	mov	r1, r5
	mov	r0, fp
	bl	prepare_to_wait
	ldr	r3, [r4, #156]
	cmp	r3, #0
	bne	.L3766
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3766
	ldr	r3, [r10, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3809
	mov	r1, r5
	mov	r0, fp
	bl	finish_wait
	ldr	r0, [r4, #96]
	mov	r1, r6
	mov	r8, #65024
	movt	r8, 65535
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L3772
.L3810:
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #140
	bl	__wake_up
	b	.L3772
.L3769:
	mvn	r8, #4
.L3761:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3810
.L3772:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r3, #3618
	ldrh	r3, [r9, r3]
	tst	r3, #4
	beq	.L3749
	movw	r1, #:lower16:.LC310
	mov	r2, r8
	ldr	r0, .L3814+8
	movt	r1, #:upper16:.LC310
	bl	__dynamic_pr_debug
	b	.L3749
.L3804:
	movw	r1, #:lower16:.LC308
	sub	r0, r0, #18
	movt	r1, #:upper16:.LC308
	bl	__dynamic_pr_debug
	b	.L3753
.L3755:
	mov	r1, r5
	mov	r0, r10
	bl	finish_wait
	b	.L3752
.L3808:
	movw	r1, #:lower16:.LC300
	mov	r2, r6
	movt	r1, #:upper16:.LC300
	sub	r0, r0, #18
	bl	__dynamic_pr_debug
	b	.L3764
.L3766:
	mov	r1, r5
	mov	r0, fp
	bl	finish_wait
	b	.L3765
.L3807:
	movw	r3, #3546
	ldrh	r3, [r9, r3]
	tst	r3, #4
	bne	.L3811
.L3763:
	mov	r3, #1
	mvn	r8, #4
	str	r3, [r4, #104]
	b	.L3761
.L3806:
	movw	r2, #3594
	ldrh	r2, [r9, r2]
	tst	r2, #4
	bne	.L3812
.L3770:
	mov	r2, sp
	cmp	r3, r8
	ldr	r0, [sp, #4]
	bic	r1, r2, #8128
	movcc	r2, r3
	bic	r1, r1, #63
	movcs	r2, r8
	ldr	r3, [r1, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r0, r2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3813
.L3771:
	cmp	r2, #0
	mvnne	r8, #13
	b	.L3761
.L3803:
	movw	r1, #:lower16:.LC307
	ldr	r0, .L3814+12
	movt	r1, #:upper16:.LC307
	bl	__dynamic_pr_debug
	b	.L3750
.L3813:
	ldr	r1, [r6]
	bl	__copy_to_user
	mov	r2, r0
	b	.L3771
.L3801:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r8, #15
	b	.L3749
.L3774:
	mvn	r8, #21
	b	.L3749
.L3811:
	movw	r1, #:lower16:.LC309
	mov	r3, r0
	ldr	r0, .L3814+16
	mov	r2, r6
	movt	r1, #:upper16:.LC309
	bl	__dynamic_pr_debug
	b	.L3763
.L3812:
	movw	r1, #:lower16:.LC302
	ldr	r0, .L3814+20
	mov	r2, r6
	movt	r1, #:upper16:.LC302
	bl	__dynamic_pr_debug
	ldr	r3, [r6, #48]
	b	.L3770
.L3773:
	mvn	r8, #18
	b	.L3749
.L3815:
	.align	2
.L3814:
	.word	.LANCHOR2+3522
	.word	.LANCHOR2+3570
	.word	.LANCHOR2+3600
	.word	.LANCHOR2+3480
	.word	.LANCHOR2+3528
	.word	.LANCHOR2+3576
	.fnend
	.size	adb_read, .-adb_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_ctrl_ioctl, %function
ccid_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r3, #17154
	str	r6, [sp, #8]
	movt	r3, 16388
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	cmp	r1, r3
	ldr	r5, [r4, #112]
	ldr	r0, [r5]
	beq	.L3818
	movw	r3, #17155
	movt	r3, 32772
	cmp	r1, r3
	beq	.L3819
	movw	r3, #17153
	movt	r3, 16388
	cmp	r1, r3
	beq	.L3831
.L3817:
	ldr	r0, [r4, #100]
	mov	r1, r5
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L3832
.L3827:
	mov	r4, #0
.L3816:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3831:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L3824
	mov	r1, r2
	mov	r2, #4
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L3830
	mov	r3, #2
	str	r3, [r5, #4]
	ldr	r5, [r4, #112]
	b	.L3817
.L3819:
	mov	r3, sp
	add	r1, r4, #200
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r0, r2, #4; sbcccs r0, r0, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L3830
	mov	r0, r2
	mov	r2, #4
	bl	__copy_to_user
	cmp	r0, #0
	beq	.L3827
.L3830:
	mvn	r4, #13
	b	.L3816
.L3818:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L3824
	mov	r1, r2
	mov	r2, #4
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L3830
	mov	r3, #4
	str	r3, [r5, #4]
	ldr	r5, [r4, #112]
	b	.L3817
.L3824:
	mov	r1, #4
	bl	__memzero
	b	.L3830
.L3832:
	movw	r0, #:lower16:.LC311
	mov	r1, r4
	movt	r0, #:upper16:.LC311
	bl	printk
	b	.L3816
	.fnend
	.size	ccid_ctrl_ioctl, .-ccid_ctrl_ioctl
	.align	2
	.global	usb_rmnet_mux_ctrl_write
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_write, %function
usb_rmnet_mux_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #124]
	ldr	r3, [r4, #372]
	cmp	r3, #0
	bne	.L3834
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #3642
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	mvneq	r5, #18
	bne	.L3859
.L3833:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L3834:
	cmp	r2, #0
	mov	r5, r2
	beq	.L3860
	cmp	r2, #4096
	bhi	.L3861
	movw	r3, #:lower16:kmalloc_caches
	mov	r6, r1
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L3850
	mov	r2, #16
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r8, r0, #0
	beq	.L3839
.L3838:
	movw	r1, #32976
	mov	r0, r5
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r8]
	beq	.L3862
	mov	r3, sp
	str	r5, [r8, #4]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L3863
	mov	r1, r6
	mov	r2, r5
	bl	__copy_from_user
	subs	r9, r0, #0
	bne	.L3864
	add	r6, r4, #368
	add	r7, r4, #376
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #348]
	mov	r1, r4
	mov	r10, r0
	add	r0, r8, #8
	add	r3, r3, #1
	str	r3, [r4, #348]
	ldr	r2, [r1, #340]!
	bl	__list_add
	mov	r0, r6
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [r4, #84]
	ldr	r3, [r4, #100]
	ldr	r3, [r3]
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r7]
	add	r2, r2, #1
	strex	r1, r2, [r7]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #1
	bne	.L3833
	mvn	r1, #94
	strb	r1, [r3]
	strb	r2, [r3, #1]
	mov	r2, #32
	strb	r9, [r3, #2]
	strb	r9, [r3, #3]
	ldrb	r1, [r4, #360]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	strb	r9, [r3, #6]
	strb	r9, [r3, #7]
	ldrd	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bge	.L3833
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r1, r3, [r7]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC316
	movt	r1, #:upper16:.LC316
	add	r0, r0, #32
	bl	dev_err
	b	.L3833
.L3863:
	mov	r1, r5
	bl	__memzero
.L3842:
	movw	r0, #:lower16:.LC315
	mov	r2, r5
	ldr	r1, .L3865
	movt	r0, #:upper16:.LC315
	bl	printk
	ldr	r0, [r8]
	bl	kfree
	mov	r0, r8
	bl	kfree
	b	.L3833
.L3850:
	mov	r8, #16
	b	.L3838
.L3859:
	movw	r1, #:lower16:.LC286
	ldr	r2, .L3865
	mvn	r5, #18
	movt	r1, #:upper16:.LC286
	ldr	r0, .L3865+4
	bl	__dynamic_pr_debug
	b	.L3833
.L3860:
	movw	r0, #:lower16:.LC312
	ldr	r1, .L3865
	mvn	r5, #18
	movt	r0, #:upper16:.LC312
	bl	printk
	b	.L3833
.L3862:
	mov	r0, r8
	bl	kfree
.L3839:
	movw	r0, #:lower16:.LC314
	ldr	r1, .L3865
	mvn	r5, #11
	movt	r0, #:upper16:.LC314
	bl	printk
	b	.L3833
.L3861:
	movw	r0, #:lower16:.LC313
	mov	r3, r2
	ldr	r1, .L3865
	movt	r0, #:upper16:.LC313
	mov	r2, #4096
	bl	printk
	mvn	r5, #11
	b	.L3833
.L3864:
	mov	r5, r9
	b	.L3842
.L3866:
	.align	2
.L3865:
	.word	.LANCHOR3+2392
	.word	.LANCHOR2+3624
	.fnend
	.size	usb_rmnet_mux_ctrl_write, .-usb_rmnet_mux_ctrl_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_write, %function
rmnet_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r4, #:lower16:.LANCHOR2
	movw	r3, #3666
	movt	r4, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r5, r2
	ldrh	r3, [r4, r3]
	strd	r8, [sp, #16]
	mov	r7, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r6, [r0, #124]
	tst	r3, #4
	bne	.L3902
.L3868:
	cmp	r5, #0
	bne	.L3869
	movw	r3, #3690
	ldrh	r3, [r4, r3]
	tst	r3, #4
	bne	.L3903
.L3884:
	mvn	r7, #21
.L3867:
	mov	r0, r7
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3869:
	cmp	r5, #2048
	bhi	.L3904
	add	r8, r6, #24
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r8]
	add	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L3872
	ldr	r3, [r6, #8]
	cmp	r3, #0
	beq	.L3905
	mov	r1, #208
	mov	r0, r5
	bl	__kmalloc
	subs	r9, r0, #0
	beq	.L3906
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3907
	mov	r1, r5
	bl	__memzero
	mov	r1, r5
.L3878:
	cmp	r1, #0
	bne	.L3908
	add	r10, r6, #52
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	ldr	r0, [r6]
	cmp	r0, #0
	beq	.L3880
	ldr	r3, [r0, #92]
	cmp	r3, #0
	beq	.L3880
	mov	r2, r5
	mov	r1, r9
	blx	r3
	subs	r7, r0, #0
	bne	.L3909
	mov	r1, fp
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r9
	bl	kfree
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r3, #3762
	ldrh	r3, [r4, r3]
	tst	r3, #4
	bne	.L3910
.L3882:
	mov	r7, r5
	b	.L3867
.L3904:
	movw	r3, #3714
	ldrh	r3, [r4, r3]
	tst	r3, #4
	beq	.L3884
	movw	r1, #:lower16:.LC319
	mov	r2, r5
	ldr	r0, .L3912
	movt	r1, #:upper16:.LC319
	mov	r3, #2048
	bl	__dynamic_pr_debug
	mvn	r7, #21
	b	.L3867
.L3907:
	mov	r1, r7
	mov	r2, r5
	bl	__copy_from_user
	mov	r1, r0
	b	.L3878
.L3903:
	movw	r1, #:lower16:.LC318
	ldr	r0, .L3912+4
	mvn	r7, #21
	movt	r1, #:upper16:.LC318
	bl	__dynamic_pr_debug
	b	.L3867
.L3902:
	movw	r1, #:lower16:.LC317
	mov	r3, r2
	ldr	r2, .L3912+8
	movt	r1, #:upper16:.LC317
	add	r0, r4, #3648
	bl	__dynamic_pr_debug
	b	.L3868
.L3910:
	movw	r1, #:lower16:.LC326
	mov	r3, r5
	ldr	r2, .L3912+8
	movt	r1, #:upper16:.LC326
	ldr	r0, .L3912+12
	bl	__dynamic_pr_debug
	b	.L3882
.L3905:
	movw	r3, #3738
	ldrh	r3, [r4, r3]
	tst	r3, #4
	bne	.L3911
.L3875:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #31
	b	.L3867
.L3911:
	movw	r1, #:lower16:.LC321
	ldr	r0, .L3912+16
	movt	r1, #:upper16:.LC321
	bl	__dynamic_pr_debug
	b	.L3875
.L3880:
	movw	r0, #:lower16:.LC325
	movt	r0, #:upper16:.LC325
	bl	printk
	mov	r1, fp
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r9
	bl	kfree
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #21
	b	.L3867
.L3872:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC320
	mvn	r7, #15
	movt	r0, #:upper16:.LC320
	bl	printk
	b	.L3867
.L3909:
	movw	r0, #:lower16:.LC324
	mov	r1, r7
	movt	r0, #:upper16:.LC324
	bl	printk
	mov	r1, fp
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r9
	bl	kfree
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L3867
.L3908:
	movw	r0, #:lower16:.LC323
	movt	r0, #:upper16:.LC323
	bl	printk
	mov	r0, r9
	bl	kfree
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #13
	b	.L3867
.L3906:
	movw	r0, #:lower16:.LC322
	movt	r0, #:upper16:.LC322
	bl	printk
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #11
	b	.L3867
.L3913:
	.align	2
.L3912:
	.word	.LANCHOR2+3696
	.word	.LANCHOR2+3672
	.word	.LANCHOR3+2420
	.word	.LANCHOR2+3744
	.word	.LANCHOR2+3720
	.fnend
	.size	rmnet_ctrl_write, .-rmnet_ctrl_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_prepare_buffer, %function
ffs_prepare_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r4, r1, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L3916
	mov	r5, r0
	mov	r1, #208
	mov	r0, r4
	bl	__kmalloc
	subs	r6, r0, #0
	beq	.L3917
	mov	r2, r4
	mov	r1, r5
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L3922
.L3914:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3916:
	mov	r6, r4
	b	.L3914
.L3917:
	mvn	r6, #11
	b	.L3914
.L3922:
	mov	r0, r6
	mvn	r6, #13
	bl	kfree
	b	.L3914
	.fnend
	.size	ffs_prepare_buffer, .-ffs_prepare_buffer
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_get_drvinfo, %function
eth_get_drvinfo:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	movw	r1, #:lower16:.LC327
	mov	r5, r0
	movt	r1, #:upper16:.LC327
	str	r6, [sp, #8]
	add	r0, r4, #4
	mov	r2, #32
	str	lr, [sp, #12]
	bl	strlcpy
	movw	r1, #:lower16:.LC328
	add	r0, r4, #36
	movt	r1, #:upper16:.LC328
	mov	r2, #32
	bl	strlcpy
	ldr	r3, [r5, #1164]
	add	r0, r4, #68
	mov	r2, #32
	ldr	r1, [r3, #28]
	bl	strlcpy
	ldr	r3, [r5, #1164]
	add	r0, r4, #100
	mov	r2, #32
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, [r3, #76]
	cmp	r1, #0
	ldreq	r1, [r3, #40]
	b	strlcpy
	.fnend
	.size	eth_get_drvinfo, .-eth_get_drvinfo
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_qc_get_drvinfo, %function
eth_qc_get_drvinfo:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	movw	r1, #:lower16:.LC329
	mov	r5, r0
	movt	r1, #:upper16:.LC329
	str	r6, [sp, #8]
	add	r0, r4, #4
	mov	r2, #32
	str	lr, [sp, #12]
	bl	strlcpy
	movw	r1, #:lower16:.LC328
	add	r0, r4, #36
	movt	r1, #:upper16:.LC328
	mov	r2, #32
	bl	strlcpy
	ldr	r3, [r5, #1164]
	add	r0, r4, #68
	mov	r2, #32
	ldr	r1, [r3, #28]
	bl	strlcpy
	ldr	r3, [r5, #1164]
	add	r0, r4, #100
	mov	r2, #32
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, [r3, #76]
	cmp	r1, #0
	ldreq	r1, [r3, #40]
	b	strlcpy
	.fnend
	.size	eth_qc_get_drvinfo, .-eth_qc_get_drvinfo
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	pm_qos_store, %function
pm_qos_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	mov	r4, r3
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	add	r0, r0, #52
	mov	r1, r5
	mov	r2, #5
	bl	strlcpy
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	pm_qos_store, .-pm_qos_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_transports_store, %function
ecm_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L3933
	mov	r2, #50
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3934:
	.align	2
.L3933:
	.word	.LANCHOR1+3020
	.fnend
	.size	ecm_transports_store, .-ecm_transports_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_update_pid_and_serial_num, %function
usb_diag_update_pid_and_serial_num:
	.fnstart
	@ args = 0, pretend = 0, frame = 144
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r4, #:lower16:__stack_chk_guard
	movw	r5, #:lower16:.LANCHOR1
	movt	r4, #:upper16:__stack_chk_guard
	strd	r6, [sp, #8]
	mov	r2, #140
	ldr	r3, [r4]
	str	lr, [sp, #16]
	.pad #164
	sub	sp, sp, #164
	movt	r5, #:upper16:.LANCHOR1
	mov	r7, r0
	mov	r6, r1
	add	r0, sp, #16
	mov	r1, #0
	str	r3, [sp, #156]
	bl	memset
	ldr	r2, [r5, #3540]
	cmp	r2, #0
	beq	.L3949
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #3810
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L3950
.L3938:
	movw	r3, #10505
	cmp	r6, #0
	str	r7, [sp, #16]
	movt	r3, 28995
	str	r3, [sp, #148]
	beq	.L3951
	movw	r3, #21364
	mov	r1, r6
	movt	r3, 24980
	mov	r2, #128
	add	r0, sp, #20
	str	r3, [sp, #152]
	bl	strlcpy
.L3940:
	ldr	r2, [r5, #3540]
	add	r3, sp, #16
	add	r0, sp, #156
	sub	r2, r2, #4
.L3941:
	ldr	r1, [r3], #4
	cmp	r3, r0
	str	r1, [r2, #4]!
	bne	.L3941
	mov	r0, #0
.L3935:
	ldr	r2, [sp, #156]
	ldr	r3, [r4]
	cmp	r2, r3
	bne	.L3952
	add	sp, sp, #164
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L3951:
	mov	r1, #128
	add	r0, sp, #20
	str	r6, [sp, #152]
	bl	__memzero
	b	.L3940
.L3949:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #3786
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	mvneq	r0, #18
	beq	.L3935
	ldr	r3, .L3953
	movw	r1, #:lower16:.LC330
	movt	r1, #:upper16:.LC330
	ldr	r0, .L3953+4
	mov	r2, r3
	bl	__dynamic_pr_debug
	mvn	r0, #18
	b	.L3935
.L3950:
	ldr	r3, .L3953
	movw	r1, #:lower16:.LC331
	stm	sp, {r2, r7}
	movt	r1, #:upper16:.LC331
	str	r6, [sp, #8]
	add	r0, r0, #3792
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L3938
.L3952:
	bl	__stack_chk_fail
.L3954:
	.align	2
.L3953:
	.word	.LANCHOR3+2440
	.word	.LANCHOR2+3768
	.fnend
	.size	usb_diag_update_pid_and_serial_num, .-usb_diag_update_pid_and_serial_num
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	clients_store, %function
clients_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L3957
	mov	r2, #32
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3958:
	.align	2
.L3957:
	.word	.LANCHOR1+3544
	.fnend
	.size	clients_store, .-clients_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_xport_names_store, %function
rmnet_xport_names_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L3961
	mov	r2, #50
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3962:
	.align	2
.L3961:
	.word	.LANCHOR1+3072
	.fnend
	.size	rmnet_xport_names_store, .-rmnet_xport_names_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_transports_store, %function
rmnet_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L3965
	mov	r2, #50
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3966:
	.align	2
.L3965:
	.word	.LANCHOR1+3124
	.fnend
	.size	rmnet_transports_store, .-rmnet_transports_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_transports_store, %function
mbim_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L3969
	mov	r2, #50
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3970:
	.align	2
.L3969:
	.word	.LANCHOR1+3176
	.fnend
	.size	mbim_transports_store, .-mbim_transports_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_send, %function
audio_send:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r8, r0, #108
	strd	r10, [sp, #24]
	mov	r0, r8
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #92]
	cmp	r3, #0
	moveq	r1, r0
	beq	.L3991
	ldr	r2, [r5, #120]
	mov	r1, r0
	mov	r0, r8
	cmp	r2, #0
	beq	.L3992
	ldr	r3, [r3, #212]
	movw	r4, #44100
	adr	fp, .L3998
	ldrd	r10, [fp]
	str	r3, [sp, #12]
	bl	_raw_spin_unlock_irqrestore
	add	r0, sp, #16
	bl	ktime_get
	ldr	r2, [sp, #16]
	mov	ip, #0
	ldr	r3, [r5, #136]
	mov	r1, ip
	mov	lr, ip
	ldr	r9, [r5, #140]
	ldr	r0, [sp, #20]
	subs	r6, r2, r3
	sbc	r7, r0, r9
	ldr	r9, [r5, #144]
	.syntax divided
@ 350 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_audio_source.c" 1
	umull	r2, r3, r10, r6
	mov	r2, #0
@ 0 "" 2
@ 350 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_audio_source.c" 1
	umlal	r3, r2, fp, r6
	umlal	r3, r1, r10, r7
	mov	r3, #0
	adds	r2, r1, r2
	adc	r3, r3, #0
	umlal	r2, r3, fp, r7
@ 0 "" 2
	.arm
	.syntax unified
	lsr	r0, r2, #18
	mov	r7, r3
	adr	fp, .L3998+8
	ldrd	r10, [fp]
	lsr	r2, r7, #18
	orr	r0, r0, r7, lsl #14
	mov	r6, #440
	mov	r7, #0
	umull	r0, r1, r0, r4
	mla	r1, r4, r2, r1
	.syntax divided
@ 352 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_audio_source.c" 1
	umull	r2, r3, r10, r0
	cmn	r2, r10
	adcs	r3, r3, fp
	adc	r2, ip, #0
@ 0 "" 2
@ 352 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_audio_source.c" 1
	umlal	r3, r2, fp, r0
	umlal	r3, lr, r10, r1
	mov	r3, #0
	adds	r2, lr, r2
	adc	r3, r3, #0
	umlal	r2, r3, fp, r1
@ 0 "" 2
	.arm
	.syntax unified
	lsr	r2, r2, #9
	mov	fp, r3
	lsr	r1, fp, #9
	orr	r2, r2, fp, lsl #23
	subs	r3, r2, r9
	str	r3, [sp]
	ldr	r3, [r5, #148]
	sbc	r3, r1, r3
	str	r3, [sp, #4]
	ldrd	r10, [sp]
	cmp	r6, r10
	sbcs	r3, r7, fp
	blt	.L3994
	mov	r3, fp
	cmp	r10, #1
	sbcs	r3, r3, #0
	bge	.L3976
	mov	r2, #44
	mov	r3, #0
	strd	r2, [sp]
.L3976:
	add	r3, r5, #96
	ldrd	r10, [sp]
	ldr	r9, [sp, #12]
	str	r3, [sp, #8]
	b	.L3985
.L3997:
	sub	r7, r7, r1
	mov	r2, r7
	bl	memcpy
	cmp	r4, r7
	mov	r3, r7
	ble	.L3982
	ldr	r0, [r6]
	sub	r3, r4, r7
	mov	r2, r3
	ldr	r1, [r5, #112]
	str	r3, [sp, #12]
	add	r0, r0, r7
	bl	memcpy
	ldr	r3, [sp, #12]
	ldr	r2, [r5, #112]
	add	r3, r2, r3
	str	r3, [r5, #120]
.L3983:
	mov	r0, r8
	ldr	r1, [sp]
	str	r4, [r6, #4]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #104]
	mov	r2, #32
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L3995
	ldr	r0, [r9, #80]
	lsl	r4, r4, #3
	mov	r1, #0
	ldr	r3, [r5, #144]
	ldr	r2, [r5, #148]
	udiv	r4, r4, r0
	subs	r10, r10, r4
	sbc	fp, fp, r1
	adds	r4, r3, r4
	adc	r3, r2, r1
	cmp	r10, #1
	sbcs	r2, fp, #0
	str	r4, [r5, #144]
	str	r3, [r5, #148]
	blt	.L3996
.L3985:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #8]
	mov	r4, r0
	ldr	r6, [r5, #96]
	cmp	r3, r6
	beq	.L3987
	mov	r0, r6
	sub	r6, r6, #36
	bl	list_del
.L3977:
	mov	r1, r4
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #92]
	str	r0, [sp]
	cmp	r3, #0
	beq	.L3993
	ldr	r1, [r5, #120]
	cmp	r1, #0
	beq	.L3993
	cmp	r6, #0
	beq	.L3993
	ldr	r4, [r9, #80]
	ldr	r7, [r5, #116]
	ldr	r0, [r6]
	mul	r4, r10, r4
	lsr	r4, r4, #3
	cmp	r4, #256
	movcs	r4, #256
	add	r3, r1, r4
	cmp	r7, r3
	bcc	.L3997
	mov	r2, r4
	str	r4, [sp, #12]
	bl	memcpy
	ldr	r3, [sp, #12]
.L3982:
	ldr	r1, [r5, #116]
	ldr	r2, [r5, #120]
	add	r3, r2, r3
	cmp	r3, r1
	str	r3, [r5, #120]
	ldrcs	r3, [r5, #112]
	strcs	r3, [r5, #120]
	b	.L3983
.L3995:
	mov	r1, r0
	movw	r0, #:lower16:.LC332
	movt	r0, #:upper16:.LC332
	bl	printk
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r4, r0
	ldr	r1, [r5, #100]
	add	r0, r6, #36
	ldr	r2, [sp, #8]
	bl	__list_add
	mov	r1, r4
.L3991:
	mov	r0, r8
.L3992:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L3994:
	subs	r2, r2, #44
	mov	r3, #0
	sbc	r1, r1, #0
	str	r2, [r5, #144]
	mov	r2, #44
	str	r1, [r5, #148]
	strd	r2, [sp]
	b	.L3976
.L3993:
	mov	r1, r0
	mov	r0, r8
	b	.L3992
.L3987:
	mov	r6, #0
	b	.L3977
.L3996:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3999:
	.align	3
.L3998:
	.word	-675924773
	.word	1125899906
	.word	-1924145349
	.word	-2095944041
	.fnend
	.size	audio_send, .-audio_send
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_playback_trigger, %function
audio_pcm_playback_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r3, [r0, #212]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r3, #200]
	cmp	r1, #6
	ldrls	pc, [pc, r1, asl #2]
	b	.L4005
.L4003:
	.word	.L4002
	.word	.L4004
	.word	.L4005
	.word	.L4005
	.word	.L4005
	.word	.L4002
	.word	.L4004
.L4004:
	mov	r0, sp
	mov	r6, #0
	bl	ktime_get
	ldrd	r2, [sp]
	mov	r7, #0
	mov	r0, r5
	strd	r2, [r5, #136]
	strd	r6, [r5, #144]
	bl	audio_send
	mov	r0, #0
.L4000:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L4002:
	add	r6, r5, #108
	mov	r4, #0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r4, [r5, #112]
	mov	r0, r6
	str	r4, [r5, #116]
	str	r4, [r5, #120]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	b	.L4000
.L4005:
	mvn	r0, #21
	b	.L4000
	.fnend
	.size	audio_pcm_playback_trigger, .-audio_pcm_playback_trigger
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_open, %function
audio_pcm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L4009
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	strd	r10, [sp, #20]
	str	lr, [sp, #28]
	ldrd	r2, [ip, #8]
	ldr	r8, [r0, #8]
	ldr	r6, [r0, #212]
	ldrd	r0, [ip]
	ldrd	r4, [ip, #16]
	ldrd	r10, [ip, #48]
	add	lr, r6, #208
	str	r8, [r6, #200]
	strd	r2, [r6, #216]
	ldrd	r2, [ip, #32]
	strd	r0, [r6, #208]
	ldrd	r0, [ip, #24]
	strd	r4, [r6, #224]
	ldrd	r4, [ip, #40]
	strd	r2, [r6, #240]
	ldrd	r2, [ip, #56]
	strd	r0, [r6, #232]
	mov	r0, r6
	strd	r4, [r6, #248]
	strd	r10, [lr, #48]
	strd	r2, [lr, #56]
	bl	snd_pcm_limit_hw_rates
	mov	r3, #2
	mov	r0, #0
	str	r3, [r6, #240]
	str	r7, [r8, #92]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldrd	r10, [sp, #20]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4010:
	.align	2
.L4009:
	.word	.LANCHOR3+2480
	.fnend
	.size	audio_pcm_open, .-audio_pcm_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	functions_show, %function
functions_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	add	r3, r0, #24
	mov	r9, r0
	mov	r0, r3
	str	r3, [sp, #4]
	bl	mutex_lock
	ldr	r7, [r9, #508]!
	cmp	r9, r7
	beq	.L4023
	movw	r8, #:lower16:.LC333
	sub	r7, r7, #120
	mov	r5, r10
	movt	r8, #:upper16:.LC333
	mov	fp, #58
.L4012:
	mov	r6, r7
	ldr	r4, [r6, #112]!
	cmp	r6, r4
	sub	r4, r4, #4
	beq	.L4015
.L4016:
	ldr	r3, [r4]
	mov	r0, r5
	mov	r2, r8
	mov	r1, #4096
	ldr	r3, [r3]
	bl	snprintf
	ldr	r4, [r4, #4]
	add	r5, r5, r0
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L4016
.L4015:
	ldr	r7, [r7, #120]
	cmp	r9, r7
	sub	r7, r7, #120
	beq	.L4024
	cmp	r10, r5
	strbne	fp, [r5, #-1]
	b	.L4012
.L4024:
	ldr	r0, [sp, #4]
	bl	mutex_unlock
	cmp	r10, r5
	sub	r0, r5, r10
	beq	.L4011
	mov	r3, #10
	strb	r3, [r5, #-1]
.L4011:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4023:
	ldr	r0, [sp, #4]
	bl	mutex_unlock
	mov	r0, #0
	b	.L4011
	.fnend
	.size	functions_show, .-functions_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_aliases_show, %function
ffs_aliases_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	ldr	r5, [r3, #3308]
	sub	r4, r5, #496
	mov	r0, r4
	bl	mutex_lock
	movw	r1, #:lower16:.LC82
	sub	r2, r5, #324
	mov	r0, r6
	movt	r1, #:upper16:.LC82
	bl	sprintf
	mov	r5, r0
	mov	r0, r4
	bl	mutex_unlock
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ffs_aliases_show, .-ffs_aliases_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_rx_push, %function
gsmd_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #3834
	mov	r4, r0
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR2
	movt	r6, #:upper16:.LANCHOR2
	strd	r8, [sp, #16]
	ldrh	r3, [r6, r3]
	strd	r10, [sp, #24]
	sub	fp, r0, #28
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r7, [r0, #44]
	tst	r3, #4
	bne	.L4068
.L4028:
	sub	r8, r4, #24
	sub	r10, r4, #8
	mov	r0, r8
	bl	_raw_spin_lock_irq
	ldr	r0, [r7]
	cmp	r0, #0
	beq	.L4033
	ldr	r5, [r4, #-8]
	cmp	r5, r10
	beq	.L4033
	movw	r9, #:lower16:.LC336
	movt	r9, #:upper16:.LC336
	str	r9, [sp, #12]
.L4038:
	ldr	r3, [r5, #8]
	cmn	r3, #108
	beq	.L4031
	cmp	r3, #0
	bne	.L4069
.L4032:
	bl	smd_write_avail
	cmp	r0, #0
	beq	.L4033
	ldr	r9, [r5, #12]
	cmp	r9, #0
	beq	.L4034
	ldr	r2, [r4, #-20]
	ldr	r1, [r5, #-36]
	ldr	r0, [r7]
	cmp	r2, #0
	subne	r9, r9, r2
	addne	r1, r1, r2
	mov	r2, r9
	bl	smd_write
	cmp	r0, #0
	blt	.L4070
	cmp	r0, r9
	bne	.L4071
	ldr	r2, [r4, #140]
	add	r3, r2, r9
	str	r3, [r4, #140]
.L4034:
	mov	r3, #0
	mov	r0, r5
	str	r3, [r4, #-20]
	bl	__list_del_entry
	mov	r1, r4
	mov	r0, r5
	ldr	r2, [r1, #-16]!
	bl	__list_add
	ldr	r0, [r7]
	cmp	r0, #0
	beq	.L4033
	ldr	r5, [r4, #-8]
	cmp	r10, r5
	bne	.L4038
.L4033:
	mov	r0, r8
	bl	_raw_spin_unlock_irq
	mov	r0, fp
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gsmd_start_rx
.L4031:
	movw	r3, #3858
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L4033
	movw	r1, #:lower16:.LC335
	ldr	r3, [r4, #-28]
	str	fp, [sp]
	movt	r1, #:upper16:.LC335
	ldr	r2, .L4072
	ldr	r0, .L4072+4
	bl	__dynamic_pr_debug
	b	.L4033
.L4068:
	ldr	ip, [r4, #-28]
	movw	r1, #:lower16:.LC334
	mov	r3, fp
	movt	r1, #:upper16:.LC334
	ldr	r2, .L4072
	ldr	r0, .L4072+8
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L4028
.L4071:
	ldr	r3, [r4, #-20]
	add	r2, r3, r0
	str	r2, [r4, #-20]
	b	.L4033
.L4069:
	str	r3, [sp]
	mov	r2, fp
	ldr	r1, .L4072
	ldr	r0, [sp, #12]
	ldr	r3, [r4, #-28]
	bl	printk
	ldr	r0, [r7]
	b	.L4032
.L4070:
	mov	r2, r0
	movw	r0, #:lower16:.LC337
	ldr	r1, .L4072
	movt	r0, #:upper16:.LC337
	bl	printk
	b	.L4033
.L4073:
	.align	2
.L4072:
	.word	.LANCHOR3+2544
	.word	.LANCHOR2+3840
	.word	.LANCHOR2+3816
	.fnend
	.size	gsmd_rx_push, .-gsmd_rx_push
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_rx_push, %function
gs_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r3, r0, #60
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	sub	r9, r0, #12
	mov	r0, r3
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	str	r3, [sp]
	bl	_raw_spin_lock_irq
	ldr	r7, [r4, #-52]
	ldr	r5, [r4, #-12]
	cmp	r9, r5
	beq	.L4075
	mov	r8, #0
	movw	r3, #:lower16:.LC338
	movt	r3, #:upper16:.LC338
	mov	r10, r8
	mov	fp, r8
	str	r3, [sp, #4]
.L4084:
	cmp	r7, #0
	beq	.L4076
	ldr	r3, [r7, #156]
	tst	r3, #1
	bne	.L4077
	ldr	r2, [r5, #8]
	cmn	r2, #108
	moveq	r10, #1
	beq	.L4079
	cmp	r2, #0
	bne	.L4114
.L4079:
	ldr	r6, [r5, #12]
	cmp	r6, #0
	beq	.L4076
	ldr	r3, [r4, #-4]
	mov	r2, #0
	mov	r0, r7
	ldr	r1, [r5, #-36]
	cmp	r3, #0
	subne	r6, r6, r3
	addne	r1, r1, r3
	mov	r3, r6
	bl	tty_insert_flip_string_fixed_flag
	ldr	r3, [r4, #72]
	cmp	r0, #0
	movne	r8, #1
	cmp	r0, r6
	add	r3, r3, r0
	str	r3, [r4, #72]
	bne	.L4115
	str	fp, [r4, #-4]
.L4076:
	mov	r0, r5
	bl	__list_del_entry
	mov	r1, r4
	mov	r0, r5
	ldr	r2, [r1, #-28]!
	bl	__list_add
	ldr	r3, [r4, #-20]
	ldr	r5, [r4, #-12]
	sub	r3, r3, #1
	cmp	r9, r5
	str	r3, [r4, #-20]
	bne	.L4084
	cmp	r7, #0
	moveq	r8, #0
	andne	r8, r8, #1
	cmp	r8, #0
	bne	.L4091
.L4088:
	cmp	r10, #0
	bne	.L4090
.L4075:
	ldr	r3, [r4, #-56]
	cmp	r3, #0
	beq	.L4090
	ldr	r0, [sp]
	bl	gs_start_rx
.L4090:
	ldr	r0, [sp]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq
.L4115:
	ldr	r3, [r4, #-4]
	add	r0, r3, r0
	str	r0, [r4, #-4]
.L4077:
	cmp	r8, #0
	bne	.L4091
	ldr	r3, [r4, #-12]
	cmp	r9, r3
	beq	.L4088
	ldr	r3, [r7, #156]
	tst	r3, #1
	bne	.L4088
	movw	r0, #:lower16:.LC339
	ldrb	r1, [r4, #-43]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC339
	bl	printk
	b	.L4088
.L4091:
	mov	r0, r7
	bl	tty_flip_buffer_push
	ldr	r3, [r4, #-12]
	cmp	r9, r3
	beq	.L4088
	ldr	r3, [r7, #156]
	tst	r3, #1
	bne	.L4088
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, r4
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3388]
	bl	queue_work_on
	b	.L4088
.L4114:
	ldrb	r1, [r4, #-43]	@ zero_extendqisi2
	ldr	r0, [sp, #4]
	bl	printk
	b	.L4079
	.fnend
	.size	gs_rx_push, .-gs_rx_push
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ch_probe, %function
gsdio_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #3882
	movt	r5, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r0
	str	lr, [sp, #24]
	ldrh	r3, [r5, r3]
	.pad #12
	sub	sp, sp, #12
	ldr	r7, [r0]
	tst	r3, #4
	bne	.L4140
.L4117:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4]
	cmp	r3, #0
	beq	.L4118
	ldr	r6, [r4, #24]
	movw	r3, #3906
	ldrh	r3, [r5, r3]
	ldr	r9, [r6, #120]
	tst	r3, #4
	ldr	r0, [r9]
	bne	.L4141
.L4119:
	mov	r2, #9
	mov	r1, r7
	bl	strncmp
	cmp	r0, #0
	beq	.L4120
	ldr	r3, [r4]
	cmp	r3, #1
	bls	.L4118
	ldr	r6, [r4, #128]
	movw	r3, #3906
	ldrh	r3, [r5, r3]
	ldr	r5, [r6, #120]
	tst	r3, #4
	ldr	r0, [r5]
	bne	.L4142
.L4122:
	mov	r2, #9
	mov	r1, r7
	bl	strncmp
	cmp	r0, #0
	beq	.L4120
.L4118:
	movw	r0, #:lower16:.LC341
	mov	r2, r7
	ldr	r1, .L4143
	movt	r0, #:upper16:.LC341
	bl	printk
	mvn	r0, #18
.L4116:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L4120:
	mov	r3, #1
	ldr	r4, [r4, #3396]
	movw	r0, #10000
	str	r3, [r6, #112]
	bl	msecs_to_jiffies
	mov	r3, r0
	mov	r1, r4
	mov	r0, #4
	add	r2, r6, #124
	bl	queue_delayed_work_on
	mov	r0, #0
	b	.L4116
.L4140:
	movw	r1, #:lower16:.LC177
	mov	r3, r7
	ldr	r2, .L4143
	movt	r1, #:upper16:.LC177
	ldr	r0, .L4143+4
	bl	__dynamic_pr_debug
	ldr	r7, [r8]
	b	.L4117
.L4141:
	movw	r1, #:lower16:.LC340
	mov	r3, r0
	str	r7, [sp]
	movt	r1, #:upper16:.LC340
	ldr	r2, .L4143
	ldr	r0, .L4143+8
	bl	__dynamic_pr_debug
	ldr	r7, [r8]
	ldr	r0, [r9]
	b	.L4119
.L4142:
	movw	r1, #:lower16:.LC340
	mov	r3, r0
	str	r7, [sp]
	movt	r1, #:upper16:.LC340
	ldr	r2, .L4143
	ldr	r0, .L4143+8
	bl	__dynamic_pr_debug
	ldr	r0, [r5]
	ldr	r7, [r8]
	b	.L4122
.L4144:
	.align	2
.L4143:
	.word	.LANCHOR3+2560
	.word	.LANCHOR2+3864
	.word	.LANCHOR2+3888
	.fnend
	.size	gsdio_ch_probe, .-gsdio_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ch_remove, %function
gsmd_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #3930
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r5, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L4163
.L4146:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r6, [r4, #212]
	cmp	r6, #0
	beq	.L4149
	ldr	r3, [r4, #236]
	mov	r2, #20
	ldr	r7, [r5]
	ldr	r5, [r3, #72]
	mov	r1, r7
	ldr	r0, [r5, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4148
	cmp	r6, #1
	bls	.L4149
	ldr	r3, [r4, #340]
	mov	r1, r7
	mov	r2, #20
	ldr	r5, [r3, #72]
	ldr	r0, [r5, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4148
.L4149:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4148:
	add	r4, r5, #8
	mov	r0, #1
	mov	r1, r4
	bl	_clear_bit
	mov	r0, #0
	mov	r1, r4
	bl	_clear_bit
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L4149
	bl	smd_close
	mov	r3, #0
	str	r3, [r5]
	b	.L4149
.L4163:
	movw	r1, #:lower16:.LC177
	ldr	r2, .L4164
	movt	r1, #:upper16:.LC177
	ldr	r3, [r5]
	ldr	r0, .L4164+4
	bl	__dynamic_pr_debug
	b	.L4146
.L4165:
	.align	2
.L4164:
	.word	.LANCHOR3+2576
	.word	.LANCHOR2+3912
	.fnend
	.size	gsmd_ch_remove, .-gsmd_ch_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ch_probe, %function
gsmd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #3954
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L4184
.L4167:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r7, [r4, #212]
	cmp	r7, #0
	beq	.L4168
	ldr	r5, [r4, #236]
	mov	r2, #20
	ldr	r8, [r6]
	ldr	r6, [r5, #72]
	mov	r1, r8
	ldr	r0, [r6, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4169
	cmp	r7, #1
	bls	.L4168
	ldr	r5, [r4, #340]
	mov	r1, r8
	mov	r2, #20
	ldr	r6, [r5, #72]
	ldr	r0, [r6, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4169
.L4168:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4169:
	add	r1, r6, #8
	mov	r0, #1
	add	r6, r5, #4
	bl	_set_bit
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #68]
	mov	r7, r0
	cmp	r3, #0
	beq	.L4170
	ldr	r4, [r4, #3400]
	mov	r0, #0
	bl	msecs_to_jiffies
	mov	r3, r0
	add	r2, r5, #76
	mov	r0, #4
	mov	r1, r4
	bl	queue_delayed_work_on
.L4170:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L4168
.L4184:
	movw	r1, #:lower16:.LC177
	add	r0, r3, #3936
	ldr	r2, .L4185
	movt	r1, #:upper16:.LC177
	ldr	r3, [r6]
	bl	__dynamic_pr_debug
	b	.L4167
.L4186:
	.align	2
.L4185:
	.word	.LANCHOR3+2592
	.fnend
	.size	gsmd_ch_probe, .-gsmd_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_ch_probe, %function
gbam_data_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #3978
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r5, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L4198
.L4188:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #424]
	cmp	r3, #0
	ble	.L4189
	movw	r0, #:lower16:.LC342
	mov	r2, #20
	ldr	r1, [r5]
	movt	r0, #:upper16:.LC342
	bl	strncmp
	cmp	r0, #0
	beq	.L4199
.L4189:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4199:
	ldr	r5, [r4, #428]
	mov	r0, #2
	add	r1, r5, #20
	add	r6, r5, #4
	bl	_set_bit
	mov	r0, r6
	add	r7, r5, #8
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L4190
	add	r2, r5, #284
	mov	r0, #4
	ldr	r1, [r4, #3532]
	bl	queue_work_on
.L4190:
	mov	r0, r7
	bl	_raw_spin_unlock
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L4189
.L4198:
	movw	r1, #:lower16:.LC177
	ldr	r2, .L4200
	movt	r1, #:upper16:.LC177
	ldr	r3, [r5]
	ldr	r0, .L4200+4
	bl	__dynamic_pr_debug
	b	.L4188
.L4201:
	.align	2
.L4200:
	.word	.LANCHOR3+2608
	.word	.LANCHOR2+3960
	.fnend
	.size	gbam_data_ch_probe, .-gbam_data_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_ch_remove, %function
grmnet_ctrl_smd_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #4002
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L4252
.L4203:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r4, [r5, #512]
	cmp	r4, #0
	beq	.L4204
	mov	r2, #20
	ldr	r0, [r4, #4]
	ldr	r1, [r6]
	bl	strncmp
	cmp	r0, #0
	beq	.L4205
.L4204:
	ldr	r4, [r5, #596]
	cmp	r4, #0
	beq	.L4206
	mov	r2, #20
	ldr	r0, [r4, #4]
	ldr	r1, [r6]
	bl	strncmp
	cmp	r0, #0
	beq	.L4205
.L4206:
	ldr	r4, [r5, #680]
	cmp	r4, #0
	beq	.L4207
	mov	r2, #20
	ldr	r0, [r4, #4]
	ldr	r1, [r6]
	bl	strncmp
	cmp	r0, #0
	beq	.L4205
.L4207:
	ldr	r4, [r5, #764]
	cmp	r4, #0
	beq	.L4208
	mov	r2, #20
	ldr	r0, [r4, #4]
	ldr	r1, [r6]
	bl	strncmp
	cmp	r0, #0
	beq	.L4205
.L4208:
	ldr	r4, [r5, #848]
	cmp	r4, #0
	beq	.L4209
	mov	r2, #20
	ldr	r0, [r4, #4]
	ldr	r1, [r6]
	bl	strncmp
	cmp	r0, #0
	beq	.L4205
.L4209:
	ldr	r4, [r5, #932]
	cmp	r4, #0
	beq	.L4211
	mov	r2, #20
	ldr	r0, [r4, #4]
	ldr	r1, [r6]
	bl	strncmp
	cmp	r0, #0
	beq	.L4205
.L4211:
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4205:
	add	r5, r4, #8
	mov	r0, #1
	mov	r1, r5
	bl	_clear_bit
	mov	r0, #0
	mov	r1, r5
	bl	_clear_bit
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L4211
	bl	smd_close
	mov	r3, #0
	str	r3, [r4]
	b	.L4211
.L4252:
	movw	r1, #:lower16:.LC177
	add	r0, r3, #3984
	ldr	r2, .L4253
	movt	r1, #:upper16:.LC177
	ldr	r3, [r6]
	bl	__dynamic_pr_debug
	b	.L4203
.L4254:
	.align	2
.L4253:
	.word	.LANCHOR3+2628
	.fnend
	.size	grmnet_ctrl_smd_ch_remove, .-grmnet_ctrl_smd_ch_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_ch_probe, %function
grmnet_ctrl_smd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #4026
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L4305
.L4256:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r4, [r5, #512]
	cmp	r4, #0
	beq	.L4257
	mov	r2, #20
	ldr	r0, [r4, #4]
	ldr	r1, [r6]
	bl	strncmp
	cmp	r0, #0
	beq	.L4258
.L4257:
	ldr	r4, [r5, #596]
	cmp	r4, #0
	beq	.L4259
	mov	r2, #20
	ldr	r0, [r4, #4]
	ldr	r1, [r6]
	bl	strncmp
	cmp	r0, #0
	beq	.L4258
.L4259:
	ldr	r4, [r5, #680]
	cmp	r4, #0
	beq	.L4260
	mov	r2, #20
	ldr	r0, [r4, #4]
	ldr	r1, [r6]
	bl	strncmp
	cmp	r0, #0
	beq	.L4258
.L4260:
	ldr	r4, [r5, #764]
	cmp	r4, #0
	beq	.L4261
	mov	r2, #20
	ldr	r0, [r4, #4]
	ldr	r1, [r6]
	bl	strncmp
	cmp	r0, #0
	beq	.L4258
.L4261:
	ldr	r4, [r5, #848]
	cmp	r4, #0
	beq	.L4262
	mov	r2, #20
	ldr	r0, [r4, #4]
	ldr	r1, [r6]
	bl	strncmp
	cmp	r0, #0
	beq	.L4258
.L4262:
	ldr	r4, [r5, #932]
	cmp	r4, #0
	beq	.L4263
	mov	r2, #20
	ldr	r0, [r4, #4]
	ldr	r1, [r6]
	bl	strncmp
	cmp	r0, #0
	beq	.L4258
.L4263:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4258:
	add	r6, r4, #8
	mov	r0, #2
	mov	r1, r6
	add	r7, r4, #108
	bl	_clear_bit
	mov	r1, r6
	mov	r0, #1
	bl	_set_bit
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #104]
	mov	r6, r0
	cmp	r3, #0
	beq	.L4264
	add	r2, r4, #112
	mov	r3, #0
	ldr	r1, [r5, #3484]
	mov	r0, #4
	bl	queue_delayed_work_on
.L4264:
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L4263
.L4305:
	movw	r1, #:lower16:.LC177
	ldr	r2, .L4306
	movt	r1, #:upper16:.LC177
	ldr	r3, [r6]
	ldr	r0, .L4306+4
	bl	__dynamic_pr_debug
	b	.L4256
.L4307:
	.align	2
.L4306:
	.word	.LANCHOR3+2656
	.word	.LANCHOR2+4008
	.fnend
	.size	grmnet_ctrl_smd_ch_probe, .-grmnet_ctrl_smd_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_remove, %function
ghsic_ctrl_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR2
	movw	r3, #4050
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	ip, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	ldrh	r3, [ip, r3]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0]
	tst	r3, #4
	bne	.L4348
.L4309:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r6, [r5, #1016]
	cmp	r6, #0
	beq	.L4310
	ldr	r4, [r5, #1020]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L4311
	cmp	r6, #1
	bls	.L4310
	ldr	r4, [r5, #1124]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L4311
	cmp	r6, #2
	beq	.L4310
	ldr	r4, [r5, #1228]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L4311
	cmp	r6, #3
	beq	.L4310
	ldr	r4, [r5, #1332]
	mov	r1, r7
	mov	r2, #20
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L4311
.L4310:
	movw	r0, #:lower16:.LC179
	mvn	r2, #21
	ldr	r1, .L4351
	movt	r0, #:upper16:.LC179
	bl	printk
	mvn	r0, #21
.L4308:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4311:
	add	r6, r4, #4
	add	r7, r4, #84
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #8]
	mov	r1, r0
	cmp	r5, #0
	beq	.L4349
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L4350
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #92]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #104]
	cmp	r3, #0
	beq	.L4318
.L4317:
	mov	r0, r5
	blx	r3
.L4318:
	mov	r1, r7
	mov	r0, #0
	bl	_clear_bit
.L4315:
	mov	r0, #1
	mov	r1, r7
	bl	_clear_bit
	mov	r0, #0
	b	.L4308
.L4350:
	str	r3, [r4, #92]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #120]
	cmp	r3, #0
	bne	.L4317
	b	.L4318
.L4349:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L4315
.L4348:
	movw	r1, #:lower16:.LC177
	mov	r4, r0
	ldr	r2, .L4351
	mov	r3, r7
	add	r0, ip, #4032
	movt	r1, #:upper16:.LC177
	bl	__dynamic_pr_debug
	ldr	r7, [r4]
	b	.L4309
.L4352:
	.align	2
.L4351:
	.word	.LANCHOR3+2684
	.fnend
	.size	ghsic_ctrl_remove, .-ghsic_ctrl_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_notify_modem, %function
gsmd_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	ip, [r3, #212]
	cmp	r1, ip
	bcs	.L4382
	cmp	r0, #0
	beq	.L4383
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ands	ip, r2, #1
	str	r6, [sp, #8]
	movne	ip, #2
	str	lr, [sp, #12]
	mov	lr, #104
	mla	r1, lr, r1, r3
	ldr	r4, [r1, #236]
	moveq	r1, #4
	movne	r1, #6
	tst	r2, #2
	moveq	r1, ip
	ldr	r3, [r4, #160]
	cmp	r3, r1
	beq	.L4353
	ldr	r3, [r4, #72]
	str	r1, [r4, #160]
	ldr	r2, [r3, #8]
	tst	r2, #1
	beq	.L4353
	tst	r1, #2
	ldr	r3, [r3]
	bne	.L4384
.L4361:
	ldrd	r4, [sp]
	mov	r0, r3
	mvn	r2, r1
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	smd_tiocmset
.L4353:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4384:
	mov	r5, r0
	mov	r0, r3
	bl	smd_tiocmget
	ands	r1, r0, #128
	movne	r1, #8
	movne	r3, #9
	moveq	r3, #1
	tst	r0, #64
	movne	r1, r3
	tst	r0, #256
	orrne	r1, r1, #2
	str	r1, [r4, #164]
	ldr	r3, [r5, #136]
	cmp	r3, #0
	beq	.L4381
	ldr	r0, [r4, #68]
	blx	r3
.L4381:
	ldr	r3, [r4, #72]
	ldr	r1, [r4, #160]
	ldr	r3, [r3]
	b	.L4361
.L4382:
	movw	r0, #:lower16:.LC173
	mov	r2, r1
	ldr	r1, .L4385
	movt	r0, #:upper16:.LC173
	b	printk
.L4383:
	movw	r0, #:lower16:.LC174
	ldr	r1, .L4385
	movt	r0, #:upper16:.LC174
	b	printk
.L4386:
	.align	2
.L4385:
	.word	.LANCHOR3+2704
	.fnend
	.size	gsmd_notify_modem, .-gsmd_notify_modem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_connect_work, %function
gsmd_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #4074
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r3, [r3, r2]
	.pad #8
	sub	sp, sp, #8
	sub	r6, r0, #76
	ldr	r5, [r0, #-4]
	tst	r3, #4
	bne	.L4404
.L4388:
	ldr	r3, [r5, #8]
	tst	r3, #2
	bne	.L4405
.L4387:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4405:
	movw	ip, #:lower16:gsmd_notify
	mov	r2, r5
	ldr	r0, [r5, #4]
	movt	ip, #:upper16:gsmd_notify
	mov	r3, r6
	mov	r1, #0
	str	ip, [sp]
	bl	smd_named_open_on_edge
	subs	r2, r0, #0
	beq	.L4387
	cmn	r2, #11
	bne	.L4392
	ldr	r0, .L4407
	ldrh	r3, [r0, #2]
	tst	r3, #4
	bne	.L4406
.L4393:
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, #250
	movt	r3, #:upper16:.LANCHOR1
	ldr	r5, [r3, #3400]
	bl	msecs_to_jiffies
	mov	r3, r0
	mov	r2, r4
	mov	r0, #4
	mov	r1, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_delayed_work_on
.L4404:
	ldr	ip, [r4, #-76]
	movw	r1, #:lower16:.LC228
	mov	r3, r6
	movt	r1, #:upper16:.LC228
	ldr	r2, .L4407+4
	ldr	r0, .L4407+8
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L4388
.L4406:
	movw	r1, #:lower16:.LC268
	ldr	r3, [r5, #4]
	sub	r0, r0, #16
	movt	r1, #:upper16:.LC268
	str	r2, [sp]
	ldr	r2, .L4407+4
	bl	__dynamic_pr_debug
	b	.L4393
.L4392:
	mov	r3, r2
	ldr	r1, .L4407+4
	movw	r0, #:lower16:.LC269
	ldr	r2, [r5, #4]
	movt	r0, #:upper16:.LC269
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L4408:
	.align	2
.L4407:
	.word	.LANCHOR2+4096
	.word	.LANCHOR3+2724
	.word	.LANCHOR2+4056
	.fnend
	.size	gsmd_connect_work, .-gsmd_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_write_tobam, %function
gbam_data_write_tobam:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r3, r0, #60
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r9, [r0, #-4]
	.pad #28
	sub	sp, sp, #28
	str	r3, [sp, #20]
	add	r6, r9, #4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r9, #12]
	mov	r7, r0
	cmp	r3, #0
	beq	.L4410
	movw	r8, #:lower16:.LANCHOR0
	movw	r10, #:lower16:.LC343
	ldr	r1, [r4, #160]
	movt	r8, #:upper16:.LANCHOR0
	movt	r10, #:upper16:.LC343
	b	.L4411
.L4437:
	str	r1, [r4, #-12]
	ldm	r5, {r1, r3}
	str	r2, [r5]
	str	r2, [r5, #4]
	str	r3, [r1, #4]
	str	r1, [r3]
	ldr	r1, [r4, #160]
	ldr	r3, [r4, #180]
	ldrh	r2, [r0]
	add	r1, r1, #1
	add	r3, r3, #1
	tst	r2, #4
	str	r1, [r4, #160]
	str	r3, [r4, #180]
	bne	.L4435
.L4413:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r1, r5
	ldr	r0, [r4, #-56]
	bl	msm_bam_dmux_write
	mov	fp, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	fp, #0
	mov	r7, r0
	bne	.L4436
	ldr	r1, [r4, #160]
	ldr	r3, [r4, #200]
	cmp	r1, r3
	strhi	r1, [r4, #200]
.L4411:
	ldr	ip, [r8, #524]
	mov	r2, #0
	mov	r3, r4
	ldr	fp, [r4, #-12]
	ldr	r0, .L4439
	cmp	ip, r1
	sub	r1, fp, #1
	bls	.L4412
	ldr	r5, [r3, #-20]!
	cmp	r5, r3
	beq	.L4412
	cmp	r5, #0
	bne	.L4437
.L4412:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r8, #528]
	cmp	fp, r3
	bcs	.L4409
	ldr	r3, [r4, #196]
	cmp	r3, #0
	beq	.L4419
	ldr	r3, [r4, #188]
	mov	r2, #0
	str	r2, [r4, #196]
	add	r3, r3, #1
	str	r3, [r4, #188]
.L4419:
	mov	r0, r9
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gbam_start_rx
.L4435:
	ldr	ip, [r9]
	sub	r0, r0, #18
	str	r1, [sp, #8]
	ldr	r2, [sp, #20]
	mov	r1, r10
	strd	r2, [sp]
	mov	r3, r9
	ldr	r2, .L4439+4
	str	ip, [sp, #12]
	bl	__dynamic_pr_debug
	b	.L4413
.L4409:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4436:
	ldr	r2, .L4439+8
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	bne	.L4438
.L4415:
	ldr	r1, [r4, #160]
	mov	r0, r5
	ldr	r2, [r4, #168]
	ldr	r3, [r4, #180]
	sub	r1, r1, #1
	add	r2, r2, #1
	sub	r3, r3, #1
	str	r1, [r4, #160]
	str	r2, [r4, #168]
	str	r3, [r4, #180]
	bl	dev_kfree_skb_any
	ldr	fp, [r4, #-12]
	b	.L4412
.L4410:
	mov	r1, r0
	mov	r0, r6
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L4438:
	ldr	r0, .L4439+12
	movw	r1, #:lower16:.LC344
	mov	r3, fp
	ldr	r2, .L4439+4
	movt	r1, #:upper16:.LC344
	sub	r0, r0, #8
	bl	__dynamic_pr_debug
	b	.L4415
.L4440:
	.align	2
.L4439:
	.word	.LANCHOR4-4062
	.word	.LANCHOR3+2744
	.word	.LANCHOR4-4032
	.word	.LANCHOR4-4048
	.fnend
	.size	gbam_data_write_tobam, .-gbam_data_write_tobam
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam2bam_resume_work, %function
gbam2bam_resume_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4450
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L4448
.L4442:
	mov	r2, #0
	ldrb	r0, [r4, #-203]	@ zero_extendqisi2
	mov	r1, r2
	bl	usb_bam_register_wake_cb
	ldr	r3, [r4, #-200]
	cmp	r3, #7
	beq	.L4449
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4449:
	sub	r0, r4, #196
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	usb_bam_resume
.L4448:
	movw	r1, #:lower16:.LC345
	sub	r0, r3, #32
	ldr	r2, .L4450+4
	movt	r1, #:upper16:.LC345
	bl	__dynamic_pr_debug
	b	.L4442
.L4451:
	.align	2
.L4450:
	.word	.LANCHOR4-4000
	.word	.LANCHOR3+2768
	.fnend
	.size	gbam2bam_resume_work, .-gbam2bam_resume_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam2bam_data_resume_work, %function
bam2bam_data_resume_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L4461
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrh	r3, [r2, #-6]
	tst	r3, #4
	bne	.L4459
.L4453:
	mov	r2, #0
	ldrb	r0, [r4, #-163]	@ zero_extendqisi2
	mov	r1, r2
	bl	usb_bam_register_wake_cb
	ldr	r3, [r4, #-156]
	cmp	r3, #7
	beq	.L4460
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4460:
	sub	r0, r4, #152
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	usb_bam_resume
.L4459:
	ldr	r3, .L4461+4
	movw	r1, #:lower16:.LC346
	sub	r0, r2, #24
	movt	r1, #:upper16:.LC346
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L4453
.L4462:
	.align	2
.L4461:
	.word	.LANCHOR4-3984
	.word	.LANCHOR3+2792
	.fnend
	.size	bam2bam_data_resume_work, .-bam2bam_data_resume_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam2bam_suspend_work, %function
gbam2bam_suspend_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4472
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	sub	r5, r0, #316
	str	lr, [sp, #12]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L4470
.L4464:
	movw	r1, #:lower16:gbam_wake_cb
	mov	r2, r5
	ldrb	r0, [r4, #-187]	@ zero_extendqisi2
	movt	r1, #:upper16:gbam_wake_cb
	bl	usb_bam_register_wake_cb
	ldr	r3, [r4, #-184]
	cmp	r3, #7
	beq	.L4471
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4471:
	movw	r1, #:lower16:gbam_stop
	movw	r0, #:lower16:gbam_start
	mov	r2, r5
	movt	r1, #:upper16:gbam_stop
	movt	r0, #:upper16:gbam_start
	bl	usb_bam_register_start_stop_cbs
	ldr	r6, [sp, #8]
	sub	r0, r4, #180
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	usb_bam_suspend
.L4470:
	movw	r1, #:lower16:.LC347
	sub	r0, r3, #32
	ldr	r2, .L4472+4
	movt	r1, #:upper16:.LC347
	bl	__dynamic_pr_debug
	b	.L4464
.L4473:
	.align	2
.L4472:
	.word	.LANCHOR4-3952
	.word	.LANCHOR3+2820
	.fnend
	.size	gbam2bam_suspend_work, .-gbam2bam_suspend_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam2bam_data_suspend_work, %function
bam2bam_data_suspend_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L4483
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	sub	r5, r0, #200
	str	lr, [sp, #12]
	ldrh	r3, [r2, #-6]
	tst	r3, #4
	bne	.L4481
.L4475:
	movw	r1, #:lower16:bam_data_wake_cb
	mov	r2, r5
	ldrb	r0, [r4, #-147]	@ zero_extendqisi2
	movt	r1, #:upper16:bam_data_wake_cb
	bl	usb_bam_register_wake_cb
	ldr	r3, [r4, #-140]
	cmp	r3, #7
	beq	.L4482
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4482:
	movw	r1, #:lower16:bam_data_stop
	movw	r0, #:lower16:bam_data_start
	mov	r2, r5
	movt	r1, #:upper16:bam_data_stop
	movt	r0, #:upper16:bam_data_start
	bl	usb_bam_register_start_stop_cbs
	ldr	r6, [sp, #8]
	sub	r0, r4, #136
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	usb_bam_suspend
.L4481:
	ldr	r3, .L4483+4
	movw	r1, #:lower16:.LC348
	sub	r0, r2, #24
	movt	r1, #:upper16:.LC348
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L4475
.L4484:
	.align	2
.L4483:
	.word	.LANCHOR4-3936
	.word	.LANCHOR3+2844
	.fnend
	.size	bam2bam_data_suspend_work, .-bam2bam_data_suspend_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam2bam_connect_work, %function
gbam2bam_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	sub	r8, r0, #284
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #-152]
	.pad #4
	sub	sp, sp, #4
	cmp	r3, #6
	beq	.L4528
	cmp	r3, #7
	beq	.L4529
.L4488:
	sub	r6, r4, #280
	sub	r5, r4, #276
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #-272]
	cmp	r3, #0
	beq	.L4530
	ldr	r0, [r3, #88]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r4, #-172]
	beq	.L4531
	str	r8, [r0, #32]
	ldr	r2, [r4, #-172]
	movw	r3, #:lower16:gbam_endless_rx_complete
	movt	r3, #:upper16:gbam_endless_rx_complete
	mov	fp, #0
	movw	r10, #65439
	mov	r7, #32
	movt	r10, 65534
	movt	r7, 1
	str	r3, [r2, #28]
	ldr	r3, [r4, #-172]
	mov	r1, #32
	str	fp, [r3, #4]
	ldr	r2, [r4, #-172]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r2, [r4, #-172]
	ldr	r3, [r4, #-164]
	and	r3, r3, r10
	orr	r3, r3, r7
	str	r3, [r2, #52]
	ldr	r3, [r4, #-272]
	ldr	r0, [r3, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	str	r0, [r4, #-168]
	mov	r0, r5
	bl	_raw_spin_unlock
	mov	r1, r9
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-168]
	cmp	r3, fp
	beq	.L4527
	str	r8, [r3, #32]
	ldr	r2, [r4, #-168]
	movw	r3, #:lower16:gbam_endless_tx_complete
	movt	r3, #:upper16:gbam_endless_tx_complete
	mov	r0, r6
	str	r3, [r2, #28]
	ldr	r3, [r4, #-168]
	str	fp, [r3, #4]
	ldr	r2, [r4, #-168]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r2, [r4, #-168]
	ldr	r3, [r4, #-160]
	and	r10, r10, r3
	orr	r7, r10, r7
	str	r7, [r2, #52]
	bl	_raw_spin_lock
	ldr	r3, [r4, #-272]
	cmp	r3, #0
	beq	.L4532
	ldr	r0, .L4542
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L4533
.L4495:
	ldr	r0, [r3, #88]
	mov	r2, #32
	ldr	r1, [r4, #-172]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L4534
.L4496:
	mov	r0, r6
	bl	_raw_spin_unlock
.L4494:
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #-272]
	cmp	r3, #0
	beq	.L4535
	ldr	r0, .L4542+4
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L4536
.L4499:
	ldr	r0, [r3, #84]
	mov	r2, #32
	ldr	r1, [r4, #-168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L4537
.L4500:
	mov	r0, r5
	bl	_raw_spin_unlock
.L4498:
	ldr	r3, [r4, #-152]
	cmp	r3, #6
	beq	.L4538
.L4501:
	ldr	r0, .L4542+8
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L4539
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4538:
	ldr	r3, [r4, #-284]
	cmp	r3, #0
	bne	.L4501
	movw	r0, #:lower16:gbam_peer_reset_cb
	mov	r1, r8
	movt	r0, #:upper16:gbam_peer_reset_cb
	bl	usb_bam_register_peer_reset_cb
	mov	r0, #1
	bl	usb_bam_client_ready
	subs	r2, r0, #0
	beq	.L4501
	movw	r0, #:lower16:.LC356
	ldr	r1, .L4542+12
	movt	r0, #:upper16:.LC356
	b	.L4525
.L4528:
	bl	usb_bam_reset_complete
	sub	r1, r4, #164
	ldrb	r0, [r4, #-156]	@ zero_extendqisi2
	bl	usb_bam_connect
	subs	r2, r0, #0
	bne	.L4540
	sub	r1, r4, #160
	ldrb	r0, [r4, #-155]	@ zero_extendqisi2
	bl	usb_bam_connect
	subs	r2, r0, #0
	beq	.L4488
	ldr	r1, .L4542+12
	movw	r0, #:lower16:.LC350
	movt	r0, #:upper16:.LC350
.L4525:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L4539:
	ldr	r2, .L4542+12
	movw	r1, #:lower16:.LC357
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC357
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	__dynamic_pr_debug
.L4536:
	movw	r1, #:lower16:.LC354
	sub	r0, r0, #32
	ldr	r2, .L4542+16
	movt	r1, #:upper16:.LC354
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #-272]
	b	.L4499
.L4533:
	movw	r1, #:lower16:.LC354
	sub	r0, r0, #24
	ldr	r2, .L4542+20
	movt	r1, #:upper16:.LC354
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #-272]
	b	.L4495
.L4530:
	ldr	r0, .L4542+24
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L4541
.L4490:
	mov	r0, r5
	bl	_raw_spin_unlock
	mov	r1, r9
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L4541:
	movw	r1, #:lower16:.LC352
	ldr	r2, .L4542+12
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC352
	bl	__dynamic_pr_debug
	b	.L4490
.L4531:
	mov	r0, r5
	bl	_raw_spin_unlock
	mov	r1, r9
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L4527:
	ldr	r1, .L4542+12
	movw	r0, #:lower16:.LC353
	movt	r0, #:upper16:.LC353
.L4526:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L4532:
	mov	r0, r6
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC117
	ldr	r1, .L4542+20
	movt	r0, #:upper16:.LC117
	bl	printk
	b	.L4494
.L4535:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC117
	ldr	r1, .L4542+16
	movt	r0, #:upper16:.LC117
	bl	printk
	b	.L4498
.L4534:
	movw	r0, #:lower16:.LC355
	ldr	r1, .L4542+20
	movt	r0, #:upper16:.LC355
	bl	printk
	b	.L4496
.L4537:
	movw	r0, #:lower16:.LC355
	ldr	r1, .L4542+16
	movt	r0, #:upper16:.LC355
	bl	printk
	b	.L4500
.L4529:
	movw	r0, #:lower16:.LC351
	ldr	r1, .L4542+12
	movt	r0, #:upper16:.LC351
	b	.L4526
.L4540:
	movw	r0, #:lower16:.LC349
	ldr	r1, .L4542+12
	movt	r0, #:upper16:.LC349
	b	.L4525
.L4543:
	.align	2
.L4542:
	.word	.LANCHOR4-3888
	.word	.LANCHOR4-3856
	.word	.LANCHOR4-3840
	.word	.LANCHOR3+2872
	.word	.LANCHOR3+2920
	.word	.LANCHOR3+2896
	.word	.LANCHOR4-3904
	.fnend
	.size	gbam2bam_connect_work, .-gbam2bam_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam2bam_data_connect_work, %function
bam2bam_data_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	sub	r5, r0, #168
	strd	r6, [sp, #8]
	ldr	r6, .L4619
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r6, #-14]
	tst	r3, #4
	bne	.L4605
.L4545:
	ldr	r3, [r4, #-108]
	cmp	r3, #7
	bne	.L4546
	ldr	r3, [r4, #-112]
	cmp	r3, #1
	beq	.L4606
	cmp	r3, #0
	mov	r2, #5
	mov	r3, #0
	str	r3, [r4, #-92]
	str	r2, [r4, #-80]
	beq	.L4607
.L4548:
	sub	r7, r4, #104
	mov	r0, r7
	bl	usb_bam_connect_ipa
	subs	r3, r0, #0
	bne	.L4601
	ldr	r3, [r4, #-112]
	mov	r2, #17
	mov	r1, #1
	str	r1, [r4, #-92]
	str	r2, [r4, #-80]
	cmp	r3, #0
	beq	.L4608
.L4550:
	mov	r0, r7
	bl	usb_bam_connect_ipa
	subs	r3, r0, #0
	bne	.L4601
	ldr	r3, [r4, #-112]
	cmp	r3, #1
	beq	.L4609
.L4552:
	ldr	r3, [r4, #-164]
	cmp	r3, #0
	beq	.L4610
	ldr	r0, [r3, #12]
	cmp	r0, #0
	beq	.L4611
	ldr	r3, [r0, #8]
	mov	r1, #208
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r4, #-132]
	beq	.L4544
	str	r5, [r0, #32]
	ldr	r2, [r4, #-132]
	movw	r3, #:lower16:bam_data_endless_rx_complete
	movt	r3, #:upper16:bam_data_endless_rx_complete
	mov	r9, #0
	movw	r8, #65439
	mov	r7, #32
	movt	r8, 65534
	movt	r7, 1
	str	r3, [r2, #28]
	ldr	r3, [r4, #-132]
	mov	r1, #208
	str	r9, [r3, #4]
	ldr	r2, [r4, #-132]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r2, [r4, #-132]
	ldr	r3, [r4, #-124]
	and	r3, r3, r8
	orr	r3, r3, r7
	str	r3, [r2, #52]
	ldr	r3, [r4, #-164]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, r9
	str	r0, [r4, #-128]
	beq	.L4544
	str	r5, [r0, #32]
	ldr	r2, [r4, #-128]
	movw	r3, #:lower16:bam_data_endless_tx_complete
	movt	r3, #:upper16:bam_data_endless_tx_complete
	str	r3, [r2, #28]
	ldr	r3, [r4, #-128]
	str	r9, [r3, #4]
	ldr	r2, [r4, #-128]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r2, [r4, #-128]
	ldr	r3, [r4, #-120]
	and	r8, r8, r3
	orr	r7, r8, r7
	str	r7, [r2, #52]
	ldr	r3, [r4, #-164]
	cmp	r3, r9
	beq	.L4560
	ldr	r2, .L4619+4
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	bne	.L4612
.L4561:
	ldr	r0, [r3, #12]
	mov	r2, #32
	ldr	r1, [r4, #-132]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L4613
.L4562:
	ldr	r3, [r4, #-164]
	cmp	r3, #0
	beq	.L4560
	ldr	r0, .L4619+8
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L4614
.L4564:
	ldr	r0, [r3, #8]
	mov	r2, #32
	ldr	r1, [r4, #-128]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L4615
.L4560:
	ldr	r3, [r4, #-108]
	cmp	r3, #7
	beq	.L4565
	movw	r0, #:lower16:bam_data_peer_reset_cb
	mov	r1, r5
	movt	r0, #:upper16:bam_data_peer_reset_cb
	bl	usb_bam_register_peer_reset_cb
	mov	r0, #1
	bl	usb_bam_client_ready
	subs	r3, r0, #0
	bne	.L4616
.L4565:
	ldr	r0, .L4619+12
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L4617
.L4544:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4607:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #3576]
	str	r2, [r4, #-12]
	ldr	r3, [r3, #3596]
	str	r3, [r4, #-16]
	b	.L4548
.L4608:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #3580]
	str	r2, [r4, #-12]
	ldr	r3, [r3, #3596]
	str	r3, [r4, #-16]
	b	.L4550
.L4546:
	bl	usb_bam_reset_complete
	sub	r1, r4, #124
	ldrb	r0, [r4, #-116]	@ zero_extendqisi2
	bl	usb_bam_connect
	subs	r2, r0, #0
	bne	.L4618
	sub	r1, r4, #120
	ldrb	r0, [r4, #-115]	@ zero_extendqisi2
	bl	usb_bam_connect
	subs	r2, r0, #0
	beq	.L4552
	ldr	r1, .L4619+16
	movw	r0, #:lower16:.LC350
	movt	r0, #:upper16:.LC350
.L4603:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L4605:
	ldr	r3, .L4619+16
	movw	r1, #:lower16:.LC358
	sub	r0, r6, #32
	movt	r1, #:upper16:.LC358
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L4545
.L4617:
	ldr	r3, .L4619+16
	movw	r1, #:lower16:.LC366
	sub	r0, r0, #24
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC366
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	mov	r2, r3
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__dynamic_pr_debug
.L4614:
	ldr	r3, .L4619+20
	movw	r1, #:lower16:.LC364
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC364
	mov	r2, r3
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #-164]
	b	.L4564
.L4612:
	ldr	r3, .L4619+24
	movw	r1, #:lower16:.LC364
	sub	r0, r6, #8
	movt	r1, #:upper16:.LC364
	mov	r2, r3
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #-164]
	b	.L4561
.L4601:
	ldr	r2, .L4619+16
	movw	r0, #:lower16:.LC360
	movt	r0, #:upper16:.LC360
.L4602:
	ldrd	r4, [sp]
	mov	r1, r2
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L4610:
	ldr	r1, .L4619+16
	movw	r0, #:lower16:.LC362
	movt	r0, #:upper16:.LC362
.L4604:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L4611:
	movw	r0, #:lower16:.LC363
	ldr	r1, .L4619+16
	movt	r0, #:upper16:.LC363
	b	.L4604
.L4609:
	ldr	r2, .L4619+16
	movw	r0, #:lower16:.LC361
	movt	r0, #:upper16:.LC361
.L4600:
	mov	r1, r2
	b	.L4603
.L4606:
	movw	r0, #:lower16:.LC359
	ldr	r2, .L4619+16
	movt	r0, #:upper16:.LC359
	b	.L4600
.L4618:
	movw	r0, #:lower16:.LC349
	ldr	r1, .L4619+16
	movt	r0, #:upper16:.LC349
	b	.L4603
.L4616:
	movw	r0, #:lower16:.LC365
	ldr	r2, .L4619+16
	movt	r0, #:upper16:.LC365
	b	.L4602
.L4615:
	movw	r0, #:lower16:.LC355
	ldr	r1, .L4619+20
	movt	r0, #:upper16:.LC355
	bl	printk
	b	.L4560
.L4613:
	movw	r0, #:lower16:.LC355
	ldr	r1, .L4619+24
	movt	r0, #:upper16:.LC355
	bl	printk
	b	.L4562
.L4620:
	.align	2
.L4619:
	.word	.LANCHOR4-3808
	.word	.LANCHOR4-3792
	.word	.LANCHOR4-3760
	.word	.LANCHOR4-3744
	.word	.LANCHOR3+2944
	.word	.LANCHOR3+3000
	.word	.LANCHOR3+2972
	.fnend
	.size	bam2bam_data_connect_work, .-bam2bam_data_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_peer_reset_cb, %function
bam_data_peer_reset_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L4631
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L4629
.L4622:
	mov	r0, #0
	bl	usb_bam_a2_reset
	subs	r4, r0, #0
	bne	.L4630
	mov	r1, r4
	bl	usb_bam_register_peer_reset_cb
.L4621:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4629:
	ldr	r3, .L4631+4
	movw	r1, #:lower16:.LC367
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC367
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L4622
.L4630:
	ldr	r2, .L4631+4
	movw	r0, #:lower16:.LC368
	mov	r3, r4
	movt	r0, #:upper16:.LC368
	mov	r1, r2
	bl	printk
	b	.L4621
.L4632:
	.align	2
.L4631:
	.word	.LANCHOR4-3712
	.word	.LANCHOR3+3028
	.fnend
	.size	bam_data_peer_reset_cb, .-bam_data_peer_reset_cb
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_init, %function
gqti_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	push	{r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L4636
	mov	r2, #56
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	bne	.L4634
	movw	r0, #:lower16:.LC369
	mvn	r7, #11
	movt	r0, #:upper16:.LC369
	bl	printk
	b	.L4633
.L4636:
	mov	r4, #16
.L4634:
	mov	r5, #0
	add	r3, r4, #44
	ldr	r2, .L4641
	movw	r1, #:lower16:.LC370
	movw	r6, #:lower16:.LANCHOR1
	movt	r1, #:upper16:.LC370
	add	r0, r4, #32
	str	r5, [r4, #8]
	movt	r6, #:upper16:.LANCHOR1
	str	r5, [r4, #12]
	str	r5, [r4, #16]
	str	r5, [r4, #20]
	str	r5, [r4, #24]
	str	r5, [r4, #28]
	str	r3, [r4, #44]
	str	r3, [r4, #48]
	str	r5, [r4, #52]
	bl	__init_waitqueue_head
	ldr	r0, .L4641+4
	str	r4, [r6, #3604]
	bl	misc_register
	subs	r7, r0, #0
	beq	.L4633
	movw	r0, #:lower16:.LC371
	movt	r0, #:upper16:.LC371
	bl	printk
	mov	r0, r4
	bl	kfree
	str	r5, [r6, #3604]
.L4633:
	mov	r0, r7
	pop	{r4, r5, r6, r7, r8, pc}
.L4642:
	.align	2
.L4641:
	.word	.LANCHOR1+3604
	.word	.LANCHOR0+532
	.fnend
	.size	gqti_ctrl_init, .-gqti_ctrl_init
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	accessory_function_init, %function
accessory_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r3, #44]
	cmp	r0, #0
	beq	.L4647
	mov	r2, #1792
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L4653
.L4644:
	mov	r7, #0
	movw	r1, #:lower16:.LC372
	ldr	r2, .L4655
	movt	r1, #:upper16:.LC372
	add	r0, r4, #1664
	str	r7, [r4, #88]
	mov	r6, #65024
	movw	r5, #:lower16:.LANCHOR1
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC373
	add	r0, r4, #1664
	ldr	r2, .L4655
	movt	r1, #:upper16:.LC373
	add	r0, r0, #12
	bl	__init_waitqueue_head
	add	r0, r4, #1648
	add	r2, r4, #1760
	str	r7, [r4, #1652]
	add	r0, r0, #8
	add	ip, r4, #1776
	add	r1, r4, #1696
	movw	r3, #:lower16:acc_start_work
	add	ip, ip, #8
	add	lr, r4, #1776
	str	r0, [r4, #1656]
	add	r2, r2, #8
	add	r1, r1, #8
	str	r0, [r4, #1660]
	movt	r6, 65535
	movt	r3, #:upper16:acc_start_work
	add	r0, r4, #1712
	movt	r5, #:upper16:.LANCHOR1
	str	r6, [r4, #1700]
	add	r0, r0, #4
	str	r1, [r4, #1704]
	str	r1, [r4, #1708]
	mov	r1, r7
	str	r3, [r4, #1712]
	mov	r3, r7
	str	r2, [r4, #1768]
	str	r2, [r4, #1772]
	mov	r2, r7
	str	lr, [r4, #1776]
	str	lr, [r4, #1780]
	str	ip, [r4, #1784]
	str	ip, [r4, #1788]
	bl	init_timer_key
	movw	ip, #:lower16:delayed_work_timer_fn
	add	r1, r4, #1696
	ldr	r0, .L4655+4
	add	r3, r4, #1744
	movw	r2, #:lower16:acc_hid_work
	str	r6, [r4, #1752]
	add	r3, r3, #12
	movt	ip, #:upper16:delayed_work_timer_fn
	str	r4, [r5, #2488]
	add	r1, r1, #4
	movt	r2, #:upper16:acc_hid_work
	str	ip, [r4, #1732]
	str	r1, [r4, #1736]
	str	r3, [r4, #1756]
	str	r3, [r4, #1760]
	str	r2, [r4, #1764]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L4654
.L4643:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4647:
	mov	r4, #16
	b	.L4644
.L4653:
	mvn	r5, #11
	b	.L4643
.L4654:
.L4646:
	mov	r0, r4
	bl	kfree
	movw	r0, #:lower16:.LC374
	movt	r0, #:upper16:.LC374
	bl	printk
	b	.L4643
.L4656:
	.align	2
.L4655:
	.word	.LANCHOR1+3608
	.word	.LANCHOR0+568
	.fnend
	.size	accessory_function_init, .-accessory_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_function_init, %function
rndis_qc_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r0, [r3, #36]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4, #4]
	beq	.L4659
	mov	r2, #272
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	mvneq	r4, #11
	beq	.L4657
.L4659:
	movw	r0, #:lower16:.LC375
	ldr	r1, .L4667
	movt	r0, #:upper16:.LC375
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	ldr	r0, .L4667+4
	movt	r3, #:upper16:.LANCHOR1
	str	r2, [r3, #2492]
	bl	misc_register
	subs	r4, r0, #0
	bne	.L4666
.L4657:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4666:
	movw	r0, #:lower16:.LC376
	ldr	r1, .L4667
	movt	r0, #:upper16:.LC376
	bl	printk
	b	.L4657
.L4668:
	.align	2
.L4667:
	.word	.LANCHOR3+3052
	.word	.LANCHOR0+604
	.fnend
	.size	rndis_qc_function_init, .-rndis_qc_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_init, %function
mtp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r3, #32]
	.pad #8
	sub	sp, sp, #8
	cmp	r0, #0
	beq	.L4674
	mov	r2, #256
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L4681
.L4670:
	mov	r5, #0
	movw	r1, #:lower16:.LC372
	ldr	r2, .L4683
	movt	r1, #:upper16:.LC372
	add	r0, r4, #132
	str	r5, [r4, #88]
	movw	r6, #:lower16:.LANCHOR1
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC373
	ldr	r2, .L4683
	add	r0, r4, #144
	movt	r1, #:upper16:.LC373
	movt	r6, #:upper16:.LANCHOR1
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC377
	ldr	r2, .L4683
	add	r0, r4, #156
	movt	r1, #:upper16:.LC377
	bl	__init_waitqueue_head
	add	r0, r4, #116
	movw	r2, #:lower16:.LC378
	str	r5, [r4, #108]
	add	r3, r4, #124
	movt	r2, #:upper16:.LC378
	str	r5, [r4, #112]
	str	r0, [r4, #116]
	mov	r1, #10
	str	r0, [r4, #120]
	movw	r0, #:lower16:.LC84
	movt	r1, 2
	str	r3, [r4, #124]
	movt	r0, #:upper16:.LC84
	str	r3, [r4, #128]
	mov	r3, r5
	str	r5, [sp]
	str	r2, [sp, #4]
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #180]
	beq	.L4676
	mov	r2, #65024
	movw	r1, #:lower16:send_file_work
	ldr	r0, .L4683+4
	movw	r3, #:lower16:receive_file_work
	movt	r2, 65535
	str	r4, [r6, #2500]
	add	lr, r4, #188
	add	ip, r4, #204
	movt	r1, #:upper16:send_file_work
	movt	r3, #:upper16:receive_file_work
	str	r2, [r4, #184]
	str	lr, [r4, #188]
	str	lr, [r4, #192]
	str	r1, [r4, #196]
	str	r2, [r4, #200]
	str	ip, [r4, #204]
	str	ip, [r4, #208]
	str	r3, [r4, #212]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L4682
.L4669:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4674:
	mov	r4, #16
	b	.L4670
.L4681:
	mvn	r5, #11
	b	.L4669
.L4682:
.L4673:
	ldr	r0, [r4, #180]
	bl	destroy_workqueue
.L4672:
	mov	r3, #0
	mov	r0, r4
	str	r3, [r6, #2500]
	bl	kfree
	movw	r0, #:lower16:.LC379
	movt	r0, #:upper16:.LC379
	bl	printk
	b	.L4669
.L4676:
	mvn	r5, #11
	b	.L4672
.L4684:
	.align	2
.L4683:
	.word	.LANCHOR1+3608
	.word	.LANCHOR0+640
	.fnend
	.size	mtp_function_init, .-mtp_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_init, %function
adb_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:kmalloc_caches
	mov	r5, r0
	movt	r4, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r4, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5, #4]
	beq	.L4687
	mov	r2, #8
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5, #4]
	beq	.L4690
.L4687:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L4692
	mov	r2, #164
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L4690
.L4689:
	mov	r5, #0
	movw	r1, #:lower16:.LC372
	ldr	r2, .L4701
	movt	r1, #:upper16:.LC372
	add	r0, r4, #128
	str	r5, [r4, #88]
	movw	r6, #:lower16:.LANCHOR1
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC373
	ldr	r2, .L4701
	add	r0, r4, #140
	movt	r1, #:upper16:.LC373
	movt	r6, #:upper16:.LANCHOR1
	bl	__init_waitqueue_head
	add	r3, r4, #120
	mov	r2, #1
	str	r5, [r4, #108]
	str	r5, [r4, #112]
	ldr	r0, .L4701+4
	str	r5, [r4, #116]
	str	r3, [r4, #120]
	str	r3, [r4, #124]
	strb	r2, [r4, #161]
	str	r4, [r6, #3476]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L4700
.L4685:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4692:
	mov	r4, #16
	b	.L4689
.L4690:
	mvn	r5, #11
	b	.L4685
.L4700:
.L4691:
	mov	r0, r4
	bl	kfree
	movw	r0, #:lower16:.LC380
	movt	r0, #:upper16:.LC380
	bl	printk
	b	.L4685
.L4702:
	.align	2
.L4701:
	.word	.LANCHOR1+3608
	.word	.LANCHOR0+676
	.fnend
	.size	adb_function_init, .-adb_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_sdio_function_init, %function
rmnet_smd_sdio_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r3, #36]
	.pad #8
	sub	sp, sp, #8
	cmp	r0, #0
	beq	.L4711
	mov	r2, #428
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L4718
.L4704:
	movw	r2, #:lower16:.LC381
	mov	r5, #0
	movt	r2, #:upper16:.LC381
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	mov	r1, #10
	str	r5, [sp]
	movw	r0, #:lower16:.LC84
	str	r2, [sp, #4]
	mov	r3, r5
	movt	r1, 2
	movt	r0, #:upper16:.LC84
	str	r4, [r6, #2480]
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #380]
	beq	.L4713
	mov	r7, #65024
	movw	r3, #:lower16:rmnet_mux_disconnect_work
	str	r5, [r4, #176]
	movt	r3, #:upper16:rmnet_mux_disconnect_work
	movt	r7, 65535
	str	r5, [r4, #368]
	add	r0, r4, #388
	movw	r1, #:lower16:rmnet_mux_smd_data_rx_tlet
	str	r5, [r4, #372]
	movt	r1, #:upper16:rmnet_mux_smd_data_rx_tlet
	mov	r2, r4
	str	r5, [r4, #376]
	str	r7, [r4, #384]
	add	r8, r4, #104
	str	r0, [r4, #388]
	str	r0, [r4, #392]
	add	r0, r4, #152
	str	r3, [r4, #396]
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_mux_smd_data_tx_tlet
	mov	r2, r4
	add	r0, r4, #132
	movt	r1, #:upper16:rmnet_mux_smd_data_tx_tlet
	bl	tasklet_init
	movw	r1, #:lower16:.LC382
	ldr	r2, .L4721
	add	r0, r4, #180
	movt	r1, #:upper16:.LC382
	bl	__init_waitqueue_head
	movw	r2, #:lower16:rmnet_mux_sdio_data_rx_work
	movw	ip, #:lower16:rmnet_mux_open_sdio_work
	str	r8, [r4, #104]
	movt	r2, #:upper16:rmnet_mux_sdio_data_rx_work
	movt	ip, #:upper16:rmnet_mux_open_sdio_work
	str	r8, [r4, #108]
	add	r1, r4, #112
	add	r0, r4, #260
	add	r3, r4, #120
	str	r1, [r4, #112]
	str	r2, [r4, #252]
	add	r2, r4, #244
	str	r1, [r4, #116]
	mov	r1, r5
	str	r3, [r4, #120]
	str	r3, [r4, #124]
	mov	r3, r5
	str	r7, [r4, #240]
	str	r2, [r4, #244]
	str	r2, [r4, #248]
	mov	r2, r5
	str	r7, [r4, #256]
	add	r7, r4, #192
	str	r0, [r4, #260]
	str	r0, [r4, #264]
	add	r0, r4, #272
	str	ip, [r4, #268]
	bl	init_timer_key
	mov	r3, r7
	add	r1, r4, #216
	movw	r0, #:lower16:delayed_work_timer_fn
	add	ip, r4, #316
	add	lr, r4, #256
	add	r2, r4, #224
	str	r3, [r4, #192]
	movt	r0, #:upper16:delayed_work_timer_fn
	add	r7, r4, #200
	str	r3, [r4, #196]
	add	r3, r4, #340
	str	r7, [r4, #200]
	str	r1, [r4, #216]
	str	r1, [r4, #220]
	movw	r1, #:lower16:.LC383
	str	r7, [r4, #204]
	movt	r1, #:upper16:.LC383
	str	r5, [r4, #208]
	str	r5, [r4, #212]
	str	r2, [r4, #224]
	str	r2, [r4, #228]
	ldr	r2, .L4721
	str	r5, [r4, #232]
	str	r5, [r4, #236]
	str	r0, [r4, #288]
	add	r0, r4, #324
	str	lr, [r4, #292]
	str	ip, [r4, #316]
	str	ip, [r4, #320]
	str	r3, [r4, #340]
	str	r3, [r4, #344]
	bl	__init_waitqueue_head
	ldr	r0, .L4721+4
	bl	misc_register
	subs	r5, r0, #0
	bne	.L4707
	movw	r0, #:lower16:.LC384
	mov	r1, r5
	movt	r0, #:upper16:.LC384
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r6, #3608]
	beq	.L4703
	cmn	r0, #4096
	bhi	.L4703
	ldr	ip, .L4721+8
	movw	r0, #:lower16:.LC250
	mov	r3, r4
	movt	r0, #:upper16:.LC250
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L4719
.L4703:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4707:
	movw	r0, #:lower16:.LC385
	ldr	r1, .L4721+12
	movt	r0, #:upper16:.LC385
	bl	printk
	ldr	r0, .L4721+16
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L4720
.L4709:
	ldr	r0, [r4, #380]
	bl	destroy_workqueue
.L4706:
	mov	r0, r4
	bl	kfree
	b	.L4703
.L4711:
	mov	r4, #16
	b	.L4704
.L4713:
	mvn	r5, #11
	b	.L4706
.L4719:
	ldr	r0, [r6, #3608]
	bl	debugfs_remove
	str	r5, [r6, #3608]
	b	.L4703
.L4720:
	movw	r1, #:lower16:.LC386
	ldr	r2, .L4721+20
	mov	r3, r5
	movt	r1, #:upper16:.LC386
	sub	r0, r0, #24
	bl	__dynamic_pr_debug
	b	.L4709
.L4718:
	mvn	r5, #11
	b	.L4703
.L4722:
	.align	2
.L4721:
	.word	.LANCHOR1+3608
	.word	.LANCHOR0+712
	.word	.LANCHOR3+3116
	.word	.LANCHOR3+3068
	.word	.LANCHOR4-3696
	.word	.LANCHOR3+3096
	.fnend
	.size	rmnet_smd_sdio_function_init, .-rmnet_smd_sdio_function_init
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_cleanup, %function
gqti_ctrl_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, .L4725
	bl	misc_deregister
	ldr	r0, [r4, #3604]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #3604]
	pop	{r4, pc}
.L4726:
	.align	2
.L4725:
	.word	.LANCHOR0+532
	.fnend
	.size	gqti_ctrl_cleanup, .-gqti_ctrl_cleanup
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	accessory_function_cleanup, %function
accessory_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	ldr	r0, .L4729
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	bl	misc_deregister
	ldr	r0, [r4, #2488]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #2488]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4730:
	.align	2
.L4729:
	.word	.LANCHOR0+568
	.fnend
	.size	accessory_function_cleanup, .-accessory_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_function_cleanup, %function
ncm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r0
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, .L4733
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	misc_deregister
	ldr	r0, [r4, #3612]
	bl	kfree
	ldr	r0, [r5, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r5, #4]
	str	r3, [r4, #3612]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4734:
	.align	2
.L4733:
	.word	.LANCHOR0+748
	.fnend
	.size	ncm_function_cleanup, .-ncm_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_function_cleanup, %function
rndis_qc_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movw	r0, #:lower16:.LC387
	ldr	r1, .L4737
	movt	r0, #:upper16:.LC387
	str	lr, [sp, #4]
	bl	printk
	ldr	r0, .L4737+4
	bl	misc_deregister
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	ldr	r0, [r4, #4]
	movt	r3, #:upper16:.LANCHOR1
	str	r2, [r3, #2496]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
.L4738:
	.align	2
.L4737:
	.word	.LANCHOR3+3224
	.word	.LANCHOR0+604
	.fnend
	.size	rndis_qc_function_cleanup, .-rndis_qc_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_cleanup, %function
mtp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r5, [r4, #2500]
	str	lr, [sp, #12]
	cmp	r5, #0
	beq	.L4739
	ldr	r0, .L4742
	bl	misc_deregister
	ldr	r0, [r5, #180]
	bl	destroy_workqueue
	mov	r3, #0
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	str	r3, [r4, #2500]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	kfree
.L4739:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4743:
	.align	2
.L4742:
	.word	.LANCHOR0+640
	.fnend
	.size	mtp_function_cleanup, .-mtp_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_cleanup, %function
ccid_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR0
	str	lr, [sp, #4]
	add	r0, r4, #784
	bl	misc_deregister
	add	r0, r4, #820
	bl	misc_deregister
	movw	r3, #:lower16:.LANCHOR1
	ldr	r4, [sp]
	movt	r3, #:upper16:.LANCHOR1
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r0, [r3, #3472]
	b	kfree
	.fnend
	.size	ccid_function_cleanup, .-ccid_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_cleanup, %function
adb_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r0
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, .L4748
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	misc_deregister
	ldr	r0, [r4, #3476]
	bl	kfree
	mov	r3, #0
	ldr	r0, [r5, #4]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	str	r3, [r4, #3476]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	kfree
.L4749:
	.align	2
.L4748:
	.word	.LANCHOR0+676
	.fnend
	.size	adb_function_cleanup, .-adb_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_sdio_function_cleanup, %function
rmnet_smd_sdio_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r4, [r3, #2480]
	ldr	r0, [r3, #3608]
	bl	debugfs_remove_recursive
	ldr	r0, .L4752
	bl	misc_deregister
	ldr	r0, [r4, #128]
	bl	smd_close
	ldr	r0, [r4, #380]
	bl	destroy_workqueue
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
.L4753:
	.align	2
.L4752:
	.word	.LANCHOR0+712
	.fnend
	.size	rmnet_smd_sdio_function_cleanup, .-rmnet_smd_sdio_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_function_cleanup, %function
mbim_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r0, #:lower16:.LC388
	movw	r4, #:lower16:.LANCHOR1
	ldr	r1, .L4760
	movt	r0, #:upper16:.LC388
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	printk
	ldr	r3, [r4, #3616]
	cmp	r3, #0
	beq	.L4755
	ldr	r0, [r4, #3620]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #3620]
.L4755:
	mov	r5, #0
	ldr	r0, .L4760+4
	str	r5, [r4, #3616]
	bl	misc_deregister
	ldr	r6, [sp, #8]
	str	r5, [r4, #2504]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4761:
	.align	2
.L4760:
	.word	.LANCHOR3+3244
	.word	.LANCHOR0+856
	.fnend
	.size	mbim_function_cleanup, .-mbim_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_io_complete, %function
ffs_epfile_io_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L4762
	ldr	r2, [r3, #4]
	cmp	r2, #0
	beq	.L4762
	ldr	r2, [r1, #32]
	cmp	r2, #0
	beq	.L4762
	ldr	r2, [r1, #44]
	cmp	r2, #0
	ldreq	r2, [r1, #48]
	str	r2, [r3, #24]
	ldr	r0, [r1, #32]
	b	complete
.L4762:
	bx	lr
	.fnend
	.size	ffs_epfile_io_complete, .-ffs_epfile_io_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_transmit, %function
f_midi_transmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #88]
	.pad #20
	sub	sp, sp, #20
	cmp	r3, #0
	str	r3, [sp, #4]
	beq	.L4774
	cmp	r1, #0
	mov	r10, r0
	mov	r5, r1
	beq	.L4821
.L4776:
	mov	r1, #0
	movw	r3, #:lower16:f_midi_complete
	movt	r3, #:upper16:f_midi_complete
	mov	r2, r1
	add	r7, r10, #100
	add	r9, r10, #228
	str	r1, [r5, #4]
	add	fp, r10, #164
	str	r3, [r5, #28]
.L4808:
	ldr	r4, [r9, #4]!
	ldr	r6, [r7, #4]!
	cmp	r4, #0
	beq	.L4777
	ldr	r3, [r4, #4]
	cmp	r6, #0
	cmpne	r3, #0
	beq	.L4777
	ldr	r1, [r10, #336]
	add	r3, r2, #3
	cmp	r1, r3
	bls	.L4777
.L4807:
	mov	r2, #1
	add	r1, sp, #15
	mov	r0, r6
	bl	snd_rawmidi_transmit
	cmp	r0, #1
	bne	.L4822
	ldrb	r3, [r4, #8]	@ zero_extendqisi2
	ldrb	r1, [sp, #15]	@ zero_extendqisi2
	lsl	r3, r3, #4
	cmp	r1, #247
	uxtb	r3, r3
	bhi	.L4823
	cmp	r1, #239
	bls	.L4781
	sub	r2, r1, #241
	cmp	r2, #6
	ldrls	pc, [pc, r2, asl #2]
	b	.L4782
.L4784:
	.word	.L4783
	.word	.L4785
	.word	.L4783
	.word	.L4789
	.word	.L4789
	.word	.L4787
	.word	.L4788
.L4788:
	ldrb	r2, [r4, #9]	@ zero_extendqisi2
	cmp	r2, #5
	beq	.L4790
	cmp	r2, #6
	bne	.L4824
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	orr	r3, r3, #7
	mvn	r0, #8
	ldrb	ip, [r4, #11]	@ zero_extendqisi2
	ldr	r2, [r5]
	ldr	r1, [r5, #4]
.L4819:
	strb	r3, [r2, r1]
	add	r3, r2, r1
	add	r1, r1, #4
	strb	lr, [r3, #1]
	strb	ip, [r3, #2]
	strb	r0, [r3, #3]
	str	r1, [r5, #4]
.L4789:
	mov	r3, #0
	strb	r3, [r4, #9]
	ldr	r2, [r5, #4]
.L4780:
	ldr	r3, [r10, #336]
	add	r1, r2, #3
	cmp	r1, r3
	bcc	.L4807
.L4777:
	cmp	fp, r7
	bne	.L4808
.L4826:
	cmp	r2, #0
	beq	.L4809
	ldr	r0, [sp, #4]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
.L4774:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4785:
	mov	r2, #2
	mvn	r3, #13
	strb	r2, [r4, #9]
	strb	r3, [r4, #10]
	ldr	r2, [r5, #4]
	b	.L4780
.L4783:
	mov	r3, #1
	strb	r3, [r4, #9]
	strb	r1, [r4, #10]
	ldr	r2, [r5, #4]
	b	.L4780
.L4782:
	mov	r2, #5
	mvn	r3, #15
	strb	r2, [r4, #9]
	strb	r3, [r4, #10]
	ldr	r2, [r5, #4]
	b	.L4780
.L4787:
	ldr	r2, [r5]
	orr	r3, r3, #5
	mov	r0, #0
	ldr	r1, [r5, #4]
	mvn	ip, #9
	strb	r3, [r2, r1]
	add	r3, r2, r1
	add	r1, r1, #4
	strb	ip, [r3, #1]
	strb	r0, [r3, #2]
	strb	r0, [r3, #3]
	str	r1, [r5, #4]
	strb	r0, [r4, #9]
	ldr	r2, [r5, #4]
	b	.L4780
.L4823:
	ldm	r5, {r0, r2}
	orr	r3, r3, #15
	mov	ip, #0
	strb	r3, [r0, r2]
	add	r0, r0, r2
	add	r2, r2, #4
	strb	r1, [r0, #1]
	strb	ip, [r0, #2]
	strb	ip, [r0, #3]
	str	r2, [r5, #4]
	b	.L4780
.L4781:
	tst	r1, #128
	bne	.L4825
	ldrb	r2, [r4, #9]	@ zero_extendqisi2
	sub	r2, r2, #1
	cmp	r2, #5
	ldrls	pc, [pc, r2, asl #2]
	b	.L4820
.L4797:
	.word	.L4796
	.word	.L4798
	.word	.L4799
	.word	.L4800
	.word	.L4801
	.word	.L4802
.L4802:
	ldr	r0, [r5]
	orr	r3, r3, #4
	ldr	r8, [r5]
	ldr	r2, [r5, #4]
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	ldrb	ip, [r4, #11]	@ zero_extendqisi2
	add	r0, r0, r2
	strb	r3, [r8, r2]
	add	r2, r2, #4
	mov	r3, #4
	strb	lr, [r0, #1]
	strb	ip, [r0, #2]
	strb	r1, [r0, #3]
	str	r2, [r5, #4]
	strb	r3, [r4, #9]
.L4820:
	ldr	r2, [r5, #4]
	b	.L4780
.L4801:
	mov	r3, #6
	strb	r3, [r4, #9]
	strb	r1, [r4, #11]
	ldr	r2, [r5, #4]
	b	.L4780
.L4800:
	mov	r3, #5
	strb	r3, [r4, #9]
	strb	r1, [r4, #10]
	ldr	r2, [r5, #4]
	b	.L4780
.L4799:
	ldrb	ip, [r4, #10]	@ zero_extendqisi2
	ldrb	lr, [r4, #11]	@ zero_extendqisi2
	cmp	ip, #239
	orrls	r2, r3, ip, lsr #4
	orrhi	r2, r3, #3
	movls	r3, #2
	movhi	r3, #0
	strb	r3, [r4, #9]
	ldr	r0, [r5]
	ldr	r8, [r5]
	ldr	r3, [r5, #4]
	strb	r2, [r8, r3]
	add	r0, r0, r3
	add	r2, r3, #4
	strb	ip, [r0, #1]
	strb	lr, [r0, #2]
	strb	r1, [r0, #3]
	str	r2, [r5, #4]
	b	.L4780
.L4798:
	mov	r3, #3
	strb	r3, [r4, #9]
	strb	r1, [r4, #11]
	ldr	r2, [r5, #4]
	b	.L4780
.L4796:
	ldrb	ip, [r4, #10]	@ zero_extendqisi2
	mov	lr, #0
	cmp	ip, #239
	movhi	r2, #0
	orrls	r3, r3, ip, lsr #4
	orrhi	r3, r3, #2
	strbhi	r2, [r4, #9]
	ldm	r5, {r0, r2}
	strb	r3, [r0, r2]
	add	r0, r0, r2
	add	r2, r2, #4
	strb	ip, [r0, #1]
	strb	r1, [r0, #2]
	strb	lr, [r0, #3]
	str	r2, [r5, #4]
	b	.L4780
.L4825:
	add	r3, r1, #64
	strb	r1, [r4, #10]
	uxtb	r3, r3
	cmp	r3, #31
	movhi	r3, #2
	strbls	r0, [r4, #9]
	strbhi	r3, [r4, #9]
	ldr	r2, [r5, #4]
	b	.L4780
.L4822:
	mov	r3, #0
	cmp	fp, r7
	str	r3, [r4, #4]
	ldr	r2, [r5, #4]
	bne	.L4808
	b	.L4826
.L4824:
	cmp	r2, #4
	bne	.L4789
	ldr	r2, [r5]
	orr	r3, r3, #5
	mov	r0, #0
	ldr	r1, [r5, #4]
	mvn	ip, #8
	strb	r3, [r2, r1]
	add	r3, r2, r1
	add	r1, r1, #4
	strb	ip, [r3, #1]
	strb	r0, [r3, #2]
	strb	r0, [r3, #3]
	str	r1, [r5, #4]
	b	.L4789
.L4790:
	orr	r3, r3, #6
	mvn	ip, #8
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	mov	r0, #0
	ldr	r2, [r5]
	ldr	r1, [r5, #4]
	b	.L4819
.L4821:
	mov	r0, r3
	ldr	r1, [r10, #336]
	bl	midi_alloc_ep_req
	subs	r5, r0, #0
	bne	.L4776
	ldr	r0, [r10, #84]
	movw	r1, #:lower16:.LC389
	movt	r1, #:upper16:.LC389
	add	r0, r0, #32
	bl	dev_err
	b	.L4774
.L4809:
	ldr	r0, [r5]
	bl	kfree
	ldr	r0, [sp, #4]
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	b	.L4774
	.fnend
	.size	f_midi_transmit, .-f_midi_transmit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_in_tasklet, %function
f_midi_in_tasklet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r1, #0
	b	f_midi_transmit
	.fnend
	.size	f_midi_in_tasklet, .-f_midi_in_tasklet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_register_card, %function
f_midi_register_card:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r3, #0
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	ldr	r0, [r0, #328]
	add	r2, sp, #8
	ldr	r1, [r4, #332]
	str	r2, [sp]
	mov	r2, r3
	bl	snd_card_create
	subs	r5, r0, #0
	blt	.L4839
	ldr	r0, [sp, #8]
	mov	r2, r4
	mov	r1, #8192
	ldr	r3, .L4842
	str	r0, [r4, #96]
	bl	snd_device_new
	subs	r5, r0, #0
	blt	.L4840
	movw	r2, #:lower16:.LC392
	movw	r3, #:lower16:.LC393
	ldr	r0, [sp, #8]
	movt	r2, #:upper16:.LC392
	movt	r3, #:upper16:.LC393
	ldm	r2, {r5, lr}
	movw	r1, #:lower16:.LC394
	ldr	ip, [r2, #8]
	movt	r1, #:upper16:.LC394
	ldrh	r7, [r3, #4]
	ldr	r8, [r3]
	ldrb	r3, [r3, #6]	@ zero_extendqisi2
	str	r5, [r0, #20]	@ unaligned
	str	lr, [r0, #24]	@ unaligned
	str	ip, [r0, #28]	@ unaligned
	str	r8, [r0, #36]	@ unaligned
	strh	r7, [r0, #40]	@ unaligned
	strb	r3, [r0, #42]
	str	r5, [r0, #68]	@ unaligned
	str	lr, [r0, #72]	@ unaligned
	str	ip, [r0, #76]	@ unaligned
	bl	snd_component_add
	ldr	r0, [sp, #8]
	add	ip, sp, #12
	mov	r2, #0
	ldr	r1, [r4, #320]
	ldr	r3, [r4, #324]
	stm	sp, {r1, ip}
	add	r1, r0, #68
	bl	snd_rawmidi_new
	subs	r5, r0, #0
	blt	.L4841
	ldr	r1, [sp, #8]
	ldr	r5, [sp, #12]
	add	r1, r1, #36
	add	r0, r5, #84
	str	r5, [r4, #100]
	bl	strcpy
	mov	r3, #7
	mov	r0, r5
	ldr	r2, .L4842+4
	mov	r1, #0
	str	r3, [r5, #16]
	str	r4, [r5, #200]
	bl	snd_rawmidi_set_ops
	ldr	r0, [sp, #12]
	mov	r1, #1
	ldr	r2, .L4842+8
	bl	snd_rawmidi_set_ops
	ldr	r0, [sp, #8]
	bl	snd_card_register
	subs	r5, r0, #0
	movge	r5, #0
	bge	.L4828
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC396
	movt	r1, #:upper16:.LC396
	add	r0, r0, #32
	bl	dev_err
	b	.L4830
.L4840:
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC391
	mov	r2, r5
	movt	r1, #:upper16:.LC391
	add	r0, r0, #32
	bl	dev_err
.L4830:
	ldr	r0, [r4, #96]
	cmp	r0, #0
	beq	.L4828
	bl	snd_card_free
	mov	r3, #0
	str	r3, [r4, #96]
.L4828:
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4839:
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC390
	movt	r1, #:upper16:.LC390
	add	r0, r0, #32
	bl	dev_err
	b	.L4830
.L4841:
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC395
	mov	r2, r5
	movt	r1, #:upper16:.LC395
	add	r0, r0, #32
	bl	dev_err
	b	.L4830
.L4843:
	.align	2
.L4842:
	.word	.LANCHOR0+892
	.word	.LANCHOR0+904
	.word	.LANCHOR0+920
	.fnend
	.size	f_midi_register_card, .-f_midi_register_card
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_in_trigger, %function
f_midi_in_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #12]
	ldr	r2, [r0, #28]
	add	r3, r3, #58
	ldr	r2, [r2, #200]
	ldr	r3, [r2, r3, lsl #2]
	cmp	r3, #0
	bxeq	lr
	cmp	r1, #0
	str	r1, [r3, #4]
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	add	r1, r2, #304
	mov	r0, #0
	add	r4, r2, #300
	str	lr, [sp, #4]
	bl	_test_and_set_bit
	cmp	r0, #0
	beq	.L4855
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4855:
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	__tasklet_hi_schedule
	.fnend
	.size	f_midi_in_trigger, .-f_midi_in_trigger
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	tx_complete, %function
tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r3, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0]
	cmp	r4, #0
	bne	.L4857
.L4896:
	ldr	r3, [r3, #8]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L4857:
	ldr	ip, [r4, #4]
	cmp	ip, #0
	beq	.L4896
	ldr	r3, [r1, #44]
	mov	r5, r1
	ldr	r7, [r4, #8]
	cmn	r3, #104
	beq	.L4878
	cmp	r3, #0
	beq	.L4861
	cmn	r3, #108
	beq	.L4878
	ldr	r3, [r7, #252]
	add	r3, r3, #1
	str	r3, [r7, #252]
	ldr	r1, [r4, #8]
.L4860:
	ldr	r3, [r1, #236]
	add	r6, r4, #16
	add	r8, r4, #20
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r1, #236]
	bl	_raw_spin_lock
	mov	r2, r8
	add	r0, r5, #36
	ldr	r1, [r4, #24]
	bl	__list_add
	ldr	r3, [r4, #4]
	ldr	r9, [r5, #32]
	ldrb	r3, [r3, #124]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L4877
	cmp	r9, #0
	beq	.L4897
	ldr	r0, [r4, #48]
	cmp	r0, #0
	beq	.L4877
	movw	r1, #32800
	bl	__kmalloc
	mov	r3, #0
	str	r0, [r5]
	str	r3, [r5, #32]
.L4872:
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r0, r9
	bl	dev_kfree_skb_any
.L4871:
	ldr	r3, [r4, #8]
	ldr	r0, [r3, #164]
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	beq	.L4898
.L4856:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4861:
	ldrb	r0, [r1, #26]	@ zero_extendqisi2
	ldr	r3, [r1, #4]
	ldr	r1, [r7, #244]
	tst	r0, #2
	subeq	r3, r3, #1
	add	r3, r1, r3
	str	r3, [r7, #244]
	ldr	r1, [r4, #8]
	b	.L4860
.L4877:
	mov	r3, #0
	str	r3, [r5]
	b	.L4872
.L4898:
	ldr	r4, [r3, #576]
	add	r1, r4, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L4856
	ldr	r0, [r4, #4]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__netif_schedule
.L4878:
	mov	r1, r7
	b	.L4860
.L4897:
	ldr	r3, [r4, #40]
	sub	r3, r3, #1
	str	r3, [r4, #40]
	str	r9, [r5, #4]
	ldr	r5, [r4, #20]
	cmp	r8, r5
	beq	.L4895
	ldr	r3, [r4, #4]
	mov	r0, r5
	ldr	r9, [r3, #88]
	bl	list_del
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r3, [r5, #-32]
	cmp	r3, #0
	beq	.L4866
	ldr	r2, [r4, #4]
	mov	r0, r3
	ldrb	r1, [r2, #104]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L4880
	ldr	r2, [r2, #112]
	cmp	r3, r2
	beq	.L4899
.L4880:
	mov	r1, #1
.L4867:
	ldrb	r2, [r5, #-10]	@ zero_extendqisi2
	bfi	r2, r1, #1, #1
	uxtb	r1, r2
	strb	r2, [r5, #-10]
	tst	r1, #2
	beq	.L4868
	ldrb	r2, [r4, #124]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L4868
	ldrh	ip, [r9, #20]
	sdiv	r2, r3, ip
	mls	r2, ip, r2, r3
	cmp	r2, #0
	bne	.L4868
	bfi	r1, r2, #1, #1
	add	r0, r3, #1
	strb	r1, [r5, #-10]
.L4868:
	str	r0, [r5, #-32]
	ldr	r3, [r9, #8]
	mov	r2, #32
	sub	r1, r5, #36
	mov	r0, r9
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L4900
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r4, #40]
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #40]
	bl	_raw_spin_unlock
	movw	r3, #:lower16:jiffies
	movt	r3, #:upper16:jiffies
	ldr	r3, [r3]
	str	r3, [r7, #604]
	b	.L4871
.L4866:
	mov	r0, r6
.L4894:
	bl	_raw_spin_lock
	mov	r2, r8
	mov	r0, r5
	ldr	r1, [r4, #24]
	bl	__list_add
.L4895:
	mov	r0, r6
	bl	_raw_spin_unlock
	b	.L4871
.L4899:
	ldrh	r2, [r9, #20]
	sdiv	r1, r3, r2
	mls	r1, r2, r1, r3
	adds	r1, r1, #0
	movne	r1, #1
	b	.L4867
.L4900:
	movw	r0, #:lower16:.LC397
	ldr	r1, .L4901
	movt	r0, #:upper16:.LC397
	bl	printk
	mov	r3, #0
	mov	r0, r6
	str	r3, [r5, #-32]
	b	.L4894
.L4902:
	.align	2
.L4901:
	.word	.LANCHOR3+3260
	.fnend
	.size	tx_complete, .-tx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_qc_open, %function
eth_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r0, #1160]
	ldr	r5, [r0, #164]
	ubfx	r5, r5, #2, #1
	cmp	r5, #0
	beq	.L4918
.L4905:
	add	r5, r4, #1152
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r0, [r4, #1156]
	cmp	r0, #0
	beq	.L4907
	ldr	r3, [r0, #112]
	cmp	r3, #0
	beq	.L4907
	blx	r3
.L4907:
	mov	r0, r5
	bl	_raw_spin_unlock_irq
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4918:
	bl	netif_carrier_off
	ldr	r0, [r4, #1160]
	bl	netif_carrier_on
	ldr	r3, [r4, #1160]
	mov	r0, r5
	ldr	r5, [r3, #576]
	add	r1, r5, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L4905
	ldr	r0, [r5, #4]
	bl	__netif_schedule
	b	.L4905
	.fnend
	.size	eth_qc_open, .-eth_qc_open
	.align	2
	.global	rndis_rm_hdr
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_rm_hdr, %function
rndis_rm_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR1
	mov	r8, r2
	movt	r9, #:upper16:.LANCHOR1
	str	lr, [sp, #24]
	ldr	ip, [r1, #80]
	ldr	r3, [r9, #3628]
	.pad #12
	sub	sp, sp, #12
	cmp	ip, r3
	strhi	ip, [r9, #3628]
	bhi	.L4921
	cmp	ip, #0
	beq	.L4935
.L4921:
	cmp	ip, #43
	bls	.L4923
	ldr	r3, [r4, #172]
	ldr	r6, [r3, #4]	@ unaligned
	ldr	r1, [r3, #8]	@ unaligned
	ldr	r5, [r3, #12]	@ unaligned
	ldr	lr, [r3]	@ unaligned
	cmp	ip, r6
	bcc	.L4924
	add	r3, r5, r1
	add	r3, r3, #8
	cmp	r3, r6
	bhi	.L4924
	cmp	lr, #1
	bne	.L4925
	mov	r7, #0
	b	.L4926
.L4940:
	cmp	r2, r5
	beq	.L4930
	bl	skb_clone
	sub	r1, r6, #44
	subs	r6, r0, #0
	mov	r0, r4
	beq	.L4939
	bl	skb_pull
	mov	r1, r5
	mov	r0, r6
	bl	skb_trim
	mov	r1, r6
	mov	r0, r8
	bl	skb_queue_tail
	ldr	ip, [r4, #80]
	cmp	ip, #0
	beq	.L4922
	cmp	ip, #43
	bls	.L4923
	ldr	r0, [r4, #172]
	ldr	r6, [r0, #4]	@ unaligned
	ldr	r1, [r0, #8]	@ unaligned
	ldr	r5, [r0, #12]	@ unaligned
	ldr	lr, [r0]	@ unaligned
	cmp	ip, r6
	add	r2, r1, r5
	bcc	.L4924
	add	r2, r2, #8
	cmp	r2, r6
	bhi	.L4924
	cmp	lr, #1
	bne	.L4925
.L4926:
	add	r1, r1, #8
	mov	r0, r4
	bl	skb_pull
	ldr	r3, [r4, #80]
	mov	r1, #32
	mov	r0, r4
	add	r7, r7, #1
	cmp	r3, r5
	sub	r2, r3, #1
	bne	.L4940
.L4930:
	mov	r1, r5
	mov	r0, r4
	bl	skb_trim
.L4922:
	ldr	r3, [r9, #3632]
	mov	r0, r8
	mov	r1, r4
	cmp	r3, r7
	strlt	r7, [r9, #3632]
	bl	skb_queue_tail
	mov	r0, #0
.L4919:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L4935:
	mov	r7, ip
	b	.L4922
.L4924:
	movw	r0, #:lower16:.LC399
	mov	r3, r1
	stm	sp, {r5, ip}
	mov	r2, r6
	mov	r1, lr
	movt	r0, #:upper16:.LC399
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #74
	b	.L4919
.L4923:
	movw	r0, #:lower16:.LC398
	mov	r1, ip
	mov	r2, #44
	movt	r0, #:upper16:.LC398
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #21
	b	.L4919
.L4939:
	movw	r0, #:lower16:.LC400
	ldr	r1, .L4941
	movt	r0, #:upper16:.LC400
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #11
	b	.L4919
.L4925:
	movw	r0, #:lower16:.LC399
	mov	r3, r1
	stm	sp, {r5, ip}
	mov	r2, r6
	mov	r1, lr
	movt	r0, #:upper16:.LC399
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #21
	b	.L4919
.L4942:
	.align	2
.L4941:
	.word	.LANCHOR3+3272
	.fnend
	.size	rndis_rm_hdr, .-rndis_rm_hdr
	.align	2
	.global	rndis_qc_rm_hdr
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_rm_hdr, %function
rndis_qc_rm_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #172]
	ldr	r3, [r5]	@ unaligned
	cmp	r3, #1
	bne	.L4948
	ldr	r1, [r5, #8]	@ unaligned
	mov	r0, r4
	mov	r6, r2
	add	r1, r1, #8
	bl	skb_pull
	cmp	r0, #0
	beq	.L4949
	ldr	r1, [r5, #12]	@ unaligned
	mov	r0, r4
	bl	skb_trim
	mov	r0, r6
	mov	r1, r4
	bl	skb_queue_tail
	mov	r0, #0
.L4943:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4948:
	mov	r0, r1
	bl	dev_kfree_skb_any
	mvn	r0, #21
	b	.L4943
.L4949:
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #74
	b	.L4943
	.fnend
	.size	rndis_qc_rm_hdr, .-rndis_qc_rm_hdr
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_proc_open, %function
rndis_proc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #-20]
	mov	r0, r1
	movw	r1, #:lower16:rndis_proc_show
	movt	r1, #:upper16:rndis_proc_show
	ldr	r2, [r3, #44]
	b	single_open
	.fnend
	.size	rndis_proc_open, .-rndis_proc_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_proc_show, %function
rndis_proc_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r1, #:lower16:.LC402
	movw	r3, #:lower16:.LC401
	strd	r6, [sp, #8]
	movt	r1, #:upper16:.LC402
	movt	r3, #:upper16:.LC401
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	ip, [r0, #76]
	.pad #44
	sub	sp, sp, #44
	ldrb	r4, [ip, #1]	@ zero_extendqisi2
	ldr	lr, [ip, #4]
	ldrb	r2, [ip]	@ zero_extendqisi2
	cmp	r4, #0
	moveq	r3, r1
	cmp	lr, #2
	movwhi	r7, #:lower16:.LC403
	movthi	r7, #:upper16:.LC403
	bhi	.L4953
	movw	r1, #:lower16:.LANCHOR3
	movt	r1, #:upper16:.LANCHOR3
	add	r1, r1, lr, lsl #2
	ldr	r7, [r1, #3288]
.L4953:
	ldr	r8, [ip, #8]
	ldr	r1, [ip, #16]
	cmp	r1, #0
	bne	.L4957
	ldr	r1, [ip, #12]
	mov	r6, #100
	movw	r5, #:lower16:.LC405
	movt	r5, #:upper16:.LC405
	mul	r6, r6, r1
.L4954:
	movw	lr, #:lower16:.LANCHOR1
	ldrb	r4, [ip, #36]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC406
	movt	lr, #:upper16:.LANCHOR1
	movt	r1, #:upper16:.LC406
	ldr	r9, [lr, #3628]
	ldr	lr, [lr, #3632]
	str	r9, [sp, #28]
	str	r4, [sp, #32]
	str	lr, [sp, #36]
	ldr	lr, [ip, #28]
	ldr	lr, [lr, #356]
	add	lr, lr, #80
	mul	lr, r4, lr
	str	lr, [sp, #24]
	ldr	lr, [ip, #40]
	str	lr, [sp, #20]
	ldr	ip, [ip, #32]
	stm	sp, {r7, r8}
	str	r6, [sp, #8]
	str	r5, [sp, #12]
	str	ip, [sp, #16]
	bl	seq_printf
	mov	r0, #0
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L4957:
	movw	r5, #:lower16:.LC404
	mov	r6, #0
	movt	r5, #:upper16:.LC404
	b	.L4954
	.fnend
	.size	rndis_proc_show, .-rndis_proc_show
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	get_ether_addr, %function
get_ether_addr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, r9, r10, lr}
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	subs	r5, r0, #0
	mov	r4, r1
	subne	r6, r1, #1
	addne	r9, r1, #5
	bne	.L4963
.L4964:
	mov	r0, r4
	mov	r1, #6
	bl	get_random_bytes
	ldrb	r3, [r4]	@ zero_extendqisi2
	mov	r0, #1
	bic	r3, r3, #1
	orr	r3, r3, #2
	strb	r3, [r4]
	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
.L4963:
	ldrb	r3, [r5]	@ zero_extendqisi2
	mov	r8, r5
	cmp	r3, #58
	cmpne	r3, #46
	addeq	r8, r5, #1
	mov	r5, r8
	ldrb	r0, [r5], #2	@ zero_extendqisi2
	bl	hex_to_bin
	mov	r7, r0
	ldrb	r0, [r8, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, r7, lsl #4
	strb	r0, [r6, #1]!
	cmp	r9, r6
	bne	.L4963
	ldrb	r3, [r4]	@ zero_extendqisi2
	ands	r0, r3, #1
	bne	.L4964
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	ldrb	lr, [r4, #2]	@ zero_extendqisi2
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	ldrb	r1, [r4, #4]	@ zero_extendqisi2
	orr	r3, r3, r2
	ldrb	r2, [r4, #5]	@ zero_extendqisi2
	orr	r3, r3, lr
	orr	r3, r3, ip
	orr	r3, r3, r1
	orrs	r3, r3, r2
	beq	.L4964
	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
	.fnend
	.size	get_ether_addr, .-get_ether_addr
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_lun_open, %function
fsg_lun_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r4, [r0, #24]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ands	r4, r4, #1
	beq	.L4972
.L4974:
	mov	r2, #0
	mov	r1, #131072
	mov	r0, r7
	mov	r4, #1
	bl	filp_open
	mov	r5, r0
	cmn	r5, #4096
	bhi	.L5019
.L4975:
	ldr	r3, [r5, #12]
	ldr	r2, [r5, #36]
	tst	r2, #2
	moveq	r4, #1
	cmp	r3, #0
	beq	.L4978
	ldr	r2, [r3, #32]
	cmp	r2, #0
	beq	.L4978
	ldrh	r3, [r2]
	and	r3, r3, #61440
	sub	r3, r3, #24576
	tst	r3, #53248
	beq	.L4979
.L4978:
	movw	r1, #:lower16:.LC408
	mov	r2, r7
	add	r0, r6, #48
	movt	r1, #:upper16:.LC408
	mvn	r8, #21
	bl	_dev_info
.L4980:
	mov	r3, sp
	mov	r0, r5
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #984]
	bl	filp_close
.L4971:
	mov	r0, r8
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4979:
	ldr	r3, [r5, #16]
	cmp	r3, #0
	beq	.L4981
	ldr	r1, [r3, #8]
	cmp	r1, #0
	beq	.L5020
.L4982:
	ldr	r1, [r3, #12]
	cmp	r1, #0
	beq	.L5021
.L4983:
	ldr	r3, [r2, #32]
	ldr	r3, [r3]
.L5018:
	ldr	r1, [r3, #104]
	tst	r1, #1
	bne	.L4985
	.syntax divided
@ 165 "/home/Jprimero15/hlte/lolz/include/linux/seqlock.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldrd	r8, [r3, #96]
	.syntax divided
@ 221 "/home/Jprimero15/hlte/lolz/include/linux/seqlock.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r3, #104]
	cmp	r0, r1
	bne	.L5018
	cmp	r8, #0
	sbcs	r3, r9, #0
	blt	.L5022
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	tst	r3, #8
	beq	.L4988
	lsr	r2, r8, #11
	mov	r1, #11
	movw	r10, #65502
	orr	r2, r2, r9, lsl #21
	movt	r10, 255
	str	r1, [r6, #40]
	asr	r3, r9, r1
	mov	fp, #0
	cmp	r10, r2
	mov	r0, #2048
	sbcs	r1, fp, r3
	str	r0, [r6, #44]
	blt	.L4989
	mov	r0, #300
	mov	r1, #0
.L4990:
	cmp	r2, r0
	sbcs	r1, r3, r1
	blt	.L5023
.L4995:
	add	r1, r5, #28
	.syntax divided
@ 45 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r0, [r1]
	add	r0, r0, #1
	strex	ip, r0, [r1]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldrb	r1, [r6, #24]	@ zero_extendqisi2
	str	r5, [r6]
	ldr	r0, .L5024
	strd	r8, [r6, #8]
	strd	r2, [r6, #16]
	bfi	r1, r4, #1, #1
	strb	r1, [r6, #24]
	ldrh	r8, [r0, #-14]
	ubfx	r8, r8, #2, #1
	cmp	r8, #0
	beq	.L4980
	movw	r2, #:lower16:.LC414
	mov	r3, r7
	add	r1, r6, #48
	movt	r2, #:upper16:.LC414
	sub	r0, r0, #32
	mov	r8, #0
	bl	__dynamic_dev_dbg
	b	.L4980
.L4972:
	mov	r1, #2
	mov	r2, r4
	movt	r1, 2
	mov	r0, r7
	bl	filp_open
	cmn	r0, #30
	cmnne	r0, #13
	mov	r5, r0
	beq	.L4974
	cmn	r5, #4096
	bls	.L4975
.L5019:
	movw	r1, #:lower16:.LC407
	mov	r2, r7
	add	r0, r6, #48
	movt	r1, #:upper16:.LC407
	mov	r8, r5
	bl	_dev_info
	b	.L4971
.L5020:
	ldr	r1, [r3, #16]
	cmp	r1, #0
	bne	.L4982
.L4981:
	movw	r1, #:lower16:.LC409
	mov	r2, r7
	add	r0, r6, #48
	movt	r1, #:upper16:.LC409
	bl	_dev_info
	mvn	r8, #21
	b	.L4980
.L4988:
	ldr	r3, [r2, #312]
	cmp	r3, #0
	beq	.L4991
	ldr	r3, [r3, #88]
	ldr	r3, [r3, #492]
	cmp	r3, #0
	moveq	r3, #512
	beq	.L4992
	add	r3, r3, #776
	ldrh	r3, [r3]
	cmp	r3, #0
	moveq	r3, #512
.L4992:
	mov	r1, #8
	str	r3, [r6, #44]
.L4993:
	lsr	r3, r3, #1
	add	r1, r1, #1
	cmp	r3, #256
	bhi	.L4993
	str	r1, [r6, #40]
.L4994:
	rsb	r0, r1, #32
	lsr	r2, r8, r1
	subs	ip, r1, #32
	orr	r2, r2, r9, lsl r0
	mov	r0, #1
	asr	r3, r9, r1
	orrpl	r2, r2, r9, asr ip
	mov	r1, #0
	b	.L4990
.L5021:
	ldr	r3, [r3, #20]
	cmp	r3, #0
	moveq	r4, #1
	b	.L4983
.L5023:
	movw	r1, #:lower16:.LC413
	mov	r2, r7
	add	r0, r6, #48
	movt	r1, #:upper16:.LC413
	bl	_dev_info
	mvn	r8, #524
	b	.L4980
.L5022:
	movw	r1, #:lower16:.LC410
	mov	r2, r7
	add	r0, r6, #48
	movt	r1, #:upper16:.LC410
	bl	_dev_info
	b	.L4980
.L4989:
	add	r3, r6, #48
	movw	r1, #:lower16:.LC411
	mov	r0, r3
	movt	r1, #:upper16:.LC411
	mov	r2, r7
	str	r3, [sp, #4]
	bl	_dev_info
	ldr	r3, [sp, #4]
	movw	r2, #65502
	movw	r1, #:lower16:.LC412
	movt	r2, 255
	movt	r1, #:upper16:.LC412
	mov	r0, r3
	bl	_dev_info
	mov	r2, r10
	mov	r3, fp
	b	.L4995
.L4985:
	.syntax divided
@ 147 "/home/Jprimero15/hlte/lolz/include/linux/seqlock.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	b	.L5018
.L4991:
	mov	r3, #512
	mov	r1, #9
	str	r1, [r6, #40]
	str	r3, [r6, #44]
	b	.L4994
.L5025:
	.align	2
.L5024:
	.word	.LANCHOR4-3664
	.fnend
	.size	fsg_lun_open, .-fsg_lun_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_cleanup, %function
conn_gadget_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC415
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r1, .L5034
	movt	r0, #:upper16:.LC415
	str	lr, [sp, #4]
	movw	r4, #:lower16:.LANCHOR1
	bl	printk
	movw	r0, #:lower16:.LC416
	movt	r4, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC416
	bl	printk
	ldr	r3, [r4, #2484]
	cmp	r3, #0
	beq	.L5033
	ldr	r0, .L5034+4
	bl	misc_deregister
	ldr	r0, [r4, #2484]
	ldr	r3, [r0, #188]
	cmp	r3, #0
	beq	.L5028
	mov	r0, r3
	bl	vfree
	ldr	r0, [r4, #2484]
.L5028:
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #2484]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5033:
	movw	r0, #:lower16:.LC417
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC417
	add	sp, sp, #8
	ldr	r1, .L5034+8
	b	printk
.L5035:
	.align	2
.L5034:
	.word	.LANCHOR3+3300
	.word	.LANCHOR0+936
	.word	.LANCHOR3+3332
	.fnend
	.size	conn_gadget_function_cleanup, .-conn_gadget_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_init, %function
conn_gadget_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC418
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r1, .L5053
	movt	r0, #:upper16:.LC418
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	printk
	movw	r0, #:lower16:.LC419
	movt	r0, #:upper16:.LC419
	bl	printk
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L5042
	mov	r2, #220
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L5050
.L5037:
	mov	r5, #0
	movw	r1, #:lower16:.LC372
	ldr	r2, .L5053+4
	movt	r1, #:upper16:.LC372
	add	r0, r4, #144
	str	r5, [r4, #88]
	movw	r6, #:lower16:.LANCHOR1
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC373
	ldr	r2, .L5053+4
	add	r0, r4, #156
	movt	r1, #:upper16:.LC373
	movt	r6, #:upper16:.LANCHOR1
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC421
	ldr	r2, .L5053+4
	add	r0, r4, #200
	movt	r1, #:upper16:.LC421
	bl	__init_waitqueue_head
	add	r1, r4, #128
	add	r0, r4, #120
	str	r5, [r4, #108]
	add	r2, r4, #136
	mov	r3, #262144
	str	r5, [r4, #112]
	mov	ip, #4096
	str	r5, [r4, #116]
	str	r0, [r4, #120]
	strd	r0, [r4, #124]
	mov	r0, r3
	str	r1, [r4, #132]
	str	r2, [r4, #136]
	str	r2, [r4, #140]
	str	ip, [r4, #192]
	str	r3, [r4, #196]
	str	r5, [r4, #216]
	bl	vmalloc
	cmp	r0, r5
	mov	r1, r0
	str	r0, [r4, #188]
	beq	.L5051
	mov	r3, #1
	ldr	r2, [r4, #196]
	add	r0, r4, #168
	bl	__kfifo_init
	ldr	r0, .L5053+8
	str	r4, [r6, #2484]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L5052
.L5036:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5042:
	mov	r4, #16
	b	.L5037
.L5052:
	movw	r0, #:lower16:.LC423
	mov	r2, r5
	ldr	r1, .L5053+12
	movt	r0, #:upper16:.LC423
	bl	printk
.L5040:
	ldr	r0, [r4, #188]
	cmp	r0, #0
	beq	.L5041
	bl	vfree
.L5041:
	mov	r3, #0
	mov	r0, r4
	str	r3, [r6, #2484]
	bl	kfree
	movw	r0, #:lower16:.LC424
	ldr	r1, .L5053+12
	movt	r0, #:upper16:.LC424
	bl	printk
	b	.L5036
.L5051:
	movw	r0, #:lower16:.LC422
	ldr	r1, .L5053+12
	mvn	r5, #11
	movt	r0, #:upper16:.LC422
	bl	printk
	b	.L5040
.L5050:
	movw	r0, #:lower16:.LC420
	mvn	r5, #11
	movt	r0, #:upper16:.LC420
	bl	printk
	b	.L5036
.L5054:
	.align	2
.L5053:
	.word	.LANCHOR3+3352
	.word	.LANCHOR1+3636
	.word	.LANCHOR0+936
	.word	.LANCHOR3+3380
	.fnend
	.size	conn_gadget_function_init, .-conn_gadget_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_usb_buffer_size_store, %function
conn_gadget_usb_buffer_size_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r6, r3
	str	lr, [sp, #16]
	ldr	r3, [r5, #2484]
	.pad #12
	sub	sp, sp, #12
	cmp	r3, #0
	beq	.L5065
	ldr	r3, [r3, #100]
	cmp	r3, #0
	bne	.L5066
	movw	r1, #:lower16:.LC427
	mov	r0, r2
	movt	r1, #:upper16:.LC427
	add	r2, sp, #4
	bl	sscanf
	ldr	r4, [sp, #4]
	lsl	r4, r4, #16
	mov	r0, r4
	bl	vmalloc
	subs	r7, r0, #0
	beq	.L5067
	ldr	ip, [r5, #2484]
	ldr	r0, [ip, #188]
	cmp	r0, #0
	beq	.L5060
	bl	vfree
	ldr	ip, [r5, #2484]
.L5060:
	ldr	lr, [sp, #4]
	mov	r5, #0
	mov	r0, ip
	mov	r1, r7
	mov	r2, r4
	str	r5, [ip, #172]
	mov	r3, #1
	str	r7, [ip, #188]
	lsl	lr, lr, #10
	str	lr, [ip, #192]
	str	r4, [ip, #196]
	str	r5, [r0, #168]!
	bl	__kfifo_init
.L5055:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L5065:
	movw	r0, #:lower16:.LC425
	ldr	r1, .L5068
	movt	r0, #:upper16:.LC425
	bl	printk
	b	.L5055
.L5067:
	movw	r0, #:lower16:.LC428
	ldr	r1, .L5068
	movt	r0, #:upper16:.LC428
	bl	printk
	b	.L5055
.L5066:
	movw	r0, #:lower16:.LC426
	ldr	r1, .L5068
	movt	r0, #:upper16:.LC426
	bl	printk
	b	.L5055
.L5069:
	.align	2
.L5068:
	.word	.LANCHOR3+3400
	.fnend
	.size	conn_gadget_usb_buffer_size_store, .-conn_gadget_usb_buffer_size_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	remote_wakeup_store, %function
remote_wakeup_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r3
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	add	r2, sp, #8
	mov	r3, #0
	movw	r1, #:lower16:.LC427
	mov	r4, r0
	str	r3, [r2, #-4]!
	mov	r0, r6
	movt	r1, #:upper16:.LC427
	bl	sscanf
	ldr	r0, .L5086
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L5085
.L5071:
	mov	r0, r4
	ldr	r3, [r0, #508]!
	cmp	r0, r3
	sub	r3, r3, #120
	beq	.L5073
	ldr	r2, [sp, #4]
	cmp	r2, #0
	bne	.L5074
.L5075:
	ldrb	r2, [r3, #22]	@ zero_extendqisi2
	ldr	r1, [r3, #120]
	bic	r2, r2, #32
	cmp	r0, r1
	strb	r2, [r3, #22]
	sub	r3, r1, #120
	bne	.L5075
.L5073:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5074:
	ldrb	r2, [r3, #22]	@ zero_extendqisi2
	ldr	r1, [r3, #120]
	orr	r2, r2, #32
	cmp	r0, r1
	strb	r2, [r3, #22]
	sub	r3, r1, #120
	bne	.L5074
	b	.L5073
.L5085:
	ldr	lr, [sp, #4]
	movw	ip, #:lower16:.LC429
	movw	r3, #:lower16:.LC430
	movt	ip, #:upper16:.LC429
	movw	r1, #:lower16:.LC431
	ldr	r2, .L5086+4
	movt	r3, #:upper16:.LC430
	movt	r1, #:upper16:.LC431
	sub	r0, r0, #24
	cmp	lr, #0
	movne	r3, ip
	bl	__dynamic_pr_debug
	b	.L5071
.L5087:
	.align	2
.L5086:
	.word	.LANCHOR4-3648
	.word	.LANCHOR3+3436
	.fnend
	.size	remote_wakeup_store, .-remote_wakeup_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceProtocol_store, %function
bDeviceProtocol_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC77
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC77
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L5090
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strb	r2, [r3, #142]
.L5088:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5090:
	mvn	r0, #0
	b	.L5088
	.fnend
	.size	bDeviceProtocol_store, .-bDeviceProtocol_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceSubClass_store, %function
bDeviceSubClass_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC77
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC77
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L5094
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strb	r2, [r3, #141]
.L5092:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5094:
	mvn	r0, #0
	b	.L5092
	.fnend
	.size	bDeviceSubClass_store, .-bDeviceSubClass_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceClass_store, %function
bDeviceClass_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC77
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC77
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L5098
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strb	r2, [r3, #140]
.L5096:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5098:
	mvn	r0, #0
	b	.L5096
	.fnend
	.size	bDeviceClass_store, .-bDeviceClass_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bcdDevice_store, %function
bcdDevice_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC85
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC85
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L5102
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strh	r2, [r3, #148]	@ movhi
.L5100:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5102:
	mvn	r0, #0
	b	.L5100
	.fnend
	.size	bcdDevice_store, .-bcdDevice_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	idProduct_store, %function
idProduct_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC85
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC85
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L5106
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strh	r2, [r3, #146]	@ movhi
.L5104:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5106:
	mvn	r0, #0
	b	.L5104
	.fnend
	.size	idProduct_store, .-idProduct_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	idVendor_store, %function
idVendor_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC85
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC85
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L5110
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strh	r2, [r3, #144]	@ movhi
.L5108:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5110:
	mvn	r0, #0
	b	.L5108
	.fnend
	.size	idVendor_store, .-idVendor_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_product_store, %function
mass_storage_product_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r4, #16
	ldr	r5, [r0, #4]
	bhi	.L5115
	ldr	r2, [r5, #96]
	movw	r1, #:lower16:.LC84
	mov	r0, r6
	movt	r1, #:upper16:.LC84
	add	r2, r2, #218
	bl	sscanf
	cmp	r0, #1
	beq	.L5117
.L5115:
	mvn	r0, #21
.L5112:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5117:
	ldr	r2, [r5, #96]
	movw	r0, #:lower16:.LC432
	movt	r0, #:upper16:.LC432
	ldr	r1, .L5118
	add	r2, r2, #218
	bl	printk
	mov	r0, r4
	b	.L5112
.L5119:
	.align	2
.L5118:
	.word	.LANCHOR3+3456
	.fnend
	.size	mass_storage_product_store, .-mass_storage_product_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_vendor_store, %function
mass_storage_vendor_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r4, #8
	ldr	r5, [r0, #4]
	bhi	.L5123
	ldr	r2, [r5, #96]
	movw	r1, #:lower16:.LC84
	mov	r0, r6
	movt	r1, #:upper16:.LC84
	add	r2, r2, #209
	bl	sscanf
	cmp	r0, #1
	beq	.L5125
.L5123:
	mvn	r0, #21
.L5120:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5125:
	ldr	r2, [r5, #96]
	movw	r0, #:lower16:.LC433
	movt	r0, #:upper16:.LC433
	ldr	r1, .L5126
	add	r2, r2, #209
	bl	printk
	mov	r0, r4
	b	.L5120
.L5127:
	.align	2
.L5126:
	.word	.LANCHOR3+3484
	.fnend
	.size	mass_storage_vendor_store, .-mass_storage_vendor_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_inquiry_store, %function
mass_storage_inquiry_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r4, #28
	ldr	r3, [r0, #4]
	bhi	.L5131
	ldr	r2, [r3, #96]
	movw	r1, #:lower16:.LC434
	mov	r0, r5
	movt	r1, #:upper16:.LC434
	add	r2, r2, #180
	bl	sscanf
	cmp	r0, #1
	bne	.L5131
	mov	r0, r4
.L5128:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5131:
	mvn	r0, #21
	b	.L5128
	.fnend
	.size	mass_storage_inquiry_store, .-mass_storage_inquiry_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_ethaddr_store, %function
ecm_ethaddr_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r2
	mov	r4, r3
	str	lr, [sp, #8]
	.pad #20
	sub	sp, sp, #20
	bl	dev_get_drvdata
	ldr	r2, [r0, #4]
	mov	r0, r5
	movw	r1, #:lower16:.LC87
	movt	r1, #:upper16:.LC87
	add	r3, r2, #3
	add	ip, r2, #5
	add	r5, r2, #4
	add	lr, r2, #2
	str	lr, [sp]
	stmib	sp, {r3, r5, ip}
	add	r3, r2, #1
	bl	sscanf
	cmp	r0, #6
	moveq	r0, r4
	mvnne	r0, #21
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_ethaddr_store, .-ecm_ethaddr_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_max_pkt_per_xfer_store, %function
rndis_max_pkt_per_xfer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	movw	r1, #:lower16:.LC427
	ldr	r6, [r0, #4]
	add	r2, sp, #4
	movt	r1, #:upper16:.LC427
	mov	r0, r5
	bl	sscanf
	cmp	r0, #1
	ldreq	r3, [sp, #4]
	moveq	r0, r4
	mvnne	r0, #21
	strbeq	r3, [r6, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_max_pkt_per_xfer_store, .-rndis_max_pkt_per_xfer_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_vendorID_store, %function
rndis_vendorID_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	movw	r1, #:lower16:.LC435
	ldr	r6, [r0, #4]
	add	r2, sp, #4
	movt	r1, #:upper16:.LC435
	mov	r0, r5
	bl	sscanf
	cmp	r0, #1
	ldreq	r3, [sp, #4]
	moveq	r0, r4
	mvnne	r0, #21
	streq	r3, [r6, #8]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_vendorID_store, .-rndis_vendorID_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_wceis_store, %function
rndis_wceis_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	mov	r4, r3
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	movw	r1, #:lower16:.LC427
	ldr	r6, [r0, #4]
	add	r2, sp, #4
	movt	r1, #:upper16:.LC427
	mov	r0, r5
	bl	sscanf
	cmp	r0, #1
	bne	.L5147
	ldr	r3, [sp, #4]
	mov	r0, r4
	adds	r3, r3, #0
	movne	r3, #1
	strb	r3, [r6, #269]
.L5145:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5147:
	mvn	r0, #21
	b	.L5145
	.fnend
	.size	rndis_wceis_store, .-rndis_wceis_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_manufacturer_store, %function
rndis_manufacturer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r4, #255
	ldr	r2, [r0, #4]
	bhi	.L5151
	movw	r1, #:lower16:.LC436
	add	r2, r2, #13
	mov	r0, r5
	movt	r1, #:upper16:.LC436
	bl	sscanf
	cmp	r0, #1
	moveq	r0, r4
	mvnne	r0, #0
.L5149:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5151:
	mvn	r0, #21
	b	.L5149
	.fnend
	.size	rndis_manufacturer_store, .-rndis_manufacturer_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_instances_store, %function
acm_instances_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r3
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	movw	r1, #:lower16:.LC427
	ldr	r4, [r0, #4]
	add	r2, sp, #4
	movt	r1, #:upper16:.LC427
	mov	r0, r6
	bl	sscanf
	ldr	r2, [sp, #4]
	mov	r0, r5
	cmp	r2, #4
	movge	r2, #4
	str	r2, [r4]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	acm_instances_store, .-acm_instances_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_unwrap_ntb, %function
ncm_unwrap_ntb:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r7, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r0, #176]
	.pad #44
	sub	sp, sp, #44
	ldr	r1, [r1, #172]
	ldrb	r3, [r0, #180]	@ zero_extendqisi2
	ldr	r0, [r6]
	ldr	r2, [r1]	@ unaligned
	cmp	r3, #0
	moveq	fp, #14
	movne	fp, #18
	moveq	r8, #0
	movne	r8, #4
	cmp	r0, r2
	bne	.L5208
	ldrb	ip, [r1, #5]	@ zero_extendqisi2
	ldrb	r0, [r1, #4]	@ zero_extendqisi2
	ldr	r2, [r6, #8]
	orr	r0, r0, ip, lsl #8
	cmp	r0, r2
	bne	.L5209
	ldr	ip, [r6, #24]
	add	r9, r1, #8
	cmp	ip, #1
	beq	.L5162
	cmp	ip, #2
	ldreq	lr, [r1, #8]	@ unaligned
	bne	.L5203
.L5164:
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	ldr	r2, [r2, #36]
	cmp	r2, lr
	bcc	.L5210
	ldr	r2, [r6, #28]
	add	lr, r9, ip, lsl #1
	cmp	r2, #1
	beq	.L5167
	cmp	r2, #2
	ldreq	r2, [lr]	@ unaligned
	bne	.L5203
.L5169:
	cmp	r0, r2
	movls	r0, #0
	movhi	r0, #1
	ands	ip, r2, #3
	movne	ip, r0
	cmp	ip, #0
	bne	.L5211
	add	r1, r1, r2
	ldr	r0, [r6, #4]
	ldr	r2, [r1]	@ unaligned
	cmp	r0, r2
	beq	.L5171
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC443
	mvn	r5, #21
	movt	r1, #:upper16:.LC443
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L5159
.L5209:
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC440
	mvn	r5, #21
	movt	r1, #:upper16:.LC440
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
.L5159:
	mov	r0, r7
	bl	skb_queue_purge
	mov	r0, r4
	bl	dev_kfree_skb_any
.L5156:
	mov	r0, r5
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5208:
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC437
	mvn	r5, #21
	ldr	r2, [r4, #80]
	movt	r1, #:upper16:.LC437
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	ldr	r0, [r4, #172]
	mov	ip, #0
	mov	r3, #32
	mov	r2, #1
	movw	r1, #:lower16:.LC438
	movt	r1, #:upper16:.LC438
	str	r2, [sp]
	stmib	sp, {r0, r3, ip}
	movw	r0, #:lower16:.LC439
	movt	r0, #:upper16:.LC439
	bl	print_hex_dump
	b	.L5159
.L5162:
	ldrb	r2, [r1, #9]	@ zero_extendqisi2
	ldrb	lr, [r1, #8]	@ zero_extendqisi2
	orr	lr, lr, r2, lsl #8
	b	.L5164
.L5167:
	ldrb	lr, [lr, #1]	@ zero_extendqisi2
	ldrb	r2, [r9, ip, lsl #1]	@ zero_extendqisi2
	orr	r2, r2, lr, lsl #8
	b	.L5169
.L5210:
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC441
	mvn	r5, #21
	movt	r1, #:upper16:.LC441
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L5159
.L5171:
	ldrb	ip, [r1, #5]	@ zero_extendqisi2
	ldrb	r2, [r1, #4]	@ zero_extendqisi2
	ldr	lr, [r6, #12]
	ldr	r0, [r6, #20]
	orr	r2, r2, ip, lsl #8
	add	ip, lr, r0, lsl #3
	cmp	ip, r2
	bhi	.L5172
	ldr	r9, [r6, #16]
	udiv	ip, r2, r9
	mls	ip, r9, ip, r2
	cmp	ip, #0
	bne	.L5172
	ldr	ip, [r6, #32]
	sub	r3, r2, lr
	cmp	r0, #1
	ldr	r2, [r6, #36]
	add	r1, r1, #6
	ldr	r9, [r6, #40]
	str	r3, [sp, #16]
	add	lr, ip, r9
	add	lr, lr, r2
	add	ip, r1, lr, lsl #1
	beq	.L5175
	cmp	r0, #2
	bne	.L5203
	ldr	r3, [ip, #4]	@ unaligned
	mov	r2, ip
	mov	r1, #4
	str	r3, [sp, #36]
	ldr	r3, [r2], #4	@ unaligned
.L5177:
	ldr	r10, [sp, #16]
	add	r9, r2, r1
	str	r7, [sp, #16]
	str	r4, [sp, #20]
	ldr	r7, [sp, #36]
	str	r6, [sp, #24]
	str	r5, [sp, #28]
	str	fp, [sp, #32]
	b	.L5187
.L5216:
	mov	r1, #32
	ldr	r0, [sp, #20]
	str	r3, [sp, #36]
	bl	skb_clone
	subs	fp, r0, #0
	ldr	r3, [sp, #36]
	beq	.L5212
	mov	r1, r3
	bl	skb_pull
	cmp	r0, #0
	beq	.L5213
	sub	r1, r7, r8
	mov	r0, fp
	bl	skb_trim
	ldr	r0, [sp, #16]
	mov	r1, fp
	mov	r7, r5
	bl	skb_queue_tail
	ldr	r3, [sp, #24]
	ldr	r0, [r3, #20]
	mov	r3, r6
	lsl	r2, r0, #2
	sub	r10, r10, r2
	cmp	r2, r10
	bcs	.L5207
.L5187:
	ldr	r2, [sp, #32]
	cmp	r7, r2
	bcc	.L5214
	ldr	r2, [sp, #28]
	ldrb	r2, [r2, #180]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L5215
.L5179:
	cmp	r0, #1
	beq	.L5182
	cmp	r0, #2
	bne	.L5203
	mov	r2, r9
	ldr	r5, [r9, #4]	@ unaligned
	mov	r1, #4
	ldr	r6, [r2], #4	@ unaligned
.L5184:
	clz	r4, r5
	cmp	r6, #0
	lsr	r4, r4, #5
	moveq	r4, #1
	add	r9, r2, r1
	cmp	r4, #0
	beq	.L5216
	ldr	r4, [sp, #20]
	mov	r1, r3
	str	r7, [sp, #36]
	ldr	r7, [sp, #16]
	mov	r0, r4
	bl	skb_pull
	cmp	r0, #0
	bne	.L5217
.L5190:
	mvn	r5, #74
	b	.L5159
.L5172:
	ldr	r3, [r5, #20]
	movw	r1, #:lower16:.LC444
	movt	r1, #:upper16:.LC444
.L5206:
	ldr	r3, [r3, #24]
	mvn	r5, #21
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L5159
.L5182:
	mov	r2, r9
	ldrb	ip, [r9, #1]	@ zero_extendqisi2
	mov	r1, #2
	ldrb	r6, [r2], #2	@ zero_extendqisi2
	ldrb	r0, [r9, #3]	@ zero_extendqisi2
	ldrb	r5, [r9, #2]	@ zero_extendqisi2
	orr	r6, r6, ip, lsl #8
	orr	r5, r5, r0, lsl #8
	b	.L5184
.L5215:
	ldr	r2, [sp, #20]
	add	ip, r3, r7
	mvn	r0, #0
	sub	ip, ip, r8
	str	r3, [sp, #36]
	ldr	r1, [r2, #172]
	sub	r2, r7, r8
	ldr	r4, [r1, ip]	@ unaligned
	add	r1, r1, r3
	bl	crc32_le
	mvn	r0, r0
	cmp	r0, r4
	bne	.L5180
	ldr	r3, [sp, #24]
	ldr	r0, [r3, #20]
	ldr	r3, [sp, #36]
	b	.L5179
.L5211:
	movw	r1, #:lower16:.LC442
	ldr	r3, [r5, #20]
	movt	r1, #:upper16:.LC442
	b	.L5206
.L5175:
	ldrb	r9, [r1, lr, lsl #1]	@ zero_extendqisi2
	add	r2, ip, #2
	mov	r1, #2
	ldrb	r10, [ip, #1]	@ zero_extendqisi2
	ldrb	lr, [ip, #3]	@ zero_extendqisi2
	ldrb	ip, [ip, #2]	@ zero_extendqisi2
	orr	r3, r9, r10, lsl #8
	orr	ip, ip, lr, lsl #8
	str	ip, [sp, #36]
	b	.L5177
.L5217:
	ldr	r3, [sp, #36]
	mov	r0, r4
	sub	r1, r3, r8
	bl	skb_trim
	mov	r1, r4
	mov	r0, r7
	bl	skb_queue_tail
.L5207:
	mov	r5, #0
	b	.L5156
.L5214:
	movw	r1, #:lower16:.LC445
	mov	r2, r7
	ldr	r7, [sp, #16]
	ldr	r5, [sp, #28]
	movt	r1, #:upper16:.LC445
	ldr	r4, [sp, #20]
	ldr	r3, [r5, #20]
	b	.L5206
.L5212:
	mvn	r5, #21
	ldr	r7, [sp, #16]
	ldr	r4, [sp, #20]
	b	.L5159
.L5180:
	movw	r1, #:lower16:.LC446
	ldr	r7, [sp, #16]
	ldr	r5, [sp, #28]
	movt	r1, #:upper16:.LC446
	ldr	r4, [sp, #20]
	ldr	r3, [r5, #20]
	mvn	r5, #21
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L5159
.L5203:
	.syntax divided
@ 463 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_ncm.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_ncm.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 463, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L5213:
	ldr	r7, [sp, #16]
	ldr	r4, [sp, #20]
	b	.L5190
	.fnend
	.size	ncm_unwrap_ntb, .-ncm_unwrap_ntb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_wrap_ntb, %function
ncm_wrap_ntb:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	mov	r9, r0
	movw	r0, #:lower16:.LANCHOR0
	strd	r10, [sp, #24]
	movt	r0, #:upper16:.LANCHOR0
	str	lr, [sp, #32]
	ldr	r5, [r9, #176]
	.pad #20
	sub	sp, sp, #20
	ldrh	ip, [r0, #32]
	ldrh	r1, [r0, #28]
	ldrh	r0, [r0, #30]
	ldr	r8, [r5, #8]
	ldr	r3, [r5, #12]
	sub	r2, ip, #1
	rsb	ip, ip, #0
	ldr	lr, [r5, #20]
	sub	r4, r1, #1
	rsb	r1, r1, #0
	add	r2, r2, r8
	and	r2, r2, ip
	ldrb	ip, [r9, #180]	@ zero_extendqisi2
	add	r3, r3, lr, lsl #3
	sub	r8, r2, r8
	add	r3, r3, r2
	ldr	r2, [r6, #80]
	add	r4, r4, r3
	cmp	ip, #0
	and	r4, r4, r1
	ldr	r1, [r9, #112]
	moveq	r10, #0
	add	r4, r4, r0
	movne	r10, #4
	sub	r3, r4, r3
	add	r2, r4, r2
	str	r3, [sp, #4]
	add	r3, r2, r10
	cmp	r3, r1
	bhi	.L5257
	bcc	.L5258
.L5245:
	mov	fp, #0
	str	fp, [sp, #8]
.L5222:
	mov	r3, #32
	mov	r2, fp
	mov	r1, r4
	mov	r0, r6
	bl	skb_copy_expand
	mov	r7, r0
	mov	r0, r6
	bl	dev_kfree_skb_any
	cmp	r7, #0
	beq	.L5259
	mov	r1, r4
	mov	r0, r7
	bl	skb_push
	cmp	r4, #0
	mov	r6, r0
	bne	.L5260
.L5224:
	ldr	r3, [r5]
	add	ip, r6, #8
	lsr	r2, r3, #16
	strb	r3, [r6]
	ubfx	r1, r3, #8, #8
	lsr	r3, r2, #8
	strb	r1, [r6, #1]
	strb	r2, [r6, #2]
	strb	r3, [r6, #3]
	ldr	r3, [r5, #8]
	ubfx	r2, r3, #8, #8
	strb	r3, [r6, #4]
	strb	r2, [r6, #5]
	ldr	r0, [r5, #24]
	ldr	r3, [r7, #80]
	cmp	r0, #1
	add	fp, fp, r3
	beq	.L5226
	cmp	r0, #2
	bne	.L5255
	lsr	r3, fp, #16
	ubfx	r2, fp, #8, #8
	strb	fp, [r6, #8]
	lsr	r1, r3, #8
	strb	r2, [r6, #9]
	strb	r3, [r6, #10]
	strb	r1, [r6, #11]
.L5228:
	ldr	r2, [r5, #8]
	add	r1, ip, r0, lsl #1
	ldr	r3, [r5, #28]
	add	r2, r8, r2
	cmp	r3, #1
	beq	.L5230
	cmp	r3, #2
	bne	.L5255
	lsr	lr, r2, #16
	ubfx	r6, r2, #8, #8
	lsr	fp, lr, #8
	strb	lr, [r1, #2]
	strb	fp, [r1, #3]
	strb	r2, [ip, r0, lsl #1]
	strb	r6, [r1, #1]
.L5232:
	ldr	r0, [r5, #4]
	add	r3, r8, r3, lsl #1
	uxth	r6, r4
	add	r2, r1, r3
	add	fp, r2, #6
	lsr	r8, r0, #16
	ubfx	ip, r0, #8, #8
	lsr	lr, r8, #8
	strb	r8, [r2, #2]
	strb	lr, [r2, #3]
	strb	r0, [r1, r3]
	ldr	r1, [sp, #4]
	strb	ip, [r2, #1]
	ldr	r3, [r5, #8]
	sub	r3, r6, r3
	sub	r3, r3, r1
	uxth	r3, r3
	lsr	r1, r3, #8
	strb	r3, [r2, #4]
	strb	r1, [r2, #5]
	ldrb	r1, [r9, #180]	@ zero_extendqisi2
	ldr	r8, [r5, #32]
	ldr	r3, [r5, #36]
	ldr	r2, [r5, #40]
	cmp	r1, #0
	add	r8, r8, r2
	add	r8, r8, r3
	add	r9, fp, r8, lsl #1
	bne	.L5261
.L5233:
	ldr	r2, [r5, #20]
	cmp	r2, #1
	beq	.L5235
	cmp	r2, #2
	bne	.L5255
	lsr	r3, r4, #16
	lsr	r6, r6, #8
	lsr	r1, r3, #8
	strb	r3, [r9, #2]
	strb	r1, [r9, #3]
	strb	r4, [fp, r8, lsl #1]
	strb	r6, [r9, #1]
.L5237:
	ldr	r0, [r5, #20]
	add	r1, r9, r2, lsl #1
	ldr	r3, [r7, #80]
	cmp	r0, #1
	sub	r4, r3, r4
	beq	.L5239
	cmp	r0, #2
	bne	.L5255
	lsr	r3, r4, #16
	ubfx	r0, r4, #8, #8
	lsr	ip, r3, #8
	strb	r3, [r1, #2]
	strb	ip, [r1, #3]
	strb	r4, [r9, r2, lsl #1]
	strb	r0, [r1, #1]
.L5241:
	ldr	r3, [sp, #8]
	cmp	r3, #0
	bne	.L5242
.L5218:
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5258:
	ldr	r2, [r9, #88]
	ldr	r2, [r2, #28]
	ldrh	r1, [r2, #4]	@ unaligned
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	bne	.L5245
	movw	r0, #:lower16:.LC447
	mov	fp, #1
	movt	r0, #:upper16:.LC447
	bl	printk
	str	fp, [sp, #8]
	b	.L5222
.L5226:
	ubfx	r3, fp, #8, #8
	strb	fp, [r6, #8]
	strb	r3, [r6, #9]
	b	.L5228
.L5239:
	ubfx	r3, r4, #8, #8
	strb	r4, [r9, r2, lsl #1]
	strb	r3, [r1, #1]
	b	.L5241
.L5235:
	lsr	r6, r6, #8
	strb	r4, [fp, r8, lsl #1]
	strb	r6, [r9, #1]
	b	.L5237
.L5230:
	ubfx	lr, r2, #8, #8
	strb	r2, [ip, r0, lsl #1]
	strb	lr, [r1, #1]
	b	.L5232
.L5261:
	ldr	r2, [r7, #80]
	mvn	r0, #0
	ldr	r1, [r7, #172]
	sub	r2, r2, r4
	add	r1, r1, r4
	bl	crc32_le
	ldr	lr, [r7, #80]
	mvn	r2, r0
	mov	r1, r10
	ldr	r3, [r7, #172]
	lsr	ip, r2, #16
	ubfx	r0, r2, #8, #8
	lsr	r10, ip, #8
	str	r3, [sp, #4]
	add	r3, r3, lr
	str	r0, [sp, #12]
	mov	r0, r7
	strb	ip, [r3, #2]
	ldr	ip, [sp, #4]
	strb	r10, [r3, #3]
	strb	r2, [ip, lr]
	ldr	r2, [sp, #12]
	strb	r2, [r3, #1]
	bl	skb_put
	b	.L5233
.L5260:
	mov	r1, r4
	bl	__memzero
	b	.L5224
.L5257:
	mov	r0, r6
	mov	r7, #0
	bl	dev_kfree_skb_any
	b	.L5218
.L5255:
	.syntax divided
@ 445 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_ncm.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_ncm.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 445, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L5242:
	mov	r1, #1
	mov	r0, r7
	bl	skb_put
	mov	r1, #1
	bl	__memzero
	movw	r0, #:lower16:.LC449
	ldr	r1, .L5262
	ldr	r2, [r7, #80]
	movt	r0, #:upper16:.LC449
	bl	printk
	b	.L5218
.L5259:
	movw	r0, #:lower16:.LC448
	movt	r0, #:upper16:.LC448
	bl	printk
	b	.L5218
.L5263:
	.align	2
.L5262:
	.word	.LANCHOR3+3512
	.fnend
	.size	ncm_wrap_ntb, .-ncm_wrap_ntb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_start_work, %function
acc_start_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR0
	.save {lr}
	str	lr, [sp, #-4]!
	movw	r3, #:lower16:.LC450
	movt	r2, #:upper16:.LANCHOR0
	.pad #12
	sub	sp, sp, #12
	ldr	r0, [r2, #592]
	movt	r3, #:upper16:.LC450
	mov	ip, #0
	mov	r1, #2
	mov	r2, sp
	stm	sp, {r3, ip}
	add	r0, r0, #8
	bl	kobject_uevent_env
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
	.fnend
	.size	acc_start_work, .-acc_start_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_work, %function
ncm_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LC451
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	ip, #0
	str	lr, [sp, #4]
	movt	r2, #:upper16:.LC451
	.pad #16
	sub	sp, sp, #16
	movw	r3, #:lower16:.LC452
	movw	r4, #:lower16:.LANCHOR1
	ldr	r1, .L5270
	movt	r3, #:upper16:.LC452
	movt	r4, #:upper16:.LANCHOR1
	stm	sp, {r2, ip}
	movw	r0, #:lower16:.LC453
	ldrb	r2, [r4, #3636]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC453
	str	r3, [sp, #8]
	str	ip, [sp, #12]
	bl	printk
	ldrb	r3, [r4, #3636]	@ zero_extendqisi2
	mov	r1, #2
	cmp	r3, #0
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	addeq	r2, sp, #8
	ldr	r0, [r3, #772]
	movne	r2, sp
	add	r0, r0, #8
	bl	kobject_uevent_env
	add	sp, sp, #16
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5271:
	.align	2
.L5270:
	.word	.LANCHOR3+3528
	.fnend
	.size	ncm_work, .-ncm_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	macos_show, %function
macos_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	ldr	r3, [r0, #8]
	cmp	r3, #0
	beq	.L5273
	ldr	r0, [r3]
	bl	sec_get_ss_host_available
	mov	r4, r0
	bl	get_host_os_type
	cmp	r4, #1
	cmpeq	r0, #1
	mov	r3, r0
	movne	r6, #1
	beq	.L5278
.L5274:
	movw	r0, #:lower16:.LC455
	ldr	r1, .L5279
	mov	r2, r4
	movt	r0, #:upper16:.LC455
	bl	printk
.L5275:
	movw	r1, #:lower16:.LC77
	mov	r2, r6
	mov	r0, r5
	movt	r1, #:upper16:.LC77
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	sprintf
.L5273:
	movw	r0, #:lower16:.LC456
	ldr	r1, .L5279
	mvn	r6, #0
	movt	r0, #:upper16:.LC456
	bl	printk
	b	.L5275
.L5278:
	movw	r0, #:lower16:.LC454
	ldr	r1, .L5279
	str	r3, [sp, #4]
	movt	r0, #:upper16:.LC454
	mov	r6, #0
	bl	printk
	ldr	r3, [sp, #4]
	b	.L5274
.L5280:
	.align	2
.L5279:
	.word	.LANCHOR3+3540
	.fnend
	.size	macos_show, .-macos_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ss_host_available_show, %function
ss_host_available_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	ldr	r3, [r0, #8]
	cmp	r3, #0
	beq	.L5282
	ldr	r0, [r3]
	bl	sec_get_ss_host_available
	mov	r5, r0
	bl	get_host_os_type
	cmp	r5, #1
	cmpeq	r0, #1
	mov	r3, r0
	moveq	r4, #1
	movne	r4, #0
	beq	.L5287
.L5283:
	movw	r0, #:lower16:.LC455
	ldr	r1, .L5288
	mov	r2, r5
	movt	r0, #:upper16:.LC455
	bl	printk
.L5284:
	movw	r1, #:lower16:.LC77
	mov	r2, r4
	mov	r0, r6
	movt	r1, #:upper16:.LC77
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	sprintf
.L5282:
	movw	r0, #:lower16:.LC456
	ldr	r1, .L5288
	mvn	r4, #0
	movt	r0, #:upper16:.LC456
	bl	printk
	b	.L5284
.L5287:
	movw	r0, #:lower16:.LC454
	ldr	r1, .L5288
	str	r3, [sp, #4]
	movt	r0, #:upper16:.LC454
	mov	r4, #1
	bl	printk
	ldr	r3, [sp, #4]
	b	.L5283
.L5289:
	.align	2
.L5288:
	.word	.LANCHOR3+3552
	.fnend
	.size	ss_host_available_show, .-ss_host_available_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iSerial_store, %function
iSerial_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L5292
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L5297
	mov	r2, #256
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	ldr	r0, .L5297
	bl	strim
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5292:
	mvn	r0, #21
	bx	lr
.L5298:
	.align	2
.L5297:
	.word	.LANCHOR1+2220
	.fnend
	.size	iSerial_store, .-iSerial_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iProduct_store, %function
iProduct_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L5301
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L5306
	mov	r2, #256
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	ldr	r0, .L5306
	bl	strim
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5301:
	mvn	r0, #21
	bx	lr
.L5307:
	.align	2
.L5306:
	.word	.LANCHOR1+2508
	.fnend
	.size	iProduct_store, .-iProduct_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iManufacturer_store, %function
iManufacturer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L5310
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	ldr	r0, .L5315
	mov	r2, #256
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	ldr	r0, .L5315
	bl	strim
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5310:
	mvn	r0, #21
	bx	lr
.L5316:
	.align	2
.L5315:
	.word	.LANCHOR1+2764
	.fnend
	.size	iManufacturer_store, .-iManufacturer_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_aliases_store, %function
ffs_aliases_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 264
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r4, #:lower16:__stack_chk_guard
	movt	r1, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r4, #:upper16:__stack_chk_guard
	str	r8, [sp, #16]
	mov	r5, r3
	ldr	r3, [r4]
	str	lr, [sp, #20]
	ldr	r6, [r1, #3308]
	.pad #264
	sub	sp, sp, #264
	mov	r8, r2
	str	r3, [sp, #260]
	sub	r7, r6, #496
	mov	r0, r7
	bl	mutex_lock
	ldrb	r3, [r6, #-504]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L5322
	mov	r1, r8
	mov	r2, #256
	add	r0, sp, #4
	bl	strlcpy
	add	r0, sp, #4
	bl	strim
	mov	r1, r0
	mov	r2, #256
	sub	r0, r6, #324
	bl	strlcpy
	mov	r0, r7
	bl	mutex_unlock
	mov	r0, r5
.L5317:
	ldr	r2, [sp, #260]
	ldr	r3, [r4]
	cmp	r2, r3
	bne	.L5323
	add	sp, sp, #264
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5322:
	mov	r0, r7
	bl	mutex_unlock
	mvn	r0, #15
	b	.L5317
.L5323:
	bl	__stack_chk_fail
	.fnend
	.size	ffs_aliases_store, .-ffs_aliases_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	functions_store, %function
functions_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 552
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r1, #:lower16:__stack_chk_guard
	mov	r5, r2
	strd	r6, [sp, #8]
	movt	r1, #:upper16:__stack_chk_guard
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #556
	sub	sp, sp, #556
	str	r3, [sp, #16]
	ldr	r3, [r1]
	str	r1, [sp, #20]
	str	r3, [sp, #548]
	bl	dev_get_drvdata
	add	r3, r0, #24
	mov	r9, r0
	add	fp, r0, #508
	mov	r0, r3
	str	r3, [sp, #12]
	bl	mutex_lock
	ldrb	r4, [r9, #16]	@ zero_extendqisi2
	cmp	r4, #0
	bne	.L5370
	ldr	r7, [r9, #508]
	cmp	fp, r7
	sub	r7, r7, #120
	beq	.L5328
.L5327:
	mov	r8, r7
	ldr	r6, [r8, #112]!
	cmp	r6, r8
	beq	.L5330
.L5329:
	mov	r0, r6
	ldr	r3, [r6, #-4]!
	str	r4, [r3, #20]
	bl	list_del
	mov	r0, r6
	bl	kfree
	ldr	r6, [r7, #112]
	cmp	r6, r8
	bne	.L5329
.L5330:
	ldr	r3, [r7, #120]
	str	r8, [r7, #112]
	str	r8, [r7, #116]
	cmp	fp, r3
	sub	r7, r3, #120
	bne	.L5327
.L5328:
	mov	r1, r5
	mov	r2, #256
	add	r0, sp, #36
	bl	strlcpy
	add	r0, sp, #36
	bl	strim
	cmp	r0, #0
	str	r0, [sp, #28]
	beq	.L5351
	movw	r3, #:lower16:.LC457
	movw	r5, #:lower16:.LC459
	str	fp, [sp]
	movt	r3, #:upper16:.LC457
	movt	r5, #:upper16:.LC459
	mov	r10, #0
	stmib	sp, {r3, fp}
.L5344:
	add	r0, sp, #28
	ldr	r1, [sp, #4]
	bl	strsep
	cmp	r0, #0
	str	r0, [sp, #24]
	beq	.L5332
	ldr	r3, [sp]
	ldr	r2, [sp, #8]
	ldr	r3, [r3]
	cmp	r3, r2
	beq	.L5333
	sub	r7, r3, #120
	str	r3, [sp]
.L5334:
	cmp	r0, #0
	movw	fp, #:lower16:.LC462
	movt	fp, #:upper16:.LC462
	beq	.L5332
.L5343:
	mov	r1, r5
	add	r0, sp, #24
	add	r8, sp, #292
	bl	strsep
	mov	r6, r0
	mov	r2, #256
	mov	r0, r8
	add	r1, r9, #196
	bl	strlcpy
	add	r4, sp, #552
	str	r8, [r4, #-520]!
.L5339:
	mov	r1, r5
	mov	r0, r4
	bl	strsep
	subs	r1, r0, #0
	beq	.L5337
	mov	r0, r6
	bl	strcmp
	cmp	r0, #0
	beq	.L5338
.L5337:
	ldr	r3, [sp, #32]
	cmp	r3, #0
	bne	.L5339
	mov	r2, r6
	mov	r1, r7
	mov	r0, r9
	bl	android_enable_function
	cmp	r0, #0
	bne	.L5371
.L5342:
	ldr	r0, [sp, #24]
	cmp	r0, #0
	bne	.L5343
.L5332:
	movw	r2, #:lower16:.LC463
	mov	r1, r7
	movt	r2, #:upper16:.LC463
	mov	r0, r9
	bl	android_enable_function
	ldr	r3, [sp, #28]
	cmp	r3, #0
	bne	.L5344
	ldr	r5, [sp]
	ldr	fp, [sp, #8]
	b	.L5369
.L5346:
	mov	r0, r4
	sub	r4, r4, #120
	bl	list_del
	ldr	r3, [r9, #516]
	mov	r0, r4
	sub	r3, r3, #1
	str	r3, [r9, #516]
	bl	kfree
.L5369:
	ldr	r4, [r5]
	cmp	r4, fp
	bne	.L5346
	ldr	r0, [sp, #12]
	bl	mutex_unlock
	ldr	r0, [sp, #16]
.L5324:
	ldr	r3, [sp, #20]
	ldr	r2, [sp, #548]
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L5372
	add	sp, sp, #556
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5338:
	cmp	r10, #0
	beq	.L5373
.L5348:
	mov	r10, #1
	b	.L5342
.L5373:
	movw	r2, #:lower16:.LC460
	mov	r1, r7
	movt	r2, #:upper16:.LC460
	mov	r0, r9
	bl	android_enable_function
	subs	r2, r0, #0
	beq	.L5348
	movw	r0, #:lower16:.LC461
	ldr	r1, .L5375
	movt	r0, #:upper16:.LC461
	bl	printk
	b	.L5342
.L5333:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L5352
	mov	r2, #128
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r7, r0, #0
	beq	.L5374
.L5335:
	ldr	ip, [r9]
	movw	r1, #:lower16:android_unbind_config
	add	r3, r7, #112
	ldr	r2, [r9, #516]
	movt	r1, #:upper16:android_unbind_config
	mov	r0, #12480
	add	r2, r2, #1
	str	r2, [r9, #516]
	ldr	r2, [sp, #8]
	str	ip, [r7]
	str	r1, [r7, #12]
	ldr	r1, [r9, #516]
	strb	r1, [r7, #20]
	strh	r0, [r7, #22]	@ movhi
	add	r0, r7, #120
	str	r3, [r7, #112]
	str	r3, [r7, #116]
	ldr	r1, [r9, #512]
	bl	__list_add
	ldr	r3, [sp]
	ldr	r0, [sp, #24]
	ldr	r3, [r3]
	str	r3, [sp]
	b	.L5334
.L5352:
	mov	r7, #16
	b	.L5335
.L5351:
	mov	r5, fp
	str	fp, [sp]
	b	.L5369
.L5374:
	ldr	r2, .L5375+4
	movw	r0, #:lower16:.LC458
	mvn	r7, #11
	movt	r0, #:upper16:.LC458
	mov	r1, r2
	bl	printk
	ldr	r3, [sp]
	ldr	r0, [sp, #24]
	ldr	r3, [r3]
	str	r3, [sp]
	b	.L5334
.L5371:
	mov	r3, r0
	mov	r2, r6
	ldr	r1, .L5375
	mov	r0, fp
	bl	printk
	b	.L5342
.L5372:
	bl	__stack_chk_fail
.L5370:
	ldr	r0, [sp, #12]
	bl	mutex_unlock
	mvn	r0, #15
	b	.L5324
.L5376:
	.align	2
.L5375:
	.word	.LANCHOR3+3600
	.word	.LANCHOR3+3576
	.fnend
	.size	functions_store, .-functions_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_bind, %function
android_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r1, .L5487
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	ldr	r4, [r8, #3312]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	fp, [r0]
	movw	r0, #:lower16:.LC464
	movt	r0, #:upper16:.LC464
	str	r7, [r4, #-512]
	bl	printk
	ldr	r3, [fp]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L5378
	mov	r1, #0
	mov	r0, fp
	blx	r3
.L5378:
	ldr	r3, [r8, #3640]
	cmp	r3, #1
	beq	.L5379
.L5385:
	ldrb	r3, [r7, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L5381
	add	r2, r3, #1
	movw	r4, #:lower16:.LANCHOR0
	uxtb	r2, r2
	movt	r4, #:upper16:.LANCHOR0
	cmp	r2, #254
	strb	r2, [r4, #150]
	strb	r2, [r4, #972]
	strb	r2, [r7, #48]
	beq	.L5381
	add	r3, r3, #2
	movw	r1, #:lower16:.LC469
	ldr	r0, .L5487+4
	uxtb	r3, r3
	movt	r1, #:upper16:.LC469
	mov	r2, #255
	strb	r3, [r7, #48]
	strb	r3, [r4, #980]
	strb	r3, [r4, #151]
	bl	strlcpy
	movw	r1, #:lower16:.LC469
	mov	r2, #255
	ldr	r0, .L5487+8
	movt	r1, #:upper16:.LC469
	bl	strlcpy
	movw	r1, #:lower16:.LC470
	mov	r2, #255
	ldr	r0, .L5487+12
	movt	r1, #:upper16:.LC470
	bl	strlcpy
	ldrb	r3, [r7, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L5381
	add	r3, r3, #1
	movw	r0, #:lower16:.LC471
	uxtb	r3, r3
	movt	r0, #:upper16:.LC471
	strb	r3, [r7, #48]
	ldr	r5, [fp, #28]
	strb	r3, [r4, #152]
	strb	r3, [r4, #988]
	mov	r1, r5
	bl	strcmp
	cmp	r0, #0
	bne	.L5482
	movw	r3, #513
.L5407:
	strh	r3, [r4, #148]	@ movhi
.L5408:
	mov	r3, #4
	mov	r6, #0
	str	r3, [r8, #3648]
.L5377:
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5482:
	movw	r0, #:lower16:.LC472
	mov	r1, r5
	movt	r0, #:upper16:.LC472
	bl	strcmp
	cmp	r0, #0
	beq	.L5412
	movw	r0, #:lower16:.LC473
	mov	r1, r5
	movt	r0, #:upper16:.LC473
	bl	strcmp
	cmp	r0, #0
	beq	.L5413
	movw	r0, #:lower16:.LC474
	mov	r1, r5
	movt	r0, #:upper16:.LC474
	bl	strcmp
	cmp	r0, #0
	beq	.L5414
	movw	r0, #:lower16:.LC475
	mov	r1, r5
	movt	r0, #:upper16:.LC475
	bl	strcmp
	cmp	r0, #0
	beq	.L5415
	movw	r0, #:lower16:.LC476
	mov	r1, r5
	movt	r0, #:upper16:.LC476
	bl	strcmp
	cmp	r0, #0
	beq	.L5416
	movw	r0, #:lower16:.LC477
	mov	r1, r5
	movt	r0, #:upper16:.LC477
	bl	strcmp
	cmp	r0, #0
	beq	.L5417
	movw	r0, #:lower16:.LC478
	mov	r1, r5
	movt	r0, #:upper16:.LC478
	bl	strcmp
	cmp	r0, #0
	beq	.L5418
	movw	r0, #:lower16:.LC479
	mov	r1, r5
	movt	r0, #:upper16:.LC479
	bl	strcmp
	cmp	r0, #0
	beq	.L5419
	movw	r0, #:lower16:.LC480
	mov	r1, r5
	movt	r0, #:upper16:.LC480
	bl	strcmp
	cmp	r0, #0
	beq	.L5420
	movw	r0, #:lower16:.LC481
	mov	r1, r5
	movt	r0, #:upper16:.LC481
	bl	strcmp
	cmp	r0, #0
	beq	.L5421
	movw	r0, #:lower16:.LC482
	mov	r1, r5
	movt	r0, #:upper16:.LC482
	bl	strcmp
	cmp	r0, #0
	beq	.L5422
	movw	r0, #:lower16:.LC483
	mov	r1, r5
	movt	r0, #:upper16:.LC483
	bl	strcmp
	cmp	r0, #0
	beq	.L5423
	movw	r0, #:lower16:.LC484
	mov	r1, r5
	movt	r0, #:upper16:.LC484
	bl	strcmp
	cmp	r0, #0
	beq	.L5424
	movw	r0, #:lower16:.LC485
	mov	r1, r5
	movt	r0, #:upper16:.LC485
	bl	strcmp
	cmp	r0, #0
	beq	.L5425
	movw	r0, #:lower16:.LC486
	mov	r1, r5
	movt	r0, #:upper16:.LC486
	bl	strcmp
	cmp	r0, #0
	beq	.L5426
	movw	r0, #:lower16:.LC487
	mov	r1, r5
	movt	r0, #:upper16:.LC487
	bl	strcmp
	cmp	r0, #0
	beq	.L5427
	movw	r0, #:lower16:.LC488
	mov	r1, r5
	movt	r0, #:upper16:.LC488
	bl	strcmp
	cmp	r0, #0
	beq	.L5428
	movw	r0, #:lower16:.LC489
	mov	r1, r5
	movt	r0, #:upper16:.LC489
	bl	strcmp
	cmp	r0, #0
	beq	.L5429
	movw	r0, #:lower16:.LC490
	mov	r1, r5
	movt	r0, #:upper16:.LC490
	bl	strcmp
	cmp	r0, #0
	beq	.L5430
	movw	r0, #:lower16:.LC491
	mov	r1, r5
	movt	r0, #:upper16:.LC491
	bl	strcmp
	cmp	r0, #0
	beq	.L5431
	movw	r0, #:lower16:.LC492
	mov	r1, r5
	movt	r0, #:upper16:.LC492
	bl	strcmp
	cmp	r0, #0
	beq	.L5432
	movw	r0, #:lower16:.LC493
	mov	r1, r5
	movt	r0, #:upper16:.LC493
	bl	strcmp
	cmp	r0, #0
	beq	.L5433
	movw	r0, #:lower16:.LC494
	mov	r1, r5
	movt	r0, #:upper16:.LC494
	bl	strcmp
	cmp	r0, #0
	beq	.L5434
	movw	r0, #:lower16:.LC495
	mov	r1, r5
	movt	r0, #:upper16:.LC495
	bl	strcmp
	cmp	r0, #0
	beq	.L5435
	movw	r0, #:lower16:.LC496
	mov	r1, r5
	movt	r0, #:upper16:.LC496
	bl	strcmp
	cmp	r0, #0
	beq	.L5436
	movw	r0, #:lower16:.LC497
	mov	r1, r5
	movt	r0, #:upper16:.LC497
	bl	strcmp
	cmp	r0, #0
	moveq	r3, #564
	beq	.L5407
	ldr	r2, .L5487+16
	movw	r0, #:lower16:.LC498
	mov	r3, r5
	movt	r0, #:upper16:.LC498
	sub	r1, r2, #40
	bl	printk
	movw	r3, #39321
	movt	r3, 65535
	strh	r3, [r4, #148]	@ movhi
	b	.L5408
.L5412:
	movw	r3, #514
	b	.L5407
.L5379:
	ldr	r1, [r4, #-516]
	ldr	r3, [r8, #3308]
	ldr	r2, .L5487+20
	mov	r0, r1
	sub	r1, r3, #520
	cmp	r3, r2
	str	r1, [sp, #8]
	beq	.L5382
	ldr	r3, [r3, #-512]
	cmp	r7, r3
	bne	.L5383
	b	.L5382
.L5386:
	ldr	r3, [r3, #-512]
	cmp	r7, r3
	beq	.L5480
.L5383:
	ldr	r3, [r1, #520]
	cmp	r3, r2
	sub	r1, r3, #520
	bne	.L5386
.L5480:
	str	r1, [sp, #8]
.L5382:
	ldr	r4, [r0]
	cmp	r4, #0
	beq	.L5385
	movw	r5, #:lower16:.LC465
	mov	r9, #1
	str	fp, [sp, #12]
	movt	r5, #:upper16:.LC465
	mov	r10, r0
.L5384:
	mov	r1, r5
	mov	r0, #208
	ldr	r2, [r4]
	bl	kasprintf
	cmp	r0, #0
	mov	r3, #0
	str	r0, [r4, #12]
	str	r3, [r4, #20]
	beq	.L5410
	ldr	r3, [sp, #8]
	mov	r2, r9
	ldr	r1, [r3, #12]
	str	r0, [sp]
	mov	r3, r4
	ldr	r0, [r8, #3644]
	bl	device_create
	cmn	r0, #4096
	str	r0, [r4, #8]
	bhi	.L5483
	ldr	r3, [r4, #24]
	cmp	r3, #0
	beq	.L5390
	mov	r1, r7
	mov	r0, r4
	blx	r3
	cmp	r0, #0
	bne	.L5484
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L5394
	ldr	r1, [r2]
	add	r6, r2, #4
	cmp	r1, #0
	bne	.L5481
	b	.L5394
.L5485:
	cmp	r0, #0
	bne	.L5477
	mov	r6, fp
.L5481:
	ldr	r0, [r4, #8]
.L5398:
	mov	fp, r6
	bl	device_create_file
	ldr	r1, [fp], #4
	cmp	r1, #0
	bne	.L5485
	cmp	r0, #0
	bne	.L5477
.L5394:
	add	r9, r9, #1
	add	r3, r10, r9, lsl #2
	ldr	r4, [r3, #-4]
	cmp	r4, #0
	bne	.L5384
	ldr	fp, [sp, #12]
	b	.L5385
.L5413:
	movw	r3, #515
	b	.L5407
.L5477:
	ldr	r2, .L5487+24
	mov	r10, r6
	mov	r6, r0
	movw	r0, #:lower16:.LC468
	ldr	r3, [r4]
	mov	r5, fp
	movt	r0, #:upper16:.LC468
	ldr	fp, [sp, #12]
	sub	r9, r10, #4
	mov	r1, r2
	bl	printk
	ldr	r3, [r4, #16]
	ldr	r1, [r5, #-8]
	cmp	r9, r3
	beq	.L5400
.L5399:
	ldr	r0, [r4, #8]
	bl	device_remove_file
	ldr	r1, [r9], #-4
	ldr	r3, [r4, #16]
	cmp	r9, r3
	bne	.L5399
.L5400:
	ldr	r3, [r4, #28]
	cmp	r3, #0
	beq	.L5392
	mov	r0, r4
	blx	r3
.L5392:
	ldr	r3, [r4, #8]
	ldr	r0, [r8, #3644]
	ldr	r1, [r3, #288]
	bl	device_destroy
	b	.L5389
.L5483:
	ldr	r2, .L5487+24
	movw	r0, #:lower16:.LC466
	movt	r0, #:upper16:.LC466
	ldr	r3, [r4, #12]
	ldr	fp, [sp, #12]
	mov	r1, r2
	bl	printk
	ldr	r6, [r4, #8]
.L5389:
	mov	r3, #0
	ldr	r0, [r4, #12]
	str	r3, [r4, #8]
	bl	kfree
.L5387:
	ldr	r3, [sp, #8]
	ldr	r9, [r3, #4]
	sub	r9, r9, #4
.L5401:
	ldr	r4, [r9, #4]!
	cmp	r4, #0
	beq	.L5486
.L5405:
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L5401
	ldr	r1, [r3, #288]
	ldr	r0, [r8, #3644]
	bl	device_destroy
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #28]
	cmp	r3, #0
	beq	.L5403
	mov	r0, r4
	blx	r3
.L5403:
	ldr	r5, [r4, #16]
	cmp	r5, #0
	beq	.L5401
	ldr	r1, [r5]
	add	r5, r5, #4
	cmp	r1, #0
	beq	.L5401
.L5404:
	ldr	r0, [r4, #8]
	bl	device_remove_file
	ldr	r1, [r5], #4
	cmp	r1, #0
	bne	.L5404
	ldr	r4, [r9, #4]!
	cmp	r4, #0
	bne	.L5405
.L5486:
	cmp	r6, #0
	bne	.L5377
	b	.L5385
.L5390:
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L5394
	ldr	r1, [r2]
	add	r6, r2, #4
	cmp	r1, #0
	bne	.L5398
	b	.L5394
.L5381:
	mvn	r6, #18
	b	.L5377
.L5414:
	movw	r3, #518
	b	.L5407
.L5415:
	mov	r3, #520
	b	.L5407
.L5410:
	mvn	r6, #11
	ldr	fp, [sp, #12]
	b	.L5387
.L5416:
	movw	r3, #529
	b	.L5407
.L5417:
	movw	r3, #530
	b	.L5407
.L5418:
	movw	r3, #531
	b	.L5407
.L5419:
	mov	r3, #532
	b	.L5407
.L5420:
	movw	r3, #534
	b	.L5407
.L5421:
	mov	r3, #536
	b	.L5407
.L5484:
	ldr	r2, .L5487+24
	mov	r6, r0
	movw	r0, #:lower16:.LC467
	ldr	r3, [r4]
	movt	r0, #:upper16:.LC467
	ldr	fp, [sp, #12]
	mov	r1, r2
	bl	printk
	b	.L5392
.L5422:
	movw	r3, #537
	b	.L5407
.L5435:
	movw	r3, #562
	b	.L5407
.L5434:
	movw	r3, #561
	b	.L5407
.L5433:
	mov	r3, #560
	b	.L5407
.L5432:
	movw	r3, #553
	b	.L5407
.L5431:
	mov	r3, #552
	b	.L5407
.L5430:
	movw	r3, #551
	b	.L5407
.L5436:
	movw	r3, #563
	b	.L5407
.L5423:
	mov	r3, #544
	b	.L5407
.L5425:
	movw	r3, #546
	b	.L5407
.L5424:
	movw	r3, #545
	b	.L5407
.L5429:
	movw	r3, #550
	b	.L5407
.L5428:
	movw	r3, #549
	b	.L5407
.L5427:
	mov	r3, #548
	b	.L5407
.L5426:
	movw	r3, #547
	b	.L5407
.L5488:
	.align	2
.L5487:
	.word	.LANCHOR3+3616
	.word	.LANCHOR1+2764
	.word	.LANCHOR1+2508
	.word	.LANCHOR1+2220
	.word	.LANCHOR3+3656
	.word	.LANCHOR1+3308
	.word	.LANCHOR3+3632
	.fnend
	.size	android_bind, .-android_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_work, %function
android_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r1, #:lower16:.LC499
	movw	r2, #:lower16:.LC500
	strd	r6, [sp, #8]
	movt	r1, #:upper16:.LC499
	movt	r2, #:upper16:.LC500
	strd	r8, [sp, #16]
	movw	r3, #:lower16:.LC502
	movw	ip, #:lower16:.LC501
	strd	r10, [sp, #24]
	movt	r3, #:upper16:.LC502
	movt	ip, #:upper16:.LC501
	str	lr, [sp, #32]
	ldr	r5, [r0, #-172]
	.pad #68
	sub	sp, sp, #68
	mov	r4, r0
	str	r1, [sp, #16]
	movw	r1, #:lower16:.LC503
	str	r2, [sp, #24]
	movw	r2, #:lower16:.LC504
	movt	r1, #:upper16:.LC503
	movt	r2, #:upper16:.LC504
	add	r6, r5, #60
	str	ip, [sp, #32]
	str	r3, [sp, #40]
	mov	r3, #0
	mov	r0, r6
	str	r3, [sp, #20]
	str	r3, [sp, #28]
	str	r3, [sp, #36]
	str	r3, [sp, #44]
	str	r1, [sp, #48]
	str	r3, [sp, #52]
	strd	r2, [sp, #56]
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r4, #-129]	@ zero_extendqisi2
	mov	r10, r0
	ldrb	r7, [r4, #-130]	@ zero_extendqisi2
	ldrb	r9, [r4, #-132]	@ zero_extendqisi2
	cmp	r3, r7
	ldr	r3, [r5, #12]
	beq	.L5490
	cmp	r3, #0
	beq	.L5491
	movw	r1, #:lower16:.LC505
	mov	r2, #3
	movt	r1, #:upper16:.LC505
	sub	r0, r4, #128
	bl	strncmp
	cmp	r0, #0
	beq	.L5492
	cmp	r7, #0
	eor	r3, r7, #1
	moveq	r2, #4
	addeq	r8, sp, #48
	beq	.L5494
	mov	r2, #3
	add	r8, sp, #40
.L5494:
	movw	r5, #:lower16:.LANCHOR1
	mov	r1, r10
	strb	r9, [r4, #-131]
	movt	r5, #:upper16:.LANCHOR1
	mov	r0, r6
	strb	r7, [r4, #-129]
	str	r3, [sp, #12]
	str	r2, [r5, #3652]
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [r4, #-136]
	cmp	r2, #0
	beq	.L5496
	add	fp, sp, #24
	ldr	r3, [sp, #12]
	b	.L5500
.L5490:
	cmp	r3, #0
	beq	.L5491
	movw	r5, #:lower16:.LANCHOR1
	mov	r3, #2
	strb	r9, [r4, #-131]
	movt	r5, #:upper16:.LANCHOR1
	mov	r1, r0
	mov	r0, r6
	str	r3, [r5, #3652]
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [r5, #3656]
	cmp	r6, #2
	beq	.L5495
	add	r8, sp, #32
.L5496:
	ldr	r3, [r5, #3652]
	sub	r3, r3, #3
	cmp	r3, #1
	bls	.L5514
	ldr	r0, [r4, #-168]
	mov	r2, r8
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env
.L5515:
	ldr	r3, [r5, #3652]
	str	r3, [r5, #3656]
.L5514:
	ldr	r2, .L5553
	movw	r0, #:lower16:.LC507
	movt	r0, #:upper16:.LC507
	ldr	r3, [r8]
	mov	r1, r2
	bl	printk
.L5489:
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5492:
	cmp	r7, #0
	bne	.L5551
	movw	r5, #:lower16:.LANCHOR1
	mov	r3, #4
	strb	r9, [r4, #-131]
	movt	r5, #:upper16:.LANCHOR1
	mov	r1, r10
	strb	r7, [r4, #-129]
	mov	r0, r6
	add	r8, sp, #48
	str	r3, [r5, #3652]
	bl	_raw_spin_unlock_irqrestore
	b	.L5496
.L5491:
	ldrb	r3, [r4, #-131]	@ zero_extendqisi2
	cmp	r3, r9
	beq	.L5497
	cmp	r9, #0
	movw	r5, #:lower16:.LANCHOR1
	bne	.L5498
	movt	r5, #:upper16:.LANCHOR1
	add	r8, sp, #16
	add	fp, sp, #24
	str	r9, [r5, #3652]
.L5509:
	mov	r1, r10
	mov	r0, r6
	strb	r9, [r4, #-131]
	strb	r7, [r4, #-129]
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [r4, #-136]
	cmp	r2, #0
	movne	r3, #0
	beq	.L5499
.L5500:
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldr	r1, [r6, #1004]
	cmp	r1, r3
	beq	.L5499
	ldr	r1, [r2, #4]
	cmp	r1, #0
	beq	.L5499
.L5520:
	cmp	r3, #0
	sub	r0, r4, #120
	str	r3, [sp, #12]
	addne	r1, r1, #1
	mvneq	r1, #0
	bl	pm_qos_update_request
	ldr	r3, [sp, #12]
	str	r3, [r6, #1004]
.L5499:
	cmp	r8, fp
	bne	.L5496
.L5501:
	ldr	r3, [r5, #3656]
	cmp	r3, #0
	bne	.L5552
.L5550:
	ldr	r3, [r5, #3652]
	sub	r3, r3, #3
	cmp	r3, #1
	movls	r8, fp
	bls	.L5514
	ldr	r0, [r4, #-168]
	mov	r2, fp
	mov	r1, #2
	mov	r8, fp
	add	r0, r0, #8
	bl	kobject_uevent_env
	ldr	r0, [r4, #-168]
	add	r2, sp, #56
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env
	b	.L5515
.L5497:
	mov	r1, r10
	mov	r0, r6
	strb	r7, [r4, #-129]
	bl	_raw_spin_unlock_irqrestore
	ldrb	r1, [r4, #-131]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC506
	ldr	r2, .L5553
	movt	r0, #:upper16:.LC506
	ldr	ip, [r5, #12]
	ldrb	r3, [r4, #-132]	@ zero_extendqisi2
	stm	sp, {r1, ip}
	mov	r1, r2
	bl	printk
	b	.L5489
.L5498:
	mov	r8, #1
	movt	r5, #:upper16:.LANCHOR1
	movw	r1, #:lower16:.LC505
	mov	r2, #3
	movt	r1, #:upper16:.LC505
	sub	r0, r4, #128
	str	r8, [r5, #3652]
	bl	strncmp
	cmp	r0, #0
	addeq	fp, sp, #24
	moveq	r8, fp
	beq	.L5509
	mov	r1, r10
	mov	r0, r6
	strb	r8, [r4, #-131]
	strb	r7, [r4, #-129]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-136]
	cmp	r3, #0
	beq	.L5548
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldr	r2, [r6, #1004]
	cmp	r2, #1
	beq	.L5548
	ldr	r1, [r3, #4]
	cmp	r1, #0
	beq	.L5548
	add	fp, sp, #24
	mov	r3, r8
	mov	r8, fp
	b	.L5520
.L5551:
	mov	r2, #1
	movw	r5, #:lower16:.LANCHOR1
	strb	r9, [r4, #-131]
	movt	r5, #:upper16:.LANCHOR1
	mov	r3, #3
	mov	r1, r10
	mov	r0, r6
	strb	r2, [r4, #-129]
	add	r8, sp, #40
	str	r3, [r5, #3652]
	bl	_raw_spin_unlock_irqrestore
	b	.L5496
.L5548:
	add	fp, sp, #24
	b	.L5501
.L5495:
	ldr	r2, .L5553
	movw	r0, #:lower16:.LC508
	movt	r0, #:upper16:.LC508
	mov	r1, r2
	bl	printk
	ldr	r0, [r4, #-168]
	add	r2, sp, #16
	mov	r1, r6
	add	r0, r0, #8
	bl	kobject_uevent_env
	ldr	r3, [r5, #3652]
	sub	r3, r3, #3
	cmp	r3, #1
	addls	r8, sp, #32
	bls	.L5514
	ldr	r0, [r4, #-168]
	add	r2, sp, #32
	mov	r1, r6
	mov	r8, r2
	add	r0, r0, #8
	bl	kobject_uevent_env
	b	.L5515
.L5552:
	ldr	r2, .L5553
	movw	r0, #:lower16:.LC508
	movt	r0, #:upper16:.LC508
	mov	r1, r2
	bl	printk
	ldr	r0, [r4, #-168]
	add	r2, sp, #16
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env
	b	.L5550
.L5554:
	.align	2
.L5553:
	.word	.LANCHOR3+3672
	.fnend
	.size	android_work, .-android_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	hid_function_cleanup, %function
hid_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	b	ghid_cleanup
	.fnend
	.size	hid_function_cleanup, .-hid_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	hid_function_init, %function
hid_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r1]
	mov	r1, #2
	b	ghid_setup
	.fnend
	.size	hid_function_init, .-hid_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_send_hid_event, %function
acc_complete_send_hid_event:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, [r1, #32]
	ldr	ip, [r1, #44]
	ldr	r3, [r1, #48]
	cmp	ip, #0
	bne	.L5561
	mov	r2, r1
	.save {lr}
	str	lr, [sp, #-4]!
	mov	lr, #1
	.pad #12
	sub	sp, sp, #12
	ldr	r2, [r2]
	mov	r1, ip
	ldr	r0, [r0, #8]
	str	lr, [sp]
	bl	hid_report_raw_event
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L5561:
	movw	r0, #:lower16:.LC509
	mov	r1, ip
	movt	r0, #:upper16:.LC509
	b	printk
	.fnend
	.size	acc_complete_send_hid_event, .-acc_complete_send_hid_event
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_work, %function
acc_hid_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r3, #2488]
	.pad #28
	sub	sp, sp, #28
	add	r9, sp, #8
	str	r9, [sp, #8]
	add	r7, r6, #88
	mov	r8, r6
	str	r9, [sp, #12]
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r8, #1776]!
	mov	r10, r0
	cmp	r5, r8
	ldr	r4, [r5]
	bne	.L5563
	b	.L5564
.L5565:
	cmp	r4, r8
	ldr	r3, [r4]
	beq	.L5564
.L5566:
	mov	r5, r4
	mov	r4, r3
.L5563:
	ldr	r3, [r5, #24]
	ldr	r2, [r5, #28]
	cmp	r2, r3
	bne	.L5565
	mov	r0, r5
	bl	__list_del_entry
	ldr	r2, [sp, #8]
	mov	r0, r5
	mov	r1, r9
	bl	__list_add
	cmp	r4, r8
	ldr	r3, [r4]
	bne	.L5566
.L5564:
	ldr	r2, [r6, #1784]
	add	r3, r6, #1776
	add	r3, r3, #8
	cmp	r3, r2
	addeq	r8, sp, #16
	streq	r8, [sp, #16]
	streq	r8, [sp, #20]
	beq	.L5568
	ldr	r1, [r6, #1788]
	add	r8, sp, #24
	str	r2, [r8, #-8]!
	str	r1, [sp, #20]
	str	r8, [r2, #4]
	ldr	r2, [sp, #20]
	str	r8, [r2]
	str	r3, [r6, #1784]
	str	r3, [r6, #1788]
.L5568:
	mov	r1, r10
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r4, [sp, #8]
	cmp	r4, r9
	ldr	r5, [r4]
	beq	.L5569
	movw	r3, #:lower16:.LC511
	movw	r10, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LC511
	movt	r10, #:upper16:.LANCHOR0
	str	r3, [sp, #4]
	b	.L5575
.L5580:
	mov	r5, r3
.L5575:
	bl	hid_allocate_device
	cmn	r0, #4096
	mov	fp, r0
	mvn	r2, #0
	mov	r1, #3
	bhi	.L5584
	ldr	r3, .L5586
	strh	r1, [r0, #32]	@ movhi
	ldr	ip, [r10, #592]
	str	r2, [r0, #36]
	str	r2, [r0, #40]
	str	r4, [r0, #3848]
	str	ip, [r0, #3200]
	str	r3, [r0, #3548]
	bl	hid_add_device
	subs	r1, r0, #0
	streq	fp, [r4, #8]
	bne	.L5585
.L5572:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	mov	r0, r4
	bl	__list_del_entry
	add	r1, r6, #1760
	mov	r0, r4
	ldr	r2, [r6, #1768]
	add	r1, r1, #8
	bl	__list_add
	mov	r1, fp
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L5574:
	cmp	r5, r9
	mov	r4, r5
	ldr	r3, [r5]
	bne	.L5580
.L5569:
	ldr	r4, [sp, #16]
	cmp	r4, r8
	ldr	r5, [r4]
	bne	.L5576
	b	.L5562
.L5579:
	mov	r4, r5
	mov	r5, r3
.L5576:
	mov	r0, r4
	bl	list_del
	ldr	r3, [r4, #8]
	subs	r0, r3, #0
	beq	.L5578
	bl	hid_destroy_device
.L5578:
	ldr	r0, [r4, #20]
	bl	kfree
	mov	r0, r4
	bl	kfree
	cmp	r5, r8
	ldr	r3, [r5]
	bne	.L5579
.L5562:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5584:
	cmp	r0, #0
	beq	.L5572
	b	.L5571
.L5585:
	movw	r0, #:lower16:.LC510
	movt	r0, #:upper16:.LC510
	bl	printk
	mov	r0, fp
	bl	hid_destroy_device
.L5571:
	mov	r1, r4
	ldr	r0, [sp, #4]
	bl	printk
	ldr	r0, [r4, #20]
	bl	kfree
	mov	r0, r4
	bl	kfree
	b	.L5574
.L5587:
	.align	2
.L5586:
	.word	.LANCHOR0+1008
	.fnend
	.size	acc_hid_work, .-acc_hid_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_parse, %function
acc_hid_parse:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #3848]
	ldr	r1, [r3, #20]
	ldr	r2, [r3, #24]
	bl	hid_parse_report
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
	.fnend
	.size	acc_hid_parse, .-acc_hid_parse
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_show_file, %function
fsg_show_file:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	mov	r6, r0
	bl	down_read
	ldr	r0, [r4, #-48]
	cmp	r0, #0
	moveq	r4, r0
	strbeq	r0, [r5]
	beq	.L5593
	add	r0, r0, #8
	movw	r2, #4095
	mov	r1, r5
	bl	d_path
	cmn	r0, #4096
	mov	r4, r0
	bhi	.L5593
	bl	strlen
	mov	r7, r0
	mov	r2, r0
	mov	r1, r4
	mov	r0, r5
	bl	memmove
	add	r4, r7, #1
	mov	r2, #10
	mov	r3, #0
	strb	r2, [r5, r7]
	strb	r3, [r5, r4]
.L5593:
	mov	r0, r6
	bl	up_read
	ldrd	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	fsg_show_file, .-fsg_show_file
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_store_ro, %function
fsg_store_ro:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r2
	strd	r6, [sp, #8]
	mov	r7, r3
	mov	r6, r0
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	mov	r5, r0
	add	r2, sp, #4
	mov	r0, r4
	mov	r1, #2
	bl	kstrtouint
	subs	r4, r0, #0
	beq	.L5605
.L5595:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L5605:
	mov	r0, r5
	bl	down_read
	ldr	r3, [r6, #-48]
	cmp	r3, #0
	beq	.L5597
	ldr	r0, .L5608
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	mvneq	r4, #15
	bne	.L5606
.L5598:
	mov	r0, r5
	bl	up_read
	b	.L5595
.L5597:
	ldr	r3, [sp, #4]
	ldrb	r2, [r6, #-24]	@ zero_extendqisi2
	ldr	r0, .L5608+4
	and	r3, r3, #1
	uxtb	r1, r3
	bfi	r2, r1, #1, #1
	bfi	r2, r1, #0, #1
	strb	r2, [r6, #-24]
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L5607
.L5599:
	mov	r4, r7
	b	.L5598
.L5606:
	movw	r2, #:lower16:.LC512
	mov	r1, r6
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC512
	bl	__dynamic_dev_dbg
	mvn	r4, #15
	b	.L5598
.L5607:
	movw	r2, #:lower16:.LC513
	mov	r1, r6
	movt	r2, #:upper16:.LC513
	sub	r0, r0, #24
	bl	__dynamic_dev_dbg
	b	.L5599
.L5609:
	.align	2
.L5608:
	.word	.LANCHOR4-3616
	.word	.LANCHOR4-3600
	.fnend
	.size	fsg_store_ro, .-fsg_store_ro
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_store_cdrom, %function
fsg_store_cdrom:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r2
	strd	r6, [sp, #8]
	mov	r7, r3
	mov	r6, r0
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	mov	r5, r0
	add	r2, sp, #4
	mov	r0, r4
	mov	r1, #2
	bl	kstrtouint
	subs	r4, r0, #0
	beq	.L5620
.L5610:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L5620:
	mov	r0, r5
	bl	down_read
	ldr	r3, [r6, #-48]
	cmp	r3, #0
	beq	.L5612
	ldr	r0, .L5623
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	mvneq	r4, #15
	bne	.L5621
.L5613:
	mov	r0, r5
	bl	up_read
	b	.L5610
.L5612:
	ldrb	r2, [r6, #-24]	@ zero_extendqisi2
	ldr	r3, [sp, #4]
	ldr	r0, .L5623+4
	bfi	r2, r3, #3, #1
	strb	r2, [r6, #-24]
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L5622
.L5614:
	mov	r4, r7
	b	.L5613
.L5621:
	movw	r2, #:lower16:.LC514
	mov	r1, r6
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC514
	bl	__dynamic_dev_dbg
	mvn	r4, #15
	b	.L5613
.L5622:
	movw	r2, #:lower16:.LC515
	and	r3, r3, #1
	mov	r1, r6
	movt	r2, #:upper16:.LC515
	sub	r0, r0, #24
	bl	__dynamic_dev_dbg
	b	.L5614
.L5624:
	.align	2
.L5623:
	.word	.LANCHOR4-3568
	.word	.LANCHOR4-3552
	.fnend
	.size	fsg_store_cdrom, .-fsg_store_cdrom
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_store_nofua, %function
fsg_store_nofua:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r1, #2
	mov	r4, r0
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r2
	add	r2, sp, #4
	mov	r5, r3
	bl	kstrtouint
	cmp	r0, #0
	bne	.L5625
	ldr	r3, [sp, #4]
	cmp	r3, #0
	beq	.L5629
.L5627:
	ldrb	r2, [r4, #-24]	@ zero_extendqisi2
	mov	r0, r5
	bfi	r2, r3, #7, #1
	strb	r2, [r4, #-24]
.L5625:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L5629:
	ldrb	r2, [r4, #-24]	@ zero_extendqisi2
	tst	r2, #128
	beq	.L5627
	ldr	r0, [r4, #-48]
	ubfx	r2, r2, #1, #1
	cmp	r0, #0
	moveq	r2, #1
	cmp	r2, #0
	bne	.L5627
	mov	r1, #1
	bl	vfs_fsync
	ldr	r3, [sp, #4]
	b	.L5627
	.fnend
	.size	fsg_store_nofua, .-fsg_store_nofua
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	send_message, %function
send_message:
	.fnstart
	@ args = 0, pretend = 0, frame = 256
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, r9, lr}
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r3, #:lower16:__stack_chk_guard
	ldr	r5, .L5645
	movt	r3, #:upper16:__stack_chk_guard
	.pad #260
	sub	sp, sp, #260
	ldr	r2, [r3]
	mov	r6, r3
	mov	r7, r0
	mov	r8, r1
	ldr	r4, [r0]
	ldrh	r3, [r5, #-14]
	str	r2, [sp, #252]
	tst	r3, #4
	beq	.L5631
	movw	r2, #:lower16:.LC516
	ldr	r3, .L5645+4
	add	r1, r4, #32
	movt	r2, #:upper16:.LC516
	sub	r0, r5, #32
	bl	__dynamic_dev_dbg
.L5631:
	movw	r0, #:lower16:.LC517
	mov	r2, r8
	ldr	r1, .L5645+4
	movt	r0, #:upper16:.LC517
	bl	printk
	cmp	r4, #0
	beq	.L5644
	movw	lr, #:lower16:.LC518
	add	ip, sp, #12
	movt	lr, #:upper16:.LC518
	add	r9, sp, #132
	ldmia	lr!, {r0, r1, r2, r3}
	str	ip, [sp]
	stmia	ip!, {r0, r1, r2, r3}
	movw	r2, #:lower16:.LC519
	ldm	lr, {r0, r1}
	mov	r3, r8
	movt	r2, #:upper16:.LC519
	stm	ip, {r0, r1}
	mov	r0, r9
	mov	r1, #120
	bl	snprintf
	ldr	r0, [r4, #356]
	mov	r3, #0
	str	r9, [sp, #4]
	str	r3, [sp, #8]
	cmp	r0, r3
	beq	.L5633
.L5636:
	ldr	r3, .L5645+8
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	beq	.L5635
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC521
	sub	r0, r5, #8
	movt	r2, #:upper16:.LC521
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L5635
.L5633:
	movw	r1, #:lower16:.LC520
	ldr	r2, .L5645+12
	movt	r1, #:upper16:.LC520
	bl	__class_create
	cmn	r0, #4096
	str	r0, [r4, #356]
	bls	.L5636
	mvn	r0, #0
	b	.L5630
.L5635:
	add	r0, r4, #40
	mov	r2, sp
	mov	r1, #2
	bl	kobject_uevent_env
.L5644:
	mov	r0, #0
.L5630:
	ldr	r2, [sp, #252]
	ldr	r3, [r6]
	cmp	r2, r3
	beq	.L5637
	bl	__stack_chk_fail
.L5637:
	add	sp, sp, #260
	@ sp needed
	pop	{r4, r5, r6, r7, r8, r9, pc}
.L5646:
	.align	2
.L5645:
	.word	.LANCHOR4-3520
	.word	.LANCHOR3+3688
	.word	.LANCHOR4-3504
	.word	.LANCHOR1+3660
	.fnend
	.size	send_message, .-send_message
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bulk_out_complete, %function
bulk_out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	lr, [sp, #16]
	.pad #20
	sub	sp, sp, #20
	ldr	r4, [r0]
	ldr	r3, [r1, #44]
	ldr	r6, [r1, #32]
	cmp	r3, #0
	bne	.L5648
	ldr	r0, [r1, #48]
	ldr	ip, [r6, #12]
	cmp	r0, ip
	beq	.L5650
	ldr	r2, .L5666
	ldrh	r2, [r2, #-14]
	tst	r2, #4
	bne	.L5654
.L5650:
	.syntax divided
@ 689 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r2, #0
	mov	r3, #1
	str	r3, [r6, #4]
	str	r2, [r6, #28]
	.syntax divided
@ 607 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r4, #168]
	str	r3, [r4, #148]
	cmp	r0, r2
	beq	.L5653
	bl	wake_up_process
.L5653:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock
.L5648:
	ldr	r2, .L5666
	ldrh	r2, [r2, #-14]
	tst	r2, #4
	bne	.L5665
.L5651:
	cmn	r3, #104
	bne	.L5650
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5650
	mov	r0, r7
	blx	r3
	b	.L5650
.L5665:
	ldr	r0, [r1, #48]
	ldr	ip, [r6, #12]
.L5654:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC522
	str	r3, [sp]
	stmib	sp, {r0, ip}
	ldr	r3, .L5666+4
	movt	r2, #:upper16:.LC522
	ldr	r0, .L5666+8
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r5, #44]
	b	.L5651
.L5667:
	.align	2
.L5666:
	.word	.LANCHOR4-3472
	.word	.LANCHOR3+3704
	.word	.LANCHOR4-3504
	.fnend
	.size	bulk_out_complete, .-bulk_out_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bulk_in_complete, %function
bulk_in_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	lr, [sp, #16]
	.pad #20
	sub	sp, sp, #20
	ldr	r5, [r0]
	ldr	r3, [r1, #44]
	ldr	r6, [r1, #32]
	cmp	r3, #0
	bne	.L5669
	ldr	ip, [r1, #4]
	ldr	r0, [r1, #48]
	cmp	r0, ip
	beq	.L5671
	ldr	r2, .L5687
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	bne	.L5675
.L5671:
	.syntax divided
@ 668 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	add	r4, r5, #44
	mov	r0, r4
	bl	_raw_spin_lock
	mov	r3, #0
	str	r3, [r6, #4]
	str	r3, [r6, #20]
	.syntax divided
@ 607 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r5, #168]
	mov	r3, #1
	str	r3, [r5, #148]
	cmp	r0, #0
	beq	.L5674
	bl	wake_up_process
.L5674:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock
.L5669:
	ldr	r2, .L5687
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	bne	.L5686
.L5672:
	cmn	r3, #104
	bne	.L5671
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5671
	mov	r0, r7
	blx	r3
	b	.L5671
.L5686:
	ldr	ip, [r1, #4]
	ldr	r0, [r1, #48]
.L5675:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC522
	str	r3, [sp]
	stmib	sp, {r0, ip}
	ldr	r3, .L5687+4
	movt	r2, #:upper16:.LC522
	ldr	r0, .L5687+8
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #44]
	b	.L5672
.L5688:
	.align	2
.L5687:
	.word	.LANCHOR4-3456
	.word	.LANCHOR3+3724
	.word	.LANCHOR4-3480
	.fnend
	.size	bulk_in_complete, .-bulk_in_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	sleep_thread, %function
sleep_thread:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, #57344
	strd	r6, [sp, #8]
	movw	r7, #:lower16:system_freezing_cnt
	movt	r5, 65535
	strd	r8, [sp, #16]
	add	r6, r0, #44
	mov	r8, r0
	str	r10, [sp, #24]
	movt	r7, #:upper16:system_freezing_cnt
	mov	r9, #1
	str	lr, [sp, #28]
	b	.L5694
.L5690:
	str	r9, [r0]
	.syntax divided
@ 819 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	mov	r0, r6
	and	r3, r3, r5
	ldr	r2, [r3, #12]
	ldr	r3, [r2, #4]
	ldr	r3, [r3]
	ands	r4, r3, #1
	bne	.L5695
	bl	_raw_spin_lock_irq
	ldr	r3, [r8, #148]
	mov	r0, r6
	cmp	r3, #0
	bne	.L5701
	bl	_raw_spin_unlock_irq
	bl	schedule
.L5694:
	ldr	r3, [r7]
	mov	r2, sp
	and	r2, r2, r5
	ldr	r0, [r2, #12]
	cmp	r3, #0
	beq	.L5690
	bl	freezing_slow_path
	cmp	r0, #0
	mov	r3, sp
	and	r3, r3, r5
	bne	.L5691
	ldr	r0, [r3, #12]
	b	.L5690
.L5691:
	mov	r0, #0
	bl	__refrigerator
	mov	r3, sp
	and	r3, r3, r5
	ldr	r0, [r3, #12]
	b	.L5690
.L5695:
	mvn	r4, #3
.L5692:
	mov	r5, #0
	mov	r0, r6
	str	r5, [r2]
	bl	_raw_spin_lock_irq
	mov	r0, r6
	str	r5, [r8, #148]
	bl	_raw_spin_unlock_irq
	.syntax divided
@ 836 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L5701:
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	and	r5, r5, r3
	ldr	r2, [r5, #12]
	b	.L5692
	.fnend
	.size	sleep_thread, .-sleep_thread
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	receive_file_work, %function
receive_file_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #-116]
	.pad #68
	sub	sp, sp, #68
	str	r3, [sp, #24]
	.syntax divided
@ 858 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r1, [r0, #16]
	ldrd	r6, [r0, #32]
	ldrd	r2, [r0, #24]
	str	r1, [sp, #20]
	cmp	r6, #0
	sbcs	r1, r7, #0
	strd	r2, [sp, #32]
	mvnlt	r3, #21
	strlt	r3, [r0, #52]
	blt	.L5702
	ldr	r5, .L5769
	mov	r4, r0
	ldrh	r3, [r5, #-14]
	tst	r3, #4
	bne	.L5758
.L5705:
	ldr	r3, [r4, #-104]
	mov	r9, #0
	ldrh	ip, [r3, #20]
	uxth	r8, ip
	subs	r2, r8, #1
	sbc	r3, r9, #0
	and	r0, r2, r6
	and	r1, r3, r7
	orrs	r3, r0, r1
	bne	.L5759
.L5706:
	ldr	r3, .L5769+4
	mov	r2, sp
	mov	r9, #0
	bic	r10, r2, #8128
	mov	r8, r9
	bic	r10, r10, #63
	sub	r3, r3, #8
	str	r3, [sp, #28]
	b	.L5707
.L5766:
	cmp	r6, r3
	mov	r0, r3
	sbcs	r3, r7, ip
	movlt	r0, r6
	mov	r3, r0
	str	r0, [r5, #48]
.L5724:
	subs	r6, r6, r3
	sbc	r7, r7, #0
.L5725:
	cmp	r2, r3
	bls	.L5716
	ldr	r3, .L5769+8
	ldrh	r3, [r3]
	tst	r3, #4
	moveq	r6, #0
	moveq	r7, #0
	bne	.L5760
.L5716:
	mov	r8, r5
.L5707:
	cmp	r6, #1
	sbcs	r3, r7, #0
	movge	r3, #1
	movlt	r3, #0
	cmp	r8, #0
	movne	r3, #1
	cmp	r3, #0
	beq	.L5761
	cmp	r6, #1
	sbcs	r3, r7, #0
	blt	.L5728
	add	r3, r9, #42
	movw	r2, #:lower16:.LANCHOR0
	add	r3, r4, r3, lsl #2
	movt	r2, #:upper16:.LANCHOR0
	ldr	r1, [r2, #520]
	mov	ip, #0
	ldr	r5, [r3, #-200]
	mov	r2, #208
	eor	r9, r9, #1
	str	r1, [r5, #4]
	ldr	r0, [r4, #-104]
	mov	r1, r5
	str	ip, [r4, #-24]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L5757
	cmp	r8, #0
	beq	.L5712
.L5708:
	ldr	r0, .L5769+12
	ldr	r3, [r8, #48]
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L5762
.L5713:
	mov	r2, r3
	ldr	r1, [r8]
	add	r3, sp, #32
	ldr	r0, [sp, #20]
	bl	vfs_write
	ldr	r3, .L5769+16
	mov	fp, r0
	ldrh	r3, [r3]
	tst	r3, #4
	bne	.L5763
.L5714:
	ldr	r3, [r8, #48]
	cmp	r3, fp
	bne	.L5757
.L5712:
	cmp	r5, #0
	beq	.L5716
	ldr	r3, [r4, #-96]
	ldr	r2, [r4, #-24]
	cmp	r2, #0
	bne	.L5717
	cmp	r3, #2
	beq	.L5764
.L5717:
	cmp	r3, #0
	cmpne	r3, #3
	moveq	ip, #1
	movne	ip, #0
	beq	.L5765
	ldr	r2, [r5, #4]
	mov	r1, #0
	ldr	r3, [r5, #48]
	cmp	r6, r2
	sbcs	r1, r7, r1
	blt	.L5766
	mov	r1, #0
	mvn	r0, #0
	cmp	r7, r1
	cmpeq	r6, r0
	beq	.L5725
	b	.L5724
.L5757:
	ldr	r3, [r4, #-96]
	cmp	r3, #0
	movne	r3, #4
	mvneq	r6, #4
	mvnne	r6, #4
	strne	r3, [r4, #-96]
.L5711:
	ldr	r0, .L5769+20
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L5767
.L5727:
	str	r6, [r4, #52]
	.syntax divided
@ 946 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
.L5702:
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5759:
	ldr	r3, .L5769+24
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	beq	.L5706
	ldr	r3, [sp, #24]
	movw	r2, #:lower16:.LC524
	sub	r0, r5, #8
	movt	r2, #:upper16:.LC524
	ldr	r1, [r3]
	strd	r6, [sp]
	ldr	r3, .L5769+28
	str	ip, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L5706
.L5728:
	mov	r5, #0
	b	.L5708
.L5764:
	ldr	r0, [r10, #12]
	movw	r3, #:lower16:autoremove_wake_function
	add	r1, sp, #56
	movt	r3, #:upper16:autoremove_wake_function
	sub	r8, r4, #68
	str	r2, [sp, #44]
	str	r1, [sp, #56]
	str	r0, [sp, #48]
	str	r3, [sp, #52]
	str	r1, [sp, #60]
	b	.L5719
.L5768:
	bl	schedule
.L5719:
	mov	r2, #1
	add	r1, sp, #44
	mov	r0, r8
	bl	prepare_to_wait
	ldr	r3, [r4, #-24]
	cmp	r3, #0
	bne	.L5718
	ldr	r3, [r4, #-96]
	cmp	r3, #2
	bne	.L5718
	ldr	r3, [r10, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L5768
.L5718:
	add	r1, sp, #44
	mov	r0, r8
	bl	finish_wait
	ldr	r3, [r4, #-96]
	b	.L5717
.L5763:
	ldr	r3, [sp, #24]
	movw	r2, #:lower16:.LC525
	movt	r2, #:upper16:.LC525
	ldr	r0, [sp, #28]
	ldr	r1, [r3]
	mov	r3, fp
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L5714
.L5762:
	ldr	r2, [sp, #24]
	sub	r0, r0, #18
	ldr	r1, [r2]
	movw	r2, #:lower16:.LC302
	str	r3, [sp]
	movt	r2, #:upper16:.LC302
	mov	r3, r8
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r8, #48]
	b	.L5713
.L5761:
	mov	r6, r3
	b	.L5711
.L5760:
	ldr	r3, [sp, #24]
	movw	r2, #:lower16:.LC526
	mov	r6, #0
	movt	r2, #:upper16:.LC526
	ldr	r0, .L5769+32
	mov	r7, #0
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L5716
.L5765:
	ldr	r2, [r4, #-24]
	cmp	r3, #0
	mvnne	r6, #124
	mvneq	r6, #4
	cmp	r2, #0
	bne	.L5711
	ldr	r0, [r4, #-104]
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L5711
.L5767:
	ldr	r3, [sp, #24]
	movw	r2, #:lower16:.LC527
	sub	r0, r0, #24
	movt	r2, #:upper16:.LC527
	ldr	r1, [r3]
	mov	r3, r6
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L5727
.L5758:
	ldr	r3, [sp, #24]
	movw	r2, #:lower16:.LC523
	sub	r0, r5, #32
	movt	r2, #:upper16:.LC523
	ldr	r1, [r3]
	strd	r6, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L5705
.L5770:
	.align	2
.L5769:
	.word	.LANCHOR4-3424
	.word	.LANCHOR4-3376
	.word	.LANCHOR4-3342
	.word	.LANCHOR4-3390
	.word	.LANCHOR4-3366
	.word	.LANCHOR4-3312
	.word	.LANCHOR4-3408
	.word	.LANCHOR3+3744
	.word	.LANCHOR4-3360
	.fnend
	.size	receive_file_work, .-receive_file_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_cleanup, %function
ffs_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movw	r0, #:lower16:.LC528
	movt	r0, #:upper16:.LC528
	str	lr, [sp, #4]
	bl	printk
	ldr	r0, .L5773
	bl	unregister_filesystem
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
.L5774:
	.align	2
.L5773:
	.word	.LANCHOR0+1036
	.fnend
	.size	ffs_function_cleanup, .-ffs_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_complete, %function
ffs_ep0_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r1, #32]
	add	r0, r0, #32
	b	complete_all
	.fnend
	.size	ffs_ep0_complete, .-ffs_ep0_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_init, %function
ffs_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4, #4]
	beq	.L5778
	mov	r2, #12
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	mvneq	r4, #11
	beq	.L5776
.L5778:
	ldr	r0, .L5783
	bl	register_filesystem
	subs	r4, r0, #0
	bne	.L5780
	movw	r0, #:lower16:.LC529
	movt	r0, #:upper16:.LC529
	bl	printk
.L5776:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5780:
	movw	r0, #:lower16:.LC530
	mov	r1, r4
	movt	r0, #:upper16:.LC530
	bl	printk
	b	.L5776
.L5784:
	.align	2
.L5783:
	.word	.LANCHOR0+1036
	.fnend
	.size	ffs_function_init, .-ffs_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_suspend, %function
rmnet_sdio_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #192]
	mov	r3, r0
	cmp	r2, #0
	bne	.L5787
	bx	lr
.L5787:
	add	r2, r0, #336
	ldr	r1, [r3, #200]
	mov	r0, #4
	ldr	ip, [r3, #332]
	bic	ip, ip, #2
	str	ip, [r3, #332]
	b	queue_work_on
	.fnend
	.size	rmnet_sdio_suspend, .-rmnet_sdio_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_hw_free, %function
audio_pcm_hw_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r4, r0
	str	lr, [sp, #8]
	ldr	r2, [r0, #184]
	.pad #12
	sub	sp, sp, #12
	cmp	r2, #0
	beq	.L5789
	ldr	r0, [r0]
	ldr	r3, [r4, #188]
	ldr	r1, [r4, #192]
	ldr	r0, [r0]
	ldr	r0, [r0, #496]
	cmp	r0, #0
	beq	.L5790
	ldr	ip, [r0, #276]
	cmp	ip, #0
	beq	.L5790
.L5791:
	mov	lr, #0
	str	lr, [sp]
	ldr	r5, [ip, #4]
	blx	r5
.L5789:
	mov	r3, #0
	mov	r0, r3
	str	r3, [r4, #184]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L5790:
	movw	ip, #:lower16:arm_dma_ops
	movt	ip, #:upper16:arm_dma_ops
	cmp	ip, #0
	bne	.L5791
	.syntax divided
@ 206 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/dma-mapping.h" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/dma-mapping.h"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 206, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
	.fnend
	.size	audio_pcm_hw_free, .-audio_pcm_hw_free
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_probe, %function
acc_hid_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	hid_open_report
	subs	r5, r0, #0
	bne	.L5800
	ldr	r3, [r4, #3548]
	mov	r0, r4
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	beq	.L5806
.L5800:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5806:
	mov	r1, #45
	mov	r0, r4
	bl	hid_connect
	subs	r5, r0, #0
	beq	.L5800
	ldr	r3, [r4, #3548]
	mov	r0, r4
	ldr	r3, [r3, #4]
	blx	r3
	b	.L5800
	.fnend
	.size	acc_hid_probe, .-acc_hid_probe
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_free_ctrl_pkt.part.5, %function
mbim_free_ctrl_pkt.part.5:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	mov	r4, r0
	ldr	r0, [r0]
	bl	kfree
	mov	r0, r4
	pop	{r4, lr}
	b	kfree
	.fnend
	.size	mbim_free_ctrl_pkt.part.5, .-mbim_free_ctrl_pkt.part.5
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_set_alt, %function
f_audio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	ldr	fp, .L5862
	mov	r10, r2
	strd	r8, [sp, #16]
	mov	r8, r0
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r0, #172]
	ldr	r7, [r0, #176]
	ldrh	r3, [fp, #-14]
	tst	r3, #4
	bne	.L5854
.L5810:
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldrb	r3, [r6, #16]	@ zero_extendqisi2
	cmp	r3, r4
	beq	.L5855
	ldrb	r3, [r6, #17]	@ zero_extendqisi2
	cmp	r3, r4
	bne	.L5822
	cmp	r10, #1
	bne	.L5823
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r1, [r5, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r7, r0, #0
	bne	.L5856
	str	r8, [r5]
	ldr	r0, [r6, #1076]
	bl	f_audio_buffer_alloc
	cmn	r0, #4096
	str	r0, [r8, #184]
	bhi	.L5825
	ldr	r3, [r6, #1080]
	cmp	r3, #0
	ble	.L5852
	movw	r9, #:lower16:f_audio_complete
	movt	r9, #:upper16:f_audio_complete
.L5826:
	ldr	r3, [r5, #8]
	mov	r1, #32
	mov	r0, r5
	add	r7, r7, #1
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	movw	r1, #32800
	beq	.L5828
	ldr	r0, [r6, #1084]
	bl	__kmalloc
	mov	r3, r0
	mov	r2, #32
	cmp	r3, #0
	mov	r0, r5
	mov	r1, r4
	str	r3, [r4]
	beq	.L5829
	ldr	r3, [r6, #1084]
	str	r3, [r4, #4]
	str	r9, [r4, #28]
	str	r8, [r4, #32]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bne	.L5857
	ldr	r3, [r6, #1080]
	cmp	r3, r7
	bgt	.L5826
.L5827:
	ldr	r2, .L5862+4
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	bne	.L5858
.L5831:
	strb	r10, [r8, #249]
.L5809:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5855:
	cmp	r10, #1
	bne	.L5812
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r1, [r7, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L5859
	str	r8, [r7]
	mov	r1, #32
	mov	r0, r7
	str	r4, [r8, #216]
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L5828
	movw	r1, #32800
	ldr	r0, [r6, #1072]
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	beq	.L5829
	ldr	ip, [r6, #1072]
	movw	r3, #:lower16:f_audio_complete
	mov	r1, r4
	movt	r3, #:upper16:f_audio_complete
	mov	r2, #32
	mov	r0, r7
	str	ip, [r4, #4]
	str	r3, [r4, #28]
	str	r8, [r4, #32]
	str	r4, [r8, #244]
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bne	.L5860
.L5817:
	movw	r3, #:lower16:system_wq
	add	r2, r8, #220
	movt	r3, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r3]
	bl	queue_work_on
.L5818:
	strb	r10, [r8, #248]
	b	.L5809
.L5825:
	movw	r0, #:lower16:.LC39
	ldr	r1, .L5862+8
	mvn	r4, #11
	movt	r0, #:upper16:.LC39
	bl	printk
	b	.L5809
.L5823:
	ldr	r4, [r8, #184]
	cmp	r4, #0
	beq	.L5832
	movw	r0, #:lower16:.LC539
	ldr	r1, .L5862+8
	movt	r0, #:upper16:.LC539
	bl	printk
	add	r0, r4, #8
	add	r2, r8, #204
	ldr	r1, [r8, #208]
	bl	__list_add
	movw	r3, #:lower16:system_wq
	add	r2, r8, #188
	movt	r3, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r3]
	bl	queue_work_on
	mov	r3, #0
	mov	r4, r3
	str	r3, [r8, #184]
	b	.L5831
.L5854:
	movw	r1, #:lower16:.LC531
	mov	r3, r4
	ldr	r2, .L5862+8
	movt	r1, #:upper16:.LC531
	sub	r0, fp, #32
	str	r10, [sp]
	bl	__dynamic_pr_debug
	b	.L5810
.L5832:
	movw	r0, #:lower16:.LC540
	ldr	r1, .L5862+8
	movt	r0, #:upper16:.LC540
	bl	printk
	b	.L5831
.L5812:
	add	r7, r8, #212
	add	r6, r8, #236
	mov	r0, r7
	mov	fp, #0
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	b	.L5820
.L5821:
	bl	list_del
	cmp	r5, #0
	bne	.L5861
.L5820:
	ldr	r4, [r8, #236]
	cmp	r4, r6
	sub	r5, r4, #8
	mov	r0, r4
	bne	.L5821
	mov	r1, r9
	mov	r0, r7
	mov	r4, #0
	bl	_raw_spin_unlock_irqrestore
	b	.L5818
.L5858:
	movw	r1, #:lower16:.LC538
	ldr	r2, .L5862+8
	sub	r0, fp, #8
	movt	r1, #:upper16:.LC538
	bl	__dynamic_pr_debug
	b	.L5831
.L5861:
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r5
	str	fp, [r4, #-8]
	bl	kfree
	b	.L5820
.L5852:
	mov	r4, r7
	b	.L5827
.L5857:
	movw	r0, #:lower16:.LC537
	mov	r3, r4
	ldr	r1, .L5862+8
	movt	r0, #:upper16:.LC537
	ldr	r2, [r5, #4]
	bl	printk
	ldr	r3, [r6, #1080]
	b	.L5827
.L5828:
	movw	r0, #:lower16:.LC533
	ldr	r1, .L5862+8
	mvn	r4, #11
	movt	r0, #:upper16:.LC533
	bl	printk
	b	.L5809
.L5829:
	movw	r0, #:lower16:.LC534
	ldr	r1, .L5862+8
	mvn	r4, #11
	movt	r0, #:upper16:.LC534
	bl	printk
	b	.L5809
.L5859:
	movw	r0, #:lower16:.LC532
	ldr	r1, .L5862+8
	movt	r0, #:upper16:.LC532
	bl	printk
	b	.L5809
.L5856:
	movw	r0, #:lower16:.LC536
	ldr	r1, .L5862+8
	mov	r4, r7
	movt	r0, #:upper16:.LC536
	bl	printk
	b	.L5809
.L5822:
	movw	r0, #:lower16:.LC541
	mov	r2, r4
	ldr	r1, .L5862+8
	mov	r3, #0
	movt	r0, #:upper16:.LC541
	mov	r4, r3
	bl	printk
	b	.L5809
.L5860:
	movw	r0, #:lower16:.LC535
	mov	r3, r4
	ldr	r1, .L5862+8
	ldr	r2, [r7, #4]
	movt	r0, #:upper16:.LC535
	bl	printk
	b	.L5817
.L5863:
	.align	2
.L5862:
	.word	.LANCHOR4-3280
	.word	.LANCHOR4-3264
	.word	.LANCHOR3+3764
	.fnend
	.size	f_audio_set_alt, .-f_audio_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_disable, %function
rmnet_mux_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #372]
	cmp	r3, #0
	bxeq	lr
	mov	r3, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	str	r3, [r0, #372]
	ldr	r0, [r0, #96]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L5866
	blx	r2
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
.L5866:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r5, [r4, #96]
	ldr	r6, [r4, #100]
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L5867
	blx	r2
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
.L5867:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L5868
	blx	r2
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
.L5868:
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	add	r2, r4, #384
	ldr	r1, [r4, #380]
	mov	r0, #4
	str	r3, [r4, #352]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on
	.fnend
	.size	rmnet_mux_disable, .-rmnet_mux_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ep_matches.part.13, %function
ep_matches.part.13:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	ip, [r2, #3]	@ zero_extendqisi2
	ands	r4, ip, #3
	beq	.L5884
	ldr	r9, [r1, #4]
	ldrb	ip, [r9]	@ zero_extendqisi2
	cmp	ip, #101
	beq	.L5937
.L5884:
	mov	r0, #0
.L5881:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L5937:
	mov	r7, r3
	ldrb	r3, [r9, #2]	@ zero_extendqisi2
	mov	r6, r1
	mov	r8, r0
	mov	r5, r2
	cmp	r3, #45
	beq	.L5885
	mov	r1, #45
	mov	r0, r9
	bl	strrchr
	subs	r10, r0, #0
	beq	.L5886
	cmp	r4, #2
	beq	.L5888
	cmp	r4, #3
	ldrb	r3, [r10, #2]	@ zero_extendqisi2
	bne	.L5932
	cmp	r3, #115
	beq	.L5884
	movw	r0, #:lower16:.LC473
	ldr	r1, [r8, #28]
	movt	r0, #:upper16:.LC473
	bl	strcmp
	cmp	r0, #0
	bne	.L5890
	ldrb	r3, [r10, #1]	@ zero_extendqisi2
	cmp	r3, #105
	beq	.L5884
.L5890:
	ldrb	r2, [r10, #-1]	@ zero_extendqisi2
	movw	r3, #:lower16:_ctype
	movt	r3, #:upper16:_ctype
	ldrb	r3, [r3, r2]	@ zero_extendqisi2
	tst	r3, #4
	beq	.L5902
	ldrh	r3, [r5, #4]	@ unaligned
	cmp	r3, #0
	ubfxne	r2, r3, #0, #11
	movne	r9, #0
	bne	.L5897
	mov	r9, r3
	b	.L5904
.L5932:
	cmp	r3, #115
	bne	.L5884
.L5891:
	ldrb	r2, [r10, #-1]	@ zero_extendqisi2
	movw	r3, #:lower16:_ctype
	movt	r3, #:upper16:_ctype
	ldrb	r3, [r3, r2]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L5885
.L5902:
	ldrsb	r3, [r5, #2]
	cmp	r3, #0
	blt	.L5938
	cmp	r2, #116
	bne	.L5884
.L5885:
	sub	r9, r4, #2
	cmp	r7, #0
	clz	r9, r9
	moveq	r3, #0
	lsr	r9, r9, #5
	movne	r3, r9
	cmp	r3, #0
	bne	.L5939
.L5893:
	ldrh	r3, [r5, #4]	@ unaligned
	cmp	r3, #0
	bne	.L5894
.L5904:
	ldrh	r3, [r6, #20]
	strh	r3, [r5, #4]	@ unaligned
.L5894:
	cmp	r4, #1
	ubfx	r2, r3, #0, #11
	beq	.L5896
	cmp	r4, #3
	beq	.L5897
.L5895:
	ldrb	r3, [r5, #2]	@ zero_extendqisi2
	movw	r2, #:lower16:_ctype
	movt	r2, #:upper16:_ctype
	and	r3, r3, #128
	strb	r3, [r5, #2]
	ldr	r0, [r6, #4]
	ldrb	r1, [r0, #2]	@ zero_extendqisi2
	ldrb	r2, [r2, r1]	@ zero_extendqisi2
	tst	r2, #4
	bne	.L5940
	movw	r1, #:lower16:.LANCHOR1
	movt	r1, #:upper16:.LANCHOR1
	ldr	r2, [r1, #3228]
	add	r2, r2, #1
	cmp	r2, #15
	str	r2, [r1, #3228]
	bhi	.L5884
	orr	r3, r3, r2
	uxtb	r3, r3
	strb	r3, [r5, #2]
.L5900:
	cmp	r7, #0
	moveq	r7, r9
	movne	r7, #0
	cmp	r7, #0
	beq	.L5901
	ldrh	r2, [r6, #20]
	cmp	r2, #64
	movge	r2, #64
	strh	r2, [r5, #4]	@ unaligned
.L5901:
	mov	r0, #1
	strb	r3, [r6, #25]
	b	.L5881
.L5897:
	ldr	r0, [r8, #20]
	cmp	r0, #2
	movls	r1, #1
	movhi	r1, #0
	cmp	r2, #64
	movls	r1, #0
	cmp	r1, #0
	bne	.L5884
.L5896:
	ldrh	r1, [r6, #20]
	cmp	r1, r2
	bcc	.L5884
	ldr	r1, [r8, #20]
	cmp	r1, #2
	bhi	.L5895
	cmp	r2, #1024
	bcs	.L5884
	tst	r3, #6144
	bne	.L5884
	b	.L5895
.L5940:
	add	r0, r0, #2
	mov	r2, #10
	mov	r1, #0
	bl	simple_strtoul
	ldrb	r3, [r5, #2]	@ zero_extendqisi2
	orr	r3, r3, r0
	uxtb	r3, r3
	strb	r3, [r5, #2]
	b	.L5900
.L5886:
	mov	r0, r9
	bl	strlen
	add	r10, r9, r0
	b	.L5891
.L5939:
	ldr	r2, [r8, #20]
	cmp	r2, #4
	bls	.L5906
	ldrb	r2, [r7, #3]	@ zero_extendqisi2
	ldrh	r1, [r6, #22]
	and	r2, r2, #31
	cmp	r1, r2
	bcc	.L5884
.L5906:
	mov	r9, r3
	b	.L5893
.L5888:
	ldrb	r3, [r10, #1]	@ zero_extendqisi2
	cmp	r3, #98
	bne	.L5884
	b	.L5891
.L5938:
	cmp	r2, #110
	bne	.L5884
	b	.L5885
	.fnend
	.size	ep_matches.part.13, .-ep_matches.part.13
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_mmap, %function
audio_pcm_mmap:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r2, [r0, #212]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r2, #544]
	cmp	r3, #0
	beq	.L5942
	ldr	lr, [r2, #548]
	cmp	lr, #0
	beq	.L5942
	ldr	r0, [r0]
	ldr	r2, [r2, #540]
	ldr	r0, [r0]
	ldr	r0, [r0, #496]
	cmp	r0, #0
	beq	.L5943
	ldr	ip, [r0, #276]
	cmp	ip, #0
	beq	.L5943
.L5944:
	mov	r4, #0
	str	lr, [sp]
	str	r4, [sp, #4]
	ldr	r4, [ip, #8]
	blx	r4
.L5941:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5943:
	movw	ip, #:lower16:arm_dma_ops
	movt	ip, #:upper16:arm_dma_ops
	cmp	ip, #0
	bne	.L5944
	.syntax divided
@ 236 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/dma-mapping.h" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/dma-mapping.h"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 236, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L5942:
	movw	r0, #:lower16:.LC542
	movt	r0, #:upper16:.LC542
	bl	printk
	mvn	r0, #21
	b	.L5941
	.fnend
	.size	audio_pcm_mmap, .-audio_pcm_mmap
	.align	2
	.global	gsdio_ctrl_wq
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ctrl_wq, %function
gsdio_ctrl_wq:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #80
	beq	.L5959
	bx	lr
.L5959:
	movw	r0, #:lower16:.LC114
	ldr	r1, .L5960
	movt	r0, #:upper16:.LC114
	b	printk
.L5961:
	.align	2
.L5960:
	.word	.LANCHOR3+3780
	.fnend
	.size	gsdio_ctrl_wq, .-gsdio_ctrl_wq
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_connect, %function
frmnet_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	subs	r2, r0, #0
	beq	.L5964
	mov	r3, #1
	str	r3, [r2, #124]
	bx	lr
.L5964:
	movw	r0, #:lower16:.LC543
	ldr	r1, .L5965
	movt	r0, #:upper16:.LC543
	b	printk
.L5966:
	.align	2
.L5965:
	.word	.LANCHOR3+3796
	.fnend
	.size	frmnet_connect, .-frmnet_connect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_in_max_packet_size_show, %function
conn_gadget_in_max_packet_size_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2484]
	cmp	r3, #0
	beq	.L5968
	ldr	r3, [r3, #92]
	cmp	r3, #0
	beq	.L5968
	movw	r1, #:lower16:.LC77
	mov	r0, r2
	ldrh	r2, [r3, #20]
	movt	r1, #:upper16:.LC77
	b	sprintf
.L5968:
	movw	r0, #:lower16:.LC425
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r1, .L5977
	movt	r0, #:upper16:.LC425
	str	lr, [sp, #4]
	bl	printk
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
.L5978:
	.align	2
.L5977:
	.word	.LANCHOR3+3812
	.fnend
	.size	conn_gadget_in_max_packet_size_show, .-conn_gadget_in_max_packet_size_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_out_max_packet_size_show, %function
conn_gadget_out_max_packet_size_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2484]
	cmp	r3, #0
	beq	.L5980
	ldr	r3, [r3, #96]
	cmp	r3, #0
	beq	.L5980
	movw	r1, #:lower16:.LC77
	mov	r0, r2
	ldrh	r2, [r3, #20]
	movt	r1, #:upper16:.LC77
	b	sprintf
.L5980:
	movw	r0, #:lower16:.LC425
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r1, .L5989
	movt	r0, #:upper16:.LC425
	str	lr, [sp, #4]
	bl	printk
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
.L5990:
	.align	2
.L5989:
	.word	.LANCHOR3+3848
	.fnend
	.size	conn_gadget_out_max_packet_size_show, .-conn_gadget_out_max_packet_size_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_usb_buffer_size_show, %function
conn_gadget_usb_buffer_size_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2484]
	cmp	r3, #0
	beq	.L5995
	ldr	r3, [r3, #192]
	mov	r0, r2
	movw	r1, #:lower16:.LC77
	movt	r1, #:upper16:.LC77
	add	r2, r3, #1020
	cmp	r3, #0
	add	r2, r2, #3
	movlt	r3, r2
	asr	r2, r3, #10
	b	sprintf
.L5995:
	movw	r0, #:lower16:.LC425
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r1, .L5998
	movt	r0, #:upper16:.LC425
	str	lr, [sp, #4]
	bl	printk
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
.L5999:
	.align	2
.L5998:
	.word	.LANCHOR3+3888
	.fnend
	.size	conn_gadget_usb_buffer_size_show, .-conn_gadget_usb_buffer_size_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bcdUSB_show, %function
bcdUSB_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #8]
	cmp	r3, #0
	beq	.L6001
	movw	r1, #:lower16:.LC85
	mov	r0, r4
	ldrh	r2, [r3, #19]	@ unaligned
	movt	r1, #:upper16:.LC85
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
.L6001:
	movw	r3, #:lower16:.LANCHOR0
	movw	r1, #:lower16:.LC85
	movt	r3, #:upper16:.LANCHOR0
	mov	r0, r4
	ldrh	r2, [r3, #138]
	movt	r1, #:upper16:.LC85
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
	.fnend
	.size	bcdUSB_show, .-bcdUSB_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	terminal_version_show, %function
terminal_version_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r4, #:lower16:.LANCHOR1
	movw	r5, #3660
	movt	r4, #:upper16:.LANCHOR1
	movw	r3, #3662
	strd	r6, [sp, #8]
	ldrh	ip, [r4, r5]
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	ldrh	lr, [r4, r3]
	movw	r1, #:lower16:.LC544
	mov	r0, r2
	movt	r1, #:upper16:.LC544
	mov	r6, r2
	lsr	r3, ip, #8
	uxtb	r2, ip
	str	lr, [sp]
	bl	sprintf
	ldrh	r3, [r4, r5]
	mov	r7, r0
	cmp	r3, #0
	bne	.L6010
.L6004:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L6010:
	movw	r0, #:lower16:.LC545
	mov	r2, r6
	ldr	r1, .L6011
	movt	r0, #:upper16:.LC545
	bl	printk
	b	.L6004
.L6012:
	.align	2
.L6011:
	.word	.LANCHOR3+3924
	.fnend
	.size	terminal_version_show, .-terminal_version_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_set_modem_cbits_w, %function
rmnet_sdio_set_modem_cbits_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #-12]
	tst	r3, #2
	beq	.L6013
	ldr	r2, .L6022
	ldrh	r3, [r2, #-14]
	tst	r3, #4
	bne	.L6021
.L6013:
	bx	lr
.L6021:
	movw	r1, #:lower16:.LC546
	ldr	r3, [r0, #-4]
	sub	r0, r2, #32
	movt	r1, #:upper16:.LC546
	ldr	r2, .L6022+4
	b	__dynamic_pr_debug
.L6023:
	.align	2
.L6022:
	.word	.LANCHOR4-3232
	.word	.LANCHOR3+3948
	.fnend
	.size	rmnet_sdio_set_modem_cbits_w, .-rmnet_sdio_set_modem_cbits_w
	.align	2
	.global	gsdio_read_complete
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_read_complete, %function
gsdio_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L6033
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	ldr	r4, [r0]
	ldrh	r3, [r2, #-6]
	tst	r3, #4
	bne	.L6031
.L6025:
	cmp	r4, #0
	beq	.L6032
	add	r5, r4, #4
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	add	r2, r4, #20
	ldr	r1, [r4, #24]
	add	r0, r6, #36
	bl	__list_add
	ldr	r3, [r4, #48]
	movw	r1, #:lower16:.LANCHOR1
	add	r2, r4, #28
	movt	r1, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r1, #3396]
	add	r3, r3, #1
	str	r3, [r4, #48]
	bl	queue_work_on
	mov	r1, r7
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock_irqrestore
.L6031:
	movw	r1, #:lower16:.LC170
	mov	r3, r0
	str	r4, [sp]
	sub	r0, r2, #24
	movt	r1, #:upper16:.LC170
	ldr	r2, .L6033+4
	bl	__dynamic_pr_debug
	b	.L6025
.L6032:
	ldr	r1, .L6033+4
	movw	r0, #:lower16:.LC114
	movt	r0, #:upper16:.LC114
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	printk
.L6034:
	.align	2
.L6033:
	.word	.LANCHOR4-3216
	.word	.LANCHOR3+3980
	.fnend
	.size	gsdio_read_complete, .-gsdio_read_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_open, %function
rmnet_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L6047
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r5, #-14]
	tst	r3, #4
	bne	.L6044
.L6036:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #3604]
	add	r2, r3, #16
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r6, [r2]
	add	r6, r6, #1
	strex	r1, r6, [r2]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r6, #1
	beq	.L6045
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r3, .L6047+4
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	mvneq	r0, #15
	bne	.L6046
.L6035:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6045:
	ldr	r0, [r4, #3604]
	str	r0, [r7, #124]
	add	r0, r0, #52
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #3604]
	mov	r1, r0
	strb	r6, [r3, #4]
	add	r0, r3, #52
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L6035
.L6044:
	movw	r1, #:lower16:.LC547
	sub	r0, r5, #32
	movt	r1, #:upper16:.LC547
	bl	__dynamic_pr_debug
	b	.L6036
.L6046:
	movw	r1, #:lower16:.LC548
	sub	r0, r5, #8
	movt	r1, #:upper16:.LC548
	bl	__dynamic_pr_debug
	mvn	r0, #15
	b	.L6035
.L6048:
	.align	2
.L6047:
	.word	.LANCHOR4-3184
	.word	.LANCHOR4-3168
	.fnend
	.size	rmnet_ctrl_open, .-rmnet_ctrl_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_poll, %function
rmnet_ctrl_poll:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	cmp	r4, #0
	beq	.L6063
	cmp	r1, #0
	beq	.L6052
	ldr	r3, [r1]
	cmp	r3, #0
	beq	.L6052
	mov	r2, r1
	add	r1, r4, #32
	blx	r3
.L6052:
	add	r5, r4, #52
	add	r4, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4]
	mov	r6, r0
	cmp	r3, r4
	moveq	r4, #0
	beq	.L6053
	ldr	r0, .L6065
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	moveq	r4, #65
	bne	.L6064
.L6053:
	mov	r1, r6
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L6049:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6064:
	movw	r1, #:lower16:.LC550
	ldr	r2, .L6065+4
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC550
	mov	r4, #65
	bl	__dynamic_pr_debug
	b	.L6053
.L6063:
	movw	r0, #:lower16:.LC549
	ldr	r1, .L6065+4
	mov	r4, #8
	movt	r0, #:upper16:.LC549
	bl	printk
	b	.L6049
.L6066:
	.align	2
.L6065:
	.word	.LANCHOR4-3136
	.word	.LANCHOR3+4000
	.fnend
	.size	rmnet_ctrl_poll, .-rmnet_ctrl_poll
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_send_cbits_tomodem, %function
ghsic_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	ip, #:lower16:.LANCHOR1
	movt	ip, #:upper16:.LANCHOR1
	ldr	r3, [ip, #1016]
	cmp	r0, #0
	cmpne	r1, r3
	bcs	.L6079
	mov	r3, #104
	mla	r1, r3, r1, ip
	ldr	r1, [r1, #1020]
	cmp	r1, #0
	beq	.L6080
	ldr	r3, [r1, #88]
	cmp	r3, r2
	beq	.L6067
	ldr	r3, [r1, #84]
	str	r2, [r1, #88]
	tst	r3, #1
	beq	.L6067
	ldr	r0, .L6082
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L6081
.L6067:
	bx	lr
.L6081:
	movw	r1, #:lower16:.LC551
	mov	r3, r2
	ldr	r2, .L6082+4
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC551
	b	__dynamic_pr_debug
.L6079:
	movw	r0, #:lower16:.LC123
	mov	r2, r1
	ldr	r1, .L6082+4
	movt	r0, #:upper16:.LC123
	b	printk
.L6080:
	movw	r0, #:lower16:.LC114
	ldr	r1, .L6082+4
	movt	r0, #:upper16:.LC114
	b	printk
.L6083:
	.align	2
.L6082:
	.word	.LANCHOR4-3120
	.word	.LANCHOR3+4016
	.fnend
	.size	ghsic_send_cbits_tomodem, .-ghsic_send_cbits_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_connect_w, %function
ghsic_ctrl_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r3, r0, #16
	bxeq	lr
	ldr	r2, [r0, #68]
	tst	r2, #2
	bxeq	lr
	ldr	r0, .L6100
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L6099
.L6086:
	movw	r0, #:lower16:.LC553
	ldr	r4, [sp]
	mvn	r2, #18
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC553
	add	sp, sp, #8
	ldr	r1, .L6100+4
	b	printk
.L6099:
	movw	r1, #:lower16:.LC552
	ldr	r2, .L6100+4
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC552
	bl	__dynamic_pr_debug
	b	.L6086
.L6101:
	.align	2
.L6100:
	.word	.LANCHOR4-3088
	.word	.LANCHOR3+4044
	.fnend
	.size	ghsic_ctrl_connect_w, .-ghsic_ctrl_connect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_unthrottle_tx, %function
ghsic_data_unthrottle_tx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r4, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L6102
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L6113
.L6102:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6113:
	add	r5, r4, #80
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #208]
	mov	r1, r0
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #208]
	bl	_raw_spin_unlock_irqrestore
	add	r2, r4, #120
	mov	r0, #4
	ldr	r1, [r4, #84]
	bl	queue_work_on
	ldr	r0, .L6114
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L6102
	movw	r1, #:lower16:.LC554
	ldr	r3, [r4]
	sub	r0, r0, #24
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC554
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r2, .L6114+4
	b	__dynamic_pr_debug
.L6115:
	.align	2
.L6114:
	.word	.LANCHOR4-3072
	.word	.LANCHOR3+4068
	.fnend
	.size	ghsic_data_unthrottle_tx, .-ghsic_data_unthrottle_tx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_send_cbits_tomodem, %function
ghsuart_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	ip, #:lower16:.LANCHOR1
	movt	ip, #:upper16:.LANCHOR1
	ldr	r3, [ip, #1856]
	cmp	r0, #0
	cmpne	r1, r3
	bcs	.L6128
	mov	r3, #84
	mla	r1, r3, r1, ip
	ldr	r1, [r1, #1860]
	cmp	r1, #0
	beq	.L6129
	ldr	r3, [r1, #92]
	cmp	r3, r2
	beq	.L6116
	ldr	r3, [r1, #88]
	str	r2, [r1, #92]
	tst	r3, #4
	beq	.L6116
	ldr	r0, .L6131
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L6130
.L6116:
	bx	lr
.L6130:
	movw	r1, #:lower16:.LC551
	mov	r3, r2
	ldr	r2, .L6131+4
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC551
	b	__dynamic_pr_debug
.L6128:
	movw	r0, #:lower16:.LC123
	mov	r2, r1
	ldr	r1, .L6131+4
	movt	r0, #:upper16:.LC123
	b	printk
.L6129:
	movw	r0, #:lower16:.LC114
	ldr	r1, .L6131+4
	movt	r0, #:upper16:.LC114
	b	printk
.L6132:
	.align	2
.L6131:
	.word	.LANCHOR4-3040
	.word	.LANCHOR5-4088
	.fnend
	.size	ghsuart_send_cbits_tomodem, .-ghsuart_send_cbits_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_wake_cb, %function
bam_data_wake_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L6148
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r4, [r0, #4]
	ldrh	r3, [r2, #-6]
	tst	r3, #4
	bne	.L6144
.L6134:
	cmp	r4, #0
	beq	.L6145
	ldr	r3, [r4]
	cmp	r3, #0
	beq	.L6146
	ldr	r0, [r3]
	cmp	r0, #0
	beq	.L6147
	ldr	r3, [r0]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L6139
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	bx	r3
.L6144:
	ldr	r3, .L6148+4
	movw	r1, #:lower16:.LC555
	sub	r0, r2, #24
	movt	r1, #:upper16:.LC555
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L6134
.L6139:
	mvn	r0, #94
.L6133:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6146:
	movw	r0, #:lower16:.LC557
	ldr	r1, .L6148+4
	movt	r0, #:upper16:.LC557
	bl	printk
	mvn	r0, #18
	b	.L6133
.L6145:
	movw	r0, #:lower16:.LC556
	ldr	r1, .L6148+4
	movt	r0, #:upper16:.LC556
	bl	printk
	mvn	r0, #18
	b	.L6133
.L6147:
	movw	r0, #:lower16:.LC558
	ldr	r1, .L6148+4
	movt	r0, #:upper16:.LC558
	bl	printk
	mvn	r0, #18
	b	.L6133
.L6149:
	.align	2
.L6148:
	.word	.LANCHOR4-3024
	.word	.LANCHOR5-4060
	.fnend
	.size	bam_data_wake_cb, .-bam_data_wake_cb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_ctrl_open, %function
ccid_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r3, #3472]
	ldr	r3, [r5, #96]
	cmp	r3, #0
	bne	.L6151
	ldr	r0, .L6158
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	mvneq	r0, #18
	bne	.L6157
.L6150:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6151:
	ldr	r4, [r5, #116]
	cmp	r4, #0
	beq	.L6153
	ldr	r0, .L6158+4
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	mvneq	r0, #15
	beq	.L6150
	movw	r1, #:lower16:.LC559
	sub	r0, r0, #24
	ldr	r2, .L6158+8
	movt	r1, #:upper16:.LC559
	bl	__dynamic_pr_debug
	mvn	r0, #15
	b	.L6150
.L6153:
	mov	r3, #1
	add	r7, r5, #92
	mov	r6, r1
	mov	r0, r7
	str	r3, [r5, #116]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r6, #124]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	b	.L6150
.L6157:
	movw	r1, #:lower16:.LC286
	sub	r0, r0, #32
	ldr	r2, .L6158+8
	movt	r1, #:upper16:.LC286
	bl	__dynamic_pr_debug
	mvn	r0, #18
	b	.L6150
.L6159:
	.align	2
.L6158:
	.word	.LANCHOR4-2992
	.word	.LANCHOR4-2976
	.word	.LANCHOR5-4040
	.fnend
	.size	ccid_ctrl_open, .-ccid_ctrl_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_open, %function
ccid_bulk_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r4, .L6173
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r3, #3472]
	ldrh	r3, [r4, #-14]
	tst	r3, #4
	bne	.L6171
.L6161:
	ldr	r3, [r5, #96]
	cmp	r3, #0
	bne	.L6162
	ldr	r3, .L6173+4
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	mvneq	r0, #18
	bne	.L6172
.L6160:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6162:
	ldr	r4, [r5, #152]
	cmp	r4, #0
	beq	.L6164
	ldr	r0, .L6173+8
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	mvneq	r0, #15
	beq	.L6160
	movw	r1, #:lower16:.LC561
	sub	r0, r0, #32
	ldr	r2, .L6173+12
	movt	r1, #:upper16:.LC561
	bl	__dynamic_pr_debug
	mvn	r0, #15
	b	.L6160
.L6164:
	mov	r3, #1
	add	r7, r5, #92
	str	r4, [r5, #148]
	mov	r0, r7
	str	r3, [r5, #152]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r6, #124]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	b	.L6160
.L6172:
	movw	r1, #:lower16:.LC286
	sub	r0, r4, #8
	ldr	r2, .L6173+12
	movt	r1, #:upper16:.LC286
	bl	__dynamic_pr_debug
	mvn	r0, #18
	b	.L6160
.L6171:
	movw	r1, #:lower16:.LC560
	sub	r0, r4, #32
	movt	r1, #:upper16:.LC560
	bl	__dynamic_pr_debug
	b	.L6161
.L6174:
	.align	2
.L6173:
	.word	.LANCHOR4-2944
	.word	.LANCHOR4-2928
	.word	.LANCHOR4-2896
	.word	.LANCHOR5-4024
	.fnend
	.size	ccid_bulk_open, .-ccid_bulk_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_disconnect, %function
frmnet_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	subs	r4, r0, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	beq	.L6197
	ldr	r3, [r4, #120]
	mov	r2, #0
	str	r2, [r4, #124]
	cmp	r3, r2
	beq	.L6198
	ldr	r0, [r4, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6180
	blx	r3
.L6180:
	ldr	r3, [r4, #140]
	mov	r1, #0
	mvn	r0, #94
	mov	r2, #32
	ldr	r3, [r3]
	strb	r0, [r3]
	strb	r1, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrh	r0, [r4, #112]
	strh	r0, [r3, #4]	@ unaligned
	strb	r1, [r3, #6]
	strb	r1, [r3, #7]
	ldrd	r0, [r4, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bge	.L6181
	ldr	r3, [r4, #120]
	cmp	r3, #0
	bne	.L6199
.L6175:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L6198:
	ldr	r0, .L6201
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L6175
	movw	r1, #:lower16:.LC562
	ldrd	r4, [sp]
	sub	r0, r0, #24
	ldrd	r6, [sp, #8]
	movt	r1, #:upper16:.LC562
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r2, .L6201+4
	b	__dynamic_pr_debug
.L6199:
	movw	r0, #:lower16:.LC563
	ldr	r1, .L6201+4
	movt	r0, #:upper16:.LC563
	bl	printk
.L6181:
	ldr	r0, .L6201+8
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L6200
.L6183:
	add	r8, r4, #132
	add	r7, r4, #144
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #144]
	mov	r9, r0
	cmp	r7, r5
	beq	.L6184
.L6185:
	mov	r0, r5
	sub	r6, r5, #8
	bl	list_del
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
	ldr	r5, [r4, #144]
	cmp	r7, r5
	bne	.L6185
.L6184:
	mov	r3, #0
	mov	r1, r9
	mov	r0, r8
	str	r3, [r4, #152]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L6200:
	movw	r1, #:lower16:.LC564
	ldrb	r3, [r4, #116]	@ zero_extendqisi2
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC564
	ldr	r2, .L6201+12
	bl	__dynamic_pr_debug
	b	.L6183
.L6197:
	movw	r0, #:lower16:.LC543
	mov	r2, r4
	ldr	r1, .L6201+4
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC543
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L6202:
	.align	2
.L6201:
	.word	.LANCHOR4-2880
	.word	.LANCHOR5-4008
	.word	.LANCHOR4-2848
	.word	.LANCHOR5-3988
	.fnend
	.size	frmnet_disconnect, .-frmnet_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_cmd_complete, %function
frmnet_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	ldr	r5, [r1, #32]
	.pad #12
	sub	sp, sp, #12
	cmp	r5, #0
	beq	.L6211
	ldr	r0, .L6213
	mov	r4, r1
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L6212
.L6205:
	ldr	lr, [r5, #96]
	cmp	lr, #0
	beq	.L6203
	ldrb	r0, [r5, #116]	@ zero_extendqisi2
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r4]
	ldr	r2, [r4, #48]
	add	r0, r0, r0, lsl #1
	add	r3, r3, r0, lsl #3
	ldrb	r0, [r3, #3328]	@ zero_extendqisi2
	mov	r3, lr
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	bx	r3
.L6212:
	ldrb	ip, [r5, #116]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC157
	mov	r3, r5
	movt	r1, #:upper16:.LC157
	ldr	r2, .L6213+4
	sub	r0, r0, #24
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L6205
.L6203:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L6211:
	ldr	r1, .L6213+4
	movw	r0, #:lower16:.LC565
	movt	r0, #:upper16:.LC565
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	printk
.L6214:
	.align	2
.L6213:
	.word	.LANCHOR4-2832
	.word	.LANCHOR5-3964
	.fnend
	.size	frmnet_cmd_complete, .-frmnet_cmd_complete
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_init, %function
gether_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LC566
	push	{r4, lr}
	.save {r4, lr}
	movt	r2, #:upper16:.LC566
	mov	r4, #0
	.pad #8
	sub	sp, sp, #8
	mov	r1, #10
	movw	r0, #:lower16:.LC84
	mov	r3, r4
	str	r4, [sp]
	movt	r1, 2
	movt	r0, #:upper16:.LC84
	str	r2, [sp, #4]
	mov	r2, #1
	bl	__alloc_workqueue_key
	movw	r3, #:lower16:.LANCHOR1
	cmp	r0, r4
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3404]
	movne	r0, r4
	bne	.L6215
	ldr	r2, .L6219
	movw	r0, #:lower16:.LC567
	movt	r0, #:upper16:.LC567
	mov	r1, r2
	bl	printk
	mvn	r0, #11
.L6215:
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L6220:
	.align	2
.L6219:
	.word	.LANCHOR5-3944
	.fnend
	.size	gether_init, .-gether_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	init, %function
init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r3, #:lower16:.LANCHOR0
	movw	lr, #:lower16:android_setup
	movt	r3, #:upper16:.LANCHOR0
	ldr	r4, .L6227
	movt	lr, #:upper16:android_setup
	movw	r0, #:lower16:android_disconnect
	movt	r0, #:upper16:android_disconnect
	movw	ip, #:lower16:android_suspend
	movw	r1, #:lower16:android_resume
	movw	r2, #:lower16:.LANCHOR1
	str	lr, [r3, #1100]
	movt	r2, #:upper16:.LANCHOR1
	movt	ip, #:upper16:android_suspend
	str	r0, [r3, #1104]
	movt	r1, #:upper16:android_resume
	mov	lr, #0
	add	r0, r3, #292
	str	r4, [r2, #3308]
	str	r4, [r2, #3312]
	str	ip, [r3, #1108]
	str	r1, [r3, #1112]
	str	lr, [r2, #3640]
	bl	platform_driver_register
	subs	r4, r0, #0
	beq	.L6221
	ldr	r2, .L6227+4
	movw	r0, #:lower16:.LC568
	movt	r0, #:upper16:.LC568
	mov	r1, r2
	bl	printk
.L6221:
	mov	r0, r4
	pop	{r4, pc}
.L6228:
	.align	2
.L6227:
	.word	.LANCHOR1+3308
	.word	.LANCHOR5-3932
	.fnend
	.size	init, .-init
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_flush, %function
conn_gadget_flush:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r0, #:lower16:.LC569
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	movt	r0, #:upper16:.LC569
	ldr	r4, [r3, #2484]
	bl	printk
	cmp	r4, #0
	beq	.L6233
	mov	r1, #1
	add	r0, r4, #200
	mov	r2, r1
	mov	r3, #0
	str	r1, [r4, #216]
	mov	r1, #3
	bl	__wake_up
	mov	r0, #0
.L6229:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6233:
	movw	r0, #:lower16:.LC570
	ldr	r1, .L6234
	movt	r0, #:upper16:.LC570
	bl	printk
	mvn	r0, #18
	b	.L6229
.L6235:
	.align	2
.L6234:
	.word	.LANCHOR5-3924
	.fnend
	.size	conn_gadget_flush, .-conn_gadget_flush
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_disconnect_w, %function
grmnet_ctrl_smd_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #-164]
	cmp	r0, #0
	beq	.L6237
	bl	smd_close
	mov	r3, #0
	str	r3, [r4, #-164]
.L6237:
	ldr	r3, [r4, #-156]
	tst	r3, #2
	bne	.L6238
	ldr	r3, [r4, #-156]
	tst	r3, #4
	beq	.L6236
.L6238:
	sub	r1, r4, #156
	mov	r0, #2
	bl	_clear_bit
	ldr	r0, [r4, #-64]
	mov	r2, #84
	ldr	r3, .L6244
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	mla	r0, r2, r0, r3
	add	r0, r0, #4
	b	platform_driver_unregister
.L6236:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6245:
	.align	2
.L6244:
	.word	.LANCHOR1+512
	.fnend
	.size	grmnet_ctrl_smd_disconnect_w, .-grmnet_ctrl_smd_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_disconnect_w, %function
ghsuart_ctrl_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #36]
	mov	r3, r0
	tst	r2, #1
	bne	.L6248
	bx	lr
.L6248:
	mov	r2, #0
	add	r1, r0, #36
	mov	r0, #2
	str	r2, [r3, #-36]
	b	_clear_bit
	.fnend
	.size	ghsuart_ctrl_disconnect_w, .-ghsuart_ctrl_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_disconnect_w, %function
ghsuart_data_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #60]
	mov	r3, r0
	tst	r2, #1
	bne	.L6251
	bx	lr
.L6251:
	mov	r2, #0
	add	r1, r0, #60
	mov	r0, #2
	str	r2, [r3, #-100]
	b	_clear_bit
	.fnend
	.size	ghsuart_data_disconnect_w, .-ghsuart_data_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_write_tomdm, %function
ghsuart_data_write_tomdm:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	subs	r5, r0, #144
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	beq	.L6252
	ldr	r3, [r0, #-140]
	cmp	r3, #0
	bne	.L6296
.L6252:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6296:
	sub	r6, r0, #40
	mov	r4, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #40]
	mov	r8, r0
	ubfx	r3, r3, #1, #1
	cmp	r3, #0
	bne	.L6262
	mov	r2, r4
	ldr	r7, [r2, #-56]!
	cmp	r7, r2
	beq	.L6256
	cmp	r7, #0
	beq	.L6256
	ldr	r2, [r4, #-48]
	ldr	r0, .L6304
	sub	r2, r2, #1
	str	r2, [r4, #-48]
	ldm	r7, {r1, r2}
	str	r3, [r7]
	str	r3, [r7, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L6297
.L6258:
	ldr	r1, .L6304+4
	ldr	r0, .L6304+8
	bl	___ratelimit
	cmp	r0, #0
	bne	.L6298
.L6255:
	ldr	r3, [r4, #68]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #68]
	bl	dev_kfree_skb_any
.L6256:
	mov	r0, r6
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, .L6304+12
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L6299
.L6259:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r4, #-132]
	mov	r8, r0
	cmp	r7, #0
	beq	.L6262
	ldr	r3, [r4, #40]
	tst	r3, #2
	bne	.L6262
	sub	r3, r4, #64
	movw	r9, #:lower16:.LANCHOR0
	movt	r9, #:upper16:.LANCHOR0
	str	r3, [sp, #12]
	b	.L6261
.L6301:
	ldr	r5, [r4, #-64]
	ldr	r0, [sp, #12]
	sub	r10, r5, #36
	cmp	r5, r0
	beq	.L6262
	ldr	r0, [r9, #1200]
	bl	__alloc_skb
	subs	fp, r0, #0
	mov	r0, r5
	beq	.L6262
	bl	list_del
	ldr	r2, [fp, #172]
	mov	r1, r8
	mov	r0, r6
	str	r2, [r5, #-36]
	ldr	r2, [r9, #1200]
	str	r2, [r5, #-32]
	str	fp, [r5, #-4]
	bl	_raw_spin_unlock_irqrestore
	ldr	ip, [r7, #8]
	mov	r2, #208
	mov	r1, r10
	mov	r0, r7
	ldr	r8, [ip, #16]
	blx	r8
	mov	r2, r0
	mov	r0, r6
	str	r2, [sp, #8]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [sp, #8]
	mov	r8, r0
	cmp	r2, #0
	bne	.L6300
.L6261:
	ldr	r0, [r4, #-140]
	mov	r2, #0
	mvn	r3, #0
	mov	r1, #32
	cmp	r0, r2
	bne	.L6301
.L6262:
	mov	r1, r8
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L6299:
	movw	r1, #:lower16:.LC552
	mov	r3, r5
	ldr	r2, .L6304+16
	movt	r1, #:upper16:.LC552
	sub	r0, r0, #24
	bl	__dynamic_pr_debug
	b	.L6259
.L6300:
	ldr	r9, .L6304+16
	mov	r0, fp
	bl	dev_kfree_skb_any
	ldr	r0, .L6304+20
	mov	r1, r9
	bl	___ratelimit
	cmp	r0, #0
	bne	.L6302
.L6263:
	ldr	r3, [r4, #-140]
	cmp	r3, #0
	bne	.L6303
	ldr	r3, [r7, #8]
	mov	r1, r10
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L6262
.L6297:
	ldr	lr, [r4, #-144]
	movw	r1, #:lower16:.LC571
	mov	r3, r5
	ldr	ip, [r4, #60]
	movt	r1, #:upper16:.LC571
	sub	r0, r0, #32
	ldr	r2, .L6304+4
	stm	sp, {ip, lr}
	bl	__dynamic_pr_debug
	b	.L6258
.L6303:
	mov	r0, r5
	ldr	r2, [r4, #-64]
	ldr	r1, [sp, #12]
	bl	__list_add
	b	.L6262
.L6298:
	movw	r0, #:lower16:.LC126
	mvn	r2, #18
	ldr	r1, .L6304+4
	movt	r0, #:upper16:.LC126
	bl	printk
	b	.L6255
.L6302:
	movw	r0, #:lower16:.LC572
	mov	r1, r9
	movt	r0, #:upper16:.LC572
	bl	printk
	b	.L6263
.L6305:
	.align	2
.L6304:
	.word	.LANCHOR4-2800
	.word	.LANCHOR5-3904
	.word	.LANCHOR0+1176
	.word	.LANCHOR4-2784
	.word	.LANCHOR5-3876
	.word	.LANCHOR0+1204
	.fnend
	.size	ghsuart_data_write_tomdm, .-ghsuart_data_write_tomdm
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_write_tohost, %function
ghsuart_data_write_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #160
	bxeq	lr
	ldr	r3, [r0, #-156]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	sub	r8, r0, #88
	strd	r10, [sp, #24]
	mov	r0, r8
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r4, #-152]
	mov	r10, r0
	cmp	r9, #0
	beq	.L6309
	ldr	r3, [r4, #-112]
	sub	r2, r4, #112
	str	r2, [sp, #8]
	cmp	r2, r3
	beq	.L6309
	ldr	r5, [r4, #-104]
	sub	r3, r4, #104
	str	r3, [sp, #12]
	cmp	r5, r3
	beq	.L6309
	movw	fp, #:lower16:.LANCHOR0
	mov	r7, #0
	movt	fp, #:upper16:.LANCHOR0
	mov	r3, fp
	mov	fp, r0
	mov	r10, r3
	b	.L6310
.L6330:
	ldr	r3, [r4, #-96]
	sub	r3, r3, #1
	str	r3, [r4, #-96]
	ldrd	r2, [r5]
	str	r7, [r5]
	str	r7, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r6, [r4, #-112]
	str	r5, [r6, #-4]
	ldr	r2, [r5, #172]
	sub	r3, r6, #36
	str	r2, [r6, #-36]
	ldr	r2, [r5, #80]
	str	r2, [r6, #-32]
	ldr	r2, [r4, #32]
	ldr	r0, [r10, #1228]
	add	r2, r2, #1
	cmp	r2, r0
	mov	r0, r6
	str	r2, [r4, #32]
	ldrb	r2, [r6, #-10]	@ zero_extendqisi2
	bfieq	r2, r7, #0, #1
	orrne	r2, r2, #1
	strbeq	r2, [r6, #-10]
	strbne	r2, [r6, #-10]
	streq	r7, [r4, #32]
	str	r3, [sp, #4]
	bl	list_del
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #4]
	mov	r2, #208
	mov	r0, r9
	ldr	ip, [r9, #8]
	mov	r1, r3
	ldr	r3, [ip, #16]
	blx	r3
	mov	r3, r0
	mov	r0, r8
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #4]
	mov	fp, r0
	cmp	r3, #0
	bne	.L6329
	ldr	r2, [r4, #-112]
	ldr	r3, [r4, #48]
	ldr	r1, [sp, #8]
	add	r3, r3, #1
	cmp	r1, r2
	str	r3, [r4, #48]
	beq	.L6325
	ldr	r5, [r4, #-104]
	ldr	r3, [sp, #12]
	cmp	r5, r3
	beq	.L6325
.L6310:
	cmp	r5, #0
	bne	.L6330
.L6325:
	mov	r10, fp
.L6309:
	mov	r1, r10
	mov	r0, r8
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L6329:
	mov	r10, r0
	movw	r0, #:lower16:.LC573
	ldr	r1, .L6331
	movt	r0, #:upper16:.LC573
	bl	printk
	ldr	r1, [sp, #8]
	mov	r0, r6
	ldr	r2, [r4, #-112]
	bl	__list_add
	mov	r0, r5
	bl	dev_kfree_skb_any
	b	.L6309
.L6332:
	.align	2
.L6331:
	.word	.LANCHOR5-3852
	.fnend
	.size	ghsuart_data_write_tohost, .-ghsuart_data_write_tohost
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_close_sdio_work, %function
rmnet_close_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L6384
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L6380
.L6334:
	ldr	r3, [r4, #-112]
	cmp	r3, #0
	beq	.L6333
	ldr	r0, [r4, #-208]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6337
	blx	r3
.L6337:
	sub	r5, r4, #116
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-204]
	mov	r2, #0
	mvn	ip, #94
	mov	r1, r0
	mov	r0, r5
	ldr	r3, [r3]
	strb	ip, [r3]
	strb	r2, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	ldrb	ip, [r4, #-200]	@ zero_extendqisi2
	strh	ip, [r3, #4]	@ unaligned
	strb	r2, [r3, #6]
	strb	r2, [r3, #7]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r0, [r4, #-208]
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	blt	.L6381
.L6338:
	ldr	r0, [r4, #-216]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6340
	blx	r3
.L6340:
	ldr	r0, [r4, #-212]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6341
	blx	r3
.L6341:
	sub	r0, r4, #68
	bl	cancel_work_sync
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-112]
	mov	r6, r0
	cmp	r3, #0
	subne	r9, r4, #172
	movne	r8, #0
	bne	.L6342
.L6352:
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L6381:
	ldr	r3, [r4, #-112]
	cmp	r3, #0
	bne	.L6382
.L6333:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L6380:
	movw	r1, #:lower16:.LC267
	sub	r0, r3, #32
	ldr	r2, .L6384+4
	movt	r1, #:upper16:.LC267
	bl	__dynamic_pr_debug
	b	.L6334
.L6343:
	bl	list_del
	ldr	r3, [r4, #-164]
	mov	r0, #0
	sub	r3, r3, #1
	str	r3, [r4, #-164]
	str	r8, [r7, #-36]
	ldr	r7, [r4, #-216]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L6342:
	ldr	r7, [r4, #-172]
	cmp	r7, r9
	mov	r0, r7
	sub	r10, r7, #36
	bne	.L6343
	sub	r9, r4, #144
	mov	r8, #0
	b	.L6344
.L6345:
	bl	list_del
	ldr	r3, [r4, #-136]
	mov	r0, #0
	sub	r3, r3, #1
	str	r3, [r4, #-136]
	str	r8, [r7, #-36]
	ldr	r7, [r4, #-212]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L6344:
	ldr	r7, [r4, #-144]
	cmp	r7, r9
	mov	r0, r7
	sub	r10, r7, #36
	bne	.L6345
	sub	r8, r4, #196
	b	.L6346
.L6347:
	bl	list_del
	ldr	r3, [r4, #-188]
	sub	r3, r3, #1
	str	r3, [r4, #-188]
	ldr	r0, [r7, #-8]
	bl	kfree
	mov	r0, r9
	bl	kfree
.L6346:
	ldr	r7, [r4, #-196]
	cmp	r7, r8
	mov	r0, r7
	sub	r9, r7, #8
	bne	.L6347
	sub	r8, r4, #184
	b	.L6348
.L6349:
	bl	list_del
	ldr	r3, [r4, #-176]
	sub	r3, r3, #1
	str	r3, [r4, #-176]
	ldr	r0, [r7, #-8]
	bl	kfree
	mov	r0, r9
	bl	kfree
.L6348:
	ldr	r7, [r4, #-184]
	cmp	r7, r8
	mov	r0, r7
	sub	r9, r7, #8
	bne	.L6349
	mov	r7, #0
	movw	r0, #:lower16:.LC574
	ldr	r1, .L6384+4
	movt	r0, #:upper16:.LC574
	sub	r8, r4, #160
	str	r7, [r4, #-108]
	bl	printk
	ldr	r3, [r4, #-160]
	cmp	r3, r8
	bne	.L6351
	b	.L6350
.L6383:
	ldr	r2, [r4, #-152]
	sub	r2, r2, #1
	str	r2, [r4, #-152]
	ldm	r3, {r1, r2}
	str	r7, [r3]
	str	r7, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #-160]
	cmp	r3, r8
	beq	.L6350
.L6351:
	subs	r0, r3, #0
	bne	.L6383
.L6350:
	ldr	r3, [r4, #-132]
	sub	r8, r4, #132
	cmp	r3, r8
	beq	.L6352
	mov	r7, #0
.L6353:
	subs	r0, r3, #0
	beq	.L6352
	ldr	r2, [r4, #-124]
	sub	r2, r2, #1
	str	r2, [r4, #-124]
	ldm	r3, {r1, r2}
	str	r7, [r3]
	str	r7, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #-132]
	cmp	r3, r8
	bne	.L6353
	b	.L6352
.L6382:
	movw	r0, #:lower16:.LC563
	ldr	r1, .L6384+4
	movt	r0, #:upper16:.LC563
	bl	printk
	b	.L6338
.L6385:
	.align	2
.L6384:
	.word	.LANCHOR4-2752
	.word	.LANCHOR5-3824
	.fnend
	.size	rmnet_close_sdio_work, .-rmnet_close_sdio_work
	.align	2
	.global	usb_gadget_connect_work
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_gadget_connect_work, %function
usb_gadget_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r2, .L6391
	movw	r4, #:lower16:speaker_status
	str	r6, [sp, #8]
	movt	r4, #:upper16:speaker_status
	mov	r5, r0
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	ldr	r6, [r0, #-444]
	ldr	ip, [r0, #52]
	movw	r0, #:lower16:.LC575
	ldr	r3, [r4]
	mov	r1, r2
	movt	r0, #:upper16:.LC575
	str	ip, [sp]
	bl	printk
	ldr	r3, [r4]
	cmp	r3, #0
	ble	.L6387
	ldr	r3, [r5, #52]
	add	r3, r3, #1
	cmp	r3, #59
	str	r3, [r5, #52]
	ble	.L6390
.L6387:
	ldr	r0, [r6]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L6386
	mov	r1, #1
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	bx	r3
.L6390:
	mov	r0, #50
	bl	msecs_to_jiffies
	movw	r1, #:lower16:system_wq
	mov	r3, r0
	movt	r1, #:upper16:system_wq
	mov	r2, r5
	ldr	r1, [r1]
	mov	r0, #4
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_delayed_work_on
.L6386:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6392:
	.align	2
.L6391:
	.word	.LANCHOR5-3800
	.fnend
	.size	usb_gadget_connect_work, .-usb_gadget_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_disconnect_work, %function
gbam_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-280]
	tst	r3, #2
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #-276]
	bl	msm_bam_dmux_close
	ldr	lr, [sp, #4]
	sub	r1, r4, #280
	mov	r0, #1
	ldr	r4, [sp]
	add	sp, sp, #8
	b	_clear_bit
	.fnend
	.size	gbam_disconnect_work, .-gbam_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam2bam_disconnect_work, %function
gbam2bam_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-168]
	cmp	r3, #7
	bxne	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	sub	r0, r0, #164
	str	lr, [sp, #4]
	bl	usb_bam_disconnect_ipa
	subs	r2, r0, #0
	bne	.L6409
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6409:
	movw	r0, #:lower16:.LC576
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC576
	add	sp, sp, #8
	ldr	r1, .L6410
	b	printk
.L6411:
	.align	2
.L6410:
	.word	.LANCHOR5-3776
	.fnend
	.size	gbam2bam_disconnect_work, .-gbam2bam_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam2bam_data_disconnect_work, %function
bam2bam_data_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-124]
	cmp	r3, #7
	bxne	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	sub	r0, r0, #120
	str	lr, [sp, #4]
	bl	usb_bam_disconnect_ipa
	subs	r2, r0, #0
	bne	.L6423
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6423:
	movw	r0, #:lower16:.LC576
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC576
	add	sp, sp, #8
	ldr	r1, .L6424
	b	printk
.L6425:
	.align	2
.L6424:
	.word	.LANCHOR5-3748
	.fnend
	.size	bam2bam_data_disconnect_work, .-bam2bam_data_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_function_init, %function
ncm_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r5, #:lower16:kmalloc_caches
	movt	r5, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	mov	r6, r0
	ldr	r0, [r5, #24]
	str	lr, [sp, #12]
	cmp	r0, #0
	beq	.L6431
	mov	r2, #16
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L6432
	ldr	r0, [r5, #24]
	cmp	r0, #0
	beq	.L6427
	mov	r2, #6
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r6, #4]
	beq	.L6437
.L6430:
	mov	ip, #65024
	movw	r1, #:lower16:ncm_work
	ldr	r0, .L6439
	mov	r3, r4
	movt	ip, 65535
	movt	r1, #:upper16:ncm_work
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	str	ip, [r3], #4
	str	r3, [r4, #4]
	str	r3, [r4, #8]
	str	r1, [r4, #12]
	str	r4, [r2, #3612]
	bl	misc_register
	cmp	r0, #0
	bne	.L6438
.L6426:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6431:
	mov	r4, #16
.L6427:
	mov	r3, #16
	str	r3, [r6, #4]
	b	.L6430
.L6437:
	mov	r0, r4
	bl	kfree
	mvn	r0, #11
	b	.L6426
.L6432:
	mvn	r0, #11
	b	.L6426
.L6438:
	movw	r0, #:lower16:.LC577
	ldr	r1, .L6439+4
	movt	r0, #:upper16:.LC577
	bl	printk
	mov	r0, #0
	b	.L6426
.L6440:
	.align	2
.L6439:
	.word	.LANCHOR0+748
	.word	.LANCHOR5-3716
	.fnend
	.size	ncm_function_init, .-ncm_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	show_timestamp, %function
show_timestamp:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #3664]
	.pad #28
	sub	sp, sp, #28
	cmp	r0, #0
	moveq	r4, r0
	beq	.L6441
	mov	fp, r3
	movw	r3, #:lower16:kmalloc_caches
	str	r1, [sp, #16]
	movt	r3, #:upper16:kmalloc_caches
	str	r2, [sp, #20]
	ldr	r0, [r3, #48]
	cmp	r0, #0
	beq	.L6450
	mov	r2, #4096
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L6454
.L6443:
	ldr	r7, .L6455
	add	r0, r7, #4
	bl	_raw_read_lock_irqsave
	ldr	r3, [r7]
	str	r0, [sp, #12]
	add	r4, r3, #1
	and	r4, r4, #31
	cmp	r3, r4
	moveq	r5, #0
	beq	.L6445
	movw	r8, #:lower16:.LC82
	mov	r5, #0
	movt	r8, #:upper16:.LC82
	sub	r9, r7, #4096
.L6444:
	add	r10, r9, r4, lsl #7
	mov	r1, #128
	mov	r0, r10
	bl	strnlen
	cmp	r0, #0
	rsb	r1, r5, #4096
	mov	r3, r10
	mov	r2, r8
	add	ip, r4, #1
	add	r0, r6, r5
	beq	.L6446
	bl	scnprintf
	ldr	r3, [r7]
	add	r4, r4, #1
	add	r5, r5, r0
	and	r4, r4, #31
	cmp	r3, r4
	bne	.L6444
.L6445:
	ldr	r0, .L6455+4
	ldr	r1, [sp, #12]
	bl	_raw_read_unlock_irqrestore
	ldrd	r0, [sp, #16]
	mov	r2, fp
	mov	r3, r6
	str	r5, [sp]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r6
	bl	kfree
.L6441:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6446:
	ldr	r3, [r7]
	and	r4, ip, #31
	cmp	r4, r3
	bne	.L6444
	b	.L6445
.L6450:
	mov	r6, #16
	b	.L6443
.L6454:
	mvn	r4, #11
	b	.L6441
.L6456:
	.align	2
.L6455:
	.word	dbg_data+4096
	.word	dbg_data+4100
	.fnend
	.size	show_timestamp, .-show_timestamp
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_connect_w, %function
ghsic_data_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r3, r0, #88
	bxeq	lr
	ldr	r2, [r0, #-84]
	cmp	r2, #0
	bxeq	lr
	ldr	r2, [r0, #92]
	tst	r2, #2
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	ldr	r0, .L6476
	str	lr, [sp, #4]
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L6475
.L6459:
	movw	r0, #:lower16:.LC578
	ldr	r2, [r4, #68]
	mvn	r3, #18
	ldr	r4, [sp]
	movt	r0, #:upper16:.LC578
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r1, .L6476+4
	b	printk
.L6475:
	movw	r1, #:lower16:.LC552
	ldr	r2, .L6476+4
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC552
	bl	__dynamic_pr_debug
	b	.L6459
.L6477:
	.align	2
.L6476:
	.word	.LANCHOR4-2736
	.word	.LANCHOR5-3696
	.fnend
	.size	ghsic_data_connect_w, .-ghsic_data_connect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_connect_w, %function
ghsuart_ctrl_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r3, r0, #36
	bxeq	lr
	ldr	r2, [r0, #52]
	tst	r2, #2
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	ldr	r0, .L6498
	str	r6, [sp, #8]
	ldr	r5, .L6498+4
	str	lr, [sp, #12]
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L6493
.L6480:
	ldr	r3, [r4, #52]
	tst	r3, #1
	beq	.L6481
	mov	r1, #900
	sub	r0, r4, #20
	bl	wait_for_completion_timeout
	cmp	r0, #0
	movweq	r0, #:lower16:.LC579
	subeq	r1, r5, #8
	movteq	r0, #:upper16:.LC579
	beq	.L6497
.L6481:
	movw	r0, #:lower16:.LC580
	sub	r1, r5, #8
	movt	r0, #:upper16:.LC580
.L6497:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L6493:
	movw	r1, #:lower16:.LC552
	sub	r2, r5, #8
	movt	r1, #:upper16:.LC552
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L6480
.L6499:
	.align	2
.L6498:
	.word	.LANCHOR4-2704
	.word	.LANCHOR5-3664
	.fnend
	.size	ghsuart_ctrl_connect_w, .-ghsuart_ctrl_connect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_connect_w, %function
ghsuart_data_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r3, r0, #112
	bxeq	lr
	ldr	r2, [r0, #-108]
	cmp	r2, #0
	bxeq	lr
	ldr	r2, [r0, #76]
	tst	r2, #2
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	ldr	r0, .L6524
	str	lr, [sp, #4]
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L6522
.L6502:
	ldr	r3, [r4, #76]
	tst	r3, #1
	beq	.L6503
	mov	r1, #900
	sub	r0, r4, #84
	bl	wait_for_completion_timeout
	cmp	r0, #0
	beq	.L6523
.L6503:
	movw	r0, #:lower16:.LC581
	ldr	r2, [r4, #68]
	mvn	r3, #18
	ldr	r4, [sp]
	movt	r0, #:upper16:.LC581
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r1, .L6524+4
	b	printk
.L6523:
	movw	r0, #:lower16:.LC579
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC579
	add	sp, sp, #8
	ldr	r1, .L6524+4
	b	printk
.L6522:
	movw	r1, #:lower16:.LC552
	ldr	r2, .L6524+4
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC552
	bl	__dynamic_pr_debug
	b	.L6502
.L6525:
	.align	2
.L6524:
	.word	.LANCHOR4-2688
	.word	.LANCHOR5-3648
	.fnend
	.size	ghsuart_data_connect_w, .-ghsuart_data_connect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	str_to_xport, %function
str_to_xport:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movw	r0, #:lower16:.LC582
	mov	r1, r4
	movt	r0, #:upper16:.LC582
	str	lr, [sp, #4]
	mov	r2, #12
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #1
	beq	.L6526
	movw	r0, #:lower16:.LC583
	mov	r2, #12
	movt	r0, #:upper16:.LC583
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #2
	beq	.L6526
	movw	r0, #:lower16:.LC584
	mov	r2, #12
	movt	r0, #:upper16:.LC584
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #3
	beq	.L6526
	movw	r0, #:lower16:.LC585
	mov	r2, #12
	movt	r0, #:upper16:.LC585
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #4
	beq	.L6526
	movw	r0, #:lower16:.LC586
	mov	r2, #12
	movt	r0, #:upper16:.LC586
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #5
	beq	.L6526
	movw	r0, #:lower16:.LC587
	mov	r2, #12
	movt	r0, #:upper16:.LC587
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #6
	beq	.L6526
	movw	r0, #:lower16:.LC588
	mov	r2, #12
	movt	r0, #:upper16:.LC588
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #7
	beq	.L6526
	movw	r0, #:lower16:.LC589
	mov	r2, #12
	movt	r0, #:upper16:.LC589
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #8
	beq	.L6526
	movw	r0, #:lower16:.LC590
	mov	r2, #12
	movt	r0, #:upper16:.LC590
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #9
	beq	.L6526
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #0
	moveq	r0, #10
	movne	r0, #0
.L6526:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	str_to_xport, .-str_to_xport
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	hid_function_bind_config, %function
hid_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC591
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	movt	r0, #:upper16:.LC591
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	printk
	mov	r0, r5
	mov	r2, #0
	ldr	r1, .L6548
	bl	hidg_bind_config
	subs	r4, r0, #0
	bne	.L6546
	movw	r0, #:lower16:.LC593
	movt	r0, #:upper16:.LC593
	bl	printk
	mov	r0, r5
	mov	r2, #1
	ldr	r1, .L6548+4
	bl	hidg_bind_config
	subs	r4, r0, #0
	bne	.L6547
.L6539:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6546:
	ldr	r2, .L6548+8
	movw	r0, #:lower16:.LC592
	mov	r3, r4
	movt	r0, #:upper16:.LC592
	mov	r1, r2
	bl	printk
	b	.L6539
.L6547:
	ldr	r2, .L6548+8
	movw	r0, #:lower16:.LC594
	mov	r3, r4
	movt	r0, #:upper16:.LC594
	mov	r1, r2
	bl	printk
	b	.L6539
.L6549:
	.align	2
.L6548:
	.word	.LANCHOR0+1232
	.word	.LANCHOR0+1304
	.word	.LANCHOR5-3624
	.fnend
	.size	hid_function_bind_config, .-hid_function_bind_config
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	__ffs_event_add.part.71, %function
__ffs_event_add.part.71:
	.fnstart
	@ Volatile: function does not return.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	.syntax divided
@ 2155 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 2155, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
	.fnend
	.size	__ffs_event_add.part.71, .-__ffs_event_add.part.71
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_setup, %function
ffs_func_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #-28]
	ldr	r3, [r5, #92]
	cmp	r3, #2
	bne	.L6562
	ldrb	r3, [r1]	@ zero_extendqisi2
	and	r3, r3, #31
	cmp	r3, #1
	beq	.L6553
	cmp	r3, #2
	beq	.L6554
	mvn	r4, #94
.L6551:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6554:
	ldrh	r3, [r1, #4]	@ unaligned
	and	r3, r3, #15
	add	r0, r0, r3
	ldrb	r4, [r0, #-20]	@ zero_extendqisi2
	cmp	r4, #0
	beq	.L6565
.L6556:
	add	r6, r5, #116
	mov	r8, r1
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r1, [r5, #96]
	mov	r7, r0
	ldr	r2, [r8]	@ unaligned
	ldr	r3, [r8, #4]	@ unaligned
	ldrh	r0, [r5, #104]
	cmp	r1, #1
	strd	r2, [r5, #108]
	moveq	r3, #2
	add	r2, r5, #100
	strh	r4, [r5, #112]	@ movhi
	mov	ip, r2
	streq	r3, [r5, #96]
	cmp	r0, #0
	beq	.L6566
	add	r0, r0, r2
	mov	r3, r2
.L6561:
	ldrb	r1, [r3], #1	@ zero_extendqisi2
	cmp	r1, #4
	strbne	r1, [r2]
	addne	r2, r2, #1
	cmp	r0, r3
	bne	.L6561
	sub	r2, r2, ip
	add	r3, r2, #1
	uxth	r0, r2
	uxth	r3, r3
.L6559:
	add	r0, r5, r0
	strh	r3, [r5, #104]	@ movhi
	mov	ip, #4
	mov	r2, #1
	mov	r1, #3
	mov	r4, #0
	strb	ip, [r0, #100]
	mov	r0, r6
	bl	__wake_up_locked
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L6551
.L6553:
	ldrh	ip, [r5, #178]
	ldrh	lr, [r1, #4]	@ unaligned
	ldr	r4, [r0, #-4]
	cmp	ip, #0
	uxtb	lr, lr
	beq	.L6565
	mov	r2, r4
.L6557:
	mov	r3, r2
	ldrsh	r0, [r3], #2
	cmp	r0, #0
	blt	.L6555
	cmp	r0, lr
	beq	.L6574
.L6555:
	subs	ip, ip, #1
	mov	r2, r3
	bne	.L6557
.L6565:
	mvn	r4, #32
	b	.L6551
.L6574:
	sub	r2, r2, r4
	cmp	r2, #0
	asr	r4, r2, #1
	bge	.L6556
	b	.L6551
.L6566:
	mov	r3, #1
	b	.L6559
.L6562:
	mvn	r4, #18
	b	.L6551
	.fnend
	.size	ffs_func_setup, .-ffs_func_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_read, %function
ffs_epfile_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L6629
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r3, r2, #1
	strd	r6, [sp, #8]
	mvn	r3, r3, lsr #10
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	fp, r2
	mvn	r3, r3, lsl #10
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #52
	sub	sp, sp, #52
	ldrh	r2, [ip, #-14]
	add	r3, r3, #1
	mov	r10, r0
	str	r1, [sp, #20]
	ldr	r1, [r4, #36]
	str	r3, [sp, #12]
	tst	r2, #4
	str	r1, [sp, #16]
	bne	.L6619
.L6576:
	ldr	r6, [r4, #32]
	cmp	r6, #0
	bne	.L6600
	ldr	r3, [r4, #36]
	ldr	r3, [r3, #92]
	cmp	r3, #2
	bne	.L6578
	mov	r3, sp
	bic	r7, r3, #8128
	bic	r7, r7, #63
.L6579:
	ldr	r5, [r4, #40]
	cmp	r5, #0
	beq	.L6620
.L6598:
	ldrb	r9, [r4, #53]	@ zero_extendqisi2
	cmp	r9, #0
	beq	.L6584
	ldrb	r3, [r4, #54]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L6621
.L6585:
	ldr	r3, [r10, #32]
	mov	r0, r4
	tst	r3, #2048
	bne	.L6622
	bl	mutex_lock_interruptible
	subs	r8, r0, #0
	bne	.L6580
.L6589:
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #40]
	cmp	r3, r5
	bne	.L6623
	cmp	r9, #0
	bne	.L6624
	ldr	r7, [r5, #4]
	movw	r3, #:lower16:ffs_epfile_io_complete
	mov	r2, #32
	ldr	r0, [sp, #12]
	movt	r3, #:upper16:ffs_epfile_io_complete
	ldr	r8, [sp, #16]
	str	r6, [r7]
	mov	r1, r7
	str	r0, [r7, #4]
	str	r3, [r7, #28]
	str	r9, [r8, #68]!
	str	r8, [r7, #32]
	ldr	r0, [r5]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
	cmp	r9, #0
	blt	.L6607
	mov	r0, r8
	bl	wait_for_completion_interruptible
	cmp	r0, #0
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bne	.L6625
	bl	_raw_spin_lock_irq
	ldr	r0, [r4, #36]
	ldr	r3, [r4, #40]
	cmp	r5, r3
	beq	.L6595
	add	r0, r0, #24
	mvn	r8, #18
	bl	_raw_spin_unlock_irq
.L6592:
	mov	r0, r4
	bl	mutex_unlock
.L6580:
	mov	r0, r6
	bl	kfree
.L6575:
	mov	r0, r8
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6622:
	bl	mutex_trylock
	cmp	r0, #0
	bne	.L6589
.L6606:
	mvn	r8, #10
	b	.L6580
.L6584:
	cmp	r6, #0
	bne	.L6585
	movw	r1, #32976
	ldr	r0, [sp, #12]
	bl	__kmalloc
	subs	r6, r0, #0
	bne	.L6585
	mvn	r8, #11
	b	.L6575
.L6620:
	ldr	r3, [r10, #32]
	tst	r3, #2048
	bne	.L6606
	ldr	r3, [r4, #32]
	cmp	r3, #0
	bne	.L6603
	ldr	r0, [r7, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #40
	movt	r2, #:upper16:autoremove_wake_function
	add	r8, r4, #20
	str	r3, [sp, #28]
	str	r1, [sp, #40]
	str	r0, [sp, #32]
	str	r2, [sp, #36]
	str	r1, [sp, #44]
	b	.L6583
.L6626:
	bl	schedule
.L6583:
	mov	r2, #1
	add	r1, sp, #28
	mov	r0, r8
	bl	prepare_to_wait
	ldr	r5, [r4, #40]
	cmp	r5, #0
	bne	.L6581
	ldr	r3, [r7, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L6626
	mov	r0, r8
	add	r1, sp, #28
	mov	r8, #65024
	bl	finish_wait
	movt	r8, 65535
	b	.L6580
.L6581:
	add	r1, sp, #28
	mov	r0, r8
	bl	finish_wait
	b	.L6598
.L6595:
	ldr	r8, [r5, #24]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
	cmp	r8, #0
	ble	.L6592
	cmp	fp, r8
	mvncc	r8, #74
	bcc	.L6592
	mov	r3, sp
	ldr	r1, [sp, #20]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r1, r8; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L6627
.L6596:
	mvn	r8, #13
	b	.L6592
.L6623:
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
	mov	r0, r4
	bl	mutex_unlock
	ldr	r3, [r4, #36]
	ldr	r3, [r3, #92]
	cmp	r3, #2
	beq	.L6579
.L6578:
	movw	r0, #:lower16:.LC33
	movw	r1, #785
	movt	r0, #:upper16:.LC33
	mvn	r8, #18
	bl	warn_slowpath_null
	b	.L6580
.L6619:
	mov	r2, r3
	mov	r3, #1
	movw	r1, #:lower16:.LC595
	sub	r0, ip, #32
	strd	r2, [sp]
	movt	r1, #:upper16:.LC595
	ldr	r2, .L6629+4
	mov	r3, fp
	bl	__dynamic_pr_debug
	b	.L6576
.L6624:
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L6628
	ldr	r3, [r0, #8]
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
.L6599:
	ldr	r0, [r4, #36]
	mvn	r8, #73
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
	b	.L6592
.L6607:
	mvn	r8, #4
	b	.L6592
.L6625:
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #40]
	cmp	r5, r3
	bne	.L6594
	ldr	r0, [r5]
	mov	r1, r7
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L6594:
	ldr	r0, [r4, #36]
	mvn	r8, #3
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
	b	.L6592
.L6603:
	mvn	r8, #18
	b	.L6580
.L6627:
	mov	r0, r1
	mov	r2, r8
	mov	r1, r6
	bl	__copy_to_user
	cmp	r0, #0
	beq	.L6592
	b	.L6596
.L6600:
	mvn	r8, #18
	b	.L6575
.L6621:
	mvn	r8, #21
	b	.L6580
.L6628:
	movw	r0, #:lower16:.LC33
	mov	r1, #860
	movt	r0, #:upper16:.LC33
	bl	warn_slowpath_null
	b	.L6599
.L6630:
	.align	2
.L6629:
	.word	.LANCHOR4-2656
	.word	.LANCHOR5-3596
	.fnend
	.size	ffs_epfile_read, .-ffs_epfile_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_resume, %function
frmnet_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L6653
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r5, #:lower16:.LANCHOR1
	str	r6, [sp, #8]
	mov	r6, r0
	movt	r5, #:upper16:.LANCHOR1
	str	lr, [sp, #12]
	ldrb	r0, [r0, #116]	@ zero_extendqisi2
	.pad #8
	sub	sp, sp, #8
	ldrh	r2, [r3, #-6]
	add	r3, r0, r0, lsl #1
	tst	r2, #4
	add	r3, r5, r3, lsl #3
	ldr	r4, [r3, #3316]
	bne	.L6650
.L6632:
	cmp	r4, #10
	bhi	.L6634
	mov	r3, #1
	lsl	r3, r3, r4
	tst	r3, #1824
	bne	.L6631
	tst	r3, #192
	beq	.L6634
	sub	r4, r4, #6
	cmp	r4, #1
	bls	.L6651
.L6631:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6651:
	add	r3, r0, r0, lsl #1
	ldr	r0, .L6653+4
	add	r3, r5, r3, lsl #3
	ldrh	r2, [r0, #-14]
	ldrb	r3, [r3, #3324]	@ zero_extendqisi2
	tst	r2, #4
	add	r2, r5, r3, lsl #2
	ldr	r4, [r2, #3668]
	bne	.L6652
.L6636:
	ldr	r1, [r5, #3532]
	add	r2, r4, #332
	mov	r0, #4
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on
.L6650:
	sub	r2, r4, #1
	cmp	r2, #9
	movwhi	r3, #:lower16:.LC182
	movthi	r3, #:upper16:.LC182
	bhi	.L6633
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r3, r3, r2, lsl #2
	ldr	r3, [r3, #1100]
.L6633:
	movw	r1, #:lower16:.LC596
	str	r6, [sp]
	ldr	r2, .L6653+8
	str	r0, [sp, #4]
	movt	r1, #:upper16:.LC596
	ldr	r0, .L6653+12
	bl	__dynamic_pr_debug
	ldrb	r0, [r6, #116]	@ zero_extendqisi2
	b	.L6632
.L6652:
	movw	r1, #:lower16:.LC597
	ldr	r2, .L6653+16
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC597
	bl	__dynamic_pr_debug
	b	.L6636
.L6634:
	sub	r4, r4, #1
	cmp	r4, #9
	bhi	.L6639
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r4, r3, r4, lsl #2
	ldr	r2, [r4, #1100]
.L6637:
	ldr	r1, .L6653+8
	movw	r0, #:lower16:.LC598
	movt	r0, #:upper16:.LC598
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L6639:
	movw	r2, #:lower16:.LC182
	movt	r2, #:upper16:.LC182
	b	.L6637
.L6654:
	.align	2
.L6653:
	.word	.LANCHOR4-2640
	.word	.LANCHOR4-2608
	.word	.LANCHOR5-3580
	.word	.LANCHOR4-2664
	.word	.LANCHOR5-3564
	.fnend
	.size	frmnet_resume, .-frmnet_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_add_header, %function
rndis_add_header:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r4, [r0, #124]	@ zero_extendqisi2
	cmp	r4, #0
	beq	.L6656
	ldr	r4, [r0, #144]
	cmp	r4, #0
	beq	.L6657
	mov	r1, #44
	mov	r0, r4
	bl	__memzero
	mov	r3, #0
	mov	r2, #1
	ldr	r0, .L6668
	mov	r1, #36
	strb	r2, [r4]
	strb	r3, [r4, #1]
	strb	r3, [r4, #2]
	strb	r3, [r4, #3]
	ldr	r2, [r5, #80]
	strb	r1, [r4, #8]
	strb	r3, [r4, #9]
	strb	r3, [r4, #10]
	add	r2, r2, #44
	str	r2, [r4, #4]	@ unaligned
	strb	r3, [r4, #11]
	ldr	r3, [r5, #80]
	str	r3, [r4, #12]	@ unaligned
	ldrh	r1, [r0, #-6]
	tst	r1, #4
	bne	.L6667
.L6658:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6656:
	mov	r1, #44
	mov	r0, r5
	bl	skb_realloc_headroom
	subs	r7, r0, #0
	beq	.L6659
	mov	r1, #44
	bl	skb_push
	mov	r1, #44
	mov	r6, r0
	bl	__memzero
	mov	r3, #1
	mov	r2, #36
	strb	r3, [r6]
	strb	r4, [r6, #1]
	strb	r4, [r6, #2]
	strb	r4, [r6, #3]
	ldr	r3, [r7, #80]
	str	r3, [r6, #4]	@ unaligned
	strb	r2, [r6, #8]
	strb	r4, [r6, #9]
	strb	r4, [r6, #10]
	strb	r4, [r6, #11]
	ldr	r3, [r7, #80]
	sub	r3, r3, #44
	str	r3, [r6, #12]	@ unaligned
.L6659:
	mov	r0, r5
	mov	r5, r7
	bl	dev_kfree_skb_any
	b	.L6658
.L6667:
	movw	r1, #:lower16:.LC599
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC599
	bl	__dynamic_pr_debug
	b	.L6658
.L6657:
	movw	r0, #:lower16:.LC600
	mov	r5, r4
	movt	r0, #:upper16:.LC600
	bl	printk
	b	.L6658
.L6669:
	.align	2
.L6668:
	.word	.LANCHOR4-2592
	.fnend
	.size	rndis_add_header, .-rndis_add_header
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_init.part.90, %function
rndis_init.part.90:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movw	r1, #:lower16:.LC601
	str	r6, [sp, #8]
	movw	r6, #:lower16:__stack_chk_guard
	movt	r4, #:upper16:.LANCHOR1
	movt	r6, #:upper16:__stack_chk_guard
	str	lr, [sp, #12]
	.pad #32
	sub	sp, sp, #32
	ldr	r3, [r6]
	movt	r1, #:upper16:.LC601
	mov	r2, #0
	add	r5, r4, #3680
	add	r0, sp, #8
	str	r3, [sp, #28]
	bl	sprintf
	add	r0, sp, #8
	ldr	r3, .L6686
	mov	r2, #0
	mov	r1, #432
	str	r5, [sp]
	bl	proc_create_data
	cmp	r0, #0
	bne	.L6671
	ldr	r4, .L6686+4
	ldrh	r3, [r4, #-14]
	tst	r3, #4
	bne	.L6683
.L6672:
	ldr	r3, .L6686+8
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L6684
.L6673:
	mvn	r0, #4
	b	.L6670
.L6671:
	mov	r2, #0
	mov	r3, r5
	mov	r1, #1
	mov	r0, r2
	strh	r2, [r3], #52	@ movhi
	str	r2, [r4, #3684]
	str	r1, [r4, #3696]
	str	r3, [r4, #3732]
	str	r3, [r4, #3736]
	strb	r1, [r4, #3740]
.L6670:
	ldr	r2, [sp, #28]
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L6685
	add	sp, sp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6683:
	movw	r1, #:lower16:.LC602
	ldr	r2, .L6686+12
	sub	r0, r4, #32
	movt	r1, #:upper16:.LC602
	bl	__dynamic_pr_debug
	b	.L6672
.L6684:
	movw	r1, #:lower16:.LC603
	sub	r0, r4, #8
	movt	r1, #:upper16:.LC603
	bl	__dynamic_pr_debug
	b	.L6673
.L6685:
	bl	__stack_chk_fail
.L6687:
	.align	2
.L6686:
	.word	.LANCHOR5-3552
	.word	.LANCHOR4-2560
	.word	.LANCHOR4-2544
	.word	.LANCHOR5-3444
	.fnend
	.size	rndis_init.part.90, .-rndis_init.part.90
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_setup.part.92, %function
bam_data_setup.part.92:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r2, #0
	movw	r0, #:lower16:.LC604
	strd	r6, [sp, #8]
	mov	r3, r2
	movt	r0, #:upper16:.LC604
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	mov	r1, #10
	movw	r4, #:lower16:.LANCHOR1
	str	r2, [sp]
	mov	r2, #1
	movt	r4, #:upper16:.LANCHOR1
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r4, #3744]
	beq	.L6699
	movw	r2, #:lower16:kmalloc_caches
	ldr	r3, [r4, #3748]
	movt	r2, #:upper16:kmalloc_caches
	ldr	r0, [r2, #32]
	add	r3, r3, #1
	cmp	r0, #0
	str	r3, [r4, #3748]
	beq	.L6700
	mov	r2, #232
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L6701
.L6691:
	ldr	r6, .L6703
	mov	r5, #0
	movw	r1, #:lower16:bam2bam_data_connect_work
	movt	r1, #:upper16:bam2bam_data_connect_work
	mov	r2, #65024
	str	r5, [r3]
	movw	lr, #:lower16:bam2bam_data_disconnect_work
	movw	ip, #:lower16:bam2bam_data_suspend_work
	str	r3, [r3, #16]
	movt	r2, 65535
	movt	lr, #:upper16:bam2bam_data_disconnect_work
	ldrh	r0, [r6, #-14]
	movt	ip, #:upper16:bam2bam_data_suspend_work
	str	r3, [r4, #3752]
	str	r2, [r3, #168]
	add	r4, r3, #172
	str	r1, [r3, #180]
	movw	r1, #:lower16:bam2bam_data_resume_work
	movt	r1, #:upper16:bam2bam_data_resume_work
	str	r4, [r3, #172]
	ubfx	r0, r0, #2, #1
	str	r2, [r3, #184]
	str	lr, [r3, #196]
	cmp	r0, r5
	add	lr, r3, #188
	str	r2, [r3, #200]
	str	ip, [r3, #212]
	add	ip, r3, #204
	str	r2, [r3, #216]
	add	r2, r3, #220
	str	r4, [r3, #176]
	str	lr, [r3, #188]
	str	lr, [r3, #192]
	str	ip, [r3, #204]
	str	ip, [r3, #208]
	str	r2, [r3, #220]
	str	r2, [r3, #224]
	str	r1, [r3, #228]
	bne	.L6702
.L6688:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L6700:
	mov	r3, #16
	b	.L6691
.L6702:
	movw	r1, #:lower16:.LC607
	sub	r0, r6, #32
	ldr	r2, .L6703+4
	movt	r1, #:upper16:.LC607
	str	r5, [sp]
	bl	__dynamic_pr_debug
	mov	r0, r5
	b	.L6688
.L6701:
	ldr	ip, [r4, #3748]
	movw	r0, #:lower16:.LC606
	mov	r2, r3
	mov	r5, r3
	mov	r7, r3
	ldr	r1, .L6703+8
	movt	r0, #:upper16:.LC606
	ldr	r6, .L6703+12
	sub	r3, ip, #1
	str	r3, [r4, #3748]
	bl	printk
.L6692:
	ldr	r3, [r4, #3748]
	cmp	r5, r3
	blt	.L6694
	ldr	r0, [r4, #3744]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L6688
.L6699:
	movw	r0, #:lower16:.LC605
	ldr	r1, .L6703+8
	movt	r0, #:upper16:.LC605
	bl	printk
	mvn	r0, #11
	b	.L6688
.L6694:
	ldr	r0, [r6, r5, lsl #2]
	bl	kfree
	str	r7, [r6, r5, lsl #2]
	add	r5, r5, #1
	b	.L6692
.L6704:
	.align	2
.L6703:
	.word	.LANCHOR4-2512
	.word	.LANCHOR5-3416
	.word	.LANCHOR5-3432
	.word	.LANCHOR1+3752
	.fnend
	.size	bam_data_setup.part.92, .-bam_data_setup.part.92
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_bind_config, %function
android_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r1, .L6725
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r3, #3308]
	ldr	r0, [r0, #24]
	cmp	r3, r1
	beq	.L6706
	sub	r2, r3, #520
	ldr	r3, [r3, #-512]
	cmp	r0, r3
	bne	.L6707
	b	.L6706
.L6708:
	ldr	r3, [r3, #-512]
	cmp	r0, r3
	beq	.L6706
.L6707:
	ldr	r3, [r2, #520]
	cmp	r3, r1
	sub	r2, r3, #520
	bne	.L6708
.L6706:
	mov	r5, r6
	ldr	r4, [r5, #112]!
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L6709
.L6715:
	ldr	r0, [r4]
	mov	r1, r6
	ldr	r3, [r0, #40]
	blx	r3
	subs	r7, r0, #0
	bne	.L6723
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	bne	.L6715
.L6709:
	mov	r7, #0
.L6705:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6723:
	ldr	r2, .L6725+4
	movw	r0, #:lower16:.LC608
	add	r5, r6, #36
	ldr	r3, [r4]
	movt	r0, #:upper16:.LC608
	mov	r1, r2
	ldr	r3, [r3]
	bl	printk
	b	.L6712
.L6713:
	bl	list_del
	ldr	r3, [r4, #-36]
	cmp	r3, #0
	bne	.L6724
.L6712:
	ldr	r4, [r6, #36]
	cmp	r4, r5
	mov	r0, r4
	sub	r8, r4, #72
	bne	.L6713
	ldr	r3, [r6, #12]
	cmp	r3, #0
	beq	.L6705
	mov	r0, r6
	blx	r3
	b	.L6705
.L6724:
	mov	r1, r8
	mov	r0, r6
	blx	r3
	b	.L6712
.L6726:
	.align	2
.L6725:
	.word	.LANCHOR1+3308
	.word	.LANCHOR5-3392
	.fnend
	.size	android_bind_config, .-android_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_in_max_packet_size_store, %function
conn_gadget_in_max_packet_size_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r3
	bx	lr
	.fnend
	.size	conn_gadget_in_max_packet_size_store, .-conn_gadget_in_max_packet_size_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	_snd_pcm_hw_param_set.constprop.102, %function
_snd_pcm_hw_param_set.constprop.102:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	add	r0, r0, #4
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L6752
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L6731
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L6730
.L6731:
	lsr	r6, r1, #5
	and	r3, r1, #31
	mov	r5, #1
	add	r6, r4, r6, lsl #2
	mov	r1, #32
	ldr	r7, [r6, #4]
	and	r7, r7, r5, lsl r3
	bl	__memzero
	str	r7, [r6, #4]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L6738
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L6734
.L6738:
	mov	r0, r5
	b	.L6733
.L6752:
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L6730
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L6731
.L6730:
	lsr	r5, r1, #5
	and	r3, r1, #31
	mov	r2, #1
	add	r5, r4, r5, lsl #2
	mov	r1, #32
	ldr	r6, [r5, #4]
	and	r6, r6, r2, lsl r3
	bl	__memzero
	str	r6, [r5, #4]
	ldr	r0, [r4, #4]
	cmp	r0, #0
	bne	.L6753
	ldr	r3, [r4, #8]
	cmp	r3, #0
	bne	.L6728
.L6734:
	mvn	r0, #21
.L6733:
	ldr	r2, [r4, #512]
	ldr	r3, [r4, #516]
	orr	r2, r2, #1
	orr	r3, r3, #1
	str	r2, [r4, #512]
	str	r3, [r4, #516]
.L6728:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6753:
	mov	r0, #0
	b	.L6728
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.102, .-_snd_pcm_hw_param_set.constprop.102
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	_snd_pcm_hw_param_set.constprop.103, %function
_snd_pcm_hw_param_set.constprop.103:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	add	r0, r0, #36
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L6778
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L6757
	ldr	r3, [r4, #40]
	cmp	r3, #0
	beq	.L6756
.L6757:
	lsr	r6, r1, #5
	and	r3, r1, #31
	mov	r5, #1
	add	r6, r4, r6, lsl #2
	mov	r1, #32
	ldr	r7, [r6, #36]
	and	r7, r7, r5, lsl r3
	bl	__memzero
	str	r7, [r6, #36]
	ldr	r3, [r4, #36]
	cmp	r3, #0
	bne	.L6764
	ldr	r3, [r4, #40]
	cmp	r3, #0
	beq	.L6760
.L6764:
	mov	r0, r5
	b	.L6759
.L6778:
	ldr	r3, [r4, #40]
	cmp	r3, #0
	beq	.L6756
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L6757
.L6756:
	lsr	r5, r1, #5
	and	r3, r1, #31
	mov	r2, #1
	add	r5, r4, r5, lsl #2
	mov	r1, #32
	ldr	r6, [r5, #36]
	and	r6, r6, r2, lsl r3
	bl	__memzero
	str	r6, [r5, #36]
	ldr	r0, [r4, #36]
	cmp	r0, #0
	bne	.L6779
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L6754
.L6760:
	mvn	r0, #21
.L6759:
	ldr	r2, [r4, #512]
	ldr	r3, [r4, #516]
	orr	r2, r2, #2
	orr	r3, r3, #2
	str	r2, [r4, #512]
	str	r3, [r4, #516]
.L6754:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6779:
	mov	r0, #0
	b	.L6754
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.103, .-_snd_pcm_hw_param_set.constprop.103
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	_snd_pcm_hw_param_set.constprop.104, %function
_snd_pcm_hw_param_set.constprop.104:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, r1
	mov	r4, r0
	str	lr, [sp, #4]
	.pad #16
	sub	sp, sp, #16
	add	r0, r0, #284
	ldrb	r3, [sp, #12]	@ zero_extendqisi2
	add	r1, sp, #4
	str	r2, [sp, #4]
	str	r2, [sp, #8]
	and	r3, r3, #244
	orr	r3, r3, #4
	strb	r3, [sp, #12]
	bl	snd_interval_refine
	cmp	r0, #0
	beq	.L6780
	ldr	r2, [r4, #512]
	ldr	r3, [r4, #516]
	orr	r2, r2, #1024
	orr	r3, r3, #1024
	str	r2, [r4, #512]
	str	r3, [r4, #516]
.L6780:
	add	sp, sp, #16
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.104, .-_snd_pcm_hw_param_set.constprop.104
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	_snd_pcm_hw_param_set.constprop.105, %function
_snd_pcm_hw_param_set.constprop.105:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, r1
	mov	r4, r0
	str	lr, [sp, #4]
	.pad #16
	sub	sp, sp, #16
	add	r0, r0, #296
	ldrb	r3, [sp, #12]	@ zero_extendqisi2
	add	r1, sp, #4
	str	r2, [sp, #4]
	str	r2, [sp, #8]
	and	r3, r3, #244
	orr	r3, r3, #4
	strb	r3, [sp, #12]
	bl	snd_interval_refine
	cmp	r0, #0
	beq	.L6786
	ldr	r2, [r4, #512]
	ldr	r3, [r4, #516]
	orr	r2, r2, #2048
	orr	r3, r3, #2048
	str	r2, [r4, #512]
	str	r3, [r4, #516]
.L6786:
	add	sp, sp, #16
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.105, .-_snd_pcm_hw_param_set.constprop.105
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_function_init, %function
mbim_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC609
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r2, #1
	ldr	r1, .L6803
	movt	r0, #:upper16:.LC609
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	printk
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L6797
	mov	r2, #236
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L6802
.L6793:
	mov	r6, #0
	add	ip, r4, #208
	ldr	r2, .L6803+4
	add	r3, r4, #216
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	movw	r1, #:lower16:.LC372
	strb	r6, [r4, #136]
	add	r0, r4, #108
	str	r6, [r4, #204]
	movt	r1, #:upper16:.LC372
	str	ip, [r4, #208]
	str	ip, [r4, #212]
	str	r3, [r4, #216]
	str	r3, [r4, #220]
	str	r4, [r5, #3620]
	str	r6, [r5, #3624]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC373
	add	r0, r4, #120
	ldr	r2, .L6803+4
	movt	r1, #:upper16:.LC373
	bl	__init_waitqueue_head
	ldr	r3, [r5, #3616]
	str	r6, [r4, #92]
	str	r6, [r4, #96]
	ldr	r0, .L6803+8
	str	r6, [r4, #100]
	str	r6, [r4, #104]
	add	r3, r3, #1
	str	r4, [r5, #2504]
	str	r3, [r5, #3616]
	bl	misc_register
	subs	r4, r0, #0
	beq	.L6795
	movw	r0, #:lower16:.LC611
	ldr	r1, .L6803
	movt	r0, #:upper16:.LC611
	bl	printk
.L6794:
	movw	r0, #:lower16:.LC613
	ldr	r1, .L6803
	movt	r0, #:upper16:.LC613
	bl	printk
	ldr	r3, [r5, #3616]
	cmp	r3, #0
	beq	.L6792
	ldr	r0, [r5, #3620]
	bl	kfree
	mov	r3, #0
	str	r3, [r5, #3620]
.L6792:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6797:
	mov	r4, #16
	b	.L6793
.L6795:
	movw	r0, #:lower16:.LC612
	ldr	r1, .L6803
	ldr	r2, [r5, #3616]
	movt	r0, #:upper16:.LC612
	bl	printk
	b	.L6792
.L6802:
	movw	r0, #:lower16:.LC610
	ldr	r1, .L6803
	movw	r5, #:lower16:.LANCHOR1
	movt	r0, #:upper16:.LC610
	movt	r5, #:upper16:.LANCHOR1
	bl	printk
	mvn	r4, #11
	b	.L6794
.L6804:
	.align	2
.L6803:
	.word	.LANCHOR5-3360
	.word	.LANCHOR1+3756
	.word	.LANCHOR0+856
	.fnend
	.size	mbim_function_init, .-mbim_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_reset_function_queue, %function
mbim_reset_function_queue:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L6823
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L6820
.L6806:
	add	r5, r4, #204
	mov	r0, r5
	bl	_raw_spin_lock
	movw	r3, #:lower16:kmalloc_caches
	mov	r2, #16
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L6807
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L6821
	mov	r1, #16
	mov	r2, #0
	stm	r3, {r1, r2}
.L6808:
	add	r0, r3, #8
	add	r2, r4, #208
	ldr	r1, [r4, #212]
	bl	__list_add
	mov	r0, r5
	bl	_raw_spin_unlock
	ldr	r0, .L6823+4
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L6822
.L6810:
	add	r0, r4, #108
	mov	r3, #0
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L6807:
	mov	r3, r2
	str	r2, [r0, #16]
	str	r0, [r0, #20]
	b	.L6808
.L6821:
	mvn	r3, #11
	b	.L6808
.L6820:
	movw	r1, #:lower16:.LC614
	sub	r0, r3, #24
	ldr	r2, .L6823+8
	movt	r1, #:upper16:.LC614
	bl	__dynamic_pr_debug
	b	.L6806
.L6822:
	ldr	r3, .L6823+8
	movw	r1, #:lower16:.LC615
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC615
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L6810
.L6824:
	.align	2
.L6823:
	.word	.LANCHOR4-2496
	.word	.LANCHOR4-2464
	.word	.LANCHOR5-3348
	.fnend
	.size	mbim_reset_function_queue, .-mbim_reset_function_queue
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_resume, %function
rndis_qc_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L6837
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L6835
.L6826:
	ldr	r0, .L6837+4
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r5, [r4, #3752]
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L6836
.L6827:
	ldr	r1, [r4, #3744]
	add	r2, r5, #216
	mov	r0, #4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work_on
.L6835:
	ldr	r3, .L6837+8
	movw	r1, #:lower16:.LC616
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC616
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L6826
.L6836:
	ldr	r3, .L6837+12
	mov	r2, #0
	movw	r1, #:lower16:.LC617
	movt	r1, #:upper16:.LC617
	sub	r0, r0, #32
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L6827
.L6838:
	.align	2
.L6837:
	.word	.LANCHOR4-2448
	.word	.LANCHOR4-2416
	.word	.LANCHOR5-3320
	.word	.LANCHOR5-3304
	.fnend
	.size	rndis_qc_resume, .-rndis_qc_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_suspend, %function
rndis_qc_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L6851
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L6849
.L6840:
	ldr	r0, .L6851+4
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r5, [r4, #3752]
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L6850
.L6841:
	ldr	r1, [r4, #3744]
	add	r2, r5, #200
	mov	r0, #4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work_on
.L6849:
	ldr	r3, .L6851+8
	movw	r1, #:lower16:.LC618
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC618
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L6840
.L6850:
	ldr	r3, .L6851+12
	mov	r2, #0
	movw	r1, #:lower16:.LC619
	movt	r1, #:upper16:.LC619
	sub	r0, r0, #32
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L6841
.L6852:
	.align	2
.L6851:
	.word	.LANCHOR4-2400
	.word	.LANCHOR4-2368
	.word	.LANCHOR5-3288
	.word	.LANCHOR5-3268
	.fnend
	.size	rndis_qc_suspend, .-rndis_qc_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_disconnect.constprop.113, %function
bam_data_disconnect.constprop.113:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L6879
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r0
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L6874
.L6854:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #3748]
	cmp	r3, #0
	ble	.L6875
	cmp	r5, #0
	beq	.L6876
	ldr	r5, [r4, #3752]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L6857
	ldr	r2, [r3, #8]
	cmp	r2, #0
	beq	.L6857
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L6857
	ldr	r0, [r3, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #4]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r5, #4]
	mov	r3, #0
	ldr	r2, [r2, #8]
	str	r3, [r2]
	ldr	r2, [r5, #4]
	ldr	r2, [r2, #12]
	str	r3, [r2]
	str	r3, [r5, #4]
.L6857:
	ldr	r3, [r5, #60]
	cmp	r3, #7
	beq	.L6877
	mov	r0, #0
	bl	usb_bam_client_ready
	cmp	r0, #0
	bne	.L6878
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L6877:
	ldr	r1, [r4, #3744]
	add	r2, r5, #184
	mov	r0, #4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work_on
.L6874:
	mov	ip, #0
	movw	r1, #:lower16:.LC157
	ldr	r2, .L6879+4
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC157
	mov	r3, r5
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L6854
.L6876:
	ldr	r1, .L6879+4
	movw	r0, #:lower16:.LC621
	movt	r0, #:upper16:.LC621
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	printk
.L6875:
	ldr	r1, .L6879+4
	movw	r0, #:lower16:.LC620
	mov	r2, #0
	movt	r0, #:upper16:.LC620
.L6873:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	printk
.L6878:
	ldr	r2, .L6879+4
	movw	r0, #:lower16:.LC622
	movt	r0, #:upper16:.LC622
	mov	r1, r2
	b	.L6873
.L6880:
	.align	2
.L6879:
	.word	.LANCHOR4-2352
	.word	.LANCHOR5-3248
	.fnend
	.size	bam_data_disconnect.constprop.113, .-bam_data_disconnect.constprop.113
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gen_ndis_query_resp.constprop.117, %function
gen_ndis_query_resp.constprop.117:
	.fnstart
	@ args = 0, pretend = 0, frame = 184
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r6, [sp, #8]
	subs	r6, r1, #0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #188
	sub	sp, sp, #188
	beq	.L6949
	ldr	r5, [r6, #8]
	cmp	r5, #0
	beq	.L6949
	mov	r3, #16
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	mov	r4, r0
	str	r3, [r5, #20]
	mov	r1, sp
	ldr	r0, [r7, #3708]
	bl	dev_get_stats
	movw	r3, #278
	add	r8, r5, #24
	movt	r3, 1
	mov	r9, r0
	cmp	r4, r3
	beq	.L6884
	bls	.L7058
	movw	r3, #257
	movt	r3, 257
	cmp	r4, r3
	beq	.L6903
	bls	.L7059
	movw	r3, #261
	movt	r3, 257
	cmp	r4, r3
	beq	.L6912
	bhi	.L6913
	movw	r3, #259
	movt	r3, 257
	cmp	r4, r3
	beq	.L6914
	bhi	.L6915
	ldr	r0, .L7078
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7060
.L6941:
	ldr	r3, [r7, #3708]
	cmp	r3, #0
	beq	.L6929
	ldr	r2, [r7, #3700]
	mov	r3, #30
	mov	r0, #0
	mov	r4, #6
	ldr	r1, [r2]	@ unaligned
	str	r1, [r5, #24]	@ unaligned
	ldrh	r2, [r2, #4]	@ unaligned
	strh	r2, [r8, #4]	@ unaligned
	b	.L6921
.L7058:
	movw	r3, #266
	movt	r3, 1
	cmp	r4, r3
	beq	.L6886
	bls	.L7061
	movw	r3, #270
	movt	r3, 1
	cmp	r4, r3
	beq	.L6895
	bhi	.L6896
	mov	r3, #268
	movt	r3, 1
	cmp	r4, r3
	beq	.L6897
	bls	.L7062
	ldr	r0, .L7078+4
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7063
.L6932:
	ldr	r7, [r7, #3720]
	cmp	r7, #0
	beq	.L6933
	mov	r0, r7
	bl	strlen
	mov	r4, r0
	mov	r2, r0
	mov	r1, r7
	mov	r0, r8
	bl	memcpy
	add	r3, r4, #24
	mov	r0, #0
	b	.L6921
.L7061:
	movw	r3, #259
	movt	r3, 1
	cmp	r4, r3
	beq	.L6888
	bls	.L7064
	movw	r3, #262
	movt	r3, 1
	cmp	r4, r3
	beq	.L6892
	movw	r3, #263
	movt	r3, 1
	cmp	r4, r3
	beq	.L6893
	mov	r3, #260
	movt	r3, 1
	cmp	r4, r3
	bne	.L6883
	ldr	r0, .L7078+8
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L6924
	movw	r1, #:lower16:.LC626
	ldr	r2, .L7078+12
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC626
	bl	__dynamic_pr_debug
	b	.L6924
.L7059:
	movw	r3, #258
	movt	r3, 2
	cmp	r4, r3
	beq	.L6905
	bls	.L7065
	mov	r3, #260
	movt	r3, 2
	cmp	r4, r3
	beq	.L6909
	bcc	.L6910
	movw	r3, #261
	movt	r3, 2
	cmp	r4, r3
	bne	.L6883
	ldr	r0, .L7078+16
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7066
.L6939:
	cmp	r9, #0
	beq	.L6929
	ldr	r2, [r9, #48]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L6921
.L6913:
	movw	r3, #258
	movt	r3, 258
	cmp	r4, r3
	beq	.L6917
	movw	r3, #259
	movt	r3, 258
	cmp	r4, r3
	beq	.L6918
	movw	r3, #257
	movt	r3, 258
	cmp	r4, r3
	bne	.L6883
	ldr	r0, .L7078+20
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7067
.L6945:
	cmp	r9, #0
	beq	.L6929
	ldr	r2, [r9, #104]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L6921
.L6896:
	movw	r3, #275
	movt	r3, 1
	cmp	r4, r3
	beq	.L6900
	mov	r3, #276
	movt	r3, 1
	cmp	r4, r3
	beq	.L6901
	movw	r3, #273
	movt	r3, 1
	cmp	r4, r3
	beq	.L6902
.L6883:
	movw	r0, #:lower16:.LC646
	mov	r2, r4
	ldr	r1, .L7078+12
	movt	r0, #:upper16:.LC646
	mov	r4, #0
	bl	printk
	movw	r0, #65012
	mov	r3, #24
	movt	r0, 65535
	b	.L6921
.L7064:
	movw	r3, #257
	movt	r3, 1
	cmp	r4, r3
	beq	.L6890
	movw	r3, #258
	movt	r3, 1
	cmp	r4, r3
	bne	.L6883
	ldr	r0, .L7078+24
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L6947
	movw	r1, #:lower16:.LC624
	ldr	r2, .L7078+12
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC624
	bl	__dynamic_pr_debug
	b	.L6947
.L7065:
	movw	r3, #514
	movt	r3, 1
	cmp	r4, r3
	beq	.L6907
	movw	r3, #257
	movt	r3, 2
	cmp	r4, r3
	bne	.L6883
	cmp	r0, #0
	beq	.L6929
	ldr	r2, [r0, #8]
	mov	r3, #28
	ldr	ip, [r0, #40]
	ldr	r1, [r0, #56]
.L7056:
	sub	r2, r2, ip
	mov	r0, #0
	sub	r2, r2, r1
	mov	r4, #4
	str	r2, [r5, #24]
.L6921:
	str	r4, [r5, #16]
	str	r3, [r6, #12]
	str	r3, [r5, #4]
.L6881:
	add	sp, sp, #188
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L6907:
	ldr	r3, .L7078+28
	ldrh	r3, [r3, #-14]
	tst	r3, #4
	bne	.L7068
.L6947:
	mov	r2, #0
	mov	r3, #28
	mov	r0, r2
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L6921
.L6888:
	ldr	r0, .L7078+32
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7069
.L6924:
	ldr	r2, [r7, #3688]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L6921
.L6905:
	cmp	r0, #0
	beq	.L6929
	mov	r3, #28
	ldr	r2, [r0]
	ldr	ip, [r0, #32]
	ldr	r1, [r0, #48]
	b	.L7056
.L6890:
	ldr	r3, .L7078+36
	ldrh	r3, [r3, #-14]
	tst	r3, #4
	bne	.L7070
.L6920:
	mov	r0, r8
	mov	r2, #112
	ldr	r1, .L7078+40
	bl	memcpy
	mov	r4, #112
	mov	r3, #136
	mov	r0, #0
	b	.L6921
.L6918:
	ldr	r0, .L7078+44
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L6947
	movw	r1, #:lower16:.LC645
	ldr	r2, .L7078+12
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC645
	bl	__dynamic_pr_debug
	b	.L6947
.L7062:
	ldr	r0, .L7078+48
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7071
.L6925:
	ldr	r3, [r7, #3708]
	cmp	r3, #0
	beq	.L6929
	ldr	r2, [r3, #356]
	mov	r0, #0
	mov	r4, #4
	mov	r3, #28
	str	r2, [r5, #24]
	b	.L6921
.L6901:
	ldr	r2, [r7, #3696]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L6921
.L6915:
	ldr	r0, .L7078+52
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7072
.L6943:
	mov	r2, #1
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L6921
.L6910:
	cmp	r0, #0
	beq	.L6929
	ldr	r2, [r9, #40]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L6921
.L6893:
	ldr	r3, [r7, #3696]
	cmp	r3, #1
	beq	.L6947
	ldr	r2, [r7, #3692]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L6921
.L6929:
	movw	r0, #65012
	mov	r3, #24
	movt	r0, 65535
	mov	r4, #0
	b	.L6921
.L6917:
	ldr	r3, .L7078+56
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	beq	.L6947
	movw	r1, #:lower16:.LC644
	ldr	r2, .L7078+12
	movt	r1, #:upper16:.LC644
	ldr	r0, .L7078+60
	bl	__dynamic_pr_debug
	b	.L6947
.L6892:
	ldr	r3, .L7078+64
	ldrh	r3, [r3, #-14]
	tst	r3, #4
	beq	.L6925
	movw	r1, #:lower16:.LC627
	ldr	r2, .L7078+12
	movt	r1, #:upper16:.LC627
	ldr	r0, .L7078+8
	bl	__dynamic_pr_debug
	b	.L6925
.L6914:
	ldr	r3, .L7078+68
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L7073
.L6942:
	mov	r2, #-536870912
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L6921
.L6902:
	ldr	r0, .L7078+72
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7074
.L6936:
	movw	r2, #1558
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L6921
.L6886:
	ldr	r0, .L7078+76
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L6925
	movw	r1, #:lower16:.LC628
	ldr	r2, .L7078+12
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC628
	bl	__dynamic_pr_debug
	b	.L6925
.L6900:
	ldr	r3, .L7078+80
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L7075
.L6938:
	mov	r2, #18
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L6921
.L6897:
	ldr	r3, .L7078+84
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L7076
.L6931:
	ldr	r2, [r7, #3712]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L6921
.L6884:
	ldr	r0, .L7078+88
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L6943
	movw	r1, #:lower16:.LC632
	ldr	r2, .L7078+12
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC632
	bl	__dynamic_pr_debug
	b	.L6943
.L6903:
	ldr	r0, .L7078+92
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L6941
	movw	r1, #:lower16:.LC638
	ldr	r2, .L7078+12
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC638
	bl	__dynamic_pr_debug
	b	.L6941
.L6912:
	ldr	r0, .L7078+96
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L6947
	movw	r1, #:lower16:.LC642
	ldr	r2, .L7078+12
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC642
	bl	__dynamic_pr_debug
	b	.L6947
.L6895:
	ldr	r0, .L7078+100
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7077
.L6935:
	ldr	r2, [r7, #3704]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	ldrh	r2, [r2]
	str	r2, [r5, #24]
	b	.L6921
.L6909:
	cmp	r0, #0
	beq	.L6929
	ldr	r2, [r9, #32]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L6921
.L6949:
	mvn	r0, #11
	b	.L6881
.L6933:
	mov	r0, r7
	mov	r3, #28
	str	r7, [r5, #24]
	mov	r4, #4
	b	.L6921
.L7072:
	movw	r1, #:lower16:.LC641
	ldr	r2, .L7078+12
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC641
	bl	__dynamic_pr_debug
	b	.L6943
.L7077:
	movw	r1, #:lower16:.LC633
	ldr	r2, .L7078+12
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC633
	bl	__dynamic_pr_debug
	b	.L6935
.L7067:
	movw	r1, #:lower16:.LC643
	ldr	r2, .L7078+12
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC643
	bl	__dynamic_pr_debug
	b	.L6945
.L7074:
	movw	r1, #:lower16:.LC634
	ldr	r2, .L7078+12
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC634
	bl	__dynamic_pr_debug
	b	.L6936
.L7070:
	movw	r1, #:lower16:.LC623
	ldr	r2, .L7078+12
	movt	r1, #:upper16:.LC623
	ldr	r0, .L7078+104
	bl	__dynamic_pr_debug
	b	.L6920
.L7071:
	movw	r1, #:lower16:.LC629
	ldr	r2, .L7078+12
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC629
	bl	__dynamic_pr_debug
	b	.L6925
.L7076:
	movw	r1, #:lower16:.LC630
	ldr	r2, .L7078+12
	movt	r1, #:upper16:.LC630
	ldr	r0, .L7078+108
	bl	__dynamic_pr_debug
	b	.L6931
.L7063:
	movw	r1, #:lower16:.LC631
	ldr	r2, .L7078+12
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC631
	bl	__dynamic_pr_debug
	b	.L6932
.L7073:
	movw	r1, #:lower16:.LC640
	ldr	r2, .L7078+12
	movt	r1, #:upper16:.LC640
	ldr	r0, .L7078+112
	bl	__dynamic_pr_debug
	b	.L6942
.L7075:
	movw	r1, #:lower16:.LC636
	ldr	r2, .L7078+12
	movt	r1, #:upper16:.LC636
	ldr	r0, .L7078+116
	bl	__dynamic_pr_debug
	b	.L6938
.L7066:
	movw	r1, #:lower16:.LC637
	ldr	r2, .L7078+12
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC637
	bl	__dynamic_pr_debug
	b	.L6939
.L7060:
	movw	r1, #:lower16:.LC639
	ldr	r2, .L7078+12
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC639
	bl	__dynamic_pr_debug
	b	.L6941
.L7069:
	movw	r1, #:lower16:.LC625
	ldr	r2, .L7078+12
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC625
	bl	__dynamic_pr_debug
	b	.L6924
.L7068:
	movw	r1, #:lower16:.LC635
	ldr	r2, .L7078+12
	movt	r1, #:upper16:.LC635
	ldr	r0, .L7078+72
	bl	__dynamic_pr_debug
	b	.L6947
.L7079:
	.align	2
.L7078:
	.word	.LANCHOR4-1936
	.word	.LANCHOR4-2128
	.word	.LANCHOR4-2256
	.word	.LANCHOR5-3228
	.word	.LANCHOR4-1984
	.word	.LANCHOR4-1840
	.word	.LANCHOR4-2304
	.word	.LANCHOR4-2032
	.word	.LANCHOR4-2272
	.word	.LANCHOR4-2320
	.word	.LANCHOR5-3208
	.word	.LANCHOR4-1792
	.word	.LANCHOR4-2176
	.word	.LANCHOR4-1888
	.word	.LANCHOR4-1824
	.word	.LANCHOR4-1848
	.word	.LANCHOR4-2224
	.word	.LANCHOR4-1920
	.word	.LANCHOR4-2064
	.word	.LANCHOR4-2208
	.word	.LANCHOR4-2016
	.word	.LANCHOR4-2160
	.word	.LANCHOR4-2112
	.word	.LANCHOR4-1968
	.word	.LANCHOR4-1872
	.word	.LANCHOR4-2080
	.word	.LANCHOR4-2352
	.word	.LANCHOR4-2184
	.word	.LANCHOR4-1944
	.word	.LANCHOR4-2040
	.fnend
	.size	gen_ndis_query_resp.constprop.117, .-gen_ndis_query_resp.constprop.117
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_init, %function
ccid_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L7086
	mov	r2, #204
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L7089
.L7081:
	add	ip, r4, #120
	mov	r0, #0
	ldr	r2, .L7091
	movw	r3, #:lower16:.LANCHOR1
	movw	r1, #:lower16:.LC383
	movt	r3, #:upper16:.LANCHOR1
	movt	r1, #:upper16:.LC383
	str	r0, [r4, #92]
	str	ip, [r4, #120]
	add	r0, r4, #128
	str	ip, [r4, #124]
	str	r4, [r3, #3472]
	bl	__init_waitqueue_head
	ldr	r0, .L7091+4
	bl	misc_register
	subs	r5, r0, #0
	bne	.L7083
	movw	r1, #:lower16:.LC647
	ldr	r2, .L7091
	add	r0, r4, #160
	movt	r1, #:upper16:.LC647
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC648
	ldr	r2, .L7091
	add	r0, r4, #172
	movt	r1, #:upper16:.LC648
	bl	__init_waitqueue_head
	add	r3, r4, #192
	ldr	r0, .L7091+8
	str	r3, [r4, #192]
	str	r3, [r4, #196]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L7090
.L7080:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7086:
	mov	r4, #16
	b	.L7081
.L7089:
	mvn	r5, #11
	b	.L7080
.L7090:
	movw	r0, #:lower16:.LC385
	ldr	r1, .L7091+12
	movt	r0, #:upper16:.LC385
	bl	printk
	movw	r0, #:lower16:.LC650
	mov	r2, r5
	ldr	r1, .L7091+16
	movt	r0, #:upper16:.LC650
	bl	printk
	ldr	r0, .L7091+4
	bl	misc_deregister
.L7085:
	mov	r0, r4
	bl	kfree
	movw	r0, #:lower16:.LC651
	movt	r0, #:upper16:.LC651
	bl	printk
	b	.L7080
.L7083:
	movw	r0, #:lower16:.LC385
	ldr	r1, .L7091+20
	movt	r0, #:upper16:.LC385
	bl	printk
	movw	r0, #:lower16:.LC649
	mov	r2, r5
	ldr	r1, .L7091+16
	movt	r0, #:upper16:.LC649
	bl	printk
	b	.L7085
.L7092:
	.align	2
.L7091:
	.word	.LANCHOR1+3756
	.word	.LANCHOR0+820
	.word	.LANCHOR0+784
	.word	.LANCHOR5-3060
	.word	.LANCHOR5-3072
	.word	.LANCHOR5-3096
	.fnend
	.size	ccid_function_init, .-ccid_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_cdc_notify_complete, %function
acm_cdc_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:__stack_chk_guard
	strd	r6, [sp, #8]
	movt	r4, #:upper16:__stack_chk_guard
	mov	r6, r1
	strd	r8, [sp, #16]
	ldr	r3, [r4]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r5, [r1, #32]
	.pad #24
	sub	sp, sp, #24
	str	r3, [sp, #20]
	add	r7, r5, #148
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #44]
	mov	r1, r0
	cmn	r3, #108
	beq	.L7108
	ldrb	r8, [r5, #147]	@ zero_extendqisi2
	mov	r0, r7
	str	r6, [r5, #156]
	bl	_raw_spin_unlock_irqrestore
	cmp	r8, #0
	beq	.L7093
	ldr	r3, [r5, #20]
	mov	r0, r7
	ldr	r8, [r3, #24]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #156]
	mov	r6, r0
	cmp	r3, #0
	moveq	r3, #1
	strbeq	r3, [r5, #147]
	bne	.L7109
.L7099:
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L7093:
	ldr	r2, [sp, #20]
	ldr	r3, [r4]
	cmp	r2, r3
	bne	.L7110
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7108:
	mov	r0, r7
	str	r6, [r5, #156]
	bl	_raw_spin_unlock_irqrestore
	b	.L7093
.L7110:
	bl	__stack_chk_fail
.L7109:
	ldr	r0, .L7112
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7111
.L7097:
	movw	r0, #:lower16:.LC653
	ldrh	r2, [r5, #170]
	mov	r9, #32
	ldrb	r1, [r5, #146]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC653
	bl	printk
	add	r0, sp, #10
	mov	r1, #10
	ldr	r10, [r5, #152]
	bl	__memzero
	ldr	r8, [r5, #156]
	mov	r2, #0
	mov	r0, #10
	mvn	r1, #94
	mov	ip, #2
	strb	r2, [r5, #147]
	str	r2, [r5, #156]
	ldr	r3, [r8]
	str	r0, [r8, #4]
	mov	r0, r7
	strb	r1, [r3]
	strb	r9, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	ldrb	r1, [r5, #144]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	r2, [r3, #7]
	ldrh	ip, [r5, #170]	@ unaligned
	ldr	r1, [sp, #14]	@ unaligned
	strh	ip, [sp, #10]	@ movhi
	ldr	ip, [sp, #10]	@ unaligned
	str	ip, [r3, #8]	@ unaligned
	str	r1, [r3, #12]	@ unaligned
	ldrh	r1, [sp, #18]	@ unaligned
	strh	r1, [r3, #16]	@ unaligned
	ldrh	r2, [r5, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock
	ldr	r3, [r10, #8]
	mov	r2, r9
	mov	r1, r8
	mov	r0, r10
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	r9, #0
	bge	.L7099
	ldr	r0, [r5, #20]
	movw	r1, #:lower16:.LC654
	mov	r3, r9
	movt	r1, #:upper16:.LC654
	ldrb	r2, [r5, #146]	@ zero_extendqisi2
	ldr	r0, [r0, #24]
	ldr	r0, [r0]
	add	r0, r0, #32
	bl	dev_err
	str	r8, [r5, #156]
	b	.L7099
.L7111:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC652
	sub	r0, r0, #24
	ldrh	ip, [r5, #170]
	movt	r2, #:upper16:.LC652
	ldrb	r3, [r5, #146]	@ zero_extendqisi2
	add	r1, r1, #32
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L7097
.L7113:
	.align	2
.L7112:
	.word	.LANCHOR4-1776
	.fnend
	.size	acm_cdc_notify_complete, .-acm_cdc_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_send_controlbits_tomodem, %function
ghsuart_send_controlbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR1
	movt	ip, #:upper16:.LANCHOR1
	ldr	r3, [ip, #1856]
	cmp	r0, #0
	cmpne	r1, r3
	bcs	.L7141
	mov	r3, #84
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mla	r1, r3, r1, ip
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #24
	sub	sp, sp, #24
	ldr	r4, [r1, #2032]
	cmp	r4, #0
	beq	.L7142
	ldr	r3, [r4, #196]
	cmp	r3, r2
	beq	.L7114
	ldr	r3, [r4, #188]
	str	r2, [r4, #196]
	tst	r3, #4
	beq	.L7114
	tst	r2, #1
	mov	r5, r2
	bne	.L7143
.L7121:
	ldr	r0, .L7146
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7144
.L7114:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7143:
	ldr	r0, .L7146+4
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7145
.L7122:
	add	r7, r4, #20
	mov	r8, #0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #24]
	mov	r1, r0
	str	r8, [r4, #200]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, r8
	beq	.L7121
	ldr	r3, [r6, #136]
	cmp	r3, r8
	beq	.L7121
	mov	r1, r8
	mov	r0, r6
	blx	r3
	b	.L7121
.L7144:
	ldr	r2, .L7146+8
	movw	r1, #:lower16:.LC551
	mov	r3, r5
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC551
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__dynamic_pr_debug
.L7145:
	mov	ip, #45
	movw	r1, #:lower16:.LC125
	ldr	r2, .L7146+12
	movt	r1, #:upper16:.LC125
	mov	r3, ip
	str	ip, [sp]
	sub	r0, r0, #32
	str	ip, [sp, #4]
	str	ip, [sp, #8]
	str	ip, [sp, #12]
	str	ip, [sp, #16]
	str	ip, [sp, #20]
	bl	__dynamic_pr_debug
	b	.L7122
.L7141:
	movw	r0, #:lower16:.LC123
	mov	r2, r1
	ldr	r1, .L7146+8
	movt	r0, #:upper16:.LC123
	b	printk
.L7142:
	ldr	r1, .L7146+8
	movw	r0, #:lower16:.LC114
	movt	r0, #:upper16:.LC114
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L7147:
	.align	2
.L7146:
	.word	.LANCHOR4-1728
	.word	.LANCHOR4-1744
	.word	.LANCHOR5-3036
	.word	.LANCHOR5-3000
	.fnend
	.size	ghsuart_send_controlbits_tomodem, .-ghsuart_send_controlbits_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_alloc_requests.constprop.132, %function
gsmd_alloc_requests.constprop.132:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	mov	r6, r1
	strd	r10, [sp, #24]
	ldr	fp, .L7171
	strd	r8, [sp, #16]
	mov	r9, r2
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldrh	r3, [fp, #-14]
	tst	r3, #4
	bne	.L7167
.L7149:
	movw	r8, #:lower16:kmalloc_caches
	mov	r5, #0
	movt	r8, #:upper16:kmalloc_caches
	mov	r10, #2048
.L7156:
	ldr	r3, [r7, #8]
	mov	r1, #32
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	mov	r2, #2048
	mov	r1, #32
	mov	ip, #16
	beq	.L7168
	str	r10, [r4, #4]
	ldr	r3, [r8, #44]
	subs	r0, r3, #0
	streq	ip, [r4]
	beq	.L7153
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4]
	beq	.L7169
.L7153:
	str	r9, [r4, #28]
	add	r0, r4, #36
	add	r5, r5, #1
	mov	r1, r6
	ldr	r2, [r6]
	bl	__list_add
	cmp	r5, #8
	bne	.L7156
.L7157:
	mov	r0, #0
.L7148:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7167:
	mov	r0, #2048
	mov	r2, #8
	str	r6, [sp]
	movw	r1, #:lower16:.LC655
	mov	r3, r7
	movt	r1, #:upper16:.LC655
	str	r2, [sp, #4]
	ldr	r2, .L7171+4
	str	r0, [sp, #8]
	sub	r0, fp, #32
	str	r9, [sp, #12]
	bl	__dynamic_pr_debug
	b	.L7149
.L7168:
	movw	r0, #:lower16:.LC656
	ldr	r1, .L7171+8
	movt	r0, #:upper16:.LC656
	bl	printk
.L7151:
	ldr	r3, .L7171+12
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L7170
.L7154:
	ldr	r3, [r6]
	cmp	r6, r3
	bne	.L7157
	mvn	r0, #11
	b	.L7148
.L7170:
	movw	r1, #:lower16:.LC658
	mov	r3, r5
	ldr	r2, .L7171+4
	sub	r0, fp, #8
	movt	r1, #:upper16:.LC658
	bl	__dynamic_pr_debug
	b	.L7154
.L7169:
	movw	r0, #:lower16:.LC657
	ldr	r1, .L7171+8
	movt	r0, #:upper16:.LC657
	bl	printk
	ldr	r3, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L7151
.L7172:
	.align	2
.L7171:
	.word	.LANCHOR4-1696
	.word	.LANCHOR5-2976
	.word	.LANCHOR5-2956
	.word	.LANCHOR4-1680
	.fnend
	.size	gsmd_alloc_requests.constprop.132, .-gsmd_alloc_requests.constprop.132
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_start_tx, %function
gs_start_tx:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	add	r10, r0, #76
	str	lr, [sp, #32]
	ldr	r3, [r0, #4]
	.pad #20
	sub	sp, sp, #20
	ldr	r5, [r0, #76]
	ldr	r7, [r3, #88]
	cmp	r10, r5
	beq	.L7194
	ldr	r3, [r0, #84]
	cmp	r3, #7
	bgt	.L7194
	movw	r9, #:lower16:.LANCHOR1
	mov	r4, r0
	mov	fp, #0
	movt	r9, #:upper16:.LANCHOR1
.L7175:
	ldr	r2, [r4, #92]
	sub	r8, r5, #36
	ldr	r1, [r4, #100]
	ldr	r6, [r4, #104]
	add	r6, r6, r2
	sub	r3, r6, r1
	udiv	r6, r3, r2
	mls	r6, r2, r6, r3
	cmp	r6, #4096
	bcs	.L7195
	cmp	r6, #0
	bne	.L7177
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	ldr	r3, [r9, #3756]
	cmp	r3, #0
	moveq	r6, r3
	beq	.L7181
	ldrh	r1, [r7, #20]
	sdiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	beq	.L7214
.L7181:
	mov	r2, #1
	mov	r3, #0
	mov	r1, r2
	add	r0, r4, #108
	bl	__wake_up
.L7183:
	cmp	fp, #0
	bne	.L7176
.L7173:
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7195:
	mov	r6, #4096
.L7177:
	ldr	fp, [r4, #96]
	ldr	r3, [r5, #-36]
	add	fp, fp, r2
	sub	fp, fp, r1
	cmp	fp, r6
	bcc	.L7215
	mov	r0, r3
	mov	r2, r6
	bl	memcpy
	cmp	fp, r6
	ldrhi	r3, [r4, #100]
	ldrls	r3, [r4, #96]
	addhi	r3, r3, r6
	str	r3, [r4, #100]
.L7179:
	mov	r0, r5
	str	r6, [r5, #-32]
	bl	list_del
	mov	r0, r4
	bl	_raw_spin_unlock
	ldr	r3, [r7, #8]
	mov	r2, #32
	mov	r1, r8
	mov	r0, r7
	ldr	r3, [r3, #16]
	blx	r3
	mov	r6, r0
	mov	r0, r4
	bl	_raw_spin_lock
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L7216
	cmp	r6, #0
	bne	.L7217
	ldr	r1, [r5, #-32]
	ldr	r5, [r4, #76]
	ldr	r3, [r4, #84]
	ldr	r2, [r4, #136]
	str	r1, [r9, #3756]
	cmp	r10, r5
	add	r3, r3, #1
	add	r2, r2, r1
	str	r3, [r4, #84]
	str	r2, [r4, #136]
	beq	.L7176
	cmp	r3, #7
	mov	fp, #1
	ble	.L7175
.L7176:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L7173
.L7219:
	bl	tty_wakeup
	b	.L7173
.L7215:
	mov	r0, r3
	sub	r3, r6, fp
	mov	r2, fp
	str	r3, [sp, #12]
	bl	memcpy
	add	r0, r0, fp
	ldr	fp, [sp, #12]
	ldr	r1, [r4, #96]
	mov	r2, fp
	bl	memcpy
	ldr	r3, [r4, #96]
	add	r3, r3, fp
	str	r3, [r4, #100]
	b	.L7179
.L7216:
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r8
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L7173
.L7217:
	ldr	r0, .L7222
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7218
.L7186:
	mov	r0, r5
	mov	r1, r10
	ldr	r2, [r4, #76]
	bl	__list_add
	ldr	r0, [r4, #8]
	cmp	r0, #0
	bne	.L7219
	b	.L7173
.L7194:
	mov	r6, #0
	b	.L7173
.L7214:
	str	r3, [r5, #-32]
	mov	r0, r5
	bl	list_del
	mov	r0, r4
	bl	_raw_spin_unlock
	ldr	r3, [r7, #8]
	mov	r2, #32
	mov	r1, r8
	mov	r0, r7
	ldr	r3, [r3, #16]
	blx	r3
	mov	r6, r0
	mov	r0, r4
	bl	_raw_spin_lock
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L7220
	cmp	r6, #0
	bne	.L7221
.L7184:
	mov	r3, #0
	str	r3, [r9, #3756]
	b	.L7181
.L7218:
	str	r6, [sp, #4]
	ldr	ip, [r7, #4]
	movw	r3, #:lower16:.LC165
	movw	r1, #:lower16:.LC166
	ldr	r2, .L7222+4
	movt	r3, #:upper16:.LC165
	movt	r1, #:upper16:.LC166
	sub	r0, r0, #32
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L7186
.L7220:
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r8
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L7183
.L7221:
	movw	r2, #:lower16:.LC165
	movw	r0, #:lower16:.LC659
	ldr	r1, .L7222+4
	movt	r2, #:upper16:.LC165
	mov	r3, r6
	movt	r0, #:upper16:.LC659
	bl	printk
	mov	r1, r10
	mov	r0, r5
	ldr	r2, [r4, #76]
	bl	__list_add
	b	.L7184
.L7223:
	.align	2
.L7222:
	.word	.LANCHOR4-1648
	.word	.LANCHOR5-2940
	.fnend
	.size	gs_start_tx, .-gs_start_tx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_flush_chars, %function
gs_flush_chars:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #272]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #4]
	mov	r5, r0
	cmp	r3, #0
	beq	.L7225
	mov	r0, r4
	bl	gs_start_tx
.L7225:
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	gs_flush_chars, .-gs_flush_chars
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_write, %function
gs_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #272]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	cmp	r5, #0
	mov	r6, r0
	bne	.L7245
.L7231:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L7236
	mov	r0, r4
	bl	gs_start_tx
.L7236:
	mov	r0, r4
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7245:
	ldr	r1, [r4, #92]
	ldr	r3, [r4, #100]
	ldr	r0, [r4, #104]
	add	r3, r3, r1
	sub	r3, r3, r0
	sub	r3, r3, #1
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r5, r3
	bhi	.L7246
.L7232:
	ldr	r8, [r4, #96]
	add	r1, r8, r1
	sub	r8, r1, r0
	cmp	r8, r5
	bcc	.L7247
	mov	r1, r7
	mov	r2, r5
	bl	memcpy
	cmp	r8, r5
	ldrhi	r3, [r4, #104]
	ldrls	r3, [r4, #96]
	addhi	r3, r3, r5
	str	r3, [r4, #104]
	b	.L7231
.L7246:
	subs	r5, r3, #0
	beq	.L7231
	b	.L7232
.L7247:
	mov	r2, r8
	mov	r1, r7
	sub	r9, r5, r8
	bl	memcpy
	mov	r2, r9
	add	r1, r7, r8
	ldr	r0, [r4, #96]
	bl	memcpy
	ldr	r2, [r4, #96]
	add	r2, r2, r9
	str	r2, [r4, #104]
	b	.L7231
	.fnend
	.size	gs_write, .-gs_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_write_complete, %function
gs_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r5, #48]
	mov	r1, r4
	mov	r6, r0
	ldr	r3, [r4, #140]
	add	r0, r5, #36
	add	r3, r3, r2
	str	r3, [r4, #140]
	ldr	r2, [r1, #76]!
	bl	__list_add
	ldr	r3, [r4, #84]
	sub	r3, r3, #1
	str	r3, [r4, #84]
	ldr	r3, [r5, #44]
	cmn	r3, #108
	beq	.L7250
	cmp	r3, #0
	bne	.L7262
.L7251:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L7250
	mov	r0, r4
	bl	gs_start_tx
.L7250:
	mov	r1, r6
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L7262:
	movw	r0, #:lower16:.LC660
	ldr	r1, .L7263
	ldr	r2, [r7, #4]
	movt	r0, #:upper16:.LC660
	bl	printk
	b	.L7251
.L7264:
	.align	2
.L7263:
	.word	.LANCHOR5-2928
	.fnend
	.size	gs_write_complete, .-gs_write_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_fs_mount, %function
ffs_fs_mount:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #33152
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	subs	r4, r3, #0
	strd	r6, [sp, #8]
	mov	r3, #0
	movt	ip, 65535
	strd	r8, [sp, #16]
	mov	r8, r0
	mov	r9, r2
	strd	r10, [sp, #24]
	mov	r10, r1
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	movw	lr, #16704
	strh	ip, [sp, #20]	@ movhi
	str	r3, [sp, #22]	@ unaligned
	str	r3, [sp, #26]	@ unaligned
	str	r3, [sp, #30]	@ unaligned
	strh	lr, [sp, #32]	@ movhi
	str	r3, [sp, #34]	@ unaligned
	strh	r3, [sp, #38]	@ movhi
	beq	.L7266
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L7266
	mov	fp, #32768
	movw	r3, #:lower16:.LC663
	str	r0, [sp, #12]
	movw	r2, #:lower16:.LC664
	movt	r3, #:upper16:.LC663
	movt	r2, #:upper16:.LC664
	movt	fp, 65535
	str	r3, [sp, #4]
	str	r2, [sp, #8]
.L7285:
	mov	r1, #44
	mov	r0, r4
	bl	strchr
	subs	r7, r0, #0
	mov	r1, #61
	movne	r3, #0
	mov	r0, r4
	strbne	r3, [r7]
	bl	strchr
	subs	r5, r0, #0
	beq	.L7303
	mov	r3, #0
	mov	r6, r5
	mov	r2, r3
	add	r1, sp, #16
	strb	r3, [r6], #1
	mov	r0, r6
	bl	simple_strtoul
	ldr	r2, [sp, #16]
	mov	r8, r0
	ldrb	r2, [r2]	@ zero_extendqisi2
	cmp	r2, #44
	cmpne	r2, #0
	bne	.L7304
	sub	r5, r5, r4
	cmp	r5, #4
	beq	.L7272
	cmp	r5, #5
	beq	.L7273
	cmp	r5, #3
	beq	.L7305
.L7271:
	movw	r0, #:lower16:.LC668
	mov	r1, r4
	movt	r0, #:upper16:.LC668
	bl	printk
.L7269:
	mvn	r0, #21
	b	.L7265
.L7301:
	ldr	r8, [sp, #12]
.L7266:
	movw	r3, #:lower16:ffs_sb_fill
	mov	r1, r10
	str	r9, [sp, #36]
	mov	r0, r8
	movt	r3, #:upper16:ffs_sb_fill
	add	r2, sp, #20
	bl	mount_single
.L7265:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7272:
	ldrb	r2, [r4]	@ zero_extendqisi2
	cmp	r2, #109
	bne	.L7271
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	add	r1, r4, #1
	cmp	r2, #111
	bne	.L7271
	ldrb	r2, [r1, #1]!	@ zero_extendqisi2
	cmp	r2, #100
	bne	.L7271
	ldrb	r2, [r1, #1]	@ zero_extendqisi2
	cmp	r2, #101
	bne	.L7271
	uxth	r3, r0
	movw	r2, #365
	movw	r1, #438
	and	r2, r2, r3
	and	r3, r3, r1
	orr	r2, r2, #16384
	orr	r3, r3, fp
	strh	r3, [sp, #20]	@ movhi
	strh	r2, [sp, #32]	@ movhi
	b	.L7276
.L7305:
	ldrb	r2, [r4]	@ zero_extendqisi2
	cmp	r2, #117
	beq	.L7306
	cmp	r2, #103
	bne	.L7271
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	cmp	r2, #105
	bne	.L7271
	ldrb	r2, [r4, #2]	@ zero_extendqisi2
	cmp	r2, #100
	bne	.L7271
	str	r0, [sp, #28]
	b	.L7276
.L7273:
	mov	r2, r5
	mov	r0, r4
	ldr	r1, [sp, #4]
	bl	memcmp
	cmp	r0, #0
	bne	.L7275
	movw	r2, #365
	and	r3, r2, r8
	orr	r3, r3, #16384
	strh	r3, [sp, #32]	@ movhi
.L7276:
	cmp	r7, #0
	beq	.L7301
	add	r4, r7, #1
	b	.L7285
.L7275:
	mov	r2, r5
	mov	r0, r4
	ldr	r1, [sp, #8]
	bl	memcmp
	cmp	r0, #0
	bne	.L7271
	movw	r2, #438
	and	r3, r2, r8
	orr	r3, r3, fp
	strh	r3, [sp, #20]	@ movhi
	b	.L7276
.L7303:
	movw	r0, #:lower16:.LC661
	mov	r1, r4
	movt	r0, #:upper16:.LC661
	bl	printk
	b	.L7269
.L7306:
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	cmp	r2, #105
	bne	.L7271
	ldrb	r2, [r4, #2]	@ zero_extendqisi2
	cmp	r2, #100
	bne	.L7271
	str	r0, [sp, #24]
	b	.L7276
.L7304:
	movw	r0, #:lower16:.LC662
	mov	r2, r6
	mov	r1, r4
	movt	r0, #:upper16:.LC662
	bl	printk
	b	.L7269
	.fnend
	.size	ffs_fs_mount, .-ffs_fs_mount
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_setup, %function
audio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #20
	sub	sp, sp, #20
	ldrb	r3, [r1]	@ zero_extendqisi2
	ldrh	r9, [r1, #4]	@ unaligned
	ldrh	r7, [r1, #2]	@ unaligned
	ldr	r6, [r2, #24]
	cmp	r3, #34
	ldrh	r8, [r1, #6]	@ unaligned
	ldr	r5, [r6, #4]
	beq	.L7309
	cmp	r3, #162
	bne	.L7318
	ldr	r0, .L7332
	ldr	fp, [r5]
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7329
.L7315:
	cmp	r7, #256
	bne	.L7318
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	sub	r3, r3, #129
	cmp	r3, #3
	bhi	.L7318
	mov	r1, #68
	mvn	r2, #83
	mov	r3, #0
	mov	r10, #3
	strb	r1, [fp]
	strb	r2, [fp, #1]
	strb	r3, [fp, #2]
.L7314:
	ldr	r0, .L7332+4
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7330
.L7317:
	ldrb	r0, [r5, #26]	@ zero_extendqisi2
	movw	r3, #:lower16:audio_control_complete
	str	r10, [r5, #4]
	movt	r3, #:upper16:audio_control_complete
	mov	r1, r5
	mov	r2, #32
	str	r3, [r5, #28]
	bfc	r0, #1, #1
	strb	r0, [r5, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L7307
	movw	r0, #:lower16:.LC671
	mov	r1, r4
	movt	r0, #:upper16:.LC671
	bl	printk
	b	.L7307
.L7318:
	mvn	r4, #94
.L7307:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7309:
	ldr	r0, .L7332+8
	ldrb	r2, [r1, #1]	@ zero_extendqisi2
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7331
.L7312:
	sub	r2, r2, #1
	cmp	r2, #3
	bhi	.L7318
	mov	r10, r8
	b	.L7314
.L7330:
	movw	r1, #:lower16:.LC670
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	sub	r0, r0, #24
	str	r7, [sp]
	movt	r1, #:upper16:.LC670
	ldrb	r2, [r4]	@ zero_extendqisi2
	str	r9, [sp, #4]
	str	r8, [sp, #8]
	bl	__dynamic_pr_debug
	b	.L7317
.L7331:
	movw	r1, #:lower16:.LC669
	sub	r0, r0, #24
	strd	r8, [sp]
	movt	r1, #:upper16:.LC669
	mov	r3, r7
	bl	__dynamic_pr_debug
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	b	.L7312
.L7329:
	lsr	ip, r9, #8
	ldrb	r2, [r1, #1]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC669
	movt	r1, #:upper16:.LC669
	mov	r3, r7
	sub	r0, r0, #32
	stm	sp, {r8, ip}
	bl	__dynamic_pr_debug
	b	.L7315
.L7333:
	.align	2
.L7332:
	.word	.LANCHOR4-1600
	.word	.LANCHOR4-1584
	.word	.LANCHOR4-1632
	.fnend
	.size	audio_setup, .-audio_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_qti_send_cpkt_tomodem, %function
grmnet_ctrl_qti_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	cmp	r2, #2048
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r5, r2
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r3, #3604]
	bhi	.L7361
	movw	r3, #:lower16:kmalloc_caches
	mov	r7, r1
	movt	r3, #:upper16:kmalloc_caches
	ldr	r6, [r3, #24]
	cmp	r6, #0
	beq	.L7337
	mov	r0, r6
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L7339
	mov	r1, #32
	mov	r0, r5
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r6]
	beq	.L7345
	cmn	r6, #4096
	str	r5, [r6, #4]
	bhi	.L7339
.L7341:
	ldr	r8, .L7365
	mov	r1, r7
	mov	r2, r5
	bl	memcpy
	str	r5, [r6, #4]
	ldrh	r3, [r8, #-14]
	tst	r3, #4
	bne	.L7362
.L7342:
	add	r7, r4, #52
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldrb	r5, [r4, #4]	@ zero_extendqisi2
	mov	r9, r0
	cmp	r5, #0
	beq	.L7363
	add	r0, r6, #8
	add	r2, r4, #44
	ldr	r1, [r4, #48]
	bl	__list_add
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, .L7365+4
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L7364
.L7344:
	add	r0, r4, #32
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	bl	__wake_up
	mov	r0, #0
.L7334:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7337:
	mov	r1, #32
	mov	r0, r2
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r6, #16]
	strne	r5, [r6, #20]
	movne	r6, #16
	bne	.L7341
	mov	r6, #16
.L7345:
	mov	r0, r6
	bl	kfree
.L7339:
	movw	r0, #:lower16:.LC673
	ldr	r1, .L7365+8
	movt	r0, #:upper16:.LC673
	bl	printk
	mvn	r0, #11
	b	.L7334
.L7362:
	movw	r1, #:lower16:.LC674
	mov	r3, r5
	ldr	r2, .L7365+8
	movt	r1, #:upper16:.LC674
	sub	r0, r8, #32
	bl	__dynamic_pr_debug
	b	.L7342
.L7364:
	movw	r1, #:lower16:.LC676
	sub	r0, r8, #8
	ldr	r2, .L7365+8
	movt	r1, #:upper16:.LC676
	bl	__dynamic_pr_debug
	b	.L7344
.L7361:
	movw	r0, #:lower16:.LC672
	mov	r1, r2
	movt	r0, #:upper16:.LC672
	mov	r2, #2048
	bl	printk
	mvn	r0, #21
	b	.L7334
.L7363:
	movw	r0, #:lower16:.LC675
	mov	r1, r4
	movt	r0, #:upper16:.LC675
	bl	printk
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r6]
	bl	kfree
	mov	r0, r6
	bl	kfree
	mov	r0, r5
	b	.L7334
.L7366:
	.align	2
.L7365:
	.word	.LANCHOR4-1552
	.word	.LANCHOR4-1536
	.word	.LANCHOR5-2908
	.fnend
	.size	grmnet_ctrl_qti_send_cpkt_tomodem, .-grmnet_ctrl_qti_send_cpkt_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	uasp_function_cleanup, %function
uasp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	uasp_function_cleanup, .-uasp_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_complete_epout, %function
rmnet_sdio_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r1, #44]
	ldr	r6, [r1, #32]
	ldr	r8, [r4, #84]
	cmn	r3, #104
	beq	.L7395
	cmp	r3, #0
	beq	.L7371
	cmn	r3, #108
	beq	.L7395
	ldr	r2, [r0, #4]
	movw	r1, #:lower16:.LC212
	ldr	lr, [r5, #4]
	movt	r1, #:upper16:.LC212
	ldr	ip, [r5, #48]
	ldr	r0, [r8]
	stm	sp, {ip, lr}
	add	r0, r0, #32
	bl	dev_err
	mov	r0, r6
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #320]
	tst	r3, #2
	beq	.L7372
	add	r7, r4, #188
	mov	r0, r7
	bl	_raw_spin_lock
.L7373:
	movw	r3, #:lower16:.LANCHOR0
	ldr	r2, [r4, #328]
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #1364]
	cmp	r2, r3
	bcs	.L7396
	mov	r0, r7
	bl	_raw_spin_unlock
	mvn	r3, #0
	mov	r2, #0
	mov	r1, #32
	movw	r0, #2056
	bl	__alloc_skb
	subs	r6, r0, #0
	beq	.L7377
	ldr	r0, [r6, #160]
	mov	ip, #2048
	mov	r2, #32
	ldr	r3, [r6, #172]
	mov	r1, r5
	add	r0, r0, #8
	add	r3, r3, #8
	str	r0, [r6, #160]
	str	r3, [r6, #172]
	stm	r5, {r3, ip}
	str	r6, [r5, #32]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	bne	.L7397
.L7368:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7372:
	movw	r0, #:lower16:.LC259
	ldr	r1, .L7398
	movt	r0, #:upper16:.LC259
	bl	printk
.L7395:
	mov	r0, r6
	bl	dev_kfree_skb_any
	mov	r3, #0
	mov	r0, r3
	str	r3, [r5]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	ldr	r3, [r3, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L7371:
	mov	r0, r6
	ldr	r1, [r1, #48]
	bl	skb_put
	ldr	r3, [r4, #320]
	tst	r3, #2
	beq	.L7372
	add	r7, r4, #188
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #176]
	add	r1, r4, #172
	add	r2, r4, #236
	mov	r0, #4
	stm	r6, {r1, r3}
	str	r6, [r3]
	ldr	r3, [r4, #180]
	str	r6, [r4, #176]
	ldr	r1, [r4, #200]
	add	r3, r3, #1
	str	r3, [r4, #180]
	bl	queue_work_on
	b	.L7373
.L7396:
	add	r0, r5, #36
	add	r2, r4, #160
	ldr	r1, [r4, #164]
	bl	__list_add
	ldr	r3, [r4, #168]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #168]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L7397:
	mov	r0, r6
	bl	dev_kfree_skb_any
.L7375:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC214
	mov	r2, r7
	movt	r1, #:upper16:.LC214
	add	r0, r0, #32
	bl	dev_err
	add	r0, r5, #36
	add	r2, r4, #160
	ldr	r1, [r4, #164]
	bl	__list_add
	ldr	r3, [r4, #168]
	add	r3, r3, #1
	str	r3, [r4, #168]
	b	.L7368
.L7377:
	mvn	r7, #11
	b	.L7375
.L7399:
	.align	2
.L7398:
	.word	.LANCHOR5-2872
	.fnend
	.size	rmnet_sdio_complete_epout, .-rmnet_sdio_complete_epout
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_command_complete, %function
rmnet_sdio_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r6, [r4, #84]
	cmp	r2, #0
	blt	.L7412
	ldr	r3, [r4, #324]
	tst	r3, #2
	bne	.L7413
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7413:
	movw	r3, #:lower16:kmalloc_caches
	mov	r5, r1
	ldr	r7, [r1, #48]
	movt	r3, #:upper16:kmalloc_caches
	ldr	r8, [r3, #24]
	cmp	r8, #0
	beq	.L7403
	mov	r0, r8
	mov	r2, #16
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r8, r0, #0
	beq	.L7405
	mov	r1, #32
	mov	r0, r7
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r8]
	beq	.L7409
	cmn	r8, #4096
	bhi	.L7405
.L7408:
	mov	r2, r7
	ldr	r1, [r5]
	add	r5, r4, #188
	bl	memcpy
	mov	r0, r5
	str	r7, [r8, #4]
	bl	_raw_spin_lock
	add	r2, r4, #108
	ldr	r1, [r4, #112]
	add	r0, r8, #8
	bl	__list_add
	ldr	r3, [r4, #116]
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #116]
	bl	_raw_spin_unlock
	ldrd	r6, [sp, #8]
	add	r2, r4, #220
	mov	r0, #4
	ldr	r1, [r4, #200]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	queue_work_on
.L7403:
	mov	r1, #32
	mov	r0, r7
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r8, #16]
	mov	r8, #16
	bne	.L7408
.L7409:
	mov	r0, r8
	bl	kfree
.L7405:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC677
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC677
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
.L7412:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC209
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC209
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
	.fnend
	.size	rmnet_sdio_command_complete, .-rmnet_sdio_command_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_close, %function
modem_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	modem_close, .-modem_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rx_complete, %function
rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	add	r7, r1, #36
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0]
	ldr	r3, [r1, #44]
	ldr	r6, [r1, #32]
	add	r8, r4, #28
	add	r5, r4, #16
	cmn	r3, #103
	beq	.L7417
	ble	.L7441
	cmn	r3, #75
	beq	.L7420
	cmp	r3, #0
	bne	.L7416
	mov	r0, r6
	ldr	r1, [r1, #48]
	bl	skb_put
	ldr	r3, [r4, #84]
	cmp	r3, #0
	beq	.L7422
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	ldr	r0, [r4, #4]
	cmp	r0, #0
	beq	.L7423
	mov	r1, r6
	add	r2, r4, #52
	ldr	r3, [r4, #84]
	blx	r3
	cmn	r0, #22
	mov	r6, r0
	beq	.L7442
	cmn	r0, #75
	beq	.L7443
	mov	r1, r9
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L7427
	b	.L7425
.L7420:
	ldr	r2, [r4, #8]
	ldr	r3, [r2, #276]
	add	r3, r3, #1
	str	r3, [r2, #276]
.L7416:
	mov	r0, r6
	bl	dev_kfree_skb_any
	ldr	r2, [r4, #8]
	ldr	r3, [r2, #248]
	add	r3, r3, #1
	str	r3, [r2, #248]
.L7427:
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r1, r8
	ldr	r2, [r4, #28]
	mov	r0, r7
	bl	__list_add
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #104
	ldrd	r4, [sp]
	movt	r3, #:upper16:.LANCHOR1
	ldrd	r6, [sp, #8]
	mov	r0, #4
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, [r3, #3404]
	b	queue_work_on
.L7441:
	cmn	r3, #108
	beq	.L7419
	cmn	r3, #104
	bne	.L7416
.L7419:
	mov	r0, r6
	bl	dev_kfree_skb_any
.L7425:
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r0, r7
	mov	r1, r8
	ldr	r2, [r4, #28]
	bl	__list_add
	ldrd	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock
.L7417:
	add	r1, r4, #120
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L7419
	movw	r3, #:lower16:system_wq
	add	r2, r4, #88
	movt	r3, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r3]
	bl	queue_work_on
	subs	r2, r0, #0
	bne	.L7419
	movw	r0, #:lower16:.LC678
	ldr	r1, [r4, #8]
	movt	r0, #:upper16:.LC678
	bl	printk
	b	.L7419
.L7422:
	mov	r1, r6
	add	r0, r4, #52
	bl	skb_queue_tail
	b	.L7427
.L7442:
	ldr	r2, [r4, #8]
	mov	r1, r9
	mov	r0, r4
	ldr	r3, [r2, #248]
	add	r3, r3, #1
	str	r3, [r2, #248]
	bl	_raw_spin_unlock_irqrestore
	b	.L7425
.L7443:
	ldr	r2, [r4, #8]
	mov	r1, r9
	mov	r0, r4
	ldr	r3, [r2, #276]
	add	r3, r3, #1
	str	r3, [r2, #276]
	bl	_raw_spin_unlock_irqrestore
	b	.L7425
.L7423:
	mov	r0, r6
	bl	dev_kfree_skb_any
	mov	r1, r9
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	b	.L7425
	.fnend
	.size	rx_complete, .-rx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_sdio_open, %function
debug_sdio_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	debug_sdio_open, .-debug_sdio_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_smd_open, %function
debug_smd_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	debug_smd_open, .-debug_smd_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_function_init, %function
qdss_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	qdss_function_init, .-qdss_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ptp_function_init, %function
ptp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	ptp_function_init, .-ptp_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	uasp_function_init, %function
uasp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	uasp_function_init, .-uasp_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_rmnet_sdio_open, %function
debug_rmnet_sdio_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	debug_rmnet_sdio_open, .-debug_rmnet_sdio_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	serial_debug_open, %function
serial_debug_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	serial_debug_open, .-serial_debug_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	dbg_rmnet_mux_open, %function
dbg_rmnet_mux_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	dbg_rmnet_mux_open, .-dbg_rmnet_mux_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_in_close, %function
f_midi_in_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_in_close, .-f_midi_in_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_out_close, %function
f_midi_out_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_out_close, .-f_midi_out_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_start, %function
acc_hid_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	acc_hid_start, .-acc_hid_start
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_open, %function
acc_hid_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	acc_hid_open, .-acc_hid_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_lun_release, %function
fsg_lun_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	fsg_lun_release, .-fsg_lun_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_stop, %function
acc_hid_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	acc_hid_stop, .-acc_hid_stop
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_close, %function
acc_hid_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	acc_hid_close, .-acc_hid_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ptp_function_cleanup, %function
ptp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	ptp_function_cleanup, .-ptp_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_do_descs.constprop.142, %function
ffs_do_descs.constprop.142:
	.fnstart
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	cmp	r1, #0
	ldr	r5, [sp, #16]
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	clz	lr, r0
	lsr	lr, lr, #5
	moveq	lr, #1
	cmp	lr, #0
	bne	.L7477
	cmp	r2, #1
	bls	.L7465
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r2, r3
	bcc	.L7465
	mov	r4, r2
.L7463:
	ldrb	ip, [r1, #1]	@ zero_extendqisi2
	sub	ip, ip, #4
	cmp	ip, #44
	ldrls	pc, [pc, ip, asl #2]
	b	.L7465
.L7467:
	.word	.L7466
	.word	.L7468
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7469
	.word	.L7465
	.word	.L7470
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7465
	.word	.L7471
.L7469:
	cmp	r3, #5
	bne	.L7465
.L7474:
	adds	r1, r1, r3
	add	lr, lr, #1
	moveq	ip, #1
	movne	ip, #0
	sub	r4, r4, r3
	cmp	r0, lr
	movne	r3, ip
	orreq	r3, ip, #1
	cmp	r3, #0
	bne	.L7489
	cmp	r4, #1
	bls	.L7465
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r4, r3
	bcs	.L7463
.L7465:
	ldr	r0, .L7491
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	mvneq	r0, #21
	bne	.L7490
.L7460:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7471:
	cmp	r3, #6
	beq	.L7474
	b	.L7465
.L7468:
	sub	ip, r3, #7
	tst	ip, #253
	bne	.L7465
	ldrb	ip, [r1, #2]	@ zero_extendqisi2
	ands	ip, ip, #15
	beq	.L7465
	ldrh	r6, [r5, #180]
	cmp	ip, r6
	strhgt	ip, [r5, #180]	@ movhi
	b	.L7474
.L7466:
	cmp	r3, #9
	bne	.L7465
	ldrb	ip, [r1, #2]	@ zero_extendqisi2
	ldrh	r6, [r5, #178]
	cmp	r6, ip
	addls	ip, ip, #1
	strhls	ip, [r5, #178]	@ movhi
	ldrb	ip, [r1, #8]	@ zero_extendqisi2
	cmp	ip, #0
	beq	.L7474
.L7488:
	ldrh	r6, [r5, #176]
	uxth	ip, ip
	cmp	r6, ip
	strhcc	ip, [r5, #176]	@ movhi
	b	.L7474
.L7470:
	cmp	r3, #8
	bne	.L7465
	ldrb	ip, [r1, #7]	@ zero_extendqisi2
	cmp	ip, #0
	bne	.L7488
	b	.L7474
.L7489:
	sub	r0, r2, r4
	b	.L7460
.L7477:
	mov	r0, #0
	b	.L7460
.L7490:
	movw	r1, #:lower16:.LC679
	sub	r0, r0, #32
	ldr	r2, .L7491+4
	movt	r1, #:upper16:.LC679
	mvn	r3, #21
	bl	__dynamic_pr_debug
	mvn	r0, #21
	b	.L7460
.L7492:
	.align	2
.L7491:
	.word	.LANCHOR4-1504
	.word	.LANCHOR5-2844
	.fnend
	.size	ffs_do_descs.constprop.142, .-ffs_do_descs.constprop.142
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_function_cleanup, %function
audio_source_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #4]
	b	kfree
	.fnend
	.size	audio_source_function_cleanup, .-audio_source_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_cleanup.part.81, %function
gserial_cleanup.part.81:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r6, #3760]
	str	lr, [sp, #24]
	.pad #28
	sub	sp, sp, #28
	cmp	r3, #0
	beq	.L7495
	mov	r4, #0
.L7496:
	mov	r1, r4
	ldr	r0, [r6, #3764]
	add	r4, r4, #1
	bl	tty_unregister_device
	ldr	r3, [r6, #3760]
	cmp	r4, r3
	bcc	.L7496
	cmp	r3, #0
	beq	.L7495
	mov	r3, sp
	ldr	r5, .L7520
	mov	r8, #0
	bic	r9, r3, #8128
	bic	r9, r9, #63
.L7497:
	mov	r0, r5
	bl	mutex_lock
	ldr	r4, [r5, #20]
	mov	r3, #0
	mov	r0, r5
	str	r3, [r5, #20]
	bl	mutex_unlock
	add	r0, r4, #60
	bl	cancel_work_sync
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #12]
	cmp	r3, #0
	bne	.L7498
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L7517
.L7498:
	mov	r0, r4
	add	r7, r4, #20
	bl	_raw_spin_unlock_irq
	ldr	r0, [r9, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #16
	mov	r3, #0
	movt	r2, #:upper16:autoremove_wake_function
	str	r3, [sp, #4]
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L7502
.L7500:
	bl	_raw_spin_unlock_irq
	bl	schedule
.L7502:
	mov	r2, #2
	add	r1, sp, #4
	mov	r0, r7
	bl	prepare_to_wait
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #12]
	mov	r0, r4
	cmp	r3, #0
	bne	.L7500
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L7500
	bl	_raw_spin_unlock_irq
	add	r1, sp, #4
	mov	r0, r7
	bl	finish_wait
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L7518
.L7503:
	mov	r0, r4
	add	r8, r8, #1
	bl	kfree
	ldr	r3, [r6, #3760]
	add	r5, r5, #24
	cmp	r8, r3
	bcc	.L7497
.L7495:
	mov	r4, #0
	ldr	r0, [r6, #3960]
	str	r4, [r6, #3760]
	bl	debugfs_remove_recursive
	ldr	r0, [r6, #3388]
	bl	destroy_workqueue
	ldr	r0, [r6, #3764]
	bl	tty_unregister_driver
	ldr	r0, [r6, #3764]
	bl	put_tty_driver
	ldr	r0, .L7520+4
	str	r4, [r6, #3764]
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7519
.L7494:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L7517:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L7503
.L7518:
	movw	r0, #:lower16:.LC680
	movw	r1, #1477
	movt	r0, #:upper16:.LC680
	add	r8, r8, #1
	bl	warn_slowpath_null
	mov	r0, r4
	add	r5, r5, #24
	bl	kfree
	ldr	r3, [r6, #3760]
	cmp	r3, r8
	bhi	.L7497
	b	.L7495
.L7519:
	movw	r1, #:lower16:.LC681
	ldr	r2, .L7520+8
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC681
	bl	__dynamic_pr_debug
	b	.L7494
.L7521:
	.align	2
.L7520:
	.word	.LANCHOR1+3768
	.word	.LANCHOR4-1488
	.word	.LANCHOR5-2828
	.fnend
	.size	gserial_cleanup.part.81, .-gserial_cleanup.part.81
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_function_cleanup, %function
acm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r3, #3764]
	cmp	r3, #0
	beq	.L7523
	bl	gserial_cleanup.part.81
.L7523:
	ldr	r0, [r4, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	acm_function_cleanup, .-acm_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_function_cleanup, %function
rndis_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_function_cleanup, .-rndis_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_function_cleanup, %function
mass_storage_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	mass_storage_function_cleanup, .-mass_storage_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	__ffs_data_do_entity, %function
__ffs_data_do_entity:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #2
	beq	.L7534
	cmp	r0, #3
	beq	.L7535
	cmp	r0, #1
	beq	.L7537
	mov	r0, #0
	bx	lr
.L7537:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #178]
	cmp	r1, r2
	addls	r2, r2, #1
	strhls	r2, [r3, #178]	@ movhi
	bx	lr
.L7535:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #180]
	and	r2, r2, #15
	cmp	r2, r1
	strhgt	r2, [r3, #180]	@ movhi
	bx	lr
.L7534:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #176]
	cmp	r1, r2
	strhcc	r2, [r3, #176]	@ movhi
	bx	lr
	.fnend
	.size	__ffs_data_do_entity, .-__ffs_data_do_entity
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_indicate_status_msg, %function
rndis_indicate_status_msg:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	lsl	r5, r0, #4
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	ldr	r10, .L7545
	sub	r4, r5, r0
	lsl	r4, r4, #2
	strd	r8, [sp, #16]
	str	lr, [sp, #28]
	add	r7, r10, r4
	ldr	r3, [r7, #4]
	cmp	r3, #0
	beq	.L7541
	movw	r3, #:lower16:kmalloc_caches
	mov	r9, r0
	movt	r3, #:upper16:kmalloc_caches
	mov	r8, r1
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L7542
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L7543
	add	r2, r6, #20
.L7540:
	movw	r3, #:lower16:.LANCHOR1
	sub	r5, r5, r9
	str	r2, [r6, #8]
	movt	r3, #:upper16:.LANCHOR1
	mov	r9, #20
	add	r3, r3, r5, lsl #2
	mov	r5, #0
	add	r2, r4, #52
	str	r9, [r6, #12]
	mov	r0, r6
	str	r5, [r6, #16]
	add	r2, r10, r2
	ldr	r1, [r3, #3736]
	bl	__list_add
	ldr	r3, [r6, #8]
	mov	r2, #7
	stm	r3, {r2, r9}
	str	r8, [r3, #8]
	str	r5, [r3, #12]
	str	r5, [r3, #16]
	ldr	r3, [r7, #44]
	ldr	r0, [r7, #48]
	blx	r3
	mov	r0, r5
.L7538:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7542:
	mov	r2, #36
	mov	r6, #16
	b	.L7540
.L7541:
	movw	r0, #65012
	movt	r0, 65535
	b	.L7538
.L7543:
	mvn	r0, #11
	b	.L7538
.L7546:
	.align	2
.L7545:
	.word	.LANCHOR1+3680
	.fnend
	.size	rndis_indicate_status_msg, .-rndis_indicate_status_msg
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_proc_write, %function
rndis_proc_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	subs	r9, r2, #0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #12]
	.pad #4
	sub	sp, sp, #4
	ldr	r3, [r3, #32]
	ldr	r3, [r3, #-20]
	ldr	r8, [r3, #44]
	beq	.L7548
	mov	r7, #0
	mov	r6, #57344
	movw	r10, #:lower16:.LC682
	mov	r4, r1
	mov	r5, r7
	movt	r6, 65535
	movt	r10, #:upper16:.LC682
	add	fp, r1, r9
.L7557:
	mov	r3, sp
	mov	r0, r4
	and	r3, r3, r6
	ldr	r1, [r3, #8]
	sub	r1, r1, #1
	.syntax divided
@ 1185 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/rndis.c" 1
	.ifnc r0,r0 ; .err ; .endif
	.ifnc r2,r2 ; .err ; .endif
	.ifnc r1,r1 ; .err ; .endif
	bl	__get_user_1
@ 0 "" 2
	.arm
	.syntax unified
	uxtb	r2, r2
	cmp	r0, #0
	sub	r3, r2, #48
	bne	.L7558
	cmp	r3, #52
	ldrls	pc, [pc, r3, asl #2]
	b	.L7550
.L7552:
	.word	.L7551
	.word	.L7551
	.word	.L7551
	.word	.L7551
	.word	.L7551
	.word	.L7551
	.word	.L7551
	.word	.L7551
	.word	.L7551
	.word	.L7551
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7553
	.word	.L7554
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7550
	.word	.L7553
	.word	.L7554
.L7554:
	ldrb	r0, [r8]	@ zero_extendqisi2
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #1
	movt	r3, #:upper16:.LANCHOR1
	mov	r1, #12
.L7567:
	rsb	ip, r0, r0, lsl #4
	movt	r1, 16385
	add	r3, r3, ip, lsl #2
	str	r2, [r3, #3696]
	bl	rndis_indicate_status_msg
.L7555:
	add	r4, r4, #1
	cmp	r4, fp
	bne	.L7557
.L7548:
	mov	r0, r9
.L7547:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7553:
	movw	r3, #:lower16:.LANCHOR1
	ldrb	r0, [r8]	@ zero_extendqisi2
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	mov	r1, #11
	b	.L7567
.L7551:
	add	r5, r5, r5, lsl #2
	mov	r7, #1
	add	r5, r3, r5, lsl r7
	b	.L7555
.L7550:
	cmp	r7, #0
	ldr	r0, .L7568
	strne	r5, [r8, #12]
	bne	.L7555
	ldrh	r3, [r0]
	tst	r3, #4
	beq	.L7555
	mov	r1, r10
	sub	r0, r0, #18
	bl	__dynamic_pr_debug
	b	.L7555
.L7558:
	mvn	r0, #13
	b	.L7547
.L7569:
	.align	2
.L7568:
	.word	.LANCHOR4-1470
	.fnend
	.size	rndis_proc_write, .-rndis_proc_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_complete, %function
f_audio_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r3, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #20
	sub	sp, sp, #20
	ldr	r6, [r1, #32]
	ldr	r7, [r1, #44]
	str	r3, [sp, #12]
	cmp	r7, r3
	bne	.L7609
	ldr	r3, [r6, #172]
	mov	r5, r0
	mov	r4, r1
	cmp	r3, r0
	beq	.L7612
	ldr	r3, [r6, #176]
	cmp	r3, r0
	beq	.L7613
	ldr	r5, [r6, #272]
	cmp	r5, #0
	beq	.L7570
	ldm	r1, {r1, r2}
	add	r0, sp, #12
	bl	memcpy
	ldrh	r2, [sp, #12]
	mov	r0, r5
	ldrb	r1, [r6, #268]	@ zero_extendqisi2
	ldr	r3, [r5, #36]
	blx	r3
	str	r7, [r6, #272]
.L7570:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L7612:
	ldr	r7, [r6, #184]
	cmp	r7, #0
	beq	.L7570
	movw	r8, #:lower16:.LANCHOR0
	ldr	ip, [r7, #4]
	movt	r8, #:upper16:.LANCHOR0
	ldr	r2, [r1, #48]
	ldr	r3, [r8, #1076]
	sub	r1, r3, ip
	cmp	r1, r2
	bcs	.L7576
	ldr	r0, .L7619
	ldrh	r1, [r0, #-6]
	tst	r1, #4
	bne	.L7614
.L7577:
	add	r0, r7, #8
	add	r2, r6, #204
	ldr	r1, [r6, #208]
	bl	__list_add
	movw	r3, #:lower16:system_wq
	add	r2, r6, #188
	movt	r3, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r3]
	bl	queue_work_on
	ldr	r0, [r8, #1076]
	bl	f_audio_buffer_alloc
	cmn	r0, #4096
	mov	r7, r0
	bhi	.L7578
	ldr	r2, [r4, #48]
	ldr	ip, [r0, #4]
.L7576:
	ldr	r0, [r7]
	ldr	r1, [r4]
	add	r0, r0, ip
	bl	memcpy
	ldr	ip, [r4, #48]
	mov	r1, r4
	mov	r2, #32
	ldr	r3, [r7, #4]
	mov	r0, r5
	add	r3, r3, ip
	str	r3, [r7, #4]
	str	r7, [r6, #184]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L7570
	ldr	r1, .L7619+4
	movw	r0, #:lower16:.LC684
	ldr	r2, [r5, #4]
	movt	r0, #:upper16:.LC684
.L7611:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk
.L7613:
	ldr	r7, [r6, #216]
	cmp	r7, #0
	beq	.L7615
.L7581:
	ldr	r0, .L7619+8
	ldr	r2, [r4, #48]
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7616
.L7585:
	ldm	r7, {r1, r3}
	ldr	r0, [r4]
	add	r1, r1, r3
	bl	memcpy
	ldr	r1, [r4, #48]
	movw	r2, #:lower16:.LANCHOR0
	ldr	r3, [r7, #4]
	movt	r2, #:upper16:.LANCHOR0
	ldr	r2, [r2, #1368]
	add	r3, r3, r1
	sub	r2, r2, r3
	str	r3, [r7, #4]
	ldr	r3, [r4, #48]
	cmp	r2, r3
	bcs	.L7584
	cmp	r7, #0
	beq	.L7586
	ldr	r0, [r7]
	bl	kfree
	mov	r3, #0
	mov	r0, r7
	str	r3, [r7]
	bl	kfree
.L7586:
	mov	r0, #0
	movw	r3, #:lower16:system_wq
	movt	r3, #:upper16:system_wq
	add	r2, r6, #220
	str	r0, [r6, #216]
	ldr	r1, [r3]
	mov	r0, #4
	bl	queue_work_on
.L7584:
	ldr	r3, [r5, #8]
	mov	r1, r4
	mov	r2, #32
	mov	r0, r5
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L7570
	movw	r0, #:lower16:.LC684
	ldr	r1, .L7619+12
	movt	r0, #:upper16:.LC684
	ldr	r2, [r5, #4]
	b	.L7611
.L7615:
	ldr	r0, .L7619+16
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7617
.L7582:
	add	r8, r6, #212
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r3, r6
	mov	r9, r0
	ldr	r0, [r3, #236]!
	cmp	r0, r3
	beq	.L7618
	sub	r7, r0, #8
	bl	list_del
	mov	r1, r9
	mov	r0, r8
	str	r7, [r6, #216]
	bl	_raw_spin_unlock_irqrestore
	b	.L7581
.L7616:
	movw	r1, #:lower16:.LC686
	mov	r3, r2
	ldr	r2, .L7619+12
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC686
	bl	__dynamic_pr_debug
	ldr	r2, [r4, #48]
	b	.L7585
.L7618:
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:system_wq
	add	r2, r6, #220
	movt	r3, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r3]
	bl	queue_work_on
	b	.L7584
.L7578:
	ldr	r1, .L7619+4
	movw	r0, #:lower16:.LC39
	movt	r0, #:upper16:.LC39
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk
.L7614:
	movw	r1, #:lower16:.LC683
	str	ip, [sp]
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC683
	str	r2, [sp, #4]
	ldr	r2, .L7619+4
	bl	__dynamic_pr_debug
	b	.L7577
.L7617:
	movw	r1, #:lower16:.LC685
	ldr	r2, .L7619+12
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC685
	bl	__dynamic_pr_debug
	b	.L7582
.L7609:
	ldr	r1, .L7619+20
	movw	r0, #:lower16:.LC687
	mov	r2, r7
	movt	r0, #:upper16:.LC687
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk
.L7620:
	.align	2
.L7619:
	.word	.LANCHOR4-1440
	.word	.LANCHOR5-2812
	.word	.LANCHOR4-1392
	.word	.LANCHOR5-2780
	.word	.LANCHOR4-1408
	.word	.LANCHOR5-2752
	.fnend
	.size	f_audio_complete, .-f_audio_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_unbind, %function
audio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r8, r1, #108
	add	r9, r1, #96
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	b	.L7622
.L7625:
	ldr	r6, [r5, #104]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L7622:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #96]
	mov	r6, r0
	cmp	r4, r9
	mov	r0, r4
	sub	r7, r4, #36
	beq	.L7627
	bl	list_del
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	bne	.L7625
.L7624:
	ldr	r0, [r5, #84]
	bl	snd_card_free_when_closed
	mov	r3, #0
	str	r3, [r5, #84]
	str	r3, [r5, #88]
	str	r3, [r5, #92]
	str	r3, [r5, #104]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7627:
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L7624
	.fnend
	.size	audio_unbind, .-audio_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	do_set_interface, %function
do_set_interface:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r3, [r0, #144]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	tst	r3, #32
	beq	.L7629
	ldr	r0, .L7665
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7664
.L7629:
	clz	r3, r7
	movw	r9, #:lower16:bulk_in_complete
	lsr	r3, r3, #5
	movw	r8, #:lower16:bulk_out_complete
	movt	r9, #:upper16:bulk_in_complete
	movt	r8, #:upper16:bulk_out_complete
	str	r3, [sp, #4]
	mov	r3, #0
	str	r3, [sp]
.L7638:
	ldr	fp, [r4, #8]
	cmp	fp, #0
	beq	.L7630
	mov	r6, #0
	mov	r10, r6
.L7633:
	ldr	r5, [r4, #68]
	add	r5, r5, r6
	add	r6, r6, #32
	ldr	r1, [r5, #16]
	cmp	r1, #0
	beq	.L7631
	ldr	r0, [fp, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	str	r10, [r5, #16]
.L7631:
	ldr	r1, [r5, #24]
	cmp	r1, #0
	beq	.L7632
	ldr	r0, [fp, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	str	r10, [r5, #24]
.L7632:
	cmp	r6, #128
	bne	.L7633
	mov	r0, #0
	mov	r2, #1
	mov	r3, r0
	mov	r1, #3
	str	r0, [r4, #8]
	add	r0, r4, #16
	bl	__wake_up
.L7630:
	ldm	sp, {r2, r6}
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	cmp	r2, #0
	movne	r6, #1
	bfc	r3, #5, #1
	cmp	r6, #0
	strb	r3, [r4, #144]
	bne	.L7628
	str	r7, [r4, #8]
.L7640:
	ldr	r10, [r7, #100]
	mov	r1, #32
	ldr	r5, [r4, #68]
	ldr	r3, [r10, #8]
	mov	r0, r10
	add	r5, r5, r6
	add	r6, r6, r1
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	mov	r1, #32
	str	r0, [r5, #16]
	beq	.L7662
	ldr	r10, [r7, #104]
	ldr	r3, [r10, #8]
	mov	r0, r10
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r5, #24]
	beq	.L7662
	ldr	r3, [r5]
	cmp	r6, #128
	str	r3, [r0]
	ldr	r2, [r5, #16]
	str	r3, [r2]
	ldr	r3, [r5, #24]
	str	r5, [r3, #32]
	ldr	r3, [r5, #16]
	str	r5, [r3, #32]
	ldr	r3, [r5, #16]
	str	r9, [r3, #28]
	ldr	r3, [r5, #24]
	str	r8, [r3, #28]
	bne	.L7640
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	ldr	r2, [r4, #92]
	orr	r3, r3, #32
	cmp	r2, #0
	strb	r3, [r4, #144]
	beq	.L7642
	mov	r2, #0
	mov	r0, #10496
	mov	r1, r2
	movt	r0, 6
.L7641:
	ldr	r3, [r4, #100]
	add	r1, r1, #1
	add	r3, r3, r2
	add	r2, r2, #392
	str	r0, [r3, #36]
	ldr	r3, [r4, #92]
	cmp	r3, r1
	bhi	.L7641
.L7642:
	mov	r3, #0
	str	r3, [sp]
.L7628:
	ldr	r0, [sp]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7664:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC688
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC688
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L7629
.L7662:
	ldr	r0, [r4]
	mvn	r3, #11
	movw	r1, #:lower16:.LC689
	movt	r1, #:upper16:.LC689
	str	r3, [sp]
	ldr	r2, [r10, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L7638
.L7666:
	.align	2
.L7665:
	.word	.LANCHOR4-1360
	.fnend
	.size	do_set_interface, .-do_set_interface
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_write_tohost, %function
ghsic_data_write_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #136
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #88
	strd	r8, [sp, #16]
	mov	r0, r7
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	bl	_raw_spin_lock_irqsave
	ldr	r8, [r4, #-128]
	mov	r9, r0
	cmp	r8, #0
	beq	.L7671
	movw	r3, #:lower16:.LANCHOR1
	movw	fp, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR1
	movw	r2, #16960
	movt	r2, 15
	movt	fp, #:upper16:.LANCHOR0
	str	r3, [sp, #8]
	sub	r3, r4, #112
	str	r3, [sp, #4]
	str	r2, [sp, #12]
.L7670:
	ldr	r3, [r4, #-112]
	ldr	r2, [sp, #4]
	cmp	r3, r2
	beq	.L7671
.L7679:
	mov	r3, r4
	ldr	r5, [r3, #-104]!
	cmp	r5, r3
	beq	.L7671
	cmp	r5, #0
	beq	.L7671
	ldr	r3, [r4, #-96]
	mov	r2, #0
	sub	r3, r3, #1
	str	r3, [r4, #-96]
	ldm	r5, {r1, r3}
	str	r2, [r5]
	str	r2, [r5, #4]
	str	r3, [r1, #4]
	str	r1, [r3]
	ldr	r6, [r4, #-112]
	str	r5, [r6, #-4]
	ldr	r1, [r5, #172]
	mov	r0, r6
	ldrb	r3, [r6, #-10]	@ zero_extendqisi2
	sub	r10, r6, #36
	str	r1, [r6, #-36]
	ldr	r1, [r5, #80]
	orr	r3, r3, #2
	str	r1, [r6, #-32]
	strb	r3, [r6, #-10]
	ldr	r3, [r4, #48]
	ldr	r1, [fp, #1372]
	add	r3, r3, #1
	cmp	r3, r1
	str	r3, [r4, #48]
	ldrb	r3, [r6, #-10]	@ zero_extendqisi2
	bfieq	r3, r2, #0, #1
	orrne	r3, r3, #1
	strbeq	r3, [r6, #-10]
	strbne	r3, [r6, #-10]
	streq	r2, [r4, #48]
	bl	list_del
	ldr	r3, [sp, #8]
	ldr	r3, [r3, #3664]
	cmp	r3, #0
	bne	.L7698
.L7674:
	mov	r1, r9
	mov	r0, r7
	str	r3, [r5, #44]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r8, #8]
	mov	r1, r10
	mov	r2, #208
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	cmp	r10, #0
	mov	r9, r0
	bne	.L7699
	ldr	r3, [r4, #56]
	ldr	r2, [fp, #492]
	add	r3, r3, #1
	cmp	r2, #0
	str	r3, [r4, #56]
	beq	.L7670
	ldr	r2, [r4, #-96]
	ldr	r3, [fp, #1376]
	cmp	r2, r3
	bhi	.L7670
	add	r1, r4, #28
	mov	r0, #2
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L7670
	ldr	r2, [r4, #-96]
	ldr	r3, [r4, #64]
	str	r2, [r4, #80]
	ldr	r2, [sp, #4]
	add	r3, r3, #1
	str	r3, [r4, #64]
	ldr	r3, [r4, #-112]
	cmp	r3, r2
	bne	.L7679
.L7671:
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7698:
	add	r0, sp, #16
	bl	do_gettimeofday
	ldr	r1, [sp, #12]
	ldr	r3, [sp, #16]
	ldr	r2, [sp, #20]
	ubfx	r3, r3, #0, #12
	mla	r3, r1, r3, r2
	b	.L7674
.L7699:
	movw	r0, #:lower16:.LC573
	ldr	r1, .L7700
	movt	r0, #:upper16:.LC573
	bl	printk
	ldr	r1, [sp, #4]
	mov	r0, r6
	ldr	r2, [r4, #-112]
	bl	__list_add
	mov	r0, r5
	bl	dev_kfree_skb_any
	b	.L7671
.L7701:
	.align	2
.L7700:
	.word	.LANCHOR5-2732
	.fnend
	.size	ghsic_data_write_tohost, .-ghsic_data_write_tohost
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_notify_complete, %function
mbim_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r7, [r1]
	ldr	r4, [r1, #32]
	add	r6, r4, #204
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r5, #44]
	cmn	r3, #104
	beq	.L7704
	cmp	r3, #0
	bne	.L7760
	add	r3, r4, #168
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, .L7771
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7761
.L7706:
	ldr	r7, .L7771+4
	ldr	r5, [r4, #160]
	ldrh	r3, [r7, #-14]
	tst	r3, #4
	bne	.L7762
.L7715:
	cmp	r5, #0
	beq	.L7717
	ldrb	r3, [r4, #164]	@ zero_extendqisi2
	ldr	r2, [r5]
	cmp	r3, #0
	beq	.L7719
	cmp	r3, #3
	bne	.L7763
	ldr	r7, .L7771+8
	ldrh	r3, [r7, #-14]
	tst	r3, #4
	bne	.L7764
.L7723:
	ldr	r3, [r4, #168]
	cmp	r3, #0
	bgt	.L7724
	ldr	r3, .L7771+12
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L7765
.L7717:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, .L7771+16
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7766
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7719:
	ldr	r3, [r4, #168]
	cmp	r3, #0
	bgt	.L7767
	ldr	r3, .L7771+20
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	beq	.L7717
	movw	r1, #:lower16:.LC695
	sub	r0, r7, #8
	ldr	r2, .L7771+24
	movt	r1, #:upper16:.LC695
	bl	__dynamic_pr_debug
	b	.L7717
.L7763:
	mvn	r3, #94
	add	r7, r4, #168
	strb	r3, [r2]
	ldrb	r3, [r4, #196]	@ zero_extendqisi2
	strh	r3, [r2, #4]	@ unaligned
	.syntax divided
@ 45 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r3, [r7]
	add	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, .L7771+28
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7768
.L7725:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r4, #156]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r5, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r5, #0
	beq	.L7717
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC700
	mov	r2, r5
	ldr	r1, .L7771+24
	movt	r0, #:upper16:.LC700
	bl	printk
	b	.L7717
.L7724:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r4, #156]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r5, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r5, #0
	beq	.L7717
	add	r3, r4, #168
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC698
	mov	r2, r5
	ldr	r1, .L7771+24
	movt	r0, #:upper16:.LC698
	bl	printk
	b	.L7717
.L7762:
	movw	r1, #:lower16:.LC693
	ldrb	r3, [r4, #164]	@ zero_extendqisi2
	sub	r0, r7, #32
	movt	r1, #:upper16:.LC693
	ldr	r2, .L7771+24
	bl	__dynamic_pr_debug
	b	.L7715
.L7766:
	ldr	r3, .L7771+32
	movw	r1, #:lower16:.LC701
	sub	r0, r0, #24
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC701
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	mov	r2, r3
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__dynamic_pr_debug
.L7761:
	movw	r1, #:lower16:.LC690
	ldr	r2, .L7771+32
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC690
	ldr	r3, [r4, #168]
	bl	__dynamic_pr_debug
	b	.L7706
.L7765:
	movw	r1, #:lower16:.LC697
	sub	r0, r7, #8
	ldr	r2, .L7771+24
	movt	r1, #:upper16:.LC697
	bl	__dynamic_pr_debug
	b	.L7717
.L7768:
	movw	r1, #:lower16:.LC699
	ldr	r2, .L7771+24
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC699
	ldr	r3, [r4, #168]
	bl	__dynamic_pr_debug
	b	.L7725
.L7764:
	movw	r1, #:lower16:.LC696
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	sub	r0, r7, #32
	movt	r1, #:upper16:.LC696
	ldr	r2, .L7771+24
	bl	__dynamic_pr_debug
	b	.L7723
.L7760:
	cmn	r3, #108
	beq	.L7704
	movw	r0, #:lower16:.LC692
	ldrb	r2, [r7, #1]	@ zero_extendqisi2
	ldr	r1, .L7771+32
	movt	r0, #:upper16:.LC692
	bl	printk
	b	.L7706
.L7704:
	mov	r3, #0
	movw	r0, #:lower16:.LC691
	ldr	r1, .L7771+32
	movt	r0, #:upper16:.LC691
	mov	r8, r4
	strb	r3, [r4, #164]
	str	r3, [r4, #168]
	bl	printk
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r5, [r8, #208]!
	cmp	r5, r8
	ldrne	r7, [r5]
	bne	.L7708
	b	.L7707
.L7769:
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r9
	bl	kfree
	cmp	r7, r8
	ldr	r3, [r7]
	beq	.L7707
.L7710:
	mov	r5, r7
	mov	r7, r3
.L7708:
	mov	r0, r5
	sub	r9, r5, #8
	bl	list_del
	cmp	r9, #0
	bne	.L7769
	cmp	r7, r8
	ldr	r3, [r7]
	bne	.L7710
.L7707:
	mov	r8, r4
	ldr	r5, [r8, #216]!
	cmp	r8, r5
	ldrne	r7, [r5]
	bne	.L7712
	b	.L7711
.L7770:
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r9
	bl	kfree
	cmp	r8, r7
	ldr	r3, [r7]
	beq	.L7711
.L7714:
	mov	r5, r7
	mov	r7, r3
.L7712:
	mov	r0, r5
	sub	r9, r5, #8
	bl	list_del
	cmp	r9, #0
	bne	.L7770
	cmp	r8, r7
	ldr	r3, [r7]
	bne	.L7714
.L7711:
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r0, r4
	bl	mbim_reset_function_queue
	mov	r0, r6
	bl	_raw_spin_lock
	b	.L7706
.L7767:
	movw	r0, #:lower16:.LC694
	ldr	r1, .L7771+24
	movt	r0, #:upper16:.LC694
	bl	printk
	b	.L7717
.L7772:
	.align	2
.L7771:
	.word	.LANCHOR4-1344
	.word	.LANCHOR4-1312
	.word	.LANCHOR4-1264
	.word	.LANCHOR4-1248
	.word	.LANCHOR4-1200
	.word	.LANCHOR4-1296
	.word	.LANCHOR5-2684
	.word	.LANCHOR4-1216
	.word	.LANCHOR5-2708
	.fnend
	.size	mbim_notify_complete, .-mbim_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_probe, %function
ghsic_data_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L7806
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r5, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r5, #:upper16:.LANCHOR1
	str	lr, [sp, #16]
	ldr	r6, [r5, #1436]
	.pad #12
	sub	sp, sp, #12
	ldr	r7, [r0]
	ldrh	r3, [r2, #-14]
	tst	r3, #4
	bne	.L7805
.L7774:
	cmp	r6, #0
	beq	.L7775
	ldr	r4, [r5, #1440]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L7776
	cmp	r6, #1
	bls	.L7775
	ldr	r4, [r5, #1544]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L7776
	cmp	r6, #2
	beq	.L7775
	ldr	r4, [r5, #1648]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L7776
	cmp	r6, #3
	beq	.L7775
	ldr	r4, [r5, #1752]
	mov	r1, r7
	mov	r2, #20
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L7776
.L7775:
	movw	r0, #:lower16:.LC179
	mvn	r2, #21
	ldr	r1, .L7806+4
	movt	r0, #:upper16:.LC179
	bl	printk
	mvn	r0, #21
.L7773:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L7776:
	mov	r0, #1
	add	r1, r4, #180
	bl	_set_bit
	ldr	r0, [r4, #4]
	cmp	r0, #0
	beq	.L7773
	add	r2, r4, #88
	mov	r0, #4
	ldr	r1, [r4, #84]
	bl	queue_work_on
	mov	r0, #0
	b	.L7773
.L7805:
	movw	r1, #:lower16:.LC702
	mov	r4, r0
	str	r6, [sp]
	mov	r3, r7
	sub	r0, r2, #32
	ldr	r2, .L7806+4
	movt	r1, #:upper16:.LC702
	bl	__dynamic_pr_debug
	ldr	r7, [r4]
	ldr	r6, [r5, #1436]
	b	.L7774
.L7807:
	.align	2
.L7806:
	.word	.LANCHOR4-1168
	.word	.LANCHOR5-2668
	.fnend
	.size	ghsic_data_probe, .-ghsic_data_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_probe, %function
ghsic_ctrl_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L7844
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0]
	ldrh	r3, [ip, #-6]
	tst	r3, #4
	bne	.L7843
.L7809:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r6, [r5, #1016]
	cmp	r6, #0
	beq	.L7810
	ldr	r4, [r5, #1020]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L7811
	cmp	r6, #1
	bls	.L7810
	ldr	r4, [r5, #1124]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L7811
	cmp	r6, #2
	beq	.L7810
	ldr	r4, [r5, #1228]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L7811
	cmp	r6, #3
	beq	.L7810
	ldr	r4, [r5, #1332]
	mov	r1, r7
	mov	r2, #20
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L7811
.L7810:
	movw	r0, #:lower16:.LC179
	mvn	r2, #21
	ldr	r1, .L7844+4
	movt	r0, #:upper16:.LC179
	bl	printk
	mvn	r0, #21
.L7808:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7811:
	add	r1, r4, #84
	mov	r0, #1
	add	r5, r4, #4
	bl	_set_bit
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #8]
	mov	r6, r0
	cmp	r3, #0
	beq	.L7814
	add	r2, r4, #16
	mov	r0, #4
	ldr	r1, [r4, #12]
	bl	queue_work_on
.L7814:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L7808
.L7843:
	movw	r1, #:lower16:.LC177
	mov	r4, r0
	ldr	r2, .L7844+4
	mov	r3, r7
	sub	r0, ip, #24
	movt	r1, #:upper16:.LC177
	bl	__dynamic_pr_debug
	ldr	r7, [r4]
	b	.L7809
.L7845:
	.align	2
.L7844:
	.word	.LANCHOR4-1152
	.word	.LANCHOR5-2648
	.fnend
	.size	ghsic_ctrl_probe, .-ghsic_ctrl_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_poll, %function
conn_gadget_poll:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r1, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	beq	.L7848
	ldr	r3, [r5]
	mov	r6, r0
	add	r1, r4, #144
	adds	r2, r3, #0
	movne	r2, #1
	cmn	r4, #144
	cmpne	r3, #0
	beq	.L7849
	mov	r2, r5
	blx	r3
	ldr	r3, [r5]
	adds	r2, r3, #0
	movne	r2, #1
.L7849:
	adds	r0, r4, #156
	add	r1, r4, #156
	movne	r0, #1
	tst	r2, r0
	beq	.L7848
	mov	r2, r5
	mov	r0, r6
	blx	r3
.L7848:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2484]
	cmp	r3, #0
	beq	.L7864
	ldr	r5, [r3, #100]
	cmp	r5, #0
	beq	.L7865
	add	r3, r4, #108
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #1
	beq	.L7866
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r5, #0
.L7855:
	add	r6, r4, #88
	add	r4, r4, #120
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4]
	mov	r1, r0
	mov	r0, r6
	cmp	r3, r4
	beq	.L7856
	orr	r5, r5, #260
	bl	_raw_spin_unlock_irqrestore
.L7846:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7866:
	ldr	r5, [r4, #168]
	ldr	r2, [r4, #172]
	cmp	r5, r2
	movne	r5, #65
	moveq	r5, #0
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L7855
.L7856:
	bl	_raw_spin_unlock_irqrestore
	b	.L7846
.L7865:
	movw	r0, #:lower16:.LC703
	ldr	r1, .L7867
	movt	r0, #:upper16:.LC703
	bl	printk
	b	.L7846
.L7864:
	movw	r0, #:lower16:.LC425
	ldr	r1, .L7867
	mov	r5, #40
	movt	r0, #:upper16:.LC425
	bl	printk
	b	.L7846
.L7868:
	.align	2
.L7867:
	.word	.LANCHOR5-2628
	.fnend
	.size	conn_gadget_poll, .-conn_gadget_poll
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_in, %function
acc_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r3, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r3, #2488]
	cmn	r2, #108
	beq	.L7876
.L7870:
	add	r5, r4, #88
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	add	r2, r4, #1648
	mov	r7, r0
	ldr	r1, [r4, #1660]
	add	r0, r6, #36
	add	r2, r2, #8
	bl	__list_add
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	add	r0, r4, #1664
	mov	r3, #0
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	r0, r0, #12
	mov	r2, #1
	ldr	r8, [sp, #16]
	mov	r1, #3
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
.L7876:
	ldr	r0, .L7878
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7877
.L7871:
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	and	r3, r3, #254
	orr	r3, r3, #2
	strb	r3, [r4, #100]
	b	.L7870
.L7877:
	movw	r1, #:lower16:.LC704
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC704
	bl	__dynamic_pr_debug
	b	.L7871
.L7879:
	.align	2
.L7878:
	.word	.LANCHOR4-1120
	.fnend
	.size	acc_complete_in, .-acc_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_read, %function
ffs_ep0_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 1, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:__stack_chk_guard
	strd	r8, [sp, #16]
	movt	r6, #:upper16:__stack_chk_guard
	mov	r8, r0
	strd	r10, [sp, #24]
	.setfp fp, sp, #32
	add	fp, sp, #32
	str	lr, [sp, #32]
	.pad #52
	sub	sp, sp, #52
	ldr	r3, [r6]
	str	r1, [fp, #-68]
	ldr	r5, [r0, #124]
	str	r2, [fp, #-64]
	str	r3, [fp, #-40]
	add	r4, r5, #96
	.syntax divided
@ 193 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
.L7881:
	.syntax divided
@ 170 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r1, [r4]
	mov	r2, #0
	teq	r1, #2
	strexeq r2, r3, [r4]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	bne	.L7881
	.syntax divided
@ 195 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #2
	beq	.L7914
	ldr	r3, [r8, #32]
	add	r9, r5, #4
	mov	r0, r9
	tst	r3, #2048
	bne	.L7940
	bl	mutex_lock_interruptible
	subs	r10, r0, #0
	blt	.L7880
.L7886:
	ldr	r3, [r5, #92]
	cmp	r3, #2
	mvnne	r10, #76
	movne	r8, #0
	beq	.L7941
.L7884:
	mov	r0, r9
	bl	mutex_unlock
	mov	r0, r8
	bl	kfree
.L7880:
	ldr	r2, [fp, #-40]
	mov	r0, r10
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L7942
	sub	sp, fp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7940:
	bl	mutex_trylock
	cmp	r0, #0
	bne	.L7886
	mvn	r10, #10
	b	.L7880
.L7941:
	add	r3, r5, #116
	mov	r0, r3
	str	r3, [fp, #-72]
	bl	_raw_spin_lock_irq
	.syntax divided
@ 193 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
.L7887:
	.syntax divided
@ 170 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r10, [r4]
	mov	r7, #0
	teq	r10, #2
	strexeq r7, r3, [r4]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r7, #0
	bne	.L7887
	.syntax divided
@ 195 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r10, #1
	beq	.L7889
	bcc	.L7890
	cmp	r10, #2
	mov	r8, r7
	mvneq	r10, #42
	mvnne	r10, #76
.L7888:
	ldr	r0, [fp, #-72]
	bl	_raw_spin_unlock_irq
	b	.L7884
.L7890:
	ldr	r2, [fp, #-64]
	movw	r3, #43691
	movt	r3, 43690
	umull	r3, r10, r3, r2
	lsrs	r3, r10, #3
	str	r3, [fp, #-76]
	beq	.L7918
	ldr	r3, [r8, #32]
	ldrh	r8, [r5, #104]
	tst	r3, #2048
	bne	.L7943
	cmp	r8, #0
	bne	.L7893
	mov	r10, #57344
	mov	r3, sp
	str	r9, [fp, #-80]
	movt	r10, 65535
	str	r8, [fp, #-60]
	movw	r2, #:lower16:autoremove_wake_function
	and	r3, r3, r10
	sub	r7, fp, #48
	ldr	r9, [fp, #-72]
	str	r8, [fp, #-56]
	mov	r1, #1
	movt	r2, #:upper16:autoremove_wake_function
	str	r8, [fp, #-52]
	str	r8, [fp, #-48]
	str	r8, [fp, #-44]
	ldr	r0, [r3, #12]
	mov	r8, r1
	str	r10, [fp, #-64]
	mov	r3, r7
	add	r10, r5, #120
	str	r1, [fp, #-60]
	str	r0, [fp, #-56]
	str	r2, [fp, #-52]
	str	r7, [fp, #-48]
	str	r7, [fp, #-44]
	b	.L7897
.L7944:
	mov	r0, r9
	bl	_raw_spin_unlock_irq
	bl	schedule
	mov	r0, r9
	bl	_raw_spin_lock_irq
	ldrh	r3, [r5, #104]
	cmp	r3, #0
	bne	.L7896
	ldr	r3, [fp, #-48]
.L7897:
	cmp	r3, r7
	bne	.L7894
	mov	r2, r10
	mov	r0, r7
	ldr	r1, [r5, #124]
	bl	__list_add
.L7894:
	ldr	r2, [fp, #-64]
	mov	r3, sp
	and	r3, r3, r2
	ldr	r2, [r3, #12]
	str	r8, [r2]
	.syntax divided
@ 635 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r4, [r3]
	ands	r4, r4, #1
	beq	.L7944
	mov	r0, r7
	ldr	r9, [fp, #-80]
	mvn	r10, #3
	bl	list_del
	ldr	r3, [fp, #-64]
	mov	r2, sp
	and	r3, r3, r2
	mov	r2, #0
	ldr	r1, [r3, #12]
	mov	r8, r2
	str	r2, [r1]
	b	.L7888
.L7889:
	ldrsb	r3, [r5, #108]
	cmp	r3, #0
	blt	.L7945
	ldrh	r3, [r5, #114]
	ldr	r0, [fp, #-72]
	ldr	r2, [fp, #-64]
	cmp	r3, r2
	movcc	r7, r3
	movcs	r7, r2
	bl	_raw_spin_unlock_irq
	cmp	r7, #0
	beq	.L7922
	mov	r1, #208
	mov	r0, r7
	bl	__kmalloc
	subs	r8, r0, #0
	beq	.L7946
.L7909:
	ldr	r0, [fp, #-72]
	bl	_raw_spin_lock_irq
	.syntax divided
@ 193 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
.L7910:
	.syntax divided
@ 170 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r1, [r4]
	mov	r2, #0
	teq	r1, #2
	strexeq r2, r3, [r4]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	bne	.L7910
	.syntax divided
@ 195 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #2
	mvneq	r10, #42
	beq	.L7888
	ldr	r4, [r5, #28]
	ldrh	r3, [r5, #114]
	ldr	r0, [fp, #-72]
	ldrb	r2, [r4, #26]	@ zero_extendqisi2
	cmp	r7, r3
	movcs	r3, #0
	movcc	r3, #1
	bfi	r2, r3, #1, #1
	strb	r2, [r4, #26]
	bl	_raw_spin_unlock_irq
	cmp	r8, #0
	str	r8, [r4]
	str	r7, [r4, #4]
	beq	.L7947
.L7911:
	ldr	r3, [r5]
	mov	r0, #0
	mov	r2, #32
	mov	r1, r4
	str	r0, [r5, #32]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r10, r0, #0
	blt	.L7884
	add	r0, r5, #32
	bl	wait_for_completion_interruptible
	cmp	r0, #0
	bne	.L7948
	ldr	r10, [r5, #48]
	str	r0, [r5, #96]
	cmp	r10, #0
	ble	.L7884
	mov	r2, r7
	mov	r1, r8
	ldr	r0, [fp, #-68]
	bl	__copy_to_user
	cmp	r0, #0
	mvnne	r10, #13
	b	.L7884
.L7943:
	cmp	r8, #0
	bne	.L7893
	mvn	r10, #10
	b	.L7888
.L7945:
	ldr	r0, [fp, #-72]
	bl	_raw_spin_unlock_irq
	ldrh	r3, [r5, #106]
	cmp	r3, #0
	beq	.L7908
	ldr	r2, [r5]
	mov	r1, r10
	mov	r8, r7
	mvn	r10, #50
	ldr	r0, [r2, #4]
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #24]
	blx	r2
	str	r7, [r5, #96]
	b	.L7884
.L7896:
	mov	r0, r7
	ldr	r9, [fp, #-80]
	bl	list_del
	ldr	r10, [fp, #-64]
	mov	r3, sp
	and	r10, r10, r3
	ldr	r3, [r10, #12]
	str	r4, [r3]
	ldrh	r8, [r5, #104]
.L7893:
	ldr	r3, [fp, #-76]
	mov	r4, sp
	cmp	r8, r3
	movcs	r8, r3
	add	r3, r8, r8, lsl #1
	lsl	r7, r3, #2
	add	r3, r7, #7
	cmp	r7, #0
	bic	r3, r3, #7
	sub	sp, sp, r3
	mov	r10, sp
	beq	.L7898
	mov	r1, r7
	mov	r0, sp
	bl	__memzero
.L7898:
	ldrb	r3, [r5, #100]	@ zero_extendqisi2
	cmp	r3, #4
	strb	r3, [r10, #8]
	bne	.L7899
	ldr	r1, [r5, #108]
	mov	r3, #1
	ldr	r2, [r5, #112]
	str	r1, [r10]	@ unaligned
	str	r2, [r10, #4]	@ unaligned
	str	r3, [r5, #96]
.L7899:
	cmp	r8, #1
	bls	.L7900
	ldrb	r3, [r5, #101]	@ zero_extendqisi2
	cmp	r3, #4
	strb	r3, [r10, #20]
	bne	.L7901
	ldr	r1, [r5, #108]
	mov	r3, #1
	ldr	r2, [r5, #112]
	str	r1, [r10, #12]	@ unaligned
	str	r2, [r10, #16]	@ unaligned
	str	r3, [r5, #96]
.L7901:
	cmp	r8, #2
	beq	.L7900
	ldrb	r3, [r5, #102]	@ zero_extendqisi2
	cmp	r3, #4
	strb	r3, [r10, #32]
	bne	.L7902
	ldr	r1, [r5, #108]
	mov	r3, #1
	ldr	r2, [r5, #112]
	str	r1, [r10, #24]	@ unaligned
	str	r2, [r10, #28]	@ unaligned
	str	r3, [r5, #96]
.L7902:
	cmp	r8, #3
	beq	.L7900
	ldrb	r3, [r5, #103]	@ zero_extendqisi2
	cmp	r3, #4
	strb	r3, [r10, #44]
	bne	.L7900
	ldr	r1, [r5, #108]
	mov	r3, #1
	ldr	r2, [r5, #112]
	str	r1, [r10, #36]	@ unaligned
	str	r2, [r10, #40]	@ unaligned
	str	r3, [r5, #96]
.L7900:
	ldrh	r3, [r5, #104]
	cmp	r8, r3
	movcs	r3, #0
	strhcs	r3, [r5, #104]	@ movhi
	bcs	.L7905
	sub	r3, r3, r8
	add	r0, r5, #100
	uxth	r2, r3
	add	r1, r0, r8
	strh	r2, [r5, #104]	@ movhi
	bl	memmove
.L7905:
	ldr	r0, [fp, #-72]
	bl	_raw_spin_unlock_irq
	mov	r0, r9
	bl	mutex_unlock
	mov	r1, r10
	mov	r2, r7
	ldr	r0, [fp, #-68]
	bl	__copy_to_user
	cmp	r0, #0
	mov	sp, r4
	moveq	r10, r7
	mvnne	r10, #13
	b	.L7880
.L7914:
	mvn	r10, #42
	b	.L7880
.L7918:
	mov	r8, r3
	mvn	r10, #21
	b	.L7888
.L7947:
	movw	r3, #47806
	movt	r3, 57005
	str	r3, [r4]
	b	.L7911
.L7946:
	mvn	r10, #11
	b	.L7884
.L7922:
	mov	r8, r7
	b	.L7909
.L7908:
	ldr	r0, .L7949
	ldrh	r8, [r0, #-6]
	ubfx	r8, r8, #2, #1
	cmp	r8, #0
	mvneq	r10, #2
	beq	.L7884
	movw	r1, #:lower16:.LC705
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC705
	mov	r8, r3
	mvn	r10, #2
	bl	__dynamic_pr_debug
	b	.L7884
.L7948:
	ldr	r2, [r5]
	mov	r1, r4
	mvn	r10, #3
	ldr	r0, [r2, #4]
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #20]
	blx	r2
	b	.L7884
.L7942:
	bl	__stack_chk_fail
.L7950:
	.align	2
.L7949:
	.word	.LANCHOR4-1104
	.fnend
	.size	ffs_ep0_read, .-ffs_ep0_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_remove, %function
android_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	strd	r8, [sp, #16]
	movt	r6, #:upper16:.LANCHOR1
	ldr	r8, .L7987
	str	r10, [sp, #24]
	ldr	r1, [r6, #3308]
	str	lr, [sp, #28]
	ldr	r7, [r0, #88]
	sub	r4, r1, #520
	mov	r5, r1
	cmp	r7, #0
	ldrbne	r2, [r7, #8]	@ zero_extendqisi2
	moveq	r2, r7
	cmp	r1, r8
	beq	.L7953
	ldr	r3, [r1, #-476]
	cmp	r3, #0
	beq	.L7953
	ldrb	r3, [r3, #8]	@ zero_extendqisi2
	cmp	r2, r3
	bne	.L7954
	b	.L7953
.L7955:
	ldr	r3, [r3, #-476]
	cmp	r3, #0
	beq	.L7953
	ldrb	r3, [r3, #8]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L7953
.L7954:
	ldr	r3, [r4, #520]
	cmp	r3, r8
	mov	r5, r3
	sub	r4, r3, #520
	bne	.L7955
.L7953:
	cmp	r4, #0
	beq	.L7956
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r1, [r3, #1380]
	cmp	r1, #0
	beq	.L7957
	ldr	r9, .L7987+4
.L7958:
	ldr	r0, [r4, #12]
	bl	device_remove_file
	ldr	r1, [r9], #4
	cmp	r1, #0
	bne	.L7958
.L7957:
	ldr	r3, [r4, #12]
	ldr	r0, [r6, #3644]
	ldr	r1, [r3, #288]
	bl	device_destroy
	cmp	r7, #0
	beq	.L7959
	ldr	r3, [r7, #4]
	cmp	r3, #0
	bne	.L7985
.L7959:
	mov	r0, r5
	bl	list_del
	ldr	r3, [r6, #3640]
	mov	r0, r4
	sub	r3, r3, #1
	str	r3, [r6, #3640]
	bl	kfree
	ldr	r1, [r6, #3308]
.L7956:
	cmp	r1, r8
	beq	.L7986
.L7961:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7985:
	add	r0, r4, #60
	bl	pm_qos_remove_request
	b	.L7959
.L7986:
	ldr	r0, [r6, #3644]
	bl	class_destroy
	ldr	r3, .L7987+8
	mov	r2, #0
	ldr	r0, [r6, #2476]
	str	r2, [r6, #3644]
	cmp	r0, r3
	bne	.L7961
	sub	r0, r0, #368
	bl	usb_gadget_unregister_driver
	b	.L7961
.L7988:
	.align	2
.L7987:
	.word	.LANCHOR1+3308
	.word	.LANCHOR0+1384
	.word	.LANCHOR0+1456
	.fnend
	.size	android_remove, .-android_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_complete_in, %function
ccid_bulk_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r3, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r3, #3472]
	cmp	r2, #0
	movne	r3, #1
	add	r5, r4, #92
	mov	r0, r5
	strne	r3, [r4, #148]
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	add	r2, r4, #192
	ldr	r1, [r4, #196]
	add	r0, r6, #36
	bl	__list_add
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	add	r0, r4, #172
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
	.fnend
	.size	ccid_bulk_complete_in, .-ccid_bulk_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_data_complete, %function
audio_data_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L8008
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L8006
.L7996:
	add	r6, r4, #108
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	add	r2, r4, #96
	ldr	r1, [r4, #100]
	add	r0, r5, #36
	bl	__list_add
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #112]
	cmp	r3, #0
	beq	.L7995
	ldr	r6, [r5, #44]
	cmp	r6, #0
	bne	.L7995
	ldrd	r2, [r4, #124]
	ldr	r1, [r5, #48]
	add	r3, r3, r1
	cmp	r3, r2
	str	r3, [r4, #128]
	bcs	.L8007
.L7998:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	audio_send
.L7995:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8007:
	ldr	r0, [r4, #92]
	bl	snd_pcm_period_elapsed
	str	r6, [r4, #128]
	b	.L7998
.L8006:
	movw	r1, #:lower16:.LC706
	ldrd	r2, [r5, #44]
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC706
	bl	__dynamic_pr_debug
	b	.L7996
.L8009:
	.align	2
.L8008:
	.word	.LANCHOR4-1072
	.fnend
	.size	audio_data_complete, .-audio_data_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_complete_in, %function
adb_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r3, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r3, #3476]
	cmp	r2, #0
	movne	r3, #1
	add	r5, r4, #88
	mov	r0, r5
	strne	r3, [r4, #104]
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	add	r2, r4, #120
	ldr	r1, [r4, #124]
	add	r0, r6, #36
	bl	__list_add
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	add	r0, r4, #140
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
	.fnend
	.size	adb_complete_in, .-adb_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_unbind, %function
qdss_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L8055
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r1, [r0, #24]
	ldrh	r2, [r3, #-6]
	ldr	r5, [r1]
	tst	r2, #4
	bne	.L8052
.L8017:
	ldr	r0, [r4, #196]
	bl	flush_workqueue
	movw	r0, #:lower16:.LC495
	ldr	r1, [r5, #28]
	movt	r0, #:upper16:.LC495
	bl	strcmp
	subs	r1, r0, #0
	bne	.L8018
	ldr	r0, [r4, #108]
	bl	dwc3_tx_fifo_resize_request
.L8018:
	ldr	r6, .L8055+4
	ldrh	r3, [r6, #-14]
	tst	r3, #4
	bne	.L8053
.L8019:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #100]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #108]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, .L8055+8
	ldrh	r3, [r3, #-2]
	tst	r3, #4
	bne	.L8054
.L8023:
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bls	.L8024
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L8025
	bl	kfree
	ldr	r3, [r5, #20]
.L8024:
	cmp	r3, #2
	bhi	.L8025
.L8016:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8025:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L8016
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
.L8054:
	movw	r1, #:lower16:.LC709
	sub	r0, r6, #8
	movt	r1, #:upper16:.LC709
	bl	__dynamic_pr_debug
	b	.L8023
.L8052:
	movw	r1, #:lower16:.LC707
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC707
	bl	__dynamic_pr_debug
	b	.L8017
.L8053:
	movw	r1, #:lower16:.LC708
	sub	r0, r6, #32
	movt	r1, #:upper16:.LC708
	bl	__dynamic_pr_debug
	b	.L8019
.L8056:
	.align	2
.L8055:
	.word	.LANCHOR4-1056
	.word	.LANCHOR4-1024
	.word	.LANCHOR4-1012
	.fnend
	.size	qdss_unbind, .-qdss_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_suspend, %function
ffs_func_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #-28]
	add	r4, r6, #116
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #96]
	mov	r5, r0
	add	r2, r6, #100
	ldrh	r0, [r6, #104]
	mov	ip, r2
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r6, #96]
	cmp	r0, #0
	beq	.L8062
	add	r0, r0, r2
	mov	r3, r2
.L8061:
	ldrb	r1, [r3], #1	@ zero_extendqisi2
	cmp	r1, #5
	strbne	r1, [r2]
	addne	r2, r2, #1
	cmp	r0, r3
	bne	.L8061
	sub	r2, r2, ip
	add	r3, r2, #1
	uxth	r0, r2
	uxth	r3, r3
.L8059:
	add	r0, r6, r0
	strh	r3, [r6, #104]	@ movhi
	mov	ip, #5
	mov	r1, #3
	mov	r2, #1
	strb	ip, [r0, #100]
	mov	r0, r4
	bl	__wake_up_locked
	ldr	r6, [sp, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L8062:
	mov	r3, #1
	b	.L8059
	.fnend
	.size	ffs_func_suspend, .-ffs_func_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_resume, %function
ffs_func_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #-28]
	add	r4, r6, #116
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #96]
	mov	r5, r0
	add	r2, r6, #100
	ldrh	r0, [r6, #104]
	mov	lr, r2
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r6, #96]
	cmp	r0, #0
	beq	.L8073
	add	r0, r0, r2
	mov	r3, r2
.L8072:
	ldrb	r1, [r3], #1	@ zero_extendqisi2
	sub	ip, r1, #5
	cmp	ip, #1
	strbhi	r1, [r2]
	addhi	r2, r2, #1
	cmp	r0, r3
	bne	.L8072
	sub	r2, r2, lr
	add	r3, r2, #1
	uxth	r0, r2
	uxth	r3, r3
.L8070:
	add	r0, r6, r0
	strh	r3, [r6, #104]	@ movhi
	mov	ip, #6
	mov	r1, #3
	mov	r2, #1
	strb	ip, [r0, #100]
	mov	r0, r4
	bl	__wake_up_locked
	ldr	r6, [sp, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L8073:
	mov	r3, #1
	b	.L8070
	.fnend
	.size	ffs_func_resume, .-ffs_func_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	start_in_transfer, %function
start_in_transfer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #8]
	cmp	r4, #0
	beq	.L8077
	ldr	r0, [r4, #88]
	mov	r5, r1
	ldr	r6, [r4, #100]
	ldr	r7, [r1, #16]
	add	r0, r0, #44
	bl	_raw_spin_lock_irq
	mov	r3, #1
	mov	r2, #2
	str	r2, [r5, #4]
	str	r3, [r5, #20]
	ldr	r0, [r4, #88]
	add	r0, r0, #44
	bl	_raw_spin_unlock_irq
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	mov	r2, #208
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L8089
	mov	r2, #0
	cmn	r3, #108
	str	r2, [r5, #4]
	str	r2, [r5, #20]
	beq	.L8089
	cmn	r3, #95
	bne	.L8081
	ldr	r2, [r7, #4]
	cmp	r2, #0
	beq	.L8089
.L8081:
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC90
	movt	r1, #:upper16:.LC90
	ldr	r2, [r6, #4]
	add	r0, r0, #32
	bl	dev_warn
.L8089:
	mov	r0, #1
.L8079:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8077:
	ldr	r0, [r0]
	movw	r1, #:lower16:.LC88
	mov	r3, #796
	movt	r1, #:upper16:.LC88
	ldr	r2, .L8090
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC89
	movw	r1, #550
	movt	r0, #:upper16:.LC89
	bl	warn_slowpath_null
	mov	r0, r4
	b	.L8079
.L8091:
	.align	2
.L8090:
	.word	.LANCHOR5-2608
	.fnend
	.size	start_in_transfer, .-start_in_transfer
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	send_status, %function
send_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r4, r0, #44
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #104]
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r6, [r5, #60]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L8095
	b	.L8093
.L8117:
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L8093
.L8095:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	sleep_thread
	subs	r3, r0, #0
	mov	r0, r4
	beq	.L8117
.L8092:
	ldrd	r4, [sp]
	mov	r0, r3
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8093:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	cmp	r7, #0
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	beq	.L8096
	tst	r3, #4
	beq	.L8118
.L8097:
	ldr	r0, .L8120
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	moveq	r7, #2
	bne	.L8119
.L8100:
	ldr	r3, [r6]
	movw	r0, #21333
	movw	r2, #:lower16:.LANCHOR1
	movt	r0, 21314
	movt	r2, #:upper16:.LANCHOR1
	ldr	r1, [r2, #3964]
	str	r0, [r3]
	ldr	r0, [r5, #132]
	cmp	r1, #0
	str	r0, [r3, #4]
	ldr	r0, [r5, #136]
	str	r0, [r3, #8]
	beq	.L8102
	ldr	r1, [r5, #136]
	mov	r0, #0
	str	r0, [r2, #3964]
.L8102:
	str	r1, [r3, #8]
	mov	r2, #13
	mov	r0, r5
	strb	r7, [r3, #12]
	ldr	r3, [r6, #16]
	mov	r1, r6
	str	r2, [r3, #4]
	ldr	r3, [r6, #16]
	ldrb	r2, [r3, #26]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #26]
	bl	start_in_transfer
	cmp	r0, #0
	ldrne	r2, [r6, #8]
	movne	r3, #0
	mvneq	r3, #4
	strne	r2, [r5, #60]
	b	.L8092
.L8118:
	ldr	r7, [r7, #28]
	cmp	r7, #0
	beq	.L8100
.L8101:
	ldr	r0, .L8120+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	moveq	r7, #1
	beq	.L8100
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC711
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC711
	mov	r7, #1
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L8100
.L8096:
	tst	r3, #16
	and	r3, r3, #4
	beq	.L8099
	cmp	r3, #0
	bne	.L8097
	b	.L8100
.L8099:
	cmp	r3, #0
	beq	.L8101
	b	.L8097
.L8119:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC710
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC710
	mov	r7, #2
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L8100
.L8121:
	.align	2
.L8120:
	.word	.LANCHOR4-988
	.word	.LANCHOR4-964
	.fnend
	.size	send_status, .-send_status
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	do_write, %function
do_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r0, #104]
	.pad #68
	sub	sp, sp, #68
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	tst	r3, #2
	movne	r3, #9984
	mvnne	r0, #21
	movtne	r3, 7
	strne	r3, [r6, #28]
	bne	.L8122
	mov	r4, r0
	ldr	r0, [r6]
	add	r0, r0, #20
	bl	_raw_spin_lock
	ldr	r2, [r6]
	ldr	r3, [r2, #32]
	bic	r3, r3, #1048576
	bic	r3, r3, #4096
	str	r3, [r2, #32]
	ldr	r0, [r6]
	add	r0, r0, #20
	bl	_raw_spin_unlock
	ldrb	r3, [r4, #76]	@ zero_extendqisi2
	cmp	r3, #10
	beq	.L8189
	ldrb	r3, [r4, #77]	@ zero_extendqisi2
	ldr	r5, [r4, #78]	@ unaligned
	tst	r3, #231
	movne	r3, #9216
	rev	r5, r5
	movtne	r3, 5
	mvnne	r0, #21
	strne	r3, [r6, #28]
	bne	.L8122
	ldrsb	r2, [r6, #24]
	cmp	r2, #0
	blt	.L8126
	tst	r3, #8
	bne	.L8190
.L8126:
	ldrd	r2, [r6, #16]
	mov	r1, #0
	mov	r0, r5
	cmp	r5, r2
	sbcs	r3, r1, r3
	movge	r3, #8448
	mvnge	r0, #21
	movtge	r3, 5
	strge	r3, [r6, #28]
	bge	.L8122
	ldr	r3, [r6, #40]
	ldr	r9, [r4, #128]
	sub	r2, r3, #32
	lsl	r10, r5, r3
	lsl	fp, r5, r2
	str	r9, [sp, #40]
	cmp	r9, #0
	rsb	r2, r3, #32
	orr	fp, fp, r5, lsr r2
	beq	.L8130
	mov	r3, #57344
	strd	r10, [sp, #16]
	movw	r2, #3074
	movw	r1, #:lower16:.LANCHOR1
	strd	r10, [sp, #32]
	movt	r3, 65535
	movt	r2, 3
	movt	r1, #:upper16:.LANCHOR1
	mov	r8, #1
	str	r3, [sp, #44]
	str	r1, [sp, #48]
	str	r2, [sp, #52]
.L8129:
	ldr	r5, [r4, #60]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L8131
.L8192:
	cmp	r8, #0
	beq	.L8132
	ldrd	r2, [r6, #8]
	ldrd	r0, [sp, #16]
	cmp	r0, r2
	sbcs	r3, r1, r3
	bge	.L8191
	ldr	r2, [r4, #140]
	cmp	r9, #16384
	movcc	r3, r9
	movcs	r3, #16384
	adds	r0, r0, r3
	adc	r1, r1, #0
	subs	r9, r9, r3
	sub	r2, r2, r3
	movne	r8, #1
	strd	r0, [sp, #16]
	moveq	r8, #0
	mov	r0, r4
	str	r2, [r4, #140]
	str	r3, [r5, #12]
	ldr	r1, [r4, #108]
	udiv	r2, r3, r1
	mls	r2, r1, r2, r3
	cmp	r2, #0
	addne	r3, r3, r1
	mov	r1, r5
	subne	r3, r3, r2
	ldr	r2, [r5, #24]
	str	r3, [r2, #4]
	bl	start_out_transfer
	cmp	r0, #0
	beq	.L8130
	ldr	r3, [r5, #8]
	str	r3, [r4, #60]
	ldr	r5, [r4, #60]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L8192
.L8131:
	ldr	r5, [r4, #64]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L8137
	cmp	r8, #0
	beq	.L8130
.L8138:
	mov	r0, r4
	bl	sleep_thread
	cmp	r0, #0
	beq	.L8129
.L8122:
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8132:
	ldr	r5, [r4, #64]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L8130
.L8137:
	cmp	r3, #1
	bne	.L8138
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L8138
	.syntax divided
@ 1354 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r2, [r5, #8]
	mov	r3, #0
	str	r2, [r4, #64]
	ldr	r2, [r5, #24]
	str	r3, [r5, #4]
	ldr	r3, [r2, #44]
	cmp	r3, #0
	bne	.L8193
	ldrd	r10, [sp, #32]
	ldr	r3, [r6, #8]
	ldr	ip, [r6, #12]
	ldr	r2, [r2, #48]
	subs	r1, r3, r10
	sbc	lr, ip, fp
	str	r1, [sp, #24]
	mov	r1, #0
	str	lr, [sp, #28]
	ldrd	r10, [sp, #24]
	cmp	r10, r2
	sbcs	r1, fp, r1
	blt	.L8194
.L8141:
	ldr	r7, [r6, #44]
	ldr	r3, [r5, #12]
	rsb	r7, r7, #0
	cmp	r3, r2
	andls	r7, r7, r3
	andhi	r7, r7, r2
	cmp	r7, #0
	bne	.L8195
	ldr	r2, [r5, #24]
	ldr	r2, [r2, #48]
	cmp	r3, r2
	bls	.L8129
.L8160:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	mvn	r0, #4
	orr	r3, r3, #8
	strb	r3, [r4, #144]
	b	.L8122
.L8195:
	ldrd	r0, [sp, #32]
	add	r3, sp, #64
	mov	r2, r7
	strd	r0, [r3, #-8]!
	ldr	r1, [r5]
	ldr	r0, [r6]
	bl	vfs_write
	ldr	r2, [sp, #44]
	mov	r3, sp
	mov	r10, r0
	and	r3, r3, r2
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L8162
	cmp	r0, #0
	blt	.L8196
	cmp	r0, r7
	mov	r3, r0
	bcc	.L8197
	ldrd	r0, [sp, #32]
	ldr	r2, [r4, #136]
	adds	r0, r0, r10
	adc	r1, r1, r10, asr #31
	sub	r2, r2, r10
	str	r2, [r4, #136]
	strd	r0, [sp, #32]
	ldr	r1, [sp, #40]
	sub	r1, r1, r10
	str	r1, [sp, #40]
.L8147:
	cmp	r7, r3
	bne	.L8188
	ldr	r3, [sp, #48]
	ldr	r3, [r3, #3968]
	cmp	r3, #0
	bne	.L8188
	ldr	r3, [sp, #48]
	ldr	r3, [r3, #3964]
	cmp	r3, #0
	bne	.L8130
	ldr	r3, [r4, #68]
	ldr	r2, [r3, #4]
	cmp	r2, #2
	beq	.L8188
	ldr	r2, [r3, #36]
	cmp	r2, #2
	beq	.L8188
	ldr	r2, [r3, #68]
	cmp	r2, #2
	beq	.L8188
	ldr	r3, [r3, #100]
	cmp	r3, #2
	beq	.L8188
	cmp	r9, #0
	bne	.L8188
	ldr	r2, [sp, #48]
	mov	r3, #1
	mov	r0, r4
	str	r3, [r2, #3968]
	bl	send_status
.L8188:
	ldr	r3, [r5, #12]
.L8149:
	ldr	r2, [r5, #24]
	ldr	r2, [r2, #48]
	cmp	r2, r3
	bcc	.L8160
	ldr	r3, [sp, #40]
	cmp	r3, #0
	bne	.L8129
.L8130:
	mvn	r0, #4
	b	.L8122
.L8191:
	ldr	r3, [r6, #40]
	mov	r2, #8448
	mov	r10, r0
	movt	r2, 5
	mov	fp, r1
	mov	r8, #0
	str	r2, [r6, #28]
	subs	r1, r3, #32
	lsr	r2, r10, r3
	rsb	r3, r3, #32
	orr	r2, r2, fp, lsl r3
	movpl	r3, fp
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	str	r2, [r6, #32]
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	b	.L8129
.L8194:
	ldrd	r10, [sp, #32]
	movw	r1, #:lower16:.LC712
	add	r0, r6, #48
	movt	r1, #:upper16:.LC712
	strd	r10, [sp]
	str	r3, [sp, #8]
	str	ip, [sp, #12]
	bl	dev_err
	ldr	r2, [r6, #8]
	sub	r2, r2, r10
	b	.L8141
.L8197:
	ldr	r0, .L8199
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L8198
.L8146:
	ldr	r2, [r6, #44]
	mov	r3, r10
	ldrd	r10, [sp, #32]
	ldr	r1, [r4, #136]
	rsb	r2, r2, #0
	and	r2, r2, r3
	adds	r10, r10, r2
	mov	r3, r2
	adc	fp, fp, r2, asr #31
	sub	r2, r1, r2
	ldr	r1, [sp, #40]
	cmp	r3, r7
	str	r2, [r4, #136]
	strd	r10, [sp, #32]
	sub	r1, r1, r3
	str	r1, [sp, #40]
	bcs	.L8147
.L8159:
	ldr	r3, [r6, #40]
	ldrd	r10, [sp, #32]
	ldr	r2, [sp, #52]
	subs	r1, r3, #32
	str	r2, [r6, #28]
	lsr	r2, r10, r3
	rsb	r3, r3, #32
	orr	r2, r2, fp, lsl r3
	movpl	r3, fp
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	mov	r1, #1
	str	r2, [r6, #32]
	ldr	r2, [sp, #48]
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	ldr	r3, [r5, #12]
	str	r1, [r2, #3964]
	b	.L8149
.L8189:
	ldrb	r5, [r4, #79]	@ zero_extendqisi2
	ldrb	r2, [r4, #77]	@ zero_extendqisi2
	ldrb	r3, [r4, #78]	@ zero_extendqisi2
	orr	r5, r5, #167772160
	orr	r5, r5, r2, lsl #16
	orr	r5, r5, r3, lsl #8
	bic	r5, r5, #-16777216
	b	.L8126
.L8196:
	ldr	r0, .L8199+4
	ldrh	r3, [r0]
	tst	r3, #4
	beq	.L8159
	movw	r2, #:lower16:.LC713
	mov	r3, r10
	movt	r2, #:upper16:.LC713
	add	r1, r6, #48
	sub	r0, r0, #18
	bl	__dynamic_dev_dbg
	b	.L8159
.L8190:
	ldr	r0, [r6]
	add	r0, r0, #20
	bl	_raw_spin_lock
	ldr	r2, [r6]
	ldr	r3, [r2, #32]
	orr	r3, r3, #1048576
	orr	r3, r3, #4096
	str	r3, [r2, #32]
	ldr	r0, [r6]
	add	r0, r0, #20
	bl	_raw_spin_unlock
	b	.L8126
.L8162:
	mvn	r0, #3
	b	.L8122
.L8193:
	ldr	r3, [r6, #40]
	mov	r2, #2048
	mvn	r0, #4
	ldrd	r10, [sp, #32]
	movt	r2, 4
	str	r2, [r6, #28]
	subs	r1, r3, #32
	lsr	r2, r10, r3
	rsb	r3, r3, #32
	orr	r2, r2, fp, lsl r3
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	orrpl	r2, r2, fp, asr r1
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	str	r2, [r6, #32]
	b	.L8122
.L8198:
	movw	r2, #:lower16:.LC714
	mov	r3, r10
	str	r7, [sp]
	movt	r2, #:upper16:.LC714
	add	r1, r6, #48
	sub	r0, r0, #18
	bl	__dynamic_dev_dbg
	b	.L8146
.L8200:
	.align	2
.L8199:
	.word	.LANCHOR4-918
	.word	.LANCHOR4-942
	.fnend
	.size	do_write, .-do_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	do_read, %function
do_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r3, [r0, #76]	@ zero_extendqisi2
	.pad #44
	sub	sp, sp, #44
	ldrb	r2, [r0, #77]	@ zero_extendqisi2
	ldrb	ip, [r0, #78]	@ zero_extendqisi2
	ldr	r7, [r0, #104]
	cmp	r3, #8
	ldrb	r3, [r0, #79]	@ zero_extendqisi2
	beq	.L8245
	tst	r2, #231
	ldr	r1, [r0, #78]	@ unaligned
	movne	r2, #9216
	mvnne	r3, #21
	movtne	r2, 5
	rev	r1, r1
	strne	r2, [r7, #28]
	bne	.L8201
.L8203:
	ldrd	r2, [r7, #16]
	mov	r5, #0
	cmp	r1, r2
	sbcs	r3, r5, r3
	movge	r2, #8448
	mvnge	r3, #21
	movtge	r2, 5
	strge	r2, [r7, #28]
	bge	.L8201
	ldr	r3, [r7, #40]
	ldr	fp, [r0, #128]
	sub	r2, r3, #32
	lsl	r8, r1, r3
	lsl	r9, r1, r2
	cmp	fp, #0
	rsb	r2, r3, #32
	orr	r9, r9, r1, lsr r2
	beq	.L8206
	mov	r3, sp
	bic	r3, r3, #8128
	mov	r5, r0
	bic	r3, r3, #63
	add	r4, r0, #44
	str	r3, [sp, #24]
.L8218:
	ldr	r3, [r7, #8]
	mov	r0, r4
	ldr	r10, [r7, #12]
	str	r3, [sp, #8]
	bl	_raw_spin_lock_irq
	ldr	r6, [r5, #60]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L8208
	b	.L8207
.L8246:
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L8207
.L8208:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	sleep_thread
	subs	r3, r0, #0
	mov	r0, r4
	beq	.L8246
.L8201:
	mov	r0, r3
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8207:
	ldr	r3, [sp, #8]
	subs	r3, r3, r8
	str	r3, [sp, #16]
	sbc	r3, r10, r9
	cmp	fp, #16384
	str	r3, [sp, #20]
	movcc	r3, fp
	movcs	r3, #16384
	str	r3, [sp, #8]
	mov	r3, #0
	str	r3, [sp, #12]
	ldrd	r0, [sp, #8]
	ldrd	r2, [sp, #16]
	cmp	r2, r0
	sbcs	r1, r3, r1
	blt	.L8247
.L8209:
	ldr	r3, [sp, #8]
	mov	r0, r4
	str	r3, [sp, #28]
	bl	_raw_spin_unlock_irq
	ldr	r3, [sp, #8]
	cmp	r3, #0
	beq	.L8248
	mov	r2, r3
	add	r3, sp, #40
	strd	r8, [r3, #-8]!
	ldr	r1, [r6]
	ldr	r0, [r7]
	bl	vfs_read
	ldr	r3, [sp, #24]
	mov	r10, r0
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L8220
	cmp	r0, #0
	blt	.L8249
	ldr	r3, [sp, #28]
	cmp	r0, r3
	bcs	.L8214
	ldr	r0, .L8252
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L8250
.L8215:
	ldr	r2, [r7, #44]
	mov	r0, r4
	ldr	r3, [r5, #136]
	rsb	r2, r2, #0
	and	r10, r10, r2
	sub	r3, r3, r10
	adds	r8, r8, r10
	adc	r9, r9, r10, asr #31
	sub	fp, fp, r10
	str	r3, [r5, #136]
	bl	_raw_spin_lock_irq
	ldr	r2, [r6, #16]
	mov	r3, #1
	mov	r0, r4
	str	r10, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq
	ldr	r3, [sp, #28]
	cmp	r10, r3
	bcc	.L8219
.L8216:
	cmp	fp, #0
	beq	.L8206
	ldr	r3, [r6, #16]
	mov	r1, r6
	mov	r0, r5
	ldrb	r2, [r3, #26]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #26]
	bl	start_in_transfer
	cmp	r0, #0
	beq	.L8206
	ldr	r3, [r6, #8]
	str	r3, [r5, #60]
	b	.L8218
.L8247:
	strd	r2, [sp, #8]
	b	.L8209
.L8249:
	ldr	r0, .L8252+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8251
.L8213:
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r2, [r6, #16]
	mov	r1, #0
	mov	r3, #1
	mov	r0, r4
	str	r1, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq
.L8219:
	ldr	r3, [r7, #40]
	mov	r2, #4352
	movt	r2, 3
	str	r2, [r7, #28]
	subs	r1, r3, #32
	lsr	r2, r8, r3
	rsb	r3, r3, #32
	orr	r2, r2, r9, lsl r3
	mvn	r3, #4
	orrpl	r2, r2, r9, asr r1
	ldrb	r1, [r7, #24]	@ zero_extendqisi2
	str	r2, [r7, #32]
	orr	r2, r1, #64
	strb	r2, [r7, #24]
	b	.L8201
.L8245:
	orr	r1, r3, #134217728
	orr	r1, r1, r2, lsl #16
	orr	r1, r1, ip, lsl #8
	bic	r1, r1, #-16777216
	b	.L8203
.L8214:
	ldr	r3, [r5, #136]
	mov	r0, r4
	adds	r8, r8, r10
	adc	r9, r9, r10, asr #31
	sub	fp, fp, r10
	sub	r3, r3, r10
	str	r3, [r5, #136]
	bl	_raw_spin_lock_irq
	ldr	r2, [r6, #16]
	mov	r3, #1
	mov	r0, r4
	str	r10, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq
	b	.L8216
.L8206:
	mvn	r3, #4
	b	.L8201
.L8220:
	mvn	r3, #3
	b	.L8201
.L8250:
	ldr	r3, [sp, #8]
	movw	r2, #:lower16:.LC716
	add	r1, r7, #48
	movt	r2, #:upper16:.LC716
	sub	r0, r0, #18
	str	r3, [sp]
	mov	r3, r10
	bl	__dynamic_dev_dbg
	b	.L8215
.L8251:
	movw	r2, #:lower16:.LC715
	mov	r3, r10
	movt	r2, #:upper16:.LC715
	add	r1, r7, #48
	sub	r0, r0, #20
	bl	__dynamic_dev_dbg
	b	.L8213
.L8248:
	ldr	r3, [r7, #40]
	mov	r2, #8448
	mov	r0, r4
	movt	r2, 5
	str	r2, [r7, #28]
	subs	r1, r3, #32
	lsr	r2, r8, r3
	rsb	r3, r3, #32
	orr	r2, r2, r9, lsl r3
	ldrb	r3, [r7, #24]	@ zero_extendqisi2
	orrpl	r2, r2, r9, asr r1
	orr	r3, r3, #64
	strb	r3, [r7, #24]
	str	r2, [r7, #32]
	bl	_raw_spin_lock_irq
	ldr	r2, [r6, #16]
	mov	r3, #1
	mov	r1, #0
	mov	r0, r4
	str	r1, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq
	mvn	r3, #4
	b	.L8201
.L8253:
	.align	2
.L8252:
	.word	.LANCHOR4-870
	.word	.LANCHOR4-892
	.fnend
	.size	do_read, .-do_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_sb_fill, %function
ffs_sb_fill:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r0, [r3, #32]
	.pad #12
	sub	sp, sp, #12
	cmp	r0, #0
	beq	.L8262
	mov	r2, #212
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	bne	.L8255
.L8279:
	mvn	r0, #11
.L8254:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L8262:
	mov	r4, #16
.L8255:
	mov	r8, #0
	mov	r6, #1
	ldr	r2, .L8280
	movw	r1, #:lower16:.LC717
	add	r0, r4, #4
	movt	r1, #:upper16:.LC717
	str	r6, [r4, #84]
	mov	r9, #12
	str	r8, [r4, #88]
	str	r8, [r4, #92]
	bl	__mutex_init
	movw	r1, #:lower16:.LC718
	ldr	r2, .L8280
	add	r0, r4, #116
	movt	r1, #:upper16:.LC718
	str	r8, [r4, #24]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC719
	ldr	r2, .L8280
	add	r0, r4, #36
	movt	r1, #:upper16:.LC719
	str	r8, [r4, #32]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC719
	ldr	r2, .L8280
	add	r0, r4, #72
	movt	r1, #:upper16:.LC719
	str	r8, [r4, #68]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC719
	ldr	r2, .L8280
	add	r0, r4, #56
	movt	r1, #:upper16:.LC719
	str	r8, [r4, #52]
	bl	__init_waitqueue_head
	strh	r6, [r4, #106]	@ movhi
	ldr	ip, .L8280+4
	movw	r1, #29537
	str	r5, [r4, #192]
	ldr	r3, [r7, #16]
	movt	r1, 2660
	mov	lr, #4096
	mov	r0, r5
	str	r3, [r4, #136]
	ldrd	r2, [r7]
	strd	r2, [r4, #196]
	ldr	r3, [r7, #8]
	str	r3, [r4, #204]
	strb	r9, [r5, #13]
	str	lr, [r5, #16]
	str	ip, [r5, #36]
	str	r1, [r5, #56]
	str	r4, [r5, #616]
	str	r6, [r5, #628]
	ldrh	r3, [r7, #12]
	strh	r3, [r7]	@ movhi
	bl	new_inode
	subs	r6, r0, #0
	beq	.L8257
	mov	r0, sp
	bl	current_kernel_time
	bl	get_next_ino
	str	r0, [r6, #40]
	ldrh	r3, [r7]
	movw	r1, #:lower16:simple_dir_operations
	movt	r1, #:upper16:simple_dir_operations
	cmp	r1, r8
	strh	r3, [r6]	@ movhi
	ldrd	r2, [sp]
	ldr	r0, [r7, #4]
	str	r0, [r6, #4]
	ldr	r0, [r7, #8]
	strne	r1, [r6, #200]
	strd	r2, [r6, #52]
	strd	r2, [r6, #60]
	strd	r2, [r6, #68]
	movw	r3, #:lower16:simple_dir_inode_operations
	movt	r3, #:upper16:simple_dir_inode_operations
	str	r0, [r6, #8]
	cmp	r3, #0
	str	r8, [r6, #328]
	strne	r3, [r6, #24]
.L8257:
	mov	r0, r6
	bl	d_make_root
	cmp	r0, #0
	str	r0, [r5, #60]
	beq	.L8279
	movw	r1, #:lower16:.LC720
	ldr	r6, [r5, #616]
	movt	r1, #:upper16:.LC720
	bl	d_alloc_name
	subs	r7, r0, #0
	beq	.L8279
	mov	r0, r5
	bl	new_inode
	subs	r5, r0, #0
	beq	.L8261
	mov	r0, sp
	bl	current_kernel_time
	bl	get_next_ino
	str	r0, [r5, #40]
	ldrh	r3, [r6, #196]
	mov	r1, r5
	ldr	ip, .L8280+8
	mov	r0, r7
	strh	r3, [r5]	@ movhi
	ldr	lr, [r6, #200]
	ldrd	r2, [sp]
	str	lr, [r5, #4]
	ldr	lr, [r6, #204]
	str	lr, [r5, #8]
	strd	r2, [r5, #52]
	strd	r2, [r5, #60]
	strd	r2, [r5, #68]
	str	ip, [r5, #200]
	str	r4, [r5, #328]
	bl	d_instantiate
	mov	r0, r7
	bl	d_rehash
	mov	r0, #0
	b	.L8254
.L8261:
	mov	r0, r7
	bl	dput
	b	.L8279
.L8281:
	.align	2
.L8280:
	.word	.LANCHOR1+3972
	.word	.LANCHOR5-2588
	.word	.LANCHOR5-2484
	.fnend
	.size	ffs_sb_fill, .-ffs_sb_fill
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_add_header, %function
rndis_qc_add_header:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r1
	mov	r1, #44
	mov	r0, r6
	str	lr, [sp, #12]
	bl	skb_realloc_headroom
	subs	r5, r0, #0
	beq	.L8283
	mov	r1, #44
	bl	skb_push
	mov	r1, #44
	mov	r4, r0
	bl	__memzero
	mov	r3, #0
	mov	r2, #1
	mov	r1, #36
	strb	r2, [r4]
	strb	r3, [r4, #1]
	strb	r3, [r4, #2]
	strb	r3, [r4, #3]
	ldr	r2, [r5, #80]
	str	r2, [r4, #4]	@ unaligned
	strb	r1, [r4, #8]
	strb	r3, [r4, #9]
	strb	r3, [r4, #10]
	strb	r3, [r4, #11]
	ldr	r3, [r5, #80]
	sub	r3, r3, #44
	str	r3, [r4, #12]	@ unaligned
.L8283:
	mov	r0, r6
	bl	dev_kfree_skb_any
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_qc_add_header, .-rndis_qc_add_header
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_unbind, %function
ecm_qc_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L8307
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L8304
.L8289:
	ldr	r0, .L8307+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8305
.L8290:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3752]
	bl	kfree
	ldr	r0, [r4, #3744]
	mov	r3, #0
	str	r3, [r4, #3752]
	cmp	r0, r3
	beq	.L8291
	bl	destroy_workqueue
.L8291:
	ldr	r3, [r6, #24]
	mov	r2, #0
	str	r2, [r4, #3744]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L8306
.L8292:
	cmp	r3, #2
	bls	.L8293
	ldr	r0, [r5, #8]
	bl	kfree
.L8293:
	ldr	r0, [r5, #16]
	bl	kfree
	ldr	r3, [r5, #148]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r5, #144]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR0
	mov	r0, r5
	str	r2, [r3, #1512]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
.L8306:
	ldr	r0, [r5, #12]
	bl	kfree
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L8292
.L8305:
	movw	r1, #:lower16:.LC722
	ldr	r2, .L8307+8
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC722
	bl	__dynamic_pr_debug
	b	.L8290
.L8304:
	ldr	r1, [r6, #24]
	movw	r2, #:lower16:.LC721
	sub	r0, r3, #20
	movt	r2, #:upper16:.LC721
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L8289
.L8308:
	.align	2
.L8307:
	.word	.LANCHOR4-844
	.word	.LANCHOR4-820
	.word	.LANCHOR5-2376
	.fnend
	.size	ecm_qc_unbind, .-ecm_qc_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_disconnect_work, %function
usb_qdss_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L8335
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L8331
.L8310:
	ldr	r5, [r4, #-64]
	movw	r0, #:lower16:.LC724
	movt	r0, #:upper16:.LC724
	ldr	r3, [r5]
	ldr	r3, [r3, #84]
	ldr	r6, [r3]
	bl	printk
	movw	r0, #:lower16:.LC495
	movt	r0, #:upper16:.LC495
	ldr	r1, [r6, #28]
	bl	strcmp
	cmp	r0, #0
	beq	.L8332
.L8312:
	ldr	r5, [r4, #-48]
	cmp	r5, #0
	beq	.L8309
	mov	r3, #0
	ldr	r0, [r4, #-44]
	mov	r1, #1
	mov	r2, r3
	blx	r5
	ldr	r0, .L8335+4
	ldr	r2, [r4, #-88]
	ldrh	r3, [r0, #-2]
	ldr	r4, [r2]
	tst	r3, #4
	bne	.L8333
.L8316:
	mov	r2, #1
	mov	r3, #0
	ldr	r0, [r4, #28]
	mov	r1, r2
	bl	usb_bam_get_connection_idx
	movw	r3, #:lower16:.LANCHOR1
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3984]
	bl	kfree
	uxtb	r0, r4
	bl	usb_bam_disconnect_pipe
	cmp	r0, #0
	bne	.L8334
.L8309:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8332:
	mov	r0, r5
	bl	msm_ep_unconfig
	cmp	r0, #0
	beq	.L8312
	movw	r0, #:lower16:.LC725
	movt	r0, #:upper16:.LC725
	bl	printk
	movw	r0, #:lower16:.LC726
	ldr	r1, .L8335+8
	movt	r0, #:upper16:.LC726
	bl	printk
	b	.L8312
.L8331:
	movw	r1, #:lower16:.LC723
	sub	r0, r3, #20
	movt	r1, #:upper16:.LC723
	bl	__dynamic_pr_debug
	b	.L8310
.L8333:
	movw	r1, #:lower16:.LC727
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC727
	bl	__dynamic_pr_debug
	b	.L8316
.L8334:
	movw	r0, #:lower16:.LC728
	movt	r0, #:upper16:.LC728
	bl	printk
	movw	r0, #:lower16:.LC729
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC729
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L8336:
	.align	2
.L8335:
	.word	.LANCHOR4-796
	.word	.LANCHOR4-772
	.word	.LANCHOR5-2356
	.fnend
	.size	usb_qdss_disconnect_work, .-usb_qdss_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_write, %function
acc_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L8390
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r1, [r3, #-2]
	.pad #44
	sub	sp, sp, #44
	ldr	r4, [r0, #124]
	str	r2, [sp]
	tst	r1, #4
	bne	.L8382
.L8338:
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	and	r2, r3, #3
	cmp	r2, #1
	beq	.L8383
	ldr	r0, .L8390+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	mvneq	r3, #18
	streq	r3, [sp]
	bne	.L8384
.L8337:
	ldr	r0, [sp]
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8383:
	cmp	r5, #0
	beq	.L8360
	tst	r3, #1
	beq	.L8341
	mov	r3, #57344
	movw	r2, #:lower16:autoremove_wake_function
	movt	r3, 65535
	movt	r2, #:upper16:autoremove_wake_function
	add	r8, r4, #1648
	add	r6, r4, #88
	add	r8, r8, #8
	str	r3, [sp, #4]
	str	r2, [sp, #8]
	b	.L8344
.L8387:
	mov	r2, r9
	mov	r1, r7
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L8355
	str	r9, [r10, #4]
	ldr	r0, [r4, #92]
	mov	r2, #208
	mov	r1, r10
	ldr	ip, [r0, #8]
	ldr	fp, [ip, #16]
	blx	fp
	cmp	r0, #0
	blt	.L8385
	subs	r5, r5, r9
	add	r7, r7, r9
	beq	.L8340
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L8341
.L8344:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r10, [r4, #1656]
	mov	r9, r0
	cmp	r10, r8
	beq	.L8386
	mov	r0, r10
	sub	r10, r10, #36
	bl	list_del
	mov	r1, r9
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r10, #0
	beq	.L8346
.L8347:
	cmp	r5, #16384
	movhi	r9, #16384
	movhi	r2, #0
	bhi	.L8353
	ldr	r2, [r4, #92]
	mov	r9, r5
	ldrh	r1, [r2, #20]
	udiv	r2, r5, r1
	mls	r2, r1, r2, r5
	clz	r2, r2
	lsr	r2, r2, #5
.L8353:
	ldrb	r1, [r10, #26]	@ zero_extendqisi2
	mov	r3, sp
	ldr	r0, [sp, #4]
	bfi	r1, r2, #1, #1
	and	ip, r3, r0
	ldr	r0, [r10]
	strb	r1, [r10, #26]
	ldr	r2, [ip, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r7, r9; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L8387
	mov	r1, r9
	bl	__memzero
.L8355:
	mvn	r3, #13
	str	r3, [sp]
.L8358:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	ldr	r1, [r4, #1660]
	add	r0, r10, #36
	mov	r2, r8
	bl	__list_add
	mov	r1, r5
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L8340:
	ldr	r0, .L8390+8
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	beq	.L8337
	movw	r1, #:lower16:.LC734
	ldr	r2, [sp]
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC734
	bl	__dynamic_pr_debug
	b	.L8337
.L8386:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L8346:
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	ands	r3, r3, #1
	beq	.L8363
	ldr	r1, [sp, #4]
	mov	r3, #0
	mov	r2, sp
	add	r9, r4, #1664
	str	r5, [sp, #12]
	str	r3, [sp, #20]
	add	r9, r9, #12
	str	r3, [sp, #24]
	and	r2, r2, r1
	str	r3, [sp, #28]
	ldr	r1, [sp, #8]
	mov	fp, r2
	str	r3, [sp, #32]
	str	r3, [sp, #36]
	ldr	r2, [r2, #12]
	add	r3, sp, #32
	str	r2, [sp, #24]
	str	r1, [sp, #28]
	str	r3, [sp, #32]
	str	r3, [sp, #36]
	b	.L8352
.L8389:
	bl	schedule
.L8352:
	mov	r2, #1
	add	r1, sp, #20
	mov	r0, r9
	bl	prepare_to_wait
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1656]
	mov	r10, r0
	cmp	r8, r3
	mov	r0, r3
	sub	r5, r3, #36
	beq	.L8388
	bl	list_del
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	bne	.L8350
.L8349:
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	ands	r3, r3, #1
	beq	.L8381
	ldr	r3, [fp, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L8389
	mov	r3, #65024
	movt	r3, 65535
.L8381:
	add	r1, sp, #20
	mov	r0, r9
	str	r3, [sp]
	bl	finish_wait
	b	.L8340
.L8388:
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L8349
.L8350:
	add	r1, sp, #20
	mov	r0, r9
	mov	r10, r5
	ldr	r5, [sp, #12]
	bl	finish_wait
	b	.L8347
.L8363:
	str	r3, [sp]
	b	.L8340
.L8382:
	movw	r1, #:lower16:.LC730
	sub	r0, r3, #20
	movt	r1, #:upper16:.LC730
	bl	__dynamic_pr_debug
	b	.L8338
.L8341:
	ldr	r0, .L8390+12
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	mvneq	r3, #4
	streq	r3, [sp]
	beq	.L8340
	mvn	r3, #4
	movw	r1, #:lower16:.LC732
	movt	r1, #:upper16:.LC732
	sub	r0, r0, #20
	str	r3, [sp]
	bl	__dynamic_pr_debug
	b	.L8340
.L8384:
	mvn	r3, #18
	movw	r1, #:lower16:.LC731
	movt	r1, #:upper16:.LC731
	sub	r0, r0, #20
	str	r3, [sp]
	bl	__dynamic_pr_debug
	b	.L8337
.L8385:
	ldr	ip, .L8390+16
	ldrh	r2, [ip, #-2]
	tst	r2, #4
	mvneq	r3, #4
	streq	r3, [sp]
	beq	.L8358
	movw	r1, #:lower16:.LC733
	mov	r2, r0
	movt	r1, #:upper16:.LC733
	sub	r0, ip, #20
	bl	__dynamic_pr_debug
	mvn	r3, #4
	str	r3, [sp]
	b	.L8358
.L8360:
	str	r5, [sp]
	b	.L8340
.L8391:
	.align	2
.L8390:
	.word	.LANCHOR4-748
	.word	.LANCHOR4-724
	.word	.LANCHOR4-652
	.word	.LANCHOR4-700
	.word	.LANCHOR4-676
	.fnend
	.size	acc_write, .-acc_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_write_tomdm, %function
ghsic_data_write_tomdm:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	subs	r5, r0, #120
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	beq	.L8392
	ldr	r3, [r0, #-116]
	cmp	r3, #0
	bne	.L8449
.L8392:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8449:
	sub	r8, r0, #40
	mov	r4, r0
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #44]
	mov	r7, r0
	ubfx	r3, r3, #1, #1
	cmp	r3, #0
	bne	.L8398
	mov	r2, r4
	ldr	r6, [r2, #-56]!
	cmp	r6, r2
	beq	.L8398
	cmp	r6, #0
	beq	.L8398
	ldr	r2, [r4, #-48]
	ldr	r0, .L8458
	ldr	r9, .L8458+4
	sub	r2, r2, #1
	str	r2, [r4, #-48]
	ldm	r6, {r1, r2}
	str	r3, [r6]
	str	r3, [r6, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8399
.L8400:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #3664]
	cmp	r3, #0
	bne	.L8450
.L8396:
	mov	r1, r7
	str	r3, [r6, #40]
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	sub	r9, r9, #8
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	mov	r1, r9
	ldr	r0, .L8458+8
	bl	___ratelimit
	cmp	r0, #0
	bne	.L8451
.L8397:
	ldr	r3, [r4, #92]
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #92]
	bl	dev_kfree_skb_any
.L8398:
.L8395:
	mov	r0, r8
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, .L8458+12
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8452
.L8401:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r4, #-108]
	mov	r6, r0
	cmp	r9, #0
	beq	.L8403
	movw	r3, #16960
	movw	r7, #:lower16:.LANCHOR0
	movt	r3, 15
	movw	r10, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR0
	movt	r10, #:upper16:.LANCHOR1
	str	r3, [sp, #20]
	b	.L8402
.L8404:
	mov	r2, #0
	mov	r1, #208
	ldr	r0, [r7, #1560]
	mvn	r3, #0
	bl	__alloc_skb
	subs	fp, r0, #0
	mov	r2, #208
	ldr	r1, [sp, #8]
	mov	r0, r9
	beq	.L8453
	ldr	ip, [fp, #172]
	str	r6, [fp, #28]
	str	ip, [r5, #-36]
	ldr	ip, [r7, #1560]
	str	ip, [r5, #-32]
	str	fp, [r5, #-4]
	ldr	ip, [r10, #3664]
	cmp	ip, #0
	bne	.L8454
.L8406:
	str	ip, [fp, #32]
	ldr	ip, [r9, #8]
	ldr	r6, [ip, #16]
	blx	r6
	mov	r2, r0
	mov	r0, r8
	str	r2, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [sp, #12]
	mov	r6, r0
	cmp	r2, #0
	bne	.L8455
.L8402:
	ldr	r3, [r4, #-116]
	sub	r2, r4, #64
	str	r2, [sp, #16]
	cmp	r3, #0
	beq	.L8403
	ldr	r5, [r4, #-64]
	sub	r3, r5, #36
	cmp	r5, r2
	mov	r0, r5
	str	r3, [sp, #8]
	beq	.L8403
	ldr	r2, [r4, #-48]
	ldr	r3, [r7, #1556]
	cmp	r2, r3
	bhi	.L8403
	bl	list_del
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [r10, #3664]
	cmp	r6, #0
	beq	.L8404
	add	r0, sp, #24
	bl	do_gettimeofday
	ldr	r2, [sp, #20]
	ldr	r6, [sp, #24]
	ldr	r3, [sp, #28]
	ubfx	r6, r6, #0, #12
	mla	r6, r2, r6, r3
	b	.L8404
.L8454:
	add	r0, sp, #24
	bl	do_gettimeofday
	add	r3, sp, #20
	mov	r2, #208
	ldr	r1, [sp, #8]
	ldm	r3, {r3, ip, lr}
	mov	r0, r9
	ubfx	ip, ip, #0, #12
	mla	ip, r3, ip, lr
	b	.L8406
.L8455:
	mov	r0, fp
	bl	dev_kfree_skb_any
	ldr	r1, .L8458+16
	ldr	r0, .L8458+20
	bl	___ratelimit
	cmp	r0, #0
	bne	.L8456
.L8409:
	ldr	r3, [r4, #-116]
	cmp	r3, #0
	bne	.L8457
	ldr	r3, [r9, #8]
	mov	r0, r9
	ldr	r1, [sp, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L8403:
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L8392
.L8450:
	add	r0, sp, #24
	bl	do_gettimeofday
	ldr	r3, [sp, #24]
	movw	r2, #16960
	ldr	r1, [sp, #28]
	movt	r2, 15
	ubfx	r3, r3, #0, #12
	mla	r3, r2, r3, r1
	b	.L8396
.L8452:
	movw	r1, #:lower16:.LC552
	mov	r3, r5
	ldr	r2, .L8458+16
	movt	r1, #:upper16:.LC552
	sub	r0, r0, #20
	bl	__dynamic_pr_debug
	b	.L8401
.L8453:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	ldr	r2, [r4, #-64]
	mov	r0, r5
	ldr	r1, [sp, #16]
	bl	__list_add
	b	.L8403
.L8399:
	ldr	lr, [r4, #-120]
	movw	r1, #:lower16:.LC571
	mov	r3, r5
	ldr	ip, [r4, #68]
	movt	r1, #:upper16:.LC571
	sub	r2, r9, #8
	sub	r0, r0, #20
	stm	sp, {ip, lr}
	bl	__dynamic_pr_debug
	b	.L8400
.L8457:
	mov	r0, r5
	ldr	r2, [r4, #-64]
	ldr	r1, [sp, #16]
	bl	__list_add
	b	.L8403
.L8451:
	movw	r0, #:lower16:.LC126
	mov	r1, r9
	mvn	r2, #18
	movt	r0, #:upper16:.LC126
	bl	printk
	b	.L8397
.L8456:
	movw	r0, #:lower16:.LC572
	ldr	r1, .L8458+16
	movt	r0, #:upper16:.LC572
	bl	printk
	b	.L8409
.L8459:
	.align	2
.L8458:
	.word	.LANCHOR4-628
	.word	.LANCHOR5-2320
	.word	.LANCHOR0+1532
	.word	.LANCHOR4-604
	.word	.LANCHOR5-2304
	.word	.LANCHOR0+1564
	.fnend
	.size	ghsic_data_write_tomdm, .-ghsic_data_write_tomdm
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_suspend, %function
mbim_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC735
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	ldr	r1, .L8467
	str	lr, [sp, #8]
	movt	r0, #:upper16:.LC735
	.pad #12
	sub	sp, sp, #12
	bl	printk
	ldr	r0, .L8467+4
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r5, [r4, #3752]
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L8466
.L8461:
	ldr	r1, [r4, #3744]
	add	r2, r5, #200
	mov	r0, #4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work_on
.L8466:
	ldr	r3, .L8467+8
	mov	r2, #0
	movw	r1, #:lower16:.LC619
	movt	r1, #:upper16:.LC619
	sub	r0, r0, #32
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L8461
.L8468:
	.align	2
.L8467:
	.word	.LANCHOR5-2284
	.word	.LANCHOR4-2368
	.word	.LANCHOR5-3268
	.fnend
	.size	mbim_suspend, .-mbim_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_resume, %function
mbim_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC736
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	ldr	r1, .L8476
	str	lr, [sp, #8]
	movt	r0, #:upper16:.LC736
	.pad #12
	sub	sp, sp, #12
	bl	printk
	ldr	r0, .L8476+4
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r5, [r4, #3752]
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L8475
.L8470:
	ldr	r1, [r4, #3744]
	add	r2, r5, #216
	mov	r0, #4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work_on
.L8475:
	ldr	r3, .L8476+8
	mov	r2, #0
	movw	r1, #:lower16:.LC617
	movt	r1, #:upper16:.LC617
	sub	r0, r0, #32
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L8470
.L8477:
	.align	2
.L8476:
	.word	.LANCHOR5-2268
	.word	.LANCHOR4-2416
	.word	.LANCHOR5-3304
	.fnend
	.size	mbim_resume, .-mbim_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_suspend, %function
ecm_qc_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L8490
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8488
.L8479:
	ldr	r0, .L8490+4
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r5, [r4, #3752]
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L8489
.L8480:
	ldr	r1, [r4, #3744]
	add	r2, r5, #200
	mov	r0, #4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work_on
.L8488:
	movw	r1, #:lower16:.LC737
	ldr	r2, .L8490+8
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC737
	bl	__dynamic_pr_debug
	b	.L8479
.L8489:
	ldr	r3, .L8490+12
	mov	r2, #0
	movw	r1, #:lower16:.LC619
	movt	r1, #:upper16:.LC619
	sub	r0, r0, #32
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L8480
.L8491:
	.align	2
.L8490:
	.word	.LANCHOR4-580
	.word	.LANCHOR4-2368
	.word	.LANCHOR5-2256
	.word	.LANCHOR5-3268
	.fnend
	.size	ecm_qc_suspend, .-ecm_qc_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_resume, %function
ecm_qc_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L8504
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8502
.L8493:
	ldr	r0, .L8504+4
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r5, [r4, #3752]
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L8503
.L8494:
	ldr	r1, [r4, #3744]
	add	r2, r5, #216
	mov	r0, #4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work_on
.L8502:
	movw	r1, #:lower16:.LC738
	ldr	r2, .L8504+8
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC738
	bl	__dynamic_pr_debug
	b	.L8493
.L8503:
	ldr	r3, .L8504+12
	mov	r2, #0
	movw	r1, #:lower16:.LC617
	movt	r1, #:upper16:.LC617
	sub	r0, r0, #32
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L8494
.L8505:
	.align	2
.L8504:
	.word	.LANCHOR4-556
	.word	.LANCHOR4-2416
	.word	.LANCHOR5-2240
	.word	.LANCHOR5-3304
	.fnend
	.size	ecm_qc_resume, .-ecm_qc_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_unbind, %function
mbim_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L8520
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r6, [r1, #136]	@ zero_extendqisi2
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L8518
.L8507:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	add	r6, r5, r6, lsl #2
	ldr	r0, [r6, #3752]
	bl	kfree
	ldr	r0, [r5, #3744]
	mov	r3, #0
	str	r3, [r6, #3752]
	cmp	r0, r3
	beq	.L8508
	bl	destroy_workqueue
.L8508:
	ldr	r3, [r7, #24]
	mov	r2, #0
	str	r2, [r5, #3744]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L8519
.L8509:
	cmp	r3, #2
	bls	.L8510
	ldr	r0, [r4, #8]
	bl	kfree
.L8510:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r3, [r4, #160]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR0
	strb	r2, [r3, #250]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8519:
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r7, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L8509
.L8518:
	movw	r1, #:lower16:.LC722
	sub	r0, r3, #20
	ldr	r2, .L8520+4
	movt	r1, #:upper16:.LC722
	bl	__dynamic_pr_debug
	b	.L8507
.L8521:
	.align	2
.L8520:
	.word	.LANCHOR4-820
	.word	.LANCHOR5-2376
	.fnend
	.size	mbim_unbind, .-mbim_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_read, %function
mbim_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L8583
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	ldr	r4, [r0, #124]
	str	r2, [sp, #4]
	ldrh	r2, [r3, #-2]
	str	r1, [sp, #8]
	tst	r2, #4
	bne	.L8571
.L8523:
	cmp	r4, #0
	beq	.L8572
	ldr	r3, [sp, #4]
	cmp	r3, #4096
	bhi	.L8573
	add	r3, r4, #100
	str	r3, [sp]
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r1, r3
	.syntax divided
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r1]
	add	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L8569
	mov	r3, sp
	bic	r5, r3, #8128
	bic	r5, r5, #63
.L8527:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	bne	.L8532
	ldr	r3, [r4, #232]
	cmp	r3, #0
	beq	.L8533
.L8532:
	ldr	r3, [r4, #232]
	cmp	r3, #0
	bne	.L8574
	add	r3, r4, #208
	add	r6, r4, #204
	mov	r0, r6
	mov	r5, r3
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r10, [r4, #208]
	mov	r7, r0
	cmp	r10, r5
	movne	r5, r10
	bne	.L8536
	mov	r3, sp
	ldr	fp, .L8583+4
	mov	r5, r10
	bic	r9, r3, #8128
	bic	r9, r9, #63
	b	.L8535
.L8538:
	ldr	r0, .L8583+8
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L8575
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #208]
	mov	r7, r0
	cmp	r10, r5
	bne	.L8536
.L8535:
	ldrh	r3, [fp, #-2]
	tst	r3, #4
	bne	.L8576
.L8537:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #208]
	cmp	r3, r5
	bne	.L8538
	ldr	r0, [r9, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #32
	movt	r2, #:upper16:autoremove_wake_function
	mov	r3, #0
	add	r7, sp, #20
	add	r8, r4, #108
	str	r3, [sp, #20]
	str	r0, [sp, #24]
	str	r2, [sp, #28]
	str	r1, [sp, #32]
	str	r1, [sp, #36]
	b	.L8541
.L8577:
	bl	schedule
.L8541:
	mov	r2, #1
	mov	r1, r7
	mov	r0, r8
	bl	prepare_to_wait
	ldr	r3, [r4, #208]
	cmp	r3, r5
	bne	.L8539
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L8577
	mov	r1, r7
	mov	r0, r8
	bl	finish_wait
	movw	r0, #:lower16:.LC746
	ldr	r1, .L8583+12
	movt	r0, #:upper16:.LC746
	bl	printk
	ldr	r1, [sp]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r4, #65024
	movt	r4, 65535
.L8522:
	mov	r0, r4
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8576:
	movw	r1, #:lower16:.LC291
	ldr	r2, .L8583+12
	movt	r1, #:upper16:.LC291
	ldr	r0, .L8583+16
	bl	__dynamic_pr_debug
	b	.L8537
.L8575:
	movw	r1, #:lower16:.LC743
	ldr	r2, .L8583+12
	sub	r0, r0, #18
	movt	r1, #:upper16:.LC743
	bl	__dynamic_pr_debug
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #208]
	mov	r7, r0
	cmp	r5, r10
	bne	.L8536
	ldr	r5, [sp, #12]
	b	.L8535
.L8536:
	ldr	r3, [r5, #-4]
	sub	r8, r5, #8
	ldr	r2, [sp, #4]
	cmp	r3, r2
	bhi	.L8578
	ldr	r0, .L8583+20
	ldrh	r2, [r0, #-2]
	tst	r2, #4
	bne	.L8579
.L8546:
	mov	r0, r5
	bl	list_del
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [sp]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	ldr	r2, [r5, #-4]
	bic	r3, r3, #8128
	ldr	r0, [sp, #8]
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r0, r2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L8580
.L8547:
	cmp	r2, #0
	bne	.L8581
	ldr	r0, .L8583+24
	ldr	r4, [r5, #-4]
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8582
.L8549:
	cmp	r8, #0
	beq	.L8522
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r8
	bl	kfree
	b	.L8522
.L8539:
	mov	r1, r7
	mov	r0, r8
	bl	finish_wait
	b	.L8538
.L8580:
	ldr	r1, [r5, #-8]
	bl	__copy_to_user
	mov	r2, r0
	b	.L8547
.L8571:
	movw	r1, #:lower16:.LC288
	sub	r0, r3, #20
	ldr	r2, .L8583+12
	movt	r1, #:upper16:.LC288
	ldr	r3, [sp, #4]
	bl	__dynamic_pr_debug
	b	.L8523
.L8582:
	movw	r1, #:lower16:.LC296
	mov	r3, r4
	ldr	r2, .L8583+12
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC296
	bl	__dynamic_pr_debug
	ldr	r4, [r5, #-4]
	b	.L8549
.L8579:
	movw	r1, #:lower16:.LC294
	ldr	r2, .L8583+12
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC294
	bl	__dynamic_pr_debug
	b	.L8546
.L8574:
	ldr	r1, [sp]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r4, #4
	b	.L8522
.L8578:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [sp]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC744
	ldr	r1, .L8583+12
	mvn	r4, #11
	ldr	r2, [r5, #-4]
	movt	r0, #:upper16:.LC744
	ldr	r3, [sp, #4]
	bl	printk
	b	.L8522
.L8581:
	movw	r0, #:lower16:.LC745
	ldr	r1, .L8583+12
	mvn	r4, #11
	movt	r0, #:upper16:.LC745
	bl	printk
	b	.L8549
.L8533:
	movw	r0, #:lower16:.LC742
	ldr	r1, .L8583+12
	movt	r0, #:upper16:.LC742
	bl	printk
	ldr	r3, [r4, #88]
	cmp	r3, #0
	bne	.L8527
	ldr	r3, [r4, #232]
	cmp	r3, #0
	bne	.L8527
	ldr	r0, [r5, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #32
	movt	r2, #:upper16:autoremove_wake_function
	add	r7, sp, #20
	str	r3, [sp, #20]
	add	r6, r4, #108
	str	r0, [sp, #24]
	str	r2, [sp, #28]
	str	r1, [sp, #32]
	str	r1, [sp, #36]
.L8531:
	mov	r2, #1
	mov	r1, r7
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r3, [r4, #88]
	cmp	r3, #0
	bne	.L8529
	ldr	r3, [r4, #232]
	cmp	r3, #0
	bne	.L8529
	ldr	r3, [r5, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L8530
	bl	schedule
	b	.L8531
.L8569:
	ldr	r1, [sp]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC741
	ldr	r1, .L8583+12
	mvn	r4, #15
	movt	r0, #:upper16:.LC741
	bl	printk
	b	.L8522
.L8530:
	mov	r1, r7
	mov	r0, r6
	bl	finish_wait
	ldr	r1, [sp]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r4, #65024
	movt	r4, 65535
	b	.L8522
.L8529:
	mov	r1, r7
	mov	r0, r6
	bl	finish_wait
	b	.L8527
.L8572:
	movw	r0, #:lower16:.LC739
	ldr	r1, .L8583+12
	mvn	r4, #18
	movt	r0, #:upper16:.LC739
	bl	printk
	b	.L8522
.L8573:
	movw	r0, #:lower16:.LC740
	mov	r2, r3
	ldr	r1, .L8583+12
	movt	r0, #:upper16:.LC740
	mov	r3, #4096
	bl	printk
	mvn	r4, #21
	b	.L8522
.L8584:
	.align	2
.L8583:
	.word	.LANCHOR4-532
	.word	.LANCHOR4-508
	.word	.LANCHOR4-486
	.word	.LANCHOR5-2224
	.word	.LANCHOR4-528
	.word	.LANCHOR4-460
	.word	.LANCHOR4-436
	.fnend
	.size	mbim_read, .-mbim_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gaudio_open_streams, %function
gaudio_open_streams:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r9, #3988]
	.pad #24
	sub	sp, sp, #24
	cmp	r4, #0
	beq	.L8644
	ldr	r0, .L8658
	ldr	r7, .L8658+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8642
.L8588:
	movw	r6, #:lower16:kmalloc_caches
	mov	r3, #3
	ldr	r10, [r4, #124]
	movt	r6, #:upper16:kmalloc_caches
	mov	r2, #8000
	ldr	r0, [r6, #40]
	str	r3, [r4, #128]
	mov	r3, #2
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	cmp	r0, #0
	str	r2, [r4, #140]
	beq	.L8615
	mov	r2, #604
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L8645
.L8589:
	mov	r0, r5
	bl	_snd_pcm_hw_params_any
	ldr	r1, [r4, #128]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.102
	ldr	r1, [r4, #132]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.103
	ldr	r1, [r4, #136]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.104
	ldr	r1, [r4, #140]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.105
	mov	r2, #0
	movw	r1, #16707
	mov	r0, r10
	bl	snd_pcm_kernel_ioctl
	subs	r2, r0, #0
	blt	.L8646
.L8591:
	movw	r1, #16657
	mov	r2, r5
	movt	r1, 49756
	mov	r0, r10
	bl	snd_pcm_kernel_ioctl
	subs	r8, r0, #0
	blt	.L8647
	mov	r2, #0
	mov	r0, r10
	movw	r1, #16704
	bl	snd_pcm_kernel_ioctl
	subs	r2, r0, #0
	blt	.L8648
.L8593:
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L8617
	ldr	r3, [r5, #8]
	cmp	r3, #0
	bne	.L8618
.L8594:
	str	r3, [r4, #128]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L8619
	ldr	r3, [r5, #40]
	cmp	r3, #0
	movne	r1, #32
	bne	.L8596
.L8597:
	str	r3, [r4, #132]
	ldr	r3, [r5, #284]
	mov	r0, r5
	str	r3, [r4, #136]
	ldr	r3, [r5, #296]
	str	r3, [r4, #140]
	bl	kfree
	ldr	r0, .L8658+8
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8649
.L8598:
	ldr	r0, .L8658+12
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8650
.L8599:
	ldr	r5, [r9, #3988]
	mov	ip, #3
	mov	r1, #2
	ldr	r0, [r6, #40]
	mov	r2, #1
	mov	r3, #8000
	ldr	r9, [r5, #152]
	cmp	r0, #0
	ldr	r10, [r9, #212]
	str	ip, [r5, #156]
	str	r1, [r5, #160]
	strd	r2, [r5, #164]
	beq	.L8621
	mov	r2, #604
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L8651
.L8600:
	mov	r0, r4
	bl	_snd_pcm_hw_params_any
	ldr	r1, [r5, #156]
	mov	r0, r4
	bl	_snd_pcm_hw_param_set.constprop.102
	ldr	r1, [r5, #160]
	mov	r0, r4
	bl	_snd_pcm_hw_param_set.constprop.103
	ldr	r1, [r5, #164]
	mov	r0, r4
	bl	_snd_pcm_hw_param_set.constprop.104
	ldr	r1, [r5, #168]
	mov	r0, r4
	bl	_snd_pcm_hw_param_set.constprop.105
	mov	r2, #0
	movw	r1, #16707
	mov	r0, r9
	bl	snd_pcm_kernel_ioctl
	subs	r2, r0, #0
	blt	.L8652
.L8602:
	movw	r1, #16657
	mov	r2, r4
	movt	r1, 49756
	mov	r0, r9
	bl	snd_pcm_kernel_ioctl
	subs	r8, r0, #0
	blt	.L8653
	mov	r2, #0
	movw	r1, #16704
	mov	r0, r9
	bl	snd_pcm_kernel_ioctl
	subs	r2, r0, #0
	blt	.L8654
.L8604:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L8622
	ldr	r3, [r4, #8]
	cmp	r3, #0
	bne	.L8623
.L8605:
	str	r3, [r5, #156]
	ldr	r3, [r4, #36]
	cmp	r3, #0
	bne	.L8624
	ldr	r3, [r4, #40]
	cmp	r3, #0
	movne	r1, #32
	bne	.L8607
.L8608:
	str	r3, [r5, #160]
	ldr	r3, [r4, #284]
	str	r3, [r5, #164]
	ldr	r3, [r4, #296]
	str	r3, [r5, #168]
	ldr	r0, [r10, #44]
	bl	snd_pcm_format_physical_width
	str	r0, [r10, #80]
	mov	r0, r4
	bl	kfree
	ldr	r0, [r6, #28]
	cmp	r0, #0
	beq	.L8626
	mov	r2, #104
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L8655
	ldr	r0, .L8658+16
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8656
.L8610:
	ldr	r3, [r4, #332]
	mov	r2, #1
	mov	ip, #0
	mvn	lr, #-2147483648
	movw	r1, #16659
	mov	r0, r9
	movt	r1, 49256
	str	ip, [r6]
	str	r2, [r6, #4]
	lsr	r3, r3, r2
	str	r3, [r6, #12]
	str	r3, [r6, #16]
	str	r2, [r6, #20]
	mov	r2, r6
	str	lr, [r6, #24]
	str	ip, [r6, #28]
	str	ip, [r6, #32]
	bl	snd_pcm_kernel_ioctl
	subs	r8, r0, #0
	blt	.L8657
	mov	r0, r6
	bl	kfree
	ldr	r3, .L8658+20
	ldrh	r3, [r3, #-2]
	tst	r3, #4
	ldrne	r4, .L8658+24
	bne	.L8613
.L8612:
	cmp	r8, #0
	bne	.L8601
	movw	r0, #:lower16:.LC762
	sub	r1, r7, #4
	movt	r0, #:upper16:.LC762
	bl	printk
.L8585:
	mov	r0, r8
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L8653:
	movw	r0, #:lower16:.LC750
	mov	r2, r8
	ldr	r1, .L8658+28
	movt	r0, #:upper16:.LC750
	bl	printk
	mov	r0, r4
	bl	kfree
.L8601:
	movw	r0, #:lower16:.LC761
	sub	r1, r7, #4
	mov	r2, r8
	movt	r0, #:upper16:.LC761
	bl	printk
	b	.L8585
.L8621:
	mov	r4, #16
	b	.L8600
.L8615:
	mov	r5, #16
	b	.L8589
.L8626:
	ldr	r0, .L8658+16
	mov	r6, #16
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	beq	.L8610
.L8656:
	ldrb	ip, [r4, #388]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC758
	sub	r0, r0, #20
	ldr	r3, [r4, #380]
	movt	r1, #:upper16:.LC758
	ldr	r2, .L8658+32
	ubfx	ip, ip, #3, #1
	str	ip, [sp, #16]
	ldrb	ip, [r4, #388]	@ zero_extendqisi2
	ubfx	ip, ip, #2, #1
	str	ip, [sp, #12]
	ldrb	ip, [r4, #388]	@ zero_extendqisi2
	ubfx	ip, ip, #1, #1
	str	ip, [sp, #8]
	ldrb	ip, [r4, #388]	@ zero_extendqisi2
	and	ip, ip, #1
	str	ip, [sp, #4]
	ldr	ip, [r4, #384]
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L8610
.L8624:
	mov	r1, #0
.L8607:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L8608
.L8619:
	mov	r1, #0
.L8596:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L8597
.L8650:
	movw	r1, #:lower16:.LC754
	sub	r2, r7, #4
	movt	r1, #:upper16:.LC754
	sub	r0, r0, #20
	bl	__dynamic_pr_debug
	b	.L8599
.L8642:
	movw	r1, #:lower16:.LC748
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC748
	sub	r2, r7, #4
	bl	__dynamic_pr_debug
	ldr	r4, [r9, #3988]
	b	.L8588
.L8657:
	ldr	r4, .L8658+24
	movw	r0, #:lower16:.LC759
	mov	r2, r8
	movt	r0, #:upper16:.LC759
	sub	r1, r4, #8
	bl	printk
	mov	r0, r6
	bl	kfree
	ldr	r3, .L8658+20
	ldrh	r3, [r3, #-2]
	tst	r3, #4
	beq	.L8601
.L8613:
	ldr	r3, [r5, #156]
	movw	r1, #:lower16:.LC760
	sub	r2, r4, #8
	ldr	ip, [r5, #168]
	movt	r1, #:upper16:.LC760
	ldr	r0, .L8658+36
	str	ip, [sp, #8]
	ldr	ip, [r5, #164]
	str	ip, [sp, #4]
	ldr	ip, [r5, #160]
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L8612
.L8649:
	ldr	r3, [r4, #128]
	movw	r1, #:lower16:.LC752
	sub	r0, r0, #20
	ldr	ip, [r4, #140]
	movt	r1, #:upper16:.LC752
	ldr	r2, .L8658+40
	str	ip, [sp, #8]
	ldr	ip, [r4, #136]
	str	ip, [sp, #4]
	ldr	ip, [r4, #132]
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L8598
.L8622:
	mov	r1, #0
.L8606:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L8605
.L8617:
	mov	r1, #0
.L8595:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L8594
.L8623:
	mov	r1, #32
	b	.L8606
.L8618:
	mov	r1, #32
	b	.L8595
.L8645:
	mvn	r8, #11
.L8590:
	movw	r0, #:lower16:.LC753
	sub	r1, r7, #4
	mov	r2, r8
	movt	r0, #:upper16:.LC753
	bl	printk
	b	.L8585
.L8652:
	movw	r0, #:lower16:.LC749
	ldr	r1, .L8658+28
	movt	r0, #:upper16:.LC749
	bl	printk
	b	.L8602
.L8654:
	movw	r0, #:lower16:.LC756
	ldr	r1, .L8658+28
	movt	r0, #:upper16:.LC756
	bl	printk
	b	.L8604
.L8644:
	ldr	r2, .L8658+44
	movw	r0, #:lower16:.LC747
	mvn	r8, #18
	movt	r0, #:upper16:.LC747
	mov	r1, r2
	bl	printk
	b	.L8585
.L8646:
	movw	r0, #:lower16:.LC749
	ldr	r1, .L8658+40
	movt	r0, #:upper16:.LC749
	bl	printk
	b	.L8591
.L8648:
	movw	r0, #:lower16:.LC751
	ldr	r1, .L8658+40
	movt	r0, #:upper16:.LC751
	bl	printk
	b	.L8593
.L8647:
	movw	r0, #:lower16:.LC750
	mov	r2, r8
	ldr	r1, .L8658+40
	movt	r0, #:upper16:.LC750
	bl	printk
	mov	r0, r5
	bl	kfree
	b	.L8590
.L8651:
	movw	r0, #:lower16:.LC755
	ldr	r1, .L8658+28
	mvn	r8, #11
	movt	r0, #:upper16:.LC755
	bl	printk
	b	.L8601
.L8655:
	movw	r0, #:lower16:.LC757
	ldr	r1, .L8658+28
	mvn	r8, #11
	movt	r0, #:upper16:.LC757
	bl	printk
	b	.L8601
.L8659:
	.align	2
.L8658:
	.word	.LANCHOR4-412
	.word	.LANCHOR5-2208
	.word	.LANCHOR4-388
	.word	.LANCHOR4-364
	.word	.LANCHOR4-340
	.word	.LANCHOR4-316
	.word	.LANCHOR5-2160
	.word	.LANCHOR5-2168
	.word	.LANCHOR5-2144
	.word	.LANCHOR4-336
	.word	.LANCHOR5-2192
	.word	.LANCHOR5-2212
	.fnend
	.size	gaudio_open_streams, .-gaudio_open_streams
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_playback_work, %function
f_audio_playback_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	sub	r7, r0, #8
	mov	r6, r0
	strd	r8, [sp, #16]
	mov	r0, r7
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	bl	_raw_spin_lock_irqsave
	mov	r3, r6
	mov	r8, r0
	ldr	r4, [r3, #16]!
	cmp	r4, r3
	beq	.L8681
	mov	r0, r4
	movw	r5, #:lower16:.LANCHOR4
	bl	list_del
	sub	r3, r4, #8
	mov	r1, r8
	mov	r0, r7
	movt	r5, #:upper16:.LANCHOR4
	str	r3, [sp, #12]
	bl	_raw_spin_unlock_irqrestore
	sub	r3, r5, #292
	ldrh	r3, [r3, #-2]
	tst	r3, #4
	bne	.L8682
.L8662:
	ldmdb	r4, {r3, r8}
	ldr	r10, [r6, #-64]
	cmp	r8, #0
	str	r3, [sp, #8]
	ldr	fp, [r10, #212]
	beq	.L8683
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	ldrb	r3, [r7, #2216]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L8684
.L8665:
	mov	r3, sp
	bic	r7, r3, #8128
	lsl	r3, r8, #3
	bic	r7, r7, #63
	str	r3, [sp, #16]
.L8672:
	ldr	r3, [fp, #160]
	mov	r2, #146
	movw	r1, #16704
	mov	r0, r10
	ldr	r3, [r3]
	cmp	r3, #7
	mvn	r2, r2, lsr r3
	bhi	.L8667
	ands	r2, r2, #1
	bne	.L8667
	bl	snd_pcm_kernel_ioctl
	cmp	r0, #0
	blt	.L8685
.L8667:
	ldr	r3, [fp, #80]
	ldr	r0, .L8689
	ldr	r1, [sp, #8]
	cmp	r3, #0
	beq	.L8686
	ldrh	ip, [r0]
	ldr	r2, [sp, #16]
	ubfx	ip, ip, #2, #1
	cmp	ip, #0
	udiv	r9, r2, r3
	bne	.L8687
	ldr	r3, [r7, #8]
	mov	r2, r9
	ldr	r0, [r6, #-64]
	str	ip, [r7, #8]
	str	r3, [sp, #20]
	bl	snd_pcm_lib_write
	cmp	r9, r0
	mov	r2, r0
	bne	.L8670
.L8671:
	mov	r3, r2
	ldrh	r2, [r5, #-246]
	mov	r1, sp
	ldr	r0, [sp, #20]
	bic	r1, r1, #8128
	bic	r1, r1, #63
	tst	r2, #4
	str	r0, [r1, #8]
	bne	.L8688
.L8664:
	ldr	r5, [sp, #12]
	cmp	r5, #0
	beq	.L8660
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r3, #0
	mov	r0, r5
	str	r3, [r4, #-8]
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	kfree
.L8660:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8684:
	bl	gaudio_open_streams
	cmp	r0, #0
	moveq	r3, #1
	strbeq	r3, [r7, #2216]
	beq	.L8665
	movw	r0, #:lower16:.LC766
	ldr	r1, .L8689+4
	movt	r0, #:upper16:.LC766
	bl	printk
	b	.L8664
.L8682:
	movw	r1, #:lower16:.LC764
	sub	r0, r5, #312
	ldr	r2, .L8689+8
	movt	r1, #:upper16:.LC764
	ldr	r3, [r4, #-4]
	bl	__dynamic_pr_debug
	b	.L8662
.L8688:
	movw	r1, #:lower16:.LC771
	ldr	r2, .L8689+4
	movt	r1, #:upper16:.LC771
	ldr	r0, .L8689+12
	bl	__dynamic_pr_debug
	b	.L8664
.L8687:
	movw	r1, #:lower16:.LC769
	ldr	r2, .L8689+4
	sub	r0, r0, #18
	movt	r1, #:upper16:.LC769
	strd	r8, [sp]
	bl	__dynamic_pr_debug
	ldr	ip, [r7, #8]
	mov	r3, #0
	mov	r2, r9
	ldr	r0, [r6, #-64]
	ldr	r1, [sp, #8]
	str	r3, [r7, #8]
	str	ip, [sp, #20]
	bl	snd_pcm_lib_write
	cmp	r9, r0
	mov	r2, r0
	beq	.L8671
.L8670:
	ldr	r3, .L8689+16
	movw	r0, #:lower16:.LC770
	movt	r0, #:upper16:.LC770
	sub	r1, r3, #8
	bl	printk
	ldr	r3, [sp, #20]
	str	r3, [r7, #8]
	b	.L8672
.L8681:
	movw	r0, #:lower16:.LC763
	ldr	r1, .L8689+8
	movt	r0, #:upper16:.LC763
	bl	printk
	mov	r1, r8
	mov	r0, r7
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L8683:
	movw	r0, #:lower16:.LC765
	ldr	r1, .L8689+4
	movt	r0, #:upper16:.LC765
	bl	printk
	b	.L8664
.L8686:
	movw	r0, #:lower16:.LC768
	ldr	r1, .L8689+4
	movt	r0, #:upper16:.LC768
	bl	printk
	b	.L8664
.L8685:
	mov	r2, r0
	movw	r0, #:lower16:.LC751
	ldr	r1, .L8689+4
	movt	r0, #:upper16:.LC751
	bl	printk
	movw	r0, #:lower16:.LC767
	ldr	r1, .L8689+8
	movt	r0, #:upper16:.LC767
	bl	printk
	b	.L8664
.L8690:
	.align	2
.L8689:
	.word	.LANCHOR4-270
	.word	.LANCHOR5-2104
	.word	.LANCHOR5-2128
	.word	.LANCHOR4-264
	.word	.LANCHOR5-2096
	.fnend
	.size	f_audio_playback_work, .-f_audio_playback_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_complete_in, %function
mtp_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r3, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r3, #2500]
	cmp	r2, #0
	movne	r3, #4
	add	r5, r4, #88
	mov	r0, r5
	strne	r3, [r4, #104]
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	add	r2, r4, #116
	ldr	r1, [r4, #120]
	add	r0, r6, #36
	bl	__list_add
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	add	r0, r4, #144
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
	.fnend
	.size	mtp_complete_in, .-mtp_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_complete_intr, %function
mtp_complete_intr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r3, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r3, #2500]
	cmp	r2, #0
	movne	r3, #4
	add	r5, r4, #88
	mov	r0, r5
	strne	r3, [r4, #104]
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	add	r2, r4, #124
	ldr	r1, [r4, #128]
	add	r0, r6, #36
	bl	__list_add
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	add	r0, r4, #156
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
	.fnend
	.size	mtp_complete_intr, .-mtp_complete_intr
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_unbind, %function
f_audio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, [r1, #16]
	mov	r4, r1
	str	lr, [sp, #4]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	f_audio_unbind, .-f_audio_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_put_char, %function
gs_put_char:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r4, [r0, #272]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #92]
	mov	r1, r0
	ldr	r3, [r4, #100]
	ldr	ip, [r4, #104]
	add	r3, r3, r5
	sub	r3, r3, ip
	sub	r3, r3, #1
	udiv	r2, r3, r5
	mls	r3, r5, r2, r3
	cmp	r3, #0
	moveq	r5, r3
	beq	.L8706
	ldr	r2, [r4, #96]
	add	r5, r2, r5
	subs	r3, r5, ip
	beq	.L8711
	cmp	r3, #1
	strb	r6, [ip]
	bne	.L8712
	ldr	r2, [r4, #96]
	mov	r5, r3
	str	r2, [r4, #104]
.L8706:
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8711:
	strb	r6, [r2]
	ldr	r3, [r4, #96]
	mov	r5, #1
	add	r3, r3, r5
	str	r3, [r4, #104]
	b	.L8706
.L8712:
	ldr	r3, [r4, #104]
	mov	r5, #1
	add	r3, r3, r5
	str	r3, [r4, #104]
	b	.L8706
	.fnend
	.size	gs_put_char, .-gs_put_char
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_function_unbind_config, %function
ncm_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r4, #3992]
	cmp	r3, #0
	beq	.L8713
	ldr	r0, [r3, #8]
	bl	unregister_netdev
	ldr	r0, [r4, #3992]
	add	r0, r0, #88
	bl	flush_work
	ldr	r3, [r4, #3992]
	ldr	r0, [r3, #8]
	bl	free_netdev
	mov	r3, #0
	str	r3, [r4, #3992]
.L8713:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ncm_function_unbind_config, .-ncm_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_function_unbind_config, %function
ecm_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r4, #3992]
	cmp	r3, #0
	beq	.L8719
	ldr	r0, [r3, #8]
	bl	unregister_netdev
	ldr	r0, [r4, #3992]
	add	r0, r0, #88
	bl	flush_work
	ldr	r3, [r4, #3992]
	ldr	r0, [r3, #8]
	bl	free_netdev
	mov	r3, #0
	str	r3, [r4, #3992]
.L8719:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_function_unbind_config, .-ecm_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_function_unbind_config, %function
rndis_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r4, #3992]
	cmp	r3, #0
	beq	.L8725
	ldr	r0, [r3, #8]
	bl	unregister_netdev
	ldr	r0, [r4, #3992]
	add	r0, r0, #88
	bl	flush_work
	ldr	r3, [r4, #3992]
	ldr	r0, [r3, #8]
	bl	free_netdev
	mov	r3, #0
	str	r3, [r4, #3992]
.L8725:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_function_unbind_config, .-rndis_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_complete_in, %function
conn_gadget_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r3, #:lower16:.LANCHOR1
	mov	r5, r1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #16]
	ldr	r2, [r1, #44]
	.pad #12
	sub	sp, sp, #12
	ldr	r4, [r3, #2484]
	cmp	r2, #0
	bne	.L8741
.L8732:
	add	r6, r4, #88
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	add	r2, r4, #120
	ldr	r1, [r4, #124]
	add	r0, r5, #36
	bl	__list_add
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	add	r0, r4, #156
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	__wake_up
.L8741:
	movw	r0, #:lower16:.LANCHOR4
	mov	r3, #1
	ldr	r6, .L8742
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r2, [r0, #-222]
	str	r3, [r4, #104]
	tst	r2, #4
	bne	.L8739
.L8733:
	movw	r0, #:lower16:.LC772
	sub	r1, r6, #4
	ldr	r2, [r5, #44]
	movt	r0, #:upper16:.LC772
	bl	printk
	b	.L8732
.L8739:
	movw	r1, #:lower16:.LC233
	str	r3, [sp]
	sub	r3, r6, #4
	movt	r1, #:upper16:.LC233
	mov	r2, r3
	sub	r0, r0, #240
	bl	__dynamic_pr_debug
	b	.L8733
.L8743:
	.align	2
.L8742:
	.word	.LANCHOR5-2080
	.fnend
	.size	conn_gadget_complete_in, .-conn_gadget_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	lookup_string, %function
lookup_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r3
	strd	r6, [sp, #8]
	mov	r7, r1
	sub	r6, r0, #4
	strd	r8, [sp, #16]
	mov	r8, r2
	mov	r9, #126
	str	r10, [sp, #24]
	add	r10, r1, #2
	str	lr, [sp, #28]
	.pad #8
	sub	sp, sp, #8
.L8745:
	ldr	r3, [r6, #4]!
	cmp	r3, #0
	beq	.L8767
	ldrh	r2, [r3]
	cmp	r2, r8
	bne	.L8745
	cmp	r5, #0
	beq	.L8768
	ldr	r3, [r3, #4]
	cmp	r3, #0
	bne	.L8766
	b	.L8745
.L8769:
	adds	r3, r3, #8
	beq	.L8745
.L8766:
	ldr	r4, [r3, #4]
	cmp	r4, #0
	beq	.L8745
	ldrb	r2, [r3]	@ zero_extendqisi2
	cmp	r5, r2
	bne	.L8769
	mov	r0, r4
	bl	strlen
	cmp	r0, #126
	mov	r3, r10
	str	r9, [sp]
	movcc	r1, r0
	movcs	r1, #126
	mov	r2, #1
	mov	r0, r4
	bl	utf8s_to_utf16s
	cmp	r0, #0
	blt	.L8745
	add	r3, r0, #1
	mov	r2, #3
	lsl	r3, r3, #1
	strb	r2, [r7, #1]
	uxtb	r3, r3
	subs	r0, r3, #0
	strb	r3, [r7]
	beq	.L8745
.L8744:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L8767:
	mvn	r0, #21
	b	.L8744
.L8768:
	mov	r2, #4
	mov	r1, #3
	mov	r0, r2
	strb	r2, [r7]
	strb	r1, [r7, #1]
	ldrh	r2, [r3]
	strb	r2, [r7, #2]
	ldrh	r3, [r3]
	lsr	r3, r3, #8
	strb	r3, [r7, #3]
	b	.L8744
	.fnend
	.size	lookup_string, .-lookup_string
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_unbind, %function
acm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR1
	mov	r2, #1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	ip, #:upper16:.LANCHOR1
	mov	r4, r1
	str	r6, [sp, #8]
	add	r0, ip, #2192
	str	lr, [sp, #12]
	mov	lr, #0
	mov	r3, lr
	mov	r1, r2
	str	r2, [ip, #2200]
	add	r0, r0, #12
	str	lr, [ip, #3996]
	bl	__wake_up
	movw	r0, #:lower16:.LC773
	movt	r0, #:upper16:.LC773
	bl	printk
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r5, [r4, #152]
	ldr	r6, [r4, #156]
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r6
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, [r4]
	bl	kfree
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
	.fnend
	.size	acm_unbind, .-acm_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	halt_bulk_in_endpoint, %function
halt_bulk_in_endpoint:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR4
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	movt	ip, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	ldrh	r3, [ip, #-198]
	str	lr, [sp, #12]
	ldr	r5, [r0, #100]
	tst	r3, #4
	bne	.L8789
.L8773:
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
	cmp	r0, #0
	bne	.L8778
	b	.L8788
.L8777:
	mov	r0, #100
	bl	msleep_interruptible
	cmp	r0, #0
	mov	r1, #1
	bne	.L8780
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	cmp	r0, #0
	beq	.L8788
.L8778:
	cmn	r0, #11
	beq	.L8777
	ldr	r3, [r4, #84]
	movw	r1, #:lower16:.LC776
	mov	r2, r0
	movt	r1, #:upper16:.LC776
	add	r0, r3, #32
	bl	dev_warn
.L8788:
	mov	r0, #0
.L8772:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8780:
	mvn	r0, #3
	b	.L8772
.L8789:
	ldr	r1, [r4, #84]
	movw	r3, #:lower16:.LC774
	movw	r2, #:lower16:.LC775
	sub	r0, ip, #216
	movt	r3, #:upper16:.LC774
	movt	r2, #:upper16:.LC775
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L8773
	.fnend
	.size	halt_bulk_in_endpoint, .-halt_bulk_in_endpoint
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_unbind, %function
f_midi_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LANCHOR4
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	movt	r0, #:upper16:.LANCHOR4
	str	lr, [sp, #4]
	ldr	r2, [r1, #20]
	ldrh	r3, [r0, #-174]
	ldr	r2, [r2, #24]
	tst	r3, #4
	bne	.L8804
.L8791:
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, #186]
	tst	r3, #4
	bne	.L8805
.L8792:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	mov	r3, #0
	str	r3, [r4, #96]
	cmp	r0, r3
	beq	.L8793
	bl	snd_card_free
.L8793:
	ldr	r0, [r4, #332]
	bl	kfree
	mov	r3, #0
	ldr	r0, [r4, #16]
	str	r3, [r4, #332]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
.L8804:
	ldr	r1, [r2]
	movw	r2, #:lower16:.LC777
	sub	r0, r0, #192
	movt	r2, #:upper16:.LC777
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #20]
	ldr	r2, [r3, #24]
	b	.L8791
.L8805:
	ldr	r1, [r2]
	movw	r2, #:lower16:.LC12
	add	r0, r0, #168
	movt	r2, #:upper16:.LC12
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L8792
	.fnend
	.size	f_midi_unbind, .-f_midi_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_unbind, %function
ncm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	movt	r3, #:upper16:.LANCHOR4
	str	lr, [sp, #4]
	ldrh	r2, [r3, #-150]
	tst	r2, #4
	bne	.L8812
.L8807:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #168]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #164]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR0
	mov	r0, r4
	str	r2, [r3, #1600]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
.L8812:
	ldr	r1, [r0, #24]
	movw	r2, #:lower16:.LC778
	sub	r0, r3, #168
	movt	r2, #:upper16:.LC778
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L8807
	.fnend
	.size	ncm_unbind, .-ncm_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_unbind, %function
ecm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	movt	r3, #:upper16:.LANCHOR4
	str	lr, [sp, #4]
	ldrh	r2, [r3, #-126]
	tst	r2, #4
	bne	.L8819
.L8814:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #168]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #164]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR0
	mov	r0, r4
	str	r2, [r3, #1640]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
.L8819:
	ldr	r1, [r0, #24]
	movw	r2, #:lower16:.LC721
	sub	r0, r3, #144
	movt	r2, #:upper16:.LC721
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L8814
	.fnend
	.size	ecm_unbind, .-ecm_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_function_unbind_config, %function
rndis_qc_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC779
	movw	r0, #:lower16:init_net
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r1, #:upper16:.LC779
	movt	r0, #:upper16:init_net
	str	lr, [sp, #4]
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L8820
	.syntax divided
@ 17 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		mrs	ip, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	movw	r2, #:lower16:__per_cpu_offset
	bic	r1, r3, #8128
	movt	r2, #:upper16:__per_cpu_offset
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
	ldr	r1, [r2, r1, lsl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, ip	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	bl	unregister_netdev
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	free_netdev
.L8820:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_qc_function_unbind_config, .-rndis_qc_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_start, %function
bam_data_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #4]
	beq	.L8847
	cmp	r3, #0
	beq	.L8823
	ldr	r0, .L8851
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L8848
.L8829:
	ldr	r0, [r3, #8]
	mov	r2, #32
	ldr	r1, [r4, #40]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L8849
.L8823:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L8847:
	cmp	r3, #0
	beq	.L8823
	ldr	r0, .L8851+4
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L8850
.L8827:
	ldr	r0, [r3, #12]
	mov	r2, #32
	ldr	r1, [r4, #36]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	movwne	r0, #:lower16:.LC355
	ldrne	r1, .L8851+8
	bne	.L8846
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L8849:
	ldr	r1, .L8851+12
	movw	r0, #:lower16:.LC355
.L8846:
	ldr	r4, [sp]
	movt	r0, #:upper16:.LC355
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk
.L8848:
	ldr	r3, .L8851+12
	movw	r1, #:lower16:.LC364
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC364
	mov	r2, r3
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #4]
	b	.L8829
.L8850:
	ldr	r3, .L8851+8
	movw	r1, #:lower16:.LC364
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC364
	mov	r2, r3
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #4]
	b	.L8827
.L8852:
	.align	2
.L8851:
	.word	.LANCHOR4-3760
	.word	.LANCHOR4-3792
	.word	.LANCHOR3+2972
	.word	.LANCHOR3+3000
	.fnend
	.size	bam_data_start, .-bam_data_start
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_write, %function
adb_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r3, #3476]
	.pad #52
	sub	sp, sp, #52
	ldr	r4, [r0, #124]
	str	r1, [sp, #8]
	str	r2, [sp, #16]
	cmp	r3, #0
	beq	.L8880
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	str	r3, [sp, #4]
	ldrh	r3, [r3, #-102]
	tst	r3, #4
	bne	.L8901
.L8855:
	add	r3, r4, #112
	str	r3, [sp, #20]
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r1, r3
	.syntax divided
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r1]
	add	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L8902
	mov	fp, #57344
	ldr	r10, [sp, #16]
	movw	r3, #:lower16:autoremove_wake_function
	movt	fp, 65535
	movt	r3, #:upper16:autoremove_wake_function
	mov	r2, fp
	str	fp, [sp]
	str	r3, [sp, #12]
.L8856:
	mov	r3, sp
	and	r9, r3, r2
.L8879:
	cmp	r10, #0
	beq	.L8903
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L8876
	add	r7, r4, #120
	add	r5, r4, #88
.L8857:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #120]
	mov	r8, r0
	cmp	r3, r7
	mov	r0, r3
	sub	r6, r3, #36
	beq	.L8904
	bl	list_del
	mov	r1, r8
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L8860
.L8861:
	ldr	r2, [sp]
	mov	r3, sp
	cmp	r10, #4096
	movcc	r8, r10
	movcs	r8, #4096
	ldr	r0, [r6]
	and	r2, r3, r2
	ldr	r3, [sp, #8]
	ldr	r2, [r2, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r3, r8; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	bne	.L8869
	mov	r2, r8
	mov	r1, r3
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L8870
	str	r8, [r6, #4]
	ldr	r0, [r4, #92]
	mov	r2, #32
	mov	r1, r6
	ldr	ip, [r0, #8]
	ldr	r9, [ip, #16]
	blx	r9
	cmp	r0, #0
	blt	.L8905
	sub	r10, r10, r8
	ldr	r2, [sp]
	ldr	r3, [sp, #8]
	add	r3, r3, r8
	str	r3, [sp, #8]
	b	.L8856
.L8904:
	mov	r1, r8
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L8860:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L8906
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L8857
.L8876:
	ldr	r3, [sp, #4]
	ldrh	r3, [r3, #-78]
	tst	r3, #4
	mvneq	r8, #4
	beq	.L8858
	movw	r1, #:lower16:.LC781
	ldr	r0, .L8913
	mvn	r8, #4
	movt	r1, #:upper16:.LC781
	bl	__dynamic_pr_debug
	b	.L8858
.L8906:
	ldr	r1, [sp, #12]
	str	r3, [sp, #28]
	add	r2, sp, #40
	str	r3, [sp, #32]
	add	r8, r4, #140
	str	r3, [sp, #36]
	str	r3, [sp, #40]
	str	r3, [sp, #44]
	ldr	r3, [r9, #12]
	str	r3, [sp, #32]
	str	r1, [sp, #36]
	str	r2, [sp, #40]
	str	r2, [sp, #44]
	b	.L8868
.L8908:
	bl	schedule
.L8868:
	mov	r2, #1
	add	r1, sp, #28
	mov	r0, r8
	bl	prepare_to_wait
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #120]
	mov	fp, r0
	cmp	r3, r7
	mov	r0, r3
	sub	r6, r3, #36
	beq	.L8907
	bl	list_del
	mov	r1, fp
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	bne	.L8865
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L8866
.L8911:
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L8908
	mov	r0, r8
	mov	r8, #65024
	add	r1, sp, #28
	movt	r8, 65535
	bl	finish_wait
.L8858:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L8909
.L8878:
	ldr	r1, [sp, #20]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r3, [sp, #4]
	ldrh	r3, [r3, #-30]
	tst	r3, #4
	bne	.L8910
.L8853:
	mov	r0, r8
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8869:
	mov	r1, r8
	bl	__memzero
.L8870:
	mvn	r8, #13
.L8874:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r2, r7
	ldr	r1, [r4, #124]
	add	r0, r6, #36
	bl	__list_add
	mov	r1, r9
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L8878
.L8909:
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #128
	bl	__wake_up
	b	.L8878
.L8907:
	mov	r1, fp
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L8911
.L8866:
	add	r1, sp, #28
	mov	r0, r8
	bl	finish_wait
	b	.L8879
.L8865:
	add	r1, sp, #28
	mov	r0, r8
	bl	finish_wait
	b	.L8861
.L8901:
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LC780
	movt	r1, #:upper16:.LC780
	sub	r0, r3, #120
	bl	__dynamic_pr_debug
	b	.L8855
.L8910:
	movw	r1, #:lower16:.LC783
	mov	r2, r8
	ldr	r0, .L8913+4
	movt	r1, #:upper16:.LC783
	bl	__dynamic_pr_debug
	b	.L8853
.L8903:
	ldr	r8, [sp, #16]
	b	.L8858
.L8902:
	ldr	r1, [sp, #20]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r8, #15
	b	.L8853
.L8905:
	ldr	r3, [sp, #4]
	ldrh	r3, [r3, #-54]
	tst	r3, #4
	bne	.L8912
.L8873:
	mov	r3, #1
	mvn	r8, #4
	str	r3, [r4, #104]
	b	.L8874
.L8880:
	mvn	r8, #18
	b	.L8853
.L8912:
	movw	r1, #:lower16:.LC782
	mov	r2, r0
	ldr	r0, .L8913+8
	movt	r1, #:upper16:.LC782
	bl	__dynamic_pr_debug
	b	.L8873
.L8914:
	.align	2
.L8913:
	.word	.LANCHOR4-96
	.word	.LANCHOR4-48
	.word	.LANCHOR4-72
	.fnend
	.size	adb_write, .-adb_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_unbind, %function
conn_gadget_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC784
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	movt	r0, #:upper16:.LC784
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	bl	printk
	movw	r0, #:lower16:.LANCHOR4
	ldr	r1, [r4, #100]
	mov	ip, #0
	movt	r0, #:upper16:.LANCHOR4
	mov	r2, #1
	ldrh	r3, [r0, #-6]
	str	ip, [r4, #100]
	str	r2, [r4, #104]
	str	r1, [r4, #212]
	tst	r3, #4
	bne	.L8932
.L8916:
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #200
	bl	__wake_up
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #144
	bl	__wake_up
	add	r9, r4, #128
	add	r5, r4, #88
	b	.L8917
.L8918:
	bl	list_del
	mov	r1, r8
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L8921
	ldr	r8, [r4, #96]
	ldr	r0, [r6, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L8917:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #128]
	mov	r8, r0
	cmp	r9, r6
	mov	r0, r6
	sub	r7, r6, #36
	bne	.L8918
	mov	r1, r8
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L8921:
	add	r9, r4, #136
	b	.L8919
.L8922:
	bl	list_del
	mov	r1, r8
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L8925
	ldr	r8, [r4, #96]
	ldr	r0, [r6, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L8919:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #136]
	mov	r8, r0
	cmp	r6, r9
	mov	r0, r6
	sub	r7, r6, #36
	bne	.L8922
	mov	r1, r8
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L8925:
	add	r9, r4, #120
	b	.L8923
.L8926:
	bl	list_del
	mov	r1, r8
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L8933
	ldr	r8, [r4, #92]
	ldr	r0, [r6, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L8923:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #120]
	mov	r8, r0
	cmp	r6, r9
	mov	r0, r6
	sub	r7, r6, #36
	bne	.L8926
	mov	r1, r8
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	_raw_spin_unlock_irqrestore
.L8933:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L8932:
	ldr	r3, .L8934
	movw	r1, #:lower16:.LC233
	str	r2, [sp]
	movt	r1, #:upper16:.LC233
	sub	r0, r0, #24
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L8916
.L8935:
	.align	2
.L8934:
	.word	.LANCHOR5-2060
	.fnend
	.size	conn_gadget_function_unbind, .-conn_gadget_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_unbind, %function
rndis_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LANCHOR4
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r5, #:lower16:__stack_chk_guard
	movt	r0, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	movt	r5, #:upper16:__stack_chk_guard
	str	lr, [sp, #12]
	ldrh	r2, [r0, #18]
	.pad #24
	sub	sp, sp, #24
	ldr	r3, [r5]
	mov	r4, r1
	ldr	r6, [r1, #164]
	tst	r2, #4
	str	r3, [sp, #20]
	bne	.L8950
.L8937:
	cmp	r6, #0
	movwgt	r3, #:lower16:.LANCHOR1
	movtgt	r3, #:upper16:.LANCHOR1
	bgt	.L8938
	rsb	r6, r6, r6, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r6, r3, r6, lsl #2
	mov	r2, #0
	strb	r2, [r6, #3681]
.L8938:
	ldrb	r2, [r3, #3740]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L8939
	mov	r6, #0
	movw	r1, #:lower16:.LC601
	movt	r1, #:upper16:.LC601
	mov	r2, r6
	mov	r0, sp
	strb	r6, [r3, #3740]
	bl	sprintf
	mov	r0, sp
	mov	r1, r6
	bl	remove_proc_entry
.L8939:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #172]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r4
	bl	kfree
	ldr	r2, [sp, #20]
	ldr	r3, [r5]
	cmp	r2, r3
	bne	.L8951
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8950:
	movw	r1, #:lower16:.LC267
	ldr	r2, .L8952
	movt	r1, #:upper16:.LC267
	bl	__dynamic_pr_debug
	b	.L8937
.L8951:
	bl	__stack_chk_fail
.L8953:
	.align	2
.L8952:
	.word	.LANCHOR5-2032
	.fnend
	.size	rndis_unbind, .-rndis_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_usb_unbind, %function
android_usb_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r2, .L8979
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	str	r8, [sp, #16]
	ldr	r3, [r7, #3308]
	str	lr, [sp, #20]
	cmp	r3, r2
	sub	r4, r3, #520
	bne	.L8957
	b	.L8955
.L8977:
	ldr	r3, [r4, #520]
	cmp	r3, r2
	sub	r4, r3, #520
	beq	.L8955
.L8957:
	ldr	r3, [r3, #-512]
	cmp	r0, r3
	bne	.L8977
.L8955:
	movw	r0, #:lower16:.LC785
	ldr	r1, .L8979+4
	movt	r0, #:upper16:.LC785
	bl	printk
	mov	r3, #0
	mov	r2, #48
	add	r0, r4, #180
	strb	r2, [r7, #2220]
	strb	r3, [r7, #2508]
	strb	r3, [r7, #2764]
	bl	cancel_work_sync
	ldr	r6, [r4, #4]
	sub	r6, r6, #4
.L8958:
	ldr	r4, [r6, #4]!
	cmp	r4, #0
	beq	.L8978
.L8962:
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L8958
	ldr	r1, [r3, #288]
	ldr	r0, [r7, #3644]
	bl	device_destroy
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #28]
	cmp	r3, #0
	beq	.L8960
	mov	r0, r4
	blx	r3
.L8960:
	ldr	r5, [r4, #16]
	cmp	r5, #0
	beq	.L8958
	ldr	r1, [r5]
	add	r5, r5, #4
	cmp	r1, #0
	beq	.L8958
.L8961:
	ldr	r0, [r4, #8]
	bl	device_remove_file
	ldr	r1, [r5], #4
	cmp	r1, #0
	bne	.L8961
	ldr	r4, [r6, #4]!
	cmp	r4, #0
	bne	.L8962
.L8978:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8980:
	.align	2
.L8979:
	.word	.LANCHOR1+3308
	.word	.LANCHOR5-2012
	.fnend
	.size	android_usb_unbind, .-android_usb_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_ioctl, %function
conn_gadget_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r3, #29441
	ubfx	r4, r1, #8, #8
	movw	ip, #29442
	strd	r6, [sp, #8]
	movt	r3, 32772
	str	lr, [sp, #16]
	mov	lr, #29440
	.pad #44
	sub	sp, sp, #44
	movt	ip, 32772
	mov	r0, #0
	movt	lr, 32772
	cmp	r4, #115
	str	lr, [sp, #4]
	str	r3, [sp, #8]
	str	ip, [sp, #12]
	str	r0, [sp, #16]
	bne	.L9022
	mov	r5, r2
	uxtb	r2, r1
	cmp	r2, #2
	bhi	.L9023
	ubfx	r2, r1, #16, #14
	cmp	r2, #0
	beq	.L9024
	cmp	r1, #0
	bge	.L9025
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r4, [r2, #2484]
	cmp	r4, #0
	beq	.L9026
	cmp	r1, r3
	beq	.L8988
	cmp	r1, ip
	beq	.L8989
	cmp	r1, lr
	movne	r2, r0
	beq	.L9027
.L8981:
	mov	r0, r2
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L8989:
	ldr	r2, [r4, #100]
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	cmp	r2, #0
	movne	r2, #1
	moveq	r2, #2
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r5, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	str	r2, [sp, #20]
	movne	r2, #4
	beq	.L9028
.L9002:
	ldr	r4, .L9032
	movw	r0, #:lower16:.LC792
	movt	r0, #:upper16:.LC792
	sub	r1, r4, #4
	bl	printk
	movw	r0, #:lower16:.LC794
	mvn	r2, #13
	sub	r1, r4, #24
	movt	r0, #:upper16:.LC794
	bl	printk
	mvn	r2, #13
	b	.L8981
.L9027:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r5, #16; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	movne	r2, #16
	beq	.L9029
.L8991:
	movw	r0, #:lower16:.LC790
	ldr	r1, .L9032+4
	movt	r0, #:upper16:.LC790
	bl	printk
	mvn	r2, #13
	b	.L8981
.L8988:
	ldr	r2, [r4, #100]
	ldr	r3, [r4, #212]
	cmp	r3, r2
	beq	.L8992
.L9021:
	cmp	r2, #0
	mov	r3, sp
	str	r2, [r4, #212]
	bic	r3, r3, #8128
	moveq	r2, #2
	movne	r2, #1
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	str	r2, [sp, #20]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r5, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	movne	r2, #4
	beq	.L9030
.L8999:
	ldr	r4, .L9032
	movw	r0, #:lower16:.LC792
	movt	r0, #:upper16:.LC792
	sub	r1, r4, #4
	bl	printk
	movw	r0, #:lower16:.LC793
	mvn	r2, #13
	sub	r1, r4, #24
	movt	r0, #:upper16:.LC793
	bl	printk
	mvn	r2, #13
	b	.L8981
.L8992:
	ldr	r3, [r4, #216]
	cmp	r3, #0
	bne	.L8994
	mov	r2, sp
	str	r3, [sp, #20]
	add	r1, sp, #32
	bic	r6, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r6, r6, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r6, #12]
	add	r7, r4, #200
	str	r0, [sp, #24]
	str	r2, [sp, #28]
	str	r1, [sp, #32]
	str	r1, [sp, #36]
	b	.L8997
.L9031:
	bl	schedule
.L8997:
	mov	r2, #1
	add	r1, sp, #20
	mov	r0, r7
	bl	prepare_to_wait
	ldr	r3, [r4, #100]
	ldr	r2, [r4, #212]
	cmp	r2, r3
	bne	.L8995
	ldr	r3, [r4, #216]
	cmp	r3, #0
	bne	.L8996
	ldr	r3, [r6, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L9031
.L8995:
	add	r1, sp, #20
	mov	r0, r7
	bl	finish_wait
	ldr	r2, [r4, #100]
	b	.L9021
.L9028:
	mov	r2, #4
	mov	r0, r5
	add	r1, sp, #20
	bl	__copy_to_user
	subs	r2, r0, #0
	beq	.L8981
	b	.L9002
.L9029:
	mov	r2, #16
	mov	r0, r5
	add	r1, sp, #4
	bl	__copy_to_user
	subs	r2, r0, #0
	beq	.L8981
	b	.L8991
.L9030:
	mov	r2, #4
	mov	r0, r5
	add	r1, sp, #20
	bl	__copy_to_user
	subs	r2, r0, #0
	beq	.L8981
	b	.L8999
.L8996:
	add	r1, sp, #20
	mov	r0, r7
	bl	finish_wait
	ldr	r3, [r4, #100]
	str	r3, [r4, #212]
.L8994:
	movw	r0, #:lower16:.LC791
	ldr	r1, .L9032+4
	movt	r0, #:upper16:.LC791
	bl	printk
	mvn	r2, #3
	b	.L8981
.L9022:
	movw	r0, #:lower16:.LC786
	mov	r2, r4
	ldr	r1, .L9032+4
	movt	r0, #:upper16:.LC786
	bl	printk
	mvn	r2, #21
	b	.L8981
.L9026:
	movw	r0, #:lower16:.LC425
	ldr	r1, .L9032+4
	movt	r0, #:upper16:.LC425
	bl	printk
	mvn	r2, #18
	b	.L8981
.L9025:
	movw	r0, #:lower16:.LC789
	ldr	r1, .L9032+4
	movt	r0, #:upper16:.LC789
	bl	printk
	mvn	r2, #21
	b	.L8981
.L9024:
	movw	r0, #:lower16:.LC788
	ldr	r1, .L9032+4
	movt	r0, #:upper16:.LC788
	bl	printk
	mvn	r2, #21
	b	.L8981
.L9023:
	movw	r0, #:lower16:.LC787
	ldr	r1, .L9032+4
	movt	r0, #:upper16:.LC787
	bl	printk
	mvn	r2, #24
	b	.L8981
.L9033:
	.align	2
.L9032:
	.word	.LANCHOR5-1968
	.word	.LANCHOR5-1992
	.fnend
	.size	conn_gadget_ioctl, .-conn_gadget_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rx_fill, %function
rx_fill:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	add	r3, r0, #28
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, r3
	strd	r8, [sp, #16]
	add	r9, r0, #16
	strd	r10, [sp, #24]
	mov	r0, r9
	mov	r10, r1
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	str	r3, [sp, #16]
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r6, #28]
	mov	r4, r0
	cmp	r7, r5
	beq	.L9035
	movw	r3, #:lower16:.LANCHOR0
	mov	r8, #0
	movt	r3, #:upper16:.LANCHOR0
	mov	fp, r10
	str	r3, [sp, #20]
	b	.L9052
.L9085:
	ldr	r3, [r3, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L9059
	ldr	r3, [sp, #20]
	ldr	r3, [r3, #500]
	lsl	r3, r3, #1
	cmp	r3, r8
	blt	.L9035
.L9086:
	mov	r0, r5
	sub	r10, r5, #36
	bl	__list_del_entry
	mov	r1, r4
	mov	r0, r9
	str	r5, [r5]
	str	r5, [r5, #4]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L9081
	ldr	r7, [r3, #92]
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L9080
	ldmib	r6, {r2, ip}
	ldrh	r3, [r7, #20]
	ldr	r1, [r6, #72]
	ldr	r0, [r2, #100]
	ldr	r4, [ip, #356]
	cmp	r1, #0
	add	r4, r4, r0
	add	r4, r4, #33
	add	r4, r4, r3
	udiv	r0, r4, r3
	mls	r3, r3, r0, r4
	sub	r4, r4, r3
	ldrb	r3, [r2, #104]	@ zero_extendqisi2
	mulne	r4, r1, r4
	cmp	r3, #0
	beq	.L9041
	ldr	r3, [r2, #108]
	cmp	r4, r3
	movcc	r4, r3
.L9041:
	movw	r0, #:lower16:.LANCHOR4
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, #42]
	tst	r3, #4
	bne	.L9082
.L9042:
	mvn	r3, #0
	mov	r2, #0
	mov	r1, fp
	add	r0, r4, #2
	bl	__alloc_skb
	subs	r3, r0, #0
	beq	.L9043
	ldr	lr, [r3, #160]
	mov	r1, r10
	mov	r0, r7
	ldr	ip, [r3, #172]
	mov	r2, fp
	str	r3, [sp, #12]
	add	lr, lr, #2
	add	ip, ip, #2
	str	lr, [r3, #160]
	str	ip, [r3, #172]
	str	ip, [r5, #-36]
	str	r4, [r5, #-32]
	str	r3, [r5, #-4]
	ldr	ip, [r7, #8]
	ldr	r4, [ip, #16]
	blx	r4
	cmn	r0, #12
	mov	r4, r0
	ldr	r3, [sp, #12]
	beq	.L9083
	cmp	r0, #0
	bne	.L9084
.L9048:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #16]
	mov	r4, r0
	ldr	r5, [r6, #28]
	cmp	r3, r5
	beq	.L9035
.L9052:
	ldr	r3, [r6, #12]
	add	r8, r8, #1
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bhi	.L9085
.L9059:
	mov	r3, #2
	cmp	r3, r8
	bge	.L9086
.L9035:
	mov	r1, r4
	mov	r0, r9
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L9083:
	add	r4, r6, #120
	mov	r0, #0
	mov	r1, r4
	mov	fp, r3
	bl	_test_and_set_bit
	cmp	r0, #0
	mov	r7, r4
	bne	.L9054
	movw	r1, #:lower16:system_wq
	add	r2, r6, #88
	movt	r1, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r1]
	bl	queue_work_on
	cmp	r0, #0
	bne	.L9054
.L9057:
	movw	r0, #:lower16:.LC678
	mov	r2, #0
	ldr	r1, [r6, #8]
	movt	r0, #:upper16:.LC678
	bl	printk
	cmp	fp, #0
	bne	.L9054
.L9038:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r4, r0
	ldr	r2, [r6, #28]
	mov	r0, r5
	ldr	r1, [sp, #16]
	bl	__list_add
	mov	r1, r4
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r1, r7
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	beq	.L9087
.L9034:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9081:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	add	r7, r6, #120
	b	.L9038
.L9084:
	mov	r0, r3
	bl	dev_kfree_skb_any
	cmp	r4, #0
	bge	.L9048
.L9080:
	add	r4, r6, #120
	b	.L9047
.L9054:
	mov	r0, fp
	bl	dev_kfree_skb_any
.L9047:
	mov	r7, r4
	b	.L9038
.L9082:
	ldr	r3, .L9088
	movw	r1, #:lower16:.LC795
	str	r4, [sp]
	movt	r1, #:upper16:.LC795
	add	r0, r0, #24
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L9042
.L9043:
	add	r4, r6, #120
	mov	fp, r3
	mov	r1, r4
	mov	r7, r4
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L9038
	movw	r1, #:lower16:system_wq
	add	r2, r6, #88
	movt	r1, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r1]
	bl	queue_work_on
	cmp	r0, #0
	bne	.L9038
	b	.L9057
.L9087:
	movw	r3, #:lower16:system_wq
	add	r2, r6, #88
	movt	r3, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r3]
	bl	queue_work_on
	subs	r2, r0, #0
	bne	.L9034
	ldr	r1, [r6, #8]
	movw	r0, #:lower16:.LC678
	movt	r0, #:upper16:.LC678
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L9089:
	.align	2
.L9088:
	.word	.LANCHOR5-1932
	.fnend
	.size	rx_fill, .-rx_fill
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_work, %function
eth_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r0, #0
	add	r1, r4, #32
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L9090
	ldr	r3, [r4, #-80]
	ldr	r3, [r3, #164]
	tst	r3, #1
	bne	.L9099
.L9090:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9099:
	sub	r5, r4, #88
	ldr	r6, [sp, #8]
	mov	r1, #208
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	rx_fill
	.fnend
	.size	eth_work, .-eth_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	process_rx_w, %function
process_rx_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-100]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	ldr	r7, .L9127
	mov	r6, #0
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LC796
	sub	r9, r0, #52
	strd	r10, [sp, #24]
	movw	r10, #:lower16:.LC799
	movt	r8, #:upper16:.LC796
	str	lr, [sp, #32]
	movt	r10, #:upper16:.LC799
	.pad #4
	sub	sp, sp, #4
.L9103:
	mov	r0, r9
	bl	skb_dequeue
	subs	r5, r0, #0
	beq	.L9125
.L9112:
	cmp	r6, #0
	blt	.L9104
	ldr	fp, [r5, #80]
	cmp	fp, #13
	bls	.L9105
	movw	r3, #1514
	cmp	fp, r3
	bls	.L9107
	ldr	r3, [r4, #-100]
	mov	r1, r8
	ldr	r0, [r3]
	bl	strcmp
	cmp	r0, #0
	bne	.L9109
	ldr	r3, [r4, #-96]
	ldr	r3, [r3, #356]
	add	r3, r3, #14
	cmp	fp, r3
	bls	.L9110
.L9108:
	movw	r0, #:lower16:.LC797
	mov	r2, fp
	movt	r0, #:upper16:.LC797
	mov	r1, r7
	bl	printk
.L9109:
	ldr	r2, [r4, #-96]
	mov	r1, r7
	mov	r0, r10
	ldr	r3, [r2, #248]
	add	r3, r3, #1
	str	r3, [r2, #248]
	ldr	r2, [r4, #-96]
	ldr	r3, [r2, #272]
	add	r3, r3, #1
	str	r3, [r2, #272]
	ldr	r2, [r5, #80]
	bl	printk
	mov	r0, r5
	bl	dev_kfree_skb_any
	mov	r0, r9
	bl	skb_dequeue
	subs	r5, r0, #0
	bne	.L9112
.L9125:
	ldr	r3, [r4, #-96]
	ldr	r3, [r3, #164]
	tst	r3, #1
	bne	.L9126
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9110:
	movw	r0, #:lower16:.LC798
	mov	r2, fp
	movt	r0, #:upper16:.LC798
	mov	r1, r7
	bl	printk
.L9107:
	ldr	r1, [r4, #-96]
	mov	r0, r5
	bl	eth_type_trans
	strh	r0, [r5, #102]	@ movhi
	ldr	r2, [r4, #-96]
	mov	r0, r5
	ldr	r3, [r2, #232]
	add	r3, r3, #1
	str	r3, [r2, #232]
	ldr	r2, [r4, #-96]
	ldr	r1, [r5, #80]
	ldr	r3, [r2, #240]
	add	r3, r3, r1
	str	r3, [r2, #240]
	bl	netif_rx_ni
	mov	r6, r0
	b	.L9103
.L9104:
	ldr	r3, [r4, #-100]
	mov	r1, r8
	ldr	r0, [r3]
	bl	strcmp
	cmp	r0, #0
	ldreq	fp, [r5, #80]
	bne	.L9109
	b	.L9108
.L9105:
	ldr	r3, [r4, #-100]
	mov	r1, r8
	ldr	r0, [r3]
	bl	strcmp
	cmp	r0, #0
	beq	.L9108
	b	.L9109
.L9126:
	sub	r0, r4, #104
	mov	r1, #208
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	rx_fill
.L9128:
	.align	2
.L9127:
	.word	.LANCHOR5-1920
	.fnend
	.size	process_rx_w, .-process_rx_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_open, %function
eth_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	add	r6, r0, #1152
	str	lr, [sp, #12]
	ldr	r3, [r0, #1160]
	ldr	r5, [r3, #164]
	ubfx	r5, r5, #2, #1
	cmp	r5, #0
	beq	.L9130
.L9131:
	mov	r0, r6
	bl	_raw_spin_lock_irq
	ldr	r0, [r4, #1156]
	cmp	r0, #0
	beq	.L9133
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L9133
	blx	r3
.L9133:
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9130:
	mov	r1, #208
	mov	r0, r6
	bl	rx_fill
	ldr	r3, [r4, #1160]
	mov	r0, r5
	str	r5, [r4, #1188]
	ldr	r5, [r3, #576]
	add	r1, r5, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L9131
	ldr	r0, [r5, #4]
	bl	__netif_schedule
	b	.L9131
	.fnend
	.size	eth_open, .-eth_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	terminal_version_store, %function
terminal_version_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r1, #:lower16:.LC800
	mov	r5, r2
	str	r6, [sp, #8]
	mov	r0, r2
	movt	r1, #:upper16:.LC800
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	mov	r6, r3
	add	r2, sp, #4
	movw	r4, #:lower16:.LANCHOR1
	bl	sscanf
	ldr	ip, [sp, #4]
	movw	r3, #3660
	movt	r4, #:upper16:.LANCHOR1
	movw	r0, #:lower16:.LC81
	mov	r2, r5
	ldr	r1, .L9153
	movt	r0, #:upper16:.LC81
	strh	ip, [r4, r3]	@ movhi
	bl	printk
	ldr	r5, [sp, #4]
	cmp	r5, #0
	bne	.L9151
	ldrb	r3, [r4, #3636]	@ zero_extendqisi2
	cmp	r3, #0
	strbeq	r3, [r4, #3636]
	bne	.L9152
.L9149:
	mov	r3, #0
	movw	r1, #3660
	movw	r2, #3662
	strh	r3, [r4, r1]	@ movhi
	strh	r3, [r4, r2]	@ movhi
.L9147:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9151:
	ldrb	r2, [r4, #3636]	@ zero_extendqisi2
	cmp	r2, #0
	movne	r3, #1
	strbne	r3, [r4, #3636]
	bne	.L9147
	movw	r0, #:lower16:.LC801
	ldr	r1, .L9153+4
	mov	r3, #1
	movt	r0, #:upper16:.LC801
	bl	printk
	movw	r3, #:lower16:system_wq
	mov	ip, #1
	ldr	r2, [r4, #3612]
	movt	r3, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r3]
	strb	ip, [r4, #3636]
	bl	queue_work_on
	b	.L9147
.L9152:
	movw	r0, #:lower16:.LC801
	mov	r3, r5
	ldr	r1, .L9153+4
	mov	r2, #1
	movt	r0, #:upper16:.LC801
	bl	printk
	movw	r3, #:lower16:system_wq
	ldr	r2, [r4, #3612]
	mov	r0, #4
	movt	r3, #:upper16:system_wq
	strb	r5, [r4, #3636]
	ldr	r1, [r3]
	bl	queue_work_on
	b	.L9149
.L9154:
	.align	2
.L9153:
	.word	.LANCHOR5-1904
	.word	.LANCHOR5-1880
	.fnend
	.size	terminal_version_store, .-terminal_version_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_unbind, %function
rndis_qc_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR4
	movw	r7, #:lower16:__stack_chk_guard
	movt	r6, #:upper16:.LANCHOR4
	str	r8, [sp, #16]
	movt	r7, #:upper16:__stack_chk_guard
	str	lr, [sp, #20]
	ldrh	r2, [r6, #66]
	.pad #24
	sub	sp, sp, #24
	ldr	r3, [r7]
	mov	r8, r0
	tst	r2, #4
	str	r3, [sp, #20]
	bne	.L9180
.L9156:
	ldr	r0, .L9185
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L9181
.L9157:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3752]
	bl	kfree
	ldr	r0, [r4, #3744]
	mov	r3, #0
	str	r3, [r4, #3752]
	cmp	r0, r3
	beq	.L9158
	bl	destroy_workqueue
.L9158:
	ldrh	r3, [r6, #18]
	mov	r2, #0
	ldr	r6, [r5, #144]
	str	r2, [r4, #3744]
	tst	r3, #4
	bne	.L9182
.L9159:
	cmp	r6, #0
	bgt	.L9160
	rsb	r6, r6, r6, lsl #4
	mov	r3, #0
	add	r6, r4, r6, lsl #2
	strb	r3, [r6, #3681]
.L9160:
	ldrb	r3, [r4, #3740]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L9183
.L9161:
	ldr	r3, [r8, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L9162
	ldr	r0, [r5, #8]
	bl	kfree
.L9162:
	ldr	r0, [r5, #16]
	bl	kfree
	ldr	r3, [r5, #160]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r5, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, .L9185+4
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r0, r5
	bl	kfree
	mov	r3, #0
	mov	r1, r6
	ldr	r0, .L9185+4
	str	r3, [r4, #2496]
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [sp, #20]
	ldr	r3, [r7]
	cmp	r2, r3
	bne	.L9184
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9183:
	mov	r6, #0
	movw	r1, #:lower16:.LC601
	mov	r2, r6
	movt	r1, #:upper16:.LC601
	mov	r0, sp
	strb	r6, [r4, #3740]
	bl	sprintf
	mov	r0, sp
	mov	r1, r6
	bl	remove_proc_entry
	b	.L9161
.L9181:
	movw	r1, #:lower16:.LC722
	ldr	r2, .L9185+8
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC722
	bl	__dynamic_pr_debug
	b	.L9157
.L9182:
	movw	r1, #:lower16:.LC267
	movw	r0, #:lower16:.LANCHOR4
	ldr	r2, .L9185+12
	movt	r1, #:upper16:.LC267
	movt	r0, #:upper16:.LANCHOR4
	bl	__dynamic_pr_debug
	b	.L9159
.L9180:
	movw	r1, #:lower16:.LC802
	ldr	r2, .L9185+16
	add	r0, r6, #48
	movt	r1, #:upper16:.LC802
	bl	__dynamic_pr_debug
	b	.L9156
.L9184:
	bl	__stack_chk_fail
.L9186:
	.align	2
.L9185:
	.word	.LANCHOR4-820
	.word	.LANCHOR1+2492
	.word	.LANCHOR5-2376
	.word	.LANCHOR5-2032
	.word	.LANCHOR5-1864
	.fnend
	.size	rndis_qc_unbind, .-rndis_qc_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_store_file, %function
fsg_store_file:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	mov	r5, r3
	strd	r6, [sp, #8]
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	ldrb	r3, [r4, #-24]	@ zero_extendqisi2
	mov	r6, r0
	tst	r3, #16
	beq	.L9188
	ldr	r3, [r4, #-48]
	cmp	r3, #0
	beq	.L9188
	movw	r0, #:lower16:.LANCHOR4
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, #90]
	tst	r3, #4
	mvneq	r7, #15
	bne	.L9213
.L9187:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9188:
	cmp	r5, #0
	beq	.L9190
	sub	r3, r5, #1
	ldrb	r2, [r7, r3]	@ zero_extendqisi2
	cmp	r2, #10
	beq	.L9214
	mov	r0, r6
	bl	down_write
	ldr	r0, [r4, #-48]
	cmp	r0, #0
	beq	.L9193
.L9192:
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r8, [r3, #114]
	ubfx	r8, r8, #2, #1
	cmp	r8, #0
	bne	.L9199
	bl	fput
	mov	r3, #14848
	str	r8, [r4, #-48]
	movt	r3, 2
	str	r3, [r4, #-12]
.L9193:
	ldrb	r3, [r7]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L9215
.L9195:
	mov	r0, r6
	bl	up_write
.L9194:
	mov	r7, r5
	b	.L9187
.L9190:
	mov	r0, r6
	bl	down_write
	ldr	r0, [r4, #-48]
	cmp	r0, #0
	beq	.L9195
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, #114]
	tst	r3, #4
	bne	.L9199
	bl	fput
	mov	r3, #14848
	str	r5, [r4, #-48]
	movt	r3, 2
	str	r3, [r4, #-12]
	b	.L9195
.L9215:
	mov	r1, r7
	sub	r0, r4, #48
	bl	fsg_lun_open
	subs	r7, r0, #0
	bne	.L9196
	mov	r3, #10240
	mov	r0, r6
	movt	r3, 6
	str	r3, [r4, #-12]
	bl	up_write
	b	.L9194
.L9214:
	mov	r2, #0
	mov	r0, r6
	strb	r2, [r7, r3]
	bl	down_write
	ldr	r0, [r4, #-48]
	cmp	r0, #0
	bne	.L9192
	ldrb	r3, [r7]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L9195
	b	.L9215
.L9199:
	movw	r2, #:lower16:.LC804
	mov	r1, r4
	ldr	r0, .L9216
	movt	r2, #:upper16:.LC804
	bl	__dynamic_dev_dbg
	ldr	r0, [r4, #-48]
	bl	fput
	mov	r3, #14848
	mov	r2, #0
	movt	r3, 2
	cmp	r5, #0
	str	r2, [r4, #-48]
	str	r3, [r4, #-12]
	bne	.L9193
	b	.L9195
.L9196:
	mov	r0, r6
	bl	up_write
	cmp	r7, #0
	blt	.L9187
	b	.L9194
.L9213:
	movw	r2, #:lower16:.LC803
	mov	r1, r4
	add	r0, r0, #72
	movt	r2, #:upper16:.LC803
	bl	__dynamic_dev_dbg
	mvn	r7, #15
	b	.L9187
.L9217:
	.align	2
.L9216:
	.word	.LANCHOR4+96
	.fnend
	.size	fsg_store_file, .-fsg_store_file
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_function_unbind, %function
acc_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	add	r7, r1, #88
	strd	r8, [sp, #16]
	add	r9, r1, #1648
	str	r10, [sp, #24]
	add	r9, r9, #8
	str	lr, [sp, #28]
	b	.L9219
.L9220:
	bl	list_del
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L9221
	ldr	r8, [r4, #92]
	ldr	r0, [r5, #-36]
	bl	kfree
	mov	r1, r6
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L9219:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #1656]
	mov	r8, r0
	cmp	r9, r5
	mov	r0, r5
	sub	r6, r5, #36
	bne	.L9220
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L9221:
	ldr	r5, [r4, #1688]
	cmp	r5, #0
	beq	.L9223
	ldr	r6, [r4, #96]
	ldr	r0, [r5]
	bl	kfree
	mov	r1, r5
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L9223:
	ldr	r5, [r4, #1692]
	cmp	r5, #0
	beq	.L9224
	ldr	r6, [r4, #96]
	ldr	r0, [r5]
	bl	kfree
	mov	r1, r5
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L9224:
	ldr	r0, .L9238
	add	r9, r4, #1760
	bl	hid_unregister_driver
	mov	r0, r7
	add	r9, r9, #8
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #1768]
	mov	r8, r0
	cmp	r6, r9
	ldr	r5, [r6]
	beq	.L9225
	add	r10, r4, #1776
	add	r10, r10, #8
	b	.L9226
.L9229:
	mov	r5, r3
.L9226:
	mov	r0, r6
	bl	list_del
	mov	r0, r6
	mov	r1, r10
	ldr	r2, [r4, #1784]
	bl	__list_add
	cmp	r9, r5
	mov	r6, r5
	ldr	r3, [r5]
	bne	.L9229
.L9225:
	mov	r9, r4
	ldr	r6, [r9, #1776]!
	cmp	r6, r9
	ldr	r5, [r6]
	beq	.L9227
	add	r10, r9, #8
	b	.L9228
.L9230:
	mov	r5, r3
.L9228:
	mov	r0, r6
	bl	list_del
	mov	r0, r6
	mov	r1, r10
	ldr	r2, [r4, #1784]
	bl	__list_add
	cmp	r5, r9
	mov	r6, r5
	ldr	r3, [r5]
	bne	.L9230
.L9227:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:system_wq
	add	r2, r4, #1744
	ldrd	r4, [sp]
	movt	r3, #:upper16:system_wq
	ldrd	r6, [sp, #8]
	add	r2, r2, #8
	ldrd	r8, [sp, #16]
	mov	r0, #4
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, [r3]
	b	queue_work_on
.L9239:
	.align	2
.L9238:
	.word	.LANCHOR0+1668
	.fnend
	.size	acc_function_unbind, .-acc_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_free_buffers.part.50, %function
ghsuart_data_free_buffers.part.50:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #72
	mov	r0, r6
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r8, [r4, #8]
	mov	r7, r0
	cmp	r8, #0
	beq	.L9249
	ldr	r5, [r4, #48]
	add	r9, r4, #48
	cmp	r9, r5
	beq	.L9242
.L9243:
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del
	ldr	r3, [r8, #8]
	mov	r1, r5
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #48]
	cmp	r9, r5
	bne	.L9243
.L9242:
	ldr	r3, [r4, #56]
	add	r5, r4, #56
	cmp	r5, r3
	beq	.L9244
	mov	r8, #0
	b	.L9245
.L9262:
	ldr	r2, [r4, #64]
	sub	r2, r2, #1
	str	r2, [r4, #64]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #56]
	cmp	r3, r5
	beq	.L9244
.L9245:
	subs	r0, r3, #0
	bne	.L9262
.L9244:
	mov	r1, r7
	mov	r0, r6
	add	r6, r4, #104
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r8, [r4, #12]
	mov	r7, r0
	cmp	r8, #0
	beq	.L9249
	ldr	r5, [r4, #80]
	add	r9, r4, #80
	cmp	r9, r5
	beq	.L9247
.L9248:
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del
	ldr	r3, [r8, #8]
	mov	r1, r5
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #80]
	cmp	r9, r5
	bne	.L9248
.L9247:
	ldr	r3, [r4, #88]
	add	r5, r4, #88
	cmp	r3, r5
	beq	.L9249
	mov	r8, #0
	b	.L9250
.L9263:
	ldr	r2, [r4, #96]
	sub	r2, r2, #1
	str	r2, [r4, #96]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #88]
	cmp	r3, r5
	beq	.L9249
.L9250:
	subs	r0, r3, #0
	bne	.L9263
.L9249:
	mov	r1, r7
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	ghsuart_data_free_buffers.part.50, .-ghsuart_data_free_buffers.part.50
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_remove, %function
ghsuart_data_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	ldr	r5, .L9301
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #138]
	tst	r2, #4
	bne	.L9297
.L9265:
	movw	r3, #:lower16:.LANCHOR1
	ldr	r2, [r4, #4]
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #2028]
	cmp	r2, r1
	bcs	.L9299
	mov	r1, #84
	mla	r2, r1, r2, r3
	ldr	r4, [r2, #2032]
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L9268
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L9268
	blx	r3
.L9268:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L9269
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L9269
	blx	r3
.L9269:
	cmp	r4, #0
	beq	.L9270
	mov	r0, r4
	bl	ghsuart_data_free_buffers.part.50
.L9270:
	ldr	r6, [r4, #16]
	cmp	r6, #0
	beq	.L9300
.L9272:
	movw	r0, #:lower16:.LC805
	ldr	r2, [r4, #180]
	sub	r1, r5, #8
	add	r4, r4, #188
	movt	r0, #:upper16:.LC805
	bl	printk
	mov	r1, r4
	mov	r0, #1
	bl	_clear_bit
	mov	r1, r4
	mov	r0, #0
	bl	_clear_bit
	mov	r0, #2
	mov	r1, r4
	bl	_clear_bit
	mov	r0, #0
.L9264:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9300:
	add	r8, r4, #20
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r4, #24]
	mov	r1, r0
	str	r6, [r4, #200]
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L9272
	ldr	r3, [r7, #120]
	cmp	r3, #0
	beq	.L9272
	mov	r0, r7
	blx	r3
	b	.L9272
.L9297:
	movw	r1, #:lower16:.LC177
	add	r0, r3, #120
	ldr	r3, [r4]
	movt	r1, #:upper16:.LC177
	sub	r2, r5, #8
	bl	__dynamic_pr_debug
	b	.L9265
.L9299:
	movw	r0, #:lower16:.LC179
	sub	r1, r5, #8
	movt	r0, #:upper16:.LC179
	bl	printk
	mvn	r0, #21
	b	.L9264
.L9302:
	.align	2
.L9301:
	.word	.LANCHOR5-1840
	.fnend
	.size	ghsuart_data_remove, .-ghsuart_data_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_free_buffers.part.49, %function
ghsic_data_free_buffers.part.49:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #48
	mov	r0, r6
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r8, [r4, #8]
	mov	r7, r0
	cmp	r8, #0
	beq	.L9312
	ldr	r5, [r4, #24]
	add	r9, r4, #24
	cmp	r9, r5
	beq	.L9305
.L9306:
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del
	ldr	r3, [r8, #8]
	mov	r1, r5
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #24]
	cmp	r9, r5
	bne	.L9306
.L9305:
	ldr	r3, [r4, #32]
	add	r5, r4, #32
	cmp	r5, r3
	beq	.L9307
	mov	r8, #0
	b	.L9308
.L9325:
	ldr	r2, [r4, #40]
	sub	r2, r2, #1
	str	r2, [r4, #40]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #32]
	cmp	r3, r5
	beq	.L9307
.L9308:
	subs	r0, r3, #0
	bne	.L9325
.L9307:
	mov	r1, r7
	mov	r0, r6
	add	r6, r4, #80
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r8, [r4, #12]
	mov	r7, r0
	cmp	r8, #0
	beq	.L9312
	ldr	r5, [r4, #56]
	add	r9, r4, #56
	cmp	r9, r5
	beq	.L9310
.L9311:
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del
	ldr	r3, [r8, #8]
	mov	r1, r5
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #56]
	cmp	r9, r5
	bne	.L9311
.L9310:
	ldr	r3, [r4, #64]
	add	r5, r4, #64
	cmp	r3, r5
	beq	.L9312
	mov	r8, #0
	b	.L9313
.L9326:
	ldr	r2, [r4, #72]
	sub	r2, r2, #1
	str	r2, [r4, #72]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #64]
	cmp	r3, r5
	beq	.L9312
.L9313:
	subs	r0, r3, #0
	bne	.L9326
.L9312:
	mov	r1, r7
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	ghsic_data_free_buffers.part.49, .-ghsic_data_free_buffers.part.49
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_remove, %function
ghsic_data_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR4
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	ip, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	ldrh	r3, [ip, #162]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0]
	tst	r3, #4
	bne	.L9376
.L9328:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r6, [r5, #1436]
	cmp	r6, #0
	beq	.L9329
	ldr	r4, [r5, #1440]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L9330
	cmp	r6, #1
	bls	.L9329
	ldr	r4, [r5, #1544]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L9330
	cmp	r6, #2
	beq	.L9329
	ldr	r4, [r5, #1648]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L9330
	cmp	r6, #3
	beq	.L9329
	ldr	r4, [r5, #1752]
	mov	r1, r7
	mov	r2, #20
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L9330
.L9329:
	movw	r0, #:lower16:.LC179
	mvn	r2, #21
	ldr	r1, .L9377
	movt	r0, #:upper16:.LC179
	bl	printk
	mvn	r0, #21
.L9327:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9330:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L9333
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L9333
	blx	r3
.L9333:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L9334
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L9334
	blx	r3
.L9334:
	add	r0, r4, #120
	bl	cancel_work_sync
	cmp	r4, #0
	beq	.L9335
	mov	r0, r4
	bl	ghsic_data_free_buffers.part.49
.L9335:
	add	r0, r4, #88
	add	r4, r4, #180
	bl	cancel_work_sync
	mov	r1, r4
	mov	r0, #0
	bl	_test_and_clear_bit
	mov	r0, #1
	mov	r1, r4
	bl	_clear_bit
	mov	r0, #0
	b	.L9327
.L9376:
	movw	r1, #:lower16:.LC177
	mov	r4, r0
	ldr	r2, .L9377
	mov	r3, r7
	add	r0, ip, #144
	movt	r1, #:upper16:.LC177
	bl	__dynamic_pr_debug
	ldr	r7, [r4]
	b	.L9328
.L9378:
	.align	2
.L9377:
	.word	.LANCHOR5-1828
	.fnend
	.size	ghsic_data_remove, .-ghsic_data_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_setup, %function
mbim_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r1, #4]	@ unaligned
	.pad #28
	sub	sp, sp, #28
	ldr	r10, [r0, #84]
	ldr	r3, [r0, #88]
	str	r2, [sp, #20]
	ldrh	r2, [r1, #2]	@ unaligned
	ldr	r4, [r10, #4]
	cmp	r3, #0
	str	r2, [sp, #16]
	ldrh	r8, [r1, #6]	@ unaligned
	beq	.L9459
	ldrh	r3, [r1]	@ unaligned
	mov	r5, r1
	movw	r1, #8582
	mov	r7, r0
	ldrb	r2, [r5]	@ zero_extendqisi2
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r1
	beq	.L9383
	bls	.L9460
	movw	r1, #41344
	cmp	r3, r1
	beq	.L9388
	bls	.L9461
	movw	r1, #41347
	cmp	r3, r1
	beq	.L9391
	movw	r1, #41349
	cmp	r3, r1
	bne	.L9382
	movw	r6, #:lower16:.LANCHOR4
	movw	r3, #354
	movt	r6, #:upper16:.LANCHOR4
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L9462
.L9405:
	ldr	r3, [sp, #16]
	adds	r3, r3, #0
	movne	r3, #1
	cmp	r8, #3
	orrls	r3, r3, #1
	cmp	r3, #0
	bne	.L9399
	ldrb	r3, [r7, #196]	@ zero_extendqisi2
	ldr	r2, [sp, #20]
	cmp	r3, r2
	bne	.L9399
	ldr	r3, [r7, #224]
	movw	r0, #378
	cmp	r8, #4
	ldr	r2, [r4]
	movle	fp, #0
	movgt	fp, #1
	lsr	r1, r3, #16
	strb	r3, [r2]
	ubfx	r3, r3, #8, #8
	lsr	ip, r1, #8
	strb	r3, [r2, #1]
	strb	r1, [r2, #2]
	strb	ip, [r2, #3]
	ldrh	r3, [r6, r0]
	tst	r3, #4
	moveq	r9, #4
	bne	.L9463
.L9394:
	movw	r3, #546
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L9464
.L9412:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r9, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	bfi	r3, fp, #1, #1
	strb	r3, [r4, #26]
	ldr	r3, [r10]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L9379
	movw	r0, #:lower16:.LC827
	ldrb	r3, [r5, #1]	@ zero_extendqisi2
	str	r4, [sp]
	ldr	r1, .L9479
	movt	r0, #:upper16:.LC827
	ldrb	r2, [r5]	@ zero_extendqisi2
	bl	printk
	b	.L9379
.L9460:
	movw	r1, #8453
	cmp	r3, r1
	beq	.L9385
	movw	r1, #8580
	cmp	r3, r1
	beq	.L9386
	cmp	r3, #8448
	beq	.L9465
.L9382:
	ldr	r1, [sp, #16]
	movw	r0, #:lower16:.LC825
	ldrb	r3, [r5, #1]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC825
	str	r1, [sp]
	ldr	r1, [sp, #20]
	str	r1, [sp, #4]
	ldr	r1, .L9479
	str	r8, [sp, #8]
	bl	printk
.L9399:
	ldr	r2, [sp, #16]
	movw	r0, #:lower16:.LC828
	ldrb	r3, [r5]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC828
	ldr	r1, .L9479
	str	r2, [sp, #4]
	ldr	r2, [sp, #20]
	ldrb	ip, [r5, #1]	@ zero_extendqisi2
	str	r8, [sp, #12]
	str	ip, [sp]
	str	r2, [sp, #8]
	mvn	r2, #94
	mov	r4, r2
	bl	printk
.L9379:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9391:
	movw	r6, #:lower16:.LANCHOR4
	movw	r3, #426
	movt	r6, #:upper16:.LANCHOR4
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L9466
.L9408:
	ldr	r3, [sp, #16]
	adds	r2, r3, #0
	movne	r2, #1
	cmp	r8, #1
	orrls	r2, r2, #1
	cmp	r2, #0
	bne	.L9399
	ldrb	r3, [r7, #196]	@ zero_extendqisi2
	ldr	r1, [sp, #20]
	cmp	r3, r1
	bne	.L9399
	ldr	r3, [r7, #200]
	cmp	r8, #2
	movw	r0, #450
	ldr	ip, .L9479+4
	movle	fp, #0
	movgt	fp, #1
	ldr	r1, [r4]
	subs	r3, r3, ip
	movne	r3, #1
	strb	r3, [r1]
	strb	r2, [r1, #1]
	ldrh	r2, [r6, r0]
	tst	r2, #4
	moveq	r9, #2
	beq	.L9394
	movw	r1, #:lower16:.LC821
	ldr	r2, .L9479
	mov	r9, #2
	movt	r1, #:upper16:.LC821
	ldr	r0, .L9479+8
	bl	__dynamic_pr_debug
	b	.L9394
.L9386:
	movw	r6, #:lower16:.LANCHOR4
	movw	r3, #474
	movt	r6, #:upper16:.LANCHOR4
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L9467
.L9409:
	cmp	r8, #0
	bne	.L9399
	ldrb	r3, [r7, #196]	@ zero_extendqisi2
	ldr	r2, [sp, #20]
	cmp	r3, r2
	bne	.L9399
	ldr	r3, [sp, #16]
	cmp	r3, #0
	beq	.L9410
	cmp	r3, #1
	bne	.L9417
	movw	r3, #522
	ldr	r2, .L9479+12
	ldrh	r3, [r6, r3]
	str	r2, [r7, #200]
	tst	r3, #4
	beq	.L9417
	movw	r1, #:lower16:.LC824
	ldr	r2, .L9479
	mov	r9, r8
	movt	r1, #:upper16:.LC824
	ldr	r0, .L9479+16
	mov	fp, r8
	bl	__dynamic_pr_debug
	b	.L9394
.L9417:
	mov	r9, r8
	mov	fp, r8
	b	.L9394
.L9385:
	movw	r6, #:lower16:.LANCHOR4
	movt	r6, #:upper16:.LANCHOR4
	ldrh	r3, [r6, #186]
	tst	r3, #4
	bne	.L9468
.L9393:
	movw	r3, #:lower16:fmbim_reset_cmd_complete
	str	r7, [r4, #32]
	adds	fp, r8, #0
	movt	r3, #:upper16:fmbim_reset_cmd_complete
	movne	fp, #1
	mov	r9, #0
	str	r3, [r4, #28]
	movw	r3, #546
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L9412
.L9464:
	ldr	r2, [sp, #16]
	movw	r1, #:lower16:.LC826
	ldrb	r3, [r5]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC826
	ldr	r0, .L9479+20
	str	r2, [sp, #4]
	ldr	r2, [sp, #20]
	ldrb	ip, [r5, #1]	@ zero_extendqisi2
	str	r8, [sp, #12]
	str	ip, [sp]
	str	r2, [sp, #8]
	ldr	r2, .L9479
	bl	__dynamic_pr_debug
	b	.L9412
.L9465:
	movw	r6, #:lower16:.LANCHOR4
	movt	r6, #:upper16:.LANCHOR4
	ldrh	r3, [r6, #210]
	tst	r3, #4
	bne	.L9469
.L9395:
	ldr	r3, [r4, #4]
	cmp	r8, r3
	bls	.L9396
	ldrh	r2, [r6, #234]
	tst	r2, #4
	bne	.L9470
.L9396:
	movw	r3, #:lower16:fmbim_cmd_complete
	mov	r9, r8
	str	r7, [r4, #32]
	movt	r3, #:upper16:fmbim_cmd_complete
	mov	fp, #0
	str	r3, [r4, #28]
	b	.L9394
.L9461:
	movw	r1, #41217
	cmp	r3, r1
	bne	.L9382
	movw	r6, #:lower16:.LANCHOR4
	movw	r3, #258
	movt	r6, #:upper16:.LANCHOR4
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L9471
.L9397:
	ldr	r3, [sp, #16]
	cmp	r3, #0
	bne	.L9472
	movw	r3, #282
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L9473
.L9400:
	add	r9, r7, #204
	mov	r0, r9
	bl	_raw_spin_lock
	ldr	fp, [r7, #216]!
	cmp	fp, r7
	beq	.L9474
	mov	r0, fp
	sub	r7, fp, #8
	bl	list_del
	mov	r0, r9
	bl	_raw_spin_unlock
	ldmdb	fp, {r1, r9}
	ldr	r0, [r4]
	cmp	r8, r9
	movcc	r9, r8
	mov	r2, r9
	bl	memcpy
	cmp	r7, #0
	beq	.L9402
	ldr	r0, [fp, #-8]
	bl	kfree
	mov	r0, r7
	bl	kfree
.L9402:
	movw	r3, #306
	cmp	r9, r8
	ldrh	r3, [r6, r3]
	movge	fp, #0
	movlt	fp, #1
	tst	r3, #4
	beq	.L9394
	movw	r1, #:lower16:.LC814
	mov	r3, r9
	ldr	r2, .L9479
	movt	r1, #:upper16:.LC814
	ldr	r0, .L9479+24
	bl	__dynamic_pr_debug
	b	.L9394
.L9388:
	movw	r6, #:lower16:.LANCHOR4
	movw	r3, #330
	movt	r6, #:upper16:.LANCHOR4
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L9475
.L9403:
	ldr	r3, [sp, #16]
	adds	r3, r3, #0
	movne	r3, #1
	cmp	r8, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L9399
	ldrb	r3, [r7, #196]	@ zero_extendqisi2
	ldr	r2, [sp, #20]
	cmp	r3, r2
	bne	.L9399
	cmp	r8, #28
	ldr	r1, .L9479+28
	movcc	r9, r8
	movcs	r9, #28
	ldr	r0, [r4]
	cmp	r9, r8
	mov	r2, r9
	movcs	fp, #0
	movcc	fp, #1
	bl	memcpy
	b	.L9394
.L9383:
	movw	r6, #:lower16:.LANCHOR4
	movw	r3, #402
	movt	r6, #:upper16:.LANCHOR4
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L9476
.L9406:
	sub	r3, r8, #4
	bic	r3, r3, #4
	uxth	r3, r3
	cmp	r3, #0
	bne	.L9477
	ldr	fp, [sp, #16]
	cmp	fp, #0
	bne	.L9399
	ldrb	r3, [r7, #196]	@ zero_extendqisi2
	ldr	r2, [sp, #20]
	cmp	r3, r2
	bne	.L9399
	movw	r3, #:lower16:mbim_ep0out_complete
	mov	r9, r8
	str	r8, [r4, #4]
	movt	r3, #:upper16:mbim_ep0out_complete
	str	r3, [r4, #28]
	str	r7, [r4, #32]
	b	.L9394
.L9410:
	movw	r3, #498
	ldr	r2, .L9479+4
	ldrh	r3, [r6, r3]
	str	r2, [r7, #200]
	tst	r3, #4
	bne	.L9478
	ldr	fp, [sp, #16]
	mov	r9, fp
	b	.L9394
.L9467:
	movw	r1, #:lower16:.LC822
	ldr	r2, .L9479
	add	r0, r6, #456
	movt	r1, #:upper16:.LC822
	bl	__dynamic_pr_debug
	b	.L9409
.L9473:
	ldr	r2, [sp, #16]
	movw	r1, #:lower16:.LC812
	ldrb	r3, [r5]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC812
	ldr	r0, .L9479+32
	str	r2, [sp, #4]
	ldr	r2, [sp, #20]
	ldrb	ip, [r5, #1]	@ zero_extendqisi2
	str	r8, [sp, #12]
	str	ip, [sp]
	str	r2, [sp, #8]
	ldr	r2, .L9479
	bl	__dynamic_pr_debug
	b	.L9400
.L9471:
	movw	r1, #:lower16:.LC810
	ldr	r2, .L9479
	add	r0, r6, #240
	movt	r1, #:upper16:.LC810
	bl	__dynamic_pr_debug
	b	.L9397
.L9469:
	movw	r1, #:lower16:.LC808
	ldr	r2, .L9479
	add	r0, r6, #192
	movt	r1, #:upper16:.LC808
	bl	__dynamic_pr_debug
	b	.L9395
.L9468:
	movw	r1, #:lower16:.LC807
	ldr	r2, .L9479
	add	r0, r6, #168
	movt	r1, #:upper16:.LC807
	bl	__dynamic_pr_debug
	b	.L9393
.L9466:
	movw	r1, #:lower16:.LC820
	ldr	r2, .L9479
	add	r0, r6, #408
	movt	r1, #:upper16:.LC820
	bl	__dynamic_pr_debug
	b	.L9408
.L9463:
	movw	r1, #:lower16:.LC817
	ldr	r2, .L9479
	mov	r9, #4
	movt	r1, #:upper16:.LC817
	ldr	r3, [r7, #224]
	ldr	r0, .L9479+36
	bl	__dynamic_pr_debug
	b	.L9394
.L9462:
	movw	r1, #:lower16:.LC816
	ldr	r2, .L9479
	add	r0, r6, #336
	movt	r1, #:upper16:.LC816
	bl	__dynamic_pr_debug
	b	.L9405
.L9476:
	movw	r1, #:lower16:.LC818
	ldr	r2, .L9479
	add	r0, r6, #384
	movt	r1, #:upper16:.LC818
	bl	__dynamic_pr_debug
	b	.L9406
.L9475:
	movw	r1, #:lower16:.LC815
	ldr	r2, .L9479
	add	r0, r6, #312
	movt	r1, #:upper16:.LC815
	bl	__dynamic_pr_debug
	b	.L9403
.L9470:
	movw	r1, #:lower16:.LC809
	ldr	r2, .L9479
	str	r3, [sp]
	movt	r1, #:upper16:.LC809
	mov	r3, r8
	ldr	r0, .L9479+40
	bl	__dynamic_pr_debug
	b	.L9396
.L9478:
	ldr	fp, [sp, #16]
	movw	r1, #:lower16:.LC823
	ldr	r2, .L9479
	movt	r1, #:upper16:.LC823
	ldr	r0, .L9479+44
	mov	r9, fp
	bl	__dynamic_pr_debug
	b	.L9394
.L9459:
	movw	r0, #:lower16:.LC806
	ldr	r1, .L9479
	mvn	r4, #106
	movt	r0, #:upper16:.LC806
	bl	printk
	b	.L9379
.L9477:
	movw	r0, #:lower16:.LC819
	mov	r2, r8
	ldr	r1, .L9479
	movt	r0, #:upper16:.LC819
	bl	printk
	b	.L9399
.L9474:
	movw	r0, #:lower16:.LC813
	ldr	r1, .L9479
	movt	r0, #:upper16:.LC813
	bl	printk
	mov	r0, r9
	bl	_raw_spin_unlock
	b	.L9399
.L9472:
	movw	r0, #:lower16:.LC811
	mov	r2, r8
	ldr	r1, .L9479
	movt	r0, #:upper16:.LC811
	bl	printk
	b	.L9399
.L9480:
	.align	2
.L9479:
	.word	.LANCHOR5-1808
	.word	.LANCHOR0+1800
	.word	.LANCHOR4+432
	.word	.LANCHOR0+1844
	.word	.LANCHOR4+504
	.word	.LANCHOR4+528
	.word	.LANCHOR4+288
	.word	.LANCHOR0+196
	.word	.LANCHOR4+264
	.word	.LANCHOR4+360
	.word	.LANCHOR4+216
	.word	.LANCHOR4+480
	.fnend
	.size	mbim_setup, .-mbim_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_write, %function
conn_gadget_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r3, #2484]
	.pad #60
	sub	sp, sp, #60
	ldr	r5, [r0, #124]
	str	r1, [sp, #12]
	str	r2, [sp, #24]
	cmp	r3, #0
	beq	.L9523
	add	r3, r5, #112
	str	r3, [sp, #28]
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r1, r3
	.syntax divided
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r1]
	add	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L9524
	movw	r2, #:lower16:autoremove_wake_function
	mov	r3, #57344
	ldr	r10, [sp, #24]
	movt	r2, #:upper16:autoremove_wake_function
	movt	r3, 65535
	str	r3, [sp, #16]
	str	r2, [sp, #20]
	mov	r2, r3
.L9484:
	cmp	r10, #0
	mov	r3, sp
	and	r9, r3, r2
	beq	.L9525
.L9505:
	ldr	r3, [r5, #104]
	cmp	r3, #0
	bne	.L9489
	add	r6, r5, #88
	add	r7, r5, #120
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #120]
	mov	r8, r0
	cmp	r7, r4
	beq	.L9526
	mov	r0, r4
	sub	r4, r4, #36
	bl	list_del
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, #0
	beq	.L9487
.L9488:
	ldr	r9, [r5, #192]
	mov	r3, sp
	ldr	r2, [sp, #16]
	ldr	r0, [r4]
	cmp	r9, r10
	and	r2, r3, r2
	ldr	r3, [sp, #12]
	ldr	r2, [r2, #8]
	bcs	.L9527
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r3, r9; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L9522
	cmp	r9, #0
	bne	.L9528
.L9501:
	str	r9, [r4, #4]
	ldr	r0, [r5, #92]
	mov	r2, #32
	mov	r1, r4
	ldr	ip, [r0, #8]
	ldr	r8, [ip, #16]
	blx	r8
	cmp	r0, #0
	blt	.L9529
	ldr	r3, [sp, #12]
	sub	r10, r10, r9
	ldr	r2, [sp, #16]
	add	r3, r3, r9
	str	r3, [sp, #12]
	b	.L9484
.L9526:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L9487:
	ldr	r3, [r5, #104]
	cmp	r3, #0
	beq	.L9530
.L9489:
	movw	r0, #:lower16:.LC830
	ldr	r1, .L9535
	mvn	r8, #4
	movt	r0, #:upper16:.LC830
	bl	printk
.L9485:
	ldr	r1, [sp, #28]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L9481:
	mov	r0, r8
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9530:
	ldr	r1, [sp, #20]
	str	r3, [sp, #36]
	add	r2, sp, #48
	str	r3, [sp, #40]
	add	r8, r5, #156
	str	r3, [sp, #44]
	str	r3, [sp, #48]
	str	r3, [sp, #52]
	ldr	r3, [r9, #12]
	str	r3, [sp, #40]
	str	r1, [sp, #44]
	str	r2, [sp, #48]
	str	r2, [sp, #52]
	b	.L9495
.L9532:
	bl	schedule
.L9495:
	mov	r2, #1
	add	r1, sp, #36
	mov	r0, r8
	bl	prepare_to_wait
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #120]
	mov	fp, r0
	cmp	r7, r3
	mov	r0, r3
	sub	r4, r3, #36
	beq	.L9531
	bl	list_del
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, #0
	bne	.L9492
	ldr	r3, [r5, #104]
	cmp	r3, #0
	bne	.L9493
.L9533:
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L9532
	mov	r0, r8
	add	r1, sp, #36
	bl	finish_wait
	mov	r2, #65024
	movw	r0, #:lower16:.LC834
	ldr	r1, .L9535
	movt	r2, 65535
	movt	r0, #:upper16:.LC834
	mov	r8, #65024
	bl	printk
	movt	r8, 65535
	b	.L9485
.L9531:
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #104]
	cmp	r3, #0
	beq	.L9533
.L9493:
	add	r1, sp, #36
	mov	r0, r8
	bl	finish_wait
	cmp	r10, #0
	bne	.L9505
.L9525:
	ldr	r8, [sp, #24]
	b	.L9485
.L9492:
	add	r1, sp, #36
	mov	r0, r8
	bl	finish_wait
	b	.L9488
.L9527:
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r3, r10; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	bne	.L9498
	mov	r9, r10
.L9522:
	mov	r1, r3
	mov	r2, r9
	bl	__copy_from_user
	cmp	r0, #0
	beq	.L9501
	b	.L9500
.L9528:
	mov	r10, r9
.L9498:
	mov	r1, r10
	bl	__memzero
.L9500:
	ldr	r10, .L9535+4
	movw	r0, #:lower16:.LC831
	movw	r9, #:lower16:.LANCHOR4
	movt	r0, #:upper16:.LC831
	movt	r9, #:upper16:.LANCHOR4
	mvn	r8, #13
	sub	r1, r10, #4
	bl	printk
.L9502:
	movw	r3, #594
	ldrh	r3, [r9, r3]
	tst	r3, #4
	bne	.L9534
.L9508:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	ldr	r1, [r5, #124]
	add	r0, r4, #36
	mov	r2, r7
	bl	__list_add
	mov	r1, r9
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L9485
.L9534:
	sub	r3, r10, #4
	movw	r1, #:lower16:.LC833
	ldr	r0, .L9535+8
	mov	r2, r3
	movt	r1, #:upper16:.LC833
	bl	__dynamic_pr_debug
	b	.L9508
.L9529:
	movw	r9, #:lower16:.LANCHOR4
	movw	r2, #570
	ldr	r10, .L9535+4
	movt	r9, #:upper16:.LANCHOR4
	mov	r3, #1
	ldrh	r2, [r9, r2]
	mov	r8, r0
	str	r3, [r5, #104]
	tst	r2, #4
	beq	.L9504
	movw	r1, #:lower16:.LC233
	str	r3, [sp]
	sub	r3, r10, #4
	movt	r1, #:upper16:.LC233
	add	r0, r9, #552
	mov	r2, r3
	bl	__dynamic_pr_debug
.L9504:
	movw	r0, #:lower16:.LC832
	mov	r2, r8
	movt	r0, #:upper16:.LC832
	sub	r1, r10, #4
	bl	printk
	mvn	r8, #4
	b	.L9502
.L9523:
	movw	r0, #:lower16:.LC425
	ldr	r1, .L9535
	mvn	r8, #18
	movt	r0, #:upper16:.LC425
	bl	printk
	b	.L9481
.L9524:
	ldr	r1, [sp, #28]
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC829
	ldr	r1, .L9535
	mvn	r8, #15
	movt	r0, #:upper16:.LC829
	bl	printk
	b	.L9481
.L9536:
	.align	2
.L9535:
	.word	.LANCHOR5-1796
	.word	.LANCHOR5-1792
	.word	.LANCHOR4+576
	.fnend
	.size	conn_gadget_write, .-conn_gadget_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_disable, %function
qdss_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #618
	movt	r5, #:upper16:.LANCHOR4
	mov	r4, r0
	str	r6, [sp, #8]
	ldrh	r3, [r5, r3]
	str	lr, [sp, #12]
	tst	r3, #4
	bne	.L9560
.L9538:
	add	r6, r4, #188
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #92]
	mov	r1, r0
	cmp	r3, #0
	beq	.L9561
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #92]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #642
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L9562
.L9540:
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	tst	r3, #2
	beq	.L9541
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #192]	@ zero_extendqisi2
	bfc	r2, #1, #1
	uxtb	r3, r2
	strb	r2, [r4, #192]
.L9541:
	tst	r3, #4
	beq	.L9542
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #192]	@ zero_extendqisi2
	bfc	r2, #2, #1
	uxtb	r3, r2
	strb	r2, [r4, #192]
.L9542:
	tst	r3, #1
	beq	.L9543
	ldr	r0, [r4, #108]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r4, #192]
.L9543:
	add	r2, r4, #172
	ldr	r1, [r4, #196]
	mov	r0, #4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on
.L9561:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L9562:
	movw	r1, #:lower16:.LC836
	ldr	r0, .L9563
	movt	r1, #:upper16:.LC836
	bl	__dynamic_pr_debug
	b	.L9540
.L9560:
	movw	r1, #:lower16:.LC835
	add	r0, r5, #600
	movt	r1, #:upper16:.LC835
	bl	__dynamic_pr_debug
	b	.L9538
.L9564:
	.align	2
.L9563:
	.word	.LANCHOR4+624
	.fnend
	.size	qdss_disable, .-qdss_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_function_unbind_config, %function
ecm_qc_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, .L9574
	str	lr, [sp, #4]
	bl	strim
	mov	r1, r0
	movw	r0, #:lower16:.LC588
	movt	r0, #:upper16:.LC588
	bl	strcmp
	cmp	r0, #0
	bne	.L9573
.L9565:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L9573:
	movw	r1, #:lower16:.LC837
	movw	r0, #:lower16:init_net
	movt	r1, #:upper16:.LC837
	movt	r0, #:upper16:init_net
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L9565
	.syntax divided
@ 17 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		mrs	ip, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	movw	r2, #:lower16:__per_cpu_offset
	bic	r1, r3, #8128
	movt	r2, #:upper16:__per_cpu_offset
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
	ldr	r1, [r2, r1, lsl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, ip	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	bl	unregister_netdev
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	free_netdev
.L9575:
	.align	2
.L9574:
	.word	.LANCHOR1+3020
	.fnend
	.size	ecm_qc_function_unbind_config, .-ecm_qc_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_free_buffers, %function
gbam_free_buffers:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #4
	add	r7, r0, #8
	mov	r0, r6
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	r4, #0
	beq	.L9577
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L9577
	ldr	r5, [r4, #28]
	add	r10, r4, #28
	ldr	r9, [r3, #84]
	cmp	r10, r5
	beq	.L9578
.L9579:
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del
	ldr	r3, [r9, #8]
	mov	r1, r5
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #28]
	cmp	r10, r5
	bne	.L9579
	ldr	r3, [r4, #12]
.L9578:
	ldr	r5, [r4, #52]
	add	r10, r4, #52
	ldr	r9, [r3, #88]
	cmp	r10, r5
	beq	.L9580
.L9581:
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del
	ldr	r3, [r9, #8]
	mov	r1, r5
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #52]
	cmp	r10, r5
	bne	.L9581
.L9580:
	ldr	r3, [r4, #36]
	add	r5, r4, #36
	cmp	r5, r3
	beq	.L9582
	mov	r9, #0
	b	.L9583
.L9602:
	ldr	r2, [r4, #44]
	sub	r2, r2, #1
	str	r2, [r4, #44]
	ldm	r3, {r1, r2}
	str	r9, [r3]
	str	r9, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #36]
	cmp	r3, r5
	beq	.L9582
.L9583:
	subs	r0, r3, #0
	bne	.L9602
.L9582:
	ldr	r3, [r4, #60]
	add	r5, r4, #60
	cmp	r3, r5
	beq	.L9577
	mov	r9, #0
	b	.L9584
.L9603:
	ldr	r2, [r4, #68]
	sub	r2, r2, #1
	str	r2, [r4, #68]
	ldm	r3, {r1, r2}
	str	r9, [r3]
	str	r9, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #60]
	cmp	r3, r5
	beq	.L9577
.L9584:
	subs	r0, r3, #0
	bne	.L9603
.L9577:
	mov	r0, r7
	bl	_raw_spin_unlock
	ldrd	r4, [sp]
	mov	r1, r8
	mov	r0, r6
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	gbam_free_buffers, .-gbam_free_buffers
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_ch_remove, %function
gbam_data_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #666
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r3, r2]
	.pad #12
	sub	sp, sp, #12
	tst	r2, #4
	bne	.L9632
.L9605:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r7, [r4, #424]
	cmp	r7, #0
	ble	.L9606
	mov	r5, #0
	movw	r6, #:lower16:.LC342
	mov	r9, r5
	mov	fp, r5
	movt	r6, #:upper16:.LC342
.L9611:
	mov	r2, #20
	mov	r0, r6
	ldr	r1, [r8]
	bl	strncmp
	cmp	r0, #0
	beq	.L9633
.L9607:
	add	r5, r5, #1
	cmp	r7, r5
	bgt	.L9611
.L9606:
	mov	r0, #0
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9633:
	mov	r3, #84
	ldr	r2, .L9634
	mul	r3, r3, r5
	ldr	r7, [r3, r2]
	add	r3, r7, #8
	add	r10, r7, #4
	mov	r0, r10
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	str	r0, [sp, #4]
	add	r0, r7, #8
	bl	_raw_spin_lock
	ldr	r3, [r7, #12]
	add	r0, r7, #8
	cmp	r3, #0
	ldrne	fp, [r3, #84]
	ldrne	r9, [r3, #88]
	bl	_raw_spin_unlock
	ldr	r1, [sp, #4]
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	cmp	fp, #0
	beq	.L9609
	ldr	r3, [fp, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L9609
	mov	r0, fp
	blx	r3
.L9609:
	cmp	r9, #0
	beq	.L9610
	ldr	r3, [r9, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L9610
	mov	r0, r9
	blx	r3
.L9610:
	mov	r0, r7
	add	r10, r7, #20
	bl	gbam_free_buffers
	ldr	r0, [r7, #24]
	bl	msm_bam_dmux_close
	mov	r3, #0
	mov	r1, r10
	mov	r0, #2
	str	r3, [r7, #240]
	bl	_clear_bit
	mov	r1, r10
	mov	r0, #1
	bl	_clear_bit
	ldr	r7, [r4, #424]
	b	.L9607
.L9632:
	movw	r1, #:lower16:.LC177
	add	r0, r3, #648
	ldr	r2, .L9634+4
	movt	r1, #:upper16:.LC177
	ldr	r3, [r8]
	bl	__dynamic_pr_debug
	b	.L9605
.L9635:
	.align	2
.L9634:
	.word	.LANCHOR1+428
	.word	.LANCHOR5-1776
	.fnend
	.size	gbam_data_ch_remove, .-gbam_data_ch_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_unbind, %function
diag_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L9650
	cmp	r3, #2
	bhi	.L9651
.L9638:
	ldr	r0, [r6, #16]
	bl	kfree
	ldr	r3, [r6, #124]
	cmp	r3, #0
	beq	.L9639
	ldr	r2, [r3, #20]
	cmp	r2, r6
	moveq	r2, #0
	streq	r2, [r3, #20]
.L9639:
	add	r0, r6, #140
	add	r7, r6, #108
	bl	list_del
	mov	r9, r6
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r9, #100]!
	mov	r8, r0
	cmp	r4, r9
	ldr	r5, [r4]
	bne	.L9641
	b	.L9640
.L9644:
	mov	r5, r3
.L9641:
	mov	r0, r4
	sub	r4, r4, #36
	bl	list_del
	ldr	r0, [r6, #88]
	mov	r1, r4
	mov	r4, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r9, r5
	ldr	r3, [r5]
	bne	.L9644
.L9640:
	mov	r9, r6
	ldr	r4, [r9, #92]!
	cmp	r4, r9
	ldr	r5, [r4]
	bne	.L9643
	b	.L9642
.L9645:
	mov	r5, r3
.L9643:
	mov	r0, r4
	sub	r4, r4, #36
	bl	list_del
	ldr	r0, [r6, #84]
	mov	r1, r4
	mov	r4, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r9, r5
	ldr	r3, [r5]
	bne	.L9645
.L9642:
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, r6
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	kfree
.L9650:
	mov	r4, r0
	ldr	r0, [r1, #12]
	bl	kfree
	ldr	r3, [r4, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L9638
.L9651:
	ldr	r0, [r6, #8]
	bl	kfree
	b	.L9638
	.fnend
	.size	diag_function_unbind, .-diag_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_unbind, %function
mtp_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	add	r6, r1, #88
	strd	r8, [sp, #16]
	add	r9, r1, #116
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	b	.L9653
.L9654:
	bl	list_del
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L9655
	ldr	r8, [r4, #92]
	ldr	r0, [r5, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L9653:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #116]
	mov	r8, r0
	cmp	r9, r5
	mov	r0, r5
	sub	r7, r5, #36
	bne	.L9654
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L9655:
	ldr	r5, [r4, #168]
	cmp	r5, #0
	beq	.L9657
	ldr	r7, [r4, #96]
	ldr	r0, [r5]
	bl	kfree
	mov	r1, r5
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L9657:
	ldr	r5, [r4, #172]
	cmp	r5, #0
	beq	.L9658
	ldr	r7, [r4, #96]
	ldr	r0, [r5]
	bl	kfree
	mov	r1, r5
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L9658:
	add	r9, r4, #124
	b	.L9659
.L9660:
	bl	list_del
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L9661
	ldr	r8, [r4, #100]
	ldr	r0, [r5, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L9659:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #124]
	mov	r8, r0
	cmp	r5, r9
	mov	r0, r5
	sub	r7, r5, #36
	bne	.L9660
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L9661:
	mov	r3, #0
	str	r3, [r4, #104]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	mtp_function_unbind, .-mtp_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_suspend, %function
frmnet_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #690
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR4
	movw	r8, #:lower16:.LANCHOR1
	strd	r10, [sp, #24]
	movt	r9, #:upper16:.LANCHOR4
	movt	r8, #:upper16:.LANCHOR1
	str	lr, [sp, #32]
	ldrb	r2, [r0, #116]	@ zero_extendqisi2
	.pad #20
	sub	sp, sp, #20
	ldrh	r1, [r9, r3]
	add	r3, r2, r2, lsl #1
	tst	r1, #4
	add	r3, r8, r3, lsl #3
	ldr	r7, [r3, #3316]
	bne	.L9700
.L9671:
	ldr	r0, [r5, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L9673
	blx	r3
.L9673:
	ldr	r0, .L9704
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L9701
.L9674:
	add	r10, r5, #132
	add	r6, r5, #144
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #144]
	str	r0, [sp, #12]
	cmp	r6, r4
	beq	.L9675
.L9676:
	mov	r0, r4
	sub	fp, r4, #8
	bl	list_del
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, fp
	bl	kfree
	ldr	r4, [r5, #144]
	cmp	r6, r4
	bne	.L9676
.L9675:
	mov	r3, #0
	mov	r0, r10
	ldr	r1, [sp, #12]
	str	r3, [r5, #152]
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #10
	bhi	.L9677
	mov	r3, #1
	lsl	r3, r3, r7
	tst	r3, #1824
	bne	.L9670
	tst	r3, #192
	beq	.L9677
	sub	r7, r7, #6
	cmp	r7, #1
	bls	.L9702
.L9670:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9702:
	ldrb	r3, [r5, #116]	@ zero_extendqisi2
	movw	r2, #714
	ldrh	r2, [r9, r2]
	add	r3, r3, r3, lsl #1
	tst	r2, #4
	add	r3, r8, r3, lsl #3
	ldrb	r3, [r3, #3324]	@ zero_extendqisi2
	add	r2, r8, r3, lsl #2
	ldr	r4, [r2, #3668]
	bne	.L9703
.L9679:
	ldr	r1, [r8, #3532]
	add	r2, r4, #316
	mov	r0, #4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work_on
.L9700:
	sub	r1, r7, #1
	cmp	r1, #9
	movwhi	r3, #:lower16:.LC182
	movthi	r3, #:upper16:.LC182
	bhi	.L9672
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r3, r3, r1, lsl #2
	ldr	r3, [r3, #1100]
.L9672:
	movw	r1, #:lower16:.LC596
	str	r5, [sp]
	ldr	r0, .L9704+4
	movt	r1, #:upper16:.LC596
	str	r2, [sp, #4]
	ldr	r2, .L9704+8
	bl	__dynamic_pr_debug
	b	.L9671
.L9701:
	movw	r1, #:lower16:.LC564
	ldrb	r3, [r5, #116]	@ zero_extendqisi2
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC564
	ldr	r2, .L9704+12
	bl	__dynamic_pr_debug
	b	.L9674
.L9703:
	movw	r1, #:lower16:.LC838
	ldr	r2, .L9704+16
	movt	r1, #:upper16:.LC838
	ldr	r0, .L9704+20
	bl	__dynamic_pr_debug
	b	.L9679
.L9677:
	sub	r7, r7, #1
	cmp	r7, #9
	bhi	.L9682
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r7, r3, r7, lsl #2
	ldr	r2, [r7, #1100]
.L9680:
	ldr	r1, .L9704+8
	movw	r0, #:lower16:.LC598
	movt	r0, #:upper16:.LC598
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L9682:
	movw	r2, #:lower16:.LC182
	movt	r2, #:upper16:.LC182
	b	.L9680
.L9705:
	.align	2
.L9704:
	.word	.LANCHOR4-2848
	.word	.LANCHOR4+672
	.word	.LANCHOR5-1756
	.word	.LANCHOR5-3988
	.word	.LANCHOR5-1740
	.word	.LANCHOR4+696
	.fnend
	.size	frmnet_suspend, .-frmnet_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_disable, %function
ffs_func_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r0, #-28]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r6, #132]
	cmp	r9, #0
	beq	.L9707
	ldr	r3, [r9, #8]
	mov	r8, #1
	mov	r7, #0
	ldr	r4, [r9, #12]
	add	r0, r3, #24
	ldr	r5, [r3, #208]
	ldrh	fp, [r3, #180]
	add	r4, r4, #28
	bl	_raw_spin_lock_irqsave
	mov	r10, r0
.L9708:
	str	r8, [r5, #32]
	ldr	r3, [r4, #-28]
	subs	r0, r3, #0
	beq	.L9709
	ldr	r3, [r3, #8]
	add	r4, r4, #28
	add	r5, r5, #56
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #-56]
	subs	fp, fp, #1
	str	r7, [r3]
	str	r7, [r5, #-16]
	bne	.L9708
.L9711:
	ldr	r0, [r9, #8]
	mov	r1, r10
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	mov	r3, #0
	str	r3, [r6, #132]
.L9707:
	ldr	r7, [r6, #92]
	cmp	r7, #2
	bne	.L9706
	mov	r3, #0
	add	r4, r6, #116
	mov	r0, r4
	str	r3, [r6, #132]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #96]
	mov	r5, r0
	add	r0, r6, #100
	ldrh	r2, [r6, #104]
	mov	lr, r0
	cmp	r3, #1
	streq	r7, [r6, #96]
	cmp	r2, #0
	beq	.L9717
	add	r2, r2, r0
	mov	r3, r0
.L9716:
	ldrb	r1, [r3], #1	@ zero_extendqisi2
	sub	ip, r1, #5
	cmp	ip, #1
	strbls	r1, [r0]
	addls	r0, r0, #1
	cmp	r2, r3
	bne	.L9716
	sub	r2, r0, lr
	add	r1, r2, #1
	uxth	r2, r2
	uxth	r1, r1
.L9714:
	add	r3, r6, r2
	strh	r1, [r6, #104]	@ movhi
	mov	r0, #3
	mov	r2, #1
	mov	r1, r0
	strb	r0, [r3, #100]
	mov	r0, r4
	bl	__wake_up_locked
	mov	r1, r5
	mov	r0, r4
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L9709:
	subs	fp, fp, #1
	str	r3, [r5, #40]
	add	r4, r4, #28
	add	r5, r5, #56
	bne	.L9708
	b	.L9711
.L9717:
	mov	r1, #1
	b	.L9714
.L9706:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
	.fnend
	.size	ffs_func_disable, .-ffs_func_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_close, %function
gs_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #272]
	.pad #32
	sub	sp, sp, #32
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #12]
	cmp	r3, #1
	beq	.L9724
	cmp	r3, #0
	subne	r3, r3, #1
	strne	r3, [r4, #12]
	beq	.L9765
.L9726:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	add	sp, sp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L9765:
	movw	r0, #:lower16:.LC680
	movw	r1, #905
	movt	r0, #:upper16:.LC680
	bl	warn_slowpath_null
	b	.L9726
.L9724:
	movw	r6, #:lower16:.LANCHOR4
	movw	r3, #738
	movt	r6, #:upper16:.LANCHOR4
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L9766
.L9727:
	ldr	r0, [r4, #4]
	mov	r2, #0
	mov	r3, #1
	str	r2, [r4, #12]
	strb	r3, [r4, #16]
	cmp	r0, r2
	beq	.L9743
	ldr	r3, [r0, #120]
	cmp	r3, #0
	beq	.L9761
	blx	r3
.L9761:
	ldr	r1, [r4, #92]
	ldr	r2, [r4, #100]
	ldr	r0, [r4, #104]
	add	r3, r0, r1
	sub	r3, r3, r2
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	bne	.L9767
.L9745:
	str	r0, [r4, #100]
.L9729:
	mov	r3, #0
	movw	r2, #762
	str	r3, [r5, #272]
	str	r3, [r4, #8]
	strb	r3, [r4, #16]
	ldrh	r3, [r6, r2]
	tst	r3, #4
	bne	.L9768
.L9744:
	mov	r2, #1
	mov	r3, #0
	mov	r1, r2
	add	r0, r4, #20
	bl	__wake_up
	b	.L9726
.L9767:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L9764
	ldr	r1, [r4, #92]
	ldrd	r2, [r4, #100]
	add	r3, r3, r1
	sub	r3, r3, r2
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	bne	.L9736
.L9764:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
.L9735:
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L9743
	ldr	r0, [r4, #104]
	b	.L9745
.L9743:
	ldr	r0, [r4, #96]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #96]
	b	.L9729
.L9736:
	mov	r0, r4
	add	r10, r4, #108
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	movw	r2, #:lower16:autoremove_wake_function
	bic	r8, r3, #8128
	add	r1, sp, #24
	bic	r8, r8, #63
	mov	r3, #0
	ldr	r0, [r8, #12]
	movt	r2, #:upper16:autoremove_wake_function
	movw	r9, #4500
	str	r3, [sp, #12]
	str	r0, [sp, #16]
	str	r2, [sp, #20]
	str	r1, [sp, #24]
	str	r1, [sp, #28]
.L9742:
	mov	r2, #1
	add	r1, sp, #12
	mov	r0, r10
	bl	prepare_to_wait
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L9762
	ldr	r1, [r4, #92]
	mov	r0, r4
	ldrd	r2, [r4, #100]
	add	r3, r3, r1
	sub	r3, r3, r2
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	bne	.L9738
.L9763:
	bl	_raw_spin_unlock_irq
.L9739:
	add	r1, sp, #12
	mov	r0, r10
	bl	finish_wait
	b	.L9735
.L9738:
	bl	_raw_spin_unlock_irq
	ldr	r3, [r8, #12]
	mov	r0, r9
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L9739
	bl	schedule_timeout
	subs	r9, r0, #0
	bne	.L9742
	mov	r0, r4
	bl	_raw_spin_lock_irq
.L9762:
	mov	r0, r4
	b	.L9763
.L9768:
	movw	r1, #:lower16:.LC840
	ldrb	r2, [r4, #17]	@ zero_extendqisi2
	mov	r3, r5
	movt	r1, #:upper16:.LC840
	str	r7, [sp]
	ldr	r0, .L9769
	bl	__dynamic_pr_debug
	b	.L9744
.L9766:
	movw	r1, #:lower16:.LC839
	ldrb	r2, [r4, #17]	@ zero_extendqisi2
	mov	r3, r5
	movt	r1, #:upper16:.LC839
	add	r0, r6, #720
	str	r7, [sp]
	bl	__dynamic_pr_debug
	b	.L9727
.L9770:
	.align	2
.L9769:
	.word	.LANCHOR4+744
	.fnend
	.size	gs_close, .-gs_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_start_io, %function
rmnet_sdio_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #188
	strd	r8, [sp, #16]
	mov	r0, r6
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #192]
	mov	r7, r0
	cmp	r5, #0
	beq	.L9800
	ldr	r3, [r4, #320]
	tst	r3, #2
	beq	.L9774
	ldr	r3, [r4, #324]
	tst	r3, #2
	beq	.L9774
	movw	r9, #:lower16:rmnet_sdio_complete_epout
	mov	r5, #16
	movt	r9, #:upper16:rmnet_sdio_complete_epout
	add	r8, r4, #160
.L9775:
	ldr	r0, [r4, #88]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r8
	add	r0, r3, #36
	beq	.L9790
	cmn	r3, #4096
	bhi	.L9799
	str	r9, [r3, #28]
	ldr	r1, [r4, #164]
	bl	__list_add
	ldr	r3, [r4, #168]
	subs	r5, r5, #1
	add	r3, r3, #1
	str	r3, [r4, #168]
	bne	.L9775
	movw	r9, #:lower16:rmnet_sdio_complete_epin
	mov	r5, #200
	movt	r9, #:upper16:rmnet_sdio_complete_epin
	add	r10, r4, #132
.L9781:
	ldr	r0, [r4, #92]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r10
	add	r0, r3, #36
	beq	.L9790
	cmn	r3, #4096
	bhi	.L9799
	str	r9, [r3, #28]
	ldr	r1, [r4, #136]
	bl	__list_add
	ldr	r3, [r4, #140]
	subs	r5, r5, #1
	add	r3, r3, #1
	str	r3, [r4, #140]
	bne	.L9781
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r9, [r4, #84]
	ldr	r3, [r4, #192]
	cmp	r3, #0
	movne	r0, r6
	beq	.L9801
.L9798:
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #160]
	mov	r10, r0
	cmp	r8, r5
	beq	.L9783
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del
	ldr	r3, [r4, #168]
	mov	r1, r10
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r4, #168]
	bl	_raw_spin_unlock_irqrestore
	mov	r2, #0
	mov	r1, #32
	mvn	r3, #0
	movw	r0, #2056
	bl	__alloc_skb
	mov	r1, r7
	subs	r7, r0, #0
	mov	ip, #2048
	mov	r2, #32
	beq	.L9802
	ldr	r0, [r7, #160]
	ldr	r3, [r7, #172]
	add	r0, r0, #8
	add	r3, r3, #8
	str	r0, [r7, #160]
	str	r3, [r7, #172]
	str	r3, [r5, #-36]
	str	ip, [r5, #-32]
	str	r7, [r5, #-4]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	fp, r0, #0
	mov	r0, r6
	beq	.L9798
	mov	r0, r7
	bl	dev_kfree_skb_any
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r10, r0
.L9785:
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC214
	mov	r2, fp
	movt	r1, #:upper16:.LC214
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r8
	mov	r0, r5
	ldr	r1, [r4, #164]
	bl	__list_add
	ldr	r3, [r4, #168]
	add	r3, r3, #1
	str	r3, [r4, #168]
.L9783:
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r5, #0
	b	.L9771
.L9774:
	mov	r1, r7
	mov	r0, r6
	mov	r5, #0
	bl	_raw_spin_unlock_irqrestore
.L9771:
	mov	r0, r5
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9800:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L9771
.L9790:
	mvn	r5, #11
.L9779:
.L9778:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	bl	rmnet_sdio_free_buf
	mov	r3, #0
	str	r3, [r4, #88]
	str	r3, [r4, #92]
	str	r3, [r4, #96]
	b	.L9771
.L9802:
	mov	r0, r6
	mvn	fp, #11
	bl	_raw_spin_lock_irqsave
	mov	r10, r0
	b	.L9785
.L9801:
	movw	r0, #:lower16:.LC841
	ldr	r1, .L9803
	movt	r0, #:upper16:.LC841
	bl	printk
	b	.L9771
.L9799:
	mov	r5, r3
	b	.L9779
.L9804:
	.align	2
.L9803:
	.word	.LANCHOR5-1724
	.fnend
	.size	rmnet_sdio_start_io, .-rmnet_sdio_start_io
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_open_sdio_work, %function
rmnet_open_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #-168]
	ldr	r3, [r0, #72]
	ldr	r3, [r0, #68]
	ldr	r3, [r0, #68]
	tst	r3, #2
	beq	.L9806
	ldr	r3, [r0, #72]
	tst	r3, #2
	bne	.L9825
.L9806:
	movw	r5, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LANCHOR4
	movt	r5, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LANCHOR4
	movw	r2, #786
	ldr	r3, [r5, #4000]
	ldrh	r2, [r0, r2]
	add	r3, r3, #1
	tst	r2, #4
	str	r3, [r5, #4000]
	bne	.L9826
.L9809:
	cmp	r3, #90
	ble	.L9810
	ldr	r3, [r4, #72]
	tst	r3, #2
	beq	.L9827
	ldr	r3, [r4, #68]
	tst	r3, #2
	beq	.L9828
.L9805:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9828:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC845
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC845
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	add	r0, r0, #32
	b	dev_err
.L9827:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC844
	movt	r1, #:upper16:.LC844
	add	r0, r0, #32
	bl	dev_err
	ldr	r3, [r4, #68]
	tst	r3, #2
	bne	.L9805
	b	.L9828
.L9810:
	ldr	r5, [r4, #-52]
	mov	r0, #2000
	bl	msecs_to_jiffies
	mov	r3, r0
	mov	r2, r4
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	mov	r0, #4
	mov	r1, r5
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	queue_delayed_work_on
.L9826:
	movw	r1, #:lower16:.LC843
	ldr	r2, .L9829
	add	r0, r0, #768
	movt	r1, #:upper16:.LC843
	bl	__dynamic_pr_debug
	ldr	r3, [r5, #4000]
	b	.L9809
.L9825:
	sub	r0, r0, #252
	bl	rmnet_sdio_start_io
	ldr	r3, [r4, #-60]
	cmp	r3, #0
	beq	.L9807
	add	r2, r4, #84
	mov	r0, #4
	ldr	r1, [r4, #-52]
	bl	queue_work_on
.L9807:
	movw	r4, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC842
	ldr	r1, .L9829
	movt	r4, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC842
	ldr	r2, [r4, #4000]
	bl	printk
	mov	r3, #0
	str	r3, [r4, #4000]
	b	.L9805
.L9830:
	.align	2
.L9829:
	.word	.LANCHOR5-1704
	.fnend
	.size	rmnet_open_sdio_work, .-rmnet_open_sdio_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_complete, %function
f_midi_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r0
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r0, [r0]
	.pad #20
	sub	sp, sp, #20
	ldr	ip, [r1, #44]
	ldr	r3, [r0, #20]
	cmn	ip, #103
	ldr	r6, [r3, #24]
	bgt	.L9833
	cmn	ip, #104
	bge	.L9834
	cmn	ip, #121
	bne	.L9876
.L9835:
	ldr	r3, [r4, #8]
	mov	r2, #32
	mov	r1, r5
	mov	r0, r4
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L9877
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L9876:
	cmn	ip, #108
	bne	.L9832
.L9834:
	ldr	r3, [r0, #92]
	ldr	r0, [r5]
	cmp	r4, r3
	beq	.L9878
.L9842:
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r3, [r3, #12]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	bx	r3	@ indirect register sibling call
.L9877:
	ldr	ip, [r6]
	movw	r1, #:lower16:.LC847
	ldr	r3, [r5, #4]
	movt	r1, #:upper16:.LC847
	str	r0, [sp]
	ldr	r2, [r4, #4]
	add	r0, ip, #32
	bl	dev_err
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldr	r3, [r3, #24]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	bx	r3
.L9832:
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #810
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, r3]
	tst	r3, #4
	beq	.L9835
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC846
	add	r0, r0, #792
	ldr	r3, [r4, #4]
	str	ip, [sp]
	movt	r2, #:upper16:.LC846
	ldr	lr, [r5, #4]
	ldr	ip, [r5, #48]
	add	r1, r1, #32
	stmib	sp, {ip, lr}
	bl	__dynamic_dev_dbg
	b	.L9835
.L9833:
	cmp	ip, #0
	bne	.L9832
	ldr	r3, [r0, #92]
	cmp	r3, r4
	beq	.L9879
	ldr	r3, [r0, #88]
	cmp	r3, r4
	bne	.L9835
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	f_midi_transmit
.L9878:
	ldr	r2, [r5, #48]
	cmp	r2, #3
	bls	.L9842
	movw	r8, #:lower16:.LANCHOR5
	add	r6, r0, #1
	movt	r8, #:upper16:.LANCHOR5
	rsb	r7, r0, #6
	b	.L9844
.L9843:
	add	r3, r7, r6
	add	r6, r6, #4
	cmp	r2, r3
	bls	.L9880
.L9844:
	ldrb	r3, [r6, #-1]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L9843
	ldr	r1, [r4]
	lsr	ip, r3, #4
	add	r0, ip, #42
	ldr	r0, [r1, r0, lsl #2]
	cmp	r0, #0
	beq	.L9843
	ldr	r1, [r1, #296]
	lsr	r1, r1, ip
	tst	r1, #1
	beq	.L9843
	and	r3, r3, #15
	mov	r1, r6
	add	r3, r8, r3
	ldrb	r2, [r3, #-1680]	@ zero_extendqisi2
	bl	snd_rawmidi_receive
	ldr	r2, [r5, #48]
	b	.L9843
.L9879:
	ldr	r8, [r1]
	ldr	r2, [r1, #48]
	cmp	r2, #3
	bls	.L9835
	movw	r9, #:lower16:.LANCHOR5
	add	r7, r8, #1
	movt	r9, #:upper16:.LANCHOR5
	rsb	r8, r8, #6
	b	.L9840
.L9839:
	add	r3, r8, r7
	add	r7, r7, #4
	cmp	r3, r2
	bcs	.L9835
.L9840:
	ldrb	r3, [r7, #-1]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L9839
	ldr	r1, [r4]
	lsr	ip, r3, #4
	add	r0, ip, #42
	ldr	r0, [r1, r0, lsl #2]
	cmp	r0, #0
	beq	.L9839
	ldr	r1, [r1, #296]
	lsr	r1, r1, ip
	tst	r1, #1
	beq	.L9839
	and	r3, r3, #15
	mov	r1, r7
	add	r3, r9, r3
	ldrb	r2, [r3, #-1680]	@ zero_extendqisi2
	bl	snd_rawmidi_receive
	ldr	r2, [r5, #48]
	b	.L9839
.L9880:
	ldr	r0, [r5]
	b	.L9842
	.fnend
	.size	f_midi_complete, .-f_midi_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_write, %function
mtp_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	ip, r3
	strd	r6, [sp, #8]
	movw	r3, #834
	strd	r8, [sp, #16]
	mov	r6, r2
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r0, #124]
	mov	r0, ip
	movt	r0, #:upper16:.LANCHOR4
	.pad #60
	sub	sp, sp, #60
	ldrh	r3, [r0, r3]
	stm	sp, {r1, r2}
	ldr	r2, [r5, #84]
	str	r0, [sp, #20]
	tst	r3, #4
	str	r2, [sp, #28]
	bne	.L9930
.L9882:
	add	r7, r5, #88
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r5, #104]
	cmp	r3, #3
	beq	.L9931
	cmp	r3, #0
	beq	.L9932
	mov	r3, #2
	mov	r0, r7
	str	r3, [r5, #104]
	bl	_raw_spin_unlock_irq
	ldr	r3, [r5, #92]
	ldrh	r3, [r3, #20]
	sub	r3, r3, #1
	tst	r3, r6
	moveq	r9, #1
	movne	r9, #0
	orrs	r3, r9, r6
	beq	.L9886
	mov	r3, #57344
	movw	r2, #:lower16:autoremove_wake_function
	movt	r3, 65535
	movt	r2, #:upper16:autoremove_wake_function
	str	r3, [sp, #8]
	str	r2, [sp, #16]
	b	.L9904
.L9891:
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	ldr	r10, [r2, #1888]
	cmp	r10, r6
	movcs	r10, r6
	cmp	r10, #0
	bne	.L9933
.L9899:
	str	r10, [fp, #4]
	ldr	r0, [r5, #92]
	mov	r2, #208
	mov	r1, fp
	ldr	ip, [r0, #8]
	ldr	r4, [ip, #16]
	blx	r4
	cmp	r0, #0
	blt	.L9934
	ldr	r3, [sp]
	sub	r6, r6, r10
	add	r3, r3, r10
	str	r3, [sp]
	orrs	r3, r9, r6
	beq	.L9886
.L9904:
	ldr	r3, [r5, #104]
	cmp	r6, #0
	moveq	r9, #0
	cmp	r3, #2
	bne	.L9935
	mov	r0, r7
	add	r8, r5, #116
	bl	_raw_spin_lock_irqsave
	ldr	fp, [r5, #116]
	mov	r4, r0
	cmp	r8, fp
	beq	.L9936
	mov	r0, fp
	sub	fp, fp, #36
	bl	list_del
	mov	r1, r4
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	fp, #0
	bne	.L9891
	ldr	r3, [r5, #104]
	cmp	r3, #2
	mov	r3, #0
	bne	.L9908
.L9941:
	ldr	r1, [sp, #8]
	mov	r2, sp
	add	r10, r5, #144
	str	r3, [sp, #36]
	str	r3, [sp, #40]
	str	r3, [sp, #44]
	and	r1, r2, r1
	str	r3, [sp, #48]
	add	r2, sp, #48
	str	r3, [sp, #52]
	mov	r4, r1
	ldr	r3, [r1, #12]
	ldr	r1, [sp, #16]
	str	r10, [sp, #12]
	str	r6, [sp, #24]
	str	r3, [sp, #40]
	str	r1, [sp, #44]
	str	r2, [sp, #48]
	str	r2, [sp, #52]
	b	.L9896
.L9938:
	bl	schedule
.L9896:
	mov	r2, #1
	add	r1, sp, #36
	mov	r0, r10
	bl	prepare_to_wait
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #116]
	mov	fp, r0
	cmp	r8, r3
	mov	r0, r3
	sub	r6, r3, #36
	beq	.L9937
	bl	list_del
	mov	r1, fp
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	bne	.L9894
	ldr	r3, [r5, #104]
	cmp	r3, #2
	bne	.L9909
.L9940:
	ldr	r3, [r4, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L9938
	mov	r3, #65024
	movt	r3, 65535
	str	r3, [sp, #4]
.L9895:
	add	r1, sp, #36
	ldr	r0, [sp, #12]
	bl	finish_wait
.L9886:
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r5, #104]
	cmp	r3, #3
	beq	.L9912
	cmp	r3, #0
	movne	r3, #1
	strne	r3, [r5, #104]
.L9905:
	mov	r0, r7
	bl	_raw_spin_unlock_irq
	ldr	r2, [sp, #20]
	movw	r3, #906
	ldrh	r3, [r2, r3]
	tst	r3, #4
	bne	.L9939
.L9881:
	ldr	r0, [sp, #4]
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9933:
	ldr	r2, [sp, #8]
	mov	r3, sp
	ldr	r0, [fp]
	and	r2, r3, r2
	ldr	r3, [sp]
	ldr	r2, [r2, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r1, r3, r10; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	bne	.L9900
	mov	r2, r10
	mov	r1, r3
	bl	__copy_from_user
	cmp	r0, #0
	beq	.L9899
	mov	r4, fp
	b	.L9901
.L9937:
	mov	r1, fp
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #104]
	cmp	r3, #2
	beq	.L9940
.L9909:
	mov	r3, #0
	str	r3, [sp, #4]
	b	.L9895
.L9936:
	mov	r1, r0
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #104]
	cmp	r3, #2
	mov	r3, #0
	beq	.L9941
.L9908:
	str	r3, [sp, #4]
	b	.L9886
.L9900:
	mov	r1, r10
	mov	r4, fp
	bl	__memzero
.L9901:
	mvn	r3, #13
	str	r3, [sp, #4]
.L9903:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	ldr	r1, [r5, #120]
	add	r0, r4, #36
	mov	r2, r8
	bl	__list_add
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L9886
.L9894:
	add	r1, sp, #36
	ldr	r0, [sp, #12]
	mov	fp, r6
	ldr	r6, [sp, #24]
	bl	finish_wait
	b	.L9891
.L9912:
	mvn	r3, #124
	str	r3, [sp, #4]
	b	.L9905
.L9935:
	ldr	r2, [sp, #20]
	movw	r3, #858
	ldrh	r3, [r2, r3]
	tst	r3, #4
	mvneq	r3, #4
	streq	r3, [sp, #4]
	beq	.L9886
	ldr	r3, [sp, #28]
	movw	r2, #:lower16:.LC849
	movt	r2, #:upper16:.LC849
	ldr	r0, .L9942
	ldr	r1, [r3]
	mvn	r3, #4
	str	r3, [sp, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L9886
.L9934:
	ldr	r2, [sp, #20]
	movw	r3, #882
	mov	r4, fp
	ldrh	r3, [r2, r3]
	tst	r3, #4
	mvneq	r3, #4
	streq	r3, [sp, #4]
	beq	.L9903
	ldr	r3, [sp, #28]
	mvn	ip, #4
	movw	r2, #:lower16:.LC850
	movt	r2, #:upper16:.LC850
	str	ip, [sp, #4]
	ldr	r1, [r3]
	mov	r3, r0
	ldr	r0, .L9942+4
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L9903
.L9930:
	mov	r3, r2
	movw	r2, #:lower16:.LC848
	ldr	r1, [r3]
	movt	r2, #:upper16:.LC848
	mov	r3, r6
	add	r0, r0, #816
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L9882
.L9939:
	ldr	r3, [sp, #28]
	movw	r2, #:lower16:.LC851
	movt	r2, #:upper16:.LC851
	ldr	r0, .L9942+8
	ldr	r1, [r3]
	ldr	r3, [sp, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L9881
.L9932:
	mvn	r3, #18
	mov	r0, r7
	str	r3, [sp, #4]
	bl	_raw_spin_unlock_irq
	b	.L9881
.L9931:
	mov	r3, #1
	mvn	r2, #124
	mov	r0, r7
	str	r3, [r5, #104]
	str	r2, [sp, #4]
	bl	_raw_spin_unlock_irq
	b	.L9881
.L9943:
	.align	2
.L9942:
	.word	.LANCHOR4+840
	.word	.LANCHOR4+864
	.word	.LANCHOR4+888
	.fnend
	.size	mtp_write, .-mtp_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_disable, %function
fsg_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r3, [r0, #94]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L9945
	ldr	r0, [r0, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	mov	r1, #0
	ldr	r2, [r4, #100]
	bfc	r3, #0, #1
	strb	r3, [r4, #94]
	str	r1, [r2]
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
.L9945:
	tst	r3, #2
	beq	.L9946
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	mov	r1, #0
	ldr	r2, [r4, #104]
	bfc	r3, #1, #1
	strb	r3, [r4, #94]
	str	r1, [r2]
.L9946:
	ldr	r3, [r4, #88]
	mov	r2, #0
	str	r2, [r3, #12]
	ldr	r4, [r4, #88]
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	mov	r6, r0
	cmp	r3, #4
	bgt	.L9948
	ldr	r3, [r4, #56]
	mov	r1, #4
	ldr	r2, [r4, #168]
	str	r1, [r4, #112]
	str	r3, [r4, #116]
	cmp	r2, #0
	beq	.L9948
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L9948:
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	fsg_disable, .-fsg_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_unbind, %function
adb_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r2, #0
	mov	r5, r1
	mov	r1, #1
	strd	r6, [sp, #8]
	mov	r3, r2
	strd	r8, [sp, #16]
	add	r0, r5, #128
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	str	r2, [r5, #100]
	mov	r2, r1
	str	r1, [r5, #104]
	mov	r1, #3
	bl	__wake_up
	ldr	r4, [r5, #152]
	cmp	r4, #0
	beq	.L9961
	ldr	r6, [r5, #96]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L9961:
	add	r9, r5, #120
	add	r8, r5, #88
	b	.L9962
.L9963:
	bl	list_del
	mov	r1, r7
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L9969
	ldr	r7, [r5, #92]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r6
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L9962:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #120]
	mov	r7, r0
	cmp	r9, r4
	mov	r0, r4
	sub	r6, r4, #36
	bne	.L9963
	mov	r1, r7
	mov	r0, r8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L9969:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	adb_function_unbind, .-adb_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	send_file_work, %function
send_file_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 72
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #-100]
	.pad #92
	sub	sp, sp, #92
	str	r3, [sp, #52]
	.syntax divided
@ 751 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r3, [r0, #32]
	ldrd	r10, [r0, #48]
	ldrd	r4, [r0, #40]
	str	r3, [sp, #20]
	cmp	r10, #0
	sbcs	r3, fp, #0
	strd	r4, [sp, #56]
	mvnlt	r3, #21
	strlt	r3, [r0, #68]
	blt	.L9970
	movw	r3, #:lower16:.LANCHOR4
	mov	r7, r0
	mov	r2, r3
	movw	r3, #930
	movt	r2, #:upper16:.LANCHOR4
	ldrh	r3, [r2, r3]
	str	r2, [sp, #48]
	tst	r3, #4
	bne	.L10028
.L9973:
	ldr	r5, [r7, #56]
	cmp	r5, #0
	bne	.L10029
.L9974:
	ldr	r3, [r7, #-92]
	ldrh	r3, [r3, #20]
	sub	r3, r3, #1
	asr	r1, r3, #31
	and	r3, r3, r10
	and	r2, r1, fp
	orrs	r3, r3, r2
	moveq	r9, #1
	movne	r9, #0
	cmp	r10, #1
	sbcs	r3, fp, #0
	movlt	r3, r9
	orrge	r3, r9, #1
	cmp	r3, #0
	beq	.L9975
	mov	r3, sp
	sub	r2, r7, #68
	bic	r3, r3, #8128
	sub	r8, r7, #96
	bic	r3, r3, #63
	str	r2, [sp, #16]
	str	r3, [sp, #44]
	b	.L9993
.L9979:
	ldr	r2, [r7, #-80]
	cmp	r2, #3
	beq	.L9986
.L10035:
	cmp	r4, #0
	beq	.L10025
	movw	r2, #:lower16:.LANCHOR0
	mov	r1, #0
	ldr	r3, [r4]
	movt	r2, #:upper16:.LANCHOR0
	ldr	r2, [r2, #1888]
	cmp	r2, r10
	sbcs	r1, r1, fp
	movge	r2, r10
	cmp	r5, #0
	beq	.L9989
	mov	r1, #2
	str	r10, [r3]
	strh	r1, [r3, #4]	@ movhi
	ldrh	r1, [r7, #60]
	strh	r1, [r3, #6]	@ movhi
	ldr	r1, [r7, #64]
	str	r1, [r3, #8]
	ldr	r3, [r4]
.L9989:
	add	r1, r3, r5
	sub	r2, r2, r5
	ldr	r0, [sp, #20]
	add	r3, sp, #56
	bl	vfs_read
	subs	r3, r0, #0
	blt	.L10026
	add	r5, r3, r5
	mov	r2, #208
	mov	r1, r4
	str	r5, [r4, #4]
	ldr	r0, [r7, #-92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L10030
	subs	r10, r10, r5
	and	r3, r9, #1
	sbc	fp, fp, r5, asr #31
	cmp	r10, #1
	mov	r5, #0
	sbcs	r2, fp, #0
	orrge	r3, r3, #1
	cmp	r3, r5
	beq	.L9975
.L9993:
	orrs	r3, r10, fp
	mov	r0, r8
	moveq	r9, #0
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #16]
	mov	r6, r0
	ldr	r4, [r7, #-68]
	cmp	r4, r3
	beq	.L10031
	mov	r0, r4
	sub	r4, r4, #36
	bl	list_del
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, #0
	movne	r3, #0
	bne	.L9979
.L9978:
	ldr	r3, [r7, #-80]
	cmp	r3, #2
	bne	.L10032
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #80
	ldr	r6, [sp, #16]
	ldr	ip, [sp, #44]
	movt	r2, #:upper16:autoremove_wake_function
	mov	r3, #0
	sub	r4, r7, #40
	str	r4, [sp, #24]
	ldr	r0, [ip, #12]
	str	r9, [sp, #28]
	strd	r10, [sp, #32]
	str	r5, [sp, #40]
	mov	r5, ip
	str	r3, [sp, #68]
	str	r0, [sp, #72]
	str	r2, [sp, #76]
	str	r1, [sp, #80]
	str	r1, [sp, #84]
	b	.L9985
.L10034:
	bl	schedule
.L9985:
	mov	r2, #1
	add	r1, sp, #68
	mov	r0, r4
	bl	prepare_to_wait
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r7, #-68]
	mov	fp, r0
	cmp	r3, r6
	mov	r0, r3
	sub	r9, r3, #36
	beq	.L10033
	bl	list_del
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r9, #0
	bne	.L9999
	ldr	r3, [r7, #-80]
	cmp	r3, #2
	bne	.L10000
.L10037:
	ldr	r3, [r5, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L10034
	ldr	r9, [sp, #28]
	mov	r3, #65024
	mov	r4, #0
	ldrd	r10, [sp, #32]
	movt	r3, 65535
	ldr	r5, [sp, #40]
.L9984:
	add	r1, sp, #68
	ldr	r0, [sp, #24]
	str	r3, [sp, #28]
	bl	finish_wait
	ldr	r2, [r7, #-80]
	ldr	r3, [sp, #28]
	cmp	r2, #3
	bne	.L10035
.L9986:
	cmp	r4, #0
	beq	.L9994
	mvn	r6, #124
	b	.L9990
.L10032:
	cmp	r3, #3
	beq	.L9994
.L9975:
	mov	r6, #0
.L9981:
	ldr	r2, [sp, #48]
	movw	r3, #978
	ldrh	r3, [r2, r3]
	tst	r3, #4
	bne	.L10036
.L9995:
	str	r6, [r7, #68]
	.syntax divided
@ 841 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
.L9970:
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10029:
	adds	r10, r10, #12
	mov	r5, #12
	adc	fp, fp, #0
	b	.L9974
.L10033:
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7, #-80]
	cmp	r3, #2
	beq	.L10037
.L10000:
	mov	r4, #0
	ldr	r9, [sp, #28]
	mov	r3, r4
	ldrd	r10, [sp, #32]
	ldr	r5, [sp, #40]
	b	.L9984
.L10031:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L9978
.L9999:
	mov	r4, r9
	mov	r3, #0
	ldr	r9, [sp, #28]
	ldrd	r10, [sp, #32]
	ldr	r5, [sp, #40]
	b	.L9984
.L10026:
	mov	r6, r3
.L9990:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	ldr	r1, [r7, #-64]
	add	r0, r4, #36
	ldr	r2, [sp, #16]
	bl	__list_add
	mov	r1, r5
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L9981
.L10030:
	ldr	r2, [sp, #48]
	movw	r3, #954
	ldrh	r3, [r2, r3]
	tst	r3, #4
	bne	.L10038
.L9992:
	ldr	r3, [r7, #-80]
	cmp	r3, #0
	mvneq	r6, #4
	beq	.L9990
	mov	r3, #4
	mvn	r6, #4
	str	r3, [r7, #-80]
	b	.L9990
.L10036:
	ldr	r3, [sp, #52]
	movw	r2, #:lower16:.LC854
	movt	r2, #:upper16:.LC854
	ldr	r0, .L10039
	ldr	r1, [r3]
	mov	r3, r6
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L9995
.L10028:
	ldr	r3, [sp, #52]
	movw	r2, #:lower16:.LC852
	movt	r2, #:upper16:.LC852
	ldr	r1, [r3]
	strd	r4, [sp]
	ldr	r3, [sp, #48]
	strd	r10, [sp, #8]
	add	r1, r1, #32
	add	r0, r3, #912
	bl	__dynamic_dev_dbg
	b	.L9973
.L9994:
	mvn	r6, #124
	b	.L9981
.L10025:
	mov	r6, r3
	b	.L9981
.L10038:
	ldr	r3, [sp, #52]
	movw	r2, #:lower16:.LC853
	movt	r2, #:upper16:.LC853
	ldr	r1, [r3]
	mov	r3, r0
	ldr	r0, .L10039+4
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L9992
.L10040:
	.align	2
.L10039:
	.word	.LANCHOR4+960
	.word	.LANCHOR4+936
	.fnend
	.size	send_file_work, .-send_file_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_setup, %function
rndis_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r1]	@ unaligned
	.pad #36
	sub	sp, sp, #36
	ldrh	r3, [r1, #4]	@ unaligned
	ldrh	r9, [r1, #2]	@ unaligned
	ldrh	r10, [r1, #6]	@ unaligned
	ldr	r1, [r0, #20]
	rev16	r2, r2
	uxth	r2, r2
	cmp	r2, #8448
	ldr	r8, [r1, #24]
	ldr	r5, [r8, #4]
	beq	.L10043
	movw	r1, #41217
	cmp	r2, r1
	bne	.L10066
	cmp	r9, #0
	bne	.L10066
	ldrb	r2, [r0, #120]	@ zero_extendqisi2
	cmp	r2, r3
	bne	.L10066
	ldr	r1, [r0, #144]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	rsb	r1, r1, r1, lsl #4
	lsl	r1, r1, #2
	add	r2, r7, r1
	add	r1, r1, #52
	ldr	r0, [r2, #3732]
	add	r2, r7, #3680
	add	r1, r2, r1
	cmp	r0, r1
	ldr	r2, [r0]
	beq	.L10066
	ldr	ip, [r0, #16]
	cmp	ip, #0
	bne	.L10049
	b	.L10070
.L10051:
	ldr	ip, [r2, #16]
	cmp	ip, #0
	beq	.L10048
	mov	r2, r0
.L10049:
	cmp	r2, r1
	ldr	r0, [r2]
	bne	.L10051
.L10066:
	mvn	r7, #94
.L10041:
	mov	r0, r7
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10043:
	cmp	r9, #0
	bne	.L10066
	ldrb	r2, [r0, #120]	@ zero_extendqisi2
	cmp	r2, r3
	bne	.L10066
	movw	r2, #:lower16:rndis_qc_command_complete
	mov	r7, r10
	movt	r2, #:upper16:rndis_qc_command_complete
	mov	fp, r9
	str	r2, [r5, #28]
.L10047:
	movw	r0, #:lower16:.LANCHOR4
	movw	r2, #1002
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r2, [r0, r2]
	tst	r2, #4
	bne	.L10071
.L10055:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	r7, [r5, #4]
	mov	r1, r5
	str	r6, [r5, #32]
	mov	r2, #32
	bfi	r3, fp, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r8]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	bge	.L10041
	movw	r0, #:lower16:.LC856
	mov	r2, r7
	ldr	r1, .L10073
	movt	r0, #:upper16:.LC856
	bl	printk
	b	.L10041
.L10070:
	mov	r2, r0
.L10048:
	ldr	fp, [r2, #8]
	mov	r1, #1
	ldr	r0, [r2, #12]
	str	r1, [r2, #16]
	cmp	fp, #0
	str	r0, [sp, #16]
	beq	.L10066
	mov	r2, r0
	mov	r1, fp
	ldr	r0, [r5]
	str	r3, [sp, #20]
	bl	memcpy
	movw	r2, #:lower16:rndis_qc_response_complete
	ldr	r3, .L10073+4
	movt	r2, #:upper16:rndis_qc_response_complete
	str	r2, [r5, #28]
	ldr	r1, [r6, #144]
	rsb	r1, r1, r1, lsl #4
	lsl	r1, r1, #2
	add	r7, r7, r1
	add	r1, r1, #52
	ldr	r2, [r7, #3732]
	add	r1, r3, r1
	ldr	r3, [sp, #20]
	cmp	r1, r2
	ldr	r7, [r2]
	beq	.L10052
	str	r10, [sp, #20]
	mov	r10, r9
	mov	r9, r3
	str	r6, [sp, #24]
	mov	r6, r5
	mov	r5, fp
	str	r4, [sp, #28]
	mov	fp, r2
	mov	r4, r1
	b	.L10054
.L10059:
	mov	r7, r0
.L10054:
	cmp	fp, #0
	beq	.L10053
	ldr	r0, [fp, #8]
	cmp	r5, r0
	beq	.L10072
.L10053:
	cmp	r7, r4
	mov	fp, r7
	ldr	r0, [r7]
	bne	.L10059
	mov	r5, r6
	mov	r3, r9
	ldr	r6, [sp, #24]
	mov	r9, r10
	ldr	r10, [sp, #20]
	ldr	r4, [sp, #28]
.L10052:
	ldr	r7, [sp, #16]
	cmp	r7, #0
	blt	.L10041
	cmp	r7, r10
	movge	fp, #0
	movlt	fp, #1
	b	.L10047
.L10072:
	mov	r0, fp
	bl	list_del
	mov	r0, fp
	bl	kfree
	b	.L10053
.L10071:
	ldrb	ip, [r4]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC855
	add	r0, r0, #984
	ldr	r1, [r8]
	movt	r2, #:upper16:.LC855
	ldrb	lr, [r4, #1]	@ zero_extendqisi2
	add	r1, r1, #32
	str	lr, [sp]
	str	r9, [sp, #4]
	str	r3, [sp, #8]
	mov	r3, ip
	str	r10, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L10055
.L10074:
	.align	2
.L10073:
	.word	.LANCHOR5-1664
	.word	.LANCHOR1+3680
	.fnend
	.size	rndis_qc_setup, .-rndis_qc_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_setup, %function
rndis_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r1]	@ unaligned
	.pad #36
	sub	sp, sp, #36
	ldrh	r3, [r1, #4]	@ unaligned
	ldrh	r9, [r1, #2]	@ unaligned
	ldrh	fp, [r1, #6]	@ unaligned
	ldr	r1, [r0, #20]
	rev16	r2, r2
	uxth	r2, r2
	cmp	r2, #8448
	ldr	r7, [r1, #24]
	ldr	r5, [r7, #4]
	beq	.L10077
	movw	r1, #41217
	cmp	r2, r1
	bne	.L10100
	cmp	r9, #0
	bne	.L10100
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, r3
	bne	.L10100
	ldr	r1, [r0, #164]
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	rsb	r1, r1, r1, lsl #4
	lsl	r1, r1, #2
	add	r2, r8, r1
	add	r1, r1, #52
	ldr	r0, [r2, #3732]
	add	r2, r8, #3680
	add	r1, r2, r1
	cmp	r0, r1
	ldr	r2, [r0]
	beq	.L10100
	ldr	ip, [r0, #16]
	cmp	ip, #0
	bne	.L10083
	b	.L10104
.L10085:
	ldr	ip, [r2, #16]
	cmp	ip, #0
	beq	.L10082
	mov	r2, r0
.L10083:
	cmp	r2, r1
	ldr	r0, [r2]
	bne	.L10085
.L10100:
	mvn	r6, #94
.L10075:
	mov	r0, r6
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10077:
	cmp	r9, #0
	bne	.L10100
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, r3
	bne	.L10100
	movw	r2, #:lower16:rndis_command_complete
	mov	r8, r9
	str	r0, [r5, #32]
	movt	r2, #:upper16:rndis_command_complete
	mov	r6, fp
	str	r2, [r5, #28]
.L10081:
	movw	r0, #:lower16:.LANCHOR4
	movw	r2, #1026
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r2, [r0, r2]
	tst	r2, #4
	bne	.L10105
.L10089:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	r6, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfi	r3, r8, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	bge	.L10075
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC857
	mov	r2, r6
	movt	r1, #:upper16:.LC857
	add	r0, r0, #32
	bl	dev_err
	b	.L10075
.L10104:
	mov	r2, r0
.L10082:
	ldr	r10, [r2, #8]
	mov	r1, #1
	ldr	r0, [r2, #12]
	str	r1, [r2, #16]
	cmp	r10, #0
	str	r0, [sp, #20]
	beq	.L10100
	mov	r2, r0
	mov	r1, r10
	ldr	r0, [r5]
	str	r3, [sp, #24]
	bl	memcpy
	movw	r2, #:lower16:rndis_response_complete
	str	r6, [r5, #32]
	ldr	r3, .L10107
	movt	r2, #:upper16:rndis_response_complete
	str	r2, [r5, #28]
	ldr	r2, [r6, #164]
	rsb	r2, r2, r2, lsl #4
	lsl	r2, r2, #2
	add	r8, r8, r2
	add	r2, r2, #52
	ldr	r8, [r8, #3732]
	add	r2, r3, r2
	ldr	r3, [sp, #24]
	cmp	r2, r8
	ldr	r6, [r8]
	beq	.L10086
	str	fp, [sp, #24]
	mov	fp, r9
	mov	r9, r3
	str	r4, [sp, #28]
	mov	r4, r10
	mov	r10, r2
	b	.L10088
.L10093:
	mov	r6, r1
.L10088:
	cmp	r8, #0
	beq	.L10087
	ldr	r1, [r8, #8]
	cmp	r4, r1
	beq	.L10106
.L10087:
	cmp	r6, r10
	mov	r8, r6
	ldr	r1, [r6]
	bne	.L10093
	mov	r3, r9
	ldr	r4, [sp, #28]
	mov	r9, fp
	ldr	fp, [sp, #24]
.L10086:
	ldr	r6, [sp, #20]
	cmp	r6, #0
	blt	.L10075
	cmp	r6, fp
	movge	r8, #0
	movlt	r8, #1
	b	.L10081
.L10106:
	mov	r0, r8
	bl	list_del
	mov	r0, r8
	bl	kfree
	b	.L10087
.L10105:
	ldrb	lr, [r4]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC855
	add	r0, r0, #1008
	ldr	r1, [r7]
	movt	r2, #:upper16:.LC855
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	add	r1, r1, #32
	str	ip, [sp]
	str	r9, [sp, #4]
	str	r3, [sp, #8]
	mov	r3, lr
	str	fp, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L10089
.L10108:
	.align	2
.L10107:
	.word	.LANCHOR1+3680
	.fnend
	.size	rndis_setup, .-rndis_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_set_alt, %function
ffs_func_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmn	r2, #1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r9, [r0, #-28]
	beq	.L10110
	ldrh	ip, [r9, #178]
	ldr	r4, [r0, #-4]
	cmp	ip, #0
	beq	.L10134
	uxtb	r1, r1
	mov	r5, r4
.L10113:
	mov	r3, r5
	ldrsh	lr, [r3], #2
	cmp	lr, #0
	blt	.L10112
	cmp	lr, r1
	beq	.L10151
.L10112:
	subs	ip, ip, #1
	mov	r5, r3
	bne	.L10113
.L10134:
	mvn	r5, #32
.L10109:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10151:
	subs	r5, r5, r4
	asrmi	r5, r5, #1
	bmi	.L10109
.L10110:
	ldr	r8, [r9, #132]
	mov	r6, r2
	str	r0, [sp]
	cmp	r8, #0
	beq	.L10114
	ldr	r3, [r8, #8]
	mov	r7, #1
	mov	r5, #0
	ldr	r4, [r8, #12]
	add	r0, r3, #24
	ldr	fp, [r3, #208]
	add	r4, r4, #28
	ldrh	r10, [r3, #180]
	bl	_raw_spin_lock_irqsave
	str	r0, [sp, #4]
.L10115:
	str	r7, [fp, #32]
	ldr	r3, [r4, #-28]
	subs	r0, r3, #0
	beq	.L10116
	ldr	r3, [r3, #8]
	add	r4, r4, #28
	add	fp, fp, #56
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #-56]
	subs	r10, r10, #1
	str	r5, [r3]
	str	r5, [fp, #-16]
	bne	.L10115
.L10118:
	ldr	r0, [r8, #8]
	ldr	r1, [sp, #4]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	mov	r3, #0
	str	r3, [r9, #132]
.L10114:
	ldr	r5, [r9, #92]
	cmp	r5, #2
	bne	.L10135
	cmn	r6, #1
	beq	.L10152
	ldr	r2, [sp]
	sub	r3, r2, #36
	str	r3, [r9, #132]
	ldr	fp, [r2, #-28]
	ldr	r4, [r2, #-24]
	ldr	r6, [fp, #208]
	add	r0, fp, #24
	ldrh	r10, [fp, #180]
	add	r4, r4, #28
	bl	_raw_spin_lock_irqsave
	str	r0, [sp, #4]
	add	r6, r6, #20
	b	.L10127
.L10154:
	str	r8, [r6, #20]
	ldrb	ip, [r7, #2]	@ zero_extendqisi2
	add	r6, r6, #56
	lsr	ip, ip, #7
	strb	ip, [r6, #-23]
	ldrb	ip, [r7, #3]	@ zero_extendqisi2
	and	ip, ip, r1
	sub	ip, ip, r2
	clz	ip, ip
	lsr	ip, ip, #5
	strb	ip, [r6, #-22]
	bl	__wake_up
	subs	r10, r10, #1
	beq	.L10153
.L10127:
	ldr	r3, [fp]
	sub	r8, r4, #28
	ldr	r3, [r3, #16]
	cmp	r3, #5
	subne	r3, r3, #3
	moveq	r3, #2
	clzne	r3, r3
	lsrne	r3, r3, #5
	add	r3, r3, #2
	ldr	r7, [r8, r3, lsl #2]
	cmp	r7, #0
	beq	.L10125
	ldr	r3, [r4, #-28]
	add	r4, r4, #28
	str	r8, [r3]
	ldr	r3, [r4, #-56]
	str	r7, [r3, #28]
	ldr	r3, [r4, #-56]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	mov	r2, #1
	mov	r1, #3
	mov	r0, r6
	mov	r3, r5
	beq	.L10154
	ldr	r3, [sp]
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-28]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	blt	.L10109
.L10133:
	add	r4, r9, #116
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r9, #96]
	mov	r6, r0
	add	r0, r9, #100
	ldrh	r2, [r9, #104]
	mov	lr, r0
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r9, #96]
	cmp	r2, #0
	beq	.L10138
	add	r2, r2, r0
	mov	r3, r0
.L10132:
	ldrb	r1, [r3], #1	@ zero_extendqisi2
	sub	ip, r1, #5
	cmp	ip, #1
	strbls	r1, [r0]
	addls	r0, r0, #1
	cmp	r2, r3
	bne	.L10132
	sub	r2, r0, lr
	add	r1, r2, #1
	uxth	r2, r2
	uxth	r1, r1
.L10130:
	add	r3, r9, r2
	strh	r1, [r9, #104]	@ movhi
	mov	r0, #2
	mov	r2, #1
	mov	r1, #3
	strb	r0, [r3, #100]
	mov	r0, r4
	bl	__wake_up_locked
	mov	r1, r6
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	b	.L10109
.L10116:
	subs	r10, r10, #1
	str	r3, [fp, #40]
	add	r4, r4, #28
	add	fp, fp, #56
	bne	.L10115
	b	.L10118
.L10152:
	mov	r3, #0
	add	r4, r9, #116
	mov	r0, r4
	str	r3, [r9, #132]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r9, #96]
	mov	r6, r0
	add	r0, r9, #100
	ldrh	r2, [r9, #104]
	mov	lr, r0
	cmp	r3, #1
	streq	r5, [r9, #96]
	cmp	r2, #0
	beq	.L10136
	add	r2, r2, r0
	mov	r3, r0
.L10123:
	ldrb	r1, [r3], #1	@ zero_extendqisi2
	sub	ip, r1, #5
	cmp	ip, #1
	strbls	r1, [r0]
	addls	r0, r0, #1
	cmp	r2, r3
	bne	.L10123
	sub	r2, r0, lr
	add	r1, r2, #1
	uxth	r2, r2
	uxth	r1, r1
.L10121:
	add	r3, r9, r2
	strh	r1, [r9, #104]	@ movhi
	mov	r0, #3
	mov	r2, #1
	mov	r1, r0
	mov	r5, #0
	strb	r0, [r3, #100]
	mov	r0, r4
	bl	__wake_up_locked
	mov	r1, r6
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	b	.L10109
.L10125:
	ldr	r3, [sp]
	mvn	r5, #21
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-28]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	b	.L10109
.L10153:
	ldr	r3, [sp]
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-28]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	b	.L10133
.L10138:
	mov	r1, #1
	b	.L10130
.L10136:
	mov	r1, #1
	b	.L10121
.L10135:
	mvn	r5, #18
	b	.L10109
	.fnend
	.size	ffs_func_set_alt, .-ffs_func_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_notify_modem, %function
gqti_ctrl_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r5, #:upper16:.LANCHOR4
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r3, #3604]
	movw	r3, #1050
	str	r2, [r4, #12]
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L10171
.L10156:
	add	r6, r4, #52
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r4, #4]	@ zero_extendqisi2
	mov	r7, r0
	cmp	r3, #0
	beq	.L10172
	movw	r3, #:lower16:kmalloc_caches
	mov	r2, #16
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L10158
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L10173
	mov	r1, #16
	mov	r2, #0
	stm	r3, {r1, r2}
.L10159:
	add	r0, r3, #8
	add	r2, r4, #44
	ldr	r1, [r4, #48]
	bl	__list_add
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #1074
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L10174
.L10161:
	add	r0, r4, #32
	mov	r3, #0
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	mov	r2, #1
	mov	r1, #3
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
.L10158:
	mov	r3, r2
	str	r2, [r0, #16]
	str	r0, [r0, #20]
	b	.L10159
.L10173:
	mvn	r3, #11
	b	.L10159
.L10171:
	movw	r1, #:lower16:.LC858
	ldr	r2, .L10175
	movt	r1, #:upper16:.LC858
	ldr	r0, .L10175+4
	bl	__dynamic_pr_debug
	b	.L10156
.L10174:
	movw	r1, #:lower16:.LC676
	ldr	r2, .L10175
	movt	r1, #:upper16:.LC676
	ldr	r0, .L10175+8
	bl	__dynamic_pr_debug
	b	.L10161
.L10172:
	movw	r0, #:lower16:.LC859
	mov	r2, r4
	ldr	r1, .L10175
	movt	r0, #:upper16:.LC859
	bl	printk
	ldrd	r4, [sp]
	mov	r1, r7
	mov	r0, r6
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L10176:
	.align	2
.L10175:
	.word	.LANCHOR5-1648
	.word	.LANCHOR4+1032
	.word	.LANCHOR4+1056
	.fnend
	.size	gqti_ctrl_notify_modem, .-gqti_ctrl_notify_modem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_data_rx_tlet, %function
rmnet_data_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #164
	add	r7, r0, #148
	strd	r8, [sp, #16]
	add	r9, r0, #156
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r10, [r0, #84]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #156]
	mov	r8, r0
	cmp	r9, r5
	bne	.L10178
	b	.L10182
.L10180:
	bl	list_del
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r5, #-36]
	ldr	r2, [r5, #12]
	ldr	r0, [r4, #324]
	bl	smd_write
	mov	fp, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #12]
	mov	r8, r0
	mov	r2, r7
	mov	r0, r5
	cmp	r3, fp
	bne	.L10193
	ldr	r1, [r4, #152]
	ldr	r3, [r4, #436]
	add	r3, r3, #1
	str	r3, [r4, #436]
	bl	__list_add
	ldr	r5, [r4, #156]
	cmp	r9, r5
	beq	.L10182
.L10178:
	ldr	r0, [r4, #324]
	bl	smd_write_avail
	ldr	r3, [r5, #12]
	cmp	r0, r3
	mov	r0, r5
	bcs	.L10180
	movw	r2, #:lower16:.LANCHOR4
	movw	r1, #1098
	str	r3, [r4, #372]
	movt	r2, #:upper16:.LANCHOR4
	ldrh	r3, [r2, r1]
	tst	r3, #4
	bne	.L10194
.L10179:
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	ldr	r10, [r4, #84]
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	b	.L10183
.L10185:
	bl	list_del
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #88]
	mov	r1, r9
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	r9, #0
	mov	r8, r0
	bne	.L10195
.L10183:
	ldr	r5, [r4, #148]
	cmp	r7, r5
	mov	r0, r5
	sub	r9, r5, #36
	bne	.L10185
.L10184:
	mov	r1, r8
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L10195:
	ldr	r0, [r10]
	movw	r1, #:lower16:.LC214
	mov	r2, r9
	movt	r1, #:upper16:.LC214
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r7
	mov	r0, r5
	ldr	r1, [r4, #152]
	bl	__list_add
	b	.L10184
.L10182:
	mov	r3, #0
	str	r3, [r4, #372]
	b	.L10179
.L10193:
	ldr	r0, [r10]
	movw	r1, #:lower16:.LC861
	movt	r1, #:upper16:.LC861
	add	r0, r0, #32
	bl	dev_err
	b	.L10179
.L10194:
	ldr	r1, [r10]
	movw	r2, #:lower16:.LC860
	movt	r2, #:upper16:.LC860
	ldr	r0, .L10196
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L10179
.L10197:
	.align	2
.L10196:
	.word	.LANCHOR4+1080
	.fnend
	.size	rmnet_data_rx_tlet, .-rmnet_data_rx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_data_rx_tlet, %function
rmnet_mux_smd_data_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #368
	add	r7, r0, #112
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r10, [r0, #84]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #372]
	mov	r8, r0
	cmp	r3, #0
	beq	.L10199
	ldr	r5, [r4, #120]
	add	r9, r4, #120
	cmp	r5, r9
	bne	.L10201
	b	.L10200
.L10202:
	bl	list_del
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r5, #-36]
	ldr	r2, [r5, #12]
	ldr	r0, [r4, #128]
	bl	smd_write
	mov	fp, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #12]
	mov	r8, r0
	mov	r2, r7
	mov	r0, r5
	cmp	r3, fp
	bne	.L10218
	ldr	r1, [r4, #116]
	ldr	r3, [r4, #400]
	add	r3, r3, #1
	str	r3, [r4, #400]
	bl	__list_add
	ldr	r3, [r4, #372]
	cmp	r3, #0
	beq	.L10199
	ldr	r5, [r4, #120]
	cmp	r5, r9
	beq	.L10200
.L10201:
	ldr	r0, [r4, #128]
	bl	smd_write_avail
	ldr	r3, [r5, #12]
	cmp	r0, r3
	mov	r0, r5
	bcs	.L10202
	movw	r0, #:lower16:.LANCHOR4
	movw	r2, #1122
	str	r3, [r4, #176]
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, r2]
	tst	r3, #4
	bne	.L10219
.L10199:
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	ldr	r10, [r4, #84]
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	b	.L10205
.L10207:
	bl	list_del
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #88]
	mov	r1, r9
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	r9, #0
	mov	r8, r0
	bne	.L10220
.L10205:
	ldr	r5, [r4, #112]
	cmp	r5, r7
	mov	r0, r5
	sub	r9, r5, #36
	bne	.L10207
.L10206:
	mov	r1, r8
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L10220:
	ldr	r0, [r10]
	movw	r1, #:lower16:.LC214
	mov	r2, r9
	movt	r1, #:upper16:.LC214
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r7
	mov	r0, r5
	ldr	r1, [r4, #116]
	bl	__list_add
	b	.L10206
.L10200:
	mov	r3, #0
	str	r3, [r4, #176]
	b	.L10199
.L10218:
	ldr	r0, [r10]
	movw	r1, #:lower16:.LC863
	movt	r1, #:upper16:.LC863
	add	r0, r0, #32
	bl	dev_err
	b	.L10199
.L10219:
	ldr	r1, [r10]
	movw	r2, #:lower16:.LC862
	add	r0, r0, #1104
	movt	r2, #:upper16:.LC862
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L10199
	.fnend
	.size	rmnet_mux_smd_data_rx_tlet, .-rmnet_mux_smd_data_rx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_disconnect, %function
android_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	add	r4, r0, #32
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	mov	r0, r4
	strd	r8, [sp, #16]
	movt	r7, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	ldr	r3, [r7, #3308]
	mov	r6, r0
	ldr	r2, .L10254
	sub	r5, r3, #520
	cmp	r3, r2
	bne	.L10224
	b	.L10222
.L10252:
	ldr	r3, [r5, #520]
	cmp	r3, r2
	sub	r5, r3, #520
	beq	.L10222
.L10224:
	ldr	r3, [r3, #-512]
	cmp	r6, r3
	bne	.L10252
.L10222:
	mov	r0, r4
	bl	dev_get_drvdata
	mov	fp, r0
	mov	r0, #0
	bl	set_string_mode
	movw	r0, #:lower16:.LC785
	ldr	r1, .L10254+4
	add	r9, fp, #60
	movt	r0, #:upper16:.LC785
	bl	printk
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r3, [fp, #12]
	mov	r10, r0
	cmp	r3, #0
	beq	.L10225
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, #18]
	tst	r2, #4
	bne	.L10253
.L10226:
	ldr	r4, [r3, #36]!
	cmp	r4, r3
	sub	r4, r4, #72
	beq	.L10228
	mov	r8, #0
.L10227:
	ldr	r3, [r4, #48]
	mov	r0, r4
	cmp	r3, #0
	beq	.L10229
	blx	r3
	str	r8, [r4, #80]
	ldr	r4, [r4, #72]
	ldr	r3, [fp, #12]
	add	r3, r3, #36
	cmp	r3, r4
	sub	r4, r4, #72
	bne	.L10227
.L10228:
	ldr	r2, [r7, #2476]
	mov	r3, #0
	str	r3, [fp, #12]
	str	r3, [fp, #56]
	ldr	r3, [r2, #32]
	cmp	r3, #0
	beq	.L10232
.L10231:
	mov	r0, fp
	blx	r3
.L10233:
	ldr	r3, [fp, #56]
	cmp	r3, #0
	beq	.L10232
	ldr	r0, [fp]
	movw	r1, #:lower16:.LC864
	movt	r1, #:upper16:.LC864
	add	r0, r0, #32
	bl	_dev_info
	mov	r3, #0
	str	r3, [fp, #56]
.L10232:
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	ldr	r7, [r7, #2488]
	add	r9, r7, #88
	add	r8, r7, #1760
	mov	r0, r9
	add	r8, r8, #8
	bl	_raw_spin_lock_irqsave
	ldr	r10, [r7, #1768]
	str	r0, [sp, #4]
	cmp	r10, r8
	ldr	r4, [r10]
	beq	.L10235
	add	fp, r7, #1776
	add	fp, fp, #8
	b	.L10236
.L10239:
	mov	r4, r2
.L10236:
	mov	r0, r10
	bl	list_del
	mov	r0, r10
	ldr	r2, [r7, #1784]
	mov	r1, fp
	bl	__list_add
	cmp	r8, r4
	mov	r10, r4
	ldr	r2, [r4]
	bne	.L10239
.L10235:
	mov	r8, r7
	ldr	r10, [r8, #1776]!
	cmp	r8, r10
	ldr	r4, [r10]
	beq	.L10237
	add	fp, r8, #8
	b	.L10238
.L10240:
	mov	r4, r2
.L10238:
	mov	r0, r10
	bl	list_del
	mov	r0, r10
	ldr	r2, [r7, #1784]
	mov	r1, fp
	bl	__list_add
	cmp	r8, r4
	mov	r10, r4
	ldr	r2, [r4]
	bne	.L10240
.L10237:
	mov	r0, r9
	ldr	r1, [sp, #4]
	movw	r4, #:lower16:system_wq
	bl	_raw_spin_unlock_irqrestore
	movt	r4, #:upper16:system_wq
	add	r2, r7, #1744
	ldr	r1, [r4]
	add	r6, r6, #60
	add	r2, r2, #8
	mov	r0, #4
	bl	queue_work_on
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r3, #0
	mov	r7, r0
	ldr	r1, [r4]
	add	r2, r5, #180
	mov	r0, #4
	strb	r3, [r5, #48]
	bl	queue_work_on
	mov	r1, r7
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L10225:
	ldr	r3, [r7, #2476]
	ldr	r3, [r3, #32]
	cmp	r3, #0
	bne	.L10231
	b	.L10233
.L10253:
	ldr	r1, [fp]
	movw	r2, #:lower16:.LC5
	movt	r2, #:upper16:.LC5
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [fp, #12]
	b	.L10226
.L10229:
	str	r3, [r4, #80]
	ldr	r4, [r4, #72]
	ldr	r3, [fp, #12]
	add	r3, r3, #36
	cmp	r4, r3
	sub	r4, r4, #72
	bne	.L10227
	b	.L10228
.L10255:
	.align	2
.L10254:
	.word	.LANCHOR1+3308
	.word	.LANCHOR5-1624
	.fnend
	.size	android_disconnect, .-android_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_start, %function
gbam_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L10278
	add	r5, r0, #8
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L10279
	ldr	r0, .L10284
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L10280
.L10262:
	ldr	r0, [r3, #84]
	mov	r2, #32
	ldr	r1, [r4, #116]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L10281
.L10263:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L10278:
	add	r5, r0, #4
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L10282
	ldr	r0, .L10284+4
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L10283
.L10259:
	ldr	r0, [r3, #88]
	mov	r2, #32
	ldr	r1, [r4, #112]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L10263
	movw	r0, #:lower16:.LC355
	ldr	r1, .L10284+8
	movt	r0, #:upper16:.LC355
	bl	printk
	b	.L10263
.L10280:
	movw	r1, #:lower16:.LC354
	sub	r0, r0, #32
	ldr	r2, .L10284+12
	movt	r1, #:upper16:.LC354
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #12]
	b	.L10262
.L10283:
	movw	r1, #:lower16:.LC354
	sub	r0, r0, #24
	ldr	r2, .L10284+8
	movt	r1, #:upper16:.LC354
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #12]
	b	.L10259
.L10282:
	mov	r0, r5
	bl	_raw_spin_unlock
	ldr	r1, .L10284+8
	movw	r0, #:lower16:.LC117
.L10277:
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC117
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L10279:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC117
	ldr	r1, .L10284+12
	b	.L10277
.L10281:
	movw	r0, #:lower16:.LC355
	ldr	r1, .L10284+12
	movt	r0, #:upper16:.LC355
	bl	printk
	b	.L10263
.L10285:
	.align	2
.L10284:
	.word	.LANCHOR4-3856
	.word	.LANCHOR4-3888
	.word	.LANCHOR3+2896
	.word	.LANCHOR3+2920
	.fnend
	.size	gbam_start, .-gbam_start
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_disconnect, %function
composite_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r0, r0, #32
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	mov	r5, r0
	mov	r0, #0
	bl	set_string_mode
	movw	r0, #:lower16:.LC785
	ldr	r1, .L10309
	add	r6, r5, #60
	movt	r0, #:upper16:.LC785
	bl	printk
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #12]
	mov	r7, r0
	cmp	r3, #0
	beq	.L10287
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, #18]
	tst	r2, #4
	bne	.L10308
.L10288:
	ldr	r4, [r3, #36]!
	cmp	r4, r3
	sub	r4, r4, #72
	beq	.L10290
	mov	r8, #0
.L10289:
	ldr	r3, [r4, #48]
	mov	r0, r4
	cmp	r3, #0
	beq	.L10291
	blx	r3
	str	r8, [r4, #80]
	ldr	r3, [r5, #12]
	ldr	r4, [r4, #72]
	add	r3, r3, #36
	cmp	r3, r4
	sub	r4, r4, #72
	bne	.L10289
.L10290:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2476]
	str	r2, [r5, #12]
	str	r2, [r5, #56]
	ldr	r3, [r3, #32]
	cmp	r3, r2
	beq	.L10294
.L10293:
	mov	r0, r5
	blx	r3
.L10295:
	ldr	r3, [r5, #56]
	cmp	r3, #0
	beq	.L10294
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC864
	movt	r1, #:upper16:.LC864
	add	r0, r0, #32
	bl	_dev_info
	mov	r3, #0
	str	r3, [r5, #56]
.L10294:
	mov	r1, r7
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L10287:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2476]
	ldr	r3, [r3, #32]
	cmp	r3, #0
	bne	.L10293
	b	.L10295
.L10308:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC5
	movt	r2, #:upper16:.LC5
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r5, #12]
	b	.L10288
.L10291:
	str	r3, [r4, #80]
	ldr	r3, [r5, #12]
	ldr	r4, [r4, #72]
	add	r3, r3, #36
	cmp	r4, r3
	sub	r4, r4, #72
	bne	.L10289
	b	.L10290
.L10310:
	.align	2
.L10309:
	.word	.LANCHOR5-1624
	.fnend
	.size	composite_disconnect, .-composite_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_common_release, %function
fsg_common_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #-224]
	cmp	r3, #7
	bne	.L10344
.L10312:
	ldr	r0, [r6, #-236]
	cmp	r0, #0
	beq	.L10316
	ldr	r5, [r6, #-244]
	cmp	r5, #0
	beq	.L10317
	ldr	r7, .L10347
	add	r4, r0, #48
	add	r9, r7, #16
	add	r8, r7, #32
.L10320:
	mov	r1, r7
	mov	r0, r4
	bl	device_remove_file
	mov	r1, r9
	mov	r0, r4
	bl	device_remove_file
	mov	r1, r8
	mov	r0, r4
	bl	device_remove_file
	mov	r0, r4
	ldr	r1, .L10347+4
	bl	device_remove_file
	ldr	r0, [r4, #-48]
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	cmp	r0, #0
	beq	.L10318
	ldrh	r2, [r3, #114]
	tst	r2, #4
	bne	.L10345
.L10319:
	bl	fput
	mov	r3, #0
	str	r3, [r4, #-48]
.L10318:
	mov	r0, r4
	add	r4, r4, #392
	bl	device_unregister
	subs	r5, r5, #1
	bne	.L10320
	ldr	r0, [r6, #-236]
.L10317:
	bl	kfree
.L10316:
	ldr	r5, [r6, #-268]
	add	r4, r5, #32
	add	r5, r5, #160
.L10321:
	ldr	r0, [r4, #-32]
	add	r4, r4, #32
	bl	kfree
	cmp	r5, r4
	bne	.L10321
	ldr	r0, [r6, #-268]
	bl	kfree
	ldrb	r3, [r6, #-192]	@ zero_extendqisi2
	tst	r3, #2
	bne	.L10346
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10344:
	sub	r4, r0, #292
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #-224]
	mov	r5, r0
	cmp	r3, #6
	bgt	.L10314
	ldr	r3, [r6, #-280]
	mov	r1, #6
	ldr	r2, [r6, #-168]
	str	r1, [r6, #-224]
	str	r3, [r6, #-220]
	cmp	r2, #0
	beq	.L10314
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L10314:
	mov	r0, r4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	sub	r0, r6, #184
	bl	wait_for_completion
	b	.L10312
.L10345:
	movw	r2, #:lower16:.LC804
	add	r0, r3, #96
	movt	r2, #:upper16:.LC804
	mov	r1, r4
	bl	__dynamic_dev_dbg
	ldr	r0, [r4, #-48]
	b	.L10319
.L10346:
	sub	r0, r6, #336
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	kfree
.L10348:
	.align	2
.L10347:
	.word	.LANCHOR0+1892
	.word	.LANCHOR0+1940
	.fnend
	.size	fsg_common_release, .-fsg_common_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_function_init, %function
mass_storage_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, r1
	strd	r8, [sp, #16]
	movw	r9, #:lower16:kmalloc_caches
	movt	r9, #:upper16:kmalloc_caches
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r9, #28]
	.pad #52
	sub	sp, sp, #52
	cmp	r0, #0
	beq	.L10396
	mov	r2, #100
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L10463
.L10350:
	mov	r2, #1
	mov	r1, #256
	movw	r3, #:lower16:.LC875
	str	r2, [r4]
	movt	r3, #:upper16:.LC875
	strh	r1, [r4, #8]	@ movhi
	strb	r2, [r4, #10]
	ldr	r0, [r9, #36]
	str	r3, [sp, #36]
	ldr	r10, [r7]
	cmp	r0, #0
	beq	.L10398
	mov	r2, #340
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L10353
.L10352:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	movw	r1, #32976
	mov	r0, #128
	orr	r3, r3, #2
	strb	r3, [r5, #144]
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r5, #68]
	beq	.L10464
	ldr	r3, [r4, #76]
	movw	r1, #32976
	mov	r0, #392
	str	r3, [r5, #172]
	ldr	r3, [r4, #80]
	str	r10, [r5]
	str	r3, [r5, #176]
	ldr	r3, [r10, #4]
	str	r3, [r5, #48]
	ldr	r3, [r7, #4]
	str	r7, [r5, #4]
	str	r3, [r5, #52]
	bl	__kmalloc
	subs	r8, r0, #0
	beq	.L10369
	add	r7, r5, #28
	movw	r1, #:lower16:.LC876
	ldr	r2, .L10469
	mov	r0, r7
	movt	r1, #:upper16:.LC876
	str	r8, [r5, #100]
	bl	__init_rwsem
	ldrb	r3, [r4, #10]	@ zero_extendqisi2
	movw	ip, #:lower16:fsg_lun_release
	mov	r1, r7
	ldrb	r2, [r8, #24]	@ zero_extendqisi2
	movt	ip, #:upper16:fsg_lun_release
	mov	r7, r8
	add	r0, r10, #32
	adds	r3, r3, #0
	movne	r3, #1
	bfi	r2, r3, #3, #1
	strb	r2, [r8, #24]
	ldrb	r2, [r4, #8]	@ zero_extendqisi2
	ldrb	r3, [r8, #24]	@ zero_extendqisi2
	and	r2, r2, #1
	bfi	r3, r2, #1, #1
	bfi	r3, r2, #0, #1
	mov	r2, r3
	strb	r3, [r8, #24]
	ldrb	r3, [r4, #9]	@ zero_extendqisi2
	bfi	r2, r3, #2, #1
	mov	r3, r2
	strb	r2, [r8, #24]
	ldrb	r2, [r4, #11]	@ zero_extendqisi2
	str	ip, [r8, #380]
	bfi	r3, r2, #7, #1
	strb	r3, [r8, #24]
	str	r0, [r7, #48]!
	mov	r0, r7
	bl	dev_set_drvdata
	ldr	r1, [r4, #68]
	mov	r2, #0
	movw	r3, #:lower16:.LC865
	movt	r3, #:upper16:.LC865
	mov	r0, r7
	cmp	r1, r2
	moveq	r1, r3
	bl	dev_set_name
	mov	r0, r7
	bl	device_register
	cmp	r0, #0
	bne	.L10465
	ldr	r1, .L10469+4
	mov	r0, r7
	bl	device_create_file
	cmp	r0, #0
	bne	.L10361
	ldr	r1, .L10469+8
	mov	r0, r7
	bl	device_create_file
	cmp	r0, #0
	bne	.L10361
	ldr	r1, .L10469+12
	mov	r0, r7
	bl	device_create_file
	cmp	r0, #0
	bne	.L10361
	mov	r0, r7
	ldr	r1, .L10469+16
	bl	device_create_file
	subs	r7, r0, #0
	movne	r8, r7
	movne	r9, r8
	bne	.L10363
	ldr	r1, [r4, #4]
	cmp	r1, #0
	beq	.L10366
	mov	r0, r8
	bl	fsg_lun_open
	cmp	r0, #0
	bne	.L10361
.L10367:
	ldr	r8, [r5, #68]
	mov	r3, #1
	str	r3, [r5, #92]
	add	fp, r8, #96
.L10368:
	mov	r2, #2
	mov	r1, #208
	mov	r0, #16384
	bl	kmalloc_order_trace
	cmp	r0, #0
	str	r0, [r8]
	beq	.L10369
	cmp	r8, fp
	beq	.L10466
	add	r8, r8, #32
	str	r8, [r8, #-24]
	b	.L10368
.L10353:
	mvn	r10, #11
.L10462:
	mov	r0, r4
	bl	kfree
.L10349:
	mov	r0, r10
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10366:
	ldrb	r2, [r8, #24]	@ zero_extendqisi2
	ands	r2, r2, #12
	bne	.L10367
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC878
	mvn	r8, #21
	movt	r1, #:upper16:.LC878
	add	r0, r0, #32
	bl	dev_err
	mov	r2, #1
	mov	r3, #7
	add	r0, r5, #336
	str	r2, [r5, #92]
	str	r3, [r5, #112]
	bl	fsg_common_release
.L10357:
	mov	r10, r8
	b	.L10462
.L10398:
	mov	r5, #16
	b	.L10352
.L10396:
	mov	r4, #16
	b	.L10350
.L10361:
	mov	r8, r0
	mov	r9, r0
.L10363:
	mov	r3, #1
	str	r3, [r5, #92]
.L10360:
	mov	r3, #7
	add	r0, r5, #336
	str	r3, [r5, #112]
	bl	fsg_common_release
.L10389:
	cmn	r9, #4096
	bhi	.L10357
	ldr	r3, [r4]
	cmp	r3, #0
	movne	r7, #0
	addne	r9, sp, #36
	movne	r5, r7
	bne	.L10391
	b	.L10392
.L10393:
	ldr	r3, [r4]
	add	r5, r5, #1
	cmp	r3, r5
	bls	.L10392
.L10391:
	ldr	r1, [r8, #100]
	ldr	r0, [r6, #8]
	ldr	r2, [r9, r5, lsl #2]
	add	r1, r1, r7
	add	r7, r7, #392
	add	r1, r1, #56
	add	r0, r0, #8
	bl	sysfs_create_link
	cmp	r0, #0
	beq	.L10393
	cmp	r5, #0
	mov	r10, r0
	beq	.L10395
.L10394:
	ldr	r0, [r6, #8]
	sub	r5, r5, #1
	ldr	r1, [r9, r5, lsl #2]
	add	r0, r0, #8
	bl	sysfs_remove_link
	cmp	r5, #0
	bne	.L10394
.L10395:
	add	r0, r8, #336
	bl	fsg_common_release
	b	.L10462
.L10392:
	str	r8, [r4, #96]
	mov	r10, #0
	str	r4, [r6, #4]
	b	.L10349
.L10464:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	tst	r3, #2
	beq	.L10353
	mov	r0, r5
	mvn	r10, #11
	bl	kfree
	b	.L10462
.L10465:
	ldr	ip, [r5]
	movw	r1, #:lower16:.LC877
	mov	r3, r0
	movt	r1, #:upper16:.LC877
	mov	r2, #0
	mov	r8, r0
	mov	r9, r0
	add	r0, ip, #32
	bl	_dev_info
	mov	r3, #0
	mov	r0, r7
	str	r3, [r5, #92]
	bl	put_device
	b	.L10360
.L10369:
	mov	r3, #7
	add	r0, r5, #336
	mvn	r8, #11
	str	r3, [r5, #112]
	bl	fsg_common_release
	b	.L10357
.L10466:
	ldr	r2, [r5, #68]
	movw	r3, #65535
	str	r2, [r8, #8]
	ldrh	r1, [r4, #92]
	cmp	r1, r3
	beq	.L10467
.L10372:
	ldr	r3, [r4, #84]
	movw	r2, #:lower16:.LC866
	add	r0, r5, #180
	ldr	ip, [r4, #88]
	movt	r2, #:upper16:.LC866
	cmp	r3, #0
	moveq	r3, r2
	cmp	ip, #0
	beq	.L10457
	movw	r8, #:lower16:.LC867
	movt	r8, #:upper16:.LC867
.L10375:
	movw	r2, #:lower16:.LC880
	str	ip, [sp]
	movt	r2, #:upper16:.LC880
	str	r1, [sp, #4]
	mov	r1, #29
	bl	snprintf
	ldm	r8, {r1, ip}
	movw	r2, #:lower16:.LC881
	movt	r2, #:upper16:.LC881
	ldr	r0, [r8, #8]
	ldm	r2, {r10, lr}
	mov	r2, #0
	strb	r2, [r5, #234]
	str	r1, [r5, #218]	@ unaligned
	ldr	r1, [r8, #12]
	str	r10, [r5, #209]	@ unaligned
	str	lr, [r5, #213]	@ unaligned
	str	ip, [r5, #222]	@ unaligned
	str	r0, [r5, #226]	@ unaligned
	str	r1, [r5, #230]	@ unaligned
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L10376
	ldr	r3, [r5]
	movw	r0, #:lower16:.LC478
	movt	r0, #:upper16:.LC478
	ldr	r1, [r3, #28]
	bl	strcmp
	adds	r3, r0, #0
	movne	r3, #1
.L10376:
	ldrb	lr, [r5, #144]	@ zero_extendqisi2
	mov	r10, #0
	mov	r2, #1
	movw	ip, #:lower16:.LC869
	movw	r0, #:lower16:fsg_main_thread
	str	r10, [r5, #44]
	movt	ip, #:upper16:.LC869
	movt	r0, #:upper16:fsg_main_thread
	str	r2, [r5, #336]
	mov	r1, r5
	mvn	r2, #0
	bfi	lr, r3, #0, #1
	strb	lr, [r5, #144]
	ldr	r3, [r4, #72]
	cmp	r3, r10
	moveq	r3, ip
	bl	kthread_create_on_node
	cmn	r0, #4096
	mov	r8, r0
	str	r0, [r5, #168]
	movhi	r9, r0
	bhi	.L10360
	movw	r1, #:lower16:.LC719
	ldr	r2, .L10469+20
	add	r0, r5, #156
	movt	r1, #:upper16:.LC719
	str	r10, [r5, #152]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC882
	ldr	r2, .L10469
	add	r0, r5, #16
	movt	r1, #:upper16:.LC882
	bl	__init_waitqueue_head
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC883
	movt	r1, #:upper16:.LC883
	add	r0, r0, #32
	bl	_dev_info
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC884
	movt	r1, #:upper16:.LC884
	ldr	r2, [r5, #92]
	add	r0, r0, #32
	bl	_dev_info
	ldr	r0, [r9, #48]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [sp, #16]
	beq	.L10379
	mov	r2, #4096
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	str	r0, [sp, #16]
.L10379:
	ldr	r3, [r5, #92]
	ldr	r8, [r5, #100]
	cmp	r3, #0
	str	r3, [sp, #12]
	ble	.L10380
	movw	r3, #:lower16:.LC870
	movw	r2, #:lower16:.LC871
	str	r4, [sp, #28]
	movw	fp, #:lower16:.LC873
	movt	r3, #:upper16:.LC870
	movt	r2, #:upper16:.LC871
	add	r8, r8, #48
	movt	fp, #:upper16:.LC873
	strd	r2, [sp, #20]
.L10381:
	ldr	r0, [r8, #-48]
	sub	r4, r8, #48
	cmp	r0, #0
	beq	.L10431
	ldr	r3, [sp, #16]
	mov	r2, #4096
	add	r0, r0, #8
	subs	r1, r3, #0
	beq	.L10383
	bl	d_path
	cmn	r0, #4096
	mov	r10, r0
	bhi	.L10383
.L10382:
	ldrb	r4, [r4, #24]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC872
	movw	lr, #:lower16:.LC874
	movt	ip, #:upper16:.LC872
	movt	lr, #:upper16:.LC874
	movw	r9, #:lower16:.LC886
	movw	r1, #:lower16:.LC885
	movt	r9, #:upper16:.LC886
	mov	r0, r8
	tst	r4, #4
	movt	r1, #:upper16:.LC885
	moveq	ip, fp
	tst	r4, #2
	moveq	lr, fp
	tst	r4, #8
	mov	r2, ip
	mov	r3, lr
	bne	.L10386
	str	fp, [sp]
	add	r7, r7, #1
	add	r8, r8, #392
	str	r10, [sp, #4]
	bl	_dev_info
	ldr	r3, [sp, #12]
	cmp	r3, r7
	bne	.L10381
.L10461:
	ldr	r4, [sp, #28]
.L10380:
	ldr	r0, [sp, #16]
	bl	kfree
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #1146
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L10468
.L10388:
	ldr	r0, [r5, #168]
	mov	r9, r5
	mov	r8, r5
	bl	wake_up_process
	b	.L10389
.L10386:
	movw	r1, #:lower16:.LC885
	stm	sp, {r9, r10}
	add	r7, r7, #1
	movt	r1, #:upper16:.LC885
	add	r8, r8, #392
	bl	_dev_info
	ldr	r3, [sp, #12]
	cmp	r3, r7
	bne	.L10381
	b	.L10461
.L10383:
	ldr	r10, [sp, #20]
	b	.L10382
.L10431:
	ldr	r10, [sp, #24]
	b	.L10382
.L10467:
	ldr	r8, [r10, #28]
	movw	r0, #:lower16:.LC471
	movt	r0, #:upper16:.LC471
	mov	r1, r8
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #769
	beq	.L10372
	movw	r0, #:lower16:.LC472
	mov	r1, r8
	movt	r0, #:upper16:.LC472
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #770
	beq	.L10372
	movw	r0, #:lower16:.LC473
	mov	r1, r8
	movt	r0, #:upper16:.LC473
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #771
	beq	.L10372
	movw	r0, #:lower16:.LC474
	mov	r1, r8
	movt	r0, #:upper16:.LC474
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #774
	beq	.L10372
	movw	r0, #:lower16:.LC475
	mov	r1, r8
	movt	r0, #:upper16:.LC475
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #776
	beq	.L10372
	movw	r0, #:lower16:.LC476
	mov	r1, r8
	movt	r0, #:upper16:.LC476
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #785
	beq	.L10372
	movw	r0, #:lower16:.LC477
	mov	r1, r8
	movt	r0, #:upper16:.LC477
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #786
	beq	.L10372
	movw	r0, #:lower16:.LC478
	mov	r1, r8
	movt	r0, #:upper16:.LC478
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #787
	beq	.L10372
	movw	r0, #:lower16:.LC479
	mov	r1, r8
	movt	r0, #:upper16:.LC479
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #788
	beq	.L10372
	movw	r0, #:lower16:.LC480
	mov	r1, r8
	movt	r0, #:upper16:.LC480
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #790
	beq	.L10372
	movw	r0, #:lower16:.LC481
	mov	r1, r8
	movt	r0, #:upper16:.LC481
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #792
	beq	.L10372
	movw	r0, #:lower16:.LC482
	mov	r1, r8
	movt	r0, #:upper16:.LC482
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #793
	beq	.L10372
	movw	r0, #:lower16:.LC483
	mov	r1, r8
	movt	r0, #:upper16:.LC483
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #800
	beq	.L10372
	movw	r0, #:lower16:.LC484
	mov	r1, r8
	movt	r0, #:upper16:.LC484
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #801
	beq	.L10372
	movw	r0, #:lower16:.LC485
	mov	r1, r8
	movt	r0, #:upper16:.LC485
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #802
	beq	.L10372
	movw	r0, #:lower16:.LC486
	mov	r1, r8
	movt	r0, #:upper16:.LC486
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #803
	beq	.L10372
	movw	r0, #:lower16:.LC487
	mov	r1, r8
	movt	r0, #:upper16:.LC487
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #804
	beq	.L10372
	movw	r0, #:lower16:.LC488
	mov	r1, r8
	movt	r0, #:upper16:.LC488
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #805
	beq	.L10372
	movw	r0, #:lower16:.LC489
	mov	r1, r8
	movt	r0, #:upper16:.LC489
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #806
	beq	.L10372
	movw	r0, #:lower16:.LC490
	mov	r1, r8
	movt	r0, #:upper16:.LC490
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #807
	beq	.L10372
	movw	r0, #:lower16:.LC491
	mov	r1, r8
	movt	r0, #:upper16:.LC491
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #808
	beq	.L10372
	movw	r0, #:lower16:.LC492
	mov	r1, r8
	movt	r0, #:upper16:.LC492
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #809
	beq	.L10372
	movw	r0, #:lower16:.LC493
	mov	r1, r8
	movt	r0, #:upper16:.LC493
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #816
	beq	.L10372
	movw	r0, #:lower16:.LC494
	mov	r1, r8
	movt	r0, #:upper16:.LC494
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #817
	beq	.L10372
	movw	r0, #:lower16:.LC495
	mov	r1, r8
	movt	r0, #:upper16:.LC495
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #818
	beq	.L10372
	movw	r0, #:lower16:.LC496
	mov	r1, r8
	movt	r0, #:upper16:.LC496
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #819
	beq	.L10372
	movw	r0, #:lower16:.LC497
	mov	r1, r8
	movt	r0, #:upper16:.LC497
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #820
	beq	.L10372
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC879
	mov	r2, r8
	movt	r1, #:upper16:.LC879
	add	r0, r0, #32
	bl	dev_warn
	movw	r1, #921
	b	.L10372
.L10457:
	ldr	r2, [r5, #100]
	ldrb	r2, [r2, #24]	@ zero_extendqisi2
	tst	r2, #8
	beq	.L10427
	movw	r8, #:lower16:.LC867
	movt	r8, #:upper16:.LC867
	mov	ip, r8
	b	.L10375
.L10463:
	mvn	r10, #11
	b	.L10349
.L10427:
	movw	ip, #:lower16:.LC868
	movw	r8, #:lower16:.LC867
	movt	ip, #:upper16:.LC868
	movt	r8, #:upper16:.LC867
	b	.L10375
.L10468:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC887
	ldr	r3, [r5, #168]
	movt	r2, #:upper16:.LC887
	ldr	r0, .L10469+24
	add	r1, r1, #32
	ldr	r3, [r3, #568]
	bl	__dynamic_dev_dbg
	b	.L10388
.L10470:
	.align	2
.L10469:
	.word	.LANCHOR1+4004
	.word	.LANCHOR0+1924
	.word	.LANCHOR0+1940
	.word	.LANCHOR0+1908
	.word	.LANCHOR0+1892
	.word	.LANCHOR1+3972
	.word	.LANCHOR4+1128
	.fnend
	.size	mass_storage_function_init, .-mass_storage_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_disable, %function
android_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r0, #8]
	ldr	r1, [r0, #20]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r0, #20]
	bne	.L10471
	mov	r6, r0
	ldr	r0, [r5]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L10473
	blx	r3
	ldr	r0, [r5]
.L10473:
	ldr	r0, [r0, #4]
	ldr	r1, [r5, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r4, [r6, #508]!
	cmp	r6, r4
	sub	r4, r4, #120
	beq	.L10471
	movw	r3, #:lower16:.LANCHOR2
	movw	r9, #:lower16:.LC888
	ldr	r10, .L10497
	movt	r3, #:upper16:.LANCHOR2
	movt	r9, #:upper16:.LC888
	add	r7, r5, #60
	str	r3, [sp, #4]
	b	.L10482
.L10484:
	add	r0, r4, #28
	bl	list_del
.L10481:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r1, r4
	mov	r0, r5
	bl	unbind_config
.L10475:
	ldr	r4, [r4, #120]
	cmp	r6, r4
	sub	r4, r4, #120
	beq	.L10471
.L10482:
	mov	r3, r4
	mov	r1, r10
	ldr	r2, [r5, #12]
	mov	r0, r9
	bl	printk
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #24]
	mov	r8, r0
	cmp	r3, #0
	beq	.L10495
	ldr	r3, [r5, #12]
	cmp	r4, r3
	bne	.L10484
	ldr	r3, [sp, #4]
	ldrh	r3, [r3, #18]
	tst	r3, #4
	moveq	r2, r4
	bne	.L10496
.L10476:
	ldr	r3, [r2, #36]!
	cmp	r3, r2
	sub	fp, r3, #72
	beq	.L10478
.L10477:
	ldr	r2, [fp, #48]
	mov	r0, fp
	cmp	r2, #0
	beq	.L10479
	blx	r2
	mov	r3, #0
	str	r3, [fp, #80]
	ldr	r2, [r5, #12]
	ldr	r3, [fp, #72]
	add	r2, r2, #36
	cmp	r2, r3
	sub	fp, r3, #72
	bne	.L10477
.L10478:
	mov	r3, #0
	str	r3, [r5, #12]
	str	r3, [r5, #56]
	ldr	r3, [r4, #24]
	cmp	r3, #0
	beq	.L10481
	b	.L10484
.L10471:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10495:
	movw	r0, #:lower16:.LC102
	mov	r1, #896
	movt	r0, #:upper16:.LC102
	bl	warn_slowpath_null
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L10475
.L10479:
	str	r2, [fp, #80]
	ldr	r2, [r5, #12]
	ldr	r3, [fp, #72]
	add	r2, r2, #36
	cmp	r3, r2
	sub	fp, r3, #72
	bne	.L10477
	b	.L10478
.L10496:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC5
	movt	r2, #:upper16:.LC5
	ldr	r0, [sp, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r2, [r5, #12]
	b	.L10476
.L10498:
	.align	2
.L10497:
	.word	.LANCHOR5-1600
	.fnend
	.size	android_disable, .-android_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_android_function_enable, %function
adb_android_function_enable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mov	r1, #1
	ldr	r0, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, #0
	beq	.L10501
	bx	lr
.L10501:
	b	android_disable
	.fnend
	.size	adb_android_function_enable, .-adb_android_function_enable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_release, %function
adb_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r1, .L10525
	ldr	r0, .L10525+4
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	___ratelimit
	cmp	r0, #0
	bne	.L10521
.L10503:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #3476]
	ldrb	r2, [r3, #160]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L10522
.L10504:
	add	r2, r3, #116
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10522:
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r6, [r3, #1984]
	ldr	r5, [r3, #2000]
	cmp	r5, #0
	beq	.L10523
.L10505:
	add	r7, r5, #24
	mov	r8, #0
	mov	r0, r7
	bl	mutex_lock
	ldrb	r3, [r6, #1]	@ zero_extendqisi2
	strb	r8, [r6]
	cmp	r3, r8
	beq	.L10524
	mov	r0, r5
	bl	android_disable
	str	r8, [r6, #4]
.L10509:
	mov	r0, r7
	bl	mutex_unlock
.L10508:
	ldr	r3, [r4, #3476]
	mov	r2, #1
	strb	r2, [r3, #161]
	b	.L10504
.L10523:
	ldr	r5, [r6, #4]
	cmp	r5, #0
	bne	.L10505
	movw	r0, #:lower16:.LC890
	ldr	r1, .L10525+8
	movt	r0, #:upper16:.LC890
	bl	printk
	ldrb	r3, [r6, #1]	@ zero_extendqisi2
	strb	r5, [r6]
	cmp	r3, #0
	moveq	r5, r3
	str	r5, [r6, #4]
	b	.L10508
.L10524:
	str	r3, [r6, #4]
	b	.L10509
.L10521:
	movw	r0, #:lower16:.LC889
	movt	r0, #:upper16:.LC889
	bl	printk
	b	.L10503
.L10526:
	.align	2
.L10525:
	.word	.LANCHOR5-1580
	.word	.LANCHOR0+1956
	.word	.LANCHOR5-1568
	.fnend
	.size	adb_release, .-adb_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_enable, %function
ffs_function_enable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mov	r1, #1
	ldr	r0, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, #0
	beq	.L10529
	bx	lr
.L10529:
	b	android_disable
	.fnend
	.size	ffs_function_enable, .-ffs_function_enable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_enable, %function
android_enable:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r6, [r0, #8]
	ldr	r5, [r0, #20]
	cmp	r5, #0
	beq	.L10708
	sub	r5, r5, #1
	mov	r9, r0
	cmp	r5, #0
	str	r5, [r0, #20]
	movne	r5, #0
	bne	.L10530
	mov	r7, r9
	ldr	r4, [r7, #508]!
	cmp	r7, r4
	sub	r4, r4, #120
	beq	.L10533
	ldr	r8, .L10725
	movw	r3, #:lower16:.LC896
	movw	r2, #:lower16:.LC899
	movt	r3, #:upper16:.LC896
	movt	r2, #:upper16:.LC899
	str	r3, [sp, #16]
	str	r2, [sp, #20]
.L10571:
	ldrh	r2, [r8]
	ldrb	r3, [r4, #20]	@ zero_extendqisi2
	tst	r2, #4
	bne	.L10709
.L10534:
	cmp	r3, #0
	bne	.L10535
	ldr	r2, .L10725+4
	mvn	r5, #21
	ldrh	r2, [r2]
	tst	r2, #4
	bne	.L10576
.L10537:
	ldr	r2, .L10725+8
	movw	r0, #:lower16:.LC900
	mov	r3, r5
	movt	r0, #:upper16:.LC900
	mov	r1, r2
	bl	printk
.L10530:
	mov	r0, r5
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10535:
	mov	r2, r6
	ldr	r1, [r2, #36]!
	cmp	r2, r1
	sub	r0, r1, #28
	bne	.L10541
	b	.L10538
.L10710:
	ldr	r1, [r0, #28]
	cmp	r2, r1
	sub	r0, r1, #28
	beq	.L10538
.L10541:
	ldrb	r1, [r1, #-8]	@ zero_extendqisi2
	cmp	r1, r3
	bne	.L10710
	ldr	r2, .L10725+4
	ldrh	r2, [r2]
	tst	r2, #4
	beq	.L10711
	ldr	r1, [r6]
	mvn	r5, #15
.L10536:
	ldr	ip, [r4]
	add	r1, r1, #32
	stm	sp, {r3, r5}
	ldr	r0, .L10725+12
	ldr	r2, [sp, #20]
	mov	r3, ip
	bl	__dynamic_dev_dbg
.L10570:
	cmp	r5, #0
	blt	.L10537
.L10569:
	ldr	r4, [r4, #120]
	cmp	r7, r4
	sub	r4, r4, #120
	bne	.L10571
.L10533:
	movw	r3, #:lower16:.LC901
	mov	r2, #0
	movt	r3, #:upper16:.LC901
	cmp	r9, #0
	str	r3, [sp, #24]
	str	r2, [sp, #28]
	beq	.L10530
	ldr	r6, .L10725+16
	movw	r0, #:lower16:.LC902
	add	r4, r9, #452
	movt	r0, #:upper16:.LC902
	mov	r2, r6
	mov	r1, r6
	bl	printk
	mov	r0, r4
	bl	work_busy
	cmp	r0, #0
	beq	.L10573
	mov	r0, r4
	bl	cancel_delayed_work
	movw	r0, #:lower16:.LC903
	mov	r2, r6
	mov	r1, r6
	movt	r0, #:upper16:.LC903
	bl	printk
.L10573:
	ldr	r0, [r9, #12]
	add	r2, sp, #24
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env
	mov	r3, #0
	mov	r0, #1
	str	r3, [r9, #504]
	bl	msecs_to_jiffies
	movw	r1, #:lower16:system_wq
	mov	r3, r0
	movt	r1, #:upper16:system_wq
	mov	r2, r4
	ldr	r1, [r1]
	mov	r0, #4
	bl	queue_delayed_work_on
	b	.L10530
.L10538:
	add	fp, r4, #28
	str	r6, [r4, #24]
	ldr	r1, [r6, #40]
	mov	r0, fp
	mov	r10, #0
	bl	__list_add
	add	r2, r4, #36
	mov	r1, #64
	add	r0, r4, #48
	str	r2, [r4, #36]
	str	r2, [r4, #40]
	strb	r10, [r4, #44]
	bl	__memzero
	mov	r0, r4
	bl	android_bind_config
	subs	r5, r0, #0
	blt	.L10712
	ldr	r3, .L10725+20
	ldr	r1, [r6]
	ldrh	r3, [r3]
	tst	r3, #4
	bne	.L10713
.L10545:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L10549
	ldr	r0, .L10725+24
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L10714
.L10549:
	ldr	r3, [r4, #52]
	cmp	r3, #0
	beq	.L10550
	ldr	r0, .L10725+24
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L10715
.L10550:
	ldr	r3, [r4, #56]
	cmp	r3, #0
	beq	.L10551
	ldr	r0, .L10725+24
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L10716
.L10551:
	ldr	r3, [r4, #60]
	cmp	r3, #0
	beq	.L10552
	ldr	r0, .L10725+24
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L10717
.L10552:
	ldr	r3, [r4, #64]
	cmp	r3, #0
	beq	.L10553
	ldr	r0, .L10725+24
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L10718
.L10553:
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L10554
	ldr	r0, .L10725+24
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L10719
.L10554:
	ldr	r3, [r4, #72]
	cmp	r3, #0
	beq	.L10555
	ldr	r0, .L10725+24
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L10720
.L10556:
	ldr	r3, [r4, #80]
	cmp	r3, #0
	beq	.L10557
.L10723:
	ldr	r0, .L10725+24
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L10721
.L10558:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L10560
.L10561:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L10562
.L10724:
	ldr	r0, .L10725+24
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L10722
.L10563:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L10565
.L10566:
	mov	r0, r1
	ldr	r3, [r0, #8]!
	cmp	r0, r3
	sub	r3, r3, #12
	beq	.L10567
.L10543:
	mov	r1, #0
.L10568:
	ldr	r2, [r3, #12]
	str	r1, [r3]
	cmp	r0, r2
	sub	r3, r2, #12
	bne	.L10568
.L10567:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	cmp	r5, #0
	str	r2, [r3, #3228]
	beq	.L10569
	ldr	r3, .L10725+4
	ldrh	r3, [r3]
	tst	r3, #4
	beq	.L10570
	ldr	r1, [r6]
	b	.L10575
.L10709:
	ldr	r1, [r6]
	str	r4, [sp, #4]
	ldr	ip, [r4]
	ldr	r0, .L10725+28
	ldr	r2, [sp, #16]
	add	r1, r1, #32
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldrb	r3, [r4, #20]	@ zero_extendqisi2
	b	.L10534
.L10712:
	mov	r0, fp
	bl	list_del
	str	r10, [r4, #24]
	ldr	r1, [r6]
	mov	r0, r1
	ldr	r3, [r0, #8]!
	cmp	r0, r3
	sub	r3, r3, #12
	bne	.L10543
	ldr	r2, .L10725+4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r10, [r3, #3228]
	ldrh	r3, [r2]
	tst	r3, #4
	beq	.L10537
.L10575:
	ldrb	r3, [r4, #20]	@ zero_extendqisi2
	b	.L10536
.L10720:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC898
	add	r1, r1, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC898
	mov	r3, #6
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
.L10555:
	ldr	r3, [r4, #76]
	cmp	r3, #0
	beq	.L10556
	ldr	r0, .L10725+24
	ldrh	r2, [r0]
	tst	r2, #4
	beq	.L10556
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC898
	add	r1, r1, #32
	mov	r3, #7
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC898
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #80]
	ldr	r1, [r6]
	cmp	r3, #0
	bne	.L10723
.L10557:
	ldr	r3, [r4, #84]
	cmp	r3, #0
	beq	.L10559
	ldr	r0, .L10725+24
	ldrh	r2, [r0]
	tst	r2, #4
	beq	.L10558
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC898
	add	r1, r1, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC898
	mov	r3, #9
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
.L10559:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L10560
	ldr	r0, .L10725+24
	ldrh	r2, [r0]
	tst	r2, #4
	beq	.L10561
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC898
	add	r1, r1, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC898
	mov	r3, #10
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
.L10560:
	ldr	r3, [r4, #92]
	cmp	r3, #0
	beq	.L10561
	ldr	r0, .L10725+24
	ldrh	r2, [r0]
	tst	r2, #4
	beq	.L10561
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC898
	add	r1, r1, #32
	mov	r3, #11
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC898
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #96]
	ldr	r1, [r6]
	cmp	r3, #0
	bne	.L10724
.L10562:
	ldr	r3, [r4, #100]
	cmp	r3, #0
	beq	.L10564
	ldr	r0, .L10725+24
	ldrh	r2, [r0]
	tst	r2, #4
	beq	.L10563
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC898
	add	r1, r1, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC898
	mov	r3, #13
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
.L10564:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L10565
	ldr	r0, .L10725+24
	ldrh	r2, [r0]
	tst	r2, #4
	beq	.L10566
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC898
	add	r1, r1, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC898
	mov	r3, #14
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
.L10565:
	ldr	r3, [r4, #108]
	cmp	r3, #0
	beq	.L10566
	ldr	r0, .L10725+24
	ldrh	r2, [r0]
	tst	r2, #4
	beq	.L10566
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC898
	add	r1, r1, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC898
	mov	r3, #15
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L10566
.L10576:
	ldr	r1, [r6]
	b	.L10536
.L10713:
	ldrb	r2, [r4, #45]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC873
	movw	lr, #:lower16:.LC891
	movt	ip, #:upper16:.LC873
	movt	lr, #:upper16:.LC891
	ldrb	r3, [r4, #20]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC892
	add	r10, r1, #32
	movt	r0, #:upper16:.LC892
	tst	r2, #1
	moveq	lr, ip
	tst	r2, #2
	moveq	r0, ip
	tst	r2, #4
	beq	.L10548
	ldr	r1, [r1, #20]
	movw	r2, #:lower16:.LC893
	movw	ip, #:lower16:.LC894
	movt	r2, #:upper16:.LC893
	movt	ip, #:upper16:.LC894
	cmp	r1, #2
	movhi	ip, r2
.L10548:
	movw	r2, #:lower16:.LC897
	mov	r1, r10
	stm	sp, {r4, lr}
	str	r0, [sp, #8]
	movt	r2, #:upper16:.LC897
	ldr	r0, .L10725+32
	str	ip, [sp, #12]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L10545
.L10721:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC898
	add	r1, r1, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC898
	mov	r3, #8
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L10557
.L10719:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC898
	add	r1, r1, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC898
	mov	r3, #5
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L10554
.L10718:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC898
	add	r1, r1, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC898
	mov	r3, #4
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L10553
.L10722:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC898
	add	r1, r1, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC898
	mov	r3, #12
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L10562
.L10717:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC898
	add	r1, r1, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC898
	mov	r3, #3
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L10552
.L10716:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC898
	add	r1, r1, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC898
	mov	r3, #2
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L10551
.L10715:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC898
	add	r1, r1, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC898
	mov	r3, #1
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L10550
.L10714:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC898
	add	r1, r1, #32
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC898
	mov	r3, #0
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L10549
.L10708:
	movw	r0, #:lower16:.LC895
	movw	r1, #503
	movt	r0, #:upper16:.LC895
	bl	warn_slowpath_null
	b	.L10530
.L10711:
	mvn	r5, #15
	b	.L10537
.L10726:
	.align	2
.L10725:
	.word	.LANCHOR4+1170
	.word	.LANCHOR4+1194
	.word	.LANCHOR5-1548
	.word	.LANCHOR4+1176
	.word	.LANCHOR5-1532
	.word	.LANCHOR4+1218
	.word	.LANCHOR4+1242
	.word	.LANCHOR4+1152
	.word	.LANCHOR4+1200
	.fnend
	.size	android_enable, .-android_enable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	enable_store, %function
enable_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r3
	mov	r7, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	bl	dev_get_drvdata
	ldr	r4, [r0, #8]
	mov	r3, #0
	str	r3, [sp, #36]
	cmp	r4, r3
	mvneq	r4, #18
	bne	.L10774
.L10727:
	mov	r0, r4
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10774:
	add	r3, r0, #24
	mov	r5, r0
	mov	r0, r3
	str	r3, [sp, #8]
	bl	mutex_lock
	movw	r1, #:lower16:.LC427
	add	r2, sp, #36
	movt	r1, #:upper16:.LC427
	mov	r0, r7
	bl	sscanf
	movw	r0, #:lower16:.LC906
	ldrb	r2, [r5, #16]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC906
	ldr	r1, [sp, #36]
	bl	printk
	ldr	r3, [sp, #36]
	cmp	r3, #0
	beq	.L10729
	ldrb	r3, [r5, #16]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L10775
	ldr	r8, .L10782
	ldr	r0, .L10782+4
	sub	r1, r8, #8
	bl	___ratelimit
	cmp	r0, #0
	bne	.L10776
.L10745:
	ldr	r0, [sp, #8]
	mov	r4, r6
	bl	mutex_unlock
	b	.L10727
.L10729:
	ldrb	r1, [r5, #16]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L10777
	ldr	r0, [r4]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L10753
	blx	r3
.L10753:
	mov	r3, #0
	strb	r3, [r5, #16]
	b	.L10745
.L10777:
	mov	r0, r5
	mov	r9, r5
	bl	android_disable
	ldr	r7, [r9, #508]!
	sub	r7, r7, #120
.L10747:
	add	r3, r7, #120
	cmp	r3, r9
	beq	.L10753
	mov	r8, r7
	ldr	r4, [r8, #112]!
	cmp	r8, r4
	sub	r4, r4, #4
	beq	.L10749
.L10748:
	ldr	r3, [r4]
	mov	r0, r3
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L10750
	blx	r3
	ldr	r4, [r4, #4]
	cmp	r8, r4
	sub	r4, r4, #4
	bne	.L10748
.L10749:
	ldr	r7, [r7, #120]
	sub	r7, r7, #120
	b	.L10747
.L10750:
	ldr	r4, [r4, #4]
	cmp	r8, r4
	sub	r4, r4, #4
	bne	.L10748
	b	.L10749
.L10776:
	ldrb	ip, [r5, #16]	@ zero_extendqisi2
	movw	r3, #:lower16:.LC904
	movw	r2, #:lower16:.LC905
	movt	r3, #:upper16:.LC904
	movw	r0, #:lower16:.LC918
	movt	r2, #:upper16:.LC905
	sub	r1, r8, #8
	movt	r0, #:upper16:.LC918
	cmp	ip, #0
	movne	r2, r3
	bl	printk
	b	.L10745
.L10775:
	movw	r3, #:lower16:.LANCHOR1
	movw	ip, #:lower16:.LC908
	ldr	r0, .L10782+8
	movt	r3, #:upper16:.LANCHOR1
	movt	ip, #:upper16:.LC908
	ldr	r8, .L10782
	ldr	r3, [r3, #3648]
	movw	r1, #:lower16:.LC881
	mov	r2, #255
	movt	r1, #:upper16:.LC881
	str	ip, [sp, #16]
	movw	r10, #:lower16:.LANCHOR0
	movt	r10, #:upper16:.LANCHOR0
	mov	r9, r5
	strb	r3, [r4, #48]
	movw	r3, #:lower16:.LC909
	mov	r7, r3
	bl	strncpy
	mov	r3, r7
	movw	r1, #:lower16:.LC907
	ldr	r0, .L10782+12
	movt	r3, #:upper16:.LC909
	mov	r2, #255
	movt	r1, #:upper16:.LC907
	str	r3, [sp, #20]
	bl	strncpy
	movw	r2, #:lower16:.LC911
	ldr	r3, [r10, #144]
	mov	r1, r2
	ldrb	r2, [r10, #140]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC911
	str	r3, [r4, #25]	@ unaligned
	str	r1, [sp, #12]
	ldrh	r3, [r10, #148]
	strb	r2, [r4, #21]
	str	r5, [sp, #24]
	strh	r3, [r4, #29]	@ unaligned
	ldr	r3, [r9, #508]!
	sub	fp, r3, #120
.L10731:
	add	r7, fp, #120
	cmp	r7, r9
	beq	.L10778
	mov	r7, fp
	ldr	r5, [r7, #112]!
	sub	r5, r5, #4
.L10732:
	add	r3, r5, #4
	cmp	r3, r7
	bne	.L10737
	ldr	fp, [fp, #120]
	sub	fp, fp, #120
	b	.L10731
.L10778:
	movw	r1, #:lower16:.LC881
	mov	r2, #255
	ldr	r0, .L10782+8
	movt	r1, #:upper16:.LC881
	ldr	r5, [sp, #24]
	sub	r9, r8, #8
	bl	strncpy
	movw	r1, #:lower16:.LC907
	mov	r2, #255
	ldr	r0, .L10782+12
	movt	r1, #:upper16:.LC907
	bl	strncpy
	ldrb	lr, [r10, #141]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC914
	mov	r1, r9
	ldrh	ip, [r4, #29]	@ unaligned
	movt	r0, #:upper16:.LC914
	ldrb	r10, [r10, #142]	@ zero_extendqisi2
	ldrh	r3, [r4, #27]	@ unaligned
	strb	lr, [r4, #22]
	ldrh	r2, [r4, #25]	@ unaligned
	strb	r10, [r4, #23]
	str	ip, [sp]
	bl	printk
	movw	r0, #:lower16:.LC915
	ldrb	r3, [r4, #23]	@ zero_extendqisi2
	ldrb	r2, [r4, #22]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC915
	ldrb	r1, [r4, #21]	@ zero_extendqisi2
	bl	printk
	movw	r0, #:lower16:.LC916
	mov	r1, r9
	movt	r0, #:upper16:.LC916
	bl	printk
	ldr	r4, [r5, #508]
	sub	r4, r4, #120
.L10739:
	add	r3, r4, #120
	cmp	r7, r3
	beq	.L10779
	mov	r10, r4
	ldr	r9, [r10, #112]!
	sub	r9, r9, #4
.L10740:
	add	r3, r9, #4
	cmp	r3, r10
	beq	.L10780
	ldr	r0, [r9]
	ldr	r3, [r0, #32]
	cmp	r3, #0
	beq	.L10741
	blx	r3
.L10741:
	ldr	r9, [r9, #4]
	sub	r9, r9, #4
	b	.L10740
.L10780:
	ldr	r4, [r4, #120]
	sub	r4, r4, #120
	b	.L10739
.L10779:
	mov	r0, r5
	mov	r4, r6
	bl	android_enable
	cmp	r0, #0
	movge	r3, #1
	strbge	r3, [r5, #16]
	bge	.L10745
	sub	r2, r8, #8
	movw	r0, #:lower16:.LC917
	mov	r1, r2
	movt	r0, #:upper16:.LC917
	bl	printk
	mov	r3, #0
	ldr	r0, [sp, #8]
	strb	r3, [r5, #16]
	strb	r3, [r5, #48]
	bl	mutex_unlock
	b	.L10727
.L10737:
	ldr	r3, [r5]
	sub	r1, r8, #8
	ldr	r0, [sp, #16]
	ldr	r2, [r3]
	bl	printk
	ldr	r3, [r5]
	ldr	r1, [sp, #20]
	ldr	r3, [r3]
	mov	r0, r3
	str	r3, [sp, #28]
	bl	strcmp
	subs	r2, r0, #0
	ldr	r1, [sp, #12]
	ldr	r3, [sp, #28]
	mov	r0, r3
	beq	.L10781
	bl	strcmp
	subs	r2, r0, #0
	str	r2, [sp, #28]
	bne	.L10735
	ldrh	r3, [r4, #29]	@ unaligned
	movw	r0, #:lower16:.LC913
	movt	r0, #:upper16:.LC913
	cmp	r3, #1024
	beq	.L10734
	bl	printk
	ldr	r2, [sp, #28]
	mov	r3, #8
	strb	r2, [r4, #29]
	strb	r3, [r4, #30]
.L10735:
	ldr	r5, [r5, #4]
	sub	r5, r5, #4
	b	.L10732
.L10781:
	movw	r0, #:lower16:.LC910
	str	r2, [sp, #28]
	movt	r0, #:upper16:.LC910
	bl	printk
	mov	r3, #4
	ldr	r1, [sp, #12]
	ldr	r2, [sp, #28]
	strb	r2, [r4, #29]
	strb	r3, [r4, #30]
	ldr	r3, [r5]
	ldr	r0, [r3]
	bl	strcmp
	cmp	r0, #0
	bne	.L10735
.L10734:
	movw	r0, #:lower16:.LC912
	movt	r0, #:upper16:.LC912
	bl	printk
	mov	r2, #0
	mov	r3, #12
	strb	r2, [r4, #29]
	strb	r3, [r4, #30]
	b	.L10735
.L10783:
	.align	2
.L10782:
	.word	.LANCHOR5-1488
	.word	.LANCHOR0+2032
	.word	.LANCHOR1+2764
	.word	.LANCHOR1+2508
	.fnend
	.size	enable_store, .-enable_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_android_function_disable, %function
adb_android_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mov	r1, #0
	ldr	r0, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, r1
	beq	.L10786
	bx	lr
.L10786:
	b	android_enable
	.fnend
	.size	adb_android_function_disable, .-adb_android_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_open, %function
adb_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r0, .L10805
	strd	r6, [sp, #8]
	mov	r6, r1
	ldr	r1, .L10805+4
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	___ratelimit
	cmp	r0, #0
	bne	.L10803
.L10788:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #3476]
	cmp	r3, #0
	beq	.L10795
	add	r2, r3, #116
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r5, [r2]
	add	r5, r5, #1
	strex	r1, r5, [r2]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r5, #1
	bne	.L10790
	ldr	r3, [r4, #3476]
	mov	r2, #0
	str	r3, [r6, #124]
	ldrb	r1, [r3, #161]	@ zero_extendqisi2
	str	r2, [r3, #104]
	cmp	r1, r2
	bne	.L10804
.L10792:
	mov	r2, #1
	mov	r0, #0
	strb	r2, [r3, #160]
.L10787:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10804:
	movw	r1, #:lower16:.LANCHOR0
	strb	r2, [r3, #161]
	movt	r1, #:upper16:.LANCHOR0
	ldr	r7, [r1, #1984]
	ldr	r6, [r1, #2000]
	cmp	r6, #0
	strbeq	r5, [r7]
	streq	r6, [r7, #4]
	beq	.L10792
	add	r8, r6, #24
	mov	r0, r8
	bl	mutex_lock
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	strb	r5, [r7]
	str	r6, [r7, #4]
	cmp	r3, #0
	beq	.L10794
	mov	r0, r6
	bl	android_enable
.L10794:
	mov	r0, r8
	bl	mutex_unlock
	ldr	r3, [r4, #3476]
	b	.L10792
.L10790:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #15
	b	.L10787
.L10795:
	mvn	r0, #18
	b	.L10787
.L10803:
	movw	r0, #:lower16:.LC919
	movt	r0, #:upper16:.LC919
	bl	printk
	b	.L10788
.L10806:
	.align	2
.L10805:
	.word	.LANCHOR0+2056
	.word	.LANCHOR5-1480
	.fnend
	.size	adb_open, .-adb_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_disable, %function
ffs_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mov	r1, #0
	ldr	r0, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, r1
	beq	.L10809
	bx	lr
.L10809:
	b	android_enable
	.fnend
	.size	ffs_function_disable, .-ffs_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fmbim_reset_cmd_complete, %function
fmbim_reset_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L10828
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L10825
.L10811:
	add	r5, r4, #204
	mov	r0, r5
	bl	_raw_spin_lock
	movw	r3, #:lower16:kmalloc_caches
	mov	r2, #16
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L10812
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L10826
	mov	r1, #16
	mov	r2, #0
	stm	r3, {r1, r2}
.L10813:
	add	r0, r3, #8
	add	r2, r4, #208
	ldr	r1, [r4, #212]
	bl	__list_add
	mov	r0, r5
	bl	_raw_spin_unlock
	ldr	r0, .L10828+4
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L10827
.L10815:
	add	r0, r4, #108
	mov	r3, #0
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L10812:
	mov	r3, r2
	str	r2, [r0, #16]
	str	r0, [r0, #20]
	b	.L10813
.L10826:
	mvn	r3, #11
	b	.L10813
.L10825:
	movw	r1, #:lower16:.LC614
	ldr	r2, .L10828+8
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC614
	bl	__dynamic_pr_debug
	b	.L10811
.L10827:
	ldr	r3, .L10828+8
	movw	r1, #:lower16:.LC615
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC615
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L10815
.L10829:
	.align	2
.L10828:
	.word	.LANCHOR4-2496
	.word	.LANCHOR4-2464
	.word	.LANCHOR5-3348
	.fnend
	.size	fmbim_reset_cmd_complete, .-fmbim_reset_cmd_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_connect_work, %function
gbam_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r5, r0, #276
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	sub	r8, r0, #280
	strd	r10, [sp, #24]
	mov	r0, r8
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #-272]
	mov	r0, r5
	cmp	r3, #0
	beq	.L10877
	bl	_raw_spin_unlock
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-264]
	tst	r3, #4
	bne	.L10878
.L10830:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10878:
	sub	r3, r4, #284
	movw	r2, #:lower16:gbam_notify
	ldr	r0, [r4, #-260]
	mov	r1, r3
	movt	r2, #:upper16:gbam_notify
	str	r3, [sp, #24]
	bl	msm_bam_dmux_open
	subs	r6, r0, #0
	bne	.L10879
	movw	r3, #:lower16:.LANCHOR4
	sub	r1, r4, #264
	mov	r7, r3
	mov	r0, #1
	bl	_set_bit
	mov	r3, r7
	movt	r3, #:upper16:.LANCHOR4
	mov	r2, r3
	movw	r3, #1266
	ldrh	r3, [r2, r3]
	str	r2, [sp, #16]
	tst	r3, #4
	bne	.L10880
.L10835:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-272]
	str	r0, [sp, #20]
	cmp	r3, #0
	beq	.L10881
	ldr	r9, [r3, #88]
	movw	r2, #1290
	movw	r1, #:lower16:.LANCHOR0
	ldr	r3, [sp, #16]
	movt	r1, #:upper16:.LANCHOR0
	ldr	fp, [r1, #2080]
	str	r1, [sp, #36]
	ldrh	r3, [r3, r2]
	sub	r2, r4, #232
	str	r2, [sp, #32]
	tst	r3, #4
	bne	.L10882
.L10838:
	cmp	fp, #0
	ble	.L10839
	movw	r10, #:lower16:gbam_epout_complete
	str	r5, [sp, #28]
	mov	r7, #0
	movt	r10, #:upper16:gbam_epout_complete
	sub	r5, r4, #232
	b	.L10842
.L10840:
	str	r10, [r3, #28]
	add	r7, r7, #1
	ldr	r2, [r4, #-232]
	bl	__list_add
	cmp	fp, r7
	beq	.L10883
.L10842:
	ldr	r3, [r9, #8]
	mov	r1, #32
	mov	r0, r9
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r1, r5
	add	r0, r3, #36
	bne	.L10840
	ldr	r2, [sp, #16]
	movw	r3, #1314
	ldr	r5, [sp, #28]
	ldrh	r3, [r2, r3]
	tst	r3, #4
	bne	.L10884
.L10841:
	ldr	r3, [r4, #-232]
	ldr	r2, [sp, #32]
	cmp	r2, r3
	beq	.L10885
.L10839:
	mov	r0, r8
	ldr	r1, [sp, #20]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-272]
	mov	fp, r0
	cmp	r3, #0
	beq	.L10886
	ldr	r7, [r3, #84]
	movw	r2, #1290
	sub	r10, r4, #256
	ldr	r3, [sp, #16]
	ldrh	r3, [r3, r2]
	ldr	r2, [sp, #36]
	tst	r3, #4
	ldr	r9, [r2, #2084]
	bne	.L10887
.L10846:
	cmp	r9, #0
	ble	.L10847
	movw	r8, #:lower16:gbam_epin_complete
	movt	r8, #:upper16:gbam_epin_complete
	b	.L10851
.L10848:
	str	r8, [r3, #28]
	add	r6, r6, #1
	ldr	r2, [r4, #-256]
	bl	__list_add
	cmp	r9, r6
	beq	.L10847
.L10851:
	ldr	r3, [r7, #8]
	mov	r1, #32
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r1, r10
	add	r0, r3, #36
	bne	.L10848
	ldr	r2, [sp, #16]
	movw	r3, #1314
	ldrh	r3, [r2, r3]
	tst	r3, #4
	bne	.L10888
.L10849:
	ldr	r3, [r4, #-256]
	cmp	r10, r3
	beq	.L10889
.L10847:
	mov	r0, r5
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [sp, #24]
	bl	gbam_start_rx
	b	.L10837
.L10877:
	bl	_raw_spin_unlock
	mov	r1, r6
	mov	r0, r8
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L10881:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
.L10837:
	ldr	r2, [sp, #16]
	movw	r3, #1338
	ldrh	r3, [r2, r3]
	tst	r3, #4
	beq	.L10830
	ldr	r2, .L10890
	movw	r1, #:lower16:.LC357
	ldr	r0, .L10890+4
	movt	r1, #:upper16:.LC357
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	__dynamic_pr_debug
.L10883:
	ldr	r5, [sp, #28]
	b	.L10839
.L10886:
	ldr	r6, [r4, #-232]
	ldr	r7, [sp, #32]
	cmp	r7, r6
	beq	.L10876
.L10845:
	mov	r0, r6
	sub	r6, r6, #36
	bl	list_del
	ldr	r3, [r9, #8]
	mov	r1, r6
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [r4, #-232]
	cmp	r7, r6
	bne	.L10845
.L10876:
	mov	r1, fp
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	b	.L10837
.L10880:
	mov	r0, r2
	movw	r1, #:lower16:.LC552
	ldr	r2, .L10890+8
	movt	r1, #:upper16:.LC552
	ldr	r3, [sp, #24]
	add	r0, r0, #1248
	bl	__dynamic_pr_debug
	b	.L10835
.L10882:
	movw	r0, #:lower16:gbam_epout_complete
	mov	r3, r2
	ldr	r2, .L10890+12
	movt	r0, #:upper16:gbam_epout_complete
	movw	r1, #:lower16:.LC921
	stm	sp, {r3, fp}
	movt	r1, #:upper16:.LC921
	mov	r3, r9
	str	r0, [sp, #8]
	ldr	r0, .L10890+16
	bl	__dynamic_pr_debug
	b	.L10838
.L10887:
	movw	r0, #:lower16:gbam_epin_complete
	movw	r1, #:lower16:.LC921
	ldr	r2, .L10890+12
	movt	r0, #:upper16:gbam_epin_complete
	movt	r1, #:upper16:.LC921
	str	r10, [sp]
	mov	r3, r7
	str	r9, [sp, #4]
	str	r0, [sp, #8]
	ldr	r0, .L10890+16
	bl	__dynamic_pr_debug
	b	.L10846
.L10884:
	movw	r1, #:lower16:.LC658
	mov	r3, r7
	ldr	r2, .L10890+12
	movt	r1, #:upper16:.LC658
	ldr	r0, .L10890+20
	bl	__dynamic_pr_debug
	b	.L10841
.L10888:
	movw	r1, #:lower16:.LC658
	mov	r3, r6
	ldr	r2, .L10890+12
	movt	r1, #:upper16:.LC658
	ldr	r0, .L10890+20
	bl	__dynamic_pr_debug
	b	.L10849
.L10885:
	movw	r0, #:lower16:.LC922
	ldr	r1, .L10890+8
	movt	r0, #:upper16:.LC922
	bl	printk
	ldr	r1, [sp, #20]
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L10837
.L10889:
	movw	r0, #:lower16:.LC923
	ldr	r1, .L10890+8
	movt	r0, #:upper16:.LC923
	bl	printk
.L10850:
	ldr	r3, [r4, #-232]
	ldr	r2, [sp, #32]
	mov	r0, r3
	sub	r6, r3, #36
	cmp	r2, r3
	beq	.L10876
	bl	list_del
	ldr	r3, [r7, #8]
	mov	r1, r6
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L10850
.L10879:
	ldr	r1, .L10890
	movw	r0, #:lower16:.LC920
	mov	r3, r6
	ldr	r2, [r4, #-260]
	movt	r0, #:upper16:.LC920
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L10891:
	.align	2
.L10890:
	.word	.LANCHOR5-1468
	.word	.LANCHOR4+1320
	.word	.LANCHOR5-1448
	.word	.LANCHOR5-1432
	.word	.LANCHOR4+1272
	.word	.LANCHOR4+1296
	.fnend
	.size	gbam_connect_work, .-gbam_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_disable, %function
ccid_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r0, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r5, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r5, #108]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r4, [r5, #112]
	cmp	r4, #0
	beq	.L10893
	ldr	r6, [r5, #100]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L10893:
	ldr	r3, [r5, #156]
	cmp	r3, #0
	bne	.L10894
	ldr	r4, [r5, #184]
	cmp	r4, #0
	beq	.L10894
	ldr	r6, [r5, #108]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L10894:
	add	r9, r5, #192
	add	r8, r5, #92
	b	.L10895
.L10896:
	bl	list_del
	mov	r1, r7
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L10897
	ldr	r7, [r5, #104]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r6
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L10895:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #192]
	mov	r7, r0
	cmp	r9, r4
	mov	r0, r4
	sub	r6, r4, #36
	bne	.L10896
	mov	r1, r7
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
.L10897:
	mov	r4, #0
	add	r0, r5, #172
	mov	r3, r4
	mov	r2, #1
	mov	r1, #3
	str	r4, [r5, #96]
	str	r4, [r5, #200]
	bl	__wake_up
	mov	r3, r4
	add	r0, r5, #160
	mov	r2, #1
	mov	r1, #3
	bl	__wake_up
	ldrd	r6, [sp, #8]
	mov	r3, r4
	add	r0, r5, #128
	mov	r2, #1
	ldrd	r4, [sp]
	mov	r1, #3
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up
	.fnend
	.size	ccid_function_disable, .-ccid_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_peer_reset_cb, %function
gbam_peer_reset_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #1362
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L10952
.L10907:
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L10908
	ldr	r2, [r3, #84]
	cmp	r2, #0
	beq	.L10908
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L10908
	ldr	r0, [r3, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	ldr	r0, [r3, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #12]
	mov	r3, #0
	mov	r0, r3
	ldr	r2, [r2, #84]
	str	r3, [r2]
	ldr	r2, [r4, #12]
	ldr	r2, [r2, #88]
	str	r3, [r2]
	bl	usb_bam_a2_reset
	subs	r2, r0, #0
	bne	.L10953
.L10909:
	ldr	r3, [r4, #12]
	ldr	r3, [r3, #84]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	ldr	r3, [r4, #12]
	bne	.L10954
	ldr	r3, [r3, #84]
	str	r4, [r3]
	ldr	r3, [r4, #12]
	ldr	r3, [r3, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	ldr	r3, [r4, #12]
	bne	.L10955
	ldr	r3, [r3, #88]
	add	r5, r4, #4
	mov	r0, r5
	str	r4, [r3]
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L10956
	ldr	r0, .L10963
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L10957
.L10916:
	ldr	r0, [r3, #88]
	mov	r2, #32
	ldr	r1, [r4, #112]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L10958
.L10917:
	mov	r0, r5
	bl	_raw_spin_unlock
.L10915:
	add	r5, r4, #8
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L10959
	ldr	r0, .L10963+4
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L10960
.L10919:
	ldr	r0, [r3, #84]
	mov	r2, #32
	ldr	r1, [r4, #116]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L10961
.L10920:
	mov	r0, r5
	bl	_raw_spin_unlock
.L10910:
	ldr	r3, [r4, #132]
	cmp	r3, #6
	beq	.L10962
.L10923:
	mov	r5, #0
.L10906:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10908:
	mov	r0, #0
	bl	usb_bam_a2_reset
	subs	r2, r0, #0
	beq	.L10910
	movw	r0, #:lower16:.LC925
	ldr	r1, .L10963+8
	movt	r0, #:upper16:.LC925
	bl	printk
	ldr	r3, [r4, #132]
	cmp	r3, #6
	bne	.L10923
.L10962:
	ldr	r5, [r4]
	cmp	r5, #0
	bne	.L10923
	mov	r1, r5
	mov	r0, r5
	bl	usb_bam_register_peer_reset_cb
	b	.L10906
.L10952:
	movw	r1, #:lower16:.LC924
	add	r0, r3, #1344
	ldr	r2, .L10963+8
	movt	r1, #:upper16:.LC924
	bl	__dynamic_pr_debug
	b	.L10907
.L10960:
	movw	r1, #:lower16:.LC354
	sub	r0, r0, #32
	ldr	r2, .L10963+12
	movt	r1, #:upper16:.LC354
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #12]
	b	.L10919
.L10957:
	movw	r1, #:lower16:.LC354
	sub	r0, r0, #24
	ldr	r2, .L10963+16
	movt	r1, #:upper16:.LC354
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #12]
	b	.L10916
.L10956:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC117
	ldr	r1, .L10963+16
	movt	r0, #:upper16:.LC117
	bl	printk
	b	.L10915
.L10954:
	movw	r0, #:lower16:.LC926
	ldr	r1, .L10963+8
	ldr	r2, [r3, #84]
	movt	r0, #:upper16:.LC926
	bl	printk
	b	.L10906
.L10955:
	movw	r0, #:lower16:.LC927
	ldr	r2, [r3, #88]
	movt	r0, #:upper16:.LC927
	ldr	r1, .L10963+8
	bl	printk
	ldr	r3, [r4, #12]
	mov	r2, #0
	ldr	r3, [r3, #84]
	str	r2, [r3]
	b	.L10906
.L10961:
	movw	r0, #:lower16:.LC355
	ldr	r1, .L10963+12
	movt	r0, #:upper16:.LC355
	bl	printk
	b	.L10920
.L10958:
	movw	r0, #:lower16:.LC355
	ldr	r1, .L10963+16
	movt	r0, #:upper16:.LC355
	bl	printk
	b	.L10917
.L10959:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC117
	ldr	r1, .L10963+12
	movt	r0, #:upper16:.LC117
	bl	printk
	b	.L10910
.L10953:
	movw	r0, #:lower16:.LC925
	ldr	r1, .L10963+8
	movt	r0, #:upper16:.LC925
	bl	printk
	b	.L10909
.L10964:
	.align	2
.L10963:
	.word	.LANCHOR4-3888
	.word	.LANCHOR4-3856
	.word	.LANCHOR5-1412
	.word	.LANCHOR3+2920
	.word	.LANCHOR3+2896
	.fnend
	.size	gbam_peer_reset_cb, .-gbam_peer_reset_cb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_function_bind_config, %function
acm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r10, [r0, #4]
	.pad #36
	sub	sp, sp, #36
	ldr	r3, [r10]
	cmp	r3, #0
	ble	.L10983
	movw	r6, #:lower16:.LANCHOR0
	movw	fp, #:lower16:kmalloc_caches
	movw	r9, #:lower16:acm_connect
	movw	r3, #:lower16:acm_disconnect
	movt	r3, #:upper16:acm_disconnect
	mov	r5, r1
	movt	r6, #:upper16:.LANCHOR0
	movt	fp, #:upper16:kmalloc_caches
	movt	r9, #:upper16:acm_connect
	mov	r7, #0
	str	r3, [sp, #20]
.L10966:
	ldrb	r3, [r6, #2088]	@ zero_extendqisi2
	uxtb	r8, r7
	cmp	r3, #0
	bne	.L10968
	ldr	r2, [r5, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L10971
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r5, #24]
	strb	r3, [r6, #2088]
	strb	r3, [r6, #2128]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L10971
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r5, #24]
	strb	r3, [r6, #2096]
	strb	r3, [r6, #2140]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L10971
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	strb	r3, [r6, #2104]
	strb	r3, [r6, #2151]
.L10968:
	ldr	r0, [fp, #8]
	cmp	r0, #0
	beq	.L10985
	mov	r2, #172
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L11009
.L10972:
	ldr	r2, [sp, #20]
	movw	r3, #:lower16:acm_send_break
	mov	ip, #0
	movt	r3, #:upper16:acm_send_break
	movw	r1, #:lower16:.LC928
	str	r9, [r4, #116]
	movt	r1, #:upper16:.LC928
	mov	r0, #208
	strd	r2, [r4, #120]
	mov	r2, r8
	strb	r8, [r4, #146]
	str	ip, [r4, #148]
	bl	kasprintf
	cmp	r0, #0
	str	r0, [r4]
	beq	.L11010
	ldr	r1, .L11013
	movw	r2, #:lower16:acm_bind
	movw	lr, #:lower16:acm_unbind
	ldr	r3, .L11013+4
	movw	ip, #:lower16:acm_set_alt
	movt	r2, #:upper16:acm_bind
	movt	lr, #:upper16:acm_unbind
	movt	ip, #:upper16:acm_set_alt
	movw	r8, #:lower16:.LANCHOR4
	str	r1, [r4, #4]
	movw	r1, #:lower16:acm_disable
	movt	r8, #:upper16:.LANCHOR4
	str	r2, [r4, #32]
	movw	r2, #:lower16:acm_setup
	movt	r1, #:upper16:acm_disable
	str	lr, [r4, #36]
	movt	r2, #:upper16:acm_setup
	str	ip, [r4, #40]
	ldrh	r3, [r3]
	str	r1, [r4, #48]
	str	r2, [r4, #52]
	tst	r3, #4
	bne	.L11011
.L10974:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L10977
	add	r3, r4, #72
	str	r5, [r4, #20]
	add	r2, r5, #36
	mov	r0, r3
	ldr	r1, [r5, #40]
	str	r3, [sp, #24]
	bl	__list_add
	ldr	r3, [r4, #32]
	cmp	r3, #0
	beq	.L10988
	mov	r1, r4
	mov	r0, r5
	blx	r3
	subs	r2, r0, #0
	blt	.L11012
.L10978:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L10979
	ldr	r1, [r4, #16]
	cmp	r1, #0
	beq	.L10979
	orr	r1, r3, #4
	mov	r3, r1
	strb	r1, [r5, #45]
.L10979:
	tst	r3, #2
	bne	.L10980
	ldr	r1, [r4, #8]
	cmp	r1, #0
	beq	.L10980
	ldrb	r1, [r5, #45]	@ zero_extendqisi2
	orr	r1, r1, #2
	mov	r3, r1
	strb	r1, [r5, #45]
.L10980:
	tst	r3, #1
	bne	.L10981
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L10981
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L10981:
	cmp	r2, #0
	beq	.L10982
	movw	r3, #1410
	mov	r9, r2
	ldrh	r3, [r8, r3]
	tst	r3, #4
	bne	.L10975
.L10976:
	mov	r0, r4
	bl	kfree
.L10970:
	movw	r0, #:lower16:.LC931
	mov	r2, r7
	ldr	r1, .L11013+8
	movt	r0, #:upper16:.LC931
	bl	printk
.L10965:
	mov	r0, r9
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10982:
	ldr	r3, [r10]
	add	r7, r7, #1
	cmp	r3, r7
	bgt	.L10966
.L10983:
	mov	r9, #0
	b	.L10965
.L11011:
	ldr	ip, [r5]
	movw	r2, #:lower16:.LC929
	mov	r3, r0
	ldr	r1, [r5, #24]
	movt	r2, #:upper16:.LC929
	ldr	r0, .L11013+12
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r5, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L10974
.L10977:
	movw	r3, #1410
	mvn	r9, #21
	ldrh	r3, [r8, r3]
	tst	r3, #4
	beq	.L10976
.L10975:
	ldr	r1, [r5, #24]
	movw	r2, #:lower16:.LC930
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC930
	ldr	r0, .L11013+16
	ldr	r1, [r1]
	stm	sp, {r4, r9}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L10976
.L10985:
	mov	r4, #16
	b	.L10972
.L11012:
	ldr	r0, [sp, #24]
	str	r2, [sp, #28]
	bl	list_del
	mov	r3, #0
	ldr	r2, [sp, #28]
	str	r3, [r4, #20]
	b	.L10978
.L10971:
	mvn	r9, #18
	b	.L10970
.L10988:
	mov	r2, r3
	b	.L10978
.L11010:
	mov	r0, r4
	mvn	r9, #11
	bl	kfree
	b	.L10970
.L11009:
	mvn	r9, #11
	b	.L10970
.L11014:
	.align	2
.L11013:
	.word	.LANCHOR0+2152
	.word	.LANCHOR4+1386
	.word	.LANCHOR5-1392
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.fnend
	.size	acm_function_bind_config, .-acm_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_notify, %function
gbam_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r5, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	beq	.L11017
	cmp	r1, #1
	bne	.L11015
	cmp	r2, #0
	beq	.L11015
	mov	r0, r2
	add	r5, r4, #4
	bl	dev_kfree_skb_any
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	movw	r0, #:lower16:.LANCHOR4
	ldr	r3, [r4, #240]
	movw	r2, #1458
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r2, [r0, r2]
	sub	r3, r3, #1
	tst	r2, #4
	str	r3, [r4, #240]
	bne	.L11040
.L11023:
	mov	r1, r6
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #80
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3532]
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	queue_work_on
.L11015:
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11017:
	cmp	r2, #0
	beq	.L11015
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #1434
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L11041
.L11019:
	add	r6, r4, #8
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r7, r0
	cmp	r3, #0
	beq	.L11022
	movw	r3, #:lower16:.LANCHOR0
	ldr	r2, [r4, #44]
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #2160]
	cmp	r2, r3
	bls	.L11021
	ldr	r3, [r4, #244]
	ldr	r8, .L11043
	add	r3, r3, #1
	mov	r0, r8
	str	r3, [r4, #244]
	bl	__printk_ratelimit
	cmp	r0, #0
	bne	.L11042
.L11022:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_kfree_skb_any
.L11021:
	ldr	r3, [r4, #40]
	add	r2, r4, #36
	mov	r1, r0
	mov	r0, r6
	strd	r2, [r5]
	str	r5, [r3]
	ldr	r3, [r4, #44]
	str	r5, [r4, #40]
	add	r3, r3, #1
	str	r3, [r4, #44]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	gbam_write_data_tohost
.L11041:
	ldr	ip, [r0]
	add	r2, r0, #20
	mov	r3, r0
	ldr	r0, [r5, #80]
	movw	r1, #:lower16:.LC932
	movt	r1, #:upper16:.LC932
	str	ip, [sp]
	str	r2, [sp, #4]
	ldr	r2, .L11043
	str	r0, [sp, #8]
	ldr	r0, .L11043+4
	bl	__dynamic_pr_debug
	b	.L11019
.L11040:
	ldr	lr, [r4]
	add	r2, r4, #20
	movw	r1, #:lower16:.LC934
	ldr	ip, [r4, #260]
	movt	r1, #:upper16:.LC934
	add	r0, r0, #1440
	str	r3, [sp, #8]
	mov	r3, r2
	ldr	r2, .L11043+8
	str	lr, [sp, #12]
	str	r3, [sp]
	mov	r3, r4
	str	ip, [sp, #4]
	bl	__dynamic_pr_debug
	b	.L11023
.L11042:
	movw	r0, #:lower16:.LC933
	mov	r1, r8
	ldr	r2, [r4, #244]
	movt	r0, #:upper16:.LC933
	bl	printk
	b	.L11022
.L11044:
	.align	2
.L11043:
	.word	.LANCHOR5-1364
	.word	.LANCHOR4+1416
	.word	.LANCHOR5-1344
	.fnend
	.size	gbam_notify, .-gbam_notify
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ch_remove, %function
gsdio_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #1482
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r3, r2]
	.pad #28
	sub	sp, sp, #28
	str	r0, [sp, #8]
	tst	r3, #4
	bne	.L11087
.L11046:
	movw	fp, #:lower16:.LANCHOR1
	movt	fp, #:upper16:.LANCHOR1
	ldr	r8, [fp]
	cmp	r8, #0
	beq	.L11074
	add	r7, fp, #4
	mov	r6, #0
	str	fp, [sp, #12]
.L11060:
	ldr	r3, [sp, #8]
	mov	r2, #9
	ldr	r4, [r7, #20]
	ldr	r1, [r3]
	ldr	r3, [r4, #120]
	ldr	r0, [r3]
	bl	strncmp
	subs	r5, r0, #0
	bne	.L11048
	ldr	r8, [r4, #96]
	mov	r3, #1
	str	r5, [r4, #108]
	str	r5, [r4, #112]
	str	r3, [r4, #116]
	cmp	r8, #0
	beq	.L11086
	ldr	r3, .L11089
	ldrh	r3, [r3]
	ubfx	r3, r3, #2, #1
	cmp	r3, #0
	moveq	r0, r8
	streq	r3, [r4, #176]
	bne	.L11088
.L11061:
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L11051
	mov	r1, #0
	blx	r3
.L11051:
	ldr	r0, [r8, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L11052
	blx	r3
.L11052:
	ldr	r0, [r8, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L11053
	blx	r3
.L11053:
	add	r3, r4, #4
	add	r0, r4, #28
	mov	r5, r3
	add	r9, r4, #12
	str	r3, [sp, #16]
	bl	cancel_work_sync
	add	r0, r4, #60
	bl	cancel_work_sync
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	fp, [r4, #12]
	str	r0, [sp, #20]
	ldr	r5, [r8, #92]
	cmp	r9, fp
	beq	.L11054
.L11055:
	mov	r0, fp
	sub	r10, fp, #36
	bl	list_del
	ldr	r0, [fp, #-36]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r10
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	fp, [r4, #12]
	cmp	r9, fp
	bne	.L11055
	ldr	r5, [r8, #92]
.L11054:
	ldr	fp, [r4, #20]
	add	r9, r4, #20
	cmp	r9, fp
	beq	.L11056
.L11057:
	mov	r0, fp
	sub	r10, fp, #36
	bl	list_del
	ldr	r0, [fp, #-36]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r10
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	fp, [r4, #20]
	cmp	r9, fp
	bne	.L11057
.L11056:
	ldr	r9, [r4, #52]
	add	r5, r4, #52
	ldr	r8, [r8, #88]
	cmp	r5, r9
	beq	.L11058
.L11059:
	mov	r0, r9
	sub	r10, r9, #36
	bl	list_del
	ldr	r0, [r9, #-36]
	bl	kfree
	ldr	r3, [r8, #8]
	mov	r1, r10
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r9, [r4, #52]
	cmp	r5, r9
	bne	.L11059
.L11058:
	mov	r3, #0
	ldrd	r0, [sp, #16]
	str	r3, [r4, #8]
	str	r3, [r4, #44]
	str	r3, [r4, #48]
	str	r3, [r4, #76]
	bl	_raw_spin_unlock_irqrestore
.L11086:
	ldr	r3, [sp, #12]
	ldr	r8, [r3]
.L11048:
	add	r6, r6, #1
	add	r7, r7, #104
	cmp	r6, r8
	bcc	.L11060
.L11074:
	mov	r0, #0
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11087:
	mov	r3, r0
	movw	r1, #:lower16:.LC177
	ldr	r2, .L11089+4
	movt	r1, #:upper16:.LC177
	ldr	r3, [r3]
	ldr	r0, .L11089+8
	bl	__dynamic_pr_debug
	b	.L11046
.L11088:
	str	r5, [sp, #4]
	ldr	ip, [r4]
	movw	r1, #:lower16:.LC935
	movt	r1, #:upper16:.LC935
	mov	r3, r4
	ldr	r0, .L11089+12
	ldr	r2, .L11089+16
	str	ip, [sp]
	bl	__dynamic_pr_debug
	ldr	r0, [r4, #96]
	str	r5, [r4, #176]
	cmp	r0, #0
	beq	.L11051
	b	.L11061
.L11090:
	.align	2
.L11089:
	.word	.LANCHOR4+1506
	.word	.LANCHOR5-1320
	.word	.LANCHOR4+1464
	.word	.LANCHOR4+1488
	.word	.LANCHOR5-1304
	.fnend
	.size	gsdio_ch_remove, .-gsdio_ch_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_connect_work, %function
rmnet_smd_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	sub	r2, r0, #132
	movw	r3, #:lower16:rmnet_smd_event_notify
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR0
	mov	r1, r2
	movt	r6, #:upper16:.LANCHOR0
	strd	r8, [sp, #16]
	mov	r4, r0
	str	r10, [sp, #24]
	movt	r3, #:upper16:rmnet_smd_event_notify
	str	lr, [sp, #28]
	.pad #24
	sub	sp, sp, #24
	ldr	r8, [r0, #-308]
	ldr	r0, [r6, #2164]
	bl	smd_open
	subs	r2, r0, #0
	bne	.L11108
	ldr	r3, [r4, #-88]
	ands	r3, r3, #1
	bne	.L11095
	mov	r2, sp
	str	r3, [sp, #4]
	add	r5, sp, #4
	bic	r1, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r1, r1, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r1, #12]
	add	r1, sp, #16
	sub	r7, r4, #80
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L11097
.L11109:
	bl	schedule
.L11097:
	mov	r2, #2
	mov	r1, r5
	mov	r0, r7
	bl	prepare_to_wait
	ldr	r3, [r4, #-88]
	tst	r3, #1
	beq	.L11109
	mov	r1, r5
	mov	r0, r7
	bl	finish_wait
.L11095:
	sub	r2, r4, #68
	movw	r3, #:lower16:rmnet_smd_event_notify
	ldr	r0, [r6, #2168]
	mov	r1, r2
	movt	r3, #:upper16:rmnet_smd_event_notify
	bl	smd_open
	cmp	r0, #0
	bne	.L11110
	ldr	r3, [r4, #-24]
	ands	r3, r3, #1
	bne	.L11099
	mov	r2, sp
	str	r3, [sp, #4]
	add	r5, sp, #4
	bic	r1, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r1, r1, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r1, #12]
	add	r1, sp, #16
	sub	r6, r4, #16
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L11101
.L11111:
	bl	schedule
.L11101:
	mov	r2, #2
	mov	r1, r5
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r3, [r4, #-24]
	tst	r3, #1
	beq	.L11111
	mov	r1, r5
	mov	r0, r6
	bl	finish_wait
.L11099:
	mov	r3, #1
	sub	r6, r4, #228
	ldr	r10, [r4, #-308]
	mov	r0, r6
	sub	r9, r4, #244
	str	r3, [r4, #-224]
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	b	.L11102
.L11104:
	bl	list_del
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #-304]
	mov	r1, r8
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	r8, #0
	mov	r7, r0
	bne	.L11112
.L11102:
	ldr	r5, [r4, #-244]
	cmp	r9, r5
	mov	r0, r5
	sub	r8, r5, #36
	bne	.L11104
.L11103:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L11091:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11108:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC936
	movt	r1, #:upper16:.LC936
	add	r0, r0, #32
	bl	dev_err
	ldrb	r3, [r4, #-136]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L11091
	sub	r0, r4, #216
	bl	platform_driver_register
	subs	r3, r0, #0
	moveq	r3, #1
	strbeq	r3, [r4, #-136]
	beq	.L11091
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC937
	movt	r1, #:upper16:.LC937
	ldr	r2, [r4, #-196]
	add	r0, r0, #32
	bl	dev_err
	b	.L11091
.L11112:
	ldr	r0, [r10]
	movw	r1, #:lower16:.LC214
	mov	r2, r8
	movt	r1, #:upper16:.LC214
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r9
	mov	r0, r5
	ldr	r1, [r4, #-240]
	bl	__list_add
	b	.L11103
.L11110:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC938
	movt	r1, #:upper16:.LC938
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #-132]
	bl	smd_close
	b	.L11091
	.fnend
	.size	rmnet_smd_connect_work, .-rmnet_smd_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_setup, %function
fsg_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #88]
	ldrh	lr, [r1, #4]	@ unaligned
	ldrh	r6, [r1, #2]	@ unaligned
	ldrh	r5, [r1, #6]	@ unaligned
	ldr	r2, [r3, #8]
	ldr	r0, [r3, #52]
	cmp	r2, #0
	beq	.L11114
	ldr	r2, [r3, #56]
	mov	ip, #0
	add	r2, r2, #1
	str	r2, [r3, #56]
	str	ip, [r0, #4]
	str	ip, [r0, #32]
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	cmp	r3, #254
	beq	.L11116
	cmp	r3, #255
	bne	.L11127
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r3, #33
	bne	.L11127
	ldrh	r3, [r4, #92]
	cmp	r3, lr
	bne	.L11129
	orrs	r3, r6, r5
	bne	.L11129
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #1530
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L11141
.L11118:
	ldr	r5, [r4, #88]
	add	r6, r5, #44
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #112]
	mov	r7, r0
	cmp	r3, #2
	bgt	.L11120
	ldr	r3, [r5, #56]
	mov	r1, #2
	ldr	r2, [r5, #168]
	str	r1, [r5, #112]
	str	r3, [r5, #116]
	cmp	r2, #0
	beq	.L11120
	mov	r0, #10
	bl	send_sig_info
.L11120:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [r4, #88]
	movw	r3, #1255
	movw	r4, #32767
	ldr	r2, [r2, #4]
	cmp	r2, #0
	moveq	r4, r3
	b	.L11113
.L11127:
	mvn	r4, #94
.L11113:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11116:
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r3, #161
	bne	.L11127
	ldrh	r3, [r4, #92]
	cmp	r3, lr
	bne	.L11129
	cmp	r5, #1
	cmpeq	r6, #0
	bne	.L11129
	ldr	r3, [r4, #88]
	mov	r1, #1
	mov	r2, #32
	ldr	ip, [r0]
	ldr	r3, [r3, #92]
	sub	r3, r3, #1
	strb	r3, [ip]
	str	r1, [r0, #4]
	ldr	r5, [r4, #88]
	ldrd	r0, [r5, #48]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	ldr	r3, [r5, #48]
	cmp	r0, #0
	cmnne	r0, #108
	mov	r4, r0
	str	r5, [r3]
	beq	.L11113
	mov	r3, r0
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC90
	ldr	r2, [r5, #48]
	movt	r1, #:upper16:.LC90
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_warn
	b	.L11113
.L11114:
	ldr	r0, [r3]
	movw	r1, #:lower16:.LC88
	movw	r3, #706
	movt	r1, #:upper16:.LC88
	ldr	r2, .L11142
	mvn	r4, #94
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC89
	movw	r1, #550
	movt	r0, #:upper16:.LC89
	bl	warn_slowpath_null
	b	.L11113
.L11129:
	mvn	r4, #32
	b	.L11113
.L11141:
	ldr	r1, [r4, #84]
	movw	r2, #:lower16:.LC939
	movt	r2, #:upper16:.LC939
	ldr	r0, .L11142+4
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11118
.L11143:
	.align	2
.L11142:
	.word	.LANCHOR5-1280
	.word	.LANCHOR4+1512
	.fnend
	.size	fsg_setup, .-fsg_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_unbind, %function
fsg_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #1554
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r0, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r4, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r0, r3]
	.pad #24
	sub	sp, sp, #24
	ldr	r5, [r1, #88]
	tst	r3, #4
	moveq	r3, r5
	bne	.L11160
.L11145:
	ldr	r2, [r3, #8]
	cmp	r2, r4
	beq	.L11161
.L11147:
	add	r0, r5, #336
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r0]
	sub	r3, r3, #1
	strex	r2, r3, [r0]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L11154
	bl	fsg_common_release
.L11154:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	mov	r0, r4
	bl	kfree
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11161:
	mov	r2, #0
	str	r2, [r3, #12]
	ldr	r6, [r4, #88]
	add	r7, r6, #44
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #112]
	mov	r8, r0
	cmp	r3, #4
	bgt	.L11149
	ldr	r3, [r6, #56]
	mov	r1, #4
	ldr	r2, [r6, #168]
	str	r1, [r6, #112]
	str	r3, [r6, #116]
	cmp	r2, #0
	beq	.L11149
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L11149:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #8]
	cmp	r3, r4
	bne	.L11147
	mov	r3, sp
	add	r1, sp, #16
	bic	r2, r3, #8128
	mov	r3, #0
	bic	r2, r2, #63
	add	r6, r5, #16
	ldr	r0, [r2, #12]
	movw	r2, #:lower16:autoremove_wake_function
	str	r3, [sp, #4]
	movt	r2, #:upper16:autoremove_wake_function
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L11153
.L11162:
	bl	schedule
.L11153:
	mov	r2, #2
	add	r1, sp, #4
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r3, [r5, #8]
	cmp	r3, r4
	beq	.L11162
	add	r1, sp, #4
	mov	r0, r6
	bl	finish_wait
	b	.L11147
.L11160:
	ldr	r1, [r1, #84]
	movw	r2, #:lower16:.LC777
	add	r0, r0, #1536
	movt	r2, #:upper16:.LC777
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #88]
	b	.L11145
	.fnend
	.size	fsg_unbind, .-fsg_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb30en_store, %function
usb30en_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r3
	mov	r4, r2
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	bl	dev_get_drvdata
	mov	r6, r0
	bl	get_host_os_type
	subs	r3, r0, #0
	beq	.L11191
	movw	r1, #:lower16:.LC427
	mov	r0, r4
	movt	r1, #:upper16:.LC427
	add	r2, sp, #4
	bl	sscanf
	cmp	r0, #1
	bne	.L11166
	ldr	r1, [r6, #8]
	cmp	r1, #0
	beq	.L11166
	movw	r4, #:lower16:.LANCHOR1
	ldr	r2, [sp, #4]
	movt	r4, #:upper16:.LANCHOR1
	ldrb	r3, [r4, #3226]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L11192
	uxtb	r2, r2
	strb	r2, [r4, #3226]
	ldr	r0, [r1]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L11168
	mov	r1, #0
	blx	r3
	ldr	r3, [r6, #8]
	ldrb	r2, [r4, #3226]	@ zero_extendqisi2
	ldr	r0, [r3]
.L11168:
	ldr	r7, .L11195
	cmp	r2, #0
	moveq	r1, #3
	movne	r1, #5
	bl	sec_set_speedlimit
	movw	r0, #:lower16:.LC942
	sub	r1, r7, #4
	movt	r0, #:upper16:.LC942
	bl	printk
	mov	r0, #200
	bl	msleep
	ldrb	r3, [r4, #3226]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L11193
	ldr	r3, [r6, #8]
	ldr	r0, [r3]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L11173
	mov	r1, #1
	blx	r3
.L11173:
	movw	r0, #:lower16:.LC943
	sub	r1, r7, #4
	movt	r0, #:upper16:.LC943
	bl	printk
.L11163:
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11193:
	movw	r2, #:lower16:.LC901
	cmp	r6, #0
	movt	r2, #:upper16:.LC901
	strd	r2, [sp, #8]
	beq	.L11173
	sub	r8, r7, #268
	movw	r0, #:lower16:.LC902
	mov	r2, r8
	mov	r1, r8
	movt	r0, #:upper16:.LC902
	add	r4, r6, #452
	bl	printk
	mov	r0, r4
	bl	work_busy
	cmp	r0, #0
	bne	.L11194
.L11172:
	ldr	r0, [r6, #12]
	add	r2, sp, #8
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env
	mov	r3, #0
	mov	r0, #1
	str	r3, [r6, #504]
	bl	msecs_to_jiffies
	movw	r1, #:lower16:system_wq
	mov	r3, r0
	movt	r1, #:upper16:system_wq
	mov	r2, r4
	ldr	r1, [r1]
	mov	r0, #4
	bl	queue_delayed_work_on
	b	.L11173
.L11192:
	movw	r0, #:lower16:.LC941
	ldr	r1, .L11195+4
	mov	r2, r3
	movt	r0, #:upper16:.LC941
	bl	printk
	b	.L11163
.L11166:
	movw	r0, #:lower16:.LC944
	ldr	r1, .L11195+4
	mvn	r5, #0
	movt	r0, #:upper16:.LC944
	bl	printk
	b	.L11163
.L11191:
	movw	r2, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC940
	ldr	r1, .L11195+4
	movt	r2, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC940
	strb	r3, [r2, #3226]
	bl	printk
	b	.L11163
.L11194:
	mov	r0, r4
	bl	cancel_delayed_work
	movw	r0, #:lower16:.LC903
	mov	r2, r8
	mov	r1, r8
	movt	r0, #:upper16:.LC903
	bl	printk
	b	.L11172
.L11196:
	.align	2
.L11195:
	.word	.LANCHOR5-1264
	.word	.LANCHOR5-1268
	.fnend
	.size	usb30en_store, .-usb30en_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_close, %function
rndis_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r4, #:lower16:.LANCHOR4
	movw	r3, #1578
	movt	r4, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r4, r3]
	.pad #12
	sub	sp, sp, #12
	tst	r3, #4
	bne	.L11218
.L11198:
	movw	r3, #1602
	ldr	r7, [r6, #164]
	ldrh	r3, [r4, r3]
	uxtb	r5, r7
	tst	r3, #4
	bne	.L11219
.L11199:
	movw	r4, #:lower16:.LANCHOR1
	cmp	r5, #0
	ldr	r10, .L11220
	movt	r4, #:upper16:.LANCHOR1
	lsl	r8, r7, #4
	mov	r1, #1
	streq	r5, [r4, #3688]
	streq	r5, [r4, #3692]
	sub	r5, r8, r7
	lsl	r5, r5, #2
	add	r3, r4, r5
	add	r9, r10, r5
	str	r1, [r3, #3696]
	ldr	r3, [r9, #4]
	cmp	r3, #0
	beq	.L11197
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L11205
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L11197
	add	r3, r6, #20
.L11203:
	sub	r7, r8, r7
	mov	fp, #20
	str	r3, [r6, #8]
	add	r4, r4, r7, lsl #2
	mov	r7, #0
	add	r2, r5, #52
	str	fp, [r6, #12]
	add	r2, r10, r2
	mov	r0, r6
	str	r7, [r6, #16]
	ldr	r1, [r4, #3736]
	bl	__list_add
	ldr	r3, [r6, #8]
	mov	r2, #12
	mov	r1, #7
	movt	r2, 16385
	stm	r3, {r1, fp}
	str	r2, [r3, #8]
	str	r7, [r3, #12]
	str	r7, [r3, #16]
	ldr	r3, [r9, #44]
	ldr	r0, [r9, #48]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	bx	r3	@ indirect register sibling call
.L11205:
	mov	r3, #36
	mov	r6, #16
	b	.L11203
.L11218:
	ldr	r1, [r6, #20]
	movw	r2, #:lower16:.LC82
	movt	r2, #:upper16:.LC82
	ldr	r3, .L11220+4
	ldr	r0, .L11220+8
	ldr	r1, [r1, #24]
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11198
.L11219:
	mov	ip, #0
	movw	r1, #:lower16:.LC945
	ldr	r2, .L11220+12
	mov	r3, ip
	movt	r1, #:upper16:.LC945
	ldr	r0, .L11220+16
	str	ip, [sp]
	bl	__dynamic_pr_debug
	ldr	r7, [r6, #164]
	b	.L11199
.L11197:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11221:
	.align	2
.L11220:
	.word	.LANCHOR1+3680
	.word	.LANCHOR5-1252
	.word	.LANCHOR4+1560
	.word	.LANCHOR5-1240
	.word	.LANCHOR4+1584
	.fnend
	.size	rndis_close, .-rndis_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_close, %function
rndis_qc_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r4, #:lower16:.LANCHOR4
	movw	r3, #1626
	movt	r4, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r4, r3]
	.pad #12
	sub	sp, sp, #12
	tst	r3, #4
	bne	.L11243
.L11223:
	movw	r3, #1602
	ldr	r7, [r6, #144]
	ldrh	r3, [r4, r3]
	uxtb	r5, r7
	tst	r3, #4
	bne	.L11244
.L11224:
	movw	r4, #:lower16:.LANCHOR1
	cmp	r5, #0
	ldr	r10, .L11245
	movt	r4, #:upper16:.LANCHOR1
	lsl	r8, r7, #4
	mov	r1, #1
	streq	r5, [r4, #3688]
	streq	r5, [r4, #3692]
	sub	r5, r8, r7
	lsl	r5, r5, #2
	add	r3, r4, r5
	add	r9, r10, r5
	str	r1, [r3, #3696]
	ldr	r3, [r9, #4]
	cmp	r3, #0
	beq	.L11222
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L11230
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L11222
	add	r3, r6, #20
.L11228:
	sub	r7, r8, r7
	mov	fp, #20
	str	r3, [r6, #8]
	add	r4, r4, r7, lsl #2
	mov	r7, #0
	add	r2, r5, #52
	str	fp, [r6, #12]
	add	r2, r10, r2
	mov	r0, r6
	str	r7, [r6, #16]
	ldr	r1, [r4, #3736]
	bl	__list_add
	ldr	r3, [r6, #8]
	mov	r2, #12
	mov	r1, #7
	movt	r2, 16385
	stm	r3, {r1, fp}
	str	r2, [r3, #8]
	str	r7, [r3, #12]
	str	r7, [r3, #16]
	ldr	r3, [r9, #44]
	ldr	r0, [r9, #48]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	bx	r3	@ indirect register sibling call
.L11230:
	mov	r3, #36
	mov	r6, #16
	b	.L11228
.L11243:
	ldr	r1, [r6, #20]
	movw	r2, #:lower16:.LC82
	movt	r2, #:upper16:.LC82
	ldr	r3, .L11245+4
	ldr	r0, .L11245+8
	ldr	r1, [r1, #24]
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11223
.L11244:
	mov	ip, #0
	movw	r1, #:lower16:.LC945
	ldr	r2, .L11245+12
	mov	r3, ip
	movt	r1, #:upper16:.LC945
	ldr	r0, .L11245+16
	str	ip, [sp]
	bl	__dynamic_pr_debug
	ldr	r7, [r6, #144]
	b	.L11224
.L11222:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11246:
	.align	2
.L11245:
	.word	.LANCHOR1+3680
	.word	.LANCHOR5-1216
	.word	.LANCHOR4+1608
	.word	.LANCHOR5-1240
	.word	.LANCHOR4+1584
	.fnend
	.size	rndis_qc_close, .-rndis_qc_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_setup, %function
composite_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r9, r1
	strd	r10, [sp, #24]
	mov	r10, r0
	add	r0, r0, #32
	str	lr, [sp, #32]
	.pad #68
	sub	sp, sp, #68
	bl	dev_get_drvdata
	ldrh	fp, [r9, #6]	@ unaligned
	ldrh	r6, [r9, #4]	@ unaligned
	ldrh	r7, [r9, #2]	@ unaligned
	ldr	r4, [r0, #4]
	cmp	fp, #4096
	bhi	.L11503
	ldrb	r2, [r4, #26]	@ zero_extendqisi2
	movw	r3, #:lower16:composite_setup_complete
	mov	r1, #0
	movt	r3, #:upper16:composite_setup_complete
	mov	r5, r0
	str	r1, [r4, #4]
	uxtb	r8, r6
	str	r3, [r4, #28]
	bfc	r2, #1, #1
	strb	r2, [r4, #26]
	ldr	r3, [r10, #4]
	str	r0, [r3]
	ldrb	r3, [r9, #1]	@ zero_extendqisi2
	cmp	r3, #11
	ldrls	pc, [pc, r3, asl #2]
	b	.L11250
.L11252:
	.word	.L11251
	.word	.L11253
	.word	.L11250
	.word	.L11253
	.word	.L11250
	.word	.L11250
	.word	.L11254
	.word	.L11250
	.word	.L11255
	.word	.L11256
	.word	.L11257
	.word	.L11258
.L11258:
	ldrb	r3, [r9]	@ zero_extendqisi2
	ldr	r0, [r0, #12]
	cmp	r3, #1
	beq	.L11703
.L11260:
	and	r3, r3, #31
	cmp	r3, #1
	beq	.L11434
.L11706:
	cmp	r3, #2
	bne	.L11506
	mov	r2, r0
	asr	r3, r6, #3
	ldr	r1, [r2, #36]!
	and	r6, r6, #15
	and	r3, r3, #16
	orr	r3, r3, r6
	cmp	r2, r1
	sub	r4, r1, #72
	beq	.L11506
	ldr	r1, [r1, #8]
	lsr	r1, r1, r3
	tst	r1, #1
	bne	.L11436
	mov	r6, #1
	lsl	r6, r6, r3
	b	.L11437
.L11438:
	ldr	r3, [r3, #8]
	tst	r3, r6
	bne	.L11436
.L11437:
	ldr	r3, [r4, #72]
	cmp	r2, r3
	sub	r4, r3, #72
	bne	.L11438
.L11506:
	mov	r4, #0
.L11433:
	cmp	r0, #0
	beq	.L11503
	ldr	r3, [r0, #16]
	cmp	r3, #0
	beq	.L11503
	mov	r1, r9
	blx	r3
	mov	r6, r0
	movw	r3, #32767
	cmp	r6, r3
	beq	.L11704
.L11247:
	mov	r0, r6
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11251:
	ldr	r2, [r10, #20]
	ldrb	r3, [r9]	@ zero_extendqisi2
	cmp	r2, #4
	bls	.L11698
	cmp	r3, #129
	bne	.L11698
	ldr	r3, [r4]
	mov	r2, #0
	cmp	fp, #2
	movls	fp, #0
	movhi	fp, #1
	strb	r2, [r3]
	strb	r2, [r3, #1]
	ldr	r2, [r0, #12]
	clz	r3, r2
	lsr	r3, r3, #5
	cmp	r8, #15
	orrhi	r3, r3, #1
	cmp	r3, #0
	beq	.L11705
.L11500:
	mov	r7, #2
	b	.L11282
.L11254:
	ldrb	r3, [r9]	@ zero_extendqisi2
	cmp	r3, #128
	beq	.L11259
.L11698:
	and	r3, r3, #31
	ldr	r0, [r5, #12]
	cmp	r3, #1
	bne	.L11706
.L11434:
	cmp	r8, #15
	movls	r3, #0
	movhi	r3, #1
	cmp	r0, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L11506
	add	r3, r8, #12
	ldr	r4, [r0, r3, lsl #2]
.L11436:
	cmp	r4, #0
	beq	.L11433
	ldr	r3, [r4, #52]
	cmp	r3, #0
	beq	.L11433
	mov	r1, r9
	mov	r0, r4
	blx	r3
	mov	r6, r0
	movw	r3, #32767
	cmp	r6, r3
	bne	.L11247
.L11704:
	movw	r7, #:lower16:.LANCHOR4
	movw	r3, #1866
	movt	r7, #:upper16:.LANCHOR4
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L11707
.L11441:
	movw	r2, #1890
	ldr	r3, [r5, #56]
	ldrh	r2, [r7, r2]
	add	r3, r3, #1
	tst	r2, #4
	str	r3, [r5, #56]
	bne	.L11442
.L11445:
	movw	r6, #32767
	b	.L11247
.L11253:
	ldr	r2, [r10, #20]
	ldrb	r3, [r9]	@ zero_extendqisi2
	cmp	r2, #4
	bls	.L11698
	cmp	r3, #1
	bne	.L11698
	cmp	r7, #0
	bne	.L11675
	ldr	r2, [r0, #12]
	cmp	r8, #15
	movls	r3, #0
	movhi	r3, #1
	cmp	r2, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L11503
	add	r8, r8, #12
	ldr	r0, [r2, r8, lsl #2]
	cmp	r0, #0
	beq	.L11503
	ldr	r3, [r0, #68]
	cmp	r3, #0
	beq	.L11699
	lsr	r1, r6, #8
	blx	r3
	subs	r6, r0, #0
	blt	.L11432
	movw	r9, #32767
	subs	r9, r6, r9
	movne	r9, #1
.L11325:
	cmp	r9, #0
	beq	.L11261
.L11443:
	cmp	r6, fp
	mov	r7, r6
	movge	fp, #0
	movlt	fp, #1
	b	.L11282
.L11256:
	ldrb	r3, [r9]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L11698
	add	r3, r0, #60
	mov	r0, r3
	str	r3, [sp, #20]
	bl	_raw_spin_lock
	ldr	r9, [r5]
	ldr	r3, [r5, #12]
	mov	r6, r9
	cmp	r3, #0
	beq	.L11379
	ldrb	r3, [r3, #20]	@ zero_extendqisi2
	cmp	r7, r3
	beq	.L11708
	cmp	r7, #0
	beq	.L11709
.L11448:
	mov	r8, r5
	str	r9, [sp, #28]
	mov	r9, r6
	ldr	r3, [r8, #36]!
	mov	r6, r5
	mov	r5, r4
	sub	r3, r3, #28
	mov	r4, r3
	b	.L11383
.L11389:
	ldrb	r3, [r4, #20]	@ zero_extendqisi2
	cmp	r7, r3
	beq	.L11697
	bl	check_config
	cmp	r0, #0
	bne	.L11697
	ldr	r3, [r4, #28]
	sub	r4, r3, #28
.L11383:
	add	r3, r4, #28
	mov	r0, r7
	cmp	r3, r8
	bne	.L11389
	mov	r4, r5
	ldr	r9, [sp, #28]
	mov	r5, r6
	mvn	r6, #21
	b	.L11390
.L11255:
	ldrb	r3, [r9]	@ zero_extendqisi2
	ldr	r0, [r0, #12]
	cmp	r3, #128
	bne	.L11260
	cmp	r0, #0
	beq	.L11416
	bl	get_config_number
	ldr	r3, [r4]
	add	r0, r0, #1
	strb	r0, [r3]
.L11417:
	adds	r7, fp, #0
	movne	r7, #1
	cmp	fp, r7
	movls	fp, #0
	movhi	fp, #1
	b	.L11282
.L11257:
	ldrb	r3, [r9]	@ zero_extendqisi2
	ldr	r0, [r0, #12]
	cmp	r3, #129
	bne	.L11260
	cmp	r8, #15
	movls	r3, #0
	movhi	r3, #1
	cmp	r0, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L11503
	add	r8, r8, #12
	ldr	r0, [r0, r8, lsl #2]
	cmp	r0, #0
	beq	.L11503
	ldr	r3, [r0, #44]
	cmp	r3, #0
	beq	.L11496
	mov	r1, r6
	blx	r3
	subs	r6, r0, #0
	blt	.L11247
.L11424:
	adds	r7, fp, #0
	ldr	r3, [r4]
	movne	r7, #1
	cmp	r7, fp
	movge	fp, #0
	movlt	fp, #1
	strb	r6, [r3]
.L11282:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r7, [r4, #4]
	mov	r2, #32
	mov	r1, r4
	bfi	r3, fp, #1, #1
	strb	r3, [r4, #26]
	ldr	r0, [r10, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	bge	.L11247
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #1914
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L11710
.L11444:
	ldr	ip, [r4, #4]
	mov	r3, #0
	ldr	lr, [r4, #48]
	str	r3, [r4, #44]
	cmp	lr, ip
	beq	.L11247
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, #42]
	tst	r2, #4
	beq	.L11247
	ldr	r1, [r10, #4]
	movw	r2, #:lower16:.LC6
	add	r0, r0, #24
	movt	r2, #:upper16:.LC6
	ldr	r1, [r1]
	ldr	r1, [r1]
	str	lr, [sp]
	str	ip, [sp, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11247
.L11250:
	ldrb	r3, [r9]	@ zero_extendqisi2
	b	.L11698
.L11267:
	ldr	r3, [r10, #20]
	cmp	r3, #2
	bls	.L11503
	ldr	r3, [r10, #16]
	cmp	r3, #4
	bls	.L11264
.L11503:
	mvn	r6, #94
	b	.L11247
.L11703:
	cmp	r8, #15
	movls	r3, #0
	movhi	r3, #1
	cmp	r0, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L11503
	add	r3, r8, #12
	ldr	r9, [r0, r3, lsl #2]
	cmp	r9, #0
	beq	.L11503
	cmp	r7, #0
	bne	.L11711
	ldr	r3, [r9, #44]
	cmp	r3, #0
	ldrne	r3, [r9, #40]
	beq	.L11699
.L11419:
	mov	r1, r6
	mov	r2, r7
	mov	r0, r9
	blx	r3
	movw	r3, #32767
	mov	r6, r0
	cmp	r0, r3
	beq	.L11421
	mvn	r9, r0
	lsr	r9, r9, #31
	b	.L11325
.L11259:
	lsr	r8, r7, #8
	sub	r3, r8, #1
	cmp	r3, #14
	ldrls	pc, [pc, r3, asl #2]
	b	.L11675
.L11263:
	.word	.L11262
	.word	.L11264
	.word	.L11265
	.word	.L11675
	.word	.L11675
	.word	.L11266
	.word	.L11267
	.word	.L11675
	.word	.L11675
	.word	.L11675
	.word	.L11675
	.word	.L11675
	.word	.L11675
	.word	.L11675
	.word	.L11268
.L11264:
	mov	r0, fp
	bl	set_config_mode
	ldr	r3, [r5]
	ldr	r2, [r3, #16]
	cmp	r2, #5
	str	r2, [sp, #24]
	beq	.L11296
	ldr	r3, [r3, #20]
	cmp	r3, #2
	movls	r3, #0
	strls	r3, [sp, #24]
	bls	.L11296
	cmp	r2, #3
	beq	.L11297
	cmp	r8, #7
	moveq	r3, #3
	movne	r3, #0
	str	r3, [sp, #24]
.L11296:
	uxtb	r0, r7
	bl	set_config_number
	mov	r2, r5
	ldr	r7, [r2, #36]!
	cmp	r2, r7
	sub	r7, r7, #28
	ldrne	r1, [sp, #24]
	bne	.L11298
	b	.L11461
.L11713:
	cmp	r1, #5
	bne	.L11669
	tst	r3, #1
	beq	.L11302
.L11303:
	cmp	r0, #0
	sub	r0, r0, #1
	beq	.L11712
.L11302:
	ldr	r7, [r7, #28]
	cmp	r2, r7
	sub	r7, r7, #28
	beq	.L11461
.L11298:
	cmp	r1, #3
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	bne	.L11713
	tst	r3, #2
	bne	.L11303
	b	.L11302
.L11268:
	ldr	r3, [r10, #20]
	cmp	r3, #4
	bhi	.L11373
	ldrb	r3, [r10, #377]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L11503
.L11373:
	ldr	ip, [r5, #4]
	mov	r2, #0
	mov	r3, #5
	mov	r0, #15
	mov	r8, #12
	mov	r1, #1
	mov	r7, #7
	mov	lr, #16
	ldr	r6, [ip]
	mov	ip, #2
	strb	r3, [r6]
	strb	r0, [r6, #1]
	strb	r3, [r6, #2]
	strb	r2, [r6, #3]
	strb	r2, [r6, #4]
	ldr	r3, [r5, #4]
	ldr	r3, [r3]
	strh	r8, [r6, #2]	@ movhi
	strb	r1, [r6, #4]
	strb	r7, [r3, #5]
	strb	lr, [r3, #6]
	strb	ip, [r3, #7]
	strb	r2, [r3, #8]
	strb	r2, [r3, #9]
	strb	r2, [r3, #10]
	strb	r2, [r3, #11]
	ldr	r3, [r5]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L11374
	ldr	lr, [r5, #4]
	movw	r8, #4106
	ldrh	ip, [r6, #2]	@ unaligned
	movt	r8, 3
	ldrb	r3, [r6, #4]	@ zero_extendqisi2
	ldr	lr, [lr]
	add	r7, ip, #10
	add	r3, r3, r1
	strh	r7, [r6, #2]	@ movhi
	add	r7, lr, ip
	strb	r3, [r6, #4]
	str	r8, [lr, ip]	@ unaligned
	strb	r0, [r7, #4]
	strb	r2, [r7, #5]
	strb	r1, [r7, #6]
	ldr	r3, [r5]
	ldr	r3, [r3]
	ldr	r3, [r3, #28]
	cmp	r3, r2
	beq	.L11375
	add	r0, sp, #60
	blx	r3
.L11376:
	ldrb	r3, [sp, #60]	@ zero_extendqisi2
	strb	r3, [r7, #7]
	ldrh	r3, [sp, #62]
	strh	r3, [r7, #8]	@ unaligned
.L11374:
	ldrh	r3, [r6, #2]	@ unaligned
	cmp	fp, r3
	bcc	.L11377
	movw	r9, #32767
	mov	r6, r3
	subs	r9, r3, r9
	movne	r9, #1
	b	.L11325
.L11266:
	ldr	r3, [r10, #20]
	cmp	r3, #2
	bls	.L11503
	ldr	r3, [r10, #16]
	cmp	r3, #4
	bhi	.L11503
	ldr	r1, [r0, #4]
	mov	r2, #10
	mov	r3, #6
	ldr	r8, [r1]
	strb	r2, [r8]
	strb	r3, [r8, #1]
	ldrh	r3, [r0, #19]	@ unaligned
	strh	r3, [r8, #2]	@ unaligned
	ldrb	r3, [r0, #21]	@ zero_extendqisi2
	strb	r3, [r8, #4]
	ldrb	r3, [r0, #22]	@ zero_extendqisi2
	strb	r3, [r8, #5]
	ldrb	r3, [r0, #23]	@ zero_extendqisi2
	strb	r3, [r8, #6]
	ldr	r3, [r0]
	ldr	r3, [r3, #4]
	ldrh	r3, [r3, #20]
	strb	r3, [r8, #7]
	ldr	r3, [r0]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bhi	.L11284
	mov	r7, r0
	ldr	r6, [r7, #36]!
	cmp	r7, r6
	sub	r6, r6, #28
	beq	.L11471
.L11285:
	mov	r3, #0
.L11460:
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	mov	r0, r6
	add	r1, r3, #1
	tst	r2, #4
	beq	.L11290
	bl	count_multi_config
	ldr	r6, [r6, #28]
	mov	r3, r0
	cmp	r7, r6
	sub	r6, r6, #28
	bne	.L11460
.L11286:
	cmp	fp, #10
	mov	r2, #0
	strb	r3, [r8, #8]
	movlt	r7, fp
	movge	r7, #10
	cmp	fp, r7
	strb	r2, [r8, #9]
	movle	fp, #0
	movgt	fp, #1
	b	.L11282
.L11265:
	mov	r0, fp
	bl	set_string_mode
	ldr	r3, [r4]
	ands	r9, r7, #255
	str	r3, [sp, #20]
	beq	.L11714
	ldrb	r3, [r5, #49]	@ zero_extendqisi2
	cmp	r9, r3
	beq	.L11715
	ldrb	r3, [r5, #50]	@ zero_extendqisi2
	cmp	r9, r3
	beq	.L11716
	ldrb	r3, [r5, #51]	@ zero_extendqisi2
	cmp	r9, r3
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	beq	.L11671
.L11357:
	ldr	r3, [r3, #2476]
	ldr	r0, [r3, #16]
	cmp	r0, #0
	beq	.L11360
	mov	r3, r9
	mov	r2, r6
	ldr	r1, [sp, #20]
	bl	lookup_string
	cmp	r0, #0
	ble	.L11360
.L11352:
	uxth	r3, r0
	cmp	r3, fp
	bhi	.L11377
	uxth	r6, r0
	movw	r9, #32767
	subs	r9, r6, r9
	movne	r9, #1
	b	.L11325
.L11675:
	mvn	r6, #94
.L11261:
	movw	r3, #32767
	sub	r3, r6, r3
	clz	r3, r3
	lsr	r3, r3, #5
.L11423:
	cmp	fp, #0
	moveq	r3, #0
	cmp	r3, #0
	beq	.L11247
	cmp	r5, #0
	beq	.L11445
	movw	r2, #:lower16:.LC964
	movw	r0, #:lower16:.LC102
	ldr	r3, .L11730
	movt	r2, #:upper16:.LC964
	movt	r0, #:upper16:.LC102
	movw	r1, #1500
	movw	r6, #32767
	bl	warn_slowpath_fmt
	b	.L11247
.L11442:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC958
	movt	r2, #:upper16:.LC958
	ldr	r0, .L11730+4
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11247
.L11707:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC957
	ldr	ip, [r4]
	movt	r2, #:upper16:.LC957
	ldr	r3, .L11730
	ldr	r0, .L11730+8
	add	r1, r1, #32
	stm	sp, {r8, ip}
	bl	__dynamic_dev_dbg
	b	.L11441
.L11669:
	tst	r3, #4
	bne	.L11303
	b	.L11302
.L11416:
	ldr	r3, [r4]
	strb	r0, [r3]
	b	.L11417
.L11365:
	ldr	r8, [r8, #72]
	ldr	r3, [sp, #20]
	cmp	r3, r8
	sub	r8, r8, #72
	bne	.L11362
.L11363:
	ldr	r3, [sp, #24]
	ldr	r2, [sp, #44]
	ldr	r3, [r3, #28]
	cmp	r2, r3
	sub	r3, r3, #28
	str	r3, [sp, #24]
	bne	.L11359
.L11461:
	mvn	r6, #21
	b	.L11247
.L11377:
	mov	r7, fp
	mov	fp, #0
	b	.L11282
.L11705:
	add	r8, r8, #12
	ldr	r0, [r2, r8, lsl #2]
	cmp	r0, #0
	beq	.L11500
	ldr	r3, [r0, #64]
	cmp	r3, #0
	beq	.L11427
	blx	r3
	subs	r3, r0, #0
	blt	.L11500
.L11427:
	ldr	r2, [r4]
	ubfx	r1, r3, #8, #8
	mov	r7, #2
	strb	r3, [r2]
	strb	r1, [r2, #1]
	b	.L11282
.L11710:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC963
	mov	r3, r6
	movt	r2, #:upper16:.LC963
	ldr	r0, .L11730+12
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11444
.L11711:
	ldr	r3, [r9, #40]
	cmp	r3, #0
	bne	.L11419
	b	.L11503
.L11712:
	ldr	r2, [r5, #4]
	mov	r3, #9
	ldr	r2, [r2]
	strb	r3, [r2]
	add	r3, r2, r3
	mov	r6, r2
	strb	r8, [r2, #1]
	str	r3, [sp, #32]
	ldrb	r3, [r7, #44]	@ zero_extendqisi2
	str	r2, [sp, #36]
	strb	r3, [r2, #4]
	bl	get_config_number
	add	r0, r0, #1
	strb	r0, [r6, #5]
	ldrb	r3, [r7, #21]	@ zero_extendqisi2
	strb	r3, [r6, #6]
	ldrb	r3, [r7, #22]	@ zero_extendqisi2
	mvn	r3, r3, lsl #25
	mvn	r3, r3, lsr #25
	strb	r3, [r6, #7]
	ldrb	r3, [r7, #23]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L11305
	ldr	r2, [r7, #24]
	mov	r3, #500
	ldr	r2, [r2, #64]
	sdiv	r3, r3, r2
	uxtb	r3, r3
.L11305:
	ldr	r2, [sp, #36]
	strb	r3, [r2, #8]
	ldr	r9, [r7, #8]
	cmp	r9, #0
	beq	.L11478
	ldr	r1, [r9]
	cmp	r1, #0
	beq	.L11479
	ldrb	r6, [r1]	@ zero_extendqisi2
	movw	r8, #4087
	ldr	r3, [sp, #32]
	b	.L11308
.L11310:
	ldrb	r6, [r1]	@ zero_extendqisi2
	cmp	r6, r8
	bhi	.L11461
.L11308:
	mov	r0, r3
	mov	r2, r6
	bl	memcpy
	ldr	r1, [r9, #4]!
	sub	r8, r8, r6
	add	r3, r0, r6
	cmp	r1, #0
	bne	.L11310
.L11307:
	ldr	r2, [sp, #32]
	subs	r6, r3, r2
	bmi	.L11247
	rsb	r3, r6, #4080
	add	r2, r2, r6
	add	r3, r3, #7
	mov	r1, r3
	str	r2, [sp, #32]
.L11306:
	mov	r2, r7
	ldr	r3, [r2, #36]!
	cmp	r2, r3
	str	r2, [sp, #20]
	sub	r3, r3, #72
	beq	.L11312
	ldr	r9, [sp, #32]
	str	r7, [sp, #28]
	mov	r8, r1
	str	r10, [sp, #52]
	ldr	r10, [sp, #24]
	mov	r7, r3
	str	r4, [sp, #40]
	str	fp, [sp, #44]
	str	r5, [sp, #48]
.L11322:
	ldr	r0, [r7]
	bl	is_available_function
	cmp	r0, #0
	beq	.L11313
	cmp	r10, #3
	beq	.L11315
	cmp	r10, #5
	bne	.L11670
	ldr	fp, [r7, #12]
.L11317:
	cmp	fp, #0
	beq	.L11313
	ldr	r1, [fp]
	mov	r6, r8
	cmp	r1, #0
	beq	.L11480
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r8, r4
	bcc	.L11461
	mov	r5, r9
	b	.L11319
.L11320:
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r4, r6
	bhi	.L11461
.L11319:
	mov	r0, r5
	mov	r2, r4
	bl	memcpy
	ldr	r1, [fp, #4]!
	sub	r6, r6, r4
	add	r5, r5, r4
	cmp	r1, #0
	bne	.L11320
	subs	r6, r5, r9
	bmi	.L11247
.L11318:
	mov	r1, r9
	mov	r2, r8
	ldr	r3, [sp, #28]
	mov	r0, r7
	str	r10, [sp]
	bl	change_conf
	cmp	r0, #0
	blt	.L11717
	sub	r8, r8, r6
	mov	r9, r5
.L11313:
	ldr	r7, [r7, #72]
	ldr	r3, [sp, #20]
	cmp	r3, r7
	sub	r7, r7, #72
	bne	.L11322
	ldr	r7, [sp, #28]
	str	r9, [sp, #32]
	ldr	r4, [sp, #40]
	ldr	fp, [sp, #44]
	ldr	r5, [sp, #48]
	ldr	r10, [sp, #52]
.L11312:
	mov	r0, r7
	ldr	r2, [sp, #32]
	ldr	r7, [sp, #36]
	sub	r6, r2, r7
	mov	r1, r7
	bl	set_interface_count
	uxth	r3, r6
	cmp	r6, #0
	strh	r3, [r7, #2]	@ unaligned
	blt	.L11247
	cmp	fp, r3
	bcc	.L11377
	uxth	r6, r6
	movw	r9, #32767
	subs	r9, r6, r9
	movne	r9, #1
	b	.L11325
.L11670:
	ldr	fp, [r7, #16]
	b	.L11317
.L11315:
	ldr	fp, [r7, #8]
	b	.L11317
.L11421:
	movw	r7, #:lower16:.LANCHOR4
	movw	r3, #1818
	movt	r7, #:upper16:.LANCHOR4
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L11718
.L11422:
	movw	r2, #1842
	ldr	r3, [r5, #56]
	ldrh	r2, [r7, r2]
	add	r3, r3, #1
	tst	r2, #4
	str	r3, [r5, #56]
	moveq	r3, #1
	beq	.L11423
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC958
	movt	r2, #:upper16:.LC958
	ldr	r0, .L11730+16
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	mov	r3, #1
	b	.L11423
.L11714:
	mov	r0, r3
	mov	r1, #256
	mov	r6, r3
	bl	__memzero
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #3
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2476]
	strb	r2, [r6, #1]
	ldr	ip, [r3, #16]
	cmp	ip, #0
	beq	.L11327
	ldr	r3, [ip]
	add	lr, r6, #2
	cmp	r3, #0
	beq	.L11327
	add	r0, r6, #254
.L11332:
	ldrh	r2, [r6, #2]
	ldrh	r1, [r3]
	cmp	r2, #0
	beq	.L11482
	cmp	lr, r0
	bcs	.L11482
	cmp	r1, r2
	beq	.L11329
	mov	r3, lr
	b	.L11330
.L11719:
	cmp	r3, r0
	bcs	.L11328
	cmp	r1, r2
	beq	.L11329
.L11330:
	ldrh	r2, [r3, #2]!
	cmp	r2, #0
	bne	.L11719
.L11328:
	strh	r1, [r3]	@ movhi
.L11329:
	ldr	r3, [ip, #4]!
	cmp	r3, #0
	bne	.L11332
.L11327:
	mov	r3, r5
	ldr	r7, [r3, #36]!
	cmp	r3, r7
	sub	r9, r7, #28
	beq	.L11333
	ldr	r2, [sp, #20]
	strd	r4, [sp, #24]
	str	r10, [sp, #32]
	mov	r10, r3
	add	r7, r2, #2
	add	r8, r2, #254
	mov	r4, r2
	mov	r5, r7
.L11348:
	ldr	lr, [r9, #4]
	cmp	lr, #0
	beq	.L11334
	ldr	r3, [lr]
	cmp	r3, #0
	beq	.L11334
.L11339:
	ldrh	r2, [r4, #2]
	ldrh	r1, [r3]
	cmp	r2, #0
	beq	.L11484
	cmp	r8, r5
	bls	.L11484
	cmp	r2, r1
	beq	.L11336
	mov	r3, r5
	b	.L11337
.L11720:
	cmp	r8, r3
	bls	.L11335
	cmp	r1, r2
	beq	.L11336
.L11337:
	ldrh	r2, [r3, #2]!
	cmp	r2, #0
	bne	.L11720
.L11335:
	strh	r1, [r3]	@ movhi
.L11336:
	ldr	r3, [lr, #4]!
	cmp	r3, #0
	bne	.L11339
.L11334:
	mov	r6, r9
	ldr	r7, [r6, #36]!
	cmp	r6, r7
	sub	r7, r7, #72
	beq	.L11340
.L11347:
	ldr	r0, [r7]
	bl	is_available_function
	cmp	r0, #0
	beq	.L11341
	ldr	r0, [r7, #4]
	cmp	r0, #0
	beq	.L11341
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L11341
.L11346:
	ldrh	r2, [r4, #2]
	ldrh	r1, [r3]
	cmp	r2, #0
	beq	.L11486
	cmp	r8, r5
	bls	.L11486
	cmp	r1, r2
	beq	.L11343
	mov	r3, r5
	b	.L11344
.L11721:
	cmp	r8, r3
	bls	.L11342
	cmp	r1, r2
	beq	.L11343
.L11344:
	ldrh	r2, [r3, #2]!
	cmp	r2, #0
	bne	.L11721
.L11342:
	strh	r1, [r3]	@ movhi
.L11343:
	ldr	r3, [r0, #4]!
	cmp	r3, #0
	bne	.L11346
.L11341:
	ldr	r7, [r7, #72]
	cmp	r6, r7
	sub	r7, r7, #72
	bne	.L11347
.L11340:
	ldr	r9, [r9, #28]
	cmp	r10, r9
	sub	r9, r9, #28
	bne	.L11348
	ldrd	r4, [sp, #24]
	ldr	r10, [sp, #32]
.L11333:
	mov	r3, #0
.L11349:
	ldr	r2, [sp, #20]
	add	r2, r2, r3, lsl #1
	ldrh	r2, [r2, #2]	@ unaligned
	cmp	r2, #0
	bne	.L11351
	cmp	r3, #0
	beq	.L11461
.L11350:
	add	r3, r3, #1
	ldr	r2, [sp, #20]
	lsl	r3, r3, #1
	uxtb	r3, r3
	mov	r0, r3
	strb	r3, [r2]
	b	.L11352
.L11486:
	mov	r3, r5
	b	.L11342
.L11484:
	mov	r3, r5
	b	.L11335
.L11360:
	mov	r2, r5
	ldr	r3, [r2, #36]!
	cmp	r2, r3
	sub	r3, r3, #28
	str	r3, [sp, #24]
	str	r2, [sp, #44]
	beq	.L11461
	ldr	r7, [sp, #20]
	str	r4, [sp, #28]
	str	fp, [sp, #32]
	str	r5, [sp, #36]
	str	r10, [sp, #40]
	add	r3, r7, #2
	mov	fp, r3
	ldr	r3, [sp, #24]
.L11359:
	ldr	r0, [r3, #4]
	cmp	r0, #0
	beq	.L11364
	mov	r3, r9
	mov	r2, r6
	mov	r1, r7
	bl	lookup_string
	cmp	r0, #0
	bgt	.L11693
.L11364:
	ldr	r3, [sp, #24]
	ldr	r8, [r3, #36]!
	cmp	r3, r8
	str	r3, [sp, #20]
	sub	r8, r8, #72
	beq	.L11363
	mov	r10, #126
.L11362:
	ldr	r5, [r8, #4]
	cmp	r5, #0
	subne	r5, r5, #4
	beq	.L11365
.L11366:
	ldr	r3, [r5, #4]!
	cmp	r3, #0
	beq	.L11365
	ldrh	r2, [r3]
	cmp	r2, r6
	bne	.L11366
	ldr	r3, [r3, #4]
	cmp	r3, #0
	bne	.L11700
	b	.L11366
.L11722:
	adds	r3, r3, #8
	beq	.L11366
.L11700:
	ldr	r4, [r3, #4]
	cmp	r4, #0
	beq	.L11366
	ldrb	r2, [r3]	@ zero_extendqisi2
	cmp	r9, r2
	bne	.L11722
	mov	r0, r4
	bl	strlen
	cmp	r0, #126
	mov	r3, fp
	str	r10, [sp]
	movcc	r1, r0
	movcs	r1, #126
	mov	r2, #1
	mov	r0, r4
	bl	utf8s_to_utf16s
	cmp	r0, #0
	blt	.L11366
	add	r3, r0, #1
	mov	r2, #3
	lsl	r3, r3, #1
	strb	r2, [r7, #1]
	uxtb	r3, r3
	subs	r0, r3, #0
	strb	r3, [r7]
	beq	.L11366
.L11693:
	ldr	r4, [sp, #28]
	ldr	fp, [sp, #32]
	ldr	r5, [sp, #36]
	ldr	r10, [sp, #40]
	b	.L11352
.L11478:
	movw	r3, #4087
	mov	r1, r3
	b	.L11306
.L11715:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r7, [r3, #3244]
	cmp	r7, #0
	bne	.L11354
	ldr	r2, [r3, #2476]
	ldr	r7, [r2, #8]
	cmp	r7, #0
	addeq	r7, r3, #3248
.L11354:
	mov	r0, r7
	bl	strlen
	ldr	r3, [sp, #20]
	mov	r2, #126
	cmp	r0, r2
	movcc	r1, r0
	movcs	r1, r2
	str	r2, [sp]
	mov	r0, r7
	mov	r2, #1
	add	r3, r3, #2
	bl	utf8s_to_utf16s
	cmp	r0, #0
	blt	.L11461
	add	r3, r0, #1
	ldr	r1, [sp, #20]
	mov	r2, #3
	lsl	r3, r3, #1
	uxtb	r3, r3
	mov	r0, r3
	strb	r3, [r1]
	strb	r2, [r1, #1]
	b	.L11352
.L11480:
	mov	r6, r1
	mov	r5, r9
	b	.L11318
.L11716:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r7, [r3, #3300]
	cmp	r7, #0
	ldreq	r2, [r3, #2476]
	ldreq	r7, [r2, #4]
	bne	.L11354
.L11356:
	cmp	r7, #0
	beq	.L11357
	b	.L11354
.L11351:
	add	r3, r3, #1
	cmp	r3, #127
	bne	.L11349
	b	.L11350
.L11482:
	mov	r3, lr
	b	.L11328
.L11297:
	ldr	r3, [sp, #24]
	cmp	r8, #7
	moveq	r3, #0
	str	r3, [sp, #24]
	b	.L11296
.L11671:
	ldr	r7, [r3, #3304]
	b	.L11356
.L11496:
	mov	r6, r3
	b	.L11424
.L11290:
	ldr	r6, [r6, #28]
	cmp	r7, r6
	sub	r6, r6, #28
	bne	.L11460
	b	.L11286
.L11284:
	ldr	r3, [r3, #16]
	mov	r7, r0
	ldr	r6, [r7, #36]!
	cmp	r3, #3
	beq	.L11723
	cmp	r7, r6
	sub	r6, r6, #28
	beq	.L11471
	cmp	r3, #5
	mov	r3, #0
	bne	.L11289
.L11288:
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	mov	r0, r6
	add	r1, r3, #1
	tst	r2, #1
	beq	.L11294
	bl	count_multi_config
	ldr	r6, [r6, #28]
	mov	r3, r0
	cmp	r7, r6
	sub	r6, r6, #28
	bne	.L11288
	b	.L11286
.L11292:
	ldr	r6, [r6, #28]
	cmp	r7, r6
	sub	r6, r6, #28
	beq	.L11286
.L11289:
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	mov	r0, r6
	add	r1, r3, #1
	tst	r2, #2
	beq	.L11292
	bl	count_multi_config
	ldr	r6, [r6, #28]
	mov	r3, r0
	cmp	r7, r6
	sub	r6, r6, #28
	bne	.L11289
	b	.L11286
.L11294:
	ldr	r6, [r6, #28]
	cmp	r7, r6
	sub	r6, r6, #28
	bne	.L11288
	b	.L11286
.L11432:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC962
	adds	fp, fp, #0
	mov	r2, r6
	movt	r1, #:upper16:.LC962
	movne	fp, #1
	add	r0, r0, #32
	bl	dev_err
	b	.L11282
.L11699:
	adds	fp, fp, #0
	movne	fp, #1
	b	.L11282
.L11718:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC957
	ldr	ip, [r9]
	movt	r2, #:upper16:.LC957
	ldr	r3, .L11730
	ldr	r0, .L11730+20
	add	r1, r1, #32
	stm	sp, {r8, ip}
	bl	__dynamic_dev_dbg
	b	.L11422
.L11479:
	ldr	r3, [sp, #32]
	b	.L11307
.L11723:
	cmp	r7, r6
	sub	r6, r6, #28
	bne	.L11285
.L11471:
	mov	r3, #0
	b	.L11286
.L11375:
	mov	r3, #500
	strb	r1, [sp, #60]
	strh	r3, [sp, #62]	@ movhi
	b	.L11376
.L11262:
	ldr	r3, [r0]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	movls	r7, #0
	movls	r9, r7
	bls	.L11269
	ldr	r7, [r3, #16]
	cmp	r7, #3
	beq	.L11467
	sub	r7, r7, #5
	mov	r9, #0
	clz	r7, r7
	lsr	r7, r7, #5
.L11269:
	mov	r8, r5
	ldr	r6, [r8, #36]!
	mov	r2, #0
	sub	r6, r6, #28
	b	.L11270
.L11725:
	tst	r3, #1
	beq	.L11272
.L11273:
	bl	count_multi_config
	mov	r2, r0
.L11272:
	ldr	r6, [r6, #28]
	sub	r6, r6, #28
.L11270:
	add	r3, r6, #28
	mov	r0, r6
	cmp	r3, r8
	add	r1, r2, #1
	beq	.L11724
	cmp	r7, #0
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	bne	.L11725
	cmp	r9, #0
	beq	.L11274
	tst	r3, #2
	bne	.L11273
	b	.L11272
.L11724:
	ldr	r1, [r5]
	strb	r2, [r5, #34]
	mov	r2, #2
	ldr	r3, [r1, #4]
	ldrh	r3, [r3, #20]
	strb	r3, [r5, #24]
	str	r2, [r5, #64]
	ldr	r3, [r10, #20]
	cmp	r3, #4
	bls	.L11276
	ldr	r3, [r10, #16]
	cmp	r3, #4
	bls	.L11277
	mov	r3, #0
	mov	r2, #9
	mov	ip, #3
	movw	r0, #:lower16:.LANCHOR4
	strb	r3, [r5, #19]
	movt	r0, #:upper16:.LANCHOR4
	movw	r3, #1650
	strb	ip, [r5, #20]
	strb	r2, [r5, #24]
	ldrh	r3, [r0, r3]
	mov	r2, #8
	str	r2, [r5, #64]
	tst	r3, #4
	beq	.L11279
	movw	r2, #:lower16:.LC946
	add	r1, r1, #32
	add	r0, r0, #1632
	movt	r2, #:upper16:.LC946
	bl	__dynamic_dev_dbg
.L11279:
	cmp	fp, #17
	add	r1, r5, #17
	ldr	r0, [r4]
	movls	r7, fp
	movhi	r7, #18
	mov	r2, r7
	bl	memcpy
	movw	r0, #:lower16:.LC949
	movt	r0, #:upper16:.LC949
	bl	printk
	cmp	fp, r7
	movls	fp, #0
	movhi	fp, #1
	b	.L11282
.L11277:
	mov	r0, #16
	movw	r3, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR4
	strb	r0, [r5, #19]
	strb	r2, [r5, #20]
	movw	r2, #1674
	ldrh	r3, [r3, r2]
	tst	r3, #4
	beq	.L11279
	movw	r2, #:lower16:.LC947
	add	r1, r1, #32
	ldr	r0, .L11730+24
	movt	r2, #:upper16:.LC947
	bl	__dynamic_dev_dbg
	b	.L11279
.L11276:
	ldrb	r3, [r10, #377]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L11279
	mov	ip, #1
	movw	r0, #:lower16:.LANCHOR4
	movt	r0, #:upper16:.LANCHOR4
	movw	r3, #1698
	strb	ip, [r5, #19]
	strb	r2, [r5, #20]
	ldrh	r3, [r0, r3]
	tst	r3, #4
	beq	.L11279
	movw	r2, #:lower16:.LC948
	add	r1, r1, #32
	movt	r2, #:upper16:.LC948
	add	r0, r0, #1680
	bl	__dynamic_dev_dbg
	b	.L11279
.L11717:
	movw	r0, #:lower16:.LC950
	ldr	r1, .L11730+28
	mvn	r6, #21
	movt	r0, #:upper16:.LC950
	bl	printk
	b	.L11247
.L11467:
	mov	r7, #0
	mov	r9, #1
	b	.L11269
.L11274:
	tst	r3, #4
	bne	.L11273
	b	.L11272
.L11697:
	str	r4, [sp, #24]
	mov	r4, r5
	mov	r5, r6
	ldr	r3, [r5, #12]
	mov	r6, r9
	ldr	r9, [sp, #28]
	cmp	r3, #0
	beq	.L11386
	mov	r0, r5
	bl	reset_config
.L11386:
	ldr	r0, [r9, #16]
	ldr	r8, [r5]
	bl	usb_speed_string
	ldr	r3, [sp, #24]
	mov	r2, r0
	add	r8, r8, #32
	cmp	r3, #0
	beq	.L11391
	ldr	r3, [r3]
	movw	r1, #:lower16:.LC953
	mov	r6, #0
	mov	r0, r1
	movw	r1, #:lower16:.LC952
	movt	r0, #:upper16:.LC953
	movt	r1, #:upper16:.LC952
	str	r3, [sp]
	mov	r3, r7
	str	r0, [sp, #36]
	mov	r0, r8
	bl	_dev_info
	ldr	r3, [sp, #24]
	str	r4, [sp, #28]
	mov	r1, r6
	mov	r4, r6
	add	r2, r3, #48
	str	r3, [r5, #12]
	str	r2, [sp, #32]
.L11411:
	ldr	r3, [sp, #32]
	ldr	r8, [r3], #4
	cmp	r8, #0
	str	r3, [sp, #32]
	beq	.L11392
	ldr	r3, [r9, #16]
	cmp	r3, #3
	beq	.L11394
	cmp	r3, #5
	str	r3, [sp, #40]
	bne	.L11673
	ldr	r0, [sp, #36]
	bl	power_supply_get_by_name
	ldr	r6, [r8, #12]
	ldr	r3, [sp, #40]
	cmp	r6, #0
	beq	.L11726
	cmp	r0, #0
	beq	.L11727
	add	r2, sp, #64
	mov	r1, #4
	str	r3, [r2, #-4]!
	ldr	r3, [r0, #40]
	blx	r3
.L11400:
	ldr	r2, [r6]
	cmp	r2, #0
	beq	.L11405
	add	r3, r8, #80
	str	r9, [sp, #40]
	mov	r9, r4
	mov	r4, r3
.L11402:
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	cmp	r1, #5
	bne	.L11401
	ldrb	r2, [r2, #2]	@ zero_extendqisi2
	mov	r1, r4
	asr	r0, r2, #3
	and	r2, r2, #15
	and	r0, r0, #16
	orr	r0, r0, r2
	bl	_set_bit
.L11401:
	ldr	r2, [r6, #4]!
	cmp	r2, #0
	bne	.L11402
	mov	r4, r9
	ldr	r9, [sp, #40]
.L11405:
	mov	r2, #0
	mov	r1, r4
	ldr	r3, [r8, #40]
	mov	r0, r8
	blx	r3
	subs	r6, r0, #0
	blt	.L11728
	movw	r3, #32767
	cmp	r6, r3
	beq	.L11729
.L11408:
	add	r4, r4, #1
	cmp	r4, #16
	bne	.L11411
.L11392:
	ldr	r3, [sp, #24]
	ldr	r4, [sp, #28]
	ldrb	r3, [r3, #23]	@ zero_extendqisi2
	cmp	r3, #0
	ldrne	r1, [r5, #64]
	mulne	r1, r1, r3
	moveq	r1, #500
.L11412:
	ldr	r3, [r9]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L11453
	mov	r0, r9
	blx	r3
.L11453:
	ldr	r3, [r5, #56]
	cmp	r3, #0
	bne	.L11456
	ldr	r0, [sp, #20]
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC959
	movt	r0, #:upper16:.LC959
	bl	printk
	cmp	r6, #0
	bne	.L11414
.L11455:
	cmp	r7, #0
	beq	.L11415
	sub	r0, r7, #1
	bl	set_config_number
.L11415:
	ldr	r3, [r10, #16]
	cmp	r3, #5
	beq	.L11458
	adds	fp, fp, #0
	mov	r7, #0
	movne	fp, #1
	b	.L11282
.L11456:
	movw	r6, #32767
.L11397:
	ldr	r0, [sp, #20]
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC959
	movt	r0, #:upper16:.LC959
	bl	printk
.L11414:
	ldr	r3, [r10, #16]
	mvn	r7, r6
	movw	r8, #32767
	lsr	r7, r7, #31
	cmp	r6, r8
	moveq	r9, #0
	andne	r9, r7, #1
	cmp	r3, #5
	bne	.L11325
	bl	get_host_os_type
	cmp	r0, #0
	bne	.L11325
.L11464:
	movw	r7, #:lower16:sec_qcom_usb_rdrv
	mov	r1, #0
	movt	r7, #:upper16:sec_qcom_usb_rdrv
	ldr	r0, [r7]
	bl	__gpio_set_value
	movw	r0, #:lower16:.LC960
	ldr	r1, .L11730
	ldr	r2, [r7]
	movt	r0, #:upper16:.LC960
	bl	printk
	movw	r0, #:lower16:.LC961
	movt	r0, #:upper16:.LC961
	bl	printk
	b	.L11325
.L11458:
	bl	get_host_os_type
	cmp	r0, #0
	beq	.L11507
	mov	r6, #0
	b	.L11443
.L11729:
	ldr	r0, .L11730+32
	ldrh	r3, [r0]
	tst	r3, #4
	beq	.L11409
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC957
	sub	r0, r0, #18
	ldr	ip, [r8]
	movt	r2, #:upper16:.LC957
	ldr	r3, .L11730+36
	add	r1, r1, #32
	stm	sp, {r4, ip}
	bl	__dynamic_dev_dbg
.L11409:
	ldr	r0, .L11730+40
	ldr	r3, [r5, #56]
	ldrh	r2, [r0]
	add	r3, r3, #1
	str	r3, [r5, #56]
	tst	r2, #4
	beq	.L11408
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC958
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC958
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11408
.L11507:
	mov	r6, r0
	mov	r9, #1
	b	.L11464
.L11728:
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #1746
	movt	r0, #:upper16:.LANCHOR4
	mov	r2, r4
	ldr	r4, [sp, #28]
	ldrh	r3, [r0, r3]
	tst	r3, #4
	beq	.L11406
	ldr	r1, [r5]
	str	r8, [sp, #4]
	mov	r3, r2
	str	r6, [sp, #8]
	ldr	ip, [r8]
	movw	r2, #:lower16:.LC956
	add	r0, r0, #1728
	movt	r2, #:upper16:.LC956
	add	r1, r1, #32
	str	ip, [sp]
	bl	__dynamic_dev_dbg
.L11406:
	mov	r0, r5
	bl	reset_config
.L11390:
	ldr	r3, [r9]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L11397
	mov	r0, r9
	mov	r1, #100
	blx	r3
	b	.L11397
.L11709:
	mov	r0, r5
	bl	reset_config
	ldr	r9, [r5]
.L11382:
	ldr	r0, [r6, #16]
	add	r8, r9, #32
	bl	usb_speed_string
	mov	r2, r0
.L11391:
	movw	r3, #:lower16:.LC965
	movw	r1, #:lower16:.LC952
	movt	r3, #:upper16:.LC965
	mov	r0, r8
	movt	r1, #:upper16:.LC952
	str	r3, [sp]
	mov	r3, r7
	bl	_dev_info
	ldr	r3, [r6]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L11702
	mov	r0, r6
	mov	r1, #100
	blx	r3
.L11702:
	ldr	r3, [r5, #56]
	cmp	r3, #0
	bne	.L11456
.L11685:
	ldr	r0, [sp, #20]
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC959
	movt	r0, #:upper16:.LC959
	bl	printk
	b	.L11455
.L11727:
	movw	r0, #:lower16:.LC955
	ldr	r1, .L11730+36
	ldr	r2, [sp, #36]
	movt	r0, #:upper16:.LC955
	bl	printk
	b	.L11400
.L11726:
	movw	r0, #:lower16:.LC954
	ldr	r1, .L11730+36
	mvn	r6, #21
	ldr	r2, [r8]
	movt	r0, #:upper16:.LC954
	ldr	r4, [sp, #28]
	bl	printk
	b	.L11397
.L11673:
	ldr	r6, [r8, #16]
	b	.L11400
.L11394:
	ldr	r6, [r8, #8]
	b	.L11400
.L11731:
	.align	2
.L11730:
	.word	.LANCHOR5-1176
	.word	.LANCHOR4+1872
	.word	.LANCHOR4+1848
	.word	.LANCHOR4+1896
	.word	.LANCHOR4+1824
	.word	.LANCHOR4+1800
	.word	.LANCHOR4+1656
	.word	.LANCHOR5-1200
	.word	.LANCHOR4+1770
	.word	.LANCHOR5-1188
	.word	.LANCHOR4+1794
	.word	.LANCHOR4+1704
.L11708:
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #1722
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r2]
	tst	r3, #4
	beq	.L11685
	movw	r2, #:lower16:.LC951
	add	r1, r9, #32
	ldr	r0, .L11730+44
	movt	r2, #:upper16:.LC951
	mov	r3, r7
	bl	__dynamic_dev_dbg
	b	.L11685
.L11379:
	cmp	r7, #0
	beq	.L11382
	b	.L11448
	.fnend
	.size	composite_setup, .-composite_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_function_init, %function
acm_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 80
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:__stack_chk_guard
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	movt	r3, #:upper16:__stack_chk_guard
	mov	r5, r1
	strd	r8, [sp, #16]
	movw	r9, #:lower16:kmalloc_caches
	strd	r10, [sp, #24]
	movt	r9, #:upper16:kmalloc_caches
	str	lr, [sp, #32]
	.pad #92
	sub	sp, sp, #92
	ldr	r2, [r3]
	str	r3, [sp, #12]
	ldr	r3, [r9, #24]
	str	r2, [sp, #84]
	cmp	r3, #0
	moveq	r3, #16
	streq	r3, [r0, #4]
	beq	.L11734
	mov	r0, r3
	mov	r2, #4
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	beq	.L11751
.L11734:
	ldr	r3, [r5]
	mov	r1, #0
	mov	r0, #4
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	str	r3, [sp, #20]
	bl	__alloc_tty_driver
	cmp	r0, #0
	str	r0, [r8, #3764]
	beq	.L11751
	movw	r2, #:lower16:.LC966
	movw	r3, #:lower16:tty_std_termios
	ldr	r1, .L11778
	movt	r3, #:upper16:tty_std_termios
	movt	r2, #:upper16:.LC966
	ldrd	r4, [r3]
	mov	lr, #3
	str	r2, [r0, #72]
	movw	r2, #:lower16:.LC967
	ldrd	r6, [r3, #8]
	movt	r2, #:upper16:.LC967
	ldrd	r10, [r3, #32]
	movt	lr, 1
	str	r2, [r0, #76]
	str	lr, [r0, #96]
	mov	lr, #14
	strd	r4, [r0, #100]
	ldrd	r4, [r3, #16]
	ldrd	r2, [r3, #24]
	strd	r6, [r0, #108]
	strd	r4, [r0, #116]
	movw	r4, #3261
	mov	r5, #0
	strd	r10, [r0, #132]
	strd	r2, [r0, #124]
	mov	r3, #9600
	str	r4, [r0, #108]
	str	r3, [r0, #136]
	str	r3, [r0, #140]
	str	lr, [r0, #144]
	bl	tty_set_operations
	movw	r2, #:lower16:.LC968
	mov	r1, #10
	str	r5, [sp]
	movt	r2, #:upper16:.LC968
	movw	r0, #:lower16:.LC84
	mov	r3, r5
	movt	r1, 2
	str	r2, [sp, #4]
	movt	r0, #:upper16:.LC84
	mov	r2, #1
	bl	__alloc_workqueue_key
	ldr	r3, .L11778+4
	cmp	r0, r5
	str	r0, [r8, #3388]
	str	r3, [sp, #16]
	beq	.L11753
	movw	r2, #:lower16:.LC969
	movw	r1, #:lower16:.LC970
	str	r8, [sp, #24]
	movt	r2, #:upper16:.LC969
	movt	r1, #:upper16:.LC970
	str	r3, [sp, #28]
	add	r7, r3, #236
	mov	r6, r3
	mov	r8, r2
	mov	r10, r1
	b	.L11740
.L11773:
	mov	r2, #144
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L11771
.L11738:
	mov	fp, #0
	mov	r0, r4
	mov	r2, r7
	mov	r1, r10
	str	fp, [r0], #20
	add	r6, r6, #24
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC971
	mov	r2, r7
	add	r0, r4, #108
	movt	r1, #:upper16:.LC971
	bl	__init_waitqueue_head
	mov	r2, #65024
	strb	r5, [r4, #17]
	movw	r3, #:lower16:gs_rx_push
	movt	r2, 65535
	add	r5, r5, #1
	add	r1, r4, #64
	add	ip, r4, #32
	add	r0, r4, #48
	movt	r3, #:upper16:gs_rx_push
	mov	lr, #8
	cmp	r5, #4
	str	ip, [r4, #32]
	str	r2, [r4, #60]
	add	r2, r4, #76
	strb	fp, [r4, #126]
	mov	fp, #9600
	str	ip, [r4, #36]
	str	r0, [r4, #48]
	str	r0, [r4, #52]
	str	r1, [r4, #64]
	str	r1, [r4, #68]
	str	r3, [r4, #72]
	str	r2, [r4, #76]
	str	r2, [r4, #80]
	str	fp, [r4, #120]
	strh	lr, [r4, #124]	@ movhi
	str	r4, [r6, #-4]
	beq	.L11772
.L11740:
	mov	r0, r6
	mov	r2, r7
	mov	r1, r8
	bl	__mutex_init
	ldr	r0, [r9, #8]
	cmp	r0, #0
	bne	.L11773
	mov	r4, #16
	b	.L11738
.L11772:
	ldr	r8, [sp, #24]
	ldr	r10, [sp, #28]
	ldr	r0, [r8, #3764]
	str	r5, [r8, #3760]
	bl	tty_register_driver
	subs	r7, r0, #0
	bne	.L11774
	ldr	r3, [sp, #20]
	movw	r5, #:lower16:.LC973
	mov	r4, r7
	ldr	r6, .L11778+8
	movt	r5, #:upper16:.LC973
	add	r9, r3, #32
.L11743:
	mov	r2, r9
	mov	r1, r4
	ldr	r0, [r8, #3764]
	bl	tty_register_device
	cmn	r0, #4096
	bhi	.L11775
.L11742:
	add	r4, r4, #1
	cmp	r4, #4
	bne	.L11743
	ldr	r9, .L11778+12
	movw	r6, #:lower16:.LC974
	mov	r4, #0
	movt	r6, #:upper16:.LC974
	add	fp, r9, #108
.L11746:
	mov	r2, r6
	mov	r3, r4
	ldr	r5, [r10, #20]
	mov	r1, #48
	add	r0, sp, #36
	bl	snprintf
	add	r0, sp, #36
	mov	r1, #0
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r8, #3960]
	beq	.L11745
	cmn	r0, #4096
	bhi	.L11745
	movw	r0, #:lower16:.LC975
	mov	r3, r5
	str	r9, [sp]
	mov	r1, #292
	movt	r0, #:upper16:.LC975
	bl	debugfs_create_file
	movw	r0, #:lower16:.LC976
	ldr	r2, [r8, #3960]
	mov	r3, r5
	movt	r0, #:upper16:.LC976
	mov	r1, #420
	str	fp, [sp]
	bl	debugfs_create_file
.L11745:
	add	r4, r4, #1
	add	r10, r10, #24
	cmp	r4, #4
	bne	.L11746
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #1938
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L11776
.L11732:
	ldr	r3, [sp, #12]
	mov	r0, r7
	ldr	r2, [sp, #84]
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L11777
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11753:
	mvn	r7, #11
	mov	r5, #3
.L11737:
	add	r5, r5, r5, lsl #1
	ldr	r4, .L11778+16
	add	r5, r3, r5, lsl #3
.L11747:
	ldr	r0, [r5, #20]
	sub	r5, r5, #24
	bl	kfree
	cmp	r4, r5
	bne	.L11747
.L11748:
	ldr	r0, [r8, #3388]
	cmp	r0, #0
	beq	.L11749
	bl	destroy_workqueue
.L11749:
	ldr	r0, [r8, #3764]
	bl	put_tty_driver
	mov	r3, #0
	str	r3, [r8, #3764]
	b	.L11732
.L11751:
	mvn	r7, #11
	b	.L11732
.L11775:
	mov	r3, r0
	mov	r2, r4
	mov	r1, r6
	mov	r0, r5
	bl	printk
	b	.L11742
.L11776:
	movw	ip, #:lower16:.LC978
	movw	r1, #:lower16:.LC977
	ldr	r2, .L11778+8
	movt	ip, #:upper16:.LC978
	mov	r3, r4
	movt	r1, #:upper16:.LC977
	add	r0, r0, #1920
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L11732
.L11771:
.L11739:
	cmp	r5, #0
	ldr	r8, [sp, #24]
	mvneq	r7, #11
	beq	.L11748
	sub	r5, r5, #1
	mvn	r7, #11
	ldr	r3, [sp, #16]
	b	.L11737
.L11777:
	bl	__stack_chk_fail
.L11774:
	movw	r0, #:lower16:.LC972
	mov	r2, r7
	ldr	r1, .L11778+8
	movt	r0, #:upper16:.LC972
	mov	r5, #3
	bl	printk
	ldr	r3, [sp, #16]
	b	.L11737
.L11779:
	.align	2
.L11778:
	.word	.LANCHOR5-1160
	.word	.LANCHOR1+3768
	.word	.LANCHOR5-1036
	.word	.LANCHOR5-1020
	.word	.LANCHOR1+3744
	.fnend
	.size	acm_function_init, .-acm_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_open, %function
rndis_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r4, #:lower16:.LANCHOR4
	movw	r3, #1962
	strd	r6, [sp, #8]
	movt	r4, #:upper16:.LANCHOR4
	mov	r5, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [r4, r3]
	ldr	r6, [r2, #24]
	tst	r3, #4
	ldr	r1, [r6]
	bne	.L11807
.L11781:
	ldr	r3, [r1, #20]
	ldr	r7, [r5, #164]
	cmp	r3, #4
	uxtb	r6, r7
	bls	.L11782
	ldr	r3, [r1, #16]
	cmp	r3, #5
	beq	.L11808
.L11784:
	cmp	r3, #3
	movne	r8, #97280
	moveq	r8, #4259840
.L11783:
	movw	r3, #1602
	ldrh	r3, [r4, r3]
	tst	r3, #4
	bne	.L11809
.L11785:
	movw	r4, #:lower16:.LANCHOR1
	cmp	r6, #0
	ldr	r10, .L11810
	movt	r4, #:upper16:.LANCHOR1
	mov	r1, #0
	streq	r8, [r4, #3692]
	lsl	r8, r7, #4
	streq	r6, [r4, #3688]
	sub	r5, r8, r7
	lsl	r5, r5, #2
	add	r3, r4, r5
	add	r9, r10, r5
	str	r1, [r3, #3696]
	ldr	r3, [r9, #4]
	cmp	r3, r1
	beq	.L11780
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, r1
	beq	.L11794
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L11780
	add	r3, r6, #20
.L11789:
	sub	r7, r8, r7
	mov	fp, #20
	str	r3, [r6, #8]
	add	r4, r4, r7, lsl #2
	mov	r7, #0
	add	r2, r5, #52
	str	fp, [r6, #12]
	add	r2, r10, r2
	mov	r0, r6
	str	r7, [r6, #16]
	ldr	r1, [r4, #3736]
	bl	__list_add
	ldr	r3, [r6, #8]
	mov	r2, #11
	mov	r1, #7
	movt	r2, 16385
	stm	r3, {r1, fp}
	str	r2, [r3, #8]
	str	r7, [r3, #12]
	str	r7, [r3, #16]
	ldr	r3, [r9, #44]
	ldr	r0, [r9, #48]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	bx	r3	@ indirect register sibling call
.L11782:
	cmp	r3, #2
	movls	r8, #97280
	bls	.L11783
	ldr	r3, [r1, #16]
	b	.L11784
.L11808:
	movw	r3, #1602
	mov	r8, #8519680
	ldrh	r3, [r4, r3]
	tst	r3, #4
	beq	.L11785
.L11809:
	movw	r1, #:lower16:.LC945
	mov	r3, #0
	ldr	r2, .L11810+4
	movt	r1, #:upper16:.LC945
	ldr	r0, .L11810+8
	str	r8, [sp]
	bl	__dynamic_pr_debug
	ldr	r7, [r5, #164]
	b	.L11785
.L11794:
	mov	r3, #36
	mov	r6, #16
	b	.L11789
.L11807:
	movw	r2, #:lower16:.LC82
	add	r1, r1, #32
	ldr	r3, .L11810+12
	movt	r2, #:upper16:.LC82
	ldr	r0, .L11810+16
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L11781
.L11780:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11811:
	.align	2
.L11810:
	.word	.LANCHOR1+3680
	.word	.LANCHOR5-1240
	.word	.LANCHOR4+1584
	.word	.LANCHOR5-804
	.word	.LANCHOR4+1944
	.fnend
	.size	rndis_open, .-rndis_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_open, %function
rndis_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #1986
	strd	r6, [sp, #8]
	movt	r5, #:upper16:.LANCHOR4
	mov	r4, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [r5, r3]
	ldr	r6, [r2, #24]
	tst	r3, #4
	ldr	r1, [r6]
	bne	.L11839
.L11813:
	ldr	r3, [r1, #20]
	ldr	r7, [r4, #144]
	cmp	r3, #4
	uxtb	r6, r7
	bls	.L11814
	ldr	r3, [r1, #16]
	cmp	r3, #5
	beq	.L11840
.L11816:
	cmp	r3, #3
	movne	r8, #97280
	moveq	r8, #4259840
.L11815:
	movw	r3, #1602
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L11841
.L11817:
	movw	r4, #:lower16:.LANCHOR1
	cmp	r6, #0
	ldr	r10, .L11842
	movt	r4, #:upper16:.LANCHOR1
	mov	r1, #0
	streq	r8, [r4, #3692]
	lsl	r8, r7, #4
	streq	r6, [r4, #3688]
	sub	r5, r8, r7
	lsl	r5, r5, #2
	add	r3, r4, r5
	add	r9, r10, r5
	str	r1, [r3, #3696]
	ldr	r3, [r9, #4]
	cmp	r3, r1
	beq	.L11812
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, r1
	beq	.L11826
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L11812
	add	r3, r6, #20
.L11821:
	sub	r7, r8, r7
	mov	fp, #20
	str	r3, [r6, #8]
	add	r4, r4, r7, lsl #2
	mov	r7, #0
	add	r2, r5, #52
	str	fp, [r6, #12]
	add	r2, r10, r2
	mov	r0, r6
	str	r7, [r6, #16]
	ldr	r1, [r4, #3736]
	bl	__list_add
	ldr	r3, [r6, #8]
	mov	r2, #11
	mov	r1, #7
	movt	r2, 16385
	stm	r3, {r1, fp}
	str	r2, [r3, #8]
	str	r7, [r3, #12]
	str	r7, [r3, #16]
	ldr	r3, [r9, #44]
	ldr	r0, [r9, #48]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	bx	r3	@ indirect register sibling call
.L11814:
	cmp	r3, #2
	movls	r8, #97280
	bls	.L11815
	ldr	r3, [r1, #16]
	b	.L11816
.L11840:
	movw	r3, #1602
	mov	r8, #8519680
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L11817
.L11841:
	movw	r1, #:lower16:.LC945
	mov	r3, #0
	ldr	r2, .L11842+4
	movt	r1, #:upper16:.LC945
	ldr	r0, .L11842+8
	str	r8, [sp]
	bl	__dynamic_pr_debug
	ldr	r7, [r4, #144]
	b	.L11817
.L11826:
	mov	r3, #36
	mov	r6, #16
	b	.L11821
.L11839:
	movw	r2, #:lower16:.LC82
	add	r1, r1, #32
	ldr	r3, .L11842+12
	movt	r2, #:upper16:.LC82
	add	r0, r5, #1968
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L11813
.L11812:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11843:
	.align	2
.L11842:
	.word	.LANCHOR1+3680
	.word	.LANCHOR5-1240
	.word	.LANCHOR4+1584
	.word	.LANCHOR5-792
	.fnend
	.size	rndis_qc_open, .-rndis_qc_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_request_ep_out, %function
conn_gadget_request_ep_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #88
	strd	r8, [sp, #16]
	add	r9, r0, #128
	str	r10, [sp, #24]
	add	r10, r0, #136
	str	lr, [sp, #28]
	b	.L11845
.L11848:
	bl	list_del
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	mov	r1, r7
	mov	r2, #32
	beq	.L11847
	ldr	r3, [r5, #192]
	str	r3, [r4, #-32]
	ldr	r0, [r5, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	mov	r0, r6
	blt	.L11851
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r1, [r5, #140]
	mov	r0, r4
	mov	r2, r10
	bl	__list_add
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L11845:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #128]
	mov	r8, r0
	cmp	r9, r4
	mov	r0, r4
	sub	r7, r4, #36
	bne	.L11848
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L11847:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11851:
	movw	r0, #:lower16:.LC979
	mov	r2, r7
	ldr	r1, .L11852
	movt	r0, #:upper16:.LC979
	bl	printk
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r1, [r5, #132]
	mov	r0, r4
	mov	r2, r9
	bl	__list_add
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L11847
.L11853:
	.align	2
.L11852:
	.word	.LANCHOR5-776
	.fnend
	.size	conn_gadget_request_ep_out, .-conn_gadget_request_ep_out
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_open, %function
conn_gadget_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r0, #:lower16:.LC980
	movw	r4, #:lower16:.LANCHOR1
	movt	r0, #:upper16:.LC980
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	mov	r5, r1
	str	lr, [sp, #12]
	bl	printk
	ldr	r3, [r4, #2484]
	cmp	r3, #0
	beq	.L11862
	ldr	r0, [r3, #216]
	cmp	r0, #0
	bne	.L11863
	add	r2, r3, #116
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	ip, r1, [r2]
	teq	ip, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #1
	bne	.L11858
	ldr	r3, [r4, #2484]
	str	r3, [r5, #124]
	ldr	r2, [r3, #100]
	str	r0, [r3, #104]
	cmp	r2, #0
	bne	.L11864
.L11860:
	mov	r0, #0
	str	r2, [r3, #212]
.L11854:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11862:
	movw	r0, #:lower16:.LC425
	ldr	r1, .L11865
	movt	r0, #:upper16:.LC425
	bl	printk
	mvn	r0, #18
	b	.L11854
.L11864:
	movw	r0, #:lower16:.LC426
	ldr	r1, .L11865
	movt	r0, #:upper16:.LC426
	bl	printk
	ldr	r0, [r4, #2484]
	bl	conn_gadget_request_ep_out
	ldr	r3, [r4, #2484]
	ldr	r2, [r3, #100]
	b	.L11860
.L11858:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC982
	ldr	r1, .L11865
	movt	r0, #:upper16:.LC982
	bl	printk
	mvn	r0, #15
	b	.L11854
.L11863:
	movw	r0, #:lower16:.LC981
	ldr	r1, .L11865
	movt	r0, #:upper16:.LC981
	bl	printk
	mvn	r0, #10
	b	.L11854
.L11866:
	.align	2
.L11865:
	.word	.LANCHOR5-748
	.fnend
	.size	conn_gadget_open, .-conn_gadget_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_read, %function
conn_gadget_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r3, [r3, #2484]
	.pad #28
	sub	sp, sp, #28
	ldr	r4, [r0, #124]
	str	r2, [sp]
	cmp	r3, #0
	beq	.L11895
	ldr	r3, [r4, #192]
	mov	r6, r2
	cmp	r3, r2
	bls	.L11896
	add	r5, r4, #108
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L11892
	mov	r3, sp
	mov	r8, r1
	bic	r7, r3, #8128
	ldrd	r2, [r4, #100]
	bic	r7, r7, #63
.L11871:
	cmp	r2, #0
	bne	.L11876
.L11890:
	cmp	r3, #0
	beq	.L11897
.L11878:
	mvn	r3, #4
	movw	r0, #:lower16:.LC986
	ldr	r1, .L11900
	movt	r0, #:upper16:.LC986
	str	r3, [sp]
	bl	printk
.L11880:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [sp]
.L11867:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L11876:
	cmp	r3, #0
	bne	.L11878
	ldr	r3, [r4, #168]
	ldr	r2, [r4, #172]
	subs	r3, r3, r2
	bne	.L11881
.L11883:
	mov	r3, #0
	movw	r0, #:lower16:.LC987
	ldr	r1, .L11900
	movt	r0, #:upper16:.LC987
	str	r3, [sp]
	bl	printk
.L11882:
	mov	r0, r4
	bl	conn_gadget_request_ep_out
	b	.L11880
.L11881:
	cmp	r6, r3
	mov	r1, r8
	movcs	r6, r3
	add	r0, r4, #168
	mov	r2, r6
	mov	r3, sp
	bl	__kfifo_to_user
	cmp	r6, #0
	mov	r2, r0
	beq	.L11883
	cmp	r0, #0
	blt	.L11898
	ldr	r2, [r4, #168]
	ldr	r3, [r4, #196]
	ldr	r1, [r4, #172]
	add	r3, r3, r3, lsr #31
	sub	r2, r2, r1
	cmp	r2, r3, asr #1
	bhi	.L11880
	b	.L11882
.L11898:
	mvn	r3, #13
	movw	r0, #:lower16:.LC988
	ldr	r1, .L11900
	movt	r0, #:upper16:.LC988
	str	r3, [sp]
	bl	printk
	b	.L11880
.L11892:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC984
	ldr	r1, .L11900
	movt	r0, #:upper16:.LC984
	bl	printk
	mvn	r0, #15
	b	.L11867
.L11896:
	movw	r0, #:lower16:.LC983
	ldr	r1, .L11900
	movt	r0, #:upper16:.LC983
	bl	printk
	mvn	r0, #21
	b	.L11867
.L11895:
	movw	r0, #:lower16:.LC425
	ldr	r1, .L11900
	movt	r0, #:upper16:.LC425
	bl	printk
	mvn	r0, #18
	b	.L11867
.L11897:
	movw	r0, #:lower16:.LC985
	ldr	r1, .L11900
	movt	r0, #:upper16:.LC985
	bl	printk
	ldrd	r2, [r4, #100]
	cmp	r2, #0
	bne	.L11871
	cmp	r3, #0
	bne	.L11890
	ldr	r0, [r7, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #16
	movt	r2, #:upper16:autoremove_wake_function
	add	r9, r4, #144
	str	r3, [sp, #4]
	str	r1, [sp, #16]
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #20]
	b	.L11875
.L11899:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L11873
	ldr	r3, [r7, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L11874
	bl	schedule
.L11875:
	mov	r2, #1
	add	r1, sp, #4
	mov	r0, r9
	bl	prepare_to_wait
	ldr	r3, [r4, #100]
	cmp	r3, #0
	beq	.L11899
.L11873:
	add	r1, sp, #4
	mov	r0, r9
	bl	finish_wait
	ldrd	r2, [r4, #100]
	b	.L11871
.L11874:
	mov	r0, r9
	add	r1, sp, #4
	bl	finish_wait
	mov	r2, #65024
	movw	r0, #:lower16:.LC989
	ldr	r1, .L11900
	movt	r2, 65535
	movt	r0, #:upper16:.LC989
	bl	printk
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #65024
	movt	r0, 65535
	b	.L11867
.L11901:
	.align	2
.L11900:
	.word	.LANCHOR5-728
	.fnend
	.size	conn_gadget_read, .-conn_gadget_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_send_break, %function
acm_send_break:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	cmp	r1, #0
	strd	r6, [sp, #8]
	movw	r6, #:lower16:__stack_chk_guard
	add	r7, r0, #148
	strd	r8, [sp, #16]
	movt	r6, #:upper16:__stack_chk_guard
	str	r10, [sp, #24]
	ldr	r2, [r6]
	str	lr, [sp, #28]
	ldrh	r3, [r0, #170]
	.pad #24
	sub	sp, sp, #24
	mov	r0, r7
	str	r2, [sp, #20]
	ldr	r2, [r4, #20]
	bic	r3, r3, #4
	uxth	r3, r3
	orrne	r3, r3, #4
	strh	r3, [r4, #170]	@ movhi
	ldr	r5, [r2, #24]
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	ldr	r0, [r4, #156]
	cmp	r0, #0
	moveq	r3, #1
	moveq	r5, r0
	strbeq	r3, [r4, #147]
	bne	.L11916
.L11907:
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [sp, #20]
	mov	r0, r5
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L11917
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11916:
	ldr	r0, .L11919
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L11918
.L11905:
	movw	r0, #:lower16:.LC653
	ldrh	r2, [r4, #170]
	mov	r5, #32
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC653
	bl	printk
	add	r0, sp, #10
	mov	r1, #10
	ldr	r10, [r4, #152]
	bl	__memzero
	ldr	r9, [r4, #156]
	mov	r2, #0
	mov	r0, #10
	mvn	r1, #94
	mov	ip, #2
	strb	r2, [r4, #147]
	str	r2, [r4, #156]
	ldr	r3, [r9]
	str	r0, [r9, #4]
	mov	r0, r7
	strb	r1, [r3]
	strb	r5, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	ldrb	r1, [r4, #144]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	r2, [r3, #7]
	ldrh	ip, [r4, #170]	@ unaligned
	ldr	r1, [sp, #14]	@ unaligned
	strh	ip, [sp, #10]	@ movhi
	ldr	ip, [sp, #10]	@ unaligned
	str	ip, [r3, #8]	@ unaligned
	str	r1, [r3, #12]	@ unaligned
	ldrh	r1, [sp, #18]	@ unaligned
	strh	r1, [r3, #16]	@ unaligned
	ldrh	r2, [r4, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock
	ldr	r3, [r10, #8]
	mov	r2, r5
	mov	r1, r9
	mov	r0, r10
	ldr	r3, [r3, #16]
	blx	r3
	mov	r5, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	r5, #0
	bge	.L11907
	ldr	r0, [r4, #20]
	movw	r1, #:lower16:.LC654
	mov	r3, r5
	movt	r1, #:upper16:.LC654
	ldrb	r2, [r4, #146]	@ zero_extendqisi2
	ldr	r0, [r0, #24]
	ldr	r0, [r0]
	add	r0, r0, #32
	bl	dev_err
	str	r9, [r4, #156]
	b	.L11907
.L11917:
	bl	__stack_chk_fail
.L11918:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC652
	sub	r0, r0, #24
	ldrh	ip, [r4, #170]
	movt	r2, #:upper16:.LC652
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	add	r1, r1, #32
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L11905
.L11920:
	.align	2
.L11919:
	.word	.LANCHOR4-1776
	.fnend
	.size	acm_send_break, .-acm_send_break
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_connect, %function
acm_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r5, #:lower16:__stack_chk_guard
	mov	r4, r0
	strd	r6, [sp, #8]
	movt	r5, #:upper16:__stack_chk_guard
	add	r6, r0, #148
	strd	r8, [sp, #16]
	ldr	r2, [r5]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r0, #170]
	.pad #24
	sub	sp, sp, #24
	ldr	r1, [r0, #20]
	mov	r0, r6
	str	r2, [sp, #20]
	orr	r3, r3, #3
	strh	r3, [r4, #170]	@ movhi
	ldr	r8, [r1, #24]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #156]
	mov	r7, r0
	cmp	r3, #0
	moveq	r3, #1
	strbeq	r3, [r4, #147]
	bne	.L11931
.L11925:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [sp, #20]
	ldr	r3, [r5]
	cmp	r2, r3
	bne	.L11932
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11931:
	ldr	r0, .L11934
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L11933
.L11923:
	movw	r0, #:lower16:.LC653
	ldrh	r2, [r4, #170]
	mov	r9, #32
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC653
	bl	printk
	add	r0, sp, #10
	mov	r1, #10
	ldr	r10, [r4, #152]
	bl	__memzero
	ldr	r8, [r4, #156]
	mov	r2, #0
	mov	r0, #10
	mvn	r1, #94
	mov	ip, #2
	strb	r2, [r4, #147]
	str	r2, [r4, #156]
	ldr	r3, [r8]
	str	r0, [r8, #4]
	mov	r0, r6
	strb	r1, [r3]
	strb	r9, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	ldrb	r1, [r4, #144]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	r2, [r3, #7]
	ldrh	ip, [r4, #170]	@ unaligned
	ldr	r1, [sp, #14]	@ unaligned
	strh	ip, [sp, #10]	@ movhi
	ldr	ip, [sp, #10]	@ unaligned
	str	ip, [r3, #8]	@ unaligned
	str	r1, [r3, #12]	@ unaligned
	ldrh	r1, [sp, #18]	@ unaligned
	strh	r1, [r3, #16]	@ unaligned
	ldrh	r2, [r4, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock
	ldr	r3, [r10, #8]
	mov	r2, r9
	mov	r1, r8
	mov	r0, r10
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r9, #0
	bge	.L11925
	ldr	r0, [r4, #20]
	movw	r1, #:lower16:.LC654
	mov	r3, r9
	movt	r1, #:upper16:.LC654
	ldrb	r2, [r4, #146]	@ zero_extendqisi2
	ldr	r0, [r0, #24]
	ldr	r0, [r0]
	add	r0, r0, #32
	bl	dev_err
	str	r8, [r4, #156]
	b	.L11925
.L11932:
	bl	__stack_chk_fail
.L11933:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC652
	sub	r0, r0, #24
	ldrh	ip, [r4, #170]
	movt	r2, #:upper16:.LC652
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	add	r1, r1, #32
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L11923
.L11935:
	.align	2
.L11934:
	.word	.LANCHOR4-1776
	.fnend
	.size	acm_connect, .-acm_connect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_disconnect, %function
acm_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r5, #:lower16:__stack_chk_guard
	mov	r4, r0
	strd	r6, [sp, #8]
	movt	r5, #:upper16:__stack_chk_guard
	add	r6, r0, #148
	strd	r8, [sp, #16]
	ldr	r2, [r5]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r0, #170]
	.pad #24
	sub	sp, sp, #24
	ldr	r1, [r0, #20]
	mov	r0, r6
	str	r2, [sp, #20]
	bic	r3, r3, #3
	strh	r3, [r4, #170]	@ movhi
	ldr	r8, [r1, #24]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #156]
	mov	r7, r0
	cmp	r3, #0
	moveq	r3, #1
	strbeq	r3, [r4, #147]
	bne	.L11946
.L11940:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [sp, #20]
	ldr	r3, [r5]
	cmp	r2, r3
	bne	.L11947
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11946:
	ldr	r0, .L11949
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L11948
.L11938:
	movw	r0, #:lower16:.LC653
	ldrh	r2, [r4, #170]
	mov	r9, #32
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC653
	bl	printk
	add	r0, sp, #10
	mov	r1, #10
	ldr	r10, [r4, #152]
	bl	__memzero
	ldr	r8, [r4, #156]
	mov	r2, #0
	mov	r0, #10
	mvn	r1, #94
	mov	ip, #2
	strb	r2, [r4, #147]
	str	r2, [r4, #156]
	ldr	r3, [r8]
	str	r0, [r8, #4]
	mov	r0, r6
	strb	r1, [r3]
	strb	r9, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	ldrb	r1, [r4, #144]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	r2, [r3, #7]
	ldrh	ip, [r4, #170]	@ unaligned
	ldr	r1, [sp, #14]	@ unaligned
	strh	ip, [sp, #10]	@ movhi
	ldr	ip, [sp, #10]	@ unaligned
	str	ip, [r3, #8]	@ unaligned
	str	r1, [r3, #12]	@ unaligned
	ldrh	r1, [sp, #18]	@ unaligned
	strh	r1, [r3, #16]	@ unaligned
	ldrh	r2, [r4, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock
	ldr	r3, [r10, #8]
	mov	r2, r9
	mov	r1, r8
	mov	r0, r10
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r9, #0
	bge	.L11940
	ldr	r0, [r4, #20]
	movw	r1, #:lower16:.LC654
	mov	r3, r9
	movt	r1, #:upper16:.LC654
	ldrb	r2, [r4, #146]	@ zero_extendqisi2
	ldr	r0, [r0, #24]
	ldr	r0, [r0]
	add	r0, r0, #32
	bl	dev_err
	str	r8, [r4, #156]
	b	.L11940
.L11947:
	bl	__stack_chk_fail
.L11948:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC652
	sub	r0, r0, #24
	ldrh	ip, [r4, #170]
	movt	r2, #:upper16:.LC652
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	add	r1, r1, #32
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L11938
.L11950:
	.align	2
.L11949:
	.word	.LANCHOR4-1776
	.fnend
	.size	acm_disconnect, .-acm_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_write, %function
ffs_ep0_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #44
	sub	sp, sp, #44
	add	r6, r4, #96
	.syntax divided
@ 193 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
.L11952:
	.syntax divided
@ 170 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	lr, [r6]
	mov	ip, #0
	teq	lr, #2
	strexeq ip, r3, [r6]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	ip, #0
	bne	.L11952
	.syntax divided
@ 195 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	lr, #2
	beq	.L12026
	ldr	r3, [r0, #32]
	add	r10, r4, #4
	mov	fp, r2
	mov	r7, r1
	mov	r0, r10
	tst	r3, #2048
	bne	.L12090
	bl	mutex_lock_interruptible
	subs	r5, r0, #0
	blt	.L11951
.L11958:
	ldr	r3, [r4, #92]
	cmp	r3, #1
	bls	.L11956
	cmp	r3, #2
	bne	.L12091
	add	r9, r4, #116
	mov	r0, r9
	bl	_raw_spin_lock_irq
	.syntax divided
@ 193 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
.L12011:
	.syntax divided
@ 170 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r2, [r6]
	mov	r8, #0
	teq	r2, #2
	strexeq r8, r3, [r6]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r8, #0
	bne	.L12011
	.syntax divided
@ 195 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L12035
	cmp	r2, #2
	moveq	r7, r8
	mvneq	r5, #42
	beq	.L12013
	ldrsb	r3, [r4, #108]
	cmp	r3, #0
	blt	.L12015
	mov	r0, r9
	bl	_raw_spin_unlock_irq
	ldrh	r3, [r4, #106]
	cmp	r3, #0
	beq	.L12016
	ldr	r3, [r4]
	mvn	r5, #50
	mov	r1, #1
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	str	r8, [r4, #96]
.L11955:
	mov	r0, r10
	bl	mutex_unlock
.L11951:
	mov	r0, r5
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12090:
	bl	mutex_trylock
	cmp	r0, #0
	bne	.L11958
	mvn	r5, #10
	b	.L11951
.L11956:
	cmp	fp, #15
	bls	.L12029
	mov	r0, r7
	mov	r1, fp
	bl	ffs_prepare_buffer
	cmn	r0, #4096
	mov	r6, r0
	movhi	r5, r0
	bhi	.L11955
	ldr	r3, [r4, #92]
	cmp	r3, #0
	bne	.L11960
	movw	r0, #:lower16:.LC990
	movt	r0, #:upper16:.LC990
	bl	printk
	ldr	r3, [r6]	@ unaligned
	cmp	r3, #1
	bne	.L11975
	ldr	r3, [r6, #4]	@ unaligned
	cmp	fp, r3
	bne	.L11975
	ldr	r9, [r6, #8]	@ unaligned
	add	r8, r6, #16
	sub	r7, fp, #16
	ldr	r3, [r6, #12]	@ unaligned
	cmp	r9, #0
	str	r3, [sp, #12]
	beq	.L12030
	movw	r3, #:lower16:__ffs_data_do_entity
	mov	r2, r7
	str	r4, [sp]
	movt	r3, #:upper16:__ffs_data_do_entity
	mov	r1, r8
	mov	r0, r9
	bl	ffs_do_descs.constprop.142
	subs	r5, r0, #0
	blt	.L11964
	ldr	r0, [sp, #12]
	add	r8, r8, r5
	sub	r7, r7, r5
.L11963:
	cmp	r0, #0
	beq	.L11965
	movw	r3, #:lower16:__ffs_data_do_entity
	mov	r2, r7
	str	r4, [sp]
	movt	r3, #:upper16:__ffs_data_do_entity
	mov	r1, r8
	bl	ffs_do_descs.constprop.142
	subs	r2, r0, #0
	str	r2, [sp, #16]
	blt	.L12031
	add	r3, r2, #8
	cmp	r7, r3
	bcc	.L11967
.L11966:
	ldr	r1, [r8, r2]	@ unaligned
	movw	r3, #56924
	movt	r3, 85
	cmp	r1, r3
	beq	.L12092
.L11975:
	mov	r0, r6
	mvn	r5, #21
	bl	kfree
	mov	r0, r10
	bl	mutex_unlock
	b	.L11951
.L12091:
	mov	r0, r10
	mvn	r5, #76
	bl	mutex_unlock
	b	.L11951
.L11960:
	movw	r0, #:lower16:.LC991
	movt	r0, #:upper16:.LC991
	bl	printk
	ldr	r3, [r6]	@ unaligned
	cmp	r3, #2
	bne	.L11975
	ldr	r3, [r6, #4]	@ unaligned
	cmp	fp, r3
	bne	.L11975
	ldr	r3, [r6, #12]	@ unaligned
	ldr	r9, [r6, #8]	@ unaligned
	str	r3, [sp, #12]
	clz	r3, r3
	clz	r2, r9
	lsr	r3, r3, #5
	lsr	r2, r2, #5
	cmp	r2, r3
	bne	.L11975
	ldrh	r3, [r4, #176]
	cmp	r9, r3
	str	r3, [sp, #16]
	bcc	.L11975
	cmp	r3, #0
	beq	.L12093
	ldr	r0, [sp, #12]
	mov	r1, #208
	mla	r2, r3, r0, r0
	add	r3, r0, #1
	add	r8, r3, r0, lsl #1
	lsl	r5, r3, #2
	add	r2, r2, r0
	lsl	r8, r8, #2
	add	r3, r3, r2, lsl #1
	lsl	r0, r3, #2
	bl	__kmalloc
	subs	r3, r0, #0
	str	r3, [sp, #20]
	beq	.L12094
	add	r0, r3, r5
	mov	r1, r3
	ldr	r3, [sp, #12]
	mov	r2, r0
.L11979:
	subs	r3, r3, #1
	str	r2, [r1], #4
	add	r2, r2, #8
	bne	.L11979
	str	r3, [r0, #-4]
	ldr	r3, [sp, #20]
	sub	r5, fp, #16
	cmp	r5, #2
	add	r7, r6, #16
	add	r8, r3, r8
	bls	.L11980
	add	r3, r0, #8
	str	r4, [sp, #24]
	mov	r4, r3
	str	fp, [sp, #28]
.L11981:
	ldrb	r0, [r7, #1]	@ zero_extendqisi2
	sub	r5, r5, #2
	ldrb	r1, [r7], #2	@ zero_extendqisi2
	str	r8, [r4, #-4]
	ldr	fp, [sp, #16]
	orr	r1, r1, r0, lsl #8
	strh	r1, [r4, #-8]	@ movhi
	b	.L11983
.L12096:
	cmp	fp, #0
	beq	.L11982
	str	r7, [r8, #4]
	sub	fp, fp, #1
	add	r8, r8, #8
.L11982:
	subs	r9, r9, #1
	add	r3, r0, #1
	mvn	r0, r0
	add	r7, r7, r3
	add	r5, r5, r0
	beq	.L12095
.L11983:
	mov	r1, r5
	mov	r0, r7
	bl	strnlen
	cmp	r5, r0
	bne	.L12096
.L11980:
	ldr	r0, [sp, #20]
	bl	kfree
	b	.L11975
.L12035:
	mov	r7, r2
	mvn	r5, #2
.L12013:
	mov	r0, r9
	bl	_raw_spin_unlock_irq
.L12020:
	mov	r0, r7
	bl	kfree
	mov	r0, r10
	bl	mutex_unlock
	b	.L11951
.L12092:
	add	r1, r8, r2
	ldr	r3, [sp, #12]
	ldr	r1, [r1, #4]	@ unaligned
	orr	r3, r3, r9
	orrs	r3, r3, r1
	str	r1, [sp, #20]
	beq	.L11975
	cmp	r1, #0
	sub	r7, r7, #8
	mov	r0, r1
	sub	r7, r7, r2
	beq	.L12032
	add	r2, r2, #8
	movw	r3, #:lower16:__ffs_data_do_entity
	str	r4, [sp]
	add	r1, r8, r2
	movt	r3, #:upper16:__ffs_data_do_entity
	mov	r2, r7
	bl	ffs_do_descs.constprop.142
	subs	r3, r0, #0
	blt	.L12033
.L11972:
	cmp	r3, r7
	bne	.L11975
	ldr	r2, [sp, #16]
	str	r6, [r4, #144]
	ldr	r1, [sp, #20]
	str	r3, [r4, #160]
	str	r9, [r4, #164]
	add	r5, r5, r2
	add	r2, r5, r3
	ldr	r3, [sp, #12]
	cmp	r1, #0
	str	r5, [r4, #152]
	addne	r5, r5, #24
	str	r2, [r4, #148]
	str	r3, [r4, #168]
	mov	r3, #1
	strne	r5, [r4, #156]
	mov	r5, fp
	str	r3, [r4, #92]
	str	r1, [r4, #172]
	b	.L11955
.L12094:
	mov	r0, r6
	mvn	r5, #11
	bl	kfree
	b	.L11955
.L12015:
	ldrh	r5, [r4, #114]
	mov	r0, r9
	cmp	r5, fp
	movcs	r5, fp
	bl	_raw_spin_unlock_irq
	mov	r1, r5
	mov	r0, r7
	bl	ffs_prepare_buffer
	cmn	r0, #4096
	mov	r7, r0
	movhi	r5, r0
	bhi	.L11955
	mov	r0, r9
	bl	_raw_spin_lock_irq
	.syntax divided
@ 193 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
.L12018:
	.syntax divided
@ 170 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r2, [r6]
	mov	r3, #0
	teq	r2, #2
	strexeq r3, r8, [r6]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L12018
	.syntax divided
@ 195 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #2
	mvneq	r5, #42
	beq	.L12013
	ldr	r6, [r4, #28]
	mov	r0, r9
	ldrh	r3, [r4, #114]
	ldrb	r2, [r6, #26]	@ zero_extendqisi2
	cmp	r5, r3
	movcs	r3, #0
	movcc	r3, #1
	bfi	r2, r3, #1, #1
	strb	r2, [r6, #26]
	bl	_raw_spin_unlock_irq
	cmp	r7, #0
	str	r7, [r6]
	str	r5, [r6, #4]
	beq	.L12097
.L12021:
	ldr	r3, [r4]
	mov	r0, #0
	mov	r2, #32
	mov	r1, r6
	str	r0, [r4, #32]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	blt	.L12020
	add	r0, r4, #32
	bl	wait_for_completion_interruptible
	cmp	r0, #0
	bne	.L12098
	ldr	r5, [r4, #48]
	str	r0, [r4, #96]
	b	.L12020
.L12029:
	mvn	r5, #21
	b	.L11955
.L12095:
	ldr	r3, [sp, #12]
	strb	r9, [r8]
	add	r8, r8, #8
	str	r9, [r8, #-4]
	subs	r3, r3, #1
	str	r3, [sp, #12]
	beq	.L12099
	cmp	r5, #2
	add	r4, r4, #8
	bhi	.L11981
	b	.L11980
.L12093:
	mov	r0, r6
	bl	kfree
.L11977:
	ldrh	r5, [r4, #180]
	movw	r1, #32976
	rsb	r0, r5, r5, lsl #3
	lsl	r0, r0, #3
	bl	__kmalloc
	subs	r7, r0, #0
	beq	.L11985
	cmp	r5, #0
	beq	.L12024
	movw	r3, #:lower16:.LC992
	movw	r2, #:lower16:.LC993
	str	fp, [sp, #28]
	movt	r3, #:upper16:.LC992
	add	r1, r5, #1
	movt	r2, #:upper16:.LC993
	mov	r6, r7
	str	r3, [sp, #16]
	mov	r5, #1
	add	r3, r7, #48
	str	r3, [sp, #12]
	str	r2, [sp, #20]
	str	r1, [sp, #24]
.L12023:
	ldr	r2, .L12103
	mov	r0, r6
	str	r4, [r6, #36]
	ldr	r1, [sp, #16]
	bl	__mutex_init
	ldr	r1, [sp, #20]
	add	r0, r6, #20
	ldr	r2, .L12103
	bl	__init_waitqueue_head
	ldr	r8, [sp, #12]
	movw	r1, #:lower16:.LC994
	mov	r2, r5
	movt	r1, #:upper16:.LC994
	mov	r0, r8
	bl	sprintf
	ldr	fp, [r4, #192]
	mov	r1, r8
	ldr	r0, [fp, #60]
	ldr	r8, [fp, #616]
	bl	d_alloc_name
	subs	r9, r0, #0
	beq	.L11987
	mov	r0, fp
	bl	new_inode
	subs	fp, r0, #0
	beq	.L11988
	add	r0, sp, #32
	add	r5, r5, #1
	bl	current_kernel_time
	bl	get_next_ino
	str	r0, [fp, #40]
	ldrh	ip, [r8, #196]
	mov	r1, fp
	ldrd	r2, [sp, #32]
	mov	r0, r9
	ldr	lr, .L12103+4
	strh	ip, [fp]	@ movhi
	ldr	ip, [r8, #200]
	str	ip, [fp, #4]
	ldr	ip, [r8, #204]
	str	ip, [fp, #8]
	strd	r2, [fp, #52]
	strd	r2, [fp, #60]
	strd	r2, [fp, #68]
	str	lr, [fp, #200]
	str	r6, [fp, #328]
	bl	d_instantiate
	mov	r0, r9
	bl	d_rehash
	ldr	r3, [sp, #24]
	cmn	r6, #44
	add	r6, r6, #56
	strne	r9, [r6, #-12]
	cmp	r3, r5
	bne	.L12023
	ldr	fp, [sp, #28]
.L12024:
	mov	r3, #2
	mov	r0, r10
	str	r3, [r4, #92]
	str	r7, [r4, #208]
	bl	mutex_unlock
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r8, [r3, #2192]
	cmp	r8, #0
	beq	.L12100
	add	r6, r8, #24
	ldr	r5, [r3, #2176]
	mov	r0, r6
	bl	mutex_lock
	ldr	r3, [r4, #92]
	cmp	r3, #2
	beq	.L11999
.L12001:
	movw	r0, #:lower16:.LC33
	movw	r1, #1443
	movt	r0, #:upper16:.LC33
	mvn	r5, #76
	bl	warn_slowpath_null
	mov	r0, r6
	bl	mutex_unlock
.L12000:
	mov	r3, #3
	str	r3, [r4, #92]
	b	.L11951
.L11988:
	mov	r0, r9
	bl	dput
.L11987:
	subs	r5, r5, #1
	beq	.L11995
	ldr	r3, [r7]
	cmp	r3, #1
	bne	.L11991
	ldr	r2, [r7, #24]
	add	r3, r7, #24
	cmp	r2, r3
	bne	.L11991
	mov	r6, r7
	mov	r8, #0
.L11992:
	ldr	r0, [r6, #44]
	cmp	r0, #0
	beq	.L11993
	bl	d_delete
	ldr	r0, [r6, #44]
	bl	dput
	str	r8, [r6, #44]
.L11993:
	subs	r5, r5, #1
	add	r6, r6, #56
	beq	.L11995
	ldr	r3, [r6]
	cmp	r3, #1
	bne	.L11991
	ldr	r2, [r6, #24]
	add	r3, r6, #24
	cmp	r2, r3
	beq	.L11992
.L11991:
	.syntax divided
@ 1521 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1522, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L11995:
	mov	r0, r7
	bl	kfree
.L11985:
	mov	r3, #3
	mvn	r5, #11
	str	r3, [r4, #92]
	b	.L11955
.L12026:
	mvn	r5, #42
	b	.L11951
.L11965:
	cmp	r7, #7
	bhi	.L12101
	cmp	r9, #0
	beq	.L11975
	ldr	r3, [sp, #12]
	mov	r2, r3
	str	r3, [sp, #16]
.L11967:
	mov	r3, #0
	sub	r7, r7, r2
	str	r3, [sp, #20]
	b	.L11972
.L12033:
	mov	r5, r3
.L11964:
	mov	r0, r6
	bl	kfree
	b	.L11955
.L12100:
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #2010
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r2]
	tst	r3, #4
	mvneq	r5, #18
	beq	.L12000
	movw	r1, #:lower16:.LC995
	ldr	r2, .L12103+8
	mvn	r5, #18
	movt	r1, #:upper16:.LC995
	ldr	r0, .L12103+12
	bl	__dynamic_pr_debug
	b	.L12000
.L12016:
	ldr	r0, .L12103+16
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	mvneq	r5, #2
	beq	.L11955
	movw	r1, #:lower16:.LC705
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC705
	mvn	r5, #2
	bl	__dynamic_pr_debug
	b	.L11955
.L12030:
	mov	r5, r9
	mov	r0, r3
	b	.L11963
.L12031:
	mov	r5, r2
	b	.L11964
.L12097:
	movw	r3, #47806
	movt	r3, 57005
	str	r3, [r6]
	b	.L12021
.L11999:
	add	r7, r4, #128
	mov	r0, #1
	ldr	r9, [r8, #8]
	mov	r1, r7
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L12001
	ldrh	r3, [r4, #176]
	ldrb	r10, [r9, #48]	@ zero_extendqisi2
	cmp	r3, #254
	bhi	.L12003
	add	r3, r3, r10
	cmp	r3, #254
	bhi	.L12003
	ldr	r2, [r9]
	strb	r3, [r9, #48]
	mov	r1, #208
	ldr	r0, [r2, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r4, #28]
	beq	.L12004
	movw	r3, #:lower16:ffs_ep0_complete
	movt	r3, #:upper16:ffs_ep0_complete
	str	r3, [r0, #28]
	ldr	r3, [r4, #28]
	str	r4, [r3, #32]
	ldr	r0, [r4, #188]
	cmp	r0, #0
	beq	.L12005
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L12005
	add	ip, r10, #1
.L12008:
	ldr	r3, [r3, #4]
	ldr	r2, [r3, #4]
	cmp	r2, #0
	beq	.L12006
	add	r3, r3, #8
	mov	r2, ip
.L12007:
	strb	r2, [r3, #-8]
	add	r3, r3, #8
	ldr	r1, [r3, #-4]
	add	r2, r2, #1
	cmp	r1, #0
	bne	.L12007
.L12006:
	ldr	r3, [r0, #4]!
	cmp	r3, #0
	bne	.L12008
.L12005:
	ldr	r2, [r9]
	mov	r3, r4
	str	r2, [r3], #84
	.syntax divided
@ 45 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldrb	r3, [r5, #1]	@ zero_extendqisi2
	mov	r2, #1
	strb	r2, [r5]
	stmib	r5, {r4, r8}
	cmp	r3, #0
	bne	.L12102
.L12010:
	mov	r0, r6
	mov	r5, fp
	bl	mutex_unlock
	mov	r1, r7
	mov	r0, #0
	bl	_set_bit
	b	.L11951
.L12102:
	mov	r0, r8
	bl	android_enable
	b	.L12010
.L12032:
	mov	r3, r1
	b	.L11972
.L12098:
	ldr	r3, [r4]
	mov	r1, r6
	mvn	r5, #3
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L12020
.L12099:
	cmp	r5, #0
	ldr	r4, [sp, #24]
	ldr	fp, [sp, #28]
	bne	.L11980
	ldr	r3, [sp, #20]
	str	r6, [r4, #184]
	str	r3, [r4, #188]
	b	.L11977
.L12004:
	mov	r0, r6
	mvn	r5, #11
	bl	mutex_unlock
	b	.L12000
.L12003:
	mov	r0, r6
	mvn	r5, #18
	bl	mutex_unlock
	b	.L12000
.L12101:
	ldr	r3, [sp, #12]
	mov	r2, r3
	str	r3, [sp, #16]
	b	.L11966
.L12104:
	.align	2
.L12103:
	.word	.LANCHOR1+4004
	.word	.LANCHOR5-708
	.word	.LANCHOR5-600
	.word	.LANCHOR4+1992
	.word	.LANCHOR4-1104
	.fnend
	.size	ffs_ep0_write, .-ffs_ep0_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_data_clear, %function
ffs_data_clear:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	mov	r0, #0
	add	r4, r5, #128
	strd	r6, [sp, #8]
	mov	r1, r4
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_test_and_clear_bit
	cmp	r0, #0
	bne	.L12137
.L12107:
	ldr	r7, [r5]
	cmp	r7, #0
	bne	.L12138
	ldr	r8, [r5, #208]
	cmp	r8, #0
	beq	.L12116
	ldrh	r6, [r5, #180]
	cmp	r6, #0
	beq	.L12122
	ldr	r3, [r8]
	cmp	r3, #1
	bne	.L12118
	ldr	r2, [r8, #24]
	add	r3, r8, #24
	cmp	r2, r3
	bne	.L12118
	mov	r4, r8
.L12119:
	ldr	r0, [r4, #44]
	cmp	r0, #0
	beq	.L12120
	bl	d_delete
	ldr	r0, [r4, #44]
	bl	dput
	str	r7, [r4, #44]
.L12120:
	subs	r6, r6, #1
	add	r4, r4, #56
	beq	.L12122
	ldr	r3, [r4]
	cmp	r3, #1
	bne	.L12118
	ldr	r2, [r4, #24]
	add	r3, r4, #24
	cmp	r2, r3
	beq	.L12119
.L12118:
	.syntax divided
@ 1521 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1522, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L12122:
	mov	r0, r8
	bl	kfree
.L12116:
	ldr	r0, [r5, #144]
	bl	kfree
	ldr	r0, [r5, #184]
	bl	kfree
	ldrd	r6, [sp, #8]
	ldr	r0, [r5, #188]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	kfree
.L12137:
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r8, [r3, #2176]
	ldr	r7, [r3, #2192]
	cmp	r7, #0
	beq	.L12139
.L12108:
	add	r0, r7, #24
	bl	mutex_lock
	ldrb	r3, [r8, #1]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L12109
	mov	r0, r7
	bl	android_disable
.L12109:
	mov	r6, #0
	strb	r6, [r8]
	str	r6, [r8, #4]
	str	r6, [r8, #8]
	ldr	r3, [r5]
	cmp	r3, r6
	beq	.L12140
	ldr	r0, [r3, #4]
	ldr	r1, [r5, #28]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r3, r5
	str	r6, [r5, #28]
	str	r6, [r3], #84
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L12141
.L12125:
	mov	r1, r4
	mov	r0, #1
	bl	_clear_bit
.L12111:
	cmp	r7, #0
	beq	.L12107
	add	r0, r7, #24
	bl	mutex_unlock
	b	.L12107
.L12138:
	.syntax divided
@ 1394 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1394, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L12139:
	ldr	r7, [r8, #8]
	cmp	r7, #0
	bne	.L12108
	movw	r0, #:lower16:.LC996
	ldr	r1, .L12142
	movt	r0, #:upper16:.LC996
	bl	printk
	b	.L12109
.L12140:
	movw	r0, #:lower16:.LC33
	movw	r1, #1475
	movt	r0, #:upper16:.LC33
	bl	warn_slowpath_null
	b	.L12111
.L12141:
	movw	r0, #:lower16:.LC997
	ldr	r1, .L12142+4
	movt	r0, #:upper16:.LC997
	bl	printk
	mov	r0, r5
	bl	ffs_data_clear
	ldr	r2, [r5, #120]
	add	r3, r5, #120
	cmp	r2, r3
	bne	.L12112
	ldr	r2, [r5, #40]
	add	r3, r5, #40
	cmp	r2, r3
	bne	.L12112
	mov	r0, r5
	bl	kfree
	b	.L12125
.L12112:
	.syntax divided
@ 1345 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1346, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L12143:
	.align	2
.L12142:
	.word	.LANCHOR5-572
	.word	.LANCHOR5-544
	.fnend
	.size	ffs_data_clear, .-ffs_data_clear
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_release, %function
ffs_ep0_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #124]
	add	r3, r4, #88
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r5, [r3]
	sub	r5, r5, #1
	strex	r2, r5, [r3]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r5, #0
	bne	.L12145
	mov	r3, #3
	mov	r0, r4
	str	r3, [r4, #92]
	bl	ffs_data_clear
	str	r5, [r4, #92]
	str	r5, [r4, #96]
	strh	r5, [r4, #104]	@ movhi
	str	r5, [r4, #128]
	str	r5, [r4, #144]
	str	r5, [r4, #148]
	str	r5, [r4, #152]
	str	r5, [r4, #156]
	str	r5, [r4, #160]
	str	r5, [r4, #164]
	str	r5, [r4, #168]
	str	r5, [r4, #172]
	str	r5, [r4, #176]
	strh	r5, [r4, #180]	@ movhi
	str	r5, [r4, #184]
	str	r5, [r4, #188]
	str	r5, [r4, #208]
.L12145:
	add	r3, r4, #84
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L12150
.L12146:
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12150:
	movw	r0, #:lower16:.LC997
	ldr	r1, .L12151
	movt	r0, #:upper16:.LC997
	bl	printk
	mov	r0, r4
	bl	ffs_data_clear
	ldr	r2, [r4, #120]
	add	r3, r4, #120
	cmp	r2, r3
	bne	.L12147
	ldr	r2, [r4, #40]
	add	r3, r4, #40
	cmp	r2, r3
	bne	.L12147
	mov	r0, r4
	bl	kfree
	b	.L12146
.L12147:
	.syntax divided
@ 1345 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1346, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L12152:
	.align	2
.L12151:
	.word	.LANCHOR5-544
	.fnend
	.size	ffs_ep0_release, .-ffs_ep0_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_release, %function
ffs_epfile_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r2, #1
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r3, [r0, #328]
	ldr	r4, [r3, #36]
	str	r2, [r3, #32]
	add	r3, r4, #88
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r5, [r3]
	sub	r5, r5, #1
	strex	r2, r5, [r3]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r5, #0
	bne	.L12154
	mov	r3, #3
	mov	r0, r4
	str	r3, [r4, #92]
	bl	ffs_data_clear
	str	r5, [r4, #92]
	str	r5, [r4, #96]
	strh	r5, [r4, #104]	@ movhi
	str	r5, [r4, #128]
	str	r5, [r4, #144]
	str	r5, [r4, #148]
	str	r5, [r4, #152]
	str	r5, [r4, #156]
	str	r5, [r4, #160]
	str	r5, [r4, #164]
	str	r5, [r4, #168]
	str	r5, [r4, #172]
	str	r5, [r4, #176]
	strh	r5, [r4, #180]	@ movhi
	str	r5, [r4, #184]
	str	r5, [r4, #188]
	str	r5, [r4, #208]
.L12154:
	add	r3, r4, #84
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L12159
.L12155:
	mov	r3, #0
	mov	r0, r3
	str	r3, [r6, #124]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12159:
	movw	r0, #:lower16:.LC997
	ldr	r1, .L12160
	movt	r0, #:upper16:.LC997
	bl	printk
	mov	r0, r4
	bl	ffs_data_clear
	ldr	r2, [r4, #120]
	add	r3, r4, #120
	cmp	r2, r3
	bne	.L12156
	ldr	r2, [r4, #40]
	add	r3, r4, #40
	cmp	r2, r3
	bne	.L12156
	mov	r0, r4
	bl	kfree
	b	.L12155
.L12156:
	.syntax divided
@ 1345 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1346, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L12161:
	.align	2
.L12160:
	.word	.LANCHOR5-544
	.fnend
	.size	ffs_epfile_release, .-ffs_epfile_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_unbind, %function
ffs_func_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	sub	r8, r1, #36
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r1, #-28]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r6, #132]
	cmp	r3, r8
	beq	.L12187
.L12163:
	add	r4, r6, #116
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #96]
	mov	r5, r0
	add	r0, r6, #100
	ldrh	r2, [r6, #104]
	mov	lr, r0
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r6, #96]
	cmp	r2, #0
	beq	.L12177
	add	r2, r2, r0
	mov	r3, r0
.L12171:
	ldrb	r1, [r3], #1	@ zero_extendqisi2
	sub	ip, r1, #5
	cmp	ip, #1
	strbls	r1, [r0]
	addls	r0, r0, #1
	cmp	r2, r3
	bne	.L12171
	sub	r2, r0, lr
	add	r1, r2, #1
	uxth	r2, r2
	uxth	r1, r1
.L12169:
	add	r3, r6, r2
	strh	r1, [r6, #104]	@ movhi
	mov	r0, #1
	mov	r1, #3
	mov	r2, r0
	mov	r6, #0
	strb	r0, [r3, #100]
	mov	r0, r4
	bl	__wake_up_locked
	mov	r1, r5
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7, #-28]
	ldr	r4, [r7, #-24]
	add	r0, r3, #24
	ldrh	r5, [r3, #180]
	bl	_raw_spin_lock_irqsave
	add	r4, r4, #28
	mov	r9, r0
.L12173:
	ldr	r0, [r4, #-28]
	cmp	r0, #0
	beq	.L12172
	ldr	r1, [r4, #-24]
	cmp	r1, #0
	beq	.L12172
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L12172:
	subs	r5, r5, #1
	str	r6, [r4, #-28]
	add	r4, r4, #28
	str	r6, [r4, #-52]
	bne	.L12173
	ldr	r0, [r7, #-28]
	mov	r1, r9
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	ldr	r4, [r7, #-28]
	add	r3, r4, #84
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L12188
.L12174:
	ldr	r0, [r7, #-24]
	bl	kfree
	mov	r0, r8
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	kfree
.L12187:
	ldr	r4, [r1, #-24]
	add	r0, r6, #24
	mov	r10, #1
	mov	r9, #0
	ldrh	fp, [r6, #180]
	ldr	r5, [r6, #208]
	bl	_raw_spin_lock_irqsave
	add	r4, r4, #28
	str	r0, [sp, #4]
.L12164:
	str	r10, [r5, #32]
	ldr	r0, [r4, #-28]
	cmp	r0, #0
	beq	.L12165
	ldr	r2, [r0, #8]
	add	r4, r4, #28
	add	r5, r5, #56
	ldr	r2, [r2, #4]
	blx	r2
	ldr	r2, [r4, #-56]
	subs	fp, fp, #1
	str	r9, [r2]
	str	r9, [r5, #-16]
	bne	.L12164
.L12167:
	ldr	r0, [r7, #-28]
	ldr	r1, [sp, #4]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	mov	r3, #0
	str	r3, [r6, #132]
	b	.L12163
.L12177:
	mov	r1, #1
	b	.L12169
.L12165:
	subs	fp, fp, #1
	str	r0, [r5, #40]
	add	r4, r4, #28
	add	r5, r5, #56
	bne	.L12164
	b	.L12167
.L12188:
	movw	r0, #:lower16:.LC997
	ldr	r1, .L12189
	movt	r0, #:upper16:.LC997
	bl	printk
	mov	r0, r4
	bl	ffs_data_clear
	ldr	r2, [r4, #120]
	add	r3, r4, #120
	cmp	r2, r3
	bne	.L12175
	ldr	r2, [r4, #40]
	add	r3, r4, #40
	cmp	r2, r3
	bne	.L12175
	mov	r0, r4
	bl	kfree
	b	.L12174
.L12175:
	.syntax divided
@ 1345 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1346, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L12190:
	.align	2
.L12189:
	.word	.LANCHOR5-544
	.fnend
	.size	ffs_func_unbind, .-ffs_func_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_fs_kill_sb, %function
ffs_fs_kill_sb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	bl	kill_litter_super
	ldr	r4, [r4, #616]
	cmp	r4, #0
	beq	.L12191
	add	r3, r4, #84
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L12198
.L12191:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L12198:
	movw	r0, #:lower16:.LC997
	ldr	r1, .L12199
	movt	r0, #:upper16:.LC997
	bl	printk
	mov	r0, r4
	bl	ffs_data_clear
	ldr	r2, [r4, #120]
	add	r3, r4, #120
	cmp	r2, r3
	bne	.L12195
	ldr	r2, [r4, #40]
	add	r3, r4, #40
	cmp	r2, r3
	bne	.L12195
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
.L12195:
	.syntax divided
@ 1345 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1346, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L12200:
	.align	2
.L12199:
	.word	.LANCHOR5-544
	.fnend
	.size	ffs_fs_kill_sb, .-ffs_fs_kill_sb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	transport_store, %function
transport_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r7, #2480]
	.pad #44
	sub	sp, sp, #44
	str	r3, [sp, #4]
	ldr	r3, [r4, #372]
	cmp	r3, #0
	beq	.L12312
	movw	r1, #:lower16:.LC427
	mov	r0, r2
	movt	r1, #:upper16:.LC427
	add	r2, sp, #16
	bl	sscanf
	ldr	r1, [sp, #16]
	movw	r3, #:lower16:.LC584
	movw	r2, #:lower16:.LC583
	ldr	r8, [r4, #364]
	movt	r3, #:upper16:.LC584
	movt	r2, #:upper16:.LC583
	cmp	r1, #0
	moveq	r5, #3
	movne	r5, #2
	moveq	r2, r3
	cmp	r8, r5
	beq	.L12313
	movw	r6, #:lower16:.LANCHOR4
	movw	r3, #2034
	movt	r6, #:upper16:.LANCHOR4
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L12314
.L12206:
	mov	r3, #0
	cmp	r8, #0
	str	r3, [r4, #364]
	beq	.L12207
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L12208
	blx	r3
.L12208:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L12209
	blx	r3
.L12209:
	cmp	r8, #2
	beq	.L12210
	cmp	r8, #3
	bne	.L12207
	add	r3, r4, #368
	add	r0, r4, #152
	mov	r9, r3
	add	r8, r4, #104
	str	r3, [sp, #12]
	bl	tasklet_kill
	add	r0, r4, #132
	bl	tasklet_kill
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	fp, [r4, #104]
	str	r0, [sp, #8]
	cmp	r8, fp
	beq	.L12221
.L12222:
	mov	r0, fp
	sub	r10, fp, #36
	bl	list_del
	ldr	r9, [r4, #88]
	ldr	r0, [fp, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r9, #8]
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	fp, [r4, #104]
	cmp	r8, fp
	bne	.L12222
.L12221:
	ldr	fp, [r4, #112]
	add	r8, r4, #112
	cmp	r8, fp
	beq	.L12223
.L12224:
	mov	r0, fp
	sub	r10, fp, #36
	bl	list_del
	ldr	r9, [r4, #92]
	ldr	r0, [fp, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r9, #8]
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	fp, [r4, #112]
	cmp	r8, fp
	bne	.L12224
.L12223:
	ldr	fp, [r4, #120]
	add	r8, r4, #120
	cmp	r8, fp
	beq	.L12225
.L12226:
	mov	r0, fp
	sub	r10, fp, #36
	bl	list_del
	ldr	r9, [r4, #92]
	ldr	r0, [fp, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r9, #8]
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	fp, [r4, #120]
	cmp	r8, fp
	bne	.L12226
.L12225:
	ldr	r1, [sp, #8]
	ldr	r0, [sp, #12]
	bl	_raw_spin_unlock_irqrestore
.L12322:
	cmp	r5, #2
	str	r5, [r4, #364]
	bne	.L12315
.L12258:
	movw	r7, #:lower16:rmnet_mux_sdio_complete_epout
	mov	r5, #16
	movt	r7, #:upper16:rmnet_mux_sdio_complete_epout
	add	r8, r4, #216
.L12228:
	ldr	r0, [r4, #88]
	mov	r1, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r8
	add	r0, r3, #36
	beq	.L12231
	cmn	r3, #4096
	bhi	.L12231
	str	r7, [r3, #28]
	ldr	r1, [r4, #220]
	bl	__list_add
	subs	r5, r5, #1
	bne	.L12228
	movw	r7, #:lower16:rmnet_mux_sdio_complete_epin
	mov	r5, #100
	movt	r7, #:upper16:rmnet_mux_sdio_complete_epin
	add	r10, r4, #192
.L12233:
	ldr	r0, [r4, #92]
	mov	r1, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r10
	add	r0, r3, #36
	beq	.L12231
	cmn	r3, #4096
	bhi	.L12231
	str	r7, [r3, #28]
	ldr	r1, [r4, #196]
	bl	__list_add
	subs	r5, r5, #1
	bne	.L12233
	ldr	r3, [r4, #372]
	cmp	r3, #0
	bne	.L12234
	movw	r3, #2082
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L12231
	movw	r1, #:lower16:.LC1002
	ldr	r2, .L12327
	movt	r1, #:upper16:.LC1002
	ldr	r0, .L12327+4
	bl	__dynamic_pr_debug
	b	.L12231
.L12207:
	movw	r3, #2058
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L12316
.L12220:
	cmp	r5, #2
	str	r5, [r4, #364]
	beq	.L12258
.L12315:
	cmp	r5, #3
	bne	.L12317
	ldr	r3, [r4, #172]
	tst	r3, #1
	beq	.L12318
.L12240:
	movw	r10, #:lower16:kmalloc_caches
	movw	r8, #:lower16:rmnet_mux_smd_complete_epout
	movt	r10, #:upper16:kmalloc_caches
	movt	r8, #:upper16:rmnet_mux_smd_complete_epout
	mov	r7, #8
.L12247:
	ldr	r6, [r4, #88]
	mov	r1, #208
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	mov	r2, #2048
	bne	.L12319
.L12231:
	ldr	r0, [sp, #4]
.L12201:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12319:
	str	r2, [r5, #4]
	ldr	r3, [r10, #44]
	mov	ip, #16
	mov	r1, #208
	subs	r0, r3, #0
	streq	ip, [r5]
	beq	.L12246
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L12246
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L12231
.L12246:
	cmn	r5, #4096
	add	fp, r4, #112
	mov	r6, #2048
	mov	r2, fp
	add	r0, r5, #36
	bhi	.L12231
	str	r6, [r5, #4]
	str	r8, [r5, #28]
	str	r4, [r5, #32]
	ldr	r1, [r4, #116]
	bl	__list_add
	subs	r7, r7, #1
	bne	.L12247
	movw	r8, #:lower16:rmnet_mux_smd_complete_epin
	mov	r9, r6
	movt	r8, #:upper16:rmnet_mux_smd_complete_epin
	mov	r7, #8
.L12250:
	ldr	r6, [r4, #92]
	mov	r1, #208
	ldr	r2, [r6, #8]
	mov	r0, r6
	ldr	r2, [r2, #8]
	blx	r2
	subs	r5, r0, #0
	beq	.L12231
	str	r9, [r5, #4]
	ldr	ip, [r10, #44]
	mov	lr, #16
	mov	r2, #2048
	mov	r1, #208
	subs	r0, ip, #0
	streq	lr, [r5]
	beq	.L12249
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L12249
	ldr	r2, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r2, #12]
	blx	r3
	b	.L12231
.L12210:
	add	r3, r4, #368
	add	fp, r4, #192
	mov	r0, r3
	mov	r8, #0
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r4, #192]
	str	r8, [r4, #312]
	str	r0, [sp, #8]
	cmp	fp, r9
	beq	.L12212
.L12213:
	mov	r0, r9
	sub	r10, r9, #36
	bl	list_del
	str	r8, [r9, #-36]
	ldr	r9, [r4, #88]
	mov	r0, #0
	bl	kfree
	mov	r1, r10
	ldr	r2, [r9, #8]
	mov	r0, r9
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r9, [r4, #192]
	cmp	fp, r9
	bne	.L12213
.L12212:
	ldr	r9, [r4, #216]
	add	r8, r4, #216
	cmp	r8, r9
	beq	.L12214
	mov	fp, #0
.L12215:
	mov	r0, r9
	sub	r10, r9, #36
	bl	list_del
	str	fp, [r9, #-36]
	ldr	r9, [r4, #92]
	mov	r0, #0
	bl	kfree
	mov	r1, r10
	ldr	r2, [r9, #8]
	mov	r0, r9
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r9, [r4, #216]
	cmp	r8, r9
	bne	.L12215
.L12214:
	ldr	r3, [r4, #200]
	add	r8, r4, #200
	cmp	r8, r3
	beq	.L12216
	mov	fp, #0
	b	.L12217
.L12320:
	ldr	r2, [r4, #208]
	sub	r2, r2, #1
	str	r2, [r4, #208]
	ldm	r3, {r1, r2}
	str	fp, [r3]
	str	fp, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #200]
	cmp	r3, r8
	beq	.L12216
.L12217:
	subs	r0, r3, #0
	bne	.L12320
.L12216:
	ldr	r3, [r4, #224]
	add	r8, r4, #224
	cmp	r8, r3
	beq	.L12225
	mov	fp, #0
	b	.L12219
.L12321:
	ldr	r2, [r4, #232]
	sub	r2, r2, #1
	str	r2, [r4, #232]
	ldm	r3, {r1, r2}
	str	fp, [r3]
	str	fp, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #224]
	cmp	r8, r3
	beq	.L12225
.L12219:
	subs	r0, r3, #0
	bne	.L12321
	ldr	r1, [sp, #8]
	ldr	r0, [sp, #12]
	bl	_raw_spin_unlock_irqrestore
	b	.L12322
.L12249:
	cmn	r5, #4096
	add	r2, r4, #104
	add	r0, r5, #36
	bhi	.L12231
	str	r8, [r5, #28]
	str	r4, [r5, #32]
	ldr	r1, [r4, #108]
	bl	__list_add
	subs	r7, r7, #1
	bne	.L12250
	add	r6, r4, #368
	ldr	r8, [r4, #84]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	b	.L12251
.L12253:
	bl	list_del
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #88]
	mov	r1, r10
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	r10, #0
	mov	r7, r0
	bne	.L12323
.L12251:
	ldr	r5, [r4, #112]
	cmp	fp, r5
	mov	r0, r5
	sub	r10, r5, #36
	bne	.L12253
.L12252:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L12231
.L12318:
	movw	r3, #:lower16:rmnet_mux_smd_notify
	mov	r2, r4
	ldr	r0, [r7, #4004]
	movt	r3, #:upper16:rmnet_mux_smd_notify
	add	r1, r4, #128
	ldr	r5, [r4, #84]
	bl	smd_open
	cmp	r0, #0
	bne	.L12324
	ldr	r3, [r4, #172]
	ands	r3, r3, #1
	bne	.L12240
	mov	r2, sp
	str	r3, [sp, #20]
	add	r5, r4, #180
	bic	r1, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r1, r1, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r1, #12]
	add	r1, sp, #32
	str	r0, [sp, #24]
	str	r2, [sp, #28]
	str	r1, [sp, #32]
	str	r1, [sp, #36]
	b	.L12244
.L12325:
	bl	schedule
.L12244:
	mov	r2, #2
	add	r1, sp, #20
	mov	r0, r5
	bl	prepare_to_wait
	ldr	r3, [r4, #172]
	tst	r3, #1
	beq	.L12325
	add	r1, sp, #20
	mov	r0, r5
	bl	finish_wait
	b	.L12240
.L12314:
	movw	r1, #:lower16:.LC1000
	add	r0, r6, #2016
	movt	r1, #:upper16:.LC1000
	bl	__dynamic_pr_debug
	ldr	r8, [r4, #364]
	b	.L12206
.L12324:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC938
	movt	r1, #:upper16:.LC938
	add	r0, r0, #32
	bl	dev_err
	b	.L12231
.L12316:
	movw	r1, #:lower16:.LC1001
	ldr	r2, .L12327+8
	movt	r1, #:upper16:.LC1001
	ldr	r0, .L12327+12
	bl	__dynamic_pr_debug
	b	.L12220
.L12323:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC214
	mov	r2, r10
	movt	r1, #:upper16:.LC214
	add	r0, r0, #32
	bl	dev_err
	mov	r2, fp
	mov	r0, r5
	ldr	r1, [r4, #116]
	bl	__list_add
	b	.L12252
.L12234:
	ldr	r9, [r4, #84]
	add	r7, r4, #368
	mov	r0, r7
.L12310:
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #216]
	mov	fp, r0
	cmp	r8, r5
	beq	.L12235
	mov	r0, r5
	sub	r6, r5, #36
	bl	list_del
	mov	r1, fp
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r2, #0
	mov	r1, #208
	mvn	r3, #0
	movw	r0, #2056
	bl	__alloc_skb
	mov	r1, r6
	subs	r6, r0, #0
	mov	ip, #2048
	mov	r2, #208
	beq	.L12326
	ldr	r0, [r6, #160]
	ldr	r3, [r6, #172]
	add	r0, r0, #8
	add	r3, r3, #8
	str	r0, [r6, #160]
	str	r3, [r6, #172]
	str	r3, [r5, #-36]
	str	ip, [r5, #-32]
	str	r6, [r5, #-4]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r10, r0, #0
	mov	r0, r7
	beq	.L12310
	mov	r0, r6
	bl	dev_kfree_skb_any
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
.L12237:
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC266
	mov	r2, r10
	movt	r1, #:upper16:.LC266
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r8
	mov	r0, r5
	ldr	r1, [r4, #220]
	bl	__list_add
.L12235:
	mov	r1, fp
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L12231
.L12317:
	movw	r0, #:lower16:.LC1003
	ldr	r1, .L12327+8
	movt	r0, #:upper16:.LC1003
	bl	printk
	b	.L12231
.L12312:
	movw	r0, #:lower16:.LC998
	ldr	r1, .L12327+8
	movt	r0, #:upper16:.LC998
	bl	printk
	mvn	r0, #21
	b	.L12201
.L12313:
	movw	ip, #:lower16:.LANCHOR3
	movw	r0, #:lower16:.LC999
	ldr	r1, .L12327+8
	movt	ip, #:upper16:.LANCHOR3
	mov	r3, r2
	add	ip, ip, r8, lsl #2
	movt	r0, #:upper16:.LC999
	ldr	r2, [ip, #1096]
	bl	printk
	mov	r0, #0
	b	.L12201
.L12326:
	mov	r0, r7
	mvn	r10, #11
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	b	.L12237
.L12328:
	.align	2
.L12327:
	.word	.LANCHOR5-512
	.word	.LANCHOR4+2064
	.word	.LANCHOR5-528
	.word	.LANCHOR4+2040
	.fnend
	.size	transport_store, .-transport_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_read, %function
ccid_bulk_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #2106
	strd	r6, [sp, #8]
	mov	r7, r2
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR4
	movt	r9, #:upper16:.LANCHOR4
	strd	r10, [sp, #24]
	mov	r10, r1
	ldrh	r3, [r9, r3]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	ldr	r4, [r0, #124]
	tst	r3, #4
	bne	.L12372
.L12330:
	movw	r2, #522
	cmp	r7, r2
	bhi	.L12373
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L12333
	mov	r3, sp
	add	r5, r4, #92
	bic	r8, r3, #8128
	bic	r8, r8, #63
	b	.L12334
.L12338:
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L12351
.L12379:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L12374
	ldr	r2, [r6, #48]
	cmp	r2, #0
	bne	.L12344
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L12334:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L12375
	ldr	r6, [r4, #184]
	mov	r3, #0
	mov	r1, r0
	mov	r0, r5
	str	r7, [r6, #4]
	str	r3, [r4, #188]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #108]
	mov	r1, r6
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L12376
	ldr	r3, [r4, #188]
	cmp	r3, #0
	bne	.L12338
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L12338
	ldr	r2, [r4, #96]
	cmp	r2, #0
	beq	.L12338
	ldr	r0, [r8, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #16
	movt	r2, #:upper16:autoremove_wake_function
	add	fp, r4, #160
	str	r3, [sp, #4]
	str	r1, [sp, #16]
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #20]
	b	.L12341
.L12377:
	bl	schedule
.L12341:
	mov	r2, #1
	add	r1, sp, #4
	mov	r0, fp
	bl	prepare_to_wait
	ldr	r3, [r4, #188]
	cmp	r3, #0
	bne	.L12339
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L12339
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L12339
	ldr	r3, [r8, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L12377
	add	r1, sp, #4
	mov	r0, fp
	bl	finish_wait
	ldr	r0, [r4, #108]
	mov	r3, #1
	mov	r7, #65024
	mov	r1, r6
	movt	r7, 65535
	str	r3, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L12335:
	movw	r3, #2202
	ldrh	r3, [r9, r3]
	tst	r3, #4
	bne	.L12378
.L12329:
	mov	r0, r7
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12339:
	add	r1, sp, #4
	mov	r0, fp
	bl	finish_wait
	ldr	r3, [r4, #148]
	cmp	r3, #0
	beq	.L12379
.L12351:
	mvn	r7, #4
	b	.L12335
.L12375:
	movw	r3, #2130
	ldrh	r3, [r9, r3]
	tst	r3, #4
	mvneq	r7, #18
	beq	.L12329
	movw	r1, #:lower16:.LC286
	ldr	r2, .L12381
	mvn	r7, #18
	movt	r1, #:upper16:.LC286
	ldr	r0, .L12381+4
	bl	__dynamic_pr_debug
	b	.L12329
.L12374:
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #2154
	ldrh	r3, [r9, r3]
	tst	r3, #4
	bne	.L12343
.L12349:
	mvn	r7, #18
	b	.L12335
.L12344:
	mov	r3, #1
	cmp	r2, r7
	mov	r1, r0
	mov	r0, r5
	str	r3, [r4, #156]
	movcc	r8, r2
	movcs	r8, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r10, r8; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L12380
.L12345:
	cmp	r8, #0
	mov	r0, r5
	mvnne	r7, #13
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	mov	r2, #0
	mov	r8, r0
	str	r2, [r4, #156]
	cmp	r3, r2
	bne	.L12347
	ldr	r6, [r4, #184]
	cmp	r6, r2
	beq	.L12348
	ldr	r4, [r4, #108]
	ldr	r0, [r6]
	bl	kfree
	mov	r1, r6
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
.L12348:
	mov	r1, r8
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #2178
	ldrh	r3, [r9, r3]
	tst	r3, #4
	beq	.L12349
	movw	r1, #:lower16:.LC286
	ldr	r2, .L12381
	mvn	r7, #18
	movt	r1, #:upper16:.LC286
	ldr	r0, .L12381+8
	bl	__dynamic_pr_debug
	b	.L12335
.L12380:
	mov	r2, r8
	mov	r0, r10
	ldr	r1, [r6]
	bl	__copy_to_user
	mov	r8, r0
	b	.L12345
.L12347:
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	b	.L12335
.L12372:
	movw	r1, #:lower16:.LC1004
	ldr	r0, .L12381+12
	movt	r1, #:upper16:.LC1004
	bl	__dynamic_pr_debug
	b	.L12330
.L12378:
	movw	r1, #:lower16:.LC1008
	mov	r2, r7
	ldr	r0, .L12381+16
	movt	r1, #:upper16:.LC1008
	bl	__dynamic_pr_debug
	b	.L12329
.L12343:
	movw	r1, #:lower16:.LC286
	ldr	r2, .L12381
	mvn	r7, #18
	movt	r1, #:upper16:.LC286
	ldr	r0, .L12381+20
	bl	__dynamic_pr_debug
	b	.L12335
.L12376:
	movw	r0, #:lower16:.LC1007
	ldr	r1, .L12381
	mvn	r7, #4
	movt	r0, #:upper16:.LC1007
	bl	printk
	mov	r3, #1
	str	r3, [r4, #148]
	b	.L12335
.L12373:
	movw	r0, #:lower16:.LC1005
	mov	r3, r7
	ldr	r1, .L12381
	movt	r0, #:upper16:.LC1005
	mvn	r7, #11
	bl	printk
	b	.L12329
.L12333:
	movw	r0, #:lower16:.LC1006
	ldr	r1, .L12381
	mvn	r7, #4
	movt	r0, #:upper16:.LC1006
	bl	printk
	b	.L12335
.L12382:
	.align	2
.L12381:
	.word	.LANCHOR5-488
	.word	.LANCHOR4+2112
	.word	.LANCHOR4+2160
	.word	.LANCHOR4+2088
	.word	.LANCHOR4+2184
	.word	.LANCHOR4+2136
	.fnend
	.size	ccid_bulk_read, .-ccid_bulk_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_ioctl, %function
modem_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r5, #:lower16:__stack_chk_guard
	movw	r3, #21249
	movt	r5, #:upper16:__stack_chk_guard
	movt	r3, 16388
	strd	r6, [sp, #8]
	ldr	ip, [r5]
	strd	r8, [sp, #16]
	cmp	r1, r3
	str	r10, [sp, #24]
	mov	r7, r2
	str	lr, [sp, #28]
	.pad #24
	sub	sp, sp, #24
	str	ip, [sp, #20]
	bne	.L12399
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r4, [r3, #3996]
	cmp	r4, #0
	moveq	r0, r4
	beq	.L12383
	ldr	r3, [r4, #20]
	add	r6, r4, #148
	strh	r2, [r4, #170]	@ movhi
	mov	r0, r6
	ldr	r8, [r3, #24]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #156]
	mov	r7, r0
	cmp	r3, #0
	moveq	r3, #1
	strbeq	r3, [r4, #147]
	bne	.L12400
.L12391:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
.L12383:
	ldr	r2, [sp, #20]
	ldr	r3, [r5]
	cmp	r2, r3
	bne	.L12401
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12399:
	movw	r3, #21251
	movt	r3, 16388
	cmp	r1, r3
	bne	.L12402
	movw	r0, #:lower16:.LC1009
	mov	r1, r2
	movt	r0, #:upper16:.LC1009
	bl	printk
	movw	ip, #:lower16:.LANCHOR1
	mov	r3, #1
	ldr	r0, .L12404
	movt	ip, #:upper16:.LANCHOR1
	mov	r2, r3
	mov	r1, r3
	str	r3, [ip, #2200]
	mov	r3, #0
	str	r7, [ip, #3480]
	bl	__wake_up
	mov	r0, #0
	b	.L12383
.L12401:
	bl	__stack_chk_fail
.L12402:
	movw	r0, #:lower16:.LC1010
	movt	r0, #:upper16:.LC1010
	bl	printk
	movw	r0, #65021
	movt	r0, 65535
	b	.L12383
.L12400:
	ldr	r0, .L12404+4
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L12403
.L12389:
	movw	r0, #:lower16:.LC653
	ldrh	r2, [r4, #170]
	mov	r9, #32
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC653
	bl	printk
	add	r0, sp, #10
	mov	r1, #10
	ldr	r10, [r4, #152]
	bl	__memzero
	ldr	r8, [r4, #156]
	mov	r2, #0
	mov	r0, #10
	mvn	r1, #94
	mov	ip, #2
	strb	r2, [r4, #147]
	str	r2, [r4, #156]
	ldr	r3, [r8]
	str	r0, [r8, #4]
	mov	r0, r6
	strb	r1, [r3]
	strb	r9, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	ldrb	r1, [r4, #144]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	r2, [r3, #7]
	ldrh	ip, [r4, #170]	@ unaligned
	ldr	r1, [sp, #14]	@ unaligned
	strh	ip, [sp, #10]	@ movhi
	ldr	ip, [sp, #10]	@ unaligned
	str	ip, [r3, #8]	@ unaligned
	str	r1, [r3, #12]	@ unaligned
	ldrh	r1, [sp, #18]	@ unaligned
	strh	r1, [r3, #16]	@ unaligned
	ldrh	r2, [r4, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock
	ldr	r3, [r10, #8]
	mov	r2, r9
	mov	r1, r8
	mov	r0, r10
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r9, #0
	bge	.L12391
	ldr	r0, [r4, #20]
	movw	r1, #:lower16:.LC654
	mov	r3, r9
	movt	r1, #:upper16:.LC654
	ldrb	r2, [r4, #146]	@ zero_extendqisi2
	ldr	r0, [r0, #24]
	ldr	r0, [r0]
	add	r0, r0, #32
	bl	dev_err
	str	r8, [r4, #156]
	b	.L12391
.L12403:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC652
	sub	r0, r0, #24
	ldrh	ip, [r4, #170]
	movt	r2, #:upper16:.LC652
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	add	r1, r1, #32
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L12389
.L12405:
	.align	2
.L12404:
	.word	.LANCHOR1+2204
	.word	.LANCHOR4-1776
	.fnend
	.size	modem_ioctl, .-modem_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_ioctl, %function
mtp_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #60
	sub	sp, sp, #60
	add	r5, r4, #112
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r0, r3, [r5]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L12407
	movw	r3, #19713
	mov	r8, r2
	movt	r3, 16416
	mov	r6, r1
	cmp	r1, r3
	bhi	.L12409
	mov	r3, #19712
	movt	r3, 16416
	cmp	r1, r3
	bcs	.L12410
	movw	r3, #19715
	movt	r3, 16392
	cmp	r1, r3
	bne	.L12408
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r8, #8; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L12424
	mov	r1, r8
	mov	r2, #8
	add	r0, sp, #16
	bl	__copy_from_user
	cmp	r0, #0
	movwne	r6, #:lower16:.LANCHOR4
	mvnne	r8, #13
	movtne	r6, #:upper16:.LANCHOR4
	bne	.L12423
	movw	r6, #:lower16:.LANCHOR4
	movw	r3, #2226
	ldr	r8, [sp, #16]
	movt	r6, #:upper16:.LANCHOR4
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L12477
.L12427:
	cmp	r8, #28
	bhi	.L12447
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L12448
	mov	r0, #1000
	add	r9, r4, #88
	bl	msecs_to_jiffies
	str	r0, [sp, #4]
	mov	r0, r9
	add	r10, r4, #124
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r4, #124]
	mov	fp, r0
	cmp	r10, r7
	beq	.L12478
	mov	r0, r7
	sub	r7, r7, #36
	bl	list_del
	mov	r1, fp
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L12429
.L12430:
	mov	r3, sp
	ldr	r1, [sp, #20]
	bic	r3, r3, #8128
	ldr	r0, [r7]
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r1, r8; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L12479
	cmp	r8, #0
	bne	.L12480
.L12442:
	str	r8, [r7, #4]
	ldr	r0, [r4, #100]
	mov	r2, #208
	mov	r1, r7
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r8, r0, #0
	beq	.L12423
	mov	r0, r9
.L12476:
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	ldr	r1, [r4, #128]
	add	r0, r7, #36
	mov	r2, r10
	bl	__list_add
	mov	r1, fp
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	b	.L12423
.L12409:
	movw	r3, #19716
	movt	r3, 16416
	cmp	r1, r3
	beq	.L12410
.L12408:
	add	r7, r4, #88
	mvn	r8, #21
.L12422:
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #104]
	cmp	r3, #3
	mvneq	r8, #124
	beq	.L12443
	cmp	r3, #0
	movne	r3, #1
	strne	r3, [r4, #104]
.L12443:
	movw	r6, #:lower16:.LANCHOR4
	mov	r0, r7
	movt	r6, #:upper16:.LANCHOR4
	bl	_raw_spin_unlock_irq
.L12423:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r3, #2250
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L12481
.L12406:
	mov	r0, r8
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12410:
	add	r7, r4, #88
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #104]
	cmp	r3, #3
	beq	.L12482
	cmp	r3, #0
	beq	.L12483
	mov	r3, #2
	mov	r0, r7
	str	r3, [r4, #104]
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r8, #32; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L12416
	mov	r1, r8
	mov	r2, #32
	add	r0, sp, #24
	bl	__copy_from_user
	subs	r9, r0, #0
	mvnne	r8, #13
	bne	.L12422
	ldr	r0, [sp, #24]
	bl	fget
	subs	r8, r0, #0
	mvneq	r8, #8
	beq	.L12422
	str	r8, [r4, #216]
	ldrd	r2, [sp, #32]
	strd	r2, [r4, #224]
	ldrd	r2, [sp, #40]
	strd	r2, [r4, #232]
	.syntax divided
@ 1028 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	movw	r3, #19716
	movt	r3, 16416
	cmp	r6, r3
	beq	.L12484
	mov	r3, #19712
	movt	r3, 16416
	cmp	r6, r3
	addeq	r2, r4, #184
	addne	r2, r4, #200
	streq	r9, [r4, #240]
.L12420:
	ldr	r1, [r4, #180]
	mov	r0, #4
	bl	queue_work_on
	ldr	r0, [r4, #180]
	bl	flush_workqueue
	mov	r0, r8
	bl	fput
	.syntax divided
@ 1052 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r8, [r4, #252]
	b	.L12422
.L12424:
	mov	r1, #8
	add	r0, sp, #16
	movw	r6, #:lower16:.LANCHOR4
	mvn	r8, #13
	bl	__memzero
	movt	r6, #:upper16:.LANCHOR4
	b	.L12423
.L12483:
	mov	r0, r7
	movw	r6, #:lower16:.LANCHOR4
	bl	_raw_spin_unlock_irq
	movt	r6, #:upper16:.LANCHOR4
	mvn	r8, #18
	b	.L12423
.L12481:
	ldr	r1, [r4, #84]
	movw	r2, #:lower16:.LC1012
	mov	r3, r8
	movt	r2, #:upper16:.LC1012
	ldr	r0, .L12487
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12406
.L12482:
	mov	r3, #1
	mov	r0, r7
	movw	r6, #:lower16:.LANCHOR4
	mvn	r8, #124
	str	r3, [r4, #104]
	movt	r6, #:upper16:.LANCHOR4
	bl	_raw_spin_unlock_irq
	b	.L12423
.L12416:
	mov	r1, #32
	add	r0, sp, #24
	bl	__memzero
	mvn	r8, #13
	b	.L12422
.L12477:
	ldr	r1, [r4, #84]
	movw	r2, #:lower16:.LC1011
	mov	r3, r8
	movt	r2, #:upper16:.LC1011
	add	r0, r6, #2208
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12427
.L12448:
	mvn	r8, #18
	b	.L12423
.L12407:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r8, #15
	b	.L12406
.L12479:
	mov	r2, r8
	bl	__copy_from_user
	cmp	r0, #0
	beq	.L12442
.L12441:
	mov	r0, r9
	mvn	r8, #13
	b	.L12476
.L12478:
	mov	r1, r0
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
.L12429:
	mov	r3, sp
	movw	r2, #:lower16:autoremove_wake_function
	ldr	fp, [sp, #4]
	bic	r3, r3, #8128
	add	r1, sp, #36
	bic	r3, r3, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r3, #12]
	add	ip, r4, #156
	str	r3, [sp, #12]
	mov	r3, #0
	str	ip, [sp, #4]
	str	r3, [sp, #24]
	str	r0, [sp, #28]
	str	r2, [sp, #32]
	str	r1, [sp, #36]
	str	r1, [sp, #40]
.L12435:
	add	r1, sp, #24
	mov	r2, #1
	ldr	r0, [sp, #4]
	bl	prepare_to_wait
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #124]
	mov	r1, r0
	cmp	r10, r3
	mov	r0, r3
	sub	r7, r3, #36
	beq	.L12485
	str	r1, [sp, #8]
	bl	list_del
	ldr	r1, [sp, #8]
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	bne	.L12433
.L12432:
	ldr	r3, [sp, #12]
	mov	r0, fp
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L12434
	bl	schedule_timeout
	subs	fp, r0, #0
	bne	.L12435
.L12438:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r4, #124]
	mov	fp, r0
	cmp	r10, r7
	beq	.L12486
	mov	r0, r7
	sub	r7, r7, #36
	bl	list_del
	mov	r1, fp
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	add	r1, sp, #24
	ldr	r0, [sp, #4]
	bl	finish_wait
	cmp	r7, #0
	bne	.L12430
.L12475:
	mvn	r8, #61
	b	.L12423
.L12480:
	mov	r1, r8
	bl	__memzero
	b	.L12441
.L12484:
	mov	r3, #1
	add	r2, r4, #184
	str	r3, [r4, #240]
	ldrh	r3, [sp, #48]
	strh	r3, [r4, #244]	@ movhi
	ldr	r3, [sp, #52]
	str	r3, [r4, #248]
	b	.L12420
.L12434:
	add	r1, sp, #24
	ldr	r0, [sp, #4]
	bl	finish_wait
	b	.L12475
.L12485:
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	b	.L12432
.L12447:
	mvn	r8, #21
	b	.L12423
.L12433:
	cmp	fp, #0
	beq	.L12438
	add	r1, sp, #24
	ldr	r0, [sp, #4]
	bl	finish_wait
	b	.L12430
.L12486:
	mov	r1, r0
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	add	r1, sp, #24
	ldr	r0, [sp, #4]
	mvn	r8, #61
	bl	finish_wait
	b	.L12423
.L12488:
	.align	2
.L12487:
	.word	.LANCHOR4+2232
	.fnend
	.size	mtp_ioctl, .-mtp_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_bind_config, %function
adb_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC1013
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r0, #:upper16:.LC1013
	str	r8, [sp, #16]
	mov	r5, r1
	movw	r6, #:lower16:.LANCHOR4
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	ldr	r4, [r3, #3476]
	bl	printk
	ldr	r3, .L12523
	movw	r2, #:lower16:.LC1014
	movt	r6, #:upper16:.LANCHOR4
	ldr	r1, [r5, #24]
	movt	r2, #:upper16:.LC1014
	str	r2, [r4]
	add	r2, r3, #16
	str	r2, [r4, #8]
	str	r3, [r4, #16]
	str	r1, [r4, #84]
	ldr	r2, [r5, #24]
	movw	r1, #:lower16:adb_function_bind
	movt	r1, #:upper16:adb_function_bind
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	str	r1, [r4, #32]
	movw	r1, #1386
	cmp	r2, #4
	movw	r2, #:lower16:adb_function_set_alt
	addhi	r3, r3, #32
	movt	r2, #:upper16:adb_function_set_alt
	strhi	r3, [r4, #12]
	movw	r3, #:lower16:adb_function_unbind
	movt	r3, #:upper16:adb_function_unbind
	str	r3, [r4, #36]
	movw	r3, #:lower16:adb_function_disable
	str	r2, [r4, #40]
	ldrh	r2, [r6, r1]
	movt	r3, #:upper16:adb_function_disable
	str	r3, [r4, #48]
	tst	r2, #4
	bne	.L12520
.L12491:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L12499
	add	r8, r4, #72
	str	r5, [r4, #20]
	add	r2, r5, #36
	mov	r0, r8
	ldr	r1, [r5, #40]
	bl	__list_add
	ldr	r7, [r4, #32]
	cmp	r7, #0
	beq	.L12493
	mov	r1, r4
	mov	r0, r5
	blx	r7
	subs	r7, r0, #0
	blt	.L12521
.L12493:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L12494
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L12494
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L12494:
	tst	r3, #2
	bne	.L12495
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L12495
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L12495:
	tst	r3, #1
	bne	.L12496
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L12496
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L12496:
	cmp	r7, #0
	bne	.L12492
	b	.L12489
.L12520:
	ldr	ip, [r5]
	movw	r3, #:lower16:.LC1014
	movw	r2, #:lower16:.LC929
	ldr	r1, [r5, #24]
	movt	r3, #:upper16:.LC1014
	movt	r2, #:upper16:.LC929
	ldr	r0, .L12523+4
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r5, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L12491
.L12499:
	mvn	r7, #21
.L12492:
	movw	r3, #1410
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L12522
.L12489:
	mov	r0, r7
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12522:
	ldr	r1, [r5, #24]
	movw	r2, #:lower16:.LC930
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC930
	ldr	r0, .L12523+8
	ldr	r1, [r1]
	stm	sp, {r4, r7}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12489
.L12521:
	mov	r0, r8
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L12493
.L12524:
	.align	2
.L12523:
	.word	.LANCHOR0+2224
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.fnend
	.size	adb_function_bind_config, .-adb_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_bind_config, %function
ccid_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR4
	movw	r2, #2274
	movt	r5, #:upper16:.LANCHOR4
	movw	r3, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	ldrh	r2, [r5, r2]
	movt	r3, #:upper16:.LANCHOR1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	mov	r6, r1
	.pad #16
	sub	sp, sp, #16
	ldr	r4, [r3, #3472]
	tst	r2, #4
	bne	.L12559
.L12526:
	ldr	r2, .L12563
	movw	r0, #:lower16:ccid_function_bind
	movw	r1, #:lower16:ccid_function_unbind
	ldr	ip, [r6, #24]
	movt	r0, #:upper16:ccid_function_bind
	movt	r1, #:upper16:ccid_function_unbind
	movw	r3, #:lower16:.LC1016
	movt	r3, #:upper16:.LC1016
	add	lr, r2, #24
	str	r3, [r4]
	str	r2, [r4, #16]
	movw	r2, #:lower16:ccid_function_set_alt
	movt	r2, #:upper16:ccid_function_set_alt
	strd	r0, [r4, #32]
	movw	r0, #1386
	str	lr, [r4, #8]
	movw	r1, #:lower16:ccid_function_setup
	str	r2, [r4, #40]
	ldrh	r0, [r5, r0]
	movw	r2, #:lower16:ccid_function_disable
	movt	r1, #:upper16:ccid_function_setup
	movt	r2, #:upper16:ccid_function_disable
	str	r2, [r4, #48]
	tst	r0, #4
	str	r1, [r4, #52]
	str	ip, [r4, #84]
	bne	.L12560
.L12527:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L12535
	add	r8, r4, #72
	str	r6, [r4, #20]
	add	r2, r6, #36
	mov	r0, r8
	ldr	r1, [r6, #40]
	bl	__list_add
	ldr	r7, [r4, #32]
	cmp	r7, #0
	beq	.L12529
	mov	r1, r4
	mov	r0, r6
	blx	r7
	subs	r7, r0, #0
	blt	.L12561
.L12529:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L12530
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L12530
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r6, #45]
.L12530:
	tst	r3, #2
	bne	.L12531
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L12531
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r6, #45]
.L12531:
	tst	r3, #1
	bne	.L12532
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L12532
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #45]
.L12532:
	cmp	r7, #0
	bne	.L12528
	b	.L12525
.L12560:
	ldr	ip, [r6]
	movw	r2, #:lower16:.LC929
	ldr	r1, [r6, #24]
	movt	r2, #:upper16:.LC929
	ldr	r0, .L12563+4
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r6, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L12527
.L12535:
	mvn	r7, #21
.L12528:
	movw	r3, #1410
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L12562
.L12525:
	mov	r0, r7
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12559:
	movw	r1, #:lower16:.LC1015
	add	r0, r5, #2256
	movt	r1, #:upper16:.LC1015
	bl	__dynamic_pr_debug
	b	.L12526
.L12562:
	ldr	r1, [r6, #24]
	movw	r2, #:lower16:.LC930
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC930
	ldr	r0, .L12563+8
	ldr	r1, [r1]
	stm	sp, {r4, r7}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12525
.L12561:
	mov	r0, r8
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L12529
.L12564:
	.align	2
.L12563:
	.word	.LANCHOR0+2280
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.fnend
	.size	ccid_function_bind_config, .-ccid_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_sdio_bind_config, %function
rmnet_smd_sdio_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r3, #2480]
	.pad #16
	sub	sp, sp, #16
	cmp	r4, #0
	beq	.L12574
	movw	r6, #:lower16:.LANCHOR4
	movw	r3, #2298
	movt	r6, #:upper16:.LANCHOR4
	mov	r5, r1
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L12600
.L12567:
	ldr	r2, .L12604
	movw	r1, #:lower16:rmnet_mux_bind
	movw	r3, #:lower16:.LC1018
	movt	r1, #:upper16:rmnet_mux_bind
	movw	r0, #:lower16:rmnet_mux_unbind
	movt	r0, #:upper16:rmnet_mux_unbind
	movt	r3, #:upper16:.LC1018
	add	ip, r2, #8
	str	r1, [r4, #32]
	movw	r1, #:lower16:rmnet_mux_set_alt
	str	r2, [r4, #4]
	add	r2, r2, #28
	movt	r1, #:upper16:rmnet_mux_set_alt
	str	r3, [r4]
	str	r2, [r4, #8]
	movw	r2, #1386
	str	ip, [r4, #16]
	str	r0, [r4, #36]
	movw	r0, #:lower16:rmnet_mux_setup
	str	r1, [r4, #40]
	ldrh	ip, [r6, r2]
	movw	r1, #:lower16:rmnet_mux_disable
	movw	r2, #:lower16:rmnet_mux_suspend
	movt	r0, #:upper16:rmnet_mux_setup
	movt	r1, #:upper16:rmnet_mux_disable
	movt	r2, #:upper16:rmnet_mux_suspend
	tst	ip, #4
	str	r1, [r4, #48]
	str	r0, [r4, #52]
	str	r2, [r4, #56]
	bne	.L12601
.L12568:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L12576
	add	r8, r4, #72
	str	r5, [r4, #20]
	add	r2, r5, #36
	mov	r0, r8
	ldr	r1, [r5, #40]
	bl	__list_add
	ldr	r7, [r4, #32]
	cmp	r7, #0
	beq	.L12570
	mov	r1, r4
	mov	r0, r5
	blx	r7
	subs	r7, r0, #0
	blt	.L12602
.L12570:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L12571
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L12571
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L12571:
	tst	r3, #2
	bne	.L12572
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L12572
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L12572:
	tst	r3, #1
	bne	.L12573
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L12573
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L12573:
	cmp	r7, #0
	bne	.L12569
	b	.L12565
.L12601:
	ldr	ip, [r5]
	movw	r2, #:lower16:.LC929
	ldr	r1, [r5, #24]
	movt	r2, #:upper16:.LC929
	ldr	r0, .L12604+4
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r5, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L12568
.L12576:
	mvn	r7, #21
.L12569:
	movw	r3, #1410
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L12603
.L12565:
	mov	r0, r7
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12600:
	movw	r1, #:lower16:.LC1017
	ldr	r0, .L12604+8
	movt	r1, #:upper16:.LC1017
	bl	__dynamic_pr_debug
	b	.L12567
.L12603:
	ldr	r1, [r5, #24]
	movw	r2, #:lower16:.LC930
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC930
	ldr	r0, .L12604+12
	ldr	r1, [r1]
	stm	sp, {r4, r7}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12565
.L12602:
	mov	r0, r8
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L12570
.L12574:
	mvn	r7, #18
	b	.L12565
.L12605:
	.align	2
.L12604:
	.word	.LANCHOR0+2328
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+2280
	.word	.LANCHOR4+1392
	.fnend
	.size	rmnet_smd_sdio_bind_config, .-rmnet_smd_sdio_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	accessory_function_bind_config, %function
accessory_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC1019
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r0, #:upper16:.LC1019
	str	r8, [sp, #16]
	mov	r5, r1
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	ldr	r4, [r3, #2488]
	bl	printk
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldrb	r2, [r3, #2376]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L12607
	ldr	r1, [r5, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L12616
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [r3, #2376]
	strb	r2, [r3, #2400]
.L12607:
	ldr	r3, .L12642
	movw	r2, #:lower16:.LC1020
	movw	r6, #:lower16:.LANCHOR4
	ldr	r0, [r5, #24]
	movt	r2, #:upper16:.LC1020
	movt	r6, #:upper16:.LANCHOR4
	strd	r2, [r4]
	add	r1, r3, #24
	add	r2, r3, #8
	str	r1, [r4, #8]
	movw	r1, #:lower16:acc_function_bind
	str	r2, [r4, #16]
	movt	r1, #:upper16:acc_function_bind
	str	r0, [r4, #84]
	ldr	r2, [r5, #24]
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	str	r1, [r4, #32]
	movw	r1, #1386
	cmp	r2, #4
	movw	r2, #:lower16:acc_function_set_alt
	addhi	r3, r3, #40
	movt	r2, #:upper16:acc_function_set_alt
	strhi	r3, [r4, #12]
	movw	r3, #:lower16:acc_function_unbind
	movt	r3, #:upper16:acc_function_unbind
	str	r3, [r4, #36]
	movw	r3, #:lower16:acc_function_disable
	str	r2, [r4, #40]
	ldrh	r2, [r6, r1]
	movt	r3, #:upper16:acc_function_disable
	str	r3, [r4, #48]
	tst	r2, #4
	bne	.L12639
.L12610:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L12618
	add	r8, r4, #72
	str	r5, [r4, #20]
	add	r2, r5, #36
	mov	r0, r8
	ldr	r1, [r5, #40]
	bl	__list_add
	ldr	r7, [r4, #32]
	cmp	r7, #0
	beq	.L12612
	mov	r1, r4
	mov	r0, r5
	blx	r7
	subs	r7, r0, #0
	blt	.L12640
.L12612:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L12613
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L12613
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L12613:
	tst	r3, #2
	bne	.L12614
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L12614
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L12614:
	tst	r3, #1
	bne	.L12615
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L12615
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L12615:
	cmp	r7, #0
	bne	.L12611
	b	.L12606
.L12639:
	ldr	ip, [r5]
	movw	r3, #:lower16:.LC1020
	movw	r2, #:lower16:.LC929
	ldr	r1, [r5, #24]
	movt	r3, #:upper16:.LC1020
	movt	r2, #:upper16:.LC929
	ldr	r0, .L12642+4
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r5, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L12610
.L12618:
	mvn	r7, #21
.L12611:
	movw	r3, #1410
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L12641
.L12606:
	mov	r0, r7
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12641:
	ldr	r1, [r5, #24]
	movw	r2, #:lower16:.LC930
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC930
	ldr	r0, .L12642+8
	ldr	r1, [r1]
	stm	sp, {r4, r7}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12606
.L12640:
	mov	r0, r8
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L12612
.L12616:
	mvn	r7, #18
	b	.L12606
.L12643:
	.align	2
.L12642:
	.word	.LANCHOR0+2404
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.fnend
	.size	accessory_function_bind_config, .-accessory_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_bind_config, %function
mtp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC1021
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r0, #:upper16:.LC1021
	str	r8, [sp, #16]
	mov	r5, r1
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	ldr	r4, [r3, #2500]
	bl	printk
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldrb	r2, [r3, #2468]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L12645
	ldr	r1, [r5, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L12654
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [r3, #2468]
	strb	r2, [r3, #2492]
.L12645:
	ldr	r3, .L12680
	movw	r2, #:lower16:.LC1022
	movw	r6, #:lower16:.LANCHOR4
	ldr	r0, [r5, #24]
	movt	r2, #:upper16:.LC1022
	movt	r6, #:upper16:.LANCHOR4
	strd	r2, [r4]
	add	r1, r3, #28
	add	r2, r3, #8
	str	r1, [r4, #8]
	movw	r1, #:lower16:mtp_function_bind
	str	r2, [r4, #16]
	movt	r1, #:upper16:mtp_function_bind
	str	r0, [r4, #84]
	ldr	r2, [r5, #24]
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	str	r1, [r4, #32]
	movw	r1, #1386
	cmp	r2, #4
	movw	r2, #:lower16:mtp_function_set_alt
	addhi	r3, r3, #48
	movt	r2, #:upper16:mtp_function_set_alt
	strhi	r3, [r4, #12]
	movw	r3, #:lower16:mtp_function_unbind
	movt	r3, #:upper16:mtp_function_unbind
	str	r3, [r4, #36]
	movw	r3, #:lower16:mtp_function_disable
	str	r2, [r4, #40]
	ldrh	r2, [r6, r1]
	movt	r3, #:upper16:mtp_function_disable
	str	r3, [r4, #48]
	tst	r2, #4
	bne	.L12677
.L12648:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L12656
	add	r8, r4, #72
	str	r5, [r4, #20]
	add	r2, r5, #36
	mov	r0, r8
	ldr	r1, [r5, #40]
	bl	__list_add
	ldr	r7, [r4, #32]
	cmp	r7, #0
	beq	.L12650
	mov	r1, r4
	mov	r0, r5
	blx	r7
	subs	r7, r0, #0
	blt	.L12678
.L12650:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L12651
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L12651
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L12651:
	tst	r3, #2
	bne	.L12652
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L12652
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L12652:
	tst	r3, #1
	bne	.L12653
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L12653
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L12653:
	cmp	r7, #0
	bne	.L12649
	b	.L12644
.L12677:
	ldr	ip, [r5]
	movw	r3, #:lower16:.LC1022
	movw	r2, #:lower16:.LC929
	ldr	r1, [r5, #24]
	movt	r3, #:upper16:.LC1022
	movt	r2, #:upper16:.LC929
	ldr	r0, .L12680+4
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r5, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L12648
.L12656:
	mvn	r7, #21
.L12649:
	movw	r3, #1410
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L12679
.L12644:
	mov	r0, r7
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12679:
	ldr	r1, [r5, #24]
	movw	r2, #:lower16:.LC930
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC930
	ldr	r0, .L12680+8
	ldr	r1, [r1]
	stm	sp, {r4, r7}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12644
.L12678:
	mov	r0, r8
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L12650
.L12654:
	mvn	r7, #18
	b	.L12644
.L12681:
	.align	2
.L12680:
	.word	.LANCHOR0+2496
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.fnend
	.size	mtp_function_bind_config, .-mtp_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ptp_function_bind_config, %function
ptp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC1021
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r0, #:upper16:.LC1021
	str	r8, [sp, #16]
	mov	r5, r1
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	ldr	r4, [r3, #2500]
	bl	printk
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldrb	r2, [r3, #2468]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L12683
	ldr	r1, [r5, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L12692
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [r3, #2468]
	strb	r2, [r3, #2492]
.L12683:
	ldr	r3, .L12718
	movw	r2, #:lower16:.LC1022
	movw	r6, #:lower16:.LANCHOR4
	ldr	r0, [r5, #24]
	movt	r2, #:upper16:.LC1022
	movt	r6, #:upper16:.LANCHOR4
	strd	r2, [r4]
	add	r1, r3, #100
	add	r2, r3, #80
	str	r1, [r4, #8]
	movw	r1, #:lower16:mtp_function_bind
	str	r2, [r4, #16]
	movt	r1, #:upper16:mtp_function_bind
	str	r0, [r4, #84]
	ldr	r2, [r5, #24]
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	str	r1, [r4, #32]
	movw	r1, #1386
	cmp	r2, #4
	movw	r2, #:lower16:mtp_function_set_alt
	addhi	r3, r3, #120
	movt	r2, #:upper16:mtp_function_set_alt
	strhi	r3, [r4, #12]
	movw	r3, #:lower16:mtp_function_unbind
	movt	r3, #:upper16:mtp_function_unbind
	str	r3, [r4, #36]
	movw	r3, #:lower16:mtp_function_disable
	str	r2, [r4, #40]
	ldrh	r2, [r6, r1]
	movt	r3, #:upper16:mtp_function_disable
	str	r3, [r4, #48]
	tst	r2, #4
	bne	.L12715
.L12686:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L12694
	add	r8, r4, #72
	str	r5, [r4, #20]
	add	r2, r5, #36
	mov	r0, r8
	ldr	r1, [r5, #40]
	bl	__list_add
	ldr	r7, [r4, #32]
	cmp	r7, #0
	beq	.L12688
	mov	r1, r4
	mov	r0, r5
	blx	r7
	subs	r7, r0, #0
	blt	.L12716
.L12688:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L12689
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L12689
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L12689:
	tst	r3, #2
	bne	.L12690
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L12690
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L12690:
	tst	r3, #1
	bne	.L12691
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L12691
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L12691:
	cmp	r7, #0
	bne	.L12687
	b	.L12682
.L12715:
	ldr	ip, [r5]
	movw	r3, #:lower16:.LC1022
	movw	r2, #:lower16:.LC929
	ldr	r1, [r5, #24]
	movt	r3, #:upper16:.LC1022
	movt	r2, #:upper16:.LC929
	ldr	r0, .L12718+4
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r5, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L12686
.L12694:
	mvn	r7, #21
.L12687:
	movw	r3, #1410
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L12717
.L12682:
	mov	r0, r7
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12717:
	ldr	r1, [r5, #24]
	movw	r2, #:lower16:.LC930
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC930
	ldr	r0, .L12718+8
	ldr	r1, [r1]
	stm	sp, {r4, r7}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12682
.L12716:
	mov	r0, r8
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L12688
.L12692:
	mvn	r7, #18
	b	.L12682
.L12719:
	.align	2
.L12718:
	.word	.LANCHOR0+2496
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.fnend
	.size	ptp_function_bind_config, .-ptp_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_bind_config, %function
conn_gadget_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC1023
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	ldr	r1, .L12753
	movt	r0, #:upper16:.LC1023
	str	r8, [sp, #16]
	movw	r6, #:lower16:.LANCHOR4
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	movt	r6, #:upper16:.LANCHOR4
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC1024
	movt	r3, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC1024
	ldr	r4, [r3, #2484]
	bl	printk
	ldr	r2, .L12753+4
	movw	r3, #:lower16:conn_gadget_function_bind
	movw	r0, #:lower16:conn_gadget_function_unbind
	movw	r1, #:lower16:conn_gadget_function_set_alt
	movt	r3, #:upper16:conn_gadget_function_bind
	ldr	ip, [r5, #24]
	movt	r0, #:upper16:conn_gadget_function_unbind
	movt	r1, #:upper16:conn_gadget_function_set_alt
	str	r2, [r4, #16]
	str	r3, [r4, #32]
	movw	r3, #:lower16:.LC911
	strd	r0, [r4, #36]
	add	r0, r2, #16
	add	r2, r2, #32
	movt	r3, #:upper16:.LC911
	str	r2, [r4, #12]
	movw	r2, #1386
	str	r3, [r4]
	str	r0, [r4, #8]
	ldrh	r1, [r6, r2]
	movw	r2, #:lower16:conn_gadget_function_disable
	movt	r2, #:upper16:conn_gadget_function_disable
	str	ip, [r4, #84]
	str	r2, [r4, #48]
	tst	r1, #4
	bne	.L12750
.L12721:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L12729
	add	r8, r4, #72
	str	r5, [r4, #20]
	add	r2, r5, #36
	mov	r0, r8
	ldr	r1, [r5, #40]
	bl	__list_add
	ldr	r7, [r4, #32]
	cmp	r7, #0
	beq	.L12723
	mov	r1, r4
	mov	r0, r5
	blx	r7
	subs	r7, r0, #0
	blt	.L12751
.L12723:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L12724
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L12724
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L12724:
	tst	r3, #2
	bne	.L12725
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L12725
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L12725:
	tst	r3, #1
	bne	.L12726
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L12726
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L12726:
	cmp	r7, #0
	bne	.L12722
	b	.L12720
.L12750:
	ldr	ip, [r5]
	movw	r2, #:lower16:.LC929
	ldr	r1, [r5, #24]
	movt	r2, #:upper16:.LC929
	ldr	r0, .L12753+8
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r5, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L12721
.L12729:
	mvn	r7, #21
.L12722:
	movw	r3, #1410
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L12752
.L12720:
	mov	r0, r7
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12752:
	ldr	r1, [r5, #24]
	movw	r2, #:lower16:.LC930
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC930
	ldr	r0, .L12753+12
	ldr	r1, [r1]
	stm	sp, {r4, r7}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12720
.L12751:
	mov	r0, r8
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L12723
.L12754:
	.align	2
.L12753:
	.word	.LANCHOR5-472
	.word	.LANCHOR0+2648
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.fnend
	.size	conn_gadget_function_bind_config, .-conn_gadget_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_open, %function
ncm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #2322
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r4, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L12777
.L12756:
	add	r7, r4, #188
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r6, [r4, #168]
	mov	r3, #1
	mov	r2, #2
	strb	r2, [r4, #172]
	strb	r3, [r4, #173]
	cmp	r6, #0
	beq	.L12758
	ldr	ip, [r4, #20]
	mov	r3, #0
	mov	r2, #16
	ldr	r5, [r6]
	mov	r0, #42
	mov	r1, #8
	ldr	r8, [ip, #24]
	strb	r0, [r5, #1]
	strb	r3, [r5, #2]
	strb	r3, [r5, #3]
	strb	r1, [r5, #6]
	strb	r3, [r5, #7]
	str	r2, [r6, #4]
	ldr	r3, [r8]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	movls	r3, #28672
	movtls	r3, 148
	bhi	.L12778
.L12759:
	ldr	r2, [r6]
	movw	r9, #:lower16:.LANCHOR2
	movw	r1, #546
	movt	r9, #:upper16:.LANCHOR2
	str	r3, [r2, #8]
	str	r3, [r2, #12]
	ldrh	r3, [r9, r1]
	tst	r3, #4
	bne	.L12779
.L12760:
	mov	r1, #1
	mvn	r2, #94
	mov	r3, #0
	mov	r0, r7
	strb	r1, [r4, #172]
	strb	r2, [r5]
	ldrb	r2, [r4, #148]	@ zero_extendqisi2
	strh	r2, [r5, #4]	@ unaligned
	str	r3, [r4, #168]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #164]
	mov	r2, #32
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r5, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	r5, #0
	bge	.L12758
	movw	r3, #570
	str	r6, [r4, #168]
	ldrh	r3, [r9, r3]
	tst	r3, #4
	bne	.L12780
.L12758:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock
.L12778:
	ldr	r1, [r3, #16]
	mov	r2, #0
	mov	r3, #28672
	movt	r2, 6500
	movt	r3, 148
	cmp	r1, #3
	moveq	r3, r2
	b	.L12759
.L12777:
	ldr	r1, [r4, #20]
	movw	r2, #:lower16:.LC82
	add	r0, r3, #2304
	movt	r2, #:upper16:.LC82
	ldr	r3, .L12781
	ldr	r1, [r1, #24]
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12756
.L12780:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC25
	mov	r3, r5
	movt	r2, #:upper16:.LC25
	ldr	r0, .L12781+4
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12758
.L12779:
	ldr	r3, [r8]
	ldr	r2, [r3, #20]
	add	r1, r3, #32
	cmp	r2, #2
	movls	r3, #28672
	movtls	r3, 148
	bls	.L12761
	ldr	r0, [r3, #16]
	mov	r2, #0
	mov	r3, #28672
	movt	r2, 6500
	movt	r3, 148
	cmp	r0, #3
	moveq	r3, r2
.L12761:
	movw	r2, #:lower16:.LC24
	ldr	r0, .L12781+8
	movt	r2, #:upper16:.LC24
	bl	__dynamic_dev_dbg
	b	.L12760
.L12782:
	.align	2
.L12781:
	.word	.LANCHOR5-436
	.word	.LANCHOR2+552
	.word	.LANCHOR2+528
	.fnend
	.size	ncm_open, .-ncm_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_close, %function
ncm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #2346
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r4, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L12805
.L12784:
	add	r7, r4, #188
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r6, [r4, #168]
	mov	r3, #0
	mov	r2, #2
	strb	r2, [r4, #172]
	strb	r3, [r4, #173]
	cmp	r6, r3
	beq	.L12786
	ldr	ip, [r4, #20]
	mov	r2, #16
	mov	r0, #42
	ldr	r5, [r6]
	mov	r1, #8
	ldr	r8, [ip, #24]
	strb	r0, [r5, #1]
	strb	r3, [r5, #2]
	strb	r3, [r5, #3]
	strb	r1, [r5, #6]
	strb	r3, [r5, #7]
	str	r2, [r6, #4]
	ldr	r3, [r8]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	movls	r3, #28672
	movtls	r3, 148
	bhi	.L12806
.L12787:
	ldr	r2, [r6]
	movw	r9, #:lower16:.LANCHOR2
	movw	r1, #546
	movt	r9, #:upper16:.LANCHOR2
	str	r3, [r2, #8]
	str	r3, [r2, #12]
	ldrh	r3, [r9, r1]
	tst	r3, #4
	bne	.L12807
.L12788:
	mov	r1, #1
	mvn	r2, #94
	mov	r3, #0
	mov	r0, r7
	strb	r1, [r4, #172]
	strb	r2, [r5]
	ldrb	r2, [r4, #148]	@ zero_extendqisi2
	strh	r2, [r5, #4]	@ unaligned
	str	r3, [r4, #168]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #164]
	mov	r2, #32
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r5, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	r5, #0
	bge	.L12786
	movw	r3, #570
	str	r6, [r4, #168]
	ldrh	r3, [r9, r3]
	tst	r3, #4
	bne	.L12808
.L12786:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock
.L12806:
	ldr	r1, [r3, #16]
	mov	r2, #0
	mov	r3, #28672
	movt	r2, 6500
	movt	r3, 148
	cmp	r1, #3
	moveq	r3, r2
	b	.L12787
.L12805:
	ldr	r1, [r4, #20]
	movw	r2, #:lower16:.LC82
	movt	r2, #:upper16:.LC82
	ldr	r3, .L12809
	ldr	r0, .L12809+4
	ldr	r1, [r1, #24]
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12784
.L12808:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC25
	mov	r3, r5
	movt	r2, #:upper16:.LC25
	ldr	r0, .L12809+8
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12786
.L12807:
	ldr	r3, [r8]
	ldr	r2, [r3, #20]
	add	r1, r3, #32
	cmp	r2, #2
	movls	r3, #28672
	movtls	r3, 148
	bls	.L12789
	ldr	r0, [r3, #16]
	mov	r2, #0
	mov	r3, #28672
	movt	r2, 6500
	movt	r3, 148
	cmp	r0, #3
	moveq	r3, r2
.L12789:
	movw	r2, #:lower16:.LC24
	ldr	r0, .L12809+12
	movt	r2, #:upper16:.LC24
	bl	__dynamic_dev_dbg
	b	.L12788
.L12810:
	.align	2
.L12809:
	.word	.LANCHOR5-424
	.word	.LANCHOR4+2328
	.word	.LANCHOR2+552
	.word	.LANCHOR2+528
	.fnend
	.size	ncm_close, .-ncm_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_bind_config, %function
ffs_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r2, [r0, #4]
	.pad #20
	sub	sp, sp, #20
	ldr	r0, [r3, #28]
	ldr	r7, [r1, #24]
	ldr	r5, [r2, #4]
	cmp	r0, #0
	beq	.L12828
	mov	r2, #120
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	mvneq	r7, #11
	bne	.L12812
.L12811:
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L12828:
	mov	r4, #16
.L12812:
	movw	r3, #:lower16:.LC1025
	movw	r1, #:lower16:ffs_func_bind
	movt	r3, #:upper16:.LC1025
	movw	r2, #:lower16:ffs_func_set_alt
	movt	r1, #:upper16:ffs_func_bind
	movt	r2, #:upper16:ffs_func_set_alt
	str	r3, [r4, #36]
	movw	r3, #:lower16:ffs_func_unbind
	ldr	ip, [r5, #188]
	movt	r3, #:upper16:ffs_func_unbind
	movw	r0, #:lower16:ffs_func_disable
	str	r6, [r4]
	str	r1, [r4, #68]
	movw	r1, #:lower16:ffs_func_setup
	movt	r0, #:upper16:ffs_func_disable
	str	r2, [r4, #76]
	movw	r2, #:lower16:ffs_func_resume
	movt	r1, #:upper16:ffs_func_setup
	str	r3, [r4, #72]
	movw	r3, #:lower16:ffs_func_suspend
	movt	r2, #:upper16:ffs_func_resume
	movt	r3, #:upper16:ffs_func_suspend
	str	ip, [r4, #40]
	str	r0, [r4, #84]
	str	r1, [r4, #88]
	str	r3, [r4, #92]
	add	r3, r5, #84
	str	r2, [r4, #96]
	ldr	r2, [r7]
	stmib	r4, {r2, r5}
	.syntax divided
@ 45 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #1386
	movt	r5, #:upper16:.LANCHOR4
	add	r8, r4, #36
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L12861
.L12814:
	ldr	r3, [r4, #76]
	cmp	r3, #0
	beq	.L12818
	ldr	r3, [r4, #84]
	cmp	r3, #0
	beq	.L12818
	add	r9, r4, #108
	str	r6, [r4, #56]
	add	r2, r6, #36
	mov	r0, r9
	ldr	r1, [r6, #40]
	bl	__list_add
	ldr	r7, [r4, #68]
	cmp	r7, #0
	beq	.L12819
	mov	r1, r8
	mov	r0, r6
	blx	r7
	subs	r7, r0, #0
	blt	.L12862
.L12819:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L12820
	ldr	r2, [r4, #52]
	cmp	r2, #0
	beq	.L12820
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r6, #45]
.L12820:
	tst	r3, #2
	bne	.L12821
	ldr	r2, [r4, #44]
	cmp	r2, #0
	beq	.L12821
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r6, #45]
.L12821:
	tst	r3, #1
	bne	.L12822
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L12822
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #45]
.L12822:
	cmp	r7, #0
	beq	.L12811
	movw	r3, #1410
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L12817
	b	.L12816
.L12818:
	movw	r3, #1410
	mvn	r7, #21
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L12817
.L12816:
	ldr	r1, [r6, #24]
	movw	r2, #:lower16:.LC930
	ldr	r3, [r4, #36]
	movt	r2, #:upper16:.LC930
	ldr	r0, .L12864
	ldr	r1, [r1]
	str	r8, [sp]
	str	r7, [sp, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L12817:
	ldr	r3, [r4, #8]
	mov	r8, #0
	ldr	r5, [r4, #12]
	add	r0, r3, #24
	ldrh	r6, [r3, #180]
	bl	_raw_spin_lock_irqsave
	add	r5, r5, #28
	mov	r9, r0
.L12824:
	ldr	r0, [r5, #-28]
	cmp	r0, #0
	beq	.L12823
	ldr	r1, [r5, #-24]
	cmp	r1, #0
	beq	.L12823
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L12823:
	subs	r6, r6, #1
	str	r8, [r5, #-28]
	add	r5, r5, #28
	str	r8, [r5, #-52]
	bne	.L12824
	ldr	r0, [r4, #8]
	mov	r1, r9
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	ldr	r5, [r4, #8]
	add	r3, r5, #84
	.syntax divided
@ 99 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L12863
.L12825:
	ldr	r0, [r4, #12]
	bl	kfree
	mov	r0, r4
	bl	kfree
	b	.L12811
.L12861:
	ldr	ip, [r6]
	movw	r2, #:lower16:.LC929
	ldr	r1, [r6, #24]
	movt	r2, #:upper16:.LC929
	ldr	r3, [r4, #36]
	ldr	r0, .L12864+4
	ldr	r1, [r1]
	stm	sp, {r8, ip}
	str	r6, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12814
.L12862:
	mov	r0, r9
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #56]
	b	.L12819
.L12863:
	movw	r0, #:lower16:.LC997
	ldr	r1, .L12864+8
	movt	r0, #:upper16:.LC997
	bl	printk
	mov	r0, r5
	bl	ffs_data_clear
	ldr	r2, [r5, #120]
	add	r3, r5, #120
	cmp	r2, r3
	bne	.L12826
	ldr	r2, [r5, #40]
	add	r3, r5, #40
	cmp	r2, r3
	bne	.L12826
	mov	r0, r5
	bl	kfree
	b	.L12825
.L12826:
	.syntax divided
@ 1345 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1346, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L12865:
	.align	2
.L12864:
	.word	.LANCHOR4+1392
	.word	.LANCHOR4+1368
	.word	.LANCHOR5-544
	.fnend
	.size	ffs_function_bind_config, .-ffs_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_function_bind_config, %function
mbim_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r3, #2370
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR4
	mov	r7, r1
	movt	r6, #:upper16:.LANCHOR4
	strd	r8, [sp, #16]
	ldrh	r3, [r6, r3]
	str	lr, [sp, #24]
	.pad #20
	sub	sp, sp, #20
	tst	r3, #4
	bne	.L12923
.L12867:
	ldr	r0, .L12933
	movw	r4, #:lower16:.LANCHOR1
	bl	strim
	mov	r8, r0
	movw	r0, #:lower16:.LC1027
	ldr	r1, .L12933+4
	movt	r0, #:upper16:.LC1027
	mov	r2, #0
	movt	r4, #:upper16:.LANCHOR1
	bl	printk
	ldr	r5, [r4, #3616]
	cmp	r5, #0
	beq	.L12924
	movw	r0, #:lower16:.LC1029
	mov	r2, r5
	ldr	r1, .L12933+8
	movt	r0, #:upper16:.LC1029
	bl	printk
	movw	r3, #2394
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L12925
.L12870:
	cmp	r5, #1
	bne	.L12926
	ldr	r3, [r4, #3744]
	cmp	r3, #0
	beq	.L12873
	movw	r3, #2418
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L12927
.L12875:
	movw	r0, #:lower16:.LC612
	movw	r5, #:lower16:.LANCHOR0
	ldr	r1, .L12933+8
	movt	r0, #:upper16:.LC612
	mov	r2, #1
	movt	r5, #:upper16:.LANCHOR0
	bl	printk
	ldrb	r3, [r5, #2704]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L12928
.L12876:
	ldr	r4, [r4, #3620]
	cmp	r4, #0
	beq	.L12929
	ldr	lr, .L12933+12
	movw	r2, #:lower16:.LC1036
	movw	r3, #:lower16:mbim_unbind
	movt	r2, #:upper16:.LC1036
	movt	r3, #:upper16:mbim_unbind
	mov	r0, r8
	movw	r1, #:lower16:mbim_bind
	ldr	r8, [r7, #24]
	str	r3, [r4, #36]
	movw	r3, #:lower16:mbim_setup
	movt	r1, #:upper16:mbim_bind
	add	r9, lr, #964
	movt	r3, #:upper16:mbim_setup
	movw	ip, #:lower16:mbim_get_alt
	stm	r4, {r2, r9}
	movw	r2, #:lower16:mbim_set_alt
	movt	ip, #:upper16:mbim_get_alt
	movt	r2, #:upper16:mbim_set_alt
	str	r1, [r4, #32]
	movw	r1, #:lower16:mbim_disable
	movt	r1, #:upper16:mbim_disable
	str	r2, [r4, #40]
	movw	r2, #:lower16:mbim_suspend
	str	r3, [r4, #52]
	movw	r3, #:lower16:mbim_resume
	movt	r2, #:upper16:mbim_suspend
	movt	r3, #:upper16:mbim_resume
	str	ip, [r4, #44]
	str	r1, [r4, #48]
	mov	r1, #16384
	strd	r2, [r4, #56]
	mov	r2, #0
	str	r8, [r4, #84]
	str	r2, [r4, #88]
	str	lr, [r4, #200]
	str	r1, [r4, #224]
	bl	str_to_xport
	cmp	r0, #7
	str	r0, [r4, #132]
	beq	.L12880
	mov	r3, #6
	str	r3, [r4, #132]
.L12881:
	movw	r3, #1386
	add	r2, r4, #208
	ldrh	r1, [r6, r3]
	add	r3, r4, #216
	str	r2, [r4, #208]
	strd	r2, [r4, #212]
	str	r3, [r4, #220]
	tst	r1, #4
	bne	.L12930
.L12882:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L12890
	add	r8, r4, #72
	str	r7, [r4, #20]
	add	r2, r7, #36
	mov	r0, r8
	ldr	r1, [r7, #40]
	bl	__list_add
	ldr	r5, [r4, #32]
	cmp	r5, #0
	beq	.L12884
	mov	r1, r4
	mov	r0, r7
	blx	r5
	subs	r5, r0, #0
	blt	.L12931
.L12884:
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L12885
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L12885
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r7, #45]
.L12885:
	tst	r3, #2
	bne	.L12886
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L12886
	ldrb	r2, [r7, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r7, #45]
.L12886:
	tst	r3, #1
	bne	.L12887
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L12887
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r7, #45]
.L12887:
	cmp	r5, #0
	bne	.L12883
	b	.L12888
.L12928:
	ldr	r2, [r7, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L12878
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r7, #24]
	strb	r3, [r5, #2704]
	strb	r3, [r5, #2736]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L12878
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	strb	r3, [r5, #2712]
	strb	r3, [r5, #2748]
	strb	r3, [r5, #2760]
	b	.L12876
.L12930:
	ldr	ip, [r7]
	movw	r2, #:lower16:.LC929
	ldr	r1, [r7, #24]
	movt	r2, #:upper16:.LC929
	ldr	r3, [r4]
	ldr	r0, .L12933+16
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r7, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L12882
.L12890:
	mvn	r5, #21
.L12883:
	movw	r3, #1410
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L12932
.L12888:
	movw	r0, #:lower16:.LC1037
	mov	r2, r5
	ldr	r1, .L12933+4
	movt	r0, #:upper16:.LC1037
	bl	printk
.L12866:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L12880:
	mov	r3, #8192
	mov	r2, #16
	mov	r1, #1
	str	r3, [r5, #200]
	strh	r1, [r5, #204]	@ movhi
	str	r3, [r5, #212]
	strh	r2, [r5, #222]	@ movhi
	b	.L12881
.L12873:
	bl	bam_data_setup.part.92
	subs	r5, r0, #0
	beq	.L12875
.L12872:
	movw	r0, #:lower16:.LC1033
	mov	r2, r5
	ldr	r1, .L12933+8
	movt	r0, #:upper16:.LC1033
	bl	printk
	movw	r0, #:lower16:.LC1034
	ldr	r1, .L12933+4
	movt	r0, #:upper16:.LC1034
	bl	printk
	b	.L12866
.L12923:
	ldr	r2, .L12933
	movw	r1, #:lower16:.LC1026
	add	r0, r6, #2352
	ldr	r3, .L12933+20
	movt	r1, #:upper16:.LC1026
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L12867
.L12925:
	movw	r1, #:lower16:.LC1030
	mov	r3, r5
	ldr	r2, .L12933+24
	movt	r1, #:upper16:.LC1030
	ldr	r0, .L12933+28
	bl	__dynamic_pr_debug
	b	.L12870
.L12927:
	movw	r1, #:lower16:.LC1032
	ldr	r2, .L12933+24
	movt	r1, #:upper16:.LC1032
	ldr	r0, .L12933+32
	bl	__dynamic_pr_debug
	b	.L12875
.L12932:
	ldr	r1, [r7, #24]
	movw	r2, #:lower16:.LC930
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC930
	ldr	r0, .L12933+36
	ldr	r1, [r1]
	strd	r4, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12888
.L12931:
	mov	r0, r8
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L12884
.L12878:
	mvn	r5, #18
	b	.L12866
.L12929:
	movw	r0, #:lower16:.LC1035
	ldr	r1, .L12933+4
	mvn	r5, #11
	movt	r0, #:upper16:.LC1035
	bl	printk
	b	.L12866
.L12926:
	movw	r0, #:lower16:.LC1031
	mov	r2, r5
	ldr	r1, .L12933+24
	movt	r0, #:upper16:.LC1031
	mvn	r5, #21
	bl	printk
	b	.L12872
.L12924:
	movw	r0, #:lower16:.LC1028
	mov	r3, r5
	ldr	r1, .L12933+4
	mov	r2, r5
	movt	r0, #:upper16:.LC1028
	bl	printk
	mvn	r5, #18
	b	.L12866
.L12934:
	.align	2
.L12933:
	.word	.LANCHOR1+3176
	.word	.LANCHOR5-384
	.word	.LANCHOR5-364
	.word	.LANCHOR0+1800
	.word	.LANCHOR4+1368
	.word	.LANCHOR5-412
	.word	.LANCHOR5-3432
	.word	.LANCHOR4+2376
	.word	.LANCHOR4+2400
	.word	.LANCHOR4+1392
	.fnend
	.size	mbim_function_bind_config, .-mbim_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_function_bind_config, %function
mass_storage_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r2, [r3, #2772]	@ zero_extendqisi2
	.pad #16
	sub	sp, sp, #16
	ldr	r0, [r0, #4]
	cmp	r2, #0
	ldr	r6, [r0, #96]
	bne	.L12936
	ldr	r0, [r1, #24]
	ldrb	r2, [r0, #48]	@ zero_extendqisi2
	cmp	r2, #253
	mvnhi	r6, #18
	bhi	.L12935
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r0, #48]
	strb	r2, [r3, #2772]
	strb	r2, [r3, #2796]
.L12936:
	movw	r3, #:lower16:kmalloc_caches
	mov	r5, r1
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L12950
	mov	r2, #108
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	mvneq	r6, #11
	bne	.L12938
.L12935:
	mov	r0, r6
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12950:
	mov	r4, #16
.L12938:
	ldr	ip, .L12975
	movw	r0, #:lower16:fsg_bind
	movw	r1, #:lower16:fsg_unbind
	movt	r0, #:upper16:fsg_bind
	movt	r1, #:upper16:fsg_unbind
	movw	r3, #:lower16:.LC1038
	movw	r2, #:lower16:fsg_set_alt
	movt	r2, #:upper16:fsg_set_alt
	movt	r3, #:upper16:.LC1038
	str	r6, [r4, #88]
	movw	r7, #:lower16:.LANCHOR4
	strd	r0, [r4, #32]
	movt	r7, #:upper16:.LANCHOR4
	movw	r0, #1386
	stm	r4, {r3, ip}
	movw	r1, #:lower16:fsg_setup
	str	r2, [r4, #40]
	ldrh	r0, [r7, r0]
	movw	r2, #:lower16:fsg_disable
	movt	r1, #:upper16:fsg_setup
	movt	r2, #:upper16:fsg_disable
	str	r2, [r4, #48]
	tst	r0, #4
	str	r1, [r4, #52]
	bne	.L12973
.L12939:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L12942
	add	r8, r4, #72
	str	r5, [r4, #20]
	add	r2, r5, #36
	mov	r0, r8
	ldr	r1, [r5, #40]
	bl	__list_add
	ldr	r6, [r4, #32]
	cmp	r6, #0
	beq	.L12943
	mov	r1, r4
	mov	r0, r5
	blx	r6
	subs	r6, r0, #0
	blt	.L12974
.L12943:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L12944
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L12944
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L12944:
	tst	r3, #2
	bne	.L12945
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L12945
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L12945:
	tst	r3, #1
	bne	.L12946
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L12946
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L12946:
	cmp	r6, #0
	beq	.L12947
	movw	r3, #1410
	ldrh	r3, [r7, r3]
	tst	r3, #4
	beq	.L12941
	b	.L12940
.L12973:
	ldr	ip, [r5]
	movw	r2, #:lower16:.LC929
	ldr	r1, [r5, #24]
	movt	r2, #:upper16:.LC929
	ldr	r0, .L12975+4
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r5, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L12939
.L12942:
	movw	r3, #1410
	mvn	r6, #21
	ldrh	r3, [r7, r3]
	tst	r3, #4
	beq	.L12941
.L12940:
	ldr	r1, [r5, #24]
	movw	r2, #:lower16:.LC930
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC930
	ldr	r0, .L12975+8
	ldr	r1, [r1]
	stm	sp, {r4, r6}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L12941:
	mov	r0, r4
	bl	kfree
	b	.L12935
.L12947:
	ldr	r3, [r4, #88]
	add	r2, r3, #336
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #1
	bgt	.L12935
	movw	r4, #:lower16:.LANCHOR6
	movt	r4, #:upper16:.LANCHOR6
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L12935
	movw	r0, #:lower16:.LC1039
	mov	r1, #47
	movt	r0, #:upper16:.LC1039
	bl	warn_slowpath_null
	mov	r3, #1
	strb	r3, [r4]
	b	.L12935
.L12974:
	mov	r0, r8
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L12943
.L12976:
	.align	2
.L12975:
	.word	.LANCHOR0+2800
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.fnend
	.size	mass_storage_function_bind_config, .-mass_storage_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_function_bind_config, %function
rmnet_sdio_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r0, [r3, #36]
	.pad #20
	sub	sp, sp, #20
	cmp	r0, #0
	beq	.L12991
	mov	r2, #376
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L13016
.L12978:
	movw	r2, #:lower16:.LC1040
	mov	r5, #0
	movt	r2, #:upper16:.LC1040
	mov	r1, #10
	movw	r0, #:lower16:.LC84
	mov	r3, r5
	str	r5, [sp]
	str	r2, [sp, #4]
	movt	r1, 2
	movt	r0, #:upper16:.LC84
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #200]
	beq	.L12993
	movw	r0, #:lower16:rmnet_sdio_disconnect_work
	add	r8, r4, #208
	str	r5, [r4, #188]
	add	lr, r4, #224
	movt	r0, #:upper16:rmnet_sdio_disconnect_work
	str	r5, [r4, #192]
	mov	r6, #65024
	movw	ip, #:lower16:rmnet_sdio_set_modem_cbits_w
	str	r5, [r4, #196]
	movw	r2, #:lower16:rmnet_sdio_control_rx_work
	movw	r3, #:lower16:rmnet_sdio_data_rx_work
	str	r8, [r4, #208]
	movw	r1, #:lower16:rmnet_open_sdio_work
	movt	r6, 65535
	str	r8, [r4, #212]
	movt	ip, #:upper16:rmnet_sdio_set_modem_cbits_w
	add	r8, r4, #240
	movt	r2, #:upper16:rmnet_sdio_control_rx_work
	movt	r3, #:upper16:rmnet_sdio_data_rx_work
	str	r6, [r4, #204]
	movt	r1, #:upper16:rmnet_open_sdio_work
	str	r0, [r4, #216]
	add	r0, r4, #340
	str	lr, [r4, #224]
	movw	r9, #:lower16:rmnet_sdio_bind
	str	lr, [r4, #228]
	add	lr, r4, #256
	movt	r9, #:upper16:rmnet_sdio_bind
	str	r6, [r4, #220]
	str	r2, [r4, #232]
	mov	r2, r5
	str	r6, [r4, #236]
	str	r8, [r4, #240]
	str	r8, [r4, #244]
	movw	r8, #:lower16:.LANCHOR4
	str	r3, [r4, #248]
	mov	r3, r5
	movt	r8, #:upper16:.LANCHOR4
	str	r6, [r4, #252]
	str	lr, [r4, #256]
	str	lr, [r4, #260]
	str	r1, [r4, #264]
	mov	r1, r5
	str	r6, [r4, #336]
	str	r0, [r4, #340]
	str	r0, [r4, #344]
	add	r0, r4, #268
	str	ip, [r4, #348]
	bl	init_timer_key
	movw	lr, #:lower16:rmnet_sdio_unbind
	movw	ip, #:lower16:rmnet_sdio_setup
	ldr	r2, .L13019
	movt	lr, #:upper16:rmnet_sdio_unbind
	movt	ip, #:upper16:rmnet_sdio_setup
	movw	r0, #:lower16:delayed_work_timer_fn
	movw	r1, #:lower16:rmnet_close_sdio_work
	movw	r3, #:lower16:.LC1041
	movt	r0, #:upper16:delayed_work_timer_fn
	str	lr, [r4, #36]
	movw	lr, #:lower16:rmnet_sdio_disable
	movt	r1, #:upper16:rmnet_close_sdio_work
	str	ip, [r4, #52]
	movt	lr, #:upper16:rmnet_sdio_disable
	movw	ip, #:lower16:rmnet_sdio_suspend
	movt	ip, #:upper16:rmnet_sdio_suspend
	str	r2, [r4, #4]
	movt	r3, #:upper16:.LC1041
	str	r9, [r4, #32]
	movw	r9, #:lower16:rmnet_sdio_set_alt
	str	lr, [r4, #48]
	add	lr, r2, #8
	movt	r9, #:upper16:rmnet_sdio_set_alt
	add	r2, r2, #28
	str	r3, [r4]
	str	ip, [r4, #56]
	add	ip, r4, #108
	str	r2, [r4, #8]
	add	r2, r4, #308
	str	lr, [r4, #16]
	add	lr, r4, #120
	str	r9, [r4, #40]
	add	r9, r4, #252
	str	ip, [r4, #108]
	str	ip, [r4, #112]
	add	ip, r4, #160
	str	lr, [r4, #120]
	str	lr, [r4, #124]
	add	lr, r4, #132
	str	ip, [r4, #160]
	str	ip, [r4, #164]
	add	ip, r4, #172
	str	lr, [r4, #132]
	str	lr, [r4, #136]
	add	lr, r4, #144
	str	r5, [r4, #152]
	str	ip, [r4, #172]
	str	ip, [r4, #176]
	movw	ip, #1386
	str	lr, [r4, #144]
	str	lr, [r4, #148]
	str	r5, [r4, #156]
	str	r5, [r4, #180]
	str	r5, [r4, #184]
	str	r0, [r4, #284]
	str	r9, [r4, #288]
	str	r6, [r4, #304]
	str	r2, [r4, #308]
	str	r2, [r4, #312]
	str	r1, [r4, #316]
	ldrh	r2, [r8, ip]
	tst	r2, #4
	bne	.L13017
.L12981:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L12984
	add	r6, r4, #72
	str	r7, [r4, #20]
	add	r2, r7, #36
	mov	r0, r6
	ldr	r1, [r7, #40]
	bl	__list_add
	ldr	r5, [r4, #32]
	cmp	r5, #0
	beq	.L12985
	mov	r1, r4
	mov	r0, r7
	blx	r5
	subs	r5, r0, #0
	blt	.L13018
.L12985:
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L12986
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L12986
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r7, #45]
.L12986:
	tst	r3, #2
	bne	.L12987
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L12987
	ldrb	r2, [r7, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r7, #45]
.L12987:
	tst	r3, #1
	bne	.L12988
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L12988
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r7, #45]
.L12988:
	cmp	r5, #0
	beq	.L12989
	movw	r3, #1410
	ldrh	r3, [r8, r3]
	tst	r3, #4
	beq	.L12983
	b	.L12982
.L13017:
	ldr	ip, [r7]
	movw	r2, #:lower16:.LC929
	ldr	r1, [r7, #24]
	movt	r2, #:upper16:.LC929
	ldr	r0, .L13019+4
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r7, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, r5
	bne	.L12981
.L12984:
	movw	r3, #1410
	mvn	r5, #21
	ldrh	r3, [r8, r3]
	tst	r3, #4
	beq	.L12983
.L12982:
	ldr	r1, [r7, #24]
	movw	r2, #:lower16:.LC930
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC930
	ldr	r0, .L13019+8
	ldr	r1, [r1]
	strd	r4, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L12983:
	ldr	r0, [r4, #200]
	bl	destroy_workqueue
.L12980:
	mov	r0, r4
	bl	kfree
.L12977:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L12989:
	movw	r0, #:lower16:.LC1042
	mov	r1, r5
	movt	r0, #:upper16:.LC1042
	bl	debugfs_create_dir
	cmn	r0, #4096
	mov	r2, r0
	str	r0, [r4, #352]
	bhi	.L12977
	ldr	ip, .L13019+12
	movw	r0, #:lower16:.LC250
	mov	r3, r4
	mov	r1, #292
	movt	r0, #:upper16:.LC250
	str	ip, [sp]
	bl	debugfs_create_file
	b	.L12977
.L12991:
	mov	r4, #16
	b	.L12978
.L12993:
	mvn	r5, #11
	b	.L12980
.L13018:
	mov	r0, r6
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L12985
.L13016:
	mvn	r5, #11
	b	.L12977
.L13020:
	.align	2
.L13019:
	.word	.LANCHOR0+2808
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.word	.LANCHOR5-348
	.fnend
	.size	rmnet_sdio_function_bind_config, .-rmnet_sdio_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_open, %function
ecm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #2442
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r4, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r3, r2]
	ldr	r2, [r0, #20]
	tst	r3, #4
	bne	.L13039
.L13022:
	ldr	r6, [r4, #168]
	mov	r3, #1
	strb	r3, [r4, #172]
	strb	r3, [r4, #173]
	cmp	r6, #0
	beq	.L13021
	ldr	r5, [r6]
	mov	r3, #0
	mov	r1, #8
	ldr	r8, [r2, #24]
	movw	r7, #:lower16:.LANCHOR2
	movw	r2, #378
	movt	r7, #:upper16:.LANCHOR2
	strb	r3, [r5, #1]
	ldrb	r0, [r4, #173]	@ zero_extendqisi2
	strh	r0, [r5, #2]	@ unaligned
	strb	r3, [r5, #6]
	strb	r3, [r5, #7]
	str	r1, [r6, #4]
	ldrh	r3, [r7, r2]
	tst	r3, #4
	bne	.L13040
.L13025:
	mov	r1, #2
	mvn	r0, #94
	mov	r3, #0
	mov	r2, #32
	strb	r1, [r4, #172]
	mov	r1, r6
	strb	r0, [r5]
	ldrb	r0, [r4, #148]	@ zero_extendqisi2
	strh	r0, [r5, #4]	@ unaligned
	ldr	r0, [r4, #164]
	str	r3, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L13041
.L13021:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13041:
	movw	r3, #426
	str	r6, [r4, #168]
	ldrh	r3, [r7, r3]
	tst	r3, #4
	beq	.L13021
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC25
	mov	r3, r0
	ldrd	r4, [sp]
	movt	r2, #:upper16:.LC25
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r1, r1, #32
	add	sp, sp, #24
	ldr	r0, .L13042
	b	__dynamic_dev_dbg
.L13039:
	ldr	r1, [r2, #24]
	movw	r2, #:lower16:.LC82
	movt	r2, #:upper16:.LC82
	ldr	r3, .L13042+4
	ldr	r0, .L13042+8
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r2, [r4, #20]
	b	.L13022
.L13040:
	ldrb	lr, [r4, #173]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC20
	movw	r3, #:lower16:.LC21
	ldr	r1, [r8]
	movt	ip, #:upper16:.LC20
	movw	r2, #:lower16:.LC23
	movt	r3, #:upper16:.LC21
	add	r0, r7, #360
	movt	r2, #:upper16:.LC23
	cmp	lr, #0
	movne	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L13025
.L13043:
	.align	2
.L13042:
	.word	.LANCHOR2+408
	.word	.LANCHOR5-240
	.word	.LANCHOR4+2424
	.fnend
	.size	ecm_open, .-ecm_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_close, %function
ecm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #2466
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r4, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, r2]
	ldr	r1, [r0, #20]
	tst	r2, #4
	bne	.L13062
.L13045:
	ldr	r6, [r4, #168]
	mov	r3, #0
	mov	r2, #1
	strb	r2, [r4, #172]
	strb	r3, [r4, #173]
	cmp	r6, r3
	beq	.L13044
	ldr	r5, [r6]
	mov	r0, #8
	movw	r7, #:lower16:.LANCHOR2
	ldr	r8, [r1, #24]
	movt	r7, #:upper16:.LANCHOR2
	movw	r2, #378
	strb	r3, [r5, #1]
	ldrb	r1, [r4, #173]	@ zero_extendqisi2
	strh	r1, [r5, #2]	@ unaligned
	strb	r3, [r5, #6]
	strb	r3, [r5, #7]
	str	r0, [r6, #4]
	ldrh	r3, [r7, r2]
	tst	r3, #4
	bne	.L13063
.L13048:
	mov	r1, #2
	mvn	r0, #94
	mov	r3, #0
	mov	r2, #32
	strb	r1, [r4, #172]
	mov	r1, r6
	strb	r0, [r5]
	ldrb	r0, [r4, #148]	@ zero_extendqisi2
	strh	r0, [r5, #4]	@ unaligned
	ldr	r0, [r4, #164]
	str	r3, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L13064
.L13044:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13064:
	movw	r3, #426
	str	r6, [r4, #168]
	ldrh	r3, [r7, r3]
	tst	r3, #4
	beq	.L13044
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC25
	mov	r3, r0
	ldrd	r4, [sp]
	movt	r2, #:upper16:.LC25
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r1, r1, #32
	add	sp, sp, #24
	ldr	r0, .L13065
	b	__dynamic_dev_dbg
.L13062:
	ldr	r1, [r1, #24]
	movw	r2, #:lower16:.LC82
	add	r0, r3, #2448
	movt	r2, #:upper16:.LC82
	ldr	r3, .L13065+4
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r1, [r4, #20]
	b	.L13045
.L13063:
	ldrb	lr, [r4, #173]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC20
	movw	r3, #:lower16:.LC21
	ldr	r1, [r8]
	movt	ip, #:upper16:.LC20
	movw	r2, #:lower16:.LC23
	movt	r3, #:upper16:.LC21
	add	r0, r7, #360
	movt	r2, #:upper16:.LC23
	cmp	lr, #0
	movne	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L13048
.L13066:
	.align	2
.L13065:
	.word	.LANCHOR2+408
	.word	.LANCHOR5-228
	.fnend
	.size	ecm_close, .-ecm_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_open, %function
ecm_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #2490
	movt	r5, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r4, r0
	ldrh	r3, [r5, r3]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r0, #20]
	tst	r3, #4
	bne	.L13085
.L13068:
	ldr	r7, [r4, #148]
	mov	r3, #1
	strb	r3, [r4, #152]
	strb	r3, [r4, #153]
	cmp	r7, #0
	beq	.L13067
	ldr	r6, [r7]
	mov	r3, #0
	mov	r1, #8
	ldr	r8, [r2, #24]
	movw	r2, #2514
	strb	r3, [r6, #1]
	ldrb	r0, [r4, #153]	@ zero_extendqisi2
	strh	r0, [r6, #2]	@ unaligned
	strb	r3, [r6, #6]
	strb	r3, [r6, #7]
	str	r1, [r7, #4]
	ldrh	r3, [r5, r2]
	tst	r3, #4
	bne	.L13086
.L13071:
	mov	r1, #2
	mvn	r0, #94
	mov	r3, #0
	mov	r2, #32
	strb	r1, [r4, #152]
	mov	r1, r7
	strb	r0, [r6]
	ldrb	r0, [r4, #120]	@ zero_extendqisi2
	strh	r0, [r6, #4]	@ unaligned
	ldr	r0, [r4, #144]
	str	r3, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L13087
.L13067:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13087:
	movw	r3, #2538
	str	r7, [r4, #148]
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L13067
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC25
	mov	r3, r0
	ldrd	r4, [sp]
	movt	r2, #:upper16:.LC25
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r1, r1, #32
	add	sp, sp, #24
	ldr	r0, .L13088
	b	__dynamic_dev_dbg
.L13085:
	ldr	r1, [r2, #24]
	movw	r2, #:lower16:.LC82
	movt	r2, #:upper16:.LC82
	ldr	r3, .L13088+4
	ldr	r0, .L13088+8
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r2, [r4, #20]
	b	.L13068
.L13086:
	ldrb	lr, [r4, #153]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC20
	movw	r3, #:lower16:.LC21
	ldr	r1, [r8]
	movt	ip, #:upper16:.LC20
	movw	r2, #:lower16:.LC23
	movt	r3, #:upper16:.LC21
	movt	r2, #:upper16:.LC23
	ldr	r0, .L13088+12
	cmp	lr, #0
	movne	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L13071
.L13089:
	.align	2
.L13088:
	.word	.LANCHOR4+2520
	.word	.LANCHOR5-216
	.word	.LANCHOR4+2472
	.word	.LANCHOR4+2496
	.fnend
	.size	ecm_qc_open, .-ecm_qc_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_close, %function
ecm_qc_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #2562
	movt	r5, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r4, r0
	ldrh	r3, [r5, r3]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r0, #20]
	tst	r3, #4
	bne	.L13108
.L13091:
	ldr	r7, [r4, #148]
	mov	r3, #0
	mov	r2, #1
	strb	r2, [r4, #152]
	strb	r3, [r4, #153]
	cmp	r7, r3
	beq	.L13090
	ldr	r6, [r7]
	mov	r0, #8
	movw	r2, #2514
	ldr	r8, [r1, #24]
	strb	r3, [r6, #1]
	ldrb	r1, [r4, #153]	@ zero_extendqisi2
	strh	r1, [r6, #2]	@ unaligned
	strb	r3, [r6, #6]
	strb	r3, [r6, #7]
	str	r0, [r7, #4]
	ldrh	r3, [r5, r2]
	tst	r3, #4
	bne	.L13109
.L13094:
	mov	r1, #2
	mvn	r0, #94
	mov	r3, #0
	mov	r2, #32
	strb	r1, [r4, #152]
	mov	r1, r7
	strb	r0, [r6]
	ldrb	r0, [r4, #120]	@ zero_extendqisi2
	strh	r0, [r6, #4]	@ unaligned
	ldr	r0, [r4, #144]
	str	r3, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L13110
.L13090:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13110:
	movw	r3, #2538
	str	r7, [r4, #148]
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L13090
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC25
	mov	r3, r0
	ldrd	r4, [sp]
	movt	r2, #:upper16:.LC25
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r1, r1, #32
	add	sp, sp, #24
	ldr	r0, .L13111
	b	__dynamic_dev_dbg
.L13108:
	ldr	r1, [r1, #24]
	movw	r2, #:lower16:.LC82
	add	r0, r5, #2544
	movt	r2, #:upper16:.LC82
	ldr	r3, .L13111+4
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r1, [r4, #20]
	b	.L13091
.L13109:
	ldrb	lr, [r4, #153]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC20
	movw	r3, #:lower16:.LC21
	ldr	r1, [r8]
	movt	ip, #:upper16:.LC20
	movw	r2, #:lower16:.LC23
	movt	r3, #:upper16:.LC21
	movt	r2, #:upper16:.LC23
	ldr	r0, .L13111+8
	cmp	lr, #0
	movne	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L13094
.L13112:
	.align	2
.L13111:
	.word	.LANCHOR4+2520
	.word	.LANCHOR5-204
	.word	.LANCHOR4+2496
	.fnend
	.size	ecm_qc_close, .-ecm_qc_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_notify_complete, %function
ecm_qc_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r5, [r1, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	ip, [r1, #44]
	ldr	r2, [r5, #20]
	cmn	ip, #104
	beq	.L13115
	cmp	ip, #0
	beq	.L13116
	cmn	ip, #108
	beq	.L13115
	movw	r3, #:lower16:.LANCHOR4
	movw	r1, #2586
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r1]
	tst	r3, #4
	bne	.L13156
.L13116:
	cmp	r4, #0
	str	r4, [r5, #148]
	beq	.L13113
	ldrb	r3, [r5, #152]	@ zero_extendqisi2
	ldr	r7, [r2, #24]
	ldr	r6, [r4]
	cmp	r3, #1
	beq	.L13120
	bcc	.L13113
	cmp	r3, #2
	bne	.L13119
	mov	r3, #0
	mov	r1, #8
	mov	r2, #16
	mov	r0, #42
	strb	r0, [r6, #1]
	strb	r3, [r6, #2]
	strb	r3, [r6, #3]
	strb	r1, [r6, #6]
	strb	r3, [r6, #7]
	ldr	r1, [r4]
	str	r2, [r4, #4]
	ldr	r3, [r7]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	movls	r3, #28672
	movtls	r3, 148
	bls	.L13124
	ldr	r0, [r3, #16]
	mov	r2, #0
	mov	r3, #28672
	movt	r2, 6500
	movt	r3, 148
	cmp	r0, #3
	moveq	r3, r2
.L13124:
	movw	r2, #:lower16:.LANCHOR4
	movw	r0, #2610
	str	r3, [r1, #8]
	movt	r2, #:upper16:.LANCHOR4
	str	r3, [r1, #12]
	ldrh	r3, [r2, r0]
	tst	r3, #4
	bne	.L13157
.L13125:
	mov	r3, #0
	strb	r3, [r5, #152]
.L13119:
	mvn	r0, #94
	mov	r3, #0
	mov	r2, #32
	mov	r1, r4
	strb	r0, [r6]
	ldrb	r0, [r5, #120]	@ zero_extendqisi2
	strh	r0, [r6, #4]	@ unaligned
	ldr	r0, [r5, #144]
	str	r3, [r5, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bge	.L13113
	movw	r2, #:lower16:.LANCHOR4
	movw	r3, #2538
	str	r4, [r5, #148]
	movt	r2, #:upper16:.LANCHOR4
	ldrh	r3, [r2, r3]
	tst	r3, #4
	bne	.L13158
.L13113:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L13115:
	mov	r3, #0
	strb	r3, [r5, #152]
	b	.L13116
.L13120:
	mov	r3, #0
	mov	r2, #8
	movw	r0, #:lower16:.LANCHOR4
	strb	r3, [r6, #1]
	ldrb	r1, [r5, #153]	@ zero_extendqisi2
	movt	r0, #:upper16:.LANCHOR4
	strb	r3, [r6, #6]
	strb	r3, [r6, #7]
	movw	r3, #2514
	strh	r1, [r6, #2]	@ unaligned
	str	r2, [r4, #4]
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L13159
.L13122:
	mov	r3, #2
	strb	r3, [r5, #152]
	b	.L13119
.L13156:
	ldr	r1, [r2, #24]
	movw	r2, #:lower16:.LC22
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC22
	ldr	r0, .L13160
	ldr	r1, [r1]
	ldrb	r3, [r3, #1]	@ zero_extendqisi2
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r2, [r5, #20]
	b	.L13116
.L13158:
	ldr	r1, [r7]
	mov	r3, r0
	movw	r2, #:lower16:.LC25
	ldr	r0, .L13160+4
	movt	r2, #:upper16:.LC25
	add	r1, r1, #32
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	__dynamic_dev_dbg
.L13157:
	ldr	r3, [r7]
	ldr	r2, [r3, #20]
	add	r1, r3, #32
	cmp	r2, #2
	movls	r3, #28672
	movtls	r3, 148
	bls	.L13126
	ldr	r0, [r3, #16]
	mov	r2, #0
	mov	r3, #28672
	movt	r2, 6500
	movt	r3, 148
	cmp	r0, #3
	moveq	r3, r2
.L13126:
	movw	r2, #:lower16:.LC24
	ldr	r0, .L13160+8
	movt	r2, #:upper16:.LC24
	bl	__dynamic_dev_dbg
	b	.L13125
.L13159:
	ldrb	lr, [r5, #153]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC20
	movw	r3, #:lower16:.LC21
	ldr	r1, [r7]
	movt	ip, #:upper16:.LC20
	movw	r2, #:lower16:.LC23
	movt	r3, #:upper16:.LC21
	movt	r2, #:upper16:.LC23
	add	r0, r0, #2496
	cmp	lr, #0
	movne	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L13122
.L13161:
	.align	2
.L13160:
	.word	.LANCHOR4+2568
	.word	.LANCHOR4+2520
	.word	.LANCHOR4+2592
	.fnend
	.size	ecm_qc_notify_complete, .-ecm_qc_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_write, %function
ccid_bulk_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #2634
	mov	r5, r2
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR4
	movt	r7, #:upper16:.LANCHOR4
	strd	r8, [sp, #16]
	mov	r9, r1
	ldrh	r3, [r7, r3]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r4, [r0, #124]
	tst	r3, #4
	bne	.L13212
.L13163:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L13164
	movw	r3, #2658
	ldrh	r3, [r7, r3]
	tst	r3, #4
	mvneq	r5, #18
	bne	.L13213
.L13162:
	mov	r0, r5
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13164:
	cmp	r5, #0
	beq	.L13214
	cmp	r5, #524
	bcs	.L13215
	add	r8, r4, #92
	add	r10, r4, #192
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #192]
	mov	fp, r0
	cmp	r10, r6
	beq	.L13216
	mov	r0, r6
	sub	r6, r6, #36
	bl	list_del
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L13169
.L13170:
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L13217
	mov	r3, sp
	ldr	r0, [r6]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r9, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L13178
	mov	r1, r9
	mov	r2, r5
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L13179
	str	r5, [r6, #4]
	ldr	r0, [r4, #104]
	mov	r2, #208
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L13218
.L13177:
	movw	r3, #2754
	ldrh	r3, [r7, r3]
	tst	r3, #4
	beq	.L13162
	movw	r1, #:lower16:.LC1046
	mov	r2, r5
	ldr	r0, .L13226
	movt	r1, #:upper16:.LC1046
	bl	__dynamic_pr_debug
	b	.L13162
.L13178:
	mov	r1, r5
	bl	__memzero
.L13179:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	bne	.L13181
	movw	r3, #2682
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L13219
.L13182:
	cmp	r6, #0
	mvneq	r5, #18
	beq	.L13177
	ldr	r4, [r4, #104]
	mvn	r5, #18
	ldr	r0, [r6]
	bl	kfree
	mov	r1, r6
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	b	.L13177
.L13213:
	movw	r1, #:lower16:.LC286
	ldr	r2, .L13226+4
	mvn	r5, #18
	movt	r1, #:upper16:.LC286
	ldr	r0, .L13226+8
	bl	__dynamic_pr_debug
	b	.L13162
.L13216:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
.L13169:
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L13191
	mov	r2, sp
	str	r3, [sp, #12]
	add	r1, sp, #24
	bic	fp, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	fp, fp, #63
	add	ip, r4, #172
	ldr	r0, [fp, #12]
	movt	r2, #:upper16:autoremove_wake_function
	str	ip, [sp, #4]
	str	r0, [sp, #16]
	mov	r0, ip
	str	r2, [sp, #20]
	str	r1, [sp, #24]
	str	r1, [sp, #28]
	b	.L13175
.L13221:
	bl	schedule
	ldr	r0, [sp, #4]
.L13175:
	add	r1, sp, #12
	mov	r2, #1
	bl	prepare_to_wait
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #192]
	mov	r1, r0
	cmp	r10, r3
	mov	r0, r3
	sub	r6, r3, #36
	beq	.L13220
	str	r1, [sp]
	bl	list_del
	ldr	r1, [sp]
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	bne	.L13173
.L13172:
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L13192
	ldr	r3, [fp, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L13221
	add	r1, sp, #12
	mov	r5, #65024
	ldr	r0, [sp, #4]
	movt	r5, 65535
	bl	finish_wait
	b	.L13177
.L13218:
	movw	r3, #2706
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L13222
.L13184:
	mov	r3, #1
	mov	r0, r8
	str	r3, [r4, #148]
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	mov	r2, r10
	ldr	r1, [r4, #196]
	add	r0, r6, #36
	bl	__list_add
	mov	r1, r5
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	mov	r9, r0
	cmp	r3, #0
	mvnne	r5, #4
	beq	.L13223
.L13185:
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L13177
.L13212:
	movw	r1, #:lower16:.LC1043
	ldr	r0, .L13226+12
	movt	r1, #:upper16:.LC1043
	bl	__dynamic_pr_debug
	b	.L13163
.L13191:
	mov	r6, #0
	b	.L13170
.L13181:
	mov	r0, r8
	mvn	r5, #13
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	ldr	r1, [r4, #196]
	add	r0, r6, #36
	mov	r2, r10
	bl	__list_add
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L13177
.L13214:
	movw	r0, #:lower16:.LC312
	ldr	r1, .L13226+4
	mvn	r5, #18
	movt	r0, #:upper16:.LC312
	bl	printk
	b	.L13162
.L13223:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #2730
	ldrh	r3, [r7, r3]
	tst	r3, #4
	beq	.L13187
	b	.L13224
.L13188:
	bl	list_del
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L13225
	ldr	fp, [r4, #104]
	ldr	r0, [r5, #-36]
	bl	kfree
	mov	r1, r6
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
.L13187:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #192]
	mov	fp, r0
	cmp	r10, r5
	mov	r0, r5
	sub	r6, r5, #36
	bne	.L13188
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mvn	r5, #18
	b	.L13185
.L13192:
	mov	r6, #0
.L13173:
	add	r1, sp, #12
	ldr	r0, [sp, #4]
	bl	finish_wait
	b	.L13170
.L13220:
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L13172
.L13225:
	mvn	r5, #18
	b	.L13185
.L13222:
	movw	r1, #:lower16:.LC1045
	mov	r2, r0
	ldr	r0, .L13226+16
	movt	r1, #:upper16:.LC1045
	bl	__dynamic_pr_debug
	b	.L13184
.L13224:
	movw	r1, #:lower16:.LC286
	ldr	r2, .L13226+4
	movt	r1, #:upper16:.LC286
	ldr	r0, .L13226+20
	bl	__dynamic_pr_debug
	b	.L13187
.L13219:
	movw	r1, #:lower16:.LC286
	ldr	r2, .L13226+4
	movt	r1, #:upper16:.LC286
	ldr	r0, .L13226+24
	bl	__dynamic_pr_debug
	b	.L13182
.L13217:
	movw	r0, #:lower16:.LC1044
	ldr	r1, .L13226+4
	mvn	r5, #4
	movt	r0, #:upper16:.LC1044
	bl	printk
	b	.L13177
.L13215:
	movw	r0, #:lower16:.LC1005
	mov	r3, r5
	ldr	r1, .L13226+4
	movt	r0, #:upper16:.LC1005
	movw	r2, #523
	bl	printk
	mvn	r5, #11
	b	.L13162
.L13227:
	.align	2
.L13226:
	.word	.LANCHOR4+2736
	.word	.LANCHOR5-188
	.word	.LANCHOR4+2640
	.word	.LANCHOR4+2616
	.word	.LANCHOR4+2688
	.word	.LANCHOR4+2712
	.word	.LANCHOR4+2664
	.fnend
	.size	ccid_bulk_write, .-ccid_bulk_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fmbim_cmd_complete, %function
fmbim_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r8, [r1, #48]
	cmp	r6, #0
	beq	.L13249
	ldr	r2, [r1, #44]
	cmp	r2, #0
	blt	.L13250
	movw	r7, #:lower16:.LANCHOR4
	movw	r3, #2778
	movt	r7, #:upper16:.LANCHOR4
	mov	r5, r1
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L13251
.L13231:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L13237
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L13252
.L13232:
	mov	r1, #32
	mov	r0, r8
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	strne	r8, [r4, #4]
	beq	.L13253
.L13233:
	movw	r3, #2802
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L13254
.L13235:
	ldr	r0, [r4], #8
	mov	r2, r8
	ldr	r1, [r5]
	add	r5, r6, #204
	bl	memcpy
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r0, r4
	add	r2, r6, #208
	ldr	r1, [r6, #212]
	bl	__list_add
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r3, #2826
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L13255
.L13236:
	add	r0, r6, #108
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
.L13237:
	mov	r4, #16
	b	.L13232
.L13252:
	mvn	r4, #11
	b	.L13233
.L13253:
	mov	r0, r4
	mvn	r4, #11
	bl	kfree
	b	.L13233
.L13254:
	movw	r1, #:lower16:.LC674
	mov	r3, r8
	ldr	r2, .L13256
	movt	r1, #:upper16:.LC674
	ldr	r0, .L13256+4
	bl	__dynamic_pr_debug
	b	.L13235
.L13255:
	movw	r1, #:lower16:.LC676
	ldr	r2, .L13256
	movt	r1, #:upper16:.LC676
	ldr	r0, .L13256+8
	bl	__dynamic_pr_debug
	b	.L13236
.L13251:
	ldrb	ip, [r6, #136]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC157
	mov	r3, r6
	movt	r1, #:upper16:.LC157
	ldr	r2, .L13256
	ldr	r0, .L13256+12
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L13231
.L13249:
	ldr	r1, .L13256
	movw	r0, #:lower16:.LC1047
	movt	r0, #:upper16:.LC1047
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L13250:
	ldr	r1, .L13256
	movw	r0, #:lower16:.LC1048
	movt	r0, #:upper16:.LC1048
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L13257:
	.align	2
.L13256:
	.word	.LANCHOR5-172
	.word	.LANCHOR4+2784
	.word	.LANCHOR4+2808
	.word	.LANCHOR4+2760
	.fnend
	.size	fmbim_cmd_complete, .-fmbim_cmd_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_write, %function
ffs_epfile_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L13304
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	mov	r8, r2
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r3, #-14]
	.pad #20
	sub	sp, sp, #20
	ldr	r4, [r0, #124]
	str	r1, [sp, #12]
	tst	r2, #4
	ldr	fp, [r4, #36]
	bne	.L13298
.L13259:
	ldr	r5, [r4, #32]
	cmp	r5, #0
	bne	.L13280
	ldr	r3, [r4, #36]
	ldr	r3, [r3, #92]
	cmp	r3, #2
	bne	.L13261
	ldr	r6, [r4, #40]
	cmp	r6, #0
	beq	.L13282
.L13263:
	ldrb	r10, [r4, #53]	@ zero_extendqisi2
	cmp	r10, #0
	bne	.L13266
	ldrb	r3, [r4, #54]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L13299
.L13267:
	ldr	r3, [r7, #32]
	mov	r0, r4
	tst	r3, #2048
	beq	.L13268
	bl	mutex_trylock
	cmp	r0, #0
	beq	.L13287
.L13271:
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #40]
	cmp	r3, r6
	bne	.L13300
	cmp	r10, #0
	beq	.L13301
	ldr	r7, [r6, #4]
	movw	r3, #:lower16:ffs_epfile_io_complete
	mov	r9, fp
	movt	r3, #:upper16:ffs_epfile_io_complete
	mov	r0, #0
	mov	r2, #32
	stm	r7, {r5, r8}
	mov	r1, r7
	str	r3, [r7, #28]
	str	r0, [r9, #52]!
	str	r9, [r7, #32]
	ldr	r0, [r6]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r8, r0
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
	cmp	r8, #0
	blt	.L13288
	mov	r0, r9
	bl	wait_for_completion_interruptible
	cmp	r0, #0
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bne	.L13302
	bl	_raw_spin_lock_irq
	ldr	r0, [r4, #36]
	ldr	r3, [r4, #40]
	add	r0, r0, #24
	cmp	r6, r3
	ldreq	r9, [r6, #24]
	mvnne	r9, #18
	bl	_raw_spin_unlock_irq
.L13274:
	mov	r0, r4
	bl	mutex_unlock
.L13265:
	mov	r0, r5
	bl	kfree
.L13258:
	mov	r0, r9
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13266:
	cmp	r5, #0
	bne	.L13267
	movw	r1, #32976
	mov	r0, r8
	bl	__kmalloc
	subs	r5, r0, #0
	beq	.L13285
	mov	r2, r8
	ldr	r1, [sp, #12]
	bl	__copy_from_user
	cmp	r0, #0
	beq	.L13267
	mvn	r9, #13
	b	.L13265
.L13268:
	bl	mutex_lock_interruptible
	subs	r9, r0, #0
	bne	.L13265
	b	.L13271
.L13282:
	mov	r5, r6
.L13262:
	ldr	r3, [r7, #32]
	tst	r3, #2048
	mvnne	r9, #10
	mvneq	r9, #18
	b	.L13265
.L13300:
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
	mov	r0, r4
	bl	mutex_unlock
	ldr	r3, [r4, #36]
	ldr	r3, [r3, #92]
	cmp	r3, #2
	beq	.L13264
.L13261:
	movw	r0, #:lower16:.LC33
	movw	r1, #785
	movt	r0, #:upper16:.LC33
	mvn	r9, #18
	bl	warn_slowpath_null
	b	.L13265
.L13298:
	mov	ip, #0
	movw	r1, #:lower16:.LC595
	ldr	r2, .L13304+4
	sub	r0, r3, #32
	movt	r1, #:upper16:.LC595
	mov	r3, r8
	stm	sp, {r8, ip}
	bl	__dynamic_pr_debug
	b	.L13259
.L13264:
	ldr	r6, [r4, #40]
	cmp	r6, #0
	bne	.L13263
	b	.L13262
.L13285:
	mvn	r9, #11
	b	.L13258
.L13288:
	mvn	r9, #4
	b	.L13274
.L13301:
	ldr	r0, [r6]
	cmp	r0, #0
	beq	.L13303
	ldr	r3, [r0, #8]
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
.L13279:
	ldr	r0, [r4, #36]
	mvn	r9, #73
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
	b	.L13274
.L13302:
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #40]
	cmp	r6, r3
	bne	.L13276
	ldr	r0, [r6]
	mov	r1, r7
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L13276:
	ldr	r0, [r4, #36]
	mvn	r9, #3
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
	b	.L13274
.L13287:
	mvn	r9, #10
	b	.L13265
.L13280:
	mvn	r9, #18
	b	.L13258
.L13299:
	mvn	r9, #21
	b	.L13265
.L13303:
	movw	r0, #:lower16:.LC33
	mov	r1, #860
	movt	r0, #:upper16:.LC33
	bl	warn_slowpath_null
	b	.L13279
.L13305:
	.align	2
.L13304:
	.word	.LANCHOR4-2656
	.word	.LANCHOR5-3596
	.fnend
	.size	ffs_epfile_write, .-ffs_epfile_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_command_complete, %function
rmnet_mux_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r8, [r6, #84]
	cmp	r2, #0
	blt	.L13320
	movw	r3, #:lower16:kmalloc_caches
	mov	r5, r1
	ldr	r7, [r1, #48]
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L13314
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L13309
.L13308:
	movw	r1, #32800
	mov	r0, r7
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	beq	.L13321
	add	r8, r6, #368
	str	r7, [r4, #4]
	mov	r0, r8
	bl	_raw_spin_lock
	ldr	r3, [r6, #356]
	cmp	r3, #0
	bne	.L13322
	mov	r0, r8
	bl	_raw_spin_unlock
	ldr	r0, [r4]
	bl	kfree
	mov	r0, r4
	bl	kfree
	ldr	r3, [r6, #424]
	ldr	r1, .L13324
	ldr	r0, .L13324+4
	add	r3, r3, #1
	str	r3, [r6, #424]
	bl	___ratelimit
	cmp	r0, #0
	bne	.L13323
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13314:
	mov	r4, #16
	b	.L13308
.L13320:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC1049
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC1049
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
.L13322:
	ldr	r0, [r4], #8
	mov	r2, r7
	ldr	r1, [r5]
	bl	memcpy
	add	r2, r6, #316
	ldr	r1, [r6, #320]
	mov	r0, r4
	bl	__list_add
	ldr	r3, [r6, #336]
	mov	r0, r8
	add	r3, r3, #1
	str	r3, [r6, #336]
	bl	_raw_spin_unlock
	ldrd	r4, [sp]
	add	r0, r6, #324
	mov	r3, #0
	ldrd	r6, [sp, #8]
	mov	r2, #1
	mov	r1, #3
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
.L13321:
	mov	r0, r4
	bl	kfree
.L13309:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC1050
	ldrd	r4, [sp]
	movt	r1, #:upper16:.LC1050
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err
.L13323:
	movw	r0, #:lower16:.LC1051
	ldr	r2, [r6, #424]
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC1051
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L13324
	b	printk
.L13325:
	.align	2
.L13324:
	.word	.LANCHOR5-152
	.word	.LANCHOR0+2856
	.fnend
	.size	rmnet_mux_command_complete, .-rmnet_mux_command_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	accessory_function_ctrlrequest, %function
accessory_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r3, #:lower16:.LANCHOR1
	mov	r5, r1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r0, [r2]	@ zero_extendqisi2
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	ldr	r4, [r3, #2488]
	cmp	r0, #64
	beq	.L13385
	cmp	r1, #51
	cmpeq	r0, #192
	bne	.L13369
	ldr	r3, [r5, #4]
	mov	r6, #2
	mov	r1, #256
	add	r0, r4, #101
	ldr	r3, [r3]
	strh	r6, [r3]	@ movhi
	bl	__memzero
	add	r0, r4, #356
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r4, #612
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r4, #868
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r4, #1120
	mov	r1, #256
	add	r0, r0, #5
	bl	__memzero
	add	r0, r4, #1376
	mov	r1, #256
	add	r0, r0, #5
	bl	__memzero
	mov	r2, #0
	mov	r3, r6
	str	r2, [r4, #1644]
	str	r2, [r4, #1648]
.L13329:
	ldr	r1, [r5, #4]
	mov	r2, #32
	ldrb	r0, [r1, #26]	@ zero_extendqisi2
	bfc	r0, #1, #1
	strb	r0, [r1, #26]
	ldr	r1, [r5, #4]
	str	r3, [r1, #4]
	ldr	r3, [r5]
	ldr	r1, [r5, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L13386
.L13326:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13385:
	cmp	r1, #53
	beq	.L13387
	cmp	r1, #52
	ldrh	r7, [r2, #4]	@ unaligned
	ldrh	r6, [r2, #6]	@ unaligned
	beq	.L13388
	cmp	r1, #58
	cmpeq	r7, #0
	ldrh	r8, [r2, #2]	@ unaligned
	moveq	r3, #1
	movne	r3, #0
	cmp	r6, #0
	movne	r3, #0
	cmp	r3, #0
	movne	r3, #0
	strne	r8, [r4, #1648]
	bne	.L13329
	cmp	r1, #54
	beq	.L13389
	cmp	r1, #55
	beq	.L13390
	cmp	r1, #56
	beq	.L13391
	cmp	r1, #57
	bne	.L13369
	add	r9, r4, #88
	add	r4, r4, #1760
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r4, #8]
	add	r4, r4, #8
	cmp	r4, r7
	bne	.L13366
	b	.L13363
.L13392:
	ldr	r7, [r7]
	cmp	r4, r7
	beq	.L13363
.L13366:
	ldr	r3, [r7, #16]
	cmp	r8, r3
	bne	.L13392
	mov	r1, r0
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L13384
	ldr	r1, [r5, #4]
	movw	r2, #:lower16:acc_complete_send_hid_event
	mov	r3, r6
	movt	r2, #:upper16:acc_complete_send_hid_event
	str	r7, [r1, #32]
	ldr	r1, [r5, #4]
	str	r2, [r1, #28]
	b	.L13329
.L13386:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC1052
	movt	r1, #:upper16:.LC1052
	ldr	r2, .L13399
	add	r0, r0, #32
	bl	dev_err
	b	.L13326
.L13388:
	str	r7, [r4, #1640]
	ldr	r1, [r5]
	movw	r2, #:lower16:acc_complete_set_string
	movt	r2, #:upper16:acc_complete_set_string
	mov	r3, r6
	ldr	r1, [r1, #4]
	str	r4, [r1]
	ldr	r1, [r5, #4]
	str	r2, [r1, #28]
	b	.L13329
.L13369:
.L13334:
	mvn	r4, #94
	b	.L13326
.L13387:
	mov	r3, #1
	mov	r0, #200
	str	r3, [r4, #1644]
	bl	msecs_to_jiffies
	movw	r1, #:lower16:system_wq
	add	r2, r4, #1696
	movt	r1, #:upper16:system_wq
	mov	r3, r0
	add	r2, r2, #4
	mov	r0, #4
	ldr	r1, [r1]
	bl	queue_delayed_work_on
	mov	r3, #0
	b	.L13329
.L13363:
	mov	r1, r0
	mov	r0, r9
	mvn	r4, #21
	bl	_raw_spin_unlock_irqrestore
	b	.L13326
.L13389:
	cmp	r7, #0
	beq	.L13384
	add	r9, r4, #88
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1768]
	add	r1, r4, #1760
	mov	r10, r0
	add	r1, r1, #8
	cmp	r1, r3
	mov	r6, r3
	bne	.L13338
	b	.L13335
.L13393:
	ldr	r3, [r3]
	cmp	r1, r3
	mov	r6, r3
	beq	.L13335
.L13338:
	ldr	r2, [r3, #16]
	cmp	r8, r2
	bne	.L13393
	cmp	r3, #0
	beq	.L13335
.L13339:
	mov	r0, r6
	bl	__list_del_entry
	add	r1, r4, #1776
	mov	r0, r6
	ldr	r2, [r4, #1784]
	add	r1, r1, #8
	bl	__list_add
.L13340:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L13367
	mov	r2, #32
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L13345
.L13344:
	movw	r1, #32800
	mov	r0, r7
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r6, #20]
	beq	.L13394
	mov	r1, r4
	mov	r0, r6
	str	r4, [r6, #12]
	str	r8, [r6, #16]
	str	r7, [r6, #24]
	ldr	r2, [r1, #1776]!
	bl	__list_add
	mov	r1, r10
	mov	r0, r9
.L13383:
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:system_wq
	add	r2, r4, #1744
	movt	r3, #:upper16:system_wq
	add	r2, r2, #8
	ldr	r1, [r3]
	mov	r0, #4
	bl	queue_work_on
	mov	r3, #0
	b	.L13329
.L13390:
	add	r6, r4, #88
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1768]
	add	r1, r4, #1760
	mov	r7, r0
	add	r1, r1, #8
	cmp	r1, r3
	mov	r9, r3
	bne	.L13351
	b	.L13348
.L13395:
	ldr	r3, [r3]
	cmp	r1, r3
	mov	r9, r3
	beq	.L13348
.L13351:
	ldr	r2, [r3, #16]
	cmp	r8, r2
	bne	.L13395
	cmp	r3, #0
	beq	.L13348
.L13352:
	mov	r0, r9
	bl	__list_del_entry
	add	r1, r4, #1776
	mov	r0, r9
	ldr	r2, [r4, #1784]
	add	r1, r1, #8
	bl	__list_add
	mov	r1, r7
	mov	r0, r6
	b	.L13383
.L13391:
	add	r10, r4, #88
	add	r4, r4, #1776
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r4]
	mov	r1, r0
	cmp	r4, r9
	bne	.L13361
	b	.L13358
.L13396:
	ldr	r9, [r9]
	cmp	r4, r9
	beq	.L13358
.L13361:
	ldr	r3, [r9, #16]
	cmp	r8, r3
	bne	.L13396
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	cmp	r9, #0
	beq	.L13384
	ldr	r3, [r9, #28]
	cmp	r7, r3
	bne	.L13384
	ldr	r3, [r9, #24]
	add	r7, r6, r7
	cmp	r7, r3
	bgt	.L13384
	ldr	r1, [r5, #4]
	movw	r2, #:lower16:acc_complete_set_hid_report_desc
	mov	r3, r6
	movt	r2, #:upper16:acc_complete_set_hid_report_desc
	str	r9, [r1, #32]
	ldr	r1, [r5, #4]
	str	r2, [r1, #28]
	b	.L13329
.L13367:
	mov	r6, #16
	b	.L13344
.L13358:
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
.L13384:
	mvn	r4, #21
	b	.L13326
.L13335:
	ldr	r6, [r4, #1776]
	add	r2, r4, #1776
	cmp	r2, r6
	bne	.L13343
	b	.L13340
.L13397:
	ldr	r6, [r6]
	cmp	r2, r6
	beq	.L13340
.L13343:
	ldr	r3, [r6, #16]
	cmp	r8, r3
	bne	.L13397
	cmp	r6, #0
	beq	.L13340
	b	.L13339
.L13348:
	ldr	r3, [r4, #1776]
	add	r1, r4, #1776
	cmp	r1, r3
	mov	r9, r3
	bne	.L13356
	b	.L13353
.L13398:
	ldr	r3, [r3]
	cmp	r1, r3
	mov	r9, r3
	beq	.L13353
.L13356:
	ldr	r2, [r3, #16]
	cmp	r8, r2
	bne	.L13398
	cmp	r3, #0
	bne	.L13352
.L13353:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mvn	r4, #21
	b	.L13326
.L13394:
	mov	r0, r6
	bl	kfree
.L13345:
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	mvn	r4, #11
	b	.L13326
.L13400:
	.align	2
.L13399:
	.word	.LANCHOR5-124
	.fnend
	.size	accessory_function_ctrlrequest, .-accessory_function_ctrlrequest
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_send_cpkt_tomodem, %function
grmnet_ctrl_smd_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #5
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	ip, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bhi	.L13402
	movw	r6, #:lower16:.LANCHOR1
	mov	r3, #84
	movt	r6, #:upper16:.LANCHOR1
	mla	r3, r3, r0, r6
	ldr	r4, [r3, #512]
	cmp	r4, #0
	beq	.L13402
	movw	r3, #:lower16:kmalloc_caches
	mov	r8, r1
	movt	r3, #:upper16:kmalloc_caches
	mov	r5, r2
	ldr	r7, [r3, #24]
	cmp	r7, #0
	beq	.L13403
	mov	r0, r7
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r7, r0, #0
	beq	.L13406
	mov	r1, #32
	mov	r0, r5
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r7]
	beq	.L13410
	cmn	r7, #4096
	str	r5, [r7, #4]
	bhi	.L13406
.L13407:
	mov	r1, r8
	mov	r2, r5
	add	r8, r4, #108
	bl	memcpy
	str	r5, [r7, #4]
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	ldr	r0, [r4, #8]
	ands	r5, r0, #1
	beq	.L13427
	add	r0, r7, #8
	add	r2, r4, #40
	ldr	r1, [r4, #44]
	bl	__list_add
	ldr	r1, [r6, #3484]
	add	r2, r4, #68
	mov	r0, #4
	bl	queue_work_on
	mov	r1, r9
	mov	r0, r8
	mov	r5, #0
	bl	_raw_spin_unlock_irqrestore
.L13401:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13403:
	mov	r1, #32
	mov	r0, r2
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r7, #16]
	strne	r5, [r7, #20]
	movne	r7, #16
	bne	.L13407
	mov	r7, #16
.L13410:
	mov	r0, r7
	bl	kfree
.L13406:
	movw	r0, #:lower16:.LC673
	ldr	r1, .L13428
	mvn	r5, #11
	movt	r0, #:upper16:.LC673
	bl	printk
	b	.L13401
.L13427:
	ldr	r0, [r7]
	bl	kfree
	mov	r0, r7
	bl	kfree
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L13401
.L13402:
	movw	r0, #:lower16:.LC123
	mov	r2, ip
	ldr	r1, .L13428
	movt	r0, #:upper16:.LC123
	mvn	r5, #18
	bl	printk
	b	.L13401
.L13429:
	.align	2
.L13428:
	.word	.LANCHOR5-108
	.fnend
	.size	grmnet_ctrl_smd_send_cpkt_tomodem, .-grmnet_ctrl_smd_send_cpkt_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_send_cpkt_response, %function
frmnet_send_cpkt_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	cmpne	r0, #0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #8
	sub	sp, sp, #8
	beq	.L13476
	movw	r3, #:lower16:kmalloc_caches
	mov	r5, r2
	movt	r3, #:upper16:kmalloc_caches
	ldr	r4, [r3, #24]
	cmp	r4, #0
	beq	.L13433
	mov	r0, r4
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L13435
	mov	r1, #32
	mov	r0, r5
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	beq	.L13450
	cmn	r4, #4096
	str	r5, [r4, #4]
	bhi	.L13435
.L13437:
	mov	r1, r7
	mov	r2, r5
	movw	r7, #:lower16:.LANCHOR4
	bl	memcpy
	movt	r7, #:upper16:.LANCHOR4
	movw	r3, #2850
	str	r5, [r4, #4]
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L13477
.L13438:
	ldr	r3, [r6, #120]
	cmp	r3, #0
	beq	.L13439
	ldr	r3, [r6, #124]
	cmp	r3, #0
	bne	.L13440
.L13439:
	ldr	r0, [r4]
	bl	kfree
	mov	r0, r4
	bl	kfree
	mov	r0, #0
.L13430:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13433:
	mov	r1, #32
	mov	r0, r2
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4, #16]
	strne	r5, [r4, #20]
	movne	r4, #16
	bne	.L13437
	mov	r4, #16
.L13450:
	mov	r0, r4
	bl	kfree
.L13435:
	movw	r0, #:lower16:.LC673
	ldr	r1, .L13481
	movt	r0, #:upper16:.LC673
	bl	printk
	mvn	r0, #11
	b	.L13430
.L13440:
	add	r5, r6, #132
	add	r8, r6, #144
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r2, r8
	ldr	r1, [r6, #148]
	add	r0, r4, #8
	bl	__list_add
	mov	r1, r9
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #2874
	ldr	r9, [r6, #140]
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L13478
.L13441:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #120]
	cmp	r9, #0
	moveq	r4, #1
	clz	r3, r3
	lsr	r3, r3, #5
	movne	r4, r3
	cmp	r4, #0
	bne	.L13442
	ldr	r3, [r9]
	cmp	r3, #0
	beq	.L13442
	ldr	r3, [r6, #152]
	add	r3, r3, #1
	cmp	r3, #1
	str	r3, [r6, #152]
	beq	.L13444
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	b	.L13430
.L13442:
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L13430
.L13477:
	ldrb	ip, [r6, #116]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC157
	mov	r3, r6
	movt	r1, #:upper16:.LC157
	ldr	r2, .L13481
	add	r0, r7, #2832
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L13438
.L13444:
	ldr	r2, [r9]
	mvn	ip, #94
	mov	r1, r0
	mov	r0, r5
	strb	ip, [r2]
	strb	r3, [r2, #1]
	strb	r4, [r2, #2]
	strb	r4, [r2, #3]
	ldrh	r3, [r6, #112]
	strh	r3, [r2, #4]	@ unaligned
	strb	r4, [r2, #6]
	strb	r4, [r2, #7]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r0, [r6, #136]
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bne	.L13445
.L13475:
	mov	r0, #0
	b	.L13430
.L13478:
	ldrb	ip, [r6, #116]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC1054
	mov	r3, r6
	movt	r1, #:upper16:.LC1054
	ldr	r2, .L13481+4
	ldr	r0, .L13481+8
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L13441
.L13445:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r6, #144]
	mov	r10, r0
	cmp	r8, r9
	beq	.L13446
	ldr	r3, [r6, #152]
	cmp	r3, #0
	bne	.L13479
	movw	r2, #2898
	ldrh	r2, [r7, r2]
	tst	r2, #4
	bne	.L13480
.L13448:
	mov	r1, r10
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	b	.L13475
.L13479:
	sub	r3, r3, #1
	mov	r0, r9
	str	r3, [r6, #152]
	sub	r6, r9, #8
	bl	list_del
	ldr	r0, [r9, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
.L13446:
	mov	r1, r10
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #2922
	ldrh	r3, [r7, r3]
	tst	r3, #4
	beq	.L13475
	movw	r1, #:lower16:.LC161
	mov	r2, r4
	ldr	r0, .L13481+12
	movt	r1, #:upper16:.LC161
	bl	__dynamic_pr_debug
	mov	r0, #0
	b	.L13430
.L13480:
	movw	r1, #:lower16:.LC159
	ldr	r2, .L13481+4
	movt	r1, #:upper16:.LC159
	ldr	r0, .L13481+16
	bl	__dynamic_pr_debug
	b	.L13448
.L13476:
	movw	r0, #:lower16:.LC1053
	mov	r3, r1
	ldr	r1, .L13481
	mov	r2, r6
	movt	r0, #:upper16:.LC1053
	bl	printk
	mvn	r0, #18
	b	.L13430
.L13482:
	.align	2
.L13481:
	.word	.LANCHOR5-72
	.word	.LANCHOR5-44
	.word	.LANCHOR4+2856
	.word	.LANCHOR4+2904
	.word	.LANCHOR4+2880
	.fnend
	.size	frmnet_send_cpkt_response, .-frmnet_send_cpkt_response
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_capture_work, %function
f_audio_capture_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r4, #:lower16:.LANCHOR0
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	movt	r4, #:upper16:.LANCHOR0
	strd	r8, [sp, #16]
	mov	r6, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r3, #24]
	.pad #28
	sub	sp, sp, #28
	ldr	r5, [r4, #1368]
	cmp	r3, #0
	beq	.L13495
	mov	r0, r3
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	str	r3, [sp, #8]
	beq	.L13500
.L13484:
	mov	r0, r5
	movw	r1, #32800
	bl	__kmalloc
	ldr	r3, [sp, #8]
	cmp	r0, #0
	mov	r8, r0
	str	r0, [r3]
	beq	.L13501
.L13485:
	ldr	r3, [r4, #1368]
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r9, [r6, #-68]
	str	r3, [sp, #12]
	ldrb	r3, [r5, #2216]	@ zero_extendqisi2
	ldr	fp, [r9, #212]
	cmp	r3, #0
	beq	.L13502
.L13486:
	mov	r3, sp
	movw	r10, #:lower16:.LANCHOR4
	bic	r7, r3, #8128
	ldr	r3, [sp, #12]
	movt	r10, #:upper16:.LANCHOR4
	bic	r7, r7, #63
	lsl	r3, r3, #3
	str	r3, [sp, #20]
.L13493:
	ldr	r3, [fp, #160]
	mov	r2, #146
	movw	r1, #16704
	mov	r0, r9
	ldr	r3, [r3]
	cmp	r3, #7
	mvn	r2, r2, lsr r3
	bhi	.L13489
	ands	r2, r2, #1
	bne	.L13489
	bl	snd_pcm_kernel_ioctl
	cmp	r0, #0
	blt	.L13503
.L13489:
	ldr	r3, .L13506
	mov	ip, #0
	mov	r1, r8
	ldr	r5, [fp, #80]
	mov	r0, r9
	ldr	lr, [sp, #20]
	ldrh	r2, [r3]
	udiv	r5, lr, r5
	ldr	lr, [r7, #8]
	str	ip, [r7, #8]
	tst	r2, #4
	str	lr, [sp, #16]
	bne	.L13504
	mov	r2, r5
	bl	snd_pcm_lib_read
	cmp	r5, r0
	mov	r2, r0
	bne	.L13491
.L13492:
	mov	r3, sp
	ldr	r2, [sp, #16]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	str	r2, [r3, #8]
.L13488:
	movw	r3, #2970
	ldrh	r3, [r10, r3]
	tst	r3, #4
	bne	.L13505
.L13494:
	sub	r4, r6, #8
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #8]
	mov	r5, r0
	add	r2, r6, #16
	ldr	r1, [r6, #20]
	add	r0, r3, #8
	bl	__list_add
	mov	r1, r5
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L13495:
	mov	r3, #16
	str	r3, [sp, #8]
	b	.L13484
.L13502:
	bl	gaudio_open_streams
	subs	r2, r0, #0
	moveq	r3, #1
	strbeq	r3, [r5, #2216]
	beq	.L13486
	movw	r0, #:lower16:.LC1055
	ldr	r1, .L13506+4
	movw	r10, #:lower16:.LANCHOR4
	movt	r0, #:upper16:.LC1055
	movt	r10, #:upper16:.LANCHOR4
	bl	printk
	b	.L13488
.L13505:
	movw	r1, #:lower16:.LC1058
	ldr	r2, .L13506+8
	movt	r1, #:upper16:.LC1058
	ldr	r3, [r4, #1368]
	ldr	r0, .L13506+12
	bl	__dynamic_pr_debug
	b	.L13494
.L13504:
	ldr	r2, [sp, #12]
	movw	r1, #:lower16:.LC1056
	sub	r0, r3, #18
	movt	r1, #:upper16:.LC1056
	mov	r3, r5
	str	r2, [sp]
	ldr	r2, .L13506+4
	bl	__dynamic_pr_debug
	mov	r2, r5
	mov	r1, r8
	mov	r0, r9
	bl	snd_pcm_lib_read
	cmp	r5, r0
	mov	r2, r0
	beq	.L13492
.L13491:
	movw	r0, #:lower16:.LC1057
	ldr	r1, .L13506+4
	movt	r0, #:upper16:.LC1057
	bl	printk
	ldr	r3, [sp, #16]
	str	r3, [r7, #8]
	b	.L13493
.L13503:
	mov	r2, r0
	movw	r0, #:lower16:.LC756
	ldr	r1, .L13506+4
	movt	r0, #:upper16:.LC756
	bl	printk
	movw	r0, #:lower16:.LC767
	ldr	r1, .L13506+8
	movt	r0, #:upper16:.LC767
	bl	printk
	b	.L13488
.L13501:
	movw	r0, #:lower16:.LC40
	ldr	r1, .L13506+16
	movt	r0, #:upper16:.LC40
	bl	printk
	mvn	r3, #11
	ldr	r0, [sp, #8]
	str	r3, [sp, #8]
	bl	kfree
	mvn	r3, #0
	ldr	r8, [r3, #-11]
	b	.L13485
.L13500:
	mvn	r3, #11
	movw	r0, #:lower16:.LC39
	ldr	r1, .L13506+16
	movt	r0, #:upper16:.LC39
	str	r3, [sp, #8]
	bl	printk
	mvn	r3, #0
	ldr	r8, [r3, #-11]
	b	.L13485
.L13507:
	.align	2
.L13506:
	.word	.LANCHOR4+2946
	.word	.LANCHOR5-12
	.word	.LANCHOR5+4
	.word	.LANCHOR4+2952
	.word	.LANCHOR3+96
	.fnend
	.size	f_audio_capture_work, .-f_audio_capture_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_write, %function
mbim_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #2994
	mov	r5, r2
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR4
	movt	r6, #:upper16:.LANCHOR4
	strd	r8, [sp, #16]
	mov	r8, r1
	ldrh	r3, [r6, r3]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r4, [r0, #124]
	tst	r3, #4
	bne	.L13561
.L13509:
	cmp	r4, #0
	beq	.L13562
	cmp	r5, #0
	beq	.L13563
	cmp	r5, #4096
	bhi	.L13564
	add	r7, r4, #104
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r7]
	add	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L13514
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L13565
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L13536
	mov	r2, #16
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r9, r0, #0
	beq	.L13566
.L13517:
	mov	r1, #208
	mov	r0, r5
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r9]
	strne	r5, [r9, #4]
	beq	.L13567
.L13518:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/uaccess.h" 1
	adds r2, r8, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L13568
	mov	r1, r5
	bl	__memzero
	mov	r2, r5
.L13520:
	cmp	r2, #0
	bne	.L13569
	movw	r3, #3018
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L13570
.L13522:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L13571
	ldrb	r3, [r4, #164]	@ zero_extendqisi2
	cmp	r3, #3
	bne	.L13572
	add	r8, r4, #204
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r10, r0
	add	r2, r4, #216
	ldr	r1, [r4, #220]
	add	r0, r9, #8
	bl	__list_add
	mov	r1, r10
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #3042
	ldr	r10, [r4, #160]
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L13573
.L13526:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #88]
	mov	fp, r0
	cmp	r3, #0
	beq	.L13574
	cmp	r10, #0
	beq	.L13575
	ldr	r3, [r10]
	cmp	r3, #0
	beq	.L13576
	add	r9, r4, #168
	.syntax divided
@ 61 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r9]
	add	r3, r3, #1
	strex	r2, r3, [r9]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	beq	.L13530
	movw	r3, #3066
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L13577
.L13531:
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
.L13524:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r3, #3114
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L13578
.L13533:
	mov	r0, r5
.L13508:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13568:
	mov	r2, r5
	mov	r1, r8
	bl	__copy_from_user
	mov	r2, r0
	b	.L13520
.L13536:
	mov	r9, #16
	b	.L13517
.L13530:
	ldr	r2, [r10]
	mov	ip, #0
	mvn	lr, #94
	mov	r0, #8
	mov	r1, fp
	str	r0, [r10, #4]
	mov	r0, r8
	strb	lr, [r2]
	strb	r3, [r2, #1]
	strb	ip, [r2, #2]
	strb	ip, [r2, #3]
	ldrb	r3, [r4, #196]	@ zero_extendqisi2
	strh	r3, [r2, #4]	@ unaligned
	strb	ip, [r2, #6]
	strb	ip, [r2, #7]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #156]
	mov	r2, #32
	mov	r1, r10
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L13579
.L13532:
	movw	r3, #3090
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L13524
	movw	r1, #:lower16:.LC1070
	ldr	r2, .L13580
	movt	r1, #:upper16:.LC1070
	ldr	r0, .L13580+4
	bl	__dynamic_pr_debug
	b	.L13524
.L13566:
	mvn	r3, #0
	mvn	r9, #11
	ldr	r0, [r3, #-11]
	b	.L13518
.L13567:
	mov	r0, r9
	mvn	r9, #11
	bl	kfree
	mvn	r3, #0
	ldr	r0, [r3, #-11]
	b	.L13518
.L13561:
	movw	r1, #:lower16:.LC317
	mov	r3, r2
	ldr	r2, .L13580+8
	movt	r1, #:upper16:.LC317
	add	r0, r6, #2976
	bl	__dynamic_pr_debug
	b	.L13509
.L13578:
	movw	r1, #:lower16:.LC326
	mov	r3, r5
	ldr	r2, .L13580+8
	movt	r1, #:upper16:.LC326
	ldr	r0, .L13580+12
	bl	__dynamic_pr_debug
	b	.L13533
.L13570:
	ldrb	ip, [r4, #136]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC1061
	mov	r3, r4
	movt	r1, #:upper16:.LC1061
	ldr	r2, .L13580+16
	ldr	r0, .L13580+20
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L13522
.L13573:
	ldrb	ip, [r4, #136]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC1064
	mov	r3, r4
	movt	r1, #:upper16:.LC1064
	ldr	r2, .L13580
	ldr	r0, .L13580+24
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L13526
.L13577:
	movw	r1, #:lower16:.LC1068
	ldr	r2, .L13580
	movt	r1, #:upper16:.LC1068
	ldr	r3, [r4, #168]
	ldr	r0, .L13580+28
	bl	__dynamic_pr_debug
	b	.L13531
.L13563:
	movw	r0, #:lower16:.LC312
	ldr	r1, .L13580+8
	movt	r0, #:upper16:.LC312
	bl	printk
	mvn	r0, #18
	b	.L13508
.L13569:
	movw	r0, #:lower16:.LC315
	ldr	r1, .L13580+8
	movt	r0, #:upper16:.LC315
	bl	printk
	mov	r0, r9
	bl	mbim_free_ctrl_pkt.part.5
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #0
	b	.L13508
.L13571:
	movw	r0, #:lower16:.LC1062
	mov	r2, r4
	ldr	r1, .L13580+16
	movt	r0, #:upper16:.LC1062
	bl	printk
	mov	r0, r9
	bl	mbim_free_ctrl_pkt.part.5
	b	.L13524
.L13574:
	movw	r0, #:lower16:.LC1065
	mov	r2, r4
	ldr	r1, .L13580
	movt	r0, #:upper16:.LC1065
	bl	printk
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L13524
.L13575:
	movw	r0, #:lower16:.LC1066
	mov	r2, r4
	ldr	r1, .L13580
	movt	r0, #:upper16:.LC1066
	bl	printk
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L13524
.L13576:
	movw	r0, #:lower16:.LC1067
	mov	r2, r4
	ldr	r1, .L13580
	movt	r0, #:upper16:.LC1067
	bl	printk
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L13524
.L13572:
	movw	r0, #:lower16:.LC1063
	ldr	r1, .L13580+16
	mov	r2, r4
	movt	r0, #:upper16:.LC1063
	bl	printk
	mov	r0, r9
	bl	mbim_free_ctrl_pkt.part.5
	b	.L13524
.L13562:
	movw	r0, #:lower16:.LC739
	ldr	r1, .L13580+8
	movt	r0, #:upper16:.LC739
	bl	printk
	mvn	r0, #18
	b	.L13508
.L13565:
	movw	r0, #:lower16:.LC74
	ldr	r1, .L13580+8
	movt	r0, #:upper16:.LC74
	bl	printk
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #31
	b	.L13508
.L13514:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC1060
	ldr	r1, .L13580+8
	movt	r0, #:upper16:.LC1060
	bl	printk
	mvn	r0, #15
	b	.L13508
.L13564:
	movw	r0, #:lower16:.LC1059
	mov	r2, r5
	ldr	r1, .L13580+8
	movt	r0, #:upper16:.LC1059
	mov	r3, #4096
	bl	printk
	mvn	r0, #11
	b	.L13508
.L13579:
	.syntax divided
@ 83 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r9]
	sub	r3, r3, #1
	strex	r1, r3, [r9]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC1069
	ldr	r1, .L13580
	movt	r0, #:upper16:.LC1069
	bl	printk
	b	.L13532
.L13581:
	.align	2
.L13580:
	.word	.LANCHOR5+68
	.word	.LANCHOR4+3072
	.word	.LANCHOR5+28
	.word	.LANCHOR4+3096
	.word	.LANCHOR5+40
	.word	.LANCHOR4+3000
	.word	.LANCHOR4+3024
	.word	.LANCHOR4+3048
	.fnend
	.size	mbim_write, .-mbim_write
	.align	2
	.global	usb_gadget_get_string
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_gadget_get_string, %function
usb_gadget_get_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	beq	.L13602
	ldr	r3, [r0, #4]
	cmp	r3, #0
	beq	.L13603
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	ldr	r4, [r3, #4]
	.pad #12
	sub	sp, sp, #12
	cmp	r4, #0
	beq	.L13586
	ldrb	r0, [r3]	@ zero_extendqisi2
	cmp	r0, r1
	bne	.L13588
	b	.L13587
.L13604:
	ldr	r4, [r3, #4]
	cmp	r4, #0
	beq	.L13586
	ldrb	r0, [r3]	@ zero_extendqisi2
	cmp	r1, r0
	beq	.L13587
.L13588:
	adds	r3, r3, #8
	bne	.L13604
.L13586:
	mvn	r1, #21
	b	.L13582
.L13587:
	mov	r0, r4
	mov	r5, r2
	bl	strlen
	mov	r2, #126
	add	r3, r5, #2
	cmp	r0, r2
	movcc	r1, r0
	movcs	r1, r2
	str	r2, [sp]
	mov	r0, r4
	mov	r2, #1
	bl	utf8s_to_utf16s
	cmp	r0, #0
	blt	.L13586
	add	r3, r0, #1
	mov	r2, #3
	lsl	r3, r3, #1
	strb	r2, [r5, #1]
	uxtb	r3, r3
	mov	r1, r3
	strb	r3, [r5]
.L13582:
	mov	r0, r1
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L13602:
	mov	r3, #4
	mov	ip, #3
	mov	r1, r3
	strb	r3, [r2]
	strb	ip, [r2, #1]
	ldrh	r3, [r0]
	strb	r3, [r2, #2]
	ldrh	r3, [r0]
	lsr	r3, r3, #8
	strb	r3, [r2, #3]
.L13599:
	mov	r0, r1
	bx	lr
.L13603:
	mvn	r1, #21
	b	.L13599
	.fnend
	.size	usb_gadget_get_string, .-usb_gadget_get_string
	.align	2
	.global	usb_find_descriptor_fillbuf
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_find_descriptor_fillbuf, %function
usb_find_descriptor_fillbuf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #0
	beq	.L13620
	ldr	ip, [r2]
	cmp	ip, #0
	beq	.L13613
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldrb	lr, [ip, #1]	@ zero_extendqisi2
	cmp	lr, r3
	bne	.L13610
.L13608:
	ldrb	r4, [ip]	@ zero_extendqisi2
	cmp	r1, r4
	bcc	.L13612
	mov	r1, ip
	mov	r2, r4
	bl	memcpy
	mov	r0, r4
.L13605:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L13610:
	ldr	ip, [r2, #4]!
	cmp	ip, #0
	beq	.L13621
	ldrb	lr, [ip, #1]	@ zero_extendqisi2
	cmp	lr, r3
	beq	.L13608
	b	.L13610
.L13613:
	mvn	r0, #1
	bx	lr
.L13621:
	mvn	r0, #1
	b	.L13605
.L13612:
	mvn	r0, #21
	b	.L13605
.L13620:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	usb_find_descriptor_fillbuf, .-usb_find_descriptor_fillbuf
	.align	2
	.global	usb_descriptor_fillbuf
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_descriptor_fillbuf, %function
usb_descriptor_fillbuf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	subs	r6, r2, #0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L13626
	mov	r5, r1
	ldr	r1, [r6]
	cmp	r1, #0
	beq	.L13629
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r5, r4
	bcc	.L13626
	mov	r7, r0
	mov	r3, r0
	b	.L13627
.L13628:
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r4, r5
	bhi	.L13626
.L13627:
	mov	r0, r3
	mov	r2, r4
	bl	memcpy
	ldr	r1, [r6, #4]!
	sub	r5, r5, r4
	add	r3, r0, r4
	cmp	r1, #0
	bne	.L13628
	sub	r0, r3, r7
.L13622:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13626:
	mvn	r0, #21
	b	.L13622
.L13629:
	mov	r0, r1
	b	.L13622
	.fnend
	.size	usb_descriptor_fillbuf, .-usb_descriptor_fillbuf
	.align	2
	.global	usb_gadget_config_buf
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_gadget_config_buf, %function
usb_gadget_config_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #0
	cmpne	r2, #8
	bls	.L13642
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	sub	r6, r2, #9
	strd	r8, [sp, #16]
	mov	r8, r3
	add	r9, r7, #9
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r1, [r0]	@ unaligned
	ldr	r3, [r0, #4]	@ unaligned
	str	r1, [r7]	@ unaligned
	str	r3, [r7, #4]	@ unaligned
	ldrb	r3, [r0, #8]	@ zero_extendqisi2
	strb	r3, [r7, #8]
	ldr	r1, [r8]
	cmp	r1, #0
	beq	.L13638
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r6, r4
	bcc	.L13635
	mov	r5, r9
	b	.L13636
.L13637:
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r4, r6
	bhi	.L13635
.L13636:
	mov	r0, r5
	mov	r2, r4
	bl	memcpy
	ldr	r1, [r8, #4]!
	sub	r6, r6, r4
	add	r5, r5, r4
	cmp	r1, #0
	bne	.L13637
	subs	r0, r5, r9
	bmi	.L13631
	add	r0, r0, #9
	cmp	r0, #65536
	bge	.L13635
.L13634:
	ldrb	r3, [r7, #7]	@ zero_extendqisi2
	mov	r1, #9
	mov	r2, #2
	strb	r1, [r7]
	strb	r2, [r7, #1]
	mvn	r3, r3, lsl #25
	strh	r0, [r7, #2]	@ unaligned
	mvn	r3, r3, lsr #25
	strb	r3, [r7, #7]
.L13631:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13635:
	mvn	r0, #21
	b	.L13631
.L13638:
	mov	r0, #9
	b	.L13634
.L13642:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	usb_gadget_config_buf, .-usb_gadget_config_buf
	.align	2
	.global	usb_copy_descriptors
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_copy_descriptors, %function
usb_copy_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r0]
	cmp	r2, #0
	beq	.L13649
	mov	r3, #0
	mov	r1, r0
	mov	r0, r3
	b	.L13645
.L13650:
	mov	r3, lr
.L13645:
	ldrb	ip, [r2]	@ zero_extendqisi2
	add	lr, r3, #1
	ldr	r2, [r1, #4]!
	add	r0, r0, ip
	cmp	r2, #0
	bne	.L13650
	add	r3, r3, #2
	lsl	r4, r3, #2
	add	r0, r0, r4
.L13644:
	mov	r1, #208
	bl	__kmalloc
	subs	r6, r0, #0
	beq	.L13643
	ldr	r1, [r5]
	add	r3, r6, r4
	mov	r4, r6
	cmp	r1, #0
	beq	.L13647
.L13648:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, r3
	bl	memcpy
	str	r0, [r4], #4
	ldr	r2, [r5]
	ldr	r1, [r5, #4]!
	ldrb	r2, [r2]	@ zero_extendqisi2
	cmp	r1, #0
	add	r3, r0, r2
	bne	.L13648
.L13647:
	mov	r3, #0
	str	r3, [r4]
.L13643:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13649:
	mov	r0, #4
	mov	r4, r0
	b	.L13644
	.fnend
	.size	usb_copy_descriptors, .-usb_copy_descriptors
	.align	2
	.global	usb_assign_descriptors
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_assign_descriptors, %function
usb_assign_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	subs	r0, r1, #0
	strd	r6, [sp, #8]
	mov	r6, r3
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	ip, [r4, #20]
	ldr	r3, [ip, #24]
	ldr	r5, [r3]
	beq	.L13662
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L13661
.L13662:
	cmp	r7, #0
	beq	.L13660
	ldr	r3, [r5, #20]
	cmp	r3, #2
	bhi	.L13671
.L13660:
	cmp	r6, #0
	beq	.L13664
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bhi	.L13672
.L13664:
	mov	r0, #0
.L13657:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13672:
	mov	r0, r6
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L13664
.L13670:
	ldr	r0, [r4, #16]
.L13661:
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	mvn	r0, #11
	b	.L13657
.L13671:
	mov	r0, r7
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	bne	.L13660
	b	.L13670
	.fnend
	.size	usb_assign_descriptors, .-usb_assign_descriptors
	.align	2
	.global	usb_free_all_descriptors
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_free_all_descriptors, %function
usb_free_all_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #12]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	usb_free_all_descriptors, .-usb_free_all_descriptors
	.align	2
	.global	usb_ep_autoconfig_ss
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_ep_autoconfig_ss, %function
usb_ep_autoconfig_ss:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	fp, [r0, #28]
	.pad #12
	sub	sp, sp, #12
	movw	r0, #:lower16:.LC471
	ldrb	r6, [r1, #3]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC471
	str	r2, [sp]
	mov	r1, fp
	bl	strcmp
	ldr	r9, [r5, #8]!
	cmp	r0, #0
	and	r6, r6, #3
	sub	r4, r9, #12
	mov	r10, r9
	bne	.L13676
	cmp	r6, #3
	beq	.L13785
	movw	r0, #:lower16:.LC474
	mov	r1, fp
	movt	r0, #:upper16:.LC474
	bl	strcmp
	cmp	r0, #0
	bne	.L13686
.L13687:
	cmp	r6, #2
	beq	.L13786
.L13686:
	cmp	r10, r5
	beq	.L13691
.L13685:
	movw	r9, #:lower16:_ctype
	movw	r10, #:lower16:.LANCHOR1
	movw	fp, #:lower16:.LC473
	movt	r9, #:upper16:_ctype
	movt	r10, #:upper16:.LANCHOR1
	movt	fp, #:upper16:.LC473
	b	.L13712
.L13694:
	ldr	r4, [r4, #12]
	cmp	r5, r4
	sub	r4, r4, #12
	beq	.L13691
.L13712:
	ldr	r2, [r4]
	cmp	r2, #0
	bne	.L13694
	ldrb	r6, [r7, #3]	@ zero_extendqisi2
	ands	r6, r6, #3
	beq	.L13694
	ldr	r2, [r4, #4]
	ldrb	r1, [r2]	@ zero_extendqisi2
	cmp	r1, #101
	bne	.L13694
	ldrb	r1, [r2, #2]	@ zero_extendqisi2
	cmp	r1, #45
	beq	.L13695
	mov	r0, r2
	mov	r1, #45
	str	r2, [sp, #4]
	bl	strrchr
	subs	r3, r0, #0
	ldr	r2, [sp, #4]
	beq	.L13696
	cmp	r6, #2
	beq	.L13698
	cmp	r6, #3
	ldrb	r2, [r3, #2]	@ zero_extendqisi2
	bne	.L13771
	cmp	r2, #115
	str	r3, [sp, #4]
	beq	.L13694
	mov	r0, fp
	ldr	r1, [r8, #28]
	bl	strcmp
	cmp	r0, #0
	ldr	r3, [sp, #4]
	bne	.L13700
	ldrb	r2, [r3, #1]	@ zero_extendqisi2
	cmp	r2, #105
	beq	.L13694
.L13700:
	ldrb	r2, [r3, #-1]	@ zero_extendqisi2
	ldrb	r1, [r9, r2]	@ zero_extendqisi2
	tst	r1, #4
	beq	.L13713
	ldrh	r2, [r7, #4]	@ unaligned
	cmp	r2, #0
	bne	.L13774
	str	r2, [sp, #4]
	ldrh	r2, [r4, #20]
	strh	r2, [r7, #4]	@ unaligned
.L13704:
	cmp	r6, #1
	ubfx	r1, r2, #0, #11
	beq	.L13706
	cmp	r6, #3
	bne	.L13705
.L13707:
	ldr	r3, [r8, #20]
	cmp	r3, #2
	movls	r0, #1
	movhi	r0, #0
	cmp	r1, #64
	movls	r0, #0
	cmp	r0, #0
	bne	.L13694
.L13706:
	ldrh	r0, [r4, #20]
	cmp	r0, r1
	bcc	.L13694
	ldr	r0, [r8, #20]
	cmp	r0, #2
	bhi	.L13705
	cmp	r1, #1024
	bcs	.L13694
	tst	r2, #6144
	bne	.L13694
.L13705:
	ldrb	r2, [r7, #2]	@ zero_extendqisi2
	and	r2, r2, #128
	strb	r2, [r7, #2]
	ldr	r0, [r4, #4]
	ldrb	r1, [r0, #2]	@ zero_extendqisi2
	ldrb	r1, [r9, r1]	@ zero_extendqisi2
	tst	r1, #4
	bne	.L13787
	ldr	r1, [r10, #3228]
	add	r1, r1, #1
	cmp	r1, #15
	str	r1, [r10, #3228]
	bhi	.L13694
	orr	r3, r2, r1
	uxtb	r3, r3
	strb	r3, [r7, #2]
.L13710:
	ldm	sp, {r2, fp}
	cmp	r2, #0
	movne	fp, #0
	cmp	fp, #0
	beq	.L13711
	ldrh	r2, [r4, #20]
	cmp	r2, #64
	movge	r2, #64
	strh	r2, [r7, #4]	@ unaligned
.L13711:
	strb	r3, [r4, #25]
.L13682:
	mov	r3, #0
	str	r3, [r4, #28]
	str	r3, [r4, #32]
	b	.L13675
.L13676:
	movw	r0, #:lower16:.LC474
	mov	r1, fp
	movt	r0, #:upper16:.LC474
	bl	strcmp
	cmp	r0, #0
	bne	.L13686
	cmp	r6, #3
	bne	.L13687
	cmp	r5, r9
	movwne	r9, #:lower16:.LC1073
	movne	r6, r4
	movtne	r9, #:upper16:.LC1073
	bne	.L13688
	b	.L13691
.L13788:
	ldr	r6, [r6, #12]
	cmp	r5, r6
	sub	r6, r6, #12
	beq	.L13685
.L13688:
	mov	r1, r9
	ldr	r0, [r6, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L13788
.L13692:
	cmp	r6, #0
	beq	.L13685
	ldr	r3, [r6]
	cmp	r3, #0
	bne	.L13685
	mov	r2, r7
	mov	r1, r6
	ldr	r3, [sp]
	mov	r0, r8
	bl	ep_matches.part.13
	cmp	r0, #0
	bne	.L13721
	ldr	r10, [r8, #8]
	sub	r4, r10, #12
	b	.L13686
.L13785:
	cmp	r5, r9
	beq	.L13691
	movw	r9, #:lower16:.LC1071
	mov	r6, r4
	movt	r9, #:upper16:.LC1071
	b	.L13680
.L13789:
	ldr	r6, [r6, #12]
	cmp	r5, r6
	sub	r6, r6, #12
	beq	.L13681
.L13680:
	mov	r1, r9
	ldr	r0, [r6, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L13789
	cmp	r6, #0
	beq	.L13681
	ldr	r3, [r6]
	cmp	r3, #0
	bne	.L13681
	mov	r2, r7
	mov	r1, r6
	ldr	r3, [sp]
	mov	r0, r8
	bl	ep_matches.part.13
	cmp	r0, #0
	bne	.L13721
	ldr	r4, [r8, #8]
	cmp	r5, r4
	sub	r4, r4, #12
	bne	.L13681
.L13691:
	mov	r4, #0
.L13675:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13696:
	mov	r0, r2
	str	r2, [sp, #4]
	bl	strlen
	ldr	r2, [sp, #4]
	add	r3, r2, r0
.L13701:
	ldrb	r2, [r3, #-1]	@ zero_extendqisi2
	ldrb	r1, [r9, r2]	@ zero_extendqisi2
	tst	r1, #4
	bne	.L13695
.L13713:
	ldrsb	r1, [r7, #2]
	cmp	r1, #0
	blt	.L13790
	cmp	r2, #116
	bne	.L13694
.L13695:
	sub	r3, r6, #2
	clz	r3, r3
	lsr	r3, r3, #5
	mov	r2, r3
	str	r3, [sp, #4]
	ldr	r3, [sp]
	cmp	r3, #0
	moveq	r2, #0
	cmp	r2, #0
	bne	.L13791
.L13703:
	ldrh	r2, [r7, #4]	@ unaligned
	cmp	r2, #0
	bne	.L13704
	ldrh	r2, [r4, #20]
	strh	r2, [r7, #4]	@ unaligned
	b	.L13704
.L13786:
	ldrsb	r3, [r7, #2]
	cmp	r3, #0
	bge	.L13686
	cmp	r5, r9
	beq	.L13691
	movw	r9, #:lower16:.LC1074
	mov	r6, r4
	movt	r9, #:upper16:.LC1074
	b	.L13693
.L13792:
	ldr	r6, [r6, #12]
	cmp	r5, r6
	sub	r6, r6, #12
	beq	.L13685
.L13693:
	mov	r1, r9
	ldr	r0, [r6, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L13792
	b	.L13692
.L13791:
	ldr	r1, [r8, #20]
	cmp	r1, #4
	bls	.L13722
	ldrb	r1, [r3, #3]	@ zero_extendqisi2
	ldrh	r0, [r4, #22]
	and	r1, r1, #31
	cmp	r0, r1
	bcc	.L13694
.L13722:
	str	r2, [sp, #4]
	b	.L13703
.L13681:
	movw	r9, #:lower16:.LC1072
	mov	r6, r4
	movt	r9, #:upper16:.LC1072
	b	.L13684
.L13793:
	ldr	r6, [r6, #12]
	cmp	r5, r6
	sub	r6, r6, #12
	beq	.L13685
.L13684:
	mov	r1, r9
	ldr	r0, [r6, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L13793
	b	.L13692
.L13698:
	ldrb	r2, [r3, #1]	@ zero_extendqisi2
	cmp	r2, #98
	bne	.L13694
	b	.L13701
.L13771:
	cmp	r2, #115
	bne	.L13694
	b	.L13701
.L13787:
	add	r0, r0, #2
	mov	r2, #10
	mov	r1, #0
	bl	simple_strtoul
	ldrb	r3, [r7, #2]	@ zero_extendqisi2
	orr	r3, r3, r0
	uxtb	r3, r3
	strb	r3, [r7, #2]
	b	.L13710
.L13790:
	cmp	r2, #110
	bne	.L13694
	b	.L13695
.L13721:
	mov	r4, r6
	b	.L13682
.L13774:
	mov	r3, #0
	ubfx	r1, r2, #0, #11
	str	r3, [sp, #4]
	b	.L13707
	.fnend
	.size	usb_ep_autoconfig_ss, .-usb_ep_autoconfig_ss
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	__ffs_func_bind_do_descs, %function
__ffs_func_bind_do_descs:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	bne	.L13809
	ldr	r0, [r3, #48]
	cmp	r0, #0
	beq	.L13797
	str	r2, [r0, r1, lsl #2]
	mov	r0, #2
.L13798:
	cmp	r2, #0
	beq	.L13809
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	cmp	r1, #5
	beq	.L13812
.L13809:
	mov	r0, #0
	bx	lr
.L13797:
	ldr	r0, [r3, #44]
	cmp	r0, #0
	ldreq	ip, [r3, #52]
	strne	r2, [r0, r1, lsl #2]
	movne	r0, #1
	streq	r2, [ip, r1, lsl #2]
	b	.L13798
.L13812:
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r7, [r2, #2]	@ zero_extendqisi2
	.pad #4
	sub	sp, sp, #4
	ldr	r8, [r3, #12]
	and	r7, r7, #15
	sub	r5, r7, #1
	rsb	r5, r5, r5, lsl #3
	lsl	r5, r5, #2
	add	r6, r8, r5
	add	r0, r6, r0, lsl #2
	ldr	r1, [r0, #8]
	cmp	r1, #0
	bne	.L13802
	str	r2, [r0, #8]
	ldr	r4, [r8, r5]
	cmp	r4, #0
	beq	.L13801
	ldr	r3, [r6, #8]
	ldrh	r0, [r2, #4]	@ unaligned
	ldrb	r3, [r3, #2]	@ zero_extendqisi2
	cmp	r0, #0
	movne	r0, #0
	strb	r3, [r2, #2]
	bne	.L13794
	ldr	r3, [r6, #8]
	ldrh	r3, [r3, #4]	@ unaligned
	strh	r3, [r2, #4]	@ unaligned
.L13794:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13801:
	mov	r10, r2
	ldr	r0, [r3, #4]
	mov	r2, r4
	mov	r1, r10
	mov	r9, r3
	bl	usb_ep_autoconfig_ss
	subs	fp, r0, #0
	beq	.L13803
	ldr	r3, [r9, #12]
	mov	r1, #208
	ldr	r2, [fp, #8]
	add	r3, r3, r5
	str	r3, [fp]
	ldr	r3, [r2, #8]
	blx	r3
	subs	r3, r0, #0
	beq	.L13804
	str	fp, [r8, r5]
	mov	r0, r4
	str	r3, [r6, #4]
	ldrb	r3, [r10, #2]	@ zero_extendqisi2
	and	r3, r3, #15
	add	r3, r9, r3
	strb	r7, [r3, #16]
	b	.L13794
.L13802:
	mvn	r0, #21
	b	.L13794
.L13803:
	movw	r0, #65012
	movt	r0, 65535
	b	.L13794
.L13804:
	mvn	r0, #11
	b	.L13794
	.fnend
	.size	__ffs_func_bind_do_descs, .-__ffs_func_bind_do_descs
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_bind, %function
diag_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r7, [r0, #24]
	cmp	r3, #15
	movhi	r3, #237
	bhi	.L13814
	add	r1, r3, #12
	add	r2, r3, #1
	str	r4, [r0, r1, lsl #2]
	strb	r2, [r0, #44]
.L13814:
	movw	r5, #:lower16:.LANCHOR0
	mov	r2, #0
	ldr	r1, .L13870
	movt	r5, #:upper16:.LANCHOR0
	strb	r3, [r5, #2882]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L13815
	str	r0, [r4, #88]
	mov	r2, #0
	ldr	r1, .L13870+4
	str	r4, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L13815
	str	r3, [r4, #84]
	ldr	r0, .L13870+8
	str	r4, [r3]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L13832
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L13867
.L13817:
	ldr	r3, [r4, #120]
	cmp	r3, #0
	beq	.L13835
	ldrb	r2, [r5, #2882]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L13835
	ldr	r2, [r4, #116]
	ldrb	r1, [r2, #33]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L13823
.L13865:
	ldrh	r0, [r2, #27]	@ unaligned
	mov	r5, #0
	blx	r3
	b	.L13813
.L13815:
	mvn	r5, #18
.L13816:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L13822
.L13830:
	bl	kfree
.L13822:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L13827
	bl	kfree
.L13827:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L13828
	bl	kfree
.L13828:
	ldr	r3, [r4, #84]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L13813
	mov	r2, #0
	str	r2, [r3]
.L13813:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13867:
	ldrb	r2, [r5, #2894]	@ zero_extendqisi2
	ldrb	r3, [r5, #2906]	@ zero_extendqisi2
	ldr	r0, .L13870+12
	strb	r2, [r5, #2934]
	strb	r3, [r5, #2946]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L13818
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L13817
	ldrb	r2, [r5, #2894]	@ zero_extendqisi2
	ldrb	r3, [r5, #2906]	@ zero_extendqisi2
	ldr	r0, .L13870+16
	strb	r2, [r5, #2974]
	strb	r3, [r5, #2986]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L13817
	mvn	r5, #11
	b	.L13822
.L13823:
	ldr	r0, [r2, #44]
	ldr	r0, [r0, #16]
	ldr	r0, [r0]
	ldr	r5, [r0, #4]
	cmp	r5, #0
	bne	.L13866
	b	.L13813
.L13869:
	ldrb	ip, [r5]	@ zero_extendqisi2
	cmp	ip, r1
	beq	.L13868
	adds	r5, r5, #8
	beq	.L13813
.L13866:
	ldr	r0, [r5, #4]
	cmp	r0, #0
	bne	.L13869
.L13835:
	mov	r5, #0
	b	.L13813
.L13832:
	mvn	r5, #11
	b	.L13816
.L13818:
	ldr	r0, [r4, #12]
	mvn	r5, #11
	cmp	r0, #0
	bne	.L13830
	b	.L13827
.L13868:
	mov	r1, r0
	b	.L13865
.L13871:
	.align	2
.L13870:
	.word	.LANCHOR0+2892
	.word	.LANCHOR0+2904
	.word	.LANCHOR0+2916
	.word	.LANCHOR0+2956
	.word	.LANCHOR0+2996
	.fnend
	.size	diag_function_bind, .-diag_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_bind, %function
rmnet_smd_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r8, [r0, #24]
	str	r8, [r1, #84]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L13875
	movw	r5, #:lower16:.LANCHOR0
	mov	r4, r1
	ldr	r1, .L13933
	mov	r7, r0
	add	r2, r3, #12
	add	r0, r3, #1
	movt	r5, #:upper16:.LANCHOR0
	str	r4, [r7, r2, lsl #2]
	mov	r2, #0
	strb	r0, [r7, #44]
	strb	r3, [r5, #3022]
	strb	r3, [r4, #104]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L13875
	str	r8, [r0]
	mov	r2, #0
	ldr	r1, .L13933+4
	str	r0, [r4, #92]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L13875
	str	r8, [r0]
	mov	r2, #0
	add	r1, r5, #3056
	str	r0, [r4, #88]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	subs	r6, r0, #0
	beq	.L13875
	str	r8, [r6]
	str	r6, [r4, #96]
	ldr	r3, [r7, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L13931
.L13876:
	ldr	r3, [r6, #8]
	mov	r1, #208
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L13877
	mov	r2, #8
	movw	r7, #:lower16:kmalloc_caches
	movt	r7, #:upper16:kmalloc_caches
	str	r2, [r5, #4]
	ldr	r0, [r7, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5]
	beq	.L13879
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L13879
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L13877:
	mvn	r3, #11
	mov	r5, r3
	str	r3, [r4, #100]
.L13872:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13931:
	ldrb	r1, [r5, #3034]	@ zero_extendqisi2
	ldrb	r2, [r5, #3046]	@ zero_extendqisi2
	ldrb	r3, [r5, #3058]	@ zero_extendqisi2
	strb	r1, [r5, #3070]
	strb	r2, [r5, #3082]
	strb	r3, [r5, #3094]
	b	.L13876
.L13879:
	cmn	r5, #4096
	str	r5, [r4, #100]
	bhi	.L13872
	movw	r3, #:lower16:rmnet_smd_notify_complete
	mov	r2, #8
	movt	r3, #:upper16:rmnet_smd_notify_complete
	mov	r6, #4
	mov	r8, #16
	str	r3, [r5, #28]
	ldr	r3, [r4, #100]
	str	r4, [r3, #32]
	ldr	r3, [r4, #100]
	str	r2, [r3, #4]
.L13885:
	ldr	r3, [r7, #24]
	mov	r2, #16
	mov	r1, #208
	mov	r5, r2
	subs	r0, r3, #0
	beq	.L13880
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L13911
.L13880:
	ldr	r3, [r7, #44]
	mov	r2, #2048
	mov	r1, #208
	subs	r0, r3, #0
	streq	r8, [r5]
	beq	.L13883
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	beq	.L13930
.L13883:
	cmn	r5, #4096
	add	r2, r4, #108
	add	r0, r5, #8
	bhi	.L13884
	ldr	r1, [r4, #112]
	bl	__list_add
	subs	r6, r6, #1
	bne	.L13885
	mov	r6, #8
	mov	r8, #16
.L13890:
	ldr	r3, [r7, #24]
	mov	r2, #16
	mov	r1, #208
	mov	r5, r2
	subs	r0, r3, #0
	beq	.L13886
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L13911
.L13886:
	ldr	r3, [r7, #44]
	mov	r2, #2048
	mov	r1, #208
	subs	r0, r3, #0
	streq	r8, [r5]
	beq	.L13889
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	beq	.L13930
.L13889:
	cmn	r5, #4096
	add	r2, r4, #116
	add	r0, r5, #8
	bhi	.L13884
	ldr	r1, [r4, #120]
	bl	__list_add
	subs	r6, r6, #1
	bne	.L13890
	movw	r9, #:lower16:rmnet_smd_complete_epout
	mov	r8, #8
	movt	r9, #:upper16:rmnet_smd_complete_epout
	mov	r10, #2048
.L13894:
	ldr	r6, [r4, #88]
	mov	r1, #208
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L13911
	str	r10, [r5, #4]
	ldr	r3, [r7, #44]
	mov	ip, #16
	mov	r2, #2048
	mov	r1, #208
	subs	r0, r3, #0
	streq	ip, [r5]
	beq	.L13893
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L13893
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	mvn	r5, #11
	ldr	r3, [r3, #12]
	blx	r3
	b	.L13884
.L13911:
	mvn	r5, #11
.L13884:
	mov	r0, r4
	bl	rmnet_smd_free_buf
	mov	r3, #0
	str	r3, [r4, #88]
	str	r3, [r4, #92]
	str	r3, [r4, #96]
	b	.L13872
.L13930:
	mov	r0, r5
	mvn	r5, #11
	bl	kfree
	b	.L13884
.L13893:
	cmn	r5, #4096
	add	r2, r4, #148
	add	r0, r5, #36
	bhi	.L13884
	str	r10, [r5, #4]
	str	r9, [r5, #28]
	str	r4, [r5, #32]
	ldr	r1, [r4, #152]
	bl	__list_add
	subs	r8, r8, #1
	bne	.L13894
	movw	r9, #:lower16:rmnet_smd_complete_epin
	mov	r5, #8
	movt	r9, #:upper16:rmnet_smd_complete_epin
	mov	r10, #2048
.L13898:
	ldr	r8, [r4, #92]
	mov	r1, #208
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	beq	.L13911
	str	r10, [r6, #4]
	ldr	r3, [r7, #44]
	mov	ip, #16
	mov	r2, #2048
	mov	r1, #208
	subs	r0, r3, #0
	streq	ip, [r6]
	beq	.L13897
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r6]
	bne	.L13897
	ldr	r3, [r8, #8]
	mov	r1, r6
	mov	r0, r8
	mvn	r5, #11
	ldr	r3, [r3, #12]
	blx	r3
	b	.L13884
.L13875:
	mvn	r5, #18
	b	.L13872
.L13897:
	cmn	r6, #4096
	add	r2, r4, #140
	add	r0, r6, #36
	bhi	.L13932
	str	r9, [r6, #28]
	str	r4, [r6, #32]
	ldr	r1, [r4, #144]
	bl	__list_add
	subs	r5, r5, #1
	bne	.L13898
	b	.L13872
.L13932:
	mov	r5, r6
	b	.L13884
.L13934:
	.align	2
.L13933:
	.word	.LANCHOR0+3032
	.word	.LANCHOR0+3044
	.fnend
	.size	rmnet_smd_bind, .-rmnet_smd_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_bind, %function
rmnet_sdio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #24]
	str	r7, [r1, #84]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L13942
	movw	r5, #:lower16:.LANCHOR0
	mov	r4, r1
	ldr	r1, .L13962
	mov	r6, r0
	add	r2, r3, #12
	add	r0, r3, #1
	movt	r5, #:upper16:.LANCHOR0
	str	r4, [r6, r2, lsl #2]
	mov	r2, #0
	strb	r0, [r6, #44]
	strb	r3, [r5, #3106]
	strb	r3, [r4, #104]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L13938
	str	r7, [r0]
	mov	r2, #0
	ldr	r1, .L13962+4
	str	r0, [r4, #92]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L13938
	str	r7, [r0]
	mov	r2, #0
	ldr	r1, .L13962+8
	str	r0, [r4, #88]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L13938
	str	r7, [r0]
	str	r0, [r4, #96]
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L13939
	ldrb	r1, [r5, #3118]	@ zero_extendqisi2
	ldrb	r2, [r5, #3130]	@ zero_extendqisi2
	ldrb	r3, [r5, #3142]	@ zero_extendqisi2
	strb	r1, [r5, #3154]
	strb	r2, [r5, #3166]
	strb	r3, [r5, #3178]
.L13939:
	mov	r3, #0
	add	r2, r4, #252
	ldr	r1, [r4, #200]
	mov	r0, #4
	bl	queue_delayed_work_on
	mov	r0, #0
	b	.L13935
.L13938:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	beq	.L13942
	mov	r2, #0
	mvn	r0, #18
	str	r2, [r3]
.L13935:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13942:
	mvn	r0, #18
	b	.L13935
.L13963:
	.align	2
.L13962:
	.word	.LANCHOR0+3116
	.word	.LANCHOR0+3128
	.word	.LANCHOR0+3140
	.fnend
	.size	rmnet_sdio_bind, .-rmnet_sdio_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_bind, %function
audio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r5, .L13981
	movw	r4, #:lower16:.LANCHOR0
	strd	r6, [sp, #8]
	movt	r4, #:upper16:.LANCHOR0
	movw	ip, #44100
	strd	r8, [sp, #16]
	mov	r3, #2
	mov	r6, #0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	movw	lr, #3208
	.pad #12
	sub	sp, sp, #12
	strh	ip, [r4, lr]	@ movhi
	ldr	lr, [r0, #24]
	strb	r3, [r4, #3195]
	cmp	r2, #15
	strb	r3, [r4, #3204]
	strb	r6, [r5, #2]
	str	ip, [sp, #4]
	bhi	.L13965
	add	r3, r2, #1
	add	ip, r2, #12
	strb	r2, [r4, #3214]
	uxtb	r3, r3
	str	r1, [r0, ip, lsl #2]
	cmp	r3, #15
	strb	r3, [r0, #44]
	bhi	.L13965
	mov	r6, r0
	mov	r5, r1
	strb	r3, [r4, #3226]
	add	r0, r2, #2
	add	r1, r3, #12
	strb	r3, [r4, #3238]
	mov	r2, #0
	str	r5, [r6, r1, lsl #2]
	add	r1, r4, #3248
	strb	r0, [r6, #44]
	ldr	r0, [lr]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L13965
	str	r7, [r5, #104]
	movw	r10, #:lower16:kmalloc_caches
	movw	r9, #:lower16:audio_data_complete
	str	r5, [r7]
	ldr	r3, [r6, #24]
	movt	r10, #:upper16:kmalloc_caches
	movt	r9, #:upper16:audio_data_complete
	mov	r8, #4
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	ldrbhi	r3, [r4, #3250]	@ zero_extendqisi2
	strbhi	r3, [r4, #3262]
.L13970:
	ldr	r3, [r7, #8]
	mov	r1, #208
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	mov	r2, #256
	mov	r1, #208
	mov	r3, #16
	beq	.L13967
	ldr	ip, [r10, #32]
	subs	r0, ip, #0
	streq	r3, [r4]
	beq	.L13969
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4]
	beq	.L13980
.L13969:
	mov	r3, #256
	add	r6, r5, #108
	mov	r0, r6
	str	r3, [r4, #4]
	str	r9, [r4, #28]
	str	r5, [r4, #32]
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	add	r2, r5, #96
	ldr	r1, [r5, #100]
	add	r0, r4, #36
	bl	__list_add
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	subs	r8, r8, #1
	bne	.L13970
	mov	r0, r8
	b	.L13964
.L13980:
	ldr	r3, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L13967:
	mvn	r0, #11
.L13964:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13965:
.L13971:
	mvn	r0, #18
	b	.L13964
.L13982:
	.align	2
.L13981:
	.word	.LANCHOR0+3208
	.fnend
	.size	audio_bind, .-audio_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_bind, %function
ecm_qc_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	.pad #16
	sub	sp, sp, #16
	ldr	r7, [r0, #24]
	cmp	r2, #15
	bhi	.L13984
	add	r3, r2, #1
	add	r1, r2, #12
	movw	r5, #:lower16:.LANCHOR0
	mov	r6, r0
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR0
	strb	r3, [r0, #44]
	strb	r2, [r4, #120]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	strb	r2, [r5, #3274]
	strb	r2, [r5, #3287]
	cmp	r3, #15
	bhi	.L13984
	add	r1, r3, #12
	add	r0, r3, #1
	strb	r3, [r5, #3288]
	strb	r3, [r5, #3294]
	mov	r2, #0
	str	r4, [r6, r1, lsl #2]
	ldr	r1, .L14050
	strb	r0, [r6, #44]
	strb	r3, [r5, #3306]
	strb	r3, [r4, #121]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L13984
	str	r0, [r4, #88]
	mov	r2, #0
	add	r1, r5, #3328
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L13984
	str	r0, [r4, #92]
	mov	r2, #0
	ldr	r1, .L14050+4
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L13984
	str	r3, [r4, #144]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r8, r0
	str	r0, [r4, #148]
	beq	.L13988
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L13987
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L13987:
	str	r0, [r8]
	ldr	r3, [r4, #148]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L13988
	str	r4, [r3, #32]
	ldr	r2, [r4, #148]
	movw	r3, #:lower16:ecm_qc_notify_complete
	movt	r3, #:upper16:ecm_qc_notify_complete
	ldr	r0, .L14050+8
	str	r3, [r2, #28]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L13988
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L14049
.L13989:
	movw	r2, #:lower16:.LANCHOR4
	movw	r3, #3138
	movt	r2, #:upper16:.LANCHOR4
	movw	r1, #:lower16:ecm_qc_open
	ldrh	r0, [r2, r3]
	movw	r3, #:lower16:ecm_qc_close
	movt	r1, #:upper16:ecm_qc_open
	movt	r3, #:upper16:ecm_qc_close
	str	r1, [r4, #112]
	str	r3, [r4, #116]
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	bne	.L13992
	mov	r5, r0
.L13983:
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14049:
	ldrb	r1, [r5, #3318]	@ zero_extendqisi2
	ldrb	r2, [r5, #3330]	@ zero_extendqisi2
	ldrb	r3, [r5, #3342]	@ zero_extendqisi2
	ldr	r0, .L14050+12
	strb	r1, [r5, #3394]
	strb	r2, [r5, #3406]
	strb	r3, [r5, #3418]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L13990
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L13989
	ldrb	r3, [r5, #3342]	@ zero_extendqisi2
	ldrb	r1, [r5, #3318]	@ zero_extendqisi2
	ldrb	r2, [r5, #3330]	@ zero_extendqisi2
	ldr	r0, .L14050+16
	strb	r1, [r5, #3470]
	strb	r2, [r5, #3482]
	strb	r3, [r5, #3494]
	bl	usb_copy_descriptors
	ldr	r3, [r4, #8]
	str	r0, [r4, #12]
	cmp	r3, #0
	bne	.L13989
.L13990:
	ldr	r0, [r4, #12]
	mvn	r5, #11
	cmp	r0, #0
	beq	.L13996
.L14002:
	bl	kfree
.L13995:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L13996
	bl	kfree
.L13996:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L13997
	bl	kfree
.L13997:
	ldr	r3, [r4, #148]
	cmp	r3, #0
	beq	.L13998
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #144]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L13998:
	ldr	r3, [r4, #144]
	movw	r0, #:lower16:.LC1078
	ldr	r1, .L14050+20
	movt	r0, #:upper16:.LC1078
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	mov	r3, r5
	ldr	r2, [r4]
	bl	printk
	b	.L13983
.L13992:
	ldr	r5, [r6, #24]
	add	r0, r2, #3120
	movw	ip, #:lower16:.LC1075
	ldr	r6, [r4, #92]
	movt	ip, #:upper16:.LC1075
	movw	r3, #:lower16:.LC1076
	ldr	lr, [r4, #144]
	movt	r3, #:upper16:.LC1076
	ldr	r1, [r7]
	ldr	r5, [r5]
	ldr	r2, [lr, #4]
	ldr	lr, [r4, #88]
	add	r1, r1, #32
	ldr	r5, [r5, #20]
	str	r2, [sp, #8]
	ldr	r4, [r6, #4]
	movw	r2, #:lower16:.LC1077
	movt	r2, #:upper16:.LC1077
	cmp	r5, #2
	mov	r5, #0
	movhi	r3, ip
	str	r4, [sp, #4]
	ldr	ip, [lr, #4]
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L13983
.L13984:
	mvn	r5, #18
.L13986:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	bne	.L14002
	b	.L13995
.L13988:
	mvn	r5, #11
	b	.L13986
.L14051:
	.align	2
.L14050:
	.word	.LANCHOR0+3316
	.word	.LANCHOR0+3340
	.word	.LANCHOR0+3352
	.word	.LANCHOR0+3428
	.word	.LANCHOR0+3504
	.word	.LANCHOR5+100
	.fnend
	.size	ecm_qc_bind, .-ecm_qc_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_bind, %function
mbim_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	ldr	r1, .L14117
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r7, [r0, #24]
	movw	r0, #:lower16:.LC388
	.pad #20
	sub	sp, sp, #20
	movt	r0, #:upper16:.LC388
	bl	printk
	str	r7, [r4, #84]
	ldrb	r3, [r6, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L14053
	add	r1, r3, #12
	add	r2, r3, #1
	movw	r5, #:lower16:.LANCHOR0
	str	r4, [r6, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR0
	strb	r2, [r6, #44]
	strb	r3, [r4, #196]
	ldrb	r0, [r6, #44]	@ zero_extendqisi2
	strb	r3, [r5, #2730]
	strb	r3, [r5, #3558]
	strb	r3, [r5, #3567]
	cmp	r0, #15
	bhi	.L14053
	add	r2, r0, #12
	add	r3, r0, #1
	strb	r0, [r5, #2742]
	mov	r8, #0
	strb	r0, [r5, #2754]
	ldr	r1, .L14117+4
	str	r4, [r6, r2, lsl #2]
	mov	r2, r8
	strb	r3, [r6, #44]
	strb	r0, [r5, #3568]
	str	r7, [r4, #140]
	str	r4, [r4, #144]
	strb	r0, [r4, #197]
	strb	r8, [r4, #198]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r9, r0, #0
	beq	.L14111
	movw	r0, #:lower16:.LC1080
	ldr	r1, .L14117
	movt	r0, #:upper16:.LC1080
	bl	printk
	str	r7, [r9]
	mov	r2, r8
	add	r1, r5, #3584
	str	r9, [r4, #148]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r9, r0, #0
	beq	.L14112
	movw	r0, #:lower16:.LC1082
	ldr	r1, .L14117
	movt	r0, #:upper16:.LC1082
	bl	printk
	str	r7, [r9]
	mov	r2, r8
	ldr	r1, .L14117+8
	str	r9, [r4, #152]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r8, r0, #0
	beq	.L14113
	movw	r0, #:lower16:.LC1084
	ldr	r1, .L14117
	movt	r0, #:upper16:.LC1084
	bl	printk
	str	r8, [r4, #156]
	ldr	r3, [r8, #8]
	mov	r1, #208
	str	r7, [r8]
	mov	r0, r8
	ldr	r3, [r3, #8]
	blx	r3
	subs	r7, r0, #0
	streq	r7, [r4, #160]
	beq	.L14059
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r7]
	beq	.L14061
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	mov	r9, r0
	str	r0, [r7]
	beq	.L14114
.L14061:
	mov	r3, #16
	movw	r0, #:lower16:.LC1085
	ldr	r1, .L14117
	movt	r0, #:upper16:.LC1085
	str	r3, [r7, #4]
	str	r7, [r4, #160]
	ldr	r7, .L14117+12
	bl	printk
	ldr	r2, [r4, #160]
	movw	r3, #:lower16:mbim_notify_complete
	movt	r3, #:upper16:mbim_notify_complete
	add	r0, r7, #12
	str	r4, [r2, #32]
	ldr	r2, [r4, #160]
	str	r3, [r2, #28]
	ldr	r3, [r4, #132]
	cmp	r3, #7
	movne	r3, #4064
	moveq	r3, #2048
	strh	r3, [r7, #9]	@ unaligned
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L14065
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L14115
.L14064:
	ldrb	r3, [r6, #20]	@ zero_extendqisi2
	sub	r2, r3, #2
	cmp	r2, #2
	bhi	.L14068
	movw	r2, #:lower16:.LANCHOR4
	movw	r1, #3162
	movt	r2, #:upper16:.LANCHOR4
	ldrh	r2, [r2, r1]
	tst	r2, #4
	bne	.L14116
.L14069:
	add	r3, r3, #48
	strb	r3, [r5, #250]
.L14068:
	ldr	ip, [r6, #24]
	movw	r1, #:lower16:.LC1075
	movw	r3, #:lower16:.LC1076
	ldr	r2, [r4, #156]
	movt	r1, #:upper16:.LC1075
	movw	r0, #:lower16:.LC1088
	ldr	lr, [r4, #152]
	movt	r3, #:upper16:.LC1076
	movt	r0, #:upper16:.LC1088
	ldr	r6, [ip]
	ldr	r5, [r2, #4]
	ldr	ip, [r4, #148]
	ldrb	r2, [r4, #136]	@ zero_extendqisi2
	ldr	r4, [r6, #20]
	str	r5, [sp, #8]
	ldr	lr, [lr, #4]
	mov	r5, #0
	cmp	r4, #2
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	movhi	r3, r1
	ldr	r1, .L14117
	str	ip, [sp]
	bl	printk
	b	.L14052
.L14112:
	movw	r0, #:lower16:.LC1081
	ldr	r1, .L14117
	mvn	r5, #18
	movt	r0, #:upper16:.LC1081
	bl	printk
.L14055:
	movw	r0, #:lower16:.LC1089
	mov	r3, r5
	ldr	r1, .L14117
	movt	r0, #:upper16:.LC1089
	ldr	r2, [r4]
	bl	printk
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L14072
	bl	kfree
.L14072:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L14073
	bl	kfree
.L14073:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L14074
	bl	kfree
.L14074:
	ldr	r3, [r4, #160]
	cmp	r3, #0
	beq	.L14075
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L14075:
	ldr	r3, [r4, #156]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #152]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #148]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
.L14052:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L14111:
	movw	r0, #:lower16:.LC1079
	ldr	r1, .L14117
	mvn	r5, #18
	movt	r0, #:upper16:.LC1079
	bl	printk
	b	.L14055
.L14115:
	ldrb	r1, [r5, #3574]	@ zero_extendqisi2
	add	r0, r7, #96
	ldrb	r2, [r5, #3586]	@ zero_extendqisi2
	ldrb	r3, [r5, #3598]	@ zero_extendqisi2
	strb	r1, [r5, #3670]
	strb	r2, [r5, #3682]
	strb	r3, [r5, #3694]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L14065
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L14064
	ldrb	r1, [r5, #3574]	@ zero_extendqisi2
	add	r0, r7, #180
	ldrb	r2, [r5, #3586]	@ zero_extendqisi2
	ldrb	r3, [r5, #3598]	@ zero_extendqisi2
	strb	r1, [r5, #3754]
	strb	r2, [r5, #3766]
	strb	r3, [r5, #3778]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L14064
.L14065:
	mvn	r5, #11
	b	.L14055
.L14113:
	movw	r0, #:lower16:.LC1083
	ldr	r1, .L14117
	mvn	r5, #18
	movt	r0, #:upper16:.LC1083
	bl	printk
	b	.L14055
.L14114:
	ldr	r3, [r8, #8]
	mov	r1, r7
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	str	r9, [r4, #160]
.L14059:
	movw	r0, #:lower16:.LC1086
	ldr	r1, .L14117
	mvn	r5, #11
	movt	r0, #:upper16:.LC1086
	bl	printk
	b	.L14055
.L14116:
	movw	r1, #:lower16:.LC1087
	ldr	r2, .L14117
	movt	r1, #:upper16:.LC1087
	ldr	r0, .L14117+16
	bl	__dynamic_pr_debug
	ldrb	r3, [r6, #20]	@ zero_extendqisi2
	b	.L14069
.L14053:
	mvn	r5, #18
	b	.L14055
.L14118:
	.align	2
.L14117:
	.word	.LANCHOR5+112
	.word	.LANCHOR0+3572
	.word	.LANCHOR0+3596
	.word	.LANCHOR0+3608
	.word	.LANCHOR4+3144
	.fnend
	.size	mbim_bind, .-mbim_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_bind, %function
ecm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #16
	sub	sp, sp, #16
	ldr	r7, [r0, #24]
	cmp	r3, #15
	bhi	.L14120
	add	r1, r3, #12
	add	r2, r3, #1
	mov	r5, r0
	movw	r6, #:lower16:.LANCHOR0
	str	r4, [r0, r1, lsl #2]
	movt	r6, #:upper16:.LANCHOR0
	strb	r2, [r0, #44]
	strb	r3, [r4, #148]
	ldrb	r0, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r6, #3850]
	strb	r3, [r6, #3858]
	strb	r3, [r6, #3871]
	cmp	r0, #15
	bls	.L14121
.L14120:
	ldr	r3, [r4, #168]
	mvn	r5, #18
.L14122:
	cmp	r3, #0
	beq	.L14126
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #164]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L14126:
	ldr	r3, [r4, #164]
	movw	r1, #:lower16:.LC1091
	movt	r1, #:upper16:.LC1091
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r7]
	mov	r3, r5
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L14119:
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14121:
	add	r1, r0, #12
	add	r3, r0, #1
	strb	r0, [r6, #3872]
	strb	r0, [r6, #3878]
	mov	r2, #0
	str	r4, [r5, r1, lsl #2]
	ldr	r1, .L14163
	strb	r3, [r5, #44]
	strb	r0, [r6, #3890]
	strb	r0, [r4, #149]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14120
	str	r0, [r4, #88]
	mov	r2, #0
	ldr	r1, .L14163+4
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14120
	str	r0, [r4, #92]
	mov	r2, #0
	ldr	r1, .L14163+8
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L14120
	str	r3, [r4, #164]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r8, r0
	str	r0, [r4, #168]
	beq	.L14136
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L14127
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L14127:
	str	r0, [r8]
	ldr	r3, [r4, #168]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L14138
	str	r4, [r3, #32]
	ldr	r0, [r4, #168]
	movw	r3, #:lower16:ecm_notify_complete
	movt	r3, #:upper16:ecm_notify_complete
	ldrb	r1, [r6, #3902]	@ zero_extendqisi2
	ldrb	r2, [r6, #3914]	@ zero_extendqisi2
	str	r3, [r0, #28]
	ldr	r0, [r4, #20]
	ldrb	r3, [r6, #3926]	@ zero_extendqisi2
	strb	r1, [r6, #3938]
	strb	r2, [r6, #3950]
	strb	r1, [r6, #3974]
	ldr	r1, [r0, #24]
	ldr	r0, .L14163+12
	strb	r3, [r6, #3962]
	strb	r2, [r6, #3986]
	strb	r3, [r6, #3998]
	ldr	r6, [r1]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L14130
	ldr	r3, [r6, #20]
	cmp	r3, #2
	bhi	.L14162
.L14129:
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #3186
	movt	r3, #:upper16:.LANCHOR4
	movw	r1, #:lower16:ecm_open
	ldrh	r3, [r3, r2]
	movw	r2, #:lower16:ecm_close
	movt	r1, #:upper16:ecm_open
	movt	r2, #:upper16:ecm_close
	str	r1, [r4, #136]
	str	r2, [r4, #140]
	ubfx	r3, r3, #2, #1
	cmp	r3, #0
	moveq	r5, r3
	beq	.L14119
	ldr	r3, [r5, #24]
	ldr	r1, [r7]
	ldr	r3, [r3]
	add	r1, r1, #32
	ldr	r0, [r3, #20]
	cmp	r0, #4
	bhi	.L14140
	movw	r2, #:lower16:.LC1075
	movw	r3, #:lower16:.LC1076
	movt	r2, #:upper16:.LC1075
	cmp	r0, #2
	movt	r3, #:upper16:.LC1076
	movhi	r3, r2
.L14132:
	ldr	ip, [r4, #88]
	movw	r2, #:lower16:.LC1077
	mov	r5, #0
	ldr	r0, [r4, #164]
	movt	r2, #:upper16:.LC1077
	ldr	lr, [r4, #92]
	ldr	r4, [r0, #4]
	ldr	r0, .L14163+16
	str	r4, [sp, #8]
	ldr	lr, [lr, #4]
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L14119
.L14138:
	mvn	r5, #11
	b	.L14122
.L14136:
	mvn	r5, #11
	b	.L14126
.L14162:
	ldr	r0, .L14163+20
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L14130
	ldr	r3, [r6, #20]
	cmp	r3, #4
	bls	.L14129
	ldr	r0, .L14163+24
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L14129
.L14130:
	ldr	r0, [r4, #16]
	mvn	r5, #11
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #168]
	b	.L14122
.L14140:
	movw	r3, #:lower16:.LC1090
	movt	r3, #:upper16:.LC1090
	b	.L14132
.L14164:
	.align	2
.L14163:
	.word	.LANCHOR0+3900
	.word	.LANCHOR0+3912
	.word	.LANCHOR0+3924
	.word	.LANCHOR0+4008
	.word	.LANCHOR4+3168
	.word	.LANCHOR0+4052
	.word	.LANCHOR7-4088
	.fnend
	.size	ecm_bind, .-ecm_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_bind, %function
f_audio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR4
	movw	r9, #3210
	movt	r8, #:upper16:.LANCHOR4
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r8, r9]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r1, #136]
	ldr	r7, [r0, #24]
	tst	r2, #4
	movweq	r4, #:lower16:.LANCHOR7
	uxtbeq	r2, r3
	movteq	r4, #:upper16:.LANCHOR7
	strbeq	r2, [r4, #-4029]
	bne	.L14197
.L14167:
	movw	r9, #3234
	strb	r2, [r4, #-4020]
	ldr	r3, [r5, #164]
	ldrh	r2, [r8, r9]
	tst	r2, #4
	uxtbeq	r2, r3
	strbeq	r2, [r4, #-4005]
	bne	.L14198
.L14169:
	movw	r3, #3258
	strb	r2, [r4, #-3996]
	ldr	r2, [r5, #140]
	ldrh	r3, [r8, r3]
	tst	r3, #4
	bne	.L14199
.L14170:
	movw	r3, #3282
	ldr	ip, .L14204
	ubfx	r1, r2, #16, #8
	ldrh	r0, [r8, r3]
	str	r2, [sp, #4]
	ldr	r3, [r5, #168]
	strh	r2, [ip]	@ movhi
	tst	r0, #4
	strb	r1, [r4, #-4014]
	bne	.L14200
.L14171:
	ldrb	r2, [r6, #44]	@ zero_extendqisi2
	ubfx	r1, r3, #16, #8
	str	r3, [sp, #4]
	ldr	r8, .L14204+4
	cmp	r2, #15
	strh	r3, [r8, #-8]	@ movhi
	strb	r1, [r8, #-6]
	bhi	.L14201
	add	r3, r2, #1
	add	r1, r2, #12
	strb	r2, [r4, #-3986]
	uxtb	r3, r3
	str	r5, [r6, r1, lsl #2]
	cmp	r3, #15
	strb	r3, [r6, #44]
	bhi	.L14175
	add	r2, r2, #2
	add	r0, r3, #12
	strb	r3, [r4, #-3974]
	mov	r9, #0
	movw	r1, #:lower16:.LANCHOR0
	strb	r3, [r4, #-3962]
	str	r5, [r6, r0, lsl #2]
	movt	r1, #:upper16:.LANCHOR0
	strb	r2, [r6, #44]
	strb	r9, [r5, #248]
	ldrb	r2, [r6, #44]	@ zero_extendqisi2
	strb	r3, [r1, #16]
	cmp	r2, #15
	bhi	.L14175
	add	r0, r2, #12
	add	r3, r2, #1
	strb	r2, [r1, #17]
	add	r10, r8, #56
	strb	r2, [r4, #-3950]
	str	r5, [r6, r0, lsl #2]
	mov	r1, r10
	strb	r2, [r4, #-3938]
	mov	r2, r9
	strb	r3, [r6, #44]
	strb	r9, [r5, #249]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14202
	add	fp, r8, #68
	str	r0, [r5, #176]
	mov	r2, r9
	str	r7, [r0]
	mov	r1, fp
	str	r10, [r0, #28]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r6, r0, #0
	beq	.L14203
	str	r6, [r5, #172]
	add	r0, r8, #144
	str	r7, [r6]
	ldrb	r2, [r4, #-3926]	@ zero_extendqisi2
	str	fp, [r6, #28]
	ldr	r1, [r5, #20]
	ldrb	r3, [r4, #-3914]	@ zero_extendqisi2
	and	r2, r2, #127
	ldr	r1, [r1, #24]
	and	r3, r3, #127
	strb	r2, [r4, #-3888]
	strb	r3, [r4, #-3856]
	ldr	r4, [r1]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r5, #16]
	beq	.L14178
	ldr	r3, [r4, #20]
	cmp	r3, #2
	bhi	.L14179
.L14180:
	mov	r0, #0
.L14165:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14179:
	add	r0, r8, #144
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r5, #8]
	bne	.L14180
	ldr	r0, [r5, #16]
.L14178:
	bl	kfree
	ldr	r0, [r5, #8]
	bl	kfree
	ldr	r0, [r5, #12]
	bl	kfree
	mov	r3, #0
	mvn	r0, #11
	str	r3, [r6]
	b	.L14165
.L14200:
	movw	r1, #:lower16:.LC1092
	ldr	r2, .L14204+8
	movt	r1, #:upper16:.LC1092
	ldr	r0, .L14204+12
	bl	__dynamic_pr_debug
	ldr	r3, [r5, #168]
	b	.L14171
.L14198:
	movw	r1, #:lower16:.LC1092
	ldr	r2, .L14204+16
	movt	r1, #:upper16:.LC1092
	ldr	r0, .L14204+20
	bl	__dynamic_pr_debug
	ldr	r3, [r5, #164]
	ldrh	r1, [r8, r9]
	uxtb	r2, r3
	tst	r1, #4
	strb	r2, [r4, #-4005]
	beq	.L14169
	movw	r1, #:lower16:.LC1092
	ldr	r2, .L14204+16
	movt	r1, #:upper16:.LC1092
	ldr	r0, .L14204+20
	bl	__dynamic_pr_debug
	ldrb	r2, [r5, #164]	@ zero_extendqisi2
	b	.L14169
.L14199:
	movw	r1, #:lower16:.LC1092
	mov	r3, r2
	ldr	r0, .L14204+24
	ldr	r2, .L14204+28
	movt	r1, #:upper16:.LC1092
	bl	__dynamic_pr_debug
	ldr	r2, [r5, #140]
	b	.L14170
.L14197:
	movw	r1, #:lower16:.LC1092
	ldr	r2, .L14204+32
	movw	r4, #:lower16:.LANCHOR7
	movt	r1, #:upper16:.LC1092
	ldr	r0, .L14204+36
	movt	r4, #:upper16:.LANCHOR7
	bl	__dynamic_pr_debug
	ldr	r3, [r5, #136]
	ldrh	r1, [r8, r9]
	uxtb	r2, r3
	tst	r1, #4
	strb	r2, [r4, #-4029]
	beq	.L14167
	movw	r1, #:lower16:.LC1092
	ldr	r2, .L14204+32
	movt	r1, #:upper16:.LC1092
	ldr	r0, .L14204+36
	bl	__dynamic_pr_debug
	ldrb	r2, [r5, #136]	@ zero_extendqisi2
	b	.L14167
.L14175:
	ldr	r2, .L14204+40
	movw	r0, #:lower16:.LC1094
	movt	r0, #:upper16:.LC1094
	mov	r1, r2
	bl	printk
	mvn	r0, #18
	b	.L14165
.L14202:
	ldr	r2, .L14204+40
	movw	r0, #:lower16:.LC1095
	movt	r0, #:upper16:.LC1095
	mov	r1, r2
	bl	printk
	mvn	r0, #18
	b	.L14165
.L14203:
	ldr	r2, .L14204+40
	movw	r0, #:lower16:.LC1096
	movt	r0, #:upper16:.LC1096
	mov	r1, r2
	bl	printk
	mvn	r0, #11
	b	.L14165
.L14201:
	ldr	r2, .L14204+40
	movw	r0, #:lower16:.LC1093
	movt	r0, #:upper16:.LC1093
	mov	r1, r2
	bl	printk
	mvn	r0, #18
	b	.L14165
.L14205:
	.align	2
.L14204:
	.word	.LANCHOR7-4016
	.word	.LANCHOR7-3984
	.word	.LANCHOR5+216
	.word	.LANCHOR4+3264
	.word	.LANCHOR5+156
	.word	.LANCHOR4+3216
	.word	.LANCHOR4+3240
	.word	.LANCHOR5+188
	.word	.LANCHOR5+124
	.word	.LANCHOR4+3192
	.word	.LANCHOR5+244
	.fnend
	.size	f_audio_bind, .-f_audio_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_bind, %function
ncm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #16
	sub	sp, sp, #16
	ldr	r7, [r0, #24]
	cmp	r3, #15
	bhi	.L14207
	add	r1, r3, #12
	add	r2, r3, #1
	mov	r5, r0
	movw	r6, #:lower16:.LANCHOR7
	str	r4, [r0, r1, lsl #2]
	movt	r6, #:upper16:.LANCHOR7
	strb	r2, [r0, #44]
	strb	r3, [r4, #148]
	ldrb	r0, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r6, #-3762]
	strb	r3, [r6, #-3754]
	strb	r3, [r6, #-3741]
	cmp	r0, #15
	bls	.L14254
.L14207:
	mvn	r5, #18
.L14209:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #168]
	cmp	r3, #0
	beq	.L14219
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #164]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L14219:
	ldr	r3, [r4, #164]
	movw	r1, #:lower16:.LC1091
	movt	r1, #:upper16:.LC1091
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r7]
	mov	r3, r5
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L14206:
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14254:
	add	r1, r0, #12
	add	r3, r0, #1
	strb	r0, [r6, #-3740]
	strb	r0, [r6, #-3734]
	mov	r2, #0
	str	r4, [r5, r1, lsl #2]
	sub	r1, r6, #3712
	strb	r3, [r5, #44]
	strb	r0, [r6, #-3722]
	strb	r0, [r4, #149]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14207
	str	r0, [r4, #88]
	mov	r2, #0
	ldr	r1, .L14256
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14207
	str	r0, [r4, #92]
	mov	r2, #0
	ldr	r1, .L14256+4
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L14207
	str	r3, [r4, #164]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r8, r0
	str	r0, [r4, #168]
	beq	.L14211
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L14210
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L14210:
	str	r0, [r8]
	ldr	r3, [r4, #168]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L14211
	str	r4, [r3, #32]
	ldr	r2, [r4, #168]
	movw	r3, #:lower16:ncm_notify_complete
	movt	r3, #:upper16:ncm_notify_complete
	ldrb	r0, [r6, #-3710]	@ zero_extendqisi2
	ldrb	r1, [r6, #-3698]	@ zero_extendqisi2
	str	r3, [r2, #28]
	ldr	r3, [r4, #20]
	ldrb	r2, [r6, #-3686]	@ zero_extendqisi2
	strb	r0, [r6, #-3674]
	ldr	r0, .L14256+8
	strb	r1, [r6, #-3662]
	ldr	r3, [r3, #24]
	strb	r2, [r6, #-3650]
	ldr	r6, [r3]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L14215
	ldr	r3, [r6, #20]
	cmp	r3, #2
	bhi	.L14255
.L14213:
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #3306
	movt	r3, #:upper16:.LANCHOR4
	movw	r1, #:lower16:ncm_open
	ldrh	r3, [r3, r2]
	movw	r2, #:lower16:ncm_close
	movt	r1, #:upper16:ncm_open
	movt	r2, #:upper16:ncm_close
	str	r1, [r4, #136]
	str	r2, [r4, #140]
	ubfx	r3, r3, #2, #1
	cmp	r3, #0
	moveq	r5, r3
	beq	.L14206
	ldr	lr, [r5, #24]
	movw	r0, #:lower16:.LC1076
	movw	r3, #:lower16:.LC1075
	ldr	ip, [r4, #164]
	movt	r0, #:upper16:.LC1076
	movt	r3, #:upper16:.LC1075
	ldr	r2, [r4, #92]
	ldr	r1, [r7]
	ldr	r5, [lr]
	ldr	lr, [ip, #4]
	ldr	ip, [r4, #88]
	add	r1, r1, #32
	ldr	r4, [r5, #20]
	mov	r5, #0
	str	lr, [sp, #8]
	ldr	lr, [r2, #4]
	movw	r2, #:lower16:.LC1097
	movt	r2, #:upper16:.LC1097
	cmp	r4, #2
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	movls	r3, r0
	ldr	r0, .L14256+12
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L14206
.L14211:
	mvn	r5, #11
	b	.L14209
.L14255:
	ldr	r0, .L14256+16
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	bne	.L14213
.L14215:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	b	.L14213
.L14257:
	.align	2
.L14256:
	.word	.LANCHOR7-3700
	.word	.LANCHOR7-3688
	.word	.LANCHOR7-3640
	.word	.LANCHOR4+3288
	.word	.LANCHOR7-3592
	.fnend
	.size	ncm_bind, .-ncm_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_bind, %function
fsg_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #24]
	.pad #20
	sub	sp, sp, #20
	ldr	r9, [r3]
	str	r9, [r1, #84]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L14303
	mov	r7, r1
	add	ip, r3, #12
	add	r1, r3, #1
	movw	r6, #:lower16:.LANCHOR7
	str	r7, [r0, ip, lsl #2]
	movw	r2, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR7
	strb	r1, [r0, #44]
	movt	r2, #:upper16:.LANCHOR0
	movw	r0, #:lower16:.LC471
	strh	r3, [r7, #92]	@ movhi
	ldr	r10, [r9, #28]
	movt	r0, #:upper16:.LC471
	ldrb	r8, [r6, #-3541]	@ zero_extendqisi2
	strb	r3, [r2, #2790]
	add	r5, r9, #8
	mov	r1, r10
	bl	strcmp
	cmp	r0, #0
	and	r8, r8, #3
	bne	.L14260
	ldr	r3, [r9, #8]
	cmp	r8, #3
	sub	r4, r3, #12
	mov	fp, r3
	beq	.L14360
	movw	r0, #:lower16:.LC474
	mov	r1, r10
	movt	r0, #:upper16:.LC474
	bl	strcmp
	cmp	r0, #0
	bne	.L14270
.L14271:
	cmp	r8, #2
	beq	.L14361
.L14270:
	cmp	fp, r5
	beq	.L14273
.L14269:
	ldrb	r8, [r6, #-3541]	@ zero_extendqisi2
	and	r8, r8, #3
.L14302:
	movw	r3, #:lower16:.LC473
	movw	r10, #:lower16:_ctype
	movw	fp, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LC473
	movt	fp, #:upper16:.LANCHOR1
	movt	r10, #:upper16:_ctype
	mov	r2, r7
	str	r3, [sp, #4]
	mov	r7, fp
	mov	fp, r10
	b	.L14297
.L14280:
	ldr	r4, [r4, #12]
	cmp	r5, r4
	sub	r4, r4, #12
	beq	.L14362
.L14297:
	ldr	r1, [r4]
	cmp	r1, #0
	bne	.L14280
	cmp	r8, #0
	beq	.L14280
	ldr	r10, [r4, #4]
	ldrb	r1, [r10]	@ zero_extendqisi2
	cmp	r1, #101
	bne	.L14280
	ldrb	r1, [r10, #2]	@ zero_extendqisi2
	cmp	r1, #45
	beq	.L14281
	mov	r1, #45
	mov	r0, r10
	str	r2, [sp, #8]
	bl	strrchr
	subs	r3, r0, #0
	ldr	r2, [sp, #8]
	beq	.L14282
	cmp	r8, #2
	beq	.L14284
	cmp	r8, #3
	ldrb	r1, [r3, #2]	@ zero_extendqisi2
	bne	.L14353
	cmp	r1, #115
	str	r3, [sp, #8]
	beq	.L14280
	ldr	r1, [r9, #28]
	str	r2, [sp, #12]
	ldr	r0, [sp, #4]
	bl	strcmp
	cmp	r0, #0
	ldr	r3, [sp, #8]
	ldr	r2, [sp, #12]
	bne	.L14286
	ldrb	r1, [r3, #1]	@ zero_extendqisi2
	cmp	r1, #105
	bne	.L14286
	b	.L14280
.L14260:
	movw	r0, #:lower16:.LC474
	mov	r1, r10
	movt	r0, #:upper16:.LC474
	bl	strcmp
	ldr	r3, [r9, #8]
	cmp	r0, #0
	sub	r4, r3, #12
	mov	fp, r3
	bne	.L14270
	cmp	r8, #3
	bne	.L14271
	cmp	r5, r3
	beq	.L14273
	movw	fp, #:lower16:.LC1073
	mov	r10, r4
	movt	fp, #:upper16:.LC1073
	b	.L14272
.L14363:
	ldr	r10, [r10, #12]
	cmp	r5, r10
	sub	r10, r10, #12
	beq	.L14269
.L14272:
	mov	r1, fp
	ldr	r0, [r10, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L14363
	cmp	r10, #0
	beq	.L14302
	ldr	r3, [r10]
	cmp	r3, #0
	ldreq	r2, .L14370
	bne	.L14302
.L14359:
	mov	r1, r10
	mov	r0, r9
	bl	ep_matches.part.13
	cmp	r0, #0
	beq	.L14356
	mov	r4, r10
	b	.L14266
.L14362:
	mov	r7, r2
.L14273:
	ldr	r0, [r7, #84]
	movw	r1, #:lower16:.LC1098
	movt	r1, #:upper16:.LC1098
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #65012
	movt	r0, 65535
.L14258:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14282:
	mov	r0, r10
	str	r2, [sp, #8]
	bl	strlen
	ldr	r2, [sp, #8]
	add	r3, r10, r0
.L14286:
	ldrb	r1, [r3, #-1]	@ zero_extendqisi2
	ldrb	r0, [fp, r1]	@ zero_extendqisi2
	tst	r0, #4
	bne	.L14281
	ldr	r0, .L14370+4
	ldrsb	r0, [r0]
	cmp	r0, #0
	blt	.L14364
	cmp	r1, #116
	bne	.L14280
.L14281:
	ldr	r3, .L14370+8
	ldrh	r1, [r3, #-4]
	cmp	r1, #0
	ldrheq	r1, [r4, #20]
	strheq	r1, [r3, #-4]	@ movhi
	cmp	r8, #1
	ubfx	r0, r1, #0, #11
	beq	.L14290
	cmp	r8, #3
	bne	.L14289
	ldr	r3, [r9, #20]
	cmp	r3, #2
	movls	ip, #1
	movhi	ip, #0
	cmp	r0, #64
	movls	ip, #0
	cmp	ip, #0
	bne	.L14280
.L14290:
	ldrh	ip, [r4, #20]
	cmp	ip, r0
	bcc	.L14280
	ldr	ip, [r9, #20]
	cmp	ip, #2
	bhi	.L14289
	cmp	r0, #1024
	bcs	.L14280
	tst	r1, #6144
	bne	.L14280
.L14289:
	ldrb	ip, [r6, #-3542]	@ zero_extendqisi2
	ldr	r0, [r4, #4]
	and	ip, ip, #128
	strb	ip, [r6, #-3542]
	ldrb	r1, [r0, #2]	@ zero_extendqisi2
	ldrb	r1, [fp, r1]	@ zero_extendqisi2
	tst	r1, #4
	bne	.L14365
	ldr	r1, [r7, #3228]
	add	r1, r1, #1
	cmp	r1, #15
	str	r1, [r7, #3228]
	bhi	.L14280
	orr	r3, ip, r1
	mov	r7, r2
	uxtb	r3, r3
	strb	r3, [r6, #-3542]
.L14294:
	cmp	r8, #2
	bne	.L14295
	ldrh	r2, [r4, #20]
	ldr	r1, .L14370+8
	cmp	r2, #64
	movge	r2, #64
	strh	r2, [r1, #-4]	@ movhi
.L14295:
	mov	r2, #0
	cmp	r4, #0
	strb	r3, [r4, #25]
	str	r2, [r4, #28]
	str	r2, [r4, #32]
	beq	.L14273
.L14296:
	ldr	r3, [r7, #88]
	mov	r0, r9
	mov	r2, #0
	ldr	r1, .L14370+12
	str	r3, [r4]
	str	r4, [r7, #100]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L14273
	ldr	r2, [r7, #88]
	mov	r1, #15
	ldr	r0, .L14370+16
	str	r2, [r3]
	ldr	ip, [r7, #20]
	str	r3, [r7, #104]
	ldrb	r2, [r6, #-3542]	@ zero_extendqisi2
	ldrb	r3, [r6, #-3530]	@ zero_extendqisi2
	strb	r1, [r6, #-3482]
	strb	r1, [r6, #-3462]
	ldr	r1, [ip, #24]
	strb	r2, [r6, #-3518]
	strb	r3, [r6, #-3506]
	strb	r2, [r6, #-3494]
	strb	r3, [r6, #-3474]
	ldr	r4, [r1]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r7, #16]
	beq	.L14298
	ldr	r3, [r4, #20]
	cmp	r3, #2
	bhi	.L14366
.L14299:
	mov	r0, #0
	b	.L14258
.L14361:
	ldr	r3, .L14370+8
	ldrsb	r3, [r3, #-6]
	cmp	r3, #0
	bge	.L14270
	cmp	r5, fp
	beq	.L14273
	movw	fp, #:lower16:.LC1074
	mov	r10, r4
	movt	fp, #:upper16:.LC1074
	b	.L14279
.L14367:
	ldr	r10, [r10, #12]
	cmp	r5, r10
	sub	r10, r10, #12
	beq	.L14269
.L14279:
	mov	r1, fp
	ldr	r0, [r10, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L14367
	cmp	r10, #0
	beq	.L14302
	ldr	r3, [r10]
	cmp	r3, #0
	bne	.L14302
	ldr	r2, .L14370+8
	sub	r2, r2, #8
	b	.L14359
.L14360:
	cmp	r5, r3
	beq	.L14273
	movw	r10, #:lower16:.LC1071
	mov	r8, r4
	movt	r10, #:upper16:.LC1071
	b	.L14264
.L14368:
	ldr	r8, [r8, #12]
	cmp	r5, r8
	sub	r8, r8, #12
	beq	.L14265
.L14264:
	mov	r1, r10
	ldr	r0, [r8, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L14368
	cmp	r8, #0
	beq	.L14265
	ldr	r3, [r8]
	cmp	r3, #0
	bne	.L14265
	ldr	r2, .L14370
	mov	r1, r8
	mov	r0, r9
	bl	ep_matches.part.13
	cmp	r0, #0
	bne	.L14305
	ldr	r4, [r9, #8]
	cmp	r5, r4
	sub	r4, r4, #12
	beq	.L14273
.L14265:
	movw	r10, #:lower16:.LC1072
	mov	r8, r4
	movt	r10, #:upper16:.LC1072
	b	.L14268
.L14369:
	ldr	r8, [r8, #12]
	cmp	r5, r8
	sub	r8, r8, #12
	beq	.L14269
.L14268:
	mov	r1, r10
	ldr	r0, [r8, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L14369
	cmp	r8, #0
	beq	.L14269
	ldr	r3, [r8]
	cmp	r3, #0
	bne	.L14269
	ldr	r2, .L14370
	mov	r1, r8
	mov	r0, r9
	bl	ep_matches.part.13
	cmp	r0, #0
	beq	.L14356
.L14305:
	mov	r4, r8
.L14266:
	mov	r3, #0
	str	r3, [r4, #28]
	str	r3, [r4, #32]
	b	.L14296
.L14366:
	ldr	r0, .L14370+20
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r7, #8]
	beq	.L14357
	ldr	r3, [r4, #20]
	cmp	r3, #4
	bls	.L14299
	ldr	r0, .L14370+24
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r7, #12]
	bne	.L14299
.L14357:
	ldr	r0, [r7, #16]
.L14298:
	bl	kfree
	ldr	r0, [r7, #8]
	bl	kfree
	ldr	r0, [r7, #12]
	bl	kfree
	b	.L14273
.L14284:
	ldrb	r1, [r3, #1]	@ zero_extendqisi2
	cmp	r1, #98
	bne	.L14280
	b	.L14286
.L14353:
	cmp	r1, #115
	bne	.L14280
	b	.L14286
.L14303:
	mvn	r0, #18
	b	.L14258
.L14365:
	mov	r7, r2
	add	r0, r0, #2
	mov	r2, #10
	mov	r1, #0
	bl	simple_strtoul
	ldrb	r3, [r6, #-3542]	@ zero_extendqisi2
	orr	r3, r3, r0
	uxtb	r3, r3
	strb	r3, [r6, #-3542]
	b	.L14294
.L14364:
	cmp	r1, #110
	bne	.L14280
	b	.L14281
.L14356:
	ldr	fp, [r9, #8]
	sub	r4, fp, #12
	b	.L14270
.L14371:
	.align	2
.L14370:
	.word	.LANCHOR7-3544
	.word	.LANCHOR7-3542
	.word	.LANCHOR7-3536
	.word	.LANCHOR7-3532
	.word	.LANCHOR7-3456
	.word	.LANCHOR7-3440
	.word	.LANCHOR7-3424
	.fnend
	.size	fsg_bind, .-fsg_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_bind, %function
ccid_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r0, #24]
	cmp	r3, #15
	bls	.L14373
	mvn	r3, #18
	movw	r0, #:lower16:.LC1099
	ldr	r1, .L14399
	mov	r2, r3
	movt	r0, #:upper16:.LC1099
	str	r3, [r4, #88]
	bl	printk
	ldr	r0, [r4, #88]
.L14372:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L14373:
	movw	r6, #:lower16:.LANCHOR7
	add	r2, r3, #12
	add	r1, r3, #1
	movt	r6, #:upper16:.LANCHOR7
	sub	r7, r6, #3376
	str	r4, [r0, r2, lsl #2]
	mov	r2, #0
	strb	r1, [r0, #44]
	sub	r1, r7, #12
	str	r3, [r4, #88]
	strb	r3, [r6, #-3398]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14395
	str	r0, [r4, #100]
	mov	r1, r7
	mov	r2, #0
	str	r5, [r0]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14396
	str	r0, [r4, #104]
	mov	r2, #0
	ldr	r1, .L14399+4
	str	r5, [r0]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L14397
	str	r3, [r4, #108]
	ldr	r0, .L14399+8
	str	r5, [r3]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L14379
	ldr	r3, [r5]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L14398
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #3330
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L14384
.L14394:
	mov	r0, #0
	b	.L14372
.L14398:
	ldrb	r1, [r6, #-3374]	@ zero_extendqisi2
	ldrb	r2, [r6, #-3362]	@ zero_extendqisi2
	ldrb	r3, [r6, #-3386]	@ zero_extendqisi2
	ldr	r0, .L14399+12
	strb	r1, [r6, #-3350]
	strb	r2, [r6, #-3338]
	strb	r3, [r6, #-3326]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L14379
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #3330
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r2]
	tst	r3, #4
	beq	.L14394
	ldr	r3, [r5]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	movwhi	r3, #:lower16:.LC1075
	movthi	r3, #:upper16:.LC1075
	bhi	.L14383
.L14384:
	movw	r3, #:lower16:.LC1076
	movt	r3, #:upper16:.LC1076
.L14383:
	ldr	ip, [r4, #104]
	movw	r1, #:lower16:.LC1101
	ldr	lr, [r4, #108]
	movt	r1, #:upper16:.LC1101
	ldr	r2, .L14399
	ldr	r0, .L14399+16
	ldr	lr, [lr, #4]
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L14394
.L14397:
	movw	r0, #:lower16:.LC1081
	ldr	r1, .L14399
	movt	r0, #:upper16:.LC1081
	bl	printk
.L14379:
	ldr	r2, [r4, #108]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r4, #108]
.L14377:
	ldr	r2, [r4, #104]
	mov	r3, #0
	mvn	r0, #18
	str	r3, [r2]
	str	r3, [r4, #104]
	b	.L14372
.L14396:
	movw	r0, #:lower16:.LC1079
	ldr	r1, .L14399
	movt	r0, #:upper16:.LC1079
	bl	printk
	b	.L14377
.L14395:
	movw	r0, #:lower16:.LC1100
	ldr	r1, .L14399
	movt	r0, #:upper16:.LC1100
	bl	printk
	mvn	r0, #18
	b	.L14372
.L14400:
	.align	2
.L14399:
	.word	.LANCHOR5+260
	.word	.LANCHOR7-3364
	.word	.LANCHOR0+2280
	.word	.LANCHOR0+2304
	.word	.LANCHOR4+3312
	.fnend
	.size	ccid_function_bind, .-ccid_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_bind, %function
qdss_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #3354
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r5, r1
	str	r8, [sp, #16]
	mov	r6, r0
	str	lr, [sp, #20]
	ldrh	r2, [r3, r2]
	ldr	r3, [r0, #24]
	tst	r2, #4
	ldr	r7, [r3]
	bne	.L14453
.L14402:
	ldr	r3, [r7, #20]
	cmp	r3, #2
	bls	.L14454
	ldrb	r3, [r6, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L14406
	add	r1, r3, #12
	add	r2, r3, #1
	movw	r4, #:lower16:.LANCHOR7
	str	r5, [r6, r1, lsl #2]
	movt	r4, #:upper16:.LANCHOR7
	strb	r2, [r6, #44]
	strb	r3, [r5, #89]
	ldrb	ip, [r6, #44]	@ zero_extendqisi2
	strb	r3, [r4, #-3314]
	cmp	ip, #15
	bhi	.L14406
	add	r2, ip, #12
	add	r3, ip, #1
	strb	ip, [r4, #-3302]
	mov	r0, r7
	str	r5, [r6, r2, lsl #2]
	ldr	r2, .L14459
	strb	r3, [r6, #44]
	strb	ip, [r5, #88]
	add	r1, r2, #8
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14409
	str	r0, [r5, #108]
	ldr	r2, .L14459+4
	sub	r1, r4, #3264
	str	r5, [r0]
	mov	r0, r7
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14409
	sub	r1, r4, #3232
	str	r0, [r5, #104]
	ldr	r2, .L14459+8
	str	r5, [r0]
	sub	r1, r1, #12
	mov	r0, r7
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L14409
	str	r3, [r5, #100]
	ldr	r0, .L14459+12
	str	r5, [r3]
	ldrb	r1, [r4, #-3282]	@ zero_extendqisi2
	ldrb	r2, [r4, #-3262]	@ zero_extendqisi2
	ldrb	r3, [r4, #-3242]	@ zero_extendqisi2
	strb	r1, [r4, #-3230]
	strb	r2, [r4, #-3218]
	strb	r3, [r4, #-3206]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r5, #8]
	beq	.L14412
	ldr	r3, [r7, #20]
	cmp	r3, #4
	bhi	.L14455
.L14411:
	movw	r0, #:lower16:.LC495
	ldr	r1, [r7, #28]
	movt	r0, #:upper16:.LC495
	bl	strcmp
	subs	r4, r0, #0
	movne	r4, #0
	beq	.L14456
.L14401:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14455:
	ldr	r0, .L14459+16
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r5, #12]
	bne	.L14411
.L14412:
	movw	r0, #:lower16:.LC1106
	movt	r0, #:upper16:.LC1106
	bl	printk
.L14408:
	ldr	r4, .L14459+20
	ldrh	r3, [r4, #-14]
	tst	r3, #4
	bne	.L14457
.L14413:
	ldr	r3, [r5, #104]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r5, #100]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r5, #108]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, .L14459+24
	ldrh	r3, [r3, #-2]
	tst	r3, #4
	bne	.L14458
.L14417:
	ldr	r3, [r7, #20]
	cmp	r3, #4
	bls	.L14418
	ldr	r0, [r5, #12]
	cmp	r0, #0
	beq	.L14418
	bl	kfree
	ldr	r3, [r7, #20]
.L14418:
	cmp	r3, #2
	movwls	r4, #65012
	movtls	r4, 65535
	bls	.L14401
	ldr	r0, [r5, #8]
	movw	r4, #65012
	cmp	r0, #0
	movteq	r4, 65535
	beq	.L14401
	bl	kfree
	movt	r4, 65535
	b	.L14401
.L14456:
	mov	r1, #1
	ldr	r0, [r5, #108]
	bl	dwc3_tx_fifo_resize_request
	b	.L14401
.L14453:
	movw	r1, #:lower16:.LC1102
	ldr	r0, .L14459+28
	movt	r1, #:upper16:.LC1102
	bl	__dynamic_pr_debug
	b	.L14402
.L14409:
	movw	r0, #:lower16:.LC1105
	movt	r0, #:upper16:.LC1105
	bl	printk
	b	.L14408
.L14406:
	movw	r0, #:lower16:.LC1104
	mvn	r4, #18
	movt	r0, #:upper16:.LC1104
	bl	printk
	b	.L14401
.L14454:
	movw	r0, #:lower16:.LC1103
	movw	r4, #65012
	movt	r0, #:upper16:.LC1103
	movt	r4, 65535
	bl	printk
	b	.L14401
.L14458:
	movw	r1, #:lower16:.LC709
	sub	r0, r4, #8
	movt	r1, #:upper16:.LC709
	bl	__dynamic_pr_debug
	b	.L14417
.L14457:
	movw	r1, #:lower16:.LC708
	sub	r0, r4, #32
	movt	r1, #:upper16:.LC708
	bl	__dynamic_pr_debug
	b	.L14413
.L14460:
	.align	2
.L14459:
	.word	.LANCHOR7-3292
	.word	.LANCHOR7-3272
	.word	.LANCHOR7-3252
	.word	.LANCHOR7-3196
	.word	.LANCHOR7-3172
	.word	.LANCHOR4-1024
	.word	.LANCHOR4-1012
	.word	.LANCHOR4+3336
	.fnend
	.size	qdss_bind, .-qdss_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_bind, %function
rmnet_mux_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r8, [r0, #24]
	.pad #28
	sub	sp, sp, #28
	str	r8, [r1, #84]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L14504
	movw	r7, #:lower16:.LANCHOR7
	mov	ip, r0
	mov	r5, r1
	movt	r7, #:upper16:.LANCHOR7
	add	r1, r3, #12
	add	r2, r3, #1
	ldrb	r6, [r7, #-3121]	@ zero_extendqisi2
	strb	r3, [r7, #-3134]
	str	r5, [r0, r1, lsl #2]
	movw	r0, #:lower16:.LC471
	strb	r2, [ip, #44]
	movt	r0, #:upper16:.LC471
	strb	r3, [r5, #360]
	ldr	r4, [r8]
	and	r6, r6, #3
	ldr	fp, [r4, #28]
	str	r4, [sp, #4]
	str	ip, [sp, #8]
	mov	r1, fp
	bl	strcmp
	cmp	r0, #0
	bne	.L14464
	ldr	r9, [r4, #8]!
	cmp	r6, #3
	sub	r10, r9, #12
	beq	.L14569
	movw	r0, #:lower16:.LC474
	mov	r1, fp
	movt	r0, #:upper16:.LC474
	bl	strcmp
	cmp	r0, #0
	bne	.L14473
.L14475:
	cmp	r6, #2
	beq	.L14570
.L14473:
	cmp	r9, r4
	beq	.L14476
.L14474:
	ldrb	r6, [r7, #-3121]	@ zero_extendqisi2
	and	r6, r6, #3
.L14505:
	movw	fp, #:lower16:.LC473
	movw	r2, #:lower16:_ctype
	movw	r9, #:lower16:.LANCHOR1
	movt	fp, #:upper16:.LC473
	movt	r2, #:upper16:_ctype
	movt	r9, #:upper16:.LANCHOR1
	mov	r3, r5
	str	fp, [sp, #12]
	mov	r5, r8
	mov	r8, r9
	mov	r9, r2
	mov	r2, r3
	b	.L14500
.L14483:
	ldr	r10, [r10, #12]
	cmp	r4, r10
	sub	r10, r10, #12
	beq	.L14571
.L14500:
	ldr	r3, [r10]
	cmp	r3, #0
	bne	.L14483
	cmp	r6, #0
	beq	.L14483
	ldr	fp, [r10, #4]
	ldrb	r3, [fp]	@ zero_extendqisi2
	cmp	r3, #101
	bne	.L14483
	ldrb	r3, [fp, #2]	@ zero_extendqisi2
	cmp	r3, #45
	beq	.L14484
	mov	r1, #45
	mov	r0, fp
	str	r2, [sp, #16]
	bl	strrchr
	subs	r3, r0, #0
	ldr	r2, [sp, #16]
	beq	.L14485
	cmp	r6, #2
	beq	.L14487
	cmp	r6, #3
	ldrb	r1, [r3, #2]	@ zero_extendqisi2
	bne	.L14563
	cmp	r1, #115
	str	r3, [sp, #16]
	beq	.L14483
	ldr	r3, [sp, #4]
	str	r2, [sp, #20]
	ldr	r0, [sp, #12]
	ldr	r1, [r3, #28]
	bl	strcmp
	cmp	r0, #0
	ldr	r3, [sp, #16]
	ldr	r2, [sp, #20]
	bne	.L14489
	ldrb	r1, [r3, #1]	@ zero_extendqisi2
	cmp	r1, #105
	bne	.L14489
	b	.L14483
.L14464:
	movw	r0, #:lower16:.LC474
	mov	r1, fp
	movt	r0, #:upper16:.LC474
	bl	strcmp
	ldr	r2, [r4, #8]!
	cmp	r0, #0
	sub	r10, r2, #12
	mov	r9, r2
	bne	.L14473
	cmp	r6, #3
	bne	.L14475
	cmp	r4, r2
	beq	.L14476
	movw	fp, #:lower16:.LC1073
	mov	r9, r10
	movt	fp, #:upper16:.LC1073
	b	.L14478
.L14572:
	ldr	r9, [r9, #12]
	cmp	r4, r9
	sub	r9, r9, #12
	beq	.L14474
.L14478:
	mov	r1, fp
	ldr	r0, [r9, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L14572
	cmp	r9, #0
	beq	.L14505
	ldr	r3, [r9]
	cmp	r3, #0
	ldreq	r2, .L14578
	bne	.L14505
.L14568:
	ldr	r6, [sp, #4]
	mov	r1, r9
	mov	r0, r6
	bl	ep_matches.part.13
	cmp	r0, #0
	bne	.L14509
	ldr	r9, [r6, #8]
	sub	r10, r9, #12
	b	.L14473
.L14571:
	mov	r5, r2
.L14476:
	ldr	r3, [r5, #96]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r5, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r5, #92]
	cmp	r3, #0
	beq	.L14504
	mov	r2, #0
	mvn	r0, #18
	str	r2, [r3]
.L14461:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14504:
	mvn	r0, #18
	b	.L14461
.L14485:
	mov	r0, fp
	str	r2, [sp, #16]
	bl	strlen
	ldr	r2, [sp, #16]
	add	r3, fp, r0
.L14489:
	ldrb	r3, [r3, #-1]	@ zero_extendqisi2
	ldrb	r1, [r9, r3]	@ zero_extendqisi2
	tst	r1, #4
	bne	.L14484
	ldr	r1, .L14578+4
	ldrsb	r1, [r1]
	cmp	r1, #0
	blt	.L14573
	cmp	r3, #116
	bne	.L14483
.L14484:
	ldr	r1, .L14578+8
	ldrh	r3, [r1], #-4
	cmp	r3, #0
	ldrheq	r3, [r10, #20]
	strheq	r3, [r1, #4]	@ movhi
	cmp	r6, #1
	ubfx	r1, r3, #0, #11
	beq	.L14493
	cmp	r6, #3
	bne	.L14492
	ldr	r0, [sp, #4]
	ldr	ip, [r0, #20]
	cmp	ip, #2
	movls	r0, #1
	movhi	r0, #0
	cmp	r1, #64
	movls	r0, #0
	cmp	r0, #0
	bne	.L14483
.L14493:
	ldrh	r0, [r10, #20]
	cmp	r0, r1
	bcc	.L14483
	ldr	r0, [sp, #4]
	ldr	r0, [r0, #20]
	cmp	r0, #2
	bhi	.L14492
	cmp	r1, #1024
	bcs	.L14483
	tst	r3, #6144
	bne	.L14483
.L14492:
	ldrb	r1, [r7, #-3122]	@ zero_extendqisi2
	ldr	r0, [r10, #4]
	and	r1, r1, #128
	strb	r1, [r7, #-3122]
	ldrb	r3, [r0, #2]	@ zero_extendqisi2
	ldrb	r3, [r9, r3]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L14574
	ldr	r0, [r8, #3228]
	add	r0, r0, #1
	cmp	r0, #15
	str	r0, [r8, #3228]
	bhi	.L14483
	mov	r8, r5
	mov	r5, r2
	orr	r2, r1, r0
	uxtb	r2, r2
	strb	r2, [r7, #-3122]
.L14497:
	cmp	r6, #2
	bne	.L14498
	ldrh	r1, [r10, #20]
	ldr	r3, .L14578+8
	cmp	r1, #64
	movge	r1, #64
	strh	r1, [r3]	@ movhi
.L14498:
	mov	r1, #0
	cmp	r10, #0
	strb	r2, [r10, #25]
	str	r1, [r10, #28]
	str	r1, [r10, #32]
	beq	.L14476
.L14499:
	str	r8, [r10]
	mov	r2, #0
	ldr	r1, .L14578+12
	str	r10, [r5, #92]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14476
	str	r8, [r0]
	mov	r2, #0
	ldr	r1, .L14578+16
	str	r0, [r5, #88]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14476
	ldr	r3, [sp, #8]
	str	r8, [r0]
	str	r0, [r5, #96]
	ldr	r3, [r3, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L14501
	ldrb	r1, [r7, #-3122]	@ zero_extendqisi2
	ldrb	r2, [r7, #-3110]	@ zero_extendqisi2
	ldrb	r3, [r7, #-3098]	@ zero_extendqisi2
	strb	r1, [r7, #-3086]
	strb	r2, [r7, #-3074]
	strb	r3, [r7, #-3062]
.L14501:
	mov	r3, #0
	add	r2, r5, #256
	ldr	r1, [r5, #380]
	mov	r0, #4
	bl	queue_delayed_work_on
	mov	r0, #0
	b	.L14461
.L14570:
	ldr	r3, .L14578+8
	ldrsb	r2, [r3, #-2]
	cmp	r2, #0
	bge	.L14473
	cmp	r9, r4
	beq	.L14476
	movw	fp, #:lower16:.LC1074
	mov	r9, r10
	movt	fp, #:upper16:.LC1074
	b	.L14482
.L14575:
	ldr	r9, [r9, #12]
	cmp	r4, r9
	sub	r9, r9, #12
	beq	.L14474
.L14482:
	mov	r1, fp
	ldr	r0, [r9, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L14575
	cmp	r9, #0
	beq	.L14505
	ldr	r3, [r9]
	cmp	r3, #0
	bne	.L14505
	ldr	r2, .L14578+8
	sub	r2, r2, #4
	b	.L14568
.L14569:
	cmp	r4, r9
	beq	.L14476
	movw	fp, #:lower16:.LC1071
	mov	r6, r10
	movt	fp, #:upper16:.LC1071
	b	.L14468
.L14576:
	ldr	r6, [r6, #12]
	cmp	r4, r6
	sub	r6, r6, #12
	beq	.L14469
.L14468:
	mov	r1, fp
	ldr	r0, [r6, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L14576
	cmp	r6, #0
	beq	.L14469
	ldr	r3, [r6]
	cmp	r3, #0
	bne	.L14469
	ldr	r9, [sp, #4]
	mov	r1, r6
	ldr	r2, .L14578
	mov	r0, r9
	bl	ep_matches.part.13
	cmp	r0, #0
	bne	.L14507
	ldr	r3, [r9, #8]
	cmp	r3, r4
	mov	r9, r3
	sub	r10, r3, #12
	beq	.L14476
.L14469:
	movw	fp, #:lower16:.LC1072
	mov	r6, r10
	movt	fp, #:upper16:.LC1072
	b	.L14472
.L14577:
	ldr	r6, [r6, #12]
	cmp	r4, r6
	sub	r6, r6, #12
	beq	.L14473
.L14472:
	mov	r1, fp
	ldr	r0, [r6, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L14577
	cmp	r6, #0
	beq	.L14474
	ldr	r3, [r6]
	cmp	r3, #0
	bne	.L14474
	ldr	r9, [sp, #4]
	mov	r1, r6
	ldr	r2, .L14578
	mov	r0, r9
	bl	ep_matches.part.13
	cmp	r0, #0
	bne	.L14507
	ldr	r9, [r9, #8]
	sub	r10, r9, #12
	b	.L14473
.L14487:
	ldrb	r1, [r3, #1]	@ zero_extendqisi2
	cmp	r1, #98
	bne	.L14483
	b	.L14489
.L14563:
	cmp	r1, #115
	bne	.L14483
	b	.L14489
.L14574:
	mov	r8, r5
	add	r0, r0, #2
	mov	r5, r2
	mov	r1, #0
	mov	r2, #10
	bl	simple_strtoul
	ldrb	r2, [r7, #-3122]	@ zero_extendqisi2
	orr	r2, r2, r0
	uxtb	r2, r2
	strb	r2, [r7, #-3122]
	b	.L14497
.L14573:
	cmp	r3, #110
	bne	.L14483
	b	.L14484
.L14507:
	mov	r10, r6
.L14470:
	mov	r2, #0
	str	r2, [r10, #28]
	str	r2, [r10, #32]
	b	.L14499
.L14509:
	mov	r10, r9
	b	.L14470
.L14579:
	.align	2
.L14578:
	.word	.LANCHOR7-3124
	.word	.LANCHOR7-3122
	.word	.LANCHOR7-3120
	.word	.LANCHOR7-3112
	.word	.LANCHOR7-3100
	.fnend
	.size	rmnet_mux_bind, .-rmnet_mux_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_bind, %function
f_midi_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 512
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #:lower16:.LANCHOR7
	mov	r4, r1
	movt	r5, #:upper16:.LANCHOR7
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r3, [r5, #-3052]	@ zero_extendqisi2
	.pad #516
	sub	sp, sp, #516
	ldr	r7, [r0, #24]
	cmp	r3, #0
	bne	.L14581
	ldrb	r3, [r7, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bls	.L14582
.L14584:
	mvn	r5, #18
.L14583:
	ldr	r3, [r4, #92]
	cmp	r3, #0
	beq	.L14586
.L14596:
	mov	r2, #0
	str	r2, [r3]
.L14586:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
.L14595:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC1091
	mov	r3, r5
	movt	r1, #:upper16:.LC1091
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L14580:
	mov	r0, r5
	add	sp, sp, #516
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14582:
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r5, #-3052]
	strb	r3, [r7, #48]
.L14581:
	ldrb	r3, [r6, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L14584
	add	r1, r3, #1
	add	r2, r3, #12
	strb	r3, [r5, #-3034]
	uxtb	r1, r1
	str	r4, [r6, r2, lsl #2]
	cmp	r1, #15
	strb	r1, [r6, #44]
	bhi	.L14584
	ldr	r8, .L14614
	add	r0, r1, #12
	add	r3, r3, #2
	strb	r1, [r5, #-3022]
	mov	r2, #0
	str	r4, [r6, r0, lsl #2]
	strb	r1, [r5, #-3004]
	strb	r3, [r6, #44]
	sub	r1, r8, #8
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	str	r0, [r4, #88]
	beq	.L14585
	str	r7, [r0]
	mov	r2, #0
	add	r1, r8, #4
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	str	r0, [r4, #92]
	beq	.L14597
	str	r7, [r0]
	movw	r1, #32976
	mov	r0, #292
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [sp, #8]
	beq	.L14598
	sub	r1, r8, #44
	sub	r3, r8, #32
	sub	r2, r8, #20
	mov	lr, r8
	stm	r0, {r1, r2, r3}
	add	r1, r8, #16
	ldr	r3, [r4, #320]
	ldr	r2, [r4, #324]
	str	r1, [r0, #12]
	ldr	r10, [r4, #320]
	add	r3, r3, r2
	rsb	r3, r3, r3, lsl #4
	cmp	r10, #0
	add	r3, r3, #7
	strh	r3, [r1, #5]	@ unaligned
	beq	.L14599
	add	r2, sp, #368
	movw	r10, #9222
	mov	r3, #1
	mov	ip, #0
	movw	fp, #9225
	movt	r10, 514
	str	r2, [sp, #4]
	str	r7, [sp, #16]
	add	r2, lr, #32
	mov	r9, r3
	mov	r8, ip
	movt	fp, 259
	add	r1, sp, #32
	add	lr, lr, #27
	str	r2, [sp, #12]
	mov	r7, r10
	ldr	r2, [sp, #4]
	str	r6, [sp, #4]
	str	r5, [sp, #20]
.L14588:
	str	r7, [r1]	@ unaligned
	add	ip, ip, #1
	add	r0, r0, #8
	strb	r3, [r1, #4]
	add	r3, r3, #2
	strb	r8, [r1, #5]
	sub	r6, r3, #1
	add	r10, r3, #3
	str	r1, [r0, #8]
	ldrb	r5, [r1, #4]	@ zero_extendqisi2
	add	r1, r1, #6
	str	fp, [r2]	@ unaligned
	strb	r6, [r2, #4]
	strb	r9, [r2, #5]
	strb	r5, [r2, #6]
	strb	r9, [r2, #7]
	strb	r8, [r2, #8]
	str	r2, [r0, #12]
	ldrb	r5, [r2, #4]	@ zero_extendqisi2
	add	r2, r2, #9
	strb	r5, [lr, #1]!
	ldr	r5, [r4, #320]
	cmp	r5, ip
	bhi	.L14588
	mov	r2, r10
	mov	lr, r10
	ldr	r6, [sp, #4]
	lsl	r2, r2, #2
	mov	r10, r5
	ldr	r7, [sp, #16]
	ldr	r5, [sp, #20]
	add	ip, r2, #4
	add	fp, r2, #8
.L14587:
	ldr	r0, [r4, #324]
	cmp	r0, #0
	beq	.L14600
	ldr	r2, .L14614+4
	mov	r1, lr
	movw	lr, #9222
	ldr	r0, [sp, #8]
	movt	lr, 258
	movw	r10, #9225
	mov	ip, #0
	movt	r10, 515
	sub	fp, r1, r3
	str	lr, [sp, #4]
	mov	r9, ip
	sub	r8, r2, #1
	str	r2, [sp, #16]
	mov	lr, #1
	add	r0, r0, r1, lsl #2
	str	r7, [sp, #20]
	add	r1, sp, #128
	add	r2, sp, #224
	str	r6, [sp, #24]
	mov	r7, r10
	str	r5, [sp, #28]
.L14590:
	ldr	r5, [sp, #4]
	add	ip, ip, #1
	add	r0, r0, #8
	str	r5, [r1]	@ unaligned
	strb	r3, [r1, #4]
	add	r3, r3, #2
	strb	r9, [r1, #5]
	sub	r6, r3, #1
	add	r10, fp, r3
	str	r1, [r0, #-8]
	ldrb	r5, [r1, #4]	@ zero_extendqisi2
	add	r1, r1, #6
	str	r7, [r2]	@ unaligned
	strb	r6, [r2, #4]
	strb	lr, [r2, #5]
	strb	r5, [r2, #6]
	strb	lr, [r2, #7]
	strb	r9, [r2, #8]
	str	r2, [r0, #-4]
	ldrb	r5, [r1, #-2]	@ zero_extendqisi2
	add	r2, r2, #9
	strb	r5, [r8, #1]!
	ldr	r5, [r4, #324]
	cmp	r5, ip
	bhi	.L14590
	uxtb	r0, r5
	mov	r3, r10
	ldr	r7, [sp, #20]
	lsl	r2, r3, #2
	ldr	r6, [sp, #24]
	mov	lr, r10
	ldr	r5, [sp, #28]
	add	r1, r0, #4
	ldr	r10, [r4, #320]
	add	ip, r2, #4
	uxtb	r1, r1
	add	fp, r2, #8
.L14589:
	add	r3, lr, #3
	ldr	lr, .L14614+8
	strb	r1, [r5, #-2968]
	uxtb	r10, r10
	ldr	r1, [sp, #8]
	strb	r0, [r5, #-2965]
	add	r0, r10, #4
	sub	r8, lr, #12
	ldr	lr, [sp, #16]
	strb	r0, [r5, #-2948]
	ldr	r0, [sp, #8]
	add	r1, r1, r3, lsl #2
	strb	r10, [r5, #-2945]
	sub	r9, r8, #12
	mov	r5, #0
	sub	lr, lr, #4
	str	r8, [r0, r2]
	str	lr, [sp, #4]
	ldr	lr, [sp, #12]
	ldr	r10, [sp, #4]
	sub	lr, lr, #8
	str	r10, [r0, ip]
	str	r9, [r0, fp]
	str	lr, [r0, r3, lsl #2]
	str	r5, [r1, #4]
	bl	usb_copy_descriptors
	cmp	r0, r5
	str	r0, [r4, #16]
	beq	.L14591
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L14594
	mov	r3, #512
	ldr	r0, [sp, #8]
	strh	r3, [r8, #4]	@ movhi
	strh	r3, [r9, #4]	@ movhi
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L14591
.L14594:
	ldr	r0, [sp, #8]
	mov	r5, #0
	bl	kfree
	b	.L14580
.L14585:
	ldr	r3, [r4, #92]
	mvn	r5, #18
	cmp	r3, #0
	bne	.L14596
	b	.L14595
.L14597:
	mvn	r5, #18
	b	.L14586
.L14598:
	mvn	r5, #11
	b	.L14583
.L14591:
	ldr	r0, [sp, #8]
	mvn	r5, #18
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	b	.L14583
.L14599:
	ldr	r1, .L14614
	mov	r3, #4
	mov	fp, #24
	mov	lr, r3
	mov	ip, #20
	mov	r2, #16
	mov	r3, #1
	add	r1, r1, #32
	str	r1, [sp, #12]
	b	.L14587
.L14600:
	ldr	r3, .L14614+4
	mov	r1, #4
	str	r3, [sp, #16]
	b	.L14589
.L14615:
	.align	2
.L14614:
	.word	.LANCHOR7-2992
	.word	.LANCHOR7-2944
	.word	.LANCHOR7-2976
	.fnend
	.size	f_midi_bind, .-f_midi_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_bind, %function
frmnet_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #8
	sub	sp, sp, #8
	ldr	r6, [r0, #24]
	cmp	r3, #15
	bls	.L14617
	mvn	r3, #18
	movw	r0, #:lower16:.LC1099
	ldr	r1, .L14661
	mov	r2, r3
	movt	r0, #:upper16:.LC1099
	str	r3, [r4, #112]
	bl	printk
	ldr	r0, [r4, #112]
.L14616:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14617:
	add	r1, r3, #12
	movw	r5, #:lower16:.LANCHOR7
	add	r2, r3, #1
	movt	r5, #:upper16:.LANCHOR7
	str	r4, [r0, r1, lsl #2]
	sub	r1, r5, #2912
	strb	r2, [r0, #44]
	sub	r1, r1, #4
	mov	r2, #0
	str	r3, [r4, #112]
	strb	r3, [r5, #-2926]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14657
	str	r0, [r4, #84]
	mov	r2, #0
	ldr	r1, .L14661+4
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14658
	str	r0, [r4, #88]
	mov	r2, #0
	ldr	r1, .L14661+8
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L14659
	str	r7, [r4, #136]
	ldr	r3, [r7, #8]
	mov	r1, #208
	str	r6, [r7]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r8, r0, #0
	beq	.L14624
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r8]
	beq	.L14626
	mov	r2, #8
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r8]
	bne	.L14626
	ldr	r3, [r7, #8]
	mov	r1, r8
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L14624:
	mvn	r3, #11
	str	r3, [r4, #140]
.L14640:
	movw	r0, #:lower16:.LC1107
	ldr	r1, .L14661
	movt	r0, #:upper16:.LC1107
	bl	printk
	ldr	r5, [r4, #136]
.L14628:
	mov	r3, #0
	mvn	r0, #11
	str	r3, [r5]
	str	r3, [r4, #136]
.L14623:
	ldr	r2, [r4, #88]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r4, #88]
.L14621:
	ldr	r2, [r4, #84]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r4, #84]
	b	.L14616
.L14626:
	mov	r3, #8
	cmn	r8, #4096
	str	r3, [r8, #4]
	str	r8, [r4, #140]
	bhi	.L14640
	movw	r3, #:lower16:frmnet_notify_complete
	ldr	r0, .L14661+12
	movt	r3, #:upper16:frmnet_notify_complete
	str	r3, [r8, #28]
	ldr	r3, [r4, #140]
	str	r4, [r3, #32]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L14629
	ldr	r2, [r6]
	ldr	r3, [r2, #20]
	cmp	r3, #2
	bhi	.L14660
.L14630:
	ldr	ip, [r4, #84]
	movw	r1, #:lower16:.LC1076
	movw	r3, #:lower16:.LC1075
	ldr	r0, [r4, #88]
	movt	r1, #:upper16:.LC1076
	movt	r3, #:upper16:.LC1075
	ldr	r5, [r2, #20]
	ldrb	r2, [r4, #116]	@ zero_extendqisi2
	ldr	lr, [r0, #4]
	movw	r0, #:lower16:.LC1108
	cmp	r5, #2
	movt	r0, #:upper16:.LC1108
	movls	r3, r1
	ldr	r1, .L14661
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	printk
	mov	r0, #0
	b	.L14616
.L14629:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L14635
.L14641:
	bl	kfree
.L14635:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L14638
	bl	kfree
.L14638:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L14639
	bl	kfree
.L14639:
	ldr	r5, [r4, #136]
	ldr	r6, [r4, #140]
	cmp	r6, #0
	beq	.L14628
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #136]
	b	.L14628
.L14660:
	ldrb	r1, [r5, #-2914]	@ zero_extendqisi2
	ldrb	r2, [r5, #-2902]	@ zero_extendqisi2
	ldrb	r3, [r5, #-2890]	@ zero_extendqisi2
	ldr	r0, .L14661+16
	strb	r1, [r5, #-2858]
	strb	r2, [r5, #-2846]
	strb	r3, [r5, #-2834]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L14631
	ldr	r2, [r6]
	ldr	r3, [r2, #20]
	cmp	r3, #4
	bls	.L14630
	ldrb	r2, [r5, #-2902]	@ zero_extendqisi2
	ldrb	r1, [r5, #-2914]	@ zero_extendqisi2
	ldrb	r3, [r5, #-2890]	@ zero_extendqisi2
	ldr	r0, .L14661+20
	strb	r1, [r5, #-2802]
	strb	r2, [r5, #-2790]
	strb	r3, [r5, #-2778]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	ldrne	r2, [r6]
	beq	.L14635
	b	.L14630
.L14631:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	bne	.L14641
	b	.L14638
.L14657:
	movw	r0, #:lower16:.LC1079
	ldr	r1, .L14661
	movt	r0, #:upper16:.LC1079
	bl	printk
	mvn	r0, #18
	b	.L14616
.L14659:
	movw	r0, #:lower16:.LC1100
	ldr	r1, .L14661
	movt	r0, #:upper16:.LC1100
	bl	printk
	mvn	r0, #18
	b	.L14623
.L14658:
	movw	r0, #:lower16:.LC1081
	ldr	r1, .L14661
	movt	r0, #:upper16:.LC1081
	bl	printk
	mvn	r0, #18
	b	.L14621
.L14662:
	.align	2
.L14661:
	.word	.LANCHOR5+280
	.word	.LANCHOR7-2904
	.word	.LANCHOR7-2892
	.word	.LANCHOR7-2880
	.word	.LANCHOR7-2824
	.word	.LANCHOR7-2768
	.fnend
	.size	frmnet_bind, .-frmnet_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_bind, %function
acm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #16
	sub	sp, sp, #16
	ldr	r8, [r0, #24]
	cmp	r3, #15
	bhi	.L14664
	mov	r5, r0
	add	r1, r3, #1
	add	r0, r3, #12
	movw	r2, #:lower16:.LANCHOR0
	movw	r6, #:lower16:.LANCHOR7
	movt	r2, #:upper16:.LANCHOR0
	str	r4, [r5, r0, lsl #2]
	movt	r6, #:upper16:.LANCHOR7
	strb	r1, [r5, #44]
	strb	r3, [r4, #144]
	ldrb	r0, [r5, #44]	@ zero_extendqisi2
	strb	r3, [r2, #2122]
	strb	r3, [r2, #2146]
	strb	r3, [r6, #-2733]
	cmp	r0, #15
	bls	.L14723
.L14664:
	mvn	r7, #18
.L14668:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L14676
	bl	kfree
.L14676:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L14677
	bl	kfree
.L14677:
	ldr	r5, [r4, #152]
	ldr	r6, [r4, #156]
	cmp	r6, #0
	beq	.L14678
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #152]
.L14678:
	cmp	r5, #0
	movw	r1, #:lower16:.LC1112
	movne	r3, #0
	movt	r1, #:upper16:.LC1112
	strne	r3, [r5]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r8]
	mov	r3, r4
	str	r7, [sp]
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L14663:
	mov	r0, r7
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L14723:
	add	r1, r0, #12
	add	r3, r0, #1
	strb	r0, [r2, #2134]
	strb	r0, [r6, #-2732]
	mov	r2, #0
	str	r4, [r5, r1, lsl #2]
	sub	r1, r6, #2720
	strb	r3, [r5, #44]
	strb	r0, [r6, #-2724]
	strb	r0, [r4, #145]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14664
	str	r0, [r4, #88]
	mov	r2, #0
	ldr	r1, .L14727
	str	r8, [r0]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14664
	str	r0, [r4, #92]
	mov	r2, #0
	ldr	r1, .L14727+4
	str	r8, [r0]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L14664
	str	r7, [r4, #152]
	ldr	r3, [r7, #8]
	mov	r1, #208
	str	r8, [r7]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r9, r0, #0
	beq	.L14665
	mov	r2, #10
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	str	r2, [r9, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r9]
	beq	.L14667
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	mov	r10, r0
	str	r0, [r9]
	bne	.L14667
	ldr	r3, [r7, #8]
	mov	r0, r7
	mov	r1, r9
	mvn	r7, #18
	ldr	r3, [r3, #12]
	blx	r3
	str	r10, [r4, #156]
	b	.L14668
.L14667:
	movw	r3, #:lower16:acm_cdc_notify_complete
	str	r9, [r4, #156]
	ldrb	r1, [r6, #-2718]	@ zero_extendqisi2
	movt	r3, #:upper16:acm_cdc_notify_complete
	ldrb	r2, [r6, #-2706]	@ zero_extendqisi2
	ldr	r0, .L14727+8
	str	r3, [r9, #28]
	ldr	r3, [r4, #156]
	strb	r1, [r6, #-2582]
	strb	r2, [r6, #-2570]
	strb	r1, [r6, #-2546]
	ldrb	r1, [r6, #-2694]	@ zero_extendqisi2
	str	r4, [r3, #32]
	ldr	r3, [r4, #20]
	strb	r1, [r6, #-2558]
	ldr	r3, [r3, #24]
	strb	r2, [r6, #-2534]
	ldr	r6, [r3]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L14671
	ldr	r3, [r6, #20]
	cmp	r3, #2
	bhi	.L14724
.L14669:
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #3378
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L14725
.L14672:
	cmp	r4, #0
	beq	.L14726
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC1111
	movt	r3, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC1111
	mov	r7, #0
	str	r4, [r3, #3996]
	bl	printk
	b	.L14663
.L14665:
	mvn	r7, #18
	str	r9, [r4, #156]
	b	.L14668
.L14724:
	ldr	r0, .L14727+12
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L14671
	ldr	r3, [r6, #20]
	cmp	r3, #4
	bls	.L14669
	ldr	r0, .L14727+16
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L14669
.L14671:
	ldr	r0, [r4, #16]
	mvn	r7, #11
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	b	.L14668
.L14725:
	ldr	r2, [r5, #24]
	ldr	r1, [r8]
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	ldr	r2, [r2]
	add	r1, r1, #32
	ldr	r0, [r2, #20]
	cmp	r0, #4
	bhi	.L14683
	movw	r2, #:lower16:.LC1075
	movw	ip, #:lower16:.LC1076
	movt	r2, #:upper16:.LC1075
	cmp	r0, #2
	movt	ip, #:upper16:.LC1076
	movhi	ip, r2
.L14673:
	ldr	r0, [r4, #92]
	movw	r2, #:lower16:.LC1109
	ldr	lr, [r4, #152]
	movt	r2, #:upper16:.LC1109
	ldr	r5, [lr, #4]
	ldr	lr, [r4, #88]
	str	r5, [sp, #12]
	ldr	r5, [r0, #4]
	ldr	r0, .L14727+20
	str	r5, [sp, #8]
	ldr	lr, [lr, #4]
	stm	sp, {ip, lr}
	bl	__dynamic_dev_dbg
	b	.L14672
.L14683:
	movw	ip, #:lower16:.LC1090
	movt	ip, #:upper16:.LC1090
	b	.L14673
.L14726:
	movw	r0, #:lower16:.LC1110
	mov	r7, r4
	movt	r0, #:upper16:.LC1110
	bl	printk
	b	.L14663
.L14728:
	.align	2
.L14727:
	.word	.LANCHOR7-2708
	.word	.LANCHOR7-2696
	.word	.LANCHOR7-2524
	.word	.LANCHOR7-2684
	.word	.LANCHOR7-2640
	.word	.LANCHOR4+3360
	.fnend
	.size	acm_bind, .-acm_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_bind, %function
rndis_qc_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #20
	sub	sp, sp, #20
	ldr	r8, [r0, #24]
	cmp	r3, #15
	bhi	.L14730
	add	r1, r3, #12
	add	r2, r3, #1
	movw	r5, #:lower16:.LANCHOR7
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR7
	strb	r2, [r0, #44]
	strb	r3, [r4, #120]
	ldrb	r0, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r5, #-2478]
	strb	r3, [r5, #-2470]
	strb	r3, [r5, #-2457]
	cmp	r0, #15
	bhi	.L14815
	add	r1, r0, #12
	add	r3, r0, #1
	strb	r0, [r5, #-2456]
	strb	r0, [r5, #-2450]
	mov	r2, #0
	str	r4, [r6, r1, lsl #2]
	ldr	r1, .L14825
	strb	r3, [r6, #44]
	strb	r0, [r4, #121]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14815
	str	r0, [r4, #88]
	mov	r2, #0
	ldr	r1, .L14825+4
	str	r8, [r0]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L14815
	str	r0, [r4, #92]
	mov	r2, #0
	sub	r1, r5, #2416
	str	r8, [r0]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L14815
	str	r3, [r4, #156]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r8, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r7, r0
	str	r0, [r4, #160]
	beq	.L14734
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L14733
	mov	r2, #8
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L14733:
	str	r0, [r7]
	ldr	r2, [r4, #160]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L14734
	mov	r1, #8
	movw	r3, #:lower16:rndis_qc_response_complete
	ldr	r0, .L14825+8
	movt	r3, #:upper16:rndis_qc_response_complete
	str	r1, [r2, #4]
	ldr	r2, [r4, #160]
	str	r4, [r2, #32]
	ldr	r2, [r4, #160]
	str	r3, [r2, #28]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L14734
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L14816
.L14735:
	movw	r5, #:lower16:.LANCHOR1
	movw	r1, #:lower16:rndis_qc_open
	movt	r5, #:upper16:.LANCHOR1
	movw	r2, #:lower16:rndis_qc_close
	ldrb	r3, [r5, #3681]	@ zero_extendqisi2
	movt	r1, #:upper16:rndis_qc_open
	movt	r2, #:upper16:rndis_qc_close
	str	r1, [r4, #112]
	str	r2, [r4, #116]
	cmp	r3, #0
	bne	.L14817
	movw	r9, #:lower16:.LANCHOR4
	movw	r1, #3402
	str	r4, [r5, #3728]
	movt	r9, #:upper16:.LANCHOR4
	movw	r2, #:lower16:rndis_qc_response_available
	ldrh	ip, [r9, r1]
	movt	r2, #:upper16:rndis_qc_response_available
	mov	r1, #1
	add	r0, r5, #3680
	strb	r1, [r5, #3681]
	strh	r1, [r0, #36]	@ movhi
	tst	ip, #4
	str	r2, [r5, #3724]
	bne	.L14818
.L14740:
	movw	r2, #1602
	mov	r3, #0
	ldrh	r7, [r9, r2]
	str	r3, [r4, #144]
	ubfx	r7, r7, #2, #1
	cmp	r7, r3
	moveq	r3, r7
	bne	.L14819
.L14741:
	movw	r2, #3450
	rsb	r3, r3, r3, lsl #4
	ldr	fp, [r4, #128]
	ldrh	r0, [r9, r2]
	mov	r1, #0
	add	r3, r5, r3, lsl #2
	add	r2, r4, #122
	ldr	r10, [r4, #140]
	str	r1, [r5, #3688]
	str	r1, [r5, #3692]
	tst	r0, #4
	str	r2, [r3, #3700]
	bne	.L14820
.L14755:
	cmp	r10, #0
	moveq	r7, #1
	cmp	r7, #0
	bne	.L14758
	movw	r3, #3474
	ldr	r7, [r4, #144]
	str	fp, [r5, #3712]
	ldrh	r3, [r9, r3]
	str	r10, [r5, #3720]
	ldrb	fp, [r4, #132]	@ zero_extendqisi2
	tst	r3, #4
	moveq	r10, r7
	bne	.L14821
.L14742:
	uxtb	r3, r7
	movw	r2, #3498
	ldrh	r2, [r9, r2]
	rsb	r3, r3, r3, lsl #4
	add	r3, r5, r3, lsl #2
	tst	r2, #4
	strb	fp, [r3, #3716]
	bne	.L14822
.L14743:
	movw	r3, #3522
	uxtb	r10, r10
	ldrh	r0, [r9, r3]
	mov	r3, #2
	rsb	r10, r10, r10, lsl #4
	add	r5, r5, r10, lsl r3
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	strb	r3, [r5, #3717]
	moveq	r5, r0
	bne	.L14823
.L14729:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14817:
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #3426
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L14813
.L14815:
	ldr	r8, [r6, #24]
.L14730:
	mvn	r5, #18
.L14732:
	ldr	r3, [r8]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L14824
.L14746:
	cmp	r3, #2
	bhi	.L14747
.L14748:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L14749
	bl	kfree
.L14749:
	ldr	r3, [r4, #160]
	cmp	r3, #0
	beq	.L14750
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L14750:
	ldr	r3, [r4, #156]
	movw	r0, #:lower16:.LC1078
	ldr	r1, .L14825+12
	movt	r0, #:upper16:.LC1078
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	mov	r3, r5
	ldr	r2, [r4]
	bl	printk
	b	.L14729
.L14816:
	ldrb	r1, [r5, #-2438]	@ zero_extendqisi2
	ldrb	r2, [r5, #-2426]	@ zero_extendqisi2
	ldrb	r3, [r5, #-2414]	@ zero_extendqisi2
	ldr	r0, .L14825+16
	strb	r1, [r5, #-2358]
	strb	r2, [r5, #-2346]
	strb	r3, [r5, #-2334]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L14734
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L14735
	ldrb	r1, [r5, #-2438]	@ zero_extendqisi2
	ldrb	r2, [r5, #-2426]	@ zero_extendqisi2
	ldrb	r3, [r5, #-2414]	@ zero_extendqisi2
	ldr	r0, .L14825+20
	strb	r1, [r5, #-2278]
	strb	r2, [r5, #-2266]
	strb	r3, [r5, #-2254]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L14735
	ldr	r3, [r6, #24]
	mvn	r5, #11
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L14746
.L14813:
	movw	r1, #:lower16:.LC1114
	add	r0, r0, #3408
	movt	r1, #:upper16:.LC1114
	mvn	r5, #18
	bl	__dynamic_pr_debug
	ldr	r8, [r6, #24]
	b	.L14732
.L14820:
	movw	r1, #:lower16:.LC267
	ldr	r2, .L14825+24
	movt	r1, #:upper16:.LC267
	ldr	r0, .L14825+28
	bl	__dynamic_pr_debug
	b	.L14755
.L14819:
	movw	r1, #:lower16:.LC945
	str	r3, [sp]
	ldr	r2, .L14825+32
	movt	r1, #:upper16:.LC945
	ldr	r0, .L14825+36
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #144]
	uxtb	r7, r3
	adds	r7, r7, #0
	movne	r7, #1
	b	.L14741
.L14821:
	movw	r1, #:lower16:.LC267
	ldr	r2, .L14825+40
	movt	r1, #:upper16:.LC267
	ldr	r0, .L14825+44
	bl	__dynamic_pr_debug
	ldr	r10, [r4, #144]
	b	.L14742
.L14822:
	movw	r1, #:lower16:.LC267
	ldr	r2, .L14825+48
	movt	r1, #:upper16:.LC267
	ldr	r0, .L14825+52
	bl	__dynamic_pr_debug
	b	.L14743
.L14823:
	ldr	r3, [r6, #24]
	ldr	r1, [r8]
	ldr	r3, [r3]
	add	r1, r1, #32
	ldr	r2, [r3, #20]
	cmp	r2, #4
	movwhi	r3, #:lower16:.LC1090
	movthi	r3, #:upper16:.LC1090
	bhi	.L14745
	movw	r0, #:lower16:.LC1075
	movw	r3, #:lower16:.LC1076
	movt	r0, #:upper16:.LC1075
	cmp	r2, #2
	movt	r3, #:upper16:.LC1076
	movhi	r3, r0
.L14745:
	ldr	ip, [r4, #88]
	movw	r2, #:lower16:.LC1115
	mov	r5, #0
	ldr	r0, [r4, #156]
	movt	r2, #:upper16:.LC1115
	ldr	lr, [r4, #92]
	ldr	r4, [r0, #4]
	ldr	r0, .L14825+56
	str	r4, [sp, #8]
	ldr	lr, [lr, #4]
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L14729
.L14818:
	movw	r1, #:lower16:.LC1113
	ldr	r2, .L14825+60
	movt	r1, #:upper16:.LC1113
	ldr	r0, .L14825+64
	bl	__dynamic_pr_debug
	b	.L14740
.L14824:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L14747
	bl	kfree
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L14746
.L14758:
	mov	r5, #0
	ldr	r8, [r6, #24]
	b	.L14732
.L14747:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L14748
	bl	kfree
	b	.L14748
.L14734:
	mvn	r5, #11
	ldr	r8, [r6, #24]
	b	.L14732
.L14826:
	.align	2
.L14825:
	.word	.LANCHOR7-2440
	.word	.LANCHOR7-2428
	.word	.LANCHOR7-2404
	.word	.LANCHOR5+388
	.word	.LANCHOR7-2324
	.word	.LANCHOR7-2244
	.word	.LANCHOR5+308
	.word	.LANCHOR4+3432
	.word	.LANCHOR5-1240
	.word	.LANCHOR4+1584
	.word	.LANCHOR5+332
	.word	.LANCHOR4+3456
	.word	.LANCHOR5+356
	.word	.LANCHOR4+3480
	.word	.LANCHOR4+3504
	.word	.LANCHOR5+292
	.word	.LANCHOR4+3384
	.fnend
	.size	rndis_qc_bind, .-rndis_qc_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_bind, %function
conn_gadget_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r9, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #24]
	movw	r0, #:lower16:.LC1116
	.pad #20
	sub	sp, sp, #20
	movt	r0, #:upper16:.LC1116
	str	r3, [r1, #84]
	bl	printk
	ldrb	r3, [r9, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L14842
	movw	r5, #:lower16:.LANCHOR4
	movw	r2, #3546
	movt	r5, #:upper16:.LANCHOR4
	movw	r0, #:lower16:.LANCHOR7
	ldrh	r1, [r5, r2]
	movt	r0, #:upper16:.LANCHOR7
	add	r2, r3, #1
	mov	ip, r0
	add	r0, r3, #12
	strb	r3, [ip, #-2186]
	tst	r1, #4
	str	r4, [r9, r0, lsl #2]
	str	ip, [sp, #12]
	strb	r2, [r9, #44]
	ldr	r7, [r4, #84]
	bne	.L14865
.L14829:
	mov	r2, #0
	ldr	r1, .L14870
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r6, r0, #0
	beq	.L14866
	movw	r3, #3570
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L14867
.L14831:
	str	r4, [r6]
	mov	r2, #0
	ldr	r1, .L14870+4
	str	r6, [r4, #92]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L14868
	movw	r3, #3594
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L14869
.L14833:
	movw	r8, #:lower16:conn_gadget_complete_out
	mov	r6, #4
	str	r4, [r7]
	movt	r8, #:upper16:conn_gadget_complete_out
	add	r5, r4, #88
	str	r7, [r4, #96]
	add	fp, r4, #128
.L14837:
	ldr	r1, [r4, #192]
	mov	r0, r7
	cmp	r1, #0
	moveq	r1, #4096
	bl	conn_gadget_request_new
	subs	r7, r0, #0
	mov	r0, r5
	beq	.L14835
	str	r8, [r7, #28]
	bl	_raw_spin_lock_irqsave
	mov	r10, r0
	mov	r2, fp
	ldr	r1, [r4, #132]
	add	r0, r7, #36
	bl	__list_add
	mov	r1, r10
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	subs	r6, r6, #1
	beq	.L14843
	ldr	r7, [r4, #96]
	b	.L14837
.L14843:
	movw	r8, #:lower16:conn_gadget_complete_in
	mov	r6, #4
	movt	r8, #:upper16:conn_gadget_complete_in
	add	fp, r4, #120
.L14836:
	ldr	r0, [r4, #92]
	ldr	r1, [r4, #192]
	cmp	r1, #0
	moveq	r1, #4096
	bl	conn_gadget_request_new
	subs	r7, r0, #0
	mov	r0, r5
	beq	.L14835
	str	r8, [r7, #28]
	bl	_raw_spin_lock_irqsave
	mov	r10, r0
	mov	r2, fp
	ldr	r1, [r4, #124]
	add	r0, r7, #36
	bl	__list_add
	mov	r1, r10
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	subs	r6, r6, #1
	bne	.L14836
	ldr	r3, [r9, #24]
	ldr	r2, [r3]
	ldr	r2, [r2, #20]
	cmp	r2, #2
	movwls	r1, #:lower16:.LC1076
	movtls	r1, #:upper16:.LC1076
	bls	.L14840
	ldr	ip, [sp, #12]
	ldrb	r0, [ip, #-2174]	@ zero_extendqisi2
	ldrb	r1, [ip, #-2162]	@ zero_extendqisi2
	strb	r0, [ip, #-2150]
	strb	r1, [ip, #-2138]
	ldr	r2, [r3]
	ldr	r2, [r2, #20]
	cmp	r2, #4
	bls	.L14841
	strb	r0, [ip, #-2126]
	strb	r1, [ip, #-2114]
	ldr	r3, [r3]
	ldr	r2, [r3, #20]
	cmp	r2, #4
	movwhi	r1, #:lower16:.LC1090
	movthi	r1, #:upper16:.LC1090
	bhi	.L14840
.L14841:
	movw	r3, #:lower16:.LC1075
	movw	r1, #:lower16:.LC1076
	movt	r3, #:upper16:.LC1075
	cmp	r2, #2
	movt	r1, #:upper16:.LC1076
	movhi	r1, r3
.L14840:
	movw	r0, #:lower16:.LC1123
	ldr	r2, [r4]
	ldr	ip, [r4, #96]
	movt	r0, #:upper16:.LC1123
	ldr	r3, [r4, #92]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	ldr	r3, [r3, #4]
	bl	printk
	mov	r0, #0
.L14827:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14869:
	movw	r1, #:lower16:.LC1121
	ldr	r2, .L14870+8
	movt	r1, #:upper16:.LC1121
	ldr	r3, [r7, #4]
	ldr	r0, .L14870+12
	bl	__dynamic_pr_debug
	b	.L14833
.L14865:
	movw	r1, #:lower16:.LC1117
	mov	r3, r4
	ldr	r2, .L14870+8
	movt	r1, #:upper16:.LC1117
	ldr	r0, .L14870+16
	bl	__dynamic_pr_debug
	b	.L14829
.L14867:
	movw	r1, #:lower16:.LC1119
	ldr	r2, .L14870+8
	movt	r1, #:upper16:.LC1119
	ldr	r3, [r6, #4]
	ldr	r0, .L14870+20
	bl	__dynamic_pr_debug
	b	.L14831
.L14842:
	mvn	r0, #18
	b	.L14827
.L14835:
	movw	r0, #:lower16:.LC1122
	ldr	r1, .L14870+8
	movt	r0, #:upper16:.LC1122
	bl	printk
	mvn	r0, #0
	b	.L14827
.L14868:
	movw	r0, #:lower16:.LC1120
	movt	r0, #:upper16:.LC1120
	bl	printk
	mvn	r0, #18
	b	.L14827
.L14866:
	movw	r0, #:lower16:.LC1118
	movt	r0, #:upper16:.LC1118
	bl	printk
	mvn	r0, #18
	b	.L14827
.L14871:
	.align	2
.L14870:
	.word	.LANCHOR7-2176
	.word	.LANCHOR7-2164
	.word	.LANCHOR5+404
	.word	.LANCHOR4+3576
	.word	.LANCHOR4+3528
	.word	.LANCHOR4+3552
	.fnend
	.size	conn_gadget_function_bind, .-conn_gadget_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_function_bind, %function
acc_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #3618
	movt	r5, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r4, r1
	strd	r8, [sp, #16]
	mov	r6, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r5, r3]
	.pad #36
	sub	sp, sp, #36
	ldr	r2, [r0, #24]
	tst	r3, #4
	str	r2, [sp, #16]
	bne	.L14946
.L14873:
	movw	r2, #:lower16:.LC1125
	mov	r1, #0
	ldr	r0, .L14958
	movt	r2, #:upper16:.LC1125
	movw	r7, #:lower16:.LANCHOR0
	bl	__hid_register_driver
	subs	r8, r0, #0
	movt	r7, #:upper16:.LANCHOR0
	bne	.L14872
	str	r8, [r4, #1644]
	ldrb	r3, [r6, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L14878
	movw	r2, #3642
	add	r1, r3, #12
	strb	r3, [r7, #2394]
	ldrh	r2, [r5, r2]
	add	r3, r3, #1
	str	r4, [r6, r1, lsl #2]
	strb	r3, [r6, #44]
	ldr	r9, [r4, #84]
	tst	r2, #4
	bne	.L14947
.L14876:
	mov	r2, #0
	ldr	r1, .L14958+4
	ldr	r0, [r9]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L14948
	movw	r3, #3690
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L14949
.L14879:
	ldr	r10, .L14958+8
	str	r4, [r7]
	mov	r2, #0
	str	r7, [r4, #92]
	ldr	r0, [r9]
	sub	r1, r10, #12
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L14950
	movw	r3, #3738
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L14951
.L14881:
	str	r4, [r7]
	sub	r1, r10, #12
	mov	r2, #0
	str	r7, [r4, #96]
	ldr	r0, [r9]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L14952
	movw	r3, #3786
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L14953
.L14883:
	add	r3, r4, #1648
	movw	fp, #:lower16:acc_complete_in
	str	r4, [r7]
	add	r3, r3, #8
	movt	fp, #:upper16:acc_complete_in
	str	r7, [r4, #96]
	add	r10, r4, #88
	mov	r9, #4
	str	r3, [sp, #20]
	str	r5, [sp, #24]
.L14887:
	ldr	r5, [r4, #92]
	mov	r1, #208
	ldr	r2, [r5, #8]
	mov	r0, r5
	ldr	r2, [r2, #8]
	blx	r2
	subs	r7, r0, #0
	mov	r1, #208
	mov	r2, #2
	mov	r0, #16384
	beq	.L14886
	bl	kmalloc_order_trace
	mov	r2, r0
	mov	r0, r10
	cmp	r2, #0
	str	r2, [r7]
	beq	.L14954
	str	fp, [r7, #28]
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	ldr	r1, [r4, #1660]
	add	r0, r7, #36
	ldr	r2, [sp, #20]
	bl	__list_add
	mov	r1, r5
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	subs	r9, r9, #1
	bne	.L14887
	movw	r3, #:lower16:acc_complete_out
	add	r7, r4, #1680
	ldr	r5, [sp, #24]
	movt	r3, #:upper16:acc_complete_out
	add	r7, r7, #8
	str	r3, [sp, #28]
	add	r3, r4, #1696
	str	r3, [sp, #24]
.L14889:
	ldr	fp, [r4, #96]
	mov	r1, #208
	ldr	r2, [fp, #8]
	mov	r0, fp
	ldr	r2, [r2, #8]
	blx	r2
	subs	r9, r0, #0
	mov	r2, #2
	mov	r1, #208
	mov	r0, #16384
	beq	.L14886
	bl	kmalloc_order_trace
	cmp	r0, #0
	str	r0, [r9]
	beq	.L14955
	ldr	r3, [sp, #28]
	str	r3, [r9, #28]
	ldr	r3, [sp, #24]
	str	r9, [r7], #4
	cmp	r3, r7
	bne	.L14889
	ldr	r2, [r6, #24]
	ldr	r3, [r2]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L14897
	movw	r3, #:lower16:.LANCHOR7
	movt	r3, #:upper16:.LANCHOR7
	ldrb	r0, [r3, #-2102]	@ zero_extendqisi2
	ldrb	r1, [r3, #-2090]	@ zero_extendqisi2
	strb	r0, [r3, #-2078]
	strb	r1, [r3, #-2066]
	ldr	ip, [r2]
	ldr	ip, [ip, #20]
	cmp	ip, #4
	strbhi	r0, [r3, #-2054]
	strbhi	r1, [r3, #-2042]
.L14897:
	movw	r3, #3810
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L14956
.L14872:
	mov	r0, r8
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14948:
	movw	r3, #3666
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L14957
.L14878:
	mvn	r8, #18
	b	.L14872
.L14952:
	movw	r3, #3762
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L14878
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC1129
	mvn	r8, #18
	movt	r2, #:upper16:.LC1129
	ldr	r0, .L14958+12
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14872
.L14947:
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC1126
	mov	r3, r4
	movt	r2, #:upper16:.LC1126
	ldr	r0, .L14958+16
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14876
.L14954:
	ldr	r2, [r5, #8]
	mov	r1, r7
	mov	r0, r5
	ldr	r3, [r2, #12]
	blx	r3
.L14886:
	movw	r0, #:lower16:.LC1131
	movt	r0, #:upper16:.LC1131
	bl	printk
	ldr	r8, [sp, #20]
	b	.L14891
.L14950:
	movw	r3, #3714
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L14878
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC1129
	mvn	r8, #18
	movt	r2, #:upper16:.LC1129
	ldr	r0, .L14958+20
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14872
.L14946:
	mov	r3, r2
	movw	r2, #:lower16:.LC1124
	ldr	r1, [r3]
	movt	r2, #:upper16:.LC1124
	add	r0, r5, #3600
	mov	r3, r4
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14873
.L14955:
	ldr	r3, [fp, #8]
	mov	r1, r9
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
	b	.L14886
.L14956:
	ldr	ip, [r4, #96]
	movw	r0, #:lower16:.LC1075
	movw	r3, #:lower16:.LC1076
	ldr	lr, [r2]
	movt	r0, #:upper16:.LC1075
	movt	r3, #:upper16:.LC1076
	ldr	r2, [r4, #92]
	ldr	r1, [sp, #16]
	ldr	ip, [ip, #4]
	ldr	r5, [lr, #20]
	ldr	lr, [r4]
	ldr	r1, [r1]
	str	ip, [sp, #8]
	ldr	ip, [r2, #4]
	movw	r2, #:lower16:.LC1132
	cmp	r5, #2
	movt	r2, #:upper16:.LC1132
	movhi	r3, r0
	str	lr, [sp]
	ldr	r0, .L14958+24
	add	r1, r1, #32
	str	ip, [sp, #4]
	bl	__dynamic_dev_dbg
	b	.L14872
.L14957:
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC1127
	mvn	r8, #18
	movt	r2, #:upper16:.LC1127
	ldr	r0, .L14958+28
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14872
.L14892:
	bl	list_del
	mov	r1, r7
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L14893
	ldr	r7, [r4, #92]
	ldr	r0, [r5, #-36]
	bl	kfree
	mov	r1, r6
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L14891:
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #1656]
	mov	r7, r0
	cmp	r8, r5
	mov	r0, r5
	sub	r6, r5, #36
	bne	.L14892
	mov	r1, r7
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
.L14893:
	ldr	r5, [r4, #1688]
	cmp	r5, #0
	beq	.L14895
	ldr	r6, [r4, #96]
	ldr	r0, [r5]
	bl	kfree
	mov	r1, r5
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L14895:
	ldr	r5, [r4, #1692]
	cmp	r5, #0
	beq	.L14896
	ldr	r4, [r4, #96]
	ldr	r0, [r5]
	bl	kfree
	mov	r1, r5
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
.L14896:
	mvn	r8, #0
	b	.L14872
.L14949:
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC1128
	movt	r2, #:upper16:.LC1128
	ldr	r3, [r7, #4]
	ldr	r0, .L14958+32
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14879
.L14951:
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC1130
	movt	r2, #:upper16:.LC1130
	ldr	r3, [r7, #4]
	ldr	r0, .L14958+36
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14881
.L14953:
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC1130
	movt	r2, #:upper16:.LC1130
	ldr	r3, [r7, #4]
	ldr	r0, .L14958+40
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14883
.L14959:
	.align	2
.L14958:
	.word	.LANCHOR0+1668
	.word	.LANCHOR7-2104
	.word	.LANCHOR7-2080
	.word	.LANCHOR4+3744
	.word	.LANCHOR4+3624
	.word	.LANCHOR4+3696
	.word	.LANCHOR4+3792
	.word	.LANCHOR4+3648
	.word	.LANCHOR4+3672
	.word	.LANCHOR4+3720
	.word	.LANCHOR4+3768
	.fnend
	.size	acc_function_bind, .-acc_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_bind, %function
mtp_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #3834
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR4
	movt	r8, #:upper16:.LANCHOR4
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r8, r3]
	.pad #36
	sub	sp, sp, #36
	ldr	r2, [r0, #24]
	str	r0, [sp, #20]
	tst	r3, #4
	str	r2, [r1, #84]
	str	r2, [sp, #28]
	bne	.L15040
.L14961:
	ldr	r3, [sp, #20]
	ldrb	r3, [r3, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L15039
	movw	r2, #3858
	ldr	ip, [sp, #20]
	movw	r6, #:lower16:.LANCHOR0
	ldrh	r2, [r8, r2]
	add	r0, r3, #12
	add	r1, r3, #1
	movt	r6, #:upper16:.LANCHOR0
	str	r4, [ip, r0, lsl #2]
	tst	r2, #4
	strb	r1, [ip, #44]
	ldr	r5, [r4, #84]
	strb	r3, [r6, #2486]
	bne	.L15041
.L14964:
	mov	r2, #0
	ldr	r1, .L15052
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L15042
	movw	r3, #3906
	ldrh	r3, [r8, r3]
	tst	r3, #4
	bne	.L15043
.L14967:
	str	r4, [r7]
	mov	r2, #0
	ldr	r1, .L15052+4
	str	r7, [r4, #92]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L15044
	movw	r3, #3954
	ldrh	r3, [r8, r3]
	tst	r3, #4
	bne	.L15045
.L14969:
	str	r4, [r7]
	mov	r2, #0
	ldr	r1, .L15052+8
	str	r7, [r4, #96]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	subs	r7, r0, #0
	beq	.L15046
	movw	r3, #4002
	ldrh	r3, [r8, r3]
	tst	r3, #4
	bne	.L15047
.L14971:
	str	r4, [r7]
	ldr	r1, [r6, #1888]
	movw	r9, #:lower16:.LANCHOR7
	str	r7, [r4, #100]
	cmp	r1, #16384
	movhi	r3, #4
	movthi	r9, #:upper16:.LANCHOR7
	strhi	r3, [r9, #-1996]
	bls	.L15048
.L14973:
	movw	r3, #:lower16:mtp_complete_in
	mov	r5, #0
	str	r8, [sp, #24]
	movt	r3, #:upper16:mtp_complete_in
	add	r7, r4, #88
	add	fp, r4, #116
	str	r3, [sp, #16]
	b	.L14982
.L14975:
	ldr	r3, [sp, #16]
	str	r3, [r10, #28]
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	mov	r2, fp
	ldr	r1, [r4, #120]
	add	r0, r10, #36
	bl	__list_add
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r9, #-1996]
	cmp	r5, r3
	bcs	.L15037
	ldr	r1, [r6, #1888]
.L14982:
	ldr	r0, [r4, #92]
	add	r5, r5, #1
	bl	mtp_request_new
	subs	r10, r0, #0
	mov	r0, r7
	bne	.L14975
	ldr	r3, [r6, #1888]
	ldr	r8, [sp, #24]
	cmp	r3, #16384
	bls	.L14977
	add	r3, r4, #116
	add	r7, r4, #88
	str	r6, [sp, #16]
	mov	r10, r3
	b	.L14978
.L14979:
	bl	list_del
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	fp, #0
	beq	.L15049
	ldr	r6, [r4, #92]
	ldr	r0, [r5, #-36]
	bl	kfree
	mov	r1, fp
	ldr	r2, [r6, #8]
	mov	r0, r6
	ldr	r3, [r2, #12]
	blx	r3
.L14978:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #116]
	mov	r6, r0
	cmp	r10, r5
	mov	r0, r5
	sub	fp, r5, #36
	bne	.L14979
	mov	r1, r6
	mov	r0, r7
	ldr	r6, [sp, #16]
	bl	_raw_spin_unlock_irqrestore
.L14980:
	mov	r3, #16384
	mov	r2, #8
	mov	r1, r3
	str	r3, [r6, #1888]
	mov	r3, r2
	str	r2, [r9, #-1996]
.L14972:
	cmp	r3, #0
	bne	.L14973
	b	.L14974
.L15042:
	movw	r3, #3882
	ldrh	r3, [r8, r3]
	tst	r3, #4
	beq	.L15039
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1127
	movt	r2, #:upper16:.LC1127
	ldr	r0, .L15052+12
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L15039:
	mvn	r0, #18
.L14960:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15044:
	movw	r3, #3930
	ldrh	r3, [r8, r3]
	tst	r3, #4
	beq	.L15039
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1129
	movt	r2, #:upper16:.LC1129
	ldr	r0, .L15052+16
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	mvn	r0, #18
	b	.L14960
.L15037:
	ldr	r8, [sp, #24]
.L14974:
	ldr	r1, [r6, #520]
	ubfx	r3, r1, #0, #10
	cmp	r3, #0
	bne	.L15050
.L14983:
	ldr	r10, [r4, #96]
	movw	r5, #:lower16:mtp_complete_out
	mov	r7, #16384
	movt	r5, #:upper16:mtp_complete_out
.L14991:
	mov	r0, r10
	bl	mtp_request_new
	cmp	r0, #0
	beq	.L14984
	str	r5, [r0, #28]
	ldr	r1, [r6, #520]
	str	r0, [r4, #168]
	ldr	r0, [r4, #96]
	bl	mtp_request_new
	cmp	r0, #0
	beq	.L14985
	movw	r3, #:lower16:kmalloc_caches
	movw	r10, #:lower16:mtp_complete_intr
	str	r5, [r0, #28]
	movt	r3, #:upper16:kmalloc_caches
	movt	r10, #:upper16:mtp_complete_intr
	str	r0, [r4, #172]
	mov	r7, #5
	str	r3, [sp, #16]
.L14986:
	ldr	r5, [r4, #100]
	mov	r1, #208
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	mov	r2, #28
	mov	r1, #208
	mov	r3, #16
	beq	.L14977
	ldr	r0, [sp, #16]
	ldr	ip, [r0, #24]
	subs	r0, ip, #0
	streq	r3, [r6]
	beq	.L14993
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r6]
	beq	.L15051
.L14993:
	add	r5, r4, #88
	str	r10, [r6, #28]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	add	r2, r4, #124
	ldr	r1, [r4, #128]
	add	r0, r6, #36
	bl	__list_add
	mov	r1, fp
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	subs	r7, r7, #1
	bne	.L14986
	ldr	r3, [sp, #20]
	ldr	r2, [r3, #24]
	ldr	r3, [r2]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L14994
	ldrb	r1, [r9, #-2030]	@ zero_extendqisi2
	ldrb	r3, [r9, #-2018]	@ zero_extendqisi2
	strb	r1, [r9, #-1990]
	strb	r3, [r9, #-1978]
	ldr	r0, [r2]
	ldr	r0, [r0, #20]
	cmp	r0, #4
	strbhi	r1, [r9, #-1966]
	strbhi	r3, [r9, #-1954]
.L14994:
	movw	r3, #4026
	ldrh	r0, [r8, r3]
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	beq	.L14960
	ldr	ip, [r4, #96]
	movw	r0, #:lower16:.LC1075
	movw	r3, #:lower16:.LC1076
	ldr	lr, [r2]
	movt	r0, #:upper16:.LC1075
	movt	r3, #:upper16:.LC1076
	ldr	r2, [r4, #92]
	ldr	r1, [sp, #28]
	ldr	ip, [ip, #4]
	ldr	r5, [lr, #20]
	ldr	lr, [r4]
	ldr	r1, [r1]
	str	ip, [sp, #8]
	ldr	ip, [r2, #4]
	movw	r2, #:lower16:.LC1132
	cmp	r5, #2
	movt	r2, #:upper16:.LC1132
	movhi	r3, r0
	str	lr, [sp]
	ldr	r0, .L15052+20
	add	r1, r1, #32
	str	ip, [sp, #4]
	bl	__dynamic_dev_dbg
	mov	r0, #0
	b	.L14960
.L15051:
	ldr	r3, [r5, #8]
	mov	r1, r6
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L14977:
	movw	r0, #:lower16:.LC1137
	movt	r0, #:upper16:.LC1137
	bl	printk
	mvn	r0, #0
	b	.L14960
.L15050:
	mov	r3, #16384
	mov	r1, r3
	str	r3, [r6, #520]
	b	.L14983
.L15046:
	movw	r3, #3978
	ldrh	r3, [r8, r3]
	tst	r3, #4
	beq	.L15039
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1135
	movt	r2, #:upper16:.LC1135
	ldr	r0, .L15052+24
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	mvn	r0, #18
	b	.L14960
.L15049:
	ldr	r6, [sp, #16]
	b	.L14980
.L15040:
	mov	r3, r2
	movw	r2, #:lower16:.LC1133
	ldr	r0, .L15052+28
	ldr	r1, [r3]
	movt	r2, #:upper16:.LC1133
	mov	r3, r4
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14961
.L15041:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1126
	mov	r3, r4
	movt	r2, #:upper16:.LC1126
	ldr	r0, .L15052+32
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14964
.L15043:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1128
	movt	r2, #:upper16:.LC1128
	ldr	r3, [r7, #4]
	ldr	r0, .L15052+36
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14967
.L15048:
	movt	r9, #:upper16:.LANCHOR7
	ldr	r3, [r9, #-1996]
	b	.L14972
.L15045:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1134
	movt	r2, #:upper16:.LC1134
	ldr	r3, [r7, #4]
	ldr	r0, .L15052+40
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14969
.L15047:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1136
	movt	r2, #:upper16:.LC1136
	ldr	r3, [r7, #4]
	ldr	r0, .L15052+44
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14971
.L14984:
	ldr	r3, [r6, #520]
	cmp	r3, #16384
	bls	.L14977
	ldr	r10, [r4, #96]
.L14989:
	mov	r1, #16384
	str	r7, [r6, #520]
	b	.L14991
.L14985:
	ldr	r3, [r6, #520]
	cmp	r3, #16384
	bls	.L14977
	ldr	r10, [r4, #96]
	ldr	fp, [r4, #172]
	cmp	fp, #0
	beq	.L14989
	ldr	r0, [fp]
	bl	kfree
	ldr	r3, [r10, #8]
	mov	r0, r10
	mov	r1, fp
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r10, [r4, #96]
	b	.L14989
.L15053:
	.align	2
.L15052:
	.word	.LANCHOR7-2032
	.word	.LANCHOR7-2020
	.word	.LANCHOR7-2008
	.word	.LANCHOR4+3864
	.word	.LANCHOR4+3912
	.word	.LANCHOR4+4008
	.word	.LANCHOR4+3960
	.word	.LANCHOR4+3816
	.word	.LANCHOR4+3840
	.word	.LANCHOR4+3888
	.word	.LANCHOR4+3936
	.word	.LANCHOR4+3984
	.fnend
	.size	mtp_function_bind, .-mtp_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_bind, %function
adb_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #4050
	movt	r5, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r4, r1
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r5, r3]
	.pad #28
	sub	sp, sp, #28
	ldr	r2, [r0, #24]
	tst	r3, #4
	str	r2, [r1, #84]
	str	r2, [sp, #16]
	bne	.L15102
.L15055:
	ldrb	r3, [r8, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L15101
	movw	r2, #4074
	movw	r9, #:lower16:.LANCHOR7
	ldrh	r2, [r5, r2]
	add	r0, r3, #12
	add	r1, r3, #1
	movt	r9, #:upper16:.LANCHOR7
	str	r4, [r8, r0, lsl #2]
	strb	r3, [r9, #-1942]
	tst	r2, #4
	strb	r1, [r8, #44]
	ldr	r5, [r4, #84]
	bne	.L15103
.L15058:
	mov	r2, #0
	ldr	r1, .L15110
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	subs	r6, r0, #0
	beq	.L15104
	ldr	r7, .L15110+4
	ldrh	r3, [r7, #-14]
	tst	r3, #4
	bne	.L15105
.L15061:
	str	r4, [r6]
	mov	r2, #0
	ldr	r1, .L15110+8
	str	r6, [r4, #92]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss
	subs	r6, r0, #0
	beq	.L15106
	ldr	r3, .L15110+12
	ldrh	r3, [r3, #-14]
	tst	r3, #4
	bne	.L15107
.L15063:
	str	r4, [r6]
	mov	r1, #208
	mov	r0, r6
	str	r6, [r4, #96]
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L15065
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #48]
	str	r3, [sp, #20]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5]
	beq	.L15067
	mov	r2, #4096
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	beq	.L15108
.L15067:
	movw	r3, #:lower16:adb_complete_out
	movw	r10, #:lower16:adb_complete_in
	movt	r3, #:upper16:adb_complete_out
	movt	r10, #:upper16:adb_complete_in
	mov	r7, #4
	str	r3, [r5, #28]
	str	r5, [r4, #152]
.L15073:
	ldr	r5, [r4, #92]
	mov	r1, #208
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	mov	r2, #4096
	mov	r1, #208
	mov	r3, #16
	beq	.L15065
	ldr	r0, [sp, #20]
	ldr	ip, [r0, #48]
	subs	r0, ip, #0
	streq	r3, [r6]
	beq	.L15070
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r6]
	beq	.L15109
.L15070:
	add	r5, r4, #88
	str	r10, [r6, #28]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	add	r2, r4, #120
	ldr	r1, [r4, #124]
	add	r0, r6, #36
	bl	__list_add
	mov	r1, fp
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	subs	r7, r7, #1
	bne	.L15073
	ldr	r2, [r8, #24]
	ldr	r3, [r2]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L15071
	ldrb	r1, [r9, #-1930]	@ zero_extendqisi2
	ldrb	r3, [r9, #-1918]	@ zero_extendqisi2
	strb	r1, [r9, #-1906]
	strb	r3, [r9, #-1894]
	ldr	r0, [r2]
	ldr	r0, [r0, #20]
	cmp	r0, #4
	strbhi	r1, [r9, #-1882]
	strbhi	r3, [r9, #-1870]
.L15071:
	ldr	r3, .L15110+16
	ldrh	r0, [r3, #-6]
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	beq	.L15054
	ldr	lr, [r4, #96]
	movw	ip, #:lower16:.LC1075
	movw	r3, #:lower16:.LC1076
	ldr	r1, .L15110+12
	movt	ip, #:upper16:.LC1075
	movt	r3, #:upper16:.LC1076
	ldr	r5, [r2]
	ldr	r2, [r4, #92]
	ldr	lr, [lr, #4]
	sub	r0, r1, #8
	ldr	r1, [sp, #16]
	ldr	r5, [r5, #20]
	ldr	r4, [r4]
	ldr	r1, [r1]
	str	lr, [sp, #8]
	ldr	lr, [r2, #4]
	cmp	r5, #2
	movw	r2, #:lower16:.LC1132
	movhi	r3, ip
	movt	r2, #:upper16:.LC1132
	add	r1, r1, #32
	stm	sp, {r4, lr}
	bl	__dynamic_dev_dbg
	mov	r0, #0
	b	.L15054
.L15104:
	ldr	r0, .L15110+20
	ldrh	r3, [r0, #2]
	tst	r3, #4
	beq	.L15101
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1127
	sub	r0, r0, #16
	movt	r2, #:upper16:.LC1127
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L15101:
	mvn	r0, #18
.L15054:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15106:
	ldr	r3, .L15110+24
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	beq	.L15101
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1129
	sub	r0, r7, #8
	movt	r2, #:upper16:.LC1129
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	mvn	r0, #18
	b	.L15054
.L15109:
	ldr	r3, [r5, #8]
	mov	r1, r6
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L15065:
	movw	r0, #:lower16:.LC1140
	movt	r0, #:upper16:.LC1140
	bl	printk
	mvn	r0, #0
	b	.L15054
.L15102:
	mov	r3, r2
	movw	r2, #:lower16:.LC1138
	ldr	r1, [r3]
	movt	r2, #:upper16:.LC1138
	add	r0, r5, #4032
	mov	r3, r4
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L15055
.L15103:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1126
	mov	r3, r4
	movt	r2, #:upper16:.LC1126
	ldr	r0, .L15110+28
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L15058
.L15108:
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L15065
.L15105:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1128
	sub	r0, r7, #32
	movt	r2, #:upper16:.LC1128
	ldr	r3, [r6, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L15061
.L15107:
	ldr	r3, .L15110+12
	movw	r2, #:lower16:.LC1139
	ldr	r1, [r5]
	movt	r2, #:upper16:.LC1139
	sub	r0, r3, #32
	ldr	r3, [r6, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L15063
.L15111:
	.align	2
.L15110:
	.word	.LANCHOR7-1932
	.word	.LANCHOR8-4048
	.word	.LANCHOR7-1920
	.word	.LANCHOR8-4000
	.word	.LANCHOR8-3984
	.word	.LANCHOR4+4096
	.word	.LANCHOR8-4032
	.word	.LANCHOR4+4056
	.fnend
	.size	adb_function_bind, .-adb_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_do_descs.constprop.143, %function
ffs_do_descs.constprop.143:
	.fnstart
	@ args = 4, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	mov	r5, #0
	strd	r6, [sp, #8]
	mov	r6, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	fp, r0
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r7, [sp, #56]
	str	r2, [sp, #4]
.L15131:
	ldr	r3, [r7, #48]
	cmp	r5, fp
	lsl	r1, r5, #2
	moveq	r4, #0
	cmp	r3, #0
	beq	.L15114
	cmp	r4, #0
	str	r4, [r3, r5, lsl #2]
	mov	r2, #2
	beq	.L15117
.L15147:
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	cmp	r3, #5
	beq	.L15146
.L15121:
	cmp	r6, #1
	bls	.L15123
	ldrb	r2, [r4]	@ zero_extendqisi2
	cmp	r6, r2
	bcc	.L15123
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	sub	r3, r3, #4
	cmp	r3, #44
	ldrls	pc, [pc, r3, asl #2]
	b	.L15123
.L15125:
	.word	.L15124
	.word	.L15126
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15127
	.word	.L15123
	.word	.L15128
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15123
	.word	.L15129
.L15127:
	cmp	r2, #5
	bne	.L15123
.L15130:
	sub	r6, r6, r2
	add	r4, r4, r2
	add	r5, r5, #1
	b	.L15131
.L15129:
	cmp	r2, #6
	beq	.L15130
.L15123:
	ldr	r0, .L15148
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	mvneq	r6, #21
	beq	.L15112
	movw	r1, #:lower16:.LC679
	sub	r0, r0, #32
	ldr	r2, .L15148+4
	movt	r1, #:upper16:.LC679
	mvn	r3, #21
	bl	__dynamic_pr_debug
	mvn	r6, #21
	b	.L15112
.L15126:
	sub	r3, r2, #7
	tst	r3, #253
	bne	.L15123
	ldrb	r3, [r4, #2]	@ zero_extendqisi2
	tst	r3, #15
	bne	.L15130
	b	.L15123
.L15124:
	cmp	r2, #9
	beq	.L15130
	b	.L15123
.L15128:
	cmp	r2, #8
	beq	.L15130
	b	.L15123
.L15114:
	ldr	r2, [r7, #44]
	cmp	r2, #0
	ldreq	r3, [r7, #52]
	strne	r4, [r2, r1]
	movne	r2, #1
	streq	r4, [r3, r1]
	cmp	r4, #0
	bne	.L15147
.L15117:
	ldr	r3, [sp, #4]
	sub	r6, r3, r6
.L15112:
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15146:
	ldrb	r3, [r4, #2]	@ zero_extendqisi2
	ldr	r10, [r7, #12]
	and	r3, r3, #15
	sub	r8, r3, #1
	rsb	r8, r8, r8, lsl #3
	str	r3, [sp, #8]
	lsl	r3, r8, #2
	add	r9, r10, r3
	add	r2, r9, r2, lsl #2
	ldr	r1, [r2, #8]
	cmp	r1, #0
	bne	.L15134
	str	r4, [r2, #8]
	ldr	r2, [r10, r8, lsl #2]
	cmp	r2, #0
	beq	.L15120
	ldr	r3, [r9, #8]
	ldrh	r2, [r4, #4]	@ unaligned
	ldrb	r3, [r3, #2]	@ zero_extendqisi2
	cmp	r2, #0
	strb	r3, [r4, #2]
	bne	.L15121
	ldr	r3, [r9, #8]
	ldrh	r3, [r3, #4]	@ unaligned
	strh	r3, [r4, #4]	@ unaligned
	b	.L15121
.L15120:
	mov	r1, r4
	ldr	r0, [r7, #4]
	str	r3, [sp, #12]
	bl	usb_ep_autoconfig_ss
	subs	r2, r0, #0
	beq	.L15135
	ldr	lr, [r7, #12]
	mov	r1, #208
	ldr	r3, [sp, #12]
	str	r2, [sp, #12]
	ldr	ip, [r2, #8]
	add	r3, lr, r3
	str	r3, [r2]
	ldr	r3, [ip, #8]
	blx	r3
	cmp	r0, #0
	beq	.L15136
	ldr	r2, [sp, #12]
	str	r2, [r10, r8, lsl #2]
	ldr	r2, [sp, #8]
	str	r0, [r9, #4]
	ldrb	r3, [r4, #2]	@ zero_extendqisi2
	and	r3, r3, #15
	add	r3, r7, r3
	strb	r2, [r3, #16]
	b	.L15121
.L15134:
	mvn	r6, #21
.L15119:
	ldr	r0, .L15148+8
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L15112
	movw	r1, #:lower16:.LC1141
	mov	r2, r5
	movt	r1, #:upper16:.LC1141
	mov	r3, r6
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L15112
.L15135:
	movw	r6, #65012
	movt	r6, 65535
	b	.L15119
.L15136:
	mvn	r6, #11
	b	.L15119
.L15149:
	.align	2
.L15148:
	.word	.LANCHOR4-1504
	.word	.LANCHOR5-2844
	.word	.LANCHOR8-3952
	.fnend
	.size	ffs_do_descs.constprop.143, .-ffs_do_descs.constprop.143
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_bind, %function
ffs_func_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r2, r1, #36
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r1, #-32]
	.pad #44
	sub	sp, sp, #44
	ldr	r6, [r1, #-28]
	str	r2, [sp, #12]
	ldr	r3, [r3, #20]
	ldr	r4, [r6, #164]
	adds	r0, r4, #0
	movne	r0, #1
	cmp	r3, #2
	movls	r10, #0
	strls	r10, [sp, #20]
	bls	.L15151
	ldr	r10, [r6, #168]
	cmp	r10, #0
	movne	r0, #1
	movne	r10, r0
	cmp	r3, #4
	movls	r3, #0
	strls	r3, [sp, #20]
	bls	.L15151
	ldr	r3, [r6, #172]
	cmp	r3, #0
	movne	r0, #1
	streq	r3, [sp, #20]
	strne	r0, [sp, #20]
.L15151:
	ldrh	r3, [r6, #180]
	cmp	r4, #0
	lsl	r2, r3, #3
	sub	ip, r2, r3
	sub	r3, r2, r3
	lsl	ip, ip, #2
	str	ip, [sp, #16]
	addne	ip, r4, #1
	moveq	ip, r4
	add	r3, r3, ip
	cmp	r10, #0
	lsl	r2, r3, #2
	str	r2, [sp, #32]
	ldrne	r2, [r6, #168]
	addne	r2, r2, #1
	addne	r3, r3, r2
	lsl	r2, r3, #2
	str	r2, [sp, #24]
	ldr	r2, [sp, #20]
	cmp	r2, #0
	beq	.L15199
	ldr	r2, [r6, #172]
	add	r2, r2, #1
	add	r3, r3, r2
	lsl	r2, r3, #2
	str	r2, [sp, #28]
.L15155:
	ldrh	fp, [r6, #178]
	cmp	r0, #0
	ldr	r9, [r6, #148]
	add	r3, fp, r3, lsl #1
	lsl	fp, fp, #1
	lsl	r5, r3, #1
	add	r0, r9, #3
	str	r3, [sp, #36]
	add	r0, r0, r5
	bic	r0, r0, #3
	beq	.L15200
	mov	r7, r1
	mov	r1, #208
	bl	__kmalloc
	subs	r8, r0, #0
	mvneq	r4, #11
	beq	.L15150
	ldr	r3, [sp, #16]
	cmp	r3, #0
	bne	.L15239
.L15157:
	ldr	r1, [r6, #144]
	add	r5, r8, r5
	mov	r0, r5
	ldr	r2, [r6, #152]
	add	r1, r1, #16
	bl	memcpy
	ldr	r3, [r7, #-28]
	ldr	r3, [r3, #172]
	cmp	r3, #0
	bne	.L15240
.L15158:
	ldr	r3, [sp, #28]
	cmp	fp, #0
	add	r3, r8, r3
	bne	.L15241
.L15159:
	ldrh	r1, [r6, #180]
	cmp	r1, #0
	beq	.L15160
	rsb	r2, r1, r1, lsl #3
	mvn	r0, #0
	add	r2, r8, r2, lsl #2
.L15161:
	subs	r1, r1, #1
	strb	r0, [r2, #20]
	sub	r2, r2, #28
	bne	.L15161
.L15160:
	cmp	r4, #0
	str	r8, [r7, #-24]
	str	r3, [r7, #-4]
	beq	.L15162
	ldr	ip, [sp, #12]
	mov	r2, r9
	ldr	r3, [sp, #16]
	add	r1, r8, r3
	movw	r3, #:lower16:__ffs_func_bind_do_descs
	movt	r3, #:upper16:__ffs_func_bind_do_descs
	str	r1, [r7, #16]
	mov	r1, r5
	ldr	r0, [r6, #164]
	str	ip, [sp]
	bl	ffs_do_descs.constprop.143
	subs	r4, r0, #0
	blt	.L15150
.L15162:
	cmp	r10, #0
	beq	.L15163
	ldr	r3, [sp, #32]
	sub	fp, r9, r4
	mov	r2, fp
	add	r1, r8, r3
	movw	r3, #:lower16:__ffs_func_bind_do_descs
	movt	r3, #:upper16:__ffs_func_bind_do_descs
	str	r1, [r7, #8]
	ldr	r1, [sp, #12]
	ldr	r0, [r6, #168]
	str	r1, [sp]
	add	r1, r5, r4
	bl	ffs_do_descs.constprop.143
	cmp	r0, #0
	blt	.L15242
	ldr	r3, [sp, #20]
	cmp	r3, #0
	beq	.L15243
.L15190:
	ldr	ip, [sp, #12]
	add	r4, r4, r0
	sub	r2, fp, r0
	ldr	r3, [sp, #24]
	add	r1, r5, r4
	add	r3, r8, r3
	str	r3, [r7, #12]
	movw	r3, #:lower16:__ffs_func_bind_do_descs
	ldr	r0, [r6, #172]
	movt	r3, #:upper16:__ffs_func_bind_do_descs
	str	ip, [sp]
	bl	ffs_do_descs.constprop.143
	subs	r4, r0, #0
	blt	.L15150
	cmp	r10, #0
	ldr	r3, [r6, #164]
	bne	.L15244
.L15188:
	ldr	r1, [r6, #172]
.L15189:
	adds	r1, r1, r3
	moveq	r0, #1
	movne	r0, #0
	cmp	r5, #0
	moveq	r0, #1
	cmp	r0, #0
	bne	.L15166
	cmp	r9, #1
	bls	.L15204
	ldr	r3, [sp, #36]
	ldrb	r3, [r8, r3, lsl #1]	@ zero_extendqisi2
	cmp	r9, r3
	bcc	.L15204
	mov	r4, r9
.L15168:
	ldrb	r2, [r5, #1]	@ zero_extendqisi2
	sub	r2, r2, #4
	cmp	r2, #44
	ldrls	pc, [pc, r2, asl #2]
	b	.L15204
.L15171:
	.word	.L15170
	.word	.L15172
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15173
	.word	.L15204
	.word	.L15174
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15204
	.word	.L15175
.L15245:
	subs	r4, r9, r4
	bmi	.L15150
.L15166:
	add	r5, r6, #116
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #96]
	mov	r7, r0
	add	r0, r6, #100
	ldrh	r2, [r6, #104]
	mov	lr, r0
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r6, #96]
	cmp	r2, #0
	beq	.L15205
	add	r2, r0, r2
	mov	r3, r0
.L15187:
	ldrb	r1, [r3], #1	@ zero_extendqisi2
	sub	ip, r1, #5
	cmp	ip, #1
	strbls	r1, [r0]
	addls	r0, r0, #1
	cmp	r2, r3
	bne	.L15187
	sub	r2, r0, lr
	add	r1, r2, #1
	uxth	r2, r2
	uxth	r1, r1
.L15185:
	add	r3, r6, r2
	strh	r1, [r6, #104]	@ movhi
	mov	r4, #0
	mov	r0, r5
	mov	r1, #3
	mov	r2, #1
	strb	r4, [r3, #100]
	bl	__wake_up_locked
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L15150:
	mov	r0, r4
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15199:
	ldr	r2, [sp, #24]
	str	r2, [sp, #28]
	b	.L15155
.L15172:
	sub	r2, r3, #7
	tst	r2, #253
	bne	.L15204
	ldrb	r2, [r5, #2]	@ zero_extendqisi2
	tst	r2, #15
	bne	.L15180
.L15204:
	mvn	r4, #21
.L15169:
	ldr	r0, .L15247
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L15150
	movw	r1, #:lower16:.LC679
	ldr	r2, .L15247+4
	mov	r3, r4
	movt	r1, #:upper16:.LC679
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L15150
.L15173:
	cmp	r3, #5
	bne	.L15204
.L15180:
	adds	r5, r5, r3
	add	r0, r0, #1
	moveq	r2, #1
	movne	r2, #0
	sub	r4, r4, r3
	cmp	r1, r0
	movne	r3, r2
	orreq	r3, r2, #1
	cmp	r3, #0
	bne	.L15245
	cmp	r4, #1
	bls	.L15204
	ldrb	r3, [r5]	@ zero_extendqisi2
	cmp	r4, r3
	bcs	.L15168
	b	.L15204
.L15175:
	cmp	r3, #6
	beq	.L15180
	b	.L15204
.L15170:
	cmp	r3, #9
	bne	.L15204
	ldrb	r2, [r5, #2]	@ zero_extendqisi2
	ldr	ip, [r7, #-4]
	lsl	lr, r2, #1
	ldrsh	ip, [ip, lr]
	cmp	ip, #0
	blt	.L15246
.L15176:
	ldrb	r2, [r5, #8]	@ zero_extendqisi2
	strb	ip, [r5, #2]
	cmp	r2, #0
	beq	.L15180
	ldr	ip, [r7, #-28]
	sub	r2, r2, #-536870911
	ldr	ip, [ip, #188]
	ldr	ip, [ip]
	ldr	ip, [ip, #4]
	ldrb	r2, [ip, r2, lsl #3]	@ zero_extendqisi2
	strb	r2, [r5, #8]
	b	.L15180
.L15244:
	ldr	r2, [r6, #168]
	add	r3, r3, r2
	b	.L15188
.L15174:
	cmp	r3, #8
	bne	.L15204
	ldrb	r2, [r5, #7]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L15180
	ldr	ip, [r7, #-28]
	sub	r2, r2, #-536870911
	ldr	ip, [ip, #188]
	ldr	ip, [ip]
	ldr	ip, [ip, #4]
	ldrb	r2, [ip, r2, lsl #3]	@ zero_extendqisi2
	strb	r2, [r5, #7]
	b	.L15180
.L15241:
	mov	r0, r3
	mov	r2, fp
	mov	r1, #255
	bl	memset
	mov	r3, r0
	b	.L15159
.L15240:
	ldr	r1, [r6, #144]
	ldr	r0, [r6, #152]
	ldr	r3, [r6, #156]
	ldr	r2, [r6, #160]
	add	r0, r5, r0
	add	r1, r1, r3
	bl	memcpy
	b	.L15158
.L15239:
	mov	r1, r3
	bl	__memzero
	b	.L15157
.L15246:
	ldr	r8, [r7, #-36]
	ldrb	ip, [r8, #44]	@ zero_extendqisi2
	cmp	ip, #15
	bls	.L15177
	ldr	r0, .L15247+8
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L15178
	mvn	r4, #18
	b	.L15169
.L15177:
	add	r2, ip, #1
	add	r10, ip, #12
	str	r7, [r8, r10, lsl #2]
	strb	r2, [r8, #44]
	ldr	r2, [r7, #-4]
	strh	ip, [r2, lr]	@ movhi
	ldr	r2, [r7, #-4]
	ldrsh	ip, [r2, lr]
	b	.L15176
.L15200:
	movw	r4, #65012
	movt	r4, 65535
	b	.L15150
.L15205:
	mov	r1, #1
	b	.L15185
.L15163:
	ldr	r3, [sp, #20]
	cmp	r3, #0
	movne	r0, r10
	subne	fp, r9, r4
	bne	.L15190
	ldr	r3, [r6, #164]
	ldr	r1, [sp, #20]
	b	.L15189
.L15243:
	mov	r1, r3
	ldrd	r2, [r6, #164]
	add	r3, r3, r2
	b	.L15189
.L15242:
	mov	r4, r0
	b	.L15150
.L15178:
	movw	r1, #:lower16:.LC1142
	mvn	r3, #18
	movt	r1, #:upper16:.LC1142
	sub	r0, r0, #24
	mov	r4, r3
	bl	__dynamic_pr_debug
	b	.L15169
.L15248:
	.align	2
.L15247:
	.word	.LANCHOR4-1504
	.word	.LANCHOR5-2844
	.word	.LANCHOR8-3936
	.fnend
	.size	ffs_func_bind, .-ffs_func_bind
	.align	2
	.global	usb_ep_autoconfig
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_ep_autoconfig, %function
usb_ep_autoconfig:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r7, r0
	mov	r6, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r10, [r0, #28]
	movw	r0, #:lower16:.LC471
	ldrb	r8, [r1, #3]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	movt	r0, #:upper16:.LC471
	mov	r1, r10
	bl	strcmp
	ldr	r9, [r5, #8]!
	cmp	r0, #0
	and	r8, r8, #3
	sub	r4, r9, #12
	mov	fp, r9
	bne	.L15250
	cmp	r8, #3
	beq	.L15337
	movw	r0, #:lower16:.LC474
	mov	r1, r10
	movt	r0, #:upper16:.LC474
	bl	strcmp
	cmp	r0, #0
	bne	.L15260
.L15261:
	cmp	r8, #2
	beq	.L15338
.L15260:
	cmp	fp, r5
	beq	.L15265
.L15259:
	movw	r8, #:lower16:_ctype
	movw	r9, #:lower16:.LANCHOR1
	movw	r10, #:lower16:.LC473
	movt	r8, #:upper16:_ctype
	movt	r9, #:upper16:.LANCHOR1
	movt	r10, #:upper16:.LC473
	b	.L15284
.L15268:
	ldr	r4, [r4, #12]
	cmp	r5, r4
	sub	r4, r4, #12
	beq	.L15265
.L15284:
	ldr	r3, [r4]
	cmp	r3, #0
	bne	.L15268
	ldrb	r3, [r6, #3]	@ zero_extendqisi2
	ands	fp, r3, #3
	beq	.L15268
	ldr	r3, [r4, #4]
	ldrb	r2, [r3]	@ zero_extendqisi2
	cmp	r2, #101
	bne	.L15268
	ldrb	r2, [r3, #2]	@ zero_extendqisi2
	cmp	r2, #45
	beq	.L15269
	mov	r0, r3
	mov	r1, #45
	str	r3, [sp, #4]
	bl	strrchr
	subs	r2, r0, #0
	ldr	r3, [sp, #4]
	beq	.L15270
	cmp	fp, #2
	beq	.L15272
	cmp	fp, #3
	ldrb	r3, [r2, #2]	@ zero_extendqisi2
	bne	.L15325
	cmp	r3, #115
	str	r2, [sp, #4]
	beq	.L15268
	mov	r0, r10
	ldr	r1, [r7, #28]
	bl	strcmp
	cmp	r0, #0
	ldr	r2, [sp, #4]
	bne	.L15274
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #105
	bne	.L15274
	b	.L15268
.L15250:
	movw	r0, #:lower16:.LC474
	mov	r1, r10
	movt	r0, #:upper16:.LC474
	bl	strcmp
	cmp	r0, #0
	bne	.L15260
	cmp	r8, #3
	bne	.L15261
	cmp	r5, r9
	movwne	r9, #:lower16:.LC1073
	movne	r8, r4
	movtne	r9, #:upper16:.LC1073
	bne	.L15262
	b	.L15265
.L15339:
	ldr	r8, [r8, #12]
	cmp	r5, r8
	sub	r8, r8, #12
	beq	.L15259
.L15262:
	mov	r1, r9
	ldr	r0, [r8, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L15339
.L15266:
	cmp	r8, #0
	beq	.L15259
	ldr	r3, [r8]
	cmp	r3, #0
	bne	.L15259
	mov	r2, r6
	mov	r1, r8
	mov	r0, r7
	bl	ep_matches.part.13
	cmp	r0, #0
	bne	.L15289
	ldr	fp, [r7, #8]
	sub	r4, fp, #12
	b	.L15260
.L15337:
	cmp	r5, r9
	beq	.L15265
	movw	r9, #:lower16:.LC1071
	mov	r8, r4
	movt	r9, #:upper16:.LC1071
	b	.L15254
.L15340:
	ldr	r8, [r8, #12]
	cmp	r5, r8
	sub	r8, r8, #12
	beq	.L15255
.L15254:
	mov	r1, r9
	ldr	r0, [r8, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L15340
	cmp	r8, #0
	beq	.L15255
	ldr	r3, [r8]
	cmp	r3, #0
	bne	.L15255
	mov	r2, r6
	mov	r1, r8
	mov	r0, r7
	bl	ep_matches.part.13
	cmp	r0, #0
	bne	.L15289
	ldr	r4, [r7, #8]
	cmp	r5, r4
	sub	r4, r4, #12
	bne	.L15255
.L15265:
	mov	r4, #0
.L15249:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15270:
	mov	r0, r3
	str	r3, [sp, #4]
	bl	strlen
	ldr	r3, [sp, #4]
	add	r2, r3, r0
.L15274:
	ldrb	r3, [r2, #-1]	@ zero_extendqisi2
	ldrb	r2, [r8, r3]	@ zero_extendqisi2
	tst	r2, #4
	bne	.L15269
	ldrsb	r2, [r6, #2]
	cmp	r2, #0
	blt	.L15341
	cmp	r3, #116
	bne	.L15268
.L15269:
	ldrh	r3, [r6, #4]	@ unaligned
	cmp	r3, #0
	ldrheq	r3, [r4, #20]
	strheq	r3, [r6, #4]	@ unaligned
	cmp	fp, #1
	ubfx	r2, r3, #0, #11
	beq	.L15278
	cmp	fp, #3
	bne	.L15277
	ldr	r0, [r7, #20]
	cmp	r0, #2
	movls	r1, #1
	movhi	r1, #0
	cmp	r2, #64
	movls	r1, #0
	cmp	r1, #0
	bne	.L15268
.L15278:
	ldrh	r1, [r4, #20]
	cmp	r1, r2
	bcc	.L15268
	ldr	r1, [r7, #20]
	cmp	r1, #2
	bhi	.L15277
	cmp	r2, #1024
	bcs	.L15268
	tst	r3, #6144
	bne	.L15268
.L15277:
	ldrb	r3, [r6, #2]	@ zero_extendqisi2
	and	r3, r3, #128
	strb	r3, [r6, #2]
	ldr	r0, [r4, #4]
	ldrb	r2, [r0, #2]	@ zero_extendqisi2
	ldrb	r2, [r8, r2]	@ zero_extendqisi2
	tst	r2, #4
	bne	.L15342
	ldr	r2, [r9, #3228]
	add	r2, r2, #1
	cmp	r2, #15
	str	r2, [r9, #3228]
	bhi	.L15268
	orr	r3, r3, r2
	uxtb	r3, r3
	strb	r3, [r6, #2]
.L15282:
	cmp	fp, #2
	bne	.L15283
	ldrh	r2, [r4, #20]
	cmp	r2, #64
	movge	r2, #64
	strh	r2, [r6, #4]	@ unaligned
.L15283:
	strb	r3, [r4, #25]
.L15256:
	mov	r3, #0
	str	r3, [r4, #28]
	str	r3, [r4, #32]
	b	.L15249
.L15338:
	ldrsb	r3, [r6, #2]
	cmp	r3, #0
	bge	.L15260
	cmp	r5, r9
	beq	.L15265
	movw	r9, #:lower16:.LC1074
	mov	r8, r4
	movt	r9, #:upper16:.LC1074
	b	.L15267
.L15343:
	ldr	r8, [r8, #12]
	cmp	r5, r8
	sub	r8, r8, #12
	beq	.L15259
.L15267:
	mov	r1, r9
	ldr	r0, [r8, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L15343
	b	.L15266
.L15255:
	movw	r9, #:lower16:.LC1072
	mov	r8, r4
	movt	r9, #:upper16:.LC1072
	b	.L15258
.L15344:
	ldr	r8, [r8, #12]
	cmp	r5, r8
	sub	r8, r8, #12
	beq	.L15259
.L15258:
	mov	r1, r9
	ldr	r0, [r8, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L15344
	b	.L15266
.L15272:
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #98
	bne	.L15268
	b	.L15274
.L15325:
	cmp	r3, #115
	bne	.L15268
	b	.L15274
.L15342:
	add	r0, r0, #2
	mov	r2, #10
	mov	r1, #0
	bl	simple_strtoul
	ldrb	r3, [r6, #2]	@ zero_extendqisi2
	orr	r3, r3, r0
	uxtb	r3, r3
	strb	r3, [r6, #2]
	b	.L15282
.L15341:
	cmp	r3, #110
	bne	.L15268
	b	.L15269
.L15289:
	mov	r4, r8
	b	.L15256
	.fnend
	.size	usb_ep_autoconfig, .-usb_ep_autoconfig
	.align	2
	.global	usb_ep_autoconfig_reset
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_ep_autoconfig_reset, %function
usb_ep_autoconfig_reset:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #8]!
	cmp	r0, r3
	sub	r3, r3, #12
	beq	.L15346
	mov	r1, #0
.L15347:
	ldr	r2, [r3, #12]
	str	r1, [r3]
	cmp	r0, r2
	sub	r3, r2, #12
	bne	.L15347
.L15346:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	str	r2, [r3, #3228]
	bx	lr
	.fnend
	.size	usb_ep_autoconfig_reset, .-usb_ep_autoconfig_reset
	.align	2
	.global	config_ep_by_speed
	.syntax unified
	.arm
	.fpu softvfp
	.type	config_ep_by_speed, %function
config_ep_by_speed:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r2
	str	r6, [sp, #8]
	add	r0, r0, #32
	mov	r6, r1
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r6, #0
	clz	r3, r5
	lsr	r3, r3, #5
	moveq	r3, #1
	cmp	r4, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L15357
	ldr	r3, [r4, #16]
	cmp	r3, #3
	beq	.L15353
	cmp	r3, #5
	beq	.L15399
.L15352:
	ldr	ip, [r6, #16]
	mov	r6, #0
.L15356:
	ldr	r3, [ip]
	cmp	r3, #0
	beq	.L15357
	ldrb	r2, [r3, #1]	@ zero_extendqisi2
	cmp	r2, #5
	bne	.L15359
	b	.L15358
.L15360:
	ldrb	r1, [r3, #1]	@ zero_extendqisi2
	cmp	r1, #5
	beq	.L15358
.L15359:
	ldr	r3, [ip, #4]!
	cmp	r3, #0
	bne	.L15360
.L15357:
	mvn	r0, #4
.L15349:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15399:
	ldr	r3, [r4, #20]
	cmp	r3, #4
	bhi	.L15400
.L15355:
	cmp	r3, #2
	bls	.L15352
	ldr	ip, [r6, #8]
	mov	r6, #0
	b	.L15356
.L15358:
	cmp	ip, #0
	beq	.L15357
	ldrb	lr, [r5, #25]	@ zero_extendqisi2
	ldrb	r2, [r3, #2]	@ zero_extendqisi2
	cmp	r2, lr
	beq	.L15361
.L15366:
	ldr	r3, [ip, #4]
	add	r1, ip, #4
	cmp	r3, #0
	bne	.L15365
	b	.L15357
.L15363:
	ldr	r3, [r1, #4]!
	cmp	r3, #0
	beq	.L15357
.L15365:
	ldrb	ip, [r3, #1]	@ zero_extendqisi2
	cmp	ip, #5
	bne	.L15363
	subs	ip, r1, #0
	beq	.L15357
	ldrb	r1, [r3, #2]	@ zero_extendqisi2
	cmp	r1, lr
	bne	.L15366
.L15361:
	ldrb	r2, [r5, #24]	@ zero_extendqisi2
	mov	r1, #0
	ldrh	lr, [r3, #4]	@ unaligned
	cmp	r6, r1
	and	r2, r2, #131
	bfi	r2, r1, #0, #2
	strh	lr, [r5, #20]	@ movhi
	str	r1, [r5, #32]
	strb	r2, [r5, #24]
	str	r3, [r5, #28]
	beq	.L15368
	ldr	r2, [ip, #4]
	cmp	r2, #0
	beq	.L15357
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	cmp	r1, #48
	bne	.L15357
	str	r2, [r5, #32]
	ldr	r1, [r4, #16]
	cmp	r1, #5
	beq	.L15401
.L15368:
	mov	r0, #0
	b	.L15349
.L15353:
	ldr	r3, [r4, #20]
	b	.L15355
.L15400:
	ldr	ip, [r6, #12]
	mov	r6, #1
	b	.L15356
.L15401:
	ldrb	r3, [r3, #3]	@ zero_extendqisi2
	and	r3, r3, #3
	cmp	r3, #1
	beq	.L15370
	bcc	.L15402
.L15371:
	ldrb	r3, [r2, #2]	@ zero_extendqisi2
	mov	r0, #0
	ldrb	r2, [r5, #24]	@ zero_extendqisi2
	add	r3, r3, #1
	bfi	r2, r3, #2, #5
	strb	r2, [r5, #24]
	b	.L15349
.L15370:
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	ldrb	r1, [r2, #3]	@ zero_extendqisi2
	bfi	r3, r1, #0, #2
	strb	r3, [r5, #24]
	b	.L15371
.L15402:
	ldrb	r3, [r2, #2]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L15372
	ldr	r0, [r0]
	movw	r1, #:lower16:.LC1143
	movt	r1, #:upper16:.LC1143
	add	r0, r0, #32
	bl	dev_err
.L15372:
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	mov	r2, #1
	mov	r0, #0
	bfi	r3, r2, #2, #5
	strb	r3, [r5, #24]
	b	.L15349
	.fnend
	.size	config_ep_by_speed, .-config_ep_by_speed
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_set_alt, %function
diag_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #88]
	ldr	r5, [r3, #24]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L15406
	mov	r1, r4
	ldr	r2, [r4, #84]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L15406
	ldr	r3, [r4, #124]
	cmp	r3, #0
	beq	.L15409
	str	r4, [r3, #20]
	ldr	r3, [r4, #88]
	str	r4, [r3]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15414
	ldr	r3, [r4, #84]
	str	r4, [r3]
	ldr	r3, [r4, #84]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15415
	add	r6, r4, #108
	str	r5, [r4, #128]
	mov	r0, r6
	str	r5, [r4, #132]
	str	r5, [r4, #136]
	bl	_raw_spin_lock_irqsave
	mov	r3, #1
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #112]
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [r4, #124]
	ldr	r3, [r2, #12]
	cmp	r3, #0
	beq	.L15403
	ldr	r0, [r2, #16]
	mov	r1, r5
	mov	r2, r5
	blx	r3
.L15403:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15415:
	ldr	r2, [r4, #84]
	movw	r1, #:lower16:.LC1144
	mov	r3, r5
	ldr	r0, [r4, #116]
	movt	r1, #:upper16:.LC1144
	ldr	r2, [r2, #4]
	ldr	r0, [r0]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L15403
.L15414:
	ldr	r2, [r4, #88]
	movw	r1, #:lower16:.LC1144
	mov	r3, r5
	ldr	r0, [r4, #116]
	movt	r1, #:upper16:.LC1144
	ldr	r2, [r2, #4]
	ldr	r0, [r0]
	add	r0, r0, #32
	bl	dev_err
	b	.L15403
.L15406:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r5, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #84]
	str	r3, [r2, #28]
	b	.L15403
.L15409:
	mvn	r5, #18
	b	.L15403
	.fnend
	.size	diag_function_set_alt, .-diag_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_set_alt, %function
rmnet_smd_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #84]
	ldr	r2, [r0, #92]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15427
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15428
	mov	r1, r4
	ldr	r2, [r4, #88]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15429
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15430
	mov	r1, r4
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15431
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15432
	add	r2, r4, #392
	ldr	r1, [r4, #388]
	mov	r0, #4
	bl	queue_work_on
	b	.L15416
.L15428:
	ldr	r2, [r4, #92]
	movw	r1, #:lower16:.LC1144
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1144
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
.L15416:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15430:
	ldr	r2, [r4, #88]
	movw	r1, #:lower16:.LC1144
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1144
.L15426:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L15416
.L15432:
	ldr	r2, [r4, #96]
	movw	r1, #:lower16:.LC1144
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1144
.L15425:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L15416
.L15427:
	ldr	r2, [r4, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC1145
	movt	r1, #:upper16:.LC1145
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L15416
.L15429:
	ldr	r2, [r4, #88]
	mov	r0, #0
	movw	r1, #:lower16:.LC1145
	movt	r1, #:upper16:.LC1145
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #88]
	ldr	r0, [r6]
	b	.L15426
.L15431:
	ldr	r2, [r4, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC1145
	movt	r1, #:upper16:.LC1145
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	b	.L15425
	.fnend
	.size	rmnet_smd_set_alt, .-rmnet_smd_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_set_alt, %function
rmnet_sdio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #84]
	ldr	r3, [r0, #92]
	str	r0, [r3]
	ldr	r2, [r0, #92]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15454
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15455
	ldr	r3, [r4, #88]
	mov	r1, r4
	str	r4, [r3]
	ldr	r2, [r4, #88]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15456
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15457
	mov	r1, r4
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15458
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15459
	ldr	r6, [r4, #96]
	mov	r1, #32
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	bne	.L15460
.L15441:
	mvn	r3, #11
	mov	r5, r3
	str	r3, [r4, #100]
.L15446:
	movw	r0, #:lower16:.LC1147
	ldr	r1, .L15461
	movt	r0, #:upper16:.LC1147
	bl	printk
	b	.L15433
.L15455:
	ldr	r2, [r4, #92]
	movw	r1, #:lower16:.LC1144
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1144
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
.L15433:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15457:
	ldr	r2, [r4, #88]
	movw	r1, #:lower16:.LC1144
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1144
.L15453:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L15433
.L15459:
	ldr	r2, [r4, #96]
	movw	r1, #:lower16:.LC1144
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1144
.L15452:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L15433
.L15460:
	mov	r2, #8
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	str	r2, [r5, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5]
	beq	.L15443
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L15443
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L15441
.L15443:
	cmn	r5, #4096
	str	r5, [r4, #100]
	bhi	.L15446
	movw	r3, #:lower16:rmnet_sdio_notify_complete
	mov	r1, #8
	movt	r3, #:upper16:rmnet_sdio_notify_complete
	mov	r2, #1
	mov	r0, r4
	str	r3, [r5, #28]
	ldr	r3, [r4, #100]
	str	r4, [r3, #32]
	ldr	r3, [r4, #100]
	str	r1, [r3, #4]
	str	r2, [r4, #192]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	rmnet_sdio_start_io
.L15454:
	ldr	r2, [r4, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC1146
	movt	r1, #:upper16:.LC1146
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L15433
.L15456:
	ldr	r2, [r4, #88]
	mov	r0, #0
	movw	r1, #:lower16:.LC1146
	movt	r1, #:upper16:.LC1146
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #88]
	ldr	r0, [r6]
	b	.L15453
.L15458:
	ldr	r2, [r4, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC1146
	movt	r1, #:upper16:.LC1146
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	b	.L15452
.L15462:
	.align	2
.L15461:
	.word	.LANCHOR5+440
	.fnend
	.size	rmnet_sdio_set_alt, .-rmnet_sdio_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_set_alt, %function
audio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15479
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r2
	mov	r4, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r0, #20]
	ldrh	r2, [r3, #-14]
	ldr	r7, [r1, #24]
	tst	r2, #4
	bne	.L15476
.L15464:
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldrb	r3, [r3, #3238]	@ zero_extendqisi2
	cmp	r3, r5
	beq	.L15477
.L15470:
	mov	r5, #0
.L15463:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15477:
	cmp	r6, #0
	ldrb	r8, [r4, #152]	@ zero_extendqisi2
	beq	.L15466
	cmp	r8, #0
	bne	.L15470
	mov	r1, r4
	ldr	r2, [r4, #104]
	ldr	r0, [r7]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15478
	ldr	r3, [r4, #104]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	moveq	r3, #1
	strbeq	r3, [r4, #152]
	beq	.L15463
	ldr	r2, [r4, #104]
	movw	r1, #:lower16:.LC1150
	mov	r3, r5
	ldr	r0, [r7]
	movt	r1, #:upper16:.LC1150
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L15463
.L15466:
	cmp	r8, #0
	beq	.L15471
	ldr	r0, [r4, #104]
	mov	r5, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	strb	r6, [r4, #152]
	b	.L15463
.L15476:
	movw	r1, #:lower16:.LC1148
	sub	r0, r3, #32
	movt	r1, #:upper16:.LC1148
	mov	r3, r6
	mov	r2, r5
	bl	__dynamic_pr_debug
	b	.L15464
.L15471:
	mov	r5, r6
	b	.L15463
.L15478:
	ldr	r2, [r4, #104]
	movw	r1, #:lower16:.LC1149
	mov	r3, r5
	movt	r1, #:upper16:.LC1149
	str	r8, [r2, #28]
	ldr	r2, [r4, #104]
	ldr	r0, [r7]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L15463
.L15480:
	.align	2
.L15479:
	.word	.LANCHOR8-3904
	.fnend
	.size	audio_set_alt, .-audio_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_stop, %function
eth_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r1, [r0, #576]
	cmp	r1, #0
	beq	.L15495
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
.L15490:
	add	r6, r5, #1152
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #1156]
	mov	r7, r0
	cmp	r4, #0
	beq	.L15484
	ldr	r3, [r4, #140]
	cmp	r3, #0
	beq	.L15485
	mov	r0, r4
	blx	r3
.L15485:
	ldr	r3, [r4, #88]
	ldr	r1, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r9, [r3, #28]
	ldr	r8, [r1, #28]
	ldr	r3, [r2, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #164]
	tst	r3, #4
	beq	.L15496
.L15484:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
.L15481:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15496:
	mov	r1, r4
	ldr	r2, [r4, #88]
	ldr	r0, [r5, #1164]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L15489
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r5, #1164]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L15489
	ldr	r3, [r4, #88]
	str	r9, [r3, #28]
	ldr	r3, [r4, #92]
	str	r8, [r3, #28]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	b	.L15484
.L15495:
	movw	r0, #:lower16:.LC109
	movw	r1, #1847
	movt	r0, #:upper16:.LC109
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC110
	movt	r0, #:upper16:.LC110
	bl	printk
	b	.L15490
.L15489:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L15481
	.fnend
	.size	eth_stop, .-eth_stop
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_function_set_alt, %function
acc_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L15514
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	mov	r3, r2
	str	lr, [sp, #12]
	ldr	r0, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	ldrh	r2, [ip, #-6]
	ldr	r6, [r0, #24]
	tst	r2, #4
	ldr	r0, [r6]
	bne	.L15509
.L15498:
	mov	r1, r4
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15510
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15511
	mov	r1, r4
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15512
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15513
	ldrb	ip, [r4, #100]	@ zero_extendqisi2
	mov	r2, #1
	add	r0, r4, #1664
	mov	r3, r5
	mov	r1, #3
	orr	ip, ip, r2
	strb	ip, [r4, #100]
	bl	__wake_up
.L15497:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15511:
	ldr	r2, [r4, #92]
	movw	r1, #:lower16:.LC1152
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1152
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L15497
.L15513:
	ldr	r2, [r4, #96]
	movw	r1, #:lower16:.LC1152
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1152
.L15508:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L15497
.L15509:
	movw	r2, #:lower16:.LC1151
	str	r3, [sp]
	mov	r3, r1
	movt	r2, #:upper16:.LC1151
	add	r1, r0, #32
	sub	r0, ip, #24
	bl	__dynamic_dev_dbg
	ldr	r0, [r6]
	b	.L15498
.L15510:
	ldr	r2, [r4, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC1146
	movt	r1, #:upper16:.LC1146
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L15497
.L15512:
	ldr	r2, [r4, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC1146
	movt	r1, #:upper16:.LC1146
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	b	.L15508
.L15515:
	.align	2
.L15514:
	.word	.LANCHOR8-3888
	.fnend
	.size	acc_function_set_alt, .-acc_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_set_alt, %function
fsg_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #88]
	ldr	r2, [r0, #100]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15516
	ldr	r3, [r4, #100]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L15526
.L15516:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15526:
	ldr	r3, [r4, #100]
	mov	r1, r4
	str	r6, [r3]
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	ldr	r2, [r4, #104]
	orr	r3, r3, #1
	strb	r3, [r4, #94]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	beq	.L15527
.L15518:
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r4, #94]
	b	.L15516
.L15527:
	ldr	r3, [r4, #104]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15518
	ldr	r3, [r4, #104]
	add	r1, r4, #96
	str	r6, [r3]
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	ldr	r2, [r4, #104]
	orr	r3, r3, #2
	strb	r3, [r4, #94]
	ldr	r3, [r2, #28]
	ldrh	r3, [r3, #4]	@ unaligned
	str	r3, [r6, #108]
	bl	_clear_bit
	ldr	r2, [r4, #88]
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r5, [r3, #3964]
	str	r4, [r2, #12]
	ldr	r4, [r4, #88]
	str	r5, [r3, #3968]
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	mov	r6, r0
	cmp	r3, #4
	bgt	.L15520
	ldr	r3, [r4, #56]
	mov	r1, #4
	ldr	r2, [r4, #168]
	str	r1, [r4, #112]
	str	r3, [r4, #116]
	cmp	r2, #0
	beq	.L15520
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L15520:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	movw	r5, #32767
	b	.L15516
	.fnend
	.size	fsg_set_alt, .-fsg_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_set_alt, %function
mtp_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L15546
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	mov	r3, r2
	str	lr, [sp, #12]
	ldr	r0, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	ldrh	r2, [ip, #-14]
	ldr	r6, [r0, #24]
	tst	r2, #4
	ldr	r0, [r6]
	bne	.L15541
.L15529:
	mov	r1, r4
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15542
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15543
	mov	r1, r4
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15544
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15545
	ldr	r3, [r4, #100]
	ldr	r2, .L15546+4
	str	r2, [r3, #28]
	ldr	r3, [r4, #100]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L15535
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
.L15528:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15543:
	ldr	r2, [r4, #92]
	movw	r1, #:lower16:.LC1152
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1152
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L15528
.L15541:
	movw	r2, #:lower16:.LC1153
	str	r3, [sp]
	mov	r3, r1
	movt	r2, #:upper16:.LC1153
	add	r1, r0, #32
	sub	r0, ip, #32
	bl	__dynamic_dev_dbg
	ldr	r0, [r6]
	b	.L15529
.L15542:
	ldr	r2, [r4, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC1146
	movt	r1, #:upper16:.LC1146
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L15528
.L15544:
	ldr	r2, [r4, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC1146
	movt	r1, #:upper16:.LC1146
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
.L15540:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L15528
.L15535:
	mov	r1, #1
	add	r0, r4, #132
	mov	r2, r1
	mov	r3, r5
	str	r1, [r4, #104]
	mov	r1, #3
	bl	__wake_up
	b	.L15528
.L15545:
	movw	r1, #:lower16:.LC1152
	mov	r3, r5
	ldr	r2, [r4, #96]
	movt	r1, #:upper16:.LC1152
	ldr	r0, [r6]
	b	.L15540
.L15547:
	.align	2
.L15546:
	.word	.LANCHOR8-3856
	.word	.LANCHOR7-2008
	.fnend
	.size	mtp_function_set_alt, .-mtp_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_set_alt, %function
ccid_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r1, #32
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r9, [r0, #84]
	ldr	r7, [r0, #100]
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L15549
	mov	r2, #4
	movw	r6, #:lower16:kmalloc_caches
	movt	r6, #:upper16:kmalloc_caches
	str	r2, [r5, #4]
	ldr	r0, [r6, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5]
	beq	.L15551
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L15551
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L15549:
	mvn	r3, #11
	str	r3, [r4, #112]
.L15574:
	movw	r0, #:lower16:.LC1107
	ldr	r1, .L15597
	movt	r0, #:upper16:.LC1107
	bl	printk
	ldr	r5, [r4, #112]
.L15548:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15551:
	cmn	r5, #4096
	str	r5, [r4, #112]
	bhi	.L15574
	movw	r3, #:lower16:ccid_notify_complete
	mov	r1, #32
	movt	r3, #:upper16:ccid_notify_complete
	str	r3, [r5, #28]
	ldr	r3, [r4, #112]
	str	r4, [r3, #32]
	ldr	r7, [r4, #108]
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L15578
	movw	r2, #522
	str	r2, [r5, #4]
	ldr	r0, [r6, #40]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5]
	beq	.L15555
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L15555
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	mvn	r5, #11
	ldr	r3, [r3, #12]
	blx	r3
.L15553:
	movw	r0, #:lower16:.LC1154
	ldr	r1, .L15597
	movt	r0, #:upper16:.LC1154
	bl	printk
.L15556:
	ldr	r6, [r4, #112]
	cmp	r6, #0
	beq	.L15548
	ldr	r4, [r4, #100]
	ldr	r0, [r6]
	bl	kfree
	mov	r1, r6
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	b	.L15548
.L15555:
	cmn	r5, #4096
	bhi	.L15553
	movw	r3, #:lower16:ccid_bulk_complete_out
	movw	r8, #:lower16:ccid_bulk_complete_in
	str	r4, [r5, #32]
	movt	r3, #:upper16:ccid_bulk_complete_out
	movt	r8, #:upper16:ccid_bulk_complete_in
	mov	r7, #4
	str	r3, [r5, #28]
	str	r5, [r4, #184]
.L15561:
	ldr	r10, [r4, #104]
	mov	r1, #32
	ldr	r3, [r10, #8]
	mov	r0, r10
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L15579
	movw	r3, #523
	mov	ip, #16
	mov	r1, #32
	movw	r2, #523
	str	r3, [r5, #4]
	ldr	r3, [r6, #40]
	subs	r0, r3, #0
	streq	ip, [r5]
	beq	.L15559
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L15559
	ldr	r3, [r10, #8]
	mov	r1, r5
	mov	r0, r10
	mvn	r5, #11
	ldr	r3, [r3, #12]
	blx	r3
.L15557:
	movw	r0, #:lower16:.LC1155
	ldr	r1, .L15597
	movt	r0, #:upper16:.LC1155
	bl	printk
.L15560:
	ldr	r6, [r4, #184]
	cmp	r6, #0
	beq	.L15556
	ldr	r7, [r4, #108]
	ldr	r0, [r6]
	bl	kfree
	mov	r1, r6
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L15556
.L15559:
	add	r3, r4, #192
	cmn	r5, #4096
	add	r10, r4, #92
	mov	r0, r10
	str	r3, [sp, #4]
	bhi	.L15557
	str	r8, [r5, #28]
	str	r4, [r5, #32]
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	add	r2, r4, #192
	ldr	r1, [r4, #196]
	add	r0, r5, #36
	bl	__list_add
	mov	r1, fp
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	subs	r7, r7, #1
	bne	.L15561
	mov	r1, r4
	ldr	r2, [r4, #100]
	ldr	r0, [r9]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15592
	ldr	r3, [r4, #100]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15593
	ldr	r3, [r4, #100]
	mov	r1, r4
	str	r4, [r3]
	ldr	r2, [r4, #104]
	ldr	r0, [r9]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15594
	ldr	r3, [r4, #104]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15595
	mov	r1, r4
	ldr	r2, [r4, #108]
	ldr	r0, [r9]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15596
	ldr	r3, [r4, #108]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	moveq	r3, #1
	streq	r3, [r4, #96]
	streq	r3, [r4, #200]
	beq	.L15548
	ldr	r2, [r4, #108]
	movw	r0, #:lower16:.LC1157
	mov	r3, r5
	movt	r0, #:upper16:.LC1157
	ldr	r1, .L15597
	ldr	r2, [r2, #4]
	bl	printk
.L15569:
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
.L15566:
.L15563:
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #100]
	mov	r2, #0
	str	r2, [r3]
	b	.L15571
.L15572:
	bl	list_del
	mov	r1, r8
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L15560
	ldr	r8, [r4, #104]
	ldr	r0, [r6, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L15571:
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #4]
	mov	r8, r0
	ldr	r6, [r4, #192]
	cmp	r3, r6
	mov	r0, r6
	sub	r7, r6, #36
	bne	.L15572
	mov	r1, r8
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	b	.L15560
.L15579:
	mvn	r5, #11
	b	.L15557
.L15578:
	mvn	r5, #11
	b	.L15553
.L15592:
	ldr	r2, [r4, #100]
	movw	r0, #:lower16:.LC1156
	mov	r3, r5
	ldr	r1, .L15597
	movt	r0, #:upper16:.LC1156
	str	r7, [r2, #28]
	ldr	r2, [r4, #100]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L15571
.L15593:
	ldr	r2, [r4, #100]
	movw	r0, #:lower16:.LC1157
	mov	r3, r5
	ldr	r1, .L15597
	movt	r0, #:upper16:.LC1157
	ldr	r2, [r2, #4]
	bl	printk
	b	.L15571
.L15594:
	ldr	r2, [r4, #104]
	movw	r0, #:lower16:.LC1156
	mov	r3, r5
	ldr	r1, .L15597
	movt	r0, #:upper16:.LC1156
	str	r7, [r2, #28]
	ldr	r2, [r4, #104]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L15566
.L15595:
	ldr	r2, [r4, #104]
	movw	r0, #:lower16:.LC1157
	mov	r3, r5
	ldr	r1, .L15597
	movt	r0, #:upper16:.LC1157
	ldr	r2, [r2, #4]
	bl	printk
	b	.L15566
.L15596:
	ldr	r2, [r4, #108]
	movw	r0, #:lower16:.LC1156
	mov	r3, r5
	ldr	r1, .L15597
	movt	r0, #:upper16:.LC1156
	str	r7, [r2, #28]
	ldr	r2, [r4, #108]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L15569
.L15598:
	.align	2
.L15597:
	.word	.LANCHOR5+460
	.fnend
	.size	ccid_function_set_alt, .-ccid_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_set_alt, %function
adb_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L15616
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	mov	r3, r2
	str	lr, [sp, #12]
	ldr	r0, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	ldrh	r2, [ip, #-6]
	ldr	r6, [r0, #24]
	tst	r2, #4
	ldr	r0, [r6]
	bne	.L15611
.L15600:
	mov	r1, r4
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15612
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15613
	mov	r1, r4
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15614
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15615
	mov	r1, #1
	add	r0, r4, #128
	mov	r2, r1
	mov	r3, r5
	str	r1, [r4, #100]
	mov	r1, #3
	bl	__wake_up
.L15599:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15613:
	ldr	r2, [r4, #92]
	movw	r1, #:lower16:.LC1152
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1152
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L15599
.L15615:
	ldr	r2, [r4, #96]
	movw	r1, #:lower16:.LC1152
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1152
.L15610:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L15599
.L15611:
	movw	r2, #:lower16:.LC1158
	str	r3, [sp]
	mov	r3, r1
	movt	r2, #:upper16:.LC1158
	add	r1, r0, #32
	sub	r0, ip, #24
	bl	__dynamic_dev_dbg
	ldr	r0, [r6]
	b	.L15600
.L15612:
	ldr	r2, [r4, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC1146
	movt	r1, #:upper16:.LC1146
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L15599
.L15614:
	ldr	r2, [r4, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC1146
	movt	r1, #:upper16:.LC1146
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	b	.L15610
.L15617:
	.align	2
.L15616:
	.word	.LANCHOR8-3840
	.fnend
	.size	adb_function_set_alt, .-adb_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_set_alt, %function
qdss_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15659
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldr	r1, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	ldrh	r0, [r3, #-14]
	ldr	r1, [r1, #24]
	tst	r0, #4
	ldr	r6, [r1]
	bne	.L15654
.L15619:
	cmp	r2, #0
	bne	.L15633
	ldr	r3, [r6, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L15655
	ldrb	r3, [r4, #89]	@ zero_extendqisi2
	cmp	r3, r5
	beq	.L15656
	ldrb	r3, [r4, #88]	@ zero_extendqisi2
	cmp	r3, r5
	beq	.L15657
.L15625:
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	and	r3, r3, #7
	cmp	r3, #7
	moveq	r3, #1
	streq	r3, [r4, #92]
	beq	.L15628
	ldr	r3, [r4, #92]
	cmp	r3, #0
	bne	.L15628
.L15653:
	mov	r5, #0
.L15618:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15628:
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L15653
	add	r2, r4, #156
	ldr	r1, [r4, #196]
	mov	r0, #4
	bl	queue_work_on
	b	.L15653
.L15656:
	mov	r0, r6
	mov	r1, r4
	ldr	r2, [r4, #108]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L15626
	ldr	r3, [r4, #108]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15620
	ldr	r3, [r4, #108]
	str	r4, [r3]
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r4, #192]
	b	.L15625
.L15657:
	mov	r1, r4
	mov	r0, r6
	ldr	r2, [r4, #104]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L15626
	ldr	r3, [r4, #104]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15620
	ldr	r3, [r4, #104]
	mov	r0, r6
	mov	r1, r4
	str	r4, [r3]
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	ldr	r2, [r4, #100]
	orr	r3, r3, #2
	strb	r3, [r4, #192]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L15626
	ldr	r3, [r4, #100]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15620
	ldr	r3, [r4, #100]
	str	r4, [r3]
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	orr	r3, r3, #4
	strb	r3, [r4, #192]
	b	.L15625
.L15654:
	movw	r1, #:lower16:.LC1159
	sub	r0, r3, #32
	str	r2, [sp, #4]
	movt	r1, #:upper16:.LC1159
	bl	__dynamic_pr_debug
	ldr	r2, [sp, #4]
	b	.L15619
.L15626:
	mvn	r5, #21
	b	.L15618
.L15633:
	mov	r5, #0
.L15620:
	movw	r0, #:lower16:.LC1161
	movt	r0, #:upper16:.LC1161
	bl	printk
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #642
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L15658
.L15630:
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	tst	r3, #2
	beq	.L15631
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #192]	@ zero_extendqisi2
	bfc	r2, #1, #1
	uxtb	r3, r2
	strb	r2, [r4, #192]
.L15631:
	tst	r3, #4
	beq	.L15632
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #192]	@ zero_extendqisi2
	bfc	r2, #2, #1
	uxtb	r3, r2
	strb	r2, [r4, #192]
.L15632:
	tst	r3, #1
	beq	.L15618
	ldr	r0, [r4, #108]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r4, #192]
	b	.L15618
.L15655:
	movw	r0, #:lower16:.LC1160
	mvn	r5, #21
	movt	r0, #:upper16:.LC1160
	bl	printk
	b	.L15620
.L15658:
	movw	r1, #:lower16:.LC836
	add	r0, r0, #624
	movt	r1, #:upper16:.LC836
	bl	__dynamic_pr_debug
	b	.L15630
.L15660:
	.align	2
.L15659:
	.word	.LANCHOR8-3808
	.fnend
	.size	qdss_set_alt, .-qdss_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_set_alt, %function
rmnet_mux_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r1, #32
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #84]
	ldr	r6, [r0, #96]
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	bne	.L15682
.L15662:
	mvn	r3, #11
	mov	r5, r3
	str	r3, [r4, #100]
.L15661:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15682:
	mov	r2, #8
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	str	r2, [r5, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5]
	beq	.L15664
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L15664
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L15662
.L15664:
	cmn	r5, #4096
	str	r5, [r4, #100]
	bhi	.L15661
	movw	r3, #:lower16:rmnet_mux_notify_complete
	mov	r2, #8
	movt	r3, #:upper16:rmnet_mux_notify_complete
	mov	r1, r4
	str	r3, [r5, #28]
	ldr	r3, [r4, #100]
	str	r4, [r3, #32]
	ldr	r3, [r4, #100]
	str	r2, [r3, #4]
	ldr	r3, [r4, #92]
	str	r4, [r3]
	ldr	r2, [r4, #92]
	ldr	r0, [r7]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15683
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15684
	ldr	r3, [r4, #88]
	mov	r1, r4
	str	r4, [r3]
	ldr	r2, [r4, #88]
	ldr	r0, [r7]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15685
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15686
	mov	r1, r4
	ldr	r2, [r4, #96]
	ldr	r0, [r7]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15687
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L15688
	mov	r3, #1
	str	r5, [r4, #312]
	str	r3, [r4, #372]
	str	r5, [r4, #400]
	str	r5, [r4, #404]
	str	r5, [r4, #408]
	str	r5, [r4, #412]
	str	r5, [r4, #416]
	str	r5, [r4, #420]
	str	r5, [r4, #424]
	b	.L15661
.L15684:
	ldr	r2, [r4, #92]
	movw	r1, #:lower16:.LC1144
	mov	r3, r5
	ldr	r0, [r7]
	movt	r1, #:upper16:.LC1144
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L15661
.L15686:
	ldr	r2, [r4, #88]
	movw	r1, #:lower16:.LC1144
	mov	r3, r5
	ldr	r0, [r7]
	movt	r1, #:upper16:.LC1144
.L15680:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L15661
.L15688:
	ldr	r2, [r4, #96]
	movw	r1, #:lower16:.LC1144
	mov	r3, r5
	ldr	r0, [r7]
	movt	r1, #:upper16:.LC1144
.L15681:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L15661
.L15683:
	ldr	r2, [r4, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC1146
	movt	r1, #:upper16:.LC1146
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #92]
	ldr	r0, [r7]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L15661
.L15685:
	ldr	r2, [r4, #88]
	mov	r0, #0
	movw	r1, #:lower16:.LC1146
	movt	r1, #:upper16:.LC1146
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #88]
	ldr	r0, [r7]
	b	.L15680
.L15687:
	ldr	r2, [r4, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC1146
	movt	r1, #:upper16:.LC1146
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r2, [r4, #96]
	ldr	r0, [r7]
	b	.L15681
	.fnend
	.size	rmnet_mux_set_alt, .-rmnet_mux_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_set_alt, %function
conn_gadget_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC1162
	str	r6, [sp, #8]
	mov	r3, r2
	movt	r0, #:upper16:.LC1162
	str	lr, [sp, #12]
	ldr	ip, [r4, #20]
	mov	r2, r1
	ldr	r1, .L15696
	ldr	r6, [ip, #24]
	bl	printk
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15689
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L15695
.L15689:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15695:
	mov	r1, r4
	ldr	r2, [r4, #96]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15694
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L15692
.L15694:
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L15689
.L15692:
	ldr	r3, [r4, #100]
	mov	r6, #1
	movw	r0, #:lower16:.LC1163
	ldr	r1, .L15696
	movt	r0, #:upper16:.LC1163
	str	r6, [r4, #100]
	str	r5, [r4, #104]
	str	r3, [r4, #212]
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2484]
	str	r5, [r3, #168]
	mov	r0, r3
	str	r5, [r3, #172]
	bl	conn_gadget_request_ep_out
	mov	r3, r5
	mov	r2, r6
	add	r0, r4, #200
	mov	r1, #3
	bl	__wake_up
	mov	r3, r5
	mov	r2, r6
	add	r0, r4, #144
	mov	r1, #3
	bl	__wake_up
	b	.L15689
.L15697:
	.align	2
.L15696:
	.word	.LANCHOR5+484
	.fnend
	.size	conn_gadget_function_set_alt, .-conn_gadget_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_set_alt, %function
f_midi_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r0, #20]
	ldr	r5, [r0, #88]
	ldr	r7, [r2, #24]
	ldr	r3, [r5]
	cmp	r3, #0
	beq	.L15699
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #4]
	blx	r3
.L15699:
	mov	r2, r5
	mov	r1, r4
	ldr	r0, [r4, #84]
	bl	config_ep_by_speed
	subs	r6, r0, #0
	ldrne	r0, [r7]
	bne	.L15727
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r1, [r5, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L15729
	str	r4, [r5]
	ldr	r2, [r4, #20]
	ldr	r5, [r4, #92]
	ldr	r8, [r2, #24]
	ldr	r3, [r5]
	cmp	r3, #0
	beq	.L15703
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #4]
	blx	r3
.L15703:
	mov	r2, r5
	mov	r1, r4
	ldr	r0, [r4, #84]
	bl	config_ep_by_speed
	subs	r6, r0, #0
	bne	.L15730
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r1, [r5, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L15731
	str	r4, [r5]
	ldr	r2, [r4, #92]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L15706
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #92]
.L15706:
	mov	r1, r4
	ldr	r0, [r4, #84]
	bl	config_ep_by_speed
	subs	r6, r0, #0
	bne	.L15732
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L15733
	ldr	r3, [r4, #92]
	str	r4, [r3]
	ldr	r3, [r4, #340]
	cmp	r3, #0
	beq	.L15698
	movw	r7, #:lower16:f_midi_complete
	mov	r5, r6
	movt	r7, #:upper16:f_midi_complete
.L15711:
	ldr	r0, [r4, #92]
	add	r5, r5, #1
	ldr	r1, [r4, #336]
	bl	midi_alloc_ep_req
	cmp	r0, #0
	mov	r2, #32
	mov	r1, r0
	beq	.L15712
	str	r7, [r0, #28]
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	bne	.L15734
	ldr	r3, [r4, #340]
	cmp	r3, r5
	bhi	.L15711
	b	.L15698
.L15729:
	ldr	r0, [r7]
.L15728:
	movw	r1, #:lower16:.LC1165
	mov	r3, r6
	ldr	r2, [r5, #4]
	movt	r1, #:upper16:.LC1165
	add	r0, r0, #32
	bl	dev_err
.L15698:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15734:
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC1166
	ldr	r2, [r4, #92]
	movt	r1, #:upper16:.LC1166
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L15698
.L15731:
	ldr	r0, [r8]
	b	.L15728
.L15730:
	ldr	r0, [r8]
.L15727:
	movw	r1, #:lower16:.LC1164
	mov	r3, r6
	ldr	r2, [r5, #4]
	movt	r1, #:upper16:.LC1164
	add	r0, r0, #32
	bl	dev_err
	b	.L15698
.L15733:
	ldr	r2, [r4, #92]
	movw	r1, #:lower16:.LC1165
	mov	r3, r6
	ldr	r0, [r7]
	movt	r1, #:upper16:.LC1165
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L15698
.L15712:
	mvn	r6, #11
	b	.L15698
.L15732:
	ldr	r2, [r4, #92]
	movw	r1, #:lower16:.LC1164
	mov	r3, r6
	ldr	r0, [r7]
	movt	r1, #:upper16:.LC1164
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L15698
	.fnend
	.size	f_midi_set_alt, .-f_midi_set_alt
	.align	2
	.global	usb_add_function
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_add_function, %function
usb_add_function:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #1386
	movt	r5, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r4, r1
	ldrh	r3, [r5, r3]
	str	r8, [sp, #16]
	mov	r6, r0
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	tst	r3, #4
	bne	.L15765
.L15736:
	ldr	r3, [r4, #40]
	cmp	r3, #0
	beq	.L15744
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L15744
	add	r8, r4, #72
	str	r6, [r4, #20]
	add	r2, r6, #36
	mov	r0, r8
	ldr	r1, [r6, #40]
	bl	__list_add
	ldr	r7, [r4, #32]
	cmp	r7, #0
	beq	.L15738
	mov	r1, r4
	mov	r0, r6
	blx	r7
	subs	r7, r0, #0
	blt	.L15766
.L15738:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L15739
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L15739
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r6, #45]
.L15739:
	tst	r3, #2
	bne	.L15740
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L15740
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r6, #45]
.L15740:
	tst	r3, #1
	bne	.L15741
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L15741
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #45]
.L15741:
	cmp	r7, #0
	bne	.L15737
	b	.L15735
.L15744:
	mvn	r7, #21
.L15737:
	movw	r3, #1410
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L15767
.L15735:
	mov	r0, r7
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15765:
	ldr	r3, [r1]
	movw	r2, #:lower16:.LC929
	ldr	ip, [r6]
	movt	r2, #:upper16:.LC929
	ldr	r1, [r6, #24]
	ldr	r0, .L15768
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r6, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L15736
.L15767:
	ldr	r1, [r6, #24]
	movw	r2, #:lower16:.LC930
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC930
	ldr	r0, .L15768+4
	ldr	r1, [r1]
	stm	sp, {r4, r7}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L15735
.L15766:
	mov	r0, r8
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L15738
.L15769:
	.align	2
.L15768:
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.fnend
	.size	usb_add_function, .-usb_add_function
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_function_bind_config, %function
midi_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #4]
	cmp	r7, #0
	beq	.L15771
	mvn	r3, #0
	str	r3, [r7]
	str	r3, [r7, #4]
.L15771:
	movw	r5, #:lower16:kmalloc_caches
	movt	r5, #:upper16:kmalloc_caches
	ldr	r0, [r5, #36]
	cmp	r0, #0
	beq	.L15779
	mov	r2, #344
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L15792
	ldr	r0, [r5, #24]
	cmp	r0, #0
	beq	.L15793
.L15790:
	mov	r2, #12
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L15794
.L15777:
	mov	r5, #0
	movw	r1, #:lower16:f_midi_in_tasklet
	mov	r2, r4
	movt	r1, #:upper16:f_midi_in_tasklet
	strd	r4, [r3]
	add	r0, r4, #300
	strb	r5, [r3, #8]
	str	r3, [r4, #232]
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	str	r3, [r4, #84]
	bl	tasklet_init
	mov	r0, r5
	mov	r1, #208
	bl	kstrdup
	mov	r3, #1
	mvn	ip, #0
	mov	r1, #1024
	mov	r2, #32
	str	r3, [r4, #320]
	str	r3, [r4, #324]
	str	ip, [r4, #328]
	str	r0, [r4, #332]
	mov	r0, r4
	str	r1, [r4, #336]
	str	r2, [r4, #340]
	bl	f_midi_register_card
	subs	r5, r0, #0
	bge	.L15795
.L15775:
	ldr	r0, [r4, #232]
	bl	kfree
.L15774:
	mov	r0, r4
	bl	kfree
.L15770:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15779:
	ldr	r0, [r5, #24]
	mov	r4, #16
	cmp	r0, #0
	bne	.L15790
.L15793:
	mov	r3, #16
	b	.L15777
.L15794:
	mvn	r5, #11
	b	.L15774
.L15795:
	ldr	lr, .L15796
	movw	r3, #:lower16:.LC1167
	movw	ip, #:lower16:f_midi_bind
	movt	r3, #:upper16:.LC1167
	movw	r1, #:lower16:f_midi_unbind
	movw	r2, #:lower16:f_midi_set_alt
	movt	ip, #:upper16:f_midi_bind
	movt	r1, #:upper16:f_midi_unbind
	movt	r2, #:upper16:f_midi_set_alt
	stm	r4, {r3, lr}
	movw	r3, #:lower16:f_midi_disable
	mov	r0, r6
	movt	r3, #:upper16:f_midi_disable
	str	ip, [r4, #32]
	str	r1, [r4, #36]
	mov	r1, r4
	str	r2, [r4, #40]
	str	r3, [r4, #48]
	bl	usb_add_function
	subs	r5, r0, #0
	bne	.L15775
	cmp	r7, #0
	beq	.L15770
	ldr	r3, [r4, #100]
	ldr	r3, [r3]
	ldr	r3, [r3]
	str	r3, [r7]
	ldr	r3, [r4, #100]
	ldr	r3, [r3, #12]
	str	r3, [r7, #4]
	ldr	r3, [r4, #100]
	ldr	r3, [r3]
	ldr	r3, [r3]
	str	r3, [r7]
	ldr	r3, [r4, #100]
	ldr	r3, [r3, #12]
	str	r3, [r7, #4]
	b	.L15770
.L15792:
	mvn	r5, #11
	b	.L15770
.L15797:
	.align	2
.L15796:
	.word	.LANCHOR7-1860
	.fnend
	.size	midi_function_bind_config, .-midi_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_function_bind_config, %function
qdss_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L15828
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r0, #-6]
	.pad #8
	sub	sp, sp, #8
	tst	r3, #4
	bne	.L15822
.L15799:
	movw	r3, #:lower16:.LANCHOR7
	movt	r3, #:upper16:.LANCHOR7
	ldrb	r2, [r3, #-1852]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L15800
	ldr	r1, [r7, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L15803
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r7, #24]
	strb	r2, [r3, #-3308]
	strb	r2, [r3, #-1852]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L15803
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [r3, #-3296]
	strb	r2, [r3, #-1844]
.L15800:
	movw	r8, #:lower16:.LANCHOR0
	ldr	r0, .L15828+4
	movt	r8, #:upper16:.LANCHOR0
	mov	r5, r8
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #284]!
	mov	r9, r0
	cmp	r4, r5
	sub	r4, r4, #4
	beq	.L15804
	movw	r6, #:lower16:.LC1169
	movt	r6, #:upper16:.LC1169
	b	.L15806
.L15823:
	ldr	r4, [r4, #4]
	cmp	r4, r5
	sub	r4, r4, #4
	beq	.L15804
.L15806:
	mov	r0, r6
	ldr	r1, [r4]
	bl	strcmp
	cmp	r0, #0
	bne	.L15823
	movw	r6, #:lower16:.LC1169
	sub	r5, r4, #112
	movt	r6, #:upper16:.LC1169
	str	r5, [r4, #20]
.L15812:
	mov	r1, r9
	ldr	r0, .L15828+4
	mov	r8, #0
	bl	_raw_spin_unlock_irqrestore
	ldr	r10, .L15828+8
	movw	lr, #:lower16:qdss_set_alt
	movw	ip, #:lower16:qdss_disable
	ldr	r1, .L15828+12
	movt	lr, #:upper16:qdss_set_alt
	movt	ip, #:upper16:qdss_disable
	movw	r2, #:lower16:qdss_bind
	movw	r3, #:lower16:qdss_unbind
	ldr	r9, [r7, #24]
	movt	r2, #:upper16:qdss_bind
	movt	r3, #:upper16:qdss_unbind
	str	r6, [r5]
	str	lr, [r5, #40]
	add	lr, r5, #140
	mov	r0, r7
	str	ip, [r5, #48]
	add	ip, r5, #148
	stmib	r5, {r1, r10}
	movw	r1, #:lower16:usb_qdss_connect_work
	movt	r1, #:upper16:usb_qdss_connect_work
	str	r10, [r5, #16]
	strd	r2, [r5, #32]
	mov	r2, #65024
	movw	r3, #:lower16:usb_qdss_disconnect_work
	movt	r2, 65535
	movt	r3, #:upper16:usb_qdss_disconnect_work
	str	lr, [r5, #140]
	str	lr, [r5, #144]
	add	lr, r5, #160
	str	ip, [r5, #148]
	str	ip, [r5, #152]
	add	ip, r5, #176
	str	r9, [r5, #84]
	str	r2, [r5, #156]
	str	lr, [r5, #160]
	str	lr, [r5, #164]
	str	r1, [r5, #168]
	mov	r1, r5
	str	r2, [r5, #172]
	str	ip, [r5, #176]
	str	ip, [r5, #180]
	str	r3, [r5, #184]
	str	r8, [r5, #188]
	bl	usb_add_function
	subs	r6, r0, #0
	bne	.L15824
.L15798:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15804:
	ldr	r0, .L15828+16
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L15825
.L15811:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L15813
	mov	r2, #200
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L15826
.L15807:
	mov	r1, r9
	ldr	r0, .L15828+4
	movw	r6, #:lower16:.LC1169
	bl	_raw_spin_unlock_irqrestore
	movt	r6, #:upper16:.LC1169
	mov	r3, #0
	mov	r1, #10
	movw	r0, #:lower16:.LC84
	movt	r1, 2
	movt	r0, #:upper16:.LC84
	stm	sp, {r3, r6}
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r5, #196]
	beq	.L15827
	ldr	r0, .L15828+4
	add	r4, r5, #112
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	ldr	r2, .L15828+20
	add	r0, r5, #116
	ldr	r1, [r8, #288]
	str	r6, [r5, #112]
	bl	__list_add
	b	.L15812
.L15813:
	mov	r5, #16
	b	.L15807
.L15822:
	movw	r1, #:lower16:.LC1168
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1168
	bl	__dynamic_pr_debug
	b	.L15799
.L15825:
	movw	r1, #:lower16:.LC1170
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1170
	bl	__dynamic_pr_debug
	b	.L15811
.L15803:
	mvn	r6, #18
.L15802:
	movw	r0, #:lower16:.LC1173
	ldr	r1, .L15828+24
	movt	r0, #:upper16:.LC1173
	bl	printk
	b	.L15798
.L15827:
	mov	r0, r5
	mvn	r6, #11
	bl	kfree
	b	.L15802
.L15824:
	movw	r0, #:lower16:.LC1172
	movt	r0, #:upper16:.LC1172
	bl	printk
	mov	r0, r5
	str	r8, [r4, #20]
	bl	kfree
	b	.L15802
.L15826:
	movw	r0, #:lower16:.LC1171
	mvn	r6, #11
	movt	r0, #:upper16:.LC1171
	bl	printk
	mov	r1, r9
	ldr	r0, .L15828+4
	bl	_raw_spin_unlock_irqrestore
	b	.L15802
.L15829:
	.align	2
.L15828:
	.word	.LANCHOR8-3792
	.word	.LANCHOR1+3408
	.word	.LANCHOR7-3196
	.word	.LANCHOR7-1828
	.word	.LANCHOR8-3760
	.word	.LANCHOR0+284
	.word	.LANCHOR5+516
	.fnend
	.size	qdss_function_bind_config, .-qdss_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_function_bind_config, %function
audio_source_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mvn	ip, #0
	mov	r3, #0
	strd	r6, [sp, #8]
	mov	r2, r3
	mov	r7, r1
	str	r8, [sp, #16]
	mov	r1, r3
	str	lr, [sp, #20]
	ldr	r5, [r0, #4]
	.pad #16
	sub	sp, sp, #16
	add	lr, sp, #8
	mov	r0, ip
	str	ip, [r5]
	str	ip, [r5, #4]
	str	lr, [sp]
	bl	snd_card_create
	subs	r4, r0, #0
	beq	.L15838
.L15830:
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15838:
	ldr	r3, [r7, #24]
	add	r6, sp, #12
	movw	r1, #:lower16:.LC1174
	ldr	lr, [sp, #8]
	mov	r2, r4
	movt	r1, #:upper16:.LC1174
	ldr	ip, [r3]
	mov	r3, #1
	mov	r0, lr
	add	ip, ip, #32
	str	ip, [lr, #496]
	stm	sp, {r4, r6}
	movw	r6, #:lower16:.LANCHOR7
	bl	snd_pcm_new
	subs	r4, r0, #0
	movtne	r6, #:upper16:.LANCHOR7
	bne	.L15834
	ldr	r3, [sp, #12]
	movt	r6, #:upper16:.LANCHOR7
	movw	r1, #:lower16:.LC1175
	sub	r8, r6, #1808
	movt	r1, #:upper16:.LC1175
	sub	r8, r8, #8
	mov	r2, #80
	str	r4, [r3, #16]
	add	r0, r3, #88
	str	r8, [r3, #272]
	str	r3, [r6, #-1728]
	bl	strlcpy
	sub	r2, r6, #1648
	mov	r1, r4
	ldr	r0, [sp, #12]
	sub	r2, r2, #8
	bl	snd_pcm_set_ops
	mov	ip, #65536
	mov	r3, r4
	ldr	r0, [sp, #12]
	mov	r2, r4
	mov	r1, #2
	str	ip, [sp]
	bl	snd_pcm_lib_preallocate_pages_for_all
	ldr	r0, [sp, #8]
	movw	r1, #:lower16:.LC1176
	mov	r2, #16
	movt	r1, #:upper16:.LC1176
	add	r0, r0, #20
	bl	strlcpy
	ldr	r0, [sp, #8]
	mov	r2, #32
	add	r1, r0, #20
	add	r0, r0, #36
	bl	strlcpy
	ldr	r0, [sp, #8]
	movw	r1, #:lower16:.LC1177
	mov	r2, #80
	movt	r1, #:upper16:.LC1177
	add	r0, r0, #68
	bl	strlcpy
	ldr	r0, [sp, #8]
	bl	snd_card_register
	subs	r4, r0, #0
	bne	.L15834
	mov	r1, r8
	mov	r0, r7
	bl	usb_add_function
	subs	r4, r0, #0
	beq	.L15839
.L15832:
.L15833:
.L15834:
	ldr	r0, [r6, #-1732]
	bl	snd_card_free
	b	.L15830
.L15839:
	ldr	r3, [sp, #12]
	ldr	r2, [r3]
	ldr	r2, [r2]
	str	r2, [r5]
	ldr	r2, [r3, #12]
	ldr	r3, [sp, #8]
	str	r2, [r5, #4]
	str	r3, [r6, #-1732]
	b	.L15830
	.fnend
	.size	audio_source_function_bind_config, .-audio_source_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_function_bind_config, %function
rmnet_smd_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r0, [r3, #36]
	.pad #12
	sub	sp, sp, #12
	cmp	r0, #0
	beq	.L15848
	mov	r2, #456
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L15855
.L15841:
	movw	r2, #:lower16:.LC1040
	mov	r5, #0
	movt	r2, #:upper16:.LC1040
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	mov	r1, #10
	str	r5, [sp]
	movw	r0, #:lower16:.LC84
	str	r2, [sp, #4]
	mov	r3, r5
	movt	r1, 2
	movt	r0, #:upper16:.LC84
	str	r4, [r6, #3392]
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #388]
	beq	.L15850
	add	r1, r4, #396
	mov	r2, #65024
	str	r5, [r4, #164]
	movw	r0, #:lower16:rmnet_smd_connect_work
	movw	r3, #:lower16:rmnet_smd_disconnect_work
	str	r5, [r4, #168]
	add	ip, r4, #412
	movt	r3, #:upper16:rmnet_smd_disconnect_work
	str	r5, [r4, #172]
	movt	r2, 65535
	movt	r0, #:upper16:rmnet_smd_connect_work
	str	r1, [r4, #396]
	str	r1, [r4, #400]
	movw	r1, #:lower16:rmnet_control_rx_tlet
	add	r9, r4, #108
	str	r5, [r4, #308]
	movt	r1, #:upper16:rmnet_control_rx_tlet
	add	r8, r4, #116
	str	r5, [r4, #372]
	str	r2, [r4, #392]
	str	r0, [r4, #404]
	add	r0, r4, #284
	str	r2, [r4, #408]
	mov	r2, r4
	str	ip, [r4, #412]
	str	ip, [r4, #416]
	str	r3, [r4, #420]
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_control_tx_tlet
	mov	r2, r4
	add	r0, r4, #264
	movt	r1, #:upper16:rmnet_control_tx_tlet
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_data_rx_tlet
	mov	r2, r4
	add	r0, r4, #348
	movt	r1, #:upper16:rmnet_data_rx_tlet
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_data_tx_tlet
	mov	r2, r4
	add	r0, r4, #328
	movt	r1, #:upper16:rmnet_data_tx_tlet
	bl	tasklet_init
	movw	r1, #:lower16:.LC1178
	ldr	r2, .L15857
	add	r0, r4, #312
	movt	r1, #:upper16:.LC1178
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC1179
	ldr	r2, .L15857
	add	r0, r4, #376
	movt	r1, #:upper16:.LC1179
	bl	__init_waitqueue_head
	ldr	r3, .L15857+4
	movw	lr, #:lower16:rmnet_smd_ch_probe
	movw	ip, #:lower16:rmnet_smd_bind
	movt	lr, #:upper16:rmnet_smd_ch_probe
	movt	ip, #:upper16:rmnet_smd_bind
	movw	r1, #:lower16:.LC1180
	movw	r2, #:lower16:.LC873
	movt	r1, #:upper16:.LC1180
	str	r5, [r4, #204]
	movw	r5, #:lower16:rmnet_smd_unbind
	str	lr, [r4, #176]
	add	lr, r3, #8
	movt	r5, #:upper16:rmnet_smd_unbind
	str	ip, [r4, #32]
	movw	ip, #:lower16:rmnet_smd_disable
	movt	r2, #:upper16:.LC873
	stm	r4, {r1, r3}
	movt	ip, #:upper16:rmnet_smd_disable
	add	r3, r3, #28
	str	lr, [r4, #16]
	movw	lr, #:lower16:rmnet_smd_set_alt
	movw	r1, #:lower16:rmnet_smd_setup
	movt	lr, #:upper16:rmnet_smd_set_alt
	mov	r0, r7
	str	r3, [r4, #8]
	add	r7, r4, #124
	add	r3, r4, #156
	str	r5, [r4, #36]
	movt	r1, #:upper16:rmnet_smd_setup
	add	r5, r4, #132
	str	lr, [r4, #40]
	str	ip, [r4, #48]
	add	lr, r4, #140
	add	ip, r4, #148
	str	r1, [r4, #52]
	mov	r1, r4
	str	r9, [r4, #108]
	str	r9, [r4, #112]
	str	r8, [r4, #116]
	str	r8, [r4, #120]
	str	r7, [r4, #124]
	str	r7, [r4, #128]
	str	r5, [r4, #132]
	str	r5, [r4, #136]
	str	lr, [r4, #140]
	str	lr, [r4, #144]
	str	ip, [r4, #148]
	str	ip, [r4, #152]
	str	r3, [r4, #156]
	str	r3, [r4, #160]
	str	r2, [r4, #196]
	bl	usb_add_function
	subs	r5, r0, #0
	beq	.L15856
.L15844:
	ldr	r0, [r4, #388]
	bl	destroy_workqueue
.L15843:
	mov	r0, r4
	bl	kfree
.L15840:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L15856:
	movw	r0, #:lower16:.LC1181
	mov	r1, r5
	movt	r0, #:upper16:.LC1181
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r6, #3412]
	beq	.L15840
	cmn	r0, #4096
	bhi	.L15840
	ldr	ip, .L15857+8
	movw	r0, #:lower16:.LC250
	mov	r3, r4
	movt	r0, #:upper16:.LC250
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L15847
	cmn	r0, #4096
	bls	.L15840
.L15847:
	ldr	r0, [r6, #3412]
	bl	debugfs_remove
	mov	r3, #0
	str	r3, [r6, #3412]
	b	.L15840
.L15848:
	mov	r4, #16
	b	.L15841
.L15850:
	mvn	r5, #11
	b	.L15843
.L15855:
	mvn	r5, #11
	b	.L15840
.L15858:
	.align	2
.L15857:
	.word	.LANCHOR1+4008
	.word	.LANCHOR7-1600
	.word	.LANCHOR5+544
	.fnend
	.size	rmnet_smd_function_bind_config, .-rmnet_smd_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_function_bind_config, %function
rndis_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:__stack_chk_guard
	strd	r8, [sp, #16]
	movt	r6, #:upper16:__stack_chk_guard
	strd	r10, [sp, #24]
	ldr	r3, [r6]
	str	lr, [sp, #32]
	ldr	r4, [r0, #4]
	.pad #60
	sub	sp, sp, #60
	str	r3, [sp, #52]
	cmp	r4, #0
	beq	.L15897
	mov	r7, r1
	ldrb	r1, [r4, #5]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1183
	ldrb	r3, [r4]	@ zero_extendqisi2
	movw	r5, #:lower16:.LANCHOR1
	movt	r0, #:upper16:.LC1183
	ldr	r2, .L15904
	movt	r5, #:upper16:.LANCHOR1
	str	r1, [sp, #16]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	mov	r1, r2
	str	ip, [sp, #12]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldr	fp, [r5, #3992]
	ldr	r3, [r7, #24]
	cmp	fp, #0
	ldr	r8, [r3]
	bne	.L15876
	mov	r2, #1
	mov	r0, #132
	mov	r1, r2
	bl	alloc_etherdev_mqs
	subs	r9, r0, #0
	mvneq	r8, #11
	bne	.L15898
.L15862:
	ldr	r2, .L15904
	movw	r0, #:lower16:.LC1192
	movt	r0, #:upper16:.LC1192
	mov	r1, r2
	bl	printk
.L15859:
	ldr	r2, [sp, #52]
	mov	r0, r8
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L15899
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15876:
	mvn	r8, #15
	b	.L15862
.L15897:
	ldr	r2, .L15904
	movw	r0, #:lower16:.LC1182
	mvn	r8, #0
	movt	r0, #:upper16:.LC1182
	mov	r1, r2
	bl	printk
	b	.L15859
.L15899:
	bl	__stack_chk_fail
.L15898:
	add	r10, r9, #1152
	str	fp, [r9, #1152]
	movw	r2, #:lower16:eth_work
	movw	ip, #:lower16:process_rx_w
	add	r3, r10, #92
	str	r9, [r9, #1160]
	str	fp, [r9, #1168]
	movt	r2, #:upper16:eth_work
	movt	ip, #:upper16:process_rx_w
	str	fp, [r9, #1212]
	mov	r1, #65024
	add	lr, r10, #108
	str	fp, [r9, #1216]
	add	fp, r10, #20
	movt	r1, 65535
	str	fp, [r9, #1172]
	str	fp, [r9, #1176]
	add	fp, r10, #28
	str	r3, [r9, #1244]
	str	fp, [r9, #1180]
	str	fp, [r9, #1184]
	add	fp, r10, #52
	str	r3, [r9, #1248]
	movw	r3, #:lower16:.LC1184
	str	r2, [r9, #1252]
	movw	r2, #:lower16:.LC1185
	movt	r3, #:upper16:.LC1184
	str	ip, [r9, #1268]
	add	ip, r8, #32
	movt	r2, #:upper16:.LC1185
	str	fp, [r9, #1204]
	str	fp, [r9, #1208]
	str	r1, [r9, #1240]
	str	r1, [r9, #1256]
	mov	r1, #16
	str	lr, [r9, #1260]
	str	lr, [r9, #1264]
	str	ip, [sp, #28]
	bl	snprintf
	ldr	r0, [r5, #4008]
	ldr	r1, [r9, #484]
	bl	get_ether_addr
	cmp	r0, #0
	bne	.L15900
.L15863:
	ldr	r2, [r4]	@ unaligned
	add	r3, r10, #125
	movw	r0, #:lower16:.LC1188
	movt	r0, #:upper16:.LC1188
	movw	fp, #:lower16:.LANCHOR7
	str	r3, [sp, #24]
	movt	fp, #:upper16:.LANCHOR7
	str	r2, [r9, #1277]	@ unaligned
	ldrh	r2, [r4, #4]	@ unaligned
	strh	r2, [r10, #129]	@ unaligned
	bl	printk
	ldr	r2, .L15904+4
	sub	r1, fp, #1552
	add	r3, r8, #32
	mov	r0, r9
	str	r1, [r9, #736]
	add	r1, r2, #136
	str	r2, [r9, #328]
	str	r3, [r9, #688]
	str	r1, [r9, #332]
	str	r8, [r9, #1164]
	bl	register_netdev
	subs	r8, r0, #0
	bge	.L15864
	ldr	r0, .L15904+8
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L15901
.L15865:
	mov	r0, r9
	bl	free_netdev
	b	.L15862
.L15900:
	movw	r2, #:lower16:.LC1186
	movw	r1, #:lower16:.LC1187
	movt	r2, #:upper16:.LC1186
	movt	r1, #:upper16:.LC1187
	add	r0, r8, #32
	bl	dev_warn
	b	.L15863
.L15901:
	movw	r2, #:lower16:.LC1189
	mov	r3, r8
	ldr	r1, [sp, #28]
	movt	r2, #:upper16:.LC1189
	sub	r0, r0, #24
	bl	__dynamic_dev_dbg
	b	.L15865
.L15864:
	movw	r0, #:lower16:.LC1190
	ldr	r2, [r9, #484]
	ldr	r1, [r9, #1160]
	movt	r0, #:upper16:.LC1190
	bl	printk
	movw	r0, #:lower16:.LC1191
	ldr	r1, [r9, #1160]
	ldr	r2, [sp, #24]
	movt	r0, #:upper16:.LC1191
	bl	printk
	mov	r0, r9
	str	r10, [r5, #3992]
	bl	netif_carrier_off
	cmp	r8, #0
	bne	.L15862
	ldrb	r2, [r4, #269]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L15867
	ldr	r0, .L15904+12
	mov	r2, #3
	mov	ip, #480
	mvn	lr, #31
	mov	r1, #1
	strb	r2, [fp, #-1522]
	strb	lr, [fp, #-1515]
	strh	ip, [r0, #4]	@ movhi
	strb	r1, [fp, #-1514]
	strb	r2, [fp, #-1513]
.L15867:
	ldrb	r2, [r5, #3740]	@ zero_extendqisi2
	ldr	r10, [r4, #8]
	cmp	r2, #0
	beq	.L15902
.L15873:
	ldrb	r2, [fp, #-1508]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L15868
	ldr	r1, [r7, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L15870
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r7, #24]
	strb	r2, [fp, #-1512]
	strb	r2, [fp, #-1508]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L15870
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r7, #24]
	strb	r2, [fp, #-1500]
	strb	r2, [fp, #-1468]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L15870
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [fp, #-1521]
	strb	r2, [fp, #-1492]
.L15868:
	movw	r2, #:lower16:kmalloc_caches
	movt	r2, #:upper16:kmalloc_caches
	ldr	r0, [r2, #8]
	cmp	r0, #0
	beq	.L15878
	mov	r2, #180
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r9, r0, #0
	beq	.L15903
.L15871:
	ldr	r8, [r4]	@ unaligned
	mov	r0, r7
	movw	ip, #:lower16:rndis_add_header
	ldr	lr, [fp, #-1464]
	movt	ip, #:upper16:rndis_add_header
	movw	r3, #:lower16:.LC1184
	ldr	r1, [fp, #-1460]
	movt	r3, #:upper16:.LC1184
	movw	r2, #:lower16:rndis_rm_hdr
	movt	r2, #:upper16:rndis_rm_hdr
	add	r4, r4, #13
	str	r8, [r9, #150]	@ unaligned
	ldrh	r7, [r4, #-9]	@ unaligned
	ldr	r8, .L15904+16
	str	ip, [r9, #128]
	movw	ip, #:lower16:rndis_set_alt
	movt	ip, #:upper16:rndis_set_alt
	str	r10, [r9, #156]
	str	r1, [r9, #120]
	movw	r1, #:lower16:rndis_bind
	movt	r1, #:upper16:rndis_bind
	stm	r9, {r3, r8}
	movw	r3, #:lower16:rndis_setup
	str	lr, [r9, #116]
	movw	lr, #:lower16:rndis_unbind
	movt	r3, #:upper16:rndis_setup
	str	r1, [r9, #32]
	movw	r1, #:lower16:rndis_disable
	movt	lr, #:upper16:rndis_unbind
	movt	r1, #:upper16:rndis_disable
	str	lr, [r9, #36]
	str	ip, [r9, #40]
	mov	ip, #0
	str	r1, [r9, #48]
	mov	r1, #44
	str	r3, [r9, #52]
	strh	ip, [r9, #98]	@ movhi
	str	r1, [r9, #100]
	mov	r1, r9
	str	r2, [r9, #132]
	strh	r7, [r9, #154]	@ unaligned
	str	r4, [r9, #160]
	bl	usb_add_function
	subs	r8, r0, #0
	beq	.L15859
	mov	r0, r9
	bl	kfree
.L15872:
	ldrb	r3, [r5, #3740]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L15859
	mov	r4, #0
	movw	r1, #:lower16:.LC601
	mov	r2, r4
	movt	r1, #:upper16:.LC601
	add	r0, sp, #32
	strb	r4, [r5, #3740]
	bl	sprintf
	add	r0, sp, #32
	mov	r1, r4
	bl	remove_proc_entry
	b	.L15859
.L15902:
	bl	rndis_init.part.90
	subs	r8, r0, #0
	bge	.L15873
	b	.L15859
.L15878:
	mov	r9, #16
	b	.L15871
.L15903:
	mvn	r8, #11
	b	.L15872
.L15870:
	mvn	r8, #18
	b	.L15859
.L15905:
	.align	2
.L15904:
	.word	.LANCHOR5+652
	.word	.LANCHOR5+680
	.word	.LANCHOR8-3744
	.word	.LANCHOR7-1528
	.word	.LANCHOR7-1456
	.fnend
	.size	rndis_function_bind_config, .-rndis_function_bind_config
	.align	2
	.global	usb_function_deactivate
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_function_deactivate, %function
usb_function_deactivate:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #20]
	ldr	r4, [r3, #24]
	add	r5, r4, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r1, [r4, #52]
	mov	r7, r0
	cmp	r1, #0
	bne	.L15907
	ldr	r0, [r4]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L15909
	blx	r3
	subs	r6, r0, #0
	bne	.L15908
	ldr	r1, [r4, #52]
.L15907:
	add	r1, r1, #1
	mov	r6, #0
	str	r1, [r4, #52]
.L15908:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, r6
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15909:
	mvn	r6, #94
	b	.L15908
	.fnend
	.size	usb_function_deactivate, .-usb_function_deactivate
	.align	2
	.global	usb_function_activate
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_function_activate, %function
usb_function_activate:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r4, [r3, #24]
	add	r5, r4, #60
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #52]
	cmp	r3, #0
	beq	.L15918
	sub	r3, r3, #1
	cmp	r3, #0
	str	r3, [r4, #52]
	bne	.L15919
	ldr	r0, [r4]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L15915
	mov	r1, #1
	blx	r3
	mov	r4, r0
.L15913:
	mov	r0, r5
	bl	_raw_spin_unlock
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15919:
	mov	r4, #0
	b	.L15913
.L15918:
	movw	r0, #:lower16:.LC102
	movw	r1, #315
	movt	r0, #:upper16:.LC102
	mvn	r4, #21
	bl	warn_slowpath_null
	b	.L15913
.L15915:
	mvn	r4, #94
	b	.L15913
	.fnend
	.size	usb_function_activate, .-usb_function_activate
	.align	2
	.global	usb_interface_id
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_interface_id, %function
usb_interface_id:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L15922
	add	ip, r3, #12
	add	r2, r3, #1
	str	r1, [r0, ip, lsl #2]
	strb	r2, [r0, #44]
.L15920:
	mov	r0, r3
	bx	lr
.L15922:
	mvn	r3, #18
	b	.L15920
	.fnend
	.size	usb_interface_id, .-usb_interface_id
	.align	2
	.global	usb_add_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_add_config, %function
usb_add_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r4, #:lower16:.LANCHOR4
	movw	r3, #1170
	movt	r4, #:upper16:.LANCHOR4
	mov	r5, r1
	strd	r6, [sp, #8]
	ldrh	r1, [r4, r3]
	strd	r8, [sp, #16]
	mov	r6, r0
	str	lr, [sp, #24]
	mov	r7, r2
	.pad #20
	sub	sp, sp, #20
	ldrb	r3, [r5, #20]	@ zero_extendqisi2
	tst	r1, #4
	bne	.L16074
.L15924:
	cmp	r3, #0
	cmpne	r7, #0
	mvneq	r7, #21
	bne	.L16075
.L15925:
	movw	r3, #1194
	ldrh	r3, [r4, r3]
	tst	r3, #4
	bne	.L16076
.L15923:
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L16075:
	mov	r2, r6
	ldr	r1, [r2, #36]!
	cmp	r2, r1
	sub	r0, r1, #28
	bne	.L15928
	b	.L15926
.L16077:
	ldr	r1, [r0, #28]
	cmp	r2, r1
	sub	r0, r1, #28
	beq	.L15926
.L15928:
	ldrb	r1, [r1, #-8]	@ zero_extendqisi2
	cmp	r1, r3
	bne	.L16077
	mvn	r7, #15
	b	.L15925
.L15926:
	add	r9, r5, #28
	str	r6, [r5, #24]
	ldr	r1, [r6, #40]
	mov	r0, r9
	mov	r8, #0
	bl	__list_add
	add	r3, r5, #36
	mov	r1, #64
	add	r0, r5, #48
	str	r3, [r5, #36]
	str	r3, [r5, #40]
	strb	r8, [r5, #44]
	bl	__memzero
	mov	r0, r5
	blx	r7
	subs	r7, r0, #0
	blt	.L16078
	movw	r3, #1218
	ldr	r1, [r6]
	ldrh	r3, [r4, r3]
	tst	r3, #4
	bne	.L16079
.L15932:
	ldr	r3, [r5, #48]
	cmp	r3, #0
	beq	.L15936
	movw	r2, #1242
	ldrh	r2, [r4, r2]
	tst	r2, #4
	bne	.L16080
.L15936:
	ldr	r3, [r5, #52]
	cmp	r3, #0
	beq	.L15937
	movw	r2, #1242
	ldrh	r2, [r4, r2]
	tst	r2, #4
	bne	.L16081
.L15937:
	ldr	r3, [r5, #56]
	cmp	r3, #0
	beq	.L15938
	movw	r2, #1242
	ldrh	r2, [r4, r2]
	tst	r2, #4
	bne	.L16082
.L15938:
	ldr	r3, [r5, #60]
	cmp	r3, #0
	beq	.L15939
	movw	r2, #1242
	ldrh	r2, [r4, r2]
	tst	r2, #4
	bne	.L16083
.L15939:
	ldr	r3, [r5, #64]
	cmp	r3, #0
	beq	.L15940
	movw	r2, #1242
	ldrh	r2, [r4, r2]
	tst	r2, #4
	bne	.L16084
.L15940:
	ldr	r3, [r5, #68]
	cmp	r3, #0
	beq	.L15941
	movw	r2, #1242
	ldrh	r2, [r4, r2]
	tst	r2, #4
	bne	.L16085
.L15941:
	ldr	r3, [r5, #72]
	cmp	r3, #0
	beq	.L15942
	movw	r2, #1242
	ldrh	r2, [r4, r2]
	tst	r2, #4
	bne	.L16086
.L15943:
	ldr	r3, [r5, #80]
	cmp	r3, #0
	beq	.L15944
	movw	r2, #1242
	ldrh	r2, [r4, r2]
	tst	r2, #4
	bne	.L16087
.L15945:
	ldr	r3, [r5, #88]
	cmp	r3, #0
	beq	.L15946
	movw	r2, #1242
	ldrh	r2, [r4, r2]
	tst	r2, #4
	bne	.L16088
.L15947:
	ldr	r3, [r5, #96]
	cmp	r3, #0
	beq	.L15948
	movw	r2, #1242
	ldrh	r2, [r4, r2]
	tst	r2, #4
	bne	.L16089
.L15949:
	ldr	r3, [r5, #104]
	cmp	r3, #0
	beq	.L15950
	movw	r2, #1242
	ldrh	r2, [r4, r2]
	tst	r2, #4
	bne	.L16090
.L15950:
	ldr	r3, [r5, #108]
	cmp	r3, #0
	beq	.L15951
	movw	r2, #1242
	ldrh	r2, [r4, r2]
	tst	r2, #4
	bne	.L16091
.L15951:
	ldr	r3, [r1, #8]!
	cmp	r1, r3
	sub	r3, r3, #12
	beq	.L15952
.L15930:
	mov	r0, #0
.L15953:
	ldr	r2, [r3, #12]
	str	r0, [r3]
	cmp	r1, r2
	sub	r3, r2, #12
	bne	.L15953
.L15952:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	cmp	r7, #0
	str	r2, [r3, #3228]
	beq	.L15923
	b	.L15925
.L16074:
	ldr	r1, [r6]
	str	r5, [sp, #4]
	movw	r2, #:lower16:.LC896
	ldr	ip, [r5]
	movt	r2, #:upper16:.LC896
	add	r0, r4, #1152
	add	r1, r1, #32
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldrb	r3, [r5, #20]	@ zero_extendqisi2
	b	.L15924
.L16076:
	ldr	r1, [r6]
	str	r7, [sp, #4]
	movw	r2, #:lower16:.LC899
	ldrb	ip, [r5, #20]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC899
	ldr	r3, [r5]
	ldr	r0, .L16092
	add	r1, r1, #32
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L15923
.L16078:
	mov	r0, r9
	bl	list_del
	str	r8, [r5, #24]
	ldr	r1, [r6]
	ldr	r3, [r1, #8]!
	cmp	r1, r3
	sub	r3, r3, #12
	bne	.L15930
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r8, [r3, #3228]
	b	.L15925
.L16089:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC898
	add	r1, r1, #32
	movt	r2, #:upper16:.LC898
	ldr	r0, .L16092+4
	mov	r3, #12
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
.L15948:
	ldr	r3, [r5, #100]
	cmp	r3, #0
	beq	.L15949
	movw	r2, #1242
	ldrh	r2, [r4, r2]
	tst	r2, #4
	beq	.L15949
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC898
	add	r1, r1, #32
	movt	r2, #:upper16:.LC898
	ldr	r0, .L16092+4
	mov	r3, #13
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L15949
.L16088:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC898
	add	r1, r1, #32
	movt	r2, #:upper16:.LC898
	ldr	r0, .L16092+4
	mov	r3, #10
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
.L15946:
	ldr	r3, [r5, #92]
	cmp	r3, #0
	beq	.L15947
	movw	r2, #1242
	ldrh	r2, [r4, r2]
	tst	r2, #4
	beq	.L15947
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC898
	add	r1, r1, #32
	movt	r2, #:upper16:.LC898
	ldr	r0, .L16092+4
	mov	r3, #11
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L15947
.L16087:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC898
	add	r1, r1, #32
	movt	r2, #:upper16:.LC898
	ldr	r0, .L16092+4
	mov	r3, #8
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
.L15944:
	ldr	r3, [r5, #84]
	cmp	r3, #0
	beq	.L15945
	movw	r2, #1242
	ldrh	r2, [r4, r2]
	tst	r2, #4
	beq	.L15945
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC898
	add	r1, r1, #32
	movt	r2, #:upper16:.LC898
	ldr	r0, .L16092+4
	mov	r3, #9
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L15945
.L16086:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC898
	add	r1, r1, #32
	movt	r2, #:upper16:.LC898
	ldr	r0, .L16092+4
	mov	r3, #6
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
.L15942:
	ldr	r3, [r5, #76]
	cmp	r3, #0
	beq	.L15943
	movw	r2, #1242
	ldrh	r2, [r4, r2]
	tst	r2, #4
	beq	.L15943
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC898
	add	r1, r1, #32
	movt	r2, #:upper16:.LC898
	ldr	r0, .L16092+4
	mov	r3, #7
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L15943
.L16079:
	ldrb	ip, [r5, #45]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC873
	movw	lr, #:lower16:.LC891
	movt	r2, #:upper16:.LC873
	movt	lr, #:upper16:.LC891
	ldrb	r3, [r5, #20]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC892
	add	r8, r1, #32
	movt	r0, #:upper16:.LC892
	tst	ip, #1
	moveq	lr, r2
	tst	ip, #2
	moveq	r0, r2
	tst	ip, #4
	moveq	ip, r2
	beq	.L15935
	ldr	r1, [r1, #20]
	movw	r2, #:lower16:.LC894
	movw	ip, #:lower16:.LC893
	movt	r2, #:upper16:.LC894
	movt	ip, #:upper16:.LC893
	cmp	r1, #2
	movls	ip, r2
.L15935:
	movw	r2, #:lower16:.LC897
	mov	r1, r8
	stm	sp, {r5, lr}
	str	r0, [sp, #8]
	movt	r2, #:upper16:.LC897
	ldr	r0, .L16092+8
	str	ip, [sp, #12]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L15932
.L16091:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC898
	add	r1, r1, #32
	movt	r2, #:upper16:.LC898
	ldr	r0, .L16092+4
	mov	r3, #15
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L15951
.L16090:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC898
	add	r1, r1, #32
	movt	r2, #:upper16:.LC898
	ldr	r0, .L16092+4
	mov	r3, #14
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L15950
.L16085:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC898
	add	r1, r1, #32
	movt	r2, #:upper16:.LC898
	ldr	r0, .L16092+4
	mov	r3, #5
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L15941
.L16080:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC898
	add	r1, r1, #32
	movt	r2, #:upper16:.LC898
	ldr	r0, .L16092+4
	mov	r3, #0
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L15936
.L16082:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC898
	add	r1, r1, #32
	movt	r2, #:upper16:.LC898
	ldr	r0, .L16092+4
	mov	r3, #2
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L15938
.L16081:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC898
	add	r1, r1, #32
	movt	r2, #:upper16:.LC898
	ldr	r0, .L16092+4
	mov	r3, #1
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L15937
.L16084:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC898
	add	r1, r1, #32
	movt	r2, #:upper16:.LC898
	ldr	r0, .L16092+4
	mov	r3, #4
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L15940
.L16083:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC898
	add	r1, r1, #32
	movt	r2, #:upper16:.LC898
	ldr	r0, .L16092+4
	mov	r3, #3
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L15939
.L16093:
	.align	2
.L16092:
	.word	.LANCHOR4+1176
	.word	.LANCHOR4+1224
	.word	.LANCHOR4+1200
	.fnend
	.size	usb_add_config, .-usb_add_config
	.align	2
	.global	usb_remove_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_remove_config, %function
usb_remove_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	movw	r0, #:lower16:.LC888
	strd	r6, [sp, #8]
	mov	r6, r1
	movt	r0, #:upper16:.LC888
	strd	r8, [sp, #16]
	ldr	r1, .L16116
	mov	r3, r6
	str	r10, [sp, #24]
	add	r7, r5, #60
	str	lr, [sp, #28]
	ldr	r2, [r5, #12]
	bl	printk
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r6, #24]
	mov	r9, r0
	cmp	r4, #0
	beq	.L16113
	ldr	r8, [r5, #12]
	cmp	r8, r6
	beq	.L16114
.L16104:
	add	r0, r6, #28
	bl	list_del
.L16102:
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldrd	r8, [sp, #16]
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	unbind_config
.L16114:
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, #18]
	tst	r3, #4
	moveq	r3, r8
	bne	.L16115
.L16097:
	ldr	r4, [r3, #36]!
	cmp	r4, r3
	sub	r4, r4, #72
	beq	.L16099
	mov	r10, #0
.L16098:
	ldr	r3, [r4, #48]
	mov	r0, r4
	cmp	r3, #0
	beq	.L16100
	blx	r3
	str	r10, [r4, #80]
	ldr	r3, [r5, #12]
	ldr	r4, [r4, #72]
	add	r3, r3, #36
	cmp	r3, r4
	sub	r4, r4, #72
	bne	.L16098
.L16099:
	mov	r3, #0
	str	r3, [r5, #12]
	str	r3, [r5, #56]
	ldr	r3, [r8, #24]
	cmp	r3, #0
	beq	.L16102
	b	.L16104
.L16113:
	movw	r0, #:lower16:.LC102
	mov	r1, #896
	movt	r0, #:upper16:.LC102
	bl	warn_slowpath_null
	mov	r0, r7
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L16100:
	str	r3, [r4, #80]
	ldr	r3, [r5, #12]
	ldr	r4, [r4, #72]
	add	r3, r3, #36
	cmp	r4, r3
	sub	r4, r4, #72
	bne	.L16098
	b	.L16099
.L16115:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC5
	movt	r2, #:upper16:.LC5
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r5, #12]
	b	.L16097
.L16117:
	.align	2
.L16116:
	.word	.LANCHOR5-1600
	.fnend
	.size	usb_remove_config, .-usb_remove_config
	.align	2
	.global	usb_string_id
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_string_id, %function
usb_string_id:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	mov	r2, r0
	cmp	r3, #253
	bhi	.L16120
	add	r3, r3, #1
	uxtb	r3, r3
	mov	r0, r3
	strb	r3, [r2, #48]
	bx	lr
.L16120:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	usb_string_id, .-usb_string_id
	.align	2
	.global	usb_string_ids_tab
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_string_ids_tab, %function
usb_string_ids_tab:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #4]
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	cmp	r2, #0
	mov	r2, r3
	beq	.L16122
	cmp	r3, #253
	bgt	.L16123
	add	r1, r1, #8
.L16124:
	ldr	ip, [r1, #4]
	add	r3, r3, #1
	add	r1, r1, #8
	uxtb	r2, r3
	cmp	ip, #0
	strb	r2, [r1, #-16]
	beq	.L16122
	cmp	r3, #254
	bne	.L16124
.L16123:
	mvn	r3, #18
	mov	r0, r3
	bx	lr
.L16122:
	mov	r3, #0
	strb	r2, [r0, #48]
	mov	r0, r3
	bx	lr
	.fnend
	.size	usb_string_ids_tab, .-usb_string_ids_tab
	.align	2
	.global	usb_string_ids_n
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_string_ids_n, %function
usb_string_ids_n:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #254
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	bhi	.L16137
	add	r1, r3, r1
	cmp	r1, #254
	bhi	.L16137
	strb	r1, [r0, #48]
	add	r0, r3, #1
	bx	lr
.L16137:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	usb_string_ids_n, .-usb_string_ids_n
	.align	2
	.global	usb_composite_probe
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_composite_probe, %function
usb_composite_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	beq	.L16143
	ldr	r3, [r0, #12]
	cmp	r1, #0
	cmpne	r3, #0
	beq	.L16143
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	lr, [r0]
	cmp	lr, #0
	beq	.L16151
.L16140:
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LANCHOR0
	movw	r4, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR1
	mov	ip, r1
	movw	r1, #:lower16:composite_bind
	str	lr, [r2, #1088]
	movt	r1, #:upper16:composite_bind
	cmp	r3, #0
	mov	r3, r0
	streq	lr, [r0, #4]
	ldr	lr, [r3]
	add	r0, r2, #1088
	str	r3, [r4, #2476]
	str	ip, [r4, #3232]
	str	lr, [r2, #1116]
	ldr	r3, [r3, #20]
	str	r3, [r2, #1092]
	bl	usb_gadget_probe_driver
	cmp	r0, #0
	movne	r3, #0
	strne	r3, [r4, #2476]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L16151:
	movw	r3, #:lower16:.LC1193
	movt	r3, #:upper16:.LC1193
	mov	lr, r3
	str	r3, [r0]
	b	.L16140
.L16143:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	usb_composite_probe, .-usb_composite_probe
	.section	.devinit.text,"ax",%progbits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_probe, %function
android_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r8, #:lower16:__stack_chk_guard
	ldr	r2, [r0, #292]
	movt	r8, #:upper16:__stack_chk_guard
	.pad #44
	sub	sp, sp, #44
	ldr	r3, [r8]
	mov	r6, r0
	cmp	r2, #0
	str	r3, [sp, #36]
	beq	.L16153
	ldr	r5, .L16217
	add	r4, r0, #8
	ldrh	r3, [r5, #-14]
	tst	r3, #4
	beq	.L16154
	movw	r2, #:lower16:.LC1194
	mov	r1, r4
	movt	r2, #:upper16:.LC1194
	sub	r0, r5, #32
	bl	__dynamic_dev_dbg
.L16154:
	mov	r0, r4
	mov	r2, #208
	mov	r1, #52
	bl	devm_kzalloc
	subs	r7, r0, #0
	bne	.L16155
	movw	r0, #:lower16:.LC1195
	ldr	r1, .L16217+4
	mvn	r5, #11
	movt	r0, #:upper16:.LC1195
	bl	printk
	b	.L16152
.L16155:
	movw	r1, #:lower16:.LC1196
	mov	r3, #1
	ldr	r0, [r6, #292]
	movt	r1, #:upper16:.LC1196
	add	r2, r7, #4
	bl	of_property_read_u32_array
	movw	r1, #:lower16:.LC1197
	mov	r2, #0
	ldr	r0, [r6, #292]
	movt	r1, #:upper16:.LC1197
	mov	r4, r2
	bl	of_find_property
	subs	r0, r0, r4
	movw	r1, #:lower16:.LC1198
	movne	r0, #1
	movt	r1, #:upper16:.LC1198
	mov	r2, r4
	strb	r0, [r7, #9]
	ldr	r0, [r6, #292]
	bl	of_find_property
	subs	r0, r0, r4
	movw	r1, #:lower16:.LC1199
	movne	r0, #1
	mov	r3, r4
	mov	r2, r4
	movt	r1, #:upper16:.LC1199
	strb	r0, [r7, #11]
	ldr	r0, [r6, #292]
	str	r4, [sp]
	bl	of_property_read_string_helper
	cmp	r0, #3
	mov	r9, r0
	ble	.L16188
	movw	r0, #:lower16:.LC1200
	ldr	r1, .L16217+4
	mvn	r5, #21
	movt	r0, #:upper16:.LC1200
	bl	printk
	b	.L16152
.L16188:
	ldr	fp, .L16217+4
	movw	r10, #:lower16:.LC1199
	movt	r10, #:upper16:.LC1199
.L16157:
	cmp	r4, r9
	bge	.L16215
	mov	ip, #0
	add	r2, sp, #40
	str	r4, [sp]
	mov	r1, r10
	mov	r3, #1
	ldr	r0, [r6, #292]
	str	ip, [r2, #-20]!
	bl	of_property_read_string_helper
	ldr	r1, [sp, #20]
	cmp	r1, #0
	bne	.L16158
.L16159:
	add	r4, r4, #1
	b	.L16157
.L16158:
	mov	r0, #10
	add	r3, r7, #12
	mov	r2, r0
	mla	r3, r0, r4, r3
	mov	r0, r3
	str	r3, [sp, #12]
	bl	strlcpy
	ldr	r2, .L16217+8
	ldr	r3, [sp, #12]
	ldrh	r2, [r2]
	tst	r2, #4
	beq	.L16159
	movw	r1, #:lower16:.LC1201
	mov	r2, fp
	movt	r1, #:upper16:.LC1201
	sub	r0, r5, #8
	bl	__dynamic_pr_debug
	b	.L16159
.L16215:
	str	r9, [r7, #44]
	b	.L16161
.L16153:
	ldr	r7, [r0, #88]
.L16161:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3644]
	mov	r9, r4
	cmp	r0, #0
	bne	.L16162
	movw	r1, #:lower16:.LC1202
	ldr	r2, .L16217+12
	movt	r1, #:upper16:.LC1202
	bl	__class_create
	cmn	r0, #4096
	str	r0, [r4, #3644]
	movhi	r5, r0
	bhi	.L16152
.L16162:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #40]
	cmp	r0, #0
	beq	.L16189
	mov	r2, #528
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	bne	.L16163
	ldr	r2, .L16217+4
	movw	r0, #:lower16:.LC1203
	mvn	r5, #11
	movt	r0, #:upper16:.LC1203
	mov	r1, r2
	bl	printk
	b	.L16164
.L16189:
	mov	r4, #16
.L16163:
	ldr	lr, [r6]
	mov	r2, #1
	mov	r0, #65024
	ldr	r3, .L16217+16
	movw	r5, #:lower16:android_work
	movw	r1, #:lower16:usb_gadget_connect_work
	mov	ip, #0
	movt	r0, 65535
	movt	r5, #:upper16:android_work
	movt	r1, #:upper16:usb_gadget_connect_work
	str	lr, [r4]
	add	lr, r4, #508
	add	r10, r4, #520
	str	r3, [r4, #4]
	add	r3, r4, #184
	str	r2, [r4, #20]
	add	r2, r4, #456
	str	r0, [r4, #180]
	str	r3, [r4, #184]
	str	r3, [r4, #188]
	mov	r3, ip
	str	r5, [r4, #192]
	str	r0, [r4, #452]
	add	r0, r4, #468
	str	r2, [r4, #456]
	str	r2, [r4, #460]
	mov	r2, ip
	str	r1, [r4, #464]
	mov	r1, ip
	str	lr, [r4, #508]
	str	lr, [r4, #512]
	str	ip, [r4, #516]
	bl	init_timer_key
	movw	r3, #:lower16:delayed_work_timer_fn
	add	r0, r4, #452
	ldr	r2, .L16217+12
	movt	r3, #:upper16:delayed_work_timer_fn
	movw	r1, #:lower16:.LC1204
	movt	r1, #:upper16:.LC1204
	str	r3, [r4, #484]
	str	r0, [r4, #488]
	add	r0, r4, #24
	bl	__mutex_init
	mov	r0, r10
	ldr	r2, .L16217+20
	str	r7, [r4, #44]
	ldr	r1, [r9, #3312]
	bl	__list_add
	ldr	r3, [r9, #3640]
	cmp	r7, #0
	mov	r2, #0
	ldrbne	ip, [r7, #8]	@ zero_extendqisi2
	moveq	ip, r7
	mov	r1, #512
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r9, #3640]
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	mov	r5, r3
	strb	ip, [r3, #1172]
	bl	platform_get_resource
	cmp	r0, #0
	beq	.L16166
	ldm	r0, {r1, r2}
	add	r6, r6, #8
	mov	r0, r6
	add	r2, r2, #1
	sub	r2, r2, r1
	bl	devm_ioremap
	cmp	r0, #0
	str	r0, [r9, #3540]
	bne	.L16168
	movw	r1, #:lower16:.LC1205
	mov	r0, r6
	movt	r1, #:upper16:.LC1205
	mvn	r5, #11
	bl	dev_err
	b	.L16169
.L16166:
	ldr	r0, .L16217+24
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L16168
	movw	r2, #:lower16:.LC1206
	add	r1, r6, #8
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC1206
	bl	__dynamic_dev_dbg
.L16168:
	add	r6, sp, #25
	movw	r2, #:lower16:.LC1207
	ldrb	r3, [r5, #1172]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC1207
	mov	r1, #11
	mov	r0, r6
	bl	snprintf
	mov	r3, #0
	str	r6, [sp]
	ldr	r0, [r9, #3644]
	mov	r2, r3
	mov	r1, r3
	bl	device_create
	cmn	r0, #4096
	mov	r5, r0
	str	r0, [r4, #12]
	bls	.L16171
	cmp	r0, #0
	beq	.L16173
	b	.L16175
.L16171:
	mov	r1, r4
	ldr	r6, .L16217+28
	bl	dev_set_drvdata
.L16174:
	ldr	r1, [r6, #4]!
	ldr	r0, [r4, #12]
	cmp	r1, #0
	beq	.L16173
	bl	device_create_file
	subs	r5, r0, #0
	beq	.L16174
	ldr	r3, [r4, #12]
	ldr	r0, [r9, #3644]
	ldr	r1, [r3, #288]
	bl	device_destroy
.L16175:
	ldr	r2, .L16217+4
	movw	r0, #:lower16:.LC1208
	movt	r0, #:upper16:.LC1208
	mov	r1, r2
	bl	printk
	b	.L16169
.L16173:
	ldr	r2, [r4, #12]
	cmn	r2, #4096
	bls	.L16178
	movw	r0, #:lower16:.LC1209
	ldr	r1, .L16217+32
	movt	r0, #:upper16:.LC1209
	bl	printk
	ldr	r5, [r4, #12]
	cmp	r5, #0
	beq	.L16179
	b	.L16180
.L16178:
	mov	r0, r2
	ldr	r1, .L16217+36
	bl	device_create_file
	subs	r5, r0, #0
	beq	.L16179
	movw	r0, #:lower16:.LC1210
	ldr	r1, .L16217+32
	movt	r0, #:upper16:.LC1210
	bl	printk
.L16180:
	movw	r0, #:lower16:.LC1211
	ldr	r1, .L16217+4
	movt	r0, #:upper16:.LC1211
	bl	printk
	b	.L16152
.L16179:
	movw	r1, #:lower16:android_bind
	ldr	r0, .L16217+40
	movt	r1, #:upper16:android_bind
	bl	usb_composite_probe
	subs	r5, r0, #0
	beq	.L16181
	ldr	r2, .L16217+4
	movw	r0, #:lower16:.LC1212
	movt	r0, #:upper16:.LC1212
	mov	r1, r2
	bl	printk
	b	.L16182
.L16181:
	cmp	r7, #0
	beq	.L16183
	ldr	r3, [r7, #4]
	cmp	r3, #0
	beq	.L16183
	mvn	r2, #0
	mov	r1, #1
	add	r0, r4, #60
	bl	pm_qos_add_request
.L16183:
	movw	r1, #:lower16:.LC1213
	mov	r2, #5
	movt	r1, #:upper16:.LC1213
	add	r0, r4, #52
	bl	strlcpy
	ldr	r0, .L16217+44
	bl	misc_register
	subs	r5, r0, #0
	beq	.L16184
	movw	r0, #:lower16:.LC1214
	mov	r1, r5
	movt	r0, #:upper16:.LC1214
	bl	printk
	movw	r0, #:lower16:.LC1215
	ldr	r1, .L16217+4
	movt	r0, #:upper16:.LC1215
	bl	printk
	b	.L16182
.L16184:
	ldr	r2, .L16217+12
	movw	r1, #:lower16:.LC1216
	movt	r1, #:upper16:.LC1216
	sub	r0, r2, #1808
	bl	__init_waitqueue_head
	b	.L16152
.L16182:
	ldr	r6, .L16217+28
.L16185:
	ldr	r1, [r6, #4]!
	ldr	r0, [r4, #12]
	cmp	r1, #0
	beq	.L16216
	bl	device_remove_file
	b	.L16185
.L16216:
	ldr	r1, [r0, #288]
	ldr	r0, [r9, #3644]
	bl	device_destroy
.L16169:
	mov	r0, r10
	bl	list_del
	ldr	r3, [r9, #3640]
	mov	r0, r4
	sub	r3, r3, #1
	str	r3, [r9, #3640]
	bl	kfree
.L16164:
	ldr	r3, .L16217+20
	ldr	r2, [r9, #3308]
	cmp	r2, r3
	bne	.L16152
	ldr	r0, [r9, #3644]
	bl	class_destroy
	mov	r3, #0
	str	r3, [r9, #3644]
.L16152:
	ldr	r2, [sp, #36]
	mov	r0, r5
	ldr	r3, [r8]
	cmp	r2, r3
	beq	.L16187
	bl	__stack_chk_fail
.L16187:
	add	sp, sp, #44
	@ sp needed
	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
.L16218:
	.align	2
.L16217:
	.word	.LANCHOR8-3712
	.word	.LANCHOR5+980
	.word	.LANCHOR8-3702
	.word	.LANCHOR1+4012
	.word	.LANCHOR7-1448
	.word	.LANCHOR1+3308
	.word	.LANCHOR8-3664
	.word	.LANCHOR0+1376
	.word	.LANCHOR5+996
	.word	.LANCHOR7-1340
	.word	.LANCHOR0+1456
	.word	.LANCHOR7-1324
	.fnend
	.size	android_probe, .-android_probe
	.text
	.align	2
	.global	usb_composite_unregister
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_composite_unregister, %function
usb_composite_unregister:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2476]
	cmp	r3, r0
	beq	.L16221
	bx	lr
.L16221:
	ldr	r0, .L16222
	b	usb_gadget_unregister_driver
.L16223:
	.align	2
.L16222:
	.word	.LANCHOR0+1088
	.fnend
	.size	usb_composite_unregister, .-usb_composite_unregister
	.align	2
	.global	usb_composite_setup_continue
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_composite_setup_continue, %function
usb_composite_setup_continue:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16249
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	ldr	r7, [r0, #4]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L16245
.L16225:
	add	r5, r4, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #56]
	mov	r6, r0
	cmp	r3, #0
	bne	.L16226
	cmp	r4, #0
	bne	.L16246
.L16228:
	mov	r1, r6
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L16226:
	sub	r3, r3, #1
	cmp	r3, #0
	str	r3, [r4, #56]
	bne	.L16228
	ldr	r8, .L16249+4
	ldrh	r3, [r8, #-14]
	tst	r3, #4
	bne	.L16247
.L16230:
	mov	r3, #0
	mov	r2, #32
	mov	r1, r7
	str	r3, [r7, #4]
	ldr	r3, [r4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bge	.L16228
	ldr	r3, .L16249+8
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L16248
.L16231:
	ldr	ip, [r7, #4]
	mov	r3, #0
	ldr	lr, [r7, #48]
	str	r3, [r7, #44]
	cmp	lr, ip
	beq	.L16228
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, #42]
	tst	r2, #4
	beq	.L16228
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC6
	add	r0, r0, #24
	movt	r2, #:upper16:.LC6
	ldr	r1, [r1, #4]
	ldr	r1, [r1]
	ldr	r1, [r1]
	str	lr, [sp]
	str	ip, [sp, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L16228
.L16246:
	movw	r2, #:lower16:.LC1217
	movw	r0, #:lower16:.LC102
	ldr	r3, .L16249+12
	movt	r2, #:upper16:.LC1217
	movt	r0, #:upper16:.LC102
	movw	r1, #1845
	bl	warn_slowpath_fmt
	b	.L16228
.L16245:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC82
	sub	r0, r3, #24
	movt	r2, #:upper16:.LC82
	ldr	r3, .L16249+12
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L16225
.L16247:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC1218
	sub	r0, r8, #32
	movt	r2, #:upper16:.LC1218
	ldr	r3, .L16249+12
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L16230
.L16248:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC963
	mov	r3, r0
	movt	r2, #:upper16:.LC963
	sub	r0, r8, #8
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L16231
.L16250:
	.align	2
.L16249:
	.word	.LANCHOR8-3648
	.word	.LANCHOR8-3616
	.word	.LANCHOR8-3600
	.word	.LANCHOR5+1024
	.fnend
	.size	usb_composite_setup_continue, .-usb_composite_setup_continue
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	handle_exception, %function
handle_exception:
	.fnstart
	@ args = 0, pretend = 0, frame = 128
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	add	r7, r0, #44
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #128
	sub	sp, sp, #128
	mov	r3, sp
	bic	r10, r3, #8128
	bic	r10, r10, #63
.L16258:
	movw	r8, #1284
	b	.L16253
.L16324:
	cmp	r5, #10
	bne	.L16323
.L16253:
	ldr	r4, [r10, #12]
	ldr	r0, [r4, #996]
	add	r0, r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r2, sp
	add	r1, r4, #1000
	mov	r0, r4
	bl	dequeue_signal
	mov	r5, r0
	ldr	r0, [r4, #996]
	mov	r1, r9
	add	r0, r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	bne	.L16324
	ldr	r3, [r6, #8]
	cmp	r3, #0
	beq	.L16260
	mov	r8, r5
.L16259:
	ldr	r4, [r6, #68]
	add	r4, r4, r8
	add	r8, r8, #32
	ldr	r3, [r4, #20]
	cmp	r3, #0
	beq	.L16261
	ldr	r3, [r6, #8]
	ldr	r1, [r4, #16]
	ldr	r0, [r3, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L16261:
	ldr	r3, [r4, #28]
	cmp	r3, #0
	beq	.L16262
	ldr	r3, [r6, #8]
	ldr	r1, [r4, #24]
	ldr	r0, [r3, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L16262:
	cmp	r8, #128
	bne	.L16259
	b	.L16265
.L16325:
	bl	sleep_thread
	cmp	r0, #0
	bne	.L16251
.L16265:
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #68]
	mov	r0, r7
	ldr	r1, [r3, #20]
	ldr	r4, [r3, #28]
	ldr	ip, [r3, #52]
	ldr	r9, [r3, #60]
	ldr	r2, [r3, #84]
	ldr	r8, [r3, #92]
	add	r1, r1, r4
	ldr	r4, [r3, #116]
	ldr	lr, [r3, #124]
	add	r3, ip, r9
	add	r1, r1, r3
	add	r3, r2, r8
	add	r3, r3, r1
	add	r4, r4, lr
	add	r4, r4, r3
	bl	_raw_spin_unlock_irq
	cmp	r4, #0
	mov	r0, r6
	bne	.L16325
	ldr	r3, [r6, #8]
	ldrb	r2, [r3, #94]	@ zero_extendqisi2
	tst	r2, #1
	beq	.L16266
	ldr	r0, [r3, #100]
	ldr	r1, [r0, #8]
	ldr	r1, [r1, #36]
	cmp	r1, #0
	beq	.L16266
	blx	r1
	ldr	r3, [r6, #8]
	ldrb	r2, [r3, #94]	@ zero_extendqisi2
.L16266:
	tst	r2, #2
	beq	.L16260
	ldr	r0, [r3, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L16260
	blx	r3
.L16260:
	mov	r0, r7
	mov	r9, #0
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #68]
	str	r9, [r3, #4]
	ldr	r3, [r6, #68]
	str	r9, [r3, #36]
	ldr	r3, [r6, #68]
	str	r9, [r3, #68]
	ldr	r3, [r6, #68]
	str	r9, [r3, #100]
	ldr	r3, [r6, #68]
	ldr	r8, [r6, #112]
	str	r3, [r6, #60]
	cmp	r8, #1
	str	r3, [r6, #64]
	beq	.L16268
	ldr	r3, [r6, #92]
	ldr	r4, [r6, #116]
	cmp	r3, r9
	movne	r0, r9
	movne	r1, r0
	beq	.L16270
.L16269:
	ldr	r3, [r6, #100]
	add	r5, r5, #1
	add	r3, r3, r0
	add	r0, r0, #392
	ldrb	r2, [r3, #24]	@ zero_extendqisi2
	str	r1, [r3, #28]
	str	r1, [r3, #32]
	str	r1, [r3, #36]
	and	r2, r2, #239
	bfi	r2, r1, #6, #1
	strb	r2, [r3, #24]
	ldr	r3, [r6, #92]
	cmp	r3, r5
	bhi	.L16269
.L16270:
	mov	r3, #0
	sub	r8, r8, #2
	mov	r0, r7
	str	r3, [r6, #112]
	bl	_raw_spin_unlock_irq
	cmp	r8, #5
	ldrls	pc, [pc, r8, asl #2]
	b	.L16251
.L16275:
	.word	.L16274
	.word	.L16251
	.word	.L16276
	.word	.L16251
	.word	.L16277
	.word	.L16277
.L16274:
	ldr	r1, [r6, #8]
	cmp	r1, #0
	beq	.L16278
	add	r1, r1, #96
	mov	r0, #0
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L16280
	ldr	r3, [r6, #8]
	mov	r1, #0
	ldr	r0, [r3, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
.L16280:
	ldr	r3, [r6, #56]
	cmp	r3, r4
	bne	.L16251
	ldr	r0, [r6, #4]
	cmp	r0, #0
	bne	.L16322
	ldrd	r0, [r6, #48]
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	ldr	r2, [r6, #48]
	cmp	r0, #0
	cmnne	r0, #108
	mov	r3, r0
	str	r6, [r2]
	beq	.L16251
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC90
	ldr	r2, [r6, #48]
	movt	r1, #:upper16:.LC90
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_warn
.L16251:
	add	sp, sp, #128
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L16323:
	ldr	r3, [r6, #112]
	cmp	r3, #5
	ble	.L16326
.L16254:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #112]
	mov	r4, r0
	cmp	r3, #6
	bgt	.L16256
	ldr	r3, [r6, #56]
	mov	r1, #6
	ldr	r2, [r6, #168]
	str	r1, [r6, #112]
	str	r3, [r6, #116]
	cmp	r2, #0
	beq	.L16256
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L16256:
	mov	r1, r4
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L16258
.L16326:
	ldr	r0, .L16328
	ldrh	r3, [r0]
	tst	r3, #4
	beq	.L16254
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC1219
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC1219
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L16254
.L16268:
	mvn	r3, #7
	mov	r0, r7
	str	r3, [r6, #112]
	bl	_raw_spin_unlock_irq
	mov	r0, r6
	bl	send_status
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #112]
	cmn	r3, #8
	beq	.L16327
.L16272:
	mov	r0, r7
	bl	_raw_spin_unlock_irq
	b	.L16251
.L16277:
	mov	r1, #0
	mov	r0, r6
	bl	do_set_interface
	mov	r0, r7
	bl	_raw_spin_lock_irq
	mov	r3, #7
	mov	r0, r7
	str	r3, [r6, #112]
	bl	_raw_spin_unlock_irq
	b	.L16251
.L16276:
	mov	r0, r6
	ldr	r1, [r6, #12]
	bl	do_set_interface
	ldr	r3, [r6, #12]
	cmp	r3, #0
	beq	.L16251
	ldr	r0, [r6, #4]
.L16322:
	bl	usb_composite_setup_continue
	b	.L16251
.L16327:
	str	r9, [r6, #112]
	b	.L16272
.L16278:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC88
	movw	r3, #3112
	movt	r1, #:upper16:.LC88
	ldr	r2, .L16328+4
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC89
	movw	r1, #550
	movt	r0, #:upper16:.LC89
	bl	warn_slowpath_null
	b	.L16251
.L16329:
	.align	2
.L16328:
	.word	.LANCHOR8-3582
	.word	.LANCHOR5+1056
	.fnend
	.size	handle_exception, .-handle_exception
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_main_thread, %function
fsg_main_thread:
	.fnstart
	@ args = 0, pretend = 0, frame = 96
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #5121
	movw	r4, #257
	strd	r6, [sp, #8]
	movw	r7, #22737
	movt	r4, 5121
	strd	r8, [sp, #16]
	movw	r9, #21333
	movt	r7, 6687
	strd	r10, [sp, #24]
	mov	fp, r0
	mov	r0, #2
	str	lr, [sp, #32]
	.pad #108
	sub	sp, sp, #108
	add	r10, fp, #44
	bl	allow_signal
	mov	r0, #15
	movt	r9, 17218
	bl	allow_signal
	mov	r0, #9
	bl	allow_signal
	mov	r0, #10
	bl	allow_signal
	bl	set_freezable
	mov	r3, sp
	mov	r1, r5
	bic	r3, r3, #8128
	movw	r0, #21250
	mov	r2, #0
	bic	r3, r3, #63
	movt	r5, 41472
	movt	r1, 256
	movt	r0, 5
	str	r2, [r3, #8]
	strd	r4, [sp, #12]
	str	r1, [sp, #20]
	str	r0, [sp, #24]
.L16331:
	ldr	r3, [fp, #112]
	cmp	r3, #7
	beq	.L16755
.L16526:
	cmp	r3, #0
	bgt	.L16332
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L16332
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	tst	r3, #32
	beq	.L16756
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r4, [fp, #60]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L16336
.L16338:
	mov	r0, r10
	bl	_raw_spin_unlock_irq
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	bne	.L16331
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L16338
.L16336:
	mov	r0, r10
	bl	_raw_spin_unlock_irq
	mov	r2, #31
	mov	r0, fp
	str	r2, [r4, #12]
	ldr	r1, [fp, #108]
	udiv	r3, r2, r1
	mul	r3, r1, r3
	subs	r3, r2, r3
	addne	r2, r1, r2
	mov	r1, r4
	subne	r2, r2, r3
	ldr	r3, [r4, #24]
	str	r2, [r3, #4]
	bl	start_out_transfer
	cmp	r0, #0
	bne	.L16735
	b	.L16331
.L16757:
	bl	_raw_spin_unlock_irq
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	bne	.L16331
.L16735:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	mov	r0, r10
	cmp	r3, #1
	bne	.L16757
	bl	_raw_spin_unlock_irq
	.syntax divided
@ 2858 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r6, [fp, #8]
	cmp	r6, #0
	beq	.L16343
	ldr	r3, [r4, #24]
	ldr	r5, [r6, #88]
	ldr	r8, [r3]
	ldr	r2, [r3, #44]
	cmp	r2, #0
	bne	.L16742
	ldr	r1, [r6, #96]
	tst	r1, #1
	bne	.L16346
	ldr	r3, [r3, #48]
	cmp	r3, #31
	bne	.L16347
	ldr	r2, [r8]
	cmp	r2, r9
	bne	.L16347
	ldrb	r3, [r8, #13]	@ zero_extendqisi2
	cmp	r3, #7
	bhi	.L16361
	ldrb	r2, [r8, #12]	@ zero_extendqisi2
	bics	r2, r2, #128
	str	r2, [sp, #28]
	beq	.L16758
.L16361:
	ldr	r0, .L16799
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L16759
.L16363:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	ands	r5, r3, #1
	bne	.L16364
	mov	r0, r10
	bl	_raw_spin_lock_irq
	mov	r0, r10
	str	r5, [r4, #4]
	bl	_raw_spin_unlock_irq
	b	.L16331
.L16332:
	mov	r0, fp
	bl	handle_exception
	ldr	r3, [fp, #112]
	cmp	r3, #7
	bne	.L16526
.L16755:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	mov	r3, #0
	mov	r0, r10
	str	r3, [fp, #168]
	bl	_raw_spin_unlock_irq
	ldr	r3, [fp, #172]
	cmp	r3, #0
	beq	.L16530
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L16530
	mov	r0, fp
	blx	r3
	cmp	r0, #0
	blt	.L16530
.L16531:
	add	r0, fp, #152
	mov	r1, #0
	bl	complete_and_exit
.L16756:
	mov	r0, fp
	bl	sleep_thread
	b	.L16331
.L16530:
	ldr	r5, [fp, #92]
	add	r8, fp, #28
	mov	r0, r8
	ldr	r4, [fp, #100]
	bl	down_write
	cmp	r5, #0
	sub	r5, r5, #1
	beq	.L16529
	movw	r7, #:lower16:.LANCHOR4
	mov	r6, #14848
	movw	r9, #:lower16:.LC804
	add	r4, r4, #48
	movt	r7, #:upper16:.LANCHOR4
	movt	r6, 2
	movt	r9, #:upper16:.LC804
.L16534:
	ldr	r0, [r4, #-48]
	cmp	r0, #0
	beq	.L16532
	ldrh	r3, [r7, #114]
	tst	r3, #4
	bne	.L16760
.L16533:
	bl	fput
	mov	r3, #0
	str	r3, [r4, #-48]
	str	r6, [r4, #-12]
.L16532:
	sub	r5, r5, #1
	add	r4, r4, #392
	cmn	r5, #1
	bne	.L16534
.L16529:
	mov	r0, r8
	bl	up_write
	b	.L16531
.L16364:
	movw	r0, #:lower16:.LANCHOR4
	ldr	ip, [r6, #100]
	movw	r2, #:lower16:.LC774
	movt	r0, #:upper16:.LANCHOR4
	ldr	r5, [r6, #104]
	movw	r3, #:lower16:.LC1220
	ldrh	r1, [r0, #-198]
	movt	r2, #:upper16:.LC774
	movt	r3, #:upper16:.LC1220
	cmp	r5, ip
	moveq	r3, r2
	tst	r1, #4
	bne	.L16761
.L16366:
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
	mov	r0, r6
	bl	halt_bulk_in_endpoint
.L16742:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	mov	r3, #0
	mov	r0, r10
	str	r3, [r4, #4]
	bl	_raw_spin_unlock_irq
	b	.L16331
.L16758:
	ldrb	r2, [r8, #14]	@ zero_extendqisi2
	sub	r1, r2, #1
	cmp	r1, #15
	bhi	.L16361
	add	r1, r8, #15
	str	r2, [r5, #72]
	add	r0, r5, #76
	bl	memcpy
	ldrsb	r3, [r8, #12]
	mov	r0, r10
	ldr	r2, [r5, #92]
	cmp	r3, #0
	movge	r3, #1
	movlt	r3, #2
	str	r3, [r5, #120]
	ldr	r3, [r8, #8]
	cmp	r3, #0
	str	r3, [r5, #124]
	moveq	r3, #3
	streq	r3, [r5, #120]
	ldrb	r3, [r8, #13]	@ zero_extendqisi2
	cmp	r3, r2
	str	r3, [r5, #96]
	ldrcc	r2, [r5, #100]
	movcc	r1, #392
	movcs	r3, #0
	mlacc	r3, r1, r3, r2
	str	r3, [r5, #104]
	ldr	r3, [r8, #4]
	str	r3, [r5, #132]
	bl	_raw_spin_lock_irq
	mov	r3, #0
	mov	r0, r10
	str	r3, [r4, #4]
	bl	_raw_spin_unlock_irq
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [fp, #112]
	cmp	r3, #0
	bgt	.L16371
	mvn	r3, #8
	str	r3, [fp, #112]
.L16371:
	mov	r0, r10
	bl	_raw_spin_unlock_irq
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r4, [fp, #60]
	str	r4, [fp, #64]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L16372
.L16373:
	mov	r0, r10
	bl	_raw_spin_unlock_irq
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	bne	.L16331
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L16373
.L16372:
	mov	r0, r10
	add	r8, fp, #28
	bl	_raw_spin_unlock_irq
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	mov	r0, r8
	and	r3, r3, #251
	bfc	r3, #3, #1
	strb	r3, [fp, #144]
	bl	down_read
	ldrb	r2, [fp, #76]	@ zero_extendqisi2
	cmp	r2, #37
	beq	.L16375
	bls	.L16762
	cmp	r2, #68
	beq	.L16392
	bls	.L16763
	cmp	r2, #168
	beq	.L16400
	bls	.L16764
	cmp	r2, #190
	beq	.L16404
	cmp	r2, #250
	beq	.L16405
	cmp	r2, #170
	beq	.L16765
.L16374:
	ldr	r5, .L16799+4
	mov	r6, #0
	movw	r1, #:lower16:.LC1257
	movt	r1, #:upper16:.LC1257
	str	r6, [fp, #128]
	mov	r0, r5
	bl	sprintf
	str	r6, [sp]
	mov	r2, r6
	mvn	r3, #0
	str	r5, [sp, #4]
	mov	r0, fp
	ldr	r1, [fp, #72]
	bl	check_command
	subs	r5, r0, #0
	bne	.L16407
	ldr	r3, [fp, #104]
.L16745:
	mov	r2, #335872
	mvn	r1, #21
	str	r1, [sp, #28]
	str	r2, [r3, #28]
.L16409:
	mov	r0, r8
	ldr	r5, [sp, #28]
	bl	up_read
.L16536:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r3, r3, #1
	bne	.L16331
	cmn	r5, #22
	beq	.L16491
	cmp	r5, #0
	ldrlt	r6, [fp, #120]
	blt	.L16492
	mov	r3, r5
.L16491:
	ldr	r6, [fp, #120]
	cmp	r6, #2
	bne	.L16492
	ldr	r2, [fp, #128]
	mov	r1, #1
	ldr	r0, [r4, #16]
	cmp	r3, r2
	movcs	r3, r2
	str	r3, [r0, #4]
	str	r1, [r4, #4]
	ldr	r6, [fp, #120]
	ldr	r2, [fp, #136]
	sub	r3, r2, r3
	str	r3, [fp, #136]
.L16492:
	cmp	r6, #1
	beq	.L16494
	bcc	.L16495
	cmp	r6, #2
	bne	.L16493
	ldr	r3, [fp, #124]
	cmp	r3, #0
	beq	.L16493
	ldr	r3, [fp, #8]
	cmp	r3, #0
	beq	.L16766
	ldr	r4, [fp, #60]
	ldr	r2, [fp, #136]
	ldr	r3, [r4, #16]
	cmp	r2, #0
	bne	.L16504
	ldrb	ip, [r3, #26]	@ zero_extendqisi2
	mov	r1, r4
	mov	r0, fp
	bfi	ip, r2, #1, #1
	strb	ip, [r3, #26]
	bl	start_in_transfer
	cmp	r0, #0
	beq	.L16331
	ldr	r3, [r4, #8]
	str	r3, [fp, #60]
.L16493:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [fp, #112]
	mov	r0, r10
	cmp	r3, #0
	mvnle	r3, #7
	strle	r3, [fp, #112]
	bl	_raw_spin_unlock_irq
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #3968]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3, #3968]
	bne	.L16331
	mov	r0, fp
	bl	send_status
	subs	r4, r0, #0
	bne	.L16331
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [fp, #112]
	mov	r0, r10
	cmp	r3, #0
	strle	r4, [fp, #112]
	bl	_raw_spin_unlock_irq
	b	.L16331
.L16760:
	mov	r2, r9
	mov	r1, r4
	ldr	r0, .L16799+8
	bl	__dynamic_dev_dbg
	ldr	r0, [r4, #-48]
	b	.L16533
.L16343:
	ldr	r0, [fp]
	movw	r1, #:lower16:.LC88
	movw	r3, #2859
	ldr	r2, .L16799+12
	movt	r1, #:upper16:.LC88
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC89
	movw	r1, #550
	movt	r0, #:upper16:.LC89
	bl	warn_slowpath_null
	mov	r0, r10
	bl	_raw_spin_lock_irq
	mov	r0, r10
	str	r6, [r4, #4]
	bl	_raw_spin_unlock_irq
	b	.L16331
.L16347:
	ldr	r0, .L16799+16
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L16767
.L16349:
	ldr	r0, .L16799+20
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L16768
.L16350:
	ldr	r0, [r6, #100]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	beq	.L16351
	blx	r2
.L16352:
	cmp	r0, #0
	beq	.L16355
	cmn	r0, #11
	bne	.L16769
	mov	r0, #100
	bl	msleep_interruptible
	cmp	r0, #0
	bne	.L16355
	ldr	r0, [r6, #100]
	ldr	r2, [r0, #8]
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L16357
	blx	r3
	b	.L16352
.L16435:
	tst	r2, #16
	bne	.L16770
	cmp	r3, #0
	beq	.L16409
	ldr	r3, [fp, #172]
	cmp	r3, #0
	beq	.L16444
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L16444
	ldr	r2, [fp, #100]
	mov	r1, r6
	mov	r0, fp
	sub	r2, r6, r2
	asr	r2, r2, #3
	mul	r2, r7, r2
	blx	r3
	subs	r5, r0, #0
	blt	.L16407
	bne	.L16409
.L16444:
	mov	r0, r8
	bl	up_read
	mov	r0, r8
	bl	down_write
	ldr	r3, [r6]
	cmp	r3, #0
	beq	.L16443
	movw	r0, #:lower16:.LANCHOR4
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, #114]
	tst	r3, #4
	bne	.L16771
.L16445:
	ldr	r0, [r6]
	bl	fput
	mov	r3, #0
	str	r3, [r6]
.L16443:
	mov	r0, r8
	bl	up_write
	mov	r0, r8
	bl	down_read
	movw	r1, #:lower16:.LC1243
	mov	r0, fp
	movt	r1, #:upper16:.LC1243
	bl	send_message
	ldr	r3, [fp, #172]
	cmp	r3, #0
	beq	.L16409
	ldr	r3, [r3, #8]
	cmp	r3, #0
	beq	.L16409
	ldr	r2, [fp, #100]
	mov	r1, r6
	mov	r0, fp
	sub	r2, r6, r2
	asr	r2, r2, #3
	mul	r2, r7, r2
	blx	r3
	and	r5, r0, r0, asr #31
.L16407:
	mov	r0, r8
	bl	up_read
	cmn	r5, #4
	bne	.L16536
	b	.L16331
.L16762:
	cmp	r2, #21
	beq	.L16377
	bhi	.L16378
	cmp	r2, #8
	beq	.L16379
	bhi	.L16380
	cmp	r2, #0
	beq	.L16381
	cmp	r2, #3
	bne	.L16374
	ldrb	ip, [fp, #80]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1239
	mov	r2, #0
	movt	r0, #:upper16:.LC1239
	mov	r3, #16
	str	r2, [sp]
	mov	r1, #6
	mov	r2, #2
	str	r0, [sp, #4]
	mov	r0, fp
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L16407
	ldr	r2, [fp, #104]
	ldr	r6, [r4]
	cmp	r2, #0
	beq	.L16772
	ldrb	r1, [r2, #24]	@ zero_extendqisi2
	mov	r0, #0
	ldr	r3, [r2, #28]
	ldr	ip, [r2, #32]
	str	r0, [r2, #28]
	str	r0, [r2, #32]
	ubfx	r5, r1, #6, #1
	bfi	r1, r0, #6, #1
	lsl	r5, r5, #7
	strb	r1, [r2, #24]
	str	ip, [sp, #28]
.L16431:
	mov	r1, #18
	mov	r0, r6
	str	r3, [sp, #48]
	bl	__memzero
	ldr	lr, [sp, #28]
	orr	r5, r5, #112
	ldr	r3, [sp, #48]
	strb	r5, [r6]
	lsr	r2, lr, #16
	lsr	r0, r3, #16
	lsr	r1, r2, #8
	lsr	ip, r3, #8
	strb	r0, [r6, #2]
	strb	r1, [r6, #3]
	mov	r1, #18
	strb	r2, [r6, #4]
	mov	r2, #10
	strb	r3, [r6, #13]
	ubfx	r3, lr, #8, #8
	strb	lr, [r6, #6]
	strb	r3, [r6, #5]
	strb	r2, [r6, #7]
	strb	ip, [r6, #12]
	str	r1, [sp, #28]
	b	.L16409
.L16494:
	ldr	r3, [fp, #136]
	cmp	r3, #0
	beq	.L16493
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	ands	r5, r3, #8
	bne	.L16773
.L16514:
	ldr	r3, [fp, #64]
	ldr	r2, [r3, #4]
	cmp	r2, #0
	bne	.L16521
	ldr	r3, [fp, #140]
	cmp	r3, #0
	beq	.L16493
	ldr	r6, [fp, #60]
	ldr	r2, [r6, #4]
	cmp	r2, #0
	beq	.L16538
.L16518:
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	beq	.L16514
	b	.L16331
.L16521:
	cmp	r2, #1
	bne	.L16512
	.syntax divided
@ 2060 "/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r2, [r3, #8]
	str	r5, [r3, #4]
	str	r2, [fp, #64]
	ldr	r2, [r3, #24]
	ldr	r3, [r3, #12]
	ldr	r1, [r2, #48]
	cmp	r1, r3
	bcc	.L16513
	ldr	r3, [r2, #44]
	cmp	r3, #0
	beq	.L16514
.L16513:
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r3, [fp, #112]
	mov	r4, r0
	cmp	r3, #1
	bgt	.L16516
	ldr	r3, [fp, #56]
	mov	r1, #1
	ldr	r2, [fp, #168]
	str	r1, [fp, #112]
	str	r3, [fp, #116]
	cmp	r2, #0
	beq	.L16516
.L16754:
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L16516:
	mov	r1, r4
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	b	.L16331
.L16512:
	ldr	r6, [fp, #60]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L16518
	ldr	r3, [fp, #140]
	cmp	r3, #0
	beq	.L16518
.L16538:
	cmp	r3, #16384
	mov	r1, r6
	movcc	r4, r3
	movcs	r4, #16384
	mov	r0, fp
	str	r4, [r6, #12]
	ldr	r3, [fp, #108]
	udiv	r2, r4, r3
	mls	r2, r3, r2, r4
	cmp	r2, #0
	addne	r3, r4, r3
	moveq	r3, r4
	subne	r3, r3, r2
	ldr	r2, [r6, #24]
	str	r3, [r2, #4]
	bl	start_out_transfer
	cmp	r0, #0
	beq	.L16331
	ldr	r3, [fp, #140]
	ldr	r2, [r6, #8]
	sub	r3, r3, r4
	str	r2, [fp, #60]
	str	r3, [fp, #140]
	b	.L16514
.L16495:
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L16493
	ldr	r2, [fp, #8]
	cmp	r2, #0
	movweq	r1, #:lower16:.LC88
	movweq	r3, #2120
	ldreq	r0, [fp]
	beq	.L16743
	movw	r0, #:lower16:.LANCHOR4
	ldr	lr, [r2, #100]
	movw	r1, #:lower16:.LC774
	movt	r0, #:upper16:.LANCHOR4
	ldr	r4, [r2, #104]
	movw	r3, #:lower16:.LC1220
	ldrh	ip, [r0, #-198]
	movt	r1, #:upper16:.LC774
	movt	r3, #:upper16:.LC1220
	cmp	r4, lr
	moveq	r3, r1
	tst	ip, #4
	bne	.L16774
.L16500:
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
	ldr	r0, [fp, #8]
	bl	halt_bulk_in_endpoint
.L16501:
	cmp	r0, #0
	bne	.L16331
	b	.L16493
.L16763:
	cmp	r2, #47
	beq	.L16394
	bhi	.L16395
	cmp	r2, #40
	beq	.L16396
	cmp	r2, #42
	bne	.L16374
	ldrb	r1, [fp, #83]	@ zero_extendqisi2
	ldrb	r3, [fp, #84]	@ zero_extendqisi2
	ldr	r2, [fp, #104]
	orr	r3, r3, r1, lsl #8
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L16467
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L16467:
	mov	r3, #1
	movw	r0, #:lower16:.LC1250
	mov	r2, r3
	movt	r0, #:upper16:.LC1250
	str	r3, [sp]
	mov	r1, #10
	movw	r3, #446
.L16750:
	str	r0, [sp, #4]
	mov	r0, fp
	bl	check_command
	subs	r5, r0, #0
	bne	.L16407
	mov	r0, fp
	bl	do_write
	mov	r5, r0
	b	.L16407
.L16378:
	cmp	r2, #26
	beq	.L16385
	bls	.L16775
	cmp	r2, #30
	beq	.L16389
	cmp	r2, #35
	beq	.L16390
	cmp	r2, #27
	bne	.L16374
	movw	ip, #:lower16:.LC1240
	mov	r0, #0
	movt	ip, #:upper16:.LC1240
	mov	r3, #18
	str	r0, [fp, #128]
	mov	r2, #3
	mov	r1, #6
	stm	sp, {r0, ip}
	mov	r0, fp
	bl	check_command
	subs	r5, r0, #0
	bne	.L16407
	ldr	r6, [fp, #104]
	cmp	r6, #0
	beq	.L16412
	ldrb	r2, [r6, #24]	@ zero_extendqisi2
	tst	r2, #4
	moveq	r3, #335872
	mvneq	r2, #21
	streq	r3, [r6, #28]
	streq	r2, [sp, #28]
	beq	.L16409
	ldrb	r3, [fp, #77]	@ zero_extendqisi2
	tst	r3, #254
	bne	.L16433
	ldrb	r3, [fp, #80]	@ zero_extendqisi2
	tst	r3, #252
	bne	.L16433
	tst	r3, #1
	and	r3, r3, #2
	beq	.L16435
	cmp	r3, #0
	beq	.L16436
	movw	r1, #:lower16:.LC1241
	mov	r0, fp
	movt	r1, #:upper16:.LC1241
	bl	send_message
.L16436:
	ldr	r3, [r6]
	cmp	r3, #0
	bne	.L16409
	mov	r3, #14848
	mvn	r2, #21
	movt	r3, 2
	str	r2, [sp, #28]
	str	r3, [r6, #28]
	b	.L16409
.L16357:
	mov	r1, #1
	ldr	r3, [r2, #24]
	blx	r3
	b	.L16352
.L16764:
	cmp	r2, #85
	beq	.L16402
	cmp	r2, #90
	bne	.L16374
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC1230
	mov	r2, #0
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC1230
	movw	r3, #390
	str	r2, [sp]
	mov	r0, fp
	mov	r2, #2
	str	r1, [sp, #4]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L16407
.L16737:
	mov	r1, r4
	mov	r0, fp
	bl	do_mode_sense
	mov	r5, r0
	b	.L16407
.L16395:
	cmp	r2, #53
	beq	.L16398
	cmp	r2, #67
	bne	.L16374
	ldr	r3, [fp, #104]
	cmp	r3, #0
	beq	.L16374
	ldrb	r3, [r3, #24]	@ zero_extendqisi2
	tst	r3, #8
	beq	.L16374
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC1237
	mov	r2, #1
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC1237
	movw	r3, #962
	str	r2, [sp]
	mov	r0, fp
	mov	r2, #2
	str	r1, [sp, #4]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L16407
	ldrb	r3, [fp, #77]	@ zero_extendqisi2
	ldrb	r5, [fp, #82]	@ zero_extendqisi2
	ldrb	r0, [fp, #85]	@ zero_extendqisi2
	ldr	r6, [r4]
	and	r1, r3, #253
	ldr	r2, [fp, #104]
	and	r3, r3, #2
	cmp	r5, #1
	cmpls	r1, #0
	movne	r5, #1
	moveq	r5, #0
	lsr	lr, r0, #6
	bne	.L16776
	cmp	lr, #2
	beq	.L16777
	mov	r1, #20
	mov	r0, r6
	str	r2, [sp, #28]
	str	r3, [sp, #48]
	bl	__memzero
	ldr	r3, [sp, #48]
	mov	r2, #1
	mov	r0, #18
	mov	r1, #22
	strb	r0, [r6, #1]
	strb	r2, [r6, #2]
	cmp	r3, #0
	strb	r2, [r6, #3]
	strb	r1, [r6, #5]
	strb	r2, [r6, #6]
	ldr	r2, [sp, #28]
	bne	.L16778
	str	r3, [r6, #8]	@ unaligned
	mvn	r0, #85
	mov	r3, #20
	strb	r1, [r6, #13]
	strb	r0, [r6, #14]
	str	r3, [sp, #28]
	ldr	r3, [r2, #16]
	lsr	r2, r3, #16
	ubfx	r1, r3, #8, #8
	strb	r2, [r6, #17]
	strb	r3, [r6, #19]
	lsr	r3, r2, #8
	strb	r1, [r6, #18]
	strb	r3, [r6, #16]
	b	.L16409
.L16380:
	cmp	r2, #10
	beq	.L16383
	cmp	r2, #18
	bne	.L16374
	ldrb	ip, [fp, #80]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1225
	mov	r2, #0
	movt	r0, #:upper16:.LC1225
	mov	r3, #16
	str	r2, [sp]
	mov	r1, #6
	mov	r2, #2
	str	r0, [sp, #4]
	mov	r0, fp
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L16407
	ldr	r2, [fp, #104]
	ldr	r6, [r4]
	cmp	r2, #0
	beq	.L16779
	ldrb	ip, [r2, #24]	@ zero_extendqisi2
	mov	r5, #0
	mov	r0, #2
	ldr	r3, .L16799+24
	movw	r1, #:lower16:.LANCHOR1
	add	lr, fp, #218
	movt	r1, #:upper16:.LANCHOR1
	tst	ip, #8
	str	r1, [sp, #28]
	mov	r1, lr
	moveq	ip, r5
	movne	ip, #5
	str	lr, [sp, #48]
	strb	ip, [r6]
	ldrb	r2, [r2, #24]	@ zero_extendqisi2
	strb	r0, [r6, #2]
	strb	r0, [r6, #3]
	mov	r0, r3
	mov	r3, #31
	lsl	r2, r2, #5
	strb	r3, [r6, #4]
	strb	r5, [r6, #5]
	bic	ip, r2, #127
	strb	r5, [r6, #6]
	mov	r2, #16
	strb	r5, [r6, #7]
	strb	ip, [r6, #1]
	bl	strncpy
	ldr	r1, [sp, #28]
	ldr	r0, [sp, #48]
	strb	r5, [r1, #4028]
	bl	strlen
	cmp	r0, #11
	ldr	r3, .L16799+24
	bhi	.L16411
	ldr	r2, [fp, #96]
	cmp	r2, r5
	beq	.L16411
	mov	r0, r3
	bl	strlen
	ldr	r3, .L16799+24
	movw	r2, #:lower16:.LC1226
	movt	r2, #:upper16:.LC1226
	ldr	ip, [r2]
	ldrh	r2, [r2, #4]
	add	r1, r3, r0
	str	ip, [r3, r0]	@ unaligned
	strh	r2, [r1, #4]	@ unaligned
	ldr	r2, [sp, #28]
	strb	r5, [r2, #4028]
.L16411:
	mov	r1, #1
	mov	ip, #36
	str	r3, [sp]
	add	r5, fp, #180
	movw	r2, #:lower16:.LC880
	movt	r2, #:upper16:.LC880
	str	r1, [sp, #4]
	mov	r0, r5
	mov	r1, #29
	add	r3, fp, #209
	str	ip, [sp, #28]
	bl	snprintf
	ldr	r0, [fp, #180]	@ unaligned
	ldr	r1, [fp, #184]	@ unaligned
	ldr	r2, [fp, #188]	@ unaligned
	ldr	ip, [fp, #192]	@ unaligned
	str	r0, [r6, #8]	@ unaligned
	str	r1, [r6, #12]	@ unaligned
	str	r2, [r6, #16]	@ unaligned
	str	ip, [r6, #20]	@ unaligned
	ldr	r2, [fp, #204]	@ unaligned
	ldr	r0, [fp, #196]	@ unaligned
	ldr	r1, [fp, #200]	@ unaligned
	str	r0, [r6, #24]	@ unaligned
	str	r1, [r6, #28]	@ unaligned
	str	r2, [r6, #32]	@ unaligned
	ldrb	r2, [fp, #208]	@ zero_extendqisi2
	strb	r2, [r6, #36]
	b	.L16409
.L16759:
	ldrb	ip, [r8, #14]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC1224
	sub	r0, r0, #18
	ldr	r1, [r6, #84]
	movt	r2, #:upper16:.LC1224
	str	ip, [sp, #4]
	ldrb	ip, [r8, #12]	@ zero_extendqisi2
	add	r1, r1, #32
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L16363
.L16769:
	ldr	r3, [r6, #84]
	movw	r1, #:lower16:.LC1223
	mov	r2, r0
	movt	r1, #:upper16:.LC1223
	add	r0, r3, #32
	bl	dev_warn
.L16355:
	add	r1, r6, #96
	mov	r0, #0
	bl	_set_bit
	b	.L16742
.L16504:
	ldrb	r2, [r3, #26]	@ zero_extendqisi2
	mov	r1, r4
	mov	r0, fp
	orr	r2, r2, #2
	strb	r2, [r3, #26]
	bl	start_in_transfer
	cmp	r0, #0
	bne	.L16505
	ldrb	r2, [fp, #144]	@ zero_extendqisi2
	ldr	r3, [r4, #8]
	tst	r2, #1
	str	r3, [fp, #60]
	beq	.L16331
.L16537:
	ldr	r0, [fp, #8]
	bl	halt_bulk_in_endpoint
	b	.L16501
.L16766:
	ldr	r0, [fp]
	movw	r1, #:lower16:.LC88
	movw	r3, #2135
.L16743:
	movt	r1, #:upper16:.LC88
	ldr	r2, .L16799+28
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC89
	movw	r1, #550
	movt	r0, #:upper16:.LC89
	bl	warn_slowpath_null
	b	.L16331
.L16383:
	ldrb	r3, [fp, #80]	@ zero_extendqisi2
	ldr	r2, [fp, #104]
	cmp	r3, #0
	moveq	r3, #256
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L16466
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L16466:
	mov	r3, #1
	movw	r0, #:lower16:.LC1249
	mov	r2, r3
	movt	r0, #:upper16:.LC1249
	str	r3, [sp]
	mov	r1, #6
	mov	r3, #30
	b	.L16750
.L16379:
	ldrb	r3, [fp, #80]	@ zero_extendqisi2
	ldr	r2, [fp, #104]
	cmp	r3, #0
	moveq	r3, #256
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L16417
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L16417:
	mov	r2, #1
	movw	r0, #:lower16:.LC1232
	movt	r0, #:upper16:.LC1232
	mov	r3, #30
	str	r2, [sp]
	mov	r1, #6
	mov	r2, #2
.L16747:
	str	r0, [sp, #4]
	mov	r0, fp
	bl	check_command
	subs	r5, r0, #0
	bne	.L16407
	mov	r0, fp
	bl	do_read
	mov	r5, r0
	b	.L16407
.L16396:
	ldrb	r1, [fp, #83]	@ zero_extendqisi2
	ldrb	r3, [fp, #84]	@ zero_extendqisi2
	ldr	r2, [fp, #104]
	orr	r3, r3, r1, lsl #8
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L16418
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L16418:
	mov	r2, #1
	movw	r0, #:lower16:.LC1233
	movt	r0, #:upper16:.LC1233
	movw	r3, #446
	str	r2, [sp]
	mov	r1, #10
	mov	r2, #2
	b	.L16747
.L16402:
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC1228
	mov	r2, #0
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC1228
	movw	r3, #386
	str	r2, [sp]
	mov	r0, fp
	mov	r2, #1
	str	r1, [sp, #4]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L16407
.L16753:
	ldr	r3, [fp, #104]
	cmp	r3, #0
	bne	.L16745
.L16412:
	mvn	r3, #21
	str	r3, [sp, #28]
	b	.L16409
.L16800:
	.align	2
.L16799:
	.word	.LANCHOR8-3510
	.word	.LANCHOR1+4032
	.word	.LANCHOR4+96
	.word	.LANCHOR5+1076
	.word	.LANCHOR8-3558
	.word	.LANCHOR8-3534
	.word	.LANCHOR1+4012
	.word	.LANCHOR5+1148
	.word	.LANCHOR8-3438
	.word	.LANCHOR5+1128
	.word	.LANCHOR8-3390
	.word	.LANCHOR5+1096
	.word	.LANCHOR8-3414
	.word	.LANCHOR8-3462
	.word	.LANCHOR8-3486
.L16381:
	movw	r0, #:lower16:.LC1245
	mov	r1, #1
	str	r2, [fp, #128]
	movt	r0, #:upper16:.LC1245
	mov	r3, r2
	str	r1, [sp]
	mov	r2, #3
	mov	r1, #6
	str	r0, [sp, #4]
	mov	r0, fp
	bl	check_command
	mov	r5, r0
	b	.L16407
.L16398:
	movw	ip, #:lower16:.LC1244
	mov	r3, #0
	movt	ip, #:upper16:.LC1244
	mov	r6, #1
	str	r3, [fp, #128]
	mov	r2, #3
	mov	r1, #10
	mov	r0, fp
	stm	sp, {r6, ip}
	mov	r3, #444
	bl	check_command
	subs	r5, r0, #0
	bne	.L16407
	ldr	r5, [fp, #104]
	ldr	r0, [r5]
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	cmp	r0, #0
	ubfx	r3, r3, #1, #1
	moveq	r3, r6
	cmp	r3, #0
	bne	.L16409
	mov	r1, r6
	bl	vfs_fsync
	cmp	r0, #0
	beq	.L16409
	movw	r3, #3074
	mov	r2, #0
	movt	r3, 3
	str	r2, [sp, #28]
	str	r3, [r5, #28]
	b	.L16409
.L16390:
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC1238
	mov	r2, #1
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC1238
	mov	r3, #384
	str	r2, [sp]
	mov	r0, fp
	mov	r2, #2
	str	r1, [sp, #4]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L16407
	ldr	r1, [fp, #104]
	mov	r2, #134217728
	mov	r0, #12
	ldr	r3, [r4]
	mov	ip, #2
	str	r0, [sp, #28]
	str	r2, [r3]	@ unaligned
	ldr	r2, [r1, #16]
	lsr	r0, r2, #16
	strb	r2, [r3, #7]
	ubfx	r2, r2, #8, #8
	strb	r0, [r3, #5]
	strb	r2, [r3, #6]
	lsr	r2, r0, #8
	strb	r2, [r3, #4]
	ldr	r2, [r1, #44]
	strb	ip, [r3, #8]
	lsr	r1, r2, #16
	ubfx	r0, r2, #8, #8
	strb	r1, [r3, #9]
	strb	r0, [r3, #10]
	strb	r2, [r3, #11]
	b	.L16409
.L16389:
	movw	ip, #:lower16:.LC1231
	mov	r0, #0
	movt	ip, #:upper16:.LC1231
	mov	r3, #16
	str	r0, [fp, #128]
	mov	r2, #3
	mov	r1, #6
	stm	sp, {r0, ip}
	mov	r0, fp
	bl	check_command
	subs	r5, r0, #0
	bne	.L16407
	ldr	r5, [fp, #104]
	cmp	r5, #0
	beq	.L16412
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	tst	r3, #4
	moveq	r3, #335872
	mvneq	r2, #21
	streq	r2, [sp, #28]
	streq	r3, [r5, #28]
	beq	.L16409
	ldrb	r6, [fp, #80]	@ zero_extendqisi2
	bics	r2, r6, #1
	str	r2, [sp, #28]
	bne	.L16780
	and	r1, r3, #144
	mvn	r2, r6
	cmp	r1, #16
	movne	r2, #0
	andeq	r2, r2, #1
	cmp	r2, #0
	bne	.L16781
.L16415:
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	bfi	r3, r6, #4, #1
	strb	r3, [r5, #24]
	b	.L16409
.L16385:
	ldrb	ip, [fp, #80]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1229
	mov	r2, #0
	movt	r0, #:upper16:.LC1229
	mov	r3, #22
	str	r2, [sp]
	mov	r1, #6
	mov	r2, #2
	str	r0, [sp, #4]
	mov	r0, fp
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L16407
	b	.L16737
.L16377:
	ldrb	ip, [fp, #80]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1227
	mov	r2, #0
	movt	r0, #:upper16:.LC1227
	mov	r3, #18
	str	r2, [sp]
	mov	r1, #6
	mov	r2, #1
	str	r0, [sp, #4]
	mov	r0, fp
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L16407
	b	.L16753
.L16394:
	movw	ip, #:lower16:.LC1246
	mov	r3, #0
	movt	ip, #:upper16:.LC1246
	mov	r1, #1
	str	r3, [fp, #128]
	mov	r2, #3
	mov	r0, fp
	stm	sp, {r1, ip}
	movw	r3, #446
	mov	r1, #10
	bl	check_command
	subs	r5, r0, #0
	bne	.L16407
	ldr	r6, [fp, #104]
	mov	r1, #0
	ldr	ip, [fp, #78]	@ unaligned
	ldrd	r2, [r6, #16]
	rev	ip, ip
	cmp	ip, r2
	sbcs	r3, r1, r3
	movge	r3, #8448
	mvnge	r5, #21
	movtge	r3, 5
	strge	r3, [r6, #28]
	bge	.L16407
	ldrb	r3, [fp, #77]	@ zero_extendqisi2
	bics	r0, r3, #16
	movne	r3, #9216
	mvnne	r5, #21
	movtne	r3, 5
	strne	r3, [r6, #28]
	bne	.L16407
	ldrb	r1, [fp, #83]	@ zero_extendqisi2
	ldrb	r3, [fp, #84]	@ zero_extendqisi2
	orrs	r1, r3, r1, lsl #8
	beq	.L16487
	ldr	r2, [r6, #40]
	str	r0, [sp, #36]
	ldr	r0, [r6]
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	sub	lr, r2, #32
	lsl	r1, r1, r2
	cmp	r0, #0
	ubfx	r3, r3, #1, #1
	moveq	r3, #1
	str	r1, [sp, #52]
	ldr	r1, [sp, #36]
	cmp	r3, #0
	ldr	r3, [fp, #60]
	orr	r1, r1, ip, lsl lr
	str	r1, [sp, #36]
	rsb	r1, r2, #32
	ldr	lr, [sp, #36]
	str	r3, [sp, #60]
	lsl	r3, ip, r2
	str	r3, [sp, #32]
	orr	r1, lr, ip, lsr r1
	str	r1, [sp, #36]
	beq	.L16782
.L16449:
	mov	r3, #57344
	mov	r2, sp
	movt	r3, 65535
	mov	r5, r3
	and	r3, r2, r3
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r1, r3, #1
	bne	.L16741
	ldr	r3, [r6]
	mvn	r2, #0
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #32]
	ldr	r0, [r3, #32]
	bl	invalidate_mapping_pages
	mov	r3, sp
	mov	r2, r5
	and	r3, r3, r5
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r5, [r3]
	ands	r5, r5, #1
	bne	.L16741
	mov	r3, sp
	str	r4, [sp, #28]
	str	r8, [sp, #48]
	and	r2, r2, r3
	str	r5, [sp, #56]
	ldr	r5, [sp, #52]
	str	r9, [sp, #52]
	ldrd	r8, [sp, #64]
	str	r2, [sp, #84]
.L16452:
	cmp	r5, #0
	beq	.L16783
	ldr	r1, [r6, #8]
	cmp	r5, #16384
	mov	r3, #0
	ldr	ip, [sp, #32]
	movcc	r2, r5
	movcs	r2, #16384
	ldr	r0, [r6, #12]
	subs	r8, r1, ip
	ldr	r1, [sp, #36]
	sbc	r9, r0, r1
	cmp	r2, r8
	sbcs	r1, r3, r9
	movlt	r8, r2
	movlt	r9, r3
	cmp	r8, #0
	str	r8, [sp, #80]
	beq	.L16784
	ldrd	r0, [sp, #32]
	add	r3, sp, #104
	mov	r2, r8
	strd	r0, [r3, #-8]!
	ldr	r1, [sp, #60]
	ldr	r0, [r6]
	ldr	r1, [r1]
	bl	vfs_read
	ldr	r3, [sp, #84]
	mov	r4, r0
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L16728
	cmp	r0, #0
	blt	.L16785
	ldr	r3, [sp, #80]
	cmp	r3, r0
	bls	.L16459
	ldr	r0, .L16799+32
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L16786
.L16460:
	ldr	r3, [r6, #44]
	rsb	r3, r3, #0
	and	r4, r4, r3
.L16459:
	cmp	r4, #0
	beq	.L16787
	ldrd	r2, [sp, #32]
	sub	r5, r5, r4
	adds	r2, r2, r4
	adc	r3, r3, r4, asr #31
	strd	r2, [sp, #32]
	b	.L16452
.L16392:
	ldr	r3, [fp, #104]
	cmp	r3, #0
	beq	.L16374
	ldrb	r3, [r3, #24]	@ zero_extendqisi2
	tst	r3, #8
	beq	.L16374
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC1236
	mov	r2, #1
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC1236
	movw	r3, #446
	str	r2, [sp]
	mov	r0, fp
	mov	r2, #2
	str	r1, [sp, #4]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L16407
	ldrb	r3, [fp, #77]	@ zero_extendqisi2
	ldr	r6, [fp, #78]	@ unaligned
	ldr	r5, [r4]
	ldr	ip, [fp, #104]
	bics	r2, r3, #2
	and	lr, r3, #2
	rev	r6, r6
	str	r2, [sp, #28]
	bne	.L16788
	ldrd	r2, [ip, #16]
	mov	r1, #0
	cmp	r6, r2
	sbcs	r3, r1, r3
	bge	.L16789
	mov	r1, #8
	mov	r0, r5
	str	lr, [sp, #48]
	bl	__memzero
	ldr	lr, [sp, #48]
	mov	r3, #1
	strb	r3, [r5]
	cmp	lr, #0
	bne	.L16790
	lsr	r3, r6, #16
	mov	r2, #8
	ubfx	r1, r6, #8, #8
	str	r2, [sp, #28]
	lsr	r2, r3, r2
	strb	r2, [r5, #4]
	strb	r3, [r5, #5]
	strb	r1, [r5, #6]
	strb	r6, [r5, #7]
	b	.L16409
.L16765:
	ldr	r3, [fp, #82]	@ unaligned
	ldr	r2, [fp, #104]
	rev	r3, r3
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L16468
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L16468:
	mov	r3, #1
	movw	r0, #:lower16:.LC1251
	mov	r2, r3
	movt	r0, #:upper16:.LC1251
	str	r3, [sp]
	mov	r1, #12
	movw	r3, #1022
	b	.L16750
.L16405:
	ldrb	r5, [fp, #80]	@ zero_extendqisi2
	add	r3, fp, #235
	movw	r0, #:lower16:.LC1256
	ldr	r1, .L16799+36
	movt	r0, #:upper16:.LC1256
	str	r3, [sp, #28]
	str	r5, [fp, #128]
	mov	r2, r5
	ldr	r6, [r4]
	bl	printk
	ldr	r1, [fp, #128]
	cmp	r1, #0
	bne	.L16791
.L16488:
	cmp	r5, #101
	mov	r0, r6
	ldr	r1, [sp, #28]
	movhi	r2, #101
	movls	r2, r5
	movhi	r5, r2
	bl	memcpy
	str	r5, [sp, #28]
	b	.L16409
.L16404:
	ldrb	ip, [fp, #83]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC1255
	mov	r1, #1
	ldrb	r0, [fp, #82]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC1255
	mov	r3, #956
	ldrb	lr, [fp, #84]	@ zero_extendqisi2
	stm	sp, {r1, r2}
	mov	r2, #2
	mov	r1, #12
	lsl	ip, ip, #8
	orr	ip, ip, r0, lsl #16
	mov	r0, fp
	orr	ip, ip, lr
	lsl	ip, ip, #9
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L16407
	ldrb	r5, [fp, #83]	@ zero_extendqisi2
	ldrb	r1, [fp, #82]	@ zero_extendqisi2
	ldrb	r3, [fp, #84]	@ zero_extendqisi2
	ldr	r2, [fp, #78]	@ unaligned
	lsl	r5, r5, #8
	orr	r5, r5, r1, lsl #16
	rev	ip, r2
	orrs	r5, r5, r3
	str	ip, [sp, #84]
	beq	.L16407
	ldr	r3, [fp, #104]
	mov	r1, #0
	str	r3, [sp, #80]
	ldrd	r2, [r3, #16]
	cmp	ip, r2
	sbcs	r3, r1, r3
	bge	.L16792
	ldrb	r3, [fp, #85]	@ zero_extendqisi2
	and	r3, r3, #248
	cmp	r3, #248
	str	r3, [sp, #88]
	beq	.L16793
	ldr	r2, [sp, #84]
	ldr	r3, [fp, #128]
	lsr	r1, r2, #23
	lsl	r2, r2, #9
	cmp	r3, #0
	mov	r0, r3
	str	r2, [sp, #40]
	str	r1, [sp, #44]
	beq	.L16487
.L16473:
	mov	r3, sp
	str	r4, [sp, #28]
	str	r8, [sp, #48]
	bic	r3, r3, #8128
	str	r9, [sp, #56]
	ldrd	r8, [sp, #40]
	bic	r3, r3, #63
	str	r7, [sp, #60]
	ldr	r7, [sp, #80]
	str	r10, [sp, #52]
	mov	r10, r0
	str	r3, [sp, #92]
.L16472:
	ldr	r1, [r7, #8]
	cmp	r10, #16384
	mov	r3, #0
	ldr	r0, [r7, #12]
	movcc	r2, r10
	movcs	r2, #16384
	subs	r1, r1, r8
	str	r1, [sp, #72]
	sbc	r1, r0, r9
	str	r1, [sp, #76]
	ldrd	r0, [sp, #72]
	cmp	r2, r0
	sbcs	r1, r3, r1
	strdlt	r2, [sp, #72]
.L16474:
	ldrd	r0, [sp, #72]
	ubfx	r3, r8, #0, #12
	cmp	r3, #0
	mov	r4, r0
	beq	.L16475
	rsb	r4, r3, #4096
	cmp	r4, r0
	movcs	r4, r0
.L16475:
	ldr	r6, [fp, #60]
	b	.L16476
.L16477:
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	bne	.L16729
.L16476:
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L16477
	cmp	r4, #0
	beq	.L16794
	ldr	r3, [sp, #88]
	strd	r8, [sp, #96]
	mov	r2, r4
	ldr	r1, [r6]
	ldr	r0, [r7]
	cmp	r3, #248
	add	r3, sp, #96
	addeq	r1, r1, #16
	bl	vfs_read
	ldr	r3, [sp, #92]
	mov	r5, r0
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L16547
	cmp	r0, #0
	blt	.L16795
	cmp	r4, r0
	bls	.L16484
	ldr	r0, .L16799+40
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L16796
.L16485:
	ldr	r3, [fp, #136]
	bic	r5, r5, #508
	mov	r2, #1
	bic	r5, r5, #3
	adds	r8, r8, r5
	sub	r10, r10, r5
	adc	r9, r9, r5, asr #31
	cmp	r4, r5
	sub	r3, r3, r5
	str	r3, [fp, #136]
	ldr	r3, [r6, #16]
	str	r5, [r3, #4]
	str	r2, [r6, #4]
	bhi	.L16797
.L16486:
	cmp	r10, #0
	beq	.L16730
	mov	r1, r6
	mov	r0, fp
	bl	start_in_transfer
	cmp	r0, #0
	beq	.L16731
	ldr	r3, [r6, #8]
	str	r3, [fp, #60]
	b	.L16472
.L16375:
	movw	ip, #:lower16:.LC1235
	mov	r1, #1
	movt	ip, #:upper16:.LC1235
	mov	r6, #8
	mov	r3, #316
	mov	r2, #2
	str	r6, [fp, #128]
	mov	r0, fp
	stm	sp, {r1, ip}
	mov	r1, #10
	bl	check_command
	subs	r5, r0, #0
	bne	.L16407
	ldrb	r2, [fp, #84]	@ zero_extendqisi2
	ldr	r0, [fp, #78]	@ unaligned
	ldr	r3, [r4]
	ldr	r1, [fp, #104]
	cmp	r2, #1
	rev	r0, r0
	bhi	.L16420
	eor	r2, r2, #1
	cmp	r0, #0
	moveq	r2, #0
	andne	r2, r2, #1
	cmp	r2, #0
	bne	.L16420
	ldr	r2, [r1, #16]
	str	r6, [sp, #28]
	sub	r2, r2, #1
	lsr	r0, r2, #16
	ubfx	ip, r2, #8, #8
	strb	r2, [r3, #3]
	lsr	r2, r0, #8
	strb	r2, [r3]
	strb	r0, [r3, #1]
	strb	ip, [r3, #2]
	ldr	r2, [r1, #44]
	lsr	r1, r2, #16
	ubfx	r0, r2, #8, #8
	strb	r1, [r3, #5]
	strb	r2, [r3, #7]
	lsr	r2, r1, #8
	strb	r0, [r3, #6]
	strb	r2, [r3, #4]
	b	.L16409
.L16400:
	ldr	r3, [fp, #82]	@ unaligned
	ldr	r2, [fp, #104]
	rev	r3, r3
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L16419
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L16419:
	mov	r2, #1
	movw	r0, #:lower16:.LC1234
	movt	r0, #:upper16:.LC1234
	movw	r3, #1022
	str	r2, [sp]
	mov	r1, #12
	mov	r2, #2
	b	.L16747
.L16505:
	ldrb	r2, [fp, #144]	@ zero_extendqisi2
	ldr	r3, [r4, #8]
	tst	r2, #1
	str	r3, [fp, #60]
	bne	.L16537
	b	.L16493
.L16761:
	ldr	r1, [r6, #84]
	movw	r2, #:lower16:.LC775
	sub	r0, r0, #216
	movt	r2, #:upper16:.LC775
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L16366
.L16346:
	mov	r0, r10
	str	r2, [sp, #28]
	bl	_raw_spin_lock_irq
	ldr	r2, [sp, #28]
	mov	r0, r10
	str	r2, [r4, #4]
	bl	_raw_spin_unlock_irq
	b	.L16331
.L16351:
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
	b	.L16352
.L16791:
	mov	r0, r6
	bl	__memzero
	b	.L16488
.L16774:
	ldr	r1, [r2, #84]
	movw	r2, #:lower16:.LC775
	sub	r0, r0, #216
	movt	r2, #:upper16:.LC775
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L16500
.L16728:
	strd	r8, [sp, #64]
	ldr	r4, [sp, #28]
	ldrd	r8, [sp, #48]
.L16741:
	mvn	r5, #3
	b	.L16407
.L16768:
	ldr	r1, [r6, #84]
	movw	r2, #:lower16:.LC1222
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC1222
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L16350
.L16767:
	ldr	r1, [r6, #84]
	movw	r2, #:lower16:.LC1221
	sub	r0, r0, #18
	ldr	ip, [r8]
	movt	r2, #:upper16:.LC1221
	add	r1, r1, #32
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L16349
.L16729:
	strd	r8, [sp, #40]
	mov	r5, r0
	ldr	r4, [sp, #28]
	ldr	r8, [sp, #48]
	ldr	r10, [sp, #52]
	ldr	r9, [sp, #56]
	ldr	r7, [sp, #60]
	b	.L16407
.L16775:
	cmp	r2, #22
	beq	.L16387
	cmp	r2, #23
	bne	.L16374
	movw	r0, #:lower16:.LC1252
	ldr	r1, .L16799+44
	movt	r0, #:upper16:.LC1252
	bl	printk
	movw	r1, #:lower16:.LC1253
	mov	r0, fp
	movt	r1, #:upper16:.LC1253
	bl	send_message
	b	.L16409
.L16793:
	ldr	r3, [sp, #84]
	lsr	r2, r3, #21
	lsl	r3, r3, #11
	str	r3, [sp, #40]
	str	r2, [sp, #44]
	mov	r2, #2352
	mov	r0, r2
	b	.L16473
.L16782:
	mov	r1, #1
	bl	vfs_fsync
	b	.L16449
.L16784:
	mov	r2, #8448
	ldr	r3, [r6, #40]
	strd	r8, [sp, #64]
	movt	r2, 5
	ldr	r4, [sp, #28]
	ldr	r0, [sp, #36]
	str	r2, [r6, #28]
	ldr	r2, [sp, #32]
	subs	r1, r3, #32
	ldrd	r8, [sp, #48]
	ldr	r5, [sp, #56]
	lsr	r2, r2, r3
	rsb	r3, r3, #32
	orr	r2, r2, r0, lsl r3
	movpl	r3, r0
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	str	r2, [r6, #32]
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	b	.L16407
.L16783:
	strd	r8, [sp, #64]
	ldr	r4, [sp, #28]
	ldrd	r8, [sp, #48]
	ldr	r5, [sp, #56]
	b	.L16407
.L16773:
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r3, [fp, #112]
	mov	r4, r0
	cmp	r3, #1
	bgt	.L16516
	ldr	r3, [fp, #56]
	str	r6, [fp, #112]
	ldr	r2, [fp, #168]
	str	r3, [fp, #116]
	cmp	r2, #0
	bne	.L16754
	b	.L16516
.L16779:
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	mov	r1, #36
	mov	r0, r6
	str	r1, [sp, #28]
	orr	r3, r3, #16
	strb	r3, [fp, #144]
	bl	__memzero
	mov	r2, #127
	mov	r3, #31
	strb	r2, [r6]
	strb	r3, [r6, #4]
	b	.L16409
.L16731:
	strd	r8, [sp, #40]
	ldr	r4, [sp, #28]
	ldr	r8, [sp, #48]
	ldr	r10, [sp, #52]
	ldr	r9, [sp, #56]
	ldr	r7, [sp, #60]
.L16487:
	mvn	r5, #4
	b	.L16407
.L16786:
	movw	r2, #:lower16:.LC1248
	mov	r3, r4
	str	r8, [sp]
	movt	r2, #:upper16:.LC1248
	add	r1, r6, #48
	sub	r0, r0, #18
	bl	__dynamic_dev_dbg
	b	.L16460
.L16781:
	ldr	r0, [r5]
	ubfx	r3, r3, #1, #1
	cmp	r0, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L16415
	mov	r1, #1
	bl	vfs_fsync
	b	.L16415
.L16484:
	ldr	r3, [fp, #136]
	mov	r2, #1
	adds	r8, r8, r0
	adc	r9, r9, r0, asr #31
	sub	r10, r10, r0
	sub	r3, r3, r0
	str	r3, [fp, #136]
	ldr	r3, [r6, #16]
	str	r0, [r3, #4]
	str	r2, [r6, #4]
	b	.L16486
.L16795:
	ldr	r0, .L16799+48
	strd	r8, [sp, #40]
	ldr	r4, [sp, #28]
	ldr	r8, [sp, #48]
	ldr	r10, [sp, #52]
	ldrh	r3, [r0]
	ldr	r9, [sp, #56]
	ldr	r7, [sp, #60]
	tst	r3, #4
	bne	.L16798
.L16483:
	ldr	r2, [r6, #16]
	mov	r1, #0
	mov	r3, #1
	str	r1, [r2, #4]
	str	r3, [r6, #4]
.L16535:
	ldr	r2, [sp, #40]
	mov	r1, #4352
	ldr	r0, [sp, #80]
	movt	r1, 3
	ldr	ip, [sp, #44]
	lsr	r2, r2, #9
	ldrb	r3, [r0, #24]	@ zero_extendqisi2
	str	r1, [r0, #28]
	orr	r2, r2, ip, lsl #23
	orr	r3, r3, #64
	strb	r3, [r0, #24]
	str	r2, [r0, #32]
.L16479:
	ldr	r3, [sp, #88]
	cmp	r3, #248
	bne	.L16487
	ldr	r3, [sp, #84]
	movw	r1, #4500
	mov	r2, #75
	mvn	ip, #0
	mov	r5, #0
	add	r0, r3, #150
	ldr	r3, [r6]
	mov	r6, #60
	sdiv	r1, r0, r1
	sdiv	lr, r0, r2
	str	r1, [sp, #28]
	mov	r1, r3
	mls	r2, r2, lr, r0
	add	r0, r3, #2064
	strb	r5, [r1], #1
	str	ip, [r3, #1]	@ unaligned
	str	ip, [r1, #4]	@ unaligned
	strh	ip, [r1, #8]	@ unaligned
	mov	ip, #1
	ldr	r1, [sp, #28]
	strb	r5, [r3, #11]
	mvn	r5, #4
	strb	ip, [r3, #15]
	sdiv	ip, lr, r6
	strb	r1, [r3, #12]
	mov	r1, #288
	strb	r2, [r3, #14]
	mls	ip, r6, ip, lr
	strb	ip, [r3, #13]
	bl	__memzero
	b	.L16407
.L16772:
	ldrb	r2, [fp, #144]	@ zero_extendqisi2
	mov	r1, #0
	mov	r3, #9472
	movt	r3, 5
	str	r1, [sp, #28]
	orr	r2, r2, #16
	strb	r2, [fp, #144]
	b	.L16431
.L16547:
	strd	r8, [sp, #40]
	ldr	r4, [sp, #28]
	ldr	r8, [sp, #48]
	ldr	r10, [sp, #52]
	ldr	r9, [sp, #56]
	ldr	r7, [sp, #60]
	b	.L16741
.L16794:
	strd	r8, [sp, #40]
	mov	r1, #8448
	mov	lr, r4
	ldr	r0, [sp, #80]
	movt	r1, 5
	ldr	r4, [sp, #28]
	ldr	r2, [sp, #40]
	ldr	ip, [sp, #44]
	ldrb	r3, [r0, #24]	@ zero_extendqisi2
	str	r1, [r0, #28]
	ldr	r8, [sp, #48]
	lsr	r2, r2, #9
	ldr	r10, [sp, #52]
	ldr	r9, [sp, #56]
	orr	r2, r2, ip, lsl #23
	orr	r3, r3, #64
	ldr	r7, [sp, #60]
	strb	r3, [r0, #24]
	str	r2, [r0, #32]
	ldr	r3, [r6, #16]
	mov	r2, #1
	str	lr, [r3, #4]
	str	r2, [r6, #4]
	b	.L16479
.L16730:
	strd	r8, [sp, #40]
	ldr	r4, [sp, #28]
	ldr	r8, [sp, #48]
	ldr	r10, [sp, #52]
	ldr	r9, [sp, #56]
	ldr	r7, [sp, #60]
	b	.L16479
.L16797:
	strd	r8, [sp, #40]
	ldr	r4, [sp, #28]
	ldr	r8, [sp, #48]
	ldr	r10, [sp, #52]
	ldr	r9, [sp, #56]
	ldr	r7, [sp, #60]
	b	.L16535
.L16796:
	movw	r2, #:lower16:.LC716
	mov	r3, r5
	str	r4, [sp]
	movt	r2, #:upper16:.LC716
	add	r1, r7, #48
	sub	r0, r0, #18
	bl	__dynamic_dev_dbg
	b	.L16485
.L16792:
	ldr	r2, [sp, #80]
	mov	r3, #8448
	mvn	r5, #21
	movt	r3, 5
	str	r3, [r2, #28]
	b	.L16407
.L16780:
	mov	r3, #9216
	mvn	r2, #21
	movt	r3, 5
	str	r2, [sp, #28]
	str	r3, [r5, #28]
	b	.L16409
.L16420:
	mov	r3, #9216
	mvn	r2, #21
	movt	r3, 5
	str	r2, [sp, #28]
	str	r3, [r1, #28]
	b	.L16409
.L16785:
	mov	r1, r0
	ldr	r0, .L16799+52
	strd	r8, [sp, #64]
	ldr	r4, [sp, #28]
	ldrd	r8, [sp, #48]
	ldrh	r3, [r0]
	tst	r3, #4
	beq	.L16458
	movw	r2, #:lower16:.LC1247
	mov	r3, r1
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC1247
	add	r1, r6, #48
	bl	__dynamic_dev_dbg
.L16458:
	mov	r2, #4352
	ldr	r3, [r6, #40]
	mov	r5, #0
	movt	r2, 3
	ldr	r0, [sp, #36]
	str	r2, [r6, #28]
	ldr	r2, [sp, #32]
	subs	r1, r3, #32
	lsr	r2, r2, r3
	rsb	r3, r3, #32
	orr	r2, r2, r0, lsl r3
	movpl	r3, r0
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	str	r2, [r6, #32]
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	b	.L16407
.L16433:
	mov	r3, #9216
	mvn	r2, #21
	movt	r3, 5
	str	r2, [sp, #28]
	str	r3, [r6, #28]
	b	.L16409
.L16790:
	lsr	r3, r6, #2
	mov	r2, #75
	ldr	r1, [sp, #28]
	mov	lr, #60
	add	r3, r3, #150
	movw	ip, #4500
	udiv	r0, r3, r2
	strb	r1, [r5, #4]
	mov	r1, #8
	udiv	ip, r3, ip
	str	r1, [sp, #28]
	udiv	r1, r0, lr
	mls	r3, r2, r0, r3
	strb	ip, [r5, #5]
	strb	r3, [r5, #7]
	mls	r1, lr, r1, r0
	strb	r1, [r5, #6]
	b	.L16409
.L16789:
	mov	r3, #8448
	mvn	r2, #21
	movt	r3, 5
	str	r2, [sp, #28]
	str	r3, [ip, #28]
	b	.L16409
.L16788:
	mov	r3, #9216
	mvn	r2, #21
	movt	r3, 5
	str	r2, [sp, #28]
	str	r3, [ip, #28]
	b	.L16409
.L16770:
	ldr	r0, .L16799+56
	ldrh	r3, [r0]
	tst	r3, #4
	beq	.L16439
	movw	r2, #:lower16:.LC1242
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC1242
	add	r1, r6, #48
	bl	__dynamic_dev_dbg
.L16439:
	ldr	r3, [sp, #24]
	str	r3, [r6, #28]
	mvn	r3, #21
	str	r3, [sp, #28]
	b	.L16409
.L16771:
	movw	r2, #:lower16:.LC804
	add	r1, r6, #48
	movt	r2, #:upper16:.LC804
	add	r0, r0, #96
	bl	__dynamic_dev_dbg
	b	.L16445
.L16787:
	strd	r8, [sp, #64]
	ldr	r4, [sp, #28]
	ldrd	r8, [sp, #48]
	b	.L16458
.L16387:
	movw	r0, #:lower16:.LC1252
	ldr	r1, .L16801
	movt	r0, #:upper16:.LC1252
	bl	printk
	movw	r1, #:lower16:.LC1254
	mov	r0, fp
	movt	r1, #:upper16:.LC1254
	bl	send_message
	b	.L16409
.L16778:
	mov	r0, #131072
	mvn	r3, #85
	mov	ip, #60
	movw	lr, #4500
	str	r0, [r6, #8]	@ unaligned
	strb	r1, [r6, #13]
	mov	r1, #75
	strb	r3, [r6, #14]
	ldr	r3, [r2, #16]
	mov	r2, #20
	strb	r5, [r6, #16]
	str	r2, [sp, #28]
	lsr	r3, r3, #2
	add	r3, r3, #150
	udiv	r0, r3, r1
	udiv	lr, r3, lr
	udiv	r2, r0, ip
	mls	r3, r1, r0, r3
	strb	lr, [r6, #17]
	strb	r3, [r6, #19]
	mls	r2, ip, r2, r0
	strb	r2, [r6, #18]
	b	.L16409
.L16777:
	ldr	r0, [sp, #12]
	mov	r1, #256
	cmp	r3, #0
	ldr	ip, [sp, #16]
	movt	r1, 20
	str	r0, [r6, #2]	@ unaligned
	mov	r0, #40960
	str	r1, [r6, #14]	@ unaligned
	mov	r1, #256
	str	r0, [r6, #6]	@ unaligned
	mov	r0, #65536
	str	ip, [r6, #26]	@ unaligned
	mov	ip, #161
	str	r0, [r6, #10]	@ unaligned
	str	ip, [r6, #18]	@ unaligned
	str	r1, [r6, #22]	@ unaligned
	strb	r5, [r6, #30]
	strb	r5, [r6, #31]
	strb	r5, [r6, #32]
	beq	.L16427
	strb	r5, [r6, #33]
	ldr	r3, [r2, #16]
	mov	r1, #1
	mov	r2, #75
	mov	ip, #60
	strb	r1, [r6, #37]
	movw	r0, #4500
	strb	r5, [r6, #39]
	add	r3, r3, #150
	strb	r1, [r6, #40]
	strb	lr, [r6, #46]
	mov	lr, #20
	sdiv	r1, r3, r2
	strb	lr, [r6, #38]
	sdiv	r0, r3, r0
	sdiv	lr, r1, ip
	mls	r3, r2, r1, r3
	strb	r0, [r6, #34]
	strb	r5, [r6, #41]
	strb	r5, [r6, #42]
	strb	r3, [r6, #36]
	strb	r5, [r6, #43]
	strb	r5, [r6, #44]
	strb	r5, [r6, #45]
	strb	r5, [r6, #47]
	mls	r1, ip, lr, r1
	strb	r1, [r6, #35]
.L16428:
	mov	r3, #46
	mov	r2, #0
	mov	r5, #48
	strb	r2, [r6]
	strb	r3, [r6, #1]
	b	.L16407
.L16776:
	mov	r3, #9216
	mvn	r1, #21
	movt	r3, 5
	str	r1, [sp, #28]
	str	r3, [r2, #28]
	b	.L16409
.L16798:
	ldr	r1, [sp, #80]
	movw	r2, #:lower16:.LC715
	mov	r3, r5
	movt	r2, #:upper16:.LC715
	sub	r0, r0, #18
	add	r1, r1, #48
	bl	__dynamic_dev_dbg
	b	.L16483
.L16427:
	ldr	r2, [r2, #16]
	ldr	r1, [sp, #20]
	str	r3, [r6, #41]	@ unaligned
	strb	r3, [r6, #45]
	str	r1, [r6, #37]	@ unaligned
	lsr	r1, r2, #16
	strb	r3, [r6, #46]
	strb	r3, [r6, #47]
	lsr	r3, r1, #8
	strb	r2, [r6, #36]
	ubfx	r2, r2, #8, #8
	strb	r3, [r6, #33]
	strb	r1, [r6, #34]
	strb	r2, [r6, #35]
	b	.L16428
.L16802:
	.align	2
.L16801:
	.word	.LANCHOR5+1112
	.fnend
	.size	fsg_main_thread, .-fsg_main_thread
	.align	2
	.global	usb_diag_open
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_open, %function
usb_diag_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r5, #:lower16:.LANCHOR0
	strd	r6, [sp, #8]
	movt	r5, #:upper16:.LANCHOR0
	mov	r6, r0
	ldr	r0, .L16817
	strd	r8, [sp, #16]
	mov	r7, r1
	str	r10, [sp, #24]
	mov	r8, r2
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5]
	mov	r9, r0
	cmp	r5, r4
	beq	.L16804
	sub	r4, r4, #4
	b	.L16806
.L16815:
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L16804
.L16806:
	mov	r0, r6
	ldr	r1, [r4]
	bl	strcmp
	cmp	r0, #0
	bne	.L16815
	mov	r1, r9
	ldr	r0, .L16817
	bl	_raw_spin_unlock_irqrestore
.L16808:
	str	r6, [r4]
	ldr	r0, .L16817
	str	r8, [r4, #12]
	str	r7, [r4, #16]
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:.LANCHOR0
	mov	r6, r0
	ldr	r1, [r5, #4]
	add	r0, r4, #4
	movt	r2, #:upper16:.LANCHOR0
	bl	__list_add
	mov	r1, r6
	ldr	r0, .L16817
	bl	_raw_spin_unlock_irqrestore
.L16803:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L16804:
	ldr	r0, .L16817
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L16816
	mov	r2, #24
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	bne	.L16808
	mvn	r4, #11
	b	.L16803
.L16816:
	mov	r4, #16
	b	.L16808
.L16818:
	.align	2
.L16817:
	.word	.LANCHOR1+3428
	.fnend
	.size	usb_diag_open, .-usb_diag_open
	.align	2
	.global	usb_diag_close
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_close, %function
usb_diag_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, #0
	ldr	r0, .L16827
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	str	r5, [r4, #12]
	add	r0, r4, #4
	str	r5, [r4, #16]
	bl	list_del
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r3, [r2, #3520]!
	cmp	r3, r2
	sub	r3, r3, #140
	beq	.L16821
.L16820:
	ldr	r1, [r3, #124]
	cmp	r1, r4
	beq	.L16826
	ldr	r3, [r3, #140]
	cmp	r3, r2
	sub	r3, r3, #140
	bne	.L16820
.L16821:
	mov	r0, r4
	bl	kfree
	ldrd	r4, [sp]
	mov	r1, r6
	ldr	r0, .L16827
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L16826:
	ldr	r1, [r3, #140]
	str	r5, [r3, #124]
	cmp	r1, r2
	sub	r3, r1, #140
	bne	.L16820
	b	.L16821
.L16828:
	.align	2
.L16827:
	.word	.LANCHOR1+3428
	.fnend
	.size	usb_diag_close, .-usb_diag_close
	.align	2
	.global	usb_diag_alloc_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_alloc_req, %function
usb_diag_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #20]
	.pad #12
	sub	sp, sp, #12
	cmp	r4, #0
	beq	.L16844
	add	fp, r4, #108
	mov	r5, r4
	mov	r0, fp
	mov	r10, r2
	mov	r8, r1
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r5, #100]!
	str	r0, [sp, #4]
	cmp	r6, r5
	ldr	r7, [r6]
	bne	.L16832
	b	.L16831
.L16845:
	mov	r7, r3
.L16832:
	mov	r0, r6
	sub	r6, r6, #36
	bl	list_del
	ldr	r0, [r4, #88]
	mov	r1, r6
	mov	r6, r7
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r5, r7
	ldr	r3, [r7]
	bne	.L16845
.L16831:
	mov	r7, r4
	ldr	r6, [r7, #92]!
	cmp	r6, r7
	ldr	r9, [r6]
	bne	.L16834
	b	.L16833
.L16846:
	mov	r9, r3
.L16834:
	mov	r0, r6
	sub	r6, r6, #36
	bl	list_del
	ldr	r0, [r4, #84]
	mov	r1, r6
	mov	r6, r9
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r9
	ldr	r3, [r9]
	bne	.L16846
.L16833:
	cmp	r8, #0
	ble	.L16835
	movw	r9, #:lower16:diag_write_complete
	mov	r6, #0
	movt	r9, #:upper16:diag_write_complete
	b	.L16837
.L16858:
	str	r9, [r3, #28]
	ldr	r1, [r4, #104]
	bl	__list_add
	cmp	r8, r6
	beq	.L16835
.L16837:
	ldr	r0, [r4, #88]
	mov	r1, #32
	add	r6, r6, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r5
	add	r0, r3, #36
	bne	.L16858
.L16836:
	ldr	r6, [r4, #100]
	cmp	r6, r5
	ldr	r8, [r6]
	bne	.L16841
	b	.L16840
.L16847:
	mov	r8, r3
.L16841:
	mov	r0, r6
	sub	r6, r6, #36
	bl	list_del
	ldr	r0, [r4, #88]
	mov	r1, r6
	mov	r6, r8
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r5, r8
	ldr	r3, [r8]
	bne	.L16847
.L16840:
	ldr	r5, [r4, #92]
	cmp	r5, r7
	ldr	r6, [r5]
	bne	.L16843
	b	.L16842
.L16848:
	mov	r6, r3
.L16843:
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del
	ldr	r0, [r4, #84]
	mov	r1, r5
	mov	r5, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r6
	ldr	r3, [r6]
	bne	.L16848
.L16842:
	mov	r0, fp
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #11
.L16829:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16835:
	cmp	r10, #0
	ble	.L16838
	movw	r8, #:lower16:diag_read_complete
	mov	r6, #0
	movt	r8, #:upper16:diag_read_complete
	b	.L16839
.L16859:
	str	r8, [r3, #28]
	ldr	r1, [r4, #96]
	bl	__list_add
	cmp	r10, r6
	beq	.L16838
.L16839:
	ldr	r0, [r4, #84]
	mov	r1, #32
	add	r6, r6, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r7
	add	r0, r3, #36
	bne	.L16859
	b	.L16836
.L16838:
	mov	r0, fp
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L16829
.L16844:
	mvn	r0, #18
	b	.L16829
	.fnend
	.size	usb_diag_alloc_req, .-usb_diag_alloc_req
	.align	2
	.global	usb_diag_read
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_read, %function
usb_diag_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #20]
	cmp	r4, #0
	beq	.L16864
	add	r8, r4, #108
	mov	r6, r1
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	mov	r10, r0
	cmp	r3, #0
	beq	.L16870
	ldr	r5, [r4, #92]
	add	r9, r4, #92
	cmp	r9, r5
	beq	.L16871
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del
	mov	r1, r10
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6]
	mov	r1, r7
	mov	r2, #32
	str	r3, [r5, #-36]
	ldr	r3, [r6, #4]
	str	r3, [r5, #-32]
	str	r6, [r5, #-4]
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L16872
.L16860:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L16872:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r2, r9
	ldr	r1, [r4, #96]
	mov	r0, r5
	bl	__list_add
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, .L16873
	ldr	r0, .L16873+4
	bl	___ratelimit
	cmp	r0, #0
	mvneq	r0, #4
	beq	.L16860
	ldr	r3, [r4, #116]
	movw	r1, #:lower16:.LC1259
	movt	r1, #:upper16:.LC1259
	ldr	r2, .L16873
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mvn	r0, #4
	b	.L16860
.L16864:
	mvn	r0, #18
	b	.L16860
.L16870:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L16860
.L16871:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #116]
	movw	r1, #:lower16:.LC1258
	movt	r1, #:upper16:.LC1258
	ldr	r2, .L16873
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mvn	r0, #10
	b	.L16860
.L16874:
	.align	2
.L16873:
	.word	.LANCHOR5+1164
	.word	.LANCHOR7-1288
	.fnend
	.size	usb_diag_read, .-usb_diag_read
	.align	2
	.global	usb_diag_write
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_write, %function
usb_diag_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #20]
	cmp	r4, #0
	beq	.L16881
	add	r8, r4, #108
	mov	r6, r1
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	mov	r10, r0
	cmp	r3, #0
	beq	.L16886
	ldr	r5, [r4, #100]
	add	r9, r4, #100
	cmp	r9, r5
	beq	.L16887
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del
	mov	r1, r10
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6]
	mov	r1, r7
	mov	r2, #32
	str	r3, [r5, #-36]
	ldr	r3, [r6, #4]
	str	r3, [r5, #-32]
	str	r6, [r5, #-4]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L16888
	ldr	r2, [r4, #128]
	ldr	r3, [r4, #136]
	add	r2, r2, #1
	add	r3, r3, #1
	str	r2, [r4, #128]
	str	r3, [r4, #136]
.L16875:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L16881:
	mvn	r0, #18
	b	.L16875
.L16886:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L16875
.L16888:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r2, r9
	ldr	r1, [r4, #104]
	mov	r0, r5
	bl	__list_add
	ldr	r1, .L16889
	ldr	r0, .L16889+4
	bl	___ratelimit
	cmp	r0, #0
	beq	.L16880
	ldr	r3, [r4, #116]
	movw	r1, #:lower16:.LC1259
	movt	r1, #:upper16:.LC1259
	ldr	r2, .L16889
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L16880:
	mov	r0, r8
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L16875
.L16887:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #116]
	movw	r1, #:lower16:.LC1258
	movt	r1, #:upper16:.LC1258
	ldr	r2, .L16889
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mvn	r0, #10
	b	.L16875
.L16890:
	.align	2
.L16889:
	.word	.LANCHOR5+1180
	.word	.LANCHOR7-1264
	.fnend
	.size	usb_diag_write, .-usb_diag_write
	.align	2
	.global	diag_function_add
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_add, %function
diag_function_add:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16914
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	mov	r6, r1
	str	r8, [sp, #16]
	mov	r8, r2
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L16910
.L16892:
	movw	r5, #:lower16:.LANCHOR0
	movt	r5, #:upper16:.LANCHOR0
	ldr	r4, [r5]
	cmp	r5, r4
	sub	r4, r4, #4
	bne	.L16895
	b	.L16893
.L16911:
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L16893
.L16895:
	mov	r0, r6
	ldr	r1, [r4]
	bl	strcmp
	cmp	r0, #0
	bne	.L16911
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L16912
	mov	r2, #148
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L16913
.L16897:
	movw	r3, #:lower16:.LANCHOR1
	add	r6, r5, #140
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, r6
	add	r2, r3, #3520
	ldr	r1, [r3, #3524]
	bl	__list_add
	str	r8, [r5, #120]
	ldr	r3, .L16914+4
	movw	ip, #:lower16:diag_function_bind
	str	r4, [r5, #124]
	ldr	r2, [r7, #24]
	movt	ip, #:upper16:diag_function_bind
	movw	r1, #:lower16:diag_function_unbind
	movw	r0, #:lower16:diag_function_set_alt
	movt	r1, #:upper16:diag_function_unbind
	movt	r0, #:upper16:diag_function_set_alt
	mov	lr, #0
	str	r2, [r5, #116]
	ldr	r4, [r4]
	movw	r2, #:lower16:diag_function_disable
	movt	r2, #:upper16:diag_function_disable
	str	r3, [r5, #16]
	add	r3, r3, #40
	str	r4, [r5]
	str	r3, [r5, #8]
	add	r3, r5, #100
	str	ip, [r5, #32]
	add	ip, r5, #92
	str	r1, [r5, #36]
	mov	r1, r5
	str	r0, [r5, #40]
	mov	r0, r7
	str	r2, [r5, #48]
	str	ip, [r5, #92]
	str	ip, [r5, #96]
	str	r3, [r5, #100]
	str	r3, [r5, #104]
	str	lr, [r5, #108]
	bl	usb_add_function
	subs	r4, r0, #0
	beq	.L16891
	ldr	r3, [r7, #24]
	movw	r1, #:lower16:.LC1261
	movt	r1, #:upper16:.LC1261
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	mov	r0, r6
	bl	list_del
	mov	r0, r5
	bl	kfree
.L16891:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L16893:
	ldr	r3, [r7, #24]
	movw	r1, #:lower16:.LC1262
	mvn	r4, #18
	movt	r1, #:upper16:.LC1262
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	b	.L16891
.L16912:
	mov	r5, #16
	b	.L16897
.L16910:
	ldr	r1, [r7, #24]
	movw	r2, #:lower16:.LC1260
	sub	r0, r3, #24
	movt	r2, #:upper16:.LC1260
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L16892
.L16913:
	mvn	r4, #11
	b	.L16891
.L16915:
	.align	2
.L16914:
	.word	.LANCHOR8-3360
	.word	.LANCHOR0+2916
	.fnend
	.size	diag_function_add, .-diag_function_add
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_bind_config, %function
diag_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r2, .L16938
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:__stack_chk_guard
	mov	r8, r1
	strd	r10, [sp, #24]
	movt	r9, #:upper16:__stack_chk_guard
	str	lr, [sp, #32]
	ldr	r3, [r3, #3308]
	.pad #44
	sub	sp, sp, #44
	ldr	r0, [r9]
	ldr	r1, [r1, #24]
	cmp	r3, r2
	sub	r5, r3, #520
	str	r0, [sp, #36]
	bne	.L16919
	b	.L16917
.L16935:
	ldr	r3, [r5, #520]
	cmp	r3, r2
	sub	r5, r3, #520
	beq	.L16917
.L16919:
	ldr	r3, [r3, #-512]
	cmp	r1, r3
	bne	.L16935
.L16917:
	mov	r2, #32
	ldr	r1, .L16938+4
	add	r0, sp, #4
	bl	strlcpy
	add	r0, sp, #4
	movw	r6, #:lower16:.LC459
	bl	strim
	movw	r10, #:lower16:usb_diag_update_pid_and_serial_num
	movt	r6, #:upper16:.LC459
	str	r0, [sp]
	movt	r10, #:upper16:usb_diag_update_pid_and_serial_num
	mov	r4, #0
	mvn	r7, #0
	b	.L16920
.L16923:
	mov	r1, r6
	mov	r0, sp
	bl	strsep
	cmp	r4, #0
	mov	fp, r0
	movne	r2, #0
	bne	.L16921
	ldr	r2, [r5, #44]
	cmp	r2, #0
	beq	.L16926
	ldr	r2, [r2]
	cmp	r2, #0
	moveq	r2, r10
.L16921:
	cmp	fp, #0
	beq	.L16922
	mov	r1, fp
	mov	r0, r8
	bl	diag_function_add
	subs	r7, r0, #0
	bne	.L16936
.L16922:
	ldr	r0, [sp]
	add	r4, r4, #1
.L16920:
	cmp	r0, #0
	bne	.L16923
	ldr	r2, [sp, #36]
	mov	r0, r7
	ldr	r3, [r9]
	cmp	r2, r3
	bne	.L16937
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16926:
	movw	r2, #:lower16:usb_diag_update_pid_and_serial_num
	movt	r2, #:upper16:usb_diag_update_pid_and_serial_num
	b	.L16921
.L16936:
	movw	r0, #:lower16:.LC1263
	mov	r2, fp
	ldr	r1, .L16938+8
	movt	r0, #:upper16:.LC1263
	bl	printk
	b	.L16922
.L16937:
	bl	__stack_chk_fail
.L16939:
	.align	2
.L16938:
	.word	.LANCHOR1+3308
	.word	.LANCHOR1+3544
	.word	.LANCHOR5+1196
	.fnend
	.size	diag_function_bind_config, .-diag_function_bind_config
	.align	2
	.global	send_sps_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	send_sps_req, %function
send_sps_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16957
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
	ldrh	r1, [r3, #-14]
	ldr	r2, [r6, #84]
	tst	r1, #4
	ldr	r7, [r2]
	bne	.L16953
.L16941:
	ldr	r3, [r4, #8]
	mov	r1, #32
	mov	r0, r4
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L16954
	movw	r0, #:lower16:.LC495
	ldr	r1, [r7, #28]
	movt	r0, #:upper16:.LC495
	bl	strcmp
	movw	r3, #:lower16:.LANCHOR1
	cmp	r0, #0
	movt	r3, #:upper16:.LANCHOR1
	moveq	r2, #32768
	ldr	r3, [r3, #3972]
	orreq	r3, r3, #1312
	bne	.L16955
.L16945:
	str	r2, [r5, #4]
	mov	r1, r5
	mov	r0, r4
	str	r3, [r5, #52]
	mov	r2, #32
	str	r5, [r6, #96]
	ldr	r3, [r4, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L16956
.L16940:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L16955:
	bic	r3, r3, #65536
	mov	r2, #0
	bic	r3, r3, #96
	orr	r3, r3, #65536
	orr	r3, r3, #32
	b	.L16945
.L16953:
	movw	r1, #:lower16:.LC1264
	sub	r0, r3, #32
	movt	r1, #:upper16:.LC1264
	bl	__dynamic_pr_debug
	b	.L16941
.L16956:
	movw	r0, #:lower16:.LC1266
	movt	r0, #:upper16:.LC1266
	bl	printk
	mvn	r0, #4
	b	.L16940
.L16954:
	movw	r0, #:lower16:.LC1265
	movt	r0, #:upper16:.LC1265
	bl	printk
	mvn	r0, #11
	b	.L16940
.L16958:
	.align	2
.L16957:
	.word	.LANCHOR8-3328
	.fnend
	.size	send_sps_req, .-send_sps_req
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_connect_work, %function
usb_qdss_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16999
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L16991
.L16960:
	ldr	r5, [r4, #-48]
	ldr	r6, .L16999+4
	ldr	r3, [r5]
	ldrh	r2, [r6, #-14]
	ldr	r3, [r3, #84]
	tst	r2, #4
	ldr	r7, [r3]
	bne	.L16992
.L16961:
	movw	r0, #:lower16:.LC495
	ldr	r1, [r7, #28]
	movt	r0, #:upper16:.LC495
	bl	strcmp
	cmp	r0, #0
	beq	.L16993
	ldr	r3, .L16999+8
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L16994
.L16964:
	ldr	r0, .L16999+12
	ldr	r2, [r4, #-72]
	ldr	r9, [r4, #-48]
	ldrh	r3, [r0, #-2]
	ldr	r6, [r2]
	tst	r3, #4
	bne	.L16995
.L16966:
	mov	r2, #1
	mov	r3, #0
	ldr	r0, [r6, #28]
	mov	r1, r2
	movw	r5, #:lower16:.LANCHOR1
	bl	usb_bam_get_connection_idx
	uxtb	r7, r0
	ldr	r1, .L16999+16
	movt	r5, #:upper16:.LANCHOR1
	mov	r0, r7
	bl	usb_bam_connect
	movw	r3, #:lower16:kmalloc_caches
	mov	r8, r0
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5, #3984]
	beq	.L16968
	mov	r2, #16
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5, #3984]
	beq	.L16996
.L16968:
	ldr	r0, [r6, #28]
	bl	usb_bam_set_qdss_core
	ldr	r3, .L16999+20
	mov	r1, #0
	mov	r0, r7
	ldr	r2, [r5, #3984]
	stm	sp, {r1, r2}
	add	r1, r3, #4
	sub	r2, r3, #4
	bl	get_bam2bam_connection_info
	movw	r0, #:lower16:.LC495
	ldr	r1, [r6, #28]
	movt	r0, #:upper16:.LC495
	bl	strcmp
	cmp	r0, #0
	beq	.L16997
.L16970:
	cmp	r8, #0
	bne	.L16969
	ldr	r5, [r4, #-32]
	cmp	r5, #0
	beq	.L16972
	sub	r3, r4, #44
	mov	r2, r8
	ldr	r0, [r4, #-28]
	mov	r1, r8
	blx	r5
.L16972:
	ldr	r0, [r4, #-48]
	bl	send_sps_req
	cmp	r0, #0
	bne	.L16998
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L16993:
	mov	r0, r5
	bl	msm_ep_config
	cmp	r0, #0
	beq	.L16964
	movw	r0, #:lower16:.LC1269
	movt	r0, #:upper16:.LC1269
	bl	printk
	movw	r0, #:lower16:.LC1270
	movt	r0, #:upper16:.LC1270
.L16990:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk
.L16997:
	ldr	r2, [r5, #3984]
	mov	r0, r9
	ldrb	r3, [r5, #3972]	@ zero_extendqisi2
	ldmib	r2, {r1, r2}
	bl	msm_data_fifo_config
	b	.L16970
.L16991:
	movw	r1, #:lower16:.LC1267
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC1267
	bl	__dynamic_pr_debug
	b	.L16960
.L16992:
	movw	r1, #:lower16:.LC1268
	sub	r0, r6, #32
	movt	r1, #:upper16:.LC1268
	bl	__dynamic_pr_debug
	b	.L16961
.L16995:
	movw	r1, #:lower16:.LC727
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC727
	bl	__dynamic_pr_debug
	b	.L16966
.L16994:
	movw	r1, #:lower16:.LC1271
	sub	r0, r6, #8
	movt	r1, #:upper16:.LC1271
	bl	__dynamic_pr_debug
	b	.L16964
.L16996:
	movw	r0, #:lower16:.LC1272
	movt	r0, #:upper16:.LC1272
	bl	printk
.L16969:
	movw	r0, #:lower16:.LC1273
	movt	r0, #:upper16:.LC1273
	b	.L16990
.L16998:
	movw	r0, #:lower16:.LC1274
	movt	r0, #:upper16:.LC1274
	b	.L16990
.L17000:
	.align	2
.L16999:
	.word	.LANCHOR8-3312
	.word	.LANCHOR8-3280
	.word	.LANCHOR8-3264
	.word	.LANCHOR4-772
	.word	.LANCHOR1+3972
	.word	.LANCHOR1+3976
	.fnend
	.size	usb_qdss_connect_work, .-usb_qdss_connect_work
	.align	2
	.global	init_data
	.syntax unified
	.arm
	.fpu softvfp
	.type	init_data, %function
init_data:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, .L17016
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0]
	ldrh	r2, [r5, #-14]
	ldr	r3, [r3, #84]
	tst	r2, #4
	ldr	r6, [r3]
	bne	.L17013
.L17002:
	movw	r0, #:lower16:.LC495
	ldr	r1, [r6, #28]
	movt	r0, #:upper16:.LC495
	bl	strcmp
	cmp	r0, #0
	beq	.L17014
	ldr	r3, .L17016+4
	ldrh	r4, [r3, #-6]
	ubfx	r4, r4, #2, #1
	cmp	r4, #0
	bne	.L17015
.L17001:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L17014:
	mov	r0, r4
	bl	msm_ep_config
	subs	r4, r0, #0
	beq	.L17001
	movw	r0, #:lower16:.LC1269
	movt	r0, #:upper16:.LC1269
	bl	printk
	b	.L17001
.L17013:
	movw	r1, #:lower16:.LC1268
	sub	r0, r5, #32
	movt	r1, #:upper16:.LC1268
	bl	__dynamic_pr_debug
	b	.L17002
.L17015:
	movw	r1, #:lower16:.LC1271
	sub	r0, r5, #8
	movt	r1, #:upper16:.LC1271
	mov	r4, #0
	bl	__dynamic_pr_debug
	b	.L17001
.L17017:
	.align	2
.L17016:
	.word	.LANCHOR8-3280
	.word	.LANCHOR8-3264
	.fnend
	.size	init_data, .-init_data
	.align	2
	.global	uninit_data
	.syntax unified
	.arm
	.fpu softvfp
	.type	uninit_data, %function
uninit_data:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC724
	str	r6, [sp, #8]
	movt	r0, #:upper16:.LC724
	str	lr, [sp, #12]
	ldr	r3, [r4]
	ldr	r3, [r3, #84]
	ldr	r5, [r3]
	bl	printk
	movw	r0, #:lower16:.LC495
	movt	r0, #:upper16:.LC495
	ldr	r1, [r5, #28]
	bl	strcmp
	cmp	r0, #0
	movne	r4, #0
	beq	.L17025
.L17018:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L17025:
	mov	r0, r4
	bl	msm_ep_unconfig
	subs	r4, r0, #0
	beq	.L17018
	movw	r0, #:lower16:.LC725
	movt	r0, #:upper16:.LC725
	bl	printk
	b	.L17018
	.fnend
	.size	uninit_data, .-uninit_data
	.align	2
	.global	usb_qdss_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_free_req, %function
usb_qdss_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L17041
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L17039
.L17027:
	ldr	r6, [r4, #20]
	cmp	r6, #0
	beq	.L17040
	mov	r7, r6
	ldr	r4, [r7, #148]!
	cmp	r4, r7
	ldr	r5, [r4]
	bne	.L17030
	b	.L17029
.L17033:
	mov	r5, r3
.L17030:
	mov	r0, r4
	sub	r4, r4, #36
	bl	list_del
	ldr	r0, [r6, #104]
	mov	r1, r4
	mov	r4, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r5
	ldr	r3, [r5]
	bne	.L17033
.L17029:
	mov	r7, r6
	ldr	r4, [r7, #140]!
	cmp	r7, r4
	ldr	r5, [r4]
	bne	.L17032
	b	.L17026
.L17034:
	mov	r5, r3
.L17032:
	mov	r0, r4
	sub	r4, r4, #36
	bl	list_del
	ldr	r0, [r6, #100]
	mov	r1, r4
	mov	r4, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r5
	ldr	r3, [r5]
	bne	.L17034
.L17026:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L17039:
	movw	r1, #:lower16:.LC1275
	sub	r0, r3, #32
	movt	r1, #:upper16:.LC1275
	bl	__dynamic_pr_debug
	b	.L17027
.L17040:
	movw	r0, #:lower16:.LC1276
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC1276
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L17042:
	.align	2
.L17041:
	.word	.LANCHOR8-3232
	.fnend
	.size	usb_qdss_free_req, .-usb_qdss_free_req
	.align	2
	.global	usb_qdss_alloc_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_alloc_req, %function
usb_qdss_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L17062
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r8, r2
	mov	r9, r0
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r3, #-6]
	ldr	r4, [r0, #20]
	tst	r2, #4
	bne	.L17058
.L17044:
	cmp	r8, #0
	cmpgt	r7, #0
	movle	r5, #1
	movgt	r5, #0
	cmp	r4, #0
	moveq	r5, #1
	cmp	r5, #0
	movweq	r6, #:lower16:qdss_ctrl_write_complete
	addeq	r10, r4, #148
	movteq	r6, #:upper16:qdss_ctrl_write_complete
	bne	.L17059
.L17045:
	ldr	r0, [r4, #104]
	mov	r1, #32
	add	r5, r5, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r10
	add	r0, r3, #36
	beq	.L17060
	str	r6, [r3, #28]
	ldr	r1, [r4, #152]
	bl	__list_add
	cmp	r7, r5
	bgt	.L17045
	movw	r6, #:lower16:qdss_ctrl_read_complete
	mov	r5, #0
	movt	r6, #:upper16:qdss_ctrl_read_complete
	add	r7, r4, #140
.L17050:
	ldr	r0, [r4, #100]
	mov	r1, #32
	add	r5, r5, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r7
	add	r0, r3, #36
	beq	.L17061
	str	r6, [r3, #28]
	ldr	r1, [r4, #144]
	bl	__list_add
	cmp	r8, r5
	bgt	.L17050
	mov	r0, #0
.L17043:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L17058:
	movw	r1, #:lower16:.LC1277
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC1277
	bl	__dynamic_pr_debug
	b	.L17044
.L17060:
	movw	r0, #:lower16:.LC1279
	movt	r0, #:upper16:.LC1279
	bl	printk
.L17048:
	mov	r0, r9
	bl	usb_qdss_free_req
	mvn	r0, #11
	b	.L17043
.L17061:
	movw	r0, #:lower16:.LC1280
	movt	r0, #:upper16:.LC1280
	bl	printk
	b	.L17048
.L17059:
	movw	r0, #:lower16:.LC1278
	movt	r0, #:upper16:.LC1278
	bl	printk
	mvn	r0, #18
	b	.L17043
.L17063:
	.align	2
.L17062:
	.word	.LANCHOR8-3216
	.fnend
	.size	usb_qdss_alloc_req, .-usb_qdss_alloc_req
	.align	2
	.global	usb_qdss_ctrl_read
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_ctrl_read, %function
usb_qdss_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L17081
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r3, #-14]
	ldr	r4, [r0, #20]
	tst	r2, #4
	bne	.L17077
.L17065:
	cmp	r4, #0
	beq	.L17069
	add	r8, r4, #188
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #92]
	mov	r10, r0
	cmp	r3, #0
	beq	.L17078
	ldr	r5, [r4, #140]
	add	r9, r4, #140
	cmp	r9, r5
	beq	.L17079
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del
	mov	r1, r10
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6]
	mov	r1, r7
	mov	r2, #32
	str	r3, [r5, #-36]
	ldr	r3, [r6, #4]
	str	r3, [r5, #-32]
	str	r6, [r5, #-4]
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L17080
.L17064:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L17077:
	movw	r1, #:lower16:.LC1281
	sub	r0, r3, #32
	movt	r1, #:upper16:.LC1281
	bl	__dynamic_pr_debug
	b	.L17065
.L17069:
	mvn	r0, #18
	b	.L17064
.L17078:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L17064
.L17080:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r2, r9
	ldr	r1, [r4, #144]
	mov	r0, r5
	bl	__list_add
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC1283
	movt	r0, #:upper16:.LC1283
	bl	printk
	mvn	r0, #4
	b	.L17064
.L17079:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC1282
	movt	r0, #:upper16:.LC1282
	bl	printk
	mvn	r0, #10
	b	.L17064
.L17082:
	.align	2
.L17081:
	.word	.LANCHOR8-3184
	.fnend
	.size	usb_qdss_ctrl_read, .-usb_qdss_ctrl_read
	.align	2
	.global	usb_qdss_ctrl_write
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_ctrl_write, %function
usb_qdss_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L17100
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r3, #-6]
	ldr	r4, [r0, #20]
	tst	r2, #4
	bne	.L17096
.L17084:
	cmp	r4, #0
	beq	.L17088
	add	r8, r4, #188
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #92]
	mov	r10, r0
	cmp	r3, #0
	beq	.L17097
	ldr	r5, [r4, #148]
	add	r9, r4, #148
	cmp	r9, r5
	beq	.L17098
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del
	mov	r1, r10
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6]
	mov	r1, r7
	mov	r2, #32
	str	r3, [r5, #-36]
	ldr	r3, [r6, #4]
	str	r3, [r5, #-32]
	str	r6, [r5, #-4]
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L17099
.L17083:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L17096:
	movw	r1, #:lower16:.LC1284
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC1284
	bl	__dynamic_pr_debug
	b	.L17084
.L17088:
	mvn	r0, #18
	b	.L17083
.L17097:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L17083
.L17099:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r2, r9
	ldr	r1, [r4, #152]
	mov	r0, r5
	bl	__list_add
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC1283
	movt	r0, #:upper16:.LC1283
	bl	printk
	mvn	r0, #4
	b	.L17083
.L17098:
	movw	r0, #:lower16:.LC1285
	movt	r0, #:upper16:.LC1285
	bl	printk
	mov	r0, r8
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #10
	b	.L17083
.L17101:
	.align	2
.L17100:
	.word	.LANCHOR8-3168
	.fnend
	.size	usb_qdss_ctrl_write, .-usb_qdss_ctrl_write
	.align	2
	.global	usb_qdss_open
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_open, %function
usb_qdss_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r10, [sp, #24]
	ldr	r10, .L17130
	mov	fp, r1
	strd	r8, [sp, #16]
	mov	r8, r2
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [r10, #-14]
	tst	r3, #4
	bne	.L17122
.L17103:
	cmp	r8, #0
	beq	.L17123
	movw	r7, #:lower16:.LANCHOR0
	ldr	r0, .L17130+4
	movt	r7, #:upper16:.LANCHOR0
	mov	r5, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #284]!
	mov	r9, r0
	cmp	r4, r5
	sub	r4, r4, #4
	bne	.L17108
	b	.L17106
.L17124:
	ldr	r4, [r4, #4]
	cmp	r4, r5
	sub	r4, r4, #4
	beq	.L17106
.L17108:
	mov	r0, r6
	ldr	r1, [r4]
	bl	strcmp
	cmp	r0, #0
	bne	.L17124
	ldr	r0, .L17130+8
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L17125
.L17115:
	sub	r5, r4, #112
	str	r5, [r4, #20]
.L17111:
	mov	r3, #1
	mov	r1, r9
	ldr	r0, .L17130+4
	str	r6, [r4]
	str	r8, [r4, #12]
	str	fp, [r4, #16]
	str	r3, [r4, #24]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #92]
	cmp	r3, #1
	beq	.L17126
.L17102:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L17106:
	ldr	r3, .L17130+12
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L17127
.L17113:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L17116
	mov	r2, #200
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L17128
.L17109:
	mov	r1, r9
	ldr	r0, .L17130+4
	bl	_raw_spin_unlock_irqrestore
	mov	r2, #0
	mov	r1, #10
	movw	r0, #:lower16:.LC84
	mov	r3, r2
	stm	sp, {r2, r6}
	movt	r1, 2
	movt	r0, #:upper16:.LC84
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r5, #196]
	beq	.L17129
	ldr	r0, .L17130+4
	add	r4, r5, #112
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	ldr	r2, .L17130+16
	add	r0, r5, #116
	ldr	r1, [r7, #288]
	bl	__list_add
	b	.L17111
.L17116:
	mov	r5, #16
	b	.L17109
.L17127:
	movw	r1, #:lower16:.LC1288
	sub	r0, r10, #8
	movt	r1, #:upper16:.LC1288
	bl	__dynamic_pr_debug
	b	.L17113
.L17125:
	movw	r1, #:lower16:.LC1289
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1289
	bl	__dynamic_pr_debug
	b	.L17115
.L17126:
	add	r2, r5, #156
	ldr	r1, [r5, #196]
	mov	r0, #4
	bl	queue_work_on
	b	.L17102
.L17129:
	mov	r0, r5
	mvn	r4, #11
	bl	kfree
	b	.L17102
.L17122:
	movw	r1, #:lower16:.LC1286
	sub	r0, r10, #32
	movt	r1, #:upper16:.LC1286
	bl	__dynamic_pr_debug
	b	.L17103
.L17128:
	mov	r1, r9
	ldr	r0, .L17130+4
	mvn	r4, #11
	bl	_raw_spin_unlock_irqrestore
	b	.L17102
.L17123:
	movw	r0, #:lower16:.LC1287
	mov	r4, r8
	movt	r0, #:upper16:.LC1287
	bl	printk
	b	.L17102
.L17131:
	.align	2
.L17130:
	.word	.LANCHOR8-3136
	.word	.LANCHOR1+3408
	.word	.LANCHOR8-3088
	.word	.LANCHOR8-3120
	.word	.LANCHOR0+284
	.fnend
	.size	usb_qdss_open, .-usb_qdss_open
	.align	2
	.global	usb_qdss_close
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_close, %function
usb_qdss_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L17141
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #20]
	ldrh	r1, [r3, #-6]
	ldr	r2, [r4, #84]
	tst	r1, #4
	ldr	r6, [r2]
	bne	.L17139
.L17133:
	ldr	r0, .L17141+4
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r1, [r4, #96]
	ldr	r0, [r4, #108]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r1, [r4, #96]
	ldr	r0, [r4, #108]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r3, #0
	mov	r1, r7
	ldr	r0, .L17141+4
	str	r3, [r4, #96]
	str	r3, [r5, #24]
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC495
	ldr	r1, [r6, #28]
	movt	r0, #:upper16:.LC495
	bl	strcmp
	cmp	r0, #0
	beq	.L17140
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L17140:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	msm_dwc3_restart_usb_session
.L17139:
	movw	r1, #:lower16:.LC1290
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC1290
	bl	__dynamic_pr_debug
	b	.L17133
.L17142:
	.align	2
.L17141:
	.word	.LANCHOR8-3072
	.word	.LANCHOR1+3408
	.fnend
	.size	usb_qdss_close, .-usb_qdss_close
	.align	2
	.global	rmnet_smd_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_bind_config, %function
rmnet_smd_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r0, [r3, #36]
	.pad #12
	sub	sp, sp, #12
	cmp	r0, #0
	beq	.L17151
	mov	r2, #456
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L17158
.L17144:
	movw	r2, #:lower16:.LC1040
	mov	r5, #0
	movt	r2, #:upper16:.LC1040
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	mov	r1, #10
	str	r5, [sp]
	movw	r0, #:lower16:.LC84
	str	r2, [sp, #4]
	mov	r3, r5
	movt	r1, 2
	movt	r0, #:upper16:.LC84
	str	r4, [r6, #3392]
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #388]
	beq	.L17153
	add	r1, r4, #396
	mov	r2, #65024
	str	r5, [r4, #164]
	movw	r0, #:lower16:rmnet_smd_connect_work
	movw	r3, #:lower16:rmnet_smd_disconnect_work
	str	r5, [r4, #168]
	add	ip, r4, #412
	movt	r3, #:upper16:rmnet_smd_disconnect_work
	str	r5, [r4, #172]
	movt	r2, 65535
	movt	r0, #:upper16:rmnet_smd_connect_work
	str	r1, [r4, #396]
	str	r1, [r4, #400]
	movw	r1, #:lower16:rmnet_control_rx_tlet
	add	r9, r4, #108
	str	r5, [r4, #308]
	movt	r1, #:upper16:rmnet_control_rx_tlet
	add	r8, r4, #116
	str	r5, [r4, #372]
	str	r2, [r4, #392]
	str	r0, [r4, #404]
	add	r0, r4, #284
	str	r2, [r4, #408]
	mov	r2, r4
	str	ip, [r4, #412]
	str	ip, [r4, #416]
	str	r3, [r4, #420]
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_control_tx_tlet
	mov	r2, r4
	add	r0, r4, #264
	movt	r1, #:upper16:rmnet_control_tx_tlet
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_data_rx_tlet
	mov	r2, r4
	add	r0, r4, #348
	movt	r1, #:upper16:rmnet_data_rx_tlet
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_data_tx_tlet
	mov	r2, r4
	add	r0, r4, #328
	movt	r1, #:upper16:rmnet_data_tx_tlet
	bl	tasklet_init
	movw	r1, #:lower16:.LC1178
	ldr	r2, .L17160
	add	r0, r4, #312
	movt	r1, #:upper16:.LC1178
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC1179
	ldr	r2, .L17160
	add	r0, r4, #376
	movt	r1, #:upper16:.LC1179
	bl	__init_waitqueue_head
	ldr	r3, .L17160+4
	movw	lr, #:lower16:rmnet_smd_ch_probe
	movw	ip, #:lower16:rmnet_smd_bind
	movt	lr, #:upper16:rmnet_smd_ch_probe
	movt	ip, #:upper16:rmnet_smd_bind
	movw	r1, #:lower16:.LC1180
	movw	r2, #:lower16:.LC873
	movt	r1, #:upper16:.LC1180
	str	r5, [r4, #204]
	movw	r5, #:lower16:rmnet_smd_unbind
	str	lr, [r4, #176]
	add	lr, r3, #8
	movt	r5, #:upper16:rmnet_smd_unbind
	str	ip, [r4, #32]
	movw	ip, #:lower16:rmnet_smd_disable
	movt	r2, #:upper16:.LC873
	stm	r4, {r1, r3}
	movt	ip, #:upper16:rmnet_smd_disable
	add	r3, r3, #28
	str	lr, [r4, #16]
	movw	lr, #:lower16:rmnet_smd_set_alt
	movw	r1, #:lower16:rmnet_smd_setup
	movt	lr, #:upper16:rmnet_smd_set_alt
	mov	r0, r7
	str	r3, [r4, #8]
	add	r7, r4, #124
	add	r3, r4, #156
	str	r5, [r4, #36]
	movt	r1, #:upper16:rmnet_smd_setup
	add	r5, r4, #132
	str	lr, [r4, #40]
	str	ip, [r4, #48]
	add	lr, r4, #140
	add	ip, r4, #148
	str	r1, [r4, #52]
	mov	r1, r4
	str	r9, [r4, #108]
	str	r9, [r4, #112]
	str	r8, [r4, #116]
	str	r8, [r4, #120]
	str	r7, [r4, #124]
	str	r7, [r4, #128]
	str	r5, [r4, #132]
	str	r5, [r4, #136]
	str	lr, [r4, #140]
	str	lr, [r4, #144]
	str	ip, [r4, #148]
	str	ip, [r4, #152]
	str	r3, [r4, #156]
	str	r3, [r4, #160]
	str	r2, [r4, #196]
	bl	usb_add_function
	subs	r5, r0, #0
	beq	.L17159
.L17147:
	ldr	r0, [r4, #388]
	bl	destroy_workqueue
.L17146:
	mov	r0, r4
	bl	kfree
.L17143:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L17159:
	movw	r0, #:lower16:.LC1181
	mov	r1, r5
	movt	r0, #:upper16:.LC1181
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r6, #3412]
	beq	.L17143
	cmn	r0, #4096
	bhi	.L17143
	ldr	ip, .L17160+8
	movw	r0, #:lower16:.LC250
	mov	r3, r4
	movt	r0, #:upper16:.LC250
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L17150
	cmn	r0, #4096
	bls	.L17143
.L17150:
	ldr	r0, [r6, #3412]
	bl	debugfs_remove
	mov	r3, #0
	str	r3, [r6, #3412]
	b	.L17143
.L17151:
	mov	r4, #16
	b	.L17144
.L17153:
	mvn	r5, #11
	b	.L17146
.L17158:
	mvn	r5, #11
	b	.L17143
.L17161:
	.align	2
.L17160:
	.word	.LANCHOR1+4008
	.word	.LANCHOR7-1600
	.word	.LANCHOR5+544
	.fnend
	.size	rmnet_smd_bind_config, .-rmnet_smd_bind_config
	.align	2
	.global	rmnet_sdio_function_add
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_function_add, %function
rmnet_sdio_function_add:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r0, [r3, #36]
	.pad #20
	sub	sp, sp, #20
	cmp	r0, #0
	beq	.L17176
	mov	r2, #376
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L17201
.L17163:
	movw	r2, #:lower16:.LC1040
	mov	r5, #0
	movt	r2, #:upper16:.LC1040
	mov	r1, #10
	movw	r0, #:lower16:.LC84
	mov	r3, r5
	str	r5, [sp]
	str	r2, [sp, #4]
	movt	r1, 2
	movt	r0, #:upper16:.LC84
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #200]
	beq	.L17178
	movw	r0, #:lower16:rmnet_sdio_disconnect_work
	add	r8, r4, #208
	str	r5, [r4, #188]
	add	lr, r4, #224
	movt	r0, #:upper16:rmnet_sdio_disconnect_work
	str	r5, [r4, #192]
	mov	r6, #65024
	movw	ip, #:lower16:rmnet_sdio_set_modem_cbits_w
	str	r5, [r4, #196]
	movw	r2, #:lower16:rmnet_sdio_control_rx_work
	movw	r3, #:lower16:rmnet_sdio_data_rx_work
	str	r8, [r4, #208]
	movw	r1, #:lower16:rmnet_open_sdio_work
	movt	r6, 65535
	str	r8, [r4, #212]
	movt	ip, #:upper16:rmnet_sdio_set_modem_cbits_w
	add	r8, r4, #240
	movt	r2, #:upper16:rmnet_sdio_control_rx_work
	movt	r3, #:upper16:rmnet_sdio_data_rx_work
	str	r6, [r4, #204]
	movt	r1, #:upper16:rmnet_open_sdio_work
	str	r0, [r4, #216]
	add	r0, r4, #340
	str	lr, [r4, #224]
	movw	r9, #:lower16:rmnet_sdio_bind
	str	lr, [r4, #228]
	add	lr, r4, #256
	movt	r9, #:upper16:rmnet_sdio_bind
	str	r6, [r4, #220]
	str	r2, [r4, #232]
	mov	r2, r5
	str	r6, [r4, #236]
	str	r8, [r4, #240]
	str	r8, [r4, #244]
	movw	r8, #:lower16:.LANCHOR4
	str	r3, [r4, #248]
	mov	r3, r5
	movt	r8, #:upper16:.LANCHOR4
	str	r6, [r4, #252]
	str	lr, [r4, #256]
	str	lr, [r4, #260]
	str	r1, [r4, #264]
	mov	r1, r5
	str	r6, [r4, #336]
	str	r0, [r4, #340]
	str	r0, [r4, #344]
	add	r0, r4, #268
	str	ip, [r4, #348]
	bl	init_timer_key
	movw	lr, #:lower16:rmnet_sdio_unbind
	movw	ip, #:lower16:rmnet_sdio_setup
	ldr	r2, .L17204
	movt	lr, #:upper16:rmnet_sdio_unbind
	movt	ip, #:upper16:rmnet_sdio_setup
	movw	r0, #:lower16:delayed_work_timer_fn
	movw	r1, #:lower16:rmnet_close_sdio_work
	movw	r3, #:lower16:.LC1041
	movt	r0, #:upper16:delayed_work_timer_fn
	str	lr, [r4, #36]
	movw	lr, #:lower16:rmnet_sdio_disable
	movt	r1, #:upper16:rmnet_close_sdio_work
	str	ip, [r4, #52]
	movt	lr, #:upper16:rmnet_sdio_disable
	movw	ip, #:lower16:rmnet_sdio_suspend
	movt	ip, #:upper16:rmnet_sdio_suspend
	str	r2, [r4, #4]
	movt	r3, #:upper16:.LC1041
	str	r9, [r4, #32]
	movw	r9, #:lower16:rmnet_sdio_set_alt
	str	lr, [r4, #48]
	add	lr, r2, #8
	movt	r9, #:upper16:rmnet_sdio_set_alt
	add	r2, r2, #28
	str	r3, [r4]
	str	ip, [r4, #56]
	add	ip, r4, #108
	str	r2, [r4, #8]
	add	r2, r4, #308
	str	lr, [r4, #16]
	add	lr, r4, #120
	str	r9, [r4, #40]
	add	r9, r4, #252
	str	ip, [r4, #108]
	str	ip, [r4, #112]
	add	ip, r4, #160
	str	lr, [r4, #120]
	str	lr, [r4, #124]
	add	lr, r4, #132
	str	ip, [r4, #160]
	str	ip, [r4, #164]
	add	ip, r4, #172
	str	lr, [r4, #132]
	str	lr, [r4, #136]
	add	lr, r4, #144
	str	r5, [r4, #152]
	str	ip, [r4, #172]
	str	ip, [r4, #176]
	movw	ip, #1386
	str	lr, [r4, #144]
	str	lr, [r4, #148]
	str	r5, [r4, #156]
	str	r5, [r4, #180]
	str	r5, [r4, #184]
	str	r0, [r4, #284]
	str	r9, [r4, #288]
	str	r6, [r4, #304]
	str	r2, [r4, #308]
	str	r2, [r4, #312]
	str	r1, [r4, #316]
	ldrh	r2, [r8, ip]
	tst	r2, #4
	bne	.L17202
.L17166:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L17169
	add	r6, r4, #72
	str	r7, [r4, #20]
	add	r2, r7, #36
	mov	r0, r6
	ldr	r1, [r7, #40]
	bl	__list_add
	ldr	r5, [r4, #32]
	cmp	r5, #0
	beq	.L17170
	mov	r1, r4
	mov	r0, r7
	blx	r5
	subs	r5, r0, #0
	blt	.L17203
.L17170:
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L17171
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L17171
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r7, #45]
.L17171:
	tst	r3, #2
	bne	.L17172
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L17172
	ldrb	r2, [r7, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r7, #45]
.L17172:
	tst	r3, #1
	bne	.L17173
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L17173
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r7, #45]
.L17173:
	cmp	r5, #0
	beq	.L17174
	movw	r3, #1410
	ldrh	r3, [r8, r3]
	tst	r3, #4
	beq	.L17168
	b	.L17167
.L17202:
	ldr	ip, [r7]
	movw	r2, #:lower16:.LC929
	ldr	r1, [r7, #24]
	movt	r2, #:upper16:.LC929
	ldr	r0, .L17204+4
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r7, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, r5
	bne	.L17166
.L17169:
	movw	r3, #1410
	mvn	r5, #21
	ldrh	r3, [r8, r3]
	tst	r3, #4
	beq	.L17168
.L17167:
	ldr	r1, [r7, #24]
	movw	r2, #:lower16:.LC930
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC930
	ldr	r0, .L17204+8
	ldr	r1, [r1]
	strd	r4, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L17168:
	ldr	r0, [r4, #200]
	bl	destroy_workqueue
.L17165:
	mov	r0, r4
	bl	kfree
.L17162:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L17174:
	movw	r0, #:lower16:.LC1042
	mov	r1, r5
	movt	r0, #:upper16:.LC1042
	bl	debugfs_create_dir
	cmn	r0, #4096
	mov	r2, r0
	str	r0, [r4, #352]
	bhi	.L17162
	ldr	ip, .L17204+12
	movw	r0, #:lower16:.LC250
	mov	r3, r4
	mov	r1, #292
	movt	r0, #:upper16:.LC250
	str	ip, [sp]
	bl	debugfs_create_file
	b	.L17162
.L17176:
	mov	r4, #16
	b	.L17163
.L17178:
	mvn	r5, #11
	b	.L17165
.L17203:
	mov	r0, r6
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L17170
.L17201:
	mvn	r5, #11
	b	.L17162
.L17205:
	.align	2
.L17204:
	.word	.LANCHOR0+2808
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.word	.LANCHOR5-348
	.fnend
	.size	rmnet_sdio_function_add, .-rmnet_sdio_function_add
	.align	2
	.global	frmnet_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_free_req, %function
frmnet_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	frmnet_free_req, .-frmnet_free_req
	.align	2
	.global	audio_source_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_bind_config, %function
audio_source_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mvn	r2, #0
	mov	r3, #0
	strd	r6, [sp, #8]
	mov	r5, r1
	mov	r7, r0
	str	r8, [sp, #16]
	mov	r0, r2
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	add	ip, sp, #8
	str	r2, [r1]
	str	r2, [r1, #4]
	mov	r2, r3
	mov	r1, r3
	str	ip, [sp]
	bl	snd_card_create
	subs	r4, r0, #0
	beq	.L17216
.L17208:
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L17216:
	ldr	r3, [r7, #24]
	add	r6, sp, #12
	movw	r1, #:lower16:.LC1174
	ldr	lr, [sp, #8]
	mov	r2, r4
	movt	r1, #:upper16:.LC1174
	ldr	ip, [r3]
	mov	r3, #1
	mov	r0, lr
	add	ip, ip, #32
	str	ip, [lr, #496]
	stm	sp, {r4, r6}
	movw	r6, #:lower16:.LANCHOR7
	bl	snd_pcm_new
	subs	r4, r0, #0
	movtne	r6, #:upper16:.LANCHOR7
	bne	.L17212
	ldr	r3, [sp, #12]
	movt	r6, #:upper16:.LANCHOR7
	movw	r1, #:lower16:.LC1175
	sub	r8, r6, #1808
	movt	r1, #:upper16:.LC1175
	sub	r8, r8, #8
	mov	r2, #80
	str	r4, [r3, #16]
	add	r0, r3, #88
	str	r8, [r3, #272]
	str	r3, [r6, #-1728]
	bl	strlcpy
	sub	r2, r6, #1648
	mov	r1, r4
	ldr	r0, [sp, #12]
	sub	r2, r2, #8
	bl	snd_pcm_set_ops
	mov	ip, #65536
	mov	r3, r4
	ldr	r0, [sp, #12]
	mov	r2, r4
	mov	r1, #2
	str	ip, [sp]
	bl	snd_pcm_lib_preallocate_pages_for_all
	ldr	r0, [sp, #8]
	movw	r1, #:lower16:.LC1176
	mov	r2, #16
	movt	r1, #:upper16:.LC1176
	add	r0, r0, #20
	bl	strlcpy
	ldr	r0, [sp, #8]
	mov	r2, #32
	add	r1, r0, #20
	add	r0, r0, #36
	bl	strlcpy
	ldr	r0, [sp, #8]
	movw	r1, #:lower16:.LC1177
	mov	r2, #80
	movt	r1, #:upper16:.LC1177
	add	r0, r0, #68
	bl	strlcpy
	ldr	r0, [sp, #8]
	bl	snd_card_register
	subs	r4, r0, #0
	bne	.L17212
	mov	r1, r8
	mov	r0, r7
	bl	usb_add_function
	subs	r4, r0, #0
	beq	.L17217
.L17210:
.L17211:
.L17212:
	ldr	r0, [r6, #-1732]
	bl	snd_card_free
	b	.L17208
.L17217:
	ldrd	r2, [sp, #8]
	ldr	r1, [r3]
	ldr	r1, [r1]
	str	r1, [r5]
	ldr	r3, [r3, #12]
	str	r3, [r5, #4]
	str	r2, [r6, #-1732]
	b	.L17208
	.fnend
	.size	audio_source_bind_config, .-audio_source_bind_config
	.align	2
	.global	gs_alloc_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_alloc_req, %function
gs_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r6, r1
	mov	r1, r2
	str	r8, [sp, #16]
	mov	r7, r0
	str	lr, [sp, #20]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L17218
	mov	r1, r5
	mov	r0, r6
	str	r6, [r4, #4]
	bl	__kmalloc
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L17224
.L17218:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L17224:
	ldr	r2, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L17218
	.fnend
	.size	gs_alloc_req, .-gs_alloc_req
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_start_io, %function
gs_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	adds	r2, r0, #44
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #32
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #4]
	.pad #12
	sub	sp, sp, #12
	str	r2, [sp]
	ldr	r5, [r3, #92]
	beq	.L17263
	ldr	r8, [r0, #44]
	rsb	r8, r8, #8
	cmp	r8, #0
	ble	.L17228
	movw	r10, #:lower16:kmalloc_caches
	movw	r9, #:lower16:gs_read_complete
	movt	r10, #:upper16:kmalloc_caches
	movt	r9, #:upper16:gs_read_complete
	mov	r7, #0
.L17227:
	ldr	r3, [r5, #8]
	mov	r1, #32
	mov	r0, r5
	ldr	r3, [r3, #8]
	blx	r3
	subs	fp, r0, #0
	mov	r2, #4096
	beq	.L17235
	str	r2, [fp, #4]
	ldr	r3, [r10, #48]
	mov	ip, #16
	mov	r1, #32
	subs	r0, r3, #0
	streq	ip, [fp]
	beq	.L17237
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [fp]
	bne	.L17237
.L17231:
	ldr	r3, [r5, #8]
	mov	r1, fp
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L17235:
	ldr	r3, [r4, #32]
	cmp	r6, r3
	beq	.L17238
.L17233:
	ldr	r3, [r4, #4]
.L17228:
	adds	r2, r4, #88
	add	r8, r4, #76
	ldr	r9, [r3, #88]
	str	r2, [sp, #4]
	beq	.L17265
	ldr	r10, [r4, #88]
	rsb	r10, r10, #8
	cmp	r10, #0
	movwgt	fp, #:lower16:gs_write_complete
	movgt	r7, #0
	movtgt	fp, #:upper16:gs_write_complete
	bgt	.L17241
	b	.L17242
.L17245:
	str	fp, [r3, #28]
	ldr	r1, [r4, #80]
	bl	__list_add
	ldr	r3, [r4, #88]
	cmp	r10, r7
	add	r3, r3, #1
	str	r3, [r4, #88]
	ble	.L17242
.L17241:
	mov	r2, #32
	mov	r1, #4096
	mov	r0, r9
	add	r7, r7, #1
	bl	gs_alloc_req
	subs	r3, r0, #0
	mov	r2, r8
	add	r0, r3, #36
	bne	.L17245
.L17243:
	ldr	r3, [r4, #76]
	cmp	r8, r3
	ldreq	r8, [sp]
	beq	.L17246
.L17242:
	mov	r7, #0
	mov	r0, r4
	str	r7, [r4, #56]
	bl	gs_start_rx
	ldr	r3, [r4, #4]
	mov	r2, r0
	cmp	r3, r7
	beq	.L17251
	ldr	r0, [r4, #8]
	cmp	r0, r7
	beq	.L17251
	cmp	r2, #0
	beq	.L17253
	bl	tty_wakeup
	mov	r0, r7
.L17225:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L17237:
	str	r9, [fp, #28]
	add	r0, fp, #36
	mov	r2, r6
	ldr	r1, [r4, #36]
	add	r7, r7, #1
	bl	__list_add
	ldr	r3, [r4, #44]
	cmp	r8, r7
	add	r3, r3, #1
	str	r3, [r4, #44]
	bgt	.L17227
	b	.L17233
.L17263:
	movw	r9, #:lower16:kmalloc_caches
	movw	r8, #:lower16:gs_read_complete
	movt	r9, #:upper16:kmalloc_caches
	movt	r8, #:upper16:gs_read_complete
	adds	r7, r0, #44
	b	.L17226
.L17293:
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [fp]
	beq	.L17231
.L17232:
	str	r8, [fp, #28]
	add	r0, fp, #36
	add	r7, r7, #1
	mov	r2, r6
	ldr	r1, [r4, #36]
	bl	__list_add
	cmp	r7, #8
	beq	.L17233
.L17226:
	ldr	r3, [r5, #8]
	mov	r1, #32
	mov	r0, r5
	ldr	r3, [r3, #8]
	blx	r3
	subs	fp, r0, #0
	mov	r2, #4096
	beq	.L17235
	str	r2, [fp, #4]
	ldr	r3, [r9, #48]
	mov	r1, #32
	mov	ip, #16
	subs	r0, r3, #0
	bne	.L17293
	str	ip, [fp]
	b	.L17232
.L17247:
	ldr	r7, [r4, #32]
	cmp	r6, r7
	mov	r0, r7
	sub	r9, r7, #36
	beq	.L17238
	bl	list_del
	ldr	r0, [r7, #-36]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r9
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #44]
	sub	r3, r3, #1
	str	r3, [r4, #44]
.L17246:
	cmp	r8, #0
	beq	.L17249
	b	.L17247
.L17294:
	bl	list_del
	ldr	r0, [r7, #-36]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r8
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L17249:
	ldr	r7, [r4, #32]
	cmp	r6, r7
	mov	r0, r7
	sub	r8, r7, #36
	bne	.L17294
.L17238:
	mvn	r0, #11
	b	.L17225
.L17265:
	movw	r10, #:lower16:gs_write_complete
	adds	r7, r4, #88
	movt	r10, #:upper16:gs_write_complete
	b	.L17240
.L17295:
	str	r10, [r3, #28]
	ldr	r1, [r4, #80]
	bl	__list_add
	cmp	r7, #8
	beq	.L17242
.L17240:
	mov	r2, #32
	mov	r1, #4096
	mov	r0, r9
	add	r7, r7, #1
	bl	gs_alloc_req
	subs	r3, r0, #0
	mov	r2, r8
	add	r0, r3, #36
	bne	.L17295
	b	.L17243
.L17254:
	ldr	r7, [r4, #32]
	cmp	r6, r7
	mov	r0, r7
	sub	r9, r7, #36
	beq	.L17255
	bl	list_del
	ldr	r0, [r7, #-36]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r9
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #44]
	sub	r3, r3, #1
	str	r3, [r4, #44]
.L17253:
	ldr	r3, [sp]
	cmp	r3, #0
	beq	.L17256
	b	.L17254
.L17296:
	bl	list_del
	ldr	r0, [r7, #-36]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r9
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L17256:
	ldr	r7, [r4, #32]
	cmp	r6, r7
	mov	r0, r7
	sub	r9, r7, #36
	bne	.L17296
.L17255:
	ldr	r3, [r4, #4]
	ldr	r6, [r3, #88]
.L17258:
	ldr	r3, [sp, #4]
	cmp	r3, #0
	beq	.L17261
	b	.L17259
.L17297:
	bl	list_del
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L17261:
	ldr	r5, [r4, #76]
	cmp	r8, r5
	mov	r0, r5
	sub	r7, r5, #36
	bne	.L17297
.L17260:
	mvn	r0, #4
	b	.L17225
.L17259:
	ldr	r5, [r4, #76]
	cmp	r8, r5
	mov	r0, r5
	sub	r7, r5, #36
	beq	.L17260
	bl	list_del
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #88]
	sub	r3, r3, #1
	str	r3, [r4, #88]
	b	.L17258
.L17251:
	movw	r0, #:lower16:.LC1291
	ldr	r1, .L17298
	movt	r0, #:upper16:.LC1291
	bl	printk
	mvn	r0, #4
	b	.L17225
.L17299:
	.align	2
.L17298:
	.word	.LANCHOR5+1224
	.fnend
	.size	gs_start_io, .-gs_start_io
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_open, %function
gs_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	ldr	r6, .L17334
	mov	r7, r0
	str	r8, [sp, #16]
	mov	r8, r1
	str	lr, [sp, #20]
	ldr	r5, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	add	r3, r6, #20
	add	r5, r5, r5, lsl #1
	lsl	r5, r5, #3
	add	r6, r6, r5
	add	r5, r5, r3
.L17307:
	mov	r0, r6
	bl	mutex_lock
	ldr	r4, [r5]
	subs	r0, r4, #0
	beq	.L17328
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L17303
	add	r3, r3, #1
	mov	r0, r4
	mov	r5, #0
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irq
	mov	r0, r6
	bl	mutex_unlock
.L17300:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L17328:
	mov	r0, r6
	mvn	r5, #18
	bl	mutex_unlock
	b	.L17300
.L17303:
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	mov	r0, r4
	cmp	r3, #0
	bne	.L17304
	mov	r3, #1
	strb	r3, [r4, #16]
	bl	_raw_spin_unlock_irq
	mov	r0, r6
	bl	mutex_unlock
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L17329
.L17306:
	str	r4, [r7, #272]
	ldr	r5, [r4, #4]
	mov	r3, #0
	mov	r2, #1
	str	r7, [r4, #8]
	str	r2, [r4, #12]
	cmp	r5, r3
	strb	r3, [r4, #16]
	beq	.L17314
	ldr	r0, .L17334+4
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L17330
.L17315:
	mov	r0, r4
	bl	gs_start_io
	ldr	r3, [r5, #116]
	cmp	r3, #0
	beq	.L17314
	mov	r0, r5
	blx	r3
.L17314:
	ldr	r0, .L17334+8
	ldrh	r5, [r0, #-14]
	ubfx	r5, r5, #2, #1
	cmp	r5, #0
	bne	.L17331
.L17312:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	b	.L17300
.L17304:
	bl	_raw_spin_unlock_irq
	mov	r0, r6
	bl	mutex_unlock
	mov	r0, #1
	bl	msleep
	b	.L17307
.L17329:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #52]
	cmp	r0, #0
	beq	.L17332
	mov	r2, #8192
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4, #96]
	beq	.L17310
.L17309:
	mov	r2, #8192
	mov	r0, r4
	str	r2, [r4, #92]
	str	r3, [r4, #100]
	str	r3, [r4, #104]
	bl	_raw_spin_lock_irq
	b	.L17306
.L17331:
	movw	r1, #:lower16:.LC1294
	ldrb	r2, [r4, #17]	@ zero_extendqisi2
	mov	r3, r7
	movt	r1, #:upper16:.LC1294
	str	r8, [sp]
	sub	r0, r0, #32
	mov	r5, #0
	bl	__dynamic_pr_debug
	b	.L17312
.L17332:
	mov	r2, #16
	mov	r3, r2
	str	r2, [r4, #96]
	b	.L17309
.L17330:
	movw	r1, #:lower16:.LC1293
	ldrb	r2, [r4, #17]	@ zero_extendqisi2
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1293
	bl	__dynamic_pr_debug
	b	.L17315
.L17310:
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r0, .L17334+12
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L17333
.L17311:
	mov	r3, #0
	mvn	r5, #11
	strb	r3, [r4, #16]
	b	.L17312
.L17333:
	movw	r1, #:lower16:.LC1292
	ldrb	r2, [r4, #17]	@ zero_extendqisi2
	mov	r3, r7
	movt	r1, #:upper16:.LC1292
	str	r8, [sp]
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L17311
.L17335:
	.align	2
.L17334:
	.word	.LANCHOR1+3768
	.word	.LANCHOR8-3024
	.word	.LANCHOR8-2992
	.word	.LANCHOR8-3040
	.fnend
	.size	gs_open, .-gs_open
	.align	2
	.global	gs_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_free_req, %function
gs_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	gs_free_req, .-gs_free_req
	.align	2
	.global	gserial_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_setup, %function
gserial_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 88
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:__stack_chk_guard
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:__stack_chk_guard
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	sub	fp, r1, #1
	str	lr, [sp, #32]
	.pad #100
	sub	sp, sp, #100
	cmp	fp, #7
	str	r3, [sp, #20]
	ldr	r3, [r3]
	str	r0, [sp, #28]
	str	r3, [sp, #92]
	bhi	.L17355
	mov	r10, r1
	mov	r1, #0
	mov	r0, r10
	movw	r9, #:lower16:.LANCHOR1
	bl	__alloc_tty_driver
	movt	r9, #:upper16:.LANCHOR1
	cmp	r0, #0
	str	r0, [r9, #3764]
	beq	.L17356
	movw	r2, #:lower16:.LC966
	movw	r3, #:lower16:tty_std_termios
	ldr	r1, .L17383
	movt	r2, #:upper16:.LC966
	movt	r3, #:upper16:tty_std_termios
	ldrd	r6, [r3]
	mov	lr, #3
	str	r2, [r0, #72]
	ldrd	r4, [r3, #32]
	movw	r2, #:lower16:.LC967
	movt	r2, #:upper16:.LC967
	movt	lr, 1
	str	r2, [r0, #76]
	strd	r4, [sp, #8]
	ldrd	r4, [r3, #8]
	str	lr, [r0, #96]
	mov	lr, #14
	strd	r6, [r0, #100]
	ldrd	r6, [r3, #16]
	ldrd	r2, [r3, #24]
	strd	r4, [r0, #108]
	ldrd	r4, [sp, #8]
	strd	r6, [r0, #116]
	movw	r6, #3261
	str	lr, [r0, #144]
	strd	r2, [r0, #124]
	mov	r3, #9600
	str	r6, [r0, #108]
	strd	r4, [r0, #132]
	mov	r5, #0
	str	r3, [r0, #136]
	str	r3, [r0, #140]
	bl	tty_set_operations
	movw	r2, #:lower16:.LC968
	mov	r1, #10
	str	r5, [sp]
	movt	r2, #:upper16:.LC968
	movw	r0, #:lower16:.LC84
	mov	r3, r5
	movt	r1, 2
	str	r2, [sp, #4]
	movt	r0, #:upper16:.LC84
	mov	r2, #1
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r9, #3388]
	beq	.L17357
	ldr	r3, .L17383+4
	movw	r2, #:lower16:.LC969
	movw	r1, #:lower16:.LC970
	movt	r2, #:upper16:.LC969
	movt	r1, #:upper16:.LC970
	movw	fp, #:lower16:kmalloc_caches
	movt	fp, #:upper16:kmalloc_caches
	str	r2, [sp, #8]
	str	r1, [sp, #16]
	add	r8, r3, #236
	mov	r6, r3
	str	r3, [sp, #24]
	mov	r1, r2
	str	r9, [sp, #32]
	str	r3, [sp, #36]
	b	.L17343
.L17378:
	mov	r2, #144
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L17376
.L17341:
	mov	r9, #0
	mov	r0, r4
	ldr	r1, [sp, #16]
	mov	r2, r8
	add	r7, r5, #1
	str	r9, [r0], #20
	add	r6, r6, #24
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC971
	mov	r2, r8
	add	r0, r4, #108
	movt	r1, #:upper16:.LC971
	bl	__init_waitqueue_head
	mov	r1, #65024
	add	lr, r4, #32
	strb	r5, [r4, #17]
	movt	r1, 65535
	movw	r2, #:lower16:gs_rx_push
	add	r0, r4, #64
	add	ip, r4, #48
	str	lr, [r4, #32]
	str	lr, [r4, #36]
	movt	r2, #:upper16:gs_rx_push
	mov	lr, #8
	strb	r9, [r4, #126]
	cmp	r10, r7
	mov	r9, #9600
	str	r1, [r4, #60]
	add	r1, r4, #76
	str	ip, [r4, #48]
	str	ip, [r4, #52]
	str	r0, [r4, #64]
	str	r0, [r4, #68]
	str	r2, [r4, #72]
	str	r1, [r4, #76]
	str	r1, [r4, #80]
	str	r9, [r4, #120]
	strh	lr, [r4, #124]	@ movhi
	str	r4, [r6, #-4]
	beq	.L17377
	ldr	r1, [sp, #8]
	mov	r5, r7
.L17343:
	mov	r0, r6
	mov	r2, r8
	bl	__mutex_init
	ldr	r0, [fp, #8]
	cmp	r0, #0
	bne	.L17378
	mov	r4, #16
	b	.L17341
.L17377:
	ldr	r9, [sp, #32]
	ldr	r0, [r9, #3764]
	str	r10, [r9, #3760]
	bl	tty_register_driver
	subs	r8, r0, #0
	bne	.L17379
	ldr	r3, [sp, #28]
	movw	r6, #:lower16:.LC973
	mov	r4, r8
	ldr	r10, .L17383+8
	movt	r6, #:upper16:.LC973
	add	r5, r3, #32
.L17346:
	mov	r2, r5
	mov	r1, r4
	ldr	r0, [r9, #3764]
	bl	tty_register_device
	cmn	r0, #4096
	bhi	.L17380
.L17345:
	add	r4, r4, #1
	cmp	r4, r7
	bne	.L17346
	ldr	r10, .L17383+12
	movw	r6, #:lower16:.LC974
	mov	r4, #0
	ldr	r5, [sp, #36]
	movt	r6, #:upper16:.LC974
	str	r8, [sp, #8]
	add	fp, r10, #108
.L17349:
	mov	r2, r6
	mov	r3, r4
	ldr	r8, [r5, #20]
	mov	r1, #48
	add	r0, sp, #44
	bl	snprintf
	add	r0, sp, #44
	mov	r1, #0
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r9, #3960]
	beq	.L17348
	cmn	r0, #4096
	bhi	.L17348
	movw	r0, #:lower16:.LC975
	mov	r3, r8
	str	r10, [sp]
	mov	r1, #292
	movt	r0, #:upper16:.LC975
	bl	debugfs_create_file
	movw	r0, #:lower16:.LC976
	ldr	r2, [r9, #3960]
	mov	r3, r8
	movt	r0, #:upper16:.LC976
	mov	r1, #420
	str	fp, [sp]
	bl	debugfs_create_file
.L17348:
	add	r4, r4, #1
	add	r5, r5, #24
	cmp	r4, r7
	bne	.L17349
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #1938
	ldr	r8, [sp, #8]
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L17381
.L17338:
	ldr	r3, [sp, #20]
	mov	r0, r8
	ldr	r2, [sp, #92]
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L17382
	add	sp, sp, #100
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L17357:
	ldr	r3, .L17383+4
	mvn	r8, #11
	str	r3, [sp, #24]
.L17340:
	add	r5, fp, fp, lsl #1
	ldr	r4, .L17383+16
	add	r5, r3, r5, lsl #3
.L17351:
	ldr	r0, [r5, #20]
	sub	r5, r5, #24
	bl	kfree
	cmp	r4, r5
	bne	.L17351
.L17352:
	ldr	r0, [r9, #3388]
	cmp	r0, #0
	beq	.L17353
	bl	destroy_workqueue
.L17353:
	ldr	r0, [r9, #3764]
	bl	put_tty_driver
	mov	r3, #0
	str	r3, [r9, #3764]
	b	.L17338
.L17380:
	mov	r3, r0
	mov	r2, r4
	mov	r1, r10
	mov	r0, r6
	bl	printk
	b	.L17345
.L17355:
	mvn	r8, #21
	b	.L17338
.L17381:
	movw	r3, #:lower16:.LC978
	cmp	r4, #1
	ldr	r2, .L17383+8
	movt	r3, #:upper16:.LC978
	movw	ip, #:lower16:.LC873
	movt	ip, #:upper16:.LC873
	movne	ip, r3
	movw	r1, #:lower16:.LC977
	mov	r3, r4
	movt	r1, #:upper16:.LC977
	str	ip, [sp]
	add	r0, r0, #1920
	bl	__dynamic_pr_debug
	b	.L17338
.L17376:
.L17342:
	cmp	r5, #0
	mvn	r8, #11
	ldr	r9, [sp, #32]
	sub	fp, r5, #1
	beq	.L17352
	ldr	r3, [sp, #24]
	b	.L17340
.L17356:
	mvn	r8, #11
	b	.L17338
.L17382:
	bl	__stack_chk_fail
.L17379:
	movw	r0, #:lower16:.LC972
	mov	r2, r8
	ldr	r1, .L17383+8
	movt	r0, #:upper16:.LC972
	mov	fp, r5
	bl	printk
	ldr	r3, [sp, #24]
	b	.L17340
.L17384:
	.align	2
.L17383:
	.word	.LANCHOR5-1160
	.word	.LANCHOR1+3768
	.word	.LANCHOR5-1036
	.word	.LANCHOR5-1020
	.word	.LANCHOR1+3744
	.fnend
	.size	gserial_setup, .-gserial_setup
	.align	2
	.global	gserial_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_cleanup, %function
gserial_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #3764]
	cmp	r3, #0
	beq	.L17385
	b	gserial_cleanup.part.81
.L17385:
	bx	lr
	.fnend
	.size	gserial_cleanup, .-gserial_cleanup
	.align	2
	.global	gserial_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_connect, %function
gserial_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r3, #3764]
	cmp	r2, #0
	beq	.L17396
	ldr	r2, [r3, #3760]
	cmp	r1, r2
	bcs	.L17396
	ldr	r2, [r0, #88]
	add	r1, r1, r1, lsl #1
	mov	r4, r0
	add	r3, r3, r1, lsl #3
	ldr	ip, [r2, #8]
	mov	r0, r2
	ldr	r6, [r3, #3788]
	ldr	r1, [r2, #28]
	ldr	r3, [ip]
	blx	r3
	subs	r5, r0, #0
	blt	.L17387
	ldr	r3, [r4, #88]
	str	r6, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bge	.L17405
.L17389:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #88]
	mov	r2, #0
	str	r2, [r3]
.L17387:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L17405:
	ldr	r3, [r4, #92]
	mov	r0, r6
	str	r6, [r3]
	bl	_raw_spin_lock_irqsave
	str	r6, [r4, #84]
	ldr	r1, [r6, #120]
	mov	r7, r0
	str	r4, [r6, #4]
	str	r1, [r4, #96]
	ldrh	r1, [r6, #124]
	strh	r1, [r4, #100]	@ movhi
	ldrb	r2, [r6, #126]	@ zero_extendqisi2
	strb	r2, [r4, #102]
	ldr	r3, [r6, #12]
	cmp	r3, #0
	beq	.L17390
	ldr	r0, .L17407
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L17406
.L17391:
	mov	r0, r6
	bl	gs_start_io
	ldr	r3, [r4, #116]
	cmp	r3, #0
	beq	.L17393
.L17404:
	mov	r0, r4
	blx	r3
.L17393:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L17387
.L17390:
	ldr	r3, [r4, #120]
	cmp	r3, #0
	bne	.L17404
	b	.L17393
.L17396:
	mvn	r5, #5
	b	.L17387
.L17406:
	movw	r1, #:lower16:.LC1295
	ldrb	r2, [r6, #17]	@ zero_extendqisi2
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1295
	bl	__dynamic_pr_debug
	b	.L17391
.L17408:
	.align	2
.L17407:
	.word	.LANCHOR8-2976
	.fnend
	.size	gserial_connect, .-gserial_connect
	.align	2
	.global	gserial_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_disconnect, %function
gserial_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #84]
	cmp	r4, #0
	beq	.L17409
	mov	r8, r0
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	ldr	r0, [r8, #96]
	mov	r2, #0
	str	r0, [r4, #120]
	ldrh	r0, [r8, #100]
	strh	r0, [r4, #124]	@ movhi
	ldrb	r1, [r8, #102]	@ zero_extendqisi2
	str	r2, [r4, #4]
	strb	r1, [r4, #126]
	str	r2, [r8, #84]
	ldr	r3, [r4, #12]
	cmp	r3, r2
	bne	.L17411
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L17412
.L17411:
	mov	r2, #1
	add	r0, r4, #108
	mov	r3, #0
	mov	r1, r2
	bl	__wake_up
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L17412
	bl	tty_hangup
.L17412:
	mov	r1, r5
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r8, #92]
	mov	r5, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r8, #92]
	str	r5, [r3]
	ldr	r0, [r8, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r8, #88]
	mov	r0, r4
	str	r5, [r3]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r7, r0
	cmp	r3, r5
	bne	.L17414
	ldrb	r5, [r4, #16]	@ zero_extendqisi2
	cmp	r5, #0
	beq	.L17428
.L17414:
	ldr	r5, [r4, #32]
	add	r9, r4, #32
	ldr	r6, [r8, #92]
	cmp	r9, r5
	beq	.L17415
.L17416:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r10
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #32]
	cmp	r9, r5
	bne	.L17416
	ldr	r6, [r8, #92]
.L17415:
	ldr	r5, [r4, #48]
	add	r9, r4, #48
	cmp	r9, r5
	beq	.L17417
.L17418:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r10
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #48]
	cmp	r9, r5
	bne	.L17418
.L17417:
	ldr	r5, [r4, #76]
	add	r9, r4, #76
	ldr	r6, [r8, #88]
	cmp	r9, r5
	beq	.L17419
.L17420:
	mov	r0, r5
	sub	r8, r5, #36
	bl	list_del
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r8
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #76]
	cmp	r9, r5
	bne	.L17420
.L17419:
	mov	r3, #0
	mov	r1, r7
	mov	r0, r4
	str	r3, [r4, #40]
	str	r3, [r4, #44]
	str	r3, [r4, #84]
	str	r3, [r4, #88]
	str	r3, [r4, #128]
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L17409:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L17428:
	ldr	r0, [r4, #96]
	bl	kfree
	str	r5, [r4, #96]
	b	.L17414
	.fnend
	.size	gserial_disconnect, .-gserial_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_disable, %function
acm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L17436
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L17435
.L17430:
	mov	r0, r4
	bl	gserial_disconnect
	ldr	r0, [r4, #152]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #152]
	mov	r2, #0
	str	r2, [r3]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L17435:
	ldr	r1, [r4, #20]
	movw	r2, #:lower16:.LC1296
	sub	r0, r3, #32
	movt	r2, #:upper16:.LC1296
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	ldr	r1, [r1, #24]
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L17430
.L17437:
	.align	2
.L17436:
	.word	.LANCHOR8-2944
	.fnend
	.size	acm_disable, .-acm_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_set_alt, %function
acm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r2, [r0, #144]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r5, [r3, #24]
	beq	.L17469
	ldrb	r3, [r0, #145]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L17443
	ldr	r2, [r0, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L17444
	ldr	r0, .L17472
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L17470
.L17445:
	mov	r0, r4
	bl	gserial_disconnect
	ldr	r2, [r4, #88]
.L17444:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L17446
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L17446
.L17447:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L17452
	ldr	r0, [r5]
	mov	r1, r4
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L17452
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
	mov	r0, r4
	bl	gserial_connect
.L17438:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L17446:
	ldr	ip, .L17472+4
	ldr	r0, [r5]
	ldrh	r3, [ip, #-14]
	tst	r3, #4
	bne	.L17471
.L17448:
	mov	r1, r4
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L17452
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L17452
	ldr	r2, [r4, #88]
	b	.L17447
.L17469:
	ldr	r2, [r0, #152]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L17440
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #152]
.L17440:
	ldr	r0, [r5]
	mov	r1, r4
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L17443
	ldr	r3, [r4, #152]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	ldr	r3, [r4, #152]
	str	r4, [r3]
	b	.L17438
.L17452:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r5, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L17438
.L17470:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1297
	sub	r0, r0, #24
	movt	r2, #:upper16:.LC1297
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L17445
.L17471:
	movw	r2, #:lower16:.LC1298
	add	r1, r0, #32
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC1298
	sub	r0, ip, #32
	bl	__dynamic_dev_dbg
	ldr	r2, [r4, #88]
	ldr	r0, [r5]
	b	.L17448
.L17443:
	mvn	r5, #21
	b	.L17438
.L17473:
	.align	2
.L17472:
	.word	.LANCHOR8-2928
	.word	.LANCHOR8-2896
	.fnend
	.size	acm_set_alt, .-acm_set_alt
	.align	2
	.global	gsdio_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_free_req, %function
gsdio_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	gsdio_free_req, .-gsdio_free_req
	.align	2
	.global	gsdio_alloc_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_alloc_req, %function
gsdio_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r6, r1
	mov	r1, r2
	str	r8, [sp, #16]
	mov	r7, r0
	str	lr, [sp, #20]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L17480
	mov	r1, r5
	mov	r0, r6
	str	r6, [r4, #4]
	bl	__kmalloc
	cmp	r0, #0
	mov	r5, r0
	str	r0, [r4]
	beq	.L17481
.L17476:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L17480:
	movw	r0, #:lower16:.LC656
	ldr	r1, .L17482
	movt	r0, #:upper16:.LC656
	bl	printk
	b	.L17476
.L17481:
	movw	r0, #:lower16:.LC657
	ldr	r1, .L17482
	movt	r0, #:upper16:.LC657
	bl	printk
	ldr	r3, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	mov	r4, r5
	ldr	r3, [r3, #12]
	blx	r3
	b	.L17476
.L17483:
	.align	2
.L17482:
	.word	.LANCHOR5+1236
	.fnend
	.size	gsdio_alloc_req, .-gsdio_alloc_req
	.align	2
	.global	gsdio_free_requests
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_free_requests, %function
gsdio_free_requests:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1]
	cmp	r1, r4
	beq	.L17484
	mov	r5, r1
	mov	r6, r0
.L17486:
	mov	r0, r4
	sub	r7, r4, #36
	bl	list_del
	ldr	r0, [r4, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r4, [r5]
	cmp	r5, r4
	bne	.L17486
.L17484:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	gsdio_free_requests, .-gsdio_free_requests
	.set	gsmd_free_requests,gsdio_free_requests
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_notify, %function
gsmd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r1, r1, #1
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r5, [r0, #72]
	cmp	r1, #3
	ldrls	pc, [pc, r1, asl #2]
	b	.L17489
.L17492:
	.word	.L17491
	.word	.L17493
	.word	.L17494
	.word	.L17495
.L17495:
	ldr	r0, [r5]
	bl	smd_tiocmget
	ands	r1, r0, #128
	movne	r1, #8
	movne	r3, #9
	moveq	r3, #1
	tst	r0, #64
	movne	r1, r3
	tst	r0, #256
	ldr	r0, [r4, #68]
	orrne	r1, r1, #2
	str	r1, [r4, #164]
	cmp	r0, #0
	beq	.L17489
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L17489
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	bx	r3
.L17494:
	ldr	r0, .L17574
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L17565
.L17505:
	add	r1, r5, #8
	mov	r0, #0
	add	r8, r4, #4
	bl	_clear_bit
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L17566
	ldr	r7, [r3, #88]
	mov	r1, r0
	mov	r0, r8
	ldr	r6, [r3, #92]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L17507
	mov	r0, r7
	blx	r3
.L17507:
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L17508
	mov	r0, r6
	blx	r3
.L17508:
	mov	r0, r8
	bl	_raw_spin_lock
	ldr	r0, [r4, #68]
	cmp	r0, #0
	beq	.L17509
	ldr	r5, [r4, #12]
	add	r9, r4, #12
	cmp	r5, r9
	beq	.L17510
.L17511:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r10
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #12]
	cmp	r9, r5
	bne	.L17511
.L17510:
	ldr	r5, [r4, #20]
	add	r9, r4, #20
	cmp	r5, r9
	beq	.L17512
.L17513:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r10
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #20]
	cmp	r9, r5
	bne	.L17513
.L17512:
	ldr	r5, [r4, #44]
	add	r9, r4, #44
	cmp	r9, r5
	beq	.L17514
.L17515:
	mov	r0, r5
	sub	r6, r5, #36
	bl	list_del
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r6
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #44]
	cmp	r9, r5
	bne	.L17515
.L17514:
	ldr	r0, [r4, #68]
	mov	r3, #0
	str	r3, [r4, #8]
	str	r3, [r4, #164]
.L17509:
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L17516
	ldr	r1, [r4, #164]
	blx	r3
.L17516:
	mov	r0, r8
	b	.L17564
.L17493:
	ldr	r6, .L17574+4
	ldrh	r3, [r6, #-14]
	tst	r3, #4
	bne	.L17567
.L17499:
	add	r1, r5, #8
	mov	r0, #0
	bl	_set_bit
	ldr	r3, .L17574+8
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L17568
.L17500:
	add	r5, r4, #4
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L17503
	ldr	r3, [r4, #72]
	add	r6, r4, #12
	ldr	r1, [r4, #160]
	ldr	r0, [r3]
	mvn	r2, r1
	bl	smd_tiocmset_from_cb
	ldr	r3, [r4, #68]
	movw	r2, #:lower16:gsmd_read_complete
	mov	r1, r6
	movt	r2, #:upper16:gsmd_read_complete
	ldr	r0, [r3, #92]
	bl	gsmd_alloc_requests.constprop.132
	cmp	r0, #0
	bne	.L17569
	ldr	r3, [r4, #68]
	movw	r2, #:lower16:gsmd_write_complete
	add	r1, r4, #44
	movt	r2, #:upper16:gsmd_write_complete
	ldr	r0, [r3, #88]
	bl	gsmd_alloc_requests.constprop.132
	cmp	r0, #0
	bne	.L17570
	mov	r0, r5
	bl	_raw_spin_unlock
	ldrd	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	gsmd_start_rx
.L17491:
	ldr	r0, .L17574+12
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L17571
.L17496:
	ldr	r0, [r5]
	bl	smd_read_avail
	cmp	r0, #0
	bne	.L17572
.L17497:
	ldr	r0, [r5]
	bl	smd_write_avail
	cmp	r0, #0
	bne	.L17573
.L17489:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L17569:
	movw	r0, #:lower16:.LC1302
	ldr	r1, .L17574+16
	movt	r0, #:upper16:.LC1302
	bl	printk
.L17503:
	mov	r0, r5
.L17564:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock
.L17572:
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #52
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3400]
	bl	queue_work_on
	b	.L17497
.L17573:
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #28
	ldrd	r4, [sp]
	movt	r3, #:upper16:.LANCHOR1
	ldrd	r6, [sp, #8]
	mov	r0, #4
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, [r3, #3400]
	b	queue_work_on
.L17566:
	mov	r1, r0
	ldrd	r4, [sp]
	mov	r0, r8
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L17565:
	movw	r1, #:lower16:.LC1304
	ldr	r2, .L17574+20
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1304
	bl	__dynamic_pr_debug
	b	.L17505
.L17567:
	movw	r1, #:lower16:.LC1300
	ldr	r2, .L17574+20
	sub	r0, r6, #32
	movt	r1, #:upper16:.LC1300
	bl	__dynamic_pr_debug
	b	.L17499
.L17571:
	movw	r1, #:lower16:.LC1299
	ldr	r2, .L17574+20
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1299
	bl	__dynamic_pr_debug
	b	.L17496
.L17568:
	movw	r1, #:lower16:.LC1301
	sub	r0, r6, #8
	ldr	r2, .L17574+16
	movt	r1, #:upper16:.LC1301
	mov	r3, r4
	bl	__dynamic_pr_debug
	b	.L17500
.L17570:
	ldr	r3, [r4, #68]
	mov	r1, r6
	ldr	r0, [r3, #92]
	bl	gsmd_free_requests
	movw	r0, #:lower16:.LC1303
	ldr	r1, .L17574+16
	movt	r0, #:upper16:.LC1303
	bl	printk
	b	.L17503
.L17575:
	.align	2
.L17574:
	.word	.LANCHOR8-2800
	.word	.LANCHOR8-2848
	.word	.LANCHOR8-2832
	.word	.LANCHOR8-2880
	.word	.LANCHOR5+1264
	.word	.LANCHOR5+1252
	.fnend
	.size	gsmd_notify, .-gsmd_notify
	.align	2
	.global	gsdio_alloc_requests
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_alloc_requests, %function
gsdio_alloc_requests:
	.fnstart
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L17598
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	mov	r6, r1
	strd	r8, [sp, #16]
	mov	r8, r3
	mov	r9, r2
	str	r10, [sp, #24]
	ldrh	r3, [ip, #-6]
	str	lr, [sp, #28]
	.pad #16
	sub	sp, sp, #16
	ldr	r10, [sp, #48]
	tst	r3, #4
	bne	.L17594
.L17577:
	cmp	r9, #0
	ble	.L17578
	mov	r5, #0
.L17584:
	ldr	r3, [r7, #8]
	mov	r1, #32
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	mov	r1, #32
	mov	r0, r8
	beq	.L17595
	str	r8, [r4, #4]
	bl	__kmalloc
	mov	r3, r0
	mov	r1, r6
	cmp	r3, #0
	add	r0, r4, #36
	str	r3, [r4]
	beq	.L17596
	str	r10, [r4, #28]
	add	r5, r5, #1
	ldr	r2, [r6]
	bl	__list_add
	cmp	r9, r5
	bne	.L17584
.L17578:
	mov	r0, #0
.L17576:
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L17594:
	movw	r1, #:lower16:.LC655
	sub	r0, ip, #24
	ldr	r2, .L17598+4
	movt	r1, #:upper16:.LC655
	mov	r3, r7
	stm	sp, {r6, r9}
	str	r8, [sp, #8]
	str	r10, [sp, #12]
	bl	__dynamic_pr_debug
	b	.L17577
.L17595:
	movw	r0, #:lower16:.LC656
	ldr	r1, .L17598+8
	movt	r0, #:upper16:.LC656
	bl	printk
.L17580:
	ldr	r0, .L17598+12
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L17597
.L17582:
	ldr	r3, [r6]
	cmp	r6, r3
	bne	.L17578
	mvn	r0, #11
	b	.L17576
.L17597:
	movw	r1, #:lower16:.LC658
	mov	r3, r5
	ldr	r2, .L17598+4
	movt	r1, #:upper16:.LC658
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L17582
.L17596:
	movw	r0, #:lower16:.LC657
	ldr	r1, .L17598+8
	movt	r0, #:upper16:.LC657
	bl	printk
	ldr	r3, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L17580
.L17599:
	.align	2
.L17598:
	.word	.LANCHOR8-2784
	.word	.LANCHOR5+1280
	.word	.LANCHOR5+1236
	.word	.LANCHOR8-2752
	.fnend
	.size	gsdio_alloc_requests, .-gsdio_alloc_requests
	.align	2
	.global	gsdio_start_rx
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_start_rx, %function
gsdio_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	subs	r4, r0, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #8
	sub	sp, sp, #8
	beq	.L17623
	ldr	r0, .L17630
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L17624
.L17602:
	add	r6, r4, #4
	mov	r0, r6
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L17625
	ldr	r2, [r4, #108]
	cmp	r2, #0
	beq	.L17626
	add	r8, r4, #12
	mov	r9, #2048
	ldr	r7, [r3, #92]
	b	.L17608
.L17610:
	bl	list_del
	str	r9, [r5, #-32]
	ldr	r3, [r4, #44]
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r4, #44]
	bl	_raw_spin_unlock_irq
	ldr	r3, [r7, #8]
	mov	r1, r10
	mov	r2, #32
	mov	r0, r7
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irq
	cmp	r10, #0
	bne	.L17627
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L17628
.L17608:
	ldr	r5, [r4, #12]
	cmp	r8, r5
	mov	r0, r5
	sub	r10, r5, #36
	bne	.L17610
	b	.L17605
.L17626:
	ldr	r0, .L17630+4
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L17629
.L17605:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irq
.L17625:
	ldr	r0, .L17630+8
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L17605
.L17622:
	movw	r1, #:lower16:.LC225
	ldr	r2, .L17630+12
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC225
	bl	__dynamic_pr_debug
	b	.L17605
.L17628:
	ldr	r0, .L17630+16
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L17605
	b	.L17622
.L17624:
	ldr	ip, [r4]
	movw	r1, #:lower16:.LC228
	mov	r3, r4
	movt	r1, #:upper16:.LC228
	ldr	r2, .L17630+12
	sub	r0, r0, #24
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L17602
.L17629:
	movw	r1, #:lower16:.LC1305
	ldr	r2, .L17630+12
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1305
	bl	__dynamic_pr_debug
	b	.L17605
.L17627:
	movw	r0, #:lower16:.LC116
	ldr	r3, [r4]
	mov	r2, r4
	ldr	r1, .L17630+12
	movt	r0, #:upper16:.LC116
	bl	printk
	mov	r2, r8
	mov	r0, r5
	ldr	r1, [r4, #16]
	bl	__list_add
	ldr	r3, [r4, #44]
	add	r3, r3, #1
	str	r3, [r4, #44]
	b	.L17605
.L17623:
	ldr	r1, .L17630+12
	movw	r0, #:lower16:.LC114
	movt	r0, #:upper16:.LC114
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L17631:
	.align	2
.L17630:
	.word	.LANCHOR8-2736
	.word	.LANCHOR8-2688
	.word	.LANCHOR8-2704
	.word	.LANCHOR5+1304
	.word	.LANCHOR8-2656
	.fnend
	.size	gsdio_start_rx, .-gsdio_start_rx
	.align	2
	.global	gsdio_rx_push
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_rx_push, %function
gsdio_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L17689
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #28
	strd	r8, [sp, #16]
	sub	r8, r0, #8
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r3, #-6]
	.pad #20
	sub	sp, sp, #20
	tst	r2, #4
	bne	.L17677
.L17633:
	sub	r6, r4, #24
	mov	r0, r6
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L17678
	ldr	r5, [r4, #-8]
	ldr	r9, [r3, #92]
	cmp	r8, r5
	beq	.L17636
	ldr	r3, [r5, #8]
	cmn	r3, #108
	beq	.L17638
	cmp	r3, #0
	bne	.L17679
.L17639:
	ldr	r3, [r4, #80]
	sub	r10, r5, #36
	cmp	r3, #0
	beq	.L17680
	mov	r0, r5
	bl	list_del
	ldr	r3, [r4, #20]
	cmp	r7, #0
	sub	r3, r3, #1
	str	r3, [r4, #20]
	beq	.L17681
	cmp	r10, #0
	beq	.L17682
	ldr	fp, .L17689+4
	ldrh	r3, [fp, #-14]
	tst	r3, #4
	bne	.L17683
.L17644:
	ldr	r3, [r4, #80]
	cmp	r3, #0
	beq	.L17684
	ldr	fp, .L17689+8
	ldrh	r3, [fp, #-14]
	tst	r3, #4
	bne	.L17685
.L17646:
	ldr	r3, [r5, #12]
	cmp	r3, #0
	bne	.L17647
	ldr	r3, .L17689+12
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L17686
.L17648:
	mov	r3, #0
	str	r3, [r4, #-20]
.L17642:
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L17687
	mov	r1, r8
	mov	r0, r5
	ldr	r2, [r4, #-8]
	bl	__list_add
	ldr	r3, [r4, #20]
	add	r3, r3, #1
	str	r3, [r4, #20]
.L17636:
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gsdio_start_rx
.L17638:
	ldr	r0, .L17689+16
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L17636
	movw	r1, #:lower16:.LC1308
	ldr	r3, [r4, #-28]
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1308
	ldr	r2, .L17689+20
	str	r7, [sp]
	bl	__dynamic_pr_debug
	b	.L17636
.L17684:
	ldr	r3, .L17689+24
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	beq	.L17642
	movw	r1, #:lower16:.LC1312
	sub	r0, fp, #8
	ldr	r2, .L17689+28
	movt	r1, #:upper16:.LC1312
	bl	__dynamic_pr_debug
	b	.L17642
.L17678:
	ldr	r0, .L17689+32
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L17688
.L17676:
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq
.L17677:
	ldr	ip, [r4, #-28]
	movw	r1, #:lower16:.LC1306
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC1306
	ldr	r2, .L17689+20
	mov	r3, r7
	str	ip, [sp]
	str	r8, [sp, #4]
	bl	__dynamic_pr_debug
	b	.L17633
.L17683:
	ldr	lr, [r4, #-28]
	movw	r1, #:lower16:.LC1311
	mov	r3, r7
	ldr	ip, [r4, #-20]
	movt	r1, #:upper16:.LC1311
	sub	r0, fp, #32
	ldr	r2, .L17689+28
	str	ip, [sp, #12]
	ldr	ip, [r5, #12]
	str	lr, [sp]
	stmib	sp, {r10, ip}
	bl	__dynamic_pr_debug
	b	.L17644
.L17685:
	movw	r1, #:lower16:.LC1313
	mvn	r3, #18
	ldr	r2, .L17689+28
	movt	r1, #:upper16:.LC1313
	sub	r0, fp, #32
	bl	__dynamic_pr_debug
	b	.L17646
.L17686:
	movw	r1, #:lower16:.LC1314
	sub	r0, fp, #8
	ldr	r2, .L17689+28
	movt	r1, #:upper16:.LC1314
	bl	__dynamic_pr_debug
	b	.L17648
.L17688:
	movw	r1, #:lower16:.LC1307
	ldr	r2, .L17689+20
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1307
	bl	__dynamic_pr_debug
	b	.L17676
.L17687:
	str	r3, [r4, #-20]
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r9, #8]
	mov	r1, r10
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	b	.L17676
.L17679:
	movw	r0, #:lower16:.LC336
	mov	r2, r7
	ldr	r1, .L17689+20
	str	r3, [sp]
	movt	r0, #:upper16:.LC336
	ldr	r3, [r4, #-28]
	bl	printk
	b	.L17639
.L17680:
	movw	r0, #:lower16:.LC1309
	ldr	r1, .L17689+20
	movt	r0, #:upper16:.LC1309
	bl	printk
	mov	r0, r5
	bl	__list_del_entry
	ldr	r2, [r4, #-16]
	mov	r0, r5
	sub	r1, r4, #16
	bl	__list_add
	ldrd	r2, [r4, #16]
	add	r2, r2, #1
	sub	r3, r3, #1
	strd	r2, [r4, #16]
	b	.L17636
.L17682:
	movw	r0, #:lower16:.LC1310
	ldr	r1, .L17689+28
	ldr	r2, [r4, #-28]
	movt	r0, #:upper16:.LC1310
	bl	printk
	b	.L17642
.L17681:
	movw	r0, #:lower16:.LC114
	ldr	r1, .L17689+28
	movt	r0, #:upper16:.LC114
	bl	printk
	b	.L17642
.L17647:
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	mov	r0, r6
	bl	_raw_spin_lock_irq
	movw	r0, #:lower16:.LC1315
	mvn	r3, #18
	ldr	r1, .L17689+28
	ldr	r2, [r4, #-28]
	movt	r0, #:upper16:.LC1315
	bl	printk
	b	.L17642
.L17690:
	.align	2
.L17689:
	.word	.LANCHOR8-2640
	.word	.LANCHOR8-2560
	.word	.LANCHOR8-2512
	.word	.LANCHOR8-2496
	.word	.LANCHOR8-2592
	.word	.LANCHOR5+1320
	.word	.LANCHOR8-2544
	.word	.LANCHOR5+1336
	.word	.LANCHOR8-2608
	.fnend
	.size	gsdio_rx_push, .-gsdio_rx_push
	.align	2
	.global	gsdio_write
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_write, %function
gsdio_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r4, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #16
	sub	sp, sp, #16
	beq	.L17713
	cmp	r1, #0
	mov	r5, r1
	beq	.L17714
	ldr	r6, .L17719
	ldrh	r3, [r6, #-14]
	tst	r3, #4
	bne	.L17715
.L17695:
	ldr	r3, [r4, #108]
	cmp	r3, #0
	beq	.L17716
	ldr	r6, .L17719+4
	ldrh	r3, [r6, #-14]
	tst	r3, #4
	bne	.L17717
.L17697:
	ldr	r3, [r5, #48]
	cmp	r3, #0
	bne	.L17698
	ldr	r3, .L17719+8
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L17718
.L17699:
	mov	r3, #0
	str	r3, [r4, #8]
.L17693:
	mvn	r0, #18
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L17716:
	ldr	r3, .L17719+12
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	beq	.L17693
	movw	r1, #:lower16:.LC1312
	sub	r0, r6, #8
	ldr	r2, .L17719+16
	movt	r1, #:upper16:.LC1312
	bl	__dynamic_pr_debug
	b	.L17693
.L17715:
	ldr	lr, [r4, #8]
	str	r5, [sp, #4]
	movw	r1, #:lower16:.LC1311
	ldr	ip, [r5, #48]
	movt	r1, #:upper16:.LC1311
	mov	r3, r4
	ldr	r2, .L17719+16
	sub	r0, r6, #32
	str	ip, [sp, #8]
	str	lr, [sp, #12]
	ldr	ip, [r4]
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L17695
.L17717:
	movw	r1, #:lower16:.LC1313
	mvn	r3, #18
	ldr	r2, .L17719+16
	movt	r1, #:upper16:.LC1313
	sub	r0, r6, #32
	bl	__dynamic_pr_debug
	b	.L17697
.L17718:
	movw	r1, #:lower16:.LC1314
	sub	r0, r6, #8
	ldr	r2, .L17719+16
	movt	r1, #:upper16:.LC1314
	bl	__dynamic_pr_debug
	b	.L17699
.L17713:
	movw	r0, #:lower16:.LC114
	ldr	r1, .L17719+16
	movt	r0, #:upper16:.LC114
	bl	printk
	b	.L17693
.L17714:
	movw	r0, #:lower16:.LC1310
	ldr	r1, .L17719+16
	ldr	r2, [r4]
	movt	r0, #:upper16:.LC1310
	bl	printk
	b	.L17693
.L17698:
	add	r5, r4, #4
	mov	r0, r5
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	_raw_spin_lock_irq
	movw	r0, #:lower16:.LC1315
	mvn	r3, #18
	ldr	r1, .L17719+16
	ldr	r2, [r4]
	movt	r0, #:upper16:.LC1315
	bl	printk
	b	.L17693
.L17720:
	.align	2
.L17719:
	.word	.LANCHOR8-2560
	.word	.LANCHOR8-2512
	.word	.LANCHOR8-2496
	.word	.LANCHOR8-2544
	.word	.LANCHOR5+1336
	.fnend
	.size	gsdio_write, .-gsdio_write
	.align	2
	.global	gsdio_read_pending
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_read_pending, %function
gsdio_read_pending:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	beq	.L17730
	ldr	r3, [r0, #120]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L17731
	movw	r4, #:lower16:.LC1316
	strd	r6, [sp, #8]
	ldr	r7, .L17731+4
	movt	r4, #:upper16:.LC1316
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	sub	r6, r5, #32
.L17724:
	ldrh	r3, [r5, #-14]
	tst	r3, #4
	bne	.L17725
.L17726:
	b	.L17726
.L17725:
	mvn	r3, #18
	mov	r2, r7
	mov	r1, r4
	mov	r0, r6
	bl	__dynamic_pr_debug
	b	.L17724
.L17730:
	movw	r0, #:lower16:.LC114
	ldr	r1, .L17731+4
	movt	r0, #:upper16:.LC114
	b	printk
.L17732:
	.align	2
.L17731:
	.word	.LANCHOR8-2464
	.word	.LANCHOR5+1348
	.fnend
	.size	gsdio_read_pending, .-gsdio_read_pending
	.align	2
	.global	gsdio_tx_pull
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_tx_pull, %function
gsdio_tx_pull:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L17750
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #8
	strd	r8, [sp, #16]
	sub	r8, r0, #60
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r3, #-6]
	.pad #8
	sub	sp, sp, #8
	tst	r2, #4
	bne	.L17746
.L17734:
	ldr	r3, [r4, #36]
	cmp	r3, #0
	beq	.L17747
	sub	r5, r4, #56
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r7, [r4, #-8]
	cmp	r6, r7
	beq	.L17736
	ldr	r3, [r4, #48]
	cmp	r3, #0
	bne	.L17737
	ldr	r0, .L17750+4
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L17748
.L17736:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irq
.L17746:
	ldr	ip, [r4, #-60]
	movw	r1, #:lower16:.LC224
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC224
	ldr	r2, .L17750+8
	mov	r3, r8
	str	ip, [sp]
	str	r6, [sp, #4]
	bl	__dynamic_pr_debug
	b	.L17734
.L17748:
	movw	r1, #:lower16:.LC1318
	ldr	r2, .L17750+8
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1318
	bl	__dynamic_pr_debug
	b	.L17736
.L17747:
	ldr	r1, .L17750+8
	movw	r0, #:lower16:.LC1317
	movt	r0, #:upper16:.LC1317
	bl	printk
	mov	r0, r8
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	gsdio_read_pending
.L17737:
	ldr	r3, [r4, #36]
	mov	r0, r7
	sub	r10, r7, #36
	ldr	r9, [r3, #88]
	bl	list_del
	ldr	r3, [r4, #16]
	mov	r0, r5
	sub	r3, r3, #1
	str	r3, [r4, #16]
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	_raw_spin_lock_irq
	mvn	r1, #18
	movw	r0, #:lower16:.LC1319
	ldr	r3, [r4, #-60]
	mov	r2, r8
	movt	r0, #:upper16:.LC1319
	str	r1, [sp]
	ldr	r1, .L17750+8
	bl	printk
	ldr	r3, [r4, #36]
	cmp	r3, #0
	beq	.L17749
	mov	r1, r6
	mov	r0, r7
	ldr	r2, [r4, #-8]
	bl	__list_add
	ldr	r3, [r4, #16]
	add	r3, r3, #1
	str	r3, [r4, #16]
	b	.L17736
.L17749:
	ldr	r0, [r7, #-36]
	bl	kfree
	ldr	r3, [r9, #8]
	mov	r1, r10
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	b	.L17736
.L17751:
	.align	2
.L17750:
	.word	.LANCHOR8-2448
	.word	.LANCHOR8-2416
	.word	.LANCHOR5+1368
	.fnend
	.size	gsdio_tx_pull, .-gsdio_tx_pull
	.align	2
	.global	gsdio_start_io
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_start_io, %function
gsdio_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L17800
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r3, #-6]
	.pad #28
	sub	sp, sp, #28
	tst	r2, #4
	bne	.L17790
.L17753:
	add	r3, r4, #4
	mov	r0, r3
	str	r3, [sp, #16]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	str	r0, [sp, #20]
	cmp	r3, #0
	beq	.L17791
	ldr	fp, .L17800+4
	add	r8, r4, #12
	ldr	r6, [r3, #92]
	ldrh	r3, [fp, #-6]
	tst	r3, #4
	bne	.L17792
.L17756:
	movw	r7, #:lower16:kmalloc_caches
	movw	r10, #:lower16:gsdio_read_complete
	movt	r7, #:upper16:kmalloc_caches
	movt	r10, #:upper16:gsdio_read_complete
	mov	r5, #0
.L17770:
	ldr	r3, [r6, #8]
	mov	r1, #32
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r9, r0, #0
	mov	r3, #2048
	mov	r1, #32
	mov	r2, r3
	mov	ip, #16
	beq	.L17793
	str	r3, [r9, #4]
	ldr	r3, [r7, #44]
	subs	r0, r3, #0
	streq	ip, [r9]
	beq	.L17760
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r9]
	beq	.L17794
.L17760:
	str	r10, [r9, #28]
	add	r0, r9, #36
	add	r5, r5, #1
	mov	r1, r8
	ldr	r2, [r4, #12]
	bl	__list_add
	cmp	r5, #8
	bne	.L17770
.L17762:
	ldrh	r1, [fp, #-6]
	mov	r3, #8
	add	fp, r4, #52
	ldr	r2, [r4, #96]
	str	r3, [r4, #44]
	tst	r1, #4
	ldr	r6, [r2, #88]
	bne	.L17795
.L17763:
	movw	r7, #:lower16:kmalloc_caches
	movw	r10, #:lower16:gsdio_write_complete
	movt	r7, #:upper16:kmalloc_caches
	movt	r10, #:upper16:gsdio_write_complete
	mov	r5, #0
.L17771:
	ldr	r3, [r6, #8]
	mov	r1, #32
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r9, r0, #0
	mov	r3, #2048
	mov	r1, #32
	mov	r2, r3
	mov	ip, #16
	beq	.L17796
	str	r3, [r9, #4]
	ldr	r3, [r7, #44]
	subs	r0, r3, #0
	streq	ip, [r9]
	beq	.L17767
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r9]
	beq	.L17797
.L17767:
	str	r10, [r9, #28]
	add	r0, r9, #36
	add	r5, r5, #1
	mov	r1, fp
	ldr	r2, [r4, #52]
	bl	__list_add
	cmp	r5, #8
	bne	.L17771
.L17769:
	mov	r3, #8
	ldrd	r0, [sp, #16]
	str	r3, [r4, #76]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	bl	gsdio_start_rx
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #60
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3396]
	bl	queue_work_on
	mov	r0, #0
.L17752:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L17790:
	movw	r1, #:lower16:.LC267
	sub	r0, r3, #24
	ldr	r2, .L17800+8
	movt	r1, #:upper16:.LC267
	bl	__dynamic_pr_debug
	b	.L17753
.L17792:
	movw	ip, #:lower16:gsdio_read_complete
	mov	r3, #2048
	ldr	r2, .L17800+12
	movt	ip, #:upper16:gsdio_read_complete
	mov	r0, #8
	str	r8, [sp]
	movw	r1, #:lower16:.LC655
	stmib	sp, {r0, r3, ip}
	movt	r1, #:upper16:.LC655
	mov	r3, r6
	sub	r0, fp, #24
	bl	__dynamic_pr_debug
	b	.L17756
.L17795:
	movw	r2, #:lower16:gsdio_write_complete
	mov	r0, #2048
	str	fp, [sp]
	movt	r2, #:upper16:gsdio_write_complete
	movw	r1, #:lower16:.LC655
	str	r3, [sp, #4]
	movt	r1, #:upper16:.LC655
	str	r0, [sp, #8]
	mov	r3, r6
	str	r2, [sp, #12]
	ldr	r0, .L17800+16
	ldr	r2, .L17800+12
	bl	__dynamic_pr_debug
	b	.L17763
.L17791:
	mov	r1, r0
	ldr	r0, [sp, #16]
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #18
	b	.L17752
.L17796:
	movw	r0, #:lower16:.LC656
	ldr	r1, .L17800+20
	movt	r0, #:upper16:.LC656
	bl	printk
.L17765:
	ldr	r0, .L17800+24
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L17798
.L17768:
	ldr	r3, [r4, #52]
	cmp	fp, r3
	bne	.L17769
	ldr	r3, [r4, #96]
	mov	r1, r8
	ldr	r0, [r3, #92]
	bl	gsdio_free_requests
	mov	r3, #0
	ldrd	r0, [sp, #16]
	str	r3, [r4, #44]
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC1321
	ldr	r1, .L17800+8
	movt	r0, #:upper16:.LC1321
	bl	printk
	mvn	r0, #11
	b	.L17752
.L17798:
	movw	r1, #:lower16:.LC658
	mov	r3, r5
	ldr	r2, .L17800+12
	movt	r1, #:upper16:.LC658
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L17768
.L17794:
	movw	r0, #:lower16:.LC657
	ldr	r1, .L17800+20
	movt	r0, #:upper16:.LC657
	bl	printk
	ldr	r2, [r6, #8]
	mov	r1, r9
	mov	r0, r6
	ldr	r3, [r2, #12]
	blx	r3
.L17758:
	ldr	r0, .L17800+24
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L17799
.L17761:
	ldr	r3, [r4, #12]
	cmp	r8, r3
	bne	.L17762
	ldrd	r0, [sp, #16]
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC1320
	ldr	r1, .L17800+8
	movt	r0, #:upper16:.LC1320
	bl	printk
	mvn	r0, #11
	b	.L17752
.L17799:
	movw	r1, #:lower16:.LC658
	mov	r3, r5
	ldr	r2, .L17800+12
	movt	r1, #:upper16:.LC658
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L17761
.L17797:
	movw	r0, #:lower16:.LC657
	ldr	r1, .L17800+20
	movt	r0, #:upper16:.LC657
	bl	printk
	ldr	r2, [r6, #8]
	mov	r1, r9
	mov	r0, r6
	ldr	r3, [r2, #12]
	blx	r3
	b	.L17765
.L17793:
	movw	r0, #:lower16:.LC656
	ldr	r1, .L17800+20
	movt	r0, #:upper16:.LC656
	bl	printk
	b	.L17758
.L17801:
	.align	2
.L17800:
	.word	.LANCHOR8-2400
	.word	.LANCHOR8-2784
	.word	.LANCHOR5+1384
	.word	.LANCHOR5+1280
	.word	.LANCHOR8-2808
	.word	.LANCHOR5+1236
	.word	.LANCHOR8-2752
	.fnend
	.size	gsdio_start_io, .-gsdio_start_io
	.align	2
	.global	gsdio_port_free
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_port_free, %function
gsdio_port_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r2, r0
	mov	r3, #104
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r0, #:lower16:.LANCHOR1
	str	lr, [sp, #4]
	mul	r3, r3, r2
	movt	r0, #:upper16:.LANCHOR1
	add	r1, r0, r3
	ldr	r4, [r1, #24]
	cmp	r4, #0
	beq	.L17805
	add	r0, r1, #28
	bl	platform_driver_unregister
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
.L17805:
	movw	r0, #:lower16:.LC173
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC173
	add	sp, sp, #8
	ldr	r1, .L17806
	b	printk
.L17807:
	.align	2
.L17806:
	.word	.LANCHOR5+1400
	.fnend
	.size	gsdio_port_free, .-gsdio_port_free
	.align	2
	.global	gsdio_ctrl_modem_status
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ctrl_modem_status, %function
gsdio_ctrl_modem_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #1506
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movt	r3, #:upper16:.LANCHOR4
	str	lr, [sp, #8]
	mov	r4, r0
	ldrh	r2, [r3, r2]
	mov	r5, r1
	.pad #12
	sub	sp, sp, #12
	tst	r2, #4
	bne	.L17831
.L17809:
	ands	r1, r4, #128
	moveq	r3, #1
	streq	r1, [r5, #176]
	beq	.L17811
	mov	r2, #8
	mov	r3, #9
	mov	r1, r2
	str	r2, [r5, #176]
.L17811:
	tst	r4, #64
	ldr	r0, [r5, #96]
	movne	r1, r3
	strne	r3, [r5, #176]
	tst	r4, #256
	orrne	r1, r1, #2
	strne	r1, [r5, #176]
	cmp	r0, #0
	beq	.L17808
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L17808
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	bx	r3
.L17808:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L17831:
	ldr	ip, [r5]
	movw	r1, #:lower16:.LC935
	add	r0, r3, #1488
	movt	r1, #:upper16:.LC935
	ldr	r2, .L17832
	mov	r3, r5
	str	ip, [sp]
	str	r4, [sp, #4]
	bl	__dynamic_pr_debug
	b	.L17809
.L17833:
	.align	2
.L17832:
	.word	.LANCHOR5-1304
	.fnend
	.size	gsdio_ctrl_modem_status, .-gsdio_ctrl_modem_status
	.align	2
	.global	gsdio_ch_notify
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ch_notify, %function
gsdio_ch_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L17847
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r0
	str	lr, [sp, #8]
	mov	r4, r1
	.pad #12
	sub	sp, sp, #12
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L17845
.L17835:
	cmp	r4, #2
	movweq	r3, #:lower16:.LANCHOR1
	addeq	r2, r5, #28
	beq	.L17844
	cmp	r4, #1
	beq	.L17846
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L17846:
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r5, #60
.L17844:
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3396]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work_on
.L17845:
	ldr	lr, [r5]
	movw	r1, #:lower16:.LC1322
	cmp	r4, #1
	movt	r1, #:upper16:.LC1322
	movw	ip, #:lower16:.LC1323
	ldr	r2, .L17847+4
	movt	ip, #:upper16:.LC1323
	moveq	ip, r1
	movw	r1, #:lower16:.LC1324
	sub	r0, r3, #32
	movt	r1, #:upper16:.LC1324
	mov	r3, r5
	str	lr, [sp]
	str	ip, [sp, #4]
	bl	__dynamic_pr_debug
	b	.L17835
.L17848:
	.align	2
.L17847:
	.word	.LANCHOR8-2368
	.word	.LANCHOR5+1416
	.fnend
	.size	gsdio_ch_notify, .-gsdio_ch_notify
	.align	2
	.global	gsdio_port_alloc
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_port_alloc, %function
gsdio_port_alloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r2
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r3, #8]
	.pad #12
	sub	sp, sp, #12
	cmp	r0, #0
	beq	.L17853
	mov	r2, #192
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L17859
.L17850:
	mov	r6, #0
	str	r8, [r4]
	add	r2, r4, #20
	mov	r1, #65024
	movw	r9, #:lower16:gsdio_rx_push
	str	r6, [r4, #4]
	ldr	r3, [r5]	@ unaligned
	movw	lr, #:lower16:gsdio_tx_pull
	movw	r0, #:lower16:gsdio_ctrl_wq
	movw	ip, #:lower16:gsdio_open_work
	movt	r1, 65535
	movt	lr, #:upper16:gsdio_tx_pull
	movt	ip, #:upper16:gsdio_open_work
	movt	r0, #:upper16:gsdio_ctrl_wq
	str	r3, [r4, #100]
	ldrh	r3, [r5, #4]	@ unaligned
	movt	r9, #:upper16:gsdio_rx_push
	strh	r3, [r4, #104]	@ movhi
	ldrb	fp, [r5, #6]	@ zero_extendqisi2
	add	r5, r4, #12
	add	r3, r4, #32
	str	r5, [r4, #12]
	str	r5, [r4, #16]
	add	r5, r4, #52
	str	r2, [r4, #20]
	str	r2, [r4, #24]
	add	r2, r4, #64
	str	r1, [r4, #28]
	str	r3, [r4, #32]
	str	r3, [r4, #36]
	add	r3, r4, #84
	str	r5, [r4, #52]
	str	r5, [r4, #56]
	add	r5, r4, #128
	str	r9, [r4, #40]
	str	r1, [r4, #60]
	str	r2, [r4, #64]
	str	r2, [r4, #68]
	mov	r2, r6
	str	lr, [r4, #72]
	str	r1, [r4, #80]
	str	r3, [r4, #84]
	str	r3, [r4, #88]
	mov	r3, r6
	str	r0, [r4, #92]
	add	r0, r4, #140
	strb	fp, [r4, #106]
	str	r1, [r4, #124]
	mov	r1, r6
	str	r5, [r4, #128]
	str	r5, [r4, #132]
	mov	r5, #104
	str	ip, [r4, #136]
	bl	init_timer_key
	ldr	r0, .L17862
	mul	r5, r5, r8
	movw	r2, #:lower16:delayed_work_timer_fn
	movt	r2, #:upper16:delayed_work_timer_fn
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	movw	ip, #:lower16:gsdio_ch_probe
	movw	r1, #:lower16:gsdio_ch_remove
	str	r2, [r4, #156]
	movt	ip, #:upper16:gsdio_ch_probe
	add	r2, r3, r5
	movt	r1, #:upper16:gsdio_ch_remove
	ldrh	lr, [r0, #-6]
	add	r8, r4, #124
	add	r5, r2, #28
	str	r8, [r4, #160]
	str	r4, [r2, #24]
	tst	lr, #4
	str	r7, [r4, #120]
	str	ip, [r2, #28]
	str	r1, [r2, #32]
	ldr	r3, [r7]
	str	r3, [r2, #48]
	str	r6, [r2, #56]
	bne	.L17860
.L17852:
	mov	r0, r5
	bl	platform_driver_register
	ldr	r3, .L17862+4
	ldrh	r0, [r3, #-14]
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	bne	.L17861
.L17849:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L17853:
	mov	r4, #16
	b	.L17850
.L17861:
	ldr	ip, [r4]
	movw	r1, #:lower16:.LC228
	sub	r0, r3, #32
	movt	r1, #:upper16:.LC228
	mov	r3, r4
	ldr	r2, .L17862+8
	str	ip, [sp]
	bl	__dynamic_pr_debug
	mov	r0, #0
	b	.L17849
.L17860:
	ldr	ip, [r7]
	movw	r1, #:lower16:.LC1326
	mov	r3, r4
	movt	r1, #:upper16:.LC1326
	ldr	r2, .L17862+8
	sub	r0, r0, #24
	str	ip, [sp, #4]
	ldr	ip, [r4]
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L17852
.L17859:
	movw	r0, #:lower16:.LC1325
	ldr	r1, .L17862+8
	movt	r0, #:upper16:.LC1325
	bl	printk
	mvn	r0, #11
	b	.L17849
.L17863:
	.align	2
.L17862:
	.word	.LANCHOR8-2352
	.word	.LANCHOR8-2320
	.word	.LANCHOR5+1432
	.fnend
	.size	gsdio_port_alloc, .-gsdio_port_alloc
	.align	2
	.global	gsdio_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_connect, %function
gsdio_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r3]
	cmp	r1, r2
	bcs	.L17880
	cmp	r0, #0
	mov	r4, r0
	beq	.L17881
	mov	r2, #104
	mla	r1, r2, r1, r3
	ldr	r5, [r1, #24]
	add	r6, r5, #4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	movw	r3, #:lower16:gsdio_ctrl_notify_modem
	mov	r1, r0
	str	r4, [r5, #96]
	movt	r3, #:upper16:gsdio_ctrl_notify_modem
	mov	r0, r6
	str	r3, [r4, #140]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L17882
	ldr	r3, [r4, #88]
	str	r5, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L17883
	ldr	r3, [r4, #92]
	str	r5, [r3]
	ldr	r3, [r5, #108]
	cmp	r3, #0
	beq	.L17864
	ldr	r0, .L17885
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L17884
.L17871:
	mov	r0, r5
	bl	gsdio_start_io
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L17864
	mov	r0, r4
	ldr	r1, [r5, #176]
	blx	r3
.L17864:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L17884:
	movw	r1, #:lower16:.LC1328
	ldr	r2, .L17885+4
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1328
	bl	__dynamic_pr_debug
	b	.L17871
.L17880:
	movw	r0, #:lower16:.LC173
	mov	r2, r1
	ldr	r1, .L17885+4
	movt	r0, #:upper16:.LC173
	mvn	r6, #21
	bl	printk
	b	.L17864
.L17883:
	movw	r0, #:lower16:.LC1327
	mov	r2, r6
	ldr	r1, .L17885+4
	movt	r0, #:upper16:.LC1327
	bl	printk
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	str	r3, [r5, #96]
	ldr	r2, [r4, #88]
	str	r3, [r2]
	b	.L17864
.L17882:
	movw	r0, #:lower16:.LC1327
	mov	r2, r6
	ldr	r1, .L17885+4
	movt	r0, #:upper16:.LC1327
	bl	printk
	mov	r3, #0
	str	r3, [r5, #96]
	b	.L17864
.L17881:
	movw	r0, #:lower16:.LC174
	ldr	r1, .L17885+4
	mvn	r6, #21
	movt	r0, #:upper16:.LC174
	bl	printk
	b	.L17864
.L17886:
	.align	2
.L17885:
	.word	.LANCHOR8-2304
	.word	.LANCHOR5+1452
	.fnend
	.size	gsdio_connect, .-gsdio_connect
	.align	2
	.global	gsdio_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_disconnect, %function
gsdio_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3]
	cmp	r1, r2
	bcs	.L17901
	cmp	r0, #0
	beq	.L17902
	mov	ip, #104
	mov	r2, r1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r5, #0
	strd	r8, [sp, #16]
	mov	r9, r0
	mov	r0, #4
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r1, [r3, #3396]
	mla	r3, ip, r2, r3
	.pad #4
	sub	sp, sp, #4
	ldr	r4, [r3, #24]
	add	r2, r4, #80
	add	r7, r4, r0
	str	r5, [r4, #180]
	bl	queue_work_on
	mov	r0, r7
	add	r10, r4, #12
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #96]
	mov	r0, r7
	str	r5, [r4, #184]
	str	r5, [r4, #188]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r9, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r9, #92]
	str	r5, [r3]
	ldr	r0, [r9, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r9, #88]
	mov	r0, r7
	str	r5, [r3]
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #12]
	mov	r8, r0
	ldr	r6, [r9, #92]
	cmp	r10, r5
	beq	.L17890
.L17891:
	mov	r0, r5
	sub	fp, r5, #36
	bl	list_del
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, fp
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #12]
	cmp	r10, r5
	bne	.L17891
	ldr	r6, [r9, #92]
.L17890:
	ldr	r5, [r4, #20]
	add	r10, r4, #20
	cmp	r10, r5
	beq	.L17892
.L17893:
	mov	r0, r5
	sub	fp, r5, #36
	bl	list_del
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, fp
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #20]
	cmp	r10, r5
	bne	.L17893
.L17892:
	ldr	r5, [r4, #52]
	add	r10, r4, #52
	ldr	r6, [r9, #88]
	cmp	r10, r5
	beq	.L17894
.L17895:
	mov	r0, r5
	sub	r9, r5, #36
	bl	list_del
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r9
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #52]
	cmp	r10, r5
	bne	.L17895
.L17894:
	mov	r3, #0
	mov	r1, r8
	mov	r0, r7
	str	r3, [r4, #8]
	str	r3, [r4, #44]
	str	r3, [r4, #48]
	str	r3, [r4, #76]
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L17901:
	movw	r0, #:lower16:.LC173
	mov	r2, r1
	ldr	r1, .L17903
	movt	r0, #:upper16:.LC173
	b	printk
.L17902:
	movw	r0, #:lower16:.LC174
	ldr	r1, .L17903
	movt	r0, #:upper16:.LC174
	b	printk
.L17904:
	.align	2
.L17903:
	.word	.LANCHOR5+1468
	.fnend
	.size	gsdio_disconnect, .-gsdio_disconnect
	.align	2
	.global	gsdio_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_setup, %function
gsdio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L17940
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	str	r1, [sp, #12]
	ldrh	r1, [r2, #-14]
	tst	r1, #4
	bne	.L17931
.L17906:
	ldr	r3, [sp, #12]
	sub	r3, r3, #1
	cmp	r3, #1
	bhi	.L17932
	movw	r2, #:lower16:.LC968
	mov	r7, #0
	movt	r2, #:upper16:.LC968
	mov	r1, #10
	movw	r0, #:lower16:.LC84
	mov	r3, r7
	str	r7, [sp]
	str	r2, [sp, #4]
	movt	r1, 2
	movt	r0, #:upper16:.LC84
	mov	r2, #1
	movw	r9, #:lower16:.LANCHOR1
	bl	__alloc_workqueue_key
	movt	r9, #:upper16:.LANCHOR1
	cmp	r0, r7
	str	r0, [r9, #3396]
	beq	.L17933
	movw	r10, #:lower16:kmalloc_caches
	ldr	r8, .L17940+4
	add	r5, r9, #4
	movt	r10, #:upper16:kmalloc_caches
	b	.L17916
.L17938:
	mov	r2, #192
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L17934
.L17910:
	movw	r0, #:lower16:gsdio_tx_pull
	add	fp, r4, #12
	str	r7, [r4]
	movt	r0, #:upper16:gsdio_tx_pull
	movw	r2, #:lower16:gsdio_rx_push
	str	fp, [r4, #12]
	movt	r2, #:upper16:gsdio_rx_push
	mov	r1, #65024
	str	fp, [r4, #16]
	add	fp, r4, #20
	movw	r3, #:lower16:gsdio_ctrl_wq
	movw	ip, #:lower16:gsdio_open_work
	mov	r6, #0
	str	r0, [r4, #72]
	add	r0, r4, #32
	movt	r1, 65535
	movt	r3, #:upper16:gsdio_ctrl_wq
	movt	ip, #:upper16:gsdio_open_work
	str	r6, [r4, #4]
	str	fp, [r4, #20]
	mov	lr, #9600
	str	fp, [r4, #24]
	add	fp, r4, #52
	str	r2, [r4, #40]
	mov	r2, #8
	str	r0, [r4, #32]
	str	r0, [r4, #36]
	add	r0, r4, #64
	str	r1, [r4, #28]
	str	fp, [r4, #52]
	str	fp, [r4, #56]
	add	fp, r4, #84
	str	r1, [r4, #60]
	str	r0, [r4, #64]
	str	r0, [r4, #68]
	add	r0, r4, #128
	str	r1, [r4, #80]
	str	fp, [r4, #84]
	str	fp, [r4, #88]
	add	fp, r5, #24
	str	r3, [r4, #92]
	mov	r3, r6
	str	lr, [r4, #100]
	strh	r2, [r4, #104]	@ movhi
	mov	r2, r6
	strb	r6, [r4, #106]
	str	r1, [r4, #124]
	mov	r1, r6
	str	r0, [r4, #128]
	str	r0, [r4, #132]
	add	r0, r4, #140
	str	ip, [r4, #136]
	bl	init_timer_key
	ldr	r0, .L17940+8
	movw	r1, #:lower16:delayed_work_timer_fn
	add	r3, r4, #124
	movt	r1, #:upper16:delayed_work_timer_fn
	movw	r2, #:lower16:gsdio_ch_probe
	movt	r2, #:upper16:gsdio_ch_probe
	str	r1, [r4, #156]
	ldrh	r0, [r0]
	str	r3, [r4, #160]
	movw	r3, #:lower16:gsdio_ch_remove
	str	r4, [r5, #20]
	movt	r3, #:upper16:gsdio_ch_remove
	str	r8, [r4, #120]
	ldr	r1, [r8]
	str	r2, [r5, #24]
	tst	r0, #4
	str	r3, [r5, #28]
	str	r1, [r5, #44]
	str	r6, [r5, #52]
	bne	.L17935
.L17913:
	mov	r0, fp
	bl	platform_driver_register
	ldr	r0, .L17940+12
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L17936
	ldr	r3, [r9]
	add	r3, r3, #1
	str	r3, [r9]
.L17915:
	ldr	r3, [sp, #12]
	add	r7, r7, #1
	add	r5, r5, #104
	add	r8, r8, #12
	cmp	r7, r3
	beq	.L17937
.L17916:
	movw	r1, #:lower16:.LC1332
	mov	r0, r5
	ldr	r2, .L17940+16
	movt	r1, #:upper16:.LC1332
	bl	__mutex_init
	ldr	r0, [r10, #8]
	cmp	r0, #0
	bne	.L17938
	mov	r4, #16
	b	.L17910
.L17936:
	ldr	ip, [r4]
	movw	r1, #:lower16:.LC228
	mov	r3, r4
	sub	r0, r0, #18
	movt	r1, #:upper16:.LC228
	ldr	r2, .L17940+20
	str	ip, [sp]
	bl	__dynamic_pr_debug
	ldr	r3, [r9]
	add	r3, r3, #1
	str	r3, [r9]
	b	.L17915
.L17935:
	str	r1, [sp, #4]
	ldr	ip, [r4]
	movw	r1, #:lower16:.LC1326
	mov	r3, r4
	ldr	r2, .L17940+20
	movt	r1, #:upper16:.LC1326
	ldr	r0, .L17940+24
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L17913
.L17937:
	movw	r0, #:lower16:.LC1334
	mov	r1, #0
	movt	r0, #:upper16:.LC1334
	bl	debugfs_create_dir
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L17922
	ldr	ip, .L17940+28
	movw	r0, #:lower16:.LC250
	mov	r3, #0
	movt	r0, #:upper16:.LC250
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	mov	r0, #0
.L17905:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L17931:
	ldr	r3, [sp, #12]
	movw	r1, #:lower16:.LC1329
	movt	r1, #:upper16:.LC1329
	str	r3, [sp]
	mov	r3, r0
	sub	r0, r2, #32
	ldr	r2, .L17940+32
	bl	__dynamic_pr_debug
	b	.L17906
.L17922:
	mov	r0, #0
	b	.L17905
.L17934:
	movw	r0, #:lower16:.LC1325
	ldr	r1, .L17940+20
	movt	r0, #:upper16:.LC1325
	bl	printk
	movw	r0, #:lower16:.LC1333
	ldr	r1, .L17940+32
	movt	r0, #:upper16:.LC1333
	bl	printk
	ldr	r3, [r9]
	cmp	r3, #0
	beq	.L17912
	ldr	r4, [r9, #24]
	cmp	r4, #0
	beq	.L17917
	add	r0, r9, #28
	bl	platform_driver_unregister
	mov	r0, r4
	bl	kfree
.L17918:
	ldr	r3, [r9]
	cmp	r3, #1
	bls	.L17912
	ldr	r4, [r9, #128]
	cmp	r4, #0
	beq	.L17939
	ldr	r0, .L17940+36
	bl	platform_driver_unregister
	mov	r0, r4
	bl	kfree
.L17912:
	ldr	r0, [r9, #3396]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L17905
.L17933:
	movw	r0, #:lower16:.LC1331
	ldr	r1, .L17940+32
	movt	r0, #:upper16:.LC1331
	bl	printk
	mvn	r0, #11
	b	.L17905
.L17932:
	movw	r0, #:lower16:.LC1330
	ldr	r1, .L17940+32
	mov	r3, #2
	movt	r0, #:upper16:.LC1330
	ldr	r2, [sp, #12]
	bl	printk
	mvn	r0, #21
	b	.L17905
.L17939:
	movw	r0, #:lower16:.LC173
	mov	r2, #1
	ldr	r1, .L17940+40
	movt	r0, #:upper16:.LC173
	bl	printk
	b	.L17912
.L17917:
	movw	r0, #:lower16:.LC173
	mov	r2, r4
	ldr	r1, .L17940+40
	movt	r0, #:upper16:.LC173
	bl	printk
	b	.L17918
.L17941:
	.align	2
.L17940:
	.word	.LANCHOR8-2272
	.word	.LANCHOR7-1240
	.word	.LANCHOR8-2358
	.word	.LANCHOR8-2334
	.word	.LANCHOR1+4048
	.word	.LANCHOR5+1432
	.word	.LANCHOR8-2376
	.word	.LANCHOR5+1500
	.word	.LANCHOR5+1488
	.word	.LANCHOR1+132
	.word	.LANCHOR5+1400
	.fnend
	.size	gsdio_setup, .-gsdio_setup
	.align	2
	.global	gsmd_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_connect, %function
gsmd_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L17958
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r5, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L17953
.L17943:
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r3, [r6, #212]
	cmp	r5, r3
	bcs	.L17954
	cmp	r4, #0
	beq	.L17955
	mov	r3, #104
	mov	r7, #0
	mla	r5, r3, r5, r6
	ldr	r5, [r5, #236]
	add	r8, r5, #4
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	movw	r3, #:lower16:gsmd_notify_modem
	mov	r1, r0
	str	r4, [r5, #68]
	movt	r3, #:upper16:gsmd_notify_modem
	mov	r0, r8
	str	r3, [r4, #140]
	str	r7, [r5, #168]
	str	r7, [r5, #172]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r8, r0, #0
	bne	.L17956
	ldr	r3, [r4, #88]
	str	r5, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r8, r0, #0
	bne	.L17957
	ldr	r3, [r4, #92]
	ldr	r4, [r6, #3400]
	str	r5, [r3]
	bl	msecs_to_jiffies
	mov	r3, r0
	mov	r1, r4
	mov	r0, #4
	add	r2, r5, #76
	bl	queue_delayed_work_on
.L17942:
	mov	r0, r8
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L17953:
	movw	r1, #:lower16:.LC1335
	sub	r0, r3, #24
	ldr	r2, .L17958+4
	movt	r1, #:upper16:.LC1335
	mov	r3, r4
	str	r5, [sp]
	bl	__dynamic_pr_debug
	b	.L17943
.L17954:
	movw	r0, #:lower16:.LC1336
	mov	r2, r5
	ldr	r1, .L17958+4
	movt	r0, #:upper16:.LC1336
	mvn	r8, #21
	bl	printk
	b	.L17942
.L17957:
	movw	r0, #:lower16:.LC927
	ldr	r1, .L17958+4
	movt	r0, #:upper16:.LC927
	ldr	r2, [r4, #92]
	bl	printk
	str	r7, [r5, #68]
	ldr	r3, [r4, #88]
	str	r7, [r3]
	b	.L17942
.L17956:
	movw	r0, #:lower16:.LC926
	ldr	r1, .L17958+4
	movt	r0, #:upper16:.LC926
	ldr	r2, [r4, #88]
	bl	printk
	str	r7, [r5, #68]
	b	.L17942
.L17955:
	movw	r0, #:lower16:.LC174
	ldr	r1, .L17958+4
	mvn	r8, #21
	movt	r0, #:upper16:.LC174
	bl	printk
	b	.L17942
.L17959:
	.align	2
.L17958:
	.word	.LANCHOR8-2256
	.word	.LANCHOR5+1608
	.fnend
	.size	gsmd_connect, .-gsmd_connect
	.align	2
	.global	gsmd_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_disconnect, %function
gsmd_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L17986
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r3, #-14]
	.pad #20
	sub	sp, sp, #20
	tst	r2, #4
	bne	.L17982
.L17961:
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	ldr	r3, [r7, #212]
	cmp	r4, r3
	bcs	.L17983
	cmp	r6, #0
	beq	.L17984
	mov	r3, #104
	mov	r9, #0
	mla	r4, r3, r4, r7
	ldr	r5, [r4, #236]
	add	r8, r5, #4
	add	fp, r5, #12
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r9, [r5, #68]
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r6, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r6, #92]
	str	r9, [r3]
	ldr	r0, [r6, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r6, #88]
	mov	r0, r8
	str	r9, [r3]
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #12]
	str	r0, [sp, #12]
	ldr	r10, [r6, #92]
	cmp	r4, fp
	beq	.L17964
.L17965:
	mov	r0, r4
	sub	r9, r4, #36
	bl	list_del
	ldr	r0, [r4, #-36]
	bl	kfree
	ldr	r3, [r10, #8]
	mov	r1, r9
	mov	r0, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r4, [r5, #12]
	cmp	fp, r4
	bne	.L17965
	ldr	r10, [r6, #92]
.L17964:
	ldr	r4, [r5, #20]
	add	fp, r5, #20
	cmp	fp, r4
	beq	.L17966
.L17967:
	mov	r0, r4
	sub	r9, r4, #36
	bl	list_del
	ldr	r0, [r4, #-36]
	bl	kfree
	ldr	r3, [r10, #8]
	mov	r1, r9
	mov	r0, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r4, [r5, #20]
	cmp	fp, r4
	bne	.L17967
.L17966:
	ldr	r4, [r5, #44]
	add	r10, r5, #44
	ldr	r6, [r6, #88]
	cmp	r4, r10
	beq	.L17968
.L17969:
	mov	r0, r4
	sub	fp, r4, #36
	bl	list_del
	ldr	r0, [r4, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, fp
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r4, [r5, #44]
	cmp	r10, r4
	bne	.L17969
.L17968:
	mov	r4, #0
	mov	r0, r8
	ldr	r1, [sp, #12]
	str	r4, [r5, #8]
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r5, #72]
	mov	r0, r4
	add	r1, r1, #8
	bl	_test_and_clear_bit
	cmp	r0, r4
	bne	.L17985
.L17970:
	ldr	r3, [r5, #72]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L17960
	ldr	r1, [r7, #3400]
	add	r2, r5, #128
	mov	r0, #4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work_on
.L17960:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L17985:
	ldr	r3, [r5, #72]
	str	r4, [r5, #160]
	mov	r1, r4
	mvn	r2, #0
	ldr	r0, [r3]
	bl	smd_tiocmset
	b	.L17970
.L17982:
	movw	r1, #:lower16:.LC1335
	sub	r0, r3, #32
	ldr	r2, .L17986+4
	movt	r1, #:upper16:.LC1335
	mov	r3, r6
	str	r4, [sp]
	bl	__dynamic_pr_debug
	b	.L17961
.L17983:
	ldr	r1, .L17986+4
	movw	r0, #:lower16:.LC173
	mov	r2, r4
	movt	r0, #:upper16:.LC173
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L17984:
	ldr	r1, .L17986+4
	movw	r0, #:lower16:.LC174
	movt	r0, #:upper16:.LC174
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L17987:
	.align	2
.L17986:
	.word	.LANCHOR8-2224
	.word	.LANCHOR5+1624
	.fnend
	.size	gsmd_disconnect, .-gsmd_disconnect
	.align	2
	.global	gsmd_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_setup, %function
gsmd_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18019
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r3, #-6]
	.pad #28
	sub	sp, sp, #28
	str	r1, [sp, #12]
	tst	r2, #4
	bne	.L18010
.L17989:
	ldr	r3, [sp, #12]
	sub	r3, r3, #1
	cmp	r3, #1
	bhi	.L18011
	movw	r2, #:lower16:.LC1339
	mov	r7, #0
	movt	r2, #:upper16:.LC1339
	mov	r1, #10
	movw	r0, #:lower16:.LC84
	mov	r3, r7
	str	r7, [sp]
	str	r2, [sp, #4]
	movt	r1, 2
	movt	r0, #:upper16:.LC84
	mov	r2, #1
	movw	r10, #:lower16:.LANCHOR1
	bl	__alloc_workqueue_key
	movt	r10, #:upper16:.LANCHOR1
	cmp	r0, r7
	str	r0, [r10, #3400]
	beq	.L18012
	movw	r3, #:lower16:kmalloc_caches
	movw	r2, #:lower16:.LC1341
	ldr	r9, .L18019+4
	movt	r3, #:upper16:kmalloc_caches
	movt	r2, #:upper16:.LC1341
	mov	r8, #65024
	add	r5, r10, #216
	movt	r8, 65535
	str	r3, [sp, #16]
	str	r2, [sp, #20]
	b	.L17997
.L18016:
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L18013
.L17993:
	movw	r3, #:lower16:gsmd_rx_push
	add	r0, r4, #12
	str	r7, [r4]
	movt	r3, #:upper16:gsmd_rx_push
	movw	r1, #:lower16:gsmd_tx_pull
	str	r6, [r4, #4]
	movw	ip, #:lower16:gsmd_connect_work
	add	lr, r4, #32
	str	r0, [r4, #12]
	movt	ip, #:upper16:gsmd_connect_work
	add	r2, r4, #56
	str	r0, [r4, #16]
	movt	r1, #:upper16:gsmd_tx_pull
	add	r0, r4, #80
	str	r8, [r4, #28]
	add	fp, r4, #20
	str	r3, [r4, #40]
	add	r3, r4, #44
	str	fp, [r4, #20]
	str	fp, [r4, #24]
	str	lr, [r4, #32]
	str	lr, [r4, #36]
	str	r3, [r4, #44]
	str	r3, [r4, #48]
	mov	r3, r6
	str	r8, [r4, #52]
	str	r2, [r4, #56]
	str	r2, [r4, #60]
	mov	r2, r6
	str	r1, [r4, #64]
	mov	r1, r6
	str	r9, [r4, #72]
	add	r9, r9, #12
	str	r8, [r4, #76]
	str	r0, [r4, #80]
	str	r0, [r4, #84]
	add	r0, r4, #92
	str	ip, [r4, #88]
	bl	init_timer_key
	movw	r0, #:lower16:delayed_work_timer_fn
	movw	r1, #:lower16:gsmd_disconnect_work
	str	r8, [r4, #128]
	movw	r2, #:lower16:gsmd_ch_probe
	movw	r3, #:lower16:gsmd_ch_remove
	add	lr, r4, #132
	movt	r0, #:upper16:delayed_work_timer_fn
	movt	r1, #:upper16:gsmd_disconnect_work
	movt	r2, #:upper16:gsmd_ch_probe
	movt	r3, #:upper16:gsmd_ch_remove
	add	ip, r4, #76
	str	r0, [r4, #108]
	add	r0, r5, #24
	add	r5, r5, #104
	str	ip, [r4, #112]
	str	lr, [r4, #132]
	str	lr, [r4, #136]
	str	r1, [r4, #140]
	str	r4, [r5, #-84]
	strd	r2, [r5, #-80]
	ldr	r3, [r4, #72]
	ldr	r3, [r3, #4]
	str	r3, [r5, #-60]
	str	r6, [r5, #-52]
	bl	platform_driver_register
	ldr	r0, .L18019+8
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L18014
	ldr	r3, [sp, #12]
	add	r7, r7, #1
	cmp	r7, r3
	beq	.L18015
.L17997:
	ldr	r2, .L18019+12
	mov	r0, r5
	mov	r6, #0
	ldr	r1, [sp, #20]
	bl	__mutex_init
	ldr	r0, [sp, #16]
	mov	r2, #176
	movw	r1, #32976
	ldr	r3, [r10, #212]
	ldr	ip, [r0, #8]
	add	r3, r3, #1
	str	r3, [r10, #212]
	cmp	ip, r6
	mov	r0, ip
	bne	.L18016
	mov	r4, #16
	b	.L17993
.L18014:
	movw	r1, #:lower16:.LC607
	mov	r3, r4
	str	r7, [sp]
	sub	r0, r0, #18
	movt	r1, #:upper16:.LC607
	ldr	r2, .L18019+16
	bl	__dynamic_pr_debug
	ldr	r3, [sp, #12]
	add	r7, r7, #1
	cmp	r7, r3
	bne	.L17997
.L18015:
	movw	r0, #:lower16:.LC1343
	mov	r1, #0
	movt	r0, #:upper16:.LC1343
	bl	debugfs_create_dir
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L18001
	ldr	ip, .L18019+20
	movw	r0, #:lower16:.LC250
	mov	r3, #0
	movt	r0, #:upper16:.LC250
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	mov	r0, #0
.L17988:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L18010:
	mov	r2, r1
	movw	r1, #:lower16:.LC1337
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC1337
	mov	r3, r4
	str	r2, [sp]
	ldr	r2, .L18019+24
	bl	__dynamic_pr_debug
	b	.L17989
.L18001:
	mov	r0, #0
	b	.L17988
.L18013:
	ldr	r3, [r10, #212]
	movw	r0, #:lower16:.LC1342
	mov	r2, r7
	movt	r0, #:upper16:.LC1342
	ldr	r1, .L18019+24
	sub	r3, r3, #1
	str	r3, [r10, #212]
	bl	printk
	ldr	r3, [r10, #212]
	cmp	r3, r6
	beq	.L17995
	ldr	r0, [r10, #236]
	cmp	r0, #0
	beq	.L18017
.L17998:
	cmp	r3, #1
	bls	.L17995
	ldr	r0, [r10, #340]
	cmp	r0, #0
	beq	.L18018
.L17995:
	ldr	r0, [r10, #3400]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L17988
.L18017:
	bl	kfree
	ldr	r3, [r10, #212]
	b	.L17998
.L18018:
	bl	kfree
	b	.L17995
.L18012:
	movw	r0, #:lower16:.LC1340
	ldr	r1, .L18019+24
	movt	r0, #:upper16:.LC1340
	bl	printk
	mvn	r0, #11
	b	.L17988
.L18011:
	movw	r0, #:lower16:.LC1338
	mov	r3, r4
	ldr	r1, .L18019+24
	movt	r0, #:upper16:.LC1338
	ldr	r2, [sp, #12]
	bl	printk
	mvn	r0, #21
	b	.L17988
.L18020:
	.align	2
.L18019:
	.word	.LANCHOR8-2208
	.word	.LANCHOR7-1216
	.word	.LANCHOR8-2190
	.word	.LANCHOR1+4048
	.word	.LANCHOR5+1652
	.word	.LANCHOR5+1668
	.word	.LANCHOR5+1640
	.fnend
	.size	gsmd_setup, .-gsmd_setup
	.align	2
	.global	gsmd_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_cleanup, %function
gsmd_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	gsmd_cleanup, .-gsmd_cleanup
	.align	2
	.global	gbam_data_recv_cb
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_recv_cb, %function
gbam_data_recv_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	subs	r5, r1, #0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	beq	.L18022
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #1434
	movt	r3, #:upper16:.LANCHOR4
	mov	r4, r0
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L18035
.L18024:
	add	r6, r4, #8
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r7, r0
	cmp	r3, #0
	beq	.L18027
	movw	r3, #:lower16:.LANCHOR0
	ldr	r2, [r4, #44]
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #2160]
	cmp	r2, r3
	bls	.L18026
	ldr	r3, [r4, #244]
	ldr	r8, .L18037
	add	r3, r3, #1
	mov	r0, r8
	str	r3, [r4, #244]
	bl	__printk_ratelimit
	cmp	r0, #0
	bne	.L18036
.L18027:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_kfree_skb_any
.L18026:
	ldr	r3, [r4, #40]
	add	r2, r4, #36
	mov	r1, r0
	mov	r0, r6
	strd	r2, [r5]
	str	r5, [r3]
	ldr	r3, [r4, #44]
	str	r5, [r4, #40]
	add	r3, r3, #1
	str	r3, [r4, #44]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	gbam_write_data_tohost
.L18022:
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L18035:
	ldr	ip, [r0]
	add	r2, r0, #20
	mov	r3, r0
	ldr	r0, [r5, #80]
	movw	r1, #:lower16:.LC932
	movt	r1, #:upper16:.LC932
	str	ip, [sp]
	str	r2, [sp, #4]
	ldr	r2, .L18037
	str	r0, [sp, #8]
	ldr	r0, .L18037+4
	bl	__dynamic_pr_debug
	b	.L18024
.L18036:
	movw	r0, #:lower16:.LC933
	mov	r1, r8
	ldr	r2, [r4, #244]
	movt	r0, #:upper16:.LC933
	bl	printk
	b	.L18027
.L18038:
	.align	2
.L18037:
	.word	.LANCHOR5-1364
	.word	.LANCHOR4+1416
	.fnend
	.size	gbam_data_recv_cb, .-gbam_data_recv_cb
	.align	2
	.global	gbam_data_write_done
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_write_done, %function
gbam_data_write_done:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r0, r1
	str	r6, [sp, #8]
	add	r5, r4, #4
	str	lr, [sp, #12]
	.pad #16
	sub	sp, sp, #16
	bl	dev_kfree_skb_any
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	movw	r0, #:lower16:.LANCHOR4
	ldr	r3, [r4, #240]
	movw	r2, #1458
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r2, [r0, r2]
	sub	r3, r3, #1
	tst	r2, #4
	str	r3, [r4, #240]
	bne	.L18048
.L18041:
	mov	r1, r6
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR1
	add	r2, r4, #80
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, #4
	ldr	r1, [r3, #3532]
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on
.L18048:
	ldr	lr, [r4]
	add	r2, r4, #20
	movw	r1, #:lower16:.LC934
	ldr	ip, [r4, #260]
	movt	r1, #:upper16:.LC934
	add	r0, r0, #1440
	str	r3, [sp, #8]
	mov	r3, r2
	ldr	r2, .L18049
	str	lr, [sp, #12]
	str	r3, [sp]
	mov	r3, r4
	str	ip, [sp, #4]
	bl	__dynamic_pr_debug
	b	.L18041
.L18050:
	.align	2
.L18049:
	.word	.LANCHOR5-1344
	.fnend
	.size	gbam_data_write_done, .-gbam_data_write_done
	.align	2
	.global	gbam_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_disconnect, %function
gbam_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18087
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r9, r2
	strd	r10, [sp, #24]
	mov	r10, r1
	str	lr, [sp, #32]
	ldrh	r2, [r3, #-6]
	.pad #20
	sub	sp, sp, #20
	tst	r2, #4
	bne	.L18081
.L18052:
	cmp	r9, #5
	beq	.L18082
	sub	r3, r9, #6
	cmp	r3, #1
	bhi	.L18055
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #4048]
	cmp	r10, r3
	bge	.L18083
.L18055:
	cmp	r4, #0
	beq	.L18061
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	add	r3, r5, r10, lsl #2
	ldr	r6, [r3, #3668]
	str	r4, [r6, #16]
.L18060:
	add	r8, r6, #4
	mov	r7, #0
	mov	r0, r8
	add	fp, r6, #8
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, fp
	str	r1, [sp, #12]
	bl	_raw_spin_lock
	mov	r0, fp
	str	r7, [r6, #12]
	str	r7, [r5, #3528]
	bl	_raw_spin_unlock
	ldr	r1, [sp, #12]
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #84]
	bic	r2, r9, #2
	cmp	r2, #5
	str	r7, [r3]
	ldr	r3, [r4, #88]
	str	r7, [r3]
	beq	.L18084
	cmp	r9, #6
	cmpeq	r10, #0
	beq	.L18085
.L18051:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L18082:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r3, [r5, #424]
	cmp	r10, r3
	bge	.L18086
	cmp	r4, #0
	beq	.L18061
	mov	r3, #84
	mla	r3, r3, r10, r5
	ldr	r6, [r3, #428]
	mov	r0, r6
	str	r4, [r6, #16]
	bl	gbam_free_buffers
	b	.L18060
.L18084:
	ldr	r1, [r5, #3532]
	add	r2, r6, #300
	mov	r0, #4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work_on
.L18081:
	movw	r1, #:lower16:.LC1344
	sub	r0, r3, #24
	ldr	r2, .L18087+4
	movt	r1, #:upper16:.LC1344
	mov	r3, r4
	str	r10, [sp]
	bl	__dynamic_pr_debug
	b	.L18052
.L18085:
	mov	r0, r7
	bl	usb_bam_client_ready
	cmp	r0, #0
	beq	.L18051
	movw	r0, #:lower16:.LC1347
	ldr	r1, .L18087+4
	movt	r0, #:upper16:.LC1347
	b	.L18080
.L18083:
	ldr	r1, .L18087+4
	movw	r0, #:lower16:.LC620
	mov	r2, r10
	movt	r0, #:upper16:.LC620
.L18079:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L18061:
	ldr	r1, .L18087+4
	movw	r0, #:lower16:.LC1346
	movt	r0, #:upper16:.LC1346
.L18080:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L18086:
	movw	r0, #:lower16:.LC1345
	mov	r2, r10
	ldr	r1, .L18087+4
	movt	r0, #:upper16:.LC1345
	b	.L18079
.L18088:
	.align	2
.L18087:
	.word	.LANCHOR8-2160
	.word	.LANCHOR5+1776
	.fnend
	.size	gbam_disconnect, .-gbam_disconnect
	.align	2
	.global	gbam_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_connect, %function
gbam_connect:
	.fnstart
	@ args = 4, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	ip, .L18122
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r5, r2
	mov	r7, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	str	r3, [sp, #8]
	ldrb	r3, [sp, #56]	@ zero_extendqisi2
	str	r3, [sp, #12]
	ldrh	r3, [ip, #-14]
	tst	r3, #4
	bne	.L18117
.L18090:
	cmp	r5, #5
	beq	.L18118
	sub	r3, r5, #6
	cmp	r3, #1
	bhi	.L18094
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #4048]
	cmp	r7, r3
	bge	.L18116
.L18094:
	cmp	r4, #0
	beq	.L18101
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	add	r7, r6, r7, lsl #2
	ldr	fp, [r7, #3668]
.L18100:
	ldr	r3, [r4, #84]
	ldr	ip, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [ip]
	blx	r3
	subs	r10, r0, #0
	bne	.L18119
	ldr	r3, [r4, #84]
	str	fp, [r3]
	ldr	r3, [r4, #88]
	ldr	ip, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [ip]
	blx	r3
	subs	r10, r0, #0
	bne	.L18120
	ldr	r1, [r4, #88]
	add	r7, fp, #4
	add	r8, fp, #8
	mov	r0, r7
	str	fp, [r1]
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r0, r8
	bl	_raw_spin_lock
	cmp	r5, #5
	str	r4, [fp, #12]
	beq	.L18121
	mov	r0, r8
	bl	_raw_spin_unlock
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #6
	bne	.L18099
	ldr	r3, [sp, #8]
	str	r4, [fp, #16]
	strb	r3, [fp, #128]
	ldr	r3, [sp, #12]
	strb	r3, [fp, #129]
.L18098:
	add	r2, fp, #284
	mov	r0, #4
	ldr	r1, [r6, #3532]
	str	r5, [fp, #132]
	bl	queue_work_on
.L18089:
	mov	r0, r10
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L18099:
	cmp	r5, #7
	bne	.L18098
	ldr	r3, [sp, #8]
	add	r0, fp, #120
	add	r1, fp, #124
	str	r4, [fp, #16]
	strb	r3, [fp, #136]
	ldr	r3, [sp, #12]
	strd	r0, [fp, #140]
	strb	r3, [fp, #137]
	b	.L18098
.L18118:
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r3, [r6, #424]
	cmp	r7, r3
	bge	.L18116
	cmp	r4, #0
	beq	.L18101
	mov	r3, #84
	mla	r7, r3, r7, r6
	ldr	fp, [r7, #428]
	b	.L18100
.L18121:
	mov	r0, r8
	str	r10, [fp, #240]
	str	r10, [fp, #244]
	str	r10, [fp, #248]
	str	r10, [fp, #260]
	str	r10, [fp, #264]
	str	r10, [fp, #268]
	str	r10, [fp, #272]
	str	r10, [fp, #276]
	str	r10, [fp, #280]
	bl	_raw_spin_unlock
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L18098
.L18117:
	movw	r1, #:lower16:.LC1344
	sub	r0, ip, #32
	ldr	r2, .L18122+4
	movt	r1, #:upper16:.LC1344
	mov	r3, r4
	str	r7, [sp]
	bl	__dynamic_pr_debug
	b	.L18090
.L18116:
	movw	r0, #:lower16:.LC173
	mov	r2, r7
	ldr	r1, .L18122+4
	movt	r0, #:upper16:.LC173
	mvn	r10, #18
	bl	printk
	b	.L18089
.L18119:
	movw	r0, #:lower16:.LC926
	ldr	r1, .L18122+4
	ldr	r2, [r4, #84]
	movt	r0, #:upper16:.LC926
	bl	printk
	b	.L18089
.L18101:
	movw	r0, #:lower16:.LC1346
	ldr	r1, .L18122+4
	mvn	r10, #18
	movt	r0, #:upper16:.LC1346
	bl	printk
	b	.L18089
.L18120:
	movw	r0, #:lower16:.LC927
	ldr	r1, .L18122+4
	ldr	r2, [r4, #88]
	movt	r0, #:upper16:.LC927
	bl	printk
	ldr	r2, [r4, #84]
	mov	r1, #0
	str	r1, [r2]
	b	.L18089
.L18123:
	.align	2
.L18122:
	.word	.LANCHOR8-2128
	.word	.LANCHOR5+1792
	.fnend
	.size	gbam_connect, .-gbam_connect
	.align	2
	.global	gbam_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_setup, %function
gbam_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18177
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r3, #-6]
	.pad #20
	sub	sp, sp, #20
	str	r1, [sp, #12]
	tst	r2, #4
	bne	.L18174
.L18125:
	ldr	r3, [sp, #12]
	orrs	r2, r4, r3
	beq	.L18126
	cmp	r3, #3
	cmpls	r4, #1
	movhi	r3, #1
	movls	r3, #0
	bhi	.L18126
	movw	r0, #:lower16:.LC1350
	mov	r2, #1
	str	r3, [sp]
	movt	r0, #:upper16:.LC1350
	mov	r1, #10
	bl	__alloc_workqueue_key
	movw	r6, #:lower16:.LANCHOR1
	cmp	r0, #0
	movt	r6, #:upper16:.LANCHOR1
	str	r0, [r6, #3532]
	beq	.L18129
	cmp	r4, #0
	beq	.L18131
	movw	r7, #:lower16:kmalloc_caches
	ldr	r3, [r6, #424]
	movt	r7, #:upper16:kmalloc_caches
	ldr	r0, [r7, #36]
	add	r3, r3, #1
	cmp	r0, #0
	str	r3, [r6, #424]
	beq	.L18148
	mov	r2, #348
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L18175
.L18132:
	add	fp, r4, #304
	movw	r10, #:lower16:gbam_data_write_tobam
	ldr	r3, .L18177+4
	movt	r10, #:upper16:gbam_data_write_tobam
	mov	r2, #65024
	str	r4, [r4, #76]
	movt	r2, 65535
	movw	r8, #:lower16:gbam_connect_work
	str	fp, [r4, #308]
	add	fp, r4, #28
	movw	r7, #:lower16:gbam_disconnect_work
	movw	r0, #:lower16:gbam_write_data_tohost_w
	movw	lr, #:lower16:gbam_data_ch_probe
	str	fp, [r4, #28]
	movw	ip, #:lower16:gbam_data_ch_remove
	movw	r1, #:lower16:.LC342
	str	fp, [r4, #32]
	add	fp, r4, #52
	mov	r5, #0
	str	r10, [r4, #92]
	add	r10, r4, #36
	movt	r0, #:upper16:gbam_write_data_tohost_w
	str	r2, [r4, #80]
	movt	lr, #:upper16:gbam_data_ch_probe
	movt	ip, #:upper16:gbam_data_ch_remove
	str	fp, [r4, #52]
	movt	r1, #:upper16:.LC342
	add	r9, r4, #288
	str	r10, [r4, #36]
	movt	r8, #:upper16:gbam_connect_work
	movt	r7, #:upper16:gbam_disconnect_work
	str	r10, [r4, #40]
	add	r10, r4, #60
	str	fp, [r4, #56]
	add	fp, r4, #84
	str	r2, [r4, #96]
	str	r2, [r4, #284]
	str	r2, [r4, #300]
	ldr	r2, [r4, #308]
	str	r5, [r4]
	str	r10, [r4, #60]
	str	r10, [r4, #64]
	mov	r10, #8
	str	fp, [r4, #84]
	str	fp, [r4, #88]
	add	fp, r4, #100
	str	r5, [r4, #4]
	str	r5, [r4, #8]
	str	r5, [r4, #44]
	str	r5, [r4, #48]
	str	r5, [r4, #68]
	str	r5, [r4, #72]
	str	fp, [r4, #100]
	str	fp, [r4, #104]
	str	r0, [r4, #108]
	mov	r0, r3
	str	r9, [r4, #288]
	str	r9, [r4, #292]
	str	r8, [r4, #296]
	str	r2, [r4, #304]
	str	r7, [r4, #312]
	str	r10, [r4, #24]
	str	r4, [r3, #-4]
	str	lr, [r6, #432]
	str	ip, [r3, #4]
	str	r1, [r3, #20]
	str	r5, [r3, #28]
	bl	platform_driver_register
	ldr	r0, .L18177+8
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L18176
.L18131:
	ldr	r3, [sp, #12]
	cmp	r3, #0
	beq	.L18136
	movw	r7, #:lower16:kmalloc_caches
	mov	r5, #65024
	ldr	r8, .L18177+12
	movt	r7, #:upper16:kmalloc_caches
	movt	r5, 65535
	mov	r4, #0
	b	.L18141
.L18139:
	ldr	r3, [sp, #12]
	add	r4, r4, #1
	cmp	r4, r3
	beq	.L18136
.L18141:
	ldr	ip, [r6, #4048]
	mov	r2, #348
	movw	r1, #32976
	ldr	lr, [r7, #36]
	mov	r3, #16
	ldr	r9, .L18177+16
	add	ip, ip, #1
	subs	r0, lr, #0
	str	ip, [r6, #4048]
	beq	.L18137
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L18138
.L18137:
	ldr	lr, .L18177+20
	mov	r2, #0
	str	r4, [r3]
	movw	ip, #:lower16:gbam2bam_connect_work
	movw	r0, #:lower16:gbam2bam_disconnect_work
	str	r2, [r3, #4]
	movt	ip, #:upper16:gbam2bam_connect_work
	movw	r1, #:lower16:gbam2bam_suspend_work
	str	r2, [r3, #8]
	movw	r2, #:lower16:gbam2bam_resume_work
	add	r10, r3, #288
	ldrh	fp, [lr]
	movt	r0, #:upper16:gbam2bam_disconnect_work
	add	lr, r3, #304
	movt	r1, #:upper16:gbam2bam_suspend_work
	movt	r2, #:upper16:gbam2bam_resume_work
	str	r3, [r9, r4, lsl #2]
	str	ip, [r3, #296]
	add	r9, r3, #336
	add	ip, r3, #320
	str	r3, [r3, #76]
	tst	fp, #4
	str	r5, [r3, #284]
	str	r10, [r3, #288]
	str	r10, [r3, #292]
	str	r5, [r3, #300]
	str	lr, [r3, #304]
	str	lr, [r3, #308]
	str	r0, [r3, #312]
	str	r5, [r3, #316]
	str	ip, [r3, #320]
	str	ip, [r3, #324]
	str	r1, [r3, #328]
	str	r5, [r3, #332]
	str	r9, [r3, #336]
	str	r9, [r3, #340]
	str	r2, [r3, #344]
	beq	.L18139
	movw	r1, #:lower16:.LC607
	str	r4, [sp]
	ldr	r2, .L18177+24
	movt	r1, #:upper16:.LC607
	mov	r0, r8
	bl	__dynamic_pr_debug
	ldr	r3, [sp, #12]
	add	r4, r4, #1
	cmp	r4, r3
	bne	.L18141
.L18136:
	movw	r0, #:lower16:.LC1352
	mov	r1, #0
	movt	r0, #:upper16:.LC1352
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r6, #3436]
	beq	.L18143
	cmn	r0, #4096
	bhi	.L18143
	ldr	ip, .L18177+28
	movw	r0, #:lower16:.LC250
	mov	r3, #0
	movt	r0, #:upper16:.LC250
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L18144
	cmn	r0, #4096
	bhi	.L18144
.L18143:
	mov	r0, #0
.L18124:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L18176:
	movw	r1, #:lower16:.LC607
	mov	r3, r4
	ldr	r2, .L18177+32
	movt	r1, #:upper16:.LC607
	str	r5, [sp]
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L18131
.L18148:
	mov	r4, #16
	b	.L18132
.L18144:
	ldr	r0, [r6, #3436]
	bl	debugfs_remove
	mov	r3, #0
	mov	r0, r3
	str	r3, [r6, #3436]
	b	.L18124
.L18174:
	mov	r2, r1
	movw	r1, #:lower16:.LC1348
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC1348
	mov	r3, r4
	str	r2, [sp]
	ldr	r2, .L18177+36
	bl	__dynamic_pr_debug
	b	.L18125
.L18175:
	ldr	r3, [r6, #424]
	movw	r0, #:lower16:.LC1342
	mov	r2, r4
	movt	r0, #:upper16:.LC1342
	ldr	r1, .L18177+36
	sub	r3, r3, #1
	str	r3, [r6, #424]
	bl	printk
.L18140:
	ldr	r3, [r6, #424]
	cmp	r3, #0
	ble	.L18134
	ldr	r0, [r6, #428]
	cmp	r0, #0
	beq	.L18134
	bl	kfree
	ldr	r0, .L18177+4
	bl	platform_driver_unregister
.L18134:
	ldr	r3, [r6, #4048]
	cmp	r3, #0
	ble	.L18146
	ldr	r5, .L18177+16
	mov	r4, #0
.L18147:
	ldr	r0, [r5, r4, lsl #2]
	add	r4, r4, #1
	bl	kfree
	ldr	r3, [r6, #4048]
	cmp	r3, r4
	bgt	.L18147
.L18146:
	ldr	r0, [r6, #3532]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L18124
.L18138:
	ldr	r3, [r6, #4048]
	movw	r0, #:lower16:.LC1342
	mov	r2, r4
	ldr	r1, .L18177+36
	movt	r0, #:upper16:.LC1342
	sub	r3, r3, #1
	str	r3, [r6, #4048]
	bl	printk
	b	.L18140
.L18126:
	movw	r0, #:lower16:.LC1349
	ldr	r1, .L18177+36
	mov	r2, r4
	movt	r0, #:upper16:.LC1349
	ldr	r3, [sp, #12]
	bl	printk
	mvn	r0, #21
	b	.L18124
.L18129:
	movw	r0, #:lower16:.LC1351
	ldr	r1, .L18177+36
	movt	r0, #:upper16:.LC1351
	bl	printk
	mvn	r0, #11
	b	.L18124
.L18178:
	.align	2
.L18177:
	.word	.LANCHOR8-2112
	.word	.LANCHOR1+432
	.word	.LANCHOR8-2080
	.word	.LANCHOR8-2088
	.word	.LANCHOR1+3668
	.word	.LANCHOR8-2070
	.word	.LANCHOR5+1836
	.word	.LANCHOR5+1856
	.word	.LANCHOR5+1820
	.word	.LANCHOR5+1808
	.fnend
	.size	gbam_setup, .-gbam_setup
	.align	2
	.global	gbam_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_cleanup, %function
gbam_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3436]
	b	debugfs_remove_recursive
	.fnend
	.size	gbam_cleanup, .-gbam_cleanup
	.align	2
	.global	gbam_suspend
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_suspend, %function
gbam_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r2, r2, #6
	cmp	r2, #1
	bxhi	lr
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #714
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r0, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	movw	r4, #:lower16:.LANCHOR1
	str	lr, [sp, #12]
	ldrh	r3, [r0, r3]
	movt	r4, #:upper16:.LANCHOR1
	add	r2, r4, r1, lsl #2
	ldr	r5, [r2, #3668]
	tst	r3, #4
	bne	.L18189
.L18182:
	add	r2, r5, #316
	ldr	r1, [r4, #3532]
	mov	r0, #4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on
.L18189:
	mov	r3, r1
	movw	r1, #:lower16:.LC838
	ldr	r2, .L18190
	movt	r1, #:upper16:.LC838
	add	r0, r0, #696
	bl	__dynamic_pr_debug
	b	.L18182
.L18191:
	.align	2
.L18190:
	.word	.LANCHOR5-1740
	.fnend
	.size	gbam_suspend, .-gbam_suspend
	.align	2
	.global	gbam_resume
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_resume, %function
gbam_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r2, r2, #6
	cmp	r2, #1
	bxhi	lr
	ldr	r0, .L18202
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	str	r6, [sp, #8]
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #12]
	add	r2, r4, r1, lsl #2
	ldrh	r3, [r0, #-14]
	ldr	r5, [r2, #3668]
	tst	r3, #4
	bne	.L18201
.L18194:
	add	r2, r5, #332
	ldr	r1, [r4, #3532]
	mov	r0, #4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on
.L18201:
	mov	r3, r1
	movw	r1, #:lower16:.LC597
	ldr	r2, .L18202+4
	movt	r1, #:upper16:.LC597
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L18194
.L18203:
	.align	2
.L18202:
	.word	.LANCHOR4-2608
	.word	.LANCHOR5-3564
	.fnend
	.size	gbam_resume, .-gbam_resume
	.align	2
	.global	gsmd_ctrl_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_connect, %function
gsmd_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18220
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L18218
.L18205:
	uxtb	r3, r5
	cmp	r3, #5
	bhi	.L18206
	movw	r4, #:lower16:.LANCHOR1
	mov	r2, #84
	movt	r4, #:upper16:.LANCHOR1
	mla	r3, r2, r3, r4
	ldr	r3, [r3, #512]
	cmp	r3, #0
	beq	.L18206
	cmp	r6, #0
	beq	.L18219
	mla	r5, r2, r5, r4
	ldr	r5, [r5, #512]
	add	r7, r5, #108
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:grmnet_ctrl_smd_send_cpkt_tomodem
	movw	r3, #:lower16:gsmd_ctrl_send_cbits_tomodem
	str	r6, [r5, #104]
	movt	r2, #:upper16:grmnet_ctrl_smd_send_cpkt_tomodem
	movt	r3, #:upper16:gsmd_ctrl_send_cbits_tomodem
	mov	r1, r0
	mov	r0, r7
	strd	r2, [r6, #96]
	bl	_raw_spin_unlock_irqrestore
	add	r2, r5, #112
	mov	r3, #0
	ldr	r1, [r4, #3484]
	mov	r0, #4
	bl	queue_delayed_work_on
	mov	r0, #0
.L18204:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L18218:
	movw	r1, #:lower16:.LC1344
	sub	r0, r3, #32
	ldr	r2, .L18220+4
	movt	r1, #:upper16:.LC1344
	mov	r3, r6
	str	r5, [sp]
	bl	__dynamic_pr_debug
	b	.L18205
.L18206:
	movw	r0, #:lower16:.LC1353
	mov	r2, r5
	ldr	r1, .L18220+4
	movt	r0, #:upper16:.LC1353
	bl	printk
	mvn	r0, #18
	b	.L18204
.L18219:
	movw	r0, #:lower16:.LC1346
	ldr	r1, .L18220+4
	movt	r0, #:upper16:.LC1346
	bl	printk
	mvn	r0, #18
	b	.L18204
.L18221:
	.align	2
.L18220:
	.word	.LANCHOR8-2032
	.word	.LANCHOR5+1964
	.fnend
	.size	gsmd_ctrl_connect, .-gsmd_ctrl_connect
	.align	2
	.global	gsmd_ctrl_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_disconnect, %function
gsmd_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18245
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r3, #-6]
	.pad #8
	sub	sp, sp, #8
	tst	r2, #4
	bne	.L18242
.L18223:
	cmp	r6, #5
	bhi	.L18224
	movw	r8, #:lower16:.LANCHOR1
	mov	r3, #84
	movt	r8, #:upper16:.LANCHOR1
	mla	r3, r3, r6, r8
	ldr	r5, [r3, #512]
	cmp	r5, #0
	beq	.L18224
	cmp	r4, #0
	beq	.L18243
	add	r9, r5, #108
	add	r7, r5, #40
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r3, #0
	mov	r10, r0
	str	r3, [r5, #104]
	str	r3, [r4, #96]
	str	r3, [r4, #100]
	ldr	r4, [r5, #40]
	str	r3, [r5, #88]
	cmp	r7, r4
	beq	.L18227
.L18228:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
	ldr	r4, [r5, #40]
	cmp	r7, r4
	bne	.L18228
.L18227:
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	add	r1, r5, #8
	mov	r0, #0
	bl	_test_and_clear_bit
	cmp	r0, #0
	bne	.L18244
.L18229:
	ldr	r1, [r8, #3484]
	add	r2, r5, #164
	mov	r3, #0
	mov	r0, #4
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	queue_delayed_work_on
.L18244:
	ldr	r0, [r5]
	ldr	r1, [r5, #88]
	orr	r2, r1, #4
	mvn	r2, r2
	bl	smd_tiocmset
	b	.L18229
.L18242:
	movw	r1, #:lower16:.LC1344
	sub	r0, r3, #24
	ldr	r2, .L18245+4
	movt	r1, #:upper16:.LC1344
	mov	r3, r4
	str	r6, [sp]
	bl	__dynamic_pr_debug
	b	.L18223
.L18224:
	ldr	r1, .L18245+4
	movw	r0, #:lower16:.LC1353
	mov	r2, r6
	movt	r0, #:upper16:.LC1353
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L18243:
	ldr	r1, .L18245+4
	movw	r0, #:lower16:.LC1346
	movt	r0, #:upper16:.LC1346
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L18246:
	.align	2
.L18245:
	.word	.LANCHOR8-2016
	.word	.LANCHOR5+1984
	.fnend
	.size	gsmd_ctrl_disconnect, .-gsmd_ctrl_disconnect
	.align	2
	.global	gsmd_ctrl_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_setup, %function
gsmd_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18284
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r3, #-14]
	.pad #44
	sub	sp, sp, #44
	str	r1, [sp, #12]
	str	r2, [sp, #28]
	tst	r3, #4
	bne	.L18277
.L18248:
	cmp	r4, #1
	bhi	.L18278
	ldr	r3, [sp, #12]
	sub	r3, r3, #1
	cmp	r3, #2
	bhi	.L18279
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r3, [sp, #24]
	ldrb	r3, [r3, #3496]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L18280
.L18252:
	ldr	r2, [sp, #12]
	add	r1, r4, r4, lsl #1
	add	r3, r3, #1
	ldr	r0, [sp, #24]
	mov	r8, r1
	str	r1, [sp, #32]
	add	r2, r1, r2
	cmp	r2, r1
	strb	r3, [r0, #3496]
	bls	.L18254
	movw	r2, #:lower16:kmalloc_caches
	mov	r3, #84
	movt	r2, #:upper16:kmalloc_caches
	movw	r0, #:lower16:grmnet_ctrl_smd_connect_w
	mul	r3, r3, r1
	movt	r0, #:upper16:grmnet_ctrl_smd_connect_w
	mov	r9, #65024
	str	r2, [sp, #16]
	ldr	r2, .L18284+4
	movt	r9, 65535
	mov	fp, #0
	str	r0, [sp, #20]
	str	r3, [sp, #36]
	add	r6, r2, r3
	b	.L18259
.L18283:
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L18281
.L18255:
	add	ip, r4, #116
	mov	r3, r5
	str	r8, [r4, #100]
	mov	r2, r5
	mov	r1, r5
	str	r5, [r4, #108]
	add	r0, r4, #128
	str	r9, [r4, #112]
	ldr	fp, [sp, #8]
	str	ip, [r4, #116]
	str	ip, [r4, #120]
	ldr	ip, [sp, #20]
	str	ip, [r4, #124]
	bl	init_timer_key
	movw	ip, #:lower16:grmnet_ctrl_smd_disconnect_w
	add	r0, r4, #168
	str	r7, [r4, #144]
	movt	ip, #:upper16:grmnet_ctrl_smd_disconnect_w
	add	r3, r4, #112
	mov	r2, r5
	mov	r1, r5
	str	r3, [r4, #148]
	mov	r3, r5
	str	r9, [r4, #164]
	str	r0, [r4, #168]
	str	r0, [r4, #172]
	add	r0, r4, #180
	str	ip, [r4, #176]
	bl	init_timer_key
	add	r3, r10, r8, lsl #2
	add	r0, r4, #164
	ldr	r2, .L18284+8
	movw	r1, #:lower16:.LC1358
	str	r4, [r4, #84]
	ldr	r3, [r3, #2024]
	movt	r1, #:upper16:.LC1358
	str	r3, [r4, #4]
	str	r7, [r4, #196]
	str	r0, [r4, #200]
	add	r0, r4, #12
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC1359
	ldr	r2, .L18284+8
	add	r0, r4, #24
	movt	r1, #:upper16:.LC1359
	bl	__init_waitqueue_head
	ldr	lr, .L18284+12
	movw	r0, #:lower16:grmnet_ctrl_smd_read_w
	add	ip, r4, #40
	movt	r0, #:upper16:grmnet_ctrl_smd_read_w
	movw	r1, #:lower16:grmnet_ctrl_smd_write_w
	movw	r2, #:lower16:grmnet_ctrl_smd_ch_probe
	movw	r3, #:lower16:grmnet_ctrl_smd_ch_remove
	str	ip, [r4, #40]
	str	ip, [r4, #44]
	movt	r3, #:upper16:grmnet_ctrl_smd_ch_remove
	add	ip, r4, #56
	movt	r1, #:upper16:grmnet_ctrl_smd_write_w
	movt	r2, #:upper16:grmnet_ctrl_smd_ch_probe
	ldrh	lr, [lr]
	str	r0, [r4, #64]
	add	r0, r4, #72
	str	r9, [r4, #52]
	str	ip, [r4, #56]
	str	ip, [r4, #60]
	tst	lr, #4
	str	r9, [r4, #68]
	str	r0, [r4, #72]
	str	r0, [r4, #76]
	str	r1, [r4, #80]
	str	r4, [r6]
	strd	r2, [r6, #4]
	ldr	r3, [r4, #4]
	str	r3, [r6, #24]
	str	r5, [r6, #32]
	bne	.L18282
.L18258:
	ldr	r3, [sp, #12]
	add	r8, r8, #1
	add	r6, r6, #84
	cmp	fp, r3
	beq	.L18254
.L18259:
	ldr	r3, [sp, #16]
	mov	r5, #0
	add	r0, fp, #1
	movw	r7, #:lower16:delayed_work_timer_fn
	movw	r10, #:lower16:.LANCHOR5
	str	r0, [sp, #8]
	movt	r7, #:upper16:delayed_work_timer_fn
	movt	r10, #:upper16:.LANCHOR5
	mov	r2, #216
	movw	r1, #32976
	ldr	r3, [r3, #32]
	cmp	r3, r5
	mov	r0, r3
	bne	.L18283
	mov	r4, #16
	b	.L18255
.L18282:
	ldr	r0, .L18284
	movw	r1, #:lower16:.LC607
	mov	r3, r4
	add	r2, r10, #2048
	movt	r1, #:upper16:.LC607
	str	r8, [sp]
	sub	r0, r0, #8
	bl	__dynamic_pr_debug
	b	.L18258
.L18254:
	ldr	r3, [sp, #28]
	cmp	r3, #0
	moveq	r0, r3
	beq	.L18247
	ldr	r2, [sp, #32]
	mov	r0, #0
	strb	r2, [r3]
.L18247:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L18280:
	movw	r0, #:lower16:.LC1356
	str	r3, [sp]
	mov	r2, #1
	movt	r0, #:upper16:.LC1356
	mov	r1, #10
	bl	__alloc_workqueue_key
	ldr	r3, [sp, #24]
	cmp	r0, #0
	str	r0, [r3, #3484]
	beq	.L18253
	ldrb	r3, [r3, #3496]	@ zero_extendqisi2
	b	.L18252
.L18277:
	ldr	r0, .L18284
	mov	r3, r1
	movw	r1, #:lower16:.LC1354
	ldr	r2, .L18284+16
	movt	r1, #:upper16:.LC1354
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L18248
.L18281:
	movw	r0, #:lower16:.LC1342
	mov	r2, r8
	ldr	r1, .L18284+16
	movt	r0, #:upper16:.LC1342
	bl	printk
	cmp	fp, r5
	beq	.L18257
	ldr	r3, [sp, #36]
	add	r5, r3, #4
	ldr	r3, .L18284+4
	add	r5, r3, r5
.L18261:
	ldr	r3, [r5, #-4]
	add	r4, r4, #1
	subs	r0, r3, #0
	beq	.L18260
	bl	kfree
	mov	r0, r5
	bl	platform_driver_unregister
.L18260:
	cmp	fp, r4
	add	r5, r5, #84
	bne	.L18261
.L18257:
	ldr	r2, [sp, #24]
	ldrb	r3, [r2, #3496]	@ zero_extendqisi2
	sub	r3, r3, #1
	uxtb	r3, r3
	cmp	r3, #0
	strb	r3, [r2, #3496]
	mvnne	r0, #11
	bne	.L18247
	ldr	r0, [r2, #3484]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L18247
.L18279:
	movw	r0, #:lower16:.LC1031
	ldr	r1, .L18284+16
	movt	r0, #:upper16:.LC1031
	ldr	r2, [sp, #12]
	bl	printk
	mvn	r0, #21
	b	.L18247
.L18278:
	movw	r0, #:lower16:.LC1355
	mov	r2, r4
	ldr	r1, .L18284+16
	movt	r0, #:upper16:.LC1355
	bl	printk
	mvn	r0, #21
	b	.L18247
.L18253:
	movw	r0, #:lower16:.LC1357
	ldr	r1, .L18284+16
	movt	r0, #:upper16:.LC1357
	bl	printk
	mvn	r0, #11
	b	.L18247
.L18285:
	.align	2
.L18284:
	.word	.LANCHOR8-1984
	.word	.LANCHOR1+512
	.word	.LANCHOR1+4052
	.word	.LANCHOR8-1974
	.word	.LANCHOR5+2008
	.fnend
	.size	gsmd_ctrl_setup, .-gsmd_ctrl_setup
	.align	2
	.global	gqti_ctrl_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_connect, %function
gqti_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18299
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L18297
.L18287:
	cmp	r5, #0
	beq	.L18298
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r4, [r3, #3604]
	add	r6, r4, #52
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:grmnet_ctrl_qti_send_cpkt_tomodem
	movw	r3, #:lower16:gqti_ctrl_notify_modem
	str	r5, [r4]
	movt	r2, #:upper16:grmnet_ctrl_qti_send_cpkt_tomodem
	movt	r3, #:upper16:gqti_ctrl_notify_modem
	mov	r1, r0
	mov	r0, r6
	strd	r2, [r5, #96]
	bl	_raw_spin_unlock_irqrestore
	mov	r1, #1
	add	r0, r4, #32
	mov	r2, r1
	mov	r3, #0
	str	r1, [r4, #8]
	mov	r1, #3
	bl	__wake_up
	cmp	r4, #0
	beq	.L18292
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L18286
	ldr	r4, [r0, #108]
	cmp	r4, #0
	beq	.L18292
	blx	r4
	mov	r0, #0
.L18286:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L18292:
	mov	r0, r4
	b	.L18286
.L18297:
	movw	r1, #:lower16:.LC1360
	sub	r0, r3, #32
	ldr	r2, .L18299+4
	movt	r1, #:upper16:.LC1360
	mov	r3, r5
	bl	__dynamic_pr_debug
	b	.L18287
.L18298:
	movw	r0, #:lower16:.LC1346
	ldr	r1, .L18299+4
	movt	r0, #:upper16:.LC1346
	bl	printk
	mvn	r0, #18
	b	.L18286
.L18300:
	.align	2
.L18299:
	.word	.LANCHOR8-1936
	.word	.LANCHOR5+2076
	.fnend
	.size	gqti_ctrl_connect, .-gqti_ctrl_connect
	.align	2
	.global	gqti_ctrl_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_disconnect, %function
gqti_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L18342
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r5, [r3, #3604]
	ldrh	r3, [r2, #-6]
	tst	r3, #4
	bne	.L18336
.L18302:
	cmp	r6, #0
	beq	.L18337
	cmp	r5, #0
	beq	.L18304
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L18304
	ldr	r3, [r0, #104]
	cmp	r3, #0
	beq	.L18304
	blx	r3
.L18304:
	mov	r4, #0
	mov	r7, r5
	add	r8, r5, #52
	str	r4, [r5, #8]
	mov	r0, r8
	str	r4, [r5, #12]
	bl	_raw_spin_lock_irqsave
	str	r4, [r7], #44
	mov	r9, r0
	str	r4, [r6, #96]
	str	r4, [r6, #100]
	ldr	r4, [r5, #44]
	cmp	r7, r4
	beq	.L18305
.L18306:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
	ldr	r4, [r5, #44]
	cmp	r4, r7
	bne	.L18306
.L18305:
	mov	r1, r9
	mov	r0, r8
	movw	r4, #:lower16:.LANCHOR4
	bl	_raw_spin_unlock_irqrestore
	movt	r4, #:upper16:.LANCHOR4
	movw	r3, #1050
	ldrh	r3, [r4, r3]
	tst	r3, #4
	bne	.L18338
.L18307:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r5, #4]	@ zero_extendqisi2
	mov	r6, r0
	cmp	r3, #0
	beq	.L18339
	movw	r3, #:lower16:kmalloc_caches
	mov	r2, #16
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L18309
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L18340
	mov	r1, #16
	mov	r2, #0
	stm	r3, {r1, r2}
.L18310:
	add	r0, r3, #8
	mov	r2, r7
	ldr	r1, [r5, #48]
	bl	__list_add
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #1074
	ldrh	r3, [r4, r3]
	tst	r3, #4
	bne	.L18341
.L18312:
	add	r0, r5, #32
	mov	r3, #0
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	mov	r2, #1
	mov	r1, #3
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up
.L18309:
	mov	r3, r2
	str	r2, [r0, #16]
	str	r0, [r0, #20]
	b	.L18310
.L18340:
	mvn	r3, #11
	b	.L18310
.L18338:
	movw	r1, #:lower16:.LC858
	ldr	r2, .L18342+4
	movt	r1, #:upper16:.LC858
	ldr	r0, .L18342+8
	bl	__dynamic_pr_debug
	b	.L18307
.L18336:
	movw	r1, #:lower16:.LC1360
	sub	r0, r2, #24
	ldr	r2, .L18342+12
	movt	r1, #:upper16:.LC1360
	mov	r3, r6
	bl	__dynamic_pr_debug
	b	.L18302
.L18341:
	movw	r1, #:lower16:.LC676
	ldr	r2, .L18342+4
	movt	r1, #:upper16:.LC676
	ldr	r0, .L18342+16
	bl	__dynamic_pr_debug
	b	.L18312
.L18339:
	movw	r0, #:lower16:.LC859
	mov	r2, r5
	ldr	r1, .L18342+4
	movt	r0, #:upper16:.LC859
	bl	printk
	ldrd	r4, [sp]
	mov	r1, r6
	mov	r0, r8
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L18337:
	movw	r0, #:lower16:.LC1346
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC1346
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, .L18342+12
	b	printk
.L18343:
	.align	2
.L18342:
	.word	.LANCHOR8-1920
	.word	.LANCHOR5-1648
	.word	.LANCHOR4+1032
	.word	.LANCHOR5+2096
	.word	.LANCHOR4+1056
	.fnend
	.size	gqti_ctrl_disconnect, .-gqti_ctrl_disconnect
	.align	2
	.global	ghsic_ctrl_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_connect, %function
ghsic_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18359
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L18355
.L18345:
	movw	r2, #:lower16:.LANCHOR1
	clz	r3, r6
	movt	r2, #:upper16:.LANCHOR1
	lsr	r3, r3, #5
	ldr	r1, [r2, #1016]
	cmp	r4, r1
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L18356
	mov	r3, #104
	mla	r4, r3, r4, r2
	ldr	r4, [r4, #1020]
	cmp	r4, #0
	beq	.L18357
	add	r7, r4, #4
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #48]
	mov	r1, r0
	cmp	r3, #0
	beq	.L18358
.L18349:
	cmp	r3, #1
	bne	.L18350
	ldr	r0, [r6, #92]
	movw	r2, #:lower16:ghsic_send_cpkt_tomodem
	movw	r3, #:lower16:ghsic_send_cbits_tomodem
	movt	r2, #:upper16:ghsic_send_cpkt_tomodem
	movt	r3, #:upper16:ghsic_send_cbits_tomodem
	str	r0, [r4, #52]
	strd	r2, [r6, #96]
.L18350:
	mov	r5, #0
	mov	r0, r7
	str	r6, [r4, #8]
	str	r5, [r4, #96]
	str	r5, [r4, #100]
	str	r5, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
	add	r2, r4, #16
	mov	r0, #4
	ldr	r1, [r4, #12]
	bl	queue_work_on
	mov	r0, r5
.L18344:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L18358:
	movw	r3, #:lower16:ghsic_send_cbits_tomodem
	movt	r3, #:upper16:ghsic_send_cbits_tomodem
	str	r3, [r6, #140]
	ldr	r3, [r4, #48]
	b	.L18349
.L18355:
	movw	r1, #:lower16:.LC564
	sub	r0, r3, #32
	ldr	r2, .L18359+4
	movt	r1, #:upper16:.LC564
	mov	r3, r4
	bl	__dynamic_pr_debug
	b	.L18345
.L18356:
	movw	r0, #:lower16:.LC173
	mov	r2, r4
	ldr	r1, .L18359+4
	movt	r0, #:upper16:.LC173
	bl	printk
	mvn	r0, #18
	b	.L18344
.L18357:
	movw	r0, #:lower16:.LC114
	ldr	r1, .L18359+4
	movt	r0, #:upper16:.LC114
	bl	printk
	mvn	r0, #18
	b	.L18344
.L18360:
	.align	2
.L18359:
	.word	.LANCHOR8-1888
	.word	.LANCHOR5+2120
	.fnend
	.size	ghsic_ctrl_connect, .-ghsic_ctrl_connect
	.align	2
	.global	ghsic_ctrl_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_disconnect, %function
ghsic_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18375
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L18371
.L18362:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #104
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #1016]
	mla	r3, r2, r5, r3
	cmp	r5, r1
	ldr	r4, [r3, #1020]
	bhi	.L18372
	clz	r3, r4
	cmp	r6, #0
	lsr	r3, r3, #5
	moveq	r5, #1
	movne	r5, r3
	cmp	r5, #0
	bne	.L18373
	ldr	r8, [r4, #48]
	add	r7, r4, #4
	mov	r0, r7
	cmp	r8, #0
	beq	.L18374
	bl	_raw_spin_lock_irqsave
	str	r5, [r6, #96]
	str	r5, [r6, #100]
.L18366:
	mov	r3, #0
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	str	r3, [r4, #52]
	str	r3, [r4, #88]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	add	r2, r4, #32
	mov	r0, #4
	ldr	r1, [r4, #12]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	queue_work_on
.L18374:
	bl	_raw_spin_lock_irqsave
	str	r8, [r6, #140]
	b	.L18366
.L18371:
	movw	r1, #:lower16:.LC564
	sub	r0, r3, #24
	ldr	r2, .L18375+4
	movt	r1, #:upper16:.LC564
	mov	r3, r5
	bl	__dynamic_pr_debug
	b	.L18362
.L18372:
	movw	r0, #:lower16:.LC173
	mov	r2, r5
	ldr	r1, .L18375+4
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC173
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L18373:
	movw	r0, #:lower16:.LC1346
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC1346
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L18375+4
	b	printk
.L18376:
	.align	2
.L18375:
	.word	.LANCHOR8-1872
	.word	.LANCHOR5+2140
	.fnend
	.size	ghsic_ctrl_disconnect, .-ghsic_ctrl_disconnect
	.align	2
	.global	ghsic_ctrl_set_port_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_set_port_name, %function
ghsic_ctrl_set_port_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r2, [r4, #4052]
	str	lr, [sp, #12]
	cmp	r2, #3
	bhi	.L18383
	mov	r3, r0
	add	r5, r4, #1020
	mov	r0, #104
	cmp	r3, #0
	movne	r1, r3
	mla	r2, r0, r2, r5
	add	r0, r2, #84
	mov	r2, #20
	bl	strlcpy
	ldr	r0, [r4, #4052]
	mov	r3, #104
	movw	r1, #:lower16:.LC1362
	movt	r1, #:upper16:.LC1362
	mov	r2, #20
	mla	r0, r3, r0, r5
	add	r0, r0, #84
	bl	strlcat
	ldr	r3, [r4, #4052]
	ldr	r6, [sp, #8]
	add	r3, r3, #1
	str	r3, [r4, #4052]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L18383:
	movw	r0, #:lower16:.LC1361
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC1361
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, .L18384
	b	printk
.L18385:
	.align	2
.L18384:
	.word	.LANCHOR5+2164
	.fnend
	.size	ghsic_ctrl_set_port_name, .-ghsic_ctrl_set_port_name
	.align	2
	.global	ghsic_ctrl_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_setup, %function
ghsic_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r3, r0
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	movw	fp, #:lower16:.LANCHOR1
	strd	r8, [sp, #16]
	movt	fp, #:upper16:.LANCHOR1
	str	lr, [sp, #32]
	.pad #52
	sub	sp, sp, #52
	ldr	r2, [fp, #1016]
	str	r1, [sp, #16]
	add	r1, r2, r0
	cmp	r1, #4
	str	r1, [sp, #8]
	movle	r1, #0
	movgt	r1, #1
	cmp	r0, #0
	str	r2, [sp, #36]
	moveq	r1, #1
	str	r2, [sp, #40]
	cmp	r1, #0
	bne	.L18412
	ldr	r2, .L18418
	ldrh	r2, [r2, #-14]
	tst	r2, #4
	bne	.L18413
.L18389:
	ldr	r3, [sp, #8]
	ldr	r6, [sp, #36]
	cmp	r6, r3
	bcs	.L18386
	mov	r3, #104
	movw	r2, #:lower16:kmalloc_caches
	str	fp, [sp, #12]
	mov	r1, #10
	movw	r0, #:lower16:.LC84
	mul	r3, r3, r6
	mov	ip, #65024
	movt	r2, #:upper16:kmalloc_caches
	movt	r1, 2
	movt	r0, #:upper16:.LC84
	movt	ip, 65535
	str	r2, [sp, #20]
	add	r5, r3, #84
	str	r1, [sp, #24]
	str	r3, [sp, #44]
	ldr	r3, .L18418+4
	str	r0, [sp, #28]
	str	ip, [sp, #32]
	add	r5, r3, r5
	b	.L18397
.L18417:
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L18414
.L18390:
	mov	r3, r7
	mov	r2, #1
	ldr	r1, [sp, #24]
	ldr	r0, [sp, #28]
	str	r7, [sp]
	movw	r8, #:lower16:ghsic_ctrl_status
	str	r5, [sp, #4]
	add	r10, r4, #20
	bl	__alloc_workqueue_key
	mov	r9, r0
	movw	r2, #:lower16:ghsic_ctrl_probe
	cmp	r9, #0
	movw	r3, #:lower16:ghsic_ctrl_remove
	movw	lr, #:lower16:ghsic_ctrl_connect_w
	movw	ip, #:lower16:gctrl_disconnect_w
	str	r9, [r4, #12]
	sub	r0, r5, #80
	movt	r2, #:upper16:ghsic_ctrl_probe
	movt	r3, #:upper16:ghsic_ctrl_remove
	movw	r1, #:lower16:ghsic_ctrl_receive
	movt	lr, #:upper16:ghsic_ctrl_connect_w
	movt	ip, #:upper16:gctrl_disconnect_w
	add	r9, r4, #36
	beq	.L18415
	ldr	fp, [sp, #16]
	movt	r1, #:upper16:ghsic_ctrl_receive
	movt	r8, #:upper16:ghsic_ctrl_status
	str	r7, [r4, #4]
	ldr	r7, [sp, #32]
	str	r6, [r4]
	cmp	fp, #0
	str	r7, [r4, #16]
	streq	r8, [r4, #76]
	str	r10, [r4, #20]
	str	r10, [r4, #24]
	str	lr, [r4, #28]
	str	r7, [r4, #32]
	str	r9, [r4, #36]
	str	r9, [r4, #40]
	str	ip, [r4, #44]
	str	fp, [r4, #48]
	str	r4, [r4, #56]
	str	r5, [r4, #64]
	str	r1, [r4, #72]
	str	r4, [r5, #-84]
	strd	r2, [r5, #-80]
	mov	r3, #0
	str	r5, [r5, #-60]
	str	r3, [r5, #-52]
	bl	platform_driver_register
	ldr	r3, .L18418+8
	ldrh	r3, [r3]
	tst	r3, #4
	bne	.L18416
.L18394:
	ldr	r3, [sp, #8]
	add	r6, r6, #1
	add	r5, r5, #104
	cmp	r3, r6
	bls	.L18386
.L18397:
	ldr	lr, [sp, #12]
	mov	r7, #0
	mov	r2, #108
	ldr	r1, [sp, #20]
	ldr	r3, [lr, #1016]
	ldr	ip, [r1, #28]
	movw	r1, #32976
	add	r3, r3, #1
	cmp	ip, r7
	mov	r0, ip
	str	r3, [lr, #1016]
	bne	.L18417
	mov	r4, #16
	b	.L18390
.L18416:
	ldr	r0, .L18418
	movw	r1, #:lower16:.LC607
	mov	r3, r4
	movt	r1, #:upper16:.LC607
	ldr	r2, .L18418+12
	str	r6, [sp]
	sub	r0, r0, #8
	bl	__dynamic_pr_debug
	b	.L18394
.L18414:
	ldr	fp, [sp, #12]
.L18391:
	ldr	r3, [fp, #1016]
	movw	r0, #:lower16:.LC1342
	mov	r2, r6
	movt	r0, #:upper16:.LC1342
	ldr	r1, .L18418+16
	sub	r3, r3, #1
	str	r3, [fp, #1016]
	bl	printk
	ldr	r2, [sp, #36]
	ldr	r3, [fp, #1016]
	cmp	r2, r3
	bcs	.L18396
	ldr	r3, [sp, #44]
	mov	r5, r2
	add	r4, r3, #4
	ldr	r3, .L18418+4
	add	r4, r3, r4
.L18398:
	ldr	r6, [r4, #-4]
	add	r5, r5, #1
	ldr	r0, [r6, #12]
	bl	destroy_workqueue
	mov	r0, r6
	bl	kfree
	mov	r0, r4
	add	r4, r4, #104
	bl	platform_driver_unregister
	ldr	r3, [fp, #1016]
	cmp	r5, r3
	bcc	.L18398
.L18396:
	mvn	r3, #11
	str	r3, [sp, #36]
	ldr	r3, [sp, #40]
	str	r3, [fp, #1016]
.L18386:
	ldr	r0, [sp, #36]
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L18413:
	ldr	r0, .L18418
	movw	r1, #:lower16:.LC1354
	ldr	r2, .L18418+16
	movt	r1, #:upper16:.LC1354
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L18389
.L18415:
	movw	r0, #:lower16:.LC1363
	mov	r2, r5
	ldr	r1, .L18418+12
	movt	r0, #:upper16:.LC1363
	ldr	fp, [sp, #12]
	bl	printk
	b	.L18391
.L18412:
	mov	r2, r3
	movw	r0, #:lower16:.LC1031
	ldr	r1, .L18418+16
	mvn	r3, #21
	movt	r0, #:upper16:.LC1031
	str	r3, [sp, #36]
	bl	printk
	b	.L18386
.L18419:
	.align	2
.L18418:
	.word	.LANCHOR8-1840
	.word	.LANCHOR1+1020
	.word	.LANCHOR8-1830
	.word	.LANCHOR5+2212
	.word	.LANCHOR5+2192
	.fnend
	.size	ghsic_ctrl_setup, .-ghsic_ctrl_setup
	.align	2
	.global	ghsic_data_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_disconnect, %function
ghsic_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18439
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L18436
.L18421:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #104
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #1436]
	mla	r3, r2, r6, r3
	cmp	r6, r1
	ldr	r4, [r3, #1440]
	bhi	.L18437
	clz	r0, r4
	cmp	r5, #0
	lsr	r0, r0, #5
	moveq	r5, #1
	movne	r5, r0
	cmp	r5, #0
	bne	.L18438
	mov	r0, r4
	bl	ghsic_data_free_buffers.part.49
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L18424
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #8]
	str	r5, [r3]
.L18424:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L18425
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	mov	r2, #0
	str	r2, [r3]
.L18425:
	mov	r5, #0
	add	r8, r4, #48
	mov	r0, r8
	add	r7, r4, #164
	str	r5, [r4, #4]
	add	r6, r4, #80
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r1, r7
	str	r5, [r4, #8]
	mov	r0, #2
	str	r5, [r4, #184]
	bl	_clear_bit
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	mov	r1, r7
	str	r5, [r4, #12]
	mov	r0, #1
	bl	_clear_bit
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	add	r2, r4, #104
	mov	r0, #4
	ldr	r1, [r4, #84]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	queue_work_on
.L18436:
	movw	r1, #:lower16:.LC564
	sub	r0, r3, #32
	ldr	r2, .L18439+4
	movt	r1, #:upper16:.LC564
	mov	r3, r6
	bl	__dynamic_pr_debug
	b	.L18421
.L18437:
	movw	r0, #:lower16:.LC173
	mov	r2, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC173
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, .L18439+4
	b	printk
.L18438:
	movw	r0, #:lower16:.LC114
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC114
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, .L18439+4
	b	printk
.L18440:
	.align	2
.L18439:
	.word	.LANCHOR8-1792
	.word	.LANCHOR5+2232
	.fnend
	.size	ghsic_data_disconnect, .-ghsic_data_disconnect
	.align	2
	.global	ghsic_data_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_connect, %function
ghsic_data_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18460
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L18454
.L18442:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #104
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #1436]
	mla	r3, r2, r6, r3
	cmp	r6, r1
	ldr	r4, [r3, #1440]
	bhi	.L18455
	cmp	r4, #0
	cmpne	r5, #0
	beq	.L18456
	ldr	r3, [r4, #16]
	add	r7, r4, #48
	add	r6, r4, #80
	mov	r0, r7
	cmp	r3, #0
	beq	.L18457
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #84]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #88]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR7
	movt	r3, #:upper16:.LANCHOR7
	ldr	r2, [r3, #-1184]
	ldr	r3, [r3, #-1180]
	str	r2, [r4, #20]
	str	r3, [r4, #52]
	ldr	r3, [r5, #84]
	str	r4, [r3]
	ldr	r3, [r5, #88]
	str	r4, [r3]
.L18447:
	ldr	r3, [r4, #8]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L18458
	ldr	r3, [r4, #12]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L18459
	mov	r3, #1
	mov	r0, r7
	str	r3, [r4, #4]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #192]
	mov	r0, r7
	str	r5, [r4, #196]
	str	r5, [r4, #200]
	str	r5, [r4, #216]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #188]
	mov	r0, r6
	str	r5, [r4, #204]
	str	r5, [r4, #208]
	str	r5, [r4, #212]
	bl	_raw_spin_unlock_irqrestore
	add	r2, r4, #88
	mov	r0, #4
	ldr	r1, [r4, #84]
	bl	queue_work_on
.L18441:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L18457:
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #88]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #92]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR7
	movt	r3, #:upper16:.LANCHOR7
	ldr	r2, [r3, #-1192]
	ldr	r3, [r3, #-1188]
	str	r2, [r4, #20]
	str	r3, [r4, #52]
	ldr	r3, [r5, #88]
	str	r4, [r3]
	ldr	r3, [r5, #92]
	str	r4, [r3]
	b	.L18447
.L18454:
	movw	r1, #:lower16:.LC564
	sub	r0, r3, #24
	ldr	r2, .L18460+4
	movt	r1, #:upper16:.LC564
	mov	r3, r6
	bl	__dynamic_pr_debug
	b	.L18442
.L18459:
	movw	r0, #:lower16:.LC927
	ldr	r1, .L18460+4
	ldr	r2, [r4, #12]
	movt	r0, #:upper16:.LC927
	bl	printk
	ldr	r0, [r4, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L18441
.L18456:
	movw	r0, #:lower16:.LC114
	ldr	r1, .L18460+4
	mvn	r5, #18
	movt	r0, #:upper16:.LC114
	bl	printk
	b	.L18441
.L18455:
	movw	r0, #:lower16:.LC173
	mov	r2, r6
	ldr	r1, .L18460+4
	movt	r0, #:upper16:.LC173
	mvn	r5, #18
	bl	printk
	b	.L18441
.L18458:
	movw	r0, #:lower16:.LC926
	ldr	r1, .L18460+4
	ldr	r2, [r4, #8]
	movt	r0, #:upper16:.LC926
	bl	printk
	b	.L18441
.L18461:
	.align	2
.L18460:
	.word	.LANCHOR8-1776
	.word	.LANCHOR5+2256
	.fnend
	.size	ghsic_data_connect, .-ghsic_data_connect
	.align	2
	.global	ghsic_data_set_port_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_set_port_name, %function
ghsic_data_set_port_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r2, [r4, #4056]
	str	lr, [sp, #12]
	cmp	r2, #3
	bhi	.L18468
	mov	r3, r0
	add	r5, r4, #1440
	mov	r0, #104
	cmp	r3, #0
	movne	r1, r3
	mla	r2, r0, r2, r5
	add	r0, r2, #84
	mov	r2, #20
	bl	strlcpy
	ldr	r0, [r4, #4056]
	mov	r3, #104
	movw	r1, #:lower16:.LC1364
	movt	r1, #:upper16:.LC1364
	mov	r2, #20
	mla	r0, r3, r0, r5
	add	r0, r0, #84
	bl	strlcat
	ldr	r3, [r4, #4056]
	ldr	r6, [sp, #8]
	add	r3, r3, #1
	str	r3, [r4, #4056]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L18468:
	movw	r0, #:lower16:.LC1361
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC1361
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, .L18469
	b	printk
.L18470:
	.align	2
.L18469:
	.word	.LANCHOR5+2276
	.fnend
	.size	ghsic_data_set_port_name, .-ghsic_data_set_port_name
	.align	2
	.global	ghsic_data_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_setup, %function
ghsic_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r2, r3
	strd	r6, [sp, #8]
	mov	r3, r0
	strd	r8, [sp, #16]
	movt	r2, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #60
	sub	sp, sp, #60
	str	r2, [sp, #24]
	ldr	r2, [r2, #1436]
	str	r1, [sp, #28]
	add	r1, r2, r0
	cmp	r1, #4
	str	r1, [sp, #20]
	movle	r1, #0
	movgt	r1, #1
	cmp	r0, #0
	str	r2, [sp, #44]
	moveq	r1, #1
	str	r2, [sp, #48]
	cmp	r1, #0
	bne	.L18496
	ldr	r2, .L18502
	ldrh	r2, [r2, #-14]
	tst	r2, #4
	bne	.L18497
.L18474:
	ldr	r3, [sp, #20]
	ldr	r8, [sp, #44]
	cmp	r8, r3
	bcs	.L18471
	movw	r2, #:lower16:kmalloc_caches
	mov	r3, #104
	movt	r2, #:upper16:kmalloc_caches
	mov	r1, #10
	mul	r3, r3, r8
	movw	r0, #:lower16:.LC84
	mov	fp, #65024
	str	r2, [sp, #32]
	ldr	r2, .L18502+4
	movt	r1, 2
	movt	r0, #:upper16:.LC84
	movt	fp, 65535
	mov	r4, r8
	mov	r6, fp
	str	r1, [sp, #36]
	str	r3, [sp, #52]
	add	r3, r3, #84
	add	r10, r2, r3
	str	r0, [sp, #40]
	mov	r5, r10
	b	.L18481
.L18501:
	bl	kmem_cache_alloc_trace
	subs	r7, r0, #0
	beq	.L18498
.L18475:
	mov	r3, r8
	mov	r2, #1
	ldr	r1, [sp, #36]
	ldr	r0, [sp, #40]
	str	r8, [sp]
	movw	fp, #:lower16:ghsic_data_connect_w
	str	r5, [sp, #4]
	movw	r10, #:lower16:ghsic_data_disconnect_w
	movw	r9, #:lower16:ghsic_data_write_tohost
	bl	__alloc_workqueue_key
	mov	r3, r0
	movw	ip, #:lower16:ghsic_data_write_tomdm
	movw	lr, #:lower16:ghsic_data_receive
	movw	r1, #:lower16:ghsic_data_unthrottle_tx
	str	r3, [sp, #12]
	movw	r2, #:lower16:ghsic_data_probe
	movt	fp, #:upper16:ghsic_data_connect_w
	str	r3, [r7, #84]
	movw	r3, #:lower16:ghsic_data_remove
	movt	r10, #:upper16:ghsic_data_disconnect_w
	movt	r3, #:upper16:ghsic_data_remove
	movt	r9, #:upper16:ghsic_data_write_tohost
	sub	r0, r5, #80
	movt	ip, #:upper16:ghsic_data_write_tomdm
	str	r3, [sp, #16]
	ldr	r3, [sp, #12]
	movt	lr, #:upper16:ghsic_data_receive
	movt	r1, #:upper16:ghsic_data_unthrottle_tx
	movt	r2, #:upper16:ghsic_data_probe
	cmp	r3, #0
	beq	.L18499
	add	r3, r7, #24
	str	r4, [r7]
	str	r3, [r7, #24]
	str	r3, [r7, #28]
	add	r3, r7, #32
	str	r8, [r7, #40]
	str	r3, [r7, #32]
	str	r3, [r7, #36]
	add	r3, r7, #56
	str	r8, [r7, #72]
	str	r3, [r7, #56]
	str	r3, [r7, #60]
	add	r3, r7, #64
	str	r8, [r7, #80]
	str	r8, [r7, #48]
	str	r3, [r7, #64]
	str	r3, [r7, #68]
	add	r3, r7, #92
	str	r8, [r7, #44]
	str	r8, [r7, #76]
	str	r3, [r7, #92]
	str	r3, [r7, #96]
	add	r3, r7, #108
	str	r6, [r7, #88]
	str	fp, [r7, #100]
	str	r3, [r7, #108]
	str	r3, [r7, #112]
	add	r3, r7, #124
	str	r6, [r7, #104]
	str	r10, [r7, #116]
	str	r3, [r7, #124]
	str	r3, [r7, #128]
	add	r3, r7, #140
	str	r6, [r7, #120]
	str	ip, [r7, #132]
	str	r3, [r7, #140]
	str	r3, [r7, #144]
	ldr	r3, [sp, #28]
	str	r6, [r7, #136]
	str	r9, [r7, #148]
	str	r3, [r7, #16]
	ldr	r3, [sp, #16]
	str	r7, [r7, #152]
	str	r5, [r7, #160]
	str	lr, [r7, #168]
	str	r1, [r7, #176]
	str	r7, [r5, #-84]
	str	r2, [r5, #-80]
	str	r3, [r5, #-76]
	str	r5, [r5, #-60]
	str	r8, [r5, #-52]
	bl	platform_driver_register
	ldr	r3, .L18502+8
	ldrh	r3, [r3]
	tst	r3, #4
	bne	.L18500
.L18478:
	ldr	r3, [sp, #20]
	add	r4, r4, #1
	add	r5, r5, #104
	cmp	r3, r4
	bls	.L18471
.L18481:
	ldr	lr, [sp, #24]
	mov	r8, #0
	mov	r2, #220
	ldr	r1, [sp, #32]
	ldr	r3, [lr, #1436]
	ldr	ip, [r1, #32]
	movw	r1, #32976
	add	r3, r3, #1
	cmp	ip, r8
	mov	r0, ip
	str	r3, [lr, #1436]
	bne	.L18501
	mov	r7, #16
	b	.L18475
.L18500:
	ldr	r0, .L18502
	movw	r1, #:lower16:.LC164
	mov	r3, r4
	ldr	r2, .L18502+12
	movt	r1, #:upper16:.LC164
	sub	r0, r0, #8
	bl	__dynamic_pr_debug
	b	.L18478
.L18498:
	mov	r8, r4
.L18476:
	ldr	r4, [sp, #24]
	movw	r0, #:lower16:.LC1342
	mov	r2, r8
	movt	r0, #:upper16:.LC1342
	ldr	r1, .L18502+16
	ldr	r3, [r4, #1436]
	sub	r3, r3, #1
	str	r3, [r4, #1436]
	bl	printk
	ldr	r2, [sp, #44]
	ldr	r3, [r4, #1436]
	cmp	r2, r3
	bcs	.L18480
	ldr	r7, [sp, #24]
	mov	r5, r2
	ldr	r3, [sp, #52]
	add	r4, r3, #4
	ldr	r3, .L18502+4
	add	r4, r3, r4
.L18482:
	ldr	r6, [r4, #-4]
	add	r5, r5, #1
	ldr	r0, [r6, #84]
	bl	destroy_workqueue
	mov	r0, r6
	bl	kfree
	mov	r0, r4
	add	r4, r4, #104
	bl	platform_driver_unregister
	ldr	r3, [r7, #1436]
	cmp	r5, r3
	bcc	.L18482
.L18480:
	mvn	r3, #11
	ldr	r2, [sp, #48]
	str	r3, [sp, #44]
	ldr	r3, [sp, #24]
	str	r2, [r3, #1436]
.L18471:
	ldr	r0, [sp, #44]
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L18497:
	ldr	r0, .L18502
	movw	r1, #:lower16:.LC1365
	ldr	r2, .L18502+16
	movt	r1, #:upper16:.LC1365
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L18474
.L18499:
	movw	r0, #:lower16:.LC1363
	mov	r2, r5
	ldr	r1, .L18502+12
	movt	r0, #:upper16:.LC1363
	mov	r8, r4
	bl	printk
	mov	r0, r7
	bl	kfree
	b	.L18476
.L18496:
	mov	r2, r3
	movw	r0, #:lower16:.LC1031
	ldr	r1, .L18502+16
	mvn	r3, #21
	movt	r0, #:upper16:.LC1031
	str	r3, [sp, #44]
	bl	printk
	b	.L18471
.L18503:
	.align	2
.L18502:
	.word	.LANCHOR8-1744
	.word	.LANCHOR1+1440
	.word	.LANCHOR8-1734
	.word	.LANCHOR5+2324
	.word	.LANCHOR5+2304
	.fnend
	.size	ghsic_data_setup, .-ghsic_data_setup
	.align	2
	.global	ghsuart_ctrl_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_connect, %function
ghsuart_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18519
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L18516
.L18505:
	movw	r3, #:lower16:.LANCHOR1
	clz	r5, r6
	movt	r3, #:upper16:.LANCHOR1
	lsr	r5, r5, #5
	ldr	r2, [r3, #1856]
	cmp	r4, r2
	orrhi	r5, r5, #1
	cmp	r5, #0
	bne	.L18517
	mov	r2, #84
	mla	r4, r2, r4, r3
	ldr	r4, [r4, #1860]
	cmp	r4, #0
	beq	.L18518
	add	r7, r4, #8
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r6, #92]
	movw	r2, #:lower16:ghsuart_send_cpkt_tomodem
	movw	r3, #:lower16:ghsuart_send_cbits_tomodem
	movt	r2, #:upper16:ghsuart_send_cpkt_tomodem
	movt	r3, #:upper16:ghsuart_send_cbits_tomodem
	mov	r1, r0
	mov	r0, r7
	str	ip, [r4, #68]
	strd	r2, [r6, #96]
	str	r6, [r4, #12]
	str	r5, [r4, #96]
	str	r5, [r4, #100]
	str	r5, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #88]
	ubfx	r0, r0, #1, #1
	cmp	r0, #0
	beq	.L18504
	add	r2, r4, #36
	mov	r0, #4
	ldr	r1, [r4, #32]
	bl	queue_work_on
	mov	r0, r5
.L18504:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L18516:
	movw	r1, #:lower16:.LC564
	sub	r0, r3, #32
	ldr	r2, .L18519+4
	movt	r1, #:upper16:.LC564
	mov	r3, r4
	bl	__dynamic_pr_debug
	b	.L18505
.L18517:
	movw	r0, #:lower16:.LC173
	mov	r2, r4
	ldr	r1, .L18519+4
	movt	r0, #:upper16:.LC173
	bl	printk
	mvn	r0, #18
	b	.L18504
.L18518:
	movw	r0, #:lower16:.LC114
	ldr	r1, .L18519+4
	movt	r0, #:upper16:.LC114
	bl	printk
	mvn	r0, #18
	b	.L18504
.L18520:
	.align	2
.L18519:
	.word	.LANCHOR8-1696
	.word	.LANCHOR5+2348
	.fnend
	.size	ghsuart_ctrl_connect, .-ghsuart_ctrl_connect
	.align	2
	.global	ghsuart_ctrl_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_disconnect, %function
ghsuart_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18532
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L18529
.L18522:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #1856]
	cmp	r4, r2
	bhi	.L18530
	mov	r2, #84
	cmp	r6, #0
	mla	r4, r2, r4, r3
	ldr	r5, [r4, #1860]
	clz	r4, r5
	lsr	r4, r4, #5
	moveq	r4, #1
	cmp	r4, #0
	bne	.L18531
	add	r7, r5, #8
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r4, [r6, #96]
	mov	r0, r7
	str	r4, [r6, #100]
	str	r4, [r5, #12]
	str	r4, [r5, #68]
	str	r4, [r5, #92]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	add	r2, r5, #52
	mov	r0, #4
	ldr	r1, [r5, #32]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	queue_work_on
.L18529:
	movw	r1, #:lower16:.LC564
	sub	r0, r3, #24
	ldr	r2, .L18532+4
	movt	r1, #:upper16:.LC564
	mov	r3, r4
	bl	__dynamic_pr_debug
	b	.L18522
.L18530:
	movw	r0, #:lower16:.LC173
	mov	r2, r4
	ldr	r1, .L18532+4
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC173
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L18531:
	movw	r0, #:lower16:.LC1346
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC1346
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, .L18532+4
	b	printk
.L18533:
	.align	2
.L18532:
	.word	.LANCHOR8-1680
	.word	.LANCHOR5+2372
	.fnend
	.size	ghsuart_ctrl_disconnect, .-ghsuart_ctrl_disconnect
	.align	2
	.global	ghsuart_ctrl_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_setup, %function
ghsuart_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r3, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	ldr	r2, [r8, #1856]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	str	r1, [sp, #12]
	add	r1, r2, r0
	cmp	r1, #2
	str	r1, [sp, #8]
	movle	r1, #0
	movgt	r1, #1
	cmp	r0, #0
	str	r2, [sp, #20]
	moveq	r1, #1
	str	r2, [sp, #24]
	cmp	r1, #0
	bne	.L18559
	ldr	r2, .L18565
	ldrh	r2, [r2, #-14]
	tst	r2, #4
	bne	.L18560
.L18537:
	ldr	r3, [sp, #8]
	ldr	r7, [sp, #20]
	cmp	r7, r3
	bcs	.L18534
	ldr	r2, .L18565+4
	mov	r3, #84
	movw	r1, #:lower16:.LC84
	movt	r1, #:upper16:.LC84
	movw	r10, #:lower16:kmalloc_caches
	movw	r9, #:lower16:.LC1366
	mov	fp, #10
	movt	r10, #:upper16:kmalloc_caches
	movt	r9, #:upper16:.LC1366
	str	r1, [sp, #16]
	mla	r3, r3, r7, r2
	movt	fp, 2
	add	r3, r3, #4
	mov	r5, r3
	str	r3, [sp, #28]
	b	.L18544
.L18564:
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L18561
.L18538:
	mov	r3, r6
	mov	r2, #1
	ldr	r0, [sp, #16]
	mov	r1, fp
	stm	sp, {r6, r9}
	bl	__alloc_workqueue_key
	mov	r3, r0
	movw	r1, #:lower16:.LC719
	ldr	r2, .L18565+8
	cmp	r3, #0
	add	r0, r4, #20
	movt	r1, #:upper16:.LC719
	str	r3, [r4, #32]
	beq	.L18562
	ldr	r3, [sp, #12]
	str	r7, [r4]
	str	r3, [r4, #4]
	str	r6, [r4, #8]
	str	r6, [r4, #16]
	bl	__init_waitqueue_head
	mov	r3, #65024
	add	r2, r4, #40
	movt	r3, 65535
	movw	lr, #:lower16:ghsuart_ctrl_connect_w
	movt	lr, #:upper16:ghsuart_ctrl_connect_w
	movw	r0, #:lower16:ghsuart_ctrl_disconnect_w
	str	r3, [r4, #36]
	movw	r1, #:lower16:ghsuart_ctrl_receive
	add	ip, r4, #56
	str	r2, [r4, #40]
	movt	r0, #:upper16:ghsuart_ctrl_disconnect_w
	movt	r1, #:upper16:ghsuart_ctrl_receive
	str	r2, [r4, #44]
	movw	r2, #:lower16:ghsuart_ctrl_probe
	str	lr, [r4, #48]
	movt	r2, #:upper16:ghsuart_ctrl_probe
	mov	lr, #42
	str	r3, [r4, #52]
	movw	r3, #:lower16:ghsuart_ctrl_remove
	movt	r3, #:upper16:ghsuart_ctrl_remove
	str	ip, [r4, #56]
	str	ip, [r4, #60]
	str	r0, [r4, #64]
	mov	r0, r5
	str	r4, [r4, #72]
	str	lr, [r4, #76]
	str	r1, [r4, #84]
	str	r4, [r5, #-4]
	strd	r2, [r5]
	str	r9, [r5, #20]
	str	r6, [r5, #28]
	bl	platform_driver_register
	cmp	r0, #0
	ldr	r3, .L18565+12
	blt	.L18556
	ldrh	r3, [r3]
	tst	r3, #4
	bne	.L18563
.L18541:
	ldr	r3, [sp, #8]
	add	r7, r7, #1
	add	r5, r5, #84
	cmp	r3, r7
	bls	.L18534
.L18544:
	ldr	r3, [r8, #1856]
	mov	r6, #0
	mov	r2, #108
	ldr	ip, [r10, #28]
	movw	r1, #32976
	add	r3, r3, #1
	cmp	ip, r6
	mov	r0, ip
	str	r3, [r8, #1856]
	bne	.L18564
	mov	r4, #16
	b	.L18538
.L18556:
	mov	r6, r0
.L18539:
	ldr	r3, [r8, #1856]
	movw	r0, #:lower16:.LC1342
	mov	r2, r7
	movt	r0, #:upper16:.LC1342
	ldr	r1, .L18565+16
	sub	r3, r3, #1
	str	r3, [r8, #1856]
	bl	printk
	ldr	r2, [sp, #20]
	ldr	r3, [r8, #1856]
	cmp	r2, r3
	bcs	.L18543
	ldr	r4, [sp, #28]
	mov	r5, r2
.L18542:
	ldr	r7, [r4, #-4]
	add	r5, r5, #1
	ldr	r0, [r7, #32]
	bl	destroy_workqueue
	mov	r0, r4
	add	r4, r4, #84
	bl	platform_driver_unregister
	mov	r0, r7
	bl	kfree
	ldr	r3, [r8, #1856]
	cmp	r5, r3
	bcc	.L18542
.L18543:
	ldr	r3, [sp, #24]
	str	r6, [sp, #20]
	str	r3, [r8, #1856]
.L18534:
	ldr	r0, [sp, #20]
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L18563:
	ldr	r0, .L18565
	movw	r1, #:lower16:.LC607
	mov	r3, r4
	movt	r1, #:upper16:.LC607
	ldr	r2, .L18565+20
	str	r7, [sp]
	sub	r0, r0, #8
	bl	__dynamic_pr_debug
	b	.L18541
.L18560:
	ldr	r0, .L18565
	movw	r1, #:lower16:.LC1354
	ldr	r2, .L18565+16
	movt	r1, #:upper16:.LC1354
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L18537
.L18561:
	mvn	r6, #11
	b	.L18539
.L18562:
	movw	r2, #:lower16:.LC1366
	movw	r0, #:lower16:.LC1363
	ldr	r1, .L18565+20
	movt	r2, #:upper16:.LC1366
	movt	r0, #:upper16:.LC1363
	bl	printk
	mov	r0, r4
	mvn	r6, #11
	bl	kfree
	b	.L18539
.L18559:
	mov	r2, r3
	movw	r0, #:lower16:.LC1031
	ldr	r1, .L18565+16
	mvn	r3, #21
	movt	r0, #:upper16:.LC1031
	str	r3, [sp, #20]
	bl	printk
	b	.L18534
.L18566:
	.align	2
.L18565:
	.word	.LANCHOR8-1648
	.word	.LANCHOR1+1860
	.word	.LANCHOR1+3972
	.word	.LANCHOR8-1638
	.word	.LANCHOR5+2396
	.word	.LANCHOR5+2416
	.fnend
	.size	ghsuart_ctrl_setup, .-ghsuart_ctrl_setup
	.align	2
	.global	event_string
	.syntax unified
	.arm
	.fpu softvfp
	.type	event_string, %function
event_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #8
	bhi	.L18569
	movw	r3, #:lower16:.LANCHOR5
	movt	r3, #:upper16:.LANCHOR5
	add	r3, r3, r0, lsl #2
	ldr	r0, [r3, #2440]
	bx	lr
.L18569:
	movw	r0, #:lower16:.LC182
	movt	r0, #:upper16:.LC182
	bx	lr
	.fnend
	.size	event_string, .-event_string
	.align	2
	.global	ghsuart_data_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_disconnect, %function
ghsuart_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18591
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L18587
.L18571:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #84
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #2028]
	mla	r3, r2, r5, r3
	cmp	r5, r1
	ldr	r4, [r3, #2032]
	bhi	.L18588
	clz	r3, r4
	cmp	r6, #0
	lsr	r3, r3, #5
	moveq	r5, #1
	movne	r5, r3
	cmp	r5, #0
	bne	.L18589
	mov	r0, r4
	bl	ghsuart_data_free_buffers.part.50
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L18574
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #8]
	str	r5, [r3]
.L18574:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L18575
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	mov	r2, #0
	str	r2, [r3]
.L18575:
	ldr	r5, [r4, #16]
	mov	r3, #0
	str	r3, [r4, #4]
	cmp	r5, r3
	beq	.L18590
.L18576:
	add	r8, r4, #72
	mov	r5, #0
	mov	r0, r8
	add	r7, r4, #184
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r1, r7
	str	r5, [r4, #8]
	mov	r0, #2
	str	r5, [r4, #192]
	add	r6, r4, #104
	bl	_clear_bit
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	mov	r1, r7
	str	r5, [r4, #12]
	mov	r0, #1
	bl	_clear_bit
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldrd	r6, [sp, #8]
	add	r2, r4, #128
	mov	r0, #4
	ldr	r1, [r4, #108]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	queue_work_on
.L18590:
	add	r7, r4, #20
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r6, #140]
	mov	r0, r7
	str	r5, [r4, #24]
	str	r5, [r4, #196]
	bl	_raw_spin_unlock_irqrestore
	b	.L18576
.L18587:
	movw	r1, #:lower16:.LC564
	sub	r0, r3, #32
	ldr	r2, .L18591+4
	movt	r1, #:upper16:.LC564
	mov	r3, r5
	bl	__dynamic_pr_debug
	b	.L18571
.L18588:
	movw	r0, #:lower16:.LC173
	mov	r2, r5
	ldr	r1, .L18591+4
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC173
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L18589:
	movw	r0, #:lower16:.LC114
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	movt	r0, #:upper16:.LC114
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, .L18591+4
	b	printk
.L18592:
	.align	2
.L18591:
	.word	.LANCHOR8-1600
	.word	.LANCHOR5+2476
	.fnend
	.size	ghsuart_data_disconnect, .-ghsuart_data_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_disable, %function
frmnet_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18642
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #20
	sub	sp, sp, #20
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L18637
.L18594:
	ldr	r0, [r5, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r5, #136]
	mov	r3, #0
	ldr	r0, .L18642+4
	str	r3, [r2]
	ldrh	r2, [r0, #-14]
	str	r3, [r5, #120]
	tst	r2, #4
	bne	.L18638
.L18595:
	add	r8, r5, #132
	add	r7, r5, #144
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #144]
	mov	r9, r0
	cmp	r7, r4
	beq	.L18596
.L18597:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
	ldr	r4, [r5, #144]
	cmp	r7, r4
	bne	.L18597
.L18596:
	mov	r3, #0
	mov	r0, r8
	mov	r1, r9
	movw	r4, #:lower16:.LANCHOR1
	str	r3, [r5, #152]
	movt	r4, #:upper16:.LANCHOR1
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, .L18642+8
	ldrb	r0, [r5, #116]	@ zero_extendqisi2
	ldrh	r1, [r3, #-14]
	lsl	r3, r0, #1
	add	r2, r3, r0
	add	r2, r4, r2, lsl #3
	tst	r1, #4
	ldr	r6, [r2, #3316]
	ldr	r8, [r2, #3320]
	bne	.L18639
.L18598:
	add	r1, r3, r0
	sub	r2, r8, #3
	add	r1, r4, r1, lsl #3
	ldr	r7, [r1, #3328]
	cmp	r2, #7
	ldrls	pc, [pc, r2, asl #2]
	b	.L18601
.L18603:
	.word	.L18602
	.word	.L18604
	.word	.L18601
	.word	.L18601
	.word	.L18601
	.word	.L18605
	.word	.L18606
	.word	.L18607
.L18606:
	ldr	r0, .L18642+12
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L18608
	movw	r1, #:lower16:.LC564
	sub	r0, r0, #24
	ldr	r2, .L18642+16
	movt	r1, #:upper16:.LC564
	mov	r3, r7
	bl	__dynamic_pr_debug
.L18608:
	ldr	r3, [r4, #1856]
	cmp	r7, r3
	bhi	.L18640
	mov	r3, #84
	cmp	r5, #0
	mla	r7, r3, r7, r4
	ldr	r8, [r7, #1860]
	clz	r7, r8
	lsr	r7, r7, #5
	moveq	r7, #1
	cmp	r7, #0
	bne	.L18641
	add	r9, r8, #8
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r7, [r5, #96]
	mov	r0, r9
	str	r7, [r5, #100]
	str	r7, [r8, #12]
	str	r7, [r8, #68]
	str	r7, [r8, #92]
	bl	_raw_spin_unlock_irqrestore
	add	r2, r8, #52
	mov	r0, #4
	ldr	r1, [r8, #32]
	bl	queue_work_on
	ldrb	r0, [r5, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
.L18607:
	add	r0, r3, r0
	add	r4, r4, r0, lsl #3
	sub	r3, r6, #5
	ldr	r1, [r4, #3324]
	cmp	r3, #5
	ldrls	pc, [pc, r3, asl #2]
	b	.L18612
.L18614:
	.word	.L18613
	.word	.L18613
	.word	.L18613
	.word	.L18615
	.word	.L18616
	.word	.L18593
.L18616:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	ghsuart_data_disconnect
.L18615:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	ghsic_data_disconnect
.L18613:
	uxtb	r1, r1
	mov	r2, r6
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	gbam_disconnect
.L18593:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L18605:
	mov	r0, r5
	mov	r1, r7
	bl	ghsic_ctrl_disconnect
	ldrb	r0, [r5, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L18607
.L18602:
	mov	r0, r5
	uxtb	r1, r7
	bl	gsmd_ctrl_disconnect
	ldrb	r0, [r5, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L18607
.L18604:
	mov	r0, r5
	bl	gqti_ctrl_disconnect
	ldrb	r0, [r5, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L18607
.L18638:
	movw	r1, #:lower16:.LC564
	ldrb	r3, [r5, #116]	@ zero_extendqisi2
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC564
	ldr	r2, .L18642+20
	bl	__dynamic_pr_debug
	b	.L18595
.L18639:
	sub	r2, r8, #1
	cmp	r2, #9
	movwhi	r3, #:lower16:.LC182
	movthi	r3, #:upper16:.LC182
	bhi	.L18599
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r3, r3, r2, lsl #2
	ldr	r3, [r3, #1100]
.L18599:
	sub	r1, r6, #1
	cmp	r1, #9
	movwhi	r2, #:lower16:.LC182
	movthi	r2, #:upper16:.LC182
	bhi	.L18600
	movw	r2, #:lower16:.LANCHOR3
	movt	r2, #:upper16:.LANCHOR3
	add	r2, r2, r1, lsl #2
	ldr	r2, [r2, #1100]
.L18600:
	movw	r1, #:lower16:.LC1367
	stm	sp, {r2, r5}
	ldr	r2, .L18642+24
	str	r0, [sp, #8]
	movt	r1, #:upper16:.LC1367
	ldr	r0, .L18642
	bl	__dynamic_pr_debug
	ldrb	r0, [r5, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L18598
.L18637:
	movw	r1, #:lower16:.LC564
	sub	r0, r3, #24
	ldr	r2, .L18642+28
	ldrb	r3, [r5, #116]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC564
	bl	__dynamic_pr_debug
	b	.L18594
.L18601:
	sub	r8, r8, #1
	cmp	r8, #9
	bhi	.L18622
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r8, r3, r8, lsl #2
	ldr	r2, [r8, #1100]
.L18618:
	ldr	r1, .L18642+24
	movw	r0, #:lower16:.LC598
	movt	r0, #:upper16:.LC598
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk
.L18612:
	sub	r6, r6, #1
	cmp	r6, #9
	bhi	.L18622
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r6, r3, r6, lsl #2
	ldr	r2, [r6, #1100]
	b	.L18618
.L18622:
	movw	r2, #:lower16:.LC182
	movt	r2, #:upper16:.LC182
	b	.L18618
.L18640:
	movw	r0, #:lower16:.LC173
	mov	r2, r7
	ldr	r1, .L18642+16
	movt	r0, #:upper16:.LC173
	bl	printk
	ldrb	r0, [r5, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L18607
.L18641:
	movw	r0, #:lower16:.LC1346
	ldr	r1, .L18642+16
	movt	r0, #:upper16:.LC1346
	bl	printk
	ldrb	r0, [r5, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L18607
.L18643:
	.align	2
.L18642:
	.word	.LANCHOR8-1584
	.word	.LANCHOR4-2848
	.word	.LANCHOR8-1552
	.word	.LANCHOR8-1680
	.word	.LANCHOR5+2372
	.word	.LANCHOR5-3988
	.word	.LANCHOR5+2516
	.word	.LANCHOR5+2500
	.fnend
	.size	frmnet_disable, .-frmnet_disable
	.align	2
	.global	ghsuart_data_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_connect, %function
ghsuart_data_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18663
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L18657
.L18645:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #84
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #2028]
	mla	r3, r2, r6, r3
	cmp	r6, r1
	ldr	r4, [r3, #2032]
	bhi	.L18658
	cmp	r4, #0
	cmpne	r5, #0
	beq	.L18659
	ldr	r3, [r4, #16]
	add	r7, r4, #72
	add	r6, r4, #104
	mov	r0, r7
	cmp	r3, #0
	beq	.L18660
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #84]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #88]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR7
	movt	r3, #:upper16:.LANCHOR7
	ldr	r2, [r3, #-1168]
	ldr	r3, [r3, #-1164]
	str	r2, [r4, #44]
	str	r3, [r4, #76]
	ldr	r3, [r5, #84]
	str	r4, [r3]
	ldr	r3, [r5, #88]
	str	r4, [r3]
.L18650:
	ldr	r3, [r4, #8]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L18661
	ldr	r3, [r4, #12]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L18662
	mov	r3, #1
	mov	r0, r7
	str	r3, [r4, #4]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #208]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	str	r5, [r4, #204]
	mov	r0, r6
	str	r5, [r4, #212]
	bl	_raw_spin_unlock_irqrestore
	add	r2, r4, #112
	mov	r0, #4
	ldr	r1, [r4, #108]
	bl	queue_work_on
.L18644:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L18660:
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #88]
	mov	r1, r0
	mov	r0, r7
	add	r8, r4, #20
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #92]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR7
	mov	r0, r8
	movt	r3, #:upper16:.LANCHOR7
	ldr	r2, [r3, #-1176]
	ldr	r3, [r3, #-1172]
	str	r2, [r4, #44]
	str	r3, [r4, #76]
	ldr	r3, [r5, #88]
	str	r4, [r3]
	ldr	r3, [r5, #92]
	str	r4, [r3]
	bl	_raw_spin_lock_irqsave
	movw	r3, #:lower16:ghsuart_send_controlbits_tomodem
	mov	r1, r0
	movt	r3, #:upper16:ghsuart_send_controlbits_tomodem
	mov	r0, r8
	str	r3, [r5, #140]
	str	r5, [r4, #24]
	bl	_raw_spin_unlock_irqrestore
	b	.L18650
.L18657:
	movw	r1, #:lower16:.LC564
	sub	r0, r3, #24
	ldr	r2, .L18663+4
	movt	r1, #:upper16:.LC564
	mov	r3, r6
	bl	__dynamic_pr_debug
	b	.L18645
.L18662:
	movw	r0, #:lower16:.LC927
	ldr	r1, .L18663+4
	ldr	r2, [r4, #12]
	movt	r0, #:upper16:.LC927
	bl	printk
	ldr	r0, [r4, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L18644
.L18659:
	movw	r0, #:lower16:.LC114
	ldr	r1, .L18663+4
	mvn	r5, #18
	movt	r0, #:upper16:.LC114
	bl	printk
	b	.L18644
.L18658:
	movw	r0, #:lower16:.LC173
	mov	r2, r6
	ldr	r1, .L18663+4
	movt	r0, #:upper16:.LC173
	mvn	r5, #18
	bl	printk
	b	.L18644
.L18661:
	movw	r0, #:lower16:.LC926
	ldr	r1, .L18663+4
	ldr	r2, [r4, #8]
	movt	r0, #:upper16:.LC926
	bl	printk
	b	.L18644
.L18664:
	.align	2
.L18663:
	.word	.LANCHOR8-1536
	.word	.LANCHOR5+2540
	.fnend
	.size	ghsuart_data_connect, .-ghsuart_data_connect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_set_alt, %function
frmnet_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	ldr	r6, .L18800
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r5, [r0, #128]
	ldrh	r3, [r6, #-14]
	tst	r3, #4
	bne	.L18786
.L18666:
	ldr	r2, [r4, #136]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L18667
	ldr	r3, .L18800+4
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L18787
.L18668:
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #136]
.L18667:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	subs	r9, r0, #0
	bne	.L18788
	ldr	r3, [r4, #136]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r9, r0, #0
	bne	.L18789
	ldr	r3, [r4, #136]
	str	r4, [r3]
	ldr	r2, [r4, #84]
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L18672
	ldr	r3, [r4, #88]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L18672
.L18673:
	mov	r3, #1
	mov	r7, r4
	str	r3, [r4, #120]
	ldr	r5, [r7, #144]!
	cmp	r7, r5
	beq	.L18665
	ldr	r8, .L18800+8
	movw	fp, #:lower16:.LC1054
	add	r6, r4, #132
	movt	fp, #:upper16:.LC1054
.L18721:
	ldrh	r3, [r8]
	ldr	r10, [r4, #140]
	tst	r3, #4
	bne	.L18790
.L18711:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #120]
	clz	r3, r10
	lsr	r3, r3, #5
	cmp	r2, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L18785
	ldr	r2, [r10]
	cmp	r2, #0
	beq	.L18785
	ldr	r2, [r4, #152]
	add	r2, r2, #1
	cmp	r2, #1
	str	r2, [r4, #152]
	beq	.L18715
.L18785:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L18714:
	ldr	r5, [r5]
	cmp	r7, r5
	bne	.L18721
.L18665:
	mov	r0, r9
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L18715:
	ldr	ip, [r10]
	mvn	lr, #94
	mov	r1, r0
	mov	r0, r6
	strb	lr, [ip]
	strb	r2, [ip, #1]
	strb	r3, [ip, #2]
	strb	r3, [ip, #3]
	ldrh	r2, [r4, #112]
	strh	r2, [ip, #4]	@ unaligned
	strb	r3, [ip, #6]
	strb	r3, [ip, #7]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r0, [r4, #136]
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r10, r0, #0
	beq	.L18714
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #144]
	str	r0, [sp, #20]
	cmp	r7, r2
	beq	.L18717
	ldr	r3, [r4, #152]
	cmp	r3, #0
	bne	.L18791
	ldr	r0, .L18800+12
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L18792
.L18719:
	mov	r0, r6
	ldr	r1, [sp, #20]
	bl	_raw_spin_unlock_irqrestore
	b	.L18714
.L18790:
	ldrb	ip, [r4, #116]	@ zero_extendqisi2
	mov	r3, r4
	mov	r1, fp
	ldr	r2, .L18800+16
	ldr	r0, .L18800+20
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L18711
.L18672:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L18675
	mov	r1, r4
	ldr	r2, [r4, #88]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L18675
	ldr	r3, .L18800+24
	movw	r5, #:lower16:.LANCHOR1
	ldrb	r0, [r4, #116]	@ zero_extendqisi2
	movt	r5, #:upper16:.LANCHOR1
	ldr	r2, [r4, #128]
	ldrh	r1, [r3, #-14]
	lsl	r3, r0, #1
	ldr	r8, [r2]
	add	r2, r3, r0
	add	r2, r5, r2, lsl #3
	tst	r1, #4
	ldr	r6, [r2, #3316]
	ldr	r7, [r2, #3320]
	bne	.L18793
.L18676:
	add	r1, r3, r0
	sub	r2, r7, #3
	add	r1, r5, r1, lsl #3
	ldr	r10, [r1, #3328]
	cmp	r2, #7
	ldrls	pc, [pc, r2, asl #2]
	b	.L18679
.L18681:
	.word	.L18680
	.word	.L18682
	.word	.L18679
	.word	.L18679
	.word	.L18679
	.word	.L18683
	.word	.L18684
	.word	.L18685
.L18680:
	ldr	r0, .L18800+28
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L18794
.L18686:
	uxtb	r2, r10
	cmp	r2, #5
	bhi	.L18687
	mov	r3, #84
	mla	r2, r3, r2, r5
	ldr	r2, [r2, #512]
	cmp	r2, #0
	beq	.L18687
	cmp	r4, #0
	beq	.L18795
	mla	r3, r3, r10, r5
	ldr	r10, [r3, #512]
	add	fp, r10, #108
	mov	r0, fp
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:grmnet_ctrl_smd_send_cpkt_tomodem
	movw	r3, #:lower16:gsmd_ctrl_send_cbits_tomodem
	str	r4, [r10, #104]
	movt	r2, #:upper16:grmnet_ctrl_smd_send_cpkt_tomodem
	movt	r3, #:upper16:gsmd_ctrl_send_cbits_tomodem
	mov	r1, r0
	mov	r0, fp
	strd	r2, [r4, #96]
	bl	_raw_spin_unlock_irqrestore
	mov	r3, #0
	add	r2, r10, #112
	ldr	r1, [r5, #3484]
	mov	r0, #4
	bl	queue_delayed_work_on
	ldrb	r0, [r4, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
.L18685:
	add	r3, r3, r0
	add	r5, r5, r3, lsl #3
	sub	r2, r6, #5
	ldr	r5, [r5, #3324]
	cmp	r2, #5
	ldrls	pc, [pc, r2, asl #2]
	b	.L18698
.L18700:
	.word	.L18699
	.word	.L18701
	.word	.L18702
	.word	.L18703
	.word	.L18704
	.word	.L18725
.L18791:
	sub	r3, r3, #1
	mov	r0, r2
	str	r2, [sp, #28]
	str	r3, [r4, #152]
	sub	r3, r2, #8
	str	r3, [sp, #24]
	bl	list_del
	ldr	r2, [sp, #28]
	ldr	r0, [r2, #-8]
	bl	kfree
	ldr	r3, [sp, #24]
	mov	r0, r3
	bl	kfree
.L18717:
	mov	r0, r6
	ldr	r1, [sp, #20]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, .L18800+32
	ldrh	r3, [r0]
	tst	r3, #4
	beq	.L18714
	movw	r1, #:lower16:.LC161
	mov	r2, r10
	movt	r1, #:upper16:.LC161
	sub	r0, r0, #18
	bl	__dynamic_pr_debug
	b	.L18714
.L18684:
	mov	r1, r10
	mov	r0, r4
	bl	ghsuart_ctrl_connect
	subs	r2, r0, #0
	bne	.L18696
.L18784:
	ldrb	r0, [r4, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L18685
.L18683:
	mov	r1, r10
	mov	r0, r4
	bl	ghsic_ctrl_connect
	subs	r2, r0, #0
	beq	.L18784
	movw	r0, #:lower16:.LC1371
	ldr	r1, .L18800+36
	mov	r9, r2
	movt	r0, #:upper16:.LC1371
	bl	printk
	b	.L18673
.L18682:
	ldr	r0, .L18800+40
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L18796
.L18691:
	cmp	r4, #0
	beq	.L18797
	ldr	r10, [r5, #3604]
	add	fp, r10, #52
	mov	r0, fp
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:grmnet_ctrl_qti_send_cpkt_tomodem
	movw	r3, #:lower16:gqti_ctrl_notify_modem
	str	r4, [r10]
	movt	r2, #:upper16:grmnet_ctrl_qti_send_cpkt_tomodem
	movt	r3, #:upper16:gqti_ctrl_notify_modem
	mov	r1, r0
	mov	r0, fp
	strd	r2, [r4, #96]
	bl	_raw_spin_unlock_irqrestore
	mov	r1, #1
	add	r0, r10, #32
	mov	r2, r1
	mov	r3, #0
	str	r1, [r10, #8]
	mov	r1, #3
	bl	__wake_up
	cmp	r10, #0
	beq	.L18784
	ldr	r0, [r10]
	cmp	r0, #0
	beq	.L18784
	ldr	r3, [r0, #108]
	cmp	r3, #0
	beq	.L18784
	blx	r3
	b	.L18784
.L18725:
	mov	r9, #0
	b	.L18673
.L18704:
	mov	r1, r5
	mov	r0, r4
	bl	ghsuart_data_connect
	subs	r9, r0, #0
	beq	.L18673
	movw	r0, #:lower16:.LC1376
	mov	r2, r9
	ldr	r1, .L18800+36
	movt	r0, #:upper16:.LC1376
	bl	printk
	mov	r1, r5
	mov	r0, r4
	bl	ghsuart_ctrl_disconnect
	b	.L18673
.L18703:
	mov	r1, r5
	mov	r0, r4
	bl	ghsic_data_connect
	subs	r9, r0, #0
	beq	.L18673
	movw	r0, #:lower16:.LC1375
	mov	r2, r9
	ldr	r1, .L18800+36
	movt	r0, #:upper16:.LC1375
	bl	printk
	mov	r1, r5
	mov	r0, r4
	bl	ghsic_ctrl_disconnect
	b	.L18673
.L18702:
	mov	r3, r5
	mov	r2, #0
	ldr	r0, [r8, #28]
	mov	r1, #2
	uxtb	r10, r5
	bl	usb_bam_get_connection_idx
	mov	r6, r0
	mov	r3, r5
	ldr	r0, [r8, #28]
	mov	r2, #1
	mov	r1, #2
	bl	usb_bam_get_connection_idx
	orrs	r3, r0, r6
	bmi	.L18798
	uxtb	r0, r0
	uxtb	r3, r6
	mov	r2, #7
	mov	r1, r10
	str	r0, [sp]
	mov	r0, r4
	bl	gbam_connect
	subs	r5, r0, #0
	beq	.L18673
	movw	r0, #:lower16:.LC1374
	mov	r2, r5
	ldr	r1, .L18800+36
	movt	r0, #:upper16:.LC1374
	bl	printk
	cmp	r7, #4
	beq	.L18799
	mov	r1, r10
	mov	r0, r4
	mov	r9, r5
	bl	gsmd_ctrl_disconnect
	b	.L18673
.L18701:
	mov	r2, #0
	mov	r3, r5
	ldr	r0, [r8, #28]
	mov	r1, r2
	uxtb	r7, r5
	bl	usb_bam_get_connection_idx
	mov	r9, r0
	mov	r3, r5
	ldr	r0, [r8, #28]
	mov	r2, #1
	mov	r1, #0
	bl	usb_bam_get_connection_idx
	orrs	r3, r0, r9
	bmi	.L18705
	uxtb	r3, r9
	uxtb	r2, r0
.L18706:
	str	r2, [sp]
	mov	r1, r7
	mov	r0, r4
	mov	r2, r6
	bl	gbam_connect
	subs	r9, r0, #0
	beq	.L18673
	movw	r0, #:lower16:.LC1374
	mov	r2, r9
	ldr	r1, .L18800+36
	movt	r0, #:upper16:.LC1374
	bl	printk
	mov	r1, r7
	mov	r0, r4
	bl	gsmd_ctrl_disconnect
	b	.L18673
.L18699:
	mov	r2, #0
	uxtb	r7, r5
	mov	r3, r2
	b	.L18706
.L18786:
	ldrb	ip, [r0, #116]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC153
	mov	r3, r0
	movt	r1, #:upper16:.LC153
	ldr	r2, .L18800+44
	sub	r0, r6, #32
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L18666
.L18787:
	movw	r1, #:lower16:.LC1368
	ldr	r2, .L18800+44
	sub	r0, r6, #8
	ldrb	r3, [r4, #116]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC1368
	bl	__dynamic_pr_debug
	ldr	r2, [r4, #136]
	b	.L18668
.L18788:
	ldr	r2, [r4, #136]
	mov	r0, #0
	movw	r1, #:lower16:.LC1146
	movt	r1, #:upper16:.LC1146
	mov	r3, r9
	str	r0, [r2, #28]
	ldr	r2, [r4, #136]
	ldr	r0, [r5]
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L18665
.L18793:
	sub	r2, r7, #1
	cmp	r2, #9
	movwhi	r3, #:lower16:.LC182
	movthi	r3, #:upper16:.LC182
	bhi	.L18677
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r3, r3, r2, lsl #2
	ldr	r3, [r3, #1100]
.L18677:
	sub	r1, r6, #1
	cmp	r1, #9
	movwhi	r2, #:lower16:.LC182
	movthi	r2, #:upper16:.LC182
	bhi	.L18678
	movw	r2, #:lower16:.LANCHOR3
	movt	r2, #:upper16:.LANCHOR3
	add	r2, r2, r1, lsl #2
	ldr	r2, [r2, #1100]
.L18678:
	movw	r1, #:lower16:.LC1367
	stm	sp, {r2, r4}
	ldr	r2, .L18800+36
	str	r0, [sp, #8]
	movt	r1, #:upper16:.LC1367
	ldr	r0, .L18800+4
	bl	__dynamic_pr_debug
	ldrb	r0, [r4, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L18676
.L18675:
	ldr	r2, [r4, #84]
	mov	r3, #0
	mvn	r9, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #88]
	str	r3, [r2, #28]
	b	.L18665
.L18792:
	movw	r1, #:lower16:.LC159
	ldr	r2, .L18800+16
	sub	r0, r0, #18
	movt	r1, #:upper16:.LC159
	bl	__dynamic_pr_debug
	b	.L18719
.L18796:
	movw	r1, #:lower16:.LC1360
	ldr	r2, .L18800+48
	mov	r3, r4
	movt	r1, #:upper16:.LC1360
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L18691
.L18794:
	movw	r1, #:lower16:.LC1344
	mov	r3, r4
	ldr	r2, .L18800+52
	movt	r1, #:upper16:.LC1344
	str	r10, [sp]
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L18686
.L18789:
	ldr	r2, [r4, #136]
	movw	r0, #:lower16:.LC1157
	mov	r3, r9
	ldr	r1, .L18800+44
	movt	r0, #:upper16:.LC1157
	ldr	r2, [r2, #4]
	bl	printk
	b	.L18665
.L18696:
	movw	r0, #:lower16:.LC1372
	ldr	r1, .L18800+36
	mov	r9, r2
	movt	r0, #:upper16:.LC1372
	bl	printk
	b	.L18673
.L18679:
	sub	r7, r7, #1
	cmp	r7, #9
	bhi	.L18726
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r3, r3, r7, lsl #2
	ldr	r2, [r3, #1100]
.L18710:
	movw	r0, #:lower16:.LC598
	ldr	r1, .L18800+36
	mvn	r9, #18
	movt	r0, #:upper16:.LC598
	bl	printk
	b	.L18673
.L18698:
	sub	r6, r6, #1
	cmp	r6, #9
	bhi	.L18726
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r6, r3, r6, lsl #2
	ldr	r2, [r6, #1100]
	b	.L18710
.L18726:
	movw	r2, #:lower16:.LC182
	movt	r2, #:upper16:.LC182
	b	.L18710
.L18797:
	movw	r0, #:lower16:.LC1346
	ldr	r1, .L18800+48
	mvn	r9, #18
	movt	r0, #:upper16:.LC1346
	bl	printk
	movw	r0, #:lower16:.LC1370
	mov	r2, r9
	ldr	r1, .L18800+36
	movt	r0, #:upper16:.LC1370
	bl	printk
	b	.L18673
.L18687:
	movw	r0, #:lower16:.LC1353
	mov	r2, r10
	ldr	r1, .L18800+52
	movt	r0, #:upper16:.LC1353
	bl	printk
.L18690:
	movw	r0, #:lower16:.LC1369
	mvn	r2, #18
	ldr	r1, .L18800+36
	movt	r0, #:upper16:.LC1369
	mov	r9, r2
	bl	printk
	b	.L18673
.L18795:
	movw	r0, #:lower16:.LC1346
	ldr	r1, .L18800+52
	movt	r0, #:upper16:.LC1346
	bl	printk
	b	.L18690
.L18705:
	movw	r0, #:lower16:.LC1373
	ldr	r1, .L18800+36
	mov	r9, #0
	movt	r0, #:upper16:.LC1373
	bl	printk
	mov	r1, r7
	mov	r0, r4
	bl	gsmd_ctrl_disconnect
	b	.L18673
.L18798:
	movw	r0, #:lower16:.LC1373
	ldr	r1, .L18800+36
	mov	r9, #0
	movt	r0, #:upper16:.LC1373
	bl	printk
	mov	r1, r10
	mov	r0, r4
	bl	gsmd_ctrl_disconnect
	b	.L18673
.L18799:
	mov	r0, r4
	mov	r9, r5
	bl	gqti_ctrl_disconnect
	b	.L18673
.L18801:
	.align	2
.L18800:
	.word	.LANCHOR8-1504
	.word	.LANCHOR8-1488
	.word	.LANCHOR4+2874
	.word	.LANCHOR4+2898
	.word	.LANCHOR5-44
	.word	.LANCHOR4+2856
	.word	.LANCHOR8-1456
	.word	.LANCHOR8-2032
	.word	.LANCHOR4+2922
	.word	.LANCHOR5+2580
	.word	.LANCHOR8-1936
	.word	.LANCHOR5+2564
	.word	.LANCHOR5+2076
	.word	.LANCHOR5+1964
	.fnend
	.size	frmnet_set_alt, .-frmnet_set_alt
	.align	2
	.global	ghsuart_data_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_setup, %function
ghsuart_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r3, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	ldr	r2, [r9, #2028]
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	str	r1, [sp, #12]
	add	r10, r2, r0
	str	r2, [sp, #28]
	cmp	r10, #4
	str	r2, [sp, #32]
	movle	r1, #0
	movgt	r1, #1
	cmp	r0, #0
	moveq	r1, #1
	cmp	r1, #0
	bne	.L18828
	ldr	r0, .L18833
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L18829
.L18805:
	ldr	r1, [sp, #28]
	cmp	r1, r10
	bge	.L18802
	ldr	r2, .L18833+4
	mov	r3, #84
	mov	fp, #10
	ldr	r0, [sp, #12]
	movw	ip, #:lower16:.LC84
	mov	r7, r1
	movt	ip, #:upper16:.LC84
	mla	r3, r3, r1, r2
	str	ip, [sp, #24]
	cmp	r0, #0
	movw	r0, #:lower16:kmalloc_caches
	movne	lr, fp
	moveq	lr, #11
	add	r3, r3, #4
	movt	r0, #:upper16:kmalloc_caches
	mov	r6, r3
	movt	fp, 2
	str	r0, [sp, #16]
	str	lr, [sp, #20]
	str	r3, [sp, #36]
	b	.L18811
.L18832:
	mov	r2, #216
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L18807
.L18806:
	ldr	r3, .L18833+8
	mov	r5, #0
	mov	r2, #1
	mov	r1, fp
	ldr	r0, [sp, #24]
	ldr	r8, [r3, r7, lsl #2]
	mov	r3, r5
	stm	sp, {r5, r8}
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #108]
	beq	.L18830
	movw	r1, #:lower16:.LC719
	str	r7, [r4]
	ldr	r2, .L18833+12
	str	r5, [r4, #20]
	movt	r1, #:upper16:.LC719
	add	r0, r4, #32
	str	r5, [r4, #28]
	str	r5, [r4, #104]
	str	r5, [r4, #72]
	bl	__init_waitqueue_head
	movw	r0, #:lower16:ghsuart_data_disconnect_w
	mov	r3, #65024
	ldr	r1, [sp, #12]
	movt	r0, #:upper16:ghsuart_data_disconnect_w
	movw	r2, #:lower16:ghsuart_data_connect_w
	movt	r3, 65535
	movt	r2, #:upper16:ghsuart_data_connect_w
	movw	lr, #:lower16:ghsuart_data_write_tomdm
	movw	ip, #:lower16:ghsuart_data_write_tohost
	str	r0, [r4, #140]
	add	r0, r4, #116
	movt	lr, #:upper16:ghsuart_data_write_tomdm
	str	r1, [r4, #16]
	movw	r1, #:lower16:ghsuart_data_probe
	movt	ip, #:upper16:ghsuart_data_write_tohost
	str	r3, [r4, #112]
	movt	r1, #:upper16:ghsuart_data_probe
	strd	r2, [r4, #124]
	movw	r2, #:lower16:ghsuart_data_remove
	str	r0, [r4, #116]
	movt	r2, #:upper16:ghsuart_data_remove
	str	r0, [r4, #120]
	add	r0, r4, #132
	str	r3, [r4, #144]
	str	r3, [r4, #160]
	add	r3, r4, #48
	str	r3, [r4, #48]
	str	r3, [r4, #52]
	add	r3, r4, #80
	str	r0, [r4, #132]
	str	r0, [r4, #136]
	add	r0, r4, #148
	str	lr, [r4, #156]
	add	lr, r4, #164
	str	r3, [r4, #80]
	str	r3, [r4, #84]
	ldr	r3, [sp, #20]
	str	r5, [r4, #64]
	str	r0, [r4, #148]
	str	r0, [r4, #152]
	add	r0, r4, #56
	str	r5, [r4, #68]
	str	r0, [r4, #56]
	str	r0, [r4, #60]
	add	r0, r4, #88
	str	r5, [r4, #96]
	str	r0, [r4, #88]
	str	r0, [r4, #92]
	mov	r0, r6
	str	r5, [r4, #100]
	str	lr, [r4, #164]
	str	lr, [r4, #168]
	str	ip, [r4, #172]
	str	r4, [r4, #176]
	str	r3, [r4, #180]
	str	r4, [r6, #-4]
	stm	r6, {r1, r2}
	str	r8, [r6, #20]
	str	r5, [r6, #28]
	bl	platform_driver_register
	ldr	r0, .L18833+16
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L18831
	add	r7, r7, #1
	add	r6, r6, #84
	cmp	r10, r7
	ble	.L18802
.L18811:
	ldr	r2, [sp, #16]
	ldr	r3, [r9, #2028]
	ldr	r0, [r2, #32]
	add	r3, r3, #1
	str	r3, [r9, #2028]
	cmp	r0, #0
	bne	.L18832
	mov	r4, #16
	b	.L18806
.L18831:
	movw	r1, #:lower16:.LC607
	str	r7, [sp]
	mov	r3, r4
	sub	r0, r0, #18
	movt	r1, #:upper16:.LC607
	ldr	r2, .L18833+20
	add	r7, r7, #1
	add	r6, r6, #84
	bl	__dynamic_pr_debug
	cmp	r10, r7
	bgt	.L18811
.L18802:
	ldr	r0, [sp, #28]
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L18829:
	movw	r1, #:lower16:.LC1365
	ldr	r2, .L18833+24
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1365
	bl	__dynamic_pr_debug
	b	.L18805
.L18830:
	movw	r0, #:lower16:.LC1363
	mov	r2, r8
	ldr	r1, .L18833+20
	movt	r0, #:upper16:.LC1363
	bl	printk
	mov	r0, r4
	bl	kfree
.L18807:
	ldr	r3, [r9, #2028]
	movw	r0, #:lower16:.LC1342
	mov	r2, r7
	movt	r0, #:upper16:.LC1342
	ldr	r1, .L18833+24
	sub	r3, r3, #1
	str	r3, [r9, #2028]
	bl	printk
	ldr	r2, [sp, #28]
	ldr	r3, [r9, #2028]
	cmp	r2, r3
	bcs	.L18812
	ldr	r4, [sp, #36]
	mov	r5, r2
.L18810:
	ldr	r6, [r4, #-4]
	add	r5, r5, #1
	ldr	r0, [r6, #108]
	bl	destroy_workqueue
	mov	r0, r6
	bl	kfree
	mov	r0, r4
	add	r4, r4, #84
	bl	platform_driver_unregister
	ldr	r3, [r9, #2028]
	cmp	r5, r3
	bcc	.L18810
.L18812:
	ldr	r3, [sp, #32]
	str	r3, [r9, #2028]
	mvn	r3, #11
	str	r3, [sp, #28]
	b	.L18802
.L18828:
	mov	r2, r3
	movw	r0, #:lower16:.LC1031
	ldr	r1, .L18833+24
	mvn	r3, #21
	movt	r0, #:upper16:.LC1031
	str	r3, [sp, #28]
	bl	printk
	b	.L18802
.L18834:
	.align	2
.L18833:
	.word	.LANCHOR8-1440
	.word	.LANCHOR1+2032
	.word	.LANCHOR5+2620
	.word	.LANCHOR1+3972
	.word	.LANCHOR8-1422
	.word	.LANCHOR5+2628
	.word	.LANCHOR5+2600
	.fnend
	.size	ghsuart_data_setup, .-ghsuart_data_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_function_bind_config, %function
rmnet_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 136
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #:lower16:__stack_chk_guard
	strd	r6, [sp, #8]
	movt	r3, #:upper16:__stack_chk_guard
	mov	r6, r1
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	fp, [r9, #4060]
	.pad #172
	sub	sp, sp, #172
	str	r3, [sp, #32]
	ldr	r3, [r3]
	cmp	fp, #0
	str	r3, [sp, #164]
	beq	.L19006
.L18836:
	ldr	r3, [r9, #4064]
	cmp	r3, #0
	ble	.L18895
	ldr	fp, .L19028
	movw	r3, #:lower16:.LC1383
	mov	r5, #0
	movt	r3, #:upper16:.LC1383
	ldr	r8, .L19028+4
	str	r3, [sp, #40]
	sub	r3, fp, #24
	str	r3, [sp, #36]
.L18900:
	ldrh	r3, [fp, #-6]
	tst	r3, #4
	bne	.L19007
.L18901:
	ldr	r2, [r9, #3432]
	cmp	r5, r2
	bcs	.L19008
	movw	r2, #:lower16:.LANCHOR7
	movt	r2, #:upper16:.LANCHOR7
	ldrb	r3, [r2, #-1160]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L18904
	ldr	r1, [r6, #24]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19009
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	strb	r3, [r2, #-1160]
.L18904:
	ldr	r4, [r8, #20]
	add	r7, r4, #132
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #24]
	movw	r1, #:lower16:.LC1386
	mov	r10, r0
	mov	r2, r5
	movt	r1, #:upper16:.LC1386
	mov	r0, #32
	str	r3, [r4, #128]
	bl	kasprintf
	str	r0, [r4]
	mov	r1, r10
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4]
	cmp	r3, #0
	beq	.L19010
	ldr	r2, .L19028+8
	movw	r0, #:lower16:frmnet_bind
	movw	r1, #:lower16:frmnet_unbind
	ldr	ip, .L19028+12
	movt	r0, #:upper16:frmnet_bind
	movt	r1, #:upper16:frmnet_unbind
	movw	r7, #:lower16:.LANCHOR4
	movt	r7, #:upper16:.LANCHOR4
	str	r2, [r4, #4]
	movw	r2, #:lower16:frmnet_set_alt
	movt	r2, #:upper16:frmnet_set_alt
	strd	r0, [r4, #32]
	movw	r0, #:lower16:frmnet_setup
	movw	r1, #:lower16:frmnet_suspend
	movt	r0, #:upper16:frmnet_setup
	str	r2, [r4, #40]
	movw	r2, #:lower16:frmnet_disable
	ldrh	ip, [ip]
	movt	r2, #:upper16:frmnet_disable
	movt	r1, #:upper16:frmnet_suspend
	str	r2, [r4, #48]
	movw	r2, #:lower16:frmnet_resume
	movt	r2, #:upper16:frmnet_resume
	strd	r0, [r4, #52]
	movw	r0, #:lower16:frmnet_send_cpkt_response
	movw	r1, #:lower16:frmnet_disconnect
	movt	r0, #:upper16:frmnet_send_cpkt_response
	str	r2, [r4, #60]
	movw	r2, #:lower16:frmnet_connect
	movt	r1, #:upper16:frmnet_disconnect
	movt	r2, #:upper16:frmnet_connect
	tst	ip, #4
	str	r0, [r4, #92]
	str	r1, [r4, #104]
	str	r2, [r4, #108]
	bne	.L19011
.L18907:
	add	r10, r4, #72
	str	r6, [r4, #20]
	add	r2, r6, #36
	mov	r0, r10
	ldr	r1, [r6, #40]
	bl	__list_add
	ldr	r3, [r4, #32]
	cmp	r3, #0
	beq	.L18925
	mov	r1, r4
	mov	r0, r6
	blx	r3
	subs	r2, r0, #0
	blt	.L19012
.L18912:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L18913
	ldr	r1, [r4, #16]
	cmp	r1, #0
	beq	.L18913
	orr	r1, r3, #4
	mov	r3, r1
	strb	r1, [r6, #45]
.L18913:
	tst	r3, #2
	bne	.L18914
	ldr	r1, [r4, #8]
	cmp	r1, #0
	beq	.L18914
	ldrb	r1, [r6, #45]	@ zero_extendqisi2
	orr	r1, r1, #2
	mov	r3, r1
	strb	r1, [r6, #45]
.L18914:
	tst	r3, #1
	bne	.L18915
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L18915
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #45]
.L18915:
	cmp	r2, #0
	beq	.L18916
	movw	r3, #1410
	mov	r10, r2
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L18910
.L18911:
	movw	r0, #:lower16:.LC1388
	mov	r2, r10
	ldr	r1, .L19028+16
	movt	r0, #:upper16:.LC1388
	bl	printk
	ldr	r0, [r4]
	bl	kfree
.L18903:
	movw	r0, #:lower16:.LC1390
	mov	r2, r5
	ldr	r1, .L19028+20
	movt	r0, #:upper16:.LC1390
	bl	printk
.L18835:
	ldr	r3, [sp, #32]
	mov	r0, r10
	ldr	r2, [sp, #164]
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L19013
	add	sp, sp, #172
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L18916:
	ldr	r0, .L19028+24
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L19014
.L19004:
	ldr	r3, [r9, #4064]
	add	r5, r5, #1
	add	r8, r8, #24
	cmp	r3, r5
	bgt	.L18900
.L18895:
.L18870:
	mov	r10, #0
	b	.L18835
.L19014:
	movw	r1, #:lower16:.LC1389
	ldr	r2, .L19028+16
	sub	r0, r0, #18
	movt	r1, #:upper16:.LC1389
	bl	__dynamic_pr_debug
	b	.L19004
.L19007:
	mov	r3, r6
	ldr	r2, .L19028+16
	ldrd	r0, [sp, #36]
	bl	__dynamic_pr_debug
	b	.L18901
.L19011:
	ldr	ip, [r6]
	movw	r2, #:lower16:.LC929
	ldr	r1, [r6, #24]
	movt	r2, #:upper16:.LC929
	ldr	r0, .L19028+28
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r6, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L19015
.L18909:
	movw	r3, #1410
	mvn	r10, #21
	ldrh	r3, [r7, r3]
	tst	r3, #4
	beq	.L18911
.L18910:
	ldr	r1, [r6, #24]
	movw	r2, #:lower16:.LC930
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC930
	ldr	r0, .L19028+32
	ldr	r1, [r1]
	stm	sp, {r4, r10}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L18911
.L19012:
	mov	r0, r10
	str	r2, [sp, #44]
	bl	list_del
	mov	r3, #0
	ldr	r2, [sp, #44]
	str	r3, [r4, #20]
	b	.L18912
.L19006:
	mov	r3, #1
	ldr	r1, .L19028+36
	mov	r2, #50
	add	r0, sp, #64
	movw	r4, #:lower16:.LC459
	str	r3, [r9, #4060]
	movt	r4, #:upper16:.LC459
	bl	strlcpy
	add	r0, sp, #64
	bl	strim
	str	r0, [sp, #56]
	mov	r2, #50
	add	r1, r9, #3072
	add	r0, sp, #114
	bl	strlcpy
	add	r0, sp, #114
	bl	strim
	str	fp, [sp, #36]
	str	r6, [sp, #40]
	str	fp, [sp, #44]
	str	r0, [sp, #60]
	b	.L18838
.L18871:
	mov	r1, r4
	add	r0, sp, #56
	bl	strsep
	mov	r5, r0
	mov	r1, r4
	add	r0, sp, #56
	bl	strsep
	cmp	r5, #0
	cmpne	r0, #0
	bne	.L19016
.L18838:
	ldr	r3, [sp, #56]
	cmp	r3, #0
	bne	.L18871
	ldr	r2, .L19028+40
	ldr	r0, [r9, #3448]
	ldr	r3, [r9, #3452]
	ldr	r6, [sp, #40]
	ldrh	r1, [r2, #-14]
	tst	r1, #4
	bne	.L19017
.L18872:
	cmp	r0, #0
	bne	.L18873
	cmp	r3, #0
	beq	.L18877
.L18873:
	mov	r1, r3
	bl	gbam_setup
	subs	r10, r0, #0
	bne	.L18876
.L18877:
	ldr	r1, [r9, #3440]
	cmp	r1, #0
	bne	.L19018
.L18875:
	ldr	r0, [r9, #3460]
	cmp	r0, #0
	bne	.L19019
.L18881:
	ldr	r0, [r9, #3456]
	cmp	r0, #0
	bne	.L19020
.L18885:
	ldr	r0, [r9, #3468]
	cmp	r0, #0
	bne	.L19021
.L18889:
	ldr	r0, [r9, #3464]
	cmp	r0, #0
	beq	.L18836
	mov	r1, #1
	bl	ghsuart_ctrl_setup
	subs	r10, r0, #0
	blt	.L18876
	ldr	r3, [r9, #3432]
	cmp	r3, #0
	beq	.L18836
	ldr	r2, [r9, #3320]
	cmp	r2, #9
	streq	r10, [r9, #3328]
	addeq	r10, r10, #1
	cmp	r3, #1
	bls	.L18836
	ldr	r2, [r9, #3344]
	cmp	r2, #9
	streq	r10, [r9, #3352]
	addeq	r10, r10, #1
	cmp	r3, #2
	beq	.L18836
	ldr	r3, [r9, #3368]
	cmp	r3, #9
	streq	r10, [r9, #3376]
	b	.L18836
.L19018:
	add	r2, sp, #55
	mov	r0, #0
	bl	gsmd_ctrl_setup
	subs	r10, r0, #0
	beq	.L19022
.L18876:
	movw	r0, #:lower16:.LC1391
	ldr	r1, .L19028+20
	movt	r0, #:upper16:.LC1391
	bl	printk
	b	.L18835
.L19016:
	ldr	r3, [sp, #60]
	mov	r7, r0
	cmp	r3, #0
	beq	.L18839
	mov	r1, r4
	add	r0, sp, #60
	bl	strsep
	str	r0, [sp, #36]
.L18839:
	ldr	r3, [r9, #3432]
	cmp	r3, #2
	bhi	.L19023
	ldr	r2, .L19028+44
	ldrh	r2, [r2]
	tst	r2, #4
	bne	.L19024
.L18842:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L18922
	mov	r2, #160
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r2, r0, #0
	beq	.L19025
.L18843:
	ldr	r8, [r9, #3432]
	add	r3, r2, #144
	mov	r1, #0
	mov	r0, r5
	str	r3, [r2, #144]
	lsl	r10, r8, #1
	str	r3, [r2, #148]
	strb	r8, [r2, #116]
	add	r3, r10, r8
	str	r1, [r2, #132]
	add	r6, r9, r3, lsl #3
	str	r8, [r6, #3332]
	str	r2, [r6, #3336]
	bl	str_to_xport
	mov	fp, r0
	mov	r0, r7
	str	fp, [r6, #3320]
	bl	str_to_xport
	sub	r1, fp, #3
	str	r0, [r6, #3316]
	cmp	r1, #7
	ldrls	pc, [pc, r1, asl #2]
	b	.L18844
.L18846:
	.word	.L18845
	.word	.L18847
	.word	.L18844
	.word	.L18844
	.word	.L18844
	.word	.L18848
	.word	.L18849
	.word	.L18850
.L18925:
	mov	r2, r3
	b	.L18912
.L18922:
	mov	r2, #16
	b	.L18843
.L18848:
	ldr	r2, [r9, #4052]
	cmp	r2, #3
	bhi	.L19026
	ldr	fp, .L19028+48
	mov	r0, #104
	ldr	r3, [sp, #36]
	mla	r2, r0, r2, fp
	cmp	r3, #0
	movne	r1, r3
	moveq	r1, r5
	add	r0, r2, #84
	moveq	r2, #20
	movne	r2, #20
	bl	strlcpy
	ldr	r0, [r9, #4052]
	mov	ip, #104
	movw	r1, #:lower16:.LC1362
	movt	r1, #:upper16:.LC1362
	mov	r2, #20
	mla	r0, ip, r0, fp
	add	r0, r0, #84
	bl	strlcat
	ldr	r3, [r9, #4052]
	add	r3, r3, #1
	str	r3, [r9, #4052]
.L18852:
	add	r3, r10, r8
	ldr	r2, [r9, #3456]
	add	r3, r9, r3, lsl #3
	ldr	r0, [r3, #3316]
	add	r1, r2, #1
	str	r2, [r3, #3328]
	str	r1, [r9, #3456]
.L18850:
	sub	r3, r0, #5
	cmp	r3, #5
	ldrls	pc, [pc, r3, asl #2]
	b	.L18856
.L18858:
	.word	.L18857
	.word	.L18859
	.word	.L18859
	.word	.L18860
	.word	.L18861
	.word	.L18862
.L18860:
	ldr	r2, [r9, #4056]
	cmp	r2, #3
	bhi	.L19027
	ldr	r5, .L19028+52
	mov	r0, #104
	ldr	r3, [sp, #36]
	mla	r2, r0, r2, r5
	cmp	r3, #0
	movne	r1, r3
	moveq	r1, r7
	add	r0, r2, #84
	mov	r2, #20
	bl	strlcpy
	ldr	r0, [r9, #4056]
	mov	r3, #104
	movw	r1, #:lower16:.LC1364
	movt	r1, #:upper16:.LC1364
	mov	r2, #20
	mla	r0, r3, r0, r5
	add	r0, r0, #84
	bl	strlcat
	ldr	r3, [r9, #4056]
	add	r3, r3, #1
	str	r3, [r9, #4056]
.L18864:
	ldr	r2, [r9, #3460]
	add	r3, r10, r8
	add	r3, r9, r3, lsl #3
	add	r1, r2, #1
	str	r2, [r3, #3324]
	str	r1, [r9, #3460]
.L18862:
	ldr	r2, [r9, #3432]
	ldr	r3, [r9, #4064]
	add	r2, r2, #1
	add	r3, r3, #1
	str	r2, [r9, #3432]
	str	r3, [r9, #4064]
	b	.L18838
.L18861:
	ldr	r2, [r9, #3468]
	add	r3, r10, r8
	add	r3, r9, r3, lsl #3
	add	r1, r2, #1
	str	r2, [r3, #3324]
	str	r1, [r9, #3468]
	b	.L18862
.L18859:
	ldr	r2, [r9, #3452]
	add	r3, r10, r8
	add	r3, r9, r3, lsl #3
	add	r1, r2, #1
	str	r2, [r3, #3324]
	str	r1, [r9, #3452]
	b	.L18862
.L18857:
	ldr	r2, [r9, #3448]
	add	r3, r10, r8
	add	r3, r9, r3, lsl #3
	add	r1, r2, #1
	str	r2, [r3, #3324]
	str	r1, [r9, #3448]
	b	.L18862
.L18849:
	ldr	r2, [r9, #3464]
	add	r3, r10, r8
	add	r3, r9, r3, lsl #3
	add	r1, r2, #1
	str	r2, [r3, #3328]
	str	r1, [r9, #3464]
	b	.L18850
.L18847:
	ldr	r2, [r9, #3444]
	add	r3, r10, r8
	add	r3, r9, r3, lsl #3
	add	r1, r2, #1
	str	r2, [r3, #3328]
	str	r1, [r9, #3444]
	b	.L18850
.L18845:
	ldr	r2, [r9, #3440]
	add	r3, r10, r8
	add	r3, r9, r3, lsl #3
	add	r1, r2, #1
	str	r2, [r3, #3328]
	str	r1, [r9, #3440]
	b	.L18850
.L19019:
	mov	r1, #1
	bl	ghsic_data_setup
	subs	r10, r0, #0
	blt	.L18876
	ldr	r3, [r9, #3432]
	cmp	r3, #0
	beq	.L18881
	ldr	r2, [r9, #3316]
	cmp	r2, #8
	streq	r10, [r9, #3324]
	addeq	r10, r10, #1
	cmp	r3, #1
	bls	.L18881
	ldr	r2, [r9, #3340]
	cmp	r2, #8
	streq	r10, [r9, #3348]
	addeq	r10, r10, #1
	cmp	r3, #2
	beq	.L18881
	ldr	r3, [r9, #3364]
	cmp	r3, #8
	streq	r10, [r9, #3372]
	b	.L18881
.L19020:
	mov	r1, #1
	bl	ghsic_ctrl_setup
	subs	r10, r0, #0
	blt	.L18876
	ldr	r3, [r9, #3432]
	cmp	r3, #0
	beq	.L18885
	ldr	r2, [r9, #3320]
	cmp	r2, #8
	streq	r10, [r9, #3328]
	addeq	r10, r10, #1
	cmp	r3, #1
	bls	.L18885
	ldr	r2, [r9, #3344]
	cmp	r2, #8
	streq	r10, [r9, #3352]
	addeq	r10, r10, #1
	cmp	r3, #2
	beq	.L18885
	ldr	r3, [r9, #3368]
	cmp	r3, #8
	streq	r10, [r9, #3376]
	b	.L18885
.L19021:
	mov	r1, #1
	bl	ghsuart_data_setup
	subs	r10, r0, #0
	blt	.L18876
	ldr	r3, [r9, #3432]
	cmp	r3, #0
	beq	.L18889
	ldr	r2, [r9, #3316]
	cmp	r2, #9
	streq	r10, [r9, #3324]
	addeq	r10, r10, #1
	cmp	r3, #1
	bls	.L18889
	ldr	r2, [r9, #3340]
	cmp	r2, #9
	streq	r10, [r9, #3348]
	addeq	r10, r10, #1
	cmp	r3, #2
	beq	.L18889
	ldr	r3, [r9, #3364]
	cmp	r3, #9
	streq	r10, [r9, #3372]
	b	.L18889
.L19022:
	ldr	r3, [r9, #3432]
	cmp	r3, #0
	beq	.L18875
	ldr	r1, [r9, #3336]
	ldrb	r2, [sp, #55]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L18878
	ldrb	r0, [r1, #116]	@ zero_extendqisi2
	add	r0, r2, r0
	strb	r0, [r1, #116]
.L18878:
	cmp	r3, #1
	bls	.L18875
	ldr	r1, [r9, #3360]
	cmp	r1, #0
	beq	.L18879
	ldrb	r0, [r1, #116]	@ zero_extendqisi2
	add	r0, r2, r0
	strb	r0, [r1, #116]
.L18879:
	cmp	r3, #2
	beq	.L18875
	ldr	r3, [r9, #3384]
	cmp	r3, #0
	beq	.L18875
	ldrb	r1, [r3, #116]	@ zero_extendqisi2
	add	r2, r2, r1
	strb	r2, [r3, #116]
	b	.L18875
.L19017:
	ldr	r5, [r9, #3432]
	movw	r1, #:lower16:.LC1382
	ldr	ip, [r9, #3440]
	movt	r1, #:upper16:.LC1382
	ldr	lr, [r9, #3460]
	ldr	r4, [r9, #3456]
	str	r5, [sp, #24]
	stm	sp, {r3, lr}
	mov	r3, r0
	sub	r0, r2, #32
	str	ip, [sp, #12]
	ldr	r2, [r9, #3464]
	ldr	ip, [r9, #3468]
	str	ip, [sp, #8]
	str	r4, [sp, #16]
	str	r2, [sp, #20]
	ldr	r2, .L19028+56
	bl	__dynamic_pr_debug
	ldr	r0, [r9, #3448]
	ldr	r3, [r9, #3452]
	b	.L18872
.L19024:
	movw	r1, #:lower16:.LC1378
	ldr	r2, .L19028+60
	stm	sp, {r5, r7}
	movt	r1, #:upper16:.LC1378
	ldr	r0, .L19028+64
	bl	__dynamic_pr_debug
	b	.L18842
.L19010:
	movw	r0, #:lower16:.LC1387
	ldr	r1, .L19028+16
	mvn	r10, #11
	movt	r0, #:upper16:.LC1387
	bl	printk
	b	.L18903
.L19008:
	movw	r0, #:lower16:.LC1384
	ldr	r1, .L19028+16
	mov	r3, r5
	movt	r0, #:upper16:.LC1384
	mvn	r10, #18
	bl	printk
	b	.L18903
.L19009:
	movw	r0, #:lower16:.LC1385
	mvn	r2, #18
	ldr	r1, .L19028+16
	movt	r0, #:upper16:.LC1385
	mov	r10, r2
	bl	printk
	b	.L18903
.L19026:
	movw	r0, #:lower16:.LC1361
	ldr	r1, .L19028+68
	movt	r0, #:upper16:.LC1361
	bl	printk
	b	.L18852
.L19015:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L18909
	b	.L18907
.L19027:
	movw	r0, #:lower16:.LC1361
	ldr	r1, .L19028+72
	movt	r0, #:upper16:.LC1361
	bl	printk
	b	.L18864
.L18856:
	mov	r1, r0
	movw	r0, #:lower16:.LC1380
	ldr	fp, [sp, #44]
	mov	r2, r1
	movt	r0, #:upper16:.LC1380
	ldr	r1, .L19028+60
	bl	printk
.L18855:
	ldr	r3, [r9, #3432]
	cmp	r3, #0
	ldrne	r4, .L19028+4
	beq	.L18868
.L18869:
	ldr	r0, [r4, #20]
	add	fp, fp, #1
	add	r4, r4, #24
	bl	kfree
	ldr	r3, [r9, #3432]
	cmp	fp, r3
	bcc	.L18869
.L18868:
	mov	r3, #0
	mvn	r10, #18
	str	r3, [r9, #3432]
	str	r3, [r9, #3440]
	str	r3, [r9, #3444]
	str	r3, [r9, #3448]
	str	r3, [r9, #3456]
	str	r3, [r9, #3460]
	str	r3, [r9, #3464]
	str	r3, [r9, #3468]
	b	.L18841
.L18844:
	movw	r0, #:lower16:.LC1380
	mov	r2, fp
	ldr	r1, .L19028+60
	movt	r0, #:upper16:.LC1380
	ldr	fp, [sp, #44]
	bl	printk
	b	.L18855
.L19023:
	movw	r0, #:lower16:.LC1377
	mov	r2, #3
	ldr	r1, .L19028+60
	movt	r0, #:upper16:.LC1377
	mvn	r10, #21
	bl	printk
.L18841:
	movw	r0, #:lower16:.LC1381
	mov	r3, r7
	ldr	r1, .L19028+20
	mov	r2, r5
	movt	r0, #:upper16:.LC1381
	bl	printk
	b	.L18835
.L19013:
	bl	__stack_chk_fail
.L19025:
	movw	r0, #:lower16:.LC1379
	ldr	r1, .L19028+60
	mvn	r10, #11
	movt	r0, #:upper16:.LC1379
	bl	printk
	b	.L18841
.L19029:
	.align	2
.L19028:
	.word	.LANCHOR8-1344
	.word	.LANCHOR1+3316
	.word	.LANCHOR7-1144
	.word	.LANCHOR4+1386
	.word	.LANCHOR5+2720
	.word	.LANCHOR5+2672
	.word	.LANCHOR8-1326
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.word	.LANCHOR1+3124
	.word	.LANCHOR8-1360
	.word	.LANCHOR8-1398
	.word	.LANCHOR1+1020
	.word	.LANCHOR1+1440
	.word	.LANCHOR5+2700
	.word	.LANCHOR5+2652
	.word	.LANCHOR8-1416
	.word	.LANCHOR5+2164
	.word	.LANCHOR5+2276
	.fnend
	.size	rmnet_function_bind_config, .-rmnet_function_bind_config
	.align	2
	.global	notify_control_line_state
	.syntax unified
	.arm
	.fpu softvfp
	.type	notify_control_line_state, %function
notify_control_line_state:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR1
	.save {lr}
	str	lr, [sp, #-4]!
	mov	lr, #1
	movt	ip, #:upper16:.LANCHOR1
	mov	r2, lr
	mov	r1, lr
	mov	r3, #0
	str	lr, [ip, #2200]
	ldr	lr, [sp], #4
	str	r0, [ip, #3480]
	add	r0, ip, #2192
	add	r0, r0, #12
	b	__wake_up
	.fnend
	.size	notify_control_line_state, .-notify_control_line_state
	.align	2
	.global	modem_register
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_register, %function
modem_register:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r2, r0, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	beq	.L19036
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC1111
	movt	r3, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC1111
	str	r2, [r3, #3996]
	bl	printk
	mov	r0, #0
.L19032:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L19036:
	movw	r0, #:lower16:.LC1110
	movt	r0, #:upper16:.LC1110
	bl	printk
	mvn	r0, #0
	b	.L19032
	.fnend
	.size	modem_register, .-modem_register
	.align	2
	.global	modem_unregister
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_unregister, %function
modem_unregister:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, #1
	movt	ip, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	mov	lr, #0
	add	r0, ip, #2192
	mov	r3, lr
	add	r0, r0, #12
	mov	r1, r2
	str	r2, [ip, #2200]
	str	lr, [ip, #3996]
	bl	__wake_up
	movw	r0, #:lower16:.LC773
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	movt	r0, #:upper16:.LC773
	add	sp, sp, #8
	b	printk
	.fnend
	.size	modem_unregister, .-modem_unregister
	.align	2
	.global	acm_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_bind_config, %function
acm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r2, [r3, #2088]	@ zero_extendqisi2
	.pad #16
	sub	sp, sp, #16
	cmp	r2, #0
	bne	.L19040
	ldr	ip, [r0, #24]
	ldrb	r2, [ip, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L19043
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [ip, #48]
	ldr	ip, [r0, #24]
	strb	r2, [r3, #2088]
	strb	r2, [r3, #2128]
	ldrb	r2, [ip, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L19043
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [ip, #48]
	ldr	ip, [r0, #24]
	strb	r2, [r3, #2096]
	strb	r2, [r3, #2140]
	ldrb	r2, [ip, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L19043
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r3, #2104]
	strb	r2, [r3, #2151]
	strb	r2, [ip, #48]
.L19040:
	movw	r3, #:lower16:kmalloc_caches
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	mov	r6, r1
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L19054
	mov	r2, #172
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L19080
.L19044:
	movw	r0, #:lower16:acm_connect
	movw	r1, #:lower16:acm_disconnect
	strb	r6, [r4, #146]
	movt	r0, #:upper16:acm_connect
	movt	r1, #:upper16:acm_disconnect
	movw	r3, #:lower16:acm_send_break
	mov	ip, #0
	movt	r3, #:upper16:acm_send_break
	strd	r0, [r4, #116]
	movw	r1, #:lower16:.LC928
	mov	r2, r6
	movt	r1, #:upper16:.LC928
	str	r3, [r4, #124]
	mov	r0, #208
	str	ip, [r4, #148]
	bl	kasprintf
	cmp	r0, #0
	str	r0, [r4]
	beq	.L19081
	ldr	r3, .L19084
	movw	ip, #:lower16:acm_bind
	movw	r1, #:lower16:acm_unbind
	movw	r2, #:lower16:acm_set_alt
	movt	r1, #:upper16:acm_unbind
	movt	r2, #:upper16:acm_set_alt
	movt	ip, #:upper16:acm_bind
	movw	r6, #:lower16:.LANCHOR4
	str	r3, [r4, #4]
	movt	r6, #:upper16:.LANCHOR4
	movw	r3, #1386
	str	ip, [r4, #32]
	str	r1, [r4, #36]
	movw	r1, #:lower16:acm_setup
	str	r2, [r4, #40]
	ldrh	r3, [r6, r3]
	movw	r2, #:lower16:acm_disable
	movt	r1, #:upper16:acm_setup
	movt	r2, #:upper16:acm_disable
	str	r2, [r4, #48]
	tst	r3, #4
	str	r1, [r4, #52]
	bne	.L19082
.L19046:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L19049
	add	r8, r4, #72
	str	r5, [r4, #20]
	add	r2, r5, #36
	mov	r0, r8
	ldr	r1, [r5, #40]
	bl	__list_add
	ldr	r7, [r4, #32]
	cmp	r7, #0
	beq	.L19050
	mov	r1, r4
	mov	r0, r5
	blx	r7
	subs	r7, r0, #0
	blt	.L19083
.L19050:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L19051
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L19051
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L19051:
	tst	r3, #2
	bne	.L19052
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L19052
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L19052:
	tst	r3, #1
	bne	.L19053
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L19053
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L19053:
	cmp	r7, #0
	beq	.L19039
	movw	r3, #1410
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L19048
	b	.L19047
.L19082:
	ldr	ip, [r5]
	movw	r2, #:lower16:.LC929
	mov	r3, r0
	ldr	r1, [r5, #24]
	movt	r2, #:upper16:.LC929
	ldr	r0, .L19084+4
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r5, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L19046
.L19049:
	movw	r3, #1410
	mvn	r7, #21
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L19048
.L19047:
	ldr	r1, [r5, #24]
	movw	r2, #:lower16:.LC930
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC930
	ldr	r0, .L19084+8
	ldr	r1, [r1]
	stm	sp, {r4, r7}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L19048:
	mov	r0, r4
	bl	kfree
.L19039:
	mov	r0, r7
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L19054:
	mov	r4, #16
	b	.L19044
.L19083:
	mov	r0, r8
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L19050
.L19043:
	mvn	r7, #18
	b	.L19039
.L19081:
	mov	r0, r4
	mvn	r7, #11
	bl	kfree
	b	.L19039
.L19080:
	mvn	r7, #11
	b	.L19039
.L19085:
	.align	2
.L19084:
	.word	.LANCHOR0+2152
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.fnend
	.size	acm_bind_config, .-acm_bind_config
	.align	2
	.global	adb_req_put
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_req_put, %function
adb_req_put:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r4, r0, #88
	mov	r0, r4
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	mov	r6, r2
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	ldr	r1, [r7, #4]
	add	r0, r6, #36
	mov	r2, r7
	bl	__list_add
	ldrd	r6, [sp, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	adb_req_put, .-adb_req_put
	.align	2
	.global	adb_req_get
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_req_get, %function
adb_req_get:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #88
	mov	r4, r1
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4]
	mov	r6, r0
	cmp	r4, r3
	beq	.L19090
	mov	r0, r3
	sub	r4, r3, #36
	bl	list_del
.L19089:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L19090:
	mov	r4, #0
	b	.L19089
	.fnend
	.size	adb_req_get, .-adb_req_get
	.align	2
	.global	f_midi_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_bind_config, %function
f_midi_bind_config:
	.fnstart
	@ args = 16, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r9, [sp, #60]
	cmp	r9, #0
	beq	.L19093
	mvn	ip, #0
	str	ip, [r9]
	str	ip, [r9, #4]
.L19093:
	ldr	ip, [sp, #48]
	cmp	ip, #16
	cmpls	r3, #16
	bhi	.L19103
	movw	fp, #:lower16:kmalloc_caches
	mov	r10, r0
	stm	sp, {r1, r2}
	movt	fp, #:upper16:kmalloc_caches
	mov	r8, r3
	ldr	r0, [fp, #36]
	cmp	r0, #0
	beq	.L19104
	mov	r2, #344
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L19120
.L19095:
	cmp	r8, #0
	addne	r7, r5, #228
	movne	r6, r8
	movne	r4, #0
	beq	.L19121
.L19098:
	ldr	ip, [fp, #24]
	mov	r2, #12
	movw	r1, #32976
	mov	r3, #16
	subs	r0, ip, #0
	beq	.L19096
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L19107
.L19096:
	mov	r2, #0
	str	r5, [r3]
	strb	r4, [r3, #8]
	add	r4, r4, #1
	cmp	r4, r8
	str	r2, [r3, #4]
	str	r3, [r7, #4]!
	bne	.L19098
.L19099:
	ldr	r3, [r10, #24]
	movw	r1, #:lower16:f_midi_in_tasklet
	mov	r2, r5
	movt	r1, #:upper16:f_midi_in_tasklet
	add	r0, r5, #300
	ldr	r3, [r3]
	str	r3, [r5, #84]
	bl	tasklet_init
	ldr	r0, [sp, #4]
	mov	r1, #208
	bl	kstrdup
	ldr	r3, [sp, #48]
	str	r8, [r5, #320]
	str	r3, [r5, #324]
	ldr	r3, [sp]
	str	r0, [r5, #332]
	mov	r0, r5
	str	r3, [r5, #328]
	ldr	r3, [sp, #52]
	str	r3, [r5, #336]
	ldr	r3, [sp, #56]
	str	r3, [r5, #340]
	bl	f_midi_register_card
	subs	r7, r0, #0
	bge	.L19122
.L19097:
	cmp	r6, #0
	beq	.L19101
	add	r6, r5, r6, lsl #2
	add	r4, r5, #232
	add	r6, r6, #232
.L19102:
	ldr	r0, [r6, #-4]!
	bl	kfree
	cmp	r4, r6
	bne	.L19102
.L19101:
	mov	r0, r5
	bl	kfree
.L19092:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L19122:
	ldr	lr, .L19123
	movw	r3, #:lower16:.LC1167
	movw	ip, #:lower16:f_midi_bind
	movt	r3, #:upper16:.LC1167
	movw	r1, #:lower16:f_midi_unbind
	movw	r2, #:lower16:f_midi_set_alt
	movt	ip, #:upper16:f_midi_bind
	movt	r1, #:upper16:f_midi_unbind
	movt	r2, #:upper16:f_midi_set_alt
	stm	r5, {r3, lr}
	movw	r3, #:lower16:f_midi_disable
	mov	r0, r10
	movt	r3, #:upper16:f_midi_disable
	str	ip, [r5, #32]
	str	r1, [r5, #36]
	mov	r1, r5
	str	r2, [r5, #40]
	str	r3, [r5, #48]
	bl	usb_add_function
	subs	r7, r0, #0
	bne	.L19097
	cmp	r9, #0
	beq	.L19092
	ldr	r3, [r5, #100]
	ldr	r3, [r3]
	ldr	r3, [r3]
	str	r3, [r9]
	ldr	r3, [r5, #100]
	ldr	r3, [r3, #12]
	str	r3, [r9, #4]
	ldr	r3, [r5, #100]
	ldr	r3, [r3]
	ldr	r3, [r3]
	str	r3, [r9]
	ldr	r3, [r5, #100]
	ldr	r3, [r3, #12]
	str	r3, [r9, #4]
	b	.L19092
.L19104:
	mov	r5, #16
	b	.L19095
.L19107:
	mov	r6, r4
	mvn	r7, #11
	b	.L19097
.L19121:
	mov	r6, r8
	b	.L19099
.L19103:
	mvn	r7, #21
	b	.L19092
.L19120:
	mvn	r7, #11
	b	.L19092
.L19124:
	.align	2
.L19123:
	.word	.LANCHOR7-1860
	.fnend
	.size	f_midi_bind_config, .-f_midi_bind_config
	.align	2
	.global	rndis_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_bind_config, %function
rndis_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:__stack_chk_guard
	movt	r6, #:upper16:__stack_chk_guard
	strd	r8, [sp, #16]
	subs	r9, r1, #0
	ldr	r3, [r6]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #40
	sub	sp, sp, #40
	str	r3, [sp, #36]
	beq	.L19144
	movw	r7, #:lower16:.LANCHOR1
	mov	r8, r0
	movt	r7, #:upper16:.LANCHOR1
	ldrb	r3, [r7, #3740]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L19127
.L19130:
	movw	r5, #:lower16:.LANCHOR7
	movt	r5, #:upper16:.LANCHOR7
	ldrb	r3, [r5, #-1508]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L19129
	ldr	r2, [r8, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19132
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r8, #24]
	strb	r3, [r5, #-1512]
	strb	r3, [r5, #-1508]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19132
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r8, #24]
	strb	r3, [r5, #-1500]
	strb	r3, [r5, #-1468]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19132
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	strb	r3, [r5, #-1521]
	strb	r3, [r5, #-1492]
.L19129:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L19145
	mov	r2, #180
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L19174
.L19133:
	ldr	r2, [r9]	@ unaligned
	movw	r3, #:lower16:.LC1184
	movw	r0, #:lower16:rndis_bind
	ldr	ip, .L19178
	movw	r1, #:lower16:rndis_unbind
	movt	r0, #:upper16:rndis_bind
	movt	r1, #:upper16:rndis_unbind
	movt	r3, #:upper16:.LC1184
	ldr	lr, [r5, #-1464]
	str	r2, [r4, #150]	@ unaligned
	movw	r2, #:lower16:rndis_set_alt
	ldrh	r10, [r9, #4]	@ unaligned
	movt	r2, #:upper16:rndis_set_alt
	movw	r9, #:lower16:.LANCHOR4
	str	ip, [r4, #4]
	movt	r9, #:upper16:.LANCHOR4
	strd	r0, [r4, #32]
	ldr	ip, [r5, #-1460]
	str	r3, [r4]
	movw	r1, #:lower16:rndis_add_header
	str	r2, [r4, #40]
	movw	r2, #1386
	movt	r1, #:upper16:rndis_add_header
	ldrh	r0, [r9, r2]
	movw	r2, #:lower16:rndis_rm_hdr
	str	lr, [r4, #116]
	movt	r2, #:upper16:rndis_rm_hdr
	str	ip, [r4, #120]
	str	r1, [r4, #128]
	movw	r1, #:lower16:rndis_disable
	movt	r1, #:upper16:rndis_disable
	tst	r0, #4
	movw	r0, #:lower16:rndis_setup
	movt	r0, #:upper16:rndis_setup
	str	r2, [r4, #132]
	mov	r2, #0
	str	r1, [r4, #48]
	str	r0, [r4, #52]
	mov	r0, #44
	strh	r2, [r4, #98]	@ movhi
	str	r0, [r4, #100]
	strh	r10, [r4, #154]	@ unaligned
	str	r2, [r4, #156]
	str	r2, [r4, #160]
	bne	.L19175
.L19135:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L19138
	add	r10, r4, #72
	str	r8, [r4, #20]
	add	r2, r8, #36
	mov	r0, r10
	ldr	r1, [r8, #40]
	bl	__list_add
	ldr	r5, [r4, #32]
	cmp	r5, #0
	beq	.L19139
	mov	r1, r4
	mov	r0, r8
	blx	r5
	subs	r5, r0, #0
	blt	.L19176
.L19139:
	ldrb	r3, [r8, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L19140
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L19140
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r8, #45]
.L19140:
	tst	r3, #2
	bne	.L19141
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L19141
	ldrb	r2, [r8, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r8, #45]
.L19141:
	tst	r3, #1
	bne	.L19142
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L19142
	ldrb	r3, [r8, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r8, #45]
.L19142:
	cmp	r5, #0
	beq	.L19125
	movw	r3, #1410
	ldrh	r3, [r9, r3]
	tst	r3, #4
	beq	.L19137
	b	.L19136
.L19175:
	ldr	ip, [r8]
	movw	r2, #:lower16:.LC929
	ldr	r1, [r8, #24]
	movt	r2, #:upper16:.LC929
	ldr	r0, .L19178+4
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r8, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L19135
.L19138:
	movw	r3, #1410
	mvn	r5, #21
	ldrh	r3, [r9, r3]
	tst	r3, #4
	beq	.L19137
.L19136:
	ldr	r1, [r8, #24]
	movw	r2, #:lower16:.LC930
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC930
	ldr	r0, .L19178+8
	ldr	r1, [r1]
	strd	r4, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L19137:
	mov	r0, r4
	bl	kfree
.L19134:
	ldrb	r3, [r7, #3740]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L19125
	mov	r4, #0
	movw	r1, #:lower16:.LC601
	movt	r1, #:upper16:.LC601
	mov	r2, r4
	add	r0, sp, #16
	strb	r4, [r7, #3740]
	bl	sprintf
	add	r0, sp, #16
	mov	r1, r4
	bl	remove_proc_entry
.L19125:
	ldr	r2, [sp, #36]
	mov	r0, r5
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L19177
	add	sp, sp, #40
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L19127:
	bl	rndis_init.part.90
	subs	r5, r0, #0
	bge	.L19130
	b	.L19125
.L19145:
	mov	r4, #16
	b	.L19133
.L19174:
	mvn	r5, #11
	b	.L19134
.L19176:
	mov	r0, r10
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L19139
.L19132:
	mvn	r5, #18
	b	.L19125
.L19144:
	mvn	r5, #21
	b	.L19125
.L19177:
	bl	__stack_chk_fail
.L19179:
	.align	2
.L19178:
	.word	.LANCHOR7-1456
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.fnend
	.size	rndis_bind_config, .-rndis_bind_config
	.align	2
	.global	rndis_bind_config_vendor
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_bind_config_vendor, %function
rndis_bind_config_vendor:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #:lower16:__stack_chk_guard
	movt	r5, #:upper16:__stack_chk_guard
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	subs	r9, r1, #0
	ldr	r1, [r5]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	str	r1, [sp, #36]
	beq	.L19199
	movw	r6, #:lower16:.LANCHOR1
	mov	fp, r3
	movt	r6, #:upper16:.LANCHOR1
	mov	r7, r0
	ldrb	r3, [r6, #3740]	@ zero_extendqisi2
	mov	r10, r2
	cmp	r3, #0
	beq	.L19182
.L19185:
	movw	r8, #:lower16:.LANCHOR7
	movt	r8, #:upper16:.LANCHOR7
	ldrb	r3, [r8, #-1508]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L19184
	ldr	r2, [r7, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19187
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r7, #24]
	strb	r3, [r8, #-1512]
	strb	r3, [r8, #-1508]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19187
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r7, #24]
	strb	r3, [r8, #-1500]
	strb	r3, [r8, #-1468]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19187
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	strb	r3, [r8, #-1521]
	strb	r3, [r8, #-1492]
.L19184:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L19200
	mov	r2, #180
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L19229
.L19188:
	ldr	r2, [r9]	@ unaligned
	movw	r0, #:lower16:rndis_unbind
	movw	r3, #:lower16:.LC1184
	ldr	lr, .L19233
	movt	r0, #:upper16:rndis_unbind
	movw	ip, #:lower16:rndis_bind
	movt	ip, #:upper16:rndis_bind
	movt	r3, #:upper16:.LC1184
	str	r2, [r4, #150]	@ unaligned
	movw	r2, #:lower16:rndis_set_alt
	ldrh	r1, [r9, #4]	@ unaligned
	movt	r2, #:upper16:rndis_set_alt
	movw	r9, #:lower16:.LANCHOR4
	str	lr, [r4, #4]
	str	r0, [r4, #36]
	ldr	r0, [r8, #-1464]
	movt	r9, #:upper16:.LANCHOR4
	str	ip, [r4, #32]
	ldr	lr, [r8, #-1460]
	movw	ip, #:lower16:rndis_add_header
	str	r2, [r4, #40]
	movw	r2, #1386
	movt	ip, #:upper16:rndis_add_header
	str	r3, [r4]
	ldrh	r2, [r9, r2]
	str	r0, [r4, #116]
	movw	r0, #:lower16:rndis_setup
	movt	r0, #:upper16:rndis_setup
	strh	r1, [r4, #154]	@ unaligned
	movw	r1, #:lower16:rndis_rm_hdr
	movt	r1, #:upper16:rndis_rm_hdr
	tst	r2, #4
	str	r0, [r4, #52]
	movw	r2, #:lower16:rndis_disable
	mov	r0, #0
	str	lr, [r4, #120]
	movt	r2, #:upper16:rndis_disable
	str	r1, [r4, #132]
	mov	r1, #44
	str	r2, [r4, #48]
	strh	r0, [r4, #98]	@ movhi
	str	r1, [r4, #100]
	str	ip, [r4, #128]
	strd	r10, [r4, #156]
	bne	.L19230
.L19190:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L19193
	add	r10, r4, #72
	str	r7, [r4, #20]
	add	r2, r7, #36
	mov	r0, r10
	ldr	r1, [r7, #40]
	bl	__list_add
	ldr	r8, [r4, #32]
	cmp	r8, #0
	beq	.L19194
	mov	r1, r4
	mov	r0, r7
	blx	r8
	subs	r8, r0, #0
	blt	.L19231
.L19194:
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L19195
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L19195
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r7, #45]
.L19195:
	tst	r3, #2
	bne	.L19196
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L19196
	ldrb	r2, [r7, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r7, #45]
.L19196:
	tst	r3, #1
	bne	.L19197
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L19197
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r7, #45]
.L19197:
	cmp	r8, #0
	beq	.L19180
	movw	r3, #1410
	ldrh	r3, [r9, r3]
	tst	r3, #4
	beq	.L19192
	b	.L19191
.L19230:
	ldr	ip, [r7]
	movw	r2, #:lower16:.LC929
	ldr	r1, [r7, #24]
	movt	r2, #:upper16:.LC929
	ldr	r0, .L19233+4
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r7, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L19190
.L19193:
	movw	r3, #1410
	mvn	r8, #21
	ldrh	r3, [r9, r3]
	tst	r3, #4
	beq	.L19192
.L19191:
	ldr	r1, [r7, #24]
	movw	r2, #:lower16:.LC930
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC930
	ldr	r0, .L19233+8
	ldr	r1, [r1]
	stm	sp, {r4, r8}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L19192:
	mov	r0, r4
	bl	kfree
.L19189:
	ldrb	r3, [r6, #3740]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L19180
	mov	r4, #0
	movw	r1, #:lower16:.LC601
	movt	r1, #:upper16:.LC601
	mov	r2, r4
	add	r0, sp, #16
	strb	r4, [r6, #3740]
	bl	sprintf
	add	r0, sp, #16
	mov	r1, r4
	bl	remove_proc_entry
.L19180:
	ldr	r2, [sp, #36]
	mov	r0, r8
	ldr	r3, [r5]
	cmp	r2, r3
	bne	.L19232
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L19182:
	bl	rndis_init.part.90
	subs	r8, r0, #0
	bge	.L19185
	b	.L19180
.L19200:
	mov	r4, #16
	b	.L19188
.L19229:
	mvn	r8, #11
	b	.L19189
.L19231:
	mov	r0, r10
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L19194
.L19187:
	mvn	r8, #18
	b	.L19180
.L19199:
	mvn	r8, #21
	b	.L19180
.L19232:
	bl	__stack_chk_fail
.L19234:
	.align	2
.L19233:
	.word	.LANCHOR7-1456
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.fnend
	.size	rndis_bind_config_vendor, .-rndis_bind_config_vendor
	.align	2
	.global	rndis_signal_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_signal_connect, %function
rndis_signal_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r1, #0
	strd	r6, [sp, #8]
	lsl	r6, r0, #4
	movt	r4, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	sub	r5, r6, r0
	str	r10, [sp, #24]
	add	r10, r4, #3680
	lsl	r5, r5, #2
	str	lr, [sp, #28]
	add	r3, r4, r5
	add	r8, r10, r5
	str	r1, [r3, #3696]
	ldr	r3, [r8, #4]
	cmp	r3, r1
	beq	.L19238
	movw	r3, #:lower16:kmalloc_caches
	mov	r9, r0
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, r1
	beq	.L19239
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r7, r0, #0
	beq	.L19240
	add	r3, r7, #20
.L19237:
	sub	r6, r6, r9
	mov	r9, #20
	str	r3, [r7, #8]
	add	r4, r4, r6, lsl #2
	mov	r6, #0
	add	r2, r5, #52
	str	r9, [r7, #12]
	add	r2, r10, r2
	mov	r0, r7
	str	r6, [r7, #16]
	ldr	r1, [r4, #3736]
	bl	__list_add
	ldr	r3, [r7, #8]
	mov	r2, #11
	mov	r1, #7
	movt	r2, 16385
	stm	r3, {r1, r9}
	str	r2, [r3, #8]
	str	r6, [r3, #12]
	str	r6, [r3, #16]
	ldr	r3, [r8, #44]
	ldr	r0, [r8, #48]
	blx	r3
	mov	r0, r6
.L19235:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L19239:
	mov	r3, #36
	mov	r7, #16
	b	.L19237
.L19238:
	movw	r0, #65012
	movt	r0, 65535
	b	.L19235
.L19240:
	mvn	r0, #11
	b	.L19235
	.fnend
	.size	rndis_signal_connect, .-rndis_signal_connect
	.align	2
	.global	rndis_signal_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_signal_disconnect, %function
rndis_signal_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r1, #1
	strd	r6, [sp, #8]
	lsl	r6, r0, #4
	movt	r4, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	sub	r5, r6, r0
	str	r10, [sp, #24]
	add	r10, r4, #3680
	lsl	r5, r5, #2
	str	lr, [sp, #28]
	add	r3, r4, r5
	add	r8, r10, r5
	str	r1, [r3, #3696]
	ldr	r3, [r8, #4]
	cmp	r3, #0
	beq	.L19245
	movw	r3, #:lower16:kmalloc_caches
	mov	r9, r0
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L19246
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r7, r0, #0
	beq	.L19247
	add	r3, r7, #20
.L19244:
	sub	r6, r6, r9
	mov	r9, #20
	str	r3, [r7, #8]
	add	r4, r4, r6, lsl #2
	mov	r6, #0
	add	r2, r5, #52
	str	r9, [r7, #12]
	add	r2, r10, r2
	mov	r0, r7
	str	r6, [r7, #16]
	ldr	r1, [r4, #3736]
	bl	__list_add
	ldr	r3, [r7, #8]
	mov	r2, #12
	mov	r1, #7
	movt	r2, 16385
	stm	r3, {r1, r9}
	str	r2, [r3, #8]
	str	r6, [r3, #12]
	str	r6, [r3, #16]
	ldr	r3, [r8, #44]
	ldr	r0, [r8, #48]
	blx	r3
	mov	r0, r6
.L19242:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L19246:
	mov	r3, #36
	mov	r7, #16
	b	.L19244
.L19245:
	movw	r0, #65012
	movt	r0, 65535
	b	.L19242
.L19247:
	mvn	r0, #11
	b	.L19242
	.fnend
	.size	rndis_signal_disconnect, .-rndis_signal_disconnect
	.align	2
	.global	rndis_uninit
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_uninit, %function
rndis_uninit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	bxgt	lr
	rsb	r0, r0, r0, lsl #4
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r1, #0
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	lsl	r3, r0, #2
	movt	r6, #:upper16:.LANCHOR1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	add	r2, r6, r3
	ldr	r3, [r2, #3732]
	add	r6, r2, #3728
	mov	r8, r2
	str	r1, [r2, #3684]
	add	r6, r6, #4
	ldr	r4, [r3]
.L19251:
	cmp	r6, r3
	beq	.L19249
	ldr	r2, [r3, #16]
	cmp	r2, #0
	bne	.L19257
	b	.L19271
.L19259:
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L19256
	mov	r4, r3
.L19257:
	cmp	r4, r6
	ldr	r3, [r4]
	bne	.L19259
.L19249:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L19271:
	mov	r4, r3
.L19256:
	ldr	r7, [r4, #8]
	mov	r3, #1
	str	r3, [r4, #16]
	cmp	r7, #0
	beq	.L19249
	ldr	r5, [r8, #3732]
	cmp	r5, r6
	ldr	r4, [r5]
	bne	.L19254
	b	.L19272
.L19261:
	mov	r4, r3
.L19254:
	cmp	r5, #0
	beq	.L19253
	ldr	r3, [r5, #8]
	cmp	r7, r3
	beq	.L19273
.L19253:
	cmp	r4, r6
	mov	r5, r4
	ldr	r3, [r4]
	bne	.L19261
	ldr	r3, [r8, #3732]
	ldr	r4, [r3]
	b	.L19251
.L19273:
	mov	r0, r5
	bl	list_del
	mov	r0, r5
	bl	kfree
	b	.L19253
.L19272:
	mov	r3, r6
	b	.L19251
	.fnend
	.size	rndis_uninit, .-rndis_uninit
	.align	2
	.global	rndis_set_host_mac
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_host_mac, %function
rndis_set_host_mac:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	rsb	r0, r0, r0, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r3, r3, r0, lsl #2
	str	r1, [r3, #3700]
	bx	lr
	.fnend
	.size	rndis_set_host_mac, .-rndis_set_host_mac
	.align	2
	.global	rndis_msg_parser
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_msg_parser, %function
rndis_msg_parser:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	subs	r5, r1, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #64
	sub	sp, sp, #64
	beq	.L19276
	cmp	r0, #0
	ldr	r2, [r5]	@ unaligned
	ldr	r4, [r5, #4]	@ unaligned
	bne	.L19288
	sub	r3, r2, #2
	cmp	r3, #6
	ldrls	pc, [pc, r3, asl #2]
	b	.L19279
.L19281:
	.word	.L19280
	.word	.L19282
	.word	.L19283
	.word	.L19284
	.word	.L19285
	.word	.L19279
	.word	.L19286
.L19285:
	ldr	r0, .L19405
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L19393
.L19305:
	movw	r7, #:lower16:.LANCHOR1
	mov	r8, #1
	movt	r7, #:upper16:.LANCHOR1
	ldr	r3, [r7, #3732]
	add	r9, r7, #3680
	add	r6, r9, #52
	ldr	r4, [r3]
.L19309:
	cmp	r3, r6
	beq	.L19316
	ldr	r2, [r3, #16]
	cmp	r2, #0
	bne	.L19314
	b	.L19394
.L19317:
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L19313
	mov	r4, r3
.L19314:
	cmp	r4, r6
	ldr	r3, [r4]
	bne	.L19317
.L19316:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L19395
	mov	r2, #36
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L19276
	add	r3, r5, #20
.L19311:
	mov	r4, #0
	mov	r6, #16
	str	r3, [r5, #8]
	add	r2, r9, #52
	mov	r0, r5
	str	r6, [r5, #12]
	str	r4, [r5, #16]
	ldr	r1, [r7, #3736]
	bl	__list_add
	ldr	r3, [r5, #8]
	mov	r1, #-2147483642
	mov	r2, #1
	stm	r3, {r1, r6}
	str	r4, [r3, #8]
	str	r2, [r3, #12]
	ldr	r3, [r7, #3724]
	ldr	r0, [r7, #3728]
	blx	r3
	mov	r0, r4
.L19275:
	add	sp, sp, #64
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L19280:
	ldr	r0, .L19405+4
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L19396
.L19287:
	movw	r7, #:lower16:.LANCHOR1
	mov	r2, #1
	movt	r7, #:upper16:.LANCHOR1
	ldr	r3, [r7, #3708]
	str	r2, [r7, #3684]
	cmp	r3, #0
	beq	.L19288
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L19321
	mov	r2, #72
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L19276
	add	r3, r6, #20
.L19289:
	mov	r4, #0
	mov	r8, #52
	str	r3, [r6, #8]
	ldr	r2, .L19405+8
	mov	r0, r6
	str	r8, [r6, #12]
	str	r4, [r6, #16]
	ldr	r1, [r7, #3736]
	bl	__list_add
	ldr	r3, [r6, #8]
	mov	r1, #-2147483646
	mov	r2, #1
	stm	r3, {r1, r8}
	ldr	r1, [r5, #8]
	str	r1, [r3, #8]
	str	r4, [r3, #12]
	str	r2, [r3, #16]
	str	r4, [r3, #20]
	str	r2, [r3, #24]
	str	r4, [r3, #28]
	ldrb	r2, [r7, #3716]	@ zero_extendqisi2
	ldr	r1, [r7, #3708]
	str	r2, [r3, #32]
	ldrb	r2, [r7, #3716]	@ zero_extendqisi2
	ldr	r1, [r1, #356]
	str	r4, [r3, #44]
	str	r4, [r3, #48]
	add	r1, r1, #80
	mul	r2, r2, r1
	str	r2, [r3, #36]
	ldrb	r2, [r7, #3717]	@ zero_extendqisi2
	str	r2, [r3, #40]
	ldr	r3, [r7, #3724]
	ldr	r0, [r7, #3728]
	blx	r3
	mov	r0, r4
	b	.L19275
.L19282:
	ldr	r0, .L19405+12
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L19397
.L19290:
	movw	r5, #:lower16:.LANCHOR1
	mov	r4, #0
	movt	r5, #:upper16:.LANCHOR1
	ldr	r0, [r5, #3708]
	str	r4, [r5, #3684]
	cmp	r0, r4
	beq	.L19275
	bl	netif_carrier_off
	ldr	r3, [r5, #3708]
	ldr	r5, [r3, #576]
	cmp	r5, r4
	beq	.L19398
	mov	r0, r4
	add	r1, r5, #80
	bl	_set_bit
	mov	r0, r4
	b	.L19275
.L19283:
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	ldr	r3, [r7, #3708]
	cmp	r3, #0
	beq	.L19288
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L19323
	mov	r2, #156
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L19276
	add	r2, r4, #20
.L19292:
	mov	r3, #136
	mov	r8, #0
	mov	r0, r4
	strd	r2, [r4, #8]
	ldr	r2, .L19405+8
	str	r8, [r4, #16]
	ldr	r1, [r7, #3736]
	bl	__list_add
	ldr	r6, [r4, #8]
	mov	r3, #-2147483644
	mov	r1, r4
	str	r3, [r6]
	ldr	r3, [r5, #8]
	str	r3, [r6, #8]
	ldr	r0, [r5, #12]
	bl	gen_ndis_query_resp.constprop.117
	cmp	r0, #0
	beq	.L19293
	mov	r0, #187
	mov	r3, #24
	movt	r0, 49152
	str	r3, [r6, #4]
	str	r8, [r6, #16]
	str	r8, [r6, #20]
.L19293:
	str	r0, [r6, #12]
	ldr	r3, [r7, #3724]
	ldr	r0, [r7, #3728]
	blx	r3
	mov	r0, #0
	b	.L19275
.L19394:
	mov	r4, r3
.L19313:
	ldr	r10, [r4, #8]
	str	r8, [r4, #16]
	cmp	r10, #0
	beq	.L19316
	ldr	r5, [r7, #3732]
	cmp	r5, r6
	ldr	r4, [r5]
	bne	.L19308
	b	.L19399
.L19327:
	mov	r4, r3
.L19308:
	cmp	r5, #0
	beq	.L19307
	ldr	r3, [r5, #8]
	cmp	r10, r3
	beq	.L19400
.L19307:
	cmp	r4, r6
	mov	r5, r4
	ldr	r3, [r4]
	bne	.L19327
	ldr	r3, [r7, #3732]
	ldr	r4, [r3]
	b	.L19309
.L19400:
	mov	r0, r5
	bl	list_del
	mov	r0, r5
	bl	kfree
	b	.L19307
.L19395:
	mov	r3, #36
	mov	r5, #16
	b	.L19311
.L19399:
	mov	r3, r6
	b	.L19309
.L19284:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L19325
	mov	r2, #36
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L19276
	add	r3, r4, #20
.L19294:
	movw	r7, #:lower16:.LANCHOR1
	str	r3, [r4, #8]
	mov	r8, #16
	mov	r3, #0
	movt	r7, #:upper16:.LANCHOR1
	add	r2, r7, #3728
	mov	r0, r4
	str	r8, [r4, #12]
	str	r3, [r4, #16]
	add	r2, r2, #4
	ldr	r1, [r7, #3736]
	bl	__list_add
	ldr	r6, [r4, #8]
	mov	r2, #-2147483643
	ldr	r3, [r5, #16]
	ldr	r0, [r5, #20]
	stm	r6, {r2, r8}
	ldr	r2, [r5, #8]
	str	r2, [r6, #8]
	ldr	r1, [r4, #8]
	ldr	r2, [r5, #12]
	cmp	r1, #0
	beq	.L19295
	movw	r1, #270
	movt	r1, 1
	cmp	r2, r1
	beq	.L19297
	movw	r1, #259
	movt	r1, 257
	cmp	r2, r1
	bne	.L19401
	ldr	r0, .L19405+16
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L19402
.L19302:
	mov	r3, #0
	str	r3, [r6, #12]
.L19304:
	ldr	r3, [r7, #3724]
	ldr	r0, [r7, #3728]
	blx	r3
	mov	r0, #0
	b	.L19275
.L19286:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L19331
	mov	r2, #36
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r7, r0, #0
	beq	.L19276
	add	r3, r7, #20
.L19318:
	movw	r6, #:lower16:.LANCHOR1
	mov	r4, #0
	str	r3, [r7, #8]
	movt	r6, #:upper16:.LANCHOR1
	mov	r8, #16
	add	r2, r6, #3728
	mov	r0, r7
	add	r2, r2, #4
	str	r8, [r7, #12]
	str	r4, [r7, #16]
	ldr	r1, [r6, #3736]
	bl	__list_add
	ldr	r3, [r7, #8]
	mov	r2, #-2147483640
	stm	r3, {r2, r8}
	ldr	r2, [r5, #8]
	str	r2, [r3, #8]
	str	r4, [r3, #12]
	ldr	r3, [r6, #3724]
	ldr	r0, [r6, #3728]
	blx	r3
	mov	r0, r4
	b	.L19275
.L19323:
	mov	r2, #36
	mov	r4, #16
	b	.L19292
.L19321:
	mov	r3, #36
	mov	r6, #16
	b	.L19289
.L19401:
	movw	r0, #:lower16:.LC1395
	ldr	r1, .L19405+20
	movt	r0, #:upper16:.LC1395
	bl	printk
.L19295:
	mov	r3, #187
	movt	r3, 49152
	str	r3, [r6, #12]
	b	.L19304
.L19297:
	add	r1, r5, r0
	ldr	r3, [r7, #3704]
	ldr	r2, [r1, #8]	@ unaligned
	ldr	r0, .L19405+24
	strh	r2, [r3]	@ movhi
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L19403
.L19299:
	ldr	r3, [r7, #3704]
	ldr	r0, [r7, #3708]
	ldrh	r4, [r3]
	cmp	r4, #0
	beq	.L19300
	mov	r3, #2
	str	r3, [r7, #3684]
	bl	netif_carrier_on
	ldr	r3, [r7, #3708]
	ldr	r2, [r3, #164]
	tst	r2, #1
	beq	.L19302
	ldr	r4, [r3, #576]
	mov	r0, #0
	add	r1, r4, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L19302
	ldr	r0, [r4, #4]
	bl	__netif_schedule
	b	.L19302
.L19300:
	mov	r3, #1
	str	r3, [r7, #3684]
	bl	netif_carrier_off
	ldr	r3, [r7, #3708]
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L19404
	add	r1, r1, #80
	mov	r0, r4
	bl	_set_bit
	b	.L19302
.L19276:
	mvn	r0, #11
	b	.L19275
.L19288:
	movw	r0, #65012
	movt	r0, 65535
	b	.L19275
.L19397:
	movw	r1, #:lower16:.LC1393
	ldr	r2, .L19405+28
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1393
	bl	__dynamic_pr_debug
	b	.L19290
.L19396:
	movw	r1, #:lower16:.LC1392
	ldr	r2, .L19405+28
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1392
	bl	__dynamic_pr_debug
	b	.L19287
.L19393:
	movw	r1, #:lower16:.LC1396
	ldr	r2, .L19405+28
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1396
	bl	__dynamic_pr_debug
	b	.L19305
.L19331:
	mov	r3, #36
	mov	r7, #16
	b	.L19318
.L19325:
	mov	r3, #36
	mov	r4, #16
	b	.L19294
.L19398:
	movw	r0, #:lower16:.LC109
	movw	r1, #1847
	movt	r0, #:upper16:.LC109
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC110
	movt	r0, #:upper16:.LC110
	bl	printk
	mov	r0, r5
	b	.L19275
.L19402:
	movw	r1, #:lower16:.LC640
	ldr	r2, .L19405+20
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC640
	bl	__dynamic_pr_debug
	b	.L19302
.L19403:
	ldr	r3, [r7, #3704]
	movw	r1, #:lower16:.LC1394
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1394
	ldr	r2, .L19405+20
	ldrh	r3, [r3]
	bl	__dynamic_pr_debug
	b	.L19299
.L19404:
	movw	r0, #:lower16:.LC109
	movw	r1, #1847
	movt	r0, #:upper16:.LC109
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC110
	movt	r0, #:upper16:.LC110
	bl	printk
	b	.L19302
.L19279:
	movw	r0, #:lower16:.LC1397
	ldr	r1, .L19405+28
	mov	r3, r4
	movt	r0, #:upper16:.LC1397
	bl	printk
	cmp	r4, #0
	beq	.L19288
	ldr	r8, .L19405+32
	movw	r7, #:lower16:.LC1398
	mov	r6, #0
	movt	r7, #:upper16:.LC1398
	sub	r9, r8, #32
	b	.L19320
.L19319:
	add	r6, r6, #16
	cmp	r6, r4
	bcs	.L19288
.L19320:
	ldrh	r3, [r8, #-14]
	tst	r3, #4
	beq	.L19319
	add	ip, r5, r6
	ldrb	r3, [r5, r6]	@ zero_extendqisi2
	mov	r2, r6
	ldrb	lr, [ip, #15]	@ zero_extendqisi2
	mov	r1, r7
	mov	r0, r9
	str	lr, [sp, #56]
	ldrb	lr, [ip, #14]	@ zero_extendqisi2
	str	lr, [sp, #52]
	ldrb	lr, [ip, #13]	@ zero_extendqisi2
	str	lr, [sp, #48]
	ldrb	lr, [ip, #12]	@ zero_extendqisi2
	str	lr, [sp, #44]
	ldrb	lr, [ip, #11]	@ zero_extendqisi2
	str	lr, [sp, #40]
	ldrb	lr, [ip, #10]	@ zero_extendqisi2
	str	lr, [sp, #36]
	ldrb	lr, [ip, #9]	@ zero_extendqisi2
	str	lr, [sp, #32]
	ldrb	lr, [ip, #8]	@ zero_extendqisi2
	str	lr, [sp, #28]
	ldrb	lr, [ip, #7]	@ zero_extendqisi2
	str	lr, [sp, #24]
	ldrb	lr, [ip, #6]	@ zero_extendqisi2
	str	lr, [sp, #20]
	ldrb	lr, [ip, #5]	@ zero_extendqisi2
	str	lr, [sp, #16]
	ldrb	lr, [ip, #4]	@ zero_extendqisi2
	str	lr, [sp, #12]
	ldrb	lr, [ip, #3]	@ zero_extendqisi2
	str	lr, [sp, #8]
	ldrb	lr, [ip, #2]	@ zero_extendqisi2
	str	lr, [sp, #4]
	ldrb	ip, [ip, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L19319
.L19406:
	.align	2
.L19405:
	.word	.LANCHOR8-1200
	.word	.LANCHOR8-1296
	.word	.LANCHOR1+3732
	.word	.LANCHOR8-1264
	.word	.LANCHOR8-1216
	.word	.LANCHOR5+2760
	.word	.LANCHOR8-1248
	.word	.LANCHOR5+2740
	.word	.LANCHOR8-1168
	.fnend
	.size	rndis_msg_parser, .-rndis_msg_parser
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_command_complete, %function
rndis_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r5, #20]
	cmp	r3, #0
	beq	.L19407
	ldr	r6, [r3, #24]
	cmp	r6, #0
	beq	.L19407
	mov	r4, r1
	ldrb	r0, [r5, #164]	@ zero_extendqisi2
	ldr	r1, [r1]
	bl	rndis_msg_parser
	subs	r2, r0, #0
	blt	.L19422
.L19411:
	ldr	r3, [r4]
	ldr	r2, [r3]
	cmp	r2, #2
	beq	.L19423
.L19407:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L19423:
	ldr	r0, .L19425
	ldr	r2, [r3, #20]
	ldrh	r1, [r0, #-6]
	cmp	r2, #2048
	movls	ip, #0
	movhi	ip, #1
	tst	r1, #4
	strb	ip, [r5, #124]
	bne	.L19424
.L19412:
	movw	r3, #:lower16:.LANCHOR7
	movt	r3, #:upper16:.LANCHOR7
	ldr	r3, [r3, #-1460]
	cmp	r3, #1
	movls	r3, #0
	strbls	r3, [r5, #124]
	b	.L19407
.L19422:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC1399
	ldr	ip, [r4, #4]
	movt	r1, #:upper16:.LC1399
	ldr	r3, [r4, #48]
	add	r0, r0, #32
	str	ip, [sp]
	bl	dev_err
	b	.L19411
.L19424:
	ldr	r4, [r3, #20]
	movw	lr, #:lower16:.LC905
	cmp	r2, #2048
	ldr	r1, [r6]
	movt	lr, #:upper16:.LC905
	movw	ip, #:lower16:.LC904
	movt	ip, #:upper16:.LC904
	movls	ip, lr
	ldr	r3, .L19425+4
	movw	r2, #:lower16:.LC1400
	sub	r0, r0, #24
	movt	r2, #:upper16:.LC1400
	stm	sp, {r4, ip}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L19412
.L19426:
	.align	2
.L19425:
	.word	.LANCHOR8-1152
	.word	.LANCHOR5+2780
	.fnend
	.size	rndis_command_complete, .-rndis_command_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_command_complete, %function
rndis_qc_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r4, r1
	str	lr, [sp, #8]
	ldr	r5, [r1, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r1, [r1]
	ldrb	r0, [r5, #144]	@ zero_extendqisi2
	bl	rndis_msg_parser
	subs	r2, r0, #0
	blt	.L19436
.L19428:
	ldr	r3, [r4]
	ldr	r2, [r3]
	cmp	r2, #2
	beq	.L19437
.L19427:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L19437:
	ldr	r0, .L19438
	ldr	r1, [r3, #20]
	ldrh	r2, [r0, #-14]
	str	r1, [r5, #136]
	tst	r2, #4
	beq	.L19427
	ldr	r2, .L19438+4
	movw	r1, #:lower16:.LC1402
	sub	r0, r0, #32
	ldr	r3, [r3, #20]
	movt	r1, #:upper16:.LC1402
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	__dynamic_pr_debug
.L19436:
	ldr	ip, [r4, #4]
	movw	r0, #:lower16:.LC1401
	ldr	r3, [r4, #48]
	movt	r0, #:upper16:.LC1401
	ldr	r1, .L19438+4
	str	ip, [sp]
	bl	printk
	b	.L19428
.L19439:
	.align	2
.L19438:
	.word	.LANCHOR8-1120
	.word	.LANCHOR5+2804
	.fnend
	.size	rndis_qc_command_complete, .-rndis_qc_command_complete
	.align	2
	.global	rndis_register
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_register, %function
rndis_register:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	beq	.L19443
	movw	r3, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldrb	r4, [r3, #3681]	@ zero_extendqisi2
	cmp	r4, #0
	bne	.L19442
	movw	r2, #:lower16:.LANCHOR4
	movw	ip, #3402
	str	r0, [r3, #3724]
	movt	r2, #:upper16:.LANCHOR4
	str	r1, [r3, #3728]
	mov	r1, #1
	ldrh	r0, [r2, ip]
	add	r2, r3, #3680
	strb	r1, [r3, #3681]
	strh	r1, [r2, #36]	@ movhi
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	bne	.L19450
.L19440:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L19442:
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #3426
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, r3]
	tst	r3, #4
	mvneq	r0, #18
	beq	.L19440
	movw	r1, #:lower16:.LC1114
	add	r0, r0, #3408
	movt	r1, #:upper16:.LC1114
	bl	__dynamic_pr_debug
	mvn	r0, #18
	b	.L19440
.L19450:
	movw	r1, #:lower16:.LC1113
	mov	r3, r4
	ldr	r2, .L19451
	movt	r1, #:upper16:.LC1113
	ldr	r0, .L19451+4
	bl	__dynamic_pr_debug
	mov	r0, r4
	b	.L19440
.L19443:
	mvn	r0, #21
	bx	lr
.L19452:
	.align	2
.L19451:
	.word	.LANCHOR5+292
	.word	.LANCHOR4+3384
	.fnend
	.size	rndis_register, .-rndis_register
	.align	2
	.global	rndis_deregister
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_deregister, %function
rndis_deregister:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR4
	str	lr, [sp, #4]
	ldrh	r2, [r3, #18]
	tst	r2, #4
	bne	.L19460
.L19454:
	cmp	r4, #0
	bgt	.L19453
	rsb	r4, r4, r4, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r4, r3, r4, lsl #2
	mov	r3, #0
	strb	r3, [r4, #3681]
.L19453:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L19460:
	movw	r1, #:lower16:.LC267
	mov	r0, r3
	ldr	r2, .L19461
	movt	r1, #:upper16:.LC267
	bl	__dynamic_pr_debug
	b	.L19454
.L19462:
	.align	2
.L19461:
	.word	.LANCHOR5-2032
	.fnend
	.size	rndis_deregister, .-rndis_deregister
	.align	2
	.global	rndis_set_param_dev
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_param_dev, %function
rndis_set_param_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L19473
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	mov	r6, r2
	mov	r5, r1
	str	lr, [sp, #12]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L19472
.L19464:
	cmp	r5, #0
	beq	.L19466
	cmp	r4, #0
	bne	.L19467
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR1
	str	r4, [r3, #3628]
	str	r4, [r3, #3632]
	str	r6, [r3, #3704]
	str	r5, [r3, #3708]
.L19463:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L19472:
	movw	r1, #:lower16:.LC267
	sub	r0, r3, #24
	ldr	r2, .L19473+4
	movt	r1, #:upper16:.LC267
	bl	__dynamic_pr_debug
	b	.L19464
.L19467:
	mvn	r0, #0
	b	.L19463
.L19466:
	mvn	r0, #21
	b	.L19463
.L19474:
	.align	2
.L19473:
	.word	.LANCHOR8-1104
	.word	.LANCHOR5+2832
	.fnend
	.size	rndis_set_param_dev, .-rndis_set_param_dev
	.align	2
	.global	rndis_set_param_vendor
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_param_vendor, %function
rndis_set_param_vendor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	ip, #3450
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	mov	r5, r0
	str	lr, [sp, #12]
	ldrh	r3, [r3, ip]
	mov	r4, r2
	mov	r6, r1
	tst	r3, #4
	bne	.L19483
.L19476:
	clz	r0, r4
	cmp	r5, #0
	lsr	r0, r0, #5
	movne	r0, #1
	cmp	r0, #0
	bne	.L19478
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [r3, #3712]
	str	r4, [r3, #3720]
.L19475:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L19483:
	movw	r1, #:lower16:.LC267
	ldr	r2, .L19484
	movt	r1, #:upper16:.LC267
	ldr	r0, .L19484+4
	bl	__dynamic_pr_debug
	b	.L19476
.L19478:
	mvn	r0, #0
	b	.L19475
.L19485:
	.align	2
.L19484:
	.word	.LANCHOR5+308
	.word	.LANCHOR4+3432
	.fnend
	.size	rndis_set_param_vendor, .-rndis_set_param_vendor
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_bind, %function
rndis_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #16
	sub	sp, sp, #16
	ldr	r7, [r0, #24]
	cmp	r3, #15
	bhi	.L19487
	add	r1, r3, #12
	add	r2, r3, #1
	mov	r5, r0
	movw	r6, #:lower16:.LANCHOR7
	str	r4, [r0, r1, lsl #2]
	movt	r6, #:upper16:.LANCHOR7
	strb	r2, [r0, #44]
	strb	r3, [r4, #148]
	ldrb	r0, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r6, #-1526]
	strb	r3, [r6, #-1518]
	strb	r3, [r6, #-1133]
	cmp	r0, #15
	bls	.L19554
.L19487:
	mvn	r5, #18
.L19489:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #172]
	cmp	r3, #0
	beq	.L19503
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L19503:
	ldr	r3, [r4, #168]
	movw	r1, #:lower16:.LC1091
	movt	r1, #:upper16:.LC1091
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r7]
	mov	r3, r5
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L19486:
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L19554:
	add	r1, r0, #12
	add	r3, r0, #1
	strb	r0, [r6, #-1474]
	strb	r0, [r6, #-1132]
	mov	r2, #0
	str	r4, [r5, r1, lsl #2]
	ldr	r1, .L19560
	strb	r3, [r5, #44]
	strb	r0, [r4, #149]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L19487
	str	r0, [r4, #88]
	mov	r2, #0
	ldr	r1, .L19560+4
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L19487
	str	r0, [r4, #92]
	mov	r2, #0
	sub	r1, r6, #1104
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L19487
	str	r3, [r4, #168]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r8, r0
	str	r0, [r4, #172]
	beq	.L19491
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L19490
	mov	r2, #8
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L19490:
	str	r0, [r8]
	ldr	r3, [r4, #172]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L19491
	mov	r1, #8
	movw	r2, #:lower16:rndis_response_complete
	movt	r2, #:upper16:rndis_response_complete
	str	r1, [r3, #4]
	ldr	r0, [r4, #172]
	ldrb	r3, [r6, #-1126]	@ zero_extendqisi2
	ldrb	r1, [r6, #-1114]	@ zero_extendqisi2
	str	r4, [r0, #32]
	ldr	r0, [r4, #172]
	strb	r3, [r6, #-1090]
	strb	r1, [r6, #-1078]
	strb	r3, [r6, #-1054]
	ldrb	r3, [r6, #-1102]	@ zero_extendqisi2
	str	r2, [r0, #28]
	ldr	r2, [r4, #20]
	ldr	r0, .L19560+8
	strb	r3, [r6, #-1066]
	ldr	r2, [r2, #24]
	strb	r1, [r6, #-1042]
	strb	r3, [r6, #-1030]
	ldr	r8, [r2]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L19494
	ldr	r3, [r8, #20]
	cmp	r3, #2
	bhi	.L19555
.L19493:
	movw	r8, #:lower16:.LANCHOR1
	movw	r1, #:lower16:rndis_open
	movt	r8, #:upper16:.LANCHOR1
	movw	r2, #:lower16:rndis_close
	ldrb	r3, [r8, #3681]	@ zero_extendqisi2
	movt	r1, #:upper16:rndis_open
	movt	r2, #:upper16:rndis_close
	str	r1, [r4, #136]
	str	r2, [r4, #140]
	cmp	r3, #0
	bne	.L19495
	movw	r10, #:lower16:.LANCHOR4
	movw	r1, #3402
	str	r4, [r8, #3728]
	movt	r10, #:upper16:.LANCHOR4
	movw	r2, #:lower16:rndis_response_available
	ldrh	ip, [r10, r1]
	movt	r2, #:upper16:rndis_response_available
	mov	r1, #1
	add	r0, r8, #3680
	strb	r1, [r8, #3681]
	strh	r1, [r0, #36]	@ movhi
	tst	ip, #4
	str	r2, [r8, #3724]
	bne	.L19556
.L19496:
	movw	r2, #1602
	mov	r3, #0
	ldrh	r9, [r10, r2]
	str	r3, [r4, #164]
	ubfx	r9, r9, #2, #1
	cmp	r9, r3
	moveq	r3, r9
	bne	.L19557
.L19497:
	movw	r2, #3474
	rsb	r3, r3, r3, lsl #4
	ldrb	r6, [r6, #-1464]	@ zero_extendqisi2
	ldrh	r0, [r10, r2]
	mov	r1, #0
	add	r3, r8, r3, lsl #2
	add	r2, r4, #150
	str	r1, [r8, #3688]
	str	r1, [r8, #3692]
	tst	r0, #4
	str	r2, [r3, #3700]
	bne	.L19558
.L19508:
	ldr	r2, [r4, #160]
	rsb	r9, r9, r9, lsl #4
	add	r8, r8, r9, lsl #2
	cmp	r2, #0
	strb	r6, [r8, #3716]
	beq	.L19501
	ldr	r1, [r4, #156]
	cmp	r1, #0
	bne	.L19559
.L19501:
	ldr	r3, .L19560+12
	ldrh	r3, [r3, #-14]
	ubfx	r3, r3, #2, #1
	cmp	r3, #0
	bne	.L19499
	mov	r5, r3
	b	.L19486
.L19491:
	mvn	r5, #11
	b	.L19489
.L19555:
	ldr	r0, .L19560+16
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L19494
	ldr	r3, [r8, #20]
	cmp	r3, #4
	bls	.L19493
	ldr	r0, .L19560+20
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L19493
.L19494:
	ldr	r0, [r4, #16]
	mvn	r5, #11
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	b	.L19489
.L19495:
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #3426
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, r3]
	tst	r3, #4
	beq	.L19487
	movw	r1, #:lower16:.LC1114
	add	r0, r0, #3408
	movt	r1, #:upper16:.LC1114
	mvn	r5, #18
	bl	__dynamic_pr_debug
	b	.L19489
.L19559:
	ldrb	r0, [r4, #164]	@ zero_extendqisi2
	bl	rndis_set_param_vendor
	cmp	r0, #0
	beq	.L19501
	mov	r5, #0
	b	.L19489
.L19556:
	movw	r1, #:lower16:.LC1113
	ldr	r2, .L19560+24
	movt	r1, #:upper16:.LC1113
	ldr	r0, .L19560+28
	bl	__dynamic_pr_debug
	b	.L19496
.L19499:
	ldr	r3, [r5, #24]
	ldr	r1, [r7]
	ldr	r3, [r3]
	add	r1, r1, #32
	ldr	r0, [r3, #20]
	cmp	r0, #4
	bhi	.L19512
	movw	r2, #:lower16:.LC1075
	movw	r3, #:lower16:.LC1076
	movt	r2, #:upper16:.LC1075
	cmp	r0, #2
	movt	r3, #:upper16:.LC1076
	movhi	r3, r2
.L19502:
	ldr	ip, [r4, #88]
	movw	r2, #:lower16:.LC1115
	mov	r5, #0
	ldr	r0, [r4, #168]
	movt	r2, #:upper16:.LC1115
	ldr	lr, [r4, #92]
	ldr	r4, [r0, #4]
	ldr	r0, .L19560+32
	str	r4, [sp, #8]
	ldr	lr, [lr, #4]
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L19486
.L19558:
	movw	r1, #:lower16:.LC267
	ldr	r2, .L19560+36
	movt	r1, #:upper16:.LC267
	ldr	r0, .L19560+40
	bl	__dynamic_pr_debug
	b	.L19508
.L19557:
	movw	r1, #:lower16:.LC945
	str	r3, [sp]
	ldr	r2, .L19560+44
	movt	r1, #:upper16:.LC945
	ldr	r0, .L19560+48
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #164]
	uxtb	r9, r3
	b	.L19497
.L19512:
	movw	r3, #:lower16:.LC1090
	movt	r3, #:upper16:.LC1090
	b	.L19502
.L19561:
	.align	2
.L19560:
	.word	.LANCHOR7-1128
	.word	.LANCHOR7-1116
	.word	.LANCHOR7-1020
	.word	.LANCHOR8-1072
	.word	.LANCHOR7-976
	.word	.LANCHOR7-932
	.word	.LANCHOR5+292
	.word	.LANCHOR4+3384
	.word	.LANCHOR8-1104
	.word	.LANCHOR5+332
	.word	.LANCHOR4+3456
	.word	.LANCHOR5-1240
	.word	.LANCHOR4+1584
	.fnend
	.size	rndis_bind, .-rndis_bind
	.align	2
	.global	rndis_set_param_medium
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_param_medium, %function
rndis_set_param_medium:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	ip, #1602
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r0, [r3, ip]
	mov	r5, r2
	.pad #8
	sub	sp, sp, #8
	mov	r6, r1
	tst	r0, #4
	bne	.L19570
.L19563:
	cmp	r4, #0
	bne	.L19565
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [r3, #3688]
	str	r5, [r3, #3692]
.L19562:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L19570:
	movw	r1, #:lower16:.LC945
	add	r0, r3, #1584
	ldr	r2, .L19571
	movt	r1, #:upper16:.LC945
	mov	r3, r6
	str	r5, [sp]
	bl	__dynamic_pr_debug
	b	.L19563
.L19565:
	mvn	r0, #0
	b	.L19562
.L19572:
	.align	2
.L19571:
	.word	.LANCHOR5-1240
	.fnend
	.size	rndis_set_param_medium, .-rndis_set_param_medium
	.align	2
	.global	rndis_set_max_pkt_xfer
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_max_pkt_xfer, %function
rndis_set_max_pkt_xfer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #3474
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r2, [r3, r2]
	mov	r5, r1
	tst	r2, #4
	bne	.L19579
.L19574:
	rsb	r4, r4, r4, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r3, r3, r4, lsl #2
	strb	r5, [r3, #3716]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L19579:
	movw	r1, #:lower16:.LC267
	add	r0, r3, #3456
	ldr	r2, .L19580
	movt	r1, #:upper16:.LC267
	bl	__dynamic_pr_debug
	b	.L19574
.L19581:
	.align	2
.L19580:
	.word	.LANCHOR5+332
	.fnend
	.size	rndis_set_max_pkt_xfer, .-rndis_set_max_pkt_xfer
	.align	2
	.global	rndis_set_pkt_alignment_factor
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_pkt_alignment_factor, %function
rndis_set_pkt_alignment_factor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #3498
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r3, [r3, r2]
	mov	r5, r1
	tst	r3, #4
	bne	.L19588
.L19583:
	rsb	r4, r4, r4, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r3, r3, r4, lsl #2
	strb	r5, [r3, #3717]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L19588:
	movw	r1, #:lower16:.LC267
	ldr	r2, .L19589
	movt	r1, #:upper16:.LC267
	ldr	r0, .L19589+4
	bl	__dynamic_pr_debug
	b	.L19583
.L19590:
	.align	2
.L19589:
	.word	.LANCHOR5+356
	.word	.LANCHOR4+3480
	.fnend
	.size	rndis_set_pkt_alignment_factor, .-rndis_set_pkt_alignment_factor
	.align	2
	.global	rndis_add_hdr
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_add_hdr, %function
rndis_add_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L19591
	mov	r1, #44
	bl	skb_push
	mov	r1, #44
	mov	r4, r0
	bl	__memzero
	mov	r3, #0
	mov	r2, #1
	mov	r1, #36
	strb	r2, [r4]
	strb	r3, [r4, #1]
	strb	r3, [r4, #2]
	strb	r3, [r4, #3]
	ldr	r2, [r5, #80]
	str	r2, [r4, #4]	@ unaligned
	strb	r1, [r4, #8]
	strb	r3, [r4, #9]
	strb	r3, [r4, #10]
	strb	r3, [r4, #11]
	ldr	r3, [r5, #80]
	sub	r3, r3, #44
	str	r3, [r4, #12]	@ unaligned
.L19591:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_add_hdr, .-rndis_add_hdr
	.align	2
	.global	rndis_free_response
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_free_response, %function
rndis_free_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	rsb	r0, r0, r0, lsl #4
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	lsl	r0, r0, #2
	movt	r6, #:upper16:.LANCHOR1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	add	r3, r6, r0
	ldr	r5, [r3, #3732]
	add	r6, r3, #3728
	add	r6, r6, #4
	cmp	r5, r6
	ldr	r4, [r5]
	movne	r7, r1
	bne	.L19600
	b	.L19597
.L19601:
	mov	r4, r3
.L19600:
	cmp	r5, #0
	beq	.L19599
	ldr	r3, [r5, #8]
	cmp	r3, r7
	beq	.L19607
.L19599:
	cmp	r6, r4
	mov	r5, r4
	ldr	r3, [r4]
	bne	.L19601
.L19597:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L19607:
	mov	r0, r5
	bl	list_del
	mov	r0, r5
	bl	kfree
	b	.L19599
	.fnend
	.size	rndis_free_response, .-rndis_free_response
	.align	2
	.global	rndis_get_next_response
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_get_next_response, %function
rndis_get_next_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	beq	.L19614
	rsb	r0, r0, r0, lsl #4
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	lsl	r0, r0, #2
	add	r3, r2, r0
	ldr	ip, [r3, #3732]
	add	r2, r3, #3728
	add	r2, r2, #4
	cmp	ip, r2
	ldr	r3, [ip]
	beq	.L19614
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	r0, [ip, #16]
	cmp	r0, #0
	bne	.L19611
	b	.L19621
.L19612:
	ldr	lr, [r3, #16]
	cmp	lr, #0
	beq	.L19610
	mov	r3, ip
.L19611:
	cmp	r2, r3
	ldr	ip, [r3]
	bne	.L19612
	mov	r0, #0
	ldr	pc, [sp], #4
.L19621:
	mov	r3, ip
.L19610:
	ldr	r2, [r3, #12]
	mov	r0, #1
	str	r0, [r3, #16]
	str	r2, [r1]
	ldr	r0, [r3, #8]
	ldr	pc, [sp], #4
.L19614:
	mov	r0, #0
	bx	lr
	.fnend
	.size	rndis_get_next_response, .-rndis_get_next_response
	.align	2
	.global	rndis_init
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_init, %function
rndis_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r4, #:lower16:.LANCHOR1
	movw	r5, #:lower16:__stack_chk_guard
	movt	r4, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r5, #:upper16:__stack_chk_guard
	str	lr, [sp, #16]
	ldrb	r6, [r4, #3740]	@ zero_extendqisi2
	.pad #36
	sub	sp, sp, #36
	ldr	r3, [r5]
	cmp	r6, #0
	str	r3, [sp, #28]
	bne	.L19640
	movw	r1, #:lower16:.LC601
	mov	r2, r6
	movt	r1, #:upper16:.LC601
	add	r0, sp, #8
	add	r7, r4, #3680
	bl	sprintf
	add	r0, sp, #8
	ldr	r3, .L19645
	mov	r2, r6
	mov	r1, #432
	str	r7, [sp]
	bl	proc_create_data
	cmp	r0, #0
	bne	.L19641
	ldr	r4, .L19645+4
	ldrh	r3, [r4, #-14]
	tst	r3, #4
	bne	.L19642
.L19625:
	ldr	r3, .L19645+8
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L19643
.L19626:
	mvn	r0, #4
.L19622:
	ldr	r2, [sp, #28]
	ldr	r3, [r5]
	cmp	r2, r3
	bne	.L19644
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L19641:
	mov	r3, r7
	mov	r2, #1
	str	r6, [r4, #3684]
	mov	r0, r6
	strh	r6, [r3], #52	@ movhi
	str	r2, [r4, #3696]
	str	r3, [r4, #3732]
	str	r3, [r4, #3736]
	strb	r2, [r4, #3740]
	b	.L19622
.L19640:
	mov	r0, #0
	b	.L19622
.L19642:
	movw	r1, #:lower16:.LC602
	ldr	r2, .L19645+12
	sub	r0, r4, #32
	movt	r1, #:upper16:.LC602
	bl	__dynamic_pr_debug
	b	.L19625
.L19643:
	movw	r1, #:lower16:.LC603
	sub	r0, r4, #8
	movt	r1, #:upper16:.LC603
	bl	__dynamic_pr_debug
	b	.L19626
.L19644:
	bl	__stack_chk_fail
.L19646:
	.align	2
.L19645:
	.word	.LANCHOR5-3552
	.word	.LANCHOR4-2560
	.word	.LANCHOR4-2544
	.word	.LANCHOR5-3444
	.fnend
	.size	rndis_init, .-rndis_init
	.align	2
	.global	rndis_exit
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_exit, %function
rndis_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movw	r4, #:lower16:__stack_chk_guard
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #8]
	movt	r4, #:upper16:__stack_chk_guard
	ldrb	r1, [r3, #3740]	@ zero_extendqisi2
	.pad #28
	sub	sp, sp, #28
	ldr	r2, [r4]
	cmp	r1, #0
	str	r2, [sp, #20]
	bne	.L19654
.L19647:
	ldr	r2, [sp, #20]
	ldr	r3, [r4]
	cmp	r2, r3
	bne	.L19655
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L19654:
	mov	r5, #0
	movw	r1, #:lower16:.LC601
	mov	r2, r5
	movt	r1, #:upper16:.LC601
	mov	r0, sp
	strb	r5, [r3, #3740]
	bl	sprintf
	mov	r0, sp
	mov	r1, r5
	bl	remove_proc_entry
	b	.L19647
.L19655:
	bl	__stack_chk_fail
	.fnend
	.size	rndis_exit, .-rndis_exit
	.align	2
	.global	ecm_ipa_init
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_ipa_init, %function
ecm_ipa_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	ecm_ipa_init, .-ecm_ipa_init
	.align	2
	.global	ecm_qc_get_ipa_rx_cb
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_get_ipa_rx_cb, %function
ecm_qc_get_ipa_rx_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3576]
	bx	lr
	.fnend
	.size	ecm_qc_get_ipa_rx_cb, .-ecm_qc_get_ipa_rx_cb
	.align	2
	.global	ecm_qc_get_ipa_tx_cb
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_get_ipa_tx_cb, %function
ecm_qc_get_ipa_tx_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3580]
	bx	lr
	.fnend
	.size	ecm_qc_get_ipa_tx_cb, .-ecm_qc_get_ipa_tx_cb
	.align	2
	.global	ecm_qc_get_ipa_priv
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_get_ipa_priv, %function
ecm_qc_get_ipa_priv:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3596]
	bx	lr
	.fnend
	.size	ecm_qc_get_ipa_priv, .-ecm_qc_get_ipa_priv
	.align	2
	.global	ecm_qc_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_bind_config, %function
ecm_qc_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	mov	r8, r0
	movw	r0, #:lower16:.LC473
	strd	r10, [sp, #24]
	movt	r0, #:upper16:.LC473
	mov	r9, r2
	str	lr, [sp, #32]
	ldr	r3, [r8, #24]
	.pad #44
	sub	sp, sp, #44
	ldr	r3, [r3]
	ldr	r4, [r3, #28]
	mov	r1, r4
	bl	strcmp
	cmp	r0, #0
	beq	.L19697
	movw	r0, #:lower16:.LC476
	mov	r1, r4
	movt	r0, #:upper16:.LC476
	bl	strcmp
	cmp	r0, #0
	cmpne	r6, #0
	beq	.L19697
	movw	r4, #:lower16:.LANCHOR4
	movw	r3, #2394
	movt	r4, #:upper16:.LANCHOR4
	ldrh	r3, [r4, r3]
	tst	r3, #4
	bne	.L19727
.L19662:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r3, [r5, #3744]
	cmp	r3, #0
	beq	.L19663
	movw	r3, #2418
	ldrh	r3, [r4, r3]
	tst	r3, #4
	bne	.L19728
.L19665:
	ldr	r0, .L19742
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L19729
.L19666:
	movw	r7, #:lower16:.LANCHOR0
	movt	r7, #:upper16:.LANCHOR0
	ldrb	r3, [r7, #1500]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L19667
	ldr	r2, [r8, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19669
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r8, #24]
	strb	r3, [r7, #1500]
	strb	r3, [r7, #3280]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19669
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r1, [r8, #24]
	strb	r3, [r7, #1516]
	strb	r3, [r7, #3312]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19669
	add	r3, r3, #1
	movw	r2, #:lower16:.LANCHOR7
	uxtb	r3, r3
	movt	r2, #:upper16:.LANCHOR7
	strb	r3, [r1, #48]
	strb	r3, [r2, #-873]
	strb	r3, [r7, #1508]
.L19667:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L19698
	mov	r2, #172
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L19730
.L19670:
	ldr	r10, .L19742+4
	mov	r0, r9
	bl	str_to_xport
	str	r0, [r4, #124]
	ldrh	r3, [r10, #-14]
	tst	r3, #4
	bne	.L19731
.L19671:
	cmp	r0, #7
	add	r9, r4, #128
	beq	.L19732
	ldrb	fp, [r6, #5]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC1407
	mov	r1, #14
	ldrb	r10, [r6, #4]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC1407
	mov	r0, r9
	ldrb	r5, [r6, #3]	@ zero_extendqisi2
	ldrb	lr, [r6, #2]	@ zero_extendqisi2
	ldrb	ip, [r6, #1]	@ zero_extendqisi2
	ldrb	r3, [r6]	@ zero_extendqisi2
	strd	r10, [sp, #12]
	stm	sp, {ip, lr}
	str	r5, [sp, #8]
	bl	snprintf
.L19691:
	ldr	lr, .L19742+8
	movw	r3, #:lower16:.LC1408
	movw	ip, #:lower16:ecm_qc_unbind
	movt	r3, #:upper16:.LC1408
	movt	ip, #:upper16:ecm_qc_unbind
	str	r9, [r7, #1512]
	movw	r1, #:lower16:ecm_qc_bind
	movw	r2, #:lower16:ecm_qc_set_alt
	movt	r1, #:upper16:ecm_qc_bind
	movt	r2, #:upper16:ecm_qc_set_alt
	stm	r4, {r3, lr}
	movw	r3, #:lower16:ecm_qc_get_alt
	mov	r0, r8
	movt	r3, #:upper16:ecm_qc_get_alt
	str	r1, [r4, #32]
	movw	r1, #:lower16:ecm_qc_setup
	str	ip, [r4, #36]
	movw	ip, #:lower16:ecm_qc_disable
	movt	r1, #:upper16:ecm_qc_setup
	movt	ip, #:upper16:ecm_qc_disable
	str	r2, [r4, #40]
	movw	r2, #:lower16:ecm_qc_suspend
	str	r3, [r4, #44]
	movw	r3, #:lower16:ecm_qc_resume
	movt	r2, #:upper16:ecm_qc_suspend
	str	ip, [r4, #48]
	movt	r3, #:upper16:ecm_qc_resume
	mov	ip, #15
	str	r1, [r4, #52]
	mov	r1, r4
	str	r2, [r4, #56]
	str	r3, [r4, #60]
	strh	ip, [r4, #98]	@ movhi
	bl	usb_add_function
	subs	r10, r0, #0
	bne	.L19733
	ldr	r3, [r4, #124]
	cmp	r3, #7
	beq	.L19734
.L19660:
	mov	r0, r10
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L19698:
	mov	r4, #16
	b	.L19670
.L19734:
	ldr	r0, .L19742+12
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L19735
.L19694:
	ldr	r0, .L19742+16
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	beq	.L19660
	movw	r1, #:lower16:.LC1411
	ldr	r2, .L19742+20
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC1411
	bl	__dynamic_pr_debug
	b	.L19660
.L19732:
	ldr	r6, [r5, #4068]
	ldr	r3, .L19742+24
	cmp	r6, #0
	str	r3, [sp, #36]
	addne	fp, r3, #13
	bne	.L19676
	b	.L19680
.L19736:
	ldrb	r0, [r6, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	mov	r1, r0
	ldrb	r0, [r6, #2]	@ zero_extendqisi2
	str	r1, [sp, #32]
	bl	hex_to_bin
	ldr	r3, .L19742+28
	ldr	r1, [sp, #32]
	ldr	r2, [sp, #28]
	orr	r0, r0, r1, lsl #4
	strb	r0, [fp, #1]!
	cmp	fp, r3
	beq	.L19679
.L19678:
	mov	r6, r2
.L19676:
	ldrb	r1, [r6]	@ zero_extendqisi2
	add	r2, r6, #3
	str	r2, [sp, #28]
	cmp	r1, #58
	cmpne	r1, #46
	mov	r0, r1
	beq	.L19736
	bl	hex_to_bin
	mov	r2, r0
	ldrb	r0, [r6, #1]	@ zero_extendqisi2
	str	r2, [sp, #28]
	bl	hex_to_bin
	ldr	r2, [sp, #28]
	ldr	r3, .L19742+28
	orr	r0, r0, r2, lsl #4
	add	r2, r6, #2
	strb	r0, [fp, #1]!
	cmp	r3, fp
	bne	.L19678
.L19679:
	ldrb	r3, [r5, #3590]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L19737
.L19680:
	ldr	r3, [sp, #36]
	mov	r1, #6
	add	r0, r3, #14
	bl	get_random_bytes
	ldr	r2, .L19742+32
	ldrb	r3, [r5, #3590]	@ zero_extendqisi2
	ldrh	r2, [r2, #-2]
	bic	r3, r3, #1
	orr	r3, r3, #2
	tst	r2, #4
	strb	r3, [r5, #3590]
	bne	.L19738
.L19681:
	ldr	r6, [r5, #4072]
	cmp	r6, #0
	beq	.L19689
	ldr	r3, [sp, #36]
	add	fp, r3, #7
	add	r10, r3, #13
	b	.L19685
.L19739:
	ldrb	r0, [r6, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	mov	r3, r0
	ldrb	r0, [r6, #2]	@ zero_extendqisi2
	str	r3, [sp, #32]
	bl	hex_to_bin
	ldrd	r2, [sp, #28]
	orr	r0, r0, r3, lsl #4
	strb	r0, [fp, #1]!
	cmp	fp, r10
	beq	.L19688
.L19687:
	mov	r6, r2
.L19685:
	ldrb	r3, [r6]	@ zero_extendqisi2
	add	r2, r6, #3
	str	r2, [sp, #28]
	cmp	r3, #58
	cmpne	r3, #46
	mov	r0, r3
	beq	.L19739
	bl	hex_to_bin
	mov	r3, r0
	ldrb	r0, [r6, #1]	@ zero_extendqisi2
	str	r3, [sp, #28]
	bl	hex_to_bin
	ldr	r3, [sp, #28]
	add	r2, r6, #2
	orr	r0, r0, r3, lsl #4
	strb	r0, [fp, #1]!
	cmp	r10, fp
	bne	.L19687
.L19688:
	ldrb	r3, [r5, #3584]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L19740
.L19689:
	ldr	r0, .L19742+36
	mov	r1, #6
	bl	get_random_bytes
	ldr	r0, .L19742+40
	ldrb	r3, [r5, #3584]	@ zero_extendqisi2
	ldrh	r2, [r0, #-2]
	bic	r3, r3, #1
	orr	r3, r3, #2
	tst	r2, #4
	strb	r3, [r5, #3584]
	bne	.L19741
.L19726:
	ldrb	r6, [r5, #3585]	@ zero_extendqisi2
	ldrb	r1, [r5, #3586]	@ zero_extendqisi2
	ldrb	r0, [r5, #3587]	@ zero_extendqisi2
	ldrb	lr, [r5, #3588]	@ zero_extendqisi2
	ldrb	ip, [r5, #3589]	@ zero_extendqisi2
.L19690:
	movw	r2, #:lower16:.LC1407
	str	r6, [sp]
	movt	r2, #:upper16:.LC1407
	str	r1, [sp, #4]
	mov	r1, #14
	str	r0, [sp, #8]
	mov	r0, r9
	str	lr, [sp, #12]
	str	ip, [sp, #16]
	bl	snprintf
	b	.L19691
.L19740:
	ldrb	r6, [r5, #3585]	@ zero_extendqisi2
	ldrb	r1, [r5, #3586]	@ zero_extendqisi2
	ldrb	r0, [r5, #3587]	@ zero_extendqisi2
	ldrb	lr, [r5, #3588]	@ zero_extendqisi2
	orr	r2, r3, r6
	ldrb	ip, [r5, #3589]	@ zero_extendqisi2
	orr	r2, r1, r2
	orr	r2, r0, r2
	orr	r2, lr, r2
	orrs	r2, ip, r2
	beq	.L19689
	b	.L19690
.L19737:
	ldrb	r1, [r5, #3591]	@ zero_extendqisi2
	ldrb	r2, [r5, #3592]	@ zero_extendqisi2
	ldrb	r0, [r5, #3593]	@ zero_extendqisi2
	orr	r3, r3, r1
	ldrb	r1, [r5, #3594]	@ zero_extendqisi2
	orr	r3, r3, r2
	ldrb	r2, [r5, #3595]	@ zero_extendqisi2
	orr	r3, r3, r0
	orr	r3, r3, r1
	orrs	r3, r3, r2
	beq	.L19680
	b	.L19681
.L19663:
	bl	bam_data_setup.part.92
	subs	r10, r0, #0
	beq	.L19665
	movw	r0, #:lower16:.LC1033
	mov	r2, r10
	ldr	r1, .L19742+44
	movt	r0, #:upper16:.LC1033
	bl	printk
	movw	r0, #:lower16:.LC1034
	ldr	r1, .L19742+20
	movt	r0, #:upper16:.LC1034
	bl	printk
	b	.L19660
.L19727:
	movw	r1, #:lower16:.LC1030
	mov	r3, #1
	ldr	r2, .L19742+48
	movt	r1, #:upper16:.LC1030
	ldr	r0, .L19742+52
	bl	__dynamic_pr_debug
	b	.L19662
.L19729:
	movw	r1, #:lower16:.LC1403
	ldr	r2, .L19742+20
	mov	r3, r9
	movt	r1, #:upper16:.LC1403
	sub	r0, r0, #24
	bl	__dynamic_pr_debug
	b	.L19666
.L19731:
	movw	r1, #:lower16:.LC1404
	mov	r3, r0
	ldr	r2, .L19742+20
	movt	r1, #:upper16:.LC1404
	sub	r0, r10, #32
	bl	__dynamic_pr_debug
	ldr	r0, [r4, #124]
	b	.L19671
.L19728:
	movw	r1, #:lower16:.LC1032
	ldr	r2, .L19742+48
	movt	r1, #:upper16:.LC1032
	ldr	r0, .L19742+56
	bl	__dynamic_pr_debug
	b	.L19665
.L19697:
	mvn	r10, #21
	b	.L19660
.L19735:
	ldr	r3, .L19742+60
	movw	r1, #:lower16:.LC1410
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC1410
	ldr	r2, .L19742+20
	str	r3, [sp]
	sub	r3, r3, #6
	bl	__dynamic_pr_debug
	b	.L19694
.L19669:
	mvn	r10, #18
	b	.L19660
.L19741:
	movw	r1, #:lower16:.LC1406
	sub	r0, r0, #20
	ldr	r2, .L19742+64
	movt	r1, #:upper16:.LC1406
	bl	__dynamic_pr_debug
	ldrb	r3, [r5, #3584]	@ zero_extendqisi2
	b	.L19726
.L19738:
	movw	r1, #:lower16:.LC1405
	sub	r0, r10, #8
	ldr	r2, .L19742+64
	movt	r1, #:upper16:.LC1405
	bl	__dynamic_pr_debug
	b	.L19681
.L19730:
	mvn	r10, #11
	b	.L19660
.L19733:
	movw	r0, #:lower16:.LC1409
	ldr	r1, .L19742+20
	movt	r0, #:upper16:.LC1409
	bl	printk
	mov	r3, #0
	mov	r0, r4
	str	r3, [r7, #1512]
	bl	kfree
	b	.L19660
.L19743:
	.align	2
.L19742:
	.word	.LANCHOR8-1056
	.word	.LANCHOR8-1024
	.word	.LANCHOR7-860
	.word	.LANCHOR8-964
	.word	.LANCHOR8-940
	.word	.LANCHOR5+2872
	.word	.LANCHOR1+3576
	.word	.LANCHOR1+3595
	.word	.LANCHOR8-1012
	.word	.LANCHOR1+3584
	.word	.LANCHOR8-988
	.word	.LANCHOR5+2852
	.word	.LANCHOR5-3432
	.word	.LANCHOR4+2376
	.word	.LANCHOR4+2400
	.word	.LANCHOR1+3590
	.word	.LANCHOR5+2892
	.fnend
	.size	ecm_qc_bind_config, .-ecm_qc_bind_config
	.align	2
	.global	fmbim_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	fmbim_free_req, %function
fmbim_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r1, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L19744
	mov	r4, r0
	ldr	r0, [r5]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L19744:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	fmbim_free_req, .-fmbim_free_req
	.align	2
	.global	mbim_configure_params
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_configure_params, %function
mbim_configure_params:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L19749
	movw	r0, #:lower16:.LC1412
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r0, #:upper16:.LC1412
	str	lr, [sp, #4]
	mov	r1, r2
	bl	printk
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #0
	ldr	pc, [sp], #4
.L19750:
	.align	2
.L19749:
	.word	.LANCHOR5+2912
	.fnend
	.size	mbim_configure_params, .-mbim_configure_params
	.align	2
	.global	mbim_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_bind_config, %function
mbim_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r4, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r6, r1
	mov	r7, r0
	movw	r0, #:lower16:.LC1027
	strd	r8, [sp, #16]
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #24]
	ldr	r1, .L19813
	.pad #20
	sub	sp, sp, #20
	mov	r8, r2
	movt	r0, #:upper16:.LC1027
	mov	r2, r6
	bl	printk
	ldr	r5, [r4, #3616]
	cmp	r5, r6
	bls	.L19804
	movw	r0, #:lower16:.LC1029
	mov	r2, r5
	ldr	r1, .L19813+4
	movt	r0, #:upper16:.LC1029
	movw	r6, #:lower16:.LANCHOR4
	bl	printk
	movt	r6, #:upper16:.LANCHOR4
	movw	r3, #2394
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L19805
.L19754:
	cmp	r5, #1
	bne	.L19806
	ldr	r3, [r4, #3744]
	cmp	r3, #0
	beq	.L19757
	movw	r3, #2418
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L19807
.L19759:
	movw	r0, #:lower16:.LC612
	movw	r5, #:lower16:.LANCHOR0
	ldr	r1, .L19813+4
	movt	r0, #:upper16:.LC612
	mov	r2, #1
	movt	r5, #:upper16:.LANCHOR0
	bl	printk
	ldrb	r3, [r5, #2704]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L19808
.L19760:
	ldr	r4, [r4, #3620]
	cmp	r4, #0
	beq	.L19809
	ldr	lr, .L19813+8
	movw	r2, #:lower16:.LC1036
	movw	r3, #:lower16:mbim_unbind
	movt	r2, #:upper16:.LC1036
	movt	r3, #:upper16:mbim_unbind
	mov	r0, r8
	movw	r1, #:lower16:mbim_bind
	ldr	r8, [r7, #24]
	str	r3, [r4, #36]
	movw	r3, #:lower16:mbim_setup
	movt	r1, #:upper16:mbim_bind
	add	r9, lr, #964
	movt	r3, #:upper16:mbim_setup
	movw	ip, #:lower16:mbim_get_alt
	stm	r4, {r2, r9}
	movw	r2, #:lower16:mbim_set_alt
	movt	ip, #:upper16:mbim_get_alt
	movt	r2, #:upper16:mbim_set_alt
	str	r1, [r4, #32]
	movw	r1, #:lower16:mbim_disable
	movt	r1, #:upper16:mbim_disable
	str	r2, [r4, #40]
	movw	r2, #:lower16:mbim_suspend
	str	r3, [r4, #52]
	movw	r3, #:lower16:mbim_resume
	movt	r2, #:upper16:mbim_suspend
	movt	r3, #:upper16:mbim_resume
	str	ip, [r4, #44]
	str	r1, [r4, #48]
	mov	r1, #16384
	strd	r2, [r4, #56]
	mov	r2, #0
	str	r8, [r4, #84]
	str	r2, [r4, #88]
	str	lr, [r4, #200]
	str	r1, [r4, #224]
	bl	str_to_xport
	cmp	r0, #7
	str	r0, [r4, #132]
	beq	.L19764
	mov	r3, #6
	str	r3, [r4, #132]
.L19765:
	movw	r3, #1386
	add	r2, r4, #208
	ldrh	r1, [r6, r3]
	add	r3, r4, #216
	str	r2, [r4, #208]
	strd	r2, [r4, #212]
	str	r3, [r4, #220]
	tst	r1, #4
	bne	.L19810
.L19766:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L19774
	add	r8, r4, #72
	str	r7, [r4, #20]
	add	r2, r7, #36
	mov	r0, r8
	ldr	r1, [r7, #40]
	bl	__list_add
	ldr	r5, [r4, #32]
	cmp	r5, #0
	beq	.L19768
	mov	r1, r4
	mov	r0, r7
	blx	r5
	subs	r5, r0, #0
	blt	.L19811
.L19768:
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L19769
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L19769
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r7, #45]
.L19769:
	tst	r3, #2
	bne	.L19770
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L19770
	ldrb	r2, [r7, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r7, #45]
.L19770:
	tst	r3, #1
	bne	.L19771
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L19771
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r7, #45]
.L19771:
	cmp	r5, #0
	bne	.L19767
	b	.L19772
.L19808:
	ldr	r2, [r7, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19762
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r7, #24]
	strb	r3, [r5, #2704]
	strb	r3, [r5, #2736]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19762
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	strb	r3, [r5, #2712]
	strb	r3, [r5, #2748]
	strb	r3, [r5, #2760]
	b	.L19760
.L19810:
	ldr	ip, [r7]
	movw	r2, #:lower16:.LC929
	ldr	r1, [r7, #24]
	movt	r2, #:upper16:.LC929
	ldr	r3, [r4]
	ldr	r0, .L19813+12
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r7, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L19766
.L19774:
	mvn	r5, #21
.L19767:
	movw	r3, #1410
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L19812
.L19772:
	movw	r0, #:lower16:.LC1037
	mov	r2, r5
	ldr	r1, .L19813
	movt	r0, #:upper16:.LC1037
	bl	printk
.L19751:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L19764:
	mov	r3, #8192
	mov	r2, #16
	mov	r1, #1
	str	r3, [r5, #200]
	strh	r1, [r5, #204]	@ movhi
	str	r3, [r5, #212]
	strh	r2, [r5, #222]	@ movhi
	b	.L19765
.L19757:
	bl	bam_data_setup.part.92
	subs	r5, r0, #0
	beq	.L19759
.L19756:
	movw	r0, #:lower16:.LC1033
	mov	r2, r5
	ldr	r1, .L19813+4
	movt	r0, #:upper16:.LC1033
	bl	printk
	movw	r0, #:lower16:.LC1034
	ldr	r1, .L19813
	movt	r0, #:upper16:.LC1034
	bl	printk
	b	.L19751
.L19805:
	movw	r1, #:lower16:.LC1030
	mov	r3, r5
	ldr	r2, .L19813+16
	movt	r1, #:upper16:.LC1030
	ldr	r0, .L19813+20
	bl	__dynamic_pr_debug
	b	.L19754
.L19807:
	movw	r1, #:lower16:.LC1032
	ldr	r2, .L19813+16
	movt	r1, #:upper16:.LC1032
	ldr	r0, .L19813+24
	bl	__dynamic_pr_debug
	b	.L19759
.L19812:
	ldr	r1, [r7, #24]
	movw	r2, #:lower16:.LC930
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC930
	ldr	r0, .L19813+28
	ldr	r1, [r1]
	strd	r4, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L19772
.L19811:
	mov	r0, r8
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L19768
.L19762:
	mvn	r5, #18
	b	.L19751
.L19809:
	movw	r0, #:lower16:.LC1035
	ldr	r1, .L19813
	mvn	r5, #11
	movt	r0, #:upper16:.LC1035
	bl	printk
	b	.L19751
.L19806:
	movw	r0, #:lower16:.LC1031
	mov	r2, r5
	ldr	r1, .L19813+16
	movt	r0, #:upper16:.LC1031
	mvn	r5, #21
	bl	printk
	b	.L19756
.L19804:
	movw	r0, #:lower16:.LC1028
	mov	r3, r5
	ldr	r1, .L19813
	mov	r2, r6
	movt	r0, #:upper16:.LC1028
	bl	printk
	mvn	r5, #18
	b	.L19751
.L19814:
	.align	2
.L19813:
	.word	.LANCHOR5-384
	.word	.LANCHOR5-364
	.word	.LANCHOR0+1800
	.word	.LANCHOR4+1368
	.word	.LANCHOR5-3432
	.word	.LANCHOR4+2376
	.word	.LANCHOR4+2400
	.word	.LANCHOR4+1392
	.fnend
	.size	mbim_bind_config, .-mbim_bind_config
	.align	2
	.global	bam_data_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_disconnect, %function
bam_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L19841
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L19836
.L19816:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #3748]
	cmp	r5, r3
	bge	.L19837
	cmp	r6, #0
	beq	.L19838
	add	r5, r4, r5, lsl #2
	ldr	r5, [r5, #3752]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L19819
	ldr	r2, [r3, #8]
	cmp	r2, #0
	beq	.L19819
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L19819
	ldr	r0, [r3, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #4]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r5, #4]
	mov	r3, #0
	ldr	r2, [r2, #8]
	str	r3, [r2]
	ldr	r2, [r5, #4]
	ldr	r2, [r2, #12]
	str	r3, [r2]
	str	r3, [r5, #4]
.L19819:
	ldr	r3, [r5, #60]
	cmp	r3, #7
	beq	.L19839
	mov	r0, #0
	bl	usb_bam_client_ready
	cmp	r0, #0
	bne	.L19840
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L19839:
	ldr	r1, [r4, #3744]
	add	r2, r5, #184
	mov	r0, #4
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on
.L19836:
	movw	r1, #:lower16:.LC157
	sub	r0, r3, #24
	ldr	r2, .L19841+4
	movt	r1, #:upper16:.LC157
	mov	r3, r6
	str	r5, [sp]
	bl	__dynamic_pr_debug
	b	.L19816
.L19838:
	ldr	r1, .L19841+4
	movw	r0, #:lower16:.LC621
	movt	r0, #:upper16:.LC621
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L19837:
	ldr	r1, .L19841+4
	movw	r0, #:lower16:.LC620
	mov	r2, r5
	movt	r0, #:upper16:.LC620
.L19835:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L19840:
	ldr	r2, .L19841+4
	movw	r0, #:lower16:.LC622
	movt	r0, #:upper16:.LC622
	mov	r1, r2
	b	.L19835
.L19842:
	.align	2
.L19841:
	.word	.LANCHOR4-2352
	.word	.LANCHOR5-3248
	.fnend
	.size	bam_data_disconnect, .-bam_data_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_disable, %function
mbim_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	ldr	r1, .L19861
	strd	r6, [sp, #8]
	mov	r7, r0
	movw	r0, #:lower16:.LC1413
	movt	r0, #:upper16:.LC1413
	strd	r8, [sp, #16]
	add	r8, r7, #204
	str	r10, [sp, #24]
	mov	r9, r7
	str	lr, [sp, #28]
	bl	printk
	mov	r3, #0
	mov	r0, r8
	str	r3, [r7, #88]
	strb	r3, [r7, #164]
	bl	_raw_spin_lock
	ldr	r4, [r9, #208]!
	cmp	r4, r9
	ldr	r5, [r4]
	bne	.L19844
	b	.L19845
.L19859:
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
	cmp	r9, r5
	ldr	r3, [r5]
	beq	.L19845
.L19847:
	mov	r4, r5
	mov	r5, r3
.L19844:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del
	cmp	r6, #0
	bne	.L19859
	cmp	r9, r5
	ldr	r3, [r5]
	bne	.L19847
.L19845:
	mov	r9, r7
	ldr	r4, [r9, #216]!
	cmp	r4, r9
	ldr	r5, [r4]
	bne	.L19848
	b	.L19849
.L19860:
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
	cmp	r9, r5
	ldr	r3, [r5]
	beq	.L19849
.L19851:
	mov	r4, r5
	mov	r5, r3
.L19848:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del
	cmp	r6, #0
	bne	.L19860
	cmp	r9, r5
	ldr	r3, [r5]
	bne	.L19851
.L19849:
	mov	r0, r8
	bl	_raw_spin_unlock
	mov	r0, r7
	bl	mbim_reset_function_queue
	movw	r0, #:lower16:.LC1414
	ldrb	r3, [r7, #136]	@ zero_extendqisi2
	mov	r2, r7
	ldr	r1, .L19861+4
	movt	r0, #:upper16:.LC1414
	bl	printk
	add	r0, r7, #140
	ldrb	r1, [r7, #136]	@ zero_extendqisi2
	bl	bam_data_disconnect
	ldr	r0, [r7, #156]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L19852
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r7, #156]
	mov	r2, #0
	str	r2, [r3]
.L19852:
	mov	r3, #0
	movw	r0, #:lower16:.LC1415
	ldr	r1, .L19861
	movt	r0, #:upper16:.LC1415
	str	r3, [r7, #168]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L19862:
	.align	2
.L19861:
	.word	.LANCHOR5+2936
	.word	.LANCHOR5+2952
	.fnend
	.size	mbim_disable, .-mbim_disable
	.align	2
	.global	bam_data_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_connect, %function
bam_data_connect:
	.fnstart
	@ args = 8, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L19880
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r4, r1
	mov	r7, r2
	strd	r8, [sp, #16]
	mov	r9, r3
	str	r10, [sp, #24]
	ldrh	r3, [ip, #-2]
	str	lr, [sp, #28]
	.pad #8
	sub	sp, sp, #8
	ldrb	r8, [sp, #40]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L19875
.L19864:
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r3, [r6, #3748]
	cmp	r3, r4
	ble	.L19876
	cmp	r5, #0
	beq	.L19877
	ldr	r3, [r5, #8]
	add	r4, r6, r4, lsl #2
	ldr	r4, [r4, #3752]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r10, r0, #0
	bne	.L19878
	ldr	r3, [r5, #8]
	str	r4, [r3]
	ldr	r3, [r5, #12]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r10, r0, #0
	bne	.L19879
	ldr	r3, [r5, #12]
	cmp	r7, #7
	str	r4, [r3]
	ldr	r3, [sp, #44]
	str	r5, [r4, #4]
	strb	r9, [r4, #52]
	strb	r8, [r4, #53]
	str	r3, [r4, #56]
	str	r7, [r4, #60]
	bne	.L19870
	add	r2, r4, #44
	add	r3, r4, #48
	strb	r9, [r4, #64]
	strb	r8, [r4, #65]
	strd	r2, [r4, #68]
.L19870:
	add	r2, r4, #168
	mov	r0, #4
	ldr	r1, [r6, #3744]
	bl	queue_work_on
.L19863:
	mov	r0, r10
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L19875:
	movw	r1, #:lower16:.LC157
	sub	r0, ip, #20
	ldr	r2, .L19880+4
	movt	r1, #:upper16:.LC157
	mov	r3, r5
	str	r4, [sp]
	bl	__dynamic_pr_debug
	b	.L19864
.L19877:
	movw	r0, #:lower16:.LC621
	ldr	r1, .L19880+4
	mvn	r10, #18
	movt	r0, #:upper16:.LC621
	bl	printk
	b	.L19863
.L19879:
	movw	r0, #:lower16:.LC927
	ldr	r2, [r5, #12]
	movt	r0, #:upper16:.LC927
	ldr	r1, .L19880+4
	bl	printk
	ldr	r3, [r5, #8]
	mov	r2, #0
	str	r2, [r3]
	b	.L19863
.L19876:
	movw	r0, #:lower16:.LC173
	mov	r2, r4
	ldr	r1, .L19880+4
	movt	r0, #:upper16:.LC173
	mvn	r10, #18
	bl	printk
	b	.L19863
.L19878:
	movw	r0, #:lower16:.LC926
	ldr	r1, .L19880+4
	ldr	r2, [r5, #8]
	movt	r0, #:upper16:.LC926
	bl	printk
	b	.L19863
.L19881:
	.align	2
.L19880:
	.word	.LANCHOR8-916
	.word	.LANCHOR5+2972
	.fnend
	.size	bam_data_connect, .-bam_data_connect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_set_alt, %function
mbim_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r5, [r0, #196]	@ zero_extendqisi2
	.pad #8
	sub	sp, sp, #8
	ldr	r8, [r0, #84]
	cmp	r5, r1
	beq	.L19909
	ldrb	r3, [r0, #197]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L19884
	movw	r0, #:lower16:.LC1419
	ldr	r1, .L19919
	movt	r0, #:upper16:.LC1419
	bl	printk
	cmp	r6, #1
	bhi	.L19884
	ldr	r3, [r4, #148]
	ldr	r3, [r3]
	cmp	r3, #0
	bne	.L19910
.L19890:
	cmp	r6, #1
	beq	.L19911
.L19891:
	add	r5, r4, #204
	strb	r6, [r4, #198]
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r3, #3
	mov	r0, r5
	strb	r3, [r4, #164]
	bl	_raw_spin_unlock
.L19889:
	mov	r5, #1
	movw	r0, #:lower16:.LC1432
	ldr	r1, .L19919
	mov	r7, #0
	movt	r0, #:upper16:.LC1432
	str	r5, [r4, #88]
	bl	printk
	mov	r2, r5
	mov	r3, r7
	mov	r1, #3
	add	r0, r4, #108
	bl	__wake_up
	mov	r2, r5
	add	r0, r4, #120
	mov	r3, r7
	mov	r1, #3
	bl	__wake_up
.L19882:
	mov	r0, r7
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L19911:
	movw	r0, #:lower16:.LC1421
	ldr	r1, .L19919
	movt	r0, #:upper16:.LC1421
	bl	printk
	ldr	r3, [r4, #148]
	ldr	r5, [r3, #28]
	cmp	r5, #0
	beq	.L19912
	movw	r0, #:lower16:.LC1431
	ldr	r1, .L19919
	movt	r0, #:upper16:.LC1431
	bl	printk
	b	.L19891
.L19912:
	movw	r0, #:lower16:.LC1422
	ldr	r1, .L19919
	movt	r0, #:upper16:.LC1422
	bl	printk
	mov	r1, r4
	ldr	r2, [r4, #148]
	ldr	r0, [r8]
	bl	config_ep_by_speed
	subs	r7, r0, #0
	bne	.L19913
	ldr	r3, [r4, #148]
	movw	r0, #:lower16:.LC1424
	ldr	r1, .L19919
	movt	r0, #:upper16:.LC1424
	ldr	r2, [r3, #28]
	bl	printk
	mov	r1, r4
	ldr	r2, [r4, #152]
	ldr	r0, [r8]
	bl	config_ep_by_speed
	subs	r7, r0, #0
	bne	.L19914
	ldr	r3, [r4, #152]
	movw	r0, #:lower16:.LC1426
	movt	r0, #:upper16:.LC1426
	ldr	r1, .L19919
	ldr	r2, [r3, #28]
	bl	printk
	ldr	r0, .L19919+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L19915
.L19895:
	ldr	lr, [r4, #84]
	movw	r0, #:lower16:.LC1428
	mov	r2, r4
	ldr	ip, [r4, #132]
	movt	r0, #:upper16:.LC1428
	ldrb	r3, [r4, #136]	@ zero_extendqisi2
	ldr	r1, .L19919+8
	ldr	r7, [lr]
	cmp	ip, #7
	moveq	r5, #2
	movne	r5, #0
	bl	printk
	mov	r1, r5
	mov	r2, #0
	ldrb	r3, [r4, #136]	@ zero_extendqisi2
	ldr	r0, [r7, #28]
	bl	usb_bam_get_connection_idx
	mov	r8, r0
	mov	r1, r5
	ldrb	r3, [r4, #136]	@ zero_extendqisi2
	mov	r2, #1
	ldr	r0, [r7, #28]
	bl	usb_bam_get_connection_idx
	uxtb	ip, r0
	mov	r0, #1
	ldr	r2, [r4, #132]
	ldrb	r1, [r4, #136]	@ zero_extendqisi2
	uxtb	r3, r8
	str	ip, [sp]
	str	r0, [sp, #4]
	add	r0, r4, #140
	bl	bam_data_connect
	subs	r2, r0, #0
	bne	.L19916
	movw	r0, #:lower16:.LC1430
	ldr	r1, .L19919+8
	movt	r0, #:upper16:.LC1430
	bl	printk
	b	.L19891
.L19884:
	movw	r0, #:lower16:.LC1433
	ldr	r1, .L19919
	mvn	r7, #21
	movt	r0, #:upper16:.LC1433
	bl	printk
	b	.L19882
.L19914:
	ldr	r2, [r4, #152]
	movw	r0, #:lower16:.LC1425
	mov	r3, r7
	ldr	r1, .L19919
	movt	r0, #:upper16:.LC1425
	str	r5, [r2, #28]
	ldr	r2, [r4, #152]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L19882
.L19913:
	ldr	r2, [r4, #148]
	movw	r0, #:lower16:.LC1423
	mov	r3, r7
	ldr	r1, .L19919
	movt	r0, #:upper16:.LC1423
	str	r5, [r2, #28]
	ldr	r2, [r4, #148]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L19882
.L19916:
	movw	r0, #:lower16:.LC1429
	ldr	r1, .L19919+8
	movt	r0, #:upper16:.LC1429
	bl	printk
	b	.L19891
.L19915:
	movw	r1, #:lower16:.LC1427
	ldr	r2, .L19919
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC1427
	bl	__dynamic_pr_debug
	b	.L19895
.L19910:
	movw	r0, #:lower16:.LC1420
	ldr	r1, .L19919
	movt	r0, #:upper16:.LC1420
	bl	printk
	ldr	r3, .L19919+12
	mov	r2, #16384
	mov	r1, #0
	str	r1, [r4, #88]
	str	r3, [r4, #200]
	str	r2, [r4, #224]
	b	.L19890
.L19909:
	movw	r0, #:lower16:.LC1416
	ldr	r1, .L19919
	movt	r0, #:upper16:.LC1416
	bl	printk
	cmp	r6, #0
	bne	.L19884
	ldr	r3, [r4, #156]
	ldr	r3, [r3]
	cmp	r3, #0
	bne	.L19917
.L19885:
	mov	r1, r4
	ldr	r2, [r4, #156]
	ldr	r0, [r8]
	bl	config_ep_by_speed
	subs	r7, r0, #0
	bne	.L19918
	ldr	r3, [r4, #156]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r7, r0, #0
	ldreq	r3, [r4, #156]
	streq	r4, [r3]
	beq	.L19889
	ldr	r2, [r4, #156]
	movw	r0, #:lower16:.LC1157
	mov	r3, r7
	ldr	r1, .L19919
	movt	r0, #:upper16:.LC1157
	ldr	r2, [r2, #4]
	bl	printk
	b	.L19882
.L19917:
	movw	r0, #:lower16:.LC1417
	mov	r2, r5
	ldr	r1, .L19919
	movt	r0, #:upper16:.LC1417
	bl	printk
	ldr	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L19885
.L19918:
	ldr	r2, [r4, #156]
	mov	ip, #0
	movw	r0, #:lower16:.LC1418
	mov	r3, r7
	ldr	r1, .L19919
	movt	r0, #:upper16:.LC1418
	str	ip, [r2, #28]
	ldr	r2, [r4, #156]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L19882
.L19920:
	.align	2
.L19919:
	.word	.LANCHOR5+2992
	.word	.LANCHOR8-892
	.word	.LANCHOR5+3008
	.word	.LANCHOR0+1800
	.fnend
	.size	mbim_set_alt, .-mbim_set_alt
	.align	2
	.global	bam_data_destroy
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_destroy, %function
bam_data_destroy:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L19932
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L19931
.L19922:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	add	r5, r4, r5, lsl #2
	ldr	r0, [r5, #3752]
	bl	kfree
	ldr	r0, [r4, #3744]
	mov	r3, #0
	str	r3, [r5, #3752]
	cmp	r0, r3
	beq	.L19923
	bl	destroy_workqueue
.L19923:
	mov	r3, #0
	ldr	r6, [sp, #8]
	mov	r0, r3
	str	r3, [r4, #3744]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L19931:
	movw	r1, #:lower16:.LC722
	sub	r0, r3, #20
	ldr	r2, .L19932+4
	movt	r1, #:upper16:.LC722
	bl	__dynamic_pr_debug
	b	.L19922
.L19933:
	.align	2
.L19932:
	.word	.LANCHOR4-820
	.word	.LANCHOR5-2376
	.fnend
	.size	bam_data_destroy, .-bam_data_destroy
	.align	2
	.global	bam_data_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_setup, %function
bam_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR4
	movw	r3, #2394
	movt	r4, #:upper16:.LANCHOR4
	mov	r5, r0
	str	r6, [sp, #8]
	ldrh	r3, [r4, r3]
	str	lr, [sp, #12]
	tst	r3, #4
	bne	.L19944
.L19935:
	cmp	r5, #1
	bne	.L19945
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #3744]
	cmp	r3, #0
	beq	.L19938
	movw	r3, #2418
	ldrh	r0, [r4, r3]
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	bne	.L19946
.L19934:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L19938:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	bam_data_setup.part.92
.L19944:
	movw	r1, #:lower16:.LC1030
	mov	r3, r0
	ldr	r2, .L19947
	movt	r1, #:upper16:.LC1030
	ldr	r0, .L19947+4
	bl	__dynamic_pr_debug
	b	.L19935
.L19946:
	movw	r1, #:lower16:.LC1032
	ldr	r2, .L19947
	movt	r1, #:upper16:.LC1032
	ldr	r0, .L19947+8
	bl	__dynamic_pr_debug
	mov	r0, #0
	b	.L19934
.L19945:
	movw	r0, #:lower16:.LC1031
	mov	r2, r5
	ldr	r1, .L19947
	movt	r0, #:upper16:.LC1031
	bl	printk
	mvn	r0, #21
	b	.L19934
.L19948:
	.align	2
.L19947:
	.word	.LANCHOR5-3432
	.word	.LANCHOR4+2376
	.word	.LANCHOR4+2400
	.fnend
	.size	bam_data_setup, .-bam_data_setup
	.align	2
	.global	bam_data_suspend
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_suspend, %function
bam_data_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L19956
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movw	r4, #:lower16:.LANCHOR1
	str	lr, [sp, #8]
	movt	r4, #:upper16:.LANCHOR1
	.pad #12
	sub	sp, sp, #12
	add	r1, r4, r0, lsl #2
	ldrh	r3, [r2, #-14]
	ldr	r5, [r1, #3752]
	tst	r3, #4
	bne	.L19955
.L19950:
	ldr	r1, [r4, #3744]
	add	r2, r5, #200
	mov	r0, #4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work_on
.L19955:
	ldr	r3, .L19956+4
	movw	r1, #:lower16:.LC619
	str	r0, [sp]
	movt	r1, #:upper16:.LC619
	sub	r0, r2, #32
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L19950
.L19957:
	.align	2
.L19956:
	.word	.LANCHOR4-2368
	.word	.LANCHOR5-3268
	.fnend
	.size	bam_data_suspend, .-bam_data_suspend
	.align	2
	.global	bam_data_resume
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_resume, %function
bam_data_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L19965
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movw	r4, #:lower16:.LANCHOR1
	str	lr, [sp, #8]
	movt	r4, #:upper16:.LANCHOR1
	.pad #12
	sub	sp, sp, #12
	add	r1, r4, r0, lsl #2
	ldrh	r3, [r2, #-14]
	ldr	r5, [r1, #3752]
	tst	r3, #4
	bne	.L19964
.L19959:
	ldr	r1, [r4, #3744]
	add	r2, r5, #216
	mov	r0, #4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work_on
.L19964:
	ldr	r3, .L19965+4
	movw	r1, #:lower16:.LC617
	str	r0, [sp]
	movt	r1, #:upper16:.LC617
	sub	r0, r2, #32
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L19959
.L19966:
	.align	2
.L19965:
	.word	.LANCHOR4-2416
	.word	.LANCHOR5-3304
	.fnend
	.size	bam_data_resume, .-bam_data_resume
	.align	2
	.global	ecm_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_bind_config, %function
ecm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	movw	r0, #:lower16:.LC473
	strd	r8, [sp, #16]
	mov	r6, r1
	movt	r0, #:upper16:.LC473
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r8, [r7, #24]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r8]
	ldr	r4, [r3, #28]
	mov	r1, r4
	bl	strcmp
	cmp	r0, #0
	beq	.L19982
	movw	r0, #:lower16:.LC476
	mov	r1, r4
	movt	r0, #:upper16:.LC476
	bl	strcmp
	cmp	r0, #0
	cmpne	r6, #0
	beq	.L19982
	movw	r5, #:lower16:.LANCHOR0
	movt	r5, #:upper16:.LANCHOR0
	ldrb	r3, [r5, #1628]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L19969
	ldrb	r3, [r8, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19971
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r8, #48]
	ldr	r2, [r7, #24]
	strb	r3, [r5, #1628]
	strb	r3, [r5, #3864]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19971
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r1, [r7, #24]
	strb	r3, [r5, #1644]
	strb	r3, [r5, #3896]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19971
	add	r3, r3, #1
	movw	r2, #:lower16:.LANCHOR7
	uxtb	r3, r3
	movt	r2, #:upper16:.LANCHOR7
	strb	r3, [r1, #48]
	ldr	r1, [r7, #24]
	strb	r3, [r2, #-849]
	strb	r3, [r5, #1636]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L19971
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	strb	r3, [r5, #1652]
	strb	r3, [r5, #3855]
.L19969:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L19983
	mov	r2, #176
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L20009
.L19972:
	ldrb	ip, [r6, #1]	@ zero_extendqisi2
	add	r8, r4, #150
	movw	r2, #:lower16:.LC1407
	ldrb	fp, [r6, #5]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC1407
	mov	r1, #14
	ldrb	r10, [r6, #4]	@ zero_extendqisi2
	mov	r0, r8
	ldrb	r9, [r6, #3]	@ zero_extendqisi2
	ldrb	lr, [r6, #2]	@ zero_extendqisi2
	ldrb	r3, [r6]	@ zero_extendqisi2
	movw	r6, #:lower16:.LANCHOR4
	movt	r6, #:upper16:.LANCHOR4
	strd	r10, [sp, #12]
	stm	sp, {ip, lr}
	str	r9, [sp, #8]
	bl	snprintf
	ldr	ip, .L20012
	movw	r3, #:lower16:.LC1408
	movw	r0, #:lower16:ecm_bind
	movw	r2, #:lower16:ecm_unbind
	movt	r3, #:upper16:.LC1408
	str	r8, [r5, #1640]
	movw	r1, #:lower16:ecm_set_alt
	movt	r0, #:upper16:ecm_bind
	movt	r2, #:upper16:ecm_unbind
	movt	r1, #:upper16:ecm_set_alt
	stm	r4, {r3, ip}
	movw	ip, #1386
	str	r0, [r4, #32]
	movw	r0, #:lower16:ecm_get_alt
	str	r2, [r4, #36]
	movt	r0, #:upper16:ecm_get_alt
	movw	r2, #:lower16:ecm_setup
	str	r1, [r4, #40]
	ldrh	ip, [r6, ip]
	movw	r1, #:lower16:ecm_disable
	movt	r1, #:upper16:ecm_disable
	movt	r2, #:upper16:ecm_setup
	strd	r0, [r4, #44]
	mov	r0, #15
	tst	ip, #4
	str	r2, [r4, #52]
	strh	r0, [r4, #98]	@ movhi
	bne	.L20010
.L19973:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L19976
	add	r9, r4, #72
	str	r7, [r4, #20]
	add	r2, r7, #36
	mov	r0, r9
	ldr	r1, [r7, #40]
	bl	__list_add
	ldr	r8, [r4, #32]
	cmp	r8, #0
	beq	.L19977
	mov	r1, r4
	mov	r0, r7
	blx	r8
	subs	r8, r0, #0
	blt	.L20011
.L19977:
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L19978
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L19978
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r7, #45]
.L19978:
	tst	r3, #2
	bne	.L19979
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L19979
	ldrb	r2, [r7, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r7, #45]
.L19979:
	tst	r3, #1
	bne	.L19980
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L19980
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r7, #45]
.L19980:
	cmp	r8, #0
	beq	.L19967
	movw	r3, #1410
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L19975
	b	.L19974
.L20010:
	ldr	ip, [r7]
	movw	r2, #:lower16:.LC929
	ldr	r1, [r7, #24]
	movt	r2, #:upper16:.LC929
	ldr	r0, .L20012+4
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r7, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L19973
.L19976:
	movw	r3, #1410
	mvn	r8, #21
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L19975
.L19974:
	ldr	r1, [r7, #24]
	movw	r2, #:lower16:.LC930
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC930
	ldr	r0, .L20012+8
	ldr	r1, [r1]
	stm	sp, {r4, r8}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L19975:
	mov	r3, #0
	mov	r0, r4
	str	r3, [r5, #1640]
	bl	kfree
.L19967:
	mov	r0, r8
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L19983:
	mov	r4, #16
	b	.L19972
.L20011:
	mov	r0, r9
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L19977
.L19982:
	mvn	r8, #21
	b	.L19967
.L19971:
	mvn	r8, #18
	b	.L19967
.L20009:
	mvn	r8, #11
	b	.L19967
.L20013:
	.align	2
.L20012:
	.word	.LANCHOR7-836
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.fnend
	.size	ecm_bind_config, .-ecm_bind_config
	.align	2
	.global	rndis_qc_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_bind_config, %function
rndis_qc_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:__stack_chk_guard
	movt	r7, #:upper16:__stack_chk_guard
	strd	r8, [sp, #16]
	subs	r9, r1, #0
	ldr	r3, [r7]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #40
	sub	sp, sp, #40
	str	r3, [sp, #36]
	beq	.L20037
	movw	r5, #:lower16:.LANCHOR1
	mov	r8, r0
	movt	r5, #:upper16:.LANCHOR1
	ldrb	r3, [r5, #3740]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L20016
.L20019:
	movw	r6, #:lower16:.LANCHOR4
	movw	r3, #2394
	movt	r6, #:upper16:.LANCHOR4
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L20069
.L20018:
	ldr	r3, [r5, #3744]
	cmp	r3, #0
	beq	.L20020
	movw	r3, #2418
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L20070
.L20022:
	movw	r3, #:lower16:.LANCHOR7
	movt	r3, #:upper16:.LANCHOR7
	ldrb	r2, [r3, #-828]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L20023
	ldr	r1, [r8, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L20025
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r8, #24]
	strb	r2, [r3, #-2464]
	strb	r2, [r3, #-828]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L20025
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r8, #24]
	strb	r2, [r3, #-2444]
	strb	r2, [r3, #-820]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L20025
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [r3, #-2473]
	strb	r2, [r3, #-812]
.L20023:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L20038
	mov	r2, #184
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L20071
.L20026:
	ldr	r2, [r9]	@ unaligned
	movw	r0, #:lower16:rndis_qc_bind
	movw	r1, #:lower16:rndis_qc_unbind
	ldr	ip, .L20075
	movt	r0, #:upper16:rndis_qc_bind
	movt	r1, #:upper16:rndis_qc_unbind
	movw	r3, #:lower16:.LC1184
	movt	r3, #:upper16:.LC1184
	str	r2, [r4, #122]	@ unaligned
	movw	r2, #:lower16:rndis_qc_set_alt
	ldrh	lr, [r9, #4]	@ unaligned
	movt	r2, #:upper16:rndis_qc_set_alt
	stm	r4, {r3, ip}
	strd	r0, [r4, #32]
	movw	r1, #1386
	movw	r0, #:lower16:rndis_qc_rm_hdr
	str	r2, [r4, #40]
	movw	r2, #:lower16:rndis_qc_add_header
	ldrh	ip, [r6, r1]
	movw	r1, #:lower16:rndis_qc_setup
	movt	r2, #:upper16:rndis_qc_add_header
	movt	r0, #:upper16:rndis_qc_rm_hdr
	movt	r1, #:upper16:rndis_qc_setup
	strh	lr, [r4, #126]	@ unaligned
	str	r1, [r4, #52]
	movw	r1, #:lower16:rndis_qc_resume
	tst	ip, #4
	str	r2, [r4, #104]
	movw	r2, #:lower16:rndis_qc_disable
	movt	r1, #:upper16:rndis_qc_resume
	str	r0, [r4, #108]
	movw	r0, #:lower16:rndis_qc_suspend
	movt	r2, #:upper16:rndis_qc_disable
	movt	r0, #:upper16:rndis_qc_suspend
	mov	ip, #44
	str	r2, [r4, #48]
	mov	r2, #0
	strd	r0, [r4, #56]
	mov	r0, #1
	strh	r2, [r4, #98]	@ movhi
	str	ip, [r4, #100]
	str	r2, [r4, #128]
	strb	r0, [r4, #132]
	str	r2, [r4, #140]
	bne	.L20072
.L20028:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L20068
	add	r9, r4, #72
	str	r8, [r4, #20]
	add	r2, r8, #36
	mov	r0, r9
	ldr	r1, [r8, #40]
	bl	__list_add
	ldr	r10, [r4, #32]
	cmp	r10, #0
	beq	.L20031
	mov	r1, r4
	mov	r0, r8
	blx	r10
	subs	r10, r0, #0
	blt	.L20073
.L20031:
	ldrb	r3, [r8, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L20032
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L20032
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r8, #45]
.L20032:
	tst	r3, #2
	bne	.L20033
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L20033
	ldrb	r2, [r8, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r8, #45]
.L20033:
	tst	r3, #1
	bne	.L20034
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L20034
	ldrb	r3, [r8, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r8, #45]
.L20034:
	cmp	r10, #0
	streq	r4, [r5, #2496]
	beq	.L20014
	movw	r3, #1410
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L20027
.L20029:
	ldr	r1, [r8, #24]
	movw	r2, #:lower16:.LC930
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC930
	ldr	r0, .L20075+4
	ldr	r1, [r1]
	stm	sp, {r4, r10}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20027
.L20016:
	bl	rndis_init.part.90
	subs	r10, r0, #0
	bge	.L20019
	b	.L20014
.L20072:
	ldr	ip, [r8]
	movw	r2, #:lower16:.LC929
	ldr	r1, [r8, #24]
	movt	r2, #:upper16:.LC929
	ldr	r0, .L20075+8
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r8, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L20028
.L20068:
	movw	r3, #1410
	mvn	r10, #21
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L20029
.L20027:
	mov	r0, r4
	mov	r4, #0
	bl	kfree
	ldrb	r3, [r5, #3740]	@ zero_extendqisi2
	str	r4, [r5, #2496]
	cmp	r3, r4
	beq	.L20014
	movw	r1, #:lower16:.LC601
	add	r0, sp, #16
	strb	r4, [r5, #3740]
	movt	r1, #:upper16:.LC601
	mov	r2, r4
	bl	sprintf
	add	r0, sp, #16
	mov	r1, r4
	bl	remove_proc_entry
.L20014:
	ldr	r2, [sp, #36]
	mov	r0, r10
	ldr	r3, [r7]
	cmp	r2, r3
	bne	.L20074
	add	sp, sp, #40
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L20038:
	mov	r4, #16
	b	.L20026
.L20071:
	mvn	r10, #11
	b	.L20027
.L20020:
	bl	bam_data_setup.part.92
	subs	r10, r0, #0
	beq	.L20022
	movw	r0, #:lower16:.LC1033
	mov	r2, r10
	ldr	r1, .L20075+12
	movt	r0, #:upper16:.LC1033
	bl	printk
	movw	r0, #:lower16:.LC1034
	ldr	r1, .L20075+16
	movt	r0, #:upper16:.LC1034
	bl	printk
	b	.L20014
.L20069:
	movw	r1, #:lower16:.LC1030
	mov	r3, #1
	ldr	r2, .L20075+20
	movt	r1, #:upper16:.LC1030
	ldr	r0, .L20075+24
	bl	__dynamic_pr_debug
	b	.L20018
.L20070:
	movw	r1, #:lower16:.LC1032
	ldr	r2, .L20075+20
	movt	r1, #:upper16:.LC1032
	ldr	r0, .L20075+28
	bl	__dynamic_pr_debug
	b	.L20022
.L20073:
	mov	r0, r9
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L20031
.L20025:
	mvn	r10, #18
	b	.L20014
.L20037:
	mvn	r10, #21
	b	.L20014
.L20074:
	bl	__stack_chk_fail
.L20076:
	.align	2
.L20075:
	.word	.LANCHOR7-796
	.word	.LANCHOR4+1392
	.word	.LANCHOR4+1368
	.word	.LANCHOR5+3028
	.word	.LANCHOR5+3048
	.word	.LANCHOR5-3432
	.word	.LANCHOR4+2376
	.word	.LANCHOR4+2400
	.fnend
	.size	rndis_qc_bind_config, .-rndis_qc_bind_config
	.align	2
	.global	rndis_qc_bind_config_vendor
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_bind_config_vendor, %function
rndis_qc_bind_config_vendor:
	.fnstart
	@ args = 4, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:__stack_chk_guard
	movt	r7, #:upper16:__stack_chk_guard
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	subs	fp, r1, #0
	ldr	r1, [r7]
	str	lr, [sp, #32]
	.pad #52
	sub	sp, sp, #52
	ldrb	r9, [sp, #88]	@ zero_extendqisi2
	strd	r2, [sp, #16]
	str	r1, [sp, #44]
	beq	.L20101
	movw	r5, #:lower16:.LANCHOR1
	mov	r8, r0
	movt	r5, #:upper16:.LANCHOR1
	ldrb	r3, [r5, #3740]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L20079
.L20082:
	movw	r6, #:lower16:.LANCHOR4
	movw	r3, #2394
	movt	r6, #:upper16:.LANCHOR4
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L20134
.L20081:
	ldr	r3, [r5, #3744]
	cmp	r3, #0
	beq	.L20083
	movw	r3, #2418
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L20135
.L20085:
	movw	r3, #:lower16:.LANCHOR7
	movt	r3, #:upper16:.LANCHOR7
	ldrb	r2, [r3, #-828]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L20086
	ldr	r1, [r8, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L20088
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r8, #24]
	strb	r2, [r3, #-2464]
	strb	r2, [r3, #-828]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L20088
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r8, #24]
	strb	r2, [r3, #-2444]
	strb	r2, [r3, #-820]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L20088
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [r3, #-2473]
	strb	r2, [r3, #-812]
.L20086:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L20102
	mov	r2, #184
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L20136
.L20089:
	ldr	r2, [fp]	@ unaligned
	movw	r1, #:lower16:rndis_qc_unbind
	movw	r3, #:lower16:.LC1184
	ldr	lr, .L20140
	movt	r1, #:upper16:rndis_qc_unbind
	movw	ip, #:lower16:rndis_qc_bind
	movt	ip, #:upper16:rndis_qc_bind
	movt	r3, #:upper16:.LC1184
	cmp	r9, #0
	str	r2, [r4, #122]	@ unaligned
	movw	r2, #:lower16:rndis_qc_set_alt
	ldrh	r0, [fp, #4]	@ unaligned
	movt	r2, #:upper16:rndis_qc_set_alt
	stm	r4, {r3, lr}
	moveq	r9, #15
	str	r1, [r4, #36]
	movw	r1, #1386
	str	ip, [r4, #32]
	movw	ip, #:lower16:rndis_qc_setup
	str	r2, [r4, #40]
	movw	r2, #:lower16:rndis_qc_rm_hdr
	ldrh	lr, [r6, r1]
	movt	r2, #:upper16:rndis_qc_rm_hdr
	movw	r1, #:lower16:rndis_qc_add_header
	movt	r1, #:upper16:rndis_qc_add_header
	movt	ip, #:upper16:rndis_qc_setup
	strh	r0, [r4, #126]	@ unaligned
	ldr	r0, [sp, #16]
	str	ip, [r4, #52]
	tst	lr, #4
	mov	ip, #0
	str	r2, [r4, #108]
	movw	r2, #:lower16:rndis_qc_resume
	movt	r2, #:upper16:rndis_qc_resume
	str	r1, [r4, #104]
	movw	r1, #:lower16:rndis_qc_suspend
	movt	r1, #:upper16:rndis_qc_suspend
	str	r0, [r4, #128]
	movw	r0, #:lower16:rndis_qc_disable
	movt	r0, #:upper16:rndis_qc_disable
	str	r2, [r4, #60]
	ldr	r2, [sp, #20]
	str	r0, [r4, #48]
	mov	r0, #44
	str	r1, [r4, #56]
	strh	ip, [r4, #98]	@ movhi
	str	r0, [r4, #100]
	strb	r9, [r4, #132]
	str	r2, [r4, #140]
	bne	.L20137
.L20092:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L20133
	add	r9, r4, #72
	str	r8, [r4, #20]
	add	r2, r8, #36
	mov	r0, r9
	ldr	r1, [r8, #40]
	bl	__list_add
	ldr	r10, [r4, #32]
	cmp	r10, #0
	beq	.L20095
	mov	r1, r4
	mov	r0, r8
	blx	r10
	subs	r10, r0, #0
	blt	.L20138
.L20095:
	ldrb	r3, [r8, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L20096
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L20096
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r8, #45]
.L20096:
	tst	r3, #2
	bne	.L20097
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L20097
	ldrb	r2, [r8, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r8, #45]
.L20097:
	tst	r3, #1
	bne	.L20098
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L20098
	ldrb	r3, [r8, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r8, #45]
.L20098:
	cmp	r10, #0
	streq	r4, [r5, #2496]
	beq	.L20077
	movw	r3, #1410
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L20090
.L20093:
	ldr	r1, [r8, #24]
	movw	r2, #:lower16:.LC930
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC930
	ldr	r0, .L20140+4
	ldr	r1, [r1]
	stm	sp, {r4, r10}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20090
.L20079:
	bl	rndis_init.part.90
	subs	r10, r0, #0
	bge	.L20082
	b	.L20077
.L20137:
	ldr	ip, [r8]
	movw	r2, #:lower16:.LC929
	ldr	r1, [r8, #24]
	movt	r2, #:upper16:.LC929
	ldr	r0, .L20140+8
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r8, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L20092
.L20133:
	movw	r3, #1410
	mvn	r10, #21
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L20093
.L20090:
	mov	r0, r4
	mov	r4, #0
	bl	kfree
	ldrb	r3, [r5, #3740]	@ zero_extendqisi2
	str	r4, [r5, #2496]
	cmp	r3, r4
	beq	.L20077
	movw	r1, #:lower16:.LC601
	add	r0, sp, #24
	strb	r4, [r5, #3740]
	movt	r1, #:upper16:.LC601
	mov	r2, r4
	bl	sprintf
	add	r0, sp, #24
	mov	r1, r4
	bl	remove_proc_entry
.L20077:
	ldr	r2, [sp, #44]
	mov	r0, r10
	ldr	r3, [r7]
	cmp	r2, r3
	bne	.L20139
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L20102:
	mov	r4, #16
	b	.L20089
.L20136:
	mvn	r10, #11
	b	.L20090
.L20083:
	bl	bam_data_setup.part.92
	subs	r10, r0, #0
	beq	.L20085
	movw	r0, #:lower16:.LC1033
	mov	r2, r10
	ldr	r1, .L20140+12
	movt	r0, #:upper16:.LC1033
	bl	printk
	movw	r0, #:lower16:.LC1034
	ldr	r1, .L20140+16
	movt	r0, #:upper16:.LC1034
	bl	printk
	b	.L20077
.L20134:
	movw	r1, #:lower16:.LC1030
	mov	r3, #1
	ldr	r2, .L20140+20
	movt	r1, #:upper16:.LC1030
	ldr	r0, .L20140+24
	bl	__dynamic_pr_debug
	b	.L20081
.L20135:
	movw	r1, #:lower16:.LC1032
	ldr	r2, .L20140+20
	movt	r1, #:upper16:.LC1032
	ldr	r0, .L20140+28
	bl	__dynamic_pr_debug
	b	.L20085
.L20138:
	mov	r0, r9
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L20095
.L20088:
	mvn	r10, #18
	b	.L20077
.L20101:
	mvn	r10, #21
	b	.L20077
.L20139:
	bl	__stack_chk_fail
.L20141:
	.align	2
.L20140:
	.word	.LANCHOR7-796
	.word	.LANCHOR4+1392
	.word	.LANCHOR4+1368
	.word	.LANCHOR5+3028
	.word	.LANCHOR5+3048
	.word	.LANCHOR5-3432
	.word	.LANCHOR4+2376
	.word	.LANCHOR4+2400
	.fnend
	.size	rndis_qc_bind_config_vendor, .-rndis_qc_bind_config_vendor
	.align	2
	.global	gether_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_setup, %function
gether_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	ldr	r6, [r4, #3992]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	cmp	r6, #0
	bne	.L20147
	mov	r2, #1
	mov	r5, r0
	mov	r7, r1
	mov	r0, #132
	mov	r1, r2
	bl	alloc_etherdev_mqs
	subs	r8, r0, #0
	mvneq	r5, #11
	bne	.L20156
.L20142:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L20147:
	mvn	r5, #15
	b	.L20142
.L20156:
	add	r9, r8, #1152
	movw	r2, #:lower16:eth_work
	str	r6, [r8, #1152]
	add	r3, r9, #20
	movt	r2, #:upper16:eth_work
	str	r8, [r8, #1160]
	mov	r1, #65024
	movw	ip, #:lower16:process_rx_w
	str	r6, [r8, #1168]
	str	r3, [r8, #1172]
	add	lr, r9, #108
	movt	r1, 65535
	str	r3, [r8, #1176]
	add	r3, r9, #28
	movt	ip, #:upper16:process_rx_w
	add	r10, r9, #92
	str	r3, [r8, #1180]
	str	r3, [r8, #1184]
	add	r3, r9, #52
	str	r3, [r8, #1204]
	str	r3, [r8, #1208]
	movw	r3, #:lower16:.LC1434
	str	r2, [r8, #1252]
	movw	r2, #:lower16:.LC1185
	movt	r3, #:upper16:.LC1434
	str	r6, [r8, #1212]
	movt	r2, #:upper16:.LC1185
	str	r6, [r8, #1216]
	add	r6, r5, #32
	str	r1, [r8, #1240]
	str	r10, [r8, #1244]
	str	r10, [r8, #1248]
	str	r1, [r8, #1256]
	mov	r1, #16
	str	lr, [r8, #1260]
	str	lr, [r8, #1264]
	str	ip, [r8, #1268]
	bl	snprintf
	ldr	r0, [r4, #4008]
	ldr	r1, [r8, #484]
	bl	get_ether_addr
	cmp	r0, #0
	bne	.L20157
.L20144:
	ldr	r3, [r7]	@ unaligned
	add	r10, r9, #125
	movw	r0, #:lower16:.LC1188
	movt	r0, #:upper16:.LC1188
	str	r3, [r8, #1277]	@ unaligned
	ldrh	r3, [r7, #4]	@ unaligned
	strh	r3, [r10, #4]	@ unaligned
	bl	printk
	ldr	r3, .L20159
	mov	r0, r8
	ldr	r1, .L20159+4
	add	r2, r3, #136
	str	r3, [r8, #328]
	str	r6, [r8, #688]
	str	r2, [r8, #332]
	str	r1, [r8, #736]
	str	r5, [r8, #1164]
	bl	register_netdev
	subs	r5, r0, #0
	bge	.L20145
	ldr	r0, .L20159+8
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L20158
.L20146:
	mov	r0, r8
	bl	free_netdev
	b	.L20142
.L20157:
	movw	r2, #:lower16:.LC1186
	movw	r1, #:lower16:.LC1187
	movt	r2, #:upper16:.LC1186
	movt	r1, #:upper16:.LC1187
	mov	r0, r6
	bl	dev_warn
	b	.L20144
.L20158:
	movw	r2, #:lower16:.LC1189
	mov	r1, r6
	movt	r2, #:upper16:.LC1189
	mov	r3, r5
	sub	r0, r0, #24
	bl	__dynamic_dev_dbg
	b	.L20146
.L20145:
	movw	r0, #:lower16:.LC1190
	ldr	r2, [r8, #484]
	ldr	r1, [r8, #1160]
	movt	r0, #:upper16:.LC1190
	bl	printk
	movw	r0, #:lower16:.LC1191
	mov	r2, r10
	ldr	r1, [r8, #1160]
	movt	r0, #:upper16:.LC1191
	bl	printk
	mov	r0, r8
	str	r9, [r4, #3992]
	bl	netif_carrier_off
	b	.L20142
.L20160:
	.align	2
.L20159:
	.word	.LANCHOR5+680
	.word	.LANCHOR7-1552
	.word	.LANCHOR8-3744
	.fnend
	.size	gether_setup, .-gether_setup
	.align	2
	.global	gether_setup_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_setup_name, %function
gether_setup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	ldr	r8, [r4, #3992]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	cmp	r8, #0
	bne	.L20166
	mov	r7, r2
	mov	r2, #1
	mov	r5, r0
	mov	r6, r1
	mov	r0, #132
	mov	r1, r2
	bl	alloc_etherdev_mqs
	subs	r9, r0, #0
	mvneq	r5, #11
	bne	.L20175
.L20161:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L20166:
	mvn	r5, #15
	b	.L20161
.L20175:
	movw	r2, #:lower16:eth_work
	add	r10, r9, #1152
	str	r8, [r9, #1152]
	movt	r2, #:upper16:eth_work
	mov	r3, r7
	str	r9, [r9, #1160]
	add	r7, r10, #92
	mov	r1, #65024
	str	r8, [r9, #1168]
	movw	ip, #:lower16:process_rx_w
	add	lr, r10, #108
	str	r8, [r9, #1212]
	str	r2, [r9, #1252]
	add	r2, r10, #52
	movt	r1, 65535
	movt	ip, #:upper16:process_rx_w
	str	r2, [r9, #1204]
	str	r8, [r9, #1216]
	add	r8, r10, #20
	str	r7, [r9, #1244]
	str	r7, [r9, #1248]
	add	r7, r10, #28
	str	r8, [r9, #1172]
	str	r2, [r9, #1208]
	movw	r2, #:lower16:.LC1185
	str	r8, [r9, #1176]
	movt	r2, #:upper16:.LC1185
	str	r7, [r9, #1180]
	str	r7, [r9, #1184]
	add	r7, r5, #32
	str	r1, [r9, #1240]
	str	r1, [r9, #1256]
	mov	r1, #16
	str	lr, [r9, #1260]
	str	lr, [r9, #1264]
	str	ip, [r9, #1268]
	bl	snprintf
	ldr	r0, [r4, #4008]
	ldr	r1, [r9, #484]
	bl	get_ether_addr
	cmp	r0, #0
	bne	.L20176
.L20163:
	ldr	r3, [r6]	@ unaligned
	add	r8, r10, #125
	movw	r0, #:lower16:.LC1188
	movt	r0, #:upper16:.LC1188
	str	r3, [r9, #1277]	@ unaligned
	ldrh	r3, [r6, #4]	@ unaligned
	strh	r3, [r8, #4]	@ unaligned
	bl	printk
	ldr	r3, .L20178
	mov	r0, r9
	ldr	r1, .L20178+4
	add	r2, r3, #136
	str	r3, [r9, #328]
	str	r7, [r9, #688]
	str	r2, [r9, #332]
	str	r1, [r9, #736]
	str	r5, [r9, #1164]
	bl	register_netdev
	subs	r5, r0, #0
	bge	.L20164
	ldr	r0, .L20178+8
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L20177
.L20165:
	mov	r0, r9
	bl	free_netdev
	b	.L20161
.L20176:
	movw	r2, #:lower16:.LC1186
	movw	r1, #:lower16:.LC1187
	movt	r2, #:upper16:.LC1186
	movt	r1, #:upper16:.LC1187
	mov	r0, r7
	bl	dev_warn
	b	.L20163
.L20177:
	movw	r2, #:lower16:.LC1189
	mov	r1, r7
	movt	r2, #:upper16:.LC1189
	mov	r3, r5
	sub	r0, r0, #24
	bl	__dynamic_dev_dbg
	b	.L20165
.L20164:
	movw	r0, #:lower16:.LC1190
	ldr	r2, [r9, #484]
	ldr	r1, [r9, #1160]
	movt	r0, #:upper16:.LC1190
	bl	printk
	movw	r0, #:lower16:.LC1191
	mov	r2, r8
	ldr	r1, [r9, #1160]
	movt	r0, #:upper16:.LC1191
	bl	printk
	mov	r0, r9
	str	r10, [r4, #3992]
	bl	netif_carrier_off
	b	.L20161
.L20179:
	.align	2
.L20178:
	.word	.LANCHOR5+680
	.word	.LANCHOR7-1552
	.word	.LANCHOR8-3744
	.fnend
	.size	gether_setup_name, .-gether_setup_name
	.align	2
	.global	gether_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_cleanup, %function
gether_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r4, #3992]
	cmp	r3, #0
	beq	.L20180
	ldr	r0, [r3, #8]
	bl	unregister_netdev
	ldr	r0, [r4, #3992]
	add	r0, r0, #88
	bl	flush_work
	ldr	r3, [r4, #3992]
	ldr	r0, [r3, #8]
	bl	free_netdev
	mov	r3, #0
	str	r3, [r4, #3992]
.L20180:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gether_cleanup, .-gether_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_function_bind_config, %function
ecm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #4]
	.pad #36
	sub	sp, sp, #36
	cmp	r4, #0
	beq	.L20245
	movw	r6, #:lower16:.LANCHOR1
	ldr	r3, [r1, #24]
	mov	r5, r1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r9, [r6, #3992]
	ldr	r7, [r3]
	cmp	r9, #0
	bne	.L20207
	mov	r2, #1
	mov	r0, #132
	mov	r1, r2
	bl	alloc_etherdev_mqs
	subs	r8, r0, #0
	mvneq	r7, #11
	bne	.L20246
.L20189:
	ldr	r2, .L20252
	movw	r0, #:lower16:.LC1192
	movt	r0, #:upper16:.LC1192
	mov	r1, r2
	bl	printk
.L20186:
	mov	r0, r7
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L20207:
	mvn	r7, #15
	b	.L20189
.L20246:
	add	r10, r8, #1152
	movw	r2, #:lower16:eth_work
	str	r9, [r8, #1152]
	add	r3, r10, #20
	movt	r2, #:upper16:eth_work
	str	r8, [r8, #1160]
	mov	r1, #65024
	movw	ip, #:lower16:process_rx_w
	str	r9, [r8, #1168]
	str	r3, [r8, #1172]
	add	lr, r10, #108
	movt	r1, 65535
	str	r3, [r8, #1176]
	add	r3, r10, #28
	movt	ip, #:upper16:process_rx_w
	add	fp, r10, #92
	str	r3, [r8, #1180]
	str	r3, [r8, #1184]
	add	r3, r10, #52
	str	r3, [r8, #1204]
	str	r3, [r8, #1208]
	movw	r3, #:lower16:.LC1436
	str	r2, [r8, #1252]
	movw	r2, #:lower16:.LC1185
	movt	r3, #:upper16:.LC1436
	str	r9, [r8, #1212]
	movt	r2, #:upper16:.LC1185
	str	r9, [r8, #1216]
	str	r1, [r8, #1240]
	str	fp, [r8, #1244]
	str	fp, [r8, #1248]
	add	fp, r7, #32
	str	r1, [r8, #1256]
	mov	r1, #16
	str	lr, [r8, #1260]
	str	lr, [r8, #1264]
	str	ip, [r8, #1268]
	bl	snprintf
	ldr	r0, [r6, #4008]
	ldr	r1, [r8, #484]
	bl	get_ether_addr
	cmp	r0, #0
	bne	.L20247
.L20190:
	ldr	r3, [r4]	@ unaligned
	add	r2, r10, #125
	movw	r0, #:lower16:.LC1188
	movt	r0, #:upper16:.LC1188
	movw	r9, #:lower16:.LANCHOR7
	str	r2, [sp, #28]
	movt	r9, #:upper16:.LANCHOR7
	str	r3, [r8, #1277]	@ unaligned
	ldrh	r3, [r4, #4]	@ unaligned
	strh	r3, [r10, #129]	@ unaligned
	bl	printk
	ldr	r3, .L20252+4
	sub	r2, r9, #1552
	mov	r0, r8
	str	r2, [r8, #736]
	add	r2, r3, #136
	str	r3, [r8, #328]
	str	r2, [r8, #332]
	str	fp, [r8, #688]
	str	r7, [r8, #1164]
	bl	register_netdev
	subs	r7, r0, #0
	bge	.L20191
	ldr	r0, .L20252+8
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L20248
.L20192:
	mov	r0, r8
	bl	free_netdev
	b	.L20189
.L20245:
	ldr	r2, .L20252
	movw	r0, #:lower16:.LC1435
	mvn	r7, #21
	movt	r0, #:upper16:.LC1435
	mov	r1, r2
	bl	printk
	b	.L20186
.L20247:
	movw	r2, #:lower16:.LC1186
	movw	r1, #:lower16:.LC1187
	movt	r2, #:upper16:.LC1186
	movt	r1, #:upper16:.LC1187
	mov	r0, fp
	bl	dev_warn
	b	.L20190
.L20248:
	movw	r2, #:lower16:.LC1189
	mov	r1, fp
	movt	r2, #:upper16:.LC1189
	mov	r3, r7
	sub	r0, r0, #24
	bl	__dynamic_dev_dbg
	b	.L20192
.L20191:
	movw	r0, #:lower16:.LC1190
	ldr	r2, [r8, #484]
	ldr	r1, [r8, #1160]
	movt	r0, #:upper16:.LC1190
	bl	printk
	movw	r0, #:lower16:.LC1191
	ldr	r1, [r8, #1160]
	ldr	r2, [sp, #28]
	movt	r0, #:upper16:.LC1191
	bl	printk
	mov	r0, r8
	str	r10, [r6, #3992]
	bl	netif_carrier_off
	cmp	r7, #0
	bne	.L20189
	ldr	r6, [r5, #24]
	movw	r0, #:lower16:.LC473
	movt	r0, #:upper16:.LC473
	ldr	r3, [r6]
	ldr	r8, [r3, #28]
	mov	r1, r8
	bl	strcmp
	cmp	r0, #0
	beq	.L20210
	movw	r0, #:lower16:.LC476
	mov	r1, r8
	movt	r0, #:upper16:.LC476
	bl	strcmp
	cmp	r0, #0
	beq	.L20210
	movw	r8, #:lower16:.LANCHOR0
	movt	r8, #:upper16:.LANCHOR0
	ldrb	r3, [r8, #1628]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L20195
	ldrb	r3, [r6, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L20197
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r6, #48]
	ldr	r2, [r5, #24]
	strb	r3, [r8, #1628]
	strb	r3, [r8, #3864]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L20197
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r5, #24]
	strb	r3, [r8, #1644]
	strb	r3, [r8, #3896]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L20197
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r5, #24]
	strb	r3, [r8, #1636]
	strb	r3, [r9, #-849]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L20197
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	strb	r3, [r8, #1652]
	strb	r3, [r8, #3855]
.L20195:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L20211
	mov	r2, #176
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L20249
.L20198:
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	add	r9, r6, #150
	movw	r2, #:lower16:.LC1407
	ldrb	r3, [r4]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC1407
	mov	r1, #14
	mov	r0, r9
	movw	r10, #:lower16:.LANCHOR4
	movt	r10, #:upper16:.LANCHOR4
	str	ip, [sp, #16]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #12]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	snprintf
	ldr	ip, .L20252+12
	movw	r3, #:lower16:.LC1408
	movw	r0, #:lower16:ecm_bind
	movw	r2, #:lower16:ecm_unbind
	movt	r3, #:upper16:.LC1408
	str	r9, [r8, #1640]
	movw	r1, #:lower16:ecm_set_alt
	movt	r0, #:upper16:ecm_bind
	movt	r2, #:upper16:ecm_unbind
	movt	r1, #:upper16:ecm_set_alt
	stm	r6, {r3, ip}
	movw	ip, #1386
	str	r0, [r6, #32]
	movw	r0, #:lower16:ecm_get_alt
	str	r2, [r6, #36]
	movt	r0, #:upper16:ecm_get_alt
	movw	r2, #:lower16:ecm_setup
	str	r1, [r6, #40]
	ldrh	ip, [r10, ip]
	movw	r1, #:lower16:ecm_disable
	movt	r1, #:upper16:ecm_disable
	movt	r2, #:upper16:ecm_setup
	strd	r0, [r6, #44]
	mov	r0, #15
	tst	ip, #4
	str	r2, [r6, #52]
	strh	r0, [r6, #98]	@ movhi
	bne	.L20250
.L20199:
	ldr	r3, [r6, #48]
	cmp	r3, #0
	beq	.L20202
	add	r4, r6, #72
	str	r5, [r6, #20]
	add	r2, r5, #36
	mov	r0, r4
	ldr	r1, [r5, #40]
	bl	__list_add
	ldr	r3, [r6, #32]
	cmp	r3, #0
	beq	.L20203
	mov	r1, r6
	mov	r0, r5
	blx	r3
	subs	r7, r0, #0
	blt	.L20251
.L20203:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L20204
	ldr	r2, [r6, #16]
	cmp	r2, #0
	beq	.L20204
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L20204:
	tst	r3, #2
	bne	.L20205
	ldr	r2, [r6, #8]
	cmp	r2, #0
	beq	.L20205
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L20205:
	tst	r3, #1
	bne	.L20206
	ldr	r3, [r6, #12]
	cmp	r3, #0
	beq	.L20206
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L20206:
	cmp	r7, #0
	beq	.L20186
	movw	r3, #1410
	ldrh	r3, [r10, r3]
	tst	r3, #4
	bne	.L20200
.L20201:
	mov	r3, #0
	mov	r0, r6
	str	r3, [r8, #1640]
	bl	kfree
.L20194:
	ldr	r2, .L20252
	movw	r0, #:lower16:.LC1437
	movt	r0, #:upper16:.LC1437
	mov	r1, r2
	bl	printk
	bl	gether_cleanup
	b	.L20186
.L20250:
	ldr	ip, [r5]
	movw	r2, #:lower16:.LC929
	ldr	r1, [r5, #24]
	movt	r2, #:upper16:.LC929
	ldr	r0, .L20252+16
	ldr	r1, [r1]
	stm	sp, {r6, ip}
	str	r5, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r6, #40]
	cmp	r3, #0
	bne	.L20199
.L20202:
	movw	r3, #1410
	mvn	r7, #21
	ldrh	r3, [r10, r3]
	tst	r3, #4
	beq	.L20201
.L20200:
	ldr	r1, [r5, #24]
	movw	r2, #:lower16:.LC930
	ldr	r3, [r6]
	movt	r2, #:upper16:.LC930
	ldr	r0, .L20252+20
	ldr	r1, [r1]
	strd	r6, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20201
.L20211:
	mov	r6, #16
	b	.L20198
.L20251:
	mov	r0, r4
	bl	list_del
	mov	r3, #0
	str	r3, [r6, #20]
	b	.L20203
.L20210:
	mvn	r7, #21
	b	.L20194
.L20197:
	mvn	r7, #18
	b	.L20194
.L20249:
	mvn	r7, #11
	b	.L20194
.L20253:
	.align	2
.L20252:
	.word	.LANCHOR5+3076
	.word	.LANCHOR5+680
	.word	.LANCHOR8-3744
	.word	.LANCHOR7-836
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.fnend
	.size	ecm_function_bind_config, .-ecm_function_bind_config
	.align	2
	.global	gether_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_connect, %function
gether_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r3, #3992]
	cmp	r6, #0
	mvneq	r0, #21
	beq	.L20254
	movw	r3, #:lower16:kmalloc_caches
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4, #144]
	beq	.L20257
	mov	r2, #44
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #144]
	beq	.L20283
.L20257:
	ldr	r3, [r4, #88]
	str	r6, [r3]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L20259
	ldr	r3, [r4, #92]
	str	r6, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L20284
.L20260:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	cmp	r5, #0
	blt	.L20259
.L20282:
	ldr	r0, [r6, #8]
.L20254:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L20259:
	ldr	r0, [r4, #144]
	bl	kfree
.L20258:
	mov	r0, r5
	b	.L20254
.L20284:
	ldr	r3, [r6, #12]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bls	.L20270
	ldr	r3, [r3, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L20270
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r8, [r3, #500]
	lsl	r8, r8, #1
	b	.L20261
.L20270:
	mov	r8, #2
.L20261:
	add	r7, r6, #16
	mov	r0, r7
	bl	_raw_spin_lock
	mov	r2, r8
	add	r0, r6, #20
	ldr	r1, [r4, #88]
	bl	prealloc
	subs	r5, r0, #0
	blt	.L20262
	mov	r2, r8
	ldr	r1, [r4, #92]
	add	r0, r6, #28
	bl	prealloc
	mov	r5, r0
	mov	r0, r7
	bl	_raw_spin_unlock
	cmp	r5, #0
	beq	.L20285
.L20263:
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L20260
.L20262:
	mov	r0, r7
	bl	_raw_spin_unlock
	b	.L20263
.L20283:
	movw	r0, #:lower16:.LC1438
	ldr	r1, .L20286
	mvn	r5, #11
	movt	r0, #:upper16:.LC1438
	bl	printk
	b	.L20258
.L20285:
	ldrb	r3, [r4, #96]	@ zero_extendqisi2
	mov	r0, r6
	strb	r3, [r6, #124]
	ldr	r3, [r4, #100]
	str	r3, [r6, #68]
	ldr	r3, [r4, #132]
	str	r3, [r6, #84]
	ldr	r3, [r4, #128]
	str	r3, [r6, #80]
	ldr	r3, [r4, #116]
	str	r3, [r6, #72]
	ldr	r3, [r4, #120]
	str	r3, [r6, #76]
	bl	_raw_spin_lock
	str	r4, [r6, #4]
	str	r5, [r6, #40]
	str	r5, [r6, #44]
	str	r5, [r6, #48]
	str	r6, [r4, #84]
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #164]
	tst	r3, #1
	beq	.L20264
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L20265
.L20281:
	mov	r0, r4
	blx	r3
.L20265:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r6, #8]
	bl	netif_carrier_on
	ldr	r0, [r6, #8]
	ldr	r3, [r0, #164]
	tst	r3, #1
	beq	.L20254
	mov	r1, #32
	mov	r0, r6
	bl	rx_fill
	ldr	r2, [r6, #8]
	mov	r3, #0
	mov	r0, r3
	str	r3, [r6, #36]
	ldr	r4, [r2, #576]
	add	r1, r4, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L20282
	ldr	r0, [r4, #4]
	bl	__netif_schedule
	ldr	r0, [r6, #8]
	b	.L20254
.L20264:
	ldr	r3, [r4, #140]
	cmp	r3, #0
	bne	.L20281
	b	.L20265
.L20287:
	.align	2
.L20286:
	.word	.LANCHOR5+3104
	.fnend
	.size	gether_connect, .-gether_connect
	.align	2
	.global	gether_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_disconnect, %function
gether_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #84]
	cmp	r4, #0
	beq	.L20288
	ldr	r3, [r4, #8]
	mov	r6, r0
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L20309
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
.L20299:
	ldr	r0, [r4, #8]
	add	r7, r4, #16
	add	r9, r4, #20
	bl	netif_carrier_off
	ldr	r0, [r6, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r5, [r4, #20]
	cmp	r9, r5
	beq	.L20292
	mov	r10, #0
	b	.L20291
.L20293:
	ldr	r0, [r6, #88]
.L20307:
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r5, [r4, #20]
	cmp	r5, r9
	beq	.L20292
.L20291:
	mov	r0, r5
	sub	r8, r5, #36
	bl	list_del
	mov	r0, r7
	bl	_raw_spin_unlock
	ldrb	r3, [r6, #124]	@ zero_extendqisi2
	mov	r1, r8
	cmp	r3, #0
	beq	.L20293
	ldr	r0, [r5, #-36]
	bl	kfree
	str	r10, [r5, #-36]
	mov	r1, r8
	ldr	r0, [r6, #88]
	b	.L20307
.L20292:
	mov	r5, #0
	ldr	r0, [r6, #144]
	add	r8, r4, #28
	bl	kfree
	mov	r0, r7
	str	r5, [r6, #144]
	bl	_raw_spin_unlock
	ldr	r3, [r6, #88]
	str	r5, [r3]
	ldr	r3, [r6, #88]
	str	r5, [r3, #28]
	ldr	r0, [r6, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L20308
.L20310:
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r0, [r6, #92]
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L20308:
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r5, [r4, #28]
	cmp	r5, r8
	bne	.L20310
	mov	r0, r7
	add	r7, r4, #64
	bl	_raw_spin_unlock
	mov	r0, r7
	add	r5, r4, #52
	bl	_raw_spin_lock
	ldr	r3, [r4, #52]
	cmp	r3, r5
	beq	.L20297
	mov	r8, #0
	b	.L20298
.L20311:
	ldr	r2, [r4, #60]
	sub	r2, r2, #1
	str	r2, [r4, #60]
	ldm	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #52]
	cmp	r3, r5
	beq	.L20297
.L20298:
	subs	r0, r3, #0
	bne	.L20311
.L20297:
	mov	r0, r7
	mov	r5, #0
	bl	_raw_spin_unlock
	ldr	r3, [r6, #92]
	mov	r0, r4
	str	r5, [r3]
	ldr	r3, [r6, #92]
	str	r5, [r3, #28]
	str	r5, [r4, #68]
	str	r5, [r4, #80]
	str	r5, [r4, #84]
	bl	_raw_spin_lock
	str	r5, [r4, #4]
	mov	r0, r4
	str	r5, [r6, #84]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock
.L20309:
	movw	r0, #:lower16:.LC109
	movw	r1, #1847
	movt	r0, #:upper16:.LC109
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC110
	movt	r0, #:upper16:.LC110
	bl	printk
	b	.L20299
.L20288:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	gether_disconnect, .-gether_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_disable, %function
rndis_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #168]
	ldr	r3, [r3]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	ldr	r0, .L20346
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20342
.L20314:
	ldr	r3, [r7, #164]
	cmp	r3, #0
	ble	.L20315
.L20320:
	mov	r0, r7
	bl	gether_disconnect
	ldr	r0, [r7, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r7, #168]
	mov	r2, #0
	str	r2, [r3]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L20315:
	rsb	r3, r3, r3, lsl #4
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	lsl	r3, r3, #2
	mov	r1, #0
	add	r2, r6, r3
	ldr	r3, [r2, #3732]
	add	r6, r2, #3728
	mov	r9, r2
	str	r1, [r2, #3684]
	add	r6, r6, #4
	ldr	r4, [r3]
.L20316:
	cmp	r6, r3
	beq	.L20320
	ldr	r2, [r3, #16]
	cmp	r2, #0
	bne	.L20322
	b	.L20343
.L20328:
	mov	r4, r3
.L20322:
	cmp	r4, r6
	ldr	r3, [r4]
	beq	.L20320
	ldr	r2, [r4, #16]
	cmp	r2, #0
	bne	.L20328
.L20321:
	ldr	r8, [r4, #8]
	mov	r3, #1
	str	r3, [r4, #16]
	cmp	r8, #0
	beq	.L20320
	ldr	r5, [r9, #3732]
	cmp	r5, r6
	ldr	r4, [r5]
	bne	.L20319
	b	.L20344
.L20326:
	mov	r4, r3
.L20319:
	cmp	r5, #0
	beq	.L20318
	ldr	r3, [r5, #8]
	cmp	r8, r3
	beq	.L20345
.L20318:
	cmp	r4, r6
	mov	r5, r4
	ldr	r3, [r4]
	bne	.L20326
	ldr	r3, [r9, #3732]
	ldr	r4, [r3]
	b	.L20316
.L20345:
	mov	r0, r5
	bl	list_del
	mov	r0, r5
	bl	kfree
	b	.L20318
.L20344:
	mov	r3, r6
	b	.L20316
.L20343:
	mov	r4, r3
	b	.L20321
.L20342:
	ldr	r3, [r7, #20]
	movw	r2, #:lower16:.LC1439
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1439
	ldr	r3, [r3, #24]
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20314
.L20347:
	.align	2
.L20346:
	.word	.LANCHOR8-868
	.fnend
	.size	rndis_disable, .-rndis_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_alt, %function
rndis_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r5, [r3, #24]
	beq	.L20416
	ldrb	r3, [r0, #149]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L20379
	ldr	r2, [r0, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L20355
	ldr	r0, .L20426
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20417
.L20356:
	mov	r0, r4
	bl	gether_disconnect
	ldr	r2, [r4, #88]
.L20355:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L20357
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L20357
.L20358:
	ldr	r0, .L20426+4
	mov	r3, #0
	strb	r3, [r4, #96]
	strh	r3, [r4, #98]	@ movhi
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20418
.L20362:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r7, [r5, #3992]
	cmp	r7, #0
	beq	.L20379
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4, #144]
	beq	.L20365
	mov	r2, #44
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #144]
	beq	.L20419
.L20365:
	ldr	r3, [r4, #88]
	str	r7, [r3]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L20367
	ldr	r3, [r4, #92]
	str	r7, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	beq	.L20420
.L20368:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	cmp	r6, #0
	blt	.L20367
.L20415:
	ldr	r6, [r7, #8]
.L20366:
.L20376:
	cmn	r6, #4096
	movhi	r0, r6
	bhi	.L20348
	ldr	r0, .L20426+8
	add	r7, r4, #98
	ldrb	r4, [r4, #164]	@ zero_extendqisi2
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L20421
.L20378:
	clz	r3, r6
	cmp	r4, #0
	lsr	r3, r3, #5
	movne	r3, #1
	cmp	r3, #0
	bne	.L20382
	mov	r0, r3
	str	r3, [r5, #3628]
	str	r3, [r5, #3632]
	str	r7, [r5, #3704]
	str	r6, [r5, #3708]
.L20348:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L20357:
	ldr	r3, .L20426+12
	ldr	r0, [r5]
	ldrh	r1, [r3, #-2]
	tst	r1, #4
	bne	.L20422
.L20359:
	mov	r1, r4
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L20361
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L20358
.L20361:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L20348
.L20416:
	ldr	r0, [r0, #168]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L20350
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #168]
.L20350:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L20423
.L20351:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #168]
	mov	r0, #0
	str	r4, [r3]
	b	.L20348
.L20379:
	mvn	r0, #21
	b	.L20348
.L20367:
	ldr	r0, [r4, #144]
	bl	kfree
	b	.L20376
.L20418:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1442
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1442
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20362
.L20420:
	ldr	r3, [r7, #12]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bhi	.L20424
.L20381:
	mov	r9, #2
.L20369:
	add	r8, r7, #16
	mov	r0, r8
	bl	_raw_spin_lock
	mov	r2, r9
	add	r0, r7, #20
	ldr	r1, [r4, #88]
	bl	prealloc
	subs	r6, r0, #0
	blt	.L20370
	mov	r2, r9
	ldr	r1, [r4, #92]
	add	r0, r7, #28
	bl	prealloc
	mov	r6, r0
	mov	r0, r8
	bl	_raw_spin_unlock
	cmp	r6, #0
	beq	.L20425
.L20371:
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L20368
.L20421:
	movw	r1, #:lower16:.LC267
	ldr	r2, .L20426+16
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC267
	bl	__dynamic_pr_debug
	b	.L20378
.L20424:
	ldr	r3, [r3, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L20381
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r9, [r3, #500]
	lsl	r9, r9, #1
	b	.L20369
.L20417:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1440
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1440
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20356
.L20422:
	movw	r2, #:lower16:.LC1441
	add	r1, r0, #32
	movt	r2, #:upper16:.LC1441
	sub	r0, r3, #20
	bl	__dynamic_dev_dbg
	ldr	r2, [r4, #88]
	ldr	r0, [r5]
	b	.L20359
.L20370:
	mov	r0, r8
	bl	_raw_spin_unlock
	b	.L20371
.L20382:
	mov	r0, #0
	b	.L20348
.L20423:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L20379
	ldr	r0, [r4, #168]
	ldr	r1, [r0, #28]
	b	.L20351
.L20425:
	ldrb	r3, [r4, #96]	@ zero_extendqisi2
	mov	r0, r7
	strb	r3, [r7, #124]
	ldr	r3, [r4, #100]
	str	r3, [r7, #68]
	ldr	r3, [r4, #132]
	str	r3, [r7, #84]
	ldr	r3, [r4, #128]
	str	r3, [r7, #80]
	ldr	r3, [r4, #116]
	str	r3, [r7, #72]
	ldr	r3, [r4, #120]
	str	r3, [r7, #76]
	bl	_raw_spin_lock
	str	r4, [r7, #4]
	str	r6, [r7, #40]
	str	r6, [r7, #44]
	str	r6, [r7, #48]
	str	r7, [r4, #84]
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #164]
	tst	r3, #1
	beq	.L20372
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L20373
.L20414:
	mov	r0, r4
	blx	r3
.L20373:
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r0, [r7, #8]
	bl	netif_carrier_on
	ldr	r6, [r7, #8]
	ldr	r3, [r6, #164]
	tst	r3, #1
	beq	.L20376
	mov	r1, #32
	mov	r0, r7
	bl	rx_fill
	ldr	r2, [r7, #8]
	mov	r3, #0
	mov	r0, r3
	str	r3, [r7, #36]
	ldr	r6, [r2, #576]
	add	r1, r6, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L20415
	ldr	r0, [r6, #4]
	bl	__netif_schedule
	b	.L20415
.L20372:
	ldr	r3, [r4, #140]
	cmp	r3, #0
	bne	.L20414
	b	.L20373
.L20419:
	movw	r0, #:lower16:.LC1438
	ldr	r1, .L20426+20
	mvn	r6, #11
	movt	r0, #:upper16:.LC1438
	bl	printk
	b	.L20376
.L20427:
	.align	2
.L20426:
	.word	.LANCHOR8-844
	.word	.LANCHOR8-796
	.word	.LANCHOR8-1104
	.word	.LANCHOR8-820
	.word	.LANCHOR5+2832
	.word	.LANCHOR5+3104
	.fnend
	.size	rndis_set_alt, .-rndis_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_disable, %function
ecm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L20443
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L20442
.L20429:
	ldr	r3, [r4, #88]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L20430
	mov	r0, r4
	bl	gether_disconnect
.L20430:
	ldr	r0, [r4, #164]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L20428
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #164]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #164]
	str	r3, [r2, #28]
.L20428:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L20442:
	ldr	r1, [r4, #20]
	sub	r0, r3, #20
	movw	r2, #:lower16:.LC1443
	movt	r2, #:upper16:.LC1443
	ldr	r3, [r1, #24]
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20429
.L20444:
	.align	2
.L20443:
	.word	.LANCHOR8-772
	.fnend
	.size	ecm_disable, .-ecm_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_set_alt, %function
ecm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	mov	r5, r2
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r0, [r0, #148]	@ zero_extendqisi2
	ldr	r3, [r4, #20]
	cmp	r0, r1
	ldr	r6, [r3, #24]
	beq	.L20491
	ldrb	r3, [r4, #149]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r3, r1
	bne	.L20451
	ldr	r2, [r4, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L20452
	ldr	r0, .L20498
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20492
.L20453:
	mov	r0, r4
	bl	gether_disconnect
	ldr	r2, [r4, #88]
.L20452:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L20454
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L20454
.L20455:
	cmp	r5, #1
	bne	.L20459
	ldr	r3, [r6]
	movw	r0, #:lower16:.LC480
	movt	r0, #:upper16:.LC480
	ldr	r1, [r3, #28]
	bl	strcmp
	ldr	r3, .L20498+4
	mov	r2, #15
	adds	r0, r0, #0
	movne	r0, #1
	strh	r2, [r4, #98]	@ movhi
	ldrh	r2, [r3, #-2]
	strb	r0, [r4, #96]
	tst	r2, #4
	bne	.L20493
.L20460:
	mov	r0, r4
	bl	gether_connect
	cmn	r0, #4096
	bhi	.L20445
.L20459:
	ldr	r7, [r4, #168]
	mov	r3, #1
	strb	r3, [r4, #172]
	cmp	r7, #0
	beq	.L20464
	ldr	r2, [r4, #20]
	mov	r3, #0
	mov	r1, #8
	ldr	r6, [r7]
	movw	r8, #:lower16:.LANCHOR2
	movt	r8, #:upper16:.LANCHOR2
	ldr	r9, [r2, #24]
	movw	r2, #378
	strb	r3, [r6, #1]
	ldrb	r0, [r4, #173]	@ zero_extendqisi2
	strh	r0, [r6, #2]	@ unaligned
	strb	r3, [r6, #6]
	strb	r3, [r6, #7]
	str	r1, [r7, #4]
	ldrh	r3, [r8, r2]
	tst	r3, #4
	bne	.L20494
.L20462:
	mov	r1, #2
	mvn	r3, #94
	mov	r5, #0
	mov	r2, #32
	strb	r1, [r4, #172]
	mov	r1, r7
	strb	r3, [r6]
	ldrb	r3, [r4, #148]	@ zero_extendqisi2
	strh	r3, [r6, #4]	@ unaligned
	ldr	r0, [r4, #164]
	str	r5, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L20495
.L20464:
	mov	r0, #0
.L20445:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L20454:
	ldr	r3, .L20498+8
	ldr	r0, [r6]
	ldrh	r1, [r3, #-2]
	tst	r1, #4
	bne	.L20496
.L20456:
	mov	r1, r4
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L20458
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L20455
.L20458:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L20445
.L20491:
	cmp	r2, #0
	bne	.L20451
	ldr	r0, [r4, #164]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L20449
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #164]
.L20449:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L20497
.L20450:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #164]
	mov	r0, #0
	str	r4, [r3]
	b	.L20445
.L20495:
	movw	r3, #426
	str	r7, [r4, #168]
	ldrh	r3, [r8, r3]
	tst	r3, #4
	beq	.L20464
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC25
	mov	r3, r0
	movt	r2, #:upper16:.LC25
	ldr	r0, .L20498+12
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	mov	r0, r5
	b	.L20445
.L20451:
	mvn	r0, #21
	b	.L20445
.L20492:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC1444
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1444
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20453
.L20496:
	movw	r2, #:lower16:.LC1445
	add	r1, r0, #32
	movt	r2, #:upper16:.LC1445
	sub	r0, r3, #20
	bl	__dynamic_dev_dbg
	ldr	r2, [r4, #88]
	ldr	r0, [r6]
	b	.L20456
.L20493:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC1446
	sub	r0, r3, #20
	movt	r2, #:upper16:.LC1446
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20460
.L20497:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L20451
	ldr	r0, [r4, #164]
	ldr	r1, [r0, #28]
	b	.L20450
.L20494:
	ldrb	lr, [r4, #173]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC20
	movw	r3, #:lower16:.LC21
	ldr	r1, [r9]
	movt	ip, #:upper16:.LC20
	movw	r2, #:lower16:.LC23
	movt	r3, #:upper16:.LC21
	add	r0, r8, #360
	movt	r2, #:upper16:.LC23
	cmp	lr, #0
	movne	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20462
.L20499:
	.align	2
.L20498:
	.word	.LANCHOR8-748
	.word	.LANCHOR8-700
	.word	.LANCHOR8-724
	.word	.LANCHOR2+408
	.fnend
	.size	ecm_set_alt, .-ecm_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_disable, %function
ncm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L20515
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L20514
.L20501:
	ldr	r3, [r4, #88]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L20502
	mov	r0, r4
	bl	gether_disconnect
.L20502:
	ldr	r0, [r4, #164]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L20500
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #164]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #164]
	str	r3, [r2, #28]
.L20500:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L20514:
	ldr	r1, [r4, #20]
	sub	r0, r3, #20
	movw	r2, #:lower16:.LC1447
	movt	r2, #:upper16:.LC1447
	ldr	r3, [r1, #24]
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20501
.L20516:
	.align	2
.L20515:
	.word	.LANCHOR8-676
	.fnend
	.size	ncm_disable, .-ncm_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_set_alt, %function
ncm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r1, [r0, #148]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	r1, r5
	ldr	r6, [r3, #24]
	beq	.L20557
	ldrb	r3, [r0, #149]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r3, r5
	bne	.L20525
	cmp	r2, #0
	beq	.L20534
	ldr	r2, [r0, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	bne	.L20558
.L20526:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L20528
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L20528
.L20529:
	ldr	r3, [r6]
	movw	r0, #:lower16:.LC480
	movt	r0, #:upper16:.LC480
	ldr	r1, [r3, #28]
	bl	strcmp
	adds	r2, r0, #0
	mov	r3, #15
	movne	r2, #1
	mov	r0, r4
	strb	r2, [r4, #96]
	strh	r3, [r4, #98]	@ movhi
	bl	gether_connect
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L20534
	ldrh	r3, [r4, #182]
	str	r2, [r4, #184]
	movw	r0, #:lower16:.LC1453
	movt	r0, #:upper16:.LC1453
	sub	r3, r3, #14
	str	r3, [r2, #356]
	ldr	r3, [r4, #184]
	ldr	r1, [r3, #356]
	bl	printk
	mov	r0, #0
	b	.L20517
.L20534:
	mov	r0, r2
.L20517:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L20557:
	cmp	r2, #0
	bne	.L20525
	ldr	r0, [r0, #164]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L20521
	ldr	r3, .L20564
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L20559
.L20522:
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #164]
.L20521:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L20560
.L20523:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #164]
	mov	r0, #0
	str	r4, [r3]
	b	.L20517
.L20528:
	ldr	r3, .L20564+4
	ldr	r0, [r6]
	ldrh	r1, [r3, #-2]
	tst	r1, #4
	bne	.L20561
.L20530:
	mov	r1, r4
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L20532
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L20529
.L20532:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L20517
.L20525:
	mvn	r0, #21
	b	.L20517
.L20560:
	ldr	ip, .L20564+8
	ldr	r1, [r6]
	ldrh	r3, [ip, #-2]
	tst	r3, #4
	bne	.L20562
.L20524:
	mov	r2, r0
	mov	r0, r1
	mov	r1, r4
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L20525
	ldr	r0, [r4, #164]
	ldr	r1, [r0, #28]
	b	.L20523
.L20559:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC1448
	sub	r0, r3, #20
	movt	r2, #:upper16:.LC1448
	mov	r3, r5
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r0, [r4, #164]
	b	.L20522
.L20561:
	movw	r2, #:lower16:.LC1452
	add	r1, r0, #32
	movt	r2, #:upper16:.LC1452
	sub	r0, r3, #20
	bl	__dynamic_dev_dbg
	ldr	r2, [r4, #88]
	ldr	r0, [r6]
	b	.L20530
.L20562:
	movw	r2, #:lower16:.LC1449
	add	r1, r1, #32
	mov	r3, r5
	sub	r0, ip, #20
	movt	r2, #:upper16:.LC1449
	bl	__dynamic_dev_dbg
	ldr	r0, [r4, #164]
	ldr	r1, [r6]
	b	.L20524
.L20558:
	ldr	r0, .L20564+12
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20563
.L20527:
	movw	r0, #:lower16:.LC1451
	ldr	r1, .L20564+16
	movt	r0, #:upper16:.LC1451
	bl	printk
	mov	r0, r4
	bl	gether_disconnect
	movw	r3, #:lower16:.LANCHOR0
	mov	r1, #0
	ldr	r2, [r4, #88]
	movt	r3, #:upper16:.LANCHOR0
	mov	ip, #15
	add	r0, r3, #48
	strh	ip, [r4, #98]	@ movhi
	mov	ip, #16384
	str	r1, [r4, #100]
	str	r0, [r4, #176]
	movw	r0, #9014
	strb	r1, [r4, #180]
	ldr	r3, [r3, #36]
	str	r3, [r4, #108]
	str	ip, [r4, #112]
	strh	r0, [r4, #182]	@ movhi
	str	r1, [r4, #184]
	b	.L20526
.L20563:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC1450
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1450
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20527
.L20565:
	.align	2
.L20564:
	.word	.LANCHOR8-652
	.word	.LANCHOR8-580
	.word	.LANCHOR8-628
	.word	.LANCHOR8-604
	.word	.LANCHOR5+3120
	.fnend
	.size	ncm_set_alt, .-ncm_set_alt
	.align	2
	.global	gether_qc_get_macs
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_get_macs, %function
gether_qc_get_macs:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r10, [sp, #24]
	movw	r10, #:lower16:.LANCHOR1
	movt	r10, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	mov	r8, r0
	ldr	r4, [r10, #4068]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	cmp	r4, #0
	subne	r5, r0, #1
	addne	r9, r0, #5
	bne	.L20570
	b	.L20574
.L20592:
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	mov	fp, r0
	ldrb	r0, [r4, #2]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, fp, lsl #4
	strb	r0, [r5, #1]!
	cmp	r9, r5
	beq	.L20573
.L20572:
	mov	r4, r6
.L20570:
	ldrb	r3, [r4]	@ zero_extendqisi2
	add	r6, r4, #3
	cmp	r3, #58
	cmpne	r3, #46
	mov	r0, r3
	beq	.L20592
	bl	hex_to_bin
	mov	r6, r0
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, r6, lsl #4
	add	r6, r4, #2
	strb	r0, [r5, #1]!
	cmp	r9, r5
	bne	.L20572
.L20573:
	ldrb	r3, [r8]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L20593
.L20574:
	mov	r0, r8
	mov	r1, #6
	bl	get_random_bytes
	ldrb	r3, [r8]	@ zero_extendqisi2
	ldr	r0, .L20598
	bic	r3, r3, #1
	orr	r3, r3, #2
	strb	r3, [r8]
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20594
.L20575:
	ldr	r4, [r10, #4072]
	cmp	r4, #0
	subne	r5, r7, #1
	addne	r8, r7, #5
	bne	.L20579
	b	.L20583
.L20595:
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	mov	r9, r0
	ldrb	r0, [r4, #2]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, r9, lsl #4
	strb	r0, [r5, #1]!
	cmp	r5, r8
	beq	.L20582
.L20581:
	mov	r4, r6
.L20579:
	ldrb	r3, [r4]	@ zero_extendqisi2
	add	r6, r4, #3
	cmp	r3, #58
	cmpne	r3, #46
	mov	r0, r3
	beq	.L20595
	bl	hex_to_bin
	mov	r6, r0
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, r6, lsl #4
	add	r6, r4, #2
	strb	r0, [r5, #1]!
	cmp	r8, r5
	bne	.L20581
.L20582:
	ldrb	r3, [r7]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L20596
.L20583:
	mov	r0, r7
	mov	r1, #6
	bl	get_random_bytes
	ldrb	r3, [r7]	@ zero_extendqisi2
	ldr	r0, .L20598+4
	bic	r3, r3, #1
	orr	r3, r3, #2
	strb	r3, [r7]
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20597
.L20566:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L20593:
	ldrb	r1, [r8, #1]	@ zero_extendqisi2
	ldrb	r2, [r8, #2]	@ zero_extendqisi2
	ldrb	r0, [r8, #3]	@ zero_extendqisi2
	orr	r3, r3, r1
	ldrb	r1, [r8, #4]	@ zero_extendqisi2
	orr	r3, r3, r2
	ldrb	r2, [r8, #5]	@ zero_extendqisi2
	orr	r3, r3, r0
	orr	r3, r3, r1
	orrs	r3, r3, r2
	beq	.L20574
	b	.L20575
.L20596:
	ldrb	r2, [r7, #1]	@ zero_extendqisi2
	ldrb	ip, [r7, #2]	@ zero_extendqisi2
	ldrb	r0, [r7, #3]	@ zero_extendqisi2
	ldrb	r1, [r7, #4]	@ zero_extendqisi2
	orr	r3, r3, r2
	ldrb	r2, [r7, #5]	@ zero_extendqisi2
	orr	r3, r3, ip
	orr	r3, r3, r0
	orr	r3, r3, r1
	orrs	r3, r3, r2
	beq	.L20583
	b	.L20566
.L20597:
	ldr	r2, .L20598+8
	movw	r1, #:lower16:.LC1406
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC1406
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	__dynamic_pr_debug
.L20594:
	movw	r1, #:lower16:.LC1405
	ldr	r2, .L20598+8
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC1405
	bl	__dynamic_pr_debug
	b	.L20575
.L20599:
	.align	2
.L20598:
	.word	.LANCHOR8-1012
	.word	.LANCHOR8-988
	.word	.LANCHOR5+2892
	.fnend
	.size	gether_qc_get_macs, .-gether_qc_get_macs
	.align	2
	.global	gether_qc_setup_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_setup_name, %function
gether_qc_setup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r2
	mov	r2, #1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	strd	r0, [sp, #8]
	mov	r0, #28
	mov	r1, r2
	bl	alloc_etherdev_mqs
	subs	r5, r0, #0
	beq	.L20619
	mov	r1, #0
	movw	r2, #:lower16:.LC1185
	movw	fp, #:lower16:.LANCHOR1
	mov	r3, r4
	str	r1, [r5, #1152]
	movt	r2, #:upper16:.LC1185
	movt	fp, #:upper16:.LANCHOR1
	str	r5, [r5, #1160]
	mov	r1, #16
	bl	snprintf
	ldr	r4, [fp, #4068]
	add	r3, r6, #32
	ldr	r6, [r5, #484]
	str	r3, [sp, #4]
	cmp	r4, #0
	subne	r9, r6, #1
	addne	r10, r6, #5
	bne	.L20604
	b	.L20608
.L20633:
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	mov	r7, r0
	ldrb	r0, [r4, #2]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, r7, lsl #4
	strb	r0, [r9, #1]!
	cmp	r10, r9
	beq	.L20607
.L20606:
	mov	r4, r8
.L20604:
	ldrb	r3, [r4]	@ zero_extendqisi2
	add	r8, r4, #3
	cmp	r3, #58
	cmpne	r3, #46
	mov	r0, r3
	beq	.L20633
	bl	hex_to_bin
	mov	r8, r0
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, r8, lsl #4
	add	r8, r4, #2
	strb	r0, [r9, #1]!
	cmp	r10, r9
	bne	.L20606
.L20607:
	ldrb	r3, [r6]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L20634
.L20608:
	mov	r1, #6
	mov	r0, r6
	bl	get_random_bytes
	ldrb	r3, [r6]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC1186
	movw	r1, #:lower16:.LC1187
	movt	r2, #:upper16:.LC1186
	movt	r1, #:upper16:.LC1187
	ldr	r0, [sp, #4]
	bic	r3, r3, #1
	orr	r3, r3, #2
	strb	r3, [r6]
	bl	dev_warn
.L20603:
	ldr	r4, [fp, #4072]
	add	r6, r5, #1152
	add	r7, r6, #21
	cmp	r4, #0
	addne	fp, r5, #1168
	addne	r6, r6, #26
	addne	fp, fp, #4
	bne	.L20611
	b	.L20615
.L20635:
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	mov	r10, r0
	ldrb	r0, [r4, #2]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, r10, lsl #4
	strb	r0, [fp, #1]!
	cmp	fp, r6
	beq	.L20614
.L20613:
	mov	r4, r9
.L20611:
	ldrb	r3, [r4]	@ zero_extendqisi2
	add	r9, r4, #3
	cmp	r3, #58
	cmpne	r3, #46
	mov	r0, r3
	beq	.L20635
	bl	hex_to_bin
	mov	r9, r0
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	orr	r0, r0, r9, lsl #4
	add	r9, r4, #2
	strb	r0, [fp, #1]!
	cmp	r6, fp
	bne	.L20613
.L20614:
	ldrb	r3, [r5, #1173]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L20636
.L20615:
	mov	r1, #6
	mov	r0, r7
	bl	get_random_bytes
	ldrb	r3, [r5, #1173]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC1454
	movw	r1, #:lower16:.LC1187
	movt	r2, #:upper16:.LC1454
	movt	r1, #:upper16:.LC1187
	ldr	r0, [sp, #4]
	bic	r3, r3, #1
	orr	r3, r3, #2
	strb	r3, [r5, #1173]
	bl	dev_warn
.L20610:
	ldr	r2, [sp, #12]
	cmp	r2, #0
	beq	.L20616
	ldr	r3, [r7]	@ unaligned
	str	r3, [r2]	@ unaligned
	ldrh	r3, [r7, #4]	@ unaligned
	strh	r3, [r2, #4]	@ unaligned
.L20616:
	ldr	r3, .L20638
	mov	r0, r5
	add	r2, r3, #136
	str	r3, [r5, #328]
	str	r2, [r5, #332]
	bl	netif_carrier_off
	ldr	r2, [sp, #4]
	mov	r0, r5
	ldr	r3, .L20638+4
	str	r2, [r5, #688]
	ldr	r2, [sp, #8]
	str	r3, [r5, #736]
	str	r2, [r5, #1164]
	bl	register_netdev
	subs	r4, r0, #0
	bge	.L20617
	ldr	r0, .L20638+8
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20637
.L20618:
	mov	r0, r5
	bl	free_netdev
.L20600:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L20634:
	ldrb	r1, [r6, #1]	@ zero_extendqisi2
	ldrb	r2, [r6, #2]	@ zero_extendqisi2
	ldrb	r0, [r6, #3]	@ zero_extendqisi2
	orr	r3, r3, r1
	ldrb	r1, [r6, #4]	@ zero_extendqisi2
	orr	r3, r3, r2
	ldrb	r2, [r6, #5]	@ zero_extendqisi2
	orr	r3, r3, r0
	orr	r3, r3, r1
	orrs	r3, r3, r2
	beq	.L20608
	b	.L20603
.L20636:
	ldrb	r1, [r5, #1174]	@ zero_extendqisi2
	ldrb	r2, [r5, #1175]	@ zero_extendqisi2
	ldrb	r0, [r5, #1176]	@ zero_extendqisi2
	orr	r3, r3, r1
	ldrb	r1, [r5, #1177]	@ zero_extendqisi2
	orr	r3, r3, r2
	ldrb	r2, [r5, #1178]	@ zero_extendqisi2
	orr	r3, r3, r0
	orr	r3, r3, r1
	orrs	r3, r3, r2
	beq	.L20615
	b	.L20610
.L20637:
	movw	r2, #:lower16:.LC1189
	mov	r3, r4
	ldr	r1, [sp, #4]
	movt	r2, #:upper16:.LC1189
	sub	r0, r0, #20
	bl	__dynamic_dev_dbg
	b	.L20618
.L20619:
	mvn	r4, #11
	b	.L20600
.L20617:
	movw	r0, #:lower16:.LC1190
	ldr	r2, [r5, #484]
	ldr	r1, [r5, #1160]
	movt	r0, #:upper16:.LC1190
	bl	printk
	movw	r0, #:lower16:.LC1191
	mov	r2, r7
	ldr	r1, [r5, #1160]
	movt	r0, #:upper16:.LC1191
	bl	printk
	b	.L20600
.L20639:
	.align	2
.L20638:
	.word	.LANCHOR5+3132
	.word	.LANCHOR7-788
	.word	.LANCHOR8-556
	.fnend
	.size	gether_qc_setup_name, .-gether_qc_setup_name
	.align	2
	.global	gether_qc_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_setup, %function
gether_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r2, #:lower16:.LC1434
	movt	r2, #:upper16:.LC1434
	b	gether_qc_setup_name
	.fnend
	.size	gether_qc_setup, .-gether_qc_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_function_bind_config, %function
rndis_qc_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:__stack_chk_guard
	strd	r8, [sp, #16]
	movt	r7, #:upper16:__stack_chk_guard
	strd	r10, [sp, #24]
	ldr	r3, [r7]
	str	lr, [sp, #32]
	ldr	r4, [r0, #4]
	.pad #52
	sub	sp, sp, #52
	str	r3, [sp, #44]
	cmp	r4, #0
	beq	.L20678
	mov	r8, r1
	ldrb	r1, [r4, #5]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1183
	ldrb	r3, [r4]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC1183
	ldr	r2, .L20686
	str	r1, [sp, #16]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	mov	r1, r2
	str	ip, [sp, #12]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldr	r3, [r8, #24]
	movw	r2, #:lower16:.LC1184
	mov	r1, r4
	movt	r2, #:upper16:.LC1184
	ldr	r0, [r3]
	bl	gether_qc_setup_name
	subs	fp, r0, #0
	bne	.L20679
	ldrb	r3, [r4, #269]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L20645
	movw	r3, #:lower16:.LANCHOR7
	mvn	r2, #31
	movt	r3, #:upper16:.LANCHOR7
	mov	ip, #1
	sub	r1, r3, #2480
	mov	r0, #480
	strb	r2, [r3, #-2467]
	mov	r2, #3
	strh	r0, [r1, #4]	@ movhi
	strb	r2, [r3, #-2474]
	strb	ip, [r3, #-2466]
	strb	r2, [r3, #-2465]
.L20645:
	movw	r6, #:lower16:.LANCHOR1
	ldrb	r9, [r4, #12]	@ zero_extendqisi2
	movt	r6, #:upper16:.LANCHOR1
	ldr	r10, [r4, #8]
	ldrb	r3, [r6, #3740]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L20680
.L20656:
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #2394
	movt	r5, #:upper16:.LANCHOR4
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L20681
.L20646:
	ldr	r3, [r6, #3744]
	cmp	r3, #0
	beq	.L20647
	movw	r3, #2418
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L20682
.L20649:
	movw	r3, #:lower16:.LANCHOR7
	movt	r3, #:upper16:.LANCHOR7
	ldrb	r2, [r3, #-828]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L20650
	ldr	r1, [r8, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L20652
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r8, #24]
	strb	r2, [r3, #-2464]
	strb	r2, [r3, #-828]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L20652
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r8, #24]
	strb	r2, [r3, #-2444]
	strb	r2, [r3, #-820]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L20652
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	strb	r2, [r3, #-2473]
	strb	r2, [r3, #-812]
.L20650:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L20659
	mov	r2, #184
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L20683
.L20653:
	ldr	r1, [r4]	@ unaligned
	movw	r2, #:lower16:rndis_qc_add_header
	movw	ip, #:lower16:.LC1184
	ldr	r3, .L20686+4
	movt	r2, #:upper16:rndis_qc_add_header
	movt	ip, #:upper16:.LC1184
	cmp	r9, #0
	add	r4, r4, #13
	moveq	r9, #15
	mov	r0, r8
	str	r1, [r5, #122]	@ unaligned
	ldrh	lr, [r4, #-9]	@ unaligned
	movw	r1, #:lower16:rndis_qc_bind
	movt	r1, #:upper16:rndis_qc_bind
	str	ip, [r5]
	movw	ip, #:lower16:rndis_qc_set_alt
	str	r3, [r5, #4]
	movw	r3, #:lower16:rndis_qc_rm_hdr
	movt	ip, #:upper16:rndis_qc_set_alt
	str	r2, [r5, #104]
	movt	r3, #:upper16:rndis_qc_rm_hdr
	movw	r2, #:lower16:rndis_qc_unbind
	movt	r2, #:upper16:rndis_qc_unbind
	str	r1, [r5, #32]
	movw	r1, #:lower16:rndis_qc_disable
	movt	r1, #:upper16:rndis_qc_disable
	str	r3, [r5, #108]
	movw	r3, #:lower16:rndis_qc_setup
	str	r2, [r5, #36]
	movt	r3, #:upper16:rndis_qc_setup
	movw	r2, #:lower16:rndis_qc_suspend
	movt	r2, #:upper16:rndis_qc_suspend
	str	ip, [r5, #40]
	str	r1, [r5, #48]
	mov	r1, #0
	str	r3, [r5, #52]
	movw	r3, #:lower16:rndis_qc_resume
	str	r2, [r5, #56]
	movt	r3, #:upper16:rndis_qc_resume
	mov	r2, #44
	str	r3, [r5, #60]
	strh	r1, [r5, #98]	@ movhi
	mov	r1, r5
	str	r2, [r5, #100]
	strh	lr, [r5, #126]	@ unaligned
	str	r10, [r5, #128]
	strb	r9, [r5, #132]
	str	r4, [r5, #140]
	bl	usb_add_function
	subs	fp, r0, #0
	streq	r5, [r6, #2496]
	beq	.L20641
.L20654:
	mov	r0, r5
	mov	r4, #0
	bl	kfree
	ldrb	r3, [r6, #3740]	@ zero_extendqisi2
	str	r4, [r6, #2496]
	cmp	r3, r4
	bne	.L20684
.L20641:
	ldr	r2, [sp, #44]
	mov	r0, fp
	ldr	r3, [r7]
	cmp	r2, r3
	bne	.L20685
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L20680:
	bl	rndis_init.part.90
	subs	fp, r0, #0
	bge	.L20656
	b	.L20641
.L20659:
	mov	r5, #16
	b	.L20653
.L20684:
	movw	r1, #:lower16:.LC601
	mov	r2, r4
	strb	r4, [r6, #3740]
	movt	r1, #:upper16:.LC601
	add	r0, sp, #24
	bl	sprintf
	add	r0, sp, #24
	mov	r1, r4
	bl	remove_proc_entry
	b	.L20641
.L20683:
	mvn	fp, #11
	b	.L20654
.L20647:
	bl	bam_data_setup.part.92
	subs	fp, r0, #0
	beq	.L20649
	movw	r0, #:lower16:.LC1033
	mov	r2, fp
	ldr	r1, .L20686+8
	movt	r0, #:upper16:.LC1033
	bl	printk
	movw	r0, #:lower16:.LC1034
	ldr	r1, .L20686+12
	movt	r0, #:upper16:.LC1034
	bl	printk
	b	.L20641
.L20681:
	movw	r1, #:lower16:.LC1030
	mov	r3, #1
	ldr	r2, .L20686+16
	movt	r1, #:upper16:.LC1030
	ldr	r0, .L20686+20
	bl	__dynamic_pr_debug
	b	.L20646
.L20682:
	movw	r1, #:lower16:.LC1032
	ldr	r2, .L20686+16
	movt	r1, #:upper16:.LC1032
	ldr	r0, .L20686+24
	bl	__dynamic_pr_debug
	b	.L20649
.L20652:
	mvn	fp, #18
	b	.L20641
.L20678:
	ldr	r2, .L20686
	movw	r0, #:lower16:.LC1182
	mvn	fp, #21
	movt	r0, #:upper16:.LC1182
	mov	r1, r2
	bl	printk
	b	.L20641
.L20679:
	ldr	r2, .L20686
	movw	r0, #:lower16:.LC1192
	movt	r0, #:upper16:.LC1192
	mov	r1, r2
	bl	printk
	b	.L20641
.L20685:
	bl	__stack_chk_fail
.L20687:
	.align	2
.L20686:
	.word	.LANCHOR5+3432
	.word	.LANCHOR7-796
	.word	.LANCHOR5+3028
	.word	.LANCHOR5+3048
	.word	.LANCHOR5-3432
	.word	.LANCHOR4+2376
	.word	.LANCHOR4+2400
	.fnend
	.size	rndis_qc_function_bind_config, .-rndis_qc_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_function_bind_config, %function
ecm_qc_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r4, [r0, #4]
	.pad #12
	sub	sp, sp, #12
	cmp	r4, #0
	beq	.L20703
	ldr	r0, .L20706
	mov	r6, r1
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20704
.L20691:
	ldr	r0, .L20706+4
	bl	strim
	mov	r1, r0
	mov	r5, r0
	movw	r0, #:lower16:.LC588
	movt	r0, #:upper16:.LC588
	bl	strcmp
	cmp	r0, #0
	beq	.L20692
	ldr	r3, [r6, #24]
	movw	r2, #:lower16:.LC1436
	mov	r1, r4
	movt	r2, #:upper16:.LC1436
	ldr	r0, [r3]
	bl	gether_qc_setup_name
	subs	r7, r0, #0
	bne	.L20705
.L20692:
	mov	r2, r5
	mov	r1, r4
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	ecm_qc_bind_config
.L20704:
	ldr	r2, .L20706+4
	movw	r1, #:lower16:.LC1455
	sub	r0, r0, #20
	ldr	r3, .L20706+8
	movt	r1, #:upper16:.LC1455
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L20691
.L20705:
	ldr	r2, .L20706+8
	movw	r0, #:lower16:.LC1192
	movt	r0, #:upper16:.LC1192
	mov	r1, r2
	bl	printk
.L20688:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L20703:
	ldr	r2, .L20706+8
	movw	r0, #:lower16:.LC1435
	mvn	r7, #21
	movt	r0, #:upper16:.LC1435
	mov	r1, r2
	bl	printk
	b	.L20688
.L20707:
	.align	2
.L20706:
	.word	.LANCHOR8-532
	.word	.LANCHOR1+3020
	.word	.LANCHOR5+3464
	.fnend
	.size	ecm_qc_function_bind_config, .-ecm_qc_function_bind_config
	.align	2
	.global	gether_qc_cleanup_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_cleanup_name, %function
gether_qc_cleanup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, r0
	movw	r0, #:lower16:init_net
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r0, #:upper16:init_net
	str	lr, [sp, #4]
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L20708
	.syntax divided
@ 17 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		mrs	ip, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	movw	r2, #:lower16:__per_cpu_offset
	bic	r1, r3, #8128
	movt	r2, #:upper16:__per_cpu_offset
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
	ldr	r1, [r2, r1, lsl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, ip	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	bl	unregister_netdev
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	free_netdev
.L20708:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gether_qc_cleanup_name, .-gether_qc_cleanup_name
	.align	2
	.global	gether_qc_connect_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_connect_name, %function
gether_qc_connect_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	movw	r0, #:lower16:init_net
	movt	r0, #:upper16:init_net
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L20714
	.syntax divided
@ 17 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		mrs	r0, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	movw	r2, #:lower16:__per_cpu_offset
	bic	r1, r3, #8128
	movt	r2, #:upper16:__per_cpu_offset
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
	ldr	r1, [r2, r1, lsl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r0	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	adds	r7, r4, #1152
	beq	.L20714
	ldrb	r3, [r5, #96]	@ zero_extendqisi2
	mov	r0, r7
	strb	r3, [r4, #1172]
	ldr	r3, [r5, #100]
	str	r3, [r4, #1168]
	bl	_raw_spin_lock
	str	r5, [r4, #1156]
	str	r7, [r5, #84]
	ldr	r3, [r4, #1160]
	ldr	r3, [r3, #164]
	tst	r3, #1
	beq	.L20715
	ldr	r3, [r5, #112]
	cmp	r3, #0
	beq	.L20716
.L20733:
	mov	r0, r5
	blx	r3
.L20716:
	mov	r0, r7
	bl	_raw_spin_unlock
	cmp	r6, #0
	ldr	r0, [r4, #1160]
	beq	.L20711
	bl	netif_carrier_on
	ldr	r0, [r4, #1160]
	ldr	r3, [r0, #164]
	tst	r3, #1
	beq	.L20711
	ldr	r5, [r0, #576]
	mov	r0, #0
	add	r1, r5, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	bne	.L20719
.L20734:
	ldr	r0, [r4, #1160]
	b	.L20711
.L20714:
	mvn	r0, #21
.L20711:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L20715:
	ldr	r3, [r5, #116]
	cmp	r3, #0
	bne	.L20733
	b	.L20716
.L20719:
	ldr	r0, [r5, #4]
	bl	__netif_schedule
	b	.L20734
	.fnend
	.size	gether_qc_connect_name, .-gether_qc_connect_name
	.align	2
	.global	gether_qc_disconnect_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_disconnect_name, %function
gether_qc_disconnect_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movw	r0, #:lower16:init_net
	movt	r0, #:upper16:init_net
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L20735
	.syntax divided
@ 17 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		mrs	r0, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	movw	r2, #:lower16:__per_cpu_offset
	bic	r1, r3, #8128
	movt	r2, #:upper16:__per_cpu_offset
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
	ldr	r1, [r2, r1, lsl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r0	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	adds	r6, r4, #1152
	beq	.L20735
	ldr	r3, [r4, #1160]
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L20745
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
.L20740:
	ldr	r0, [r4, #1160]
	bl	netif_carrier_off
	mov	r0, r6
	bl	_raw_spin_lock
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #1156]
	str	r3, [r5, #84]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L20735:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L20745:
	movw	r0, #:lower16:.LC109
	movw	r1, #1847
	movt	r0, #:upper16:.LC109
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC110
	movt	r0, #:upper16:.LC110
	bl	printk
	b	.L20740
	.fnend
	.size	gether_qc_disconnect_name, .-gether_qc_disconnect_name
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_disable, %function
ecm_qc_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L20794
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L20787
.L20747:
	ldr	r3, [r4, #88]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L20749
	ldr	r0, .L20794+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20788
.L20750:
	ldr	r0, .L20794+8
	add	r6, r4, #156
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L20789
.L20751:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r3, [r5, #3748]
	cmp	r3, #0
	ble	.L20790
	cmp	r6, #0
	beq	.L20791
	ldr	r6, [r5, #3752]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L20755
	ldr	r2, [r3, #8]
	cmp	r2, #0
	beq	.L20755
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L20755
	ldr	r0, [r3, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r6, #4]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r6, #4]
	mov	r3, #0
	ldr	r2, [r2, #8]
	str	r3, [r2]
	ldr	r2, [r6, #4]
	ldr	r2, [r2, #12]
	str	r3, [r2]
	str	r3, [r6, #4]
.L20755:
	ldr	r3, [r6, #60]
	cmp	r3, #7
	beq	.L20792
	mov	r0, #0
	bl	usb_bam_client_ready
	cmp	r0, #0
	bne	.L20793
.L20753:
	ldr	r3, [r4, #124]
	cmp	r3, #7
	beq	.L20749
	movw	r1, #:lower16:.LC837
	mov	r0, r4
	movt	r1, #:upper16:.LC837
	bl	gether_qc_disconnect_name
.L20749:
	ldr	r0, [r4, #144]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L20746
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #144]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #144]
	str	r3, [r2, #28]
.L20746:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L20792:
	add	r2, r6, #184
	ldr	r1, [r5, #3744]
	mov	r0, #4
	bl	queue_work_on
	b	.L20753
.L20788:
	movw	r1, #:lower16:.LC1456
	ldr	r2, .L20794+12
	mov	r3, r4
	movt	r1, #:upper16:.LC1456
	sub	r0, r0, #20
	bl	__dynamic_pr_debug
	b	.L20750
.L20789:
	mov	r3, #0
	movw	r1, #:lower16:.LC157
	ldr	r2, .L20794+16
	movt	r1, #:upper16:.LC157
	sub	r0, r0, #24
	str	r3, [sp]
	mov	r3, r6
	bl	__dynamic_pr_debug
	b	.L20751
.L20787:
	ldr	r1, [r4, #20]
	sub	r0, r3, #20
	movw	r2, #:lower16:.LC1443
	movt	r2, #:upper16:.LC1443
	ldr	r3, [r1, #24]
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20747
.L20791:
	movw	r0, #:lower16:.LC621
	ldr	r1, .L20794+16
	movt	r0, #:upper16:.LC621
	bl	printk
	b	.L20753
.L20790:
	movw	r0, #:lower16:.LC620
	mov	r2, #0
	ldr	r1, .L20794+16
	movt	r0, #:upper16:.LC620
	bl	printk
	b	.L20753
.L20793:
	ldr	r2, .L20794+16
	movw	r0, #:lower16:.LC622
	movt	r0, #:upper16:.LC622
	mov	r1, r2
	bl	printk
	b	.L20753
.L20795:
	.align	2
.L20794:
	.word	.LANCHOR8-508
	.word	.LANCHOR8-484
	.word	.LANCHOR4-2352
	.word	.LANCHOR5+3492
	.word	.LANCHOR5-3248
	.fnend
	.size	ecm_qc_disable, .-ecm_qc_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_set_alt, %function
ecm_qc_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	mov	r5, r2
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r0, [r0, #120]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r4, #20]
	cmp	r0, r1
	ldr	r6, [r3, #24]
	beq	.L20879
	ldrb	r3, [r4, #121]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r3, r1
	bne	.L20878
	ldr	r2, [r4, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L20803
	ldr	r0, .L20894
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20880
.L20804:
	ldr	r0, .L20894+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20881
.L20805:
	add	r0, r4, #156
	bl	bam_data_disconnect.constprop.113
	ldr	r3, [r4, #124]
	cmp	r3, #7
	beq	.L20876
	movw	r1, #:lower16:.LC837
	mov	r0, r4
	movt	r1, #:upper16:.LC837
	bl	gether_qc_disconnect_name
.L20876:
	ldr	r2, [r4, #88]
.L20803:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L20807
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L20807
.L20808:
	cmp	r5, #1
	bne	.L20877
	ldr	r3, [r6]
	movw	r0, #:lower16:.LC480
	movt	r0, #:upper16:.LC480
	ldr	r1, [r3, #28]
	bl	strcmp
	ldr	r3, .L20894+8
	mov	r2, #15
	adds	r0, r0, #0
	movne	r0, #1
	strh	r2, [r4, #98]	@ movhi
	ldrh	r2, [r3, #-2]
	strb	r0, [r4, #96]
	tst	r2, #4
	bne	.L20882
.L20814:
	ldr	r3, [r4, #124]
	cmp	r3, #7
	beq	.L20815
	movw	r1, #:lower16:.LC837
	mov	r2, #1
	movt	r1, #:upper16:.LC837
	mov	r0, r4
	bl	gether_qc_connect_name
	cmn	r0, #4096
	bhi	.L20796
	ldr	r2, [r4, #20]
	ldr	r3, [r4, #124]
	ldr	r2, [r2, #24]
	cmp	r3, #7
	movne	r6, #0
	moveq	r6, #2
	ldr	r5, [r2]
.L20817:
	ldr	ip, [r4, #88]
	mov	r3, #0
	str	r2, [r4, #156]
	ldr	r0, [r4, #92]
	mov	r2, r3
	mov	r1, r6
	str	r4, [r4, #160]
	add	r7, r4, #156
	str	ip, [r4, #164]
	str	r0, [r4, #168]
	ldr	r0, [r5, #28]
	bl	usb_bam_get_connection_idx
	uxtb	r10, r0
	mov	r3, #0
	ldr	r0, [r5, #28]
	mov	r2, #1
	mov	r1, r6
	bl	usb_bam_get_connection_idx
	ldr	r3, .L20894+12
	uxtb	r9, r0
	ldr	r8, [r4, #124]
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L20883
.L20818:
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r3, [r6, #3748]
	cmp	r3, #0
	ble	.L20884
	cmp	r7, #0
	beq	.L20885
	ldr	r3, [r4, #164]
	ldr	r5, [r6, #3752]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	fp, r0, #0
	bne	.L20886
	ldr	r3, [r4, #164]
	str	r5, [r3]
	ldr	r3, [r4, #168]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	fp, r0, #0
	bne	.L20887
	ldr	r3, [r4, #168]
	cmp	r8, #7
	str	r5, [r3]
	str	r7, [r5, #4]
	strb	r10, [r5, #52]
	strb	r9, [r5, #53]
	str	fp, [r5, #56]
	str	r8, [r5, #60]
	bne	.L20824
	add	r2, r5, #44
	add	r3, r5, #48
	strb	r10, [r5, #64]
	strb	r9, [r5, #65]
	strd	r2, [r5, #68]
.L20824:
	add	r2, r5, #168
	mov	r0, #4
	ldr	r1, [r6, #3744]
	bl	queue_work_on
	ldr	r0, .L20894+16
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20888
.L20826:
	mov	r3, #1
	ldr	r2, [r4, #20]
	ldr	r5, [r4, #148]
	strb	r3, [r4, #152]
	strb	r3, [r4, #153]
	cmp	r5, #0
	beq	.L20835
	ldr	r6, [r5]
	mov	r3, #0
	mov	r1, #8
	ldr	r8, [r2, #24]
	movw	r7, #:lower16:.LANCHOR4
	movw	r2, #2514
	movt	r7, #:upper16:.LANCHOR4
	strb	r3, [r6, #1]
	ldrb	r0, [r4, #153]	@ zero_extendqisi2
	strh	r0, [r6, #2]	@ unaligned
	strb	r3, [r6, #6]
	strb	r3, [r6, #7]
	str	r1, [r5, #4]
	ldrh	r3, [r7, r2]
	tst	r3, #4
	bne	.L20889
.L20828:
	mov	r1, #2
	mvn	r0, #94
	mov	r3, #0
	mov	r2, #32
	strb	r1, [r4, #152]
	mov	r1, r5
	strb	r0, [r6]
	ldrb	r0, [r4, #120]	@ zero_extendqisi2
	strh	r0, [r6, #4]	@ unaligned
	ldr	r0, [r4, #144]
	str	r3, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L20830
.L20877:
	mov	r3, #1
	ldr	r2, [r4, #20]
	ldr	r5, [r4, #148]
	strb	r3, [r4, #152]
	cmp	r5, #0
	beq	.L20835
	movw	r7, #:lower16:.LANCHOR4
	movt	r7, #:upper16:.LANCHOR4
.L20832:
	ldr	r8, [r5]
	mov	r3, #0
	mov	r1, #8
	ldr	r9, [r2, #24]
	movw	r2, #2514
	strb	r3, [r8, #1]
	ldrb	r0, [r4, #153]	@ zero_extendqisi2
	strh	r0, [r8, #2]	@ unaligned
	strb	r3, [r8, #6]
	strb	r3, [r8, #7]
	str	r1, [r5, #4]
	ldrh	r3, [r7, r2]
	tst	r3, #4
	bne	.L20890
.L20833:
	mov	r1, #2
	mvn	r3, #94
	mov	r6, #0
	mov	r2, #32
	strb	r1, [r4, #152]
	mov	r1, r5
	strb	r3, [r8]
	ldrb	r3, [r4, #120]	@ zero_extendqisi2
	strh	r3, [r8, #4]	@ unaligned
	ldr	r0, [r4, #144]
	str	r6, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L20891
.L20835:
	mov	r0, #0
.L20796:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L20807:
	ldr	r3, .L20894+20
	ldr	r0, [r6]
	ldrh	r1, [r3, #-2]
	tst	r1, #4
	bne	.L20892
.L20809:
	mov	r1, r4
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L20811
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L20808
.L20811:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L20796
.L20879:
	cmp	r2, #0
	bne	.L20878
	ldr	r0, [r4, #144]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L20800
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #144]
.L20800:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L20893
.L20801:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #144]
	mov	r0, #0
	str	r4, [r3]
	b	.L20796
.L20891:
	movw	r3, #2538
	str	r5, [r4, #148]
	ldrh	r3, [r7, r3]
	tst	r3, #4
	beq	.L20835
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC25
	mov	r3, r0
	movt	r2, #:upper16:.LC25
	ldr	r0, .L20894+24
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	mov	r0, r6
	b	.L20796
.L20886:
	movw	r0, #:lower16:.LC926
	ldr	r1, .L20894+28
	movt	r0, #:upper16:.LC926
	ldr	r2, [r4, #164]
	bl	printk
.L20820:
	movw	r0, #:lower16:.LC1457
	mov	r2, fp
	ldr	r1, .L20894+32
	movt	r0, #:upper16:.LC1457
	bl	printk
.L20878:
	mvn	r0, #21
	b	.L20796
.L20815:
	ldr	r3, [r4, #20]
	mov	r6, #2
	ldr	r2, [r3, #24]
	ldr	r5, [r2]
	b	.L20817
.L20830:
	movw	r3, #2538
	str	r5, [r4, #148]
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L20831
	mov	r3, #1
	ldr	r2, [r4, #20]
	strb	r3, [r4, #152]
	b	.L20832
.L20880:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC1444
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1444
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20804
.L20881:
	movw	r1, #:lower16:.LC1456
	ldr	r2, .L20894+36
	mov	r3, r4
	movt	r1, #:upper16:.LC1456
	sub	r0, r0, #20
	bl	__dynamic_pr_debug
	b	.L20805
.L20892:
	movw	r2, #:lower16:.LC1445
	add	r1, r0, #32
	movt	r2, #:upper16:.LC1445
	sub	r0, r3, #20
	bl	__dynamic_dev_dbg
	ldr	r2, [r4, #88]
	ldr	r0, [r6]
	b	.L20809
.L20882:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC1446
	sub	r0, r3, #20
	movt	r2, #:upper16:.LC1446
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20814
.L20883:
	mov	ip, #0
	movw	r1, #:lower16:.LC157
	ldr	r2, .L20894+28
	sub	r0, r3, #20
	movt	r1, #:upper16:.LC157
	mov	r3, r7
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L20818
.L20888:
	movw	r1, #:lower16:.LC1458
	ldr	r2, .L20894+32
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC1458
	bl	__dynamic_pr_debug
	b	.L20826
.L20893:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L20878
	ldr	r0, [r4, #144]
	ldr	r1, [r0, #28]
	b	.L20801
.L20890:
	ldrb	lr, [r4, #153]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC20
	movw	r3, #:lower16:.LC21
	ldr	r1, [r9]
	movt	ip, #:upper16:.LC20
	movw	r2, #:lower16:.LC23
	movt	r3, #:upper16:.LC21
	movt	r2, #:upper16:.LC23
	ldr	r0, .L20894+40
	cmp	lr, #0
	movne	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20833
.L20889:
	ldrb	lr, [r4, #153]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC20
	movw	r3, #:lower16:.LC21
	ldr	r1, [r8]
	movt	ip, #:upper16:.LC20
	movw	r2, #:lower16:.LC23
	movt	r3, #:upper16:.LC21
	add	r0, r7, #2496
	movt	r2, #:upper16:.LC23
	cmp	lr, #0
	movne	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20828
.L20831:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC25
	mov	r3, r0
	movt	r2, #:upper16:.LC25
	ldr	r0, .L20894+24
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20877
.L20885:
	movw	r0, #:lower16:.LC621
	ldr	r1, .L20894+28
	movt	r0, #:upper16:.LC621
	bl	printk
	movw	r0, #:lower16:.LC1457
	mvn	r2, #18
	ldr	r1, .L20894+32
	movt	r0, #:upper16:.LC1457
	bl	printk
	mvn	r0, #21
	b	.L20796
.L20884:
	movw	r0, #:lower16:.LC173
	mov	r2, #0
	ldr	r1, .L20894+28
	movt	r0, #:upper16:.LC173
	mvn	fp, #18
	bl	printk
	b	.L20820
.L20887:
	movw	r0, #:lower16:.LC927
	ldr	r2, [r4, #168]
	movt	r0, #:upper16:.LC927
	ldr	r1, .L20894+28
	bl	printk
	ldr	r3, [r4, #164]
	mov	r2, #0
	str	r2, [r3]
	b	.L20820
.L20895:
	.align	2
.L20894:
	.word	.LANCHOR8-460
	.word	.LANCHOR8-484
	.word	.LANCHOR8-412
	.word	.LANCHOR8-916
	.word	.LANCHOR8-388
	.word	.LANCHOR8-436
	.word	.LANCHOR4+2520
	.word	.LANCHOR5+2972
	.word	.LANCHOR5+3516
	.word	.LANCHOR5+3492
	.word	.LANCHOR4+2496
	.fnend
	.size	ecm_qc_set_alt, .-ecm_qc_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_disable, %function
rndis_qc_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #156]
	ldr	r3, [r3]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC1459
	strd	r6, [sp, #8]
	ldr	r1, .L20926
	movt	r0, #:upper16:.LC1459
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	bl	printk
	ldr	r2, [r4, #144]
	cmp	r2, #0
	ble	.L20898
.L20905:
	ldr	r0, .L20926+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20925
.L20900:
	add	r0, r4, #168
	bl	bam_data_disconnect.constprop.113
	movw	r1, #:lower16:.LC779
	mov	r0, r4
	movt	r1, #:upper16:.LC779
	bl	gether_qc_disconnect_name
	ldr	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #156]
	mov	r2, #0
	str	r2, [r3]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L20898:
	mov	r5, #60
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	mov	r1, #0
	mul	r5, r5, r2
	add	r2, r3, r5
	add	r5, r2, #3728
	add	r5, r5, #4
	str	r1, [r2, #3684]
	mov	r8, r5
.L20901:
	ldr	r3, [r8]
	cmp	r3, r5
	ldr	r2, [r3]
	beq	.L20905
	ldr	r1, [r3, #16]
	cmp	r1, #0
	beq	.L20906
	mov	r3, r2
	b	.L20907
.L20911:
	mov	r3, r1
.L20907:
	cmp	r3, r5
	ldr	r1, [r3]
	beq	.L20905
	ldr	r2, [r3, #16]
	cmp	r2, #0
	bne	.L20911
.L20906:
	ldr	r9, [r3, #8]
	mov	r2, #1
	str	r2, [r3, #16]
	cmp	r9, #0
	beq	.L20905
	ldr	r6, [r8]
	cmp	r6, r5
	ldrne	r7, [r6]
	bne	.L20904
	b	.L20901
.L20903:
	cmp	r7, r5
	mov	r6, r7
	ldr	r3, [r7]
	beq	.L20901
	mov	r7, r3
.L20904:
	cmp	r6, #0
	beq	.L20903
	ldr	r3, [r6, #8]
	cmp	r9, r3
	bne	.L20903
	mov	r0, r6
	bl	list_del
	mov	r0, r6
	bl	kfree
	b	.L20903
.L20925:
	ldr	r2, .L20926+8
	movw	r1, #:lower16:.LC1460
	mov	r3, r4
	movt	r1, #:upper16:.LC1460
	sub	r0, r0, #20
	str	r2, [sp]
	bl	__dynamic_pr_debug
	b	.L20900
.L20927:
	.align	2
.L20926:
	.word	.LANCHOR5+3536
	.word	.LANCHOR8-364
	.word	.LANCHOR5+3556
	.fnend
	.size	rndis_qc_disable, .-rndis_qc_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_set_alt, %function
rndis_qc_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r2, [r0, #120]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r8, [r3, #24]
	beq	.L20978
	ldrb	r3, [r0, #121]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L20934
	ldr	ip, [r0, #88]
	ldr	r3, [ip]
	cmp	r3, #0
	beq	.L20935
	ldr	r0, .L20990
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20979
.L20936:
	ldr	r0, .L20990+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20980
.L20937:
	add	r0, r4, #168
	bl	bam_data_disconnect.constprop.113
	movw	r1, #:lower16:.LC779
	mov	r0, r4
	movt	r1, #:upper16:.LC779
	bl	gether_qc_disconnect_name
	ldr	ip, [r4, #88]
.L20935:
	ldr	r3, [ip, #28]
	cmp	r3, #0
	beq	.L20938
	ldr	lr, [r4, #92]
	ldr	r3, [lr, #28]
	cmp	r3, #0
	beq	.L20938
.L20939:
	ldr	r2, [r4, #20]
	mov	r5, #0
	add	r7, r4, #168
	mov	r3, r5
	mov	r1, r5
	strb	r5, [r4, #96]
	strh	r5, [r4, #98]	@ movhi
	ldr	r0, [r2, #24]
	mov	r2, r5
	ldr	r6, [r0]
	str	r0, [r4, #168]
	str	r4, [r4, #172]
	str	ip, [r4, #176]
	str	lr, [r4, #180]
	ldr	r0, [r6, #28]
	bl	usb_bam_get_connection_idx
	uxtb	r10, r0
	mov	r3, r5
	ldr	r0, [r6, #28]
	mov	r2, #1
	mov	r1, r5
	bl	usb_bam_get_connection_idx
	ldr	r3, .L20990+8
	uxtb	r9, r0
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L20981
.L20943:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r3, [r5, #3748]
	cmp	r3, #0
	ble	.L20982
	cmp	r7, #0
	beq	.L20983
	ldr	r3, [r4, #176]
	ldr	r6, [r5, #3752]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	fp, r0, #0
	bne	.L20984
	ldr	r3, [r4, #176]
	str	r6, [r3]
	ldr	r3, [r4, #180]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	fp, r0, #0
	bne	.L20985
	ldr	lr, [r4, #180]
	mov	r3, #6
	mov	ip, #2
	add	r2, r6, #168
	ldr	r1, [r5, #3744]
	mov	r0, #4
	str	r6, [lr]
	str	r7, [r6, #4]
	strb	r10, [r6, #52]
	strb	r9, [r6, #53]
	str	ip, [r6, #56]
	str	r3, [r6, #60]
	bl	queue_work_on
	movw	r0, #:lower16:.LC1461
	ldr	r1, .L20990+12
	movt	r0, #:upper16:.LC1461
	bl	printk
	ldr	r0, .L20990+16
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L20986
.L20950:
	movw	r1, #:lower16:.LC779
	mov	r2, #0
	movt	r1, #:upper16:.LC779
	mov	r0, r4
	bl	gether_qc_connect_name
	cmn	r0, #4096
	mov	r6, r0
	movhi	fp, r0
	bhi	.L20928
	ldr	r0, .L20990+20
	add	r7, r4, #98
	ldrb	r4, [r4, #144]	@ zero_extendqisi2
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L20987
.L20952:
	clz	r3, r6
	cmp	r4, #0
	lsr	r3, r3, #5
	movne	r3, #1
	cmp	r3, #0
	bne	.L20928
	str	r3, [r5, #3628]
	str	r3, [r5, #3632]
	str	r7, [r5, #3704]
	str	r6, [r5, #3708]
.L20928:
	mov	r0, fp
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L20938:
	ldr	r3, .L20990+24
	ldr	r0, [r8]
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L20988
.L20940:
	mov	r2, ip
	mov	r1, r4
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L20942
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r8]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L20942
	ldr	ip, [r4, #88]
	ldr	lr, [r4, #92]
	b	.L20939
.L20978:
	ldr	r0, [r0, #156]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L20930
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #156]
.L20930:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L20989
.L20931:
	ldr	r3, [r0, #8]
	mov	fp, #0
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #156]
	str	r4, [r3]
	b	.L20928
.L20981:
	movw	r1, #:lower16:.LC157
	sub	r0, r3, #20
	ldr	r2, .L20990+28
	movt	r1, #:upper16:.LC157
	mov	r3, r7
	str	r5, [sp]
	bl	__dynamic_pr_debug
	b	.L20943
.L20986:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC1462
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1462
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20950
.L20987:
	movw	r1, #:lower16:.LC267
	ldr	r2, .L20990+32
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC267
	bl	__dynamic_pr_debug
	b	.L20952
.L20980:
	ldr	r2, .L20990+36
	movw	r1, #:lower16:.LC1460
	mov	r3, r4
	movt	r1, #:upper16:.LC1460
	sub	r0, r0, #20
	str	r2, [sp]
	bl	__dynamic_pr_debug
	b	.L20937
.L20979:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC1440
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1440
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L20936
.L20988:
	movw	r2, #:lower16:.LC1441
	add	r1, r0, #32
	movt	r2, #:upper16:.LC1441
	sub	r0, r3, #20
	bl	__dynamic_dev_dbg
	ldr	ip, [r4, #88]
	ldr	r0, [r8]
	b	.L20940
.L20934:
	mvn	fp, #21
	b	.L20928
.L20942:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	fp, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L20928
.L20989:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r8]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L20934
	ldr	r0, [r4, #156]
	ldr	r1, [r0, #28]
	b	.L20931
.L20982:
	movw	r0, #:lower16:.LC173
	mov	r2, #0
	ldr	r1, .L20990+28
	movt	r0, #:upper16:.LC173
	mvn	fp, #18
	bl	printk
.L20945:
	movw	r0, #:lower16:.LC1457
	mov	r2, fp
	ldr	r1, .L20990+12
	movt	r0, #:upper16:.LC1457
	mvn	fp, #21
	bl	printk
	b	.L20928
.L20985:
	movw	r0, #:lower16:.LC927
	ldr	r2, [r4, #180]
	movt	r0, #:upper16:.LC927
	ldr	r1, .L20990+28
	bl	printk
	ldr	r3, [r4, #176]
	mov	r2, #0
	str	r2, [r3]
	b	.L20945
.L20983:
	movw	r0, #:lower16:.LC621
	ldr	r1, .L20990+28
	mvn	fp, #21
	movt	r0, #:upper16:.LC621
	bl	printk
	movw	r0, #:lower16:.LC1457
	mvn	r2, #18
	ldr	r1, .L20990+12
	movt	r0, #:upper16:.LC1457
	bl	printk
	b	.L20928
.L20984:
	movw	r0, #:lower16:.LC926
	ldr	r1, .L20990+28
	ldr	r2, [r4, #176]
	movt	r0, #:upper16:.LC926
	bl	printk
	b	.L20945
.L20991:
	.align	2
.L20990:
	.word	.LANCHOR8-340
	.word	.LANCHOR8-364
	.word	.LANCHOR8-916
	.word	.LANCHOR5+3580
	.word	.LANCHOR8-292
	.word	.LANCHOR8-1104
	.word	.LANCHOR8-316
	.word	.LANCHOR5+2972
	.word	.LANCHOR5+2832
	.word	.LANCHOR5+3556
	.fnend
	.size	rndis_qc_set_alt, .-rndis_qc_set_alt
	.align	2
	.global	pcm_buffer_size
	.syntax unified
	.arm
	.fpu softvfp
	.type	pcm_buffer_size, %function
pcm_buffer_size:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L21002
	ldr	r3, [r0, #380]
	ldrh	r1, [r2, #-2]
	tst	r1, #4
	bne	.L21001
	mov	r0, r3
	bx	lr
.L21001:
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	sub	r0, r2, #20
	str	r6, [sp, #8]
	movw	r1, #:lower16:.LC758
	str	lr, [sp, #12]
	ldrb	ip, [r4, #388]	@ zero_extendqisi2
	.pad #24
	sub	sp, sp, #24
	ldr	r6, [r4, #384]
	movt	r1, #:upper16:.LC758
	ubfx	lr, ip, #3, #1
	ubfx	r5, ip, #2, #1
	ubfx	r2, ip, #1, #1
	and	ip, ip, #1
	stm	sp, {r6, ip}
	str	r2, [sp, #8]
	ldr	r2, .L21002+4
	str	r5, [sp, #12]
	str	lr, [sp, #16]
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #380]
	mov	r0, r3
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L21003:
	.align	2
.L21002:
	.word	.LANCHOR4-340
	.word	.LANCHOR5-2144
	.fnend
	.size	pcm_buffer_size, .-pcm_buffer_size
	.align	2
	.global	pcm_period_size
	.syntax unified
	.arm
	.fpu softvfp
	.type	pcm_period_size, %function
pcm_period_size:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #332]
	bx	lr
	.fnend
	.size	pcm_period_size, .-pcm_period_size
	.align	2
	.global	u_audio_clear
	.syntax unified
	.arm
	.fpu softvfp
	.type	u_audio_clear, %function
u_audio_clear:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	strb	r2, [r3, #2216]
	bx	lr
	.fnend
	.size	u_audio_clear, .-u_audio_clear
	.align	2
	.global	gaudio_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gaudio_setup, %function
gaudio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	subs	r4, r0, #0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	beq	.L21052
	movw	r6, #:lower16:.LANCHOR7
	mov	r2, #0
	movt	r6, #:upper16:.LANCHOR7
	mov	r1, #2
	ldr	r0, [r6, #-764]
	bl	filp_open
	cmn	r0, #4096
	mov	r5, r0
	str	r0, [r4, #92]
	bhi	.L21053
	mov	r2, #0
	mov	r1, #1
	ldr	r0, [r6, #-760]
	str	r4, [r4, #88]
	bl	filp_open
	cmn	r0, #4096
	str	r0, [r4, #120]
	bhi	.L21054
	movw	r7, #:lower16:.LANCHOR8
	movt	r7, #:upper16:.LANCHOR8
	sub	r3, r7, #268
	ldrh	r3, [r3, #-2]
	tst	r3, #4
	bne	.L21055
.L21012:
	ldr	r2, [r0, #124]
	movw	r8, #:lower16:kmalloc_caches
	mov	r3, #2
	movt	r8, #:upper16:kmalloc_caches
	mov	ip, #3
	ldr	r0, [r8, #40]
	ldr	r1, [r2]
	mov	r2, #8000
	str	r4, [r4, #116]
	cmp	r0, #0
	str	r1, [r4, #124]
	str	ip, [r4, #128]
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	str	r2, [r4, #140]
	beq	.L21028
	mov	r2, #604
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L21056
.L21013:
	mov	r0, r5
	bl	_snd_pcm_hw_params_any
	ldr	r1, [r4, #128]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.102
	ldr	r1, [r4, #132]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.103
	ldr	r1, [r4, #136]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.104
	mov	r0, r5
	ldr	r1, [r4, #140]
	bl	_snd_pcm_hw_param_set.constprop.105
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L21029
	ldr	r3, [r5, #8]
	cmp	r3, #0
	movne	r1, #32
	bne	.L21014
.L21015:
	str	r3, [r4, #128]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L21031
	ldr	r3, [r5, #40]
	cmp	r3, #0
	movne	r1, #32
	bne	.L21016
.L21017:
	str	r3, [r4, #132]
	ldr	r3, [r5, #284]
	mov	r0, r5
	str	r3, [r4, #136]
	ldr	r3, [r5, #296]
	str	r3, [r4, #140]
	bl	kfree
	ldrh	r3, [r7, #-246]
	tst	r3, #4
	bne	.L21057
.L21018:
	mov	r2, #0
	ldr	r0, [r6, #-756]
	mov	r1, r2
	bl	filp_open
	cmn	r0, #4096
	str	r0, [r4, #148]
	bhi	.L21058
	ldr	r2, [r0, #124]
	mov	lr, #3
	mov	ip, #2
	ldr	r0, [r8, #40]
	mov	r1, #1
	mov	r3, #8000
	ldr	r2, [r2]
	str	r4, [r4, #144]
	cmp	r0, #0
	str	r2, [r4, #152]
	str	lr, [r4, #156]
	str	ip, [r4, #160]
	str	r1, [r4, #164]
	str	r3, [r4, #168]
	beq	.L21033
	mov	r2, #604
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L21059
.L21020:
	mov	r0, r5
	bl	_snd_pcm_hw_params_any
	ldr	r1, [r4, #156]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.102
	ldr	r1, [r4, #160]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.103
	ldr	r1, [r4, #164]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.104
	mov	r0, r5
	ldr	r1, [r4, #168]
	bl	_snd_pcm_hw_param_set.constprop.105
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L21034
	ldr	r3, [r5, #8]
	cmp	r3, #0
	movne	r1, #32
	bne	.L21022
.L21023:
	str	r3, [r4, #156]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L21036
	ldr	r3, [r5, #40]
	cmp	r3, #0
	movne	r1, #32
	bne	.L21024
.L21025:
	str	r3, [r4, #160]
	ldr	r3, [r5, #284]
	mov	r0, r5
	str	r3, [r4, #164]
	ldr	r3, [r5, #296]
	str	r3, [r4, #168]
	bl	kfree
	ldrh	r3, [r7, #-222]
	tst	r3, #4
	bne	.L21060
.L21026:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r5, [r3, #3988]
	cmp	r5, #0
	movne	r5, #0
	streq	r4, [r3, #3988]
.L21006:
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L21028:
	mov	r5, #16
	b	.L21013
.L21033:
	mov	r5, #16
	b	.L21020
.L21031:
	mov	r1, #0
.L21016:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L21017
.L21029:
	mov	r1, #0
.L21014:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L21015
.L21053:
	movw	r0, #:lower16:.LC1463
	ldr	r1, .L21061
	movt	r0, #:upper16:.LC1463
	ldr	r2, [r6, #-764]
	bl	printk
	mov	r3, #0
	cmp	r5, #0
	str	r3, [r4, #92]
	beq	.L21026
	b	.L21008
.L21034:
	mov	r1, #0
.L21022:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L21023
.L21036:
	mov	r1, #0
.L21024:
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/Jprimero15/hlte/lolz/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	rsb	r3, r3, #31
	add	r3, r3, r1
	b	.L21025
.L21054:
	movw	r0, #:lower16:.LC1464
	ldr	r1, .L21061
	mvn	r5, #21
	movt	r0, #:upper16:.LC1464
	ldr	r2, [r6, #-760]
	bl	printk
	mov	r3, #0
	str	r3, [r4, #120]
.L21008:
	movw	r0, #:lower16:.LC1469
	ldr	r1, .L21061+4
	movt	r0, #:upper16:.LC1469
	bl	printk
	b	.L21006
.L21055:
	movw	r1, #:lower16:.LC1465
	sub	r0, r7, #288
	ldr	r2, .L21061
	movt	r1, #:upper16:.LC1465
	ldr	r3, [r6, #-760]
	bl	__dynamic_pr_debug
	ldr	r0, [r4, #120]
	b	.L21012
.L21058:
	movw	r0, #:lower16:.LC1467
	ldr	r1, .L21061
	mvn	r5, #21
	movt	r0, #:upper16:.LC1467
	ldr	r2, [r6, #-756]
	bl	printk
	mov	r3, #0
	str	r3, [r4, #144]
	str	r3, [r4, #148]
	str	r3, [r4, #152]
	b	.L21008
.L21057:
	ldr	r3, [r4, #128]
	movw	r1, #:lower16:.LC752
	ldr	ip, [r4, #140]
	movt	r1, #:upper16:.LC752
	ldr	r2, .L21061+8
	ldr	r0, .L21061+12
	str	ip, [sp, #8]
	ldr	ip, [r4, #136]
	str	ip, [sp, #4]
	ldr	ip, [r4, #132]
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L21018
.L21060:
	ldr	r3, [r4, #156]
	movw	r1, #:lower16:.LC760
	ldr	ip, [r4, #168]
	movt	r1, #:upper16:.LC760
	ldr	r2, .L21061+16
	ldr	r0, .L21061+20
	str	ip, [sp, #8]
	ldr	ip, [r4, #164]
	str	ip, [sp, #4]
	ldr	ip, [r4, #160]
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L21026
.L21056:
	movw	r0, #:lower16:.LC1466
	mvn	r2, #11
	ldr	r1, .L21061
	movt	r0, #:upper16:.LC1466
	mov	r5, r2
	bl	printk
	b	.L21008
.L21059:
	movw	r0, #:lower16:.LC1468
	mvn	r2, #11
	ldr	r1, .L21061
	movt	r0, #:upper16:.LC1468
	mov	r5, r2
	bl	printk
	b	.L21008
.L21052:
	ldr	r2, .L21061
	movw	r0, #:lower16:.LC747
	mvn	r5, #18
	movt	r0, #:upper16:.LC747
	mov	r1, r2
	bl	printk
	b	.L21008
.L21062:
	.align	2
.L21061:
	.word	.LANCHOR5+3604
	.word	.LANCHOR5+3680
	.word	.LANCHOR5+3624
	.word	.LANCHOR8-264
	.word	.LANCHOR5+3652
	.word	.LANCHOR8-240
	.fnend
	.size	gaudio_setup, .-gaudio_setup
	.align	2
	.global	gaudio_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gaudio_cleanup, %function
gaudio_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r5, [r4, #3988]
	str	lr, [sp, #12]
	cmp	r5, #0
	beq	.L21063
	movw	r0, #:lower16:.LANCHOR8
	movt	r0, #:upper16:.LANCHOR8
	ldrh	r3, [r0, #-198]
	tst	r3, #4
	bne	.L21085
.L21065:
	ldr	r0, [r5, #92]
	cmp	r0, #0
	beq	.L21066
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #984]
	bl	filp_close
.L21066:
	ldr	r0, [r5, #120]
	cmp	r0, #0
	beq	.L21067
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #984]
	bl	filp_close
.L21067:
	ldr	r0, [r5, #148]
	cmp	r0, #0
	beq	.L21068
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #984]
	bl	filp_close
.L21068:
	mov	r3, #0
	str	r3, [r4, #3988]
.L21063:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L21085:
	movw	r1, #:lower16:.LC1470
	ldr	r2, .L21086
	sub	r0, r0, #216
	movt	r1, #:upper16:.LC1470
	bl	__dynamic_pr_debug
	b	.L21065
.L21087:
	.align	2
.L21086:
	.word	.LANCHOR5+3696
	.fnend
	.size	gaudio_cleanup, .-gaudio_cleanup
	.align	2
	.global	control_selector_init
	.syntax unified
	.arm
	.fpu softvfp
	.type	control_selector_init, %function
control_selector_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	movw	r4, #:lower16:.LANCHOR7
	movt	r4, #:upper16:.LANCHOR7
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	add	r8, r5, #252
	sub	r0, r4, #752
	str	lr, [sp, #20]
	mov	r2, r8
	mov	r1, r8
	str	r8, [r5, #252]
	sub	r6, r4, #744
	sub	r7, r4, #712
	str	r8, [r5, #256]
	bl	__list_add
	mov	r1, r8
	sub	r0, r4, #720
	ldr	r2, [r5, #252]
	bl	__list_add
	mov	r2, r6
	mov	r1, r6
	str	r6, [r4, #-744]
	sub	r0, r4, #688
	str	r6, [r4, #-740]
	add	r8, r5, #260
	bl	__list_add
	mov	r1, r6
	sub	r0, r4, #644
	ldr	r2, [r4, #-744]
	bl	__list_add
	mov	r2, r7
	mov	r1, r7
	str	r7, [r4, #-712]
	sub	r0, r4, #600
	str	r7, [r4, #-708]
	sub	r6, r4, #3872
	bl	__list_add
	mov	r1, r7
	sub	r0, r4, #556
	ldr	r2, [r4, #-712]
	bl	__list_add
	movw	r2, #65472
	movw	r1, #58272
	str	r8, [r5, #260]
	movw	ip, #65520
	mov	r3, #48
	str	r8, [r5, #264]
	sub	r7, r4, #3904
	mov	r0, r6
	str	r2, [r4, #-624]
	str	r1, [r4, #-620]
	add	r6, r6, #8
	str	ip, [r4, #-616]
	str	r2, [r4, #-536]
	mov	r2, r8
	str	r1, [r4, #-532]
	mov	r1, r8
	str	r3, [r4, #-612]
	str	ip, [r4, #-528]
	str	r3, [r4, #-524]
	bl	__list_add
	mov	r1, r8
	mov	r0, r7
	ldr	r2, [r5, #260]
	add	r7, r7, #8
	bl	__list_add
	sub	r0, r4, #512
	mov	r2, r7
	str	r7, [r4, #-3896]
	mov	r1, r7
	str	r7, [r4, #-3892]
	bl	__list_add
	sub	r0, r4, #468
	mov	r2, r6
	str	r6, [r4, #-3864]
	mov	r1, r6
	str	r6, [r4, #-3860]
	bl	__list_add
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	control_selector_init, .-control_selector_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_function_bind_config, %function
audio_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L21099
	mov	r2, #276
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L21120
.L21091:
	ldr	ip, [r5, #24]
	movw	r1, #:lower16:.LC1471
	movw	r3, #:lower16:f_audio_bind
	ldr	r0, .L21123
	movt	r1, #:upper16:.LC1471
	movw	r2, #:lower16:f_audio_unbind
	movt	r3, #:upper16:f_audio_bind
	movt	r2, #:upper16:f_audio_unbind
	add	lr, r4, #204
	ldr	r6, [ip]
	str	r1, [r4]
	movw	r1, #:lower16:f_audio_get_alt
	str	r0, [r4, #4]
	movw	r0, #:lower16:f_audio_set_alt
	movt	r1, #:upper16:f_audio_get_alt
	movt	r0, #:upper16:f_audio_set_alt
	str	r3, [r4, #32]
	movw	r3, #:lower16:f_audio_setup
	str	r2, [r4, #36]
	movw	r2, #:lower16:f_audio_disable
	mov	ip, #0
	movt	r3, #:upper16:f_audio_setup
	movt	r2, #:upper16:f_audio_disable
	strd	r0, [r4, #40]
	add	r1, r4, #236
	mov	r0, r4
	strd	r2, [r4, #48]
	str	r6, [r4, #84]
	str	ip, [r4, #180]
	str	lr, [r4, #204]
	str	lr, [r4, #208]
	str	ip, [r4, #212]
	str	r1, [r4, #236]
	str	r1, [r4, #240]
	bl	control_selector_init
	mov	r2, #65024
	movw	r1, #:lower16:f_audio_playback_work
	movw	r3, #:lower16:f_audio_capture_work
	movt	r2, 65535
	add	r0, r4, #192
	add	ip, r4, #224
	movt	r1, #:upper16:f_audio_playback_work
	movt	r3, #:upper16:f_audio_capture_work
	str	r2, [r4, #188]
	str	r0, [r4, #192]
	strd	r0, [r4, #196]
	mov	r0, r4
	str	r2, [r4, #220]
	str	ip, [r4, #224]
	str	ip, [r4, #228]
	str	r3, [r4, #232]
	bl	gaudio_setup
	subs	r6, r0, #0
	bge	.L21121
.L21093:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r7, [r5, #3988]
	cmp	r7, #0
	beq	.L21094
	movw	r0, #:lower16:.LANCHOR8
	movt	r0, #:upper16:.LANCHOR8
	ldrh	r3, [r0, #-198]
	tst	r3, #4
	bne	.L21122
.L21095:
	ldr	r0, [r7, #92]
	cmp	r0, #0
	beq	.L21096
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #984]
	bl	filp_close
.L21096:
	ldr	r0, [r7, #120]
	cmp	r0, #0
	beq	.L21097
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #984]
	bl	filp_close
.L21097:
	ldr	r0, [r7, #148]
	cmp	r0, #0
	beq	.L21098
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #984]
	bl	filp_close
.L21098:
	mov	r3, #0
	str	r3, [r5, #3988]
.L21094:
	mov	r0, r4
	bl	kfree
.L21090:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L21121:
	mov	r0, r5
	mov	r1, r4
	bl	usb_add_function
	subs	r6, r0, #0
	beq	.L21090
	ldr	r2, .L21123+4
	movw	r0, #:lower16:.LC1472
	mov	r3, r6
	movt	r0, #:upper16:.LC1472
	mov	r1, r2
	bl	printk
	b	.L21094
.L21099:
	mov	r4, #16
	b	.L21091
.L21122:
	movw	r1, #:lower16:.LC1470
	ldr	r2, .L21123+8
	sub	r0, r0, #216
	movt	r1, #:upper16:.LC1470
	bl	__dynamic_pr_debug
	b	.L21095
.L21120:
	mvn	r6, #11
	b	.L21090
.L21124:
	.align	2
.L21123:
	.word	.LANCHOR7-424
	.word	.LANCHOR5+3720
	.word	.LANCHOR5+3696
	.fnend
	.size	audio_function_bind_config, .-audio_function_bind_config
	.align	2
	.global	audio_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_bind_config, %function
audio_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L21134
	mov	r2, #276
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L21155
.L21126:
	ldr	ip, [r5, #24]
	movw	r1, #:lower16:.LC1471
	movw	r3, #:lower16:f_audio_bind
	ldr	r0, .L21158
	movt	r1, #:upper16:.LC1471
	movw	r2, #:lower16:f_audio_unbind
	movt	r3, #:upper16:f_audio_bind
	movt	r2, #:upper16:f_audio_unbind
	add	lr, r4, #204
	ldr	r6, [ip]
	str	r1, [r4]
	movw	r1, #:lower16:f_audio_get_alt
	str	r0, [r4, #4]
	movw	r0, #:lower16:f_audio_set_alt
	movt	r1, #:upper16:f_audio_get_alt
	movt	r0, #:upper16:f_audio_set_alt
	str	r3, [r4, #32]
	movw	r3, #:lower16:f_audio_setup
	str	r2, [r4, #36]
	movw	r2, #:lower16:f_audio_disable
	mov	ip, #0
	movt	r3, #:upper16:f_audio_setup
	movt	r2, #:upper16:f_audio_disable
	strd	r0, [r4, #40]
	add	r1, r4, #236
	mov	r0, r4
	strd	r2, [r4, #48]
	str	r6, [r4, #84]
	str	ip, [r4, #180]
	str	lr, [r4, #204]
	str	lr, [r4, #208]
	str	ip, [r4, #212]
	str	r1, [r4, #236]
	str	r1, [r4, #240]
	bl	control_selector_init
	mov	r2, #65024
	movw	r1, #:lower16:f_audio_playback_work
	movw	r3, #:lower16:f_audio_capture_work
	movt	r2, 65535
	add	r0, r4, #192
	add	ip, r4, #224
	movt	r1, #:upper16:f_audio_playback_work
	movt	r3, #:upper16:f_audio_capture_work
	str	r2, [r4, #188]
	str	r0, [r4, #192]
	strd	r0, [r4, #196]
	mov	r0, r4
	str	r2, [r4, #220]
	str	ip, [r4, #224]
	str	ip, [r4, #228]
	str	r3, [r4, #232]
	bl	gaudio_setup
	subs	r6, r0, #0
	bge	.L21156
.L21128:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r7, [r5, #3988]
	cmp	r7, #0
	beq	.L21129
	movw	r0, #:lower16:.LANCHOR8
	movt	r0, #:upper16:.LANCHOR8
	ldrh	r3, [r0, #-198]
	tst	r3, #4
	bne	.L21157
.L21130:
	ldr	r0, [r7, #92]
	cmp	r0, #0
	beq	.L21131
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #984]
	bl	filp_close
.L21131:
	ldr	r0, [r7, #120]
	cmp	r0, #0
	beq	.L21132
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #984]
	bl	filp_close
.L21132:
	ldr	r0, [r7, #148]
	cmp	r0, #0
	beq	.L21133
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #984]
	bl	filp_close
.L21133:
	mov	r3, #0
	str	r3, [r5, #3988]
.L21129:
	mov	r0, r4
	bl	kfree
.L21125:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L21156:
	mov	r0, r5
	mov	r1, r4
	bl	usb_add_function
	subs	r6, r0, #0
	beq	.L21125
	ldr	r2, .L21158+4
	movw	r0, #:lower16:.LC1472
	mov	r3, r6
	movt	r0, #:upper16:.LC1472
	mov	r1, r2
	bl	printk
	b	.L21129
.L21134:
	mov	r4, #16
	b	.L21126
.L21157:
	movw	r1, #:lower16:.LC1470
	ldr	r2, .L21158+8
	sub	r0, r0, #216
	movt	r1, #:upper16:.LC1470
	bl	__dynamic_pr_debug
	b	.L21130
.L21155:
	mvn	r6, #11
	b	.L21125
.L21159:
	.align	2
.L21158:
	.word	.LANCHOR7-424
	.word	.LANCHOR5+3720
	.word	.LANCHOR5+3696
	.fnend
	.size	audio_bind_config, .-audio_bind_config
	.align	2
	.global	conn_gadget_req_put
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_req_put, %function
conn_gadget_req_put:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r4, r0, #88
	mov	r0, r4
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	mov	r6, r2
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	ldr	r1, [r7, #4]
	add	r0, r6, #36
	mov	r2, r7
	bl	__list_add
	ldrd	r6, [sp, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	conn_gadget_req_put, .-conn_gadget_req_put
	.align	2
	.global	conn_gadget_req_get
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_req_get, %function
conn_gadget_req_get:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #88
	mov	r4, r1
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4]
	mov	r6, r0
	cmp	r4, r3
	beq	.L21164
	mov	r0, r3
	sub	r4, r3, #36
	bl	list_del
.L21163:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L21164:
	mov	r4, #0
	b	.L21163
	.fnend
	.size	conn_gadget_req_get, .-conn_gadget_req_get
	.align	2
	.global	conn_gadget_req_move
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_req_move, %function
conn_gadget_req_move:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r5, r0, #88
	add	r4, r3, #36
	mov	r0, r5
	strd	r6, [sp, #8]
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r0, r4
	bl	__list_del_entry
	mov	r0, r4
	ldr	r1, [r7, #4]
	mov	r2, r7
	bl	__list_add
	ldr	r8, [sp, #16]
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	conn_gadget_req_move, .-conn_gadget_req_move
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_complete_out, %function
conn_gadget_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r5, r1
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r4, [r3, #2484]
	.pad #12
	sub	sp, sp, #12
	ldr	r1, [r1, #44]
	ldr	r3, [r4, #192]
	ldr	r2, [r4, #196]
	cmp	r1, #0
	add	r3, r3, r3, lsl #2
	sub	r6, r2, r3
	bne	.L21180
	add	r0, r4, #168
	ldr	r1, [r5]
	ldr	r2, [r5, #48]
	bl	__kfifo_in
	ldr	r3, [r4, #168]
	ldr	r2, [r4, #172]
	sub	r3, r3, r2
	cmp	r6, r3
	bls	.L21181
	ldr	r0, [r4, #96]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	blt	.L21182
.L21173:
	add	r0, r4, #144
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	__wake_up
.L21181:
	add	r6, r4, #88
	add	r5, r5, #36
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	mov	r0, r5
	bl	__list_del_entry
	mov	r0, r5
	ldr	r1, [r4, #132]
	add	r2, r4, #128
	bl	__list_add
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L21173
.L21182:
	movw	r0, #:lower16:.LC979
	ldr	r1, .L21184
	mov	r2, r5
	movt	r0, #:upper16:.LC979
	bl	printk
.L21179:
	mov	r3, r5
	add	r2, r4, #128
	add	r1, r4, #136
	mov	r0, r4
	bl	conn_gadget_req_move
	b	.L21173
.L21180:
	cmn	r1, #104
	beq	.L21171
	movw	r0, #:lower16:.LANCHOR8
	mov	r2, #1
	movt	r0, #:upper16:.LANCHOR8
	ldrh	r3, [r0, #-174]
	str	r2, [r4, #104]
	tst	r3, #4
	bne	.L21183
.L21171:
	movw	r0, #:lower16:.LC772
	ldr	r1, .L21184
	ldr	r2, [r5, #44]
	movt	r0, #:upper16:.LC772
	bl	printk
	b	.L21179
.L21183:
	ldr	r3, .L21184
	movw	r1, #:lower16:.LC233
	str	r2, [sp]
	movt	r1, #:upper16:.LC233
	sub	r0, r0, #192
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L21171
.L21185:
	.align	2
.L21184:
	.word	.LANCHOR5+3740
	.fnend
	.size	conn_gadget_complete_out, .-conn_gadget_complete_out
	.align	2
	.global	conn_gadget_empty
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_empty, %function
conn_gadget_empty:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	add	r6, r0, #88
	mov	r0, r6
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5]
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	sub	r4, r4, r5
	clz	r4, r4
	lsr	r4, r4, #5
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	conn_gadget_empty, .-conn_gadget_empty
	.align	2
	.global	ncm_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_bind_config, %function
ncm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	movw	r0, #:lower16:.LC473
	strd	r8, [sp, #16]
	mov	r6, r1
	movt	r0, #:upper16:.LC473
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r7, #24]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r4]
	ldr	r5, [r3, #28]
	mov	r1, r5
	bl	strcmp
	cmp	r0, #0
	beq	.L21203
	movw	r0, #:lower16:.LC476
	mov	r1, r5
	movt	r0, #:upper16:.LC476
	bl	strcmp
	cmp	r0, #0
	cmpne	r6, #0
	beq	.L21203
	movw	r5, #:lower16:.LANCHOR0
	movt	r5, #:upper16:.LANCHOR0
	ldrb	r3, [r5, #1588]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L21190
	ldrb	r3, [r4, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L21192
	add	r3, r3, #1
	movw	r2, #:lower16:.LANCHOR7
	uxtb	r3, r3
	movt	r2, #:upper16:.LANCHOR7
	strb	r3, [r4, #48]
	ldr	r1, [r7, #24]
	strb	r3, [r2, #-3748]
	strb	r3, [r5, #1588]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L21192
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	ldr	r1, [r7, #24]
	strb	r3, [r2, #-3728]
	strb	r3, [r2, #-3716]
	strb	r3, [r5, #1604]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L21192
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	ldr	r1, [r7, #24]
	strb	r3, [r2, #-413]
	strb	r3, [r5, #1596]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L21192
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	strb	r3, [r2, #-3757]
	strb	r3, [r5, #1612]
.L21190:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L21204
	mov	r2, #192
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L21230
.L21193:
	ldrb	lr, [r6, #2]	@ zero_extendqisi2
	add	r8, r4, #150
	movw	r2, #:lower16:.LC1407
	ldrb	ip, [r6, #1]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC1407
	mov	r0, r8
	ldrb	fp, [r6, #5]	@ zero_extendqisi2
	mov	r1, #14
	ldrb	r10, [r6, #4]	@ zero_extendqisi2
	ldrb	r9, [r6, #3]	@ zero_extendqisi2
	ldrb	r3, [r6]	@ zero_extendqisi2
	stm	sp, {ip, lr}
	movw	r6, #:lower16:.LANCHOR4
	movt	r6, #:upper16:.LANCHOR4
	str	r9, [sp, #8]
	strd	r10, [sp, #12]
	bl	snprintf
	ldr	r1, .L21233
	movw	r0, #:lower16:ncm_unbind
	mov	r2, #0
	ldr	lr, .L21233+4
	movt	r0, #:upper16:ncm_unbind
	str	r8, [r5, #1600]
	movw	ip, #:lower16:ncm_bind
	mov	r8, #15
	movt	ip, #:upper16:ncm_bind
	movw	r3, #:lower16:.LC796
	strh	r8, [r4, #98]	@ movhi
	movt	r3, #:upper16:.LC796
	str	r1, [r4, #176]
	movw	r1, #:lower16:ncm_set_alt
	movt	r1, #:upper16:ncm_set_alt
	str	r2, [r4, #100]
	strb	r2, [r4, #180]
	str	r2, [r4, #188]
	ldr	r8, [r5, #36]
	stm	r4, {r3, lr}
	strd	r0, [r4, #36]
	movw	r1, #:lower16:ncm_get_alt
	movw	r0, #:lower16:ncm_disable
	str	ip, [r4, #32]
	movt	r1, #:upper16:ncm_get_alt
	movw	ip, #1386
	ldrh	lr, [r6, ip]
	movw	ip, #:lower16:ncm_setup
	movt	r0, #:upper16:ncm_disable
	str	r1, [r4, #44]
	movw	r1, #:lower16:ncm_wrap_ntb
	movt	ip, #:upper16:ncm_setup
	movt	r1, #:upper16:ncm_wrap_ntb
	str	r0, [r4, #48]
	movw	r0, #9014
	str	r2, [r4, #184]
	movw	r2, #:lower16:ncm_unwrap_ntb
	movt	r2, #:upper16:ncm_unwrap_ntb
	str	ip, [r4, #52]
	tst	lr, #4
	mov	ip, #16384
	str	r8, [r4, #108]
	str	r1, [r4, #128]
	mov	r1, #1
	strb	r1, [r4, #104]
	str	ip, [r4, #112]
	str	r2, [r4, #132]
	strh	r0, [r4, #182]	@ movhi
	bne	.L21231
.L21194:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L21197
	add	r9, r4, #72
	str	r7, [r4, #20]
	add	r2, r7, #36
	mov	r0, r9
	ldr	r1, [r7, #40]
	bl	__list_add
	ldr	r8, [r4, #32]
	cmp	r8, #0
	beq	.L21198
	mov	r1, r4
	mov	r0, r7
	blx	r8
	subs	r8, r0, #0
	blt	.L21232
.L21198:
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L21199
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L21199
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r7, #45]
.L21199:
	tst	r3, #2
	bne	.L21200
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L21200
	ldrb	r2, [r7, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r7, #45]
.L21200:
	tst	r3, #1
	bne	.L21201
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L21201
	ldrb	r3, [r7, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r7, #45]
.L21201:
	cmp	r8, #0
	beq	.L21188
	movw	r3, #1410
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L21196
	b	.L21195
.L21231:
	ldr	ip, [r7]
	movw	r2, #:lower16:.LC929
	ldr	r1, [r7, #24]
	movt	r2, #:upper16:.LC929
	ldr	r0, .L21233+8
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r7, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L21194
.L21197:
	movw	r3, #1410
	mvn	r8, #21
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L21196
.L21195:
	ldr	r1, [r7, #24]
	movw	r2, #:lower16:.LC930
	ldr	r3, [r4]
	movt	r2, #:upper16:.LC930
	ldr	r0, .L21233+12
	ldr	r1, [r1]
	stm	sp, {r4, r8}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L21196:
	mov	r3, #0
	mov	r0, r4
	str	r3, [r5, #1600]
	bl	kfree
.L21188:
	mov	r0, r8
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L21204:
	mov	r4, #16
	b	.L21193
.L21232:
	mov	r0, r9
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L21198
.L21203:
	mvn	r8, #21
	b	.L21188
.L21192:
	mvn	r8, #18
	b	.L21188
.L21230:
	mvn	r8, #11
	b	.L21188
.L21234:
	.align	2
.L21233:
	.word	.LANCHOR0+48
	.word	.LANCHOR7-400
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1392
	.fnend
	.size	ncm_bind_config, .-ncm_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_function_bind_config, %function
ncm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #4]
	.pad #16
	sub	sp, sp, #16
	cmp	r4, #0
	beq	.L21236
	mov	r3, #0
	mov	r2, #2
	ldr	r0, .L21247
	movw	lr, #52429
	mov	r5, r1
	str	r2, [r4]	@ unaligned
	movt	lr, 52428
	mov	r2, r3
	strb	r3, [r4, #4]
	strb	r3, [r4, #5]
	b	.L21237
.L21241:
	sub	r3, r2, r3
	add	r2, r2, #1
	add	r3, r3, #1
	cmp	r2, #256
	ldrb	ip, [r4, r3]	@ zero_extendqisi2
	eor	r1, r1, ip
	strb	r1, [r4, r3]
	beq	.L21242
.L21237:
	umull	r1, r3, lr, r2
	ldrb	r1, [r0], #1	@ zero_extendqisi2
	lsr	r3, r3, #2
	cmp	r1, #0
	add	r3, r3, r3, lsl #2
	bne	.L21241
.L21242:
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1474
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC1474
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldr	r1, .L21247+4
	str	ip, [sp, #12]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1475
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC1475
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldr	r1, .L21247+4
	str	ip, [sp, #12]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldr	r3, [r5, #24]
	movw	r2, #:lower16:.LC796
	mov	r1, r4
	movt	r2, #:upper16:.LC796
	ldr	r0, [r3]
	bl	gether_setup_name
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	mov	r6, r0
	movw	r0, #:lower16:.LC1476
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC1476
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldr	r1, .L21247+4
	str	ip, [sp, #12]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	cmp	r6, #0
	bne	.L21246
	mov	r1, r4
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	ncm_bind_config
.L21236:
	ldr	r2, .L21247+4
	movw	r0, #:lower16:.LC1473
	mvn	r6, #0
	movt	r0, #:upper16:.LC1473
	mov	r1, r2
	bl	printk
.L21235:
	mov	r0, r6
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L21246:
	ldr	r2, .L21247+4
	movw	r0, #:lower16:.LC1192
	movt	r0, #:upper16:.LC1192
	mov	r1, r2
	bl	printk
	b	.L21235
.L21248:
	.align	2
.L21247:
	.word	.LANCHOR1+2220
	.word	.LANCHOR5+3768
	.fnend
	.size	ncm_function_bind_config, .-ncm_function_bind_config
	.align	2
	.global	is_ncm_ready
	.syntax unified
	.arm
	.fpu softvfp
	.type	is_ncm_ready, %function
is_ncm_ready:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC1184
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r1, #:upper16:.LC1184
	str	lr, [sp, #4]
	bl	strcmp
	cmp	r0, #0
	beq	.L21250
	movw	r1, #:lower16:.LC796
	mov	r0, r4
	movt	r1, #:upper16:.LC796
	bl	strcmp
	cmp	r0, #0
	movne	r0, #0
	bne	.L21251
.L21250:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldrb	r0, [r3, #3636]	@ zero_extendqisi2
	cmp	r0, #0
	bne	.L21258
.L21251:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L21258:
	movw	r0, #:lower16:.LC1477
	mov	r2, r4
	ldr	r1, .L21259
	movt	r0, #:upper16:.LC1477
	bl	printk
	mov	r0, #1
	b	.L21251
.L21260:
	.align	2
.L21259:
	.word	.LANCHOR5+3796
	.fnend
	.size	is_ncm_ready, .-is_ncm_ready
	.align	2
	.global	set_ncm_device_descriptor
	.syntax unified
	.arm
	.fpu softvfp
	.type	set_ncm_device_descriptor, %function
set_ncm_device_descriptor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {lr}
	str	lr, [sp, #-4]!
	mov	ip, r0
	mov	r2, #2
	mov	r3, #93
	mov	lr, #104
	ldr	r1, .L21263
	strb	r2, [ip, #4]
	movw	r0, #:lower16:.LC1478
	strb	r3, [ip, #10]
	movt	r0, #:upper16:.LC1478
	mov	r3, r2
	strb	lr, [ip, #11]
	movw	r2, #26717
	ldr	lr, [sp], #4
	b	printk
.L21264:
	.align	2
.L21263:
	.word	.LANCHOR5+3812
	.fnend
	.size	set_ncm_device_descriptor, .-set_ncm_device_descriptor
	.align	2
	.global	set_ncm_ready
	.syntax unified
	.arm
	.fpu softvfp
	.type	set_ncm_ready, %function
set_ncm_ready:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r0
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldrb	r2, [r4, #3636]	@ zero_extendqisi2
	str	lr, [sp, #12]
	cmp	r2, r0
	bne	.L21269
.L21266:
	cmp	r5, #0
	bne	.L21265
	movw	r2, #3660
	movw	r3, #3662
	strh	r5, [r4, r2]	@ movhi
	strh	r5, [r4, r3]	@ movhi
.L21265:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L21269:
	movw	r0, #:lower16:.LC801
	mov	r3, r5
	ldr	r1, .L21270
	movt	r0, #:upper16:.LC801
	bl	printk
	movw	r3, #:lower16:system_wq
	ldr	r2, [r4, #3612]
	mov	r0, #4
	movt	r3, #:upper16:system_wq
	strb	r5, [r4, #3636]
	ldr	r1, [r3]
	bl	queue_work_on
	b	.L21266
.L21271:
	.align	2
.L21270:
	.word	.LANCHOR5-1880
	.fnend
	.size	set_ncm_ready, .-set_ncm_ready
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_setup, %function
android_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r4, r3
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	stmib	sp, {r0, r3}
	add	r0, r0, #32
	bl	dev_get_drvdata
	ldr	r3, [r4, #3308]
	mov	r6, r0
	ldr	r2, .L21388
	sub	r9, r3, #520
	cmp	r3, r2
	bne	.L21275
	b	.L21273
.L21372:
	ldr	r3, [r9, #520]
	cmp	r3, r2
	sub	r9, r3, #520
	beq	.L21273
.L21275:
	ldr	r3, [r3, #-512]
	cmp	r6, r3
	bne	.L21372
.L21273:
	ldr	r3, [r6, #4]
	movw	r2, #:lower16:composite_setup_complete
	mov	r0, #0
	movt	r2, #:upper16:composite_setup_complete
	mov	r10, r9
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	str	r0, [r3, #4]
	str	r2, [r3, #28]
	bfc	r1, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [sp, #4]
	ldr	r3, [r3, #4]
	str	r6, [r3]
	ldr	r8, [r10, #508]!
	cmp	r10, r8
	sub	r8, r8, #120
	beq	.L21276
	mvn	fp, #94
.L21280:
	mov	r5, r8
	ldr	r4, [r5, #112]!
	cmp	r5, r4
	sub	r4, r4, #4
	bne	.L21279
	b	.L21277
.L21278:
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L21277
.L21279:
	ldr	r0, [r4]
	mov	r2, r7
	mov	r1, r6
	ldr	r3, [r0, #48]
	cmp	r3, #0
	beq	.L21278
	blx	r3
	subs	fp, r0, #0
	blt	.L21278
.L21277:
	ldr	r8, [r8, #120]
	cmp	r10, r8
	sub	r8, r8, #120
	bne	.L21280
	ldr	r4, [r6, #12]
	adds	r4, r4, #0
	movne	r4, #1
	cmp	fp, #0
	blt	.L21282
.L21283:
	add	r5, r6, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r9, #48]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L21325
	mov	r3, #1
	mov	r1, r0
	mov	r0, r5
	strb	r3, [r9, #48]
	bl	_raw_spin_unlock_irqrestore
.L21326:
	movw	r3, #:lower16:system_wq
	add	r2, r9, #180
	movt	r3, #:upper16:system_wq
	mov	r0, #4
	ldr	r1, [r3]
	bl	queue_work_on
.L21272:
	mov	r0, fp
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L21325:
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	mov	r1, r0
	mov	r0, r5
	cmp	r3, #9
	beq	.L21373
.L21371:
	bl	_raw_spin_unlock_irqrestore
	b	.L21272
.L21276:
	ldr	r4, [r6, #12]
	adds	r4, r4, #0
	movne	r4, #1
.L21282:
	ldrb	r2, [r7]	@ zero_extendqisi2
	ldrh	ip, [r7, #4]	@ unaligned
	ldrh	r1, [r7, #2]	@ unaligned
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	and	r0, r2, #96
	cmp	r0, #64
	uxth	r8, ip
	uxth	r10, r1
	bne	.L21284
	cmp	r3, #240
	beq	.L21374
.L21284:
	ldr	r1, [sp, #8]
	cmp	r2, #64
	ldr	r5, [r1, #2488]
	beq	.L21375
	cmp	r3, #51
	cmpeq	r2, #192
	bne	.L21292
	ldr	r3, [r6, #4]
	mov	r8, #2
	mov	r1, #256
	add	r0, r5, #101
	ldr	r3, [r3]
	strh	r8, [r3]	@ movhi
	bl	__memzero
	add	r0, r5, #356
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r5, #612
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r5, #868
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r5, #1120
	mov	r1, #256
	add	r0, r0, #5
	bl	__memzero
	add	r0, r5, #1376
	mov	r1, #256
	add	r0, r0, #5
	bl	__memzero
	mov	r3, #0
	str	r3, [r5, #1644]
	str	r3, [r5, #1648]
.L21287:
	ldr	r3, [r6, #4]
	mov	r2, #32
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfc	r1, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r6, #4]
	str	r8, [r3, #4]
	ldr	r3, [r6]
	ldr	r1, [r6, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	fp, r0, #0
	bge	.L21283
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC1052
	movt	r1, #:upper16:.LC1052
	ldr	r2, .L21388+4
	add	r0, r0, #32
	bl	dev_err
.L21292:
	mov	r1, r7
	ldr	r0, [sp, #4]
	bl	composite_setup
	mov	fp, r0
	b	.L21283
.L21373:
	ldr	r3, [r6, #12]
	cmp	r3, #0
	beq	.L21371
	cmp	r4, #0
	bne	.L21371
	bl	_raw_spin_unlock_irqrestore
	b	.L21326
.L21375:
	cmp	r3, #53
	beq	.L21376
	ldrh	r2, [r7, #6]	@ unaligned
	cmp	r3, #52
	str	r2, [sp, #8]
	beq	.L21377
	mov	r1, r2
	cmp	r3, #58
	cmpeq	r8, #0
	moveq	r2, #1
	movne	r2, #0
	cmp	r1, #0
	movne	r2, #0
	cmp	r2, #0
	movne	r8, #0
	strne	r10, [r5, #1648]
	bne	.L21287
	cmp	r3, #54
	beq	.L21378
	cmp	r3, #55
	beq	.L21379
	cmp	r3, #56
	beq	.L21380
	cmp	r3, #57
	bne	.L21292
	add	r3, r5, #88
	add	r5, r5, #1760
	mov	r0, r3
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	fp, [r5, #8]
	add	r5, r5, #8
	mov	r1, r0
	ldr	r3, [sp, #12]
	cmp	r5, fp
	bne	.L21324
	b	.L21321
.L21381:
	ldr	fp, [fp]
	cmp	r5, fp
	beq	.L21321
.L21324:
	ldr	r2, [fp, #16]
	cmp	r10, r2
	bne	.L21381
	mov	r0, r3
	bl	_raw_spin_unlock_irqrestore
	cmp	fp, #0
	beq	.L21292
	ldr	r2, [r6, #4]
	movw	r3, #:lower16:acc_complete_send_hid_event
	ldr	r8, [sp, #8]
	movt	r3, #:upper16:acc_complete_send_hid_event
	str	fp, [r2, #32]
	ldr	r2, [r6, #4]
	str	r3, [r2, #28]
	b	.L21287
.L21377:
	str	r8, [r5, #1640]
	ldr	r2, [r6]
	movw	r3, #:lower16:acc_complete_set_string
	movt	r3, #:upper16:acc_complete_set_string
	ldr	r8, [sp, #8]
	ldr	r2, [r2, #4]
	str	r5, [r2]
	ldr	r2, [r6, #4]
	str	r3, [r2, #28]
	b	.L21287
.L21376:
	mov	r3, #1
	mov	r0, #200
	mov	r8, #0
	str	r3, [r5, #1644]
	bl	msecs_to_jiffies
	movw	r1, #:lower16:system_wq
	add	r2, r5, #1696
	movt	r1, #:upper16:system_wq
	mov	r3, r0
	add	r2, r2, #4
	ldr	r1, [r1]
	mov	r0, #4
	bl	queue_delayed_work_on
	b	.L21287
.L21321:
	mov	r0, r3
	bl	_raw_spin_unlock_irqrestore
	b	.L21292
.L21380:
	add	r3, r5, #88
	add	r5, r5, #1776
	mov	r0, r3
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	fp, [r5]
	mov	r1, r0
	ldr	r3, [sp, #12]
	cmp	r5, fp
	bne	.L21319
	b	.L21321
.L21382:
	ldr	fp, [fp]
	cmp	r5, fp
	beq	.L21321
.L21319:
	ldr	r2, [fp, #16]
	cmp	r10, r2
	bne	.L21382
	mov	r0, r3
	bl	_raw_spin_unlock_irqrestore
	cmp	fp, #0
	beq	.L21292
	ldr	r3, [fp, #28]
	cmp	r8, r3
	bne	.L21292
	ldr	r1, [sp, #8]
	ldr	r2, [fp, #24]
	add	r3, r1, r8
	cmp	r3, r2
	bgt	.L21292
	ldr	r2, [r6, #4]
	movw	r3, #:lower16:acc_complete_set_hid_report_desc
	mov	r8, r1
	movt	r3, #:upper16:acc_complete_set_hid_report_desc
	str	fp, [r2, #32]
	ldr	r2, [r6, #4]
	str	r3, [r2, #28]
	b	.L21287
.L21379:
	add	r8, r5, #88
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #1768]
	add	r2, r5, #1760
	mov	fp, r0
	add	r2, r2, #8
	cmp	r2, r3
	bne	.L21309
	b	.L21306
.L21383:
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L21306
.L21309:
	ldr	r1, [r3, #16]
	cmp	r10, r1
	bne	.L21383
	cmp	r3, #0
	beq	.L21306
.L21310:
	mov	r0, r3
	str	r3, [sp, #8]
	bl	__list_del_entry
	ldr	r3, [sp, #8]
	add	r1, r5, #1776
	add	r1, r1, #8
	ldr	r2, [r5, #1784]
	mov	r0, r3
	bl	__list_add
	mov	r1, fp
	mov	r0, r8
.L21370:
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:system_wq
	add	r2, r5, #1744
	movt	r3, #:upper16:system_wq
	add	r2, r2, #8
	ldr	r1, [r3]
	mov	r0, #4
	mov	r8, #0
	bl	queue_work_on
	b	.L21287
.L21378:
	cmp	r8, #0
	beq	.L21292
	add	fp, r5, #88
	mov	r0, fp
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #1768]
	add	r2, r5, #1760
	str	r0, [sp, #8]
	add	r2, r2, #8
	cmp	r2, r3
	bne	.L21296
	b	.L21293
.L21384:
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L21293
.L21296:
	ldr	r1, [r3, #16]
	cmp	r10, r1
	bne	.L21384
	cmp	r3, #0
	beq	.L21293
.L21297:
	mov	r0, r3
	str	r3, [sp, #12]
	bl	__list_del_entry
	ldr	r3, [sp, #12]
	add	r1, r5, #1776
	add	r1, r1, #8
	ldr	r2, [r5, #1784]
	mov	r0, r3
	bl	__list_add
.L21298:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L21332
	mov	r2, #32
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L21303
.L21302:
	movw	r1, #32800
	mov	r0, r8
	str	r3, [sp, #12]
	bl	__kmalloc
	ldr	r3, [sp, #12]
	cmp	r0, #0
	str	r0, [r3, #20]
	beq	.L21385
	mov	r1, r5
	mov	r0, r3
	str	r5, [r3, #12]
	str	r10, [r3, #16]
	str	r8, [r3, #24]
	ldr	r2, [r1, #1776]!
	bl	__list_add
	ldr	r1, [sp, #8]
	mov	r0, fp
	b	.L21370
.L21306:
	ldr	r3, [r5, #1776]
	add	r2, r5, #1776
	cmp	r2, r3
	bne	.L21314
	b	.L21311
.L21386:
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L21311
.L21314:
	ldr	r1, [r3, #16]
	cmp	r10, r1
	bne	.L21386
	cmp	r3, #0
	bne	.L21310
.L21311:
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L21292
.L21374:
	ldr	r10, [sp, #8]
	movw	r5, #3660
	movw	r8, #3662
	mov	r0, #1
	mov	fp, #0
	strh	ip, [r10, r8]	@ movhi
	strh	r1, [r10, r5]	@ movhi
	bl	set_ncm_ready
	movw	r0, #:lower16:.LC1479
	ldrh	r3, [r10, r8]
	ldrh	r2, [r10, r5]
	movt	r0, #:upper16:.LC1479
	ldr	r1, .L21388+8
	bl	printk
	ldr	r3, [r6, #4]
	mov	r2, #32
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfc	r1, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r6, #4]
	str	fp, [r3, #4]
	ldr	r3, [r6]
	ldr	r1, [r6, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, fp
	bge	.L21283
	movw	r0, #:lower16:.LC1480
	ldr	r1, .L21388+8
	movt	r0, #:upper16:.LC1480
	bl	printk
	b	.L21283
.L21293:
	ldr	r3, [r5, #1776]
	add	r2, r5, #1776
	cmp	r2, r3
	bne	.L21301
	b	.L21298
.L21387:
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L21298
.L21301:
	ldr	r1, [r3, #16]
	cmp	r10, r1
	bne	.L21387
	cmp	r3, #0
	beq	.L21298
	b	.L21297
.L21385:
	mov	r0, r3
	bl	kfree
.L21303:
	mov	r0, fp
	ldr	r1, [sp, #8]
	bl	_raw_spin_unlock_irqrestore
	b	.L21292
.L21332:
	mov	r3, #16
	b	.L21302
.L21389:
	.align	2
.L21388:
	.word	.LANCHOR1+3308
	.word	.LANCHOR5-124
	.word	.LANCHOR5+3840
	.fnend
	.size	android_setup, .-android_setup
	.align	2
	.global	schedule_usb_gadget_connect_work
	.syntax unified
	.arm
	.fpu softvfp
	.type	schedule_usb_gadget_connect_work, %function
schedule_usb_gadget_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LC901
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r2, #0
	movt	r3, #:upper16:.LC901
	str	r6, [sp, #8]
	cmp	r0, #0
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	str	r3, [sp]
	str	r2, [sp, #4]
	bne	.L21401
.L21390:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L21401:
	ldr	r6, .L21403
	mov	r4, r0
	movw	r0, #:lower16:.LC902
	add	r5, r4, #452
	movt	r0, #:upper16:.LC902
	mov	r2, r6
	mov	r1, r6
	bl	printk
	mov	r0, r5
	bl	work_busy
	cmp	r0, #0
	bne	.L21402
.L21392:
	ldr	r0, [r4, #12]
	mov	r2, sp
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env
	mov	r3, #0
	mov	r0, #1
	str	r3, [r4, #504]
	bl	msecs_to_jiffies
	movw	r1, #:lower16:system_wq
	mov	r3, r0
	movt	r1, #:upper16:system_wq
	mov	r2, r5
	ldr	r1, [r1]
	mov	r0, #4
	bl	queue_delayed_work_on
	b	.L21390
.L21402:
	mov	r0, r5
	bl	cancel_delayed_work
	movw	r0, #:lower16:.LC903
	mov	r2, r6
	mov	r1, r6
	movt	r0, #:upper16:.LC903
	bl	printk
	b	.L21392
.L21404:
	.align	2
.L21403:
	.word	.LANCHOR5-1532
	.fnend
	.size	schedule_usb_gadget_connect_work, .-schedule_usb_gadget_connect_work
	.global	terminal_mode_vendor_id
	.global	terminal_mode_version
	.global	diag_dload
	.global	conn_gadget_function
	.global	usb30en
	.global	speaker_output_terminal_desc
	.global	speaker_input_terminal_desc
	.global	uac1_ac_header_desc
	.global	uac1_ac_interface_desc
	.global	_rndis_qc
	.global	bam2bam_data_ports
	.global	rndis_ul_max_xfer_size_rcvd
	.global	rndis_ul_max_pkt_per_xfer_rcvd
	.global	mtp_ext_config_desc
	.global	mtp_tx_reqs
	.global	mtp_tx_req_len
	.global	mtp_rx_req_len
	.global	ghsuart_data_stats_ops
	.global	ghsuart_data_tx_intr_thld
	.global	ghsic_stats_ops
	.global	gdata_timestamp_ops
	.global	ghsic_data_tx_intr_thld
	.global	gctrl_dfile
	.global	gctrl_dent
	.global	gctrl_stats_ops
	.global	smd_ctrl_dfile
	.global	smd_ctrl_dent
	.global	gsmd_ctrl_stats_ops
	.global	online_clients
	.global	gbam_dent
	.global	gbam_stats_ops
	.global	bam2bam_ports
	.global	smd_pi
	.global	sport_info
	.global	gs_dent
	.global	debug_adb_ops
	.global	debug_rst_ops
	.global	dent_rmnet_mux
	.global	rmnet_mux_svlte_debug_stats_ops
	.global	debug_rmnet_sdio_stats_ops
	.global	sdio_rx_fctrl_dis_thld
	.global	sdio_rx_fctrl_en_thld
	.global	sdio_tx_pkt_drop_thld
	.global	dent_smd
	.global	rmnet_smd_debug_stats_ops
	.global	dent_diag
	.section	.rodata
	.align	3
	.set	.LANCHOR3,. + 0
	.set	.LANCHOR5,. + 8184
	.type	__func__.38508, %object
	.size	__func__.38508, 24
__func__.38508:
	.ascii	"usb_rmnet_mux_ctrl_open\000"
	.type	__func__.57148, %object
	.size	__func__.57148, 13
__func__.57148:
	.ascii	"ecm_qc_setup\000"
	.space	3
	.type	__func__.58195, %object
	.size	__func__.58195, 27
__func__.58195:
	.ascii	"rndis_qc_response_complete\000"
	.space	1
	.type	__func__.58187, %object
	.size	__func__.58187, 28
__func__.58187:
	.ascii	"rndis_qc_response_available\000"
	.type	__func__.62150, %object
	.size	__func__.62150, 21
__func__.62150:
	.ascii	"f_audio_buffer_alloc\000"
	.space	3
	.type	__func__.63459, %object
	.size	__func__.63459, 10
__func__.63459:
	.ascii	"ncm_setup\000"
	.space	2
	.type	__func__.63443, %object
	.size	__func__.63443, 22
__func__.63443:
	.ascii	"ncm_setdgram_complete\000"
	.space	2
	.type	__func__.64445, %object
	.size	__func__.64445, 23
__func__.64445:
	.ascii	"sua_version_info_store\000"
	.space	1
	.type	__func__.58331, %object
	.size	__func__.58331, 21
__func__.58331:
	.ascii	"rndis_qc_release_dev\000"
	.space	3
	.type	__func__.58321, %object
	.size	__func__.58321, 18
__func__.58321:
	.ascii	"rndis_qc_open_dev\000"
	.space	2
	.type	__func__.57684, %object
	.size	__func__.57684, 13
__func__.57684:
	.ascii	"mbim_release\000"
	.space	3
	.type	__func__.57676, %object
	.size	__func__.57676, 10
__func__.57676:
	.ascii	"mbim_open\000"
	.space	2
	.type	__func__.48393, %object
	.size	__func__.48393, 16
__func__.48393:
	.ascii	"gsdio_open_work\000"
	.type	__func__.64816, %object
	.size	__func__.64816, 11
__func__.64816:
	.ascii	"state_show\000"
	.space	1
	.type	__func__.64731, %object
	.size	__func__.64731, 12
__func__.64731:
	.ascii	"enable_show\000"
	.type	__func__.45738, %object
	.size	__func__.45738, 19
__func__.45738:
	.ascii	"start_out_transfer\000"
	.space	1
	.type	dirletter.46068, %object
	.size	dirletter.46068, 4
dirletter.46068:
	.byte	117
	.byte	111
	.byte	105
	.byte	110
	.type	__func__.64435, %object
	.size	__func__.64435, 22
__func__.64435:
	.ascii	"sua_version_info_show\000"
	.space	2
	.type	__func__.25489, %object
	.size	__func__.25489, 15
__func__.25489:
	.ascii	"composite_bind\000"
	.space	1
	.type	__func__.48600, %object
	.size	__func__.48600, 14
__func__.48600:
	.ascii	"gsmd_start_rx\000"
	.space	2
	.type	__func__.49311, %object
	.size	__func__.49311, 21
__func__.49311:
	.ascii	"gbam_stop_endless_rx\000"
	.space	3
	.type	__func__.49318, %object
	.size	__func__.49318, 21
__func__.49318:
	.ascii	"gbam_stop_endless_tx\000"
	.space	3
	.type	__func__.49425, %object
	.size	__func__.49425, 13
__func__.49425:
	.ascii	"gbam_wake_cb\000"
	.space	3
	.type	__func__.49270, %object
	.size	__func__.49270, 25
__func__.49270:
	.ascii	"gbam_endless_tx_complete\000"
	.space	3
	.type	__func__.49263, %object
	.size	__func__.49263, 25
__func__.49263:
	.ascii	"gbam_endless_rx_complete\000"
	.space	3
	.type	__func__.50972, %object
	.size	__func__.50972, 24
__func__.50972:
	.ascii	"ghsic_send_cpkt_tomodem\000"
	.type	__func__.51037, %object
	.size	__func__.51037, 18
__func__.51037:
	.ascii	"ghsic_ctrl_status\000"
	.space	2
	.type	__func__.51983, %object
	.size	__func__.51983, 26
__func__.51983:
	.ascii	"ghsuart_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.57491, %object
	.size	__func__.57491, 21
__func__.57491:
	.ascii	"mbim_ep0out_complete\000"
	.space	3
	.type	__func__.57788, %object
	.size	__func__.57788, 25
__func__.57788:
	.ascii	"bam_data_stop_endless_rx\000"
	.space	3
	.type	__func__.57795, %object
	.size	__func__.57795, 25
__func__.57795:
	.ascii	"bam_data_stop_endless_tx\000"
	.space	3
	.type	__func__.57767, %object
	.size	__func__.57767, 29
__func__.57767:
	.ascii	"bam_data_endless_tx_complete\000"
	.space	3
	.type	__func__.57760, %object
	.size	__func__.57760, 29
__func__.57760:
	.ascii	"bam_data_endless_rx_complete\000"
	.space	3
	.type	__func__.62406, %object
	.size	__func__.62406, 14
__func__.62406:
	.ascii	"f_audio_setup\000"
	.space	2
	.type	__func__.62259, %object
	.size	__func__.62259, 19
__func__.62259:
	.ascii	"audio_set_intf_req\000"
	.space	1
	.type	__func__.62290, %object
	.size	__func__.62290, 19
__func__.62290:
	.ascii	"audio_get_intf_req\000"
	.space	1
	.type	__func__.62328, %object
	.size	__func__.62328, 23
__func__.62328:
	.ascii	"audio_set_endpoint_req\000"
	.space	1
	.type	__func__.62370, %object
	.size	__func__.62370, 23
__func__.62370:
	.ascii	"audio_get_endpoint_req\000"
	.space	1
	.type	__func__.64993, %object
	.size	__func__.64993, 22
__func__.64993:
	.ascii	"android_unbind_config\000"
	.space	2
	.type	__func__.64621, %object
	.size	__func__.64621, 24
__func__.64621:
	.ascii	"android_enable_function\000"
	.type	__func__.64607, %object
	.size	__func__.64607, 21
__func__.64607:
	.ascii	"check_streaming_func\000"
	.space	3
	.type	__func__.38989, %object
	.size	__func__.38989, 13
__func__.38989:
	.ascii	"frmnet_setup\000"
	.space	3
	.type	__func__.38957, %object
	.size	__func__.38957, 23
__func__.38957:
	.ascii	"frmnet_notify_complete\000"
	.space	1
	.type	__func__.57563, %object
	.size	__func__.57563, 17
__func__.57563:
	.ascii	"mbim_ctrlrequest\000"
	.space	3
	.type	__func__.38824, %object
	.size	__func__.38824, 14
__func__.38824:
	.ascii	"frmnet_unbind\000"
	.space	2
	.type	__func__.47307, %object
	.size	__func__.47307, 12
__func__.47307:
	.ascii	"gs_start_rx\000"
	.type	__func__.48292, %object
	.size	__func__.48292, 21
__func__.48292:
	.ascii	"gsdio_write_complete\000"
	.space	3
	.type	__func__.48366, %object
	.size	__func__.48366, 24
__func__.48366:
	.ascii	"gsdio_ctrl_notify_modem\000"
	.type	__func__.48683, %object
	.size	__func__.48683, 20
__func__.48683:
	.ascii	"gsmd_write_complete\000"
	.type	__func__.48676, %object
	.size	__func__.48676, 19
__func__.48676:
	.ascii	"gsmd_read_complete\000"
	.space	1
	.type	__func__.52040, %object
	.size	__func__.52040, 19
__func__.52040:
	.ascii	"ghsuart_ctrl_probe\000"
	.space	1
	.type	__func__.52509, %object
	.size	__func__.52509, 19
__func__.52509:
	.ascii	"ghsuart_data_probe\000"
	.space	1
	.type	CSWTCH.1840, %object
	.size	CSWTCH.1840, 40
CSWTCH.1840:
	.word	.LC582
	.word	.LC583
	.word	.LC584
	.word	.LC585
	.word	.LC586
	.word	.LC587
	.word	.LC588
	.word	.LC589
	.word	.LC590
	.word	.LC1496
	.type	__func__.49756, %object
	.size	__func__.49756, 29
__func__.49756:
	.ascii	"gsmd_ctrl_send_cbits_tomodem\000"
	.space	3
	.type	__func__.49727, %object
	.size	__func__.49727, 24
__func__.49727:
	.ascii	"grmnet_ctrl_smd_write_w\000"
	.type	__func__.48659, %object
	.size	__func__.48659, 13
__func__.48659:
	.ascii	"gsmd_tx_pull\000"
	.space	3
	.type	__func__.48743, %object
	.size	__func__.48743, 21
__func__.48743:
	.ascii	"gsmd_disconnect_work\000"
	.space	3
	.type	__func__.49699, %object
	.size	__func__.49699, 23
__func__.49699:
	.ascii	"grmnet_ctrl_smd_read_w\000"
	.space	1
	.type	__func__.63150, %object
	.size	__func__.63150, 29
__func__.63150:
	.ascii	"conn_gadget_function_disable\000"
	.space	3
	.type	__func__.54464, %object
	.size	__func__.54464, 16
__func__.54464:
	.ascii	"mtp_ctrlrequest\000"
	.type	CSWTCH.1933, %object
	.size	CSWTCH.1933, 12
CSWTCH.1933:
	.word	.LC1493
	.word	.LC1494
	.word	.LC1495
	.type	__func__.49773, %object
	.size	__func__.49773, 23
__func__.49773:
	.ascii	"grmnet_ctrl_smd_notify\000"
	.space	1
	.type	__func__.52051, %object
	.size	__func__.52051, 20
__func__.52051:
	.ascii	"ghsuart_ctrl_remove\000"
	.type	gsmd_ctrl_stats_ops, %object
	.size	gsmd_ctrl_stats_ops, 108
gsmd_ctrl_stats_ops:
	.space	8
	.word	gsmd_ctrl_read_stats
	.word	gsmd_ctrl_reset_stats
	.space	92
	.type	gctrl_stats_ops, %object
	.size	gctrl_stats_ops, 108
gctrl_stats_ops:
	.space	8
	.word	gctrl_read_stats
	.word	gctrl_reset_stats
	.space	92
	.type	ghsic_stats_ops, %object
	.size	ghsic_stats_ops, 108
ghsic_stats_ops:
	.space	8
	.word	ghsic_data_read_stats
	.word	ghsic_data_reset_stats
	.space	92
	.type	gdata_timestamp_ops, %object
	.size	gdata_timestamp_ops, 108
gdata_timestamp_ops:
	.space	8
	.word	show_timestamp
	.space	96
	.type	ghsuart_ctrl_stats_ops, %object
	.size	ghsuart_ctrl_stats_ops, 108
ghsuart_ctrl_stats_ops:
	.space	8
	.word	ghsuart_ctrl_read_stats
	.word	ghsuart_ctrl_reset_stats
	.space	92
	.type	ghsuart_data_stats_ops, %object
	.size	ghsuart_data_stats_ops, 108
ghsuart_data_stats_ops:
	.space	8
	.word	ghsuart_data_read_stats
	.word	ghsuart_data_reset_stats
	.space	92
	.type	debug_fdiag_ops, %object
	.size	debug_fdiag_ops, 108
debug_fdiag_ops:
	.space	8
	.word	debug_read_stats
	.word	debug_reset_stats
	.space	28
	.word	debug_open
	.space	60
	.type	__func__.37420, %object
	.size	__func__.37420, 24
__func__.37420:
	.ascii	"rmnet_sdio_data_rx_work\000"
	.type	__func__.49170, %object
	.size	__func__.49170, 23
__func__.49170:
	.ascii	"gbam_write_data_tohost\000"
	.space	1
	.type	__func__.49241, %object
	.size	__func__.49241, 19
__func__.49241:
	.ascii	"gbam_epin_complete\000"
	.space	1
	.type	__func__.51423, %object
	.size	__func__.51423, 19
__func__.51423:
	.ascii	"ghsic_data_receive\000"
	.space	1
	.type	__func__.58624, %object
	.size	__func__.58624, 15
__func__.58624:
	.ascii	"eth_start_xmit\000"
	.space	1
	.type	__func__.49799, %object
	.size	__func__.49799, 26
__func__.49799:
	.ascii	"grmnet_ctrl_smd_connect_w\000"
	.space	2
	.type	__func__.49289, %object
	.size	__func__.49289, 14
__func__.49289:
	.ascii	"gbam_start_rx\000"
	.space	2
	.type	__func__.49256, %object
	.size	__func__.49256, 20
__func__.49256:
	.ascii	"gbam_epout_complete\000"
	.type	__func__.50120, %object
	.size	__func__.50120, 17
__func__.50120:
	.ascii	"rmnet_ctrl_ioctl\000"
	.space	3
	.type	__func__.58347, %object
	.size	__func__.58347, 15
__func__.58347:
	.ascii	"rndis_qc_ioctl\000"
	.space	1
	.type	__func__.57693, %object
	.size	__func__.57693, 11
__func__.57693:
	.ascii	"mbim_ioctl\000"
	.space	1
	.type	__func__.38532, %object
	.size	__func__.38532, 24
__func__.38532:
	.ascii	"usb_rmnet_mux_ctrl_read\000"
	.type	__func__.50074, %object
	.size	__func__.50074, 16
__func__.50074:
	.ascii	"rmnet_ctrl_read\000"
	.type	__func__.53507, %object
	.size	__func__.53507, 15
__func__.53507:
	.ascii	"ccid_ctrl_read\000"
	.space	1
	.type	__func__.38556, %object
	.size	__func__.38556, 25
__func__.38556:
	.ascii	"usb_rmnet_mux_ctrl_write\000"
	.space	3
	.type	__func__.50103, %object
	.size	__func__.50103, 17
__func__.50103:
	.ascii	"rmnet_ctrl_write\000"
	.space	3
	.type	__func__.65125, %object
	.size	__func__.65125, 35
__func__.65125:
	.ascii	"usb_diag_update_pid_and_serial_num\000"
	.space	5
	.type	audio_hw_info, %object
	.size	audio_hw_info, 64
audio_hw_info:
	.word	65811
	.space	4
	.word	4
	.word	0
	.space	4
	.word	44100
	.word	44100
	.word	2
	.word	2
	.word	1048576
	.word	64
	.word	524288
	.word	2
	.word	1024
	.space	8
	.type	__func__.48624, %object
	.size	__func__.48624, 13
__func__.48624:
	.ascii	"gsmd_rx_push\000"
	.space	3
	.type	__func__.48420, %object
	.size	__func__.48420, 15
__func__.48420:
	.ascii	"gsdio_ch_probe\000"
	.space	1
	.type	__func__.48802, %object
	.size	__func__.48802, 15
__func__.48802:
	.ascii	"gsmd_ch_remove\000"
	.space	1
	.type	__func__.48788, %object
	.size	__func__.48788, 14
__func__.48788:
	.ascii	"gsmd_ch_probe\000"
	.space	2
	.type	__func__.49464, %object
	.size	__func__.49464, 19
__func__.49464:
	.ascii	"gbam_data_ch_probe\000"
	.space	1
	.type	__func__.49866, %object
	.size	__func__.49866, 26
__func__.49866:
	.ascii	"grmnet_ctrl_smd_ch_remove\000"
	.space	2
	.type	__func__.49851, %object
	.size	__func__.49851, 25
__func__.49851:
	.ascii	"grmnet_ctrl_smd_ch_probe\000"
	.space	3
	.type	__func__.51066, %object
	.size	__func__.51066, 18
__func__.51066:
	.ascii	"ghsic_ctrl_remove\000"
	.space	2
	.type	__func__.48752, %object
	.size	__func__.48752, 18
__func__.48752:
	.ascii	"gsmd_notify_modem\000"
	.space	2
	.type	__func__.48733, %object
	.size	__func__.48733, 18
__func__.48733:
	.ascii	"gsmd_connect_work\000"
	.space	2
	.type	__func__.49221, %object
	.size	__func__.49221, 22
__func__.49221:
	.ascii	"gbam_data_write_tobam\000"
	.space	2
	.type	__func__.49443, %object
	.size	__func__.49443, 21
__func__.49443:
	.ascii	"gbam2bam_resume_work\000"
	.space	3
	.type	__func__.57933, %object
	.size	__func__.57933, 25
__func__.57933:
	.ascii	"bam2bam_data_resume_work\000"
	.space	3
	.type	__func__.49434, %object
	.size	__func__.49434, 22
__func__.49434:
	.ascii	"gbam2bam_suspend_work\000"
	.space	2
	.type	__func__.57924, %object
	.size	__func__.57924, 26
__func__.57924:
	.ascii	"bam2bam_data_suspend_work\000"
	.space	2
	.type	__func__.49412, %object
	.size	__func__.49412, 22
__func__.49412:
	.ascii	"gbam2bam_connect_work\000"
	.space	2
	.type	__func__.49297, %object
	.size	__func__.49297, 22
__func__.49297:
	.ascii	"gbam_start_endless_rx\000"
	.space	2
	.type	__func__.49304, %object
	.size	__func__.49304, 22
__func__.49304:
	.ascii	"gbam_start_endless_tx\000"
	.space	2
	.type	__func__.57826, %object
	.size	__func__.57826, 26
__func__.57826:
	.ascii	"bam2bam_data_connect_work\000"
	.space	2
	.type	__func__.57774, %object
	.size	__func__.57774, 26
__func__.57774:
	.ascii	"bam_data_start_endless_rx\000"
	.space	2
	.type	__func__.57781, %object
	.size	__func__.57781, 26
__func__.57781:
	.ascii	"bam_data_start_endless_tx\000"
	.space	2
	.type	__func__.57803, %object
	.size	__func__.57803, 23
__func__.57803:
	.ascii	"bam_data_peer_reset_cb\000"
	.space	1
	.type	__func__.58363, %object
	.size	__func__.58363, 14
__func__.58363:
	.ascii	"rndis_qc_init\000"
	.space	2
	.type	__func__.38577, %object
	.size	__func__.38577, 27
__func__.38577:
	.ascii	"rmnet_mux_ctrl_device_init\000"
	.space	1
	.type	__func__.38593, %object
	.size	__func__.38593, 20
__func__.38593:
	.ascii	"rmnet_smd_sdio_init\000"
	.type	rmnet_mux_svlte_debug_stats_ops, %object
	.size	rmnet_mux_svlte_debug_stats_ops, 108
rmnet_mux_svlte_debug_stats_ops:
	.space	8
	.word	rmnet_mux_read_stats
	.word	rmnet_mux_reset_stats
	.space	28
	.word	dbg_rmnet_mux_open
	.space	60
	.type	__func__.58368, %object
	.size	__func__.58368, 17
__func__.58368:
	.ascii	"rndis_qc_cleanup\000"
	.space	3
	.type	__func__.57721, %object
	.size	__func__.57721, 14
__func__.57721:
	.ascii	"fmbim_cleanup\000"
	.space	2
	.type	__func__.58572, %object
	.size	__func__.58572, 12
__func__.58572:
	.ascii	"tx_complete\000"
	.type	__func__.56835, %object
	.size	__func__.56835, 13
__func__.56835:
	.ascii	"rndis_rm_hdr\000"
	.space	3
	.type	CSWTCH.2716, %object
	.size	CSWTCH.2716, 12
CSWTCH.2716:
	.word	.LC1490
	.word	.LC1491
	.word	.LC1492
	.type	__func__.63227, %object
	.size	__func__.63227, 29
__func__.63227:
	.ascii	"conn_gadget_function_cleanup\000"
	.space	3
	.type	__func__.63218, %object
	.size	__func__.63218, 20
__func__.63218:
	.ascii	"conn_gadget_cleanup\000"
	.type	__func__.63223, %object
	.size	__func__.63223, 26
__func__.63223:
	.ascii	"conn_gadget_function_init\000"
	.space	2
	.type	__func__.63165, %object
	.size	__func__.63165, 18
__func__.63165:
	.ascii	"conn_gadget_setup\000"
	.space	2
	.type	__func__.63185, %object
	.size	__func__.63185, 34
__func__.63185:
	.ascii	"conn_gadget_usb_buffer_size_store\000"
	.space	2
	.type	__func__.64645, %object
	.size	__func__.64645, 20
__func__.64645:
	.ascii	"remote_wakeup_store\000"
	.type	__func__.64425, %object
	.size	__func__.64425, 27
__func__.64425:
	.ascii	"mass_storage_product_store\000"
	.space	1
	.type	__func__.64408, %object
	.size	__func__.64408, 26
__func__.64408:
	.ascii	"mass_storage_vendor_store\000"
	.space	2
	.type	__func__.63535, %object
	.size	__func__.63535, 13
__func__.63535:
	.ascii	"ncm_wrap_ntb\000"
	.space	3
	.type	__func__.63620, %object
	.size	__func__.63620, 9
__func__.63620:
	.ascii	"ncm_work\000"
	.space	3
	.type	__func__.64972, %object
	.size	__func__.64972, 11
__func__.64972:
	.ascii	"macos_show\000"
	.space	1
	.type	__func__.64962, %object
	.size	__func__.64962, 23
__func__.64962:
	.ascii	"ss_host_available_show\000"
	.space	1
	.type	__func__.65111, %object
	.size	__func__.65111, 21
__func__.65111:
	.ascii	"alloc_android_config\000"
	.space	3
	.type	__func__.64714, %object
	.size	__func__.64714, 16
__func__.64714:
	.ascii	"functions_store\000"
	.type	__func__.65005, %object
	.size	__func__.65005, 13
__func__.65005:
	.ascii	"android_bind\000"
	.space	3
	.type	__func__.64549, %object
	.size	__func__.64549, 23
__func__.64549:
	.ascii	"android_init_functions\000"
	.space	1
	.type	longname, %object
	.size	longname, 15
longname:
	.ascii	"Gadget Android\000"
	.space	1
	.type	__func__.63734, %object
	.size	__func__.63734, 13
__func__.63734:
	.ascii	"android_work\000"
	.space	3
	.type	__func__.45617, %object
	.size	__func__.45617, 13
__func__.45617:
	.ascii	"send_message\000"
	.space	3
	.type	__func__.45701, %object
	.size	__func__.45701, 18
__func__.45701:
	.ascii	"bulk_out_complete\000"
	.space	2
	.type	__func__.45693, %object
	.size	__func__.45693, 17
__func__.45693:
	.ascii	"bulk_in_complete\000"
	.space	3
	.type	__func__.54392, %object
	.size	__func__.54392, 18
__func__.54392:
	.ascii	"receive_file_work\000"
	.space	2
	.type	__func__.62434, %object
	.size	__func__.62434, 16
__func__.62434:
	.ascii	"f_audio_set_alt\000"
	.type	__func__.48357, %object
	.size	__func__.48357, 14
__func__.48357:
	.ascii	"gsdio_ctrl_wq\000"
	.space	2
	.type	__func__.38917, %object
	.size	__func__.38917, 15
__func__.38917:
	.ascii	"frmnet_connect\000"
	.space	1
	.type	__func__.63208, %object
	.size	__func__.63208, 36
__func__.63208:
	.ascii	"conn_gadget_in_max_packet_size_show\000"
	.type	__func__.63196, %object
	.size	__func__.63196, 37
__func__.63196:
	.ascii	"conn_gadget_out_max_packet_size_show\000"
	.space	3
	.type	__func__.63175, %object
	.size	__func__.63175, 33
__func__.63175:
	.ascii	"conn_gadget_usb_buffer_size_show\000"
	.space	3
	.type	__func__.63670, %object
	.size	__func__.63670, 22
__func__.63670:
	.ascii	"terminal_version_show\000"
	.space	2
	.type	__func__.37503, %object
	.size	__func__.37503, 29
__func__.37503:
	.ascii	"rmnet_sdio_set_modem_cbits_w\000"
	.space	3
	.type	__func__.48281, %object
	.size	__func__.48281, 20
__func__.48281:
	.ascii	"gsdio_read_complete\000"
	.type	__func__.50132, %object
	.size	__func__.50132, 16
__func__.50132:
	.ascii	"rmnet_ctrl_poll\000"
	.type	__func__.50980, %object
	.size	__func__.50980, 25
__func__.50980:
	.ascii	"ghsic_send_cbits_tomodem\000"
	.space	3
	.type	__func__.50994, %object
	.size	__func__.50994, 21
__func__.50994:
	.ascii	"ghsic_ctrl_connect_w\000"
	.space	3
	.type	__func__.51389, %object
	.size	__func__.51389, 25
__func__.51389:
	.ascii	"ghsic_data_unthrottle_tx\000"
	.space	3
	.type	__func__.51993, %object
	.size	__func__.51993, 27
__func__.51993:
	.ascii	"ghsuart_send_cbits_tomodem\000"
	.space	1
	.type	__func__.57891, %object
	.size	__func__.57891, 17
__func__.57891:
	.ascii	"bam_data_wake_cb\000"
	.space	3
	.type	__func__.53486, %object
	.size	__func__.53486, 15
__func__.53486:
	.ascii	"ccid_ctrl_open\000"
	.space	1
	.type	__func__.53386, %object
	.size	__func__.53386, 15
__func__.53386:
	.ascii	"ccid_bulk_open\000"
	.space	1
	.type	__func__.38924, %object
	.size	__func__.38924, 18
__func__.38924:
	.ascii	"frmnet_disconnect\000"
	.space	2
	.type	__func__.38831, %object
	.size	__func__.38831, 23
__func__.38831:
	.ascii	"frmnet_purge_responses\000"
	.space	1
	.type	__func__.38946, %object
	.size	__func__.38946, 20
__func__.38946:
	.ascii	"frmnet_cmd_complete\000"
	.type	__func__.58749, %object
	.size	__func__.58749, 12
__func__.58749:
	.ascii	"gether_init\000"
	.type	__func__.65179, %object
	.size	__func__.65179, 5
__func__.65179:
	.ascii	"init\000"
	.space	3
	.type	__func__.63055, %object
	.size	__func__.63055, 18
__func__.63055:
	.ascii	"conn_gadget_flush\000"
	.space	2
	.type	__func__.52333, %object
	.size	__func__.52333, 25
__func__.52333:
	.ascii	"ghsuart_data_write_tomdm\000"
	.space	3
	.type	__func__.52377, %object
	.size	__func__.52377, 22
__func__.52377:
	.ascii	"ghsuart_data_start_rx\000"
	.space	2
	.type	__func__.52317, %object
	.size	__func__.52317, 26
__func__.52317:
	.ascii	"ghsuart_data_write_tohost\000"
	.space	2
	.type	__func__.37530, %object
	.size	__func__.37530, 22
__func__.37530:
	.ascii	"rmnet_close_sdio_work\000"
	.space	2
	.type	__func__.63743, %object
	.size	__func__.63743, 24
__func__.63743:
	.ascii	"usb_gadget_connect_work\000"
	.type	__func__.49384, %object
	.size	__func__.49384, 25
__func__.49384:
	.ascii	"gbam2bam_disconnect_work\000"
	.space	3
	.type	__func__.57812, %object
	.size	__func__.57812, 29
__func__.57812:
	.ascii	"bam2bam_data_disconnect_work\000"
	.space	3
	.type	__func__.63628, %object
	.size	__func__.63628, 18
__func__.63628:
	.ascii	"ncm_function_init\000"
	.space	2
	.type	__func__.51538, %object
	.size	__func__.51538, 21
__func__.51538:
	.ascii	"ghsic_data_connect_w\000"
	.space	3
	.type	__func__.52003, %object
	.size	__func__.52003, 23
__func__.52003:
	.ascii	"ghsuart_ctrl_connect_w\000"
	.space	1
	.type	__func__.52480, %object
	.size	__func__.52480, 23
__func__.52480:
	.ascii	"ghsuart_data_connect_w\000"
	.space	1
	.type	__func__.64523, %object
	.size	__func__.64523, 25
__func__.64523:
	.ascii	"hid_function_bind_config\000"
	.space	3
	.type	__func__.44564, %object
	.size	__func__.44564, 14
__func__.44564:
	.ascii	"ffs_epfile_io\000"
	.space	2
	.type	__func__.38863, %object
	.size	__func__.38863, 14
__func__.38863:
	.ascii	"frmnet_resume\000"
	.space	2
	.type	__func__.49640, %object
	.size	__func__.49640, 12
__func__.49640:
	.ascii	"gbam_resume\000"
	.type	rndis_proc_fops, %object
	.size	rndis_proc_fops, 108
rndis_proc_fops:
	.word	0
	.word	seq_lseek
	.word	seq_read
	.word	rndis_proc_write
	.space	28
	.word	rndis_proc_open
	.space	4
	.word	single_release
	.space	52
	.type	__func__.56906, %object
	.size	__func__.56906, 11
__func__.56906:
	.ascii	"rndis_init\000"
	.space	1
	.type	__func__.57876, %object
	.size	__func__.57876, 15
__func__.57876:
	.ascii	"bam_data_setup\000"
	.space	1
	.type	__func__.57841, %object
	.size	__func__.57841, 24
__func__.57841:
	.ascii	"bam2bam_data_port_alloc\000"
	.type	__func__.64575, %object
	.size	__func__.64575, 31
__func__.64575:
	.ascii	"android_bind_enabled_functions\000"
	.space	1
	.type	__func__.57706, %object
	.size	__func__.57706, 10
__func__.57706:
	.ascii	"mbim_init\000"
	.space	2
	.type	__func__.57432, %object
	.size	__func__.57432, 26
__func__.57432:
	.ascii	"mbim_reset_function_queue\000"
	.space	2
	.type	__func__.58261, %object
	.size	__func__.58261, 16
__func__.58261:
	.ascii	"rndis_qc_resume\000"
	.type	__func__.57915, %object
	.size	__func__.57915, 16
__func__.57915:
	.ascii	"bam_data_resume\000"
	.type	__func__.58256, %object
	.size	__func__.58256, 17
__func__.58256:
	.ascii	"rndis_qc_suspend\000"
	.space	3
	.type	__func__.57908, %object
	.size	__func__.57908, 17
__func__.57908:
	.ascii	"bam_data_suspend\000"
	.space	3
	.type	__func__.57849, %object
	.size	__func__.57849, 20
__func__.57849:
	.ascii	"bam_data_disconnect\000"
	.type	__func__.56553, %object
	.size	__func__.56553, 20
__func__.56553:
	.ascii	"gen_ndis_query_resp\000"
	.type	oid_supported_list, %object
	.size	oid_supported_list, 112
oid_supported_list:
	.word	65793
	.word	65794
	.word	65795
	.word	65796
	.word	65798
	.word	65799
	.word	65802
	.word	65803
	.word	65804
	.word	65805
	.word	65814
	.word	65806
	.word	65809
	.word	65812
	.word	66050
	.word	131329
	.word	131330
	.word	131331
	.word	131332
	.word	131333
	.word	16843009
	.word	16843010
	.word	16843011
	.word	16843013
	.word	16843012
	.word	16908545
	.word	16908546
	.word	16908547
	.type	__func__.53537, %object
	.size	__func__.53537, 22
__func__.53537:
	.ascii	"ccid_ctrl_device_init\000"
	.space	2
	.type	__func__.53550, %object
	.size	__func__.53550, 11
__func__.53550:
	.ascii	"ccid_setup\000"
	.space	1
	.type	__func__.53477, %object
	.size	__func__.53477, 22
__func__.53477:
	.ascii	"ccid_bulk_device_init\000"
	.space	2
	.type	__func__.52535, %object
	.size	__func__.52535, 33
__func__.52535:
	.ascii	"ghsuart_send_controlbits_tomodem\000"
	.space	3
	.type	__func__.52413, %object
	.size	__func__.52413, 23
__func__.52413:
	.ascii	"ghsuart_dunctrl_status\000"
	.space	1
	.type	__func__.48588, %object
	.size	__func__.48588, 20
__func__.48588:
	.ascii	"gsmd_alloc_requests\000"
	.type	__func__.48575, %object
	.size	__func__.48575, 15
__func__.48575:
	.ascii	"gsmd_alloc_req\000"
	.space	1
	.type	__func__.47290, %object
	.size	__func__.47290, 12
__func__.47290:
	.ascii	"gs_start_tx\000"
	.type	__func__.47354, %object
	.size	__func__.47354, 18
__func__.47354:
	.ascii	"gs_write_complete\000"
	.space	2
	.type	__func__.50003, %object
	.size	__func__.50003, 34
__func__.50003:
	.ascii	"grmnet_ctrl_qti_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.37444, %object
	.size	__func__.37444, 26
__func__.37444:
	.ascii	"rmnet_sdio_complete_epout\000"
	.space	2
	.type	__func__.44869, %object
	.size	__func__.44869, 13
__func__.44869:
	.ascii	"ffs_do_descs\000"
	.space	3
	.type	__func__.47612, %object
	.size	__func__.47612, 16
__func__.47612:
	.ascii	"gserial_cleanup\000"
	.type	__func__.62201, %object
	.size	__func__.62201, 29
__func__.62201:
	.ascii	"f_audio_playback_ep_complete\000"
	.space	3
	.type	__func__.62225, %object
	.size	__func__.62225, 28
__func__.62225:
	.ascii	"f_audio_capture_ep_complete\000"
	.type	__func__.62243, %object
	.size	__func__.62243, 17
__func__.62243:
	.ascii	"f_audio_complete\000"
	.space	3
	.type	__func__.51411, %object
	.size	__func__.51411, 24
__func__.51411:
	.ascii	"ghsic_data_write_tohost\000"
	.type	__func__.57477, %object
	.size	__func__.57477, 21
__func__.57477:
	.ascii	"mbim_notify_complete\000"
	.space	3
	.type	__func__.57462, %object
	.size	__func__.57462, 15
__func__.57462:
	.ascii	"mbim_do_notify\000"
	.space	1
	.type	__func__.51576, %object
	.size	__func__.51576, 17
__func__.51576:
	.ascii	"ghsic_data_probe\000"
	.space	3
	.type	__func__.51053, %object
	.size	__func__.51053, 17
__func__.51053:
	.ascii	"ghsic_ctrl_probe\000"
	.space	3
	.type	__func__.62984, %object
	.size	__func__.62984, 17
__func__.62984:
	.ascii	"conn_gadget_poll\000"
	.space	3
	.type	__func__.45733, %object
	.size	__func__.45733, 18
__func__.45733:
	.ascii	"start_in_transfer\000"
	.space	2
	.type	ffs_sb_operations, %object
	.size	ffs_sb_operations, 104
ffs_sb_operations:
	.space	16
	.word	generic_delete_inode
	.space	24
	.word	simple_statfs
	.space	56
	.type	ffs_ep0_operations, %object
	.size	ffs_ep0_operations, 108
ffs_ep0_operations:
	.word	0
	.word	no_llseek
	.word	ffs_ep0_read
	.word	ffs_ep0_write
	.space	16
	.word	ffs_ep0_ioctl
	.space	8
	.word	ffs_ep0_open
	.space	4
	.word	ffs_ep0_release
	.space	52
	.type	__func__.57869, %object
	.size	__func__.57869, 17
__func__.57869:
	.ascii	"bam_data_destroy\000"
	.space	3
	.type	__func__.30988, %object
	.size	__func__.30988, 25
__func__.30988:
	.ascii	"usb_qdss_disconnect_work\000"
	.space	3
	.type	__func__.51442, %object
	.size	__func__.51442, 23
__func__.51442:
	.ascii	"ghsic_data_write_tomdm\000"
	.space	1
	.type	__func__.51492, %object
	.size	__func__.51492, 20
__func__.51492:
	.ascii	"ghsic_data_start_rx\000"
	.type	__func__.57589, %object
	.size	__func__.57589, 13
__func__.57589:
	.ascii	"mbim_suspend\000"
	.space	3
	.type	__func__.57593, %object
	.size	__func__.57593, 12
__func__.57593:
	.ascii	"mbim_resume\000"
	.type	__func__.57184, %object
	.size	__func__.57184, 15
__func__.57184:
	.ascii	"ecm_qc_suspend\000"
	.space	1
	.type	__func__.57189, %object
	.size	__func__.57189, 14
__func__.57189:
	.ascii	"ecm_qc_resume\000"
	.space	2
	.type	__func__.57629, %object
	.size	__func__.57629, 10
__func__.57629:
	.ascii	"mbim_read\000"
	.space	2
	.type	__func__.61933, %object
	.size	__func__.61933, 20
__func__.61933:
	.ascii	"gaudio_open_streams\000"
	.type	__func__.61902, %object
	.size	__func__.61902, 24
__func__.61902:
	.ascii	"playback_prepare_params\000"
	.type	__func__.61914, %object
	.size	__func__.61914, 23
__func__.61914:
	.ascii	"capture_prepare_params\000"
	.space	1
	.type	__func__.61891, %object
	.size	__func__.61891, 16
__func__.61891:
	.ascii	"pcm_buffer_size\000"
	.type	__func__.62189, %object
	.size	__func__.62189, 22
__func__.62189:
	.ascii	"f_audio_playback_work\000"
	.space	2
	.type	__func__.61951, %object
	.size	__func__.61951, 17
__func__.61951:
	.ascii	"u_audio_playback\000"
	.space	3
	.type	__func__.62938, %object
	.size	__func__.62938, 24
__func__.62938:
	.ascii	"conn_gadget_complete_in\000"
	.type	__func__.63123, %object
	.size	__func__.63123, 28
__func__.63123:
	.ascii	"conn_gadget_function_unbind\000"
	.type	__func__.56753, %object
	.size	__func__.56753, 17
__func__.56753:
	.ascii	"rndis_deregister\000"
	.space	3
	.type	__func__.65017, %object
	.size	__func__.65017, 19
__func__.65017:
	.ascii	"android_usb_unbind\000"
	.space	1
	.type	__func__.63095, %object
	.size	__func__.63095, 18
__func__.63095:
	.ascii	"conn_gadget_ioctl\000"
	.space	2
	.type	__func__.63084, %object
	.size	__func__.63084, 37
__func__.63084:
	.ascii	"conn_gadget_bind_status_copy_to_user\000"
	.space	3
	.type	__func__.58458, %object
	.size	__func__.58458, 10
__func__.58458:
	.ascii	"rx_submit\000"
	.space	2
	.type	__func__.58542, %object
	.size	__func__.58542, 13
__func__.58542:
	.ascii	"process_rx_w\000"
	.space	3
	.type	__func__.63678, %object
	.size	__func__.63678, 23
__func__.63678:
	.ascii	"terminal_version_store\000"
	.space	1
	.type	__func__.63663, %object
	.size	__func__.63663, 14
__func__.63663:
	.ascii	"set_ncm_ready\000"
	.space	2
	.type	__func__.58293, %object
	.size	__func__.58293, 16
__func__.58293:
	.ascii	"rndis_qc_unbind\000"
	.type	__func__.52520, %object
	.size	__func__.52520, 20
__func__.52520:
	.ascii	"ghsuart_data_remove\000"
	.type	__func__.51585, %object
	.size	__func__.51585, 18
__func__.51585:
	.ascii	"ghsic_data_remove\000"
	.space	2
	.type	__func__.57517, %object
	.size	__func__.57517, 11
__func__.57517:
	.ascii	"mbim_setup\000"
	.space	1
	.type	__func__.63033, %object
	.size	__func__.63033, 18
__func__.63033:
	.ascii	"conn_gadget_write\000"
	.space	2
	.type	__func__.49481, %object
	.size	__func__.49481, 20
__func__.49481:
	.ascii	"gbam_data_ch_remove\000"
	.type	__func__.38847, %object
	.size	__func__.38847, 15
__func__.38847:
	.ascii	"frmnet_suspend\000"
	.space	1
	.type	__func__.49631, %object
	.size	__func__.49631, 13
__func__.49631:
	.ascii	"gbam_suspend\000"
	.space	3
	.type	__func__.37366, %object
	.size	__func__.37366, 20
__func__.37366:
	.ascii	"rmnet_sdio_start_rx\000"
	.type	__func__.37591, %object
	.size	__func__.37591, 21
__func__.37591:
	.ascii	"rmnet_open_sdio_work\000"
	.space	3
	.type	f_midi_cin_length, %object
	.size	f_midi_cin_length, 16
f_midi_cin_length:
	.byte	0
	.byte	0
	.byte	2
	.byte	3
	.byte	3
	.byte	1
	.byte	2
	.byte	3
	.byte	3
	.byte	3
	.byte	3
	.byte	3
	.byte	2
	.byte	2
	.byte	3
	.byte	1
	.type	__func__.58231, %object
	.size	__func__.58231, 15
__func__.58231:
	.ascii	"rndis_qc_setup\000"
	.space	1
	.type	__func__.49990, %object
	.size	__func__.49990, 24
__func__.49990:
	.ascii	"rmnet_ctrl_queue_notify\000"
	.type	__func__.25453, %object
	.size	__func__.25453, 21
__func__.25453:
	.ascii	"composite_disconnect\000"
	.space	3
	.type	__func__.25257, %object
	.size	__func__.25257, 18
__func__.25257:
	.ascii	"usb_remove_config\000"
	.space	2
	.type	__func__.53102, %object
	.size	__func__.53102, 12
__func__.53102:
	.ascii	"adb_release\000"
	.type	__func__.63879, %object
	.size	__func__.63879, 20
__func__.63879:
	.ascii	"adb_closed_callback\000"
	.type	__func__.63761, %object
	.size	__func__.63761, 15
__func__.63761:
	.ascii	"android_enable\000"
	.space	1
	.type	__func__.63748, %object
	.size	__func__.63748, 33
__func__.63748:
	.ascii	"schedule_usb_gadget_connect_work\000"
	.space	3
	.type	__func__.64755, %object
	.size	__func__.64755, 13
__func__.64755:
	.ascii	"enable_store\000"
	.space	3
	.type	__func__.53095, %object
	.size	__func__.53095, 9
__func__.53095:
	.ascii	"adb_open\000"
	.space	3
	.type	__func__.49397, %object
	.size	__func__.49397, 18
__func__.49397:
	.ascii	"gbam_connect_work\000"
	.space	2
	.type	__func__.49338, %object
	.size	__func__.49338, 14
__func__.49338:
	.ascii	"gbam_start_io\000"
	.space	2
	.type	__func__.49151, %object
	.size	__func__.49151, 20
__func__.49151:
	.ascii	"gbam_alloc_requests\000"
	.type	__func__.49454, %object
	.size	__func__.49454, 19
__func__.49454:
	.ascii	"gbam_peer_reset_cb\000"
	.space	1
	.type	__func__.63920, %object
	.size	__func__.63920, 25
__func__.63920:
	.ascii	"acm_function_bind_config\000"
	.space	3
	.type	__func__.49189, %object
	.size	__func__.49189, 18
__func__.49189:
	.ascii	"gbam_data_recv_cb\000"
	.space	2
	.type	__func__.49204, %object
	.size	__func__.49204, 21
__func__.49204:
	.ascii	"gbam_data_write_done\000"
	.space	3
	.type	__func__.48404, %object
	.size	__func__.48404, 16
__func__.48404:
	.ascii	"gsdio_ch_remove\000"
	.type	__func__.48374, %object
	.size	__func__.48374, 24
__func__.48374:
	.ascii	"gsdio_ctrl_modem_status\000"
	.type	__func__.45711, %object
	.size	__func__.45711, 10
__func__.45711:
	.ascii	"fsg_setup\000"
	.space	2
	.type	__func__.64952, %object
	.size	__func__.64952, 14
__func__.64952:
	.ascii	"usb30en_store\000"
	.space	2
	.type	__func__.56467, %object
	.size	__func__.56467, 12
__func__.56467:
	.ascii	"rndis_close\000"
	.type	__func__.56774, %object
	.size	__func__.56774, 23
__func__.56774:
	.ascii	"rndis_set_param_medium\000"
	.space	1
	.type	__func__.58274, %object
	.size	__func__.58274, 15
__func__.58274:
	.ascii	"rndis_qc_close\000"
	.space	1
	.type	__func__.25102, %object
	.size	__func__.25102, 11
__func__.25102:
	.ascii	"config_buf\000"
	.space	1
	.type	__func__.25179, %object
	.size	__func__.25179, 11
__func__.25179:
	.ascii	"set_config\000"
	.space	1
	.type	__func__.25381, %object
	.size	__func__.25381, 16
__func__.25381:
	.ascii	"composite_setup\000"
	.type	gs_tty_ops, %object
	.size	gs_tty_ops, 124
gs_tty_ops:
	.space	12
	.word	gs_open
	.word	gs_close
	.space	8
	.word	gs_write
	.word	gs_put_char
	.word	gs_flush_chars
	.word	gs_write_room
	.word	gs_chars_in_buffer
	.space	16
	.word	gs_unthrottle
	.space	12
	.word	gs_break_ctl
	.space	16
	.word	gs_tiocmget
	.word	gs_tiocmset
	.space	16
	.type	__func__.47578, %object
	.size	__func__.47578, 14
__func__.47578:
	.ascii	"gserial_setup\000"
	.space	2
	.type	debug_adb_ops, %object
	.size	debug_adb_ops, 108
debug_adb_ops:
	.space	8
	.word	debug_read_status
	.space	32
	.word	serial_debug_open
	.space	60
	.type	debug_rst_ops, %object
	.size	debug_rst_ops, 108
debug_rst_ops:
	.space	12
	.word	debug_write_reset
	.space	28
	.word	serial_debug_open
	.space	60
	.type	__func__.56461, %object
	.size	__func__.56461, 11
__func__.56461:
	.ascii	"rndis_open\000"
	.space	1
	.type	__func__.58268, %object
	.size	__func__.58268, 14
__func__.58268:
	.ascii	"rndis_qc_open\000"
	.space	2
	.type	__func__.62909, %object
	.size	__func__.62909, 27
__func__.62909:
	.ascii	"conn_gadget_request_ep_out\000"
	.space	1
	.type	__func__.63049, %object
	.size	__func__.63049, 17
__func__.63049:
	.ascii	"conn_gadget_open\000"
	.space	3
	.type	__func__.62998, %object
	.size	__func__.62998, 17
__func__.62998:
	.ascii	"conn_gadget_read\000"
	.space	3
	.type	ffs_epfile_operations, %object
	.size	ffs_epfile_operations, 108
ffs_epfile_operations:
	.word	0
	.word	no_llseek
	.word	ffs_epfile_read
	.word	ffs_epfile_write
	.space	16
	.word	ffs_epfile_ioctl
	.space	8
	.word	ffs_epfile_open
	.space	4
	.word	ffs_epfile_release
	.space	52
	.type	__func__.63833, %object
	.size	__func__.63833, 26
__func__.63833:
	.ascii	"functionfs_ready_callback\000"
	.space	2
	.type	__func__.63839, %object
	.size	__func__.63839, 27
__func__.63839:
	.ascii	"functionfs_closed_callback\000"
	.space	1
	.type	__func__.44710, %object
	.size	__func__.44710, 13
__func__.44710:
	.ascii	"ffs_data_put\000"
	.space	3
	.type	__func__.38381, %object
	.size	__func__.38381, 16
__func__.38381:
	.ascii	"transport_store\000"
	.type	__func__.37962, %object
	.size	__func__.37962, 24
__func__.37962:
	.ascii	"rmnet_mux_sdio_start_rx\000"
	.type	__func__.53414, %object
	.size	__func__.53414, 15
__func__.53414:
	.ascii	"ccid_bulk_read\000"
	.space	1
	.type	__func__.63232, %object
	.size	__func__.63232, 33
__func__.63232:
	.ascii	"conn_gadget_function_bind_config\000"
	.space	3
	.type	__func__.63572, %object
	.size	__func__.63572, 9
__func__.63572:
	.ascii	"ncm_open\000"
	.space	3
	.type	__func__.63578, %object
	.size	__func__.63578, 10
__func__.63578:
	.ascii	"ncm_close\000"
	.space	2
	.type	__func__.64088, %object
	.size	__func__.64088, 26
__func__.64088:
	.ascii	"mbim_function_bind_config\000"
	.space	2
	.type	__func__.57617, %object
	.size	__func__.57617, 17
__func__.57617:
	.ascii	"mbim_bind_config\000"
	.space	3
	.type	__func__.57404, %object
	.size	__func__.57404, 15
__func__.57404:
	.ascii	"mbim_bam_setup\000"
	.space	1
	.type	debug_rmnet_sdio_stats_ops, %object
	.size	debug_rmnet_sdio_stats_ops, 108
debug_rmnet_sdio_stats_ops:
	.space	8
	.word	rmnet_sdio_read_stats
	.word	rmnet_sdio_reset_stats
	.space	28
	.word	debug_rmnet_sdio_open
	.space	60
	.type	__func__.58063, %object
	.size	__func__.58063, 9
__func__.58063:
	.ascii	"ecm_open\000"
	.space	3
	.type	__func__.58069, %object
	.size	__func__.58069, 10
__func__.58069:
	.ascii	"ecm_close\000"
	.space	2
	.type	__func__.57195, %object
	.size	__func__.57195, 12
__func__.57195:
	.ascii	"ecm_qc_open\000"
	.type	__func__.57201, %object
	.size	__func__.57201, 13
__func__.57201:
	.ascii	"ecm_qc_close\000"
	.space	3
	.type	__func__.53449, %object
	.size	__func__.53449, 16
__func__.53449:
	.ascii	"ccid_bulk_write\000"
	.type	__func__.57501, %object
	.size	__func__.57501, 19
__func__.57501:
	.ascii	"fmbim_cmd_complete\000"
	.space	1
	.type	__func__.38233, %object
	.size	__func__.38233, 27
__func__.38233:
	.ascii	"rmnet_mux_command_complete\000"
	.space	1
	.type	__func__.55772, %object
	.size	__func__.55772, 16
__func__.55772:
	.ascii	"acc_ctrlrequest\000"
	.type	__func__.49742, %object
	.size	__func__.49742, 34
__func__.49742:
	.ascii	"grmnet_ctrl_smd_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.38934, %object
	.size	__func__.38934, 26
__func__.38934:
	.ascii	"frmnet_send_cpkt_response\000"
	.space	2
	.type	__func__.38902, %object
	.size	__func__.38902, 31
__func__.38902:
	.ascii	"frmnet_ctrl_response_available\000"
	.space	1
	.type	__func__.61967, %object
	.size	__func__.61967, 16
__func__.61967:
	.ascii	"u_audio_capture\000"
	.type	__func__.62211, %object
	.size	__func__.62211, 21
__func__.62211:
	.ascii	"f_audio_capture_work\000"
	.space	3
	.type	__func__.57670, %object
	.size	__func__.57670, 11
__func__.57670:
	.ascii	"mbim_write\000"
	.space	1
	.type	__func__.57395, %object
	.size	__func__.57395, 25
__func__.57395:
	.ascii	"fmbim_send_cpkt_response\000"
	.space	3
	.type	__func__.57383, %object
	.size	__func__.57383, 30
__func__.57383:
	.ascii	"fmbim_ctrl_response_available\000"
	.space	2
	.type	__func__.57212, %object
	.size	__func__.57212, 12
__func__.57212:
	.ascii	"ecm_qc_bind\000"
	.type	__func__.57602, %object
	.size	__func__.57602, 10
__func__.57602:
	.ascii	"mbim_bind\000"
	.space	2
	.type	__func__.61974, %object
	.size	__func__.61974, 30
__func__.61974:
	.ascii	"u_audio_get_playback_channels\000"
	.space	2
	.type	__func__.61984, %object
	.size	__func__.61984, 29
__func__.61984:
	.ascii	"u_audio_get_capture_channels\000"
	.space	3
	.type	__func__.61979, %object
	.size	__func__.61979, 26
__func__.61979:
	.ascii	"u_audio_get_playback_rate\000"
	.space	2
	.type	__func__.61989, %object
	.size	__func__.61989, 25
__func__.61989:
	.ascii	"u_audio_get_capture_rate\000"
	.space	3
	.type	__func__.62467, %object
	.size	__func__.62467, 13
__func__.62467:
	.ascii	"f_audio_bind\000"
	.space	3
	.type	__func__.53374, %object
	.size	__func__.53374, 19
__func__.53374:
	.ascii	"ccid_function_bind\000"
	.space	1
	.type	__func__.39014, %object
	.size	__func__.39014, 12
__func__.39014:
	.ascii	"frmnet_bind\000"
	.type	__func__.56744, %object
	.size	__func__.56744, 15
__func__.56744:
	.ascii	"rndis_register\000"
	.space	1
	.type	__func__.56767, %object
	.size	__func__.56767, 23
__func__.56767:
	.ascii	"rndis_set_param_vendor\000"
	.space	1
	.type	__func__.56780, %object
	.size	__func__.56780, 23
__func__.56780:
	.ascii	"rndis_set_max_pkt_xfer\000"
	.space	1
	.type	__func__.56786, %object
	.size	__func__.56786, 31
__func__.56786:
	.ascii	"rndis_set_pkt_alignment_factor\000"
	.space	1
	.type	__func__.58285, %object
	.size	__func__.58285, 14
__func__.58285:
	.ascii	"rndis_qc_bind\000"
	.space	2
	.type	__func__.62968, %object
	.size	__func__.62968, 34
__func__.62968:
	.ascii	"conn_gadget_create_bulk_endpoints\000"
	.space	2
	.type	__func__.37603, %object
	.size	__func__.37603, 19
__func__.37603:
	.ascii	"rmnet_sdio_set_alt\000"
	.space	1
	.type	__func__.53350, %object
	.size	__func__.53350, 22
__func__.53350:
	.ascii	"ccid_function_set_alt\000"
	.space	2
	.type	__func__.63141, %object
	.size	__func__.63141, 29
__func__.63141:
	.ascii	"conn_gadget_function_set_alt\000"
	.space	3
	.type	__func__.64159, %object
	.size	__func__.64159, 26
__func__.64159:
	.ascii	"qdss_function_bind_config\000"
	.space	2
	.type	rmnet_smd_debug_stats_ops, %object
	.size	rmnet_smd_debug_stats_ops, 108
rmnet_smd_debug_stats_ops:
	.space	8
	.word	rmnet_smd_debug_read_stats
	.word	rmnet_smd_debug_reset_stats
	.space	28
	.word	rmnet_smd_debug_open
	.space	60
	.type	__func__.64228, %object
	.size	__func__.64228, 27
__func__.64228:
	.ascii	"rndis_function_bind_config\000"
	.space	1
	.type	eth_netdev_ops, %object
	.size	eth_netdev_ops, 136
eth_netdev_ops:
	.space	8
	.word	eth_open
	.word	eth_stop
	.word	eth_start_xmit
	.space	12
	.word	eth_mac_addr
	.word	eth_validate_addr
	.space	8
	.word	ueth_change_mtu
	.space	84
	.type	ops, %object
	.size	ops, 164
ops:
	.space	8
	.word	eth_get_drvinfo
	.space	28
	.word	ethtool_op_get_link
	.space	120
	.type	__func__.65143, %object
	.size	__func__.65143, 14
__func__.65143:
	.ascii	"android_probe\000"
	.space	2
	.type	__func__.63684, %object
	.size	__func__.63684, 26
__func__.63684:
	.ascii	"create_terminal_attribute\000"
	.space	2
	.type	__func__.25536, %object
	.size	__func__.25536, 29
__func__.25536:
	.ascii	"usb_composite_setup_continue\000"
	.space	3
	.type	__func__.46204, %object
	.size	__func__.46204, 17
__func__.46204:
	.ascii	"handle_exception\000"
	.space	3
	.type	__func__.46152, %object
	.size	__func__.46152, 17
__func__.46152:
	.ascii	"get_next_command\000"
	.space	3
	.type	__func__.45624, %object
	.size	__func__.45624, 14
__func__.45624:
	.ascii	"do_timer_stop\000"
	.space	2
	.type	__func__.45628, %object
	.size	__func__.45628, 15
__func__.45628:
	.ascii	"do_timer_reset\000"
	.space	1
	.type	__func__.45635, %object
	.size	__func__.45635, 17
__func__.45635:
	.ascii	"get_version_info\000"
	.space	3
	.type	__func__.46038, %object
	.size	__func__.46038, 13
__func__.46038:
	.ascii	"finish_reply\000"
	.space	3
	.type	__func__.26033, %object
	.size	__func__.26033, 14
__func__.26033:
	.ascii	"usb_diag_read\000"
	.space	2
	.type	__func__.26051, %object
	.size	__func__.26051, 15
__func__.26051:
	.ascii	"usb_diag_write\000"
	.space	1
	.type	__func__.64142, %object
	.size	__func__.64142, 26
__func__.64142:
	.ascii	"diag_function_bind_config\000"
	.space	2
	.type	__func__.47392, %object
	.size	__func__.47392, 12
__func__.47392:
	.ascii	"gs_start_io\000"
	.type	__func__.48190, %object
	.size	__func__.48190, 16
__func__.48190:
	.ascii	"gsdio_alloc_req\000"
	.type	__func__.48717, %object
	.size	__func__.48717, 12
__func__.48717:
	.ascii	"gsmd_notify\000"
	.type	__func__.48689, %object
	.size	__func__.48689, 14
__func__.48689:
	.ascii	"gsmd_start_io\000"
	.space	2
	.type	__func__.48213, %object
	.size	__func__.48213, 21
__func__.48213:
	.ascii	"gsdio_alloc_requests\000"
	.space	3
	.type	__func__.48224, %object
	.size	__func__.48224, 15
__func__.48224:
	.ascii	"gsdio_start_rx\000"
	.space	1
	.type	__func__.48260, %object
	.size	__func__.48260, 14
__func__.48260:
	.ascii	"gsdio_rx_push\000"
	.space	2
	.type	__func__.48245, %object
	.size	__func__.48245, 12
__func__.48245:
	.ascii	"gsdio_write\000"
	.type	__func__.48307, %object
	.size	__func__.48307, 19
__func__.48307:
	.ascii	"gsdio_read_pending\000"
	.space	1
	.type	__func__.48320, %object
	.size	__func__.48320, 14
__func__.48320:
	.ascii	"gsdio_tx_pull\000"
	.space	2
	.type	__func__.48341, %object
	.size	__func__.48341, 15
__func__.48341:
	.ascii	"gsdio_start_io\000"
	.space	1
	.type	__func__.48350, %object
	.size	__func__.48350, 16
__func__.48350:
	.ascii	"gsdio_port_free\000"
	.type	__func__.48381, %object
	.size	__func__.48381, 16
__func__.48381:
	.ascii	"gsdio_ch_notify\000"
	.type	__func__.48432, %object
	.size	__func__.48432, 17
__func__.48432:
	.ascii	"gsdio_port_alloc\000"
	.space	3
	.type	__func__.48447, %object
	.size	__func__.48447, 14
__func__.48447:
	.ascii	"gsdio_connect\000"
	.space	2
	.type	__func__.48458, %object
	.size	__func__.48458, 17
__func__.48458:
	.ascii	"gsdio_disconnect\000"
	.space	3
	.type	__func__.48516, %object
	.size	__func__.48516, 12
__func__.48516:
	.ascii	"gsdio_setup\000"
	.type	debug_gsdio_ops, %object
	.size	debug_gsdio_ops, 108
debug_gsdio_ops:
	.space	8
	.word	debug_sdio_read_stats
	.word	debug_sdio_reset_stats
	.space	28
	.word	debug_sdio_open
	.space	60
	.type	__func__.48762, %object
	.size	__func__.48762, 13
__func__.48762:
	.ascii	"gsmd_connect\000"
	.space	3
	.type	__func__.48773, %object
	.size	__func__.48773, 16
__func__.48773:
	.ascii	"gsmd_disconnect\000"
	.type	__func__.48874, %object
	.size	__func__.48874, 11
__func__.48874:
	.ascii	"gsmd_setup\000"
	.space	1
	.type	__func__.48822, %object
	.size	__func__.48822, 16
__func__.48822:
	.ascii	"gsmd_port_alloc\000"
	.type	debug_gsmd_ops, %object
	.size	debug_gsmd_ops, 108
debug_gsmd_ops:
	.space	8
	.word	debug_smd_read_stats
	.word	debug_smd_reset_stats
	.space	28
	.word	debug_smd_open
	.space	60
	.type	__func__.49579, %object
	.size	__func__.49579, 16
__func__.49579:
	.ascii	"gbam_disconnect\000"
	.type	__func__.49595, %object
	.size	__func__.49595, 13
__func__.49595:
	.ascii	"gbam_connect\000"
	.space	3
	.type	__func__.49606, %object
	.size	__func__.49606, 11
__func__.49606:
	.ascii	"gbam_setup\000"
	.space	1
	.type	__func__.49510, %object
	.size	__func__.49510, 16
__func__.49510:
	.ascii	"gbam_port_alloc\000"
	.type	__func__.49523, %object
	.size	__func__.49523, 20
__func__.49523:
	.ascii	"gbam2bam_port_alloc\000"
	.type	gbam_stats_ops, %object
	.size	gbam_stats_ops, 108
gbam_stats_ops:
	.space	8
	.word	gbam_read_stats
	.word	gbam_reset_stats
	.space	92
	.type	__func__.49812, %object
	.size	__func__.49812, 18
__func__.49812:
	.ascii	"gsmd_ctrl_connect\000"
	.space	2
	.type	__func__.49834, %object
	.size	__func__.49834, 21
__func__.49834:
	.ascii	"gsmd_ctrl_disconnect\000"
	.space	3
	.type	__func__.49901, %object
	.size	__func__.49901, 16
__func__.49901:
	.ascii	"gsmd_ctrl_setup\000"
	.type	ctrl_names, %object
	.size	ctrl_names, 24
ctrl_names:
	.word	.LC1732
	.word	.LC1733
	.word	.LC1734
	.word	.LC1733
	.space	8
	.type	__func__.49890, %object
	.size	__func__.49890, 27
__func__.49890:
	.ascii	"grmnet_ctrl_smd_port_alloc\000"
	.space	1
	.type	__func__.50021, %object
	.size	__func__.50021, 18
__func__.50021:
	.ascii	"gqti_ctrl_connect\000"
	.space	2
	.type	__func__.50032, %object
	.size	__func__.50032, 21
__func__.50032:
	.ascii	"gqti_ctrl_disconnect\000"
	.space	3
	.type	__func__.51007, %object
	.size	__func__.51007, 19
__func__.51007:
	.ascii	"ghsic_ctrl_connect\000"
	.space	1
	.type	__func__.51026, %object
	.size	__func__.51026, 22
__func__.51026:
	.ascii	"ghsic_ctrl_disconnect\000"
	.space	2
	.type	__func__.51093, %object
	.size	__func__.51093, 25
__func__.51093:
	.ascii	"ghsic_ctrl_set_port_name\000"
	.space	3
	.type	__func__.51102, %object
	.size	__func__.51102, 17
__func__.51102:
	.ascii	"ghsic_ctrl_setup\000"
	.space	3
	.type	__func__.51083, %object
	.size	__func__.51083, 17
__func__.51083:
	.ascii	"gctrl_port_alloc\000"
	.space	3
	.type	__func__.51613, %object
	.size	__func__.51613, 22
__func__.51613:
	.ascii	"ghsic_data_disconnect\000"
	.space	2
	.type	__func__.51630, %object
	.size	__func__.51630, 19
__func__.51630:
	.ascii	"ghsic_data_connect\000"
	.space	1
	.type	__func__.51765, %object
	.size	__func__.51765, 25
__func__.51765:
	.ascii	"ghsic_data_set_port_name\000"
	.space	3
	.type	__func__.51774, %object
	.size	__func__.51774, 17
__func__.51774:
	.ascii	"ghsic_data_setup\000"
	.space	3
	.type	__func__.51598, %object
	.size	__func__.51598, 22
__func__.51598:
	.ascii	"ghsic_data_port_alloc\000"
	.space	2
	.type	__func__.52012, %object
	.size	__func__.52012, 21
__func__.52012:
	.ascii	"ghsuart_ctrl_connect\000"
	.space	3
	.type	__func__.52030, %object
	.size	__func__.52030, 24
__func__.52030:
	.ascii	"ghsuart_ctrl_disconnect\000"
	.type	__func__.52081, %object
	.size	__func__.52081, 19
__func__.52081:
	.ascii	"ghsuart_ctrl_setup\000"
	.space	1
	.type	__func__.52068, %object
	.size	__func__.52068, 24
__func__.52068:
	.ascii	"ghsuart_ctrl_port_alloc\000"
	.type	CSWTCH.3056, %object
	.size	CSWTCH.3056, 36
CSWTCH.3056:
	.word	.LC1481
	.word	.LC1482
	.word	.LC1483
	.word	.LC1484
	.word	.LC1485
	.word	.LC1486
	.word	.LC1487
	.word	.LC1488
	.word	.LC1489
	.type	__func__.52561, %object
	.size	__func__.52561, 24
__func__.52561:
	.ascii	"ghsuart_data_disconnect\000"
	.type	__func__.38877, %object
	.size	__func__.38877, 15
__func__.38877:
	.ascii	"frmnet_disable\000"
	.space	1
	.type	__func__.38802, %object
	.size	__func__.38802, 23
__func__.38802:
	.ascii	"gport_rmnet_disconnect\000"
	.space	1
	.type	__func__.52581, %object
	.size	__func__.52581, 21
__func__.52581:
	.ascii	"ghsuart_data_connect\000"
	.space	3
	.type	__func__.38888, %object
	.size	__func__.38888, 15
__func__.38888:
	.ascii	"frmnet_set_alt\000"
	.space	1
	.type	__func__.38779, %object
	.size	__func__.38779, 20
__func__.38779:
	.ascii	"gport_rmnet_connect\000"
	.type	__func__.52663, %object
	.size	__func__.52663, 19
__func__.52663:
	.ascii	"ghsuart_data_setup\000"
	.space	1
	.type	ghsuart_data_names, %object
	.size	ghsuart_data_names, 8
ghsuart_data_names:
	.word	.LC1724
	.word	.LC1725
	.type	__func__.52544, %object
	.size	__func__.52544, 24
__func__.52544:
	.ascii	"ghsuart_data_port_alloc\000"
	.type	__func__.39049, %object
	.size	__func__.39049, 17
__func__.39049:
	.ascii	"frmnet_init_port\000"
	.space	3
	.type	__func__.63986, %object
	.size	__func__.63986, 27
__func__.63986:
	.ascii	"rmnet_function_bind_config\000"
	.space	1
	.type	__func__.38752, %object
	.size	__func__.38752, 18
__func__.38752:
	.ascii	"rmnet_gport_setup\000"
	.space	2
	.type	__func__.39028, %object
	.size	__func__.39028, 19
__func__.39028:
	.ascii	"frmnet_bind_config\000"
	.space	1
	.type	__func__.56721, %object
	.size	__func__.56721, 17
__func__.56721:
	.ascii	"rndis_msg_parser\000"
	.space	3
	.type	__func__.56633, %object
	.size	__func__.56633, 18
__func__.56633:
	.ascii	"gen_ndis_set_resp\000"
	.space	2
	.type	__func__.56411, %object
	.size	__func__.56411, 23
__func__.56411:
	.ascii	"rndis_command_complete\000"
	.space	1
	.type	__func__.58209, %object
	.size	__func__.58209, 26
__func__.58209:
	.ascii	"rndis_qc_command_complete\000"
	.space	2
	.type	__func__.56760, %object
	.size	__func__.56760, 20
__func__.56760:
	.ascii	"rndis_set_param_dev\000"
	.type	__func__.57094, %object
	.size	__func__.57094, 17
__func__.57094:
	.ascii	"ecm_qc_bam_setup\000"
	.space	3
	.type	__func__.57227, %object
	.size	__func__.57227, 19
__func__.57227:
	.ascii	"ecm_qc_bind_config\000"
	.space	1
	.type	__func__.58844, %object
	.size	__func__.58844, 19
__func__.58844:
	.ascii	"gether_qc_get_macs\000"
	.space	1
	.type	__func__.57410, %object
	.size	__func__.57410, 22
__func__.57410:
	.ascii	"mbim_configure_params\000"
	.space	2
	.type	__func__.57585, %object
	.size	__func__.57585, 13
__func__.57585:
	.ascii	"mbim_disable\000"
	.space	3
	.type	__func__.57423, %object
	.size	__func__.57423, 20
__func__.57423:
	.ascii	"mbim_bam_disconnect\000"
	.type	__func__.57862, %object
	.size	__func__.57862, 17
__func__.57862:
	.ascii	"bam_data_connect\000"
	.space	3
	.type	__func__.57573, %object
	.size	__func__.57573, 13
__func__.57573:
	.ascii	"mbim_set_alt\000"
	.space	3
	.type	__func__.57419, %object
	.size	__func__.57419, 17
__func__.57419:
	.ascii	"mbim_bam_connect\000"
	.space	3
	.type	__func__.58154, %object
	.size	__func__.58154, 19
__func__.58154:
	.ascii	"rndis_qc_bam_setup\000"
	.space	1
	.type	__func__.58313, %object
	.size	__func__.58313, 28
__func__.58313:
	.ascii	"rndis_qc_bind_config_vendor\000"
	.type	__func__.64344, %object
	.size	__func__.64344, 25
__func__.64344:
	.ascii	"ecm_function_bind_config\000"
	.space	3
	.type	__func__.58723, %object
	.size	__func__.58723, 15
__func__.58723:
	.ascii	"gether_connect\000"
	.space	1
	.type	__func__.63501, %object
	.size	__func__.63501, 12
__func__.63501:
	.ascii	"ncm_set_alt\000"
	.type	eth_qc_netdev_ops, %object
	.size	eth_qc_netdev_ops, 136
eth_qc_netdev_ops:
	.space	8
	.word	eth_qc_open
	.word	eth_qc_stop
	.word	eth_qc_start_xmit
	.space	12
	.word	eth_mac_addr
	.word	eth_validate_addr
	.space	8
	.word	ueth_qc_change_mtu
	.space	84
	.type	qc_ethtool_ops, %object
	.size	qc_ethtool_ops, 164
qc_ethtool_ops:
	.space	8
	.word	eth_qc_get_drvinfo
	.space	28
	.word	ethtool_op_get_link
	.space	120
	.type	__func__.64235, %object
	.size	__func__.64235, 30
__func__.64235:
	.ascii	"rndis_qc_function_bind_config\000"
	.space	2
	.type	__func__.64037, %object
	.size	__func__.64037, 28
__func__.64037:
	.ascii	"ecm_qc_function_bind_config\000"
	.type	__func__.57110, %object
	.size	__func__.57110, 22
__func__.57110:
	.ascii	"ecm_qc_bam_disconnect\000"
	.space	2
	.type	__func__.57104, %object
	.size	__func__.57104, 19
__func__.57104:
	.ascii	"ecm_qc_bam_connect\000"
	.space	1
	.type	__func__.58251, %object
	.size	__func__.58251, 17
__func__.58251:
	.ascii	"rndis_qc_disable\000"
	.space	3
	.type	__func__.58168, %object
	.size	__func__.58168, 24
__func__.58168:
	.ascii	"rndis_qc_bam_disconnect\000"
	.type	__func__.58163, %object
	.size	__func__.58163, 21
__func__.58163:
	.ascii	"rndis_qc_bam_connect\000"
	.space	3
	.type	__func__.61996, %object
	.size	__func__.61996, 20
__func__.61996:
	.ascii	"gaudio_open_snd_dev\000"
	.type	__func__.61921, %object
	.size	__func__.61921, 27
__func__.61921:
	.ascii	"playback_default_hw_params\000"
	.space	1
	.type	__func__.61927, %object
	.size	__func__.61927, 26
__func__.61927:
	.ascii	"capture_default_hw_params\000"
	.space	2
	.type	__func__.62009, %object
	.size	__func__.62009, 13
__func__.62009:
	.ascii	"gaudio_setup\000"
	.space	3
	.type	__func__.62004, %object
	.size	__func__.62004, 21
__func__.62004:
	.ascii	"gaudio_close_snd_dev\000"
	.space	3
	.type	__func__.62496, %object
	.size	__func__.62496, 18
__func__.62496:
	.ascii	"audio_bind_config\000"
	.space	2
	.type	__func__.62947, %object
	.size	__func__.62947, 25
__func__.62947:
	.ascii	"conn_gadget_complete_out\000"
	.space	3
	.type	__func__.63640, %object
	.size	__func__.63640, 25
__func__.63640:
	.ascii	"ncm_function_bind_config\000"
	.space	3
	.type	__func__.63655, %object
	.size	__func__.63655, 13
__func__.63655:
	.ascii	"is_ncm_ready\000"
	.space	3
	.type	__func__.63659, %object
	.size	__func__.63659, 26
__func__.63659:
	.ascii	"set_ncm_device_descriptor\000"
	.space	2
	.type	__func__.63692, %object
	.size	__func__.63692, 22
__func__.63692:
	.ascii	"terminal_ctrl_request\000"
	.space	2
	.type	__func__.44462, %object
	.size	__func__.44462, 16
__func__.44462:
	.ascii	"__ffs_ep0_stall\000"
	.type	__func__.44841, %object
	.size	__func__.44841, 12
__func__.44841:
	.ascii	"ffs_do_desc\000"
	.type	__func__.38129, %object
	.size	__func__.38129, 27
__func__.38129:
	.ascii	"rmnet_mux_smd_data_rx_tlet\000"
	.space	1
	.type	__func__.38106, %object
	.size	__func__.38106, 27
__func__.38106:
	.ascii	"rmnet_mux_smd_data_tx_tlet\000"
	.space	1
	.type	__func__.38255, %object
	.size	__func__.38255, 16
__func__.38255:
	.ascii	"rmnet_mux_setup\000"
	.type	__func__.38583, %object
	.size	__func__.38583, 28
__func__.38583:
	.ascii	"rmnet_smd_sdio_function_add\000"
	.type	__func__.31136, %object
	.size	__func__.31136, 13
__func__.31136:
	.ascii	"qdss_cleanup\000"
	.space	3
	.type	__func__.30964, %object
	.size	__func__.30964, 10
__func__.30964:
	.ascii	"qdss_bind\000"
	.space	2
	.type	__func__.30954, %object
	.size	__func__.30954, 11
__func__.30954:
	.ascii	"clear_desc\000"
	.space	1
	.type	__func__.30948, %object
	.size	__func__.30948, 10
__func__.30948:
	.ascii	"clear_eps\000"
	.space	2
	.type	__func__.30973, %object
	.size	__func__.30973, 12
__func__.30973:
	.ascii	"qdss_unbind\000"
	.type	__func__.31018, %object
	.size	__func__.31018, 13
__func__.31018:
	.ascii	"qdss_set_alt\000"
	.space	3
	.type	__func__.30979, %object
	.size	__func__.30979, 17
__func__.30979:
	.ascii	"qdss_eps_disable\000"
	.space	3
	.type	__func__.30995, %object
	.size	__func__.30995, 13
__func__.30995:
	.ascii	"qdss_disable\000"
	.space	3
	.type	__func__.31007, %object
	.size	__func__.31007, 22
__func__.31007:
	.ascii	"usb_qdss_connect_work\000"
	.space	2
	.type	__func__.30843, %object
	.size	__func__.30843, 25
__func__.30843:
	.ascii	"set_qdss_data_connection\000"
	.space	3
	.type	__func__.31030, %object
	.size	__func__.31030, 17
__func__.31030:
	.ascii	"qdss_bind_config\000"
	.space	3
	.type	__func__.53041, %object
	.size	__func__.53041, 9
__func__.53041:
	.ascii	"adb_read\000"
	.space	3
	.type	__func__.53076, %object
	.size	__func__.53076, 10
__func__.53076:
	.ascii	"adb_write\000"
	.space	2
	.type	__func__.53020, %object
	.size	__func__.53020, 26
__func__.53020:
	.ascii	"adb_create_bulk_endpoints\000"
	.space	2
	.type	__func__.53114, %object
	.size	__func__.53114, 18
__func__.53114:
	.ascii	"adb_function_bind\000"
	.space	2
	.type	__func__.53134, %object
	.size	__func__.53134, 21
__func__.53134:
	.ascii	"adb_function_set_alt\000"
	.space	3
	.type	__func__.53141, %object
	.size	__func__.53141, 21
__func__.53141:
	.ascii	"adb_function_disable\000"
	.space	3
	.type	__func__.53399, %object
	.size	__func__.53399, 18
__func__.53399:
	.ascii	"ccid_bulk_release\000"
	.space	2
	.type	__func__.53327, %object
	.size	__func__.53327, 20
__func__.53327:
	.ascii	"ccid_function_setup\000"
	.type	__func__.53543, %object
	.size	__func__.53543, 17
__func__.53543:
	.ascii	"ccid_bind_config\000"
	.space	3
	.type	__func__.54364, %object
	.size	__func__.54364, 15
__func__.54364:
	.ascii	"send_file_work\000"
	.space	1
	.type	__func__.54300, %object
	.size	__func__.54300, 9
__func__.54300:
	.ascii	"mtp_read\000"
	.space	3
	.type	__func__.54333, %object
	.size	__func__.54333, 10
__func__.54333:
	.ascii	"mtp_write\000"
	.space	2
	.type	__func__.54415, %object
	.size	__func__.54415, 15
__func__.54415:
	.ascii	"mtp_send_event\000"
	.space	1
	.type	__func__.54441, %object
	.size	__func__.54441, 10
__func__.54441:
	.ascii	"mtp_ioctl\000"
	.space	2
	.type	__func__.54261, %object
	.size	__func__.54261, 26
__func__.54261:
	.ascii	"mtp_create_bulk_endpoints\000"
	.space	2
	.type	__func__.54485, %object
	.size	__func__.54485, 18
__func__.54485:
	.ascii	"mtp_function_bind\000"
	.space	2
	.type	__func__.54512, %object
	.size	__func__.54512, 21
__func__.54512:
	.ascii	"mtp_function_set_alt\000"
	.space	3
	.type	__func__.54519, %object
	.size	__func__.54519, 21
__func__.54519:
	.ascii	"mtp_function_disable\000"
	.space	3
	.type	__func__.46055, %object
	.size	__func__.46055, 12
__func__.46055:
	.ascii	"send_status\000"
	.type	__func__.46073, %object
	.size	__func__.46073, 14
__func__.46073:
	.ascii	"check_command\000"
	.space	2
	.type	__func__.45797, %object
	.size	__func__.45797, 11
__func__.45797:
	.ascii	"do_read_cd\000"
	.space	1
	.type	__func__.45852, %object
	.size	__func__.45852, 9
__func__.45852:
	.ascii	"do_write\000"
	.space	3
	.type	__func__.45890, %object
	.size	__func__.45890, 10
__func__.45890:
	.ascii	"do_verify\000"
	.space	2
	.type	__func__.45978, %object
	.size	__func__.45978, 14
__func__.45978:
	.ascii	"do_start_stop\000"
	.space	2
	.type	__func__.45823, %object
	.size	__func__.45823, 8
__func__.45823:
	.ascii	"do_read\000"
	.type	__func__.45670, %object
	.size	__func__.45670, 13
__func__.45670:
	.ascii	"fsg_set_halt\000"
	.space	3
	.type	__func__.46012, %object
	.size	__func__.46012, 23
__func__.46012:
	.ascii	"wedge_bulk_in_endpoint\000"
	.space	1
	.type	__func__.46139, %object
	.size	__func__.46139, 13
__func__.46139:
	.ascii	"received_cbw\000"
	.space	3
	.type	__func__.46166, %object
	.size	__func__.46166, 17
__func__.46166:
	.ascii	"do_set_interface\000"
	.space	3
	.type	__func__.46293, %object
	.size	__func__.46293, 16
__func__.46293:
	.ascii	"fsg_common_init\000"
	.type	__func__.45437, %object
	.size	__func__.45437, 14
__func__.45437:
	.ascii	"fsg_lun_close\000"
	.space	2
	.type	__func__.45518, %object
	.size	__func__.45518, 16
__func__.45518:
	.ascii	"fsg_store_cdrom\000"
	.type	__func__.45485, %object
	.size	__func__.45485, 13
__func__.45485:
	.ascii	"fsg_store_ro\000"
	.space	3
	.type	__func__.45432, %object
	.size	__func__.45432, 13
__func__.45432:
	.ascii	"fsg_lun_open\000"
	.space	3
	.type	__func__.45506, %object
	.size	__func__.45506, 15
__func__.45506:
	.ascii	"fsg_store_file\000"
	.space	1
	.type	__func__.46316, %object
	.size	__func__.46316, 11
__func__.46316:
	.ascii	"fsg_unbind\000"
	.space	1
	.type	__func__.55649, %object
	.size	__func__.55649, 9
__func__.55649:
	.ascii	"acc_read\000"
	.space	3
	.type	__func__.55683, %object
	.size	__func__.55683, 10
__func__.55683:
	.ascii	"acc_write\000"
	.space	2
	.type	__func__.55514, %object
	.size	__func__.55514, 16
__func__.55514:
	.ascii	"acc_complete_in\000"
	.type	__func__.55521, %object
	.size	__func__.55521, 17
__func__.55521:
	.ascii	"acc_complete_out\000"
	.space	3
	.type	__func__.55617, %object
	.size	__func__.55617, 22
__func__.55617:
	.ascii	"create_bulk_endpoints\000"
	.space	2
	.type	__func__.55783, %object
	.size	__func__.55783, 18
__func__.55783:
	.ascii	"acc_function_bind\000"
	.space	2
	.type	__func__.55873, %object
	.size	__func__.55873, 21
__func__.55873:
	.ascii	"acc_function_set_alt\000"
	.space	3
	.type	__func__.55880, %object
	.size	__func__.55880, 21
__func__.55880:
	.ascii	"acc_function_disable\000"
	.space	3
	.type	__func__.64498, %object
	.size	__func__.64498, 24
__func__.64498:
	.ascii	"android_uasp_connect_cb\000"
	.type	__func__.63418, %object
	.size	__func__.63418, 20
__func__.63418:
	.ascii	"ncm_notify_complete\000"
	.type	__func__.63396, %object
	.size	__func__.63396, 14
__func__.63396:
	.ascii	"ncm_do_notify\000"
	.space	2
	.type	__func__.63589, %object
	.size	__func__.63589, 9
__func__.63589:
	.ascii	"ncm_bind\000"
	.space	3
	.type	__func__.63596, %object
	.size	__func__.63596, 11
__func__.63596:
	.ascii	"ncm_unbind\000"
	.space	1
	.type	__func__.63428, %object
	.size	__func__.63428, 20
__func__.63428:
	.ascii	"ncm_ep0out_complete\000"
	.type	__func__.63566, %object
	.size	__func__.63566, 12
__func__.63566:
	.ascii	"ncm_disable\000"
	.type	__func__.58860, %object
	.size	__func__.58860, 21
__func__.58860:
	.ascii	"gether_qc_setup_name\000"
	.space	3
	.type	__func__.58714, %object
	.size	__func__.58714, 18
__func__.58714:
	.ascii	"gether_setup_name\000"
	.space	2
	.type	__func__.58244, %object
	.size	__func__.58244, 17
__func__.58244:
	.ascii	"rndis_qc_set_alt\000"
	.space	3
	.type	__func__.58011, %object
	.size	__func__.58011, 20
__func__.58011:
	.ascii	"ecm_notify_complete\000"
	.type	__func__.58080, %object
	.size	__func__.58080, 9
__func__.58080:
	.ascii	"ecm_bind\000"
	.space	3
	.type	__func__.58087, %object
	.size	__func__.58087, 11
__func__.58087:
	.ascii	"ecm_unbind\000"
	.space	1
	.type	__func__.57990, %object
	.size	__func__.57990, 14
__func__.57990:
	.ascii	"ecm_do_notify\000"
	.space	2
	.type	__func__.58042, %object
	.size	__func__.58042, 12
__func__.58042:
	.ascii	"ecm_set_alt\000"
	.type	__func__.58026, %object
	.size	__func__.58026, 10
__func__.58026:
	.ascii	"ecm_setup\000"
	.space	2
	.type	__func__.58057, %object
	.size	__func__.58057, 12
__func__.58057:
	.ascii	"ecm_disable\000"
	.type	__func__.57133, %object
	.size	__func__.57133, 23
__func__.57133:
	.ascii	"ecm_qc_notify_complete\000"
	.space	1
	.type	__func__.57219, %object
	.size	__func__.57219, 14
__func__.57219:
	.ascii	"ecm_qc_unbind\000"
	.space	2
	.type	__func__.57082, %object
	.size	__func__.57082, 17
__func__.57082:
	.ascii	"ecm_qc_do_notify\000"
	.space	3
	.type	__func__.57164, %object
	.size	__func__.57164, 15
__func__.57164:
	.ascii	"ecm_qc_set_alt\000"
	.space	1
	.type	__func__.57179, %object
	.size	__func__.57179, 15
__func__.57179:
	.ascii	"ecm_qc_disable\000"
	.space	1
	.type	__func__.56889, %object
	.size	__func__.56889, 17
__func__.56889:
	.ascii	"rndis_proc_write\000"
	.space	3
	.type	__func__.56376, %object
	.size	__func__.56376, 17
__func__.56376:
	.ascii	"rndis_add_header\000"
	.space	3
	.type	__func__.56386, %object
	.size	__func__.56386, 25
__func__.56386:
	.ascii	"rndis_response_available\000"
	.space	3
	.type	__func__.56478, %object
	.size	__func__.56478, 11
__func__.56478:
	.ascii	"rndis_bind\000"
	.space	1
	.type	__func__.56445, %object
	.size	__func__.56445, 14
__func__.56445:
	.ascii	"rndis_set_alt\000"
	.space	2
	.type	__func__.56399, %object
	.size	__func__.56399, 24
__func__.56399:
	.ascii	"rndis_response_complete\000"
	.type	__func__.56432, %object
	.size	__func__.56432, 12
__func__.56432:
	.ascii	"rndis_setup\000"
	.type	__func__.56454, %object
	.size	__func__.56454, 14
__func__.56454:
	.ascii	"rndis_disable\000"
	.space	2
	.type	__func__.53885, %object
	.size	__func__.53885, 14
__func__.53885:
	.ascii	"f_midi_unbind\000"
	.space	2
	.type	__func__.53848, %object
	.size	__func__.53848, 16
__func__.53848:
	.ascii	"f_midi_complete\000"
	.type	__func__.53876, %object
	.size	__func__.53876, 15
__func__.53876:
	.ascii	"f_midi_disable\000"
	.space	1
	.type	__func__.52868, %object
	.size	__func__.52868, 24
__func__.52868:
	.ascii	"acm_notify_serial_state\000"
	.type	__func__.52908, %object
	.size	__func__.52908, 9
__func__.52908:
	.ascii	"acm_bind\000"
	.space	3
	.type	__func__.52832, %object
	.size	__func__.52832, 12
__func__.52832:
	.ascii	"acm_set_alt\000"
	.type	__func__.52796, %object
	.size	__func__.52796, 29
__func__.52796:
	.ascii	"acm_complete_set_line_coding\000"
	.space	3
	.type	__func__.52821, %object
	.size	__func__.52821, 10
__func__.52821:
	.ascii	"acm_setup\000"
	.space	2
	.type	__func__.52840, %object
	.size	__func__.52840, 12
__func__.52840:
	.ascii	"acm_disable\000"
	.type	__func__.52677, %object
	.size	__func__.52677, 18
__func__.52677:
	.ascii	"ghsuart_data_init\000"
	.space	2
	.type	__func__.52293, %object
	.size	__func__.52293, 28
__func__.52293:
	.ascii	"ghsuart_data_alloc_requests\000"
	.type	__func__.52398, %object
	.size	__func__.52398, 22
__func__.52398:
	.ascii	"ghsuart_data_start_io\000"
	.space	2
	.type	__func__.52443, %object
	.size	__func__.52443, 21
__func__.52443:
	.ascii	"ghsuart_notify_event\000"
	.space	3
	.type	__func__.52139, %object
	.size	__func__.52139, 18
__func__.52139:
	.ascii	"ghsuart_ctrl_init\000"
	.space	2
	.type	__func__.51372, %object
	.size	__func__.51372, 26
__func__.51372:
	.ascii	"ghsic_data_alloc_requests\000"
	.space	2
	.type	__func__.51517, %object
	.size	__func__.51517, 20
__func__.51517:
	.ascii	"ghsic_data_start_io\000"
	.type	__func__.50047, %object
	.size	__func__.50047, 16
__func__.50047:
	.ascii	"rmnet_ctrl_open\000"
	.type	__func__.50059, %object
	.size	__func__.50059, 19
__func__.50059:
	.ascii	"rmnet_ctrl_release\000"
	.space	1
	.type	__func__.47625, %object
	.size	__func__.47625, 16
__func__.47625:
	.ascii	"gserial_connect\000"
	.type	__func__.47407, %object
	.size	__func__.47407, 8
__func__.47407:
	.ascii	"gs_open\000"
	.type	__func__.47426, %object
	.size	__func__.47426, 9
__func__.47426:
	.ascii	"gs_close\000"
	.space	3
	.type	__func__.40938, %object
	.size	__func__.40938, 20
__func__.40938:
	.ascii	"audio_data_complete\000"
	.type	__func__.40997, %object
	.size	__func__.40997, 14
__func__.40997:
	.ascii	"audio_set_alt\000"
	.space	2
	.type	__func__.41003, %object
	.size	__func__.41003, 14
__func__.41003:
	.ascii	"audio_disable\000"
	.space	2
	.type	__func__.40966, %object
	.size	__func__.40966, 30
__func__.40966:
	.ascii	"audio_source_get_endpoint_req\000"
	.space	2
	.type	__func__.40948, %object
	.size	__func__.40948, 30
__func__.40948:
	.ascii	"audio_source_set_endpoint_req\000"
	.space	2
	.type	__func__.40987, %object
	.size	__func__.40987, 12
__func__.40987:
	.ascii	"audio_setup\000"
	.type	__func__.37266, %object
	.size	__func__.37266, 26
__func__.37266:
	.ascii	"rmnet_sdio_ctl_receive_cb\000"
	.space	2
	.type	__func__.37287, %object
	.size	__func__.37287, 24
__func__.37287:
	.ascii	"rmnet_sdio_sts_callback\000"
	.type	__func__.37350, %object
	.size	__func__.37350, 17
__func__.37350:
	.ascii	"rmnet_sdio_setup\000"
	.space	3
	.type	__func__.31842, %object
	.size	__func__.31842, 22
__func__.31842:
	.ascii	"rmnet_control_rx_tlet\000"
	.space	2
	.type	__func__.31947, %object
	.size	__func__.31947, 19
__func__.31947:
	.ascii	"rmnet_data_rx_tlet\000"
	.space	1
	.type	__func__.31922, %object
	.size	__func__.31922, 19
__func__.31922:
	.ascii	"rmnet_data_tx_tlet\000"
	.space	1
	.type	__func__.32030, %object
	.size	__func__.32030, 19
__func__.32030:
	.ascii	"rmnet_smd_ch_probe\000"
	.space	1
	.type	__func__.31887, %object
	.size	__func__.31887, 16
__func__.31887:
	.ascii	"rmnet_smd_setup\000"
	.type	__func__.31123, %object
	.size	__func__.31123, 15
__func__.31123:
	.ascii	"usb_qdss_close\000"
	.space	1
	.type	__func__.31098, %object
	.size	__func__.31098, 14
__func__.31098:
	.ascii	"usb_qdss_open\000"
	.space	2
	.type	__func__.31075, %object
	.size	__func__.31075, 20
__func__.31075:
	.ascii	"usb_qdss_ctrl_write\000"
	.type	__func__.31058, %object
	.size	__func__.31058, 19
__func__.31058:
	.ascii	"usb_qdss_ctrl_read\000"
	.space	1
	.type	__func__.30891, %object
	.size	__func__.30891, 25
__func__.30891:
	.ascii	"qdss_ctrl_write_complete\000"
	.space	3
	.type	__func__.30903, %object
	.size	__func__.30903, 24
__func__.30903:
	.ascii	"qdss_ctrl_read_complete\000"
	.type	__func__.30935, %object
	.size	__func__.30935, 19
__func__.30935:
	.ascii	"usb_qdss_alloc_req\000"
	.space	1
	.type	__func__.30915, %object
	.size	__func__.30915, 18
__func__.30915:
	.ascii	"usb_qdss_free_req\000"
	.space	2
	.type	__func__.30851, %object
	.size	__func__.30851, 10
__func__.30851:
	.ascii	"init_data\000"
	.space	2
	.type	__func__.30833, %object
	.size	__func__.30833, 13
__func__.30833:
	.ascii	"send_sps_req\000"
	.space	3
	.type	__func__.26063, %object
	.size	__func__.26063, 22
__func__.26063:
	.ascii	"diag_function_disable\000"
	.space	2
	.type	__func__.26109, %object
	.size	__func__.26109, 18
__func__.26109:
	.ascii	"diag_function_add\000"
	.space	2
	.type	__func__.25496, %object
	.size	__func__.25496, 18
__func__.25496:
	.ascii	"composite_suspend\000"
	.space	2
	.type	__func__.25511, %object
	.size	__func__.25511, 17
__func__.25511:
	.ascii	"composite_resume\000"
	.space	3
	.type	__func__.25360, %object
	.size	__func__.25360, 25
__func__.25360:
	.ascii	"composite_setup_complete\000"
	.space	3
	.type	__func__.25247, %object
	.size	__func__.25247, 14
__func__.25247:
	.ascii	"unbind_config\000"
	.space	2
	.type	__func__.25160, %object
	.size	__func__.25160, 13
__func__.25160:
	.ascii	"reset_config\000"
	.space	3
	.type	__func__.25218, %object
	.size	__func__.25218, 15
__func__.25218:
	.ascii	"usb_add_config\000"
	.space	1
	.type	__func__.25057, %object
	.size	__func__.25057, 17
__func__.25057:
	.ascii	"usb_add_function\000"
	.space	3
	.type	mirrorlink_shortname, %object
	.size	mirrorlink_shortname, 8
mirrorlink_shortname:
	.ascii	"usb_ncm\000"
	.type	conn_gadget_fops, %object
	.size	conn_gadget_fops, 108
conn_gadget_fops:
	.word	0
	.space	4
	.word	conn_gadget_read
	.word	conn_gadget_write
	.space	12
	.word	conn_gadget_poll
	.word	conn_gadget_ioctl
	.space	8
	.word	conn_gadget_open
	.word	conn_gadget_flush
	.word	conn_gadget_release
	.space	52
	.type	conn_gadget_shortname, %object
	.size	conn_gadget_shortname, 17
conn_gadget_shortname:
	.ascii	"android_ssusbcon\000"
	.space	3
	.type	__param_str_audio_capture_buf_size, %object
	.size	__param_str_audio_capture_buf_size, 31
__param_str_audio_capture_buf_size:
	.ascii	"android.audio_capture_buf_size\000"
	.space	1
	.type	__param_str_req_capture_count, %object
	.size	__param_str_req_capture_count, 26
__param_str_req_capture_count:
	.ascii	"android.req_capture_count\000"
	.space	2
	.type	__param_str_req_capture_buf_size, %object
	.size	__param_str_req_capture_buf_size, 29
__param_str_req_capture_buf_size:
	.ascii	"android.req_capture_buf_size\000"
	.space	3
	.type	__param_str_audio_playback_buf_size, %object
	.size	__param_str_audio_playback_buf_size, 32
__param_str_audio_playback_buf_size:
	.ascii	"android.audio_playback_buf_size\000"
	.type	__param_str_req_playback_count, %object
	.size	__param_str_req_playback_count, 27
__param_str_req_playback_count:
	.ascii	"android.req_playback_count\000"
	.space	1
	.type	__param_str_req_playback_buf_size, %object
	.size	__param_str_req_playback_buf_size, 30
__param_str_req_playback_buf_size:
	.ascii	"android.req_playback_buf_size\000"
	.space	2
	.type	__param_str_fn_cntl, %object
	.size	__param_str_fn_cntl, 16
__param_str_fn_cntl:
	.ascii	"android.fn_cntl\000"
	.type	__param_str_fn_cap, %object
	.size	__param_str_fn_cap, 15
__param_str_fn_cap:
	.ascii	"android.fn_cap\000"
	.space	1
	.type	__param_str_fn_play, %object
	.size	__param_str_fn_play, 16
__param_str_fn_play:
	.ascii	"android.fn_play\000"
	.type	__param_str_qc_host_addr, %object
	.size	__param_str_qc_host_addr, 21
__param_str_qc_host_addr:
	.ascii	"android.qc_host_addr\000"
	.space	3
	.type	__param_str_qc_dev_addr, %object
	.size	__param_str_qc_dev_addr, 20
__param_str_qc_dev_addr:
	.ascii	"android.qc_dev_addr\000"
	.type	__param_str_host_addr, %object
	.size	__param_str_host_addr, 18
__param_str_host_addr:
	.ascii	"android.host_addr\000"
	.space	2
	.type	__param_str_dev_addr, %object
	.size	__param_str_dev_addr, 17
__param_str_dev_addr:
	.ascii	"android.dev_addr\000"
	.space	3
	.type	__param_str_qmult, %object
	.size	__param_str_qmult, 14
__param_str_qmult:
	.ascii	"android.qmult\000"
	.space	2
	.type	rndis_qc_fops, %object
	.size	rndis_qc_fops, 108
rndis_qc_fops:
	.word	0
	.space	28
	.word	rndis_qc_ioctl
	.space	8
	.word	rndis_qc_open_dev
	.space	4
	.word	rndis_qc_release_dev
	.space	52
	.type	mbim_fops, %object
	.size	mbim_fops, 108
mbim_fops:
	.word	0
	.space	4
	.word	mbim_read
	.word	mbim_write
	.space	16
	.word	mbim_ioctl
	.space	8
	.word	mbim_open
	.space	4
	.word	mbim_release
	.space	52
	.type	__param_str_rndis_ul_max_xfer_size_rcvd, %object
	.size	__param_str_rndis_ul_max_xfer_size_rcvd, 36
__param_str_rndis_ul_max_xfer_size_rcvd:
	.ascii	"android.rndis_ul_max_xfer_size_rcvd\000"
	.type	__param_str_rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	__param_str_rndis_ul_max_pkt_per_xfer_rcvd, 39
__param_str_rndis_ul_max_pkt_per_xfer_rcvd:
	.ascii	"android.rndis_ul_max_pkt_per_xfer_rcvd\000"
	.space	1
	.type	__param_str_rndis_ul_max_pkt_per_xfer, %object
	.size	__param_str_rndis_ul_max_pkt_per_xfer, 34
__param_str_rndis_ul_max_pkt_per_xfer:
	.ascii	"android.rndis_ul_max_pkt_per_xfer\000"
	.space	2
	.type	__param_str_rndis_dl_max_pkt_per_xfer, %object
	.size	__param_str_rndis_dl_max_pkt_per_xfer, 34
__param_str_rndis_dl_max_pkt_per_xfer:
	.ascii	"android.rndis_dl_max_pkt_per_xfer\000"
	.space	2
	.type	acc_hid_table, %object
	.size	acc_hid_table, 32
acc_hid_table:
	.short	3
	.space	2
	.word	-1
	.word	-1
	.space	4
	.space	16
	.type	acc_fops, %object
	.size	acc_fops, 108
acc_fops:
	.word	0
	.space	4
	.word	acc_read
	.word	acc_write
	.space	16
	.word	acc_ioctl
	.space	8
	.word	acc_open
	.space	4
	.word	acc_release
	.space	52
	.type	mtp_fops, %object
	.size	mtp_fops, 108
mtp_fops:
	.word	0
	.space	4
	.word	mtp_read
	.word	mtp_write
	.space	16
	.word	mtp_ioctl
	.space	8
	.word	mtp_open
	.space	4
	.word	mtp_release
	.space	52
	.type	mtp_shortname, %object
	.size	mtp_shortname, 8
mtp_shortname:
	.ascii	"mtp_usb\000"
	.type	__param_str_mtp_tx_reqs, %object
	.size	__param_str_mtp_tx_reqs, 20
__param_str_mtp_tx_reqs:
	.ascii	"android.mtp_tx_reqs\000"
	.type	__param_str_mtp_tx_req_len, %object
	.size	__param_str_mtp_tx_req_len, 23
__param_str_mtp_tx_req_len:
	.ascii	"android.mtp_tx_req_len\000"
	.space	1
	.type	__param_str_mtp_rx_req_len, %object
	.size	__param_str_mtp_rx_req_len, 23
__param_str_mtp_rx_req_len:
	.ascii	"android.mtp_rx_req_len\000"
	.space	1
	.type	ccid_ctrl_fops, %object
	.size	ccid_ctrl_fops, 108
ccid_ctrl_fops:
	.word	0
	.space	4
	.word	ccid_ctrl_read
	.space	20
	.word	ccid_ctrl_ioctl
	.space	8
	.word	ccid_ctrl_open
	.space	4
	.word	ccid_ctrl_release
	.space	52
	.type	ccid_bulk_fops, %object
	.size	ccid_bulk_fops, 108
ccid_bulk_fops:
	.word	0
	.space	4
	.word	ccid_bulk_read
	.word	ccid_bulk_write
	.space	28
	.word	ccid_bulk_open
	.space	4
	.word	ccid_bulk_release
	.space	52
	.type	adb_fops, %object
	.size	adb_fops, 108
adb_fops:
	.word	0
	.space	4
	.word	adb_read
	.word	adb_write
	.space	28
	.word	adb_open
	.space	4
	.word	adb_release
	.space	52
	.type	adb_shortname, %object
	.size	adb_shortname, 12
adb_shortname:
	.ascii	"android_adb\000"
	.type	modem_fops, %object
	.size	modem_fops, 108
modem_fops:
	.word	0
	.word	no_llseek
	.word	modem_read
	.space	16
	.word	modem_poll
	.word	modem_ioctl
	.space	8
	.word	modem_open
	.space	4
	.word	modem_close
	.space	52
	.type	__param_str_ghsuart_data_tx_intr_thld, %object
	.size	__param_str_ghsuart_data_tx_intr_thld, 34
__param_str_ghsuart_data_tx_intr_thld:
	.ascii	"android.ghsuart_data_tx_intr_thld\000"
	.space	2
	.type	__param_str_ghsuart_data_rx_req_size, %object
	.size	__param_str_ghsuart_data_rx_req_size, 33
__param_str_ghsuart_data_rx_req_size:
	.ascii	"android.ghsuart_data_rx_req_size\000"
	.space	3
	.type	__param_str_ghsuart_data_serial_rx_q_size, %object
	.size	__param_str_ghsuart_data_serial_rx_q_size, 38
__param_str_ghsuart_data_serial_rx_q_size:
	.ascii	"android.ghsuart_data_serial_rx_q_size\000"
	.space	2
	.type	__param_str_ghsuart_data_serial_tx_q_size, %object
	.size	__param_str_ghsuart_data_serial_tx_q_size, 38
__param_str_ghsuart_data_serial_tx_q_size:
	.ascii	"android.ghsuart_data_serial_tx_q_size\000"
	.space	2
	.type	__param_str_ghsuart_data_rmnet_rx_q_size, %object
	.size	__param_str_ghsuart_data_rmnet_rx_q_size, 37
__param_str_ghsuart_data_rmnet_rx_q_size:
	.ascii	"android.ghsuart_data_rmnet_rx_q_size\000"
	.space	3
	.type	__param_str_ghsuart_data_rmnet_tx_q_size, %object
	.size	__param_str_ghsuart_data_rmnet_tx_q_size, 37
__param_str_ghsuart_data_rmnet_tx_q_size:
	.ascii	"android.ghsuart_data_rmnet_tx_q_size\000"
	.space	3
	.type	__param_str_record_timestamp, %object
	.size	__param_str_record_timestamp, 25
__param_str_record_timestamp:
	.ascii	"android.record_timestamp\000"
	.space	3
	.type	__param_str_ghsic_data_pend_limit_with_bridge, %object
	.size	__param_str_ghsic_data_pend_limit_with_bridge, 42
__param_str_ghsic_data_pend_limit_with_bridge:
	.ascii	"android.ghsic_data_pend_limit_with_bridge\000"
	.space	2
	.type	__param_str_ghsic_data_fctrl_dis_thld, %object
	.size	__param_str_ghsic_data_fctrl_dis_thld, 34
__param_str_ghsic_data_fctrl_dis_thld:
	.ascii	"android.ghsic_data_fctrl_dis_thld\000"
	.space	2
	.type	__param_str_ghsic_data_fctrl_en_thld, %object
	.size	__param_str_ghsic_data_fctrl_en_thld, 33
__param_str_ghsic_data_fctrl_en_thld:
	.ascii	"android.ghsic_data_fctrl_en_thld\000"
	.space	3
	.type	__param_str_ghsic_data_fctrl_support, %object
	.size	__param_str_ghsic_data_fctrl_support, 33
__param_str_ghsic_data_fctrl_support:
	.ascii	"android.ghsic_data_fctrl_support\000"
	.space	3
	.type	__param_str_ghsic_data_tx_intr_thld, %object
	.size	__param_str_ghsic_data_tx_intr_thld, 32
__param_str_ghsic_data_tx_intr_thld:
	.ascii	"android.ghsic_data_tx_intr_thld\000"
	.type	__param_str_ghsic_data_rx_req_size, %object
	.size	__param_str_ghsic_data_rx_req_size, 31
__param_str_ghsic_data_rx_req_size:
	.ascii	"android.ghsic_data_rx_req_size\000"
	.space	1
	.type	__param_str_ghsic_data_serial_rx_q_size, %object
	.size	__param_str_ghsic_data_serial_rx_q_size, 36
__param_str_ghsic_data_serial_rx_q_size:
	.ascii	"android.ghsic_data_serial_rx_q_size\000"
	.type	__param_str_ghsic_data_serial_tx_q_size, %object
	.size	__param_str_ghsic_data_serial_tx_q_size, 36
__param_str_ghsic_data_serial_tx_q_size:
	.ascii	"android.ghsic_data_serial_tx_q_size\000"
	.type	__param_str_ghsic_data_rmnet_rx_q_size, %object
	.size	__param_str_ghsic_data_rmnet_rx_q_size, 35
__param_str_ghsic_data_rmnet_rx_q_size:
	.ascii	"android.ghsic_data_rmnet_rx_q_size\000"
	.space	1
	.type	__param_str_ghsic_data_rmnet_tx_q_size, %object
	.size	__param_str_ghsic_data_rmnet_tx_q_size, 35
__param_str_ghsic_data_rmnet_tx_q_size:
	.ascii	"android.ghsic_data_rmnet_tx_q_size\000"
	.space	1
	.type	rmnet_ctrl_fops, %object
	.size	rmnet_ctrl_fops, 108
rmnet_ctrl_fops:
	.word	0
	.space	4
	.word	rmnet_ctrl_read
	.word	rmnet_ctrl_write
	.space	12
	.word	rmnet_ctrl_poll
	.word	rmnet_ctrl_ioctl
	.space	8
	.word	rmnet_ctrl_open
	.space	4
	.word	rmnet_ctrl_release
	.space	52
	.type	__param_str_dl_intr_threshold, %object
	.size	__param_str_dl_intr_threshold, 26
__param_str_dl_intr_threshold:
	.ascii	"android.dl_intr_threshold\000"
	.space	2
	.type	__param_str_bam_mux_rx_req_size, %object
	.size	__param_str_bam_mux_rx_req_size, 28
__param_str_bam_mux_rx_req_size:
	.ascii	"android.bam_mux_rx_req_size\000"
	.type	__param_str_bam_mux_rx_q_size, %object
	.size	__param_str_bam_mux_rx_q_size, 26
__param_str_bam_mux_rx_q_size:
	.ascii	"android.bam_mux_rx_q_size\000"
	.space	2
	.type	__param_str_bam_mux_tx_q_size, %object
	.size	__param_str_bam_mux_tx_q_size, 26
__param_str_bam_mux_tx_q_size:
	.ascii	"android.bam_mux_tx_q_size\000"
	.space	2
	.type	__param_str_bam_mux_rx_fctrl_dis_thld, %object
	.size	__param_str_bam_mux_rx_fctrl_dis_thld, 34
__param_str_bam_mux_rx_fctrl_dis_thld:
	.ascii	"android.bam_mux_rx_fctrl_dis_thld\000"
	.space	2
	.type	__param_str_bam_mux_rx_fctrl_support, %object
	.size	__param_str_bam_mux_rx_fctrl_support, 33
__param_str_bam_mux_rx_fctrl_support:
	.ascii	"android.bam_mux_rx_fctrl_support\000"
	.space	3
	.type	__param_str_bam_mux_rx_fctrl_en_thld, %object
	.size	__param_str_bam_mux_rx_fctrl_en_thld, 33
__param_str_bam_mux_rx_fctrl_en_thld:
	.ascii	"android.bam_mux_rx_fctrl_en_thld\000"
	.space	3
	.type	__param_str_bam_mux_tx_pkt_drop_thld, %object
	.size	__param_str_bam_mux_tx_pkt_drop_thld, 33
__param_str_bam_mux_tx_pkt_drop_thld:
	.ascii	"android.bam_mux_tx_pkt_drop_thld\000"
	.space	3
	.type	__param_str_bam_pending_limit, %object
	.size	__param_str_bam_pending_limit, 26
__param_str_bam_pending_limit:
	.ascii	"android.bam_pending_limit\000"
	.space	2
	.type	fsg_string_interface, %object
	.size	fsg_string_interface, 13
fsg_string_interface:
	.ascii	"Mass Storage\000"
	.space	3
	.type	rmnet_mux_ctrl_fops, %object
	.size	rmnet_mux_ctrl_fops, 108
rmnet_mux_ctrl_fops:
	.word	0
	.space	4
	.word	usb_rmnet_mux_ctrl_read
	.word	usb_rmnet_mux_ctrl_write
	.space	16
	.word	usb_rmnet_mux_ctrl_ioctl
	.space	8
	.word	usb_rmnet_mux_ctrl_open
	.space	4
	.word	usb_rmnet_mux_ctrl_release
	.space	52
	.type	__param_str_mux_sdio_rx_fctrl_dis_thld, %object
	.size	__param_str_mux_sdio_rx_fctrl_dis_thld, 35
__param_str_mux_sdio_rx_fctrl_dis_thld:
	.ascii	"android.mux_sdio_rx_fctrl_dis_thld\000"
	.space	1
	.type	__param_str_mux_sdio_rx_fctrl_en_thld, %object
	.size	__param_str_mux_sdio_rx_fctrl_en_thld, 34
__param_str_mux_sdio_rx_fctrl_en_thld:
	.ascii	"android.mux_sdio_rx_fctrl_en_thld\000"
	.space	2
	.type	__param_str_mux_sdio_tx_pkt_drop_thld, %object
	.size	__param_str_mux_sdio_tx_pkt_drop_thld, 34
__param_str_mux_sdio_tx_pkt_drop_thld:
	.ascii	"android.mux_sdio_tx_pkt_drop_thld\000"
	.space	2
	.type	__param_str_rmnet_mux_smd_data_ch, %object
	.size	__param_str_rmnet_mux_smd_data_ch, 30
__param_str_rmnet_mux_smd_data_ch:
	.ascii	"android.rmnet_mux_smd_data_ch\000"
	.space	2
	.type	__param_str_rmnet_mux_sdio_data_ch, %object
	.size	__param_str_rmnet_mux_sdio_data_ch, 31
__param_str_rmnet_mux_sdio_data_ch:
	.ascii	"android.rmnet_mux_sdio_data_ch\000"
	.space	1
	.type	__param_str_rmnet_mux_sdio_ctl_ch, %object
	.size	__param_str_rmnet_mux_sdio_ctl_ch, 30
__param_str_rmnet_mux_sdio_ctl_ch:
	.ascii	"android.rmnet_mux_sdio_ctl_ch\000"
	.space	2
	.type	__param_str_sdio_rx_fctrl_dis_thld, %object
	.size	__param_str_sdio_rx_fctrl_dis_thld, 31
__param_str_sdio_rx_fctrl_dis_thld:
	.ascii	"android.sdio_rx_fctrl_dis_thld\000"
	.space	1
	.type	__param_str_sdio_rx_fctrl_en_thld, %object
	.size	__param_str_sdio_rx_fctrl_en_thld, 30
__param_str_sdio_rx_fctrl_en_thld:
	.ascii	"android.sdio_rx_fctrl_en_thld\000"
	.space	2
	.type	__param_str_sdio_tx_pkt_drop_thld, %object
	.size	__param_str_sdio_tx_pkt_drop_thld, 30
__param_str_sdio_tx_pkt_drop_thld:
	.ascii	"android.sdio_tx_pkt_drop_thld\000"
	.space	2
	.type	__param_str_rmnet_sdio_data_ch, %object
	.size	__param_str_rmnet_sdio_data_ch, 27
__param_str_rmnet_sdio_data_ch:
	.ascii	"android.rmnet_sdio_data_ch\000"
	.space	1
	.type	__param_str_rmnet_sdio_ctl_ch, %object
	.size	__param_str_rmnet_sdio_ctl_ch, 26
__param_str_rmnet_sdio_ctl_ch:
	.ascii	"android.rmnet_sdio_ctl_ch\000"
	.space	2
	.type	__param_str_rmnet_data_ch, %object
	.size	__param_str_rmnet_data_ch, 22
__param_str_rmnet_data_ch:
	.ascii	"android.rmnet_data_ch\000"
	.space	2
	.type	__param_str_rmnet_ctl_ch, %object
	.size	__param_str_rmnet_ctl_ch, 21
__param_str_rmnet_ctl_ch:
	.ascii	"android.rmnet_ctl_ch\000"
	.space	3
	.type	__param_str_iSerialNumber, %object
	.size	__param_str_iSerialNumber, 22
__param_str_iSerialNumber:
	.ascii	"android.iSerialNumber\000"
	.space	2
	.type	__param_str_iProduct, %object
	.size	__param_str_iProduct, 17
__param_str_iProduct:
	.ascii	"android.iProduct\000"
	.space	3
	.type	__param_str_iManufacturer, %object
	.size	__param_str_iManufacturer, 22
__param_str_iManufacturer:
	.ascii	"android.iManufacturer\000"
	.space	2
	.type	__param_str_bcdDevice, %object
	.size	__param_str_bcdDevice, 18
__param_str_bcdDevice:
	.ascii	"android.bcdDevice\000"
	.space	2
	.type	__param_str_idProduct, %object
	.size	__param_str_idProduct, 18
__param_str_idProduct:
	.ascii	"android.idProduct\000"
	.space	2
	.type	__param_str_idVendor, %object
	.size	__param_str_idVendor, 17
__param_str_idVendor:
	.ascii	"android.idVendor\000"
	.data
	.align	3
	.set	.LANCHOR0,. + 0
	.set	.LANCHOR7,. + 8184
	.type	usb_diag_ch_list, %object
	.size	usb_diag_ch_list, 8
usb_diag_ch_list:
	.word	usb_diag_ch_list
	.word	usb_diag_ch_list
	.type	uac1_ac_header_desc, %object
	.size	uac1_ac_header_desc, 10
uac1_ac_header_desc:
	.byte	10
	.byte	36
	.byte	1
	.2byte	256
	.2byte	52
	.byte	2
	.space	2
	.space	2
	.type	ntb_parameters, %object
	.size	ntb_parameters, 28
ntb_parameters:
	.short	28
	.short	3
	.word	16384
	.short	4
	.short	0
	.short	4
	.space	2
	.word	16384
	.short	4
	.short	0
	.short	4
	.space	2
	.type	ndp16_opts, %object
	.size	ndp16_opts, 44
ndp16_opts:
	.word	1213023054
	.word	810369870
	.word	12
	.word	8
	.word	4
	.word	1
	.word	1
	.word	1
	.word	0
	.word	0
	.word	1
	.type	ndp32_opts, %object
	.size	ndp32_opts, 44
ndp32_opts:
	.word	1751999342
	.word	812475246
	.word	16
	.word	16
	.word	8
	.word	2
	.word	2
	.word	2
	.word	1
	.word	2
	.word	2
	.type	device_desc, %object
	.size	device_desc, 18
device_desc:
	.byte	18
	.byte	1
	.short	512
	.byte	0
	.space	3
	.short	6353
	.short	1
	.short	-1
	.space	3
	.byte	1
	.space	2
	.type	dev_attr_suspended, %object
	.size	dev_attr_suspended, 16
dev_attr_suspended:
	.word	.LC1770
	.short	292
	.space	2
	.word	composite_show_suspended
	.word	0
	.type	_rs.51985, %object
	.size	_rs.51985, 24
_rs.51985:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	mbim_ntb_parameters, %object
	.size	mbim_ntb_parameters, 28
mbim_ntb_parameters:
	.short	28
	.short	1
	.word	16384
	.short	4
	.short	0
	.short	4
	.space	2
	.word	4096
	.short	4
	.short	0
	.short	4
	.short	0
	.type	mbim_ext_config_desc, %object
	.size	mbim_ext_config_desc, 40
mbim_ext_config_desc:
	.word	40
	.short	256
	.short	4
	.byte	1
	.space	7
	.byte	0
	.byte	1
	.byte	65
	.byte	76
	.byte	84
	.byte	82
	.byte	67
	.byte	70
	.byte	71
	.space	1
	.space	14
	.type	mbim_os_string, %object
	.size	mbim_os_string, 18
mbim_os_string:
	.byte	18
	.byte	3
	.byte	77
	.byte	0
	.byte	83
	.byte	0
	.byte	70
	.byte	0
	.byte	84
	.byte	0
	.byte	49
	.byte	0
	.byte	48
	.byte	0
	.byte	48
	.byte	0
	.byte	-91
	.byte	0
	.space	2
	.type	usb_qdss_ch_list, %object
	.size	usb_qdss_ch_list, 8
usb_qdss_ch_list:
	.word	usb_qdss_ch_list
	.word	usb_qdss_ch_list
	.type	android_platform_driver, %object
	.size	android_platform_driver, 80
android_platform_driver:
	.word	android_probe
	.word	android_remove
	.space	12
	.word	.LC1202
	.space	16
	.word	usb_android_dt_match
	.space	32
	.word	android_id_table
	.type	mtp_os_string, %object
	.size	mtp_os_string, 18
mtp_os_string:
	.byte	18
	.byte	3
	.byte	77
	.byte	0
	.byte	83
	.byte	0
	.byte	70
	.byte	0
	.byte	84
	.byte	0
	.byte	49
	.byte	0
	.byte	48
	.byte	0
	.byte	48
	.byte	0
	.byte	1
	.byte	0
	.space	2
	.type	mtp_ext_config_desc, %object
	.size	mtp_ext_config_desc, 40
mtp_ext_config_desc:
	.word	40
	.short	256
	.short	4
	.byte	1
	.space	7
	.byte	0
	.byte	1
	.byte	77
	.byte	84
	.byte	80
	.space	5
	.space	14
	.type	ccid_class_desc, %object
	.size	ccid_class_desc, 54
ccid_class_desc:
	.byte	54
	.byte	33
	.short	272
	.byte	0
	.byte	2
	.4byte	1
	.4byte	3580
	.4byte	3580
	.byte	0
	.4byte	9600
	.4byte	9600
	.byte	0
	.word	0
	.word	0
	.word	0
	.word	131198
	.word	512
	.byte	0
	.byte	0
	.short	0
	.byte	0
	.byte	1
	.space	2
	.type	dl_intr_threshold, %object
	.size	dl_intr_threshold, 4
dl_intr_threshold:
	.word	20
	.type	ghsic_data_fctrl_support, %object
	.size	ghsic_data_fctrl_support, 4
ghsic_data_fctrl_support:
	.word	1
	.type	ghsic_data_fctrl_en_thld, %object
	.size	ghsic_data_fctrl_en_thld, 4
ghsic_data_fctrl_en_thld:
	.word	500
	.type	qmult, %object
	.size	qmult, 4
qmult:
	.word	10
	.type	mux_sdio_rx_fctrl_en_thld, %object
	.size	mux_sdio_rx_fctrl_en_thld, 4
mux_sdio_rx_fctrl_en_thld:
	.word	1000
	.type	bam_mux_rx_fctrl_support, %object
	.size	bam_mux_rx_fctrl_support, 4
bam_mux_rx_fctrl_support:
	.word	1
	.type	bam_mux_rx_fctrl_en_thld, %object
	.size	bam_mux_rx_fctrl_en_thld, 4
bam_mux_rx_fctrl_en_thld:
	.word	500
	.type	bam_mux_rx_req_size, %object
	.size	bam_mux_rx_req_size, 4
bam_mux_rx_req_size:
	.word	2048
	.type	mtp_rx_req_len, %object
	.size	mtp_rx_req_len, 4
mtp_rx_req_len:
	.word	16384
	.type	bam_pending_limit, %object
	.size	bam_pending_limit, 4
bam_pending_limit:
	.word	220
	.type	bam_mux_rx_fctrl_dis_thld, %object
	.size	bam_mux_rx_fctrl_dis_thld, 4
bam_mux_rx_fctrl_dis_thld:
	.word	300
	.type	rmnet_device, %object
	.size	rmnet_device, 36
rmnet_device:
	.word	255
	.word	.LC1729
	.word	rmnet_ctrl_fops
	.space	24
	.type	acc_device, %object
	.size	acc_device, 36
acc_device:
	.word	255
	.word	.LC1706
	.word	acc_fops
	.space	24
	.type	rndis_qc_device, %object
	.size	rndis_qc_device, 36
rndis_qc_device:
	.word	255
	.word	.LC1616
	.word	rndis_qc_fops
	.space	24
	.type	mtp_device, %object
	.size	mtp_device, 36
mtp_device:
	.word	255
	.word	mtp_shortname
	.word	mtp_fops
	.space	24
	.type	adb_device, %object
	.size	adb_device, 36
adb_device:
	.word	255
	.word	adb_shortname
	.word	adb_fops
	.space	24
	.type	rmnet_mux_ctrl_dev, %object
	.size	rmnet_mux_ctrl_dev, 36
rmnet_mux_ctrl_dev:
	.word	255
	.word	.LC1757
	.word	rmnet_mux_ctrl_fops
	.space	24
	.type	mirrorlink_device, %object
	.size	mirrorlink_device, 36
mirrorlink_device:
	.word	255
	.word	mirrorlink_shortname
	.space	28
	.type	ccid_bulk_device, %object
	.size	ccid_bulk_device, 36
ccid_bulk_device:
	.word	255
	.word	.LC1714
	.word	ccid_bulk_fops
	.space	24
	.type	ccid_ctrl_device, %object
	.size	ccid_ctrl_device, 36
ccid_ctrl_device:
	.word	255
	.word	.LC1713
	.word	ccid_ctrl_fops
	.space	24
	.type	mbim_device, %object
	.size	mbim_device, 36
mbim_device:
	.word	255
	.word	.LC1640
	.word	mbim_fops
	.space	24
	.type	ops.53990, %object
	.size	ops.53990, 12
ops.53990:
	.word	f_midi_snd_free
	.space	8
	.type	gmidi_in_ops, %object
	.size	gmidi_in_ops, 16
gmidi_in_ops:
	.word	f_midi_in_open
	.word	f_midi_in_close
	.word	f_midi_in_trigger
	.space	4
	.type	gmidi_out_ops, %object
	.size	gmidi_out_ops, 16
gmidi_out_ops:
	.word	f_midi_out_open
	.word	f_midi_out_close
	.word	f_midi_out_trigger
	.space	4
	.type	conn_gadget_device, %object
	.size	conn_gadget_device, 36
conn_gadget_device:
	.word	255
	.word	conn_gadget_shortname
	.word	conn_gadget_fops
	.space	24
	.type	strings_dev, %object
	.size	strings_dev, 32
strings_dev:
	.space	4
	.word	manufacturer_string
	.space	4
	.word	product_string
	.space	4
	.word	serial_string
	.space	8
	.type	last_vote.63712, %object
	.size	last_vote.63712, 4
last_vote.63712:
	.word	-1
	.type	acc_hid_ll_driver, %object
	.size	acc_hid_ll_driver, 28
acc_hid_ll_driver:
	.word	acc_hid_start
	.word	acc_hid_stop
	.word	acc_hid_open
	.word	acc_hid_close
	.space	8
	.word	acc_hid_parse
	.type	ffs_fs_type, %object
	.size	ffs_fs_type, 36
ffs_fs_type:
	.word	.LC1752
	.space	4
	.word	ffs_fs_mount
	.space	8
	.word	ffs_fs_kill_sb
	.word	0
	.space	8
	.type	req_capture_buf_size, %object
	.size	req_capture_buf_size, 4
req_capture_buf_size:
	.word	32
	.type	audio_playback_buf_size, %object
	.size	audio_playback_buf_size, 4
audio_playback_buf_size:
	.word	8192
	.type	req_playback_count, %object
	.size	req_playback_count, 4
req_playback_count:
	.word	48
	.type	req_playback_buf_size, %object
	.size	req_playback_buf_size, 4
req_playback_buf_size:
	.word	32
	.type	composite_driver, %object
	.size	composite_driver, 88
composite_driver:
	.space	8
	.word	composite_unbind
	.word	composite_setup
	.word	composite_disconnect
	.word	composite_suspend
	.word	composite_resume
	.space	8
	.word	0
	.space	44
	.space	4
	.type	_rs.52335, %object
	.size	_rs.52335, 24
_rs.52335:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	ghsuart_data_rx_req_size, %object
	.size	ghsuart_data_rx_req_size, 4
ghsuart_data_rx_req_size:
	.word	2048
	.type	_rs.52387, %object
	.size	_rs.52387, 24
_rs.52387:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	ghsuart_data_tx_intr_thld, %object
	.size	ghsuart_data_tx_intr_thld, 4
ghsuart_data_tx_intr_thld:
	.word	1
	.type	ghid_device_android_keyboard, %object
	.size	ghid_device_android_keyboard, 69
ghid_device_android_keyboard:
	.byte	1
	.byte	1
	.short	8
	.short	63
	.byte	5
	.byte	1
	.byte	9
	.byte	6
	.byte	-95
	.byte	1
	.byte	5
	.byte	7
	.byte	25
	.byte	-32
	.byte	41
	.byte	-25
	.byte	21
	.byte	0
	.byte	37
	.byte	1
	.byte	117
	.byte	1
	.byte	-107
	.byte	8
	.byte	-127
	.byte	2
	.byte	-107
	.byte	1
	.byte	117
	.byte	8
	.byte	-127
	.byte	3
	.byte	-107
	.byte	5
	.byte	117
	.byte	1
	.byte	5
	.byte	8
	.byte	25
	.byte	1
	.byte	41
	.byte	5
	.byte	-111
	.byte	2
	.byte	-107
	.byte	1
	.byte	117
	.byte	3
	.byte	-111
	.byte	3
	.byte	-107
	.byte	6
	.byte	117
	.byte	8
	.byte	21
	.byte	0
	.byte	37
	.byte	101
	.byte	5
	.byte	7
	.byte	25
	.byte	0
	.byte	41
	.byte	101
	.byte	-127
	.byte	0
	.byte	-64
	.space	3
	.type	ghid_device_android_mouse, %object
	.size	ghid_device_android_mouse, 58
ghid_device_android_mouse:
	.byte	1
	.byte	2
	.short	4
	.short	52
	.byte	5
	.byte	1
	.byte	9
	.byte	2
	.byte	-95
	.byte	1
	.byte	9
	.byte	1
	.byte	-95
	.byte	0
	.byte	5
	.byte	9
	.byte	25
	.byte	1
	.byte	41
	.byte	5
	.byte	21
	.byte	0
	.byte	37
	.byte	1
	.byte	-107
	.byte	5
	.byte	117
	.byte	1
	.byte	-127
	.byte	2
	.byte	-107
	.byte	1
	.byte	117
	.byte	3
	.byte	-127
	.byte	1
	.byte	5
	.byte	1
	.byte	9
	.byte	48
	.byte	9
	.byte	49
	.byte	9
	.byte	56
	.byte	21
	.byte	-127
	.byte	37
	.byte	127
	.byte	117
	.byte	8
	.byte	-107
	.byte	3
	.byte	-127
	.byte	6
	.byte	-64
	.byte	-64
	.space	2
	.type	sdio_rx_fctrl_en_thld, %object
	.size	sdio_rx_fctrl_en_thld, 4
sdio_rx_fctrl_en_thld:
	.word	1000
	.type	audio_capture_buf_size, %object
	.size	audio_capture_buf_size, 4
audio_capture_buf_size:
	.word	8192
	.type	ghsic_data_tx_intr_thld, %object
	.size	ghsic_data_tx_intr_thld, 4
ghsic_data_tx_intr_thld:
	.word	20
	.type	ghsic_data_fctrl_dis_thld, %object
	.size	ghsic_data_fctrl_dis_thld, 4
ghsic_data_fctrl_dis_thld:
	.word	300
	.type	android_usb_attributes, %object
	.size	android_usb_attributes, 76
android_usb_attributes:
	.word	dev_attr_idVendor
	.word	dev_attr_idProduct
	.word	dev_attr_bcdDevice
	.word	dev_attr_bDeviceClass
	.word	dev_attr_bDeviceSubClass
	.word	dev_attr_bDeviceProtocol
	.word	dev_attr_iManufacturer
	.word	dev_attr_iProduct
	.word	dev_attr_iSerial
	.word	dev_attr_functions
	.word	dev_attr_enable
	.word	dev_attr_pm_qos
	.word	dev_attr_state
	.word	dev_attr_bcdUSB
	.word	dev_attr_usb30en
	.word	dev_attr_ss_host_available
	.word	dev_attr_macos
	.word	dev_attr_remote_wakeup
	.word	0
	.type	android_usb_driver, %object
	.size	android_usb_driver, 44
android_usb_driver:
	.word	.LC1202
	.space	8
	.word	device_desc
	.word	dev_strings
	.word	5
	.space	4
	.word	android_usb_unbind
	.space	12
	.type	ecm_qc_string_defs, %object
	.size	ecm_qc_string_defs, 32
ecm_qc_string_defs:
	.space	4
	.word	.LC1628
	.space	4
	.word	0
	.space	4
	.word	.LC1629
	.space	8
	.type	_rs.51447, %object
	.size	_rs.51447, 24
_rs.51447:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	ghsic_data_pend_limit_with_bridge, %object
	.size	ghsic_data_pend_limit_with_bridge, 4
ghsic_data_pend_limit_with_bridge:
	.word	500
	.type	ghsic_data_rx_req_size, %object
	.size	ghsic_data_rx_req_size, 4
ghsic_data_rx_req_size:
	.word	2048
	.type	_rs.51505, %object
	.size	_rs.51505, 24
_rs.51505:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	ncm_string_defs, %object
	.size	ncm_string_defs, 40
ncm_string_defs:
	.space	4
	.word	.LC1555
	.space	4
	.word	0
	.space	4
	.word	.LC1556
	.space	4
	.word	.LC1557
	.space	8
	.type	ecm_string_defs, %object
	.size	ecm_string_defs, 40
ecm_string_defs:
	.space	4
	.word	.LC1628
	.space	4
	.word	0
	.space	4
	.word	.LC1629
	.space	4
	.word	.LC1630
	.space	8
	.type	acc_hid_driver, %object
	.size	acc_hid_driver, 132
acc_hid_driver:
	.word	.LC1705
	.word	acc_hid_table
	.space	12
	.word	acc_hid_probe
	.space	108
	.type	mbim_ndp16_opts, %object
	.size	mbim_ndp16_opts, 44
mbim_ndp16_opts:
	.word	1213023054
	.word	810369870
	.word	12
	.word	8
	.word	4
	.word	1
	.word	1
	.word	1
	.word	0
	.word	0
	.word	1
	.type	mbim_ndp32_opts, %object
	.size	mbim_ndp32_opts, 44
mbim_ndp32_opts:
	.word	1751999342
	.word	812475246
	.word	16
	.word	16
	.word	8
	.word	2
	.word	2
	.word	2
	.word	1
	.word	2
	.word	2
	.type	mtp_tx_req_len, %object
	.size	mtp_tx_req_len, 4
mtp_tx_req_len:
	.word	16384
	.type	dev_attr_cdrom, %object
	.size	dev_attr_cdrom, 16
dev_attr_cdrom:
	.word	.LC1745
	.short	420
	.space	2
	.word	fsg_show_cdrom
	.word	fsg_store_cdrom
	.type	dev_attr_nofua, %object
	.size	dev_attr_nofua, 16
dev_attr_nofua:
	.word	.LC1747
	.short	420
	.space	2
	.word	fsg_show_nofua
	.word	fsg_store_nofua
	.type	dev_attr_ro, %object
	.size	dev_attr_ro, 16
dev_attr_ro:
	.word	.LC1748
	.short	420
	.space	2
	.word	fsg_show_ro
	.word	fsg_store_ro
	.type	dev_attr_file, %object
	.size	dev_attr_file, 16
dev_attr_file:
	.word	.LC1746
	.short	420
	.space	2
	.word	fsg_show_file
	.word	fsg_store_file
	.type	rl.53100, %object
	.size	rl.53100, 24
rl.53100:
	.word	0
	.word	3000
	.word	1
	.space	12
	.type	adb_function, %object
	.size	adb_function, 52
adb_function:
	.word	.LC1014
	.space	20
	.word	adb_function_init
	.word	adb_function_cleanup
	.word	adb_android_function_enable
	.word	adb_android_function_disable
	.word	adb_function_bind_config
	.space	8
	.type	rl.64744, %object
	.size	rl.64744, 24
rl.64744:
	.word	0
	.word	3000
	.word	1
	.space	12
	.type	rl.53093, %object
	.size	rl.53093, 24
rl.53093:
	.word	0
	.word	3000
	.word	1
	.space	12
	.type	bam_mux_rx_q_size, %object
	.size	bam_mux_rx_q_size, 4
bam_mux_rx_q_size:
	.word	16
	.type	bam_mux_tx_q_size, %object
	.size	bam_mux_tx_q_size, 4
bam_mux_tx_q_size:
	.word	200
	.type	acm_string_defs, %object
	.size	acm_string_defs, 32
acm_string_defs:
	.space	4
	.word	.LC1717
	.space	4
	.word	.LC1718
	.space	4
	.word	.LC1719
	.space	8
	.type	acm_control_interface_desc, %object
	.size	acm_control_interface_desc, 9
acm_control_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	1
	.space	1
	.space	3
	.type	acm_data_interface_desc, %object
	.size	acm_data_interface_desc, 9
acm_data_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	acm_iad_descriptor, %object
	.size	acm_iad_descriptor, 8
acm_iad_descriptor:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	2
	.byte	1
	.space	1
	.type	acm_strings, %object
	.size	acm_strings, 8
acm_strings:
	.word	acm_string_table
	.word	0
	.type	bam_mux_tx_pkt_drop_thld, %object
	.size	bam_mux_tx_pkt_drop_thld, 4
bam_mux_tx_pkt_drop_thld:
	.word	1000
	.type	rmnet_ctl_ch, %object
	.size	rmnet_ctl_ch, 4
rmnet_ctl_ch:
	.word	.LC873
	.type	rmnet_data_ch, %object
	.size	rmnet_data_ch, 4
rmnet_data_ch:
	.word	.LC873
	.type	ffs_function, %object
	.size	ffs_function, 52
ffs_function:
	.word	.LC460
	.space	12
	.word	ffs_function_attributes
	.space	4
	.word	ffs_function_init
	.word	ffs_function_cleanup
	.word	ffs_function_enable
	.word	ffs_function_disable
	.word	ffs_function_bind_config
	.space	8
	.type	fs_adb_descs, %object
	.size	fs_adb_descs, 16
fs_adb_descs:
	.word	adb_interface_desc
	.word	adb_fullspeed_in_desc
	.word	adb_fullspeed_out_desc
	.word	0
	.type	hs_adb_descs, %object
	.size	hs_adb_descs, 16
hs_adb_descs:
	.word	adb_interface_desc
	.word	adb_highspeed_in_desc
	.word	adb_highspeed_out_desc
	.word	0
	.type	ss_adb_descs, %object
	.size	ss_adb_descs, 24
ss_adb_descs:
	.word	adb_interface_desc
	.word	adb_superspeed_in_desc
	.word	adb_superspeed_in_comp_desc
	.word	adb_superspeed_out_desc
	.word	adb_superspeed_out_comp_desc
	.word	0
	.type	ccid_fs_descs, %object
	.size	ccid_fs_descs, 24
ccid_fs_descs:
	.word	ccid_interface_desc
	.word	ccid_class_desc
	.word	ccid_fs_notify_desc
	.word	ccid_fs_in_desc
	.word	ccid_fs_out_desc
	.word	0
	.type	ccid_hs_descs, %object
	.size	ccid_hs_descs, 24
ccid_hs_descs:
	.word	ccid_interface_desc
	.word	ccid_class_desc
	.word	ccid_hs_notify_desc
	.word	ccid_hs_in_desc
	.word	ccid_hs_out_desc
	.word	0
	.type	rmnet_mux_strings, %object
	.size	rmnet_mux_strings, 8
rmnet_mux_strings:
	.word	rmnet_mux_string_table
	.word	0
	.type	rmnet_mux_fs_function, %object
	.size	rmnet_mux_fs_function, 20
rmnet_mux_fs_function:
	.word	rmnet_mux_interface_desc
	.word	rmnet_mux_fs_notify_desc
	.word	rmnet_mux_fs_in_desc
	.word	rmnet_mux_fs_out_desc
	.word	0
	.type	rmnet_mux_hs_function, %object
	.size	rmnet_mux_hs_function, 20
rmnet_mux_hs_function:
	.word	rmnet_mux_interface_desc
	.word	rmnet_mux_hs_notify_desc
	.word	rmnet_mux_hs_in_desc
	.word	rmnet_mux_hs_out_desc
	.word	0
	.type	acc_string_defs, %object
	.size	acc_string_defs, 16
acc_string_defs:
	.space	4
	.word	.LC1707
	.space	8
	.type	acc_interface_desc, %object
	.size	acc_interface_desc, 9
acc_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	2
	.byte	-1
	.byte	-1
	.byte	0
	.space	1
	.space	3
	.type	acc_strings, %object
	.size	acc_strings, 8
acc_strings:
	.word	acc_string_table
	.word	0
	.type	fs_acc_descs, %object
	.size	fs_acc_descs, 16
fs_acc_descs:
	.word	acc_interface_desc
	.word	acc_fullspeed_in_desc
	.word	acc_fullspeed_out_desc
	.word	0
	.type	hs_acc_descs, %object
	.size	hs_acc_descs, 16
hs_acc_descs:
	.word	acc_interface_desc
	.word	acc_highspeed_in_desc
	.word	acc_highspeed_out_desc
	.word	0
	.type	ss_acc_descs, %object
	.size	ss_acc_descs, 24
ss_acc_descs:
	.word	acc_interface_desc
	.word	acc_superspeed_in_desc
	.word	acc_superspeed_in_comp_desc
	.word	acc_superspeed_out_desc
	.word	acc_superspeed_out_comp_desc
	.word	0
	.type	mtp_string_defs, %object
	.size	mtp_string_defs, 16
mtp_string_defs:
	.space	4
	.word	.LC1709
	.space	8
	.type	mtp_interface_desc, %object
	.size	mtp_interface_desc, 9
mtp_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	3
	.byte	-1
	.byte	-1
	.byte	0
	.space	1
	.space	3
	.type	mtp_strings, %object
	.size	mtp_strings, 8
mtp_strings:
	.word	mtp_string_table
	.word	0
	.type	fs_mtp_descs, %object
	.size	fs_mtp_descs, 20
fs_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_fullspeed_in_desc
	.word	mtp_fullspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	hs_mtp_descs, %object
	.size	hs_mtp_descs, 20
hs_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_highspeed_in_desc
	.word	mtp_highspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	ss_mtp_descs, %object
	.size	ss_mtp_descs, 32
ss_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_superspeed_in_desc
	.word	mtp_superspeed_in_comp_desc
	.word	mtp_superspeed_out_desc
	.word	mtp_superspeed_out_comp_desc
	.word	mtp_intr_desc
	.word	mtp_superspeed_intr_comp_desc
	.word	0
	.type	fs_ptp_descs, %object
	.size	fs_ptp_descs, 20
fs_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_fullspeed_in_desc
	.word	mtp_fullspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	hs_ptp_descs, %object
	.size	hs_ptp_descs, 20
hs_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_highspeed_in_desc
	.word	mtp_highspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	ss_ptp_descs, %object
	.size	ss_ptp_descs, 32
ss_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_superspeed_in_desc
	.word	mtp_superspeed_in_comp_desc
	.word	mtp_superspeed_out_desc
	.word	mtp_superspeed_out_comp_desc
	.word	mtp_intr_desc
	.word	mtp_superspeed_intr_comp_desc
	.word	0
	.type	fs_conn_gadget_descs, %object
	.size	fs_conn_gadget_descs, 16
fs_conn_gadget_descs:
	.word	conn_gadget_interface_desc
	.word	conn_gadget_fullspeed_in_desc
	.word	conn_gadget_fullspeed_out_desc
	.word	0
	.type	hs_conn_gadget_descs, %object
	.size	hs_conn_gadget_descs, 16
hs_conn_gadget_descs:
	.word	conn_gadget_interface_desc
	.word	conn_gadget_highspeed_in_desc
	.word	conn_gadget_highspeed_out_desc
	.word	0
	.type	ss_conn_gadget_descs, %object
	.size	ss_conn_gadget_descs, 24
ss_conn_gadget_descs:
	.word	conn_gadget_interface_desc
	.word	conn_gadget_superspeed_in_desc
	.word	conn_gadget_superspeed_bulk_comp_desc
	.word	conn_gadget_superspeed_out_desc
	.word	conn_gadget_superspeed_bulk_comp_desc
	.word	0
	.type	mbim_string_defs, %object
	.size	mbim_string_defs, 24
mbim_string_defs:
	.space	4
	.word	.LC1682
	.space	4
	.word	.LC1683
	.space	8
	.type	mbim_control_intf, %object
	.size	mbim_control_intf, 9
mbim_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	14
	.byte	0
	.space	1
	.space	3
	.type	mbim_data_nop_intf, %object
	.size	mbim_data_nop_intf, 9
mbim_data_nop_intf:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	2
	.space	1
	.space	3
	.type	mbim_data_intf, %object
	.size	mbim_data_intf, 9
mbim_data_intf:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	2
	.space	1
	.space	3
	.type	mbim_strings, %object
	.size	mbim_strings, 8
mbim_strings:
	.word	mbim_string_table
	.word	0
	.type	fsg_strings, %object
	.size	fsg_strings, 16
fsg_strings:
	.byte	0
	.space	3
	.word	fsg_string_interface
	.space	8
	.type	fsg_intf_desc, %object
	.size	fsg_intf_desc, 9
fsg_intf_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	8
	.byte	6
	.byte	80
	.byte	0
	.space	3
	.type	fsg_strings_array, %object
	.size	fsg_strings_array, 8
fsg_strings_array:
	.word	fsg_stringtab
	.word	0
	.type	rmnet_sdio_strings, %object
	.size	rmnet_sdio_strings, 8
rmnet_sdio_strings:
	.word	rmnet_sdio_string_table
	.word	0
	.type	rmnet_sdio_fs_function, %object
	.size	rmnet_sdio_fs_function, 20
rmnet_sdio_fs_function:
	.word	rmnet_sdio_interface_desc
	.word	rmnet_sdio_fs_notify_desc
	.word	rmnet_sdio_fs_in_desc
	.word	rmnet_sdio_fs_out_desc
	.word	0
	.type	rmnet_sdio_hs_function, %object
	.size	rmnet_sdio_hs_function, 20
rmnet_sdio_hs_function:
	.word	rmnet_sdio_interface_desc
	.word	rmnet_sdio_hs_notify_desc
	.word	rmnet_sdio_hs_in_desc
	.word	rmnet_sdio_hs_out_desc
	.word	0
	.type	_rs.38231, %object
	.size	_rs.38231, 24
_rs.38231:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	intf_desc, %object
	.size	intf_desc, 9
intf_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	-1
	.byte	16
	.byte	1
	.space	1
	.space	3
	.type	fs_bulk_in_desc, %object
	.size	fs_bulk_in_desc, 9
fs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.byte	0
	.space	2
	.space	3
	.type	fs_bulk_out_desc, %object
	.size	fs_bulk_out_desc, 9
fs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.byte	0
	.space	2
	.space	3
	.type	fs_diag_desc, %object
	.size	fs_diag_desc, 16
fs_diag_desc:
	.word	intf_desc
	.word	fs_bulk_in_desc
	.word	fs_bulk_out_desc
	.word	0
	.type	hs_bulk_in_desc, %object
	.size	hs_bulk_in_desc, 9
hs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.byte	0
	.space	2
	.space	3
	.type	hs_bulk_out_desc, %object
	.size	hs_bulk_out_desc, 9
hs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.byte	0
	.space	2
	.space	3
	.type	hs_diag_desc, %object
	.size	hs_diag_desc, 16
hs_diag_desc:
	.word	intf_desc
	.word	hs_bulk_in_desc
	.word	hs_bulk_out_desc
	.word	0
	.type	ss_bulk_in_desc, %object
	.size	ss_bulk_in_desc, 9
ss_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_bulk_out_desc, %object
	.size	ss_bulk_out_desc, 9
ss_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_diag_desc, %object
	.size	ss_diag_desc, 24
ss_diag_desc:
	.word	intf_desc
	.word	ss_bulk_in_desc
	.word	ss_bulk_in_comp_desc
	.word	ss_bulk_out_desc
	.word	ss_bulk_out_comp_desc
	.word	0
	.type	rmnet_smd_interface_desc, %object
	.size	rmnet_smd_interface_desc, 9
rmnet_smd_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_smd_fs_in_desc, %object
	.size	rmnet_smd_fs_in_desc, 9
rmnet_smd_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_smd_fs_out_desc, %object
	.size	rmnet_smd_fs_out_desc, 9
rmnet_smd_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_smd_fs_notify_desc, %object
	.size	rmnet_smd_fs_notify_desc, 9
rmnet_smd_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_smd_hs_in_desc, %object
	.size	rmnet_smd_hs_in_desc, 9
rmnet_smd_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_smd_hs_out_desc, %object
	.size	rmnet_smd_hs_out_desc, 9
rmnet_smd_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_smd_hs_notify_desc, %object
	.size	rmnet_smd_hs_notify_desc, 9
rmnet_smd_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rmnet_sdio_interface_desc, %object
	.size	rmnet_sdio_interface_desc, 9
rmnet_sdio_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_sdio_fs_in_desc, %object
	.size	rmnet_sdio_fs_in_desc, 9
rmnet_sdio_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_sdio_fs_out_desc, %object
	.size	rmnet_sdio_fs_out_desc, 9
rmnet_sdio_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_sdio_fs_notify_desc, %object
	.size	rmnet_sdio_fs_notify_desc, 9
rmnet_sdio_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_sdio_hs_in_desc, %object
	.size	rmnet_sdio_hs_in_desc, 9
rmnet_sdio_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_sdio_hs_out_desc, %object
	.size	rmnet_sdio_hs_out_desc, 9
rmnet_sdio_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_sdio_hs_notify_desc, %object
	.size	rmnet_sdio_hs_notify_desc, 9
rmnet_sdio_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	input_terminal_desc, %object
	.size	input_terminal_desc, 12
input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	1
	.short	513
	.byte	0
	.space	1
	.short	3
	.space	2
	.type	as_type_i_desc, %object
	.size	as_type_i_desc, 11
as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.space	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	audio_source_ac_interface_desc, %object
	.size	audio_source_ac_interface_desc, 9
audio_source_ac_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	0
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	as_interface_alt_0_desc, %object
	.size	as_interface_alt_0_desc, 9
as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	as_interface_alt_1_desc, %object
	.size	as_interface_alt_1_desc, 9
as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	fs_as_in_ep_desc, %object
	.size	fs_as_in_ep_desc, 9
fs_as_in_ep_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	13
	.short	256
	.byte	1
	.space	2
	.space	3
	.type	hs_as_in_ep_desc, %object
	.size	hs_as_in_ep_desc, 9
hs_as_in_ep_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	13
	.short	256
	.byte	4
	.space	2
	.space	3
	.type	ecm_qc_control_intf, %object
	.size	ecm_qc_control_intf, 9
ecm_qc_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_union_desc, %object
	.size	ecm_qc_union_desc, 5
ecm_qc_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ecm_qc_data_nop_intf, %object
	.size	ecm_qc_data_nop_intf, 9
ecm_qc_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_data_intf, %object
	.size	ecm_qc_data_intf, 9
ecm_qc_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_fs_in_desc, %object
	.size	ecm_qc_fs_in_desc, 9
ecm_qc_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	ecm_qc_fs_out_desc, %object
	.size	ecm_qc_fs_out_desc, 9
ecm_qc_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	ecm_qc_fs_notify_desc, %object
	.size	ecm_qc_fs_notify_desc, 9
ecm_qc_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	ecm_qc_fs_function, %object
	.size	ecm_qc_fs_function, 40
ecm_qc_fs_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_fs_notify_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_fs_in_desc
	.word	ecm_qc_fs_out_desc
	.word	0
	.type	ecm_qc_hs_in_desc, %object
	.size	ecm_qc_hs_in_desc, 9
ecm_qc_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ecm_qc_hs_out_desc, %object
	.size	ecm_qc_hs_out_desc, 9
ecm_qc_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ecm_qc_hs_notify_desc, %object
	.size	ecm_qc_hs_notify_desc, 9
ecm_qc_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ecm_qc_hs_function, %object
	.size	ecm_qc_hs_function, 40
ecm_qc_hs_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_hs_notify_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_hs_in_desc
	.word	ecm_qc_hs_out_desc
	.word	0
	.type	ecm_qc_ss_in_desc, %object
	.size	ecm_qc_ss_in_desc, 9
ecm_qc_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ecm_qc_ss_out_desc, %object
	.size	ecm_qc_ss_out_desc, 9
ecm_qc_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ecm_qc_ss_notify_desc, %object
	.size	ecm_qc_ss_notify_desc, 9
ecm_qc_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ecm_qc_ss_function, %object
	.size	ecm_qc_ss_function, 52
ecm_qc_ss_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_ss_notify_desc
	.word	ecm_qc_ss_notify_comp_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_ss_in_desc
	.word	ecm_qc_ss_in_comp_desc
	.word	ecm_qc_ss_out_desc
	.word	ecm_qc_ss_out_comp_desc
	.word	0
	.type	mbim_iad_desc, %object
	.size	mbim_iad_desc, 8
mbim_iad_desc:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	14
	.byte	0
	.space	1
	.type	mbim_union_desc, %object
	.size	mbim_union_desc, 5
mbim_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	fs_mbim_in_desc, %object
	.size	fs_mbim_in_desc, 9
fs_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_mbim_out_desc, %object
	.size	fs_mbim_out_desc, 9
fs_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_mbim_notify_desc, %object
	.size	fs_mbim_notify_desc, 9
fs_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	32
	.space	2
	.space	3
	.type	mbb_desc, %object
	.size	mbb_desc, 12
mbb_desc:
	.byte	12
	.byte	36
	.byte	27
	.2byte	256
	.2byte	4096
	.byte	32
	.byte	-128
	.2byte	4064
	.byte	32
	.type	mbim_fs_function, %object
	.size	mbim_fs_function, 48
mbim_fs_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	fs_mbim_notify_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	fs_mbim_in_desc
	.word	fs_mbim_out_desc
	.word	0
	.type	hs_mbim_in_desc, %object
	.size	hs_mbim_in_desc, 9
hs_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_mbim_out_desc, %object
	.size	hs_mbim_out_desc, 9
hs_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_mbim_notify_desc, %object
	.size	hs_mbim_notify_desc, 9
hs_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	9
	.space	2
	.space	3
	.type	mbim_hs_function, %object
	.size	mbim_hs_function, 48
mbim_hs_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	hs_mbim_notify_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	hs_mbim_in_desc
	.word	hs_mbim_out_desc
	.word	0
	.type	ss_mbim_in_desc, %object
	.size	ss_mbim_in_desc, 9
ss_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_mbim_out_desc, %object
	.size	ss_mbim_out_desc, 9
ss_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_mbim_notify_desc, %object
	.size	ss_mbim_notify_desc, 9
ss_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	9
	.space	2
	.space	3
	.type	mbim_ss_function, %object
	.size	mbim_ss_function, 60
mbim_ss_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	ss_mbim_notify_desc
	.word	ss_mbim_notify_comp_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	ss_mbim_in_desc
	.word	ss_mbim_in_comp_desc
	.word	ss_mbim_out_desc
	.word	ss_mbim_out_comp_desc
	.word	0
	.type	ecm_iad_descriptor, %object
	.size	ecm_iad_descriptor, 8
ecm_iad_descriptor:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	ecm_control_intf, %object
	.size	ecm_control_intf, 9
ecm_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.space	3
	.type	ecm_union_desc, %object
	.size	ecm_union_desc, 5
ecm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ecm_data_nop_intf, %object
	.size	ecm_data_nop_intf, 9
ecm_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_data_intf, %object
	.size	ecm_data_intf, 9
ecm_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	fs_ecm_in_desc, %object
	.size	fs_ecm_in_desc, 9
fs_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_ecm_out_desc, %object
	.size	fs_ecm_out_desc, 9
fs_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_ecm_notify_desc, %object
	.size	fs_ecm_notify_desc, 9
fs_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	hs_ecm_in_desc, %object
	.size	hs_ecm_in_desc, 9
hs_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ecm_out_desc, %object
	.size	hs_ecm_out_desc, 9
hs_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ecm_notify_desc, %object
	.size	hs_ecm_notify_desc, 9
hs_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ss_ecm_in_desc, %object
	.size	ss_ecm_in_desc, 9
ss_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_ecm_out_desc, %object
	.size	ss_ecm_out_desc, 9
ss_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_ecm_notify_desc, %object
	.size	ss_ecm_notify_desc, 9
ss_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ecm_fs_function, %object
	.size	ecm_fs_function, 44
ecm_fs_function:
	.word	ecm_iad_descriptor
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	fs_ecm_notify_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	fs_ecm_in_desc
	.word	fs_ecm_out_desc
	.word	0
	.type	ecm_hs_function, %object
	.size	ecm_hs_function, 44
ecm_hs_function:
	.word	ecm_iad_descriptor
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	hs_ecm_notify_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	hs_ecm_in_desc
	.word	hs_ecm_out_desc
	.word	0
	.type	ecm_ss_function, %object
	.size	ecm_ss_function, 52
ecm_ss_function:
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	ss_ecm_notify_desc
	.word	ss_ecm_intr_comp_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	ss_ecm_in_desc
	.word	ss_ecm_bulk_comp_desc
	.word	ss_ecm_out_desc
	.word	ss_ecm_bulk_comp_desc
	.word	0
	.type	speaker_input_terminal_desc, %object
	.size	speaker_input_terminal_desc, 12
speaker_input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	3
	.short	257
	.byte	4
	.space	1
	.short	3
	.space	2
	.type	speaker_as_type_i_desc, %object
	.size	speaker_as_type_i_desc, 11
speaker_as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.space	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	microphone_input_terminal_desc, %object
	.size	microphone_input_terminal_desc, 12
microphone_input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	1
	.short	513
	.byte	2
	.byte	1
	.short	3
	.space	2
	.type	microphone_as_type_i_desc, %object
	.size	microphone_as_type_i_desc, 11
microphone_as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.byte	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	uac1_ac_interface_desc, %object
	.size	uac1_ac_interface_desc, 9
uac1_ac_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	0
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	microphone_as_interface_alt_0_desc, %object
	.size	microphone_as_interface_alt_0_desc, 9
microphone_as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	microphone_as_interface_alt_1_desc, %object
	.size	microphone_as_interface_alt_1_desc, 9
microphone_as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	speaker_as_interface_alt_0_desc, %object
	.size	speaker_as_interface_alt_0_desc, 9
speaker_as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	speaker_as_interface_alt_1_desc, %object
	.size	speaker_as_interface_alt_1_desc, 9
speaker_as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	microphone_as_ep_in_desc, %object
	.size	microphone_as_ep_in_desc, 9
microphone_as_ep_in_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	5
	.short	32
	.byte	4
	.space	2
	.space	3
	.type	speaker_as_ep_out_desc, %object
	.size	speaker_as_ep_out_desc, 9
speaker_as_ep_out_desc:
	.byte	9
	.byte	5
	.byte	0
	.byte	9
	.short	32
	.byte	4
	.space	2
	.space	3
	.type	microphone_as_iso_in, %object
	.size	microphone_as_iso_in, 32
microphone_as_iso_in:
	.word	microphone_as_iso_in
	.word	microphone_as_iso_in
	.space	12
	.word	.LC1584
	.byte	1
	.space	3
	.word	microphone_as_iso_in_desc
	.type	speaker_as_iso_out, %object
	.size	speaker_as_iso_out, 32
speaker_as_iso_out:
	.word	speaker_as_iso_out
	.word	speaker_as_iso_out
	.space	12
	.word	.LC1586
	.byte	1
	.space	3
	.word	speaker_as_iso_out_desc
	.type	f_audio_desc, %object
	.size	f_audio_desc, 76
f_audio_desc:
	.word	uac1_ac_interface_desc
	.word	uac1_ac_header_desc
	.word	microphone_input_terminal_desc
	.word	microphone_output_terminal_desc
	.word	speaker_input_terminal_desc
	.word	speaker_output_terminal_desc
	.word	microphone_as_interface_alt_0_desc
	.word	microphone_as_interface_alt_1_desc
	.word	microphone_as_header_desc
	.word	microphone_as_type_i_desc
	.word	microphone_as_ep_in_desc
	.word	microphone_as_iso_in_desc
	.word	speaker_as_interface_alt_0_desc
	.word	speaker_as_interface_alt_1_desc
	.word	speaker_as_header_desc
	.word	speaker_as_type_i_desc
	.word	speaker_as_ep_out_desc
	.word	speaker_as_iso_out_desc
	.word	0
	.type	ncm_iad_desc, %object
	.size	ncm_iad_desc, 8
ncm_iad_desc:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	13
	.byte	0
	.space	1
	.type	ncm_control_intf, %object
	.size	ncm_control_intf, 9
ncm_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	13
	.byte	0
	.space	1
	.space	3
	.type	ncm_union_desc, %object
	.size	ncm_union_desc, 5
ncm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ncm_data_nop_intf, %object
	.size	ncm_data_nop_intf, 9
ncm_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	1
	.space	1
	.space	3
	.type	ncm_data_intf, %object
	.size	ncm_data_intf, 9
ncm_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	1
	.space	1
	.space	3
	.type	fs_ncm_in_desc, %object
	.size	fs_ncm_in_desc, 9
fs_ncm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_ncm_out_desc, %object
	.size	fs_ncm_out_desc, 9
fs_ncm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_ncm_notify_desc, %object
	.size	fs_ncm_notify_desc, 9
fs_ncm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	hs_ncm_in_desc, %object
	.size	hs_ncm_in_desc, 9
hs_ncm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ncm_out_desc, %object
	.size	hs_ncm_out_desc, 9
hs_ncm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ncm_notify_desc, %object
	.size	hs_ncm_notify_desc, 9
hs_ncm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ncm_fs_function, %object
	.size	ncm_fs_function, 48
ncm_fs_function:
	.word	ncm_iad_desc
	.word	ncm_control_intf
	.word	ncm_header_desc
	.word	ncm_union_desc
	.word	necm_desc
	.word	ncm_desc
	.word	fs_ncm_notify_desc
	.word	ncm_data_nop_intf
	.word	ncm_data_intf
	.word	fs_ncm_in_desc
	.word	fs_ncm_out_desc
	.word	0
	.type	ncm_hs_function, %object
	.size	ncm_hs_function, 48
ncm_hs_function:
	.word	ncm_iad_desc
	.word	ncm_control_intf
	.word	ncm_header_desc
	.word	ncm_union_desc
	.word	necm_desc
	.word	ncm_desc
	.word	hs_ncm_notify_desc
	.word	ncm_data_nop_intf
	.word	ncm_data_intf
	.word	hs_ncm_in_desc
	.word	hs_ncm_out_desc
	.word	0
	.type	fsg_fs_bulk_in_desc, %object
	.size	fsg_fs_bulk_in_desc, 9
fsg_fs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fsg_fs_bulk_out_desc, %object
	.size	fsg_fs_bulk_out_desc, 9
fsg_fs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fsg_hs_bulk_in_desc, %object
	.size	fsg_hs_bulk_in_desc, 9
fsg_hs_bulk_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	fsg_hs_bulk_out_desc, %object
	.size	fsg_hs_bulk_out_desc, 9
fsg_hs_bulk_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.byte	1
	.space	2
	.space	3
	.type	fsg_ss_bulk_in_desc, %object
	.size	fsg_ss_bulk_in_desc, 9
fsg_ss_bulk_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	fsg_ss_bulk_in_comp_desc, %object
	.size	fsg_ss_bulk_in_comp_desc, 6
fsg_ss_bulk_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	fsg_ss_bulk_out_desc, %object
	.size	fsg_ss_bulk_out_desc, 9
fsg_ss_bulk_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	fsg_ss_bulk_out_comp_desc, %object
	.size	fsg_ss_bulk_out_comp_desc, 6
fsg_ss_bulk_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	fsg_fs_function, %object
	.size	fsg_fs_function, 16
fsg_fs_function:
	.word	fsg_intf_desc
	.word	fsg_fs_bulk_in_desc
	.word	fsg_fs_bulk_out_desc
	.word	0
	.type	fsg_hs_function, %object
	.size	fsg_hs_function, 16
fsg_hs_function:
	.word	fsg_intf_desc
	.word	fsg_hs_bulk_in_desc
	.word	fsg_hs_bulk_out_desc
	.word	0
	.type	fsg_ss_function, %object
	.size	fsg_ss_function, 24
fsg_ss_function:
	.word	fsg_intf_desc
	.word	fsg_ss_bulk_in_desc
	.word	fsg_ss_bulk_in_comp_desc
	.word	fsg_ss_bulk_out_desc
	.word	fsg_ss_bulk_out_comp_desc
	.word	0
	.type	ccid_interface_desc, %object
	.size	ccid_interface_desc, 9
ccid_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	11
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ccid_fs_notify_desc, %object
	.size	ccid_fs_notify_desc, 9
ccid_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	4
	.byte	32
	.space	2
	.space	3
	.type	ccid_fs_in_desc, %object
	.size	ccid_fs_in_desc, 9
ccid_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	ccid_fs_out_desc, %object
	.size	ccid_fs_out_desc, 9
ccid_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	ccid_hs_in_desc, %object
	.size	ccid_hs_in_desc, 9
ccid_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ccid_hs_out_desc, %object
	.size	ccid_hs_out_desc, 9
ccid_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ccid_hs_notify_desc, %object
	.size	ccid_hs_notify_desc, 9
ccid_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	4
	.byte	9
	.space	2
	.space	3
	.type	qdss_data_intf_desc, %object
	.size	qdss_data_intf_desc, 9
qdss_data_intf_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	1
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	qdss_ctrl_intf_desc, %object
	.size	qdss_ctrl_intf_desc, 9
qdss_ctrl_intf_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	2
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	qdss_data_ep_comp_desc, %object
	.size	qdss_data_ep_comp_desc, 6
qdss_data_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	1
	.byte	0
	.short	0
	.space	2
	.type	qdss_ss_data_desc, %object
	.size	qdss_ss_data_desc, 9
qdss_ss_data_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_ctrl_in_ep_comp_desc, %object
	.size	qdss_ctrl_in_ep_comp_desc, 6
qdss_ctrl_in_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	0
	.byte	0
	.short	0
	.space	2
	.type	qdss_ss_ctrl_in_desc, %object
	.size	qdss_ss_ctrl_in_desc, 9
qdss_ss_ctrl_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_ctrl_out_ep_comp_desc, %object
	.size	qdss_ctrl_out_ep_comp_desc, 6
qdss_ctrl_out_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	0
	.byte	0
	.short	0
	.space	2
	.type	qdss_ss_ctrl_out_desc, %object
	.size	qdss_ss_ctrl_out_desc, 9
qdss_ss_ctrl_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_hs_data_desc, %object
	.size	qdss_hs_data_desc, 9
qdss_hs_data_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	qdss_hs_ctrl_in_desc, %object
	.size	qdss_hs_ctrl_in_desc, 9
qdss_hs_ctrl_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	qdss_hs_ctrl_out_desc, %object
	.size	qdss_hs_ctrl_out_desc, 9
qdss_hs_ctrl_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	qdss_hs_desc, %object
	.size	qdss_hs_desc, 24
qdss_hs_desc:
	.word	qdss_data_intf_desc
	.word	qdss_hs_data_desc
	.word	qdss_ctrl_intf_desc
	.word	qdss_hs_ctrl_in_desc
	.word	qdss_hs_ctrl_out_desc
	.word	0
	.type	qdss_ss_desc, %object
	.size	qdss_ss_desc, 36
qdss_ss_desc:
	.word	qdss_data_intf_desc
	.word	qdss_ss_data_desc
	.word	qdss_data_ep_comp_desc
	.word	qdss_ctrl_intf_desc
	.word	qdss_ss_ctrl_in_desc
	.word	qdss_ctrl_in_ep_comp_desc
	.word	qdss_ss_ctrl_out_desc
	.word	qdss_ctrl_out_ep_comp_desc
	.word	0
	.type	rmnet_mux_interface_desc, %object
	.size	rmnet_mux_interface_desc, 9
rmnet_mux_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_mux_fs_in_desc, %object
	.size	rmnet_mux_fs_in_desc, 9
rmnet_mux_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_mux_fs_out_desc, %object
	.size	rmnet_mux_fs_out_desc, 9
rmnet_mux_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_mux_fs_notify_desc, %object
	.size	rmnet_mux_fs_notify_desc, 9
rmnet_mux_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_mux_hs_in_desc, %object
	.size	rmnet_mux_hs_in_desc, 9
rmnet_mux_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_mux_hs_out_desc, %object
	.size	rmnet_mux_hs_out_desc, 9
rmnet_mux_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_mux_hs_notify_desc, %object
	.size	rmnet_mux_hs_notify_desc, 9
rmnet_mux_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	midi_string_defs, %object
	.size	midi_string_defs, 16
midi_string_defs:
	.space	4
	.word	.LC1711
	.space	8
	.type	midi_ac_interface_desc, %object
	.size	midi_ac_interface_desc, 9
midi_ac_interface_desc:
	.byte	9
	.byte	4
	.space	3
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	midi_ms_interface_desc, %object
	.size	midi_ms_interface_desc, 9
midi_ms_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	1
	.byte	3
	.space	2
	.space	3
	.type	midi_ac_header_desc, %object
	.size	midi_ac_header_desc, 9
midi_ac_header_desc:
	.byte	9
	.byte	36
	.byte	1
	.2byte	256
	.2byte	9
	.byte	1
	.space	1
	.space	3
	.type	midi_bulk_in_desc, %object
	.size	midi_bulk_in_desc, 9
midi_bulk_in_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	midi_bulk_out_desc, %object
	.size	midi_bulk_out_desc, 9
midi_bulk_out_desc:
	.byte	9
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	midi_ms_header_desc, %object
	.size	midi_ms_header_desc, 7
midi_ms_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.2byte	256
	.space	2
	.space	1
	.type	midi_ms_in_desc, %object
	.size	midi_ms_in_desc, 20
midi_ms_in_desc:
	.space	1
	.byte	37
	.byte	1
	.space	17
	.type	midi_ms_out_desc, %object
	.size	midi_ms_out_desc, 20
midi_ms_out_desc:
	.space	1
	.byte	37
	.byte	1
	.space	17
	.type	rmnet_interface_desc, %object
	.size	rmnet_interface_desc, 9
rmnet_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-32
	.byte	0
	.space	1
	.space	3
	.type	rmnet_fs_in_desc, %object
	.size	rmnet_fs_in_desc, 9
rmnet_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_fs_out_desc, %object
	.size	rmnet_fs_out_desc, 9
rmnet_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_fs_notify_desc, %object
	.size	rmnet_fs_notify_desc, 9
rmnet_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_fs_function, %object
	.size	rmnet_fs_function, 20
rmnet_fs_function:
	.word	rmnet_interface_desc
	.word	rmnet_fs_notify_desc
	.word	rmnet_fs_in_desc
	.word	rmnet_fs_out_desc
	.word	0
	.type	rmnet_hs_in_desc, %object
	.size	rmnet_hs_in_desc, 9
rmnet_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_hs_out_desc, %object
	.size	rmnet_hs_out_desc, 9
rmnet_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_hs_notify_desc, %object
	.size	rmnet_hs_notify_desc, 9
rmnet_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rmnet_hs_function, %object
	.size	rmnet_hs_function, 20
rmnet_hs_function:
	.word	rmnet_interface_desc
	.word	rmnet_hs_notify_desc
	.word	rmnet_hs_in_desc
	.word	rmnet_hs_out_desc
	.word	0
	.type	rmnet_ss_in_desc, %object
	.size	rmnet_ss_in_desc, 9
rmnet_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rmnet_ss_out_desc, %object
	.size	rmnet_ss_out_desc, 9
rmnet_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rmnet_ss_notify_desc, %object
	.size	rmnet_ss_notify_desc, 9
rmnet_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rmnet_ss_function, %object
	.size	rmnet_ss_function, 32
rmnet_ss_function:
	.word	rmnet_interface_desc
	.word	rmnet_ss_notify_desc
	.word	rmnet_ss_notify_comp_desc
	.word	rmnet_ss_in_desc
	.word	rmnet_ss_in_comp_desc
	.word	rmnet_ss_out_desc
	.word	rmnet_ss_out_comp_desc
	.word	0
	.type	acm_union_desc, %object
	.size	acm_union_desc, 5
acm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	acm_call_mgmt_descriptor, %object
	.size	acm_call_mgmt_descriptor, 5
acm_call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.space	1
	.space	3
	.type	acm_fs_in_desc, %object
	.size	acm_fs_in_desc, 9
acm_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	acm_fs_out_desc, %object
	.size	acm_fs_out_desc, 9
acm_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	acm_fs_notify_desc, %object
	.size	acm_fs_notify_desc, 9
acm_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	10
	.byte	32
	.space	2
	.space	3
	.type	acm_hs_function, %object
	.size	acm_hs_function, 44
acm_hs_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_hs_notify_desc
	.word	acm_data_interface_desc
	.word	acm_hs_in_desc
	.word	acm_hs_out_desc
	.word	0
	.type	acm_ss_function, %object
	.size	acm_ss_function, 56
acm_ss_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_hs_notify_desc
	.word	acm_ss_bulk_comp_desc
	.word	acm_data_interface_desc
	.word	acm_ss_in_desc
	.word	acm_ss_bulk_comp_desc
	.word	acm_ss_out_desc
	.word	acm_ss_bulk_comp_desc
	.word	0
	.type	acm_hs_in_desc, %object
	.size	acm_hs_in_desc, 9
acm_hs_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acm_hs_out_desc, %object
	.size	acm_hs_out_desc, 9
acm_hs_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acm_hs_notify_desc, %object
	.size	acm_hs_notify_desc, 9
acm_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	10
	.byte	9
	.space	2
	.space	3
	.type	acm_ss_in_desc, %object
	.size	acm_ss_in_desc, 9
acm_ss_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acm_ss_out_desc, %object
	.size	acm_ss_out_desc, 9
acm_ss_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acm_fs_function, %object
	.size	acm_fs_function, 44
acm_fs_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_fs_notify_desc
	.word	acm_data_interface_desc
	.word	acm_fs_in_desc
	.word	acm_fs_out_desc
	.word	0
	.type	rndis_qc_iad_descriptor, %object
	.size	rndis_qc_iad_descriptor, 8
rndis_qc_iad_descriptor:
	.byte	8
	.byte	11
	.byte	0
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	rndis_qc_control_intf, %object
	.size	rndis_qc_control_intf, 9
rndis_qc_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	-1
	.space	1
	.space	3
	.type	rndis_qc_union_desc, %object
	.size	rndis_qc_union_desc, 5
rndis_qc_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	rndis_qc_data_intf, %object
	.size	rndis_qc_data_intf, 9
rndis_qc_data_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	rndis_qc_fs_in_desc, %object
	.size	rndis_qc_fs_in_desc, 9
rndis_qc_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	rndis_qc_fs_out_desc, %object
	.size	rndis_qc_fs_out_desc, 9
rndis_qc_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	rndis_qc_fs_notify_desc, %object
	.size	rndis_qc_fs_notify_desc, 9
rndis_qc_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	eth_qc_fs_function, %object
	.size	eth_qc_fs_function, 44
eth_qc_fs_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_fs_notify_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_fs_in_desc
	.word	rndis_qc_fs_out_desc
	.word	0
	.type	rndis_qc_hs_in_desc, %object
	.size	rndis_qc_hs_in_desc, 9
rndis_qc_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rndis_qc_hs_out_desc, %object
	.size	rndis_qc_hs_out_desc, 9
rndis_qc_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rndis_qc_hs_notify_desc, %object
	.size	rndis_qc_hs_notify_desc, 9
rndis_qc_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	eth_qc_hs_function, %object
	.size	eth_qc_hs_function, 44
eth_qc_hs_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_hs_notify_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_hs_in_desc
	.word	rndis_qc_hs_out_desc
	.word	0
	.type	rndis_qc_ss_in_desc, %object
	.size	rndis_qc_ss_in_desc, 9
rndis_qc_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rndis_qc_ss_out_desc, %object
	.size	rndis_qc_ss_out_desc, 9
rndis_qc_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rndis_qc_ss_notify_desc, %object
	.size	rndis_qc_ss_notify_desc, 9
rndis_qc_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	eth_qc_ss_function, %object
	.size	eth_qc_ss_function, 56
eth_qc_ss_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_ss_notify_desc
	.word	rndis_qc_ss_intr_comp_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_ss_in_desc
	.word	rndis_qc_ss_bulk_comp_desc
	.word	rndis_qc_ss_out_desc
	.word	rndis_qc_ss_bulk_comp_desc
	.word	0
	.type	conn_gadget_interface_desc, %object
	.size	conn_gadget_interface_desc, 9
conn_gadget_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	2
	.byte	-1
	.byte	64
	.byte	1
	.space	1
	.space	3
	.type	conn_gadget_fullspeed_in_desc, %object
	.size	conn_gadget_fullspeed_in_desc, 9
conn_gadget_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	conn_gadget_fullspeed_out_desc, %object
	.size	conn_gadget_fullspeed_out_desc, 9
conn_gadget_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	conn_gadget_highspeed_in_desc, %object
	.size	conn_gadget_highspeed_in_desc, 9
conn_gadget_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	conn_gadget_highspeed_out_desc, %object
	.size	conn_gadget_highspeed_out_desc, 9
conn_gadget_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	conn_gadget_superspeed_in_desc, %object
	.size	conn_gadget_superspeed_in_desc, 9
conn_gadget_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	conn_gadget_superspeed_out_desc, %object
	.size	conn_gadget_superspeed_out_desc, 9
conn_gadget_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acc_fullspeed_in_desc, %object
	.size	acc_fullspeed_in_desc, 9
acc_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	acc_fullspeed_out_desc, %object
	.size	acc_fullspeed_out_desc, 9
acc_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	acc_highspeed_in_desc, %object
	.size	acc_highspeed_in_desc, 9
acc_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acc_highspeed_out_desc, %object
	.size	acc_highspeed_out_desc, 9
acc_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acc_superspeed_in_desc, %object
	.size	acc_superspeed_in_desc, 9
acc_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acc_superspeed_out_desc, %object
	.size	acc_superspeed_out_desc, 9
acc_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	mtp_fullspeed_in_desc, %object
	.size	mtp_fullspeed_in_desc, 9
mtp_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	mtp_fullspeed_out_desc, %object
	.size	mtp_fullspeed_out_desc, 9
mtp_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	mtp_intr_desc, %object
	.size	mtp_intr_desc, 9
mtp_intr_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	28
	.byte	6
	.space	2
	.space	3
	.type	mtp_tx_reqs, %object
	.size	mtp_tx_reqs, 4
mtp_tx_reqs:
	.word	8
	.type	mtp_highspeed_in_desc, %object
	.size	mtp_highspeed_in_desc, 9
mtp_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	mtp_highspeed_out_desc, %object
	.size	mtp_highspeed_out_desc, 9
mtp_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	mtp_superspeed_in_desc, %object
	.size	mtp_superspeed_in_desc, 9
mtp_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	mtp_superspeed_out_desc, %object
	.size	mtp_superspeed_out_desc, 9
mtp_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	adb_interface_desc, %object
	.size	adb_interface_desc, 9
adb_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	2
	.byte	-1
	.byte	66
	.byte	1
	.space	1
	.space	3
	.type	adb_fullspeed_in_desc, %object
	.size	adb_fullspeed_in_desc, 9
adb_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	adb_fullspeed_out_desc, %object
	.size	adb_fullspeed_out_desc, 9
adb_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	adb_highspeed_in_desc, %object
	.size	adb_highspeed_in_desc, 9
adb_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	adb_highspeed_out_desc, %object
	.size	adb_highspeed_out_desc, 9
adb_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	adb_superspeed_in_desc, %object
	.size	adb_superspeed_in_desc, 9
adb_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	adb_superspeed_out_desc, %object
	.size	adb_superspeed_out_desc, 9
adb_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	midi_strings, %object
	.size	midi_strings, 8
midi_strings:
	.word	midi_stringtab
	.word	0
	.type	qdss_string_defs, %object
	.size	qdss_string_defs, 24
qdss_string_defs:
	.space	4
	.word	.LC1766
	.space	4
	.word	.LC1767
	.space	8
	.type	qdss_strings, %object
	.size	qdss_strings, 8
qdss_strings:
	.word	qdss_string_table
	.word	0
	.space	4
	.type	_audio_dev, %object
	.size	_audio_dev, 160
_audio_dev:
	.word	.LC1176
	.space	4
	.word	hs_audio_desc
	.space	4
	.word	fs_audio_desc
	.space	12
	.word	audio_bind
	.word	audio_unbind
	.word	audio_set_alt
	.space	4
	.word	audio_disable
	.word	audio_setup
	.space	28
	.space	12
	.word	_audio_dev+96
	.word	_audio_dev+96
	.space	4
	.word	0
	.space	48
	.type	audio_playback_ops, %object
	.size	audio_playback_ops, 56
audio_playback_ops:
	.word	audio_pcm_open
	.word	audio_pcm_close
	.word	snd_pcm_lib_ioctl
	.word	audio_pcm_hw_params
	.word	audio_pcm_hw_free
	.word	audio_pcm_prepare
	.word	audio_pcm_playback_trigger
	.word	audio_pcm_pointer
	.space	12
	.word	audio_pcm_mmap
	.space	8
	.type	rmnet_smd_strings, %object
	.size	rmnet_smd_strings, 8
rmnet_smd_strings:
	.word	rmnet_smd_string_table
	.word	0
	.type	rmnet_smd_fs_function, %object
	.size	rmnet_smd_fs_function, 20
rmnet_smd_fs_function:
	.word	rmnet_smd_interface_desc
	.word	rmnet_smd_fs_notify_desc
	.word	rmnet_smd_fs_in_desc
	.word	rmnet_smd_fs_out_desc
	.word	0
	.type	rmnet_smd_hs_function, %object
	.size	rmnet_smd_hs_function, 20
rmnet_smd_hs_function:
	.word	rmnet_smd_interface_desc
	.word	rmnet_smd_hs_notify_desc
	.word	rmnet_smd_hs_in_desc
	.word	rmnet_smd_hs_out_desc
	.word	0
	.type	gadget_type, %object
	.size	gadget_type, 24
gadget_type:
	.word	.LC1612
	.space	20
	.type	rndis_iad_descriptor, %object
	.size	rndis_iad_descriptor, 8
rndis_iad_descriptor:
	.byte	8
	.byte	11
	.byte	0
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	rndis_control_intf, %object
	.size	rndis_control_intf, 9
rndis_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	-1
	.space	1
	.space	3
	.type	rndis_string_defs, %object
	.size	rndis_string_defs, 32
rndis_string_defs:
	.space	4
	.word	.LC1624
	.space	4
	.word	.LC1625
	.space	4
	.word	.LC1626
	.space	8
	.type	rndis_data_intf, %object
	.size	rndis_data_intf, 9
rndis_data_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	rndis_ul_max_pkt_per_xfer, %object
	.size	rndis_ul_max_pkt_per_xfer, 4
rndis_ul_max_pkt_per_xfer:
	.word	3
	.type	rndis_dl_max_pkt_per_xfer, %object
	.size	rndis_dl_max_pkt_per_xfer, 4
rndis_dl_max_pkt_per_xfer:
	.word	3
	.type	rndis_strings, %object
	.size	rndis_strings, 8
rndis_strings:
	.word	rndis_string_table
	.word	0
	.type	supported_functions, %object
	.size	supported_functions, 108
supported_functions:
	.word	ffs_function
	.word	mbim_function
	.word	ecm_qc_function
	.word	audio_function
	.word	rmnet_smd_function
	.word	rmnet_sdio_function
	.word	rmnet_smd_sdio_function
	.word	rmnet_function
	.word	diag_function
	.word	qdss_function
	.word	adb_function
	.word	midi_function
	.word	ccid_function
	.word	acm_function
	.word	mtp_function
	.word	ptp_function
	.word	rndis_function
	.word	rndis_qc_function
	.word	ecm_function
	.word	ncm_function
	.word	mass_storage_function
	.word	accessory_function
	.word	conn_gadget_function
	.word	audio_source_function
	.word	uasp_function
	.word	hid_function
	.word	0
	.type	dev_attr_terminal_version, %object
	.size	dev_attr_terminal_version, 16
dev_attr_terminal_version:
	.word	.LC1553
	.short	420
	.space	2
	.word	terminal_version_show
	.word	terminal_version_store
	.type	modem_device, %object
	.size	modem_device, 36
modem_device:
	.word	123
	.word	.LC1720
	.word	modem_fops
	.space	24
	.type	rl.26028, %object
	.size	rl.26028, 24
rl.26028:
	.word	0
	.word	3000
	.word	1
	.space	12
	.type	rl.26046, %object
	.size	rl.26046, 24
rl.26046:
	.word	0
	.word	3000
	.word	1
	.space	12
	.type	sport_info, %object
	.size	sport_info, 24
sport_info:
	.word	.LC1743
	.space	4
	.word	9
	.word	.LC1744
	.space	4
	.word	10
	.type	smd_pi, %object
	.size	smd_pi, 24
smd_pi:
	.space	4
	.word	.LC1737
	.space	4
	.space	4
	.word	.LC1738
	.space	4
	.type	ghsic_data_serial_tx_q_size, %object
	.size	ghsic_data_serial_tx_q_size, 4
ghsic_data_serial_tx_q_size:
	.word	20
	.type	ghsic_data_serial_rx_q_size, %object
	.size	ghsic_data_serial_rx_q_size, 4
ghsic_data_serial_rx_q_size:
	.word	10
	.type	ghsic_data_rmnet_tx_q_size, %object
	.size	ghsic_data_rmnet_tx_q_size, 4
ghsic_data_rmnet_tx_q_size:
	.word	300
	.type	ghsic_data_rmnet_rx_q_size, %object
	.size	ghsic_data_rmnet_rx_q_size, 4
ghsic_data_rmnet_rx_q_size:
	.word	50
	.type	ghsuart_data_serial_tx_q_size, %object
	.size	ghsuart_data_serial_tx_q_size, 4
ghsuart_data_serial_tx_q_size:
	.word	5
	.type	ghsuart_data_serial_rx_q_size, %object
	.size	ghsuart_data_serial_rx_q_size, 4
ghsuart_data_serial_rx_q_size:
	.word	5
	.type	ghsuart_data_rmnet_tx_q_size, %object
	.size	ghsuart_data_rmnet_tx_q_size, 4
ghsuart_data_rmnet_tx_q_size:
	.word	20
	.type	ghsuart_data_rmnet_rx_q_size, %object
	.size	ghsuart_data_rmnet_rx_q_size, 4
ghsuart_data_rmnet_rx_q_size:
	.word	10
	.type	rmnet_string_defs, %object
	.size	rmnet_string_defs, 16
rmnet_string_defs:
	.space	4
	.word	.LC1755
	.space	8
	.type	rmnet_strings, %object
	.size	rmnet_strings, 8
rmnet_strings:
	.word	rmnet_string_table
	.word	0
	.type	rndis_union_desc, %object
	.size	rndis_union_desc, 5
rndis_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	fs_in_desc, %object
	.size	fs_in_desc, 9
fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_out_desc, %object
	.size	fs_out_desc, 9
fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_notify_desc, %object
	.size	fs_notify_desc, 9
fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	hs_in_desc, %object
	.size	hs_in_desc, 9
hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_out_desc, %object
	.size	hs_out_desc, 9
hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_notify_desc, %object
	.size	hs_notify_desc, 9
hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	ss_in_desc, %object
	.size	ss_in_desc, 9
ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_out_desc, %object
	.size	ss_out_desc, 9
ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_notify_desc, %object
	.size	ss_notify_desc, 9
ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	eth_fs_function, %object
	.size	eth_fs_function, 44
eth_fs_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	fs_notify_desc
	.word	rndis_data_intf
	.word	fs_in_desc
	.word	fs_out_desc
	.word	0
	.type	eth_hs_function, %object
	.size	eth_hs_function, 44
eth_hs_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	hs_notify_desc
	.word	rndis_data_intf
	.word	hs_in_desc
	.word	hs_out_desc
	.word	0
	.type	eth_ss_function, %object
	.size	eth_ss_function, 56
eth_ss_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	ss_notify_desc
	.word	ss_intr_comp_desc
	.word	rndis_data_intf
	.word	ss_in_desc
	.word	ss_bulk_comp_desc
	.word	ss_out_desc
	.word	ss_bulk_comp_desc
	.word	0
	.type	ecm_qc_desc, %object
	.size	ecm_qc_desc, 13
ecm_qc_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	1514
	.short	0
	.byte	0
	.space	3
	.type	ecm_qc_strings, %object
	.size	ecm_qc_strings, 8
ecm_qc_strings:
	.word	ecm_qc_string_table
	.word	0
	.type	ecm_desc, %object
	.size	ecm_desc, 13
ecm_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	1514
	.short	0
	.byte	0
	.space	3
	.type	ecm_strings, %object
	.size	ecm_strings, 8
ecm_strings:
	.word	ecm_string_table
	.word	0
	.type	rndis_qc_string_defs, %object
	.size	rndis_qc_string_defs, 32
rndis_qc_string_defs:
	.space	4
	.word	.LC1624
	.space	4
	.word	.LC1625
	.space	4
	.word	.LC1626
	.space	8
	.type	rndis_qc_strings, %object
	.size	rndis_qc_strings, 8
rndis_qc_strings:
	.word	rndis_qc_string_table
	.word	0
	.type	qc_gadget_type, %object
	.size	qc_gadget_type, 24
qc_gadget_type:
	.word	.LC1612
	.space	20
	.type	fn_cntl, %object
	.size	fn_cntl, 4
fn_cntl:
	.word	.LC1606
	.type	fn_play, %object
	.size	fn_play, 4
fn_play:
	.word	.LC1608
	.type	fn_cap, %object
	.size	fn_cap, 4
fn_cap:
	.word	.LC1607
	.type	microphone_fu_controls, %object
	.size	microphone_fu_controls, 32
microphone_fu_controls:
	.word	microphone_fu_controls
	.word	microphone_fu_controls
	.space	12
	.word	.LC1588
	.space	8
	.type	speaker_fu_controls, %object
	.size	speaker_fu_controls, 32
speaker_fu_controls:
	.word	speaker_fu_controls
	.word	speaker_fu_controls
	.space	12
	.word	.LC1591
	.space	8
	.type	microphone_mute_control, %object
	.size	microphone_mute_control, 44
microphone_mute_control:
	.word	microphone_mute_control
	.word	microphone_mute_control
	.word	.LC1590
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	microphone_volume_control, %object
	.size	microphone_volume_control, 44
microphone_volume_control:
	.word	microphone_volume_control
	.word	microphone_volume_control
	.word	.LC1589
	.byte	2
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_mute_control, %object
	.size	speaker_mute_control, 44
speaker_mute_control:
	.word	speaker_mute_control
	.word	speaker_mute_control
	.word	.LC1593
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_volume_control, %object
	.size	speaker_volume_control, 44
speaker_volume_control:
	.word	speaker_volume_control
	.word	speaker_volume_control
	.word	.LC1592
	.byte	2
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	microphone_sample_freq_control, %object
	.size	microphone_sample_freq_control, 44
microphone_sample_freq_control:
	.word	microphone_sample_freq_control
	.word	microphone_sample_freq_control
	.word	.LC1585
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_sample_freq_control, %object
	.size	speaker_sample_freq_control, 44
speaker_sample_freq_control:
	.word	speaker_sample_freq_control
	.word	speaker_sample_freq_control
	.word	.LC1587
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	audio_strings, %object
	.size	audio_strings, 8
audio_strings:
	.word	audio_stringtab_dev
	.word	0
	.type	necm_desc, %object
	.size	necm_desc, 13
necm_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	9014
	.short	0
	.byte	0
	.space	3
	.type	ncm_strings, %object
	.size	ncm_strings, 8
ncm_strings:
	.word	ncm_string_table
	.word	0
	.type	usb_android_dt_match, %object
	.size	usb_android_dt_match, 392
usb_android_dt_match:
	.space	64
	.ascii	"qcom,android-usb\000"
	.space	111
	.space	4
	.space	196
	.type	dev_attr_remote_wakeup, %object
	.size	dev_attr_remote_wakeup, 16
dev_attr_remote_wakeup:
	.word	.LC1501
	.short	420
	.space	2
	.word	remote_wakeup_show
	.word	remote_wakeup_store
	.type	dev_attr_state, %object
	.size	dev_attr_state, 16
dev_attr_state:
	.word	.LC1502
	.short	292
	.space	2
	.word	state_show
	.word	0
	.type	dev_attr_pm_qos, %object
	.size	dev_attr_pm_qos, 16
dev_attr_pm_qos:
	.word	.LC1503
	.short	420
	.space	2
	.word	pm_qos_show
	.word	pm_qos_store
	.type	dev_attr_enable, %object
	.size	dev_attr_enable, 16
dev_attr_enable:
	.word	.LC1504
	.short	420
	.space	2
	.word	enable_show
	.word	enable_store
	.type	dev_attr_functions, %object
	.size	dev_attr_functions, 16
dev_attr_functions:
	.word	.LC1505
	.short	420
	.space	2
	.word	functions_show
	.word	functions_store
	.type	dev_attr_macos, %object
	.size	dev_attr_macos, 16
dev_attr_macos:
	.word	.LC1506
	.short	420
	.space	2
	.word	macos_show
	.word	0
	.type	dev_attr_ss_host_available, %object
	.size	dev_attr_ss_host_available, 16
dev_attr_ss_host_available:
	.word	.LC1507
	.short	420
	.space	2
	.word	ss_host_available_show
	.word	0
	.type	dev_attr_usb30en, %object
	.size	dev_attr_usb30en, 16
dev_attr_usb30en:
	.word	.LC1508
	.short	420
	.space	2
	.word	usb30en_show
	.word	usb30en_store
	.type	dev_attr_bcdUSB, %object
	.size	dev_attr_bcdUSB, 16
dev_attr_bcdUSB:
	.word	.LC1509
	.short	420
	.space	2
	.word	bcdUSB_show
	.word	0
	.type	dev_attr_iSerial, %object
	.size	dev_attr_iSerial, 16
dev_attr_iSerial:
	.word	.LC1510
	.short	420
	.space	2
	.word	iSerial_show
	.word	iSerial_store
	.type	dev_attr_iProduct, %object
	.size	dev_attr_iProduct, 16
dev_attr_iProduct:
	.word	.LC1511
	.short	420
	.space	2
	.word	iProduct_show
	.word	iProduct_store
	.type	dev_attr_iManufacturer, %object
	.size	dev_attr_iManufacturer, 16
dev_attr_iManufacturer:
	.word	.LC1512
	.short	420
	.space	2
	.word	iManufacturer_show
	.word	iManufacturer_store
	.type	dev_attr_bDeviceProtocol, %object
	.size	dev_attr_bDeviceProtocol, 16
dev_attr_bDeviceProtocol:
	.word	.LC1513
	.short	420
	.space	2
	.word	bDeviceProtocol_show
	.word	bDeviceProtocol_store
	.type	dev_attr_bDeviceSubClass, %object
	.size	dev_attr_bDeviceSubClass, 16
dev_attr_bDeviceSubClass:
	.word	.LC1514
	.short	420
	.space	2
	.word	bDeviceSubClass_show
	.word	bDeviceSubClass_store
	.type	dev_attr_bDeviceClass, %object
	.size	dev_attr_bDeviceClass, 16
dev_attr_bDeviceClass:
	.word	.LC1515
	.short	420
	.space	2
	.word	bDeviceClass_show
	.word	bDeviceClass_store
	.type	dev_attr_bcdDevice, %object
	.size	dev_attr_bcdDevice, 16
dev_attr_bcdDevice:
	.word	.LC1516
	.short	420
	.space	2
	.word	bcdDevice_show
	.word	bcdDevice_store
	.type	dev_attr_idProduct, %object
	.size	dev_attr_idProduct, 16
dev_attr_idProduct:
	.word	.LC1517
	.short	420
	.space	2
	.word	idProduct_show
	.word	idProduct_store
	.type	dev_attr_idVendor, %object
	.size	dev_attr_idVendor, 16
dev_attr_idVendor:
	.word	.LC1518
	.short	420
	.space	2
	.word	idVendor_show
	.word	idVendor_store
	.type	hid_function, %object
	.size	hid_function, 52
hid_function:
	.word	.LC463
	.space	20
	.word	hid_function_init
	.word	hid_function_cleanup
	.space	8
	.word	hid_function_bind_config
	.space	8
	.type	uasp_function, %object
	.size	uasp_function, 52
uasp_function:
	.word	.LC1522
	.space	20
	.word	uasp_function_init
	.word	uasp_function_cleanup
	.space	8
	.word	uasp_function_bind_config
	.space	8
	.type	audio_source_function, %object
	.size	audio_source_function, 52
audio_source_function:
	.word	.LC1176
	.space	12
	.word	audio_source_function_attributes
	.space	4
	.word	audio_source_function_init
	.word	audio_source_function_cleanup
	.space	8
	.word	audio_source_function_bind_config
	.word	audio_source_function_unbind_config
	.space	4
	.type	audio_source_function_attributes, %object
	.size	audio_source_function_attributes, 8
audio_source_function_attributes:
	.word	dev_attr_pcm
	.word	0
	.type	dev_attr_pcm, %object
	.size	dev_attr_pcm, 16
dev_attr_pcm:
	.word	.LC1524
	.short	420
	.space	2
	.word	audio_source_pcm_show
	.word	0
	.type	accessory_function, %object
	.size	accessory_function, 52
accessory_function:
	.word	.LC1020
	.space	20
	.word	accessory_function_init
	.word	accessory_function_cleanup
	.space	8
	.word	accessory_function_bind_config
	.space	4
	.word	accessory_function_ctrlrequest
	.type	mass_storage_function, %object
	.size	mass_storage_function, 52
mass_storage_function:
	.word	.LC1525
	.space	12
	.word	mass_storage_function_attributes
	.space	4
	.word	mass_storage_function_init
	.word	mass_storage_function_cleanup
	.space	8
	.word	mass_storage_function_bind_config
	.space	8
	.type	mass_storage_function_attributes, %object
	.size	mass_storage_function_attributes, 20
mass_storage_function_attributes:
	.word	dev_attr_inquiry_string
	.word	dev_attr_vendor_string
	.word	dev_attr_product_string
	.word	dev_attr_sua_version_info
	.word	0
	.type	dev_attr_sua_version_info, %object
	.size	dev_attr_sua_version_info, 16
dev_attr_sua_version_info:
	.word	.LC1526
	.short	420
	.space	2
	.word	sua_version_info_show
	.word	sua_version_info_store
	.type	dev_attr_product_string, %object
	.size	dev_attr_product_string, 16
dev_attr_product_string:
	.word	.LC1527
	.short	420
	.space	2
	.word	mass_storage_product_show
	.word	mass_storage_product_store
	.type	dev_attr_vendor_string, %object
	.size	dev_attr_vendor_string, 16
dev_attr_vendor_string:
	.word	.LC1528
	.short	420
	.space	2
	.word	mass_storage_vendor_show
	.word	mass_storage_vendor_store
	.type	dev_attr_inquiry_string, %object
	.size	dev_attr_inquiry_string, 16
dev_attr_inquiry_string:
	.word	.LC1529
	.short	420
	.space	2
	.word	mass_storage_inquiry_show
	.word	mass_storage_inquiry_store
	.type	ecm_function, %object
	.size	ecm_function, 52
ecm_function:
	.word	.LC1436
	.space	12
	.word	ecm_function_attributes
	.space	4
	.word	ecm_function_init
	.word	ecm_function_cleanup
	.space	8
	.word	ecm_function_bind_config
	.word	ecm_function_unbind_config
	.space	4
	.type	rndis_qc_function, %object
	.size	rndis_qc_function, 52
rndis_qc_function:
	.word	.LC1530
	.space	12
	.word	rndis_function_attributes
	.space	4
	.word	rndis_qc_function_init
	.word	rndis_qc_function_cleanup
	.space	8
	.word	rndis_qc_function_bind_config
	.word	rndis_qc_function_unbind_config
	.space	4
	.type	rndis_function, %object
	.size	rndis_function, 52
rndis_function:
	.word	.LC1184
	.space	12
	.word	rndis_function_attributes
	.space	4
	.word	rndis_function_init
	.word	rndis_function_cleanup
	.space	8
	.word	rndis_function_bind_config
	.word	rndis_function_unbind_config
	.space	4
	.type	rndis_function_attributes, %object
	.size	rndis_function_attributes, 24
rndis_function_attributes:
	.word	dev_attr_manufacturer
	.word	dev_attr_wceis
	.word	dev_attr_ethaddr
	.word	dev_attr_vendorID
	.word	dev_attr_max_pkt_per_xfer
	.word	0
	.type	dev_attr_max_pkt_per_xfer, %object
	.size	dev_attr_max_pkt_per_xfer, 16
dev_attr_max_pkt_per_xfer:
	.word	.LC1531
	.short	420
	.space	2
	.word	rndis_max_pkt_per_xfer_show
	.word	rndis_max_pkt_per_xfer_store
	.type	dev_attr_vendorID, %object
	.size	dev_attr_vendorID, 16
dev_attr_vendorID:
	.word	.LC1532
	.short	420
	.space	2
	.word	rndis_vendorID_show
	.word	rndis_vendorID_store
	.type	dev_attr_ethaddr, %object
	.size	dev_attr_ethaddr, 16
dev_attr_ethaddr:
	.word	.LC1533
	.short	420
	.space	2
	.word	rndis_ethaddr_show
	.word	rndis_ethaddr_store
	.type	dev_attr_wceis, %object
	.size	dev_attr_wceis, 16
dev_attr_wceis:
	.word	.LC1534
	.short	420
	.space	2
	.word	rndis_wceis_show
	.word	rndis_wceis_store
	.type	dev_attr_manufacturer, %object
	.size	dev_attr_manufacturer, 16
dev_attr_manufacturer:
	.word	.LC1535
	.short	420
	.space	2
	.word	rndis_manufacturer_show
	.word	rndis_manufacturer_store
	.type	ptp_function, %object
	.size	ptp_function, 52
ptp_function:
	.word	.LC1536
	.space	20
	.word	ptp_function_init
	.word	ptp_function_cleanup
	.space	8
	.word	ptp_function_bind_config
	.space	4
	.word	mtp_function_ctrlrequest
	.type	mtp_function, %object
	.size	mtp_function, 52
mtp_function:
	.word	.LC1022
	.space	20
	.word	mtp_function_init
	.word	mtp_function_cleanup
	.space	8
	.word	mtp_function_bind_config
	.space	4
	.word	mtp_function_ctrlrequest
	.type	ccid_function, %object
	.size	ccid_function, 52
ccid_function:
	.word	.LC1016
	.space	20
	.word	ccid_function_init
	.word	ccid_function_cleanup
	.space	8
	.word	ccid_function_bind_config
	.space	8
	.type	qdss_function, %object
	.size	qdss_function, 52
qdss_function:
	.word	.LC1169
	.space	20
	.word	qdss_function_init
	.word	qdss_function_cleanup
	.space	8
	.word	qdss_function_bind_config
	.space	8
	.type	diag_function, %object
	.size	diag_function, 52
diag_function:
	.word	.LC1537
	.space	12
	.word	diag_function_attributes
	.space	4
	.word	diag_function_init
	.word	diag_function_cleanup
	.space	8
	.word	diag_function_bind_config
	.space	8
	.type	diag_function_attributes, %object
	.size	diag_function_attributes, 8
diag_function_attributes:
	.word	dev_attr_clients
	.word	0
	.type	dev_attr_clients, %object
	.size	dev_attr_clients, 16
dev_attr_clients:
	.word	.LC1538
	.short	128
	.space	2
	.word	0
	.word	clients_store
	.type	audio_function, %object
	.size	audio_function, 52
audio_function:
	.word	.LC1471
	.space	36
	.word	audio_function_bind_config
	.space	8
	.type	mbim_function, %object
	.size	mbim_function, 52
mbim_function:
	.word	.LC1036
	.space	12
	.word	mbim_function_attributes
	.space	4
	.word	mbim_function_init
	.word	mbim_function_cleanup
	.space	8
	.word	mbim_function_bind_config
	.space	4
	.word	mbim_function_ctrlrequest
	.type	mbim_function_attributes, %object
	.size	mbim_function_attributes, 8
mbim_function_attributes:
	.word	dev_attr_mbim_transports
	.word	0
	.type	dev_attr_mbim_transports, %object
	.size	dev_attr_mbim_transports, 16
dev_attr_mbim_transports:
	.word	.LC1539
	.short	420
	.space	2
	.word	mbim_transports_show
	.word	mbim_transports_store
	.type	ecm_qc_function, %object
	.size	ecm_qc_function, 52
ecm_qc_function:
	.word	.LC1541
	.space	12
	.word	ecm_function_attributes
	.space	4
	.word	ecm_function_init
	.word	ecm_function_cleanup
	.space	8
	.word	ecm_qc_function_bind_config
	.word	ecm_qc_function_unbind_config
	.space	4
	.type	ecm_function_attributes, %object
	.size	ecm_function_attributes, 12
ecm_function_attributes:
	.word	dev_attr_ecm_transports
	.word	dev_attr_ecm_ethaddr
	.word	0
	.type	dev_attr_ecm_transports, %object
	.size	dev_attr_ecm_transports, 16
dev_attr_ecm_transports:
	.word	.LC1542
	.short	420
	.space	2
	.word	ecm_transports_show
	.word	ecm_transports_store
	.type	dev_attr_ecm_ethaddr, %object
	.size	dev_attr_ecm_ethaddr, 16
dev_attr_ecm_ethaddr:
	.word	.LC1543
	.short	420
	.space	2
	.word	ecm_ethaddr_show
	.word	ecm_ethaddr_store
	.type	rmnet_function, %object
	.size	rmnet_function, 52
rmnet_function:
	.word	.LC1180
	.space	12
	.word	rmnet_function_attributes
	.space	8
	.word	rmnet_function_cleanup
	.space	8
	.word	rmnet_function_bind_config
	.space	8
	.type	rmnet_function_attributes, %object
	.size	rmnet_function_attributes, 12
rmnet_function_attributes:
	.word	dev_attr_rmnet_transports
	.word	dev_attr_rmnet_xport_names
	.word	0
	.type	dev_attr_rmnet_xport_names, %object
	.size	dev_attr_rmnet_xport_names, 16
dev_attr_rmnet_xport_names:
	.word	.LC1545
	.short	420
	.space	2
	.word	rmnet_xport_names_show
	.word	rmnet_xport_names_store
	.type	dev_attr_rmnet_transports, %object
	.size	dev_attr_rmnet_transports, 16
dev_attr_rmnet_transports:
	.word	.LC1546
	.short	420
	.space	2
	.word	rmnet_transports_show
	.word	rmnet_transports_store
	.type	rmnet_smd_sdio_function, %object
	.size	rmnet_smd_sdio_function, 52
rmnet_smd_sdio_function:
	.word	.LC1018
	.space	12
	.word	rmnet_smd_sdio_attributes
	.space	4
	.word	rmnet_smd_sdio_function_init
	.word	rmnet_smd_sdio_function_cleanup
	.space	8
	.word	rmnet_smd_sdio_bind_config
	.space	8
	.type	rmnet_smd_sdio_attributes, %object
	.size	rmnet_smd_sdio_attributes, 8
rmnet_smd_sdio_attributes:
	.word	dev_attr_transport
	.word	0
	.type	rmnet_sdio_function, %object
	.size	rmnet_sdio_function, 52
rmnet_sdio_function:
	.word	.LC1041
	.space	36
	.word	rmnet_sdio_function_bind_config
	.space	8
	.type	rmnet_smd_function, %object
	.size	rmnet_smd_function, 52
rmnet_smd_function:
	.word	.LC1547
	.space	36
	.word	rmnet_smd_function_bind_config
	.space	8
	.type	acm_function, %object
	.size	acm_function, 52
acm_function:
	.word	.LC909
	.space	12
	.word	acm_function_attributes
	.space	4
	.word	acm_function_init
	.word	acm_function_cleanup
	.space	8
	.word	acm_function_bind_config
	.space	8
	.type	acm_function_attributes, %object
	.size	acm_function_attributes, 8
acm_function_attributes:
	.word	dev_attr_instances
	.word	0
	.type	dev_attr_instances, %object
	.size	dev_attr_instances, 16
dev_attr_instances:
	.word	.LC1548
	.short	420
	.space	2
	.word	acm_instances_show
	.word	acm_instances_store
	.type	midi_function, %object
	.size	midi_function, 52
midi_function:
	.word	.LC1549
	.space	12
	.word	midi_function_attributes
	.space	4
	.word	midi_function_init
	.word	midi_function_cleanup
	.space	8
	.word	midi_function_bind_config
	.space	8
	.type	midi_function_attributes, %object
	.size	midi_function_attributes, 8
midi_function_attributes:
	.word	dev_attr_alsa
	.word	0
	.type	dev_attr_alsa, %object
	.size	dev_attr_alsa, 16
dev_attr_alsa:
	.word	.LC1550
	.short	292
	.space	2
	.word	midi_alsa_show
	.word	0
	.type	ffs_function_attributes, %object
	.size	ffs_function_attributes, 8
ffs_function_attributes:
	.word	dev_attr_aliases
	.word	0
	.type	dev_attr_aliases, %object
	.size	dev_attr_aliases, 16
dev_attr_aliases:
	.word	.LC1552
	.short	420
	.space	2
	.word	ffs_aliases_show
	.word	ffs_aliases_store
	.type	dev_strings, %object
	.size	dev_strings, 8
dev_strings:
	.word	stringtab_dev
	.word	0
	.type	stringtab_dev, %object
	.size	stringtab_dev, 8
stringtab_dev:
	.short	1033
	.space	2
	.word	strings_dev
	.type	ncm_function, %object
	.size	ncm_function, 52
ncm_function:
	.word	.LC796
	.space	20
	.word	ncm_function_init
	.word	ncm_function_cleanup
	.space	8
	.word	ncm_function_bind_config
	.word	ncm_function_unbind_config
	.space	4
	.type	ncm_string_table, %object
	.size	ncm_string_table, 8
ncm_string_table:
	.short	1033
	.space	2
	.word	ncm_string_defs
	.type	ncm_desc, %object
	.size	ncm_desc, 6
ncm_desc:
	.byte	6
	.byte	36
	.byte	26
	.2byte	256
	.byte	9
	.space	2
	.type	ncm_header_desc, %object
	.size	ncm_header_desc, 5
ncm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	conn_gadget_function, %object
	.size	conn_gadget_function, 52
conn_gadget_function:
	.word	.LC911
	.space	12
	.word	conn_gadget_function_attributes
	.space	4
	.word	conn_gadget_function_init
	.word	conn_gadget_function_cleanup
	.space	8
	.word	conn_gadget_function_bind_config
	.space	8
	.type	conn_gadget_function_attributes, %object
	.size	conn_gadget_function_attributes, 16
conn_gadget_function_attributes:
	.word	dev_attr_usb_buffer_size
	.word	dev_attr_out_max_packet_size
	.word	dev_attr_in_max_packet_size
	.word	0
	.type	dev_attr_in_max_packet_size, %object
	.size	dev_attr_in_max_packet_size, 16
dev_attr_in_max_packet_size:
	.word	.LC1558
	.short	420
	.space	2
	.word	conn_gadget_in_max_packet_size_show
	.word	conn_gadget_in_max_packet_size_store
	.type	dev_attr_out_max_packet_size, %object
	.size	dev_attr_out_max_packet_size, 16
dev_attr_out_max_packet_size:
	.word	.LC1559
	.short	420
	.space	2
	.word	conn_gadget_out_max_packet_size_show
	.word	conn_gadget_out_max_packet_size_store
	.type	dev_attr_usb_buffer_size, %object
	.size	dev_attr_usb_buffer_size, 16
dev_attr_usb_buffer_size:
	.word	.LC1560
	.short	420
	.space	2
	.word	conn_gadget_usb_buffer_size_show
	.word	conn_gadget_usb_buffer_size_store
	.type	conn_gadget_superspeed_bulk_comp_desc, %object
	.size	conn_gadget_superspeed_bulk_comp_desc, 6
conn_gadget_superspeed_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	___modver_attr, %object
	.size	___modver_attr, 36
___modver_attr:
	.word	.LC1566
	.short	292
	.space	2
	.word	__modver_version_show
	.space	16
	.word	.LC1125
	.word	.LC1567
	.type	audio_stringtab_dev, %object
	.size	audio_stringtab_dev, 8
audio_stringtab_dev:
	.short	1033
	.space	2
	.word	audio_string_defs
	.type	microphone_as_iso_in_desc, %object
	.size	microphone_as_iso_in_desc, 7
microphone_as_iso_in_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	microphone_as_header_desc, %object
	.size	microphone_as_header_desc, 7
microphone_as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	2
	.byte	1
	.2byte	1
	.space	1
	.type	speaker_as_iso_out_desc, %object
	.size	speaker_as_iso_out_desc, 7
speaker_as_iso_out_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	speaker_as_header_desc, %object
	.size	speaker_as_header_desc, 7
speaker_as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	3
	.byte	1
	.2byte	1
	.space	1
	.type	microphone_output_terminal_desc, %object
	.size	microphone_output_terminal_desc, 9
microphone_output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	2
	.short	257
	.byte	1
	.byte	1
	.space	1
	.space	3
	.type	speaker_output_terminal_desc, %object
	.size	speaker_output_terminal_desc, 9
speaker_output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	4
	.short	769
	.byte	3
	.byte	3
	.space	1
	.space	3
	.type	req_capture_count, %object
	.size	req_capture_count, 4
req_capture_count:
	.word	48
	.type	rndis_qc_string_table, %object
	.size	rndis_qc_string_table, 8
rndis_qc_string_table:
	.short	1033
	.space	2
	.word	rndis_qc_string_defs
	.type	rndis_qc_ss_bulk_comp_desc, %object
	.size	rndis_qc_ss_bulk_comp_desc, 6
rndis_qc_ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rndis_qc_ss_intr_comp_desc, %object
	.size	rndis_qc_ss_intr_comp_desc, 6
rndis_qc_ss_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	rndis_qc_acm_descriptor, %object
	.size	rndis_qc_acm_descriptor, 4
rndis_qc_acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	0
	.type	rndis_qc_call_mgmt_descriptor, %object
	.size	rndis_qc_call_mgmt_descriptor, 5
rndis_qc_call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.byte	1
	.space	3
	.type	rndis_qc_header_desc, %object
	.size	rndis_qc_header_desc, 5
rndis_qc_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	ecm_string_table, %object
	.size	ecm_string_table, 8
ecm_string_table:
	.short	1033
	.space	2
	.word	ecm_string_defs
	.type	ss_ecm_bulk_comp_desc, %object
	.size	ss_ecm_bulk_comp_desc, 6
ss_ecm_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_ecm_intr_comp_desc, %object
	.size	ss_ecm_intr_comp_desc, 6
ss_ecm_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	16
	.space	2
	.type	ecm_header_desc, %object
	.size	ecm_header_desc, 5
ecm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	mbim_string_table, %object
	.size	mbim_string_table, 8
mbim_string_table:
	.short	1033
	.space	2
	.word	mbim_string_defs
	.type	ss_mbim_out_comp_desc, %object
	.size	ss_mbim_out_comp_desc, 6
ss_mbim_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_mbim_in_comp_desc, %object
	.size	ss_mbim_in_comp_desc, 6
ss_mbim_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_mbim_notify_comp_desc, %object
	.size	ss_mbim_notify_comp_desc, 6
ss_mbim_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	64
	.space	2
	.type	ext_mbb_desc, %object
	.size	ext_mbb_desc, 8
ext_mbb_desc:
	.byte	8
	.byte	36
	.byte	28
	.2byte	256
	.byte	64
	.short	1500
	.type	mbim_header_desc, %object
	.size	mbim_header_desc, 5
mbim_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	ecm_qc_string_table, %object
	.size	ecm_qc_string_table, 8
ecm_qc_string_table:
	.short	1033
	.space	2
	.word	ecm_qc_string_defs
	.type	ecm_qc_ss_out_comp_desc, %object
	.size	ecm_qc_ss_out_comp_desc, 6
ecm_qc_ss_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ecm_qc_ss_in_comp_desc, %object
	.size	ecm_qc_ss_in_comp_desc, 6
ecm_qc_ss_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ecm_qc_ss_notify_comp_desc, %object
	.size	ecm_qc_ss_notify_comp_desc, 6
ecm_qc_ss_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	16
	.space	2
	.type	ecm_qc_header_desc, %object
	.size	ecm_qc_header_desc, 5
ecm_qc_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	rndis_string_table, %object
	.size	rndis_string_table, 8
rndis_string_table:
	.short	1033
	.space	2
	.word	rndis_string_defs
	.type	ss_bulk_comp_desc, %object
	.size	ss_bulk_comp_desc, 6
ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_intr_comp_desc, %object
	.size	ss_intr_comp_desc, 6
ss_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	rndis_acm_descriptor, %object
	.size	rndis_acm_descriptor, 4
rndis_acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	0
	.type	call_mgmt_descriptor, %object
	.size	call_mgmt_descriptor, 5
call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.byte	1
	.space	3
	.type	header_desc, %object
	.size	header_desc, 5
header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	acc_string_table, %object
	.size	acc_string_table, 8
acc_string_table:
	.short	1033
	.space	2
	.word	acc_string_defs
	.type	acc_superspeed_out_comp_desc, %object
	.size	acc_superspeed_out_comp_desc, 6
acc_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acc_superspeed_in_comp_desc, %object
	.size	acc_superspeed_in_comp_desc, 6
acc_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	mtp_string_table, %object
	.size	mtp_string_table, 8
mtp_string_table:
	.short	1033
	.space	2
	.word	mtp_string_defs
	.type	mtp_superspeed_intr_comp_desc, %object
	.size	mtp_superspeed_intr_comp_desc, 6
mtp_superspeed_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	28
	.space	2
	.type	mtp_superspeed_out_comp_desc, %object
	.size	mtp_superspeed_out_comp_desc, 6
mtp_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.byte	2
	.space	3
	.space	2
	.type	mtp_superspeed_in_comp_desc, %object
	.size	mtp_superspeed_in_comp_desc, 6
mtp_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.byte	2
	.space	3
	.space	2
	.type	ptp_interface_desc, %object
	.size	ptp_interface_desc, 9
ptp_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	3
	.byte	6
	.byte	1
	.byte	1
	.space	1
	.space	3
	.type	midi_stringtab, %object
	.size	midi_stringtab, 8
midi_stringtab:
	.short	1033
	.space	2
	.word	midi_string_defs
	.type	adb_superspeed_out_comp_desc, %object
	.size	adb_superspeed_out_comp_desc, 6
adb_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	adb_superspeed_in_comp_desc, %object
	.size	adb_superspeed_in_comp_desc, 6
adb_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acm_string_table, %object
	.size	acm_string_table, 8
acm_string_table:
	.short	1033
	.space	2
	.word	acm_string_defs
	.type	acm_ss_bulk_comp_desc, %object
	.size	acm_ss_bulk_comp_desc, 6
acm_ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acm_descriptor, %object
	.size	acm_descriptor, 4
acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	2
	.type	acm_header_desc, %object
	.size	acm_header_desc, 5
acm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	fsg_stringtab, %object
	.size	fsg_stringtab, 8
fsg_stringtab:
	.short	1033
	.space	2
	.word	fsg_strings
	.type	fs_audio_desc, %object
	.size	fs_audio_desc, 48
fs_audio_desc:
	.word	audio_source_ac_interface_desc
	.word	audio_source_ac_header_desc
	.word	input_terminal_desc
	.word	output_terminal_desc
	.word	feature_unit_desc
	.word	as_interface_alt_0_desc
	.word	as_interface_alt_1_desc
	.word	as_header_desc
	.word	as_type_i_desc
	.word	fs_as_in_ep_desc
	.word	as_iso_in_desc
	.word	0
	.type	hs_audio_desc, %object
	.size	hs_audio_desc, 48
hs_audio_desc:
	.word	audio_source_ac_interface_desc
	.word	audio_source_ac_header_desc
	.word	input_terminal_desc
	.word	output_terminal_desc
	.word	feature_unit_desc
	.word	as_interface_alt_0_desc
	.word	as_interface_alt_1_desc
	.word	as_header_desc
	.word	as_type_i_desc
	.word	hs_as_in_ep_desc
	.word	as_iso_in_desc
	.word	0
	.type	as_iso_in_desc, %object
	.size	as_iso_in_desc, 7
as_iso_in_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	as_header_desc, %object
	.size	as_header_desc, 7
as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	output_terminal_desc, %object
	.size	output_terminal_desc, 9
output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	3
	.short	257
	.byte	2
	.byte	2
	.space	1
	.space	3
	.type	feature_unit_desc, %object
	.size	feature_unit_desc, 9
feature_unit_desc:
	.byte	9
	.byte	36
	.byte	6
	.byte	2
	.byte	1
	.byte	2
	.space	3
	.space	3
	.type	audio_source_ac_header_desc, %object
	.size	audio_source_ac_header_desc, 10
audio_source_ac_header_desc:
	.byte	10
	.byte	36
	.byte	1
	.2byte	256
	.2byte	40
	.byte	2
	.byte	0
	.byte	1
	.space	2
	.type	rmnet_string_table, %object
	.size	rmnet_string_table, 8
rmnet_string_table:
	.short	1033
	.space	2
	.word	rmnet_string_defs
	.type	rmnet_ss_out_comp_desc, %object
	.size	rmnet_ss_out_comp_desc, 6
rmnet_ss_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rmnet_ss_in_comp_desc, %object
	.size	rmnet_ss_in_comp_desc, 6
rmnet_ss_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rmnet_ss_notify_comp_desc, %object
	.size	rmnet_ss_notify_comp_desc, 6
rmnet_ss_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	dev_attr_transport, %object
	.size	dev_attr_transport, 16
dev_attr_transport:
	.word	.LC1758
	.short	420
	.space	2
	.word	0
	.word	transport_store
	.type	rmnet_mux_string_table, %object
	.size	rmnet_mux_string_table, 8
rmnet_mux_string_table:
	.short	1033
	.space	2
	.word	rmnet_mux_string_defs
	.type	rmnet_mux_string_defs, %object
	.size	rmnet_mux_string_defs, 16
rmnet_mux_string_defs:
	.space	4
	.word	.LC1755
	.space	8
	.type	mux_sdio_rx_fctrl_dis_thld, %object
	.size	mux_sdio_rx_fctrl_dis_thld, 4
mux_sdio_rx_fctrl_dis_thld:
	.word	500
	.type	mux_sdio_tx_pkt_drop_thld, %object
	.size	mux_sdio_tx_pkt_drop_thld, 4
mux_sdio_tx_pkt_drop_thld:
	.word	1000
	.type	rmnet_sdio_string_table, %object
	.size	rmnet_sdio_string_table, 8
rmnet_sdio_string_table:
	.short	1033
	.space	2
	.word	rmnet_sdio_string_defs
	.type	rmnet_sdio_string_defs, %object
	.size	rmnet_sdio_string_defs, 16
rmnet_sdio_string_defs:
	.space	4
	.word	.LC1763
	.space	8
	.type	sdio_rx_fctrl_dis_thld, %object
	.size	sdio_rx_fctrl_dis_thld, 4
sdio_rx_fctrl_dis_thld:
	.word	500
	.type	sdio_tx_pkt_drop_thld, %object
	.size	sdio_tx_pkt_drop_thld, 4
sdio_tx_pkt_drop_thld:
	.word	1000
	.type	rmnet_smd_string_table, %object
	.size	rmnet_smd_string_table, 8
rmnet_smd_string_table:
	.short	1033
	.space	2
	.word	rmnet_smd_string_defs
	.type	rmnet_smd_string_defs, %object
	.size	rmnet_smd_string_defs, 16
rmnet_smd_string_defs:
	.space	4
	.word	.LC1763
	.space	8
	.type	qdss_string_table, %object
	.size	qdss_string_table, 8
qdss_string_table:
	.short	1033
	.space	2
	.word	qdss_string_defs
	.type	ss_bulk_out_comp_desc, %object
	.size	ss_bulk_out_comp_desc, 6
ss_bulk_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_bulk_in_comp_desc, %object
	.size	ss_bulk_in_comp_desc, 6
ss_bulk_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.bss
	.align	2
	.set	.LANCHOR1,. + 0
	.type	n_sdio_ports, %object
	.size	n_sdio_ports, 4
n_sdio_ports:
	.space	4
	.type	sdio_ports, %object
	.size	sdio_ports, 208
sdio_ports:
	.space	208
	.type	n_smd_ports, %object
	.size	n_smd_ports, 4
n_smd_ports:
	.space	4
	.type	smd_ports, %object
	.size	smd_ports, 208
smd_ports:
	.space	208
	.type	n_bam_ports, %object
	.size	n_bam_ports, 4
n_bam_ports:
	.space	4
	.type	bam_ports, %object
	.size	bam_ports, 84
bam_ports:
	.space	84
	.type	ctrl_smd_ports, %object
	.size	ctrl_smd_ports, 504
ctrl_smd_ports:
	.space	504
	.type	no_ctrl_ports, %object
	.size	no_ctrl_ports, 4
no_ctrl_ports:
	.space	4
	.type	gctrl_ports, %object
	.size	gctrl_ports, 416
gctrl_ports:
	.space	416
	.type	no_data_ports, %object
	.size	no_data_ports, 4
no_data_ports:
	.space	4
	.type	gdata_ports, %object
	.size	gdata_ports, 416
gdata_ports:
	.space	416
	.type	num_ctrl_ports, %object
	.size	num_ctrl_ports, 4
num_ctrl_ports:
	.space	4
	.type	ghsuart_ctrl_ports, %object
	.size	ghsuart_ctrl_ports, 168
ghsuart_ctrl_ports:
	.space	168
	.type	num_data_ports, %object
	.size	num_data_ports, 4
num_data_ports:
	.space	4
	.type	ghsuart_data_ports, %object
	.size	ghsuart_data_ports, 168
ghsuart_data_ports:
	.space	168
	.type	read_state, %object
	.size	read_state, 4
read_state:
	.space	4
	.type	modem_wait_q, %object
	.size	modem_wait_q, 12
modem_wait_q:
	.space	12
	.type	audio_reinit, %object
	.size	audio_reinit, 1
audio_reinit:
	.space	1
	.space	3
	.type	serial_string, %object
	.size	serial_string, 256
serial_string:
	.space	256
	.type	composite, %object
	.size	composite, 4
composite:
	.space	4
	.type	rmux_dev, %object
	.size	rmux_dev, 4
rmux_dev:
	.space	4
	.type	_conn_gadget_dev, %object
	.size	_conn_gadget_dev, 4
_conn_gadget_dev:
	.space	4
	.type	_acc_dev, %object
	.size	_acc_dev, 4
_acc_dev:
	.space	4
	.type	rndis_lock, %object
	.size	rndis_lock, 4
rndis_lock:
	.space	4
	.type	_rndis_qc, %object
	.size	_rndis_qc, 4
_rndis_qc:
	.space	4
	.type	_mtp_dev, %object
	.size	_mtp_dev, 4
_mtp_dev:
	.space	4
	.type	_mbim_dev, %object
	.size	_mbim_dev, 4
_mbim_dev:
	.space	4
	.type	product_string, %object
	.size	product_string, 256
product_string:
	.space	256
	.type	manufacturer_string, %object
	.size	manufacturer_string, 256
manufacturer_string:
	.space	256
	.type	ecm_transports, %object
	.size	ecm_transports, 50
ecm_transports:
	.space	50
	.space	2
	.type	rmnet_xport_names, %object
	.size	rmnet_xport_names, 50
rmnet_xport_names:
	.space	50
	.space	2
	.type	rmnet_transports, %object
	.size	rmnet_transports, 50
rmnet_transports:
	.space	50
	.space	2
	.type	mbim_transports, %object
	.size	mbim_transports, 50
mbim_transports:
	.space	50
	.type	usb30en, %object
	.size	usb30en, 1
usb30en:
	.space	1
	.space	1
	.type	epnum, %object
	.size	epnum, 4
epnum:
	.space	4
	.type	composite_gadget_bind, %object
	.size	composite_gadget_bind, 4
composite_gadget_bind:
	.space	4
	.type	idVendor, %object
	.size	idVendor, 2
idVendor:
	.space	2
	.type	idProduct, %object
	.size	idProduct, 2
idProduct:
	.space	2
	.type	bcdDevice, %object
	.size	bcdDevice, 2
bcdDevice:
	.space	2
	.space	2
	.type	iManufacturer, %object
	.size	iManufacturer, 4
iManufacturer:
	.space	4
	.type	composite_manufacturer, %object
	.size	composite_manufacturer, 50
composite_manufacturer:
	.space	50
	.space	2
	.type	iProduct, %object
	.size	iProduct, 4
iProduct:
	.space	4
	.type	iSerialNumber, %object
	.size	iSerialNumber, 4
iSerialNumber:
	.space	4
	.type	android_dev_list, %object
	.size	android_dev_list, 8
android_dev_list:
	.space	8
	.type	rmnet_ports, %object
	.size	rmnet_ports, 72
rmnet_ports:
	.space	72
	.type	gserial_wq, %object
	.size	gserial_wq, 4
gserial_wq:
	.space	4
	.type	rmnet_smd, %object
	.size	rmnet_smd, 4
rmnet_smd:
	.space	4
	.type	gsdio_wq, %object
	.size	gsdio_wq, 4
gsdio_wq:
	.space	4
	.type	gsmd_wq, %object
	.size	gsmd_wq, 4
gsmd_wq:
	.space	4
	.type	uether_wq, %object
	.size	uether_wq, 4
uether_wq:
	.space	4
	.type	d_lock, %object
	.size	d_lock, 4
d_lock:
	.space	4
	.type	dent_smd, %object
	.size	dent_smd, 4
dent_smd:
	.space	4
	.type	ghsuart_ctrl_dent, %object
	.size	ghsuart_ctrl_dent, 4
ghsuart_ctrl_dent:
	.space	4
	.type	ghsuart_data_dent, %object
	.size	ghsuart_data_dent, 4
ghsuart_data_dent:
	.space	4
	.type	dent_diag, %object
	.size	dent_diag, 4
dent_diag:
	.space	4
	.type	ch_lock, %object
	.size	ch_lock, 4
ch_lock:
	.space	4
	.type	nr_rmnet_ports, %object
	.size	nr_rmnet_ports, 4
nr_rmnet_ports:
	.space	4
	.type	gbam_dent, %object
	.size	gbam_dent, 4
gbam_dent:
	.space	4
	.type	no_ctrl_smd_ports, %object
	.size	no_ctrl_smd_ports, 4
no_ctrl_smd_ports:
	.space	4
	.type	no_ctrl_qti_ports, %object
	.size	no_ctrl_qti_ports, 4
no_ctrl_qti_ports:
	.space	4
	.type	no_data_bam_ports, %object
	.size	no_data_bam_ports, 4
no_data_bam_ports:
	.space	4
	.type	no_data_bam2bam_ports, %object
	.size	no_data_bam2bam_ports, 4
no_data_bam2bam_ports:
	.space	4
	.type	no_ctrl_hsic_ports, %object
	.size	no_ctrl_hsic_ports, 4
no_ctrl_hsic_ports:
	.space	4
	.type	no_data_hsic_ports, %object
	.size	no_data_hsic_ports, 4
no_data_hsic_ports:
	.space	4
	.type	no_ctrl_hsuart_ports, %object
	.size	no_ctrl_hsuart_ports, 4
no_ctrl_hsuart_ports:
	.space	4
	.type	no_data_hsuart_ports, %object
	.size	no_data_hsuart_ports, 4
no_data_hsuart_ports:
	.space	4
	.type	_ccid_dev, %object
	.size	_ccid_dev, 4
_ccid_dev:
	.space	4
	.type	_adb_dev, %object
	.size	_adb_dev, 4
_adb_dev:
	.space	4
	.type	control_line_state, %object
	.size	control_line_state, 4
control_line_state:
	.space	4
	.type	grmnet_ctrl_wq, %object
	.size	grmnet_ctrl_wq, 4
grmnet_ctrl_wq:
	.space	4
	.type	smd_ctrl_dent, %object
	.size	smd_ctrl_dent, 4
smd_ctrl_dent:
	.space	4
	.type	smd_ctrl_dfile, %object
	.size	smd_ctrl_dfile, 4
smd_ctrl_dfile:
	.space	4
	.type	online_clients, %object
	.size	online_clients, 1
online_clients:
	.space	1
	.space	3
	.type	gctrl_dent, %object
	.size	gctrl_dent, 4
gctrl_dent:
	.space	4
	.type	gctrl_dfile, %object
	.size	gctrl_dfile, 4
gctrl_dfile:
	.space	4
	.type	gdata_dent, %object
	.size	gdata_dent, 4
gdata_dent:
	.space	4
	.type	gdata_dfile_stats, %object
	.size	gdata_dfile_stats, 4
gdata_dfile_stats:
	.space	4
	.type	gdata_dfile_tstamp, %object
	.size	gdata_dfile_tstamp, 4
gdata_dfile_tstamp:
	.space	4
	.type	diag_dev_list, %object
	.size	diag_dev_list, 8
diag_dev_list:
	.space	8
	.type	n_tx_req_queued, %object
	.size	n_tx_req_queued, 4
n_tx_req_queued:
	.space	4
	.type	gbam_wq, %object
	.size	gbam_wq, 4
gbam_wq:
	.space	4
	.type	retry_cnt.38351, %object
	.size	retry_cnt.38351, 4
retry_cnt.38351:
	.space	4
	.type	diag_dload, %object
	.size	diag_dload, 4
diag_dload:
	.space	4
	.type	diag_clients, %object
	.size	diag_clients, 32
diag_clients:
	.space	32
	.type	ipa_params, %object
	.size	ipa_params, 28
ipa_params:
	.space	28
	.type	__key.50145, %object
	.size	__key.50145, 0
__key.50145:
	.type	ctrl_port, %object
	.size	ctrl_port, 4
ctrl_port:
	.space	4
	.type	__key.55893, %object
	.size	__key.55893, 0
__key.55893:
	.type	__key.55894, %object
	.size	__key.55894, 0
__key.55894:
	.type	__key.54533, %object
	.size	__key.54533, 0
__key.54533:
	.type	__key.54534, %object
	.size	__key.54534, 0
__key.54534:
	.type	__key.54535, %object
	.size	__key.54535, 0
__key.54535:
	.type	__key.53153, %object
	.size	__key.53153, 0
__key.53153:
	.type	__key.53154, %object
	.size	__key.53154, 0
__key.53154:
	.type	__key.38448, %object
	.size	__key.38448, 0
__key.38448:
	.type	__key.38576, %object
	.size	__key.38576, 0
__key.38576:
	.type	dent_rmnet_mux, %object
	.size	dent_rmnet_mux, 4
dent_rmnet_mux:
	.space	4
	.type	_ncm_dev, %object
	.size	_ncm_dev, 4
_ncm_dev:
	.space	4
	.type	nr_mbim_ports, %object
	.size	nr_mbim_ports, 4
nr_mbim_ports:
	.space	4
	.type	mbim_ports, %object
	.size	mbim_ports, 8
mbim_ports:
	.space	8
	.type	rndis_ul_max_xfer_size_rcvd, %object
	.size	rndis_ul_max_xfer_size_rcvd, 4
rndis_ul_max_xfer_size_rcvd:
	.space	4
	.type	rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	rndis_ul_max_pkt_per_xfer_rcvd, 4
rndis_ul_max_pkt_per_xfer_rcvd:
	.space	4
	.type	__key.63162, %object
	.size	__key.63162, 0
__key.63162:
	.type	__key.63163, %object
	.size	__key.63163, 0
__key.63163:
	.type	__key.63164, %object
	.size	__key.63164, 0
__key.63164:
	.type	ncm_connect, %object
	.size	ncm_connect, 1
ncm_connect:
	.space	1
	.space	3
	.type	android_dev_count, %object
	.size	android_dev_count, 4
android_dev_count:
	.space	4
	.type	android_class, %object
	.size	android_class, 4
android_class:
	.space	4
	.type	composite_string_index, %object
	.size	composite_string_index, 4
composite_string_index:
	.space	4
	.type	next_state.63728, %object
	.size	next_state.63728, 4
next_state.63728:
	.space	4
	.type	last_uevent.63727, %object
	.size	last_uevent.63727, 4
last_uevent.63727:
	.space	4
	.type	__key.45618, %object
	.size	__key.45618, 0
__key.45618:
	.type	terminal_mode_version, %object
	.size	terminal_mode_version, 2
terminal_mode_version:
	.space	2
	.type	terminal_mode_vendor_id, %object
	.size	terminal_mode_vendor_id, 2
terminal_mode_vendor_id:
	.space	2
	.type	record_timestamp, %object
	.size	record_timestamp, 4
record_timestamp:
	.space	4
	.type	bam2bam_ports, %object
	.size	bam2bam_ports, 12
bam2bam_ports:
	.space	12
	.type	rndis_per_dev_params, %object
	.size	rndis_per_dev_params, 60
rndis_per_dev_params:
	.space	60
	.type	rndis_initialized, %object
	.size	rndis_initialized, 1
rndis_initialized:
	.space	1
	.space	3
	.type	bam_data_wq, %object
	.size	bam_data_wq, 4
bam_data_wq:
	.space	4
	.type	n_bam2bam_data_ports, %object
	.size	n_bam2bam_data_ports, 4
n_bam2bam_data_ports:
	.space	4
	.type	bam2bam_data_ports, %object
	.size	bam2bam_data_ports, 4
bam2bam_data_ports:
	.space	4
	.type	__key.57709, %object
	.size	__key.57709, 0
__key.57709:
	.type	__key.57710, %object
	.size	__key.57710, 0
__key.57710:
	.type	__key.53536, %object
	.size	__key.53536, 0
__key.53536:
	.type	__key.53475, %object
	.size	__key.53475, 0
__key.53475:
	.type	__key.53476, %object
	.size	__key.53476, 0
__key.53476:
	.type	prev_len.47283, %object
	.size	prev_len.47283, 4
prev_len.47283:
	.space	4
	.type	n_ports, %object
	.size	n_ports, 4
n_ports:
	.space	4
	.type	gs_tty_driver, %object
	.size	gs_tty_driver, 4
gs_tty_driver:
	.space	4
	.type	ports, %object
	.size	ports, 192
ports:
	.space	192
	.type	gs_dent, %object
	.size	gs_dent, 4
gs_dent:
	.space	4
	.type	write_error_after_csw_sent, %object
	.size	write_error_after_csw_sent, 4
write_error_after_csw_sent:
	.space	4
	.type	csw_hack_sent, %object
	.size	csw_hack_sent, 4
csw_hack_sent:
	.space	4
	.type	__key.44718, %object
	.size	__key.44718, 0
__key.44718:
	.type	__key.44720, %object
	.size	__key.44720, 0
__key.44720:
	.type	__key.8233, %object
	.size	__key.8233, 0
__key.8233:
	.type	bam_info, %object
	.size	bam_info, 16
bam_info:
	.space	16
	.type	the_card, %object
	.size	the_card, 4
the_card:
	.space	4
	.type	the_dev, %object
	.size	the_dev, 4
the_dev:
	.space	4
	.type	acm_data, %object
	.size	acm_data, 4
acm_data:
	.space	4
	.type	retry_cnt.37590, %object
	.size	retry_cnt.37590, 4
retry_cnt.37590:
	.space	4
	.type	__key.46278, %object
	.size	__key.46278, 0
__key.46278:
	.type	__key.46287, %object
	.size	__key.46287, 0
__key.46287:
	.type	__key.47574, %object
	.size	__key.47574, 0
__key.47574:
	.type	__key.47520, %object
	.size	__key.47520, 0
__key.47520:
	.type	__key.47521, %object
	.size	__key.47521, 0
__key.47521:
	.type	__key.44755, %object
	.size	__key.44755, 0
__key.44755:
	.type	__key.44756, %object
	.size	__key.44756, 0
__key.44756:
	.type	rmnet_mux_smd_data_ch, %object
	.size	rmnet_mux_smd_data_ch, 4
rmnet_mux_smd_data_ch:
	.space	4
	.type	__key.32150, %object
	.size	__key.32150, 0
__key.32150:
	.type	__key.32151, %object
	.size	__key.32151, 0
__key.32151:
	.type	dev_addr, %object
	.size	dev_addr, 4
dev_addr:
	.space	4
	.type	__key.65150, %object
	.size	__key.65150, 0
__key.65150:
	.type	__key.65155, %object
	.size	__key.65155, 0
__key.65155:
	.type	__key.52739, %object
	.size	__key.52739, 0
__key.52739:
	.type	new_product_name.45900, %object
	.size	new_product_name.45900, 17
new_product_name.45900:
	.space	17
	.space	3
	.type	unknown.46094, %object
	.size	unknown.46094, 16
unknown.46094:
	.space	16
	.type	__key.48517, %object
	.size	__key.48517, 0
__key.48517:
	.type	__key.48875, %object
	.size	__key.48875, 0
__key.48875:
	.type	n_bam2bam_ports, %object
	.size	n_bam2bam_ports, 4
n_bam2bam_ports:
	.space	4
	.type	__key.49885, %object
	.size	__key.49885, 0
__key.49885:
	.type	__key.49886, %object
	.size	__key.49886, 0
__key.49886:
	.type	port_num.51092, %object
	.size	port_num.51092, 4
port_num.51092:
	.space	4
	.type	port_num.51764, %object
	.size	port_num.51764, 4
port_num.51764:
	.space	4
	.type	rmnet_initialized.63984, %object
	.size	rmnet_initialized.63984, 4
rmnet_initialized.63984:
	.space	4
	.type	ports.63985, %object
	.size	ports.63985, 4
ports.63985:
	.space	4
	.type	qc_dev_addr, %object
	.size	qc_dev_addr, 4
qc_dev_addr:
	.space	4
	.type	qc_host_addr, %object
	.size	qc_host_addr, 4
qc_host_addr:
	.space	4
	.type	audio_string_defs, %object
	.size	audio_string_defs, 8
audio_string_defs:
	.space	8
	.type	host_addr, %object
	.size	host_addr, 4
host_addr:
	.space	4
	.type	dbg_data, %object
	.size	dbg_data, 4104
dbg_data:
	.space	4104
	.type	rmnet_mux_sdio_data_ch, %object
	.size	rmnet_mux_sdio_data_ch, 4
rmnet_mux_sdio_data_ch:
	.space	4
	.type	rmnet_mux_sdio_ctl_ch, %object
	.size	rmnet_mux_sdio_ctl_ch, 4
rmnet_mux_sdio_ctl_ch:
	.space	4
	.type	rmnet_sdio_data_ch, %object
	.size	rmnet_sdio_data_ch, 4
rmnet_sdio_data_ch:
	.space	4
	.type	rmnet_sdio_ctl_ch, %object
	.size	rmnet_sdio_ctl_ch, 4
rmnet_sdio_ctl_ch:
	.space	4
	.type	debug_buffer, %object
	.size	debug_buffer, 4096
debug_buffer:
	.space	4096
	.section	.data.unlikely,"aw",%progbits
	.set	.LANCHOR6,. + 0
	.type	__warned.11108, %object
	.size	__warned.11108, 1
__warned.11108:
	.space	1
	.section	.devinit.rodata,"a",%progbits
	.align	2
	.type	android_id_table, %object
	.size	android_id_table, 48
android_id_table:
	.ascii	"android_usb\000"
	.space	8
	.space	4
	.ascii	"android_usb_hsic\000"
	.space	3
	.space	4
	.section	.exitcall.exit,"aw",%progbits
	.align	2
	.type	__exitcall_cleanup, %object
	.size	__exitcall_cleanup, 4
__exitcall_cleanup:
	.word	cleanup
	.type	__exitcall_gether_exit, %object
	.size	__exitcall_gether_exit, 4
__exitcall_gether_exit:
	.word	gether_exit
	.type	__exitcall_ghsuart_data_exit, %object
	.size	__exitcall_ghsuart_data_exit, 4
__exitcall_ghsuart_data_exit:
	.word	ghsuart_data_exit
	.type	__exitcall_ghsuart_ctrl_exit, %object
	.size	__exitcall_ghsuart_ctrl_exit, 4
__exitcall_ghsuart_ctrl_exit:
	.word	ghsuart_ctrl_exit
	.type	__exitcall_ghsic_data_exit, %object
	.size	__exitcall_ghsic_data_exit, 4
__exitcall_ghsic_data_exit:
	.word	ghsic_data_exit
	.type	__exitcall_gctrl_exit, %object
	.size	__exitcall_gctrl_exit, 4
__exitcall_gctrl_exit:
	.word	gctrl_exit
	.type	__exitcall_gqti_ctrl_cleanup, %object
	.size	__exitcall_gqti_ctrl_cleanup, 4
__exitcall_gqti_ctrl_cleanup:
	.word	gqti_ctrl_cleanup
	.type	__exitcall_gsmd_ctrl_exit, %object
	.size	__exitcall_gsmd_ctrl_exit, 4
__exitcall_gsmd_ctrl_exit:
	.word	gsmd_ctrl_exit
	.section	.initcall6.init,"aw",%progbits
	.align	2
	.type	__initcall_init6, %object
	.size	__initcall_init6, 4
__initcall_init6:
	.word	init
	.type	__initcall_gether_init6, %object
	.size	__initcall_gether_init6, 4
__initcall_gether_init6:
	.word	gether_init
	.type	__initcall_ghsuart_data_init6, %object
	.size	__initcall_ghsuart_data_init6, 4
__initcall_ghsuart_data_init6:
	.word	ghsuart_data_init
	.type	__initcall_ghsuart_ctrl_init6, %object
	.size	__initcall_ghsuart_ctrl_init6, 4
__initcall_ghsuart_ctrl_init6:
	.word	ghsuart_ctrl_init
	.type	__initcall_ghsic_data_init6, %object
	.size	__initcall_ghsic_data_init6, 4
__initcall_ghsic_data_init6:
	.word	ghsic_data_init
	.type	__initcall_gctrl_init6, %object
	.size	__initcall_gctrl_init6, 4
__initcall_gctrl_init6:
	.word	gctrl_init
	.type	__initcall_gqti_ctrl_init6, %object
	.size	__initcall_gqti_ctrl_init6, 4
__initcall_gqti_ctrl_init6:
	.word	gqti_ctrl_init
	.type	__initcall_gsmd_ctrl_init6, %object
	.size	__initcall_gsmd_ctrl_init6, 4
__initcall_gsmd_ctrl_init6:
	.word	gsmd_ctrl_init
	.section	.rodata.str1.4,"aMS",%progbits,1
	.align	2
.LC0:
	.ascii	"rmnet notify ep error %d\012\000"
	.space	2
.LC1:
	.ascii	"rmnet notify ep enqueue error %d\012\000"
	.space	2
.LC2:
	.ascii	"rmnet notifyep error %d\012\000"
	.space	3
.LC3:
	.ascii	"rmnet notify ep enq error %d\012\000"
	.space	2
.LC4:
	.ascii	"rmnet_mux notifyep error %d\012\000"
	.space	3
.LC5:
	.ascii	"reset config\012\000"
	.space	2
.LC6:
	.ascii	"setup complete --> %d, %d/%d\012\000"
	.space	2
.LC7:
	.ascii	"resume\012\000"
.LC8:
	.ascii	"suspend\012\000"
	.space	3
.LC9:
	.ascii	"diag_function_disable\012\000"
	.space	1
.LC10:
	.ascii	"acm ttyGS%d completion, err %d\012\000"
.LC11:
	.ascii	"acm ttyGS%d short resp, len %d\012\000"
.LC12:
	.ascii	"disable\012\000"
	.space	3
.LC13:
	.ascii	"RNDIS %s response error %d, %d/%d\012\000"
	.space	1
.LC14:
	.ascii	"notify/1 --> %d\012\000"
	.space	3
.LC15:
	.ascii	"notify/0 --> %d\012\000"
	.space	3
.LC16:
	.ascii	"packet filter %02x\012\000"
.LC17:
	.ascii	"invalid control req%02x.%02x v%04x i%04x l%d\012\000"
	.space	2
.LC18:
	.ascii	"ecm req%02x.%02x v%04x i%04x l%d\012\000"
	.space	2
.LC19:
	.ascii	"ecm req %02x.%02x response err %d\012\000"
	.space	1
.LC20:
	.ascii	"true\000"
	.space	3
.LC21:
	.ascii	"false\000"
	.space	2
.LC22:
	.ascii	"event %02x --> %d\012\000"
	.space	1
.LC23:
	.ascii	"notify connect %s\012\000"
	.space	1
.LC24:
	.ascii	"notify speed %d\012\000"
	.space	3
.LC25:
	.ascii	"notify --> %d\012\000"
	.space	1
.LC26:
	.ascii	"Bad control-OUT transfer\012\000"
	.space	2
.LC27:
	.ascii	"Got wrong INPUT SIZE (%d) from host\012\000"
	.space	3
.LC28:
	.ascii	"unbind function '%s'/%pK\012\000"
	.space	2
.LC29:
	.ascii	"unbind config '%s'/%pK\012\000"
.LC30:
	.ascii	"rmnet control SDIO write failed\012\000"
	.space	3
.LC31:
	.ascii	"ctrl resp queue empty %02x.%02x v%04x i%04x l%d\012"
	.ascii	"\000"
	.space	3
.LC32:
	.ascii	"rmnet_mux ep0 enqueue err %d\012\000"
	.space	2
.LC33:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_fs."
	.ascii	"c\000"
	.space	3
.LC34:
	.ascii	"<3>%s: device is already opened\012\000"
	.space	3
.LC35:
	.ascii	"<3>%s: ecm req %02x.%02x response err %d\012\000"
	.space	2
.LC36:
	.ascii	"<3>%s: %s(): cdev or config is NULL.\012\000"
	.space	2
.LC37:
	.ascii	"<6>%s: RNDIS %s response error %d, %d/%d\012\000"
	.space	2
.LC38:
	.ascii	"<6>%s: notify/0 --> %d\012\000"
.LC39:
	.ascii	"<3>%s: Failed to allocate playback_copy_buf\000"
.LC40:
	.ascii	"<3>%s: Failed to allocate playback_copy_buf buffer\000"
	.space	1
.LC41:
	.ascii	"<6>conn_gadget_release\012\000"
.LC42:
	.ascii	"<6>list_for_each...\012\000"
	.space	3
.LC43:
	.ascii	"NCM16 selected\012\000"
.LC44:
	.ascii	"NCM32 selected\012\000"
.LC45:
	.ascii	"non-CRC mode selected\012\000"
	.space	1
.LC46:
	.ascii	"CRC mode selected\012\000"
	.space	1
.LC47:
	.ascii	"<3>usb:%s * Host asked current MaxDatagramSize, sen"
	.ascii	"ding %d *\012\000"
	.space	2
.LC48:
	.ascii	"ncm req%02x.%02x v%04x i%04x l%d\012\000"
	.space	2
.LC49:
	.ascii	"ncm req %02x.%02x response err %d\012\000"
	.space	1
.LC50:
	.ascii	"<3>usb:%s * Bad control-OUT transfer *\012\000"
.LC51:
	.ascii	"<3>usb:%s * Got wrong MTU SIZE (%d) from host *\012"
	.ascii	"\000"
	.space	3
.LC52:
	.ascii	"<3>usb:%s * MTU SIZE is larger than NTB SIZE (%d) f"
	.ascii	"rom host * \012\000"
.LC53:
	.ascii	"<3>************************************************"
	.ascii	"*\012\000"
	.space	2
.LC54:
	.ascii	"<3>usb:%s * Set MTU SIZE %d *\012\000"
	.space	1
.LC55:
	.ascii	"<3>acc_complete_set_string, err %d\012\000"
.LC56:
	.ascii	"<3>unknown accessory string index %d\012\000"
	.space	2
.LC57:
	.ascii	"<6>acc_release\012\000"
.LC58:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_acc"
	.ascii	"essory.c\000"
.LC59:
	.ascii	"<6>acc_open\012\000"
	.space	3
.LC60:
	.ascii	"<7>usb: %s buf=%s[%d], %s\012\000"
	.space	1
.LC61:
	.ascii	"<6>%s: Close rndis QC file\000"
	.space	1
.LC62:
	.ascii	"<3>%s: rndis_qc_dev not present\012\000"
	.space	3
.LC63:
	.ascii	"<6>%s: Open rndis QC driver\012\000"
	.space	3
.LC64:
	.ascii	"<3>%s: rndis_qc_dev not created yet\012\000"
	.space	3
.LC65:
	.ascii	"<6>%s: rndis QC file opened\012\000"
	.space	3
.LC66:
	.ascii	"<3>%s: Already opened\012\000"
	.space	1
.LC67:
	.ascii	"<6>mtp_release\012\000"
.LC68:
	.ascii	"<6>mtp_open\012\000"
	.space	3
.LC69:
	.ascii	"<3>CCID notify ep error %d\012\000"
.LC70:
	.ascii	"<6>%s: Close mbim file\000"
	.space	1
.LC71:
	.ascii	"<6>%s: Open mbim driver\012\000"
	.space	3
.LC72:
	.ascii	"<3>%s: mbim_dev not created yet\012\000"
	.space	3
.LC73:
	.ascii	"<6>%s: Lock mbim_dev->open_excl for open\012\000"
	.space	2
.LC74:
	.ascii	"<3>%s: USB cable not connected\012\000"
.LC75:
	.ascii	"<6>%s: Exit, mbim file opened\012\000"
	.space	1
.LC76:
	.ascii	"<3>%s: port:%pK port#%d unable to open sdio ch:%s\012"
	.ascii	"\000"
	.space	1
.LC77:
	.ascii	"%d\012\000"
.LC78:
	.ascii	"CONFIGURED\000"
	.space	1
.LC79:
	.ascii	"DISCONNECTED\000"
	.space	3
.LC80:
	.ascii	"CONNECTED\000"
	.space	2
.LC81:
	.ascii	"<7>usb: %s buf=%s\012\000"
	.space	1
.LC82:
	.ascii	"%s\012\000"
.LC83:
	.ascii	"<7>usb: %s dev->enabled=%d\012\000"
.LC84:
	.ascii	"%s\000"
	.space	1
.LC85:
	.ascii	"%04x\012\000"
	.space	2
.LC86:
	.ascii	"%d %d\012\000"
	.space	1
.LC87:
	.ascii	"%02x:%02x:%02x:%02x:%02x:%02x\012\000"
	.space	1
.LC88:
	.ascii	"common->fsg is NULL in %s at %u\012\000"
	.space	3
.LC89:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mas"
	.ascii	"s_storage.c\000"
	.space	1
.LC90:
	.ascii	"error in submission: %s --> %d\012\000"
.LC91:
	.ascii	"failed to override string ID\012\000"
	.space	2
.LC92:
	.ascii	"rmnet %s response error %d, %d/%d\012\000"
	.space	1
.LC93:
	.ascii	"rmnet_mux %s response error %d, %d/%d\012\000"
	.space	1
.LC94:
	.ascii	"%01x\012\000"
	.space	2
.LC95:
	.ascii	"%u\012\000"
.LC96:
	.ascii	", H%c=%u\000"
	.space	3
.LC97:
	.ascii	"%s is buggy! Expected length %d but we got %d\012\000"
	.space	1
.LC98:
	.ascii	"using LUN %d from CBW, not LUN %d from CDB\012\000"
.LC99:
	.ascii	"unsupported LUN %d\012\000"
.LC100:
	.ascii	"%s\015\012\000"
	.space	3
.LC101:
	.ascii	"<7>usb: %s version %s\012\000"
	.space	1
.LC102:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/compo"
	.ascii	"site.c\000"
	.space	2
.LC103:
	.ascii	"<7>usb: %s idVendor=0x%x, idProduct=0x%x\012\000"
	.space	2
.LC104:
	.ascii	"<7>usb: %s bcdDevice=0x%x\012\000"
	.space	1
.LC105:
	.ascii	"%s %s with %s\000"
	.space	2
.LC106:
	.ascii	"<7>usb: %s composite_manufacturer=%s\012\000"
	.space	2
.LC107:
	.ascii	"userspace failed to provide iSerialNumber\012\000"
	.space	1
.LC108:
	.ascii	"%s ready\012\000"
	.space	2
.LC109:
	.ascii	"/home/Jprimero15/hlte/lolz/include/linux/netdevice."
	.ascii	"h\000"
	.space	3
.LC110:
	.ascii	"<6>netif_stop_queue() cannot be called before regis"
	.ascii	"ter_netdev()\012\000"
	.space	3
.LC111:
	.ascii	"qdss_ctrl_read_complete\012\000"
	.space	3
.LC112:
	.ascii	"qdss_ctrl_write_complete\012\000"
	.space	2
.LC113:
	.ascii	"audio_disable\012\000"
	.space	1
.LC114:
	.ascii	"<3>%s: port is null\012\000"
	.space	3
.LC115:
	.ascii	"%s: USB disconnected\012\000"
	.space	2
.LC116:
	.ascii	"<3>%s: usb ep out queue failedport:%pK, port#%d\012"
	.ascii	"\000"
	.space	3
.LC117:
	.ascii	"<3>%s: port->port_usb is NULL\000"
	.space	2
.LC118:
	.ascii	"%s: dequeue\012\000"
	.space	3
.LC119:
	.ascii	"<3>%s: error dequeuing transfer, %d\012\000"
	.space	3
.LC120:
	.ascii	"%s: woken up by peer\012\000"
	.space	2
.LC121:
	.ascii	"%s status: %d\012\000"
	.space	1
.LC122:
	.ascii	"Close rmnet control file\000"
	.space	3
.LC123:
	.ascii	"<3>%s: Invalid portno#%d\012\000"
	.space	2
.LC124:
	.ascii	"%s: ctrl_pkt:%d bytes\012\000"
	.space	1
.LC125:
	.ascii	"%s - input control lines: dcd%c dsr%c break%c ring%"
	.ascii	"c framing%c parity%c overrun%c\012\000"
	.space	1
.LC126:
	.ascii	"<3>%s: write error:%d\012\000"
	.space	1
.LC127:
	.ascii	"<3>%s: Bad control-OUT transfer\012\000"
	.space	3
.LC128:
	.ascii	"<3>%s: Illegal INPUT SIZE (%d) from host\012\000"
	.space	2
.LC129:
	.ascii	"<3>%s: Illegal NTB length %d\012\000"
	.space	2
.LC130:
	.ascii	"%s: Set NTB INPUT SIZE %d\012\000"
	.space	1
.LC131:
	.ascii	"<3>%s: %s: Failed\012\000"
	.space	1
.LC132:
	.ascii	"%s: %s: dequeue\012\000"
	.space	3
.LC133:
	.ascii	"<3>%s: %s: error dequeuing transfer, %d\012\000"
	.space	3
.LC134:
	.ascii	"%s: %s: status: %d\012\000"
.LC135:
	.ascii	"%s: USB_DIR_OUT | USB_TYPE_CLASS | USB_RECIP_INTERF"
	.ascii	"ACE\000"
	.space	1
.LC136:
	.ascii	"%s: bRequest 0x%x, w_value 0x%04x, len %d, entity %"
	.ascii	"d\012\000"
	.space	2
.LC137:
	.ascii	"%s: USB_DIR_IN | USB_TYPE_CLASS | USB_RECIP_INTERFA"
	.ascii	"CE\000"
	.space	2
.LC138:
	.ascii	"%s: USB_DIR_OUT | USB_TYPE_CLASS | USB_RECIP_ENDPOI"
	.ascii	"NT\000"
	.space	2
.LC139:
	.ascii	"%s: bRequest 0x%x, w_value 0x%04x, len %d, endp %d,"
	.ascii	" epnum %d\012\000"
	.space	2
.LC140:
	.ascii	"<3>%s: Unknown command\000"
	.space	1
.LC141:
	.ascii	"%s: USB_DIR_IN | USB_TYPE_CLASS | USB_RECIP_ENDPOIN"
	.ascii	"T\000"
	.space	3
.LC142:
	.ascii	"%s: bRequest 0x%x, w_value 0x%04x, len %d, ep %d\012"
	.ascii	"\000"
	.space	2
.LC143:
	.ascii	"<3>%s: Unknown control request %02x.%02x v%04x i%04"
	.ascii	"x l%d\012\000"
	.space	2
.LC144:
	.ascii	"%s: audio req %02x.%02x v%04x i%04x l%d\012\000"
	.space	3
.LC145:
	.ascii	"<3>%s: audio response failed on err %d\012\000"
.LC146:
	.ascii	"<3>%s: STALL\012\000"
	.space	2
.LC147:
	.ascii	"%s: setting streaming_enabled to false.\012\000"
	.space	3
.LC148:
	.ascii	"<3>%s: %s is enabled in other device\012\000"
	.space	2
.LC149:
	.ascii	"<3>%s: Failed to alloc f_holder\012\000"
	.space	3
.LC150:
	.ascii	"%s: func:%s is enabled.\012\000"
	.space	3
.LC151:
	.ascii	"%s: set streaming_enabled to true\012\000"
	.space	1
.LC152:
	.ascii	"ccid_bulk_release\012\000"
	.space	1
.LC153:
	.ascii	"%s:dev:%pK port#%d\012\000"
.LC154:
	.ascii	"%s: usb cable is not connected\012\000"
.LC155:
	.ascii	"<3>ctrl resp queue empty  req%02x.%02x v%04x i%04x "
	.ascii	"l%d\012\000"
.LC156:
	.ascii	"rmnet ep0 enqueue err %d\012\000"
	.space	2
.LC157:
	.ascii	"%s: dev:%pK port#%d\012\000"
	.space	3
.LC158:
	.ascii	"<3>rmnet notify ep error %d\012\000"
	.space	3
.LC159:
	.ascii	"%s: Invalid notify_count=%lu to decrement\012\000"
	.space	1
.LC160:
	.ascii	"<3>%s: Invalid notify_count=%lu to decrement\012\000"
	.space	2
.LC161:
	.ascii	"ep enqueue error %d\012\000"
	.space	3
.LC162:
	.ascii	"%s: %02x.%02x v%04x i%04x l%u\000"
	.space	2
.LC163:
	.ascii	"<3>%s: response queue error: %d\000"
.LC164:
	.ascii	"%s: portno:%d\012\000"
	.space	1
.LC165:
	.ascii	"queue\000"
	.space	2
.LC166:
	.ascii	"%s: %s %s err %d\012\000"
	.space	2
.LC167:
	.ascii	"Probe called for device: %s\012\000"
	.space	3
.LC168:
	.ascii	"<3>acc_complete_set_hid_report_desc, err %d\012\000"
	.space	3
.LC169:
	.ascii	"qmi resp empty  req%02x.%02x v%04x i%04x l%d\012\000"
	.space	2
.LC170:
	.ascii	"%s: ep:%pK port:%pK\012\000"
	.space	3
.LC171:
	.ascii	"<4>%s: port:%pK port#%d unexpected %s status %d\012"
	.ascii	"\000"
	.space	3
.LC172:
	.ascii	"%s: %s shutdown\012\000"
	.space	3
.LC173:
	.ascii	"<3>%s: invalid portno#%d\012\000"
	.space	2
.LC174:
	.ascii	"<3>%s: gser is null\012\000"
	.space	3
.LC175:
	.ascii	"%s: port:%pK port#%d ctrl_bits:%08x\012\000"
	.space	3
.LC176:
	.ascii	"<3>%s: port:%pK port#%d sdio not connected\012\000"
.LC177:
	.ascii	"%s: name:%s\012\000"
	.space	3
.LC178:
	.ascii	"%s: name:%s num_data_ports= %d\012\000"
.LC179:
	.ascii	"<3>%s: invalid port: %d\012\000"
	.space	3
.LC180:
	.ascii	"smd_control_ch_opened: %lu\012smd_data_ch_opened: %"
	.ascii	"lu\012usb online : %d\012dpkts_from_modem: %lu\012d"
	.ascii	"pkts_to_host: %lu\012pending_dpkts_to_host: %lu\012"
	.ascii	"dpkts_from_host: %lu\012dpkts_to_modem: %lu\012pend"
	.ascii	"ing_dpkts_to_modem: %lu\012cpkts_from_modem: %lu\012"
	.ascii	"cpkts_to_host: %lu\012pending_cpkts_to_host: %lu\012"
	.ascii	"cpkts_from_host: %lu\012cpkts_to_modem: %lu\012pend"
	.ascii	"ing_cpkts_to_modem: %lu\012smd_read_avail_ctrl: %d\012"
	.ascii	"smd_write_avail_ctrl: %d\012smd_read_avail_data: %d"
	.ascii	"\012smd_write_avail_data: %d\012\000"
.LC181:
	.ascii	"-*-DATA-*-\012dpkts_tohost:%lu epInPool:%u tx_size:"
	.ascii	"%u drp_cnt:%lu\012dpkts_tomodem:%lu epOutPool:%u rx"
	.ascii	"_size:%u pending:%u\012-*-QMI-*-\012cpkts_tomodem:%"
	.ascii	"lu  qmi_req_q:%u cbits:%d\012cpkts_tolaptop:%lu qmi"
	.ascii	"_resp_q:%u notify_cnt:%d\012-*-MISC-*-\012data_ch_s"
	.ascii	"tatus: %lu ctrl_ch_status: %lu\012\000"
	.space	2
.LC182:
	.ascii	"UNDEFINED\000"
	.space	2
.LC183:
	.ascii	"dpkts_tomsm:  %lu\012dpkts_tomdm: %lu\012cpkts_tomd"
	.ascii	"m: %lu\012dpkts_tolaptop: %lu\012cpkts_tolaptop:  %"
	.ascii	"lu\012cbits_to_modem: %lu\012tx skb size:     %u\012"
	.ascii	"rx_skb_size:     %u\012dpkts_pending_at_dmux: %u\012"
	.ascii	"tx drp cnt: %lu\012cpkts_drp_cnt: %lu\012cpkt_tx_ql"
	.ascii	"en: %lu\012cpkt_rx_qlen_to_modem: %lu\012xport: %s\012"
	.ascii	"ctr_ch_opened:\011%d\012\000"
.LC184:
	.ascii	"<3>usb: tty or gser is NULL !!\012\000"
.LC185:
	.ascii	"nbytes_from_host: %lu\012\000"
	.space	1
.LC186:
	.ascii	"nbytes_to_tty: %lu\012\000"
.LC187:
	.ascii	"nbytes_with_usb_OUT_txr: %lu\012\000"
	.space	2
.LC188:
	.ascii	"nbytes_from_tty: %lu\012\000"
	.space	2
.LC189:
	.ascii	"nbytes_to_host: %lu\012\000"
	.space	3
.LC190:
	.ascii	"nbytes_with_usb_IN_txr: %lu\012\000"
	.space	3
.LC191:
	.ascii	"tty_flags: %lu\012\000"
.LC192:
	.ascii	"DTR_status: %d\012\000"
.LC193:
	.ascii	"###PORT:%d port:%pK###\012nbytes_tolaptop: %lu\012n"
	.ascii	"bytes_tomodem:  %lu\012cbits_to_modem:  %u\012cbits"
	.ascii	"_to_laptop: %u\012read_pool_len:   %lu\012read_queu"
	.ascii	"e_len:  %lu\012write_pool_len:  %lu\012n_read:     "
	.ascii	"     %u\012sdio_open:       %d\012sdio_probe:      "
	.ascii	"%d\012\000"
	.space	3
.LC194:
	.ascii	"###PORT:%d###\012nbytes_tolaptop: %lu\012nbytes_tom"
	.ascii	"odem:  %lu\012cbits_to_modem:  %u\012cbits_to_lapto"
	.ascii	"p: %u\012n_read: %u\012smd_read_avail: %d\012smd_wr"
	.ascii	"ite_avail: %d\012CH_OPENED: %d\012CH_READY: %d\012\000"
	.space	2
.LC195:
	.ascii	"#PORT:%d port:%pK data_ch:%pK#\012dpkts_to_usbhost:"
	.ascii	" %lu\012dpkts_to_modem:  %lu\012dpkts_pwith_bam: %u"
	.ascii	"\012to_usbhost_dcnt:  %u\012tomodem__dcnt:  %u\012r"
	.ascii	"x_flow_control_disable_count: %u\012rx_flow_control"
	.ascii	"_enable_count: %u\012rx_flow_control_triggered: %u\012"
	.ascii	"max_num_pkts_pending_with_bam: %u\012tx_buf_len:\011"
	.ascii	" %u\012rx_buf_len:\011 %u\012data_ch_open:   %d\012"
	.ascii	"data_ch_ready:  %d\012\000"
.LC196:
	.ascii	"HIGH\000"
	.space	3
.LC197:
	.ascii	"LOW\000"
.LC198:
	.ascii	"#PORT:%d port:%pK ctrl_ch:%pK#\012to_usbhost: %lu\012"
	.ascii	"to_modem:   %lu\012DTR:        %s\012ch_open:    %d"
	.ascii	"\012ch_ready:   %d\012read_avail: %d\012write_avail"
	.ascii	":%d\012\000"
	.space	1
.LC199:
	.ascii	"\012Name:        %s\012#PORT:%d port: %pK\012to_usb"
	.ascii	"host:    %lu\012to_modem:      %lu\012cpkt_drp_cnt:"
	.ascii	"  %lu\012DTR:           %s\012ch_open:       %d\012"
	.ascii	"ch_ready:      %d\012\000"
.LC200:
	.ascii	"\012Name:           %s\012#PORT:%d port#:   %pK\012"
	.ascii	"data_ch_open:\011   %d\012data_ch_ready:    %d\012\012"
	.ascii	"******UL INFO*****\012\012dpkts_to_modem:   %lu\012"
	.ascii	"tomodem_drp_cnt:  %u\012rx_buf_len:       %u\012tx "
	.ascii	"thld cnt       %u\012tx unthld cnt     %u\012TX_THR"
	.ascii	"OTTLED      %d\012\000"
.LC201:
	.ascii	"\012******DL INFO******\012\012dpkts_to_usbhost: %l"
	.ascii	"u\012tx_buf_len:\011   %u\012rx thld cnt\011   %u\012"
	.ascii	"rx unthld cnt\011   %u\012uthld pnd skbs    %u\012R"
	.ascii	"X_THROTTLED\011   %d\012\000"
	.space	3
.LC202:
	.ascii	"#PORT:%d port: %pK\012to_usbhost:    %lu\012to_mode"
	.ascii	"m:      %lu\012cpkt_drp_cnt:  %lu\012DTR:          "
	.ascii	" %s\012\000"
	.space	1
.LC203:
	.ascii	"\012Name:           %s\012#PORT:%d port#:   %pK\012"
	.ascii	"data_ch_open:\011   %d\012data_ch_ready:    %d\012d"
	.ascii	"ata_ch_connected: %d\012\012******UL INFO*****\012\012"
	.ascii	"dpkts_to_modem:   %lu\012tomodem_drp_cnt:  %u\012rx"
	.ascii	"_buf_len:       %u\012TX_THROTTLED      %d\012\000"
.LC204:
	.ascii	"\012******DL INFO******\012\012dpkts_to_usbhost: %l"
	.ascii	"u\012tx_buf_len:\011   %u\012RX_THROTTLED\011   %d\012"
	.ascii	"\000"
	.space	2
.LC205:
	.ascii	"---Name: %s---\012endpoints: %s, %s\012dpkts_tolapt"
	.ascii	"op: %lu\012dpkts_tomodem:  %lu\012pkts_tolaptop_pen"
	.ascii	"ding: %u\012\000"
.LC206:
	.ascii	"qdss_cleanup\012\000"
	.space	2
.LC207:
	.ascii	"<3>%s: grmnet is null\012\000"
	.space	1
.LC208:
	.ascii	"%s: ctrl_tomodem:%d ctrl_bits:%d setbits:%d clearbi"
	.ascii	"ts:%d\012\000"
	.space	2
.LC209:
	.ascii	"rmnet command error %d\012\000"
.LC210:
	.ascii	"rmnet control smd write failed\012\000"
.LC211:
	.ascii	"rmnet QMI pool is empty\012\000"
	.space	3
.LC212:
	.ascii	"RMNET %s response error %d, %d/%d\012\000"
	.space	1
.LC213:
	.ascii	"rmnet data smd write failed\012\000"
	.space	3
.LC214:
	.ascii	"rmnet data rx enqueue err %d\012\000"
	.space	2
.LC215:
	.ascii	"rmnet control smd channel full\012\000"
.LC216:
	.ascii	"<3>%s: smd_write failed err:%d\012\000"
.LC217:
	.ascii	"RMNET_MUX %s response error %d, %d/%d\012\000"
	.space	1
.LC218:
	.ascii	"rmnet_mux data smd write failed\012\000"
	.space	3
.LC219:
	.ascii	"rmnet data tx ep error %d\012\000"
	.space	1
.LC220:
	.ascii	"rmnet_mux data tx ep error %d\012\000"
	.space	1
.LC221:
	.ascii	"rmnet data Tx buffers full\012\000"
.LC222:
	.ascii	"rmnet tx data enqueue err %d\012\000"
	.space	2
.LC223:
	.ascii	"rmnet QMI Tx buffers full\012\000"
	.space	1
.LC224:
	.ascii	"%s: port:%pK port#%d pool:%pK\012\000"
	.space	1
.LC225:
	.ascii	"%s: usb is disconnected\012\000"
	.space	3
.LC226:
	.ascii	"<3>%s: usb ep out queue failedport:%pK, port#%d err"
	.ascii	":%d\012\000"
.LC227:
	.ascii	"rmnet_mux data Tx buffers full\012\000"
.LC228:
	.ascii	"%s: port:%pK port#%d\012\000"
	.space	2
.LC229:
	.ascii	"<3>%s:smd read_avail failure:%d or channel closed c"
	.ascii	"h=%pK\000"
	.space	3
.LC230:
	.ascii	"<3>%s: SMD sending incorrect pkt\012\000"
	.space	2
.LC231:
	.ascii	"<3>%s: smd read failure %d\012\000"
.LC232:
	.ascii	"<3>conn_gadget_function_disable cdev %pK\012\000"
	.space	2
.LC233:
	.ascii	"%s: %s: error %d\012\000"
	.space	2
.LC234:
	.ascii	"%s: %s disabled\012\000"
	.space	3
.LC235:
	.ascii	"acc_function_disable\012\000"
	.space	2
.LC236:
	.ascii	"acc_complete_out set disconnected\000"
	.space	2
.LC237:
	.ascii	"vendor request: %d index: %d value: %d length: %d\012"
	.ascii	"\000"
	.space	1
.LC238:
	.ascii	"class request: %d index: %d value: %d length: %d\012"
	.ascii	"\000"
	.space	2
.LC239:
	.ascii	"MTP_REQ_CANCEL\012\000"
.LC240:
	.ascii	"MTP_REQ_GET_DEVICE_STATUS\012\000"
	.space	1
.LC241:
	.ascii	"%s: response queue error\012\000"
	.space	2
.LC242:
	.ascii	"mtp_function_disable\012\000"
	.space	2
.LC243:
	.ascii	"ccid req%02x.%02x v%04x i%04x l%d\012\000"
	.space	1
.LC244:
	.ascii	"<3>ccid ep0 enqueue err %d\012\000"
.LC245:
	.ascii	"adb_function_disable cdev %pK\012\000"
	.space	1
.LC246:
	.ascii	"acm ttyGS%d req%02x.%02x v%04x i%04x l%d\012\000"
	.space	2
.LC247:
	.ascii	"acm response on ttyGS%d, err %d\012\000"
	.space	3
.LC248:
	.ascii	"%s: EVENT_(%s)\012\000"
.LC249:
	.ascii	"usb_rmnet_ctrl_smd\000"
	.space	1
.LC250:
	.ascii	"status\000"
	.space	1
.LC251:
	.ascii	"ghsic_ctrl_xport\000"
	.space	3
.LC252:
	.ascii	"ghsic_data_xport\000"
	.space	3
.LC253:
	.ascii	"timestamp\000"
	.space	2
.LC254:
	.ascii	"ghsuart_ctrl_xport\000"
	.space	1
.LC255:
	.ascii	"mode debugfs file is not available\012\000"
.LC256:
	.ascii	"ghsuart_data_xport\000"
	.space	1
.LC257:
	.ascii	"mode debugfs file is not available\000"
	.space	1
.LC258:
	.ascii	"usb_diag\000"
	.space	3
.LC259:
	.ascii	"<6>%s: sdio data ch not open\012\000"
	.space	2
.LC260:
	.ascii	"rmnet SDIO data write failed\012\000"
	.space	2
.LC261:
	.ascii	"<3>%s: usb epIn failed with %d\012\000"
.LC262:
	.ascii	"<3>%s: data tx ep error %d\012\000"
.LC263:
	.ascii	"%s: p:%pK#%d skb_len:%d\012\000"
	.space	3
.LC264:
	.ascii	"%s: req->length:%d header_len:%u\012skb->len:%d skb"
	.ascii	"->data_len:%d\012\000"
	.space	1
.LC265:
	.ascii	"rmnet_mux SDIO data write failed\012\000"
	.space	2
.LC266:
	.ascii	"rmnet_mux data rx enqueue err %d\012\000"
	.space	2
.LC267:
	.ascii	"%s:\012\000"
	.space	3
.LC268:
	.ascii	"%s: SMD port not ready - rescheduling:%s err:%d\012"
	.ascii	"\000"
	.space	3
.LC269:
	.ascii	"<3>%s: unable to open smd port:%s err:%d\012\000"
	.space	2
.LC270:
	.ascii	"Unable to open SDIO DATA channel\012\000"
	.space	2
.LC271:
	.ascii	"<3>%s: rx queue failed %d\012\000"
	.space	1
.LC272:
	.ascii	"<3>%s: %s response error %d, %d/%d\012\000"
.LC273:
	.ascii	"<3>%s: data rx enqueue err %d\012\000"
	.space	1
.LC274:
	.ascii	"%s: Received command %d\000"
.LC275:
	.ascii	"<3>copying to user space failed\000"
.LC276:
	.ascii	"%s: Sent line_state: %d\000"
.LC277:
	.ascii	"<3>wrong parameter\000"
	.space	1
.LC278:
	.ascii	"<6>%s: Received command %d\012\000"
.LC279:
	.ascii	"<3>%s: copying to user space failed\000"
.LC280:
	.ascii	"<6>%s: Sent max packets per xfer %d\000"
.LC281:
	.ascii	"%s: Sent max packet size %d\000"
.LC282:
	.ascii	"<3>%s: Unsupported IOCTL\000"
	.space	3
.LC283:
	.ascii	"<6>%s: Sent NTB size %d\000"
.LC284:
	.ascii	"<6>%s: Sent NTB datagrams count %d\000"
	.space	1
.LC285:
	.ascii	"<3>%s: wrong parameter\000"
	.space	1
.LC286:
	.ascii	"%s: USB cable not connected\012\000"
	.space	3
.LC287:
	.ascii	"<3>%s: cpkt size:%d > buf size:%d\012\000"
	.space	1
.LC288:
	.ascii	"%s: Enter(%d)\012\000"
	.space	1
.LC289:
	.ascii	"<3>Buffer size is too big %d, should be at most %d\012"
	.ascii	"\000"
.LC290:
	.ascii	"<3>Previous reading is not finished yet\012\000"
	.space	3
.LC291:
	.ascii	"%s: Requests list is empty. Wait.\012\000"
	.space	1
.LC292:
	.ascii	"Waiting failed\012\000"
.LC293:
	.ascii	"<3>cpkt size too big:%d > buf size:%d\012\000"
	.space	1
.LC294:
	.ascii	"%s: cpkt size:%d\012\000"
	.space	2
.LC295:
	.ascii	"<3>copy_to_user failed: err %d\012\000"
.LC296:
	.ascii	"%s: copied %d bytes to user\012\000"
	.space	3
.LC297:
	.ascii	"acc_read(%d)\012\000"
	.space	2
.LC298:
	.ascii	"acc_read disconnected\000"
	.space	2
.LC299:
	.ascii	"acc_read: waiting for online\012\000"
	.space	2
.LC300:
	.ascii	"rx %pK queue\012\000"
	.space	2
.LC301:
	.ascii	"acc_read: cancelling failed %d\000"
	.space	1
.LC302:
	.ascii	"rx %pK %d\012\000"
	.space	1
.LC303:
	.ascii	"acc_read returning %d\012\000"
	.space	1
.LC304:
	.ascii	"mtp_read(%d)\012\000"
	.space	2
.LC305:
	.ascii	"mtp_read: waiting for online state\012\000"
.LC306:
	.ascii	"mtp_read returning %d\012\000"
	.space	1
.LC307:
	.ascii	"adb_read(%d)\012\000"
	.space	2
.LC308:
	.ascii	"adb_read: waiting for online state\012\000"
.LC309:
	.ascii	"adb_read: failed to queue req %pK (%d)\012\000"
.LC310:
	.ascii	"adb_read returning %d\012\000"
	.space	1
.LC311:
	.ascii	"<3>ccid notify ep enqueue error %d\012\000"
.LC312:
	.ascii	"<3>%s: zero length ctrl pkt\012\000"
	.space	3
.LC313:
	.ascii	"<3>%s: max_pkt_size:%d given_pkt_size:%d\012\000"
	.space	2
.LC314:
	.ascii	"<3>%s: cannot allocate rmnet_mux ctrl pkt\012\000"
	.space	1
.LC315:
	.ascii	"<3>%s: copy_from_user failed err:%d\012\000"
	.space	3
.LC316:
	.ascii	"rmnet_mux notify ep enqueue error %d\012\000"
	.space	2
.LC317:
	.ascii	"%s: Enter(%d)\000"
	.space	2
.LC318:
	.ascii	"zero length ctrl pkt\012\000"
	.space	2
.LC319:
	.ascii	"given pkt size too big:%d > max_pkt_size:%d\012\000"
	.space	3
.LC320:
	.ascii	"<3>Previous writing not finished yet\012\000"
	.space	2
.LC321:
	.ascii	"USB cable not connected\012\000"
	.space	3
.LC322:
	.ascii	"<3>failed to allocate ctrl pkt\012\000"
.LC323:
	.ascii	"<3>copy_from_user failed err:%d\012\000"
	.space	3
.LC324:
	.ascii	"<3>failed to send ctrl packet. error=%d\012\000"
	.space	3
.LC325:
	.ascii	"<3>send_cpkt_response callback is NULL\012\000"
.LC326:
	.ascii	"%s: Exit(%d)\000"
	.space	3
.LC327:
	.ascii	"g_ether\000"
.LC328:
	.ascii	"29-May-2008\000"
.LC329:
	.ascii	"g_qc_ether\000"
	.space	1
.LC330:
	.ascii	"%s: %s: unable to update PID and serial_no\012\000"
.LC331:
	.ascii	"%s: %s: dload:%pK pid:%x serial_num:%s\012\000"
.LC332:
	.ascii	"<3>usb_ep_queue failed ret: %d\012\000"
.LC333:
	.ascii	"%s,\000"
.LC334:
	.ascii	"%s: port:%pK port#%d\000"
	.space	3
.LC335:
	.ascii	"%s: req status shutdown portno#%d port:%pK\012\000"
.LC336:
	.ascii	"<4>%s: port:%pK port#%d Unexpected Rx Status:%d\012"
	.ascii	"\000"
	.space	3
.LC337:
	.ascii	"<3>%s: smd write failed err:%d\012\000"
.LC338:
	.ascii	"<4>ttyGS%d: unexpected RX status %d\012\000"
	.space	3
.LC339:
	.ascii	"<4>ttyGS%d: RX not scheduled?\012\000"
	.space	1
.LC340:
	.ascii	"%s: sdio_ch_name:%s dev_name:%s\012\000"
	.space	3
.LC341:
	.ascii	"<6>%s: name:%s is not found\012\000"
	.space	3
.LC342:
	.ascii	"bam_dmux_ch_8\000"
	.space	2
.LC343:
	.ascii	"%s: port:%pK d:%pK tom:%lu pbam:%u pno:%d\012\000"
	.space	1
.LC344:
	.ascii	"%s: write error:%d\012\000"
.LC345:
	.ascii	"%s: resume work started\012\000"
	.space	3
.LC346:
	.ascii	"%s: %s: resume work started\012\000"
	.space	3
.LC347:
	.ascii	"%s: suspend work started\012\000"
	.space	2
.LC348:
	.ascii	"%s: %s: suspend work started\012\000"
	.space	2
.LC349:
	.ascii	"<3>%s: usb_bam_connect (src) failed: err:%d\012\000"
	.space	3
.LC350:
	.ascii	"<3>%s: usb_bam_connect (dst) failed: err:%d\012\000"
	.space	3
.LC351:
	.ascii	"<3>%s:teth_bridge_init() failed\012\000"
	.space	3
.LC352:
	.ascii	"%s: usb cable is disconnected, exiting\012\000"
.LC353:
	.ascii	"<3>%s: out of memory\012\000"
	.space	2
.LC354:
	.ascii	"%s: enqueue\012\000"
	.space	3
.LC355:
	.ascii	"<3>%s: error enqueuing transfer, %d\012\000"
	.space	3
.LC356:
	.ascii	"<3>%s: usb_bam_client_ready failed: err:%d\012\000"
.LC357:
	.ascii	"%s: done\012\000"
	.space	2
.LC358:
	.ascii	"%s: %s: Connect workqueue started\000"
	.space	2
.LC359:
	.ascii	"<3>%s: %s:teth_bridge_init() failed\012\000"
	.space	3
.LC360:
	.ascii	"<3>%s: %s: usb_bam_connect_ipa failed: err:%d\012\000"
	.space	1
.LC361:
	.ascii	"<3>%s: %s:teth_bridge_connect() failed\012\000"
.LC362:
	.ascii	"<3>%s: port_usb is NULL\000"
.LC363:
	.ascii	"<3>%s: port_usb->out (bulk out ep) is NULL\000"
	.space	1
.LC364:
	.ascii	"%s: %s: enqueue\012\000"
	.space	3
.LC365:
	.ascii	"<3>%s: %s: usb_bam_client_ready failed: err:%d\012\000"
.LC366:
	.ascii	"%s: %s: Connect workqueue done\000"
	.space	1
.LC367:
	.ascii	"%s: %s: reset by peer\012\000"
	.space	1
.LC368:
	.ascii	"<3>%s: %s: BAM reset failed %d\012\000"
.LC369:
	.ascii	"<3>Failed to allocate rmnet control device\012\000"
.LC370:
	.ascii	"&port->read_wq\000"
	.space	1
.LC371:
	.ascii	"<3>rmnet control driver failed to register\000"
	.space	1
.LC372:
	.ascii	"&dev->read_wq\000"
	.space	2
.LC373:
	.ascii	"&dev->write_wq\000"
	.space	1
.LC374:
	.ascii	"<3>USB accessory gadget driver failed to initialize"
	.ascii	"\012\000"
	.space	3
.LC375:
	.ascii	"<6>%s: initialize rndis QC instance\012\000"
	.space	3
.LC376:
	.ascii	"<3>%s: rndis QC driver failed to register\000"
	.space	2
.LC377:
	.ascii	"&dev->intr_wq\000"
	.space	2
.LC378:
	.ascii	"f_mtp\000"
	.space	2
.LC379:
	.ascii	"<3>mtp gadget driver failed to initialize\012\000"
	.space	1
.LC380:
	.ascii	"<3>adb gadget driver failed to initialize\012\000"
	.space	1
.LC381:
	.ascii	"k_rmnet_mux_work\000"
	.space	3
.LC382:
	.ascii	"&smd_dev->smd_data.wait\000"
.LC383:
	.ascii	"&ctrl_dev->tx_wait_q\000"
	.space	3
.LC384:
	.ascii	"usb_rmnet_mux\000"
	.space	2
.LC385:
	.ascii	"<3>%s: failed to register misc device\012\000"
	.space	1
.LC386:
	.ascii	"%s: rmnet_mux_ctrl_device_init failed, err:%d\012\000"
	.space	1
.LC387:
	.ascii	"<6>%s: rndis QC cleanup\000"
.LC388:
	.ascii	"<6>%s: Enter\000"
	.space	3
.LC389:
	.ascii	"gmidi_transmit: midi_alloc_ep_request failed\012\000"
	.space	2
.LC390:
	.ascii	"snd_card_create() failed\012\000"
	.space	2
.LC391:
	.ascii	"snd_device_new() failed: error %d\012\000"
	.space	1
.LC394:
	.ascii	"MIDI\000"
	.space	3
.LC395:
	.ascii	"snd_rawmidi_new() failed: error %d\012\000"
.LC396:
	.ascii	"snd_card_register() failed\012\000"
.LC392:
	.ascii	"MIDI Gadget\000"
.LC393:
	.ascii	"f_midi\000"
	.space	1
.LC397:
	.ascii	"<3>usb:%s tx queue err %d\012\000"
	.space	1
.LC398:
	.ascii	"<3>invalid rndis pkt: skblen:%u hdr_len:%u\000"
	.space	1
.LC399:
	.ascii	"<3>invalid rndis message: %d/%d/%d/%d, len:%d\012\000"
	.space	1
.LC400:
	.ascii	"<3>%s:skb clone failed\012\000"
.LC401:
	.ascii	"y\000"
	.space	2
.LC402:
	.ascii	"n\000"
	.space	2
.LC403:
	.ascii	"?\000"
	.space	2
.LC404:
	.ascii	"disconnected\000"
	.space	3
.LC405:
	.ascii	"connected\000"
	.space	2
.LC406:
	.ascii	"Config Nr. %d\012used      : %s\012state     : %s\012"
	.ascii	"medium    : 0x%08X\012speed     : %d\012cable     :"
	.ascii	" %s\012vendor ID : 0x%08X\012vendor    : %s\012ul-m"
	.ascii	"ax-xfer-size:%d max-xfer-size-rcvd: %d\012ul-max-pk"
	.ascii	"ts-per-xfer:%d max-pkts-per-xfer-rcvd:%d\012\000"
	.space	3
.LC407:
	.ascii	"unable to open backing file: %s\012\000"
	.space	3
.LC408:
	.ascii	"invalid file type: %s\012\000"
	.space	1
.LC409:
	.ascii	"file not readable: %s\012\000"
	.space	1
.LC410:
	.ascii	"unable to find file size: %s\012\000"
	.space	2
.LC411:
	.ascii	"file too big: %s\012\000"
	.space	2
.LC412:
	.ascii	"using only first %d blocks\012\000"
.LC413:
	.ascii	"file too small: %s\012\000"
.LC414:
	.ascii	"open backing file: %s\012\000"
	.space	1
.LC415:
	.ascii	"<3>%s(#) call conn_gadget_cleanup\012\000"
	.space	1
.LC416:
	.ascii	"<6>conn_gadget_cleanup\012\000"
.LC417:
	.ascii	"<3>%s() _conn_gadget_dev is not allocated\012\000"
	.space	1
.LC418:
	.ascii	"<3>%s(#) call conn_gadget_setup\012\000"
	.space	3
.LC419:
	.ascii	"<6>conn_gadget_setup\012\000"
	.space	2
.LC420:
	.ascii	"<3>alloc conn_gadget_dev F\012\000"
.LC421:
	.ascii	"&dev->ioctl_wq\000"
	.space	1
.LC422:
	.ascii	"<3>%s: error rd_queue vmalloc\012\000"
	.space	1
.LC423:
	.ascii	"<3>%s: misc_register f %d\012\000"
	.space	1
.LC424:
	.ascii	"<3>%s() conn_gadget gadget driver failed to initial"
	.ascii	"ize\012\000"
.LC425:
	.ascii	"<3>%s() _conn_gadget_dev is NULL\012\000"
	.space	2
.LC426:
	.ascii	"<3>%s() _conn_gaddget_dev onlined\012\000"
	.space	1
.LC427:
	.ascii	"%d\000"
	.space	1
.LC428:
	.ascii	"<3>%s() rd_queue_buf vmalloc f\012\000"
.LC429:
	.ascii	"enabling\000"
	.space	3
.LC430:
	.ascii	"disabling\000"
	.space	2
.LC431:
	.ascii	"%s: android_usb: %s remote wakeup\012\000"
	.space	1
.LC432:
	.ascii	"<7>%s: product %s\000"
	.space	2
.LC433:
	.ascii	"<7>%s: vendor %s\000"
	.space	3
.LC434:
	.ascii	"%28s\000"
	.space	3
.LC435:
	.ascii	"%04x\000"
	.space	3
.LC436:
	.ascii	"%255s\000"
	.space	2
.LC437:
	.ascii	"Wrong NTH SIGN, skblen %d\012\000"
	.space	1
.LC438:
	.ascii	"HEAD:\000"
	.space	2
.LC439:
	.ascii	"<6>\000"
.LC440:
	.ascii	"Wrong NTB headersize\012\000"
	.space	2
.LC441:
	.ascii	"OUT size exceeded\012\000"
	.space	1
.LC442:
	.ascii	"Bad index: %x\012\000"
	.space	1
.LC443:
	.ascii	"Wrong NDP SIGN\012\000"
.LC444:
	.ascii	"Bad NDP length: %x\012\000"
.LC445:
	.ascii	"Bad dgram length: %x\012\000"
	.space	2
.LC446:
	.ascii	"Bad CRC\012\000"
	.space	3
.LC447:
	.ascii	"<3>usb: force short packet %d  \012\000"
	.space	3
.LC448:
	.ascii	"<3>Dropped skb \012\000"
	.space	3
.LC449:
	.ascii	"<3>usb:%s final Expanding the buffer %d \012\000"
	.space	2
.LC450:
	.ascii	"ACCESSORY=START\000"
.LC451:
	.ascii	"NCM_DEVICE=START\000"
	.space	3
.LC452:
	.ascii	"NCM_DEVICE=RELEASE\000"
	.space	1
.LC453:
	.ascii	"<7>usb: %s ncm_connect=%d\012\000"
	.space	1
.LC454:
	.ascii	"<3>usb: %s superspeed available \012\000"
	.space	2
.LC455:
	.ascii	"<3>usb: %s ss_host_available(%d), windowsos(%d)\012"
	.ascii	"\000"
	.space	3
.LC456:
	.ascii	"<3>usb: %s gadget not available \012\000"
	.space	2
.LC457:
	.ascii	":\000"
	.space	2
.LC458:
	.ascii	"<3>%s: %s(): Failed to alloc memory for android con"
	.ascii	"f\012\000"
	.space	2
.LC459:
	.ascii	",\000"
	.space	2
.LC460:
	.ascii	"ffs\000"
.LC461:
	.ascii	"<3>%s: android_usb: Cannot enable ffs (%d)\000"
	.space	1
.LC462:
	.ascii	"<3>%s: android_usb: Cannot enable '%s' (%d)\000"
.LC463:
	.ascii	"hid\000"
.LC464:
	.ascii	"<7>usb: %s disconnect\012\000"
	.space	1
.LC465:
	.ascii	"f_%s\000"
	.space	3
.LC466:
	.ascii	"<3>%s: %s: Failed to create dev %s\000"
	.space	1
.LC467:
	.ascii	"<3>%s: %s: Failed to init %s\000"
	.space	3
.LC468:
	.ascii	"<3>%s: %s: Failed to create function %s attributes\000"
	.space	1
.LC469:
	.ascii	"Android\000"
.LC470:
	.ascii	"0123456789ABCDEF\000"
	.space	3
.LC471:
	.ascii	"net2280\000"
.LC472:
	.ascii	"dummy_udc\000"
	.space	2
.LC473:
	.ascii	"pxa25x_udc\000"
	.space	1
.LC474:
	.ascii	"goku_udc\000"
	.space	3
.LC475:
	.ascii	"omap_udc\000"
	.space	3
.LC476:
	.ascii	"pxa27x_udc\000"
	.space	1
.LC477:
	.ascii	"s3c2410_udc\000"
.LC478:
	.ascii	"at91_udc\000"
	.space	3
.LC479:
	.ascii	"imx_udc\000"
.LC480:
	.ascii	"musb-hdrc\000"
	.space	2
.LC481:
	.ascii	"atmel_usba_udc\000"
	.space	1
.LC482:
	.ascii	"fsl-usb2-udc\000"
	.space	3
.LC483:
	.ascii	"amd5536udc\000"
	.space	1
.LC484:
	.ascii	"m66592_udc\000"
	.space	1
.LC485:
	.ascii	"fsl_qe_udc\000"
	.space	1
.LC486:
	.ascii	"ci13xxx_pci\000"
.LC487:
	.ascii	"langwell_udc\000"
	.space	3
.LC488:
	.ascii	"r8a66597_udc\000"
	.space	3
.LC489:
	.ascii	"s3c-hsotg\000"
	.space	2
.LC490:
	.ascii	"pch_udc\000"
.LC491:
	.ascii	"ci13xxx_msm\000"
.LC492:
	.ascii	"renesas_usbhs_udc\000"
	.space	2
.LC493:
	.ascii	"s3c-hsudc\000"
	.space	2
.LC494:
	.ascii	"net2272\000"
.LC495:
	.ascii	"dwc3-gadget\000"
.LC496:
	.ascii	"msm72k_udc\000"
	.space	1
.LC497:
	.ascii	"ci13xxx_msm_hsic\000"
	.space	3
.LC498:
	.ascii	"<4>%s: %s: controller '%s' not recognized\012\000"
	.space	1
.LC499:
	.ascii	"USB_STATE=DISCONNECTED\000"
	.space	1
.LC500:
	.ascii	"USB_STATE=CONNECTED\000"
.LC501:
	.ascii	"USB_STATE=CONFIGURED\000"
	.space	3
.LC502:
	.ascii	"USB_STATE=SUSPENDED\000"
.LC503:
	.ascii	"USB_STATE=RESUMED\000"
	.space	2
.LC504:
	.ascii	"USB_CONNECTION=CONNECTED\000"
	.space	3
.LC505:
	.ascii	"low\000"
.LC506:
	.ascii	"<6>%s: %s: did not send uevent (%d %d %pK)\012\000"
.LC507:
	.ascii	"<6>%s: %s: sent uevent %s\012\000"
	.space	1
.LC508:
	.ascii	"<6>%s: %s: sent missed DISCONNECT event\012\000"
	.space	3
.LC509:
	.ascii	"<3>acc_complete_send_hid_event, err %d\012\000"
.LC510:
	.ascii	"<3>can't add hid device: %d\012\000"
	.space	3
.LC511:
	.ascii	"<3>can't add HID device %pK\012\000"
	.space	3
.LC512:
	.ascii	"read-only status change prevented\012\000"
	.space	1
.LC513:
	.ascii	"read-only status set to %d\012\000"
.LC514:
	.ascii	"cdrom status change prevented\012\000"
	.space	1
.LC515:
	.ascii	"cdrom status set to %d\012\000"
.LC516:
	.ascii	"%s called\012\000"
	.space	1
.LC517:
	.ascii	"<6>%s (%s)\012\000"
.LC518:
	.ascii	"SWITCH_NAME=USB_MESSAGE\000"
.LC519:
	.ascii	"SWITCH_STATE=%s\000"
.LC520:
	.ascii	"usb_msg\000"
.LC521:
	.ascii	"Send cd eject message to daemon\012\000"
	.space	3
.LC522:
	.ascii	"%s --> %d, %u/%u\012\000"
	.space	2
.LC523:
	.ascii	"receive_file_work(%lld)\012\000"
	.space	3
.LC524:
	.ascii	"%s- count(%lld) not multiple of mtu(%d)\012\000"
	.space	3
.LC525:
	.ascii	"vfs_write %d\012\000"
	.space	2
.LC526:
	.ascii	"got short packet\012\000"
	.space	2
.LC527:
	.ascii	"receive_file_work returning %d\012\000"
.LC528:
	.ascii	"<6>unloading\012\000"
	.space	2
.LC529:
	.ascii	"<6>file system registered\012\000"
	.space	1
.LC530:
	.ascii	"<3>failed registering file system (%d)\012\000"
.LC531:
	.ascii	"%s: intf %d, alt %d\012\000"
	.space	3
.LC532:
	.ascii	"<3>%s: Failed to enable capture ep\000"
	.space	1
.LC533:
	.ascii	"<3>%s: request allocation failed\012\000"
	.space	2
.LC534:
	.ascii	"<3>%s: request buffer allocation failed\012\000"
	.space	3
.LC535:
	.ascii	"<3>%s: Failed to queue %s req: err %d\012\000"
	.space	1
.LC536:
	.ascii	"<3>%s: Failed to enable playback ep\000"
.LC537:
	.ascii	"<3>%s: Failed to queue %s queue req: err %d\012\000"
	.space	3
.LC538:
	.ascii	"%s: Allocated %d requests\012\000"
	.space	1
.LC539:
	.ascii	"<3>%s: Schedule playback_work\000"
	.space	2
.LC540:
	.ascii	"<3>%s: playback_buf is empty. Stop.\000"
.LC541:
	.ascii	"<3>%s: Interface %d. Do nothing. Return %d\012\000"
.LC542:
	.ascii	"<3>Physical address or size of buf is NULL\000"
	.space	1
.LC543:
	.ascii	"<3>%s: Invalid grmnet:%pK\012\000"
	.space	1
.LC544:
	.ascii	"major %x minor %x vendor %x\012\000"
	.space	3
.LC545:
	.ascii	"<7>usb: %s terminal_mode %s\012\000"
	.space	3
.LC546:
	.ascii	"%s: cbits_to_modem:%d\012\000"
	.space	1
.LC547:
	.ascii	"Open rmnet_ctrl_qti device file\012\000"
	.space	3
.LC548:
	.ascii	"Already opened\012\000"
.LC549:
	.ascii	"<3>%s on a NULL device\012\000"
.LC550:
	.ascii	"%s sets POLLIN for rmnet_ctrl_qti_port\012\000"
.LC551:
	.ascii	"%s: ctrl_tomodem:%d\012\000"
	.space	3
.LC552:
	.ascii	"%s: port:%pK\012\000"
	.space	2
.LC553:
	.ascii	"<3>%s: ctrl bridge open failed :%d\012\000"
.LC554:
	.ascii	"%s: port num =%d unthrottled\012\000"
	.space	2
.LC555:
	.ascii	"%s: %s: woken up by peer\012\000"
	.space	2
.LC556:
	.ascii	"<3>%s: FAILED: d_port == NULL\000"
	.space	2
.LC557:
	.ascii	"<3>%s: FAILED: d_port->cdev == NULL\000"
.LC558:
	.ascii	"<3>%s: FAILED: d_port->cdev->gadget == NULL\000"
.LC559:
	.ascii	"%s: ctrl device is already opened\012\000"
	.space	1
.LC560:
	.ascii	"ccid_bulk_open\012\000"
.LC561:
	.ascii	"%s: bulk device is already opened\012\000"
	.space	1
.LC562:
	.ascii	"%s: nothing to do\012\000"
	.space	1
.LC563:
	.ascii	"<3>%s: rmnet notify ep enqueue error %d\012\000"
	.space	3
.LC564:
	.ascii	"%s: port#%d\012\000"
	.space	3
.LC565:
	.ascii	"<3>%s: rmnet dev is null\012\000"
	.space	2
.LC566:
	.ascii	"uether\000"
	.space	1
.LC567:
	.ascii	"<3>%s: %s: Unable to create workqueue: uether\012\000"
	.space	1
.LC568:
	.ascii	"<3>%s: %s(): Failed to register androidplatform dri"
	.ascii	"ver\012\000"
.LC569:
	.ascii	"<6>conn_gadget_flush\012\000"
	.space	2
.LC570:
	.ascii	"<3>%s() _conn_gadget_dev is invalid\012\000"
	.space	3
.LC571:
	.ascii	"%s: port:%pK tom:%lu pno:%d\012\000"
	.space	3
.LC572:
	.ascii	"<3>%s: rx queue failed\012\000"
.LC573:
	.ascii	"<3>%s: usb epIn failed\012\000"
.LC574:
	.ascii	"<6>%s: setting notify count to zero\012\000"
	.space	3
.LC575:
	.ascii	"<6>%s: %s: speaker_status: %d, speaker_check_count "
	.ascii	"%d\012\000"
	.space	1
.LC576:
	.ascii	"<3>%s: usb_bam_disconnect_ipa failed: err:%d\012\000"
	.space	2
.LC577:
	.ascii	"usb: %s - usb_ncm misc driver fail \012\000"
	.space	3
.LC578:
	.ascii	"<3>%s: unable open bridge ch:%d err:%d\012\000"
.LC579:
	.ascii	"<3>%s: smux close timedout\012\000"
.LC580:
	.ascii	"<3> %s smux_open failed\012\000"
	.space	3
.LC581:
	.ascii	"<3>%s: unable to open smux ch:%d err:%d\012\000"
	.space	3
.LC582:
	.ascii	"TTY\000"
.LC583:
	.ascii	"SDIO\000"
	.space	3
.LC584:
	.ascii	"SMD\000"
.LC585:
	.ascii	"QTI\000"
.LC586:
	.ascii	"BAM\000"
.LC587:
	.ascii	"BAM2BAM\000"
.LC588:
	.ascii	"BAM2BAM_IPA\000"
.LC589:
	.ascii	"HSIC\000"
	.space	3
.LC590:
	.ascii	"HSUART\000"
	.space	1
.LC591:
	.ascii	"<6>hid keyboard\012\000"
	.space	3
.LC592:
	.ascii	"<6>%s: %s: hid_function_bind_config keyboard failed"
	.ascii	": %d\012\000"
	.space	3
.LC593:
	.ascii	"<6>hid mouse\012\000"
	.space	2
.LC594:
	.ascii	"<6>%s: %s: hid_function_bind_config mouse failed: %"
	.ascii	"d\012\000"
	.space	2
.LC595:
	.ascii	"%s: len %d, buffer_len %d, read %d\012\000"
.LC596:
	.ascii	"%s: data xport: %s dev: %pK portno: %d\012\000"
.LC597:
	.ascii	"%s: resumed port %d\012\000"
	.space	3
.LC598:
	.ascii	"<3>%s: Un-supported transport: %s\012\000"
	.space	1
.LC599:
	.ascii	"MessageLength:%d DataLength:%d\012\000"
.LC600:
	.ascii	"<3>RNDIS header is NULL.\012\000"
	.space	2
.LC601:
	.ascii	"driver/rndis-%03d\000"
	.space	2
.LC602:
	.ascii	"%s: remove entries\000"
	.space	1
.LC603:
	.ascii	"\012\000"
	.space	2
.LC604:
	.ascii	"k_bam_data\000"
	.space	1
.LC605:
	.ascii	"<3>%s: Failed to create workqueue\012\000"
	.space	1
.LC606:
	.ascii	"<3>%s: Failed to alloc port:%d\012\000"
.LC607:
	.ascii	"%s: port:%pK portno:%d\012\000"
.LC608:
	.ascii	"<3>%s: %s: %s failed\012\000"
	.space	2
.LC609:
	.ascii	"<6>%s: initialize %d instances\012\000"
.LC610:
	.ascii	"<3>%s: Failed to allocate mbim dev\012\000"
.LC611:
	.ascii	"<3>%s: mbim driver failed to register\000"
	.space	2
.LC612:
	.ascii	"<6>%s: Initialized %d ports\012\000"
	.space	3
.LC613:
	.ascii	"<3>%s: Failed\000"
	.space	2
.LC614:
	.ascii	"%s: Queue empty packet for QBI\000"
	.space	1
.LC615:
	.ascii	"%s: %s: Wake up read queue\000"
	.space	1
.LC616:
	.ascii	"%s: %s: rndis resumed\012\000"
	.space	1
.LC617:
	.ascii	"%s: %s: resumed port %d\012\000"
	.space	3
.LC618:
	.ascii	"%s: %s: rndis suspended\012\000"
	.space	3
.LC619:
	.ascii	"%s: %s: suspended port %d\012\000"
	.space	1
.LC620:
	.ascii	"<3>%s: invalid bam2bam portno#%d\012\000"
	.space	2
.LC621:
	.ascii	"<3>%s: data port is null\012\000"
	.space	2
.LC622:
	.ascii	"<3>%s: %s: usb_bam_client_ready failed\012\000"
.LC623:
	.ascii	"%s: OID_GEN_SUPPORTED_LIST\012\000"
.LC624:
	.ascii	"%s: OID_GEN_HARDWARE_STATUS\012\000"
	.space	3
.LC625:
	.ascii	"%s: OID_GEN_MEDIA_SUPPORTED\012\000"
	.space	3
.LC626:
	.ascii	"%s: OID_GEN_MEDIA_IN_USE\012\000"
	.space	2
.LC627:
	.ascii	"%s: OID_GEN_MAXIMUM_FRAME_SIZE\012\000"
.LC628:
	.ascii	"%s: OID_GEN_TRANSMIT_BLOCK_SIZE\012\000"
	.space	3
.LC629:
	.ascii	"%s: OID_GEN_RECEIVE_BLOCK_SIZE\012\000"
.LC630:
	.ascii	"%s: OID_GEN_VENDOR_ID\012\000"
	.space	1
.LC631:
	.ascii	"%s: OID_GEN_VENDOR_DESCRIPTION\012\000"
.LC632:
	.ascii	"%s: OID_GEN_VENDOR_DRIVER_VERSION\012\000"
	.space	1
.LC633:
	.ascii	"%s: OID_GEN_CURRENT_PACKET_FILTER\012\000"
	.space	1
.LC634:
	.ascii	"%s: OID_GEN_MAXIMUM_TOTAL_SIZE\012\000"
.LC635:
	.ascii	"%s: OID_GEN_PHYSICAL_MEDIUM\012\000"
	.space	3
.LC636:
	.ascii	"%s: OID_GEN_MAC_OPTIONS\012\000"
	.space	3
.LC637:
	.ascii	"%s: OID_GEN_RCV_NO_BUFFER\012\000"
	.space	1
.LC638:
	.ascii	"%s: OID_802_3_PERMANENT_ADDRESS\012\000"
	.space	3
.LC639:
	.ascii	"%s: OID_802_3_CURRENT_ADDRESS\012\000"
	.space	1
.LC640:
	.ascii	"%s: OID_802_3_MULTICAST_LIST\012\000"
	.space	2
.LC641:
	.ascii	"%s: OID_802_3_MAXIMUM_LIST_SIZE\012\000"
	.space	3
.LC642:
	.ascii	"%s: OID_802_3_MAC_OPTIONS\012\000"
	.space	1
.LC643:
	.ascii	"%s: OID_802_3_RCV_ERROR_ALIGNMENT\012\000"
	.space	1
.LC644:
	.ascii	"%s: OID_802_3_XMIT_ONE_COLLISION\012\000"
	.space	2
.LC645:
	.ascii	"%s: OID_802_3_XMIT_MORE_COLLISIONS\012\000"
.LC646:
	.ascii	"<4>%s: query unknown OID 0x%08X\012\000"
	.space	3
.LC647:
	.ascii	"&bulk_dev->read_wq\000"
	.space	1
.LC648:
	.ascii	"&bulk_dev->write_wq\000"
.LC649:
	.ascii	"<3>%s: ccid_ctrl_device_init failed, err:%d\012\000"
	.space	3
.LC650:
	.ascii	"<3>%s: ccid_bulk_device_init failed, err:%d\012\000"
	.space	3
.LC651:
	.ascii	"<3>ccid gadget driver failed to initialize\012\000"
.LC652:
	.ascii	"acm ttyGS%d serial state %04x\012\000"
	.space	1
.LC653:
	.ascii	"<7>acm ttyGS%d serial state %04x\012\000"
	.space	2
.LC654:
	.ascii	"acm ttyGS%d can't notify serial state, %d\012\000"
	.space	1
.LC655:
	.ascii	"%s: ep:%pK head:%pK num:%d size:%d cb:%pK\000"
	.space	2
.LC656:
	.ascii	"<3>%s: usb alloc request failed\012\000"
	.space	3
.LC657:
	.ascii	"<3>%s: request buf allocation failed\012\000"
	.space	2
.LC658:
	.ascii	"%s: req allocated:%d\012\000"
	.space	2
.LC659:
	.ascii	"<3>%s: %s err %d\012\000"
	.space	2
.LC660:
	.ascii	"<4>%s: unexpected %s status %d\012\000"
.LC661:
	.ascii	"<3>'=' missing in %s\012\000"
	.space	2
.LC662:
	.ascii	"<3>%s: invalid value: %s\012\000"
	.space	2
.LC663:
	.ascii	"rmode\000"
	.space	2
.LC664:
	.ascii	"fmode\000"
	.space	2
.LC665:
	.ascii	"mode\000"
	.space	3
.LC666:
	.ascii	"uid\000"
.LC667:
	.ascii	"gid\000"
.LC668:
	.ascii	"<3>%s: invalid option\012\000"
	.space	1
.LC669:
	.ascii	"bRequest 0x%x, w_value 0x%04x, len %d, endpoint %d\012"
	.ascii	"\000"
.LC670:
	.ascii	"audio req%02x.%02x v%04x i%04x l%d\012\000"
.LC671:
	.ascii	"<3>audio response on err %d\012\000"
	.space	3
.LC672:
	.ascii	"<3>given pkt size too big:%d > max_pkt_size:%d\012\000"
.LC673:
	.ascii	"<3>%s: Unable to allocate ctrl pkt\012\000"
.LC674:
	.ascii	"%s: Add to cpkt_req_q packet with len = %d\012\000"
.LC675:
	.ascii	"<3>rmnet file handler %pK is not open\000"
	.space	2
.LC676:
	.ascii	"%s: Wake up read queue\000"
	.space	1
.LC677:
	.ascii	"unable to allocate memory for QMI req\012\000"
	.space	1
.LC678:
	.ascii	"<3>%s: kevent %d may have been dropped\012\000"
.LC679:
	.ascii	"%s returns %d\012\000"
	.space	1
.LC680:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/u_ser"
	.ascii	"ial.c\000"
	.space	3
.LC681:
	.ascii	"%s: cleaned up ttyGS* support\012\000"
	.space	1
.LC682:
	.ascii	"%c is not valid\012\000"
	.space	3
.LC683:
	.ascii	"%s: audio_playback_buf_size %d - copy_buf->actual %"
	.ascii	"d, req->actual %d\000"
	.space	3
.LC684:
	.ascii	"<3>%s: Failed to queue %s req: err - %d\012\000"
	.space	3
.LC685:
	.ascii	"%s: copy_buf == 0\000"
	.space	2
.LC686:
	.ascii	"%s: Copy %d bytes\000"
	.space	2
.LC687:
	.ascii	"<3>%s: Failed completion: status %d\000"
.LC688:
	.ascii	"reset interface\012\000"
	.space	3
.LC689:
	.ascii	"can't allocate request for %s\012\000"
	.space	1
.LC690:
	.ascii	"%s: notify_count = %d\000"
	.space	2
.LC691:
	.ascii	"<6>%s: ESHUTDOWN/ECONNRESET, connection gone\000"
	.space	3
.LC692:
	.ascii	"<3>%s: Unknown event %02x --> %d\012\000"
	.space	2
.LC693:
	.ascii	"%s: notify_state: %d\000"
	.space	3
.LC694:
	.ascii	"<3>%s: Pending notifications in MBIM_NOTIFY_NONE\012"
	.ascii	"\000"
	.space	2
.LC695:
	.ascii	"%s: No pending notifications\012\000"
	.space	2
.LC696:
	.ascii	"%s: Notification %02x sent\012\000"
.LC697:
	.ascii	"%s: notify_response_avaliable: done\000"
.LC698:
	.ascii	"<3>%s: Queue notify request failed, err: %d\000"
.LC699:
	.ascii	"%s: queue request: notify_count = %d\000"
	.space	3
.LC700:
	.ascii	"<3>%s: usb_ep_queue failed, err: %d\000"
.LC701:
	.ascii	"%s: %s: Exit\012\000"
	.space	2
.LC702:
	.ascii	"%s: name:%s no_data_ports= %d\012\000"
	.space	1
.LC703:
	.ascii	"<3>%s() _conn_gadget_dev is offlined\012\000"
	.space	2
.LC704:
	.ascii	"acc_complete_in set disconnected\000"
	.space	3
.LC705:
	.ascii	"bogus ep0 stall!\012\000"
	.space	2
.LC706:
	.ascii	"audio_data_complete req->status %d req->actual %d\012"
	.ascii	"\000"
	.space	1
.LC707:
	.ascii	"qdss_unbind\012\000"
	.space	3
.LC708:
	.ascii	"clear_eps\012\000"
	.space	1
.LC709:
	.ascii	"clear_desc\012\000"
.LC710:
	.ascii	"sending phase-error status\012\000"
.LC711:
	.ascii	"sending command-failure status\012\000"
.LC712:
	.ascii	"write %u @ %llu beyond end %llu\012\000"
	.space	3
.LC713:
	.ascii	"error in file write: %d\012\000"
	.space	3
.LC714:
	.ascii	"partial file write: %d/%u\012\000"
	.space	1
.LC715:
	.ascii	"error in file read: %d\012\000"
.LC716:
	.ascii	"partial file read: %d/%u\012\000"
	.space	2
.LC717:
	.ascii	"&ffs->mutex\000"
.LC718:
	.ascii	"&ffs->ev.waitq\000"
	.space	1
.LC719:
	.ascii	"&x->wait\000"
	.space	3
.LC720:
	.ascii	"ep0\000"
.LC721:
	.ascii	"ecm unbind\012\000"
.LC722:
	.ascii	"%s: bam_data_destroy: Freeing ports\012\000"
	.space	3
.LC723:
	.ascii	"usb_qdss_disconnect_work\012\000"
	.space	2
.LC724:
	.ascii	"<3>uninit_data\012\000"
.LC725:
	.ascii	"<3>msm_ep_unconfig failed\012\000"
	.space	1
.LC726:
	.ascii	"<3>%s: uninit_data error\012\000"
	.space	2
.LC727:
	.ascii	"set_qdss_data_connection\012\000"
	.space	2
.LC728:
	.ascii	"<3>usb_bam_disconnection error\012\000"
.LC729:
	.ascii	"<3>qdss_disconnect error\000"
	.space	3
.LC730:
	.ascii	"acc_write(%d)\012\000"
	.space	1
.LC731:
	.ascii	"acc_write disconnected or not online\000"
	.space	3
.LC732:
	.ascii	"acc_write dev->error\012\000"
	.space	2
.LC733:
	.ascii	"acc_write: xfer error %d\012\000"
	.space	2
.LC734:
	.ascii	"acc_write returning %d\012\000"
.LC735:
	.ascii	"<6>%s: mbim suspended\012\000"
	.space	1
.LC736:
	.ascii	"<6>%s: mbim resumed\012\000"
	.space	3
.LC737:
	.ascii	"%s: ecm suspended\012\000"
	.space	1
.LC738:
	.ascii	"%s: ecm resumed\012\000"
	.space	3
.LC739:
	.ascii	"<3>%s: Received NULL mbim pointer\012\000"
	.space	1
.LC740:
	.ascii	"<3>%s: Buffer size is too big %d, should be at most"
	.ascii	" %d\012\000"
.LC741:
	.ascii	"<3>%s: Previous reading is not finished yet\012\000"
	.space	3
.LC742:
	.ascii	"<3>%s: USB cable not connected. Wait.\012\000"
	.space	1
.LC743:
	.ascii	"%s: Received request packet\012\000"
	.space	3
.LC744:
	.ascii	"<3>%s: cpkt size too big:%d > buf size:%d\012\000"
	.space	1
.LC745:
	.ascii	"<3>%s: copy_to_user failed: err %d\012\000"
.LC746:
	.ascii	"<3>%s: Waiting failed\012\000"
	.space	1
.LC747:
	.ascii	"<3>%s: %s: Card is NULL\000"
.LC748:
	.ascii	"%s: Initialize hw params\000"
	.space	3
.LC749:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_DROP failed: %d\012\000"
.LC750:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_HW_PARAMS failed: %d\012\000"
	.space	3
.LC751:
	.ascii	"<3>%s: Preparing playback failed: %d\012\000"
	.space	2
.LC752:
	.ascii	"%s: playback params: access %x, format %x, channels"
	.ascii	" %d, rate %d\012\000"
	.space	3
.LC753:
	.ascii	"<3>%s: Setting playback params failed: err %d\000"
	.space	2
.LC754:
	.ascii	"%s: Initialized playback params\000"
.LC755:
	.ascii	"<3>%s: Failed to allocate hw params\000"
.LC756:
	.ascii	"<3>%s: Preparing capture failed: %d\012\000"
	.space	3
.LC757:
	.ascii	"<3>%s: Failed to allocate sw params\000"
.LC758:
	.ascii	"%s: buffer_bytes = (%d,%d) omin=%d omax=%d int=%d e"
	.ascii	"mpty=%d\012\000"
.LC759:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_SW_PARAMS failed: %d\012\000"
	.space	3
.LC760:
	.ascii	"%s: capture params: access %x, format %x, channels "
	.ascii	"%d, rate %d\012\000"
.LC761:
	.ascii	"<3>%s: Setting capture params failed: err %d\000"
	.space	3
.LC762:
	.ascii	"<6>%s: Initialized capture params\000"
	.space	2
.LC763:
	.ascii	"<3>%s: playback_buf is empty\000"
	.space	3
.LC764:
	.ascii	"%s: play_buf->actual = %d\000"
	.space	2
.LC765:
	.ascii	"<3>%s: Buffer is empty, no data to play\000"
.LC766:
	.ascii	"<3>%s: Failed to init audio streams\000"
.LC767:
	.ascii	"<3>%s: copying failed\000"
	.space	2
.LC768:
	.ascii	"<3>%s: SND failure - runtime->frame_bits == 0\000"
	.space	2
.LC769:
	.ascii	"%s: runtime->frame_bits = %d, count = %d, frames = "
	.ascii	"%d\000"
	.space	2
.LC770:
	.ascii	"<3>%s: snd_pcm_lib_write failed with err %d\012\000"
	.space	3
.LC771:
	.ascii	"%s: Done. Sent %d frames\000"
	.space	3
.LC772:
	.ascii	"<3>%s() req->status f %d\012\000"
	.space	2
.LC773:
	.ascii	"<6>DUN is unregisterd\012\000"
	.space	1
.LC774:
	.ascii	"bulk-in\000"
.LC775:
	.ascii	"%s set halt\012\000"
	.space	3
.LC776:
	.ascii	"usb_ep_set_halt -> %d\012\000"
	.space	1
.LC777:
	.ascii	"unbind\012\000"
.LC778:
	.ascii	"ncm unbind\012\000"
.LC779:
	.ascii	"rndis0\000"
	.space	1
.LC780:
	.ascii	"adb_write(%d)\012\000"
	.space	1
.LC781:
	.ascii	"adb_write dev->error\012\000"
	.space	2
.LC782:
	.ascii	"adb_write: xfer error %d\012\000"
	.space	2
.LC783:
	.ascii	"adb_write returning %d\012\000"
.LC784:
	.ascii	"<3>conn_gadget_function_unbind\012\000"
.LC785:
	.ascii	"<7>usb: %s\012\000"
.LC786:
	.ascii	"<3>%s() cmd is not proper ioctl type %c\012\000"
	.space	3
.LC787:
	.ascii	"<3>%s() cmd is not proper ioctl number %d\012\000"
	.space	1
.LC788:
	.ascii	"<3>%s() cmd has no buffer\012\000"
	.space	1
.LC789:
	.ascii	"<3>%s() cmd has invalid direction\012\000"
	.space	1
.LC790:
	.ascii	"<3>%s() SUPPORT_LIST copy_to_user f %d\012\000"
.LC791:
	.ascii	"<3>%s() close called\012\000"
	.space	2
.LC792:
	.ascii	"<3>%s() copy_to_user f %d\012\000"
	.space	1
.LC793:
	.ascii	"<3>%s() WAIT_NOTIFY copy_to_user f %d\012\000"
	.space	1
.LC794:
	.ascii	"<3>%s() GET_STATUS copy_to_user f %d\012\000"
	.space	2
.LC795:
	.ascii	"%s: %s: size: %d\000"
	.space	3
.LC796:
	.ascii	"ncm\000"
.LC797:
	.ascii	"<3>usb: %s  drop incase of NCM rx length %d\012\000"
	.space	3
.LC798:
	.ascii	"<3>usb: %s  Dont drop incase of NCM rx length %d\012"
	.ascii	"\000"
	.space	2
.LC799:
	.ascii	"<3>usb: %s Drop rx length %d\012\000"
	.space	2
.LC800:
	.ascii	"%x\000"
	.space	1
.LC801:
	.ascii	"<7>usb: %s old status=%d, new status=%d\012\000"
	.space	3
.LC802:
	.ascii	"%s: rndis_qc_unbind: free\000"
	.space	2
.LC803:
	.ascii	"eject attempt prevented\012\000"
	.space	3
.LC804:
	.ascii	"close backing file\012\000"
.LC805:
	.ascii	"<3>%s:Unable to close smux channel: %d\012\000"
.LC806:
	.ascii	"<6>%s: usb cable is not connected\012\000"
	.space	1
.LC807:
	.ascii	"%s: USB_CDC_RESET_FUNCTION\000"
	.space	1
.LC808:
	.ascii	"%s: USB_CDC_SEND_ENCAPSULATED_COMMAND\000"
	.space	2
.LC809:
	.ascii	"%s: w_length > req->length: %d > %d\000"
.LC810:
	.ascii	"%s: USB_CDC_GET_ENCAPSULATED_RESPONSE\000"
	.space	2
.LC811:
	.ascii	"<3>%s: w_length > 0: %d\000"
.LC812:
	.ascii	"%s: req%02x.%02x v%04x i%04x l%d\012\000"
	.space	2
.LC813:
	.ascii	"<3>%s: ctrl resp queue empty\012\000"
	.space	2
.LC814:
	.ascii	"%s: copied encapsulated_response %d bytes\000"
	.space	2
.LC815:
	.ascii	"%s: USB_CDC_GET_NTB_PARAMETERS\000"
	.space	1
.LC816:
	.ascii	"%s: USB_CDC_GET_NTB_INPUT_SIZE\000"
	.space	1
.LC817:
	.ascii	"%s: Reply to host INPUT SIZE %d\012\000"
	.space	3
.LC818:
	.ascii	"%s: USB_CDC_SET_NTB_INPUT_SIZE\000"
	.space	1
.LC819:
	.ascii	"<3>%s: wrong NTB length %d\000"
	.space	1
.LC820:
	.ascii	"%s: USB_CDC_GET_NTB_FORMAT\000"
	.space	1
.LC821:
	.ascii	"%s: NTB FORMAT: sending %d\012\000"
.LC822:
	.ascii	"%s: USB_CDC_SET_NTB_FORMAT\000"
	.space	1
.LC823:
	.ascii	"%s: NCM16 selected\012\000"
.LC824:
	.ascii	"%s: NCM32 selected\012\000"
.LC825:
	.ascii	"<3>%s: invalid control req: %02x.%02x v%04x i%04x l"
	.ascii	"%d\012\000"
	.space	1
.LC826:
	.ascii	"%s: control request: %02x.%02x v%04x i%04x l%d\012\000"
.LC827:
	.ascii	"<3>%s: queueing req failed: %02x.%02x, err %d\012\000"
	.space	1
.LC828:
	.ascii	"<3>%s: ctrl req err %d: %02x.%02x v%04x i%04x l%d\012"
	.ascii	"\000"
	.space	1
.LC829:
	.ascii	"<3>%s() conn_gadget_lock(write_excl) f\012\000"
.LC830:
	.ascii	"<3>%s() conn_gadget_write dev->error\012\000"
	.space	2
.LC831:
	.ascii	"<3>%s: copy_from_user failed\012\000"
	.space	2
.LC832:
	.ascii	"<3>%s() xfer error %d\012\000"
	.space	1
.LC833:
	.ascii	"%s: %s: req_put\012\000"
	.space	3
.LC834:
	.ascii	"<3>%s: wait_event_interruptible(wrwq,reqget) failed"
	.ascii	" %d\012\000"
.LC835:
	.ascii	"qdss_disable\012\000"
	.space	2
.LC836:
	.ascii	"qdss_eps_disable\012\000"
	.space	2
.LC837:
	.ascii	"ecm0\000"
	.space	3
.LC838:
	.ascii	"%s: suspended port %d\012\000"
	.space	1
.LC839:
	.ascii	"gs_close: ttyGS%d (%pK,%pK) ...\012\000"
	.space	3
.LC840:
	.ascii	"gs_close: ttyGS%d (%pK,%pK) done!\012\000"
	.space	1
.LC841:
	.ascii	"<3>%s: USB not connected\012\000"
	.space	2
.LC842:
	.ascii	"<6>%s: usb rmnet sdio channels are open retry_cnt:%"
	.ascii	"d\012\000"
	.space	2
.LC843:
	.ascii	"%s: usb rmnet sdio open retry_cnt:%d\012\000"
	.space	2
.LC844:
	.ascii	"Unable to open control SDIO channel\012\000"
	.space	3
.LC845:
	.ascii	"Unable to open DATA SDIO channel\012\000"
	.space	2
.LC846:
	.ascii	"%s complete --> %d, %d/%d\012\000"
	.space	1
.LC847:
	.ascii	"kill %s:  resubmit %d bytes --> %d\012\000"
.LC848:
	.ascii	"mtp_write(%d)\012\000"
	.space	1
.LC849:
	.ascii	"mtp_write dev->error\012\000"
	.space	2
.LC850:
	.ascii	"mtp_write: xfer error %d\012\000"
	.space	2
.LC851:
	.ascii	"mtp_write returning %d\012\000"
.LC852:
	.ascii	"send_file_work(%lld %lld)\012\000"
	.space	1
.LC853:
	.ascii	"send_file_work: xfer error %d\012\000"
	.space	1
.LC854:
	.ascii	"send_file_work returning %d\012\000"
	.space	3
.LC855:
	.ascii	"rndis req%02x.%02x v%04x i%04x l%d\012\000"
.LC856:
	.ascii	"<3>%s: rndis response on err %d\012\000"
	.space	3
.LC857:
	.ascii	"rndis response on err %d\012\000"
	.space	2
.LC858:
	.ascii	"%s: Queue empty packet for QTI\000"
	.space	1
.LC859:
	.ascii	"<3>%s: rmnet ctrl file handler %pK is not open\000"
	.space	1
.LC860:
	.ascii	"rmnet SMD data channel full\012\000"
	.space	3
.LC861:
	.ascii	"rmnet SMD data write failed\012\000"
	.space	3
.LC862:
	.ascii	"rmnet_mux SMD data channel full\012\000"
	.space	3
.LC863:
	.ascii	"rmnet_mux SMD data write failed\012\000"
	.space	3
.LC864:
	.ascii	"delayed status mismatch..resetting\012\000"
.LC865:
	.ascii	"lun%d\000"
	.space	2
.LC866:
	.ascii	"Linux\000"
	.space	2
.LC867:
	.ascii	"File-Stor Gadget\000"
	.space	3
.LC868:
	.ascii	"File-CD Gadget\000"
	.space	1
.LC869:
	.ascii	"file-storage\000"
	.space	3
.LC870:
	.ascii	"(no medium)\000"
.LC871:
	.ascii	"(error)\000"
.LC872:
	.ascii	"removable \000"
	.space	1
.LC873:
	.ascii	"\000"
	.space	3
.LC874:
	.ascii	"read only \000"
	.space	1
.LC875:
	.ascii	"lun\000"
.LC876:
	.ascii	"&common->filesem\000"
	.space	3
.LC877:
	.ascii	"failed to register LUN%d: %d\012\000"
	.space	2
.LC878:
	.ascii	"no file given for LUN%d\012\000"
	.space	3
.LC879:
	.ascii	"controller '%s' not recognized\012\000"
.LC880:
	.ascii	"%-8s%-16s%04x\000"
	.space	2
.LC881:
	.ascii	"SAMSUNG\000"
.LC882:
	.ascii	"&common->fsg_wait\000"
	.space	2
.LC883:
	.ascii	"Mass Storage Function, version: 2009/09/11\012\000"
.LC884:
	.ascii	"Number of LUNs=%d\012\000"
	.space	1
.LC885:
	.ascii	"LUN: %s%s%sfile: %s\012\000"
	.space	3
.LC886:
	.ascii	"CD-ROM \000"
.LC887:
	.ascii	"I/O thread pid: %d\012\000"
.LC888:
	.ascii	"<7>usb: %s cdev->config=%pK, config=%pK\012\000"
	.space	3
.LC889:
	.ascii	"<6>adb_release\012\000"
.LC890:
	.ascii	"<3>%s: adb_closed_callback: data->dev is NULL\000"
	.space	2
.LC891:
	.ascii	" super\000"
	.space	1
.LC892:
	.ascii	" high\000"
	.space	2
.LC893:
	.ascii	" full\000"
	.space	2
.LC894:
	.ascii	" full/low\000"
	.space	2
.LC895:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/andro"
	.ascii	"id.c\000"
.LC896:
	.ascii	"adding config #%u '%s'/%pK\012\000"
.LC897:
	.ascii	"cfg %d/%pK speeds:%s%s%s\012\000"
	.space	2
.LC898:
	.ascii	"  interface %d = %s/%pK\012\000"
	.space	3
.LC899:
	.ascii	"added config '%s'/%u --> %d\012\000"
	.space	3
.LC900:
	.ascii	"<3>%s: %s: usb_add_config failed : err: %d\012\000"
.LC901:
	.ascii	"USB_CONNECTION=READY\000"
	.space	3
.LC902:
	.ascii	"<6>%s: %s\012\000"
	.space	1
.LC903:
	.ascii	"<6>%s: %s  canceling the work\012\000"
	.space	1
.LC904:
	.ascii	"enabled\000"
.LC905:
	.ascii	"disabled\000"
	.space	3
.LC906:
	.ascii	"<6>usb: enabled: %d, dev->enabled: %d\012\000"
	.space	1
.LC907:
	.ascii	"SAMSUNG_Android\000"
.LC908:
	.ascii	"<7>usb: %s f_holder->f:%s\012\000"
	.space	1
.LC909:
	.ascii	"acm\000"
.LC910:
	.ascii	"<7>usb: acm is enabled. (bcdDevice=0x400)\012\000"
	.space	1
.LC911:
	.ascii	"conn_gadget\000"
.LC912:
	.ascii	"<7>usb: conn_gadget + kies (bcdDevice=0xC00)\012\000"
	.space	2
.LC913:
	.ascii	"<7>usb: conn_gadget only (bcdDevice=0x800)\012\000"
.LC914:
	.ascii	"<7>usb: %s vendor=%x,product=%x,bcdDevice=%x\000"
	.space	3
.LC915:
	.ascii	"<7>,Class=%x,SubClass=%x,Protocol=%x\012\000"
	.space	2
.LC916:
	.ascii	"<7>usb: %s next cmd : usb_add_config\012\000"
	.space	2
.LC917:
	.ascii	"<3>%s: %s: android_enable failed\012\000"
	.space	2
.LC918:
	.ascii	"<3>%s: android_usb: already %s\012\000"
.LC919:
	.ascii	"<6>adb_open\012\000"
	.space	3
.LC920:
	.ascii	"<3>%s: unable open bam ch:%d err:%d\012\000"
	.space	3
.LC921:
	.ascii	"%s: ep:%pK head:%pK num:%d cb:%pK\000"
	.space	2
.LC922:
	.ascii	"<3>%s: rx req allocation failed\012\000"
	.space	3
.LC923:
	.ascii	"<3>%s: tx req allocation failed\012\000"
	.space	3
.LC924:
	.ascii	"%s: reset by peer\012\000"
	.space	1
.LC925:
	.ascii	"<3>%s: BAM reset failed %d\012\000"
.LC926:
	.ascii	"<3>%s: usb_ep_enable failed eptype:IN ep:%pK\000"
	.space	3
.LC927:
	.ascii	"<3>%s: usb_ep_enable failed eptype:OUT ep:%pK\000"
	.space	2
.LC928:
	.ascii	"acm%u\000"
	.space	2
.LC929:
	.ascii	"adding '%s'/%pK to config '%s'/%pK\012\000"
.LC930:
	.ascii	"adding '%s'/%pK --> %d\012\000"
.LC931:
	.ascii	"<3>%s: Could not bind acm%u config\012\000"
.LC932:
	.ascii	"%s: p:%pK#%d d:%pK skb_len:%d\012\000"
	.space	1
.LC933:
	.ascii	"<3>%s: tx pkt dropped: tx_drop_cnt:%u\012\000"
	.space	1
.LC934:
	.ascii	"%s: port:%pK d:%pK tom:%lu pbam:%u, pno:%d\012\000"
.LC935:
	.ascii	"%s: port:%pK port#%d event:%08x\012\000"
	.space	3
.LC936:
	.ascii	"Unable to open control smd channel: %d\012\000"
.LC937:
	.ascii	"pdrv %s register failed %d\012\000"
.LC938:
	.ascii	"Unable to open data smd channel\012\000"
	.space	3
.LC939:
	.ascii	"bulk reset request\012\000"
.LC940:
	.ascii	"<3>usb: %s MAC host is always disabled \012\000"
	.space	3
.LC941:
	.ascii	"<6>usb: %s ignore!! usb30en(%d), value(%d)\012\000"
.LC942:
	.ascii	"<7>usb: %s B4 disconectng gadget\012\000"
	.space	2
.LC943:
	.ascii	"<7>usb: %s after usb_gadget_connect\012\000"
	.space	3
.LC944:
	.ascii	"<3>usb: %s Failed to set the usb30_en value\012\000"
	.space	3
.LC945:
	.ascii	"%s: %u %u\012\000"
	.space	1
.LC946:
	.ascii	"Config SS device in SS\012\000"
.LC947:
	.ascii	"Config SS device in HS\012\000"
.LC948:
	.ascii	"Config HS device with LPM(L1)\012\000"
	.space	1
.LC949:
	.ascii	"<7>usb: GET_DES\012\000"
	.space	3
.LC950:
	.ascii	"<7>usb: %s failed to change configuration\012\000"
	.space	1
.LC951:
	.ascii	"already in the same config with value %d\012\000"
	.space	2
.LC952:
	.ascii	"%s config #%d: %s\012\000"
	.space	1
.LC953:
	.ascii	"battery\000"
.LC954:
	.ascii	"<3>%s(): No SS desc for function:%s\012\000"
	.space	3
.LC955:
	.ascii	"<3>%s: fail to get %s psy\012\000"
	.space	1
.LC956:
	.ascii	"interface %d (%s/%pK) alt 0 --> %d\012\000"
.LC957:
	.ascii	"%s: interface %d (%s) requested delayed status\012\000"
.LC958:
	.ascii	"delayed_status count %d\012\000"
	.space	3
.LC959:
	.ascii	"<7>usb: SET_CON\012\000"
	.space	3
.LC960:
	.ascii	"<6>%s sec_qcom_usb_rdrv = %d, disable\012\000"
	.space	1
.LC961:
	.ascii	"<6>Redriver OFF in Mac OS\012\000"
	.space	1
.LC962:
	.ascii	"func_suspend() returned error %d\012\000"
	.space	2
.LC963:
	.ascii	"ep_queue --> %d\012\000"
	.space	3
.LC964:
	.ascii	"%s: Delayed status not supported for w_length != 0\000"
	.space	1
.LC965:
	.ascii	"unconfigured\000"
	.space	3
.LC966:
	.ascii	"g_serial\000"
	.space	3
.LC967:
	.ascii	"ttyGS\000"
	.space	2
.LC968:
	.ascii	"k_gserial\000"
	.space	2
.LC969:
	.ascii	"&ports[i].lock\000"
	.space	1
.LC970:
	.ascii	"&port->close_wait\000"
	.space	2
.LC971:
	.ascii	"&port->drain_wait\000"
	.space	2
.LC972:
	.ascii	"<3>%s: cannot register, err %d\012\000"
.LC973:
	.ascii	"<4>%s: no classdev for port %d, err %ld\012\000"
	.space	3
.LC974:
	.ascii	"usb_serial%d\000"
	.space	3
.LC975:
	.ascii	"readstatus\000"
	.space	1
.LC976:
	.ascii	"reset\000"
	.space	2
.LC977:
	.ascii	"%s: registered %d ttyGS* device%s\012\000"
	.space	1
.LC978:
	.ascii	"s\000"
	.space	2
.LC979:
	.ascii	"<3>%s() failed to queue req %pK (%d)\012\000"
	.space	2
.LC980:
	.ascii	"<6>conn_gadget_open\012\000"
	.space	3
.LC981:
	.ascii	"<3>%s() handle closing now. open again\012\000"
.LC982:
	.ascii	"<3>%s() conn_gadget_lock(open_excl) f\012\000"
	.space	1
.LC983:
	.ascii	"<3>%s() count is too large (%d)\012\000"
	.space	3
.LC984:
	.ascii	"<3>%s() conn_gadget_lock(read_excl) f\012\000"
	.space	1
.LC985:
	.ascii	"<3>%s() waiting for online state\012\000"
	.space	2
.LC986:
	.ascii	"<3>%s() dev->error has value\012\000"
	.space	2
.LC987:
	.ascii	"<3>%s() zero queue\012\000"
.LC988:
	.ascii	"<3>%s() kfifo_to_user f %d\012\000"
.LC989:
	.ascii	"<3>%s() wait_event_interruptible f %d\012\000"
	.space	1
.LC990:
	.ascii	"<6>read descriptors\012\000"
	.space	3
.LC991:
	.ascii	"<6>read strings\012\000"
	.space	3
.LC992:
	.ascii	"&epfile->mutex\000"
	.space	1
.LC993:
	.ascii	"&epfile->wait\000"
	.space	2
.LC994:
	.ascii	"ep%u\000"
	.space	3
.LC995:
	.ascii	"%s: start adbd only in ADB composition\012\000"
.LC996:
	.ascii	"<3>%s: adb_closed_callback: config->dev is NULL\000"
.LC997:
	.ascii	"<6>%s(): freeing\012\000"
	.space	2
.LC998:
	.ascii	"<3>%s: usb cable is not connected\012\000"
	.space	1
.LC999:
	.ascii	"<3>%s: given_xport:%s cur_xport:%s doing nothing\012"
	.ascii	"\000"
	.space	2
.LC1000:
	.ascii	"usb_rmnet_mux: TransportRequested: %s\012\000"
	.space	1
.LC1001:
	.ascii	"%s: undefined xport, do nothing\012\000"
	.space	3
.LC1002:
	.ascii	"%s: USB not connected\012\000"
	.space	1
.LC1003:
	.ascii	"<3>%s: undefined transport\012\000"
.LC1004:
	.ascii	"ccid_bulk_read(%d)\012\000"
.LC1005:
	.ascii	"<3>%s: max_buffer_size:%d given_pkt_size:%d\012\000"
	.space	3
.LC1006:
	.ascii	"<3>%s bulk_dev_error\012\000"
	.space	2
.LC1007:
	.ascii	"<3>%s usb ep queue failed\012\000"
	.space	1
.LC1008:
	.ascii	"ccid_bulk_read returning %d\012\000"
	.space	3
.LC1009:
	.ascii	"<1>DUN : DTR %d\012\000"
	.space	3
.LC1010:
	.ascii	"<6>modem_ioctl: Unknown ioctl cmd(0x%x).\012\000"
	.space	2
.LC1011:
	.ascii	"mtp_send_event(%d)\012\000"
.LC1012:
	.ascii	"ioctl returning %d\012\000"
.LC1013:
	.ascii	"<6>adb_bind_config\012\000"
.LC1014:
	.ascii	"adb\000"
.LC1015:
	.ascii	"ccid_bind_config\012\000"
	.space	2
.LC1016:
	.ascii	"ccid\000"
	.space	3
.LC1017:
	.ascii	"rmnet_smd_sdio_function_add\012\000"
	.space	3
.LC1018:
	.ascii	"rmnet_smd_sdio\000"
	.space	1
.LC1019:
	.ascii	"<6>acc_bind_config\012\000"
.LC1020:
	.ascii	"accessory\000"
	.space	2
.LC1021:
	.ascii	"<6>mtp_bind_config\012\000"
.LC1022:
	.ascii	"mtp\000"
.LC1023:
	.ascii	"<3>%s(#) call conn_gadget_bind_config\012\000"
	.space	1
.LC1024:
	.ascii	"<6>conn_gadget_bind_config\012\000"
.LC1025:
	.ascii	"Function FS Gadget\000"
	.space	1
.LC1026:
	.ascii	"%s: %s: mbim transport is %s\000"
	.space	3
.LC1027:
	.ascii	"<6>%s: port number %u\000"
	.space	2
.LC1028:
	.ascii	"<3>%s: Can not add port %u. Max ports = %d\000"
	.space	1
.LC1029:
	.ascii	"<6>%s: no_ports:%d\012\000"
.LC1030:
	.ascii	"%s: requested %d BAM2BAM ports\000"
	.space	1
.LC1031:
	.ascii	"<3>%s: Invalid num of ports count:%d\012\000"
	.space	2
.LC1032:
	.ascii	"%s: bam_data is already setup\000"
	.space	2
.LC1033:
	.ascii	"<3>%s: bam_data_setup failed err: %d\012\000"
	.space	2
.LC1034:
	.ascii	"<3>%s: bam setup failed\000"
.LC1035:
	.ascii	"<6>%s: mbim struct not allocated\000"
	.space	3
.LC1036:
	.ascii	"usb_mbim\000"
	.space	3
.LC1037:
	.ascii	"<6>%s: Exit status %d\000"
	.space	2
.LC1038:
	.ascii	"Mass Storage Function\000"
	.space	2
.LC1039:
	.ascii	"/home/Jprimero15/hlte/lolz/include/linux/kref.h\000"
.LC1040:
	.ascii	"k_rmnet_work\000"
	.space	3
.LC1041:
	.ascii	"rmnet_sdio\000"
	.space	1
.LC1042:
	.ascii	"usb_rmnet_sdio\000"
	.space	1
.LC1043:
	.ascii	"ccid_bulk_write(%d)\012\000"
	.space	3
.LC1044:
	.ascii	"<3> %s dev->error\012\000"
	.space	1
.LC1045:
	.ascii	"ccid_bulk_write: xfer error %d\012\000"
.LC1046:
	.ascii	"ccid_bulk_write returning %d\012\000"
	.space	2
.LC1047:
	.ascii	"<3>%s: mbim dev is null\012\000"
	.space	3
.LC1048:
	.ascii	"<3>%s: mbim command error %d\012\000"
	.space	2
.LC1049:
	.ascii	"rmnet_mux command error %d\012\000"
.LC1050:
	.ascii	"unable to allocate memory for ctrl req\012\000"
.LC1051:
	.ascii	"<3>%s: ctrl pkts dropped: cpkts_drp_cnt: %lu\012\000"
	.space	2
.LC1052:
	.ascii	"%s setup response queue error\012\000"
	.space	1
.LC1053:
	.ascii	"<3>%s: Invalid grmnet/buf, grmnet:%pK buf:%pK\012\000"
	.space	1
.LC1054:
	.ascii	"%s:dev:%pK portno#%d\012\000"
	.space	2
.LC1055:
	.ascii	"<3>%s: Failed to init audio streams: err %d\000"
.LC1056:
	.ascii	"%s: frames = %d, count = %d\000"
.LC1057:
	.ascii	"<3>%s: Capture error: %d\012\000"
	.space	2
.LC1058:
	.ascii	"%s: Queue capture packet: size %d\000"
	.space	2
.LC1059:
	.ascii	"<3>%s: given pkt size too big:%d > max_pkt_size:%d\012"
	.ascii	"\000"
.LC1060:
	.ascii	"<3>%s: Previous writing not finished yet\012\000"
	.space	2
.LC1061:
	.ascii	"%s: dev:%pK port_num#%d\012\000"
	.space	3
.LC1062:
	.ascii	"<3>%s: dev:%pK is not connected\012\000"
	.space	3
.LC1063:
	.ascii	"<3>%s: dev:%pK state=%d, recover!!\012\000"
.LC1064:
	.ascii	"%s: dev:%pK portno#%d\012\000"
	.space	1
.LC1065:
	.ascii	"<3>%s: dev:%pK is not online\012\000"
	.space	2
.LC1066:
	.ascii	"<3>%s: dev:%pK req is NULL\012\000"
.LC1067:
	.ascii	"<3>%s: dev:%pK req->buf is NULL\012\000"
	.space	3
.LC1068:
	.ascii	"%s: delay ep_queue: notifications queue is busy[%d]"
	.ascii	"\000"
.LC1069:
	.ascii	"<3>%s: ep enqueue error %d\012\000"
.LC1070:
	.ascii	"%s: Successful Exit\000"
.LC1071:
	.ascii	"ep-e\000"
	.space	3
.LC1072:
	.ascii	"ep-f\000"
	.space	3
.LC1073:
	.ascii	"ep3-bulk\000"
	.space	3
.LC1074:
	.ascii	"ep2-bulk\000"
	.space	3
.LC1075:
	.ascii	"dual\000"
	.space	3
.LC1076:
	.ascii	"full\000"
	.space	3
.LC1077:
	.ascii	"CDC Ethernet: %s speed IN/%s OUT/%s NOTIFY/%s\012\000"
	.space	1
.LC1078:
	.ascii	"<3>%s: %s: can't bind, err %d\012\000"
	.space	1
.LC1079:
	.ascii	"<3>%s: usb epin autoconfig failed\012\000"
	.space	1
.LC1080:
	.ascii	"<6>%s: usb epin autoconfig succeeded\012\000"
	.space	2
.LC1081:
	.ascii	"<3>%s: usb epout autoconfig failed\012\000"
.LC1082:
	.ascii	"<6>%s: usb epout autoconfig succeeded\012\000"
	.space	1
.LC1083:
	.ascii	"<3>%s: usb notify ep autoconfig failed\012\000"
.LC1084:
	.ascii	"<6>%s: usb notify ep autoconfig succeeded\012\000"
	.space	1
.LC1085:
	.ascii	"<6>%s: allocated notify ep request & request buffer"
	.ascii	"\012\000"
	.space	3
.LC1086:
	.ascii	"<6>%s: failed to allocate notify request\012\000"
	.space	2
.LC1087:
	.ascii	"%s: MBIM in configuration %d\000"
	.space	3
.LC1088:
	.ascii	"<6>%s: mbim(%d): %s speed IN/%s OUT/%s NOTIFY/%s\012"
	.ascii	"\000"
	.space	2
.LC1089:
	.ascii	"<3>%s: %s failed to bind, err %d\012\000"
	.space	2
.LC1090:
	.ascii	"super\000"
	.space	2
.LC1091:
	.ascii	"%s: can't bind, err %d\012\000"
.LC1092:
	.ascii	"%s: Return %d\000"
	.space	2
.LC1093:
	.ascii	"<3>%s: %s: failed to allocate desc interface\000"
	.space	3
.LC1094:
	.ascii	"<3>%s: %s: failed to allocate alt interface\000"
.LC1095:
	.ascii	"<3>%s: %s: failed to autoconfig in endpoint\000"
.LC1096:
	.ascii	"<3>%s: %s: failed to autoconfig out endpoint\000"
	.space	3
.LC1097:
	.ascii	"CDC Network: %s speed IN/%s OUT/%s NOTIFY/%s\012\000"
	.space	2
.LC1098:
	.ascii	"unable to autoconfigure all endpoints\012\000"
	.space	1
.LC1099:
	.ascii	"<3>%s: unable to allocate ifc id, err:%d\000"
	.space	3
.LC1100:
	.ascii	"<3>%s: usb epnotify autoconfig failed\012\000"
	.space	1
.LC1101:
	.ascii	"%s: CCID %s Speed, IN:%s OUT:%s\012\000"
	.space	3
.LC1102:
	.ascii	"qdss_bind\012\000"
	.space	1
.LC1103:
	.ascii	"<3>qdss_bind: full-speed is not supported\012\000"
	.space	1
.LC1104:
	.ascii	"<3>interface allocation error\012\000"
	.space	1
.LC1105:
	.ascii	"<3>ep_autoconfig error\012\000"
.LC1106:
	.ascii	"<3>usb_copy_descriptors error\012\000"
	.space	1
.LC1107:
	.ascii	"<3>%s: unable to allocate memory for notify req\012"
	.ascii	"\000"
	.space	3
.LC1108:
	.ascii	"<6>%s: RmNet(%d) %s Speed, IN:%s OUT:%s\012\000"
	.space	3
.LC1109:
	.ascii	"acm ttyGS%d: %s speed IN/%s OUT/%s NOTIFY/%s\012\000"
	.space	2
.LC1110:
	.ascii	"<6>DUN register failed. data is null.\012\000"
	.space	1
.LC1111:
	.ascii	"<6>DUN is registerd\012\000"
	.space	3
.LC1112:
	.ascii	"%s/%pK: can't bind, err %d\012\000"
.LC1113:
	.ascii	"%s: configNr = %d\012\000"
	.space	1
.LC1114:
	.ascii	"failed\012\000"
.LC1115:
	.ascii	"RNDIS: %s speed IN/%s OUT/%s NOTIFY/%s\012\000"
.LC1116:
	.ascii	"<3>conn_gadget_function_bind dev: %pK\012\000"
	.space	1
.LC1117:
	.ascii	"%s: create_bulk_endpoints dev: %pK\012\000"
.LC1118:
	.ascii	"<3>usb_ep_autoconfig for ep_in failed\012\000"
	.space	1
.LC1119:
	.ascii	"%s: usb_ep_autoconfig for ep_in got %s\012\000"
.LC1120:
	.ascii	"<3>usb_ep_autoconfig for ep_out failed\012\000"
.LC1121:
	.ascii	"%s: usb_ep_autoconfig for conn_gadget ep_out got %s"
	.ascii	"\012\000"
	.space	3
.LC1122:
	.ascii	"<3>%s() conn_gadget_bind() could not allocate reque"
	.ascii	"sts\012\000"
.LC1123:
	.ascii	"<3>%s speed %s: IN/%s, OUT/%s\012\000"
	.space	1
.LC1124:
	.ascii	"acc_function_bind dev: %pK\012\000"
.LC1125:
	.ascii	"android\000"
.LC1126:
	.ascii	"create_bulk_endpoints dev: %pK\012\000"
.LC1127:
	.ascii	"usb_ep_autoconfig for ep_in failed\012\000"
.LC1128:
	.ascii	"usb_ep_autoconfig for ep_in got %s\012\000"
.LC1129:
	.ascii	"usb_ep_autoconfig for ep_out failed\012\000"
	.space	3
.LC1130:
	.ascii	"usb_ep_autoconfig for ep_out got %s\012\000"
	.space	3
.LC1131:
	.ascii	"<3>acc_bind() could not allocate requests\012\000"
	.space	1
.LC1132:
	.ascii	"%s speed %s: IN/%s, OUT/%s\012\000"
.LC1133:
	.ascii	"mtp_function_bind dev: %pK\012\000"
.LC1134:
	.ascii	"usb_ep_autoconfig for mtp ep_out got %s\012\000"
	.space	3
.LC1135:
	.ascii	"usb_ep_autoconfig for ep_intr failed\012\000"
	.space	2
.LC1136:
	.ascii	"usb_ep_autoconfig for mtp ep_intr got %s\012\000"
	.space	2
.LC1137:
	.ascii	"<3>mtp_bind() could not allocate requests\012\000"
	.space	1
.LC1138:
	.ascii	"adb_function_bind dev: %pK\012\000"
.LC1139:
	.ascii	"usb_ep_autoconfig for adb ep_out got %s\012\000"
	.space	3
.LC1140:
	.ascii	"<3>adb_bind() could not allocate requests\012\000"
	.space	1
.LC1141:
	.ascii	"entity DESCRIPTOR(%02lx); ret = %d\012\000"
.LC1142:
	.ascii	"entity INTERFACE(%02x); ret = %d\012\000"
	.space	2
.LC1143:
	.ascii	"ep0 bMaxBurst must be 0\012\000"
	.space	3
.LC1144:
	.ascii	"can't enable %s, result %d\012\000"
.LC1145:
	.ascii	"config_ep_by_speed failed for ep %s, result %d\012\000"
.LC1146:
	.ascii	"config_ep_by_speed failes for ep %s, result %d\012\000"
.LC1147:
	.ascii	"<3>%s: unable to allocate memory for notify ep\012\000"
.LC1148:
	.ascii	"audio_set_alt intf %d, alt %d\012\000"
	.space	1
.LC1149:
	.ascii	"config_ep fail ep %s, result %d\012\000"
	.space	3
.LC1150:
	.ascii	"failedto enable ep%s, result %d\012\000"
	.space	3
.LC1151:
	.ascii	"acc_function_set_alt intf: %d alt: %d\012\000"
	.space	1
.LC1152:
	.ascii	"failed to enable ep %s, result %d\012\000"
	.space	1
.LC1153:
	.ascii	"mtp_function_set_alt intf: %d alt: %d\012\000"
	.space	1
.LC1154:
	.ascii	"<3>%s: unable to allocate memory for out req\012\000"
	.space	2
.LC1155:
	.ascii	"<3>%s: unable to allocate memory for in req\012\000"
	.space	3
.LC1156:
	.ascii	"<3>%s: config_ep_by_speed failed for ep#%s, err#%d\012"
	.ascii	"\000"
.LC1157:
	.ascii	"<3>%s: usb ep#%s enable failed, err#%d\012\000"
.LC1158:
	.ascii	"adb_function_set_alt intf: %d alt: %d\012\000"
	.space	1
.LC1159:
	.ascii	"qdss_set_alt\012\000"
	.space	2
.LC1160:
	.ascii	"<3>qdss_st_alt: qdss supportes HS or SS only\012\000"
	.space	2
.LC1161:
	.ascii	"<3>qdss_set_alt failed\012\000"
.LC1162:
	.ascii	"<3>%s: intf: %d alt: %d\012\000"
	.space	3
.LC1163:
	.ascii	"<3>%s() kfifo_reset\012\000"
	.space	3
.LC1164:
	.ascii	"can't configure %s: %d\012\000"
.LC1165:
	.ascii	"can't start %s: %d\012\000"
.LC1166:
	.ascii	"%s queue req: %d\012\000"
	.space	2
.LC1167:
	.ascii	"gmidi function\000"
	.space	1
.LC1168:
	.ascii	"qdss_bind_config\012\000"
	.space	2
.LC1169:
	.ascii	"qdss\000"
	.space	3
.LC1170:
	.ascii	"qdss_bind_config allocating channel\012\000"
	.space	3
.LC1171:
	.ascii	"<3>qdss_bind_config: allocating channel failed\012\000"
.LC1172:
	.ascii	"<3>qdss usb_add_function failed\012\000"
	.space	3
.LC1173:
	.ascii	"<3>%s: qdss: Cannot open channel qdss\000"
	.space	2
.LC1174:
	.ascii	"USB audio source\000"
	.space	3
.LC1175:
	.ascii	"USB gadget audio\000"
	.space	3
.LC1176:
	.ascii	"audio_source\000"
	.space	3
.LC1177:
	.ascii	"USB accessory audio source\000"
	.space	1
.LC1178:
	.ascii	"&dev->smd_ctl.wait\000"
	.space	1
.LC1179:
	.ascii	"&dev->smd_data.wait\000"
.LC1180:
	.ascii	"rmnet\000"
	.space	2
.LC1181:
	.ascii	"usb_rmnet_smd\000"
	.space	2
.LC1182:
	.ascii	"<3>%s: %s: rndis_pdata\012\000"
.LC1183:
	.ascii	"<6>%s: %s MAC: %02X:%02X:%02X:%02X:%02X:%02X\012\000"
	.space	2
.LC1184:
	.ascii	"rndis\000"
	.space	2
.LC1185:
	.ascii	"%s%%d\000"
	.space	2
.LC1186:
	.ascii	"self\000"
	.space	3
.LC1187:
	.ascii	"using random %s ethernet address\012\000"
	.space	2
.LC1188:
	.ascii	"<7>usb: set unique host mac\012\000"
	.space	3
.LC1189:
	.ascii	"register_netdev failed, %d\012\000"
.LC1190:
	.ascii	"<6>%s: MAC %pM\012\000"
.LC1191:
	.ascii	"<6>%s: HOST MAC %pM\012\000"
	.space	3
.LC1192:
	.ascii	"<3>%s: %s: gether_setup failed\012\000"
.LC1193:
	.ascii	"composite\000"
	.space	2
.LC1194:
	.ascii	"device tree enabled\012\000"
	.space	3
.LC1195:
	.ascii	"<3>%s: unable to allocate platform data\012\000"
	.space	3
.LC1196:
	.ascii	"qcom,android-usb-swfi-latency\000"
	.space	2
.LC1197:
	.ascii	"qcom,android-usb-cdrom\000"
	.space	1
.LC1198:
	.ascii	"qcom,android-usb-internal-ums\000"
	.space	2
.LC1199:
	.ascii	"qcom,streaming-func\000"
.LC1200:
	.ascii	"<3>%s: Invalid number of functions used.\012\000"
	.space	2
.LC1201:
	.ascii	"%s: name of streaming function:%s\012\000"
	.space	1
.LC1202:
	.ascii	"android_usb\000"
.LC1203:
	.ascii	"<3>%s: %s(): Failed to alloc memory for android_dev"
	.ascii	"\012\000"
	.space	3
.LC1204:
	.ascii	"&android_dev->mutex\000"
.LC1205:
	.ascii	"ioremap failed\012\000"
.LC1206:
	.ascii	"failed to get mem resource\012\000"
.LC1207:
	.ascii	"android%d\000"
	.space	2
.LC1208:
	.ascii	"<3>%s: %s(): android_create_device failed\012\000"
	.space	1
.LC1209:
	.ascii	"<7>usb: %s error pdev(%pK)\012\000"
.LC1210:
	.ascii	"<7>usb: %s failed to create attr\012\000"
	.space	2
.LC1211:
	.ascii	"<3>usb: %s To create terminal_atttrr is failed\012\000"
.LC1212:
	.ascii	"<3>%s: %s(): Failed to register android composite d"
	.ascii	"river\012\000"
	.space	2
.LC1213:
	.ascii	"high\000"
	.space	3
.LC1214:
	.ascii	"<3>DUN register is failed, ret = %d\012\000"
	.space	3
.LC1215:
	.ascii	"<3>usb: %s modem misc register is failed\012\000"
	.space	2
.LC1216:
	.ascii	"&modem_wait_q\000"
	.space	2
.LC1217:
	.ascii	"%s: Unexpected call\012\000"
	.space	3
.LC1218:
	.ascii	"%s: Completing delayed status\012\000"
	.space	1
.LC1219:
	.ascii	"Main thread exiting on signal\012\000"
	.space	1
.LC1220:
	.ascii	"bulk-out\000"
	.space	3
.LC1221:
	.ascii	"invalid CBW: len %u sig 0x%x\012\000"
	.space	2
.LC1222:
	.ascii	"bulk-in set wedge\012\000"
	.space	1
.LC1223:
	.ascii	"usb_ep_set_wedge -> %d\012\000"
.LC1224:
	.ascii	"non-meaningful CBW: lun = %u, flags = 0x%x, cmdlen "
	.ascii	"%u\012\000"
	.space	1
.LC1225:
	.ascii	"INQUIRY\000"
.LC1226:
	.ascii	" Card\000"
	.space	2
.LC1227:
	.ascii	"MODE SELECT(6)\000"
	.space	1
.LC1228:
	.ascii	"MODE SELECT(10)\000"
.LC1229:
	.ascii	"MODE SENSE(6)\000"
	.space	2
.LC1230:
	.ascii	"MODE SENSE(10)\000"
	.space	1
.LC1231:
	.ascii	"PREVENT-ALLOW MEDIUM REMOVAL\000"
	.space	3
.LC1232:
	.ascii	"READ(6)\000"
.LC1233:
	.ascii	"READ(10)\000"
	.space	3
.LC1234:
	.ascii	"READ(12)\000"
	.space	3
.LC1235:
	.ascii	"READ CAPACITY\000"
	.space	2
.LC1236:
	.ascii	"READ HEADER\000"
.LC1237:
	.ascii	"READ TOC\000"
	.space	3
.LC1238:
	.ascii	"READ FORMAT CAPACITIES\000"
	.space	1
.LC1239:
	.ascii	"REQUEST SENSE\000"
	.space	2
.LC1240:
	.ascii	"START-STOP UNIT\000"
.LC1241:
	.ascii	"Load AT\000"
.LC1242:
	.ascii	"unload attempt prevented\012\000"
	.space	2
.LC1243:
	.ascii	"Load User\000"
	.space	2
.LC1244:
	.ascii	"SYNCHRONIZE CACHE\000"
	.space	2
.LC1245:
	.ascii	"TEST UNIT READY\000"
.LC1246:
	.ascii	"VERIFY\000"
	.space	1
.LC1247:
	.ascii	"error in file verify: %d\012\000"
	.space	2
.LC1248:
	.ascii	"partial file verify: %d/%u\012\000"
.LC1249:
	.ascii	"WRITE(6)\000"
	.space	3
.LC1250:
	.ascii	"WRITE(10)\000"
	.space	2
.LC1251:
	.ascii	"WRITE(12)\000"
	.space	2
.LC1252:
	.ascii	"<6>%s called\012\000"
	.space	2
.LC1253:
	.ascii	"time stop\000"
	.space	2
.LC1254:
	.ascii	"time reset\000"
	.space	1
.LC1255:
	.ascii	"READ CD\000"
.LC1256:
	.ascii	"usb: %s : common->version_string[%d]=%s\015\012\000"
	.space	2
.LC1257:
	.ascii	"Unknown x%02x\000"
	.space	2
.LC1258:
	.ascii	"%s: no requests available\012\000"
	.space	1
.LC1259:
	.ascii	"%s: cannot queue read request\012\000"
	.space	1
.LC1260:
	.ascii	"diag_function_add\012\000"
	.space	1
.LC1261:
	.ascii	"usb_add_function failed\012\000"
	.space	3
.LC1262:
	.ascii	"unable to get diag usb channel\012\000"
.LC1263:
	.ascii	"<3>%s: diag: Cannot open channel '%s'\000"
	.space	2
.LC1264:
	.ascii	"send_sps_req\012\000"
	.space	2
.LC1265:
	.ascii	"<3>usb_ep_alloc_request failed\012\000"
.LC1266:
	.ascii	"<3>send_sps_req: usb_ep_queue error\012\000"
	.space	3
.LC1267:
	.ascii	"usb_qdss_connect_work\012\000"
	.space	1
.LC1268:
	.ascii	"init_data\012\000"
	.space	1
.LC1269:
	.ascii	"<3>msm_ep_config failed\012\000"
	.space	3
.LC1270:
	.ascii	"<3>init_data error\000"
	.space	1
.LC1271:
	.ascii	"QDSS is used with non DWC3 core\012\000"
	.space	3
.LC1272:
	.ascii	"<3>qdss_data_connection: memory alloc failed\012\000"
	.space	2
.LC1273:
	.ascii	"<3>set_qdss_data_connection error\000"
	.space	2
.LC1274:
	.ascii	"<3>send_sps_req error\012\000"
	.space	1
.LC1275:
	.ascii	"usb_qdss_free_req\012\000"
	.space	1
.LC1276:
	.ascii	"<3>usb_qdss_free_req: qdss ctx is NULL\012\000"
.LC1277:
	.ascii	"usb_qdss_alloc_req\012\000"
.LC1278:
	.ascii	"<3>usb_qdss_alloc_req: missing params\012\000"
	.space	1
.LC1279:
	.ascii	"<3>usb_qdss_alloc_req: ctrl_in allocation err\012\000"
	.space	1
.LC1280:
	.ascii	"<3>usb_qdss_alloc_req:ctrl_out allocation err\012\000"
	.space	1
.LC1281:
	.ascii	"usb_qdss_ctrl_read\012\000"
.LC1282:
	.ascii	"<3>error: usb_qdss_ctrl_read list is empty\012\000"
.LC1283:
	.ascii	"<3>qdss usb_ep_queue failed\012\000"
	.space	3
.LC1284:
	.ascii	"usb_qdss_ctrl_write\012\000"
	.space	3
.LC1285:
	.ascii	"<3>error: usb_qdss_ctrl_write list is empty\012\000"
	.space	3
.LC1286:
	.ascii	"usb_qdss_open\012\000"
	.space	1
.LC1287:
	.ascii	"<3>usb_qdss_open: notification func is missing\012\000"
.LC1288:
	.ascii	"usb_qdss_open: allocation qdss ctx\012\000"
.LC1289:
	.ascii	"usb_qdss_open: qdss ctx found\012\000"
	.space	1
.LC1290:
	.ascii	"usb_qdss_close\012\000"
.LC1291:
	.ascii	"<3>usb:[%s] port_usb or port_tty is NULL!! started("
	.ascii	"%d)\012\000"
.LC1292:
	.ascii	"gs_open: ttyGS%d (%pK,%pK) no buffer\012\000"
	.space	2
.LC1293:
	.ascii	"gs_open: start ttyGS%d\012\000"
.LC1294:
	.ascii	"gs_open: ttyGS%d (%pK,%pK)\012\000"
.LC1295:
	.ascii	"gserial_connect: start ttyGS%d\012\000"
.LC1296:
	.ascii	"acm ttyGS%d deactivated\012\000"
	.space	3
.LC1297:
	.ascii	"reset acm ttyGS%d\012\000"
	.space	1
.LC1298:
	.ascii	"activate acm ttyGS%d\012\000"
	.space	2
.LC1299:
	.ascii	"%s: Event data\012\000"
.LC1300:
	.ascii	"%s: Event Open\012\000"
.LC1301:
	.ascii	"%s: port: %pK\012\000"
	.space	1
.LC1302:
	.ascii	"<3>%s: unable to allocate out requests\012\000"
.LC1303:
	.ascii	"<3>%s: unable to allocate IN requests\012\000"
	.space	1
.LC1304:
	.ascii	"%s: Event Close\012\000"
	.space	3
.LC1305:
	.ascii	"%s: sdio is not open\012\000"
	.space	2
.LC1306:
	.ascii	"%s: port:%pK port#%d read_queue:%pK\000"
.LC1307:
	.ascii	"%s: usb cable is disconencted\012\000"
	.space	1
.LC1308:
	.ascii	"%s: req status shutdown portno#%d port:%pK\000"
	.space	1
.LC1309:
	.ascii	"<3>%s: sio channel is not open\012\000"
.LC1310:
	.ascii	"<3>%s: usb request is null port#%d\012\000"
.LC1311:
	.ascii	"%s: port:%pK port#%d req:%pK actual:%d n_read:%d\012"
	.ascii	"\000"
	.space	2
.LC1312:
	.ascii	"%s: SDIO IO is not supported\012\000"
	.space	2
.LC1313:
	.ascii	"%s: sdio_write_avail:%d\000"
.LC1314:
	.ascii	"%s: req->actual is already zero,update bytes read\012"
	.ascii	"\000"
	.space	1
.LC1315:
	.ascii	"<3>%s: port#%d sdio write failed err:%d\000"
.LC1316:
	.ascii	"%s: flushed out %d bytes\012\000"
	.space	2
.LC1317:
	.ascii	"<3>%s: usb disconnected\012\000"
	.space	3
.LC1318:
	.ascii	"%s: SDIO channel is not open\012\000"
	.space	2
.LC1319:
	.ascii	"<3>%s: port:%pK port#%d sdio read failed err:%d\000"
.LC1320:
	.ascii	"<3>%s: unable to allocate out reqs\012\000"
.LC1321:
	.ascii	"<3>%s: unable to allocate in reqs\012\000"
	.space	1
.LC1322:
	.ascii	"READ AVAIL\000"
	.space	1
.LC1323:
	.ascii	"WRITE_AVAIL\000"
.LC1324:
	.ascii	"%s: port:%pK port#%d event:%s\012\000"
	.space	1
.LC1325:
	.ascii	"<3>%s: port allocation failed\012\000"
	.space	1
.LC1326:
	.ascii	"%s: port:%pK port#%d sdio_name: %s\012\000"
.LC1327:
	.ascii	"<3>%s: failed to enable in ep w/ err:%d\012\000"
	.space	3
.LC1328:
	.ascii	"%s: sdio is already open, start io\012\000"
.LC1329:
	.ascii	"%s: gadget:(%pK) count:%d\012\000"
	.space	1
.LC1330:
	.ascii	"<3>%s: invalid number of ports count:%d max_ports:%"
	.ascii	"d\012\000"
	.space	2
.LC1331:
	.ascii	"<3>%s: unable to create workqueue gsdio_wq\012\000"
.LC1332:
	.ascii	"&sdio_ports[i].lock\000"
.LC1333:
	.ascii	"<3>%s: sdio logical port allocation failed\012\000"
.LC1334:
	.ascii	"usb_gsdio\000"
	.space	2
.LC1335:
	.ascii	"%s: gserial:%pK portno:%u\012\000"
	.space	1
.LC1336:
	.ascii	"<3>%s: Invalid port no#%d\000"
	.space	2
.LC1337:
	.ascii	"%s: g:%pK count: %d\012\000"
	.space	3
.LC1338:
	.ascii	"<3>%s: Invalid num of ports count:%d gadget:%pK\012"
	.ascii	"\000"
	.space	3
.LC1339:
	.ascii	"k_gsmd\000"
	.space	1
.LC1340:
	.ascii	"<3>%s: Unable to create workqueue gsmd_wq\012\000"
	.space	1
.LC1341:
	.ascii	"&smd_ports[i].lock\000"
	.space	1
.LC1342:
	.ascii	"<3>%s: Unable to alloc port:%d\012\000"
.LC1343:
	.ascii	"usb_gsmd\000"
	.space	3
.LC1344:
	.ascii	"%s: grmnet:%pK port#%d\012\000"
.LC1345:
	.ascii	"<3>%s: invalid bam portno#%d\012\000"
	.space	2
.LC1346:
	.ascii	"<3>%s: grmnet port is null\012\000"
.LC1347:
	.ascii	"<3>%s: usb_bam_client_ready failed\012\000"
.LC1348:
	.ascii	"%s: requested BAM ports:%d and BAM2BAM ports:%d\012"
	.ascii	"\000"
	.space	3
.LC1349:
	.ascii	"<3>%s: Invalid num of ports count:%d,%d\012\000"
	.space	3
.LC1350:
	.ascii	"k_gbam\000"
	.space	1
.LC1351:
	.ascii	"<3>%s: Unable to create workqueue gbam_wq\012\000"
	.space	1
.LC1352:
	.ascii	"usb_rmnet\000"
	.space	2
.LC1353:
	.ascii	"<3>%s: Invalid port_num#%d\012\000"
.LC1354:
	.ascii	"%s: requested ports:%d\012\000"
.LC1355:
	.ascii	"<3>%s: Invalid client:%d\012\000"
	.space	2
.LC1356:
	.ascii	"gsmd_ctrl\000"
	.space	2
.LC1357:
	.ascii	"<3>%s: Unable to create workqueue grmnet_ctrl\012\000"
	.space	1
.LC1358:
	.ascii	"&c->wait\000"
	.space	3
.LC1359:
	.ascii	"&c->smd_wait_q\000"
	.space	1
.LC1360:
	.ascii	"%s: grmnet:%pK\012\000"
.LC1361:
	.ascii	"<3>%s: setting xport name for invalid port num %d\012"
	.ascii	"\000"
	.space	1
.LC1362:
	.ascii	"_ctrl\000"
	.space	2
.LC1363:
	.ascii	"<3>%s: Unable to create workqueue:%s\012\000"
	.space	2
.LC1364:
	.ascii	"_data\000"
	.space	2
.LC1365:
	.ascii	"%s: count: %d\012\000"
	.space	1
.LC1366:
	.ascii	"SMUX_RMNET_CTL_HSUART\000"
	.space	2
.LC1367:
	.ascii	"%s: ctrl xport: %s data xport: %s dev: %pK portno: "
	.ascii	"%d\012\000"
	.space	1
.LC1368:
	.ascii	"%s: reset port:%d\012\000"
	.space	1
.LC1369:
	.ascii	"<3>%s: gsmd_ctrl_connect failed: err:%d\012\000"
	.space	3
.LC1370:
	.ascii	"<3>%s: gqti_ctrl_connect failed: err:%d\012\000"
	.space	3
.LC1371:
	.ascii	"<3>%s: ghsic_ctrl_connect failed: err:%d\012\000"
	.space	2
.LC1372:
	.ascii	"<3>%s: ghsuart_ctrl_connect failed: err:%d\012\000"
.LC1373:
	.ascii	"<3>%s: usb_bam_get_connection_idx failed\012\000"
	.space	2
.LC1374:
	.ascii	"<3>%s: gbam_connect failed: err:%d\012\000"
.LC1375:
	.ascii	"<3>%s: ghsic_data_connect failed: err:%d\012\000"
	.space	2
.LC1376:
	.ascii	"<3>%s: ghsuart_data_connect failed: err:%d\012\000"
.LC1377:
	.ascii	"<3>%s: Max-%d instances supported\012\000"
	.space	1
.LC1378:
	.ascii	"%s: port#:%d, ctrl port: %s data port: %s\012\000"
	.space	1
.LC1379:
	.ascii	"<3>%s: Unable to allocate rmnet device\012\000"
.LC1380:
	.ascii	"<3>%s: Un-supported transport: %u\012\000"
	.space	1
.LC1381:
	.ascii	"<3>%s: rmnet: Cannot open ctrl port:'%s' data port:"
	.ascii	"'%s'\012\000"
	.space	3
.LC1382:
	.ascii	"%s: bam ports: %u bam2bam ports: %u data hsic ports"
	.ascii	": %u data hsuart ports: %u smd ports: %u ctrl hsic "
	.ascii	"ports: %u ctrl hsuart ports: %u nr_rmnet_ports: %u\012"
	.ascii	"\000"
	.space	2
.LC1383:
	.ascii	"%s: usb config:%pK\012\000"
.LC1384:
	.ascii	"<3>%s: supporting ports#%u port_id:%u\000"
	.space	2
.LC1385:
	.ascii	"<3>%s: failed to get string id, err:%d\012\000"
.LC1386:
	.ascii	"rmnet%d\000"
.LC1387:
	.ascii	"<3>%s: cannot allocate memory for name\012\000"
.LC1388:
	.ascii	"<3>%s: usb add function failed: %d\012\000"
.LC1389:
	.ascii	"%s: complete\012\000"
	.space	2
.LC1390:
	.ascii	"<3>%s: Could not bind rmnet%u config\012\000"
	.space	2
.LC1391:
	.ascii	"<3>%s: rmnet: Cannot setup transports\000"
	.space	2
.LC1392:
	.ascii	"%s: REMOTE_NDIS_INITIALIZE_MSG\012\000"
.LC1393:
	.ascii	"%s: REMOTE_NDIS_HALT_MSG\012\000"
	.space	2
.LC1394:
	.ascii	"%s: OID_GEN_CURRENT_PACKET_FILTER %08x\012\000"
.LC1395:
	.ascii	"<4>%s: set unknown OID 0x%08X, size %d\012\000"
.LC1396:
	.ascii	"%s: REMOTE_NDIS_RESET_MSG\012\000"
	.space	1
.LC1397:
	.ascii	"<4>%s: unknown RNDIS message 0x%08X len %d\012\000"
.LC1398:
	.ascii	"%03d:  %02x %02x %02x %02x %02x %02x %02x %02x %02x"
	.ascii	" %02x %02x %02x %02x %02x %02x %02x\012\000"
.LC1399:
	.ascii	"RNDIS command error %d, %d/%d\012\000"
	.space	1
.LC1400:
	.ascii	"%s: MaxTransferSize: %d : Multi_pkt_txr: %s\012\000"
	.space	3
.LC1401:
	.ascii	"<3>%s: RNDIS command error %d, %d/%d\012\000"
	.space	2
.LC1402:
	.ascii	"%s: MaxTransferSize: %d\012\000"
	.space	3
.LC1403:
	.ascii	"%s: data transport type is %s\000"
	.space	2
.LC1404:
	.ascii	"%s: set xport = %d\000"
	.space	1
.LC1405:
	.ascii	"%s: using random dev_mac ethernet address\012\000"
	.space	1
.LC1406:
	.ascii	"%s: using random host_mac ethernet address\012\000"
.LC1407:
	.ascii	"%02X%02X%02X%02X%02X%02X\000"
	.space	3
.LC1408:
	.ascii	"cdc_ethernet\000"
	.space	3
.LC1409:
	.ascii	"<3>%s: failed to add function\000"
	.space	2
.LC1410:
	.ascii	"%s: setting ecm_ipa, host_ethaddr=%pM, device_ethad"
	.ascii	"dr=%pM\000"
	.space	2
.LC1411:
	.ascii	"%s: ecm_ipa successful created\000"
	.space	1
.LC1412:
	.ascii	"<3>%s: %s: teth_bridge_set_aggr_params failed\012\000"
	.space	1
.LC1413:
	.ascii	"<6>%s: SET DEVICE OFFLINE\000"
	.space	2
.LC1414:
	.ascii	"<6>%s: dev:%pK port:%d. Do nothing.\012\000"
	.space	3
.LC1415:
	.ascii	"<6>%s: mbim deactivated\012\000"
	.space	3
.LC1416:
	.ascii	"<6>%s: CONTROL_INTERFACE\000"
	.space	3
.LC1417:
	.ascii	"<6>%s: reset mbim control %d\012\000"
	.space	2
.LC1418:
	.ascii	"<3>%s: Failed configuring notify ep %s: err %d\012\000"
.LC1419:
	.ascii	"<6>%s: DATA_INTERFACE\000"
	.space	2
.LC1420:
	.ascii	"<6>%s: reset mbim\012\000"
	.space	1
.LC1421:
	.ascii	"<6>%s: Alt set 1, initialize ports\000"
	.space	1
.LC1422:
	.ascii	"<6>%s: Choose endpoints\000"
.LC1423:
	.ascii	"<3>%s: IN ep %s failed: %d\012\000"
.LC1424:
	.ascii	"<6>%s: Set mbim port in_desc = 0x%pK\012\000"
	.space	2
.LC1425:
	.ascii	"<3>%s: OUT ep %s failed: %d\012\000"
	.space	3
.LC1426:
	.ascii	"<6>%s: Set mbim port out_desc = 0x%pK\012\000"
	.space	1
.LC1427:
	.ascii	"%s: Activate mbim\012\000"
	.space	1
.LC1428:
	.ascii	"<6>%s: dev:%pK portno:%d\012\000"
	.space	2
.LC1429:
	.ascii	"<3>%s: bam_data_setup failed: err:%d\012\000"
	.space	2
.LC1430:
	.ascii	"<6>%s: mbim bam connected\012\000"
	.space	1
.LC1431:
	.ascii	"<6>%s: PORTS already SET\000"
	.space	3
.LC1432:
	.ascii	"<6>%s: SET DEVICE ONLINE\000"
	.space	3
.LC1433:
	.ascii	"<3>%s: ERROR: Illegal Interface\000"
.LC1434:
	.ascii	"usb\000"
.LC1435:
	.ascii	"<3>%s: %s: ecm_pdata\012\000"
	.space	2
.LC1436:
	.ascii	"ecm\000"
.LC1437:
	.ascii	"<3>%s: %s: ecm_bind_config failed\012\000"
	.space	1
.LC1438:
	.ascii	"<3>%s: RNDIS header memory allocation failed.\012\000"
	.space	1
.LC1439:
	.ascii	"rndis deactivated\012\000"
	.space	1
.LC1440:
	.ascii	"reset rndis\012\000"
	.space	3
.LC1441:
	.ascii	"init rndis\012\000"
.LC1442:
	.ascii	"RNDIS RX/TX early activation ... \012\000"
	.space	1
.LC1443:
	.ascii	"ecm deactivated\012\000"
	.space	3
.LC1444:
	.ascii	"reset ecm\012\000"
	.space	1
.LC1445:
	.ascii	"init ecm\012\000"
	.space	2
.LC1446:
	.ascii	"activate ecm\012\000"
	.space	2
.LC1447:
	.ascii	"ncm deactivated\012\000"
	.space	3
.LC1448:
	.ascii	"reset ncm control %d\012\000"
	.space	2
.LC1449:
	.ascii	"init ncm ctrl %d\012\000"
	.space	2
.LC1450:
	.ascii	"reset ncm\012\000"
	.space	1
.LC1451:
	.ascii	"<7>usb: %s gather_disconnect\012\000"
	.space	2
.LC1452:
	.ascii	"init ncm\012\000"
	.space	2
.LC1453:
	.ascii	"<3>activate ncm setting MTU size (%d)\012\000"
	.space	1
.LC1454:
	.ascii	"host\000"
	.space	3
.LC1455:
	.ascii	"%s: %s: ecm_transport is %s\000"
.LC1456:
	.ascii	"%s: dev:%pK. Disconnect BAM.\012\000"
	.space	2
.LC1457:
	.ascii	"<3>%s: bam_data_connect failed: err:%d\012\000"
.LC1458:
	.ascii	"%s: ecm bam connected\012\000"
	.space	1
.LC1459:
	.ascii	"<6>%s: rndis deactivated\012\000"
	.space	2
.LC1460:
	.ascii	"%s: dev:%pK. %s Disconnect BAM.\012\000"
	.space	3
.LC1461:
	.ascii	"<6>%s: rndis bam connected\012\000"
.LC1462:
	.ascii	"RNDIS RX/TX early activation ...\012\000"
	.space	2
.LC1463:
	.ascii	"<3>%s: unable to open sound control device file: %s"
	.ascii	"\012\000"
	.space	3
.LC1464:
	.ascii	"<3>%s: No such PCM playback device: %s\012\000"
.LC1465:
	.ascii	"%s: Initialized PCM playback device: %s\012\000"
	.space	3
.LC1466:
	.ascii	"<3>%s: Setting playback HW params failed: err %d\000"
	.space	3
.LC1467:
	.ascii	"<3>%s: No such PCM capture device: %s\012\000"
	.space	1
.LC1468:
	.ascii	"<3>%s: Setting capture HW params failed: err %d\000"
.LC1469:
	.ascii	"<3>%s: Failed to open snd devices\012\000"
	.space	1
.LC1470:
	.ascii	"%s: Enter\000"
	.space	2
.LC1471:
	.ascii	"audio\000"
	.space	2
.LC1472:
	.ascii	"<3>%s: %s: Failed to add usb audio function, err = "
	.ascii	"%d\000"
	.space	2
.LC1473:
	.ascii	"<3>%s: %s: ncm_pdata\012\000"
	.space	2
.LC1474:
	.ascii	"<7>usb: %s MAC:%02X:%02X:%02X:%02X:%02X:%02X\012\000"
	.space	2
.LC1475:
	.ascii	"<7>usb: %s before MAC:%02X:%02X:%02X:%02X:%02X:%02X"
	.ascii	"\012\000"
	.space	3
.LC1476:
	.ascii	"<7>usb: %s after MAC:%02X:%02X:%02X:%02X:%02X:%02X\012"
	.ascii	"\000"
.LC1477:
	.ascii	"<7>usb: %s ncm ready (%s)\012\000"
	.space	1
.LC1478:
	.ascii	"<7>usb: %s idProduct=0x%x, DeviceClass=0x%x\012\000"
	.space	3
.LC1479:
	.ascii	"<7>usb: %s ver=0x%x vendor_id=0x%x\012\000"
.LC1480:
	.ascii	"<7>usb: %s failed usb_ep_queue\012\000"
.LC1481:
	.ascii	"SMUX_CONNECTED\000"
	.space	1
.LC1482:
	.ascii	"SMUX_DISCONNECTED\000"
	.space	2
.LC1483:
	.ascii	"SMUX_READ_DONE\000"
	.space	1
.LC1484:
	.ascii	"SMUX_READ_FAIL\000"
	.space	1
.LC1485:
	.ascii	"SMUX_WRITE_DONE\000"
.LC1486:
	.ascii	"SMUX_WRITE_FAIL\000"
.LC1487:
	.ascii	"SMUX_TIOCM_UPDATE\000"
	.space	2
.LC1488:
	.ascii	"SMUX_LOW_WM_HIT\000"
.LC1489:
	.ascii	"SMUX_HIGH_WM_HIT\000"
	.space	3
.LC1490:
	.ascii	"RNDIS_UNINITIALIZED\000"
.LC1491:
	.ascii	"RNDIS_INITIALIZED\000"
	.space	2
.LC1492:
	.ascii	"RNDIS_DATA_INITIALIZED\000"
	.space	1
.LC1493:
	.ascii	"DATA\000"
	.space	3
.LC1494:
	.ascii	"OPEN\000"
	.space	3
.LC1495:
	.ascii	"CLOSE\000"
	.space	2
.LC1496:
	.ascii	"NONE\000"
	.space	3
.LC1497:
	.ascii	"name of streaming function:%s\012\000"
	.space	1
.LC1498:
	.ascii	"%s: dload:%pK pid:%x serial_num:%s\012\000"
.LC1499:
	.ascii	"%s: unable to update PID and serial_no\012\000"
.LC1500:
	.ascii	"setting streaming_enabled to false.\012\000"
	.space	3
.LC1501:
	.ascii	"remote_wakeup\000"
	.space	2
.LC1502:
	.ascii	"state\000"
	.space	2
.LC1503:
	.ascii	"pm_qos\000"
	.space	1
.LC1504:
	.ascii	"enable\000"
	.space	1
.LC1505:
	.ascii	"functions\000"
	.space	2
.LC1506:
	.ascii	"macos\000"
	.space	2
.LC1507:
	.ascii	"ss_host_available\000"
	.space	2
.LC1508:
	.ascii	"usb30en\000"
.LC1509:
	.ascii	"bcdUSB\000"
	.space	1
.LC1510:
	.ascii	"iSerial\000"
.LC1511:
	.ascii	"iProduct\000"
	.space	3
.LC1512:
	.ascii	"iManufacturer\000"
	.space	2
.LC1513:
	.ascii	"bDeviceProtocol\000"
.LC1514:
	.ascii	"bDeviceSubClass\000"
.LC1515:
	.ascii	"bDeviceClass\000"
	.space	3
.LC1516:
	.ascii	"bcdDevice\000"
	.space	2
.LC1517:
	.ascii	"idProduct\000"
	.space	2
.LC1518:
	.ascii	"idVendor\000"
	.space	3
.LC1519:
	.ascii	"android_usb: %s remote wakeup\012\000"
	.space	1
.LC1520:
	.ascii	"func:%s is enabled.\012\000"
	.space	3
.LC1521:
	.ascii	"set streaming_enabled to true\012\000"
	.space	1
.LC1522:
	.ascii	"uasp\000"
	.space	3
.LC1523:
	.ascii	"UASP %s\012\000"
	.space	3
.LC1524:
	.ascii	"pcm\000"
.LC1525:
	.ascii	"mass_storage\000"
	.space	3
.LC1526:
	.ascii	"sua_version_info\000"
	.space	3
.LC1527:
	.ascii	"product_string\000"
	.space	1
.LC1528:
	.ascii	"vendor_string\000"
	.space	2
.LC1529:
	.ascii	"inquiry_string\000"
	.space	1
.LC1530:
	.ascii	"rndis_qc\000"
	.space	3
.LC1531:
	.ascii	"max_pkt_per_xfer\000"
	.space	3
.LC1532:
	.ascii	"vendorID\000"
	.space	3
.LC1533:
	.ascii	"ethaddr\000"
.LC1534:
	.ascii	"wceis\000"
	.space	2
.LC1535:
	.ascii	"manufacturer\000"
	.space	3
.LC1536:
	.ascii	"ptp\000"
.LC1537:
	.ascii	"diag\000"
	.space	3
.LC1538:
	.ascii	"clients\000"
.LC1539:
	.ascii	"mbim_transports\000"
.LC1540:
	.ascii	"%s: mbim transport is %s\000"
	.space	3
.LC1541:
	.ascii	"ecm_qc\000"
	.space	1
.LC1542:
	.ascii	"ecm_transports\000"
	.space	1
.LC1543:
	.ascii	"ecm_ethaddr\000"
.LC1544:
	.ascii	"%s: ecm_transport is %s\000"
.LC1545:
	.ascii	"transport_names\000"
.LC1546:
	.ascii	"transports\000"
	.space	1
.LC1547:
	.ascii	"rmnet_smd\000"
	.space	2
.LC1548:
	.ascii	"instances\000"
	.space	2
.LC1549:
	.ascii	"midi\000"
	.space	3
.LC1550:
	.ascii	"alsa\000"
	.space	3
.LC1551:
	.ascii	"start adbd only in ADB composition\012\000"
.LC1552:
	.ascii	"aliases\000"
.LC1553:
	.ascii	"terminal_version\000"
	.space	3
.LC1554:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_ncm"
	.ascii	".c\000"
	.space	2
.LC1555:
	.ascii	"CDC Network Control Model (NCM)\000"
.LC1556:
	.ascii	"CDC Network Data\000"
	.space	3
.LC1557:
	.ascii	"CDC NCM\000"
.LC1558:
	.ascii	"in_max_packet_size\000"
	.space	1
.LC1559:
	.ascii	"out_max_packet_size\000"
.LC1560:
	.ascii	"usb_buffer_size\000"
.LC1561:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_con"
	.ascii	"n_gadget.c\000"
	.space	2
.LC1562:
	.ascii	"%s disabled\012\000"
	.space	3
.LC1563:
	.ascii	"%s: error %d\012\000"
	.space	2
.LC1564:
	.ascii	"%s: req_put\012\000"
	.space	3
.LC1565:
	.ascii	"usb_ep_autoconfig for conn_gadget ep_out got %s\012"
	.ascii	"\000"
	.space	3
.LC1566:
	.ascii	"version\000"
.LC1567:
	.ascii	"1.0\000"
.LC1568:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_uac"
	.ascii	"1.c\000"
	.space	1
.LC1569:
	.ascii	"Allocated %d requests\012\000"
	.space	1
.LC1570:
	.ascii	"intf %d, alt %d\012\000"
	.space	3
.LC1571:
	.ascii	"audio req %02x.%02x v%04x i%04x l%d\012\000"
	.space	3
.LC1572:
	.ascii	"USB_DIR_IN | USB_TYPE_CLASS | USB_RECIP_ENDPOINT\000"
	.space	3
.LC1573:
	.ascii	"USB_DIR_OUT | USB_TYPE_CLASS | USB_RECIP_ENDPOINT\000"
	.space	2
.LC1574:
	.ascii	"USB_DIR_IN | USB_TYPE_CLASS | USB_RECIP_INTERFACE\000"
	.space	2
.LC1575:
	.ascii	"USB_DIR_OUT | USB_TYPE_CLASS | USB_RECIP_INTERFACE\000"
	.space	1
.LC1576:
	.ascii	"bRequest 0x%x, w_value 0x%04x, len %d, ep %d\012\000"
	.space	2
.LC1577:
	.ascii	"bRequest 0x%x, w_value 0x%04x, len %d, endp %d, epn"
	.ascii	"um %d\012\000"
	.space	2
.LC1578:
	.ascii	"bRequest 0x%x, w_value 0x%04x, len %d, entity %d\012"
	.ascii	"\000"
	.space	2
.LC1579:
	.ascii	"Copy %d bytes\000"
	.space	2
.LC1580:
	.ascii	"copy_buf == 0\000"
	.space	2
.LC1581:
	.ascii	"Queue capture packet: size %d\000"
	.space	2
.LC1582:
	.ascii	"audio_playback_buf_size %d - copy_buf->actual %d, r"
	.ascii	"eq->actual %d\000"
	.space	3
.LC1583:
	.ascii	"play_buf->actual = %d\000"
	.space	2
.LC1584:
	.ascii	"Microphone Iso-IN Endpoint Control\000"
	.space	1
.LC1585:
	.ascii	"Microphone Sampling Frequency Control\000"
	.space	2
.LC1586:
	.ascii	"Speaker Iso-out Endpoint Control\000"
	.space	3
.LC1587:
	.ascii	"Speaker Sampling Frequency Control\000"
	.space	1
.LC1588:
	.ascii	"Microphone Feature Unit Controls\000"
	.space	3
.LC1589:
	.ascii	"Microphone Volume Control\000"
	.space	2
.LC1590:
	.ascii	"Microphone Mute Control\000"
.LC1591:
	.ascii	"Speaker Function Unit Controls\000"
	.space	1
.LC1592:
	.ascii	"Speaker Volume Control\000"
	.space	1
.LC1593:
	.ascii	"Speaker Mute Control\000"
	.space	3
.LC1594:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/u_uac"
	.ascii	"1.c\000"
	.space	1
.LC1595:
	.ascii	"Enter\000"
	.space	2
.LC1596:
	.ascii	"Initialized PCM playback device: %s\012\000"
	.space	3
.LC1597:
	.ascii	"Return %d\000"
	.space	2
.LC1598:
	.ascii	"frames = %d, count = %d\000"
.LC1599:
	.ascii	"Done. Sent %d frames\000"
	.space	3
.LC1600:
	.ascii	"runtime->frame_bits = %d, count = %d, frames = %d\000"
	.space	2
.LC1601:
	.ascii	"Initialized playback params\000"
.LC1602:
	.ascii	"Initialize hw params\000"
	.space	3
.LC1603:
	.ascii	"capture params: access %x, format %x, channels %d, "
	.ascii	"rate %d\012\000"
.LC1604:
	.ascii	"playback params: access %x, format %x, channels %d,"
	.ascii	" rate %d\012\000"
	.space	3
.LC1605:
	.ascii	"buffer_bytes = (%d,%d) omin=%d omax=%d int=%d empty"
	.ascii	"=%d\012\000"
.LC1606:
	.ascii	"/dev/snd/controlC0\000"
	.space	1
.LC1607:
	.ascii	"/dev/snd/pcmC0D6c\000"
	.space	2
.LC1608:
	.ascii	"/dev/snd/pcmC0D5p\000"
	.space	2
.LC1609:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/u_qc_"
	.ascii	"ether.c\000"
	.space	1
.LC1610:
	.ascii	"using random host_mac ethernet address\012\000"
.LC1611:
	.ascii	"using random dev_mac ethernet address\012\000"
	.space	1
.LC1612:
	.ascii	"gadget\000"
	.space	1
.LC1613:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/u_eth"
	.ascii	"er.c\000"
.LC1614:
	.ascii	"req->length:%d header_len:%u\012skb->len:%d skb->da"
	.ascii	"ta_len:%d\012\000"
	.space	1
.LC1615:
	.ascii	"%s: size: %d\000"
	.space	3
.LC1616:
	.ascii	"android_rndis_qc\000"
	.space	3
.LC1617:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_qc_"
	.ascii	"rndis.c\000"
	.space	1
.LC1618:
	.ascii	"Sent max packet size %d\000"
.LC1619:
	.ascii	"rndis_qc_unbind: free\000"
	.space	2
.LC1620:
	.ascii	"%s: rndis resumed\012\000"
	.space	1
.LC1621:
	.ascii	"%s: rndis suspended\012\000"
	.space	3
.LC1622:
	.ascii	"MaxTransferSize: %d\012\000"
	.space	3
.LC1623:
	.ascii	"dev:%pK. %s Disconnect BAM.\012\000"
	.space	3
.LC1624:
	.ascii	"RNDIS Communications Control\000"
	.space	3
.LC1625:
	.ascii	"RNDIS Ethernet Data\000"
.LC1626:
	.ascii	"RNDIS\000"
	.space	2
.LC1627:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_ecm"
	.ascii	".c\000"
	.space	2
.LC1628:
	.ascii	"CDC Ethernet Control Model (ECM)\000"
	.space	3
.LC1629:
	.ascii	"CDC Ethernet Data\000"
	.space	2
.LC1630:
	.ascii	"CDC ECM\000"
.LC1631:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/u_bam"
	.ascii	"_data.c\000"
	.space	1
.LC1632:
	.ascii	"bam_data is already setup\000"
	.space	2
.LC1633:
	.ascii	"requested %d BAM2BAM ports\000"
	.space	1
.LC1634:
	.ascii	"bam_data_destroy: Freeing ports\012\000"
	.space	3
.LC1635:
	.ascii	"dev:%pK port#%d\012\000"
	.space	3
.LC1636:
	.ascii	"port:%pK portno:%d\012\000"
.LC1637:
	.ascii	"%s: Connect workqueue done\000"
	.space	1
.LC1638:
	.ascii	"%s: Connect workqueue started\000"
	.space	2
.LC1639:
	.ascii	"%s: status: %d\012\000"
.LC1640:
	.ascii	"android_mbim\000"
	.space	3
.LC1641:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mbi"
	.ascii	"m.c\000"
	.space	1
.LC1642:
	.ascii	"Received command %d\000"
.LC1643:
	.ascii	"Exit(%d)\000"
	.space	3
.LC1644:
	.ascii	"Enter(%d)\000"
	.space	2
.LC1645:
	.ascii	"copied %d bytes to user\012\000"
	.space	3
.LC1646:
	.ascii	"cpkt size:%d\012\000"
	.space	2
.LC1647:
	.ascii	"Received request packet\012\000"
	.space	3
.LC1648:
	.ascii	"Requests list is empty. Wait.\012\000"
	.space	1
.LC1649:
	.ascii	"Enter(%d)\012\000"
	.space	1
.LC1650:
	.ascii	"MBIM in configuration %d\000"
	.space	3
.LC1651:
	.ascii	"Activate mbim\012\000"
	.space	1
.LC1652:
	.ascii	"%02x.%02x v%04x i%04x l%u\000"
	.space	2
.LC1653:
	.ascii	"control request: %02x.%02x v%04x i%04x l%d\012\000"
.LC1654:
	.ascii	"USB_CDC_SET_NTB_FORMAT\000"
	.space	1
.LC1655:
	.ascii	"NTB FORMAT: sending %d\012\000"
.LC1656:
	.ascii	"USB_CDC_GET_NTB_FORMAT\000"
	.space	1
.LC1657:
	.ascii	"USB_CDC_SET_NTB_INPUT_SIZE\000"
	.space	1
.LC1658:
	.ascii	"Reply to host INPUT SIZE %d\012\000"
	.space	3
.LC1659:
	.ascii	"USB_CDC_GET_NTB_INPUT_SIZE\000"
	.space	1
.LC1660:
	.ascii	"USB_CDC_GET_NTB_PARAMETERS\000"
	.space	1
.LC1661:
	.ascii	"copied encapsulated_response %d bytes\000"
	.space	2
.LC1662:
	.ascii	"req%02x.%02x v%04x i%04x l%d\012\000"
	.space	2
.LC1663:
	.ascii	"USB_CDC_GET_ENCAPSULATED_RESPONSE\000"
	.space	2
.LC1664:
	.ascii	"w_length > req->length: %d > %d\000"
.LC1665:
	.ascii	"USB_CDC_SEND_ENCAPSULATED_COMMAND\000"
	.space	2
.LC1666:
	.ascii	"USB_CDC_RESET_FUNCTION\000"
	.space	1
.LC1667:
	.ascii	"Wake up read queue\000"
	.space	1
.LC1668:
	.ascii	"Add to cpkt_req_q packet with len = %d\012\000"
.LC1669:
	.ascii	"Set NTB INPUT SIZE %d\012\000"
	.space	1
.LC1670:
	.ascii	"%s: Exit\012\000"
	.space	2
.LC1671:
	.ascii	"notify_count = %d\000"
	.space	2
.LC1672:
	.ascii	"queue request: notify_count = %d\000"
	.space	3
.LC1673:
	.ascii	"notify_response_avaliable: done\000"
.LC1674:
	.ascii	"Notification %02x sent\012\000"
.LC1675:
	.ascii	"No pending notifications\012\000"
	.space	2
.LC1676:
	.ascii	"notify_state: %d\000"
	.space	3
.LC1677:
	.ascii	"Queue empty packet for QBI\000"
	.space	1
.LC1678:
	.ascii	"dev:%pK port_num#%d\012\000"
	.space	3
.LC1679:
	.ascii	"Successful Exit\000"
.LC1680:
	.ascii	"delay ep_queue: notifications queue is busy[%d]\000"
.LC1681:
	.ascii	"dev:%pK portno#%d\012\000"
	.space	1
.LC1682:
	.ascii	"MBIM Control\000"
	.space	3
.LC1683:
	.ascii	"MBIM Data\000"
	.space	2
.LC1684:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_qc_"
	.ascii	"ecm.c\000"
	.space	3
.LC1685:
	.ascii	"ecm_ipa successful created\000"
	.space	1
.LC1686:
	.ascii	"setting ecm_ipa, host_ethaddr=%pM, device_ethaddr=%"
	.ascii	"pM\000"
	.space	2
.LC1687:
	.ascii	"set xport = %d\000"
	.space	1
.LC1688:
	.ascii	"data transport type is %s\000"
	.space	2
.LC1689:
	.ascii	"ecm resumed\012\000"
	.space	3
.LC1690:
	.ascii	"ecm suspended\012\000"
	.space	1
.LC1691:
	.ascii	"dev:%pK. Disconnect BAM.\012\000"
	.space	2
.LC1692:
	.ascii	"ecm bam connected\012\000"
	.space	1
.LC1693:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/rndis"
	.ascii	".c\000"
	.space	2
.LC1694:
	.ascii	"%s: REMOTE_NDIS_KEEPALIVE_MSG\012\000"
	.space	1
.LC1695:
	.ascii	"%03d: %08x %08x %08x %08x\012\000"
	.space	1
.LC1696:
	.ascii	"set OID %08x value, len %d:\012\000"
	.space	3
.LC1697:
	.ascii	"%s: OID_GEN_RCV_ERROR\012\000"
	.space	1
.LC1698:
	.ascii	"%s: OID_GEN_XMIT_ERROR\012\000"
.LC1699:
	.ascii	"%s: OID_GEN_RCV_OK\012\000"
.LC1700:
	.ascii	"%s: OID_GEN_XMIT_OK\012\000"
	.space	3
.LC1701:
	.ascii	"%s: OID_GEN_MEDIA_CONNECT_STATUS\012\000"
	.space	2
.LC1702:
	.ascii	"%s: OID_GEN_LINK_SPEED\012\000"
.LC1703:
	.ascii	"query OID %08x value, len %d:\012\000"
	.space	1
.LC1704:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_rnd"
	.ascii	"is.c\000"
.LC1705:
	.ascii	"USB accessory\000"
	.space	2
.LC1706:
	.ascii	"usb_accessory\000"
	.space	2
.LC1707:
	.ascii	"Android Accessory Interface\000"
.LC1708:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mtp"
	.ascii	".c\000"
	.space	2
.LC1709:
	.ascii	"MTP\000"
.LC1710:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_mid"
	.ascii	"i.c\000"
	.space	1
.LC1711:
	.ascii	"MIDI function\000"
	.space	2
.LC1712:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_cci"
	.ascii	"d.c\000"
	.space	1
.LC1713:
	.ascii	"ccid_ctrl\000"
	.space	2
.LC1714:
	.ascii	"ccid_bulk\000"
	.space	2
.LC1715:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_adb"
	.ascii	".c\000"
	.space	2
.LC1716:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_acm"
	.ascii	".c\000"
	.space	2
.LC1717:
	.ascii	"CDC Abstract Control Model (ACM)\000"
	.space	3
.LC1718:
	.ascii	"CDC ACM Data\000"
	.space	3
.LC1719:
	.ascii	"CDC Serial\000"
	.space	1
.LC1720:
	.ascii	"dun\000"
.LC1721:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/u_dat"
	.ascii	"a_hsuart.c\000"
	.space	2
.LC1722:
	.ascii	"%s: event type: %s \000"
.LC1723:
	.ascii	"%s: ep:%s head:%pK num:%d cb:%pK\000"
	.space	3
.LC1724:
	.ascii	"SMUX_DUN_DATA_HSUART\000"
	.space	3
.LC1725:
	.ascii	"SMUX_RMNET_DATA_HSUART\000"
	.space	1
.LC1726:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/u_ctr"
	.ascii	"l_hsuart.c\000"
	.space	2
.LC1727:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/u_dat"
	.ascii	"a_hsic.c\000"
.LC1728:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/u_ctr"
	.ascii	"l_hsic.c\000"
.LC1729:
	.ascii	"rmnet_ctrl\000"
	.space	1
.LC1730:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/u_rmn"
	.ascii	"et_ctrl_qti.c\000"
	.space	3
.LC1731:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/u_rmn"
	.ascii	"et_ctrl_smd.c\000"
	.space	3
.LC1732:
	.ascii	"DATA40_CNTL\000"
.LC1733:
	.ascii	"DATA39_CNTL\000"
.LC1734:
	.ascii	"DATA38_CNTL\000"
.LC1735:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/u_bam"
	.ascii	".c\000"
	.space	2
.LC1736:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/u_smd"
	.ascii	".c\000"
	.space	2
.LC1737:
	.ascii	"DS\000"
	.space	1
.LC1738:
	.ascii	"UNUSED\000"
	.space	1
.LC1739:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/u_sdi"
	.ascii	"o.c\000"
	.space	1
.LC1740:
	.ascii	"%s: USB is already open, start io\012\000"
	.space	1
.LC1741:
	.ascii	"%s: SDIO data:%s ctrl:%d are open\012\000"
	.space	1
.LC1742:
	.ascii	"%s: read_avail:%d port:%pK port#%d\012\000"
.LC1743:
	.ascii	"SDIO_DUN\000"
	.space	3
.LC1744:
	.ascii	"SDIO_NMEA\000"
	.space	2
.LC1745:
	.ascii	"cdrom\000"
	.space	2
.LC1746:
	.ascii	"file\000"
	.space	3
.LC1747:
	.ascii	"nofua\000"
	.space	2
.LC1748:
	.ascii	"ro\000"
	.space	1
.LC1749:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/stora"
	.ascii	"ge_common.c\000"
	.space	1
.LC1750:
	.ascii	"entity STRING(%02x); ret = %d\012\000"
	.space	1
.LC1751:
	.ascii	"entity ENDPOINT(%02x); ret = %d\012\000"
	.space	3
.LC1752:
	.ascii	"functionfs\000"
	.space	1
.LC1753:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_aud"
	.ascii	"io_source.c\000"
	.space	1
.LC1754:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_rmn"
	.ascii	"et.c\000"
.LC1755:
	.ascii	"RmNet\000"
	.space	2
.LC1756:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_rmn"
	.ascii	"et_smd_sdio.c\000"
	.space	3
.LC1757:
	.ascii	"rmnet_mux_ctrl\000"
	.space	1
.LC1758:
	.ascii	"transport\000"
	.space	2
.LC1759:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_rmn"
	.ascii	"et_sdio.c\000"
	.space	3
.LC1760:
	.ascii	"rmnet_sdio_sts_callback: id: %d\012\000"
	.space	3
.LC1761:
	.ascii	"unable to allocate memory for QMI resp\012\000"
.LC1762:
	.ascii	"USB disconnected\012\000"
	.space	2
.LC1763:
	.ascii	"QMI RmNet\000"
	.space	2
.LC1764:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_rmn"
	.ascii	"et_smd.c\000"
.LC1765:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_qds"
	.ascii	"s.c\000"
	.space	1
.LC1766:
	.ascii	"QDSS DATA\000"
	.space	2
.LC1767:
	.ascii	"QDSS CTRL\000"
	.space	2
.LC1768:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/u_qds"
	.ascii	"s.c\000"
	.space	1
.LC1769:
	.ascii	"/home/Jprimero15/hlte/lolz/drivers/usb/gadget/f_dia"
	.ascii	"g.c\000"
	.space	1
.LC1770:
	.ascii	"suspended\000"
	.space	2
.LC1771:
	.ascii	"HNP on another port\012\000"
	.space	3
.LC1772:
	.ascii	"HNP available\012\000"
	.section	__modver,"a",%progbits
	.align	2
	.type	__modver_attr, %object
	.size	__modver_attr, 4
__modver_attr:
	.word	___modver_attr
	.section	__param,"a",%progbits
	.align	2
	.type	__param_audio_capture_buf_size, %object
	.size	__param_audio_capture_buf_size, 16
__param_audio_capture_buf_size:
	.word	__param_str_audio_capture_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	audio_capture_buf_size
	.type	__param_req_capture_count, %object
	.size	__param_req_capture_count, 16
__param_req_capture_count:
	.word	__param_str_req_capture_count
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_capture_count
	.type	__param_req_capture_buf_size, %object
	.size	__param_req_capture_buf_size, 16
__param_req_capture_buf_size:
	.word	__param_str_req_capture_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_capture_buf_size
	.type	__param_audio_playback_buf_size, %object
	.size	__param_audio_playback_buf_size, 16
__param_audio_playback_buf_size:
	.word	__param_str_audio_playback_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	audio_playback_buf_size
	.type	__param_req_playback_count, %object
	.size	__param_req_playback_count, 16
__param_req_playback_count:
	.word	__param_str_req_playback_count
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_playback_count
	.type	__param_req_playback_buf_size, %object
	.size	__param_req_playback_buf_size, 16
__param_req_playback_buf_size:
	.word	__param_str_req_playback_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_playback_buf_size
	.type	__param_fn_cntl, %object
	.size	__param_fn_cntl, 16
__param_fn_cntl:
	.word	__param_str_fn_cntl
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_cntl
	.type	__param_fn_cap, %object
	.size	__param_fn_cap, 16
__param_fn_cap:
	.word	__param_str_fn_cap
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_cap
	.type	__param_fn_play, %object
	.size	__param_fn_play, 16
__param_fn_play:
	.word	__param_str_fn_play
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_play
	.type	__param_qc_host_addr, %object
	.size	__param_qc_host_addr, 16
__param_qc_host_addr:
	.word	__param_str_qc_host_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	qc_host_addr
	.type	__param_qc_dev_addr, %object
	.size	__param_qc_dev_addr, 16
__param_qc_dev_addr:
	.word	__param_str_qc_dev_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	qc_dev_addr
	.type	__param_host_addr, %object
	.size	__param_host_addr, 16
__param_host_addr:
	.word	__param_str_host_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	host_addr
	.type	__param_dev_addr, %object
	.size	__param_dev_addr, 16
__param_dev_addr:
	.word	__param_str_dev_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	dev_addr
	.type	__param_qmult, %object
	.size	__param_qmult, 16
__param_qmult:
	.word	__param_str_qmult
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	qmult
	.type	__param_rndis_ul_max_xfer_size_rcvd, %object
	.size	__param_rndis_ul_max_xfer_size_rcvd, 16
__param_rndis_ul_max_xfer_size_rcvd:
	.word	__param_str_rndis_ul_max_xfer_size_rcvd
	.word	param_ops_int
	.short	292
	.short	-1
	.word	rndis_ul_max_xfer_size_rcvd
	.type	__param_rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	__param_rndis_ul_max_pkt_per_xfer_rcvd, 16
__param_rndis_ul_max_pkt_per_xfer_rcvd:
	.word	__param_str_rndis_ul_max_pkt_per_xfer_rcvd
	.word	param_ops_int
	.short	292
	.short	-1
	.word	rndis_ul_max_pkt_per_xfer_rcvd
	.type	__param_rndis_ul_max_pkt_per_xfer, %object
	.size	__param_rndis_ul_max_pkt_per_xfer, 16
__param_rndis_ul_max_pkt_per_xfer:
	.word	__param_str_rndis_ul_max_pkt_per_xfer
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	rndis_ul_max_pkt_per_xfer
	.type	__param_rndis_dl_max_pkt_per_xfer, %object
	.size	__param_rndis_dl_max_pkt_per_xfer, 16
__param_rndis_dl_max_pkt_per_xfer:
	.word	__param_str_rndis_dl_max_pkt_per_xfer
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	rndis_dl_max_pkt_per_xfer
	.type	__param_mtp_tx_reqs, %object
	.size	__param_mtp_tx_reqs, 16
__param_mtp_tx_reqs:
	.word	__param_str_mtp_tx_reqs
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_tx_reqs
	.type	__param_mtp_tx_req_len, %object
	.size	__param_mtp_tx_req_len, 16
__param_mtp_tx_req_len:
	.word	__param_str_mtp_tx_req_len
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_tx_req_len
	.type	__param_mtp_rx_req_len, %object
	.size	__param_mtp_rx_req_len, 16
__param_mtp_rx_req_len:
	.word	__param_str_mtp_rx_req_len
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_rx_req_len
	.type	__param_ghsuart_data_tx_intr_thld, %object
	.size	__param_ghsuart_data_tx_intr_thld, 16
__param_ghsuart_data_tx_intr_thld:
	.word	__param_str_ghsuart_data_tx_intr_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_tx_intr_thld
	.type	__param_ghsuart_data_rx_req_size, %object
	.size	__param_ghsuart_data_rx_req_size, 16
__param_ghsuart_data_rx_req_size:
	.word	__param_str_ghsuart_data_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rx_req_size
	.type	__param_ghsuart_data_serial_rx_q_size, %object
	.size	__param_ghsuart_data_serial_rx_q_size, 16
__param_ghsuart_data_serial_rx_q_size:
	.word	__param_str_ghsuart_data_serial_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_serial_rx_q_size
	.type	__param_ghsuart_data_serial_tx_q_size, %object
	.size	__param_ghsuart_data_serial_tx_q_size, 16
__param_ghsuart_data_serial_tx_q_size:
	.word	__param_str_ghsuart_data_serial_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_serial_tx_q_size
	.type	__param_ghsuart_data_rmnet_rx_q_size, %object
	.size	__param_ghsuart_data_rmnet_rx_q_size, 16
__param_ghsuart_data_rmnet_rx_q_size:
	.word	__param_str_ghsuart_data_rmnet_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rmnet_rx_q_size
	.type	__param_ghsuart_data_rmnet_tx_q_size, %object
	.size	__param_ghsuart_data_rmnet_tx_q_size, 16
__param_ghsuart_data_rmnet_tx_q_size:
	.word	__param_str_ghsuart_data_rmnet_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rmnet_tx_q_size
	.type	__param_record_timestamp, %object
	.size	__param_record_timestamp, 16
__param_record_timestamp:
	.word	__param_str_record_timestamp
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	record_timestamp
	.type	__param_ghsic_data_pend_limit_with_bridge, %object
	.size	__param_ghsic_data_pend_limit_with_bridge, 16
__param_ghsic_data_pend_limit_with_bridge:
	.word	__param_str_ghsic_data_pend_limit_with_bridge
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_pend_limit_with_bridge
	.type	__param_ghsic_data_fctrl_dis_thld, %object
	.size	__param_ghsic_data_fctrl_dis_thld, 16
__param_ghsic_data_fctrl_dis_thld:
	.word	__param_str_ghsic_data_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_dis_thld
	.type	__param_ghsic_data_fctrl_en_thld, %object
	.size	__param_ghsic_data_fctrl_en_thld, 16
__param_ghsic_data_fctrl_en_thld:
	.word	__param_str_ghsic_data_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_en_thld
	.type	__param_ghsic_data_fctrl_support, %object
	.size	__param_ghsic_data_fctrl_support, 16
__param_ghsic_data_fctrl_support:
	.word	__param_str_ghsic_data_fctrl_support
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_support
	.type	__param_ghsic_data_tx_intr_thld, %object
	.size	__param_ghsic_data_tx_intr_thld, 16
__param_ghsic_data_tx_intr_thld:
	.word	__param_str_ghsic_data_tx_intr_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_tx_intr_thld
	.type	__param_ghsic_data_rx_req_size, %object
	.size	__param_ghsic_data_rx_req_size, 16
__param_ghsic_data_rx_req_size:
	.word	__param_str_ghsic_data_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rx_req_size
	.type	__param_ghsic_data_serial_rx_q_size, %object
	.size	__param_ghsic_data_serial_rx_q_size, 16
__param_ghsic_data_serial_rx_q_size:
	.word	__param_str_ghsic_data_serial_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_serial_rx_q_size
	.type	__param_ghsic_data_serial_tx_q_size, %object
	.size	__param_ghsic_data_serial_tx_q_size, 16
__param_ghsic_data_serial_tx_q_size:
	.word	__param_str_ghsic_data_serial_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_serial_tx_q_size
	.type	__param_ghsic_data_rmnet_rx_q_size, %object
	.size	__param_ghsic_data_rmnet_rx_q_size, 16
__param_ghsic_data_rmnet_rx_q_size:
	.word	__param_str_ghsic_data_rmnet_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rmnet_rx_q_size
	.type	__param_ghsic_data_rmnet_tx_q_size, %object
	.size	__param_ghsic_data_rmnet_tx_q_size, 16
__param_ghsic_data_rmnet_tx_q_size:
	.word	__param_str_ghsic_data_rmnet_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rmnet_tx_q_size
	.type	__param_dl_intr_threshold, %object
	.size	__param_dl_intr_threshold, 16
__param_dl_intr_threshold:
	.word	__param_str_dl_intr_threshold
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	dl_intr_threshold
	.type	__param_bam_mux_rx_req_size, %object
	.size	__param_bam_mux_rx_req_size, 16
__param_bam_mux_rx_req_size:
	.word	__param_str_bam_mux_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_req_size
	.type	__param_bam_mux_rx_q_size, %object
	.size	__param_bam_mux_rx_q_size, 16
__param_bam_mux_rx_q_size:
	.word	__param_str_bam_mux_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_q_size
	.type	__param_bam_mux_tx_q_size, %object
	.size	__param_bam_mux_tx_q_size, 16
__param_bam_mux_tx_q_size:
	.word	__param_str_bam_mux_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_tx_q_size
	.type	__param_bam_mux_rx_fctrl_dis_thld, %object
	.size	__param_bam_mux_rx_fctrl_dis_thld, 16
__param_bam_mux_rx_fctrl_dis_thld:
	.word	__param_str_bam_mux_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_dis_thld
	.type	__param_bam_mux_rx_fctrl_support, %object
	.size	__param_bam_mux_rx_fctrl_support, 16
__param_bam_mux_rx_fctrl_support:
	.word	__param_str_bam_mux_rx_fctrl_support
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_support
	.type	__param_bam_mux_rx_fctrl_en_thld, %object
	.size	__param_bam_mux_rx_fctrl_en_thld, 16
__param_bam_mux_rx_fctrl_en_thld:
	.word	__param_str_bam_mux_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_en_thld
	.type	__param_bam_mux_tx_pkt_drop_thld, %object
	.size	__param_bam_mux_tx_pkt_drop_thld, 16
__param_bam_mux_tx_pkt_drop_thld:
	.word	__param_str_bam_mux_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_tx_pkt_drop_thld
	.type	__param_bam_pending_limit, %object
	.size	__param_bam_pending_limit, 16
__param_bam_pending_limit:
	.word	__param_str_bam_pending_limit
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_pending_limit
	.type	__param_mux_sdio_rx_fctrl_dis_thld, %object
	.size	__param_mux_sdio_rx_fctrl_dis_thld, 16
__param_mux_sdio_rx_fctrl_dis_thld:
	.word	__param_str_mux_sdio_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_rx_fctrl_dis_thld
	.type	__param_mux_sdio_rx_fctrl_en_thld, %object
	.size	__param_mux_sdio_rx_fctrl_en_thld, 16
__param_mux_sdio_rx_fctrl_en_thld:
	.word	__param_str_mux_sdio_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_rx_fctrl_en_thld
	.type	__param_mux_sdio_tx_pkt_drop_thld, %object
	.size	__param_mux_sdio_tx_pkt_drop_thld, 16
__param_mux_sdio_tx_pkt_drop_thld:
	.word	__param_str_mux_sdio_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_tx_pkt_drop_thld
	.type	__param_rmnet_mux_smd_data_ch, %object
	.size	__param_rmnet_mux_smd_data_ch, 16
__param_rmnet_mux_smd_data_ch:
	.word	__param_str_rmnet_mux_smd_data_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_mux_smd_data_ch
	.type	__param_rmnet_mux_sdio_data_ch, %object
	.size	__param_rmnet_mux_sdio_data_ch, 16
__param_rmnet_mux_sdio_data_ch:
	.word	__param_str_rmnet_mux_sdio_data_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_mux_sdio_data_ch
	.type	__param_rmnet_mux_sdio_ctl_ch, %object
	.size	__param_rmnet_mux_sdio_ctl_ch, 16
__param_rmnet_mux_sdio_ctl_ch:
	.word	__param_str_rmnet_mux_sdio_ctl_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_mux_sdio_ctl_ch
	.type	__param_sdio_rx_fctrl_dis_thld, %object
	.size	__param_sdio_rx_fctrl_dis_thld, 16
__param_sdio_rx_fctrl_dis_thld:
	.word	__param_str_sdio_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_rx_fctrl_dis_thld
	.type	__param_sdio_rx_fctrl_en_thld, %object
	.size	__param_sdio_rx_fctrl_en_thld, 16
__param_sdio_rx_fctrl_en_thld:
	.word	__param_str_sdio_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_rx_fctrl_en_thld
	.type	__param_sdio_tx_pkt_drop_thld, %object
	.size	__param_sdio_tx_pkt_drop_thld, 16
__param_sdio_tx_pkt_drop_thld:
	.word	__param_str_sdio_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_tx_pkt_drop_thld
	.type	__param_rmnet_sdio_data_ch, %object
	.size	__param_rmnet_sdio_data_ch, 16
__param_rmnet_sdio_data_ch:
	.word	__param_str_rmnet_sdio_data_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_sdio_data_ch
	.type	__param_rmnet_sdio_ctl_ch, %object
	.size	__param_rmnet_sdio_ctl_ch, 16
__param_rmnet_sdio_ctl_ch:
	.word	__param_str_rmnet_sdio_ctl_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_sdio_ctl_ch
	.type	__param_rmnet_data_ch, %object
	.size	__param_rmnet_data_ch, 16
__param_rmnet_data_ch:
	.word	__param_str_rmnet_data_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_data_ch
	.type	__param_rmnet_ctl_ch, %object
	.size	__param_rmnet_ctl_ch, 16
__param_rmnet_ctl_ch:
	.word	__param_str_rmnet_ctl_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_ctl_ch
	.type	__param_iSerialNumber, %object
	.size	__param_iSerialNumber, 16
__param_iSerialNumber:
	.word	__param_str_iSerialNumber
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iSerialNumber
	.type	__param_iProduct, %object
	.size	__param_iProduct, 16
__param_iProduct:
	.word	__param_str_iProduct
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iProduct
	.type	__param_iManufacturer, %object
	.size	__param_iManufacturer, 16
__param_iManufacturer:
	.word	__param_str_iManufacturer
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iManufacturer
	.type	__param_bcdDevice, %object
	.size	__param_bcdDevice, 16
__param_bcdDevice:
	.word	__param_str_bcdDevice
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	bcdDevice
	.type	__param_idProduct, %object
	.size	__param_idProduct, 16
__param_idProduct:
	.word	__param_str_idProduct
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	idProduct
	.type	__param_idVendor, %object
	.size	__param_idVendor, 16
__param_idVendor:
	.word	__param_str_idVendor
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	idVendor
	.section	__verbose,"aw",%progbits
	.align	3
	.set	.LANCHOR2,. + 0
	.set	.LANCHOR4,. + 8184
	.set	.LANCHOR8,. + 16368
	.type	descriptor.25159, %object
	.size	descriptor.25159, 24
descriptor.25159:
	.word	.LC1125
	.word	__func__.25160
	.word	.LC102
	.word	.LC5
	.byte	109
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25359, %object
	.size	descriptor.25359, 24
descriptor.25359:
	.word	.LC1125
	.word	__func__.25360
	.word	.LC102
	.word	.LC6
	.byte	134
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25510, %object
	.size	descriptor.25510, 24
descriptor.25510:
	.word	.LC1125
	.word	__func__.25511
	.word	.LC102
	.word	.LC7
	.byte	197
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25495, %object
	.size	descriptor.25495, 24
descriptor.25495:
	.word	.LC1125
	.word	__func__.25496
	.word	.LC102
	.word	.LC8
	.byte	172
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.26062, %object
	.size	descriptor.26062, 24
descriptor.26062:
	.word	.LC1125
	.word	__func__.26063
	.word	.LC1769
	.word	.LC9
	.byte	27
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52795, %object
	.size	descriptor.52795, 24
descriptor.52795:
	.word	.LC1125
	.word	__func__.52796
	.word	.LC1716
	.word	.LC10
	.byte	204
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52797, %object
	.size	descriptor.52797, 24
descriptor.52797:
	.word	.LC1125
	.word	__func__.52796
	.word	.LC1716
	.word	.LC11
	.byte	211
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53875, %object
	.size	descriptor.53875, 24
descriptor.53875:
	.word	.LC1125
	.word	__func__.53876
	.word	.LC1710
	.word	.LC12
	.byte	138
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56398, %object
	.size	descriptor.56398, 24
descriptor.56398:
	.word	.LC1125
	.word	__func__.56399
	.word	.LC1704
	.word	.LC13
	.byte	3
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56401, %object
	.size	descriptor.56401, 24
descriptor.56401:
	.word	.LC1125
	.word	__func__.56399
	.word	.LC1704
	.word	.LC14
	.byte	17
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56385, %object
	.size	descriptor.56385, 24
descriptor.56385:
	.word	.LC1125
	.word	__func__.56386
	.word	.LC1704
	.word	.LC15
	.byte	231
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58025, %object
	.size	descriptor.58025, 24
descriptor.58025:
	.word	.LC1125
	.word	__func__.58026
	.word	.LC1627
	.word	.LC16
	.byte	230
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58030, %object
	.size	descriptor.58030, 24
descriptor.58030:
	.word	.LC1125
	.word	__func__.58026
	.word	.LC1627
	.word	.LC18
	.byte	3
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58029, %object
	.size	descriptor.58029, 24
descriptor.58029:
	.word	.LC1125
	.word	__func__.58026
	.word	.LC1627
	.word	.LC17
	.byte	252
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58010, %object
	.size	descriptor.58010, 24
descriptor.58010:
	.word	.LC1125
	.word	__func__.58011
	.word	.LC1627
	.word	.LC22
	.byte	202
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57989, %object
	.size	descriptor.57989, 24
descriptor.57989:
	.word	.LC1125
	.word	__func__.57990
	.word	.LC1627
	.word	.LC23
	.byte	145
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57993, %object
	.size	descriptor.57993, 24
descriptor.57993:
	.word	.LC1125
	.word	__func__.57990
	.word	.LC1627
	.word	.LC24
	.byte	160
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57994, %object
	.size	descriptor.57994, 24
descriptor.57994:
	.word	.LC1125
	.word	__func__.57990
	.word	.LC1627
	.word	.LC25
	.byte	171
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63427, %object
	.size	descriptor.63427, 24
descriptor.63427:
	.word	.LC1125
	.word	__func__.63428
	.word	.LC1554
	.word	.LC26
	.byte	100
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63430, %object
	.size	descriptor.63430, 24
descriptor.63430:
	.word	.LC1125
	.word	__func__.63428
	.word	.LC1554
	.word	.LC27
	.byte	107
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63417, %object
	.size	descriptor.63417, 24
descriptor.63417:
	.word	.LC1125
	.word	__func__.63418
	.word	.LC1554
	.word	.LC22
	.byte	82
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63395, %object
	.size	descriptor.63395, 24
descriptor.63395:
	.word	.LC1125
	.word	__func__.63396
	.word	.LC1554
	.word	.LC23
	.byte	8
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63399, %object
	.size	descriptor.63399, 24
descriptor.63399:
	.word	.LC1125
	.word	__func__.63396
	.word	.LC1554
	.word	.LC24
	.byte	23
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63400, %object
	.size	descriptor.63400, 24
descriptor.63400:
	.word	.LC1125
	.word	__func__.63396
	.word	.LC1554
	.word	.LC25
	.byte	41
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25246, %object
	.size	descriptor.25246, 24
descriptor.25246:
	.word	.LC1125
	.word	__func__.25247
	.word	.LC102
	.word	.LC28
	.byte	97
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25251, %object
	.size	descriptor.25251, 24
descriptor.25251:
	.word	.LC1125
	.word	__func__.25247
	.word	.LC102
	.word	.LC29
	.byte	103
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38254, %object
	.size	descriptor.38254, 24
descriptor.38254:
	.word	.LC1125
	.word	__func__.38255
	.word	.LC1756
	.word	.LC31
	.byte	90
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38263, %object
	.size	descriptor.38263, 24
descriptor.38263:
	.word	.LC1125
	.word	__func__.38255
	.word	.LC1756
	.word	.LC17
	.byte	135
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57147, %object
	.size	descriptor.57147, 24
descriptor.57147:
	.word	.LC1125
	.word	__func__.57148
	.word	.LC1684
	.word	.LC16
	.byte	53
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57152, %object
	.size	descriptor.57152, 24
descriptor.57152:
	.word	.LC1125
	.word	__func__.57148
	.word	.LC1684
	.word	.LC18
	.byte	82
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57151, %object
	.size	descriptor.57151, 24
descriptor.57151:
	.word	.LC1125
	.word	__func__.57148
	.word	.LC1684
	.word	.LC17
	.byte	75
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58201, %object
	.size	descriptor.58201, 24
descriptor.58201:
	.word	.LC1125
	.word	__func__.58195
	.word	.LC1617
	.word	.LC14
	.byte	62
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63458, %object
	.size	descriptor.63458, 24
descriptor.63458:
	.word	.LC1125
	.word	__func__.63459
	.word	.LC1554
	.word	.LC16
	.byte	187
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63471, %object
	.size	descriptor.63471, 24
descriptor.63471:
	.word	.LC1125
	.word	__func__.63459
	.word	.LC1554
	.word	.LC43
	.byte	7
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63474, %object
	.size	descriptor.63474, 24
descriptor.63474:
	.word	.LC1125
	.word	__func__.63459
	.word	.LC1554
	.word	.LC44
	.byte	11
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63482, %object
	.size	descriptor.63482, 24
descriptor.63482:
	.word	.LC1125
	.word	__func__.63459
	.word	.LC1554
	.word	.LC45
	.byte	44
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63485, %object
	.size	descriptor.63485, 24
descriptor.63485:
	.word	.LC1125
	.word	__func__.63459
	.word	.LC1554
	.word	.LC46
	.byte	49
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63490, %object
	.size	descriptor.63490, 24
descriptor.63490:
	.word	.LC1125
	.word	__func__.63459
	.word	.LC1554
	.word	.LC17
	.byte	96
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63491, %object
	.size	descriptor.63491, 24
descriptor.63491:
	.word	.LC1125
	.word	__func__.63459
	.word	.LC1554
	.word	.LC48
	.byte	103
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46072, %object
	.size	descriptor.46072, 24
descriptor.46072:
	.word	.LC1125
	.word	__func__.46073
	.word	.LC89
	.word	.LC97
	.byte	41
	.byte	9
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46074, %object
	.size	descriptor.46074, 24
descriptor.46074:
	.word	.LC1125
	.word	__func__.46073
	.word	.LC89
	.word	.LC98
	.byte	52
	.byte	9
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46075, %object
	.size	descriptor.46075, 24
descriptor.46075:
	.word	.LC1125
	.word	__func__.46073
	.word	.LC89
	.word	.LC99
	.byte	71
	.byte	9
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30902, %object
	.size	descriptor.30902, 24
descriptor.30902:
	.word	.LC1125
	.word	__func__.30903
	.word	.LC1765
	.word	.LC111
	.byte	209
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30890, %object
	.size	descriptor.30890, 24
descriptor.30890:
	.word	.LC1125
	.word	__func__.30891
	.word	.LC1765
	.word	.LC112
	.byte	175
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.41002, %object
	.size	descriptor.41002, 24
descriptor.41002:
	.word	.LC1125
	.word	__func__.41003
	.word	.LC1753
	.word	.LC113
	.byte	69
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48604, %object
	.size	descriptor.48604, 24
descriptor.48604:
	.word	.LC1125
	.word	__func__.48600
	.word	.LC1736
	.word	.LC115
	.byte	181
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49312, %object
	.size	descriptor.49312, 24
descriptor.49312:
	.word	.LC1125
	.word	__func__.49311
	.word	.LC1735
	.word	.LC118
	.byte	97
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49319, %object
	.size	descriptor.49319, 24
descriptor.49319:
	.word	.LC1125
	.word	__func__.49318
	.word	.LC1735
	.word	.LC118
	.byte	117
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49424, %object
	.size	descriptor.49424, 24
descriptor.49424:
	.word	.LC1125
	.word	__func__.49425
	.word	.LC1735
	.word	.LC120
	.byte	169
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49269, %object
	.size	descriptor.49269, 24
descriptor.49269:
	.word	.LC1125
	.word	__func__.49270
	.word	.LC1735
	.word	.LC121
	.byte	244
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49262, %object
	.size	descriptor.49262, 24
descriptor.49262:
	.word	.LC1125
	.word	__func__.49263
	.word	.LC1735
	.word	.LC121
	.byte	237
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50058, %object
	.size	descriptor.50058, 24
descriptor.50058:
	.word	.LC1125
	.word	__func__.50059
	.word	.LC1730
	.word	.LC122
	.byte	230
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50973, %object
	.size	descriptor.50973, 24
descriptor.50973:
	.word	.LC1125
	.word	__func__.50972
	.word	.LC1728
	.word	.LC124
	.byte	130
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51036, %object
	.size	descriptor.51036, 24
descriptor.51036:
	.word	.LC1125
	.word	__func__.51037
	.word	.LC1728
	.word	.LC125
	.byte	70
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51984, %object
	.size	descriptor.51984, 24
descriptor.51984:
	.word	.LC1125
	.word	__func__.51983
	.word	.LC1726
	.word	.LC124
	.byte	183
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57493, %object
	.size	descriptor.57493, 24
descriptor.57493:
	.word	.LC1125
	.word	__func__.57491
	.word	.LC1641
	.word	.LC1669
	.byte	233
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57787, %object
	.size	descriptor.57787, 24
descriptor.57787:
	.word	.LC1125
	.word	__func__.57788
	.word	.LC1631
	.word	.LC118
	.byte	128
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57794, %object
	.size	descriptor.57794, 24
descriptor.57794:
	.word	.LC1125
	.word	__func__.57795
	.word	.LC1631
	.word	.LC118
	.byte	142
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57766, %object
	.size	descriptor.57766, 24
descriptor.57766:
	.word	.LC1125
	.word	__func__.57767
	.word	.LC1631
	.word	.LC1639
	.byte	89
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57759, %object
	.size	descriptor.57759, 24
descriptor.57759:
	.word	.LC1125
	.word	__func__.57760
	.word	.LC1631
	.word	.LC1639
	.byte	81
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62405, %object
	.size	descriptor.62405, 24
descriptor.62405:
	.word	.LC1125
	.word	__func__.62406
	.word	.LC1568
	.word	.LC1575
	.byte	74
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62258, %object
	.size	descriptor.62258, 24
descriptor.62258:
	.word	.LC1125
	.word	__func__.62259
	.word	.LC1568
	.word	.LC1578
	.byte	137
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62409, %object
	.size	descriptor.62409, 24
descriptor.62409:
	.word	.LC1125
	.word	__func__.62406
	.word	.LC1568
	.word	.LC1574
	.byte	79
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62289, %object
	.size	descriptor.62289, 24
descriptor.62289:
	.word	.LC1125
	.word	__func__.62290
	.word	.LC1568
	.word	.LC1578
	.byte	174
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62411, %object
	.size	descriptor.62411, 24
descriptor.62411:
	.word	.LC1125
	.word	__func__.62406
	.word	.LC1568
	.word	.LC1573
	.byte	84
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62327, %object
	.size	descriptor.62327, 24
descriptor.62327:
	.word	.LC1125
	.word	__func__.62328
	.word	.LC1568
	.word	.LC1577
	.byte	228
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62413, %object
	.size	descriptor.62413, 24
descriptor.62413:
	.word	.LC1125
	.word	__func__.62406
	.word	.LC1568
	.word	.LC1572
	.byte	89
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62369, %object
	.size	descriptor.62369, 24
descriptor.62369:
	.word	.LC1125
	.word	__func__.62370
	.word	.LC1568
	.word	.LC1576
	.byte	26
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62415, %object
	.size	descriptor.62415, 24
descriptor.62415:
	.word	.LC1125
	.word	__func__.62406
	.word	.LC1568
	.word	.LC1571
	.byte	104
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.64992, %object
	.size	descriptor.64992, 24
descriptor.64992:
	.word	.LC1125
	.word	__func__.64993
	.word	.LC895
	.word	.LC1500
	.byte	133
	.byte	13
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.64622, %object
	.size	descriptor.64622, 24
descriptor.64622:
	.word	.LC1125
	.word	__func__.64621
	.word	.LC895
	.word	.LC1520
	.byte	6
	.byte	11
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.64606, %object
	.size	descriptor.64606, 24
descriptor.64606:
	.word	.LC1125
	.word	__func__.64607
	.word	.LC895
	.word	.LC1521
	.byte	228
	.byte	10
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53398, %object
	.size	descriptor.53398, 24
descriptor.53398:
	.word	.LC1125
	.word	__func__.53399
	.word	.LC1712
	.word	.LC152
	.byte	91
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38988, %object
	.size	descriptor.38988, 24
descriptor.38988:
	.word	.LC1125
	.word	__func__.38989
	.word	.LC1754
	.word	.LC153
	.byte	222
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38990, %object
	.size	descriptor.38990, 24
descriptor.38990:
	.word	.LC1125
	.word	__func__.38989
	.word	.LC1754
	.word	.LC154
	.byte	225
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.39004, %object
	.size	descriptor.39004, 24
descriptor.39004:
	.word	.LC1125
	.word	__func__.38989
	.word	.LC1754
	.word	.LC17
	.byte	27
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38956, %object
	.size	descriptor.38956, 24
descriptor.38956:
	.word	.LC1125
	.word	__func__.38957
	.word	.LC1754
	.word	.LC157
	.byte	153
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38969, %object
	.size	descriptor.38969, 24
descriptor.38969:
	.word	.LC1125
	.word	__func__.38957
	.word	.LC1754
	.word	.LC159
	.byte	179
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38975, %object
	.size	descriptor.38975, 24
descriptor.38975:
	.word	.LC1125
	.word	__func__.38957
	.word	.LC1754
	.word	.LC161
	.byte	204
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57562, %object
	.size	descriptor.57562, 24
descriptor.57562:
	.word	.LC1125
	.word	__func__.57563
	.word	.LC1641
	.word	.LC1652
	.byte	253
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38823, %object
	.size	descriptor.38823, 24
descriptor.38823:
	.word	.LC1125
	.word	__func__.38824
	.word	.LC1754
	.word	.LC164
	.byte	73
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47306, %object
	.size	descriptor.47306, 24
descriptor.47306:
	.word	.LC1125
	.word	__func__.47307
	.word	.LC680
	.word	.LC166
	.byte	1
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.32029, %object
	.size	descriptor.32029, 24
descriptor.32029:
	.word	.LC1125
	.word	__func__.32030
	.word	.LC1764
	.word	.LC167
	.byte	170
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.37349, %object
	.size	descriptor.37349, 24
descriptor.37349:
	.word	.LC1125
	.word	__func__.37350
	.word	.LC1759
	.word	.LC17
	.byte	91
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48291, %object
	.size	descriptor.48291, 24
descriptor.48291:
	.word	.LC1125
	.word	__func__.48292
	.word	.LC1739
	.word	.LC170
	.byte	159
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48300, %object
	.size	descriptor.48300, 24
descriptor.48300:
	.word	.LC1125
	.word	__func__.48292
	.word	.LC1739
	.word	.LC172
	.byte	182
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48367, %object
	.size	descriptor.48367, 24
descriptor.48367:
	.word	.LC1125
	.word	__func__.48366
	.word	.LC1739
	.word	.LC175
	.byte	158
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48682, %object
	.size	descriptor.48682, 24
descriptor.48682:
	.word	.LC1125
	.word	__func__.48683
	.word	.LC1736
	.word	.LC170
	.byte	133
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48675, %object
	.size	descriptor.48675, 24
descriptor.48675:
	.word	.LC1125
	.word	__func__.48676
	.word	.LC1736
	.word	.LC170
	.byte	107
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52039, %object
	.size	descriptor.52039, 24
descriptor.52039:
	.word	.LC1125
	.word	__func__.52040
	.word	.LC1726
	.word	.LC177
	.byte	89
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52508, %object
	.size	descriptor.52508, 24
descriptor.52508:
	.word	.LC1125
	.word	__func__.52509
	.word	.LC1721
	.word	.LC178
	.byte	156
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31135, %object
	.size	descriptor.31135, 24
descriptor.31135:
	.word	.LC1125
	.word	__func__.31136
	.word	.LC1765
	.word	.LC206
	.byte	79
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49757, %object
	.size	descriptor.49757, 24
descriptor.49757:
	.word	.LC1125
	.word	__func__.49756
	.word	.LC1731
	.word	.LC208
	.byte	47
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31841, %object
	.size	descriptor.31841, 24
descriptor.31841:
	.word	.LC1125
	.word	__func__.31842
	.word	.LC1764
	.word	.LC215
	.byte	194
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31886, %object
	.size	descriptor.31886, 24
descriptor.31886:
	.word	.LC1125
	.word	__func__.31887
	.word	.LC1764
	.word	.LC17
	.byte	95
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31921, %object
	.size	descriptor.31921, 24
descriptor.31921:
	.word	.LC1125
	.word	__func__.31922
	.word	.LC1764
	.word	.LC221
	.byte	159
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48658, %object
	.size	descriptor.48658, 24
descriptor.48658:
	.word	.LC1125
	.word	__func__.48659
	.word	.LC1736
	.word	.LC224
	.byte	48
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48660, %object
	.size	descriptor.48660, 24
descriptor.48660:
	.word	.LC1125
	.word	__func__.48659
	.word	.LC1736
	.word	.LC225
	.byte	53
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38105, %object
	.size	descriptor.38105, 24
descriptor.38105:
	.word	.LC1125
	.word	__func__.38106
	.word	.LC1756
	.word	.LC227
	.byte	193
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48742, %object
	.size	descriptor.48742, 24
descriptor.48742:
	.word	.LC1125
	.word	__func__.48743
	.word	.LC1736
	.word	.LC228
	.byte	89
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63149, %object
	.size	descriptor.63149, 24
descriptor.63149:
	.word	.LC1125
	.word	__func__.63150
	.word	.LC1561
	.word	.LC1563
	.byte	239
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63151, %object
	.size	descriptor.63151, 24
descriptor.63151:
	.word	.LC1125
	.word	__func__.63150
	.word	.LC1561
	.word	.LC1562
	.byte	250
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55879, %object
	.size	descriptor.55879, 24
descriptor.55879:
	.word	.LC1125
	.word	__func__.55880
	.word	.LC58
	.word	.LC235
	.byte	163
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55520, %object
	.size	descriptor.55520, 24
descriptor.55520:
	.word	.LC1125
	.word	__func__.55521
	.word	.LC58
	.word	.LC236
	.byte	68
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54463, %object
	.size	descriptor.54463, 24
descriptor.54463:
	.word	.LC1125
	.word	__func__.54464
	.word	.LC1708
	.word	.LC237
	.byte	124
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54465, %object
	.size	descriptor.54465, 24
descriptor.54465:
	.word	.LC1125
	.word	__func__.54464
	.word	.LC1708
	.word	.LC238
	.byte	135
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54466, %object
	.size	descriptor.54466, 24
descriptor.54466:
	.word	.LC1125
	.word	__func__.54464
	.word	.LC1708
	.word	.LC239
	.byte	139
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54471, %object
	.size	descriptor.54471, 24
descriptor.54471:
	.word	.LC1125
	.word	__func__.54464
	.word	.LC1708
	.word	.LC240
	.byte	160
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54518, %object
	.size	descriptor.54518, 24
descriptor.54518:
	.word	.LC1125
	.word	__func__.54519
	.word	.LC1708
	.word	.LC242
	.byte	50
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53326, %object
	.size	descriptor.53326, 24
descriptor.53326:
	.word	.LC1125
	.word	__func__.53327
	.word	.LC1712
	.word	.LC17
	.byte	78
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53328, %object
	.size	descriptor.53328, 24
descriptor.53328:
	.word	.LC1125
	.word	__func__.53327
	.word	.LC1712
	.word	.LC243
	.byte	85
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53140, %object
	.size	descriptor.53140, 24
descriptor.53140:
	.word	.LC1125
	.word	__func__.53141
	.word	.LC1715
	.word	.LC245
	.byte	131
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52820, %object
	.size	descriptor.52820, 24
descriptor.52820:
	.word	.LC1125
	.word	__func__.52821
	.word	.LC1716
	.word	.LC246
	.byte	57
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49772, %object
	.size	descriptor.49772, 24
descriptor.49772:
	.word	.LC1125
	.word	__func__.49773
	.word	.LC1731
	.word	.LC248
	.byte	73
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52050, %object
	.size	descriptor.52050, 24
descriptor.52050:
	.word	.LC1125
	.word	__func__.52051
	.word	.LC1726
	.word	.LC177
	.byte	109
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52138, %object
	.size	descriptor.52138, 24
descriptor.52138:
	.word	.LC1125
	.word	__func__.52139
	.word	.LC1726
	.word	.LC255
	.byte	74
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52676, %object
	.size	descriptor.52676, 24
descriptor.52676:
	.word	.LC1125
	.word	__func__.52677
	.word	.LC1721
	.word	.LC257
	.byte	125
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51422, %object
	.size	descriptor.51422, 24
descriptor.51422:
	.word	.LC1125
	.word	__func__.51423
	.word	.LC1727
	.word	.LC263
	.byte	14
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58623, %object
	.size	descriptor.58623, 24
descriptor.58623:
	.word	.LC1125
	.word	__func__.58624
	.word	.LC1613
	.word	.LC1614
	.byte	15
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49798, %object
	.size	descriptor.49798, 24
descriptor.49798:
	.word	.LC1125
	.word	__func__.49799
	.word	.LC1731
	.word	.LC267
	.byte	122
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49800, %object
	.size	descriptor.49800, 24
descriptor.49800:
	.word	.LC1125
	.word	__func__.49799
	.word	.LC1731
	.word	.LC268
	.byte	137
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50119, %object
	.size	descriptor.50119, 24
descriptor.50119:
	.word	.LC1125
	.word	__func__.50120
	.word	.LC1730
	.word	.LC274
	.byte	136
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50122, %object
	.size	descriptor.50122, 24
descriptor.50122:
	.word	.LC1125
	.word	__func__.50120
	.word	.LC1730
	.word	.LC276
	.byte	150
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58352, %object
	.size	descriptor.58352, 24
descriptor.58352:
	.word	.LC1125
	.word	__func__.58347
	.word	.LC1617
	.word	.LC1618
	.byte	197
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57692, %object
	.size	descriptor.57692, 24
descriptor.57692:
	.word	.LC1125
	.word	__func__.57693
	.word	.LC1641
	.word	.LC1642
	.byte	162
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38531, %object
	.size	descriptor.38531, 24
descriptor.38531:
	.word	.LC1125
	.word	__func__.38532
	.word	.LC1756
	.word	.LC286
	.byte	41
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50073, %object
	.size	descriptor.50073, 24
descriptor.50073:
	.word	.LC1125
	.word	__func__.50074
	.word	.LC1730
	.word	.LC288
	.byte	249
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50079, %object
	.size	descriptor.50079, 24
descriptor.50079:
	.word	.LC1125
	.word	__func__.50074
	.word	.LC1730
	.word	.LC291
	.byte	13
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50086, %object
	.size	descriptor.50086, 24
descriptor.50086:
	.word	.LC1125
	.word	__func__.50074
	.word	.LC1730
	.word	.LC292
	.byte	17
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50090, %object
	.size	descriptor.50090, 24
descriptor.50090:
	.word	.LC1125
	.word	__func__.50074
	.word	.LC1730
	.word	.LC294
	.byte	36
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50091, %object
	.size	descriptor.50091, 24
descriptor.50091:
	.word	.LC1125
	.word	__func__.50074
	.word	.LC1730
	.word	.LC296
	.byte	46
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55648, %object
	.size	descriptor.55648, 24
descriptor.55648:
	.word	.LC1125
	.word	__func__.55649
	.word	.LC58
	.word	.LC297
	.byte	94
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55650, %object
	.size	descriptor.55650, 24
descriptor.55650:
	.word	.LC1125
	.word	__func__.55649
	.word	.LC58
	.word	.LC298
	.byte	97
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55651, %object
	.size	descriptor.55651, 24
descriptor.55651:
	.word	.LC1125
	.word	__func__.55649
	.word	.LC58
	.word	.LC299
	.byte	105
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55661, %object
	.size	descriptor.55661, 24
descriptor.55661:
	.word	.LC1125
	.word	__func__.55649
	.word	.LC58
	.word	.LC300
	.byte	128
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55668, %object
	.size	descriptor.55668, 24
descriptor.55668:
	.word	.LC1125
	.word	__func__.55649
	.word	.LC58
	.word	.LC301
	.byte	139
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55669, %object
	.size	descriptor.55669, 24
descriptor.55669:
	.word	.LC1125
	.word	__func__.55649
	.word	.LC58
	.word	.LC302
	.byte	151
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55670, %object
	.size	descriptor.55670, 24
descriptor.55670:
	.word	.LC1125
	.word	__func__.55649
	.word	.LC58
	.word	.LC303
	.byte	160
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54299, %object
	.size	descriptor.54299, 24
descriptor.54299:
	.word	.LC1125
	.word	__func__.54300
	.word	.LC1708
	.word	.LC304
	.byte	52
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54301, %object
	.size	descriptor.54301, 24
descriptor.54301:
	.word	.LC1125
	.word	__func__.54300
	.word	.LC1708
	.word	.LC305
	.byte	55
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54310, %object
	.size	descriptor.54310, 24
descriptor.54310:
	.word	.LC1125
	.word	__func__.54300
	.word	.LC1708
	.word	.LC300
	.byte	87
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54317, %object
	.size	descriptor.54317, 24
descriptor.54317:
	.word	.LC1125
	.word	__func__.54300
	.word	.LC1708
	.word	.LC302
	.byte	112
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54318, %object
	.size	descriptor.54318, 24
descriptor.54318:
	.word	.LC1125
	.word	__func__.54300
	.word	.LC1708
	.word	.LC306
	.byte	128
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53506, %object
	.size	descriptor.53506, 24
descriptor.53506:
	.word	.LC1125
	.word	__func__.53507
	.word	.LC1712
	.word	.LC286
	.byte	83
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53514, %object
	.size	descriptor.53514, 24
descriptor.53514:
	.word	.LC1125
	.word	__func__.53507
	.word	.LC1712
	.word	.LC286
	.byte	96
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53040, %object
	.size	descriptor.53040, 24
descriptor.53040:
	.word	.LC1125
	.word	__func__.53041
	.word	.LC1715
	.word	.LC307
	.byte	64
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53042, %object
	.size	descriptor.53042, 24
descriptor.53042:
	.word	.LC1125
	.word	__func__.53041
	.word	.LC1715
	.word	.LC308
	.byte	76
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53054, %object
	.size	descriptor.53054, 24
descriptor.53054:
	.word	.LC1125
	.word	__func__.53041
	.word	.LC1715
	.word	.LC309
	.byte	97
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53055, %object
	.size	descriptor.53055, 24
descriptor.53055:
	.word	.LC1125
	.word	__func__.53041
	.word	.LC1715
	.word	.LC300
	.byte	102
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53062, %object
	.size	descriptor.53062, 24
descriptor.53062:
	.word	.LC1125
	.word	__func__.53041
	.word	.LC1715
	.word	.LC302
	.byte	120
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53063, %object
	.size	descriptor.53063, 24
descriptor.53063:
	.word	.LC1125
	.word	__func__.53041
	.word	.LC1715
	.word	.LC310
	.byte	133
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38555, %object
	.size	descriptor.38555, 24
descriptor.38555:
	.word	.LC1125
	.word	__func__.38556
	.word	.LC1756
	.word	.LC286
	.byte	95
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50102, %object
	.size	descriptor.50102, 24
descriptor.50102:
	.word	.LC1125
	.word	__func__.50103
	.word	.LC1730
	.word	.LC317
	.byte	64
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50104, %object
	.size	descriptor.50104, 24
descriptor.50104:
	.word	.LC1125
	.word	__func__.50103
	.word	.LC1730
	.word	.LC318
	.byte	67
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50105, %object
	.size	descriptor.50105, 24
descriptor.50105:
	.word	.LC1125
	.word	__func__.50103
	.word	.LC1730
	.word	.LC319
	.byte	73
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50106, %object
	.size	descriptor.50106, 24
descriptor.50106:
	.word	.LC1125
	.word	__func__.50103
	.word	.LC1730
	.word	.LC321
	.byte	83
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50110, %object
	.size	descriptor.50110, 24
descriptor.50110:
	.word	.LC1125
	.word	__func__.50103
	.word	.LC1730
	.word	.LC326
	.byte	125
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.65124, %object
	.size	descriptor.65124, 24
descriptor.65124:
	.word	.LC1125
	.word	__func__.65125
	.word	.LC895
	.word	.LC1499
	.byte	198
	.byte	14
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.65126, %object
	.size	descriptor.65126, 24
descriptor.65126:
	.word	.LC1125
	.word	__func__.65125
	.word	.LC895
	.word	.LC1498
	.byte	203
	.byte	14
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48623, %object
	.size	descriptor.48623, 24
descriptor.48623:
	.word	.LC1125
	.word	__func__.48624
	.word	.LC1736
	.word	.LC334
	.byte	216
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48630, %object
	.size	descriptor.48630, 24
descriptor.48630:
	.word	.LC1125
	.word	__func__.48624
	.word	.LC1736
	.word	.LC335
	.byte	230
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48419, %object
	.size	descriptor.48419, 24
descriptor.48419:
	.word	.LC1125
	.word	__func__.48420
	.word	.LC1739
	.word	.LC177
	.byte	68
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48421, %object
	.size	descriptor.48421, 24
descriptor.48421:
	.word	.LC1125
	.word	__func__.48420
	.word	.LC1739
	.word	.LC340
	.byte	75
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48801, %object
	.size	descriptor.48801, 24
descriptor.48801:
	.word	.LC1125
	.word	__func__.48802
	.word	.LC1736
	.word	.LC177
	.byte	18
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48787, %object
	.size	descriptor.48787, 24
descriptor.48787:
	.word	.LC1125
	.word	__func__.48788
	.word	.LC1736
	.word	.LC177
	.byte	249
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49463, %object
	.size	descriptor.49463, 24
descriptor.49463:
	.word	.LC1125
	.word	__func__.49464
	.word	.LC1735
	.word	.LC177
	.byte	23
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49865, %object
	.size	descriptor.49865, 24
descriptor.49865:
	.word	.LC1125
	.word	__func__.49866
	.word	.LC1731
	.word	.LC177
	.byte	41
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49850, %object
	.size	descriptor.49850, 24
descriptor.49850:
	.word	.LC1125
	.word	__func__.49851
	.word	.LC1731
	.word	.LC177
	.byte	8
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51065, %object
	.size	descriptor.51065, 24
descriptor.51065:
	.word	.LC1125
	.word	__func__.51066
	.word	.LC1728
	.word	.LC177
	.byte	126
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48732, %object
	.size	descriptor.48732, 24
descriptor.48732:
	.word	.LC1125
	.word	__func__.48733
	.word	.LC1736
	.word	.LC228
	.byte	60
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48734, %object
	.size	descriptor.48734, 24
descriptor.48734:
	.word	.LC1125
	.word	__func__.48733
	.word	.LC1736
	.word	.LC268
	.byte	71
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49220, %object
	.size	descriptor.49220, 24
descriptor.49220:
	.word	.LC1125
	.word	__func__.49221
	.word	.LC1735
	.word	.LC343
	.byte	88
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49225, %object
	.size	descriptor.49225, 24
descriptor.49225:
	.word	.LC1125
	.word	__func__.49221
	.word	.LC1735
	.word	.LC344
	.byte	94
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49442, %object
	.size	descriptor.49442, 24
descriptor.49442:
	.word	.LC1125
	.word	__func__.49443
	.word	.LC1735
	.word	.LC345
	.byte	193
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57932, %object
	.size	descriptor.57932, 24
descriptor.57932:
	.word	.LC1125
	.word	__func__.57933
	.word	.LC1631
	.word	.LC345
	.byte	116
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49433, %object
	.size	descriptor.49433, 24
descriptor.49433:
	.word	.LC1125
	.word	__func__.49434
	.word	.LC1735
	.word	.LC347
	.byte	179
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57923, %object
	.size	descriptor.57923, 24
descriptor.57923:
	.word	.LC1125
	.word	__func__.57924
	.word	.LC1631
	.word	.LC347
	.byte	100
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49416, %object
	.size	descriptor.49416, 24
descriptor.49416:
	.word	.LC1125
	.word	__func__.49412
	.word	.LC1735
	.word	.LC352
	.byte	104
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49298, %object
	.size	descriptor.49298, 24
descriptor.49298:
	.word	.LC1125
	.word	__func__.49297
	.word	.LC1735
	.word	.LC354
	.byte	59
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49305, %object
	.size	descriptor.49305, 24
descriptor.49305:
	.word	.LC1125
	.word	__func__.49304
	.word	.LC1735
	.word	.LC354
	.byte	78
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49417, %object
	.size	descriptor.49417, 24
descriptor.49417:
	.word	.LC1125
	.word	__func__.49412
	.word	.LC1735
	.word	.LC357
	.byte	157
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57825, %object
	.size	descriptor.57825, 24
descriptor.57825:
	.word	.LC1125
	.word	__func__.57826
	.word	.LC1631
	.word	.LC1638
	.byte	207
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57773, %object
	.size	descriptor.57773, 24
descriptor.57773:
	.word	.LC1125
	.word	__func__.57774
	.word	.LC1631
	.word	.LC354
	.byte	100
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57780, %object
	.size	descriptor.57780, 24
descriptor.57780:
	.word	.LC1125
	.word	__func__.57781
	.word	.LC1631
	.word	.LC354
	.byte	114
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57827, %object
	.size	descriptor.57827, 24
descriptor.57827:
	.word	.LC1125
	.word	__func__.57826
	.word	.LC1631
	.word	.LC1637
	.byte	81
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57802, %object
	.size	descriptor.57802, 24
descriptor.57802:
	.word	.LC1125
	.word	__func__.57803
	.word	.LC1631
	.word	.LC924
	.byte	156
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38592, %object
	.size	descriptor.38592, 24
descriptor.38592:
	.word	.LC1125
	.word	__func__.38593
	.word	.LC1756
	.word	.LC386
	.byte	239
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45431, %object
	.size	descriptor.45431, 24
descriptor.45431:
	.word	.LC1125
	.word	__func__.45432
	.word	.LC1749
	.word	.LC414
	.byte	221
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.64644, %object
	.size	descriptor.64644, 24
descriptor.64644:
	.word	.LC1125
	.word	__func__.64645
	.word	.LC895
	.word	.LC1519
	.byte	54
	.byte	11
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45484, %object
	.size	descriptor.45484, 24
descriptor.45484:
	.word	.LC1125
	.word	__func__.45485
	.word	.LC1749
	.word	.LC512
	.byte	130
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45486, %object
	.size	descriptor.45486, 24
descriptor.45486:
	.word	.LC1125
	.word	__func__.45485
	.word	.LC1749
	.word	.LC513
	.byte	135
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45517, %object
	.size	descriptor.45517, 24
descriptor.45517:
	.word	.LC1125
	.word	__func__.45518
	.word	.LC1749
	.word	.LC514
	.byte	221
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45519, %object
	.size	descriptor.45519, 24
descriptor.45519:
	.word	.LC1125
	.word	__func__.45518
	.word	.LC1749
	.word	.LC515
	.byte	225
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45616, %object
	.size	descriptor.45616, 24
descriptor.45616:
	.word	.LC1125
	.word	__func__.45617
	.word	.LC89
	.word	.LC516
	.byte	219
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45620, %object
	.size	descriptor.45620, 24
descriptor.45620:
	.word	.LC1125
	.word	__func__.45617
	.word	.LC89
	.word	.LC521
	.byte	240
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45700, %object
	.size	descriptor.45700, 24
descriptor.45700:
	.word	.LC1125
	.word	__func__.45701
	.word	.LC89
	.word	.LC522
	.byte	172
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45692, %object
	.size	descriptor.45692, 24
descriptor.45692:
	.word	.LC1125
	.word	__func__.45693
	.word	.LC89
	.word	.LC522
	.byte	151
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54391, %object
	.size	descriptor.54391, 24
descriptor.54391:
	.word	.LC1125
	.word	__func__.54392
	.word	.LC1708
	.word	.LC523
	.byte	100
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54393, %object
	.size	descriptor.54393, 24
descriptor.54393:
	.word	.LC1125
	.word	__func__.54392
	.word	.LC1708
	.word	.LC524
	.byte	103
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54395, %object
	.size	descriptor.54395, 24
descriptor.54395:
	.word	.LC1125
	.word	__func__.54392
	.word	.LC1708
	.word	.LC302
	.byte	125
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54396, %object
	.size	descriptor.54396, 24
descriptor.54396:
	.word	.LC1125
	.word	__func__.54392
	.word	.LC1708
	.word	.LC525
	.byte	128
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54403, %object
	.size	descriptor.54403, 24
descriptor.54403:
	.word	.LC1125
	.word	__func__.54392
	.word	.LC1708
	.word	.LC526
	.byte	166
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54406, %object
	.size	descriptor.54406, 24
descriptor.54406:
	.word	.LC1125
	.word	__func__.54392
	.word	.LC1708
	.word	.LC527
	.byte	175
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62433, %object
	.size	descriptor.62433, 24
descriptor.62433:
	.word	.LC1125
	.word	__func__.62434
	.word	.LC1568
	.word	.LC1570
	.byte	139
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62447, %object
	.size	descriptor.62447, 24
descriptor.62447:
	.word	.LC1125
	.word	__func__.62434
	.word	.LC1568
	.word	.LC1569
	.byte	227
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.37502, %object
	.size	descriptor.37502, 24
descriptor.37502:
	.word	.LC1125
	.word	__func__.37503
	.word	.LC1759
	.word	.LC546
	.byte	221
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48280, %object
	.size	descriptor.48280, 24
descriptor.48280:
	.word	.LC1125
	.word	__func__.48281
	.word	.LC1739
	.word	.LC170
	.byte	138
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50046, %object
	.size	descriptor.50046, 24
descriptor.50046:
	.word	.LC1125
	.word	__func__.50047
	.word	.LC1730
	.word	.LC547
	.byte	209
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50048, %object
	.size	descriptor.50048, 24
descriptor.50048:
	.word	.LC1125
	.word	__func__.50047
	.word	.LC1730
	.word	.LC548
	.byte	212
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50136, %object
	.size	descriptor.50136, 24
descriptor.50136:
	.word	.LC1125
	.word	__func__.50132
	.word	.LC1730
	.word	.LC550
	.byte	178
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50981, %object
	.size	descriptor.50981, 24
descriptor.50981:
	.word	.LC1125
	.word	__func__.50980
	.word	.LC1728
	.word	.LC551
	.byte	163
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50993, %object
	.size	descriptor.50993, 24
descriptor.50993:
	.word	.LC1125
	.word	__func__.50994
	.word	.LC1728
	.word	.LC552
	.byte	181
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51388, %object
	.size	descriptor.51388, 24
descriptor.51388:
	.word	.LC1125
	.word	__func__.51389
	.word	.LC1727
	.word	.LC554
	.byte	185
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51994, %object
	.size	descriptor.51994, 24
descriptor.51994:
	.word	.LC1125
	.word	__func__.51993
	.word	.LC1726
	.word	.LC551
	.byte	222
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57890, %object
	.size	descriptor.57890, 24
descriptor.57890:
	.word	.LC1125
	.word	__func__.57891
	.word	.LC1631
	.word	.LC120
	.byte	27
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53485, %object
	.size	descriptor.53485, 24
descriptor.53485:
	.word	.LC1125
	.word	__func__.53486
	.word	.LC1712
	.word	.LC286
	.byte	49
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53487, %object
	.size	descriptor.53487, 24
descriptor.53487:
	.word	.LC1125
	.word	__func__.53486
	.word	.LC1712
	.word	.LC559
	.byte	53
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53385, %object
	.size	descriptor.53385, 24
descriptor.53385:
	.word	.LC1125
	.word	__func__.53386
	.word	.LC1712
	.word	.LC560
	.byte	66
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53387, %object
	.size	descriptor.53387, 24
descriptor.53387:
	.word	.LC1125
	.word	__func__.53386
	.word	.LC1712
	.word	.LC286
	.byte	68
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53388, %object
	.size	descriptor.53388, 24
descriptor.53388:
	.word	.LC1125
	.word	__func__.53386
	.word	.LC1712
	.word	.LC561
	.byte	73
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38925, %object
	.size	descriptor.38925, 24
descriptor.38925:
	.word	.LC1125
	.word	__func__.38924
	.word	.LC1754
	.word	.LC562
	.byte	61
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38830, %object
	.size	descriptor.38830, 24
descriptor.38830:
	.word	.LC1125
	.word	__func__.38831
	.word	.LC1754
	.word	.LC564
	.byte	91
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38947, %object
	.size	descriptor.38947, 24
descriptor.38947:
	.word	.LC1125
	.word	__func__.38946
	.word	.LC1754
	.word	.LC157
	.byte	136
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52332, %object
	.size	descriptor.52332, 24
descriptor.52332:
	.word	.LC1125
	.word	__func__.52333
	.word	.LC1721
	.word	.LC571
	.byte	248
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52376, %object
	.size	descriptor.52376, 24
descriptor.52376:
	.word	.LC1125
	.word	__func__.52377
	.word	.LC1721
	.word	.LC552
	.byte	92
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.37529, %object
	.size	descriptor.37529, 24
descriptor.37529:
	.word	.LC1125
	.word	__func__.37530
	.word	.LC1759
	.word	.LC267
	.byte	23
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51537, %object
	.size	descriptor.51537, 24
descriptor.51537:
	.word	.LC1125
	.word	__func__.51538
	.word	.LC1727
	.word	.LC552
	.byte	18
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52002, %object
	.size	descriptor.52002, 24
descriptor.52002:
	.word	.LC1125
	.word	__func__.52003
	.word	.LC1726
	.word	.LC552
	.byte	236
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52479, %object
	.size	descriptor.52479, 24
descriptor.52479:
	.word	.LC1125
	.word	__func__.52480
	.word	.LC1721
	.word	.LC552
	.byte	85
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.44563, %object
	.size	descriptor.44563, 24
descriptor.44563:
	.word	.LC1125
	.word	__func__.44564
	.word	.LC33
	.word	.LC595
	.byte	5
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38862, %object
	.size	descriptor.38862, 24
descriptor.38862:
	.word	.LC1125
	.word	__func__.38863
	.word	.LC1754
	.word	.LC596
	.byte	146
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49639, %object
	.size	descriptor.49639, 24
descriptor.49639:
	.word	.LC1125
	.word	__func__.49640
	.word	.LC1735
	.word	.LC597
	.byte	45
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56375, %object
	.size	descriptor.56375, 24
descriptor.56375:
	.word	.LC1125
	.word	__func__.56376
	.word	.LC1704
	.word	.LC599
	.byte	190
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56905, %object
	.size	descriptor.56905, 24
descriptor.56905:
	.word	.LC1125
	.word	__func__.56906
	.word	.LC1693
	.word	.LC602
	.byte	235
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56910, %object
	.size	descriptor.56910, 24
descriptor.56910:
	.word	.LC1125
	.word	__func__.56906
	.word	.LC1693
	.word	.LC603
	.byte	240
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57840, %object
	.size	descriptor.57840, 24
descriptor.57840:
	.word	.LC1125
	.word	__func__.57841
	.word	.LC1631
	.word	.LC1636
	.byte	111
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57431, %object
	.size	descriptor.57431, 24
descriptor.57431:
	.word	.LC1125
	.word	__func__.57432
	.word	.LC1641
	.word	.LC1677
	.byte	52
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57433, %object
	.size	descriptor.57433, 24
descriptor.57433:
	.word	.LC1125
	.word	__func__.57432
	.word	.LC1641
	.word	.LC676
	.byte	66
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58260, %object
	.size	descriptor.58260, 24
descriptor.58260:
	.word	.LC1125
	.word	__func__.58261
	.word	.LC1617
	.word	.LC1620
	.byte	13
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57914, %object
	.size	descriptor.57914, 24
descriptor.57914:
	.word	.LC1125
	.word	__func__.57915
	.word	.LC1631
	.word	.LC597
	.byte	89
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58255, %object
	.size	descriptor.58255, 24
descriptor.58255:
	.word	.LC1125
	.word	__func__.58256
	.word	.LC1617
	.word	.LC1621
	.byte	6
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57907, %object
	.size	descriptor.57907, 24
descriptor.57907:
	.word	.LC1125
	.word	__func__.57908
	.word	.LC1631
	.word	.LC838
	.byte	75
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57848, %object
	.size	descriptor.57848, 24
descriptor.57848:
	.word	.LC1125
	.word	__func__.57849
	.word	.LC1631
	.word	.LC1635
	.byte	121
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56559, %object
	.size	descriptor.56559, 24
descriptor.56559:
	.word	.LC1125
	.word	__func__.56553
	.word	.LC1693
	.word	.LC623
	.byte	214
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56565, %object
	.size	descriptor.56565, 24
descriptor.56565:
	.word	.LC1125
	.word	__func__.56553
	.word	.LC1693
	.word	.LC624
	.byte	224
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56567, %object
	.size	descriptor.56567, 24
descriptor.56567:
	.word	.LC1125
	.word	__func__.56553
	.word	.LC1693
	.word	.LC625
	.byte	237
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56569, %object
	.size	descriptor.56569, 24
descriptor.56569:
	.word	.LC1125
	.word	__func__.56553
	.word	.LC1693
	.word	.LC626
	.byte	244
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56571, %object
	.size	descriptor.56571, 24
descriptor.56571:
	.word	.LC1125
	.word	__func__.56553
	.word	.LC1693
	.word	.LC627
	.byte	252
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56575, %object
	.size	descriptor.56575, 24
descriptor.56575:
	.word	.LC1125
	.word	__func__.56553
	.word	.LC1693
	.word	.LC628
	.byte	19
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56577, %object
	.size	descriptor.56577, 24
descriptor.56577:
	.word	.LC1125
	.word	__func__.56553
	.word	.LC1693
	.word	.LC629
	.byte	29
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56579, %object
	.size	descriptor.56579, 24
descriptor.56579:
	.word	.LC1125
	.word	__func__.56553
	.word	.LC1693
	.word	.LC630
	.byte	39
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56581, %object
	.size	descriptor.56581, 24
descriptor.56581:
	.word	.LC1125
	.word	__func__.56553
	.word	.LC1693
	.word	.LC631
	.byte	47
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56583, %object
	.size	descriptor.56583, 24
descriptor.56583:
	.word	.LC1125
	.word	__func__.56553
	.word	.LC1693
	.word	.LC632
	.byte	61
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56585, %object
	.size	descriptor.56585, 24
descriptor.56585:
	.word	.LC1125
	.word	__func__.56553
	.word	.LC1693
	.word	.LC633
	.byte	69
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56587, %object
	.size	descriptor.56587, 24
descriptor.56587:
	.word	.LC1125
	.word	__func__.56553
	.word	.LC1693
	.word	.LC634
	.byte	76
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56591, %object
	.size	descriptor.56591, 24
descriptor.56591:
	.word	.LC1125
	.word	__func__.56553
	.word	.LC1693
	.word	.LC635
	.byte	91
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56593, %object
	.size	descriptor.56593, 24
descriptor.56593:
	.word	.LC1125
	.word	__func__.56553
	.word	.LC1693
	.word	.LC636
	.byte	101
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56603, %object
	.size	descriptor.56603, 24
descriptor.56603:
	.word	.LC1125
	.word	__func__.56553
	.word	.LC1693
	.word	.LC637
	.byte	154
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56605, %object
	.size	descriptor.56605, 24
descriptor.56605:
	.word	.LC1125
	.word	__func__.56553
	.word	.LC1693
	.word	.LC638
	.byte	165
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56607, %object
	.size	descriptor.56607, 24
descriptor.56607:
	.word	.LC1125
	.word	__func__.56553
	.word	.LC1693
	.word	.LC639
	.byte	177
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56609, %object
	.size	descriptor.56609, 24
descriptor.56609:
	.word	.LC1125
	.word	__func__.56553
	.word	.LC1693
	.word	.LC640
	.byte	189
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56611, %object
	.size	descriptor.56611, 24
descriptor.56611:
	.word	.LC1125
	.word	__func__.56553
	.word	.LC1693
	.word	.LC641
	.byte	197
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56613, %object
	.size	descriptor.56613, 24
descriptor.56613:
	.word	.LC1125
	.word	__func__.56553
	.word	.LC1693
	.word	.LC642
	.byte	204
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56615, %object
	.size	descriptor.56615, 24
descriptor.56615:
	.word	.LC1125
	.word	__func__.56553
	.word	.LC1693
	.word	.LC643
	.byte	213
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56617, %object
	.size	descriptor.56617, 24
descriptor.56617:
	.word	.LC1125
	.word	__func__.56553
	.word	.LC1693
	.word	.LC644
	.byte	222
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56619, %object
	.size	descriptor.56619, 24
descriptor.56619:
	.word	.LC1125
	.word	__func__.56553
	.word	.LC1693
	.word	.LC645
	.byte	229
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52867, %object
	.size	descriptor.52867, 24
descriptor.52867:
	.word	.LC1125
	.word	__func__.52868
	.word	.LC1716
	.word	.LC652
	.byte	218
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52412, %object
	.size	descriptor.52412, 24
descriptor.52412:
	.word	.LC1125
	.word	__func__.52413
	.word	.LC1721
	.word	.LC125
	.byte	201
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52537, %object
	.size	descriptor.52537, 24
descriptor.52537:
	.word	.LC1125
	.word	__func__.52535
	.word	.LC1721
	.word	.LC551
	.byte	11
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48587, %object
	.size	descriptor.48587, 24
descriptor.48587:
	.word	.LC1125
	.word	__func__.48588
	.word	.LC1736
	.word	.LC655
	.byte	151
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48589, %object
	.size	descriptor.48589, 24
descriptor.48589:
	.word	.LC1125
	.word	__func__.48588
	.word	.LC1736
	.word	.LC658
	.byte	156
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47291, %object
	.size	descriptor.47291, 24
descriptor.47291:
	.word	.LC1125
	.word	__func__.47290
	.word	.LC680
	.word	.LC166
	.byte	193
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.40947, %object
	.size	descriptor.40947, 24
descriptor.40947:
	.word	.LC1125
	.word	__func__.40948
	.word	.LC1753
	.word	.LC669
	.byte	200
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.40965, %object
	.size	descriptor.40965, 24
descriptor.40965:
	.word	.LC1125
	.word	__func__.40966
	.word	.LC1753
	.word	.LC669
	.byte	227
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.40986, %object
	.size	descriptor.40986, 24
descriptor.40986:
	.word	.LC1125
	.word	__func__.40987
	.word	.LC1753
	.word	.LC670
	.byte	20
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50004, %object
	.size	descriptor.50004, 24
descriptor.50004:
	.word	.LC1125
	.word	__func__.50003
	.word	.LC1730
	.word	.LC674
	.byte	107
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50008, %object
	.size	descriptor.50008, 24
descriptor.50008:
	.word	.LC1125
	.word	__func__.50003
	.word	.LC1730
	.word	.LC676
	.byte	122
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.44870, %object
	.size	descriptor.44870, 24
descriptor.44870:
	.word	.LC1125
	.word	__func__.44869
	.word	.LC33
	.word	.LC679
	.byte	47
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47611, %object
	.size	descriptor.47611, 24
descriptor.47611:
	.word	.LC1125
	.word	__func__.47612
	.word	.LC680
	.word	.LC681
	.byte	209
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56888, %object
	.size	descriptor.56888, 24
descriptor.56888:
	.word	.LC1125
	.word	__func__.56889
	.word	.LC1693
	.word	.LC682
	.byte	187
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62200, %object
	.size	descriptor.62200, 24
descriptor.62200:
	.word	.LC1125
	.word	__func__.62201
	.word	.LC1568
	.word	.LC1582
	.byte	11
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62224, %object
	.size	descriptor.62224, 24
descriptor.62224:
	.word	.LC1125
	.word	__func__.62225
	.word	.LC1568
	.word	.LC1580
	.byte	66
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62232, %object
	.size	descriptor.62232, 24
descriptor.62232:
	.word	.LC1125
	.word	__func__.62225
	.word	.LC1568
	.word	.LC1579
	.byte	80
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46165, %object
	.size	descriptor.46165, 24
descriptor.46165:
	.word	.LC1125
	.word	__func__.46166
	.word	.LC89
	.word	.LC688
	.byte	72
	.byte	11
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57476, %object
	.size	descriptor.57476, 24
descriptor.57476:
	.word	.LC1125
	.word	__func__.57477
	.word	.LC1641
	.word	.LC1671
	.byte	171
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57461, %object
	.size	descriptor.57461, 24
descriptor.57461:
	.word	.LC1125
	.word	__func__.57462
	.word	.LC1641
	.word	.LC1676
	.byte	105
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57464, %object
	.size	descriptor.57464, 24
descriptor.57464:
	.word	.LC1125
	.word	__func__.57462
	.word	.LC1641
	.word	.LC1675
	.byte	118
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57466, %object
	.size	descriptor.57466, 24
descriptor.57466:
	.word	.LC1125
	.word	__func__.57462
	.word	.LC1641
	.word	.LC1674
	.byte	123
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57467, %object
	.size	descriptor.57467, 24
descriptor.57467:
	.word	.LC1125
	.word	__func__.57462
	.word	.LC1641
	.word	.LC1673
	.byte	126
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57468, %object
	.size	descriptor.57468, 24
descriptor.57468:
	.word	.LC1125
	.word	__func__.57462
	.word	.LC1641
	.word	.LC1672
	.byte	151
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57482, %object
	.size	descriptor.57482, 24
descriptor.57482:
	.word	.LC1125
	.word	__func__.57477
	.word	.LC1641
	.word	.LC1670
	.byte	194
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51575, %object
	.size	descriptor.51575, 24
descriptor.51575:
	.word	.LC1125
	.word	__func__.51576
	.word	.LC1727
	.word	.LC702
	.byte	97
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51052, %object
	.size	descriptor.51052, 24
descriptor.51052:
	.word	.LC1125
	.word	__func__.51053
	.word	.LC1728
	.word	.LC177
	.byte	98
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55513, %object
	.size	descriptor.55513, 24
descriptor.55513:
	.word	.LC1125
	.word	__func__.55514
	.word	.LC58
	.word	.LC704
	.byte	53
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.44461, %object
	.size	descriptor.44461, 24
descriptor.44461:
	.word	.LC1125
	.word	__func__.44462
	.word	.LC33
	.word	.LC705
	.byte	150
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.40937, %object
	.size	descriptor.40937, 24
descriptor.40937:
	.word	.LC1125
	.word	__func__.40938
	.word	.LC1753
	.word	.LC706
	.byte	176
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30972, %object
	.size	descriptor.30972, 24
descriptor.30972:
	.word	.LC1125
	.word	__func__.30973
	.word	.LC1765
	.word	.LC707
	.byte	160
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30947, %object
	.size	descriptor.30947, 24
descriptor.30947:
	.word	.LC1125
	.word	__func__.30948
	.word	.LC1765
	.word	.LC708
	.byte	41
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30953, %object
	.size	descriptor.30953, 24
descriptor.30953:
	.word	.LC1125
	.word	__func__.30954
	.word	.LC1765
	.word	.LC709
	.byte	53
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46054, %object
	.size	descriptor.46054, 24
descriptor.46054:
	.word	.LC1125
	.word	__func__.46055
	.word	.LC89
	.word	.LC710
	.byte	187
	.byte	8
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46056, %object
	.size	descriptor.46056, 24
descriptor.46056:
	.word	.LC1125
	.word	__func__.46055
	.word	.LC89
	.word	.LC711
	.byte	191
	.byte	8
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45851, %object
	.size	descriptor.45851, 24
descriptor.45851:
	.word	.LC1125
	.word	__func__.45852
	.word	.LC89
	.word	.LC713
	.byte	127
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45853, %object
	.size	descriptor.45853, 24
descriptor.45853:
	.word	.LC1125
	.word	__func__.45852
	.word	.LC89
	.word	.LC714
	.byte	131
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45822, %object
	.size	descriptor.45822, 24
descriptor.45822:
	.word	.LC1125
	.word	__func__.45823
	.word	.LC89
	.word	.LC715
	.byte	161
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45824, %object
	.size	descriptor.45824, 24
descriptor.45824:
	.word	.LC1125
	.word	__func__.45823
	.word	.LC89
	.word	.LC716
	.byte	165
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57218, %object
	.size	descriptor.57218, 24
descriptor.57218:
	.word	.LC1125
	.word	__func__.57219
	.word	.LC1684
	.word	.LC721
	.byte	169
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57868, %object
	.size	descriptor.57868, 24
descriptor.57868:
	.word	.LC1125
	.word	__func__.57869
	.word	.LC1631
	.word	.LC1634
	.byte	225
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30987, %object
	.size	descriptor.30987, 24
descriptor.30987:
	.word	.LC1125
	.word	__func__.30988
	.word	.LC1765
	.word	.LC723
	.byte	198
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30842, %object
	.size	descriptor.30842, 24
descriptor.30842:
	.word	.LC1125
	.word	__func__.30843
	.word	.LC1768
	.word	.LC727
	.byte	68
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55682, %object
	.size	descriptor.55682, 24
descriptor.55682:
	.word	.LC1125
	.word	__func__.55683
	.word	.LC58
	.word	.LC730
	.byte	172
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55684, %object
	.size	descriptor.55684, 24
descriptor.55684:
	.word	.LC1125
	.word	__func__.55683
	.word	.LC58
	.word	.LC731
	.byte	175
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55685, %object
	.size	descriptor.55685, 24
descriptor.55685:
	.word	.LC1125
	.word	__func__.55683
	.word	.LC58
	.word	.LC732
	.byte	181
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55693, %object
	.size	descriptor.55693, 24
descriptor.55693:
	.word	.LC1125
	.word	__func__.55683
	.word	.LC58
	.word	.LC733
	.byte	214
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55696, %object
	.size	descriptor.55696, 24
descriptor.55696:
	.word	.LC1125
	.word	__func__.55683
	.word	.LC58
	.word	.LC734
	.byte	229
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51441, %object
	.size	descriptor.51441, 24
descriptor.51441:
	.word	.LC1125
	.word	__func__.51442
	.word	.LC1727
	.word	.LC571
	.byte	58
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51491, %object
	.size	descriptor.51491, 24
descriptor.51491:
	.word	.LC1125
	.word	__func__.51492
	.word	.LC1727
	.word	.LC552
	.byte	165
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57183, %object
	.size	descriptor.57183, 24
descriptor.57183:
	.word	.LC1125
	.word	__func__.57184
	.word	.LC1684
	.word	.LC1690
	.byte	221
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57188, %object
	.size	descriptor.57188, 24
descriptor.57188:
	.word	.LC1125
	.word	__func__.57189
	.word	.LC1684
	.word	.LC1689
	.byte	228
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57628, %object
	.size	descriptor.57628, 24
descriptor.57628:
	.word	.LC1125
	.word	__func__.57629
	.word	.LC1641
	.word	.LC1649
	.byte	235
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57642, %object
	.size	descriptor.57642, 24
descriptor.57642:
	.word	.LC1125
	.word	__func__.57629
	.word	.LC1641
	.word	.LC1648
	.byte	16
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57649, %object
	.size	descriptor.57649, 24
descriptor.57649:
	.word	.LC1125
	.word	__func__.57629
	.word	.LC1641
	.word	.LC1647
	.byte	25
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57658, %object
	.size	descriptor.57658, 24
descriptor.57658:
	.word	.LC1125
	.word	__func__.57629
	.word	.LC1641
	.word	.LC1646
	.byte	39
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57659, %object
	.size	descriptor.57659, 24
descriptor.57659:
	.word	.LC1125
	.word	__func__.57629
	.word	.LC1641
	.word	.LC1645
	.byte	50
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61934, %object
	.size	descriptor.61934, 24
descriptor.61934:
	.word	.LC1125
	.word	__func__.61933
	.word	.LC1594
	.word	.LC1602
	.byte	143
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61903, %object
	.size	descriptor.61903, 24
descriptor.61903:
	.word	.LC1125
	.word	__func__.61902
	.word	.LC1594
	.word	.LC1604
	.byte	200
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61935, %object
	.size	descriptor.61935, 24
descriptor.61935:
	.word	.LC1125
	.word	__func__.61933
	.word	.LC1594
	.word	.LC1601
	.byte	153
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61890, %object
	.size	descriptor.61890, 24
descriptor.61890:
	.word	.LC1125
	.word	__func__.61891
	.word	.LC1594
	.word	.LC1605
	.byte	129
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61915, %object
	.size	descriptor.61915, 24
descriptor.61915:
	.word	.LC1125
	.word	__func__.61914
	.word	.LC1594
	.word	.LC1603
	.byte	39
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62192, %object
	.size	descriptor.62192, 24
descriptor.62192:
	.word	.LC1125
	.word	__func__.62189
	.word	.LC1568
	.word	.LC1583
	.byte	245
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61953, %object
	.size	descriptor.61953, 24
descriptor.61953:
	.word	.LC1125
	.word	__func__.61951
	.word	.LC1594
	.word	.LC1600
	.byte	220
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61954, %object
	.size	descriptor.61954, 24
descriptor.61954:
	.word	.LC1125
	.word	__func__.61951
	.word	.LC1594
	.word	.LC1599
	.byte	232
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62937, %object
	.size	descriptor.62937, 24
descriptor.62937:
	.word	.LC1125
	.word	__func__.62938
	.word	.LC1561
	.word	.LC1563
	.byte	88
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45669, %object
	.size	descriptor.45669, 24
descriptor.45669:
	.word	.LC1125
	.word	__func__.45670
	.word	.LC89
	.word	.LC775
	.byte	83
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53884, %object
	.size	descriptor.53884, 24
descriptor.53884:
	.word	.LC1125
	.word	__func__.53885
	.word	.LC1710
	.word	.LC777
	.byte	154
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63595, %object
	.size	descriptor.63595, 24
descriptor.63595:
	.word	.LC1125
	.word	__func__.63596
	.word	.LC1554
	.word	.LC778
	.byte	154
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58086, %object
	.size	descriptor.58086, 24
descriptor.58086:
	.word	.LC1125
	.word	__func__.58087
	.word	.LC1627
	.word	.LC721
	.byte	35
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53075, %object
	.size	descriptor.53075, 24
descriptor.53075:
	.word	.LC1125
	.word	__func__.53076
	.word	.LC1715
	.word	.LC780
	.byte	147
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53077, %object
	.size	descriptor.53077, 24
descriptor.53077:
	.word	.LC1125
	.word	__func__.53076
	.word	.LC1715
	.word	.LC781
	.byte	154
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53085, %object
	.size	descriptor.53085, 24
descriptor.53085:
	.word	.LC1125
	.word	__func__.53076
	.word	.LC1715
	.word	.LC782
	.byte	183
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53088, %object
	.size	descriptor.53088, 24
descriptor.53088:
	.word	.LC1125
	.word	__func__.53076
	.word	.LC1715
	.word	.LC783
	.byte	204
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63122, %object
	.size	descriptor.63122, 24
descriptor.63122:
	.word	.LC1125
	.word	__func__.63123
	.word	.LC1561
	.word	.LC1563
	.byte	145
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56752, %object
	.size	descriptor.56752, 24
descriptor.56752:
	.word	.LC1125
	.word	__func__.56753
	.word	.LC1693
	.word	.LC267
	.byte	166
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58457, %object
	.size	descriptor.58457, 24
descriptor.58457:
	.word	.LC1125
	.word	__func__.58458
	.word	.LC1613
	.word	.LC1615
	.byte	245
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58292, %object
	.size	descriptor.58292, 24
descriptor.58292:
	.word	.LC1125
	.word	__func__.58293
	.word	.LC1617
	.word	.LC1619
	.byte	221
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45505, %object
	.size	descriptor.45505, 24
descriptor.45505:
	.word	.LC1125
	.word	__func__.45506
	.word	.LC1749
	.word	.LC803
	.byte	176
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45436, %object
	.size	descriptor.45436, 24
descriptor.45436:
	.word	.LC1125
	.word	__func__.45437
	.word	.LC1749
	.word	.LC804
	.byte	233
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52519, %object
	.size	descriptor.52519, 24
descriptor.52519:
	.word	.LC1125
	.word	__func__.52520
	.word	.LC1721
	.word	.LC177
	.byte	183
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51584, %object
	.size	descriptor.51584, 24
descriptor.51584:
	.word	.LC1125
	.word	__func__.51585
	.word	.LC1727
	.word	.LC177
	.byte	123
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57519, %object
	.size	descriptor.57519, 24
descriptor.57519:
	.word	.LC1125
	.word	__func__.57517
	.word	.LC1641
	.word	.LC1666
	.byte	56
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57522, %object
	.size	descriptor.57522, 24
descriptor.57522:
	.word	.LC1125
	.word	__func__.57517
	.word	.LC1641
	.word	.LC1665
	.byte	65
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57523, %object
	.size	descriptor.57523, 24
descriptor.57523:
	.word	.LC1125
	.word	__func__.57517
	.word	.LC1641
	.word	.LC1664
	.byte	69
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57525, %object
	.size	descriptor.57525, 24
descriptor.57525:
	.word	.LC1125
	.word	__func__.57517
	.word	.LC1641
	.word	.LC1663
	.byte	79
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57526, %object
	.size	descriptor.57526, 24
descriptor.57526:
	.word	.LC1125
	.word	__func__.57517
	.word	.LC1641
	.word	.LC1662
	.byte	88
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57532, %object
	.size	descriptor.57532, 24
descriptor.57532:
	.word	.LC1125
	.word	__func__.57517
	.word	.LC1641
	.word	.LC1661
	.byte	107
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57534, %object
	.size	descriptor.57534, 24
descriptor.57534:
	.word	.LC1125
	.word	__func__.57517
	.word	.LC1641
	.word	.LC1660
	.byte	114
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57536, %object
	.size	descriptor.57536, 24
descriptor.57536:
	.word	.LC1125
	.word	__func__.57517
	.word	.LC1641
	.word	.LC1659
	.byte	127
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57537, %object
	.size	descriptor.57537, 24
descriptor.57537:
	.word	.LC1125
	.word	__func__.57517
	.word	.LC1641
	.word	.LC1658
	.byte	135
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57539, %object
	.size	descriptor.57539, 24
descriptor.57539:
	.word	.LC1125
	.word	__func__.57517
	.word	.LC1641
	.word	.LC1657
	.byte	141
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57542, %object
	.size	descriptor.57542, 24
descriptor.57542:
	.word	.LC1125
	.word	__func__.57517
	.word	.LC1641
	.word	.LC1656
	.byte	163
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57543, %object
	.size	descriptor.57543, 24
descriptor.57543:
	.word	.LC1125
	.word	__func__.57517
	.word	.LC1641
	.word	.LC1655
	.byte	171
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57545, %object
	.size	descriptor.57545, 24
descriptor.57545:
	.word	.LC1125
	.word	__func__.57517
	.word	.LC1641
	.word	.LC1654
	.byte	178
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57547, %object
	.size	descriptor.57547, 24
descriptor.57547:
	.word	.LC1125
	.word	__func__.57517
	.word	.LC1641
	.word	.LC43
	.byte	185
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57550, %object
	.size	descriptor.57550, 24
descriptor.57550:
	.word	.LC1125
	.word	__func__.57517
	.word	.LC1641
	.word	.LC44
	.byte	189
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57553, %object
	.size	descriptor.57553, 24
descriptor.57553:
	.word	.LC1125
	.word	__func__.57517
	.word	.LC1641
	.word	.LC1653
	.byte	212
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63041, %object
	.size	descriptor.63041, 24
descriptor.63041:
	.word	.LC1125
	.word	__func__.63033
	.word	.LC1561
	.word	.LC1563
	.byte	115
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63044, %object
	.size	descriptor.63044, 24
descriptor.63044:
	.word	.LC1125
	.word	__func__.63033
	.word	.LC1561
	.word	.LC1564
	.byte	130
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30994, %object
	.size	descriptor.30994, 24
descriptor.30994:
	.word	.LC1125
	.word	__func__.30995
	.word	.LC1765
	.word	.LC835
	.byte	222
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30978, %object
	.size	descriptor.30978, 24
descriptor.30978:
	.word	.LC1125
	.word	__func__.30979
	.word	.LC1765
	.word	.LC836
	.byte	175
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49480, %object
	.size	descriptor.49480, 24
descriptor.49480:
	.word	.LC1125
	.word	__func__.49481
	.word	.LC1735
	.word	.LC177
	.byte	58
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38846, %object
	.size	descriptor.38846, 24
descriptor.38846:
	.word	.LC1125
	.word	__func__.38847
	.word	.LC1754
	.word	.LC596
	.byte	113
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49630, %object
	.size	descriptor.49630, 24
descriptor.49630:
	.word	.LC1125
	.word	__func__.49631
	.word	.LC1735
	.word	.LC838
	.byte	28
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47425, %object
	.size	descriptor.47425, 24
descriptor.47425:
	.word	.LC1125
	.word	__func__.47426
	.word	.LC680
	.word	.LC839
	.byte	143
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47433, %object
	.size	descriptor.47433, 24
descriptor.47433:
	.word	.LC1125
	.word	__func__.47426
	.word	.LC680
	.word	.LC840
	.byte	182
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.37592, %object
	.size	descriptor.37592, 24
descriptor.37592:
	.word	.LC1125
	.word	__func__.37591
	.word	.LC1759
	.word	.LC843
	.byte	211
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53847, %object
	.size	descriptor.53847, 24
descriptor.53847:
	.word	.LC1125
	.word	__func__.53848
	.word	.LC1710
	.word	.LC846
	.byte	39
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54332, %object
	.size	descriptor.54332, 24
descriptor.54332:
	.word	.LC1125
	.word	__func__.54333
	.word	.LC1708
	.word	.LC848
	.byte	142
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54334, %object
	.size	descriptor.54334, 24
descriptor.54334:
	.word	.LC1125
	.word	__func__.54333
	.word	.LC1708
	.word	.LC849
	.byte	170
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54342, %object
	.size	descriptor.54342, 24
descriptor.54342:
	.word	.LC1125
	.word	__func__.54333
	.word	.LC1708
	.word	.LC850
	.byte	197
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54345, %object
	.size	descriptor.54345, 24
descriptor.54345:
	.word	.LC1125
	.word	__func__.54333
	.word	.LC1708
	.word	.LC851
	.byte	219
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54363, %object
	.size	descriptor.54363, 24
descriptor.54363:
	.word	.LC1125
	.word	__func__.54364
	.word	.LC1708
	.word	.LC852
	.byte	249
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54372, %object
	.size	descriptor.54372, 24
descriptor.54372:
	.word	.LC1125
	.word	__func__.54364
	.word	.LC1708
	.word	.LC853
	.byte	54
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54375, %object
	.size	descriptor.54375, 24
descriptor.54375:
	.word	.LC1125
	.word	__func__.54364
	.word	.LC1708
	.word	.LC854
	.byte	70
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58230, %object
	.size	descriptor.58230, 24
descriptor.58230:
	.word	.LC1125
	.word	__func__.58231
	.word	.LC1617
	.word	.LC855
	.byte	149
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56431, %object
	.size	descriptor.56431, 24
descriptor.56431:
	.word	.LC1125
	.word	__func__.56432
	.word	.LC1704
	.word	.LC855
	.byte	121
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49989, %object
	.size	descriptor.49989, 24
descriptor.49989:
	.word	.LC1125
	.word	__func__.49990
	.word	.LC1730
	.word	.LC858
	.byte	61
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49994, %object
	.size	descriptor.49994, 24
descriptor.49994:
	.word	.LC1125
	.word	__func__.49990
	.word	.LC1730
	.word	.LC676
	.byte	81
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31946, %object
	.size	descriptor.31946, 24
descriptor.31946:
	.word	.LC1125
	.word	__func__.31947
	.word	.LC1764
	.word	.LC860
	.byte	200
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38128, %object
	.size	descriptor.38128, 24
descriptor.38128:
	.word	.LC1125
	.word	__func__.38129
	.word	.LC1756
	.word	.LC862
	.byte	236
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46292, %object
	.size	descriptor.46292, 24
descriptor.46292:
	.word	.LC1125
	.word	__func__.46293
	.word	.LC89
	.word	.LC887
	.byte	177
	.byte	13
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25217, %object
	.size	descriptor.25217, 24
descriptor.25217:
	.word	.LC1125
	.word	__func__.25218
	.word	.LC102
	.word	.LC896
	.byte	28
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25238, %object
	.size	descriptor.25238, 24
descriptor.25238:
	.word	.LC1125
	.word	__func__.25218
	.word	.LC102
	.word	.LC899
	.byte	83
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25231, %object
	.size	descriptor.25231, 24
descriptor.25231:
	.word	.LC1125
	.word	__func__.25218
	.word	.LC102
	.word	.LC897
	.byte	63
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25234, %object
	.size	descriptor.25234, 24
descriptor.25234:
	.word	.LC1125
	.word	__func__.25218
	.word	.LC102
	.word	.LC898
	.byte	71
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49337, %object
	.size	descriptor.49337, 24
descriptor.49337:
	.word	.LC1125
	.word	__func__.49338
	.word	.LC1735
	.word	.LC552
	.byte	151
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49150, %object
	.size	descriptor.49150, 24
descriptor.49150:
	.word	.LC1125
	.word	__func__.49151
	.word	.LC1735
	.word	.LC921
	.byte	173
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49152, %object
	.size	descriptor.49152, 24
descriptor.49152:
	.word	.LC1125
	.word	__func__.49151
	.word	.LC1735
	.word	.LC658
	.byte	178
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49398, %object
	.size	descriptor.49398, 24
descriptor.49398:
	.word	.LC1125
	.word	__func__.49397
	.word	.LC1735
	.word	.LC357
	.byte	35
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49453, %object
	.size	descriptor.49453, 24
descriptor.49453:
	.word	.LC1125
	.word	__func__.49454
	.word	.LC1735
	.word	.LC924
	.byte	214
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25056, %object
	.size	descriptor.25056, 24
descriptor.25056:
	.word	.LC1125
	.word	__func__.25057
	.word	.LC102
	.word	.LC929
	.byte	225
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25059, %object
	.size	descriptor.25059, 24
descriptor.25059:
	.word	.LC1125
	.word	__func__.25057
	.word	.LC102
	.word	.LC930
	.byte	2
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49188, %object
	.size	descriptor.49188, 24
descriptor.49188:
	.word	.LC1125
	.word	__func__.49189
	.word	.LC1735
	.word	.LC932
	.byte	11
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49203, %object
	.size	descriptor.49203, 24
descriptor.49203:
	.word	.LC1125
	.word	__func__.49204
	.word	.LC1735
	.word	.LC934
	.byte	53
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48403, %object
	.size	descriptor.48403, 24
descriptor.48403:
	.word	.LC1125
	.word	__func__.48404
	.word	.LC1739
	.word	.LC177
	.byte	18
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48373, %object
	.size	descriptor.48373, 24
descriptor.48373:
	.word	.LC1125
	.word	__func__.48374
	.word	.LC1739
	.word	.LC935
	.byte	182
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45714, %object
	.size	descriptor.45714, 24
descriptor.45714:
	.word	.LC1125
	.word	__func__.45711
	.word	.LC89
	.word	.LC939
	.byte	216
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46315, %object
	.size	descriptor.46315, 24
descriptor.46315:
	.word	.LC1125
	.word	__func__.46316
	.word	.LC89
	.word	.LC777
	.byte	243
	.byte	13
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56466, %object
	.size	descriptor.56466, 24
descriptor.56466:
	.word	.LC1125
	.word	__func__.56467
	.word	.LC1704
	.word	.LC82
	.byte	248
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56773, %object
	.size	descriptor.56773, 24
descriptor.56773:
	.word	.LC1125
	.word	__func__.56774
	.word	.LC1693
	.word	.LC945
	.byte	203
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58273, %object
	.size	descriptor.58273, 24
descriptor.58273:
	.word	.LC1125
	.word	__func__.58274
	.word	.LC1617
	.word	.LC82
	.byte	43
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25380, %object
	.size	descriptor.25380, 24
descriptor.25380:
	.word	.LC1125
	.word	__func__.25381
	.word	.LC102
	.word	.LC946
	.byte	192
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25382, %object
	.size	descriptor.25382, 24
descriptor.25382:
	.word	.LC1125
	.word	__func__.25381
	.word	.LC102
	.word	.LC947
	.byte	195
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25383, %object
	.size	descriptor.25383, 24
descriptor.25383:
	.word	.LC1125
	.word	__func__.25381
	.word	.LC102
	.word	.LC948
	.byte	199
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25178, %object
	.size	descriptor.25178, 24
descriptor.25178:
	.word	.LC1125
	.word	__func__.25179
	.word	.LC102
	.word	.LC951
	.byte	136
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25204, %object
	.size	descriptor.25204, 24
descriptor.25204:
	.word	.LC1125
	.word	__func__.25179
	.word	.LC102
	.word	.LC956
	.byte	234
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25205, %object
	.size	descriptor.25205, 24
descriptor.25205:
	.word	.LC1125
	.word	__func__.25179
	.word	.LC102
	.word	.LC957
	.byte	243
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25206, %object
	.size	descriptor.25206, 24
descriptor.25206:
	.word	.LC1125
	.word	__func__.25179
	.word	.LC102
	.word	.LC958
	.byte	246
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25418, %object
	.size	descriptor.25418, 24
descriptor.25418:
	.word	.LC1125
	.word	__func__.25381
	.word	.LC102
	.word	.LC957
	.byte	77
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25419, %object
	.size	descriptor.25419, 24
descriptor.25419:
	.word	.LC1125
	.word	__func__.25381
	.word	.LC102
	.word	.LC958
	.byte	80
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25442, %object
	.size	descriptor.25442, 24
descriptor.25442:
	.word	.LC1125
	.word	__func__.25381
	.word	.LC102
	.word	.LC957
	.byte	198
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25443, %object
	.size	descriptor.25443, 24
descriptor.25443:
	.word	.LC1125
	.word	__func__.25381
	.word	.LC102
	.word	.LC958
	.byte	201
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25445, %object
	.size	descriptor.25445, 24
descriptor.25445:
	.word	.LC1125
	.word	__func__.25381
	.word	.LC102
	.word	.LC963
	.byte	213
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47586, %object
	.size	descriptor.47586, 24
descriptor.47586:
	.word	.LC1125
	.word	__func__.47578
	.word	.LC680
	.word	.LC977
	.byte	138
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56460, %object
	.size	descriptor.56460, 24
descriptor.56460:
	.word	.LC1125
	.word	__func__.56461
	.word	.LC1704
	.word	.LC82
	.byte	237
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58267, %object
	.size	descriptor.58267, 24
descriptor.58267:
	.word	.LC1125
	.word	__func__.58268
	.word	.LC1617
	.word	.LC82
	.byte	32
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63832, %object
	.size	descriptor.63832, 24
descriptor.63832:
	.word	.LC1125
	.word	__func__.63833
	.word	.LC895
	.word	.LC1551
	.byte	161
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38382, %object
	.size	descriptor.38382, 24
descriptor.38382:
	.word	.LC1125
	.word	__func__.38381
	.word	.LC1756
	.word	.LC1000
	.byte	191
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38424, %object
	.size	descriptor.38424, 24
descriptor.38424:
	.word	.LC1125
	.word	__func__.38381
	.word	.LC1756
	.word	.LC1001
	.byte	14
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.37961, %object
	.size	descriptor.37961, 24
descriptor.37961:
	.word	.LC1125
	.word	__func__.37962
	.word	.LC1756
	.word	.LC1002
	.byte	125
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53413, %object
	.size	descriptor.53413, 24
descriptor.53413:
	.word	.LC1125
	.word	__func__.53414
	.word	.LC1712
	.word	.LC1004
	.byte	106
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53420, %object
	.size	descriptor.53420, 24
descriptor.53420:
	.word	.LC1125
	.word	__func__.53414
	.word	.LC1712
	.word	.LC286
	.byte	123
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53430, %object
	.size	descriptor.53430, 24
descriptor.53430:
	.word	.LC1125
	.word	__func__.53414
	.word	.LC1712
	.word	.LC286
	.byte	152
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53434, %object
	.size	descriptor.53434, 24
descriptor.53434:
	.word	.LC1125
	.word	__func__.53414
	.word	.LC1712
	.word	.LC286
	.byte	173
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53435, %object
	.size	descriptor.53435, 24
descriptor.53435:
	.word	.LC1125
	.word	__func__.53414
	.word	.LC1712
	.word	.LC1008
	.byte	182
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54414, %object
	.size	descriptor.54414, 24
descriptor.54414:
	.word	.LC1125
	.word	__func__.54415
	.word	.LC1708
	.word	.LC1011
	.byte	187
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54440, %object
	.size	descriptor.54440, 24
descriptor.54440:
	.word	.LC1125
	.word	__func__.54441
	.word	.LC1708
	.word	.LC1012
	.byte	55
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53542, %object
	.size	descriptor.53542, 24
descriptor.53542:
	.word	.LC1125
	.word	__func__.53543
	.word	.LC1712
	.word	.LC1015
	.byte	176
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38582, %object
	.size	descriptor.38582, 24
descriptor.38582:
	.word	.LC1125
	.word	__func__.38583
	.word	.LC1756
	.word	.LC1017
	.byte	196
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63571, %object
	.size	descriptor.63571, 24
descriptor.63571:
	.word	.LC1125
	.word	__func__.63572
	.word	.LC1554
	.word	.LC82
	.byte	18
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63577, %object
	.size	descriptor.63577, 24
descriptor.63577:
	.word	.LC1125
	.word	__func__.63578
	.word	.LC1554
	.word	.LC82
	.byte	30
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.64087, %object
	.size	descriptor.64087, 24
descriptor.64087:
	.word	.LC1125
	.word	__func__.64088
	.word	.LC895
	.word	.LC1540
	.byte	227
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57875, %object
	.size	descriptor.57875, 24
descriptor.57875:
	.word	.LC1125
	.word	__func__.57876
	.word	.LC1631
	.word	.LC1633
	.byte	239
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57877, %object
	.size	descriptor.57877, 24
descriptor.57877:
	.word	.LC1125
	.word	__func__.57876
	.word	.LC1631
	.word	.LC1632
	.byte	247
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58062, %object
	.size	descriptor.58062, 24
descriptor.58062:
	.word	.LC1125
	.word	__func__.58063
	.word	.LC1627
	.word	.LC82
	.byte	149
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58068, %object
	.size	descriptor.58068, 24
descriptor.58068:
	.word	.LC1125
	.word	__func__.58069
	.word	.LC1627
	.word	.LC82
	.byte	159
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57194, %object
	.size	descriptor.57194, 24
descriptor.57194:
	.word	.LC1125
	.word	__func__.57195
	.word	.LC1684
	.word	.LC82
	.byte	0
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57081, %object
	.size	descriptor.57081, 24
descriptor.57081:
	.word	.LC1125
	.word	__func__.57082
	.word	.LC1684
	.word	.LC23
	.byte	144
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57086, %object
	.size	descriptor.57086, 24
descriptor.57086:
	.word	.LC1125
	.word	__func__.57082
	.word	.LC1684
	.word	.LC25
	.byte	170
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57200, %object
	.size	descriptor.57200, 24
descriptor.57200:
	.word	.LC1125
	.word	__func__.57201
	.word	.LC1684
	.word	.LC82
	.byte	10
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57132, %object
	.size	descriptor.57132, 24
descriptor.57132:
	.word	.LC1125
	.word	__func__.57133
	.word	.LC1684
	.word	.LC22
	.byte	24
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57085, %object
	.size	descriptor.57085, 24
descriptor.57085:
	.word	.LC1125
	.word	__func__.57082
	.word	.LC1684
	.word	.LC24
	.byte	159
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53448, %object
	.size	descriptor.53448, 24
descriptor.53448:
	.word	.LC1125
	.word	__func__.53449
	.word	.LC1712
	.word	.LC1043
	.byte	196
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53450, %object
	.size	descriptor.53450, 24
descriptor.53450:
	.word	.LC1125
	.word	__func__.53449
	.word	.LC1712
	.word	.LC286
	.byte	199
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53458, %object
	.size	descriptor.53458, 24
descriptor.53458:
	.word	.LC1125
	.word	__func__.53449
	.word	.LC1712
	.word	.LC286
	.byte	232
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53459, %object
	.size	descriptor.53459, 24
descriptor.53459:
	.word	.LC1125
	.word	__func__.53449
	.word	.LC1712
	.word	.LC1045
	.byte	244
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53463, %object
	.size	descriptor.53463, 24
descriptor.53463:
	.word	.LC1125
	.word	__func__.53449
	.word	.LC1712
	.word	.LC286
	.byte	252
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53467, %object
	.size	descriptor.53467, 24
descriptor.53467:
	.word	.LC1125
	.word	__func__.53449
	.word	.LC1712
	.word	.LC1046
	.byte	6
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57502, %object
	.size	descriptor.57502, 24
descriptor.57502:
	.word	.LC1125
	.word	__func__.57501
	.word	.LC1641
	.word	.LC1635
	.byte	7
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57503, %object
	.size	descriptor.57503, 24
descriptor.57503:
	.word	.LC1125
	.word	__func__.57501
	.word	.LC1641
	.word	.LC1668
	.byte	15
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57504, %object
	.size	descriptor.57504, 24
descriptor.57504:
	.word	.LC1125
	.word	__func__.57501
	.word	.LC1641
	.word	.LC1667
	.byte	24
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38935, %object
	.size	descriptor.38935, 24
descriptor.38935:
	.word	.LC1125
	.word	__func__.38934
	.word	.LC1754
	.word	.LC157
	.byte	108
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38901, %object
	.size	descriptor.38901, 24
descriptor.38901:
	.word	.LC1125
	.word	__func__.38902
	.word	.LC1754
	.word	.LC1054
	.byte	243
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38909, %object
	.size	descriptor.38909, 24
descriptor.38909:
	.word	.LC1125
	.word	__func__.38902
	.word	.LC1754
	.word	.LC159
	.byte	17
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38912, %object
	.size	descriptor.38912, 24
descriptor.38912:
	.word	.LC1125
	.word	__func__.38902
	.word	.LC1754
	.word	.LC161
	.byte	27
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61969, %object
	.size	descriptor.61969, 24
descriptor.61969:
	.word	.LC1125
	.word	__func__.61967
	.word	.LC1594
	.word	.LC1598
	.byte	19
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62212, %object
	.size	descriptor.62212, 24
descriptor.62212:
	.word	.LC1125
	.word	__func__.62211
	.word	.LC1568
	.word	.LC1581
	.byte	51
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57669, %object
	.size	descriptor.57669, 24
descriptor.57669:
	.word	.LC1125
	.word	__func__.57670
	.word	.LC1641
	.word	.LC1644
	.byte	66
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57396, %object
	.size	descriptor.57396, 24
descriptor.57396:
	.word	.LC1125
	.word	__func__.57395
	.word	.LC1641
	.word	.LC1678
	.byte	186
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57382, %object
	.size	descriptor.57382, 24
descriptor.57382:
	.word	.LC1125
	.word	__func__.57383
	.word	.LC1641
	.word	.LC1681
	.byte	125
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57387, %object
	.size	descriptor.57387, 24
descriptor.57387:
	.word	.LC1125
	.word	__func__.57383
	.word	.LC1641
	.word	.LC1680
	.byte	149
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57388, %object
	.size	descriptor.57388, 24
descriptor.57388:
	.word	.LC1125
	.word	__func__.57383
	.word	.LC1641
	.word	.LC1679
	.byte	171
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57671, %object
	.size	descriptor.57671, 24
descriptor.57671:
	.word	.LC1125
	.word	__func__.57670
	.word	.LC1641
	.word	.LC1643
	.byte	114
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57211, %object
	.size	descriptor.57211, 24
descriptor.57211:
	.word	.LC1125
	.word	__func__.57212
	.word	.LC1684
	.word	.LC1077
	.byte	134
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57604, %object
	.size	descriptor.57604, 24
descriptor.57604:
	.word	.LC1125
	.word	__func__.57602
	.word	.LC1641
	.word	.LC1650
	.byte	74
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58079, %object
	.size	descriptor.58079, 24
descriptor.58079:
	.word	.LC1125
	.word	__func__.58080
	.word	.LC1627
	.word	.LC1077
	.byte	8
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61973, %object
	.size	descriptor.61973, 24
descriptor.61973:
	.word	.LC1125
	.word	__func__.61974
	.word	.LC1594
	.word	.LC1597
	.byte	35
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61983, %object
	.size	descriptor.61983, 24
descriptor.61983:
	.word	.LC1125
	.word	__func__.61984
	.word	.LC1594
	.word	.LC1597
	.byte	47
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61978, %object
	.size	descriptor.61978, 24
descriptor.61978:
	.word	.LC1125
	.word	__func__.61979
	.word	.LC1594
	.word	.LC1597
	.byte	41
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61988, %object
	.size	descriptor.61988, 24
descriptor.61988:
	.word	.LC1125
	.word	__func__.61989
	.word	.LC1594
	.word	.LC1597
	.byte	53
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63588, %object
	.size	descriptor.63588, 24
descriptor.63588:
	.word	.LC1125
	.word	__func__.63589
	.word	.LC1554
	.word	.LC1097
	.byte	126
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53377, %object
	.size	descriptor.53377, 24
descriptor.53377:
	.word	.LC1125
	.word	__func__.53374
	.word	.LC1712
	.word	.LC1101
	.byte	46
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30963, %object
	.size	descriptor.30963, 24
descriptor.30963:
	.word	.LC1125
	.word	__func__.30964
	.word	.LC1765
	.word	.LC1102
	.byte	69
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52907, %object
	.size	descriptor.52907, 24
descriptor.52907:
	.word	.LC1125
	.word	__func__.52908
	.word	.LC1716
	.word	.LC1109
	.byte	132
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56743, %object
	.size	descriptor.56743, 24
descriptor.56743:
	.word	.LC1125
	.word	__func__.56744
	.word	.LC1693
	.word	.LC1113
	.byte	155
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56748, %object
	.size	descriptor.56748, 24
descriptor.56748:
	.word	.LC1125
	.word	__func__.56744
	.word	.LC1693
	.word	.LC1114
	.byte	159
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56766, %object
	.size	descriptor.56766, 24
descriptor.56766:
	.word	.LC1125
	.word	__func__.56767
	.word	.LC1693
	.word	.LC267
	.byte	191
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56779, %object
	.size	descriptor.56779, 24
descriptor.56779:
	.word	.LC1125
	.word	__func__.56780
	.word	.LC1693
	.word	.LC267
	.byte	214
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56785, %object
	.size	descriptor.56785, 24
descriptor.56785:
	.word	.LC1125
	.word	__func__.56786
	.word	.LC1693
	.word	.LC267
	.byte	221
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58284, %object
	.size	descriptor.58284, 24
descriptor.58284:
	.word	.LC1125
	.word	__func__.58285
	.word	.LC1617
	.word	.LC1115
	.byte	186
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62967, %object
	.size	descriptor.62967, 24
descriptor.62967:
	.word	.LC1125
	.word	__func__.62968
	.word	.LC1561
	.word	.LC1126
	.byte	150
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62969, %object
	.size	descriptor.62969, 24
descriptor.62969:
	.word	.LC1125
	.word	__func__.62968
	.word	.LC1561
	.word	.LC1128
	.byte	157
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62970, %object
	.size	descriptor.62970, 24
descriptor.62970:
	.word	.LC1125
	.word	__func__.62968
	.word	.LC1561
	.word	.LC1565
	.byte	166
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55782, %object
	.size	descriptor.55782, 24
descriptor.55782:
	.word	.LC1125
	.word	__func__.55783
	.word	.LC58
	.word	.LC1124
	.byte	187
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55616, %object
	.size	descriptor.55616, 24
descriptor.55616:
	.word	.LC1125
	.word	__func__.55617
	.word	.LC58
	.word	.LC1126
	.byte	30
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55618, %object
	.size	descriptor.55618, 24
descriptor.55618:
	.word	.LC1125
	.word	__func__.55617
	.word	.LC58
	.word	.LC1127
	.byte	34
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55619, %object
	.size	descriptor.55619, 24
descriptor.55619:
	.word	.LC1125
	.word	__func__.55617
	.word	.LC58
	.word	.LC1128
	.byte	37
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55620, %object
	.size	descriptor.55620, 24
descriptor.55620:
	.word	.LC1125
	.word	__func__.55617
	.word	.LC58
	.word	.LC1129
	.byte	43
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55621, %object
	.size	descriptor.55621, 24
descriptor.55621:
	.word	.LC1125
	.word	__func__.55617
	.word	.LC58
	.word	.LC1130
	.byte	46
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55622, %object
	.size	descriptor.55622, 24
descriptor.55622:
	.word	.LC1125
	.word	__func__.55617
	.word	.LC58
	.word	.LC1129
	.byte	52
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55623, %object
	.size	descriptor.55623, 24
descriptor.55623:
	.word	.LC1125
	.word	__func__.55617
	.word	.LC58
	.word	.LC1130
	.byte	55
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55784, %object
	.size	descriptor.55784, 24
descriptor.55784:
	.word	.LC1125
	.word	__func__.55783
	.word	.LC58
	.word	.LC1132
	.byte	225
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54484, %object
	.size	descriptor.54484, 24
descriptor.54484:
	.word	.LC1125
	.word	__func__.54485
	.word	.LC1708
	.word	.LC1133
	.byte	197
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54260, %object
	.size	descriptor.54260, 24
descriptor.54260:
	.word	.LC1125
	.word	__func__.54261
	.word	.LC1708
	.word	.LC1126
	.byte	212
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54262, %object
	.size	descriptor.54262, 24
descriptor.54262:
	.word	.LC1125
	.word	__func__.54261
	.word	.LC1708
	.word	.LC1127
	.byte	216
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54263, %object
	.size	descriptor.54263, 24
descriptor.54263:
	.word	.LC1125
	.word	__func__.54261
	.word	.LC1708
	.word	.LC1128
	.byte	219
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54264, %object
	.size	descriptor.54264, 24
descriptor.54264:
	.word	.LC1125
	.word	__func__.54261
	.word	.LC1708
	.word	.LC1129
	.byte	225
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54265, %object
	.size	descriptor.54265, 24
descriptor.54265:
	.word	.LC1125
	.word	__func__.54261
	.word	.LC1708
	.word	.LC1134
	.byte	228
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54266, %object
	.size	descriptor.54266, 24
descriptor.54266:
	.word	.LC1125
	.word	__func__.54261
	.word	.LC1708
	.word	.LC1135
	.byte	234
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54267, %object
	.size	descriptor.54267, 24
descriptor.54267:
	.word	.LC1125
	.word	__func__.54261
	.word	.LC1708
	.word	.LC1136
	.byte	237
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54486, %object
	.size	descriptor.54486, 24
descriptor.54486:
	.word	.LC1125
	.word	__func__.54485
	.word	.LC1708
	.word	.LC1132
	.byte	229
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53113, %object
	.size	descriptor.53113, 24
descriptor.53113:
	.word	.LC1125
	.word	__func__.53114
	.word	.LC1715
	.word	.LC1138
	.byte	29
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53019, %object
	.size	descriptor.53019, 24
descriptor.53019:
	.word	.LC1125
	.word	__func__.53020
	.word	.LC1715
	.word	.LC1126
	.byte	14
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53021, %object
	.size	descriptor.53021, 24
descriptor.53021:
	.word	.LC1125
	.word	__func__.53020
	.word	.LC1715
	.word	.LC1127
	.byte	18
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53022, %object
	.size	descriptor.53022, 24
descriptor.53022:
	.word	.LC1125
	.word	__func__.53020
	.word	.LC1715
	.word	.LC1128
	.byte	21
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53023, %object
	.size	descriptor.53023, 24
descriptor.53023:
	.word	.LC1125
	.word	__func__.53020
	.word	.LC1715
	.word	.LC1129
	.byte	27
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53024, %object
	.size	descriptor.53024, 24
descriptor.53024:
	.word	.LC1125
	.word	__func__.53020
	.word	.LC1715
	.word	.LC1139
	.byte	30
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53115, %object
	.size	descriptor.53115, 24
descriptor.53115:
	.word	.LC1125
	.word	__func__.53114
	.word	.LC1715
	.word	.LC1132
	.byte	60
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.44868, %object
	.size	descriptor.44868, 24
descriptor.44868:
	.word	.LC1125
	.word	__func__.44869
	.word	.LC33
	.word	.LC1141
	.byte	38
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.44840, %object
	.size	descriptor.44840, 24
descriptor.44840:
	.word	.LC1125
	.word	__func__.44841
	.word	.LC33
	.word	.LC1142
	.byte	210
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.40996, %object
	.size	descriptor.40996, 24
descriptor.40996:
	.word	.LC1125
	.word	__func__.40997
	.word	.LC1753
	.word	.LC1148
	.byte	39
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55872, %object
	.size	descriptor.55872, 24
descriptor.55872:
	.word	.LC1125
	.word	__func__.55873
	.word	.LC58
	.word	.LC1151
	.byte	119
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54511, %object
	.size	descriptor.54511, 24
descriptor.54511:
	.word	.LC1125
	.word	__func__.54512
	.word	.LC1708
	.word	.LC1153
	.byte	0
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53133, %object
	.size	descriptor.53133, 24
descriptor.53133:
	.word	.LC1125
	.word	__func__.53134
	.word	.LC1715
	.word	.LC1158
	.byte	88
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31017, %object
	.size	descriptor.31017, 24
descriptor.31017:
	.word	.LC1125
	.word	__func__.31018
	.word	.LC1765
	.word	.LC1159
	.byte	20
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31029, %object
	.size	descriptor.31029, 24
descriptor.31029:
	.word	.LC1125
	.word	__func__.31030
	.word	.LC1765
	.word	.LC1168
	.byte	86
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31041, %object
	.size	descriptor.31041, 24
descriptor.31041:
	.word	.LC1125
	.word	__func__.31030
	.word	.LC1765
	.word	.LC1170
	.byte	111
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58713, %object
	.size	descriptor.58713, 24
descriptor.58713:
	.word	.LC1125
	.word	__func__.58714
	.word	.LC1613
	.word	.LC1189
	.byte	76
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.65142, %object
	.size	descriptor.65142, 24
descriptor.65142:
	.word	.LC1125
	.word	__func__.65143
	.word	.LC895
	.word	.LC1194
	.byte	238
	.byte	14
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.65146, %object
	.size	descriptor.65146, 24
descriptor.65146:
	.word	.LC1125
	.word	__func__.65143
	.word	.LC895
	.word	.LC1497
	.byte	19
	.byte	15
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.65157, %object
	.size	descriptor.65157, 24
descriptor.65157:
	.word	.LC1125
	.word	__func__.65143
	.word	.LC895
	.word	.LC1206
	.byte	72
	.byte	15
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25535, %object
	.size	descriptor.25535, 24
descriptor.25535:
	.word	.LC1125
	.word	__func__.25536
	.word	.LC102
	.word	.LC82
	.byte	49
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25542, %object
	.size	descriptor.25542, 24
descriptor.25542:
	.word	.LC1125
	.word	__func__.25536
	.word	.LC102
	.word	.LC1218
	.byte	56
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25543, %object
	.size	descriptor.25543, 24
descriptor.25543:
	.word	.LC1125
	.word	__func__.25536
	.word	.LC102
	.word	.LC963
	.byte	60
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46203, %object
	.size	descriptor.46203, 24
descriptor.46203:
	.word	.LC1125
	.word	__func__.46204
	.word	.LC89
	.word	.LC1219
	.byte	211
	.byte	11
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46138, %object
	.size	descriptor.46138, 24
descriptor.46138:
	.word	.LC1125
	.word	__func__.46139
	.word	.LC89
	.word	.LC1221
	.byte	201
	.byte	10
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46011, %object
	.size	descriptor.46011, 24
descriptor.46011:
	.word	.LC1125
	.word	__func__.46012
	.word	.LC89
	.word	.LC1222
	.byte	237
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46140, %object
	.size	descriptor.46140, 24
descriptor.46140:
	.word	.LC1125
	.word	__func__.46139
	.word	.LC89
	.word	.LC1224
	.byte	224
	.byte	10
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45977, %object
	.size	descriptor.45977, 24
descriptor.45977:
	.word	.LC1125
	.word	__func__.45978
	.word	.LC89
	.word	.LC1242
	.byte	124
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45889, %object
	.size	descriptor.45889, 24
descriptor.45889:
	.word	.LC1125
	.word	__func__.45890
	.word	.LC89
	.word	.LC1247
	.byte	45
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45891, %object
	.size	descriptor.45891, 24
descriptor.45891:
	.word	.LC1125
	.word	__func__.45890
	.word	.LC89
	.word	.LC1248
	.byte	49
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45796, %object
	.size	descriptor.45796, 24
descriptor.45796:
	.word	.LC1125
	.word	__func__.45797
	.word	.LC89
	.word	.LC715
	.byte	16
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45798, %object
	.size	descriptor.45798, 24
descriptor.45798:
	.word	.LC1125
	.word	__func__.45797
	.word	.LC89
	.word	.LC716
	.byte	20
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.26108, %object
	.size	descriptor.26108, 24
descriptor.26108:
	.word	.LC1125
	.word	__func__.26109
	.word	.LC1769
	.word	.LC1260
	.byte	202
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30832, %object
	.size	descriptor.30832, 24
descriptor.30832:
	.word	.LC1125
	.word	__func__.30833
	.word	.LC1768
	.word	.LC1264
	.byte	35
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31006, %object
	.size	descriptor.31006, 24
descriptor.31006:
	.word	.LC1125
	.word	__func__.31007
	.word	.LC1765
	.word	.LC1267
	.byte	244
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30850, %object
	.size	descriptor.30850, 24
descriptor.30850:
	.word	.LC1125
	.word	__func__.30851
	.word	.LC1768
	.word	.LC1268
	.byte	115
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30852, %object
	.size	descriptor.30852, 24
descriptor.30852:
	.word	.LC1125
	.word	__func__.30851
	.word	.LC1768
	.word	.LC1271
	.byte	122
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30914, %object
	.size	descriptor.30914, 24
descriptor.30914:
	.word	.LC1125
	.word	__func__.30915
	.word	.LC1765
	.word	.LC1275
	.byte	229
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30934, %object
	.size	descriptor.30934, 24
descriptor.30934:
	.word	.LC1125
	.word	__func__.30935
	.word	.LC1765
	.word	.LC1277
	.byte	2
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31057, %object
	.size	descriptor.31057, 24
descriptor.31057:
	.word	.LC1125
	.word	__func__.31058
	.word	.LC1765
	.word	.LC1281
	.byte	164
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31074, %object
	.size	descriptor.31074, 24
descriptor.31074:
	.word	.LC1125
	.word	__func__.31075
	.word	.LC1765
	.word	.LC1284
	.byte	209
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31097, %object
	.size	descriptor.31097, 24
descriptor.31097:
	.word	.LC1125
	.word	__func__.31098
	.word	.LC1765
	.word	.LC1286
	.byte	0
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31109, %object
	.size	descriptor.31109, 24
descriptor.31109:
	.word	.LC1125
	.word	__func__.31098
	.word	.LC1765
	.word	.LC1288
	.byte	17
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31113, %object
	.size	descriptor.31113, 24
descriptor.31113:
	.word	.LC1125
	.word	__func__.31098
	.word	.LC1765
	.word	.LC1289
	.byte	33
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31122, %object
	.size	descriptor.31122, 24
descriptor.31122:
	.word	.LC1125
	.word	__func__.31123
	.word	.LC1765
	.word	.LC1290
	.byte	58
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47406, %object
	.size	descriptor.47406, 24
descriptor.47406:
	.word	.LC1125
	.word	__func__.47407
	.word	.LC680
	.word	.LC1292
	.byte	78
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47410, %object
	.size	descriptor.47410, 24
descriptor.47410:
	.word	.LC1125
	.word	__func__.47407
	.word	.LC680
	.word	.LC1293
	.byte	100
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47411, %object
	.size	descriptor.47411, 24
descriptor.47411:
	.word	.LC1125
	.word	__func__.47407
	.word	.LC680
	.word	.LC1294
	.byte	107
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47624, %object
	.size	descriptor.47624, 24
descriptor.47624:
	.word	.LC1125
	.word	__func__.47625
	.word	.LC680
	.word	.LC1295
	.byte	16
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52839, %object
	.size	descriptor.52839, 24
descriptor.52839:
	.word	.LC1125
	.word	__func__.52840
	.word	.LC1716
	.word	.LC1296
	.byte	136
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52831, %object
	.size	descriptor.52831, 24
descriptor.52831:
	.word	.LC1125
	.word	__func__.52832
	.word	.LC1716
	.word	.LC1297
	.byte	92
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52833, %object
	.size	descriptor.52833, 24
descriptor.52833:
	.word	.LC1125
	.word	__func__.52832
	.word	.LC1716
	.word	.LC1298
	.byte	100
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48716, %object
	.size	descriptor.48716, 24
descriptor.48716:
	.word	.LC1125
	.word	__func__.48717
	.word	.LC1736
	.word	.LC1299
	.byte	25
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48720, %object
	.size	descriptor.48720, 24
descriptor.48720:
	.word	.LC1125
	.word	__func__.48717
	.word	.LC1736
	.word	.LC1300
	.byte	32
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48688, %object
	.size	descriptor.48688, 24
descriptor.48688:
	.word	.LC1125
	.word	__func__.48689
	.word	.LC1736
	.word	.LC1301
	.byte	164
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48722, %object
	.size	descriptor.48722, 24
descriptor.48722:
	.word	.LC1125
	.word	__func__.48717
	.word	.LC1736
	.word	.LC1304
	.byte	37
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48212, %object
	.size	descriptor.48212, 24
descriptor.48212:
	.word	.LC1125
	.word	__func__.48213
	.word	.LC1739
	.word	.LC655
	.byte	157
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48214, %object
	.size	descriptor.48214, 24
descriptor.48214:
	.word	.LC1125
	.word	__func__.48213
	.word	.LC1739
	.word	.LC658
	.byte	162
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48225, %object
	.size	descriptor.48225, 24
descriptor.48225:
	.word	.LC1125
	.word	__func__.48224
	.word	.LC1739
	.word	.LC228
	.byte	183
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48226, %object
	.size	descriptor.48226, 24
descriptor.48226:
	.word	.LC1125
	.word	__func__.48224
	.word	.LC1739
	.word	.LC225
	.byte	188
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48228, %object
	.size	descriptor.48228, 24
descriptor.48228:
	.word	.LC1125
	.word	__func__.48224
	.word	.LC1739
	.word	.LC1305
	.byte	193
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48233, %object
	.size	descriptor.48233, 24
descriptor.48233:
	.word	.LC1125
	.word	__func__.48224
	.word	.LC1739
	.word	.LC225
	.byte	222
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48259, %object
	.size	descriptor.48259, 24
descriptor.48259:
	.word	.LC1125
	.word	__func__.48260
	.word	.LC1739
	.word	.LC1306
	.byte	57
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48261, %object
	.size	descriptor.48261, 24
descriptor.48261:
	.word	.LC1125
	.word	__func__.48260
	.word	.LC1739
	.word	.LC1307
	.byte	62
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48266, %object
	.size	descriptor.48266, 24
descriptor.48266:
	.word	.LC1125
	.word	__func__.48260
	.word	.LC1739
	.word	.LC1308
	.byte	77
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48246, %object
	.size	descriptor.48246, 24
descriptor.48246:
	.word	.LC1125
	.word	__func__.48245
	.word	.LC1739
	.word	.LC1311
	.byte	253
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48247, %object
	.size	descriptor.48247, 24
descriptor.48247:
	.word	.LC1125
	.word	__func__.48245
	.word	.LC1739
	.word	.LC1312
	.byte	0
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48248, %object
	.size	descriptor.48248, 24
descriptor.48248:
	.word	.LC1125
	.word	__func__.48245
	.word	.LC1739
	.word	.LC1313
	.byte	6
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48249, %object
	.size	descriptor.48249, 24
descriptor.48249:
	.word	.LC1125
	.word	__func__.48245
	.word	.LC1739
	.word	.LC1314
	.byte	13
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48308, %object
	.size	descriptor.48308, 24
descriptor.48308:
	.word	.LC1125
	.word	__func__.48307
	.word	.LC1739
	.word	.LC1316
	.byte	212
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48319, %object
	.size	descriptor.48319, 24
descriptor.48319:
	.word	.LC1125
	.word	__func__.48320
	.word	.LC1739
	.word	.LC224
	.byte	222
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48329, %object
	.size	descriptor.48329, 24
descriptor.48329:
	.word	.LC1125
	.word	__func__.48320
	.word	.LC1739
	.word	.LC1318
	.byte	247
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48340, %object
	.size	descriptor.48340, 24
descriptor.48340:
	.word	.LC1125
	.word	__func__.48341
	.word	.LC1739
	.word	.LC267
	.byte	57
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48380, %object
	.size	descriptor.48380, 24
descriptor.48380:
	.word	.LC1125
	.word	__func__.48381
	.word	.LC1739
	.word	.LC1324
	.byte	204
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48438, %object
	.size	descriptor.48438, 24
descriptor.48438:
	.word	.LC1125
	.word	__func__.48432
	.word	.LC1739
	.word	.LC1326
	.byte	135
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48439, %object
	.size	descriptor.48439, 24
descriptor.48439:
	.word	.LC1125
	.word	__func__.48432
	.word	.LC1739
	.word	.LC228
	.byte	139
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48451, %object
	.size	descriptor.48451, 24
descriptor.48451:
	.word	.LC1125
	.word	__func__.48447
	.word	.LC1739
	.word	.LC1328
	.byte	188
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48515, %object
	.size	descriptor.48515, 24
descriptor.48515:
	.word	.LC1125
	.word	__func__.48516
	.word	.LC1739
	.word	.LC1329
	.byte	91
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48761, %object
	.size	descriptor.48761, 24
descriptor.48761:
	.word	.LC1125
	.word	__func__.48762
	.word	.LC1736
	.word	.LC1335
	.byte	148
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48772, %object
	.size	descriptor.48772, 24
descriptor.48772:
	.word	.LC1125
	.word	__func__.48773
	.word	.LC1736
	.word	.LC1335
	.byte	198
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48873, %object
	.size	descriptor.48873, 24
descriptor.48873:
	.word	.LC1125
	.word	__func__.48874
	.word	.LC1736
	.word	.LC1337
	.byte	181
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48821, %object
	.size	descriptor.48821, 24
descriptor.48821:
	.word	.LC1125
	.word	__func__.48822
	.word	.LC1736
	.word	.LC607
	.byte	77
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49578, %object
	.size	descriptor.49578, 24
descriptor.49578:
	.word	.LC1125
	.word	__func__.49579
	.word	.LC1735
	.word	.LC1344
	.byte	65
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49594, %object
	.size	descriptor.49594, 24
descriptor.49594:
	.word	.LC1125
	.word	__func__.49595
	.word	.LC1735
	.word	.LC1344
	.byte	133
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49605, %object
	.size	descriptor.49605, 24
descriptor.49605:
	.word	.LC1125
	.word	__func__.49606
	.word	.LC1735
	.word	.LC1348
	.byte	218
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49509, %object
	.size	descriptor.49509, 24
descriptor.49509:
	.word	.LC1125
	.word	__func__.49510
	.word	.LC1735
	.word	.LC607
	.byte	151
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49522, %object
	.size	descriptor.49522, 24
descriptor.49522:
	.word	.LC1125
	.word	__func__.49523
	.word	.LC1735
	.word	.LC607
	.byte	181
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49811, %object
	.size	descriptor.49811, 24
descriptor.49811:
	.word	.LC1125
	.word	__func__.49812
	.word	.LC1731
	.word	.LC1344
	.byte	161
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49833, %object
	.size	descriptor.49833, 24
descriptor.49833:
	.word	.LC1125
	.word	__func__.49834
	.word	.LC1731
	.word	.LC1344
	.byte	217
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49900, %object
	.size	descriptor.49900, 24
descriptor.49900:
	.word	.LC1125
	.word	__func__.49901
	.word	.LC1731
	.word	.LC1354
	.byte	121
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49889, %object
	.size	descriptor.49889, 24
descriptor.49889:
	.word	.LC1125
	.word	__func__.49890
	.word	.LC1731
	.word	.LC607
	.byte	110
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50020, %object
	.size	descriptor.50020, 24
descriptor.50020:
	.word	.LC1125
	.word	__func__.50021
	.word	.LC1730
	.word	.LC1360
	.byte	144
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50031, %object
	.size	descriptor.50031, 24
descriptor.50031:
	.word	.LC1125
	.word	__func__.50032
	.word	.LC1730
	.word	.LC1360
	.byte	174
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51006, %object
	.size	descriptor.51006, 24
descriptor.51006:
	.word	.LC1125
	.word	__func__.51007
	.word	.LC1728
	.word	.LC564
	.byte	221
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51025, %object
	.size	descriptor.51025, 24
descriptor.51025:
	.word	.LC1125
	.word	__func__.51026
	.word	.LC1728
	.word	.LC564
	.byte	22
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51103, %object
	.size	descriptor.51103, 24
descriptor.51103:
	.word	.LC1125
	.word	__func__.51102
	.word	.LC1728
	.word	.LC1354
	.byte	5
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51087, %object
	.size	descriptor.51087, 24
descriptor.51087:
	.word	.LC1125
	.word	__func__.51083
	.word	.LC1728
	.word	.LC607
	.byte	218
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51612, %object
	.size	descriptor.51612, 24
descriptor.51612:
	.word	.LC1125
	.word	__func__.51613
	.word	.LC1727
	.word	.LC564
	.byte	226
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51629, %object
	.size	descriptor.51629, 24
descriptor.51629:
	.word	.LC1125
	.word	__func__.51630
	.word	.LC1727
	.word	.LC564
	.byte	21
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51775, %object
	.size	descriptor.51775, 24
descriptor.51775:
	.word	.LC1125
	.word	__func__.51774
	.word	.LC1727
	.word	.LC1365
	.byte	133
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51605, %object
	.size	descriptor.51605, 24
descriptor.51605:
	.word	.LC1125
	.word	__func__.51598
	.word	.LC1727
	.word	.LC164
	.byte	216
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52011, %object
	.size	descriptor.52011, 24
descriptor.52011:
	.word	.LC1125
	.word	__func__.52012
	.word	.LC1726
	.word	.LC564
	.byte	6
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52029, %object
	.size	descriptor.52029, 24
descriptor.52029:
	.word	.LC1125
	.word	__func__.52030
	.word	.LC1726
	.word	.LC564
	.byte	57
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52082, %object
	.size	descriptor.52082, 24
descriptor.52082:
	.word	.LC1125
	.word	__func__.52081
	.word	.LC1726
	.word	.LC1354
	.byte	204
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52072, %object
	.size	descriptor.52072, 24
descriptor.52072:
	.word	.LC1125
	.word	__func__.52068
	.word	.LC1726
	.word	.LC607
	.byte	186
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52560, %object
	.size	descriptor.52560, 24
descriptor.52560:
	.word	.LC1125
	.word	__func__.52561
	.word	.LC1721
	.word	.LC564
	.byte	78
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38876, %object
	.size	descriptor.38876, 24
descriptor.38876:
	.word	.LC1125
	.word	__func__.38877
	.word	.LC1754
	.word	.LC564
	.byte	172
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38801, %object
	.size	descriptor.38801, 24
descriptor.38801:
	.word	.LC1125
	.word	__func__.38802
	.word	.LC1754
	.word	.LC1367
	.byte	21
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52580, %object
	.size	descriptor.52580, 24
descriptor.52580:
	.word	.LC1125
	.word	__func__.52581
	.word	.LC1721
	.word	.LC564
	.byte	137
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38887, %object
	.size	descriptor.38887, 24
descriptor.38887:
	.word	.LC1125
	.word	__func__.38888
	.word	.LC1754
	.word	.LC153
	.byte	192
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38889, %object
	.size	descriptor.38889, 24
descriptor.38889:
	.word	.LC1125
	.word	__func__.38888
	.word	.LC1754
	.word	.LC1368
	.byte	195
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38778, %object
	.size	descriptor.38778, 24
descriptor.38778:
	.word	.LC1125
	.word	__func__.38779
	.word	.LC1754
	.word	.LC1367
	.byte	149
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52664, %object
	.size	descriptor.52664, 24
descriptor.52664:
	.word	.LC1125
	.word	__func__.52663
	.word	.LC1721
	.word	.LC1365
	.byte	94
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52552, %object
	.size	descriptor.52552, 24
descriptor.52552:
	.word	.LC1125
	.word	__func__.52544
	.word	.LC1721
	.word	.LC607
	.byte	67
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.39050, %object
	.size	descriptor.39050, 24
descriptor.39050:
	.word	.LC1125
	.word	__func__.39049
	.word	.LC1754
	.word	.LC1378
	.byte	4
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38751, %object
	.size	descriptor.38751, 24
descriptor.38751:
	.word	.LC1125
	.word	__func__.38752
	.word	.LC1754
	.word	.LC1382
	.byte	60
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.39027, %object
	.size	descriptor.39027, 24
descriptor.39027:
	.word	.LC1125
	.word	__func__.39028
	.word	.LC1754
	.word	.LC1383
	.byte	171
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.39032, %object
	.size	descriptor.39032, 24
descriptor.39032:
	.word	.LC1125
	.word	__func__.39028
	.word	.LC1754
	.word	.LC1389
	.byte	221
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56720, %object
	.size	descriptor.56720, 24
descriptor.56720:
	.word	.LC1125
	.word	__func__.56721
	.word	.LC1693
	.word	.LC1392
	.byte	70
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56723, %object
	.size	descriptor.56723, 24
descriptor.56723:
	.word	.LC1125
	.word	__func__.56721
	.word	.LC1693
	.word	.LC1393
	.byte	77
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56639, %object
	.size	descriptor.56639, 24
descriptor.56639:
	.word	.LC1125
	.word	__func__.56633
	.word	.LC1693
	.word	.LC1394
	.byte	27
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56642, %object
	.size	descriptor.56642, 24
descriptor.56642:
	.word	.LC1125
	.word	__func__.56633
	.word	.LC1693
	.word	.LC640
	.byte	48
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56727, %object
	.size	descriptor.56727, 24
descriptor.56727:
	.word	.LC1125
	.word	__func__.56721
	.word	.LC1693
	.word	.LC1396
	.byte	95
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56732, %object
	.size	descriptor.56732, 24
descriptor.56732:
	.word	.LC1125
	.word	__func__.56721
	.word	.LC1693
	.word	.LC1398
	.byte	132
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56410, %object
	.size	descriptor.56410, 24
descriptor.56410:
	.word	.LC1125
	.word	__func__.56411
	.word	.LC1704
	.word	.LC1400
	.byte	52
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58210, %object
	.size	descriptor.58210, 24
descriptor.58210:
	.word	.LC1125
	.word	__func__.58209
	.word	.LC1617
	.word	.LC1622
	.byte	85
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56759, %object
	.size	descriptor.56759, 24
descriptor.56759:
	.word	.LC1125
	.word	__func__.56760
	.word	.LC1693
	.word	.LC267
	.byte	174
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56477, %object
	.size	descriptor.56477, 24
descriptor.56477:
	.word	.LC1125
	.word	__func__.56478
	.word	.LC1704
	.word	.LC1115
	.byte	109
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57228, %object
	.size	descriptor.57228, 24
descriptor.57228:
	.word	.LC1125
	.word	__func__.57227
	.word	.LC1684
	.word	.LC1688
	.byte	219
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57229, %object
	.size	descriptor.57229, 24
descriptor.57229:
	.word	.LC1125
	.word	__func__.57227
	.word	.LC1684
	.word	.LC1687
	.byte	252
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58843, %object
	.size	descriptor.58843, 24
descriptor.58843:
	.word	.LC1125
	.word	__func__.58844
	.word	.LC1609
	.word	.LC1611
	.byte	241
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58845, %object
	.size	descriptor.58845, 24
descriptor.58845:
	.word	.LC1125
	.word	__func__.58844
	.word	.LC1609
	.word	.LC1610
	.byte	243
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57230, %object
	.size	descriptor.57230, 24
descriptor.57230:
	.word	.LC1125
	.word	__func__.57227
	.word	.LC1684
	.word	.LC1686
	.byte	41
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57231, %object
	.size	descriptor.57231, 24
descriptor.57231:
	.word	.LC1125
	.word	__func__.57227
	.word	.LC1684
	.word	.LC1685
	.byte	48
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57861, %object
	.size	descriptor.57861, 24
descriptor.57861:
	.word	.LC1125
	.word	__func__.57862
	.word	.LC1631
	.word	.LC1635
	.byte	166
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57575, %object
	.size	descriptor.57575, 24
descriptor.57575:
	.word	.LC1125
	.word	__func__.57573
	.word	.LC1641
	.word	.LC1651
	.byte	116
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56453, %object
	.size	descriptor.56453, 24
descriptor.56453:
	.word	.LC1125
	.word	__func__.56454
	.word	.LC1704
	.word	.LC1439
	.byte	214
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56444, %object
	.size	descriptor.56444, 24
descriptor.56444:
	.word	.LC1125
	.word	__func__.56445
	.word	.LC1704
	.word	.LC1440
	.byte	158
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56446, %object
	.size	descriptor.56446, 24
descriptor.56446:
	.word	.LC1125
	.word	__func__.56445
	.word	.LC1704
	.word	.LC1441
	.byte	163
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56447, %object
	.size	descriptor.56447, 24
descriptor.56447:
	.word	.LC1125
	.word	__func__.56445
	.word	.LC1704
	.word	.LC1442
	.byte	191
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58056, %object
	.size	descriptor.58056, 24
descriptor.58056:
	.word	.LC1125
	.word	__func__.58057
	.word	.LC1627
	.word	.LC1443
	.byte	113
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58041, %object
	.size	descriptor.58041, 24
descriptor.58041:
	.word	.LC1125
	.word	__func__.58042
	.word	.LC1627
	.word	.LC1444
	.byte	46
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58043, %object
	.size	descriptor.58043, 24
descriptor.58043:
	.word	.LC1125
	.word	__func__.58042
	.word	.LC1627
	.word	.LC1445
	.byte	52
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58045, %object
	.size	descriptor.58045, 24
descriptor.58045:
	.word	.LC1125
	.word	__func__.58042
	.word	.LC1627
	.word	.LC1446
	.byte	75
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63565, %object
	.size	descriptor.63565, 24
descriptor.63565:
	.word	.LC1125
	.word	__func__.63566
	.word	.LC1554
	.word	.LC1447
	.byte	238
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63500, %object
	.size	descriptor.63500, 24
descriptor.63500:
	.word	.LC1125
	.word	__func__.63501
	.word	.LC1554
	.word	.LC1448
	.byte	129
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63502, %object
	.size	descriptor.63502, 24
descriptor.63502:
	.word	.LC1125
	.word	__func__.63501
	.word	.LC1554
	.word	.LC1449
	.byte	134
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63503, %object
	.size	descriptor.63503, 24
descriptor.63503:
	.word	.LC1125
	.word	__func__.63501
	.word	.LC1554
	.word	.LC1450
	.byte	150
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63505, %object
	.size	descriptor.63505, 24
descriptor.63505:
	.word	.LC1125
	.word	__func__.63501
	.word	.LC1554
	.word	.LC1452
	.byte	168
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58859, %object
	.size	descriptor.58859, 24
descriptor.58859:
	.word	.LC1125
	.word	__func__.58860
	.word	.LC1609
	.word	.LC1189
	.byte	62
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.64038, %object
	.size	descriptor.64038, 24
descriptor.64038:
	.word	.LC1125
	.word	__func__.64037
	.word	.LC895
	.word	.LC1544
	.byte	122
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57178, %object
	.size	descriptor.57178, 24
descriptor.57178:
	.word	.LC1125
	.word	__func__.57179
	.word	.LC1684
	.word	.LC1443
	.byte	204
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57109, %object
	.size	descriptor.57109, 24
descriptor.57109:
	.word	.LC1125
	.word	__func__.57110
	.word	.LC1684
	.word	.LC1691
	.byte	238
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57163, %object
	.size	descriptor.57163, 24
descriptor.57163:
	.word	.LC1125
	.word	__func__.57164
	.word	.LC1684
	.word	.LC1444
	.byte	125
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57165, %object
	.size	descriptor.57165, 24
descriptor.57165:
	.word	.LC1125
	.word	__func__.57164
	.word	.LC1684
	.word	.LC1445
	.byte	137
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57167, %object
	.size	descriptor.57167, 24
descriptor.57167:
	.word	.LC1125
	.word	__func__.57164
	.word	.LC1684
	.word	.LC1446
	.byte	160
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57105, %object
	.size	descriptor.57105, 24
descriptor.57105:
	.word	.LC1125
	.word	__func__.57104
	.word	.LC1684
	.word	.LC1692
	.byte	227
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58167, %object
	.size	descriptor.58167, 24
descriptor.58167:
	.word	.LC1125
	.word	__func__.58168
	.word	.LC1617
	.word	.LC1623
	.byte	203
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58243, %object
	.size	descriptor.58243, 24
descriptor.58243:
	.word	.LC1125
	.word	__func__.58244
	.word	.LC1617
	.word	.LC1440
	.byte	187
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58245, %object
	.size	descriptor.58245, 24
descriptor.58245:
	.word	.LC1125
	.word	__func__.58244
	.word	.LC1617
	.word	.LC1441
	.byte	197
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58246, %object
	.size	descriptor.58246, 24
descriptor.58246:
	.word	.LC1125
	.word	__func__.58244
	.word	.LC1617
	.word	.LC1462
	.byte	228
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61998, %object
	.size	descriptor.61998, 24
descriptor.61998:
	.word	.LC1125
	.word	__func__.61996
	.word	.LC1594
	.word	.LC1596
	.byte	92
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61920, %object
	.size	descriptor.61920, 24
descriptor.61920:
	.word	.LC1125
	.word	__func__.61921
	.word	.LC1594
	.word	.LC1604
	.byte	85
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61926, %object
	.size	descriptor.61926, 24
descriptor.61926:
	.word	.LC1125
	.word	__func__.61927
	.word	.LC1594
	.word	.LC1603
	.byte	128
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62003, %object
	.size	descriptor.62003, 24
descriptor.62003:
	.word	.LC1125
	.word	__func__.62004
	.word	.LC1594
	.word	.LC1595
	.byte	132
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62946, %object
	.size	descriptor.62946, 24
descriptor.62946:
	.word	.LC1125
	.word	__func__.62947
	.word	.LC1561
	.word	.LC1563
	.byte	109
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.64497, %object
	.size	descriptor.64497, 24
descriptor.64497:
	.word	.LC1125
	.word	__func__.64498
	.word	.LC895
	.word	.LC1523
	.byte	232
	.byte	9
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56729, %object
	.size	descriptor.56729, 24
descriptor.56729:
	.word	.LC1125
	.word	__func__.56721
	.word	.LC1693
	.word	.LC1694
	.byte	103
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56634, %object
	.size	descriptor.56634, 24
descriptor.56634:
	.word	.LC1125
	.word	__func__.56633
	.word	.LC1693
	.word	.LC1695
	.byte	11
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56632, %object
	.size	descriptor.56632, 24
descriptor.56632:
	.word	.LC1125
	.word	__func__.56633
	.word	.LC1693
	.word	.LC1696
	.byte	5
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56601, %object
	.size	descriptor.56601, 24
descriptor.56601:
	.word	.LC1125
	.word	__func__.56553
	.word	.LC1693
	.word	.LC1697
	.byte	145
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56599, %object
	.size	descriptor.56599, 24
descriptor.56599:
	.word	.LC1125
	.word	__func__.56553
	.word	.LC1693
	.word	.LC1698
	.byte	135
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56597, %object
	.size	descriptor.56597, 24
descriptor.56597:
	.word	.LC1125
	.word	__func__.56553
	.word	.LC1693
	.word	.LC1699
	.byte	124
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56595, %object
	.size	descriptor.56595, 24
descriptor.56595:
	.word	.LC1125
	.word	__func__.56553
	.word	.LC1693
	.word	.LC1700
	.byte	113
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56589, %object
	.size	descriptor.56589, 24
descriptor.56589:
	.word	.LC1125
	.word	__func__.56553
	.word	.LC1693
	.word	.LC1701
	.byte	84
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56573, %object
	.size	descriptor.56573, 24
descriptor.56573:
	.word	.LC1125
	.word	__func__.56553
	.word	.LC1693
	.word	.LC1702
	.byte	7
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56554, %object
	.size	descriptor.56554, 24
descriptor.56554:
	.word	.LC1125
	.word	__func__.56553
	.word	.LC1693
	.word	.LC1695
	.byte	197
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56552, %object
	.size	descriptor.56552, 24
descriptor.56552:
	.word	.LC1125
	.word	__func__.56553
	.word	.LC1693
	.word	.LC1703
	.byte	191
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52442, %object
	.size	descriptor.52442, 24
descriptor.52442:
	.word	.LC1125
	.word	__func__.52443
	.word	.LC1721
	.word	.LC1722
	.byte	250
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52397, %object
	.size	descriptor.52397, 24
descriptor.52397:
	.word	.LC1125
	.word	__func__.52398
	.word	.LC1721
	.word	.LC552
	.byte	145
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52292, %object
	.size	descriptor.52292, 24
descriptor.52292:
	.word	.LC1125
	.word	__func__.52293
	.word	.LC1721
	.word	.LC1723
	.byte	157
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51516, %object
	.size	descriptor.51516, 24
descriptor.51516:
	.word	.LC1125
	.word	__func__.51517
	.word	.LC1727
	.word	.LC552
	.byte	222
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51373, %object
	.size	descriptor.51373, 24
descriptor.51373:
	.word	.LC1125
	.word	__func__.51372
	.word	.LC1727
	.word	.LC658
	.byte	159
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51371, %object
	.size	descriptor.51371, 24
descriptor.51371:
	.word	.LC1125
	.word	__func__.51372
	.word	.LC1727
	.word	.LC1723
	.byte	154
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48395, %object
	.size	descriptor.48395, 24
descriptor.48395:
	.word	.LC1125
	.word	__func__.48393
	.word	.LC1739
	.word	.LC1740
	.byte	2
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48394, %object
	.size	descriptor.48394, 24
descriptor.48394:
	.word	.LC1125
	.word	__func__.48393
	.word	.LC1739
	.word	.LC1741
	.byte	247
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48331, %object
	.size	descriptor.48331, 24
descriptor.48331:
	.word	.LC1125
	.word	__func__.48320
	.word	.LC1739
	.word	.LC1742
	.byte	255
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.44850, %object
	.size	descriptor.44850, 24
descriptor.44850:
	.word	.LC1125
	.word	__func__.44841
	.word	.LC33
	.word	.LC1750
	.byte	237
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.44846, %object
	.size	descriptor.44846, 24
descriptor.44846:
	.word	.LC1125
	.word	__func__.44841
	.word	.LC33
	.word	.LC1751
	.byte	222
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.44842, %object
	.size	descriptor.44842, 24
descriptor.44842:
	.word	.LC1125
	.word	__func__.44841
	.word	.LC33
	.word	.LC1750
	.byte	212
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.37286, %object
	.size	descriptor.37286, 24
descriptor.37286:
	.word	.LC1125
	.word	__func__.37287
	.word	.LC1759
	.word	.LC1760
	.byte	170
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.37268, %object
	.size	descriptor.37268, 24
descriptor.37268:
	.word	.LC1125
	.word	__func__.37266
	.word	.LC1759
	.word	.LC1761
	.byte	144
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.37267, %object
	.size	descriptor.37267, 24
descriptor.37267:
	.word	.LC1125
	.word	__func__.37266
	.word	.LC1759
	.word	.LC1762
	.byte	138
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25411, %object
	.size	descriptor.25411, 24
descriptor.25411:
	.word	.LC1125
	.word	__func__.25381
	.word	.LC102
	.word	.LC1771
	.byte	8
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25410, %object
	.size	descriptor.25410, 24
descriptor.25410:
	.word	.LC1125
	.word	__func__.25381
	.word	.LC102
	.word	.LC1772
	.byte	6
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.ident	"GCC: (Linaro GCC 7.5-2019.12) 7.5.0"
	.section	.note.GNU-stack,"",%progbits
// Generated by Lolz Kernel
