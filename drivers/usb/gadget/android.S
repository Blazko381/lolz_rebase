debug_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {lr}
	str	lr, [sp, #-4]!
	movw	lr, #:lower16:.LANCHOR0
	movt	lr, #:upper16:.LANCHOR0
	ldr	r3, [lr]
	cmp	lr, r3
	beq	.L3
	sub	r3, r3, #4
	mov	ip, #0
.L2:
	ldr	r1, [r3, #20]
	cmp	r1, #0
	beq	.L4
	str	ip, [r1, #128]
	str	ip, [r1, #132]
	str	ip, [r1, #136]
	ldr	r3, [r3, #4]
	cmp	lr, r3
	sub	r3, r3, #4
	bne	.L2
.L3:
	mov	r0, r2
	ldr	pc, [sp], #4
.L4:
	ldr	r3, [r3, #4]
	cmp	lr, r3
	sub	r3, r3, #4
	bne	.L2
	mov	r0, r2
	ldr	pc, [sp], #4
	.fnend
	.size	debug_reset_stats, .-debug_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_open, %function
debug_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	debug_open, .-debug_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_txcommand_complete, %function
rmnet_txcommand_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	add	r5, r4, #164
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #440]
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #440]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
	.fnend
	.size	rmnet_txcommand_complete, .-rmnet_txcommand_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_debug_reset_stats, %function
rmnet_smd_debug_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	add	r5, r4, #164
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r3, #0
	mov	r1, r0
	mov	r0, r5
	str	r3, [r4, #424]
	str	r3, [r4, #428]
	str	r3, [r4, #432]
	str	r3, [r4, #436]
	str	r3, [r4, #440]
	str	r3, [r4, #444]
	str	r3, [r4, #448]
	str	r3, [r4, #452]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_smd_debug_reset_stats, .-rmnet_smd_debug_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_debug_open, %function
rmnet_smd_debug_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	rmnet_smd_debug_open, .-rmnet_smd_debug_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_disconnect_work, %function
rmnet_sdio_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	rmnet_sdio_disconnect_work, .-rmnet_sdio_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_reset_stats, %function
rmnet_sdio_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #124]
	mov	r1, #0
	mov	r0, r2
	str	r1, [r3, #324]
	str	r1, [r3, #352]
	str	r1, [r3, #356]
	str	r1, [r3, #360]
	str	r1, [r3, #364]
	str	r1, [r3, #368]
	bx	lr
	.fnend
	.size	rmnet_sdio_reset_stats, .-rmnet_sdio_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_suspend, %function
rmnet_mux_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #368]
	cmp	r3, #0
	beq	.L17
	ldr	r3, [r0, #348]
	bic	r3, r3, #2
	str	r3, [r0, #348]
.L17:
	bx	lr
	.fnend
	.size	rmnet_mux_suspend, .-rmnet_mux_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_unbind, %function
rmnet_mux_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #0
	str	r3, [r1, #172]
	bx	lr
	.fnend
	.size	rmnet_mux_unbind, .-rmnet_mux_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_reset_stats, %function
rmnet_mux_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #124]
	mov	r1, #0
	mov	r0, r2
	str	r1, [r3, #308]
	str	r1, [r3, #396]
	str	r1, [r3, #400]
	str	r1, [r3, #404]
	str	r1, [r3, #408]
	str	r1, [r3, #412]
	str	r1, [r3, #416]
	str	r1, [r3, #420]
	bx	lr
	.fnend
	.size	rmnet_mux_reset_stats, .-rmnet_mux_reset_stats
	.align	2
	.global	usb_rmnet_mux_ctrl_release
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_release, %function
usb_rmnet_mux_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	mov	r4, #0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r1, #124]
	add	r7, r6, #364
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r7
	str	r4, [r6, #352]
	str	r4, [r5, #124]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	usb_rmnet_mux_ctrl_release, .-usb_rmnet_mux_ctrl_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_control_complete, %function
audio_control_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	audio_control_complete, .-audio_control_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_close, %function
audio_pcm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #8]
	add	r6, r5, #108
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r6
	str	r4, [r5, #92]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	audio_pcm_close, .-audio_pcm_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_prepare, %function
audio_pcm_prepare:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	ip, r0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r1, [ip, #208]
	mov	lr, #0
	mov	r0, lr
	ldr	r4, [r1, #60]
	ldr	r2, [r1, #80]
	ldr	r3, [r1, #200]
	mul	r2, r2, r4
	str	lr, [r3, #128]
	lsr	r2, r2, #3
	str	r2, [r3, #124]
	ldr	r2, [r1, #540]
	str	r2, [r3, #112]
	ldr	ip, [ip, #208]
	ldr	lr, [ip, #68]
	ldr	r1, [ip, #80]
	str	r2, [r3, #120]
	mul	r1, r1, lr
	add	r2, r2, r1, lsr #3
	str	r2, [r3, #116]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	audio_pcm_prepare, .-audio_pcm_prepare
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_pointer, %function
audio_pcm_pointer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #208]
	ldr	r0, [r3, #80]
	ldr	r2, [r3, #200]
	ldr	r1, [r2, #112]
	ldr	r3, [r2, #120]
	sub	r3, r3, r1
	lsl	r3, r3, #3
	udiv	r0, r3, r0
	bx	lr
	.fnend
	.size	audio_pcm_pointer, .-audio_pcm_pointer
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_open, %function
ffs_ep0_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	ldr	r2, [r3, #92]
	cmp	r2, #3
	beq	.L34
	add	r2, r3, #84
	str	r3, [r1, #124]
	.syntax divided
@ 45 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	add	r2, r3, #88
	.syntax divided
@ 45 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #0
	bx	lr
.L34:
	mvn	r0, #15
	bx	lr
	.fnend
	.size	ffs_ep0_open, .-ffs_ep0_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_ioctl, %function
ffs_ep0_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #26496
	ldr	r0, [r0, #124]
	cmp	r1, ip
	beq	.L49
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L43
	ldr	r3, [r0]
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L43
	bx	r3
.L49:
	mov	r3, r2
	ldr	r2, [r0, #132]
	cmp	r2, #0
	beq	.L40
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	r1, [r2, #8]
	ldr	lr, [r2, #32]
	ldrh	r1, [r1, #178]
	cmp	r1, #0
	beq	.L41
	uxtb	r2, r3
	mov	r3, lr
.L39:
	mov	ip, r3
	ldrsh	r0, [r3], #2
	cmp	r0, #0
	blt	.L38
	cmp	r0, r2
	beq	.L50
.L38:
	subs	r1, r1, #1
	bne	.L39
.L41:
	mvn	r0, #32
	ldr	pc, [sp], #4
.L50:
	sub	r0, ip, lr
	asr	r0, r0, #1
	ldr	pc, [sp], #4
.L43:
	mvn	r0, #24
	bx	lr
.L40:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	ffs_ep0_ioctl, .-ffs_ep0_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_write_room, %function
gs_write_room:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #272]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #4]
	mov	r1, r0
	cmp	r3, #0
	moveq	r5, r3
	beq	.L52
	ldr	r2, [r4, #92]
	ldr	r3, [r4, #100]
	ldr	r0, [r4, #104]
	add	r3, r3, r2
	sub	r3, r3, r0
	sub	r3, r3, #1
	udiv	r5, r3, r2
	mls	r5, r2, r5, r3
.L52:
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_write_room, .-gs_write_room
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_chars_in_buffer, %function
gs_chars_in_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r4, [r0, #272]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r4, #92]
	mov	r1, r0
	mov	r0, r4
	ldr	ip, [r4, #100]
	ldr	r3, [r4, #104]
	add	r3, r3, r2
	sub	r3, r3, ip
	udiv	r4, r3, r2
	mls	r4, r2, r4, r3
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gs_chars_in_buffer, .-gs_chars_in_buffer
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_break_ctl, %function
gs_break_ctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r5, [r0, #272]
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r0, [r5, #4]
	cmp	r0, #0
	moveq	r4, r0
	beq	.L58
	ldr	r4, [r0, #124]
	cmp	r4, #0
	beq	.L58
	mov	r1, r6
	blx	r4
	mov	r4, r0
.L58:
	mov	r0, r5
	bl	_raw_spin_unlock_irq
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_break_ctl, .-gs_break_ctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_tiocmget, %function
gs_tiocmget:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #272]
	mov	r0, r6
	bl	_raw_spin_lock_irq
	ldr	r5, [r6, #4]
	cmp	r5, #0
	mvneq	r4, #18
	beq	.L63
	ldr	r4, [r5, #108]
	cmp	r4, #0
	beq	.L64
	mov	r0, r5
	blx	r4
	subs	r4, r0, #0
	movne	r4, #2
.L64:
	ldr	r3, [r5, #112]
	cmp	r3, #0
	beq	.L66
	mov	r0, r5
	blx	r3
	cmp	r0, #0
	orrne	r4, r4, #4
.L66:
	ldrh	r3, [r5, #104]
	tst	r3, #64
	orrne	r4, r4, #64
	tst	r3, #128
	orrne	r4, r4, #128
.L63:
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_tiocmget, .-gs_tiocmget
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_tiocmset, %function
gs_tiocmset:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r2
	strd	r8, [sp, #16]
	mov	r8, r1
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r7, [r0, #272]
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r4, [r7, #4]
	cmp	r4, #0
	beq	.L88
	ands	r5, r8, #128
	and	r9, r6, #128
	beq	.L85
	ldr	r5, [r4, #132]
	cmp	r5, #0
	beq	.L86
	ldrh	r3, [r4, #104]
	mov	r1, #1
	mov	r0, r4
	orr	r3, r3, #128
	strh	r3, [r4, #104]	@ movhi
	blx	r5
	mov	r5, r0
.L85:
	cmp	r9, #0
	beq	.L86
	ldr	r2, [r4, #132]
	cmp	r2, #0
	beq	.L86
	ldrh	r3, [r4, #104]
	mov	r1, #0
	mov	r0, r4
	bic	r3, r3, #128
	strh	r3, [r4, #104]	@ movhi
	blx	r2
	mov	r5, r0
.L86:
	tst	r8, #64
	and	r6, r6, #64
	beq	.L87
	ldr	r2, [r4, #128]
	cmp	r2, #0
	beq	.L84
	ldrh	r3, [r4, #104]
	mov	r1, #1
	mov	r0, r4
	orr	r3, r3, #64
	strh	r3, [r4, #104]	@ movhi
	blx	r2
	mov	r5, r0
.L87:
	cmp	r6, #0
	beq	.L84
	ldr	r2, [r4, #128]
	cmp	r2, #0
	beq	.L84
	ldrh	r3, [r4, #104]
	mov	r0, r4
	mov	r1, #0
	bic	r3, r3, #64
	strh	r3, [r4, #104]	@ movhi
	blx	r2
	mov	r5, r0
.L84:
	mov	r0, r7
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L88:
	mvn	r5, #18
	b	.L84
	.fnend
	.size	gs_tiocmset, .-gs_tiocmset
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_write_reset, %function
debug_write_reset:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	mov	r3, #0
	mov	r1, r0
	mov	r0, r4
	str	r3, [r4, #128]
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	debug_write_reset, .-debug_write_reset
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_sdio_reset_stats, %function
debug_sdio_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r7]
	str	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #28]
	cmp	r3, #0
	beq	.L113
	mov	r5, #0
	add	r6, r7, #4
	mov	r9, r5
.L114:
	ldr	r4, [r6, #20]
	add	r5, r5, #1
	add	r6, r6, #104
	add	r8, r4, #4
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r8
	str	r9, [r4, #180]
	str	r9, [r4, #184]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7]
	cmp	r3, r5
	bhi	.L114
.L113:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	debug_sdio_reset_stats, .-debug_sdio_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_smd_reset_stats, %function
debug_smd_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r7, #212]
	str	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #28]
	cmp	r3, #0
	beq	.L121
	mov	r5, #0
	add	r6, r7, #216
	mov	r9, r5
.L122:
	ldr	r4, [r6, #20]
	add	r5, r5, #1
	add	r6, r6, #104
	add	r8, r4, #4
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r8
	str	r9, [r4, #164]
	str	r9, [r4, #168]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7, #212]
	cmp	r3, r5
	bhi	.L122
.L121:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	debug_smd_reset_stats, .-debug_smd_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_reset_stats, %function
gbam_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r3, #424]
	cmp	r2, #0
	ble	.L133
	ldr	r4, [r3, #428]
	cmp	r4, #0
	beq	.L133
	add	r5, r4, #4
	add	r6, r4, #8
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #240]
	str	r3, [r4, #244]
	str	r3, [r4, #248]
	str	r3, [r4, #260]
	str	r3, [r4, #264]
	str	r3, [r4, #268]
	str	r3, [r4, #272]
	str	r3, [r4, #276]
	str	r3, [r4, #280]
	bl	_raw_spin_unlock
	mov	r1, r8
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L133:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	gbam_reset_stats, .-gbam_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_reset_stats, %function
gsmd_ctrl_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	ldr	r5, .L145
	strd	r6, [sp, #8]
	mov	r7, #0
	strd	r8, [sp, #16]
	mov	r9, r2
	str	r10, [sp, #24]
	add	r8, r5, #504
	str	lr, [sp, #28]
.L139:
	ldr	r4, [r5]
	add	r5, r5, #84
	cmp	r4, #0
	add	r6, r4, #108
	mov	r0, r6
	beq	.L138
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r6
	str	r7, [r4, #92]
	str	r7, [r4, #96]
	bl	_raw_spin_unlock_irqrestore
.L138:
	cmp	r5, r8
	bne	.L139
	mov	r0, r9
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L146:
	.align	2
.L145:
	.word	.LANCHOR1+512
	.fnend
	.size	gsmd_ctrl_reset_stats, .-gsmd_ctrl_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_receive, %function
ghsic_ctrl_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	subs	r4, r0, #0
	moveq	r0, r4
	str	lr, [sp, #4]
	beq	.L147
	ldr	r3, [r4, #52]
	cmp	r3, #0
	moveq	r0, r3
	beq	.L147
	ldr	r0, [r4, #8]
	blx	r3
	ldr	r3, [r4, #100]
	add	r3, r3, #1
	str	r3, [r4, #100]
.L147:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ghsic_ctrl_receive, .-ghsic_ctrl_receive
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_reset_stats, %function
gctrl_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	str	r10, [sp, #24]
	mov	r10, r2
	ldr	r3, [r9, #1016]
	str	lr, [sp, #28]
	cmp	r3, #0
	beq	.L158
	mov	r5, #0
	add	r6, r9, #1020
	mov	r8, r5
.L154:
	ldr	r4, [r6]
	cmp	r4, #0
	add	r7, r4, #4
	mov	r0, r7
	beq	.L155
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r7
	str	r8, [r4, #96]
	str	r8, [r4, #100]
	add	r5, r5, #1
	add	r6, r6, #104
	str	r8, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r9, #1016]
	cmp	r3, r5
	bhi	.L154
.L158:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L155:
	add	r5, r5, #1
	add	r6, r6, #104
	cmp	r5, r3
	bcc	.L154
	b	.L158
	.fnend
	.size	gctrl_reset_stats, .-gctrl_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_reset_stats, %function
ghsic_data_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	movw	fp, #:lower16:.LANCHOR1
	mov	r10, r2
	movt	fp, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [fp, #1436]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	cmp	r3, #0
	beq	.L166
	mov	r6, #0
	add	r7, fp, #1440
	mov	r5, r6
.L162:
	ldr	r4, [r7]
	cmp	r4, #0
	add	r8, r4, #80
	add	r9, r4, #48
	mov	r0, r8
	beq	.L163
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r8
	str	r5, [r4, #188]
	str	r5, [r4, #204]
	add	r6, r6, #1
	add	r7, r7, #104
	str	r5, [r4, #208]
	str	r5, [r4, #212]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r9
	str	r5, [r4, #192]
	str	r5, [r4, #196]
	str	r5, [r4, #200]
	str	r5, [r4, #216]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [fp, #1436]
	cmp	r3, r6
	bhi	.L162
.L166:
	mov	r0, r10
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L163:
	add	r6, r6, #1
	add	r7, r7, #104
	cmp	r6, r3
	bcc	.L162
	b	.L166
	.fnend
	.size	ghsic_data_reset_stats, .-ghsic_data_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_reset_stats, %function
ghsuart_ctrl_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r7, #1856]
	str	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #28]
	cmp	r3, #0
	beq	.L174
	ldr	r6, .L176
	mov	r5, #0
	mov	r9, r5
.L170:
	ldr	r4, [r6]
	cmp	r4, #0
	add	r8, r4, #8
	mov	r0, r8
	beq	.L171
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r8
	str	r9, [r4, #96]
	str	r9, [r4, #100]
	add	r5, r5, #1
	add	r6, r6, #84
	str	r9, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7, #1856]
	cmp	r3, r5
	bhi	.L170
.L174:
	mov	r0, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L171:
	add	r5, r5, #1
	add	r6, r6, #84
	cmp	r5, r3
	bcc	.L170
	b	.L174
.L177:
	.align	2
.L176:
	.word	.LANCHOR1+1860
	.fnend
	.size	ghsuart_ctrl_reset_stats, .-ghsuart_ctrl_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_reset_stats, %function
ghsuart_data_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r7, #2028]
	strd	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	cmp	r3, #0
	beq	.L184
	mov	r5, #0
	add	r6, r7, #2032
	mov	r8, r5
.L180:
	ldr	r4, [r6]
	cmp	r4, #0
	add	fp, r4, #104
	add	r9, r4, #72
	mov	r0, fp
	beq	.L181
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, fp
	str	r8, [r4, #204]
	str	r8, [r4, #212]
	add	r5, r5, #1
	add	r6, r6, #84
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r9
	str	r8, [r4, #208]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7, #2028]
	cmp	r3, r5
	bhi	.L180
.L184:
	mov	r0, r10
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L181:
	add	r5, r5, #1
	add	r6, r6, #84
	cmp	r5, r3
	bcc	.L180
	b	.L184
	.fnend
	.size	ghsuart_data_reset_stats, .-ghsuart_data_reset_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_open, %function
modem_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, r2
	str	r2, [r3, #2200]
	bx	lr
	.fnend
	.size	modem_open, .-modem_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_poll, %function
modem_poll:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r2, r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	beq	.L188
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L188
	ldr	r1, .L198
	blx	r3
.L188:
	movw	r3, #:lower16:.LANCHOR1
	ldr	r4, [sp]
	add	sp, sp, #4
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #2200]
	cmp	r0, #0
	movne	r0, #65
	ldr	pc, [sp], #4
.L199:
	.align	2
.L198:
	.word	.LANCHOR1+2204
	.fnend
	.size	modem_poll, .-modem_poll
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_ctrl_release, %function
ccid_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #124]
	mov	r3, #0
	mov	r0, r3
	str	r3, [r2, #116]
	bx	lr
	.fnend
	.size	ccid_ctrl_release, .-ccid_ctrl_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_snd_free, %function
f_midi_snd_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_snd_free, .-f_midi_snd_free
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_in_open, %function
f_midi_in_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #12]
	ldr	r2, [r0, #28]
	ldr	r2, [r2, #200]
	add	r3, r2, r3, lsl #2
	ldr	r1, [r3, #232]
	cmp	r1, #0
	beq	.L204
	str	r0, [r3, #104]
	ldr	r3, [r0, #12]
	mov	r1, #0
	mov	r0, r1
	add	r3, r3, #58
	ldr	r3, [r2, r3, lsl #2]
	strb	r1, [r3, #9]
	bx	lr
.L204:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	f_midi_in_open, .-f_midi_in_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_out_open, %function
f_midi_out_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #12]
	mov	r2, r0
	ldr	r1, [r0, #28]
	cmp	r3, #15
	ldr	r1, [r1, #200]
	addle	r3, r3, #42
	movle	r0, #0
	mvngt	r0, #21
	strle	r2, [r1, r3, lsl #2]
	bx	lr
	.fnend
	.size	f_midi_out_open, .-f_midi_out_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_get_alt, %function
ecm_qc_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #120]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L210
	ldr	r3, [r0, #88]
	ldr	r0, [r3]
	adds	r0, r0, #0
	movne	r0, #1
	bx	lr
.L210:
	mov	r0, #0
	bx	lr
	.fnend
	.size	ecm_qc_get_alt, .-ecm_qc_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_get_alt, %function
mbim_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #196]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L213
	ldrb	r3, [r0, #197]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L214
	ldrb	r0, [r0, #198]	@ zero_extendqisi2
	bx	lr
.L213:
	mov	r0, #0
	bx	lr
.L214:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	mbim_get_alt, .-mbim_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_get_alt, %function
ecm_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #148]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L217
	ldr	r3, [r0, #88]
	ldr	r0, [r3]
	adds	r0, r0, #0
	movne	r0, #1
	bx	lr
.L217:
	mov	r0, #0
	bx	lr
	.fnend
	.size	ecm_get_alt, .-ecm_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ueth_change_mtu, %function
ueth_change_mtu:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #1152
	mov	r7, r1
	mov	r0, r6
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #1156]
	mov	r1, r0
	cmp	r3, #0
	bne	.L220
	sub	r0, r7, #15
	movw	r2, #1499
	cmp	r0, r2
	bhi	.L221
	mov	r4, r3
	str	r7, [r5, #356]
.L219:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L220:
	mvn	r4, #15
	b	.L219
.L221:
	mvn	r4, #33
	b	.L219
	.fnend
	.size	ueth_change_mtu, .-ueth_change_mtu
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ueth_qc_change_mtu, %function
ueth_qc_change_mtu:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #1152
	mov	r7, r1
	mov	r0, r6
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #1156]
	mov	r1, r0
	cmp	r3, #0
	bne	.L225
	sub	r0, r7, #15
	movw	r2, #1499
	cmp	r0, r2
	bhi	.L226
	mov	r4, r3
	str	r7, [r5, #356]
.L224:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L225:
	mvn	r4, #15
	b	.L224
.L226:
	mvn	r4, #33
	b	.L224
	.fnend
	.size	ueth_qc_change_mtu, .-ueth_qc_change_mtu
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_qc_start_xmit, %function
eth_qc_start_xmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	eth_qc_start_xmit, .-eth_qc_start_xmit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_get_alt, %function
f_audio_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldrb	r2, [r3, #16]	@ zero_extendqisi2
	cmp	r2, r1
	beq	.L233
	ldrb	r3, [r3, #17]	@ zero_extendqisi2
	cmp	r3, r1
	ldrbeq	r0, [r0, #249]	@ zero_extendqisi2
	movne	r0, #0
	bx	lr
.L233:
	ldrb	r0, [r0, #248]	@ zero_extendqisi2
	bx	lr
	.fnend
	.size	f_audio_get_alt, .-f_audio_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_disable, %function
f_audio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	strb	r2, [r3, #2216]
	bx	lr
	.fnend
	.size	f_audio_disable, .-f_audio_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	generic_set_cmd, %function
generic_set_cmd:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	add	r1, r1, #4
	str	r2, [r0, r1, lsl #2]
	mov	r0, #0
	bx	lr
	.fnend
	.size	generic_set_cmd, .-generic_set_cmd
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	generic_get_cmd, %function
generic_get_cmd:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	add	r1, r1, #4
	ldr	r0, [r0, r1, lsl #2]
	bx	lr
	.fnend
	.size	generic_get_cmd, .-generic_get_cmd
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_out_max_packet_size_store, %function
conn_gadget_out_max_packet_size_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r3
	bx	lr
	.fnend
	.size	conn_gadget_out_max_packet_size_store, .-conn_gadget_out_max_packet_size_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_get_alt, %function
ncm_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #148]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L240
	ldr	r3, [r0, #88]
	ldr	r0, [r3]
	adds	r0, r0, #0
	movne	r0, #1
	bx	lr
.L240:
	mov	r0, #0
	bx	lr
	.fnend
	.size	ncm_get_alt, .-ncm_get_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_function_unbind_config, %function
audio_source_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mvn	r2, #0
	str	r2, [r3]
	str	r2, [r3, #4]
	bx	lr
	.fnend
	.size	audio_source_function_unbind_config, .-audio_source_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	uasp_function_bind_config, %function
uasp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mvn	r0, #18
	bx	lr
	.fnend
	.size	uasp_function_bind_config, .-uasp_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_set_endpoint_complete, %function
audio_set_endpoint_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r3, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	ldr	r5, [r1, #32]
	ldr	r4, [r1, #44]
	str	r3, [sp, #4]
	cmp	r4, r3
	bne	.L243
	ldr	r6, [r5, #272]
	cmp	r6, r3
	beq	.L243
	add	r0, sp, #4
	ldm	r1, {r1, r2}
	bl	memcpy
	mov	r0, r6
	ldrb	r1, [r5, #268]	@ zero_extendqisi2
	ldr	r2, [sp, #4]
	ldr	r3, [r6, #36]
	blx	r3
	str	r4, [r5, #272]
.L243:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	audio_set_endpoint_complete, .-audio_set_endpoint_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_function_init, %function
midi_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L255
	mov	r4, r0
	mov	r2, #8
	mov	r0, r3
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4, #4]
	beq	.L253
.L251:
	mvn	r2, #0
	mov	r0, #0
	str	r2, [r3]
	str	r2, [r3, #4]
.L249:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L255:
	mov	r2, #16
	mov	r3, r2
	str	r2, [r0, #4]
	b	.L251
.L253:
	mvn	r0, #11
	b	.L249
	.fnend
	.size	midi_function_init, .-midi_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_function_init, %function
ecm_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L263
	mov	r2, #6
	movw	r1, #32976
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	mov	r0, r3
	str	lr, [sp, #4]
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	movne	r3, #0
	mvneq	r3, #11
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, r3
	ldr	pc, [sp], #4
.L263:
	mov	r2, #16
	str	r2, [r0, #4]
	mov	r0, r3
	bx	lr
	.fnend
	.size	ecm_function_init, .-ecm_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_function_init, %function
rndis_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L271
	mov	r2, #272
	movw	r1, #32976
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	mov	r0, r3
	str	lr, [sp, #4]
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	movne	r3, #0
	mvneq	r3, #11
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, r3
	ldr	pc, [sp], #4
.L271:
	mov	r2, #16
	str	r2, [r0, #4]
	mov	r0, r3
	bx	lr
	.fnend
	.size	rndis_function_init, .-rndis_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_function_init, %function
audio_source_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L275
	mov	r2, #8
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L278
.L273:
	mvn	r2, #0
	mov	r0, #0
	str	r2, [r3]
	str	r2, [r3, #4]
	str	r3, [r4, #4]
.L272:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L275:
	mov	r3, #16
	b	.L273
.L278:
	mvn	r0, #11
	b	.L272
	.fnend
	.size	audio_source_function_init, .-audio_source_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_request_new, %function
adb_request_new:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	mov	r6, r1
	mov	r1, #208
	str	lr, [sp, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L279
	mov	r0, r6
	mov	r1, #208
	bl	__kmalloc
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L285
.L279:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L285:
	ldr	r2, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L279
	.fnend
	.size	adb_request_new, .-adb_request_new
	.set	conn_gadget_request_new,adb_request_new
	.set	mtp_request_new,adb_request_new
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_alloc_ep_req, %function
midi_alloc_ep_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	mov	r1, #32
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L286
	mov	r0, r5
	mov	r1, #32
	str	r5, [r4, #4]
	bl	__kmalloc
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L292
.L286:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L292:
	ldr	r2, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L286
	.fnend
	.size	midi_alloc_ep_req, .-midi_alloc_ep_req
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_hw_params, %function
audio_pcm_hw_params:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #284]
	movw	r2, #44100
	ldr	ip, [r1, #296]
	cmp	r3, #2
	cmpeq	ip, r2
	bne	.L299
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r5, r0, #172
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	ip, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [ip]
	ldr	lr, [r3, #496]
	ldrd	r2, [lr, #248]
	orrs	r3, r2, r3
	beq	.L309
.L295:
	mov	r3, #2
	mov	lr, #0
	add	r2, r0, #184
	str	r3, [r0, #172]
	ldr	r3, [ip]
	ldr	r3, [r3, #496]
	str	r3, [r0, #176]
	str	lr, [r0, #192]
	ldr	r3, [ip]
	ldr	r8, [r1, #380]
	ldr	lr, [r3, #496]
	cmp	lr, #0
	beq	.L296
	ldr	ip, [lr, #276]
	cmp	ip, #0
	beq	.L296
.L297:
	mov	r6, #0
	mov	r4, r0
	mov	r7, r1
	mov	r0, lr
	mov	r1, r8
	mov	r3, #208
	str	r6, [sp]
	ldr	r8, [ip]
	blx	r8
	cmp	r0, r6
	str	r0, [r4, #180]
	beq	.L301
	ldr	r2, [r7, #380]
	cmp	r5, r6
	ldr	r3, [r4, #208]
	str	r2, [r4, #188]
	beq	.L298
	str	r5, [r3, #552]
	ldr	r2, [r4, #180]
	mov	r0, r6
	str	r2, [r3, #540]
	ldr	r2, [r4, #184]
	str	r2, [r3, #544]
	ldr	r2, [r4, #188]
	str	r2, [r3, #548]
.L293:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L296:
	movw	r3, #:lower16:arm_dma_ops
	movt	r3, #:upper16:arm_dma_ops
	cmp	r3, #0
	movne	ip, r3
	bne	.L297
	.syntax divided
@ 175 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/dma-mapping.h" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/dma-mapping.h"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 175, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L309:
	mvn	r2, #0
	mov	r3, #0
	strd	r2, [lr, #248]
	ldr	ip, [r0]
	b	.L295
.L298:
	add	r2, r3, #544
	mov	r6, #0
	str	r5, [r3, #540]
	mov	r7, #0
	mov	r0, r5
	str	r5, [r3, #552]
	strd	r6, [r2]
	b	.L293
.L299:
	mvn	r0, #21
	bx	lr
.L301:
	mvn	r0, #11
	b	.L293
	.fnend
	.size	audio_pcm_hw_params, .-audio_pcm_hw_params
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_unbind, %function
ccid_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	ldr	r3, [r0, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L313
.L311:
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #16]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
.L313:
	ldr	r0, [r1, #8]
	bl	kfree
	b	.L311
	.fnend
	.size	ccid_function_unbind, .-ccid_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_alloc_ctrl_pkt, %function
rmnet_mux_alloc_ctrl_pkt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	orr	r6, r1, #32768
	str	lr, [sp, #12]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L319
	mov	r2, #16
	mov	r1, r6
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L314
.L315:
	mov	r1, r6
	mov	r0, r5
	bl	__kmalloc
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	strne	r5, [r4, #4]
	beq	.L325
.L314:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L319:
	mov	r4, #16
	b	.L315
.L325:
	mov	r0, r4
	mov	r4, r3
	bl	kfree
	b	.L314
	.fnend
	.size	rmnet_mux_alloc_ctrl_pkt, .-rmnet_mux_alloc_ctrl_pkt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_receive, %function
ghsuart_ctrl_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r0, #0
	moveq	r4, r5
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	beq	.L327
	ldr	r3, [r5, #68]
	cmp	r3, #0
	moveq	r4, r3
	beq	.L327
	ldr	r0, [r5, #12]
	blx	r3
	ldr	r3, [r5, #100]
	mov	r4, r0
	add	r3, r3, #1
	str	r3, [r5, #100]
.L327:
	mov	r0, r6
	bl	kfree
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ghsuart_ctrl_receive, .-ghsuart_ctrl_receive
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_alloc_ctrl_pkt, %function
mbim_alloc_ctrl_pkt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L336
	mov	r2, #16
	orr	r1, r1, #32768
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L340
.L332:
	mov	r1, r6
	mov	r0, r5
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	strne	r5, [r4, #4]
	beq	.L341
.L331:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L336:
	mov	r4, #16
	b	.L332
.L340:
	mvn	r4, #11
	b	.L331
.L341:
	mov	r0, r4
	mvn	r4, #11
	bl	kfree
	b	.L331
	.fnend
	.size	mbim_alloc_ctrl_pkt, .-mbim_alloc_ctrl_pkt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_function_cleanup, %function
ecm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_function_cleanup, .-ecm_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_function_cleanup, %function
midi_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #4]
	b	kfree
	.fnend
	.size	midi_function_cleanup, .-midi_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_notify_complete, %function
rmnet_smd_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r5, #84]
	cmn	r2, #104
	beq	.L346
	cmp	r2, #0
	mov	r6, r0
	mov	r4, r1
	beq	.L347
	cmn	r2, #108
	beq	.L346
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC0
	movt	r1, #:upper16:.LC0
	add	r0, r0, #32
	bl	dev_err
.L347:
	ldr	r3, [r5, #96]
	cmp	r3, r6
	beq	.L365
.L345:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L346:
	mov	r3, #0
	str	r3, [r5, #172]
	b	.L345
.L365:
	add	r6, r5, #172
	.syntax divided
@ 99 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L345
	ldr	r0, [r5, #96]
	mov	r2, #32
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L345
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC1
	movt	r1, #:upper16:.LC1
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_err
	.fnend
	.size	rmnet_smd_notify_complete, .-rmnet_smd_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_notify_complete, %function
rmnet_sdio_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r4, #84]
	cmn	r2, #104
	beq	.L367
	cmp	r2, #0
	mov	r5, r1
	beq	.L368
	cmn	r2, #108
	beq	.L367
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC2
	movt	r1, #:upper16:.LC2
	add	r0, r0, #32
	bl	dev_err
.L368:
	ldr	r3, [r4, #320]
	tst	r3, #2
	beq	.L366
	add	r6, r4, #196
	.syntax divided
@ 99 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L366
	ldr	r0, [r4, #96]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L386
.L366:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L367:
	mov	r3, #0
	str	r3, [r4, #196]
	b	.L366
.L386:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC3
	movt	r1, #:upper16:.LC3
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_err
	.fnend
	.size	rmnet_sdio_notify_complete, .-rmnet_sdio_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_notify_complete, %function
rmnet_mux_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r4, #84]
	cmn	r2, #104
	beq	.L388
	cmp	r2, #0
	mov	r5, r1
	beq	.L389
	cmn	r2, #108
	beq	.L388
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC4
	movt	r1, #:upper16:.LC4
	add	r0, r0, #32
	bl	dev_err
.L389:
	add	r6, r4, #372
	.syntax divided
@ 99 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L404
.L387:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L404:
	ldr	r0, [r4, #96]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L387
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC3
	movt	r1, #:upper16:.LC3
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_err
.L388:
	mov	r3, #0
	str	r3, [r4, #372]
	b	.L387
	.fnend
	.size	rmnet_mux_notify_complete, .-rmnet_mux_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_ethaddr_store, %function
rndis_ethaddr_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	movw	r5, #52429
	str	r6, [sp, #8]
	movt	r5, 52428
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	ldr	ip, [r0, #4]
	mov	r2, #0
	mov	r0, #2
	mov	r1, r2
	ldr	r3, .L412
	str	r0, [ip]
	strh	r2, [ip, #4]	@ movhi
	b	.L406
.L407:
	sub	r2, r1, r2
	add	r1, r1, #1
	add	r2, r2, #1
	cmp	r1, #256
	ldrb	lr, [ip, r2]	@ zero_extendqisi2
	eor	r0, r0, lr
	strb	r0, [ip, r2]
	beq	.L410
.L406:
	umull	r0, r2, r5, r1
	ldrb	r0, [r3], #1	@ zero_extendqisi2
	lsr	r2, r2, #2
	cmp	r0, #0
	add	r2, r2, r2, lsl #2
	bne	.L407
.L410:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L413:
	.align	2
.L412:
	.word	.LANCHOR1+2220
	.fnend
	.size	rndis_ethaddr_store, .-rndis_ethaddr_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	reset_config, %function
reset_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrh	r2, [r3, #18]
	tst	r2, #4
	bne	.L425
.L415:
	ldr	r3, [r5, #12]
	ldr	r4, [r3, #36]!
	cmp	r4, r3
	sub	r4, r4, #72
	beq	.L417
	mov	r6, #0
.L416:
	ldr	r3, [r4, #48]
	mov	r0, r4
	cmp	r3, #0
	beq	.L418
	blx	r3
	str	r6, [r4, #80]
	ldr	r3, [r5, #12]
	ldr	r4, [r4, #72]
	add	r3, r3, #36
	cmp	r3, r4
	sub	r4, r4, #72
	bne	.L416
.L417:
	mov	r3, #0
	str	r3, [r5, #12]
	str	r3, [r5, #56]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L418:
	str	r3, [r4, #80]
	ldr	r3, [r5, #12]
	ldr	r4, [r4, #72]
	add	r3, r3, #36
	cmp	r4, r3
	sub	r4, r4, #72
	bne	.L416
	b	.L417
.L425:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC5
	mov	r0, r3
	movt	r2, #:upper16:.LC5
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L415
	.fnend
	.size	reset_config, .-reset_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_setup_complete, %function
composite_setup_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	cmp	r3, #0
	bne	.L427
	ldr	r2, [r1, #4]
	ldr	ip, [r1, #48]
	cmp	ip, r2
	bxeq	lr
.L427:
	movw	r2, #:lower16:.LANCHOR2
	movt	r2, #:upper16:.LANCHOR2
	ldrh	ip, [r2, #42]
	tst	ip, #4
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r4, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	lr, [r1, #4]
	add	r0, r2, #24
	movw	r2, #:lower16:.LC6
	ldr	ip, [r1, #48]
	movt	r2, #:upper16:.LC6
	ldr	r1, [r4]
	stm	sp, {ip, lr}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	composite_setup_complete, .-composite_setup_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_resume, %function
composite_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r0
	add	r0, r0, #32
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	mov	r5, r0
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, #66]
	tst	r3, #4
	bne	.L460
.L437:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2476]
	ldr	r3, [r3, #40]
	cmp	r3, #0
	beq	.L438
	mov	r0, r5
	blx	r3
.L438:
	ldr	r1, [r5, #12]
	cmp	r1, #0
	beq	.L440
	mov	r2, r1
	ldr	r4, [r2, #36]!
	cmp	r2, r4
	sub	r4, r4, #72
	beq	.L442
.L441:
	ldr	r3, [r4, #60]
	mov	r0, r4
	cmp	r3, #0
	beq	.L443
	blx	r3
	ldr	r1, [r5, #12]
	ldr	r4, [r4, #72]
	add	r2, r1, #36
	cmp	r2, r4
	sub	r4, r4, #72
	bne	.L441
.L442:
	ldrb	r3, [r1, #23]	@ zero_extendqisi2
	cmp	r3, #0
	ldrne	r1, [r5, #64]
	moveq	r1, #500
	mulne	r1, r1, r3
	ldr	r3, [r6]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L440
	mov	r0, r6
	blx	r3
.L440:
	ldrb	r3, [r5, #16]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r5, #16]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L443:
	ldr	r4, [r4, #72]
	cmp	r2, r4
	sub	r4, r4, #72
	bne	.L441
	b	.L442
.L460:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC7
	add	r0, r0, #48
	movt	r2, #:upper16:.LC7
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L437
	.fnend
	.size	composite_resume, .-composite_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_suspend, %function
composite_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	add	r0, r0, #32
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	mov	r6, r0
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, #90]
	tst	r3, #4
	bne	.L476
.L462:
	ldr	r3, [r6, #12]
	cmp	r3, #0
	beq	.L467
	ldr	r4, [r3, #36]!
	cmp	r3, r4
	sub	r4, r4, #72
	beq	.L467
.L466:
	ldr	r2, [r4, #56]
	mov	r0, r4
	cmp	r2, #0
	beq	.L468
	blx	r2
	ldr	r3, [r6, #12]
	ldr	r4, [r4, #72]
	add	r3, r3, #36
	cmp	r3, r4
	sub	r4, r4, #72
	bne	.L466
.L467:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2476]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L465
	mov	r0, r6
	blx	r3
.L465:
	ldrb	r3, [r6, #16]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #16]
	ldr	r3, [r5]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L461
	mov	r0, r5
	mov	r1, #2
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	bx	r3
.L468:
	ldr	r4, [r4, #72]
	cmp	r3, r4
	sub	r4, r4, #72
	bne	.L466
	b	.L467
.L476:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC8
	add	r0, r0, #72
	movt	r2, #:upper16:.LC8
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L462
.L461:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	composite_suspend, .-composite_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_disable, %function
diag_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrh	r2, [r3, #114]
	tst	r2, #4
	bne	.L494
.L478:
	add	r5, r4, #108
	mov	r6, #0
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r5
	str	r6, [r4, #112]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #124]
	cmp	r3, r6
	beq	.L479
	ldr	r5, [r3, #12]
	cmp	r5, r6
	beq	.L479
	mov	r2, r6
	mov	r1, #1
	ldr	r0, [r3, #16]
	blx	r5
.L479:
	ldr	r0, [r4, #88]
	mov	r5, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #88]
	str	r5, [r3]
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #84]
	str	r5, [r3]
	ldr	r3, [r4, #124]
	cmp	r3, r5
	strne	r5, [r3, #20]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L494:
	ldr	r1, [r4, #116]
	movw	r2, #:lower16:.LC9
	add	r0, r3, #96
	movt	r2, #:upper16:.LC9
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L478
	.fnend
	.size	diag_function_disable, .-diag_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_complete_set_line_coding, %function
acm_complete_set_line_coding:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	ip, [r1, #44]
	ldr	r2, [r3, #20]
	cmp	ip, #0
	ldr	lr, [r2, #24]
	bne	.L507
	ldr	ip, [r1, #48]
	cmp	ip, #7
	beq	.L498
	mov	r4, r0
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, #162]
	tst	r2, #4
	bne	.L508
.L499:
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldr	r3, [r3, #24]
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	bx	r3
.L498:
	ldr	r2, [r1]
	add	r1, r3, #160
	ldr	r0, [r2]	@ unaligned
	str	r0, [r3, #160]
	ldrh	r3, [r2, #4]	@ unaligned
	strh	r3, [r1, #4]	@ movhi
	ldrb	r3, [r2, #6]	@ zero_extendqisi2
	strb	r3, [r1, #6]
.L495:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L507:
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, #138]
	tst	r2, #4
	beq	.L495
	ldr	r1, [lr]
	movw	r2, #:lower16:.LC10
	add	r0, r0, #120
	ldrb	r3, [r3, #146]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC10
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L495
.L508:
	ldr	r1, [lr]
	movw	r2, #:lower16:.LC11
	add	r0, r0, #144
	ldrb	r3, [r3, #146]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC11
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L499
	.fnend
	.size	acm_complete_set_line_coding, .-acm_complete_set_line_coding
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_disable, %function
f_midi_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR2
	str	lr, [sp, #4]
	ldrh	r2, [r3, #186]
	tst	r2, #4
	bne	.L515
.L510:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	bx	r3
.L515:
	ldr	r1, [r4, #20]
	add	r0, r3, #168
	movw	r2, #:lower16:.LC12
	movt	r2, #:upper16:.LC12
	ldr	r3, [r1, #24]
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L510
	.fnend
	.size	f_midi_disable, .-f_midi_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_response_complete, %function
rndis_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r5, [r1, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r3, [r5, #20]
	cmp	r3, #0
	beq	.L516
	ldr	r7, [r3, #24]
	cmp	r7, #0
	beq	.L516
	ldr	r3, [r1, #44]
	cmn	r3, #104
	beq	.L520
	cmp	r3, #0
	mov	r6, r0
	mov	r4, r1
	beq	.L521
	cmn	r3, #108
	beq	.L520
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, #210]
	tst	r2, #4
	bne	.L545
.L521:
	ldr	r3, [r5, #168]
	cmp	r3, r6
	beq	.L546
.L516:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L520:
	mov	r3, #0
	str	r3, [r5, #176]
	b	.L516
.L546:
	add	r6, r5, #176
	.syntax divided
@ 99 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L516
	ldr	r0, [r5, #168]
	mov	r1, r4
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L516
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	ip, #:lower16:.LANCHOR2
	movt	ip, #:upper16:.LANCHOR2
	ldrh	r3, [ip, #234]
	tst	r3, #4
	beq	.L516
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC14
	mov	r3, r0
	movt	r2, #:upper16:.LC14
	add	r0, ip, #216
	add	r1, r1, #32
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	__dynamic_dev_dbg
.L545:
	ldr	lr, [r1, #4]
	movw	r2, #:lower16:.LC13
	add	r0, r0, #192
	ldr	r1, [r7]
	str	r3, [sp]
	movt	r2, #:upper16:.LC13
	ldr	ip, [r4, #48]
	ldr	r3, [r6, #4]
	add	r1, r1, #32
	stmib	sp, {ip, lr}
	bl	__dynamic_dev_dbg
	b	.L521
	.fnend
	.size	rndis_response_complete, .-rndis_response_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_response_available, %function
rndis_response_available:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #176
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r1, [r0, #172]
	ldr	r6, [r3, #24]
	ldr	ip, [r1]
	.syntax divided
@ 61 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L547
	ldr	r2, [r0, #168]
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L547
	mov	r4, r0
	mov	r0, #0
	str	r3, [ip]
	mov	r2, #32
	str	r0, [ip, #4]
	ldr	r0, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L547
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	ip, #:lower16:.LANCHOR2
	movw	r3, #258
	movt	ip, #:upper16:.LANCHOR2
	ldrh	r3, [ip, r3]
	tst	r3, #4
	bne	.L561
.L547:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L561:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC15
	mov	r3, r0
	movt	r2, #:upper16:.LC15
	add	r0, ip, #240
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	add	r1, r1, #32
	b	__dynamic_dev_dbg
	.fnend
	.size	rndis_response_available, .-rndis_response_available
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_do_notify, %function
ecm_qc_do_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0, #148]
	cmp	r6, #0
	beq	.L562
	ldrb	r3, [r0, #152]	@ zero_extendqisi2
	mov	r4, r0
	ldr	r2, [r0, #20]
	ldr	r5, [r6]
	cmp	r3, #1
	ldr	r7, [r2, #24]
	beq	.L565
	cmp	r3, #0
	beq	.L562
	cmp	r3, #2
	beq	.L566
.L567:
	mvn	r0, #94
	mov	r3, #0
	mov	r2, #32
	mov	r1, r6
	strb	r0, [r5]
	ldrb	r0, [r4, #120]	@ zero_extendqisi2
	strh	r0, [r5, #4]	@ unaligned
	ldr	r0, [r4, #144]
	str	r3, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L592
.L562:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L566:
	mov	r3, #0
	mov	r1, #8
	mov	r2, #16
	mov	r0, #42
	strb	r0, [r5, #1]
	strb	r3, [r5, #2]
	strb	r3, [r5, #3]
	strb	r1, [r5, #6]
	strb	r3, [r5, #7]
	ldr	r1, [r6]
	str	r2, [r6, #4]
	ldr	r3, [r7]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bls	.L575
	ldr	r0, [r3, #16]
	mov	r2, #0
	mov	r3, #28672
	movt	r2, 6500
	movt	r3, 148
	cmp	r0, #3
	moveq	r3, r2
.L570:
	movw	r2, #:lower16:.LANCHOR2
	movw	r0, #306
	str	r3, [r1, #8]
	movt	r2, #:upper16:.LANCHOR2
	str	r3, [r1, #12]
	ldrh	r3, [r2, r0]
	tst	r3, #4
	bne	.L593
.L571:
	mov	r3, #0
	strb	r3, [r4, #152]
	b	.L567
.L592:
	movw	ip, #:lower16:.LANCHOR2
	movw	r3, #330
	str	r6, [r4, #148]
	movt	ip, #:upper16:.LANCHOR2
	ldrh	r3, [ip, r3]
	tst	r3, #4
	beq	.L562
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC20
	mov	r3, r0
	movt	r2, #:upper16:.LC20
	add	r0, ip, #312
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r1, r1, #32
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__dynamic_dev_dbg
.L565:
	mov	r3, #0
	mov	r2, #8
	movw	r0, #:lower16:.LANCHOR2
	strb	r3, [r5, #1]
	ldrb	r1, [r4, #153]	@ zero_extendqisi2
	movt	r0, #:upper16:.LANCHOR2
	strb	r3, [r5, #6]
	strb	r3, [r5, #7]
	movw	r3, #282
	strh	r1, [r5, #2]	@ unaligned
	str	r2, [r6, #4]
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L594
.L568:
	mov	r3, #2
	strb	r3, [r4, #152]
	b	.L567
.L575:
	mov	r3, #28672
	movt	r3, 148
	b	.L570
.L594:
	ldrb	lr, [r4, #153]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC17
	movw	r3, #:lower16:.LC16
	ldr	r1, [r7]
	movt	ip, #:upper16:.LC17
	movw	r2, #:lower16:.LC18
	movt	r3, #:upper16:.LC16
	movt	r2, #:upper16:.LC18
	add	r0, r0, #264
	cmp	lr, #0
	moveq	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L568
.L593:
	ldr	r3, [r7]
	ldr	r2, [r3, #20]
	add	r1, r3, #32
	cmp	r2, #2
	bls	.L577
	ldr	r0, [r3, #16]
	mov	r2, #0
	mov	r3, #28672
	movt	r2, 6500
	movt	r3, 148
	cmp	r0, #3
	moveq	r3, r2
.L572:
	movw	r2, #:lower16:.LC19
	ldr	r0, .L595
	movt	r2, #:upper16:.LC19
	bl	__dynamic_dev_dbg
	b	.L571
.L577:
	mov	r3, #28672
	movt	r3, 148
	b	.L572
.L596:
	.align	2
.L595:
	.word	.LANCHOR2+288
	.fnend
	.size	ecm_qc_do_notify, .-ecm_qc_do_notify
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_close, %function
ecm_qc_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LANCHOR2
	movw	r3, #354
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r1, #:upper16:.LANCHOR2
	str	lr, [sp, #4]
	mov	r4, r0
	ldrh	r3, [r1, r3]
	tst	r3, #4
	bne	.L603
.L598:
	mov	r3, #1
	mov	r0, r4
	strh	r3, [r4, #152]	@ movhi
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	ecm_qc_do_notify
.L603:
	ldr	ip, [r4, #20]
	add	r0, r1, #336
	movw	r3, #:lower16:.LANCHOR3
	movw	r2, #:lower16:.LC21
	movt	r3, #:upper16:.LANCHOR3
	movt	r2, #:upper16:.LC21
	ldr	r1, [ip, #24]
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L598
	.fnend
	.size	ecm_qc_close, .-ecm_qc_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_open, %function
ecm_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #378
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR2
	str	lr, [sp, #4]
	mov	r4, r0
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L610
.L605:
	movw	r3, #257
	mov	r0, r4
	strh	r3, [r4, #152]	@ movhi
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	ecm_qc_do_notify
.L610:
	ldr	r1, [r4, #20]
	movw	r2, #:lower16:.LC21
	add	r0, r3, #360
	movt	r2, #:upper16:.LC21
	ldr	r3, .L611
	ldr	r1, [r1, #24]
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L605
.L612:
	.align	2
.L611:
	.word	.LANCHOR3+16
	.fnend
	.size	ecm_qc_open, .-ecm_qc_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_notify_complete, %function
ecm_qc_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r4, r1
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r1, #32]
	ldr	ip, [r1, #44]
	cmn	ip, #104
	beq	.L614
	cmp	ip, #0
	beq	.L615
	cmn	ip, #108
	beq	.L614
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #402
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L627
.L615:
	mov	r0, r5
	str	r4, [r5, #148]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	ecm_qc_do_notify
.L614:
	mov	r3, #0
	strb	r3, [r5, #152]
	b	.L615
.L627:
	ldr	r3, [r1]
	movw	r2, #:lower16:.LC22
	add	r0, r0, #384
	ldr	r1, [r5, #20]
	movt	r2, #:upper16:.LC22
	ldrb	r3, [r3, #1]	@ zero_extendqisi2
	ldr	r1, [r1, #24]
	ldr	r1, [r1]
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L615
	.fnend
	.size	ecm_qc_notify_complete, .-ecm_qc_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_setup, %function
ecm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	movw	r2, #17185
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	ip, [r1, #6]	@ unaligned
	.pad #20
	sub	sp, sp, #20
	ldrh	r1, [r1]	@ unaligned
	ldrh	r6, [r4, #2]	@ unaligned
	ldr	r3, [r0, #20]
	ldrh	r8, [r4, #4]	@ unaligned
	cmp	ip, #0
	cmpeq	r1, r2
	uxth	r9, r6
	ldr	r7, [r3, #24]
	beq	.L639
.L629:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #474
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	mvneq	r5, #94
	bne	.L640
.L628:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L639:
	ldrb	r3, [r0, #148]	@ zero_extendqisi2
	mov	r5, r0
	cmp	r3, r8
	bne	.L629
	movw	r10, #:lower16:.LANCHOR2
	movw	r3, #426
	ldr	fp, [r7, #4]
	movt	r10, #:upper16:.LANCHOR2
	ldrh	r3, [r10, r3]
	tst	r3, #4
	bne	.L641
.L630:
	movw	r3, #450
	strh	r6, [r5, #98]	@ movhi
	ldrh	r3, [r10, r3]
	tst	r3, #4
	bne	.L642
.L632:
	ldrb	r3, [fp, #26]	@ zero_extendqisi2
	mov	r0, #0
	mov	r1, fp
	mov	r2, #32
	str	r0, [fp, #4]
	bfc	r3, #1, #1
	strb	r3, [fp, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bge	.L628
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC26
	str	r5, [sp]
	movt	r1, #:upper16:.LC26
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	ldrb	r2, [r4]	@ zero_extendqisi2
	add	r0, r0, #32
	bl	dev_err
	b	.L628
.L640:
	ldrb	lr, [r4, #1]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC24
	add	r0, r0, #456
	ldr	r1, [r7]
	movt	r2, #:upper16:.LC24
	str	r9, [sp, #4]
	ldrb	r3, [r4]	@ zero_extendqisi2
	mvn	r5, #94
	str	lr, [sp]
	add	r1, r1, #32
	str	r8, [sp, #8]
	str	ip, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L628
.L642:
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	mov	r0, #0
	movw	r2, #:lower16:.LC25
	ldr	r1, [r7]
	movt	r2, #:upper16:.LC25
	str	r9, [sp, #4]
	str	r8, [sp, #8]
	ldrb	r3, [r4]	@ zero_extendqisi2
	str	ip, [sp]
	add	r1, r1, #32
	str	r0, [sp, #12]
	ldr	r0, .L643
	bl	__dynamic_dev_dbg
	b	.L632
.L641:
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC23
	mov	r3, r9
	movt	r2, #:upper16:.LC23
	add	r0, r10, #408
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L630
.L644:
	.align	2
.L643:
	.word	.LANCHOR2+432
	.fnend
	.size	ecm_setup, .-ecm_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_do_notify, %function
ecm_do_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0, #168]
	cmp	r6, #0
	beq	.L645
	ldrb	r3, [r0, #172]	@ zero_extendqisi2
	mov	r4, r0
	ldr	r2, [r0, #20]
	ldr	r5, [r6]
	cmp	r3, #1
	ldr	r7, [r2, #24]
	beq	.L648
	cmp	r3, #0
	beq	.L645
	cmp	r3, #2
	beq	.L649
.L650:
	mvn	r0, #94
	mov	r3, #0
	mov	r2, #32
	mov	r1, r6
	strb	r0, [r5]
	ldrb	r0, [r4, #148]	@ zero_extendqisi2
	strh	r0, [r5, #4]	@ unaligned
	ldr	r0, [r4, #164]
	str	r3, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L681
.L645:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L649:
	mov	r3, #0
	mov	r1, #8
	mov	r2, #16
	mov	r0, #42
	strb	r0, [r5, #1]
	strb	r3, [r5, #2]
	strb	r3, [r5, #3]
	strb	r1, [r5, #6]
	strb	r3, [r5, #7]
	ldr	r1, [r6]
	str	r2, [r6, #4]
	ldr	r3, [r7]
	ldr	r2, [r3, #20]
	cmp	r2, #4
	bhi	.L682
	cmp	r2, #2
	movls	r3, #28672
	movtls	r3, 148
	bhi	.L683
.L654:
	movw	r2, #:lower16:.LANCHOR2
	movw	r0, #522
	str	r3, [r1, #8]
	movt	r2, #:upper16:.LANCHOR2
	str	r3, [r1, #12]
	ldrh	r3, [r2, r0]
	tst	r3, #4
	bne	.L684
.L656:
	mov	r3, #0
	strb	r3, [r4, #172]
	b	.L650
.L681:
	movw	ip, #:lower16:.LANCHOR2
	movw	r3, #546
	str	r6, [r4, #168]
	movt	ip, #:upper16:.LANCHOR2
	ldrh	r3, [ip, r3]
	tst	r3, #4
	beq	.L645
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC20
	mov	r3, r0
	movt	r2, #:upper16:.LC20
	add	r0, ip, #528
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r1, r1, #32
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__dynamic_dev_dbg
.L648:
	mov	r3, #0
	mov	r2, #8
	movw	r0, #:lower16:.LANCHOR2
	strb	r3, [r5, #1]
	ldrb	r1, [r4, #173]	@ zero_extendqisi2
	movt	r0, #:upper16:.LANCHOR2
	strb	r3, [r5, #6]
	strb	r3, [r5, #7]
	movw	r3, #498
	strh	r1, [r5, #2]	@ unaligned
	str	r2, [r6, #4]
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L685
.L651:
	mov	r3, #2
	strb	r3, [r4, #172]
	b	.L650
.L682:
	ldr	r2, [r3, #16]
	cmp	r2, #5
	beq	.L686
.L655:
	mov	r0, #0
	mov	r3, #28672
	movt	r0, 6500
	cmp	r2, #3
	movt	r3, 148
	moveq	r3, r0
	b	.L654
.L685:
	ldrb	lr, [r4, #173]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC17
	movw	r3, #:lower16:.LC16
	ldr	r1, [r7]
	movt	ip, #:upper16:.LC17
	movw	r2, #:lower16:.LC18
	movt	r3, #:upper16:.LC16
	movt	r2, #:upper16:.LC18
	add	r0, r0, #480
	cmp	lr, #0
	moveq	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L651
.L683:
	ldr	r2, [r3, #16]
	b	.L655
.L686:
	mov	r3, #0
	movt	r3, 13000
	b	.L654
.L684:
	ldr	r3, [r7]
	ldr	r2, [r3, #20]
	add	r1, r3, #32
	cmp	r2, #4
	bls	.L657
	ldr	r0, [r3, #16]
	cmp	r0, #5
	beq	.L687
.L659:
	mov	r2, #0
	mov	r3, #28672
	movt	r2, 6500
	cmp	r0, #3
	movt	r3, 148
	moveq	r3, r2
.L658:
	movw	r2, #:lower16:.LC19
	ldr	r0, .L688
	movt	r2, #:upper16:.LC19
	bl	__dynamic_dev_dbg
	b	.L656
.L657:
	cmp	r2, #2
	movls	r3, #28672
	movtls	r3, 148
	bls	.L658
	ldr	r0, [r3, #16]
	b	.L659
.L687:
	mov	r3, #0
	movt	r3, 13000
	b	.L658
.L689:
	.align	2
.L688:
	.word	.LANCHOR2+504
	.fnend
	.size	ecm_do_notify, .-ecm_do_notify
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_close, %function
ecm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #570
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR2
	str	lr, [sp, #4]
	mov	r4, r0
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L696
.L691:
	mov	r3, #1
	mov	r0, r4
	strh	r3, [r4, #172]	@ movhi
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	ecm_do_notify
.L696:
	ldr	r1, [r4, #20]
	movw	r2, #:lower16:.LC21
	add	r0, r3, #552
	movt	r2, #:upper16:.LC21
	ldr	r3, .L697
	ldr	r1, [r1, #24]
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L691
.L698:
	.align	2
.L697:
	.word	.LANCHOR3+28
	.fnend
	.size	ecm_close, .-ecm_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_open, %function
ecm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #594
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR2
	str	lr, [sp, #4]
	mov	r4, r0
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L705
.L700:
	movw	r3, #257
	mov	r0, r4
	strh	r3, [r4, #172]	@ movhi
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	ecm_do_notify
.L705:
	ldr	r1, [r4, #20]
	movw	r2, #:lower16:.LC21
	add	r0, r3, #576
	movt	r2, #:upper16:.LC21
	ldr	r3, .L706
	ldr	r1, [r1, #24]
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L700
.L707:
	.align	2
.L706:
	.word	.LANCHOR3+40
	.fnend
	.size	ecm_open, .-ecm_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_notify_complete, %function
ecm_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r4, r1
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r1, #32]
	ldr	ip, [r1, #44]
	cmn	ip, #104
	beq	.L709
	cmp	ip, #0
	beq	.L710
	cmn	ip, #108
	beq	.L709
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #618
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L722
.L710:
	mov	r0, r5
	str	r4, [r5, #168]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	ecm_do_notify
.L709:
	mov	r3, #0
	strb	r3, [r5, #172]
	b	.L710
.L722:
	ldr	r3, [r1]
	movw	r2, #:lower16:.LC22
	add	r0, r0, #600
	ldr	r1, [r5, #20]
	movt	r2, #:upper16:.LC22
	ldrb	r3, [r3, #1]	@ zero_extendqisi2
	ldr	r1, [r1, #24]
	ldr	r1, [r1]
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L710
	.fnend
	.size	ecm_notify_complete, .-ecm_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_ep0out_complete, %function
ncm_ep0out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, #0
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r1, #44]
	ldr	ip, [r0]
	ldr	r0, [r1, #32]
	str	r2, [r1, #32]
	cmp	r3, r2
	bne	.L724
	ldr	r3, [r1, #4]
	ldr	r2, [r1, #48]
	cmp	r2, r3
	beq	.L725
.L724:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #642
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L738
.L726:
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r3, #24]
	bx	r3
.L725:
	ldr	r3, [r1]
	ldr	r3, [r3]	@ unaligned
	cmp	r3, #2048
	bcc	.L727
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	ldr	r2, [r2, #24]
	cmp	r2, r3
	bcc	.L727
	str	r3, [r0, #112]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L727:
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #666
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	beq	.L726
	ldr	r1, [ip]
	movw	r2, #:lower16:.LC28
	add	r0, r0, #648
	movt	r2, #:upper16:.LC28
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L726
.L738:
	ldr	r1, [ip]
	movw	r2, #:lower16:.LC27
	add	r0, r0, #624
	movt	r2, #:upper16:.LC27
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L726
	.fnend
	.size	ncm_ep0out_complete, .-ncm_ep0out_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_do_notify, %function
ncm_do_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #168]
	cmp	r7, #0
	beq	.L739
	ldrb	r3, [r0, #172]	@ zero_extendqisi2
	mov	r4, r0
	ldr	r2, [r0, #20]
	ldr	r5, [r7]
	cmp	r3, #1
	ldr	r8, [r2, #24]
	beq	.L742
	cmp	r3, #0
	beq	.L739
	cmp	r3, #2
	beq	.L743
.L744:
	mvn	r2, #94
	mov	r3, #0
	add	r6, r4, #188
	strb	r2, [r5]
	ldrb	r2, [r4, #148]	@ zero_extendqisi2
	mov	r0, r6
	strh	r2, [r5, #4]	@ unaligned
	str	r3, [r4, #168]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #164]
	mov	r2, #32
	mov	r1, r7
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r5, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r5, #0
	blt	.L769
.L739:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L743:
	mov	r3, #0
	mov	r1, #8
	mov	r2, #16
	mov	r0, #42
	strb	r0, [r5, #1]
	strb	r3, [r5, #2]
	strb	r3, [r5, #3]
	strb	r1, [r5, #6]
	strb	r3, [r5, #7]
	ldr	r1, [r7]
	str	r2, [r7, #4]
	ldr	r3, [r8]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bls	.L752
	ldr	r0, [r3, #16]
	mov	r2, #0
	mov	r3, #28672
	movt	r2, 6500
	movt	r3, 148
	cmp	r0, #3
	moveq	r3, r2
.L747:
	movw	r2, #:lower16:.LANCHOR2
	movw	r0, #714
	str	r3, [r1, #8]
	movt	r2, #:upper16:.LANCHOR2
	str	r3, [r1, #12]
	ldrh	r3, [r2, r0]
	tst	r3, #4
	bne	.L770
.L748:
	mov	r3, #1
	strb	r3, [r4, #172]
	b	.L744
.L769:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #738
	str	r7, [r4, #168]
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	beq	.L739
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC20
	mov	r3, r5
	add	r0, r0, #720
	movt	r2, #:upper16:.LC20
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r1, r1, #32
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__dynamic_dev_dbg
.L742:
	mov	r3, #0
	mov	r2, #8
	movw	r0, #:lower16:.LANCHOR2
	strb	r3, [r5, #1]
	ldrb	r1, [r4, #173]	@ zero_extendqisi2
	movt	r0, #:upper16:.LANCHOR2
	strb	r3, [r5, #6]
	strb	r3, [r5, #7]
	movw	r3, #690
	strh	r1, [r5, #2]	@ unaligned
	str	r2, [r7, #4]
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L771
.L745:
	mov	r3, #0
	strb	r3, [r4, #172]
	b	.L744
.L752:
	mov	r3, #28672
	movt	r3, 148
	b	.L747
.L771:
	ldrb	lr, [r4, #173]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC17
	movw	r3, #:lower16:.LC16
	ldr	r1, [r8]
	movt	ip, #:upper16:.LC17
	movw	r2, #:lower16:.LC18
	movt	r3, #:upper16:.LC16
	movt	r2, #:upper16:.LC18
	add	r0, r0, #672
	cmp	lr, #0
	moveq	r3, ip
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L745
.L770:
	ldr	r3, [r8]
	ldr	r2, [r3, #20]
	add	r1, r3, #32
	cmp	r2, #2
	bls	.L754
	ldr	r0, [r3, #16]
	mov	r2, #0
	mov	r3, #28672
	movt	r2, 6500
	movt	r3, 148
	cmp	r0, #3
	moveq	r3, r2
.L749:
	movw	r2, #:lower16:.LC19
	ldr	r0, .L772
	movt	r2, #:upper16:.LC19
	bl	__dynamic_dev_dbg
	b	.L748
.L754:
	mov	r3, #28672
	movt	r3, 148
	b	.L749
.L773:
	.align	2
.L772:
	.word	.LANCHOR2+696
	.fnend
	.size	ncm_do_notify, .-ncm_do_notify
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_close, %function
ncm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #762
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L780
.L775:
	add	r5, r4, #188
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r3, #2
	mov	r0, r4
	strh	r3, [r4, #172]	@ movhi
	bl	ncm_do_notify
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L780:
	ldr	r1, [r4, #20]
	movw	r2, #:lower16:.LC21
	add	r0, r3, #744
	movt	r2, #:upper16:.LC21
	ldr	r3, .L781
	ldr	r1, [r1, #24]
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L775
.L782:
	.align	2
.L781:
	.word	.LANCHOR3+52
	.fnend
	.size	ncm_close, .-ncm_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_open, %function
ncm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #786
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L789
.L784:
	add	r5, r4, #188
	mov	r0, r5
	bl	_raw_spin_lock
	movw	r3, #258
	mov	r0, r4
	strh	r3, [r4, #172]	@ movhi
	bl	ncm_do_notify
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L789:
	ldr	r1, [r4, #20]
	movw	r2, #:lower16:.LC21
	add	r0, r3, #768
	movt	r2, #:upper16:.LC21
	ldr	r3, .L790
	ldr	r1, [r1, #24]
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L784
.L791:
	.align	2
.L790:
	.word	.LANCHOR3+64
	.fnend
	.size	ncm_open, .-ncm_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_notify_complete, %function
ncm_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	ldr	r8, [r1]
	ldr	r4, [r1, #32]
	ldr	r3, [r4, #20]
	add	r6, r4, #188
	mov	r0, r6
	ldr	r7, [r3, #24]
	bl	_raw_spin_lock
	ldr	ip, [r5, #44]
	cmn	ip, #104
	beq	.L793
	cmp	ip, #0
	beq	.L794
	cmn	ip, #108
	beq	.L793
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #810
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L806
.L794:
	mov	r0, r4
	str	r5, [r4, #168]
	bl	ncm_do_notify
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L793:
	mov	r3, #0
	strb	r3, [r4, #172]
	b	.L794
.L806:
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC22
	add	r0, r0, #792
	ldrb	r3, [r8, #1]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC22
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L794
	.fnend
	.size	ncm_notify_complete, .-ncm_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_free_buf, %function
rmnet_smd_free_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r3, #0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	mov	r8, r0
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	str	r3, [r0, #424]
	str	r3, [r0, #428]
	str	r3, [r0, #432]
	str	r3, [r0, #436]
	str	r3, [r0, #440]
	str	r3, [r0, #444]
	str	r3, [r0, #448]
	str	r3, [r0, #452]
	ldr	r4, [r8, #140]!
	cmp	r4, r8
	ldr	r5, [r4]
	beq	.L808
.L809:
	mov	r0, r4
	sub	r9, r4, #36
	bl	list_del
	ldr	r7, [r6, #88]
	ldr	r0, [r4, #-36]
	mov	r4, r5
	bl	kfree
	mov	r1, r9
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r8, r5
	ldr	r5, [r5]
	bne	.L809
.L808:
	mov	r8, r6
	ldr	r4, [r8, #148]!
	cmp	r4, r8
	ldr	r5, [r4]
	beq	.L810
.L811:
	mov	r0, r4
	sub	r9, r4, #36
	bl	list_del
	ldr	r7, [r6, #92]
	ldr	r0, [r4, #-36]
	mov	r4, r5
	bl	kfree
	mov	r1, r9
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r8, r5
	ldr	r5, [r5]
	bne	.L811
.L810:
	mov	r8, r6
	ldr	r4, [r8, #108]!
	cmp	r4, r8
	ldr	r5, [r4]
	beq	.L812
.L813:
	mov	r0, r4
	sub	r7, r4, #8
	bl	list_del
	ldr	r0, [r4, #-8]
	mov	r4, r5
	bl	kfree
	mov	r0, r7
	bl	kfree
	cmp	r8, r5
	ldr	r5, [r5]
	bne	.L813
.L812:
	mov	r8, r6
	ldr	r4, [r8, #116]!
	cmp	r4, r8
	ldr	r5, [r4]
	beq	.L814
.L815:
	mov	r0, r4
	sub	r7, r4, #8
	bl	list_del
	ldr	r0, [r4, #-8]
	mov	r4, r5
	bl	kfree
	mov	r0, r7
	bl	kfree
	cmp	r8, r5
	ldr	r5, [r5]
	bne	.L815
.L814:
	ldrd	r4, [r6, #96]
	ldr	r0, [r5]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r3, [r3, #12]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	bx	r3	@ indirect register sibling call
	.fnend
	.size	rmnet_smd_free_buf, .-rmnet_smd_free_buf
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_control_rx_work, %function
rmnet_sdio_control_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #32
	strd	r8, [sp, #16]
	sub	r8, r0, #112
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r9, [r0, #-136]
	b	.L824
.L822:
	bl	list_del
	ldr	r3, [r5, #-104]
	mov	r1, r10
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r5, #-104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-4]
	cmn	r3, #19
	bne	.L826
	ldr	r3, [r5, #148]
	add	r3, r3, #1
	str	r3, [r5, #148]
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r7
	bl	kfree
.L824:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #-112]
	mov	r10, r0
	cmp	r4, r8
	mov	r0, r4
	sub	r7, r4, #8
	bne	.L822
	mov	r1, r10
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L826:
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC29
	movt	r1, #:upper16:.LC29
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	r0, r0, #32
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	dev_err
	.fnend
	.size	rmnet_sdio_control_rx_work, .-rmnet_sdio_control_rx_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_setup, %function
rmnet_mux_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r0, #368]
	ldrh	r9, [r1, #4]	@ unaligned
	ldrh	r6, [r1, #2]	@ unaligned
	ldr	r8, [r2, #24]
	cmp	r3, #0
	ldrh	r7, [r1, #6]	@ unaligned
	ldr	r10, [r8, #4]
	beq	.L836
	ldrh	r3, [r1]	@ unaligned
	movw	r2, #8482
	mov	r4, r1
	mov	r5, r0
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r2
	beq	.L829
	movw	r2, #41217
	cmp	r3, r2
	beq	.L830
	cmp	r3, #8448
	beq	.L843
.L846:
	movw	r5, #:lower16:.LANCHOR2
	movt	r5, #:upper16:.LANCHOR2
.L831:
	movw	r3, #858
	ldrh	r3, [r5, r3]
	tst	r3, #4
	mvneq	r4, #94
	bne	.L847
.L827:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L843:
	movw	r3, #:lower16:rmnet_mux_command_complete
	mov	r6, r7
	str	r0, [r10, #32]
	movt	r3, #:upper16:rmnet_mux_command_complete
	mov	r7, #0
	str	r3, [r10, #28]
.L832:
	ldrb	r3, [r10, #26]	@ zero_extendqisi2
	str	r6, [r10, #4]
	mov	r1, r10
	mov	r2, #32
	bfi	r3, r7, #1, #1
	strb	r3, [r10, #26]
	ldr	r3, [r8]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L827
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC31
	mov	r2, r4
	movt	r1, #:upper16:.LC31
	add	r0, r0, #32
	bl	dev_err
	b	.L827
.L830:
	cmp	r6, #0
	bne	.L846
	add	fp, r0, #364
	mov	r0, fp
	bl	_raw_spin_lock
	mov	r2, r5
	ldr	r3, [r2, #336]!
	cmp	r3, r2
	beq	.L848
	mov	r0, r3
	sub	r4, r3, #8
	str	r3, [sp, #20]
	bl	list_del
	ldr	r2, [r5, #344]
	mov	r0, fp
	sub	r2, r2, #1
	str	r2, [r5, #344]
	bl	_raw_spin_unlock
	ldr	r3, [sp, #20]
	ldr	r0, [r10]
	ldmdb	r3, {r1, r6}
	cmp	r7, r6
	movcc	r6, r7
	mov	r2, r6
	bl	memcpy
	ldr	r3, [sp, #20]
	movw	r2, #:lower16:rmnet_mux_response_complete
	str	r5, [r10, #32]
	movt	r2, #:upper16:rmnet_mux_response_complete
	str	r2, [r10, #28]
	ldr	r0, [r3, #-8]
	bl	kfree
	mov	r0, r4
	bl	kfree
	ldr	r3, [r5, #412]
	cmp	r7, r6
	movle	r7, #0
	movgt	r7, #1
	add	r3, r3, #1
	str	r3, [r5, #412]
	b	.L832
.L829:
	ldr	r3, [r0, #348]
	adds	r7, r7, #0
	movne	r7, #1
	ands	r6, r6, #1
	movne	r6, #0
	orrne	r3, r3, #2
	biceq	r3, r3, #2
	str	r3, [r0, #348]
	b	.L832
.L847:
	ldr	r1, [r8]
	str	r6, [sp, #4]
	movw	r2, #:lower16:.LC24
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC24
	str	r9, [sp, #8]
	ldr	r0, .L850
	ldrb	r3, [r4]	@ zero_extendqisi2
	mvn	r4, #94
	add	r1, r1, #32
	str	ip, [sp]
	str	r7, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L827
.L848:
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #834
	movt	r5, #:upper16:.LANCHOR2
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L849
.L834:
	mov	r0, fp
	bl	_raw_spin_unlock
	b	.L831
.L836:
	mvn	r4, #106
	b	.L827
.L849:
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC30
	add	r0, r5, #816
	ldr	r1, [r8]
	movt	r2, #:upper16:.LC30
	stmib	sp, {r6, r9}
	ldrb	r3, [r4]	@ zero_extendqisi2
	str	ip, [sp]
	add	r1, r1, #32
	str	r7, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L834
.L851:
	.align	2
.L850:
	.word	.LANCHOR2+840
	.fnend
	.size	rmnet_mux_setup, .-rmnet_mux_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_write_complete, %function
diag_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0]
	ldr	r7, [r1, #32]
	ldr	r2, [r5, #136]
	sub	ip, r2, #1
	str	ip, [r5, #136]
	ldr	ip, [r1, #44]
	cmp	ip, #0
	bne	.L853
	ldrh	r0, [r0, #20]
	ldr	ip, [r1, #4]
	cmp	ip, r0
	bcc	.L853
	udiv	lr, ip, r0
	mls	r0, r0, lr, ip
	cmp	r0, #0
	beq	.L866
.L853:
	add	r6, r5, #108
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	add	r2, r5, #100
	ldr	r1, [r5, #104]
	add	r0, r4, #36
	bl	__list_add
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L867
.L854:
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #124]
	cmp	r3, #0
	beq	.L852
	ldr	lr, [r3, #12]
	cmp	lr, #0
	beq	.L852
	mov	r2, r7
	mov	r1, #2
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r0, [r3, #16]
	mov	r3, lr
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L867:
	ldr	r3, [r4, #48]
	str	r3, [r7, #8]
	ldr	r3, [r4, #44]
	str	r3, [r7, #12]
	b	.L854
.L852:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L866:
	str	r2, [r5, #136]
	ldr	ip, [r1, #48]
	mov	r2, #32
	str	r0, [r1, #4]
	str	ip, [r7, #8]
	ldr	r3, [r1, #44]
	str	r3, [r7, #12]
	ldr	r0, [r5, #88]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	r3, [r0, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #16]
	bx	r3
	.fnend
	.size	diag_write_complete, .-diag_write_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_read_complete, %function
diag_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r1, #32]
	ldr	r3, [r1, #48]
	ldr	r4, [r0]
	str	r3, [r6, #8]
	ldr	r3, [r1, #44]
	add	r7, r4, #108
	mov	r0, r7
	str	r3, [r6, #12]
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	add	r2, r4, #92
	ldr	r1, [r4, #96]
	add	r0, r5, #36
	bl	__list_add
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #124]
	ldr	r3, [r4, #132]
	cmp	r0, #0
	add	r3, r3, #1
	str	r3, [r4, #132]
	beq	.L868
	ldr	r3, [r0, #12]
	cmp	r3, #0
	beq	.L868
	mov	r2, r6
	mov	r1, #3
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	r0, [r0, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L868:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	diag_read_complete, .-diag_read_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_start_rx, %function
rmnet_smd_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #164
	strd	r8, [sp, #16]
	add	r9, r0, #148
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r10, [r0, #84]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	b	.L878
.L880:
	bl	list_del
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #88]
	mov	r1, r8
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	r8, #0
	mov	r7, r0
	bne	.L884
.L878:
	ldr	r4, [r5, #148]
	cmp	r9, r4
	mov	r0, r4
	sub	r8, r4, #36
	bne	.L880
.L879:
	mov	r1, r7
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L884:
	ldr	r0, [r10]
	movw	r1, #:lower16:.LC32
	mov	r2, r8
	movt	r1, #:upper16:.LC32
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r9
	mov	r0, r4
	ldr	r1, [r5, #152]
	bl	__list_add
	b	.L879
	.fnend
	.size	rmnet_smd_start_rx, .-rmnet_smd_start_rx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	prealloc, %function
prealloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #0
	beq	.L906
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	sub	r2, r2, #1
	strd	r6, [sp, #8]
	mov	r7, r1
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	cmp	r0, r4
	sub	r4, r4, #36
	bne	.L887
	b	.L909
.L890:
	cmn	r5, #1
	mov	r2, r5
	beq	.L889
.L887:
	ldr	r4, [r4, #36]
	sub	r5, r2, #1
	cmp	r6, r4
	sub	r4, r4, #36
	bne	.L890
	ldr	r3, [r7, #28]
	cmp	r2, #0
	ldrb	r4, [r3, #2]	@ zero_extendqisi2
	lsr	r3, r4, #7
	beq	.L894
.L891:
	movw	r2, #:lower16:rx_complete
	movw	r4, #:lower16:tx_complete
	movt	r2, #:upper16:rx_complete
	cmp	r3, #0
	movt	r4, #:upper16:tx_complete
	moveq	r4, r2
	b	.L895
.L893:
	str	r4, [r3, #28]
	ldr	r2, [r6]
	bl	__list_add
	cmp	r5, #0
	sub	r5, r5, #1
	beq	.L894
.L895:
	ldr	r3, [r7, #8]
	mov	r1, #32
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r1, r6
	add	r0, r3, #36
	bne	.L893
	ldr	r3, [r6]
	cmp	r6, r3
	mvneq	r0, #11
	beq	.L885
.L894:
	mov	r0, #0
.L885:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L889:
	mov	r0, r4
	ldr	r5, [r0, #36]!
	bl	list_del
	ldr	r3, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	sub	r4, r5, #36
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r6, r5
	bne	.L889
	b	.L894
.L909:
	ldr	r3, [r1, #28]
	mov	r5, r2
	ldrb	r3, [r3, #2]	@ zero_extendqisi2
	lsr	r3, r3, #7
	b	.L891
.L906:
	mvn	r0, #11
	bx	lr
	.fnend
	.size	prealloc, .-prealloc
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_start_rx, %function
rmnet_mux_smd_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #364
	strd	r8, [sp, #16]
	add	r9, r0, #112
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r10, [r0, #84]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	b	.L911
.L913:
	bl	list_del
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #88]
	mov	r1, r8
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	r8, #0
	mov	r7, r0
	bne	.L917
.L911:
	ldr	r4, [r5, #112]
	cmp	r9, r4
	mov	r0, r4
	sub	r8, r4, #36
	bne	.L913
.L912:
	mov	r1, r7
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L917:
	ldr	r0, [r10]
	movw	r1, #:lower16:.LC32
	mov	r2, r8
	movt	r1, #:upper16:.LC32
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r9
	mov	r0, r4
	ldr	r1, [r5, #116]
	bl	__list_add
	b	.L912
	.fnend
	.size	rmnet_mux_smd_start_rx, .-rmnet_mux_smd_start_rx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_open, %function
ffs_epfile_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r2, [r0, #328]
	ldr	r3, [r2, #36]
	ldr	r3, [r3, #92]
	cmp	r3, #2
	bne	.L922
	str	r2, [r1, #124]
	ldr	r3, [r2, #36]
	add	r1, r3, #84
	.syntax divided
@ 45 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r0, [r1]
	add	r0, r0, #1
	strex	ip, r0, [r1]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	add	r1, r3, #88
	.syntax divided
@ 45 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r0, [r1]
	add	r0, r0, #1
	strex	ip, r0, [r1]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
	mov	r0, r3
	str	r3, [r2, #32]
.L918:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L922:
	movw	r0, #:lower16:.LC33
	movw	r1, #946
	movt	r0, #:upper16:.LC33
	bl	warn_slowpath_null
	mvn	r0, #18
	b	.L918
	.fnend
	.size	ffs_epfile_open, .-ffs_epfile_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	do_mode_sense, %function
do_mode_sense:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r3, [r0, #77]	@ zero_extendqisi2
	ldrb	r8, [r0, #76]	@ zero_extendqisi2
	ldr	r5, [r1]
	ldr	r7, [r0, #104]
	tst	r3, #247
	bne	.L933
	ldrb	r4, [r0, #78]	@ zero_extendqisi2
	lsr	r9, r4, #6
	and	r4, r4, #63
	cmp	r9, #3
	moveq	r3, #14592
	mvneq	r0, #21
	movteq	r3, 5
	streq	r3, [r7, #28]
	beq	.L923
	mov	r1, #8
	mov	r0, r5
	bl	__memzero
	sub	r3, r4, #63
	cmp	r8, #26
	ldrb	r2, [r7, #24]	@ zero_extendqisi2
	clz	r3, r3
	lsr	r3, r3, #5
	beq	.L939
	lsl	r2, r2, #6
	add	r6, r5, #8
	bic	r2, r2, #127
	movw	r10, #65535
	strb	r2, [r5, #3]
.L928:
	cmp	r4, #8
	orreq	r3, r3, #1
	cmp	r3, #0
	bne	.L940
	cmp	r4, #42
	beq	.L932
.L933:
	mov	r3, #9216
	mvn	r0, #21
	movt	r3, 5
	str	r3, [r7, #28]
.L923:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L939:
	lsl	r2, r2, #6
	add	r6, r5, #4
	mov	r10, #255
	bic	r2, r2, #127
	strb	r2, [r5, #2]
	b	.L928
.L940:
	mov	r3, #10
	mov	r2, #8
	mov	r1, r3
	add	r0, r6, #2
	strb	r2, [r6]
	strb	r3, [r6, #1]
	bl	__memzero
	cmp	r9, #1
	beq	.L930
	mvn	r3, #0
	mov	r2, #4
	strb	r2, [r6, #2]
	strb	r3, [r6, #4]
	strb	r3, [r6, #5]
	str	r3, [r6, #8]	@ unaligned
.L930:
	add	r0, r6, #12
.L931:
	sub	r0, r0, r5
	cmp	r10, r0
	blt	.L933
	cmp	r8, #26
	subeq	r3, r0, #1
	strbeq	r3, [r5]
	beq	.L923
	sub	r3, r0, #2
	sxth	r3, r3
	ubfx	r2, r3, #8, #8
	strb	r2, [r5]
	strb	r3, [r5, #1]
	b	.L923
.L932:
	mov	r3, #26
	add	r0, r6, #2
	strb	r4, [r6]
	mov	r1, r3
	strb	r3, [r6, #1]
	bl	__memzero
	mov	r3, #2
	mov	r1, #4
	mov	r2, #40
	add	r0, r6, #28
	strb	r3, [r6, #2]
	strb	r3, [r6, #3]
	strb	r1, [r6, #4]
	strb	r2, [r6, #6]
	b	.L931
	.fnend
	.size	do_mode_sense, .-do_mode_sense
	.align	2
	.global	usb_rmnet_mux_ctrl_open
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_open, %function
usb_rmnet_mux_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r3, #2480]
	add	r6, r5, #364
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #352]
	mov	r1, r0
	cmp	r4, #0
	bne	.L945
	mov	r3, #1
	mov	r0, r6
	str	r3, [r5, #352]
	str	r5, [r7, #124]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
.L941:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L945:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC34
	ldr	r1, .L946
	movt	r0, #:upper16:.LC34
	bl	printk
	mvn	r0, #15
	b	.L941
.L947:
	.align	2
.L946:
	.word	.LANCHOR3+76
	.fnend
	.size	usb_rmnet_mux_ctrl_open, .-usb_rmnet_mux_ctrl_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_setup, %function
ecm_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	movw	r2, #17185
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	ip, [r1, #6]	@ unaligned
	.pad #20
	sub	sp, sp, #20
	ldrh	r1, [r1]	@ unaligned
	ldrh	r6, [r4, #2]	@ unaligned
	ldr	r3, [r0, #20]
	ldrh	r7, [r4, #4]	@ unaligned
	cmp	ip, #0
	cmpeq	r1, r2
	uxth	r8, r6
	ldr	r9, [r3, #24]
	beq	.L959
.L949:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #930
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	mvneq	r5, #94
	bne	.L960
.L948:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L959:
	ldrb	r3, [r0, #120]	@ zero_extendqisi2
	mov	r5, r0
	cmp	r3, r7
	bne	.L949
	movw	r10, #:lower16:.LANCHOR2
	movw	r3, #882
	ldr	fp, [r9, #4]
	movt	r10, #:upper16:.LANCHOR2
	ldrh	r3, [r10, r3]
	tst	r3, #4
	bne	.L961
.L950:
	movw	r3, #906
	strh	r6, [r5, #98]	@ movhi
	ldrh	r3, [r10, r3]
	tst	r3, #4
	bne	.L962
.L952:
	ldrb	r3, [fp, #26]	@ zero_extendqisi2
	mov	r2, #0
	mov	r1, fp
	str	r2, [fp, #4]
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [fp, #26]
	ldr	r3, [r9]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bge	.L948
	movw	r0, #:lower16:.LC35
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	str	r5, [sp]
	ldr	r1, .L963
	movt	r0, #:upper16:.LC35
	ldrb	r2, [r4]	@ zero_extendqisi2
	bl	printk
	b	.L948
.L960:
	ldrb	lr, [r4, #1]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC24
	add	r0, r0, #912
	ldr	r1, [r9]
	movt	r2, #:upper16:.LC24
	str	r8, [sp, #4]
	ldrb	r3, [r4]	@ zero_extendqisi2
	mvn	r5, #94
	str	lr, [sp]
	add	r1, r1, #32
	str	r7, [sp, #8]
	str	ip, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L948
.L961:
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC23
	mov	r3, r8
	movt	r2, #:upper16:.LC23
	add	r0, r10, #864
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L950
.L962:
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	mov	r0, #0
	movw	r2, #:lower16:.LC25
	ldr	r1, [r9]
	movt	r2, #:upper16:.LC25
	str	r8, [sp, #4]
	str	r7, [sp, #8]
	ldrb	r3, [r4]	@ zero_extendqisi2
	str	ip, [sp]
	add	r1, r1, #32
	str	r0, [sp, #12]
	ldr	r0, .L963+4
	bl	__dynamic_dev_dbg
	b	.L952
.L964:
	.align	2
.L963:
	.word	.LANCHOR3+100
	.word	.LANCHOR2+888
	.fnend
	.size	ecm_qc_setup, .-ecm_qc_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_response_complete, %function
rndis_qc_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r5, [r1, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r1, #44]
	ldr	r2, [r5, #20]
	cmp	r2, #0
	beq	.L966
	ldr	r7, [r2, #24]
	cmp	r7, #0
	beq	.L966
	cmn	r3, #104
	beq	.L968
	cmp	r3, #0
	mov	r6, r0
	mov	r4, r1
	bne	.L993
.L969:
	ldr	r3, [r5, #156]
	cmp	r3, r6
	beq	.L994
.L965:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L993:
	cmn	r3, #108
	beq	.L968
	ldr	r2, [r4, #4]
	movw	r0, #:lower16:.LC37
	ldr	ip, [r4, #48]
	movt	r0, #:upper16:.LC37
	ldr	r1, .L995
	str	r2, [sp, #4]
	ldr	r2, [r6, #4]
	str	ip, [sp]
	bl	printk
	b	.L969
.L968:
	mov	r3, #0
	str	r3, [r5, #164]
	b	.L965
.L994:
	add	r6, r5, #164
	.syntax divided
@ 99 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L965
	ldr	r0, [r5, #156]
	mov	r1, r4
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L965
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	ip, #:lower16:.LANCHOR2
	movw	r3, #954
	movt	ip, #:upper16:.LANCHOR2
	ldrh	r3, [ip, r3]
	tst	r3, #4
	beq	.L965
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC14
	mov	r3, r0
	movt	r2, #:upper16:.LC14
	add	r0, ip, #936
	add	r1, r1, #32
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	__dynamic_dev_dbg
.L966:
	ldr	r2, .L995
	movw	r0, #:lower16:.LC36
	movt	r0, #:upper16:.LC36
	mov	r1, r2
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	printk
.L996:
	.align	2
.L995:
	.word	.LANCHOR3+116
	.fnend
	.size	rndis_qc_response_complete, .-rndis_qc_response_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_response_available, %function
rndis_qc_response_available:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #164
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r1, [r0, #160]
	ldr	ip, [r1]
	.syntax divided
@ 61 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L997
	mov	r4, r0
	mov	r0, #0
	str	r3, [ip]
	mov	r2, #32
	str	r0, [ip, #4]
	ldr	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L1005
.L997:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1005:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r1, r3, [r5]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC38
	ldr	r1, .L1006
	movt	r0, #:upper16:.LC38
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L1007:
	.align	2
.L1006:
	.word	.LANCHOR3+144
	.fnend
	.size	rndis_qc_response_available, .-rndis_qc_response_available
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_buffer_alloc, %function
f_audio_buffer_alloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L1011
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L1013
.L1009:
	mov	r0, r5
	movw	r1, #32800
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	bne	.L1008
	movw	r0, #:lower16:.LC40
	ldr	r1, .L1014
	movt	r0, #:upper16:.LC40
	bl	printk
	mov	r0, r4
	mvn	r4, #11
	bl	kfree
.L1008:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1011:
	mov	r4, #16
	b	.L1009
.L1013:
	movw	r0, #:lower16:.LC39
	ldr	r1, .L1014
	mvn	r4, #11
	movt	r0, #:upper16:.LC39
	bl	printk
	b	.L1008
.L1015:
	.align	2
.L1014:
	.word	.LANCHOR3+172
	.fnend
	.size	f_audio_buffer_alloc, .-f_audio_buffer_alloc
	.section	.text.unlikely,"ax",%progbits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_release, %function
conn_gadget_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	movw	r0, #:lower16:.LC41
	movw	r4, #:lower16:.LANCHOR1
	movt	r0, #:upper16:.LC41
	movt	r4, #:upper16:.LANCHOR1
	movw	r7, #:lower16:.LC42
	bl	printk
	ldr	r0, [r4, #2484]
	mov	r6, r4
	movt	r7, #:upper16:.LC42
	add	r0, r0, #88
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #2484]
	mov	r1, r0
	ldr	r5, [r3, #136]
	ldr	r4, [r5], #-36
	sub	r4, r4, #36
.L1017:
	ldr	r3, [r6, #2484]
	add	r2, r5, #36
	add	r0, r3, #136
	add	r3, r3, #88
	cmp	r2, r0
	mov	r0, r3
	beq	.L1020
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	bl	printk
	ldr	r3, [r6, #2484]
	mov	r1, r5
	mov	r5, r4
	ldr	r0, [r3, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r0, [r6, #2484]
	add	r0, r0, #88
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r4, #36]
	mov	r1, r0
	sub	r4, r4, #36
	b	.L1017
.L1020:
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6, #2484]
	mov	r0, #0
	add	r2, r3, #116
	str	r0, [r3, #216]
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	ip, r1, [r2]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	pop	{r4, r5, r6, r7, r8, pc}
	.fnend
	.size	conn_gadget_release, .-conn_gadget_release
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_setup, %function
ncm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	movw	r2, #8586
	strd	r6, [sp, #8]
	mov	r5, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r1]	@ unaligned
	.pad #28
	sub	sp, sp, #28
	ldrh	r9, [r1, #2]	@ unaligned
	ldrh	fp, [r1, #4]	@ unaligned
	ldrh	r8, [r1, #6]	@ unaligned
	ldr	r1, [r0, #20]
	rev16	r3, r3
	uxth	r3, r3
	uxth	r10, r9
	cmp	r3, r2
	ldr	r6, [r1, #24]
	ldr	r7, [r6, #4]
	beq	.L1022
	bls	.L1063
	movw	r2, #41349
	cmp	r3, r2
	beq	.L1030
	bhi	.L1031
	movw	r2, #41344
	cmp	r3, r2
	beq	.L1032
	movw	r2, #41347
	cmp	r3, r2
	bne	.L1027
	adds	r3, r10, #0
	movne	r3, #1
	cmp	r8, #1
	orrls	r3, r3, #1
	cmp	r3, #0
	bne	.L1027
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, fp
	beq	.L1064
.L1027:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1098
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	mvneq	r5, #94
	bne	.L1065
.L1021:
	mov	r0, r5
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1031:
	movw	r2, #41351
	cmp	r3, r2
	beq	.L1034
	movw	r2, #41353
	cmp	r3, r2
	bne	.L1027
	adds	r3, r10, #0
	movne	r3, #1
	cmp	r8, #1
	orrls	r3, r3, #1
	cmp	r3, #0
	bne	.L1027
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, fp
	bne	.L1027
	movw	r2, #:lower16:.LANCHOR2
	ldrb	r1, [r0, #180]	@ zero_extendqisi2
	mov	r9, #2
	mov	r0, r2
	ldr	r2, [r7]
	movt	r0, #:upper16:.LANCHOR2
	str	r0, [sp, #20]
	strb	r1, [r2]
	strb	r3, [r2, #1]
	b	.L1037
.L1063:
	movw	r2, #8580
	cmp	r3, r2
	beq	.L1024
	bls	.L1066
	movw	r2, #8582
	cmp	r3, r2
	beq	.L1028
	movw	r2, #8584
	cmp	r3, r2
	bne	.L1027
	cmp	r10, #0
	cmpeq	r8, #2
	bne	.L1027
	ldrb	r3, [r0, #148]	@ zero_extendqisi2
	cmp	r3, fp
	bne	.L1027
	movw	r3, #:lower16:ncm_setdgram_complete
	mov	r9, #2
	str	r0, [r7, #32]
	movt	r3, #:upper16:ncm_setdgram_complete
	b	.L1062
.L1066:
	movw	r2, #8515
	cmp	r3, r2
	bne	.L1027
	cmp	r8, #0
	bne	.L1027
	ldrb	r3, [r0, #148]	@ zero_extendqisi2
	cmp	r3, fp
	bne	.L1027
	movw	r3, #:lower16:.LANCHOR2
	mov	r2, r3
	movw	r3, #978
	movt	r2, #:upper16:.LANCHOR2
	ldrh	r3, [r2, r3]
	str	r2, [sp, #20]
	tst	r3, #4
	bne	.L1067
.L1036:
	strh	r9, [r5, #98]	@ movhi
	mov	r9, #0
	b	.L1037
.L1032:
	adds	r3, r10, #0
	movne	r3, #1
	cmp	r8, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L1027
	ldrb	r3, [r0, #148]	@ zero_extendqisi2
	cmp	r3, fp
	bne	.L1027
	cmp	r8, #28
	movw	r3, #:lower16:.LANCHOR2
	ldr	r1, .L1071
	movcc	r9, r8
	movcs	r9, #28
	ldr	r0, [r7]
	movt	r3, #:upper16:.LANCHOR2
	mov	r2, r9
	str	r3, [sp, #20]
	bl	memcpy
	b	.L1037
.L1034:
	adds	r3, r10, #0
	movne	r3, #1
	cmp	r8, #1
	orrls	r3, r3, #1
	cmp	r3, #0
	bne	.L1027
	ldrb	r3, [r0, #148]	@ zero_extendqisi2
	cmp	r3, fp
	bne	.L1027
	ldrh	r2, [r0, #182]
	movw	r1, #:lower16:.LANCHOR2
	movw	r0, #:lower16:.LC47
	ldr	r3, [r7]
	movt	r1, #:upper16:.LANCHOR2
	movt	r0, #:upper16:.LC47
	mov	r9, #2
	str	r1, [sp, #20]
	ldr	r1, .L1071+4
	lsr	ip, r2, #8
	strb	r2, [r3]
	strb	ip, [r3, #1]
	ldrh	r2, [r5, #182]
	bl	printk
	b	.L1037
.L1024:
	cmp	r8, #0
	bne	.L1027
	ldrb	r3, [r0, #148]	@ zero_extendqisi2
	cmp	r3, fp
	bne	.L1027
	cmp	r10, #0
	beq	.L1038
	cmp	r10, #1
	bne	.L1027
	movw	r3, #:lower16:.LANCHOR2
	ldr	r2, .L1071+8
	mov	r1, r3
	movw	r3, #1026
	movt	r1, #:upper16:.LANCHOR2
	ldrh	r3, [r1, r3]
	str	r1, [sp, #20]
	str	r2, [r0, #176]
	tst	r3, #4
	bne	.L1068
.L1040:
	mov	r9, #0
	b	.L1037
.L1028:
	cmp	r10, #0
	cmpeq	r8, #4
	bne	.L1027
	ldrb	r3, [r0, #148]	@ zero_extendqisi2
	cmp	r3, fp
	bne	.L1027
	movw	r3, #:lower16:ncm_ep0out_complete
	mov	r9, #4
	str	r0, [r7, #32]
	movt	r3, #:upper16:ncm_ep0out_complete
.L1062:
	movw	r2, #:lower16:.LANCHOR2
	str	r9, [r7, #4]
	movt	r2, #:upper16:.LANCHOR2
	str	r3, [r7, #28]
	str	r2, [sp, #20]
	b	.L1037
.L1022:
	cmp	r8, #0
	bne	.L1027
	ldrb	r3, [r0, #148]	@ zero_extendqisi2
	cmp	r3, fp
	bne	.L1027
	cmp	r10, #0
	beq	.L1041
	cmp	r10, #1
	bne	.L1027
	movw	r3, #:lower16:.LANCHOR2
	strb	r10, [r0, #180]
	mov	r2, r3
	movw	r3, #1074
	movt	r2, #:upper16:.LANCHOR2
	ldrh	r3, [r2, r3]
	str	r2, [sp, #20]
	tst	r3, #4
	moveq	r0, #16777216
	bne	.L1069
.L1043:
	ldr	r1, [r5, #176]
	mov	r9, #0
	ldr	r2, [r1, #4]
	bic	r2, r2, #16777216
	str	r2, [r1, #4]
	ldr	r2, [r5, #176]
	ldr	r3, [r2, #4]
	orr	r3, r3, r0
	str	r3, [r2, #4]
	b	.L1037
.L1030:
	adds	r3, r10, #0
	movne	r3, #1
	cmp	r8, #3
	orrls	r3, r3, #1
	cmp	r3, #0
	bne	.L1027
	ldrb	r3, [r0, #148]	@ zero_extendqisi2
	cmp	r3, fp
	bne	.L1027
	movw	r2, #:lower16:.LANCHOR2
	ldr	r3, [r0, #112]
	mov	r9, #4
	mov	r1, r2
	ldr	r2, [r7]
	movt	r1, #:upper16:.LANCHOR2
	str	r1, [sp, #20]
	lsr	r1, r3, #16
	strb	r3, [r2]
	ubfx	r3, r3, #8, #8
	lsr	r0, r1, #8
	strb	r3, [r2, #1]
	strb	r1, [r2, #2]
	strb	r0, [r2, #3]
.L1037:
	ldr	r2, [sp, #20]
	movw	r3, #1122
	ldrh	r3, [r2, r3]
	tst	r3, #4
	bne	.L1070
.L1045:
	ldrb	r3, [r7, #26]	@ zero_extendqisi2
	str	r9, [r7, #4]
	mov	r1, r7
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r7, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bge	.L1021
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC49
	str	r5, [sp]
	movt	r1, #:upper16:.LC49
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	ldrb	r2, [r4]	@ zero_extendqisi2
	add	r0, r0, #32
	bl	dev_err
	b	.L1021
.L1065:
	ldr	r1, [r6]
	str	r10, [sp, #4]
	movw	r2, #:lower16:.LC24
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC24
	str	fp, [sp, #8]
	ldr	r0, .L1071+12
	mvn	r5, #94
	ldrb	r3, [r4]	@ zero_extendqisi2
	add	r1, r1, #32
	str	ip, [sp]
	str	r8, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L1021
.L1064:
	ldr	r0, .L1071+16
	movw	r1, #:lower16:.LANCHOR2
	mov	r9, #2
	ldr	r2, [r5, #176]
	movt	r1, #:upper16:.LANCHOR2
	str	r1, [sp, #20]
	ldr	r1, [r7]
	subs	r2, r2, r0
	movne	r2, #1
	strb	r2, [r1]
	strb	r3, [r1, #1]
	b	.L1037
.L1070:
	ldr	r1, [r6]
	str	r10, [sp, #4]
	movw	r2, #:lower16:.LC48
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC48
	str	fp, [sp, #8]
	ldr	r0, .L1071+20
	str	r8, [sp, #12]
	ldrb	r3, [r4]	@ zero_extendqisi2
	add	r1, r1, #32
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L1045
.L1038:
	movw	r3, #:lower16:.LANCHOR2
	ldr	r2, .L1071+16
	mov	r1, r3
	movw	r3, #1002
	movt	r1, #:upper16:.LANCHOR2
	ldrh	r3, [r1, r3]
	str	r1, [sp, #20]
	str	r2, [r0, #176]
	tst	r3, #4
	beq	.L1040
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC43
	mov	r9, r10
	ldr	r3, [sp, #20]
	movt	r2, #:upper16:.LC43
	add	r1, r1, #32
	add	r0, r3, #984
	bl	__dynamic_dev_dbg
	b	.L1037
.L1041:
	movw	r3, #:lower16:.LANCHOR2
	strb	r10, [r0, #180]
	mov	r2, r3
	movw	r3, #1050
	movt	r2, #:upper16:.LANCHOR2
	ldrh	r3, [r2, r3]
	str	r2, [sp, #20]
	tst	r3, #4
	moveq	r0, r10
	beq	.L1043
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC45
	movt	r2, #:upper16:.LC45
	ldr	r0, .L1071+24
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	mov	r0, r10
	b	.L1043
.L1067:
	ldr	r1, [r6]
	mov	r0, r2
	movw	r2, #:lower16:.LC23
	mov	r3, r10
	movt	r2, #:upper16:.LC23
	add	r0, r0, #960
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L1036
.L1068:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC44
	mov	r9, r8
	ldr	r3, [sp, #20]
	movt	r2, #:upper16:.LC44
	add	r1, r1, #32
	add	r0, r3, #1008
	bl	__dynamic_dev_dbg
	b	.L1037
.L1069:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC46
	ldr	r3, [sp, #20]
	movt	r2, #:upper16:.LC46
	add	r1, r1, #32
	add	r0, r3, #1056
	bl	__dynamic_dev_dbg
	mov	r0, #16777216
	b	.L1043
.L1072:
	.align	2
.L1071:
	.word	.LANCHOR0+20
	.word	.LANCHOR3+196
	.word	.LANCHOR0+92
	.word	.LANCHOR2+1080
	.word	.LANCHOR0+48
	.word	.LANCHOR2+1104
	.word	.LANCHOR2+1032
	.fnend
	.size	ncm_setup, .-ncm_setup
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_setdgram_complete, %function
ncm_setdgram_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	movw	r3, #:lower16:.LANCHOR0
	mov	lr, #0
	movt	r3, #:upper16:.LANCHOR0
	ldr	ip, [r1, #32]
	ldr	r2, [r1, #44]
	mov	r4, r0
	str	lr, [r1, #32]
	ldr	lr, [r3, #24]
	ldr	r0, [r3, #36]
	cmp	r2, #0
	bne	.L1074
	ldr	r2, [r1, #4]
	ldr	r5, [r1, #48]
	cmp	r5, r2
	beq	.L1075
.L1074:
	movw	r0, #:lower16:.LC50
	ldr	r1, .L1084
	movt	r0, #:upper16:.LC50
	bl	printk
	b	.L1076
.L1075:
	ldr	r1, [r1]
	movw	r5, #7500
	ldrb	r6, [r1, #1]	@ zero_extendqisi2
	ldrb	r2, [r1]	@ zero_extendqisi2
	orr	r2, r2, r6, lsl #8
	sub	r1, r2, #1504
	sub	r1, r1, #10
	cmp	r1, r5
	bls	.L1077
	movw	r0, #:lower16:.LC51
	ldr	r1, .L1084
	movt	r0, #:upper16:.LC51
	bl	printk
	b	.L1076
.L1077:
	ldrh	r1, [r3, #44]
	cmp	r0, lr
	movcs	r0, lr
	add	r3, r1, #11
	rsb	r1, r1, #0
	and	r3, r3, r1
	add	r3, r3, #12
	add	r3, r3, r2
	cmp	r3, r0
	bls	.L1078
	movw	r0, #:lower16:.LC52
	ldr	r1, .L1084
	movt	r0, #:upper16:.LC52
	bl	printk
	movw	r0, #:lower16:.LC53
	movt	r0, #:upper16:.LC53
	bl	printk
	b	.L1076
.L1078:
	ldr	r3, [ip, #184]
	movw	r0, #:lower16:.LC54
	strh	r2, [ip, #182]	@ movhi
	movt	r0, #:upper16:.LC54
	cmp	r3, #0
	subne	r1, r2, #14
	strne	r1, [r3, #356]
	ldr	r1, .L1084
	pop	{r4, r5, r6, lr}
	b	printk
.L1076:
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	pop	{r4, r5, r6, lr}
	ldr	r3, [r3, #24]
	bx	r3
.L1085:
	.align	2
.L1084:
	.word	.LANCHOR3+208
	.fnend
	.size	ncm_setdgram_complete, .-ncm_setdgram_complete
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_set_string, %function
acc_complete_set_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r1, #44]
	ldr	r0, [r0]
	ldr	r6, [r1, #48]
	cmp	r3, #0
	movwne	r0, #:lower16:.LC55
	movne	r1, r3
	movtne	r0, #:upper16:.LC55
	bne	.L1101
	ldr	r3, [r0, #1640]
	cmp	r3, #5
	ldrls	pc, [pc, r3, asl #2]
	b	.L1088
.L1090:
	.word	.L1095
	.word	.L1094
	.word	.L1093
	.word	.L1092
	.word	.L1091
	.word	.L1089
.L1089:
	add	r7, r0, #1376
	add	r7, r7, #5
.L1096:
	cmp	r7, #0
	beq	.L1088
.L1102:
	add	r4, r0, #88
	mov	r5, r1
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	cmp	r6, #255
	mov	r8, r0
	ldr	r1, [r5]
	movge	r6, #255
	mov	r0, r7
	mov	r2, r6
	bl	memcpy
	mov	r3, #0
	mov	r1, r8
	mov	r0, r4
	strb	r3, [r7, r6]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L1095:
	add	r7, r0, #101
	cmp	r7, #0
	bne	.L1102
.L1088:
	movw	r0, #:lower16:.LC56
	mov	r1, r3
	movt	r0, #:upper16:.LC56
.L1101:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L1094:
	add	r7, r0, #356
	add	r7, r7, #1
	b	.L1096
.L1093:
	add	r7, r0, #612
	add	r7, r7, #1
	b	.L1096
.L1092:
	add	r7, r0, #868
	add	r7, r7, #1
	b	.L1096
.L1091:
	add	r7, r0, #1120
	add	r7, r7, #5
	b	.L1096
	.fnend
	.size	acc_complete_set_string, .-acc_complete_set_string
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_release, %function
acc_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC57
	push	{r4, lr}
	.save {r4, lr}
	movt	r0, #:upper16:.LC57
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #2488]
	add	r2, r2, #1648
	add	r2, r2, #4
	.syntax divided
@ 37 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r1, #0
	.syntax divided
@ 52 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/cmpxchg.h" 1
	@	__xchg4
1:	ldrex	r0, [r2]
	strex	ip, r1, [r2]
	teq	ip, #0
	bne	1b
@ 0 "" 2
@ 98 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r0, r1
	mov	r4, r3
	bne	.L1104
	movw	r0, #:lower16:.LC58
	movw	r1, #799
	movt	r0, #:upper16:.LC58
	bl	warn_slowpath_null
.L1104:
	ldr	r3, [r4, #2488]
	mov	r0, #0
	ldrb	r2, [r3, #100]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #100]
	pop	{r4, pc}
	.fnend
	.size	acc_release, .-acc_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_open, %function
acc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC59
	push	{r4, lr}
	.save {r4, lr}
	movt	r0, #:upper16:.LC59
	mov	r4, r1
	bl	printk
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r3, [r2, #2488]
	add	r3, r3, #1648
	add	r3, r3, #4
	.syntax divided
@ 37 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #1
	.syntax divided
@ 52 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/cmpxchg.h" 1
	@	__xchg4
1:	ldrex	ip, [r3]
	strex	r1, r0, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 98 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	ip, #0
	bne	.L1108
	ldr	r3, [r2, #2488]
	mov	r0, ip
	ldrb	r2, [r3, #100]	@ zero_extendqisi2
	bfi	r2, ip, #1, #1
	strb	r2, [r3, #100]
	str	r3, [r4, #124]
	pop	{r4, pc}
.L1108:
	mvn	r0, #15
	pop	{r4, pc}
	.fnend
	.size	acc_open, .-acc_open
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	sua_version_info_store, %function
sua_version_info_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	ldr	r6, [r0, #4]
	cmp	r4, #100
	mov	r1, r5
	movls	r2, r4
	movhi	r2, #100
	ldr	r0, [r6, #96]
	add	r0, r0, #235
	bl	memcpy
	ldr	ip, [r6, #96]
	movw	r0, #:lower16:.LC60
	mov	r2, r5
	ldr	r1, .L1114
	mov	r3, #4
	movt	r0, #:upper16:.LC60
	add	ip, ip, #235
	str	ip, [sp]
	bl	printk
	mov	r0, r4
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1115:
	.align	2
.L1114:
	.word	.LANCHOR3+232
	.fnend
	.size	sua_version_info_store, .-sua_version_info_store
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_release_dev, %function
rndis_qc_release_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC61
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	ldr	r1, .L1120
	movw	r4, #:lower16:.LANCHOR1
	movt	r0, #:upper16:.LC61
	bl	printk
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, .L1120+4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #2496]
	mov	r5, r0
	cmp	r3, #0
	bne	.L1117
	movw	r0, #:lower16:.LC62
	ldr	r1, .L1120
	movt	r0, #:upper16:.LC62
	bl	printk
	mov	r1, r5
	ldr	r0, .L1120+4
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #18
	pop	{r4, r5, r6, pc}
.L1117:
	add	r2, r3, #152
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, .L1120+4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	pop	{r4, r5, r6, pc}
.L1121:
	.align	2
.L1120:
	.word	.LANCHOR3+256
	.word	.LANCHOR1+2492
	.fnend
	.size	rndis_qc_release_dev, .-rndis_qc_release_dev
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_open_dev, %function
rndis_qc_open_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC63
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	movt	r0, #:upper16:.LC63
	mov	r6, r1
	ldr	r1, .L1128
	movw	r4, #:lower16:.LANCHOR1
	bl	printk
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, .L1128+4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #2496]
	mov	r5, r0
	cmp	r3, #0
	bne	.L1123
	movw	r0, #:lower16:.LC64
	ldr	r1, .L1128
	mvn	r4, #18
	movt	r0, #:upper16:.LC64
	bl	printk
	b	.L1124
.L1123:
	add	r2, r3, #152
	.syntax divided
@ 61 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #1
	ldreq	r3, [r4, #2496]
	moveq	r4, #0
	streq	r3, [r6, #124]
	beq	.L1124
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC65
	ldr	r1, .L1128
	mvn	r4, #15
	movt	r0, #:upper16:.LC65
	bl	printk
.L1124:
	mov	r1, r5
	ldr	r0, .L1128+4
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, #0
	bne	.L1122
	movw	r0, #:lower16:.LC66
	ldr	r1, .L1128
	movt	r0, #:upper16:.LC66
	bl	printk
.L1122:
	mov	r0, r4
	pop	{r4, r5, r6, pc}
.L1129:
	.align	2
.L1128:
	.word	.LANCHOR3+280
	.word	.LANCHOR1+2492
	.fnend
	.size	rndis_qc_open_dev, .-rndis_qc_open_dev
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_release, %function
mtp_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC67
	push	{r4, lr}
	.save {r4, lr}
	movt	r0, #:upper16:.LC67
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2500]
	add	r2, r3, #108
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #0
	pop	{r4, pc}
	.fnend
	.size	mtp_release, .-mtp_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_open, %function
mtp_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC68
	push	{r4, lr}
	.save {r4, lr}
	movt	r0, #:upper16:.LC68
	mov	r4, r1
	bl	printk
	movw	r0, #:lower16:.LANCHOR1
	movt	r0, #:upper16:.LANCHOR1
	ldr	r3, [r0, #2500]
	add	r2, r3, #108
	.syntax divided
@ 61 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	ip, [r2]
	add	ip, ip, #1
	strex	r1, ip, [r2]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	ip, #1
	bne	.L1133
	ldr	r3, [r0, #2500]
	mov	r0, #0
	ldr	r2, [r3, #104]
	cmp	r2, #0
	strne	ip, [r3, #104]
	str	r3, [r4, #124]
	pop	{r4, pc}
.L1133:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #15
	pop	{r4, pc}
	.fnend
	.size	mtp_open, .-mtp_open
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_notify_complete, %function
ccid_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r1, [r1, #44]
	cmn	r1, #104
	beq	.L1138
	cmp	r1, #0
	beq	.L1138
	cmn	r1, #108
	beq	.L1138
	movw	r0, #:lower16:.LC69
	movt	r0, #:upper16:.LC69
	b	printk
.L1138:
	bx	lr
	.fnend
	.size	ccid_notify_complete, .-ccid_notify_complete
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_release, %function
mbim_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC70
	push	{r4, lr}
	.save {r4, lr}
	ldr	r1, .L1151
	movt	r0, #:upper16:.LC70
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2504]
	add	r2, r3, #92
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #0
	pop	{r4, pc}
.L1152:
	.align	2
.L1151:
	.word	.LANCHOR3+300
	.fnend
	.size	mbim_release, .-mbim_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_open, %function
mbim_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC71
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	movt	r0, #:upper16:.LC71
	mov	r5, r1
	ldr	r1, .L1160
	bl	printk
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r3, [r2, #2504]
	cmp	r3, #0
	bne	.L1154
	movw	r0, #:lower16:.LC72
	ldr	r1, .L1160
	movt	r0, #:upper16:.LC72
	bl	printk
	mvn	r0, #18
	pop	{r4, r5, r6, pc}
.L1154:
	mov	r4, r2
	add	r2, r3, #92
	.syntax divided
@ 61 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #1
	bne	.L1156
	movw	r0, #:lower16:.LC73
	ldr	r1, .L1160
	movt	r0, #:upper16:.LC73
	bl	printk
	ldr	r3, [r4, #2504]
	ldr	r3, [r3, #88]
	cmp	r3, #0
	bne	.L1158
	movw	r0, #:lower16:.LC74
	ldr	r1, .L1160
	movt	r0, #:upper16:.LC74
	bl	printk
	b	.L1158
.L1156:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC65
	ldr	r1, .L1160
	movt	r0, #:upper16:.LC65
	bl	printk
	mvn	r0, #15
	pop	{r4, r5, r6, pc}
.L1158:
	ldr	r3, [r4, #2504]
	mov	r4, #0
	movw	r0, #:lower16:.LC75
	ldr	r1, .L1160
	movt	r0, #:upper16:.LC75
	str	r3, [r5, #124]
	str	r4, [r3, #232]
	bl	printk
	mov	r0, r4
	pop	{r4, r5, r6, pc}
.L1161:
	.align	2
.L1160:
	.word	.LANCHOR3+316
	.fnend
	.size	mbim_open, .-mbim_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_open_work, %function
gsdio_open_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r3, r0
	str	lr, [sp, #-4]!
	.save {lr}
	ldr	ip, [r3, #-4]
	.pad #12
	sub	sp, sp, #12
	sub	r2, r3, #124
	ldr	r1, .L1164
	movw	r0, #:lower16:.LC76
	ldr	r3, [r3, #-124]
	movt	r0, #:upper16:.LC76
	ldr	ip, [ip]
	str	ip, [sp]
	bl	printk
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L1165:
	.align	2
.L1164:
	.word	.LANCHOR3+328
	.fnend
	.size	gsdio_open_work, .-gsdio_open_work
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	remote_wakeup_show, %function
remote_wakeup_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #508]
	cmp	r3, #0
	moveq	r0, r3
	beq	.L1166
	ldr	r3, [r0, #500]
	movw	r2, #:lower16:.LC77
	mov	r1, #4096
	movt	r2, #:upper16:.LC77
	mov	r0, r4
	ldrb	r3, [r3, #-98]	@ zero_extendqisi2
	ubfx	r3, r3, #5, #1
	bl	snprintf
	mov	r0, #2
.L1166:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	remote_wakeup_show, .-remote_wakeup_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	state_show, %function
state_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	ldr	r4, [r0, #8]
	cmp	r4, #0
	beq	.L1173
	add	r6, r4, #60
	mov	r5, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r1, r0
	cmp	r3, #0
	movwne	r4, #:lower16:.LC78
	movtne	r4, #:upper16:.LC78
	beq	.L1177
.L1172:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L1171:
	movw	r0, #:lower16:.LC81
	mov	r2, r4
	ldr	r1, .L1178
	movt	r0, #:upper16:.LC81
	bl	printk
	movw	r2, #:lower16:.LC21
	mov	r3, r4
	ldrd	r4, [sp]
	mov	r0, r7
	movt	r2, #:upper16:.LC21
	ldrd	r6, [sp, #8]
	mov	r1, #4096
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	snprintf
.L1177:
	ldrb	r2, [r5, #48]	@ zero_extendqisi2
	movw	r3, #:lower16:.LC80
	movw	r4, #:lower16:.LC79
	movt	r3, #:upper16:.LC80
	movt	r4, #:upper16:.LC79
	cmp	r2, #0
	movne	r4, r3
	b	.L1172
.L1173:
	movw	r4, #:lower16:.LC79
	movt	r4, #:upper16:.LC79
	b	.L1171
.L1179:
	.align	2
.L1178:
	.word	.LANCHOR3+344
	.fnend
	.size	state_show, .-state_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	pm_qos_show, %function
pm_qos_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	movw	r2, #:lower16:.LC21
	add	r3, r0, #52
	ldr	lr, [sp, #4]
	mov	r0, r4
	movt	r2, #:upper16:.LC21
	ldr	r4, [sp]
	mov	r1, #4096
	add	sp, sp, #8
	b	snprintf
	.fnend
	.size	pm_qos_show, .-pm_qos_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	enable_show, %function
enable_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	mov	r4, r0
	movw	r0, #:lower16:.LC82
	ldr	r1, .L1184
	ldrb	r2, [r4, #16]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC82
	bl	printk
	movw	r2, #:lower16:.LC77
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	mov	r0, r5
	movt	r2, #:upper16:.LC77
	mov	r1, #4096
	bl	snprintf
	ldrd	r4, [sp]
	mov	r0, #2
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1185:
	.align	2
.L1184:
	.word	.LANCHOR3+356
	.fnend
	.size	enable_show, .-enable_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iSerial_show, %function
iSerial_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC83
	ldr	r3, .L1187
	movt	r2, #:upper16:.LC83
	mov	r1, #4096
	b	snprintf
.L1188:
	.align	2
.L1187:
	.word	.LANCHOR1+2220
	.fnend
	.size	iSerial_show, .-iSerial_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iProduct_show, %function
iProduct_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC83
	ldr	r3, .L1190
	movt	r2, #:upper16:.LC83
	mov	r1, #4096
	b	snprintf
.L1191:
	.align	2
.L1190:
	.word	.LANCHOR1+2508
	.fnend
	.size	iProduct_show, .-iProduct_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iManufacturer_show, %function
iManufacturer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC83
	ldr	r3, .L1193
	movt	r2, #:upper16:.LC83
	mov	r1, #4096
	b	snprintf
.L1194:
	.align	2
.L1193:
	.word	.LANCHOR1+2764
	.fnend
	.size	iManufacturer_show, .-iManufacturer_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceProtocol_show, %function
bDeviceProtocol_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC77
	ldrb	r3, [r3, #142]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC77
	mov	r1, #4096
	b	snprintf
	.fnend
	.size	bDeviceProtocol_show, .-bDeviceProtocol_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceSubClass_show, %function
bDeviceSubClass_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC77
	ldrb	r3, [r3, #141]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC77
	mov	r1, #4096
	b	snprintf
	.fnend
	.size	bDeviceSubClass_show, .-bDeviceSubClass_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceClass_show, %function
bDeviceClass_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC77
	ldrb	r3, [r3, #140]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC77
	mov	r1, #4096
	b	snprintf
	.fnend
	.size	bDeviceClass_show, .-bDeviceClass_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bcdDevice_show, %function
bcdDevice_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC84
	str	lr, [sp, #4]
	movt	r2, #:upper16:.LC84
	mov	r1, #4096
	ldrh	r3, [r3, #148]
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
	.fnend
	.size	bcdDevice_show, .-bcdDevice_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	idProduct_show, %function
idProduct_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC84
	str	lr, [sp, #4]
	movt	r2, #:upper16:.LC84
	mov	r1, #4096
	ldrh	r3, [r3, #146]
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
	.fnend
	.size	idProduct_show, .-idProduct_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	idVendor_show, %function
idVendor_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r2
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR0
	movw	r2, #:lower16:.LC84
	str	lr, [sp, #4]
	movt	r2, #:upper16:.LC84
	mov	r1, #4096
	ldrh	r3, [r3, #144]
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
	.fnend
	.size	idVendor_show, .-idVendor_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_pcm_show, %function
audio_source_pcm_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	ldr	ip, [r0, #4]
	movw	r2, #:lower16:.LC85
	mov	r1, #4096
	movt	r2, #:upper16:.LC85
	mov	r0, r4
	ldm	ip, {r3, ip}
	str	ip, [sp]
	bl	snprintf
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	audio_source_pcm_show, .-audio_source_pcm_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_inquiry_show, %function
mass_storage_inquiry_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC21
	mov	r0, r4
	movt	r2, #:upper16:.LC21
	mov	r1, #4096
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r3, #96]
	add	r3, r3, #180
	b	snprintf
	.fnend
	.size	mass_storage_inquiry_show, .-mass_storage_inquiry_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_ethaddr_show, %function
ecm_ethaddr_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #24
	sub	sp, sp, #24
	bl	dev_get_drvdata
	ldr	ip, [r0, #4]
	movw	r2, #:lower16:.LC86
	mov	r1, #4096
	movt	r2, #:upper16:.LC86
	mov	r0, r4
	ldrb	lr, [ip, #5]	@ zero_extendqisi2
	ldrb	r3, [ip]	@ zero_extendqisi2
	str	lr, [sp, #16]
	ldrb	lr, [ip, #4]	@ zero_extendqisi2
	str	lr, [sp, #12]
	ldrb	lr, [ip, #3]	@ zero_extendqisi2
	str	lr, [sp, #8]
	ldrb	lr, [ip, #2]	@ zero_extendqisi2
	str	lr, [sp, #4]
	ldrb	ip, [ip, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	snprintf
	mov	r0, #18
	add	sp, sp, #24
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_ethaddr_show, .-ecm_ethaddr_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_transports_show, %function
ecm_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC21
	ldr	r3, .L1211
	movt	r2, #:upper16:.LC21
	mov	r1, #4096
	b	snprintf
.L1212:
	.align	2
.L1211:
	.word	.LANCHOR1+3020
	.fnend
	.size	ecm_transports_show, .-ecm_transports_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_max_pkt_per_xfer_show, %function
rndis_max_pkt_per_xfer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC77
	mov	r0, r4
	movt	r2, #:upper16:.LC77
	mov	r1, #4096
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldrb	r3, [r3, #12]	@ zero_extendqisi2
	b	snprintf
	.fnend
	.size	rndis_max_pkt_per_xfer_show, .-rndis_max_pkt_per_xfer_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_vendorID_show, %function
rndis_vendorID_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC84
	mov	r0, r4
	movt	r2, #:upper16:.LC84
	mov	r1, #4096
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r3, #8]
	b	snprintf
	.fnend
	.size	rndis_vendorID_show, .-rndis_vendorID_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_ethaddr_show, %function
rndis_ethaddr_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #24
	sub	sp, sp, #24
	bl	dev_get_drvdata
	ldr	ip, [r0, #4]
	movw	r2, #:lower16:.LC86
	mov	r1, #4096
	movt	r2, #:upper16:.LC86
	mov	r0, r4
	ldrb	lr, [ip, #5]	@ zero_extendqisi2
	ldrb	r3, [ip]	@ zero_extendqisi2
	str	lr, [sp, #16]
	ldrb	lr, [ip, #4]	@ zero_extendqisi2
	str	lr, [sp, #12]
	ldrb	lr, [ip, #3]	@ zero_extendqisi2
	str	lr, [sp, #8]
	ldrb	lr, [ip, #2]	@ zero_extendqisi2
	str	lr, [sp, #4]
	ldrb	ip, [ip, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	snprintf
	mov	r0, #18
	add	sp, sp, #24
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_ethaddr_show, .-rndis_ethaddr_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_wceis_show, %function
rndis_wceis_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC77
	mov	r0, r4
	movt	r2, #:upper16:.LC77
	mov	r1, #4096
	ldrb	r3, [r3, #269]	@ zero_extendqisi2
	bl	snprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_wceis_show, .-rndis_wceis_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_manufacturer_show, %function
rndis_manufacturer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LC21
	mov	r0, r4
	movt	r2, #:upper16:.LC21
	mov	r1, #4096
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	add	r3, r3, #13
	b	snprintf
	.fnend
	.size	rndis_manufacturer_show, .-rndis_manufacturer_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_xport_names_show, %function
rmnet_xport_names_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC21
	ldr	r3, .L1224
	movt	r2, #:upper16:.LC21
	mov	r1, #4096
	b	snprintf
.L1225:
	.align	2
.L1224:
	.word	.LANCHOR1+3072
	.fnend
	.size	rmnet_xport_names_show, .-rmnet_xport_names_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_transports_show, %function
rmnet_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC21
	ldr	r3, .L1227
	movt	r2, #:upper16:.LC21
	mov	r1, #4096
	b	snprintf
.L1228:
	.align	2
.L1227:
	.word	.LANCHOR1+3124
	.fnend
	.size	rmnet_transports_show, .-rmnet_transports_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_transports_show, %function
mbim_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r2
	movw	r2, #:lower16:.LC21
	ldr	r3, .L1230
	movt	r2, #:upper16:.LC21
	mov	r1, #4096
	b	snprintf
.L1231:
	.align	2
.L1230:
	.word	.LANCHOR1+3176
	.fnend
	.size	mbim_transports_show, .-mbim_transports_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	start_out_transfer, %function
start_out_transfer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #8]
	cmp	r4, #0
	beq	.L1233
	ldr	r0, [r4, #88]
	mov	r5, r1
	ldr	r7, [r1, #24]
	ldr	r6, [r4, #104]
	add	r0, r0, #44
	bl	_raw_spin_lock_irq
	mov	r3, #1
	mov	r2, #2
	str	r2, [r5, #4]
	str	r3, [r5, #28]
	ldr	r0, [r4, #88]
	add	r0, r0, #44
	bl	_raw_spin_unlock_irq
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	mov	r2, #208
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L1245
	mov	r2, #0
	cmn	r3, #108
	str	r2, [r5, #4]
	str	r2, [r5, #28]
	beq	.L1245
	cmn	r3, #95
	bne	.L1237
	ldr	r2, [r7, #4]
	cmp	r2, #0
	bne	.L1237
.L1245:
	mov	r0, #1
.L1235:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1237:
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC89
	movt	r1, #:upper16:.LC89
	ldr	r2, [r6, #4]
	add	r0, r0, #32
	bl	dev_warn
	b	.L1245
.L1233:
	ldr	r0, [r0]
	movw	r1, #:lower16:.LC87
	movw	r3, #805
	movt	r1, #:upper16:.LC87
	ldr	r2, .L1246
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC88
	movw	r1, #550
	movt	r0, #:upper16:.LC88
	bl	warn_slowpath_null
	mov	r0, r4
	b	.L1235
.L1247:
	.align	2
.L1246:
	.word	.LANCHOR3+368
	.fnend
	.size	start_out_transfer, .-start_out_transfer
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	override_id, %function
override_id:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	mov	r4, r1
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L1249
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bls	.L1250
	ldr	r0, [r0]
	movw	r1, #:lower16:.LC90
	movt	r1, #:upper16:.LC90
	add	r0, r0, #32
	bl	dev_warn
	b	.L1249
.L1250:
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r0, #48]
	strb	r3, [r1]
.L1249:
	ldrb	r0, [r4]	@ zero_extendqisi2
	pop	{r4, pc}
	.fnend
	.size	override_id, .-override_id
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_response_complete, %function
rmnet_sdio_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	cmn	r3, #104
	bxeq	lr
	cmp	r3, #0
	bxeq	lr
	cmn	r3, #108
	bxeq	lr
	mov	r2, r1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC91
	str	lr, [sp, #4]
	ldr	ip, [r2, #4]
	.pad #8
	sub	sp, sp, #8
	ldr	r4, [r2, #32]
	movt	r1, #:upper16:.LC91
	ldr	lr, [r2, #48]
	ldr	r2, [r0, #4]
	ldr	r0, [r4, #84]
	ldr	r0, [r0]
	str	lr, [sp]
	str	ip, [sp, #4]
	add	r0, r0, #32
	bl	_dev_info
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_sdio_response_complete, .-rmnet_sdio_response_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_response_complete, %function
rmnet_mux_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	cmn	r3, #104
	bxeq	lr
	cmp	r3, #0
	bxeq	lr
	cmn	r3, #108
	bxeq	lr
	mov	r2, r1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC92
	str	lr, [sp, #4]
	ldr	ip, [r2, #4]
	.pad #8
	sub	sp, sp, #8
	ldr	r4, [r2, #32]
	movt	r1, #:upper16:.LC92
	ldr	lr, [r2, #48]
	ldr	r2, [r0, #4]
	ldr	r0, [r4, #84]
	ldr	r0, [r0]
	str	lr, [sp]
	str	ip, [sp, #4]
	add	r0, r0, #32
	bl	_dev_info
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_mux_response_complete, .-rmnet_mux_response_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_show_suspended, %function
composite_show_suspended:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldrb	r2, [r0, #16]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC77
	mov	r0, r4
	movt	r1, #:upper16:.LC77
	and	r2, r2, #1
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	composite_show_suspended, .-composite_show_suspended
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb30en_show, %function
usb30en_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movw	r1, #:lower16:.LC93
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, r2
	movt	r1, #:upper16:.LC93
	ldrb	r2, [r3, #3226]	@ zero_extendqisi2
	b	sprintf
	.fnend
	.size	usb30en_show, .-usb30en_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_show_ro, %function
fsg_show_ro:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r3, r0
	mov	r0, r2
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r2, [r3, #-48]
	movw	r1, #:lower16:.LC77
	movt	r1, #:upper16:.LC77
	cmp	r2, #0
	ldrb	r2, [r3, #-24]	@ zero_extendqisi2
	ubfxne	r2, r2, #1, #1
	andeq	r2, r2, #1
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	fsg_show_ro, .-fsg_show_ro
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_show_nofua, %function
fsg_show_nofua:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC94
	str	lr, [sp, #4]
	ldrb	r3, [r0, #-24]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC94
	mov	r0, r2
	lsr	r2, r3, #7
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	fsg_show_nofua, .-fsg_show_nofua
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_show_cdrom, %function
fsg_show_cdrom:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #:lower16:.LC77
	str	lr, [sp, #4]
	ldrb	r3, [r0, #-24]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC77
	mov	r0, r2
	ubfx	r2, r3, #3, #1
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #2
	ldr	pc, [sp], #4
	.fnend
	.size	fsg_show_cdrom, .-fsg_show_cdrom
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	check_command, %function
check_command:
	.fnstart
	@ args = 8, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	mov	ip, #0
	strd	r6, [sp, #8]
	movw	r7, #:lower16:__stack_chk_guard
	mov	r6, r3
	strd	r8, [sp, #16]
	movt	r7, #:upper16:__stack_chk_guard
	mov	r9, r2
	str	r10, [sp, #24]
	ldr	r2, [r7]
	mov	r5, r1
	str	lr, [sp, #28]
	ldrb	r8, [r0, #77]	@ zero_extendqisi2
	.pad #32
	sub	sp, sp, #32
	ldr	r0, [r0, #120]
	strb	ip, [sp, #8]
	ldr	r10, [sp, #68]
	str	r2, [sp, #28]
	ldr	r3, [r4, #124]
	lsr	r8, r8, #5
	cmp	r0, ip
	bne	.L1345
.L1294:
	ldr	r2, [r4, #128]
	cmp	r2, #0
	beq	.L1295
	cmp	r2, r3
	bls	.L1296
	ldrb	r2, [r4, #144]	@ zero_extendqisi2
	cmp	r9, r0
	str	r3, [r4, #128]
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	orr	r2, r2, #4
	strb	r2, [r4, #144]
	beq	.L1297
	cmp	r3, #0
	bne	.L1300
.L1297:
	ldr	ip, [r4, #72]
	cmp	ip, r5
	beq	.L1299
	blt	.L1300
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1146
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L1346
.L1301:
	mov	r5, ip
.L1299:
	ldr	r3, [r4, #96]
	cmp	r3, r8
	beq	.L1302
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #1170
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	bne	.L1347
.L1302:
	ldr	ip, [r4, #104]
	ldrb	r3, [r4, #76]	@ zero_extendqisi2
	cmp	ip, #0
	beq	.L1303
	cmp	r3, #3
	beq	.L1304
	ldrb	r2, [ip, #24]	@ zero_extendqisi2
	mov	r3, #0
	ldr	r1, [ip, #36]
	str	r3, [ip, #28]
	str	r3, [ip, #32]
	bfi	r2, r3, #6, #1
	cmp	r1, r3
	strb	r2, [ip, #24]
	beq	.L1304
	ldrb	r2, [r4, #76]	@ zero_extendqisi2
	cmp	r2, #18
	cmpne	r2, #3
	mvnne	r0, #21
	strne	r1, [ip, #28]
	strne	r3, [ip, #36]
	bne	.L1293
.L1304:
	ldrb	r3, [r4, #77]	@ zero_extendqisi2
	cmp	r5, #1
	and	r3, r3, #31
	strb	r3, [r4, #77]
	ble	.L1311
.L1313:
	mov	r3, #1
	add	r2, r4, #76
	mov	r0, r3
.L1310:
	ldrb	r1, [r2, #1]!	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L1308
	ands	r1, r6, r0, lsl r3
	beq	.L1348
.L1308:
	add	r3, r3, #1
	cmp	r5, r3
	bgt	.L1310
	cmp	ip, #0
	beq	.L1312
.L1311:
	ldr	r3, [ip]
	ldr	r2, [sp, #64]
	cmp	r3, #0
	movne	r3, #0
	andeq	r3, r2, #1
	cmp	r3, #0
	movne	r3, #14848
	mvnne	r0, #21
	movtne	r3, 2
	strne	r3, [ip, #28]
	bne	.L1293
.L1312:
	mov	r0, #0
.L1293:
	ldr	r2, [sp, #28]
	ldr	r3, [r7]
	cmp	r2, r3
	bne	.L1349
	add	sp, sp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1295:
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	b	.L1297
.L1345:
	movw	r2, #:lower16:.LANCHOR3
	movw	r1, #:lower16:.LC95
	movt	r2, #:upper16:.LANCHOR3
	movt	r1, #:upper16:.LC95
	add	r0, r2, r0
	ldrb	r2, [r0, #388]	@ zero_extendqisi2
	add	r0, sp, #8
	bl	sprintf
	ldr	r0, [r4, #120]
	ldr	r3, [r4, #124]
	b	.L1294
.L1348:
	cmp	ip, #0
	beq	.L1344
	mov	r3, #9216
	mvn	r0, #21
	movt	r3, 5
	str	r3, [ip, #28]
	b	.L1293
.L1303:
	ldrb	r2, [r4, #144]	@ zero_extendqisi2
	cmp	r3, #18
	cmpne	r3, #3
	bfi	r2, ip, #4, #1
	strb	r2, [r4, #144]
	bne	.L1350
	ldrb	r3, [r4, #77]	@ zero_extendqisi2
	cmp	r5, #1
	and	r3, r3, #31
	strb	r3, [r4, #77]
	bgt	.L1313
	b	.L1312
.L1350:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1194
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	beq	.L1344
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC98
	movt	r2, #:upper16:.LC98
	ldr	r0, .L1351
	ldr	r3, [r4, #96]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L1344:
	mvn	r0, #21
	b	.L1293
.L1346:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC96
	mov	r3, r10
	movt	r2, #:upper16:.LC96
	ldr	r0, .L1351+4
	stm	sp, {r5, ip}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	ip, [r4, #72]
	b	.L1301
.L1347:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC97
	add	r0, r0, #1152
	movt	r2, #:upper16:.LC97
	str	r8, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L1302
.L1296:
	cmp	r9, r0
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	beq	.L1297
.L1300:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	mvn	r0, #21
	orr	r3, r3, #4
	strb	r3, [r4, #144]
	b	.L1293
.L1349:
	bl	__stack_chk_fail
.L1352:
	.align	2
.L1351:
	.word	.LANCHOR2+1176
	.word	.LANCHOR2+1128
	.fnend
	.size	check_command, .-check_command
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	sua_version_info_show, %function
sua_version_info_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r1, #:lower16:.LC99
	mov	r0, r4
	movt	r1, #:upper16:.LC99
	ldr	r2, [r3, #96]
	add	r2, r2, #235
	bl	sprintf
	mov	r5, r0
	movw	r0, #:lower16:.LC100
	ldr	r1, .L1355
	mov	r2, r4
	movt	r0, #:upper16:.LC100
	bl	printk
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1356:
	.align	2
.L1355:
	.word	.LANCHOR3+392
	.fnend
	.size	sua_version_info_show, .-sua_version_info_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_product_show, %function
mass_storage_product_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r1, #:lower16:.LC21
	mov	r0, r4
	movt	r1, #:upper16:.LC21
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r2, [r3, #96]
	add	r2, r2, #218
	b	sprintf
	.fnend
	.size	mass_storage_product_show, .-mass_storage_product_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_vendor_show, %function
mass_storage_vendor_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r1, #:lower16:.LC21
	mov	r0, r4
	movt	r1, #:upper16:.LC21
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r2, [r3, #96]
	add	r2, r2, #209
	b	sprintf
	.fnend
	.size	mass_storage_vendor_show, .-mass_storage_vendor_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_instances_show, %function
acm_instances_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r1, #:lower16:.LC77
	mov	r0, r4
	movt	r1, #:upper16:.LC77
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r2, [r3]
	b	sprintf
	.fnend
	.size	acm_instances_show, .-acm_instances_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_alsa_show, %function
midi_alsa_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #4]
	movw	r1, #:lower16:.LC85
	mov	r0, r4
	movt	r1, #:upper16:.LC85
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldrd	r2, [r3]
	b	sprintf
	.fnend
	.size	midi_alsa_show, .-midi_alsa_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	count_configs, %function
count_configs:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bhi	.L1366
	mov	r5, r0
	ldr	r4, [r5, #36]!
	cmp	r5, r4
	sub	r4, r4, #28
	beq	.L1382
.L1367:
	mov	r3, #0
.L1373:
	ldrb	r2, [r4, #45]	@ zero_extendqisi2
	mov	r0, r4
	add	r1, r3, #1
	tst	r2, #4
	beq	.L1374
	bl	count_multi_config
	ldr	r4, [r4, #28]
	mov	r3, r0
	cmp	r5, r4
	sub	r4, r4, #28
	bne	.L1373
.L1376:
	mov	r0, r3
.L1365:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1366:
	ldr	r3, [r3, #16]
	cmp	r3, #3
	beq	.L1381
	sub	r3, r3, #5
	mov	ip, #1
	clz	r3, r3
	mov	r2, #0
	lsr	r3, r3, #5
.L1369:
	mov	r5, r0
	ldr	r4, [r5, #36]!
	cmp	r1, #6
	moveq	r2, ip
	cmp	r5, r4
	sub	r4, r4, #28
	beq	.L1382
	cmp	r3, #0
	movne	r3, #0
	beq	.L1386
.L1371:
	ldrb	r2, [r4, #45]	@ zero_extendqisi2
	mov	r0, r4
	add	r1, r3, #1
	tst	r2, #1
	beq	.L1379
	bl	count_multi_config
	ldr	r4, [r4, #28]
	mov	r3, r0
	cmp	r5, r4
	sub	r4, r4, #28
	bne	.L1371
	b	.L1376
.L1379:
	ldr	r4, [r4, #28]
	cmp	r5, r4
	sub	r4, r4, #28
	bne	.L1371
	b	.L1376
.L1374:
	ldr	r4, [r4, #28]
	cmp	r5, r4
	sub	r4, r4, #28
	bne	.L1373
	b	.L1376
.L1386:
	cmp	r2, #0
	beq	.L1367
.L1372:
	ldrb	r2, [r4, #45]	@ zero_extendqisi2
	mov	r0, r4
	add	r1, r3, #1
	tst	r2, #2
	beq	.L1377
	bl	count_multi_config
	ldr	r4, [r4, #28]
	mov	r3, r0
	cmp	r5, r4
	sub	r4, r4, #28
	bne	.L1372
	b	.L1376
.L1377:
	ldr	r4, [r4, #28]
	cmp	r5, r4
	sub	r4, r4, #28
	bne	.L1372
	b	.L1376
.L1381:
	mov	ip, #0
	mov	r2, #1
	mov	r3, ip
	b	.L1369
.L1382:
	mov	r0, #0
	b	.L1365
	.fnend
	.size	count_configs, .-count_configs
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_qc_stop, %function
eth_qc_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r0, #576]
	ldr	r6, [r0, #1156]
	cmp	r1, #0
	beq	.L1399
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
.L1390:
	add	r5, r4, #1152
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1156]
	mov	r7, r0
	cmp	r3, #0
	beq	.L1389
	ldr	r3, [r6, #116]
	cmp	r3, #0
	beq	.L1389
	mov	r0, r6
	blx	r3
.L1389:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1399:
	movw	r0, #:lower16:.LC101
	movw	r1, #1847
	movt	r0, #:upper16:.LC101
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC102
	movt	r0, #:upper16:.LC102
	bl	printk
	b	.L1390
	.fnend
	.size	eth_qc_stop, .-eth_qc_stop
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_ctrl_read_complete, %function
qdss_ctrl_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1218
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r5, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, r2]
	ldr	r4, [r0]
	ldr	r6, [r1, #32]
	tst	r2, #4
	bne	.L1407
.L1401:
	ldr	r3, [r5, #48]
	add	r7, r4, #188
	mov	r0, r7
	str	r3, [r6, #8]
	ldr	r3, [r5, #44]
	str	r3, [r6, #12]
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	add	r2, r4, #140
	ldr	r1, [r4, #144]
	add	r0, r5, #36
	bl	__list_add
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	lr, [r4, #124]
	cmp	lr, #0
	beq	.L1400
	mov	r2, r6
	mov	ip, lr
	ldrd	r6, [sp, #8]
	mov	r3, #0
	mov	r1, #2
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	ldr	r0, [r4, #128]
	ldrd	r4, [sp]
	add	sp, sp, #24
	bx	ip	@ indirect register sibling call
.L1400:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1407:
	movw	r1, #:lower16:.LC103
	add	r0, r3, #1200
	movt	r1, #:upper16:.LC103
	bl	__dynamic_pr_debug
	b	.L1401
	.fnend
	.size	qdss_ctrl_read_complete, .-qdss_ctrl_read_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_ctrl_write_complete, %function
qdss_ctrl_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1242
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r4, r1
	str	r8, [sp, #16]
	mov	r7, r0
	str	lr, [sp, #20]
	ldrh	r3, [r3, r2]
	ldr	r5, [r0]
	ldr	r6, [r1, #32]
	tst	r3, #4
	bne	.L1420
.L1409:
	ldr	r3, [r4, #44]
	cmp	r3, #0
	bne	.L1410
	ldrh	r3, [r7, #20]
	ldr	r2, [r4, #4]
	cmp	r2, r3
	bcc	.L1410
	udiv	r1, r2, r3
	mls	r3, r3, r1, r2
	cmp	r3, #0
	beq	.L1421
.L1410:
	add	r7, r5, #188
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	add	r2, r5, #148
	ldr	r1, [r5, #152]
	add	r0, r4, #36
	bl	__list_add
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L1422
.L1411:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	lr, [r5, #124]
	cmp	lr, #0
	beq	.L1408
	mov	r2, r6
	mov	ip, lr
	ldrd	r6, [sp, #8]
	mov	r3, #0
	mov	r1, #4
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	ldr	r0, [r5, #128]
	ldrd	r4, [sp]
	add	sp, sp, #24
	bx	ip	@ indirect register sibling call
.L1422:
	ldr	r3, [r4, #48]
	str	r3, [r6, #8]
	ldr	r3, [r4, #44]
	str	r3, [r6, #12]
	b	.L1411
.L1408:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1421:
	ldr	r0, [r4, #48]
	str	r3, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	str	r0, [r6, #8]
	ldr	r3, [r4, #44]
	str	r3, [r6, #12]
	ldr	r0, [r5, #104]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	r3, [r0, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #16]
	bx	r3
.L1420:
	movw	r1, #:lower16:.LC104
	ldr	r0, .L1423
	movt	r1, #:upper16:.LC104
	bl	__dynamic_pr_debug
	b	.L1409
.L1424:
	.align	2
.L1423:
	.word	.LANCHOR2+1224
	.fnend
	.size	qdss_ctrl_write_complete, .-qdss_ctrl_write_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_start_rx, %function
gsmd_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	subs	r5, r0, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	beq	.L1440
	add	r6, r5, #4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #68]
	mov	r7, r0
	cmp	r3, #0
	beq	.L1441
	add	r9, r5, #12
	mov	r10, #2048
	ldr	r8, [r3, #92]
	b	.L1429
.L1443:
	ldr	r4, [r5, #12]
	cmp	r9, r4
	mov	r0, r4
	sub	fp, r4, #36
	beq	.L1428
	bl	list_del
	mov	r1, r7
	mov	r0, r6
	str	r10, [r4, #-32]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r8, #8]
	mov	r1, fp
	mov	r2, #208
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	fp, #0
	mov	r7, r0
	bne	.L1442
.L1429:
	ldr	r3, [r5, #72]
	ldr	r3, [r3, #8]
	tst	r3, #1
	bne	.L1443
.L1428:
	mov	r1, r7
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L1441:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #1266
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	beq	.L1428
	movw	r1, #:lower16:.LC106
	ldr	r2, .L1444
	add	r0, r0, #1248
	movt	r1, #:upper16:.LC106
	bl	__dynamic_pr_debug
	b	.L1428
.L1440:
	ldr	r1, .L1444
	movw	r0, #:lower16:.LC105
	movt	r0, #:upper16:.LC105
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L1442:
	movw	r0, #:lower16:.LC107
	mov	r2, r5
	ldr	r1, .L1444
	movt	r0, #:upper16:.LC107
	ldr	r3, [r5]
	bl	printk
	mov	r2, r9
	mov	r0, r4
	ldr	r1, [r5, #16]
	bl	__list_add
	b	.L1428
.L1445:
	.align	2
.L1444:
	.word	.LANCHOR3+416
	.fnend
	.size	gsmd_start_rx, .-gsmd_start_rx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_stop, %function
gbam_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bne	.L1447
	add	r5, r0, #4
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L1468
	movw	r3, #:lower16:.LANCHOR2
	movw	r1, #1290
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r1]
	tst	r3, #4
	bne	.L1469
.L1449:
	ldr	r0, [r2, #88]
	ldr	r1, [r4, #112]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	subs	r2, r0, #0
	beq	.L1453
	movw	r0, #:lower16:.LC110
	ldr	r1, .L1472
	movt	r0, #:upper16:.LC110
	bl	printk
.L1453:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L1447:
	add	r5, r0, #8
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L1470
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #1314
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	bne	.L1471
.L1452:
	ldr	r0, [r3, #84]
	ldr	r1, [r4, #116]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	subs	r2, r0, #0
	beq	.L1453
	movw	r0, #:lower16:.LC110
	ldr	r1, .L1472+4
	movt	r0, #:upper16:.LC110
	bl	printk
	b	.L1453
.L1468:
	mov	r0, r5
	bl	_raw_spin_unlock
	ldr	r1, .L1472
	movw	r0, #:lower16:.LC108
.L1467:
	movt	r0, #:upper16:.LC108
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L1471:
	movw	r1, #:lower16:.LC109
	add	r0, r0, #1296
	ldr	r2, .L1472+4
	movt	r1, #:upper16:.LC109
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #12]
	b	.L1452
.L1469:
	movw	r1, #:lower16:.LC109
	ldr	r2, .L1472
	movt	r1, #:upper16:.LC109
	ldr	r0, .L1472+8
	bl	__dynamic_pr_debug
	ldr	r2, [r4, #12]
	b	.L1449
.L1470:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC108
	ldr	r1, .L1472+4
	b	.L1467
.L1473:
	.align	2
.L1472:
	.word	.LANCHOR3+432
	.word	.LANCHOR3+456
	.word	.LANCHOR2+1272
	.fnend
	.size	gbam_stop, .-gbam_stop
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_start_endless_rx, %function
gbam_start_endless_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #4
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L1485
	movw	r3, #:lower16:.LANCHOR2
	movw	r1, #1338
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r1]
	tst	r3, #4
	bne	.L1486
.L1476:
	ldr	r0, [r2, #88]
	mov	r2, #32
	ldr	r1, [r4, #112]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L1477
	movw	r0, #:lower16:.LC112
	ldr	r1, .L1487
	movt	r0, #:upper16:.LC112
	bl	printk
.L1477:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L1486:
	movw	r1, #:lower16:.LC111
	ldr	r2, .L1487
	movt	r1, #:upper16:.LC111
	ldr	r0, .L1487+4
	bl	__dynamic_pr_debug
	ldr	r2, [r4, #12]
	b	.L1476
.L1485:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC108
	ldr	r1, .L1487
	movt	r0, #:upper16:.LC108
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L1488:
	.align	2
.L1487:
	.word	.LANCHOR3+480
	.word	.LANCHOR2+1320
	.fnend
	.size	gbam_start_endless_rx, .-gbam_start_endless_rx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_start_endless_tx, %function
gbam_start_endless_tx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #8
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L1500
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #1362
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	bne	.L1501
.L1491:
	ldr	r0, [r3, #84]
	mov	r2, #32
	ldr	r1, [r4, #116]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L1492
	movw	r0, #:lower16:.LC112
	ldr	r1, .L1502
	movt	r0, #:upper16:.LC112
	bl	printk
.L1492:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L1501:
	movw	r1, #:lower16:.LC111
	add	r0, r0, #1344
	ldr	r2, .L1502
	movt	r1, #:upper16:.LC111
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #12]
	b	.L1491
.L1500:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC108
	ldr	r1, .L1502
	movt	r0, #:upper16:.LC108
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L1503:
	.align	2
.L1502:
	.word	.LANCHOR3+504
	.fnend
	.size	gbam_start_endless_tx, .-gbam_start_endless_tx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_wake_cb, %function
gbam_wake_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1386
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR2
	str	lr, [sp, #4]
	ldr	r4, [r0, #16]
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L1511
.L1505:
	ldr	r3, [r4, #128]
	ldr	r0, [r3]
	ldr	r3, [r0]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L1506
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	bx	r3
.L1511:
	movw	r1, #:lower16:.LC113
	ldr	r2, .L1512
	movt	r1, #:upper16:.LC113
	ldr	r0, .L1512+4
	bl	__dynamic_pr_debug
	b	.L1505
.L1506:
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #94
	ldr	pc, [sp], #4
.L1513:
	.align	2
.L1512:
	.word	.LANCHOR3+528
	.word	.LANCHOR2+1368
	.fnend
	.size	gbam_wake_cb, .-gbam_wake_cb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_endless_tx_complete, %function
gbam_endless_tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #1410
	movt	r0, #:upper16:.LANCHOR2
	mov	ip, r1
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L1516
	bx	lr
.L1516:
	movw	r1, #:lower16:.LC114
	add	r0, r0, #1392
	ldr	r2, .L1517
	movt	r1, #:upper16:.LC114
	ldr	r3, [ip, #44]
	b	__dynamic_pr_debug
.L1518:
	.align	2
.L1517:
	.word	.LANCHOR3+544
	.fnend
	.size	gbam_endless_tx_complete, .-gbam_endless_tx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_endless_rx_complete, %function
gbam_endless_rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1434
	movt	r3, #:upper16:.LANCHOR2
	mov	ip, r1
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L1521
	bx	lr
.L1521:
	movw	r1, #:lower16:.LC114
	ldr	r2, .L1522
	movt	r1, #:upper16:.LC114
	ldr	r0, .L1522+4
	ldr	r3, [ip, #44]
	b	__dynamic_pr_debug
.L1523:
	.align	2
.L1522:
	.word	.LANCHOR3+572
	.word	.LANCHOR2+1416
	.fnend
	.size	gbam_endless_rx_complete, .-gbam_endless_rx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_release, %function
rmnet_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #1458
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r0, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrh	r3, [r0, r3]
	ldr	r4, [r1, #124]
	tst	r3, #4
	bne	.L1530
.L1525:
	add	r6, r4, #52
	mov	r5, #0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r6
	strb	r5, [r4, #4]
	bl	_raw_spin_unlock_irqrestore
	add	r3, r4, #16
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1530:
	movw	r1, #:lower16:.LC115
	add	r0, r0, #1440
	movt	r1, #:upper16:.LC115
	bl	__dynamic_pr_debug
	b	.L1525
	.fnend
	.size	rmnet_ctrl_release, .-rmnet_ctrl_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_open, %function
rmnet_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #1482
	movt	r5, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r7, r1
	ldrh	r3, [r5, r3]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	tst	r3, #4
	bne	.L1540
.L1532:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #3228]
	add	r2, r3, #16
	.syntax divided
@ 61 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r6, [r2]
	add	r6, r6, #1
	strex	r1, r6, [r2]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r6, #1
	bne	.L1533
	ldr	r3, [r4, #3228]
	add	r0, r3, #52
	str	r3, [r7, #124]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #3228]
	mov	r1, r0
	add	r0, r3, #52
	strb	r6, [r3, #4]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
.L1531:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1540:
	movw	r1, #:lower16:.LC116
	ldr	r0, .L1541
	movt	r1, #:upper16:.LC116
	bl	__dynamic_pr_debug
	b	.L1532
.L1533:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r3, #1506
	ldrh	r3, [r5, r3]
	tst	r3, #4
	mvneq	r0, #15
	beq	.L1531
	movw	r1, #:lower16:.LC117
	ldr	r0, .L1541+4
	movt	r1, #:upper16:.LC117
	bl	__dynamic_pr_debug
	mvn	r0, #15
	b	.L1531
.L1542:
	.align	2
.L1541:
	.word	.LANCHOR2+1464
	.word	.LANCHOR2+1488
	.fnend
	.size	rmnet_ctrl_open, .-rmnet_ctrl_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_send_cpkt_tomodem, %function
ghsic_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	ip, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r3, #1016]
	cmp	r0, r1
	bcs	.L1554
	mov	r6, r2
	mov	r2, #104
	mla	r3, r2, r0, r3
	ldr	r5, [r3, #1020]
	cmp	r5, #0
	beq	.L1555
	mov	r1, #32
	mov	r0, r6
	bl	__kmalloc
	subs	r7, r0, #0
	beq	.L1549
	mov	r1, r4
	mov	r2, r6
	bl	memcpy
	ldr	r0, [r5, #84]
	ands	r4, r0, #1
	beq	.L1556
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1530
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L1557
.L1548:
	ldr	r3, [r5, #96]
	mov	r4, #0
	add	r3, r3, #1
	str	r3, [r5, #96]
.L1543:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1556:
	ldr	r3, [r5, #104]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r5, #104]
	bl	kfree
	b	.L1543
.L1557:
	movw	r1, #:lower16:.LC119
	mov	r3, r6
	ldr	r2, .L1558
	movt	r1, #:upper16:.LC119
	ldr	r0, .L1558+4
	bl	__dynamic_pr_debug
	b	.L1548
.L1549:
	mvn	r4, #11
	b	.L1543
.L1554:
	movw	r0, #:lower16:.LC118
	mov	r2, ip
	ldr	r1, .L1558
	movt	r0, #:upper16:.LC118
	mvn	r4, #18
	bl	printk
	b	.L1543
.L1555:
	movw	r0, #:lower16:.LC105
	ldr	r1, .L1558
	mvn	r4, #18
	movt	r0, #:upper16:.LC105
	bl	printk
	b	.L1543
.L1559:
	.align	2
.L1558:
	.word	.LANCHOR3+600
	.word	.LANCHOR2+1512
	.fnend
	.size	ghsic_send_cpkt_tomodem, .-ghsic_send_cpkt_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_status, %function
ghsic_ctrl_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR2
	movw	r3, #1554
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	ip, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	mov	r5, r0
	str	lr, [sp, #12]
	ldrh	r3, [ip, r3]
	mov	r4, r1
	.pad #24
	sub	sp, sp, #24
	tst	r3, #4
	bne	.L1587
.L1561:
	ldr	r0, [r5, #8]
	str	r4, [r5, #92]
	cmp	r0, #0
	beq	.L1560
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L1560
	mov	r1, r4
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	bx	r3
.L1560:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1587:
	tst	r1, #1
	movw	r1, #:lower16:.LC120
	ldr	r2, .L1588
	movne	r3, #43
	moveq	r3, #45
	tst	r4, #2
	movt	r1, #:upper16:.LC120
	movne	r6, #43
	moveq	r6, #45
	tst	r4, #4
	movne	r0, #43
	moveq	r0, #45
	str	r6, [sp]
	tst	r4, #8
	movne	lr, #43
	moveq	lr, #45
	tst	r4, #16
	movne	r6, #43
	moveq	r6, #45
	stmib	sp, {r0, lr}
	tst	r4, #32
	add	r0, ip, #1536
	movne	lr, #43
	moveq	lr, #45
	str	r6, [sp, #12]
	tst	r4, #64
	movne	ip, #43
	moveq	ip, #45
	str	lr, [sp, #16]
	str	ip, [sp, #20]
	bl	__dynamic_pr_debug
	b	.L1561
.L1589:
	.align	2
.L1588:
	.word	.LANCHOR3+624
	.fnend
	.size	ghsic_ctrl_status, .-ghsic_ctrl_status
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_send_cpkt_tomodem, %function
ghsuart_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	ip, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [ip, #1856]
	mov	lr, r0
	cmp	r0, r3
	bcs	.L1605
	mov	r3, #84
	mla	ip, r3, r0, ip
	ldr	r4, [ip, #1860]
	cmp	r4, #0
	beq	.L1606
	ldr	r0, [r4, #88]
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	beq	.L1607
	mov	r6, r1
	mov	r0, r2
	mov	r1, #32
	mov	r5, r2
	bl	__kmalloc
	subs	r7, r0, #0
	mvneq	r0, #11
	beq	.L1590
	mov	r2, r5
	mov	r1, r6
	bl	memcpy
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1578
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L1608
.L1595:
	ldr	r1, .L1609
	ldr	r0, .L1609+4
	bl	___ratelimit
	cmp	r0, #0
	beq	.L1596
	movw	r0, #:lower16:.LC121
	mvn	r2, #18
	ldr	r1, .L1609
	movt	r0, #:upper16:.LC121
	bl	printk
.L1596:
	ldr	r3, [r4, #104]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #104]
	bl	kfree
	mvn	r0, #18
.L1590:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1607:
	ldr	r3, [r4, #104]
	add	r3, r3, #1
	str	r3, [r4, #104]
	b	.L1590
.L1608:
	movw	r1, #:lower16:.LC119
	mov	r3, r5
	ldr	r2, .L1609
	movt	r1, #:upper16:.LC119
	ldr	r0, .L1609+8
	bl	__dynamic_pr_debug
	b	.L1595
.L1605:
	movw	r0, #:lower16:.LC118
	mov	r2, lr
	ldr	r1, .L1609
	movt	r0, #:upper16:.LC118
	bl	printk
	mvn	r0, #18
	b	.L1590
.L1606:
	movw	r0, #:lower16:.LC105
	ldr	r1, .L1609
	movt	r0, #:upper16:.LC105
	bl	printk
	mvn	r0, #18
	b	.L1590
.L1610:
	.align	2
.L1609:
	.word	.LANCHOR3+644
	.word	.LANCHOR0+156
	.word	.LANCHOR2+1560
	.fnend
	.size	ghsuart_send_cpkt_tomodem, .-ghsuart_send_cpkt_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_ep0out_complete, %function
mbim_ep0out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r3, #0
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	ldr	r5, [r1, #32]
	ldr	r2, [r1, #44]
	str	r3, [r1, #32]
	cmp	r2, r3
	bne	.L1612
	ldr	r0, [r1, #4]
	ldr	r3, [r1, #48]
	cmp	r3, r0
	bne	.L1612
	cmp	r3, #4
	beq	.L1628
	cmp	r3, #8
	bne	.L1618
	ldr	r3, [r1]
	ldr	r4, [r3]	@ unaligned
	cmp	r4, #2048
	bcc	.L1619
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	ldr	r2, [r2, #184]
	cmp	r2, r4
	bcc	.L1619
	ldrb	r2, [r3, #5]	@ zero_extendqisi2
	ldrb	r3, [r3, #4]	@ zero_extendqisi2
	orr	r3, r3, r2, lsl #8
	strh	r3, [r5, #228]	@ movhi
.L1617:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #1602
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L1629
.L1621:
	str	r4, [r5, #224]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1628:
	ldr	r3, [r1]
	ldr	r4, [r3]	@ unaligned
	cmp	r4, #2048
	bcc	.L1619
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #184]
	cmp	r3, r4
	bcs	.L1617
.L1619:
	movw	r0, #:lower16:.LC123
	mov	r2, r4
	ldr	r1, .L1630
	movt	r0, #:upper16:.LC123
	bl	printk
	b	.L1614
.L1629:
	movw	r1, #:lower16:.LC125
	ldr	r2, .L1630
	mov	r3, r4
	movt	r1, #:upper16:.LC125
	add	r0, r0, #1584
	bl	__dynamic_pr_debug
	b	.L1621
.L1618:
	movw	r0, #:lower16:.LC124
	ldr	r1, .L1630
	movt	r0, #:upper16:.LC124
	bl	printk
.L1614:
	ldr	r3, [r6, #8]
	mov	r0, r6
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
	ldr	r2, .L1630
	movw	r0, #:lower16:.LC126
	movt	r0, #:upper16:.LC126
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	mov	r1, r2
	b	printk
.L1612:
	movw	r0, #:lower16:.LC122
	ldr	r1, .L1630
	movt	r0, #:upper16:.LC122
	bl	printk
	b	.L1614
.L1631:
	.align	2
.L1630:
	.word	.LANCHOR3+672
	.fnend
	.size	mbim_ep0out_complete, .-mbim_ep0out_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_stop, %function
bam_data_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #4]
	bne	.L1633
	cmp	r3, #0
	beq	.L1632
	movw	r2, #:lower16:.LANCHOR2
	movw	r1, #1626
	movt	r2, #:upper16:.LANCHOR2
	ldrh	r2, [r2, r1]
	tst	r2, #4
	bne	.L1656
.L1636:
	ldr	r0, [r3, #12]
	ldr	r1, [r4, #36]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	subs	r3, r0, #0
	ldrne	r2, .L1658
	bne	.L1655
.L1632:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1633:
	cmp	r3, #0
	beq	.L1632
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #1650
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	bne	.L1657
.L1638:
	ldr	r0, [r3, #8]
	ldr	r1, [r4, #40]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	subs	r3, r0, #0
	beq	.L1632
	ldr	r2, .L1658+4
.L1655:
	movw	r0, #:lower16:.LC128
	mov	r1, r2
	ldr	r4, [sp]
	movt	r0, #:upper16:.LC128
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk
.L1656:
	ldr	r3, .L1658
	movw	r1, #:lower16:.LC127
	movt	r1, #:upper16:.LC127
	ldr	r0, .L1658+8
	mov	r2, r3
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #4]
	b	.L1636
.L1657:
	ldr	r3, .L1658+4
	movw	r1, #:lower16:.LC127
	add	r0, r0, #1632
	movt	r1, #:upper16:.LC127
	mov	r2, r3
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #4]
	b	.L1638
.L1659:
	.align	2
.L1658:
	.word	.LANCHOR3+696
	.word	.LANCHOR3+724
	.word	.LANCHOR2+1608
	.fnend
	.size	bam_data_stop, .-bam_data_stop
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_endless_tx_complete, %function
bam_data_endless_tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #1674
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bxeq	lr
	mov	r2, r1
	ldr	r3, .L1669
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	ip, [r2, #44]
	.pad #12
	sub	sp, sp, #12
	movw	r1, #:lower16:.LC129
	movt	r1, #:upper16:.LC129
	ldr	r0, .L1669+4
	mov	r2, r3
	str	ip, [sp]
	bl	__dynamic_pr_debug
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L1670:
	.align	2
.L1669:
	.word	.LANCHOR3+752
	.word	.LANCHOR2+1656
	.fnend
	.size	bam_data_endless_tx_complete, .-bam_data_endless_tx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_endless_rx_complete, %function
bam_data_endless_rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #1698
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bxeq	lr
	mov	r2, r1
	ldr	r3, .L1680
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	ip, [r2, #44]
	.pad #12
	sub	sp, sp, #12
	movw	r1, #:lower16:.LC129
	movt	r1, #:upper16:.LC129
	add	r0, r0, #1680
	mov	r2, r3
	str	ip, [sp]
	bl	__dynamic_pr_debug
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L1681:
	.align	2
.L1680:
	.word	.LANCHOR3+784
	.fnend
	.size	bam_data_endless_rx_complete, .-bam_data_endless_rx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_setup, %function
f_audio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r2, [r1]	@ zero_extendqisi2
	.pad #52
	sub	sp, sp, #52
	ldrh	r1, [r1, #4]	@ unaligned
	ldr	r3, [r0, #20]
	cmp	r2, #34
	str	r1, [sp, #20]
	ldrh	r1, [r4, #2]	@ unaligned
	ldr	r10, [r3, #24]
	str	r1, [sp, #24]
	ldrh	r3, [r4, #6]	@ unaligned
	ldr	r6, [r10, #4]
	str	r3, [sp, #28]
	beq	.L1683
	bls	.L1778
	cmp	r2, #161
	bne	.L1779
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #1770
	movt	r5, #:upper16:.LANCHOR2
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L1780
	ldr	ip, [sp, #20]
	mov	fp, r1
	mov	r9, r6
	ldr	r3, [sp, #28]
	str	r3, [sp, #32]
.L1699:
	movw	r3, #1794
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	lsr	ip, ip, #8
	ldrh	r3, [r5, r3]
	uxtb	r8, ip
	str	r2, [sp, #36]
	mvn	r2, #94
	tst	r3, #4
	str	r2, [sp, #44]
	bne	.L1781
.L1700:
	mov	r1, r7
	ldr	r3, [r1, #252]!
	cmp	r1, r3
	beq	.L1701
	ldrb	r2, [r3, #16]	@ zero_extendqisi2
	cmp	r2, r8
	bne	.L1703
	b	.L1702
.L1706:
	ldrb	r2, [r3, #16]	@ zero_extendqisi2
	cmp	r8, r2
	beq	.L1702
.L1703:
	ldr	r3, [r3]
	cmp	r1, r3
	bne	.L1706
.L1701:
	ldr	r8, [sp, #32]
	movw	r3, #:lower16:f_audio_complete
	add	r1, sp, #44
	movt	r3, #:upper16:f_audio_complete
	ldr	r0, [r9]
	str	r3, [r9, #28]
	mov	r2, r8
	str	r7, [r9, #32]
	bl	memcpy
	b	.L1698
.L1778:
	cmp	r2, #33
	bne	.L1686
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #1722
	movt	r5, #:upper16:.LANCHOR2
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L1782
	ldr	ip, [sp, #20]
	mov	r9, r6
	str	r1, [sp, #36]
	ldr	fp, [sp, #28]
.L1689:
	movw	r2, #1746
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	lsr	ip, ip, #8
	ldrh	r2, [r5, r2]
	uxtb	r8, ip
	and	r1, r3, #15
	tst	r2, #4
	str	r1, [sp, #32]
	bne	.L1783
.L1690:
	mov	r1, r7
	ldr	r3, [r1, #252]!
	cmp	r3, r1
	beq	.L1691
	ldrb	r2, [r3, #16]	@ zero_extendqisi2
	cmp	r2, r8
	bne	.L1693
	b	.L1692
.L1697:
	ldrb	r2, [r3, #16]	@ zero_extendqisi2
	cmp	r8, r2
	beq	.L1692
.L1693:
	ldr	r3, [r3]
	cmp	r3, r1
	bne	.L1697
.L1691:
	ldr	r2, [sp, #32]
	movw	r3, #:lower16:f_audio_complete
	mov	r8, fp
	movt	r3, #:upper16:f_audio_complete
	strb	r2, [r7, #268]
	str	r3, [r9, #28]
	str	r7, [r9, #32]
.L1698:
	movw	r3, #1914
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L1784
.L1732:
	ldrb	r3, [r6, #26]	@ zero_extendqisi2
	str	r8, [r6, #4]
	mov	r1, r6
	mov	r2, #32
	orr	r3, r3, #2
	strb	r3, [r6, #26]
	ldr	r3, [r10]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L1682
	movw	r0, #:lower16:.LC140
	mov	r2, r4
	ldr	r1, .L1789
	movt	r0, #:upper16:.LC140
	bl	printk
.L1682:
	mov	r0, r4
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1779:
	cmp	r2, #162
	bne	.L1686
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #1866
	movt	r5, #:upper16:.LANCHOR2
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L1785
	ldr	r9, [sp, #20]
	mov	r0, r1
	str	r6, [sp, #36]
	ldr	r3, [sp, #28]
	str	r3, [sp, #32]
.L1720:
	movw	r2, #1890
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	and	r9, r9, #127
	ldrh	r2, [r5, r2]
	lsr	fp, r0, #8
	and	r8, r3, #15
	tst	r2, #4
	bne	.L1786
.L1721:
	ldr	r3, [r7, #260]!
	cmp	r7, r3
	beq	.L1710
	ldrb	r2, [r3, #16]	@ zero_extendqisi2
	cmp	r2, r9
	bne	.L1731
.L1724:
	ldr	r2, [r3, #8]!
	cmp	r3, r2
	beq	.L1710
	ldrb	r1, [r2, #12]	@ zero_extendqisi2
	cmp	r1, fp
	bne	.L1730
.L1727:
	sub	r3, r8, #1
	cmp	r3, #3
	bhi	.L1710
	add	r3, r8, #4
	ldr	r8, [sp, #32]
	ldr	r1, [sp, #36]
	ldr	r3, [r2, r3, lsl #2]
	mov	r2, r8
	ldr	r0, [r1]
	add	r1, sp, #44
	str	r3, [sp, #44]
	bl	memcpy
	b	.L1698
.L1731:
	ldr	r3, [r3]
	cmp	r7, r3
	beq	.L1710
	ldrb	r2, [r3, #16]	@ zero_extendqisi2
	cmp	r9, r2
	beq	.L1724
	b	.L1731
.L1683:
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #1818
	movt	r5, #:upper16:.LANCHOR2
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L1787
	ldr	r0, [sp, #20]
	mov	r2, r1
	str	r6, [sp, #36]
	ldr	r3, [sp, #28]
	str	r3, [sp, #32]
.L1707:
	movw	r1, #1842
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	and	r8, r0, #127
	ldrh	r1, [r5, r1]
	lsr	fp, r2, #8
	and	r9, r3, #15
	tst	r1, #4
	bne	.L1788
.L1708:
	mov	r2, r7
	ldr	r3, [r2, #260]!
	cmp	r2, r3
	beq	.L1710
	ldrb	r1, [r3, #16]	@ zero_extendqisi2
	cmp	r1, r8
	bne	.L1719
.L1711:
	ldr	r2, [r3, #8]!
	cmp	r3, r2
	beq	.L1710
	ldrb	r1, [r2, #12]	@ zero_extendqisi2
	cmp	r1, fp
	bne	.L1718
.L1714:
	cmp	r9, #0
	beq	.L1716
	cmp	r9, #4
	bls	.L1717
	cmp	r9, #5
	bne	.L1716
.L1710:
	movw	r0, #:lower16:.LC141
	ldr	r1, .L1789
	mvn	r4, #94
	movt	r0, #:upper16:.LC141
	bl	printk
	b	.L1682
.L1719:
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L1710
	ldrb	r1, [r3, #16]	@ zero_extendqisi2
	cmp	r8, r1
	beq	.L1711
	b	.L1719
.L1730:
	ldr	r2, [r2]
	cmp	r3, r2
	beq	.L1710
	ldrb	r1, [r2, #12]	@ zero_extendqisi2
	cmp	fp, r1
	beq	.L1727
	b	.L1730
.L1718:
	ldr	r2, [r2]
	cmp	r3, r2
	beq	.L1710
	ldrb	r1, [r2, #12]	@ zero_extendqisi2
	cmp	fp, r1
	beq	.L1714
	b	.L1718
.L1717:
	movw	r3, #:lower16:audio_set_endpoint_complete
	strb	r9, [r7, #268]
	ldr	r8, [sp, #32]
	str	r2, [r7, #272]
	ldr	r2, [sp, #36]
	movt	r3, #:upper16:audio_set_endpoint_complete
	str	r3, [r2, #28]
	str	r7, [r2, #32]
	b	.L1698
.L1702:
	ldr	r0, [r3, #8]!
	cmp	r0, r3
	beq	.L1701
	lsr	fp, fp, #8
	b	.L1705
.L1704:
	ldr	r0, [r0]
	cmp	r3, r0
	beq	.L1701
.L1705:
	ldrb	r2, [r0, #12]	@ zero_extendqisi2
	cmp	r2, fp
	bne	.L1704
	ldr	r2, [r0, #40]
	cmp	r2, #0
	beq	.L1704
	ldr	r3, [sp, #36]
	and	r1, r3, #15
	blx	r2
	str	r0, [sp, #44]
	b	.L1701
.L1692:
	ldr	r2, [r3, #8]!
	cmp	r2, r3
	beq	.L1691
	ldr	r0, [sp, #36]
	ldrb	r1, [r2, #12]	@ zero_extendqisi2
	lsr	r0, r0, #8
	cmp	r1, r0
	bne	.L1695
	b	.L1694
.L1696:
	ldrb	r1, [r2, #12]	@ zero_extendqisi2
	cmp	r0, r1
	beq	.L1694
.L1695:
	ldr	r2, [r2]
	cmp	r2, r3
	bne	.L1696
	b	.L1691
.L1784:
	ldrd	r2, [sp, #20]
	movw	r1, #:lower16:.LC139
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC139
	ldr	r0, .L1789+4
	str	r3, [sp, #4]
	ldrb	r3, [r4]	@ zero_extendqisi2
	str	ip, [sp]
	str	r2, [sp, #8]
	ldr	r2, [sp, #28]
	str	r2, [sp, #12]
	ldr	r2, .L1789
	bl	__dynamic_pr_debug
	b	.L1732
.L1694:
	str	r2, [r7, #272]
	b	.L1691
.L1780:
	movw	r1, #:lower16:.LC132
	ldr	r2, .L1789
	movt	r1, #:upper16:.LC132
	ldr	r0, .L1789+8
	bl	__dynamic_pr_debug
	ldr	r3, [r7, #20]
	ldrh	r2, [r4, #6]	@ unaligned
	ldrh	ip, [r4, #4]	@ unaligned
	ldr	r3, [r3, #24]
	str	r2, [sp, #32]
	ldrh	fp, [r4, #2]	@ unaligned
	ldr	r9, [r3, #4]
	b	.L1699
.L1785:
	movw	r1, #:lower16:.LC136
	ldr	r2, .L1789
	movt	r1, #:upper16:.LC136
	ldr	r0, .L1789+12
	bl	__dynamic_pr_debug
	ldr	r3, [r7, #20]
	ldrh	r2, [r4, #6]	@ unaligned
	ldrh	r9, [r4, #4]	@ unaligned
	ldr	r3, [r3, #24]
	str	r2, [sp, #32]
	ldrh	r0, [r4, #2]	@ unaligned
	ldr	r3, [r3, #4]
	str	r3, [sp, #36]
	b	.L1720
.L1782:
	movw	r1, #:lower16:.LC130
	ldr	r2, .L1789
	movt	r1, #:upper16:.LC130
	ldr	r0, .L1789+16
	bl	__dynamic_pr_debug
	ldr	r3, [r7, #20]
	ldrh	r2, [r4, #2]	@ unaligned
	ldrh	ip, [r4, #4]	@ unaligned
	ldrh	fp, [r4, #6]	@ unaligned
	ldr	r3, [r3, #24]
	str	r2, [sp, #36]
	ldr	r9, [r3, #4]
	b	.L1689
.L1783:
	ldr	r0, [sp, #36]
	movw	r1, #:lower16:.LC131
	ldr	r2, .L1789+20
	movt	r1, #:upper16:.LC131
	stm	sp, {r0, fp, ip}
	ldr	r0, .L1789+24
	bl	__dynamic_pr_debug
	b	.L1690
.L1786:
	ldr	ip, [sp, #32]
	movw	r1, #:lower16:.LC137
	ldr	r2, .L1789+28
	movt	r1, #:upper16:.LC137
	stm	sp, {r0, ip}
	ldr	r0, .L1789+32
	str	r9, [sp, #8]
	bl	__dynamic_pr_debug
	b	.L1721
.L1787:
	movw	r1, #:lower16:.LC133
	ldr	r2, .L1789
	movt	r1, #:upper16:.LC133
	ldr	r0, .L1789+36
	bl	__dynamic_pr_debug
	ldr	r3, [r7, #20]
	ldrh	r2, [r4, #6]	@ unaligned
	ldrh	r0, [r4, #4]	@ unaligned
	ldr	r3, [r3, #24]
	str	r2, [sp, #32]
	ldrh	r2, [r4, #2]	@ unaligned
	ldr	r3, [r3, #4]
	str	r3, [sp, #36]
	b	.L1707
.L1788:
	ldr	ip, [sp, #32]
	movw	r1, #:lower16:.LC134
	movt	r1, #:upper16:.LC134
	stm	sp, {r2, ip}
	ldr	r2, .L1789+40
	str	r0, [sp, #8]
	ldr	r0, .L1789+44
	str	r8, [sp, #12]
	bl	__dynamic_pr_debug
	b	.L1708
.L1781:
	ldr	lr, [sp, #32]
	movw	r1, #:lower16:.LC131
	ldr	r2, .L1789+48
	movt	r1, #:upper16:.LC131
	ldr	r0, .L1789+52
	ldr	r3, [sp, #36]
	stm	sp, {fp, lr}
	str	ip, [sp, #8]
	bl	__dynamic_pr_debug
	b	.L1700
.L1686:
	ldr	ip, [sp, #20]
	movw	r0, #:lower16:.LC138
	ldr	r1, [sp, #24]
	movt	r0, #:upper16:.LC138
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	stm	sp, {r1, ip}
	ldr	ip, [sp, #28]
	ldr	r1, .L1789
	str	ip, [sp, #8]
	bl	printk
	b	.L1710
.L1716:
	movw	r0, #:lower16:.LC135
	ldr	r1, .L1789+40
	movt	r0, #:upper16:.LC135
	bl	printk
	b	.L1710
.L1790:
	.align	2
.L1789:
	.word	.LANCHOR3+816
	.word	.LANCHOR2+1896
	.word	.LANCHOR2+1752
	.word	.LANCHOR2+1848
	.word	.LANCHOR2+1704
	.word	.LANCHOR3+832
	.word	.LANCHOR2+1728
	.word	.LANCHOR3+896
	.word	.LANCHOR2+1872
	.word	.LANCHOR2+1800
	.word	.LANCHOR3+872
	.word	.LANCHOR2+1824
	.word	.LANCHOR3+852
	.word	.LANCHOR2+1776
	.fnend
	.size	f_audio_setup, .-f_audio_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_unbind_config, %function
android_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LANCHOR1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movt	r1, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r1, #3232]!
	ldr	r0, [r0, #24]
	cmp	r3, r1
	beq	.L1792
	sub	r2, r3, #512
	ldr	r3, [r3, #-504]
	cmp	r0, r3
	bne	.L1793
	b	.L1792
.L1794:
	ldr	r3, [r3, #-504]
	cmp	r0, r3
	beq	.L1792
.L1793:
	ldr	r3, [r2, #512]
	cmp	r3, r1
	sub	r2, r3, #512
	bne	.L1794
.L1792:
	ldr	r3, [r0]
	ldrb	r2, [r3, #378]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L1796
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #1938
	movt	r0, #:upper16:.LANCHOR2
	mov	r1, #0
	ldrh	r2, [r0, r2]
	strb	r1, [r3, #378]
	tst	r2, #4
	bne	.L1807
.L1796:
	mov	r6, r5
	ldr	r4, [r6, #112]!
	cmp	r6, r4
	sub	r4, r4, #4
	beq	.L1791
.L1798:
	ldr	r3, [r4]
	mov	r1, r5
	mov	r0, r3
	ldr	r3, [r3, #44]
	cmp	r3, #0
	beq	.L1800
	blx	r3
	ldr	r4, [r4, #4]
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L1798
.L1791:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1800:
	ldr	r4, [r4, #4]
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L1798
	b	.L1791
.L1807:
	movw	r1, #:lower16:.LC142
	ldr	r2, .L1808
	add	r0, r0, #1920
	movt	r1, #:upper16:.LC142
	bl	__dynamic_pr_debug
	b	.L1796
.L1809:
	.align	2
.L1808:
	.word	.LANCHOR3+920
	.fnend
	.size	android_unbind_config, .-android_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_enable_function, %function
android_enable_function:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldmib	r0, {fp, ip}
	.pad #12
	sub	sp, sp, #12
	ldr	r4, [r0, #44]
	ldr	r5, [fp]
	ldr	r3, [ip]
	cmp	r5, #0
	str	r3, [sp, #4]
	beq	.L1820
	movw	r10, #:lower16:.LC143
	mov	r8, r2
	str	r0, [sp]
	mov	r7, r1
	movt	r10, #:upper16:.LC143
.L1819:
	ldr	r6, [r5]
	mov	r0, r8
	mov	r1, r6
	bl	strcmp
	subs	r9, r0, #0
	bne	.L1812
	ldr	r3, [sp]
	ldr	r1, [r5, #20]
	cmp	r1, r3
	cmpne	r1, #0
	bne	.L1831
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L1821
	mov	r2, #12
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	beq	.L1832
.L1814:
	ldr	r3, [sp]
	add	r2, r7, #112
	movw	r6, #:lower16:.LANCHOR2
	movt	r6, #:upper16:.LANCHOR2
	str	r3, [r5, #20]
	str	r5, [r0], #4
	ldr	r1, [r7, #116]
	bl	__list_add
	movw	r3, #1962
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L1833
.L1815:
	ldr	r3, [r4, #44]
	ldr	r7, [r5]
	cmp	r3, #0
	ble	.L1810
	add	r3, r3, r3, lsl #2
	add	r4, r4, #12
	add	r5, r4, r3, lsl #1
	b	.L1818
.L1816:
	cmp	r4, r5
	beq	.L1810
.L1818:
	mov	r1, r4
	mov	r0, r7
	bl	strcmp
	cmp	r0, #0
	add	r4, r4, #10
	bne	.L1816
	movw	r3, #1986
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L1834
.L1817:
	ldr	r2, [sp, #4]
	mov	r3, #1
	mov	r9, #0
	strb	r3, [r2, #378]
.L1810:
	mov	r0, r9
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1831:
	mov	r2, r6
	ldr	r1, .L1835
	mov	r0, r10
	bl	printk
.L1812:
	ldr	r5, [fp, #4]!
	cmp	r5, #0
	bne	.L1819
.L1820:
	mvn	r9, #21
	b	.L1810
.L1821:
	mov	r0, #16
	b	.L1814
.L1833:
	movw	r1, #:lower16:.LC145
	ldr	r2, .L1835
	movt	r1, #:upper16:.LC145
	ldr	r0, .L1835+4
	ldr	r3, [r5]
	bl	__dynamic_pr_debug
	b	.L1815
.L1834:
	movw	r1, #:lower16:.LC146
	ldr	r2, .L1835+8
	movt	r1, #:upper16:.LC146
	ldr	r0, .L1835+12
	bl	__dynamic_pr_debug
	b	.L1817
.L1832:
	movw	r0, #:lower16:.LC144
	ldr	r1, .L1835
	mvn	r9, #11
	movt	r0, #:upper16:.LC144
	bl	printk
	b	.L1810
.L1836:
	.align	2
.L1835:
	.word	.LANCHOR3+944
	.word	.LANCHOR2+1944
	.word	.LANCHOR3+968
	.word	.LANCHOR2+1968
	.fnend
	.size	android_enable_function, .-android_enable_function
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_release, %function
ccid_bulk_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2010
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR2
	str	lr, [sp, #4]
	ldr	r4, [r1, #124]
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L1843
.L1838:
	mov	r3, #0
	mov	r0, r3
	str	r3, [r4, #152]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1843:
	movw	r1, #:lower16:.LC147
	ldr	r0, .L1844
	movt	r1, #:upper16:.LC147
	bl	__dynamic_pr_debug
	b	.L1838
.L1845:
	.align	2
.L1844:
	.word	.LANCHOR2+1992
	.fnend
	.size	ccid_bulk_release, .-ccid_bulk_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_eps_disable, %function
qdss_eps_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2034
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR2
	str	lr, [sp, #4]
	mov	r4, r0
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L1864
.L1847:
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	tst	r3, #2
	beq	.L1848
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #192]	@ zero_extendqisi2
	bfc	r2, #1, #1
	uxtb	r3, r2
	strb	r2, [r4, #192]
.L1848:
	tst	r3, #4
	beq	.L1849
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #192]	@ zero_extendqisi2
	bfc	r2, #2, #1
	uxtb	r3, r2
	strb	r2, [r4, #192]
.L1849:
	tst	r3, #1
	beq	.L1846
	ldr	r0, [r4, #108]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r4, #192]
.L1846:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1864:
	movw	r1, #:lower16:.LC148
	add	r0, r3, #2016
	movt	r1, #:upper16:.LC148
	bl	__dynamic_pr_debug
	b	.L1847
	.fnend
	.size	qdss_eps_disable, .-qdss_eps_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_ctrl_response_available, %function
frmnet_ctrl_response_available:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #2058
	movt	r5, #:upper16:.LANCHOR2
	mov	r4, r0
	strd	r6, [sp, #8]
	ldrh	r3, [r5, r3]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	ldr	r7, [r0, #140]
	tst	r3, #4
	bne	.L1888
.L1866:
	add	r6, r4, #132
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #120]
	cmp	r7, #0
	clz	r3, r3
	lsr	r3, r3, #5
	moveq	r3, #1
	cmp	r3, #0
	bne	.L1886
	ldr	r2, [r7]
	cmp	r2, #0
	beq	.L1886
	ldr	r2, [r4, #152]
	add	r2, r2, #1
	cmp	r2, #1
	str	r2, [r4, #152]
	beq	.L1869
.L1886:
	mov	r1, r0
.L1887:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	_raw_spin_unlock_irqrestore
.L1869:
	ldr	ip, [r7]
	mvn	lr, #94
	mov	r1, r0
	mov	r0, r6
	strb	lr, [ip]
	strb	r2, [ip, #1]
	strb	r3, [ip, #2]
	strb	r3, [ip, #3]
	ldrh	r2, [r4, #112]
	strh	r2, [ip, #4]	@ unaligned
	strb	r3, [ip, #6]
	strb	r3, [ip, #7]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r0, [r4, #136]
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r8, r0, #0
	bne	.L1889
.L1865:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L1889:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r3, r4
	mov	r9, r0
	ldr	r7, [r3, #144]!
	cmp	r7, r3
	beq	.L1872
	ldr	r3, [r4, #152]
	cmp	r3, #0
	bne	.L1890
	movw	r2, #2082
	ldrh	r2, [r5, r2]
	tst	r2, #4
	bne	.L1891
.L1874:
	mov	r1, r9
	b	.L1887
.L1888:
	ldrb	ip, [r0, #116]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC149
	mov	r3, r0
	movt	r1, #:upper16:.LC149
	ldr	r2, .L1892
	ldr	r0, .L1892+4
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L1866
.L1890:
	sub	r3, r3, #1
	mov	r0, r7
	str	r3, [r4, #152]
	sub	r4, r7, #8
	bl	list_del
	ldr	r0, [r7, #-8]
	bl	kfree
	mov	r0, r4
	bl	kfree
.L1872:
	mov	r1, r9
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #2106
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L1865
	ldr	r0, .L1892+8
	movw	r1, #:lower16:.LC151
	mov	r2, r8
	movt	r1, #:upper16:.LC151
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	__dynamic_pr_debug
.L1891:
	movw	r1, #:lower16:.LC150
	ldr	r2, .L1892
	movt	r1, #:upper16:.LC150
	ldr	r0, .L1892+12
	bl	__dynamic_pr_debug
	b	.L1874
.L1893:
	.align	2
.L1892:
	.word	.LANCHOR3+992
	.word	.LANCHOR2+2040
	.word	.LANCHOR2+2088
	.word	.LANCHOR2+2064
	.fnend
	.size	frmnet_ctrl_response_available, .-frmnet_ctrl_response_available
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_setup, %function
frmnet_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #2130
	mov	r5, r0
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR2
	mov	r4, r1
	movt	r6, #:upper16:.LANCHOR2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r6, r3]
	.pad #28
	sub	sp, sp, #28
	ldr	r9, [r0, #128]
	ldrh	fp, [r1, #4]	@ unaligned
	ldrh	r10, [r1, #2]	@ unaligned
	tst	r3, #4
	ldrh	r8, [r1, #6]	@ unaligned
	ldr	r7, [r9, #4]
	bne	.L1910
.L1895:
	ldr	r3, [r5, #120]
	cmp	r3, #0
	beq	.L1911
	ldrh	r3, [r4]	@ unaligned
	movw	r2, #8482
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r2
	beq	.L1898
	movw	r2, #41217
	cmp	r3, r2
	beq	.L1899
	cmp	r3, #8448
	beq	.L1912
.L1900:
	movw	r3, #2178
	ldrh	r3, [r6, r3]
	tst	r3, #4
	mvneq	r4, #94
	bne	.L1913
.L1894:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1912:
	movw	r3, #:lower16:frmnet_cmd_complete
	mov	r4, r8
	str	r5, [r7, #32]
	movt	r3, #:upper16:frmnet_cmd_complete
	mov	r8, #0
	str	r3, [r7, #28]
.L1901:
	ldrb	r3, [r7, #26]	@ zero_extendqisi2
	str	r4, [r7, #4]
	mov	r1, r7
	mov	r2, #32
	bfi	r3, r8, #1, #1
	strb	r3, [r7, #26]
	ldr	r3, [r9]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L1894
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC155
	mov	r2, r4
	movt	r1, #:upper16:.LC155
	add	r0, r0, #32
	bl	dev_err
	b	.L1894
.L1899:
	cmp	r10, #0
	bne	.L1900
	add	r3, r5, #132
	mov	r0, r3
	str	r3, [sp, #20]
	bl	_raw_spin_lock
	mov	r3, r5
	ldr	r5, [r3, #144]!
	cmp	r5, r3
	beq	.L1914
	mov	r0, r5
	sub	r6, r5, #8
	bl	list_del
	ldr	r0, [sp, #20]
	bl	_raw_spin_unlock
	ldmdb	r5, {r1, r4}
	ldr	r0, [r7]
	cmp	r8, r4
	movcc	r4, r8
	cmp	r4, r8
	mov	r2, r4
	movge	r8, #0
	movlt	r8, #1
	bl	memcpy
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
	b	.L1901
.L1898:
	ldr	r6, [r5, #100]
	adds	r8, r8, #0
	movne	r8, #1
	cmp	r6, #0
	moveq	r4, r6
	beq	.L1901
	ldrb	r1, [r5, #116]	@ zero_extendqisi2
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, r10
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, r5
	mov	r4, #0
	add	r1, r1, r1, lsl #1
	add	r3, r3, r1, lsl #3
	ldrb	r1, [r3, #3252]	@ zero_extendqisi2
	blx	r6
	b	.L1901
.L1910:
	ldrb	ip, [r0, #116]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC152
	mov	r3, r0
	movt	r1, #:upper16:.LC152
	ldr	r2, .L1915
	add	r0, r6, #2112
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L1895
.L1913:
	ldr	r1, [r9]
	str	r10, [sp, #4]
	movw	r2, #:lower16:.LC24
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC24
	str	fp, [sp, #8]
	ldr	r0, .L1915+4
	ldrb	r3, [r4]	@ zero_extendqisi2
	mvn	r4, #94
	add	r1, r1, #32
	str	ip, [sp]
	str	r8, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L1894
.L1911:
	movw	r3, #2154
	ldrh	r3, [r6, r3]
	tst	r3, #4
	mvneq	r4, #106
	beq	.L1894
	movw	r1, #:lower16:.LC153
	ldr	r2, .L1915
	mvn	r4, #106
	movt	r1, #:upper16:.LC153
	ldr	r0, .L1915+8
	bl	__dynamic_pr_debug
	b	.L1894
.L1914:
	movw	r0, #:lower16:.LC154
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	mov	r3, r10
	ldrb	r1, [r4]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC154
	str	fp, [sp]
	str	r8, [sp, #4]
	bl	printk
	ldr	r0, [sp, #20]
	bl	_raw_spin_unlock
	b	.L1900
.L1916:
	.align	2
.L1915:
	.word	.LANCHOR3+1024
	.word	.LANCHOR2+2160
	.word	.LANCHOR2+2136
	.fnend
	.size	frmnet_setup, .-frmnet_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_notify_complete, %function
frmnet_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r4, #:lower16:.LANCHOR2
	movw	r3, #2202
	movt	r4, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldrh	r3, [r4, r3]
	.pad #12
	sub	sp, sp, #12
	ldr	r6, [r1, #32]
	ldr	r5, [r1, #44]
	tst	r3, #4
	bne	.L1952
.L1918:
	cmn	r5, #104
	beq	.L1919
	cmp	r5, #0
	bne	.L1953
.L1920:
	ldr	r3, [r6, #124]
	cmp	r3, #0
	bne	.L1954
.L1917:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L1953:
	cmn	r5, #108
	beq	.L1919
	movw	r0, #:lower16:.LC157
	mov	r1, r5
	movt	r0, #:upper16:.LC157
	bl	printk
	b	.L1920
.L1919:
	add	r4, r6, #132
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r3, #0
	mov	r0, r4
	str	r3, [r6, #152]
.L1950:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	_raw_spin_unlock_irqrestore
.L1954:
	add	r5, r6, #132
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #152]
	mov	r8, r0
	cmp	r3, #0
	beq	.L1924
	sub	r3, r3, #1
	mov	r1, r0
	cmp	r3, #0
	mov	r0, r5
	str	r3, [r6, #152]
	beq	.L1950
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r6, #136]
	mov	r1, r7
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r8, r0, #0
	beq	.L1917
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r3, r6
	mov	r9, r0
	ldr	r7, [r3, #144]!
	cmp	r7, r3
	beq	.L1928
	ldr	r2, [r6, #152]
	cmp	r2, #0
	beq	.L1929
	sub	r2, r2, #1
	mov	r0, r7
	str	r2, [r6, #152]
	sub	r6, r7, #8
	bl	list_del
	ldr	r0, [r7, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
.L1928:
	mov	r1, r9
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #2250
	ldrh	r3, [r4, r3]
	tst	r3, #4
	beq	.L1917
	ldr	r0, .L1956
	movw	r1, #:lower16:.LC151
	mov	r2, r8
	movt	r1, #:upper16:.LC151
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	__dynamic_pr_debug
.L1952:
	ldrb	ip, [r6, #116]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC156
	mov	r3, r6
	movt	r1, #:upper16:.LC156
	ldr	r2, .L1956+4
	ldr	r0, .L1956+8
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L1918
.L1924:
	movw	r2, #2226
	ldrh	r2, [r4, r2]
	tst	r2, #4
	bne	.L1955
.L1926:
	mov	r1, r8
.L1951:
	mov	r0, r5
	b	.L1950
.L1955:
	movw	r1, #:lower16:.LC150
	ldr	r2, .L1956+4
	movt	r1, #:upper16:.LC150
	ldr	r0, .L1956+12
	bl	__dynamic_pr_debug
	b	.L1926
.L1929:
	movw	r0, #:lower16:.LC158
	ldr	r1, .L1956+4
	movt	r0, #:upper16:.LC158
	bl	printk
	mov	r1, r9
	b	.L1951
.L1957:
	.align	2
.L1956:
	.word	.LANCHOR2+2232
	.word	.LANCHOR3+1040
	.word	.LANCHOR2+2184
	.word	.LANCHOR2+2208
	.fnend
	.size	frmnet_notify_complete, .-frmnet_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_function_ctrlrequest, %function
mbim_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r1, #12]
	.pad #16
	sub	sp, sp, #16
	ldrh	r7, [r2, #4]	@ unaligned
	ldrh	r8, [r2, #2]	@ unaligned
	ldrh	r6, [r2, #6]	@ unaligned
	cmp	r3, #0
	bne	.L1961
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldrb	r3, [r3, #234]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L1961
	movw	r0, #:lower16:.LANCHOR2
	mov	r4, r2
	movt	r0, #:upper16:.LANCHOR2
	movw	r2, #2274
	ldrb	r3, [r4]	@ zero_extendqisi2
	ldrh	r2, [r0, r2]
	mov	r5, r1
	tst	r2, #4
	bne	.L1975
.L1962:
	cmp	r3, #128
	beq	.L1976
	cmp	r3, #192
	bne	.L1961
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	cmp	r3, #165
	cmpeq	r7, #4
	bne	.L1961
	ldr	r3, [r5, #4]
	cmp	r6, #40
	movcc	r4, r6
	movcs	r4, #40
	ldr	r1, .L1978
	mov	r2, r4
	ldr	r0, [r3]
	bl	memcpy
.L1964:
	ldr	r1, [r5, #4]
	cmp	r6, r4
	mov	r2, #32
	movle	r3, #0
	movgt	r3, #1
	ldrb	r0, [r1, #26]	@ zero_extendqisi2
	bfi	r0, r3, #1, #1
	strb	r0, [r1, #26]
	ldr	r3, [r5, #4]
	str	r4, [r3, #4]
	ldr	r3, [r5]
	ldr	r1, [r5, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bge	.L1958
	movw	r0, #:lower16:.LC160
	ldr	r1, .L1978+4
	movt	r0, #:upper16:.LC160
	bl	printk
.L1958:
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1976:
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	cmp	r3, #6
	beq	.L1977
.L1961:
	mvn	r4, #94
	b	.L1958
.L1977:
	lsr	r3, r8, #8
	cmp	r3, #3
	bne	.L1961
	uxtb	r8, r8
	cmp	r8, #238
	bne	.L1961
	ldr	r3, [r5, #4]
	cmp	r6, #18
	movcc	r4, r6
	movcs	r4, #18
	ldr	r1, .L1978+8
	mov	r2, r4
	ldr	r0, [r3]
	bl	memcpy
	b	.L1964
.L1975:
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC159
	add	r0, r0, #2256
	movt	r1, #:upper16:.LC159
	ldr	r2, .L1978+4
	str	ip, [sp]
	str	r8, [sp, #4]
	str	r7, [sp, #8]
	str	r6, [sp, #12]
	bl	__dynamic_pr_debug
	ldrb	r3, [r4]	@ zero_extendqisi2
	b	.L1962
.L1979:
	.align	2
.L1978:
	.word	.LANCHOR0+208
	.word	.LANCHOR3+1064
	.word	.LANCHOR0+248
	.fnend
	.size	mbim_function_ctrlrequest, .-mbim_function_ctrlrequest
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_do_descs, %function
ffs_do_descs:
	.fnstart
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r10, r2
	.pad #4
	sub	sp, sp, #4
	mov	fp, r0
	mov	r4, r1
	mov	r9, r3
	mov	r7, r2
	mov	r8, #0
.L1995:
	cmp	r8, fp
	mov	r1, r8
	ldr	r3, [sp, #40]
	moveq	r4, #0
	mov	r0, #0
	mov	r2, r4
	blx	r9
	subs	r5, r0, #0
	bge	.L1982
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2298
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	beq	.L1980
	movw	r1, #:lower16:.LC161
	mov	r2, r8
	ldr	r0, .L2029
	movt	r1, #:upper16:.LC161
	mov	r3, r5
	bl	__dynamic_pr_debug
	b	.L1980
.L1982:
	cmp	r4, #0
	bne	.L1984
	sub	r5, r10, r7
	b	.L1980
.L1984:
	cmp	r7, #1
	bls	.L2003
	ldrb	r6, [r4]	@ zero_extendqisi2
	cmp	r7, r6
	bcc	.L2003
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	cmp	r3, #9
	beq	.L1986
	bhi	.L1987
	cmp	r3, #4
	beq	.L1988
	cmp	r3, #5
	beq	.L1989
	b	.L2003
.L1987:
	cmp	r3, #11
	beq	.L1990
	cmp	r3, #48
	beq	.L1991
	b	.L2003
.L1988:
	cmp	r6, #9
	bne	.L2003
	mov	r2, r4
	add	r1, r4, #2
	ldr	r3, [sp, #40]
	mov	r0, #1
	blx	r9
	subs	r5, r0, #0
	bge	.L1992
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2322
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	beq	.L1985
	movw	r1, #:lower16:.LC162
	ldrb	r2, [r4, #2]	@ zero_extendqisi2
	mov	r3, r5
	movt	r1, #:upper16:.LC162
	ldr	r0, .L2029+4
	bl	__dynamic_pr_debug
	b	.L1985
.L1992:
	ldrb	r3, [r4, #8]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L1994
.L1996:
	sub	r7, r7, r6
	add	r4, r4, r6
	add	r8, r8, #1
	b	.L1995
.L1994:
	mov	r2, r4
	add	r1, r4, #8
	ldr	r3, [sp, #40]
	mov	r0, #2
	blx	r9
	subs	r5, r0, #0
	bge	.L1996
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2346
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	beq	.L1985
	movw	r1, #:lower16:.LC163
	ldrb	r2, [r4, #8]	@ zero_extendqisi2
	mov	r3, r5
	movt	r1, #:upper16:.LC163
	ldr	r0, .L2029+8
	bl	__dynamic_pr_debug
	b	.L1985
.L1989:
	sub	r3, r6, #7
	tst	r3, #253
	bne	.L2003
	ldrb	r3, [r4, #2]	@ zero_extendqisi2
	tst	r3, #15
	beq	.L2003
	mov	r2, r4
	add	r1, r4, #2
	ldr	r3, [sp, #40]
	mov	r0, #3
	blx	r9
	subs	r5, r0, #0
	bge	.L1996
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #2370
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	beq	.L1985
	movw	r1, #:lower16:.LC164
	ldrb	r2, [r4, #2]	@ zero_extendqisi2
	mov	r3, r5
	movt	r1, #:upper16:.LC164
	add	r0, r0, #2352
	bl	__dynamic_pr_debug
	b	.L1985
.L1986:
	cmp	r6, #5
	beq	.L1996
	b	.L2003
.L1990:
	cmp	r6, #8
	bne	.L2003
	ldrb	r3, [r4, #7]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L1996
	mov	r2, r4
	add	r1, r4, #7
	ldr	r3, [sp, #40]
	mov	r0, #2
	blx	r9
	subs	r5, r0, #0
	bge	.L1996
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2394
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	beq	.L1985
	movw	r1, #:lower16:.LC163
	ldrb	r2, [r4, #7]	@ zero_extendqisi2
	mov	r3, r5
	movt	r1, #:upper16:.LC163
	ldr	r0, .L2029+12
	bl	__dynamic_pr_debug
	b	.L1985
.L1991:
	cmp	r6, #6
	beq	.L1996
.L2003:
	mvn	r5, #21
.L1985:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #2418
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	beq	.L1980
	movw	r1, #:lower16:.LC165
	add	r0, r0, #2400
	ldr	r2, .L2029+16
	movt	r1, #:upper16:.LC165
	mov	r3, r5
	bl	__dynamic_pr_debug
.L1980:
	mov	r0, r5
	add	sp, sp, #4
	@ sp needed
	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
.L2030:
	.align	2
.L2029:
	.word	.LANCHOR2+2280
	.word	.LANCHOR2+2304
	.word	.LANCHOR2+2328
	.word	.LANCHOR2+2376
	.word	.LANCHOR3+1084
	.fnend
	.size	ffs_do_descs, .-ffs_do_descs
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_unbind, %function
frmnet_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2442
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	mov	r5, r0
	str	lr, [sp, #12]
	ldrh	r3, [r3, r2]
	mov	r4, r1
	tst	r3, #4
	bne	.L2039
.L2032:
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L2040
	cmp	r3, #2
	bhi	.L2041
.L2034:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r5, [r4, #136]
	ldr	r6, [r4, #140]
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, [r4]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
.L2040:
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L2034
.L2041:
	ldr	r0, [r4, #8]
	bl	kfree
	b	.L2034
.L2039:
	movw	r1, #:lower16:.LC166
	ldrb	r3, [r4, #116]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC166
	ldr	r2, .L2042
	ldr	r0, .L2042+4
	bl	__dynamic_pr_debug
	b	.L2032
.L2043:
	.align	2
.L2042:
	.word	.LANCHOR3+1100
	.word	.LANCHOR2+2424
	.fnend
	.size	frmnet_unbind, .-frmnet_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_start_rx, %function
gs_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r8, r0, #32
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r2, [r0, #4]
	.pad #8
	sub	sp, sp, #8
	ldr	r5, [r0, #32]
	ldr	r3, [r0, #40]
	ldr	r6, [r2, #92]
	cmp	r8, r5
	beq	.L2045
	ldr	r2, [r0, #8]
	cmp	r2, #0
	beq	.L2045
	cmp	r3, #7
	bgt	.L2045
	mov	r4, r0
	mov	r9, #4096
	b	.L2046
.L2047:
	cmp	r10, #0
	bne	.L2061
	ldr	r5, [r4, #32]
	ldr	r3, [r4, #40]
	cmp	r8, r5
	add	r3, r3, #1
	str	r3, [r4, #40]
	beq	.L2045
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L2045
	cmp	r3, #7
	bgt	.L2045
.L2046:
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del
	mov	r0, r4
	str	r9, [r5, #-32]
	bl	_raw_spin_unlock
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r2, #32
	mov	r0, r6
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r4
	bl	_raw_spin_lock
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L2047
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #40]
.L2045:
	mov	r0, r3
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2061:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #2466
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L2062
.L2049:
	mov	r1, r8
	mov	r0, r5
	ldr	r2, [r4, #32]
	bl	__list_add
	ldr	r3, [r4, #40]
	b	.L2045
.L2062:
	str	r10, [sp, #4]
	ldr	ip, [r6, #4]
	movw	r3, #:lower16:.LC167
	movw	r1, #:lower16:.LC168
	ldr	r2, .L2063
	movt	r3, #:upper16:.LC167
	movt	r1, #:upper16:.LC168
	add	r0, r0, #2448
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L2049
.L2064:
	.align	2
.L2063:
	.word	.LANCHOR3+1116
	.fnend
	.size	gs_start_rx, .-gs_start_rx
	.section	.init.text,"ax",%progbits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_init, %function
gether_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	mov	r4, #0
	.pad #8
	sub	sp, sp, #8
	movw	r0, #:lower16:.LC169
	mov	r3, r4
	movt	r0, #:upper16:.LC169
	mov	r2, #1
	mov	r1, #10
	str	r4, [sp]
	bl	__alloc_workqueue_key
	movw	r3, #:lower16:.LANCHOR1
	cmp	r0, r4
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3312]
	movne	r0, r4
	bne	.L2065
	ldr	r2, .L2069
	movw	r0, #:lower16:.LC170
	movt	r0, #:upper16:.LC170
	mov	r1, r2
	bl	printk
	mvn	r0, #11
.L2065:
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L2070:
	.align	2
.L2069:
	.word	.LANCHOR3+1128
	.fnend
	.size	gether_init, .-gether_init
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_disable, %function
rmnet_smd_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	mov	r3, #0
	str	lr, [sp, #4]
	ldr	r0, [r0, #96]
	str	r3, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L2072
	blx	r2
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
.L2072:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L2073
	blx	r2
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
.L2073:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L2074
	blx	r2
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
.L2074:
	ldr	r3, [r3, #4]
	blx	r3
	add	r1, r4, #408
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #388]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	queue_work
	.fnend
	.size	rmnet_smd_disable, .-rmnet_smd_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_ch_probe, %function
rmnet_smd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2490
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR2
	str	lr, [sp, #4]
	movw	r4, #:lower16:.LANCHOR1
	ldrh	r2, [r3, r2]
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #3316]
	tst	r2, #4
	bne	.L2091
.L2086:
	add	r1, r3, #392
	ldr	r0, [r3, #388]
	bl	queue_work
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
.L2091:
	ldr	ip, [r3, #84]
	mov	r1, r0
	movw	r2, #:lower16:.LC171
	ldr	r3, [r1]
	movt	r2, #:upper16:.LC171
	ldr	r0, .L2092
	ldr	r1, [ip]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #3316]
	b	.L2086
.L2093:
	.align	2
.L2092:
	.word	.LANCHOR2+2472
	.fnend
	.size	rmnet_smd_ch_probe, .-rmnet_smd_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_setup, %function
rmnet_sdio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r0, #192]
	ldrh	r9, [r1, #4]	@ unaligned
	ldrh	r8, [r1, #2]	@ unaligned
	ldr	r7, [r2, #24]
	cmp	r3, #0
	ldrh	r6, [r1, #6]	@ unaligned
	ldr	r10, [r7, #4]
	beq	.L2103
	ldrh	r3, [r1]	@ unaligned
	movw	r2, #8482
	mov	r4, r1
	mov	r5, r0
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r2
	beq	.L2096
	movw	r2, #41217
	cmp	r3, r2
	beq	.L2097
	cmp	r3, #8448
	beq	.L2106
.L2098:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #2514
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	mvneq	r4, #94
	bne	.L2107
.L2094:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2106:
	movw	r3, #:lower16:rmnet_sdio_command_complete
	mov	r4, r6
	str	r0, [r10, #32]
	movt	r3, #:upper16:rmnet_sdio_command_complete
	mov	r6, #0
	str	r3, [r10, #28]
.L2099:
	ldrb	r3, [r10, #26]	@ zero_extendqisi2
	str	r4, [r10, #4]
	mov	r1, r10
	mov	r2, #32
	bfi	r3, r6, #1, #1
	strb	r3, [r10, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L2094
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC155
	mov	r2, r4
	movt	r1, #:upper16:.LC155
	add	r0, r0, #32
	bl	dev_err
	b	.L2094
.L2097:
	cmp	r8, #0
	bne	.L2098
	add	r3, r0, #188
	mov	r0, r3
	str	r3, [sp, #20]
	bl	_raw_spin_lock
	mov	r2, r5
	ldr	fp, [r2, #120]!
	cmp	fp, r2
	beq	.L2108
	mov	r0, fp
	sub	r8, fp, #8
	bl	list_del
	ldr	r2, [r5, #128]
	ldr	r0, [sp, #20]
	sub	r2, r2, #1
	str	r2, [r5, #128]
	bl	_raw_spin_unlock
	ldmdb	fp, {r1, r4}
	ldr	r0, [r10]
	cmp	r6, r4
	movcc	r4, r6
	mov	r2, r4
	bl	memcpy
	movw	r2, #:lower16:rmnet_sdio_response_complete
	str	r5, [r10, #32]
	movt	r2, #:upper16:rmnet_sdio_response_complete
	str	r2, [r10, #28]
	ldr	r0, [fp, #-8]
	bl	kfree
	mov	r0, r8
	bl	kfree
	ldr	r3, [r5, #364]
	cmp	r4, r6
	movge	r6, #0
	movlt	r6, #1
	add	r3, r3, #1
	str	r3, [r5, #364]
	b	.L2099
.L2096:
	ldr	r3, [r0, #328]
	tst	r8, #1
	add	r1, r0, #332
	mov	r4, #0
	ldr	r0, [r0, #200]
	orrne	r3, r3, #2
	biceq	r3, r3, #2
	str	r3, [r5, #328]
	bl	queue_work
	subs	r6, r6, r4
	movne	r6, #1
	b	.L2099
.L2107:
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC24
	add	r0, r0, #2496
	ldr	r1, [r7]
	movt	r2, #:upper16:.LC24
	str	r8, [sp, #4]
	ldrb	r3, [r4]	@ zero_extendqisi2
	mvn	r4, #94
	str	ip, [sp]
	add	r1, r1, #32
	str	r9, [sp, #8]
	str	r6, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L2094
.L2108:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC172
	str	r8, [sp]
	movt	r1, #:upper16:.LC172
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	str	r9, [sp, #4]
	ldrb	r2, [r4]	@ zero_extendqisi2
	str	r6, [sp, #8]
	add	r0, r0, #32
	bl	_dev_info
	ldr	r0, [sp, #20]
	bl	_raw_spin_unlock
	b	.L2098
.L2103:
	mvn	r4, #106
	b	.L2094
	.fnend
	.size	rmnet_sdio_setup, .-rmnet_sdio_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_unthrottle, %function
gs_unthrottle:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #272]
	cmp	r4, #0
	beq	.L2109
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #4]
	mov	r5, r0
	cmp	r3, #0
	beq	.L2111
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r4, #60
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3320]
	bl	queue_work
.L2111:
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L2109:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gs_unthrottle, .-gs_unthrottle
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_read_complete, %function
gs_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r5, #48]
	mov	r6, r0
	add	r2, r4, #48
	add	r0, r5, #36
	ldr	r1, [r4, #52]
	ldr	r3, [r4, #128]
	add	r3, r3, ip
	str	r3, [r4, #128]
	bl	__list_add
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r4, #60
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3320]
	bl	queue_work
	mov	r1, r6
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	gs_read_complete, .-gs_read_complete
	.align	2
	.global	gsdio_write_complete
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_write_complete, %function
gsdio_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #2538
	movt	r5, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r6, r1
	ldrh	r3, [r5, r3]
	strd	r8, [sp, #16]
	mov	r8, r0
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	ldr	r4, [r0]
	tst	r3, #4
	bne	.L2134
.L2119:
	cmp	r4, #0
	beq	.L2135
	add	r7, r4, #4
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r1, r4
	mov	r9, r0
	add	r0, r6, #36
	ldr	r2, [r1, #52]!
	bl	__list_add
	ldr	r3, [r4, #76]
	add	r3, r3, #1
	str	r3, [r4, #76]
	ldr	r3, [r6, #44]
	cmn	r3, #108
	beq	.L2121
	cmp	r3, #0
	beq	.L2122
	ldr	ip, [r8, #4]
	movw	r0, #:lower16:.LC174
	mov	r2, r4
	movt	r0, #:upper16:.LC174
	ldr	r1, .L2136
	str	ip, [sp]
	str	r3, [sp, #4]
	ldr	r3, [r4]
	bl	printk
.L2122:
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r4, #60
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3324]
	bl	queue_work
.L2123:
	mov	r1, r9
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	_raw_spin_unlock_irqrestore
.L2121:
	movw	r3, #2562
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L2123
	movw	r1, #:lower16:.LC175
	ldr	r2, .L2136
	movt	r1, #:upper16:.LC175
	ldr	r0, .L2136+4
	ldr	r3, [r8, #4]
	bl	__dynamic_pr_debug
	b	.L2123
.L2134:
	movw	r1, #:lower16:.LC173
	mov	r3, r0
	ldr	r2, .L2136
	movt	r1, #:upper16:.LC173
	ldr	r0, .L2136+8
	str	r4, [sp]
	bl	__dynamic_pr_debug
	b	.L2119
.L2135:
	ldr	r1, .L2136
	movw	r0, #:lower16:.LC105
	movt	r0, #:upper16:.LC105
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk
.L2137:
	.align	2
.L2136:
	.word	.LANCHOR3+1140
	.word	.LANCHOR2+2544
	.word	.LANCHOR2+2520
	.fnend
	.size	gsdio_write_complete, .-gsdio_write_complete
	.align	2
	.global	gsdio_ctrl_notify_modem
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ctrl_notify_modem, %function
gsdio_ctrl_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r3, [r4]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	cmp	r1, r3
	bcs	.L2155
	cmp	r0, #0
	beq	.L2156
	mov	ip, #104
	lsl	r3, r2, #1
	mla	r1, ip, r1, r4
	and	r3, r3, #2
	ldr	r5, [r1, #24]
	ldr	r1, [r5, #176]
	cmp	r1, r3
	beq	.L2138
	movw	r1, #:lower16:.LANCHOR2
	mov	r6, r0
	str	r3, [r5, #176]
	movw	r0, #2586
	movt	r1, #:upper16:.LANCHOR2
	ldrh	r3, [r1, r0]
	tst	r3, #4
	bne	.L2157
.L2142:
	ldr	r3, [r5, #108]
	cmp	r3, #0
	beq	.L2158
	ldr	r3, [r5, #176]
	cmp	r3, #0
	beq	.L2144
	ldr	r3, [r6, #136]
	cmp	r3, #0
	beq	.L2144
	mov	r0, r6
	ldr	r1, [r5, #172]
	blx	r3
.L2144:
	ldr	r0, [r4, #3324]
	add	r1, r5, #80
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work
.L2138:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2157:
	str	r2, [sp, #4]
	ldr	ip, [r5]
	movw	r1, #:lower16:.LC178
	movt	r1, #:upper16:.LC178
	mov	r3, r5
	ldr	r2, .L2159
	ldr	r0, .L2159+4
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L2142
.L2155:
	mov	r2, r1
	ldr	r1, .L2159
	movw	r0, #:lower16:.LC176
	movt	r0, #:upper16:.LC176
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L2158:
	ldr	r1, .L2159
	movw	r0, #:lower16:.LC179
	mov	r2, r5
	ldr	r3, [r5]
	movt	r0, #:upper16:.LC179
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L2156:
	ldr	r1, .L2159
	movw	r0, #:lower16:.LC177
	movt	r0, #:upper16:.LC177
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L2160:
	.align	2
.L2159:
	.word	.LANCHOR3+1164
	.word	.LANCHOR2+2568
	.fnend
	.size	gsdio_ctrl_notify_modem, .-gsdio_ctrl_notify_modem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_write_complete, %function
gsmd_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2610
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r5, r1
	str	lr, [sp, #16]
	ldrh	r2, [r3, r2]
	.pad #12
	sub	sp, sp, #12
	mov	r7, r0
	ldr	r4, [r0]
	tst	r2, #4
	bne	.L2177
.L2162:
	cmp	r4, #0
	beq	.L2178
	add	r6, r4, #4
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r4, #72]
	ldr	r3, [r3, #8]
	tst	r3, #1
	beq	.L2164
	ldr	r3, [r5, #44]
	cmn	r3, #108
	beq	.L2164
	cmp	r3, #0
	beq	.L2166
	ldr	ip, [r7, #4]
	movw	r0, #:lower16:.LC174
	mov	r2, r4
	movt	r0, #:upper16:.LC174
	ldr	r1, .L2179
	str	ip, [sp]
	str	r3, [sp, #4]
	ldr	r3, [r4]
	bl	printk
.L2166:
	mov	r1, r4
	add	r0, r5, #36
	ldr	r2, [r1, #44]!
	bl	__list_add
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r4, #52
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3328]
	bl	queue_work
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock
.L2164:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r5]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	bx	r3	@ indirect register sibling call
.L2177:
	movw	r1, #:lower16:.LC173
	add	r0, r3, #2592
	ldr	r2, .L2179
	movt	r1, #:upper16:.LC173
	mov	r3, r7
	str	r4, [sp]
	bl	__dynamic_pr_debug
	b	.L2162
.L2178:
	ldr	r1, .L2179
	movw	r0, #:lower16:.LC105
	movt	r0, #:upper16:.LC105
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	printk
.L2180:
	.align	2
.L2179:
	.word	.LANCHOR3+1188
	.fnend
	.size	gsmd_write_complete, .-gsmd_write_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_read_complete, %function
gsmd_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2634
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r5, r1
	str	lr, [sp, #16]
	ldrh	r3, [r3, r2]
	.pad #12
	sub	sp, sp, #12
	mov	r6, r0
	ldr	r4, [r0]
	tst	r3, #4
	bne	.L2193
.L2182:
	cmp	r4, #0
	beq	.L2194
	add	r7, r4, #4
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #72]
	ldr	r3, [r3, #8]
	tst	r3, #1
	beq	.L2184
	ldr	r3, [r5, #44]
	cmn	r3, #108
	beq	.L2184
	add	r0, r5, #36
	add	r2, r4, #20
	ldr	r1, [r4, #24]
	bl	__list_add
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r4, #28
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3328]
	bl	queue_work
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock
.L2184:
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r0, [r5]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	bx	r3	@ indirect register sibling call
.L2193:
	movw	r1, #:lower16:.LC173
	mov	r3, r0
	ldr	r2, .L2195
	movt	r1, #:upper16:.LC173
	ldr	r0, .L2195+4
	str	r4, [sp]
	bl	__dynamic_pr_debug
	b	.L2182
.L2194:
	ldr	r1, .L2195
	movw	r0, #:lower16:.LC105
	movt	r0, #:upper16:.LC105
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	printk
.L2196:
	.align	2
.L2195:
	.word	.LANCHOR3+1208
	.word	.LANCHOR2+2616
	.fnend
	.size	gsmd_read_complete, .-gsmd_read_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_probe, %function
ghsuart_ctrl_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2658
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L2207
.L2198:
	ldr	r3, [r4, #4]
	movw	r2, #:lower16:.LANCHOR1
	mov	r1, #84
	movt	r2, #:upper16:.LANCHOR1
	mov	r0, #1
	mla	r3, r1, r3, r2
	ldr	r4, [r3, #1860]
	add	r1, r4, #88
	add	r5, r4, #8
	bl	_set_bit
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r6, r0
	cmp	r3, #0
	beq	.L2199
	add	r1, r4, #36
	ldr	r0, [r4, #32]
	bl	queue_work
.L2199:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2207:
	movw	r1, #:lower16:.LC180
	add	r0, r3, #2640
	ldr	r2, .L2208
	movt	r1, #:upper16:.LC180
	ldr	r3, [r4]
	bl	__dynamic_pr_debug
	b	.L2198
.L2209:
	.align	2
.L2208:
	.word	.LANCHOR3+1228
	.fnend
	.size	ghsuart_ctrl_probe, .-ghsuart_ctrl_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_probe, %function
ghsuart_data_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2682
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	lr, [sp, #8]
	movw	r4, #:lower16:.LANCHOR1
	ldrh	r2, [r3, r2]
	movt	r4, #:upper16:.LANCHOR1
	mov	r5, r0
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r4, #2028]
	tst	r2, #4
	bne	.L2219
.L2211:
	ldr	r2, [r5, #4]
	cmp	r2, r3
	bcs	.L2220
	mov	r3, #84
	mov	r0, #1
	mla	r2, r3, r2, r4
	ldr	r4, [r2, #2032]
	add	r1, r4, #188
	bl	_set_bit
	ldr	r0, [r4, #4]
	cmp	r0, #0
	bne	.L2221
.L2210:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L2221:
	add	r1, r4, #112
	ldr	r0, [r4, #108]
	bl	queue_work
	mov	r0, #0
	b	.L2210
.L2219:
	movw	r1, #:lower16:.LC181
	ldr	r2, .L2222
	str	r3, [sp]
	movt	r1, #:upper16:.LC181
	ldr	r0, .L2222+4
	ldr	r3, [r5]
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #2028]
	b	.L2211
.L2220:
	movw	r0, #:lower16:.LC182
	ldr	r1, .L2222
	movt	r0, #:upper16:.LC182
	bl	printk
	mvn	r0, #21
	b	.L2210
.L2223:
	.align	2
.L2222:
	.word	.LANCHOR3+1248
	.word	.LANCHOR2+2664
	.fnend
	.size	ghsuart_data_probe, .-ghsuart_data_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_disable, %function
qdss_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2706
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L2231
.L2225:
	add	r5, r4, #188
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #92]
	mov	r1, r0
	cmp	r3, #0
	beq	.L2232
	mov	r3, #0
	mov	r0, r5
	str	r3, [r4, #92]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	bl	qdss_eps_disable
	add	r1, r4, #172
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	ldr	r0, [r4, #196]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	queue_work
.L2232:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L2231:
	movw	r1, #:lower16:.LC183
	add	r0, r3, #2688
	movt	r1, #:upper16:.LC183
	bl	__dynamic_pr_debug
	b	.L2225
	.fnend
	.size	qdss_disable, .-qdss_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_debug_read_stats, %function
rmnet_smd_debug_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 192
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #:lower16:kmalloc_caches
	strd	r6, [sp, #8]
	movt	r5, #:upper16:kmalloc_caches
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #268
	sub	sp, sp, #268
	str	r1, [sp, #88]
	strd	r2, [sp, #92]
	add	lr, r4, #260
	add	ip, r4, #324
	ldrd	r0, [ip]
	ldrd	r2, [lr]
	strd	r2, [sp, #136]
	ldrd	r2, [lr, #8]
	strd	r0, [sp, #200]
	ldrd	r0, [ip, #8]
	strd	r2, [sp, #144]
	ldrd	r2, [lr, #16]
	strd	r0, [sp, #208]
	ldrd	r0, [ip, #16]
	strd	r2, [sp, #152]
	ldrd	r2, [lr, #24]
	strd	r0, [sp, #216]
	ldrd	r0, [ip, #24]
	strd	r2, [sp, #160]
	ldrd	r2, [lr, #32]
	strd	r0, [sp, #224]
	ldrd	r0, [ip, #32]
	strd	r2, [sp, #168]
	ldrd	r2, [lr, #40]
	strd	r0, [sp, #232]
	ldrd	r0, [ip, #40]
	strd	r2, [sp, #176]
	ldrd	r2, [lr, #48]
	ldrd	r6, [lr, #56]
	strd	r0, [sp, #240]
	ldrd	r0, [ip, #48]
	strd	r2, [sp, #184]
	ldrd	r2, [ip, #56]
	strd	r6, [sp, #192]
	strd	r0, [sp, #248]
	ldr	r0, [r5, #36]
	add	r1, sp, #256
	strd	r2, [r1]
	cmp	r0, #0
	beq	.L2236
	mov	r2, #512
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L2239
.L2234:
	add	r9, r4, #164
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	lr, [r4, #168]
	ldr	r3, [r4, #436]
	ldr	r2, [r4, #440]
	ldr	r7, [r4, #424]
	ldr	r8, [r4, #428]
	str	r3, [sp, #76]
	ldr	r3, [sp, #180]
	str	r2, [sp, #84]
	ldr	r2, [sp, #244]
	str	r0, [sp, #120]
	ldr	r0, [r4, #260]
	ldr	ip, [r4, #444]
	sub	r1, r8, r7
	ldr	r6, [r4, #432]
	ldr	fp, [r4, #448]
	ldr	r10, [r4, #452]
	str	ip, [sp, #80]
	str	lr, [sp, #100]
	strd	r2, [sp, #124]
	str	r1, [sp, #132]
	bl	smd_read_avail
	str	r0, [sp, #108]
	ldr	r0, [r4, #260]
	bl	smd_write_avail
	ldr	r3, [sp, #76]
	str	r0, [sp, #112]
	ldr	r0, [r4, #324]
	sub	r3, r6, r3
	str	r3, [sp, #104]
	bl	smd_read_avail
	ldr	ip, [sp, #80]
	str	r0, [sp, #116]
	ldr	r2, [sp, #84]
	ldr	r0, [r4, #324]
	sub	r4, ip, r2
	bl	smd_write_avail
	sub	ip, fp, r10
	ldr	lr, [sp, #76]
	str	r7, [sp, #12]
	ldr	r1, [sp, #100]
	ldr	r7, [sp, #104]
	ldrd	r2, [sp, #124]
	str	ip, [sp, #52]
	ldr	ip, [sp, #108]
	str	r6, [sp, #20]
	ldr	r6, [sp, #80]
	str	r0, [sp, #68]
	mov	r0, r5
	stmib	sp, {r1, r8}
	ldr	r1, [sp, #132]
	str	lr, [sp, #24]
	ldr	lr, [sp, #84]
	str	ip, [sp, #56]
	ldr	ip, [sp, #112]
	str	r2, [sp]
	movw	r2, #:lower16:.LC184
	movt	r2, #:upper16:.LC184
	str	r1, [sp, #16]
	mov	r1, #512
	str	r7, [sp, #28]
	str	r6, [sp, #32]
	str	ip, [sp, #60]
	ldr	ip, [sp, #116]
	str	lr, [sp, #36]
	str	r4, [sp, #40]
	str	fp, [sp, #44]
	str	r10, [sp, #48]
	str	ip, [sp, #64]
	bl	scnprintf
	mov	r4, r0
	mov	r0, r9
	ldr	r1, [sp, #120]
	bl	_raw_spin_unlock_irqrestore
	mov	r3, r5
	str	r4, [sp]
	ldrd	r0, [sp, #88]
	ldr	r2, [sp, #96]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L2233:
	mov	r0, r4
	add	sp, sp, #268
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2236:
	mov	r5, #16
	b	.L2234
.L2239:
	mvn	r4, #11
	b	.L2233
	.fnend
	.size	rmnet_smd_debug_read_stats, .-rmnet_smd_debug_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_read_stats, %function
rmnet_sdio_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:kmalloc_caches
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	ip, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r8, r2
	mov	r9, r3
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #124]
	.pad #64
	sub	sp, sp, #64
	ldr	r0, [ip, #40]
	cmp	r0, #0
	beq	.L2243
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L2246
.L2241:
	add	r6, r4, #188
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r4, #320]
	mov	r10, r0
	movw	r2, #:lower16:.LC185
	ldr	r0, [r4, #196]
	movt	r2, #:upper16:.LC185
	mov	r1, #4096
	ldr	r3, [r4, #352]
	str	ip, [sp, #56]
	ldr	ip, [r4, #316]
	str	r0, [sp, #48]
	mov	r0, r5
	str	ip, [sp, #52]
	ldr	ip, [r4, #128]
	str	ip, [sp, #44]
	ldr	ip, [r4, #364]
	str	ip, [sp, #40]
	ldr	ip, [r4, #328]
	str	ip, [sp, #36]
	ldr	ip, [r4, #116]
	str	ip, [sp, #32]
	ldr	ip, [r4, #368]
	str	ip, [sp, #28]
	ldr	ip, [r4, #324]
	str	ip, [sp, #24]
	ldr	ip, [r4, #180]
	str	ip, [sp, #20]
	ldr	ip, [r4, #168]
	str	ip, [sp, #16]
	ldr	ip, [r4, #356]
	str	ip, [sp, #12]
	ldr	ip, [r4, #360]
	str	ip, [sp, #8]
	ldr	ip, [r4, #152]
	str	ip, [sp, #4]
	ldr	ip, [r4, #140]
	str	ip, [sp]
	bl	scnprintf
	mov	r4, r0
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r9
	mov	r1, r8
	str	r4, [sp]
	mov	r0, r7
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L2240:
	mov	r0, r4
	add	sp, sp, #64
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2243:
	mov	r5, #16
	b	.L2241
.L2246:
	mvn	r4, #11
	b	.L2240
	.fnend
	.size	rmnet_sdio_read_stats, .-rmnet_sdio_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_read_stats, %function
rmnet_mux_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	ip, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r8, r2
	mov	r9, r3
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #92
	sub	sp, sp, #92
	ldr	r0, [ip, #40]
	cmp	r0, #0
	beq	.L2251
	mov	r2, #1024
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L2255
.L2248:
	add	r6, r4, #364
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #208]
	ldr	r2, [r4, #360]
	ldr	r1, [r4, #400]
	ldr	fp, [r4, #404]
	str	r3, [sp, #60]
	ldr	r3, [r4, #232]
	str	r0, [sp, #84]
	ldr	r0, [r4, #408]
	sub	r2, r2, #1
	cmp	r2, #9
	ldr	r10, [r4, #412]
	movwhi	ip, #:lower16:.LC186
	ldr	lr, [r4, #420]
	str	r3, [sp, #64]
	ldr	r3, [r4, #308]
	movthi	ip, #:upper16:.LC186
	str	r3, [sp, #68]
	ldr	r3, [r4, #332]
	str	r0, [sp, #72]
	ldr	r0, [r4, #416]
	str	r3, [sp, #76]
	ldr	r3, [r4, #344]
	str	r3, [sp, #80]
	ldr	r3, [r4, #348]
	str	r3, [sp, #56]
	ldr	r3, [r4, #396]
	bls	.L2256
.L2250:
	ldr	r4, [r4, #352]
	movw	r2, #:lower16:.LC187
	str	r1, [sp]
	str	r10, [sp, #12]
	ldr	r10, [sp, #56]
	movt	r2, #:upper16:.LC187
	str	lr, [sp, #36]
	ldr	lr, [sp, #76]
	mov	r1, #1024
	stmib	sp, {r0, fp}
	mov	r0, r5
	str	r10, [sp, #16]
	ldr	r10, [sp, #60]
	str	ip, [sp, #48]
	str	r4, [sp, #52]
	str	r10, [sp, #20]
	ldr	r10, [sp, #64]
	str	lr, [sp, #40]
	ldr	lr, [sp, #80]
	str	r10, [sp, #24]
	ldr	r10, [sp, #68]
	str	r10, [sp, #28]
	ldr	r10, [sp, #72]
	str	lr, [sp, #44]
	str	r10, [sp, #32]
	bl	scnprintf
	mov	r4, r0
	mov	r0, r6
	ldr	r1, [sp, #84]
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r9
	mov	r1, r8
	str	r4, [sp]
	mov	r0, r7
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L2247:
	mov	r0, r4
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2256:
	movw	ip, #:lower16:.LANCHOR3
	movt	ip, #:upper16:.LANCHOR3
	add	r2, ip, r2, lsl #2
	ldr	ip, [r2, #1268]
	b	.L2250
.L2251:
	mov	r5, #16
	b	.L2248
.L2255:
	mvn	r4, #11
	b	.L2247
	.fnend
	.size	rmnet_mux_read_stats, .-rmnet_mux_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_read_status, %function
debug_read_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r0, #124]
	.pad #20
	sub	sp, sp, #20
	ldmib	r5, {r7, r8}
	cmp	r7, #0
	cmpne	r8, #0
	beq	.L2270
	mov	fp, r3
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	mov	r9, r1
	ldr	r0, [r3, #36]
	mov	r10, r2
	cmp	r0, #0
	beq	.L2263
	mov	r2, #512
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L2271
.L2260:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:.LC189
	mov	r1, #512
	str	r0, [sp, #12]
	movt	r2, #:upper16:.LC189
	mov	r0, r6
	ldr	r3, [r5, #128]
	bl	scnprintf
	movw	r2, #:lower16:.LC190
	rsb	r1, r0, #512
	ldr	r3, [r5, #132]
	mov	r4, r0
	movt	r2, #:upper16:.LC190
	add	r0, r6, r0
	bl	scnprintf
	ldr	ip, [r5, #128]
	add	r4, r4, r0
	movw	r2, #:lower16:.LC191
	ldr	r3, [r5, #132]
	rsb	r1, r4, #512
	add	r0, r6, r4
	movt	r2, #:upper16:.LC191
	sub	r3, ip, r3
	bl	scnprintf
	add	r4, r4, r0
	movw	r2, #:lower16:.LC192
	ldr	r3, [r5, #136]
	rsb	r1, r4, #512
	add	r0, r6, r4
	movt	r2, #:upper16:.LC192
	bl	scnprintf
	add	r4, r4, r0
	movw	r2, #:lower16:.LC193
	ldr	r3, [r5, #140]
	rsb	r1, r4, #512
	add	r0, r6, r4
	movt	r2, #:upper16:.LC193
	bl	scnprintf
	ldr	ip, [r5, #136]
	add	r4, r4, r0
	movw	r2, #:lower16:.LC194
	ldr	r3, [r5, #140]
	rsb	r1, r4, #512
	add	r0, r6, r4
	movt	r2, #:upper16:.LC194
	sub	r3, ip, r3
	bl	scnprintf
	add	r4, r4, r0
	movw	r2, #:lower16:.LC195
	ldr	r3, [r8, #156]
	rsb	r1, r4, #512
	add	r0, r6, r4
	movt	r2, #:upper16:.LC195
	bl	scnprintf
	ldr	r3, [r7, #108]
	add	r4, r4, r0
	cmp	r3, #0
	beq	.L2261
	mov	r0, r7
	blx	r3
	cmp	r0, #0
	movw	r2, #:lower16:.LC196
	rsb	r1, r4, #512
	add	r0, r6, r4
	movne	r3, #2
	moveq	r3, #0
	movt	r2, #:upper16:.LC196
	bl	scnprintf
	add	r4, r4, r0
.L2261:
	mov	r0, r5
	ldr	r1, [sp, #12]
	bl	_raw_spin_unlock_irqrestore
	mov	r2, fp
	mov	r1, r10
	str	r4, [sp]
	mov	r0, r9
	mov	r3, r6
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r6
	bl	kfree
.L2257:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2263:
	mov	r6, #16
	b	.L2260
.L2271:
	mvn	r4, #11
	b	.L2257
.L2270:
	movw	r0, #:lower16:.LC188
	mvn	r4, #21
	movt	r0, #:upper16:.LC188
	bl	printk
	b	.L2257
	.fnend
	.size	debug_read_status, .-debug_read_status
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_sdio_read_stats, %function
debug_sdio_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #68
	sub	sp, sp, #68
	str	r1, [sp, #52]
	strd	r2, [sp, #56]
	cmp	r0, #0
	beq	.L2278
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r10, r0, #0
	beq	.L2282
.L2273:
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	ldr	r5, [r7]
	cmp	r5, #0
	beq	.L2276
	mov	r5, #0
	movw	r3, #:lower16:.LC197
	movt	r3, #:upper16:.LC197
	mov	r6, r5
	add	r8, r7, #4
	str	r3, [sp, #48]
.L2275:
	ldr	r4, [r8, #20]
	add	r8, r8, #104
	add	r9, r4, #4
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r4, #112]
	mov	r3, r6
	rsb	r1, r5, #4096
	mov	fp, r0
	add	r0, r10, r5
	ldr	r2, [sp, #48]
	add	r6, r6, #1
	str	ip, [sp, #40]
	ldr	ip, [r4, #108]
	str	ip, [sp, #36]
	ldr	ip, [r4, #8]
	str	ip, [sp, #32]
	ldr	ip, [r4, #76]
	str	ip, [sp, #28]
	ldr	ip, [r4, #48]
	str	ip, [sp, #24]
	ldr	ip, [r4, #44]
	str	ip, [sp, #20]
	ldr	ip, [r4, #172]
	str	ip, [sp, #16]
	ldr	ip, [r4, #176]
	str	ip, [sp, #12]
	ldr	ip, [r4, #184]
	str	ip, [sp, #8]
	ldr	ip, [r4, #180]
	stm	sp, {r4, ip}
	bl	scnprintf
	add	r5, r5, r0
	mov	r1, fp
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7]
	cmp	r3, r6
	bhi	.L2275
.L2276:
	mov	r3, r10
	str	r5, [sp]
	ldrd	r0, [sp, #52]
	ldr	r2, [sp, #60]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r10
	bl	kfree
.L2272:
	mov	r0, r4
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2278:
	mov	r10, #16
	b	.L2273
.L2282:
	mvn	r4, #11
	b	.L2272
	.fnend
	.size	debug_sdio_read_stats, .-debug_sdio_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_smd_read_stats, %function
debug_smd_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #36]
	.pad #92
	sub	sp, sp, #92
	str	r1, [sp, #76]
	strd	r2, [sp, #80]
	cmp	r0, #0
	beq	.L2290
	mov	r2, #512
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	str	r3, [sp, #64]
	beq	.L2296
.L2284:
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	ldr	r3, [r7, #212]
	cmp	r3, #0
	beq	.L2288
	movw	r3, #:lower16:.LC198
	add	fp, r7, #216
	movt	r3, #:upper16:.LC198
	mov	r6, #0
	mov	r8, r6
	str	r3, [sp, #72]
	mov	r3, r7
	mov	r7, fp
	mov	fp, r3
.L2287:
	ldr	r3, [sp, #64]
	ldr	r9, [r7, #20]
	add	r3, r3, r8
	add	r5, r9, #4
	ldr	r10, [r9, #72]
	str	r3, [sp, #44]
	rsb	r3, r8, #512
	mov	r0, r5
	str	r3, [sp, #48]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r9, #8]
	ldr	r4, [r10]
	str	r3, [sp, #60]
	ldr	r3, [r9, #156]
	cmp	r4, #0
	moveq	lr, r4
	str	r3, [sp, #52]
	ldr	r3, [r9, #160]
	str	r0, [sp, #68]
	mov	r0, r4
	str	r3, [sp, #56]
	ldr	r3, [r9, #164]
	ldr	r9, [r9, #168]
	str	r3, [sp, #48]
	beq	.L2286
	bl	smd_read_avail
	ldr	lr, [r10]
	mov	r4, r0
	cmp	lr, #0
	mov	r0, lr
	beq	.L2286
	bl	smd_write_avail
	mov	lr, r0
.L2286:
	ldr	ip, [r10, #8]
	mov	r3, r6
	rsb	r1, r8, #512
	ldr	r10, [r10, #8]
	str	r9, [sp]
	add	r6, r6, #1
	str	r4, [sp, #20]
	ldr	r0, [sp, #44]
	add	r7, r7, #104
	ldr	r9, [sp, #52]
	ldr	r2, [sp, #48]
	and	ip, ip, #1
	ubfx	r10, r10, #1, #1
	str	lr, [sp, #24]
	str	r9, [sp, #8]
	ldr	r9, [sp, #56]
	str	r2, [sp, #4]
	ldr	r2, [sp, #72]
	str	ip, [sp, #28]
	str	r9, [sp, #12]
	ldr	r9, [sp, #60]
	str	r10, [sp, #32]
	str	r9, [sp, #16]
	bl	scnprintf
	add	r8, r8, r0
	mov	r0, r5
	ldr	r1, [sp, #68]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [fp, #212]
	cmp	r3, r6
	bhi	.L2287
	mov	r3, r8
.L2288:
	ldr	r5, [sp, #64]
	str	r3, [sp]
	ldrd	r0, [sp, #76]
	ldr	r2, [sp, #84]
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L2283:
	mov	r0, r4
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2290:
	mov	r3, #16
	str	r3, [sp, #64]
	b	.L2284
.L2296:
	mvn	r4, #11
	b	.L2283
	.fnend
	.size	debug_smd_read_stats, .-debug_smd_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_read_stats, %function
gbam_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r1
	mov	r9, r2
	strd	r10, [sp, #24]
	mov	r10, r3
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #68
	sub	sp, sp, #68
	cmp	r0, #0
	beq	.L2303
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L2307
.L2298:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #424]
	cmp	r2, #0
	ble	.L2308
	ldr	r4, [r3, #428]
	cmp	r4, #0
	beq	.L2301
	add	r6, r4, #4
	add	r7, r4, #8
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r0, [r4, #20]
	add	ip, r4, #20
	movw	r2, #:lower16:.LC199
	ldr	r1, [r4, #20]
	movt	r2, #:upper16:.LC199
	mov	r3, #0
	ubfx	r0, r0, #1, #1
	ubfx	r1, r1, #2, #1
	strd	r0, [sp, #52]
	ldr	lr, [r4, #68]
	mov	r1, #1024
	mov	r0, r5
	str	lr, [sp, #48]
	ldr	lr, [r4, #44]
	str	lr, [sp, #44]
	ldr	lr, [r4, #280]
	str	lr, [sp, #40]
	ldr	lr, [r4, #276]
	str	lr, [sp, #36]
	ldr	lr, [r4, #272]
	str	lr, [sp, #32]
	ldr	lr, [r4, #268]
	str	lr, [sp, #28]
	ldr	lr, [r4, #248]
	str	lr, [sp, #24]
	ldr	lr, [r4, #244]
	str	lr, [sp, #20]
	ldr	lr, [r4, #240]
	str	lr, [sp, #16]
	ldr	lr, [r4, #260]
	str	lr, [sp, #12]
	ldr	lr, [r4, #264]
	stm	sp, {r4, ip, lr}
	bl	scnprintf
	mov	r4, r0
	mov	r0, r7
	bl	_raw_spin_unlock
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L2301:
	mov	r2, r10
	mov	r1, r9
	str	r4, [sp]
	mov	r0, r8
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L2297:
	mov	r0, r4
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2308:
	mov	r4, #0
	b	.L2301
.L2303:
	mov	r5, #16
	b	.L2298
.L2307:
	mvn	r4, #11
	b	.L2297
	.fnend
	.size	gbam_read_stats, .-gbam_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_read_stats, %function
gsmd_ctrl_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #92
	sub	sp, sp, #92
	str	r1, [sp, #76]
	strd	r2, [sp, #80]
	cmp	r0, #0
	beq	.L2317
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	str	r3, [sp, #60]
	beq	.L2328
.L2310:
	ldr	r4, .L2329
	mov	r10, #0
	movw	r3, #:lower16:.LC200
	movw	r2, #:lower16:.LC201
	movw	r1, #:lower16:.LC202
	movt	r3, #:upper16:.LC200
	movt	r2, #:upper16:.LC201
	movt	r1, #:upper16:.LC202
	mov	fp, r10
	str	r3, [sp, #64]
	str	r2, [sp, #68]
	str	r1, [sp, #72]
.L2315:
	ldr	r9, [r4]
	ldr	r3, [sp, #60]
	cmp	r9, #0
	add	r6, r9, #108
	add	r8, r3, r10
	rsb	r3, r10, #1024
	mov	r0, r6
	str	r3, [sp, #40]
	beq	.L2312
	bl	_raw_spin_lock_irqsave
	ldr	lr, [sp, #68]
	str	r0, [sp, #52]
	ldr	r3, [r9, #92]
	ldr	ip, [r9, #88]
	ldr	r2, [r9]
	ldr	r1, [r9, #8]
	str	r3, [sp, #44]
	ldr	r3, [sp, #64]
	cmp	ip, #0
	ldr	r5, [r9, #8]
	moveq	r3, lr
	cmp	r2, #0
	mov	r7, r2
	mov	ip, r2
	str	r3, [sp, #48]
	ldr	r3, [r9, #96]
	mov	r0, r2
	ubfx	r5, r5, #1, #1
	str	r3, [sp, #40]
	and	r3, r1, #1
	str	r3, [sp, #56]
	beq	.L2314
	bl	smd_read_avail
	ldr	ip, [r9]
	mov	r7, r0
	cmp	ip, #0
	mov	r0, ip
	beq	.L2314
	bl	smd_write_avail
	mov	ip, r0
.L2314:
	ldr	lr, [sp, #40]
	rsb	r1, r10, #1024
	mov	r0, r8
	mov	r3, fp
	str	r9, [sp]
	ldr	r2, [sp, #72]
	stmib	sp, {r9, lr}
	ldr	lr, [sp, #44]
	str	r5, [sp, #24]
	str	r7, [sp, #28]
	str	ip, [sp, #32]
	str	lr, [sp, #12]
	ldr	lr, [sp, #48]
	str	lr, [sp, #16]
	ldr	lr, [sp, #56]
	str	lr, [sp, #20]
	bl	scnprintf
	add	r10, r10, r0
	mov	r0, r6
	ldr	r1, [sp, #52]
	bl	_raw_spin_unlock_irqrestore
.L2312:
	add	fp, fp, #1
	add	r4, r4, #84
	cmp	fp, #6
	bne	.L2315
	ldr	r5, [sp, #60]
	str	r10, [sp]
	ldrd	r0, [sp, #76]
	ldr	r2, [sp, #84]
	mov	r3, r5
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r5
	bl	kfree
.L2309:
	mov	r0, r4
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2317:
	mov	r3, #16
	str	r3, [sp, #60]
	b	.L2310
.L2328:
	mvn	r4, #11
	b	.L2309
.L2330:
	.align	2
.L2329:
	.word	.LANCHOR1+512
	.fnend
	.size	gsmd_ctrl_read_stats, .-gsmd_ctrl_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_read_stats, %function
gctrl_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #68
	sub	sp, sp, #68
	str	r1, [sp, #52]
	strd	r2, [sp, #56]
	cmp	r0, #0
	beq	.L2339
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r10, r0, #0
	beq	.L2347
.L2332:
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	ldr	r3, [r9, #1016]
	cmp	r3, #0
	beq	.L2348
	mov	r5, #0
	movw	r2, #:lower16:.LC200
	str	r9, [sp, #48]
	movw	r1, #:lower16:.LC201
	movw	r0, #:lower16:.LC203
	movt	r2, #:upper16:.LC200
	movt	r1, #:upper16:.LC201
	movt	r0, #:upper16:.LC203
	mov	r7, r5
	add	r6, r9, #1020
	str	r2, [sp, #36]
	str	r1, [sp, #40]
	str	r0, [sp, #44]
.L2336:
	ldr	r4, [r6]
	mov	ip, r5
	cmp	r4, #0
	add	r8, r4, #4
	mov	r0, r8
	beq	.L2334
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	ldr	lr, [r4, #84]
	ldr	ip, [r4, #84]
	ldr	fp, [r4, #88]
	ldr	r0, [r4, #96]
	ldr	r1, [r4, #104]
	and	lr, lr, #1
	ldr	r3, [r4, #100]
	str	r7, [sp]
	cmp	fp, #0
	str	r4, [sp, #4]
	ldr	r2, [sp, #44]
	strd	r0, [sp, #12]
	ubfx	r1, ip, #1, #1
	ldr	ip, [sp, #40]
	add	r0, r10, r5
	str	r3, [sp, #8]
	str	r1, [sp, #28]
	ldr	r1, [sp, #36]
	ldr	r3, [r6, #24]
	str	lr, [sp, #24]
	moveq	r1, ip
	mov	fp, r1
	rsb	r1, r5, #1024
	str	fp, [sp, #20]
	bl	scnprintf
	add	r5, r5, r0
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #48]
	mov	ip, r5
	ldr	r3, [r3, #1016]
.L2334:
	add	r7, r7, #1
	add	r6, r6, #104
	cmp	r7, r3
	bcc	.L2336
.L2337:
	mov	r3, r10
	str	ip, [sp]
	ldrd	r0, [sp, #52]
	ldr	r2, [sp, #60]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r10
	bl	kfree
.L2331:
	mov	r0, r4
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2339:
	mov	r10, #16
	b	.L2332
.L2348:
	mov	ip, r3
	b	.L2337
.L2347:
	mvn	r4, #11
	b	.L2331
	.fnend
	.size	gctrl_read_stats, .-gctrl_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_read_stats, %function
ghsic_data_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #48]
	.pad #76
	sub	sp, sp, #76
	str	r1, [sp, #60]
	strd	r2, [sp, #64]
	cmp	r0, #0
	beq	.L2357
	mov	r2, #4096
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r10, r0, #0
	beq	.L2360
.L2350:
	movw	fp, #:lower16:.LANCHOR1
	movt	fp, #:upper16:.LANCHOR1
	ldr	r3, [fp, #1436]
	cmp	r3, #0
	beq	.L2361
	mov	r5, #0
	movw	r2, #:lower16:.LC204
	str	fp, [sp, #56]
	movw	r1, #:lower16:.LC205
	movt	r2, #:upper16:.LC204
	movt	r1, #:upper16:.LC205
	mov	r7, r5
	add	r6, fp, #1440
	str	r2, [sp, #48]
	str	r1, [sp, #52]
.L2352:
	ldr	r4, [r6]
	mov	ip, r5
	cmp	r4, #0
	add	r8, r4, #80
	add	r9, r4, #48
	mov	r0, r8
	beq	.L2353
	bl	_raw_spin_lock_irqsave
	ldr	lr, [r4, #180]
	rsb	r1, r5, #4096
	str	r0, [sp, #44]
	ldr	ip, [r4, #180]
	add	r0, r10, r5
	add	r6, r6, #104
	ldr	r3, [r4, #164]
	ldr	r2, [sp, #48]
	and	lr, lr, #1
	ubfx	ip, ip, #1, #1
	ubfx	r3, r3, #1, #1
	str	r3, [sp, #36]
	ldr	fp, [r4, #208]
	ldr	r3, [r6, #-80]
	str	fp, [sp, #32]
	ldr	fp, [r4, #204]
	str	fp, [sp, #28]
	ldr	fp, [r4, #72]
	str	fp, [sp, #24]
	ldr	fp, [r4, #212]
	str	fp, [sp, #20]
	ldr	fp, [r4, #188]
	str	r7, [sp]
	add	r7, r7, #1
	stmib	sp, {r4, lr}
	str	ip, [sp, #12]
	str	fp, [sp, #16]
	bl	scnprintf
	add	r5, r0, r5
	mov	r0, r8
	ldr	r1, [sp, #44]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r4, #164]
	rsb	r1, r5, #4096
	mov	r8, r0
	ldr	r3, [r4, #192]
	add	r0, r10, r5
	ldr	r2, [sp, #52]
	ubfx	ip, ip, #2, #1
	str	ip, [sp, #16]
	ldr	ip, [r4, #216]
	str	ip, [sp, #12]
	ldr	ip, [r4, #200]
	str	ip, [sp, #8]
	ldr	ip, [r4, #196]
	str	ip, [sp, #4]
	ldr	ip, [r4, #40]
	str	ip, [sp]
	bl	scnprintf
	add	r5, r5, r0
	mov	r1, r8
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #56]
	mov	ip, r5
	ldr	r3, [r3, #1436]
	cmp	r3, r7
	bhi	.L2352
.L2355:
	mov	r3, r10
	str	ip, [sp]
	ldrd	r0, [sp, #60]
	ldr	r2, [sp, #68]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r10
	bl	kfree
.L2349:
	mov	r0, r4
	add	sp, sp, #76
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2353:
	add	r7, r7, #1
	add	r6, r6, #104
	cmp	r3, r7
	bhi	.L2352
	b	.L2355
.L2357:
	mov	r10, #16
	b	.L2350
.L2361:
	mov	ip, r3
	b	.L2355
.L2360:
	mvn	r4, #11
	b	.L2349
	.fnend
	.size	ghsic_data_read_stats, .-ghsic_data_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_read_stats, %function
ghsuart_ctrl_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #52
	sub	sp, sp, #52
	str	r1, [sp, #36]
	strd	r2, [sp, #40]
	cmp	r0, #0
	beq	.L2370
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r9, r0, #0
	beq	.L2378
.L2363:
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	ldr	r3, [r7, #1856]
	cmp	r3, #0
	beq	.L2368
	ldr	r6, .L2379
	mov	r4, #0
	movw	r10, #:lower16:.LC200
	movw	r2, #:lower16:.LC201
	movw	fp, #:lower16:.LC206
	str	r7, [sp, #28]
	movt	r10, #:upper16:.LC200
	movt	r2, #:upper16:.LC201
	mov	r1, r3
	mov	r5, r4
	movt	fp, #:upper16:.LC206
	str	r2, [sp, #24]
	str	r10, [sp, #32]
.L2367:
	ldr	r10, [r6]
	mov	r3, r4
	add	r6, r6, #84
	cmp	r10, #0
	add	r7, r10, #8
	mov	r0, r7
	beq	.L2365
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r10, #92]
	mov	r8, r0
	mov	r3, r5
	ldr	lr, [sp, #24]
	ldr	r1, [r10, #96]
	ldr	r0, [r10, #100]
	ldr	r2, [r10, #104]
	str	r10, [sp]
	cmp	ip, #0
	ldr	r10, [sp, #32]
	moveq	r10, lr
	strd	r0, [sp, #4]
	rsb	r1, r4, #1024
	add	r0, r9, r4
	str	r2, [sp, #12]
	mov	r2, fp
	str	r10, [sp, #16]
	bl	scnprintf
	add	r4, r4, r0
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #28]
	ldr	r1, [r3, #1856]
	mov	r3, r4
.L2365:
	add	r5, r5, #1
	cmp	r5, r1
	bcc	.L2367
.L2368:
	str	r3, [sp]
	mov	r3, r9
	ldrd	r0, [sp, #36]
	ldr	r2, [sp, #44]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r9
	bl	kfree
.L2362:
	mov	r0, r4
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2370:
	mov	r9, #16
	b	.L2363
.L2378:
	mvn	r4, #11
	b	.L2362
.L2380:
	.align	2
.L2379:
	.word	.LANCHOR1+1860
	.fnend
	.size	ghsuart_ctrl_read_stats, .-ghsuart_ctrl_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_read_stats, %function
ghsuart_data_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #40]
	.pad #76
	sub	sp, sp, #76
	str	r1, [sp, #60]
	strd	r2, [sp, #64]
	cmp	r0, #0
	beq	.L2389
	mov	r2, #1024
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r8, r0, #0
	beq	.L2392
.L2382:
	movw	fp, #:lower16:.LANCHOR1
	movt	fp, #:upper16:.LANCHOR1
	ldr	r3, [fp, #2028]
	cmp	r3, #0
	beq	.L2387
	mov	r5, #0
	movw	r1, #:lower16:.LC207
	str	fp, [sp, #56]
	movw	r0, #:lower16:.LC208
	movt	r1, #:upper16:.LC207
	movt	r0, #:upper16:.LC208
	mov	r2, r3
	mov	r7, r5
	add	r6, fp, #2032
	str	r1, [sp, #48]
	str	r0, [sp, #52]
.L2384:
	ldr	r4, [r6]
	mov	r3, r5
	cmp	r4, #0
	add	r9, r4, #104
	add	r10, r4, #72
	mov	r0, r9
	beq	.L2385
	bl	_raw_spin_lock_irqsave
	str	r0, [sp, #44]
	ldr	lr, [r4, #188]
	rsb	r1, r5, #1024
	ldr	ip, [r4, #188]
	add	r6, r6, #84
	ldr	r3, [r4, #188]
	ldr	r0, [r4, #184]
	and	lr, lr, #1
	ldr	r2, [sp, #48]
	ubfx	ip, ip, #1, #1
	ubfx	r3, r3, #2, #1
	ubfx	r0, r0, #1, #1
	str	r0, [sp, #32]
	ldr	fp, [r4, #96]
	add	r0, r8, r5
	str	fp, [sp, #28]
	ldr	fp, [r4, #212]
	str	fp, [sp, #24]
	ldr	fp, [r4, #204]
	str	r7, [sp]
	add	r7, r7, #1
	stmib	sp, {r4, lr}
	str	ip, [sp, #12]
	str	r3, [sp, #16]
	str	fp, [sp, #20]
	ldr	r3, [r6, #-60]
	bl	scnprintf
	add	r5, r0, r5
	mov	r0, r9
	ldr	r1, [sp, #44]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r4, #184]
	rsb	r1, r5, #1024
	mov	r9, r0
	ldr	r3, [r4, #208]
	add	r0, r8, r5
	ldr	r2, [sp, #52]
	ubfx	ip, ip, #2, #1
	str	ip, [sp, #4]
	ldr	ip, [r4, #64]
	str	ip, [sp]
	bl	scnprintf
	add	r5, r5, r0
	mov	r1, r9
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #56]
	ldr	r2, [r3, #2028]
	mov	r3, r5
	cmp	r2, r7
	bhi	.L2384
.L2387:
	str	r3, [sp]
	mov	r3, r8
	ldrd	r0, [sp, #60]
	ldr	r2, [sp, #68]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r8
	bl	kfree
.L2381:
	mov	r0, r4
	add	sp, sp, #76
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2385:
	add	r7, r7, #1
	add	r6, r6, #84
	cmp	r2, r7
	bhi	.L2384
	b	.L2387
.L2389:
	mov	r8, #16
	b	.L2382
.L2392:
	mvn	r4, #11
	b	.L2381
	.fnend
	.size	ghsuart_data_read_stats, .-ghsuart_data_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_read_stats, %function
debug_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	strd	r8, [sp, #16]
	mov	r9, r1
	ldr	r4, [r6]
	strd	r10, [sp, #24]
	mov	r10, r2
	mov	fp, r3
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	cmp	r6, r4
	moveq	lr, #0
	beq	.L2395
	movw	r8, #:lower16:debug_buffer
	movw	r7, #:lower16:.LC209
	sub	r4, r4, #4
	movt	r8, #:upper16:debug_buffer
	movt	r7, #:upper16:.LC209
	mov	r5, #0
.L2394:
	ldr	ip, [r4, #20]
	rsb	r1, r5, #4096
	add	r0, r8, r5
	mov	r2, r7
	mov	lr, r5
	cmp	ip, #0
	beq	.L2396
	ldr	lr, [ip, #136]
	ldr	r3, [r4]
	str	lr, [sp, #16]
	ldr	lr, [ip, #132]
	str	lr, [sp, #12]
	ldr	lr, [ip, #128]
	str	lr, [sp, #8]
	ldr	lr, [ip, #84]
	ldr	lr, [lr, #4]
	str	lr, [sp, #4]
	ldr	ip, [ip, #88]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	scnprintf
	ldr	r4, [r4, #4]
	add	r5, r5, r0
	mov	lr, r5
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L2394
.L2395:
	movw	r3, #:lower16:debug_buffer
	mov	r2, fp
	str	lr, [sp]
	mov	r1, r10
	mov	r0, r9
	movt	r3, #:upper16:debug_buffer
	bl	simple_read_from_buffer
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2396:
	ldr	r4, [r4, #4]
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L2394
	b	.L2395
	.fnend
	.size	debug_read_stats, .-debug_read_stats
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_port_alloc, %function
gs_port_alloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	mov	r8, r1
	str	lr, [sp, #20]
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L2403
	mov	r2, #144
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L2406
.L2401:
	mov	r0, r4
	mov	r7, #0
	ldr	r2, .L2407
	movw	r1, #:lower16:.LC210
	movw	r6, #:lower16:.LANCHOR1
	movt	r1, #:upper16:.LC210
	str	r7, [r0], #20
	movt	r6, #:upper16:.LANCHOR1
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC211
	ldr	r2, .L2407
	add	r0, r4, #108
	movt	r1, #:upper16:.LC211
	bl	__init_waitqueue_head
	mov	r2, #2560
	movw	r3, #:lower16:gs_rx_push
	strb	r5, [r4, #17]
	movt	r3, #:upper16:gs_rx_push
	add	ip, r4, #64
	add	lr, r4, #32
	add	r1, r4, #76
	add	r5, r5, r5, lsl #1
	mov	r0, r7
	str	lr, [r4, #32]
	str	r2, [r4, #60]
	add	r2, r4, #48
	add	r5, r6, r5, lsl #3
	str	lr, [r4, #36]
	str	r2, [r4, #48]
	str	r2, [r4, #52]
	str	ip, [r4, #64]
	str	ip, [r4, #68]
	str	r3, [r4, #72]
	str	r1, [r4, #76]
	str	r1, [r4, #80]
	ldr	r3, [r8]	@ unaligned
	str	r3, [r4, #120]
	ldrh	r3, [r8, #4]	@ unaligned
	strh	r3, [r4, #124]	@ movhi
	ldrb	r3, [r8, #6]	@ zero_extendqisi2
	strb	r3, [r4, #126]
	str	r4, [r5, #3352]
.L2400:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2403:
	mov	r4, #16
	b	.L2401
.L2406:
	mvn	r0, #11
	b	.L2400
.L2408:
	.align	2
.L2407:
	.word	.LANCHOR1+3332
	.fnend
	.size	gs_port_alloc, .-gs_port_alloc
	.section	.exit.text,"ax",%progbits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_exit, %function
gether_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3312]
	b	destroy_workqueue
	.fnend
	.size	gether_exit, .-gether_exit
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_function_cleanup, %function
qdss_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2730
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L2421
.L2411:
	movw	r5, #:lower16:.LANCHOR0
	movt	r5, #:upper16:.LANCHOR0
	ldr	r4, [r5, #268]!
	cmp	r4, r5
	ldr	r6, [r4]
	beq	.L2410
	ldr	r7, .L2422
	b	.L2412
.L2414:
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, r5
	ldr	r3, [r6]
	beq	.L2410
.L2415:
	mov	r4, r6
	mov	r6, r3
.L2412:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	ldr	r0, [r4, #80]
	bl	destroy_workqueue
	ldr	r3, [r4, #12]
	mov	r1, r8
	mov	r0, r7
	cmp	r3, #0
	bne	.L2414
	mov	r0, r4
	bl	list_del
	sub	r0, r4, #116
	bl	kfree
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, r5
	ldr	r3, [r6]
	bne	.L2415
.L2410:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2421:
	movw	r1, #:lower16:.LC212
	ldr	r0, .L2422+4
	movt	r1, #:upper16:.LC212
	bl	__dynamic_pr_debug
	b	.L2411
.L2423:
	.align	2
.L2422:
	.word	.LANCHOR1+3524
	.word	.LANCHOR2+2712
	.fnend
	.size	qdss_function_cleanup, .-qdss_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_send_cbits_tomodem, %function
gsmd_ctrl_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #5
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #16
	sub	sp, sp, #16
	bhi	.L2425
	movw	ip, #:lower16:.LANCHOR1
	mov	r3, #84
	movt	ip, #:upper16:.LANCHOR1
	mla	r3, r3, r1, ip
	ldr	r4, [r3, #512]
	cmp	r4, #0
	beq	.L2425
	cmp	r0, #0
	beq	.L2445
	ands	r2, r2, #1
	bne	.L2433
	ldr	r1, [r4, #88]
	mov	r3, r2
	mov	r5, #2
	mov	ip, r5
	mov	r6, r2
	cmp	r1, r3
	beq	.L2424
.L2447:
	ldr	r1, [r4, #8]
	str	r3, [r4, #88]
	tst	r1, #1
	beq	.L2424
	movw	r0, #:lower16:.LANCHOR2
	movw	r1, #2754
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r1, [r0, r1]
	tst	r1, #4
	bne	.L2446
.L2432:
	ldr	r0, [r4]
	mov	r2, r5
	mov	r1, r6
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	smd_tiocmset
.L2433:
	ldr	r1, [r4, #88]
	mov	r6, #2
	mov	r5, #0
	mov	r3, r6
	mov	ip, r5
	cmp	r1, r3
	bne	.L2447
.L2424:
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2446:
	movw	r1, #:lower16:.LC214
	add	r0, r0, #2736
	strd	r2, [sp]
	movt	r1, #:upper16:.LC214
	ldr	r2, .L2448
	str	ip, [sp, #8]
	bl	__dynamic_pr_debug
	b	.L2432
.L2445:
	ldr	r1, .L2448
	movw	r0, #:lower16:.LC213
	movt	r0, #:upper16:.LC213
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L2425:
	mov	r2, r1
	ldr	r1, .L2448
	movw	r0, #:lower16:.LC118
	movt	r0, #:upper16:.LC118
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L2449:
	.align	2
.L2448:
	.word	.LANCHOR3+1308
	.fnend
	.size	gsmd_ctrl_send_cbits_tomodem, .-gsmd_ctrl_send_cbits_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_command_complete, %function
rmnet_smd_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r8, [r4, #84]
	cmp	r2, #0
	blt	.L2458
	add	r7, r4, #164
	mov	r5, r1
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r2, [r4, #308]
	ldr	r3, [r4, #448]
	cmp	r2, #0
	add	r3, r3, #1
	str	r3, [r4, #448]
	beq	.L2459
.L2452:
	mov	r3, r4
	ldr	r6, [r3, #108]!
	cmp	r6, r3
	beq	.L2460
	mov	r0, r6
	bl	list_del
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r0, [r6, #-8]
	ldr	r1, [r5]
	ldr	r2, [r5, #48]
	bl	memcpy
	ldr	r3, [r5, #48]
	mov	r0, r7
	str	r3, [r6, #-4]
	bl	_raw_spin_lock
	mov	r0, r6
	add	r2, r4, #124
	ldr	r1, [r4, #128]
	bl	__list_add
	mov	r0, r7
.L2457:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L2459:
	ldr	r0, [r4, #260]
	bl	smd_write_avail
	ldr	r3, [r5, #48]
	cmp	r0, r3
	strcc	r3, [r4, #308]
	bcc	.L2452
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r1, [r5]
	ldr	r2, [r5, #48]
	ldr	r0, [r4, #260]
	bl	smd_write
	ldr	r3, [r5, #48]
	cmp	r3, r0
	bne	.L2461
.L2454:
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #452]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #452]
	b	.L2457
.L2458:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC215
	movt	r1, #:upper16:.LC215
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_err
.L2460:
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC217
	movt	r1, #:upper16:.LC217
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_err
.L2461:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC216
	movt	r1, #:upper16:.LC216
	add	r0, r0, #32
	bl	dev_err
	b	.L2454
	.fnend
	.size	rmnet_smd_command_complete, .-rmnet_smd_command_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_complete_epout, %function
rmnet_smd_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	add	r7, r1, #36
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r1, #44]
	add	r6, r4, #164
	ldr	r8, [r4, #84]
	cmn	r3, #104
	beq	.L2474
	cmp	r3, #0
	mov	r5, r1
	beq	.L2464
	cmn	r3, #108
	beq	.L2474
	ldr	r8, [r8]
	movw	r1, #:lower16:.LC218
	ldr	lr, [r5, #4]
	movt	r1, #:upper16:.LC218
	ldr	ip, [r5, #48]
	ldr	r2, [r0, #4]
	add	r0, r8, #32
	stm	sp, {ip, lr}
	bl	dev_err
.L2474:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r1, [r4, #152]
	mov	r0, r7
	add	r2, r4, #148
.L2473:
	bl	__list_add
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L2464:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r2, [r4, #372]
	ldr	r3, [r4, #432]
	cmp	r2, #0
	add	r3, r3, #1
	str	r3, [r4, #432]
	bne	.L2466
	ldr	r0, [r4, #324]
	bl	smd_write_avail
	ldr	r3, [r5, #48]
	cmp	r0, r3
	strcc	r3, [r4, #372]
	bcc	.L2466
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r1, [r5]
	ldr	r2, [r5, #48]
	ldr	r0, [r4, #324]
	bl	smd_write
	ldr	r3, [r5, #48]
	cmp	r3, r0
	bne	.L2475
.L2468:
	mov	r0, r6
	bl	_raw_spin_lock
	mov	r0, r7
	add	r2, r4, #148
	ldr	r1, [r4, #152]
	ldr	r3, [r4, #436]
	add	r3, r3, #1
	str	r3, [r4, #436]
	bl	__list_add
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r0, r4
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	rmnet_smd_start_rx
.L2466:
	mov	r0, r7
	add	r2, r4, #156
	ldr	r1, [r4, #160]
	b	.L2473
.L2475:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC219
	movt	r1, #:upper16:.LC219
	add	r0, r0, #32
	bl	dev_err
	b	.L2468
	.fnend
	.size	rmnet_smd_complete_epout, .-rmnet_smd_complete_epout
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_data_rx_tlet, %function
rmnet_data_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #164
	strd	r8, [sp, #16]
	add	r8, r0, #156
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r10, [r0, #84]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #156]
	mov	r7, r0
	cmp	r4, r8
	beq	.L2481
	add	r9, r5, #148
	b	.L2477
.L2479:
	bl	list_del
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r4, #-36]
	ldr	r2, [r4, #12]
	ldr	r0, [r5, #324]
	bl	smd_write
	mov	fp, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r7, r0
	mov	r2, r9
	mov	r0, r4
	cmp	r3, fp
	bne	.L2487
	ldr	r1, [r5, #152]
	ldr	r3, [r5, #436]
	add	r3, r3, #1
	str	r3, [r5, #436]
	bl	__list_add
	ldr	r4, [r5, #156]
	cmp	r4, r8
	beq	.L2481
.L2477:
	ldr	r0, [r5, #324]
	bl	smd_write_avail
	ldr	r3, [r4, #12]
	cmp	r0, r3
	mov	r0, r4
	bcs	.L2479
	movw	r2, #:lower16:.LANCHOR2
	movw	r1, #2778
	str	r3, [r5, #372]
	movt	r2, #:upper16:.LANCHOR2
	ldrh	r3, [r2, r1]
	tst	r3, #4
	bne	.L2488
.L2478:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	rmnet_smd_start_rx
.L2481:
	mov	r3, #0
	str	r3, [r5, #372]
	b	.L2478
.L2487:
	ldr	r0, [r10]
	movw	r1, #:lower16:.LC221
	movt	r1, #:upper16:.LC221
	add	r0, r0, #32
	bl	dev_err
	b	.L2478
.L2488:
	ldr	r1, [r10]
	movw	r2, #:lower16:.LC220
	movt	r2, #:upper16:.LC220
	ldr	r0, .L2489
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L2478
.L2490:
	.align	2
.L2489:
	.word	.LANCHOR2+2760
	.fnend
	.size	rmnet_data_rx_tlet, .-rmnet_data_rx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_control_rx_tlet, %function
rmnet_control_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #164
	add	r7, r0, #124
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r0, #84]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #124]
	mov	r10, r0
	cmp	r5, r7
	beq	.L2496
	add	r8, r4, #108
	b	.L2492
.L2494:
	bl	list_del
	ldr	r3, [r4, #448]
	mov	r1, r10
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #448]
	bl	_raw_spin_unlock_irqrestore
	ldmdb	r5, {r1, r2}
	ldr	r0, [r4, #260]
	bl	smd_write
	mov	fp, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #-4]
	mov	r10, r0
	mov	r2, r8
	mov	r0, r5
	cmp	r3, fp
	bne	.L2502
	ldr	r1, [r4, #112]
	ldr	r3, [r4, #452]
	add	r3, r3, #1
	str	r3, [r4, #452]
	bl	__list_add
	ldr	r5, [r4, #124]
	cmp	r5, r7
	beq	.L2496
.L2492:
	ldr	r0, [r4, #260]
	bl	smd_write_avail
	ldr	r3, [r5, #-4]
	cmp	r0, r3
	mov	r0, r5
	bge	.L2494
	movw	r0, #:lower16:.LANCHOR2
	str	r3, [r4, #308]
	movw	r3, #2802
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L2503
.L2493:
	mov	r1, r10
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L2496:
	mov	r3, #0
	str	r3, [r4, #308]
	b	.L2493
.L2502:
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC216
	movt	r1, #:upper16:.LC216
	add	r0, r0, #32
	bl	dev_err
	b	.L2493
.L2503:
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC222
	add	r0, r0, #2784
	movt	r2, #:upper16:.LC222
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L2493
	.fnend
	.size	rmnet_control_rx_tlet, .-rmnet_control_rx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_write_w, %function
grmnet_ctrl_smd_write_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r6, [r0, #16]
	add	r6, r6, #108
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r0, [r5, #-68]
	cmp	r0, #0
	beq	.L2505
	ldr	r4, [r5, #-28]
	sub	r8, r5, #28
	cmp	r8, r4
	bne	.L2506
	b	.L2505
.L2514:
	bl	list_del
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #-68]
	ldmdb	r4, {r1, r2}
	bl	smd_write
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-4]
	mov	r7, r0
	cmp	r3, r10
	bne	.L2513
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r9
	bl	kfree
	ldr	r0, [r5, #-68]
	ldr	r3, [r5, #24]
	cmp	r0, #0
	add	r3, r3, #1
	str	r3, [r5, #24]
	beq	.L2505
	ldr	r4, [r5, #-28]
	cmp	r8, r4
	beq	.L2505
.L2506:
	bl	smd_write_avail
	ldr	r3, [r4, #-4]
	sub	r9, r4, #8
	cmp	r0, r3
	mov	r0, r4
	bge	.L2514
.L2505:
	mov	r1, r7
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L2513:
	movw	r0, #:lower16:.LC223
	mov	r2, r10
	ldr	r1, .L2515
	movt	r0, #:upper16:.LC223
	bl	printk
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r9
	bl	kfree
	b	.L2505
.L2516:
	.align	2
.L2515:
	.word	.LANCHOR3+1340
	.fnend
	.size	grmnet_ctrl_smd_write_w, .-grmnet_ctrl_smd_write_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_data_rx_tlet, %function
rmnet_mux_smd_data_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #364
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r10, [r0, #84]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #368]
	mov	r7, r0
	cmp	r3, #0
	beq	.L2518
	ldr	r4, [r5, #120]
	add	r8, r5, #120
	cmp	r4, r8
	beq	.L2519
	add	r9, r5, #112
	b	.L2520
.L2521:
	bl	list_del
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r4, #-36]
	ldr	r2, [r4, #12]
	ldr	r0, [r5, #128]
	bl	smd_write
	mov	fp, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r7, r0
	mov	r2, r9
	mov	r0, r4
	cmp	r3, fp
	bne	.L2532
	ldr	r1, [r5, #116]
	ldr	r3, [r5, #396]
	add	r3, r3, #1
	str	r3, [r5, #396]
	bl	__list_add
	ldr	r3, [r5, #368]
	cmp	r3, #0
	beq	.L2518
	ldr	r4, [r5, #120]
	cmp	r8, r4
	beq	.L2519
.L2520:
	ldr	r0, [r5, #128]
	bl	smd_write_avail
	ldr	r3, [r4, #12]
	cmp	r0, r3
	mov	r0, r4
	bcs	.L2521
	movw	r2, #:lower16:.LANCHOR2
	movw	r1, #2826
	str	r3, [r5, #176]
	movt	r2, #:upper16:.LANCHOR2
	ldrh	r3, [r2, r1]
	tst	r3, #4
	bne	.L2533
.L2518:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	rmnet_mux_smd_start_rx
.L2519:
	mov	r3, #0
	str	r3, [r5, #176]
	b	.L2518
.L2532:
	ldr	r0, [r10]
	movw	r1, #:lower16:.LC225
	movt	r1, #:upper16:.LC225
	add	r0, r0, #32
	bl	dev_err
	b	.L2518
.L2533:
	ldr	r1, [r10]
	movw	r2, #:lower16:.LC224
	movt	r2, #:upper16:.LC224
	ldr	r0, .L2534
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L2518
.L2535:
	.align	2
.L2534:
	.word	.LANCHOR2+2808
	.fnend
	.size	rmnet_mux_smd_data_rx_tlet, .-rmnet_mux_smd_data_rx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_complete_epout, %function
rmnet_mux_smd_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r4, [r1, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r4, #360]
	cmp	r3, #0
	beq	.L2550
	ldr	r3, [r1, #44]
	add	r8, r1, #36
	add	r6, r4, #364
	ldr	r9, [r4, #84]
	cmn	r3, #104
	beq	.L2549
	cmp	r3, #0
	beq	.L2539
	cmn	r3, #108
	beq	.L2549
	ldr	r2, [r0, #4]
	movw	r1, #:lower16:.LC226
	ldr	r0, [r9]
	movt	r1, #:upper16:.LC226
	ldr	lr, [r5, #4]
	ldr	ip, [r5, #48]
	add	r0, r0, #32
	stm	sp, {ip, lr}
	bl	dev_err
.L2549:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r1, [r4, #116]
	mov	r0, r8
	add	r2, r4, #112
.L2548:
	bl	__list_add
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	_raw_spin_unlock
.L2539:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r4, #176]
	cmp	r3, #0
	bne	.L2541
	ldr	r0, [r4, #128]
	bl	smd_write_avail
	ldr	r3, [r5, #48]
	cmp	r0, r3
	strcc	r3, [r4, #176]
	bcs	.L2551
.L2541:
	mov	r0, r8
	add	r2, r4, #120
	ldr	r1, [r4, #124]
	b	.L2548
.L2550:
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	bx	r3	@ indirect register sibling call
.L2551:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r1, [r5]
	ldr	r2, [r5, #48]
	ldr	r0, [r4, #128]
	bl	smd_write
	ldr	r3, [r5, #48]
	cmp	r3, r0
	beq	.L2543
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC227
	movt	r1, #:upper16:.LC227
	add	r0, r0, #32
	bl	dev_err
.L2543:
	ldr	r3, [r4, #396]
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #396]
	bl	_raw_spin_lock
	mov	r0, r8
	add	r2, r4, #112
	ldr	r1, [r4, #116]
	bl	__list_add
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	rmnet_mux_smd_start_rx
	.fnend
	.size	rmnet_mux_smd_complete_epout, .-rmnet_mux_smd_complete_epout
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_complete_epin, %function
rmnet_smd_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	add	r7, r1, #36
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	add	r6, r4, #140
	add	r5, r4, #164
	cmn	r2, #104
	beq	.L2553
	cmp	r2, #0
	beq	.L2554
	cmn	r2, #108
	beq	.L2553
	ldr	r3, [r4, #84]
	movw	r1, #:lower16:.LC228
	movt	r1, #:upper16:.LC228
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L2554:
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #140]
	cmp	r3, r6
	beq	.L2568
	mov	r2, r6
	mov	r0, r7
	ldr	r1, [r4, #144]
	bl	__list_add
	ldr	r3, [r4, #424]
	add	r3, r3, #1
	str	r3, [r4, #424]
.L2559:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L2568:
	mov	r2, r6
	mov	r0, r7
	ldr	r1, [r4, #144]
	bl	__list_add
	ldr	r3, [r4, #424]
	add	r1, r4, #332
	mov	r0, #0
	add	r6, r4, #328
	add	r3, r3, #1
	str	r3, [r4, #424]
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L2559
	mov	r0, r6
	bl	__tasklet_schedule
	b	.L2559
.L2553:
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r2, r6
	mov	r0, r7
	ldr	r1, [r4, #144]
	bl	__list_add
	b	.L2559
	.fnend
	.size	rmnet_smd_complete_epin, .-rmnet_smd_complete_epin
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_complete_epin, %function
rmnet_mux_smd_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r4, [r1, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r4, #360]
	cmp	r3, #0
	beq	.L2583
	ldr	r2, [r1, #44]
	add	r5, r1, #36
	add	r7, r4, #104
	add	r6, r4, #364
	cmn	r2, #104
	beq	.L2571
	cmp	r2, #0
	beq	.L2572
	cmn	r2, #108
	beq	.L2571
	ldr	r3, [r4, #84]
	movw	r1, #:lower16:.LC229
	movt	r1, #:upper16:.LC229
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L2572:
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r4, #104]
	mov	r2, r7
	mov	r0, r5
	ldr	r1, [r4, #108]
	cmp	r3, r7
	beq	.L2574
	bl	__list_add
.L2575:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock
.L2571:
	mov	r0, r6
	bl	_raw_spin_lock
	mov	r2, r7
	mov	r0, r5
	ldr	r1, [r4, #108]
	bl	__list_add
	b	.L2575
.L2583:
	mov	r5, r0
	ldr	r0, [r1]
	str	r1, [sp, #4]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r1, [sp, #4]
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	bx	r3	@ indirect register sibling call
.L2574:
	bl	__list_add
	add	r1, r4, #136
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r0, r4, #132
	bne	.L2575
	bl	__tasklet_schedule
	b	.L2575
	.fnend
	.size	rmnet_mux_smd_complete_epin, .-rmnet_mux_smd_complete_epin
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_setup, %function
rmnet_smd_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r0, #168]
	ldrh	r9, [r1, #4]	@ unaligned
	ldrh	r7, [r1, #2]	@ unaligned
	ldr	r6, [r2, #24]
	cmp	r3, #0
	ldrh	r8, [r1, #6]	@ unaligned
	ldr	r10, [r6, #4]
	beq	.L2595
	ldrh	r3, [r1]	@ unaligned
	movw	r2, #8482
	mov	r4, r1
	mov	r5, r0
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r2
	beq	.L2586
	movw	r2, #41217
	cmp	r3, r2
	beq	.L2587
	cmp	r3, #8448
	beq	.L2598
.L2588:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #2850
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	mvneq	r4, #94
	bne	.L2599
.L2584:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2598:
	movw	r3, #:lower16:rmnet_smd_command_complete
	mov	r4, r8
	str	r0, [r10, #32]
	movt	r3, #:upper16:rmnet_smd_command_complete
	str	r3, [r10, #28]
.L2589:
	ldrb	r3, [r10, #26]	@ zero_extendqisi2
	str	r4, [r10, #4]
	mov	r1, r10
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r10, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L2584
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC155
	mov	r2, r4
	movt	r1, #:upper16:.LC155
	add	r0, r0, #32
	bl	dev_err
	b	.L2584
.L2587:
	cmp	r7, #0
	bne	.L2588
	add	r3, r0, #164
	mov	r0, r3
	str	r3, [sp, #20]
	bl	_raw_spin_lock
	mov	r2, r5
	ldr	fp, [r2, #132]!
	cmp	fp, r2
	beq	.L2600
	mov	r0, fp
	bl	list_del
	ldr	r4, [sp, #20]
	mov	r0, r4
	bl	_raw_spin_unlock
	ldmdb	fp, {r1, r2}
	ldr	r0, [r10]
	bl	memcpy
	mov	r0, r4
	ldr	r4, [fp, #-4]
	bl	_raw_spin_lock
	ldr	r1, [r5, #116]
	add	r2, r5, #116
	mov	r0, fp
	cmp	r2, r1
	ldr	r1, [r5, #120]
	beq	.L2591
	bl	__list_add
.L2592:
	ldr	r0, [sp, #20]
	bl	_raw_spin_unlock
	movw	r3, #:lower16:rmnet_txcommand_complete
	str	r5, [r10, #32]
	movt	r3, #:upper16:rmnet_txcommand_complete
	str	r3, [r10, #28]
	b	.L2593
.L2586:
	ands	r1, r7, #1
	ldr	r0, [r0, #260]
	movne	r2, #0
	movne	r1, #2
	moveq	r2, #2
	bl	smd_tiocmset
	mov	r4, r0
.L2593:
	cmp	r4, #0
	blt	.L2584
	b	.L2589
.L2599:
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC24
	add	r0, r0, #2832
	ldr	r1, [r6]
	movt	r2, #:upper16:.LC24
	str	r7, [sp, #4]
	ldrb	r3, [r4]	@ zero_extendqisi2
	mvn	r4, #94
	str	ip, [sp]
	add	r1, r1, #32
	str	r9, [sp, #8]
	str	r8, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L2584
.L2591:
	bl	__list_add
	mov	r0, r7
	add	r1, r5, #268
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r0, r5, #264
	bne	.L2592
	bl	__tasklet_schedule
	b	.L2592
.L2600:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC172
	str	r7, [sp]
	movt	r1, #:upper16:.LC172
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	str	r9, [sp, #4]
	ldrb	r2, [r4]	@ zero_extendqisi2
	str	r8, [sp, #8]
	add	r0, r0, #32
	bl	_dev_info
	ldr	r0, [sp, #20]
	bl	_raw_spin_unlock
	b	.L2588
.L2595:
	mvn	r4, #106
	b	.L2584
	.fnend
	.size	rmnet_smd_setup, .-rmnet_smd_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_unbind, %function
rmnet_smd_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	add	r0, r1, #284
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	bl	tasklet_kill
	add	r0, r4, #264
	bl	tasklet_kill
	add	r0, r4, #348
	bl	tasklet_kill
	add	r0, r4, #328
	bl	tasklet_kill
	ldr	r0, [r4, #388]
	bl	flush_workqueue
	mov	r0, r4
	bl	rmnet_smd_free_buf
	mov	r3, #0
	ldr	r0, [r4, #388]
	str	r3, [r4, #88]
	str	r3, [r4, #92]
	str	r3, [r4, #96]
	bl	destroy_workqueue
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3528]
	bl	debugfs_remove_recursive
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	rmnet_smd_unbind, .-rmnet_smd_unbind
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_exit, %function
ghsuart_ctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3532]
	b	debugfs_remove_recursive
	.fnend
	.size	ghsuart_ctrl_exit, .-ghsuart_ctrl_exit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_exit, %function
ghsuart_data_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3536]
	b	debugfs_remove_recursive
	.fnend
	.size	ghsuart_data_exit, .-ghsuart_data_exit
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_cleanup, %function
diag_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r3, #3540]
	bl	debugfs_remove_recursive
	ldr	r4, [r6]
	cmp	r4, r6
	ldr	r5, [r4]
	beq	.L2605
	ldr	r7, .L2612
	b	.L2606
.L2608:
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, r6
	ldr	r3, [r5]
	beq	.L2605
.L2609:
	mov	r4, r5
	mov	r5, r3
.L2606:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r8, r0
	mov	r0, r7
	mov	r1, r8
	cmp	r3, #0
	bne	.L2608
	mov	r0, r4
	sub	r9, r4, #4
	bl	list_del
	mov	r0, r9
	bl	kfree
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, r6
	ldr	r3, [r5]
	bne	.L2609
.L2605:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2613:
	.align	2
.L2612:
	.word	.LANCHOR1+3544
	.fnend
	.size	diag_function_cleanup, .-diag_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_function_cleanup, %function
rmnet_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r3, [r4, #3548]
	str	lr, [sp, #12]
	cmp	r3, #0
	beq	.L2615
	ldr	r6, .L2622
	mov	r5, #0
.L2616:
	ldr	r0, [r6, #20]
	add	r5, r5, #1
	add	r6, r6, #24
	bl	kfree
	ldr	r3, [r4, #3548]
	cmp	r5, r3
	bcc	.L2616
.L2615:
	ldr	r0, [r4, #3552]
	bl	debugfs_remove_recursive
	mov	r3, #0
	ldr	r6, [sp, #8]
	str	r3, [r4, #3548]
	str	r3, [r4, #3556]
	str	r3, [r4, #3560]
	str	r3, [r4, #3564]
	str	r3, [r4, #3568]
	str	r3, [r4, #3572]
	str	r3, [r4, #3576]
	str	r3, [r4, #3580]
	str	r3, [r4, #3584]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2623:
	.align	2
.L2622:
	.word	.LANCHOR1+3240
	.fnend
	.size	rmnet_function_cleanup, .-rmnet_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_data_tx_tlet, %function
rmnet_data_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #164
	strd	r8, [sp, #16]
	add	r8, r0, #140
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r0, #84]
	b	.L2628
.L2638:
	ldr	r0, [r4, #324]
	bl	smd_read_avail
	cmp	r0, r7
	mov	r0, r6
	blt	.L2624
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #140]
	mov	r10, r0
	cmp	r8, r5
	mov	r0, r5
	sub	fp, r5, #36
	beq	.L2636
	bl	list_del
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r7
	ldr	r1, [r5, #-36]
	ldr	r0, [r4, #324]
	bl	smd_read
	str	r0, [r5, #-32]
	ldr	r0, [r4, #92]
	mov	r2, #32
	mov	r1, fp
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	mov	r0, r6
	bne	.L2637
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #428]
	mov	r1, r0
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #428]
	bl	_raw_spin_unlock_irqrestore
.L2628:
	ldr	r0, [r4, #324]
	bl	smd_cur_packet_size
	subs	r7, r0, #0
	bne	.L2638
.L2624:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2636:
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2874
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	beq	.L2624
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC230
	ldr	r0, .L2639
	movt	r2, #:upper16:.LC230
	add	r1, r1, #32
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	__dynamic_dev_dbg
.L2637:
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC231
	movt	r1, #:upper16:.LC231
	add	r0, r0, #32
	bl	dev_err
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	mov	r2, r8
	ldr	r1, [r4, #144]
	mov	r0, r5
	bl	__list_add
	mov	r1, r7
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L2640:
	.align	2
.L2639:
	.word	.LANCHOR2+2856
	.fnend
	.size	rmnet_data_tx_tlet, .-rmnet_data_tx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_control_tx_tlet, %function
rmnet_control_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #:lower16:.LC1
	mov	r4, r0
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LC1
	add	r6, r0, #164
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #84]
	.pad #12
	sub	sp, sp, #12
	str	r3, [sp]
	str	r2, [sp, #4]
.L2646:
	add	r9, r4, #116
.L2645:
	add	r8, r4, #132
.L2644:
	ldr	r0, [r4, #260]
	add	r5, r4, #172
	bl	smd_cur_packet_size
	subs	r7, r0, #0
	beq	.L2641
	ldr	r0, [r4, #260]
	bl	smd_read_avail
	cmp	r0, r7
	mov	r0, r6
	blt	.L2641
	bl	_raw_spin_lock_irqsave
	ldr	r10, [r4, #116]
	mov	fp, r0
	cmp	r10, r9
	mov	r0, r10
	beq	.L2653
	bl	list_del
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r7
	ldr	r1, [r10, #-8]
	ldr	r0, [r4, #260]
	bl	smd_read
	str	r0, [r10, #-4]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	mov	r2, r8
	ldr	r1, [r4, #136]
	ldr	ip, [r4, #444]
	mov	r0, r10
	add	r3, ip, #1
	str	r3, [r4, #444]
	bl	__list_add
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r7, [r4, #84]
	ldr	r3, [r4, #100]
	ldr	r3, [r3]
	.syntax divided
@ 61 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r5]
	add	r2, r2, #1
	strex	r1, r2, [r5]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #1
	bne	.L2644
	mov	r1, #0
	mvn	r0, #94
	strb	r0, [r3]
	strb	r2, [r3, #1]
	mov	r2, #32
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	r0, [r4, #104]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	strb	r1, [r3, #6]
	strb	r1, [r3, #7]
	ldrd	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bge	.L2645
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r1, r3, [r5]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r7]
	ldr	r1, [sp]
	add	r0, r0, #32
	bl	dev_err
	b	.L2646
.L2641:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2653:
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LC232
	movt	r1, #:upper16:.LC232
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mov	r1, fp
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_control_tx_tlet, .-rmnet_control_tx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_tx_pull, %function
gsmd_tx_pull:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r4, #:lower16:.LANCHOR2
	movw	r3, #2898
	movt	r4, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	sub	r2, r0, #52
	strd	r8, [sp, #16]
	mov	r5, r0
	sub	r9, r0, #8
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r4, r3]
	.pad #20
	sub	sp, sp, #20
	ldr	r7, [r0, #20]
	str	r2, [sp, #12]
	tst	r3, #4
	bne	.L2688
.L2655:
	sub	r6, r5, #48
	mov	r0, r6
	bl	_raw_spin_lock_irq
	ldr	r3, [r5, #16]
	cmp	r3, #0
	beq	.L2689
	ldr	r0, [r7]
	ldr	r8, [r3, #88]
	cmp	r0, #0
	beq	.L2666
	ldr	r3, [r5, #-8]
	cmp	r3, r9
	bne	.L2672
	b	.L2666
.L2691:
	ldr	r4, [r5, #-8]
	mov	r0, r4
	sub	fp, r4, #36
	bl	list_del
	cmp	r10, #2048
	ldr	r1, [r4, #-36]
	movlt	r2, r10
	movge	r2, #2048
	ldr	r0, [r7]
	bl	smd_read
	str	r0, [r4, #-32]
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	ldr	r3, [r8, #8]
	mov	r1, fp
	mov	r2, #208
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irq
	cmp	r10, #0
	bne	.L2690
	ldr	r2, [r4, #-32]
	ldr	r3, [r5, #116]
	add	r3, r3, r2
	str	r3, [r5, #116]
	ldr	r0, [r7]
	cmp	r0, #0
	beq	.L2668
	ldr	r3, [r5, #-8]
	cmp	r9, r3
	beq	.L2668
.L2672:
	bl	smd_read_avail
	subs	r10, r0, #0
	bne	.L2691
.L2668:
	ldr	r3, [r5, #16]
	cmp	r3, #0
	beq	.L2673
.L2666:
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L2673
	ldr	r3, [r5, #-8]
	cmp	r9, r3
	beq	.L2673
	movw	r3, #:lower16:.LANCHOR1
	mov	r1, r5
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3328]
	bl	queue_work
.L2673:
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq
.L2689:
	movw	r3, #2922
	ldrh	r3, [r4, r3]
	tst	r3, #4
	bne	.L2692
.L2657:
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	sub	r3, r5, #52
	cmp	r3, #0
	beq	.L2654
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
	cmp	r0, #0
	bne	.L2661
	b	.L2654
.L2662:
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
	bl	smd_read
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
.L2661:
	bl	smd_read_avail
	subs	r2, r0, #0
	mov	r1, #0
	bne	.L2662
.L2654:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2688:
	ldr	ip, [r5, #-52]
	movw	r1, #:lower16:.LC233
	mov	r3, r2
	movt	r1, #:upper16:.LC233
	ldr	r2, .L2693
	add	r0, r4, #2880
	str	ip, [sp]
	str	r9, [sp, #4]
	bl	__dynamic_pr_debug
	b	.L2655
.L2692:
	movw	r1, #:lower16:.LC234
	ldr	r2, .L2693
	movt	r1, #:upper16:.LC234
	ldr	r0, .L2693+4
	bl	__dynamic_pr_debug
	b	.L2657
.L2690:
	movw	r0, #:lower16:.LC235
	ldr	r1, .L2693
	str	r10, [sp]
	movt	r0, #:upper16:.LC235
	ldr	r3, [r5, #-52]
	ldr	r2, [sp, #12]
	bl	printk
	ldr	r3, [r5, #16]
	cmp	r3, #0
	bne	.L2670
	ldr	r0, [r4, #-36]
	bl	kfree
	ldr	r3, [r8, #8]
	mov	r1, fp
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	b	.L2668
.L2670:
	mov	r0, r4
	mov	r1, r9
	ldr	r2, [r5, #-8]
	bl	__list_add
	b	.L2668
.L2694:
	.align	2
.L2693:
	.word	.LANCHOR3+1364
	.word	.LANCHOR2+2904
	.fnend
	.size	gsmd_tx_pull, .-gsmd_tx_pull
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_data_tx_tlet, %function
rmnet_mux_smd_data_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r0, #84]
	ldr	r3, [r0, #368]
	cmp	r3, #0
	beq	.L2695
	mov	r4, r0
	add	r7, r0, #364
	add	r8, r0, #104
	b	.L2699
.L2713:
	ldr	r0, [r4, #128]
	bl	smd_read_avail
	cmp	r0, r6
	mov	r0, r7
	blt	.L2695
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #104]
	mov	r10, r0
	cmp	r8, r5
	mov	r0, r5
	sub	fp, r5, #36
	beq	.L2711
	bl	list_del
	mov	r1, r10
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r2, r6
	ldr	r1, [r5, #-36]
	ldr	r0, [r4, #128]
	bl	smd_read
	str	r0, [r5, #-32]
	ldr	r0, [r4, #92]
	mov	r1, fp
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L2712
	ldr	r2, [r4, #368]
	ldr	r3, [r4, #404]
	cmp	r2, #0
	add	r3, r3, #1
	str	r3, [r4, #404]
	beq	.L2695
.L2699:
	ldr	r0, [r4, #128]
	bl	smd_cur_packet_size
	subs	r6, r0, #0
	bne	.L2713
.L2695:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2711:
	mov	r0, r7
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #2946
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	beq	.L2695
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC236
	add	r0, r0, #2928
	movt	r2, #:upper16:.LC236
	add	r1, r1, #32
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	__dynamic_dev_dbg
.L2712:
	ldr	r3, [r9]
	movw	r1, #:lower16:.LC231
	mov	r2, r0
	movt	r1, #:upper16:.LC231
	add	r0, r3, #32
	bl	dev_err
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r2, r8
	ldr	r1, [r4, #108]
	mov	r0, r5
	bl	__list_add
	mov	r1, r6
	mov	r0, r7
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_mux_smd_data_tx_tlet, .-rmnet_mux_smd_data_tx_tlet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_disconnect_work, %function
gsmd_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2970
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR2
	str	lr, [sp, #4]
	mov	r4, r0
	ldrh	r3, [r3, r2]
	.pad #8
	sub	sp, sp, #8
	tst	r3, #4
	bne	.L2720
.L2715:
	ldr	r3, [r4, #-52]
	ldr	r0, [r3]
	bl	smd_close
	ldr	r3, [r4, #-52]
	mov	r2, #0
	str	r2, [r3]
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L2720:
	ldr	ip, [r4, #-124]
	movw	r1, #:lower16:.LC237
	sub	r3, r0, #124
	movt	r1, #:upper16:.LC237
	ldr	r2, .L2721
	ldr	r0, .L2721+4
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L2715
.L2722:
	.align	2
.L2721:
	.word	.LANCHOR3+1380
	.word	.LANCHOR2+2952
	.fnend
	.size	gsmd_disconnect_work, .-gsmd_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_disconnect_work, %function
rmnet_smd_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	sub	r0, r0, #124
	strd	r6, [sp, #8]
	mov	r4, #0
	mov	r7, r5
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	tasklet_kill
	sub	r0, r5, #144
	bl	tasklet_kill
	sub	r0, r5, #60
	bl	tasklet_kill
	sub	r0, r5, #80
	bl	tasklet_kill
	ldr	r0, [r5, #-148]
	bl	smd_close
	str	r4, [r5, #-104]
	ldr	r0, [r5, #-84]
	bl	smd_close
	str	r4, [r5, #-236]
	str	r4, [r5, #-40]
	ldr	r6, [r7, #-252]!
	cmp	r6, r7
	ldr	r4, [r6]
	subne	r8, r5, #260
	beq	.L2728
.L2727:
	mov	r0, r6
	bl	list_del
	mov	r0, r6
	mov	r2, r8
	ldr	r1, [r5, #-256]
	bl	__list_add
	cmp	r7, r4
	mov	r6, r4
	ldr	r4, [r4]
	bne	.L2727
.L2728:
	mov	r7, r5
	ldr	r6, [r7, #-284]!
	cmp	r6, r7
	ldr	r4, [r6]
	subne	r8, r5, #300
	beq	.L2726
.L2731:
	mov	r0, r6
	bl	list_del
	mov	r0, r6
	mov	r2, r8
	ldr	r1, [r5, #-296]
	bl	__list_add
	cmp	r7, r4
	mov	r6, r4
	ldr	r4, [r4]
	bne	.L2731
.L2726:
	mov	r7, r5
	ldr	r6, [r7, #-276]!
	cmp	r6, r7
	ldr	r4, [r6]
	subne	r8, r5, #292
	beq	.L2730
.L2734:
	mov	r0, r6
	bl	list_del
	mov	r0, r6
	mov	r2, r8
	ldr	r1, [r5, #-288]
	bl	__list_add
	cmp	r7, r4
	mov	r6, r4
	ldr	r4, [r4]
	bne	.L2734
.L2730:
	ldrb	r3, [r5, #-152]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L2739
.L2723:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2739:
	sub	r0, r5, #232
	bl	platform_driver_unregister
	mov	r3, #0
	strb	r3, [r5, #-152]
	b	.L2723
	.fnend
	.size	rmnet_smd_disconnect_work, .-rmnet_smd_disconnect_work
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	cleanup, %function
cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, .L2741
	b	platform_driver_unregister
.L2742:
	.align	2
.L2741:
	.word	.LANCHOR0+276
	.fnend
	.size	cleanup, .-cleanup
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	init, %function
init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR1
	push	{r4, lr}
	.save {r4, lr}
	movt	r2, #:upper16:.LANCHOR1
	mov	r4, #0
	movw	r3, #:lower16:.LANCHOR0
	movw	r0, #:lower16:android_disconnect
	movt	r3, #:upper16:.LANCHOR0
	movt	r0, #:upper16:android_disconnect
	str	r4, [r2, #3588]
	movw	lr, #:lower16:android_setup
	movw	ip, #:lower16:android_suspend
	movw	r1, #:lower16:android_resume
	add	r4, r2, #3232
	str	r0, [r3, #372]
	movt	lr, #:upper16:android_setup
	movt	ip, #:upper16:android_suspend
	movt	r1, #:upper16:android_resume
	add	r0, r3, #276
	str	r4, [r2, #3232]
	str	lr, [r3, #368]
	str	ip, [r3, #376]
	str	r1, [r3, #380]
	str	r4, [r2, #3236]
	bl	platform_driver_register
	subs	r4, r0, #0
	beq	.L2743
	ldr	r2, .L2749
	movw	r0, #:lower16:.LC238
	movt	r0, #:upper16:.LC238
	mov	r1, r2
	bl	printk
.L2743:
	mov	r0, r4
	pop	{r4, pc}
.L2750:
	.align	2
.L2749:
	.word	.LANCHOR3+1404
	.fnend
	.size	init, .-init
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_connect_work, %function
rmnet_smd_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	sub	r2, r0, #132
	movw	r3, #:lower16:rmnet_smd_event_notify
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR0
	mov	r1, r2
	movt	r6, #:upper16:.LANCHOR0
	mov	r4, r0
	str	r8, [sp, #16]
	movt	r3, #:upper16:rmnet_smd_event_notify
	str	lr, [sp, #20]
	.pad #24
	sub	sp, sp, #24
	ldr	r8, [r0, #-308]
	ldr	r0, [r6, #444]
	bl	smd_open
	subs	r2, r0, #0
	bne	.L2763
	ldr	r3, [r4, #-88]
	ands	r3, r3, #1
	bne	.L2755
	mov	r2, sp
	str	r3, [sp, #4]
	add	r5, sp, #4
	bic	r1, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r1, r1, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r1, #12]
	add	r1, sp, #16
	sub	r7, r4, #80
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L2757
.L2764:
	bl	schedule
.L2757:
	mov	r2, #2
	mov	r1, r5
	mov	r0, r7
	bl	prepare_to_wait
	ldr	r3, [r4, #-88]
	tst	r3, #1
	beq	.L2764
	mov	r1, r5
	mov	r0, r7
	bl	finish_wait
.L2755:
	sub	r2, r4, #68
	movw	r3, #:lower16:rmnet_smd_event_notify
	ldr	r0, [r6, #448]
	mov	r1, r2
	movt	r3, #:upper16:rmnet_smd_event_notify
	bl	smd_open
	cmp	r0, #0
	bne	.L2765
	ldr	r3, [r4, #-24]
	ands	r3, r3, #1
	bne	.L2759
	mov	r2, sp
	str	r3, [sp, #4]
	add	r5, sp, #4
	bic	r1, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r1, r1, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r1, #12]
	add	r1, sp, #16
	sub	r6, r4, #16
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L2761
.L2766:
	bl	schedule
.L2761:
	mov	r2, #2
	mov	r1, r5
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r3, [r4, #-24]
	tst	r3, #1
	beq	.L2766
	mov	r1, r5
	mov	r0, r6
	bl	finish_wait
.L2759:
	mov	r3, #1
	sub	r0, r4, #392
	str	r3, [r4, #-224]
	bl	rmnet_smd_start_rx
.L2751:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2763:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC239
	movt	r1, #:upper16:.LC239
	add	r0, r0, #32
	bl	dev_err
	ldrb	r3, [r4, #-136]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L2751
	sub	r0, r4, #216
	bl	platform_driver_register
	subs	r3, r0, #0
	moveq	r3, #1
	strbeq	r3, [r4, #-136]
	beq	.L2751
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC240
	movt	r1, #:upper16:.LC240
	ldr	r2, [r4, #-196]
	add	r0, r0, #32
	bl	dev_err
	b	.L2751
.L2765:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC241
	movt	r1, #:upper16:.LC241
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #-132]
	bl	smd_close
	b	.L2751
	.fnend
	.size	rmnet_smd_connect_work, .-rmnet_smd_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_read_w, %function
grmnet_ctrl_smd_read_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #32]
	.pad #36
	sub	sp, sp, #36
	add	r10, r3, #108
	str	r3, [sp, #4]
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	ldr	r0, [r4, #-52]
	cmp	r0, #0
	beq	.L2768
	mov	r3, sp
	bic	r9, r3, #8128
	bic	r9, r9, #63
.L2779:
	bl	smd_cur_packet_size
	subs	r7, r0, #0
	ble	.L2768
	mov	r1, r5
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	mov	r1, #208
	mov	r0, r7
	bl	__kmalloc
	subs	r8, r0, #0
	beq	.L2767
	mov	r5, #0
.L2777:
	ldr	r0, [r4, #-52]
	bl	smd_read_avail
	subs	fp, r0, #0
	bne	.L2770
	ldr	r3, [r4, #-52]
	cmp	r3, #0
	bne	.L2801
.L2771:
	movw	r0, #:lower16:.LC242
	ldr	r1, .L2805
	mov	r2, fp
	movt	r0, #:upper16:.LC242
	bl	printk
	mov	r0, r8
	bl	kfree
.L2767:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2801:
	ldr	r0, [r9, #12]
	movw	r3, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r3, #:upper16:autoremove_wake_function
	sub	r6, r4, #28
	str	fp, [sp, #12]
	str	r1, [sp, #24]
	str	r0, [sp, #16]
	str	r3, [sp, #20]
	str	r1, [sp, #28]
	b	.L2773
.L2802:
	ldr	r3, [r4, #-52]
	cmp	r3, #0
	beq	.L2772
	bl	schedule
.L2773:
	mov	r2, #2
	add	r1, sp, #12
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r0, [r4, #-52]
	bl	smd_read_avail
	subs	fp, r0, #0
	beq	.L2802
.L2772:
	add	r1, sp, #12
	mov	r0, r6
	bl	finish_wait
.L2770:
	cmp	fp, #0
	ldr	r3, [r4, #-52]
	blt	.L2771
	cmp	r3, #0
	beq	.L2771
	add	r1, fp, r5
	cmp	r1, r7
	bgt	.L2803
	mov	r2, fp
	mov	r0, r3
	add	r1, r8, r5
	bl	smd_read
	subs	r2, r0, #0
	ble	.L2804
	add	r5, r5, r2
	cmp	r7, r5
	bgt	.L2777
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #4]
	mov	r5, r0
	ldr	r0, [r3, #104]
	cmp	r0, #0
	beq	.L2778
	ldr	r3, [r0, #92]
	cmp	r3, #0
	beq	.L2778
	mov	r2, r7
	mov	r1, r8
	blx	r3
	ldr	r3, [r4, #44]
	add	r3, r3, #1
	str	r3, [r4, #44]
.L2778:
	mov	r0, r8
	bl	kfree
	ldr	r0, [r4, #-52]
	cmp	r0, #0
	bne	.L2779
.L2768:
	mov	r1, r5
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	b	.L2767
.L2804:
	movw	r0, #:lower16:.LC244
	ldr	r1, .L2805
	movt	r0, #:upper16:.LC244
	bl	printk
	mov	r0, r8
	bl	kfree
	b	.L2767
.L2803:
	movw	r0, #:lower16:.LC243
	ldr	r1, .L2805
	movt	r0, #:upper16:.LC243
	bl	printk
	mov	r0, r8
	bl	kfree
	b	.L2767
.L2806:
	.align	2
.L2805:
	.word	.LANCHOR3+1412
	.fnend
	.size	grmnet_ctrl_smd_read_w, .-grmnet_ctrl_smd_read_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fmbim_cmd_complete, %function
fmbim_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r8, [r1, #48]
	cmp	r6, #0
	beq	.L2825
	ldr	r2, [r1, #44]
	cmp	r2, #0
	blt	.L2826
	movw	r7, #:lower16:.LANCHOR2
	movw	r3, #2994
	movt	r7, #:upper16:.LANCHOR2
	mov	r5, r1
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L2827
.L2810:
	mov	r1, #32
	mov	r0, r8
	bl	mbim_alloc_ctrl_pkt
	subs	r4, r0, #0
	beq	.L2828
	movw	r3, #3018
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L2829
.L2812:
	ldr	r0, [r4], #8
	mov	r2, r8
	ldr	r1, [r5]
	add	r5, r6, #204
	bl	memcpy
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r0, r4
	add	r2, r6, #208
	ldr	r1, [r6, #212]
	bl	__list_add
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r3, #3042
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L2830
.L2813:
	add	r0, r6, #108
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
.L2827:
	ldrb	ip, [r6, #136]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC156
	mov	r3, r6
	movt	r1, #:upper16:.LC156
	ldr	r2, .L2831
	add	r0, r7, #2976
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L2810
.L2829:
	movw	r1, #:lower16:.LC248
	mov	r3, r8
	ldr	r2, .L2831
	movt	r1, #:upper16:.LC248
	ldr	r0, .L2831+4
	bl	__dynamic_pr_debug
	b	.L2812
.L2830:
	movw	r1, #:lower16:.LC249
	ldr	r2, .L2831
	movt	r1, #:upper16:.LC249
	ldr	r0, .L2831+8
	bl	__dynamic_pr_debug
	b	.L2813
.L2825:
	ldr	r1, .L2831
	movw	r0, #:lower16:.LC245
	movt	r0, #:upper16:.LC245
.L2824:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L2828:
	movw	r0, #:lower16:.LC247
	ldr	r1, .L2831
	movt	r0, #:upper16:.LC247
	b	.L2824
.L2826:
	ldr	r1, .L2831
	movw	r0, #:lower16:.LC246
	movt	r0, #:upper16:.LC246
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L2832:
	.align	2
.L2831:
	.word	.LANCHOR3+1436
	.word	.LANCHOR2+3000
	.word	.LANCHOR2+3024
	.fnend
	.size	fmbim_cmd_complete, .-fmbim_cmd_complete
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_disable, %function
conn_gadget_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, lr}
	.save {r4, r5, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC250
	.pad #12
	sub	sp, sp, #12
	ldr	r1, [r4, #84]
	movt	r0, #:upper16:.LC250
	bl	printk
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #3066
	ldr	r0, [r4, #100]
	movt	r3, #:upper16:.LANCHOR2
	mov	ip, #0
	ldrh	r1, [r3, r2]
	mov	r2, #1
	mov	r5, r3
	str	ip, [r4, #100]
	str	r2, [r4, #104]
	str	r0, [r4, #212]
	tst	r1, #4
	beq	.L2834
	ldr	r3, .L2840
	movw	r1, #:lower16:.LC251
	str	r2, [sp]
	movt	r1, #:upper16:.LC251
	ldr	r0, .L2840+4
	mov	r2, r3
	bl	__dynamic_pr_debug
.L2834:
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #200
	bl	__wake_up
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #144
	bl	__wake_up
	movw	r3, #3090
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L2833
	ldr	r2, .L2840
	movw	r1, #:lower16:.LC252
	ldr	r0, .L2840+8
	movt	r1, #:upper16:.LC252
	ldr	r3, [r4]
	add	sp, sp, #12
	@ sp needed
	pop	{r4, r5, lr}
	b	__dynamic_pr_debug
.L2833:
	add	sp, sp, #12
	@ sp needed
	pop	{r4, r5, pc}
.L2841:
	.align	2
.L2840:
	.word	.LANCHOR3+1456
	.word	.LANCHOR2+3048
	.word	.LANCHOR2+3072
	.fnend
	.size	conn_gadget_function_disable, .-conn_gadget_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_flush, %function
conn_gadget_flush:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	push	{r4, lr}
	.save {r4, lr}
	movt	r3, #:upper16:.LANCHOR1
	movw	r0, #:lower16:.LC253
	ldr	r4, [r3, #2484]
	movt	r0, #:upper16:.LC253
	bl	printk
	cmp	r4, #0
	bne	.L2843
	movw	r0, #:lower16:.LC254
	ldr	r1, .L2846
	movt	r0, #:upper16:.LC254
	bl	printk
	mvn	r0, #18
	pop	{r4, pc}
.L2843:
	mov	r1, #1
	add	r0, r4, #200
	mov	r2, r1
	mov	r3, #0
	str	r1, [r4, #216]
	mov	r1, #3
	bl	__wake_up
	mov	r0, #0
	pop	{r4, pc}
.L2847:
	.align	2
.L2846:
	.word	.LANCHOR3+1488
	.fnend
	.size	conn_gadget_flush, .-conn_gadget_flush
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_function_disable, %function
acc_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #3114
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR2
	str	lr, [sp, #4]
	mov	r4, r0
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L2854
.L2849:
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	ldr	r2, [r4, #92]
	bic	r3, r3, #3
	orr	r3, r3, #2
	mov	r0, r2
	strb	r3, [r4, #100]
	ldr	r3, [r2, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	add	r0, r4, #1664
	mov	r3, #0
	ldr	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	__wake_up
.L2854:
	ldr	r3, [r4, #84]
	movw	r2, #:lower16:.LC255
	movt	r2, #:upper16:.LC255
	ldr	r0, .L2855
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L2849
.L2856:
	.align	2
.L2855:
	.word	.LANCHOR2+3096
	.fnend
	.size	acc_function_disable, .-acc_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_out, %function
acc_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, #1
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r4, [r3, #2488]
	str	r2, [r4, #1696]
	ldr	r3, [r1, #44]
	cmn	r3, #108
	beq	.L2864
.L2858:
	add	r0, r4, #1664
	mov	r3, #0
	ldr	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	__wake_up
.L2864:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #3138
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L2865
.L2859:
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	bic	r3, r3, #3
	orr	r3, r3, #2
	strb	r3, [r4, #100]
	b	.L2858
.L2865:
	movw	r1, #:lower16:.LC256
	add	r0, r0, #3120
	movt	r1, #:upper16:.LC256
	bl	__dynamic_pr_debug
	b	.L2859
	.fnend
	.size	acc_complete_out, .-acc_complete_out
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_ctrlrequest, %function
mtp_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r2
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r3, [r2]	@ zero_extendqisi2
	.pad #16
	sub	sp, sp, #16
	ldrh	r8, [r2, #4]	@ unaligned
	ldrh	r9, [r2, #2]	@ unaligned
	ldrh	r6, [r2, #6]	@ unaligned
	cmp	r3, #128
	beq	.L2895
	and	r3, r3, #96
	cmp	r3, #64
	beq	.L2896
	cmp	r3, #32
	bne	.L2870
	movw	r7, #:lower16:.LANCHOR2
	movw	r1, #3186
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	movt	r7, #:upper16:.LANCHOR2
	movw	r2, #:lower16:.LANCHOR1
	ldrh	r1, [r7, r1]
	movt	r2, #:upper16:.LANCHOR1
	ldr	r10, [r2, #2500]
	tst	r1, #4
	bne	.L2897
.L2874:
	cmp	r3, #100
	beq	.L2898
	cmp	r3, #103
	bne	.L2870
	orrs	r3, r8, r9
	bne	.L2870
	ldr	r1, [r5, #4]
	mov	r2, #4
	movw	r3, #3234
	ldr	r8, [r1]
	strh	r2, [r8]	@ movhi
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L2899
.L2878:
	add	r4, r10, #88
	mov	r7, #4
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r10, #104]
	movw	r2, #8193
	movw	r3, #8217
	mov	r1, r0
	mov	r0, r4
	mov	r4, r7
	cmp	ip, #3
	movne	r3, r2
	strh	r3, [r8, #2]	@ movhi
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, r7
	movls	r6, #0
	movhi	r6, #1
.L2871:
	ldr	r3, [r5, #4]
	mov	r2, #32
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfi	r1, r6, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r5, #4]
	str	r7, [r3, #4]
	ldr	r3, [r5]
	ldr	r1, [r5, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L2900
.L2866:
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2898:
	orrs	r3, r8, r9
	bne	.L2870
	movw	r3, #3210
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L2901
.L2876:
	add	r4, r10, #88
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r10, #104]
	mov	r7, r0
	cmp	r3, #2
	beq	.L2902
.L2877:
	mov	r1, r7
	mov	r0, r4
	mov	r7, r6
	mov	r4, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r6, #0
	b	.L2871
.L2895:
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #6
	beq	.L2868
.L2870:
	mvn	r4, #94
	b	.L2866
.L2896:
	movw	r2, #:lower16:.LANCHOR2
	movw	r1, #3162
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	movt	r2, #:upper16:.LANCHOR2
	ldrh	r2, [r2, r1]
	tst	r2, #4
	bne	.L2903
.L2873:
	cmp	r3, #1
	bne	.L2870
	ldrsb	r3, [r4]
	cmp	r3, #0
	bge	.L2870
	sub	r8, r8, #4
	cmp	r8, #1
	bhi	.L2870
	ldr	r1, .L2904
	cmp	r6, #40
	ldr	r3, [r5, #4]
	movcc	r4, r6
	movcs	r4, #40
.L2894:
	mov	r2, r4
	ldr	r0, [r3]
	mov	r7, r4
	bl	memcpy
	cmp	r4, r6
	movge	r6, #0
	movlt	r6, #1
	b	.L2871
.L2900:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC261
	movt	r1, #:upper16:.LC261
	ldr	r2, .L2904+4
	add	r0, r0, #32
	bl	dev_err
	b	.L2866
.L2868:
	lsr	r3, r9, #8
	cmp	r3, #3
	bne	.L2870
	uxtb	r9, r9
	cmp	r9, #238
	bne	.L2870
	cmp	r6, #18
	ldr	r1, .L2904+8
	movcc	r4, r6
	movcs	r4, #18
	ldr	r3, [r5, #4]
	b	.L2894
.L2897:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC258
	add	r0, r7, #3168
	movt	r2, #:upper16:.LC258
	strd	r8, [sp]
	str	r6, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	b	.L2874
.L2899:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC260
	movt	r2, #:upper16:.LC260
	ldr	r0, .L2904+12
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L2878
.L2903:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC257
	strd	r8, [sp]
	movt	r2, #:upper16:.LC257
	ldr	r0, .L2904+16
	str	r6, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	b	.L2873
.L2902:
	mov	r8, #3
	add	r0, r10, #132
	mov	r1, r8
	mov	r3, #0
	mov	r2, #1
	str	r8, [r10, #104]
	bl	__wake_up
	mov	r1, r8
	add	r0, r10, #144
	mov	r3, #0
	mov	r2, #1
	bl	__wake_up
	b	.L2877
.L2901:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC259
	movt	r2, #:upper16:.LC259
	ldr	r0, .L2904+20
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L2876
.L2905:
	.align	2
.L2904:
	.word	.LANCHOR0+472
	.word	.LANCHOR3+1508
	.word	.LANCHOR0+452
	.word	.LANCHOR2+3216
	.word	.LANCHOR2+3144
	.word	.LANCHOR2+3192
	.fnend
	.size	mtp_function_ctrlrequest, .-mtp_function_ctrlrequest
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_disable, %function
mtp_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #3258
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L2912
.L2907:
	ldr	r0, [r4, #92]
	mov	r5, #0
	str	r5, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, r5
	add	r0, r4, #132
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L2912:
	ldr	r3, [r4, #84]
	movw	r2, #:lower16:.LC262
	movt	r2, #:upper16:.LC262
	ldr	r0, .L2913
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L2907
.L2914:
	.align	2
.L2913:
	.word	.LANCHOR2+3240
	.fnend
	.size	mtp_function_disable, .-mtp_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_complete_out, %function
mtp_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #2500]
	str	r2, [r0, #176]
	ldr	r3, [r1, #44]
	add	r0, r0, #132
	mov	r2, #1
	mov	r1, #3
	cmp	r3, #0
	movne	r3, #4
	strne	r3, [r0, #-28]
	mov	r3, #0
	b	__wake_up
	.fnend
	.size	mtp_complete_out, .-mtp_complete_out
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_setup, %function
ccid_function_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r2, [r0, #20]
	.pad #20
	sub	sp, sp, #20
	ldr	r3, [r0, #96]
	ldrh	lr, [r1, #4]	@ unaligned
	ldrh	r6, [r1, #2]	@ unaligned
	ldr	r5, [r2, #24]
	cmp	r3, #0
	ldrh	ip, [r1, #6]	@ unaligned
	ldr	r4, [r5, #4]
	beq	.L2927
	mov	r2, r1
	mov	r1, r0
	ldrh	r3, [r2]	@ unaligned
	movw	r0, #41218
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r0
	beq	.L2922
	movw	r0, #41219
	cmp	r3, r0
	beq	.L2923
	movw	r0, #8449
	cmp	r3, r0
	beq	.L2933
.L2924:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #3282
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	mvneq	r4, #94
	bne	.L2934
.L2920:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L2933:
	cmp	ip, #0
	bne	.L2924
	lsr	r3, r6, #8
	mov	lr, #1
	add	r0, r1, #128
	mov	r2, lr
	strb	lr, [r1, #140]
	mov	r4, ip
	strb	r6, [r1, #141]
	strb	r3, [r1, #142]
	mov	r3, ip
	strb	ip, [r1, #143]
	str	lr, [r1, #144]
	mov	r1, #3
	bl	__wake_up
	b	.L2920
.L2923:
	ldr	r3, [r4, #4]
	cmp	ip, r3
	bhi	.L2924
	movw	r3, #:lower16:.LANCHOR0
	ldr	r1, [r4]
	cmp	ip, #4
	movt	r3, #:upper16:.LANCHOR0
	movcc	r7, ip
	ldr	r3, [r3, #531]	@ unaligned
	movcs	r7, #4
	str	r3, [r1]
	b	.L2925
.L2922:
	ldr	r3, [r4, #4]
	cmp	ip, r3
	bhi	.L2924
	movw	r3, #:lower16:.LANCHOR0
	ldr	r1, [r4]
	cmp	ip, #4
	movt	r3, #:upper16:.LANCHOR0
	movcc	r7, ip
	ldr	r3, [r3, #522]	@ unaligned
	movcs	r7, #4
	str	r3, [r1]
.L2925:
	movw	r3, #:lower16:.LANCHOR2
	movw	r1, #3306
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r1]
	tst	r3, #4
	bne	.L2935
.L2926:
	str	r7, [r4, #4]
	ldr	r3, [r5]
	mov	r1, r4
	mov	r2, #32
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L2920
	movw	r0, #:lower16:.LC264
	mov	r1, r4
	movt	r0, #:upper16:.LC264
	bl	printk
	b	.L2920
.L2934:
	movw	r1, #:lower16:.LC24
	add	r0, r0, #3264
	stm	sp, {r6, lr}
	movt	r1, #:upper16:.LC24
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	mvn	r4, #94
	ldrb	r2, [r2]	@ zero_extendqisi2
	str	ip, [sp, #8]
	bl	__dynamic_pr_debug
	b	.L2920
.L2935:
	movw	r1, #:lower16:.LC263
	ldr	r0, .L2936
	str	r6, [sp]
	movt	r1, #:upper16:.LC263
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	ldrb	r2, [r2]	@ zero_extendqisi2
	str	lr, [sp, #4]
	str	ip, [sp, #8]
	bl	__dynamic_pr_debug
	b	.L2926
.L2927:
	mvn	r4, #106
	b	.L2920
.L2937:
	.align	2
.L2936:
	.word	.LANCHOR2+3288
	.fnend
	.size	ccid_function_setup, .-ccid_function_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_complete_out, %function
ccid_bulk_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #44]
	movw	r3, #:lower16:.LANCHOR1
	mov	ip, #1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #3592]
	cmp	r2, #0
	mov	r2, ip
	movne	r3, #1
	add	r0, r1, #160
	str	ip, [r1, #188]
	strne	r3, [r1, #148]
	mov	r3, #0
	mov	r1, #3
	b	__wake_up
	.fnend
	.size	ccid_bulk_complete_out, .-ccid_bulk_complete_out
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_disable, %function
adb_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LANCHOR2
	movw	r3, #3330
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r1, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r3, [r1, r3]
	tst	r3, #4
	bne	.L2949
.L2944:
	ldr	r0, [r4, #92]
	mov	r5, #0
	mov	r6, #1
	str	r5, [r4, #100]
	str	r6, [r4, #104]
	strb	r5, [r4, #160]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, r5
	mov	r2, r6
	ldr	r6, [sp, #8]
	add	r0, r4, #128
	mov	r1, #3
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L2949:
	ldr	r3, [r4, #84]
	add	r0, r1, #3312
	movw	r2, #:lower16:.LC265
	movt	r2, #:upper16:.LC265
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L2944
	.fnend
	.size	adb_function_disable, .-adb_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_complete_out, %function
adb_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3596]
	str	r2, [r0, #156]
	ldr	r3, [r1, #44]
	add	r0, r0, #128
	mov	r1, #3
	cmp	r3, #0
	cmnne	r3, #104
	mov	r3, #0
	strne	r2, [r0, #-24]
	mov	r2, #1
	b	__wake_up
	.fnend
	.size	adb_complete_out, .-adb_complete_out
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_command_complete, %function
rmnet_mux_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r8, [r4, #84]
	cmp	r2, #0
	blt	.L2961
	mov	r5, r1
	mov	r1, #32
	ldr	r7, [r5, #48]
	mov	r0, r7
	bl	rmnet_mux_alloc_ctrl_pkt
	subs	r6, r0, #0
	beq	.L2962
	add	r8, r4, #364
	mov	r0, r8
	bl	_raw_spin_lock
	ldr	r3, [r4, #352]
	cmp	r3, #0
	beq	.L2963
	ldr	r0, [r6], #8
	mov	r2, r7
	ldr	r1, [r5]
	bl	memcpy
	add	r2, r4, #312
	ldr	r1, [r4, #316]
	mov	r0, r6
	bl	__list_add
	ldr	r3, [r4, #332]
	mov	r0, r8
	add	r3, r3, #1
	str	r3, [r4, #332]
	bl	_raw_spin_unlock
	add	r0, r4, #320
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
.L2963:
	mov	r0, r8
	bl	_raw_spin_unlock
	ldr	r0, [r6]
	bl	kfree
	mov	r0, r6
	bl	kfree
	ldr	r3, [r4, #420]
	ldr	r1, .L2965
	ldr	r0, .L2965+4
	add	r3, r3, #1
	str	r3, [r4, #420]
	bl	___ratelimit
	cmp	r0, #0
	bne	.L2964
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2961:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC266
	movt	r1, #:upper16:.LC266
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_err
.L2962:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC267
	movt	r1, #:upper16:.LC267
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_err
.L2964:
	movw	r0, #:lower16:.LC268
	ldr	r1, .L2965
	movt	r0, #:upper16:.LC268
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	ldr	r2, [r4, #420]
	ldrd	r4, [sp]
	add	sp, sp, #24
	b	printk
.L2966:
	.align	2
.L2965:
	.word	.LANCHOR3+1524
	.word	.LANCHOR0+568
	.fnend
	.size	rmnet_mux_command_complete, .-rmnet_mux_command_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_setup, %function
acm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r1]	@ unaligned
	movw	r1, #8482
	ldr	r0, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldrh	r2, [r4, #2]	@ unaligned
	ldrh	r8, [r4, #4]	@ unaligned
	rev16	r3, r3
	ldrh	r9, [r4, #6]	@ unaligned
	uxth	r3, r3
	ldr	r7, [r0, #24]
	uxth	r10, r2
	cmp	r3, r1
	ldr	r5, [r7, #4]
	beq	.L2968
	movw	r2, #41249
	cmp	r3, r2
	beq	.L2969
	movw	r2, #8480
	cmp	r3, r2
	beq	.L2982
.L2977:
	mvn	r4, #94
.L2967:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2968:
	ldrb	r3, [r6, #144]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L2977
	movw	ip, #:lower16:.LANCHOR1
	mov	lr, #1
	ldr	r0, .L2984
	movt	ip, #:upper16:.LANCHOR1
	mov	r3, #0
	strh	r2, [r6, #168]	@ movhi
	mov	r1, lr
	mov	r2, lr
	mov	fp, r3
	str	lr, [ip, #2200]
	str	r10, [ip, #3600]
	bl	__wake_up
.L2971:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #3354
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L2983
.L2972:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	fp, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L2967
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC270
	mov	r3, r4
	ldrb	r2, [r6, #146]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC270
	add	r0, r0, #32
	bl	dev_err
	b	.L2967
.L2982:
	cmp	r9, #7
	bne	.L2977
	ldrb	r3, [r6, #144]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L2977
	ldr	r2, [r7]
	movw	r3, #:lower16:acm_complete_set_line_coding
	mov	fp, r9
	movt	r3, #:upper16:acm_complete_set_line_coding
	ldr	r2, [r2, #4]
	str	r6, [r2]
	str	r3, [r5, #28]
	b	.L2971
.L2969:
	ldrb	r3, [r6, #144]	@ zero_extendqisi2
	cmp	r3, r8
	bne	.L2977
	cmp	r9, #7
	add	r1, r6, #160
	ldr	r0, [r5]
	movcc	fp, r9
	movcs	fp, #7
	mov	r2, fp
	bl	memcpy
	b	.L2971
.L2983:
	ldr	r1, [r7]
	str	r10, [sp, #8]
	movw	r2, #:lower16:.LC269
	ldrb	lr, [r4, #1]	@ zero_extendqisi2
	str	r8, [sp, #12]
	movt	r2, #:upper16:.LC269
	ldrb	ip, [r4]	@ zero_extendqisi2
	str	r9, [sp, #16]
	ldr	r0, .L2984+4
	ldrb	r3, [r6, #146]	@ zero_extendqisi2
	add	r1, r1, #32
	stm	sp, {ip, lr}
	bl	__dynamic_dev_dbg
	b	.L2972
.L2985:
	.align	2
.L2984:
	.word	.LANCHOR1+2204
	.word	.LANCHOR2+3336
	.fnend
	.size	acm_setup, .-acm_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_event_notify, %function
rmnet_smd_event_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #2
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #48]
	beq	.L2987
	cmp	r1, #3
	beq	.L2988
	cmp	r1, #1
	beq	.L3003
.L2986:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2987:
	add	r1, r0, #44
	mov	r0, #0
	bl	_set_bit
	add	r0, r4, #52
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L3003:
	ldr	r3, [r0, #20]
	ldr	r3, [r3, #168]
	cmp	r3, #0
	beq	.L2986
	cmp	r5, #0
	ldr	r0, [r0]
	bne	.L3004
.L2991:
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L2986
	add	r4, r4, #4
	mov	r0, #0
	add	r1, r4, #4
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L2986
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__tasklet_schedule
.L2988:
	add	r1, r0, #44
	mov	r0, #0
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_clear_bit
.L3004:
	bl	smd_write_avail
	cmp	r0, r5
	bge	.L2992
.L3002:
	ldr	r0, [r4]
	b	.L2991
.L2992:
	add	r1, r4, #28
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r0, r4, #24
	bne	.L3002
	bl	__tasklet_schedule
	b	.L3002
	.fnend
	.size	rmnet_smd_event_notify, .-rmnet_smd_event_notify
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_notify, %function
grmnet_ctrl_smd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #3378
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r5, r0
	strd	r8, [sp, #16]
	mov	r4, r1
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L3044
.L3006:
	cmp	r4, #2
	beq	.L3008
	cmp	r4, #3
	beq	.L3009
	cmp	r4, #1
	beq	.L3045
.L3010:
	add	r0, r5, #24
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up
.L3008:
	add	r1, r5, #8
	mov	r0, #0
	bl	_set_bit
	cmp	r5, #0
	beq	.L3010
	ldr	r0, [r5, #104]
	cmp	r0, #0
	beq	.L3010
	ldr	r3, [r0, #108]
	cmp	r3, #0
	beq	.L3010
	blx	r3
	b	.L3010
.L3045:
	ldr	r0, [r5]
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L3011
	ldr	r2, [r5, #28]
	add	r3, r5, #28
	cmp	r2, r3
	beq	.L3046
.L3011:
	ldr	r0, [r5]
	bl	smd_write_avail
	cmp	r0, #0
	beq	.L3010
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r5, #68
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3604]
	bl	queue_work
	b	.L3010
.L3009:
	add	r1, r5, #8
	mov	r0, #0
	bl	_clear_bit
	cmp	r5, #0
	beq	.L3014
	ldr	r0, [r5, #104]
	cmp	r0, #0
	beq	.L3014
	ldr	r3, [r0, #104]
	cmp	r3, #0
	beq	.L3014
	blx	r3
.L3014:
	add	r8, r5, #108
	add	r7, r5, #40
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #40]
	mov	r9, r0
	cmp	r7, r4
	beq	.L3015
.L3016:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
	ldr	r4, [r5, #40]
	cmp	r7, r4
	bne	.L3016
.L3015:
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L3010
.L3044:
	sub	r2, r1, #1
	cmp	r2, #2
	movwhi	r3, #:lower16:.LC186
	movthi	r3, #:upper16:.LC186
	bhi	.L3007
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r3, r3, r2, lsl #2
	ldr	r3, [r3, #1552]
.L3007:
	movw	r1, #:lower16:.LC271
	ldr	r2, .L3047
	movt	r1, #:upper16:.LC271
	ldr	r0, .L3047+4
	bl	__dynamic_pr_debug
	b	.L3006
.L3046:
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r5, #52
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3604]
	bl	queue_work
	b	.L3011
.L3048:
	.align	2
.L3047:
	.word	.LANCHOR3+1564
	.word	.LANCHOR2+3360
	.fnend
	.size	grmnet_ctrl_smd_notify, .-grmnet_ctrl_smd_notify
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_disconnect_w, %function
gctrl_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #52]
	tst	r3, #1
	bne	.L3051
	bx	lr
.L3051:
	add	r1, r0, #52
	mov	r0, #0
	b	_clear_bit
	.fnend
	.size	gctrl_disconnect_w, .-gctrl_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_disconnect_w, %function
ghsic_data_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #76]
	tst	r3, #1
	bne	.L3054
	bx	lr
.L3054:
	add	r1, r0, #76
	mov	r0, #0
	b	_clear_bit
	.fnend
	.size	ghsic_data_disconnect_w, .-ghsic_data_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_remove, %function
ghsuart_ctrl_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #3402
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR2
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L3067
.L3056:
	ldr	r3, [r4, #4]
	movw	r2, #:lower16:.LANCHOR1
	mov	r1, #84
	movt	r2, #:upper16:.LANCHOR1
	mla	r3, r1, r3, r2
	ldr	r4, [r3, #1860]
	add	r6, r4, #8
	add	r5, r4, #88
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r4, #12]
	mov	r1, r0
	mov	r0, r6
	cmp	r4, #0
	beq	.L3068
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L3059
	mov	r0, r4
	blx	r3
.L3059:
	mov	r1, r5
	mov	r0, #0
	bl	_clear_bit
	mov	r1, r5
	mov	r0, #2
	bl	_clear_bit
.L3058:
	mov	r1, r5
	mov	r0, #1
	bl	_clear_bit
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3068:
	bl	_raw_spin_unlock_irqrestore
	b	.L3058
.L3067:
	movw	r1, #:lower16:.LC180
	ldr	r2, .L3069
	movt	r1, #:upper16:.LC180
	ldr	r0, .L3069+4
	ldr	r3, [r4]
	bl	__dynamic_pr_debug
	b	.L3056
.L3070:
	.align	2
.L3069:
	.word	.LANCHOR3+1588
	.word	.LANCHOR2+3384
	.fnend
	.size	ghsuart_ctrl_remove, .-ghsuart_ctrl_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_out_trigger, %function
f_midi_out_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #28]
	cmp	r1, #0
	ldr	r0, [r0, #12]
	ldr	r1, [r3, #200]
	add	r1, r1, #296
	beq	.L3072
	b	_set_bit
.L3072:
	b	_clear_bit
	.fnend
	.size	f_midi_out_trigger, .-f_midi_out_trigger
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_smd_notify, %function
rmnet_mux_smd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #2
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #176]
	beq	.L3074
	cmp	r1, #3
	beq	.L3075
	cmp	r1, #1
	beq	.L3090
.L3073:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3074:
	add	r1, r0, #172
	mov	r0, #0
	bl	_set_bit
	add	r0, r4, #180
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L3090:
	ldr	r3, [r0, #368]
	cmp	r3, #0
	beq	.L3073
	cmp	r5, #0
	ldr	r0, [r0, #128]
	bne	.L3091
.L3078:
	bl	smd_read_avail
	cmp	r0, #0
	beq	.L3073
	add	r1, r4, #136
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r0, r4, #132
	bne	.L3073
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__tasklet_schedule
.L3075:
	add	r1, r0, #172
	mov	r0, #0
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_clear_bit
.L3091:
	bl	smd_write_avail
	cmp	r0, r5
	bge	.L3079
.L3089:
	ldr	r0, [r4, #128]
	b	.L3078
.L3079:
	add	r1, r4, #156
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	add	r0, r4, #152
	bne	.L3089
	bl	__tasklet_schedule
	b	.L3089
	.fnend
	.size	rmnet_mux_smd_notify, .-rmnet_mux_smd_notify
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_init, %function
gsmd_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC272
	push	{r4, lr}
	.save {r4, lr}
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	movt	r0, #:upper16:.LC272
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmn	r0, #4096
	movt	r3, #:upper16:.LANCHOR1
	mov	r4, r3
	str	r0, [r3, #3608]
	bhi	.L3094
	ldr	ip, .L3101
	mov	r2, r0
	movw	r0, #:lower16:.LC273
	movt	r0, #:upper16:.LC273
	mov	r3, #0
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	str	r0, [r4, #3612]
	beq	.L3095
	cmn	r0, #4096
	bls	.L3094
.L3095:
	ldr	r0, [r4, #3608]
	bl	debugfs_remove
.L3094:
	mov	r3, #0
	mov	r0, r3
	strb	r3, [r4, #3616]
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L3102:
	.align	2
.L3101:
	.word	.LANCHOR3+1608
	.fnend
	.size	gsmd_ctrl_init, .-gsmd_ctrl_init
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_exit, %function
gsmd_ctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3612]
	bl	debugfs_remove
	ldr	r0, [r4, #3608]
	pop	{r4, lr}
	b	debugfs_remove
	.fnend
	.size	gsmd_ctrl_exit, .-gsmd_ctrl_exit
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_init, %function
gctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC274
	push	{r4, lr}
	.save {r4, lr}
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	movt	r0, #:upper16:.LC274
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmn	r0, #4096
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3620]
	bhi	.L3107
	ldr	ip, .L3114
	mov	r2, r0
	movw	r0, #:lower16:.LC273
	mov	r4, r3
	movt	r0, #:upper16:.LC273
	mov	r3, #0
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	str	r0, [r4, #3624]
	beq	.L3108
	cmn	r0, #4096
	bls	.L3107
.L3108:
	ldr	r0, [r4, #3620]
	bl	debugfs_remove
.L3107:
	mov	r0, #0
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L3115:
	.align	2
.L3114:
	.word	.LANCHOR3+1716
	.fnend
	.size	gctrl_init, .-gctrl_init
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gctrl_exit, %function
gctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3624]
	bl	debugfs_remove
	ldr	r0, [r4, #3620]
	pop	{r4, lr}
	b	debugfs_remove
	.fnend
	.size	gctrl_exit, .-gctrl_exit
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_init, %function
ghsic_data_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC275
	push	{r4, r5, lr}
	.save {r4, r5, lr}
	mov	r1, #0
	.pad #12
	sub	sp, sp, #12
	movt	r0, #:upper16:.LC275
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmn	r0, #4096
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3628]
	bhi	.L3120
	ldr	r5, .L3132
	mov	r2, r0
	movw	r0, #:lower16:.LC273
	mov	r4, r3
	movt	r0, #:upper16:.LC273
	mov	r3, #0
	mov	r1, #292
	str	r5, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	str	r0, [r4, #3632]
	beq	.L3123
	cmn	r0, #4096
	bhi	.L3123
	add	r5, r5, #108
	movw	r0, #:lower16:.LC276
	ldr	r2, [r4, #3628]
	movt	r0, #:upper16:.LC276
	mov	r3, #0
	mov	r1, #420
	str	r5, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	str	r0, [r4, #3636]
	beq	.L3123
	cmn	r0, #4096
	bls	.L3120
.L3123:
	ldr	r0, [r4, #3628]
	bl	debugfs_remove
.L3120:
	mov	r0, #0
	add	sp, sp, #12
	@ sp needed
	pop	{r4, r5, pc}
.L3133:
	.align	2
.L3132:
	.word	.LANCHOR3+1824
	.fnend
	.size	ghsic_data_init, .-ghsic_data_init
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_exit, %function
ghsic_data_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3632]
	bl	debugfs_remove
	ldr	r0, [r4, #3636]
	bl	debugfs_remove
	ldr	r0, [r4, #3628]
	pop	{r4, lr}
	b	debugfs_remove
	.fnend
	.size	ghsic_data_exit, .-ghsic_data_exit
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_init, %function
ghsuart_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC277
	push	{r4, lr}
	.save {r4, lr}
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	movt	r0, #:upper16:.LC277
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmp	r0, #0
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3532]
	beq	.L3137
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L3137
	ldr	ip, .L3149
	movw	r0, #:lower16:.LC273
	mov	r4, r3
	movt	r0, #:upper16:.LC273
	mov	r3, #0
	mov	r1, #420
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L3138
	cmn	r0, #4096
	movls	r0, #0
	bls	.L3136
.L3138:
	ldr	r0, [r4, #3532]
	bl	debugfs_remove
	mov	r3, #0
	str	r3, [r4, #3532]
.L3137:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #3426
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	mvneq	r0, #18
	beq	.L3136
	movw	r1, #:lower16:.LC278
	add	r0, r0, #3408
	movt	r1, #:upper16:.LC278
	bl	__dynamic_pr_debug
	mvn	r0, #18
.L3136:
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L3150:
	.align	2
.L3149:
	.word	.LANCHOR3+2040
	.fnend
	.size	ghsuart_ctrl_init, .-ghsuart_ctrl_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_init, %function
ghsuart_data_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC279
	push	{r4, lr}
	.save {r4, lr}
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	movt	r0, #:upper16:.LC279
	bl	debugfs_create_dir
	movw	r3, #:lower16:.LANCHOR1
	cmp	r0, #0
	movt	r3, #:upper16:.LANCHOR1
	str	r0, [r3, #3536]
	beq	.L3152
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L3152
	ldr	ip, .L3164
	movw	r0, #:lower16:.LC273
	mov	r4, r3
	movt	r0, #:upper16:.LC273
	mov	r3, #0
	mov	r1, #420
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L3153
	cmn	r0, #4096
	movls	r0, #0
	bls	.L3151
.L3153:
	ldr	r0, [r4, #3536]
	bl	debugfs_remove
.L3152:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #3450
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	mvneq	r0, #18
	beq	.L3151
	movw	r1, #:lower16:.LC280
	ldr	r0, .L3164+4
	movt	r1, #:upper16:.LC280
	bl	__dynamic_pr_debug
	mvn	r0, #18
.L3151:
	add	sp, sp, #8
	@ sp needed
	pop	{r4, pc}
.L3165:
	.align	2
.L3164:
	.word	.LANCHOR3+2148
	.word	.LANCHOR2+3432
	.fnend
	.size	ghsuart_data_init, .-ghsuart_data_init
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_init, %function
diag_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3176
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	movw	r0, #:lower16:.LC281
	str	lr, [sp, #4]
	movt	r0, #:upper16:.LC281
	mov	r1, #0
	.pad #8
	sub	sp, sp, #8
	str	r3, [r4, #3640]
	str	r3, [r4, #3644]
	bl	debugfs_create_dir
	cmp	r0, #0
	str	r0, [r4, #3540]
	beq	.L3168
	cmn	r0, #4096
	mov	r2, r0
	bls	.L3175
.L3168:
	mov	r0, #0
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3175:
	ldr	ip, .L3176+4
	movw	r0, #:lower16:.LC273
	mov	r3, #0
	movt	r0, #:upper16:.LC273
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L3170
	cmn	r0, #4096
	bls	.L3168
.L3170:
	ldr	r0, [r4, #3540]
	bl	debugfs_remove
	mov	r3, #0
	str	r3, [r4, #3540]
	b	.L3168
.L3177:
	.align	2
.L3176:
	.word	.LANCHOR1+3640
	.word	.LANCHOR3+2256
	.fnend
	.size	diag_function_init, .-diag_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_free_buf, %function
rmnet_sdio_free_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r7, r0, #188
	strd	r8, [sp, #16]
	mov	r9, #0
	strd	r10, [sp, #24]
	mov	r10, r0
	mov	r0, r7
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave
	str	r9, [r4, #324]
	str	r9, [r4, #352]
	str	r9, [r4, #356]
	str	r9, [r4, #360]
	str	r9, [r4, #364]
	str	r9, [r4, #368]
	ldr	r5, [r10, #132]!
	str	r0, [sp, #4]
	cmp	r5, r10
	ldr	r6, [r5]
	beq	.L3179
.L3180:
	mov	r0, r5
	sub	r8, r5, #36
	bl	list_del
	ldr	r3, [r4, #140]
	mov	r0, #0
	sub	r3, r3, #1
	str	r3, [r4, #140]
	str	r9, [r5, #-36]
	ldr	fp, [r4, #88]
	mov	r5, r6
	bl	kfree
	mov	r1, r8
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r10, r6
	ldr	r6, [r6]
	bne	.L3180
.L3179:
	mov	r9, r4
	ldr	r5, [r9, #160]!
	cmp	r5, r9
	ldr	r6, [r5]
	beq	.L3181
	mov	r10, #0
.L3182:
	mov	r0, r5
	sub	r8, r5, #36
	bl	list_del
	ldr	r3, [r4, #168]
	mov	r0, #0
	sub	r3, r3, #1
	str	r3, [r4, #168]
	str	r10, [r5, #-36]
	ldr	fp, [r4, #92]
	mov	r5, r6
	bl	kfree
	mov	r1, r8
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r9, r6
	ldr	r6, [r6]
	bne	.L3182
.L3181:
	mov	r9, r4
	ldr	r5, [r9, #108]!
	cmp	r5, r9
	ldr	r6, [r5]
	beq	.L3183
.L3184:
	mov	r0, r5
	sub	r10, r5, #8
	bl	list_del
	ldr	r3, [r4, #116]
	sub	r3, r3, #1
	str	r3, [r4, #116]
	ldr	r0, [r5, #-8]
	mov	r5, r6
	bl	kfree
	mov	r0, r10
	bl	kfree
	cmp	r9, r6
	ldr	r6, [r6]
	bne	.L3184
.L3183:
	mov	r9, r4
	ldr	r5, [r9, #120]!
	cmp	r5, r9
	ldr	r6, [r5]
	beq	.L3185
.L3186:
	mov	r0, r5
	sub	r10, r5, #8
	bl	list_del
	ldr	r3, [r4, #128]
	sub	r3, r3, #1
	str	r3, [r4, #128]
	ldr	r0, [r5, #-8]
	mov	r5, r6
	bl	kfree
	mov	r0, r10
	bl	kfree
	cmp	r9, r6
	ldr	r6, [r6]
	bne	.L3186
.L3185:
	ldr	r3, [r4, #144]
	add	r5, r4, #144
	cmp	r5, r3
	beq	.L3191
	cmp	r3, #0
	beq	.L3191
	mov	r10, #0
	mov	fp, #0
.L3190:
	ldr	r2, [r4, #152]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #152]
	ldm	r3, {r1, r2}
	strd	r10, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #144]
	cmp	r3, r5
	beq	.L3191
	cmp	r3, #0
	bne	.L3190
.L3191:
	ldr	r3, [r4, #172]
	add	r5, r4, #172
	cmp	r3, r5
	beq	.L3188
	cmp	r3, #0
	beq	.L3188
	mov	r10, #0
	mov	fp, #0
.L3193:
	ldr	r2, [r4, #180]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #180]
	ldm	r3, {r1, r2}
	strd	r10, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #172]
	cmp	r3, r5
	beq	.L3188
	cmp	r3, #0
	bne	.L3193
.L3188:
	ldrd	r4, [r4, #96]
	ldr	r0, [r5]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r1, [sp, #4]
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_sdio_free_buf, .-rmnet_sdio_free_buf
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_complete_epin, %function
rmnet_sdio_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r4, [r0]
	ldr	r2, [r1, #44]
	ldr	r6, [r1, #32]
	cmn	r2, #104
	beq	.L3211
	cmp	r2, #0
	beq	.L3211
	cmn	r2, #108
	beq	.L3211
	ldr	r3, [r4, #84]
	movw	r1, #:lower16:.LC228
	movt	r1, #:upper16:.LC228
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L3211:
	add	r7, r4, #188
	add	r8, r4, #132
	mov	r0, r7
	bl	_raw_spin_lock
	mov	r2, r8
	add	r0, r5, #36
	ldr	r1, [r4, #136]
	bl	__list_add
	ldr	r3, [r4, #140]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #140]
	bl	_raw_spin_unlock
	mov	r0, r6
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #192]
	cmp	r3, #0
	beq	.L3210
	ldr	r3, [r4, #316]
	tst	r3, #2
	bne	.L3247
.L3210:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3247:
	ldr	r3, [r4, #84]
	mov	r0, r7
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #132]
	str	r0, [sp]
	cmp	r8, r3
	beq	.L3214
	ldr	r5, [r4, #144]
	add	r10, r4, #144
	cmp	r5, r10
	beq	.L3214
.L3246:
	cmp	r5, #0
	beq	.L3214
	ldr	r3, [r4, #152]
	mov	r1, #0
	mov	r0, #0
	sub	r3, r3, #1
	str	r3, [r4, #152]
	ldrd	r2, [r5]
	strd	r0, [r5]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r6, [r4, #132]
	str	r5, [r6, #-4]
	ldr	r3, [r5, #172]
	mov	r0, r6
	sub	r9, r6, #36
	str	r3, [r6, #-36]
	ldr	r3, [r5, #80]
	str	r3, [r6, #-32]
	bl	list_del
	ldr	r3, [r4, #140]
	mov	r0, r7
	sub	r3, r3, #1
	str	r3, [r4, #140]
	bl	_raw_spin_unlock
	ldr	r0, [r4, #92]
	mov	r1, r9
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	fp, #0
	bne	.L3248
	ldr	r2, [r4, #132]
	ldr	r3, [r4, #352]
	cmp	r8, r2
	add	r3, r3, #1
	str	r3, [r4, #352]
	beq	.L3214
	ldr	r5, [r4, #144]
	cmp	r5, r10
	bne	.L3246
.L3214:
	ldr	r1, [sp]
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L3248:
	ldr	r0, [r4, #192]
	cmp	r0, #0
	beq	.L3219
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LC231
	mov	r2, fp
	movt	r1, #:upper16:.LC231
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r8
	mov	r0, r6
	ldr	r1, [r4, #136]
	bl	__list_add
	ldr	r3, [r4, #140]
	ldr	r2, [r4, #144]
	add	r3, r3, #1
	str	r3, [r4, #140]
	stm	r5, {r2, r10}
	str	r5, [r4, #144]
	str	r5, [r2, #4]
	ldr	r3, [r4, #152]
	add	r3, r3, #1
	str	r3, [r4, #152]
	b	.L3214
.L3219:
	str	r0, [r6, #-36]
	ldr	r4, [r4, #92]
	bl	kfree
	mov	r1, r9
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r5
	bl	dev_kfree_skb_any
	b	.L3214
	.fnend
	.size	rmnet_sdio_complete_epin, .-rmnet_sdio_complete_epin
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_data_rx_work, %function
rmnet_sdio_data_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #-152]
	ldr	r3, [r0, #80]
	tst	r3, #2
	beq	.L3256
	sub	r6, r0, #48
	mov	r4, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r3, r4
	mov	r8, r0
	ldr	r5, [r3, #-64]!
	cmp	r5, r3
	beq	.L3251
	cmp	r5, #0
	beq	.L3251
	ldr	ip, [r4, #-56]
	mov	r2, #0
	mov	r3, #0
	mov	r1, r0
	mov	r0, r6
	sub	ip, ip, #1
	str	ip, [r4, #-56]
	ldr	lr, [r5]
	ldr	ip, [r5, #4]
	strd	r2, [r5]
	str	ip, [lr, #4]
	str	lr, [ip]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC283
	movt	r1, #:upper16:.LC283
	add	r0, r0, #32
	bl	dev_err
	mov	r0, r5
	bl	dev_kfree_skb_any
.L3251:
	mov	r1, r8
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L3256:
	movw	r0, #:lower16:.LC282
	ldr	r1, .L3257
	movt	r0, #:upper16:.LC282
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L3258:
	.align	2
.L3257:
	.word	.LANCHOR3+2364
	.fnend
	.size	rmnet_sdio_data_rx_work, .-rmnet_sdio_data_rx_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_write_data_tohost, %function
gbam_write_data_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r7, r0, #8
	mov	r0, r7
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #12]
	str	r0, [sp, #12]
	cmp	r3, #0
	moveq	r1, r0
	beq	.L3277
	ldr	r2, [r5, #28]
	add	r1, r5, #28
	ldr	r9, [r3, #84]
	str	r1, [sp]
	cmp	r2, r1
	beq	.L3262
	ldr	r4, [r5, #36]
	add	r3, r5, #36
	str	r3, [sp, #4]
	cmp	r4, r3
	beq	.L3262
	cmp	r4, #0
	beq	.L3262
	movw	r8, #:lower16:.LANCHOR1
	movw	fp, #:lower16:.LANCHOR0
	movt	fp, #:upper16:.LANCHOR0
	movt	r8, #:upper16:.LANCHOR1
	str	fp, [sp, #8]
.L3264:
	ldr	r1, [r5, #44]
	mov	r10, #0
	mov	fp, #0
	ldr	r3, [r8, #3648]
	mov	r2, #1
	sub	r1, r1, #1
	add	r3, r3, r2
	str	r1, [r5, #44]
	ldrd	r0, [r4]
	strd	r10, [r4]
	str	r3, [r8, #3648]
	str	r1, [r0, #4]
	str	r0, [r1]
	ldr	r6, [r5, #28]
	ldr	r1, [sp, #8]
	str	r4, [r6, #-4]
	ldr	r0, [r4, #172]
	sub	r10, r6, #36
	str	r0, [r6, #-36]
	ldr	r0, [r4, #80]
	str	r0, [r6, #-32]
	ldr	r0, [r1, #592]
	cmp	r3, r0
	mov	r0, r6
	moveq	r2, #0
	moveq	r3, r2
	streq	r3, [r8, #3648]
	ldrb	r3, [r6, #-10]	@ zero_extendqisi2
	bfi	r3, r2, #0, #1
	orr	r3, r3, #2
	strb	r3, [r6, #-10]
	bl	list_del
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r3, [r9, #8]
	mov	r1, r10
	mov	r2, #32
	mov	r0, r9
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	r10, #0
	bne	.L3278
	ldr	r1, [sp]
	ldr	r2, [r5, #28]
	ldr	r3, [r5, #264]
	cmp	r2, r1
	add	r3, r3, #1
	str	r3, [r5, #264]
	beq	.L3262
	ldr	r3, [sp, #4]
	ldr	r4, [r5, #36]
	cmp	r4, r3
	beq	.L3262
	cmp	r4, #0
	bne	.L3264
.L3262:
	ldr	r1, [sp, #12]
.L3277:
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L3278:
	movw	r0, #:lower16:.LC284
	mov	r2, r10
	ldr	r1, .L3279
	movt	r0, #:upper16:.LC284
	bl	printk
	mov	r0, r6
	ldr	r1, [sp]
	ldr	r2, [r5, #28]
	bl	__list_add
	mov	r0, r4
	bl	dev_kfree_skb_any
	b	.L3262
.L3280:
	.align	2
.L3279:
	.word	.LANCHOR3+2388
	.fnend
	.size	gbam_write_data_tohost, .-gbam_write_data_tohost
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_write_data_tohost_w, %function
gbam_write_data_tohost_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #-20]
	b	gbam_write_data_tohost
	.fnend
	.size	gbam_write_data_tohost_w, .-gbam_write_data_tohost_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_epin_complete, %function
gbam_epin_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
	ldr	r2, [r1, #44]
	ldr	r7, [r1, #32]
	cmn	r2, #104
	beq	.L3283
	cmp	r2, #0
	bne	.L3294
.L3284:
	mov	r0, r7
	bl	dev_kfree_skb_any
	cmp	r6, #0
	beq	.L3282
	add	r5, r6, #8
	mov	r0, r5
	bl	_raw_spin_lock
	add	r0, r4, #36
	add	r2, r6, #28
	ldr	r1, [r6, #32]
	bl	__list_add
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r6, #96
	ldrd	r4, [sp]
	movt	r3, #:upper16:.LANCHOR1
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r0, [r3, #3652]
	b	queue_work
.L3294:
	cmn	r2, #108
	beq	.L3283
	movw	r0, #:lower16:.LC285
	ldr	r1, .L3295
	movt	r0, #:upper16:.LC285
	bl	printk
	b	.L3284
.L3283:
	mov	r0, r7
	bl	dev_kfree_skb_any
	ldr	r3, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	r3, [r3, #12]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L3282:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3296:
	.align	2
.L3295:
	.word	.LANCHOR3+2412
	.fnend
	.size	gbam_epin_complete, .-gbam_epin_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_receive, %function
ghsic_data_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	subs	r4, r0, #0
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	beq	.L3298
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L3298
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #3474
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L3313
.L3301:
	add	r6, r4, #48
	add	r7, r4, #136
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #36]
	add	r1, r4, #32
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	mov	r8, r0
	stm	r5, {r1, r3}
	str	r5, [r3]
	ldr	r3, [r4, #40]
	ldr	r1, [r2, #596]
	str	r5, [r4, #36]
	add	r3, r3, #1
	cmp	r1, #0
	str	r3, [r4, #40]
	beq	.L3302
	ldr	r2, [r2, #600]
	cmp	r2, r3
	bls	.L3314
.L3302:
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r1, r7
	ldr	r0, [r4, #84]
	bl	queue_work
	mov	r0, #0
.L3297:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3313:
	ldr	ip, [r5, #80]
	movw	r1, #:lower16:.LC286
	mov	r3, r4
	movt	r1, #:upper16:.LC286
	ldr	r2, .L3315
	add	r0, r0, #3456
	str	ip, [sp, #4]
	ldr	ip, [r4]
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L3301
.L3298:
	mov	r0, r5
	bl	dev_kfree_skb_any
	mvn	r0, #106
	b	.L3297
.L3314:
	add	r1, r4, #164
	mov	r0, #2
	bl	_set_bit
	ldr	r3, [r4, #196]
	mov	r1, r8
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #196]
	bl	_raw_spin_unlock_irqrestore
	mov	r1, r7
	ldr	r0, [r4, #84]
	bl	queue_work
	mvn	r0, #15
	b	.L3297
.L3316:
	.align	2
.L3315:
	.word	.LANCHOR3+2432
	.fnend
	.size	ghsic_data_receive, .-ghsic_data_receive
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_start_xmit, %function
eth_start_xmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	add	r7, r1, #1152
	mov	r6, r0
	mov	r0, r7
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1156]
	mov	r1, r0
	cmp	r3, #0
	beq	.L3378
	ldrh	r9, [r3, #98]
	mov	r0, r7
	ldr	r5, [r3, #88]
	ldrb	r3, [r3, #124]	@ zero_extendqisi2
	str	r3, [sp, #20]
	str	r5, [sp, #28]
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	beq	.L3319
	add	r5, r4, #1168
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #20]
	str	r0, [sp, #24]
	cmp	r3, #0
	beq	.L3322
	ldr	r8, [r4, #1200]
	cmp	r8, #0
	beq	.L3379
.L3322:
	mov	r0, r5
	ldr	r1, [sp, #24]
	bl	_raw_spin_unlock_irqrestore
	tst	r9, #1
	bne	.L3327
	ldr	r2, [r6, #172]
	ldrb	r3, [r2]	@ zero_extendqisi2
	tst	r3, #1
	bne	.L3380
.L3327:
	mov	r0, r5
	add	r9, r7, #20
	bl	_raw_spin_lock_irqsave
	ldr	r8, [r4, #1172]
	mov	r10, r0
	cmp	r9, r8
	beq	.L3381
	mov	r0, r8
	sub	fp, r8, #36
	bl	list_del
	ldr	r3, [r4, #1172]
	cmp	r9, r3
	beq	.L3382
.L3330:
	mov	r1, r10
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1232]
	mov	r10, r0
	cmp	r3, #0
	beq	.L3332
	ldr	r0, [r4, #1156]
	cmp	r0, #0
	beq	.L3333
	mov	r1, r6
	blx	r3
	mov	r6, r0
.L3333:
	cmp	r6, #0
	beq	.L3383
.L3332:
	ldr	r3, [sp, #20]
	cmp	r3, #0
	beq	.L3335
	movw	r2, #:lower16:.LANCHOR2
	movw	r1, #3498
	ldr	r3, [r8, #-32]
	movt	r2, #:upper16:.LANCHOR2
	ldr	ip, [r4, #1220]
	ldrh	r2, [r2, r1]
	tst	r2, #4
	bne	.L3384
.L3336:
	ldr	r0, [r8, #-36]
	mov	r2, ip
	ldr	r1, [r4, #1156]
	add	r0, r0, r3
	ldr	r1, [r1, #144]
	bl	memcpy
	ldr	r3, [r8, #-32]
	mov	r1, r10
	mov	r0, r7
	ldr	r2, [r4, #1220]
	add	r3, r3, r2
	str	r3, [r8, #-32]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r8, #-36]
	ldr	r3, [r8, #-32]
	ldr	r2, [r6, #80]
	ldr	r1, [r6, #172]
	add	r0, r0, r3
	bl	memcpy
	ldr	r10, [r8, #-32]
	mov	r0, r6
	ldr	r3, [r6, #80]
	add	r10, r10, r3
	str	r10, [r8, #-32]
	bl	dev_kfree_skb_any
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1196]
	mov	r7, r0
	ldr	r2, [r4, #1228]
	add	r3, r3, #1
	cmp	r3, r2
	str	r3, [r4, #1196]
	ldr	r3, [r4, #1192]
	bcs	.L3338
	cmp	r3, #5
	bgt	.L3385
.L3338:
	add	r3, r3, #1
	mov	r2, #0
	mov	r1, r7
	mov	r0, r5
	str	r3, [r4, #1192]
	str	r2, [r4, #1196]
	bl	_raw_spin_unlock_irqrestore
.L3339:
	ldr	r3, [r4, #1156]
	ldrb	r2, [r3, #104]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L3351
	ldr	r3, [r3, #112]
	cmp	r3, r10
	beq	.L3386
.L3351:
	mov	r2, #1
.L3340:
	ldrb	r3, [r8, #-10]	@ zero_extendqisi2
	bfi	r3, r2, #1, #1
	uxtb	r2, r3
	strb	r3, [r8, #-10]
	tst	r2, #2
	beq	.L3341
	ldrb	r3, [r4, #1276]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L3341
	ldr	r3, [sp, #28]
	ldrh	r1, [r3, #20]
	sdiv	r3, r10, r1
	mls	r3, r1, r3, r10
	cmp	r3, #0
	bne	.L3341
	bfi	r2, r3, #1, #1
	add	r10, r10, #1
	strb	r2, [r8, #-10]
.L3341:
	str	r10, [r8, #-32]
	ldr	r3, [r4, #1164]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bls	.L3342
	ldr	r3, [r3, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	beq	.L3387
.L3342:
	ldrb	r3, [r8, #-10]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r8, #-10]
.L3344:
	ldr	r0, [sp, #28]
	mov	r1, fp
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L3345
	movw	r3, #:lower16:jiffies
	movt	r3, #:upper16:jiffies
	ldr	r3, [r3]
	str	r3, [r4, #604]
.L3317:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3380:
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	ldrb	ip, [r2, #2]	@ zero_extendqisi2
	ldrb	r0, [r2, #3]	@ zero_extendqisi2
	and	r3, r3, r1
	ldrb	r1, [r2, #4]	@ zero_extendqisi2
	ldrb	r2, [r2, #5]	@ zero_extendqisi2
	and	r3, r3, ip
	and	r3, r3, r0
	and	r3, r3, r1
	and	r3, r3, r2
	cmp	r3, #255
	moveq	r3, #8
	movne	r3, #2
	tst	r3, r9
	bne	.L3327
.L3319:
	mov	r0, r6
	bl	dev_kfree_skb_any
	mov	r0, #0
	b	.L3317
.L3382:
	ldr	r1, [r4, #576]
	cmp	r1, #0
	beq	.L3388
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
	b	.L3330
.L3335:
	mov	r1, r10
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r10, [r6, #80]
	ldr	r3, [r6, #172]
	str	r3, [r8, #-36]
	str	r6, [r8, #-4]
	b	.L3339
.L3378:
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	dev_kfree_skb_any
	mov	r0, #0
	b	.L3317
.L3345:
	ldr	r3, [sp, #20]
	cmp	r3, #0
	movne	r3, #0
	strne	r3, [r8, #-32]
	beq	.L3389
.L3334:
	ldr	r2, [r4, #1160]
	mov	r0, r5
	ldr	r3, [r2, #260]
	add	r3, r3, #1
	str	r3, [r2, #260]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1172]
	mov	r6, r0
	cmp	r9, r3
	beq	.L3390
.L3346:
	mov	r2, r9
	mov	r0, r8
	ldr	r1, [r4, #1176]
	bl	__list_add
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L3317
.L3379:
	ldr	r1, [r4, #1160]
	add	r10, r7, #20
	ldr	fp, [r4, #1172]
	ldr	r2, [r4, #1228]
	ldr	r1, [r1, #356]
	cmp	fp, r10
	add	r1, r1, #80
	mul	r2, r2, r1
	str	r2, [r4, #1200]
	bne	.L3326
	b	.L3322
.L3323:
	str	r8, [fp, #-4]
	ldr	fp, [fp]
	cmp	fp, r10
	beq	.L3322
.L3326:
	ldr	r3, [fp, #-36]
	cmp	r3, #0
	bne	.L3323
	movw	r1, #32800
	ldr	r0, [r4, #1200]
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [fp, #-36]
	bne	.L3323
	ldr	r6, [r4, #1172]
	str	r0, [r4, #1200]
	cmp	r6, r10
	beq	.L3325
	mov	r4, r0
.L3324:
	ldr	r0, [r6, #-36]
	bl	kfree
	str	r4, [r6, #-36]
	ldr	r6, [r6]
	cmp	r6, r10
	bne	.L3324
.L3325:
	mov	r0, r5
	ldr	r1, [sp, #24]
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #11
	b	.L3317
.L3387:
	movw	r1, #:lower16:.LANCHOR0
	ldr	r2, [r4, #1188]
	movt	r1, #:upper16:.LANCHOR0
	ldr	r1, [r1, #604]
	add	r2, r2, #1
	cmp	r2, r1, lsr #1
	str	r2, [r4, #1188]
	beq	.L3391
	ldrb	r3, [r8, #-10]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r8, #-10]
	b	.L3344
.L3386:
	ldr	r3, [sp, #28]
	ldrh	r3, [r3, #20]
	sdiv	r2, r10, r3
	mls	r2, r3, r2, r10
	adds	r2, r2, #0
	movne	r2, #1
	b	.L3340
.L3389:
	mov	r0, r6
	bl	dev_kfree_skb_any
	b	.L3334
.L3381:
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #16
	b	.L3317
.L3390:
	ldr	r1, [r4, #576]
	mov	r0, #0
	add	r1, r1, #80
	bl	_clear_bit
	b	.L3346
.L3385:
	mov	r1, r9
	mov	r0, r8
	ldr	r2, [r4, #1172]
	bl	__list_add
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L3317
.L3383:
	mov	r1, r10
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L3334
.L3391:
	ldrb	r2, [r8, #-10]	@ zero_extendqisi2
	bfi	r2, r3, #0, #1
	strb	r2, [r8, #-10]
	str	r3, [r4, #1188]
	b	.L3344
.L3384:
	ldr	lr, [r6, #84]
	movw	r1, #:lower16:.LC287
	movt	r1, #:upper16:.LC287
	ldr	r2, .L3392
	ldr	r0, .L3392+4
	str	lr, [sp, #8]
	ldr	lr, [r6, #80]
	stm	sp, {ip, lr}
	bl	__dynamic_pr_debug
	ldr	r3, [r8, #-32]
	ldr	ip, [r4, #1220]
	b	.L3336
.L3388:
	movw	r0, #:lower16:.LC101
	movw	r1, #1847
	movt	r0, #:upper16:.LC101
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC102
	movt	r0, #:upper16:.LC102
	bl	printk
	b	.L3330
.L3393:
	.align	2
.L3392:
	.word	.LANCHOR3+2452
	.word	.LANCHOR2+3480
	.fnend
	.size	eth_start_xmit, .-eth_start_xmit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_disconnect_work, %function
rmnet_mux_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #-20]
	cmp	r3, #3
	beq	.L3432
.L3395:
	sub	r5, r4, #16
	sub	r7, r4, #188
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #-188]
	mov	r8, r0
	cmp	r7, r6
	beq	.L3396
	mov	r9, #0
.L3397:
	mov	r0, r6
	sub	r10, r6, #36
	bl	list_del
	str	r9, [r6, #-36]
	ldr	r6, [r4, #-292]
	mov	r0, #0
	bl	kfree
	mov	r1, r10
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [r4, #-188]
	cmp	r7, r6
	bne	.L3397
.L3396:
	ldr	r6, [r4, #-164]
	sub	r7, r4, #164
	cmp	r7, r6
	beq	.L3398
	mov	r9, #0
.L3399:
	mov	r0, r6
	sub	r10, r6, #36
	bl	list_del
	str	r9, [r6, #-36]
	ldr	r6, [r4, #-288]
	mov	r0, #0
	bl	kfree
	mov	r1, r10
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [r4, #-164]
	cmp	r7, r6
	bne	.L3399
.L3398:
	ldr	r3, [r4, #-180]
	sub	r9, r4, #180
	cmp	r3, r9
	beq	.L3400
	cmp	r3, #0
	beq	.L3400
	mov	r6, #0
	mov	r7, #0
.L3401:
	ldr	r2, [r4, #-172]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #-172]
	ldm	r3, {r1, r2}
	strd	r6, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #-180]
	cmp	r3, r9
	beq	.L3400
	cmp	r3, #0
	bne	.L3401
.L3400:
	ldr	r3, [r4, #-156]
	sub	r9, r4, #156
	cmp	r3, r9
	beq	.L3403
	cmp	r3, #0
	beq	.L3403
	mov	r6, #0
	mov	r7, #0
.L3404:
	ldr	r2, [r4, #-148]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #-148]
	ldm	r3, {r1, r2}
	strd	r6, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #-156]
	cmp	r3, r9
	beq	.L3403
	cmp	r3, #0
	bne	.L3404
.L3403:
	ldr	r6, [r4, #-276]
	sub	r7, r4, #276
	cmp	r7, r6
	beq	.L3406
.L3407:
	mov	r0, r6
	sub	r10, r6, #36
	bl	list_del
	ldr	r9, [r4, #-292]
	ldr	r0, [r6, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r9, #8]
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [r4, #-276]
	cmp	r7, r6
	bne	.L3407
.L3406:
	ldr	r6, [r4, #-268]
	sub	r7, r4, #268
	cmp	r7, r6
	beq	.L3408
.L3409:
	mov	r0, r6
	sub	r10, r6, #36
	bl	list_del
	ldr	r9, [r4, #-288]
	ldr	r0, [r6, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r9, #8]
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [r4, #-268]
	cmp	r7, r6
	bne	.L3409
.L3408:
	ldr	r6, [r4, #-260]
	sub	r7, r4, #260
	cmp	r7, r6
	beq	.L3410
.L3411:
	mov	r0, r6
	sub	r10, r6, #36
	bl	list_del
	ldr	r9, [r4, #-288]
	ldr	r0, [r6, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r9, #8]
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [r4, #-260]
	cmp	r7, r6
	bne	.L3411
.L3410:
	ldr	r6, [r4, #-68]
	sub	r7, r4, #68
	cmp	r7, r6
	beq	.L3412
.L3413:
	mov	r0, r6
	sub	r9, r6, #8
	bl	list_del
	ldr	r0, [r6, #-8]
	bl	kfree
	mov	r0, r9
	bl	kfree
	ldr	r6, [r4, #-68]
	ldr	r3, [r4, #-48]
	cmp	r7, r6
	sub	r3, r3, #1
	str	r3, [r4, #-48]
	bne	.L3413
.L3412:
	ldr	r6, [r4, #-44]
	sub	r7, r4, #44
	cmp	r7, r6
	beq	.L3414
.L3415:
	mov	r0, r6
	sub	r9, r6, #8
	bl	list_del
	ldr	r0, [r6, #-8]
	bl	kfree
	mov	r0, r9
	bl	kfree
	ldr	r6, [r4, #-44]
	ldr	r3, [r4, #-36]
	cmp	r7, r6
	sub	r3, r3, #1
	str	r3, [r4, #-36]
	bne	.L3415
.L3414:
	mov	r1, r8
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r1, #0
	sub	r0, r4, #60
	mov	r3, r1
	mov	r2, #1
	str	r1, [r4, #-20]
	mov	r1, #3
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up
.L3432:
	sub	r0, r0, #228
	bl	tasklet_kill
	sub	r0, r4, #248
	bl	tasklet_kill
	b	.L3395
	.fnend
	.size	rmnet_mux_disconnect_work, .-rmnet_mux_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_sdio_data_rx_work, %function
rmnet_mux_sdio_data_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #124
	sub	r7, r0, #16
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	fp, [r0, #-156]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #-16]
	mov	r8, r0
	cmp	r4, r7
	beq	.L3434
	cmp	r4, #0
	beq	.L3434
	movw	r10, #:lower16:.LC288
	movt	r10, #:upper16:.LC288
.L3435:
	ldr	r3, [r5, #-8]
	mov	r1, r8
	mov	r9, #0
	mov	r8, #0
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r5, #-8]
	ldrd	r2, [r4]
	strd	r8, [r4]
	str	r3, [r2, #4]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	ldr	r0, [fp]
	mov	r1, r10
	add	r0, r0, #32
	bl	dev_err
	mov	r0, r4
	bl	dev_kfree_skb_any
	ldr	r4, [r5, #-16]
	cmp	r4, r7
	beq	.L3434
	cmp	r4, #0
	bne	.L3435
.L3434:
	mov	r1, r8
	mov	r0, r6
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	rmnet_mux_sdio_data_rx_work, .-rmnet_mux_sdio_data_rx_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_sdio_complete_epin, %function
rmnet_mux_sdio_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0]
	.pad #12
	sub	sp, sp, #12
	ldr	r9, [r1, #32]
	ldr	r7, [r4, #360]
	cmp	r7, #0
	beq	.L3473
	ldr	r2, [r1, #44]
	cmn	r2, #104
	beq	.L3443
	cmp	r2, #0
	beq	.L3443
	cmn	r2, #108
	beq	.L3443
	ldr	r3, [r4, #84]
	movw	r1, #:lower16:.LC229
	movt	r1, #:upper16:.LC229
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
.L3443:
	add	r7, r4, #364
	add	r8, r4, #192
	mov	r0, r7
	bl	_raw_spin_lock
	mov	r2, r8
	add	r0, r5, #36
	ldr	r1, [r4, #196]
	bl	__list_add
	mov	r0, r7
	bl	_raw_spin_unlock
	mov	r0, r9
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #368]
	cmp	r3, #0
	bne	.L3474
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3474:
	ldr	r3, [r4, #84]
	mov	r0, r7
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #192]
	str	r0, [sp]
	cmp	r8, r3
	beq	.L3446
	ldr	r5, [r4, #200]
	add	r10, r4, #200
	cmp	r5, r10
	beq	.L3446
.L3472:
	cmp	r5, #0
	beq	.L3446
	ldr	r3, [r4, #208]
	mov	r1, #0
	mov	r0, #0
	sub	r3, r3, #1
	str	r3, [r4, #208]
	ldrd	r2, [r5]
	strd	r0, [r5]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r6, [r4, #192]
	str	r5, [r6, #-4]
	ldr	r3, [r5, #172]
	mov	r0, r6
	sub	r9, r6, #36
	str	r3, [r6, #-36]
	ldr	r3, [r5, #80]
	str	r3, [r6, #-32]
	bl	list_del
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r0, [r4, #92]
	mov	r1, r9
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	fp, #0
	bne	.L3475
	ldr	r2, [r4, #192]
	ldr	r3, [r4, #404]
	cmp	r8, r2
	add	r3, r3, #1
	str	r3, [r4, #404]
	beq	.L3446
	ldr	r5, [r4, #200]
	cmp	r5, r10
	bne	.L3472
.L3446:
	ldr	r1, [sp]
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L3473:
	mov	r6, r0
	mov	r0, r9
	bl	dev_kfree_skb_any
	mov	r0, r7
	str	r7, [r5]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	bx	r3	@ indirect register sibling call
.L3475:
	ldr	r0, [r4, #368]
	cmp	r0, #0
	beq	.L3451
	ldr	r3, [sp, #4]
	movw	r1, #:lower16:.LC231
	mov	r2, fp
	movt	r1, #:upper16:.LC231
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r8
	mov	r0, r6
	ldr	r1, [r4, #196]
	bl	__list_add
	ldr	r3, [r4, #200]
	stm	r5, {r3, r10}
	str	r5, [r4, #200]
	str	r5, [r3, #4]
	ldr	r3, [r4, #208]
	add	r3, r3, #1
	str	r3, [r4, #208]
	b	.L3446
.L3451:
	str	r0, [r6, #-36]
	ldr	r4, [r4, #92]
	bl	kfree
	mov	r1, r9
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r5
	bl	dev_kfree_skb_any
	b	.L3446
	.fnend
	.size	rmnet_mux_sdio_complete_epin, .-rmnet_mux_sdio_complete_epin
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_unbind, %function
rmnet_sdio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	add	r0, r1, #252
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	bl	cancel_delayed_work_sync
	ldr	r0, [r4, #200]
	bl	destroy_workqueue
	ldr	r2, [r4, #316]
	mov	r3, #0
	str	r3, [r4, #88]
	str	r3, [r4, #92]
	tst	r2, #2
	str	r3, [r4, #96]
	bne	.L3486
	ldr	r3, [r4, #320]
	tst	r3, #2
	bne	.L3487
.L3478:
	ldr	r0, [r4, #348]
	bl	debugfs_remove_recursive
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
.L3486:
	add	r1, r4, #316
	mov	r0, #1
	bl	_clear_bit
	ldr	r3, [r4, #320]
	tst	r3, #2
	beq	.L3478
.L3487:
	add	r1, r4, #320
	mov	r0, #1
	bl	_clear_bit
	b	.L3478
	.fnend
	.size	rmnet_sdio_unbind, .-rmnet_sdio_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_connect_w, %function
grmnet_ctrl_smd_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #3522
	movt	r5, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #16]
	ldrh	r3, [r5, r3]
	.pad #12
	sub	sp, sp, #12
	ldr	r6, [r0, #-12]
	tst	r3, #4
	bne	.L3506
.L3489:
	ldr	r3, [r4, #-104]
	tst	r3, #2
	bne	.L3490
	ldr	r3, [r4, #-104]
	tst	r3, #4
	beq	.L3507
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L3490:
	sub	r2, r4, #112
	movw	r3, #:lower16:grmnet_ctrl_smd_notify
	ldr	r0, [r4, #-108]
	movt	r3, #:upper16:grmnet_ctrl_smd_notify
	mov	r1, r2
	bl	smd_open
	subs	r3, r0, #0
	beq	.L3492
	cmn	r3, #11
	bne	.L3493
	movw	r2, #3546
	ldrh	r2, [r5, r2]
	tst	r2, #4
	bne	.L3508
.L3494:
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, #250
	movt	r3, #:upper16:.LANCHOR1
	ldr	r5, [r3, #3604]
	bl	msecs_to_jiffies
	mov	r2, r0
	mov	r1, r4
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	queue_delayed_work
.L3492:
	sub	r5, r4, #4
	ldr	r6, [r4, #-24]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-8]
	mov	r7, r0
	cmp	r3, #0
	beq	.L3495
	orr	r2, r6, #4
	mov	r1, r6
	ldr	r0, [r4, #-112]
	mvn	r2, r2
	bl	smd_tiocmset
.L3495:
	mov	r1, r7
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock_irqrestore
.L3507:
	sub	r1, r4, #104
	mov	r0, #2
	bl	_set_bit
	ldr	r0, .L3509
	mov	r3, #84
	mla	r0, r3, r6, r0
	add	r0, r0, #4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	platform_driver_register
.L3506:
	movw	r1, #:lower16:.LC289
	ldr	r2, .L3509+4
	add	r0, r5, #3504
	movt	r1, #:upper16:.LC289
	bl	__dynamic_pr_debug
	b	.L3489
.L3508:
	movw	r1, #:lower16:.LC290
	ldr	r2, .L3509+4
	str	r3, [sp]
	movt	r1, #:upper16:.LC290
	ldr	r0, .L3509+8
	ldr	r3, [r4, #-108]
	bl	__dynamic_pr_debug
	b	.L3494
.L3493:
	ldr	r1, .L3509+4
	movw	r0, #:lower16:.LC291
	ldr	r2, [r4, #-108]
	movt	r0, #:upper16:.LC291
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	printk
.L3510:
	.align	2
.L3509:
	.word	.LANCHOR1+512
	.word	.LANCHOR3+2468
	.word	.LANCHOR2+3528
	.fnend
	.size	grmnet_ctrl_smd_connect_w, .-grmnet_ctrl_smd_connect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_open_sdio_work, %function
rmnet_mux_open_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #3656]
	cmp	r2, #90
	ble	.L3512
	ldr	r3, [r0, #-172]
	movw	r1, #:lower16:.LC292
	movt	r1, #:upper16:.LC292
	ldr	r0, [r3]
	add	r0, r0, #32
	b	dev_err
.L3512:
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	add	r2, r2, #1
	str	r6, [sp, #8]
	mov	r0, #2000
	str	lr, [sp, #12]
	ldr	r5, [r4, #120]
	str	r2, [r3, #3656]
	bl	msecs_to_jiffies
	mov	r2, r0
	mov	r1, r4
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_delayed_work
	.fnend
	.size	rmnet_mux_open_sdio_work, .-rmnet_mux_open_sdio_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_start_rx, %function
gbam_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	add	r7, r0, #4
	mov	r6, r0
	mov	r0, r7
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #12]
	mov	r8, r0
	cmp	r3, #0
	beq	.L3519
	ldr	r9, [r3, #88]
	movw	r5, #:lower16:.LANCHOR0
	add	r2, r6, #52
	movt	r5, #:upper16:.LANCHOR0
	str	r2, [sp, #4]
.L3517:
	ldr	r0, [sp, #4]
	mvn	r3, #0
	mov	r2, #0
	ldr	r4, [r6, #52]
	mov	r1, #32
	cmp	r4, r0
	sub	r10, r4, #36
	beq	.L3519
	ldr	r0, [r5, #608]
	cmp	r0, #0
	beq	.L3518
	ldr	ip, [r6, #68]
	ldr	r0, [r5, #612]
	cmp	ip, r0
	bcs	.L3519
.L3518:
	ldr	r0, [r5, #616]
	add	r0, r0, #8
	bl	__alloc_skb
	subs	fp, r0, #0
	mov	r0, r4
	beq	.L3519
	ldr	r1, [fp, #160]
	ldr	r2, [fp, #172]
	add	r1, r1, #8
	add	r2, r2, #8
	str	r1, [fp, #160]
	str	r2, [fp, #172]
	bl	list_del
	ldr	r2, [fp, #172]
	mov	r1, r8
	mov	r0, r7
	str	r2, [r4, #-36]
	ldr	r2, [r5, #616]
	str	r2, [r4, #-32]
	str	fp, [r4, #-4]
	bl	_raw_spin_unlock_irqrestore
	ldr	ip, [r9, #8]
	mov	r2, #32
	mov	r1, r10
	mov	r0, r9
	ldr	r8, [ip, #16]
	blx	r8
	str	r0, [sp]
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp]
	mov	r8, r0
	cmp	r3, #0
	bne	.L3537
	ldr	r3, [r6, #12]
	cmp	r3, #0
	bne	.L3517
.L3519:
	mov	r1, r8
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L3537:
	mov	r0, fp
	bl	dev_kfree_skb_any
	ldr	r0, .L3538
	bl	__printk_ratelimit
	cmp	r0, #0
	beq	.L3521
	movw	r0, #:lower16:.LC293
	ldr	r1, .L3538
	movt	r0, #:upper16:.LC293
	ldr	r2, [sp]
	bl	printk
.L3521:
	ldr	r3, [r6, #12]
	cmp	r3, #0
	beq	.L3522
	mov	r0, r4
	ldr	r1, [sp, #4]
	ldr	r2, [r6, #52]
	bl	__list_add
	b	.L3519
.L3522:
	ldr	r3, [r9, #8]
	mov	r1, r10
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	b	.L3519
.L3539:
	.align	2
.L3538:
	.word	.LANCHOR3+2496
	.fnend
	.size	gbam_start_rx, .-gbam_start_rx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_epout_complete, %function
gbam_epout_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r0]
	ldr	r6, [r1, #44]
	ldr	r8, [r1, #32]
	cmn	r6, #104
	beq	.L3541
	cmp	r6, #0
	beq	.L3542
	cmn	r6, #108
	beq	.L3541
	ldr	r0, .L3573
	bl	__printk_ratelimit
	cmp	r0, #0
	bne	.L3569
.L3545:
	mov	r0, r8
	add	r9, r5, #4
	bl	dev_kfree_skb_any
	mov	r0, r9
	bl	_raw_spin_lock
.L3544:
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldr	r3, [r6, #608]
	cmp	r3, #0
	beq	.L3546
	ldr	r2, [r5, #68]
	ldr	r3, [r6, #612]
	cmp	r2, r3
	bcs	.L3570
.L3546:
	mov	r0, r9
	bl	_raw_spin_unlock
	ldr	r0, [r6, #616]
	mvn	r3, #0
	mov	r2, #0
	mov	r1, #32
	add	r0, r0, #8
	bl	__alloc_skb
	subs	r8, r0, #0
	beq	.L3550
	ldr	ip, [r8, #160]
	mov	r0, r7
	mov	r2, #32
	ldr	r3, [r8, #172]
	mov	r1, r4
	add	ip, ip, #8
	add	r3, r3, #8
	str	ip, [r8, #160]
	str	r3, [r8, #172]
	str	r3, [r4]
	ldr	r3, [r6, #616]
	str	r3, [r4, #4]
	str	r8, [r4, #32]
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	bne	.L3571
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L3542:
	mov	r0, r8
	add	r9, r5, #4
	ldr	r1, [r1, #48]
	bl	skb_put
	mov	r0, r9
	bl	_raw_spin_lock
	ldr	r2, [r5, #64]
	add	r1, r5, #60
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3652]
	stm	r8, {r1, r2}
	add	r1, r5, #80
	str	r8, [r2]
	ldr	r3, [r5, #68]
	str	r8, [r5, #64]
	add	r3, r3, #1
	str	r3, [r5, #68]
	bl	queue_work
	b	.L3544
.L3541:
	mov	r0, r8
	bl	dev_kfree_skb_any
	mov	r3, #0
	mov	r1, r4
	mov	r0, r7
	str	r3, [r4]
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	bx	r3	@ indirect register sibling call
.L3571:
	mov	r0, r8
	bl	dev_kfree_skb_any
	ldr	r0, .L3573
	bl	__printk_ratelimit
	cmp	r0, #0
	bne	.L3572
.L3550:
	mov	r0, r9
	bl	_raw_spin_lock
.L3568:
	ldr	r1, [r5, #56]
	add	r0, r4, #36
	add	r2, r5, #52
	bl	__list_add
	mov	r0, r9
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	_raw_spin_unlock
.L3570:
	ldr	r3, [r5, #276]
	cmp	r3, #0
	bne	.L3568
	ldr	r3, [r5, #272]
	mov	r2, #1
	str	r2, [r5, #276]
	add	r3, r3, r2
	str	r3, [r5, #272]
	b	.L3568
.L3572:
	movw	r0, #:lower16:.LC295
	mov	r2, r6
	ldr	r1, .L3573
	movt	r0, #:upper16:.LC295
	bl	printk
	b	.L3550
.L3569:
	ldr	r2, [r4, #4]
	movw	r0, #:lower16:.LC294
	mov	r3, r6
	ldr	ip, [r4, #48]
	movt	r0, #:upper16:.LC294
	ldr	r1, .L3573
	str	r2, [sp, #4]
	ldr	r2, [r7, #4]
	str	ip, [sp]
	bl	printk
	b	.L3545
.L3574:
	.align	2
.L3573:
	.word	.LANCHOR3+2512
	.fnend
	.size	gbam_epout_complete, .-gbam_epout_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_ioctl, %function
usb_rmnet_mux_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #65024
	movt	r3, 32772
	cmp	r1, r3
	bne	.L3577
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3579
	mov	r0, #4
	bx	lr
.L3579:
	ldr	r1, [r0, #124]
	mov	r0, r2
	mov	r2, #4
	add	r1, r1, #348
	b	__copy_to_user
.L3577:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	usb_rmnet_mux_ctrl_ioctl, .-usb_rmnet_mux_ctrl_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_ioctl, %function
acc_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #19714
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, 16640
	str	r6, [sp, #8]
	cmp	r1, r3
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	beq	.L3581
	bls	.L3598
	movw	r3, #19716
	movt	r3, 16640
	cmp	r1, r3
	beq	.L3587
	bcc	.L3588
	movw	r3, #19717
	movt	r3, 16640
	cmp	r1, r3
	beq	.L3589
	movw	r3, #19718
	movt	r3, 16640
	cmp	r1, r3
	addeq	r4, r4, #1376
	addeq	r4, r4, #5
	bne	.L3593
.L3591:
	cmp	r4, #0
	beq	.L3593
	mov	r0, r4
	mov	r6, r2
	bl	strlen
	mov	r3, sp
	add	r5, r0, #1
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3599
.L3592:
	mvn	r5, #13
	b	.L3580
.L3599:
	mov	r1, r4
	mov	r0, r6
	mov	r2, r5
	bl	__copy_to_user
	cmp	r0, #0
	bne	.L3592
.L3580:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3598:
	movw	r3, #19720
	cmp	r1, r3
	beq	.L3583
	movw	r3, #19713
	movt	r3, 16640
	cmp	r1, r3
	beq	.L3584
	movw	r3, #19719
	cmp	r1, r3
	beq	.L3585
.L3593:
	mvn	r5, #21
	b	.L3580
.L3589:
	add	r4, r4, #1120
	add	r4, r4, #5
	b	.L3591
.L3583:
	ldr	r5, [r4, #1648]
	b	.L3580
.L3584:
	add	r4, r4, #101
	b	.L3591
.L3585:
	ldr	r5, [r4, #1644]
	b	.L3580
.L3581:
	add	r4, r4, #356
	add	r4, r4, #1
	b	.L3591
.L3587:
	add	r4, r4, #868
	add	r4, r4, #1
	b	.L3591
.L3588:
	add	r4, r4, #612
	add	r4, r4, #1
	b	.L3591
	.fnend
	.size	acc_ioctl, .-acc_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_ioctl, %function
ffs_epfile_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #124]
	ldr	r0, [r5, #36]
	ldr	r3, [r0, #92]
	cmp	r3, #2
	bne	.L3620
	add	r0, r0, #24
	mov	r4, r1
	mov	r6, r2
	bl	_raw_spin_lock_irq
	ldr	r3, [r5, #40]
	cmp	r3, #0
	mvneq	r4, #18
	beq	.L3607
	movw	r2, #26371
	cmp	r4, r2
	beq	.L3603
	bls	.L3621
	movw	r2, #26497
	cmp	r4, r2
	beq	.L3608
	movw	r2, #26498
	movt	r2, 32777
	cmp	r4, r2
	bne	.L3619
	ldr	r0, [r5, #36]
	ldr	r2, [r0]
	ldr	r2, [r2, #16]
	cmp	r2, #3
	moveq	r2, #1
	beq	.L3610
	cmp	r2, #5
	moveq	r2, #2
	movne	r2, #0
.L3610:
	add	r2, r2, #2
	add	r0, r0, #24
	ldr	r4, [r3, r2, lsl #2]
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, #9; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3611
.L3612:
	mvn	r4, #13
	b	.L3600
.L3621:
	movw	r2, #26369
	cmp	r4, r2
	beq	.L3605
	movw	r2, #26370
	cmp	r4, r2
	bne	.L3619
	ldr	r0, [r3]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	moveq	r4, r3
	beq	.L3607
	mov	r4, #0
	blx	r3
.L3607:
	ldr	r0, [r5, #36]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
.L3600:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3619:
	mvn	r4, #24
	b	.L3607
.L3605:
	ldr	r0, [r3]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #32]
	cmp	r3, #0
	beq	.L3614
	blx	r3
	mov	r4, r0
	b	.L3607
.L3608:
	ldrb	r4, [r3, #20]	@ zero_extendqisi2
	b	.L3607
.L3603:
	ldr	r0, [r3]
	mov	r1, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	mov	r4, r0
	b	.L3607
.L3620:
	movw	r0, #:lower16:.LC33
	movw	r1, #978
	movt	r0, #:upper16:.LC33
	mvn	r4, #18
	bl	warn_slowpath_null
	b	.L3600
.L3611:
	mov	r1, r4
	mov	r0, r6
	mov	r2, #9
	bl	__copy_to_user
	subs	r4, r0, #0
	beq	.L3600
	b	.L3612
.L3614:
	mvn	r4, #94
	b	.L3607
	.fnend
	.size	ffs_epfile_ioctl, .-ffs_epfile_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_ioctl, %function
rmnet_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r3, #3570
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR2
	mov	r7, r2
	movt	r6, #:upper16:.LANCHOR2
	str	r8, [sp, #16]
	mov	r8, r1
	ldrh	r3, [r6, r3]
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	ldr	r4, [r0, #124]
	tst	r3, #4
	bne	.L3640
.L3623:
	add	r5, r4, #28
	.syntax divided
@ 61 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L3624
	movw	r3, #29186
	movt	r3, 32772
	cmp	r8, r3
	bne	.L3641
	ldr	r2, [r4, #12]
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	str	r2, [sp, #4]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3628
.L3630:
	movw	r0, #:lower16:.LC297
	mvn	r7, #13
	movt	r0, #:upper16:.LC297
	bl	printk
.L3629:
	movw	r3, #3594
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L3642
.L3631:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L3622:
	mov	r0, r7
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3628:
	mov	r2, #4
	mov	r0, r7
	add	r1, sp, r2
	bl	__copy_to_user
	subs	r7, r0, #0
	beq	.L3629
	b	.L3630
.L3640:
	movw	r1, #:lower16:.LC296
	mov	r3, r8
	ldr	r2, .L3643
	movt	r1, #:upper16:.LC296
	add	r0, r6, #3552
	bl	__dynamic_pr_debug
	b	.L3623
.L3642:
	movw	r1, #:lower16:.LC298
	ldr	r2, .L3643
	movt	r1, #:upper16:.LC298
	ldr	r0, .L3643+4
	ldr	r3, [r4, #12]
	bl	__dynamic_pr_debug
	b	.L3631
.L3624:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #15
	b	.L3622
.L3641:
	movw	r0, #:lower16:.LC299
	mvn	r7, #21
	movt	r0, #:upper16:.LC299
	bl	printk
	b	.L3631
.L3644:
	.align	2
.L3643:
	.word	.LANCHOR3+2532
	.word	.LANCHOR2+3576
	.fnend
	.size	rmnet_ctrl_ioctl, .-rmnet_ctrl_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_ioctl, %function
rndis_qc_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r3, #0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r4, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	ldr	r0, .L3668
	movt	r4, #:upper16:.LANCHOR1
	str	r8, [sp, #16]
	mov	r5, r2
	mov	r7, r1
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	strb	r3, [sp, #3]
	str	r3, [sp, #4]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #2496]
	mov	r6, r0
	cmp	r3, #0
	beq	.L3665
	ldrb	r0, [r3, #132]	@ zero_extendqisi2
	add	r2, r3, #148
	ldr	r1, [r3, #136]
	strb	r0, [sp, #3]
	str	r1, [sp, #4]
	.syntax divided
@ 61 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r8, [r2]
	add	r8, r8, #1
	strex	r1, r8, [r2]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r8, #1
	bne	.L3648
	mov	r1, r6
	ldr	r0, .L3668
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC300
	mov	r2, r7
	ldr	r1, .L3668+4
	movt	r0, #:upper16:.LC300
	bl	printk
	movw	r3, #26881
	movt	r3, 32769
	cmp	r7, r3
	beq	.L3649
	movw	r3, #26882
	movt	r3, 32772
	cmp	r7, r3
	bne	.L3666
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r2, r5, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3656
.L3658:
	movw	r0, #:lower16:.LC301
	ldr	r1, .L3668+4
	mvn	r5, #13
	movt	r0, #:upper16:.LC301
	bl	printk
.L3657:
	movw	r0, #:lower16:.LANCHOR2
	movw	r2, #3618
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, r2]
	tst	r2, #4
	bne	.L3667
.L3655:
	ldr	r0, .L3668
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #2496]
	mov	r6, r0
	cmp	r3, #0
	beq	.L3665
	add	r2, r3, #148
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L3647:
	mov	r1, r6
	ldr	r0, .L3668
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3656:
	mov	r2, #4
	mov	r0, r5
	add	r1, sp, r2
	bl	__copy_to_user
	subs	r5, r0, #0
	beq	.L3657
	b	.L3658
.L3667:
	movw	r1, #:lower16:.LC303
	ldr	r2, .L3668+4
	add	r0, r0, #3600
	movt	r1, #:upper16:.LC303
	ldr	r3, [sp, #4]
	bl	__dynamic_pr_debug
	b	.L3655
.L3648:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r5, #15
	b	.L3647
.L3649:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r2, r5, #1; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L3654
	mov	r2, r8
	mov	r0, r5
	add	r1, sp, #3
	bl	__copy_to_user
	cmp	r0, #0
	bne	.L3654
	mov	r5, r0
	b	.L3653
.L3665:
	movw	r0, #:lower16:.LC62
	ldr	r1, .L3668+4
	mvn	r5, #18
	movt	r0, #:upper16:.LC62
	bl	printk
	b	.L3647
.L3666:
	movw	r0, #:lower16:.LC304
	ldr	r1, .L3668+4
	mvn	r5, #21
	movt	r0, #:upper16:.LC304
	bl	printk
	b	.L3655
.L3654:
	movw	r0, #:lower16:.LC301
	ldr	r1, .L3668+4
	mvn	r5, #13
	movt	r0, #:upper16:.LC301
	bl	printk
.L3653:
	movw	r0, #:lower16:.LC302
	ldrb	r2, [sp, #3]	@ zero_extendqisi2
	ldr	r1, .L3668+4
	movt	r0, #:upper16:.LC302
	bl	printk
	b	.L3655
.L3669:
	.align	2
.L3668:
	.word	.LANCHOR1+2492
	.word	.LANCHOR3+2552
	.fnend
	.size	rndis_qc_ioctl, .-rndis_qc_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_ioctl, %function
mbim_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR2
	movw	ip, #3642
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	mov	r7, r2
	str	lr, [sp, #20]
	ldrh	r3, [r3, ip]
	ldr	r4, [r0, #124]
	tst	r3, #4
	bne	.L3689
.L3671:
	add	r5, r4, #96
	.syntax divided
@ 61 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L3672
	movw	r3, #28419
	movt	r3, 32770
	cmp	r6, r3
	beq	.L3673
	movw	r3, #28418
	movt	r3, 32772
	cmp	r6, r3
	bne	.L3690
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L3679
	mov	r0, r7
	mov	r2, #4
	add	r1, r4, #224
	bl	__copy_to_user
	cmp	r0, #0
	bne	.L3679
	mov	r6, r0
	b	.L3678
.L3673:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #2; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L3683
	mov	r0, r7
	mov	r2, #2
	add	r1, r4, #228
	bl	__copy_to_user
	cmp	r0, #0
	bne	.L3683
	mov	r6, r0
	b	.L3682
.L3689:
	movw	r1, #:lower16:.LC296
	mov	r3, r6
	ldr	r2, .L3691
	movt	r1, #:upper16:.LC296
	ldr	r0, .L3691+4
	bl	__dynamic_pr_debug
	b	.L3671
.L3672:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r6, #15
.L3670:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3690:
	movw	r0, #:lower16:.LC307
	ldr	r1, .L3691
	mvn	r6, #21
	movt	r0, #:upper16:.LC307
	bl	printk
.L3680:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L3670
.L3683:
	movw	r0, #:lower16:.LC301
	ldr	r1, .L3691
	mvn	r6, #13
	movt	r0, #:upper16:.LC301
	bl	printk
.L3682:
	movw	r0, #:lower16:.LC306
	ldrh	r2, [r4, #228]
	ldr	r1, .L3691
	movt	r0, #:upper16:.LC306
	bl	printk
	b	.L3680
.L3679:
	movw	r0, #:lower16:.LC301
	ldr	r1, .L3691
	mvn	r6, #13
	movt	r0, #:upper16:.LC301
	bl	printk
.L3678:
	movw	r0, #:lower16:.LC305
	ldr	r1, .L3691
	movt	r0, #:upper16:.LC305
	ldr	r2, [r4, #224]
	bl	printk
	b	.L3680
.L3692:
	.align	2
.L3691:
	.word	.LANCHOR3+2568
	.word	.LANCHOR2+3624
	.fnend
	.size	mbim_ioctl, .-mbim_ioctl
	.align	2
	.global	usb_rmnet_mux_ctrl_read
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_read, %function
usb_rmnet_mux_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r1
	mov	r9, r2
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #32
	sub	sp, sp, #32
	ldr	r4, [r0, #124]
	mov	r3, sp
	bic	r7, r3, #8128
	bic	r7, r7, #63
.L3694:
	ldr	r3, [r4, #368]
	cmp	r3, #0
	beq	.L3715
	add	r6, r4, #364
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r3, r4
	mov	r1, r0
	ldr	r5, [r3, #312]!
	cmp	r5, r3
	bne	.L3697
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #312]
	cmp	r3, r5
	bne	.L3694
	ldr	r3, [r4, #368]
	cmp	r3, #0
	beq	.L3694
	ldr	r0, [r7, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #24
	movt	r2, #:upper16:autoremove_wake_function
	mov	r3, #0
	add	r6, r4, #320
	str	r3, [sp, #12]
	str	r0, [sp, #16]
	str	r2, [sp, #20]
	str	r1, [sp, #24]
	str	r1, [sp, #28]
.L3701:
	mov	r2, #1
	add	r1, sp, #12
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r3, [r4, #312]
	cmp	r5, r3
	bne	.L3699
	ldr	r3, [r4, #368]
	cmp	r3, #0
	beq	.L3699
	ldr	r3, [r7, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3716
	mov	r7, #65024
	add	r1, sp, #12
	mov	r0, r6
	movt	r7, 65535
	bl	finish_wait
.L3693:
	mov	r0, r7
	add	sp, sp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L3716:
	bl	schedule
	b	.L3701
.L3715:
	movw	r0, #:lower16:.LANCHOR2
	movw	r3, #3666
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, r3]
	tst	r3, #4
	mvneq	r7, #18
	beq	.L3693
	movw	r1, #:lower16:.LC308
	ldr	r2, .L3719
	add	r0, r0, #3648
	movt	r1, #:upper16:.LC308
	mvn	r7, #18
	bl	__dynamic_pr_debug
	b	.L3693
.L3697:
	ldr	r3, [r5, #-4]
	sub	r10, r5, #8
	cmp	r3, r9
	bhi	.L3717
	mov	r0, r5
	str	r1, [sp, #4]
	bl	list_del
	ldr	r3, [r4, #332]
	mov	r0, r6
	ldr	r1, [sp, #4]
	sub	r3, r3, #1
	str	r3, [r4, #332]
	bl	_raw_spin_unlock_irqrestore
	mov	r3, sp
	ldr	r7, [r5, #-4]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r2, r8, r7; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	movne	r0, r7
	beq	.L3718
.L3703:
	ldr	r3, [r4, #416]
	cmp	r0, #0
	movne	r7, r0
	add	r3, r3, #1
	str	r3, [r4, #416]
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r10
	bl	kfree
	b	.L3693
.L3699:
	add	r1, sp, #12
	mov	r0, r6
	bl	finish_wait
	b	.L3694
.L3718:
	mov	r0, r8
	mov	r2, r7
	ldr	r1, [r5, #-8]
	bl	__copy_to_user
	b	.L3703
.L3717:
	mov	r0, r6
	mvn	r7, #11
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC309
	mov	r3, r9
	ldr	r1, .L3719
	movt	r0, #:upper16:.LC309
	ldr	r2, [r5, #-4]
	bl	printk
	b	.L3693
.L3720:
	.align	2
.L3719:
	.word	.LANCHOR3+2580
	.fnend
	.size	usb_rmnet_mux_ctrl_read, .-usb_rmnet_mux_ctrl_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_read, %function
rmnet_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #3690
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	movw	r10, #:lower16:.LANCHOR2
	movt	r10, #:upper16:.LANCHOR2
	strd	r8, [sp, #16]
	ldrh	r3, [r10, r3]
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	ldr	r4, [r0, #124]
	str	r2, [sp]
	str	r1, [sp, #4]
	tst	r3, #4
	bne	.L3753
	ldr	r3, [sp]
	cmp	r3, #2048
	bhi	.L3754
.L3723:
	add	r3, r4, #20
	str	r3, [sp, #8]
	.syntax divided
@ 61 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r1, r3
	.syntax divided
@ 63 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r1]
	add	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L3725
	mov	r3, sp
	ldr	r8, .L3762
	add	r7, r4, #44
	bic	fp, r3, #8128
	add	r6, r4, #52
	bic	fp, fp, #63
.L3726:
	movw	r9, #:lower16:.LC313
	movt	r9, #:upper16:.LC313
	b	.L3727
.L3729:
	ldr	r5, [r4, #44]
	cmp	r7, r5
	beq	.L3730
.L3727:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #44]
	mov	r3, r0
	mov	r0, r6
	mov	r1, r3
	cmp	r5, r7
	bne	.L3728
	bl	_raw_spin_unlock_irqrestore
	ldrh	r3, [r8]
	tst	r3, #4
	beq	.L3729
	ldr	r2, .L3762+4
	mov	r1, r9
	ldr	r0, .L3762+8
	bl	__dynamic_pr_debug
	ldr	r5, [r4, #44]
	cmp	r5, r7
	bne	.L3727
.L3730:
	ldr	r0, [fp, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #32
	movt	r2, #:upper16:autoremove_wake_function
	mov	r3, #0
	add	r9, r4, #32
	str	r3, [sp, #20]
	str	r0, [sp, #24]
	str	r2, [sp, #28]
	str	r1, [sp, #32]
	str	r1, [sp, #36]
.L3734:
	mov	r2, #1
	add	r1, sp, #20
	mov	r0, r9
	bl	prepare_to_wait
	ldr	r3, [r4, #44]
	cmp	r3, r5
	bne	.L3732
	ldr	r3, [fp, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3755
	add	r1, sp, #20
	mov	r0, r9
	bl	finish_wait
	movw	r3, #3738
	ldrh	r3, [r10, r3]
	tst	r3, #4
	bne	.L3756
.L3742:
	ldr	r1, [sp, #8]
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r4, #65024
	movt	r4, 65535
	b	.L3721
.L3728:
	mov	r0, r5
	str	r3, [sp, #12]
	sub	r7, r5, #8
	bl	list_del
	ldr	r3, [sp, #12]
	mov	r0, r6
	mov	r1, r3
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #-4]
	ldr	r2, [sp]
	cmp	r3, r2
	bhi	.L3757
	movw	r2, #3762
	ldrh	r2, [r10, r2]
	tst	r2, #4
	bne	.L3758
.L3736:
	ldr	r1, [sp, #8]
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	ldr	r2, [r5, #-4]
	bic	r3, r3, #8128
	ldr	r0, [sp, #4]
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r1, r0, r2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3759
	cmp	r2, #0
	bne	.L3760
.L3738:
	movw	r3, #3786
	ldr	r4, [r5, #-4]
	ldrh	r3, [r10, r3]
	tst	r3, #4
	bne	.L3761
.L3739:
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r7
	bl	kfree
.L3721:
	mov	r0, r4
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3759:
	ldr	r1, [r5, #-8]
	bl	__copy_to_user
	mov	r2, r0
	cmp	r2, #0
	beq	.L3738
.L3760:
	movw	r0, #:lower16:.LC317
	mov	r1, r2
	movt	r0, #:upper16:.LC317
	mvn	r4, #13
	bl	printk
	b	.L3739
.L3755:
	bl	schedule
	b	.L3734
.L3753:
	movw	r1, #:lower16:.LC310
	mov	r3, r2
	ldr	r0, .L3762+12
	ldr	r2, .L3762+4
	movt	r1, #:upper16:.LC310
	bl	__dynamic_pr_debug
	ldr	r3, [sp]
	cmp	r3, #2048
	bls	.L3723
.L3754:
	movw	r0, #:lower16:.LC311
	mov	r1, r3
	movt	r0, #:upper16:.LC311
	mov	r2, #2048
	bl	printk
	mvn	r4, #21
	b	.L3721
.L3761:
	movw	r1, #:lower16:.LC318
	mov	r3, r4
	ldr	r2, .L3762+4
	movt	r1, #:upper16:.LC318
	ldr	r0, .L3762+16
	bl	__dynamic_pr_debug
	ldr	r4, [r5, #-4]
	b	.L3739
.L3758:
	movw	r1, #:lower16:.LC316
	ldr	r2, .L3762+4
	movt	r1, #:upper16:.LC316
	ldr	r0, .L3762+20
	bl	__dynamic_pr_debug
	b	.L3736
.L3732:
	add	r1, sp, #20
	mov	r0, r9
	bl	finish_wait
	b	.L3726
.L3756:
	movw	r1, #:lower16:.LC314
	ldr	r0, .L3762+24
	movt	r1, #:upper16:.LC314
	bl	__dynamic_pr_debug
	b	.L3742
.L3725:
	ldr	r1, [sp, #8]
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC312
	mvn	r4, #15
	movt	r0, #:upper16:.LC312
	bl	printk
	b	.L3721
.L3757:
	movw	r0, #:lower16:.LC315
	mov	r1, r3
	movt	r0, #:upper16:.LC315
	bl	printk
	ldr	r1, [sp, #8]
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r5, #-8]
	mvn	r4, #11
	bl	kfree
	mov	r0, r7
	bl	kfree
	b	.L3721
.L3763:
	.align	2
.L3762:
	.word	.LANCHOR2+3714
	.word	.LANCHOR3+2604
	.word	.LANCHOR2+3696
	.word	.LANCHOR2+3672
	.word	.LANCHOR2+3768
	.word	.LANCHOR2+3744
	.word	.LANCHOR2+3720
	.fnend
	.size	rmnet_ctrl_read, .-rmnet_ctrl_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_read, %function
acc_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #:lower16:.LANCHOR2
	movw	r3, #3810
	movt	r5, #:upper16:.LANCHOR2
	strd	r6, [sp, #8]
	mov	r7, r2
	ldrh	r3, [r5, r3]
	strd	r8, [sp, #16]
	mov	r8, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	ldr	r4, [r0, #124]
	tst	r3, #4
	bne	.L3809
.L3765:
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	tst	r3, #2
	bne	.L3810
	movw	r2, #3858
	cmp	r7, #16384
	ldrh	r2, [r5, r2]
	movcs	r7, #16384
	tst	r2, #4
	bne	.L3811
.L3768:
	ands	r3, r3, #1
	bne	.L3769
	mov	r2, sp
	str	r3, [sp, #4]
	movw	r1, #:lower16:autoremove_wake_function
	bic	r2, r2, #8128
	movt	r1, #:upper16:autoremove_wake_function
	bic	r2, r2, #63
	add	r6, sp, #4
	ldr	r0, [r2, #12]
	mov	r9, r2
	add	r10, r4, #1664
	add	r2, sp, #16
	strd	r0, [sp, #8]
	str	r2, [sp, #16]
	str	r2, [sp, #20]
.L3772:
	mov	r2, #1
	mov	r1, r6
	mov	r0, r10
	bl	prepare_to_wait
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	tst	r3, #1
	bne	.L3770
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3812
	mov	r1, r6
	mov	r0, r10
	mov	r6, #65024
	bl	finish_wait
	movt	r6, 65535
	b	.L3776
.L3770:
	mov	r1, r6
	mov	r0, r10
	bl	finish_wait
.L3769:
	ldr	r9, [r4, #1688]
	ldr	r3, [r4, #1696]
	cmp	r3, #0
	bne	.L3773
.L3774:
	str	r7, [r9, #4]
	ldr	r0, [r4, #96]
	mov	r3, #0
	mov	r2, #208
	mov	r1, r9
	str	r3, [r4, #1696]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L3781
	movw	r3, #3882
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L3813
.L3777:
	ldr	r3, [r4, #1696]
	cmp	r3, #0
	bne	.L3773
	mov	r2, sp
	str	r3, [sp, #4]
	movw	r1, #:lower16:autoremove_wake_function
	bic	r2, r2, #8128
	movt	r1, #:upper16:autoremove_wake_function
	bic	r2, r2, #63
	add	r6, sp, #4
	ldr	r0, [r2, #12]
	mov	fp, r2
	add	r10, r4, #1664
	add	r2, sp, #16
	strd	r0, [sp, #8]
	str	r2, [sp, #16]
	str	r2, [sp, #20]
.L3780:
	mov	r2, #1
	mov	r1, r6
	mov	r0, r10
	bl	prepare_to_wait
	ldr	r3, [r4, #1696]
	cmp	r3, #0
	bne	.L3778
	ldr	r3, [fp, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3814
	mov	r1, r6
	mov	r0, r10
	bl	finish_wait
	ldr	r0, [r4, #96]
	mov	r1, r9
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	cmp	r0, #0
	beq	.L3787
	movw	r3, #3906
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L3787
	movw	r1, #:lower16:.LC323
	mov	r2, r0
	ldr	r0, .L3819
	movt	r1, #:upper16:.LC323
	mov	r6, #65024
	bl	__dynamic_pr_debug
	movt	r6, 65535
	b	.L3776
.L3778:
	mov	r1, r6
	mov	r0, r10
	bl	finish_wait
.L3773:
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	mov	r2, #0
	str	r2, [r4, #1696]
	tst	r3, #1
	beq	.L3781
	ldr	r3, [r9, #48]
	cmp	r3, r2
	beq	.L3815
	movw	r2, #3930
	ldrh	r2, [r5, r2]
	tst	r2, #4
	bne	.L3816
.L3783:
	mov	r2, sp
	cmp	r7, r3
	bic	r2, r2, #8128
	movcs	r6, r3
	bic	r2, r2, #63
	movcc	r6, r7
	ldr	r3, [r2, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r2, r8, r6; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	movne	r0, r6
	beq	.L3817
.L3784:
	cmp	r0, #0
	mvnne	r6, #13
	b	.L3776
.L3781:
	mvn	r6, #4
.L3776:
	movw	r3, #3954
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L3818
.L3764:
	mov	r0, r6
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3787:
	mov	r6, #65024
	movt	r6, 65535
	b	.L3776
.L3812:
	bl	schedule
	b	.L3772
.L3809:
	movw	r1, #:lower16:.LC319
	add	r0, r5, #3792
	movt	r1, #:upper16:.LC319
	bl	__dynamic_pr_debug
	b	.L3765
.L3811:
	movw	r1, #:lower16:.LC321
	ldr	r0, .L3819+4
	movt	r1, #:upper16:.LC321
	bl	__dynamic_pr_debug
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	b	.L3768
.L3818:
	movw	r1, #:lower16:.LC325
	mov	r2, r6
	ldr	r0, .L3819+8
	movt	r1, #:upper16:.LC325
	bl	__dynamic_pr_debug
	b	.L3764
.L3814:
	bl	schedule
	b	.L3780
.L3815:
	ldr	r9, [r4, #1688]
	b	.L3774
.L3813:
	movw	r1, #:lower16:.LC322
	mov	r2, r9
	ldr	r0, .L3819+12
	movt	r1, #:upper16:.LC322
	bl	__dynamic_pr_debug
	b	.L3777
.L3817:
	mov	r0, r8
	mov	r2, r6
	ldr	r1, [r9]
	bl	__copy_to_user
	b	.L3784
.L3810:
	movw	r3, #3834
	ldrh	r3, [r5, r3]
	tst	r3, #4
	mvneq	r6, #18
	beq	.L3764
	movw	r1, #:lower16:.LC320
	ldr	r0, .L3819+16
	mvn	r6, #18
	movt	r1, #:upper16:.LC320
	bl	__dynamic_pr_debug
	b	.L3764
.L3816:
	movw	r1, #:lower16:.LC324
	ldr	r0, .L3819+20
	mov	r2, r9
	movt	r1, #:upper16:.LC324
	bl	__dynamic_pr_debug
	ldr	r3, [r9, #48]
	b	.L3783
.L3820:
	.align	2
.L3819:
	.word	.LANCHOR2+3888
	.word	.LANCHOR2+3840
	.word	.LANCHOR2+3936
	.word	.LANCHOR2+3864
	.word	.LANCHOR2+3816
	.word	.LANCHOR2+3912
	.fnend
	.size	acc_read, .-acc_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_read, %function
mtp_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #3978
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR2
	movt	r7, #:upper16:.LANCHOR2
	strd	r8, [sp, #16]
	ldrh	r3, [r7, r3]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #52
	sub	sp, sp, #52
	str	r2, [sp, #12]
	tst	r3, #4
	str	r1, [sp, #20]
	ldr	fp, [r4, #84]
	bne	.L3885
.L3822:
	ldr	r2, [sp, #12]
	movw	r3, #:lower16:.LANCHOR0
	ldr	r1, [r4, #96]
	movt	r3, #:upper16:.LANCHOR0
	sub	r6, r2, #1
	ldr	r2, [r3, #620]
	ldrh	r3, [r1, #20]
	add	r6, r6, r3
	rsb	r3, r3, #0
	and	r6, r6, r3
	cmp	r6, r2
	bhi	.L3847
	movw	r3, #4002
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L3886
.L3824:
	ldr	r2, [r4, #104]
	cmp	r2, #0
	bne	.L3825
	mov	r3, sp
	str	r2, [sp, #28]
	movw	r1, #:lower16:autoremove_wake_function
	bic	r8, r3, #8128
	add	r0, sp, #40
	bic	r8, r8, #63
	movt	r1, #:upper16:autoremove_wake_function
	ldr	ip, [r8, #12]
	add	r10, sp, #28
	add	r5, r4, #132
	str	ip, [sp, #32]
	str	r1, [sp, #36]
	str	r0, [sp, #40]
	str	r0, [sp, #44]
.L3828:
	mov	r2, #1
	mov	r1, r10
	mov	r0, r5
	bl	prepare_to_wait
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3826
	ldr	r3, [r8, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3887
	mov	r1, r10
	mov	r10, #65024
	mov	r0, r5
	movt	r10, 65535
	add	r8, r4, #88
	bl	finish_wait
.L3831:
	mov	r0, r8
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #104]
	cmp	r3, #3
	mvneq	r10, #124
	beq	.L3844
	cmp	r3, #0
	movne	r3, #1
	strne	r3, [r4, #104]
.L3844:
	mov	r0, r8
	bl	_raw_spin_unlock_irq
	movw	r3, #4074
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L3888
.L3821:
	mov	r0, r10
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3826:
	mov	r1, r10
	mov	r0, r5
	bl	finish_wait
.L3825:
	add	r8, r4, #88
	mov	r0, r8
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #104]
	cmp	r3, #3
	beq	.L3889
	mov	r3, #2
	mov	r0, r8
	str	r3, [r4, #104]
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	bic	r9, r3, #8128
	bic	r9, r9, #63
	b	.L3830
.L3892:
	cmp	r3, #3
	beq	.L3835
.L3834:
	cmp	r3, #2
	bne	.L3850
	ldr	r0, [r5, #48]
	cmp	r0, #0
	bne	.L3890
.L3830:
	ldr	r5, [r4, #168]
	mov	r3, #0
	mov	r2, #208
	str	r6, [r5, #4]
	ldr	r0, [r4, #96]
	mov	r1, r5
	str	r3, [r4, #176]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L3850
	ldr	r0, .L3897
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L3891
.L3832:
	ldr	r3, [r4, #104]
	ldr	r2, [r4, #176]
	cmp	r2, #0
	bne	.L3892
	cmp	r3, #2
	beq	.L3836
	cmp	r3, #3
	beq	.L3840
.L3850:
	mvn	r10, #4
	b	.L3831
.L3891:
	ldr	r1, [fp]
	movw	r2, #:lower16:.LC322
	mov	r3, r5
	movt	r2, #:upper16:.LC322
	sub	r0, r0, #18
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L3832
.L3836:
	add	r0, sp, #40
	ldr	ip, [r9, #12]
	add	r3, r4, #132
	movw	r1, #:lower16:autoremove_wake_function
	add	r10, sp, #28
	movt	r1, #:upper16:autoremove_wake_function
	str	r3, [sp, #16]
	str	r0, [sp, #40]
	str	r0, [sp, #44]
	mov	r0, r3
	str	r2, [sp, #28]
	str	ip, [sp, #32]
	str	r1, [sp, #36]
.L3839:
	mov	r2, #1
	mov	r1, r10
	bl	prepare_to_wait
	ldr	r3, [r4, #176]
	cmp	r3, #0
	bne	.L3837
	ldr	r3, [r4, #104]
	cmp	r3, #2
	bne	.L3837
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3893
	mov	r1, r10
	ldr	r0, [sp, #16]
	bl	finish_wait
	ldr	r3, [r4, #104]
	cmp	r3, #3
	bne	.L3894
.L3845:
	ldr	r3, [r4, #176]
	cmp	r3, #0
	bne	.L3835
.L3840:
	ldr	r0, [r4, #96]
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L3835:
	mov	r0, r8
	mvn	r10, #124
	bl	_raw_spin_lock_irq
	mov	r3, #3
	mov	r0, r8
	str	r3, [r4, #104]
	bl	_raw_spin_unlock_irq
	b	.L3831
.L3894:
	ldr	r0, [r4, #96]
	mov	r1, r5
	mov	r10, #65024
	movt	r10, 65535
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L3831
.L3890:
	movw	r3, #4050
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L3895
.L3842:
	ldr	r2, [sp, #12]
	mov	r3, sp
	bic	r3, r3, #8128
	ldr	r1, [sp, #20]
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	cmp	r2, r0
	movcc	r10, r2
	movcs	r10, r0
	.syntax divided
@ 448 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r2, r1, r10; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	movne	r0, r10
	beq	.L3896
.L3843:
	cmp	r0, #0
	mvnne	r10, #13
	b	.L3831
.L3887:
	bl	schedule
	b	.L3828
.L3893:
	bl	schedule
	ldr	r0, [sp, #16]
	b	.L3839
.L3885:
	ldr	r1, [fp]
	mov	r3, r2
	movw	r2, #:lower16:.LC326
	movt	r2, #:upper16:.LC326
	ldr	r0, .L3897+4
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L3822
.L3886:
	ldr	r1, [fp]
	movw	r2, #:lower16:.LC327
	movt	r2, #:upper16:.LC327
	ldr	r0, .L3897+8
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L3824
.L3888:
	ldr	r1, [fp]
	movw	r2, #:lower16:.LC328
	mov	r3, r10
	movt	r2, #:upper16:.LC328
	ldr	r0, .L3897+12
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L3821
.L3837:
	mov	r1, r10
	ldr	r0, [sp, #16]
	bl	finish_wait
	ldr	r3, [r4, #104]
	cmp	r3, #3
	bne	.L3834
	b	.L3845
.L3896:
	mov	r0, r1
	mov	r2, r10
	ldr	r1, [r5]
	bl	__copy_to_user
	b	.L3843
.L3895:
	ldr	r1, [fp]
	movw	r2, #:lower16:.LC324
	mov	r3, r5
	movt	r2, #:upper16:.LC324
	str	r0, [sp]
	ldr	r0, .L3897+16
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r0, [r5, #48]
	b	.L3842
.L3847:
	mvn	r10, #21
	b	.L3821
.L3889:
	mov	r3, #1
	mov	r0, r8
	mvn	r10, #124
	str	r3, [r4, #104]
	bl	_raw_spin_unlock_irq
	b	.L3821
.L3898:
	.align	2
.L3897:
	.word	.LANCHOR2+4026
	.word	.LANCHOR2+3960
	.word	.LANCHOR2+3984
	.word	.LANCHOR2+4056
	.word	.LANCHOR2+4032
	.fnend
	.size	mtp_read, .-mtp_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_ctrl_read, %function
ccid_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #124]
	.pad #24
	sub	sp, sp, #24
	ldr	r3, [r5, #96]
	cmp	r3, #0
	beq	.L3917
	ldr	r3, [r5, #144]
	cmp	r2, #4
	mov	r6, r1
	movcc	r4, r2
	movcs	r4, #4
	cmp	r3, #0
	bne	.L3903
	mov	r2, sp
	str	r3, [sp, #4]
	movw	r1, #:lower16:autoremove_wake_function
	bic	r2, r2, #8128
	movt	r1, #:upper16:autoremove_wake_function
	bic	r2, r2, #63
	add	r8, r5, #128
	ldr	r0, [r2, #12]
	mov	r7, r2
	add	r2, sp, #16
	str	r0, [sp, #8]
	str	r1, [sp, #12]
	str	r2, [sp, #16]
	str	r2, [sp, #20]
.L3906:
	mov	r2, #1
	add	r1, sp, #4
	mov	r0, r8
	bl	prepare_to_wait
	ldr	r3, [r5, #144]
	cmp	r3, #0
	bne	.L3904
	ldr	r3, [r7, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3918
	mov	r0, r8
	add	r1, sp, #4
	bl	finish_wait
	mov	r0, #65024
	movt	r0, 65535
	b	.L3899
.L3904:
	add	r1, sp, #4
	mov	r0, r8
	bl	finish_wait
.L3903:
	ldr	r3, [r5, #96]
	mov	r2, #0
	str	r2, [r5, #144]
	cmp	r3, r2
	beq	.L3919
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, r4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	movne	r0, r4
	beq	.L3920
.L3909:
	cmp	r0, #0
	moveq	r0, r4
	mvnne	r0, #13
.L3899:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3920:
	add	r1, r5, #140
	mov	r0, r6
	mov	r2, r4
	bl	__copy_to_user
	b	.L3909
.L3918:
	bl	schedule
	b	.L3906
.L3917:
	ldr	r0, .L3921
	ldrh	r3, [r0, #2]
	tst	r3, #4
	bne	.L3901
.L3916:
	mvn	r0, #18
	b	.L3899
.L3919:
	ldr	r0, .L3921+4
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L3916
	movw	r1, #:lower16:.LC308
	ldr	r2, .L3921+8
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC308
	bl	__dynamic_pr_debug
	b	.L3916
.L3901:
	movw	r1, #:lower16:.LC308
	sub	r0, r0, #16
	ldr	r2, .L3921+8
	movt	r1, #:upper16:.LC308
	bl	__dynamic_pr_debug
	mvn	r0, #18
	b	.L3899
.L3922:
	.align	2
.L3921:
	.word	.LANCHOR2+4096
	.word	.LANCHOR4-4048
	.word	.LANCHOR3+2620
	.fnend
	.size	ccid_ctrl_read, .-ccid_ctrl_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_read, %function
modem_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #32]
	tst	r3, #2048
	bne	.L3931
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r2, #57344
	mov	r4, r1
	str	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	movt	r2, 65535
	movt	r6, #:upper16:.LANCHOR1
	str	lr, [sp, #12]
	.pad #24
	sub	sp, sp, #24
	ldr	r3, [r6, #2200]
	mov	r1, sp
	and	r1, r1, r2
	cmp	r3, #0
	bne	.L3925
	str	r3, [sp, #4]
	movw	r0, #:lower16:autoremove_wake_function
	mov	r5, r1
	str	r3, [sp, #8]
	movt	r0, #:upper16:autoremove_wake_function
	str	r3, [sp, #12]
	str	r0, [sp, #12]
	str	r3, [sp, #16]
	str	r3, [sp, #20]
	ldr	r2, [r1, #12]
	add	r3, sp, #16
	str	r2, [sp, #8]
	str	r3, [sp, #16]
	str	r3, [sp, #20]
.L3928:
	mov	r2, #1
	add	r1, sp, #4
	ldr	r0, .L3937
	bl	prepare_to_wait
	ldr	r3, [r6, #2200]
	cmp	r3, #0
	bne	.L3926
	ldr	r3, [r5, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L3936
	ldr	r0, .L3937
	add	r1, sp, #4
	bl	finish_wait
	mov	r0, #65024
	movt	r0, 65535
	b	.L3923
.L3926:
	add	r1, sp, #4
	ldr	r0, .L3937
	bl	finish_wait
	mov	r3, sp
	bic	r1, r3, #8128
	bic	r1, r1, #63
.L3925:
	ldr	r3, [r1, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r2, r4, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L3929
.L3930:
	mvn	r0, #13
.L3923:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3929:
	mov	r0, r4
	mov	r2, #4
	ldr	r1, .L3937+4
	bl	__copy_to_user
	subs	r3, r0, #0
	bne	.L3930
	mov	r0, #4
	str	r3, [r6, #2200]
	b	.L3923
.L3936:
	bl	schedule
	b	.L3928
.L3931:
	mvn	r0, #10
	bx	lr
.L3938:
	.align	2
.L3937:
	.word	.LANCHOR1+2204
	.word	.LANCHOR1+3600
	.fnend
	.size	modem_read, .-modem_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_read, %function
adb_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4004
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r4, [r0, #124]
	str	r1, [sp, #4]
	ldrh	r1, [r3, #-6]
	tst	r1, #4
	bne	.L3993
.L3940:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #3596]
	cmp	r3, #0
	beq	.L3963
	cmp	r7, #4096
	bhi	.L3964
	add	r6, r4, #108
	.syntax divided
@ 61 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r6]
	add	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L3991
	mov	r3, sp
	bic	r5, r3, #8128
	bic	r5, r5, #63
.L3942:
	ldr	r3, [r4, #100]
	cmp	r3, #0
	bne	.L3948
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3948
	ldr	r0, .L4004+4
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L3994
.L3943:
	ldr	r3, [r4, #100]
	cmp	r3, #0
	bne	.L3942
	ldr	r2, [r4, #104]
	cmp	r2, #0
	bne	.L3942
	ldr	ip, [r5, #12]
	movw	r1, #:lower16:autoremove_wake_function
	add	r0, sp, #24
	movt	r1, #:upper16:autoremove_wake_function
	add	r8, sp, #12
	str	r2, [sp, #12]
	add	r9, r4, #128
	str	ip, [sp, #16]
	str	r1, [sp, #20]
	str	r0, [sp, #24]
	str	r0, [sp, #28]
.L3947:
	mov	r2, #1
	mov	r1, r8
	mov	r0, r9
	bl	prepare_to_wait
	ldr	r2, [r4, #100]
	cmp	r2, #0
	bne	.L3945
	ldr	r2, [r4, #104]
	cmp	r2, #0
	bne	.L3945
	ldr	r2, [r5, #12]
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	tst	r2, #1
	beq	.L3995
	mov	r1, r8
	mov	r0, r9
	bl	finish_wait
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r7, #65024
	movt	r7, 65535
.L3939:
	mov	r0, r7
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3994:
	movw	r1, #:lower16:.LC330
	sub	r0, r0, #18
	movt	r1, #:upper16:.LC330
	bl	__dynamic_pr_debug
	b	.L3943
.L3948:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3959
	mov	r3, sp
	bic	r10, r3, #8128
	bic	r10, r10, #63
	b	.L3950
.L3955:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L3959
	ldr	r3, [r5, #48]
	cmp	r3, #0
	bne	.L3996
.L3950:
	ldr	r5, [r4, #152]
	mov	r1, #4096
	mov	r3, #0
	mov	r2, #32
	str	r1, [r5, #4]
	ldr	r0, [r4, #96]
	mov	r1, r5
	str	r3, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L3997
	ldr	r9, .L4004+8
	ldrh	r3, [r9, #-14]
	tst	r3, #4
	bne	.L3998
.L3954:
	ldr	r3, [r4, #156]
	cmp	r3, #0
	bne	.L3955
	ldr	r2, [r4, #104]
	cmp	r2, #0
	bne	.L3955
	ldr	ip, [r10, #12]
	movw	r1, #:lower16:autoremove_wake_function
	add	r0, sp, #24
	movt	r1, #:upper16:autoremove_wake_function
	add	r8, sp, #12
	str	r2, [sp, #12]
	add	fp, r4, #128
	str	ip, [sp, #16]
	str	r1, [sp, #20]
	str	r0, [sp, #24]
	str	r0, [sp, #28]
.L3958:
	mov	r2, #1
	mov	r1, r8
	mov	r0, fp
	bl	prepare_to_wait
	ldr	r2, [r4, #156]
	cmp	r2, #0
	bne	.L3956
	ldr	r2, [r4, #104]
	cmp	r2, #0
	bne	.L3956
	ldr	r2, [r10, #12]
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	tst	r2, #1
	beq	.L3999
	mov	r1, r8
	mov	r0, fp
	bl	finish_wait
	ldr	r0, [r4, #96]
	mov	r7, #65024
	mov	r1, r5
	movt	r7, 65535
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L3951:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L4000
.L3962:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, .L4004+12
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L3939
	movw	r1, #:lower16:.LC332
	mov	r2, r7
	movt	r1, #:upper16:.LC332
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L3939
.L3998:
	movw	r1, #:lower16:.LC322
	mov	r2, r5
	movt	r1, #:upper16:.LC322
	sub	r0, r9, #32
	bl	__dynamic_pr_debug
	b	.L3954
.L3959:
	ldr	r3, [r4, #104]
	mvn	r7, #4
	cmp	r3, #0
	beq	.L3962
.L4000:
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #140
	bl	__wake_up
	b	.L3962
.L3995:
	bl	schedule
	b	.L3947
.L3999:
	bl	schedule
	b	.L3958
.L3997:
	ldr	ip, .L4004+16
	ldrh	r3, [ip, #-6]
	tst	r3, #4
	bne	.L4001
.L3953:
	mov	r3, #1
	mvn	r7, #4
	str	r3, [r4, #104]
	b	.L3951
.L3996:
	ldr	r2, .L4004+20
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	bne	.L4002
.L3960:
	mov	r2, sp
	cmp	r3, r7
	ldr	r0, [sp, #4]
	bic	r1, r2, #8128
	movcc	r2, r3
	bic	r1, r1, #63
	movcs	r2, r7
	ldr	r3, [r1, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r1, r0, r2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L4003
.L3961:
	cmp	r2, #0
	mvnne	r7, #13
	b	.L3951
.L3945:
	mov	r1, r8
	mov	r0, r9
	bl	finish_wait
	b	.L3942
.L3993:
	movw	r1, #:lower16:.LC329
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC329
	bl	__dynamic_pr_debug
	b	.L3940
.L3956:
	mov	r1, r8
	mov	r0, fp
	bl	finish_wait
	b	.L3955
.L4003:
	ldr	r1, [r5]
	bl	__copy_to_user
	mov	r2, r0
	b	.L3961
.L3991:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #15
	b	.L3939
.L4001:
	movw	r1, #:lower16:.LC331
	mov	r3, r0
	mov	r2, r5
	sub	r0, ip, #24
	movt	r1, #:upper16:.LC331
	bl	__dynamic_pr_debug
	b	.L3953
.L4002:
	movw	r1, #:lower16:.LC324
	sub	r0, r9, #8
	movt	r1, #:upper16:.LC324
	mov	r2, r5
	bl	__dynamic_pr_debug
	ldr	r3, [r5, #48]
	b	.L3960
.L3964:
	mvn	r7, #21
	b	.L3939
.L3963:
	mvn	r7, #18
	b	.L3939
.L4005:
	.align	2
.L4004:
	.word	.LANCHOR4-4032
	.word	.LANCHOR4-4014
	.word	.LANCHOR4-3952
	.word	.LANCHOR4-3904
	.word	.LANCHOR4-3984
	.word	.LANCHOR4-3936
	.fnend
	.size	adb_read, .-adb_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_ctrl_ioctl, %function
ccid_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r3, #17154
	str	r6, [sp, #8]
	movt	r3, 16388
	str	lr, [sp, #12]
	ldr	r5, [r0, #124]
	cmp	r1, r3
	ldr	r4, [r5, #112]
	ldr	r0, [r4]
	beq	.L4007
	movw	r3, #17155
	movt	r3, 32772
	cmp	r1, r3
	beq	.L4008
	movw	r3, #17153
	movt	r3, 16388
	cmp	r1, r3
	beq	.L4020
.L4009:
	ldr	r0, [r5, #100]
	mov	r1, r4
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L4021
.L4016:
	mov	r4, #0
.L4006:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4020:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L4022
.L4013:
	mov	r1, #4
	bl	__memzero
.L4019:
	mvn	r4, #13
	b	.L4006
.L4008:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L4019
	mov	r0, r2
	add	r1, r5, #200
	mov	r2, #4
	bl	__copy_to_user
	cmp	r0, #0
	beq	.L4016
	b	.L4019
.L4007:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L4013
	mov	r1, r2
	mov	r2, #4
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L4019
	mov	r3, #4
	str	r3, [r4, #4]
	ldr	r4, [r5, #112]
	b	.L4009
.L4022:
	mov	r1, r2
	mov	r2, #4
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L4019
	mov	r3, #2
	str	r3, [r4, #4]
	ldr	r4, [r5, #112]
	b	.L4009
.L4021:
	movw	r0, #:lower16:.LC333
	mov	r1, r4
	movt	r0, #:upper16:.LC333
	bl	printk
	b	.L4006
	.fnend
	.size	ccid_ctrl_ioctl, .-ccid_ctrl_ioctl
	.align	2
	.global	usb_rmnet_mux_ctrl_write
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_rmnet_mux_ctrl_write, %function
usb_rmnet_mux_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #124]
	ldr	r3, [r4, #368]
	cmp	r3, #0
	beq	.L4038
	cmp	r2, #0
	mov	r5, r2
	beq	.L4039
	cmp	r2, #4096
	bhi	.L4040
	mov	r6, r1
	mov	r0, r2
	mov	r1, #208
	bl	rmnet_mux_alloc_ctrl_pkt
	subs	r9, r0, #0
	beq	.L4041
	mov	r3, sp
	ldr	r0, [r9]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L4042
	mov	r1, r5
	mov	r7, r5
	bl	__memzero
.L4030:
	movw	r0, #:lower16:.LC337
	mov	r2, r7
	ldr	r1, .L4044
	movt	r0, #:upper16:.LC337
	bl	printk
	ldr	r0, [r9]
	bl	kfree
	mov	r0, r9
	bl	kfree
.L4023:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4042:
	mov	r1, r6
	mov	r2, r5
	bl	__copy_from_user
	cmp	r0, #0
	mov	r6, r0
	mov	r7, r0
	bne	.L4030
	add	r7, r4, #364
	add	r8, r4, #372
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #344]
	mov	r1, r4
	mov	r10, r0
	add	r0, r9, #8
	add	r3, r3, #1
	str	r3, [r4, #344]
	ldr	r2, [r1, #336]!
	bl	__list_add
	mov	r0, r7
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore
	ldr	r7, [r4, #84]
	ldr	r3, [r4, #100]
	ldr	r3, [r3]
	.syntax divided
@ 61 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r8]
	add	r2, r2, #1
	strex	r1, r2, [r8]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #1
	beq	.L4043
.L4033:
	mov	r7, r5
	b	.L4023
.L4043:
	mvn	r1, #94
	strb	r1, [r3]
	strb	r2, [r3, #1]
	mov	r2, #32
	strb	r6, [r3, #2]
	strb	r6, [r3, #3]
	ldrb	r1, [r4, #356]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	strb	r6, [r3, #6]
	strb	r6, [r3, #7]
	ldrd	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bge	.L4033
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r1, r3, [r8]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC338
	mov	r7, r5
	movt	r1, #:upper16:.LC338
	add	r0, r0, #32
	bl	dev_err
	b	.L4023
.L4038:
	ldr	r0, .L4044+4
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	mvneq	r7, #18
	beq	.L4023
	movw	r1, #:lower16:.LC308
	ldr	r2, .L4044
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC308
	mvn	r7, #18
	bl	__dynamic_pr_debug
	b	.L4023
.L4041:
	movw	r0, #:lower16:.LC336
	ldr	r1, .L4044
	mvn	r7, #11
	movt	r0, #:upper16:.LC336
	bl	printk
	b	.L4023
.L4040:
	movw	r0, #:lower16:.LC335
	mov	r3, r2
	ldr	r1, .L4044
	movt	r0, #:upper16:.LC335
	mov	r2, #4096
	bl	printk
	mvn	r7, #11
	b	.L4023
.L4039:
	movw	r0, #:lower16:.LC334
	ldr	r1, .L4044
	mvn	r7, #18
	movt	r0, #:upper16:.LC334
	bl	printk
	b	.L4023
.L4045:
	.align	2
.L4044:
	.word	.LANCHOR3+2636
	.word	.LANCHOR4-3888
	.fnend
	.size	usb_rmnet_mux_ctrl_write, .-usb_rmnet_mux_ctrl_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_write, %function
rmnet_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	ldr	r6, .L4092
	mov	r7, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #124]
	ldrh	r3, [r6, #-14]
	tst	r3, #4
	bne	.L4082
.L4047:
	cmp	r5, #0
	beq	.L4083
	cmp	r5, #2048
	bhi	.L4084
	add	r6, r4, #24
	.syntax divided
@ 61 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r6]
	add	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L4051
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L4085
	mov	r1, #208
	mov	r0, r5
	bl	__kmalloc
	subs	r8, r0, #0
	beq	.L4086
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L4087
	mov	r1, r5
	bl	__memzero
	mov	r1, r5
.L4057:
	movw	r0, #:lower16:.LC345
	movt	r0, #:upper16:.LC345
	bl	printk
	mov	r0, r8
	bl	kfree
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #13
	b	.L4046
.L4087:
	mov	r1, r7
	mov	r2, r5
	bl	__copy_from_user
	subs	r1, r0, #0
	bne	.L4057
	add	r9, r4, #52
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r10, r0
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L4059
	ldr	r3, [r0, #92]
	cmp	r3, #0
	beq	.L4059
	mov	r2, r5
	mov	r1, r8
	blx	r3
	subs	r7, r0, #0
	bne	.L4088
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	kfree
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, .L4092+4
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L4089
.L4061:
	mov	r7, r5
.L4046:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4082:
	movw	r1, #:lower16:.LC339
	mov	r3, r2
	ldr	r2, .L4092+8
	movt	r1, #:upper16:.LC339
	sub	r0, r6, #32
	bl	__dynamic_pr_debug
	b	.L4047
.L4089:
	movw	r1, #:lower16:.LC348
	ldr	r2, .L4092+8
	mov	r3, r5
	movt	r1, #:upper16:.LC348
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L4061
.L4051:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC342
	mvn	r7, #15
	movt	r0, #:upper16:.LC342
	bl	printk
	b	.L4046
.L4083:
	ldr	r3, .L4092+12
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L4090
.L4063:
	mvn	r7, #21
	b	.L4046
.L4084:
	ldr	r0, .L4092+16
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L4063
	movw	r1, #:lower16:.LC341
	mov	r2, r5
	movt	r1, #:upper16:.LC341
	mov	r3, #2048
	sub	r0, r0, #32
	mvn	r7, #21
	bl	__dynamic_pr_debug
	b	.L4046
.L4085:
	ldr	r0, .L4092+20
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L4091
.L4054:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #31
	b	.L4046
.L4090:
	movw	r1, #:lower16:.LC340
	sub	r0, r6, #8
	movt	r1, #:upper16:.LC340
	mvn	r7, #21
	bl	__dynamic_pr_debug
	b	.L4046
.L4091:
	movw	r1, #:lower16:.LC343
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC343
	bl	__dynamic_pr_debug
	b	.L4054
.L4086:
	movw	r0, #:lower16:.LC344
	movt	r0, #:upper16:.LC344
	bl	printk
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #11
	b	.L4046
.L4059:
	movw	r0, #:lower16:.LC347
	movt	r0, #:upper16:.LC347
	bl	printk
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	kfree
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r7, #21
	b	.L4046
.L4088:
	movw	r0, #:lower16:.LC346
	mov	r1, r7
	movt	r0, #:upper16:.LC346
	bl	printk
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	kfree
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	b	.L4046
.L4093:
	.align	2
.L4092:
	.word	.LANCHOR4-3856
	.word	.LANCHOR4-3760
	.word	.LANCHOR3+2664
	.word	.LANCHOR4-3840
	.word	.LANCHOR4-3808
	.word	.LANCHOR4-3792
	.fnend
	.size	rmnet_ctrl_write, .-rmnet_ctrl_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_prepare_buffer, %function
ffs_prepare_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r4, r1, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L4096
	mov	r5, r0
	mov	r1, #208
	mov	r0, r4
	bl	__kmalloc
	subs	r6, r0, #0
	beq	.L4097
	mov	r2, r4
	mov	r1, r5
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L4102
.L4094:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4097:
	mvn	r6, #11
	b	.L4094
.L4096:
	mov	r6, r4
	b	.L4094
.L4102:
	mov	r0, r6
	mvn	r6, #13
	bl	kfree
	b	.L4094
	.fnend
	.size	ffs_prepare_buffer, .-ffs_prepare_buffer
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_get_drvinfo, %function
eth_get_drvinfo:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	movw	r1, #:lower16:.LC349
	mov	r5, r0
	movt	r1, #:upper16:.LC349
	str	r6, [sp, #8]
	add	r0, r4, #4
	mov	r2, #32
	str	lr, [sp, #12]
	bl	strlcpy
	movw	r1, #:lower16:.LC350
	add	r0, r4, #36
	movt	r1, #:upper16:.LC350
	mov	r2, #32
	bl	strlcpy
	ldr	r3, [r5, #1164]
	add	r0, r4, #68
	mov	r2, #32
	ldr	r1, [r3, #28]
	bl	strlcpy
	ldr	r3, [r5, #1164]
	add	r0, r4, #100
	mov	r2, #32
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, [r3, #76]
	cmp	r1, #0
	ldreq	r1, [r3, #40]
	b	strlcpy
	.fnend
	.size	eth_get_drvinfo, .-eth_get_drvinfo
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_qc_get_drvinfo, %function
eth_qc_get_drvinfo:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	movw	r1, #:lower16:.LC351
	mov	r5, r0
	movt	r1, #:upper16:.LC351
	str	r6, [sp, #8]
	add	r0, r4, #4
	mov	r2, #32
	str	lr, [sp, #12]
	bl	strlcpy
	movw	r1, #:lower16:.LC350
	add	r0, r4, #36
	movt	r1, #:upper16:.LC350
	mov	r2, #32
	bl	strlcpy
	ldr	r3, [r5, #1164]
	add	r0, r4, #68
	mov	r2, #32
	ldr	r1, [r3, #28]
	bl	strlcpy
	ldr	r3, [r5, #1164]
	add	r0, r4, #100
	mov	r2, #32
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, [r3, #76]
	cmp	r1, #0
	ldreq	r1, [r3, #40]
	b	strlcpy
	.fnend
	.size	eth_qc_get_drvinfo, .-eth_qc_get_drvinfo
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	pm_qos_store, %function
pm_qos_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	mov	r4, r3
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	add	r0, r0, #52
	mov	r1, r5
	mov	r2, #5
	bl	strlcpy
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	pm_qos_store, .-pm_qos_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_transports_store, %function
ecm_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, r2
	ldr	r0, .L4113
	mov	r2, #50
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4114:
	.align	2
.L4113:
	.word	.LANCHOR1+3020
	.fnend
	.size	ecm_transports_store, .-ecm_transports_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_update_pid_and_serial_num, %function
usb_diag_update_pid_and_serial_num:
	.fnstart
	@ args = 0, pretend = 0, frame = 144
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r4, #:lower16:__stack_chk_guard
	mov	r2, #140
	movt	r4, #:upper16:__stack_chk_guard
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	ldr	r3, [r4]
	str	r8, [sp, #16]
	mov	r7, r1
	str	lr, [sp, #20]
	.pad #160
	sub	sp, sp, #160
	mov	r8, r0
	add	r5, sp, #16
	movt	r6, #:upper16:.LANCHOR1
	mov	r0, r5
	mov	r1, #0
	str	r3, [sp, #156]
	bl	memset
	ldr	r2, [r6, #3660]
	cmp	r2, #0
	beq	.L4131
	ldr	r0, .L4135
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L4132
.L4118:
	movw	r3, #10505
	cmp	r7, #0
	str	r8, [sp, #16]
	movt	r3, 28995
	str	r3, [sp, #148]
	beq	.L4133
	movw	r3, #21364
	mov	r1, r7
	movt	r3, 24980
	mov	r2, #128
	add	r0, sp, #20
	str	r3, [sp, #152]
	bl	strlcpy
.L4120:
	ldr	r3, [r6, #3660]
	add	r1, sp, #24
	add	r2, r3, #8
	cmp	r3, r1
	cmpcc	r5, r2
	movcs	r2, #1
	movcc	r2, #0
	tst	r3, #7
	movne	r2, #0
	cmp	r2, #0
	beq	.L4121
	ldrd	r0, [sp, #16]
	strd	r0, [r3]
	ldrd	r0, [sp, #24]
	strd	r0, [r3, #8]
	ldrd	r0, [sp, #32]
	strd	r0, [r3, #16]
	ldrd	r0, [sp, #40]
	strd	r0, [r3, #24]
	ldrd	r0, [sp, #48]
	strd	r0, [r3, #32]
	ldrd	r0, [sp, #56]
	strd	r0, [r3, #40]
	ldrd	r0, [sp, #64]
	strd	r0, [r3, #48]
	ldrd	r0, [sp, #72]
	strd	r0, [r3, #56]
	ldrd	r0, [sp, #80]
	strd	r0, [r3, #64]
	ldrd	r0, [sp, #88]
	strd	r0, [r3, #72]
	ldrd	r0, [sp, #96]
	strd	r0, [r3, #80]
	ldrd	r0, [sp, #104]
	strd	r0, [r3, #88]
	ldrd	r0, [sp, #112]
	strd	r0, [r3, #96]
	ldrd	r0, [sp, #120]
	strd	r0, [r3, #104]
	ldrd	r0, [sp, #128]
	strd	r0, [r3, #112]
	ldrd	r0, [sp, #136]
	strd	r0, [r3, #120]
	ldrd	r0, [sp, #144]
	strd	r0, [r3, #128]
	ldr	r2, [sp, #152]
	str	r2, [r3, #136]
.L4122:
	mov	r0, #0
.L4115:
	ldr	r2, [sp, #156]
	ldr	r3, [r4]
	cmp	r2, r3
	bne	.L4134
	add	sp, sp, #160
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4133:
	mov	r1, #128
	add	r0, sp, #20
	str	r7, [sp, #152]
	bl	__memzero
	b	.L4120
.L4121:
	sub	r3, r3, #4
	mov	r2, r5
	add	r0, sp, #156
.L4123:
	ldr	r1, [r2], #4
	cmp	r2, r0
	str	r1, [r3, #4]!
	bne	.L4123
	b	.L4122
.L4132:
	ldr	r3, .L4135+4
	movw	r1, #:lower16:.LC353
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC353
	stm	sp, {r2, r8}
	str	r7, [sp, #8]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L4118
.L4131:
	ldr	r0, .L4135+8
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	mvneq	r0, #18
	beq	.L4115
	ldr	r3, .L4135+4
	movw	r1, #:lower16:.LC352
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC352
	mov	r2, r3
	bl	__dynamic_pr_debug
	mvn	r0, #18
	b	.L4115
.L4134:
	bl	__stack_chk_fail
.L4136:
	.align	2
.L4135:
	.word	.LANCHOR4-3712
	.word	.LANCHOR3+2684
	.word	.LANCHOR4-3744
	.fnend
	.size	usb_diag_update_pid_and_serial_num, .-usb_diag_update_pid_and_serial_num
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	clients_store, %function
clients_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, r2
	ldr	r0, .L4139
	mov	r2, #32
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4140:
	.align	2
.L4139:
	.word	.LANCHOR1+3664
	.fnend
	.size	clients_store, .-clients_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_xport_names_store, %function
rmnet_xport_names_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, r2
	ldr	r0, .L4143
	mov	r2, #50
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4144:
	.align	2
.L4143:
	.word	.LANCHOR1+3072
	.fnend
	.size	rmnet_xport_names_store, .-rmnet_xport_names_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_transports_store, %function
rmnet_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, r2
	ldr	r0, .L4147
	mov	r2, #50
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4148:
	.align	2
.L4147:
	.word	.LANCHOR1+3124
	.fnend
	.size	rmnet_transports_store, .-rmnet_transports_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_transports_store, %function
mbim_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, r2
	ldr	r0, .L4151
	mov	r2, #50
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4152:
	.align	2
.L4151:
	.word	.LANCHOR1+3176
	.fnend
	.size	mbim_transports_store, .-mbim_transports_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_send, %function
audio_send:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	add	r8, r0, #108
	mov	r0, r8
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #92]
	cmp	r3, #0
	moveq	r1, r0
	beq	.L4171
	ldr	r2, [r5, #120]
	mov	r1, r0
	mov	r0, r8
	cmp	r2, #0
	beq	.L4172
	ldr	r3, [r3, #208]
	movw	r4, #44100
	adr	fp, .L4178
	ldrd	r10, [fp]
	str	r3, [sp, #12]
	bl	_raw_spin_unlock_irqrestore
	add	r0, sp, #16
	bl	ktime_get
	ldr	r2, [sp, #16]
	mov	ip, #0
	ldr	r3, [r5, #136]
	mov	r1, ip
	mov	lr, ip
	ldr	r0, [sp, #20]
	ldr	r9, [r5, #140]
	subs	r6, r2, r3
	sbc	r7, r0, r9
	ldr	r9, [r5, #144]
	.syntax divided
@ 350 "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_audio_source.c" 1
	umull	r2, r3, r10, r6
	mov	r2, #0
@ 0 "" 2
@ 350 "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_audio_source.c" 1
	umlal	r3, r2, fp, r6
	umlal	r3, r1, r10, r7
	mov	r3, #0
	adds	r2, r1, r2
	adc	r3, r3, #0
	umlal	r2, r3, fp, r7
@ 0 "" 2
	.arm
	.syntax unified
	lsr	r0, r2, #18
	mov	r7, r3
	adr	fp, .L4178+8
	ldrd	r10, [fp]
	lsr	r2, r7, #18
	orr	r0, r0, r7, lsl #14
	mov	r6, #440
	mov	r7, #0
	umull	r0, r1, r0, r4
	mla	r1, r4, r2, r1
	.syntax divided
@ 352 "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_audio_source.c" 1
	umull	r2, r3, r10, r0
	cmn	r2, r10
	adcs	r3, r3, fp
	adc	r2, ip, #0
@ 0 "" 2
@ 352 "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_audio_source.c" 1
	umlal	r3, r2, fp, r0
	umlal	r3, lr, r10, r1
	mov	r3, #0
	adds	r2, lr, r2
	adc	r3, r3, #0
	umlal	r2, r3, fp, r1
@ 0 "" 2
	.arm
	.syntax unified
	lsr	r2, r2, #9
	mov	fp, r3
	lsr	r1, fp, #9
	orr	r2, r2, fp, lsl #23
	subs	r3, r2, r9
	str	r3, [sp]
	ldr	r3, [r5, #148]
	sbc	r3, r1, r3
	str	r3, [sp, #4]
	ldrd	r10, [sp]
	cmp	r6, r10
	sbcs	r3, r7, fp
	blt	.L4174
	mov	r3, fp
	cmp	r10, #1
	sbcs	r3, r3, #0
	bge	.L4157
	mov	r2, #44
	mov	r3, #0
	strd	r2, [sp]
.L4157:
	add	r3, r5, #96
	ldrd	r10, [sp]
	ldr	r9, [sp, #12]
	str	r3, [sp, #8]
	b	.L4166
.L4177:
	sub	r7, r7, r1
	mov	r2, r7
	bl	memcpy
	cmp	r4, r7
	mov	r3, r7
	ble	.L4163
	ldr	r0, [r6]
	sub	r3, r4, r7
	mov	r2, r3
	ldr	r1, [r5, #112]
	str	r3, [sp, #12]
	add	r0, r0, r7
	bl	memcpy
	ldr	r3, [sp, #12]
	ldr	r2, [r5, #112]
	add	r3, r2, r3
	str	r3, [r5, #120]
.L4164:
	mov	r0, r8
	str	r4, [r6, #4]
	ldr	r1, [sp]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #104]
	mov	r2, #32
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L4175
	ldr	r0, [r9, #80]
	lsl	r4, r4, #3
	mov	r1, #0
	ldr	r3, [r5, #144]
	ldr	r2, [r5, #148]
	udiv	r4, r4, r0
	subs	r10, r10, r4
	sbc	fp, fp, r1
	adds	r4, r3, r4
	adc	r3, r2, r1
	cmp	r10, #1
	sbcs	r2, fp, #0
	str	r4, [r5, #144]
	str	r3, [r5, #148]
	blt	.L4176
.L4166:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #8]
	mov	r4, r0
	ldr	r6, [r5, #96]
	cmp	r3, r6
	moveq	r6, #0
	beq	.L4158
	mov	r0, r6
	sub	r6, r6, #36
	bl	list_del
.L4158:
	mov	r1, r4
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #92]
	str	r0, [sp]
	cmp	r3, #0
	beq	.L4173
	ldr	r1, [r5, #120]
	cmp	r1, #0
	beq	.L4173
	cmp	r6, #0
	beq	.L4173
	ldr	r4, [r9, #80]
	ldr	r7, [r5, #116]
	ldr	r0, [r6]
	mul	r4, r10, r4
	lsr	r4, r4, #3
	cmp	r4, #256
	movcs	r4, #256
	add	r3, r1, r4
	cmp	r7, r3
	bcc	.L4177
	mov	r2, r4
	str	r4, [sp, #12]
	bl	memcpy
	ldr	r3, [sp, #12]
.L4163:
	ldr	r1, [r5, #116]
	ldr	r2, [r5, #120]
	add	r3, r2, r3
	cmp	r3, r1
	str	r3, [r5, #120]
	ldrcs	r3, [r5, #112]
	strcs	r3, [r5, #120]
	b	.L4164
.L4175:
	mov	r1, r0
	movw	r0, #:lower16:.LC354
	movt	r0, #:upper16:.LC354
	bl	printk
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r4, r0
	add	r0, r6, #36
	ldr	r2, [sp, #8]
	ldr	r1, [r5, #100]
	bl	__list_add
	mov	r1, r4
.L4171:
	mov	r0, r8
.L4172:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L4174:
	subs	r2, r2, #44
	mov	r3, #0
	sbc	r1, r1, #0
	str	r2, [r5, #144]
	mov	r2, #44
	str	r1, [r5, #148]
	strd	r2, [sp]
	b	.L4157
.L4173:
	mov	r1, r0
	mov	r0, r8
	b	.L4172
.L4176:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4179:
	.align	3
.L4178:
	.word	-675924773
	.word	1125899906
	.word	-1924145349
	.word	-2095944041
	.fnend
	.size	audio_send, .-audio_send
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_playback_trigger, %function
audio_pcm_playback_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r3, [r0, #208]
	.pad #12
	sub	sp, sp, #12
	ldr	r4, [r3, #200]
	cmp	r1, #6
	ldrls	pc, [pc, r1, asl #2]
	b	.L4185
.L4183:
	.word	.L4184
	.word	.L4182
	.word	.L4185
	.word	.L4185
	.word	.L4185
	.word	.L4184
	.word	.L4182
.L4182:
	mov	r0, sp
	mov	r6, #0
	bl	ktime_get
	ldrd	r2, [sp]
	mov	r7, #0
	mov	r0, r4
	strd	r2, [r4, #136]
	strd	r6, [r4, #144]
	bl	audio_send
	mov	r0, #0
.L4180:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L4184:
	add	r6, r4, #108
	mov	r5, #0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r2, #0
	mov	r3, #0
	mov	r1, r0
	mov	r0, r6
	strd	r2, [r4, #112]
	str	r5, [r4, #120]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	b	.L4180
.L4185:
	mvn	r0, #21
	b	.L4180
	.fnend
	.size	audio_pcm_playback_trigger, .-audio_pcm_playback_trigger
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_open, %function
audio_pcm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L4189
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	strd	r10, [sp, #20]
	str	lr, [sp, #28]
	ldrd	r2, [ip, #8]
	ldr	r8, [r0, #8]
	ldr	r6, [r0, #208]
	ldrd	r0, [ip]
	ldrd	r4, [ip, #16]
	ldrd	r10, [ip, #48]
	add	lr, r6, #208
	str	r8, [r6, #200]
	strd	r2, [r6, #216]
	ldrd	r2, [ip, #32]
	strd	r0, [r6, #208]
	ldrd	r0, [ip, #24]
	strd	r4, [r6, #224]
	ldrd	r4, [ip, #40]
	strd	r2, [r6, #240]
	ldrd	r2, [ip, #56]
	strd	r0, [r6, #232]
	mov	r0, r6
	strd	r4, [r6, #248]
	strd	r10, [lr, #48]
	strd	r2, [lr, #56]
	bl	snd_pcm_limit_hw_rates
	mov	r3, #2
	mov	r0, #0
	str	r3, [r6, #240]
	str	r7, [r8, #92]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldrd	r10, [sp, #20]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4190:
	.align	2
.L4189:
	.word	.LANCHOR3+2720
	.fnend
	.size	audio_pcm_open, .-audio_pcm_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	functions_show, %function
functions_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	r10, r2
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	add	r3, r0, #24
	mov	r9, r0
	mov	r0, r3
	str	r3, [sp, #4]
	bl	mutex_lock
	ldr	r8, [r9, #500]!
	cmp	r9, r8
	beq	.L4203
	movw	r7, #:lower16:.LC355
	sub	r8, r8, #120
	mov	r5, r10
	movt	r7, #:upper16:.LC355
	mov	fp, #58
.L4192:
	mov	r6, r8
	ldr	r4, [r6, #112]!
	cmp	r6, r4
	sub	r4, r4, #4
	beq	.L4195
.L4196:
	ldr	r3, [r4]
	mov	r0, r5
	mov	r2, r7
	mov	r1, #4096
	ldr	r3, [r3]
	bl	snprintf
	ldr	r4, [r4, #4]
	add	r5, r5, r0
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L4196
.L4195:
	ldr	r8, [r8, #120]
	cmp	r9, r8
	sub	r8, r8, #120
	beq	.L4204
	cmp	r10, r5
	strbne	fp, [r5, #-1]
	b	.L4192
.L4204:
	ldr	r0, [sp, #4]
	bl	mutex_unlock
	cmp	r10, r5
	sub	r0, r5, r10
	beq	.L4191
	mov	r3, #10
	strb	r3, [r5, #-1]
.L4191:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4203:
	ldr	r0, [sp, #4]
	bl	mutex_unlock
	mov	r0, #0
	b	.L4191
	.fnend
	.size	functions_show, .-functions_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_aliases_show, %function
ffs_aliases_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	ldr	r5, [r3, #3232]
	sub	r4, r5, #488
	mov	r0, r4
	bl	mutex_lock
	movw	r1, #:lower16:.LC21
	sub	r2, r5, #320
	mov	r0, r6
	movt	r1, #:upper16:.LC21
	bl	sprintf
	mov	r5, r0
	mov	r0, r4
	bl	mutex_unlock
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ffs_aliases_show, .-ffs_aliases_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_rx_push, %function
gsmd_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4251
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	sub	r10, r0, #28
	str	lr, [sp, #32]
	ldrh	r2, [r3, #-6]
	.pad #20
	sub	sp, sp, #20
	ldr	r6, [r0, #44]
	tst	r2, #4
	bne	.L4246
.L4208:
	sub	r7, r4, #24
	sub	r9, r4, #8
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r0, [r6]
	cmp	r0, #0
	beq	.L4210
	ldr	r5, [r4, #-8]
	cmp	r5, r9
	beq	.L4210
	movw	r8, #:lower16:.LC358
	mov	fp, #0
	movt	r8, #:upper16:.LC358
	str	r8, [sp, #12]
.L4219:
	ldr	r3, [r5, #8]
	cmn	r3, #108
	bne	.L4247
	ldr	r0, .L4251+4
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L4248
.L4210:
	mov	r0, r7
	bl	_raw_spin_unlock_irq
	mov	r0, r10
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gsmd_start_rx
.L4247:
	cmp	r3, #0
	beq	.L4213
	mov	r2, r10
	ldr	r1, .L4251+8
	str	r3, [sp]
	ldr	r3, [r4, #-28]
	ldr	r0, [sp, #12]
	bl	printk
	ldr	r0, [r6]
.L4213:
	bl	smd_write_avail
	cmp	r0, #0
	beq	.L4210
	ldr	r8, [r5, #12]
	cmp	r8, #0
	beq	.L4215
	ldr	r2, [r4, #-20]
	ldr	r1, [r5, #-36]
	ldr	r0, [r6]
	cmp	r2, #0
	subne	r8, r8, r2
	addne	r1, r1, r2
	mov	r2, r8
	bl	smd_write
	cmp	r0, #0
	blt	.L4249
	cmp	r0, r8
	bne	.L4250
	ldr	r2, [r4, #136]
	add	r3, r2, r8
	str	r3, [r4, #136]
.L4215:
	mov	r0, r5
	str	fp, [r4, #-20]
	bl	__list_del_entry
	mov	r1, r4
	mov	r0, r5
	ldr	r2, [r1, #-16]!
	bl	__list_add
	ldr	r0, [r6]
	cmp	r0, #0
	beq	.L4210
	ldr	r5, [r4, #-8]
	cmp	r9, r5
	bne	.L4219
	b	.L4210
.L4246:
	ldr	ip, [r4, #-28]
	movw	r1, #:lower16:.LC356
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC356
	mov	r3, r10
	ldr	r2, .L4251+8
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L4208
.L4248:
	movw	r1, #:lower16:.LC357
	ldr	r2, .L4251+8
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC357
	str	r10, [sp]
	ldr	r3, [r4, #-28]
	bl	__dynamic_pr_debug
	b	.L4210
.L4250:
	ldr	r3, [r4, #-20]
	add	r3, r3, r0
	str	r3, [r4, #-20]
	b	.L4210
.L4249:
	mov	r2, r0
	movw	r0, #:lower16:.LC359
	ldr	r1, .L4251+8
	movt	r0, #:upper16:.LC359
	bl	printk
	b	.L4210
.L4252:
	.align	2
.L4251:
	.word	.LANCHOR4-3696
	.word	.LANCHOR4-3664
	.word	.LANCHOR3+2784
	.fnend
	.size	gsmd_rx_push, .-gsmd_rx_push
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_rx_push, %function
gs_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r3, r0, #60
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	sub	r8, r0, #12
	mov	r0, r3
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	str	r3, [sp]
	bl	_raw_spin_lock_irq
	ldr	r7, [r5, #-52]
	ldr	r4, [r5, #-12]
	cmp	r8, r4
	beq	.L4254
	movw	r3, #:lower16:.LC360
	mov	r9, #0
	movt	r3, #:upper16:.LC360
	mov	r10, r9
	mov	fp, r9
	str	r3, [sp, #4]
	b	.L4261
.L4294:
	sub	r6, r6, r2
	add	r1, r1, r2
	mov	r3, r6
	mov	r2, #0
	mov	r0, r7
	bl	tty_insert_flip_string_fixed_flag
	ldr	r3, [r5, #72]
	cmp	r0, #0
	add	r3, r3, r0
	str	r3, [r5, #72]
	bne	.L4271
.L4259:
	cmp	r0, r6
	bne	.L4272
	str	fp, [r5, #-4]
.L4255:
	mov	r0, r4
	bl	__list_del_entry
	mov	r1, r5
	mov	r0, r4
	ldr	r2, [r1, #-28]!
	bl	__list_add
	ldr	r3, [r5, #-20]
	ldr	r4, [r5, #-12]
	sub	r3, r3, #1
	cmp	r8, r4
	str	r3, [r5, #-20]
	beq	.L4293
.L4261:
	cmp	r7, #0
	beq	.L4255
	ldr	r3, [r7, #156]
	tst	r3, #1
	bne	.L4256
	ldr	r2, [r4, #8]
	cmn	r2, #108
	moveq	r10, #1
	beq	.L4257
	cmp	r2, #0
	beq	.L4257
	ldrb	r1, [r5, #-43]	@ zero_extendqisi2
	ldr	r0, [sp, #4]
	bl	printk
.L4257:
	ldr	r6, [r4, #12]
	cmp	r6, #0
	beq	.L4255
	ldr	r2, [r5, #-4]
	ldr	r1, [r4, #-36]
	cmp	r2, #0
	bne	.L4294
	mov	r3, r6
	mov	r0, r7
	bl	tty_insert_flip_string_fixed_flag
	ldr	r3, [r5, #72]
	cmp	r0, #0
	add	r3, r3, r0
	str	r3, [r5, #72]
	beq	.L4272
.L4271:
	mov	r9, #1
	b	.L4259
.L4272:
	ldr	r3, [r5, #-4]
	add	r3, r3, r0
	str	r3, [r5, #-4]
.L4256:
	cmp	r9, #0
	bne	.L4270
	ldr	r3, [r5, #-12]
	cmp	r8, r3
	beq	.L4265
	ldr	r3, [r7, #156]
	tst	r3, #1
	bne	.L4265
	movw	r0, #:lower16:.LC361
	ldrb	r1, [r5, #-43]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC361
	bl	printk
.L4265:
	cmp	r10, #0
	bne	.L4267
.L4254:
	ldr	r3, [r5, #-56]
	cmp	r3, #0
	beq	.L4267
	ldr	r0, [sp]
	bl	gs_start_rx
.L4267:
	ldr	r0, [sp]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq
.L4293:
	cmp	r7, #0
	moveq	r9, #0
	cmp	r9, #0
	beq	.L4265
.L4270:
	mov	r0, r7
	bl	tty_flip_buffer_push
	ldr	r3, [r5, #-12]
	cmp	r8, r3
	beq	.L4265
	ldr	r3, [r7, #156]
	tst	r3, #1
	bne	.L4265
	movw	r3, #:lower16:.LANCHOR1
	mov	r1, r5
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3320]
	bl	queue_work
	b	.L4265
	.fnend
	.size	gs_rx_push, .-gs_rx_push
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ch_probe, %function
gsdio_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L4319
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r0
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	ldr	r6, [r0]
	ldrh	r3, [ip, #-6]
	tst	r3, #4
	bne	.L4316
.L4296:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4]
	cmp	r3, #0
	beq	.L4301
	ldr	r7, .L4319+4
	ldr	r5, [r4, #24]
	ldrh	r3, [r7, #-14]
	ldr	r9, [r5, #120]
	tst	r3, #4
	ldr	r0, [r9]
	bne	.L4317
.L4299:
	mov	r2, #9
	mov	r1, r6
	bl	strncmp
	cmp	r0, #0
	beq	.L4300
	ldr	r3, [r4]
	cmp	r3, #1
	bls	.L4301
	ldr	r5, [r4, #128]
	ldrh	r3, [r7, #-14]
	ldr	r7, [r5, #120]
	tst	r3, #4
	ldr	r0, [r7]
	bne	.L4318
.L4302:
	mov	r1, r6
	mov	r2, #9
	bl	strncmp
	cmp	r0, #0
	bne	.L4301
.L4300:
	mov	r3, #1
	ldr	r4, [r4, #3324]
	movw	r0, #10000
	str	r3, [r5, #112]
	bl	msecs_to_jiffies
	mov	r2, r0
	add	r1, r5, #124
	mov	r0, r4
	bl	queue_delayed_work
	mov	r0, #0
.L4295:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L4316:
	movw	r1, #:lower16:.LC180
	mov	r3, r6
	ldr	r2, .L4319+8
	sub	r0, ip, #24
	movt	r1, #:upper16:.LC180
	bl	__dynamic_pr_debug
	ldr	r6, [r8]
	b	.L4296
.L4317:
	movw	r1, #:lower16:.LC363
	mov	r3, r0
	ldr	r2, .L4319+8
	movt	r1, #:upper16:.LC363
	sub	r0, r7, #32
	str	r6, [sp]
	bl	__dynamic_pr_debug
	ldr	r6, [r8]
	ldr	r0, [r9]
	b	.L4299
.L4318:
	movw	r1, #:lower16:.LC363
	mov	r3, r0
	ldr	r2, .L4319+8
	movt	r1, #:upper16:.LC363
	ldr	r0, .L4319
	str	r6, [sp]
	bl	__dynamic_pr_debug
	ldr	r0, [r7]
	ldr	r6, [r8]
	b	.L4302
.L4301:
	movw	r0, #:lower16:.LC362
	ldr	r1, .L4319+8
	movt	r0, #:upper16:.LC362
	ldr	r2, [r8]
	bl	printk
	mvn	r0, #18
	b	.L4295
.L4320:
	.align	2
.L4319:
	.word	.LANCHOR4-3648
	.word	.LANCHOR4-3616
	.word	.LANCHOR3+2800
	.fnend
	.size	gsdio_ch_probe, .-gsdio_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ch_remove, %function
gsmd_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4340
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L4339
.L4322:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r6, [r4, #212]
	cmp	r6, #0
	beq	.L4325
	ldr	r3, [r4, #236]
	mov	r2, #20
	ldr	r7, [r5]
	ldr	r5, [r3, #72]
	mov	r1, r7
	ldr	r0, [r5, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4324
	cmp	r6, #1
	bls	.L4325
	ldr	r3, [r4, #340]
	mov	r1, r7
	mov	r2, #20
	ldr	r5, [r3, #72]
	ldr	r0, [r5, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4324
.L4325:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4324:
	add	r4, r5, #8
	mov	r0, #1
	mov	r1, r4
	bl	_clear_bit
	mov	r0, #0
	mov	r1, r4
	bl	_clear_bit
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L4325
	bl	smd_close
	mov	r3, #0
	str	r3, [r5]
	b	.L4325
.L4339:
	movw	r1, #:lower16:.LC180
	sub	r0, r3, #24
	ldr	r2, .L4340+4
	movt	r1, #:upper16:.LC180
	ldr	r3, [r5]
	bl	__dynamic_pr_debug
	b	.L4322
.L4341:
	.align	2
.L4340:
	.word	.LANCHOR4-3600
	.word	.LANCHOR3+2816
	.fnend
	.size	gsmd_ch_remove, .-gsmd_ch_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ch_probe, %function
gsmd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4361
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L4360
.L4343:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r7, [r4, #212]
	cmp	r7, #0
	beq	.L4344
	ldr	r5, [r4, #236]
	mov	r2, #20
	ldr	r8, [r6]
	ldr	r6, [r5, #72]
	mov	r1, r8
	ldr	r0, [r6, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4345
	cmp	r7, #1
	bls	.L4344
	ldr	r5, [r4, #340]
	mov	r1, r8
	mov	r2, #20
	ldr	r6, [r5, #72]
	ldr	r0, [r6, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4345
.L4344:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4345:
	add	r1, r6, #8
	mov	r0, #1
	add	r6, r5, #4
	bl	_set_bit
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #68]
	mov	r7, r0
	cmp	r3, #0
	beq	.L4346
	ldr	r4, [r4, #3328]
	mov	r0, #0
	bl	msecs_to_jiffies
	mov	r2, r0
	add	r1, r5, #76
	mov	r0, r4
	bl	queue_delayed_work
.L4346:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L4344
.L4360:
	movw	r1, #:lower16:.LC180
	sub	r0, r3, #32
	ldr	r2, .L4361+4
	movt	r1, #:upper16:.LC180
	ldr	r3, [r6]
	bl	__dynamic_pr_debug
	b	.L4343
.L4362:
	.align	2
.L4361:
	.word	.LANCHOR4-3568
	.word	.LANCHOR3+2832
	.fnend
	.size	gsmd_ch_probe, .-gsmd_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_ch_probe, %function
gbam_data_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4376
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L4374
.L4364:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #424]
	cmp	r3, #0
	ble	.L4365
	movw	r0, #:lower16:.LC364
	ldr	r1, [r5]
	movt	r0, #:upper16:.LC364
	bl	strcmp
	cmp	r0, #0
	beq	.L4375
.L4365:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4375:
	ldr	r5, [r4, #428]
	mov	r0, #2
	add	r1, r5, #20
	add	r6, r5, #4
	bl	_set_bit
	mov	r0, r6
	add	r7, r5, #8
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L4366
	add	r1, r5, #284
	ldr	r0, [r4, #3652]
	bl	queue_work
.L4366:
	mov	r0, r7
	bl	_raw_spin_unlock
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L4365
.L4374:
	movw	r1, #:lower16:.LC180
	sub	r0, r3, #24
	ldr	r2, .L4376+4
	movt	r1, #:upper16:.LC180
	ldr	r3, [r5]
	bl	__dynamic_pr_debug
	b	.L4364
.L4377:
	.align	2
.L4376:
	.word	.LANCHOR4-3552
	.word	.LANCHOR3+2848
	.fnend
	.size	gbam_data_ch_probe, .-gbam_data_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_ch_remove, %function
grmnet_ctrl_smd_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4429
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L4428
.L4379:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r4, [r5, #512]
	cmp	r4, #0
	beq	.L4380
	mov	r2, #20
	ldr	r1, [r6]
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4381
.L4380:
	ldr	r4, [r5, #596]
	cmp	r4, #0
	beq	.L4382
	mov	r2, #20
	ldr	r1, [r6]
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4381
.L4382:
	ldr	r4, [r5, #680]
	cmp	r4, #0
	beq	.L4383
	mov	r2, #20
	ldr	r1, [r6]
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4381
.L4383:
	ldr	r4, [r5, #764]
	cmp	r4, #0
	beq	.L4384
	mov	r2, #20
	ldr	r1, [r6]
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4381
.L4384:
	ldr	r4, [r5, #848]
	cmp	r4, #0
	beq	.L4385
	mov	r2, #20
	ldr	r1, [r6]
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4381
.L4385:
	ldr	r4, [r5, #932]
	cmp	r4, #0
	beq	.L4387
	mov	r2, #20
	ldr	r1, [r6]
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4381
.L4387:
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4381:
	add	r5, r4, #8
	mov	r0, #1
	mov	r1, r5
	bl	_clear_bit
	mov	r0, #0
	mov	r1, r5
	bl	_clear_bit
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L4387
	bl	smd_close
	mov	r3, #0
	str	r3, [r4]
	b	.L4387
.L4428:
	movw	r1, #:lower16:.LC180
	sub	r0, r3, #32
	ldr	r2, .L4429+4
	movt	r1, #:upper16:.LC180
	ldr	r3, [r6]
	bl	__dynamic_pr_debug
	b	.L4379
.L4430:
	.align	2
.L4429:
	.word	.LANCHOR4-3520
	.word	.LANCHOR3+2868
	.fnend
	.size	grmnet_ctrl_smd_ch_remove, .-grmnet_ctrl_smd_ch_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_ch_probe, %function
grmnet_ctrl_smd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4482
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L4481
.L4432:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r4, [r5, #512]
	cmp	r4, #0
	beq	.L4433
	mov	r2, #20
	ldr	r1, [r6]
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4434
.L4433:
	ldr	r4, [r5, #596]
	cmp	r4, #0
	beq	.L4435
	mov	r2, #20
	ldr	r1, [r6]
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4434
.L4435:
	ldr	r4, [r5, #680]
	cmp	r4, #0
	beq	.L4436
	mov	r2, #20
	ldr	r1, [r6]
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4434
.L4436:
	ldr	r4, [r5, #764]
	cmp	r4, #0
	beq	.L4437
	mov	r2, #20
	ldr	r1, [r6]
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4434
.L4437:
	ldr	r4, [r5, #848]
	cmp	r4, #0
	beq	.L4438
	mov	r2, #20
	ldr	r1, [r6]
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4434
.L4438:
	ldr	r4, [r5, #932]
	cmp	r4, #0
	beq	.L4439
	mov	r2, #20
	ldr	r1, [r6]
	ldr	r0, [r4, #4]
	bl	strncmp
	cmp	r0, #0
	beq	.L4434
.L4439:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4434:
	add	r6, r4, #8
	mov	r0, #2
	mov	r1, r6
	add	r7, r4, #108
	bl	_clear_bit
	mov	r1, r6
	mov	r0, #1
	bl	_set_bit
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #104]
	mov	r6, r0
	cmp	r3, #0
	beq	.L4440
	add	r1, r4, #112
	mov	r2, #0
	ldr	r0, [r5, #3604]
	bl	queue_delayed_work
.L4440:
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L4439
.L4481:
	movw	r1, #:lower16:.LC180
	sub	r0, r3, #24
	ldr	r2, .L4482+4
	movt	r1, #:upper16:.LC180
	ldr	r3, [r6]
	bl	__dynamic_pr_debug
	b	.L4432
.L4483:
	.align	2
.L4482:
	.word	.LANCHOR4-3504
	.word	.LANCHOR3+2896
	.fnend
	.size	grmnet_ctrl_smd_ch_probe, .-grmnet_ctrl_smd_ch_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_remove, %function
ghsic_ctrl_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L4526
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
	ldrh	r3, [ip, #-14]
	tst	r3, #4
	bne	.L4524
.L4485:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r7, [r5, #1016]
	cmp	r7, #0
	beq	.L4486
	ldr	r4, [r5, #1020]
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L4487
	cmp	r7, #1
	bls	.L4486
	ldr	r4, [r5, #1124]
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L4487
	cmp	r7, #2
	beq	.L4486
	ldr	r4, [r5, #1228]
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L4487
	cmp	r7, #3
	beq	.L4486
	ldr	r4, [r5, #1332]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L4487
.L4486:
	movw	r0, #:lower16:.LC182
	mvn	r2, #21
	ldr	r1, .L4526+4
	movt	r0, #:upper16:.LC182
	bl	printk
	mvn	r0, #21
	b	.L4484
.L4487:
	add	r6, r4, #4
	add	r7, r4, #84
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #8]
	mov	r1, r0
	cmp	r5, #0
	beq	.L4525
	ldr	r3, [r4, #48]
	cmp	r3, #0
	bne	.L4492
	mov	r0, r6
	str	r3, [r4, #92]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #120]
	cmp	r3, #0
	beq	.L4494
.L4493:
	mov	r0, r5
	blx	r3
.L4494:
	mov	r1, r7
	mov	r0, #0
	bl	_clear_bit
.L4491:
	mov	r0, #1
	mov	r1, r7
	bl	_clear_bit
	mov	r0, #0
.L4484:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4492:
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #92]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #104]
	cmp	r3, #0
	bne	.L4493
	b	.L4494
.L4524:
	movw	r1, #:lower16:.LC180
	mov	r4, r0
	ldr	r2, .L4526+4
	mov	r3, r6
	sub	r0, ip, #32
	movt	r1, #:upper16:.LC180
	bl	__dynamic_pr_debug
	ldr	r6, [r4]
	b	.L4485
.L4525:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L4491
.L4527:
	.align	2
.L4526:
	.word	.LANCHOR4-3472
	.word	.LANCHOR3+2924
	.fnend
	.size	ghsic_ctrl_remove, .-ghsic_ctrl_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_notify_modem, %function
gsmd_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	ip, [r3, #212]
	cmp	r1, ip
	bcs	.L4556
	cmp	r0, #0
	beq	.L4557
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ands	ip, r2, #1
	str	r6, [sp, #8]
	movne	ip, #2
	str	lr, [sp, #12]
	mov	lr, #104
	mla	r1, lr, r1, r3
	ldr	r4, [r1, #236]
	moveq	r1, #4
	movne	r1, #6
	tst	r2, #2
	moveq	r1, ip
	ldr	r3, [r4, #156]
	cmp	r3, r1
	beq	.L4528
	ldr	r3, [r4, #72]
	str	r1, [r4, #156]
	ldr	r2, [r3, #8]
	tst	r2, #1
	beq	.L4528
	cmp	ip, #0
	ldr	r3, [r3]
	bne	.L4558
.L4536:
	mov	r0, r3
	mvn	r2, r1
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	smd_tiocmset
.L4528:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4558:
	mov	r5, r0
	mov	r0, r3
	bl	smd_tiocmget
	ands	r3, r0, #128
	movne	r1, #9
	moveq	r1, #1
	movne	r3, #8
	tst	r0, #64
	moveq	r1, r3
	tst	r0, #256
	orrne	r1, r1, #2
	str	r1, [r4, #160]
	ldr	r3, [r5, #136]
	cmp	r3, #0
	beq	.L4555
	ldr	r0, [r4, #68]
	blx	r3
.L4555:
	ldr	r3, [r4, #72]
	ldr	r1, [r4, #156]
	ldr	r3, [r3]
	b	.L4536
.L4556:
	movw	r0, #:lower16:.LC176
	mov	r2, r1
	ldr	r1, .L4559
	movt	r0, #:upper16:.LC176
	b	printk
.L4557:
	movw	r0, #:lower16:.LC177
	ldr	r1, .L4559
	movt	r0, #:upper16:.LC177
	b	printk
.L4560:
	.align	2
.L4559:
	.word	.LANCHOR3+2944
	.fnend
	.size	gsmd_notify_modem, .-gsmd_notify_modem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_connect_work, %function
gsmd_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4581
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	sub	r6, r0, #76
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	ldr	r5, [r0, #-4]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L4578
.L4562:
	ldr	r3, [r5, #8]
	tst	r3, #2
	bne	.L4579
.L4561:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4579:
	movw	ip, #:lower16:gsmd_notify
	mov	r2, r5
	ldr	r0, [r5, #4]
	movt	ip, #:upper16:gsmd_notify
	mov	r3, r6
	mov	r1, #0
	str	ip, [sp]
	bl	smd_named_open_on_edge
	subs	r2, r0, #0
	beq	.L4561
	cmn	r2, #11
	bne	.L4566
	ldr	r0, .L4581+4
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L4580
.L4567:
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, #250
	movt	r3, #:upper16:.LANCHOR1
	ldr	r5, [r3, #3328]
	bl	msecs_to_jiffies
	mov	r2, r0
	mov	r1, r4
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_delayed_work
.L4578:
	ldr	ip, [r4, #-76]
	movw	r1, #:lower16:.LC237
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC237
	mov	r3, r6
	ldr	r2, .L4581+8
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L4562
.L4580:
	movw	r1, #:lower16:.LC290
	sub	r0, r0, #32
	ldr	r3, [r5, #4]
	movt	r1, #:upper16:.LC290
	str	r2, [sp]
	ldr	r2, .L4581+8
	bl	__dynamic_pr_debug
	b	.L4567
.L4566:
	mov	r3, r2
	ldr	r1, .L4581+8
	movw	r0, #:lower16:.LC291
	ldr	r2, [r5, #4]
	movt	r0, #:upper16:.LC291
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L4582:
	.align	2
.L4581:
	.word	.LANCHOR4-3456
	.word	.LANCHOR4-3424
	.word	.LANCHOR3+2964
	.fnend
	.size	gsmd_connect_work, .-gsmd_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_write_tobam, %function
gbam_data_write_tobam:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	sub	r10, r0, #60
	str	lr, [sp, #32]
	ldr	r9, [r0, #-4]
	.pad #28
	sub	sp, sp, #28
	add	r6, r9, #4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r9, #12]
	mov	r7, r0
	cmp	r3, #0
	beq	.L4584
	ldr	r1, [r4, #160]
	movw	r8, #:lower16:.LANCHOR0
	str	r10, [sp, #20]
	movt	r8, #:upper16:.LANCHOR0
.L4585:
	ldr	r2, [r8, #624]
	mov	r3, r4
	ldr	fp, [r4, #-12]
	ldr	r0, .L4612
	cmp	r1, r2
	sub	r2, fp, #1
	bcs	.L4586
	ldr	r5, [r3, #-20]!
	cmp	r5, r3
	beq	.L4586
	cmp	r5, #0
	beq	.L4586
	str	r2, [r4, #-12]
	ldrd	r2, [r5]
	mov	r10, #0
	mov	fp, #0
	strd	r10, [r5]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldrh	r1, [r0]
	ldr	r2, [r4, #160]
	ldr	r3, [r4, #180]
	tst	r1, #4
	add	r2, r2, #1
	add	r3, r3, #1
	str	r2, [r4, #160]
	str	r3, [r4, #180]
	bne	.L4609
.L4587:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r1, r5
	ldr	r0, [r4, #-56]
	bl	msm_bam_dmux_write
	mov	fp, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	cmp	fp, #0
	mov	r7, r0
	bne	.L4610
	ldr	r1, [r4, #160]
	ldr	r3, [r4, #200]
	cmp	r1, r3
	strhi	r1, [r4, #200]
	b	.L4585
.L4610:
	ldr	r0, .L4612+4
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L4611
.L4589:
	ldr	r1, [r4, #160]
	mov	r0, r5
	ldr	r2, [r4, #168]
	ldr	r3, [r4, #180]
	sub	r1, r1, #1
	add	r2, r2, #1
	sub	r3, r3, #1
	str	r1, [r4, #160]
	str	r2, [r4, #168]
	str	r3, [r4, #180]
	bl	dev_kfree_skb_any
	ldr	fp, [r4, #-12]
.L4586:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r8, #628]
	cmp	r3, fp
	bls	.L4583
	ldr	r3, [r4, #196]
	cmp	r3, #0
	beq	.L4593
	ldr	r3, [r4, #188]
	mov	r2, #0
	str	r2, [r4, #196]
	add	r3, r3, #1
	str	r3, [r4, #188]
.L4593:
	mov	r0, r9
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gbam_start_rx
.L4583:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4609:
	ldr	ip, [r9]
	movw	r1, #:lower16:.LC365
	str	r2, [sp, #8]
	ldr	r0, [sp, #20]
	movt	r1, #:upper16:.LC365
	ldr	r2, .L4612+8
	stm	sp, {r0, r3}
	mov	r3, r9
	ldr	r0, .L4612+12
	str	ip, [sp, #12]
	bl	__dynamic_pr_debug
	b	.L4587
.L4584:
	mov	r1, r0
	mov	r0, r6
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L4611:
	movw	r1, #:lower16:.LC366
	mov	r3, fp
	ldr	r2, .L4612+8
	movt	r1, #:upper16:.LC366
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L4589
.L4613:
	.align	2
.L4612:
	.word	.LANCHOR4-3414
	.word	.LANCHOR4-3376
	.word	.LANCHOR3+2984
	.word	.LANCHOR4-3432
	.fnend
	.size	gbam_data_write_tobam, .-gbam_data_write_tobam
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam2bam_resume_work, %function
gbam2bam_resume_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4623
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L4621
.L4615:
	mov	r2, #0
	ldrb	r0, [r4, #-203]	@ zero_extendqisi2
	mov	r1, r2
	bl	usb_bam_register_wake_cb
	ldr	r3, [r4, #-200]
	cmp	r3, #7
	beq	.L4622
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4622:
	sub	r0, r4, #196
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	usb_bam_resume
.L4621:
	movw	r1, #:lower16:.LC367
	sub	r0, r3, #24
	ldr	r2, .L4623+4
	movt	r1, #:upper16:.LC367
	bl	__dynamic_pr_debug
	b	.L4615
.L4624:
	.align	2
.L4623:
	.word	.LANCHOR4-3360
	.word	.LANCHOR3+3008
	.fnend
	.size	gbam2bam_resume_work, .-gbam2bam_resume_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam2bam_data_resume_work, %function
bam2bam_data_resume_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L4634
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrh	r3, [r2, #-14]
	tst	r3, #4
	bne	.L4632
.L4626:
	mov	r2, #0
	ldrb	r0, [r4, #-163]	@ zero_extendqisi2
	mov	r1, r2
	bl	usb_bam_register_wake_cb
	ldr	r3, [r4, #-156]
	cmp	r3, #7
	beq	.L4633
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4633:
	sub	r0, r4, #152
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	usb_bam_resume
.L4632:
	ldr	r3, .L4634+4
	movw	r1, #:lower16:.LC368
	sub	r0, r2, #32
	movt	r1, #:upper16:.LC368
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L4626
.L4635:
	.align	2
.L4634:
	.word	.LANCHOR4-3328
	.word	.LANCHOR3+3032
	.fnend
	.size	bam2bam_data_resume_work, .-bam2bam_data_resume_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam2bam_suspend_work, %function
gbam2bam_suspend_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4645
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	sub	r5, r0, #316
	str	lr, [sp, #12]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L4643
.L4637:
	movw	r1, #:lower16:gbam_wake_cb
	mov	r2, r5
	ldrb	r0, [r4, #-187]	@ zero_extendqisi2
	movt	r1, #:upper16:gbam_wake_cb
	bl	usb_bam_register_wake_cb
	ldr	r3, [r4, #-184]
	cmp	r3, #7
	beq	.L4644
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4644:
	movw	r1, #:lower16:gbam_stop
	movw	r0, #:lower16:gbam_start
	mov	r2, r5
	movt	r1, #:upper16:gbam_stop
	movt	r0, #:upper16:gbam_start
	bl	usb_bam_register_start_stop_cbs
	sub	r0, r4, #180
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	usb_bam_suspend
.L4643:
	movw	r1, #:lower16:.LC369
	sub	r0, r3, #24
	ldr	r2, .L4645+4
	movt	r1, #:upper16:.LC369
	bl	__dynamic_pr_debug
	b	.L4637
.L4646:
	.align	2
.L4645:
	.word	.LANCHOR4-3312
	.word	.LANCHOR3+3060
	.fnend
	.size	gbam2bam_suspend_work, .-gbam2bam_suspend_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam2bam_data_suspend_work, %function
bam2bam_data_suspend_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L4656
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	sub	r5, r0, #200
	str	lr, [sp, #12]
	ldrh	r3, [r2, #-14]
	tst	r3, #4
	bne	.L4654
.L4648:
	movw	r1, #:lower16:bam_data_wake_cb
	mov	r2, r5
	ldrb	r0, [r4, #-147]	@ zero_extendqisi2
	movt	r1, #:upper16:bam_data_wake_cb
	bl	usb_bam_register_wake_cb
	ldr	r3, [r4, #-140]
	cmp	r3, #7
	beq	.L4655
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4655:
	movw	r1, #:lower16:bam_data_stop
	movw	r0, #:lower16:bam_data_start
	mov	r2, r5
	movt	r1, #:upper16:bam_data_stop
	movt	r0, #:upper16:bam_data_start
	bl	usb_bam_register_start_stop_cbs
	sub	r0, r4, #136
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	usb_bam_suspend
.L4654:
	ldr	r3, .L4656+4
	movw	r1, #:lower16:.LC370
	sub	r0, r2, #32
	movt	r1, #:upper16:.LC370
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L4648
.L4657:
	.align	2
.L4656:
	.word	.LANCHOR4-3280
	.word	.LANCHOR3+3084
	.fnend
	.size	bam2bam_data_suspend_work, .-bam2bam_data_suspend_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam2bam_connect_work, %function
gbam2bam_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	sub	r5, r0, #284
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #-152]
	.pad #4
	sub	sp, sp, #4
	cmp	r3, #6
	beq	.L4681
	cmp	r3, #7
	beq	.L4682
.L4661:
	sub	r7, r4, #280
	sub	r8, r4, #276
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r0, r8
	bl	_raw_spin_lock
	ldr	r3, [r4, #-272]
	cmp	r3, #0
	beq	.L4683
	ldr	r0, [r3, #88]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r4, #-172]
	beq	.L4684
	str	r5, [r0, #32]
	ldr	r2, [r4, #-172]
	movw	r3, #:lower16:gbam_endless_rx_complete
	movt	r3, #:upper16:gbam_endless_rx_complete
	mov	fp, #0
	movw	r10, #65439
	mov	r6, #32
	movt	r10, 65534
	movt	r6, 1
	str	r3, [r2, #28]
	ldr	r3, [r4, #-172]
	mov	r1, #32
	str	fp, [r3, #4]
	ldr	r2, [r4, #-172]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r3, [r4, #-172]
	ldr	r2, [r4, #-164]
	and	r2, r2, r10
	orr	r2, r2, r6
	str	r2, [r3, #52]
	ldr	r3, [r4, #-272]
	ldr	r0, [r3, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	str	r0, [r4, #-168]
	mov	r0, r8
	bl	_raw_spin_unlock
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-168]
	cmp	r3, fp
	beq	.L4680
	str	r5, [r3, #32]
	ldr	r2, [r4, #-168]
	movw	r3, #:lower16:gbam_endless_tx_complete
	movt	r3, #:upper16:gbam_endless_tx_complete
	mov	r0, r5
	str	r3, [r2, #28]
	ldr	r3, [r4, #-168]
	str	fp, [r3, #4]
	ldr	r2, [r4, #-168]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r2, [r4, #-168]
	ldr	r3, [r4, #-160]
	and	r3, r3, r10
	orr	r3, r3, r6
	str	r3, [r2, #52]
	bl	gbam_start_endless_rx
	mov	r0, r5
	bl	gbam_start_endless_tx
	ldr	r3, [r4, #-152]
	cmp	r3, #6
	beq	.L4685
.L4666:
	ldr	r0, .L4689
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L4686
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4685:
	ldr	r3, [r4, #-284]
	cmp	r3, #0
	bne	.L4666
	movw	r0, #:lower16:gbam_peer_reset_cb
	mov	r1, r5
	movt	r0, #:upper16:gbam_peer_reset_cb
	bl	usb_bam_register_peer_reset_cb
	mov	r0, #1
	bl	usb_bam_client_ready
	subs	r2, r0, #0
	beq	.L4666
	ldr	r1, .L4689+4
	movw	r0, #:lower16:.LC376
	movt	r0, #:upper16:.LC376
.L4678:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L4681:
	bl	usb_bam_reset_complete
	sub	r1, r4, #164
	ldrb	r0, [r4, #-156]	@ zero_extendqisi2
	bl	usb_bam_connect
	subs	r2, r0, #0
	bne	.L4687
	sub	r1, r4, #160
	ldrb	r0, [r4, #-155]	@ zero_extendqisi2
	bl	usb_bam_connect
	subs	r2, r0, #0
	beq	.L4661
	movw	r0, #:lower16:.LC372
	ldr	r1, .L4689+4
	movt	r0, #:upper16:.LC372
	b	.L4678
.L4683:
	ldr	r0, .L4689+8
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L4688
.L4663:
	mov	r0, r8
	bl	_raw_spin_unlock
	mov	r1, r9
	mov	r0, r7
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L4686:
	ldr	r2, .L4689+4
	movw	r1, #:lower16:.LC377
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC377
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	__dynamic_pr_debug
.L4688:
	movw	r1, #:lower16:.LC374
	ldr	r2, .L4689+4
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC374
	bl	__dynamic_pr_debug
	b	.L4663
.L4684:
	mov	r0, r8
	bl	_raw_spin_unlock
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L4680:
	ldr	r1, .L4689+4
	movw	r0, #:lower16:.LC375
	movt	r0, #:upper16:.LC375
.L4679:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L4687:
	movw	r0, #:lower16:.LC371
	ldr	r1, .L4689+4
	movt	r0, #:upper16:.LC371
	b	.L4678
.L4682:
	movw	r0, #:lower16:.LC373
	ldr	r1, .L4689+4
	movt	r0, #:upper16:.LC373
	b	.L4679
.L4690:
	.align	2
.L4689:
	.word	.LANCHOR4-3232
	.word	.LANCHOR3+3112
	.word	.LANCHOR4-3264
	.fnend
	.size	gbam2bam_connect_work, .-gbam2bam_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam2bam_data_connect_work, %function
bam2bam_data_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L4765
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r5, r0, #168
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r2, #-6]
	tst	r3, #4
	bne	.L4752
.L4692:
	ldr	r3, [r4, #-108]
	cmp	r3, #7
	bne	.L4693
	ldr	r3, [r4, #-112]
	cmp	r3, #1
	beq	.L4753
	cmp	r3, #0
	mov	r2, #5
	mov	r3, #0
	str	r3, [r4, #-92]
	str	r2, [r4, #-80]
	beq	.L4754
.L4695:
	sub	r6, r4, #104
	mov	r0, r6
	bl	usb_bam_connect_ipa
	subs	r3, r0, #0
	bne	.L4748
	ldr	r3, [r4, #-112]
	mov	r2, #17
	mov	r1, #1
	str	r1, [r4, #-92]
	str	r2, [r4, #-80]
	cmp	r3, #0
	beq	.L4755
	mov	r0, r6
	bl	usb_bam_connect_ipa
	subs	r3, r0, #0
	bne	.L4748
.L4698:
	ldr	r3, [r4, #-112]
	cmp	r3, #1
	beq	.L4756
.L4699:
	ldr	r3, [r4, #-164]
	cmp	r3, #0
	beq	.L4757
	ldr	r0, [r3, #12]
	cmp	r0, #0
	beq	.L4758
	ldr	r3, [r0, #8]
	mov	r1, #208
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r4, #-132]
	beq	.L4691
	str	r5, [r0, #32]
	ldr	r2, [r4, #-132]
	movw	r3, #:lower16:bam_data_endless_rx_complete
	movt	r3, #:upper16:bam_data_endless_rx_complete
	mov	r8, #0
	movw	r7, #65439
	mov	r6, #32
	movt	r7, 65534
	movt	r6, 1
	str	r3, [r2, #28]
	ldr	r3, [r4, #-132]
	mov	r1, #208
	str	r8, [r3, #4]
	ldr	r3, [r4, #-132]
	ldrb	r2, [r3, #26]	@ zero_extendqisi2
	orr	r2, r2, #1
	strb	r2, [r3, #26]
	ldr	r2, [r4, #-132]
	ldr	r3, [r4, #-124]
	and	r3, r3, r7
	orr	r3, r3, r6
	str	r3, [r2, #52]
	ldr	r3, [r4, #-164]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, r8
	str	r0, [r4, #-128]
	beq	.L4691
	str	r5, [r0, #32]
	ldr	r2, [r4, #-128]
	movw	r3, #:lower16:bam_data_endless_tx_complete
	movt	r3, #:upper16:bam_data_endless_tx_complete
	str	r3, [r2, #28]
	ldr	r3, [r4, #-128]
	str	r8, [r3, #4]
	ldr	r2, [r4, #-128]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r2, [r4, #-128]
	ldr	r3, [r4, #-120]
	and	r3, r3, r7
	orr	r3, r3, r6
	str	r3, [r2, #52]
	ldr	r3, [r4, #-164]
	cmp	r3, r8
	beq	.L4707
	ldr	r6, .L4765+4
	ldrh	r2, [r6, #-14]
	tst	r2, #4
	bne	.L4759
.L4708:
	ldr	r0, [r3, #12]
	mov	r2, #32
	ldr	r1, [r4, #-132]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L4709
	movw	r0, #:lower16:.LC112
	ldr	r1, .L4765+8
	movt	r0, #:upper16:.LC112
	bl	printk
.L4709:
	ldr	r3, [r4, #-164]
	cmp	r3, #0
	beq	.L4707
	ldr	r2, .L4765+12
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	bne	.L4760
.L4711:
	ldr	r0, [r3, #8]
	mov	r2, #32
	ldr	r1, [r4, #-128]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L4761
.L4707:
	ldr	r3, [r4, #-108]
	cmp	r3, #7
	bne	.L4762
.L4712:
	ldr	r0, .L4765+16
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L4763
.L4691:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4762:
	movw	r0, #:lower16:bam_data_peer_reset_cb
	mov	r1, r5
	movt	r0, #:upper16:bam_data_peer_reset_cb
	bl	usb_bam_register_peer_reset_cb
	mov	r0, #1
	bl	usb_bam_client_ready
	subs	r3, r0, #0
	beq	.L4712
	ldr	r2, .L4765+20
	movw	r0, #:lower16:.LC385
	movt	r0, #:upper16:.LC385
.L4749:
	mov	r1, r2
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L4754:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #3696]
	str	r2, [r4, #-12]
	ldr	r3, [r3, #3716]
	str	r3, [r4, #-16]
	b	.L4695
.L4755:
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, r6
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #3700]
	str	r2, [r4, #-12]
	ldr	r3, [r3, #3716]
	str	r3, [r4, #-16]
	bl	usb_bam_connect_ipa
	subs	r3, r0, #0
	beq	.L4698
.L4748:
	movw	r0, #:lower16:.LC380
	ldr	r2, .L4765+20
	movt	r0, #:upper16:.LC380
	b	.L4749
.L4693:
	bl	usb_bam_reset_complete
	sub	r1, r4, #124
	ldrb	r0, [r4, #-116]	@ zero_extendqisi2
	bl	usb_bam_connect
	subs	r2, r0, #0
	bne	.L4764
	sub	r1, r4, #120
	ldrb	r0, [r4, #-115]	@ zero_extendqisi2
	bl	usb_bam_connect
	subs	r2, r0, #0
	beq	.L4699
	ldr	r1, .L4765+20
	movw	r0, #:lower16:.LC372
	movt	r0, #:upper16:.LC372
.L4750:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L4752:
	ldr	r3, .L4765+20
	movw	r1, #:lower16:.LC378
	sub	r0, r2, #24
	movt	r1, #:upper16:.LC378
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L4692
.L4763:
	ldr	r3, .L4765+20
	movw	r1, #:lower16:.LC386
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC386
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	mov	r2, r3
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__dynamic_pr_debug
.L4760:
	ldr	r3, .L4765+24
	movw	r1, #:lower16:.LC384
	sub	r0, r6, #8
	movt	r1, #:upper16:.LC384
	mov	r2, r3
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #-164]
	b	.L4711
.L4759:
	ldr	r3, .L4765+8
	movw	r1, #:lower16:.LC384
	sub	r0, r6, #32
	movt	r1, #:upper16:.LC384
	mov	r2, r3
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #-164]
	b	.L4708
.L4758:
	ldr	r1, .L4765+20
	movw	r0, #:lower16:.LC383
	movt	r0, #:upper16:.LC383
.L4751:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L4761:
	movw	r0, #:lower16:.LC112
	ldr	r1, .L4765+24
	movt	r0, #:upper16:.LC112
	bl	printk
	b	.L4707
.L4764:
	movw	r0, #:lower16:.LC371
	ldr	r1, .L4765+20
	movt	r0, #:upper16:.LC371
	b	.L4750
.L4757:
	movw	r0, #:lower16:.LC382
	ldr	r1, .L4765+20
	movt	r0, #:upper16:.LC382
	b	.L4751
.L4756:
	ldr	r2, .L4765+20
	movw	r0, #:lower16:.LC381
	movt	r0, #:upper16:.LC381
.L4747:
	mov	r1, r2
	b	.L4750
.L4753:
	movw	r0, #:lower16:.LC379
	ldr	r2, .L4765+20
	movt	r0, #:upper16:.LC379
	b	.L4747
.L4766:
	.align	2
.L4765:
	.word	.LANCHOR4-3216
	.word	.LANCHOR4-3184
	.word	.LANCHOR3+3164
	.word	.LANCHOR4-3168
	.word	.LANCHOR4-3136
	.word	.LANCHOR3+3136
	.word	.LANCHOR3+3192
	.fnend
	.size	bam2bam_data_connect_work, .-bam2bam_data_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_peer_reset_cb, %function
gbam_peer_reset_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4798
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L4794
.L4768:
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L4769
	ldr	r2, [r3, #84]
	cmp	r2, #0
	beq	.L4769
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L4769
	ldr	r0, [r3, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	ldr	r0, [r3, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #12]
	mov	r3, #0
	mov	r0, r3
	ldr	r2, [r2, #84]
	str	r3, [r2]
	ldr	r2, [r4, #12]
	ldr	r2, [r2, #88]
	str	r3, [r2]
	bl	usb_bam_a2_reset
	subs	r2, r0, #0
	beq	.L4775
	movw	r0, #:lower16:.LC390
	ldr	r1, .L4798+4
	movt	r0, #:upper16:.LC390
	bl	printk
.L4775:
	ldr	r3, [r4, #12]
	ldr	r3, [r3, #84]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	ldr	r3, [r4, #12]
	bne	.L4795
	ldr	r3, [r3, #84]
	str	r4, [r3]
	ldr	r3, [r4, #12]
	ldr	r3, [r3, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	ldr	r3, [r4, #12]
	bne	.L4796
	ldr	r3, [r3, #88]
	mov	r0, r4
	str	r4, [r3]
	bl	gbam_start_endless_rx
	mov	r0, r4
	bl	gbam_start_endless_tx
.L4774:
	ldr	r3, [r4, #132]
	cmp	r3, #6
	beq	.L4797
.L4777:
	mov	r5, #0
.L4767:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4769:
	mov	r0, #0
	bl	usb_bam_a2_reset
	subs	r2, r0, #0
	beq	.L4774
	movw	r0, #:lower16:.LC390
	ldr	r1, .L4798+4
	movt	r0, #:upper16:.LC390
	bl	printk
	b	.L4774
.L4797:
	ldr	r5, [r4]
	cmp	r5, #0
	bne	.L4777
	mov	r1, r5
	mov	r0, r5
	bl	usb_bam_register_peer_reset_cb
	b	.L4767
.L4794:
	movw	r1, #:lower16:.LC387
	sub	r0, r3, #24
	ldr	r2, .L4798+4
	movt	r1, #:upper16:.LC387
	bl	__dynamic_pr_debug
	b	.L4768
.L4795:
	movw	r0, #:lower16:.LC388
	ldr	r1, .L4798+4
	movt	r0, #:upper16:.LC388
	ldr	r2, [r3, #84]
	bl	printk
	b	.L4767
.L4796:
	movw	r0, #:lower16:.LC389
	ldr	r1, .L4798+4
	movt	r0, #:upper16:.LC389
	ldr	r2, [r3, #88]
	bl	printk
	ldr	r3, [r4, #12]
	mov	r2, #0
	ldr	r3, [r3, #84]
	str	r2, [r3]
	b	.L4767
.L4799:
	.align	2
.L4798:
	.word	.LANCHOR4-3120
	.word	.LANCHOR3+3220
	.fnend
	.size	gbam_peer_reset_cb, .-gbam_peer_reset_cb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_peer_reset_cb, %function
bam_data_peer_reset_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L4810
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L4808
.L4801:
	mov	r0, #0
	bl	usb_bam_a2_reset
	subs	r4, r0, #0
	bne	.L4809
	mov	r1, r4
	bl	usb_bam_register_peer_reset_cb
.L4800:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4808:
	ldr	r3, .L4810+4
	movw	r1, #:lower16:.LC391
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC391
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L4801
.L4809:
	ldr	r2, .L4810+4
	movw	r0, #:lower16:.LC392
	mov	r3, r4
	movt	r0, #:upper16:.LC392
	mov	r1, r2
	bl	printk
	b	.L4800
.L4811:
	.align	2
.L4810:
	.word	.LANCHOR4-3088
	.word	.LANCHOR3+3240
	.fnend
	.size	bam_data_peer_reset_cb, .-bam_data_peer_reset_cb
	.section	.init.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_init, %function
gqti_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	push	{r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L4815
	mov	r2, #56
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	bne	.L4813
	movw	r0, #:lower16:.LC393
	mvn	r7, #11
	movt	r0, #:upper16:.LC393
	bl	printk
	b	.L4812
.L4815:
	mov	r4, #16
.L4813:
	mov	r5, #0
	add	r3, r4, #44
	ldr	r2, .L4820
	movw	r1, #:lower16:.LC394
	movw	r6, #:lower16:.LANCHOR1
	movt	r1, #:upper16:.LC394
	add	r0, r4, #32
	str	r5, [r4, #8]
	movt	r6, #:upper16:.LANCHOR1
	str	r5, [r4, #12]
	str	r5, [r4, #16]
	str	r5, [r4, #20]
	str	r5, [r4, #24]
	str	r5, [r4, #28]
	str	r3, [r4, #44]
	str	r3, [r4, #48]
	str	r5, [r4, #52]
	bl	__init_waitqueue_head
	ldr	r0, .L4820+4
	str	r4, [r6, #3228]
	bl	misc_register
	subs	r7, r0, #0
	beq	.L4812
	movw	r0, #:lower16:.LC395
	movt	r0, #:upper16:.LC395
	bl	printk
	mov	r0, r4
	bl	kfree
	str	r5, [r6, #3228]
.L4812:
	mov	r0, r7
	pop	{r4, r5, r6, r7, r8, pc}
.L4821:
	.align	2
.L4820:
	.word	.LANCHOR1+3724
	.word	.LANCHOR0+632
	.fnend
	.size	gqti_ctrl_init, .-gqti_ctrl_init
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	accessory_function_init, %function
accessory_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r3, #44]
	cmp	r0, #0
	beq	.L4825
	movw	r2, #1788
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L4831
.L4823:
	mov	r5, #0
	movw	r1, #:lower16:.LC396
	ldr	r2, .L4833
	movt	r1, #:upper16:.LC396
	add	r0, r4, #1664
	str	r5, [r4, #88]
	mov	r6, #2560
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC397
	add	r0, r4, #1664
	ldr	r2, .L4833
	movt	r1, #:upper16:.LC397
	add	r0, r0, #12
	bl	__init_waitqueue_head
	add	r0, r4, #1648
	add	r2, r4, #1760
	str	r5, [r4, #1652]
	add	r0, r0, #8
	mov	ip, r2
	add	r3, r4, #1776
	add	r1, r4, #1696
	str	r0, [r4, #1656]
	add	ip, ip, #12
	add	r3, r3, #4
	str	r0, [r4, #1660]
	movw	r0, #:lower16:acc_start_work
	add	r2, r2, #4
	movt	r0, #:upper16:acc_start_work
	add	r1, r1, #8
	str	r6, [r4, #1700]
	str	r1, [r4, #1704]
	str	r0, [r4, #1712]
	add	r0, r4, #1712
	add	r0, r0, #4
	str	r1, [r4, #1708]
	mov	r1, r5
	str	r2, [r4, #1764]
	str	r2, [r4, #1768]
	mov	r2, r5
	movw	r5, #:lower16:.LANCHOR1
	str	ip, [r4, #1772]
	movt	r5, #:upper16:.LANCHOR1
	str	ip, [r4, #1776]
	str	r3, [r4, #1780]
	str	r3, [r4, #1784]
	bl	init_timer_key
	movw	r0, #:lower16:delayed_work_timer_fn
	add	r1, r4, #1696
	str	r6, [r4, #1748]
	add	r3, r4, #1744
	movw	r2, #:lower16:acc_hid_work
	str	r4, [r5, #2488]
	add	r3, r3, #8
	movt	r0, #:upper16:delayed_work_timer_fn
	add	r1, r1, #4
	movt	r2, #:upper16:acc_hid_work
	str	r0, [r4, #1732]
	ldr	r0, .L4833+4
	str	r1, [r4, #1736]
	str	r3, [r4, #1752]
	str	r3, [r4, #1756]
	str	r2, [r4, #1760]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L4832
.L4822:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4825:
	mov	r4, #16
	b	.L4823
.L4831:
	mvn	r5, #11
	b	.L4822
.L4832:
	mov	r0, r4
	bl	kfree
	movw	r0, #:lower16:.LC398
	movt	r0, #:upper16:.LC398
	bl	printk
	b	.L4822
.L4834:
	.align	2
.L4833:
	.word	.LANCHOR1+3724
	.word	.LANCHOR0+668
	.fnend
	.size	accessory_function_init, .-accessory_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_function_init, %function
rndis_qc_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r0, [r3, #36]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4, #4]
	beq	.L4837
	mov	r2, #272
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	bne	.L4837
	mvn	r4, #11
.L4835:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4837:
	movw	r0, #:lower16:.LC399
	ldr	r1, .L4844
	movt	r0, #:upper16:.LC399
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	ldr	r0, .L4844+4
	movt	r3, #:upper16:.LANCHOR1
	str	r2, [r3, #2492]
	bl	misc_register
	subs	r4, r0, #0
	beq	.L4835
	movw	r0, #:lower16:.LC400
	ldr	r1, .L4844
	movt	r0, #:upper16:.LC400
	bl	printk
	b	.L4835
.L4845:
	.align	2
.L4844:
	.word	.LANCHOR3+3264
	.word	.LANCHOR0+704
	.fnend
	.size	rndis_qc_function_init, .-rndis_qc_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_init, %function
mtp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r3, #32]
	.pad #8
	sub	sp, sp, #8
	cmp	r0, #0
	beq	.L4850
	mov	r2, #256
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L4857
.L4847:
	mov	r5, #0
	movw	r1, #:lower16:.LC396
	ldr	r2, .L4859
	movt	r1, #:upper16:.LC396
	add	r0, r4, #132
	str	r5, [r4, #88]
	movw	r6, #:lower16:.LANCHOR1
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC397
	ldr	r2, .L4859
	add	r0, r4, #144
	movt	r1, #:upper16:.LC397
	movt	r6, #:upper16:.LANCHOR1
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC401
	ldr	r2, .L4859
	add	r0, r4, #156
	movt	r1, #:upper16:.LC401
	bl	__init_waitqueue_head
	add	r2, r4, #116
	add	r1, r4, #124
	str	r5, [r4, #108]
	movw	r0, #:lower16:.LC402
	mov	r3, r5
	str	r5, [r4, #112]
	movt	r0, #:upper16:.LC402
	str	r2, [r4, #116]
	str	r2, [r4, #120]
	mov	r2, #1
	str	r1, [r4, #124]
	str	r1, [r4, #128]
	mov	r1, #10
	str	r5, [sp]
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #180]
	beq	.L4852
	movw	r2, #:lower16:send_file_work
	movw	r3, #:lower16:receive_file_work
	ldr	r0, .L4859+4
	movt	r2, #:upper16:send_file_work
	mov	r1, #2560
	str	r4, [r6, #2500]
	add	ip, r4, #188
	movt	r3, #:upper16:receive_file_work
	str	r1, [r4, #184]
	str	r2, [r4, #196]
	add	r2, r4, #204
	str	ip, [r4, #188]
	str	ip, [r4, #192]
	str	r1, [r4, #200]
	str	r2, [r4, #204]
	str	r2, [r4, #208]
	str	r3, [r4, #212]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L4858
.L4846:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4850:
	mov	r4, #16
	b	.L4847
.L4857:
	mvn	r5, #11
	b	.L4846
.L4858:
	ldr	r0, [r4, #180]
	bl	destroy_workqueue
.L4849:
	mov	r3, #0
	mov	r0, r4
	str	r3, [r6, #2500]
	bl	kfree
	movw	r0, #:lower16:.LC403
	movt	r0, #:upper16:.LC403
	bl	printk
	b	.L4846
.L4852:
	mvn	r5, #11
	b	.L4849
.L4860:
	.align	2
.L4859:
	.word	.LANCHOR1+3724
	.word	.LANCHOR0+740
	.fnend
	.size	mtp_function_init, .-mtp_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_init, %function
adb_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:kmalloc_caches
	mov	r5, r0
	movt	r4, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r4, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5, #4]
	beq	.L4863
	mov	r2, #8
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5, #4]
	beq	.L4866
.L4863:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L4867
	mov	r2, #164
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L4866
.L4865:
	mov	r5, #0
	movw	r1, #:lower16:.LC396
	ldr	r2, .L4876
	movt	r1, #:upper16:.LC396
	add	r0, r4, #128
	str	r5, [r4, #88]
	movw	r6, #:lower16:.LANCHOR1
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC397
	ldr	r2, .L4876
	add	r0, r4, #140
	movt	r1, #:upper16:.LC397
	movt	r6, #:upper16:.LANCHOR1
	bl	__init_waitqueue_head
	add	r3, r4, #120
	mov	r2, #1
	ldr	r0, .L4876+4
	str	r5, [r4, #108]
	str	r5, [r4, #112]
	str	r5, [r4, #116]
	str	r3, [r4, #120]
	str	r3, [r4, #124]
	strb	r2, [r4, #161]
	str	r4, [r6, #3596]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L4875
.L4861:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4867:
	mov	r4, #16
	b	.L4865
.L4866:
	mvn	r5, #11
	b	.L4861
.L4875:
	mov	r0, r4
	bl	kfree
	movw	r0, #:lower16:.LC404
	movt	r0, #:upper16:.LC404
	bl	printk
	b	.L4861
.L4877:
	.align	2
.L4876:
	.word	.LANCHOR1+3724
	.word	.LANCHOR0+776
	.fnend
	.size	adb_function_init, .-adb_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_sdio_function_init, %function
rmnet_smd_sdio_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r3, #36]
	.pad #8
	sub	sp, sp, #8
	cmp	r0, #0
	beq	.L4886
	mov	r2, #424
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L4893
.L4879:
	mov	r5, #0
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	movw	r0, #:lower16:.LC405
	mov	r3, r5
	movt	r0, #:upper16:.LC405
	str	r5, [sp]
	mov	r2, #1
	mov	r1, #10
	str	r4, [r6, #2480]
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #376]
	beq	.L4888
	movw	r3, #:lower16:rmnet_mux_disconnect_work
	mov	r8, #2560
	str	r5, [r4, #176]
	movt	r3, #:upper16:rmnet_mux_disconnect_work
	add	r0, r4, #384
	str	r5, [r4, #364]
	movw	r1, #:lower16:rmnet_mux_smd_data_rx_tlet
	mov	r2, r4
	str	r5, [r4, #368]
	movt	r1, #:upper16:rmnet_mux_smd_data_rx_tlet
	str	r5, [r4, #372]
	add	r7, r4, #104
	str	r8, [r4, #380]
	str	r0, [r4, #384]
	str	r0, [r4, #388]
	add	r0, r4, #152
	str	r3, [r4, #392]
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_mux_smd_data_tx_tlet
	mov	r2, r4
	movt	r1, #:upper16:rmnet_mux_smd_data_tx_tlet
	add	r0, r4, #132
	bl	tasklet_init
	movw	r1, #:lower16:.LC406
	ldr	r2, .L4895
	add	r0, r4, #180
	movt	r1, #:upper16:.LC406
	bl	__init_waitqueue_head
	mov	r3, r7
	movw	r2, #:lower16:rmnet_mux_sdio_data_rx_work
	movw	ip, #:lower16:rmnet_mux_open_sdio_work
	add	lr, r4, #112
	movt	ip, #:upper16:rmnet_mux_open_sdio_work
	add	r0, r4, #120
	str	r3, [r4, #104]
	add	r1, r4, #244
	movt	r2, #:upper16:rmnet_mux_sdio_data_rx_work
	str	r3, [r4, #108]
	add	r3, r4, #260
	str	lr, [r4, #112]
	add	r7, r4, #192
	str	lr, [r4, #116]
	str	r0, [r4, #120]
	str	r0, [r4, #124]
	add	r0, r4, #272
	str	r8, [r4, #240]
	str	r1, [r4, #244]
	str	r1, [r4, #248]
	mov	r1, r5
	str	r2, [r4, #252]
	mov	r2, r5
	str	r8, [r4, #256]
	add	r8, r4, #256
	str	r3, [r4, #260]
	str	r3, [r4, #264]
	str	ip, [r4, #268]
	bl	init_timer_key
	add	r3, r4, #200
	add	r1, r4, #224
	ldr	r2, .L4895
	movw	r0, #:lower16:delayed_work_timer_fn
	add	lr, r4, #216
	str	r7, [r4, #192]
	add	ip, r4, #312
	movt	r0, #:upper16:delayed_work_timer_fn
	str	r7, [r4, #196]
	str	r3, [r4, #200]
	str	r3, [r4, #204]
	add	r3, r4, #336
	str	r1, [r4, #224]
	str	r1, [r4, #228]
	movw	r1, #:lower16:.LC407
	movt	r1, #:upper16:.LC407
	str	r5, [r4, #208]
	str	r5, [r4, #212]
	str	lr, [r4, #216]
	str	lr, [r4, #220]
	str	r5, [r4, #232]
	str	r5, [r4, #236]
	str	r0, [r4, #288]
	add	r0, r4, #320
	str	r8, [r4, #292]
	str	ip, [r4, #312]
	str	ip, [r4, #316]
	str	r3, [r4, #336]
	str	r3, [r4, #340]
	bl	__init_waitqueue_head
	ldr	r0, .L4895+4
	bl	misc_register
	subs	r5, r0, #0
	bne	.L4882
	movw	r0, #:lower16:.LC408
	mov	r1, r5
	movt	r0, #:upper16:.LC408
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r6, #3724]
	beq	.L4878
	cmn	r0, #4096
	bls	.L4894
.L4878:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4886:
	mov	r4, #16
	b	.L4879
.L4888:
	mvn	r5, #11
.L4881:
	mov	r0, r4
	bl	kfree
	b	.L4878
.L4894:
	ldr	ip, .L4895+8
	movw	r0, #:lower16:.LC273
	mov	r3, r4
	movt	r0, #:upper16:.LC273
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	bne	.L4878
	ldr	r0, [r6, #3724]
	bl	debugfs_remove
	str	r5, [r6, #3724]
	b	.L4878
.L4893:
	mvn	r5, #11
	b	.L4878
.L4882:
	movw	r0, #:lower16:.LC409
	ldr	r1, .L4895+12
	movt	r0, #:upper16:.LC409
	bl	printk
	ldr	r0, .L4895+16
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L4884
	movw	r1, #:lower16:.LC410
	sub	r0, r0, #24
	ldr	r2, .L4895+20
	movt	r1, #:upper16:.LC410
	mov	r3, r5
	bl	__dynamic_pr_debug
.L4884:
	ldr	r0, [r4, #376]
	bl	destroy_workqueue
	b	.L4881
.L4896:
	.align	2
.L4895:
	.word	.LANCHOR1+3724
	.word	.LANCHOR0+812
	.word	.LANCHOR3+3328
	.word	.LANCHOR3+3280
	.word	.LANCHOR4-3072
	.word	.LANCHOR3+3308
	.fnend
	.size	rmnet_smd_sdio_function_init, .-rmnet_smd_sdio_function_init
	.section	.exit.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_cleanup, %function
gqti_ctrl_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, .L4899
	bl	misc_deregister
	ldr	r0, [r4, #3228]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #3228]
	pop	{r4, pc}
.L4900:
	.align	2
.L4899:
	.word	.LANCHOR0+632
	.fnend
	.size	gqti_ctrl_cleanup, .-gqti_ctrl_cleanup
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	accessory_function_cleanup, %function
accessory_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	ldr	r0, .L4903
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	bl	misc_deregister
	ldr	r0, [r4, #2488]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #2488]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4904:
	.align	2
.L4903:
	.word	.LANCHOR0+668
	.fnend
	.size	accessory_function_cleanup, .-accessory_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_function_cleanup, %function
ncm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r0
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, .L4907
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	misc_deregister
	ldr	r0, [r4, #3728]
	bl	kfree
	ldr	r0, [r5, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r5, #4]
	str	r3, [r4, #3728]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4908:
	.align	2
.L4907:
	.word	.LANCHOR0+848
	.fnend
	.size	ncm_function_cleanup, .-ncm_function_cleanup
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_function_cleanup, %function
rndis_qc_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC411
	ldr	r1, .L4911
	movt	r0, #:upper16:.LC411
	bl	printk
	ldr	r0, .L4911+4
	bl	misc_deregister
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	ldr	r0, [r4, #4]
	movt	r3, #:upper16:.LANCHOR1
	str	r2, [r3, #2496]
	pop	{r4, lr}
	b	kfree
.L4912:
	.align	2
.L4911:
	.word	.LANCHOR3+3436
	.word	.LANCHOR0+704
	.fnend
	.size	rndis_qc_function_cleanup, .-rndis_qc_function_cleanup
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_cleanup, %function
mtp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r5, [r4, #2500]
	str	lr, [sp, #12]
	cmp	r5, #0
	beq	.L4913
	ldr	r0, .L4916
	bl	misc_deregister
	ldr	r0, [r5, #180]
	bl	destroy_workqueue
	mov	r3, #0
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	str	r3, [r4, #2500]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	kfree
.L4913:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4917:
	.align	2
.L4916:
	.word	.LANCHOR0+740
	.fnend
	.size	mtp_function_cleanup, .-mtp_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_cleanup, %function
ccid_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR0
	str	lr, [sp, #4]
	add	r0, r4, #884
	bl	misc_deregister
	add	r0, r4, #920
	bl	misc_deregister
	movw	r3, #:lower16:.LANCHOR1
	ldr	r4, [sp]
	movt	r3, #:upper16:.LANCHOR1
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r0, [r3, #3592]
	b	kfree
	.fnend
	.size	ccid_function_cleanup, .-ccid_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_cleanup, %function
adb_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r0
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, .L4922
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	misc_deregister
	ldr	r0, [r4, #3596]
	bl	kfree
	mov	r3, #0
	ldr	r0, [r5, #4]
	ldr	r6, [sp, #8]
	str	r3, [r4, #3596]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
.L4923:
	.align	2
.L4922:
	.word	.LANCHOR0+776
	.fnend
	.size	adb_function_cleanup, .-adb_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_sdio_function_cleanup, %function
rmnet_smd_sdio_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r4, [r3, #2480]
	ldr	r0, [r3, #3724]
	bl	debugfs_remove_recursive
	ldr	r0, .L4926
	bl	misc_deregister
	ldr	r0, [r4, #128]
	bl	smd_close
	ldr	r0, [r4, #376]
	bl	destroy_workqueue
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
.L4927:
	.align	2
.L4926:
	.word	.LANCHOR0+812
	.fnend
	.size	rmnet_smd_sdio_function_cleanup, .-rmnet_smd_sdio_function_cleanup
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_function_cleanup, %function
mbim_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	movw	r0, #:lower16:.LC412
	ldr	r6, .L4933
	mov	r5, #0
	movw	r4, #:lower16:.LANCHOR1
	ldr	r1, .L4933+4
	movt	r0, #:upper16:.LC412
	mov	r7, r5
	movt	r4, #:upper16:.LANCHOR1
	bl	printk
.L4929:
	ldr	r3, [r4, #3740]
	add	r6, r6, #8
	cmp	r3, r5
	bls	.L4932
	ldr	r0, [r6, #-8]
	add	r5, r5, #1
	bl	kfree
	str	r7, [r6, #-8]
	b	.L4929
.L4932:
	ldr	r0, .L4933+8
	str	r7, [r4, #3740]
	bl	misc_deregister
	str	r7, [r4, #2504]
	pop	{r4, r5, r6, r7, r8, pc}
.L4934:
	.align	2
.L4933:
	.word	.LANCHOR1+3732
	.word	.LANCHOR3+3456
	.word	.LANCHOR0+956
	.fnend
	.size	mbim_function_cleanup, .-mbim_function_cleanup
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_io_complete, %function
ffs_epfile_io_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L4935
	ldr	r2, [r3, #4]
	cmp	r2, #0
	beq	.L4935
	ldr	r2, [r1, #32]
	cmp	r2, #0
	beq	.L4935
	ldr	r2, [r1, #44]
	cmp	r2, #0
	ldreq	r2, [r1, #48]
	str	r2, [r3, #24]
	ldr	r0, [r1, #32]
	b	complete
.L4935:
	bx	lr
	.fnend
	.size	ffs_epfile_io_complete, .-ffs_epfile_io_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_transmit, %function
f_midi_transmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #88]
	.pad #20
	sub	sp, sp, #20
	cmp	r3, #0
	str	r3, [sp, #4]
	beq	.L4947
	cmp	r1, #0
	mov	r10, r0
	mov	r5, r1
	beq	.L4993
.L4949:
	movw	r3, #:lower16:f_midi_complete
	mov	r1, #0
	movt	r3, #:upper16:f_midi_complete
	mov	r2, r1
	add	r7, r10, #100
	add	fp, r10, #164
	str	r1, [r5, #4]
	str	r3, [r5, #28]
	b	.L4980
.L4950:
	cmp	fp, r7
	beq	.L4994
.L4980:
	ldr	r4, [r7, #132]
	ldr	r6, [r7, #4]!
	cmp	r4, #0
	beq	.L4950
	ldr	r3, [r4, #4]
	cmp	r6, #0
	cmpne	r3, #0
	beq	.L4950
	ldr	r1, [r10, #336]
	add	r3, r2, #3
	cmp	r1, r3
	bls	.L4950
	mov	r8, #1
	b	.L4979
.L4996:
	ldm	r5, {r0, r2}
	orr	r3, r3, #15
	mov	ip, #0
	strb	r3, [r0, r2]
	add	r3, r0, r2
	add	r2, r2, #4
	strb	r1, [r3, #1]
	strb	ip, [r3, #2]
	strb	ip, [r3, #3]
	str	r2, [r5, #4]
.L4953:
	ldr	r3, [r10, #336]
	add	r1, r2, #3
	cmp	r1, r3
	bcs	.L4950
.L4979:
	mov	r2, #1
	add	r1, sp, #15
	mov	r0, r6
	bl	snd_rawmidi_transmit
	cmp	r0, #1
	bne	.L4995
	ldrb	r3, [r4, #8]	@ zero_extendqisi2
	ldrb	r1, [sp, #15]	@ zero_extendqisi2
	lsl	r3, r3, #4
	cmp	r1, #247
	uxtb	r3, r3
	bhi	.L4996
	cmp	r1, #239
	bls	.L4954
	sub	r2, r1, #241
	cmp	r2, #6
	ldrls	pc, [pc, r2, asl #2]
	b	.L4955
.L4957:
	.word	.L4960
	.word	.L4961
	.word	.L4960
	.word	.L4964
	.word	.L4964
	.word	.L4958
	.word	.L4956
.L4963:
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	orr	r3, r3, #7
	mvn	r0, #8
	ldrb	ip, [r4, #11]	@ zero_extendqisi2
	ldr	r2, [r5]
	ldr	r1, [r5, #4]
.L4991:
	strb	r3, [r2, r1]
	add	r3, r2, r1
	add	r1, r1, #4
	strb	lr, [r3, #1]
	strb	ip, [r3, #2]
	strb	r0, [r3, #3]
	str	r1, [r5, #4]
.L4964:
	mov	r3, #0
	strb	r3, [r4, #9]
	ldr	r2, [r5, #4]
	b	.L4953
.L4961:
	mov	r2, #2
	mvn	r3, #13
	strb	r2, [r4, #9]
	strb	r3, [r4, #10]
	ldr	r2, [r5, #4]
	b	.L4953
.L4960:
	strb	r8, [r4, #9]
	strb	r1, [r4, #10]
	ldr	r2, [r5, #4]
	b	.L4953
.L4956:
	ldrb	r2, [r4, #9]	@ zero_extendqisi2
	cmp	r2, #5
	beq	.L4962
	cmp	r2, #6
	beq	.L4963
	cmp	r2, #4
	bne	.L4964
	ldr	r2, [r5]
	orr	r3, r3, #5
	mov	r0, #0
	ldr	r1, [r5, #4]
	mvn	ip, #8
	strb	r3, [r2, r1]
	add	r3, r2, r1
	add	r1, r1, #4
	strb	ip, [r3, #1]
	strb	r0, [r3, #2]
	strb	r0, [r3, #3]
	mov	r3, #0
	str	r1, [r5, #4]
	strb	r3, [r4, #9]
	ldr	r2, [r5, #4]
	b	.L4953
.L4958:
	ldr	r2, [r5]
	orr	r3, r3, #5
	mov	r0, #0
	ldr	r1, [r5, #4]
	mvn	ip, #9
	strb	r3, [r2, r1]
	add	r3, r2, r1
	add	r1, r1, #4
	strb	ip, [r3, #1]
	strb	r0, [r3, #2]
	strb	r0, [r3, #3]
	str	r1, [r5, #4]
	strb	r0, [r4, #9]
	ldr	r2, [r5, #4]
	b	.L4953
.L4954:
	tst	r1, #128
	bne	.L4997
	ldrb	r2, [r4, #9]	@ zero_extendqisi2
	sub	r2, r2, #1
	cmp	r2, #5
	ldrls	pc, [pc, r2, asl #2]
	b	.L4992
.L4969:
	.word	.L4974
	.word	.L4973
	.word	.L4972
	.word	.L4971
	.word	.L4970
	.word	.L4968
.L4968:
	ldr	r0, [r5]
	orr	r3, r3, #4
	ldr	r9, [r5]
	ldr	r2, [r5, #4]
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	ldrb	ip, [r4, #11]	@ zero_extendqisi2
	add	r0, r0, r2
	strb	r3, [r9, r2]
	add	r2, r2, #4
	mov	r3, #4
	strb	lr, [r0, #1]
	strb	ip, [r0, #2]
	strb	r1, [r0, #3]
	str	r2, [r5, #4]
	strb	r3, [r4, #9]
.L4992:
	ldr	r2, [r5, #4]
	b	.L4953
.L4970:
	mov	r3, #6
	strb	r3, [r4, #9]
	strb	r1, [r4, #11]
	ldr	r2, [r5, #4]
	b	.L4953
.L4971:
	mov	r3, #5
	strb	r3, [r4, #9]
	strb	r1, [r4, #10]
	ldr	r2, [r5, #4]
	b	.L4953
.L4972:
	ldrb	ip, [r4, #10]	@ zero_extendqisi2
	ldrb	lr, [r4, #11]	@ zero_extendqisi2
	cmp	ip, #239
	movls	r2, #2
	movhi	r2, #0
	orrls	r3, r3, ip, lsr #4
	orrhi	r3, r3, #3
	strb	r2, [r4, #9]
	ldr	r0, [r5]
	ldr	r9, [r5]
	ldr	r2, [r5, #4]
	add	r0, r0, r2
	strb	r3, [r9, r2]
	add	r2, r2, #4
	strb	ip, [r0, #1]
	strb	lr, [r0, #2]
	strb	r1, [r0, #3]
	str	r2, [r5, #4]
	b	.L4953
.L4974:
	ldrb	ip, [r4, #10]	@ zero_extendqisi2
	mov	lr, #0
	cmp	ip, #239
	movhi	r2, #0
	orrls	r3, r3, ip, lsr #4
	orrhi	r3, r3, #2
	strbhi	r2, [r4, #9]
	ldm	r5, {r0, r2}
	strb	r3, [r0, r2]
	add	r3, r0, r2
	add	r2, r2, #4
	strb	ip, [r3, #1]
	strb	r1, [r3, #2]
	strb	lr, [r3, #3]
	str	r2, [r5, #4]
	b	.L4953
.L4973:
	mov	r3, #3
	strb	r3, [r4, #9]
	strb	r1, [r4, #11]
	ldr	r2, [r5, #4]
	b	.L4953
.L4997:
	add	r3, r1, #64
	strb	r1, [r4, #10]
	uxtb	r3, r3
	cmp	r3, #31
	movhi	r3, #2
	strbls	r0, [r4, #9]
	strbhi	r3, [r4, #9]
	ldr	r2, [r5, #4]
	b	.L4953
.L4995:
	mov	r3, #0
	cmp	fp, r7
	str	r3, [r4, #4]
	ldr	r2, [r5, #4]
	bne	.L4980
.L4994:
	cmp	r2, #0
	beq	.L4981
	ldr	r0, [sp, #4]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
.L4947:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4981:
	ldr	r0, [r5]
	bl	kfree
	ldr	r0, [sp, #4]
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	b	.L4947
.L4962:
	orr	r3, r3, #6
	mvn	ip, #8
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	mov	r0, #0
	ldr	r2, [r5]
	ldr	r1, [r5, #4]
	b	.L4991
.L4993:
	mov	r0, r3
	ldr	r1, [r10, #336]
	bl	midi_alloc_ep_req
	subs	r5, r0, #0
	bne	.L4949
	ldr	r0, [r10, #84]
	movw	r1, #:lower16:.LC413
	movt	r1, #:upper16:.LC413
	add	r0, r0, #32
	bl	dev_err
	b	.L4947
.L4955:
	mov	r2, #5
	mvn	r3, #15
	strb	r2, [r4, #9]
	strb	r3, [r4, #10]
	ldr	r2, [r5, #4]
	b	.L4953
	.fnend
	.size	f_midi_transmit, .-f_midi_transmit
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_in_tasklet, %function
f_midi_in_tasklet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r1, #0
	b	f_midi_transmit
	.fnend
	.size	f_midi_in_tasklet, .-f_midi_in_tasklet
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_register_card, %function
f_midi_register_card:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r3, #0
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	ldr	r0, [r0, #328]
	add	r2, sp, #8
	str	r2, [sp]
	mov	r2, r3
	ldr	r1, [r4, #332]
	bl	snd_card_create
	subs	r5, r0, #0
	blt	.L5010
	ldr	r0, [sp, #8]
	mov	r2, r4
	mov	r1, #8192
	ldr	r3, .L5014
	str	r0, [r4, #96]
	bl	snd_device_new
	subs	r5, r0, #0
	blt	.L5011
	movw	r2, #:lower16:.LC416
	movw	r3, #:lower16:.LC417
	ldr	r0, [sp, #8]
	movt	r2, #:upper16:.LC416
	movt	r3, #:upper16:.LC417
	ldrh	r8, [r3, #4]
	movw	r1, #:lower16:.LC418
	ldrb	r7, [r3, #6]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC418
	ldm	r2, {r5, lr}
	ldr	r3, [r3]
	ldr	ip, [r2, #8]
	str	r5, [r0, #20]	@ unaligned
	str	lr, [r0, #24]	@ unaligned
	str	ip, [r0, #28]	@ unaligned
	str	r3, [r0, #36]	@ unaligned
	strh	r8, [r0, #40]	@ unaligned
	strb	r7, [r0, #42]
	str	r5, [r0, #68]	@ unaligned
	str	lr, [r0, #72]	@ unaligned
	str	ip, [r0, #76]	@ unaligned
	bl	snd_component_add
	ldr	r0, [sp, #8]
	add	r3, sp, #12
	mov	r2, #0
	ldr	ip, [r4, #320]
	str	r3, [sp, #4]
	ldr	r3, [r4, #324]
	add	r1, r0, #68
	str	ip, [sp]
	bl	snd_rawmidi_new
	subs	r5, r0, #0
	blt	.L5012
	ldr	r1, [sp, #8]
	ldr	r5, [sp, #12]
	add	r1, r1, #36
	add	r0, r5, #84
	str	r5, [r4, #100]
	bl	strcpy
	mov	r3, #7
	mov	r0, r5
	ldr	r2, .L5014+4
	mov	r1, #0
	str	r3, [r5, #16]
	str	r4, [r5, #200]
	bl	snd_rawmidi_set_ops
	ldr	r2, .L5014+8
	mov	r1, #1
	ldr	r0, [sp, #12]
	bl	snd_rawmidi_set_ops
	ldr	r0, [sp, #8]
	bl	snd_card_register
	subs	r5, r0, #0
	movge	r5, #0
	blt	.L5013
.L4999:
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5010:
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC414
	movt	r1, #:upper16:.LC414
	add	r0, r0, #32
	bl	dev_err
.L5001:
	ldr	r0, [r4, #96]
	cmp	r0, #0
	beq	.L4999
	bl	snd_card_free
	mov	r3, #0
	str	r3, [r4, #96]
	b	.L4999
.L5012:
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC419
	mov	r2, r5
	movt	r1, #:upper16:.LC419
	add	r0, r0, #32
	bl	dev_err
	b	.L5001
.L5011:
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC415
	mov	r2, r5
	movt	r1, #:upper16:.LC415
	add	r0, r0, #32
	bl	dev_err
	b	.L5001
.L5013:
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC420
	movt	r1, #:upper16:.LC420
	add	r0, r0, #32
	bl	dev_err
	b	.L5001
.L5015:
	.align	2
.L5014:
	.word	.LANCHOR0+992
	.word	.LANCHOR0+1004
	.word	.LANCHOR0+1020
	.fnend
	.size	f_midi_register_card, .-f_midi_register_card
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_in_trigger, %function
f_midi_in_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #12]
	ldr	r2, [r0, #28]
	add	r3, r3, #58
	ldr	r2, [r2, #200]
	ldr	r3, [r2, r3, lsl #2]
	cmp	r3, #0
	bxeq	lr
	cmp	r1, #0
	str	r1, [r3, #4]
	bxeq	lr
	add	r1, r2, #304
	mov	r0, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	add	r4, r2, #300
	str	lr, [sp, #4]
	bl	_test_and_set_bit
	cmp	r0, #0
	beq	.L5027
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5027:
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	__tasklet_hi_schedule
	.fnend
	.size	f_midi_in_trigger, .-f_midi_in_trigger
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	tx_complete, %function
tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r2, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0]
	cmp	r4, #0
	beq	.L5061
	ldr	ip, [r4, #4]
	cmp	ip, #0
	beq	.L5061
	ldr	r2, [r1, #44]
	mov	r5, r1
	ldr	r7, [r4, #8]
	cmn	r2, #104
	beq	.L5049
	cmp	r2, #0
	beq	.L5032
	cmn	r2, #108
	beq	.L5049
	ldr	r2, [r7, #252]
	add	r2, r2, #1
	str	r2, [r7, #252]
	ldr	r2, [r4, #8]
.L5031:
	ldr	r3, [r2, #236]
	add	r6, r4, #16
	add	r8, r4, #20
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r2, #236]
	bl	_raw_spin_lock
	mov	r2, r8
	add	r0, r5, #36
	ldr	r1, [r4, #24]
	bl	__list_add
	ldr	r3, [r4, #4]
	ldr	r9, [r5, #32]
	ldrb	r3, [r3, #124]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L5062
.L5047:
	mov	r3, #0
	str	r3, [r5]
.L5042:
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r0, r9
	bl	dev_kfree_skb_any
.L5041:
	ldr	r3, [r4, #8]
	ldr	r0, [r3, #160]
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	beq	.L5063
.L5028:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L5062:
	cmp	r9, #0
	beq	.L5064
	ldr	r0, [r4, #48]
	cmp	r0, #0
	beq	.L5047
	movw	r1, #32800
	bl	__kmalloc
	mov	r3, #0
	str	r0, [r5]
	str	r3, [r5, #32]
	b	.L5042
.L5032:
	ldrb	r0, [r1, #26]	@ zero_extendqisi2
	ldr	r2, [r1, #4]
	ldr	r1, [r7, #244]
	tst	r0, #2
	subeq	r2, r2, #1
	add	r2, r1, r2
	str	r2, [r7, #244]
	ldr	r2, [r4, #8]
	b	.L5031
.L5061:
	ldr	r3, [r2, #8]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r3, [r3, #12]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	bx	r3	@ indirect register sibling call
.L5049:
	mov	r2, r7
	b	.L5031
.L5063:
	ldr	r4, [r3, #576]
	add	r1, r4, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L5028
	ldr	r0, [r4, #4]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__netif_schedule
.L5064:
	ldr	r3, [r4, #40]
	sub	r3, r3, #1
	str	r3, [r4, #40]
	str	r9, [r5, #4]
	ldr	r5, [r4, #20]
	cmp	r8, r5
	beq	.L5060
	ldr	r3, [r4, #4]
	mov	r0, r5
	ldr	r9, [r3, #88]
	bl	list_del
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r3, [r5, #-32]
	cmp	r3, #0
	beq	.L5037
	ldr	r2, [r4, #4]
	ldrb	r1, [r2, #104]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L5051
	ldr	r2, [r2, #112]
	cmp	r3, r2
	beq	.L5065
.L5051:
	mov	r1, #1
.L5038:
	ldrb	r2, [r5, #-10]	@ zero_extendqisi2
	bfi	r2, r1, #1, #1
	uxtb	r1, r2
	strb	r2, [r5, #-10]
	tst	r1, #2
	beq	.L5039
	ldrb	r2, [r4, #124]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L5039
	ldrh	r0, [r9, #20]
	sdiv	r2, r3, r0
	mls	r2, r0, r2, r3
	cmp	r2, #0
	bne	.L5039
	bfi	r1, r2, #1, #1
	add	r3, r3, #1
	strb	r1, [r5, #-10]
.L5039:
	str	r3, [r5, #-32]
	ldr	r3, [r9, #8]
	mov	r2, #32
	mov	r0, r9
	sub	r1, r5, #36
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L5066
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r4, #40]
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #40]
	bl	_raw_spin_unlock
	movw	r3, #:lower16:jiffies
	movt	r3, #:upper16:jiffies
	ldr	r3, [r3]
	str	r3, [r7, #604]
	b	.L5041
.L5037:
	mov	r0, r6
.L5059:
	bl	_raw_spin_lock
	mov	r2, r8
	mov	r0, r5
	ldr	r1, [r4, #24]
	bl	__list_add
.L5060:
	mov	r0, r6
	bl	_raw_spin_unlock
	b	.L5041
.L5065:
	ldrh	r2, [r9, #20]
	sdiv	r1, r3, r2
	mls	r1, r2, r1, r3
	adds	r1, r1, #0
	movne	r1, #1
	b	.L5038
.L5066:
	movw	r0, #:lower16:.LC421
	ldr	r1, .L5067
	movt	r0, #:upper16:.LC421
	bl	printk
	mov	r3, #0
	mov	r0, r6
	str	r3, [r5, #-32]
	b	.L5059
.L5068:
	.align	2
.L5067:
	.word	.LANCHOR3+3472
	.fnend
	.size	tx_complete, .-tx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_qc_open, %function
eth_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r0, #1160]
	ldr	r5, [r0, #160]
	ubfx	r5, r5, #2, #1
	cmp	r5, #0
	beq	.L5084
.L5071:
	add	r5, r4, #1152
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r0, [r4, #1156]
	cmp	r0, #0
	beq	.L5073
	ldr	r3, [r0, #112]
	cmp	r3, #0
	beq	.L5073
	blx	r3
.L5073:
	mov	r0, r5
	bl	_raw_spin_unlock_irq
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5084:
	bl	netif_carrier_off
	ldr	r0, [r4, #1160]
	bl	netif_carrier_on
	ldr	r3, [r4, #1160]
	mov	r0, r5
	ldr	r5, [r3, #576]
	add	r1, r5, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L5071
	ldr	r0, [r5, #4]
	bl	__netif_schedule
	b	.L5071
	.fnend
	.size	eth_qc_open, .-eth_qc_open
	.align	2
	.global	rndis_rm_hdr
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_rm_hdr, %function
rndis_rm_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR1
	mov	r8, r2
	movt	r9, #:upper16:.LANCHOR1
	str	lr, [sp, #24]
	ldr	ip, [r1, #80]
	ldr	r3, [r9, #3744]
	.pad #12
	sub	sp, sp, #12
	cmp	ip, r3
	strhi	ip, [r9, #3744]
	bhi	.L5087
	cmp	ip, #0
	beq	.L5101
.L5087:
	cmp	ip, #43
	bls	.L5089
	ldr	r0, [r4, #172]
	ldr	r6, [r0, #4]	@ unaligned
	ldr	r1, [r0, #8]	@ unaligned
	ldr	r5, [r0, #12]	@ unaligned
	ldr	lr, [r0]	@ unaligned
	cmp	ip, r6
	bcc	.L5090
	add	r3, r5, r1
	add	r3, r3, #8
	cmp	r3, r6
	bhi	.L5090
	cmp	lr, #1
	bne	.L5091
	mov	r7, #0
	b	.L5092
.L5106:
	cmp	r2, r5
	beq	.L5096
	bl	skb_clone
	sub	r1, r6, #44
	subs	r6, r0, #0
	mov	r0, r4
	beq	.L5105
	bl	skb_pull
	mov	r1, r5
	mov	r0, r6
	bl	skb_trim
	mov	r1, r6
	mov	r0, r8
	bl	skb_queue_tail
	ldr	ip, [r4, #80]
	cmp	ip, #0
	beq	.L5088
	cmp	ip, #43
	bls	.L5089
	ldr	r0, [r4, #172]
	ldr	r6, [r0, #4]	@ unaligned
	ldr	r1, [r0, #8]	@ unaligned
	ldr	r5, [r0, #12]	@ unaligned
	ldr	lr, [r0]	@ unaligned
	cmp	ip, r6
	add	r2, r1, r5
	bcc	.L5090
	add	r2, r2, #8
	cmp	r2, r6
	bhi	.L5090
	cmp	lr, #1
	bne	.L5091
.L5092:
	add	r1, r1, #8
	mov	r0, r4
	bl	skb_pull
	ldr	r3, [r4, #80]
	mov	r1, #32
	mov	r0, r4
	add	r7, r7, #1
	cmp	r3, r5
	sub	r2, r3, #1
	bne	.L5106
.L5096:
	mov	r1, r5
	mov	r0, r4
	bl	skb_trim
.L5088:
	ldr	r3, [r9, #3748]
	mov	r0, r8
	mov	r1, r4
	cmp	r3, r7
	strlt	r7, [r9, #3748]
	bl	skb_queue_tail
	mov	r0, #0
.L5085:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L5101:
	mov	r7, ip
	b	.L5088
.L5105:
	movw	r0, #:lower16:.LC424
	ldr	r1, .L5107
	movt	r0, #:upper16:.LC424
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #11
	b	.L5085
.L5091:
	movw	r0, #:lower16:.LC423
	mov	r3, r1
	stm	sp, {r5, ip}
	mov	r2, r6
	mov	r1, lr
	movt	r0, #:upper16:.LC423
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #21
	b	.L5085
.L5090:
	ldr	lr, [r0]	@ unaligned
	movw	r0, #:lower16:.LC423
	mov	r3, r1
	mov	r2, r6
	movt	r0, #:upper16:.LC423
	stm	sp, {r5, ip}
	mov	r1, lr
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #74
	b	.L5085
.L5089:
	movw	r0, #:lower16:.LC422
	mov	r1, ip
	mov	r2, #44
	movt	r0, #:upper16:.LC422
	bl	printk
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #21
	b	.L5085
.L5108:
	.align	2
.L5107:
	.word	.LANCHOR3+3484
	.fnend
	.size	rndis_rm_hdr, .-rndis_rm_hdr
	.align	2
	.global	rndis_qc_rm_hdr
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_rm_hdr, %function
rndis_qc_rm_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #172]
	ldr	r3, [r5]	@ unaligned
	cmp	r3, #1
	bne	.L5114
	ldr	r1, [r5, #8]	@ unaligned
	mov	r0, r4
	mov	r6, r2
	add	r1, r1, #8
	bl	skb_pull
	cmp	r0, #0
	beq	.L5115
	ldr	r1, [r5, #12]	@ unaligned
	mov	r0, r4
	bl	skb_trim
	mov	r0, r6
	mov	r1, r4
	bl	skb_queue_tail
	mov	r0, #0
.L5109:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5114:
	mov	r0, r1
	bl	dev_kfree_skb_any
	mvn	r0, #21
	b	.L5109
.L5115:
	mov	r0, r4
	bl	dev_kfree_skb_any
	mvn	r0, #74
	b	.L5109
	.fnend
	.size	rndis_qc_rm_hdr, .-rndis_qc_rm_hdr
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_proc_open, %function
rndis_proc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #-20]
	mov	r0, r1
	movw	r1, #:lower16:rndis_proc_show
	movt	r1, #:upper16:rndis_proc_show
	ldr	r2, [r3, #44]
	b	single_open
	.fnend
	.size	rndis_proc_open, .-rndis_proc_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_proc_show, %function
rndis_proc_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movw	r1, #:lower16:.LC426
	movw	r3, #:lower16:.LC425
	strd	r6, [sp, #8]
	movt	r1, #:upper16:.LC426
	movt	r3, #:upper16:.LC425
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	ip, [r0, #76]
	.pad #44
	sub	sp, sp, #44
	ldrb	r4, [ip, #1]	@ zero_extendqisi2
	ldr	lr, [ip, #4]
	ldrb	r2, [ip]	@ zero_extendqisi2
	cmp	r4, #0
	moveq	r3, r1
	cmp	lr, #2
	movwhi	r7, #:lower16:.LC427
	movthi	r7, #:upper16:.LC427
	bhi	.L5119
	movw	r1, #:lower16:.LANCHOR3
	movt	r1, #:upper16:.LANCHOR3
	add	r1, r1, lr, lsl #2
	ldr	r7, [r1, #3500]
.L5119:
	ldr	r8, [ip, #8]
	ldr	r1, [ip, #16]
	cmp	r1, #0
	bne	.L5123
	ldr	r1, [ip, #12]
	mov	r6, #100
	movw	r5, #:lower16:.LC428
	movt	r5, #:upper16:.LC428
	mul	r6, r6, r1
.L5120:
	movw	lr, #:lower16:.LANCHOR1
	ldrb	r4, [ip, #36]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC430
	movt	lr, #:upper16:.LANCHOR1
	movt	r1, #:upper16:.LC430
	ldr	r9, [lr, #3744]
	ldr	lr, [lr, #3748]
	str	r9, [sp, #28]
	str	r4, [sp, #32]
	str	lr, [sp, #36]
	ldr	lr, [ip, #28]
	ldr	lr, [lr, #356]
	add	lr, lr, #80
	mul	lr, r4, lr
	str	lr, [sp, #24]
	ldr	lr, [ip, #40]
	str	lr, [sp, #20]
	ldr	ip, [ip, #32]
	stm	sp, {r7, r8}
	str	r6, [sp, #8]
	str	r5, [sp, #12]
	str	ip, [sp, #16]
	bl	seq_printf
	mov	r0, #0
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L5123:
	movw	r5, #:lower16:.LC429
	mov	r6, #0
	movt	r5, #:upper16:.LC429
	b	.L5120
	.fnend
	.size	rndis_proc_show, .-rndis_proc_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_set_hid_report_desc, %function
acc_complete_set_hid_report_desc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	ldr	r3, [r1, #44]
	ldr	r5, [r1, #48]
	ldr	r6, [r4, #12]
	cmp	r3, #0
	bne	.L5129
	ldr	r0, [r4, #20]
	mov	r2, r5
	ldr	r3, [r4, #28]
	ldr	r1, [r1]
	add	r0, r0, r3
	bl	memcpy
	ldr	r3, [r4, #24]
	ldr	r2, [r4, #28]
	add	r5, r5, r2
	cmp	r5, r3
	str	r5, [r4, #28]
	beq	.L5130
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5130:
	add	r0, r6, #1744
	ldrd	r4, [sp]
	add	r0, r0, #4
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	schedule_work
.L5129:
	movw	r0, #:lower16:.LC431
	mov	r1, r3
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC431
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
	.fnend
	.size	acc_complete_set_hid_report_desc, .-acc_complete_set_hid_report_desc
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_resume, %function
android_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	add	r0, r0, #32
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r3, [r2, #3232]!
	cmp	r3, r2
	sub	r4, r3, #512
	bne	.L5134
	b	.L5132
.L5140:
	ldr	r3, [r4, #512]
	cmp	r3, r2
	sub	r4, r3, #512
	beq	.L5132
.L5134:
	ldr	r3, [r3, #-504]
	cmp	r0, r3
	bne	.L5140
.L5132:
	add	r5, r0, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r4, #50]	@ zero_extendqisi2
	mov	r7, r0
	cmp	r3, #0
	bne	.L5141
.L5135:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	composite_resume
.L5141:
	mov	r3, #0
	add	r0, r4, #176
	strb	r3, [r4, #50]
	bl	schedule_work
	b	.L5135
	.fnend
	.size	android_resume, .-android_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_suspend, %function
android_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	add	r0, r0, #32
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r3, [r2, #3232]!
	cmp	r3, r2
	sub	r4, r3, #512
	bne	.L5145
	b	.L5143
.L5148:
	ldr	r3, [r4, #512]
	cmp	r3, r2
	sub	r4, r3, #512
	beq	.L5143
.L5145:
	ldr	r3, [r3, #-504]
	cmp	r0, r3
	bne	.L5148
.L5143:
	add	r5, r0, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r4, #50]	@ zero_extendqisi2
	mov	r7, r0
	cmp	r3, #0
	beq	.L5149
.L5146:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	composite_suspend
.L5149:
	mov	r3, #1
	add	r0, r4, #176
	strb	r3, [r4, #50]
	bl	schedule_work
	b	.L5146
	.fnend
	.size	android_suspend, .-android_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	get_ether_addr, %function
get_ether_addr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	subs	r4, r0, #0
	subne	r5, r1, #1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r1
	addne	r9, r1, #5
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bne	.L5153
	b	.L5157
.L5164:
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	bl	hex_to_bin
	mov	r7, r0
	ldrb	r0, [r4, #2]	@ zero_extendqisi2
.L5162:
	bl	hex_to_bin
	orr	r0, r0, r7, lsl #4
	strb	r0, [r5, #1]!
	cmp	r9, r5
	beq	.L5163
	mov	r4, r6
.L5153:
	ldrb	r3, [r4]	@ zero_extendqisi2
	add	r6, r4, #3
	cmp	r3, #58
	cmpne	r3, #46
	mov	r0, r3
	beq	.L5164
	bl	hex_to_bin
	mov	r7, r0
	add	r6, r4, #2
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	b	.L5162
.L5163:
	ldrb	r3, [r8]	@ zero_extendqisi2
	ands	r0, r3, #1
	beq	.L5165
.L5157:
	mov	r0, r8
	mov	r1, #6
	bl	get_random_bytes
	ldrb	r3, [r8]	@ zero_extendqisi2
	mov	r0, #1
	bic	r3, r3, #1
	orr	r3, r3, #2
	strb	r3, [r8]
.L5150:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L5165:
	ldrb	r2, [r8, #1]	@ zero_extendqisi2
	ldrb	lr, [r8, #2]	@ zero_extendqisi2
	ldrb	ip, [r8, #3]	@ zero_extendqisi2
	ldrb	r1, [r8, #4]	@ zero_extendqisi2
	orr	r3, r3, r2
	ldrb	r2, [r8, #5]	@ zero_extendqisi2
	orr	r3, r3, lr
	orr	r3, r3, ip
	orr	r3, r3, r1
	orrs	r3, r3, r2
	beq	.L5157
	b	.L5150
	.fnend
	.size	get_ether_addr, .-get_ether_addr
	.set	get_qc_ether_addr,get_ether_addr
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_lun_open, %function
fsg_lun_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r0
	mov	r9, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r6, [r0, #24]	@ zero_extendqisi2
	.pad #4
	sub	sp, sp, #4
	ands	r6, r6, #1
	beq	.L5167
.L5169:
	mov	r2, #0
	mov	r1, #131072
	mov	r0, r9
	mov	r6, #1
	bl	filp_open
	mov	r7, r0
	cmn	r7, #4096
	bhi	.L5212
.L5170:
	ldr	r3, [r7, #12]
	ldr	r2, [r7, #36]
	tst	r2, #2
	moveq	r6, #1
	cmp	r3, #0
	beq	.L5173
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L5173
	ldrh	r3, [r0]
	and	r3, r3, #61440
	sub	r3, r3, #24576
	tst	r3, #53248
	bne	.L5173
	ldr	r3, [r7, #16]
	cmp	r3, #0
	beq	.L5176
	ldr	r2, [r3, #8]
	cmp	r2, #0
	beq	.L5213
.L5177:
	ldr	r2, [r3, #12]
	cmp	r2, #0
	beq	.L5214
.L5178:
	ldr	r3, [r0, #32]
	ldr	r2, [r3]
	b	.L5211
.L5216:
	.syntax divided
@ 165 "/home/jprim/hlte/lolz_rebase/include/linux/seqlock.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldrd	r4, [r2, #96]
	.syntax divided
@ 221 "/home/jprim/hlte/lolz_rebase/include/linux/seqlock.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r1, [r2, #104]
	cmp	r1, r3
	beq	.L5215
.L5211:
	ldr	r3, [r2, #104]
	tst	r3, #1
	beq	.L5216
	.syntax divided
@ 147 "/home/jprim/hlte/lolz_rebase/include/linux/seqlock.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	b	.L5211
.L5173:
	movw	r1, #:lower16:.LC433
	mov	r2, r9
	add	r0, r8, #48
	movt	r1, #:upper16:.LC433
	mvn	r4, #21
	bl	_dev_info
.L5175:
	mov	r3, sp
	mov	r0, r7
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #928]
	bl	filp_close
.L5166:
	mov	r0, r4
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5215:
	cmp	r4, #0
	sbcs	r3, r5, #0
	blt	.L5217
	ldrb	r3, [r8, #24]	@ zero_extendqisi2
	tst	r3, #8
	bne	.L5218
	ldr	r3, [r0, #312]
	cmp	r3, #0
	beq	.L5186
	ldr	r3, [r3, #88]
	ldr	r3, [r3, #492]
	cmp	r3, #0
	moveq	r3, #512
	beq	.L5187
	add	r3, r3, #776
	ldrh	r3, [r3]
	cmp	r3, #0
	moveq	r3, #512
.L5187:
	mov	r2, #8
	str	r3, [r8, #44]
.L5188:
	lsr	r3, r3, #1
	add	r2, r2, #1
	cmp	r3, #256
	bhi	.L5188
	str	r2, [r8, #40]
.L5189:
	rsb	r3, r2, #32
	lsr	r10, r4, r2
	subs	r1, r2, #32
	orr	r10, r10, r5, lsl r3
	mov	r3, #0
	asr	fp, r5, r2
	orrpl	r10, r10, r5, asr r1
	mov	r2, #1
	b	.L5185
.L5167:
	mov	r1, #2
	mov	r2, r6
	movt	r1, 2
	mov	r0, r9
	bl	filp_open
	cmn	r0, #30
	cmnne	r0, #13
	mov	r7, r0
	beq	.L5169
	cmn	r7, #4096
	bls	.L5170
.L5212:
	movw	r1, #:lower16:.LC432
	mov	r2, r9
	add	r0, r8, #48
	movt	r1, #:upper16:.LC432
	mov	r4, r7
	bl	_dev_info
	b	.L5166
.L5218:
	mov	r2, #11
	mov	r3, #2048
	lsr	r10, r4, #11
	asr	fp, r5, #11
	strd	r2, [r8, #40]
	orr	r10, r10, r5, lsl #21
	movw	r2, #65502
	movt	r2, 255
	mov	r3, #0
	cmp	r2, r10
	sbcs	r3, r3, fp
	blt	.L5184
	mov	r2, #300
	mov	r3, #0
.L5185:
	cmp	r10, r2
	sbcs	r3, fp, r3
	blt	.L5219
.L5190:
	add	r3, r7, #28
	.syntax divided
@ 45 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldrb	r3, [r8, #24]	@ zero_extendqisi2
	str	r7, [r8]
	ldr	r0, .L5220
	strd	r4, [r8, #8]
	strd	r10, [r8, #16]
	bfi	r3, r6, #1, #1
	strb	r3, [r8, #24]
	ldrh	r4, [r0, #-14]
	ubfx	r4, r4, #2, #1
	cmp	r4, #0
	beq	.L5175
	movw	r2, #:lower16:.LC439
	mov	r3, r9
	add	r1, r8, #48
	movt	r2, #:upper16:.LC439
	sub	r0, r0, #32
	mov	r4, #0
	bl	__dynamic_dev_dbg
	b	.L5175
.L5213:
	ldr	r2, [r3, #16]
	cmp	r2, #0
	bne	.L5177
.L5176:
	movw	r1, #:lower16:.LC434
	mov	r2, r9
	add	r0, r8, #48
	movt	r1, #:upper16:.LC434
	bl	_dev_info
	mvn	r4, #21
	b	.L5175
.L5214:
	ldr	r3, [r3, #20]
	cmp	r3, #0
	moveq	r6, #1
	b	.L5178
.L5219:
	movw	r1, #:lower16:.LC438
	mov	r2, r9
	add	r0, r8, #48
	movt	r1, #:upper16:.LC438
	bl	_dev_info
	mvn	r4, #524
	b	.L5175
.L5217:
	movw	r1, #:lower16:.LC435
	mov	r2, r9
	add	r0, r8, #48
	movt	r1, #:upper16:.LC435
	bl	_dev_info
	b	.L5175
.L5184:
	add	r10, r8, #48
	movw	r1, #:lower16:.LC436
	mov	r0, r10
	movt	r1, #:upper16:.LC436
	mov	r2, r9
	mov	fp, #0
	bl	_dev_info
	movw	r2, #65502
	movw	r1, #:lower16:.LC437
	mov	r0, r10
	movt	r2, 255
	movt	r1, #:upper16:.LC437
	movw	r10, #65502
	bl	_dev_info
	movt	r10, 255
	b	.L5190
.L5186:
	mov	r0, #9
	mov	r1, #512
	mov	r2, #9
	strd	r0, [r8, #40]
	b	.L5189
.L5221:
	.align	2
.L5220:
	.word	.LANCHOR4-3040
	.fnend
	.size	fsg_lun_open, .-fsg_lun_open
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_cleanup, %function
conn_gadget_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC440
	push	{r4, lr}
	.save {r4, lr}
	ldr	r1, .L5229
	movt	r0, #:upper16:.LC440
	bl	printk
	movw	r0, #:lower16:.LC441
	movt	r0, #:upper16:.LC441
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #2484]
	cmp	r2, #0
	bne	.L5223
	movw	r0, #:lower16:.LC442
	ldr	r1, .L5229+4
	movt	r0, #:upper16:.LC442
	pop	{r4, lr}
	b	printk
.L5223:
	mov	r4, r3
	ldr	r0, .L5229+8
	bl	misc_deregister
	ldr	r3, [r4, #2484]
	ldr	r0, [r3, #188]
	cmp	r0, #0
	beq	.L5224
	bl	vfree
.L5224:
	ldr	r0, [r4, #2484]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #2484]
	pop	{r4, pc}
.L5230:
	.align	2
.L5229:
	.word	.LANCHOR3+3512
	.word	.LANCHOR3+3544
	.word	.LANCHOR0+1036
	.fnend
	.size	conn_gadget_function_cleanup, .-conn_gadget_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_init, %function
conn_gadget_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC443
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	ldr	r1, .L5245
	movt	r0, #:upper16:.LC443
	bl	printk
	movw	r0, #:lower16:.LC444
	movt	r0, #:upper16:.LC444
	bl	printk
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L5237
	mov	r2, #220
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	bne	.L5232
	movw	r0, #:lower16:.LC445
	mvn	r5, #11
	movt	r0, #:upper16:.LC445
	bl	printk
	b	.L5231
.L5237:
	mov	r4, #16
.L5232:
	mov	r5, #0
	movw	r1, #:lower16:.LC396
	ldr	r2, .L5245+4
	movt	r1, #:upper16:.LC396
	add	r0, r4, #144
	str	r5, [r4, #88]
	movw	r6, #:lower16:.LANCHOR1
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC397
	ldr	r2, .L5245+4
	add	r0, r4, #156
	movt	r1, #:upper16:.LC397
	movt	r6, #:upper16:.LANCHOR1
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC446
	ldr	r2, .L5245+4
	add	r0, r4, #200
	movt	r1, #:upper16:.LC446
	bl	__init_waitqueue_head
	add	r1, r4, #128
	add	r0, r4, #120
	str	r5, [r4, #108]
	add	r2, r4, #136
	mov	r3, #262144
	str	r5, [r4, #112]
	mov	ip, #4096
	str	r5, [r4, #116]
	str	r0, [r4, #120]
	strd	r0, [r4, #124]
	mov	r0, r3
	str	r1, [r4, #132]
	str	r2, [r4, #136]
	str	r2, [r4, #140]
	str	ip, [r4, #192]
	str	r3, [r4, #196]
	str	r5, [r4, #216]
	bl	vmalloc
	cmp	r0, r5
	mov	r1, r0
	str	r0, [r4, #188]
	bne	.L5234
	movw	r0, #:lower16:.LC447
	ldr	r1, .L5245+8
	mvn	r5, #11
	movt	r0, #:upper16:.LC447
	bl	printk
	b	.L5235
.L5234:
	mov	r3, #1
	add	r0, r4, #168
	ldr	r2, [r4, #196]
	bl	__kfifo_init
	ldr	r0, .L5245+12
	str	r4, [r6, #2484]
	bl	misc_register
	subs	r5, r0, #0
	beq	.L5231
	movw	r0, #:lower16:.LC448
	mov	r2, r5
	ldr	r1, .L5245+8
	movt	r0, #:upper16:.LC448
	bl	printk
.L5235:
	ldr	r0, [r4, #188]
	cmp	r0, #0
	beq	.L5236
	bl	vfree
.L5236:
	mov	r3, #0
	mov	r0, r4
	str	r3, [r6, #2484]
	bl	kfree
	movw	r0, #:lower16:.LC449
	ldr	r1, .L5245+8
	movt	r0, #:upper16:.LC449
	bl	printk
.L5231:
	mov	r0, r5
	pop	{r4, r5, r6, pc}
.L5246:
	.align	2
.L5245:
	.word	.LANCHOR3+3564
	.word	.LANCHOR1+3752
	.word	.LANCHOR3+3592
	.word	.LANCHOR0+1036
	.fnend
	.size	conn_gadget_function_init, .-conn_gadget_function_init
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_usb_buffer_size_store, %function
conn_gadget_usb_buffer_size_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r6, r3
	str	lr, [sp, #16]
	ldr	r3, [r5, #2484]
	.pad #12
	sub	sp, sp, #12
	cmp	r3, #0
	beq	.L5257
	ldr	r3, [r3, #100]
	cmp	r3, #0
	bne	.L5258
	movw	r1, #:lower16:.LC452
	mov	r0, r2
	movt	r1, #:upper16:.LC452
	add	r2, sp, #4
	bl	sscanf
	ldr	r4, [sp, #4]
	lsl	r4, r4, #16
	mov	r0, r4
	bl	vmalloc
	subs	r7, r0, #0
	beq	.L5259
	ldr	ip, [r5, #2484]
	ldr	r0, [ip, #188]
	cmp	r0, #0
	beq	.L5252
	bl	vfree
	ldr	ip, [r5, #2484]
.L5252:
	ldr	lr, [sp, #4]
	mov	r5, #0
	mov	r0, ip
	mov	r1, r7
	mov	r2, r4
	mov	r3, #1
	str	r5, [ip, #172]
	str	r7, [ip, #188]
	lsl	lr, lr, #10
	str	lr, [ip, #192]
	str	r4, [ip, #196]
	str	r5, [r0, #168]!
	bl	__kfifo_init
.L5247:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L5257:
	movw	r0, #:lower16:.LC450
	ldr	r1, .L5260
	movt	r0, #:upper16:.LC450
	bl	printk
	b	.L5247
.L5259:
	movw	r0, #:lower16:.LC453
	ldr	r1, .L5260
	movt	r0, #:upper16:.LC453
	bl	printk
	b	.L5247
.L5258:
	movw	r0, #:lower16:.LC451
	ldr	r1, .L5260
	movt	r0, #:upper16:.LC451
	bl	printk
	b	.L5247
.L5261:
	.align	2
.L5260:
	.word	.LANCHOR3+3612
	.fnend
	.size	conn_gadget_usb_buffer_size_store, .-conn_gadget_usb_buffer_size_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	remote_wakeup_store, %function
remote_wakeup_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	mov	r3, #0
	movw	r1, #:lower16:.LC452
	mov	r5, r0
	movt	r1, #:upper16:.LC452
	mov	r0, r6
	add	r2, sp, #4
	str	r3, [sp, #4]
	bl	sscanf
	ldr	r0, .L5280
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L5279
.L5263:
	mov	r0, r5
	ldr	r3, [r0, #500]!
	cmp	r0, r3
	sub	r3, r3, #120
	beq	.L5277
	ldr	r2, [sp, #4]
	cmp	r2, #0
	bne	.L5266
.L5267:
	ldrb	r2, [r3, #22]	@ zero_extendqisi2
	ldr	r1, [r3, #120]
	bic	r2, r2, #32
	cmp	r0, r1
	strb	r2, [r3, #22]
	sub	r3, r1, #120
	bne	.L5267
.L5277:
	mov	r0, r4
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5266:
	ldrb	r2, [r3, #22]	@ zero_extendqisi2
	ldr	r1, [r3, #120]
	orr	r2, r2, #32
	cmp	r0, r1
	strb	r2, [r3, #22]
	sub	r3, r1, #120
	bne	.L5266
	b	.L5277
.L5279:
	ldr	lr, [sp, #4]
	movw	ip, #:lower16:.LC455
	movw	r3, #:lower16:.LC454
	movt	ip, #:upper16:.LC455
	movw	r1, #:lower16:.LC456
	ldr	r2, .L5280+4
	movt	r3, #:upper16:.LC454
	movt	r1, #:upper16:.LC456
	sub	r0, r0, #24
	cmp	lr, #0
	moveq	r3, ip
	bl	__dynamic_pr_debug
	b	.L5263
.L5281:
	.align	2
.L5280:
	.word	.LANCHOR4-3024
	.word	.LANCHOR3+3648
	.fnend
	.size	remote_wakeup_store, .-remote_wakeup_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceProtocol_store, %function
bDeviceProtocol_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC77
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC77
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L5284
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strb	r2, [r3, #142]
.L5282:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5284:
	mvn	r0, #0
	b	.L5282
	.fnend
	.size	bDeviceProtocol_store, .-bDeviceProtocol_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceSubClass_store, %function
bDeviceSubClass_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC77
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC77
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L5288
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strb	r2, [r3, #141]
.L5286:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5288:
	mvn	r0, #0
	b	.L5286
	.fnend
	.size	bDeviceSubClass_store, .-bDeviceSubClass_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bDeviceClass_store, %function
bDeviceClass_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC77
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC77
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L5292
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strb	r2, [r3, #140]
.L5290:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5292:
	mvn	r0, #0
	b	.L5290
	.fnend
	.size	bDeviceClass_store, .-bDeviceClass_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bcdDevice_store, %function
bcdDevice_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC84
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC84
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L5296
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strh	r2, [r3, #148]	@ movhi
.L5294:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5296:
	mvn	r0, #0
	b	.L5294
	.fnend
	.size	bcdDevice_store, .-bcdDevice_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	idProduct_store, %function
idProduct_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC84
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC84
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L5300
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strh	r2, [r3, #146]	@ movhi
.L5298:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5300:
	mvn	r0, #0
	b	.L5298
	.fnend
	.size	idProduct_store, .-idProduct_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	idVendor_store, %function
idVendor_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC84
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	movt	r1, #:upper16:.LC84
	add	r2, sp, #4
	mov	r4, r3
	bl	sscanf
	cmp	r0, #1
	bne	.L5304
	ldr	r2, [sp, #4]
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR0
	strh	r2, [r3, #144]	@ movhi
.L5302:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5304:
	mvn	r0, #0
	b	.L5302
	.fnend
	.size	idVendor_store, .-idVendor_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_product_store, %function
mass_storage_product_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r4, #16
	ldr	r5, [r0, #4]
	bhi	.L5309
	ldr	r2, [r5, #96]
	movw	r1, #:lower16:.LC83
	mov	r0, r6
	movt	r1, #:upper16:.LC83
	add	r2, r2, #218
	bl	sscanf
	cmp	r0, #1
	beq	.L5311
.L5309:
	mvn	r0, #21
.L5306:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5311:
	ldr	r2, [r5, #96]
	movw	r0, #:lower16:.LC457
	movt	r0, #:upper16:.LC457
	ldr	r1, .L5312
	add	r2, r2, #218
	bl	printk
	mov	r0, r4
	b	.L5306
.L5313:
	.align	2
.L5312:
	.word	.LANCHOR3+3668
	.fnend
	.size	mass_storage_product_store, .-mass_storage_product_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_vendor_store, %function
mass_storage_vendor_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r4, #8
	ldr	r5, [r0, #4]
	bhi	.L5317
	ldr	r2, [r5, #96]
	movw	r1, #:lower16:.LC83
	mov	r0, r6
	movt	r1, #:upper16:.LC83
	add	r2, r2, #209
	bl	sscanf
	cmp	r0, #1
	beq	.L5319
.L5317:
	mvn	r0, #21
.L5314:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5319:
	ldr	r2, [r5, #96]
	movw	r0, #:lower16:.LC458
	movt	r0, #:upper16:.LC458
	ldr	r1, .L5320
	add	r2, r2, #209
	bl	printk
	mov	r0, r4
	b	.L5314
.L5321:
	.align	2
.L5320:
	.word	.LANCHOR3+3696
	.fnend
	.size	mass_storage_vendor_store, .-mass_storage_vendor_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_inquiry_store, %function
mass_storage_inquiry_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r4, #28
	ldr	r3, [r0, #4]
	bhi	.L5325
	ldr	r2, [r3, #96]
	movw	r1, #:lower16:.LC459
	mov	r0, r5
	movt	r1, #:upper16:.LC459
	add	r2, r2, #180
	bl	sscanf
	cmp	r0, #1
	bne	.L5325
	mov	r0, r4
.L5322:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5325:
	mvn	r0, #21
	b	.L5322
	.fnend
	.size	mass_storage_inquiry_store, .-mass_storage_inquiry_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_ethaddr_store, %function
ecm_ethaddr_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r2
	mov	r4, r3
	str	lr, [sp, #8]
	.pad #20
	sub	sp, sp, #20
	bl	dev_get_drvdata
	ldr	r2, [r0, #4]
	mov	r0, r5
	movw	r1, #:lower16:.LC86
	movt	r1, #:upper16:.LC86
	add	r3, r2, #3
	add	ip, r2, #5
	add	r5, r2, #4
	add	lr, r2, #2
	str	lr, [sp]
	stmib	sp, {r3, r5, ip}
	add	r3, r2, #1
	bl	sscanf
	cmp	r0, #6
	moveq	r0, r4
	mvnne	r0, #21
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_ethaddr_store, .-ecm_ethaddr_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_max_pkt_per_xfer_store, %function
rndis_max_pkt_per_xfer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	movw	r1, #:lower16:.LC452
	add	r2, sp, #4
	ldr	r6, [r0, #4]
	movt	r1, #:upper16:.LC452
	mov	r0, r5
	bl	sscanf
	cmp	r0, #1
	ldreq	r3, [sp, #4]
	moveq	r0, r4
	mvnne	r0, #21
	strbeq	r3, [r6, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_max_pkt_per_xfer_store, .-rndis_max_pkt_per_xfer_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_vendorID_store, %function
rndis_vendorID_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	movw	r1, #:lower16:.LC460
	add	r2, sp, #4
	ldr	r6, [r0, #4]
	movt	r1, #:upper16:.LC460
	mov	r0, r5
	bl	sscanf
	cmp	r0, #1
	ldreq	r3, [sp, #4]
	moveq	r0, r4
	mvnne	r0, #21
	streq	r3, [r6, #8]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_vendorID_store, .-rndis_vendorID_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_wceis_store, %function
rndis_wceis_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	mov	r4, r3
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	movw	r1, #:lower16:.LC452
	add	r2, sp, #4
	ldr	r6, [r0, #4]
	movt	r1, #:upper16:.LC452
	mov	r0, r5
	bl	sscanf
	cmp	r0, #1
	bne	.L5341
	ldr	r3, [sp, #4]
	mov	r0, r4
	adds	r3, r3, #0
	movne	r3, #1
	strb	r3, [r6, #269]
.L5339:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5341:
	mvn	r0, #21
	b	.L5339
	.fnend
	.size	rndis_wceis_store, .-rndis_wceis_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_manufacturer_store, %function
rndis_manufacturer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata
	cmp	r4, #255
	ldr	r2, [r0, #4]
	bhi	.L5345
	movw	r1, #:lower16:.LC461
	add	r2, r2, #13
	mov	r0, r5
	movt	r1, #:upper16:.LC461
	bl	sscanf
	cmp	r0, #1
	moveq	r0, r4
	mvnne	r0, #0
.L5343:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5345:
	mvn	r0, #21
	b	.L5343
	.fnend
	.size	rndis_manufacturer_store, .-rndis_manufacturer_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_instances_store, %function
acm_instances_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r3
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata
	movw	r1, #:lower16:.LC452
	add	r2, sp, #4
	ldr	r4, [r0, #4]
	movt	r1, #:upper16:.LC452
	mov	r0, r6
	bl	sscanf
	ldr	r2, [sp, #4]
	mov	r0, r5
	cmp	r2, #4
	movge	r2, #4
	str	r2, [r4]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	acm_instances_store, .-acm_instances_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_unwrap_ntb, %function
ncm_unwrap_ntb:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r1, #172]
	.pad #44
	sub	sp, sp, #44
	ldr	r4, [r0, #176]
	ldrb	r0, [r0, #180]	@ zero_extendqisi2
	str	r2, [sp, #16]
	ldr	r2, [r3]	@ unaligned
	ldr	r1, [r4]
	cmp	r0, #0
	movne	ip, #18
	moveq	ip, #14
	str	ip, [sp, #24]
	movne	ip, #4
	moveq	ip, #0
	cmp	r1, r2
	str	ip, [sp, #20]
	bne	.L5405
	ldrb	ip, [r3, #5]	@ zero_extendqisi2
	ldrb	r2, [r3, #4]	@ zero_extendqisi2
	ldr	r1, [r4, #8]
	orr	r2, r2, ip, lsl #8
	cmp	r2, r1
	bne	.L5406
	ldr	ip, [r4, #24]
	add	r7, r3, #8
	cmp	ip, #1
	bne	.L5407
	ldrb	r2, [r3, #9]	@ zero_extendqisi2
	ldrb	lr, [r3, #8]	@ zero_extendqisi2
	orr	lr, lr, r2, lsl #8
.L5358:
	movw	r2, #:lower16:.LANCHOR0
	movt	r2, #:upper16:.LANCHOR0
	add	r8, r7, ip, lsl #1
	ldr	r2, [r2, #36]
	cmp	r2, lr
	bcc	.L5408
	ldr	r2, [r4, #28]
	cmp	r2, #1
	beq	.L5360
	cmp	r2, #2
	ldreq	r2, [r8]	@ unaligned
	bne	.L5399
.L5363:
	cmp	r1, r2
	movls	r1, #0
	movhi	r1, #1
	ands	ip, r2, #3
	movne	ip, r1
	cmp	ip, #0
	bne	.L5409
	add	r3, r3, r2
	ldr	r1, [r4, #4]
	ldr	r2, [r3]	@ unaligned
	cmp	r1, r2
	bne	.L5410
	ldrb	ip, [r3, #5]	@ zero_extendqisi2
	ldrb	r2, [r3, #4]	@ zero_extendqisi2
	ldr	lr, [r4, #12]
	ldr	r1, [r4, #20]
	orr	r2, r2, ip, lsl #8
	add	ip, lr, r1, lsl #3
	cmp	ip, r2
	bhi	.L5366
	ldr	r7, [r4, #16]
	udiv	ip, r2, r7
	mls	ip, r7, ip, r2
	cmp	ip, #0
	bne	.L5366
	ldr	ip, [r4, #32]
	sub	fp, r2, lr
	cmp	r1, #1
	ldr	lr, [r4, #36]
	add	r3, r3, #6
	ldr	r7, [r4, #40]
	add	r2, ip, r7
	add	r2, r2, lr
	add	lr, r3, r2, lsl #1
	bne	.L5411
	ldrb	r3, [r3, r2, lsl #1]	@ zero_extendqisi2
	add	r9, lr, #2
	ldrb	ip, [lr, #1]	@ zero_extendqisi2
	mov	r2, #2
	ldrb	r7, [lr, #3]	@ zero_extendqisi2
	ldrb	r10, [lr, #2]	@ zero_extendqisi2
	orr	r3, r3, ip, lsl #8
	orr	r10, r10, r7, lsl #8
.L5371:
	ldr	ip, [sp, #24]
	add	r9, r9, r2
	cmp	r10, ip
	strcs	r4, [sp, #28]
	strcs	r6, [sp, #32]
	bcs	.L5373
	b	.L5412
.L5376:
	mov	r2, r9
	ldrb	ip, [r9, #1]	@ zero_extendqisi2
	mov	r1, #2
	ldrb	r6, [r2], #2	@ zero_extendqisi2
	ldrb	r0, [r9, #3]	@ zero_extendqisi2
	ldrb	r7, [r9, #2]	@ zero_extendqisi2
	orr	r6, r6, ip, lsl #8
	orr	r7, r7, r0, lsl #8
.L5379:
	clz	r4, r7
	lsr	r4, r4, #5
	cmp	r6, #0
	moveq	r4, #1
	cmp	r4, #0
	add	r9, r2, r1
	bne	.L5380
	mov	r1, #32
	mov	r0, r5
	str	r3, [sp, #36]
	bl	skb_clone
	subs	r8, r0, #0
	ldr	r3, [sp, #36]
	beq	.L5413
	mov	r1, r3
	bl	skb_pull
	cmp	r0, #0
	beq	.L5385
	ldr	r3, [sp, #20]
	mov	r0, r8
	sub	r1, r10, r3
	bl	skb_trim
	mov	r1, r8
	ldr	r0, [sp, #16]
	bl	skb_queue_tail
	ldr	r3, [sp, #28]
	ldr	r1, [r3, #20]
	lsl	r3, r1, #2
	sub	fp, fp, r3
	cmp	r3, fp
	bcs	.L5350
	ldr	r2, [sp, #24]
	mov	r10, r7
	mov	r3, r6
	cmp	r7, r2
	bcc	.L5402
	ldr	r2, [sp, #32]
	ldrb	r0, [r2, #180]	@ zero_extendqisi2
.L5373:
	cmp	r0, #0
	bne	.L5414
.L5374:
	cmp	r1, #1
	beq	.L5376
	cmp	r1, #2
	bne	.L5399
	mov	r2, r9
	ldr	r7, [r9, #4]	@ unaligned
	mov	r1, #4
	ldr	r6, [r2], #4	@ unaligned
	b	.L5379
.L5406:
	ldr	r3, [r6, #20]
	movw	r1, #:lower16:.LC465
	mvn	r4, #21
	movt	r1, #:upper16:.LC465
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
.L5353:
	ldr	r0, [sp, #16]
	bl	skb_queue_purge
	mov	r0, r5
	bl	dev_kfree_skb_any
.L5350:
	mov	r0, r4
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5407:
	cmp	ip, #2
	ldreq	lr, [r3, #8]	@ unaligned
	beq	.L5358
.L5399:
	.syntax divided
@ 463 "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_ncm.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_ncm.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 463, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L5405:
	ldr	r3, [r6, #20]
	movw	r1, #:lower16:.LC462
	mvn	r4, #21
	movt	r1, #:upper16:.LC462
	ldr	r2, [r5, #80]
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	ldr	r0, [r5, #172]
	mov	ip, #0
	mov	r3, #32
	mov	r2, #1
	movw	r1, #:lower16:.LC463
	movt	r1, #:upper16:.LC463
	str	r2, [sp]
	stmib	sp, {r0, r3, ip}
	movw	r0, #:lower16:.LC464
	movt	r0, #:upper16:.LC464
	bl	print_hex_dump
	b	.L5353
.L5360:
	ldrb	lr, [r8, #1]	@ zero_extendqisi2
	ldrb	r2, [r7, ip, lsl #1]	@ zero_extendqisi2
	orr	r2, r2, lr, lsl #8
	b	.L5363
.L5366:
	ldr	r3, [r6, #20]
	movw	r1, #:lower16:.LC469
	movt	r1, #:upper16:.LC469
.L5404:
	ldr	r3, [r3, #24]
	mvn	r4, #21
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L5353
.L5380:
	mov	r1, r3
	mov	r0, r5
	bl	skb_pull
	cmp	r0, #0
	bne	.L5415
.L5385:
	mvn	r4, #74
	b	.L5353
.L5414:
	ldr	r0, [sp, #20]
	add	ip, r10, r3
	str	r3, [sp, #36]
	ldr	r1, [r5, #172]
	sub	ip, ip, r0
	sub	r2, r10, r0
	ldr	r4, [r1, ip]	@ unaligned
	mvn	r0, #0
	add	r1, r1, r3
	bl	crc32_le
	mvn	r0, r0
	cmp	r0, r4
	bne	.L5375
	ldr	r3, [sp, #28]
	ldr	r1, [r3, #20]
	ldr	r3, [sp, #36]
	b	.L5374
.L5411:
	cmp	r1, #2
	bne	.L5399
	mov	r9, lr
	ldr	r10, [lr, #4]	@ unaligned
	mov	r2, #4
	ldr	r3, [r9], #4	@ unaligned
	b	.L5371
.L5410:
	ldr	r3, [r6, #20]
	movw	r1, #:lower16:.LC468
	mvn	r4, #21
	movt	r1, #:upper16:.LC468
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L5353
.L5408:
	ldr	r3, [r6, #20]
	movw	r1, #:lower16:.LC466
	mvn	r4, #21
	movt	r1, #:upper16:.LC466
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L5353
.L5409:
	movw	r1, #:lower16:.LC467
	ldr	r3, [r6, #20]
	movt	r1, #:upper16:.LC467
	b	.L5404
.L5415:
	ldr	r3, [sp, #20]
	mov	r0, r5
	mov	r4, #0
	sub	r1, r10, r3
	bl	skb_trim
	mov	r1, r5
	ldr	r0, [sp, #16]
	bl	skb_queue_tail
	b	.L5350
.L5402:
	ldr	r6, [sp, #32]
.L5372:
	movw	r1, #:lower16:.LC470
	mov	r2, r7
	ldr	r3, [r6, #20]
	movt	r1, #:upper16:.LC470
	b	.L5404
.L5413:
	mvn	r4, #21
	b	.L5353
.L5375:
	ldr	r6, [sp, #32]
	movw	r1, #:lower16:.LC471
	mvn	r4, #21
	movt	r1, #:upper16:.LC471
	ldr	r3, [r6, #20]
	ldr	r3, [r3, #24]
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	b	.L5353
.L5412:
	mov	r7, r10
	b	.L5372
	.fnend
	.size	ncm_unwrap_ntb, .-ncm_unwrap_ntb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_wrap_ntb, %function
ncm_wrap_ntb:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	mov	r9, r0
	movw	r0, #:lower16:.LANCHOR0
	strd	r10, [sp, #24]
	movt	r0, #:upper16:.LANCHOR0
	str	lr, [sp, #32]
	ldr	r5, [r9, #176]
	.pad #20
	sub	sp, sp, #20
	ldrh	ip, [r0, #32]
	ldrh	r1, [r0, #28]
	ldrh	r0, [r0, #30]
	ldr	r8, [r5, #8]
	ldr	r3, [r5, #12]
	sub	r2, ip, #1
	rsb	ip, ip, #0
	ldr	lr, [r5, #20]
	sub	r4, r1, #1
	rsb	r1, r1, #0
	add	r2, r2, r8
	and	r2, r2, ip
	ldrb	ip, [r9, #180]	@ zero_extendqisi2
	add	r3, r3, lr, lsl #3
	sub	r8, r2, r8
	add	r3, r3, r2
	ldr	r2, [r6, #80]
	add	r4, r4, r3
	cmp	ip, #0
	and	r4, r4, r1
	ldr	r1, [r9, #112]
	movne	r10, #4
	add	r4, r4, r0
	moveq	r10, #0
	sub	r3, r4, r3
	add	r2, r4, r2
	str	r3, [sp, #4]
	add	r3, r2, r10
	cmp	r3, r1
	bhi	.L5457
	bcc	.L5458
.L5442:
	mov	fp, #0
	str	fp, [sp, #8]
.L5420:
	mov	r3, #32
	mov	r2, fp
	mov	r1, r4
	mov	r0, r6
	bl	skb_copy_expand
	mov	r7, r0
	mov	r0, r6
	bl	dev_kfree_skb_any
	cmp	r7, #0
	beq	.L5459
	mov	r1, r4
	mov	r0, r7
	bl	skb_push
	cmp	r4, #0
	mov	r6, r0
	bne	.L5460
.L5422:
	ldr	r3, [r5]
	add	ip, r6, #8
	lsr	r2, r3, #16
	ubfx	r1, r3, #8, #8
	strb	r3, [r6]
	lsr	r3, r2, #8
	strb	r1, [r6, #1]
	strb	r2, [r6, #2]
	strb	r3, [r6, #3]
	ldr	r3, [r5, #8]
	ubfx	r2, r3, #8, #8
	strb	r3, [r6, #4]
	strb	r2, [r6, #5]
	ldr	r1, [r5, #24]
	ldr	r3, [r7, #80]
	cmp	r1, #1
	add	fp, fp, r3
	beq	.L5423
	cmp	r1, #2
	bne	.L5455
	lsr	r3, fp, #16
	ubfx	r2, fp, #8, #8
	strb	fp, [r6, #8]
	lsr	r0, r3, #8
	strb	r2, [r6, #9]
	strb	r3, [r6, #10]
	strb	r0, [r6, #11]
.L5426:
	ldr	r2, [r5, #8]
	add	r0, ip, r1, lsl #1
	ldr	r3, [r5, #28]
	add	r2, r8, r2
	cmp	r3, #1
	beq	.L5427
	cmp	r3, #2
	bne	.L5455
	lsr	lr, r2, #16
	ubfx	r6, r2, #8, #8
	lsr	fp, lr, #8
	strb	lr, [r0, #2]
	strb	fp, [r0, #3]
	strb	r2, [ip, r1, lsl #1]
	strb	r6, [r0, #1]
.L5430:
	ldr	r1, [r5, #4]
	add	r3, r8, r3, lsl #1
	uxth	r6, r4
	add	r2, r0, r3
	add	fp, r2, #6
	lsr	r8, r1, #16
	ubfx	ip, r1, #8, #8
	lsr	lr, r8, #8
	strb	r8, [r2, #2]
	strb	lr, [r2, #3]
	strb	r1, [r0, r3]
	ldr	r1, [sp, #4]
	strb	ip, [r2, #1]
	ldr	r3, [r5, #8]
	sub	r3, r6, r3
	sub	r3, r3, r1
	uxth	r3, r3
	lsr	r1, r3, #8
	strb	r3, [r2, #4]
	strb	r1, [r2, #5]
	ldrb	r1, [r9, #180]	@ zero_extendqisi2
	ldr	r8, [r5, #32]
	ldr	r3, [r5, #36]
	ldr	r2, [r5, #40]
	cmp	r1, #0
	add	r8, r8, r2
	add	r8, r8, r3
	add	r9, fp, r8, lsl #1
	bne	.L5461
.L5431:
	ldr	r2, [r5, #20]
	cmp	r2, #1
	beq	.L5432
	cmp	r2, #2
	bne	.L5455
	lsr	r3, r4, #16
	lsr	r6, r6, #8
	lsr	r1, r3, #8
	strb	r3, [r9, #2]
	strb	r1, [r9, #3]
	strb	r4, [fp, r8, lsl #1]
	strb	r6, [r9, #1]
.L5435:
	ldr	r0, [r5, #20]
	add	r1, r9, r2, lsl #1
	ldr	r3, [r7, #80]
	cmp	r0, #1
	sub	r4, r3, r4
	beq	.L5436
	cmp	r0, #2
	bne	.L5455
	lsr	r3, r4, #16
	ubfx	r0, r4, #8, #8
	lsr	ip, r3, #8
	strb	r3, [r1, #2]
	strb	ip, [r1, #3]
	strb	r4, [r9, r2, lsl #1]
	strb	r0, [r1, #1]
.L5439:
	ldr	r3, [sp, #8]
	cmp	r3, #0
	bne	.L5462
.L5416:
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5458:
	ldr	r2, [r9, #88]
	ldr	r2, [r2, #28]
	ldrh	r1, [r2, #4]	@ unaligned
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	bne	.L5442
	movw	r0, #:lower16:.LC472
	mov	fp, #1
	movt	r0, #:upper16:.LC472
	bl	printk
	str	fp, [sp, #8]
	b	.L5420
.L5423:
	ubfx	r3, fp, #8, #8
	strb	fp, [r6, #8]
	strb	r3, [r6, #9]
	b	.L5426
.L5427:
	ubfx	lr, r2, #8, #8
	strb	r2, [ip, r1, lsl #1]
	strb	lr, [r0, #1]
	b	.L5430
.L5432:
	lsr	r6, r6, #8
	strb	r4, [fp, r8, lsl #1]
	strb	r6, [r9, #1]
	b	.L5435
.L5436:
	ubfx	r3, r4, #8, #8
	strb	r4, [r9, r2, lsl #1]
	strb	r3, [r1, #1]
	b	.L5439
.L5460:
	mov	r1, r4
	bl	__memzero
	b	.L5422
.L5461:
	ldr	r2, [r7, #80]
	mvn	r0, #0
	ldr	r1, [r7, #172]
	sub	r2, r2, r4
	add	r1, r1, r4
	bl	crc32_le
	ldr	lr, [r7, #80]
	mvn	r2, r0
	mov	r1, r10
	ldr	r3, [r7, #172]
	lsr	ip, r2, #16
	ubfx	r0, r2, #8, #8
	lsr	r10, ip, #8
	str	r3, [sp, #4]
	add	r3, r3, lr
	str	r0, [sp, #12]
	mov	r0, r7
	strb	ip, [r3, #2]
	ldr	ip, [sp, #4]
	strb	r10, [r3, #3]
	strb	r2, [ip, lr]
	ldr	r2, [sp, #12]
	strb	r2, [r3, #1]
	bl	skb_put
	b	.L5431
.L5457:
	mov	r0, r6
	mov	r7, #0
	bl	dev_kfree_skb_any
	b	.L5416
.L5455:
	.syntax divided
@ 445 "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_ncm.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_ncm.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 445, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L5462:
	mov	r1, #1
	mov	r0, r7
	bl	skb_put
	mov	r1, #1
	bl	__memzero
	movw	r0, #:lower16:.LC474
	ldr	r1, .L5463
	movt	r0, #:upper16:.LC474
	ldr	r2, [r7, #80]
	bl	printk
	b	.L5416
.L5459:
	movw	r0, #:lower16:.LC473
	movt	r0, #:upper16:.LC473
	bl	printk
	b	.L5416
.L5464:
	.align	2
.L5463:
	.word	.LANCHOR3+3724
	.fnend
	.size	ncm_wrap_ntb, .-ncm_wrap_ntb
	.section	.text.unlikely
	.align	2
	.global	usb_gadget_connect_work
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_gadget_connect_work, %function
usb_gadget_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	movw	r5, #:lower16:speaker_status
	ldr	r2, .L5469
	.pad #8
	sub	sp, sp, #8
	movt	r5, #:upper16:speaker_status
	mov	r4, r0
	ldr	r6, [r0, #-440]
	ldr	ip, [r0, #48]
	movw	r0, #:lower16:.LC475
	movt	r0, #:upper16:.LC475
	ldr	r3, [r5]
	mov	r1, r2
	str	ip, [sp]
	bl	printk
	ldr	r3, [r5]
	cmp	r3, #0
	ble	.L5466
	ldr	r3, [r4, #48]
	add	r3, r3, #1
	cmp	r3, #59
	str	r3, [r4, #48]
	bgt	.L5466
	mov	r0, #50
	bl	msecs_to_jiffies
	mov	r1, r0
	mov	r0, r4
	add	sp, sp, #8
	@ sp needed
	pop	{r4, r5, r6, lr}
	b	schedule_delayed_work
.L5466:
	ldr	r0, [r6]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L5465
	mov	r1, #1
	add	sp, sp, #8
	@ sp needed
	pop	{r4, r5, r6, lr}
	bx	r3
.L5465:
	add	sp, sp, #8
	@ sp needed
	pop	{r4, r5, r6, pc}
.L5470:
	.align	2
.L5469:
	.word	.LANCHOR3+3740
	.fnend
	.size	usb_gadget_connect_work, .-usb_gadget_connect_work
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_ctrlrequest, %function
acc_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r3, #:lower16:.LANCHOR1
	mov	r5, r0
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	ip, [r1]	@ zero_extendqisi2
	ldrb	r2, [r1, #1]	@ zero_extendqisi2
	ldr	r4, [r3, #2488]
	cmp	ip, #64
	beq	.L5530
	cmp	r2, #51
	cmpeq	ip, #192
	bne	.L5514
	ldr	r3, [r5, #4]
	mov	r6, #2
	mov	r1, #256
	add	r0, r4, #101
	ldr	r3, [r3]
	strh	r6, [r3]	@ movhi
	bl	__memzero
	add	r0, r4, #356
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r4, #612
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r4, #868
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero
	add	r0, r4, #1120
	mov	r1, #256
	add	r0, r0, #5
	bl	__memzero
	add	r0, r4, #1376
	mov	r1, #256
	add	r0, r0, #5
	bl	__memzero
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #1644]
	str	r3, [r4, #1648]
.L5474:
	ldr	r3, [r5, #4]
	mov	r2, #32
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfc	r1, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r5, #4]
	str	r0, [r3, #4]
	ldr	r3, [r5]
	ldr	r1, [r5, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L5531
.L5471:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L5530:
	cmp	r2, #53
	beq	.L5532
	cmp	r2, #52
	ldrh	r6, [r1, #4]	@ unaligned
	ldrh	r7, [r1, #6]	@ unaligned
	beq	.L5533
	ldrh	r8, [r1, #2]	@ unaligned
	orr	r3, r6, r7
	cmp	r2, #58
	cmpeq	r3, #0
	moveq	r0, #0
	streq	r8, [r4, #1648]
	beq	.L5474
	cmp	r2, #54
	beq	.L5534
	cmp	r2, #55
	beq	.L5535
	cmp	r2, #56
	beq	.L5536
	cmp	r2, #57
	bne	.L5514
	add	r9, r4, #88
	add	r4, r4, #1760
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #4]
	add	r4, r4, #4
	mov	r1, r0
	cmp	r4, r6
	bne	.L5511
	b	.L5508
.L5537:
	ldr	r6, [r6]
	cmp	r4, r6
	beq	.L5508
.L5511:
	ldr	r3, [r6, #16]
	cmp	r8, r3
	bne	.L5537
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L5529
	ldr	r2, [r5, #4]
	movw	r3, #:lower16:acc_complete_send_hid_event
	mov	r0, r7
	movt	r3, #:upper16:acc_complete_send_hid_event
	str	r6, [r2, #32]
	ldr	r2, [r5, #4]
	str	r3, [r2, #28]
	b	.L5474
.L5531:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC476
	movt	r1, #:upper16:.LC476
	ldr	r2, .L5544
	add	r0, r0, #32
	bl	dev_err
	b	.L5471
.L5533:
	str	r6, [r4, #1640]
	ldr	r2, [r5]
	movw	r3, #:lower16:acc_complete_set_string
	movt	r3, #:upper16:acc_complete_set_string
	mov	r0, r7
	ldr	r2, [r2, #4]
	str	r4, [r2]
	ldr	r2, [r5, #4]
	str	r3, [r2, #28]
	b	.L5474
.L5514:
.L5479:
	mvn	r4, #94
	b	.L5471
.L5532:
	mov	r3, #1
	mov	r0, #200
	str	r3, [r4, #1644]
	bl	msecs_to_jiffies
	mov	r1, r0
	add	r0, r4, #1696
	add	r0, r0, #4
	bl	schedule_delayed_work
	mov	r0, #0
	b	.L5474
.L5534:
	cmp	r6, #0
	beq	.L5529
	add	r7, r4, #88
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1764]
	add	r1, r4, #1760
	mov	r9, r0
	add	r1, r1, #4
	cmp	r1, r3
	mov	r10, r3
	bne	.L5483
	b	.L5480
.L5538:
	ldr	r3, [r3]
	cmp	r1, r3
	mov	r10, r3
	beq	.L5480
.L5483:
	ldr	r2, [r3, #16]
	cmp	r8, r2
	bne	.L5538
	cmp	r3, #0
	beq	.L5480
.L5484:
	mov	r0, r10
	bl	__list_del_entry
	add	r1, r4, #1776
	mov	r0, r10
	ldr	r2, [r4, #1780]
	add	r1, r1, #4
	bl	__list_add
.L5485:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L5512
	mov	r2, #32
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r10, r0, #0
	beq	.L5490
.L5489:
	movw	r1, #32800
	mov	r0, r6
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r10, #20]
	beq	.L5539
	str	r4, [r10, #12]
	add	r1, r4, #1760
	mov	r0, r10
	str	r8, [r10, #16]
	add	r1, r1, #12
	str	r6, [r10, #24]
	ldr	r2, [r4, #1772]
.L5528:
	bl	__list_add
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	add	r0, r4, #1744
	add	r0, r0, #4
	bl	schedule_work
	mov	r0, #0
	b	.L5474
.L5535:
	add	r7, r4, #88
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #1764]
	add	r1, r4, #1760
	mov	r9, r0
	add	r1, r1, #4
	cmp	r1, r3
	mov	r6, r3
	bne	.L5496
	b	.L5493
.L5540:
	ldr	r3, [r3]
	cmp	r1, r3
	mov	r6, r3
	beq	.L5493
.L5496:
	ldr	r2, [r3, #16]
	cmp	r8, r2
	bne	.L5540
	cmp	r3, #0
	beq	.L5493
.L5497:
	mov	r0, r6
	bl	__list_del_entry
	add	r1, r4, #1776
	mov	r0, r6
	ldr	r2, [r4, #1780]
	add	r1, r1, #4
	b	.L5528
.L5536:
	add	r10, r4, #88
	add	r4, r4, #1760
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r4, #12]
	add	r4, r4, #12
	mov	r1, r0
	cmp	r4, r9
	bne	.L5506
	b	.L5503
.L5541:
	ldr	r9, [r9]
	cmp	r4, r9
	beq	.L5503
.L5506:
	ldr	r3, [r9, #16]
	cmp	r8, r3
	bne	.L5541
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	cmp	r9, #0
	beq	.L5529
	ldr	r3, [r9, #28]
	cmp	r3, r6
	bne	.L5529
	ldr	r3, [r9, #24]
	add	r6, r7, r6
	cmp	r6, r3
	bgt	.L5529
	ldr	r2, [r5, #4]
	movw	r3, #:lower16:acc_complete_set_hid_report_desc
	mov	r0, r7
	movt	r3, #:upper16:acc_complete_set_hid_report_desc
	str	r9, [r2, #32]
	ldr	r2, [r5, #4]
	str	r3, [r2, #28]
	b	.L5474
.L5512:
	mov	r10, #16
	b	.L5489
.L5480:
	ldr	r3, [r4, #1772]
	add	r1, r4, #1760
	add	r1, r1, #12
	cmp	r1, r3
	bne	.L5488
	b	.L5485
.L5542:
	ldr	r3, [r3]
	cmp	r1, r3
	beq	.L5485
.L5488:
	ldr	r2, [r3, #16]
	cmp	r8, r2
	bne	.L5542
	cmp	r3, #0
	beq	.L5485
	mov	r10, r3
	b	.L5484
.L5493:
	ldr	r3, [r4, #1772]
	add	r1, r4, #1760
	add	r1, r1, #12
	cmp	r1, r3
	mov	r6, r3
	bne	.L5501
	b	.L5498
.L5543:
	ldr	r3, [r3]
	cmp	r1, r3
	mov	r6, r3
	beq	.L5498
.L5501:
	ldr	r2, [r3, #16]
	cmp	r8, r2
	bne	.L5543
	cmp	r3, #0
	bne	.L5497
.L5498:
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mvn	r4, #21
	b	.L5471
.L5539:
	mov	r0, r10
	bl	kfree
.L5490:
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mvn	r4, #11
	b	.L5471
.L5503:
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
.L5529:
	mvn	r4, #21
	b	.L5471
.L5508:
	mov	r0, r9
	mvn	r4, #21
	bl	_raw_spin_unlock_irqrestore
	b	.L5471
.L5545:
	.align	2
.L5544:
	.word	.LANCHOR3+3764
	.fnend
	.size	acc_ctrlrequest, .-acc_ctrlrequest
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	accessory_function_ctrlrequest, %function
accessory_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r1
	mov	r1, r2
	b	acc_ctrlrequest
	.fnend
	.size	accessory_function_ctrlrequest, .-accessory_function_ctrlrequest
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_start_work, %function
acc_start_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR0
	.save {lr}
	str	lr, [sp, #-4]!
	movw	r3, #:lower16:.LC477
	movt	r2, #:upper16:.LANCHOR0
	.pad #12
	sub	sp, sp, #12
	ldr	r0, [r2, #692]
	movt	r3, #:upper16:.LC477
	mov	ip, #0
	mov	r1, #2
	mov	r2, sp
	stm	sp, {r3, ip}
	add	r0, r0, #8
	bl	kobject_uevent_env
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
	.fnend
	.size	acc_start_work, .-acc_start_work
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_work, %function
ncm_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LC478
	push	{r4, lr}
	.save {r4, lr}
	mov	ip, #0
	.pad #16
	sub	sp, sp, #16
	ldr	r1, .L5553
	movt	r2, #:upper16:.LC478
	movw	r3, #:lower16:.LC479
	movw	r4, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LC479
	movt	r4, #:upper16:.LANCHOR1
	movw	r0, #:lower16:.LC480
	stm	sp, {r2, ip}
	movt	r0, #:upper16:.LC480
	ldrb	r2, [r4, #3752]	@ zero_extendqisi2
	str	r3, [sp, #8]
	str	ip, [sp, #12]
	bl	printk
	ldrb	r3, [r4, #3752]	@ zero_extendqisi2
	mov	r1, #2
	cmp	r3, #0
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	addeq	r2, sp, #8
	ldr	r0, [r3, #872]
	movne	r2, sp
	add	r0, r0, #8
	bl	kobject_uevent_env
	add	sp, sp, #16
	@ sp needed
	pop	{r4, pc}
.L5554:
	.align	2
.L5553:
	.word	.LANCHOR3+3780
	.fnend
	.size	ncm_work, .-ncm_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_cleanup_functions, %function
android_cleanup_functions:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR1
	sub	r7, r0, #4
	movt	r5, #:upper16:.LANCHOR1
.L5556:
	ldr	r4, [r7, #4]!
	cmp	r4, #0
	popeq	{r4, r5, r6, r7, r8, pc}
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L5556
	ldr	r1, [r3, #288]
	ldr	r0, [r5, #3756]
	bl	device_destroy
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #28]
	cmp	r3, #0
	beq	.L5558
	mov	r0, r4
	blx	r3
.L5558:
	ldr	r6, [r4, #16]
	cmp	r6, #0
	beq	.L5556
.L5559:
	ldr	r1, [r6], #4
	cmp	r1, #0
	beq	.L5556
	ldr	r0, [r4, #8]
	bl	device_remove_file
	b	.L5559
	.fnend
	.size	android_cleanup_functions, .-android_cleanup_functions
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_usb_unbind, %function
android_usb_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	mov	r2, r5
	str	lr, [sp, #12]
	ldr	r3, [r2, #3232]!
	cmp	r3, r2
	sub	r4, r3, #512
	bne	.L5572
	b	.L5570
.L5574:
	ldr	r3, [r4, #512]
	cmp	r3, r2
	sub	r4, r3, #512
	beq	.L5570
.L5572:
	ldr	r3, [r3, #-504]
	cmp	r0, r3
	bne	.L5574
.L5570:
	movw	r0, #:lower16:.LC481
	ldr	r1, .L5575
	mov	r6, #0
	movt	r0, #:upper16:.LC481
	bl	printk
	mov	r3, #48
	add	r0, r4, #176
	strb	r3, [r5, #2220]
	strb	r6, [r5, #2508]
	strb	r6, [r5, #2764]
	bl	cancel_work_sync
	ldr	r0, [r4, #4]
	bl	android_cleanup_functions
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5576:
	.align	2
.L5575:
	.word	.LANCHOR3+3792
	.fnend
	.size	android_usb_unbind, .-android_usb_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	macos_show, %function
macos_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	ldr	r3, [r0, #8]
	cmp	r3, #0
	beq	.L5578
	ldr	r0, [r3]
	bl	sec_get_ss_host_available
	mov	r4, r0
	bl	get_host_os_type
	cmp	r4, #1
	cmpeq	r0, #1
	mov	r5, r0
	bne	.L5581
	movw	r0, #:lower16:.LC482
	ldr	r1, .L5583
	mov	r7, #0
	movt	r0, #:upper16:.LC482
	bl	printk
.L5579:
	movw	r0, #:lower16:.LC483
	mov	r3, r5
	ldr	r1, .L5583
	mov	r2, r4
	movt	r0, #:upper16:.LC483
	bl	printk
	b	.L5580
.L5578:
	movw	r0, #:lower16:.LC484
	ldr	r1, .L5583
	mvn	r7, #0
	movt	r0, #:upper16:.LC484
	bl	printk
.L5580:
	movw	r1, #:lower16:.LC77
	mov	r2, r7
	ldrd	r4, [sp]
	mov	r0, r6
	movt	r1, #:upper16:.LC77
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	sprintf
.L5581:
	mov	r7, #1
	b	.L5579
.L5584:
	.align	2
.L5583:
	.word	.LANCHOR3+3812
	.fnend
	.size	macos_show, .-macos_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ss_host_available_show, %function
ss_host_available_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	ldr	r3, [r0, #8]
	cmp	r3, #0
	beq	.L5586
	ldr	r0, [r3]
	bl	sec_get_ss_host_available
	mov	r4, r0
	bl	get_host_os_type
	cmp	r4, #1
	cmpeq	r0, #1
	mov	r5, r0
	moveq	r3, #1
	movne	r3, #0
	bne	.L5589
	movw	r0, #:lower16:.LC482
	ldr	r1, .L5591
	mov	r7, #1
	movt	r0, #:upper16:.LC482
	bl	printk
.L5587:
	movw	r0, #:lower16:.LC483
	mov	r3, r5
	ldr	r1, .L5591
	mov	r2, r4
	movt	r0, #:upper16:.LC483
	bl	printk
	b	.L5588
.L5586:
	movw	r0, #:lower16:.LC484
	ldr	r1, .L5591
	mvn	r7, #0
	movt	r0, #:upper16:.LC484
	bl	printk
.L5588:
	movw	r1, #:lower16:.LC77
	mov	r2, r7
	ldrd	r4, [sp]
	mov	r0, r6
	movt	r1, #:upper16:.LC77
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	sprintf
.L5589:
	mov	r7, r3
	b	.L5587
.L5592:
	.align	2
.L5591:
	.word	.LANCHOR3+3824
	.fnend
	.size	ss_host_available_show, .-ss_host_available_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iSerial_store, %function
iSerial_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L5595
	mov	r1, r2
	ldr	r0, .L5600
	mov	r2, #256
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	ldr	r0, .L5600
	bl	strim
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5595:
	mvn	r0, #21
	bx	lr
.L5601:
	.align	2
.L5600:
	.word	.LANCHOR1+2220
	.fnend
	.size	iSerial_store, .-iSerial_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iProduct_store, %function
iProduct_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L5604
	mov	r1, r2
	ldr	r0, .L5609
	mov	r2, #256
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	ldr	r0, .L5609
	bl	strim
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5604:
	mvn	r0, #21
	bx	lr
.L5610:
	.align	2
.L5609:
	.word	.LANCHOR1+2508
	.fnend
	.size	iProduct_store, .-iProduct_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	iManufacturer_store, %function
iManufacturer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L5613
	mov	r1, r2
	ldr	r0, .L5618
	mov	r2, #256
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r3
	str	lr, [sp, #4]
	bl	strlcpy
	ldr	r0, .L5618
	bl	strim
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5613:
	mvn	r0, #21
	bx	lr
.L5619:
	.align	2
.L5618:
	.word	.LANCHOR1+2764
	.fnend
	.size	iManufacturer_store, .-iManufacturer_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_aliases_store, %function
ffs_aliases_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 264
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r4, #:lower16:__stack_chk_guard
	movt	r1, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r4, #:upper16:__stack_chk_guard
	str	r8, [sp, #16]
	mov	r6, r3
	ldr	r3, [r4]
	str	lr, [sp, #20]
	ldr	r5, [r1, #3232]
	.pad #264
	sub	sp, sp, #264
	mov	r8, r2
	str	r3, [sp, #260]
	sub	r7, r5, #488
	mov	r0, r7
	bl	mutex_lock
	ldrb	r3, [r5, #-496]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L5625
	mov	r1, r8
	mov	r2, #256
	add	r0, sp, #4
	bl	strlcpy
	add	r0, sp, #4
	bl	strim
	mov	r1, r0
	mov	r2, #256
	sub	r0, r5, #320
	bl	strlcpy
	mov	r0, r7
	bl	mutex_unlock
	mov	r0, r6
.L5620:
	ldr	r2, [sp, #260]
	ldr	r3, [r4]
	cmp	r2, r3
	bne	.L5626
	add	sp, sp, #264
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5625:
	mov	r0, r7
	bl	mutex_unlock
	mvn	r0, #15
	b	.L5620
.L5626:
	bl	__stack_chk_fail
	.fnend
	.size	ffs_aliases_store, .-ffs_aliases_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	functions_store, %function
functions_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 552
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:__stack_chk_guard
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movt	r1, #:upper16:__stack_chk_guard
	mov	r7, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #556
	sub	sp, sp, #556
	str	r3, [sp, #16]
	ldr	r3, [r1]
	str	r1, [sp, #20]
	str	r3, [sp, #548]
	bl	dev_get_drvdata
	add	r3, r0, #24
	mov	r9, r0
	add	fp, r0, #500
	mov	r0, r3
	str	r3, [sp, #12]
	bl	mutex_lock
	ldrb	r6, [r9, #16]	@ zero_extendqisi2
	cmp	r6, #0
	bne	.L5680
	ldr	r5, [r9, #500]
	cmp	fp, r5
	sub	r5, r5, #120
	beq	.L5631
.L5630:
	mov	r8, r5
	ldr	r4, [r8, #112]!
	cmp	r8, r4
	beq	.L5633
.L5632:
	mov	r0, r4
	ldr	r3, [r4, #-4]!
	str	r6, [r3, #20]
	bl	list_del
	mov	r0, r4
	bl	kfree
	ldr	r4, [r5, #112]
	cmp	r4, r8
	bne	.L5632
.L5633:
	ldr	r3, [r5, #120]
	str	r8, [r5, #112]
	str	r8, [r5, #116]
	cmp	fp, r3
	sub	r5, r3, #120
	bne	.L5630
.L5631:
	mov	r1, r7
	mov	r2, #256
	add	r0, sp, #36
	bl	strlcpy
	add	r0, sp, #36
	bl	strim
	cmp	r0, #0
	str	r0, [sp, #28]
	beq	.L5655
	movw	r3, #:lower16:.LC485
	movw	r4, #:lower16:.LC487
	str	fp, [sp]
	movt	r3, #:upper16:.LC485
	movt	r4, #:upper16:.LC487
	mov	r7, #0
	stmib	sp, {r3, fp}
.L5648:
	add	r0, sp, #28
	ldr	r1, [sp, #4]
	bl	strsep
	cmp	r0, #0
	str	r0, [sp, #24]
	beq	.L5635
	ldr	r3, [sp]
	ldr	r2, [sp, #8]
	ldr	r3, [r3]
	cmp	r3, r2
	beq	.L5636
	sub	r10, r3, #120
	str	r3, [sp]
.L5637:
	movw	fp, #:lower16:.LC490
	add	r8, r9, #192
	movt	fp, #:upper16:.LC490
	add	r6, sp, #292
.L5647:
	mov	r1, r4
	add	r0, sp, #24
	bl	strsep
	mov	r5, r0
	mov	r2, #256
	mov	r1, r8
	mov	r0, r6
	bl	strlcpy
	str	r6, [sp, #32]
.L5643:
	mov	r1, r4
	add	r0, sp, #32
	bl	strsep
	subs	r1, r0, #0
	beq	.L5641
	mov	r0, r5
	bl	strcmp
	cmp	r0, #0
	beq	.L5642
.L5641:
	ldr	r3, [sp, #32]
	cmp	r3, #0
	bne	.L5643
	mov	r2, r5
	mov	r1, r10
	mov	r0, r9
	bl	android_enable_function
	cmp	r0, #0
	beq	.L5646
	mov	r3, r0
	mov	r2, r5
	ldr	r1, .L5685
	mov	r0, fp
	bl	printk
.L5646:
	ldr	r3, [sp, #24]
	cmp	r3, #0
	bne	.L5647
.L5635:
	ldr	r3, [sp, #28]
	cmp	r3, #0
	bne	.L5648
.L5684:
	ldr	fp, [sp, #8]
.L5634:
	ldr	r3, [sp]
	ldr	r4, [r3]
	cmp	r4, fp
	movne	r5, r3
	beq	.L5650
.L5649:
	mov	r0, r4
	sub	r4, r4, #120
	bl	list_del
	ldr	r3, [r9, #508]
	mov	r0, r4
	sub	r3, r3, #1
	str	r3, [r9, #508]
	bl	kfree
	ldr	r4, [r5]
	cmp	r4, fp
	bne	.L5649
.L5650:
	ldr	r0, [sp, #12]
	bl	mutex_unlock
	ldr	r0, [sp, #16]
.L5627:
	ldr	r3, [sp, #20]
	ldr	r2, [sp, #548]
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L5681
	add	sp, sp, #556
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5642:
	cmp	r7, #0
	beq	.L5682
.L5652:
	mov	r7, #1
	b	.L5646
.L5682:
	movw	r2, #:lower16:.LC488
	mov	r1, r10
	movt	r2, #:upper16:.LC488
	mov	r0, r9
	bl	android_enable_function
	subs	r2, r0, #0
	beq	.L5652
	movw	r0, #:lower16:.LC489
	ldr	r1, .L5685
	movt	r0, #:upper16:.LC489
	bl	printk
	b	.L5646
.L5636:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L5656
	mov	r2, #128
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r10, r0, #0
	beq	.L5683
.L5638:
	ldr	ip, [r9]
	movw	r1, #:lower16:android_unbind_config
	add	r3, r10, #112
	ldr	r2, [r9, #508]
	movt	r1, #:upper16:android_unbind_config
	mov	r0, #12480
	add	r2, r2, #1
	str	r2, [r9, #508]
	ldr	r2, [sp, #8]
	str	ip, [r10]
	str	r1, [r10, #12]
	ldr	r1, [r9, #508]
	strb	r1, [r10, #20]
	strh	r0, [r10, #22]	@ movhi
	add	r0, r10, #120
	str	r3, [r10, #112]
	str	r3, [r10, #116]
	ldr	r1, [r9, #504]
	bl	__list_add
	ldr	r2, [sp]
	ldr	r3, [sp, #24]
	ldr	r2, [r2]
	str	r2, [sp]
.L5639:
	cmp	r3, #0
	bne	.L5637
	ldr	r3, [sp, #28]
	cmp	r3, #0
	bne	.L5648
	b	.L5684
.L5656:
	mov	r10, #16
	b	.L5638
.L5655:
	str	fp, [sp]
	b	.L5634
.L5681:
	bl	__stack_chk_fail
.L5680:
	ldr	r0, [sp, #12]
	bl	mutex_unlock
	mvn	r0, #15
	b	.L5627
.L5683:
	ldr	r2, .L5685+4
	movw	r0, #:lower16:.LC486
	mvn	r10, #11
	movt	r0, #:upper16:.LC486
	mov	r1, r2
	bl	printk
	ldr	r2, [sp]
	ldr	r3, [sp, #24]
	ldr	r2, [r2]
	str	r2, [sp]
	b	.L5639
.L5686:
	.align	2
.L5685:
	.word	.LANCHOR3+3872
	.word	.LANCHOR3+3848
	.fnend
	.size	functions_store, .-functions_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	send_message, %function
send_message:
	.fnstart
	@ args = 0, pretend = 0, frame = 264
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r10, fp, lr}
	ldr	r5, .L5704
	movw	r4, #:lower16:__stack_chk_guard
	movt	r4, #:upper16:__stack_chk_guard
	strd	r6, [sp, #8]
	mov	r6, r0
	ldr	r2, [r4]
	str	r8, [sp, #16]
	mov	r8, r1
	strd	r10, [sp, #20]
	ldrh	r3, [r5, #-14]
	str	lr, [sp, #28]
	.pad #264
	sub	sp, sp, #264
	ldr	r7, [r0]
	str	r2, [sp, #260]
	tst	r3, #4
	beq	.L5688
	movw	r2, #:lower16:.LC491
	ldr	r3, .L5704+4
	add	r1, r7, #32
	movt	r2, #:upper16:.LC491
	sub	r0, r5, #32
	bl	__dynamic_dev_dbg
.L5688:
	movw	r0, #:lower16:.LC492
	mov	r2, r8
	ldr	r1, .L5704+4
	movt	r0, #:upper16:.LC492
	bl	printk
	cmp	r7, #0
	beq	.L5701
	movw	lr, #:lower16:.LC493
	mov	r3, r8
	movt	lr, #:upper16:.LC493
	add	r8, sp, #140
	ldrd	r0, [lr]
	add	ip, sp, #20
	movw	r2, #:lower16:.LC494
	ldrd	r10, [lr, #8]
	movt	r2, #:upper16:.LC494
	strd	r10, [sp]
	ldrd	r10, [lr, #16]
	strd	r0, [sp, #20]
	ldrd	r0, [sp]
	str	ip, [sp, #8]
	strd	r0, [sp, #28]
	mov	r0, r8
	mov	r1, #120
	strd	r10, [sp, #36]
	bl	snprintf
	ldr	r0, [r7, #356]
	mov	r3, #0
	str	r8, [sp, #12]
	str	r3, [sp, #16]
	cmp	r0, r3
	beq	.L5690
.L5693:
	ldr	r3, .L5704+8
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L5702
.L5692:
	add	r0, r7, #40
	add	r2, sp, #8
	mov	r1, #2
	bl	kobject_uevent_env
.L5701:
	mov	r0, #0
.L5687:
	ldr	r2, [sp, #260]
	ldr	r3, [r4]
	cmp	r2, r3
	bne	.L5703
	add	sp, sp, #264
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldrd	r10, [sp, #20]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L5690:
	movw	r1, #:lower16:.LC495
	ldr	r2, .L5704+12
	movt	r1, #:upper16:.LC495
	bl	__class_create
	cmn	r0, #4096
	str	r0, [r7, #356]
	bls	.L5693
	mvn	r0, #0
	b	.L5687
.L5703:
	bl	__stack_chk_fail
.L5702:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC496
	sub	r0, r5, #8
	movt	r2, #:upper16:.LC496
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L5692
.L5705:
	.align	2
.L5704:
	.word	.LANCHOR4-2992
	.word	.LANCHOR3+3888
	.word	.LANCHOR4-2976
	.word	.LANCHOR1+3760
	.fnend
	.size	send_message, .-send_message
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_bind, %function
android_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	ldr	fp, [r0]
	mov	r8, r0
	ldr	r4, [r6, #3236]
	movw	r0, #:lower16:.LC497
	.pad #20
	sub	sp, sp, #20
	ldr	r1, .L5785
	movt	r0, #:upper16:.LC497
	str	r8, [r4, #-504]
	bl	printk
	ldr	r3, [fp]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L5707
	mov	r1, #0
	mov	r0, fp
	blx	r3
.L5707:
	ldr	r10, [r6, #3588]
	cmp	r10, #1
	beq	.L5708
.L5727:
	ldrb	r3, [r8, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bls	.L5782
	b	.L5710
.L5708:
	ldr	r7, [r6, #3232]
	ldr	r2, .L5785+4
	ldr	r3, [r4, #-508]
	sub	r7, r7, #512
.L5711:
	add	r1, r7, #512
	cmp	r1, r2
	beq	.L5712
	ldr	r1, [r7, #8]
	cmp	r8, r1
	beq	.L5712
	ldr	r7, [r7, #512]
	sub	r7, r7, #512
	b	.L5711
.L5712:
	sub	r3, r3, #4
	mov	r2, r3
	movw	r3, #:lower16:.LC498
	movt	r3, #:upper16:.LC498
	mov	r5, r2
	str	r3, [sp, #12]
.L5714:
	ldr	r4, [r5, #4]!
	cmp	r4, #0
	beq	.L5727
	mov	r0, #208
	ldr	r2, [r4]
	ldr	r1, [sp, #12]
	bl	kasprintf
	mov	r3, #0
	str	r0, [r4, #12]
	cmp	r0, r3
	str	r3, [r4, #20]
	beq	.L5732
	mov	r3, r4
	mov	r2, r10
	str	r0, [sp]
	ldr	r1, [r7, #12]
	ldr	r0, [r6, #3756]
	bl	device_create
	cmn	r0, #4096
	str	r0, [r4, #8]
	bls	.L5716
	ldr	r2, .L5785+8
	movw	r0, #:lower16:.LC499
	movt	r0, #:upper16:.LC499
	ldr	r3, [r4, #12]
	mov	r1, r2
	bl	printk
	ldr	r5, [r4, #8]
	b	.L5717
.L5716:
	ldr	r3, [r4, #24]
	cmp	r3, #0
	beq	.L5718
	mov	r1, r8
	mov	r0, r4
	blx	r3
	cmp	r0, #0
	beq	.L5718
	ldr	r2, .L5785+8
	mov	r5, r0
	movw	r0, #:lower16:.LC500
	movt	r0, #:upper16:.LC500
	ldr	r3, [r4]
	mov	r1, r2
	bl	printk
	b	.L5719
.L5718:
	ldr	r9, [r4, #16]
	cmp	r9, #0
	beq	.L5721
	mov	r0, #0
.L5720:
	mov	r3, r9
	ldr	r1, [r3], #4
	cmp	r1, #0
	beq	.L5722
	cmp	r0, #0
	bne	.L5779
	ldr	r0, [r4, #8]
	mov	r9, r3
	bl	device_create_file
	b	.L5720
.L5722:
	cmp	r0, #0
	beq	.L5721
.L5779:
	mov	r2, r3
	mov	r3, r9
	mov	r9, r2
	ldr	r2, .L5785+8
	mov	r5, r0
	movw	r0, #:lower16:.LC501
	sub	r10, r3, #4
	ldr	r3, [r4]
	movt	r0, #:upper16:.LC501
	mov	r1, r2
	bl	printk
	ldr	r1, [r9, #-8]
	b	.L5725
.L5721:
	add	r10, r10, #1
	b	.L5714
.L5725:
	ldr	r3, [r4, #16]
	cmp	r10, r3
	beq	.L5783
	ldr	r0, [r4, #8]
	bl	device_remove_file
	ldr	r1, [r10], #-4
	b	.L5725
.L5783:
	ldr	r3, [r4, #28]
	cmp	r3, #0
	beq	.L5719
	mov	r0, r4
	blx	r3
.L5719:
	ldr	r3, [r4, #8]
	ldr	r0, [r6, #3756]
	ldr	r1, [r3, #288]
	bl	device_destroy
.L5717:
	mov	r3, #0
	ldr	r0, [r4, #12]
	str	r3, [r4, #8]
	bl	kfree
	b	.L5715
.L5732:
	mvn	r5, #11
.L5715:
	ldr	r0, [r7, #4]
	bl	android_cleanup_functions
	cmp	r5, #0
	bne	.L5706
	b	.L5727
.L5782:
	add	r2, r3, #1
	movw	r1, #:lower16:.LANCHOR0
	uxtb	r2, r2
	movt	r1, #:upper16:.LANCHOR0
	mov	r5, r1
	cmp	r2, #254
	strb	r2, [r8, #48]
	strb	r2, [r1, #150]
	strb	r2, [r1, #1072]
	bne	.L5784
.L5710:
	mvn	r5, #18
	b	.L5706
.L5784:
	add	r3, r3, #2
	movw	r1, #:lower16:.LC502
	ldr	r0, .L5785+12
	uxtb	r3, r3
	movt	r1, #:upper16:.LC502
	mov	r2, #255
	strb	r3, [r8, #48]
	strb	r3, [r5, #151]
	strb	r3, [r5, #1080]
	bl	strlcpy
	movw	r1, #:lower16:.LC502
	mov	r2, #255
	ldr	r0, .L5785+16
	movt	r1, #:upper16:.LC502
	bl	strlcpy
	movw	r1, #:lower16:.LC503
	mov	r2, #255
	ldr	r0, .L5785+20
	movt	r1, #:upper16:.LC503
	bl	strlcpy
	ldrb	r3, [r8, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L5710
	add	r3, r3, #1
	movw	r0, #:lower16:.LC504
	uxtb	r3, r3
	movt	r0, #:upper16:.LC504
	strb	r3, [r8, #48]
	ldr	r4, [fp, #28]
	strb	r3, [r5, #152]
	strb	r3, [r5, #1088]
	mov	r1, r4
	bl	strcmp
	cmp	r0, #0
	beq	.L5734
	movw	r0, #:lower16:.LC505
	mov	r1, r4
	movt	r0, #:upper16:.LC505
	bl	strcmp
	cmp	r0, #0
	beq	.L5735
	movw	r0, #:lower16:.LC506
	mov	r1, r4
	movt	r0, #:upper16:.LC506
	bl	strcmp
	cmp	r0, #0
	beq	.L5736
	movw	r0, #:lower16:.LC507
	mov	r1, r4
	movt	r0, #:upper16:.LC507
	bl	strcmp
	cmp	r0, #0
	beq	.L5737
	movw	r0, #:lower16:.LC508
	mov	r1, r4
	movt	r0, #:upper16:.LC508
	bl	strcmp
	cmp	r0, #0
	beq	.L5738
	movw	r0, #:lower16:.LC509
	mov	r1, r4
	movt	r0, #:upper16:.LC509
	bl	strcmp
	cmp	r0, #0
	beq	.L5739
	movw	r0, #:lower16:.LC510
	mov	r1, r4
	movt	r0, #:upper16:.LC510
	bl	strcmp
	cmp	r0, #0
	beq	.L5740
	movw	r0, #:lower16:.LC511
	mov	r1, r4
	movt	r0, #:upper16:.LC511
	bl	strcmp
	cmp	r0, #0
	beq	.L5741
	movw	r0, #:lower16:.LC512
	mov	r1, r4
	movt	r0, #:upper16:.LC512
	bl	strcmp
	cmp	r0, #0
	beq	.L5742
	movw	r0, #:lower16:.LC513
	mov	r1, r4
	movt	r0, #:upper16:.LC513
	bl	strcmp
	cmp	r0, #0
	beq	.L5743
	movw	r0, #:lower16:.LC514
	mov	r1, r4
	movt	r0, #:upper16:.LC514
	bl	strcmp
	cmp	r0, #0
	beq	.L5744
	movw	r0, #:lower16:.LC515
	mov	r1, r4
	movt	r0, #:upper16:.LC515
	bl	strcmp
	cmp	r0, #0
	beq	.L5745
	movw	r0, #:lower16:.LC516
	mov	r1, r4
	movt	r0, #:upper16:.LC516
	bl	strcmp
	cmp	r0, #0
	beq	.L5746
	movw	r0, #:lower16:.LC517
	mov	r1, r4
	movt	r0, #:upper16:.LC517
	bl	strcmp
	cmp	r0, #0
	beq	.L5747
	movw	r0, #:lower16:.LC518
	mov	r1, r4
	movt	r0, #:upper16:.LC518
	bl	strcmp
	cmp	r0, #0
	beq	.L5748
	movw	r0, #:lower16:.LC519
	mov	r1, r4
	movt	r0, #:upper16:.LC519
	bl	strcmp
	cmp	r0, #0
	beq	.L5749
	movw	r0, #:lower16:.LC520
	mov	r1, r4
	movt	r0, #:upper16:.LC520
	bl	strcmp
	cmp	r0, #0
	beq	.L5750
	movw	r0, #:lower16:.LC521
	mov	r1, r4
	movt	r0, #:upper16:.LC521
	bl	strcmp
	cmp	r0, #0
	beq	.L5751
	movw	r0, #:lower16:.LC522
	mov	r1, r4
	movt	r0, #:upper16:.LC522
	bl	strcmp
	cmp	r0, #0
	beq	.L5752
	movw	r0, #:lower16:.LC523
	mov	r1, r4
	movt	r0, #:upper16:.LC523
	bl	strcmp
	cmp	r0, #0
	beq	.L5753
	movw	r0, #:lower16:.LC524
	mov	r1, r4
	movt	r0, #:upper16:.LC524
	bl	strcmp
	cmp	r0, #0
	beq	.L5754
	movw	r0, #:lower16:.LC525
	mov	r1, r4
	movt	r0, #:upper16:.LC525
	bl	strcmp
	cmp	r0, #0
	beq	.L5755
	movw	r0, #:lower16:.LC526
	mov	r1, r4
	movt	r0, #:upper16:.LC526
	bl	strcmp
	cmp	r0, #0
	beq	.L5756
	movw	r0, #:lower16:.LC527
	mov	r1, r4
	movt	r0, #:upper16:.LC527
	bl	strcmp
	cmp	r0, #0
	beq	.L5757
	movw	r0, #:lower16:.LC528
	mov	r1, r4
	movt	r0, #:upper16:.LC528
	bl	strcmp
	cmp	r0, #0
	beq	.L5758
	movw	r0, #:lower16:.LC529
	mov	r1, r4
	movt	r0, #:upper16:.LC529
	bl	strcmp
	cmp	r0, #0
	beq	.L5759
	movw	r0, #:lower16:.LC530
	mov	r1, r4
	movt	r0, #:upper16:.LC530
	bl	strcmp
	cmp	r0, #0
	beq	.L5760
	ldr	r2, .L5785+24
	movw	r0, #:lower16:.LC531
	mov	r3, r4
	movt	r0, #:upper16:.LC531
	sub	r1, r2, #40
	bl	printk
	movw	r3, #39321
	movt	r3, 65535
	strh	r3, [r5, #148]	@ movhi
	b	.L5731
.L5734:
	mov	r3, #1
	b	.L5730
.L5735:
	mov	r3, #2
	b	.L5730
.L5736:
	mov	r3, #3
	b	.L5730
.L5737:
	mov	r3, #6
	b	.L5730
.L5738:
	mov	r3, #8
	b	.L5730
.L5739:
	mov	r3, #17
	b	.L5730
.L5740:
	mov	r3, #18
	b	.L5730
.L5741:
	mov	r3, #19
	b	.L5730
.L5742:
	mov	r3, #20
	b	.L5730
.L5743:
	mov	r3, #22
	b	.L5730
.L5744:
	mov	r3, #24
	b	.L5730
.L5745:
	mov	r3, #25
	b	.L5730
.L5746:
	mov	r3, #32
	b	.L5730
.L5747:
	mov	r3, #33
	b	.L5730
.L5748:
	mov	r3, #34
	b	.L5730
.L5749:
	mov	r3, #35
	b	.L5730
.L5750:
	mov	r3, #36
	b	.L5730
.L5751:
	mov	r3, #37
	b	.L5730
.L5752:
	mov	r3, #38
	b	.L5730
.L5753:
	mov	r3, #39
	b	.L5730
.L5754:
	mov	r3, #40
	b	.L5730
.L5755:
	mov	r3, #41
	b	.L5730
.L5756:
	mov	r3, #48
	b	.L5730
.L5757:
	mov	r3, #49
	b	.L5730
.L5758:
	mov	r3, #50
	b	.L5730
.L5759:
	mov	r3, #51
	b	.L5730
.L5760:
	mov	r3, #52
.L5730:
	add	r3, r3, #512
	strh	r3, [r5, #148]	@ movhi
.L5731:
	mov	r3, #4
	mov	r5, #0
	str	r3, [r6, #3760]
.L5706:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
.L5786:
	.align	2
.L5785:
	.word	.LANCHOR3+3904
	.word	.LANCHOR1+3232
	.word	.LANCHOR3+3920
	.word	.LANCHOR1+2764
	.word	.LANCHOR1+2508
	.word	.LANCHOR1+2220
	.word	.LANCHOR3+3944
	.fnend
	.size	android_bind, .-android_bind
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_work, %function
android_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC532
	movw	r2, #:lower16:.LC533
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movt	r1, #:upper16:.LC532
	movt	r2, #:upper16:.LC533
	strd	r8, [sp, #16]
	movw	r3, #:lower16:.LC535
	movw	ip, #:lower16:.LC534
	strd	r10, [sp, #24]
	movt	r3, #:upper16:.LC535
	movt	ip, #:upper16:.LC534
	str	lr, [sp, #32]
	ldr	r5, [r0, #-168]
	.pad #68
	sub	sp, sp, #68
	mov	r4, r0
	str	r1, [sp, #16]
	movw	r1, #:lower16:.LC536
	str	r2, [sp, #24]
	movw	r2, #:lower16:.LC537
	movt	r1, #:upper16:.LC536
	movt	r2, #:upper16:.LC537
	add	r6, r5, #60
	str	ip, [sp, #32]
	str	r3, [sp, #40]
	mov	r3, #0
	mov	r0, r6
	str	r3, [sp, #20]
	str	r3, [sp, #28]
	str	r3, [sp, #36]
	str	r3, [sp, #44]
	str	r1, [sp, #48]
	str	r3, [sp, #52]
	strd	r2, [sp, #56]
	bl	_raw_spin_lock_irqsave
	ldrb	r7, [r4, #-126]	@ zero_extendqisi2
	mov	r9, r0
	ldrb	r3, [r4, #-125]	@ zero_extendqisi2
	cmp	r3, r7
	beq	.L5788
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L5846
	movw	r1, #:lower16:.LC538
	mov	r2, #3
	movt	r1, #:upper16:.LC538
	sub	r0, r4, #124
	bl	strncmp
	cmp	r0, #0
	eorne	r8, r7, #1
	mvneq	r8, #0
	cmp	r7, #0
	beq	.L5847
	movw	r5, #:lower16:.LANCHOR1
	mov	r3, #3
	movt	r5, #:upper16:.LANCHOR1
	add	fp, sp, #40
	str	r3, [r5, #3764]
.L5811:
	ldrb	r3, [r4, #-128]	@ zero_extendqisi2
	mov	r1, r9
	mov	r0, r6
	strb	r3, [r4, #-127]
	strb	r7, [r4, #-125]
	bl	_raw_spin_unlock_irqrestore
	cmn	r8, #1
	beq	.L5808
	ldr	r2, [r4, #-132]
	cmp	r2, #0
	addne	r3, sp, #24
	beq	.L5808
.L5799:
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldr	r1, [r6, #1104]
	cmp	r1, r8
	beq	.L5798
.L5817:
	ldr	r1, [r2, #4]
	cmp	r1, #0
	beq	.L5798
	cmp	r8, #0
	sub	r0, r4, #116
	str	r3, [sp, #12]
	addne	r1, r1, #1
	mvneq	r1, #0
	bl	pm_qos_update_request
	ldr	r3, [sp, #12]
	str	r8, [r6, #1104]
.L5798:
	cmp	fp, r3
	bne	.L5808
.L5800:
	ldr	r2, [r5, #3768]
	cmp	r2, #0
	movne	fp, r3
	bne	.L5793
	ldr	r2, [r5, #3764]
	sub	r2, r2, #3
	cmp	r2, #1
	movls	fp, r3
	bls	.L5806
	ldr	r0, [r4, #-164]
	mov	r2, r3
	mov	r1, #2
	str	r3, [sp, #12]
	add	r0, r0, #8
	bl	kobject_uevent_env
	ldr	r3, [sp, #12]
.L5814:
	ldr	r0, [r4, #-164]
	add	r2, sp, #56
	mov	r1, #2
	mov	fp, r3
	add	r0, r0, #8
	bl	kobject_uevent_env
.L5807:
	ldr	r3, [r5, #3764]
	str	r3, [r5, #3768]
.L5806:
	ldr	r2, .L5849
	movw	r0, #:lower16:.LC541
	movt	r0, #:upper16:.LC541
	ldr	r3, [fp]
	mov	r1, r2
	bl	printk
.L5787:
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5788:
	ldr	r2, [r5, #12]
	ldrb	r10, [r4, #-128]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L5789
	movw	r5, #:lower16:.LANCHOR1
	mov	r7, #2
	strb	r10, [r4, #-127]
	movt	r5, #:upper16:.LANCHOR1
	mov	r1, r0
	strb	r3, [r4, #-125]
	mov	r0, r6
	str	r7, [r5, #3764]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #3768]
	cmp	r3, r7
	beq	.L5848
	ldr	r3, [r5, #3764]
	sub	r3, r3, #3
	cmp	r3, #1
	addls	fp, sp, #32
	bls	.L5806
	ldr	r0, [r4, #-164]
	add	r2, sp, #32
	mov	r1, r7
	mov	fp, r2
	add	r0, r0, #8
	bl	kobject_uevent_env
	b	.L5807
.L5808:
	ldr	r3, [r5, #3764]
	sub	r3, r3, #3
	cmp	r3, #1
	bls	.L5806
	ldr	r0, [r4, #-164]
	mov	r2, fp
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env
	b	.L5807
.L5847:
	movw	r5, #:lower16:.LANCHOR1
	mov	r3, #4
	movt	r5, #:upper16:.LANCHOR1
	add	fp, sp, #48
	str	r3, [r5, #3764]
	b	.L5811
.L5846:
	ldrb	r10, [r4, #-128]	@ zero_extendqisi2
.L5789:
	ldrb	r3, [r4, #-127]	@ zero_extendqisi2
	cmp	r3, r10
	beq	.L5795
	cmp	r10, #0
	bne	.L5796
	movw	r5, #:lower16:.LANCHOR1
	add	fp, sp, #16
	movt	r5, #:upper16:.LANCHOR1
	add	r3, sp, #24
	str	r10, [r5, #3764]
.L5813:
	mov	r1, r9
	mov	r0, r6
	strb	r10, [r4, #-127]
	strb	r7, [r4, #-125]
	str	r3, [sp, #12]
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [r4, #-132]
	ldr	r3, [sp, #12]
	cmp	r2, #0
	movne	r8, #0
	bne	.L5799
	b	.L5798
.L5796:
	movw	r5, #:lower16:.LANCHOR1
	mov	r8, #1
	movt	r5, #:upper16:.LANCHOR1
	movw	r1, #:lower16:.LC538
	movt	r1, #:upper16:.LC538
	mov	r2, #3
	sub	r0, r4, #124
	str	r8, [r5, #3764]
	bl	strncmp
	cmp	r0, #0
	addeq	r3, sp, #24
	moveq	fp, r3
	beq	.L5813
	mov	r1, r9
	mov	r0, r6
	strb	r8, [r4, #-127]
	strb	r7, [r4, #-125]
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [r4, #-132]
	cmp	r2, #0
	beq	.L5845
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldr	r3, [r6, #1104]
	cmp	r3, #1
	addne	r3, sp, #24
	movne	fp, r3
	bne	.L5817
.L5845:
	add	r3, sp, #24
	b	.L5800
.L5848:
	add	fp, sp, #32
.L5793:
	ldr	r2, .L5849
	movw	r0, #:lower16:.LC540
	movt	r0, #:upper16:.LC540
	mov	r1, r2
	bl	printk
	ldr	r0, [r4, #-164]
	add	r2, sp, #16
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env
	ldr	r3, [r5, #3764]
	sub	r3, r3, #3
	cmp	r3, #1
	bls	.L5806
	ldr	r0, [r4, #-164]
	add	r3, sp, #24
	mov	r2, fp
	mov	r1, #2
	str	r3, [sp, #12]
	add	r0, r0, #8
	bl	kobject_uevent_env
	ldr	r3, [sp, #12]
	cmp	fp, r3
	beq	.L5814
	b	.L5807
.L5795:
	mov	r1, r9
	mov	r0, r6
	strb	r10, [r4, #-127]
	strb	r7, [r4, #-125]
	bl	_raw_spin_unlock_irqrestore
	ldrb	r1, [r4, #-127]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC539
	ldr	r2, .L5849
	movt	r0, #:upper16:.LC539
	ldr	ip, [r5, #12]
	ldrb	r3, [r4, #-128]	@ zero_extendqisi2
	stm	sp, {r1, ip}
	mov	r1, r2
	bl	printk
	b	.L5787
.L5850:
	.align	2
.L5849:
	.word	.LANCHOR3+3960
	.fnend
	.size	android_work, .-android_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_send_hid_event, %function
acc_complete_send_hid_event:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, [r1, #32]
	ldr	ip, [r1, #44]
	ldr	r3, [r1, #48]
	cmp	ip, #0
	bne	.L5855
	mov	r2, r1
	.save {lr}
	str	lr, [sp, #-4]!
	mov	lr, #1
	.pad #12
	sub	sp, sp, #12
	ldr	r2, [r2]
	mov	r1, ip
	ldr	r0, [r0, #8]
	str	lr, [sp]
	bl	hid_report_raw_event
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L5855:
	movw	r0, #:lower16:.LC542
	mov	r1, ip
	movt	r0, #:upper16:.LC542
	b	printk
	.fnend
	.size	acc_complete_send_hid_event, .-acc_complete_send_hid_event
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_work, %function
acc_hid_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r7, [r3, #2488]
	.pad #28
	sub	sp, sp, #28
	add	r8, sp, #8
	str	r8, [sp, #8]
	add	r6, r7, #88
	str	r8, [sp, #12]
	add	r9, r7, #1760
	mov	r0, r6
	add	r9, r9, #12
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r7, #1772]
	mov	r10, r0
	cmp	r5, r9
	ldr	r4, [r5]
	bne	.L5857
	b	.L5858
.L5859:
	cmp	r9, r4
	ldr	r3, [r4]
	beq	.L5858
.L5860:
	mov	r5, r4
	mov	r4, r3
.L5857:
	ldr	r3, [r5, #24]
	ldr	r2, [r5, #28]
	cmp	r2, r3
	bne	.L5859
	mov	r0, r5
	bl	__list_del_entry
	mov	r0, r5
	mov	r1, r8
	ldr	r2, [sp, #8]
	bl	__list_add
	cmp	r9, r4
	ldr	r3, [r4]
	bne	.L5860
.L5858:
	ldr	r2, [r7, #1780]
	add	r3, r7, #1776
	add	r3, r3, #4
	cmp	r3, r2
	addeq	r9, sp, #16
	streq	r9, [sp, #16]
	streq	r9, [sp, #20]
	beq	.L5862
	ldr	r1, [r7, #1784]
	add	r9, sp, #16
	str	r2, [sp, #16]
	str	r1, [sp, #20]
	str	r9, [r2, #4]
	ldr	r2, [sp, #20]
	str	r9, [r2]
	str	r3, [r7, #1780]
	str	r3, [r7, #1784]
.L5862:
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r5, [sp, #8]
	cmp	r5, r8
	ldr	r4, [r5]
	beq	.L5863
	movw	r3, #:lower16:.LC544
	add	r10, r7, #1760
	movt	r3, #:upper16:.LC544
	add	r10, r10, #4
	str	r3, [sp, #4]
	b	.L5869
.L5878:
	cmp	r0, #0
	bne	.L5865
.L5866:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	mov	r0, r5
	bl	__list_del_entry
	mov	r0, r5
	mov	r1, r10
	ldr	r2, [r7, #1764]
	bl	__list_add
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L5868:
	cmp	r4, r8
	mov	r5, r4
	ldr	r4, [r4]
	beq	.L5863
.L5869:
	bl	hid_allocate_device
	cmn	r0, #4096
	movw	r2, #:lower16:.LANCHOR0
	ldr	ip, .L5879
	mov	fp, r0
	movt	r2, #:upper16:.LANCHOR0
	mvn	r1, #0
	mov	lr, #3
	bhi	.L5878
	ldr	r2, [r2, #692]
	strh	lr, [r0, #32]	@ movhi
	str	r1, [r0, #36]
	str	r1, [r0, #40]
	str	r2, [r0, #3200]
	str	ip, [r0, #3548]
	str	r5, [r0, #3848]
	bl	hid_add_device
	subs	r1, r0, #0
	streq	fp, [r5, #8]
	beq	.L5866
	movw	r0, #:lower16:.LC543
	movt	r0, #:upper16:.LC543
	bl	printk
	mov	r0, fp
	bl	hid_destroy_device
.L5865:
	mov	r1, r5
	ldr	r0, [sp, #4]
	bl	printk
	ldr	r0, [r5, #20]
	bl	kfree
	mov	r0, r5
	bl	kfree
	b	.L5868
.L5863:
	ldr	r4, [sp, #16]
	cmp	r4, r9
	ldr	r5, [r4]
	bne	.L5870
	b	.L5856
.L5873:
	mov	r4, r5
	mov	r5, r3
.L5870:
	mov	r0, r4
	bl	list_del
	ldr	r3, [r4, #8]
	subs	r0, r3, #0
	beq	.L5872
	bl	hid_destroy_device
.L5872:
	ldr	r0, [r4, #20]
	bl	kfree
	mov	r0, r4
	bl	kfree
	cmp	r5, r9
	ldr	r3, [r5]
	bne	.L5873
.L5856:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5880:
	.align	2
.L5879:
	.word	.LANCHOR0+1108
	.fnend
	.size	acc_hid_work, .-acc_hid_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_parse, %function
acc_hid_parse:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #3848]
	ldr	r1, [r3, #20]
	ldr	r2, [r3, #24]
	bl	hid_parse_report
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
	.fnend
	.size	acc_hid_parse, .-acc_hid_parse
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_show_file, %function
fsg_show_file:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	mov	r6, r0
	bl	down_read
	ldr	r0, [r4, #-48]
	cmp	r0, #0
	moveq	r4, r0
	strbeq	r0, [r5]
	beq	.L5886
	add	r0, r0, #8
	movw	r2, #4095
	mov	r1, r5
	bl	d_path
	cmn	r0, #4096
	mov	r4, r0
	bls	.L5888
.L5886:
	mov	r0, r6
	bl	up_read
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5888:
	bl	strlen
	mov	r7, r0
	mov	r2, r0
	mov	r1, r4
	mov	r0, r5
	bl	memmove
	add	r4, r7, #1
	mov	r2, #10
	mov	r3, #0
	strb	r2, [r5, r7]
	strb	r3, [r5, r4]
	b	.L5886
	.fnend
	.size	fsg_show_file, .-fsg_show_file
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_store_ro, %function
fsg_store_ro:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r2
	strd	r6, [sp, #8]
	mov	r7, r3
	mov	r6, r0
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	mov	r5, r0
	add	r2, sp, #4
	mov	r0, r4
	mov	r1, #2
	bl	kstrtouint
	subs	r4, r0, #0
	beq	.L5899
.L5889:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L5899:
	mov	r0, r5
	bl	down_read
	ldr	r3, [r6, #-48]
	cmp	r3, #0
	beq	.L5891
	ldr	r0, .L5902
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	mvneq	r4, #15
	bne	.L5900
.L5892:
	mov	r0, r5
	bl	up_read
	b	.L5889
.L5891:
	ldr	r3, [sp, #4]
	ldrb	r2, [r6, #-24]	@ zero_extendqisi2
	ldr	r0, .L5902+4
	and	r3, r3, #1
	uxtb	r1, r3
	bfi	r2, r1, #1, #1
	bfi	r2, r1, #0, #1
	strb	r2, [r6, #-24]
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L5901
.L5893:
	mov	r4, r7
	b	.L5892
.L5900:
	movw	r2, #:lower16:.LC545
	mov	r1, r6
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC545
	bl	__dynamic_dev_dbg
	mvn	r4, #15
	b	.L5892
.L5901:
	movw	r2, #:lower16:.LC546
	mov	r1, r6
	movt	r2, #:upper16:.LC546
	sub	r0, r0, #24
	bl	__dynamic_dev_dbg
	b	.L5893
.L5903:
	.align	2
.L5902:
	.word	.LANCHOR4-2944
	.word	.LANCHOR4-2928
	.fnend
	.size	fsg_store_ro, .-fsg_store_ro
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_store_cdrom, %function
fsg_store_cdrom:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r2
	strd	r6, [sp, #8]
	mov	r7, r3
	mov	r6, r0
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	mov	r5, r0
	add	r2, sp, #4
	mov	r0, r4
	mov	r1, #2
	bl	kstrtouint
	subs	r4, r0, #0
	beq	.L5914
.L5904:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L5914:
	mov	r0, r5
	bl	down_read
	ldr	r3, [r6, #-48]
	cmp	r3, #0
	beq	.L5906
	ldr	r0, .L5917
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	mvneq	r4, #15
	bne	.L5915
.L5907:
	mov	r0, r5
	bl	up_read
	b	.L5904
.L5906:
	ldrb	r2, [r6, #-24]	@ zero_extendqisi2
	ldr	r3, [sp, #4]
	ldr	r0, .L5917+4
	bfi	r2, r3, #3, #1
	strb	r2, [r6, #-24]
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L5916
.L5908:
	mov	r4, r7
	b	.L5907
.L5915:
	movw	r2, #:lower16:.LC547
	mov	r1, r6
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC547
	bl	__dynamic_dev_dbg
	mvn	r4, #15
	b	.L5907
.L5916:
	movw	r2, #:lower16:.LC548
	and	r3, r3, #1
	mov	r1, r6
	movt	r2, #:upper16:.LC548
	sub	r0, r0, #24
	bl	__dynamic_dev_dbg
	b	.L5908
.L5918:
	.align	2
.L5917:
	.word	.LANCHOR4-2896
	.word	.LANCHOR4-2880
	.fnend
	.size	fsg_store_cdrom, .-fsg_store_cdrom
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_store_nofua, %function
fsg_store_nofua:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r1, #2
	mov	r4, r0
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r2
	add	r2, sp, #4
	mov	r5, r3
	bl	kstrtouint
	cmp	r0, #0
	bne	.L5919
	ldr	r3, [sp, #4]
	cmp	r3, #0
	beq	.L5923
.L5921:
	ldrb	r2, [r4, #-24]	@ zero_extendqisi2
	mov	r0, r5
	bfi	r2, r3, #7, #1
	strb	r2, [r4, #-24]
.L5919:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L5923:
	ldrb	r2, [r4, #-24]	@ zero_extendqisi2
	tst	r2, #128
	beq	.L5921
	ldr	r0, [r4, #-48]
	ubfx	r2, r2, #1, #1
	cmp	r0, #0
	moveq	r2, #1
	cmp	r2, #0
	bne	.L5921
	mov	r1, #1
	bl	vfs_fsync
	ldr	r3, [sp, #4]
	b	.L5921
	.fnend
	.size	fsg_store_nofua, .-fsg_store_nofua
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bulk_out_complete, %function
bulk_out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	lr, [sp, #16]
	.pad #20
	sub	sp, sp, #20
	ldr	r4, [r0]
	ldr	r3, [r1, #44]
	ldr	r6, [r1, #32]
	cmp	r3, #0
	bne	.L5925
	ldr	ip, [r6, #12]
	ldr	r0, [r1, #48]
	cmp	r0, ip
	beq	.L5927
	ldr	r2, .L5943
	ldrh	r2, [r2, #-14]
	tst	r2, #4
	bne	.L5931
.L5927:
	.syntax divided
@ 689 "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r2, #0
	mov	r3, #1
	str	r3, [r6, #4]
	str	r2, [r6, #28]
	.syntax divided
@ 607 "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r4, #168]
	str	r3, [r4, #148]
	cmp	r0, r2
	beq	.L5930
	bl	wake_up_process
.L5930:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock
.L5925:
	ldr	r2, .L5943
	ldrh	r2, [r2, #-14]
	tst	r2, #4
	bne	.L5942
.L5928:
	cmn	r3, #104
	bne	.L5927
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5927
	mov	r0, r7
	blx	r3
	b	.L5927
.L5942:
	ldr	ip, [r6, #12]
	ldr	r0, [r1, #48]
.L5931:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC549
	str	r3, [sp]
	movt	r2, #:upper16:.LC549
	ldr	r3, .L5943+4
	stmib	sp, {r0, ip}
	ldr	r0, .L5943+8
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r5, #44]
	b	.L5928
.L5944:
	.align	2
.L5943:
	.word	.LANCHOR4-2848
	.word	.LANCHOR3+3976
	.word	.LANCHOR4-2880
	.fnend
	.size	bulk_out_complete, .-bulk_out_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bulk_in_complete, %function
bulk_in_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	lr, [sp, #16]
	.pad #20
	sub	sp, sp, #20
	ldr	r5, [r0]
	ldr	r3, [r1, #44]
	ldr	r6, [r1, #32]
	cmp	r3, #0
	bne	.L5946
	ldr	ip, [r1, #4]
	ldr	r0, [r1, #48]
	cmp	r0, ip
	beq	.L5948
	ldr	r2, .L5964
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	bne	.L5952
.L5948:
	.syntax divided
@ 668 "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	add	r4, r5, #44
	mov	r0, r4
	bl	_raw_spin_lock
	mov	r3, #0
	str	r3, [r6, #4]
	str	r3, [r6, #20]
	.syntax divided
@ 607 "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [r5, #168]
	mov	r3, #1
	str	r3, [r5, #148]
	cmp	r0, #0
	beq	.L5951
	bl	wake_up_process
.L5951:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock
.L5946:
	ldr	r2, .L5964
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	bne	.L5963
.L5949:
	cmn	r3, #104
	bne	.L5948
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5948
	mov	r0, r7
	blx	r3
	b	.L5948
.L5963:
	ldr	ip, [r1, #4]
	ldr	r0, [r1, #48]
.L5952:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC549
	str	r3, [sp]
	movt	r2, #:upper16:.LC549
	ldr	r3, .L5964+4
	stmib	sp, {r0, ip}
	ldr	r0, .L5964+8
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #44]
	b	.L5949
.L5965:
	.align	2
.L5964:
	.word	.LANCHOR4-2832
	.word	.LANCHOR3+3996
	.word	.LANCHOR4-2856
	.fnend
	.size	bulk_in_complete, .-bulk_in_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	sleep_thread, %function
sleep_thread:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, #57344
	strd	r6, [sp, #8]
	movw	r7, #:lower16:system_freezing_cnt
	movt	r5, 65535
	add	r6, r0, #44
	movt	r7, #:upper16:system_freezing_cnt
	strd	r8, [sp, #16]
	mov	r8, r0
	mov	r9, #1
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	b	.L5971
.L5967:
	str	r9, [r0]
	.syntax divided
@ 819 "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	mov	r0, r6
	and	r3, r3, r5
	ldr	r2, [r3, #12]
	ldr	r3, [r2, #4]
	ldr	r3, [r3]
	ands	r4, r3, #1
	bne	.L5972
	bl	_raw_spin_lock_irq
	ldr	r3, [r8, #148]
	mov	r0, r6
	cmp	r3, #0
	bne	.L5978
	bl	_raw_spin_unlock_irq
	bl	schedule
.L5971:
	ldr	r3, [r7]
	mov	r2, sp
	and	r2, r2, r5
	ldr	r0, [r2, #12]
	cmp	r3, #0
	beq	.L5967
	bl	freezing_slow_path
	cmp	r0, #0
	mov	r3, sp
	and	r3, r3, r5
	bne	.L5968
.L5977:
	ldr	r0, [r3, #12]
	b	.L5967
.L5972:
	mvn	r4, #3
.L5969:
	mov	r5, #0
	mov	r0, r6
	str	r5, [r2]
	bl	_raw_spin_lock_irq
	mov	r0, r6
	str	r5, [r8, #148]
	bl	_raw_spin_unlock_irq
	.syntax divided
@ 836 "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L5978:
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	and	r5, r5, r3
	ldr	r2, [r5, #12]
	b	.L5969
.L5968:
	mov	r0, #0
	bl	__refrigerator
	mov	r3, sp
	and	r3, r3, r5
	b	.L5977
	.fnend
	.size	sleep_thread, .-sleep_thread
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	receive_file_work, %function
receive_file_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #-116]
	.pad #68
	sub	sp, sp, #68
	str	r3, [sp, #24]
	.syntax divided
@ 858 "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r10, [r0, #16]
	ldrd	r6, [r0, #32]
	ldrd	r2, [r0, #24]
	cmp	r6, #0
	sbcs	r1, r7, #0
	strd	r2, [sp, #32]
	mvnlt	r3, #21
	strlt	r3, [r0, #52]
	blt	.L5979
	ldr	r4, .L6046
	mov	r8, r0
	ldrh	r3, [r4, #-14]
	tst	r3, #4
	bne	.L6035
.L5982:
	ldr	r3, [r8, #-104]
	ldrh	ip, [r3, #20]
	mov	r3, #0
	uxth	r2, ip
	strd	r2, [sp, #16]
	subs	r2, r2, #1
	ldr	r3, [sp, #20]
	and	r0, r2, r6
	sbc	r3, r3, #0
	and	r1, r3, r7
	orrs	r3, r0, r1
	bne	.L6036
.L5983:
	ldr	r3, .L6046+4
	mov	r2, sp
	mov	r9, #0
	bic	r2, r2, #8128
	mov	r5, r9
	bic	r2, r2, #63
	sub	r3, r3, #8
	str	r3, [sp, #16]
	str	r2, [sp, #28]
	b	.L5984
.L6043:
	add	r3, r9, #42
	movw	r2, #:lower16:.LANCHOR0
	add	r3, r8, r3, lsl #2
	movt	r2, #:upper16:.LANCHOR0
	ldr	r1, [r2, #620]
	mov	ip, #0
	ldr	r4, [r3, #-200]
	mov	r2, #208
	eor	r9, r9, #1
	str	r1, [r4, #4]
	ldr	r0, [r8, #-104]
	mov	r1, r4
	str	ip, [r8, #-24]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L6034
	cmp	r5, #0
	beq	.L5989
.L5985:
	ldr	r0, .L6046+8
	ldr	r3, [r5, #48]
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L6037
.L5990:
	mov	r2, r3
	mov	r0, r10
	ldr	r1, [r5]
	add	r3, sp, #32
	bl	vfs_write
	ldr	r3, .L6046+12
	mov	fp, r0
	ldrh	r3, [r3]
	tst	r3, #4
	bne	.L6038
.L5991:
	ldr	r3, [r5, #48]
	cmp	r3, fp
	bne	.L6034
.L5989:
	cmp	r4, #0
	beq	.L5993
	ldr	r3, [r8, #-96]
	ldr	r2, [r8, #-24]
	cmp	r2, #0
	bne	.L5994
	cmp	r3, #2
	beq	.L6039
.L5994:
	cmp	r3, #0
	cmpne	r3, #3
	moveq	ip, #1
	movne	ip, #0
	beq	.L6040
	ldr	r2, [r4, #4]
	mov	r1, #0
	ldr	r3, [r4, #48]
	cmp	r6, r2
	sbcs	r1, r7, r1
	bge	.L5999
	cmp	r6, r3
	mov	r0, r3
	sbcs	r3, r7, ip
	movlt	r0, r6
	mov	r3, r0
	str	r0, [r4, #48]
.L6001:
	subs	r6, r6, r3
	sbc	r7, r7, #0
.L6002:
	cmp	r2, r3
	bls	.L5993
	ldr	r3, .L6046+16
	ldrh	r3, [r3]
	tst	r3, #4
	moveq	r6, #0
	moveq	r7, #0
	bne	.L6041
.L5993:
	mov	r5, r4
.L5984:
	cmp	r6, #1
	sbcs	r3, r7, #0
	movge	r3, #1
	movlt	r3, #0
	cmp	r5, #0
	movne	r3, #1
	cmp	r3, #0
	beq	.L6042
	cmp	r6, #1
	sbcs	r3, r7, #0
	bge	.L6043
	mov	r4, #0
	b	.L5985
.L5999:
	mov	r1, #0
	mvn	r0, #0
	cmp	r7, r1
	cmpeq	r6, r0
	beq	.L6002
	b	.L6001
.L6034:
	ldr	r3, [r8, #-96]
	cmp	r3, #0
	movne	r3, #4
	mvneq	r5, #4
	mvnne	r5, #4
	strne	r3, [r8, #-96]
.L5988:
	ldr	r0, .L6046+20
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L6044
.L6004:
	str	r5, [r8, #52]
	.syntax divided
@ 946 "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
.L5979:
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6038:
	movw	r2, #:lower16:.LC552
	ldr	r0, [sp, #16]
	ldr	r3, [sp, #24]
	movt	r2, #:upper16:.LC552
	ldr	r1, [r3]
	mov	r3, fp
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L5991
.L6037:
	ldr	r2, [sp, #24]
	sub	r0, r0, #18
	ldr	r1, [r2]
	movw	r2, #:lower16:.LC324
	str	r3, [sp]
	movt	r2, #:upper16:.LC324
	mov	r3, r5
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r5, #48]
	b	.L5990
.L6036:
	ldr	r3, .L6046+24
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	beq	.L5983
	ldr	r3, [sp, #24]
	movw	r2, #:lower16:.LC551
	sub	r0, r4, #8
	movt	r2, #:upper16:.LC551
	ldr	r1, [r3]
	strd	r6, [sp]
	ldr	r3, .L6046+28
	str	ip, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L5983
.L6039:
	ldr	fp, [sp, #28]
	movw	r3, #:lower16:autoremove_wake_function
	add	r1, sp, #56
	movt	r3, #:upper16:autoremove_wake_function
	sub	r5, r8, #68
	str	r3, [sp, #52]
	ldr	r0, [fp, #12]
	str	r2, [sp, #44]
	str	r0, [sp, #48]
	str	r1, [sp, #56]
	str	r1, [sp, #60]
.L5996:
	mov	r2, #1
	add	r1, sp, #44
	mov	r0, r5
	bl	prepare_to_wait
	ldr	r3, [r8, #-24]
	cmp	r3, #0
	bne	.L5995
	ldr	r3, [r8, #-96]
	cmp	r3, #2
	bne	.L5995
	ldr	r3, [fp, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L6045
.L5995:
	add	r1, sp, #44
	mov	r0, r5
	bl	finish_wait
	ldr	r3, [r8, #-96]
	b	.L5994
.L6041:
	ldr	r3, [sp, #24]
	movw	r2, #:lower16:.LC553
	mov	r6, #0
	movt	r2, #:upper16:.LC553
	ldr	r0, .L6046+32
	mov	r7, #0
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L5993
.L6042:
	mov	r5, r3
	b	.L5988
.L6040:
	ldr	r2, [r8, #-24]
	cmp	r3, #0
	mvneq	r5, #4
	mvnne	r5, #124
	cmp	r2, #0
	bne	.L5988
	ldr	r0, [r8, #-104]
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L5988
.L6045:
	bl	schedule
	b	.L5996
.L6035:
	ldr	r3, [sp, #24]
	movw	r2, #:lower16:.LC550
	sub	r0, r4, #32
	movt	r2, #:upper16:.LC550
	ldr	r1, [r3]
	strd	r6, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L5982
.L6044:
	ldr	r3, [sp, #24]
	movw	r2, #:lower16:.LC554
	sub	r0, r0, #24
	movt	r2, #:upper16:.LC554
	ldr	r1, [r3]
	mov	r3, r5
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L6004
.L6047:
	.align	2
.L6046:
	.word	.LANCHOR4-2800
	.word	.LANCHOR4-2752
	.word	.LANCHOR4-2766
	.word	.LANCHOR4-2742
	.word	.LANCHOR4-2718
	.word	.LANCHOR4-2688
	.word	.LANCHOR4-2784
	.word	.LANCHOR3+4016
	.word	.LANCHOR4-2736
	.fnend
	.size	receive_file_work, .-receive_file_work
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_cleanup, %function
ffs_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC555
	movt	r0, #:upper16:.LC555
	bl	printk
	ldr	r0, .L6050
	bl	unregister_filesystem
	ldr	r0, [r4, #4]
	pop	{r4, lr}
	b	kfree
.L6051:
	.align	2
.L6050:
	.word	.LANCHOR0+1136
	.fnend
	.size	ffs_function_cleanup, .-ffs_function_cleanup
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	__ffs_ep0_queue_wait, %function
__ffs_ep0_queue_wait:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	add	r0, r0, #116
	strd	r6, [sp, #8]
	mov	r6, r2
	mov	r7, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r0, #-2]
	ldr	r5, [r0, #-88]
	cmp	r3, r2
	ldrb	r2, [r5, #26]	@ zero_extendqisi2
	movls	r3, #0
	movhi	r3, #1
	bfi	r2, r3, #1, #1
	strb	r2, [r5, #26]
	bl	_raw_spin_unlock_irq
	cmp	r7, #0
	str	r7, [r5]
	str	r6, [r5, #4]
	beq	.L6057
.L6053:
	ldr	r3, [r4]
	mov	r0, #0
	mov	r2, #32
	mov	r1, r5
	str	r0, [r4, #32]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L6052
	add	r0, r4, #32
	bl	wait_for_completion_interruptible
	subs	r3, r0, #0
	bne	.L6058
	ldr	r0, [r4, #48]
	str	r3, [r4, #96]
.L6052:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6057:
	movw	r3, #47806
	movt	r3, 57005
	str	r3, [r5]
	b	.L6053
.L6058:
	ldr	r3, [r4]
	mov	r1, r5
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	mvn	r0, #3
	b	.L6052
	.fnend
	.size	__ffs_ep0_queue_wait, .-__ffs_ep0_queue_wait
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_complete, %function
ffs_ep0_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r1, #32]
	add	r0, r0, #32
	b	complete_all
	.fnend
	.size	ffs_ep0_complete, .-ffs_ep0_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_init, %function
ffs_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	str	lr, [sp, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4, #4]
	beq	.L6062
	mov	r2, #12
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	beq	.L6065
.L6062:
	ldr	r0, .L6067
	bl	register_filesystem
	subs	r4, r0, #0
	bne	.L6064
	movw	r0, #:lower16:.LC556
	movt	r0, #:upper16:.LC556
	bl	printk
	b	.L6060
.L6065:
	mvn	r4, #11
.L6060:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6064:
	movw	r0, #:lower16:.LC557
	mov	r1, r4
	movt	r0, #:upper16:.LC557
	bl	printk
	b	.L6060
.L6068:
	.align	2
.L6067:
	.word	.LANCHOR0+1136
	.fnend
	.size	ffs_function_init, .-ffs_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_hw_free, %function
audio_pcm_hw_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r4, r0
	str	lr, [sp, #8]
	ldr	r2, [r0, #180]
	.pad #12
	sub	sp, sp, #12
	cmp	r2, #0
	beq	.L6070
	ldr	r0, [r0]
	ldr	r3, [r4, #184]
	ldr	r1, [r4, #188]
	ldr	r0, [r0]
	ldr	r0, [r0, #496]
	cmp	r0, #0
	beq	.L6071
	ldr	ip, [r0, #276]
	cmp	ip, #0
	beq	.L6071
.L6072:
	mov	lr, #0
	str	lr, [sp]
	ldr	r5, [ip, #4]
	blx	r5
.L6070:
	mov	r3, #0
	mov	r0, r3
	str	r3, [r4, #180]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L6071:
	movw	ip, #:lower16:arm_dma_ops
	movt	ip, #:upper16:arm_dma_ops
	cmp	ip, #0
	bne	.L6072
	.syntax divided
@ 206 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/dma-mapping.h" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/dma-mapping.h"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 206, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
	.fnend
	.size	audio_pcm_hw_free, .-audio_pcm_hw_free
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	__ffs_data_do_entity, %function
__ffs_data_do_entity:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #2
	beq	.L6082
	cmp	r0, #3
	beq	.L6083
	cmp	r0, #1
	beq	.L6085
	mov	r0, #0
	bx	lr
.L6082:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #176]
	cmp	r1, r2
	strhcc	r2, [r3, #176]	@ movhi
	bx	lr
.L6085:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #178]
	cmp	r1, r2
	addls	r2, r2, #1
	strhls	r2, [r3, #178]	@ movhi
	bx	lr
.L6083:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #180]
	and	r2, r2, #15
	cmp	r2, r1
	strhgt	r2, [r3, #180]	@ movhi
	bx	lr
	.fnend
	.size	__ffs_data_do_entity, .-__ffs_data_do_entity
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_probe, %function
acc_hid_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	hid_open_report
	subs	r4, r0, #0
	bne	.L6086
	ldr	r3, [r5, #3548]
	mov	r0, r5
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	beq	.L6092
.L6086:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6092:
	mov	r1, #45
	mov	r0, r5
	bl	hid_connect
	subs	r4, r0, #0
	beq	.L6086
	ldr	r3, [r5, #3548]
	mov	r0, r5
	ldr	r3, [r3, #4]
	blx	r3
	b	.L6086
	.fnend
	.size	acc_hid_probe, .-acc_hid_probe
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_free_ctrl_pkt.part.4, %function
mbim_free_ctrl_pkt.part.4:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	mov	r4, r0
	ldr	r0, [r0]
	bl	kfree
	mov	r0, r4
	pop	{r4, lr}
	b	kfree
	.fnend
	.size	mbim_free_ctrl_pkt.part.4, .-mbim_free_ctrl_pkt.part.4
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_clear_queues, %function
mbim_clear_queues:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	add	r7, r0, #204
	mov	r6, r0
	mov	r4, r0
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r6, #208]!
	ldr	r5, [r3]
.L6096:
	cmp	r3, r6
	sub	r8, r3, #8
	mov	r0, r3
	beq	.L6109
	bl	list_del
	cmp	r8, #0
	mov	r0, r8
	beq	.L6097
	bl	mbim_free_ctrl_pkt.part.4
.L6097:
	mov	r3, r5
	ldr	r5, [r5]
	b	.L6096
.L6109:
	ldr	r3, [r4, #216]!
	ldr	r5, [r3]
.L6099:
	cmp	r3, r4
	sub	r6, r3, #8
	mov	r0, r3
	beq	.L6110
	bl	list_del
	cmp	r6, #0
	mov	r0, r6
	beq	.L6100
	bl	mbim_free_ctrl_pkt.part.4
.L6100:
	mov	r3, r5
	ldr	r5, [r5]
	b	.L6099
.L6110:
	mov	r0, r7
	pop	{r4, r5, r6, r7, r8, lr}
	b	_raw_spin_unlock
	.fnend
	.size	mbim_clear_queues, .-mbim_clear_queues
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_write, %function
mbim_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	ldr	r9, .L6177
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r4, [r0, #124]
	ldrh	r3, [r9, #-14]
	tst	r3, #4
	bne	.L6160
.L6112:
	cmp	r4, #0
	beq	.L6161
	cmp	r5, #0
	beq	.L6162
	cmp	r5, #4096
	bhi	.L6163
	add	r6, r4, #104
	.syntax divided
@ 61 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r6]
	add	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L6117
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L6164
	mov	r1, #208
	mov	r0, r5
	bl	mbim_alloc_ctrl_pkt
	subs	r8, r0, #0
	beq	.L6165
	mov	r3, sp
	ldr	r0, [r8]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L6166
	mov	r1, r5
	bl	__memzero
	mov	r2, r5
.L6122:
	movw	r0, #:lower16:.LC337
	ldr	r1, .L6177+4
	movt	r0, #:upper16:.LC337
	bl	printk
	mov	r0, r8
	bl	mbim_free_ctrl_pkt.part.4
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #0
	b	.L6111
.L6166:
	mov	r2, r5
	mov	r1, r7
	bl	__copy_from_user
	subs	r2, r0, #0
	bne	.L6122
	ldr	r3, .L6177+8
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L6167
.L6124:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L6168
	ldrb	r3, [r4, #164]	@ zero_extendqisi2
	cmp	r3, #3
	bne	.L6169
	add	r7, r4, #204
	ldr	r10, .L6177+12
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	add	r2, r4, #216
	ldr	r1, [r4, #220]
	add	r0, r8, #8
	bl	__list_add
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldrh	r3, [r10, #-14]
	ldr	r9, [r4, #160]
	tst	r3, #4
	bne	.L6170
.L6128:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #88]
	mov	fp, r0
	cmp	r3, #0
	beq	.L6171
	cmp	r9, #0
	beq	.L6172
	ldr	r3, [r9]
	cmp	r3, #0
	beq	.L6173
	add	r8, r4, #168
	.syntax divided
@ 61 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r8]
	add	r2, r2, #1
	strex	r3, r2, [r8]
	teq	r3, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #1
	beq	.L6132
	ldr	r3, .L6177+16
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L6174
.L6133:
	mov	r1, fp
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L6126:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, .L6177+20
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L6175
.L6135:
	mov	r0, r5
.L6111:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6132:
	ldr	r3, [r9]
	mov	ip, #0
	mvn	lr, #94
	mov	r0, #8
	mov	r1, fp
	str	r0, [r9, #4]
	mov	r0, r7
	strb	lr, [r3]
	strb	r2, [r3, #1]
	strb	ip, [r3, #2]
	strb	ip, [r3, #3]
	ldrb	r2, [r4, #196]	@ zero_extendqisi2
	strh	r2, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	ip, [r3, #7]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #156]
	mov	r2, #32
	mov	r1, r9
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bne	.L6176
.L6134:
	ldr	r0, .L6177+24
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L6126
	movw	r1, #:lower16:.LC571
	ldr	r2, .L6177+28
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC571
	bl	__dynamic_pr_debug
	b	.L6126
.L6160:
	movw	r1, #:lower16:.LC339
	mov	r3, r2
	ldr	r2, .L6177+4
	movt	r1, #:upper16:.LC339
	sub	r0, r9, #32
	bl	__dynamic_pr_debug
	b	.L6112
.L6167:
	ldrb	ip, [r4, #136]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC562
	sub	r0, r9, #8
	movt	r1, #:upper16:.LC562
	mov	r3, r4
	ldr	r2, .L6177+32
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L6124
.L6170:
	ldrb	ip, [r4, #136]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC565
	mov	r3, r4
	movt	r1, #:upper16:.LC565
	ldr	r2, .L6177+28
	sub	r0, r10, #32
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L6128
.L6175:
	movw	r1, #:lower16:.LC348
	ldr	r2, .L6177+4
	mov	r3, r5
	movt	r1, #:upper16:.LC348
	sub	r0, r0, #24
	bl	__dynamic_pr_debug
	b	.L6135
.L6174:
	movw	r1, #:lower16:.LC569
	sub	r0, r10, #8
	ldr	r2, .L6177+28
	movt	r1, #:upper16:.LC569
	ldr	r3, [r4, #168]
	bl	__dynamic_pr_debug
	b	.L6133
.L6117:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC560
	ldr	r1, .L6177+4
	movt	r0, #:upper16:.LC560
	bl	printk
	mvn	r0, #15
	b	.L6111
.L6176:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r1, r3, [r8]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC570
	ldr	r1, .L6177+28
	movt	r0, #:upper16:.LC570
	bl	printk
	b	.L6134
.L6162:
	movw	r0, #:lower16:.LC334
	ldr	r1, .L6177+4
	movt	r0, #:upper16:.LC334
	bl	printk
	mvn	r0, #18
	b	.L6111
.L6163:
	movw	r0, #:lower16:.LC559
	mov	r2, r5
	ldr	r1, .L6177+4
	movt	r0, #:upper16:.LC559
	mov	r3, #4096
	bl	printk
	mvn	r0, #11
	b	.L6111
.L6161:
	movw	r0, #:lower16:.LC558
	ldr	r1, .L6177+4
	movt	r0, #:upper16:.LC558
	bl	printk
	mvn	r0, #18
	b	.L6111
.L6168:
	movw	r0, #:lower16:.LC563
	mov	r2, r4
	ldr	r1, .L6177+32
	movt	r0, #:upper16:.LC563
	bl	printk
	mov	r0, r8
	bl	mbim_free_ctrl_pkt.part.4
	b	.L6126
.L6169:
	movw	r0, #:lower16:.LC564
	ldr	r1, .L6177+32
	mov	r2, r4
	movt	r0, #:upper16:.LC564
	bl	printk
	mov	r0, r8
	bl	mbim_free_ctrl_pkt.part.4
	b	.L6126
.L6172:
	movw	r0, #:lower16:.LC567
	mov	r2, r4
	ldr	r1, .L6177+28
	movt	r0, #:upper16:.LC567
	bl	printk
	mov	r1, fp
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L6126
.L6171:
	movw	r0, #:lower16:.LC566
	mov	r2, r4
	ldr	r1, .L6177+28
	movt	r0, #:upper16:.LC566
	bl	printk
	mov	r1, fp
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L6126
.L6165:
	movw	r0, #:lower16:.LC561
	ldr	r1, .L6177+4
	movt	r0, #:upper16:.LC561
	bl	printk
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #11
	b	.L6111
.L6173:
	movw	r0, #:lower16:.LC568
	mov	r2, r4
	ldr	r1, .L6177+28
	movt	r0, #:upper16:.LC568
	bl	printk
	mov	r1, fp
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L6126
.L6164:
	movw	r0, #:lower16:.LC74
	ldr	r1, .L6177+4
	movt	r0, #:upper16:.LC74
	bl	printk
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #31
	b	.L6111
.L6178:
	.align	2
.L6177:
	.word	.LANCHOR4-2656
	.word	.LANCHOR3+4036
	.word	.LANCHOR4-2640
	.word	.LANCHOR4-2608
	.word	.LANCHOR4-2592
	.word	.LANCHOR4-2544
	.word	.LANCHOR4-2560
	.word	.LANCHOR3+4076
	.word	.LANCHOR3+4048
	.fnend
	.size	mbim_write, .-mbim_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_set_alt, %function
f_audio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	ldr	fp, .L6231
	mov	r10, r2
	strd	r8, [sp, #16]
	mov	r8, r0
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r0, #172]
	ldr	r7, [r0, #176]
	ldrh	r3, [fp, #-14]
	tst	r3, #4
	bne	.L6224
.L6180:
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldrb	r3, [r6, #16]	@ zero_extendqisi2
	cmp	r3, r4
	beq	.L6225
	ldrb	r3, [r6, #17]	@ zero_extendqisi2
	cmp	r3, r4
	bne	.L6192
	cmp	r10, #1
	bne	.L6193
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r1, [r5, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r7, r0, #0
	bne	.L6226
	str	r8, [r5]
	ldr	r0, [r6, #1176]
	bl	f_audio_buffer_alloc
	cmn	r0, #4096
	str	r0, [r8, #184]
	bhi	.L6195
	ldr	r3, [r6, #1180]
	cmp	r3, #0
	ble	.L6222
	movw	r9, #:lower16:f_audio_complete
	movt	r9, #:upper16:f_audio_complete
.L6196:
	ldr	r3, [r5, #8]
	mov	r1, #32
	mov	r0, r5
	add	r7, r7, #1
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	movw	r1, #32800
	beq	.L6198
	ldr	r0, [r6, #1184]
	bl	__kmalloc
	mov	r3, r0
	mov	r2, #32
	cmp	r3, #0
	mov	r1, r4
	mov	r0, r5
	str	r3, [r4]
	beq	.L6199
	ldr	r3, [r6, #1184]
	str	r3, [r4, #4]
	str	r9, [r4, #28]
	str	r8, [r4, #32]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bne	.L6227
	ldr	r3, [r6, #1180]
	cmp	r3, r7
	bgt	.L6196
.L6197:
	ldr	r2, .L6231+4
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	bne	.L6228
.L6201:
	strb	r10, [r8, #249]
.L6179:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6225:
	cmp	r10, #1
	bne	.L6182
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r1, [r7, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	bne	.L6229
	str	r8, [r7]
	mov	r1, #32
	mov	r0, r7
	str	r4, [r8, #216]
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L6198
	movw	r1, #32800
	ldr	r0, [r6, #1172]
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	beq	.L6199
	ldr	ip, [r6, #1172]
	movw	r3, #:lower16:f_audio_complete
	mov	r1, r4
	movt	r3, #:upper16:f_audio_complete
	mov	r2, #32
	mov	r0, r7
	str	ip, [r4, #4]
	str	r3, [r4, #28]
	str	r8, [r4, #32]
	str	r4, [r8, #244]
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	beq	.L6187
	movw	r0, #:lower16:.LC576
	mov	r3, r4
	ldr	r1, .L6231+8
	movt	r0, #:upper16:.LC576
	ldr	r2, [r7, #4]
	bl	printk
.L6187:
	add	r0, r8, #220
	bl	schedule_work
.L6188:
	strb	r10, [r8, #248]
	b	.L6179
.L6182:
	add	r9, r8, #212
	add	r6, r8, #236
	mov	r0, r9
	mov	r7, #0
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
.L6190:
	ldr	r4, [r8, #236]
	cmp	r4, r6
	sub	r5, r4, #8
	mov	r0, r4
	beq	.L6230
	bl	list_del
	cmp	r5, #0
	beq	.L6190
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r5
	str	r7, [r4, #-8]
	bl	kfree
	b	.L6190
.L6230:
	mov	r1, fp
	mov	r0, r9
	mov	r4, #0
	bl	_raw_spin_unlock_irqrestore
	b	.L6188
.L6224:
	movw	r1, #:lower16:.LC572
	mov	r3, r4
	ldr	r2, .L6231+8
	movt	r1, #:upper16:.LC572
	sub	r0, fp, #32
	str	r10, [sp]
	bl	__dynamic_pr_debug
	b	.L6180
.L6228:
	movw	r1, #:lower16:.LC579
	ldr	r2, .L6231+8
	sub	r0, fp, #8
	movt	r1, #:upper16:.LC579
	bl	__dynamic_pr_debug
	b	.L6201
.L6222:
	mov	r4, r7
	b	.L6197
.L6229:
	movw	r0, #:lower16:.LC573
	ldr	r1, .L6231+8
	movt	r0, #:upper16:.LC573
	bl	printk
	b	.L6179
.L6198:
	movw	r0, #:lower16:.LC574
	ldr	r1, .L6231+8
	mvn	r4, #11
	movt	r0, #:upper16:.LC574
	bl	printk
	b	.L6179
.L6226:
	movw	r0, #:lower16:.LC577
	ldr	r1, .L6231+8
	mov	r4, r7
	movt	r0, #:upper16:.LC577
	bl	printk
	b	.L6179
.L6195:
	movw	r0, #:lower16:.LC39
	ldr	r1, .L6231+8
	mvn	r4, #11
	movt	r0, #:upper16:.LC39
	bl	printk
	b	.L6179
.L6192:
	movw	r0, #:lower16:.LC582
	mov	r2, r4
	ldr	r1, .L6231+8
	mov	r3, #0
	movt	r0, #:upper16:.LC582
	mov	r4, r3
	bl	printk
	b	.L6179
.L6193:
	ldr	r4, [r8, #184]
	cmp	r4, #0
	beq	.L6202
	movw	r0, #:lower16:.LC580
	ldr	r1, .L6231+8
	movt	r0, #:upper16:.LC580
	bl	printk
	add	r0, r4, #8
	add	r2, r8, #204
	ldr	r1, [r8, #208]
	bl	__list_add
	add	r0, r8, #188
	bl	schedule_work
	mov	r3, #0
	mov	r4, r3
	str	r3, [r8, #184]
	b	.L6201
.L6199:
	movw	r0, #:lower16:.LC575
	ldr	r1, .L6231+8
	mvn	r4, #11
	movt	r0, #:upper16:.LC575
	bl	printk
	b	.L6179
.L6227:
	movw	r0, #:lower16:.LC578
	mov	r3, r4
	ldr	r1, .L6231+8
	movt	r0, #:upper16:.LC578
	ldr	r2, [r5, #4]
	bl	printk
	ldr	r3, [r6, #1180]
	b	.L6197
.L6202:
	movw	r0, #:lower16:.LC581
	ldr	r1, .L6231+8
	movt	r0, #:upper16:.LC581
	bl	printk
	b	.L6201
.L6232:
	.align	2
.L6231:
	.word	.LANCHOR4-2512
	.word	.LANCHOR4-2496
	.word	.LANCHOR5-4076
	.fnend
	.size	f_audio_set_alt, .-f_audio_set_alt
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_request_free.part.6, %function
conn_gadget_request_free.part.6:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	mov	r4, r1
	mov	r5, r0
	ldr	r0, [r0]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	pop	{r4, r5, r6, lr}
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	conn_gadget_request_free.part.6, .-conn_gadget_request_free.part.6
	.set	acc_request_free.part.7,conn_gadget_request_free.part.6
	.set	ccid_request_free.part.9,conn_gadget_request_free.part.6
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ep_matches.part.11, %function
ep_matches.part.11:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	ip, [r2, #3]	@ zero_extendqisi2
	ands	r4, ip, #3
	beq	.L6238
	ldr	r8, [r1, #4]
	ldrb	ip, [r8]	@ zero_extendqisi2
	cmp	ip, #101
	beq	.L6282
.L6238:
	mov	r0, #0
.L6235:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L6282:
	mov	r7, r3
	ldrb	r3, [r8, #2]	@ zero_extendqisi2
	mov	r6, r1
	mov	r9, r0
	mov	r5, r2
	cmp	r3, #45
	beq	.L6239
	mov	r1, #45
	mov	r0, r8
	bl	strrchr
	subs	r10, r0, #0
	beq	.L6240
	cmp	r4, #2
	beq	.L6241
	cmp	r4, #3
	ldrb	r3, [r10, #2]	@ zero_extendqisi2
	bne	.L6242
	cmp	r3, #115
	beq	.L6238
	movw	r0, #:lower16:.LC506
	ldr	r1, [r9, #28]
	movt	r0, #:upper16:.LC506
	bl	strcmp
	cmp	r0, #0
	bne	.L6243
	ldrb	r3, [r10, #1]	@ zero_extendqisi2
	cmp	r3, #105
	beq	.L6238
.L6243:
	ldrb	r2, [r10, #-1]	@ zero_extendqisi2
	movw	r3, #:lower16:_ctype
	movt	r3, #:upper16:_ctype
	ldrb	r3, [r3, r2]	@ zero_extendqisi2
	tst	r3, #4
	beq	.L6255
	ldrh	r3, [r5, #4]	@ unaligned
	cmp	r3, #0
	beq	.L6260
	ubfx	r2, r3, #0, #11
	mov	r8, #0
	b	.L6257
.L6240:
	mov	r0, r8
	bl	strlen
	add	r10, r8, r0
.L6244:
	ldrb	r2, [r10, #-1]	@ zero_extendqisi2
	movw	r3, #:lower16:_ctype
	movt	r3, #:upper16:_ctype
	ldrb	r3, [r3, r2]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L6239
.L6255:
	ldrsb	r3, [r5, #2]
	cmp	r3, #0
	blt	.L6283
	cmp	r2, #116
	bne	.L6238
.L6239:
	sub	r8, r4, #2
	cmp	r7, #0
	clz	r8, r8
	moveq	r3, #0
	lsr	r8, r8, #5
	movne	r3, r8
	cmp	r3, #0
	bne	.L6284
	ldrh	r3, [r5, #4]	@ unaligned
	cmp	r3, #0
	bne	.L6248
.L6254:
	ldrh	r3, [r6, #20]
	strh	r3, [r5, #4]	@ unaligned
.L6248:
	cmp	r4, #1
	ubfx	r2, r3, #0, #11
	beq	.L6249
	cmp	r4, #3
	bne	.L6250
.L6257:
	ldr	r0, [r9, #20]
	cmp	r0, #2
	movls	r1, #1
	movhi	r1, #0
	cmp	r2, #64
	movls	r1, #0
	cmp	r1, #0
	bne	.L6238
.L6249:
	ldrh	r1, [r6, #20]
	cmp	r1, r2
	bcc	.L6238
	ldr	r2, [r9, #20]
	cmp	r2, #2
	bls	.L6285
.L6250:
	ldrb	r2, [r5, #2]	@ zero_extendqisi2
	movw	r3, #:lower16:_ctype
	movt	r3, #:upper16:_ctype
	and	r2, r2, #128
	strb	r2, [r5, #2]
	ldr	r0, [r6, #4]
	ldrb	r1, [r0, #2]	@ zero_extendqisi2
	ldrb	r3, [r3, r1]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L6286
	movw	r1, #:lower16:.LANCHOR1
	movt	r1, #:upper16:.LANCHOR1
	ldr	r3, [r1, #3772]
	add	r3, r3, #1
	cmp	r3, #15
	str	r3, [r1, #3772]
	bhi	.L6238
	orr	r2, r2, r3
	uxtb	r2, r2
	strb	r2, [r5, #2]
.L6252:
	cmp	r7, #0
	moveq	r7, r8
	movne	r7, #0
	cmp	r7, #0
	beq	.L6253
	ldrh	r3, [r6, #20]
	cmp	r3, #64
	movge	r3, #64
	strh	r3, [r5, #4]	@ unaligned
.L6253:
	mov	r0, #1
	strb	r2, [r6, #25]
	b	.L6235
.L6284:
	ldr	r2, [r9, #20]
	cmp	r2, #4
	bhi	.L6287
.L6247:
	ldrh	r2, [r5, #4]	@ unaligned
	cmp	r2, #0
	movne	r8, r3
	bne	.L6250
.L6260:
	mov	r8, r3
	b	.L6254
.L6285:
	tst	r3, #7168
	bne	.L6238
	b	.L6250
.L6283:
	cmp	r2, #110
	bne	.L6238
	b	.L6239
.L6287:
	ldrb	r2, [r7, #3]	@ zero_extendqisi2
	ldrh	r1, [r6, #22]
	and	r2, r2, #31
	cmp	r1, r2
	bcs	.L6247
	b	.L6238
.L6286:
	mov	r2, #10
	add	r0, r0, #2
	mov	r1, #0
	bl	simple_strtoul
	ldrb	r2, [r5, #2]	@ zero_extendqisi2
	orr	r2, r2, r0
	uxtb	r2, r2
	strb	r2, [r5, #2]
	b	.L6252
.L6241:
	ldrb	r3, [r10, #1]	@ zero_extendqisi2
	cmp	r3, #98
	bne	.L6238
	b	.L6244
.L6242:
	cmp	r3, #115
	bne	.L6238
	b	.L6244
	.fnend
	.size	ep_matches.part.11, .-ep_matches.part.11
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	unbind_config, %function
unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	add	r7, r1, #36
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LC583
	mov	r9, r0
	movt	r8, #:upper16:.LC583
	str	r10, [sp, #24]
	ldr	r10, .L6310
	str	lr, [sp, #28]
	.pad #8
	sub	sp, sp, #8
	b	.L6290
.L6292:
	bl	list_del
	ldr	r3, [r4, #-36]
	cmp	r3, #0
	bne	.L6307
.L6290:
	ldr	r4, [r5, #36]
	cmp	r7, r4
	mov	r0, r4
	sub	r6, r4, #72
	bne	.L6292
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L6293
	ldr	r0, .L6310+4
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L6308
.L6294:
	mov	r0, r5
	blx	r3
.L6293:
	mov	r0, #0
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L6307:
	ldr	r2, .L6310+8
	ldrh	r2, [r2]
	tst	r2, #4
	bne	.L6309
.L6291:
	mov	r1, r6
	mov	r0, r5
	blx	r3
	b	.L6290
.L6309:
	ldr	r1, [r9]
	mov	r2, r8
	mov	r0, r10
	ldr	r3, [r4, #-72]
	str	r6, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #-36]
	b	.L6291
.L6308:
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC584
	sub	r0, r0, #24
	movt	r2, #:upper16:.LC584
	str	r5, [sp]
	ldr	r3, [r5]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r5, #12]
	b	.L6294
.L6311:
	.align	2
.L6310:
	.word	.LANCHOR4-2496
	.word	.LANCHOR4-2448
	.word	.LANCHOR4-2478
	.fnend
	.size	unbind_config, .-unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_unbind, %function
composite_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	add	r7, r0, #32
	str	r8, [sp, #16]
	mov	r8, r0
	mov	r0, r7
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	ldr	r3, [r0, #12]
	mov	r4, r0
	cmp	r3, #0
	bne	.L6329
.L6313:
	ldr	r0, [r4, #36]
	add	r6, r4, #36
	cmp	r6, r0
	beq	.L6314
.L6315:
	sub	r5, r0, #28
	bl	list_del
	mov	r1, r5
	mov	r0, r4
	bl	unbind_config
	ldr	r0, [r4, #36]
	cmp	r6, r0
	bne	.L6315
.L6314:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r3, [r5, #2476]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L6316
	mov	r0, r4
	blx	r3
.L6316:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L6317
	ldr	r0, [r3]
	bl	kfree
	ldr	r0, [r8, #4]
	ldr	r1, [r4, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L6317:
	ldr	r1, .L6330
	mov	r0, r7
	bl	device_remove_file
	mov	r0, r4
	bl	kfree
	mov	r0, r7
	mov	r1, #0
	bl	dev_set_drvdata
	mov	r3, #0
	str	r3, [r5, #2476]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6329:
	movw	r0, #:lower16:.LC585
	movw	r1, #1556
	movt	r0, #:upper16:.LC585
	bl	warn_slowpath_null
	b	.L6313
.L6331:
	.align	2
.L6330:
	.word	.LANCHOR0+1188
	.fnend
	.size	composite_unbind, .-composite_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_bind, %function
composite_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	movw	r6, #:lower16:kmalloc_caches
	movt	r6, #:upper16:kmalloc_caches
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r6, #28]
	.pad #8
	sub	sp, sp, #8
	cmp	r0, #0
	beq	.L6349
	mov	r2, #68
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L6378
.L6333:
	mov	r3, #0
	add	r7, r5, #32
	str	r5, [r4]
	mov	r1, r4
	mov	r0, r7
	str	r3, [r4, #60]
	bl	dev_set_drvdata
	add	r3, r4, #36
	mov	r1, #208
	str	r3, [r4, #36]
	str	r3, [r4, #40]
	ldr	r0, [r5, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	mov	r8, r0
	str	r0, [r4, #4]
	beq	.L6335
	ldr	r0, [r6, #48]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L6336
	mov	r2, #4096
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L6336:
	str	r0, [r8]
	ldr	r2, [r4, #4]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L6335
	movw	r3, #:lower16:composite_setup_complete
	movw	r6, #:lower16:.LANCHOR1
	movt	r3, #:upper16:composite_setup_complete
	movt	r6, #:upper16:.LANCHOR1
	ldr	r0, [r6, #2476]
	str	r3, [r2, #28]
	ldr	r2, [r5, #4]
	mov	r3, #4096
	str	r4, [r2]
	ldr	r1, [r4]
	str	r3, [r4, #8]
	str	r0, [r4, #44]
	ldr	r3, [r1, #8]!
	cmp	r1, r3
	sub	r3, r3, #12
	beq	.L6337
	mov	r0, #0
.L6338:
	ldr	r2, [r3, #12]
	str	r0, [r3]
	cmp	r1, r2
	sub	r3, r2, #12
	bne	.L6338
.L6337:
	mov	r2, #0
	mov	r0, r4
	ldr	r3, [r6, #3776]
	str	r2, [r6, #3772]
	blx	r3
	subs	r8, r0, #0
	bge	.L6379
.L6339:
	mov	r0, r5
	bl	composite_unbind
.L6332:
	mov	r0, r8
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6349:
	mov	r4, #16
	b	.L6333
.L6335:
	mvn	r8, #11
	b	.L6339
.L6378:
	mvn	r8, #11
	b	.L6332
.L6379:
	ldr	r1, [r6, #2476]
	movw	r3, #3780
	ldrh	r2, [r6, r3]
	movw	r3, #3782
	ldrh	r3, [r6, r3]
	ldr	r1, [r1, #12]
	cmp	r2, #0
	ldr	r8, [r1]	@ unaligned
	ldr	lr, [r1, #4]	@ unaligned
	ldr	ip, [r1, #8]	@ unaligned
	ldr	r0, [r1, #12]	@ unaligned
	str	r8, [r4, #17]	@ unaligned
	ldr	r8, .L6383
	str	lr, [r4, #21]	@ unaligned
	str	ip, [r4, #25]	@ unaligned
	str	r0, [r4, #29]	@ unaligned
	ldrh	r1, [r1, #16]	@ unaligned
	movw	r0, #:lower16:.LC586
	strhne	r2, [r4, #25]	@ unaligned
	cmp	r3, #0
	movt	r0, #:upper16:.LC586
	strhne	r3, [r4, #27]	@ unaligned
	strh	r1, [r4, #33]	@ unaligned
	movw	r1, #3784
	ldrh	r1, [r6, r1]
	cmp	r1, #0
	strhne	r1, [r4, #29]	@ unaligned
	sub	r1, r8, #12
	bl	printk
	movw	r3, #3784
	movw	r0, #:lower16:.LC587
	ldrh	r2, [r6, r3]
	sub	r1, r8, #12
	movt	r0, #:upper16:.LC587
	bl	printk
	ldr	r3, [r6, #3788]
	cmp	r3, #0
	beq	.L6380
.L6343:
	add	r1, r4, #31
	mov	r0, r4
	bl	override_id
	strb	r0, [r4, #49]
.L6344:
	movw	r0, #:lower16:.LC589
	sub	r1, r8, #12
	ldr	r2, .L6383+4
	movt	r0, #:upper16:.LC589
	bl	printk
	ldr	r3, [r6, #3844]
	cmp	r3, #0
	beq	.L6381
.L6345:
	add	r1, r4, #32
	mov	r0, r4
	bl	override_id
	strb	r0, [r4, #50]
.L6346:
	ldr	r3, [r6, #3848]
	cmp	r3, #0
	beq	.L6347
	add	r1, r4, #33
	mov	r0, r4
	bl	override_id
	strb	r0, [r4, #51]
.L6347:
	ldr	r3, [r6, #2476]
	ldrb	r3, [r3, #24]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L6348
	ldrb	r3, [r4, #33]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L6382
.L6348:
	mov	r0, r7
	ldr	r1, .L6383+8
	bl	device_create_file
	subs	r8, r0, #0
	bne	.L6339
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC591
	ldr	r3, [r6, #2476]
	movt	r1, #:upper16:.LC591
	add	r0, r0, #32
	ldr	r2, [r3]
	bl	_dev_info
	b	.L6332
.L6380:
	ldrb	r3, [r4, #31]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L6344
	ldr	r3, [r6, #2476]
	ldr	r3, [r3, #8]
	cmp	r3, #0
	bne	.L6343
	ldrb	r3, [r6, #3792]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L6343
	ldr	r3, .L6383+12
	movw	r2, #:lower16:.LC588
	mov	r1, #50
	ldr	ip, [r5, #28]
	movt	r2, #:upper16:.LC588
	ldr	r0, .L6383+4
	stm	sp, {r3, ip}
	sub	r3, r3, #130
	bl	snprintf
	b	.L6343
.L6381:
	ldrb	r3, [r4, #32]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L6346
	ldr	r3, [r6, #2476]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	bne	.L6345
	b	.L6346
.L6382:
	ldr	r0, [r4]
	movw	r1, #:lower16:.LC590
	movt	r1, #:upper16:.LC590
	add	r0, r0, #32
	bl	dev_warn
	b	.L6348
.L6384:
	.align	2
.L6383:
	.word	.LANCHOR5-4048
	.word	.LANCHOR1+3792
	.word	.LANCHOR0+1188
	.word	init_uts_ns+134
	.fnend
	.size	composite_bind, .-composite_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_pcm_mmap, %function
audio_pcm_mmap:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r2, [r0, #208]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r2, #544]
	cmp	r3, #0
	beq	.L6386
	ldr	lr, [r2, #548]
	cmp	lr, #0
	beq	.L6386
	ldr	r0, [r0]
	ldr	r2, [r2, #540]
	ldr	r0, [r0]
	ldr	r0, [r0, #496]
	cmp	r0, #0
	beq	.L6387
	ldr	ip, [r0, #276]
	cmp	ip, #0
	beq	.L6387
.L6388:
	mov	r4, #0
	str	lr, [sp]
	str	r4, [sp, #4]
	ldr	r4, [ip, #8]
	blx	r4
.L6385:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6387:
	movw	ip, #:lower16:arm_dma_ops
	movt	ip, #:upper16:arm_dma_ops
	cmp	ip, #0
	bne	.L6388
	.syntax divided
@ 236 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/dma-mapping.h" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/dma-mapping.h"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 236, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L6386:
	movw	r0, #:lower16:.LC592
	movt	r0, #:upper16:.LC592
	bl	printk
	mvn	r0, #21
	b	.L6385
	.fnend
	.size	audio_pcm_mmap, .-audio_pcm_mmap
	.align	2
	.global	gsdio_ctrl_wq
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ctrl_wq, %function
gsdio_ctrl_wq:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #80
	beq	.L6403
	bx	lr
.L6403:
	movw	r0, #:lower16:.LC105
	ldr	r1, .L6404
	movt	r0, #:upper16:.LC105
	b	printk
.L6405:
	.align	2
.L6404:
	.word	.LANCHOR5-4044
	.fnend
	.size	gsdio_ctrl_wq, .-gsdio_ctrl_wq
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_connect, %function
frmnet_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	subs	r2, r0, #0
	beq	.L6408
	mov	r3, #1
	str	r3, [r2, #124]
	bx	lr
.L6408:
	movw	r0, #:lower16:.LC593
	ldr	r1, .L6409
	movt	r0, #:upper16:.LC593
	b	printk
.L6410:
	.align	2
.L6409:
	.word	.LANCHOR5-4028
	.fnend
	.size	frmnet_connect, .-frmnet_connect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_in_max_packet_size_show, %function
conn_gadget_in_max_packet_size_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2484]
	cmp	r3, #0
	beq	.L6412
	ldr	r3, [r3, #92]
	cmp	r3, #0
	beq	.L6412
	movw	r1, #:lower16:.LC77
	mov	r0, r2
	ldrh	r2, [r3, #20]
	movt	r1, #:upper16:.LC77
	b	sprintf
.L6412:
	movw	r0, #:lower16:.LC450
	ldr	r1, .L6421
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r0, #:upper16:.LC450
	str	lr, [sp, #4]
	bl	printk
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
.L6422:
	.align	2
.L6421:
	.word	.LANCHOR5-4012
	.fnend
	.size	conn_gadget_in_max_packet_size_show, .-conn_gadget_in_max_packet_size_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_out_max_packet_size_show, %function
conn_gadget_out_max_packet_size_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2484]
	cmp	r3, #0
	beq	.L6424
	ldr	r3, [r3, #96]
	cmp	r3, #0
	beq	.L6424
	movw	r1, #:lower16:.LC77
	mov	r0, r2
	ldrh	r2, [r3, #20]
	movt	r1, #:upper16:.LC77
	b	sprintf
.L6424:
	movw	r0, #:lower16:.LC450
	ldr	r1, .L6433
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r0, #:upper16:.LC450
	str	lr, [sp, #4]
	bl	printk
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
.L6434:
	.align	2
.L6433:
	.word	.LANCHOR5-3976
	.fnend
	.size	conn_gadget_out_max_packet_size_show, .-conn_gadget_out_max_packet_size_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_usb_buffer_size_show, %function
conn_gadget_usb_buffer_size_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2484]
	cmp	r3, #0
	beq	.L6439
	ldr	r3, [r3, #192]
	mov	r0, r2
	movw	r1, #:lower16:.LC77
	movt	r1, #:upper16:.LC77
	add	r2, r3, #1020
	cmp	r3, #0
	add	r2, r2, #3
	movlt	r3, r2
	asr	r2, r3, #10
	b	sprintf
.L6439:
	movw	r0, #:lower16:.LC450
	ldr	r1, .L6442
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r0, #:upper16:.LC450
	str	lr, [sp, #4]
	bl	printk
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
.L6443:
	.align	2
.L6442:
	.word	.LANCHOR5-3936
	.fnend
	.size	conn_gadget_usb_buffer_size_show, .-conn_gadget_usb_buffer_size_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bcdUSB_show, %function
bcdUSB_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata
	ldr	r3, [r0, #8]
	cmp	r3, #0
	beq	.L6445
	movw	r1, #:lower16:.LC84
	mov	r0, r4
	ldrh	r2, [r3, #19]	@ unaligned
	movt	r1, #:upper16:.LC84
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
.L6445:
	movw	r3, #:lower16:.LANCHOR0
	movw	r1, #:lower16:.LC84
	movt	r3, #:upper16:.LANCHOR0
	mov	r0, r4
	ldrh	r2, [r3, #138]
	movt	r1, #:upper16:.LC84
	bl	sprintf
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #5
	ldr	pc, [sp], #4
	.fnend
	.size	bcdUSB_show, .-bcdUSB_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	terminal_version_show, %function
terminal_version_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r4, #:lower16:.LANCHOR1
	movw	r5, #3852
	movt	r4, #:upper16:.LANCHOR1
	movw	r3, #3854
	strd	r6, [sp, #8]
	ldrh	ip, [r4, r5]
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	ldrh	lr, [r4, r3]
	movw	r1, #:lower16:.LC594
	mov	r0, r2
	movt	r1, #:upper16:.LC594
	mov	r6, r2
	lsr	r3, ip, #8
	uxtb	r2, ip
	str	lr, [sp]
	bl	sprintf
	ldrh	r3, [r4, r5]
	mov	r7, r0
	cmp	r3, #0
	beq	.L6448
	movw	r0, #:lower16:.LC595
	mov	r2, r6
	ldr	r1, .L6454
	movt	r0, #:upper16:.LC595
	bl	printk
.L6448:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L6455:
	.align	2
.L6454:
	.word	.LANCHOR5-3900
	.fnend
	.size	terminal_version_show, .-terminal_version_show
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_set_modem_cbits_w, %function
rmnet_sdio_set_modem_cbits_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #-12]
	mov	r3, r0
	tst	r2, #2
	beq	.L6456
	ldr	r0, .L6465
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L6464
.L6456:
	bx	lr
.L6464:
	movw	r1, #:lower16:.LC596
	sub	r0, r0, #32
	ldr	r2, .L6465+4
	movt	r1, #:upper16:.LC596
	ldr	r3, [r3, #-4]
	b	__dynamic_pr_debug
.L6466:
	.align	2
.L6465:
	.word	.LANCHOR4-2416
	.word	.LANCHOR5-3876
	.fnend
	.size	rmnet_sdio_set_modem_cbits_w, .-rmnet_sdio_set_modem_cbits_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_disable, %function
audio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L6478
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L6477
.L6468:
	ldrb	r3, [r4, #152]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L6467
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	strb	r3, [r4, #152]
.L6467:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6477:
	movw	r1, #:lower16:.LC597
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC597
	bl	__dynamic_pr_debug
	b	.L6468
.L6479:
	.align	2
.L6478:
	.word	.LANCHOR4-2400
	.fnend
	.size	audio_disable, .-audio_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_poll, %function
rmnet_ctrl_poll:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	cmp	r4, #0
	beq	.L6494
	cmp	r1, #0
	beq	.L6483
	ldr	r3, [r1]
	cmp	r3, #0
	beq	.L6483
	mov	r2, r1
	add	r1, r4, #32
	blx	r3
.L6483:
	add	r5, r4, #52
	add	r4, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4]
	mov	r6, r0
	cmp	r3, r4
	moveq	r4, #0
	beq	.L6484
	ldr	r0, .L6496
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	moveq	r4, #65
	bne	.L6495
.L6484:
	mov	r1, r6
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L6480:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6495:
	movw	r1, #:lower16:.LC599
	ldr	r2, .L6496+4
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC599
	mov	r4, #65
	bl	__dynamic_pr_debug
	b	.L6484
.L6494:
	movw	r0, #:lower16:.LC598
	ldr	r1, .L6496+4
	mov	r4, #8
	movt	r0, #:upper16:.LC598
	bl	printk
	b	.L6480
.L6497:
	.align	2
.L6496:
	.word	.LANCHOR4-2368
	.word	.LANCHOR5-3844
	.fnend
	.size	rmnet_ctrl_poll, .-rmnet_ctrl_poll
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_send_cbits_tomodem, %function
ghsic_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	ip, #:lower16:.LANCHOR1
	movt	ip, #:upper16:.LANCHOR1
	ldr	r3, [ip, #1016]
	cmp	r0, #0
	cmpne	r1, r3
	bcs	.L6510
	mov	r3, #104
	mla	r1, r3, r1, ip
	ldr	r1, [r1, #1020]
	cmp	r1, #0
	beq	.L6511
	ldr	r3, [r1, #88]
	cmp	r3, r2
	beq	.L6498
	ldr	r3, [r1, #84]
	str	r2, [r1, #88]
	tst	r3, #1
	beq	.L6498
	ldr	r0, .L6513
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L6512
.L6498:
	bx	lr
.L6512:
	movw	r1, #:lower16:.LC600
	mov	r3, r2
	ldr	r2, .L6513+4
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC600
	b	__dynamic_pr_debug
.L6510:
	movw	r0, #:lower16:.LC118
	mov	r2, r1
	ldr	r1, .L6513+4
	movt	r0, #:upper16:.LC118
	b	printk
.L6511:
	movw	r0, #:lower16:.LC105
	ldr	r1, .L6513+4
	movt	r0, #:upper16:.LC105
	b	printk
.L6514:
	.align	2
.L6513:
	.word	.LANCHOR4-2352
	.word	.LANCHOR5-3828
	.fnend
	.size	ghsic_send_cbits_tomodem, .-ghsic_send_cbits_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_connect_w, %function
ghsic_ctrl_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r3, r0, #16
	bxeq	lr
	ldr	r2, [r0, #68]
	tst	r2, #2
	bxeq	lr
	ldr	r0, .L6530
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r4, .L6530+4
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	beq	.L6517
	movw	r1, #:lower16:.LC601
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC601
	sub	r2, r4, #8
	bl	__dynamic_pr_debug
.L6517:
	movw	r0, #:lower16:.LC602
	sub	r1, r4, #8
	ldr	r4, [sp]
	movt	r0, #:upper16:.LC602
	mvn	r2, #18
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk
.L6531:
	.align	2
.L6530:
	.word	.LANCHOR4-2320
	.word	.LANCHOR5-3792
	.fnend
	.size	ghsic_ctrl_connect_w, .-ghsic_ctrl_connect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_send_cbits_tomodem, %function
ghsuart_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	ip, #:lower16:.LANCHOR1
	movt	ip, #:upper16:.LANCHOR1
	ldr	r3, [ip, #1856]
	cmp	r0, #0
	cmpne	r1, r3
	bcs	.L6544
	mov	r3, #84
	mla	r1, r3, r1, ip
	ldr	r1, [r1, #1860]
	cmp	r1, #0
	beq	.L6545
	ldr	r3, [r1, #92]
	cmp	r3, r2
	beq	.L6532
	ldr	r3, [r1, #88]
	str	r2, [r1, #92]
	tst	r3, #4
	beq	.L6532
	ldr	r0, .L6547
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L6546
.L6532:
	bx	lr
.L6546:
	movw	r1, #:lower16:.LC600
	mov	r3, r2
	ldr	r2, .L6547+4
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC600
	b	__dynamic_pr_debug
.L6544:
	movw	r0, #:lower16:.LC118
	mov	r2, r1
	ldr	r1, .L6547+4
	movt	r0, #:upper16:.LC118
	b	printk
.L6545:
	movw	r0, #:lower16:.LC105
	ldr	r1, .L6547+4
	movt	r0, #:upper16:.LC105
	b	printk
.L6548:
	.align	2
.L6547:
	.word	.LANCHOR4-2304
	.word	.LANCHOR5-3776
	.fnend
	.size	ghsuart_send_cbits_tomodem, .-ghsuart_send_cbits_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_wake_cb, %function
bam_data_wake_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L6564
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r4, [r0, #4]
	ldrh	r3, [r2, #-14]
	tst	r3, #4
	bne	.L6560
.L6550:
	cmp	r4, #0
	beq	.L6561
	ldr	r3, [r4]
	cmp	r3, #0
	beq	.L6562
	ldr	r0, [r3]
	cmp	r0, #0
	beq	.L6563
	ldr	r3, [r0]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L6555
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	bx	r3
.L6560:
	ldr	r3, .L6564+4
	movw	r1, #:lower16:.LC603
	sub	r0, r2, #32
	movt	r1, #:upper16:.LC603
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L6550
.L6555:
	mvn	r0, #94
.L6549:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6562:
	movw	r0, #:lower16:.LC605
	ldr	r1, .L6564+4
	movt	r0, #:upper16:.LC605
	bl	printk
	mvn	r0, #18
	b	.L6549
.L6561:
	movw	r0, #:lower16:.LC604
	ldr	r1, .L6564+4
	movt	r0, #:upper16:.LC604
	bl	printk
	mvn	r0, #18
	b	.L6549
.L6563:
	movw	r0, #:lower16:.LC606
	ldr	r1, .L6564+4
	movt	r0, #:upper16:.LC606
	bl	printk
	mvn	r0, #18
	b	.L6549
.L6565:
	.align	2
.L6564:
	.word	.LANCHOR4-2272
	.word	.LANCHOR5-3748
	.fnend
	.size	bam_data_wake_cb, .-bam_data_wake_cb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_ctrl_open, %function
ccid_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r3, #3592]
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L6573
	ldr	r5, [r4, #116]
	cmp	r5, #0
	bne	.L6574
	mov	r3, #1
	add	r6, r4, #92
	mov	r7, r1
	mov	r0, r6
	str	r3, [r4, #116]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r6
	str	r4, [r7, #124]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
.L6566:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6574:
	ldr	r0, .L6575
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	mvneq	r0, #15
	beq	.L6566
	movw	r1, #:lower16:.LC607
	sub	r0, r0, #32
	ldr	r2, .L6575+4
	movt	r1, #:upper16:.LC607
	bl	__dynamic_pr_debug
	mvn	r0, #15
	b	.L6566
.L6573:
	ldr	r0, .L6575+8
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	mvneq	r0, #18
	beq	.L6566
	movw	r1, #:lower16:.LC308
	sub	r0, r0, #24
	ldr	r2, .L6575+4
	movt	r1, #:upper16:.LC308
	bl	__dynamic_pr_debug
	mvn	r0, #18
	b	.L6566
.L6576:
	.align	2
.L6575:
	.word	.LANCHOR4-2224
	.word	.LANCHOR5-3728
	.word	.LANCHOR4-2256
	.fnend
	.size	ccid_ctrl_open, .-ccid_ctrl_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_open, %function
ccid_bulk_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L6591
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r3, #3592]
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L6588
.L6578:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L6589
	ldr	r5, [r4, #152]
	cmp	r5, #0
	bne	.L6590
	mov	r3, #1
	add	r6, r4, #92
	str	r5, [r4, #148]
	mov	r0, r6
	str	r3, [r4, #152]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r6
	str	r4, [r7, #124]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
.L6577:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6588:
	movw	r1, #:lower16:.LC608
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC608
	bl	__dynamic_pr_debug
	b	.L6578
.L6590:
	ldr	r0, .L6591+4
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	mvneq	r0, #15
	beq	.L6577
	movw	r1, #:lower16:.LC609
	sub	r0, r0, #24
	ldr	r2, .L6591+8
	movt	r1, #:upper16:.LC609
	bl	__dynamic_pr_debug
	mvn	r0, #15
	b	.L6577
.L6589:
	ldr	r0, .L6591+12
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	mvneq	r0, #18
	beq	.L6577
	movw	r1, #:lower16:.LC308
	sub	r0, r0, #32
	ldr	r2, .L6591+8
	movt	r1, #:upper16:.LC308
	bl	__dynamic_pr_debug
	mvn	r0, #18
	b	.L6577
.L6592:
	.align	2
.L6591:
	.word	.LANCHOR4-2208
	.word	.LANCHOR4-2160
	.word	.LANCHOR5-3712
	.word	.LANCHOR4-2176
	.fnend
	.size	ccid_bulk_open, .-ccid_bulk_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_disconnect, %function
frmnet_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	subs	r4, r0, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	beq	.L6615
	ldr	r3, [r4, #120]
	mov	r2, #0
	str	r2, [r4, #124]
	cmp	r3, r2
	beq	.L6616
	ldr	r0, [r4, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6598
	blx	r3
.L6598:
	ldr	r3, [r4, #140]
	mov	r1, #0
	mvn	r0, #94
	mov	r2, #32
	ldr	r3, [r3]
	strb	r0, [r3]
	strb	r1, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrh	r0, [r4, #112]
	strh	r0, [r3, #4]	@ unaligned
	strb	r1, [r3, #6]
	strb	r1, [r3, #7]
	ldrd	r0, [r4, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bge	.L6599
	ldr	r3, [r4, #120]
	cmp	r3, #0
	bne	.L6617
.L6593:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L6617:
	movw	r0, #:lower16:.LC611
	ldr	r1, .L6619
	movt	r0, #:upper16:.LC611
	bl	printk
.L6599:
	ldr	r0, .L6619+4
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L6618
.L6601:
	add	r8, r4, #132
	add	r7, r4, #144
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #144]
	mov	r9, r0
	cmp	r7, r5
	beq	.L6602
.L6603:
	mov	r0, r5
	sub	r6, r5, #8
	bl	list_del
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
	ldr	r5, [r4, #144]
	cmp	r7, r5
	bne	.L6603
.L6602:
	mov	r3, #0
	mov	r1, r9
	mov	r0, r8
	str	r3, [r4, #152]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L6616:
	ldr	r0, .L6619+8
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L6593
	movw	r1, #:lower16:.LC610
	sub	r0, r0, #32
	ldr	r2, .L6619
	movt	r1, #:upper16:.LC610
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__dynamic_pr_debug
.L6618:
	movw	r1, #:lower16:.LC612
	ldrb	r3, [r4, #116]	@ zero_extendqisi2
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC612
	ldr	r2, .L6619+12
	bl	__dynamic_pr_debug
	b	.L6601
.L6615:
	movw	r0, #:lower16:.LC593
	mov	r2, r4
	ldr	r1, .L6619
	movt	r0, #:upper16:.LC593
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L6620:
	.align	2
.L6619:
	.word	.LANCHOR5-3696
	.word	.LANCHOR4-2112
	.word	.LANCHOR4-2128
	.word	.LANCHOR5-3676
	.fnend
	.size	frmnet_disconnect, .-frmnet_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_cmd_complete, %function
frmnet_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	ldr	r5, [r1, #32]
	.pad #12
	sub	sp, sp, #12
	cmp	r5, #0
	beq	.L6629
	ldr	r0, .L6631
	mov	r4, r1
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L6630
.L6623:
	ldr	lr, [r5, #96]
	cmp	lr, #0
	beq	.L6621
	ldrb	r0, [r5, #116]	@ zero_extendqisi2
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r4]
	ldr	r2, [r4, #48]
	add	r0, r0, r0, lsl #1
	add	r3, r3, r0, lsl #3
	ldrb	r0, [r3, #3252]	@ zero_extendqisi2
	mov	r3, lr
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	bx	r3
.L6621:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L6630:
	ldrb	ip, [r5, #116]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC156
	mov	r3, r5
	movt	r1, #:upper16:.LC156
	ldr	r2, .L6631+4
	sub	r0, r0, #32
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L6623
.L6629:
	ldr	r1, .L6631+4
	movw	r0, #:lower16:.LC613
	movt	r0, #:upper16:.LC613
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	printk
.L6632:
	.align	2
.L6631:
	.word	.LANCHOR4-2080
	.word	.LANCHOR5-3652
	.fnend
	.size	frmnet_cmd_complete, .-frmnet_cmd_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_suspend, %function
rmnet_sdio_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #192]
	mov	r3, r0
	cmp	r2, #0
	bne	.L6635
	bx	lr
.L6635:
	ldr	r2, [r3, #328]
	add	r1, r0, #332
	ldr	r0, [r0, #200]
	bic	r2, r2, #2
	str	r2, [r3, #328]
	b	queue_work
	.fnend
	.size	rmnet_sdio_suspend, .-rmnet_sdio_suspend
	.align	2
	.global	gsdio_read_complete
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_read_complete, %function
gsdio_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L6645
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	ldr	r4, [r0]
	ldrh	r3, [ip, #-6]
	tst	r3, #4
	bne	.L6643
.L6637:
	cmp	r4, #0
	beq	.L6644
	add	r5, r4, #4
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	add	r2, r4, #20
	ldr	r1, [r4, #24]
	add	r0, r6, #36
	bl	__list_add
	ldr	r3, [r4, #48]
	movw	r2, #:lower16:.LANCHOR1
	add	r1, r4, #28
	movt	r2, #:upper16:.LANCHOR1
	ldr	r0, [r2, #3324]
	add	r3, r3, #1
	str	r3, [r4, #48]
	bl	queue_work
	mov	r1, r7
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock_irqrestore
.L6643:
	movw	r1, #:lower16:.LC173
	mov	r3, r0
	ldr	r2, .L6645+4
	sub	r0, ip, #24
	movt	r1, #:upper16:.LC173
	str	r4, [sp]
	bl	__dynamic_pr_debug
	b	.L6637
.L6644:
	ldr	r1, .L6645+4
	movw	r0, #:lower16:.LC105
	movt	r0, #:upper16:.LC105
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	printk
.L6646:
	.align	2
.L6645:
	.word	.LANCHOR4-2064
	.word	.LANCHOR5-3632
	.fnend
	.size	gsdio_read_complete, .-gsdio_read_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_unthrottle_tx, %function
ghsic_data_unthrottle_tx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r4, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L6647
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L6658
.L6647:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6658:
	add	r5, r4, #80
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #208]
	mov	r1, r0
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #208]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r4, #120
	ldr	r0, [r4, #84]
	bl	queue_work
	ldr	r0, .L6659
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L6647
	movw	r1, #:lower16:.LC614
	sub	r0, r0, #32
	ldr	r2, .L6659+4
	movt	r1, #:upper16:.LC614
	ldr	r3, [r4]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__dynamic_pr_debug
.L6660:
	.align	2
.L6659:
	.word	.LANCHOR4-2032
	.word	.LANCHOR5-3612
	.fnend
	.size	ghsic_data_unthrottle_tx, .-ghsic_data_unthrottle_tx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_disable, %function
rmnet_mux_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #368]
	cmp	r3, #0
	bxeq	lr
	mov	r3, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	str	r3, [r0, #368]
	ldr	r0, [r0, #96]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L6663
	blx	r2
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
.L6663:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r5, [r4, #96]
	ldr	r6, [r4, #100]
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L6664
	blx	r2
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
.L6664:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L6665
	blx	r2
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
.L6665:
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	add	r1, r4, #380
	ldr	r0, [r4, #376]
	str	r3, [r4, #348]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work
	.fnend
	.size	rmnet_mux_disable, .-rmnet_mux_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_disconnect_w, %function
grmnet_ctrl_smd_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #-160]
	cmp	r0, #0
	beq	.L6679
	bl	smd_close
	mov	r3, #0
	str	r3, [r4, #-160]
.L6679:
	ldr	r3, [r4, #-152]
	tst	r3, #2
	bne	.L6680
	ldr	r3, [r4, #-152]
	tst	r3, #4
	beq	.L6678
.L6680:
	sub	r1, r4, #152
	mov	r0, #2
	bl	_clear_bit
	ldr	r3, .L6686
	mov	r2, #84
	ldr	r0, [r4, #-60]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	mla	r0, r2, r0, r3
	add	r0, r0, #4
	b	platform_driver_unregister
.L6678:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6687:
	.align	2
.L6686:
	.word	.LANCHOR1+512
	.fnend
	.size	grmnet_ctrl_smd_disconnect_w, .-grmnet_ctrl_smd_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_disconnect_w, %function
ghsuart_ctrl_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #36]
	mov	r3, r0
	tst	r2, #1
	bne	.L6690
	bx	lr
.L6690:
	mov	r2, #0
	add	r1, r0, #36
	mov	r0, #2
	str	r2, [r3, #-36]
	b	_clear_bit
	.fnend
	.size	ghsuart_ctrl_disconnect_w, .-ghsuart_ctrl_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_disconnect_w, %function
ghsuart_data_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #60]
	mov	r3, r0
	tst	r2, #1
	bne	.L6693
	bx	lr
.L6693:
	mov	r2, #0
	add	r1, r0, #60
	mov	r0, #2
	str	r2, [r3, #-100]
	b	_clear_bit
	.fnend
	.size	ghsuart_data_disconnect_w, .-ghsuart_data_disconnect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_disable, %function
rmnet_sdio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #192]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r0, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r4
	str	r5, [r4, #192]
	str	r5, [r4, #196]
	bl	rmnet_sdio_free_buf
	add	r1, r4, #204
	ldr	r0, [r4, #200]
	bl	queue_work
	str	r5, [r4, #328]
	add	r1, r4, #332
	ldr	r0, [r4, #200]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work
	.fnend
	.size	rmnet_sdio_disable, .-rmnet_sdio_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_write_tomdm, %function
ghsuart_data_write_tomdm:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	subs	r7, r0, #144
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	beq	.L6699
	ldr	r3, [r0, #-140]
	cmp	r3, #0
	bne	.L6743
.L6699:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6743:
	sub	r6, r0, #40
	mov	r4, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #40]
	mov	r8, r0
	tst	r3, #2
	bne	.L6709
	mov	r3, r4
	ldr	r5, [r3, #-56]!
	cmp	r5, r3
	beq	.L6703
	cmp	r5, #0
	beq	.L6703
	ldr	r3, [r4, #-48]
	mov	r10, #0
	mov	fp, #0
	ldr	r0, .L6749
	sub	r3, r3, #1
	str	r3, [r4, #-48]
	ldrd	r2, [r5]
	strd	r10, [r5]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L6744
.L6705:
	ldr	r1, .L6749+4
	ldr	r0, .L6749+8
	bl	___ratelimit
	cmp	r0, #0
	beq	.L6702
	movw	r0, #:lower16:.LC121
	mvn	r2, #18
	ldr	r1, .L6749+4
	movt	r0, #:upper16:.LC121
	bl	printk
.L6702:
	ldr	r3, [r4, #68]
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #68]
	bl	dev_kfree_skb_any
.L6703:
	mov	r0, r6
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, .L6749+12
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L6745
.L6706:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r4, #-132]
	mov	r8, r0
	cmp	r7, #0
	beq	.L6709
	ldr	r3, [r4, #40]
	tst	r3, #2
	bne	.L6709
	sub	r3, r4, #64
	movw	r9, #:lower16:.LANCHOR0
	movt	r9, #:upper16:.LANCHOR0
	str	r3, [sp, #12]
	b	.L6708
.L6747:
	ldr	r5, [r4, #-64]
	ldr	r0, [sp, #12]
	sub	r10, r5, #36
	cmp	r5, r0
	beq	.L6709
	ldr	r0, [r9, #1228]
	bl	__alloc_skb
	subs	fp, r0, #0
	mov	r0, r5
	beq	.L6709
	bl	list_del
	ldr	r2, [fp, #172]
	mov	r1, r8
	mov	r0, r6
	str	r2, [r5, #-36]
	ldr	r2, [r9, #1228]
	str	r2, [r5, #-32]
	str	fp, [r5, #-4]
	bl	_raw_spin_unlock_irqrestore
	ldr	ip, [r7, #8]
	mov	r2, #208
	mov	r1, r10
	mov	r0, r7
	ldr	r8, [ip, #16]
	blx	r8
	mov	r2, r0
	mov	r0, r6
	str	r2, [sp, #8]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [sp, #8]
	mov	r8, r0
	cmp	r2, #0
	bne	.L6746
.L6708:
	ldr	r0, [r4, #-140]
	mov	r2, #0
	mvn	r3, #0
	mov	r1, #32
	cmp	r0, r2
	bne	.L6747
.L6709:
	mov	r1, r8
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L6746:
	ldr	r9, .L6749+16
	mov	r0, fp
	bl	dev_kfree_skb_any
	ldr	r0, .L6749+20
	mov	r1, r9
	bl	___ratelimit
	cmp	r0, #0
	beq	.L6710
	movw	r0, #:lower16:.LC616
	mov	r1, r9
	movt	r0, #:upper16:.LC616
	bl	printk
.L6710:
	ldr	r3, [r4, #-140]
	cmp	r3, #0
	bne	.L6748
	ldr	r3, [r7, #8]
	mov	r1, r10
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L6709
.L6745:
	movw	r1, #:lower16:.LC601
	mov	r3, r7
	ldr	r2, .L6749+16
	movt	r1, #:upper16:.LC601
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L6706
.L6744:
	ldr	lr, [r4, #-144]
	movw	r1, #:lower16:.LC615
	mov	r3, r7
	ldr	ip, [r4, #60]
	movt	r1, #:upper16:.LC615
	sub	r0, r0, #24
	ldr	r2, .L6749+4
	stm	sp, {ip, lr}
	bl	__dynamic_pr_debug
	b	.L6705
.L6748:
	mov	r0, r5
	ldr	r2, [r4, #-64]
	ldr	r1, [sp, #12]
	bl	__list_add
	b	.L6709
.L6750:
	.align	2
.L6749:
	.word	.LANCHOR4-2016
	.word	.LANCHOR5-3584
	.word	.LANCHOR0+1204
	.word	.LANCHOR4-1984
	.word	.LANCHOR5-3556
	.word	.LANCHOR0+1232
	.fnend
	.size	ghsuart_data_write_tomdm, .-ghsuart_data_write_tomdm
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_write_tohost, %function
ghsuart_data_write_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #160
	bxeq	lr
	ldr	r3, [r0, #-156]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #88
	mov	r0, r7
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r4, #-152]
	mov	r8, r0
	cmp	r9, #0
	beq	.L6754
	ldr	r3, [r4, #-112]
	sub	r2, r4, #112
	str	r2, [sp]
	cmp	r2, r3
	beq	.L6754
	ldr	r5, [r4, #-104]
	sub	r3, r4, #104
	str	r3, [sp, #4]
	cmp	r5, r3
	beq	.L6754
	cmp	r5, #0
	beq	.L6754
	movw	fp, #:lower16:.LANCHOR0
	movt	fp, #:upper16:.LANCHOR0
	mov	r3, fp
	mov	fp, r0
	mov	r8, r3
.L6755:
	ldr	r3, [r4, #-96]
	mov	r0, #0
	mov	r1, #0
	sub	r3, r3, #1
	str	r3, [r4, #-96]
	ldrd	r2, [r5]
	strd	r0, [r5]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r6, [r4, #-112]
	str	r5, [r6, #-4]
	ldr	r3, [r5, #172]
	sub	r10, r6, #36
	str	r3, [r6, #-36]
	ldr	r3, [r5, #80]
	str	r3, [r6, #-32]
	ldr	r3, [r4, #32]
	ldr	r0, [r8, #1256]
	add	r3, r3, #1
	cmp	r3, r0
	str	r3, [r4, #32]
	ldrb	r3, [r6, #-10]	@ zero_extendqisi2
	orrne	r3, r3, #1
	strbne	r3, [r6, #-10]
	bne	.L6758
	bfc	r3, #0, #1
	strb	r3, [r6, #-10]
	mov	r3, #0
	str	r3, [r4, #32]
.L6758:
	mov	r0, r6
	bl	list_del
	mov	r1, fp
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r9, #8]
	mov	r1, r10
	mov	r2, #208
	mov	r0, r9
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	cmp	r10, #0
	mov	fp, r0
	bne	.L6774
	ldr	r2, [r4, #-112]
	ldr	r1, [sp]
	ldr	r3, [r4, #48]
	cmp	r1, r2
	add	r3, r3, #1
	str	r3, [r4, #48]
	beq	.L6770
	ldr	r5, [r4, #-104]
	ldr	r3, [sp, #4]
	cmp	r5, r3
	beq	.L6770
	cmp	r5, #0
	bne	.L6755
.L6770:
	mov	r8, fp
.L6754:
	mov	r1, r8
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L6774:
	mov	r8, r0
	movw	r0, #:lower16:.LC617
	ldr	r1, .L6775
	movt	r0, #:upper16:.LC617
	bl	printk
	mov	r0, r6
	ldr	r2, [r4, #-112]
	ldr	r1, [sp]
	bl	__list_add
	mov	r0, r5
	bl	dev_kfree_skb_any
	b	.L6754
.L6776:
	.align	2
.L6775:
	.word	.LANCHOR5-3532
	.fnend
	.size	ghsuart_data_write_tohost, .-ghsuart_data_write_tohost
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_close_sdio_work, %function
rmnet_close_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L6831
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L6826
.L6778:
	ldr	r3, [r4, #-108]
	cmp	r3, #0
	beq	.L6777
	ldr	r0, [r4, #-204]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6781
	blx	r3
.L6781:
	sub	r5, r4, #112
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-200]
	mov	r2, #0
	mvn	ip, #94
	mov	r1, r0
	mov	r0, r5
	ldr	r3, [r3]
	strb	ip, [r3]
	strb	r2, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	ldrb	ip, [r4, #-196]	@ zero_extendqisi2
	strh	ip, [r3, #4]	@ unaligned
	strb	r2, [r3, #6]
	strb	r2, [r3, #7]
	bl	_raw_spin_unlock_irqrestore
	ldrd	r0, [r4, #-204]
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	blt	.L6827
.L6782:
	ldr	r0, [r4, #-212]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6784
	blx	r3
.L6784:
	ldr	r0, [r4, #-208]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6785
	blx	r3
.L6785:
	sub	r0, r4, #64
	bl	cancel_work_sync
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-108]
	mov	r6, r0
	cmp	r3, #0
	bne	.L6828
.L6797:
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L6827:
	ldr	r3, [r4, #-108]
	cmp	r3, #0
	bne	.L6829
.L6777:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L6826:
	movw	r1, #:lower16:.LC289
	sub	r0, r3, #24
	ldr	r2, .L6831+4
	movt	r1, #:upper16:.LC289
	bl	__dynamic_pr_debug
	b	.L6778
.L6828:
	ldr	r7, [r4, #-168]
	sub	r8, r4, #168
	cmp	r7, r8
	beq	.L6788
	mov	r9, #0
.L6787:
	mov	r0, r7
	sub	r10, r7, #36
	bl	list_del
	ldr	r3, [r4, #-160]
	mov	r0, #0
	sub	r3, r3, #1
	str	r3, [r4, #-160]
	str	r9, [r7, #-36]
	ldr	r7, [r4, #-212]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r7, [r4, #-168]
	cmp	r7, r8
	bne	.L6787
.L6788:
	ldr	r7, [r4, #-140]
	sub	r8, r4, #140
	cmp	r7, r8
	beq	.L6789
	mov	r9, #0
.L6790:
	mov	r0, r7
	sub	r10, r7, #36
	bl	list_del
	ldr	r3, [r4, #-132]
	mov	r0, #0
	sub	r3, r3, #1
	str	r3, [r4, #-132]
	str	r9, [r7, #-36]
	ldr	r7, [r4, #-208]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r7, [r4, #-140]
	cmp	r7, r8
	bne	.L6790
.L6789:
	ldr	r7, [r4, #-192]
	sub	r8, r4, #192
	cmp	r7, r8
	beq	.L6791
.L6792:
	mov	r0, r7
	sub	r9, r7, #8
	bl	list_del
	ldr	r3, [r4, #-184]
	sub	r3, r3, #1
	str	r3, [r4, #-184]
	ldr	r0, [r7, #-8]
	bl	kfree
	mov	r0, r9
	bl	kfree
	ldr	r7, [r4, #-192]
	cmp	r7, r8
	bne	.L6792
.L6791:
	ldr	r7, [r4, #-180]
	sub	r8, r4, #180
	cmp	r8, r7
	beq	.L6793
.L6794:
	mov	r0, r7
	sub	r9, r7, #8
	bl	list_del
	ldr	r3, [r4, #-172]
	sub	r3, r3, #1
	str	r3, [r4, #-172]
	ldr	r0, [r7, #-8]
	bl	kfree
	mov	r0, r9
	bl	kfree
	ldr	r7, [r4, #-180]
	cmp	r8, r7
	bne	.L6794
.L6793:
	mov	r3, #0
	movw	r0, #:lower16:.LC618
	ldr	r1, .L6831+4
	movt	r0, #:upper16:.LC618
	sub	r7, r4, #156
	str	r3, [r4, #-104]
	mov	r8, #0
	mov	r9, #0
	bl	printk
.L6796:
	ldr	r3, [r4, #-156]
	cmp	r3, r7
	bne	.L6830
.L6795:
	sub	r7, r4, #128
	mov	r8, #0
	mov	r9, #0
.L6798:
	ldr	r3, [r4, #-128]
	cmp	r3, r7
	beq	.L6797
	cmp	r3, #0
	beq	.L6797
	ldr	r2, [r4, #-120]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #-120]
	ldm	r3, {r1, r2}
	strd	r8, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	b	.L6798
.L6829:
	movw	r0, #:lower16:.LC611
	ldr	r1, .L6831+4
	movt	r0, #:upper16:.LC611
	bl	printk
	b	.L6782
.L6830:
	cmp	r3, #0
	beq	.L6795
	ldr	r2, [r4, #-148]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #-148]
	ldm	r3, {r1, r2}
	strd	r8, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	b	.L6796
.L6832:
	.align	2
.L6831:
	.word	.LANCHOR4-1968
	.word	.LANCHOR5-3504
	.fnend
	.size	rmnet_close_sdio_work, .-rmnet_close_sdio_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_disconnect_work, %function
gbam_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-280]
	tst	r3, #2
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #-276]
	bl	msm_bam_dmux_close
	sub	r1, r4, #280
	mov	r0, #1
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	_clear_bit
	.fnend
	.size	gbam_disconnect_work, .-gbam_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam2bam_disconnect_work, %function
gbam2bam_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-168]
	cmp	r3, #7
	bxne	lr
	sub	r0, r0, #164
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	bl	usb_bam_disconnect_ipa
	subs	r2, r0, #0
	bne	.L6849
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6849:
	movw	r0, #:lower16:.LC619
	ldr	r1, .L6850
	movt	r0, #:upper16:.LC619
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk
.L6851:
	.align	2
.L6850:
	.word	.LANCHOR5-3480
	.fnend
	.size	gbam2bam_disconnect_work, .-gbam2bam_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam2bam_data_disconnect_work, %function
bam2bam_data_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-124]
	cmp	r3, #7
	bxne	lr
	sub	r0, r0, #120
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	bl	usb_bam_disconnect_ipa
	subs	r2, r0, #0
	bne	.L6863
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L6863:
	movw	r0, #:lower16:.LC619
	ldr	r1, .L6864
	movt	r0, #:upper16:.LC619
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk
.L6865:
	.align	2
.L6864:
	.word	.LANCHOR5-3452
	.fnend
	.size	bam2bam_data_disconnect_work, .-bam2bam_data_disconnect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_function_init, %function
ncm_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r5, #:lower16:kmalloc_caches
	movt	r5, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	mov	r6, r0
	ldr	r0, [r5, #24]
	str	lr, [sp, #12]
	cmp	r0, #0
	beq	.L6871
	mov	r2, #16
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L6872
	ldr	r0, [r5, #24]
	cmp	r0, #0
	beq	.L6867
	mov	r2, #6
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r6, #4]
	beq	.L6877
.L6870:
	movw	r1, #:lower16:ncm_work
	mov	r3, r4
	ldr	r0, .L6878
	mov	ip, #2560
	movt	r1, #:upper16:ncm_work
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	str	ip, [r3], #4
	str	r3, [r4, #4]
	str	r3, [r4, #8]
	str	r1, [r4, #12]
	str	r4, [r2, #3728]
	bl	misc_register
	cmp	r0, #0
	beq	.L6866
	movw	r0, #:lower16:.LC620
	ldr	r1, .L6878+4
	movt	r0, #:upper16:.LC620
	bl	printk
	mov	r0, #0
.L6866:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6871:
	mov	r4, #16
.L6867:
	mov	r3, #16
	str	r3, [r6, #4]
	b	.L6870
.L6877:
	mov	r0, r4
	bl	kfree
	mvn	r0, #11
	b	.L6866
.L6872:
	mvn	r0, #11
	b	.L6866
.L6879:
	.align	2
.L6878:
	.word	.LANCHOR0+848
	.word	.LANCHOR5-3420
	.fnend
	.size	ncm_function_init, .-ncm_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	show_timestamp, %function
show_timestamp:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r0, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r0, #3856]
	.pad #28
	sub	sp, sp, #28
	cmp	r0, #0
	moveq	r4, r0
	beq	.L6880
	mov	fp, r3
	movw	r3, #:lower16:kmalloc_caches
	str	r1, [sp, #16]
	movt	r3, #:upper16:kmalloc_caches
	str	r2, [sp, #20]
	ldr	r0, [r3, #48]
	cmp	r0, #0
	beq	.L6889
	mov	r2, #4096
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L6893
.L6882:
	ldr	r7, .L6894
	add	r0, r7, #4
	bl	_raw_read_lock_irqsave
	ldr	r3, [r7]
	str	r0, [sp, #12]
	add	r4, r3, #1
	and	r4, r4, #31
	cmp	r3, r4
	moveq	r5, #0
	beq	.L6884
	movw	r8, #:lower16:.LC21
	mov	r5, #0
	movt	r8, #:upper16:.LC21
	sub	r9, r7, #4096
.L6883:
	add	r10, r9, r4, lsl #7
	mov	r1, #128
	mov	r0, r10
	bl	strnlen
	cmp	r0, #0
	rsb	r1, r5, #4096
	mov	r3, r10
	mov	r2, r8
	add	ip, r4, #1
	add	r0, r6, r5
	beq	.L6885
	bl	scnprintf
	ldr	r3, [r7]
	add	r4, r4, #1
	add	r5, r5, r0
	and	r4, r4, #31
	cmp	r3, r4
	bne	.L6883
.L6884:
	ldr	r0, .L6894+4
	ldr	r1, [sp, #12]
	bl	_raw_read_unlock_irqrestore
	mov	r2, fp
	mov	r3, r6
	str	r5, [sp]
	ldrd	r0, [sp, #16]
	bl	simple_read_from_buffer
	mov	r4, r0
	mov	r0, r6
	bl	kfree
.L6880:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6889:
	mov	r6, #16
	b	.L6882
.L6885:
	ldr	r3, [r7]
	and	r4, ip, #31
	cmp	r4, r3
	bne	.L6883
	b	.L6884
.L6893:
	mvn	r4, #11
	b	.L6880
.L6895:
	.align	2
.L6894:
	.word	dbg_data+4096
	.word	dbg_data+4100
	.fnend
	.size	show_timestamp, .-show_timestamp
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_connect_w, %function
ghsic_data_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r3, r0, #88
	bxeq	lr
	ldr	r2, [r0, #-84]
	cmp	r2, #0
	bxeq	lr
	ldr	r2, [r0, #92]
	tst	r2, #2
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	ldr	r0, .L6914
	str	r6, [sp, #8]
	ldr	r5, .L6914+4
	str	lr, [sp, #12]
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	beq	.L6898
	movw	r1, #:lower16:.LC601
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC601
	sub	r2, r5, #8
	bl	__dynamic_pr_debug
.L6898:
	movw	r0, #:lower16:.LC621
	sub	r1, r5, #8
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC621
	mvn	r3, #18
	ldr	lr, [sp, #12]
	ldr	r2, [r4, #68]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	printk
.L6915:
	.align	2
.L6914:
	.word	.LANCHOR4-1936
	.word	.LANCHOR5-3392
	.fnend
	.size	ghsic_data_connect_w, .-ghsic_data_connect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_connect_w, %function
ghsuart_ctrl_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r3, r0, #36
	bxeq	lr
	ldr	r2, [r0, #52]
	tst	r2, #2
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	ldr	r0, .L6936
	str	lr, [sp, #4]
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L6935
.L6918:
	ldr	r3, [r4, #52]
	tst	r3, #1
	beq	.L6919
	sub	r0, r4, #20
	mov	r1, #900
	bl	wait_for_completion_timeout
	cmp	r0, #0
	bne	.L6919
	movw	r0, #:lower16:.LC622
	ldr	r1, .L6936+4
	movt	r0, #:upper16:.LC622
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk
.L6935:
	movw	r1, #:lower16:.LC601
	ldr	r2, .L6936+4
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC601
	bl	__dynamic_pr_debug
	b	.L6918
.L6919:
	movw	r0, #:lower16:.LC623
	ldr	r1, .L6936+4
	movt	r0, #:upper16:.LC623
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk
.L6937:
	.align	2
.L6936:
	.word	.LANCHOR4-1920
	.word	.LANCHOR5-3376
	.fnend
	.size	ghsuart_ctrl_connect_w, .-ghsuart_ctrl_connect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_connect_w, %function
ghsuart_data_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r3, r0, #112
	bxeq	lr
	ldr	r2, [r0, #-108]
	cmp	r2, #0
	bxeq	lr
	ldr	r2, [r0, #76]
	tst	r2, #2
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	ldr	r0, .L6960
	str	r6, [sp, #8]
	ldr	r5, .L6960+4
	str	lr, [sp, #12]
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L6956
.L6940:
	ldr	r3, [r4, #76]
	tst	r3, #1
	beq	.L6941
	mov	r1, #900
	sub	r0, r4, #84
	bl	wait_for_completion_timeout
	cmp	r0, #0
	bne	.L6941
	movw	r0, #:lower16:.LC622
	sub	r1, r5, #8
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC622
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L6956:
	movw	r1, #:lower16:.LC601
	sub	r2, r5, #8
	movt	r1, #:upper16:.LC601
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L6940
.L6941:
	movw	r0, #:lower16:.LC624
	sub	r1, r5, #8
	ldr	r6, [sp, #8]
	movt	r0, #:upper16:.LC624
	mvn	r3, #18
	ldr	lr, [sp, #12]
	ldr	r2, [r4, #68]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	printk
.L6961:
	.align	2
.L6960:
	.word	.LANCHOR4-1888
	.word	.LANCHOR5-3344
	.fnend
	.size	ghsuart_data_connect_w, .-ghsuart_data_connect_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	str_to_xport, %function
str_to_xport:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movw	r0, #:lower16:.LC625
	mov	r1, r4
	movt	r0, #:upper16:.LC625
	str	lr, [sp, #4]
	mov	r2, #12
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #1
	beq	.L6962
	movw	r0, #:lower16:.LC626
	mov	r2, #12
	movt	r0, #:upper16:.LC626
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #2
	beq	.L6962
	movw	r0, #:lower16:.LC627
	mov	r2, #12
	movt	r0, #:upper16:.LC627
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #3
	beq	.L6962
	movw	r0, #:lower16:.LC628
	mov	r2, #12
	movt	r0, #:upper16:.LC628
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #4
	beq	.L6962
	movw	r0, #:lower16:.LC629
	mov	r2, #12
	movt	r0, #:upper16:.LC629
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #5
	beq	.L6962
	movw	r0, #:lower16:.LC630
	mov	r2, #12
	movt	r0, #:upper16:.LC630
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #6
	beq	.L6962
	movw	r0, #:lower16:.LC631
	mov	r2, #12
	movt	r0, #:upper16:.LC631
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #7
	beq	.L6962
	movw	r0, #:lower16:.LC632
	mov	r2, #12
	movt	r0, #:upper16:.LC632
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #8
	beq	.L6962
	movw	r0, #:lower16:.LC633
	mov	r2, #12
	movt	r0, #:upper16:.LC633
	mov	r1, r4
	bl	strncasecmp
	cmp	r0, #0
	moveq	r0, #9
	beq	.L6962
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #0
	movne	r0, #0
	moveq	r0, #10
.L6962:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	str_to_xport, .-str_to_xport
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_io, %function
ffs_epfile_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	subs	r8, r3, #0
	strd	r10, [sp, #24]
	mov	fp, r0
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #52
	sub	sp, sp, #52
	str	r1, [sp, #20]
	ldr	r3, [r4, #36]
	strd	r2, [sp, #12]
	beq	.L6976
	sub	r3, r2, #1
	ldr	r0, .L7039
	mvn	r3, r3, lsr #10
	mvn	r3, r3, lsl #10
	add	r3, r3, #1
	mov	ip, r3
	str	r3, [sp, #8]
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7029
.L6978:
	ldr	r6, [r4, #32]
	cmp	r6, #0
	bne	.L7005
	ldr	r3, [r4, #36]
	ldr	r3, [r3, #92]
	cmp	r3, #2
	bne	.L6980
	mov	r3, sp
	bic	r9, r3, #8128
	bic	r9, r9, #63
.L6981:
	ldr	r7, [r4, #40]
	cmp	r7, #0
	beq	.L7030
.L7003:
	ldrb	r5, [r4, #53]	@ zero_extendqisi2
	and	r10, r8, #1
	clz	r5, r5
	lsr	r5, r5, #5
	cmp	r10, r5
	eor	r3, r10, r5
	beq	.L6986
	ldrb	r2, [r4, #54]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L7010
.L6986:
	cmp	r6, #0
	eoreq	r3, r3, #1
	movne	r3, #0
	cmp	r3, #0
	beq	.L6987
	movw	r1, #32976
	ldr	r0, [sp, #8]
	bl	__kmalloc
	subs	r6, r0, #0
	beq	.L7011
	cmp	r8, #0
	beq	.L7031
.L6987:
	ldr	r3, [fp, #32]
	mov	r0, r4
	tst	r3, #2048
	beq	.L6988
	bl	mutex_trylock
	cmp	r0, #0
	beq	.L7013
.L6991:
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #40]
	cmp	r3, r7
	bne	.L7032
	cmp	r10, r5
	bne	.L7033
	ldr	r9, [r7, #4]
	movw	r3, #:lower16:ffs_epfile_io_complete
	cmp	r8, #0
	movt	r3, #:upper16:ffs_epfile_io_complete
	ldr	r2, [sp, #8]
	ldr	r10, [sp, #16]
	str	r6, [r9]
	mov	r1, r9
	str	r3, [r9, #28]
	movne	r3, #0
	str	r2, [r9, #4]
	mov	r2, #32
	streq	r8, [r10, #52]!
	strne	r3, [r10, #68]!
	str	r10, [r9, #32]
	ldr	r0, [r7]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r8, r0
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
	cmp	r8, #0
	blt	.L7014
	mov	r0, r10
	bl	wait_for_completion_interruptible
	cmp	r0, #0
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bne	.L7034
	bl	_raw_spin_lock_irq
	ldr	r0, [r4, #36]
	ldr	r3, [r4, #40]
	cmp	r3, r7
	beq	.L7035
	mvn	r3, #18
	add	r0, r0, #24
	mov	r7, r3
	bl	_raw_spin_unlock_irq
.L6994:
	mov	r0, r4
	bl	mutex_unlock
	b	.L6982
.L6976:
	ldr	r0, .L7039
	mov	ip, r2
	str	r2, [sp, #8]
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L6978
.L7029:
	movw	r1, #:lower16:.LC634
	ldr	r2, .L7039+4
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC634
	str	ip, [sp]
	ldr	r3, [sp, #12]
	str	r8, [sp, #4]
	bl	__dynamic_pr_debug
	b	.L6978
.L6988:
	bl	mutex_lock_interruptible
	cmp	r0, #0
	beq	.L6991
	mov	r7, r0
.L6982:
	mov	r0, r6
	bl	kfree
.L6975:
	mov	r0, r7
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7030:
	ldr	r3, [fp, #32]
	tst	r3, #2048
	bne	.L7013
	cmp	r8, #0
	beq	.L7009
	ldr	r3, [r4, #32]
	cmp	r3, #0
	bne	.L7009
	ldr	r0, [r9, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #40
	movt	r2, #:upper16:autoremove_wake_function
	add	r5, r4, #20
	str	r3, [sp, #28]
	str	r1, [sp, #40]
	str	r0, [sp, #32]
	str	r2, [sp, #36]
	str	r1, [sp, #44]
.L6985:
	mov	r2, #1
	add	r1, sp, #28
	mov	r0, r5
	bl	prepare_to_wait
	ldr	r7, [r4, #40]
	cmp	r7, #0
	bne	.L6983
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L7036
	mov	r3, #65024
	add	r1, sp, #28
	mov	r4, r3
	mov	r0, r5
	bl	finish_wait
	mov	r3, r4
	movt	r3, 65535
	mov	r7, r3
	b	.L6982
.L7035:
	ldr	r2, [r7, #24]
	add	r0, r0, #24
	mov	r7, r2
	cmp	r7, #0
	movle	r5, #0
	andgt	r5, r5, #1
	bl	_raw_spin_unlock_irq
	cmp	r5, #0
	mov	r2, r7
	beq	.L6994
	ldr	r3, [sp, #12]
	cmp	r7, r3
	mvnhi	r3, #74
	movhi	r7, r3
	bhi	.L6994
	mov	r3, sp
	mov	r1, r2
	ldr	r0, [sp, #20]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r2, r0, r1; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L7000
.L7001:
	mvn	r3, #13
	mov	r7, r3
	b	.L6994
.L7031:
	ldr	r2, [sp, #12]
	ldr	r1, [sp, #20]
	bl	__copy_from_user
	cmp	r0, #0
	beq	.L6987
	mvn	r3, #13
	mov	r7, r3
	b	.L6982
.L7009:
	mvn	r3, #18
	mov	r7, r3
	b	.L6982
.L6983:
	add	r1, sp, #28
	mov	r0, r5
	bl	finish_wait
	b	.L7003
.L7000:
	mov	r2, r7
	mov	r1, r6
	bl	__copy_to_user
	cmp	r0, #0
	beq	.L6994
	b	.L7001
.L7032:
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
	mov	r0, r4
	bl	mutex_unlock
	ldr	r3, [r4, #36]
	ldr	r3, [r3, #92]
	cmp	r3, #2
	beq	.L6981
.L6980:
	movw	r0, #:lower16:.LC33
	mvn	r3, #18
	movw	r1, #785
	movt	r0, #:upper16:.LC33
	mov	r7, r3
	bl	warn_slowpath_null
	b	.L6982
.L7011:
	mvn	r3, #11
	mov	r7, r3
	b	.L6975
.L7014:
	mvn	r3, #4
	mov	r7, r3
	b	.L6994
.L7033:
	ldr	r0, [r7]
	cmp	r0, #0
	beq	.L7037
	ldr	r3, [r0, #8]
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
.L7002:
	ldr	r0, [r4, #36]
	mvn	r3, #73
	mov	r7, r3
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
	b	.L6994
.L7034:
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #40]
	cmp	r3, r7
	beq	.L7038
.L6998:
	ldr	r0, [r4, #36]
	mvn	r3, #3
	mov	r7, r3
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq
	b	.L6994
.L7038:
	ldr	r0, [r7]
	mov	r1, r9
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L6998
.L7013:
	mvn	r3, #10
	mov	r7, r3
	b	.L6982
.L7036:
	bl	schedule
	b	.L6985
.L7005:
	mvn	r3, #18
	mov	r7, r3
	b	.L6975
.L7010:
	mvn	r3, #21
	mov	r7, r3
	b	.L6982
.L7037:
	movw	r0, #:lower16:.LC33
	mov	r1, #860
	movt	r0, #:upper16:.LC33
	bl	warn_slowpath_null
	b	.L7002
.L7040:
	.align	2
.L7039:
	.word	.LANCHOR4-1872
	.word	.LANCHOR5-3328
	.fnend
	.size	ffs_epfile_io, .-ffs_epfile_io
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_write, %function
ffs_epfile_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #0
	b	ffs_epfile_io
	.fnend
	.size	ffs_epfile_write, .-ffs_epfile_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_read, %function
ffs_epfile_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #1
	b	ffs_epfile_io
	.fnend
	.size	ffs_epfile_read, .-ffs_epfile_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_resume, %function
frmnet_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r4, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	ldr	r6, .L7065
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #16]
	ldrb	ip, [r0, #116]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ldrh	r2, [r6, #-14]
	add	r3, ip, ip, lsl #1
	add	r3, r4, r3, lsl #3
	tst	r2, #4
	ldr	r5, [r3, #3240]
	bne	.L7062
.L7044:
	cmp	r5, #10
	bhi	.L7046
	mov	r3, #1
	lsl	r3, r3, r5
	tst	r3, #1824
	bne	.L7043
	tst	r3, #192
	beq	.L7046
	sub	r5, r5, #6
	cmp	r5, #1
	bhi	.L7043
	ldr	r3, .L7065+4
	add	ip, ip, ip, lsl #1
	add	ip, r4, ip, lsl #3
	ldrh	r2, [r3, #-6]
	ldrb	r3, [ip, #3248]	@ zero_extendqisi2
	tst	r2, #4
	add	r2, r4, r3, lsl #2
	ldr	r5, [r2, #3860]
	bne	.L7063
.L7048:
	ldr	r0, [r4, #3652]
	add	r1, r5, #332
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	queue_work
.L7043:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L7062:
	sub	r2, r5, #1
	mov	r7, r0
	cmp	r2, #9
	movwhi	r3, #:lower16:.LC186
	movthi	r3, #:upper16:.LC186
	bhi	.L7045
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r3, r3, r2, lsl #2
	ldr	r3, [r3, #1268]
.L7045:
	movw	r1, #:lower16:.LC635
	ldr	r2, .L7065+8
	stm	sp, {r7, ip}
	movt	r1, #:upper16:.LC635
	ldr	r0, .L7065+12
	bl	__dynamic_pr_debug
	ldrb	ip, [r7, #116]	@ zero_extendqisi2
	b	.L7044
.L7063:
	movw	r1, #:lower16:.LC636
	ldr	r2, .L7065+16
	sub	r0, r6, #8
	movt	r1, #:upper16:.LC636
	bl	__dynamic_pr_debug
	b	.L7048
.L7046:
	sub	r5, r5, #1
	cmp	r5, #9
	bls	.L7064
	movw	r2, #:lower16:.LC186
	movt	r2, #:upper16:.LC186
.L7049:
	ldr	r1, .L7065+8
	movw	r0, #:lower16:.LC637
	movt	r0, #:upper16:.LC637
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	printk
.L7064:
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r5, r3, r5, lsl #2
	ldr	r2, [r5, #1268]
	b	.L7049
.L7066:
	.align	2
.L7065:
	.word	.LANCHOR4-1840
	.word	.LANCHOR4-1824
	.word	.LANCHOR5-3312
	.word	.LANCHOR4-1872
	.word	.LANCHOR5-3296
	.fnend
	.size	frmnet_resume, .-frmnet_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_add_header, %function
rndis_add_header:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r4, [r0, #124]	@ zero_extendqisi2
	cmp	r4, #0
	beq	.L7068
	ldr	r4, [r0, #144]
	cmp	r4, #0
	beq	.L7069
	mov	r1, #44
	mov	r0, r4
	bl	__memzero
	mov	r3, #0
	mov	r2, #1
	ldr	r0, .L7080
	mov	r1, #36
	strb	r2, [r4]
	strb	r3, [r4, #1]
	strb	r3, [r4, #2]
	strb	r3, [r4, #3]
	ldr	r2, [r5, #80]
	strb	r1, [r4, #8]
	strb	r3, [r4, #9]
	strb	r3, [r4, #10]
	add	r2, r2, #44
	str	r2, [r4, #4]	@ unaligned
	strb	r3, [r4, #11]
	ldr	r3, [r5, #80]
	str	r3, [r4, #12]	@ unaligned
	ldrh	r1, [r0, #-14]
	tst	r1, #4
	bne	.L7079
.L7070:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7068:
	mov	r1, #44
	mov	r0, r5
	bl	skb_realloc_headroom
	subs	r7, r0, #0
	beq	.L7071
	mov	r1, #44
	bl	skb_push
	mov	r1, #44
	mov	r6, r0
	bl	__memzero
	mov	r3, #1
	mov	r2, #36
	strb	r3, [r6]
	strb	r4, [r6, #1]
	strb	r4, [r6, #2]
	strb	r4, [r6, #3]
	ldr	r3, [r7, #80]
	str	r3, [r6, #4]	@ unaligned
	strb	r2, [r6, #8]
	strb	r4, [r6, #9]
	strb	r4, [r6, #10]
	strb	r4, [r6, #11]
	ldr	r3, [r7, #80]
	sub	r3, r3, #44
	str	r3, [r6, #12]	@ unaligned
.L7071:
	mov	r0, r5
	mov	r5, r7
	bl	dev_kfree_skb_any
	b	.L7070
.L7079:
	movw	r1, #:lower16:.LC638
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC638
	bl	__dynamic_pr_debug
	b	.L7070
.L7069:
	movw	r0, #:lower16:.LC639
	mov	r5, r4
	movt	r0, #:upper16:.LC639
	bl	printk
	b	.L7070
.L7081:
	.align	2
.L7080:
	.word	.LANCHOR4-1792
	.fnend
	.size	rndis_add_header, .-rndis_add_header
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_init.part.89, %function
rndis_init.part.89:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movw	r1, #:lower16:.LC640
	str	r6, [sp, #8]
	movw	r6, #:lower16:__stack_chk_guard
	movt	r4, #:upper16:.LANCHOR1
	movt	r6, #:upper16:__stack_chk_guard
	str	lr, [sp, #12]
	.pad #32
	sub	sp, sp, #32
	ldr	r3, [r6]
	movt	r1, #:upper16:.LC640
	mov	r2, #0
	add	r5, r4, #3872
	add	r0, sp, #8
	str	r3, [sp, #28]
	bl	sprintf
	add	r0, sp, #8
	ldr	r3, .L7098
	mov	r2, #0
	mov	r1, #432
	str	r5, [sp]
	bl	proc_create_data
	cmp	r0, #0
	bne	.L7083
	ldr	r0, .L7098+4
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7095
.L7084:
	ldr	r0, .L7098+8
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7096
.L7085:
	mvn	r0, #4
	b	.L7082
.L7083:
	mov	r2, #0
	mov	r3, r5
	mov	r1, #1
	mov	r0, r2
	strh	r2, [r3], #52	@ movhi
	str	r2, [r4, #3876]
	str	r1, [r4, #3888]
	str	r3, [r4, #3924]
	str	r3, [r4, #3928]
	strb	r1, [r4, #3932]
.L7082:
	ldr	r2, [sp, #28]
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L7097
	add	sp, sp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7095:
	movw	r1, #:lower16:.LC641
	ldr	r2, .L7098+12
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC641
	bl	__dynamic_pr_debug
	b	.L7084
.L7096:
	movw	r1, #:lower16:.LC642
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC642
	bl	__dynamic_pr_debug
	b	.L7085
.L7097:
	bl	__stack_chk_fail
.L7099:
	.align	2
.L7098:
	.word	.LANCHOR5-3284
	.word	.LANCHOR4-1776
	.word	.LANCHOR4-1744
	.word	.LANCHOR5-3176
	.fnend
	.size	rndis_init.part.89, .-rndis_init.part.89
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_bind_config, %function
android_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	movt	r1, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r1, #3232]!
	ldr	r0, [r0, #24]
	cmp	r3, r1
	beq	.L7101
	sub	r2, r3, #512
	ldr	r3, [r3, #-504]
	cmp	r0, r3
	bne	.L7102
	b	.L7101
.L7103:
	ldr	r3, [r3, #-504]
	cmp	r0, r3
	beq	.L7101
.L7102:
	ldr	r3, [r2, #512]
	cmp	r3, r1
	sub	r2, r3, #512
	bne	.L7103
.L7101:
	mov	r6, r5
	ldr	r4, [r6, #112]!
	cmp	r6, r4
	sub	r4, r4, #4
	beq	.L7104
.L7110:
	ldr	r3, [r4]
	mov	r1, r5
	mov	r0, r3
	ldr	r3, [r3, #40]
	blx	r3
	subs	r7, r0, #0
	bne	.L7118
	ldr	r4, [r4, #4]
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L7110
.L7104:
	mov	r7, #0
.L7100:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7118:
	ldr	r2, .L7120
	movw	r0, #:lower16:.LC643
	add	r6, r5, #36
	ldr	r3, [r4]
	movt	r0, #:upper16:.LC643
	mov	r1, r2
	ldr	r3, [r3]
	bl	printk
.L7107:
	ldr	r4, [r5, #36]
	cmp	r4, r6
	beq	.L7119
	mov	r0, r4
	sub	r8, r4, #72
	bl	list_del
	ldr	r3, [r4, #-36]
	cmp	r3, #0
	beq	.L7107
	mov	r1, r8
	mov	r0, r5
	blx	r3
	b	.L7107
.L7119:
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L7100
	mov	r0, r5
	blx	r3
	b	.L7100
.L7121:
	.align	2
.L7120:
	.word	.LANCHOR5-3164
	.fnend
	.size	android_bind_config, .-android_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_in_max_packet_size_store, %function
conn_gadget_in_max_packet_size_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r3
	bx	lr
	.fnend
	.size	conn_gadget_in_max_packet_size_store, .-conn_gadget_in_max_packet_size_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	_snd_pcm_hw_param_set.constprop.102, %function
_snd_pcm_hw_param_set.constprop.102:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	add	r0, r0, #4
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L7147
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L7126
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L7125
.L7126:
	lsr	r6, r1, #5
	and	r3, r1, #31
	mov	r5, #1
	add	r6, r4, r6, lsl #2
	mov	r1, #32
	ldr	r7, [r6, #4]
	and	r7, r7, r5, lsl r3
	bl	__memzero
	str	r7, [r6, #4]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L7133
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L7129
.L7133:
	mov	r0, r5
	b	.L7128
.L7147:
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L7125
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L7126
.L7125:
	lsr	r5, r1, #5
	and	r3, r1, #31
	mov	r2, #1
	add	r5, r4, r5, lsl #2
	mov	r1, #32
	ldr	r6, [r5, #4]
	and	r6, r6, r2, lsl r3
	bl	__memzero
	str	r6, [r5, #4]
	ldr	r0, [r4, #4]
	cmp	r0, #0
	bne	.L7148
	ldr	r3, [r4, #8]
	cmp	r3, #0
	bne	.L7123
.L7129:
	mvn	r0, #21
.L7128:
	ldr	r2, [r4, #512]
	ldr	r3, [r4, #516]
	orr	r2, r2, #1
	orr	r3, r3, #1
	str	r2, [r4, #512]
	str	r3, [r4, #516]
.L7123:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7148:
	mov	r0, #0
	b	.L7123
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.102, .-_snd_pcm_hw_param_set.constprop.102
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	_snd_pcm_hw_param_set.constprop.103, %function
_snd_pcm_hw_param_set.constprop.103:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	add	r0, r0, #36
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L7173
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L7152
	ldr	r3, [r4, #40]
	cmp	r3, #0
	beq	.L7151
.L7152:
	lsr	r6, r1, #5
	and	r3, r1, #31
	mov	r5, #1
	add	r6, r4, r6, lsl #2
	mov	r1, #32
	ldr	r7, [r6, #36]
	and	r7, r7, r5, lsl r3
	bl	__memzero
	str	r7, [r6, #36]
	ldr	r3, [r4, #36]
	cmp	r3, #0
	bne	.L7159
	ldr	r3, [r4, #40]
	cmp	r3, #0
	beq	.L7155
.L7159:
	mov	r0, r5
	b	.L7154
.L7173:
	ldr	r3, [r4, #40]
	cmp	r3, #0
	beq	.L7151
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L7152
.L7151:
	lsr	r5, r1, #5
	and	r3, r1, #31
	mov	r2, #1
	add	r5, r4, r5, lsl #2
	mov	r1, #32
	ldr	r6, [r5, #36]
	and	r6, r6, r2, lsl r3
	bl	__memzero
	str	r6, [r5, #36]
	ldr	r0, [r4, #36]
	cmp	r0, #0
	bne	.L7174
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L7149
.L7155:
	mvn	r0, #21
.L7154:
	ldr	r2, [r4, #512]
	ldr	r3, [r4, #516]
	orr	r2, r2, #2
	orr	r3, r3, #2
	str	r2, [r4, #512]
	str	r3, [r4, #516]
.L7149:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7174:
	mov	r0, #0
	b	.L7149
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.103, .-_snd_pcm_hw_param_set.constprop.103
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	_snd_pcm_hw_param_set.constprop.104, %function
_snd_pcm_hw_param_set.constprop.104:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, r1
	mov	r4, r0
	str	lr, [sp, #4]
	.pad #16
	sub	sp, sp, #16
	add	r0, r0, #284
	ldrb	r3, [sp, #12]	@ zero_extendqisi2
	add	r1, sp, #4
	str	r2, [sp, #4]
	str	r2, [sp, #8]
	bic	r3, r3, #15
	orr	r3, r3, #4
	strb	r3, [sp, #12]
	bl	snd_interval_refine
	cmp	r0, #0
	beq	.L7175
	ldr	r2, [r4, #512]
	ldr	r3, [r4, #516]
	orr	r2, r2, #1024
	orr	r3, r3, #1024
	str	r2, [r4, #512]
	str	r3, [r4, #516]
.L7175:
	add	sp, sp, #16
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.104, .-_snd_pcm_hw_param_set.constprop.104
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	_snd_pcm_hw_param_set.constprop.105, %function
_snd_pcm_hw_param_set.constprop.105:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, r1
	mov	r4, r0
	str	lr, [sp, #4]
	.pad #16
	sub	sp, sp, #16
	add	r0, r0, #296
	ldrb	r3, [sp, #12]	@ zero_extendqisi2
	add	r1, sp, #4
	str	r2, [sp, #4]
	str	r2, [sp, #8]
	bic	r3, r3, #15
	orr	r3, r3, #4
	strb	r3, [sp, #12]
	bl	snd_interval_refine
	cmp	r0, #0
	beq	.L7181
	ldr	r2, [r4, #512]
	ldr	r3, [r4, #516]
	orr	r2, r2, #2048
	orr	r3, r3, #2048
	str	r2, [r4, #512]
	str	r3, [r4, #516]
.L7181:
	add	sp, sp, #16
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.105, .-_snd_pcm_hw_param_set.constprop.105
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_function_init, %function
mbim_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	movw	r0, #:lower16:.LC644
	ldr	r6, .L7196
	mov	r2, #1
	movt	r0, #:upper16:.LC644
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	mov	r1, r6
	add	r7, r6, #12
	bl	printk
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L7194
	mov	r2, #236
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	bne	.L7188
	movw	r0, #:lower16:.LC645
	mov	r1, r6
	movt	r0, #:upper16:.LC645
	mvn	r8, #11
	bl	printk
	b	.L7189
.L7194:
	mov	r4, #16
.L7188:
	mov	r6, #0
	add	ip, r4, #208
	ldr	r2, .L7196+4
	add	r3, r4, #216
	movw	r1, #:lower16:.LC396
	str	r4, [r5, #3732]
	movt	r1, #:upper16:.LC396
	add	r0, r4, #108
	strb	r6, [r4, #136]
	str	r6, [r4, #204]
	str	ip, [r4, #208]
	str	ip, [r4, #212]
	str	r3, [r4, #216]
	str	r3, [r4, #220]
	str	r6, [r5, #3736]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC397
	ldr	r2, .L7196+4
	add	r0, r4, #120
	movt	r1, #:upper16:.LC397
	bl	__init_waitqueue_head
	ldr	r3, [r5, #3740]
	str	r6, [r4, #92]
	ldr	r0, .L7196+8
	str	r6, [r4, #96]
	str	r6, [r4, #100]
	str	r6, [r4, #104]
	add	r3, r3, #1
	str	r4, [r5, #2504]
	str	r3, [r5, #3740]
	bl	misc_register
	subs	r8, r0, #0
	beq	.L7190
	movw	r0, #:lower16:.LC646
	sub	r1, r7, #12
	movt	r0, #:upper16:.LC646
	bl	printk
	b	.L7189
.L7190:
	movw	r0, #:lower16:.LC647
	sub	r1, r7, #12
	ldr	r2, [r5, #3740]
	movt	r0, #:upper16:.LC647
	bl	printk
	b	.L7187
.L7189:
	ldr	r6, .L7196+12
	movw	r0, #:lower16:.LC648
	mov	r4, #0
	sub	r1, r7, #12
	movt	r0, #:upper16:.LC648
	mov	r7, r4
	bl	printk
.L7192:
	ldr	r3, [r5, #3740]
	add	r6, r6, #8
	cmp	r4, r3
	bcs	.L7187
	ldr	r0, [r6, #-8]
	add	r4, r4, #1
	bl	kfree
	str	r7, [r6, #-8]
	b	.L7192
.L7187:
	mov	r0, r8
	pop	{r4, r5, r6, r7, r8, pc}
.L7197:
	.align	2
.L7196:
	.word	.LANCHOR5-3132
	.word	.LANCHOR1+3936
	.word	.LANCHOR0+956
	.word	.LANCHOR1+3732
	.fnend
	.size	mbim_function_init, .-mbim_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_resume, %function
mbim_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC649
	push	{r4, r5, lr}
	.save {r4, r5, lr}
	ldr	r1, .L7204
	.pad #12
	sub	sp, sp, #12
	movt	r0, #:upper16:.LC649
	bl	printk
	ldr	r0, .L7204+4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	mov	r4, r3
	ldr	r5, [r3, #3936]
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L7199
	ldr	r3, .L7204+8
	mov	r2, #0
	movw	r1, #:lower16:.LC650
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC650
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
.L7199:
	ldr	r0, [r4, #3940]
	add	r1, r5, #216
	add	sp, sp, #12
	@ sp needed
	pop	{r4, r5, lr}
	b	queue_work
.L7205:
	.align	2
.L7204:
	.word	.LANCHOR5-3120
	.word	.LANCHOR4-1728
	.word	.LANCHOR5-3108
	.fnend
	.size	mbim_resume, .-mbim_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_suspend, %function
mbim_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC651
	push	{r4, r5, lr}
	.save {r4, r5, lr}
	ldr	r1, .L7212
	.pad #12
	sub	sp, sp, #12
	movt	r0, #:upper16:.LC651
	bl	printk
	ldr	r0, .L7212+4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	mov	r4, r3
	ldr	r5, [r3, #3936]
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L7207
	ldr	r3, .L7212+8
	mov	r2, #0
	movw	r1, #:lower16:.LC652
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC652
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
.L7207:
	ldr	r0, [r4, #3940]
	add	r1, r5, #200
	add	sp, sp, #12
	@ sp needed
	pop	{r4, r5, lr}
	b	queue_work
.L7213:
	.align	2
.L7212:
	.word	.LANCHOR5-3092
	.word	.LANCHOR4-1696
	.word	.LANCHOR5-3076
	.fnend
	.size	mbim_suspend, .-mbim_suspend
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_connect.constprop.111, %function
bam_data_connect.constprop.111:
	.fnstart
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L7231
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r8, r3
	mov	r9, r2
	str	r10, [sp, #24]
	ldrh	r3, [ip, #-6]
	str	lr, [sp, #28]
	.pad #8
	sub	sp, sp, #8
	tst	r3, #4
	bne	.L7226
.L7215:
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r3, [r6, #3944]
	cmp	r3, #0
	ble	.L7227
	cmp	r5, #0
	beq	.L7228
	ldr	r3, [r5, #8]
	ldr	r4, [r6, #3936]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r10, r0, #0
	bne	.L7229
	ldr	r3, [r5, #8]
	str	r4, [r3]
	ldr	r3, [r5, #12]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r10, r0, #0
	bne	.L7230
	ldr	r3, [r5, #12]
	cmp	r7, #7
	str	r4, [r3]
	ldr	r3, [sp, #40]
	str	r5, [r4, #4]
	strb	r9, [r4, #52]
	strb	r8, [r4, #53]
	str	r3, [r4, #56]
	str	r7, [r4, #60]
	bne	.L7221
	add	r2, r4, #44
	add	r3, r4, #48
	strb	r9, [r4, #64]
	strb	r8, [r4, #65]
	strd	r2, [r4, #68]
.L7221:
	add	r1, r4, #168
	ldr	r0, [r6, #3940]
	bl	queue_work
.L7214:
	mov	r0, r10
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7226:
	mov	r3, #0
	movw	r1, #:lower16:.LC156
	ldr	r2, .L7231+4
	sub	r0, ip, #24
	movt	r1, #:upper16:.LC156
	str	r3, [sp]
	mov	r3, r5
	bl	__dynamic_pr_debug
	b	.L7215
.L7228:
	movw	r0, #:lower16:.LC653
	ldr	r1, .L7231+4
	mvn	r10, #18
	movt	r0, #:upper16:.LC653
	bl	printk
	b	.L7214
.L7230:
	movw	r0, #:lower16:.LC389
	ldr	r1, .L7231+4
	movt	r0, #:upper16:.LC389
	ldr	r2, [r5, #12]
	bl	printk
	ldr	r3, [r5, #8]
	mov	r2, #0
	str	r2, [r3]
	b	.L7214
.L7227:
	movw	r0, #:lower16:.LC176
	mov	r2, #0
	ldr	r1, .L7231+4
	movt	r0, #:upper16:.LC176
	mvn	r10, #18
	bl	printk
	b	.L7214
.L7229:
	movw	r0, #:lower16:.LC388
	ldr	r1, .L7231+4
	movt	r0, #:upper16:.LC388
	ldr	r2, [r5, #8]
	bl	printk
	b	.L7214
.L7232:
	.align	2
.L7231:
	.word	.LANCHOR4-1680
	.word	.LANCHOR5-3056
	.fnend
	.size	bam_data_connect.constprop.111, .-bam_data_connect.constprop.111
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_disconnect.constprop.113, %function
bam_data_disconnect.constprop.113:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L7259
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r0
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L7254
.L7234:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #3944]
	cmp	r3, #0
	ble	.L7255
	cmp	r5, #0
	beq	.L7256
	ldr	r5, [r4, #3936]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L7237
	ldr	r2, [r3, #8]
	cmp	r2, #0
	beq	.L7237
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L7237
	ldr	r0, [r3, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #4]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r5, #4]
	mov	r3, #0
	ldr	r2, [r2, #8]
	str	r3, [r2]
	ldr	r2, [r5, #4]
	ldr	r2, [r2, #12]
	str	r3, [r2]
	str	r3, [r5, #4]
.L7237:
	ldr	r3, [r5, #60]
	cmp	r3, #7
	beq	.L7257
	mov	r0, #0
	bl	usb_bam_client_ready
	cmp	r0, #0
	bne	.L7258
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L7257:
	ldr	r0, [r4, #3940]
	add	r1, r5, #184
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work
.L7254:
	mov	ip, #0
	movw	r1, #:lower16:.LC156
	ldr	r2, .L7259+4
	sub	r0, r3, #32
	movt	r1, #:upper16:.LC156
	mov	r3, r5
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L7234
.L7258:
	ldr	r2, .L7259+4
	movw	r0, #:lower16:.LC655
	movt	r0, #:upper16:.LC655
	mov	r1, r2
.L7253:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	printk
.L7255:
	movw	r0, #:lower16:.LC654
	mov	r2, #0
	ldr	r1, .L7259+4
	movt	r0, #:upper16:.LC654
	b	.L7253
.L7256:
	ldr	r1, .L7259+4
	movw	r0, #:lower16:.LC653
	movt	r0, #:upper16:.LC653
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	printk
.L7260:
	.align	2
.L7259:
	.word	.LANCHOR4-1648
	.word	.LANCHOR5-3036
	.fnend
	.size	bam_data_disconnect.constprop.113, .-bam_data_disconnect.constprop.113
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gen_ndis_query_resp.constprop.117, %function
gen_ndis_query_resp.constprop.117:
	.fnstart
	@ args = 0, pretend = 0, frame = 184
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r6, [sp, #8]
	subs	r7, r1, #0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #188
	sub	sp, sp, #188
	beq	.L7329
	ldr	r5, [r7, #8]
	cmp	r5, #0
	beq	.L7329
	mov	r3, #16
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	mov	r4, r0
	mov	r1, sp
	str	r3, [r5, #20]
	ldr	r0, [r6, #3900]
	bl	dev_get_stats
	movw	r3, #278
	add	r9, r5, #24
	movt	r3, 1
	mov	r8, r0
	cmp	r4, r3
	beq	.L7263
	bhi	.L7264
	movw	r3, #266
	movt	r3, 1
	cmp	r4, r3
	beq	.L7265
	bls	.L7438
	movw	r3, #270
	movt	r3, 1
	cmp	r4, r3
	beq	.L7275
	bhi	.L7276
	mov	r3, #268
	movt	r3, 1
	cmp	r4, r3
	beq	.L7277
	bhi	.L7278
	ldr	r0, .L7457
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7439
.L7305:
	ldr	r3, [r6, #3900]
	cmp	r3, #0
	beq	.L7309
	ldr	r2, [r3, #356]
	mov	r0, #0
	mov	r4, #4
	mov	r3, #28
	str	r2, [r5, #24]
	b	.L7301
.L7264:
	movw	r3, #257
	movt	r3, 257
	cmp	r4, r3
	beq	.L7283
	bls	.L7440
	movw	r3, #261
	movt	r3, 257
	cmp	r4, r3
	beq	.L7292
	bhi	.L7293
	movw	r3, #259
	movt	r3, 257
	cmp	r4, r3
	beq	.L7294
	bhi	.L7295
	ldr	r0, .L7457+4
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7441
.L7321:
	ldr	r3, [r6, #3900]
	cmp	r3, #0
	beq	.L7309
	ldr	r2, [r6, #3892]
	mov	r3, #30
	mov	r0, #0
	mov	r4, #6
	ldr	r1, [r2]	@ unaligned
	str	r1, [r5, #24]	@ unaligned
	ldrh	r2, [r2, #4]	@ unaligned
	strh	r2, [r9, #4]	@ unaligned
	b	.L7301
.L7293:
	movw	r3, #258
	movt	r3, 258
	cmp	r4, r3
	beq	.L7297
	movw	r3, #259
	movt	r3, 258
	cmp	r4, r3
	bne	.L7442
	ldr	r0, .L7457+8
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L7327
	movw	r1, #:lower16:.LC678
	sub	r0, r0, #24
	ldr	r2, .L7457+12
	movt	r1, #:upper16:.LC678
	bl	__dynamic_pr_debug
.L7327:
	mov	r2, #0
	mov	r3, #28
	mov	r0, r2
	mov	r4, #4
	str	r2, [r5, #24]
.L7301:
	str	r4, [r5, #16]
	str	r3, [r7, #12]
	str	r3, [r5, #4]
.L7261:
	add	sp, sp, #188
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L7442:
	movw	r3, #257
	movt	r3, 258
	cmp	r4, r3
	bne	.L7271
	ldr	r0, .L7457+16
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7443
.L7325:
	cmp	r8, #0
	beq	.L7309
	ldr	r2, [r8, #104]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7301
.L7276:
	movw	r3, #275
	movt	r3, 1
	cmp	r4, r3
	beq	.L7280
	mov	r3, #276
	movt	r3, 1
	cmp	r4, r3
	beq	.L7281
	movw	r3, #273
	movt	r3, 1
	cmp	r4, r3
	bne	.L7271
	ldr	r0, .L7457+20
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7444
.L7316:
	movw	r2, #1558
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7301
.L7438:
	movw	r3, #259
	movt	r3, 1
	cmp	r4, r3
	beq	.L7267
	bls	.L7445
	movw	r3, #262
	movt	r3, 1
	cmp	r4, r3
	beq	.L7272
	movw	r3, #263
	movt	r3, 1
	cmp	r4, r3
	bne	.L7446
	ldr	r3, [r6, #3888]
	cmp	r3, #1
	beq	.L7327
	ldr	r2, [r6, #3884]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7301
.L7446:
	mov	r3, #260
	movt	r3, 1
	cmp	r4, r3
	bne	.L7271
	ldr	r0, .L7457+24
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7447
.L7304:
	ldr	r2, [r6, #3880]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7301
.L7445:
	movw	r3, #257
	movt	r3, 1
	cmp	r4, r3
	beq	.L7269
	movw	r3, #258
	movt	r3, 1
	cmp	r4, r3
	bne	.L7271
	ldr	r0, .L7457+28
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L7327
	movw	r1, #:lower16:.LC657
	ldr	r2, .L7457+12
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC657
	bl	__dynamic_pr_debug
	b	.L7327
.L7440:
	movw	r3, #258
	movt	r3, 2
	cmp	r4, r3
	beq	.L7285
	bls	.L7448
	mov	r3, #260
	movt	r3, 2
	cmp	r4, r3
	beq	.L7289
	bcc	.L7290
	movw	r3, #261
	movt	r3, 2
	cmp	r4, r3
	bne	.L7271
	ldr	r0, .L7457+32
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7449
.L7319:
	cmp	r8, #0
	beq	.L7309
	ldr	r2, [r8, #48]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7301
.L7448:
	movw	r3, #514
	movt	r3, 1
	cmp	r4, r3
	beq	.L7287
	movw	r3, #257
	movt	r3, 2
	cmp	r4, r3
	bne	.L7271
	cmp	r0, #0
	beq	.L7309
	ldr	r2, [r0, #8]
	mov	r3, #28
	ldr	r1, [r0, #40]
	ldr	ip, [r0, #56]
.L7436:
	add	r1, r1, ip
	mov	r0, #0
	sub	r2, r2, r1
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7301
.L7309:
	movw	r0, #65012
	mov	r3, #24
	movt	r0, 65535
	mov	r4, #0
	b	.L7301
.L7287:
	ldr	r3, .L7457+36
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	beq	.L7327
	movw	r1, #:lower16:.LC668
	ldr	r2, .L7457+12
	movt	r1, #:upper16:.LC668
	ldr	r0, .L7457+40
	bl	__dynamic_pr_debug
	b	.L7327
.L7290:
	cmp	r0, #0
	beq	.L7309
	ldr	r2, [r8, #40]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7301
.L7269:
	ldr	r3, .L7457+44
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L7450
.L7300:
	mov	r0, r9
	mov	r2, #112
	ldr	r1, .L7457+48
	bl	memcpy
	mov	r4, #112
	mov	r3, #136
	mov	r0, #0
	b	.L7301
.L7278:
	ldr	r0, .L7457+52
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7451
.L7312:
	ldr	r6, [r6, #3912]
	subs	r0, r6, #0
	beq	.L7313
	bl	strlen
	mov	r4, r0
	mov	r2, r0
	mov	r1, r6
	mov	r0, r9
	bl	memcpy
	add	r3, r4, #24
	mov	r0, #0
	b	.L7301
.L7295:
	ldr	r0, .L7457+56
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7452
.L7323:
	mov	r2, #1
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7301
.L7281:
	ldr	r2, [r6, #3888]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7301
.L7449:
	movw	r1, #:lower16:.LC670
	ldr	r2, .L7457+12
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC670
	bl	__dynamic_pr_debug
	b	.L7319
.L7292:
	ldr	r0, .L7457+60
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L7327
	movw	r1, #:lower16:.LC675
	ldr	r2, .L7457+12
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC675
	bl	__dynamic_pr_debug
	b	.L7327
.L7283:
	ldr	r0, .L7457+64
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L7321
	movw	r1, #:lower16:.LC671
	ldr	r2, .L7457+12
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC671
	bl	__dynamic_pr_debug
	b	.L7321
.L7267:
	ldr	r0, .L7457+68
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L7304
	movw	r1, #:lower16:.LC658
	ldr	r2, .L7457+12
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC658
	bl	__dynamic_pr_debug
	b	.L7304
.L7277:
	ldr	r3, .L7457+72
	ldrh	r3, [r3, #-14]
	tst	r3, #4
	bne	.L7453
.L7311:
	ldr	r2, [r6, #3904]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7301
.L7265:
	ldr	r0, .L7457+76
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L7305
	movw	r1, #:lower16:.LC661
	ldr	r2, .L7457+12
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC661
	bl	__dynamic_pr_debug
	b	.L7305
.L7297:
	ldr	r3, .L7457+80
	ldrh	r3, [r3, #-14]
	tst	r3, #4
	beq	.L7327
	movw	r1, #:lower16:.LC677
	ldr	r2, .L7457+12
	movt	r1, #:upper16:.LC677
	ldr	r0, .L7457+16
	bl	__dynamic_pr_debug
	b	.L7327
.L7272:
	ldr	r3, .L7457+84
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	beq	.L7305
	movw	r1, #:lower16:.LC660
	ldr	r2, .L7457+12
	movt	r1, #:upper16:.LC660
	ldr	r0, .L7457+88
	bl	__dynamic_pr_debug
	b	.L7305
.L7280:
	ldr	r3, .L7457+92
	ldrh	r3, [r3, #-14]
	tst	r3, #4
	bne	.L7454
.L7318:
	mov	r2, #18
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7301
.L7289:
	cmp	r0, #0
	beq	.L7309
	ldr	r2, [r8, #32]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7301
.L7275:
	ldr	r0, .L7457+96
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L7455
.L7315:
	ldr	r2, [r6, #3896]
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	ldrh	r2, [r2]
	str	r2, [r5, #24]
	b	.L7301
.L7263:
	ldr	r0, .L7457+100
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L7323
	movw	r1, #:lower16:.LC665
	ldr	r2, .L7457+12
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC665
	bl	__dynamic_pr_debug
	b	.L7323
.L7285:
	cmp	r0, #0
	beq	.L7309
	mov	r3, #28
	ldr	r2, [r0]
	ldr	r1, [r0, #32]
	ldr	ip, [r0, #48]
	b	.L7436
.L7294:
	ldr	r3, .L7457+104
	ldrh	r3, [r3, #-14]
	tst	r3, #4
	bne	.L7456
.L7322:
	mov	r2, #-536870912
	mov	r3, #28
	mov	r0, #0
	mov	r4, #4
	str	r2, [r5, #24]
	b	.L7301
.L7313:
	mov	r3, #28
	mov	r4, #4
	str	r6, [r5, #24]
	b	.L7301
.L7329:
	mvn	r0, #11
	b	.L7261
.L7453:
	movw	r1, #:lower16:.LC663
	ldr	r2, .L7457+12
	movt	r1, #:upper16:.LC663
	ldr	r0, .L7457
	bl	__dynamic_pr_debug
	b	.L7311
.L7454:
	movw	r1, #:lower16:.LC669
	ldr	r2, .L7457+12
	movt	r1, #:upper16:.LC669
	ldr	r0, .L7457+36
	bl	__dynamic_pr_debug
	b	.L7318
.L7455:
	movw	r1, #:lower16:.LC666
	ldr	r2, .L7457+12
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC666
	bl	__dynamic_pr_debug
	b	.L7315
.L7451:
	movw	r1, #:lower16:.LC664
	ldr	r2, .L7457+12
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC664
	bl	__dynamic_pr_debug
	b	.L7312
.L7456:
	movw	r1, #:lower16:.LC673
	ldr	r2, .L7457+12
	movt	r1, #:upper16:.LC673
	ldr	r0, .L7457+4
	bl	__dynamic_pr_debug
	b	.L7322
.L7450:
	movw	r1, #:lower16:.LC656
	ldr	r2, .L7457+12
	movt	r1, #:upper16:.LC656
	ldr	r0, .L7457+108
	bl	__dynamic_pr_debug
	b	.L7300
.L7441:
	movw	r1, #:lower16:.LC672
	ldr	r2, .L7457+12
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC672
	bl	__dynamic_pr_debug
	b	.L7321
.L7444:
	movw	r1, #:lower16:.LC667
	ldr	r2, .L7457+12
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC667
	bl	__dynamic_pr_debug
	b	.L7316
.L7452:
	movw	r1, #:lower16:.LC674
	ldr	r2, .L7457+12
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC674
	bl	__dynamic_pr_debug
	b	.L7323
.L7447:
	movw	r1, #:lower16:.LC659
	ldr	r2, .L7457+12
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC659
	bl	__dynamic_pr_debug
	b	.L7304
.L7443:
	movw	r1, #:lower16:.LC676
	ldr	r2, .L7457+12
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC676
	bl	__dynamic_pr_debug
	b	.L7325
.L7439:
	movw	r1, #:lower16:.LC662
	ldr	r2, .L7457+12
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC662
	bl	__dynamic_pr_debug
	b	.L7305
.L7271:
	movw	r0, #:lower16:.LC679
	mov	r2, r4
	ldr	r1, .L7457+12
	movt	r0, #:upper16:.LC679
	mov	r4, #0
	bl	printk
	movw	r0, #65012
	mov	r3, #24
	movt	r0, 65535
	b	.L7301
.L7458:
	.align	2
.L7457:
	.word	.LANCHOR4-1488
	.word	.LANCHOR4-1248
	.word	.LANCHOR4-1104
	.word	.LANCHOR5-3016
	.word	.LANCHOR4-1152
	.word	.LANCHOR4-1360
	.word	.LANCHOR4-1552
	.word	.LANCHOR4-1600
	.word	.LANCHOR4-1296
	.word	.LANCHOR4-1344
	.word	.LANCHOR4-1368
	.word	.LANCHOR4-1632
	.word	.LANCHOR5-2996
	.word	.LANCHOR4-1440
	.word	.LANCHOR4-1200
	.word	.LANCHOR4-1168
	.word	.LANCHOR4-1264
	.word	.LANCHOR4-1584
	.word	.LANCHOR4-1456
	.word	.LANCHOR4-1504
	.word	.LANCHOR4-1120
	.word	.LANCHOR4-1536
	.word	.LANCHOR4-1560
	.word	.LANCHOR4-1312
	.word	.LANCHOR4-1392
	.word	.LANCHOR4-1408
	.word	.LANCHOR4-1216
	.word	.LANCHOR4-1656
	.fnend
	.size	gen_ndis_query_resp.constprop.117, .-gen_ndis_query_resp.constprop.117
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_indicate_status_msg, %function
rndis_indicate_status_msg:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	lsl	r4, r0, #4
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	ldr	r10, .L7466
	sub	r5, r4, r0
	lsl	r5, r5, #2
	strd	r8, [sp, #16]
	str	lr, [sp, #28]
	add	r7, r10, r5
	ldr	r3, [r7, #4]
	cmp	r3, #0
	beq	.L7462
	movw	r3, #:lower16:kmalloc_caches
	mov	r9, r0
	movt	r3, #:upper16:kmalloc_caches
	mov	r8, r1
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L7463
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L7464
	add	r2, r6, #20
.L7461:
	movw	r3, #:lower16:.LANCHOR1
	sub	r4, r4, r9
	str	r2, [r6, #8]
	movt	r3, #:upper16:.LANCHOR1
	mov	r9, #20
	add	r3, r3, r4, lsl #2
	mov	r4, #0
	add	r2, r5, #52
	str	r9, [r6, #12]
	mov	r0, r6
	add	r2, r10, r2
	str	r4, [r6, #16]
	ldr	r1, [r3, #3928]
	bl	__list_add
	ldr	r3, [r6, #8]
	mov	r2, #7
	stm	r3, {r2, r9}
	str	r8, [r3, #8]
	str	r4, [r3, #12]
	str	r4, [r3, #16]
	ldr	r3, [r7, #44]
	ldr	r0, [r7, #48]
	blx	r3
	mov	r0, r4
.L7459:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7463:
	mov	r2, #36
	mov	r6, #16
	b	.L7461
.L7464:
	mvn	r0, #11
	b	.L7459
.L7462:
	movw	r0, #65012
	movt	r0, 65535
	b	.L7459
.L7467:
	.align	2
.L7466:
	.word	.LANCHOR1+3872
	.fnend
	.size	rndis_indicate_status_msg, .-rndis_indicate_status_msg
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_proc_write, %function
rndis_proc_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	subs	r9, r2, #0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #12]
	.pad #4
	sub	sp, sp, #4
	ldr	r3, [r3, #32]
	ldr	r3, [r3, #-20]
	ldr	r7, [r3, #44]
	beq	.L7469
	mov	r8, #0
	mov	r6, #57344
	movw	r10, #:lower16:.LC680
	mov	r4, r1
	mov	r5, r8
	movt	r6, 65535
	movt	r10, #:upper16:.LC680
	add	fp, r1, r9
.L7478:
	mov	r3, sp
	mov	r0, r4
	and	r3, r3, r6
	ldr	r1, [r3, #8]
	sub	r1, r1, #1
	.syntax divided
@ 1185 "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/rndis.c" 1
	.ifnc r0,r0 ; .err ; .endif
	.ifnc r2,r2 ; .err ; .endif
	.ifnc r1,r1 ; .err ; .endif
	bl	__get_user_1
@ 0 "" 2
	.arm
	.syntax unified
	uxtb	r2, r2
	cmp	r0, #0
	sub	r3, r2, #48
	bne	.L7479
	cmp	r3, #52
	ldrls	pc, [pc, r3, asl #2]
	b	.L7471
.L7473:
	.word	.L7475
	.word	.L7475
	.word	.L7475
	.word	.L7475
	.word	.L7475
	.word	.L7475
	.word	.L7475
	.word	.L7475
	.word	.L7475
	.word	.L7475
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7474
	.word	.L7472
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7471
	.word	.L7474
	.word	.L7472
.L7472:
	ldrb	r0, [r7]	@ zero_extendqisi2
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #1
	movt	r3, #:upper16:.LANCHOR1
	mov	r1, #12
.L7488:
	rsb	ip, r0, r0, lsl #4
	movt	r1, 16385
	add	r3, r3, ip, lsl #2
	str	r2, [r3, #3888]
	bl	rndis_indicate_status_msg
.L7476:
	add	r4, r4, #1
	cmp	r4, fp
	bne	.L7478
.L7469:
	mov	r0, r9
.L7468:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7474:
	movw	r3, #:lower16:.LANCHOR1
	ldrb	r0, [r7]	@ zero_extendqisi2
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	mov	r1, #11
	b	.L7488
.L7475:
	add	r5, r5, r5, lsl #2
	mov	r8, #1
	add	r5, r3, r5, lsl r8
	b	.L7476
.L7471:
	cmp	r8, #0
	ldr	r0, .L7489
	strne	r5, [r7, #12]
	bne	.L7476
	ldrh	r3, [r0]
	tst	r3, #4
	beq	.L7476
	mov	r1, r10
	sub	r0, r0, #18
	bl	__dynamic_pr_debug
	b	.L7476
.L7479:
	mvn	r0, #13
	b	.L7468
.L7490:
	.align	2
.L7489:
	.word	.LANCHOR4-1086
	.fnend
	.size	rndis_proc_write, .-rndis_proc_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_init, %function
ccid_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L7497
	mov	r2, #204
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L7500
.L7492:
	add	ip, r4, #120
	mov	r0, #0
	ldr	r2, .L7502
	movw	r3, #:lower16:.LANCHOR1
	movw	r1, #:lower16:.LC407
	movt	r3, #:upper16:.LANCHOR1
	movt	r1, #:upper16:.LC407
	str	r0, [r4, #92]
	add	r0, r4, #128
	str	ip, [r4, #120]
	str	ip, [r4, #124]
	str	r4, [r3, #3592]
	bl	__init_waitqueue_head
	ldr	r0, .L7502+4
	bl	misc_register
	subs	r5, r0, #0
	bne	.L7494
	movw	r1, #:lower16:.LC681
	ldr	r2, .L7502
	add	r0, r4, #160
	movt	r1, #:upper16:.LC681
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC682
	ldr	r2, .L7502
	add	r0, r4, #172
	movt	r1, #:upper16:.LC682
	bl	__init_waitqueue_head
	add	r3, r4, #192
	ldr	r0, .L7502+8
	str	r3, [r4, #192]
	str	r3, [r4, #196]
	bl	misc_register
	subs	r5, r0, #0
	bne	.L7501
.L7491:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7497:
	mov	r4, #16
	b	.L7492
.L7500:
	mvn	r5, #11
	b	.L7491
.L7501:
	movw	r0, #:lower16:.LC409
	ldr	r1, .L7502+12
	movt	r0, #:upper16:.LC409
	bl	printk
	movw	r0, #:lower16:.LC684
	mov	r2, r5
	ldr	r1, .L7502+16
	movt	r0, #:upper16:.LC684
	bl	printk
	ldr	r0, .L7502+4
	bl	misc_deregister
.L7496:
	mov	r0, r4
	bl	kfree
	movw	r0, #:lower16:.LC685
	movt	r0, #:upper16:.LC685
	bl	printk
	b	.L7491
.L7494:
	ldr	r6, .L7502+20
	movw	r0, #:lower16:.LC409
	movt	r0, #:upper16:.LC409
	sub	r1, r6, #4
	bl	printk
	movw	r0, #:lower16:.LC683
	mov	r2, r5
	add	r1, r6, #20
	movt	r0, #:upper16:.LC683
	bl	printk
	b	.L7496
.L7503:
	.align	2
.L7502:
	.word	.LANCHOR1+3948
	.word	.LANCHOR0+920
	.word	.LANCHOR0+884
	.word	.LANCHOR5-2848
	.word	.LANCHOR5-2860
	.word	.LANCHOR5-2880
	.fnend
	.size	ccid_function_init, .-ccid_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_request_new.constprop.131, %function
adb_request_new.constprop.131:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, #208
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L7504
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #48]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4]
	beq	.L7504
	mov	r2, #4096
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L7511
.L7504:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7511:
	ldr	r2, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L7504
	.fnend
	.size	adb_request_new.constprop.131, .-adb_request_new.constprop.131
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_request_new.constprop.133, %function
adb_request_new.constprop.133:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, #208
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L7512
	mov	r2, #2
	mov	r1, #208
	mov	r0, #16384
	bl	kmalloc_order_trace
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L7518
.L7512:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7518:
	ldr	r2, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L7512
	.fnend
	.size	adb_request_new.constprop.133, .-adb_request_new.constprop.133
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_cdc_notify_complete, %function
acm_cdc_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:__stack_chk_guard
	strd	r6, [sp, #8]
	movt	r4, #:upper16:__stack_chk_guard
	mov	r6, r1
	strd	r8, [sp, #16]
	ldr	r3, [r4]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r5, [r1, #32]
	.pad #24
	sub	sp, sp, #24
	str	r3, [sp, #20]
	add	r7, r5, #148
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #44]
	mov	r1, r0
	cmn	r3, #108
	beq	.L7534
	ldrb	r8, [r5, #147]	@ zero_extendqisi2
	mov	r0, r7
	str	r6, [r5, #156]
	bl	_raw_spin_unlock_irqrestore
	cmp	r8, #0
	beq	.L7519
	ldr	r3, [r5, #20]
	mov	r0, r7
	ldr	r8, [r3, #24]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #156]
	mov	r6, r0
	cmp	r3, #0
	moveq	r3, #1
	strbeq	r3, [r5, #147]
	bne	.L7535
.L7525:
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L7519:
	ldr	r2, [sp, #20]
	ldr	r3, [r4]
	cmp	r2, r3
	bne	.L7536
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7534:
	mov	r0, r7
	str	r6, [r5, #156]
	bl	_raw_spin_unlock_irqrestore
	b	.L7519
.L7536:
	bl	__stack_chk_fail
.L7535:
	ldr	r0, .L7537
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L7523
	ldrh	ip, [r5, #170]
	movw	r2, #:lower16:.LC686
	sub	r0, r0, #24
	ldr	r1, [r8]
	movt	r2, #:upper16:.LC686
	ldrb	r3, [r5, #146]	@ zero_extendqisi2
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L7523:
	movw	r0, #:lower16:.LC687
	ldrh	r2, [r5, #170]
	mov	r9, #32
	ldrb	r1, [r5, #146]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC687
	bl	printk
	add	r0, sp, #10
	mov	r1, #10
	ldr	r10, [r5, #152]
	bl	__memzero
	ldr	r8, [r5, #156]
	mov	r2, #0
	mov	r0, #10
	mvn	r1, #94
	mov	ip, #2
	strb	r2, [r5, #147]
	str	r2, [r5, #156]
	ldr	r3, [r8]
	str	r0, [r8, #4]
	mov	r0, r7
	strb	r1, [r3]
	strb	r9, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	ldrb	r1, [r5, #144]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	r2, [r3, #7]
	ldrh	ip, [r5, #170]	@ unaligned
	ldr	r1, [sp, #14]	@ unaligned
	strh	ip, [sp, #10]	@ movhi
	ldr	ip, [sp, #10]	@ unaligned
	str	ip, [r3, #8]	@ unaligned
	str	r1, [r3, #12]	@ unaligned
	ldrh	r1, [sp, #18]	@ unaligned
	strh	r1, [r3, #16]	@ unaligned
	ldrh	r2, [r5, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock
	ldr	r3, [r10, #8]
	mov	r2, r9
	mov	r1, r8
	mov	r0, r10
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	r9, #0
	bge	.L7525
	ldr	r0, [r5, #20]
	movw	r1, #:lower16:.LC688
	mov	r3, r9
	movt	r1, #:upper16:.LC688
	ldrb	r2, [r5, #146]	@ zero_extendqisi2
	ldr	r0, [r0, #24]
	ldr	r0, [r0]
	add	r0, r0, #32
	bl	dev_err
	str	r8, [r5, #156]
	b	.L7525
.L7538:
	.align	2
.L7537:
	.word	.LANCHOR4-1056
	.fnend
	.size	acm_cdc_notify_complete, .-acm_cdc_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_send_controlbits_tomodem, %function
ghsuart_send_controlbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR1
	movt	ip, #:upper16:.LANCHOR1
	ldr	r3, [ip, #1856]
	cmp	r0, #0
	cmpne	r1, r3
	bcs	.L7566
	mov	r3, #84
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mla	r1, r3, r1, ip
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #24
	sub	sp, sp, #24
	ldr	r4, [r1, #2032]
	cmp	r4, #0
	beq	.L7567
	ldr	r3, [r4, #196]
	cmp	r3, r2
	beq	.L7539
	ldr	r3, [r4, #188]
	str	r2, [r4, #196]
	tst	r3, #4
	beq	.L7539
	tst	r2, #1
	mov	r5, r2
	bne	.L7568
.L7546:
	ldr	r0, .L7571
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L7569
.L7539:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7568:
	ldr	r0, .L7571+4
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L7570
.L7547:
	add	r7, r4, #20
	mov	r8, #0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #24]
	mov	r1, r0
	mov	r0, r7
	str	r8, [r4, #200]
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, r8
	beq	.L7546
	ldr	r3, [r6, #136]
	cmp	r3, r8
	beq	.L7546
	mov	r1, r8
	mov	r0, r6
	blx	r3
	b	.L7546
.L7569:
	ldr	r2, .L7571+8
	movw	r1, #:lower16:.LC600
	mov	r3, r5
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC600
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__dynamic_pr_debug
.L7570:
	mov	ip, #45
	movw	r1, #:lower16:.LC120
	ldr	r2, .L7571+12
	movt	r1, #:upper16:.LC120
	mov	r3, ip
	sub	r0, r0, #32
	str	ip, [sp]
	str	ip, [sp, #4]
	str	ip, [sp, #8]
	str	ip, [sp, #12]
	str	ip, [sp, #16]
	str	ip, [sp, #20]
	bl	__dynamic_pr_debug
	b	.L7547
.L7567:
	ldr	r1, .L7571+8
	movw	r0, #:lower16:.LC105
	movt	r0, #:upper16:.LC105
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L7566:
	movw	r0, #:lower16:.LC118
	mov	r2, r1
	ldr	r1, .L7571+8
	movt	r0, #:upper16:.LC118
	b	printk
.L7572:
	.align	2
.L7571:
	.word	.LANCHOR4-1012
	.word	.LANCHOR4-1024
	.word	.LANCHOR5-2824
	.word	.LANCHOR5-2788
	.fnend
	.size	ghsuart_send_controlbits_tomodem, .-ghsuart_send_controlbits_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_alloc_requests.constprop.136, %function
gbam_alloc_requests.constprop.136:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L7591
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, r2
	str	r8, [sp, #16]
	mov	r8, r3
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	ldrh	r3, [ip, #-2]
	tst	r3, #4
	bne	.L7589
.L7574:
	cmp	r7, #0
	ble	.L7575
	mov	r4, #0
	b	.L7579
.L7576:
	add	r4, r4, #1
	str	r8, [r3, #28]
	ldr	r2, [r5]
	bl	__list_add
	cmp	r7, r4
	beq	.L7575
.L7579:
	ldr	r3, [r6, #8]
	mov	r1, #32
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r1, r5
	add	r0, r3, #36
	bne	.L7576
	ldr	r0, .L7591+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L7590
.L7577:
	ldr	r3, [r5]
	cmp	r5, r3
	mvneq	r0, #11
	beq	.L7573
.L7575:
	mov	r0, #0
.L7573:
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7589:
	movw	r1, #:lower16:.LC689
	sub	r0, ip, #20
	ldr	r2, .L7591+8
	movt	r1, #:upper16:.LC689
	mov	r3, r6
	stm	sp, {r5, r7, r8}
	bl	__dynamic_pr_debug
	b	.L7574
.L7590:
	movw	r1, #:lower16:.LC690
	mov	r3, r4
	ldr	r2, .L7591+8
	movt	r1, #:upper16:.LC690
	sub	r0, r0, #20
	bl	__dynamic_pr_debug
	b	.L7577
.L7592:
	.align	2
.L7591:
	.word	.LANCHOR4-988
	.word	.LANCHOR4-964
	.word	.LANCHOR5-2764
	.fnend
	.size	gbam_alloc_requests.constprop.136, .-gbam_alloc_requests.constprop.136
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_alloc_req.constprop.141, %function
gsmd_alloc_req.constprop.141:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	mov	r1, #32
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L7597
	mov	r0, r5
	mov	r1, #32
	str	r5, [r4, #4]
	bl	__kmalloc
	cmp	r0, #0
	mov	r5, r0
	str	r0, [r4]
	bne	.L7593
	movw	r0, #:lower16:.LC692
	ldr	r1, .L7598
	movt	r0, #:upper16:.LC692
	bl	printk
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	mov	r4, r5
	ldr	r3, [r3, #12]
	blx	r3
.L7593:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7597:
	movw	r0, #:lower16:.LC691
	ldr	r1, .L7598
	movt	r0, #:upper16:.LC691
	bl	printk
	b	.L7593
.L7599:
	.align	2
.L7598:
	.word	.LANCHOR5-2744
	.fnend
	.size	gsmd_alloc_req.constprop.141, .-gsmd_alloc_req.constprop.141
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_function_init, %function
acm_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 80
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	movw	r6, #:lower16:__stack_chk_guard
	strd	r8, [sp, #16]
	movt	r6, #:upper16:__stack_chk_guard
	mov	r5, r1
	strd	r10, [sp, #24]
	ldr	r2, [r6]
	str	lr, [sp, #32]
	ldr	r3, [r3, #24]
	.pad #92
	sub	sp, sp, #92
	str	r2, [sp, #84]
	cmp	r3, #0
	moveq	r3, #16
	streq	r3, [r0, #4]
	beq	.L7602
	mov	r0, r3
	mov	r2, #4
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #4]
	beq	.L7619
.L7602:
	ldr	r3, [r5]
	mov	r1, #0
	mov	r0, #4
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	str	r3, [sp, #20]
	bl	__alloc_tty_driver
	cmp	r0, #0
	str	r0, [r5, #3948]
	beq	.L7619
	movw	r2, #:lower16:.LC693
	movw	r3, #:lower16:tty_std_termios
	ldr	r1, .L7639
	movt	r2, #:upper16:.LC693
	movt	r3, #:upper16:tty_std_termios
	ldrd	r8, [r3]
	mov	lr, #3
	movw	r7, #3261
	str	r2, [r0, #72]
	ldrd	r10, [r3, #32]
	movw	r2, #:lower16:.LC694
	movt	r2, #:upper16:.LC694
	movt	lr, 1
	mov	r4, #0
	str	r2, [r0, #76]
	strd	r10, [sp, #8]
	ldrd	r10, [r3, #8]
	str	lr, [r0, #96]
	mov	lr, #14
	strd	r8, [r0, #100]
	ldrd	r8, [r3, #16]
	ldrd	r2, [r3, #24]
	strb	r4, [sp, #31]
	strd	r10, [r0, #108]
	ldrd	r10, [sp, #8]
	str	r7, [r0, #108]
	strd	r8, [r0, #116]
	mvn	r8, #127
	strd	r2, [r0, #124]
	mov	r3, #9600
	mov	r2, #8
	str	lr, [r0, #144]
	mov	lr, #37
	strd	r10, [r0, #132]
	ldr	fp, .L7639+4
	str	r3, [r0, #136]
	str	r3, [r0, #140]
	strb	r8, [sp, #29]
	strb	lr, [sp, #30]
	strb	r4, [sp, #32]
	strb	r2, [sp, #33]
	strb	r4, [sp, #34]
	strb	r4, [sp, #35]
	bl	tty_set_operations
	movw	r0, #:lower16:.LC695
	mov	r3, r4
	str	r4, [sp]
	movt	r0, #:upper16:.LC695
	mov	r2, #1
	mov	r1, #10
	bl	__alloc_workqueue_key
	cmp	r0, r4
	str	r0, [r5, #3320]
	beq	.L7621
	movw	r9, #:lower16:.LC696
	mov	r7, fp
	movt	r9, #:upper16:.LC696
	mov	r8, fp
.L7607:
	ldr	r2, .L7639+8
	mov	r1, r9
	mov	r0, r8
	bl	__mutex_init
	add	r1, sp, #29
	mov	r0, r4
	bl	gs_port_alloc
	cmp	r0, #0
	bne	.L7606
	add	r4, r4, #1
	add	r8, r8, #24
	cmp	r4, #4
	bne	.L7607
	ldr	r0, [r5, #3948]
	str	r4, [r5, #3952]
	bl	tty_register_driver
	subs	r10, r0, #0
	bne	.L7636
	ldr	r3, [sp, #20]
	movw	r8, #:lower16:.LC698
	mov	r4, r10
	ldr	r9, .L7639+12
	movt	r8, #:upper16:.LC698
	add	fp, r3, #32
.L7610:
	mov	r2, fp
	mov	r1, r4
	ldr	r0, [r5, #3948]
	bl	tty_register_device
	cmn	r0, #4096
	bls	.L7609
	mov	r3, r0
	mov	r2, r4
	mov	r1, r9
	mov	r0, r8
	bl	printk
.L7609:
	add	r4, r4, #1
	cmp	r4, #4
	bne	.L7610
	ldr	fp, .L7639+16
	movw	r9, #:lower16:.LC699
	mov	r4, #0
	movt	r9, #:upper16:.LC699
.L7614:
	mov	r2, r9
	mov	r3, r4
	ldr	r8, [r7, #20]
	mov	r1, #48
	add	r0, sp, #36
	bl	snprintf
	add	r0, sp, #36
	mov	r1, #0
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r5, #3956]
	beq	.L7613
	cmn	r0, #4096
	bhi	.L7613
	movw	r0, #:lower16:.LC700
	mov	r3, r8
	str	fp, [sp]
	mov	r1, #292
	movt	r0, #:upper16:.LC700
	bl	debugfs_create_file
	ldr	ip, .L7639+20
	movw	r0, #:lower16:.LC701
	mov	r3, r8
	movt	r0, #:upper16:.LC701
	mov	r1, #420
	ldr	r2, [r5, #3956]
	str	ip, [sp]
	bl	debugfs_create_file
.L7613:
	add	r4, r4, #1
	add	r7, r7, #24
	cmp	r4, #4
	bne	.L7614
	ldr	r0, .L7639+24
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L7637
.L7600:
	ldr	r2, [sp, #84]
	mov	r0, r10
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L7638
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7606:
	cmp	r4, #0
	mov	r10, r0
	sub	r4, r4, #1
	beq	.L7616
.L7605:
	add	r4, r4, r4, lsl #1
	ldr	r7, .L7639+4
	add	r4, fp, r4, lsl #3
.L7615:
	ldr	r0, [r4, #20]
	bl	kfree
	cmp	r4, r7
	sub	r4, r4, #24
	bne	.L7615
.L7616:
	ldr	r0, [r5, #3320]
	cmp	r0, #0
	beq	.L7617
	bl	destroy_workqueue
.L7617:
	ldr	r0, [r5, #3948]
	bl	put_tty_driver
	mov	r3, #0
	str	r3, [r5, #3948]
	b	.L7600
.L7621:
	mvn	r10, #11
	mov	r4, #3
	b	.L7605
.L7619:
	mvn	r10, #11
	b	.L7600
.L7637:
	movw	ip, #:lower16:.LC703
	movw	r1, #:lower16:.LC702
	ldr	r2, .L7639+12
	movt	ip, #:upper16:.LC703
	mov	r3, r4
	movt	r1, #:upper16:.LC702
	sub	r0, r0, #20
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L7600
.L7638:
	bl	__stack_chk_fail
.L7636:
	movw	r0, #:lower16:.LC697
	mov	r2, r10
	ldr	r1, .L7639+12
	movt	r0, #:upper16:.LC697
	mov	r4, #3
	bl	printk
	b	.L7605
.L7640:
	.align	2
.L7639:
	.word	.LANCHOR5-2728
	.word	.LANCHOR1+3332
	.word	.LANCHOR1+3952
	.word	.LANCHOR5-2604
	.word	.LANCHOR5-2588
	.word	.LANCHOR5-2480
	.word	.LANCHOR4-940
	.fnend
	.size	acm_function_init, .-acm_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_start_tx, %function
gs_start_tx:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	add	fp, r0, #76
	str	lr, [sp, #32]
	ldr	r3, [r0, #4]
	.pad #20
	sub	sp, sp, #20
	ldr	r6, [r0, #76]
	ldr	r7, [r3, #88]
	cmp	fp, r6
	beq	.L7662
	ldr	r3, [r0, #84]
	cmp	r3, #7
	bgt	.L7662
	movw	r10, #:lower16:.LANCHOR1
	mov	r4, r0
	mov	r9, #0
	movt	r10, #:upper16:.LANCHOR1
.L7643:
	ldr	r2, [r4, #92]
	sub	r8, r6, #36
	ldr	r1, [r4, #100]
	ldr	r5, [r4, #104]
	add	r5, r5, r2
	sub	r3, r5, r1
	udiv	r5, r3, r2
	mls	r5, r2, r5, r3
	cmp	r5, #4096
	bcs	.L7663
	cmp	r5, #0
	bne	.L7645
	movw	r10, #:lower16:.LANCHOR1
	movt	r10, #:upper16:.LANCHOR1
	ldr	r1, [r10, #3960]
	cmp	r1, #0
	moveq	r5, r1
	beq	.L7649
	ldrh	r2, [r7, #20]
	sdiv	r3, r1, r2
	mls	r3, r2, r3, r1
	cmp	r3, #0
	beq	.L7682
.L7649:
	mov	r2, #1
	mov	r3, #0
	mov	r1, r2
	add	r0, r4, #108
	bl	__wake_up
.L7651:
	cmp	r9, #0
	beq	.L7641
.L7644:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L7641
	bl	tty_wakeup
.L7641:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7663:
	mov	r5, #4096
.L7645:
	ldr	r9, [r4, #96]
	ldr	r3, [r6, #-36]
	add	r9, r9, r2
	sub	r9, r9, r1
	cmp	r9, r5
	bcs	.L7683
	mov	r0, r3
	sub	r3, r5, r9
	mov	r2, r9
	str	r3, [sp, #12]
	bl	memcpy
	add	r0, r0, r9
	ldr	r9, [sp, #12]
	ldr	r1, [r4, #96]
	mov	r2, r9
	bl	memcpy
	ldr	r3, [r4, #96]
	add	r3, r3, r9
	str	r3, [r4, #100]
.L7647:
	mov	r0, r6
	str	r5, [r6, #-32]
	bl	list_del
	mov	r0, r4
	bl	_raw_spin_unlock
	ldr	r3, [r7, #8]
	mov	r2, #32
	mov	r1, r8
	mov	r0, r7
	ldr	r3, [r3, #16]
	blx	r3
	mov	r5, r0
	mov	r0, r4
	bl	_raw_spin_lock
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L7684
	cmp	r5, #0
	bne	.L7685
	ldr	r1, [r6, #-32]
	ldr	r6, [r4, #76]
	ldr	r3, [r4, #84]
	ldr	r2, [r4, #136]
	str	r1, [r10, #3960]
	cmp	fp, r6
	add	r3, r3, #1
	add	r2, r2, r1
	str	r3, [r4, #84]
	str	r2, [r4, #136]
	beq	.L7644
	cmp	r3, #7
	mov	r9, #1
	ble	.L7643
	b	.L7644
.L7683:
	mov	r0, r3
	mov	r2, r5
	bl	memcpy
	cmp	r9, r5
	ldrhi	r3, [r4, #100]
	ldrls	r3, [r4, #96]
	addhi	r3, r3, r5
	str	r3, [r4, #100]
	b	.L7647
.L7684:
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r8
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L7641
.L7685:
	ldr	r0, .L7688
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L7686
.L7654:
	mov	r1, fp
	mov	r0, r6
	ldr	r2, [r4, #76]
	bl	__list_add
	b	.L7644
.L7682:
	mov	r0, r6
	str	r3, [r6, #-32]
	bl	list_del
	mov	r0, r4
	bl	_raw_spin_unlock
	ldr	r3, [r7, #8]
	mov	r2, #32
	mov	r1, r8
	mov	r0, r7
	ldr	r3, [r3, #16]
	blx	r3
	mov	r5, r0
	mov	r0, r4
	bl	_raw_spin_lock
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L7687
	cmp	r5, #0
	beq	.L7652
	movw	r2, #:lower16:.LC167
	movw	r0, #:lower16:.LC704
	ldr	r1, .L7688+4
	movt	r2, #:upper16:.LC167
	movt	r0, #:upper16:.LC704
	mov	r3, r5
	bl	printk
	mov	r1, fp
	mov	r0, r6
	ldr	r2, [r4, #76]
	bl	__list_add
.L7652:
	mov	r3, #0
	str	r3, [r10, #3960]
	b	.L7649
.L7662:
	mov	r5, #0
	b	.L7641
.L7686:
	str	r5, [sp, #4]
	ldr	ip, [r7, #4]
	movw	r3, #:lower16:.LC167
	movw	r1, #:lower16:.LC168
	ldr	r2, .L7688+4
	movt	r3, #:upper16:.LC167
	movt	r1, #:upper16:.LC168
	sub	r0, r0, #20
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L7654
.L7687:
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r8
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L7651
.L7689:
	.align	2
.L7688:
	.word	.LANCHOR4-916
	.word	.LANCHOR5-2372
	.fnend
	.size	gs_start_tx, .-gs_start_tx
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_flush_chars, %function
gs_flush_chars:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #272]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #4]
	mov	r5, r0
	cmp	r3, #0
	beq	.L7691
	mov	r0, r4
	bl	gs_start_tx
.L7691:
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	gs_flush_chars, .-gs_flush_chars
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_write, %function
gs_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #272]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	cmp	r5, #0
	mov	r6, r0
	bne	.L7711
.L7697:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L7702
	mov	r0, r4
	bl	gs_start_tx
.L7702:
	mov	r0, r4
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7711:
	ldr	r1, [r4, #92]
	mov	r8, r5
	ldr	r3, [r4, #100]
	ldr	r0, [r4, #104]
	add	r3, r3, r1
	sub	r3, r3, r0
	sub	r3, r3, #1
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r5, r3
	bls	.L7698
	subs	r5, r3, #0
	beq	.L7697
	mov	r8, r5
.L7698:
	ldr	r9, [r4, #96]
	add	r9, r9, r1
	sub	r9, r9, r0
	cmp	r9, r8
	bcc	.L7712
	mov	r1, r7
	mov	r2, r8
	bl	memcpy
	cmp	r9, r8
	bls	.L7701
	ldr	r3, [r4, #104]
	add	r8, r3, r8
	str	r8, [r4, #104]
	b	.L7697
.L7712:
	sub	r8, r8, r9
	mov	r2, r9
	mov	r1, r7
	bl	memcpy
	mov	r2, r8
	add	r1, r7, r9
	ldr	r0, [r4, #96]
	bl	memcpy
	ldr	r3, [r4, #96]
	add	r8, r3, r8
	str	r8, [r4, #104]
	b	.L7697
.L7701:
	ldr	r3, [r4, #96]
	str	r3, [r4, #104]
	b	.L7697
	.fnend
	.size	gs_write, .-gs_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_write_complete, %function
gs_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r2, [r5, #48]
	mov	r1, r4
	mov	r7, r0
	ldr	r3, [r4, #140]
	add	r0, r5, #36
	add	r3, r3, r2
	str	r3, [r4, #140]
	ldr	r2, [r1, #76]!
	bl	__list_add
	ldr	r3, [r4, #84]
	sub	r3, r3, #1
	str	r3, [r4, #84]
	ldr	r3, [r5, #44]
	cmn	r3, #108
	beq	.L7714
	cmp	r3, #0
	beq	.L7715
	movw	r0, #:lower16:.LC705
	ldr	r1, .L7726
	movt	r0, #:upper16:.LC705
	ldr	r2, [r6, #4]
	bl	printk
.L7715:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L7714
	mov	r0, r4
	bl	gs_start_tx
.L7714:
	mov	r1, r7
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L7727:
	.align	2
.L7726:
	.word	.LANCHOR5-2360
	.fnend
	.size	gs_write_complete, .-gs_write_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_fs_mount, %function
ffs_fs_mount:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #33152
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	subs	r4, r3, #0
	movt	ip, 65535
	mov	r3, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	movw	lr, #16704
	strd	r0, [sp, #4]
	str	r2, [sp, #12]
	strh	ip, [sp, #20]	@ movhi
	str	r3, [sp, #22]	@ unaligned
	str	r3, [sp, #26]	@ unaligned
	str	r3, [sp, #30]	@ unaligned
	strh	lr, [sp, #32]	@ movhi
	str	r3, [sp, #34]	@ unaligned
	strh	r3, [sp, #38]	@ movhi
	beq	.L7729
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L7729
	mov	fp, #32768
	movw	r7, #:lower16:.LC708
	movw	r8, #:lower16:.LC709
	movt	fp, 65535
	movt	r7, #:upper16:.LC708
	movt	r8, #:upper16:.LC709
.L7748:
	mov	r1, #44
	mov	r0, r4
	bl	strchr
	subs	r6, r0, #0
	mov	r1, #61
	movne	r3, #0
	mov	r0, r4
	strbne	r3, [r6]
	bl	strchr
	subs	r5, r0, #0
	beq	.L7775
	mov	r3, #0
	mov	r10, r5
	mov	r2, r3
	add	r1, sp, #16
	strb	r3, [r10], #1
	mov	r0, r10
	bl	simple_strtoul
	ldr	r3, [sp, #16]
	mov	r9, r0
	ldrb	r3, [r3]	@ zero_extendqisi2
	cmp	r3, #44
	cmpne	r3, #0
	bne	.L7776
	sub	r5, r5, r4
	cmp	r5, #4
	beq	.L7734
	cmp	r5, #5
	bne	.L7777
	mov	r2, r5
	mov	r1, r7
	mov	r0, r4
	bl	memcmp
	cmp	r0, #0
	beq	.L7778
	mov	r2, r5
	mov	r1, r8
	mov	r0, r4
	bl	memcmp
	cmp	r0, #0
	bne	.L7737
	movw	r3, #438
	and	r9, r9, r3
	orr	r9, r9, fp
	strh	r9, [sp, #20]	@ movhi
.L7739:
	cmp	r6, #0
	beq	.L7729
	add	r4, r6, #1
	b	.L7748
.L7777:
	cmp	r5, #3
	beq	.L7736
.L7737:
	movw	r0, #:lower16:.LC713
	mov	r1, r4
	movt	r0, #:upper16:.LC713
	bl	printk
.L7732:
	mvn	r0, #21
.L7728:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7734:
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #109
	bne	.L7737
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	add	r2, r4, #1
	cmp	r3, #111
	bne	.L7737
	ldrb	r3, [r2, #1]!	@ zero_extendqisi2
	cmp	r3, #100
	bne	.L7737
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #101
	bne	.L7737
	uxth	r9, r0
	movw	r3, #438
	movw	r2, #365
	and	r2, r2, r9
	and	r9, r9, r3
	orr	r2, r2, #16384
	orr	r3, r9, fp
	strh	r3, [sp, #20]	@ movhi
	strh	r2, [sp, #32]	@ movhi
	b	.L7739
.L7736:
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #117
	beq	.L7779
	cmp	r3, #103
	bne	.L7737
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	cmp	r3, #105
	bne	.L7737
	ldrb	r3, [r4, #2]	@ zero_extendqisi2
	cmp	r3, #100
	bne	.L7737
	str	r0, [sp, #28]
	b	.L7739
.L7778:
	movw	r3, #365
	and	r9, r9, r3
	orr	r9, r9, #16384
	strh	r9, [sp, #32]	@ movhi
	b	.L7739
.L7779:
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	cmp	r3, #105
	bne	.L7737
	ldrb	r3, [r4, #2]	@ zero_extendqisi2
	cmp	r3, #100
	bne	.L7737
	str	r0, [sp, #24]
	b	.L7739
.L7729:
	movw	r3, #:lower16:ffs_sb_fill
	ldrd	r0, [sp, #4]
	ldr	r2, [sp, #12]
	movt	r3, #:upper16:ffs_sb_fill
	str	r2, [sp, #36]
	add	r2, sp, #20
	bl	mount_single
	b	.L7728
.L7776:
	movw	r0, #:lower16:.LC707
	mov	r2, r10
	mov	r1, r4
	movt	r0, #:upper16:.LC707
	bl	printk
	b	.L7732
.L7775:
	movw	r0, #:lower16:.LC706
	mov	r1, r4
	movt	r0, #:upper16:.LC706
	bl	printk
	b	.L7732
	.fnend
	.size	ffs_fs_mount, .-ffs_fs_mount
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_setup, %function
audio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #20
	sub	sp, sp, #20
	ldrb	r3, [r1]	@ zero_extendqisi2
	ldrh	r9, [r1, #4]	@ unaligned
	ldrh	r7, [r1, #2]	@ unaligned
	ldr	r6, [r2, #24]
	cmp	r3, #34
	ldrh	r8, [r1, #6]	@ unaligned
	ldr	r5, [r6, #4]
	beq	.L7781
	cmp	r3, #162
	bne	.L7788
	ldr	r0, .L7803
	ldr	fp, [r5]
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L7800
.L7787:
	cmp	r7, #256
	bne	.L7788
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	sub	r3, r3, #129
	cmp	r3, #3
	bhi	.L7788
	mov	r1, #68
	mvn	r2, #83
	mov	r3, #0
	mov	r10, #3
	strb	r1, [fp]
	strb	r2, [fp, #1]
	strb	r3, [fp, #2]
.L7786:
	ldr	r0, .L7803+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L7801
.L7789:
	ldrb	r0, [r5, #26]	@ zero_extendqisi2
	movw	r3, #:lower16:audio_control_complete
	str	r10, [r5, #4]
	movt	r3, #:upper16:audio_control_complete
	mov	r1, r5
	mov	r2, #32
	str	r3, [r5, #28]
	bfc	r0, #1, #1
	strb	r0, [r5, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L7780
	movw	r0, #:lower16:.LC716
	mov	r1, r4
	movt	r0, #:upper16:.LC716
	bl	printk
	b	.L7780
.L7781:
	ldr	r0, .L7803+8
	ldrb	r2, [r1, #1]	@ zero_extendqisi2
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L7802
.L7784:
	sub	r2, r2, #1
	cmp	r2, #3
	movls	r10, r8
	bls	.L7786
.L7788:
	mvn	r4, #94
.L7780:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7800:
	lsr	ip, r9, #8
	movw	r1, #:lower16:.LC714
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC714
	mov	r3, r7
	sub	r0, r0, #20
	stm	sp, {r8, ip}
	bl	__dynamic_pr_debug
	b	.L7787
.L7801:
	movw	r1, #:lower16:.LC715
	sub	r0, r0, #20
	stm	sp, {r7, r9}
	movt	r1, #:upper16:.LC715
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	ldrb	r2, [r4]	@ zero_extendqisi2
	str	r8, [sp, #8]
	bl	__dynamic_pr_debug
	b	.L7789
.L7802:
	movw	r1, #:lower16:.LC714
	sub	r0, r0, #20
	strd	r8, [sp]
	movt	r1, #:upper16:.LC714
	mov	r3, r7
	bl	__dynamic_pr_debug
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	b	.L7784
.L7804:
	.align	2
.L7803:
	.word	.LANCHOR4-868
	.word	.LANCHOR4-844
	.word	.LANCHOR4-892
	.fnend
	.size	audio_setup, .-audio_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_alloc_ctrl_pkt.constprop.151, %function
rmnet_alloc_ctrl_pkt.constprop.151:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L7810
	mov	r2, #16
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L7814
.L7806:
	mov	r1, #32
	mov	r0, r5
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r4]
	strne	r5, [r4, #4]
	beq	.L7815
.L7805:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7810:
	mov	r4, #16
	b	.L7806
.L7814:
	mvn	r4, #11
	b	.L7805
.L7815:
	mov	r0, r4
	mvn	r4, #11
	bl	kfree
	b	.L7805
	.fnend
	.size	rmnet_alloc_ctrl_pkt.constprop.151, .-rmnet_alloc_ctrl_pkt.constprop.151
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_send_cpkt_response, %function
frmnet_send_cpkt_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	cmpne	r0, #0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r7, r1
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	beq	.L7830
	mov	r0, r2
	mov	r6, r2
	bl	rmnet_alloc_ctrl_pkt.constprop.151
	cmn	r0, #4096
	mov	r4, r0
	bhi	.L7831
	mov	r1, r7
	mov	r2, r6
	ldr	r0, [r0]
	bl	memcpy
	ldr	r0, .L7833
	str	r6, [r4, #4]
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L7832
.L7820:
	ldr	r3, [r5, #120]
	cmp	r3, #0
	beq	.L7821
	ldr	r3, [r5, #124]
	cmp	r3, #0
	bne	.L7822
.L7821:
	ldr	r0, [r4]
	bl	kfree
	mov	r0, r4
	bl	kfree
	mov	r0, #0
.L7816:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L7822:
	add	r6, r5, #132
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	add	r2, r5, #144
	ldr	r1, [r5, #148]
	add	r0, r4, #8
	bl	__list_add
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	bl	frmnet_ctrl_response_available
	mov	r0, #0
	b	.L7816
.L7832:
	ldrb	ip, [r5, #116]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC156
	mov	r3, r5
	movt	r1, #:upper16:.LC156
	ldr	r2, .L7833+4
	sub	r0, r0, #20
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L7820
.L7830:
	movw	r0, #:lower16:.LC717
	mov	r3, r1
	ldr	r1, .L7833+4
	mov	r2, r5
	movt	r0, #:upper16:.LC717
	bl	printk
	mvn	r0, #18
	b	.L7816
.L7831:
	movw	r0, #:lower16:.LC247
	ldr	r1, .L7833+4
	movt	r0, #:upper16:.LC247
	bl	printk
	mvn	r0, #11
	b	.L7816
.L7834:
	.align	2
.L7833:
	.word	.LANCHOR4-820
	.word	.LANCHOR5-2340
	.fnend
	.size	frmnet_send_cpkt_response, .-frmnet_send_cpkt_response
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_qti_send_cpkt_tomodem, %function
grmnet_ctrl_qti_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	cmp	r2, #2048
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	mov	r5, r2
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r3, #3228]
	bhi	.L7849
	mov	r0, r2
	mov	r7, r1
	bl	rmnet_alloc_ctrl_pkt.constprop.151
	cmn	r0, #4096
	mov	r6, r0
	bhi	.L7850
	mov	r1, r7
	mov	r2, r5
	ldr	r0, [r0]
	bl	memcpy
	ldr	r0, .L7854
	str	r5, [r6, #4]
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L7851
.L7839:
	add	r7, r4, #52
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldrb	r5, [r4, #4]	@ zero_extendqisi2
	mov	r8, r0
	cmp	r5, #0
	beq	.L7852
	add	r0, r6, #8
	add	r2, r4, #44
	ldr	r1, [r4, #48]
	bl	__list_add
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, .L7854+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L7853
.L7841:
	add	r0, r4, #32
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	bl	__wake_up
	mov	r0, #0
.L7835:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7851:
	movw	r1, #:lower16:.LC248
	mov	r3, r5
	ldr	r2, .L7854+8
	movt	r1, #:upper16:.LC248
	sub	r0, r0, #20
	bl	__dynamic_pr_debug
	b	.L7839
.L7853:
	movw	r1, #:lower16:.LC249
	ldr	r2, .L7854+8
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC249
	bl	__dynamic_pr_debug
	b	.L7841
.L7852:
	movw	r0, #:lower16:.LC719
	mov	r1, r4
	movt	r0, #:upper16:.LC719
	bl	printk
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r6]
	bl	kfree
	mov	r0, r6
	bl	kfree
	mov	r0, r5
	b	.L7835
.L7850:
	movw	r0, #:lower16:.LC247
	ldr	r1, .L7854+8
	movt	r0, #:upper16:.LC247
	bl	printk
	mvn	r0, #11
	b	.L7835
.L7849:
	movw	r0, #:lower16:.LC718
	mov	r1, r2
	movt	r0, #:upper16:.LC718
	mov	r2, #2048
	bl	printk
	mvn	r0, #21
	b	.L7835
.L7855:
	.align	2
.L7854:
	.word	.LANCHOR4-796
	.word	.LANCHOR4-772
	.word	.LANCHOR5-2312
	.fnend
	.size	grmnet_ctrl_qti_send_cpkt_tomodem, .-grmnet_ctrl_qti_send_cpkt_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	grmnet_ctrl_smd_send_cpkt_tomodem, %function
grmnet_ctrl_smd_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #5
	mov	r3, r0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bhi	.L7857
	movw	r6, #:lower16:.LANCHOR1
	mov	r5, r2
	movt	r6, #:upper16:.LANCHOR1
	mov	r2, #84
	mla	r2, r2, r0, r6
	ldr	r4, [r2, #512]
	cmp	r4, #0
	beq	.L7857
	mov	r0, r5
	mov	r8, r1
	bl	rmnet_alloc_ctrl_pkt.constprop.151
	cmn	r0, #4096
	mov	r7, r0
	bhi	.L7867
	mov	r1, r8
	mov	r2, r5
	ldr	r0, [r0]
	add	r8, r4, #108
	bl	memcpy
	mov	r0, r8
	str	r5, [r7, #4]
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	ldr	r0, [r4, #8]
	ands	r5, r0, #1
	beq	.L7868
	add	r0, r7, #8
	add	r2, r4, #40
	ldr	r1, [r4, #44]
	bl	__list_add
	add	r1, r4, #68
	ldr	r0, [r6, #3604]
	mov	r5, #0
	bl	queue_work
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
.L7856:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7868:
	ldr	r0, [r7]
	bl	kfree
	mov	r0, r7
	bl	kfree
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L7856
.L7857:
	movw	r0, #:lower16:.LC118
	mov	r2, r3
	ldr	r1, .L7869
	movt	r0, #:upper16:.LC118
	mvn	r5, #18
	bl	printk
	b	.L7856
.L7867:
	movw	r0, #:lower16:.LC247
	ldr	r1, .L7869
	mvn	r5, #11
	movt	r0, #:upper16:.LC247
	bl	printk
	b	.L7856
.L7870:
	.align	2
.L7869:
	.word	.LANCHOR5-2276
	.fnend
	.size	grmnet_ctrl_smd_send_cpkt_tomodem, .-grmnet_ctrl_smd_send_cpkt_tomodem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_close, %function
acc_hid_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	acc_hid_close, .-acc_hid_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_command_complete, %function
rmnet_sdio_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r4, #84]
	cmp	r2, #0
	blt	.L7884
	ldr	r3, [r4, #320]
	tst	r3, #2
	bne	.L7885
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7885:
	movw	r3, #:lower16:kmalloc_caches
	mov	r5, r1
	ldr	r6, [r1, #48]
	movt	r3, #:upper16:kmalloc_caches
	ldr	r8, [r3, #24]
	cmp	r8, #0
	beq	.L7875
	mov	r0, r8
	mov	r2, #16
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r8, r0, #0
	beq	.L7877
	mov	r1, #32
	mov	r0, r6
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r8]
	beq	.L7881
	cmn	r8, #4096
	bhi	.L7877
.L7880:
	mov	r2, r6
	ldr	r1, [r5]
	add	r5, r4, #188
	bl	memcpy
	mov	r0, r5
	str	r6, [r8, #4]
	bl	_raw_spin_lock
	add	r0, r8, #8
	add	r2, r4, #108
	ldr	r1, [r4, #112]
	bl	__list_add
	ldr	r3, [r4, #116]
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #116]
	bl	_raw_spin_unlock
	add	r1, r4, #220
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	ldr	r0, [r4, #200]
	ldrd	r4, [sp]
	add	sp, sp, #24
	b	queue_work
.L7875:
	mov	r1, #32
	mov	r0, r6
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r8, #16]
	mov	r8, #16
	bne	.L7880
.L7881:
	mov	r0, r8
	bl	kfree
.L7877:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC720
	movt	r1, #:upper16:.LC720
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_err
.L7884:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC215
	movt	r1, #:upper16:.LC215
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_err
	.fnend
	.size	rmnet_sdio_command_complete, .-rmnet_sdio_command_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_close, %function
modem_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	modem_close, .-modem_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_function_init, %function
qdss_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	qdss_function_init, .-qdss_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ptp_function_init, %function
ptp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	ptp_function_init, .-ptp_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	uasp_function_init, %function
uasp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	uasp_function_init, .-uasp_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_sdio_open, %function
debug_sdio_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	debug_sdio_open, .-debug_sdio_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_smd_open, %function
debug_smd_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	debug_smd_open, .-debug_smd_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_in_close, %function
f_midi_in_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_in_close, .-f_midi_in_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_out_close, %function
f_midi_out_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_out_close, .-f_midi_out_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_start, %function
acc_hid_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	acc_hid_start, .-acc_hid_start
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_open, %function
acc_hid_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	acc_hid_open, .-acc_hid_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	serial_debug_open, %function
serial_debug_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	serial_debug_open, .-serial_debug_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	debug_rmnet_sdio_open, %function
debug_rmnet_sdio_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	debug_rmnet_sdio_open, .-debug_rmnet_sdio_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	dbg_rmnet_mux_open, %function
dbg_rmnet_mux_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	dbg_rmnet_mux_open, .-dbg_rmnet_mux_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	uasp_function_cleanup, %function
uasp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	uasp_function_cleanup, .-uasp_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ptp_function_cleanup, %function
ptp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	ptp_function_cleanup, .-ptp_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_lun_release, %function
fsg_lun_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	fsg_lun_release, .-fsg_lun_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_hid_stop, %function
acc_hid_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	acc_hid_stop, .-acc_hid_stop
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_function_cleanup, %function
audio_source_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #4]
	b	kfree
	.fnend
	.size	audio_source_function_cleanup, .-audio_source_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_function_cleanup, %function
mass_storage_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	mass_storage_function_cleanup, .-mass_storage_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_function_cleanup, %function
rndis_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_function_cleanup, .-rndis_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_cleanup.part.78, %function
gserial_cleanup.part.78:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	ldr	r3, [r6, #3952]
	str	lr, [sp, #24]
	.pad #28
	sub	sp, sp, #28
	cmp	r3, #0
	movne	r4, #0
	beq	.L7912
.L7909:
	mov	r1, r4
	ldr	r0, [r6, #3948]
	add	r4, r4, #1
	bl	tty_unregister_device
	ldr	r3, [r6, #3952]
	cmp	r4, r3
	bcc	.L7909
	cmp	r3, #0
	beq	.L7912
	mov	r3, sp
	ldr	r5, .L7930
	mov	r8, #0
	bic	r9, r3, #8128
	bic	r9, r9, #63
	b	.L7913
.L7928:
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L7914
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L7927
.L7919:
	mov	r0, r4
	add	r8, r8, #1
	bl	kfree
	ldr	r3, [r6, #3952]
	add	r5, r5, #24
	cmp	r8, r3
	bcs	.L7912
.L7913:
	mov	r0, r5
	bl	mutex_lock
	ldr	r4, [r5, #20]
	mov	r3, #0
	mov	r0, r5
	str	r3, [r5, #20]
	bl	mutex_unlock
	add	r0, r4, #60
	bl	cancel_work_sync
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L7928
.L7914:
	mov	r0, r4
	add	r7, r4, #20
	bl	_raw_spin_unlock_irq
	ldr	r0, [r9, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #16
	mov	r3, #0
	movt	r2, #:upper16:autoremove_wake_function
	str	r3, [sp, #4]
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
.L7918:
	mov	r2, #2
	add	r1, sp, #4
	mov	r0, r7
	bl	prepare_to_wait
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #12]
	mov	r0, r4
	cmp	r3, #0
	bne	.L7916
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L7916
	bl	_raw_spin_unlock_irq
	add	r1, sp, #4
	mov	r0, r7
	bl	finish_wait
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L7919
.L7927:
	movw	r0, #:lower16:.LC721
	movw	r1, #1477
	movt	r0, #:upper16:.LC721
	add	r8, r8, #1
	bl	warn_slowpath_null
	mov	r0, r4
	add	r5, r5, #24
	bl	kfree
	ldr	r3, [r6, #3952]
	cmp	r3, r8
	bhi	.L7913
.L7912:
	mov	r4, #0
	ldr	r0, [r6, #3956]
	str	r4, [r6, #3952]
	bl	debugfs_remove_recursive
	ldr	r0, [r6, #3320]
	bl	destroy_workqueue
	ldr	r0, [r6, #3948]
	bl	tty_unregister_driver
	ldr	r0, [r6, #3948]
	bl	put_tty_driver
	ldr	r0, .L7930+4
	str	r4, [r6, #3948]
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L7929
.L7908:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L7916:
	bl	_raw_spin_unlock_irq
	bl	schedule
	b	.L7918
.L7929:
	movw	r1, #:lower16:.LC722
	ldr	r2, .L7930+8
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC722
	bl	__dynamic_pr_debug
	b	.L7908
.L7931:
	.align	2
.L7930:
	.word	.LANCHOR1+3332
	.word	.LANCHOR4-748
	.word	.LANCHOR5-2240
	.fnend
	.size	gserial_cleanup.part.78, .-gserial_cleanup.part.78
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_function_cleanup, %function
acm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r3, #3948]
	cmp	r3, #0
	beq	.L7933
	bl	gserial_cleanup.part.78
.L7933:
	ldr	r0, [r4, #4]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	acm_function_cleanup, .-acm_function_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_complete, %function
f_audio_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r3, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #20
	sub	sp, sp, #20
	ldr	r6, [r1, #32]
	ldr	r7, [r1, #44]
	str	r3, [sp, #12]
	cmp	r7, r3
	bne	.L7939
	ldr	r3, [r6, #172]
	mov	r5, r0
	mov	r4, r1
	cmp	r3, r0
	beq	.L7978
	ldr	r3, [r6, #176]
	cmp	r3, r0
	beq	.L7979
	ldr	r5, [r6, #272]
	cmp	r5, #0
	beq	.L7938
	add	r0, sp, #12
	ldm	r1, {r1, r2}
	bl	memcpy
	ldrh	r2, [sp, #12]
	mov	r0, r5
	ldrb	r1, [r6, #268]	@ zero_extendqisi2
	ldr	r3, [r5, #36]
	blx	r3
	str	r7, [r6, #272]
.L7938:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L7978:
	ldr	r7, [r6, #184]
	cmp	r7, #0
	beq	.L7938
	movw	r8, #:lower16:.LANCHOR0
	ldr	ip, [r7, #4]
	movt	r8, #:upper16:.LANCHOR0
	ldr	r2, [r1, #48]
	ldr	r3, [r8, #1176]
	sub	r1, r3, ip
	cmp	r1, r2
	bcs	.L7943
	ldr	r0, .L7985
	ldrh	r1, [r0, #-2]
	tst	r1, #4
	bne	.L7980
.L7944:
	add	r0, r7, #8
	add	r2, r6, #204
	ldr	r1, [r6, #208]
	bl	__list_add
	add	r0, r6, #188
	bl	schedule_work
	ldr	r0, [r8, #1176]
	bl	f_audio_buffer_alloc
	cmn	r0, #4096
	mov	r7, r0
	bhi	.L7945
	ldr	ip, [r0, #4]
	ldr	r2, [r4, #48]
.L7943:
	ldr	r0, [r7]
	ldr	r1, [r4]
	add	r0, r0, ip
	bl	memcpy
	ldr	r3, [r7, #4]
	mov	r1, r4
	mov	r2, #32
	ldr	ip, [r4, #48]
	mov	r0, r5
	add	r3, r3, ip
	str	r3, [r7, #4]
	str	r7, [r6, #184]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	movwne	r0, #:lower16:.LC724
	ldrne	r1, .L7985+4
	beq	.L7938
.L7977:
	ldr	r2, [r5, #4]
	movt	r0, #:upper16:.LC724
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk
.L7979:
	ldr	r7, [r6, #216]
	cmp	r7, #0
	beq	.L7981
.L7948:
	ldr	r0, .L7985+8
	ldr	r2, [r4, #48]
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L7982
.L7952:
	ldm	r7, {r1, r3}
	ldr	r0, [r4]
	add	r1, r1, r3
	bl	memcpy
	movw	r2, #:lower16:.LANCHOR0
	ldr	r3, [r7, #4]
	ldr	r1, [r4, #48]
	movt	r2, #:upper16:.LANCHOR0
	ldr	r2, [r2, #1260]
	add	r3, r3, r1
	sub	r2, r2, r3
	str	r3, [r7, #4]
	ldr	r3, [r4, #48]
	cmp	r2, r3
	bcs	.L7951
	cmp	r7, #0
	beq	.L7953
	ldr	r0, [r7]
	bl	kfree
	mov	r3, #0
	mov	r0, r7
	str	r3, [r7]
	bl	kfree
.L7953:
	mov	r3, #0
	add	r0, r6, #220
	str	r3, [r6, #216]
	bl	schedule_work
.L7951:
	ldr	r3, [r5, #8]
	mov	r1, r4
	mov	r2, #32
	mov	r0, r5
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L7938
	movw	r0, #:lower16:.LC724
	ldr	r1, .L7985+12
	b	.L7977
.L7981:
	ldr	r0, .L7985+16
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L7983
.L7949:
	add	r8, r6, #212
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r3, r6
	mov	r9, r0
	ldr	r0, [r3, #236]!
	cmp	r0, r3
	beq	.L7984
	sub	r7, r0, #8
	bl	list_del
	mov	r1, r9
	mov	r0, r8
	str	r7, [r6, #216]
	bl	_raw_spin_unlock_irqrestore
	b	.L7948
.L7982:
	movw	r1, #:lower16:.LC726
	mov	r3, r2
	ldr	r2, .L7985+12
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC726
	bl	__dynamic_pr_debug
	ldr	r2, [r4, #48]
	b	.L7952
.L7980:
	movw	r1, #:lower16:.LC723
	sub	r0, r0, #20
	str	ip, [sp]
	movt	r1, #:upper16:.LC723
	str	r2, [sp, #4]
	ldr	r2, .L7985+4
	bl	__dynamic_pr_debug
	b	.L7944
.L7984:
	mov	r0, r8
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore
	add	r0, r6, #220
	bl	schedule_work
	b	.L7951
.L7983:
	movw	r1, #:lower16:.LC725
	ldr	r2, .L7985+12
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC725
	bl	__dynamic_pr_debug
	b	.L7949
.L7945:
	ldr	r1, .L7985+4
	movw	r0, #:lower16:.LC39
	movt	r0, #:upper16:.LC39
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk
.L7939:
	ldr	r1, .L7985+20
	movw	r0, #:lower16:.LC727
	mov	r2, r7
	movt	r0, #:upper16:.LC727
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk
.L7986:
	.align	2
.L7985:
	.word	.LANCHOR4-724
	.word	.LANCHOR5-2224
	.word	.LANCHOR4-676
	.word	.LANCHOR5-2192
	.word	.LANCHOR4-700
	.word	.LANCHOR5-2164
	.fnend
	.size	f_audio_complete, .-f_audio_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	do_set_interface, %function
do_set_interface:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r3, [r0, #144]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	tst	r3, #32
	beq	.L7988
	ldr	r0, .L8026
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8024
.L7988:
	clz	r3, r6
	movw	r9, #:lower16:bulk_in_complete
	lsr	r3, r3, #5
	movw	r8, #:lower16:bulk_out_complete
	mov	r10, #0
	movt	r9, #:upper16:bulk_in_complete
	movt	r8, #:upper16:bulk_out_complete
	str	r10, [sp]
	str	r3, [sp, #4]
.L7997:
	ldr	r10, [r4, #8]
	cmp	r10, #0
	bne	.L8025
.L7989:
	ldm	sp, {r2, r7}
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	cmp	r2, #0
	movne	r7, #1
	bfc	r3, #5, #1
	cmp	r7, #0
	strb	r3, [r4, #144]
	bne	.L8022
	str	r6, [r4, #8]
.L7999:
	ldr	fp, [r6, #100]
	mov	r1, #32
	ldr	r5, [r4, #68]
	ldr	r3, [fp, #8]
	mov	r0, fp
	add	r5, r5, r7
	add	r7, r7, r1
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	mov	r1, #32
	str	r0, [r5, #16]
	beq	.L8021
	ldr	fp, [r6, #104]
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r5, #24]
	beq	.L8021
	ldr	r3, [r5]
	cmp	r7, #128
	str	r3, [r0]
	ldr	r2, [r5, #16]
	str	r3, [r2]
	ldr	r3, [r5, #24]
	str	r5, [r3, #32]
	ldr	r3, [r5, #16]
	str	r5, [r3, #32]
	ldr	r3, [r5, #16]
	str	r9, [r3, #28]
	ldr	r3, [r5, #24]
	str	r8, [r3, #28]
	bne	.L7999
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	ldr	r2, [r4, #92]
	orr	r3, r3, #32
	cmp	r2, #0
	movne	r2, #0
	movne	r0, #10496
	strb	r3, [r4, #144]
	movne	r1, r2
	movtne	r0, 6
	beq	.L8001
.L8000:
	ldr	r3, [r4, #100]
	add	r1, r1, #1
	add	r3, r3, r2
	add	r2, r2, #392
	str	r0, [r3, #36]
	ldr	r3, [r4, #92]
	cmp	r3, r1
	bhi	.L8000
.L8001:
	mov	r10, #0
.L7987:
	mov	r0, r10
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8025:
	mov	r7, #0
	mov	fp, r7
.L7992:
	ldr	r5, [r4, #68]
	add	r5, r5, r7
	add	r7, r7, #32
	ldr	r1, [r5, #16]
	cmp	r1, #0
	beq	.L7990
	ldr	r0, [r10, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	str	fp, [r5, #16]
.L7990:
	ldr	r1, [r5, #24]
	cmp	r1, #0
	beq	.L7991
	ldr	r0, [r10, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	str	fp, [r5, #24]
.L7991:
	cmp	r7, #128
	bne	.L7992
	mov	r0, #0
	mov	r2, #1
	mov	r3, r0
	mov	r1, #3
	str	r0, [r4, #8]
	add	r0, r4, #16
	bl	__wake_up
	b	.L7989
.L8024:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC728
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC728
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L7988
.L8022:
	mov	r10, r2
	b	.L7987
.L8021:
	ldr	r0, [r4]
	mvn	r3, #11
	movw	r1, #:lower16:.LC729
	movt	r1, #:upper16:.LC729
	str	r3, [sp]
	ldr	r2, [fp, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L7997
.L8027:
	.align	2
.L8026:
	.word	.LANCHOR4-652
	.fnend
	.size	do_set_interface, .-do_set_interface
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_unbind, %function
audio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	add	r8, r1, #108
	add	r9, r1, #96
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	b	.L8029
.L8030:
	bl	list_del
	mov	r1, r5
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L8031
	ldr	r5, [r6, #104]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L8029:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r6, #96]
	mov	r5, r0
	cmp	r4, r9
	mov	r0, r4
	sub	r7, r4, #36
	bne	.L8030
	mov	r1, r5
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
.L8031:
	ldr	r0, [r6, #84]
	bl	snd_card_free_when_closed
	mov	r3, #0
	str	r3, [r6, #84]
	str	r3, [r6, #88]
	str	r3, [r6, #92]
	str	r3, [r6, #104]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	audio_unbind, .-audio_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_poll, %function
conn_gadget_poll:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	subs	r6, r1, #0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #124]
	beq	.L8036
	ldr	r5, [r6]
	mov	r7, r0
	adds	r3, r5, #0
	movne	r3, #1
	adds	r1, r4, #144
	movne	r2, r3
	moveq	r2, #0
	cmp	r2, #0
	bne	.L8052
	adds	r1, r4, #156
	moveq	r3, #0
	cmp	r3, #0
	bne	.L8053
.L8036:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2484]
	cmp	r3, #0
	beq	.L8054
	ldr	r5, [r3, #100]
	cmp	r5, #0
	beq	.L8055
	add	r3, r4, #108
	.syntax divided
@ 61 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #1
	bne	.L8041
	ldr	r5, [r4, #168]
	ldr	r2, [r4, #172]
	cmp	r5, r2
	movne	r5, #65
	moveq	r5, #0
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L8044:
	add	r6, r4, #88
	add	r4, r4, #120
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4]
	mov	r1, r0
	mov	r0, r6
	cmp	r3, r4
	beq	.L8045
	orr	r5, r5, #260
	bl	_raw_spin_unlock_irqrestore
.L8034:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8053:
	mov	r2, r6
	mov	r0, r7
	blx	r5
	b	.L8036
.L8052:
	mov	r2, r6
	blx	r5
	ldr	r5, [r6]
	adds	r3, r5, #0
	movne	r3, #1
	adds	r1, r4, #156
	moveq	r3, #0
	cmp	r3, #0
	beq	.L8036
	b	.L8053
.L8045:
	bl	_raw_spin_unlock_irqrestore
	b	.L8034
.L8041:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r5, #0
	b	.L8044
.L8055:
	movw	r0, #:lower16:.LC730
	ldr	r1, .L8056
	movt	r0, #:upper16:.LC730
	bl	printk
	b	.L8034
.L8054:
	movw	r0, #:lower16:.LC450
	ldr	r1, .L8056
	mov	r5, #40
	movt	r0, #:upper16:.LC450
	bl	printk
	b	.L8034
.L8057:
	.align	2
.L8056:
	.word	.LANCHOR5-2144
	.fnend
	.size	conn_gadget_poll, .-conn_gadget_poll
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_read, %function
ffs_ep0_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 1, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r8, #:lower16:__stack_chk_guard
	strd	r10, [sp, #24]
	.setfp fp, sp, #32
	add	fp, sp, #32
	movt	r8, #:upper16:__stack_chk_guard
	str	lr, [sp, #32]
	.pad #52
	sub	sp, sp, #52
	ldr	r3, [r8]
	str	r1, [fp, #-68]
	ldr	r7, [r0, #124]
	str	r2, [fp, #-64]
	str	r3, [fp, #-40]
	add	r4, r7, #96
	.syntax divided
@ 193 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
.L8059:
	.syntax divided
@ 170 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r1, [r4]
	mov	r2, #0
	teq	r1, #2
	strexeq r2, r3, [r4]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	bne	.L8059
	.syntax divided
@ 195 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #2
	beq	.L8089
	ldr	r3, [r5, #32]
	add	r9, r7, #4
	mov	r0, r9
	tst	r3, #2048
	bne	.L8116
	bl	mutex_lock_interruptible
	subs	r10, r0, #0
	blt	.L8058
.L8064:
	ldr	r3, [r7, #92]
	cmp	r3, #2
	mvnne	r10, #76
	movne	r5, #0
	beq	.L8117
.L8062:
	mov	r0, r9
	bl	mutex_unlock
	mov	r0, r5
	bl	kfree
.L8058:
	ldr	r2, [fp, #-40]
	mov	r0, r10
	ldr	r3, [r8]
	cmp	r2, r3
	bne	.L8118
	sub	sp, fp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8116:
	bl	mutex_trylock
	cmp	r0, #0
	bne	.L8064
	mvn	r10, #10
	b	.L8058
.L8117:
	add	r3, r7, #116
	mov	r0, r3
	str	r3, [fp, #-72]
	bl	_raw_spin_lock_irq
	.syntax divided
@ 193 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
.L8065:
	.syntax divided
@ 170 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r10, [r4]
	mov	r6, #0
	teq	r10, #2
	strexeq r6, r3, [r4]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r6, #0
	bne	.L8065
	.syntax divided
@ 195 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r10, #1
	beq	.L8066
	cmp	r10, #0
	beq	.L8067
	cmp	r10, #2
	mov	r5, r6
	mvneq	r10, #42
	mvnne	r10, #76
.L8068:
	ldr	r0, [fp, #-72]
	bl	_raw_spin_unlock_irq
	b	.L8062
.L8067:
	ldr	r3, [fp, #-64]
	cmp	r3, #11
	bls	.L8093
	ldr	r3, [r5, #32]
	ldrh	r5, [r7, #104]
	tst	r3, #2048
	bne	.L8119
	cmp	r5, #0
	bne	.L8070
	mov	r6, #57344
	mov	r3, sp
	strd	r8, [fp, #-80]
	movt	r6, 65535
	movw	r2, #:lower16:autoremove_wake_function
	str	r5, [fp, #-60]
	and	r3, r3, r6
	str	r5, [fp, #-56]
	movt	r2, #:upper16:autoremove_wake_function
	str	r5, [fp, #-52]
	sub	r4, fp, #48
	mov	r1, #1
	str	r5, [fp, #-48]
	mov	r10, r1
	ldr	r8, [fp, #-72]
	str	r5, [fp, #-44]
	ldr	r0, [r3, #12]
	mov	r3, r4
	str	r1, [fp, #-60]
	str	r2, [fp, #-52]
	add	r2, r7, #120
	mov	r9, r2
	str	r0, [fp, #-56]
	str	r4, [fp, #-48]
	str	r4, [fp, #-44]
	b	.L8074
.L8120:
	mov	r0, r8
	bl	_raw_spin_unlock_irq
	bl	schedule
	mov	r0, r8
	bl	_raw_spin_lock_irq
	ldrh	r3, [r7, #104]
	cmp	r3, #0
	bne	.L8073
	ldr	r3, [fp, #-48]
.L8074:
	cmp	r3, r4
	bne	.L8071
	mov	r2, r9
	mov	r0, r4
	ldr	r1, [r7, #124]
	bl	__list_add
.L8071:
	mov	r3, sp
	and	r3, r3, r6
	ldr	r2, [r3, #12]
	str	r10, [r2]
	.syntax divided
@ 635 "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_fs.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r5, [r3]
	ands	r5, r5, #1
	beq	.L8120
	mov	r0, r4
	ldrd	r8, [fp, #-80]
	mvn	r10, #3
	bl	list_del
	mov	r3, sp
	mov	r2, #0
	and	r6, r6, r3
	mov	r5, r2
	ldr	r1, [r6, #12]
	str	r2, [r1]
	b	.L8068
.L8066:
	ldrsb	r3, [r7, #108]
	cmp	r3, #0
	blt	.L8121
	ldrh	r6, [r7, #114]
	ldr	r0, [fp, #-72]
	ldr	r3, [fp, #-64]
	cmp	r6, r3
	movcs	r6, r3
	bl	_raw_spin_unlock_irq
	cmp	r6, #0
	beq	.L8097
	mov	r1, #208
	mov	r0, r6
	bl	__kmalloc
	subs	r5, r0, #0
	beq	.L8122
.L8086:
	ldr	r0, [fp, #-72]
	bl	_raw_spin_lock_irq
	.syntax divided
@ 193 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
.L8087:
	.syntax divided
@ 170 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r1, [r4]
	mov	r2, #0
	teq	r1, #2
	strexeq r2, r3, [r4]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	bne	.L8087
	.syntax divided
@ 195 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #2
	mvneq	r10, #42
	beq	.L8068
	mov	r0, r7
	mov	r2, r6
	mov	r1, r5
	bl	__ffs_ep0_queue_wait
	subs	r10, r0, #0
	ble	.L8062
	mov	r2, r6
	mov	r1, r5
	ldr	r0, [fp, #-68]
	bl	__copy_to_user
	cmp	r0, #0
	mvnne	r10, #13
	b	.L8062
.L8119:
	cmp	r5, #0
	bne	.L8070
	mvn	r10, #10
	b	.L8068
.L8097:
	mov	r5, r6
	b	.L8086
.L8073:
	mov	r0, r4
	ldrd	r8, [fp, #-80]
	bl	list_del
	mov	r3, sp
	and	r6, r6, r3
	ldr	r3, [r6, #12]
	str	r5, [r3]
	ldrh	r5, [r7, #104]
.L8070:
	ldr	r2, [fp, #-64]
	movw	r3, #43691
	mov	r4, sp
	movt	r3, 43690
	umull	r2, r3, r3, r2
	lsr	r3, r3, #3
	cmp	r3, r5
	movcc	r10, r3
	movcs	r10, r5
	add	r5, r10, r10, lsl #1
	lsl	r5, r5, #2
	add	r2, r5, #7
	cmp	r5, #0
	bic	r2, r2, #7
	sub	sp, sp, r2
	mov	r6, sp
	bne	.L8123
.L8075:
	ldrb	r2, [r7, #100]	@ zero_extendqisi2
	cmp	r2, #4
	strb	r2, [r6, #8]
	bne	.L8076
	ldrd	r0, [r7, #108]
	mov	r2, #1
	str	r0, [r6]	@ unaligned
	str	r1, [r6, #4]	@ unaligned
	str	r2, [r7, #96]
.L8076:
	cmp	r10, #1
	bls	.L8077
	ldrb	r2, [r7, #101]	@ zero_extendqisi2
	cmp	r2, #4
	strb	r2, [r6, #20]
	bne	.L8078
	ldrd	r0, [r7, #108]
	mov	r2, #1
	str	r0, [r6, #12]	@ unaligned
	str	r1, [r6, #16]	@ unaligned
	str	r2, [r7, #96]
.L8078:
	cmp	r10, #2
	beq	.L8077
	ldrb	r2, [r7, #102]	@ zero_extendqisi2
	cmp	r2, #4
	strb	r2, [r6, #32]
	bne	.L8079
	ldrd	r0, [r7, #108]
	mov	r2, #1
	str	r0, [r6, #24]	@ unaligned
	str	r1, [r6, #28]	@ unaligned
	str	r2, [r7, #96]
.L8079:
	cmp	r10, #3
	beq	.L8077
	ldrb	r2, [r7, #103]	@ zero_extendqisi2
	cmp	r2, #4
	strb	r2, [r6, #44]
	bne	.L8077
	ldrd	r0, [r7, #108]
	mov	r2, #1
	str	r0, [r6, #36]	@ unaligned
	str	r1, [r6, #40]	@ unaligned
	str	r2, [r7, #96]
.L8077:
	ldrh	r2, [r7, #104]
	cmp	r10, r2
	movcs	r3, #0
	strhcs	r3, [r7, #104]	@ movhi
	bcc	.L8124
.L8082:
	ldr	r0, [fp, #-72]
	bl	_raw_spin_unlock_irq
	mov	r0, r9
	bl	mutex_unlock
	mov	r2, r5
	mov	r1, r6
	ldr	r0, [fp, #-68]
	bl	__copy_to_user
	cmp	r0, #0
	mov	sp, r4
	moveq	r10, r5
	mvnne	r10, #13
	b	.L8058
.L8121:
	ldr	r0, [fp, #-72]
	bl	_raw_spin_unlock_irq
	ldrh	r3, [r7, #106]
	cmp	r3, #0
	beq	.L8085
	ldr	r2, [r7]
	mov	r1, r10
	mov	r5, r6
	mvn	r10, #50
	ldr	r0, [r2, #4]
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #24]
	blx	r2
	str	r6, [r7, #96]
	b	.L8062
.L8123:
	mov	r1, r5
	mov	r0, sp
	bl	__memzero
	b	.L8075
.L8124:
	sub	r2, r2, r10
	add	r0, r7, #100
	uxth	r2, r2
	add	r1, r0, r10
	strh	r2, [r7, #104]	@ movhi
	bl	memmove
	b	.L8082
.L8089:
	mvn	r10, #42
	b	.L8058
.L8085:
	ldr	r0, .L8125
	ldrh	r5, [r0, #-2]
	ubfx	r5, r5, #2, #1
	cmp	r5, #0
	mvneq	r10, #2
	beq	.L8062
	movw	r1, #:lower16:.LC731
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC731
	mov	r5, r3
	mvn	r10, #2
	bl	__dynamic_pr_debug
	b	.L8062
.L8093:
	mov	r5, r10
	mvn	r10, #21
	b	.L8068
.L8122:
	mvn	r10, #11
	b	.L8062
.L8118:
	bl	__stack_chk_fail
.L8126:
	.align	2
.L8125:
	.word	.LANCHOR4-628
	.fnend
	.size	ffs_ep0_read, .-ffs_ep0_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_complete_in, %function
acc_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r3, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r3, #2488]
	cmn	r2, #108
	beq	.L8134
.L8128:
	add	r5, r4, #88
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	add	r2, r4, #1648
	mov	r7, r0
	ldr	r1, [r4, #1660]
	add	r0, r6, #36
	add	r2, r2, #8
	bl	__list_add
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	add	r0, r4, #1664
	mov	r3, #0
	ldrd	r4, [sp]
	add	r0, r0, #12
	mov	r2, #1
	ldrd	r6, [sp, #8]
	mov	r1, #3
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
.L8134:
	ldr	r0, .L8136
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8135
.L8129:
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	bic	r3, r3, #3
	orr	r3, r3, #2
	strb	r3, [r4, #100]
	b	.L8128
.L8135:
	movw	r1, #:lower16:.LC732
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC732
	bl	__dynamic_pr_debug
	b	.L8129
.L8137:
	.align	2
.L8136:
	.word	.LANCHOR4-604
	.fnend
	.size	acc_complete_in, .-acc_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_probe, %function
ghsic_data_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L8172
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r5, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r5, #:upper16:.LANCHOR1
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	ldr	r7, [r0]
	ldr	r6, [r5, #1436]
	ldrh	r3, [r2, #-2]
	tst	r3, #4
	bne	.L8170
.L8139:
	cmp	r6, #0
	beq	.L8140
	ldr	r4, [r5, #1440]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L8141
	cmp	r6, #1
	bls	.L8140
	ldr	r4, [r5, #1544]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L8141
	cmp	r6, #2
	beq	.L8140
	ldr	r4, [r5, #1648]
	mov	r2, #20
	mov	r1, r7
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L8141
	cmp	r6, #3
	beq	.L8140
	ldr	r4, [r5, #1752]
	mov	r1, r7
	mov	r2, #20
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L8141
.L8140:
	movw	r0, #:lower16:.LC182
	mvn	r2, #21
	ldr	r1, .L8172+4
	movt	r0, #:upper16:.LC182
	bl	printk
	mvn	r0, #21
	b	.L8138
.L8141:
	mov	r0, #1
	add	r1, r4, #180
	bl	_set_bit
	ldr	r0, [r4, #4]
	cmp	r0, #0
	bne	.L8171
.L8138:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L8171:
	add	r1, r4, #88
	ldr	r0, [r4, #84]
	bl	queue_work
	mov	r0, #0
	b	.L8138
.L8170:
	movw	r1, #:lower16:.LC733
	mov	r4, r0
	str	r6, [sp]
	mov	r3, r7
	sub	r0, r2, #20
	ldr	r2, .L8172+4
	movt	r1, #:upper16:.LC733
	bl	__dynamic_pr_debug
	ldr	r7, [r4]
	ldr	r6, [r5, #1436]
	b	.L8139
.L8173:
	.align	2
.L8172:
	.word	.LANCHOR4-580
	.word	.LANCHOR5-2124
	.fnend
	.size	ghsic_data_probe, .-ghsic_data_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_probe, %function
ghsic_ctrl_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L8210
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
	ldrh	r3, [ip, #-2]
	tst	r3, #4
	bne	.L8209
.L8175:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r7, [r5, #1016]
	cmp	r7, #0
	beq	.L8176
	ldr	r4, [r5, #1020]
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L8177
	cmp	r7, #1
	bls	.L8176
	ldr	r4, [r5, #1124]
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L8177
	cmp	r7, #2
	beq	.L8176
	ldr	r4, [r5, #1228]
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L8177
	cmp	r7, #3
	beq	.L8176
	ldr	r4, [r5, #1332]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #64]
	bl	strncmp
	cmp	r0, #0
	beq	.L8177
.L8176:
	movw	r0, #:lower16:.LC182
	mvn	r2, #21
	ldr	r1, .L8210+4
	movt	r0, #:upper16:.LC182
	bl	printk
	mvn	r0, #21
	b	.L8174
.L8177:
	add	r1, r4, #84
	mov	r0, #1
	add	r5, r4, #4
	bl	_set_bit
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #8]
	mov	r6, r0
	cmp	r3, #0
	beq	.L8180
	add	r1, r4, #16
	ldr	r0, [r4, #12]
	bl	queue_work
.L8180:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
.L8174:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8209:
	movw	r1, #:lower16:.LC180
	mov	r4, r0
	ldr	r2, .L8210+4
	mov	r3, r6
	sub	r0, ip, #20
	movt	r1, #:upper16:.LC180
	bl	__dynamic_pr_debug
	ldr	r6, [r4]
	b	.L8175
.L8211:
	.align	2
.L8210:
	.word	.LANCHOR4-556
	.word	.LANCHOR5-2104
	.fnend
	.size	ghsic_ctrl_probe, .-ghsic_ctrl_probe
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_data_complete, %function
audio_data_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L8225
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8223
.L8213:
	add	r6, r4, #108
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	add	r2, r4, #96
	ldr	r1, [r4, #100]
	add	r0, r5, #36
	bl	__list_add
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #112]
	cmp	r3, #0
	beq	.L8212
	ldr	r6, [r5, #44]
	cmp	r6, #0
	bne	.L8212
	ldr	r1, [r5, #48]
	ldrd	r2, [r4, #124]
	add	r3, r3, r1
	cmp	r3, r2
	str	r3, [r4, #128]
	bcs	.L8224
.L8215:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	audio_send
.L8212:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8224:
	ldr	r0, [r4, #92]
	bl	snd_pcm_period_elapsed
	str	r6, [r4, #128]
	b	.L8215
.L8223:
	movw	r1, #:lower16:.LC734
	sub	r0, r0, #20
	ldrd	r2, [r5, #44]
	movt	r1, #:upper16:.LC734
	bl	__dynamic_pr_debug
	b	.L8213
.L8226:
	.align	2
.L8225:
	.word	.LANCHOR4-532
	.fnend
	.size	audio_data_complete, .-audio_data_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_remove, %function
android_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	mov	r8, r6
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r7, [r0, #88]
	ldr	r1, [r8, #3232]!
	cmp	r7, #0
	ldrbne	r2, [r7, #8]	@ zero_extendqisi2
	moveq	r2, r7
	cmp	r1, r8
	sub	r4, r1, #512
	mov	r5, r1
	beq	.L8229
	ldr	r3, [r1, #-468]
	cmp	r3, #0
	beq	.L8229
	ldrb	r3, [r3, #8]	@ zero_extendqisi2
	cmp	r2, r3
	bne	.L8230
	b	.L8229
.L8231:
	ldr	r3, [r3, #-468]
	cmp	r3, #0
	beq	.L8229
	ldrb	r3, [r3, #8]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L8229
.L8230:
	ldr	r3, [r4, #512]
	cmp	r3, r8
	mov	r5, r3
	sub	r4, r3, #512
	bne	.L8231
.L8229:
	cmp	r4, #0
	beq	.L8232
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r1, [r3, #1264]
	cmp	r1, #0
	ldrne	r9, .L8259
	beq	.L8236
.L8233:
	ldr	r0, [r4, #12]
	bl	device_remove_file
	ldr	r1, [r9], #4
	cmp	r1, #0
	bne	.L8233
.L8236:
	ldr	r3, [r4, #12]
	ldr	r0, [r6, #3756]
	ldr	r1, [r3, #288]
	bl	device_destroy
	cmp	r7, #0
	beq	.L8235
	ldr	r3, [r7, #4]
	cmp	r3, #0
	bne	.L8257
.L8235:
	mov	r0, r5
	bl	list_del
	ldr	r3, [r6, #3588]
	mov	r0, r4
	sub	r3, r3, #1
	str	r3, [r6, #3588]
	bl	kfree
	ldr	r1, [r6, #3232]
.L8232:
	cmp	r1, r8
	beq	.L8258
.L8238:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L8257:
	add	r0, r4, #60
	bl	pm_qos_remove_request
	b	.L8235
.L8258:
	ldr	r0, [r6, #3756]
	bl	class_destroy
	ldr	r3, .L8259+4
	mov	r2, #0
	ldr	r0, [r6, #2476]
	str	r2, [r6, #3756]
	cmp	r0, r3
	bne	.L8238
	sub	r0, r0, #984
	bl	usb_gadget_unregister_driver
	b	.L8238
.L8260:
	.align	2
.L8259:
	.word	.LANCHOR0+1268
	.word	.LANCHOR0+1340
	.fnend
	.size	android_remove, .-android_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_complete_in, %function
ccid_bulk_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r3, #3592]
	cmp	r2, #0
	movne	r3, #1
	add	r5, r4, #92
	mov	r0, r5
	strne	r3, [r4, #148]
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	add	r2, r4, #192
	ldr	r1, [r4, #196]
	add	r0, r6, #36
	bl	__list_add
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	add	r0, r4, #172
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
	.fnend
	.size	ccid_bulk_complete_in, .-ccid_bulk_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_write_tohost, %function
ghsic_data_write_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #136
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #88
	mov	r0, r7
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave
	ldr	r9, [r4, #-128]
	mov	r8, r0
	cmp	r9, #0
	beq	.L8271
	movw	r3, #:lower16:.LANCHOR1
	movw	fp, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR1
	movt	fp, #:upper16:.LANCHOR0
	str	r3, [sp, #4]
	sub	r3, r4, #112
	str	r3, [sp]
.L8270:
	ldr	r3, [r4, #-112]
	ldr	r2, [sp]
	cmp	r3, r2
	beq	.L8271
	mov	r3, r4
	ldr	r5, [r3, #-104]!
	cmp	r5, r3
	beq	.L8271
	cmp	r5, #0
	beq	.L8271
	ldr	r3, [r4, #-96]
	mov	r0, #0
	mov	r1, #0
	sub	r3, r3, #1
	str	r3, [r4, #-96]
	ldrd	r2, [r5]
	strd	r0, [r5]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r6, [r4, #-112]
	str	r5, [r6, #-4]
	ldr	r2, [r5, #172]
	sub	r10, r6, #36
	ldrb	r3, [r6, #-10]	@ zero_extendqisi2
	str	r2, [r6, #-36]
	ldr	r2, [r5, #80]
	orr	r3, r3, #2
	str	r2, [r6, #-32]
	strb	r3, [r6, #-10]
	ldr	r3, [r4, #48]
	ldr	r2, [fp, #1384]
	add	r3, r3, #1
	cmp	r3, r2
	str	r3, [r4, #48]
	ldrb	r3, [r6, #-10]	@ zero_extendqisi2
	orrne	r3, r3, #1
	strbne	r3, [r6, #-10]
	bne	.L8273
	mov	r2, #0
	bfc	r3, #0, #1
	strb	r3, [r6, #-10]
	str	r2, [r4, #48]
.L8273:
	mov	r0, r6
	bl	list_del
	ldr	r3, [sp, #4]
	ldr	r3, [r3, #3856]
	cmp	r3, #0
	beq	.L8274
	add	r0, sp, #8
	bl	do_gettimeofday
	ldr	r3, [sp, #8]
	movw	r2, #16960
	ldr	r1, [sp, #12]
	movt	r2, 15
	ubfx	r3, r3, #0, #12
	mla	r3, r2, r3, r1
.L8274:
	mov	r1, r8
	mov	r0, r7
	str	r3, [r5, #44]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r9, #8]
	mov	r1, r10
	mov	r2, #208
	mov	r0, r9
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	cmp	r10, #0
	mov	r8, r0
	bne	.L8298
	ldr	r3, [r4, #56]
	ldr	r2, [fp, #596]
	add	r3, r3, #1
	cmp	r2, #0
	str	r3, [r4, #56]
	beq	.L8270
	ldr	r2, [r4, #-96]
	ldr	r3, [fp, #1388]
	cmp	r2, r3
	bhi	.L8270
	add	r1, r4, #28
	mov	r0, #2
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L8270
	ldr	r2, [r4, #-96]
	ldr	r3, [r4, #64]
	str	r2, [r4, #80]
	add	r3, r3, #1
	str	r3, [r4, #64]
	b	.L8270
.L8298:
	movw	r0, #:lower16:.LC617
	ldr	r1, .L8299
	movt	r0, #:upper16:.LC617
	bl	printk
	mov	r0, r6
	ldr	r2, [r4, #-112]
	ldr	r1, [sp]
	bl	__list_add
	mov	r0, r5
	bl	dev_kfree_skb_any
.L8271:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8300:
	.align	2
.L8299:
	.word	.LANCHOR5-2084
	.fnend
	.size	ghsic_data_write_tohost, .-ghsic_data_write_tohost
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_write_tomdm, %function
ghsic_data_write_tomdm:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	subs	r8, r0, #120
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	beq	.L8301
	ldr	r3, [r0, #-116]
	cmp	r3, #0
	bne	.L8359
.L8301:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8359:
	sub	r7, r0, #40
	mov	r4, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #44]
	mov	r6, r0
	tst	r3, #2
	bne	.L8307
	mov	r3, r4
	ldr	r5, [r3, #-56]!
	cmp	r5, r3
	beq	.L8307
	cmp	r5, #0
	beq	.L8307
	ldr	r3, [r4, #-48]
	mov	r10, #0
	mov	fp, #0
	ldr	r0, .L8365
	ldr	r9, .L8365+4
	sub	r3, r3, #1
	str	r3, [r4, #-48]
	ldrd	r2, [r5]
	strd	r10, [r5]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8308
.L8309:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #3856]
	cmp	r3, #0
	beq	.L8305
	add	r0, sp, #24
	bl	do_gettimeofday
	ldr	r3, [sp, #24]
	movw	r2, #16960
	ldr	r1, [sp, #28]
	movt	r2, 15
	ubfx	r3, r3, #0, #12
	mla	r3, r2, r3, r1
.L8305:
	mov	r1, r6
	mov	r0, r7
	str	r3, [r5, #40]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	sub	r9, r9, #12
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r1, r9
	ldr	r0, .L8365+8
	bl	___ratelimit
	cmp	r0, #0
	beq	.L8306
	movw	r0, #:lower16:.LC121
	mov	r1, r9
	movt	r0, #:upper16:.LC121
	mvn	r2, #18
	bl	printk
.L8306:
	ldr	r3, [r4, #92]
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #92]
	bl	dev_kfree_skb_any
.L8307:
.L8304:
	mov	r0, r7
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, .L8365+12
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8360
.L8310:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r8, [r4, #-108]
	mov	r5, r0
	cmp	r8, #0
	beq	.L8312
	movw	r3, #:lower16:.LANCHOR1
	movw	r9, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR1
	movw	fp, #16960
	movt	r9, #:upper16:.LANCHOR0
	movt	fp, 15
	str	r3, [sp, #12]
	b	.L8311
.L8363:
	bl	do_gettimeofday
	ldr	r1, [sp, #8]
	mov	r2, #208
	mov	r0, r8
	ldr	ip, [sp, #24]
	ldr	lr, [sp, #28]
	ubfx	ip, ip, #0, #12
	mla	ip, fp, ip, lr
	str	ip, [r10, #32]
	ldr	ip, [r8, #8]
.L8358:
	ldr	r5, [ip, #16]
	blx	r5
	mov	r2, r0
	mov	r0, r7
	str	r2, [sp, #16]
	bl	_raw_spin_lock_irqsave
	ldr	r2, [sp, #16]
	mov	r5, r0
	cmp	r2, #0
	bne	.L8361
.L8311:
	ldr	r3, [r4, #-116]
	sub	r2, r4, #64
	str	r2, [sp, #20]
	cmp	r3, #0
	beq	.L8312
	ldr	r6, [r4, #-64]
	sub	r3, r6, #36
	cmp	r6, r2
	mov	r0, r6
	str	r3, [sp, #8]
	beq	.L8312
	ldr	r2, [r4, #-48]
	ldr	r3, [r9, #1416]
	cmp	r2, r3
	bhi	.L8312
	bl	list_del
	mov	r1, r5
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #12]
	add	r0, sp, #24
	ldr	r5, [r3, #3856]
	cmp	r5, #0
	beq	.L8313
	bl	do_gettimeofday
	ldr	r5, [sp, #24]
	ldr	r3, [sp, #28]
	ubfx	r5, r5, #0, #12
	mla	r5, fp, r5, r3
.L8313:
	mov	r2, #0
	mov	r1, #208
	ldr	r0, [r9, #1420]
	mvn	r3, #0
	bl	__alloc_skb
	subs	r10, r0, #0
	mov	r2, #208
	ldr	r1, [sp, #8]
	add	r0, sp, #24
	beq	.L8362
	ldr	ip, [r10, #172]
	str	r5, [r10, #28]
	ldr	r3, [sp, #12]
	str	ip, [r6, #-36]
	ldr	ip, [r9, #1420]
	str	ip, [r6, #-32]
	str	r10, [r6, #-4]
	ldr	ip, [r3, #3856]
	cmp	ip, #0
	bne	.L8363
	mov	r0, r8
	str	ip, [r10, #32]
	ldr	ip, [r8, #8]
	b	.L8358
.L8361:
	ldr	r9, .L8365+16
	mov	r0, r10
	bl	dev_kfree_skb_any
	ldr	r0, .L8365+20
	mov	r1, r9
	bl	___ratelimit
	cmp	r0, #0
	beq	.L8318
	movw	r0, #:lower16:.LC616
	mov	r1, r9
	movt	r0, #:upper16:.LC616
	bl	printk
.L8318:
	ldr	r3, [r4, #-116]
	cmp	r3, #0
	bne	.L8364
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r1, [sp, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L8312:
	mov	r1, r5
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L8301
.L8362:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	mov	r0, r6
	ldr	r2, [r4, #-64]
	ldr	r1, [sp, #20]
	bl	__list_add
	b	.L8312
.L8360:
	movw	r1, #:lower16:.LC601
	mov	r3, r8
	ldr	r2, .L8365+16
	movt	r1, #:upper16:.LC601
	sub	r0, r0, #20
	bl	__dynamic_pr_debug
	b	.L8310
.L8308:
	ldr	lr, [r4, #-120]
	movw	r1, #:lower16:.LC615
	mov	r3, r8
	ldr	ip, [r4, #68]
	movt	r1, #:upper16:.LC615
	sub	r2, r9, #12
	sub	r0, r0, #20
	stm	sp, {ip, lr}
	bl	__dynamic_pr_debug
	b	.L8309
.L8364:
	mov	r0, r6
	ldr	r2, [r4, #-64]
	ldr	r1, [sp, #20]
	bl	__list_add
	b	.L8312
.L8366:
	.align	2
.L8365:
	.word	.LANCHOR4-508
	.word	.LANCHOR5-2048
	.word	.LANCHOR0+1392
	.word	.LANCHOR4-484
	.word	.LANCHOR5-2036
	.word	.LANCHOR0+1424
	.fnend
	.size	ghsic_data_write_tomdm, .-ghsic_data_write_tomdm
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	start_in_transfer, %function
start_in_transfer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #8]
	cmp	r4, #0
	beq	.L8368
	ldr	r0, [r4, #88]
	mov	r5, r1
	ldr	r7, [r1, #16]
	ldr	r6, [r4, #100]
	add	r0, r0, #44
	bl	_raw_spin_lock_irq
	mov	r3, #1
	mov	r2, #2
	str	r2, [r5, #4]
	str	r3, [r5, #20]
	ldr	r0, [r4, #88]
	add	r0, r0, #44
	bl	_raw_spin_unlock_irq
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	mov	r2, #208
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L8380
	mov	r2, #0
	cmn	r3, #108
	str	r2, [r5, #4]
	str	r2, [r5, #20]
	beq	.L8380
	cmn	r3, #95
	bne	.L8372
	ldr	r2, [r7, #4]
	cmp	r2, #0
	bne	.L8372
.L8380:
	mov	r0, #1
.L8370:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8372:
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC89
	movt	r1, #:upper16:.LC89
	ldr	r2, [r6, #4]
	add	r0, r0, #32
	bl	dev_warn
	b	.L8380
.L8368:
	ldr	r0, [r0]
	movw	r1, #:lower16:.LC87
	mov	r3, #796
	movt	r1, #:upper16:.LC87
	ldr	r2, .L8381
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC88
	movw	r1, #550
	movt	r0, #:upper16:.LC88
	bl	warn_slowpath_null
	mov	r0, r4
	b	.L8370
.L8382:
	.align	2
.L8381:
	.word	.LANCHOR5-2016
	.fnend
	.size	start_in_transfer, .-start_in_transfer
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	send_status, %function
send_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r4, r0, #44
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #104]
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r6, [r5, #60]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L8384
	b	.L8388
.L8408:
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L8388
.L8384:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	sleep_thread
	subs	r3, r0, #0
	mov	r0, r4
	beq	.L8408
.L8383:
	ldrd	r4, [sp]
	mov	r0, r3
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8388:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	cmp	r7, #0
	beq	.L8409
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	tst	r3, #4
	beq	.L8410
.L8389:
	ldr	r0, .L8412
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	moveq	r7, #2
	bne	.L8411
.L8392:
	ldr	r3, [r6]
	movw	r1, #21333
	movw	r2, #:lower16:.LANCHOR1
	movt	r1, 21314
	movt	r2, #:upper16:.LANCHOR1
	ldr	r0, [r2, #3964]
	str	r1, [r3]
	ldr	r1, [r5, #132]
	cmp	r0, #0
	str	r1, [r3, #4]
	ldr	r1, [r5, #136]
	str	r1, [r3, #8]
	movne	r1, #0
	streq	r0, [r3, #8]
	mov	r0, r5
	strb	r7, [r3, #12]
	ldr	r3, [r6, #16]
	strne	r1, [r2, #3964]
	mov	r2, #13
	mov	r1, r6
	str	r2, [r3, #4]
	ldr	r3, [r6, #16]
	ldrb	r2, [r3, #26]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #26]
	bl	start_in_transfer
	cmp	r0, #0
	ldrne	r2, [r6, #8]
	movne	r3, #0
	mvneq	r3, #4
	strne	r2, [r5, #60]
	b	.L8383
.L8410:
	ldr	r7, [r7, #28]
	cmp	r7, #0
	beq	.L8392
.L8393:
	ldr	r0, .L8412+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	moveq	r7, #1
	beq	.L8392
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC736
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC736
	mov	r7, #1
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L8392
.L8409:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	tst	r3, #16
	and	r3, r3, #4
	beq	.L8391
	cmp	r3, #0
	bne	.L8389
	b	.L8392
.L8391:
	cmp	r3, #0
	beq	.L8393
	b	.L8389
.L8411:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC735
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC735
	mov	r7, #2
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L8392
.L8413:
	.align	2
.L8412:
	.word	.LANCHOR4-460
	.word	.LANCHOR4-436
	.fnend
	.size	send_status, .-send_status
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	do_write, %function
do_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r0, #104]
	.pad #68
	sub	sp, sp, #68
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	tst	r3, #2
	movne	r3, #9984
	mvnne	r0, #21
	movtne	r3, 7
	strne	r3, [r6, #28]
	bne	.L8414
	mov	r4, r0
	ldr	r0, [r6]
	add	r0, r0, #20
	bl	_raw_spin_lock
	ldr	r2, [r6]
	ldr	r3, [r2, #32]
	bic	r3, r3, #1048576
	bic	r3, r3, #4096
	str	r3, [r2, #32]
	ldr	r0, [r6]
	add	r0, r0, #20
	bl	_raw_spin_unlock
	ldrb	r3, [r4, #76]	@ zero_extendqisi2
	cmp	r3, #10
	beq	.L8482
	ldrb	r3, [r4, #77]	@ zero_extendqisi2
	ldr	r5, [r4, #78]	@ unaligned
	tst	r3, #231
	movne	r3, #9216
	rev	r5, r5
	movtne	r3, 5
	mvnne	r0, #21
	strne	r3, [r6, #28]
	bne	.L8414
	ldrsb	r2, [r6, #24]
	cmp	r2, #0
	blt	.L8418
	tst	r3, #8
	bne	.L8483
.L8418:
	ldrd	r2, [r6, #16]
	mov	r1, #0
	mov	r0, r5
	cmp	r5, r2
	sbcs	r3, r1, r3
	movge	r3, #8448
	mvnge	r0, #21
	movtge	r3, 5
	strge	r3, [r6, #28]
	bge	.L8414
	ldr	r3, [r6, #40]
	ldr	r1, [r4, #128]
	sub	r2, r3, #32
	lsl	r10, r5, r3
	lsl	fp, r5, r2
	str	r1, [sp, #40]
	cmp	r1, #0
	rsb	r2, r3, #32
	orr	fp, fp, r5, lsr r2
	beq	.L8428
	mov	r9, r1
	strd	r10, [sp, #16]
	mov	r3, #57344
	movw	r2, #:lower16:.LANCHOR1
	strd	r10, [sp, #32]
	movw	r1, #3074
	movt	r3, 65535
	movt	r2, #:upper16:.LANCHOR1
	movt	r1, 3
	mov	r8, #1
	str	r3, [sp, #44]
	str	r2, [sp, #48]
	str	r1, [sp, #52]
.L8421:
	ldr	r5, [r4, #60]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L8422
.L8485:
	cmp	r8, #0
	beq	.L8423
	ldrd	r2, [r6, #8]
	ldrd	r0, [sp, #16]
	cmp	r0, r2
	sbcs	r3, r1, r3
	bge	.L8484
	ldr	r2, [r4, #140]
	cmp	r9, #16384
	movcc	r3, r9
	movcs	r3, #16384
	adds	r0, r0, r3
	adc	r1, r1, #0
	subs	r9, r9, r3
	sub	r2, r2, r3
	movne	r8, #1
	strd	r0, [sp, #16]
	moveq	r8, #0
	mov	r0, r4
	str	r2, [r4, #140]
	str	r3, [r5, #12]
	ldr	r1, [r4, #108]
	udiv	r2, r3, r1
	mls	r2, r1, r2, r3
	cmp	r2, #0
	addne	r3, r3, r1
	mov	r1, r5
	subne	r3, r3, r2
	ldr	r2, [r5, #24]
	str	r3, [r2, #4]
	bl	start_out_transfer
	cmp	r0, #0
	beq	.L8428
	ldr	r3, [r5, #8]
	str	r3, [r4, #60]
	ldr	r5, [r4, #60]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L8485
.L8422:
	ldr	r5, [r4, #64]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L8429
	cmp	r8, #0
	beq	.L8428
.L8430:
	mov	r0, r4
	bl	sleep_thread
	cmp	r0, #0
	beq	.L8421
.L8414:
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8423:
	ldr	r5, [r4, #64]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L8428
.L8429:
	cmp	r3, #1
	bne	.L8430
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L8430
	.syntax divided
@ 1354 "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r2, [r5, #8]
	mov	r3, #0
	str	r2, [r4, #64]
	ldr	r2, [r5, #24]
	str	r3, [r5, #4]
	ldr	r3, [r2, #44]
	cmp	r3, #0
	bne	.L8486
	ldr	r3, [r6, #8]
	ldrd	r10, [sp, #32]
	ldr	ip, [r6, #12]
	ldr	r2, [r2, #48]
	subs	r1, r3, r10
	str	r1, [sp, #24]
	sbc	r1, ip, fp
	str	r1, [sp, #28]
	mov	r1, #0
	ldrd	r10, [sp, #24]
	cmp	r10, r2
	sbcs	r1, fp, r1
	blt	.L8487
.L8433:
	ldr	r7, [r6, #44]
	ldr	r3, [r5, #12]
	rsb	r7, r7, #0
	cmp	r3, r2
	andls	r7, r7, r3
	andhi	r7, r7, r2
	cmp	r7, #0
	beq	.L8434
	ldrd	r0, [sp, #32]
	add	r3, sp, #56
	mov	r2, r7
	strd	r0, [sp, #56]
	ldr	r1, [r5]
	ldr	r0, [r6]
	bl	vfs_write
	ldr	r2, [sp, #44]
	mov	r3, sp
	mov	r10, r0
	and	r3, r3, r2
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L8454
	cmp	r0, #0
	blt	.L8488
	cmp	r0, r7
	mov	r3, r0
	bcs	.L8437
	ldr	r0, .L8491
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L8489
.L8438:
	ldr	r2, [r6, #44]
	mov	r3, r10
	ldrd	r10, [sp, #32]
	ldr	r1, [r4, #136]
	rsb	r2, r2, #0
	and	r2, r2, r3
	adds	r10, r10, r2
	mov	r3, r2
	adc	fp, fp, r2, asr #31
	sub	r2, r1, r2
	ldr	r1, [sp, #40]
	cmp	r3, r7
	str	r2, [r4, #136]
	strd	r10, [sp, #32]
	sub	r1, r1, r3
	str	r1, [sp, #40]
	bcc	.L8451
	cmp	r7, r3
	bne	.L8480
.L8441:
	ldr	r3, [sp, #48]
	ldr	r3, [r3, #3968]
	cmp	r3, #0
	bne	.L8480
	ldr	r3, [sp, #48]
	ldr	r3, [r3, #3964]
	cmp	r3, #0
	bne	.L8428
	ldr	r3, [r4, #68]
	ldr	r2, [r3, #4]
	cmp	r2, #2
	beq	.L8480
	ldr	r2, [r3, #36]
	cmp	r2, #2
	beq	.L8480
	ldr	r2, [r3, #68]
	cmp	r2, #2
	beq	.L8480
	ldr	r3, [r3, #100]
	cmp	r3, #2
	beq	.L8480
	cmp	r9, #0
	bne	.L8480
	ldr	r2, [sp, #48]
	mov	r3, #1
	mov	r0, r4
	str	r3, [r2, #3968]
	bl	send_status
	b	.L8480
.L8488:
	ldr	r0, .L8491+4
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L8490
.L8436:
	mov	r3, #0
.L8451:
	ldrd	r10, [sp, #32]
	ldr	r2, [r6, #40]
	ldr	r1, [sp, #52]
	subs	r0, r2, #32
	str	r1, [r6, #28]
	lsr	r1, r10, r2
	rsb	r2, r2, #32
	orr	r1, r1, fp, lsl r2
	movpl	r2, fp
	orrpl	r1, r1, r2, asr r0
	ldrb	r2, [r6, #24]	@ zero_extendqisi2
	ldr	r0, [sp, #48]
	str	r1, [r6, #32]
	mov	r1, #1
	orr	r2, r2, #64
	str	r1, [r0, #3964]
	strb	r2, [r6, #24]
.L8439:
	cmp	r7, r3
	beq	.L8441
.L8480:
.L8442:
	ldr	r3, [r5, #12]
	ldr	r2, [r5, #24]
	ldr	r2, [r2, #48]
	cmp	r2, r3
	bcc	.L8452
	ldr	r3, [sp, #40]
	cmp	r3, #0
	bne	.L8421
.L8428:
	mvn	r0, #4
	b	.L8414
.L8434:
	ldr	r2, [r5, #24]
	ldr	r2, [r2, #48]
	cmp	r3, r2
	bls	.L8421
.L8452:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	mvn	r0, #4
	orr	r3, r3, #8
	strb	r3, [r4, #144]
	b	.L8414
.L8484:
	ldr	r3, [r6, #40]
	mov	r2, #8448
	mov	r10, r0
	movt	r2, 5
	mov	fp, r1
	mov	r8, #0
	str	r2, [r6, #28]
	subs	r1, r3, #32
	lsr	r2, r10, r3
	rsb	r3, r3, #32
	orr	r2, r2, fp, lsl r3
	movpl	r3, fp
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	str	r2, [r6, #32]
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	b	.L8421
.L8487:
	ldrd	r10, [sp, #32]
	movw	r1, #:lower16:.LC737
	add	r0, r6, #48
	movt	r1, #:upper16:.LC737
	strd	r10, [sp]
	str	r3, [sp, #8]
	str	ip, [sp, #12]
	bl	dev_err
	ldr	r2, [r6, #8]
	sub	r2, r2, r10
	b	.L8433
.L8437:
	ldrd	r0, [sp, #32]
	ldr	r2, [r4, #136]
	adds	r0, r0, r10
	adc	r1, r1, r10, asr #31
	sub	r2, r2, r10
	str	r2, [r4, #136]
	strd	r0, [sp, #32]
	ldr	r1, [sp, #40]
	sub	r1, r1, r10
	str	r1, [sp, #40]
	b	.L8439
.L8482:
	ldrb	r5, [r4, #78]	@ zero_extendqisi2
	ldrb	r2, [r4, #77]	@ zero_extendqisi2
	ldrb	r3, [r4, #79]	@ zero_extendqisi2
	lsl	r5, r5, #8
	orr	r5, r5, r2, lsl #16
	orr	r5, r5, r3
	b	.L8418
.L8483:
	ldr	r0, [r6]
	add	r0, r0, #20
	bl	_raw_spin_lock
	ldr	r2, [r6]
	ldr	r3, [r2, #32]
	orr	r3, r3, #1048576
	orr	r3, r3, #4096
	str	r3, [r2, #32]
	ldr	r0, [r6]
	add	r0, r0, #20
	bl	_raw_spin_unlock
	b	.L8418
.L8486:
	ldrd	r10, [sp, #32]
	mov	r2, #2048
	mvn	r0, #4
	ldr	r3, [r6, #40]
	movt	r2, 4
	str	r2, [r6, #28]
	subs	r1, r3, #32
	lsr	r2, r10, r3
	rsb	r3, r3, #32
	orr	r2, r2, fp, lsl r3
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	orrpl	r2, r2, fp, asr r1
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	str	r2, [r6, #32]
	b	.L8414
.L8490:
	movw	r2, #:lower16:.LC738
	mov	r3, r10
	movt	r2, #:upper16:.LC738
	add	r1, r6, #48
	sub	r0, r0, #18
	bl	__dynamic_dev_dbg
	b	.L8436
.L8489:
	movw	r2, #:lower16:.LC739
	mov	r3, r10
	str	r7, [sp]
	movt	r2, #:upper16:.LC739
	add	r1, r6, #48
	sub	r0, r0, #18
	bl	__dynamic_dev_dbg
	b	.L8438
.L8454:
	mvn	r0, #3
	b	.L8414
.L8492:
	.align	2
.L8491:
	.word	.LANCHOR4-390
	.word	.LANCHOR4-414
	.fnend
	.size	do_write, .-do_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	do_read, %function
do_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	ip, [r0, #76]	@ zero_extendqisi2
	.pad #44
	sub	sp, sp, #44
	ldrb	r2, [r0, #77]	@ zero_extendqisi2
	ldrb	r3, [r0, #78]	@ zero_extendqisi2
	ldrb	lr, [r0, #79]	@ zero_extendqisi2
	cmp	ip, #8
	ldr	r10, [r0, #104]
	beq	.L8538
	tst	r2, #231
	ldr	r1, [r0, #78]	@ unaligned
	movne	r2, #9216
	mvnne	r3, #21
	movtne	r2, 5
	rev	r1, r1
	strne	r2, [r10, #28]
	bne	.L8493
.L8495:
	ldrd	r2, [r10, #16]
	mov	r5, #0
	cmp	r1, r2
	sbcs	r3, r5, r3
	movge	r2, #8448
	mvnge	r3, #21
	movtge	r2, 5
	strge	r2, [r10, #28]
	bge	.L8493
	ldr	r3, [r10, #40]
	ldr	fp, [r0, #128]
	sub	r2, r3, #32
	lsl	r8, r1, r3
	lsl	r9, r1, r2
	cmp	fp, #0
	rsb	r2, r3, #32
	orr	r9, r9, r1, lsr r2
	beq	.L8498
	mov	r3, sp
	bic	r3, r3, #8128
	mov	r5, r0
	bic	r3, r3, #63
	add	r4, r0, #44
	str	r3, [sp, #28]
.L8511:
	ldr	r3, [r10, #8]
	mov	r0, r4
	ldr	r7, [r10, #12]
	str	r3, [sp, #8]
	bl	_raw_spin_lock_irq
	ldr	r6, [r5, #60]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L8499
	b	.L8503
.L8539:
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L8503
.L8499:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	sleep_thread
	subs	r3, r0, #0
	mov	r0, r4
	beq	.L8539
.L8493:
	mov	r0, r3
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8503:
	ldr	r3, [sp, #8]
	subs	r3, r3, r8
	str	r3, [sp, #16]
	sbc	r3, r7, r9
	cmp	fp, #16384
	str	r3, [sp, #20]
	movcc	r3, fp
	movcs	r3, #16384
	str	r3, [sp, #8]
	mov	r3, #0
	str	r3, [sp, #12]
	ldrd	r0, [sp, #8]
	ldrd	r2, [sp, #16]
	cmp	r2, r0
	sbcs	r1, r3, r1
	blt	.L8540
.L8500:
	ldr	r3, [sp, #8]
	mov	r0, r4
	str	r3, [sp, #24]
	bl	_raw_spin_unlock_irq
	ldr	r3, [sp, #8]
	cmp	r3, #0
	beq	.L8541
	mov	r2, r3
	add	r3, sp, #32
	strd	r8, [sp, #32]
	ldr	r1, [r6]
	ldr	r0, [r10]
	bl	vfs_read
	ldr	r3, [sp, #28]
	mov	r7, r0
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L8513
	cmp	r0, #0
	blt	.L8542
	ldr	r3, [sp, #24]
	cmp	r0, r3
	bcs	.L8507
	ldr	r0, .L8545
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L8543
.L8508:
	ldr	r2, [r10, #44]
	mov	r0, r4
	ldr	r3, [r5, #136]
	rsb	r2, r2, #0
	and	r7, r7, r2
	sub	r3, r3, r7
	adds	r8, r8, r7
	adc	r9, r9, r7, asr #31
	sub	fp, fp, r7
	str	r3, [r5, #136]
	bl	_raw_spin_lock_irq
	ldr	r2, [r6, #16]
	mov	r3, #1
	mov	r0, r4
	str	r7, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq
	ldr	r3, [sp, #24]
	cmp	r7, r3
	bcc	.L8512
.L8509:
	cmp	fp, #0
	beq	.L8498
	ldr	r3, [r6, #16]
	mov	r1, r6
	mov	r0, r5
	ldrb	r2, [r3, #26]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #26]
	bl	start_in_transfer
	cmp	r0, #0
	beq	.L8498
	ldr	r3, [r6, #8]
	str	r3, [r5, #60]
	b	.L8511
.L8540:
	strd	r2, [sp, #8]
	b	.L8500
.L8542:
	ldr	r0, .L8545+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8544
.L8506:
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r2, [r6, #16]
	mov	r1, #0
	mov	r3, #1
	mov	r0, r4
	str	r1, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq
.L8512:
	ldr	r3, [r10, #40]
	mov	r2, #4352
	movt	r2, 3
	str	r2, [r10, #28]
	subs	r1, r3, #32
	lsr	r2, r8, r3
	rsb	r3, r3, #32
	orr	r2, r2, r9, lsl r3
	mvn	r3, #4
	orrpl	r2, r2, r9, asr r1
	ldrb	r1, [r10, #24]	@ zero_extendqisi2
	str	r2, [r10, #32]
	orr	r2, r1, #64
	strb	r2, [r10, #24]
	b	.L8493
.L8538:
	lsl	r1, r3, #8
	orr	r1, r1, r2, lsl #16
	orr	r1, r1, lr
	b	.L8495
.L8507:
	ldr	r3, [r5, #136]
	mov	r0, r4
	adds	r8, r8, r7
	adc	r9, r9, r7, asr #31
	sub	fp, fp, r7
	sub	r3, r3, r7
	str	r3, [r5, #136]
	bl	_raw_spin_lock_irq
	ldr	r2, [r6, #16]
	mov	r3, #1
	mov	r0, r4
	str	r7, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq
	b	.L8509
.L8498:
	mvn	r3, #4
	b	.L8493
.L8544:
	movw	r2, #:lower16:.LC740
	mov	r3, r7
	movt	r2, #:upper16:.LC740
	add	r1, r10, #48
	sub	r0, r0, #20
	bl	__dynamic_dev_dbg
	b	.L8506
.L8543:
	ldr	r3, [sp, #8]
	movw	r2, #:lower16:.LC741
	add	r1, r10, #48
	movt	r2, #:upper16:.LC741
	sub	r0, r0, #18
	str	r3, [sp]
	mov	r3, r7
	bl	__dynamic_dev_dbg
	b	.L8508
.L8541:
	ldr	r3, [r10, #40]
	mov	r2, #8448
	mov	r0, r4
	movt	r2, 5
	str	r2, [r10, #28]
	subs	r1, r3, #32
	lsr	r2, r8, r3
	rsb	r3, r3, #32
	orr	r2, r2, r9, lsl r3
	ldrb	r3, [r10, #24]	@ zero_extendqisi2
	orrpl	r2, r2, r9, asr r1
	orr	r3, r3, #64
	strb	r3, [r10, #24]
	str	r2, [r10, #32]
	bl	_raw_spin_lock_irq
	ldr	r2, [r6, #16]
	mov	r3, #1
	mov	r1, #0
	mov	r0, r4
	str	r1, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq
	mvn	r3, #4
	b	.L8493
.L8513:
	mvn	r3, #3
	b	.L8493
.L8546:
	.align	2
.L8545:
	.word	.LANCHOR4-342
	.word	.LANCHOR4-364
	.fnend
	.size	do_read, .-do_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_complete_in, %function
adb_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r3, #3596]
	cmp	r2, #0
	movne	r3, #1
	add	r5, r4, #88
	mov	r0, r5
	strne	r3, [r4, #104]
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	add	r2, r4, #120
	ldr	r1, [r4, #124]
	add	r0, r6, #36
	bl	__list_add
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	add	r0, r4, #140
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
	.fnend
	.size	adb_complete_in, .-adb_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_unbind, %function
qdss_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L8590
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r1, [r0, #24]
	ldrh	r2, [r3, #-2]
	ldr	r5, [r1]
	tst	r2, #4
	bne	.L8586
.L8554:
	ldr	r0, [r4, #196]
	bl	flush_workqueue
	movw	r0, #:lower16:.LC528
	ldr	r1, [r5, #28]
	movt	r0, #:upper16:.LC528
	bl	strcmp
	subs	r1, r0, #0
	beq	.L8587
	ldr	r0, .L8590+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8588
.L8556:
	ldr	r3, [r4, #104]
	ldr	r0, .L8590+8
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #100]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #108]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L8589
.L8560:
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bls	.L8561
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L8565
	bl	kfree
	ldr	r3, [r5, #20]
.L8561:
	cmp	r3, #2
	bhi	.L8565
.L8553:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8565:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L8553
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
.L8587:
	ldr	r0, [r4, #108]
	bl	dwc3_tx_fifo_resize_request
	ldr	r0, .L8590+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	beq	.L8556
.L8588:
	movw	r1, #:lower16:.LC743
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC743
	bl	__dynamic_pr_debug
	b	.L8556
.L8586:
	movw	r1, #:lower16:.LC742
	sub	r0, r3, #20
	movt	r1, #:upper16:.LC742
	bl	__dynamic_pr_debug
	b	.L8554
.L8589:
	movw	r1, #:lower16:.LC744
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC744
	bl	__dynamic_pr_debug
	b	.L8560
.L8591:
	.align	2
.L8590:
	.word	.LANCHOR4-316
	.word	.LANCHOR4-292
	.word	.LANCHOR4-268
	.fnend
	.size	qdss_unbind, .-qdss_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_suspend, %function
ecm_qc_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LANCHOR4
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movt	r0, #:upper16:.LANCHOR4
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [r0, #-246]
	tst	r3, #4
	bne	.L8602
.L8593:
	ldr	r0, .L8604
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r5, [r4, #3936]
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L8603
.L8594:
	ldr	r0, [r4, #3940]
	add	r1, r5, #200
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work
.L8602:
	movw	r1, #:lower16:.LC745
	ldr	r2, .L8604+4
	sub	r0, r0, #264
	movt	r1, #:upper16:.LC745
	bl	__dynamic_pr_debug
	b	.L8593
.L8603:
	ldr	r3, .L8604+8
	mov	r2, #0
	movw	r1, #:lower16:.LC652
	movt	r1, #:upper16:.LC652
	sub	r0, r0, #32
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L8594
.L8605:
	.align	2
.L8604:
	.word	.LANCHOR4-1696
	.word	.LANCHOR5-1996
	.word	.LANCHOR5-3076
	.fnend
	.size	ecm_qc_suspend, .-ecm_qc_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_resume, %function
ecm_qc_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LANCHOR4
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movt	r0, #:upper16:.LANCHOR4
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [r0, #-222]
	tst	r3, #4
	bne	.L8616
.L8607:
	ldr	r0, .L8618
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r5, [r4, #3936]
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L8617
.L8608:
	ldr	r0, [r4, #3940]
	add	r1, r5, #216
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work
.L8616:
	movw	r1, #:lower16:.LC746
	ldr	r2, .L8618+4
	sub	r0, r0, #240
	movt	r1, #:upper16:.LC746
	bl	__dynamic_pr_debug
	b	.L8607
.L8617:
	ldr	r3, .L8618+8
	mov	r2, #0
	movw	r1, #:lower16:.LC650
	movt	r1, #:upper16:.LC650
	sub	r0, r0, #24
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L8608
.L8619:
	.align	2
.L8618:
	.word	.LANCHOR4-1728
	.word	.LANCHOR5-1980
	.word	.LANCHOR5-3108
	.fnend
	.size	ecm_qc_resume, .-ecm_qc_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_suspend, %function
rndis_qc_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LANCHOR4
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movt	r0, #:upper16:.LANCHOR4
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [r0, #-198]
	tst	r3, #4
	bne	.L8630
.L8621:
	ldr	r0, .L8632
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r5, [r4, #3936]
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L8631
.L8622:
	ldr	r0, [r4, #3940]
	add	r1, r5, #200
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work
.L8630:
	ldr	r3, .L8632+4
	movw	r1, #:lower16:.LC747
	sub	r0, r0, #216
	movt	r1, #:upper16:.LC747
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L8621
.L8631:
	ldr	r3, .L8632+8
	mov	r2, #0
	movw	r1, #:lower16:.LC652
	movt	r1, #:upper16:.LC652
	sub	r0, r0, #32
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L8622
.L8633:
	.align	2
.L8632:
	.word	.LANCHOR4-1696
	.word	.LANCHOR5-1964
	.word	.LANCHOR5-3076
	.fnend
	.size	rndis_qc_suspend, .-rndis_qc_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_resume, %function
rndis_qc_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LANCHOR4
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movt	r0, #:upper16:.LANCHOR4
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [r0, #-174]
	tst	r3, #4
	bne	.L8644
.L8635:
	ldr	r0, .L8646
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r5, [r4, #3936]
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L8645
.L8636:
	ldr	r0, [r4, #3940]
	add	r1, r5, #216
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work
.L8644:
	ldr	r3, .L8646+4
	movw	r1, #:lower16:.LC748
	sub	r0, r0, #192
	movt	r1, #:upper16:.LC748
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L8635
.L8645:
	ldr	r3, .L8646+8
	mov	r2, #0
	movw	r1, #:lower16:.LC650
	movt	r1, #:upper16:.LC650
	sub	r0, r0, #24
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L8636
.L8647:
	.align	2
.L8646:
	.word	.LANCHOR4-1728
	.word	.LANCHOR5-1944
	.word	.LANCHOR5-3108
	.fnend
	.size	rndis_qc_resume, .-rndis_qc_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_resume, %function
ffs_func_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #-28]
	add	r5, r4, #116
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	mov	r6, r0
	add	lr, r4, #100
	ldrh	r2, [r4, #104]
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r4, #96]
	cmp	r2, #0
	beq	.L8653
	add	r1, r4, #99
	mov	r3, lr
	add	r2, r1, r2
.L8652:
	ldrb	ip, [r1, #1]!	@ zero_extendqisi2
	mov	r0, r3
	sub	r7, ip, #5
	cmp	r7, #1
	strbhi	ip, [r0], #1
	movhi	r3, r0
	cmp	r2, r1
	bne	.L8652
	sub	r3, r3, lr
	add	r2, r3, #1
	uxth	r3, r3
	uxth	r2, r2
.L8650:
	add	r3, r4, r3
	strh	r2, [r4, #104]	@ movhi
	mov	r0, #6
	mov	r1, #3
	mov	r2, #1
	strb	r0, [r3, #100]
	mov	r0, r5
	bl	__wake_up_locked
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L8653:
	mov	r3, r2
	mov	r2, #1
	b	.L8650
	.fnend
	.size	ffs_func_resume, .-ffs_func_resume
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_suspend, %function
ffs_func_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #-28]
	add	r5, r4, #116
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	mov	r6, r0
	add	lr, r4, #100
	ldrh	r2, [r4, #104]
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r4, #96]
	cmp	r2, #0
	beq	.L8661
	add	r1, r4, #99
	mov	r3, lr
	add	r2, r1, r2
.L8660:
	ldrb	ip, [r1, #1]!	@ zero_extendqisi2
	mov	r0, r3
	cmp	ip, #5
	strbne	ip, [r0], #1
	movne	r3, r0
	cmp	r2, r1
	bne	.L8660
	sub	r3, r3, lr
	add	r2, r3, #1
	uxth	r3, r3
	uxth	r2, r2
.L8658:
	add	r3, r4, r3
	strh	r2, [r4, #104]	@ movhi
	mov	r0, #5
	mov	r1, #3
	mov	r2, #1
	strb	r0, [r3, #100]
	mov	r0, r5
	bl	__wake_up_locked
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
.L8661:
	mov	r3, r2
	mov	r2, #1
	b	.L8658
	.fnend
	.size	ffs_func_suspend, .-ffs_func_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_add_header, %function
rndis_qc_add_header:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r1
	mov	r1, #44
	mov	r0, r6
	str	lr, [sp, #12]
	bl	skb_realloc_headroom
	subs	r5, r0, #0
	beq	.L8668
	mov	r1, #44
	bl	skb_push
	mov	r1, #44
	mov	r4, r0
	bl	__memzero
	mov	r3, #0
	mov	r2, #1
	mov	r1, #36
	strb	r2, [r4]
	strb	r3, [r4, #1]
	strb	r3, [r4, #2]
	strb	r3, [r4, #3]
	ldr	r2, [r5, #80]
	str	r2, [r4, #4]	@ unaligned
	strb	r1, [r4, #8]
	strb	r3, [r4, #9]
	strb	r3, [r4, #10]
	strb	r3, [r4, #11]
	ldr	r3, [r5, #80]
	sub	r3, r3, #44
	str	r3, [r4, #12]	@ unaligned
.L8668:
	mov	r0, r6
	bl	dev_kfree_skb_any
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_qc_add_header, .-rndis_qc_add_header
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_unbind, %function
ecm_qc_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR4
	mov	r5, r1
	movt	r4, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	ldrh	r3, [r4, #-150]
	tst	r3, #4
	bne	.L8689
.L8674:
	ldrh	r3, [r4, #-126]
	tst	r3, #4
	bne	.L8690
.L8675:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3936]
	bl	kfree
	ldr	r0, [r4, #3940]
	mov	r3, #0
	str	r3, [r4, #3936]
	cmp	r0, r3
	beq	.L8676
	bl	destroy_workqueue
.L8676:
	ldr	r3, [r6, #24]
	mov	r2, #0
	str	r2, [r4, #3940]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L8691
	cmp	r3, #2
	bhi	.L8692
.L8678:
	ldr	r0, [r5, #16]
	bl	kfree
	ldr	r3, [r5, #148]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r5, #144]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR0
	mov	r0, r5
	str	r2, [r3, #1460]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
.L8691:
	ldr	r0, [r5, #12]
	bl	kfree
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L8678
.L8692:
	ldr	r0, [r5, #8]
	bl	kfree
	b	.L8678
.L8690:
	movw	r1, #:lower16:.LC750
	ldr	r2, .L8693
	movt	r1, #:upper16:.LC750
	ldr	r0, .L8693+4
	bl	__dynamic_pr_debug
	b	.L8675
.L8689:
	ldr	r3, [r6, #24]
	movw	r2, #:lower16:.LC749
	sub	r0, r4, #168
	movt	r2, #:upper16:.LC749
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L8674
.L8694:
	.align	2
.L8693:
	.word	.LANCHOR5-1928
	.word	.LANCHOR4-144
	.fnend
	.size	ecm_qc_unbind, .-ecm_qc_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_event_add, %function
ffs_event_add:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	mov	r5, r1
	strd	r6, [sp, #8]
	add	r6, r0, #116
	mov	r0, r6
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	mov	r7, r0
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r4, #96]
	cmp	r5, #4
	bcc	.L8701
	cmp	r5, #5
	bls	.L8702
	cmp	r5, #6
	movne	r9, #1
	moveq	r9, #0
	moveq	r8, #5
	movne	r8, #6
	moveq	lr, #6
	movne	lr, #5
.L8697:
	ldrh	r2, [r4, #104]
	add	ip, r4, #100
	cmp	r2, #0
	beq	.L8704
.L8707:
	add	r1, r4, #99
	mov	r3, ip
	add	r2, r1, r2
.L8700:
	ldrb	r0, [r1, #1]!	@ zero_extendqisi2
	cmp	r0, lr
	cmpne	r0, r8
	moveq	r10, #1
	movne	r10, #0
	cmp	r9, r10
	strbeq	r0, [r3], #1
	cmp	r2, r1
	bne	.L8700
	sub	r3, r3, ip
	add	r2, r3, #1
	uxth	r3, r3
	uxth	r2, r2
.L8698:
	add	r3, r4, r3
	strh	r2, [r4, #104]	@ movhi
	mov	r0, r6
	mov	r1, #3
	mov	r2, #1
	strb	r5, [r3, #100]
	bl	__wake_up_locked
	mov	r1, r7
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L8702:
	ldrh	r2, [r4, #104]
	mov	r8, r5
	mov	lr, r5
	mov	r9, #0
	add	ip, r4, #100
	cmp	r2, #0
	bne	.L8707
.L8704:
	mov	r3, r2
	mov	r2, #1
	b	.L8698
.L8701:
	mov	r9, #1
	mov	r8, #6
	mov	lr, #5
	b	.L8697
	.fnend
	.size	ffs_event_add, .-ffs_event_add
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_set_alt, %function
ffs_func_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmn	r2, #1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	fp, [r0, #-28]
	beq	.L8709
	ldrh	ip, [fp, #178]
	ldr	r7, [r0, #-4]
	cmp	ip, #0
	beq	.L8725
	uxtb	r1, r1
	mov	r3, r7
.L8712:
	mov	r4, r3
	ldrsh	lr, [r3], #2
	cmp	lr, #0
	blt	.L8711
	cmp	lr, r1
	beq	.L8738
.L8711:
	subs	ip, ip, #1
	bne	.L8712
.L8725:
	mvn	r7, #32
	b	.L8708
.L8738:
	subs	r4, r4, r7
	asrmi	r7, r4, #1
	bmi	.L8708
.L8709:
	ldr	r8, [fp, #132]
	mov	r7, r2
	str	r0, [sp]
	cmp	r8, #0
	beq	.L8713
	ldr	r3, [r8, #8]
	mov	r6, #1
	mov	r5, #0
	ldr	r4, [r8, #12]
	add	r0, r3, #24
	ldrh	r9, [r3, #180]
	ldr	r10, [r3, #208]
	add	r4, r4, #28
	bl	_raw_spin_lock_irqsave
	str	r0, [sp, #4]
	b	.L8714
.L8739:
	ldr	r3, [r3, #8]
	add	r4, r4, #28
	add	r10, r10, #56
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #-56]
	subs	r9, r9, #1
	str	r5, [r3]
	str	r5, [r10, #-16]
	beq	.L8717
.L8714:
	str	r6, [r10, #32]
	ldr	r3, [r4, #-28]
	subs	r0, r3, #0
	bne	.L8739
	subs	r9, r9, #1
	add	r4, r4, #28
	str	r3, [r10, #40]
	add	r10, r10, #56
	bne	.L8714
.L8717:
	ldr	r0, [r8, #8]
	ldr	r1, [sp, #4]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	mov	r3, #0
	str	r3, [fp, #132]
.L8713:
	ldr	r3, [fp, #92]
	cmp	r3, #2
	bne	.L8726
	cmn	r7, #1
	beq	.L8740
	ldr	r2, [sp]
	sub	r3, r2, #36
	str	r3, [fp, #132]
	ldr	r10, [r2, #-28]
	ldr	r4, [r2, #-24]
	ldr	r5, [r10, #208]
	add	r0, r10, #24
	ldrh	r9, [r10, #180]
	add	r4, r4, #28
	bl	_raw_spin_lock_irqsave
	str	r0, [sp, #4]
	add	r5, r5, #20
	b	.L8722
.L8742:
	str	r8, [r5, #20]
	ldrb	ip, [r6, #2]	@ zero_extendqisi2
	add	r5, r5, #56
	lsr	ip, ip, #7
	strb	ip, [r5, #-23]
	ldrb	ip, [r6, #3]	@ zero_extendqisi2
	and	ip, ip, r1
	sub	ip, ip, r2
	clz	ip, ip
	lsr	ip, ip, #5
	strb	ip, [r5, #-22]
	bl	__wake_up
	subs	r9, r9, #1
	beq	.L8741
.L8722:
	ldr	r3, [r10]
	sub	r8, r4, #28
	ldr	r3, [r3, #16]
	cmp	r3, #5
	subne	r3, r3, #3
	moveq	r3, #2
	clzne	r3, r3
	lsrne	r3, r3, #5
	add	r3, r3, #2
	ldr	r6, [r8, r3, lsl #2]
	cmp	r6, #0
	beq	.L8720
	ldr	r3, [r4, #-28]
	add	r4, r4, #28
	str	r8, [r3]
	ldr	r3, [r4, #-56]
	str	r6, [r3, #28]
	ldr	r3, [r4, #-56]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r7, r0, #0
	mov	r2, #1
	mov	r1, #3
	mov	r0, r5
	mov	r3, r7
	beq	.L8742
	ldr	r3, [sp]
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-28]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	blt	.L8708
.L8724:
	mov	r0, fp
	mov	r1, #2
	bl	ffs_event_add
.L8708:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8740:
	mov	r3, #0
	mov	r0, fp
	mov	r1, #3
	mov	r7, r3
	str	r3, [fp, #132]
	bl	ffs_event_add
	b	.L8708
.L8741:
	ldr	r3, [sp]
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-28]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	b	.L8724
.L8720:
	ldr	r3, [sp]
	mvn	r7, #21
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-28]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	b	.L8708
.L8726:
	mvn	r7, #18
	b	.L8708
	.fnend
	.size	ffs_func_set_alt, .-ffs_func_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_sb_fill, %function
ffs_sb_fill:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r0, [r3, #32]
	.pad #12
	sub	sp, sp, #12
	cmp	r0, #0
	beq	.L8751
	mov	r2, #212
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	bne	.L8744
.L8768:
	mvn	r0, #11
.L8743:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L8751:
	mov	r4, #16
.L8744:
	mov	r8, #0
	mov	r6, #1
	ldr	r2, .L8769
	movw	r1, #:lower16:.LC751
	add	r0, r4, #4
	movt	r1, #:upper16:.LC751
	str	r6, [r4, #84]
	mov	r9, #12
	str	r8, [r4, #88]
	str	r8, [r4, #92]
	bl	__mutex_init
	movw	r1, #:lower16:.LC752
	ldr	r2, .L8769
	add	r0, r4, #116
	movt	r1, #:upper16:.LC752
	str	r8, [r4, #24]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC753
	ldr	r2, .L8769
	add	r0, r4, #36
	movt	r1, #:upper16:.LC753
	str	r8, [r4, #32]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC753
	ldr	r2, .L8769
	add	r0, r4, #72
	movt	r1, #:upper16:.LC753
	str	r8, [r4, #68]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC753
	ldr	r2, .L8769
	add	r0, r4, #56
	movt	r1, #:upper16:.LC753
	str	r8, [r4, #52]
	bl	__init_waitqueue_head
	strh	r6, [r4, #106]	@ movhi
	ldr	ip, .L8769+4
	movw	r1, #29537
	str	r5, [r4, #192]
	ldr	r3, [r7, #16]
	movt	r1, 2660
	mov	lr, #4096
	mov	r0, r5
	str	r3, [r4, #136]
	ldrd	r2, [r7]
	strd	r2, [r4, #196]
	ldr	r3, [r7, #8]
	str	r3, [r4, #204]
	strb	r9, [r5, #13]
	str	lr, [r5, #16]
	str	ip, [r5, #36]
	str	r1, [r5, #56]
	str	r4, [r5, #616]
	str	r6, [r5, #628]
	ldrh	r3, [r7, #12]
	strh	r3, [r7]	@ movhi
	bl	new_inode
	subs	r6, r0, #0
	beq	.L8746
	mov	r0, sp
	bl	current_kernel_time
	bl	get_next_ino
	str	r0, [r6, #40]
	ldrh	r3, [r7]
	movw	r1, #:lower16:simple_dir_operations
	movt	r1, #:upper16:simple_dir_operations
	cmp	r1, r8
	strh	r3, [r6]	@ movhi
	ldrd	r2, [sp]
	ldr	r0, [r7, #4]
	str	r0, [r6, #4]
	ldr	r0, [r7, #8]
	strne	r1, [r6, #200]
	strd	r2, [r6, #52]
	strd	r2, [r6, #60]
	strd	r2, [r6, #68]
	movw	r3, #:lower16:simple_dir_inode_operations
	movt	r3, #:upper16:simple_dir_inode_operations
	str	r0, [r6, #8]
	cmp	r3, #0
	str	r8, [r6, #328]
	strne	r3, [r6, #24]
.L8746:
	mov	r0, r6
	bl	d_make_root
	cmp	r0, #0
	str	r0, [r5, #60]
	beq	.L8768
	movw	r1, #:lower16:.LC754
	ldr	r6, [r5, #616]
	movt	r1, #:upper16:.LC754
	bl	d_alloc_name
	subs	r7, r0, #0
	beq	.L8768
	mov	r0, r5
	bl	new_inode
	subs	r5, r0, #0
	beq	.L8750
	mov	r0, sp
	bl	current_kernel_time
	bl	get_next_ino
	str	r0, [r5, #40]
	ldrh	r3, [r6, #196]
	mov	r1, r5
	ldr	ip, .L8769+8
	mov	r0, r7
	strh	r3, [r5]	@ movhi
	ldr	lr, [r6, #200]
	ldrd	r2, [sp]
	str	lr, [r5, #4]
	ldr	lr, [r6, #204]
	str	lr, [r5, #8]
	strd	r2, [r5, #52]
	strd	r2, [r5, #60]
	strd	r2, [r5, #68]
	str	ip, [r5, #200]
	str	r4, [r5, #328]
	bl	d_instantiate
	mov	r0, r7
	bl	d_rehash
	mov	r0, #0
	b	.L8743
.L8750:
	mov	r0, r7
	bl	dput
	b	.L8768
.L8770:
	.align	2
.L8769:
	.word	.LANCHOR1+3972
	.word	.LANCHOR5-1908
	.word	.LANCHOR5-1804
	.fnend
	.size	ffs_sb_fill, .-ffs_sb_fill
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_unbind, %function
mbim_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-126]
	ldrb	r6, [r1, #136]	@ zero_extendqisi2
	tst	r2, #4
	bne	.L8783
.L8772:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	add	r6, r5, r6, lsl #2
	ldr	r0, [r6, #3936]
	bl	kfree
	ldr	r0, [r5, #3940]
	mov	r3, #0
	str	r3, [r6, #3936]
	cmp	r0, r3
	beq	.L8773
	bl	destroy_workqueue
.L8773:
	ldr	r3, [r7, #24]
	mov	r2, #0
	str	r2, [r5, #3940]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L8784
	cmp	r3, #2
	bhi	.L8785
.L8775:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r3, [r4, #160]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR0
	strb	r2, [r3, #234]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8784:
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r7, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L8775
.L8785:
	ldr	r0, [r4, #8]
	bl	kfree
	b	.L8775
.L8783:
	movw	r1, #:lower16:.LC750
	sub	r0, r3, #144
	ldr	r2, .L8786
	movt	r1, #:upper16:.LC750
	bl	__dynamic_pr_debug
	b	.L8772
.L8787:
	.align	2
.L8786:
	.word	.LANCHOR5-1928
	.fnend
	.size	mbim_unbind, .-mbim_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_setup, %function
ffs_func_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #-28]
	ldr	r3, [r5, #92]
	cmp	r3, #2
	bne	.L8799
	ldrb	r3, [r1]	@ zero_extendqisi2
	and	r3, r3, #31
	cmp	r3, #1
	beq	.L8790
	cmp	r3, #2
	mvnne	r4, #94
	bne	.L8788
	ldrh	r3, [r1, #4]	@ unaligned
	and	r3, r3, #15
	add	r0, r0, r3
	ldrb	r4, [r0, #-20]	@ zero_extendqisi2
	cmp	r4, #0
	beq	.L8801
.L8793:
	add	r6, r5, #116
	mov	r8, r1
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r1, [r5, #96]
	mov	r7, r0
	add	lr, r5, #100
	ldr	r3, [r8, #4]	@ unaligned
	ldr	r2, [r8]	@ unaligned
	ldrh	ip, [r5, #104]
	cmp	r1, #1
	strd	r2, [r5, #108]
	moveq	r3, #2
	strh	r4, [r5, #112]	@ movhi
	streq	r3, [r5, #96]
	cmp	ip, #0
	beq	.L8802
	add	r3, r5, #99
	mov	r0, lr
	add	ip, r3, ip
.L8798:
	ldrb	r1, [r3, #1]!	@ zero_extendqisi2
	mov	r2, r0
	cmp	r1, #4
	strbne	r1, [r2], #1
	movne	r0, r2
	cmp	ip, r3
	bne	.L8798
	sub	r0, r0, lr
	add	r3, r0, #1
	uxth	ip, r0
	uxth	r3, r3
.L8796:
	add	ip, r5, ip
	strh	r3, [r5, #104]	@ movhi
	mov	r0, #4
	mov	r1, #3
	mov	r2, #1
	mov	r4, #0
	strb	r0, [ip, #100]
	mov	r0, r6
	bl	__wake_up_locked
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L8788:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8790:
	ldrh	r2, [r5, #178]
	ldrh	lr, [r1, #4]	@ unaligned
	ldr	r4, [r0, #-4]
	cmp	r2, #0
	uxtb	lr, lr
	beq	.L8801
	mov	r3, r4
.L8794:
	mov	ip, r3
	ldrsh	r0, [r3], #2
	cmp	r0, #0
	blt	.L8792
	cmp	r0, lr
	beq	.L8809
.L8792:
	subs	r2, r2, #1
	bne	.L8794
.L8801:
	mvn	r4, #32
	b	.L8788
.L8809:
	sub	ip, ip, r4
	cmp	ip, #0
	asr	r4, ip, #1
	bge	.L8793
	b	.L8788
.L8802:
	mov	r3, #1
	b	.L8796
.L8799:
	mvn	r4, #18
	b	.L8788
	.fnend
	.size	ffs_func_setup, .-ffs_func_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_put_char, %function
gs_put_char:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r4, [r0, #272]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #92]
	mov	r1, r0
	ldr	r3, [r4, #100]
	ldr	ip, [r4, #104]
	add	r3, r3, r5
	sub	r3, r3, ip
	sub	r3, r3, #1
	udiv	r2, r3, r5
	mls	r3, r5, r2, r3
	cmp	r3, #0
	moveq	r5, r3
	beq	.L8811
	ldr	r2, [r4, #96]
	add	r5, r2, r5
	subs	r3, r5, ip
	bne	.L8812
	strb	r6, [r2]
	ldr	r3, [r4, #96]
	mov	r5, #1
	add	r3, r3, r5
	str	r3, [r4, #104]
.L8811:
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8812:
	cmp	r3, #1
	strb	r6, [ip]
	beq	.L8813
	ldr	r3, [r4, #104]
	mov	r5, #1
	add	r3, r3, r5
	str	r3, [r4, #104]
	b	.L8811
.L8813:
	ldr	r2, [r4, #96]
	mov	r5, r3
	str	r2, [r4, #104]
	b	.L8811
	.fnend
	.size	gs_put_char, .-gs_put_char
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_complete_intr, %function
mtp_complete_intr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r3, #2500]
	cmp	r2, #0
	movne	r3, #4
	add	r5, r4, #88
	mov	r0, r5
	strne	r3, [r4, #104]
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	add	r2, r4, #124
	ldr	r1, [r4, #128]
	add	r0, r6, #36
	bl	__list_add
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	add	r0, r4, #156
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
	.fnend
	.size	mtp_complete_intr, .-mtp_complete_intr
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_complete_in, %function
mtp_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r3, #2500]
	cmp	r2, #0
	movne	r3, #4
	add	r5, r4, #88
	mov	r0, r5
	strne	r3, [r4, #104]
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	add	r2, r4, #116
	ldr	r1, [r4, #120]
	add	r0, r6, #36
	bl	__list_add
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	add	r0, r4, #144
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
	.fnend
	.size	mtp_complete_in, .-mtp_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_complete_in, %function
conn_gadget_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r3, #:lower16:.LANCHOR1
	mov	r5, r1
	strd	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #16]
	ldr	r2, [r1, #44]
	.pad #12
	sub	sp, sp, #12
	ldr	r4, [r3, #2484]
	cmp	r2, #0
	bne	.L8838
.L8829:
	add	r6, r4, #88
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	add	r2, r4, #120
	ldr	r1, [r4, #124]
	add	r0, r5, #36
	bl	__list_add
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	add	r0, r4, #156
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	__wake_up
.L8838:
	movw	r0, #:lower16:.LANCHOR4
	mov	r2, #1
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, #-102]
	str	r2, [r4, #104]
	tst	r3, #4
	beq	.L8830
	ldr	r3, .L8839
	movw	r1, #:lower16:.LC251
	sub	r0, r0, #120
	movt	r1, #:upper16:.LC251
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
.L8830:
	movw	r0, #:lower16:.LC755
	ldr	r1, .L8839
	movt	r0, #:upper16:.LC755
	ldr	r2, [r5, #44]
	bl	printk
	b	.L8829
.L8840:
	.align	2
.L8839:
	.word	.LANCHOR5-1696
	.fnend
	.size	conn_gadget_complete_in, .-conn_gadget_complete_in
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_ioctl, %function
conn_gadget_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r0, #29442
	ubfx	ip, r1, #8, #8
	strd	r6, [sp, #8]
	adr	r7, .L8891
	ldrd	r6, [r7]
	movt	r0, 32772
	mov	r3, #0
	cmp	ip, #115
	str	lr, [sp, #16]
	.pad #44
	sub	sp, sp, #44
	strd	r6, [sp]
	str	r0, [sp, #8]
	str	r3, [sp, #12]
	bne	.L8881
	mov	r5, r2
	uxtb	r2, r1
	cmp	r2, #2
	bhi	.L8882
	ubfx	r2, r1, #16, #14
	cmp	r2, #0
	beq	.L8883
	cmp	r1, #0
	bge	.L8884
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r4, [r2, #2484]
	cmp	r4, #0
	beq	.L8885
	movw	r2, #29441
	movt	r2, 32772
	cmp	r1, r2
	beq	.L8848
	cmp	r1, r0
	beq	.L8849
	mov	r2, #29440
	movt	r2, 32772
	cmp	r1, r2
	beq	.L8886
.L8841:
	mov	r0, r3
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L8848:
	ldr	r2, [r4, #100]
	ldr	r3, [r4, #212]
	cmp	r3, r2
	beq	.L8851
.L8880:
	cmp	r2, #0
	mov	r3, sp
	str	r2, [r4, #212]
	bic	r3, r3, #8128
	movne	r2, #1
	moveq	r2, #2
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	str	r2, [sp, #20]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r2, r5, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	movne	r3, #4
	beq	.L8887
.L8858:
	ldr	r4, .L8891+8
	movw	r0, #:lower16:.LC762
	mov	r2, r3
	movt	r0, #:upper16:.LC762
	sub	r1, r4, #4
	bl	printk
	movw	r0, #:lower16:.LC763
	sub	r1, r4, #24
	movt	r0, #:upper16:.LC763
	mvn	r2, #13
	bl	printk
	mvn	r3, #13
	b	.L8841
.L8887:
	mov	r0, r5
	mov	r2, #4
	add	r1, sp, #20
	bl	__copy_to_user
	subs	r3, r0, #0
	beq	.L8841
	b	.L8858
.L8886:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r2, r5, #16; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	movne	r3, #16
	beq	.L8888
.L8850:
	movw	r0, #:lower16:.LC760
	mov	r2, r3
	ldr	r1, .L8891+12
	movt	r0, #:upper16:.LC760
	bl	printk
	mvn	r3, #13
	b	.L8841
.L8888:
	mov	r0, r5
	mov	r2, #16
	mov	r1, sp
	bl	__copy_to_user
	subs	r3, r0, #0
	beq	.L8841
	b	.L8850
.L8849:
	ldr	r2, [r4, #100]
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	cmp	r2, #0
	movne	r2, #1
	moveq	r2, #2
	.syntax divided
@ 448 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r1, r5, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	str	r2, [sp, #20]
	movne	r3, #4
	beq	.L8889
.L8861:
	ldr	r4, .L8891+8
	movw	r0, #:lower16:.LC762
	mov	r2, r3
	movt	r0, #:upper16:.LC762
	sub	r1, r4, #4
	bl	printk
	movw	r0, #:lower16:.LC764
	sub	r1, r4, #24
	movt	r0, #:upper16:.LC764
	mvn	r2, #13
	bl	printk
	mvn	r3, #13
	b	.L8841
.L8889:
	mov	r0, r5
	mov	r2, #4
	add	r1, sp, #20
	bl	__copy_to_user
	subs	r3, r0, #0
	beq	.L8841
	b	.L8861
.L8851:
	ldr	r3, [r4, #216]
	cmp	r3, #0
	bne	.L8863
	mov	r2, sp
	str	r3, [sp, #20]
	movw	r1, #:lower16:autoremove_wake_function
	bic	r2, r2, #8128
	movt	r1, #:upper16:autoremove_wake_function
	bic	r2, r2, #63
	add	r7, r4, #200
	ldr	r0, [r2, #12]
	mov	r6, r2
	add	r2, sp, #32
	strd	r0, [sp, #24]
	str	r2, [sp, #32]
	str	r2, [sp, #36]
.L8856:
	mov	r2, #1
	add	r1, sp, #20
	mov	r0, r7
	bl	prepare_to_wait
	ldr	r3, [r4, #100]
	ldr	r2, [r4, #212]
	cmp	r2, r3
	bne	.L8854
	ldr	r3, [r4, #216]
	cmp	r3, #0
	bne	.L8855
	ldr	r3, [r6, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L8890
.L8854:
	add	r1, sp, #20
	mov	r0, r7
	bl	finish_wait
	ldr	r2, [r4, #100]
	b	.L8880
.L8890:
	bl	schedule
	b	.L8856
.L8855:
	add	r1, sp, #20
	mov	r0, r7
	bl	finish_wait
	ldr	r3, [r4, #100]
	str	r3, [r4, #212]
.L8863:
	movw	r0, #:lower16:.LC761
	ldr	r1, .L8891+12
	movt	r0, #:upper16:.LC761
	bl	printk
	mvn	r3, #3
	b	.L8841
.L8885:
	movw	r0, #:lower16:.LC450
	ldr	r1, .L8891+12
	movt	r0, #:upper16:.LC450
	bl	printk
	mvn	r3, #18
	b	.L8841
.L8884:
	movw	r0, #:lower16:.LC759
	ldr	r1, .L8891+12
	movt	r0, #:upper16:.LC759
	bl	printk
	mvn	r3, #21
	b	.L8841
.L8883:
	movw	r0, #:lower16:.LC758
	ldr	r1, .L8891+12
	movt	r0, #:upper16:.LC758
	bl	printk
	mvn	r3, #21
	b	.L8841
.L8882:
	movw	r0, #:lower16:.LC757
	ldr	r1, .L8891+12
	movt	r0, #:upper16:.LC757
	bl	printk
	mvn	r3, #24
	b	.L8841
.L8881:
	movw	r0, #:lower16:.LC756
	mov	r2, ip
	ldr	r1, .L8891+12
	movt	r0, #:upper16:.LC756
	bl	printk
	mvn	r3, #21
	b	.L8841
.L8892:
	.align	3
.L8891:
	.word	-2147192064
	.word	-2147192063
	.word	.LANCHOR5-1648
	.word	.LANCHOR5-1672
	.fnend
	.size	conn_gadget_ioctl, .-conn_gadget_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_function_unbind_config, %function
ncm_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r4, #3972]
	cmp	r3, #0
	beq	.L8893
	ldr	r0, [r3, #8]
	bl	unregister_netdev
	ldr	r0, [r4, #3972]
	add	r0, r0, #88
	bl	flush_work
	ldr	r3, [r4, #3972]
	ldr	r0, [r3, #8]
	bl	free_netdev
	mov	r3, #0
	str	r3, [r4, #3972]
.L8893:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ncm_function_unbind_config, .-ncm_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_function_unbind_config, %function
ecm_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r4, #3972]
	cmp	r3, #0
	beq	.L8899
	ldr	r0, [r3, #8]
	bl	unregister_netdev
	ldr	r0, [r4, #3972]
	add	r0, r0, #88
	bl	flush_work
	ldr	r3, [r4, #3972]
	ldr	r0, [r3, #8]
	bl	free_netdev
	mov	r3, #0
	str	r3, [r4, #3972]
.L8899:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_function_unbind_config, .-ecm_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_function_unbind_config, %function
rndis_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r4, #3972]
	cmp	r3, #0
	beq	.L8905
	ldr	r0, [r3, #8]
	bl	unregister_netdev
	ldr	r0, [r4, #3972]
	add	r0, r0, #88
	bl	flush_work
	ldr	r3, [r4, #3972]
	ldr	r0, [r3, #8]
	bl	free_netdev
	mov	r3, #0
	str	r3, [r4, #3972]
.L8905:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_function_unbind_config, .-rndis_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_read, %function
mbim_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR4
	movt	r6, #:upper16:.LANCHOR4
	strd	r8, [sp, #16]
	ldrh	r3, [r6, #-78]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	ldr	r5, [r0, #124]
	str	r2, [sp]
	tst	r3, #4
	str	r1, [sp, #8]
	bne	.L8958
	cmp	r5, #0
	beq	.L8959
.L8913:
	ldr	r3, [sp]
	cmp	r3, #4096
	bhi	.L8960
	add	r3, r5, #100
	str	r3, [sp, #12]
	.syntax divided
@ 61 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r1, r3
	.syntax divided
@ 63 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r1]
	add	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L8956
	mov	r3, sp
	ldr	r8, .L8971
	movw	r7, #:lower16:.LC767
	bic	r4, r3, #8128
	movt	r7, #:upper16:.LC767
	bic	r4, r4, #63
.L8916:
	ldr	r3, [r5, #88]
	cmp	r3, #0
	bne	.L8921
	ldr	r3, [r5, #232]
	cmp	r3, #0
	beq	.L8922
.L8921:
	ldr	r3, [r5, #232]
	cmp	r3, #0
	bne	.L8961
	add	r7, r5, #204
	add	r9, r5, #208
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #208]
	mov	r8, r0
	cmp	r4, r9
	bne	.L8925
	movw	r3, #:lower16:.LC313
	mov	r2, sp
	movt	r3, #:upper16:.LC313
	bic	r10, r2, #8128
	bic	r10, r10, #63
	str	r3, [sp, #4]
	b	.L8924
.L8927:
	ldrh	r3, [r6, #-30]
	tst	r3, #4
	bne	.L8962
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #208]
	mov	r8, r0
	cmp	r9, r4
	bne	.L8925
.L8924:
	ldrh	r3, [r6, #-54]
	tst	r3, #4
	bne	.L8963
.L8926:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #208]
	cmp	r3, r4
	bne	.L8927
	ldr	r0, [r10, #12]
	movw	r2, #:lower16:autoremove_wake_function
	mov	r3, #0
	add	fp, sp, #20
	add	r1, sp, #32
	movt	r2, #:upper16:autoremove_wake_function
	add	r8, r5, #108
	str	r3, [fp, #4]
	str	r3, [fp, #8]
	str	r3, [fp, #12]
	str	r3, [fp, #16]
	str	r3, [sp, #20]
	str	r0, [sp, #24]
	str	r2, [sp, #28]
	str	r1, [sp, #32]
	str	r1, [sp, #36]
.L8930:
	mov	r2, #1
	mov	r1, fp
	mov	r0, r8
	bl	prepare_to_wait
	ldr	r3, [r5, #208]
	cmp	r3, r4
	bne	.L8928
	ldr	r3, [r10, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L8964
	mov	r1, fp
	mov	r0, r8
	bl	finish_wait
	movw	r0, #:lower16:.LC771
	ldr	r1, .L8971
	movt	r0, #:upper16:.LC771
	bl	printk
	ldr	r1, [sp, #12]
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r5, #65024
	movt	r5, 65535
	b	.L8911
.L8963:
	ldr	r2, .L8971
	ldr	r0, .L8971+4
	ldr	r1, [sp, #4]
	bl	__dynamic_pr_debug
	b	.L8926
.L8962:
	movw	r1, #:lower16:.LC768
	ldr	r2, .L8971
	movt	r1, #:upper16:.LC768
	ldr	r0, .L8971+8
	bl	__dynamic_pr_debug
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #208]
	mov	r8, r0
	cmp	r4, r9
	beq	.L8924
.L8925:
	ldr	r3, [r4, #-4]
	sub	r9, r4, #8
	ldr	r2, [sp]
	cmp	r3, r2
	bhi	.L8965
	ldrh	r2, [r6, #-6]
	tst	r2, #4
	bne	.L8966
.L8934:
	mov	r0, r4
	bl	list_del
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [sp, #12]
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	ldr	r2, [r4, #-4]
	bic	r3, r3, #8128
	ldr	r0, [sp, #8]
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r1, r0, r2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L8967
	cmp	r2, #0
	bne	.L8968
.L8936:
	ldrh	r3, [r6, #18]
	ldr	r5, [r4, #-4]
	tst	r3, #4
	bne	.L8969
.L8937:
	cmp	r9, #0
	beq	.L8911
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r9
	bl	kfree
.L8911:
	mov	r0, r5
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8964:
	bl	schedule
	b	.L8930
.L8967:
	ldr	r1, [r4, #-8]
	bl	__copy_to_user
	mov	r2, r0
	cmp	r2, #0
	beq	.L8936
.L8968:
	movw	r0, #:lower16:.LC770
	ldr	r1, .L8971
	mvn	r5, #11
	movt	r0, #:upper16:.LC770
	bl	printk
	b	.L8937
.L8928:
	mov	r1, fp
	mov	r0, r8
	bl	finish_wait
	b	.L8927
.L8958:
	movw	r1, #:lower16:.LC310
	mov	r3, r2
	ldr	r2, .L8971
	movt	r1, #:upper16:.LC310
	sub	r0, r6, #96
	bl	__dynamic_pr_debug
	cmp	r5, #0
	bne	.L8913
.L8959:
	movw	r0, #:lower16:.LC558
	ldr	r1, .L8971
	mvn	r5, #18
	movt	r0, #:upper16:.LC558
	bl	printk
	b	.L8911
.L8969:
	movw	r1, #:lower16:.LC318
	movw	r0, #:lower16:.LANCHOR4
	ldr	r2, .L8971
	mov	r3, r5
	movt	r1, #:upper16:.LC318
	movt	r0, #:upper16:.LANCHOR4
	bl	__dynamic_pr_debug
	ldr	r5, [r4, #-4]
	b	.L8937
.L8966:
	movw	r1, #:lower16:.LC316
	ldr	r2, .L8971
	movt	r1, #:upper16:.LC316
	ldr	r0, .L8971+12
	bl	__dynamic_pr_debug
	b	.L8934
.L8956:
	ldr	r1, [sp, #12]
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC766
	ldr	r1, .L8971
	mvn	r5, #15
	movt	r0, #:upper16:.LC766
	bl	printk
	b	.L8911
.L8961:
	ldr	r1, [sp, #12]
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r5, #4
	b	.L8911
.L8965:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [sp, #12]
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC769
	ldr	r1, .L8971
	mvn	r5, #11
	movt	r0, #:upper16:.LC769
	ldr	r2, [r4, #-4]
	ldr	r3, [sp]
	bl	printk
	b	.L8911
.L8922:
	mov	r1, r8
	mov	r0, r7
	bl	printk
	ldr	r3, [r5, #88]
	cmp	r3, #0
	bne	.L8916
	ldr	r3, [r5, #232]
	cmp	r3, #0
	bne	.L8916
	ldr	r0, [r4, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	fp, sp, #20
	add	r1, sp, #32
	movt	r2, #:upper16:autoremove_wake_function
	str	r3, [fp, #4]
	add	r9, r5, #108
	str	r3, [fp, #8]
	str	r3, [fp, #12]
	str	r3, [fp, #16]
	str	r3, [sp, #20]
	str	r0, [sp, #24]
	str	r2, [sp, #28]
	str	r1, [sp, #32]
	str	r1, [sp, #36]
.L8920:
	mov	r2, #1
	mov	r1, fp
	mov	r0, r9
	bl	prepare_to_wait
	ldr	r3, [r5, #88]
	cmp	r3, #0
	beq	.L8970
.L8918:
	mov	r1, fp
	mov	r0, r9
	bl	finish_wait
	b	.L8916
.L8960:
	movw	r0, #:lower16:.LC765
	mov	r2, r3
	ldr	r1, .L8971
	movt	r0, #:upper16:.LC765
	mov	r3, #4096
	bl	printk
	mvn	r5, #21
	b	.L8911
.L8970:
	ldr	r3, [r5, #232]
	cmp	r3, #0
	bne	.L8918
	ldr	r3, [r4, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L8919
	bl	schedule
	b	.L8920
.L8919:
	mov	r1, fp
	mov	r0, r9
	bl	finish_wait
	ldr	r1, [sp, #12]
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r5, #65024
	movt	r5, 65535
	b	.L8911
.L8972:
	.align	2
.L8971:
	.word	.LANCHOR5-1612
	.word	.LANCHOR4-72
	.word	.LANCHOR4-48
	.word	.LANCHOR4-24
	.fnend
	.size	mbim_read, .-mbim_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_write, %function
acc_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r2
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	mov	r9, r2
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #52
	sub	sp, sp, #52
	ldr	r7, [r0, #124]
	str	r3, [sp, #12]
	ldrh	r3, [r3, #42]
	tst	r3, #4
	bne	.L9015
.L8974:
	ldrb	r3, [r7, #100]	@ zero_extendqisi2
	and	r2, r3, #3
	cmp	r2, #1
	bne	.L8975
	cmp	r5, #0
	beq	.L8996
	tst	r3, #1
	beq	.L8980
	add	r2, r7, #1648
	mov	fp, #57344
	str	r9, [sp, #20]
	movw	r3, #:lower16:autoremove_wake_function
	add	r2, r2, #8
	movt	r3, #:upper16:autoremove_wake_function
	movt	fp, 65535
	add	r8, r7, #88
	strd	r2, [sp, #4]
.L8981:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #4]
	mov	r9, r0
	ldr	r4, [r7, #1656]
	cmp	r4, r3
	beq	.L9016
	mov	r0, r4
	sub	r4, r4, #36
	bl	list_del
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, #0
	beq	.L8983
.L8984:
	cmp	r5, #16384
	movhi	r10, #16384
	movhi	r3, #0
	bhi	.L8990
	ldr	r3, [r7, #92]
	mov	r10, r5
	ldrh	r2, [r3, #20]
	udiv	r3, r5, r2
	mls	r3, r2, r3, r5
	clz	r3, r3
	lsr	r3, r3, #5
.L8990:
	ldrb	r2, [r4, #26]	@ zero_extendqisi2
	mov	r1, sp
	and	r1, r1, fp
	ldr	r0, [r4]
	bfi	r2, r3, #1, #1
	strb	r2, [r4, #26]
	ldr	r3, [r1, #8]
	.syntax divided
@ 439 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, r10; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L9017
	mov	r1, r10
	mvn	r9, #13
	bl	__memzero
.L8992:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	add	r0, r4, #36
	ldr	r2, [sp, #4]
	ldr	r1, [r7, #1660]
	bl	__list_add
	mov	r1, r5
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
.L8976:
	ldr	r3, [sp, #12]
	ldrh	r3, [r3, #138]
	tst	r3, #4
	bne	.L9018
.L8973:
	mov	r0, r9
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9017:
	mov	r2, r10
	mov	r1, r6
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L9019
	str	r10, [r4, #4]
	ldr	r0, [r7, #92]
	mov	r2, #208
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L9020
	subs	r5, r5, r10
	add	r6, r6, r10
	beq	.L9021
	ldrb	r3, [r7, #100]	@ zero_extendqisi2
	tst	r3, #1
	bne	.L8981
.L8980:
	ldr	r3, [sp, #12]
	ldrh	r3, [r3, #66]
	tst	r3, #4
	bne	.L8978
	mvn	r9, #4
	b	.L8976
.L9016:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
.L8983:
	ldrb	r3, [r7, #100]	@ zero_extendqisi2
	ands	r3, r3, #1
	beq	.L8998
	mov	r3, #0
	mov	r2, sp
	ldr	r1, [sp, #8]
	and	r2, r2, fp
	add	r10, r7, #1664
	str	r5, [sp, #16]
	mov	r9, r2
	str	r3, [sp, #28]
	add	r10, r10, #12
	str	r3, [sp, #32]
	str	r3, [sp, #36]
	str	r1, [sp, #36]
	str	r3, [sp, #40]
	str	r3, [sp, #44]
	ldr	r2, [r2, #12]
	add	r3, sp, #40
	str	r2, [sp, #32]
	str	r3, [sp, #40]
	str	r3, [sp, #44]
.L8989:
	mov	r2, #1
	add	r1, sp, #28
	mov	r0, r10
	bl	prepare_to_wait
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r2, [sp, #4]
	mov	r5, r0
	ldr	r3, [r7, #1656]
	cmp	r2, r3
	mov	r0, r3
	sub	r4, r3, #36
	beq	.L9022
	bl	list_del
	mov	r1, r5
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, #0
	bne	.L8987
.L8986:
	ldrb	r3, [r7, #100]	@ zero_extendqisi2
	ands	r3, r3, #1
	beq	.L8999
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L9023
	mov	r9, #65024
	movt	r9, 65535
.L8988:
	add	r1, sp, #28
	mov	r0, r10
	bl	finish_wait
	b	.L8976
.L8998:
	mov	r9, r3
	b	.L8976
.L9022:
	mov	r1, r5
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L8986
.L9023:
	bl	schedule
	b	.L8989
.L9020:
	ldr	r3, [sp, #12]
	ldrh	r3, [r3, #114]
	tst	r3, #4
	mvneq	r9, #4
	beq	.L8992
	movw	r1, #:lower16:.LC775
	mov	r2, r0
	ldr	r0, .L9024
	movt	r1, #:upper16:.LC775
	mvn	r9, #4
	bl	__dynamic_pr_debug
	b	.L8992
.L9021:
	ldr	r9, [sp, #20]
	b	.L8976
.L9015:
	ldr	r3, [sp, #12]
	movw	r1, #:lower16:.LC772
	movt	r1, #:upper16:.LC772
	add	r0, r3, #24
	bl	__dynamic_pr_debug
	b	.L8974
.L9018:
	movw	r1, #:lower16:.LC776
	mov	r2, r9
	ldr	r0, .L9024+4
	movt	r1, #:upper16:.LC776
	bl	__dynamic_pr_debug
	b	.L8973
.L8987:
	add	r1, sp, #28
	mov	r0, r10
	ldr	r5, [sp, #16]
	bl	finish_wait
	b	.L8984
.L8999:
	mov	r9, r3
	b	.L8988
.L8978:
	movw	r1, #:lower16:.LC774
	ldr	r0, .L9024+8
	mvn	r9, #4
	movt	r1, #:upper16:.LC774
	bl	__dynamic_pr_debug
	b	.L8976
.L8996:
	mov	r9, r5
	b	.L8976
.L8975:
	ldr	r3, [sp, #12]
	ldrh	r3, [r3, #90]
	tst	r3, #4
	mvneq	r9, #18
	beq	.L8973
	movw	r1, #:lower16:.LC773
	ldr	r0, .L9024+12
	mvn	r9, #18
	movt	r1, #:upper16:.LC773
	bl	__dynamic_pr_debug
	b	.L8973
.L9019:
	mvn	r9, #13
	b	.L8992
.L9025:
	.align	2
.L9024:
	.word	.LANCHOR4+96
	.word	.LANCHOR4+120
	.word	.LANCHOR4+48
	.word	.LANCHOR4+72
	.fnend
	.size	acc_write, .-acc_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_start, %function
bam_data_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #4]
	bne	.L9027
	cmp	r3, #0
	beq	.L9026
	ldr	r0, .L9052
	ldrh	r2, [r0, #-14]
	tst	r2, #4
	bne	.L9050
.L9030:
	ldr	r0, [r3, #12]
	mov	r2, #32
	ldr	r1, [r4, #36]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	movwne	r0, #:lower16:.LC112
	ldrne	r1, .L9052+4
	bne	.L9049
.L9026:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L9027:
	cmp	r3, #0
	beq	.L9026
	ldr	r0, .L9052+8
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L9051
.L9032:
	ldr	r0, [r3, #8]
	mov	r2, #32
	ldr	r1, [r4, #40]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L9026
	ldr	r1, .L9052+12
	movw	r0, #:lower16:.LC112
.L9049:
	movt	r0, #:upper16:.LC112
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk
.L9050:
	ldr	r3, .L9052+4
	movw	r1, #:lower16:.LC384
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC384
	mov	r2, r3
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #4]
	b	.L9030
.L9051:
	ldr	r3, .L9052+12
	movw	r1, #:lower16:.LC384
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC384
	mov	r2, r3
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #4]
	b	.L9032
.L9053:
	.align	2
.L9052:
	.word	.LANCHOR4-3184
	.word	.LANCHOR3+3164
	.word	.LANCHOR4-3168
	.word	.LANCHOR3+3192
	.fnend
	.size	bam_data_start, .-bam_data_start
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_complete_epout, %function
rmnet_sdio_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r1, #44]
	ldr	r6, [r1, #32]
	ldr	r8, [r4, #84]
	cmn	r3, #104
	beq	.L9081
	cmp	r3, #0
	beq	.L9056
	cmn	r3, #108
	beq	.L9081
	ldr	r2, [r0, #4]
	movw	r1, #:lower16:.LC218
	ldr	r0, [r8]
	movt	r1, #:upper16:.LC218
	ldr	lr, [r5, #4]
	ldr	ip, [r5, #48]
	add	r0, r0, #32
	stm	sp, {ip, lr}
	bl	dev_err
	mov	r0, r6
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #316]
	tst	r3, #2
	beq	.L9058
	add	r7, r4, #188
	mov	r0, r7
	bl	_raw_spin_lock
.L9059:
	movw	r3, #:lower16:.LANCHOR0
	ldr	r2, [r4, #324]
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #1480]
	cmp	r2, r3
	bcs	.L9082
	mov	r0, r7
	bl	_raw_spin_unlock
	mvn	r3, #0
	mov	r2, #0
	mov	r1, #32
	movw	r0, #2056
	bl	__alloc_skb
	subs	r6, r0, #0
	beq	.L9063
	ldr	r0, [r6, #160]
	mov	ip, #2048
	mov	r2, #32
	ldr	r3, [r6, #172]
	mov	r1, r5
	add	r0, r0, #8
	add	r3, r3, #8
	str	r0, [r6, #160]
	str	r3, [r6, #172]
	stm	r5, {r3, ip}
	str	r6, [r5, #32]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	bne	.L9083
.L9054:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9056:
	mov	r0, r6
	ldr	r1, [r1, #48]
	bl	skb_put
	ldr	r3, [r4, #316]
	tst	r3, #2
	beq	.L9058
	add	r7, r4, #188
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r3, [r4, #176]
	add	r2, r4, #172
	add	r1, r4, #236
	strd	r2, [r6]
	str	r6, [r3]
	ldr	r3, [r4, #180]
	str	r6, [r4, #176]
	ldr	r0, [r4, #200]
	add	r3, r3, #1
	str	r3, [r4, #180]
	bl	queue_work
	b	.L9059
.L9058:
	movw	r0, #:lower16:.LC282
	ldr	r1, .L9084
	movt	r0, #:upper16:.LC282
	bl	printk
.L9081:
	mov	r0, r6
	bl	dev_kfree_skb_any
	mov	r3, #0
	mov	r0, r3
	str	r3, [r5]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	ldr	r3, [r3, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L9082:
	add	r0, r5, #36
	add	r2, r4, #160
	ldr	r1, [r4, #164]
	bl	__list_add
	ldr	r3, [r4, #168]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #168]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L9083:
	mov	r0, r6
	bl	dev_kfree_skb_any
.L9061:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC32
	mov	r2, r7
	movt	r1, #:upper16:.LC32
	add	r0, r0, #32
	bl	dev_err
	add	r0, r5, #36
	add	r2, r4, #160
	ldr	r1, [r4, #164]
	bl	__list_add
	ldr	r3, [r4, #168]
	add	r3, r3, #1
	str	r3, [r4, #168]
	b	.L9054
.L9063:
	mvn	r7, #11
	b	.L9061
.L9085:
	.align	2
.L9084:
	.word	.LANCHOR5-1600
	.fnend
	.size	rmnet_sdio_complete_epout, .-rmnet_sdio_complete_epout
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_unbind, %function
f_audio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	ldr	r0, [r1, #16]
	str	lr, [sp, #4]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	f_audio_unbind, .-f_audio_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_sdio_complete_epout, %function
rmnet_mux_sdio_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	r7, [r1, #32]
	ldr	r8, [r4, #360]
	cmp	r8, #0
	beq	.L9107
	ldr	r3, [r1, #44]
	ldr	r8, [r4, #84]
	cmn	r3, #104
	beq	.L9090
	cmp	r3, #0
	beq	.L9091
	cmn	r3, #108
	beq	.L9090
	ldr	r2, [r0, #4]
	movw	r1, #:lower16:.LC226
	add	r6, r4, #364
	ldr	r0, [r8]
	movt	r1, #:upper16:.LC226
	ldr	lr, [r5, #4]
	ldr	ip, [r5, #48]
	add	r0, r0, #32
	stm	sp, {ip, lr}
	bl	dev_err
	mov	r0, r7
	bl	dev_kfree_skb_any
	mov	r0, r6
	bl	_raw_spin_lock
.L9093:
	movw	r3, #:lower16:.LANCHOR0
	ldr	r2, [r4, #308]
	movt	r3, #:upper16:.LANCHOR0
	ldr	r3, [r3, #1484]
	cmp	r2, r3
	bcs	.L9108
	mov	r0, r6
	bl	_raw_spin_unlock
	mvn	r3, #0
	mov	r2, #0
	mov	r1, #32
	movw	r0, #2056
	bl	__alloc_skb
	subs	r6, r0, #0
	beq	.L9097
	ldr	r0, [r6, #160]
	mov	ip, #2048
	mov	r2, #32
	ldr	r3, [r6, #172]
	mov	r1, r5
	add	r0, r0, #8
	add	r3, r3, #8
	str	r0, [r6, #160]
	str	r3, [r6, #172]
	stm	r5, {r3, ip}
	str	r6, [r5, #32]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	bne	.L9109
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9091:
	mov	r0, r7
	add	r6, r4, #364
	ldr	r1, [r1, #48]
	bl	skb_put
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r4, #228]
	add	r2, r4, #224
	add	r1, r4, #240
	strd	r2, [r7]
	str	r7, [r3]
	ldr	r3, [r4, #232]
	str	r7, [r4, #228]
	ldr	r0, [r4, #376]
	add	r3, r3, #1
	str	r3, [r4, #232]
	bl	queue_work
	b	.L9093
.L9090:
	mov	r0, r7
	bl	dev_kfree_skb_any
	mov	r3, #0
	mov	r0, r3
	str	r3, [r5]
.L9106:
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L9107:
	mov	r0, r7
	bl	dev_kfree_skb_any
	mov	r0, r8
	str	r8, [r5]
	b	.L9106
.L9108:
	ldr	r1, [r4, #220]
	add	r0, r5, #36
	add	r2, r4, #216
	bl	__list_add
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L9109:
	mov	r0, r6
	bl	dev_kfree_skb_any
.L9095:
	ldr	r0, [r8]
	movw	r1, #:lower16:.LC777
	mov	r2, r7
	movt	r1, #:upper16:.LC777
	add	r0, r0, #32
	bl	dev_err
	ldr	r1, [r4, #220]
	add	r0, r5, #36
	add	r2, r4, #216
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__list_add
.L9097:
	mvn	r7, #11
	b	.L9095
	.fnend
	.size	rmnet_mux_sdio_complete_epout, .-rmnet_mux_sdio_complete_epout
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rx_complete, %function
rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	ldr	r3, [r1, #44]
	ldr	r5, [r1, #32]
	cmn	r3, #103
	beq	.L9111
	ble	.L9134
	cmn	r3, #75
	beq	.L9115
	cmp	r3, #0
	bne	.L9114
	mov	r0, r5
	ldr	r1, [r1, #48]
	bl	skb_put
	ldr	r3, [r4, #84]
	cmp	r3, #0
	beq	.L9116
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r0, [r4, #4]
	cmp	r0, #0
	beq	.L9117
	mov	r1, r5
	add	r2, r4, #52
	ldr	r3, [r4, #84]
	blx	r3
	cmn	r0, #22
	mov	r5, r0
	beq	.L9135
	cmn	r0, #75
	beq	.L9136
	mov	r1, r7
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	bne	.L9119
.L9121:
	add	r5, r4, #16
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r1, r4
	add	r0, r6, #36
	ldr	r2, [r1, #28]!
	bl	__list_add
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r4, #104
	ldrd	r4, [sp]
	movt	r3, #:upper16:.LANCHOR1
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r0, [r3, #3312]
	b	queue_work
.L9134:
	cmn	r3, #108
	beq	.L9113
	cmn	r3, #104
	beq	.L9113
.L9114:
	mov	r0, r5
	bl	dev_kfree_skb_any
	ldr	r2, [r4, #8]
	ldr	r3, [r2, #248]
	add	r3, r3, #1
	str	r3, [r2, #248]
	b	.L9121
.L9111:
	add	r1, r4, #120
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L9113
	add	r0, r4, #88
	bl	schedule_work
	subs	r2, r0, #0
	beq	.L9137
.L9113:
	mov	r0, r5
	bl	dev_kfree_skb_any
.L9119:
	add	r5, r4, #16
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r1, r4
	add	r0, r6, #36
	ldr	r2, [r1, #28]!
	bl	__list_add
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock
.L9115:
	ldr	r2, [r4, #8]
	ldr	r3, [r2, #276]
	add	r3, r3, #1
	str	r3, [r2, #276]
	b	.L9114
.L9116:
	mov	r1, r5
	add	r0, r4, #52
	bl	skb_queue_tail
	b	.L9121
.L9135:
	ldr	r2, [r4, #8]
	mov	r1, r7
	mov	r0, r4
	ldr	r3, [r2, #248]
	add	r3, r3, #1
	str	r3, [r2, #248]
	bl	_raw_spin_unlock_irqrestore
	b	.L9119
.L9136:
	ldr	r2, [r4, #8]
	mov	r1, r7
	mov	r0, r4
	ldr	r3, [r2, #276]
	add	r3, r3, #1
	str	r3, [r2, #276]
	bl	_raw_spin_unlock_irqrestore
	b	.L9119
.L9117:
	mov	r0, r5
	bl	dev_kfree_skb_any
	mov	r1, r7
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	b	.L9119
.L9137:
	movw	r0, #:lower16:.LC778
	ldr	r1, [r4, #8]
	movt	r0, #:upper16:.LC778
	bl	printk
	b	.L9113
	.fnend
	.size	rx_complete, .-rx_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_close, %function
rndis_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movw	r4, #:lower16:.LANCHOR4
	mov	r5, r0
	movt	r4, #:upper16:.LANCHOR4
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [r4, #162]
	tst	r3, #4
	bne	.L9151
.L9139:
	ldrh	r3, [r4, #186]
	ldr	r0, [r5, #164]
	tst	r3, #4
	uxtb	r4, r0
	bne	.L9152
.L9140:
	movw	r3, #:lower16:.LANCHOR1
	cmp	r4, #0
	movt	r3, #:upper16:.LANCHOR1
	rsb	ip, r0, r0, lsl #4
	mov	r1, #12
	streq	r4, [r3, #3880]
	mov	r2, #1
	movt	r1, 16385
	streq	r4, [r3, #3884]
	add	r3, r3, ip, lsl #2
	str	r2, [r3, #3888]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	rndis_indicate_status_msg
.L9151:
	ldr	r1, [r5, #20]
	movw	r2, #:lower16:.LC21
	add	r0, r4, #144
	movt	r2, #:upper16:.LC21
	ldr	r3, .L9153
	ldr	r1, [r1, #24]
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L9139
.L9152:
	mov	ip, #0
	movw	r1, #:lower16:.LC779
	ldr	r2, .L9153+4
	mov	r3, ip
	movt	r1, #:upper16:.LC779
	ldr	r0, .L9153+8
	str	ip, [sp]
	bl	__dynamic_pr_debug
	ldr	r0, [r5, #164]
	b	.L9140
.L9154:
	.align	2
.L9153:
	.word	.LANCHOR5-1572
	.word	.LANCHOR5-1560
	.word	.LANCHOR4+168
	.fnend
	.size	rndis_close, .-rndis_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_close, %function
rndis_qc_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movw	r4, #:lower16:.LANCHOR4
	mov	r5, r0
	movt	r4, #:upper16:.LANCHOR4
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [r4, #210]
	tst	r3, #4
	bne	.L9168
.L9156:
	ldrh	r3, [r4, #186]
	ldr	r0, [r5, #144]
	tst	r3, #4
	uxtb	r4, r0
	bne	.L9169
.L9157:
	movw	r3, #:lower16:.LANCHOR1
	cmp	r4, #0
	movt	r3, #:upper16:.LANCHOR1
	rsb	ip, r0, r0, lsl #4
	mov	r1, #12
	streq	r4, [r3, #3880]
	mov	r2, #1
	movt	r1, 16385
	streq	r4, [r3, #3884]
	add	r3, r3, ip, lsl #2
	str	r2, [r3, #3888]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	rndis_indicate_status_msg
.L9168:
	ldr	r1, [r5, #20]
	movw	r2, #:lower16:.LC21
	add	r0, r4, #192
	movt	r2, #:upper16:.LC21
	ldr	r3, .L9170
	ldr	r1, [r1, #24]
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L9156
.L9169:
	mov	ip, #0
	movw	r1, #:lower16:.LC779
	ldr	r2, .L9170+4
	mov	r3, ip
	movt	r1, #:upper16:.LC779
	ldr	r0, .L9170+8
	str	ip, [sp]
	bl	__dynamic_pr_debug
	ldr	r0, [r5, #144]
	b	.L9157
.L9171:
	.align	2
.L9170:
	.word	.LANCHOR5-1536
	.word	.LANCHOR5-1560
	.word	.LANCHOR4+168
	.fnend
	.size	rndis_qc_close, .-rndis_qc_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_function_unbind_config, %function
rndis_qc_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC780
	movw	r0, #:lower16:init_net
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r1, #:upper16:.LC780
	movt	r0, #:upper16:init_net
	str	lr, [sp, #4]
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L9172
	.syntax divided
@ 17 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/irqflags.h" 1
		mrs	ip, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	movw	r2, #:lower16:__per_cpu_offset
	bic	r1, r3, #8128
	movt	r2, #:upper16:__per_cpu_offset
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
	ldr	r1, [r2, r1, lsl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, ip	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	bl	unregister_netdev
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	free_netdev
.L9172:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_qc_function_unbind_config, .-rndis_qc_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_setup, %function
mbim_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r1, #4]	@ unaligned
	.pad #28
	sub	sp, sp, #28
	ldr	r9, [r0, #84]
	ldr	r3, [r0, #88]
	str	r2, [sp, #20]
	ldrh	r2, [r1, #2]	@ unaligned
	ldr	r4, [r9, #4]
	cmp	r3, #0
	str	r2, [sp, #16]
	ldrh	r8, [r1, #6]	@ unaligned
	beq	.L9253
	ldrh	r3, [r1]	@ unaligned
	movw	r2, #8582
	mov	r7, r0
	mov	r6, r1
	rev16	r3, r3
	uxth	r3, r3
	cmp	r3, r2
	beq	.L9178
	bls	.L9254
	movw	r2, #41344
	cmp	r3, r2
	beq	.L9184
	bls	.L9255
	movw	r2, #41347
	cmp	r3, r2
	bne	.L9256
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #474
	movt	r5, #:upper16:.LANCHOR4
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L9257
.L9204:
	ldr	r3, [sp, #16]
	adds	r2, r3, #0
	movne	r2, #1
	cmp	r8, #1
	orrls	r2, r2, #1
	cmp	r2, #0
	bne	.L9195
	ldrb	r3, [r7, #196]	@ zero_extendqisi2
	ldr	r1, [sp, #20]
	cmp	r3, r1
	bne	.L9195
	ldr	ip, .L9274
	cmp	r8, #2
	movw	r0, #498
	ldr	r3, [r7, #200]
	movle	fp, #0
	movgt	fp, #1
	ldr	r1, [r4]
	subs	r3, r3, ip
	movne	r3, #1
	strb	r3, [r1]
	strb	r2, [r1, #1]
	ldrh	r2, [r5, r0]
	tst	r2, #4
	moveq	r10, #2
	beq	.L9190
	movw	r1, #:lower16:.LC796
	ldr	r2, .L9274+4
	mov	r10, #2
	movt	r1, #:upper16:.LC796
	ldr	r0, .L9274+8
	bl	__dynamic_pr_debug
	b	.L9190
.L9256:
	movw	r2, #41349
	cmp	r3, r2
	bne	.L9183
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #402
	movt	r5, #:upper16:.LANCHOR4
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L9258
.L9201:
	ldr	r3, [sp, #16]
	adds	r3, r3, #0
	movne	r3, #1
	cmp	r8, #3
	orrls	r3, r3, #1
	cmp	r3, #0
	bne	.L9195
	ldrb	r3, [r7, #196]	@ zero_extendqisi2
	ldr	r2, [sp, #20]
	cmp	r3, r2
	bne	.L9195
	ldr	r3, [r7, #224]
	movw	r0, #426
	cmp	r8, #4
	ldr	r2, [r4]
	movle	fp, #0
	movgt	fp, #1
	lsr	r1, r3, #16
	strb	r3, [r2]
	ubfx	r3, r3, #8, #8
	lsr	ip, r1, #8
	strb	r3, [r2, #1]
	strb	r1, [r2, #2]
	strb	ip, [r2, #3]
	ldrh	r3, [r5, r0]
	tst	r3, #4
	moveq	r10, #4
	beq	.L9190
	movw	r1, #:lower16:.LC792
	ldr	r2, .L9274+4
	mov	r10, #4
	movt	r1, #:upper16:.LC792
	ldr	r0, .L9274+12
	ldr	r3, [r7, #224]
	bl	__dynamic_pr_debug
	b	.L9190
.L9255:
	movw	r2, #41217
	cmp	r3, r2
	bne	.L9183
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #306
	movt	r5, #:upper16:.LANCHOR4
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L9259
.L9193:
	ldr	r3, [sp, #16]
	cmp	r3, #0
	bne	.L9260
	movw	r3, #330
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L9261
.L9196:
	add	r10, r7, #204
	mov	r0, r10
	bl	_raw_spin_lock
	ldr	fp, [r7, #216]!
	cmp	fp, r7
	beq	.L9262
	mov	r0, fp
	sub	r7, fp, #8
	bl	list_del
	mov	r0, r10
	bl	_raw_spin_unlock
	ldmdb	fp, {r1, r10}
	ldr	r0, [r4]
	cmp	r8, r10
	movcc	r10, r8
	mov	r2, r10
	bl	memcpy
	cmp	r7, #0
	beq	.L9198
	ldr	r0, [fp, #-8]
	bl	kfree
	mov	r0, r7
	bl	kfree
.L9198:
	movw	r3, #354
	cmp	r10, r8
	ldrh	r3, [r5, r3]
	movge	fp, #0
	movlt	fp, #1
	tst	r3, #4
	beq	.L9190
	movw	r1, #:lower16:.LC789
	mov	r3, r10
	ldr	r2, .L9274+4
	movt	r1, #:upper16:.LC789
	ldr	r0, .L9274+16
	bl	__dynamic_pr_debug
	b	.L9190
.L9254:
	movw	r2, #8453
	cmp	r3, r2
	beq	.L9180
	movw	r2, #8580
	cmp	r3, r2
	bne	.L9263
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #522
	movt	r5, #:upper16:.LANCHOR4
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L9264
.L9205:
	cmp	r8, #0
	bne	.L9195
	ldrb	r3, [r7, #196]	@ zero_extendqisi2
	ldr	r2, [sp, #20]
	cmp	r3, r2
	bne	.L9195
	ldr	r3, [sp, #16]
	cmp	r3, #0
	beq	.L9206
	cmp	r3, #1
	bne	.L9212
	movw	r3, #570
	ldr	r2, .L9274+20
	ldrh	r3, [r5, r3]
	str	r2, [r7, #200]
	tst	r3, #4
	bne	.L9265
.L9212:
	mov	r10, r8
	mov	fp, r8
	b	.L9190
.L9263:
	cmp	r3, #8448
	bne	.L9183
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #258
	movt	r5, #:upper16:.LANCHOR4
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L9266
.L9191:
	ldr	r0, [r4, #4]
	mov	r10, r8
	cmp	r8, r0
	bls	.L9192
	movw	r3, #282
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L9267
.L9192:
	movw	r3, #:lower16:fmbim_cmd_complete
	mov	fp, #0
	str	r7, [r4, #32]
	movt	r3, #:upper16:fmbim_cmd_complete
	str	r3, [r4, #28]
.L9190:
	movw	r3, #594
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L9268
.L9208:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r10, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	bfi	r3, fp, #1, #1
	strb	r3, [r4, #26]
	ldr	r3, [r9]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L9175
	movw	r0, #:lower16:.LC802
	ldrb	r3, [r6, #1]	@ zero_extendqisi2
	str	r4, [sp]
	movt	r0, #:upper16:.LC802
	ldr	r1, .L9274+4
	ldrb	r2, [r6]	@ zero_extendqisi2
	bl	printk
.L9175:
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9180:
	movw	r5, #:lower16:.LANCHOR4
	movt	r5, #:upper16:.LANCHOR4
	ldrh	r3, [r5, #234]
	tst	r3, #4
	bne	.L9269
.L9189:
	movw	r3, #:lower16:fmbim_reset_cmd_complete
	adds	fp, r8, #0
	str	r7, [r4, #32]
	movt	r3, #:upper16:fmbim_reset_cmd_complete
	movne	fp, #1
	mov	r10, #0
	str	r3, [r4, #28]
	b	.L9190
.L9184:
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #378
	movt	r5, #:upper16:.LANCHOR4
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L9270
.L9199:
	ldr	r3, [sp, #16]
	adds	r3, r3, #0
	movne	r3, #1
	cmp	r8, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L9195
	ldrb	r3, [r7, #196]	@ zero_extendqisi2
	ldr	r2, [sp, #20]
	cmp	r3, r2
	bne	.L9195
	cmp	r8, #28
	ldr	r1, .L9274+24
	movcc	r10, r8
	movcs	r10, #28
	ldr	r0, [r4]
	cmp	r10, r8
	mov	r2, r10
	movcs	fp, #0
	movcc	fp, #1
	bl	memcpy
	b	.L9190
.L9178:
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #450
	movt	r5, #:upper16:.LANCHOR4
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L9271
.L9202:
	sub	r3, r8, #4
	bic	r3, r3, #4
	uxth	r3, r3
	cmp	r3, #0
	bne	.L9272
	ldr	fp, [sp, #16]
	cmp	fp, #0
	bne	.L9195
	ldrb	r3, [r7, #196]	@ zero_extendqisi2
	ldr	r2, [sp, #20]
	cmp	r3, r2
	bne	.L9195
	movw	r3, #:lower16:mbim_ep0out_complete
	mov	r10, r8
	str	r8, [r4, #4]
	movt	r3, #:upper16:mbim_ep0out_complete
	str	r3, [r4, #28]
	str	r7, [r4, #32]
	b	.L9190
.L9268:
	ldr	r3, [sp, #16]
	movw	r1, #:lower16:.LC801
	ldrb	ip, [r6, #1]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC801
	ldr	r2, .L9274+4
	ldr	r0, .L9274+28
	str	r3, [sp, #4]
	ldr	r3, [sp, #20]
	str	r3, [sp, #8]
	ldrb	r3, [r6]	@ zero_extendqisi2
	str	ip, [sp]
	str	r8, [sp, #12]
	bl	__dynamic_pr_debug
	b	.L9208
.L9259:
	movw	r1, #:lower16:.LC785
	ldr	r2, .L9274+4
	add	r0, r5, #288
	movt	r1, #:upper16:.LC785
	bl	__dynamic_pr_debug
	b	.L9193
.L9258:
	movw	r1, #:lower16:.LC791
	ldr	r2, .L9274+4
	add	r0, r5, #384
	movt	r1, #:upper16:.LC791
	bl	__dynamic_pr_debug
	b	.L9201
.L9265:
	movw	r1, #:lower16:.LC799
	ldr	r2, .L9274+4
	mov	r10, r8
	movt	r1, #:upper16:.LC799
	ldr	r0, .L9274+32
	mov	fp, r8
	bl	__dynamic_pr_debug
	b	.L9190
.L9206:
	movw	r3, #546
	ldr	r2, .L9274
	ldrh	r3, [r5, r3]
	str	r2, [r7, #200]
	tst	r3, #4
	bne	.L9273
	ldr	fp, [sp, #16]
	mov	r10, fp
	b	.L9190
.L9264:
	movw	r1, #:lower16:.LC797
	ldr	r2, .L9274+4
	add	r0, r5, #504
	movt	r1, #:upper16:.LC797
	bl	__dynamic_pr_debug
	b	.L9205
.L9257:
	movw	r1, #:lower16:.LC795
	ldr	r2, .L9274+4
	add	r0, r5, #456
	movt	r1, #:upper16:.LC795
	bl	__dynamic_pr_debug
	b	.L9204
.L9266:
	movw	r1, #:lower16:.LC783
	ldr	r2, .L9274+4
	add	r0, r5, #240
	movt	r1, #:upper16:.LC783
	bl	__dynamic_pr_debug
	b	.L9191
.L9261:
	ldrb	ip, [r6, #1]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC787
	ldr	r3, [sp, #16]
	movt	r1, #:upper16:.LC787
	ldr	r2, [sp, #20]
	ldr	r0, .L9274+36
	str	r3, [sp, #4]
	ldrb	r3, [r6]	@ zero_extendqisi2
	str	ip, [sp]
	str	r2, [sp, #8]
	ldr	r2, .L9274+4
	str	r8, [sp, #12]
	bl	__dynamic_pr_debug
	b	.L9196
.L9270:
	movw	r1, #:lower16:.LC790
	ldr	r2, .L9274+4
	add	r0, r5, #360
	movt	r1, #:upper16:.LC790
	bl	__dynamic_pr_debug
	b	.L9199
.L9269:
	movw	r1, #:lower16:.LC782
	ldr	r2, .L9274+4
	add	r0, r5, #216
	movt	r1, #:upper16:.LC782
	bl	__dynamic_pr_debug
	b	.L9189
.L9271:
	movw	r1, #:lower16:.LC793
	ldr	r2, .L9274+4
	add	r0, r5, #432
	movt	r1, #:upper16:.LC793
	bl	__dynamic_pr_debug
	b	.L9202
.L9267:
	movw	r1, #:lower16:.LC784
	mov	r3, r8
	ldr	r2, .L9274+4
	movt	r1, #:upper16:.LC784
	str	r0, [sp]
	ldr	r0, .L9274+40
	bl	__dynamic_pr_debug
	b	.L9192
.L9273:
	ldr	fp, [sp, #16]
	movw	r1, #:lower16:.LC798
	ldr	r2, .L9274+4
	movt	r1, #:upper16:.LC798
	ldr	r0, .L9274+44
	mov	r10, fp
	bl	__dynamic_pr_debug
	b	.L9190
.L9272:
	movw	r0, #:lower16:.LC794
	mov	r2, r8
	ldr	r1, .L9274+4
	movt	r0, #:upper16:.LC794
	bl	printk
.L9195:
	ldrb	ip, [r6, #1]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC803
	ldr	r3, [sp, #16]
	movt	r0, #:upper16:.LC803
	ldr	r2, [sp, #20]
	ldr	r1, .L9274+4
	str	r3, [sp, #4]
	ldrb	r3, [r6]	@ zero_extendqisi2
	str	ip, [sp]
	str	r2, [sp, #8]
	mvn	r2, #94
	str	r8, [sp, #12]
	mov	r4, r2
	bl	printk
	b	.L9175
.L9260:
	movw	r0, #:lower16:.LC786
	mov	r2, r8
	ldr	r1, .L9274+4
	movt	r0, #:upper16:.LC786
	bl	printk
	b	.L9195
.L9262:
	movw	r0, #:lower16:.LC788
	ldr	r1, .L9274+4
	movt	r0, #:upper16:.LC788
	bl	printk
	mov	r0, r10
	bl	_raw_spin_unlock
	b	.L9195
.L9253:
	movw	r0, #:lower16:.LC781
	ldr	r1, .L9274+4
	mvn	r4, #106
	movt	r0, #:upper16:.LC781
	bl	printk
	b	.L9175
.L9183:
	ldr	r2, [sp, #16]
	movw	r0, #:lower16:.LC800
	ldr	r1, [sp, #20]
	movt	r0, #:upper16:.LC800
	ldrb	r3, [r6, #1]	@ zero_extendqisi2
	str	r2, [sp]
	ldrb	r2, [r6]	@ zero_extendqisi2
	stmib	sp, {r1, r8}
	ldr	r1, .L9274+4
	bl	printk
	b	.L9195
.L9275:
	.align	2
.L9274:
	.word	.LANCHOR0+1488
	.word	.LANCHOR5-1520
	.word	.LANCHOR4+480
	.word	.LANCHOR4+408
	.word	.LANCHOR4+336
	.word	.LANCHOR0+1532
	.word	.LANCHOR0+180
	.word	.LANCHOR4+576
	.word	.LANCHOR4+552
	.word	.LANCHOR4+312
	.word	.LANCHOR4+264
	.word	.LANCHOR4+528
	.fnend
	.size	mbim_setup, .-mbim_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_store_file, %function
fsg_store_file:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	mov	r5, r3
	strd	r6, [sp, #8]
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	ldrb	r3, [r4, #-24]	@ zero_extendqisi2
	mov	r6, r0
	tst	r3, #16
	beq	.L9277
	ldr	r3, [r4, #-48]
	cmp	r3, #0
	bne	.L9305
.L9277:
	cmp	r5, #0
	beq	.L9279
	sub	r3, r5, #1
	mov	r0, r6
	ldrb	r2, [r7, r3]	@ zero_extendqisi2
	cmp	r2, #10
	moveq	r2, #0
	strbeq	r2, [r7, r3]
	bl	down_write
	ldr	r0, [r4, #-48]
	cmp	r0, #0
	beq	.L9291
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #642
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r8, [r3, r2]
	ubfx	r8, r8, #2, #1
	cmp	r8, #0
	bne	.L9306
	bl	fput
	mov	r3, #14848
	str	r8, [r4, #-48]
	movt	r3, 2
	str	r3, [r4, #-12]
.L9291:
	ldrb	r3, [r7]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L9307
.L9282:
	mov	r0, r6
	bl	up_write
.L9281:
	mov	r7, r5
.L9276:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9279:
	mov	r0, r6
	bl	down_write
	ldr	r0, [r4, #-48]
	cmp	r0, #0
	beq	.L9282
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #642
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L9308
.L9304:
	bl	fput
	mov	r3, #14848
	str	r5, [r4, #-48]
	movt	r3, 2
	str	r3, [r4, #-12]
	b	.L9282
.L9307:
	mov	r1, r7
	sub	r0, r4, #48
	bl	fsg_lun_open
	subs	r7, r0, #0
	bne	.L9283
	mov	r3, #10240
	mov	r0, r6
	movt	r3, 6
	str	r3, [r4, #-12]
	bl	up_write
	b	.L9281
.L9283:
	mov	r0, r6
	bl	up_write
	cmp	r7, #0
	blt	.L9276
	b	.L9281
.L9305:
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #618
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, r3]
	tst	r3, #4
	mvneq	r7, #15
	beq	.L9276
	movw	r2, #:lower16:.LC804
	mov	r1, r4
	add	r0, r0, #600
	movt	r2, #:upper16:.LC804
	bl	__dynamic_dev_dbg
	mvn	r7, #15
	b	.L9276
.L9308:
	movw	r2, #:lower16:.LC805
	add	r0, r3, #624
	movt	r2, #:upper16:.LC805
	mov	r1, r4
	bl	__dynamic_dev_dbg
	ldr	r0, [r4, #-48]
	b	.L9304
.L9306:
	movw	r2, #:lower16:.LC805
	add	r0, r3, #624
	movt	r2, #:upper16:.LC805
	mov	r1, r4
	bl	__dynamic_dev_dbg
	ldr	r0, [r4, #-48]
	bl	fput
	mov	r3, #14848
	mov	r2, #0
	movt	r3, 2
	str	r2, [r4, #-48]
	str	r3, [r4, #-12]
	b	.L9291
	.fnend
	.size	fsg_store_file, .-fsg_store_file
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_unbind, %function
ncm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #666
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR4
	str	lr, [sp, #4]
	mov	r4, r1
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L9315
.L9310:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #168]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #164]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR0
	mov	r0, r4
	str	r2, [r3, #1588]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
.L9315:
	ldr	r1, [r0, #24]
	movw	r2, #:lower16:.LC806
	add	r0, r3, #648
	movt	r2, #:upper16:.LC806
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L9310
	.fnend
	.size	ncm_unbind, .-ncm_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_unbind, %function
ecm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #690
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR4
	str	lr, [sp, #4]
	mov	r4, r1
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L9322
.L9317:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #168]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #164]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	movw	r3, #:lower16:.LANCHOR0
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR0
	mov	r0, r4
	str	r2, [r3, #1628]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
.L9322:
	ldr	r1, [r0, #24]
	movw	r2, #:lower16:.LC749
	add	r0, r3, #672
	movt	r2, #:upper16:.LC749
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L9317
	.fnend
	.size	ecm_unbind, .-ecm_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_open, %function
rndis_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r4, #:lower16:.LANCHOR4
	movw	r3, #714
	strd	r6, [sp, #8]
	movt	r4, #:upper16:.LANCHOR4
	mov	r5, r0
	str	lr, [sp, #16]
	ldr	r2, [r0, #20]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [r4, r3]
	ldr	r6, [r2, #24]
	tst	r3, #4
	ldr	r1, [r6]
	bne	.L9342
.L9324:
	ldr	r3, [r1, #20]
	ldr	r0, [r5, #164]
	cmp	r3, #4
	uxtb	r6, r0
	bls	.L9325
	ldr	r3, [r1, #16]
	cmp	r3, #5
	beq	.L9343
.L9327:
	cmp	r3, #3
	movne	r7, #97280
	moveq	r7, #4259840
.L9326:
	ldrh	r3, [r4, #186]
	tst	r3, #4
	bne	.L9344
.L9328:
	movw	r3, #:lower16:.LANCHOR1
	cmp	r6, #0
	movt	r3, #:upper16:.LANCHOR1
	rsb	ip, r0, r0, lsl #4
	mov	r1, #11
	streq	r6, [r3, #3880]
	mov	r2, #0
	movt	r1, 16385
	streq	r7, [r3, #3884]
	add	r3, r3, ip, lsl #2
	str	r2, [r3, #3888]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	rndis_indicate_status_msg
.L9325:
	cmp	r3, #2
	movls	r7, #97280
	bls	.L9326
	ldr	r3, [r1, #16]
	b	.L9327
.L9343:
	ldrh	r3, [r4, #186]
	mov	r7, #8519680
	tst	r3, #4
	beq	.L9328
.L9344:
	movw	r1, #:lower16:.LC779
	mov	r3, #0
	ldr	r2, .L9345
	movt	r1, #:upper16:.LC779
	ldr	r0, .L9345+4
	str	r7, [sp]
	bl	__dynamic_pr_debug
	ldr	r0, [r5, #164]
	b	.L9328
.L9342:
	movw	r2, #:lower16:.LC21
	add	r1, r1, #32
	ldr	r3, .L9345+8
	movt	r2, #:upper16:.LC21
	add	r0, r4, #696
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L9324
.L9346:
	.align	2
.L9345:
	.word	.LANCHOR5-1560
	.word	.LANCHOR4+168
	.word	.LANCHOR5-1508
	.fnend
	.size	rndis_open, .-rndis_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_open, %function
rndis_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r4, #:lower16:.LANCHOR4
	movw	r3, #738
	strd	r6, [sp, #8]
	movt	r4, #:upper16:.LANCHOR4
	mov	r5, r0
	str	lr, [sp, #16]
	ldr	r2, [r0, #20]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [r4, r3]
	ldr	r6, [r2, #24]
	tst	r3, #4
	ldr	r1, [r6]
	bne	.L9366
.L9348:
	ldr	r3, [r1, #20]
	ldr	r0, [r5, #144]
	cmp	r3, #4
	uxtb	r6, r0
	bls	.L9349
	ldr	r3, [r1, #16]
	cmp	r3, #5
	beq	.L9367
.L9351:
	cmp	r3, #3
	movne	r7, #97280
	moveq	r7, #4259840
.L9350:
	ldrh	r3, [r4, #186]
	tst	r3, #4
	bne	.L9368
.L9352:
	movw	r3, #:lower16:.LANCHOR1
	cmp	r6, #0
	movt	r3, #:upper16:.LANCHOR1
	rsb	ip, r0, r0, lsl #4
	mov	r1, #11
	streq	r6, [r3, #3880]
	mov	r2, #0
	movt	r1, 16385
	streq	r7, [r3, #3884]
	add	r3, r3, ip, lsl #2
	str	r2, [r3, #3888]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	rndis_indicate_status_msg
.L9349:
	cmp	r3, #2
	movls	r7, #97280
	bls	.L9350
	ldr	r3, [r1, #16]
	b	.L9351
.L9367:
	ldrh	r3, [r4, #186]
	mov	r7, #8519680
	tst	r3, #4
	beq	.L9352
.L9368:
	movw	r1, #:lower16:.LC779
	mov	r3, #0
	ldr	r2, .L9369
	movt	r1, #:upper16:.LC779
	ldr	r0, .L9369+4
	str	r7, [sp]
	bl	__dynamic_pr_debug
	ldr	r0, [r5, #144]
	b	.L9352
.L9366:
	movw	r2, #:lower16:.LC21
	add	r1, r1, #32
	ldr	r3, .L9369+8
	movt	r2, #:upper16:.LC21
	add	r0, r4, #720
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	b	.L9348
.L9370:
	.align	2
.L9369:
	.word	.LANCHOR5-1560
	.word	.LANCHOR4+168
	.word	.LANCHOR5-1496
	.fnend
	.size	rndis_qc_open, .-rndis_qc_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_close, %function
gs_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #272]
	.pad #32
	sub	sp, sp, #32
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #12]
	cmp	r3, #1
	beq	.L9372
	cmp	r3, #0
	subne	r3, r3, #1
	strne	r3, [r4, #12]
	beq	.L9408
.L9374:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	add	sp, sp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L9372:
	movw	r6, #:lower16:.LANCHOR4
	movw	r3, #762
	movt	r6, #:upper16:.LANCHOR4
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L9409
.L9375:
	ldr	r0, [r4, #4]
	mov	r2, #0
	mov	r3, #1
	str	r2, [r4, #12]
	strb	r3, [r4, #16]
	cmp	r0, r2
	beq	.L9388
	ldr	r3, [r0, #120]
	cmp	r3, #0
	beq	.L9378
	blx	r3
.L9378:
	ldr	r1, [r4, #92]
	ldr	r2, [r4, #100]
	ldr	r0, [r4, #104]
	add	r3, r0, r1
	sub	r3, r3, r2
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	bne	.L9410
.L9391:
	str	r0, [r4, #100]
.L9377:
	mov	r3, #0
	movw	r2, #786
	str	r3, [r5, #272]
	str	r3, [r4, #8]
	strb	r3, [r4, #16]
	ldrh	r3, [r6, r2]
	tst	r3, #4
	bne	.L9411
.L9389:
	mov	r2, #1
	mov	r3, #0
	mov	r1, r2
	add	r0, r4, #20
	bl	__wake_up
	b	.L9374
.L9408:
	movw	r0, #:lower16:.LC721
	movw	r1, #905
	movt	r0, #:upper16:.LC721
	bl	warn_slowpath_null
	b	.L9374
.L9388:
	ldr	r0, [r4, #96]
	bl	kfree
	mov	r3, #0
	str	r3, [r4, #96]
	b	.L9377
.L9410:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L9407
	ldr	r1, [r4, #92]
	ldrd	r2, [r4, #100]
	add	r3, r3, r1
	sub	r3, r3, r2
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	bne	.L9381
.L9407:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
.L9380:
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L9388
	ldr	r0, [r4, #104]
	b	.L9391
.L9381:
	mov	r0, r4
	add	r10, r4, #108
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	movw	r2, #:lower16:autoremove_wake_function
	bic	r8, r3, #8128
	add	r1, sp, #24
	bic	r8, r8, #63
	mov	r3, #0
	ldr	r0, [r8, #12]
	movt	r2, #:upper16:autoremove_wake_function
	movw	r9, #4500
	str	r3, [sp, #12]
	str	r0, [sp, #16]
	str	r2, [sp, #20]
	str	r1, [sp, #24]
	str	r1, [sp, #28]
.L9387:
	mov	r2, #1
	add	r1, sp, #12
	mov	r0, r10
	bl	prepare_to_wait
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L9382
	ldr	r1, [r4, #92]
	mov	r0, r4
	ldrd	r2, [r4, #100]
	add	r3, r3, r1
	sub	r3, r3, r2
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	beq	.L9406
	bl	_raw_spin_unlock_irq
	ldr	r3, [r8, #12]
	mov	r0, r9
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L9384
	bl	schedule_timeout
	subs	r9, r0, #0
	bne	.L9387
	mov	r0, r4
	bl	_raw_spin_lock_irq
	mov	r0, r4
	bl	_raw_spin_unlock_irq
.L9384:
	add	r1, sp, #12
	mov	r0, r10
	bl	finish_wait
	b	.L9380
.L9382:
	mov	r0, r4
.L9406:
	bl	_raw_spin_unlock_irq
	b	.L9384
.L9409:
	movw	r1, #:lower16:.LC807
	ldrb	r2, [r4, #17]	@ zero_extendqisi2
	mov	r3, r5
	movt	r1, #:upper16:.LC807
	add	r0, r6, #744
	str	r7, [sp]
	bl	__dynamic_pr_debug
	b	.L9375
.L9411:
	movw	r1, #:lower16:.LC808
	ldrb	r2, [r4, #17]	@ zero_extendqisi2
	mov	r3, r5
	movt	r1, #:upper16:.LC808
	ldr	r0, .L9412
	str	r7, [sp]
	bl	__dynamic_pr_debug
	b	.L9389
.L9413:
	.align	2
.L9412:
	.word	.LANCHOR4+768
	.fnend
	.size	gs_close, .-gs_close
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_unbind, %function
acm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR1
	mov	r2, #1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	ip, #:upper16:.LANCHOR1
	mov	r4, r1
	str	r6, [sp, #8]
	add	r0, ip, #2192
	str	lr, [sp, #12]
	mov	lr, #0
	mov	r3, lr
	mov	r1, r2
	str	r2, [ip, #2200]
	add	r0, r0, #12
	str	lr, [ip, #3976]
	bl	__wake_up
	movw	r0, #:lower16:.LC809
	movt	r0, #:upper16:.LC809
	bl	printk
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r5, [r4, #152]
	ldr	r6, [r4, #156]
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r6
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, [r4]
	bl	kfree
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree
	.fnend
	.size	acm_unbind, .-acm_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_unbind, %function
f_midi_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #810
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r0, #:upper16:.LANCHOR4
	str	lr, [sp, #4]
	mov	r4, r1
	ldrh	r2, [r0, r3]
	ldr	r3, [r1, #20]
	tst	r2, #4
	ldr	r2, [r3, #24]
	bne	.L9430
.L9417:
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r3, [r0, #186]
	tst	r3, #4
	bne	.L9431
.L9418:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	mov	r3, #0
	str	r3, [r4, #96]
	cmp	r0, r3
	beq	.L9419
	bl	snd_card_free
.L9419:
	ldr	r0, [r4, #332]
	bl	kfree
	mov	r3, #0
	ldr	r0, [r4, #16]
	str	r3, [r4, #332]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
.L9430:
	ldr	r1, [r2]
	movw	r2, #:lower16:.LC810
	add	r0, r0, #792
	movt	r2, #:upper16:.LC810
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #20]
	ldr	r2, [r3, #24]
	b	.L9417
.L9431:
	ldr	r1, [r2]
	movw	r2, #:lower16:.LC12
	add	r0, r0, #168
	movt	r2, #:upper16:.LC12
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L9418
	.fnend
	.size	f_midi_unbind, .-f_midi_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_disable, %function
ffs_func_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #-28]
	.pad #4
	sub	sp, sp, #4
	ldr	fp, [r4, #132]
	cmp	fp, #0
	beq	.L9433
	ldr	r3, [fp, #8]
	mov	r9, #1
	mov	r8, #0
	ldr	r5, [fp, #12]
	add	r0, r3, #24
	ldrh	r7, [r3, #180]
	ldr	r6, [r3, #208]
	add	r5, r5, #28
	bl	_raw_spin_lock_irqsave
	mov	r10, r0
	b	.L9434
.L9449:
	ldr	r3, [r3, #8]
	add	r5, r5, #28
	add	r6, r6, #56
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #-56]
	subs	r7, r7, #1
	str	r8, [r3]
	str	r8, [r6, #-16]
	beq	.L9437
.L9434:
	str	r9, [r6, #32]
	ldr	r3, [r5, #-28]
	subs	r0, r3, #0
	bne	.L9449
	subs	r7, r7, #1
	add	r5, r5, #28
	str	r3, [r6, #40]
	add	r6, r6, #56
	bne	.L9434
.L9437:
	ldr	r0, [fp, #8]
	mov	r1, r10
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	mov	r3, #0
	str	r3, [r4, #132]
.L9433:
	ldr	r7, [r4, #92]
	cmp	r7, #2
	bne	.L9432
	mov	r3, #0
	add	r5, r4, #116
	mov	r0, r5
	str	r3, [r4, #132]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	mov	r6, r0
	add	lr, r4, #100
	ldrh	r2, [r4, #104]
	cmp	r3, #1
	streq	r7, [r4, #96]
	cmp	r2, #0
	beq	.L9443
	add	r1, r4, #99
	mov	r3, lr
	add	r2, r1, r2
.L9442:
	ldrb	ip, [r1, #1]!	@ zero_extendqisi2
	mov	r0, r3
	sub	r7, ip, #5
	cmp	r7, #1
	strbls	ip, [r0], #1
	movls	r3, r0
	cmp	r2, r1
	bne	.L9442
	sub	r3, r3, lr
	add	r2, r3, #1
	uxth	r3, r3
	uxth	r2, r2
.L9440:
	add	r3, r4, r3
	strh	r2, [r4, #104]	@ movhi
	mov	r0, #3
	mov	r2, #1
	mov	r1, r0
	strb	r0, [r3, #100]
	mov	r0, r5
	bl	__wake_up_locked
	mov	r1, r6
	mov	r0, r5
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L9443:
	mov	r3, r2
	mov	r2, #1
	b	.L9440
.L9432:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
	.fnend
	.size	ffs_func_disable, .-ffs_func_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gaudio_open_streams, %function
gaudio_open_streams:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	movw	r10, #:lower16:.LANCHOR1
	movt	r10, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	ldr	r4, [r10, #3980]
	.pad #28
	sub	sp, sp, #28
	cmp	r4, #0
	beq	.L9509
	movw	r7, #:lower16:.LANCHOR4
	movw	r3, #834
	ldr	r9, .L9519
	movt	r7, #:upper16:.LANCHOR4
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L9507
.L9453:
	movw	r6, #:lower16:kmalloc_caches
	mov	r3, #3
	ldr	fp, [r4, #124]
	movt	r6, #:upper16:kmalloc_caches
	mov	r2, #8000
	ldr	r0, [r6, #40]
	str	r3, [r4, #128]
	mov	r3, #2
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	cmp	r0, #0
	str	r2, [r4, #140]
	beq	.L9480
	mov	r2, #604
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L9510
.L9454:
	mov	r0, r5
	bl	_snd_pcm_hw_params_any
	mov	r0, r5
	ldr	r1, [r4, #128]
	bl	_snd_pcm_hw_param_set.constprop.102
	mov	r0, r5
	ldr	r1, [r4, #132]
	bl	_snd_pcm_hw_param_set.constprop.103
	mov	r0, r5
	ldr	r1, [r4, #136]
	bl	_snd_pcm_hw_param_set.constprop.104
	mov	r0, r5
	ldr	r1, [r4, #140]
	bl	_snd_pcm_hw_param_set.constprop.105
	mov	r2, #0
	movw	r1, #16707
	mov	r0, fp
	bl	snd_pcm_kernel_ioctl
	subs	r2, r0, #0
	bge	.L9456
	movw	r0, #:lower16:.LC813
	ldr	r1, .L9519+4
	movt	r0, #:upper16:.LC813
	bl	printk
.L9456:
	movw	r1, #16657
	mov	r2, r5
	movt	r1, 49756
	mov	r0, fp
	bl	snd_pcm_kernel_ioctl
	subs	r8, r0, #0
	blt	.L9511
	mov	r2, #0
	mov	r0, fp
	movw	r1, #16704
	bl	snd_pcm_kernel_ioctl
	subs	r2, r0, #0
	bge	.L9458
	movw	r0, #:lower16:.LC815
	ldr	r1, .L9519+4
	movt	r0, #:upper16:.LC815
	bl	printk
.L9458:
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L9482
	ldr	r3, [r5, #8]
	cmp	r3, #0
	bne	.L9483
.L9459:
	str	r3, [r4, #128]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L9484
	ldr	r3, [r5, #40]
	cmp	r3, #0
	movne	r2, #32
	bne	.L9461
.L9462:
	str	r3, [r4, #132]
	ldr	r3, [r5, #284]
	mov	r0, r5
	str	r3, [r4, #136]
	ldr	r3, [r5, #296]
	str	r3, [r4, #140]
	bl	kfree
	movw	r3, #858
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L9512
.L9463:
	movw	r3, #882
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L9513
.L9464:
	ldr	r5, [r10, #3980]
	mov	ip, #3
	mov	r1, #2
	ldr	r0, [r6, #40]
	mov	r2, #1
	mov	r3, #8000
	ldr	r10, [r5, #152]
	cmp	r0, #0
	ldr	fp, [r10, #208]
	str	ip, [r5, #156]
	str	r1, [r5, #160]
	strd	r2, [r5, #164]
	beq	.L9486
	mov	r2, #604
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L9514
.L9465:
	mov	r0, r4
	bl	_snd_pcm_hw_params_any
	mov	r0, r4
	ldr	r1, [r5, #156]
	bl	_snd_pcm_hw_param_set.constprop.102
	mov	r0, r4
	ldr	r1, [r5, #160]
	bl	_snd_pcm_hw_param_set.constprop.103
	mov	r0, r4
	ldr	r1, [r5, #164]
	bl	_snd_pcm_hw_param_set.constprop.104
	mov	r0, r4
	ldr	r1, [r5, #168]
	bl	_snd_pcm_hw_param_set.constprop.105
	mov	r2, #0
	movw	r1, #16707
	mov	r0, r10
	bl	snd_pcm_kernel_ioctl
	subs	r2, r0, #0
	bge	.L9467
	movw	r0, #:lower16:.LC813
	ldr	r1, .L9519+8
	movt	r0, #:upper16:.LC813
	bl	printk
.L9467:
	movw	r1, #16657
	mov	r2, r4
	movt	r1, 49756
	mov	r0, r10
	bl	snd_pcm_kernel_ioctl
	subs	r8, r0, #0
	blt	.L9515
	mov	r2, #0
	movw	r1, #16704
	mov	r0, r10
	bl	snd_pcm_kernel_ioctl
	subs	r2, r0, #0
	bge	.L9469
	movw	r0, #:lower16:.LC820
	ldr	r1, .L9519+8
	movt	r0, #:upper16:.LC820
	bl	printk
.L9469:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L9487
	ldr	r3, [r4, #8]
	cmp	r3, #0
	bne	.L9488
.L9470:
	str	r3, [r5, #156]
	ldr	r3, [r4, #36]
	cmp	r3, #0
	bne	.L9489
	ldr	r3, [r4, #40]
	cmp	r3, #0
	movne	r2, #32
	bne	.L9472
.L9473:
	str	r3, [r5, #160]
	ldr	r3, [r4, #284]
	str	r3, [r5, #164]
	ldr	r3, [r4, #296]
	str	r3, [r5, #168]
	ldr	r0, [fp, #44]
	bl	snd_pcm_format_physical_width
	str	r0, [fp, #80]
	mov	r0, r4
	bl	kfree
	ldr	r0, [r6, #28]
	cmp	r0, #0
	beq	.L9491
	mov	r2, #104
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L9516
.L9474:
	movw	r3, #906
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L9517
.L9475:
	ldr	r3, [r4, #332]
	mov	r2, #1
	mov	ip, #0
	mvn	lr, #-2147483648
	movw	r1, #16659
	mov	r0, r10
	movt	r1, 49256
	str	ip, [r6]
	str	r2, [r6, #4]
	lsr	r3, r3, r2
	str	r3, [r6, #12]
	str	r3, [r6, #16]
	str	r2, [r6, #20]
	mov	r2, r6
	str	lr, [r6, #24]
	str	ip, [r6, #28]
	str	ip, [r6, #32]
	bl	snd_pcm_kernel_ioctl
	subs	r8, r0, #0
	blt	.L9518
	mov	r0, r6
	bl	kfree
	movw	r3, #930
	ldrh	r3, [r7, r3]
	tst	r3, #4
	ldrne	r4, .L9519+12
	beq	.L9477
.L9478:
	ldr	r3, [r5, #156]
	movw	r1, #:lower16:.LC824
	sub	r2, r4, #12
	ldr	ip, [r5, #168]
	movt	r1, #:upper16:.LC824
	ldr	r0, .L9519+16
	str	ip, [sp, #8]
	ldr	ip, [r5, #164]
	str	ip, [sp, #4]
	ldr	ip, [r5, #160]
	str	ip, [sp]
	bl	__dynamic_pr_debug
.L9477:
	cmp	r8, #0
	beq	.L9479
.L9466:
	movw	r0, #:lower16:.LC825
	sub	r1, r9, #8
	mov	r2, r8
	movt	r0, #:upper16:.LC825
	bl	printk
	b	.L9450
.L9480:
	mov	r5, #16
	b	.L9454
.L9486:
	mov	r4, #16
	b	.L9465
.L9491:
	mov	r6, #16
	b	.L9474
.L9507:
	movw	r1, #:lower16:.LC812
	add	r0, r7, #816
	movt	r1, #:upper16:.LC812
	sub	r2, r9, #8
	bl	__dynamic_pr_debug
	ldr	r4, [r10, #3980]
	b	.L9453
.L9513:
	movw	r1, #:lower16:.LC818
	sub	r2, r9, #8
	ldr	r0, .L9519+20
	movt	r1, #:upper16:.LC818
	bl	__dynamic_pr_debug
	b	.L9464
.L9512:
	ldr	r3, [r4, #128]
	movw	r1, #:lower16:.LC816
	ldr	r0, [r4, #140]
	movt	r1, #:upper16:.LC816
	ldr	r2, .L9519+4
	str	r0, [sp, #8]
	ldr	ip, [r4, #136]
	ldr	r0, .L9519+24
	str	ip, [sp, #4]
	ldr	ip, [r4, #132]
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L9463
.L9517:
	ldrb	ip, [r4, #388]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC822
	ldr	r3, [r4, #380]
	movt	r1, #:upper16:.LC822
	ldr	r2, .L9519+28
	ldr	r0, .L9519+32
	ubfx	ip, ip, #3, #1
	str	ip, [sp, #16]
	ldrb	ip, [r4, #388]	@ zero_extendqisi2
	ubfx	ip, ip, #2, #1
	str	ip, [sp, #12]
	ldrb	ip, [r4, #388]	@ zero_extendqisi2
	ubfx	ip, ip, #1, #1
	str	ip, [sp, #8]
	ldrb	ip, [r4, #388]	@ zero_extendqisi2
	and	ip, ip, #1
	str	ip, [sp, #4]
	ldr	ip, [r4, #384]
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L9475
.L9489:
	mov	r2, #0
.L9472:
	add	r1, r2, #31
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	sub	r3, r1, r3
	b	.L9473
.L9484:
	mov	r2, #0
.L9461:
	add	r1, r2, #31
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	sub	r3, r1, r3
	b	.L9462
.L9482:
	mov	r2, #0
.L9460:
	add	r1, r2, #31
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	sub	r3, r1, r3
	b	.L9459
.L9487:
	mov	r2, #0
.L9471:
	add	r1, r2, #31
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	sub	r3, r1, r3
	b	.L9470
.L9483:
	mov	r2, #32
	b	.L9460
.L9488:
	mov	r2, #32
	b	.L9471
.L9510:
	mvn	r8, #11
.L9455:
	movw	r0, #:lower16:.LC817
	sub	r1, r9, #8
	movt	r0, #:upper16:.LC817
	mov	r2, r8
	bl	printk
.L9450:
	mov	r0, r8
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9479:
	movw	r0, #:lower16:.LC826
	sub	r1, r9, #8
	movt	r0, #:upper16:.LC826
	bl	printk
	b	.L9450
.L9518:
	ldr	r4, .L9519+12
	movw	r0, #:lower16:.LC823
	mov	r2, r8
	movt	r0, #:upper16:.LC823
	sub	r1, r4, #12
	bl	printk
	mov	r0, r6
	bl	kfree
	movw	r3, #930
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L9478
	b	.L9466
.L9511:
	movw	r0, #:lower16:.LC814
	mov	r2, r8
	ldr	r1, .L9519+4
	movt	r0, #:upper16:.LC814
	bl	printk
	mov	r0, r5
	bl	kfree
	b	.L9455
.L9509:
	ldr	r2, .L9519+36
	movw	r0, #:lower16:.LC811
	mvn	r8, #18
	movt	r0, #:upper16:.LC811
	mov	r1, r2
	bl	printk
	b	.L9450
.L9516:
	movw	r0, #:lower16:.LC821
	ldr	r1, .L9519+8
	mvn	r8, #11
	movt	r0, #:upper16:.LC821
	bl	printk
	b	.L9466
.L9515:
	movw	r0, #:lower16:.LC814
	mov	r2, r8
	ldr	r1, .L9519+8
	movt	r0, #:upper16:.LC814
	bl	printk
	mov	r0, r4
	bl	kfree
	b	.L9466
.L9514:
	movw	r0, #:lower16:.LC819
	ldr	r1, .L9519+8
	mvn	r8, #11
	movt	r0, #:upper16:.LC819
	bl	printk
	b	.L9466
.L9520:
	.align	2
.L9519:
	.word	.LANCHOR5-1472
	.word	.LANCHOR5-1460
	.word	.LANCHOR5-1436
	.word	.LANCHOR5-1424
	.word	.LANCHOR4+912
	.word	.LANCHOR4+864
	.word	.LANCHOR4+840
	.word	.LANCHOR5-1412
	.word	.LANCHOR4+888
	.word	.LANCHOR5-1480
	.fnend
	.size	gaudio_open_streams, .-gaudio_open_streams
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_capture_work, %function
f_audio_capture_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r4, #:lower16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	ldr	r0, [r4, #1260]
	bl	f_audio_buffer_alloc
	subs	fp, r0, #0
	beq	.L9536
	ldr	r3, [fp]
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r8, [r7, #-68]
	ldr	r2, [r4, #1260]
	str	r3, [sp, #8]
	ldrb	r3, [r5, #2216]	@ zero_extendqisi2
	ldr	r10, [r8, #208]
	str	r2, [sp, #12]
	cmp	r3, #0
	beq	.L9537
.L9523:
	mov	r3, sp
	movw	r9, #:lower16:.LANCHOR4
	bic	r6, r3, #8128
	ldr	r3, [sp, #12]
	movt	r9, #:upper16:.LANCHOR4
	bic	r6, r6, #63
	lsl	r3, r3, #3
	str	r3, [sp, #16]
.L9530:
	ldr	r3, [r10, #160]
	mov	r2, #146
	movw	r1, #16704
	mov	r0, r8
	ldr	r3, [r3]
	cmp	r3, #7
	mvn	r2, r2, lsr r3
	bls	.L9538
.L9526:
	ldr	r3, .L9541
	mov	r0, r8
	ldr	r5, [r10, #80]
	ldr	r1, [sp, #8]
	ldrh	r2, [r3]
	mov	r3, #0
	tst	r2, #4
	ldr	r2, [r6, #8]
	str	r3, [r6, #8]
	ldr	r3, [sp, #16]
	str	r2, [sp, #20]
	udiv	r5, r3, r5
	bne	.L9539
	mov	r2, r5
	bl	snd_pcm_lib_read
	cmp	r5, r0
	mov	r2, r0
	bne	.L9528
.L9529:
	mov	r3, sp
	ldr	r2, [sp, #20]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	str	r2, [r3, #8]
.L9525:
	movw	r3, #978
	ldrh	r3, [r9, r3]
	tst	r3, #4
	bne	.L9540
.L9531:
	sub	r4, r7, #8
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	add	r2, r7, #16
	ldr	r1, [r7, #20]
	add	r0, fp, #8
	bl	__list_add
	mov	r1, r5
	mov	r0, r4
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L9538:
	ands	r2, r2, #1
	bne	.L9526
	bl	snd_pcm_kernel_ioctl
	cmp	r0, #0
	bge	.L9526
	ldr	r5, .L9541+4
	mov	r2, r0
	movw	r0, #:lower16:.LC820
	movt	r0, #:upper16:.LC820
	sub	r1, r5, #12
	bl	printk
	movw	r0, #:lower16:.LC829
	sub	r1, r5, #36
	movt	r0, #:upper16:.LC829
	bl	printk
	b	.L9525
.L9537:
	bl	gaudio_open_streams
	subs	r2, r0, #0
	moveq	r3, #1
	strbeq	r3, [r5, #2216]
	beq	.L9523
	movw	r0, #:lower16:.LC828
	ldr	r1, .L9541+8
	movw	r9, #:lower16:.LANCHOR4
	movt	r0, #:upper16:.LC828
	movt	r9, #:upper16:.LANCHOR4
	bl	printk
	b	.L9525
.L9539:
	ldr	r3, [sp, #12]
	movw	r1, #:lower16:.LC830
	ldr	r2, .L9541+8
	movt	r1, #:upper16:.LC830
	ldr	r0, .L9541+12
	str	r3, [sp]
	mov	r3, r5
	bl	__dynamic_pr_debug
	mov	r2, r5
	mov	r0, r8
	ldr	r1, [sp, #8]
	bl	snd_pcm_lib_read
	cmp	r5, r0
	mov	r2, r0
	beq	.L9529
.L9528:
	ldr	r3, .L9541+4
	movw	r0, #:lower16:.LC831
	movt	r0, #:upper16:.LC831
	sub	r1, r3, #12
	bl	printk
	ldr	r3, [sp, #20]
	str	r3, [r6, #8]
	b	.L9530
.L9540:
	movw	r1, #:lower16:.LC832
	ldr	r2, .L9541+16
	movt	r1, #:upper16:.LC832
	ldr	r0, .L9541+20
	ldr	r3, [r4, #1260]
	bl	__dynamic_pr_debug
	b	.L9531
.L9536:
	ldr	r2, .L9541+16
	movw	r0, #:lower16:.LC827
	movt	r0, #:upper16:.LC827
	mov	r1, r2
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L9542:
	.align	2
.L9541:
	.word	.LANCHOR4+954
	.word	.LANCHOR5-1360
	.word	.LANCHOR5-1372
	.word	.LANCHOR4+936
	.word	.LANCHOR5-1396
	.word	.LANCHOR4+960
	.fnend
	.size	f_audio_capture_work, .-f_audio_capture_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_playback_work, %function
f_audio_playback_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	sub	r7, r0, #8
	mov	r6, r0
	mov	r0, r7
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	bl	_raw_spin_lock_irqsave
	mov	r3, r6
	mov	r8, r0
	ldr	r4, [r3, #16]!
	cmp	r4, r3
	beq	.L9564
	mov	r0, r4
	movw	r5, #:lower16:.LANCHOR4
	bl	list_del
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	movt	r5, #:upper16:.LANCHOR4
	movw	r3, #1002
	ldrh	r3, [r5, r3]
	sub	r2, r4, #8
	str	r2, [sp, #16]
	tst	r3, #4
	bne	.L9565
.L9545:
	ldmdb	r4, {r3, r8}
	ldr	r10, [r6, #-64]
	cmp	r8, #0
	str	r3, [sp, #8]
	ldr	fp, [r10, #208]
	beq	.L9566
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	ldrb	r3, [r7, #2216]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L9567
.L9548:
	mov	r3, sp
	bic	r7, r3, #8128
	lsl	r3, r8, #3
	bic	r7, r7, #63
	str	r3, [sp, #12]
.L9555:
	ldr	r3, [fp, #160]
	mov	r2, #146
	movw	r1, #16704
	mov	r0, r10
	ldr	r3, [r3]
	cmp	r3, #7
	mvn	r2, r2, lsr r3
	bls	.L9568
.L9550:
	ldr	r3, [fp, #80]
	ldr	r1, [sp, #8]
	cmp	r3, #0
	beq	.L9569
	ldr	r2, .L9572
	ldrh	ip, [r2]
	ldr	r2, [sp, #12]
	ubfx	ip, ip, #2, #1
	cmp	ip, #0
	udiv	r9, r2, r3
	bne	.L9570
	ldr	r3, [r7, #8]
	mov	r2, r9
	ldr	r0, [r6, #-64]
	str	ip, [r7, #8]
	str	r3, [sp, #20]
	bl	snd_pcm_lib_write
	cmp	r9, r0
	mov	r2, r0
	bne	.L9553
.L9554:
	mov	r3, r2
	movw	r2, #1050
	ldr	r0, [sp, #20]
	ldrh	r2, [r5, r2]
	mov	r1, sp
	bic	r1, r1, #8128
	bic	r1, r1, #63
	tst	r2, #4
	str	r0, [r1, #8]
	bne	.L9571
.L9547:
	ldr	r5, [sp, #16]
	cmp	r5, #0
	beq	.L9543
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r3, #0
	mov	r0, r5
	str	r3, [r4, #-8]
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	kfree
.L9568:
	ands	r2, r2, #1
	bne	.L9550
	bl	snd_pcm_kernel_ioctl
	cmp	r0, #0
	bge	.L9550
	ldr	r5, .L9572+4
	mov	r2, r0
	movw	r0, #:lower16:.LC815
	movt	r0, #:upper16:.LC815
	sub	r1, r5, #4
	bl	printk
	movw	r0, #:lower16:.LC829
	sub	r1, r5, #28
	movt	r0, #:upper16:.LC829
	bl	printk
	b	.L9547
.L9543:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9567:
	bl	gaudio_open_streams
	cmp	r0, #0
	moveq	r3, #1
	strbeq	r3, [r7, #2216]
	beq	.L9548
	movw	r0, #:lower16:.LC836
	ldr	r1, .L9572+8
	movt	r0, #:upper16:.LC836
	bl	printk
	b	.L9547
.L9565:
	movw	r1, #:lower16:.LC834
	ldr	r2, .L9572+12
	add	r0, r5, #984
	movt	r1, #:upper16:.LC834
	ldr	r3, [r4, #-4]
	bl	__dynamic_pr_debug
	b	.L9545
.L9570:
	movw	r1, #:lower16:.LC838
	ldr	r2, .L9572+8
	strd	r8, [sp]
	movt	r1, #:upper16:.LC838
	ldr	r0, .L9572+16
	bl	__dynamic_pr_debug
	ldr	ip, [r7, #8]
	mov	r3, #0
	mov	r2, r9
	ldr	r0, [r6, #-64]
	str	r3, [r7, #8]
	ldr	r1, [sp, #8]
	str	ip, [sp, #20]
	bl	snd_pcm_lib_write
	cmp	r9, r0
	mov	r2, r0
	beq	.L9554
.L9553:
	ldr	r3, .L9572+4
	movw	r0, #:lower16:.LC839
	movt	r0, #:upper16:.LC839
	sub	r1, r3, #4
	bl	printk
	ldr	r3, [sp, #20]
	str	r3, [r7, #8]
	b	.L9555
.L9571:
	movw	r1, #:lower16:.LC840
	ldr	r2, .L9572+8
	movt	r1, #:upper16:.LC840
	ldr	r0, .L9572+20
	bl	__dynamic_pr_debug
	b	.L9547
.L9569:
	movw	r0, #:lower16:.LC837
	ldr	r1, .L9572+8
	movt	r0, #:upper16:.LC837
	bl	printk
	b	.L9547
.L9564:
	movw	r0, #:lower16:.LC833
	ldr	r1, .L9572+12
	movt	r0, #:upper16:.LC833
	bl	printk
	mov	r1, r8
	mov	r0, r7
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L9566:
	movw	r0, #:lower16:.LC835
	ldr	r1, .L9572+8
	movt	r0, #:upper16:.LC835
	bl	printk
	b	.L9547
.L9573:
	.align	2
.L9572:
	.word	.LANCHOR4+1026
	.word	.LANCHOR5-1328
	.word	.LANCHOR5-1332
	.word	.LANCHOR5-1356
	.word	.LANCHOR4+1008
	.word	.LANCHOR4+1032
	.fnend
	.size	f_audio_playback_work, .-f_audio_playback_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_complete, %function
f_midi_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r0]
	.pad #16
	sub	sp, sp, #16
	ldr	r3, [r1, #44]
	ldr	r2, [r0, #20]
	cmn	r3, #103
	ldr	r7, [r2, #24]
	bgt	.L9575
	cmn	r3, #104
	bge	.L9576
	cmn	r3, #121
	bne	.L9618
.L9577:
	ldr	r3, [r4, #8]
	mov	r2, #32
	mov	r1, r5
	mov	r0, r4
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L9619
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L9575:
	cmp	r3, #0
	bne	.L9578
	ldr	r3, [r0, #92]
	cmp	r3, r4
	beq	.L9620
	ldr	r3, [r0, #88]
	cmp	r3, r4
	bne	.L9577
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	f_midi_transmit
.L9618:
	cmn	r3, #108
	beq	.L9576
.L9578:
	movw	r0, #:lower16:.LANCHOR4
	movw	r2, #1074
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r2, [r0, r2]
	tst	r2, #4
	beq	.L9577
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC841
	add	r0, r0, #1056
	ldr	lr, [r5, #4]
	str	r3, [sp]
	movt	r2, #:upper16:.LC841
	ldr	ip, [r5, #48]
	ldr	r3, [r4, #4]
	add	r1, r1, #32
	stmib	sp, {ip, lr}
	bl	__dynamic_dev_dbg
	b	.L9577
.L9619:
	ldr	ip, [r7]
	movw	r1, #:lower16:.LC842
	str	r0, [sp]
	movt	r1, #:upper16:.LC842
	ldr	r3, [r5, #4]
	ldr	r2, [r4, #4]
	add	r0, ip, #32
	bl	dev_err
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldr	r3, [r3, #24]
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	bx	r3
.L9576:
	ldr	r3, [r0, #92]
	ldr	r0, [r5]
	cmp	r4, r3
	beq	.L9621
.L9584:
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r3, [r3, #12]
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	bx	r3	@ indirect register sibling call
.L9620:
	ldr	r8, [r1]
	ldr	r2, [r1, #48]
	cmp	r2, #3
	bls	.L9577
	movw	r9, #:lower16:.LANCHOR5
	add	r6, r8, #1
	movt	r9, #:upper16:.LANCHOR5
	rsb	r8, r8, #2
	b	.L9582
.L9581:
	add	r6, r6, #4
	add	r3, r8, r6
	cmp	r3, r2
	bcs	.L9577
.L9582:
	ldrb	r3, [r6, #-1]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L9581
	ldr	ip, [r4]
	lsr	lr, r3, #4
	and	r3, r3, #15
	add	r3, r9, r3
	add	r0, lr, #42
	mov	r1, r6
	ldr	r10, [ip, r0, lsl #2]
	subs	r0, r10, #0
	beq	.L9581
	ldr	ip, [ip, #296]
	lsr	ip, ip, lr
	tst	ip, #1
	beq	.L9581
	ldrb	r2, [r3, #-1312]	@ zero_extendqisi2
	bl	snd_rawmidi_receive
	ldr	r2, [r5, #48]
	b	.L9581
.L9621:
	ldr	r2, [r5, #48]
	cmp	r2, #3
	bls	.L9584
	movw	r8, #:lower16:.LANCHOR5
	add	r6, r0, #1
	movt	r8, #:upper16:.LANCHOR5
	rsb	r7, r0, #2
	b	.L9586
.L9585:
	add	r6, r6, #4
	add	r3, r7, r6
	cmp	r3, r2
	bcs	.L9622
.L9586:
	ldrb	r3, [r6, #-1]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L9585
	ldr	ip, [r4]
	lsr	r9, r3, #4
	and	r3, r3, #15
	add	r3, r8, r3
	add	r0, r9, #42
	mov	r1, r6
	ldr	lr, [ip, r0, lsl #2]
	subs	r0, lr, #0
	beq	.L9585
	ldr	ip, [ip, #296]
	lsr	ip, ip, r9
	tst	ip, #1
	beq	.L9585
	ldrb	r2, [r3, #-1312]	@ zero_extendqisi2
	bl	snd_rawmidi_receive
	ldr	r2, [r5, #48]
	b	.L9585
.L9622:
	ldr	r0, [r5]
	b	.L9584
	.fnend
	.size	f_midi_complete, .-f_midi_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_unbind, %function
rndis_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #1098
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	movw	r6, #:lower16:__stack_chk_guard
	str	lr, [sp, #12]
	ldrh	r2, [r3, r2]
	movt	r6, #:upper16:__stack_chk_guard
	ldr	r3, [r6]
	.pad #24
	sub	sp, sp, #24
	mov	r4, r1
	ldr	r5, [r1, #164]
	tst	r2, #4
	str	r3, [sp, #20]
	bne	.L9637
.L9624:
	cmp	r5, #0
	movwgt	r3, #:lower16:.LANCHOR1
	movtgt	r3, #:upper16:.LANCHOR1
	bgt	.L9625
	rsb	r5, r5, r5, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r5, r3, r5, lsl #2
	mov	r2, #0
	strb	r2, [r5, #3873]
.L9625:
	ldrb	r2, [r3, #3932]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L9638
.L9626:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #172]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r4
	bl	kfree
	ldr	r2, [sp, #20]
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L9639
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9638:
	mov	r5, #0
	movw	r1, #:lower16:.LC640
	mov	r2, r5
	movt	r1, #:upper16:.LC640
	mov	r0, sp
	strb	r5, [r3, #3932]
	bl	sprintf
	mov	r0, sp
	mov	r1, r5
	bl	remove_proc_entry
	b	.L9626
.L9637:
	movw	r1, #:lower16:.LC289
	ldr	r2, .L9640
	movt	r1, #:upper16:.LC289
	ldr	r0, .L9640+4
	bl	__dynamic_pr_debug
	b	.L9624
.L9639:
	bl	__stack_chk_fail
.L9641:
	.align	2
.L9640:
	.word	.LANCHOR5-1296
	.word	.LANCHOR4+1080
	.fnend
	.size	rndis_unbind, .-rndis_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_write, %function
adb_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r3, #3596]
	.pad #52
	sub	sp, sp, #52
	ldr	r5, [r0, #124]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	cmp	r3, #0
	beq	.L9667
	movw	r8, #:lower16:.LANCHOR4
	movw	r3, #1122
	movt	r8, #:upper16:.LANCHOR4
	ldrh	r3, [r8, r3]
	tst	r3, #4
	bne	.L9689
.L9644:
	add	r3, r5, #112
	str	r3, [sp, #20]
	.syntax divided
@ 61 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r1, r3
	.syntax divided
@ 63 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r1]
	add	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L9690
	movw	r3, #:lower16:autoremove_wake_function
	mov	fp, #57344
	movt	r3, #:upper16:autoremove_wake_function
	movt	fp, 65535
	mov	r9, fp
	str	r3, [sp, #16]
	ldr	r3, [sp, #12]
	str	r3, [sp, #4]
.L9645:
	cmp	r3, #0
	beq	.L9663
	ldr	r3, [r5, #104]
	cmp	r3, #0
	bne	.L9664
	mov	r3, sp
	add	r7, r5, #120
	add	r6, r5, #88
	and	r10, r3, r9
.L9646:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #120]
	mov	fp, r0
	cmp	r4, r7
	beq	.L9691
	mov	r0, r4
	sub	r4, r4, #36
	bl	list_del
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, #0
	beq	.L9649
.L9650:
	ldr	r2, [sp, #4]
	mov	r3, sp
	and	r3, r3, r9
	ldr	r1, [sp, #8]
	ldr	r3, [r3, #8]
	ldr	r0, [r4]
	cmp	r2, #4096
	movcc	r10, r2
	movcs	r10, #4096
	.syntax divided
@ 439 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r2, r1, r10; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L9692
	mov	r1, r10
	mvn	r9, #13
	bl	__memzero
.L9659:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r10, r0
	mov	r2, r7
	ldr	r1, [r5, #124]
	add	r0, r4, #36
	bl	__list_add
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L9647:
	ldr	r3, [r5, #104]
	cmp	r3, #0
	bne	.L9693
.L9666:
	ldr	r1, [sp, #20]
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r3, #1194
	ldrh	r3, [r8, r3]
	tst	r3, #4
	bne	.L9694
.L9642:
	mov	r0, r9
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9691:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L9649:
	ldr	r3, [r5, #104]
	cmp	r3, #0
	beq	.L9695
	ldr	r3, [r5, #104]
	cmp	r3, #0
	beq	.L9646
.L9664:
	movw	r3, #1146
	ldrh	r3, [r8, r3]
	tst	r3, #4
	mvneq	r9, #4
	beq	.L9647
	movw	r1, #:lower16:.LC844
	ldr	r0, .L9701
	mvn	r9, #4
	movt	r1, #:upper16:.LC844
	bl	__dynamic_pr_debug
	b	.L9647
.L9695:
	ldr	r1, [sp, #16]
	add	r2, sp, #40
	add	fp, r5, #140
	str	r3, [sp, #28]
	str	r3, [sp, #32]
	str	r3, [sp, #36]
	str	r3, [sp, #40]
	str	r3, [sp, #44]
	ldr	r3, [r10, #12]
	str	r9, [sp]
	str	r3, [sp, #32]
	str	r1, [sp, #36]
	str	r2, [sp, #40]
	str	r2, [sp, #44]
.L9657:
	mov	r2, #1
	add	r1, sp, #28
	mov	r0, fp
	bl	prepare_to_wait
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #120]
	mov	r4, r0
	cmp	r3, r7
	mov	r0, r3
	sub	r9, r3, #36
	beq	.L9696
	bl	list_del
	mov	r1, r4
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r9, #0
	bne	.L9654
.L9653:
	ldr	r3, [r5, #104]
	cmp	r3, #0
	bne	.L9655
	ldr	r3, [r10, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L9697
	add	r1, sp, #28
	mov	r0, fp
	bl	finish_wait
	ldr	r3, [r5, #104]
	mov	r9, #65024
	movt	r9, 65535
	cmp	r3, #0
	beq	.L9666
.L9693:
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r5, #128
	bl	__wake_up
	b	.L9666
.L9655:
	add	r1, sp, #28
	mov	r0, fp
	ldr	r9, [sp]
	bl	finish_wait
	ldr	r3, [r5, #104]
	cmp	r3, #0
	beq	.L9646
	b	.L9664
.L9692:
	mov	r2, r10
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L9698
	str	r10, [r4, #4]
	ldr	r0, [r5, #92]
	mov	r2, #32
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L9699
	ldr	r3, [sp, #8]
	add	r3, r3, r10
	str	r3, [sp, #8]
	ldr	r3, [sp, #4]
	sub	r3, r3, r10
	str	r3, [sp, #4]
	b	.L9645
.L9696:
	mov	r1, r4
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L9653
.L9663:
	ldr	r9, [sp, #12]
	b	.L9647
.L9697:
	bl	schedule
	b	.L9657
.L9689:
	movw	r1, #:lower16:.LC843
	add	r0, r8, #1104
	movt	r1, #:upper16:.LC843
	bl	__dynamic_pr_debug
	b	.L9644
.L9694:
	movw	r1, #:lower16:.LC846
	mov	r2, r9
	ldr	r0, .L9701+4
	movt	r1, #:upper16:.LC846
	bl	__dynamic_pr_debug
	b	.L9642
.L9690:
	ldr	r1, [sp, #20]
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r9, #15
	b	.L9642
.L9699:
	movw	r3, #1170
	ldrh	r3, [r8, r3]
	tst	r3, #4
	bne	.L9700
.L9662:
	mov	r3, #1
	mvn	r9, #4
	str	r3, [r5, #104]
	b	.L9659
.L9667:
	mvn	r9, #18
	b	.L9642
.L9700:
	movw	r1, #:lower16:.LC845
	mov	r2, r0
	ldr	r0, .L9701+8
	movt	r1, #:upper16:.LC845
	bl	__dynamic_pr_debug
	b	.L9662
.L9654:
	add	r1, sp, #28
	mov	r0, fp
	mov	r4, r9
	ldr	r9, [sp]
	bl	finish_wait
	b	.L9650
.L9698:
	mvn	r9, #13
	b	.L9659
.L9702:
	.align	2
.L9701:
	.word	.LANCHOR4+1128
	.word	.LANCHOR4+1176
	.word	.LANCHOR4+1152
	.fnend
	.size	adb_write, .-adb_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_unbind, %function
rndis_qc_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r3, #1218
	mov	r5, r1
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR4
	movw	r7, #:lower16:__stack_chk_guard
	movt	r6, #:upper16:.LANCHOR4
	str	r8, [sp, #16]
	movt	r7, #:upper16:__stack_chk_guard
	str	lr, [sp, #20]
	ldrh	r2, [r6, r3]
	.pad #24
	sub	sp, sp, #24
	ldr	r3, [r7]
	mov	r8, r0
	tst	r2, #4
	str	r3, [sp, #20]
	bne	.L9728
.L9704:
	ldrh	r3, [r6, #-126]
	tst	r3, #4
	bne	.L9729
.L9705:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3936]
	bl	kfree
	ldr	r0, [r4, #3940]
	mov	r3, #0
	str	r3, [r4, #3936]
	cmp	r0, r3
	beq	.L9706
	bl	destroy_workqueue
.L9706:
	movw	r3, #1098
	mov	r2, #0
	ldrh	r3, [r6, r3]
	str	r2, [r4, #3940]
	ldr	r6, [r5, #144]
	tst	r3, #4
	bne	.L9730
.L9707:
	cmp	r6, #0
	bgt	.L9708
	rsb	r6, r6, r6, lsl #4
	mov	r3, #0
	add	r6, r4, r6, lsl #2
	strb	r3, [r6, #3873]
.L9708:
	ldrb	r3, [r4, #3932]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L9731
.L9709:
	ldr	r3, [r8, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L9732
.L9710:
	ldr	r0, [r5, #16]
	bl	kfree
	ldr	r3, [r5, #160]
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r5, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, .L9734
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r0, r5
	bl	kfree
	mov	r3, #0
	mov	r1, r6
	ldr	r0, .L9734
	str	r3, [r4, #2496]
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [sp, #20]
	ldr	r3, [r7]
	cmp	r2, r3
	bne	.L9733
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9731:
	mov	r6, #0
	movw	r1, #:lower16:.LC640
	mov	r2, r6
	movt	r1, #:upper16:.LC640
	mov	r0, sp
	strb	r6, [r4, #3932]
	bl	sprintf
	mov	r0, sp
	mov	r1, r6
	bl	remove_proc_entry
	b	.L9709
.L9732:
	ldr	r0, [r5, #8]
	bl	kfree
	b	.L9710
.L9730:
	movw	r1, #:lower16:.LC289
	ldr	r2, .L9734+4
	movt	r1, #:upper16:.LC289
	ldr	r0, .L9734+8
	bl	__dynamic_pr_debug
	b	.L9707
.L9728:
	movw	r1, #:lower16:.LC847
	ldr	r2, .L9734+12
	add	r0, r6, #1200
	movt	r1, #:upper16:.LC847
	bl	__dynamic_pr_debug
	b	.L9704
.L9729:
	movw	r1, #:lower16:.LC750
	ldr	r2, .L9734+16
	movt	r1, #:upper16:.LC750
	ldr	r0, .L9734+20
	bl	__dynamic_pr_debug
	b	.L9705
.L9733:
	bl	__stack_chk_fail
.L9735:
	.align	2
.L9734:
	.word	.LANCHOR1+2492
	.word	.LANCHOR5-1296
	.word	.LANCHOR4+1080
	.word	.LANCHOR5-1276
	.word	.LANCHOR5-1928
	.word	.LANCHOR4-144
	.fnend
	.size	rndis_qc_unbind, .-rndis_qc_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_setup, %function
rndis_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r1]	@ unaligned
	.pad #36
	sub	sp, sp, #36
	ldrh	r3, [r1, #4]	@ unaligned
	ldrh	fp, [r1, #2]	@ unaligned
	ldr	r1, [r0, #20]
	rev16	r2, r2
	ldrh	r0, [r4, #6]	@ unaligned
	uxth	r2, r2
	ldr	r9, [r1, #24]
	cmp	r2, #8448
	str	r0, [sp, #16]
	ldr	r5, [r9, #4]
	beq	.L9737
	movw	r1, #41217
	cmp	r2, r1
	bne	.L9741
	cmp	fp, #0
	bne	.L9741
	ldrb	r2, [r6, #120]	@ zero_extendqisi2
	cmp	r2, r3
	bne	.L9741
	ldr	r1, [r6, #144]
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	rsb	r1, r1, r1, lsl #4
	lsl	r1, r1, #2
	add	r2, r8, r1
	add	r1, r1, #52
	ldr	r0, [r2, #3924]
	add	r2, r8, #3872
	add	r1, r2, r1
	cmp	r0, r1
	ldr	r2, [r0]
	beq	.L9741
	ldr	ip, [r0, #16]
	cmp	ip, #0
	bne	.L9744
	b	.L9765
.L9746:
	ldr	ip, [r2, #16]
	cmp	ip, #0
	beq	.L9743
	mov	r2, r0
.L9744:
	cmp	r2, r1
	ldr	r0, [r2]
	bne	.L9746
.L9741:
	mvn	r7, #94
.L9736:
	mov	r0, r7
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9737:
	cmp	fp, #0
	bne	.L9741
	ldrb	r2, [r6, #120]	@ zero_extendqisi2
	cmp	r2, r3
	bne	.L9741
	movw	r2, #:lower16:rndis_qc_command_complete
	mov	r10, r0
	movt	r2, #:upper16:rndis_qc_command_complete
	mov	r7, fp
	str	r2, [r5, #28]
.L9742:
	movw	r2, #:lower16:.LANCHOR4
	movw	r1, #1242
	movt	r2, #:upper16:.LANCHOR4
	ldrh	r2, [r2, r1]
	tst	r2, #4
	bne	.L9766
.L9751:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	r10, [r5, #4]
	mov	r1, r5
	str	r6, [r5, #32]
	mov	r2, #32
	bfi	r3, r7, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r9]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	bge	.L9736
	movw	r0, #:lower16:.LC849
	mov	r2, r7
	ldr	r1, .L9768
	movt	r0, #:upper16:.LC849
	bl	printk
	b	.L9736
.L9765:
	mov	r2, r0
.L9743:
	ldr	r7, [r2, #8]
	mov	r1, #1
	ldr	r10, [r2, #12]
	str	r1, [r2, #16]
	cmp	r7, #0
	beq	.L9741
	mov	r2, r10
	mov	r1, r7
	ldr	r0, [r5]
	str	r3, [sp, #20]
	bl	memcpy
	movw	r2, #:lower16:rndis_qc_response_complete
	ldr	r3, .L9768+4
	movt	r2, #:upper16:rndis_qc_response_complete
	str	r2, [r5, #28]
	ldr	r1, [r6, #144]
	rsb	r1, r1, r1, lsl #4
	lsl	r1, r1, #2
	add	r8, r8, r1
	add	r1, r1, #52
	ldr	r2, [r8, #3924]
	add	r1, r3, r1
	ldr	r3, [sp, #20]
	cmp	r1, r2
	ldr	r8, [r2]
	beq	.L9750
	str	r5, [sp, #20]
	mov	r5, r1
	str	r3, [sp, #24]
	str	r4, [sp, #28]
	mov	r4, r7
	mov	r7, r2
	b	.L9747
.L9749:
	cmp	r8, r5
	mov	r7, r8
	ldr	r8, [r8]
	beq	.L9767
.L9747:
	cmp	r7, #0
	beq	.L9749
	ldr	r0, [r7, #8]
	cmp	r4, r0
	bne	.L9749
	mov	r0, r7
	bl	list_del
	mov	r0, r7
	mov	r7, r8
	bl	kfree
	cmp	r8, r5
	ldr	r8, [r8]
	bne	.L9747
.L9767:
	ldr	r5, [sp, #20]
	ldr	r3, [sp, #24]
	ldr	r4, [sp, #28]
.L9750:
	cmp	r10, #0
	mov	r7, r10
	blt	.L9736
	ldr	r2, [sp, #16]
	cmp	r10, r2
	movge	r7, #0
	movlt	r7, #1
	b	.L9742
.L9766:
	ldr	r1, [r9]
	str	fp, [sp, #4]
	movw	r2, #:lower16:.LC848
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC848
	str	r3, [sp, #8]
	ldr	r0, [sp, #16]
	ldrb	r3, [r4]	@ zero_extendqisi2
	add	r1, r1, #32
	str	ip, [sp]
	str	r0, [sp, #12]
	ldr	r0, .L9768+8
	bl	__dynamic_dev_dbg
	b	.L9751
.L9769:
	.align	2
.L9768:
	.word	.LANCHOR5-1260
	.word	.LANCHOR1+3872
	.word	.LANCHOR4+1224
	.fnend
	.size	rndis_qc_setup, .-rndis_qc_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_setup, %function
rndis_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r1]	@ unaligned
	.pad #36
	sub	sp, sp, #36
	ldrh	fp, [r1, #4]	@ unaligned
	ldrh	r3, [r1, #2]	@ unaligned
	ldr	r1, [r0, #20]
	rev16	r2, r2
	ldrh	r0, [r4, #6]	@ unaligned
	uxth	r2, r2
	ldr	r9, [r1, #24]
	cmp	r2, #8448
	str	r0, [sp, #20]
	ldr	r5, [r9, #4]
	beq	.L9771
	movw	r1, #41217
	cmp	r2, r1
	bne	.L9775
	cmp	r3, #0
	bne	.L9775
	ldrb	r2, [r6, #148]	@ zero_extendqisi2
	cmp	r2, fp
	bne	.L9775
	ldr	r1, [r6, #164]
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	rsb	r1, r1, r1, lsl #4
	lsl	r1, r1, #2
	add	r2, r8, r1
	add	r1, r1, #52
	ldr	r0, [r2, #3924]
	add	r2, r8, #3872
	add	r1, r2, r1
	cmp	r0, r1
	ldr	r2, [r0]
	beq	.L9775
	ldr	ip, [r0, #16]
	cmp	ip, #0
	bne	.L9778
	b	.L9799
.L9780:
	ldr	ip, [r2, #16]
	cmp	ip, #0
	beq	.L9777
	mov	r2, r0
.L9778:
	cmp	r2, r1
	ldr	r0, [r2]
	bne	.L9780
.L9775:
	mvn	r6, #94
.L9770:
	mov	r0, r6
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9771:
	cmp	r3, #0
	bne	.L9775
	ldrb	r2, [r6, #148]	@ zero_extendqisi2
	cmp	r2, fp
	bne	.L9775
	movw	r2, #:lower16:rndis_command_complete
	mov	r10, r0
	str	r6, [r5, #32]
	movt	r2, #:upper16:rndis_command_complete
	mov	r6, r3
	str	r2, [r5, #28]
.L9776:
	movw	r0, #:lower16:.LANCHOR4
	movw	r2, #1266
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r2, [r0, r2]
	tst	r2, #4
	bne	.L9800
.L9785:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	r10, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfi	r3, r6, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r9]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	bge	.L9770
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC850
	mov	r2, r6
	movt	r1, #:upper16:.LC850
	add	r0, r0, #32
	bl	dev_err
	b	.L9770
.L9799:
	mov	r2, r0
.L9777:
	ldr	r7, [r2, #8]
	mov	r1, #1
	ldr	r10, [r2, #12]
	str	r1, [r2, #16]
	cmp	r7, #0
	beq	.L9775
	mov	r2, r10
	mov	r1, r7
	ldr	r0, [r5]
	str	r3, [sp, #24]
	bl	memcpy
	movw	r2, #:lower16:rndis_response_complete
	str	r6, [r5, #32]
	ldr	r3, .L9802
	movt	r2, #:upper16:rndis_response_complete
	str	r2, [r5, #28]
	ldr	r2, [r6, #164]
	rsb	r2, r2, r2, lsl #4
	lsl	r2, r2, #2
	add	r8, r8, r2
	add	r2, r2, #52
	ldr	r8, [r8, #3924]
	add	r2, r3, r2
	ldr	r3, [sp, #24]
	cmp	r2, r8
	ldr	r6, [r8]
	beq	.L9784
	str	r5, [sp, #24]
	mov	r5, r2
	str	r4, [sp, #28]
	mov	r4, r7
	mov	r7, r3
	b	.L9781
.L9783:
	cmp	r6, r5
	mov	r8, r6
	ldr	r6, [r6]
	beq	.L9801
.L9781:
	cmp	r8, #0
	beq	.L9783
	ldr	r1, [r8, #8]
	cmp	r4, r1
	bne	.L9783
	mov	r0, r8
	bl	list_del
	mov	r0, r8
	mov	r8, r6
	bl	kfree
	cmp	r6, r5
	ldr	r6, [r6]
	bne	.L9781
.L9801:
	ldr	r5, [sp, #24]
	mov	r3, r7
	ldr	r4, [sp, #28]
.L9784:
	cmp	r10, #0
	mov	r6, r10
	blt	.L9770
	ldr	r2, [sp, #20]
	cmp	r10, r2
	movge	r6, #0
	movlt	r6, #1
	b	.L9776
.L9800:
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC848
	add	r0, r0, #1248
	ldr	r1, [r9]
	movt	r2, #:upper16:.LC848
	str	r3, [sp, #4]
	ldr	lr, [sp, #20]
	ldrb	r3, [r4]	@ zero_extendqisi2
	str	ip, [sp]
	add	r1, r1, #32
	str	fp, [sp, #8]
	str	lr, [sp, #12]
	bl	__dynamic_dev_dbg
	b	.L9785
.L9803:
	.align	2
.L9802:
	.word	.LANCHOR1+3872
	.fnend
	.size	rndis_setup, .-rndis_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_function_unbind_config, %function
ecm_qc_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L9813
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	bl	strim
	mov	r1, r0
	movw	r0, #:lower16:.LC631
	movt	r0, #:upper16:.LC631
	bl	strcmp
	cmp	r0, #0
	bne	.L9812
.L9804:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L9812:
	movw	r1, #:lower16:.LC851
	movw	r0, #:lower16:init_net
	movt	r1, #:upper16:.LC851
	movt	r0, #:upper16:init_net
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L9804
	.syntax divided
@ 17 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/irqflags.h" 1
		mrs	ip, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	movw	r2, #:lower16:__per_cpu_offset
	bic	r1, r3, #8128
	movt	r2, #:upper16:__per_cpu_offset
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
	ldr	r1, [r2, r1, lsl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, ip	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	bl	unregister_netdev
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	free_netdev
.L9814:
	.align	2
.L9813:
	.word	.LANCHOR1+3020
	.fnend
	.size	ecm_qc_function_unbind_config, .-ecm_qc_function_unbind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	halt_bulk_in_endpoint, %function
halt_bulk_in_endpoint:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #1290
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r3, [r3, r2]
	ldr	r5, [r0, #100]
	tst	r3, #4
	bne	.L9832
.L9816:
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
	cmp	r0, #0
	bne	.L9821
	b	.L9831
.L9820:
	mov	r0, #100
	bl	msleep_interruptible
	cmp	r0, #0
	mov	r1, #1
	bne	.L9823
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	cmp	r0, #0
	beq	.L9831
.L9821:
	cmn	r0, #11
	beq	.L9820
	ldr	r3, [r4, #84]
	movw	r1, #:lower16:.LC854
	mov	r2, r0
	movt	r1, #:upper16:.LC854
	add	r0, r3, #32
	bl	dev_warn
.L9831:
	mov	r0, #0
.L9815:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9823:
	mvn	r0, #3
	b	.L9815
.L9832:
	ldr	r1, [r4, #84]
	movw	r3, #:lower16:.LC852
	movw	r2, #:lower16:.LC853
	movt	r3, #:upper16:.LC852
	movt	r2, #:upper16:.LC853
	ldr	r0, .L9833
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L9816
.L9834:
	.align	2
.L9833:
	.word	.LANCHOR4+1272
	.fnend
	.size	halt_bulk_in_endpoint, .-halt_bulk_in_endpoint
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_disable, %function
fsg_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r3, [r0, #94]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L9836
	ldr	r0, [r0, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	mov	r1, #0
	ldr	r2, [r4, #100]
	bfc	r3, #0, #1
	strb	r3, [r4, #94]
	str	r1, [r2]
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
.L9836:
	tst	r3, #2
	beq	.L9837
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	mov	r1, #0
	ldr	r2, [r4, #104]
	bfc	r3, #1, #1
	strb	r3, [r4, #94]
	str	r1, [r2]
.L9837:
	ldr	r3, [r4, #88]
	mov	r2, #0
	str	r2, [r3, #12]
	ldr	r4, [r4, #88]
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	mov	r6, r0
	cmp	r3, #4
	bgt	.L9839
	ldr	r3, [r4, #56]
	mov	r1, #4
	ldr	r2, [r4, #168]
	str	r1, [r4, #112]
	str	r3, [r4, #116]
	cmp	r2, #0
	beq	.L9839
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L9839:
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	fsg_disable, .-fsg_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rx_fill, %function
rx_fill:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	add	r3, r0, #28
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, r3
	strd	r8, [sp, #16]
	add	r9, r0, #16
	strd	r10, [sp, #24]
	mov	r0, r9
	mov	r10, r1
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	str	r3, [sp, #16]
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r6, #28]
	mov	r4, r0
	cmp	r7, r5
	beq	.L9852
	movw	r3, #:lower16:.LANCHOR0
	mov	r8, #0
	movt	r3, #:upper16:.LANCHOR0
	mov	fp, r10
	str	r3, [sp, #20]
	b	.L9870
.L9854:
	ldr	r7, [r3, #92]
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L9896
	ldmib	r6, {r2, ip}
	ldrh	r3, [r7, #20]
	ldr	r1, [r6, #72]
	ldr	r0, [r2, #100]
	ldr	r4, [ip, #356]
	cmp	r1, #0
	add	r4, r4, r0
	add	r4, r4, #33
	add	r4, r4, r3
	udiv	r0, r4, r3
	mls	r3, r3, r0, r4
	sub	r4, r4, r3
	ldrb	r3, [r2, #104]	@ zero_extendqisi2
	mulne	r4, r1, r4
	cmp	r3, #0
	beq	.L9858
	ldr	r3, [r2, #108]
	cmp	r4, r3
	movcc	r4, r3
.L9858:
	ldr	r0, .L9902
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L9897
.L9859:
	mvn	r3, #0
	mov	r2, #0
	mov	r1, fp
	add	r0, r4, #2
	bl	__alloc_skb
	subs	r3, r0, #0
	beq	.L9860
	ldr	lr, [r3, #160]
	mov	r1, r10
	mov	r0, r7
	ldr	ip, [r3, #172]
	mov	r2, fp
	str	r3, [sp, #12]
	add	lr, lr, #2
	add	ip, ip, #2
	str	lr, [r3, #160]
	str	ip, [r3, #172]
	str	ip, [r5, #-36]
	str	r4, [r5, #-32]
	str	r3, [r5, #-4]
	ldr	ip, [r7, #8]
	ldr	r4, [ip, #16]
	blx	r4
	cmn	r0, #12
	mov	r4, r0
	ldr	r3, [sp, #12]
	beq	.L9898
	cmp	r0, #0
	bne	.L9899
.L9865:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #16]
	mov	r4, r0
	ldr	r5, [r6, #28]
	cmp	r3, r5
	beq	.L9852
.L9870:
	ldr	r3, [r6, #12]
	add	r8, r8, #1
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bls	.L9877
	ldr	r3, [r3, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L9877
	ldr	r3, [sp, #20]
	ldr	r3, [r3, #604]
	lsl	r3, r3, #1
	cmp	r3, r8
	blt	.L9852
.L9901:
	mov	r0, r5
	sub	r10, r5, #36
	bl	__list_del_entry
	mov	r1, r4
	mov	r0, r9
	str	r5, [r5]
	str	r5, [r5, #4]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L9854
	mov	r1, r0
	add	r7, r6, #120
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L9855:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r4, r0
	mov	r0, r5
	ldr	r1, [sp, #16]
	ldr	r2, [r6, #28]
	bl	__list_add
	mov	r1, r4
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r1, r7
	mov	r0, #0
	bl	_test_and_set_bit
	cmp	r0, #0
	beq	.L9900
.L9851:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9877:
	mov	r3, #2
	cmp	r3, r8
	bge	.L9901
.L9852:
	mov	r1, r4
	mov	r0, r9
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L9898:
	add	r4, r6, #120
	mov	r0, #0
	mov	r1, r4
	mov	fp, r3
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L9872
	add	r0, r6, #88
	bl	schedule_work
	cmp	r0, #0
	beq	.L9875
.L9872:
	mov	r0, fp
	bl	dev_kfree_skb_any
.L9863:
	mov	r7, r4
	b	.L9855
.L9860:
	add	r4, r6, #120
	mov	fp, r3
	mov	r1, r4
	mov	r7, r4
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L9855
	add	r0, r6, #88
	bl	schedule_work
	cmp	r0, #0
	bne	.L9863
.L9875:
	movw	r0, #:lower16:.LC778
	mov	r2, #0
	ldr	r1, [r6, #8]
	movt	r0, #:upper16:.LC778
	bl	printk
	cmp	fp, #0
	beq	.L9863
	b	.L9872
.L9897:
	ldr	r3, .L9902+4
	movw	r1, #:lower16:.LC855
	sub	r0, r0, #18
	movt	r1, #:upper16:.LC855
	str	r4, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L9859
.L9899:
	mov	r0, r3
	bl	dev_kfree_skb_any
	cmp	r4, #0
	bge	.L9865
.L9896:
	add	r4, r6, #120
	b	.L9863
.L9900:
	add	r0, r6, #88
	bl	schedule_work
	subs	r2, r0, #0
	bne	.L9851
	ldr	r1, [r6, #8]
	movw	r0, #:lower16:.LC778
	movt	r0, #:upper16:.LC778
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L9903:
	.align	2
.L9902:
	.word	.LANCHOR4+1314
	.word	.LANCHOR5-1244
	.fnend
	.size	rx_fill, .-rx_fill
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_work, %function
eth_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r0, #0
	add	r1, r4, #32
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L9904
	ldr	r3, [r4, #-80]
	ldr	r3, [r3, #160]
	tst	r3, #1
	bne	.L9913
.L9904:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9913:
	sub	r5, r4, #88
	mov	r1, #208
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	rx_fill
	.fnend
	.size	eth_work, .-eth_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	process_rx_w, %function
process_rx_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-100]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #:lower16:.LC859
	mov	r4, r0
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LC858
	movt	r5, #:upper16:.LC859
	strd	r10, [sp, #24]
	ldr	fp, .L9941
	movt	r6, #:upper16:.LC858
	strd	r8, [sp, #16]
	sub	r9, r0, #52
	mov	r8, #0
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
.L9917:
	mov	r0, r9
	bl	skb_dequeue
	subs	r7, r0, #0
	beq	.L9938
.L9925:
	cmp	r8, #0
	blt	.L9918
	ldr	r10, [r7, #80]
	movw	r3, #1500
	sub	r2, r10, #14
	cmp	r2, r3
	bhi	.L9939
.L9920:
	mov	r0, r7
	ldr	r1, [r4, #-96]
	bl	eth_type_trans
	strh	r0, [r7, #102]	@ movhi
	ldr	r2, [r4, #-96]
	mov	r0, r7
	ldr	r3, [r2, #232]
	add	r3, r3, #1
	str	r3, [r2, #232]
	ldr	r2, [r4, #-96]
	ldr	r1, [r7, #80]
	ldr	r3, [r2, #240]
	add	r3, r3, r1
	str	r3, [r2, #240]
	bl	netif_rx_ni
	mov	r8, r0
	mov	r0, r9
	bl	skb_dequeue
	subs	r7, r0, #0
	bne	.L9925
.L9938:
	ldr	r3, [r4, #-96]
	ldr	r3, [r3, #160]
	tst	r3, #1
	bne	.L9940
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9940:
	sub	r0, r4, #104
	mov	r1, #208
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	rx_fill
.L9918:
	ldr	r3, [r4, #-100]
	mov	r1, r5
	ldr	r0, [r3]
	bl	strcmp
	cmp	r0, #0
	bne	.L9923
.L9921:
	movw	r0, #:lower16:.LC856
	mov	r1, fp
	ldr	r2, [r7, #80]
	movt	r0, #:upper16:.LC856
	bl	printk
.L9923:
	ldr	r2, [r4, #-96]
	mov	r1, fp
	mov	r0, r6
	ldr	r3, [r2, #248]
	add	r3, r3, #1
	str	r3, [r2, #248]
	ldr	r2, [r4, #-96]
	ldr	r3, [r2, #272]
	add	r3, r3, #1
	str	r3, [r2, #272]
	ldr	r2, [r7, #80]
	bl	printk
	mov	r0, r7
	bl	dev_kfree_skb_any
	b	.L9917
.L9939:
	ldr	r3, [r4, #-100]
	mov	r1, r5
	ldr	r0, [r3]
	bl	strcmp
	cmp	r0, #0
	bne	.L9923
	cmp	r10, #13
	bls	.L9921
	ldr	r3, [r4, #-96]
	ldr	r3, [r3, #356]
	add	r3, r3, #14
	cmp	r10, r3
	bhi	.L9921
	movw	r0, #:lower16:.LC857
	mov	r2, r10
	mov	r1, fp
	movt	r0, #:upper16:.LC857
	bl	printk
	b	.L9920
.L9942:
	.align	2
.L9941:
	.word	.LANCHOR5-1232
	.fnend
	.size	process_rx_w, .-process_rx_w
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_open, %function
eth_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	add	r6, r0, #1152
	str	lr, [sp, #12]
	ldr	r3, [r0, #1160]
	ldr	r5, [r3, #160]
	ubfx	r5, r5, #2, #1
	cmp	r5, #0
	beq	.L9944
.L9945:
	mov	r0, r6
	bl	_raw_spin_lock_irq
	ldr	r0, [r4, #1156]
	cmp	r0, #0
	beq	.L9947
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L9947
	blx	r3
.L9947:
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9944:
	mov	r1, #208
	mov	r0, r6
	bl	rx_fill
	ldr	r3, [r4, #1160]
	mov	r0, r5
	str	r5, [r4, #1188]
	ldr	r5, [r3, #576]
	add	r1, r5, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L9945
	ldr	r0, [r5, #4]
	bl	__netif_schedule
	b	.L9945
	.fnend
	.size	eth_open, .-eth_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_start, %function
gbam_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	bne	.L9959
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #4
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock
	ldr	r2, [r4, #12]
	cmp	r2, #0
	beq	.L9972
	movw	r3, #:lower16:.LANCHOR2
	movw	r1, #1338
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r1]
	tst	r3, #4
	bne	.L9973
.L9961:
	ldr	r0, [r2, #88]
	mov	r2, #32
	ldr	r1, [r4, #112]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L9962
	movw	r0, #:lower16:.LC112
	ldr	r1, .L9974
	movt	r0, #:upper16:.LC112
	bl	printk
.L9962:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L9959:
	b	gbam_start_endless_tx
.L9972:
	mov	r0, r5
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC108
	ldr	r1, .L9974
	movt	r0, #:upper16:.LC108
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L9973:
	movw	r1, #:lower16:.LC111
	ldr	r2, .L9974
	movt	r1, #:upper16:.LC111
	ldr	r0, .L9974+4
	bl	__dynamic_pr_debug
	ldr	r2, [r4, #12]
	b	.L9961
.L9975:
	.align	2
.L9974:
	.word	.LANCHOR3+480
	.word	.LANCHOR2+1320
	.fnend
	.size	gbam_start, .-gbam_start
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_start_io, %function
rmnet_sdio_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #188
	mov	r0, r6
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #192]
	mov	r7, r0
	cmp	r5, #0
	beq	.L10005
	ldr	r3, [r4, #316]
	tst	r3, #2
	beq	.L9979
	ldr	r3, [r4, #320]
	tst	r3, #2
	beq	.L9979
	movw	r9, #:lower16:rmnet_sdio_complete_epout
	mov	r5, #16
	movt	r9, #:upper16:rmnet_sdio_complete_epout
	add	r8, r4, #160
.L9980:
	ldr	r0, [r4, #88]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r8
	add	r0, r3, #36
	beq	.L9995
	cmn	r3, #4096
	bhi	.L10004
	str	r9, [r3, #28]
	ldr	r1, [r4, #164]
	bl	__list_add
	ldr	r3, [r4, #168]
	subs	r5, r5, #1
	add	r3, r3, #1
	str	r3, [r4, #168]
	bne	.L9980
	movw	r9, #:lower16:rmnet_sdio_complete_epin
	mov	r5, #200
	movt	r9, #:upper16:rmnet_sdio_complete_epin
	add	r10, r4, #132
.L9986:
	ldr	r0, [r4, #92]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r10
	add	r0, r3, #36
	beq	.L9995
	cmn	r3, #4096
	bhi	.L10004
	str	r9, [r3, #28]
	ldr	r1, [r4, #136]
	bl	__list_add
	ldr	r3, [r4, #140]
	subs	r5, r5, #1
	add	r3, r3, #1
	str	r3, [r4, #140]
	bne	.L9986
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r9, [r4, #84]
	ldr	r3, [r4, #192]
	cmp	r3, #0
	movne	r0, r6
	beq	.L10006
.L10003:
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #160]
	mov	r10, r0
	cmp	r8, r5
	beq	.L9988
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del
	ldr	r3, [r4, #168]
	mov	r1, r10
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r4, #168]
	bl	_raw_spin_unlock_irqrestore
	mov	r2, #0
	mov	r1, #32
	mvn	r3, #0
	movw	r0, #2056
	bl	__alloc_skb
	mov	r1, r7
	subs	r7, r0, #0
	mov	ip, #2048
	mov	r2, #32
	beq	.L10007
	ldr	r0, [r7, #160]
	ldr	r3, [r7, #172]
	add	r0, r0, #8
	add	r3, r3, #8
	str	r0, [r7, #160]
	str	r3, [r7, #172]
	str	r3, [r5, #-36]
	str	ip, [r5, #-32]
	str	r7, [r5, #-4]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	fp, r0, #0
	mov	r0, r6
	beq	.L10003
	mov	r0, r7
	bl	dev_kfree_skb_any
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r10, r0
.L9990:
	ldr	r0, [r9]
	movw	r1, #:lower16:.LC32
	mov	r2, fp
	movt	r1, #:upper16:.LC32
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r8
	mov	r0, r5
	ldr	r1, [r4, #164]
	bl	__list_add
	ldr	r3, [r4, #168]
	add	r3, r3, #1
	str	r3, [r4, #168]
.L9988:
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r5, #0
	b	.L9976
.L9979:
	mov	r1, r7
	mov	r0, r6
	mov	r5, #0
	bl	_raw_spin_unlock_irqrestore
.L9976:
	mov	r0, r5
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9995:
	mvn	r5, #11
.L9984:
.L9983:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	bl	rmnet_sdio_free_buf
	mov	r3, #0
	str	r3, [r4, #88]
	str	r3, [r4, #92]
	str	r3, [r4, #96]
	b	.L9976
.L10005:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L9976
.L10007:
	mov	r0, r6
	mvn	fp, #11
	bl	_raw_spin_lock_irqsave
	mov	r10, r0
	b	.L9990
.L10004:
	mov	r5, r3
	b	.L9984
.L10006:
	movw	r0, #:lower16:.LC860
	ldr	r1, .L10008
	movt	r0, #:upper16:.LC860
	bl	printk
	b	.L9976
.L10009:
	.align	2
.L10008:
	.word	.LANCHOR5-1216
	.fnend
	.size	rmnet_sdio_start_io, .-rmnet_sdio_start_io
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_open_sdio_work, %function
rmnet_open_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #-168]
	ldr	r3, [r0, #68]
	ldr	r3, [r0, #64]
	ldr	r3, [r0, #64]
	tst	r3, #2
	beq	.L10011
	ldr	r3, [r0, #68]
	tst	r3, #2
	bne	.L10030
.L10011:
	movw	r5, #:lower16:.LANCHOR1
	movw	r2, #:lower16:.LANCHOR4
	movt	r5, #:upper16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR4
	movw	r1, #1338
	ldr	r3, [r5, #3984]
	ldrh	r2, [r2, r1]
	add	r3, r3, #1
	tst	r2, #4
	str	r3, [r5, #3984]
	bne	.L10031
.L10014:
	cmp	r3, #90
	ble	.L10015
	ldr	r3, [r4, #68]
	tst	r3, #2
	beq	.L10032
	ldr	r3, [r4, #64]
	tst	r3, #2
	beq	.L10033
.L10010:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10033:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC864
	movt	r1, #:upper16:.LC864
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	add	r0, r0, #32
	b	dev_err
.L10032:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC863
	movt	r1, #:upper16:.LC863
	add	r0, r0, #32
	bl	dev_err
	ldr	r3, [r4, #64]
	tst	r3, #2
	bne	.L10010
	b	.L10033
.L10015:
	ldr	r5, [r4, #-52]
	mov	r0, #2000
	bl	msecs_to_jiffies
	mov	r2, r0
	mov	r1, r4
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	queue_delayed_work
.L10031:
	movw	r1, #:lower16:.LC862
	ldr	r2, .L10034
	movt	r1, #:upper16:.LC862
	ldr	r0, .L10034+4
	bl	__dynamic_pr_debug
	ldr	r3, [r5, #3984]
	b	.L10014
.L10030:
	sub	r0, r0, #252
	bl	rmnet_sdio_start_io
	ldr	r3, [r4, #-60]
	cmp	r3, #0
	beq	.L10012
	add	r1, r4, #80
	ldr	r0, [r4, #-52]
	bl	queue_work
.L10012:
	movw	r4, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC861
	ldr	r1, .L10034
	movt	r4, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC861
	ldr	r2, [r4, #3984]
	bl	printk
	mov	r3, #0
	str	r3, [r4, #3984]
	b	.L10010
.L10035:
	.align	2
.L10034:
	.word	.LANCHOR5-1196
	.word	.LANCHOR4+1320
	.fnend
	.size	rmnet_open_sdio_work, .-rmnet_open_sdio_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_free_buffers, %function
gbam_free_buffers:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	add	r5, r0, #4
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #8
	mov	r0, r5
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r4, #0
	beq	.L10038
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L10038
	ldr	r8, [r4, #28]
	add	r10, r4, #28
	ldr	r9, [r3, #84]
	cmp	r10, r8
	beq	.L10039
.L10040:
	mov	r0, r8
	sub	r8, r8, #36
	bl	list_del
	ldr	r3, [r9, #8]
	mov	r1, r8
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r8, [r4, #28]
	cmp	r10, r8
	bne	.L10040
	ldr	r3, [r4, #12]
.L10039:
	ldr	r8, [r4, #52]
	add	r10, r4, #52
	ldr	r9, [r3, #88]
	cmp	r10, r8
	beq	.L10044
.L10041:
	mov	r0, r8
	sub	r8, r8, #36
	bl	list_del
	ldr	r3, [r9, #8]
	mov	r1, r8
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r8, [r4, #52]
	cmp	r10, r8
	bne	.L10041
.L10044:
	ldr	r3, [r4, #36]
	add	r10, r4, #36
	cmp	r10, r3
	beq	.L10042
	cmp	r3, #0
	beq	.L10042
	mov	r8, #0
	mov	r9, #0
.L10046:
	ldr	r2, [r4, #44]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #44]
	ldm	r3, {r1, r2}
	strd	r8, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #36]
	cmp	r3, r10
	beq	.L10042
	cmp	r3, #0
	bne	.L10046
.L10042:
	ldr	r3, [r4, #60]
	add	r10, r4, #60
	cmp	r3, r10
	beq	.L10038
	cmp	r3, #0
	beq	.L10038
	mov	r8, #0
	mov	r9, #0
.L10048:
	ldr	r2, [r4, #68]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #68]
	ldm	r3, {r1, r2}
	strd	r8, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #60]
	cmp	r3, r10
	beq	.L10038
	cmp	r3, #0
	bne	.L10048
.L10038:
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r1, r7
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	gbam_free_buffers, .-gbam_free_buffers
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_ch_remove, %function
gbam_data_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #1362
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r3, r2]
	.pad #12
	sub	sp, sp, #12
	tst	r2, #4
	bne	.L10099
.L10070:
	movw	fp, #:lower16:.LANCHOR1
	movt	fp, #:upper16:.LANCHOR1
	ldr	r5, [fp, #424]
	cmp	r5, #0
	ble	.L10097
	mov	r10, #0
	movw	r4, #:lower16:.LC364
	str	fp, [sp]
	mov	r8, r10
	mov	r7, r10
	movt	r4, #:upper16:.LC364
.L10071:
	mov	r0, r4
	ldr	r1, [r6]
	bl	strcmp
	cmp	r0, #0
	beq	.L10100
.L10072:
	add	r10, r10, #1
	cmp	r5, r10
	bgt	.L10071
.L10097:
	mov	r0, #0
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10100:
	mov	r3, #84
	ldr	r2, .L10101
	mul	r3, r3, r10
	ldr	r5, [r3, r2]
	add	fp, r5, #4
	add	r9, r5, #8
	mov	r0, fp
	bl	_raw_spin_lock_irqsave
	str	r0, [sp, #4]
	mov	r0, r9
	bl	_raw_spin_lock
	ldr	r3, [r5, #12]
	mov	r0, r9
	cmp	r3, #0
	ldrne	r7, [r3, #84]
	ldrne	r8, [r3, #88]
	bl	_raw_spin_unlock
	mov	r0, fp
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L10074
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L10074
	mov	r0, r7
	blx	r3
.L10074:
	cmp	r8, #0
	beq	.L10075
	ldr	r3, [r8, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L10075
	mov	r0, r8
	blx	r3
.L10075:
	mov	r0, r5
	add	r9, r5, #20
	bl	gbam_free_buffers
	ldr	r0, [r5, #24]
	bl	msm_bam_dmux_close
	mov	r3, #0
	mov	r1, r9
	mov	r0, #2
	str	r3, [r5, #240]
	bl	_clear_bit
	mov	r1, r9
	mov	r0, #1
	bl	_clear_bit
	ldr	r3, [sp]
	ldr	r5, [r3, #424]
	b	.L10072
.L10099:
	movw	r1, #:lower16:.LC180
	add	r0, r3, #1344
	ldr	r2, .L10101+4
	movt	r1, #:upper16:.LC180
	ldr	r3, [r6]
	bl	__dynamic_pr_debug
	b	.L10070
.L10102:
	.align	2
.L10101:
	.word	.LANCHOR1+428
	.word	.LANCHOR5-1172
	.fnend
	.size	gbam_data_ch_remove, .-gbam_data_ch_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	send_file_work, %function
send_file_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 64
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #-100]
	.pad #84
	sub	sp, sp, #84
	str	r3, [sp, #40]
	.syntax divided
@ 751 "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r3, [r0, #32]
	ldrd	r10, [r0, #48]
	ldrd	r4, [r0, #40]
	str	r3, [sp, #20]
	cmp	r10, #0
	sbcs	r3, fp, #0
	strd	r4, [sp, #48]
	mvnlt	r3, #21
	strlt	r3, [r0, #68]
	blt	.L10103
	movw	r3, #:lower16:.LANCHOR4
	mov	r7, r0
	mov	r2, r3
	movw	r3, #1386
	movt	r2, #:upper16:.LANCHOR4
	ldrh	r3, [r2, r3]
	str	r2, [sp, #36]
	tst	r3, #4
	bne	.L10158
.L10106:
	ldr	r4, [r7, #56]
	cmp	r4, #0
	bne	.L10159
.L10107:
	ldr	r3, [r7, #-92]
	ldrh	r3, [r3, #20]
	sub	r3, r3, #1
	asr	r1, r3, #31
	and	r3, r3, r10
	and	r2, r1, fp
	orrs	r3, r3, r2
	moveq	r8, #1
	movne	r8, #0
	cmp	r10, #1
	sbcs	r3, fp, #0
	movlt	r3, r8
	orrge	r3, r8, #1
	cmp	r3, #0
	beq	.L10115
	mov	r3, sp
	sub	r5, r7, #68
	bic	r3, r3, #8128
	sub	r9, r7, #96
	bic	r3, r3, #63
	str	r3, [sp, #32]
	str	r5, [sp, #44]
	b	.L10127
.L10111:
	mov	r0, r6
	str	r1, [sp, #16]
	sub	r6, r6, #36
	bl	list_del
	mov	r0, r9
	ldr	r1, [sp, #16]
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	movne	r3, #0
	beq	.L10112
	ldr	r2, [r7, #-80]
	cmp	r2, #3
	beq	.L10120
.L10164:
	cmp	r6, #0
	beq	.L10155
	movw	r2, #:lower16:.LANCHOR0
	mov	r1, #0
	ldr	r3, [r6]
	movt	r2, #:upper16:.LANCHOR0
	ldr	r2, [r2, #1656]
	cmp	r2, r10
	sbcs	r1, r1, fp
	movge	r2, r10
	cmp	r4, #0
	beq	.L10123
	mov	r1, #2
	str	r10, [r3]
	strh	r1, [r3, #4]	@ movhi
	ldrh	r1, [r7, #60]
	strh	r1, [r3, #6]	@ movhi
	ldr	r1, [r7, #64]
	str	r1, [r3, #8]
	ldr	r3, [r6]
.L10123:
	add	r1, r3, r4
	sub	r2, r2, r4
	ldr	r0, [sp, #20]
	add	r3, sp, #48
	bl	vfs_read
	subs	r3, r0, #0
	blt	.L10156
	add	r4, r3, r4
	mov	r2, #208
	mov	r1, r6
	str	r4, [r6, #4]
	ldr	r0, [r7, #-92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L10160
	subs	r10, r10, r4
	and	r3, r8, #1
	sbc	fp, fp, r4, asr #31
	cmp	r10, #1
	mov	r4, #0
	sbcs	r2, fp, #0
	orrge	r3, r3, #1
	cmp	r3, r4
	beq	.L10115
.L10127:
	orrs	r3, r10, fp
	mov	r0, r9
	moveq	r8, #0
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r7, #-68]
	mov	r1, r0
	cmp	r6, r5
	bne	.L10111
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
.L10112:
	ldr	r3, [r7, #-80]
	cmp	r3, #2
	bne	.L10161
	ldr	r3, [sp, #32]
	sub	ip, r7, #40
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #72
	movt	r2, #:upper16:autoremove_wake_function
	str	ip, [sp, #16]
	strd	r10, [sp, #24]
	ldr	r0, [r3, #12]
	mov	r3, #0
	str	r3, [sp, #60]
	str	r0, [sp, #64]
	mov	r0, ip
	str	r2, [sp, #68]
	str	r1, [sp, #72]
	str	r1, [sp, #76]
.L10119:
	mov	r2, #1
	add	r1, sp, #60
	bl	prepare_to_wait
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r7, #-68]
	mov	r6, r0
	cmp	r3, r5
	mov	r0, r3
	sub	fp, r3, #36
	beq	.L10162
	bl	list_del
	mov	r1, r6
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	cmp	fp, #0
	bne	.L10132
.L10117:
	ldr	r3, [r7, #-80]
	cmp	r3, #2
	bne	.L10133
	ldr	r3, [sp, #32]
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L10163
	ldrd	r10, [sp, #24]
	mov	r3, #65024
	mov	r6, #0
	movt	r3, 65535
.L10118:
	add	r1, sp, #60
	ldr	r0, [sp, #16]
	str	r3, [sp, #24]
	bl	finish_wait
	ldr	r2, [r7, #-80]
	ldr	r3, [sp, #24]
	cmp	r2, #3
	bne	.L10164
.L10120:
	cmp	r6, #0
	beq	.L10128
	mvn	r5, #124
	b	.L10124
.L10161:
	cmp	r3, #3
	beq	.L10128
.L10115:
	mov	r5, #0
.L10109:
	ldr	r2, [sp, #36]
	movw	r3, #1434
	ldrh	r3, [r2, r3]
	tst	r3, #4
	bne	.L10165
.L10129:
	str	r5, [r7, #68]
	.syntax divided
@ 841 "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
.L10103:
	add	sp, sp, #84
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10159:
	adds	r10, r10, #12
	mov	r4, #12
	adc	fp, fp, #0
	b	.L10107
.L10162:
	mov	r1, r6
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	b	.L10117
.L10163:
	bl	schedule
	ldr	r0, [sp, #16]
	b	.L10119
.L10156:
	mov	r5, r3
.L10124:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r4, r0
	add	r0, r6, #36
	ldr	r1, [r7, #-64]
	ldr	r2, [sp, #44]
	bl	__list_add
	mov	r1, r4
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	b	.L10109
.L10160:
	ldr	r2, [sp, #36]
	movw	r3, #1410
	ldrh	r3, [r2, r3]
	tst	r3, #4
	bne	.L10166
.L10126:
	ldr	r3, [r7, #-80]
	cmp	r3, #0
	mvneq	r5, #4
	beq	.L10124
	mov	r3, #4
	mvn	r5, #4
	str	r3, [r7, #-80]
	b	.L10124
.L10158:
	ldr	r3, [sp, #40]
	movw	r2, #:lower16:.LC865
	movt	r2, #:upper16:.LC865
	ldr	r0, .L10167
	ldr	r1, [r3]
	strd	r4, [sp]
	strd	r10, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L10106
.L10165:
	ldr	r3, [sp, #40]
	movw	r2, #:lower16:.LC867
	movt	r2, #:upper16:.LC867
	ldr	r0, .L10167+4
	ldr	r1, [r3]
	mov	r3, r5
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L10129
.L10132:
	mov	r6, fp
	mov	r3, #0
	ldrd	r10, [sp, #24]
	b	.L10118
.L10133:
	mov	r6, #0
	ldrd	r10, [sp, #24]
	mov	r3, r6
	b	.L10118
.L10128:
	mvn	r5, #124
	b	.L10109
.L10155:
	mov	r5, r3
	b	.L10109
.L10166:
	ldr	r3, [sp, #40]
	movw	r2, #:lower16:.LC866
	movt	r2, #:upper16:.LC866
	ldr	r1, [r3]
	mov	r3, r0
	ldr	r0, .L10167+8
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L10126
.L10168:
	.align	2
.L10167:
	.word	.LANCHOR4+1368
	.word	.LANCHOR4+1416
	.word	.LANCHOR4+1392
	.fnend
	.size	send_file_work, .-send_file_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_free_buffers.part.47, %function
ghsuart_data_free_buffers.part.47:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #72
	mov	r0, r6
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r8, [r4, #8]
	mov	r7, r0
	cmp	r8, #0
	beq	.L10179
	ldr	r5, [r4, #48]
	add	r9, r4, #48
	cmp	r9, r5
	beq	.L10171
.L10172:
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del
	ldr	r3, [r8, #8]
	mov	r1, r5
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #48]
	cmp	r9, r5
	bne	.L10172
.L10171:
	ldr	r3, [r4, #56]
	add	r5, r4, #56
	cmp	r5, r3
	beq	.L10173
	cmp	r3, #0
	beq	.L10173
	mov	r8, #0
	mov	r9, #0
.L10174:
	ldr	r2, [r4, #64]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #64]
	ldm	r3, {r1, r2}
	strd	r8, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #56]
	cmp	r3, r5
	beq	.L10173
	cmp	r3, #0
	bne	.L10174
.L10173:
	mov	r1, r7
	mov	r0, r6
	add	r6, r4, #104
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r8, [r4, #12]
	mov	r7, r0
	cmp	r8, #0
	beq	.L10179
	ldr	r5, [r4, #80]
	add	r9, r4, #80
	cmp	r9, r5
	beq	.L10177
.L10178:
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del
	ldr	r3, [r8, #8]
	mov	r1, r5
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #80]
	cmp	r9, r5
	bne	.L10178
.L10177:
	ldr	r3, [r4, #88]
	add	r5, r4, #88
	cmp	r3, r5
	beq	.L10179
	cmp	r3, #0
	beq	.L10179
	mov	r8, #0
	mov	r9, #0
.L10180:
	ldr	r2, [r4, #96]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #96]
	ldm	r3, {r1, r2}
	strd	r8, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #88]
	cmp	r3, r5
	beq	.L10179
	cmp	r3, #0
	bne	.L10180
.L10179:
	mov	r1, r7
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	ghsuart_data_free_buffers.part.47, .-ghsuart_data_free_buffers.part.47
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_remove, %function
ghsuart_data_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #1458
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r4, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, r2]
	tst	r2, #4
	bne	.L10228
.L10194:
	movw	r2, #:lower16:.LANCHOR1
	ldr	r3, [r4, #4]
	movt	r2, #:upper16:.LANCHOR1
	ldr	r1, [r2, #2028]
	cmp	r3, r1
	bcs	.L10229
	mov	r1, #84
	mla	r2, r1, r3, r2
	ldr	r4, [r2, #2032]
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L10197
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L10197
	blx	r3
.L10197:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L10198
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L10198
	blx	r3
.L10198:
	cmp	r4, #0
	beq	.L10199
	mov	r0, r4
	bl	ghsuart_data_free_buffers.part.47
.L10199:
	ldr	r5, [r4, #16]
	cmp	r5, #0
	bne	.L10201
	add	r7, r4, #20
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #24]
	mov	r1, r0
	mov	r0, r7
	str	r5, [r4, #200]
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L10201
	ldr	r3, [r6, #120]
	cmp	r3, #0
	beq	.L10201
	mov	r0, r6
	blx	r3
.L10201:
	movw	r0, #:lower16:.LC868
	add	r5, r4, #188
	ldr	r1, .L10230
	movt	r0, #:upper16:.LC868
	ldr	r2, [r4, #180]
	bl	printk
	mov	r1, r5
	mov	r0, #1
	bl	_clear_bit
	mov	r1, r5
	mov	r0, #0
	bl	_clear_bit
	mov	r0, #2
	mov	r1, r5
	bl	_clear_bit
	mov	r0, #0
.L10193:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10228:
	movw	r1, #:lower16:.LC180
	add	r0, r3, #1440
	ldr	r2, .L10230
	movt	r1, #:upper16:.LC180
	ldr	r3, [r4]
	bl	__dynamic_pr_debug
	b	.L10194
.L10229:
	movw	r0, #:lower16:.LC182
	mov	r2, r3
	ldr	r1, .L10230
	movt	r0, #:upper16:.LC182
	bl	printk
	mvn	r0, #21
	b	.L10193
.L10231:
	.align	2
.L10230:
	.word	.LANCHOR5-1152
	.fnend
	.size	ghsuart_data_remove, .-ghsuart_data_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_free_buffers.part.46, %function
ghsic_data_free_buffers.part.46:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #48
	mov	r0, r6
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r8, [r4, #8]
	mov	r7, r0
	cmp	r8, #0
	beq	.L10242
	ldr	r5, [r4, #24]
	add	r9, r4, #24
	cmp	r9, r5
	beq	.L10234
.L10235:
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del
	ldr	r3, [r8, #8]
	mov	r1, r5
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #24]
	cmp	r9, r5
	bne	.L10235
.L10234:
	ldr	r3, [r4, #32]
	add	r5, r4, #32
	cmp	r5, r3
	beq	.L10236
	cmp	r3, #0
	beq	.L10236
	mov	r8, #0
	mov	r9, #0
.L10237:
	ldr	r2, [r4, #40]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #40]
	ldm	r3, {r1, r2}
	strd	r8, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #32]
	cmp	r3, r5
	beq	.L10236
	cmp	r3, #0
	bne	.L10237
.L10236:
	mov	r1, r7
	mov	r0, r6
	add	r6, r4, #80
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r8, [r4, #12]
	mov	r7, r0
	cmp	r8, #0
	beq	.L10242
	ldr	r5, [r4, #56]
	add	r9, r4, #56
	cmp	r9, r5
	beq	.L10240
.L10241:
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del
	ldr	r3, [r8, #8]
	mov	r1, r5
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #56]
	cmp	r9, r5
	bne	.L10241
.L10240:
	ldr	r3, [r4, #64]
	add	r5, r4, #64
	cmp	r3, r5
	beq	.L10242
	cmp	r3, #0
	beq	.L10242
	mov	r8, #0
	mov	r9, #0
.L10243:
	ldr	r2, [r4, #72]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #72]
	ldm	r3, {r1, r2}
	strd	r8, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #64]
	cmp	r3, r5
	beq	.L10242
	cmp	r3, #0
	bne	.L10243
.L10242:
	mov	r1, r7
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	ghsic_data_free_buffers.part.46, .-ghsic_data_free_buffers.part.46
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_remove, %function
ghsic_data_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #1482
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r3, r2]
	ldr	r6, [r0]
	tst	r3, #4
	bne	.L10305
.L10257:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r7, [r5, #1436]
	cmp	r7, #0
	beq	.L10258
	ldr	r4, [r5, #1440]
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L10259
	cmp	r7, #1
	bls	.L10258
	ldr	r4, [r5, #1544]
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L10259
	cmp	r7, #2
	beq	.L10258
	ldr	r4, [r5, #1648]
	mov	r2, #20
	mov	r1, r6
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L10259
	cmp	r7, #3
	beq	.L10258
	ldr	r4, [r5, #1752]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #160]
	bl	strncmp
	cmp	r0, #0
	beq	.L10259
.L10258:
	movw	r0, #:lower16:.LC182
	mvn	r2, #21
	ldr	r1, .L10306
	movt	r0, #:upper16:.LC182
	bl	printk
	mvn	r0, #21
	b	.L10256
.L10259:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L10262
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L10262
	blx	r3
.L10262:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L10263
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L10263
	blx	r3
.L10263:
	add	r0, r4, #120
	bl	cancel_work_sync
	cmp	r4, #0
	beq	.L10264
	mov	r0, r4
	bl	ghsic_data_free_buffers.part.46
.L10264:
	add	r0, r4, #88
	add	r4, r4, #180
	bl	cancel_work_sync
	mov	r1, r4
	mov	r0, #0
	bl	_test_and_clear_bit
	mov	r0, #1
	mov	r1, r4
	bl	_clear_bit
	mov	r0, #0
.L10256:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10305:
	movw	r1, #:lower16:.LC180
	mov	r4, r0
	ldr	r2, .L10306
	mov	r3, r6
	movt	r1, #:upper16:.LC180
	ldr	r0, .L10306+4
	bl	__dynamic_pr_debug
	ldr	r6, [r4]
	b	.L10257
.L10307:
	.align	2
.L10306:
	.word	.LANCHOR5-1132
	.word	.LANCHOR4+1464
	.fnend
	.size	ghsic_data_remove, .-ghsic_data_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_reset_function_queue, %function
mbim_reset_function_queue:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR4
	movw	r3, #1506
	movt	r4, #:upper16:.LANCHOR4
	mov	r5, r0
	str	r6, [sp, #8]
	ldrh	r3, [r4, r3]
	str	lr, [sp, #12]
	tst	r3, #4
	bne	.L10323
.L10309:
	add	r6, r5, #204
	mov	r0, r6
	bl	_raw_spin_lock
	movw	r3, #:lower16:kmalloc_caches
	mov	r2, #16
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L10310
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L10324
	mov	r1, #16
	mov	r2, #0
	stm	r3, {r1, r2}
.L10311:
	add	r0, r3, #8
	add	r2, r5, #208
	ldr	r1, [r5, #212]
	bl	__list_add
	mov	r0, r6
	bl	_raw_spin_unlock
	movw	r3, #1530
	ldrh	r3, [r4, r3]
	tst	r3, #4
	bne	.L10325
.L10313:
	add	r0, r5, #108
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up
.L10310:
	mov	r3, r2
	str	r2, [r0, #16]
	str	r0, [r0, #20]
	b	.L10311
.L10324:
	mvn	r3, #11
	b	.L10311
.L10323:
	movw	r1, #:lower16:.LC869
	ldr	r2, .L10326
	add	r0, r4, #1488
	movt	r1, #:upper16:.LC869
	bl	__dynamic_pr_debug
	b	.L10309
.L10325:
	ldr	r3, .L10326
	movw	r1, #:lower16:.LC870
	movt	r1, #:upper16:.LC870
	ldr	r0, .L10326+4
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L10313
.L10327:
	.align	2
.L10326:
	.word	.LANCHOR5-1112
	.word	.LANCHOR4+1512
	.fnend
	.size	mbim_reset_function_queue, .-mbim_reset_function_queue
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fmbim_reset_cmd_complete, %function
fmbim_reset_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r1, #32]
	b	mbim_reset_function_queue
	.fnend
	.size	fmbim_reset_cmd_complete, .-fmbim_reset_cmd_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_notify_complete, %function
mbim_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r1]
	ldr	r4, [r1, #32]
	add	r6, r4, #204
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r5, #44]
	cmn	r3, #104
	beq	.L10330
	cmp	r3, #0
	bne	.L10379
	add	r3, r4, #168
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #1554
	movt	r5, #:upper16:.LANCHOR4
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L10380
.L10333:
	movw	r3, #1578
	ldr	r7, [r4, #160]
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L10381
.L10334:
	cmp	r7, #0
	beq	.L10336
	ldrb	r3, [r4, #164]	@ zero_extendqisi2
	ldr	r2, [r7]
	cmp	r3, #0
	beq	.L10337
	cmp	r3, #3
	beq	.L10338
	mvn	r3, #94
	add	r8, r4, #168
	strb	r3, [r2]
	ldrb	r3, [r4, #196]	@ zero_extendqisi2
	strh	r3, [r2, #4]	@ unaligned
	.syntax divided
@ 45 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r3, [r8]
	add	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r3, #1674
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L10382
.L10344:
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r4, #156]
	mov	r1, r7
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r7, #0
	bne	.L10383
.L10336:
	mov	r0, r6
	bl	_raw_spin_unlock
	movw	r3, #1698
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L10384
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10379:
	cmn	r3, #108
	beq	.L10330
	movw	r0, #:lower16:.LC873
	movw	r5, #:lower16:.LANCHOR4
	ldrb	r2, [r7, #1]	@ zero_extendqisi2
	ldr	r1, .L10388
	movt	r0, #:upper16:.LC873
	movt	r5, #:upper16:.LANCHOR4
	bl	printk
	b	.L10333
.L10338:
	movw	r3, #1626
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L10385
.L10342:
	ldr	r3, [r4, #168]
	cmp	r3, #0
	ble	.L10386
	mov	r0, r6
	bl	_raw_spin_unlock
	ldr	r0, [r4, #156]
	mov	r1, r7
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r7, #0
	beq	.L10336
	add	r3, r4, #168
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC879
	mov	r2, r7
	ldr	r1, .L10388+4
	movt	r0, #:upper16:.LC879
	bl	printk
	b	.L10336
.L10337:
	ldr	r3, [r4, #168]
	cmp	r3, #0
	bgt	.L10387
	movw	r3, #1602
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L10336
	movw	r1, #:lower16:.LC876
	ldr	r2, .L10388+4
	movt	r1, #:upper16:.LC876
	ldr	r0, .L10388+8
	bl	__dynamic_pr_debug
	b	.L10336
.L10386:
	movw	r3, #1650
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L10336
	movw	r1, #:lower16:.LC878
	ldr	r2, .L10388+4
	movt	r1, #:upper16:.LC878
	ldr	r0, .L10388+12
	bl	__dynamic_pr_debug
	b	.L10336
.L10384:
	ldr	r3, .L10388
	movw	r1, #:lower16:.LC882
	movt	r1, #:upper16:.LC882
	ldr	r0, .L10388+16
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	mov	r2, r3
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__dynamic_pr_debug
.L10380:
	movw	r1, #:lower16:.LC871
	add	r0, r5, #1536
	ldr	r2, .L10388
	movt	r1, #:upper16:.LC871
	ldr	r3, [r4, #168]
	bl	__dynamic_pr_debug
	b	.L10333
.L10381:
	movw	r1, #:lower16:.LC874
	ldrb	r3, [r4, #164]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC874
	ldr	r2, .L10388+4
	ldr	r0, .L10388+20
	bl	__dynamic_pr_debug
	b	.L10334
.L10383:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC881
	mov	r2, r7
	ldr	r1, .L10388+4
	movt	r0, #:upper16:.LC881
	bl	printk
	b	.L10336
.L10385:
	movw	r1, #:lower16:.LC877
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC877
	ldr	r2, .L10388+4
	ldr	r0, .L10388+24
	bl	__dynamic_pr_debug
	b	.L10342
.L10382:
	movw	r1, #:lower16:.LC880
	ldr	r2, .L10388+4
	movt	r1, #:upper16:.LC880
	ldr	r0, .L10388+28
	ldr	r3, [r4, #168]
	bl	__dynamic_pr_debug
	b	.L10344
.L10330:
	mov	r3, #0
	movw	r0, #:lower16:.LC872
	ldr	r1, .L10388
	movt	r0, #:upper16:.LC872
	movw	r5, #:lower16:.LANCHOR4
	strb	r3, [r4, #164]
	movt	r5, #:upper16:.LANCHOR4
	str	r3, [r4, #168]
	bl	printk
	mov	r0, r6
	bl	_raw_spin_unlock
	mov	r0, r4
	bl	mbim_clear_queues
	mov	r0, r4
	bl	mbim_reset_function_queue
	mov	r0, r6
	bl	_raw_spin_lock
	b	.L10333
.L10387:
	movw	r0, #:lower16:.LC875
	ldr	r1, .L10388+4
	movt	r0, #:upper16:.LC875
	bl	printk
	b	.L10336
.L10389:
	.align	2
.L10388:
	.word	.LANCHOR5-1084
	.word	.LANCHOR5-1060
	.word	.LANCHOR4+1584
	.word	.LANCHOR4+1632
	.word	.LANCHOR4+1680
	.word	.LANCHOR4+1560
	.word	.LANCHOR4+1608
	.word	.LANCHOR4+1656
	.fnend
	.size	mbim_notify_complete, .-mbim_notify_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_suspend, %function
frmnet_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #1722
	mov	r4, r0
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR4
	movt	r6, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	movt	r8, #:upper16:.LANCHOR4
	str	lr, [sp, #32]
	ldrb	ip, [r0, #116]	@ zero_extendqisi2
	.pad #20
	sub	sp, sp, #20
	ldrh	r2, [r8, r3]
	add	r3, ip, ip, lsl #1
	tst	r2, #4
	add	r3, r6, r3, lsl #3
	ldr	r7, [r3, #3240]
	bne	.L10420
.L10391:
	ldr	r0, [r4, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L10393
	blx	r3
.L10393:
	ldr	r0, .L10424
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L10421
.L10394:
	add	r9, r4, #132
	add	r10, r4, #144
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #144]
	mov	fp, r0
	cmp	r10, r5
	beq	.L10395
.L10396:
	sub	r3, r5, #8
	mov	r0, r5
	str	r3, [sp, #12]
	bl	list_del
	ldr	r0, [r5, #-8]
	bl	kfree
	ldr	r3, [sp, #12]
	mov	r0, r3
	bl	kfree
	ldr	r5, [r4, #144]
	cmp	r10, r5
	bne	.L10396
.L10395:
	mov	r3, #0
	mov	r1, fp
	mov	r0, r9
	str	r3, [r4, #152]
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #10
	bhi	.L10397
	mov	r3, #1
	lsl	r3, r3, r7
	tst	r3, #1824
	bne	.L10390
	tst	r3, #192
	beq	.L10397
	sub	r7, r7, #6
	cmp	r7, #1
	bhi	.L10390
	ldrb	r3, [r4, #116]	@ zero_extendqisi2
	movw	r2, #1746
	ldrh	r2, [r8, r2]
	add	r3, r3, r3, lsl #1
	tst	r2, #4
	add	r3, r6, r3, lsl #3
	ldrb	r3, [r3, #3248]	@ zero_extendqisi2
	add	r2, r6, r3, lsl #2
	ldr	r4, [r2, #3860]
	bne	.L10422
.L10399:
	ldr	r0, [r6, #3652]
	add	r1, r4, #316
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work
.L10390:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10421:
	movw	r1, #:lower16:.LC612
	ldrb	r3, [r4, #116]	@ zero_extendqisi2
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC612
	ldr	r2, .L10424+4
	bl	__dynamic_pr_debug
	b	.L10394
.L10420:
	sub	r2, r7, #1
	cmp	r2, #9
	movwhi	r3, #:lower16:.LC186
	movthi	r3, #:upper16:.LC186
	bhi	.L10392
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r3, r3, r2, lsl #2
	ldr	r3, [r3, #1268]
.L10392:
	movw	r1, #:lower16:.LC635
	ldr	r2, .L10424+8
	stm	sp, {r4, ip}
	movt	r1, #:upper16:.LC635
	ldr	r0, .L10424+12
	bl	__dynamic_pr_debug
	b	.L10391
.L10422:
	movw	r1, #:lower16:.LC883
	ldr	r2, .L10424+16
	movt	r1, #:upper16:.LC883
	ldr	r0, .L10424+20
	bl	__dynamic_pr_debug
	b	.L10399
.L10397:
	sub	r7, r7, #1
	cmp	r7, #9
	bls	.L10423
	movw	r2, #:lower16:.LC186
	movt	r2, #:upper16:.LC186
.L10400:
	ldr	r1, .L10424+8
	movw	r0, #:lower16:.LC637
	movt	r0, #:upper16:.LC637
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L10423:
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r7, r3, r7, lsl #2
	ldr	r2, [r7, #1268]
	b	.L10400
.L10425:
	.align	2
.L10424:
	.word	.LANCHOR4-2112
	.word	.LANCHOR5-3676
	.word	.LANCHOR5-1044
	.word	.LANCHOR4+1704
	.word	.LANCHOR5-1028
	.word	.LANCHOR4+1728
	.fnend
	.size	frmnet_suspend, .-frmnet_suspend
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_write, %function
mtp_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	ip, r3
	strd	r6, [sp, #8]
	movw	r3, #1770
	strd	r8, [sp, #16]
	mov	r6, r2
	mov	r8, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r7, [r0, #124]
	mov	r0, ip
	movt	r0, #:upper16:.LANCHOR4
	.pad #60
	sub	sp, sp, #60
	ldrh	r3, [r0, r3]
	str	r2, [sp, #4]
	ldr	r2, [r7, #84]
	str	r0, [sp, #20]
	tst	r3, #4
	str	r2, [sp, #28]
	bne	.L10474
.L10427:
	add	r10, r7, #88
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [r7, #104]
	cmp	r3, #3
	beq	.L10475
	cmp	r3, #0
	beq	.L10476
	mov	r3, #2
	mov	r0, r10
	str	r3, [r7, #104]
	bl	_raw_spin_unlock_irq
	ldr	r3, [r7, #92]
	ldrh	r3, [r3, #20]
	sub	r3, r3, #1
	tst	r3, r6
	moveq	r9, #1
	movne	r9, #0
	orrs	r3, r9, r6
	beq	.L10431
	mov	r3, #57344
	movw	r2, #:lower16:autoremove_wake_function
	movt	r3, 65535
	movt	r2, #:upper16:autoremove_wake_function
	str	r3, [sp, #8]
	str	r2, [sp, #16]
.L10448:
	ldr	r3, [r7, #104]
	cmp	r6, #0
	moveq	r9, #0
	cmp	r3, #2
	bne	.L10477
	mov	r0, r10
	add	fp, r7, #116
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r7, #116]
	mov	r5, r0
	cmp	fp, r4
	beq	.L10478
	mov	r0, r4
	sub	r4, r4, #36
	bl	list_del
	mov	r1, r5
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, #0
	beq	.L10435
.L10436:
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r5, [r3, #1656]
	cmp	r5, r6
	movcc	r3, r5
	movcs	r3, r6
	movcs	r5, r6
	cmp	r3, #0
	beq	.L10444
	ldr	r2, [sp, #8]
	mov	r3, sp
	ldr	r0, [r4]
	and	r3, r3, r2
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r2, r8, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L10479
	mov	r1, r5
	bl	__memzero
	mvn	r3, #13
	str	r3, [sp, #4]
.L10446:
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	mov	r2, fp
	ldr	r1, [r7, #120]
	add	r0, r4, #36
	bl	__list_add
	mov	r1, r5
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
.L10431:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [r7, #104]
	cmp	r3, #3
	beq	.L10456
	cmp	r3, #0
	movne	r3, #1
	strne	r3, [r7, #104]
.L10449:
	mov	r0, r10
	bl	_raw_spin_unlock_irq
	ldr	r2, [sp, #20]
	movw	r3, #1842
	ldrh	r3, [r2, r3]
	tst	r3, #4
	bne	.L10480
.L10426:
	ldr	r0, [sp, #4]
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10479:
	mov	r2, r5
	mov	r1, r8
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L10481
.L10444:
	str	r5, [r4, #4]
	ldr	r0, [r7, #92]
	mov	r2, #208
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L10482
	sub	r6, r6, r5
	add	r8, r8, r5
	orrs	r3, r9, r6
	bne	.L10448
	b	.L10431
.L10478:
	mov	r1, r0
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
.L10435:
	ldr	r3, [r7, #104]
	cmp	r3, #2
	mov	r3, #0
	bne	.L10451
	ldr	r1, [sp, #8]
	mov	r2, sp
	str	r6, [sp, #24]
	str	r3, [sp, #36]
	str	r3, [sp, #40]
	str	r3, [sp, #44]
	and	r5, r2, r1
	add	r1, r7, #144
	str	r3, [sp, #48]
	str	r3, [sp, #52]
	ldr	r3, [r5, #12]
	add	r2, sp, #48
	str	r1, [sp, #12]
	ldr	r1, [sp, #16]
	str	r3, [sp, #40]
	str	r1, [sp, #44]
	str	r2, [sp, #48]
	str	r2, [sp, #52]
.L10441:
	mov	r2, #1
	add	r1, sp, #36
	ldr	r0, [sp, #12]
	bl	prepare_to_wait
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r7, #116]
	mov	r4, r0
	cmp	fp, r3
	mov	r0, r3
	sub	r6, r3, #36
	beq	.L10483
	bl	list_del
	mov	r1, r4
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	bne	.L10439
.L10438:
	ldr	r3, [r7, #104]
	cmp	r3, #2
	bne	.L10452
	ldr	r3, [r5, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L10484
	mov	r3, #65024
	movt	r3, 65535
	str	r3, [sp, #4]
.L10440:
	add	r1, sp, #36
	ldr	r0, [sp, #12]
	bl	finish_wait
	b	.L10431
.L10451:
	str	r3, [sp, #4]
	b	.L10431
.L10483:
	mov	r1, r4
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	b	.L10438
.L10484:
	bl	schedule
	b	.L10441
.L10456:
	mvn	r3, #124
	str	r3, [sp, #4]
	b	.L10449
.L10477:
	ldr	r2, [sp, #20]
	movw	r3, #1794
	ldrh	r3, [r2, r3]
	tst	r3, #4
	mvneq	r3, #4
	streq	r3, [sp, #4]
	beq	.L10431
	ldr	r3, [sp, #28]
	movw	r2, #:lower16:.LC885
	movt	r2, #:upper16:.LC885
	ldr	r0, .L10485
	ldr	r1, [r3]
	mvn	r3, #4
	str	r3, [sp, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L10431
.L10482:
	ldr	r2, [sp, #20]
	movw	r3, #1818
	ldrh	r3, [r2, r3]
	tst	r3, #4
	mvneq	r3, #4
	streq	r3, [sp, #4]
	beq	.L10446
	ldr	r3, [sp, #28]
	mvn	ip, #4
	movw	r2, #:lower16:.LC886
	movt	r2, #:upper16:.LC886
	str	ip, [sp, #4]
	ldr	r1, [r3]
	mov	r3, r0
	ldr	r0, .L10485+4
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L10446
.L10439:
	add	r1, sp, #36
	ldr	r0, [sp, #12]
	mov	r4, r6
	ldr	r6, [sp, #24]
	bl	finish_wait
	b	.L10436
.L10474:
	mov	r3, r2
	movw	r2, #:lower16:.LC884
	ldr	r0, .L10485+8
	ldr	r1, [r3]
	movt	r2, #:upper16:.LC884
	mov	r3, r6
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L10427
.L10480:
	ldr	r3, [sp, #28]
	movw	r2, #:lower16:.LC887
	movt	r2, #:upper16:.LC887
	ldr	r0, .L10485+12
	ldr	r1, [r3]
	ldr	r3, [sp, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L10426
.L10452:
	mov	r3, #0
	str	r3, [sp, #4]
	b	.L10440
.L10476:
	mvn	r3, #18
	mov	r0, r10
	str	r3, [sp, #4]
	bl	_raw_spin_unlock_irq
	b	.L10426
.L10475:
	mov	r3, #1
	mvn	r2, #124
	mov	r0, r10
	str	r3, [r7, #104]
	str	r2, [sp, #4]
	bl	_raw_spin_unlock_irq
	b	.L10426
.L10481:
	mvn	r3, #13
	str	r3, [sp, #4]
	b	.L10446
.L10486:
	.align	2
.L10485:
	.word	.LANCHOR4+1776
	.word	.LANCHOR4+1800
	.word	.LANCHOR4+1752
	.word	.LANCHOR4+1824
	.fnend
	.size	mtp_write, .-mtp_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_write, %function
conn_gadget_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r3, #2484]
	.pad #60
	sub	sp, sp, #60
	ldr	r5, [r0, #124]
	str	r1, [sp, #16]
	str	r2, [sp, #24]
	cmp	r3, #0
	beq	.L10527
	add	r3, r5, #112
	str	r3, [sp, #28]
	.syntax divided
@ 61 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r1, r3
	.syntax divided
@ 63 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r1]
	add	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L10528
	mov	fp, #57344
	ldr	r9, [sp, #24]
	movw	r3, #:lower16:autoremove_wake_function
	movt	fp, 65535
	movt	r3, #:upper16:autoremove_wake_function
	mov	r10, fp
	str	r3, [sp, #20]
.L10490:
	cmp	r9, #0
	beq	.L10511
	ldr	r3, [r5, #104]
	cmp	r3, #0
	bne	.L10495
	mov	r3, sp
	add	r7, r5, #120
	add	r6, r5, #88
	and	r8, r3, r10
.L10512:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #120]
	mov	fp, r0
	cmp	r7, r4
	beq	.L10529
	mov	r0, r4
	sub	r4, r4, #36
	bl	list_del
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r4, #0
	beq	.L10493
.L10494:
	ldr	r8, [r5, #192]
	mov	r3, sp
	and	r3, r3, r10
	ldr	r0, [r4]
	ldr	r3, [r3, #8]
	ldr	r1, [sp, #16]
	cmp	r8, r9
	bcc	.L10502
	.syntax divided
@ 439 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r2, r1, r9; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L10504
	mov	r8, r9
.L10503:
	mov	r2, r8
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L10506
.L10507:
	str	r8, [r4, #4]
	ldr	r0, [r5, #92]
	mov	r2, #32
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L10530
	ldr	r3, [sp, #16]
	sub	r9, r9, r8
	add	r3, r3, r8
	str	r3, [sp, #16]
	b	.L10490
.L10529:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L10493:
	ldr	r3, [r5, #104]
	cmp	r3, #0
	beq	.L10531
.L10495:
	movw	r0, #:lower16:.LC889
	ldr	r1, .L10535
	mvn	r8, #4
	movt	r0, #:upper16:.LC889
	bl	printk
.L10491:
	ldr	r1, [sp, #28]
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
.L10487:
	mov	r0, r8
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10531:
	ldr	r1, [sp, #20]
	add	r2, sp, #48
	add	fp, r5, #156
	str	r3, [sp, #36]
	str	r3, [sp, #40]
	str	r3, [sp, #44]
	str	r3, [sp, #48]
	str	r3, [sp, #52]
	ldr	r3, [r8, #12]
	str	r9, [sp, #12]
	str	r3, [sp, #40]
	str	r1, [sp, #44]
	str	r2, [sp, #48]
	str	r2, [sp, #52]
.L10501:
	mov	r2, #1
	add	r1, sp, #36
	mov	r0, fp
	bl	prepare_to_wait
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #120]
	mov	r4, r0
	cmp	r7, r3
	mov	r0, r3
	sub	r9, r3, #36
	beq	.L10532
	bl	list_del
	mov	r1, r4
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r9, #0
	bne	.L10498
.L10497:
	ldr	r3, [r5, #104]
	cmp	r3, #0
	bne	.L10499
	ldr	r3, [r8, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L10533
	add	r1, sp, #36
	mov	r0, fp
	bl	finish_wait
	mov	r2, #65024
	movw	r0, #:lower16:.LC893
	ldr	r1, .L10535
	movt	r2, 65535
	movt	r0, #:upper16:.LC893
	mov	r8, #65024
	bl	printk
	movt	r8, 65535
	b	.L10491
.L10499:
	add	r1, sp, #36
	mov	r0, fp
	ldr	r9, [sp, #12]
	bl	finish_wait
	ldr	r3, [r5, #104]
	cmp	r3, #0
	beq	.L10512
	b	.L10495
.L10532:
	mov	r1, r4
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L10497
.L10511:
	ldr	r8, [sp, #24]
	b	.L10491
.L10533:
	bl	schedule
	b	.L10501
.L10502:
	.syntax divided
@ 439 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r2, r1, r8; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L10503
	cmp	r8, #0
	beq	.L10507
	mov	r9, r8
.L10504:
	mov	r1, r9
	bl	__memzero
.L10506:
	movw	r0, #:lower16:.LC890
	ldr	r1, .L10535
	movw	r9, #:lower16:.LANCHOR4
	movt	r0, #:upper16:.LC890
	movt	r9, #:upper16:.LANCHOR4
	bl	printk
	mvn	r8, #13
	b	.L10508
.L10528:
	ldr	r1, [sp, #28]
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r1]
	sub	r3, r3, #1
	strex	r2, r3, [r1]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC888
	ldr	r1, .L10535
	mvn	r8, #15
	movt	r0, #:upper16:.LC888
	bl	printk
	b	.L10487
.L10498:
	add	r1, sp, #36
	mov	r0, fp
	mov	r4, r9
	ldr	r9, [sp, #12]
	bl	finish_wait
	b	.L10494
.L10530:
	movw	r9, #:lower16:.LANCHOR4
	movw	r3, #1866
	movt	r9, #:upper16:.LANCHOR4
	mov	r2, #1
	ldrh	r3, [r9, r3]
	mov	r8, r0
	str	r2, [r5, #104]
	tst	r3, #4
	beq	.L10510
	ldr	r3, .L10535
	movw	r1, #:lower16:.LC251
	str	r2, [sp]
	movt	r1, #:upper16:.LC251
	ldr	r0, .L10535+4
	mov	r2, r3
	bl	__dynamic_pr_debug
.L10510:
	movw	r0, #:lower16:.LC891
	mov	r2, r8
	ldr	r1, .L10535
	movt	r0, #:upper16:.LC891
	mvn	r8, #4
	bl	printk
.L10508:
	movw	r3, #1890
	ldrh	r3, [r9, r3]
	tst	r3, #4
	bne	.L10534
.L10514:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r2, r7
	ldr	r1, [r5, #124]
	add	r0, r4, #36
	bl	__list_add
	mov	r1, r9
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L10491
.L10527:
	movw	r0, #:lower16:.LC450
	ldr	r1, .L10535
	mvn	r8, #18
	movt	r0, #:upper16:.LC450
	bl	printk
	b	.L10487
.L10534:
	ldr	r3, .L10535
	movw	r1, #:lower16:.LC892
	movt	r1, #:upper16:.LC892
	ldr	r0, .L10535+8
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L10514
.L10536:
	.align	2
.L10535:
	.word	.LANCHOR5-1012
	.word	.LANCHOR4+1848
	.word	.LANCHOR4+1872
	.fnend
	.size	conn_gadget_write, .-conn_gadget_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_setup, %function
fsg_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #88]
	ldrh	lr, [r1, #4]	@ unaligned
	ldrh	r6, [r1, #2]	@ unaligned
	ldrh	r5, [r1, #6]	@ unaligned
	ldr	r2, [r3, #8]
	ldr	r0, [r3, #52]
	cmp	r2, #0
	beq	.L10538
	ldr	r2, [r3, #56]
	mov	ip, #0
	add	r2, r2, #1
	str	r2, [r3, #56]
	str	ip, [r0, #4]
	str	ip, [r0, #32]
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	cmp	r3, #254
	beq	.L10539
	cmp	r3, #255
	bne	.L10550
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r3, #33
	bne	.L10550
	ldrh	r3, [r4, #92]
	cmp	r3, lr
	bne	.L10552
	orrs	r3, r6, r5
	bne	.L10552
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #1914
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L10563
.L10542:
	ldr	r5, [r4, #88]
	add	r6, r5, #44
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #112]
	mov	r7, r0
	cmp	r3, #2
	bgt	.L10544
	ldr	r3, [r5, #56]
	mov	r1, #2
	ldr	r2, [r5, #168]
	str	r1, [r5, #112]
	str	r3, [r5, #116]
	cmp	r2, #0
	beq	.L10544
	mov	r0, #10
	bl	send_sig_info
.L10544:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [r4, #88]
	movw	r3, #1255
	movw	r4, #32767
	ldr	r2, [r2, #4]
	cmp	r2, #0
	moveq	r4, r3
	b	.L10537
.L10550:
	mvn	r4, #94
.L10537:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10539:
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r3, #161
	bne	.L10550
	ldrh	r3, [r4, #92]
	cmp	r3, lr
	bne	.L10552
	cmp	r5, #1
	cmpeq	r6, #0
	bne	.L10552
	ldr	r3, [r4, #88]
	mov	r1, #1
	mov	r2, #32
	ldr	ip, [r0]
	ldr	r3, [r3, #92]
	sub	r3, r3, #1
	strb	r3, [ip]
	str	r1, [r0, #4]
	ldr	r5, [r4, #88]
	ldrd	r0, [r5, #48]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	ldr	r3, [r5, #48]
	cmp	r0, #0
	cmnne	r0, #108
	mov	r4, r0
	str	r5, [r3]
	beq	.L10537
	mov	r3, r0
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC89
	ldr	r2, [r5, #48]
	movt	r1, #:upper16:.LC89
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_warn
	b	.L10537
.L10538:
	ldr	r0, [r3]
	movw	r1, #:lower16:.LC87
	movw	r3, #706
	movt	r1, #:upper16:.LC87
	ldr	r2, .L10564
	mvn	r4, #94
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC88
	movw	r1, #550
	movt	r0, #:upper16:.LC88
	bl	warn_slowpath_null
	b	.L10537
.L10563:
	ldr	r1, [r4, #84]
	movw	r2, #:lower16:.LC894
	movt	r2, #:upper16:.LC894
	ldr	r0, .L10564+4
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L10542
.L10552:
	mvn	r4, #32
	b	.L10537
.L10565:
	.align	2
.L10564:
	.word	.LANCHOR5-992
	.word	.LANCHOR4+1896
	.fnend
	.size	fsg_setup, .-fsg_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	transport_store, %function
transport_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r7, #2480]
	.pad #44
	sub	sp, sp, #44
	str	r3, [sp, #4]
	ldr	r3, [r4, #368]
	cmp	r3, #0
	beq	.L10684
	movw	r1, #:lower16:.LC452
	mov	r0, r2
	movt	r1, #:upper16:.LC452
	add	r2, sp, #16
	bl	sscanf
	ldr	r1, [sp, #16]
	movw	r3, #:lower16:.LC626
	movw	r2, #:lower16:.LC627
	ldr	r8, [r4, #360]
	movt	r3, #:upper16:.LC626
	movt	r2, #:upper16:.LC627
	cmp	r1, #0
	movne	r5, #2
	moveq	r5, #3
	movne	r2, r3
	cmp	r8, r5
	beq	.L10685
	movw	r6, #:lower16:.LANCHOR4
	movw	r3, #1938
	movt	r6, #:upper16:.LANCHOR4
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L10686
.L10571:
	mov	r3, #0
	cmp	r8, #0
	str	r3, [r4, #360]
	beq	.L10572
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L10573
	blx	r3
.L10573:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L10574
	blx	r3
.L10574:
	cmp	r8, #2
	bne	.L10687
	add	r3, r4, #364
	add	r9, r4, #192
	mov	r0, r3
	mov	r8, #0
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r10, [r4, #192]
	str	r0, [sp, #8]
	str	r8, [r4, #308]
	cmp	r9, r10
	beq	.L10580
.L10577:
	mov	r0, r10
	sub	fp, r10, #36
	bl	list_del
	str	r8, [r10, #-36]
	ldr	r10, [r4, #88]
	mov	r0, #0
	bl	kfree
	mov	r1, fp
	ldr	r2, [r10, #8]
	mov	r0, r10
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r10, [r4, #192]
	cmp	r9, r10
	bne	.L10577
.L10580:
	ldr	r10, [r4, #216]
	add	r8, r4, #216
	cmp	r8, r10
	beq	.L10579
	mov	r9, #0
.L10578:
	mov	r0, r10
	sub	fp, r10, #36
	bl	list_del
	str	r9, [r10, #-36]
	ldr	r10, [r4, #92]
	mov	r0, #0
	bl	kfree
	mov	r1, fp
	ldr	r2, [r10, #8]
	mov	r0, r10
	ldr	r3, [r2, #12]
	blx	r3
	ldr	r10, [r4, #216]
	cmp	r10, r8
	bne	.L10578
.L10579:
	ldr	r3, [r4, #200]
	add	r8, r4, #200
	cmp	r8, r3
	beq	.L10581
	cmp	r3, #0
	beq	.L10581
	mov	r10, #0
	mov	fp, #0
.L10585:
	ldr	r2, [r4, #208]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #208]
	ldm	r3, {r1, r2}
	strd	r10, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #200]
	cmp	r8, r3
	beq	.L10581
	cmp	r3, #0
	bne	.L10585
.L10581:
	ldr	r3, [r4, #224]
	add	r10, r4, #224
	cmp	r10, r3
	beq	.L10595
	cmp	r3, #0
	beq	.L10595
	mov	r8, #0
	mov	r9, #0
.L10588:
	ldr	r2, [r4, #232]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #232]
	ldr	ip, [r3]
	ldr	r2, [r3, #4]
	strd	r8, [r3]
	str	r2, [ip, #4]
	str	ip, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #224]
	cmp	r10, r3
	beq	.L10595
	cmp	r3, #0
	bne	.L10588
.L10595:
	ldr	r1, [sp, #8]
	ldr	r0, [sp, #12]
	bl	_raw_spin_unlock_irqrestore
.L10694:
	cmp	r5, #2
	str	r5, [r4, #360]
	beq	.L10624
.L10693:
	cmp	r5, #3
	bne	.L10688
	ldr	r3, [r4, #172]
	tst	r3, #1
	bne	.L10609
	movw	r3, #:lower16:rmnet_mux_smd_notify
	mov	r2, r4
	ldr	r0, [r7, #3988]
	movt	r3, #:upper16:rmnet_mux_smd_notify
	add	r1, r4, #128
	ldr	r5, [r4, #84]
	bl	smd_open
	cmp	r0, #0
	bne	.L10689
	ldr	r3, [r4, #172]
	ands	r3, r3, #1
	bne	.L10609
	mov	r2, sp
	str	r3, [sp, #20]
	add	r5, r4, #180
	bic	r1, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	r1, r1, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r1, #12]
	add	r1, sp, #32
	str	r0, [sp, #24]
	str	r2, [sp, #28]
	str	r1, [sp, #32]
	str	r1, [sp, #36]
	b	.L10613
.L10690:
	bl	schedule
.L10613:
	mov	r2, #2
	add	r1, sp, #20
	mov	r0, r5
	bl	prepare_to_wait
	ldr	r3, [r4, #172]
	tst	r3, #1
	beq	.L10690
	add	r1, sp, #20
	mov	r0, r5
	bl	finish_wait
.L10609:
	movw	r9, #:lower16:kmalloc_caches
	movw	r8, #:lower16:rmnet_mux_smd_complete_epout
	movt	r9, #:upper16:kmalloc_caches
	movt	r8, #:upper16:rmnet_mux_smd_complete_epout
	mov	r7, #8
.L10616:
	ldr	r6, [r4, #88]
	mov	r1, #208
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	mov	r2, #2048
	bne	.L10691
.L10600:
	ldr	r0, [sp, #4]
.L10566:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10572:
	movw	r3, #1962
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L10692
.L10587:
	cmp	r5, #2
	str	r5, [r4, #360]
	bne	.L10693
.L10624:
	movw	r7, #:lower16:rmnet_mux_sdio_complete_epout
	mov	r5, #16
	movt	r7, #:upper16:rmnet_mux_sdio_complete_epout
	add	r8, r4, #216
.L10596:
	ldr	r0, [r4, #88]
	mov	r1, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r8
	add	r0, r3, #36
	beq	.L10600
	cmn	r3, #4096
	bhi	.L10600
	str	r7, [r3, #28]
	ldr	r1, [r4, #220]
	bl	__list_add
	subs	r5, r5, #1
	bne	.L10596
	movw	r7, #:lower16:rmnet_mux_sdio_complete_epin
	mov	r5, #100
	movt	r7, #:upper16:rmnet_mux_sdio_complete_epin
	add	r9, r4, #192
.L10602:
	ldr	r0, [r4, #92]
	mov	r1, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r9
	add	r0, r3, #36
	beq	.L10600
	cmn	r3, #4096
	bhi	.L10600
	str	r7, [r3, #28]
	ldr	r1, [r4, #196]
	bl	__list_add
	subs	r5, r5, #1
	bne	.L10602
	ldr	r3, [r4, #368]
	cmp	r3, #0
	bne	.L10603
	movw	r3, #1986
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L10600
	movw	r1, #:lower16:.LC899
	ldr	r2, .L10696
	movt	r1, #:upper16:.LC899
	ldr	r0, .L10696+4
	bl	__dynamic_pr_debug
	b	.L10600
.L10687:
	cmp	r8, #3
	bne	.L10572
	add	r3, r4, #364
	add	r0, r4, #152
	mov	r9, r3
	add	r8, r4, #104
	str	r3, [sp, #12]
	bl	tasklet_kill
	add	r0, r4, #132
	bl	tasklet_kill
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	fp, [r4, #104]
	str	r0, [sp, #8]
	cmp	r8, fp
	beq	.L10593
.L10590:
	mov	r0, fp
	sub	r10, fp, #36
	bl	list_del
	ldr	r9, [r4, #88]
	ldr	r0, [fp, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r9, #8]
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	fp, [r4, #104]
	cmp	r8, fp
	bne	.L10590
.L10593:
	ldr	fp, [r4, #112]
	add	r8, r4, #112
	cmp	r8, fp
	beq	.L10592
.L10591:
	mov	r0, fp
	sub	r10, fp, #36
	bl	list_del
	ldr	r9, [r4, #92]
	ldr	r0, [fp, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r3, [r9, #8]
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	fp, [r4, #112]
	cmp	r8, fp
	bne	.L10591
.L10592:
	ldr	fp, [r4, #120]
	add	r8, r4, #120
	cmp	r8, fp
	beq	.L10595
.L10594:
	mov	r0, fp
	sub	r9, fp, #36
	bl	list_del
	ldr	r10, [r4, #92]
	ldr	r0, [fp, #-36]
	bl	kfree
	mov	r1, r9
	ldr	r3, [r10, #8]
	mov	r0, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	fp, [r4, #120]
	cmp	r8, fp
	bne	.L10594
	ldr	r1, [sp, #8]
	ldr	r0, [sp, #12]
	bl	_raw_spin_unlock_irqrestore
	b	.L10694
.L10691:
	str	r2, [r5, #4]
	ldr	r3, [r9, #44]
	mov	ip, #16
	mov	r1, #208
	subs	r0, r3, #0
	streq	ip, [r5]
	beq	.L10615
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L10615
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L10600
.L10615:
	cmn	r5, #4096
	mov	r6, #2048
	add	r2, r4, #112
	add	r0, r5, #36
	bhi	.L10600
	str	r6, [r5, #4]
	str	r8, [r5, #28]
	str	r4, [r5, #32]
	ldr	r1, [r4, #116]
	bl	__list_add
	subs	r7, r7, #1
	bne	.L10616
	movw	r8, #:lower16:rmnet_mux_smd_complete_epin
	mov	fp, #8
	movt	r8, #:upper16:rmnet_mux_smd_complete_epin
.L10619:
	ldr	r7, [r4, #92]
	mov	r1, #208
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L10600
	str	r6, [r5, #4]
	ldr	r3, [r9, #44]
	mov	ip, #16
	mov	r2, #2048
	mov	r1, #208
	subs	r0, r3, #0
	streq	ip, [r5]
	beq	.L10618
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L10618
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L10600
.L10618:
	cmn	r5, #4096
	add	r2, r4, #104
	add	r0, r5, #36
	bhi	.L10600
	str	r8, [r5, #28]
	str	r4, [r5, #32]
	ldr	r1, [r4, #108]
	bl	__list_add
	subs	fp, fp, #1
	bne	.L10619
	mov	r0, r4
	bl	rmnet_mux_smd_start_rx
	b	.L10600
.L10686:
	movw	r1, #:lower16:.LC897
	add	r0, r6, #1920
	movt	r1, #:upper16:.LC897
	bl	__dynamic_pr_debug
	ldr	r8, [r4, #360]
	b	.L10571
.L10689:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC241
	movt	r1, #:upper16:.LC241
	add	r0, r0, #32
	bl	dev_err
	b	.L10600
.L10692:
	movw	r1, #:lower16:.LC898
	ldr	r2, .L10696+8
	movt	r1, #:upper16:.LC898
	ldr	r0, .L10696+12
	bl	__dynamic_pr_debug
	b	.L10587
.L10603:
	ldr	r10, [r4, #84]
	add	r7, r4, #364
	mov	r0, r7
.L10683:
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #216]
	mov	fp, r0
	cmp	r8, r5
	beq	.L10604
	mov	r0, r5
	sub	r6, r5, #36
	bl	list_del
	mov	r1, fp
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r2, #0
	mov	r1, #208
	mvn	r3, #0
	movw	r0, #2056
	bl	__alloc_skb
	mov	r1, r6
	subs	r6, r0, #0
	mov	ip, #2048
	mov	r2, #208
	beq	.L10695
	ldr	r0, [r6, #160]
	ldr	r3, [r6, #172]
	add	r0, r0, #8
	add	r3, r3, #8
	str	r0, [r6, #160]
	str	r3, [r6, #172]
	str	r3, [r5, #-36]
	str	ip, [r5, #-32]
	str	r6, [r5, #-4]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r9, r0, #0
	mov	r0, r7
	beq	.L10683
	mov	r0, r6
	bl	dev_kfree_skb_any
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
.L10606:
	ldr	r0, [r10]
	movw	r1, #:lower16:.LC777
	mov	r2, r9
	movt	r1, #:upper16:.LC777
	add	r0, r0, #32
	bl	dev_err
	mov	r2, r8
	mov	r0, r5
	ldr	r1, [r4, #220]
	bl	__list_add
.L10604:
	mov	r1, fp
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L10600
.L10695:
	mov	r0, r7
	mvn	r9, #11
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	b	.L10606
.L10688:
	movw	r0, #:lower16:.LC900
	ldr	r1, .L10696+8
	movt	r0, #:upper16:.LC900
	bl	printk
	b	.L10600
.L10684:
	movw	r0, #:lower16:.LC895
	ldr	r1, .L10696+8
	movt	r0, #:upper16:.LC895
	bl	printk
	mvn	r0, #21
	b	.L10566
.L10685:
	movw	r0, #:lower16:.LC896
	mov	r3, r2
	ldr	r1, .L10696+8
	movt	r0, #:upper16:.LC896
	bl	printk
	mov	r0, #0
	b	.L10566
.L10697:
	.align	2
.L10696:
	.word	.LANCHOR5-964
	.word	.LANCHOR4+1968
	.word	.LANCHOR5-980
	.word	.LANCHOR4+1944
	.fnend
	.size	transport_store, .-transport_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_unbind, %function
diag_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L10714
	cmp	r3, #2
	bhi	.L10715
.L10700:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r3, [r4, #124]
	cmp	r3, #0
	beq	.L10701
	ldr	r2, [r3, #20]
	cmp	r2, r4
	moveq	r2, #0
	streq	r2, [r3, #20]
.L10701:
	add	r0, r4, #140
	add	r7, r4, #108
	bl	list_del
	mov	r9, r4
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r9, #100]!
	mov	r8, r0
	cmp	r5, r9
	ldr	r6, [r5]
	beq	.L10705
.L10702:
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del
	ldr	r0, [r4, #88]
	mov	r1, r5
	mov	r5, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r9, r6
	ldr	r6, [r6]
	bne	.L10702
.L10705:
	mov	r9, r4
	ldr	r5, [r9, #92]!
	cmp	r5, r9
	ldr	r6, [r5]
	beq	.L10704
.L10703:
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del
	ldr	r0, [r4, #84]
	mov	r1, r5
	mov	r5, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r9, r6
	ldr	r6, [r6]
	bne	.L10703
.L10704:
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	kfree
.L10714:
	mov	r5, r0
	ldr	r0, [r1, #12]
	bl	kfree
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L10700
.L10715:
	ldr	r0, [r4, #8]
	bl	kfree
	b	.L10700
	.fnend
	.size	diag_function_unbind, .-diag_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_ctrl_queue_notify, %function
rmnet_ctrl_queue_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #2010
	movt	r5, #:upper16:.LANCHOR4
	mov	r4, r0
	strd	r6, [sp, #8]
	ldrh	r3, [r5, r3]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	tst	r3, #4
	bne	.L10732
.L10717:
	add	r6, r4, #52
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r4, #4]	@ zero_extendqisi2
	mov	r7, r0
	cmp	r3, #0
	beq	.L10733
	movw	r3, #:lower16:kmalloc_caches
	mov	r2, #16
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L10719
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L10734
	mov	r1, #16
	mov	r2, #0
	stm	r3, {r1, r2}
.L10720:
	add	r0, r3, #8
	add	r2, r4, #44
	ldr	r1, [r4, #48]
	bl	__list_add
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #2034
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L10735
.L10722:
	add	r0, r4, #32
	mov	r3, #0
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up
.L10719:
	mov	r3, r2
	str	r2, [r0, #16]
	str	r0, [r0, #20]
	b	.L10720
.L10734:
	mvn	r3, #11
	b	.L10720
.L10732:
	movw	r1, #:lower16:.LC901
	ldr	r2, .L10736
	movt	r1, #:upper16:.LC901
	ldr	r0, .L10736+4
	bl	__dynamic_pr_debug
	b	.L10717
.L10735:
	movw	r1, #:lower16:.LC249
	ldr	r2, .L10736
	movt	r1, #:upper16:.LC249
	ldr	r0, .L10736+8
	bl	__dynamic_pr_debug
	b	.L10722
.L10733:
	movw	r0, #:lower16:.LC902
	mov	r2, r4
	ldr	r1, .L10736
	movt	r0, #:upper16:.LC902
	bl	printk
	mov	r1, r7
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L10737:
	.align	2
.L10736:
	.word	.LANCHOR5-940
	.word	.LANCHOR4+1992
	.word	.LANCHOR4+2016
	.fnend
	.size	rmnet_ctrl_queue_notify, .-rmnet_ctrl_queue_notify
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_notify_modem, %function
gqti_ctrl_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #3228]
	mov	r0, r3
	str	r2, [r3, #12]
	b	rmnet_ctrl_queue_notify
	.fnend
	.size	gqti_ctrl_notify_modem, .-gqti_ctrl_notify_modem
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_send_break, %function
acm_send_break:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	cmp	r1, #0
	strd	r6, [sp, #8]
	movw	r6, #:lower16:__stack_chk_guard
	add	r7, r0, #148
	strd	r8, [sp, #16]
	movt	r6, #:upper16:__stack_chk_guard
	str	r10, [sp, #24]
	ldr	r2, [r6]
	str	lr, [sp, #28]
	ldrh	r3, [r0, #170]
	.pad #24
	sub	sp, sp, #24
	mov	r0, r7
	str	r2, [sp, #20]
	ldr	r2, [r4, #20]
	bic	r3, r3, #4
	uxth	r3, r3
	orrne	r3, r3, #4
	strh	r3, [r4, #170]	@ movhi
	ldr	r5, [r2, #24]
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	ldr	r0, [r4, #156]
	cmp	r0, #0
	moveq	r3, #1
	moveq	r5, r0
	strbeq	r3, [r4, #147]
	bne	.L10753
.L10744:
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [sp, #20]
	mov	r0, r5
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L10754
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10753:
	ldr	r0, .L10755
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L10742
	ldrh	ip, [r4, #170]
	movw	r2, #:lower16:.LC686
	sub	r0, r0, #24
	ldr	r1, [r5]
	movt	r2, #:upper16:.LC686
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L10742:
	movw	r0, #:lower16:.LC687
	ldrh	r2, [r4, #170]
	mov	r5, #32
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC687
	bl	printk
	add	r0, sp, #10
	mov	r1, #10
	ldr	r10, [r4, #152]
	bl	__memzero
	ldr	r9, [r4, #156]
	mov	r2, #0
	mov	r0, #10
	mvn	r1, #94
	mov	ip, #2
	strb	r2, [r4, #147]
	str	r2, [r4, #156]
	ldr	r3, [r9]
	str	r0, [r9, #4]
	mov	r0, r7
	strb	r1, [r3]
	strb	r5, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	ldrb	r1, [r4, #144]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	r2, [r3, #7]
	ldrh	ip, [r4, #170]	@ unaligned
	ldr	r1, [sp, #14]	@ unaligned
	strh	ip, [sp, #10]	@ movhi
	ldr	ip, [sp, #10]	@ unaligned
	str	ip, [r3, #8]	@ unaligned
	str	r1, [r3, #12]	@ unaligned
	ldrh	r1, [sp, #18]	@ unaligned
	strh	r1, [r3, #16]	@ unaligned
	ldrh	r2, [r4, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock
	ldr	r3, [r10, #8]
	mov	r2, r5
	mov	r1, r9
	mov	r0, r10
	ldr	r3, [r3, #16]
	blx	r3
	mov	r5, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	r5, #0
	bge	.L10744
	ldr	r0, [r4, #20]
	movw	r1, #:lower16:.LC688
	mov	r3, r5
	movt	r1, #:upper16:.LC688
	ldrb	r2, [r4, #146]	@ zero_extendqisi2
	ldr	r0, [r0, #24]
	ldr	r0, [r0]
	add	r0, r0, #32
	bl	dev_err
	str	r9, [r4, #156]
	b	.L10744
.L10754:
	bl	__stack_chk_fail
.L10756:
	.align	2
.L10755:
	.word	.LANCHOR4-1056
	.fnend
	.size	acm_send_break, .-acm_send_break
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_connect, %function
acm_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r5, #:lower16:__stack_chk_guard
	mov	r4, r0
	strd	r6, [sp, #8]
	movt	r5, #:upper16:__stack_chk_guard
	add	r6, r0, #148
	strd	r8, [sp, #16]
	ldr	r1, [r5]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r0, #170]
	.pad #24
	sub	sp, sp, #24
	ldr	r2, [r4, #20]
	mov	r0, r6
	str	r1, [sp, #20]
	orr	r3, r3, #3
	strh	r3, [r4, #170]	@ movhi
	ldr	r8, [r2, #24]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #156]
	mov	r7, r0
	cmp	r3, #0
	moveq	r3, #1
	strbeq	r3, [r4, #147]
	bne	.L10767
.L10761:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [sp, #20]
	ldr	r3, [r5]
	cmp	r2, r3
	bne	.L10768
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10767:
	ldr	r0, .L10769
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L10759
	ldrh	ip, [r4, #170]
	movw	r2, #:lower16:.LC686
	sub	r0, r0, #24
	ldr	r1, [r8]
	movt	r2, #:upper16:.LC686
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L10759:
	movw	r0, #:lower16:.LC687
	ldrh	r2, [r4, #170]
	mov	r9, #32
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC687
	bl	printk
	add	r0, sp, #10
	mov	r1, #10
	ldr	r10, [r4, #152]
	bl	__memzero
	ldr	r8, [r4, #156]
	mov	r2, #0
	mov	r0, #10
	mvn	r1, #94
	mov	ip, #2
	strb	r2, [r4, #147]
	str	r2, [r4, #156]
	ldr	r3, [r8]
	str	r0, [r8, #4]
	mov	r0, r6
	strb	r1, [r3]
	strb	r9, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	ldrb	r1, [r4, #144]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	r2, [r3, #7]
	ldrh	ip, [r4, #170]	@ unaligned
	ldr	r1, [sp, #14]	@ unaligned
	strh	ip, [sp, #10]	@ movhi
	ldr	ip, [sp, #10]	@ unaligned
	str	ip, [r3, #8]	@ unaligned
	str	r1, [r3, #12]	@ unaligned
	ldrh	r1, [sp, #18]	@ unaligned
	strh	r1, [r3, #16]	@ unaligned
	ldrh	r2, [r4, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock
	ldr	r3, [r10, #8]
	mov	r2, r9
	mov	r1, r8
	mov	r0, r10
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r9, #0
	bge	.L10761
	ldr	r0, [r4, #20]
	movw	r1, #:lower16:.LC688
	mov	r3, r9
	movt	r1, #:upper16:.LC688
	ldrb	r2, [r4, #146]	@ zero_extendqisi2
	ldr	r0, [r0, #24]
	ldr	r0, [r0]
	add	r0, r0, #32
	bl	dev_err
	str	r8, [r4, #156]
	b	.L10761
.L10768:
	bl	__stack_chk_fail
.L10770:
	.align	2
.L10769:
	.word	.LANCHOR4-1056
	.fnend
	.size	acm_connect, .-acm_connect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_disconnect, %function
acm_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r5, #:lower16:__stack_chk_guard
	mov	r4, r0
	strd	r6, [sp, #8]
	movt	r5, #:upper16:__stack_chk_guard
	add	r6, r0, #148
	strd	r8, [sp, #16]
	ldr	r1, [r5]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r0, #170]
	.pad #24
	sub	sp, sp, #24
	ldr	r2, [r4, #20]
	mov	r0, r6
	str	r1, [sp, #20]
	bic	r3, r3, #3
	strh	r3, [r4, #170]	@ movhi
	ldr	r8, [r2, #24]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #156]
	mov	r7, r0
	cmp	r3, #0
	moveq	r3, #1
	strbeq	r3, [r4, #147]
	bne	.L10781
.L10775:
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, [sp, #20]
	ldr	r3, [r5]
	cmp	r2, r3
	bne	.L10782
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10781:
	ldr	r0, .L10783
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L10773
	ldrh	ip, [r4, #170]
	movw	r2, #:lower16:.LC686
	sub	r0, r0, #24
	ldr	r1, [r8]
	movt	r2, #:upper16:.LC686
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L10773:
	movw	r0, #:lower16:.LC687
	ldrh	r2, [r4, #170]
	mov	r9, #32
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC687
	bl	printk
	add	r0, sp, #10
	mov	r1, #10
	ldr	r10, [r4, #152]
	bl	__memzero
	ldr	r8, [r4, #156]
	mov	r2, #0
	mov	r0, #10
	mvn	r1, #94
	mov	ip, #2
	strb	r2, [r4, #147]
	str	r2, [r4, #156]
	ldr	r3, [r8]
	str	r0, [r8, #4]
	mov	r0, r6
	strb	r1, [r3]
	strb	r9, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	ldrb	r1, [r4, #144]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	r2, [r3, #7]
	ldrh	ip, [r4, #170]	@ unaligned
	ldr	r1, [sp, #14]	@ unaligned
	strh	ip, [sp, #10]	@ movhi
	ldr	ip, [sp, #10]	@ unaligned
	str	ip, [r3, #8]	@ unaligned
	str	r1, [r3, #12]	@ unaligned
	ldrh	r1, [sp, #18]	@ unaligned
	strh	r1, [r3, #16]	@ unaligned
	ldrh	r2, [r4, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock
	ldr	r3, [r10, #8]
	mov	r2, r9
	mov	r1, r8
	mov	r0, r10
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r6
	bl	_raw_spin_lock
	cmp	r9, #0
	bge	.L10775
	ldr	r0, [r4, #20]
	movw	r1, #:lower16:.LC688
	mov	r3, r9
	movt	r1, #:upper16:.LC688
	ldrb	r2, [r4, #146]	@ zero_extendqisi2
	ldr	r0, [r0, #24]
	ldr	r0, [r0]
	add	r0, r0, #32
	bl	dev_err
	str	r8, [r4, #156]
	b	.L10775
.L10782:
	bl	__stack_chk_fail
.L10784:
	.align	2
.L10783:
	.word	.LANCHOR4-1056
	.fnend
	.size	acm_disconnect, .-acm_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_disconnect, %function
composite_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	add	r0, r0, #32
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	mov	r5, r0
	mov	r0, #0
	bl	set_string_mode
	movw	r0, #:lower16:.LC481
	ldr	r1, .L10808
	add	r6, r5, #60
	movt	r0, #:upper16:.LC481
	bl	printk
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #12]
	mov	r7, r0
	cmp	r3, #0
	beq	.L10786
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, #18]
	tst	r2, #4
	bne	.L10807
.L10787:
	ldr	r4, [r3, #36]!
	cmp	r4, r3
	sub	r4, r4, #72
	beq	.L10793
	mov	r8, #0
.L10788:
	ldr	r3, [r4, #48]
	mov	r0, r4
	cmp	r3, #0
	beq	.L10791
	blx	r3
	str	r8, [r4, #80]
	ldr	r3, [r5, #12]
	ldr	r4, [r4, #72]
	add	r3, r3, #36
	cmp	r3, r4
	sub	r4, r4, #72
	bne	.L10788
.L10793:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2476]
	str	r2, [r5, #12]
	str	r2, [r5, #56]
	ldr	r3, [r3, #32]
	cmp	r3, r2
	beq	.L10794
.L10789:
	mov	r0, r5
	blx	r3
.L10795:
	ldr	r3, [r5, #56]
	cmp	r3, #0
	beq	.L10794
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC903
	movt	r1, #:upper16:.LC903
	add	r0, r0, #32
	bl	_dev_info
	mov	r3, #0
	str	r3, [r5, #56]
.L10794:
	mov	r1, r7
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L10791:
	str	r3, [r4, #80]
	ldr	r3, [r5, #12]
	ldr	r4, [r4, #72]
	add	r3, r3, #36
	cmp	r4, r3
	sub	r4, r4, #72
	bne	.L10788
	b	.L10793
.L10786:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2476]
	ldr	r3, [r3, #32]
	cmp	r3, #0
	bne	.L10789
	b	.L10795
.L10807:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC5
	movt	r2, #:upper16:.LC5
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r5, #12]
	b	.L10787
.L10809:
	.align	2
.L10808:
	.word	.LANCHOR5-916
	.fnend
	.size	composite_disconnect, .-composite_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_disconnect, %function
android_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r0
	movt	r4, #:upper16:.LANCHOR1
	add	r0, r0, #32
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	mov	r2, r4
	mov	r7, r0
	ldr	r3, [r2, #3232]!
	cmp	r3, r2
	sub	r6, r3, #512
	bne	.L10813
	b	.L10811
.L10823:
	ldr	r3, [r6, #512]
	cmp	r3, r2
	sub	r6, r3, #512
	beq	.L10811
.L10813:
	ldr	r3, [r3, #-504]
	cmp	r7, r3
	bne	.L10823
.L10811:
	mov	r0, r5
	bl	composite_disconnect
	ldr	r5, [r4, #2488]
	add	r10, r5, #88
	add	r8, r5, #1760
	mov	r0, r10
	add	r8, r8, #4
	bl	_raw_spin_lock_irqsave
	ldr	fp, [r5, #1764]
	str	r0, [sp, #4]
	cmp	fp, r8
	ldr	r4, [fp]
	addne	r9, r5, #1776
	addne	r9, r9, #4
	beq	.L10818
.L10817:
	mov	r0, fp
	bl	list_del
	mov	r0, fp
	mov	r1, r9
	ldr	r2, [r5, #1780]
	bl	__list_add
	cmp	r8, r4
	mov	fp, r4
	ldr	r4, [r4]
	bne	.L10817
.L10818:
	ldr	fp, [r5, #1772]
	add	r8, r5, #1760
	add	r8, r8, #12
	cmp	r8, fp
	ldr	r4, [fp]
	addne	r9, r5, #1776
	addne	r9, r9, #4
	beq	.L10816
.L10819:
	mov	r0, fp
	bl	list_del
	mov	r0, fp
	mov	r1, r9
	ldr	r2, [r5, #1780]
	bl	__list_add
	cmp	r8, r4
	mov	fp, r4
	ldr	r4, [r4]
	bne	.L10819
.L10816:
	mov	r0, r10
	ldr	r1, [sp, #4]
	add	r7, r7, #60
	bl	_raw_spin_unlock_irqrestore
	add	r0, r5, #1744
	add	r0, r0, #4
	bl	schedule_work
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r3, #0
	mov	r4, r0
	add	r0, r6, #176
	strb	r3, [r6, #48]
	bl	schedule_work
	mov	r1, r4
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	android_disconnect, .-android_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_connect_work, %function
gbam_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r5, r0, #280
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #276
	mov	r0, r5
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock
	ldr	r3, [r4, #-272]
	mov	r0, r6
	cmp	r3, #0
	beq	.L10849
	bl	_raw_spin_unlock
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #-264]
	tst	r3, #4
	bne	.L10850
.L10824:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10850:
	sub	fp, r4, #284
	movw	r2, #:lower16:gbam_notify
	ldr	r0, [r4, #-260]
	mov	r1, fp
	movt	r2, #:upper16:gbam_notify
	bl	msm_bam_dmux_open
	subs	r3, r0, #0
	bne	.L10851
	sub	r1, r4, #264
	mov	r0, #1
	movw	r7, #:lower16:.LANCHOR4
	bl	_set_bit
	movt	r7, #:upper16:.LANCHOR4
	movw	r3, #2058
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L10852
.L10829:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-272]
	str	r0, [sp, #4]
	cmp	r3, #0
	beq	.L10853
	ldr	r8, [r3, #88]
	movw	r9, #:lower16:.LANCHOR0
	sub	r10, r4, #232
	movt	r9, #:upper16:.LANCHOR0
	movw	r3, #:lower16:gbam_epout_complete
	mov	r1, r10
	movt	r3, #:upper16:gbam_epout_complete
	ldr	r2, [r9, #1660]
	mov	r0, r8
	bl	gbam_alloc_requests.constprop.136
	cmp	r0, #0
	bne	.L10854
	mov	r0, r5
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #-272]
	mov	r5, r0
	cmp	r3, #0
	beq	.L10855
	ldr	r8, [r3, #84]
	movw	r3, #:lower16:gbam_epin_complete
	sub	r1, r4, #256
	movt	r3, #:upper16:gbam_epin_complete
	ldr	r2, [r9, #1664]
	mov	r0, r8
	bl	gbam_alloc_requests.constprop.136
	cmp	r0, #0
	bne	.L10856
	mov	r0, r6
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	mov	r0, fp
	bl	gbam_start_rx
.L10831:
	movw	r3, #2082
	ldrh	r3, [r7, r3]
	tst	r3, #4
	beq	.L10824
	ldr	r2, .L10857
	movw	r1, #:lower16:.LC377
	ldr	r0, .L10857+4
	movt	r1, #:upper16:.LC377
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	__dynamic_pr_debug
.L10849:
	bl	_raw_spin_unlock
	mov	r1, r7
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L10853:
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	b	.L10831
.L10855:
	ldr	r9, [r4, #-232]
	cmp	r9, r10
	beq	.L10848
.L10835:
	mov	r0, r9
	sub	r9, r9, #36
	bl	list_del
	ldr	r3, [r8, #8]
	mov	r1, r9
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r9, [r4, #-232]
	cmp	r10, r9
	bne	.L10835
.L10848:
	mov	r1, r5
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L10831
.L10852:
	movw	r1, #:lower16:.LC601
	mov	r3, fp
	ldr	r2, .L10857+8
	movt	r1, #:upper16:.LC601
	ldr	r0, .L10857+12
	bl	__dynamic_pr_debug
	b	.L10829
.L10854:
	movw	r0, #:lower16:.LC905
	ldr	r1, .L10857+8
	movt	r0, #:upper16:.LC905
	bl	printk
	mov	r0, r5
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore
	b	.L10831
.L10851:
	ldr	r1, .L10857
	movw	r0, #:lower16:.LC904
	ldr	r2, [r4, #-260]
	movt	r0, #:upper16:.LC904
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L10856:
	movw	r0, #:lower16:.LC906
	ldr	r1, .L10857+8
	movt	r0, #:upper16:.LC906
	bl	printk
.L10837:
	ldr	r9, [r4, #-232]
	cmp	r10, r9
	beq	.L10848
	mov	r0, r9
	sub	r9, r9, #36
	bl	list_del
	ldr	r3, [r8, #8]
	mov	r1, r9
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	b	.L10837
.L10858:
	.align	2
.L10857:
	.word	.LANCHOR5-892
	.word	.LANCHOR4+2064
	.word	.LANCHOR5-872
	.word	.LANCHOR4+2040
	.fnend
	.size	gbam_connect_work, .-gbam_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_ioctl, %function
modem_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r5, #:lower16:__stack_chk_guard
	movw	r3, #21249
	movt	r5, #:upper16:__stack_chk_guard
	movt	r3, 16388
	strd	r6, [sp, #8]
	ldr	ip, [r5]
	cmp	r1, r3
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	mov	r6, r2
	str	lr, [sp, #28]
	.pad #24
	sub	sp, sp, #24
	str	ip, [sp, #20]
	bne	.L10875
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r4, [r3, #3976]
	cmp	r4, #0
	moveq	r0, r4
	beq	.L10859
	ldr	r3, [r4, #20]
	add	r7, r4, #148
	strh	r2, [r4, #170]	@ movhi
	mov	r0, r7
	ldr	r8, [r3, #24]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #156]
	mov	r6, r0
	cmp	r3, #0
	moveq	r3, #1
	strbeq	r3, [r4, #147]
	bne	.L10876
.L10867:
	mov	r0, r7
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
.L10859:
	ldr	r2, [sp, #20]
	ldr	r3, [r5]
	cmp	r2, r3
	bne	.L10877
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10875:
	movw	r3, #21251
	movt	r3, 16388
	cmp	r1, r3
	beq	.L10878
	movw	r0, #:lower16:.LC908
	movt	r0, #:upper16:.LC908
	bl	printk
	movw	r0, #65021
	movt	r0, 65535
	b	.L10859
.L10877:
	bl	__stack_chk_fail
.L10876:
	ldr	r0, .L10879
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L10865
	ldrh	ip, [r4, #170]
	movw	r2, #:lower16:.LC686
	sub	r0, r0, #24
	ldr	r1, [r8]
	movt	r2, #:upper16:.LC686
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L10865:
	movw	r0, #:lower16:.LC687
	ldrh	r2, [r4, #170]
	mov	r9, #32
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC687
	bl	printk
	add	r0, sp, #10
	mov	r1, #10
	ldr	r10, [r4, #152]
	bl	__memzero
	ldr	r8, [r4, #156]
	mov	r2, #0
	mov	r0, #10
	mvn	r1, #94
	mov	ip, #2
	strb	r2, [r4, #147]
	str	r2, [r4, #156]
	ldr	r3, [r8]
	str	r0, [r8, #4]
	mov	r0, r7
	strb	r1, [r3]
	strb	r9, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	ldrb	r1, [r4, #144]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	strb	ip, [r3, #6]
	strb	r2, [r3, #7]
	ldrh	ip, [r4, #170]	@ unaligned
	ldr	r1, [sp, #14]	@ unaligned
	strh	ip, [sp, #10]	@ movhi
	ldr	ip, [sp, #10]	@ unaligned
	str	ip, [r3, #8]	@ unaligned
	str	r1, [r3, #12]	@ unaligned
	ldrh	r1, [sp, #18]	@ unaligned
	strh	r1, [r3, #16]	@ unaligned
	ldrh	r2, [r4, #170]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock
	ldr	r3, [r10, #8]
	mov	r2, r9
	mov	r1, r8
	mov	r0, r10
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r7
	bl	_raw_spin_lock
	cmp	r9, #0
	bge	.L10867
	ldr	r0, [r4, #20]
	movw	r1, #:lower16:.LC688
	mov	r3, r9
	movt	r1, #:upper16:.LC688
	ldrb	r2, [r4, #146]	@ zero_extendqisi2
	ldr	r0, [r0, #24]
	ldr	r0, [r0]
	add	r0, r0, #32
	bl	dev_err
	str	r8, [r4, #156]
	b	.L10867
.L10878:
	movw	r0, #:lower16:.LC907
	mov	r1, r2
	movt	r0, #:upper16:.LC907
	bl	printk
	movw	ip, #:lower16:.LANCHOR1
	mov	r3, #1
	ldr	r0, .L10879+4
	movt	ip, #:upper16:.LANCHOR1
	mov	r2, r3
	mov	r1, r3
	str	r3, [ip, #2200]
	mov	r3, #0
	str	r6, [ip, #3600]
	bl	__wake_up
	mov	r0, #0
	b	.L10859
.L10880:
	.align	2
.L10879:
	.word	.LANCHOR4-1056
	.word	.LANCHOR1+2204
	.fnend
	.size	modem_ioctl, .-modem_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_function_unbind, %function
acc_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	add	r7, r1, #88
	strd	r8, [sp, #16]
	add	r9, r1, #1648
	add	r9, r9, #8
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	b	.L10882
.L10883:
	bl	list_del
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	r8, #0
	beq	.L10884
	ldr	r6, [r4, #92]
	ldr	r0, [r5, #-36]
	bl	kfree
	mov	r1, r8
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L10882:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #1656]
	mov	r6, r0
	cmp	r9, r5
	mov	r0, r5
	sub	r8, r5, #36
	bne	.L10883
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
.L10884:
	ldr	r5, [r4, #1688]
	cmp	r5, #0
	beq	.L10886
	ldr	r6, [r4, #96]
	ldr	r0, [r5]
	bl	kfree
	mov	r1, r5
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L10886:
	ldr	r5, [r4, #1692]
	cmp	r5, #0
	beq	.L10887
	ldr	r6, [r4, #96]
	ldr	r0, [r5]
	bl	kfree
	mov	r1, r5
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L10887:
	ldr	r0, .L10903
	add	r9, r4, #1760
	bl	hid_unregister_driver
	mov	r0, r7
	add	r9, r9, #4
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #1764]
	mov	r8, r0
	cmp	r6, r9
	ldr	r5, [r6]
	addne	r10, r4, #1776
	addne	r10, r10, #4
	beq	.L10892
.L10891:
	mov	r0, r6
	bl	list_del
	mov	r0, r6
	mov	r1, r10
	ldr	r2, [r4, #1780]
	bl	__list_add
	cmp	r9, r5
	mov	r6, r5
	ldr	r5, [r5]
	bne	.L10891
.L10892:
	ldr	r6, [r4, #1772]
	add	r9, r4, #1760
	add	r9, r9, #12
	cmp	r6, r9
	ldr	r5, [r6]
	addne	r10, r4, #1776
	addne	r10, r10, #4
	beq	.L10890
.L10893:
	mov	r0, r6
	bl	list_del
	mov	r0, r6
	mov	r1, r10
	ldr	r2, [r4, #1780]
	bl	__list_add
	cmp	r5, r9
	mov	r6, r5
	ldr	r5, [r5]
	bne	.L10893
.L10890:
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore
	add	r0, r4, #1744
	ldrd	r4, [sp]
	add	r0, r0, #4
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	schedule_work
.L10904:
	.align	2
.L10903:
	.word	.LANCHOR0+1668
	.fnend
	.size	acc_function_unbind, .-acc_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_unbind, %function
mtp_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	add	r6, r1, #88
	strd	r8, [sp, #16]
	add	r9, r1, #116
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	b	.L10906
.L10907:
	bl	list_del
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r8, #0
	beq	.L10908
	ldr	r7, [r4, #92]
	ldr	r0, [r5, #-36]
	bl	kfree
	mov	r1, r8
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L10906:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #116]
	mov	r7, r0
	cmp	r9, r5
	mov	r0, r5
	sub	r8, r5, #36
	bne	.L10907
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L10908:
	ldr	r5, [r4, #168]
	cmp	r5, #0
	beq	.L10910
	ldr	r7, [r4, #96]
	ldr	r0, [r5]
	bl	kfree
	mov	r1, r5
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L10910:
	ldr	r5, [r4, #172]
	cmp	r5, #0
	beq	.L10911
	ldr	r7, [r4, #96]
	ldr	r0, [r5]
	bl	kfree
	mov	r1, r5
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L10911:
	add	r9, r4, #124
	b	.L10912
.L10913:
	bl	list_del
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r8, #0
	beq	.L10914
	ldr	r7, [r4, #100]
	ldr	r0, [r5, #-36]
	bl	kfree
	mov	r1, r8
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L10912:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #124]
	mov	r7, r0
	cmp	r5, r9
	mov	r0, r5
	sub	r8, r5, #36
	bne	.L10913
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L10914:
	mov	r3, #0
	str	r3, [r4, #104]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	mtp_function_unbind, .-mtp_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_unbind, %function
adb_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r0, #0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	mov	r1, #1
	mov	r3, r0
	strd	r6, [sp, #8]
	mov	r2, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	strd	r0, [r5, #100]
	add	r0, r5, #128
	mov	r1, #3
	bl	__wake_up
	ldr	r4, [r5, #152]
	cmp	r4, #0
	beq	.L10924
	ldr	r6, [r5, #96]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L10924:
	add	r9, r5, #120
	add	r8, r5, #88
	b	.L10925
.L10926:
	bl	list_del
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L10932
	ldr	r6, [r5, #92]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L10925:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #120]
	mov	r6, r0
	cmp	r9, r4
	mov	r0, r4
	sub	r7, r4, #36
	bne	.L10926
	mov	r1, r6
	mov	r0, r8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L10932:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	adb_function_unbind, .-adb_function_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_common_release, %function
fsg_common_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #-224]
	cmp	r3, #7
	bne	.L10966
.L10934:
	ldr	r0, [r6, #-236]
	cmp	r0, #0
	beq	.L10938
	ldr	r5, [r6, #-244]
	cmp	r5, #0
	beq	.L10939
	ldr	r7, .L10969
	add	r4, r0, #48
	add	r9, r7, #16
	add	r8, r7, #32
.L10942:
	mov	r1, r7
	mov	r0, r4
	bl	device_remove_file
	mov	r1, r9
	mov	r0, r4
	bl	device_remove_file
	mov	r1, r8
	mov	r0, r4
	bl	device_remove_file
	mov	r0, r4
	ldr	r1, .L10969+4
	bl	device_remove_file
	ldr	r0, [r4, #-48]
	ldr	r3, .L10969+8
	cmp	r0, #0
	beq	.L10940
	ldrh	r2, [r3]
	tst	r2, #4
	bne	.L10967
.L10941:
	bl	fput
	mov	r3, #0
	str	r3, [r4, #-48]
.L10940:
	mov	r0, r4
	add	r4, r4, #392
	bl	device_unregister
	subs	r5, r5, #1
	bne	.L10942
	ldr	r0, [r6, #-236]
.L10939:
	bl	kfree
.L10938:
	ldr	r5, [r6, #-268]
	add	r4, r5, #32
	add	r5, r5, #160
.L10943:
	add	r4, r4, #32
	ldr	r0, [r4, #-64]
	bl	kfree
	cmp	r5, r4
	bne	.L10943
	ldr	r0, [r6, #-268]
	bl	kfree
	ldrb	r3, [r6, #-192]	@ zero_extendqisi2
	tst	r3, #2
	bne	.L10968
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10967:
	movw	r2, #:lower16:.LC805
	sub	r0, r3, #18
	movt	r2, #:upper16:.LC805
	mov	r1, r4
	bl	__dynamic_dev_dbg
	ldr	r0, [r4, #-48]
	b	.L10941
.L10966:
	sub	r4, r0, #292
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #-224]
	mov	r5, r0
	cmp	r3, #6
	bgt	.L10936
	ldr	r3, [r6, #-280]
	mov	r1, #6
	ldr	r2, [r6, #-168]
	str	r1, [r6, #-224]
	str	r3, [r6, #-220]
	cmp	r2, #0
	beq	.L10936
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L10936:
	mov	r0, r4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore
	sub	r0, r6, #184
	bl	wait_for_completion
	b	.L10934
.L10968:
	sub	r0, r6, #336
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	kfree
.L10970:
	.align	2
.L10969:
	.word	.LANCHOR0+1800
	.word	.LANCHOR0+1848
	.word	.LANCHOR4+642
	.fnend
	.size	fsg_common_release, .-fsg_common_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_unbind, %function
fsg_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #2106
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r4, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r3, r2]
	.pad #24
	sub	sp, sp, #24
	ldr	r5, [r1, #88]
	tst	r3, #4
	moveq	r3, r5
	bne	.L10987
.L10972:
	ldr	r2, [r3, #8]
	cmp	r2, r4
	beq	.L10988
.L10974:
	add	r0, r5, #336
	.syntax divided
@ 99 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r0]
	sub	r3, r3, #1
	strex	r2, r3, [r0]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L10981
	bl	fsg_common_release
.L10981:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	mov	r0, r4
	bl	kfree
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10988:
	mov	r2, #0
	str	r2, [r3, #12]
	ldr	r6, [r4, #88]
	add	r7, r6, #44
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #112]
	mov	r8, r0
	cmp	r3, #4
	bgt	.L10976
	ldr	r3, [r6, #56]
	mov	r1, #4
	ldr	r2, [r6, #168]
	str	r1, [r6, #112]
	str	r3, [r6, #116]
	cmp	r2, #0
	beq	.L10976
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L10976:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #8]
	cmp	r3, r4
	bne	.L10974
	mov	r3, sp
	add	r1, sp, #16
	bic	r2, r3, #8128
	mov	r3, #0
	bic	r2, r2, #63
	add	r6, r5, #16
	ldr	r0, [r2, #12]
	movw	r2, #:lower16:autoremove_wake_function
	str	r3, [sp, #4]
	movt	r2, #:upper16:autoremove_wake_function
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #16]
	str	r1, [sp, #20]
	b	.L10980
.L10989:
	bl	schedule
.L10980:
	mov	r2, #2
	add	r1, sp, #4
	mov	r0, r6
	bl	prepare_to_wait
	ldr	r3, [r5, #8]
	cmp	r3, r4
	beq	.L10989
	add	r1, sp, #4
	mov	r0, r6
	bl	finish_wait
	b	.L10974
.L10987:
	ldr	r1, [r1, #84]
	movw	r2, #:lower16:.LC810
	movt	r2, #:upper16:.LC810
	ldr	r0, .L10990
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #88]
	b	.L10972
.L10991:
	.align	2
.L10990:
	.word	.LANCHOR4+2088
	.fnend
	.size	fsg_unbind, .-fsg_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_function_init, %function
mass_storage_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, r1
	strd	r8, [sp, #16]
	movw	r9, #:lower16:kmalloc_caches
	movt	r9, #:upper16:kmalloc_caches
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r9, #28]
	.pad #52
	sub	sp, sp, #52
	cmp	r0, #0
	beq	.L11042
	mov	r2, #100
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L11100
.L10993:
	mov	r2, #1
	mov	r1, #256
	movw	r3, #:lower16:.LC919
	str	r2, [r4]
	movt	r3, #:upper16:.LC919
	strh	r1, [r4, #8]	@ movhi
	strb	r2, [r4, #10]
	ldr	r0, [r9, #36]
	str	r3, [sp, #36]
	ldr	r10, [r7]
	cmp	r0, #0
	beq	.L11044
	mov	r2, #340
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L10996
.L10995:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	movw	r1, #32976
	mov	r0, #128
	orr	r3, r3, #2
	strb	r3, [r5, #144]
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [r5, #68]
	beq	.L11101
	ldr	r3, [r4, #76]
	movw	r1, #32976
	mov	r0, #392
	str	r3, [r5, #172]
	ldr	r3, [r4, #80]
	str	r10, [r5]
	str	r3, [r5, #176]
	ldr	r3, [r10, #4]
	str	r3, [r5, #48]
	ldr	r3, [r7, #4]
	str	r7, [r5, #4]
	str	r3, [r5, #52]
	bl	__kmalloc
	subs	r8, r0, #0
	beq	.L11012
	add	r7, r5, #28
	movw	r1, #:lower16:.LC920
	ldr	r2, .L11107
	mov	r0, r7
	movt	r1, #:upper16:.LC920
	str	r8, [r5, #100]
	bl	__init_rwsem
	ldrb	r3, [r4, #10]	@ zero_extendqisi2
	movw	ip, #:lower16:fsg_lun_release
	mov	r1, r7
	ldrb	r2, [r8, #24]	@ zero_extendqisi2
	movt	ip, #:upper16:fsg_lun_release
	mov	r7, r8
	add	r0, r10, #32
	adds	r3, r3, #0
	movne	r3, #1
	bfi	r2, r3, #3, #1
	strb	r2, [r8, #24]
	ldrb	r2, [r4, #8]	@ zero_extendqisi2
	ldrb	r3, [r8, #24]	@ zero_extendqisi2
	and	r2, r2, #1
	bfi	r3, r2, #1, #1
	bfi	r3, r2, #0, #1
	mov	r2, r3
	strb	r3, [r8, #24]
	ldrb	r3, [r4, #9]	@ zero_extendqisi2
	bfi	r2, r3, #2, #1
	mov	r3, r2
	strb	r2, [r8, #24]
	ldrb	r2, [r4, #11]	@ zero_extendqisi2
	str	ip, [r8, #380]
	bfi	r3, r2, #7, #1
	strb	r3, [r8, #24]
	str	r0, [r7, #48]!
	mov	r0, r7
	bl	dev_set_drvdata
	ldr	r1, [r4, #68]
	mov	r2, #0
	movw	r3, #:lower16:.LC909
	movt	r3, #:upper16:.LC909
	mov	r0, r7
	cmp	r1, r2
	moveq	r1, r3
	bl	dev_set_name
	mov	r0, r7
	bl	device_register
	cmp	r0, #0
	bne	.L11102
	ldr	r1, .L11107+4
	mov	r0, r7
	bl	device_create_file
	cmp	r0, #0
	bne	.L11004
	ldr	r1, .L11107+8
	mov	r0, r7
	bl	device_create_file
	cmp	r0, #0
	bne	.L11004
	ldr	r1, .L11107+12
	mov	r0, r7
	bl	device_create_file
	cmp	r0, #0
	bne	.L11004
	mov	r0, r7
	ldr	r1, .L11107+16
	bl	device_create_file
	subs	r7, r0, #0
	movne	r8, r7
	movne	r10, r8
	bne	.L11006
	ldr	r1, [r4, #4]
	cmp	r1, #0
	beq	.L11009
	mov	r0, r8
	bl	fsg_lun_open
	cmp	r0, #0
	bne	.L11004
.L11010:
	ldr	r8, [r5, #68]
	mov	r3, #1
	str	r3, [r5, #92]
	add	fp, r8, #96
.L11011:
	mov	r2, #2
	mov	r1, #208
	mov	r0, #16384
	bl	kmalloc_order_trace
	cmp	r0, #0
	str	r0, [r8]
	beq	.L11012
	cmp	fp, r8
	add	r8, r8, #32
	beq	.L11103
	str	r8, [r8, #-24]
	b	.L11011
.L11009:
	ldrb	r2, [r8, #24]	@ zero_extendqisi2
	ands	r2, r2, #12
	bne	.L11010
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC922
	mvn	r8, #21
	movt	r1, #:upper16:.LC922
	add	r0, r0, #32
	bl	dev_err
	mov	r2, #1
	mov	r3, #7
	add	r0, r5, #336
	str	r2, [r5, #92]
	str	r3, [r5, #112]
	bl	fsg_common_release
.L11000:
	mov	r10, r8
	b	.L11099
.L11042:
	mov	r4, #16
	b	.L10993
.L11044:
	mov	r5, #16
	b	.L10995
.L11004:
	mov	r8, r0
	mov	r10, r0
.L11006:
	mov	r3, #1
	str	r3, [r5, #92]
.L11003:
	mov	r3, #7
	add	r0, r5, #336
	str	r3, [r5, #112]
	bl	fsg_common_release
.L11034:
	cmn	r10, #4096
	bhi	.L11000
	ldr	r3, [r4]
	cmp	r3, #0
	movne	r5, #0
	addne	r7, sp, #36
	movne	r9, #392
	bne	.L11036
	b	.L11039
.L11037:
	ldr	r3, [r4]
	add	r5, r5, #1
	cmp	r3, r5
	bls	.L11039
.L11036:
	ldr	r1, [r8, #100]
	ldr	r0, [r6, #8]
	ldr	r2, [r7, r5, lsl #2]
	mla	r1, r9, r5, r1
	add	r0, r0, #8
	add	r1, r1, #56
	bl	sysfs_create_link
	cmp	r0, #0
	beq	.L11037
	cmp	r5, #0
	mov	r10, r0
	subne	r5, r5, #-1073741823
	addne	r5, r7, r5, lsl #2
	beq	.L11041
.L11040:
	ldr	r0, [r6, #8]
	mov	r9, r5
	ldr	r1, [r9], #-4
	add	r0, r0, #8
	bl	sysfs_remove_link
	cmp	r5, r7
	mov	r5, r9
	bne	.L11040
.L11041:
	add	r0, r8, #336
	bl	fsg_common_release
.L11099:
	mov	r0, r4
	bl	kfree
.L10992:
	mov	r0, r10
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11039:
	mov	r10, #0
	str	r8, [r4, #96]
	str	r4, [r6, #4]
	b	.L10992
.L11101:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	tst	r3, #2
	bne	.L11104
.L10996:
	mvn	r10, #11
	b	.L11099
.L11103:
	ldr	r2, [r5, #68]
	movw	r3, #65535
	str	r2, [fp, #8]
	ldrh	r1, [r4, #92]
	cmp	r1, r3
	beq	.L11105
.L11015:
	ldr	r3, [r4, #84]
	movw	r2, #:lower16:.LC910
	add	r0, r5, #180
	ldr	ip, [r4, #88]
	movt	r2, #:upper16:.LC910
	cmp	r3, #0
	moveq	r3, r2
	cmp	ip, #0
	beq	.L11095
	movw	r8, #:lower16:.LC911
	movt	r8, #:upper16:.LC911
.L11018:
	movw	r2, #:lower16:.LC924
	str	ip, [sp]
	movt	r2, #:upper16:.LC924
	str	r1, [sp, #4]
	mov	r1, #29
	bl	snprintf
	ldm	r8, {r1, ip}
	movw	r2, #:lower16:.LC925
	movt	r2, #:upper16:.LC925
	ldr	r0, [r8, #8]
	ldm	r2, {r10, lr}
	mov	r2, #0
	strb	r2, [r5, #234]
	str	r1, [r5, #218]	@ unaligned
	ldr	r1, [r8, #12]
	str	r10, [r5, #209]	@ unaligned
	str	lr, [r5, #213]	@ unaligned
	str	ip, [r5, #222]	@ unaligned
	str	r0, [r5, #226]	@ unaligned
	str	r1, [r5, #230]	@ unaligned
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L11019
	ldr	r3, [r5]
	movw	r0, #:lower16:.LC511
	movt	r0, #:upper16:.LC511
	ldr	r1, [r3, #28]
	bl	strcmp
	adds	r3, r0, #0
	movne	r3, #1
.L11019:
	ldrb	lr, [r5, #144]	@ zero_extendqisi2
	mov	fp, #0
	mov	r2, #1
	movw	ip, #:lower16:.LC913
	movw	r0, #:lower16:fsg_main_thread
	str	fp, [r5, #44]
	movt	ip, #:upper16:.LC913
	movt	r0, #:upper16:fsg_main_thread
	str	r2, [r5, #336]
	mov	r1, r5
	mvn	r2, #0
	bfi	lr, r3, #0, #1
	strb	lr, [r5, #144]
	ldr	r3, [r4, #72]
	cmp	r3, fp
	moveq	r3, ip
	bl	kthread_create_on_node
	cmn	r0, #4096
	mov	r8, r0
	str	r0, [r5, #168]
	mov	r10, r0
	bhi	.L11003
	movw	r1, #:lower16:.LC753
	ldr	r2, .L11107+20
	add	r0, r5, #156
	movt	r1, #:upper16:.LC753
	str	fp, [r5, #152]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC926
	ldr	r2, .L11107
	add	r0, r5, #16
	movt	r1, #:upper16:.LC926
	bl	__init_waitqueue_head
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC927
	movt	r1, #:upper16:.LC927
	add	r0, r0, #32
	bl	_dev_info
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC928
	movt	r1, #:upper16:.LC928
	ldr	r2, [r5, #92]
	add	r0, r0, #32
	bl	_dev_info
	ldr	r0, [r9, #48]
	cmp	r0, fp
	moveq	r3, #16
	streq	r3, [sp, #16]
	beq	.L11021
	mov	r2, #4096
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	str	r0, [sp, #16]
.L11021:
	ldr	r3, [r5, #92]
	ldr	r8, [r5, #100]
	cmp	r3, #0
	str	r3, [sp, #12]
	ble	.L11033
	movw	r3, #:lower16:.LC915
	movw	r2, #:lower16:.LC914
	str	r4, [sp, #28]
	movw	fp, #:lower16:.LC917
	movt	r3, #:upper16:.LC915
	movt	r2, #:upper16:.LC914
	add	r8, r8, #48
	movt	fp, #:upper16:.LC917
	strd	r2, [sp, #20]
.L11025:
	ldr	r0, [r8, #-48]
	sub	r4, r8, #48
	cmp	r0, #0
	beq	.L11076
	ldr	r3, [sp, #16]
	mov	r2, #4096
	add	r0, r0, #8
	subs	r1, r3, #0
	beq	.L11028
	bl	d_path
	cmn	r0, #4096
	mov	r10, r0
	bls	.L11026
.L11028:
	ldr	r10, [sp, #20]
.L11026:
	ldrb	r4, [r4, #24]	@ zero_extendqisi2
	movw	ip, #:lower16:.LC916
	movw	lr, #:lower16:.LC918
	movt	ip, #:upper16:.LC916
	movt	lr, #:upper16:.LC918
	movw	r9, #:lower16:.LC930
	movw	r1, #:lower16:.LC929
	movt	r9, #:upper16:.LC930
	mov	r0, r8
	tst	r4, #4
	movt	r1, #:upper16:.LC929
	moveq	ip, fp
	tst	r4, #2
	moveq	lr, fp
	tst	r4, #8
	mov	r2, ip
	mov	r3, lr
	beq	.L11031
	stm	sp, {r9, r10}
	add	r7, r7, #1
	add	r8, r8, #392
	bl	_dev_info
	ldr	r3, [sp, #12]
	cmp	r3, r7
	bne	.L11025
.L11098:
	ldr	r4, [sp, #28]
.L11033:
	ldr	r0, [sp, #16]
	bl	kfree
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #2130
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L11106
.L11024:
	ldr	r0, [r5, #168]
	mov	r10, r5
	mov	r8, r5
	bl	wake_up_process
	b	.L11034
.L11102:
	ldr	ip, [r5]
	movw	r1, #:lower16:.LC921
	mov	r3, r0
	movt	r1, #:upper16:.LC921
	mov	r2, #0
	mov	r8, r0
	mov	r10, r0
	add	r0, ip, #32
	bl	_dev_info
	mov	r3, #0
	mov	r0, r7
	str	r3, [r5, #92]
	bl	put_device
	b	.L11003
.L11104:
	mov	r0, r5
	mvn	r10, #11
	bl	kfree
	b	.L11099
.L11012:
	mov	r3, #7
	add	r0, r5, #336
	mvn	r8, #11
	str	r3, [r5, #112]
	bl	fsg_common_release
	b	.L11000
.L11105:
	ldr	r8, [r10, #28]
	movw	r0, #:lower16:.LC504
	movt	r0, #:upper16:.LC504
	mov	r1, r8
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #769
	beq	.L11015
	movw	r0, #:lower16:.LC505
	mov	r1, r8
	movt	r0, #:upper16:.LC505
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #770
	beq	.L11015
	movw	r0, #:lower16:.LC506
	mov	r1, r8
	movt	r0, #:upper16:.LC506
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #771
	beq	.L11015
	movw	r0, #:lower16:.LC507
	mov	r1, r8
	movt	r0, #:upper16:.LC507
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #774
	beq	.L11015
	movw	r0, #:lower16:.LC508
	mov	r1, r8
	movt	r0, #:upper16:.LC508
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #776
	beq	.L11015
	movw	r0, #:lower16:.LC509
	mov	r1, r8
	movt	r0, #:upper16:.LC509
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #785
	beq	.L11015
	movw	r0, #:lower16:.LC510
	mov	r1, r8
	movt	r0, #:upper16:.LC510
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #786
	beq	.L11015
	movw	r0, #:lower16:.LC511
	mov	r1, r8
	movt	r0, #:upper16:.LC511
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #787
	beq	.L11015
	movw	r0, #:lower16:.LC512
	mov	r1, r8
	movt	r0, #:upper16:.LC512
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #788
	beq	.L11015
	movw	r0, #:lower16:.LC513
	mov	r1, r8
	movt	r0, #:upper16:.LC513
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #790
	beq	.L11015
	movw	r0, #:lower16:.LC514
	mov	r1, r8
	movt	r0, #:upper16:.LC514
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #792
	beq	.L11015
	movw	r0, #:lower16:.LC515
	mov	r1, r8
	movt	r0, #:upper16:.LC515
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #793
	beq	.L11015
	movw	r0, #:lower16:.LC516
	mov	r1, r8
	movt	r0, #:upper16:.LC516
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #800
	beq	.L11015
	movw	r0, #:lower16:.LC517
	mov	r1, r8
	movt	r0, #:upper16:.LC517
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #801
	beq	.L11015
	movw	r0, #:lower16:.LC518
	mov	r1, r8
	movt	r0, #:upper16:.LC518
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #802
	beq	.L11015
	movw	r0, #:lower16:.LC519
	mov	r1, r8
	movt	r0, #:upper16:.LC519
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #803
	beq	.L11015
	movw	r0, #:lower16:.LC520
	mov	r1, r8
	movt	r0, #:upper16:.LC520
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #804
	beq	.L11015
	movw	r0, #:lower16:.LC521
	mov	r1, r8
	movt	r0, #:upper16:.LC521
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #805
	beq	.L11015
	movw	r0, #:lower16:.LC522
	mov	r1, r8
	movt	r0, #:upper16:.LC522
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #806
	beq	.L11015
	movw	r0, #:lower16:.LC523
	mov	r1, r8
	movt	r0, #:upper16:.LC523
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #807
	beq	.L11015
	movw	r0, #:lower16:.LC524
	mov	r1, r8
	movt	r0, #:upper16:.LC524
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #808
	beq	.L11015
	movw	r0, #:lower16:.LC525
	mov	r1, r8
	movt	r0, #:upper16:.LC525
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #809
	beq	.L11015
	movw	r0, #:lower16:.LC526
	mov	r1, r8
	movt	r0, #:upper16:.LC526
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #816
	beq	.L11015
	movw	r0, #:lower16:.LC527
	mov	r1, r8
	movt	r0, #:upper16:.LC527
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #817
	beq	.L11015
	movw	r0, #:lower16:.LC528
	mov	r1, r8
	movt	r0, #:upper16:.LC528
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #818
	beq	.L11015
	movw	r0, #:lower16:.LC529
	mov	r1, r8
	movt	r0, #:upper16:.LC529
	bl	strcmp
	cmp	r0, #0
	movweq	r1, #819
	beq	.L11015
	movw	r0, #:lower16:.LC530
	mov	r1, r8
	movt	r0, #:upper16:.LC530
	bl	strcmp
	cmp	r0, #0
	moveq	r1, #820
	beq	.L11015
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC923
	mov	r2, r8
	movt	r1, #:upper16:.LC923
	add	r0, r0, #32
	bl	dev_warn
	movw	r1, #921
	b	.L11015
.L11095:
	ldr	r2, [r5, #100]
	ldrb	r2, [r2, #24]	@ zero_extendqisi2
	tst	r2, #8
	bne	.L11073
	movw	ip, #:lower16:.LC912
	movw	r8, #:lower16:.LC911
	movt	ip, #:upper16:.LC912
	movt	r8, #:upper16:.LC911
	b	.L11018
.L11031:
	movw	r1, #:lower16:.LC929
	str	fp, [sp]
	add	r7, r7, #1
	movt	r1, #:upper16:.LC929
	str	r10, [sp, #4]
	add	r8, r8, #392
	bl	_dev_info
	ldr	r3, [sp, #12]
	cmp	r3, r7
	bne	.L11025
	b	.L11098
.L11076:
	ldr	r10, [sp, #24]
	b	.L11026
.L11073:
	movw	r8, #:lower16:.LC911
	movt	r8, #:upper16:.LC911
	mov	ip, r8
	b	.L11018
.L11106:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC931
	add	r0, r0, #2112
	ldr	r3, [r5, #168]
	movt	r2, #:upper16:.LC931
	add	r1, r1, #32
	ldr	r3, [r3, #640]
	bl	__dynamic_dev_dbg
	b	.L11024
.L11100:
	mvn	r10, #11
	b	.L10992
.L11108:
	.align	2
.L11107:
	.word	.LANCHOR1+3992
	.word	.LANCHOR0+1832
	.word	.LANCHOR0+1848
	.word	.LANCHOR0+1816
	.word	.LANCHOR0+1800
	.word	.LANCHOR1+3972
	.fnend
	.size	mass_storage_function_init, .-mass_storage_function_init
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_write, %function
ccid_bulk_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #2154
	mov	r4, r2
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR4
	movt	r7, #:upper16:.LANCHOR4
	strd	r8, [sp, #16]
	mov	r9, r1
	ldrh	r3, [r7, r3]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r5, [r0, #124]
	tst	r3, #4
	bne	.L11159
.L11110:
	ldr	r3, [r5, #96]
	cmp	r3, #0
	beq	.L11160
	cmp	r4, #0
	beq	.L11161
	cmp	r4, #524
	bcs	.L11162
	add	r8, r5, #92
	add	r10, r5, #192
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r5, #192]
	mov	fp, r0
	cmp	r10, r6
	beq	.L11163
	mov	r0, r6
	sub	r6, r6, #36
	bl	list_del
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L11116
.L11117:
	ldr	r3, [r5, #148]
	cmp	r3, #0
	bne	.L11164
.L11123:
	mov	r3, sp
	ldr	r0, [r6]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r2, r9, r4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L11165
	mov	r1, r4
	bl	__memzero
.L11126:
	ldr	r3, [r5, #96]
	cmp	r3, #0
	bne	.L11128
	movw	r3, #2202
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L11166
.L11129:
	cmp	r6, #0
	mvneq	r4, #18
	beq	.L11124
	ldr	r5, [r5, #104]
	mvn	r4, #18
	ldr	r0, [r6]
	bl	kfree
	mov	r1, r6
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L11124:
	movw	r3, #2274
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L11167
.L11109:
	mov	r0, r4
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11165:
	mov	r1, r9
	mov	r2, r4
	bl	__copy_from_user
	cmp	r0, #0
	bne	.L11126
	str	r4, [r6, #4]
	ldr	r0, [r5, #104]
	mov	r2, #208
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bge	.L11124
	movw	r3, #2226
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L11168
.L11131:
	mov	r3, #1
	mov	r0, r8
	str	r3, [r5, #148]
	bl	_raw_spin_lock_irqsave
	mov	r4, r0
	mov	r2, r10
	ldr	r1, [r5, #196]
	add	r0, r6, #36
	bl	__list_add
	mov	r1, r4
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #96]
	mov	r9, r0
	cmp	r3, #0
	mvnne	r4, #4
	beq	.L11169
.L11132:
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L11124
.L11163:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
.L11116:
	ldr	r3, [r5, #148]
	cmp	r3, #0
	bne	.L11138
	mov	r2, sp
	str	r3, [sp, #12]
	add	ip, r5, #172
	bic	fp, r2, #8128
	movw	r2, #:lower16:autoremove_wake_function
	bic	fp, fp, #63
	add	r1, sp, #24
	str	ip, [sp]
	ldr	r0, [fp, #12]
	movt	r2, #:upper16:autoremove_wake_function
	str	r1, [sp, #24]
	str	r1, [sp, #28]
	str	r0, [sp, #16]
	mov	r0, ip
	str	r2, [sp, #20]
.L11122:
	add	r1, sp, #12
	mov	r2, #1
	bl	prepare_to_wait
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #192]
	mov	r1, r0
	cmp	r10, r3
	mov	r0, r3
	sub	r6, r3, #36
	beq	.L11170
	str	r1, [sp, #4]
	bl	list_del
	mov	r0, r8
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	bne	.L11120
.L11119:
	ldr	r3, [r5, #148]
	cmp	r3, #0
	bne	.L11139
	ldr	r3, [fp, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L11171
	add	r1, sp, #12
	mov	r4, #65024
	ldr	r0, [sp]
	movt	r4, 65535
	bl	finish_wait
	b	.L11124
.L11138:
	ldr	r3, [r5, #148]
	mov	r6, #0
	cmp	r3, #0
	beq	.L11123
.L11164:
	movw	r0, #:lower16:.LC934
	ldr	r1, .L11173
	mvn	r4, #4
	movt	r0, #:upper16:.LC934
	bl	printk
	b	.L11124
.L11128:
	mov	r0, r8
	mvn	r4, #13
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r2, r10
	ldr	r1, [r5, #196]
	add	r0, r6, #36
	bl	__list_add
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L11124
.L11159:
	movw	r1, #:lower16:.LC932
	ldr	r0, .L11173+4
	movt	r1, #:upper16:.LC932
	bl	__dynamic_pr_debug
	b	.L11110
.L11167:
	movw	r1, #:lower16:.LC936
	mov	r2, r4
	ldr	r0, .L11173+8
	movt	r1, #:upper16:.LC936
	bl	__dynamic_pr_debug
	b	.L11109
.L11169:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #2250
	ldrh	r3, [r7, r3]
	tst	r3, #4
	beq	.L11134
	movw	r1, #:lower16:.LC308
	ldr	r2, .L11173
	movt	r1, #:upper16:.LC308
	ldr	r0, .L11173+12
	bl	__dynamic_pr_debug
	b	.L11134
.L11135:
	bl	list_del
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	fp, #0
	beq	.L11172
	ldr	r6, [r5, #104]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, fp
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L11134:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #192]
	mov	r6, r0
	cmp	r10, r4
	mov	r0, r4
	sub	fp, r4, #36
	bne	.L11135
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mvn	r4, #18
	b	.L11132
.L11166:
	movw	r1, #:lower16:.LC308
	ldr	r2, .L11173
	movt	r1, #:upper16:.LC308
	ldr	r0, .L11173+16
	bl	__dynamic_pr_debug
	b	.L11129
.L11170:
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L11119
.L11171:
	bl	schedule
	ldr	r0, [sp]
	b	.L11122
.L11168:
	movw	r1, #:lower16:.LC935
	mov	r2, r0
	ldr	r0, .L11173+20
	movt	r1, #:upper16:.LC935
	bl	__dynamic_pr_debug
	b	.L11131
.L11139:
	mov	r6, #0
.L11120:
	add	r1, sp, #12
	ldr	r0, [sp]
	bl	finish_wait
	b	.L11117
.L11172:
	mvn	r4, #18
	b	.L11132
.L11160:
	movw	r3, #2178
	ldrh	r3, [r7, r3]
	tst	r3, #4
	mvneq	r4, #18
	beq	.L11109
	movw	r1, #:lower16:.LC308
	ldr	r2, .L11173
	mvn	r4, #18
	movt	r1, #:upper16:.LC308
	ldr	r0, .L11173+24
	bl	__dynamic_pr_debug
	b	.L11109
.L11162:
	movw	r0, #:lower16:.LC933
	mov	r3, r4
	ldr	r1, .L11173
	movt	r0, #:upper16:.LC933
	movw	r2, #523
	bl	printk
	mvn	r4, #11
	b	.L11109
.L11161:
	movw	r0, #:lower16:.LC334
	ldr	r1, .L11173
	mvn	r4, #18
	movt	r0, #:upper16:.LC334
	bl	printk
	b	.L11109
.L11174:
	.align	2
.L11173:
	.word	.LANCHOR5-856
	.word	.LANCHOR4+2136
	.word	.LANCHOR4+2256
	.word	.LANCHOR4+2232
	.word	.LANCHOR4+2184
	.word	.LANCHOR4+2208
	.word	.LANCHOR4+2160
	.fnend
	.size	ccid_bulk_write, .-ccid_bulk_write
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_disable, %function
ccid_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r0, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r5, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r5, #108]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r4, [r5, #112]
	cmp	r4, #0
	beq	.L11176
	ldr	r6, [r5, #100]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L11176:
	ldr	r3, [r5, #156]
	cmp	r3, #0
	bne	.L11177
	ldr	r4, [r5, #184]
	cmp	r4, #0
	beq	.L11177
	ldr	r6, [r5, #108]
	ldr	r0, [r4]
	bl	kfree
	mov	r1, r4
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L11177:
	add	r9, r5, #192
	add	r8, r5, #92
	b	.L11178
.L11179:
	bl	list_del
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L11180
	ldr	r6, [r5, #104]
	ldr	r0, [r4, #-36]
	bl	kfree
	mov	r1, r7
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L11178:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #192]
	mov	r6, r0
	cmp	r9, r4
	mov	r0, r4
	sub	r7, r4, #36
	bne	.L11179
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
.L11180:
	mov	r4, #0
	add	r0, r5, #172
	mov	r3, r4
	mov	r2, #1
	mov	r1, #3
	str	r4, [r5, #96]
	str	r4, [r5, #200]
	bl	__wake_up
	mov	r3, r4
	add	r0, r5, #160
	mov	r2, #1
	mov	r1, #3
	bl	__wake_up
	mov	r3, r4
	add	r0, r5, #128
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r1, #3
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up
	.fnend
	.size	ccid_function_disable, .-ccid_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_ioctl, %function
mtp_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #60
	sub	sp, sp, #60
	add	r5, r4, #112
	.syntax divided
@ 61 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r0, r3, [r5]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L11190
	movw	r3, #19713
	mov	r7, r2
	movt	r3, 16416
	mov	r6, r1
	cmp	r1, r3
	bhi	.L11191
	mov	r3, #19712
	movt	r3, 16416
	cmp	r1, r3
	bcs	.L11192
	movw	r3, #19715
	movt	r3, 16392
	cmp	r1, r3
	bne	.L11194
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #8; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L11260
	mov	r1, #8
	add	r0, sp, #16
	movw	r6, #:lower16:.LANCHOR4
	mvn	fp, #13
	bl	__memzero
	movt	r6, #:upper16:.LANCHOR4
	b	.L11206
.L11191:
	movw	r3, #19716
	movt	r3, 16416
	cmp	r1, r3
	beq	.L11192
.L11194:
	add	r8, r4, #88
	mvn	fp, #21
.L11205:
	mov	r0, r8
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #104]
	cmp	r3, #3
	mvneq	fp, #124
	beq	.L11226
	cmp	r3, #0
	movne	r3, #1
	strne	r3, [r4, #104]
.L11226:
	movw	r6, #:lower16:.LANCHOR4
	mov	r0, r8
	movt	r6, #:upper16:.LANCHOR4
	bl	_raw_spin_unlock_irq
.L11206:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r3, #2322
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L11261
.L11189:
	mov	r0, fp
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11192:
	add	r8, r4, #88
	mov	r0, r8
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #104]
	cmp	r3, #3
	beq	.L11262
	cmp	r3, #0
	beq	.L11263
	mov	r3, #2
	mov	r0, r8
	str	r3, [r4, #104]
	bl	_raw_spin_unlock_irq
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #32; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L11264
	mov	r1, #32
	add	r0, sp, #24
	bl	__memzero
	mvn	fp, #13
	b	.L11205
.L11260:
	mov	r1, r7
	mov	r2, #8
	add	r0, sp, #16
	bl	__copy_from_user
	cmp	r0, #0
	movwne	r6, #:lower16:.LANCHOR4
	mvnne	fp, #13
	movtne	r6, #:upper16:.LANCHOR4
	bne	.L11206
	movw	r6, #:lower16:.LANCHOR4
	movw	r3, #2298
	ldr	r8, [sp, #16]
	movt	r6, #:upper16:.LANCHOR4
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L11265
.L11210:
	cmp	r8, #28
	bhi	.L11230
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L11231
	mov	r0, #1000
	add	r9, r4, #88
	bl	msecs_to_jiffies
	mov	fp, r0
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r4, #124]
	add	r10, r4, #124
	mov	r1, r0
	cmp	r10, r7
	beq	.L11266
	mov	r0, r7
	str	r1, [sp, #4]
	sub	r7, r7, #36
	bl	list_del
	mov	r0, r9
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	beq	.L11212
.L11213:
	mov	r3, sp
	ldr	r1, [sp, #20]
	bic	r3, r3, #8128
	ldr	r0, [r7]
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 439 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r2, r1, r8; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L11267
	cmp	r8, #0
	bne	.L11268
.L11225:
	str	r8, [r7, #4]
	ldr	r0, [r4, #100]
	mov	r2, #208
	mov	r1, r7
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	fp, r0, #0
	beq	.L11206
	mov	r0, r9
.L11259:
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	mov	r2, r10
	ldr	r1, [r4, #128]
	add	r0, r7, #36
	bl	__list_add
	mov	r1, r8
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	b	.L11206
.L11263:
	mov	r0, r8
	movw	r6, #:lower16:.LANCHOR4
	bl	_raw_spin_unlock_irq
	movt	r6, #:upper16:.LANCHOR4
	mvn	fp, #18
	b	.L11206
.L11261:
	ldr	r1, [r4, #84]
	movw	r2, #:lower16:.LC938
	mov	r3, fp
	movt	r2, #:upper16:.LC938
	ldr	r0, .L11272
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11189
.L11264:
	mov	r1, r7
	mov	r2, #32
	add	r0, sp, #24
	bl	__copy_from_user
	subs	r9, r0, #0
	mvnne	fp, #13
	bne	.L11205
	ldr	r0, [sp, #24]
	bl	fget
	subs	r7, r0, #0
	mvneq	fp, #8
	beq	.L11205
	str	r7, [r4, #216]
	ldrd	r2, [sp, #32]
	strd	r2, [r4, #224]
	ldrd	r2, [sp, #40]
	strd	r2, [r4, #232]
	.syntax divided
@ 1028 "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	movw	r3, #19716
	movt	r3, 16416
	cmp	r6, r3
	beq	.L11269
	mov	r3, #19712
	movt	r3, 16416
	cmp	r6, r3
	addeq	r1, r4, #184
	addne	r1, r4, #200
	streq	r9, [r4, #240]
.L11203:
	ldr	r0, [r4, #180]
	bl	queue_work
	ldr	r0, [r4, #180]
	bl	flush_workqueue
	mov	r0, r7
	bl	fput
	.syntax divided
@ 1052 "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	fp, [r4, #252]
	b	.L11205
.L11190:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	fp, #15
	b	.L11189
.L11262:
	mov	r3, #1
	mov	r0, r8
	movw	r6, #:lower16:.LANCHOR4
	mvn	fp, #124
	str	r3, [r4, #104]
	movt	r6, #:upper16:.LANCHOR4
	bl	_raw_spin_unlock_irq
	b	.L11206
.L11267:
	mov	r2, r8
	bl	__copy_from_user
	cmp	r0, #0
	beq	.L11225
.L11224:
	mov	r0, r9
	mvn	fp, #13
	b	.L11259
.L11266:
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
.L11212:
	mov	r3, sp
	movw	r2, #:lower16:autoremove_wake_function
	bic	r3, r3, #8128
	add	r1, sp, #36
	bic	r3, r3, #63
	movt	r2, #:upper16:autoremove_wake_function
	ldr	r0, [r3, #12]
	add	ip, r4, #156
	str	r3, [sp, #8]
	mov	r3, #0
	str	ip, [sp, #4]
	str	r3, [sp, #24]
	str	r0, [sp, #28]
	str	r2, [sp, #32]
	str	r1, [sp, #36]
	str	r1, [sp, #40]
.L11218:
	add	r1, sp, #24
	mov	r2, #1
	ldr	r0, [sp, #4]
	bl	prepare_to_wait
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #124]
	mov	r1, r0
	cmp	r10, r3
	mov	r0, r3
	sub	r7, r3, #36
	beq	.L11270
	str	r1, [sp, #12]
	bl	list_del
	mov	r0, r9
	ldr	r1, [sp, #12]
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	bne	.L11216
.L11215:
	ldr	r3, [sp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L11217
	bl	schedule_timeout
	subs	fp, r0, #0
	bne	.L11218
.L11221:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r4, #124]
	mov	fp, r0
	cmp	r10, r7
	beq	.L11271
	mov	r0, r7
	sub	r7, r7, #36
	bl	list_del
	mov	r1, fp
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	add	r1, sp, #24
	ldr	r0, [sp, #4]
	bl	finish_wait
	cmp	r7, #0
	bne	.L11213
.L11258:
	mvn	fp, #61
	b	.L11206
.L11269:
	mov	r3, #1
	add	r1, r4, #184
	str	r3, [r4, #240]
	ldrh	r3, [sp, #48]
	strh	r3, [r4, #244]	@ movhi
	ldr	r3, [sp, #52]
	str	r3, [r4, #248]
	b	.L11203
.L11268:
	mov	r1, r8
	bl	__memzero
	b	.L11224
.L11216:
	cmp	fp, #0
	beq	.L11221
	add	r1, sp, #24
	ldr	r0, [sp, #4]
	bl	finish_wait
	b	.L11213
.L11270:
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	b	.L11215
.L11265:
	ldr	r1, [r4, #84]
	movw	r2, #:lower16:.LC937
	mov	r3, r8
	movt	r2, #:upper16:.LC937
	ldr	r0, .L11272+4
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11210
.L11271:
	mov	r1, r0
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	add	r1, sp, #24
	ldr	r0, [sp, #4]
	mvn	fp, #61
	bl	finish_wait
	b	.L11206
.L11231:
	mvn	fp, #18
	b	.L11206
.L11230:
	mvn	fp, #21
	b	.L11206
.L11217:
	add	r1, sp, #24
	ldr	r0, [sp, #4]
	bl	finish_wait
	b	.L11258
.L11273:
	.align	2
.L11272:
	.word	.LANCHOR4+2304
	.word	.LANCHOR4+2280
	.fnend
	.size	mtp_ioctl, .-mtp_ioctl
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_ep_autoconfig_ss.constprop.166, %function
usb_ep_autoconfig_ss.constprop.166:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r7, r0
	mov	r6, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r10, [r0, #28]
	movw	r0, #:lower16:.LC504
	ldrb	r8, [r1, #3]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	movt	r0, #:upper16:.LC504
	mov	r1, r10
	bl	strcmp
	ldr	r9, [r5, #8]!
	cmp	r0, #0
	and	r8, r8, #3
	sub	r4, r9, #12
	mov	fp, r9
	bne	.L11275
	cmp	r8, #3
	beq	.L11357
	movw	r0, #:lower16:.LC507
	mov	r1, r10
	movt	r0, #:upper16:.LC507
	bl	strcmp
	cmp	r0, #0
	beq	.L11286
.L11285:
	cmp	fp, r5
	beq	.L11290
.L11284:
	movw	r3, #:lower16:.LC506
	movw	r9, #:lower16:_ctype
	movt	r3, #:upper16:.LC506
	movw	r10, #:lower16:.LANCHOR1
	movt	r9, #:upper16:_ctype
	movt	r10, #:upper16:.LANCHOR1
	str	r3, [sp]
	b	.L11306
.L11293:
	ldr	r4, [r4, #12]
	cmp	r5, r4
	sub	r4, r4, #12
	beq	.L11290
.L11306:
	ldr	r3, [r4]
	cmp	r3, #0
	bne	.L11293
	ldrb	r3, [r6, #3]	@ zero_extendqisi2
	ands	fp, r3, #3
	beq	.L11293
	ldr	r8, [r4, #4]
	ldrb	r2, [r8]	@ zero_extendqisi2
	cmp	r2, #101
	bne	.L11293
	ldrb	r2, [r8, #2]	@ zero_extendqisi2
	cmp	r2, #45
	beq	.L11294
	mov	r1, #45
	mov	r0, r8
	bl	strrchr
	subs	r2, r0, #0
	beq	.L11295
	cmp	fp, #2
	beq	.L11296
	cmp	fp, #3
	ldrb	r3, [r2, #2]	@ zero_extendqisi2
	beq	.L11358
	cmp	r3, #115
	bne	.L11293
.L11298:
	ldrb	r3, [r2, #-1]	@ zero_extendqisi2
	ldrb	r2, [r9, r3]	@ zero_extendqisi2
	tst	r2, #4
	bne	.L11294
	ldrsb	r2, [r6, #2]
	cmp	r2, #0
	blt	.L11359
	cmp	r3, #116
	bne	.L11293
.L11294:
	ldrh	r3, [r6, #4]	@ unaligned
	cmp	r3, #0
	ldrheq	r3, [r4, #20]
	strheq	r3, [r6, #4]	@ unaligned
	cmp	fp, #1
	ubfx	r2, r3, #0, #11
	beq	.L11301
	cmp	fp, #3
	bne	.L11302
	ldr	r0, [r7, #20]
	cmp	r0, #2
	movls	r1, #1
	movhi	r1, #0
	cmp	r2, #64
	movls	r1, #0
	cmp	r1, #0
	bne	.L11293
.L11301:
	ldrh	r1, [r4, #20]
	cmp	r1, r2
	bcc	.L11293
	ldr	r2, [r7, #20]
	cmp	r2, #2
	bls	.L11360
.L11302:
	ldrb	r3, [r6, #2]	@ zero_extendqisi2
	and	r3, r3, #128
	strb	r3, [r6, #2]
	ldr	r0, [r4, #4]
	ldrb	r2, [r0, #2]	@ zero_extendqisi2
	ldrb	r2, [r9, r2]	@ zero_extendqisi2
	tst	r2, #4
	bne	.L11361
	ldr	r2, [r10, #3772]
	add	r2, r2, #1
	cmp	r2, #15
	str	r2, [r10, #3772]
	bhi	.L11293
	orr	r3, r3, r2
	uxtb	r3, r3
	strb	r3, [r6, #2]
.L11304:
	cmp	fp, #2
	bne	.L11305
	ldrh	r2, [r4, #20]
	cmp	r2, #64
	movge	r2, #64
	strh	r2, [r6, #4]	@ unaligned
.L11305:
	strb	r3, [r4, #25]
.L11281:
	mov	r3, #0
	str	r3, [r4, #28]
	str	r3, [r4, #32]
	b	.L11274
.L11275:
	movw	r0, #:lower16:.LC507
	mov	r1, r10
	movt	r0, #:upper16:.LC507
	bl	strcmp
	cmp	r0, #0
	bne	.L11285
	cmp	r8, #3
	beq	.L11362
.L11286:
	cmp	r8, #2
	bne	.L11285
	ldrsb	r3, [r6, #2]
	cmp	r3, #0
	bge	.L11285
	cmp	r5, r9
	beq	.L11290
	movw	r9, #:lower16:.LC942
	mov	r8, r4
	movt	r9, #:upper16:.LC942
	b	.L11292
.L11363:
	ldr	r8, [r8, #12]
	cmp	r5, r8
	sub	r8, r8, #12
	beq	.L11284
.L11292:
	mov	r1, r9
	ldr	r0, [r8, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L11363
.L11291:
	cmp	r8, #0
	beq	.L11284
	ldr	r3, [r8]
	cmp	r3, #0
	bne	.L11284
	mov	r2, r6
	mov	r1, r8
	mov	r0, r7
	bl	ep_matches.part.11
	cmp	r0, #0
	bne	.L11311
	ldr	fp, [r7, #8]
	sub	r4, fp, #12
	b	.L11285
.L11357:
	cmp	r5, r9
	beq	.L11290
	movw	r9, #:lower16:.LC939
	mov	r8, r4
	movt	r9, #:upper16:.LC939
	b	.L11279
.L11364:
	ldr	r8, [r8, #12]
	cmp	r5, r8
	sub	r8, r8, #12
	beq	.L11280
.L11279:
	mov	r1, r9
	ldr	r0, [r8, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L11364
	cmp	r8, #0
	beq	.L11280
	ldr	r3, [r8]
	cmp	r3, #0
	bne	.L11280
	mov	r2, r6
	mov	r1, r8
	mov	r0, r7
	bl	ep_matches.part.11
	cmp	r0, #0
	bne	.L11311
	ldr	r4, [r7, #8]
	cmp	r5, r4
	sub	r4, r4, #12
	bne	.L11280
.L11290:
	mov	r4, #0
.L11274:
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11358:
	cmp	r3, #115
	str	r2, [sp, #4]
	beq	.L11293
	ldr	r0, [sp]
	ldr	r1, [r7, #28]
	bl	strcmp
	cmp	r0, #0
	ldr	r2, [sp, #4]
	bne	.L11298
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #105
	bne	.L11298
	b	.L11293
.L11360:
	tst	r3, #7168
	bne	.L11293
	b	.L11302
.L11295:
	mov	r0, r8
	bl	strlen
	add	r2, r8, r0
	b	.L11298
.L11361:
	add	r0, r0, #2
	mov	r2, #10
	mov	r1, #0
	bl	simple_strtoul
	ldrb	r3, [r6, #2]	@ zero_extendqisi2
	orr	r3, r3, r0
	uxtb	r3, r3
	strb	r3, [r6, #2]
	b	.L11304
.L11296:
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #98
	bne	.L11293
	b	.L11298
.L11362:
	cmp	r5, r9
	movwne	r9, #:lower16:.LC941
	movne	r8, r4
	movtne	r9, #:upper16:.LC941
	bne	.L11287
	b	.L11290
.L11365:
	ldr	r8, [r8, #12]
	cmp	r5, r8
	sub	r8, r8, #12
	beq	.L11284
.L11287:
	mov	r1, r9
	ldr	r0, [r8, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L11365
	b	.L11291
.L11280:
	movw	r9, #:lower16:.LC940
	mov	r8, r4
	movt	r9, #:upper16:.LC940
	b	.L11283
.L11366:
	ldr	r8, [r8, #12]
	cmp	r5, r8
	sub	r8, r8, #12
	beq	.L11284
.L11283:
	mov	r1, r9
	ldr	r0, [r8, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L11366
	b	.L11291
.L11359:
	cmp	r3, #110
	bne	.L11293
	b	.L11294
.L11311:
	mov	r4, r8
	b	.L11281
	.fnend
	.size	usb_ep_autoconfig_ss.constprop.166, .-usb_ep_autoconfig_ss.constprop.166
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_bind, %function
rmnet_smd_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r8, [r0, #24]
	str	r8, [r1, #84]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L11370
	movw	r5, #:lower16:.LANCHOR0
	mov	r4, r1
	ldr	r1, .L11428
	mov	r7, r0
	add	r2, r3, #1
	add	r0, r3, #12
	movt	r5, #:upper16:.LANCHOR0
	str	r4, [r7, r0, lsl #2]
	strb	r2, [r7, #44]
	strb	r3, [r4, #104]
	strb	r3, [r5, #1866]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss.constprop.166
	cmp	r0, #0
	beq	.L11370
	add	r1, r5, #1888
	str	r8, [r0]
	str	r0, [r4, #92]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss.constprop.166
	cmp	r0, #0
	beq	.L11370
	ldr	r1, .L11428+4
	str	r8, [r0]
	str	r0, [r4, #88]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss.constprop.166
	subs	r6, r0, #0
	beq	.L11370
	str	r8, [r6]
	str	r6, [r4, #96]
	ldr	r3, [r7, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L11427
.L11371:
	ldr	r3, [r6, #8]
	mov	r1, #208
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L11372
	mov	r2, #8
	movw	r7, #:lower16:kmalloc_caches
	movt	r7, #:upper16:kmalloc_caches
	str	r2, [r5, #4]
	ldr	r0, [r7, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5]
	beq	.L11374
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L11374
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L11372:
	mvn	r3, #11
	mov	r5, r3
	str	r3, [r4, #100]
.L11367:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11427:
	ldrb	r1, [r5, #1878]	@ zero_extendqisi2
	ldrb	r2, [r5, #1890]	@ zero_extendqisi2
	ldrb	r3, [r5, #1902]	@ zero_extendqisi2
	strb	r1, [r5, #1914]
	strb	r2, [r5, #1926]
	strb	r3, [r5, #1938]
	b	.L11371
.L11374:
	cmn	r5, #4096
	str	r5, [r4, #100]
	bhi	.L11367
	movw	r3, #:lower16:rmnet_smd_notify_complete
	mov	r2, #8
	movt	r3, #:upper16:rmnet_smd_notify_complete
	mov	r6, #4
	mov	r8, #16
	str	r3, [r5, #28]
	ldr	r3, [r4, #100]
	str	r4, [r3, #32]
	ldr	r3, [r4, #100]
	str	r2, [r3, #4]
.L11380:
	ldr	r3, [r7, #24]
	mov	r2, #16
	mov	r1, #208
	mov	r5, r2
	subs	r0, r3, #0
	beq	.L11375
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L11406
.L11375:
	ldr	r3, [r7, #44]
	mov	r2, #2048
	mov	r1, #208
	subs	r0, r3, #0
	streq	r8, [r5]
	beq	.L11378
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	beq	.L11425
.L11378:
	cmn	r5, #4096
	add	r2, r4, #108
	add	r0, r5, #8
	bhi	.L11379
	ldr	r1, [r4, #112]
	bl	__list_add
	subs	r6, r6, #1
	bne	.L11380
	mov	r6, #8
	mov	r8, #16
.L11385:
	ldr	r3, [r7, #24]
	mov	r2, #16
	mov	r1, #208
	mov	r5, r2
	subs	r0, r3, #0
	beq	.L11381
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L11406
.L11381:
	ldr	r3, [r7, #44]
	mov	r2, #2048
	mov	r1, #208
	subs	r0, r3, #0
	streq	r8, [r5]
	beq	.L11384
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	beq	.L11425
.L11384:
	cmn	r5, #4096
	add	r2, r4, #116
	add	r0, r5, #8
	bhi	.L11379
	ldr	r1, [r4, #120]
	bl	__list_add
	subs	r6, r6, #1
	bne	.L11385
	movw	r9, #:lower16:rmnet_smd_complete_epout
	mov	r8, #8
	movt	r9, #:upper16:rmnet_smd_complete_epout
	mov	r10, #2048
.L11389:
	ldr	r6, [r4, #88]
	mov	r1, #208
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L11406
	str	r10, [r5, #4]
	ldr	r3, [r7, #44]
	mov	ip, #16
	mov	r2, #2048
	mov	r1, #208
	subs	r0, r3, #0
	streq	ip, [r5]
	beq	.L11388
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L11388
.L11426:
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	mvn	r5, #11
	ldr	r3, [r3, #12]
	blx	r3
	b	.L11379
.L11406:
	mvn	r5, #11
.L11379:
	mov	r0, r4
	bl	rmnet_smd_free_buf
	mov	r3, #0
	str	r3, [r4, #88]
	str	r3, [r4, #92]
	str	r3, [r4, #96]
	b	.L11367
.L11425:
	mov	r0, r5
	mvn	r5, #11
	bl	kfree
	b	.L11379
.L11388:
	cmn	r5, #4096
	add	r2, r4, #148
	add	r0, r5, #36
	bhi	.L11379
	str	r10, [r5, #4]
	str	r9, [r5, #28]
	str	r4, [r5, #32]
	ldr	r1, [r4, #152]
	bl	__list_add
	subs	r8, r8, #1
	bne	.L11389
	movw	r9, #:lower16:rmnet_smd_complete_epin
	mov	r8, #8
	movt	r9, #:upper16:rmnet_smd_complete_epin
	mov	r10, #2048
.L11393:
	ldr	r6, [r4, #92]
	mov	r1, #208
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L11406
	str	r10, [r5, #4]
	ldr	r3, [r7, #44]
	mov	ip, #16
	mov	r2, #2048
	mov	r1, #208
	subs	r0, r3, #0
	streq	ip, [r5]
	beq	.L11392
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	beq	.L11426
.L11392:
	cmn	r5, #4096
	add	r2, r4, #140
	add	r0, r5, #36
	bhi	.L11379
	str	r9, [r5, #28]
	str	r4, [r5, #32]
	ldr	r1, [r4, #144]
	bl	__list_add
	subs	r8, r8, #1
	bne	.L11393
	mov	r5, r8
	b	.L11367
.L11370:
	mvn	r5, #18
	b	.L11367
.L11429:
	.align	2
.L11428:
	.word	.LANCHOR0+1876
	.word	.LANCHOR0+1900
	.fnend
	.size	rmnet_smd_bind, .-rmnet_smd_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_bind, %function
rmnet_sdio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #24]
	str	r7, [r1, #84]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L11437
	movw	r5, #:lower16:.LANCHOR0
	mov	r4, r1
	ldr	r1, .L11457
	mov	r6, r0
	add	r2, r3, #1
	add	r0, r3, #12
	movt	r5, #:upper16:.LANCHOR0
	str	r4, [r6, r0, lsl #2]
	strb	r2, [r6, #44]
	strb	r3, [r4, #104]
	strb	r3, [r5, #1950]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss.constprop.166
	cmp	r0, #0
	beq	.L11433
	ldr	r1, .L11457+4
	str	r7, [r0]
	str	r0, [r4, #92]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss.constprop.166
	cmp	r0, #0
	beq	.L11433
	add	r1, r5, #1984
	str	r7, [r0]
	str	r0, [r4, #88]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss.constprop.166
	cmp	r0, #0
	beq	.L11433
	str	r7, [r0]
	str	r0, [r4, #96]
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L11434
	ldrb	r1, [r5, #1962]	@ zero_extendqisi2
	ldrb	r2, [r5, #1974]	@ zero_extendqisi2
	ldrb	r3, [r5, #1986]	@ zero_extendqisi2
	strb	r1, [r5, #1998]
	strb	r2, [r5, #2010]
	strb	r3, [r5, #2022]
.L11434:
	mov	r2, #0
	add	r1, r4, #252
	ldr	r0, [r4, #200]
	bl	queue_delayed_work
	mov	r0, #0
	b	.L11430
.L11433:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	beq	.L11437
	mov	r2, #0
	mvn	r0, #18
	str	r2, [r3]
.L11430:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11437:
	mvn	r0, #18
	b	.L11430
.L11458:
	.align	2
.L11457:
	.word	.LANCHOR0+1960
	.word	.LANCHOR0+1972
	.fnend
	.size	rmnet_sdio_bind, .-rmnet_sdio_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_bind, %function
rmnet_mux_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #24]
	str	r7, [r1, #84]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L11466
	movw	r5, #:lower16:.LANCHOR0
	mov	r4, r1
	ldr	r1, .L11486
	mov	r6, r0
	add	r2, r3, #1
	add	r0, r3, #12
	movt	r5, #:upper16:.LANCHOR0
	str	r4, [r6, r0, lsl #2]
	strb	r2, [r6, #44]
	strb	r3, [r4, #356]
	strb	r3, [r5, #2034]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss.constprop.166
	cmp	r0, #0
	beq	.L11462
	ldr	r1, .L11486+4
	str	r7, [r0]
	str	r0, [r4, #92]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss.constprop.166
	cmp	r0, #0
	beq	.L11462
	ldr	r1, .L11486+8
	str	r7, [r0]
	str	r0, [r4, #88]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss.constprop.166
	cmp	r0, #0
	beq	.L11462
	str	r7, [r0]
	str	r0, [r4, #96]
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L11463
	ldrb	r1, [r5, #2046]	@ zero_extendqisi2
	ldrb	r2, [r5, #2058]	@ zero_extendqisi2
	ldrb	r3, [r5, #2070]	@ zero_extendqisi2
	strb	r1, [r5, #2082]
	strb	r2, [r5, #2094]
	strb	r3, [r5, #2106]
.L11463:
	mov	r2, #0
	add	r1, r4, #256
	ldr	r0, [r4, #376]
	bl	queue_delayed_work
	mov	r0, #0
	b	.L11459
.L11462:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	beq	.L11466
	mov	r2, #0
	mvn	r0, #18
	str	r2, [r3]
.L11459:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11466:
	mvn	r0, #18
	b	.L11459
.L11487:
	.align	2
.L11486:
	.word	.LANCHOR0+2044
	.word	.LANCHOR0+2056
	.word	.LANCHOR0+2068
	.fnend
	.size	rmnet_mux_bind, .-rmnet_mux_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_bind, %function
audio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r5, .L11507
	movw	r4, #:lower16:.LANCHOR0
	strd	r6, [sp, #8]
	movt	r4, #:upper16:.LANCHOR0
	movw	ip, #44100
	strd	r8, [sp, #16]
	mov	r3, #2
	mov	r6, #0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	movw	lr, #2136
	.pad #12
	sub	sp, sp, #12
	strh	ip, [r4, lr]	@ movhi
	ldr	lr, [r0, #24]
	strb	r6, [r5, #2]
	cmp	r2, #15
	str	ip, [sp, #4]
	strb	r3, [r4, #2123]
	strb	r3, [r4, #2132]
	bhi	.L11489
	add	r3, r2, #1
	add	ip, r2, #12
	uxtb	r3, r3
	str	r1, [r0, ip, lsl #2]
	cmp	r3, #15
	strb	r2, [r4, #2142]
	strb	r3, [r0, #44]
	bhi	.L11489
	mov	r5, r0
	mov	r6, r1
	add	r0, r3, #12
	add	r2, r2, #2
	add	r1, r4, #2176
	str	r6, [r5, r0, lsl #2]
	strb	r2, [r5, #44]
	strb	r3, [r4, #2154]
	strb	r3, [r4, #2166]
	ldr	r0, [lr]
	bl	usb_ep_autoconfig_ss.constprop.166
	subs	r8, r0, #0
	beq	.L11489
	str	r8, [r6, #104]
	movw	r10, #:lower16:kmalloc_caches
	movw	r9, #:lower16:audio_data_complete
	str	r6, [r8]
	ldr	r3, [r5, #24]
	movt	r10, #:upper16:kmalloc_caches
	movt	r9, #:upper16:audio_data_complete
	mov	r7, #4
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	ldrbhi	r3, [r4, #2178]	@ zero_extendqisi2
	strbhi	r3, [r4, #2190]
	b	.L11494
.L11506:
	ldr	ip, [r10, #32]
	subs	r0, ip, #0
	streq	r3, [r4]
	beq	.L11493
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4]
	beq	.L11504
.L11493:
	mov	r3, #256
	add	r5, r6, #108
	mov	r0, r5
	str	r3, [r4, #4]
	str	r9, [r4, #28]
	str	r6, [r4, #32]
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	add	r2, r6, #96
	ldr	r1, [r6, #100]
	add	r0, r4, #36
	bl	__list_add
	mov	r1, fp
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	subs	r7, r7, #1
	beq	.L11505
.L11494:
	ldr	r3, [r8, #8]
	mov	r1, #208
	mov	r0, r8
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	mov	r2, #256
	mov	r1, #208
	mov	r3, #16
	bne	.L11506
.L11491:
	mvn	r0, #11
.L11488:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11504:
	ldr	r3, [r8, #8]
	mov	r1, r4
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	b	.L11491
.L11489:
.L11495:
	mvn	r0, #18
	b	.L11488
.L11505:
	mov	r0, r7
	b	.L11488
.L11508:
	.align	2
.L11507:
	.word	.LANCHOR0+2136
	.fnend
	.size	audio_bind, .-audio_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	__ffs_func_bind_do_descs, %function
__ffs_func_bind_do_descs:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	bne	.L11526
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r0, [r3, #48]
	.pad #4
	sub	sp, sp, #4
	cmp	r0, #0
	beq	.L11512
	mov	ip, #2
	str	r2, [r0, r1, lsl #2]
.L11513:
	cmp	r2, #0
	beq	.L11515
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	cmp	r1, #5
	bne	.L11515
	ldrb	r6, [r2, #2]	@ zero_extendqisi2
	ldr	r8, [r3, #12]
	and	r6, r6, #15
	sub	r5, r6, #1
	rsb	r5, r5, r5, lsl #3
	lsl	r5, r5, #2
	add	r7, r8, r5
	add	ip, r7, ip, lsl #2
	ldr	r1, [ip, #8]
	cmp	r1, #0
	bne	.L11517
	str	r2, [ip, #8]
	ldr	r4, [r8, r5]
	cmp	r4, #0
	beq	.L11516
	ldr	r3, [r7, #8]
	ldrh	r0, [r2, #4]	@ unaligned
	ldrb	r3, [r3, #2]	@ zero_extendqisi2
	cmp	r0, #0
	strb	r3, [r2, #2]
	beq	.L11527
.L11515:
	mov	r0, #0
.L11509:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11526:
	mov	r0, #0
	bx	lr
.L11512:
	ldr	r0, [r3, #44]
	cmp	r0, #0
	beq	.L11514
	mov	ip, #1
	str	r2, [r0, r1, lsl #2]
	b	.L11513
.L11527:
	ldr	r3, [r7, #8]
	ldrh	r3, [r3, #4]	@ unaligned
	strh	r3, [r2, #4]	@ unaligned
	b	.L11509
.L11514:
	ldr	lr, [r3, #52]
	mov	ip, r0
	str	r2, [lr, r1, lsl #2]
	b	.L11513
.L11516:
	mov	r1, r2
	ldr	r0, [r3, #4]
	mov	r9, r3
	mov	r10, r2
	bl	usb_ep_autoconfig_ss.constprop.166
	subs	fp, r0, #0
	beq	.L11518
	ldr	r3, [r9, #12]
	mov	r1, #208
	ldr	r2, [fp, #8]
	add	r3, r3, r5
	str	r3, [fp]
	ldr	r3, [r2, #8]
	blx	r3
	subs	r3, r0, #0
	beq	.L11519
	str	fp, [r8, r5]
	mov	r0, r4
	str	r3, [r7, #4]
	ldrb	r3, [r10, #2]	@ zero_extendqisi2
	and	r3, r3, #15
	add	r3, r9, r3
	strb	r6, [r3, #16]
	b	.L11509
.L11517:
	mvn	r0, #21
	b	.L11509
.L11518:
	movw	r0, #65012
	movt	r0, 65535
	b	.L11509
.L11519:
	mvn	r0, #11
	b	.L11509
	.fnend
	.size	__ffs_func_bind_do_descs, .-__ffs_func_bind_do_descs
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_bind, %function
adb_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #2346
	movt	r5, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r4, r1
	strd	r8, [sp, #16]
	mov	r6, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r5, r3]
	.pad #36
	sub	sp, sp, #36
	ldr	r2, [r0, #24]
	tst	r3, #4
	str	r2, [sp, #28]
	str	r2, [r1, #84]
	bne	.L11574
.L11529:
	ldrb	r3, [r6, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L11573
	add	r1, r3, #12
	movw	r2, #2370
	movw	r7, #:lower16:.LANCHOR0
	str	r4, [r6, r1, lsl #2]
	ldrh	r2, [r5, r2]
	movt	r7, #:upper16:.LANCHOR0
	add	r1, r3, #1
	strb	r3, [r7, #2202]
	strb	r1, [r6, #44]
	ldr	r9, [r4, #84]
	tst	r2, #4
	bne	.L11575
.L11532:
	ldr	r1, .L11582
	ldr	r0, [r9]
	bl	usb_ep_autoconfig_ss.constprop.166
	subs	r8, r0, #0
	beq	.L11576
	movw	r3, #2418
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L11577
.L11535:
	ldr	r1, .L11582+4
	str	r4, [r8]
	str	r8, [r4, #92]
	ldr	r0, [r9]
	bl	usb_ep_autoconfig_ss.constprop.166
	subs	r8, r0, #0
	beq	.L11578
	movw	r3, #2466
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L11579
.L11537:
	mov	r0, r8
	str	r4, [r8]
	str	r8, [r4, #96]
	bl	adb_request_new.constprop.131
	cmp	r0, #0
	beq	.L11538
	movw	r3, #:lower16:adb_complete_out
	movw	r9, #:lower16:adb_complete_in
	str	r5, [sp, #24]
	movt	r3, #:upper16:adb_complete_out
	movt	r9, #:upper16:adb_complete_in
	mov	r8, #4
	add	fp, r4, #88
	str	r3, [r0, #28]
	add	r3, r4, #120
	str	r0, [r4, #152]
	str	r3, [sp, #20]
.L11539:
	ldr	r0, [r4, #92]
	bl	adb_request_new.constprop.131
	subs	r10, r0, #0
	mov	r0, fp
	beq	.L11538
	str	r9, [r10, #28]
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	add	r0, r10, #36
	ldr	r2, [sp, #20]
	ldr	r1, [r4, #124]
	bl	__list_add
	mov	r1, r5
	mov	r0, fp
	bl	_raw_spin_unlock_irqrestore
	subs	r8, r8, #1
	bne	.L11539
	ldr	r2, [r6, #24]
	ldr	r5, [sp, #24]
	ldr	r3, [r2]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L11580
.L11541:
	movw	r3, #2490
	ldrh	r0, [r5, r3]
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	bne	.L11581
.L11528:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11580:
	ldrb	r1, [r7, #2214]	@ zero_extendqisi2
	ldrb	r3, [r7, #2226]	@ zero_extendqisi2
	strb	r1, [r7, #2238]
	strb	r3, [r7, #2250]
	ldr	r0, [r2]
	ldr	r0, [r0, #20]
	cmp	r0, #4
	strbhi	r1, [r7, #2262]
	strbhi	r3, [r7, #2274]
	b	.L11541
.L11574:
	mov	r3, r2
	movw	r2, #:lower16:.LC945
	ldr	r0, .L11582+8
	ldr	r1, [r3]
	movt	r2, #:upper16:.LC945
	mov	r3, r4
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11529
.L11575:
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC946
	mov	r3, r4
	movt	r2, #:upper16:.LC946
	ldr	r0, .L11582+12
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11532
.L11577:
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC948
	movt	r2, #:upper16:.LC948
	ldr	r0, .L11582+16
	ldr	r3, [r8, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11535
.L11579:
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC950
	movt	r2, #:upper16:.LC950
	ldr	r0, .L11582+20
	ldr	r3, [r8, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11537
.L11581:
	ldr	ip, [r4, #96]
	movw	r0, #:lower16:.LC944
	movw	r3, #:lower16:.LC943
	ldr	lr, [r2]
	movt	r0, #:upper16:.LC944
	movt	r3, #:upper16:.LC943
	ldr	r1, [sp, #28]
	ldr	r2, [r4, #92]
	ldr	ip, [ip, #4]
	ldr	lr, [lr, #20]
	ldr	r1, [r1]
	ldr	r4, [r4]
	str	ip, [sp, #8]
	ldr	ip, [r2, #4]
	movw	r2, #:lower16:.LC952
	cmp	lr, #2
	movt	r2, #:upper16:.LC952
	movls	r3, r0
	add	r1, r1, #32
	ldr	r0, .L11582+24
	stm	sp, {r4, ip}
	bl	__dynamic_dev_dbg
	mov	r0, #0
	b	.L11528
.L11576:
	movw	r3, #2394
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L11573
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC947
	movt	r2, #:upper16:.LC947
	ldr	r0, .L11582+28
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L11573:
	mvn	r0, #18
	b	.L11528
.L11578:
	movw	r3, #2442
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L11573
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC949
	movt	r2, #:upper16:.LC949
	ldr	r0, .L11582+32
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	mvn	r0, #18
	b	.L11528
.L11538:
	movw	r0, #:lower16:.LC951
	movt	r0, #:upper16:.LC951
	bl	printk
	mvn	r0, #0
	b	.L11528
.L11583:
	.align	2
.L11582:
	.word	.LANCHOR0+2212
	.word	.LANCHOR0+2224
	.word	.LANCHOR4+2328
	.word	.LANCHOR4+2352
	.word	.LANCHOR4+2400
	.word	.LANCHOR4+2448
	.word	.LANCHOR4+2472
	.word	.LANCHOR4+2376
	.word	.LANCHOR4+2424
	.fnend
	.size	adb_function_bind, .-adb_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_function_bind, %function
acc_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r5, #:lower16:.LANCHOR4
	movw	r3, #2514
	movt	r5, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r4, r1
	strd	r8, [sp, #16]
	mov	r7, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r5, r3]
	.pad #36
	sub	sp, sp, #36
	ldr	r2, [r0, #24]
	tst	r3, #4
	str	r2, [sp, #28]
	bne	.L11650
.L11585:
	movw	r2, #:lower16:.LC954
	mov	r1, #0
	ldr	r0, .L11660
	movt	r2, #:upper16:.LC954
	movw	r6, #:lower16:.LANCHOR0
	bl	__hid_register_driver
	subs	r10, r0, #0
	movt	r6, #:upper16:.LANCHOR0
	bne	.L11584
	str	r10, [r4, #1644]
	ldrb	r3, [r7, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L11590
	add	r1, r3, #12
	movw	r2, #2538
	str	r4, [r7, r1, lsl #2]
	ldrh	r2, [r5, r2]
	add	r1, r3, #1
	strb	r3, [r6, #2286]
	strb	r1, [r7, #44]
	ldr	r9, [r4, #84]
	tst	r2, #4
	bne	.L11651
.L11588:
	ldr	r1, .L11660+4
	ldr	r0, [r9]
	bl	usb_ep_autoconfig_ss.constprop.166
	subs	r8, r0, #0
	beq	.L11652
	movw	r3, #2586
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L11653
.L11591:
	ldr	r1, .L11660+8
	str	r4, [r8]
	str	r8, [r4, #92]
	ldr	r0, [r9]
	bl	usb_ep_autoconfig_ss.constprop.166
	subs	r8, r0, #0
	beq	.L11654
	movw	r3, #2634
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L11655
.L11593:
	ldr	r1, .L11660+8
	str	r4, [r8]
	str	r8, [r4, #96]
	ldr	r0, [r9]
	bl	usb_ep_autoconfig_ss.constprop.166
	subs	r8, r0, #0
	beq	.L11656
	movw	r3, #2682
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L11657
.L11595:
	movw	fp, #:lower16:acc_complete_in
	add	r9, r4, #1648
	str	r4, [r8]
	movt	fp, #:upper16:acc_complete_in
	add	r3, r4, #88
	str	r8, [r4, #96]
	add	r9, r9, #8
	mov	r8, #4
	str	r5, [sp, #24]
	mov	r5, fp
	str	r3, [sp, #16]
	str	r6, [sp, #20]
.L11597:
	ldr	r0, [r4, #92]
	bl	adb_request_new.constprop.133
	subs	fp, r0, #0
	ldr	r0, [sp, #16]
	beq	.L11596
	str	r5, [fp, #28]
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r2, r9
	ldr	r1, [r4, #1660]
	add	r0, fp, #36
	bl	__list_add
	mov	r1, r6
	ldr	r0, [sp, #16]
	bl	_raw_spin_unlock_irqrestore
	subs	r8, r8, #1
	bne	.L11597
	ldr	r0, [r4, #96]
	ldr	r6, [sp, #20]
	ldr	r5, [sp, #24]
	bl	adb_request_new.constprop.133
	subs	r3, r0, #0
	beq	.L11596
	movw	r8, #:lower16:acc_complete_out
	movt	r8, #:upper16:acc_complete_out
	str	r8, [r3, #28]
	ldr	r0, [r4, #96]
	str	r3, [r4, #1688]
	bl	adb_request_new.constprop.133
	cmp	r0, #0
	beq	.L11596
	str	r8, [r0, #28]
	str	r0, [r4, #1692]
	ldr	r2, [r7, #24]
	ldr	r3, [r2]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L11599
	ldrb	r1, [r6, #2298]	@ zero_extendqisi2
	ldrb	r3, [r6, #2310]	@ zero_extendqisi2
	strb	r1, [r6, #2322]
	strb	r3, [r6, #2334]
	ldr	r0, [r2]
	ldr	r0, [r0, #20]
	cmp	r0, #4
	strbhi	r1, [r6, #2346]
	strbhi	r3, [r6, #2358]
.L11599:
	movw	r3, #2706
	ldrh	r3, [r5, r3]
	tst	r3, #4
	bne	.L11658
.L11584:
	mov	r0, r10
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11650:
	mov	r3, r2
	movw	r2, #:lower16:.LC953
	ldr	r1, [r3]
	movt	r2, #:upper16:.LC953
	add	r0, r5, #2496
	mov	r3, r4
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11585
.L11651:
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC946
	mov	r3, r4
	movt	r2, #:upper16:.LC946
	ldr	r0, .L11660+12
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11588
.L11653:
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC948
	movt	r2, #:upper16:.LC948
	ldr	r0, .L11660+16
	ldr	r3, [r8, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11591
.L11655:
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC955
	movt	r2, #:upper16:.LC955
	ldr	r0, .L11660+20
	ldr	r3, [r8, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11593
.L11657:
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC955
	movt	r2, #:upper16:.LC955
	ldr	r0, .L11660+24
	ldr	r3, [r8, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11595
.L11658:
	ldr	ip, [r4, #96]
	movw	r0, #:lower16:.LC944
	movw	r3, #:lower16:.LC943
	ldr	lr, [r2]
	movt	r0, #:upper16:.LC944
	movt	r3, #:upper16:.LC943
	ldr	r1, [sp, #28]
	ldr	r2, [r4, #92]
	ldr	ip, [ip, #4]
	ldr	lr, [lr, #20]
	ldr	r4, [r4]
	ldr	r1, [r1]
	str	ip, [sp, #8]
	ldr	ip, [r2, #4]
	movw	r2, #:lower16:.LC952
	cmp	lr, #2
	movt	r2, #:upper16:.LC952
	movls	r3, r0
	ldr	r0, .L11660+28
	add	r1, r1, #32
	stm	sp, {r4, ip}
	bl	__dynamic_dev_dbg
	b	.L11584
.L11590:
	mvn	r10, #18
	b	.L11584
.L11652:
	movw	r3, #2562
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L11590
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC947
	mvn	r10, #18
	movt	r2, #:upper16:.LC947
	ldr	r0, .L11660+32
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11584
.L11656:
	movw	r3, #2658
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L11590
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC949
	mvn	r10, #18
	movt	r2, #:upper16:.LC949
	ldr	r0, .L11660+36
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11584
.L11654:
	movw	r3, #2610
	ldrh	r3, [r5, r3]
	tst	r3, #4
	beq	.L11590
	ldr	r1, [r9]
	movw	r2, #:lower16:.LC949
	mvn	r10, #18
	movt	r2, #:upper16:.LC949
	ldr	r0, .L11660+40
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11584
.L11596:
	movw	r0, #:lower16:.LC956
	movt	r0, #:upper16:.LC956
	bl	printk
	ldr	r7, [sp, #16]
.L11600:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #1656]
	mov	r6, r0
	cmp	r9, r5
	bne	.L11659
	mov	r1, r0
	ldr	r0, [sp, #16]
	bl	_raw_spin_unlock_irqrestore
.L11605:
	ldr	r0, [r4, #1688]
	cmp	r0, #0
	beq	.L11603
	ldr	r1, [r4, #96]
	bl	acc_request_free.part.7
.L11603:
	ldr	r0, [r4, #1692]
	cmp	r0, #0
	beq	.L11606
	ldr	r1, [r4, #96]
	mvn	r10, #0
	bl	acc_request_free.part.7
	b	.L11584
.L11659:
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del
	mov	r1, r6
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	beq	.L11605
	mov	r0, r5
	ldr	r1, [r4, #92]
	bl	acc_request_free.part.7
	b	.L11600
.L11606:
	mvn	r10, #0
	b	.L11584
.L11661:
	.align	2
.L11660:
	.word	.LANCHOR0+1668
	.word	.LANCHOR0+2296
	.word	.LANCHOR0+2308
	.word	.LANCHOR4+2520
	.word	.LANCHOR4+2568
	.word	.LANCHOR4+2616
	.word	.LANCHOR4+2664
	.word	.LANCHOR4+2688
	.word	.LANCHOR4+2544
	.word	.LANCHOR4+2640
	.word	.LANCHOR4+2592
	.fnend
	.size	acc_function_bind, .-acc_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_bind_config, %function
ccid_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r2, #2730
	movw	r3, #:lower16:.LANCHOR1
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR4
	movt	r3, #:upper16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR4
	mov	r5, r1
	str	r8, [sp, #16]
	ldrh	r2, [r6, r2]
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	ldr	r4, [r3, #3592]
	tst	r2, #4
	bne	.L11696
.L11663:
	ldr	r2, .L11701
	movw	r0, #:lower16:ccid_function_bind
	movw	r1, #:lower16:ccid_function_unbind
	movt	r0, #:upper16:ccid_function_bind
	movt	r1, #:upper16:ccid_function_unbind
	ldr	ip, [r5, #24]
	movw	r3, #:lower16:.LC958
	movt	r3, #:upper16:.LC958
	add	lr, r2, #24
	str	r3, [r4]
	str	r2, [r4, #16]
	movw	r2, #:lower16:ccid_function_set_alt
	movt	r2, #:upper16:ccid_function_set_alt
	strd	r0, [r4, #32]
	movw	r0, #2754
	str	lr, [r4, #8]
	movw	r1, #:lower16:ccid_function_setup
	str	r2, [r4, #40]
	ldrh	r0, [r6, r0]
	movw	r2, #:lower16:ccid_function_disable
	movt	r1, #:upper16:ccid_function_setup
	movt	r2, #:upper16:ccid_function_disable
	str	r2, [r4, #48]
	tst	r0, #4
	str	r1, [r4, #52]
	str	ip, [r4, #84]
	bne	.L11697
.L11664:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L11672
	add	r8, r4, #72
	add	r2, r5, #36
	str	r5, [r4, #20]
	mov	r0, r8
	ldr	r1, [r5, #40]
	bl	__list_add
	ldr	r7, [r4, #32]
	cmp	r7, #0
	beq	.L11666
	mov	r1, r4
	mov	r0, r5
	blx	r7
	subs	r7, r0, #0
	blt	.L11698
.L11666:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L11667
.L11700:
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L11667
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L11667:
	tst	r3, #2
	bne	.L11668
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L11668
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L11668:
	tst	r3, #1
	bne	.L11669
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L11669
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L11669:
	cmp	r7, #0
	beq	.L11662
	movw	r3, #2778
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L11699
.L11662:
	mov	r0, r7
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11697:
	ldr	ip, [r5]
	movw	r2, #:lower16:.LC959
	ldr	r1, [r5, #24]
	movt	r2, #:upper16:.LC959
	ldr	r0, .L11701+4
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r5, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L11664
.L11672:
	movw	r3, #2778
	mvn	r7, #21
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L11662
	b	.L11699
.L11698:
	mov	r0, r8
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L11667
	b	.L11700
.L11699:
	ldr	r1, [r5, #24]
	movw	r2, #:lower16:.LC960
	movt	r2, #:upper16:.LC960
	ldr	r0, .L11701+8
	ldr	r3, [r4]
	ldr	r1, [r1]
	stm	sp, {r4, r7}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11662
.L11696:
	movw	r1, #:lower16:.LC957
	ldr	r0, .L11701+12
	movt	r1, #:upper16:.LC957
	bl	__dynamic_pr_debug
	b	.L11663
.L11702:
	.align	2
.L11701:
	.word	.LANCHOR0+2368
	.word	.LANCHOR4+2736
	.word	.LANCHOR4+2760
	.word	.LANCHOR4+2712
	.fnend
	.size	ccid_function_bind_config, .-ccid_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_sdio_bind_config, %function
rmnet_smd_sdio_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r3, #2480]
	.pad #16
	sub	sp, sp, #16
	cmp	r4, #0
	beq	.L11712
	movw	r6, #:lower16:.LANCHOR4
	movw	r3, #2802
	movt	r6, #:upper16:.LANCHOR4
	mov	r5, r1
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L11738
.L11705:
	ldr	r2, .L11743
	movw	r1, #:lower16:rmnet_mux_bind
	movw	r3, #:lower16:.LC962
	movt	r1, #:upper16:rmnet_mux_bind
	movw	r0, #:lower16:rmnet_mux_unbind
	movt	r0, #:upper16:rmnet_mux_unbind
	movt	r3, #:upper16:.LC962
	add	ip, r2, #8
	str	r1, [r4, #32]
	movw	r1, #:lower16:rmnet_mux_set_alt
	str	r2, [r4, #4]
	add	r2, r2, #28
	movt	r1, #:upper16:rmnet_mux_set_alt
	str	r3, [r4]
	str	r2, [r4, #8]
	movw	r2, #2754
	str	ip, [r4, #16]
	str	r0, [r4, #36]
	movw	r0, #:lower16:rmnet_mux_setup
	str	r1, [r4, #40]
	ldrh	ip, [r6, r2]
	movw	r1, #:lower16:rmnet_mux_disable
	movw	r2, #:lower16:rmnet_mux_suspend
	movt	r0, #:upper16:rmnet_mux_setup
	movt	r1, #:upper16:rmnet_mux_disable
	movt	r2, #:upper16:rmnet_mux_suspend
	tst	ip, #4
	str	r1, [r4, #48]
	str	r0, [r4, #52]
	str	r2, [r4, #56]
	bne	.L11739
.L11706:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L11714
	add	r8, r4, #72
	add	r2, r5, #36
	str	r5, [r4, #20]
	mov	r0, r8
	ldr	r1, [r5, #40]
	bl	__list_add
	ldr	r7, [r4, #32]
	cmp	r7, #0
	beq	.L11708
	mov	r1, r4
	mov	r0, r5
	blx	r7
	subs	r7, r0, #0
	blt	.L11740
.L11708:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L11709
.L11742:
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L11709
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L11709:
	tst	r3, #2
	bne	.L11710
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L11710
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L11710:
	tst	r3, #1
	bne	.L11711
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L11711
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L11711:
	cmp	r7, #0
	beq	.L11703
	movw	r3, #2778
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L11741
.L11703:
	mov	r0, r7
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11739:
	ldr	ip, [r5]
	movw	r2, #:lower16:.LC959
	ldr	r1, [r5, #24]
	movt	r2, #:upper16:.LC959
	ldr	r0, .L11743+4
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r5, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r3, [r4, #40]
	cmp	r3, #0
	bne	.L11706
.L11714:
	movw	r3, #2778
	mvn	r7, #21
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L11703
	b	.L11741
.L11740:
	mov	r0, r8
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L11709
	b	.L11742
.L11741:
	ldr	r1, [r5, #24]
	movw	r2, #:lower16:.LC960
	movt	r2, #:upper16:.LC960
	ldr	r0, .L11743+8
	ldr	r3, [r4]
	ldr	r1, [r1]
	stm	sp, {r4, r7}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L11703
.L11738:
	movw	r1, #:lower16:.LC961
	add	r0, r6, #2784
	movt	r1, #:upper16:.LC961
	bl	__dynamic_pr_debug
	b	.L11705
.L11712:
	mvn	r7, #18
	b	.L11703
.L11744:
	.align	2
.L11743:
	.word	.LANCHOR0+2416
	.word	.LANCHOR4+2736
	.word	.LANCHOR4+2760
	.fnend
	.size	rmnet_smd_sdio_bind_config, .-rmnet_smd_sdio_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ch_remove, %function
gsdio_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #2826
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r3, r2]
	.pad #36
	sub	sp, sp, #36
	str	r0, [sp, #12]
	tst	r3, #4
	bne	.L11789
.L11746:
	movw	r10, #:lower16:.LANCHOR1
	movt	r10, #:upper16:.LANCHOR1
	ldr	r8, [r10]
	cmp	r8, #0
	beq	.L11784
	movw	r3, #:lower16:.LC963
	add	r7, r10, #4
	str	r10, [sp, #16]
	movt	r3, #:upper16:.LC963
	mov	r6, #0
	str	r3, [sp, #28]
.L11760:
	ldr	r3, [sp, #12]
	mov	r2, #9
	ldr	r4, [r7, #20]
	ldr	r1, [r3]
	ldr	r3, [r4, #120]
	ldr	r0, [r3]
	bl	strncmp
	subs	r5, r0, #0
	bne	.L11748
	ldr	r8, [r4, #96]
	mov	r3, #1
	str	r5, [r4, #108]
	str	r5, [r4, #112]
	str	r3, [r4, #116]
	cmp	r8, #0
	beq	.L11788
	ldr	r3, .L11791
	ldrh	r3, [r3]
	ubfx	r3, r3, #2, #1
	cmp	r3, #0
	moveq	r0, r8
	streq	r3, [r4, #172]
	bne	.L11790
.L11762:
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L11751
	mov	r1, #0
	blx	r3
.L11751:
	ldr	r0, [r8, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L11752
	blx	r3
.L11752:
	ldr	r0, [r8, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L11753
	blx	r3
.L11753:
	add	r3, r4, #4
	add	r0, r4, #28
	mov	r5, r3
	add	r9, r4, #12
	str	r3, [sp, #20]
	bl	cancel_work_sync
	add	r0, r4, #60
	bl	cancel_work_sync
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r10, [r4, #12]
	str	r0, [sp, #24]
	ldr	r5, [r8, #92]
	cmp	r9, r10
	beq	.L11754
.L11755:
	mov	r0, r10
	sub	fp, r10, #36
	bl	list_del
	ldr	r0, [r10, #-36]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, fp
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r10, [r4, #12]
	cmp	r9, r10
	bne	.L11755
	ldr	r5, [r8, #92]
.L11754:
	ldr	r10, [r4, #20]
	add	r9, r4, #20
	cmp	r9, r10
	beq	.L11759
.L11756:
	mov	r0, r10
	sub	fp, r10, #36
	bl	list_del
	ldr	r0, [r10, #-36]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, fp
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r10, [r4, #20]
	cmp	r9, r10
	bne	.L11756
.L11759:
	ldr	r9, [r4, #52]
	add	r5, r4, #52
	ldr	r8, [r8, #88]
	cmp	r5, r9
	beq	.L11758
.L11757:
	mov	r0, r9
	sub	r10, r9, #36
	bl	list_del
	ldr	r0, [r9, #-36]
	bl	kfree
	ldr	r3, [r8, #8]
	mov	r1, r10
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r9, [r4, #52]
	cmp	r5, r9
	bne	.L11757
.L11758:
	mov	r3, #0
	ldrd	r0, [sp, #20]
	str	r3, [r4, #8]
	str	r3, [r4, #44]
	str	r3, [r4, #48]
	str	r3, [r4, #76]
	bl	_raw_spin_unlock_irqrestore
.L11788:
	ldr	r3, [sp, #16]
	ldr	r8, [r3]
.L11748:
	add	r6, r6, #1
	add	r7, r7, #104
	cmp	r8, r6
	bhi	.L11760
.L11784:
	mov	r0, #0
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11790:
	str	r5, [sp, #4]
	ldr	ip, [r4]
	mov	r3, r4
	ldr	r2, .L11791+4
	ldr	r0, .L11791+8
	ldr	r1, [sp, #28]
	str	ip, [sp]
	bl	__dynamic_pr_debug
	ldr	r0, [r4, #96]
	str	r5, [r4, #172]
	cmp	r0, #0
	beq	.L11751
	b	.L11762
.L11789:
	mov	r3, r0
	movw	r1, #:lower16:.LC180
	ldr	r2, .L11791+12
	movt	r1, #:upper16:.LC180
	ldr	r0, .L11791+16
	ldr	r3, [r3]
	bl	__dynamic_pr_debug
	b	.L11746
.L11792:
	.align	2
.L11791:
	.word	.LANCHOR4+2850
	.word	.LANCHOR5-824
	.word	.LANCHOR4+2832
	.word	.LANCHOR5-840
	.word	.LANCHOR4+2808
	.fnend
	.size	gsdio_ch_remove, .-gsdio_ch_remove
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_complete_out, %function
conn_gadget_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r5, r1
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r4, [r3, #2484]
	.pad #12
	sub	sp, sp, #12
	ldr	r1, [r1, #44]
	ldr	r3, [r4, #192]
	ldr	r2, [r4, #196]
	cmp	r1, #0
	add	r3, r3, r3, lsl #2
	sub	r6, r2, r3
	bne	.L11805
	add	r0, r4, #168
	ldr	r1, [r5]
	ldr	r2, [r5, #48]
	bl	__kfifo_in
	ldr	r3, [r4, #168]
	ldr	r2, [r4, #172]
	sub	r3, r3, r2
	cmp	r6, r3
	bls	.L11806
	ldr	r0, [r4, #96]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	bge	.L11798
	movw	r0, #:lower16:.LC964
	mov	r2, r5
	ldr	r1, .L11807
	add	r5, r4, #88
	movt	r0, #:upper16:.LC964
	add	r6, r2, #36
	bl	printk
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	mov	r0, r6
	bl	__list_del_entry
	mov	r0, r6
	add	r2, r4, #128
	ldr	r1, [r4, #132]
	bl	__list_add
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L11798:
	add	r0, r4, #144
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	__wake_up
.L11806:
	add	r6, r4, #88
	add	r5, r5, #36
.L11804:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	mov	r0, r5
	bl	__list_del_entry
	mov	r0, r5
	add	r2, r4, #128
	ldr	r1, [r4, #132]
	bl	__list_add
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	b	.L11798
.L11805:
	cmn	r1, #104
	beq	.L11796
	movw	r3, #:lower16:.LANCHOR4
	movw	r1, #2874
	movt	r3, #:upper16:.LANCHOR4
	mov	r2, #1
	ldrh	r3, [r3, r1]
	str	r2, [r4, #104]
	tst	r3, #4
	beq	.L11796
	ldr	r3, .L11807
	movw	r1, #:lower16:.LC251
	str	r2, [sp]
	movt	r1, #:upper16:.LC251
	ldr	r0, .L11807+4
	mov	r2, r3
	bl	__dynamic_pr_debug
.L11796:
	movw	r0, #:lower16:.LC755
	ldr	r1, .L11807
	add	r6, r4, #88
	movt	r0, #:upper16:.LC755
	ldr	r2, [r5, #44]
	add	r5, r5, #36
	bl	printk
	b	.L11804
.L11808:
	.align	2
.L11807:
	.word	.LANCHOR5-800
	.word	.LANCHOR4+2856
	.fnend
	.size	conn_gadget_complete_out, .-conn_gadget_complete_out
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_bulk_read, %function
ccid_bulk_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #2898
	strd	r6, [sp, #8]
	mov	r7, r2
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR4
	movt	r8, #:upper16:.LANCHOR4
	strd	r10, [sp, #24]
	mov	r10, r1
	ldrh	r3, [r8, r3]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	ldr	r4, [r0, #124]
	tst	r3, #4
	bne	.L11852
	movw	r2, #522
	cmp	r7, r2
	bhi	.L11853
.L11811:
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L11813
	mov	r3, sp
	add	r5, r4, #92
	bic	r9, r3, #8128
	bic	r9, r9, #63
	b	.L11814
.L11818:
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L11831
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L11854
	ldr	r2, [r6, #48]
	cmp	r2, #0
	bne	.L11824
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L11814:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L11855
	ldr	r6, [r4, #184]
	mov	r3, #0
	mov	r1, r0
	mov	r0, r5
	str	r7, [r6, #4]
	str	r3, [r4, #188]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #108]
	mov	r1, r6
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L11856
	ldr	r3, [r4, #188]
	cmp	r3, #0
	bne	.L11818
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L11818
	ldr	r2, [r4, #96]
	cmp	r2, #0
	beq	.L11818
	ldr	r0, [r9, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #16
	movt	r2, #:upper16:autoremove_wake_function
	add	fp, r4, #160
	str	r3, [sp, #4]
	str	r1, [sp, #16]
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #20]
.L11821:
	mov	r2, #1
	add	r1, sp, #4
	mov	r0, fp
	bl	prepare_to_wait
	ldr	r3, [r4, #188]
	cmp	r3, #0
	bne	.L11819
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L11819
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L11819
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L11857
	add	r1, sp, #4
	mov	r0, fp
	bl	finish_wait
	ldr	r0, [r4, #108]
	mov	r3, #1
	mov	r7, #65024
	mov	r1, r6
	movt	r7, 65535
	str	r3, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L11815:
	movw	r3, #2994
	ldrh	r3, [r8, r3]
	tst	r3, #4
	bne	.L11858
.L11809:
	mov	r0, r7
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11855:
	movw	r3, #2922
	ldrh	r3, [r8, r3]
	tst	r3, #4
	mvneq	r7, #18
	beq	.L11809
	movw	r1, #:lower16:.LC308
	ldr	r2, .L11860
	mvn	r7, #18
	movt	r1, #:upper16:.LC308
	ldr	r0, .L11860+4
	bl	__dynamic_pr_debug
	b	.L11809
.L11831:
	mvn	r7, #4
	b	.L11815
.L11854:
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #2946
	ldrh	r3, [r8, r3]
	tst	r3, #4
	bne	.L11823
.L11829:
	mvn	r7, #18
	b	.L11815
.L11824:
	mov	r3, #1
	cmp	r2, r7
	mov	r1, r0
	mov	r0, r5
	str	r3, [r4, #156]
	movcc	r9, r2
	movcs	r9, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	.syntax divided
@ 448 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/uaccess.h" 1
	adds r2, r10, r9; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	beq	.L11859
.L11825:
	cmp	r9, #0
	mov	r0, r5
	mvnne	r7, #13
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	mov	r2, #0
	mov	r6, r0
	str	r2, [r4, #156]
	cmp	r3, r2
	bne	.L11827
	ldr	r7, [r4, #184]
	cmp	r7, r2
	beq	.L11828
	ldr	r4, [r4, #108]
	ldr	r0, [r7]
	bl	kfree
	mov	r1, r7
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
.L11828:
	mov	r1, r6
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #2970
	ldrh	r3, [r8, r3]
	tst	r3, #4
	beq	.L11829
	movw	r1, #:lower16:.LC308
	ldr	r2, .L11860
	mvn	r7, #18
	movt	r1, #:upper16:.LC308
	ldr	r0, .L11860+8
	bl	__dynamic_pr_debug
	b	.L11815
.L11827:
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	b	.L11815
.L11859:
	mov	r2, r9
	mov	r0, r10
	ldr	r1, [r6]
	bl	__copy_to_user
	mov	r9, r0
	b	.L11825
.L11857:
	bl	schedule
	b	.L11821
.L11852:
	movw	r1, #:lower16:.LC965
	add	r0, r8, #2880
	movt	r1, #:upper16:.LC965
	bl	__dynamic_pr_debug
	movw	r2, #522
	cmp	r7, r2
	bls	.L11811
.L11853:
	movw	r0, #:lower16:.LC933
	mov	r3, r7
	ldr	r1, .L11860
	movt	r0, #:upper16:.LC933
	mvn	r7, #11
	bl	printk
	b	.L11809
.L11819:
	add	r1, sp, #4
	mov	r0, fp
	bl	finish_wait
	b	.L11818
.L11858:
	movw	r1, #:lower16:.LC968
	mov	r2, r7
	ldr	r0, .L11860+12
	movt	r1, #:upper16:.LC968
	bl	__dynamic_pr_debug
	b	.L11809
.L11823:
	movw	r1, #:lower16:.LC308
	ldr	r2, .L11860
	mvn	r7, #18
	movt	r1, #:upper16:.LC308
	ldr	r0, .L11860+16
	bl	__dynamic_pr_debug
	b	.L11815
.L11856:
	movw	r0, #:lower16:.LC967
	ldr	r1, .L11860
	mvn	r7, #4
	movt	r0, #:upper16:.LC967
	bl	printk
	mov	r3, #1
	str	r3, [r4, #148]
	b	.L11815
.L11813:
	movw	r0, #:lower16:.LC966
	ldr	r1, .L11860
	mvn	r7, #4
	movt	r0, #:upper16:.LC966
	bl	printk
	b	.L11815
.L11861:
	.align	2
.L11860:
	.word	.LANCHOR5-772
	.word	.LANCHOR4+2904
	.word	.LANCHOR4+2952
	.word	.LANCHOR4+2976
	.word	.LANCHOR4+2928
	.fnend
	.size	ccid_bulk_read, .-ccid_bulk_read
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_bind, %function
ffs_func_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r2, r1, #36
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r1, #-32]
	.pad #36
	sub	sp, sp, #36
	ldr	r8, [r1, #-28]
	str	r2, [sp, #8]
	ldr	r3, [r3, #20]
	ldr	r7, [r8, #164]
	cmp	r3, #2
	bls	.L11952
	ldr	r2, [r8, #168]
	adds	r2, r2, #0
	movne	r2, #1
	cmp	r3, #4
	str	r2, [sp, #16]
	bls	.L11953
	ldr	r3, [r8, #172]
	adds	r3, r3, #0
	movne	r3, #1
	str	r3, [sp, #20]
.L11863:
	ldrh	r2, [r8, #180]
	cmp	r7, #0
	addne	r6, r7, #1
	moveq	r6, r7
	lsl	r3, r2, #3
	sub	r5, r3, r2
	sub	r3, r3, r2
	ldr	r2, [sp, #16]
	add	r3, r3, r6
	lsl	r5, r5, #2
	lsl	fp, r3, #2
	cmp	r2, #0
	streq	fp, [sp, #24]
	beq	.L11865
	ldr	r2, [r8, #168]
	add	r2, r2, #1
	add	r3, r3, r2
	lsl	r2, r3, #2
	str	r2, [sp, #24]
.L11865:
	ldr	r2, [sp, #20]
	ldrh	r6, [r8, #178]
	cmp	r2, #0
	ldr	r2, [r8, #148]
	lsl	r9, r6, #1
	add	r0, r2, #3
	str	r2, [sp, #12]
	beq	.L11866
	ldr	r4, [r8, #172]
	add	r4, r4, #1
	add	r3, r4, r3
	add	r6, r6, r3, lsl #1
	lsl	r4, r3, #2
	lsl	r6, r6, #1
	add	r0, r6, r0
	bic	r0, r0, #3
.L11867:
	str	r1, [sp, #4]
	mov	r1, #208
	bl	__kmalloc
	subs	r3, r0, #0
	mvneq	r5, #11
	str	r3, [sp]
	beq	.L11862
	cmp	r5, #0
	bne	.L12001
.L11869:
	ldr	r3, [sp]
	ldr	r1, [r8, #144]
	ldr	r2, [r8, #152]
	add	r6, r3, r6
	mov	r0, r6
	add	r1, r1, #16
	bl	memcpy
	ldr	r3, [sp, #4]
	ldr	r3, [r3, #-28]
	ldr	r3, [r3, #172]
	cmp	r3, #0
	bne	.L12002
.L11870:
	ldr	r3, [sp]
	cmp	r9, #0
	add	r4, r3, r4
	bne	.L12003
.L11871:
	ldrh	r2, [r8, #180]
	cmp	r2, #0
	beq	.L11876
	ldr	r0, [sp]
	rsb	r3, r2, r2, lsl #3
	mvn	r1, #0
	add	r3, r0, r3, lsl #2
.L11875:
	subs	r2, r2, #1
	strb	r1, [r3, #20]
	sub	r3, r3, #28
	bne	.L11875
.L11876:
	ldrd	r2, [sp]
	cmp	r7, #0
	str	r2, [r3, #-24]
	str	r4, [r3, #-4]
	beq	.L11874
	ldr	r3, [sp, #4]
	add	r5, r2, r5
	str	r5, [r3, #16]
	ldr	r10, [r8, #164]
	cmp	r10, #0
	beq	.L11877
	ldr	r5, [sp, #8]
	mov	r7, r6
	mov	r9, #0
	ldr	r4, [sp, #12]
.L11890:
	mov	r3, r5
	mov	r2, r7
	mov	r1, r9
	mov	r0, #0
	bl	__ffs_func_bind_do_descs
	cmp	r0, #0
	blt	.L12004
	cmp	r7, #0
	beq	.L11949
	cmp	r4, #1
	bls	.L11881
	ldrb	r2, [r7]	@ zero_extendqisi2
	cmp	r4, r2
	bcc	.L11881
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	sub	r3, r3, #4
	cmp	r3, #44
	ldrls	pc, [pc, r3, asl #2]
	b	.L11881
.L11883:
	.word	.L11887
	.word	.L11886
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11885
	.word	.L11881
	.word	.L11884
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11882
.L11886:
	sub	r3, r2, #7
	tst	r3, #253
	bne	.L11881
	ldrb	r3, [r7, #2]	@ zero_extendqisi2
	tst	r3, #15
	bne	.L11888
.L11881:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2418
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L11891
	mvn	r5, #21
.L11862:
	mov	r0, r5
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11949:
	ldr	r3, [sp, #12]
	sub	r4, r3, r4
	cmp	r4, #0
	mov	r5, r4
	blt	.L11862
.L11880:
	ldr	r3, [sp, #16]
	cmp	r3, #0
	beq	.L11892
	ldr	r3, [sp]
	add	r9, r6, r4
	add	fp, r3, fp
	ldr	r3, [sp, #12]
	sub	r7, r3, r4
	ldr	r3, [sp, #4]
	str	r7, [sp, #28]
	str	fp, [r3, #8]
	ldr	fp, [r8, #168]
	cmp	fp, #0
	beq	.L11893
	ldr	r5, [sp, #8]
	mov	r10, #0
.L11906:
	mov	r3, r5
	mov	r2, r9
	mov	r1, r10
	mov	r0, #0
	bl	__ffs_func_bind_do_descs
	cmp	r0, #0
	blt	.L12000
	cmp	r9, #0
	beq	.L11947
	cmp	r7, #1
	bls	.L11881
	ldrb	r2, [r9]	@ zero_extendqisi2
	cmp	r7, r2
	bcc	.L11881
	ldrb	r3, [r9, #1]	@ zero_extendqisi2
	sub	r3, r3, #4
	cmp	r3, #44
	ldrls	pc, [pc, r3, asl #2]
	b	.L11881
.L11899:
	.word	.L11903
	.word	.L11902
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11901
	.word	.L11881
	.word	.L11900
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11898
.L11947:
	ldr	r3, [sp, #28]
	sub	r7, r3, r7
	cmp	r7, #0
	mov	r5, r7
	blt	.L11862
.L11896:
	ldr	r3, [sp, #20]
	cmp	r3, #0
	beq	.L11908
	ldr	r3, [sp, #28]
	add	r4, r4, r7
	sub	r7, r3, r7
.L11951:
	ldr	r3, [sp]
	add	r4, r6, r4
	ldr	r2, [sp, #24]
	add	r3, r3, r2
	ldr	r2, [sp, #4]
	str	r3, [r2, #12]
	ldr	fp, [r8, #172]
	cmp	fp, #0
	beq	.L11909
	ldr	r5, [sp, #8]
	mov	r9, r7
	mov	r10, #0
.L11922:
	mov	r3, r5
	mov	r2, r4
	mov	r1, r10
	mov	r0, #0
	bl	__ffs_func_bind_do_descs
	cmp	r0, #0
	blt	.L12000
	cmp	r4, #0
	beq	.L11945
	cmp	r9, #1
	bls	.L11881
	ldrb	r2, [r4]	@ zero_extendqisi2
	cmp	r2, r9
	bhi	.L11881
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	sub	r3, r3, #4
	cmp	r3, #44
	ldrls	pc, [pc, r3, asl #2]
	b	.L11881
.L11915:
	.word	.L11919
	.word	.L11918
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11917
	.word	.L11881
	.word	.L11916
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11881
	.word	.L11914
.L11866:
	add	r6, r6, r3, lsl #1
	ldr	r3, [sp, #16]
	cmp	r7, #0
	movne	r3, #1
	lsl	r6, r6, #1
	cmp	r3, #0
	add	r0, r6, r0
	bic	r0, r0, #3
	beq	.L11956
	ldr	r4, [sp, #24]
	b	.L11867
.L11952:
	mov	r3, #0
	str	r3, [sp, #16]
	str	r3, [sp, #20]
	b	.L11863
.L11885:
	cmp	r2, #5
	bne	.L11881
.L11888:
	add	r9, r9, #1
	sub	r4, r4, r2
	cmp	r10, r9
	add	r7, r7, r2
	bne	.L11890
	mov	r2, #0
	mov	r1, r10
	ldr	r3, [sp, #8]
	mov	r0, r2
	bl	__ffs_func_bind_do_descs
	subs	r5, r0, #0
	bge	.L11949
.L11948:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2298
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	beq	.L11862
	movw	r1, #:lower16:.LC161
	mov	r2, r10
	ldr	r0, .L12008
	movt	r1, #:upper16:.LC161
	mov	r3, r5
	bl	__dynamic_pr_debug
	b	.L11862
.L11882:
	cmp	r2, #6
	beq	.L11888
	b	.L11881
.L11887:
	cmp	r2, #9
	beq	.L11888
	b	.L11881
.L11884:
	cmp	r2, #8
	beq	.L11888
	b	.L11881
.L11901:
	cmp	r2, #5
	bne	.L11881
.L11904:
	add	r10, r10, #1
	sub	r7, r7, r2
	cmp	fp, r10
	add	r9, r9, r2
	bne	.L11906
	mov	r2, #0
	mov	r1, fp
	ldr	r3, [sp, #8]
	mov	r0, r2
	bl	__ffs_func_bind_do_descs
	subs	r5, r0, #0
	bge	.L11947
.L11944:
	movw	r3, #:lower16:.LANCHOR2
	movw	r2, #2298
	movt	r3, #:upper16:.LANCHOR2
	ldrh	r3, [r3, r2]
	tst	r3, #4
	beq	.L11862
	movw	r1, #:lower16:.LC161
	mov	r2, fp
	ldr	r0, .L12008
	movt	r1, #:upper16:.LC161
	mov	r3, r5
	bl	__dynamic_pr_debug
	b	.L11862
.L11898:
	cmp	r2, #6
	beq	.L11904
	b	.L11881
.L11902:
	sub	r3, r2, #7
	tst	r3, #253
	bne	.L11881
	ldrb	r3, [r9, #2]	@ zero_extendqisi2
	tst	r3, #15
	bne	.L11904
	b	.L11881
.L11903:
	cmp	r2, #9
	beq	.L11904
	b	.L11881
.L11900:
	cmp	r2, #8
	beq	.L11904
	b	.L11881
.L11917:
	cmp	r2, #5
	bne	.L11881
.L11920:
	add	r10, r10, #1
	sub	r9, r9, r2
	cmp	fp, r10
	add	r4, r4, r2
	bne	.L11922
	mov	r2, #0
	mov	r1, fp
	ldr	r3, [sp, #8]
	mov	r0, r2
	bl	__ffs_func_bind_do_descs
	subs	r5, r0, #0
	blt	.L11944
.L11945:
	subs	r5, r7, r9
	bmi	.L11862
.L11912:
	ldr	r3, [sp, #16]
	ldr	lr, [r8, #164]
	cmp	r3, #0
	beq	.L11942
	ldr	r3, [r8, #168]
	add	lr, lr, r3
.L11942:
	ldr	r3, [r8, #172]
	add	lr, lr, r3
.L11943:
	clz	r1, r6
	cmp	lr, #0
	lsr	r1, r1, #5
	moveq	r1, #1
	cmp	r1, #0
	bne	.L11923
	ldr	ip, [sp, #12]
	cmp	ip, #1
	bls	.L11958
	ldrb	r3, [r6]	@ zero_extendqisi2
	cmp	ip, r3
	bcc	.L11958
	ldr	r4, [sp, #4]
.L11925:
	ldrb	r2, [r6, #1]	@ zero_extendqisi2
	sub	r2, r2, #4
	cmp	r2, #44
	ldrls	pc, [pc, r2, asl #2]
	b	.L11958
.L11928:
	.word	.L11932
	.word	.L11931
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11930
	.word	.L11958
	.word	.L11929
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11958
	.word	.L11927
.L11914:
	cmp	r2, #6
	beq	.L11920
	b	.L11881
.L11918:
	sub	r3, r2, #7
	tst	r3, #253
	bne	.L11881
	ldrb	r3, [r4, #2]	@ zero_extendqisi2
	tst	r3, #15
	bne	.L11920
	b	.L11881
.L11919:
	cmp	r2, #9
	beq	.L11920
	b	.L11881
.L11916:
	cmp	r2, #8
	beq	.L11920
	b	.L11881
.L11930:
	cmp	r3, #5
	bne	.L11958
.L11937:
	adds	r6, r6, r3
	add	r1, r1, #1
	moveq	r2, #1
	movne	r2, #0
	cmp	lr, r1
	orreq	r2, r2, #1
	sub	r0, ip, r3
	cmp	r2, #0
	bne	.L12005
	cmp	r0, #1
	bls	.L11958
	ldrb	r3, [r6]	@ zero_extendqisi2
	cmp	r0, r3
	bcc	.L11958
	mov	ip, r0
	b	.L11925
.L11927:
	cmp	r3, #6
	beq	.L11937
.L11958:
	movw	r4, #:lower16:.LANCHOR2
	mvn	r5, #21
	movt	r4, #:upper16:.LANCHOR2
.L11926:
	movw	r3, #2418
	ldrh	r3, [r4, r3]
	tst	r3, #4
	beq	.L11862
	movw	r1, #:lower16:.LC165
	mov	r3, r5
	ldr	r2, .L12008+4
	movt	r1, #:upper16:.LC165
	ldr	r0, .L12008+8
	bl	__dynamic_pr_debug
	b	.L11862
.L11931:
	sub	r2, r3, #7
	tst	r2, #253
	bne	.L11958
	ldrb	r2, [r6, #2]	@ zero_extendqisi2
	tst	r2, #15
	bne	.L11937
	b	.L11958
.L11932:
	cmp	r3, #9
	bne	.L11958
	ldrb	r2, [r6, #2]	@ zero_extendqisi2
	ldr	r0, [r4, #-4]
	lsl	r5, r2, #1
	ldrsh	r0, [r0, r5]
	cmp	r0, #0
	blt	.L12006
.L11933:
	ldrb	r2, [r6, #8]	@ zero_extendqisi2
	strb	r0, [r6, #2]
	cmp	r2, #0
	beq	.L11937
	ldr	r0, [r4, #-28]
	sub	r2, r2, #-536870911
	ldr	r0, [r0, #188]
	ldr	r0, [r0]
	ldr	r0, [r0, #4]
	ldrb	r2, [r0, r2, lsl #3]	@ zero_extendqisi2
	strb	r2, [r6, #8]
	b	.L11937
.L11929:
	cmp	r3, #8
	bne	.L11958
	ldrb	r2, [r6, #7]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L11937
	ldr	r0, [r4, #-28]
	sub	r2, r2, #-536870911
	ldr	r0, [r0, #188]
	ldr	r0, [r0]
	ldr	r0, [r0, #4]
	ldrb	r2, [r0, r2, lsl #3]	@ zero_extendqisi2
	strb	r2, [r6, #7]
	b	.L11937
.L12005:
	ldr	r2, [sp, #12]
	add	r5, r2, r3
	subs	r5, r5, ip
	bmi	.L11862
.L11923:
	mov	r0, r8
	mov	r1, #0
	bl	ffs_event_add
	mov	r5, #0
	b	.L11862
.L12003:
	mov	r2, r9
	mov	r1, #255
	mov	r0, r4
	bl	memset
	b	.L11871
.L12002:
	ldr	r1, [r8, #144]
	ldr	r0, [r8, #152]
	ldr	r3, [r8, #156]
	ldr	r2, [r8, #160]
	add	r0, r6, r0
	add	r1, r1, r3
	bl	memcpy
	b	.L11870
.L12001:
	mov	r1, r5
	bl	__memzero
	b	.L11869
.L11909:
	mov	r2, fp
	mov	r1, fp
	ldr	r3, [sp, #8]
	mov	r0, fp
	bl	__ffs_func_bind_do_descs
	subs	r5, r0, #0
	blt	.L11944
	b	.L11912
.L11956:
	movw	r5, #65012
	movt	r5, 65535
	b	.L11862
.L11877:
	mov	r2, r10
	mov	r1, r10
	ldr	r3, [sp, #8]
	mov	r0, r10
	bl	__ffs_func_bind_do_descs
	subs	r5, r0, #0
	blt	.L11948
.L11874:
	mov	r4, #0
	b	.L11880
.L12006:
	ldr	r7, [r4, #-36]
	ldrb	r0, [r7, #44]	@ zero_extendqisi2
	cmp	r0, #15
	bhi	.L12007
	add	r2, r0, #1
	add	r9, r0, #12
	str	r4, [r7, r9, lsl #2]
	strb	r2, [r7, #44]
	ldr	r2, [r4, #-4]
	strh	r0, [r2, r5]	@ movhi
	ldr	r2, [r4, #-4]
	ldrsh	r0, [r2, r5]
	b	.L11933
.L11893:
	mov	r2, fp
	mov	r1, fp
	ldr	r3, [sp, #8]
	mov	r0, fp
	bl	__ffs_func_bind_do_descs
	subs	r5, r0, #0
	movge	r7, fp
	blt	.L11944
	b	.L11896
.L11891:
	movw	r1, #:lower16:.LC165
	mvn	r3, #21
	ldr	r2, .L12008+4
	movt	r1, #:upper16:.LC165
	ldr	r0, .L12008+8
	mov	r5, r3
	bl	__dynamic_pr_debug
	b	.L11862
.L11892:
	ldr	r3, [sp, #20]
	cmp	r3, #0
	beq	.L11950
	ldr	r3, [sp, #12]
	sub	r7, r3, r4
	b	.L11951
.L11908:
	ldr	lr, [r8, #164]
	ldr	r3, [r8, #168]
	add	lr, lr, r3
	b	.L11943
.L12007:
	movw	r4, #:lower16:.LANCHOR2
	movw	r3, #2322
	movt	r4, #:upper16:.LANCHOR2
	ldrh	r3, [r4, r3]
	tst	r3, #4
	bne	.L11935
	mvn	r5, #18
	b	.L11926
.L11950:
	ldr	lr, [r8, #164]
	b	.L11943
.L11935:
	movw	r1, #:lower16:.LC162
	mvn	r3, #18
	movt	r1, #:upper16:.LC162
	add	r0, r4, #2304
	mov	r5, r3
	bl	__dynamic_pr_debug
	b	.L11926
.L12004:
	mov	r5, r0
	mov	r10, r9
	b	.L11948
.L12000:
	mov	r5, r0
	mov	fp, r10
	b	.L11944
.L11953:
	mov	r3, #0
	str	r3, [sp, #20]
	b	.L11863
.L12009:
	.align	2
.L12008:
	.word	.LANCHOR2+2280
	.word	.LANCHOR3+1084
	.word	.LANCHOR2+2400
	.fnend
	.size	ffs_func_bind, .-ffs_func_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_bind, %function
mtp_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #3018
	mov	r4, r1
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR4
	mov	r7, r0
	movt	r6, #:upper16:.LANCHOR4
	strd	r8, [sp, #16]
	ldrh	r3, [r6, r3]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #24]
	.pad #36
	sub	sp, sp, #36
	tst	r3, #4
	str	r2, [sp, #28]
	str	r2, [r1, #84]
	bne	.L12089
.L12011:
	ldrb	r3, [r7, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L12088
	add	r1, r3, #12
	movw	r2, #3042
	movw	r5, #:lower16:.LANCHOR0
	str	r4, [r7, r1, lsl #2]
	ldrh	r2, [r6, r2]
	movt	r5, #:upper16:.LANCHOR0
	add	r1, r3, #1
	strb	r3, [r5, #2466]
	strb	r1, [r7, #44]
	ldr	r8, [r4, #84]
	tst	r2, #4
	bne	.L12090
.L12014:
	ldr	r1, .L12101
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss.constprop.166
	subs	r9, r0, #0
	beq	.L12091
	movw	r3, #3090
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L12092
.L12017:
	ldr	r1, .L12101+4
	str	r4, [r9]
	str	r9, [r4, #92]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss.constprop.166
	subs	r9, r0, #0
	beq	.L12093
	movw	r3, #3138
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L12094
.L12019:
	ldr	r1, .L12101+8
	str	r4, [r9]
	str	r9, [r4, #96]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss.constprop.166
	subs	r9, r0, #0
	beq	.L12095
	movw	r3, #3186
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L12096
.L12021:
	str	r4, [r9]
	ldr	r1, [r5, #1656]
	str	r9, [r4, #100]
	cmp	r1, #16384
	bls	.L12022
	mov	r3, #4
	str	r3, [r5, #2512]
.L12023:
	add	r3, r4, #116
	movw	r8, #:lower16:mtp_complete_in
	mov	r9, #0
	movt	r8, #:upper16:mtp_complete_in
	add	r10, r4, #88
	str	r3, [sp, #20]
	b	.L12032
.L12025:
	str	r8, [fp, #28]
	bl	_raw_spin_lock_irqsave
	mov	r3, r0
	add	r0, fp, #36
	ldr	r2, [sp, #20]
	ldr	r1, [r4, #120]
	str	r3, [sp, #24]
	bl	__list_add
	ldr	r3, [sp, #24]
	mov	r0, r10
	mov	r1, r3
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #2512]
	cmp	r3, r9
	bls	.L12024
	ldr	r1, [r5, #1656]
.L12032:
	ldr	r0, [r4, #92]
	add	r9, r9, #1
	bl	mtp_request_new
	subs	fp, r0, #0
	mov	r0, r10
	bne	.L12025
	ldr	r3, [r5, #1656]
	cmp	r3, #16384
	bls	.L12027
	add	r3, r4, #116
	add	r8, r4, #88
	str	r3, [sp, #20]
	b	.L12028
.L12029:
	bl	list_del
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r10, #0
	beq	.L12030
	ldr	fp, [r4, #92]
	ldr	r0, [r9, #-36]
	bl	kfree
	mov	r1, r10
	ldr	r2, [fp, #8]
	mov	r0, fp
	ldr	r3, [r2, #12]
	blx	r3
.L12028:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [sp, #20]
	mov	fp, r0
	ldr	r9, [r4, #116]
	cmp	r3, r9
	mov	r0, r9
	sub	r10, r9, #36
	bne	.L12029
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
.L12030:
	mov	r3, #16384
	mov	r2, #8
	mov	r1, r3
	str	r3, [r5, #1656]
	str	r2, [r5, #2512]
.L12022:
	ldr	r3, [r5, #2512]
	cmp	r3, #0
	bne	.L12023
.L12024:
	ldr	r1, [r5, #620]
	ubfx	r3, r1, #0, #10
	cmp	r3, #0
	bne	.L12097
.L12033:
	ldr	r10, [r4, #96]
	movw	r8, #:lower16:mtp_complete_out
	mov	r9, #16384
	movt	r8, #:upper16:mtp_complete_out
.L12041:
	mov	r0, r10
	bl	mtp_request_new
	subs	r3, r0, #0
	beq	.L12034
	str	r8, [r3, #28]
	ldr	r0, [r4, #96]
	str	r3, [r4, #168]
	ldr	r1, [r5, #620]
	bl	mtp_request_new
	cmp	r0, #0
	beq	.L12035
	movw	fp, #:lower16:kmalloc_caches
	movw	r10, #:lower16:mtp_complete_intr
	str	r5, [sp, #24]
	mov	r3, #5
	movt	fp, #:upper16:kmalloc_caches
	str	r8, [r0, #28]
	movt	r10, #:upper16:mtp_complete_intr
	str	r0, [r4, #172]
	str	r3, [sp, #20]
.L12036:
	ldr	r8, [r4, #100]
	mov	r1, #208
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #8]
	blx	r3
	subs	r9, r0, #0
	mov	r2, #28
	mov	r1, #208
	mov	ip, #16
	beq	.L12027
	ldr	r3, [fp, #24]
	subs	r0, r3, #0
	streq	ip, [r9]
	beq	.L12043
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r9]
	beq	.L12098
.L12043:
	add	r8, r4, #88
	str	r10, [r9, #28]
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	add	r2, r4, #124
	ldr	r1, [r4, #128]
	add	r0, r9, #36
	bl	__list_add
	mov	r1, r5
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [sp, #20]
	subs	r3, r3, #1
	str	r3, [sp, #20]
	bne	.L12036
	ldr	r2, [r7, #24]
	ldr	r5, [sp, #24]
	ldr	r3, [r2]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L12099
.L12044:
	movw	r3, #3210
	ldrh	r0, [r6, r3]
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	bne	.L12100
.L12010:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12099:
	ldrb	r1, [r5, #2478]	@ zero_extendqisi2
	ldrb	r3, [r5, #2490]	@ zero_extendqisi2
	strb	r1, [r5, #2518]
	strb	r3, [r5, #2530]
	ldr	r0, [r2]
	ldr	r0, [r0, #20]
	cmp	r0, #4
	strbhi	r1, [r5, #2542]
	strbhi	r3, [r5, #2554]
	b	.L12044
.L12097:
	mov	r3, #16384
	mov	r1, r3
	str	r3, [r5, #620]
	b	.L12033
.L12098:
	ldr	r3, [r8, #8]
	mov	r1, r9
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L12027:
	movw	r0, #:lower16:.LC973
	movt	r0, #:upper16:.LC973
	bl	printk
	mvn	r0, #0
	b	.L12010
.L12089:
	mov	r3, r2
	movw	r2, #:lower16:.LC969
	ldr	r0, .L12101+12
	ldr	r1, [r3]
	movt	r2, #:upper16:.LC969
	mov	r3, r4
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12011
.L12090:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC946
	mov	r3, r4
	movt	r2, #:upper16:.LC946
	ldr	r0, .L12101+16
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12014
.L12092:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC948
	movt	r2, #:upper16:.LC948
	ldr	r0, .L12101+20
	ldr	r3, [r9, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12017
.L12094:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC970
	movt	r2, #:upper16:.LC970
	ldr	r0, .L12101+24
	ldr	r3, [r9, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12019
.L12096:
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC972
	movt	r2, #:upper16:.LC972
	ldr	r0, .L12101+28
	ldr	r3, [r9, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12021
.L12100:
	ldr	ip, [r4, #96]
	movw	r0, #:lower16:.LC944
	movw	r3, #:lower16:.LC943
	ldr	lr, [r2]
	movt	r0, #:upper16:.LC944
	movt	r3, #:upper16:.LC943
	ldr	r1, [sp, #28]
	ldr	r2, [r4, #92]
	ldr	ip, [ip, #4]
	ldr	lr, [lr, #20]
	ldr	r1, [r1]
	ldr	r4, [r4]
	str	ip, [sp, #8]
	ldr	ip, [r2, #4]
	movw	r2, #:lower16:.LC952
	cmp	lr, #2
	movt	r2, #:upper16:.LC952
	movls	r3, r0
	add	r1, r1, #32
	ldr	r0, .L12101+32
	stm	sp, {r4, ip}
	bl	__dynamic_dev_dbg
	mov	r0, #0
	b	.L12010
.L12034:
	ldr	r3, [r5, #620]
	cmp	r3, #16384
	bls	.L12027
	ldr	r10, [r4, #96]
.L12039:
	mov	r1, #16384
	str	r9, [r5, #620]
	b	.L12041
.L12091:
	movw	r3, #3066
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L12088
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC947
	movt	r2, #:upper16:.LC947
	ldr	r0, .L12101+36
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L12088:
	mvn	r0, #18
	b	.L12010
.L12035:
	ldr	r3, [r5, #620]
	cmp	r3, #16384
	bls	.L12027
	ldr	r10, [r4, #96]
	ldr	fp, [r4, #172]
	cmp	fp, #0
	beq	.L12039
	ldr	r0, [fp]
	bl	kfree
	ldr	r3, [r10, #8]
	mov	r0, r10
	mov	r1, fp
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r10, [r4, #96]
	b	.L12039
.L12095:
	movw	r3, #3162
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L12088
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC971
	movt	r2, #:upper16:.LC971
	ldr	r0, .L12101+40
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	mvn	r0, #18
	b	.L12010
.L12093:
	movw	r3, #3114
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L12088
	ldr	r1, [r8]
	movw	r2, #:lower16:.LC949
	movt	r2, #:upper16:.LC949
	ldr	r0, .L12101+44
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	mvn	r0, #18
	b	.L12010
.L12102:
	.align	2
.L12101:
	.word	.LANCHOR0+2476
	.word	.LANCHOR0+2488
	.word	.LANCHOR0+2500
	.word	.LANCHOR4+3000
	.word	.LANCHOR4+3024
	.word	.LANCHOR4+3072
	.word	.LANCHOR4+3120
	.word	.LANCHOR4+3168
	.word	.LANCHOR4+3192
	.word	.LANCHOR4+3048
	.word	.LANCHOR4+3144
	.word	.LANCHOR4+3096
	.fnend
	.size	mtp_function_bind, .-mtp_function_bind
	.align	2
	.global	usb_gadget_get_string
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_gadget_get_string, %function
usb_gadget_get_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	beq	.L12123
	ldr	r3, [r0, #4]
	cmp	r3, #0
	beq	.L12124
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	ldr	r4, [r3, #4]
	.pad #12
	sub	sp, sp, #12
	cmp	r4, #0
	beq	.L12107
	ldrb	r0, [r3]	@ zero_extendqisi2
	cmp	r1, r0
	bne	.L12109
	b	.L12108
.L12125:
	ldr	r4, [r3, #4]
	cmp	r4, #0
	beq	.L12107
	ldrb	r0, [r3]	@ zero_extendqisi2
	cmp	r0, r1
	beq	.L12108
.L12109:
	adds	r3, r3, #8
	bne	.L12125
.L12107:
	mvn	r1, #21
.L12103:
	mov	r0, r1
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L12108:
	mov	r0, r4
	mov	r5, r2
	bl	strlen
	mov	r2, #126
	add	r3, r5, #2
	cmp	r0, r2
	movcc	r1, r0
	movcs	r1, r2
	str	r2, [sp]
	mov	r0, r4
	mov	r2, #1
	bl	utf8s_to_utf16s
	cmp	r0, #0
	blt	.L12107
	add	r3, r0, #1
	mov	r2, #3
	lsl	r3, r3, #1
	strb	r2, [r5, #1]
	uxtb	r3, r3
	mov	r1, r3
	strb	r3, [r5]
	b	.L12103
.L12123:
	mov	r3, #4
	mov	ip, #3
	mov	r1, r3
	strb	r3, [r2]
	strb	ip, [r2, #1]
	ldrh	r3, [r0]
	strb	r3, [r2, #2]
	ldrh	r3, [r0]
	lsr	r3, r3, #8
	strb	r3, [r2, #3]
.L12120:
	mov	r0, r1
	bx	lr
.L12124:
	mvn	r1, #21
	b	.L12120
	.fnend
	.size	usb_gadget_get_string, .-usb_gadget_get_string
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	composite_setup, %function
composite_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	add	r0, r0, #32
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	r10, r1
	str	lr, [sp, #32]
	.pad #60
	sub	sp, sp, #60
	bl	dev_get_drvdata
	ldrh	r3, [r10, #6]	@ unaligned
	ldr	r4, [r0, #4]
	cmp	r3, #4096
	str	r3, [sp, #16]
	ldrh	r6, [r10, #4]	@ unaligned
	ldrh	r8, [r10, #2]	@ unaligned
	bhi	.L12353
	ldrb	r2, [r4, #26]	@ zero_extendqisi2
	movw	r3, #:lower16:composite_setup_complete
	mov	r1, #0
	movt	r3, #:upper16:composite_setup_complete
	mov	r5, r0
	str	r1, [r4, #4]
	uxtb	r9, r6
	str	r3, [r4, #28]
	bfc	r2, #1, #1
	strb	r2, [r4, #26]
	ldr	r3, [r7, #4]
	str	r0, [r3]
	ldrb	r2, [r10, #1]	@ zero_extendqisi2
	cmp	r2, #11
	ldrls	pc, [pc, r2, asl #2]
	b	.L12129
.L12131:
	.word	.L12137
	.word	.L12136
	.word	.L12129
	.word	.L12136
	.word	.L12129
	.word	.L12129
	.word	.L12135
	.word	.L12129
	.word	.L12134
	.word	.L12133
	.word	.L12132
	.word	.L12130
.L12130:
	ldrb	r3, [r10]	@ zero_extendqisi2
	ldr	r0, [r0, #12]
	cmp	r3, #1
	bne	.L12139
	cmp	r9, #15
	movls	r3, #0
	movhi	r3, #1
	cmp	r0, #0
	moveq	r3, #1
	cmp	r3, #0
	beq	.L12525
.L12353:
	mvn	r6, #94
.L12126:
	mov	r0, r6
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12137:
	ldr	r1, [r7, #20]
	ldrb	r3, [r10]	@ zero_extendqisi2
	cmp	r1, #4
	bls	.L12521
	cmp	r3, #129
	bne	.L12521
	ldr	r3, [r4]
	mov	r1, #0
	strb	r1, [r3]
	strb	r1, [r3, #1]
	ldr	r1, [r0, #12]
	clz	r3, r1
	lsr	r3, r3, #5
	cmp	r9, #15
	orrhi	r3, r3, #1
	cmp	r3, #0
	beq	.L12526
.L12350:
	mov	r8, #2
.L12523:
	mov	r6, r8
	b	.L12153
.L12136:
	ldr	r2, [r7, #20]
	ldrb	r3, [r10]	@ zero_extendqisi2
	cmp	r2, #4
	bls	.L12521
	cmp	r3, #1
	bne	.L12521
	cmp	r8, #0
	bne	.L12353
	ldr	r2, [r0, #12]
	clz	r3, r2
	lsr	r3, r3, #5
	cmp	r9, #15
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L12353
	add	r9, r9, #12
	ldr	r0, [r2, r9, lsl #2]
	cmp	r0, #0
	beq	.L12353
	ldr	r3, [r0, #68]
	cmp	r3, #0
	beq	.L12523
	lsr	r1, r6, #8
	blx	r3
	subs	r6, r0, #0
	blt	.L12292
	movw	r8, #32767
	subs	r8, r6, r8
	movne	r8, #1
.L12276:
	cmp	r8, #0
	beq	.L12140
.L12522:
	mov	r8, r6
.L12153:
	ldr	r3, [sp, #16]
	str	r8, [r4, #4]
	mov	r2, #32
	ldrb	r0, [r4, #26]	@ zero_extendqisi2
	mov	r1, r4
	cmp	r3, r6
	movle	r3, #0
	movgt	r3, #1
	bfi	r0, r3, #1, #1
	strb	r0, [r4, #26]
	ldr	r0, [r7, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	bge	.L12126
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #3498
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L12527
.L12306:
	ldr	ip, [r4, #4]
	mov	r3, #0
	ldr	lr, [r4, #48]
	str	r3, [r4, #44]
	cmp	lr, ip
	beq	.L12126
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, #42]
	tst	r2, #4
	beq	.L12126
	ldr	r1, [r7, #4]
	movw	r2, #:lower16:.LC6
	add	r0, r0, #24
	movt	r2, #:upper16:.LC6
	ldr	r1, [r1]
	ldr	r1, [r1]
	str	lr, [sp]
	str	ip, [sp, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12126
.L12135:
	ldrb	r3, [r10]	@ zero_extendqisi2
	cmp	r3, #128
	bne	.L12521
	lsr	fp, r8, #8
	sub	r3, fp, #1
	cmp	r3, #14
	ldrls	pc, [pc, r3, asl #2]
	b	.L12321
.L12142:
	.word	.L12147
	.word	.L12146
	.word	.L12145
	.word	.L12321
	.word	.L12321
	.word	.L12144
	.word	.L12143
	.word	.L12321
	.word	.L12321
	.word	.L12321
	.word	.L12321
	.word	.L12321
	.word	.L12321
	.word	.L12321
	.word	.L12141
.L12134:
	ldrb	r3, [r10]	@ zero_extendqisi2
	ldr	r0, [r0, #12]
	cmp	r3, #128
	bne	.L12139
	cmp	r0, #0
	beq	.L12277
	bl	get_config_number
	ldr	r3, [r4]
	add	r0, r0, #1
	strb	r0, [r3]
.L12278:
	ldr	r3, [sp, #16]
	cmp	r3, #1
	movcc	r6, r3
	movcs	r6, #1
	mov	r8, r6
	b	.L12153
.L12133:
	ldrb	r3, [r10]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L12239
.L12521:
	ldr	r0, [r5, #12]
.L12139:
	and	r3, r3, #31
	cmp	r3, #1
	beq	.L12293
	cmp	r3, #2
	bne	.L12355
	mov	r2, r0
	asr	r3, r6, #3
	ldr	r1, [r2, #36]!
	and	r6, r6, #15
	and	r3, r3, #16
	orr	r3, r3, r6
	cmp	r2, r1
	sub	r4, r1, #72
	beq	.L12355
	ldr	r1, [r1, #8]
	lsr	r1, r1, r3
	tst	r1, #1
	bne	.L12298
	mov	r6, #1
	lsl	r6, r6, r3
	b	.L12299
.L12300:
	ldr	r3, [r3, #8]
	tst	r3, r6
	bne	.L12298
.L12299:
	ldr	r3, [r4, #72]
	cmp	r2, r3
	sub	r4, r3, #72
	bne	.L12300
.L12355:
	mov	r4, #0
.L12295:
	cmp	r0, #0
	beq	.L12353
.L12297:
	ldr	r3, [r0, #16]
	cmp	r3, #0
	beq	.L12353
	mov	r1, r10
	blx	r3
	mov	r6, r0
.L12301:
	movw	r3, #32767
	cmp	r6, r3
	bne	.L12126
	movw	r7, #:lower16:.LANCHOR4
	movw	r3, #3450
	movt	r7, #:upper16:.LANCHOR4
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L12528
.L12303:
	movw	r2, #3474
	ldr	r3, [r5, #56]
	ldrh	r2, [r7, r2]
	add	r3, r3, #1
	tst	r2, #4
	str	r3, [r5, #56]
	bne	.L12304
.L12307:
	movw	r6, #32767
	b	.L12126
.L12132:
	ldrb	r3, [r10]	@ zero_extendqisi2
	ldr	r0, [r0, #12]
	cmp	r3, #129
	bne	.L12139
	clz	r3, r0
	lsr	r3, r3, #5
	cmp	r9, #15
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L12353
	add	r9, r9, #12
	ldr	r0, [r0, r9, lsl #2]
	cmp	r0, #0
	beq	.L12353
	ldr	r3, [r0, #44]
	cmp	r3, #0
	beq	.L12285
	mov	r1, r6
	blx	r3
	subs	r6, r0, #0
	blt	.L12126
	uxtb	r3, r6
.L12285:
	ldr	r1, [sp, #16]
	ldr	r2, [r4]
	cmp	r1, #1
	movcc	r6, r1
	movcs	r6, #1
	strb	r3, [r2]
	mov	r8, r6
	b	.L12153
.L12129:
	ldrb	r3, [r10]	@ zero_extendqisi2
	b	.L12521
.L12293:
	clz	r3, r0
	lsr	r3, r3, #5
	cmp	r9, #15
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L12355
	add	r3, r9, #12
	ldr	r4, [r0, r3, lsl #2]
	cmp	r4, #0
	beq	.L12297
	ldr	r3, [r4, #52]
	cmp	r3, #0
	beq	.L12297
.L12315:
	mov	r1, r10
	mov	r0, r4
	blx	r3
	mov	r6, r0
	b	.L12301
.L12298:
	cmp	r4, #0
	beq	.L12295
	ldr	r3, [r4, #52]
	cmp	r3, #0
	bne	.L12315
	b	.L12295
.L12277:
	ldr	r3, [r4]
	strb	r0, [r3]
	b	.L12278
.L12525:
	add	r3, r9, #12
	ldr	r10, [r0, r3, lsl #2]
	cmp	r10, #0
	beq	.L12353
	cmp	r8, #0
	bne	.L12529
	ldr	r3, [r10, #44]
	cmp	r3, #0
	beq	.L12523
	ldr	r3, [r10, #40]
.L12280:
	mov	r1, r6
	mov	r2, r8
	mov	r0, r10
	blx	r3
	movw	r3, #32767
	mov	r6, r0
	cmp	r0, r3
	beq	.L12282
	mvn	r8, r0
	lsr	r8, r8, #31
	b	.L12276
.L12143:
	ldr	r3, [r7, #20]
	cmp	r3, #2
	bls	.L12353
	ldr	r3, [r7, #16]
	cmp	r3, #4
	bhi	.L12353
.L12146:
	ldr	r0, [sp, #16]
	bl	set_config_mode
	ldr	r3, [r5]
	ldr	r10, [r3, #16]
	cmp	r10, #5
	beq	.L12155
	ldr	r3, [r3, #20]
	cmp	r3, #2
	movls	r10, #0
	bls	.L12155
	cmp	r10, #3
	beq	.L12156
	cmp	fp, #7
	moveq	r10, #3
	movne	r10, #0
.L12155:
	uxtb	r0, r8
	bl	set_config_number
	mov	r2, r5
	ldr	r9, [r2, #36]!
	cmp	r2, r9
	sub	r9, r9, #28
	bne	.L12157
	b	.L12316
.L12531:
	tst	r3, #1
	beq	.L12160
.L12161:
	cmp	r0, #0
	sub	r0, r0, #1
	beq	.L12530
.L12160:
	ldr	r9, [r9, #28]
	cmp	r2, r9
	sub	r9, r9, #28
	beq	.L12316
.L12157:
	cmp	r10, #3
	ldrb	r3, [r9, #45]	@ zero_extendqisi2
	beq	.L12158
	cmp	r10, #5
	beq	.L12531
	tst	r3, #4
	bne	.L12161
	b	.L12160
.L12144:
	ldr	r3, [r7, #20]
	cmp	r3, #2
	bls	.L12353
	ldr	r3, [r7, #16]
	cmp	r3, #4
	bhi	.L12353
	ldr	ip, [r0, #4]
	mov	r2, #10
	mov	r3, #6
	mov	r1, r3
	ldr	r8, [ip]
	strb	r2, [r8]
	strb	r3, [r8, #1]
	ldrh	r3, [r0, #19]	@ unaligned
	strh	r3, [r8, #2]	@ unaligned
	ldrb	r3, [r0, #21]	@ zero_extendqisi2
	strb	r3, [r8, #4]
	ldrb	r3, [r0, #22]	@ zero_extendqisi2
	strb	r3, [r8, #5]
	ldrb	r3, [r0, #23]	@ zero_extendqisi2
	strb	r3, [r8, #6]
	ldr	r3, [r0]
	ldr	r3, [r3, #4]
	ldrh	r3, [r3, #20]
	strb	r3, [r8, #7]
	bl	count_configs
	ldr	r2, [sp, #16]
	mov	r3, #0
	strb	r0, [r8, #8]
	strb	r3, [r8, #9]
	cmp	r2, #10
	movlt	r6, r2
	movge	r6, #10
	mov	r8, r6
	b	.L12153
.L12141:
	ldr	r3, [r7, #20]
	cmp	r3, #4
	bhi	.L12235
	ldrb	r3, [r7, #377]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L12353
.L12235:
	ldr	ip, [r5, #4]
	mov	r2, #0
	mov	r3, #5
	mov	r0, #15
	mov	r9, #12
	mov	r1, #1
	mov	r8, #7
	mov	lr, #16
	ldr	r6, [ip]
	mov	ip, #2
	strb	r3, [r6]
	strb	r0, [r6, #1]
	strb	r3, [r6, #2]
	strb	r2, [r6, #3]
	strb	r2, [r6, #4]
	ldr	r3, [r5, #4]
	ldr	r3, [r3]
	strh	r9, [r6, #2]	@ movhi
	strb	r1, [r6, #4]
	strb	r8, [r3, #5]
	strb	lr, [r3, #6]
	strb	ip, [r3, #7]
	strb	r2, [r3, #8]
	strb	r2, [r3, #9]
	strb	r2, [r3, #10]
	strb	r2, [r3, #11]
	ldr	r3, [r5]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L12236
	ldr	lr, [r5, #4]
	movw	r9, #4106
	ldrh	r3, [r6, #2]	@ unaligned
	movt	r9, 3
	ldrb	ip, [r6, #4]	@ zero_extendqisi2
	ldr	lr, [lr]
	add	r8, r3, #10
	add	ip, ip, r1
	strh	r8, [r6, #2]	@ movhi
	add	r8, lr, r3
	strb	ip, [r6, #4]
	str	r9, [lr, r3]	@ unaligned
	strb	r0, [r8, #4]
	strb	r2, [r8, #5]
	strb	r1, [r8, #6]
	ldr	r3, [r5]
	ldr	r3, [r3]
	ldr	r3, [r3, #28]
	cmp	r3, r2
	beq	.L12237
	add	r0, sp, #52
	blx	r3
	ldrb	r1, [sp, #52]	@ zero_extendqisi2
	ldrh	r3, [sp, #54]
.L12238:
	strb	r1, [r8, #7]
	strh	r3, [r8, #8]	@ unaligned
.L12236:
	ldrh	r3, [r6, #2]	@ unaligned
	ldr	r2, [sp, #16]
	cmp	r2, r3
	movcc	r6, r2
	movcs	r6, r3
	mov	r8, r6
	b	.L12153
.L12145:
	ldr	r0, [sp, #16]
	bl	set_string_mode
	ands	r8, r8, #255
	ldr	r9, [r4]
	beq	.L12532
	ldrb	r3, [r5, #49]	@ zero_extendqisi2
	cmp	r8, r3
	beq	.L12533
	ldrb	r3, [r5, #50]	@ zero_extendqisi2
	cmp	r8, r3
	beq	.L12534
	ldrb	r3, [r5, #51]	@ zero_extendqisi2
	cmp	r8, r3
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	beq	.L12498
.L12216:
	ldr	r3, [r3, #2476]
	ldr	r10, [r3, #16]
	cmp	r10, #0
	subne	r10, r10, #4
	beq	.L12217
.L12218:
	ldr	r0, [r10, #4]!
	cmp	r0, #0
	beq	.L12217
	ldrh	r3, [r0]
	cmp	r3, r6
	bne	.L12218
	mov	r2, r9
	mov	r1, r8
	bl	usb_gadget_get_string
	cmp	r0, #0
	ble	.L12218
.L12211:
	uxth	r3, r0
.L12524:
	ldr	r2, [sp, #16]
	cmp	r3, r2
	movcc	r6, r3
	movcs	r6, r2
	b	.L12522
.L12321:
	mvn	r6, #94
.L12140:
	movw	r3, #32767
	sub	r3, r6, r3
	clz	r3, r3
	lsr	r3, r3, #5
.L12284:
	ldr	r2, [sp, #16]
	cmp	r2, #0
	moveq	r3, #0
	cmp	r3, #0
	beq	.L12126
	cmp	r5, #0
	beq	.L12307
	movw	r2, #:lower16:.LC992
	movw	r0, #:lower16:.LC585
	ldr	r3, .L12553
	movt	r2, #:upper16:.LC992
	movt	r0, #:upper16:.LC585
	movw	r1, #1500
	movw	r6, #32767
	bl	warn_slowpath_fmt
	b	.L12126
.L12158:
	tst	r3, #2
	bne	.L12161
	b	.L12160
.L12230:
	ldr	fp, [fp, #72]
	cmp	r6, fp
	sub	fp, fp, #72
	bne	.L12225
.L12226:
	ldr	r3, [sp, #20]
	ldr	r2, [r3, #28]
	ldr	r3, [sp, #28]
	cmp	r3, r2
	sub	r3, r2, #28
	str	r3, [sp, #20]
	bne	.L12219
.L12316:
	mvn	r6, #21
	b	.L12126
.L12526:
	add	r9, r9, #12
	ldr	r0, [r1, r9, lsl #2]
	cmp	r0, #0
	beq	.L12350
	ldr	r3, [r0, #64]
	cmp	r3, #0
	beq	.L12349
	blx	r3
	cmp	r0, #0
	uxtbge	r2, r0
	ubfxge	r0, r0, #8, #8
	blt	.L12350
.L12288:
	ldr	r3, [r4]
	mov	r8, #2
	mov	r6, r8
	strb	r2, [r3]
	strb	r0, [r3, #1]
	b	.L12153
.L12304:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC986
	movt	r2, #:upper16:.LC986
	ldr	r0, .L12553+4
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12126
.L12528:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC985
	ldr	ip, [r4]
	movt	r2, #:upper16:.LC985
	ldr	r3, .L12553
	ldr	r0, .L12553+8
	add	r1, r1, #32
	stm	sp, {r9, ip}
	bl	__dynamic_dev_dbg
	b	.L12303
.L12529:
	ldr	r3, [r10, #40]
	cmp	r3, #0
	bne	.L12280
	b	.L12353
.L12527:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC991
	mov	r3, r6
	movt	r2, #:upper16:.LC991
	ldr	r0, .L12553+12
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12306
.L12530:
	ldr	r2, [r5, #4]
	mov	r3, #9
	ldr	r2, [r2]
	mov	r1, r2
	mov	r6, r2
	str	r2, [sp, #28]
	strb	r3, [r1], #9
	strb	fp, [r2, #1]
	ldrb	r3, [r9, #44]	@ zero_extendqisi2
	str	r1, [sp, #24]
	strb	r3, [r2, #4]
	bl	get_config_number
	add	r0, r0, #1
	strb	r0, [r6, #5]
	ldrb	r3, [r9, #21]	@ zero_extendqisi2
	strb	r3, [r6, #6]
	ldrb	r3, [r9, #22]	@ zero_extendqisi2
	mvn	r3, r3, lsl #25
	mvn	r3, r3, lsr #25
	strb	r3, [r6, #7]
	ldrb	r3, [r9, #23]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L12163
	ldr	r2, [r9, #24]
	mov	r3, #500
	ldr	r2, [r2, #64]
	sdiv	r3, r3, r2
	uxtb	r3, r3
.L12163:
	ldr	r2, [sp, #28]
	strb	r3, [r2, #8]
	ldr	fp, [r9, #8]
	cmp	fp, #0
	beq	.L12164
	ldr	r1, [fp]
	cmp	r1, #0
	beq	.L12329
	ldrb	r6, [r1]	@ zero_extendqisi2
	movw	r8, #4087
	ldr	r3, [sp, #24]
	b	.L12166
.L12168:
	ldrb	r6, [r1]	@ zero_extendqisi2
	cmp	r6, r8
	bhi	.L12316
.L12166:
	mov	r0, r3
	mov	r2, r6
	bl	memcpy
	ldr	r1, [fp, #4]!
	sub	r8, r8, r6
	add	r3, r0, r6
	cmp	r1, #0
	bne	.L12168
	ldr	r2, [sp, #24]
	subs	r6, r3, r2
	bmi	.L12126
.L12165:
	mov	r2, r9
	ldr	r0, [sp, #24]
	rsb	r1, r6, #4080
	ldr	r3, [r2, #36]!
	add	r1, r1, #7
	add	r0, r0, r6
	cmp	r2, r3
	sub	r3, r3, #72
	str	r0, [sp, #24]
	mov	r0, r1
	ldreq	r2, [sp, #24]
	beq	.L12170
	ldr	r8, [sp, #24]
	mov	fp, r2
	str	r9, [sp, #20]
	mov	r9, r0
	strd	r4, [sp, #32]
	str	r7, [sp, #40]
	mov	r7, r3
.L12179:
	ldr	r0, [r7]
	bl	is_available_function
	cmp	r0, #0
	beq	.L12171
	cmp	r10, #3
	beq	.L12172
	cmp	r10, #5
	bne	.L12173
	ldr	r6, [r7, #12]
.L12174:
	cmp	r6, #0
	beq	.L12171
	ldr	r1, [r6]
	mov	r5, r9
	cmp	r1, #0
	beq	.L12330
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r9, r4
	bcc	.L12316
	mov	r3, r8
	b	.L12176
.L12177:
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r4, r5
	bhi	.L12316
.L12176:
	mov	r0, r3
	mov	r2, r4
	bl	memcpy
	ldr	r1, [r6, #4]!
	sub	r5, r5, r4
	add	r3, r0, r4
	cmp	r1, #0
	bne	.L12177
	subs	r6, r3, r8
	bmi	.L12126
.L12175:
	mov	r2, r9
	mov	r1, r8
	str	r10, [sp]
	mov	r0, r7
	ldr	r3, [sp, #20]
	bl	change_conf
	cmp	r0, #0
	blt	.L12535
	sub	r9, r9, r6
	add	r8, r8, r6
.L12171:
	ldr	r7, [r7, #72]
	cmp	fp, r7
	sub	r7, r7, #72
	bne	.L12179
	ldr	r9, [sp, #20]
	mov	r2, r8
	str	r8, [sp, #24]
	ldrd	r4, [sp, #32]
	ldr	r7, [sp, #40]
.L12170:
	ldr	r8, [sp, #28]
	mov	r0, r9
	sub	r6, r2, r8
	mov	r1, r8
	bl	set_interface_count
	uxth	r3, r6
	cmp	r6, #0
	strh	r3, [r8, #2]	@ unaligned
	bge	.L12524
	b	.L12126
.L12173:
	ldr	r6, [r7, #16]
	b	.L12174
.L12172:
	ldr	r6, [r7, #8]
	b	.L12174
.L12217:
	mov	r2, r5
	ldr	r3, [r2, #36]!
	cmp	r2, r3
	sub	r3, r3, #28
	strne	r4, [sp, #24]
	movne	r4, r6
	str	r3, [sp, #20]
	str	r2, [sp, #28]
	beq	.L12316
.L12219:
	ldr	r3, [sp, #20]
	ldr	r6, [r3, #4]
	cmp	r6, #0
	subne	r6, r6, #4
	beq	.L12223
.L12224:
	ldr	r0, [r6, #4]!
	cmp	r0, #0
	beq	.L12223
	ldrh	r3, [r0]
	cmp	r3, r4
	bne	.L12224
	mov	r2, r9
	mov	r1, r8
	bl	usb_gadget_get_string
	cmp	r0, #0
	ble	.L12224
.L12516:
	ldr	r4, [sp, #24]
	b	.L12211
.L12223:
	ldr	r6, [sp, #20]
	ldr	fp, [r6, #36]!
	cmp	r6, fp
	sub	fp, fp, #72
	beq	.L12226
.L12225:
	ldr	r10, [fp, #4]
	cmp	r10, #0
	subne	r10, r10, #4
	beq	.L12230
.L12231:
	ldr	r0, [r10, #4]!
	cmp	r0, #0
	beq	.L12230
	ldrh	r3, [r0]
	cmp	r3, r4
	bne	.L12231
	mov	r2, r9
	mov	r1, r8
	bl	usb_gadget_get_string
	cmp	r0, #0
	ble	.L12231
	b	.L12516
.L12282:
	movw	r7, #:lower16:.LANCHOR4
	movw	r3, #3402
	movt	r7, #:upper16:.LANCHOR4
	ldrh	r3, [r7, r3]
	tst	r3, #4
	bne	.L12536
.L12283:
	movw	r2, #3426
	ldr	r3, [r5, #56]
	ldrh	r2, [r7, r2]
	add	r3, r3, #1
	tst	r2, #4
	str	r3, [r5, #56]
	moveq	r3, #1
	beq	.L12284
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC986
	movt	r2, #:upper16:.LC986
	ldr	r0, .L12553+16
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	mov	r3, #1
	b	.L12284
.L12532:
	mov	r1, #256
	mov	r0, r9
	bl	__memzero
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #3
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2476]
	strb	r2, [r9, #1]
	ldr	ip, [r3, #16]
	cmp	ip, #0
	beq	.L12185
	ldr	r3, [ip]
	add	lr, r9, #2
	cmp	r3, #0
	beq	.L12185
	add	r0, r9, #254
.L12190:
	ldrh	r2, [r9, #2]
	ldrh	r1, [r3]
	cmp	r2, #0
	beq	.L12332
	cmp	lr, r0
	bcs	.L12332
	cmp	r1, r2
	beq	.L12187
	mov	r3, lr
	b	.L12188
.L12537:
	cmp	r3, r0
	bcs	.L12186
	cmp	r1, r2
	beq	.L12187
.L12188:
	ldrh	r2, [r3, #2]!
	cmp	r2, #0
	bne	.L12537
.L12186:
	strh	r1, [r3]	@ movhi
.L12187:
	ldr	r3, [ip, #4]!
	cmp	r3, #0
	bne	.L12190
.L12185:
	mov	r3, r5
	ldr	r8, [r3, #36]!
	cmp	r3, r8
	mov	r2, r3
	sub	r3, r8, #28
	beq	.L12184
	add	r8, r9, #2
	mov	fp, r3
	strd	r4, [sp, #20]
	mov	r3, r7
	add	r10, r9, #254
	mov	r7, r8
	mov	r5, r9
	mov	r8, r3
	mov	r4, r2
.L12201:
	ldr	lr, [fp, #4]
	cmp	lr, #0
	bne	.L12192
.L12195:
	mov	r6, fp
	ldr	r9, [r6, #36]!
	cmp	r6, r9
	sub	r9, r9, #72
	bne	.L12193
	b	.L12194
.L12203:
	ldr	r9, [r9, #72]
	cmp	r6, r9
	sub	r9, r9, #72
	beq	.L12194
.L12193:
	ldr	r0, [r9]
	bl	is_available_function
	cmp	r0, #0
	beq	.L12203
	ldr	r0, [r9, #4]
	cmp	r0, #0
	beq	.L12203
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L12203
.L12208:
	ldrh	r2, [r5, #2]
	ldrh	r1, [r3]
	cmp	r2, #0
	beq	.L12336
	cmp	r7, r10
	bcs	.L12336
	cmp	r1, r2
	beq	.L12205
	mov	r3, r7
	b	.L12206
.L12538:
	cmp	r3, r10
	bcs	.L12204
	cmp	r1, r2
	beq	.L12205
.L12206:
	ldrh	r2, [r3, #2]!
	cmp	r2, #0
	bne	.L12538
.L12204:
	strh	r1, [r3]	@ movhi
.L12205:
	ldr	r3, [r0, #4]!
	cmp	r3, #0
	bne	.L12208
	b	.L12203
.L12194:
	ldr	fp, [fp, #28]
	cmp	r4, fp
	sub	fp, fp, #28
	bne	.L12201
	mov	r9, r5
	ldrd	r4, [sp, #20]
	mov	r7, r8
.L12184:
	mov	r3, #0
.L12191:
	add	r2, r9, r3, lsl #1
	ldrh	r2, [r2, #2]	@ unaligned
	cmp	r2, #0
	bne	.L12210
	cmp	r3, #0
	beq	.L12316
.L12209:
	add	r3, r3, #1
	lsl	r3, r3, #1
	uxtb	r3, r3
	mov	r0, r3
	strb	r3, [r9]
	b	.L12211
.L12336:
	mov	r3, r7
	b	.L12204
.L12192:
	ldr	r3, [lr]
	cmp	r3, #0
	beq	.L12195
.L12200:
	ldrh	r2, [r5, #2]
	ldrh	r1, [r3]
	cmp	r2, #0
	beq	.L12334
	cmp	r7, r10
	bcs	.L12334
	cmp	r1, r2
	beq	.L12197
	mov	r3, r7
	b	.L12198
.L12539:
	cmp	r3, r10
	bcs	.L12196
	cmp	r1, r2
	beq	.L12197
.L12198:
	ldrh	r2, [r3, #2]!
	cmp	r2, #0
	bne	.L12539
.L12196:
	strh	r1, [r3]	@ movhi
.L12197:
	ldr	r3, [lr, #4]!
	cmp	r3, #0
	bne	.L12200
	b	.L12195
.L12334:
	mov	r3, r7
	b	.L12196
.L12349:
	mov	r0, r2
	b	.L12288
.L12164:
	mov	r2, r9
	ldr	r3, [r2, #36]!
	cmp	r2, r3
	sub	r3, r3, #72
	mov	r1, r3
	beq	.L12540
	movw	r3, #4087
	mov	fp, r2
	str	r9, [sp, #20]
	mov	r9, r3
	strd	r4, [sp, #32]
	ldr	r8, [sp, #24]
	str	r7, [sp, #40]
	mov	r7, r1
	b	.L12179
.L12533:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r10, [r3, #3788]
	cmp	r10, #0
	beq	.L12541
.L12213:
	mov	r0, r10
	bl	strlen
	mov	r2, #126
	add	r3, r9, #2
	cmp	r0, r2
	movcc	r1, r0
	movcs	r1, r2
	str	r2, [sp]
	mov	r0, r10
	mov	r2, #1
	bl	utf8s_to_utf16s
	cmp	r0, #0
	blt	.L12316
	add	r3, r0, #1
	mov	r2, #3
	lsl	r3, r3, #1
	strb	r2, [r9, #1]
	uxtb	r3, r3
	mov	r0, r3
	strb	r3, [r9]
	b	.L12211
.L12330:
	mov	r6, r1
	b	.L12175
.L12210:
	add	r3, r3, #1
	cmp	r3, #127
	bne	.L12191
	b	.L12209
.L12534:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r10, [r3, #3844]
	cmp	r10, #0
	ldreq	r2, [r3, #2476]
	ldreq	r10, [r2, #4]
	bne	.L12213
.L12215:
	cmp	r10, #0
	beq	.L12216
	b	.L12213
.L12156:
	cmp	fp, #7
	moveq	r10, #0
	b	.L12155
.L12237:
	mov	r2, #500
	mov	r3, r2
	strh	r2, [sp, #54]	@ movhi
	b	.L12238
.L12498:
	ldr	r10, [r3, #3848]
	b	.L12215
.L12332:
	mov	r3, lr
	b	.L12186
.L12292:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC990
	mov	r2, r6
	movt	r1, #:upper16:.LC990
	mov	r6, r8
	add	r0, r0, #32
	bl	dev_err
	b	.L12153
.L12541:
	ldr	r2, [r3, #2476]
	ldr	r10, [r2, #8]
	cmp	r10, #0
	addeq	r10, r3, #3792
	b	.L12213
.L12536:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC985
	ldr	ip, [r10]
	movt	r2, #:upper16:.LC985
	ldr	r3, .L12553
	ldr	r0, .L12553+20
	add	r1, r1, #32
	stm	sp, {r9, ip}
	bl	__dynamic_dev_dbg
	b	.L12283
.L12329:
	mov	r6, r1
	b	.L12165
.L12540:
	ldr	r6, [sp, #28]
	mov	r0, r9
	mov	r1, r6
	bl	set_interface_count
	mov	r2, #9
	mov	r3, r2
	strb	r2, [r6, #2]
	strb	fp, [r6, #3]
	b	.L12524
.L12147:
	mov	r1, #1
	bl	count_configs
	ldr	r1, [r5]
	strb	r0, [r5, #34]
	mov	r3, #2
	ldr	r2, [r1, #4]
	ldrh	r2, [r2, #20]
	strb	r2, [r5, #24]
	str	r3, [r5, #64]
	ldr	r2, [r7, #20]
	cmp	r2, #4
	bls	.L12148
	ldr	r2, [r7, #16]
	cmp	r2, #4
	bls	.L12149
	mov	r3, #0
	mov	r2, #9
	mov	ip, #3
	movw	r0, #:lower16:.LANCHOR4
	movt	r0, #:upper16:.LANCHOR4
	strb	r3, [r5, #19]
	movw	r3, #3234
	strb	ip, [r5, #20]
	strb	r2, [r5, #24]
	ldrh	r3, [r0, r3]
	mov	r2, #8
	str	r2, [r5, #64]
	tst	r3, #4
	beq	.L12151
	movw	r2, #:lower16:.LC974
	add	r1, r1, #32
	add	r0, r0, #3216
	movt	r2, #:upper16:.LC974
	bl	__dynamic_dev_dbg
.L12151:
	ldr	r3, [sp, #16]
	add	r1, r5, #17
	ldr	r0, [r4]
	cmp	r3, #18
	movcc	r6, r3
	movcs	r6, #18
	mov	r2, r6
	mov	r8, r6
	bl	memcpy
	movw	r0, #:lower16:.LC977
	movt	r0, #:upper16:.LC977
	bl	printk
	b	.L12153
.L12149:
	mov	r0, #16
	movw	r2, #:lower16:.LANCHOR4
	movt	r2, #:upper16:.LANCHOR4
	strb	r0, [r5, #19]
	strb	r3, [r5, #20]
	movw	r3, #3258
	ldrh	r3, [r2, r3]
	tst	r3, #4
	beq	.L12151
	movw	r2, #:lower16:.LC975
	add	r1, r1, #32
	ldr	r0, .L12553+24
	movt	r2, #:upper16:.LC975
	bl	__dynamic_dev_dbg
	b	.L12151
.L12148:
	ldrb	r2, [r7, #377]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L12151
	mov	r2, #1
	movw	r0, #:lower16:.LANCHOR4
	movt	r0, #:upper16:.LANCHOR4
	strb	r2, [r5, #19]
	strb	r3, [r5, #20]
	movw	r3, #3282
	ldrh	r3, [r0, r3]
	tst	r3, #4
	beq	.L12151
	movw	r2, #:lower16:.LC976
	add	r1, r1, #32
	movt	r2, #:upper16:.LC976
	add	r0, r0, #3264
	bl	__dynamic_dev_dbg
	b	.L12151
.L12239:
	add	r3, r0, #60
	mov	r0, r3
	str	r3, [sp, #20]
	bl	_raw_spin_lock
	ldr	fp, [r5]
	ldr	r3, [r5, #12]
	str	fp, [sp, #24]
	cmp	r3, #0
	beq	.L12240
	ldrb	r3, [r3, #20]	@ zero_extendqisi2
	cmp	r8, r3
	beq	.L12542
	cmp	r8, #0
	beq	.L12543
.L12312:
	mov	r6, r5
	ldr	r9, [r6, #36]!
	sub	r9, r9, #28
	b	.L12244
.L12250:
	ldrb	r3, [r9, #20]	@ zero_extendqisi2
	cmp	r8, r3
	beq	.L12248
	bl	check_config
	cmp	r0, #0
	bne	.L12248
	ldr	r9, [r9, #28]
	sub	r9, r9, #28
.L12244:
	add	r3, r9, #28
	mov	r0, r8
	cmp	r3, r6
	bne	.L12250
	mvn	r6, #21
	b	.L12251
.L12240:
	cmp	r8, #0
	bne	.L12312
.L12243:
	ldr	r3, [sp, #24]
	add	r10, fp, #32
	ldr	r0, [r3, #16]
	bl	usb_speed_string
	mov	r2, r0
.L12252:
	movw	r3, #:lower16:.LC993
	movw	r1, #:lower16:.LC980
	movt	r3, #:upper16:.LC993
	movt	r1, #:upper16:.LC980
	mov	r0, r10
	mov	r6, #0
	str	r3, [sp]
	mov	r3, r8
	bl	_dev_info
	mov	r1, #100
.L12273:
	ldr	r3, [sp, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L12309
	ldr	r0, [sp, #24]
	blx	r3
.L12309:
	ldr	r3, [r5, #56]
	cmp	r3, #0
	bne	.L12339
	ldr	r0, [sp, #20]
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC987
	movt	r0, #:upper16:.LC987
	bl	printk
	cmp	r6, #0
	bne	.L12274
.L12308:
	cmp	r8, #0
	bne	.L12544
.L12275:
	ldr	r3, [r7, #16]
	cmp	r3, #5
	beq	.L12314
	mov	r8, #0
	mov	r6, r8
	b	.L12153
.L12248:
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L12247
	mov	r0, r5
	bl	reset_config
.L12247:
	ldr	r10, [r5]
	ldr	r0, [fp, #16]
	bl	usb_speed_string
	cmp	r9, #0
	mov	r2, r0
	add	r10, r10, #32
	beq	.L12252
	movw	r1, #:lower16:.LC981
	ldr	r3, [r9]
	mov	r6, #0
	mov	r0, r1
	movw	r1, #:lower16:.LC980
	movt	r0, #:upper16:.LC981
	movt	r1, #:upper16:.LC980
	str	r3, [sp]
	mov	r3, r8
	str	r0, [sp, #36]
	movw	r0, #:lower16:.LC983
	movt	r0, #:upper16:.LC983
	str	r0, [sp, #44]
	mov	r0, r10
	bl	_dev_info
	add	r3, r9, #48
	str	r4, [sp, #28]
	mov	r4, r6
	str	r9, [r5, #12]
	str	r3, [sp, #32]
.L12272:
	ldr	r3, [sp, #32]
	ldr	r10, [r3], #4
	cmp	r10, #0
	str	r3, [sp, #32]
	beq	.L12253
	ldr	r3, [fp, #16]
	cmp	r3, #3
	beq	.L12254
	cmp	r3, #5
	str	r3, [sp, #40]
	bne	.L12255
	ldr	r0, [sp, #36]
	bl	power_supply_get_by_name
	ldr	r6, [r10, #12]
	ldr	r3, [sp, #40]
	cmp	r6, #0
	beq	.L12545
	cmp	r0, #0
	beq	.L12546
	add	r2, sp, #52
	mov	r1, #4
	str	r3, [sp, #52]
	ldr	r3, [r0, #40]
	blx	r3
.L12263:
	ldr	r2, [r6]
	cmp	r2, #0
	beq	.L12266
	add	r3, r10, #80
	str	fp, [sp, #40]
	mov	fp, r7
	mov	r7, r4
	mov	r4, r3
.L12260:
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	cmp	r1, #5
	beq	.L12547
	ldr	r2, [r6, #4]!
	cmp	r2, #0
	bne	.L12260
.L12520:
	mov	r4, r7
	mov	r7, fp
	ldr	fp, [sp, #40]
.L12266:
	mov	r2, #0
	mov	r1, r4
	ldr	r3, [r10, #40]
	mov	r0, r10
	blx	r3
	subs	r6, r0, #0
	blt	.L12548
	movw	r3, #32767
	cmp	r6, r3
	beq	.L12549
.L12269:
	add	r4, r4, #1
	cmp	r4, #16
	bne	.L12272
.L12253:
	ldrb	r3, [r9, #23]	@ zero_extendqisi2
	ldr	r4, [sp, #28]
	cmp	r3, #0
	ldrne	r1, [r5, #64]
	mulne	r1, r1, r3
	moveq	r1, #500
	b	.L12273
.L12547:
	ldrb	r2, [r2, #2]	@ zero_extendqisi2
	mov	r1, r4
	asr	r0, r2, #3
	and	r2, r2, #15
	and	r0, r0, #16
	orr	r0, r0, r2
	bl	_set_bit
	ldr	r2, [r6, #4]!
	cmp	r2, #0
	bne	.L12260
	b	.L12520
.L12549:
	ldr	r0, .L12553+28
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L12550
.L12270:
	ldr	r0, .L12553+32
	ldr	r3, [r5, #56]
	ldrh	r2, [r0]
	add	r3, r3, #1
	str	r3, [r5, #56]
	tst	r2, #4
	beq	.L12269
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC986
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC986
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L12269
.L12548:
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #3330
	movt	r0, #:upper16:.LANCHOR4
	mov	r2, r4
	ldr	r4, [sp, #28]
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L12551
.L12267:
	mov	r0, r5
	bl	reset_config
.L12251:
	ldr	r3, [fp]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L12257
	mov	r0, fp
	mov	r1, #100
	blx	r3
.L12257:
	ldr	r0, [sp, #20]
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC987
	movt	r0, #:upper16:.LC987
	bl	printk
.L12274:
	ldr	r3, [r7, #16]
	mvn	r9, r6
	movw	r10, #32767
	lsr	r9, r9, #31
	cmp	r6, r10
	moveq	r8, #0
	andne	r8, r9, #1
	cmp	r3, #5
	bne	.L12276
	bl	get_host_os_type
	cmp	r0, #0
	bne	.L12276
.L12318:
	movw	r9, #:lower16:sec_qcom_usb_rdrv
	mov	r1, #0
	movt	r9, #:upper16:sec_qcom_usb_rdrv
	ldr	r0, [r9]
	bl	__gpio_set_value
	movw	r0, #:lower16:.LC988
	ldr	r1, .L12553
	movt	r0, #:upper16:.LC988
	ldr	r2, [r9]
	bl	printk
	movw	r0, #:lower16:.LC989
	movt	r0, #:upper16:.LC989
	bl	printk
	b	.L12276
.L12314:
	bl	get_host_os_type
	cmp	r0, #0
	beq	.L12356
	mov	r6, #0
	b	.L12522
.L12544:
	sub	r0, r8, #1
	bl	set_config_number
	b	.L12275
.L12543:
	mov	r0, r5
	bl	reset_config
	ldr	fp, [r5]
	b	.L12243
.L12542:
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #3306
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L12552
.L12242:
	ldr	r0, [sp, #20]
	bl	_raw_spin_unlock
	movw	r0, #:lower16:.LC987
	movt	r0, #:upper16:.LC987
	bl	printk
	b	.L12308
.L12356:
	mov	r6, r0
	mov	r8, #1
	b	.L12318
.L12552:
	movw	r2, #:lower16:.LC979
	add	r1, fp, #32
	ldr	r0, .L12553+36
	movt	r2, #:upper16:.LC979
	mov	r3, r8
	bl	__dynamic_dev_dbg
	b	.L12242
.L12255:
	ldr	r6, [r10, #16]
	b	.L12263
.L12254:
	ldr	r6, [r10, #8]
	b	.L12263
.L12550:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC985
	sub	r0, r0, #18
	ldr	ip, [r10]
	movt	r2, #:upper16:.LC985
	ldr	r3, .L12553+40
	add	r1, r1, #32
	stm	sp, {r4, ip}
	bl	__dynamic_dev_dbg
	b	.L12270
.L12551:
	ldr	r1, [r5]
	str	r10, [sp, #4]
	mov	r3, r2
	str	r6, [sp, #8]
	ldr	ip, [r10]
	movw	r2, #:lower16:.LC984
	movt	r2, #:upper16:.LC984
	add	r0, r0, #3312
	add	r1, r1, #32
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L12267
.L12339:
	movw	r6, #32767
	b	.L12257
.L12546:
	ldr	r1, .L12553+40
	ldr	r2, [sp, #36]
	ldr	r0, [sp, #44]
	bl	printk
	b	.L12263
.L12535:
	movw	r0, #:lower16:.LC978
	ldr	r1, .L12553+44
	mvn	r6, #21
	movt	r0, #:upper16:.LC978
	bl	printk
	b	.L12126
.L12545:
	movw	r0, #:lower16:.LC982
	ldr	r1, .L12553+40
	mvn	r6, #21
	movt	r0, #:upper16:.LC982
	ldr	r2, [r10]
	ldr	r4, [sp, #28]
	bl	printk
	b	.L12257
.L12554:
	.align	2
.L12553:
	.word	.LANCHOR5-732
	.word	.LANCHOR4+3456
	.word	.LANCHOR4+3432
	.word	.LANCHOR4+3480
	.word	.LANCHOR4+3408
	.word	.LANCHOR4+3384
	.word	.LANCHOR4+3240
	.word	.LANCHOR4+3354
	.word	.LANCHOR4+3378
	.word	.LANCHOR4+3288
	.word	.LANCHOR5-744
	.word	.LANCHOR5-756
	.fnend
	.size	composite_setup, .-composite_setup
	.align	2
	.global	usb_find_descriptor_fillbuf
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_find_descriptor_fillbuf, %function
usb_find_descriptor_fillbuf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #0
	beq	.L12570
	ldr	ip, [r2]
	cmp	ip, #0
	beq	.L12563
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldrb	lr, [ip, #1]	@ zero_extendqisi2
	cmp	lr, r3
	bne	.L12560
.L12558:
	ldrb	r4, [ip]	@ zero_extendqisi2
	cmp	r1, r4
	bcc	.L12562
	mov	r1, ip
	mov	r2, r4
	bl	memcpy
	mov	r0, r4
.L12555:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L12560:
	ldr	ip, [r2, #4]!
	cmp	ip, #0
	beq	.L12571
	ldrb	lr, [ip, #1]	@ zero_extendqisi2
	cmp	lr, r3
	beq	.L12558
	b	.L12560
.L12563:
	mvn	r0, #1
	bx	lr
.L12571:
	mvn	r0, #1
	b	.L12555
.L12562:
	mvn	r0, #21
	b	.L12555
.L12570:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	usb_find_descriptor_fillbuf, .-usb_find_descriptor_fillbuf
	.align	2
	.global	usb_descriptor_fillbuf
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_descriptor_fillbuf, %function
usb_descriptor_fillbuf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	subs	r6, r2, #0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L12576
	mov	r5, r1
	ldr	r1, [r6]
	cmp	r1, #0
	beq	.L12579
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r4, r5
	bhi	.L12576
	mov	r7, r0
	mov	r3, r0
	b	.L12577
.L12578:
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r4, r5
	bhi	.L12576
.L12577:
	mov	r0, r3
	mov	r2, r4
	bl	memcpy
	ldr	r1, [r6, #4]!
	sub	r5, r5, r4
	add	r3, r0, r4
	cmp	r1, #0
	bne	.L12578
	sub	r0, r3, r7
.L12572:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12576:
	mvn	r0, #21
	b	.L12572
.L12579:
	mov	r0, r1
	b	.L12572
	.fnend
	.size	usb_descriptor_fillbuf, .-usb_descriptor_fillbuf
	.align	2
	.global	usb_gadget_config_buf
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_gadget_config_buf, %function
usb_gadget_config_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #0
	cmpne	r2, #8
	bls	.L12592
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	sub	r6, r2, #9
	strd	r8, [sp, #16]
	mov	r9, r3
	add	r8, r5, #9
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r1, [r0]	@ unaligned
	ldr	r3, [r0, #4]	@ unaligned
	str	r1, [r5]	@ unaligned
	str	r3, [r5, #4]	@ unaligned
	ldrb	r3, [r0, #8]	@ zero_extendqisi2
	strb	r3, [r5, #8]
	ldr	r1, [r9]
	cmp	r1, #0
	beq	.L12588
	ldrb	r7, [r1]	@ zero_extendqisi2
	cmp	r6, r7
	bcc	.L12585
	mov	r4, r8
	b	.L12586
.L12587:
	ldrb	r7, [r1]	@ zero_extendqisi2
	cmp	r7, r6
	bhi	.L12585
.L12586:
	mov	r0, r4
	mov	r2, r7
	bl	memcpy
	ldr	r1, [r9, #4]!
	sub	r6, r6, r7
	add	r4, r4, r7
	cmp	r1, #0
	bne	.L12587
	subs	r0, r4, r8
	bmi	.L12581
	add	r0, r0, #9
	cmp	r0, #65536
	bge	.L12585
.L12584:
	ldrb	r3, [r5, #7]	@ zero_extendqisi2
	mov	r1, #9
	mov	r2, #2
	strb	r1, [r5]
	strb	r2, [r5, #1]
	mvn	r3, r3, lsl #25
	strh	r0, [r5, #2]	@ unaligned
	mvn	r3, r3, lsr #25
	strb	r3, [r5, #7]
.L12581:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12585:
	mvn	r0, #21
	b	.L12581
.L12588:
	mov	r0, #9
	b	.L12584
.L12592:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	usb_gadget_config_buf, .-usb_gadget_config_buf
	.align	2
	.global	usb_copy_descriptors
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_copy_descriptors, %function
usb_copy_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r0]
	cmp	r2, #0
	beq	.L12599
	mov	r3, #0
	mov	r1, r0
	mov	r0, r3
	b	.L12595
.L12600:
	mov	r3, lr
.L12595:
	ldrb	ip, [r2]	@ zero_extendqisi2
	add	lr, r3, #1
	ldr	r2, [r1, #4]!
	add	r0, r0, ip
	cmp	r2, #0
	bne	.L12600
	add	r3, r3, #2
	lsl	r4, r3, #2
	add	r0, r0, r4
.L12594:
	mov	r1, #208
	bl	__kmalloc
	subs	r6, r0, #0
	beq	.L12593
	ldr	r1, [r5]
	add	r3, r6, r4
	mov	r4, r6
	cmp	r1, #0
	beq	.L12597
.L12598:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, r3
	bl	memcpy
	str	r0, [r4], #4
	ldr	r2, [r5]
	ldr	r1, [r5, #4]!
	ldrb	r2, [r2]	@ zero_extendqisi2
	cmp	r1, #0
	add	r3, r0, r2
	bne	.L12598
.L12597:
	mov	r3, #0
	str	r3, [r4]
.L12593:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12599:
	mov	r0, #4
	mov	r4, r0
	b	.L12594
	.fnend
	.size	usb_copy_descriptors, .-usb_copy_descriptors
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_bind, %function
diag_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	ldr	r7, [r0, #24]
	cmp	r3, #15
	bhi	.L12625
	add	r1, r3, #12
	add	r2, r3, #1
	str	r4, [r0, r1, lsl #2]
	strb	r2, [r0, #44]
.L12608:
	movw	r5, #:lower16:.LANCHOR0
	movt	r5, #:upper16:.LANCHOR0
	add	r1, r5, #2576
	strb	r3, [r5, #2566]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss.constprop.166
	cmp	r0, #0
	beq	.L12609
	ldr	r1, .L12664
	str	r0, [r4, #88]
	str	r4, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss.constprop.166
	subs	r3, r0, #0
	beq	.L12609
	ldr	r0, .L12664+4
	str	r3, [r4, #84]
	str	r4, [r3]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L12626
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L12661
.L12611:
	ldr	r2, [r4, #120]
	cmp	r2, #0
	beq	.L12629
	ldrb	r3, [r5, #2566]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L12629
	ldr	ip, [r4, #116]
	ldrb	r1, [ip, #33]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L12659
	ldr	r3, [ip, #44]
	ldr	r3, [r3, #16]
	ldr	r3, [r3]
	ldr	r0, [r3, #4]
	cmp	r0, #0
	bne	.L12660
	b	.L12629
.L12663:
	ldrb	r3, [r0]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L12662
	adds	r0, r0, #8
	beq	.L12629
.L12660:
	ldr	r5, [r0, #4]
	cmp	r5, #0
	bne	.L12663
.L12607:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12609:
	mvn	r5, #18
.L12610:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L12616
.L12624:
	bl	kfree
.L12616:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L12621
	bl	kfree
.L12621:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L12622
	bl	kfree
.L12622:
	ldr	r3, [r4, #84]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L12607
	mov	r2, #0
	str	r2, [r3]
	b	.L12607
.L12629:
	mov	r5, #0
	b	.L12607
.L12661:
	ldrb	r2, [r5, #2578]	@ zero_extendqisi2
	add	r0, r5, #2640
	ldrb	r3, [r5, #2590]	@ zero_extendqisi2
	strb	r2, [r5, #2618]
	strb	r3, [r5, #2630]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L12612
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L12611
	ldrb	r2, [r5, #2578]	@ zero_extendqisi2
	ldrb	r3, [r5, #2590]	@ zero_extendqisi2
	ldr	r0, .L12664+8
	strb	r2, [r5, #2658]
	strb	r3, [r5, #2670]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L12611
	mvn	r5, #11
	b	.L12616
.L12662:
	mov	r1, r5
.L12659:
	ldrh	r0, [ip, #27]	@ unaligned
	mov	r5, #0
	blx	r2
	b	.L12607
.L12626:
	mvn	r5, #11
	b	.L12610
.L12625:
	mov	r3, #237
	b	.L12608
.L12612:
	ldr	r0, [r4, #12]
	mvn	r5, #11
	cmp	r0, #0
	bne	.L12624
	b	.L12621
.L12665:
	.align	2
.L12664:
	.word	.LANCHOR0+2588
	.word	.LANCHOR0+2600
	.word	.LANCHOR0+2680
	.fnend
	.size	diag_function_bind, .-diag_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_bind, %function
ecm_qc_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	.pad #16
	sub	sp, sp, #16
	ldr	r7, [r0, #24]
	cmp	r2, #15
	bhi	.L12667
	add	r3, r2, #1
	add	r1, r2, #12
	movw	r5, #:lower16:.LANCHOR0
	mov	r6, r0
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR0
	strb	r3, [r0, #44]
	strb	r2, [r4, #120]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	strb	r2, [r5, #2706]
	strb	r2, [r5, #2719]
	cmp	r3, #15
	bhi	.L12667
	add	r0, r3, #12
	add	r2, r3, #1
	ldr	r1, .L12733
	str	r4, [r6, r0, lsl #2]
	strb	r2, [r6, #44]
	strb	r3, [r4, #121]
	strb	r3, [r5, #2720]
	strb	r3, [r5, #2726]
	strb	r3, [r5, #2738]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss.constprop.166
	cmp	r0, #0
	beq	.L12667
	ldr	r1, .L12733+4
	str	r0, [r4, #88]
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss.constprop.166
	cmp	r0, #0
	beq	.L12667
	ldr	r1, .L12733+8
	str	r0, [r4, #92]
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss.constprop.166
	subs	r3, r0, #0
	beq	.L12667
	str	r3, [r4, #144]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r8, r0
	str	r0, [r4, #148]
	beq	.L12671
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L12670
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L12670:
	str	r0, [r8]
	ldr	r3, [r4, #148]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L12671
	str	r4, [r3, #32]
	ldr	r2, [r4, #148]
	movw	r3, #:lower16:ecm_qc_notify_complete
	movt	r3, #:upper16:ecm_qc_notify_complete
	ldr	r0, .L12733+12
	str	r3, [r2, #28]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L12671
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L12732
.L12672:
	movw	r2, #:lower16:.LANCHOR4
	movw	r3, #3522
	movt	r2, #:upper16:.LANCHOR4
	movw	r1, #:lower16:ecm_qc_open
	ldrh	r0, [r2, r3]
	movw	r3, #:lower16:ecm_qc_close
	movt	r1, #:upper16:ecm_qc_open
	movt	r3, #:upper16:ecm_qc_close
	str	r1, [r4, #112]
	str	r3, [r4, #116]
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	bne	.L12675
	mov	r5, r0
.L12666:
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12732:
	ldrb	r1, [r5, #2750]	@ zero_extendqisi2
	ldrb	r2, [r5, #2762]	@ zero_extendqisi2
	ldrb	r3, [r5, #2774]	@ zero_extendqisi2
	ldr	r0, .L12733+16
	strb	r1, [r5, #2826]
	strb	r2, [r5, #2838]
	strb	r3, [r5, #2850]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L12673
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L12672
	ldrb	r3, [r5, #2774]	@ zero_extendqisi2
	ldrb	r1, [r5, #2750]	@ zero_extendqisi2
	ldrb	r2, [r5, #2762]	@ zero_extendqisi2
	ldr	r0, .L12733+20
	strb	r1, [r5, #2902]
	strb	r2, [r5, #2914]
	strb	r3, [r5, #2926]
	bl	usb_copy_descriptors
	ldr	r3, [r4, #8]
	str	r0, [r4, #12]
	cmp	r3, #0
	bne	.L12672
.L12673:
	ldr	r0, [r4, #12]
	mvn	r5, #11
	cmp	r0, #0
	beq	.L12679
.L12685:
	bl	kfree
.L12678:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L12679
	bl	kfree
.L12679:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L12680
	bl	kfree
.L12680:
	ldr	r3, [r4, #148]
	cmp	r3, #0
	beq	.L12681
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #144]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L12681:
	ldr	r3, [r4, #144]
	movw	r0, #:lower16:.LC995
	ldr	r1, .L12733+24
	movt	r0, #:upper16:.LC995
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	mov	r3, r5
	ldr	r2, [r4]
	bl	printk
	b	.L12666
.L12675:
	ldr	r5, [r6, #24]
	add	r0, r2, #3504
	movw	ip, #:lower16:.LC944
	ldr	r6, [r4, #92]
	movt	ip, #:upper16:.LC944
	movw	r3, #:lower16:.LC943
	ldr	lr, [r4, #144]
	movt	r3, #:upper16:.LC943
	ldr	r1, [r7]
	ldr	r5, [r5]
	ldr	r2, [lr, #4]
	ldr	lr, [r4, #88]
	add	r1, r1, #32
	ldr	r5, [r5, #20]
	str	r2, [sp, #8]
	ldr	r4, [r6, #4]
	movw	r2, #:lower16:.LC994
	movt	r2, #:upper16:.LC994
	cmp	r5, #2
	mov	r5, #0
	movls	r3, ip
	str	r4, [sp, #4]
	ldr	ip, [lr, #4]
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L12666
.L12667:
	mvn	r5, #18
.L12669:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	bne	.L12685
	b	.L12678
.L12671:
	mvn	r5, #11
	b	.L12669
.L12734:
	.align	2
.L12733:
	.word	.LANCHOR0+2748
	.word	.LANCHOR0+2760
	.word	.LANCHOR0+2772
	.word	.LANCHOR0+2784
	.word	.LANCHOR0+2860
	.word	.LANCHOR0+2936
	.word	.LANCHOR5-716
	.fnend
	.size	ecm_qc_bind, .-ecm_qc_bind
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_bind, %function
mbim_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, r9, lr}
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r6, r0
	ldr	r7, [r0, #24]
	mov	r4, r1
	movw	r0, #:lower16:.LC412
	ldr	r1, .L12798
	.pad #20
	sub	sp, sp, #20
	movt	r0, #:upper16:.LC412
	bl	printk
	str	r7, [r4, #84]
	ldrb	r1, [r6, #44]	@ zero_extendqisi2
	cmp	r1, #15
	bhi	.L12736
	add	r2, r1, #1
	add	r0, r1, #12
	movw	r3, #:lower16:.LANCHOR0
	str	r4, [r6, r0, lsl #2]
	movt	r3, #:upper16:.LANCHOR0
	strb	r2, [r6, #44]
	mov	r5, r3
	strb	r1, [r4, #196]
	ldrb	r2, [r6, #44]	@ zero_extendqisi2
	strb	r1, [r3, #2990]
	strb	r1, [r3, #2998]
	strb	r1, [r3, #3011]
	cmp	r2, #15
	bhi	.L12736
	add	r1, r2, #1
	add	ip, r2, #12
	mov	r0, #0
	str	r4, [r6, ip, lsl #2]
	strb	r1, [r6, #44]
	add	r1, r3, #3040
	str	r7, [r4, #140]
	str	r4, [r4, #144]
	strb	r2, [r4, #197]
	strb	r0, [r4, #198]
	strb	r2, [r3, #3012]
	strb	r2, [r3, #3018]
	strb	r2, [r3, #3030]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss.constprop.166
	subs	r8, r0, #0
	bne	.L12737
	movw	r0, #:lower16:.LC996
	ldr	r1, .L12798
	mvn	r5, #18
	movt	r0, #:upper16:.LC996
	bl	printk
	b	.L12738
.L12737:
	movw	r0, #:lower16:.LC997
	ldr	r1, .L12798
	movt	r0, #:upper16:.LC997
	bl	printk
	ldr	r1, .L12798+4
	str	r7, [r8]
	str	r8, [r4, #148]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss.constprop.166
	subs	r8, r0, #0
	bne	.L12739
	movw	r0, #:lower16:.LC998
	ldr	r1, .L12798
	mvn	r5, #18
	movt	r0, #:upper16:.LC998
	bl	printk
	b	.L12738
.L12739:
	movw	r0, #:lower16:.LC999
	ldr	r1, .L12798
	movt	r0, #:upper16:.LC999
	bl	printk
	ldr	r1, .L12798+8
	str	r7, [r8]
	str	r8, [r4, #152]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss.constprop.166
	subs	r8, r0, #0
	bne	.L12740
	movw	r0, #:lower16:.LC1000
	ldr	r1, .L12798
	mvn	r5, #18
	movt	r0, #:upper16:.LC1000
	bl	printk
	b	.L12738
.L12740:
	movw	r0, #:lower16:.LC1001
	ldr	r1, .L12798
	movt	r0, #:upper16:.LC1001
	bl	printk
	str	r8, [r4, #156]
	ldr	r3, [r8, #8]
	mov	r1, #208
	mov	r0, r8
	str	r7, [r8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r7, r0, #0
	streq	r7, [r4, #160]
	beq	.L12742
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r7]
	beq	.L12744
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	mov	r9, r0
	str	r0, [r7]
	bne	.L12744
	ldr	r3, [r8, #8]
	mov	r1, r7
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	str	r9, [r4, #160]
	b	.L12742
.L12744:
	mov	r3, #16
	movw	r0, #:lower16:.LC1002
	ldr	r1, .L12798
	movt	r0, #:upper16:.LC1002
	str	r3, [r7, #4]
	str	r7, [r4, #160]
	ldr	r7, .L12798+12
	bl	printk
	ldr	r2, [r4, #160]
	movw	r3, #:lower16:mbim_notify_complete
	movt	r3, #:upper16:mbim_notify_complete
	add	r0, r7, #12
	str	r4, [r2, #32]
	ldr	r2, [r4, #160]
	str	r3, [r2, #28]
	ldr	r3, [r4, #132]
	cmp	r3, #7
	moveq	r3, #2048
	movne	r3, #4064
	strh	r3, [r7, #9]	@ unaligned
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	bne	.L12797
	b	.L12751
.L12742:
	movw	r0, #:lower16:.LC1003
	ldr	r1, .L12798
	mvn	r5, #11
	movt	r0, #:upper16:.LC1003
	bl	printk
	b	.L12738
.L12797:
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L12752
	ldrb	r1, [r5, #3042]	@ zero_extendqisi2
	add	r0, r7, #96
	ldrb	r2, [r5, #3054]	@ zero_extendqisi2
	ldrb	r3, [r5, #3066]	@ zero_extendqisi2
	strb	r1, [r5, #3138]
	strb	r2, [r5, #3150]
	strb	r3, [r5, #3162]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	bne	.L12752
.L12751:
	mvn	r5, #11
	b	.L12738
.L12752:
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L12750
	ldrb	r1, [r5, #3042]	@ zero_extendqisi2
	ldrb	r2, [r5, #3054]	@ zero_extendqisi2
	ldrb	r3, [r5, #3066]	@ zero_extendqisi2
	ldr	r0, .L12798+16
	strb	r1, [r5, #3222]
	strb	r2, [r5, #3234]
	strb	r3, [r5, #3246]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	beq	.L12751
.L12750:
	ldrb	r3, [r6, #20]	@ zero_extendqisi2
	sub	r2, r3, #2
	cmp	r2, #2
	bhi	.L12754
	movw	r2, #:lower16:.LANCHOR4
	movw	r1, #3546
	movt	r2, #:upper16:.LANCHOR4
	ldrh	r2, [r2, r1]
	tst	r2, #4
	beq	.L12755
	movw	r1, #:lower16:.LC1004
	ldr	r2, .L12798
	movt	r1, #:upper16:.LC1004
	ldr	r0, .L12798+20
	bl	__dynamic_pr_debug
.L12755:
	ldrb	r3, [r6, #20]	@ zero_extendqisi2
	add	r3, r3, #48
	strb	r3, [r5, #234]
.L12754:
	ldr	ip, [r6, #24]
	movw	r1, #:lower16:.LC944
	movw	r3, #:lower16:.LC943
	ldr	lr, [r4, #152]
	movt	r1, #:upper16:.LC944
	movw	r0, #:lower16:.LC1005
	ldr	r2, [r4, #156]
	movt	r3, #:upper16:.LC943
	movt	r0, #:upper16:.LC1005
	ldr	r6, [ip]
	ldr	ip, [r4, #148]
	ldr	r5, [r2, #4]
	ldrb	r2, [r4, #136]	@ zero_extendqisi2
	ldr	r4, [r6, #20]
	str	r5, [sp, #8]
	ldr	lr, [lr, #4]
	mov	r5, #0
	cmp	r4, #2
	movls	r3, r1
	ldr	r1, .L12798
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	printk
	b	.L12735
.L12736:
	mvn	r5, #18
.L12738:
	movw	r0, #:lower16:.LC1006
	mov	r3, r5
	ldr	r1, .L12798
	movt	r0, #:upper16:.LC1006
	ldr	r2, [r4]
	bl	printk
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L12758
	bl	kfree
.L12758:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L12759
	bl	kfree
.L12759:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L12760
	bl	kfree
.L12760:
	ldr	r3, [r4, #160]
	cmp	r3, #0
	beq	.L12761
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L12761:
	ldr	r3, [r4, #156]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #152]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #148]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
.L12735:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	pop	{r4, r5, r6, r7, r8, r9, pc}
.L12799:
	.align	2
.L12798:
	.word	.LANCHOR5-704
	.word	.LANCHOR0+3052
	.word	.LANCHOR0+3064
	.word	.LANCHOR0+3076
	.word	.LANCHOR0+3256
	.word	.LANCHOR4+3528
	.fnend
	.size	mbim_bind, .-mbim_bind
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_bind, %function
ccid_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #8
	sub	sp, sp, #8
	ldr	r4, [r0, #24]
	cmp	r3, #15
	bhi	.L12823
	movw	r5, #:lower16:.LANCHOR0
	add	r1, r3, #12
	movt	r5, #:upper16:.LANCHOR0
	add	r2, r3, #1
	str	r6, [r0, r1, lsl #2]
	add	r1, r5, #3328
	strb	r2, [r0, #44]
	str	r3, [r6, #88]
	strb	r3, [r5, #3318]
	ldr	r0, [r4]
	bl	usb_ep_autoconfig_ss.constprop.166
	cmp	r0, #0
	beq	.L12824
	ldr	r1, .L12828
	str	r0, [r6, #100]
	str	r4, [r0]
	ldr	r0, [r4]
	bl	usb_ep_autoconfig_ss.constprop.166
	cmp	r0, #0
	beq	.L12825
	ldr	r1, .L12828+4
	str	r0, [r6, #104]
	str	r4, [r0]
	ldr	r0, [r4]
	bl	usb_ep_autoconfig_ss.constprop.166
	subs	r3, r0, #0
	beq	.L12826
	add	r0, r5, #2368
	str	r3, [r6, #108]
	str	r4, [r3]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r6, #16]
	beq	.L12807
	ldr	r3, [r4]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L12827
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #3570
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L12812
.L12822:
	mov	r0, #0
.L12800:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12827:
	ldrb	r1, [r5, #3342]	@ zero_extendqisi2
	ldrb	r2, [r5, #3354]	@ zero_extendqisi2
	ldrb	r3, [r5, #3330]	@ zero_extendqisi2
	ldr	r0, .L12828+8
	strb	r1, [r5, #3366]
	strb	r2, [r5, #3378]
	strb	r3, [r5, #3390]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r6, #8]
	beq	.L12807
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #3570
	movt	r3, #:upper16:.LANCHOR4
	ldrh	r3, [r3, r2]
	tst	r3, #4
	beq	.L12822
	ldr	r3, [r4]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	movwhi	r3, #:lower16:.LC943
	movthi	r3, #:upper16:.LC943
	bls	.L12812
.L12811:
	ldr	ip, [r6, #104]
	movw	r1, #:lower16:.LC1009
	ldr	lr, [r6, #108]
	movt	r1, #:upper16:.LC1009
	ldr	r2, .L12828+12
	ldr	r0, .L12828+16
	ldr	lr, [lr, #4]
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L12822
.L12812:
	movw	r3, #:lower16:.LC944
	movt	r3, #:upper16:.LC944
	b	.L12811
.L12826:
	movw	r0, #:lower16:.LC998
	ldr	r1, .L12828+12
	movt	r0, #:upper16:.LC998
	bl	printk
.L12807:
	ldr	r2, [r6, #108]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r6, #108]
.L12805:
	ldr	r2, [r6, #104]
	mov	r3, #0
	mvn	r0, #18
	str	r3, [r2]
	str	r3, [r6, #104]
	b	.L12800
.L12823:
	mvn	r3, #18
	movw	r0, #:lower16:.LC1007
	ldr	r1, .L12828+12
	mov	r2, r3
	movt	r0, #:upper16:.LC1007
	str	r3, [r6, #88]
	bl	printk
	ldr	r0, [r6, #88]
	b	.L12800
.L12825:
	movw	r0, #:lower16:.LC996
	ldr	r1, .L12828+12
	movt	r0, #:upper16:.LC996
	bl	printk
	b	.L12805
.L12824:
	movw	r0, #:lower16:.LC1008
	ldr	r1, .L12828+12
	movt	r0, #:upper16:.LC1008
	bl	printk
	mvn	r0, #18
	b	.L12800
.L12829:
	.align	2
.L12828:
	.word	.LANCHOR0+3340
	.word	.LANCHOR0+3352
	.word	.LANCHOR0+2392
	.word	.LANCHOR5-692
	.word	.LANCHOR4+3552
	.fnend
	.size	ccid_function_bind, .-ccid_function_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_bind, %function
f_midi_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 512
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	movw	fp, #:lower16:.LANCHOR0
	str	lr, [sp, #32]
	ldr	r3, [r0, #24]
	.pad #516
	sub	sp, sp, #516
	movt	fp, #:upper16:.LANCHOR0
	mov	r2, r3
	str	r3, [sp, #16]
	ldrb	r3, [fp, #3400]	@ zero_extendqisi2
	str	r0, [sp, #20]
	cmp	r3, #0
	bne	.L12831
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	addls	r3, r3, #1
	uxtbls	r3, r3
	strbls	r3, [r2, #48]
	strbls	r3, [fp, #3400]
	bhi	.L12834
.L12831:
	ldr	r0, [sp, #20]
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	cmp	r2, #15
	bhi	.L12834
	add	r3, r2, #1
	add	r1, r2, #12
	uxtb	r3, r3
	str	r4, [r0, r1, lsl #2]
	cmp	r3, #15
	strb	r2, [fp, #3418]
	strb	r3, [r0, #44]
	bhi	.L12834
	ldr	r5, [sp, #16]
	add	r1, r3, #12
	add	r2, r2, #2
	str	r4, [r0, r1, lsl #2]
	ldr	r1, .L12864
	strb	r2, [r0, #44]
	strb	r3, [fp, #3430]
	strb	r3, [fp, #3448]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss.constprop.166
	cmp	r0, #0
	str	r0, [r4, #88]
	beq	.L12835
	ldr	r1, .L12864+4
	str	r5, [r0]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_ss.constprop.166
	cmp	r0, #0
	str	r0, [r4, #92]
	beq	.L12847
	movw	r1, #32976
	str	r5, [r0]
	mov	r0, #292
	bl	__kmalloc
	cmp	r0, #0
	str	r0, [sp, #4]
	beq	.L12848
	ldr	r5, .L12864
	sub	r2, r5, #36
	sub	r1, r5, #12
	sub	r3, r5, #24
	str	r2, [r0]
	add	r2, r5, #24
	stmib	r0, {r1, r3}
	ldr	r3, [r4, #320]
	ldr	r1, [r4, #324]
	str	r2, [r0, #12]
	ldr	r8, [r4, #320]
	add	r3, r3, r1
	rsb	r3, r3, r3, lsl #4
	cmp	r8, #0
	add	r3, r3, #7
	strh	r3, [r5, #29]	@ unaligned
	beq	.L12849
	add	r1, r5, #32
	movw	r3, #9222
	movt	r3, 514
	mov	lr, #1
	mov	ip, #0
	movw	r10, #9225
	str	r1, [sp, #24]
	add	r1, r0, #16
	mov	r7, lr
	mov	r6, ip
	movt	r10, 259
	str	r3, [sp, #8]
	str	r1, [sp, #12]
	add	r1, r0, #20
	add	r2, sp, #32
	add	r5, r5, #35
	add	r3, sp, #368
	str	fp, [sp, #28]
	mov	fp, r1
.L12838:
	ldr	r1, [sp, #8]
	add	r9, lr, #1
	add	r0, lr, #5
	ldr	r8, [sp, #12]
	str	r1, [r2]	@ unaligned
	add	r1, lr, #2
	strb	lr, [r2, #4]
	mov	lr, r1
	strb	r6, [r2, #5]
	str	r2, [r8, ip, lsl #3]
	ldrb	r8, [r2, #4]	@ zero_extendqisi2
	add	r2, r2, #6
	str	r10, [r3]	@ unaligned
	strb	r9, [r3, #4]
	strb	r7, [r3, #5]
	strb	r8, [r3, #6]
	strb	r7, [r3, #7]
	strb	r6, [r3, #8]
	str	r3, [fp, ip, lsl #3]
	ldrb	r8, [r3, #4]	@ zero_extendqisi2
	add	ip, ip, #1
	add	r3, r3, #9
	strb	r8, [r5, #1]!
	ldr	r8, [r4, #320]
	cmp	r8, ip
	bhi	.L12838
	lsl	r3, r0, #2
	ldr	fp, [sp, #28]
	add	r6, r3, #4
	add	ip, r3, #8
.L12837:
	ldr	r7, [r4, #324]
	cmp	r7, #0
	beq	.L12850
	ldr	r3, .L12864+8
	mov	ip, #0
	movw	r10, #9222
	movw	r9, #9225
	mov	r6, ip
	str	fp, [sp, #12]
	movt	r10, 258
	movt	r9, 515
	add	r2, sp, #128
	mov	lr, r3
	add	r3, sp, #224
	add	r5, lr, #3
	str	lr, [sp, #8]
	ldr	lr, [sp, #4]
	sub	r7, lr, #4
	mov	lr, #1
	mov	fp, r7
.L12840:
	ldr	r7, [sp, #4]
	str	r10, [r2]	@ unaligned
	add	ip, ip, #1
	strb	r1, [r2, #4]
	add	r1, r1, #2
	strb	r6, [r2, #5]
	sub	r8, r1, #1
	str	r2, [r7, r0, lsl #2]
	ldrb	r7, [r2, #4]	@ zero_extendqisi2
	add	r0, r0, #2
	str	r9, [r3]	@ unaligned
	add	r2, r2, #6
	strb	r8, [r3, #4]
	strb	lr, [r3, #5]
	strb	r7, [r3, #6]
	strb	lr, [r3, #7]
	strb	r6, [r3, #8]
	str	r3, [fp, r0, lsl #2]
	ldrb	r7, [r2, #-2]	@ zero_extendqisi2
	add	r3, r3, #9
	strb	r7, [r5, #1]!
	ldr	r7, [r4, #324]
	cmp	r7, ip
	bhi	.L12840
	uxtb	r7, r7
	lsl	r3, r0, #2
	ldr	fp, [sp, #12]
	ldr	r8, [r4, #320]
	add	r2, r7, #4
	add	r6, r3, #4
	uxtb	r2, r2
	add	ip, r3, #8
.L12839:
	uxtb	r8, r8
	strb	r2, [fp, #3484]
	add	r1, r0, #3
	strb	r7, [fp, #3487]
	ldr	r7, .L12864+4
	add	r5, r8, #4
	ldr	r0, [sp, #4]
	mov	lr, #0
	strb	r5, [fp, #3504]
	ldr	r5, [sp, #8]
	strb	r8, [fp, #3507]
	str	r7, [r0, r3]
	add	r2, r0, r1, lsl #2
	str	r5, [r0, r6]
	sub	r5, r7, #12
	str	r5, [r0, ip]
	ldr	ip, [sp, #24]
	str	ip, [r0, r1, lsl #2]
	str	lr, [r2, #4]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L12841
	ldr	r3, [sp, #20]
	ldr	r3, [r3, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L12842
.L12844:
	ldr	r0, [sp, #4]
	mov	r5, #0
	bl	kfree
.L12830:
	mov	r0, r5
	add	sp, sp, #516
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12835:
	ldr	r3, [r4, #92]
	mvn	r5, #18
	cmp	r3, #0
	beq	.L12845
.L12846:
	mov	r2, #0
	str	r2, [r3]
.L12836:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
.L12845:
	ldr	r3, [sp, #16]
	movw	r1, #:lower16:.LC1010
	movt	r1, #:upper16:.LC1010
	ldr	r2, [r4]
	ldr	r0, [r3]
	mov	r3, r5
	add	r0, r0, #32
	bl	dev_err
	b	.L12830
.L12847:
	mvn	r5, #18
	b	.L12836
.L12842:
	ldr	r2, .L12864
	mov	r3, #512
	ldr	r0, [sp, #4]
	strh	r3, [r2, #4]	@ movhi
	strh	r3, [r2, #16]	@ movhi
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	bne	.L12844
.L12841:
	ldr	r0, [sp, #4]
	mvn	r5, #18
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
.L12833:
	ldr	r3, [r4, #92]
	cmp	r3, #0
	bne	.L12846
	b	.L12836
.L12834:
	mvn	r5, #18
	b	.L12833
.L12848:
	mvn	r5, #11
	b	.L12833
.L12850:
	ldr	r2, .L12864+8
	str	r2, [sp, #8]
	mov	r2, #4
	b	.L12839
.L12849:
	ldr	r2, .L12864
	mov	ip, #24
	mov	r6, #20
	mov	r3, #16
	mov	r0, #4
	mov	r1, #1
	add	r2, r2, #32
	str	r2, [sp, #24]
	b	.L12837
.L12865:
	.align	2
.L12864:
	.word	.LANCHOR0+3452
	.word	.LANCHOR0+3464
	.word	.LANCHOR0+3504
	.fnend
	.size	f_midi_bind, .-f_midi_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_bind, %function
frmnet_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #8
	sub	sp, sp, #8
	ldr	r6, [r0, #24]
	cmp	r3, #15
	bhi	.L12909
	movw	r5, #:lower16:.LANCHOR0
	add	r1, r3, #12
	movt	r5, #:upper16:.LANCHOR0
	add	r2, r3, #1
	str	r4, [r0, r1, lsl #2]
	add	r1, r5, #3536
	strb	r2, [r0, #44]
	str	r3, [r4, #112]
	strb	r3, [r5, #3526]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss.constprop.166
	cmp	r0, #0
	beq	.L12910
	ldr	r1, .L12915
	str	r0, [r4, #84]
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss.constprop.166
	cmp	r0, #0
	beq	.L12911
	ldr	r1, .L12915+4
	str	r0, [r4, #88]
	str	r6, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig_ss.constprop.166
	subs	r8, r0, #0
	beq	.L12912
	str	r8, [r4, #136]
	ldr	r3, [r8, #8]
	mov	r1, #208
	str	r6, [r8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r7, r0, #0
	beq	.L12874
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r7]
	beq	.L12876
	mov	r2, #8
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r7]
	beq	.L12913
.L12876:
	mov	r3, #8
	cmn	r7, #4096
	str	r3, [r7, #4]
	str	r7, [r4, #140]
	bhi	.L12891
	movw	r3, #:lower16:frmnet_notify_complete
	ldr	r0, .L12915+8
	movt	r3, #:upper16:frmnet_notify_complete
	str	r3, [r7, #28]
	ldr	r3, [r4, #140]
	str	r4, [r3, #32]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L12879
	ldr	r3, [r6]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L12914
	ldrb	r2, [r4, #116]	@ zero_extendqisi2
	movw	r3, #:lower16:.LC944
	movt	r3, #:upper16:.LC944
.L12883:
	ldr	ip, [r4, #84]
	movw	r0, #:lower16:.LC1012
	ldr	lr, [r4, #88]
	movt	r0, #:upper16:.LC1012
	ldr	r1, .L12915+12
	ldr	lr, [lr, #4]
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	printk
	mov	r0, #0
	b	.L12866
.L12879:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L12886
.L12892:
	bl	kfree
.L12886:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L12889
	bl	kfree
.L12889:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L12890
	bl	kfree
.L12890:
	ldr	r5, [r4, #136]
	ldr	r6, [r4, #140]
	cmp	r6, #0
	beq	.L12878
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #136]
.L12878:
	mov	r3, #0
	mvn	r0, #11
	str	r3, [r5]
	str	r3, [r4, #136]
.L12873:
	ldr	r2, [r4, #88]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r4, #88]
.L12871:
	ldr	r2, [r4, #84]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r4, #84]
.L12866:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12914:
	ldrb	r1, [r5, #3538]	@ zero_extendqisi2
	ldrb	r2, [r5, #3550]	@ zero_extendqisi2
	ldrb	r3, [r5, #3562]	@ zero_extendqisi2
	ldr	r0, .L12915+16
	strb	r1, [r5, #3594]
	strb	r2, [r5, #3606]
	strb	r3, [r5, #3618]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L12881
	ldr	r3, [r6]
	ldr	r2, [r3, #20]
	cmp	r2, #4
	bls	.L12885
	ldrb	r3, [r5, #3562]	@ zero_extendqisi2
	ldrb	r1, [r5, #3538]	@ zero_extendqisi2
	ldrb	r2, [r5, #3550]	@ zero_extendqisi2
	ldr	r0, .L12915+20
	strb	r1, [r5, #3650]
	strb	r2, [r5, #3662]
	strb	r3, [r5, #3674]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	ldrne	r3, [r6]
	beq	.L12886
.L12885:
	ldr	r0, [r3, #20]
	movw	r1, #:lower16:.LC944
	movw	r3, #:lower16:.LC943
	movt	r1, #:upper16:.LC944
	movt	r3, #:upper16:.LC943
	ldrb	r2, [r4, #116]	@ zero_extendqisi2
	cmp	r0, #2
	movls	r3, r1
	b	.L12883
.L12913:
	ldr	r3, [r8, #8]
	mov	r1, r7
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L12874:
	mvn	r3, #11
	str	r3, [r4, #140]
.L12891:
	movw	r0, #:lower16:.LC1011
	ldr	r1, .L12915+12
	movt	r0, #:upper16:.LC1011
	bl	printk
	ldr	r5, [r4, #136]
	b	.L12878
.L12881:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	bne	.L12892
	b	.L12889
.L12909:
	mvn	r3, #18
	movw	r0, #:lower16:.LC1007
	ldr	r1, .L12915+12
	mov	r2, r3
	movt	r0, #:upper16:.LC1007
	str	r3, [r4, #112]
	bl	printk
	ldr	r0, [r4, #112]
	b	.L12866
.L12911:
	movw	r0, #:lower16:.LC998
	ldr	r1, .L12915+12
	movt	r0, #:upper16:.LC998
	bl	printk
	mvn	r0, #18
	b	.L12871
.L12910:
	movw	r0, #:lower16:.LC996
	ldr	r1, .L12915+12
	movt	r0, #:upper16:.LC996
	bl	printk
	mvn	r0, #18
	b	.L12866
.L12912:
	movw	r0, #:lower16:.LC1008
	ldr	r1, .L12915+12
	movt	r0, #:upper16:.LC1008
	bl	printk
	mvn	r0, #18
	b	.L12873
.L12916:
	.align	2
.L12915:
	.word	.LANCHOR0+3548
	.word	.LANCHOR0+3560
	.word	.LANCHOR0+3572
	.word	.LANCHOR5-672
	.word	.LANCHOR0+3628
	.word	.LANCHOR0+3684
	.fnend
	.size	frmnet_bind, .-frmnet_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_bind, %function
rndis_qc_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #28
	sub	sp, sp, #28
	ldr	r8, [r0, #24]
	cmp	r3, #15
	bhi	.L12951
	add	r2, r3, #1
	add	r1, r3, #12
	movw	r5, #:lower16:.LANCHOR0
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR0
	strb	r2, [r0, #44]
	strb	r3, [r4, #120]
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r5, #3718]
	strb	r3, [r5, #3726]
	strb	r3, [r5, #3739]
	cmp	r2, #15
	bhi	.L12983
	add	r0, r2, #12
	add	r3, r2, #1
	ldr	r1, .L12993
	str	r4, [r6, r0, lsl #2]
	strb	r3, [r6, #44]
	strb	r2, [r4, #121]
	strb	r2, [r5, #3740]
	strb	r2, [r5, #3746]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss.constprop.166
	cmp	r0, #0
	beq	.L12983
	ldr	r1, .L12993+4
	str	r0, [r4, #88]
	str	r8, [r0]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss.constprop.166
	cmp	r0, #0
	beq	.L12983
	ldr	r1, .L12993+8
	str	r0, [r4, #92]
	str	r8, [r0]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig_ss.constprop.166
	subs	r3, r0, #0
	beq	.L12983
	str	r3, [r4, #156]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r8, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r7, r0
	str	r0, [r4, #160]
	beq	.L12984
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L12924
	mov	r2, #8
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L12924:
	str	r0, [r7]
	ldr	r2, [r4, #160]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L12984
	mov	r1, #8
	movw	r3, #:lower16:rndis_qc_response_complete
	ldr	r0, .L12993+12
	movt	r3, #:upper16:rndis_qc_response_complete
	str	r1, [r2, #4]
	ldr	r2, [r4, #160]
	str	r4, [r2, #32]
	ldr	r2, [r4, #160]
	str	r3, [r2, #28]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L12984
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L12985
.L12927:
	movw	r5, #:lower16:.LANCHOR1
	movw	r1, #:lower16:rndis_qc_open
	movt	r5, #:upper16:.LANCHOR1
	movw	r2, #:lower16:rndis_qc_close
	ldrb	r3, [r5, #3873]	@ zero_extendqisi2
	movt	r1, #:upper16:rndis_qc_open
	movt	r2, #:upper16:rndis_qc_close
	str	r1, [r4, #112]
	str	r2, [r4, #116]
	cmp	r3, #0
	bne	.L12931
	movw	r9, #:lower16:.LANCHOR4
	movw	r1, #3594
	str	r4, [r5, #3920]
	movt	r9, #:upper16:.LANCHOR4
	movw	r2, #:lower16:rndis_qc_response_available
	ldrh	r0, [r9, r1]
	movt	r2, #:upper16:rndis_qc_response_available
	mov	r1, #1
	add	ip, r5, #3872
	strb	r1, [r5, #3873]
	strh	r1, [ip, #36]	@ movhi
	tst	r0, #4
	str	r2, [r5, #3916]
	bne	.L12986
.L12932:
	ldrh	r7, [r9, #186]
	mov	r0, #0
	str	r0, [r4, #144]
	ubfx	r7, r7, #2, #1
	cmp	r7, r0
	moveq	r3, r7
	bne	.L12987
.L12934:
	movw	r2, #3642
	rsb	r3, r3, r3, lsl #4
	ldr	r10, [r4, #128]
	ldrh	r0, [r9, r2]
	mov	r1, #0
	add	r3, r5, r3, lsl #2
	add	r2, r4, #122
	str	r1, [r5, #3880]
	str	r1, [r5, #3884]
	tst	r0, #4
	str	r2, [r3, #3892]
	ldr	r3, [r4, #140]
	bne	.L12988
.L12950:
	cmp	r3, #0
	moveq	r7, #1
	cmp	r7, #0
	bne	.L12989
	movw	r2, #3666
	ldr	r7, [r4, #144]
	str	r10, [r5, #3904]
	ldrh	r2, [r9, r2]
	str	r3, [r5, #3912]
	ldrb	fp, [r4, #132]	@ zero_extendqisi2
	tst	r2, #4
	moveq	r10, r7
	bne	.L12990
.L12936:
	uxtb	r3, r7
	movw	r2, #3690
	ldrh	r2, [r9, r2]
	rsb	r3, r3, r3, lsl #4
	add	r3, r5, r3, lsl #2
	tst	r2, #4
	strb	fp, [r3, #3908]
	bne	.L12991
.L12937:
	movw	r3, #3714
	uxtb	r10, r10
	ldrh	r0, [r9, r3]
	mov	r3, #2
	rsb	r10, r10, r10, lsl #4
	add	r5, r5, r10, lsl r3
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	strb	r3, [r5, #3909]
	moveq	r5, r0
	bne	.L12992
.L12917:
	mov	r0, r5
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12931:
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #3618
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L12933
.L12983:
	ldr	r8, [r6, #24]
	mvn	r5, #18
.L12918:
	ldr	r3, [r8]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L12930
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L12929
	bl	kfree
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
.L12930:
	cmp	r3, #2
	bhi	.L12929
.L12943:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L12944
	bl	kfree
.L12944:
	ldr	r3, [r4, #160]
	cmp	r3, #0
	beq	.L12945
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L12945:
	ldr	r3, [r4, #156]
	movw	r0, #:lower16:.LC995
	ldr	r1, .L12993+16
	movt	r0, #:upper16:.LC995
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	mov	r3, r5
	ldr	r2, [r4]
	bl	printk
	b	.L12917
.L12985:
	ldrb	r1, [r5, #3758]	@ zero_extendqisi2
	ldrb	r2, [r5, #3770]	@ zero_extendqisi2
	ldrb	r3, [r5, #3782]	@ zero_extendqisi2
	ldr	r0, .L12993+20
	strb	r1, [r5, #3838]
	strb	r2, [r5, #3850]
	strb	r3, [r5, #3862]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L12984
	ldr	r3, [r6, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L12927
	ldrb	r1, [r5, #3758]	@ zero_extendqisi2
	ldrb	r2, [r5, #3770]	@ zero_extendqisi2
	ldrb	r3, [r5, #3782]	@ zero_extendqisi2
	ldr	r0, .L12993+24
	strb	r1, [r5, #3918]
	strb	r2, [r5, #3930]
	strb	r3, [r5, #3942]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L12927
	ldr	r3, [r6, #24]
	mvn	r5, #11
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L12930
.L12929:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L12943
	bl	kfree
	b	.L12943
.L12933:
	movw	r1, #:lower16:.LC1015
	add	r0, r0, #3600
	movt	r1, #:upper16:.LC1015
	mvn	r5, #18
	bl	__dynamic_pr_debug
	ldr	r8, [r6, #24]
	b	.L12918
.L12990:
	movw	r1, #:lower16:.LC289
	ldr	r2, .L12993+28
	movt	r1, #:upper16:.LC289
	ldr	r0, .L12993+32
	bl	__dynamic_pr_debug
	ldr	r10, [r4, #144]
	b	.L12936
.L12991:
	movw	r1, #:lower16:.LC289
	ldr	r2, .L12993+36
	movt	r1, #:upper16:.LC289
	ldr	r0, .L12993+40
	bl	__dynamic_pr_debug
	b	.L12937
.L12992:
	ldr	r3, [r6, #24]
	ldr	r1, [r8]
	ldr	r3, [r3]
	add	r1, r1, #32
	ldr	r2, [r3, #20]
	cmp	r2, #4
	movwhi	r3, #:lower16:.LC1013
	movthi	r3, #:upper16:.LC1013
	bhi	.L12939
	movw	r0, #:lower16:.LC944
	movw	r3, #:lower16:.LC943
	movt	r0, #:upper16:.LC944
	cmp	r2, #2
	movt	r3, #:upper16:.LC943
	movls	r3, r0
.L12939:
	ldr	ip, [r4, #88]
	movw	r2, #:lower16:.LC1016
	mov	r5, #0
	ldr	r0, [r4, #156]
	movt	r2, #:upper16:.LC1016
	ldr	lr, [r4, #92]
	ldr	r4, [r0, #4]
	ldr	r0, .L12993+44
	str	r4, [sp, #8]
	ldr	lr, [lr, #4]
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L12917
.L12987:
	movw	r1, #:lower16:.LC779
	mov	r3, r0
	ldr	r2, .L12993+48
	movt	r1, #:upper16:.LC779
	str	r0, [sp]
	ldr	r0, .L12993+52
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #144]
	uxtb	r7, r3
	adds	r7, r7, #0
	movne	r7, #1
	b	.L12934
.L12988:
	movw	r1, #:lower16:.LC289
	ldr	r2, .L12993+56
	str	r3, [sp, #20]
	movt	r1, #:upper16:.LC289
	ldr	r0, .L12993+60
	bl	__dynamic_pr_debug
	ldr	r3, [sp, #20]
	b	.L12950
.L12986:
	movw	r1, #:lower16:.LC1014
	ldr	r2, .L12993+64
	movt	r1, #:upper16:.LC1014
	ldr	r0, .L12993+68
	bl	__dynamic_pr_debug
	b	.L12932
.L12951:
	mvn	r5, #18
	b	.L12918
.L12989:
	mov	r5, #0
	ldr	r8, [r6, #24]
	b	.L12918
.L12984:
	mvn	r5, #11
	ldr	r8, [r6, #24]
	b	.L12918
.L12994:
	.align	2
.L12993:
	.word	.LANCHOR0+3756
	.word	.LANCHOR0+3768
	.word	.LANCHOR0+3780
	.word	.LANCHOR0+3792
	.word	.LANCHOR5-564
	.word	.LANCHOR0+3872
	.word	.LANCHOR0+3952
	.word	.LANCHOR5-620
	.word	.LANCHOR4+3648
	.word	.LANCHOR5-596
	.word	.LANCHOR4+3672
	.word	.LANCHOR4+3696
	.word	.LANCHOR5-1560
	.word	.LANCHOR4+168
	.word	.LANCHOR5-644
	.word	.LANCHOR4+3624
	.word	.LANCHOR5-660
	.word	.LANCHOR4+3576
	.fnend
	.size	rndis_qc_bind, .-rndis_qc_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_bind, %function
fsg_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #24]
	ldr	r6, [r3]
	str	r6, [r1, #84]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L13004
	mov	r4, r1
	add	ip, r3, #12
	ldr	r1, .L13014
	add	r2, r3, #1
	movw	r5, #:lower16:.LANCHOR0
	movt	r5, #:upper16:.LANCHOR0
	str	r4, [r0, ip, lsl #2]
	strb	r2, [r0, #44]
	mov	r0, r6
	strh	r3, [r4, #92]	@ movhi
	strb	r3, [r5, #4010]
	bl	usb_ep_autoconfig_ss.constprop.166
	subs	r3, r0, #0
	beq	.L12998
	ldr	r2, [r4, #88]
	mov	r0, r6
	add	r1, r5, #4032
	str	r2, [r3]
	str	r3, [r4, #100]
	bl	usb_ep_autoconfig_ss.constprop.166
	subs	r2, r0, #0
	beq	.L12998
	ldr	ip, [r4, #88]
	movw	r3, #:lower16:.LANCHOR6
	mov	r1, #15
	movt	r3, #:upper16:.LANCHOR6
	sub	r0, r3, #4064
	sub	r0, r0, #12
	str	ip, [r2]
	ldr	ip, [r4, #20]
	strb	r1, [r3, #-4082]
	ldrb	r3, [r5, #4034]	@ zero_extendqisi2
	str	r2, [r4, #104]
	ldrb	r2, [r5, #4022]	@ zero_extendqisi2
	strb	r1, [r5, #4082]
	ldr	r1, [ip, #24]
	strb	r2, [r5, #4046]
	strb	r3, [r5, #4058]
	strb	r2, [r5, #4070]
	strb	r3, [r5, #4090]
	ldr	r5, [r1]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L13000
	ldr	r3, [r5, #20]
	cmp	r3, #2
	bhi	.L13013
.L13001:
	mov	r0, #0
.L12995:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13013:
	ldr	r0, .L13014+4
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L13012
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bls	.L13001
	ldr	r0, .L13014+8
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L13001
.L13012:
	ldr	r0, [r4, #16]
.L13000:
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
.L12998:
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC1017
	movt	r1, #:upper16:.LC1017
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #65012
	movt	r0, 65535
	b	.L12995
.L13004:
	mvn	r0, #18
	b	.L12995
.L13015:
	.align	2
.L13014:
	.word	.LANCHOR0+4020
	.word	.LANCHOR6-4060
	.word	.LANCHOR6-4044
	.fnend
	.size	fsg_bind, .-fsg_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_audio_bind, %function
f_audio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR4
	movw	r9, #3738
	movt	r8, #:upper16:.LANCHOR4
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r8, r9]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r1, #136]
	ldr	r7, [r0, #24]
	tst	r2, #4
	movweq	r4, #:lower16:.LANCHOR6
	uxtbeq	r2, r3
	movteq	r4, #:upper16:.LANCHOR6
	strbeq	r2, [r4, #-4013]
	bne	.L13048
.L13018:
	movw	r9, #3762
	strb	r2, [r4, #-4004]
	ldr	r3, [r5, #164]
	ldrh	r2, [r8, r9]
	tst	r2, #4
	uxtbeq	r2, r3
	strbeq	r2, [r4, #-3989]
	bne	.L13049
.L13020:
	movw	r3, #3786
	strb	r2, [r4, #-3980]
	ldr	r2, [r5, #140]
	ldrh	r3, [r8, r3]
	tst	r3, #4
	bne	.L13050
.L13021:
	movw	r3, #3810
	ldr	ip, .L13055
	ubfx	r1, r2, #16, #8
	ldrh	r0, [r8, r3]
	str	r2, [sp, #4]
	ldr	r3, [r5, #168]
	strh	r2, [ip]	@ movhi
	tst	r0, #4
	strb	r1, [r4, #-3998]
	bne	.L13051
.L13022:
	ldrb	r2, [r6, #44]	@ zero_extendqisi2
	ubfx	r1, r3, #16, #8
	str	r3, [sp, #4]
	ldr	r8, .L13055+4
	cmp	r2, #15
	strh	r3, [r8, #-8]	@ movhi
	strb	r1, [r8, #-6]
	bhi	.L13052
	add	r3, r2, #1
	add	r1, r2, #12
	uxtb	r3, r3
	str	r5, [r6, r1, lsl #2]
	cmp	r3, #15
	strb	r2, [r4, #-3970]
	strb	r3, [r6, #44]
	bhi	.L13026
	add	r2, r2, #2
	add	ip, r3, #12
	mov	r0, #0
	movw	r1, #:lower16:.LANCHOR0
	str	r5, [r6, ip, lsl #2]
	movt	r1, #:upper16:.LANCHOR0
	strb	r2, [r6, #44]
	strb	r0, [r5, #248]
	ldrb	r2, [r6, #44]	@ zero_extendqisi2
	strb	r3, [r4, #-3958]
	strb	r3, [r4, #-3946]
	strb	r3, [r1, #16]
	cmp	r2, #15
	bhi	.L13026
	add	ip, r2, #12
	add	r3, r2, #1
	add	r9, r8, #56
	str	r5, [r6, ip, lsl #2]
	strb	r2, [r4, #-3934]
	strb	r2, [r4, #-3922]
	strb	r2, [r1, #17]
	mov	r1, r9
	strb	r3, [r6, #44]
	strb	r0, [r5, #249]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss.constprop.166
	cmp	r0, #0
	beq	.L13053
	add	r10, r8, #68
	str	r0, [r5, #176]
	mov	r1, r10
	str	r7, [r0]
	str	r9, [r0, #28]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss.constprop.166
	subs	r6, r0, #0
	beq	.L13054
	str	r6, [r5, #172]
	add	r0, r8, #144
	str	r7, [r6]
	ldrb	r2, [r4, #-3910]	@ zero_extendqisi2
	str	r10, [r6, #28]
	ldr	r1, [r5, #20]
	ldrb	r3, [r4, #-3898]	@ zero_extendqisi2
	and	r2, r2, #127
	ldr	r1, [r1, #24]
	and	r3, r3, #127
	strb	r2, [r4, #-3872]
	strb	r3, [r4, #-3840]
	ldr	r4, [r1]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r5, #16]
	beq	.L13029
	ldr	r3, [r4, #20]
	cmp	r3, #2
	bhi	.L13030
.L13031:
	mov	r0, #0
.L13016:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13030:
	add	r0, r8, #144
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r5, #8]
	bne	.L13031
	ldr	r0, [r5, #16]
.L13029:
	bl	kfree
	ldr	r0, [r5, #8]
	bl	kfree
	ldr	r0, [r5, #12]
	bl	kfree
	mov	r3, #0
	mvn	r0, #11
	str	r3, [r6]
	b	.L13016
.L13048:
	movw	r1, #:lower16:.LC1018
	ldr	r2, .L13055+8
	movw	r4, #:lower16:.LANCHOR6
	movt	r1, #:upper16:.LC1018
	ldr	r0, .L13055+12
	movt	r4, #:upper16:.LANCHOR6
	bl	__dynamic_pr_debug
	ldr	r3, [r5, #136]
	ldrh	r1, [r8, r9]
	uxtb	r2, r3
	tst	r1, #4
	strb	r2, [r4, #-4013]
	beq	.L13018
	movw	r1, #:lower16:.LC1018
	ldr	r2, .L13055+8
	movt	r1, #:upper16:.LC1018
	ldr	r0, .L13055+12
	bl	__dynamic_pr_debug
	ldrb	r2, [r5, #136]	@ zero_extendqisi2
	b	.L13018
.L13049:
	movw	r1, #:lower16:.LC1018
	ldr	r2, .L13055+16
	movt	r1, #:upper16:.LC1018
	ldr	r0, .L13055+20
	bl	__dynamic_pr_debug
	ldr	r3, [r5, #164]
	ldrh	r1, [r8, r9]
	uxtb	r2, r3
	tst	r1, #4
	strb	r2, [r4, #-3989]
	beq	.L13020
	movw	r1, #:lower16:.LC1018
	ldr	r2, .L13055+16
	movt	r1, #:upper16:.LC1018
	ldr	r0, .L13055+20
	bl	__dynamic_pr_debug
	ldrb	r2, [r5, #164]	@ zero_extendqisi2
	b	.L13020
.L13050:
	movw	r1, #:lower16:.LC1018
	mov	r3, r2
	ldr	r0, .L13055+24
	ldr	r2, .L13055+28
	movt	r1, #:upper16:.LC1018
	bl	__dynamic_pr_debug
	ldr	r2, [r5, #140]
	b	.L13021
.L13051:
	movw	r1, #:lower16:.LC1018
	ldr	r2, .L13055+32
	movt	r1, #:upper16:.LC1018
	ldr	r0, .L13055+36
	bl	__dynamic_pr_debug
	ldr	r3, [r5, #168]
	b	.L13022
.L13054:
	ldr	r2, .L13055+40
	movw	r0, #:lower16:.LC1022
	movt	r0, #:upper16:.LC1022
	mov	r1, r2
	bl	printk
	mvn	r0, #11
	b	.L13016
.L13053:
	ldr	r2, .L13055+40
	movw	r0, #:lower16:.LC1021
	movt	r0, #:upper16:.LC1021
	mov	r1, r2
	bl	printk
	mvn	r0, #18
	b	.L13016
.L13026:
	ldr	r2, .L13055+40
	movw	r0, #:lower16:.LC1020
	movt	r0, #:upper16:.LC1020
	mov	r1, r2
	bl	printk
	mvn	r0, #18
	b	.L13016
.L13052:
	ldr	r2, .L13055+40
	movw	r0, #:lower16:.LC1019
	movt	r0, #:upper16:.LC1019
	mov	r1, r2
	bl	printk
	mvn	r0, #18
	b	.L13016
.L13056:
	.align	2
.L13055:
	.word	.LANCHOR6-4000
	.word	.LANCHOR6-3968
	.word	.LANCHOR5-548
	.word	.LANCHOR4+3720
	.word	.LANCHOR5-516
	.word	.LANCHOR4+3744
	.word	.LANCHOR4+3768
	.word	.LANCHOR5-484
	.word	.LANCHOR5-456
	.word	.LANCHOR4+3792
	.word	.LANCHOR5-428
	.fnend
	.size	f_audio_bind, .-f_audio_bind
	.align	2
	.global	usb_assign_descriptors
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_assign_descriptors, %function
usb_assign_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	subs	r0, r1, #0
	strd	r6, [sp, #8]
	mov	r7, r3
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	ip, [r4, #20]
	ldr	r3, [ip, #24]
	ldr	r5, [r3]
	beq	.L13062
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L13061
.L13062:
	cmp	r6, #0
	beq	.L13060
	ldr	r3, [r5, #20]
	cmp	r3, #2
	bhi	.L13071
.L13060:
	cmp	r7, #0
	beq	.L13065
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bhi	.L13072
.L13065:
	mov	r0, #0
.L13057:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13071:
	mov	r0, r6
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	bne	.L13060
.L13070:
	ldr	r0, [r4, #16]
.L13061:
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	mvn	r0, #11
	b	.L13057
.L13072:
	mov	r0, r7
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L13065
	b	.L13070
	.fnend
	.size	usb_assign_descriptors, .-usb_assign_descriptors
	.align	2
	.global	usb_free_all_descriptors
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_free_all_descriptors, %function
usb_free_all_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #12]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree
	.fnend
	.size	usb_free_all_descriptors, .-usb_free_all_descriptors
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_bind, %function
ncm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #16
	sub	sp, sp, #16
	ldr	r7, [r0, #24]
	cmp	r3, #15
	bhi	.L13076
	add	r2, r3, #1
	add	r1, r3, #12
	movw	r5, #:lower16:.LANCHOR6
	mov	r6, r0
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR6
	strb	r2, [r0, #44]
	strb	r3, [r4, #148]
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r5, #-3746]
	strb	r3, [r5, #-3738]
	strb	r3, [r5, #-3725]
	cmp	r2, #15
	bhi	.L13076
	add	r1, r2, #12
	add	r3, r2, #1
	str	r4, [r0, r1, lsl #2]
	sub	r1, r5, #3696
	strb	r2, [r5, #-3724]
	strb	r2, [r5, #-3718]
	strb	r2, [r5, #-3706]
	strb	r3, [r0, #44]
	strb	r2, [r4, #149]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss.constprop.166
	cmp	r0, #0
	beq	.L13076
	ldr	r1, .L13124
	str	r0, [r4, #88]
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss.constprop.166
	cmp	r0, #0
	beq	.L13076
	ldr	r1, .L13124+4
	str	r0, [r4, #92]
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss.constprop.166
	subs	r3, r0, #0
	beq	.L13076
	str	r3, [r4, #164]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r8, r0
	str	r0, [r4, #168]
	beq	.L13080
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L13079
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L13079:
	str	r0, [r8]
	ldr	r3, [r4, #168]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L13080
	str	r4, [r3, #32]
	ldr	r2, [r4, #168]
	movw	r3, #:lower16:ncm_notify_complete
	movt	r3, #:upper16:ncm_notify_complete
	ldrb	r0, [r5, #-3694]	@ zero_extendqisi2
	ldrb	r1, [r5, #-3682]	@ zero_extendqisi2
	str	r3, [r2, #28]
	ldr	r3, [r4, #20]
	ldrb	r2, [r5, #-3670]	@ zero_extendqisi2
	strb	r0, [r5, #-3658]
	ldr	r0, .L13124+8
	strb	r1, [r5, #-3646]
	ldr	r3, [r3, #24]
	strb	r2, [r5, #-3634]
	ldr	r5, [r3]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L13084
	ldr	r3, [r5, #20]
	cmp	r3, #2
	bhi	.L13123
.L13082:
	movw	r3, #:lower16:.LANCHOR4
	movw	r1, #3834
	movt	r3, #:upper16:.LANCHOR4
	movw	r2, #:lower16:ncm_open
	ldrh	r5, [r3, r1]
	movw	r3, #:lower16:ncm_close
	movt	r2, #:upper16:ncm_open
	movt	r3, #:upper16:ncm_close
	strd	r2, [r4, #136]
	ubfx	r5, r5, #2, #1
	cmp	r5, #0
	beq	.L13075
	ldr	lr, [r6, #24]
	movw	r0, #:lower16:.LC944
	movw	r3, #:lower16:.LC943
	ldr	r2, [r4, #92]
	movt	r0, #:upper16:.LC944
	movt	r3, #:upper16:.LC943
	ldr	ip, [r4, #164]
	ldr	r1, [r7]
	ldr	r5, [lr]
	ldr	lr, [ip, #4]
	ldr	ip, [r4, #88]
	add	r1, r1, #32
	ldr	r4, [r5, #20]
	mov	r5, #0
	str	lr, [sp, #8]
	ldr	lr, [r2, #4]
	movw	r2, #:lower16:.LC1023
	movt	r2, #:upper16:.LC1023
	cmp	r4, #2
	movls	r3, r0
	ldr	r0, .L13124+12
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L13075
.L13076:
	mvn	r5, #18
.L13078:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #168]
	cmp	r3, #0
	beq	.L13088
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #164]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L13088:
	ldr	r3, [r4, #164]
	movw	r1, #:lower16:.LC1010
	movt	r1, #:upper16:.LC1010
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r7]
	mov	r3, r5
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L13075:
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13123:
	ldr	r0, .L13124+16
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	bne	.L13082
.L13084:
	mov	r0, r4
	bl	usb_free_all_descriptors
	b	.L13082
.L13080:
	mvn	r5, #11
	b	.L13078
.L13125:
	.align	2
.L13124:
	.word	.LANCHOR6-3684
	.word	.LANCHOR6-3672
	.word	.LANCHOR6-3624
	.word	.LANCHOR4+3816
	.word	.LANCHOR6-3576
	.fnend
	.size	ncm_bind, .-ncm_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_bind, %function
ecm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #16
	sub	sp, sp, #16
	ldr	r7, [r0, #24]
	cmp	r3, #15
	bhi	.L13127
	add	r2, r3, #1
	add	r1, r3, #12
	movw	r5, #:lower16:.LANCHOR6
	mov	r6, r0
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR6
	strb	r2, [r0, #44]
	strb	r3, [r4, #148]
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r5, #-3526]
	strb	r3, [r5, #-3518]
	strb	r3, [r5, #-3505]
	cmp	r2, #15
	bhi	.L13127
	add	r0, r2, #12
	add	r3, r2, #1
	ldr	r1, .L13170
	str	r4, [r6, r0, lsl #2]
	strb	r2, [r5, #-3504]
	strb	r2, [r5, #-3498]
	strb	r2, [r5, #-3486]
	strb	r3, [r6, #44]
	strb	r2, [r4, #149]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss.constprop.166
	cmp	r0, #0
	beq	.L13127
	ldr	r1, .L13170+4
	str	r0, [r4, #88]
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss.constprop.166
	cmp	r0, #0
	beq	.L13127
	ldr	r1, .L13170+8
	str	r0, [r4, #92]
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss.constprop.166
	subs	r3, r0, #0
	beq	.L13127
	str	r3, [r4, #164]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r8, r0
	str	r0, [r4, #168]
	beq	.L13143
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L13134
	mov	r2, #16
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L13134:
	str	r0, [r8]
	ldr	r3, [r4, #168]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L13145
	str	r4, [r3, #32]
	ldr	r0, [r4, #168]
	movw	r3, #:lower16:ecm_notify_complete
	movt	r3, #:upper16:ecm_notify_complete
	ldrb	r1, [r5, #-3474]	@ zero_extendqisi2
	ldrb	r2, [r5, #-3462]	@ zero_extendqisi2
	str	r3, [r0, #28]
	ldr	r0, [r4, #20]
	ldrb	r3, [r5, #-3450]	@ zero_extendqisi2
	strb	r1, [r5, #-3438]
	strb	r2, [r5, #-3426]
	strb	r1, [r5, #-3402]
	ldr	r1, [r0, #24]
	ldr	r0, .L13170+12
	strb	r3, [r5, #-3414]
	strb	r2, [r5, #-3390]
	strb	r3, [r5, #-3378]
	ldr	r5, [r1]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L13137
	ldr	r3, [r5, #20]
	cmp	r3, #2
	bhi	.L13169
.L13136:
	movw	r3, #:lower16:.LANCHOR4
	movw	r1, #3858
	movt	r3, #:upper16:.LANCHOR4
	movw	r2, #:lower16:ecm_open
	ldrh	r5, [r3, r1]
	movw	r3, #:lower16:ecm_close
	movt	r2, #:upper16:ecm_open
	movt	r3, #:upper16:ecm_close
	strd	r2, [r4, #136]
	ubfx	r5, r5, #2, #1
	cmp	r5, #0
	beq	.L13126
	ldr	r3, [r6, #24]
	ldr	r1, [r7]
	ldr	r3, [r3]
	add	r1, r1, #32
	ldr	r2, [r3, #20]
	cmp	r2, #4
	movwhi	r3, #:lower16:.LC1013
	movthi	r3, #:upper16:.LC1013
	bhi	.L13139
	movw	r0, #:lower16:.LC944
	movw	r3, #:lower16:.LC943
	movt	r0, #:upper16:.LC944
	cmp	r2, #2
	movt	r3, #:upper16:.LC943
	movls	r3, r0
.L13139:
	ldr	ip, [r4, #88]
	movw	r2, #:lower16:.LC994
	mov	r5, #0
	ldr	r0, [r4, #164]
	movt	r2, #:upper16:.LC994
	ldr	lr, [r4, #92]
	ldr	r4, [r0, #4]
	ldr	r0, .L13170+16
	str	r4, [sp, #8]
	ldr	lr, [lr, #4]
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L13126
.L13127:
	ldr	r3, [r4, #168]
	mvn	r5, #18
.L13129:
	cmp	r3, #0
	beq	.L13133
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #164]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L13133:
	ldr	r3, [r4, #164]
	movw	r1, #:lower16:.LC1010
	movt	r1, #:upper16:.LC1010
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r7]
	mov	r3, r5
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L13126:
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13169:
	ldr	r0, .L13170+20
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L13137
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bls	.L13136
	ldr	r0, .L13170+24
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L13136
.L13137:
	mov	r0, r4
	mvn	r5, #11
	bl	usb_free_all_descriptors
	ldr	r3, [r4, #168]
	b	.L13129
.L13145:
	mvn	r5, #11
	b	.L13129
.L13143:
	mvn	r5, #11
	b	.L13133
.L13171:
	.align	2
.L13170:
	.word	.LANCHOR6-3476
	.word	.LANCHOR6-3464
	.word	.LANCHOR6-3452
	.word	.LANCHOR6-3368
	.word	.LANCHOR4+3840
	.word	.LANCHOR6-3324
	.word	.LANCHOR6-3280
	.fnend
	.size	ecm_bind, .-ecm_bind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_bind, %function
rndis_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #20
	sub	sp, sp, #20
	ldr	r7, [r0, #24]
	cmp	r3, #15
	bhi	.L13173
	add	r2, r3, #1
	add	r1, r3, #12
	movw	r5, #:lower16:.LANCHOR6
	mov	r6, r0
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR6
	strb	r2, [r0, #44]
	strb	r3, [r4, #148]
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r5, #-3226]
	strb	r3, [r5, #-3218]
	strb	r3, [r5, #-3205]
	cmp	r2, #15
	bhi	.L13173
	add	r0, r2, #12
	add	r3, r2, #1
	ldr	r1, .L13253
	str	r4, [r6, r0, lsl #2]
	strb	r2, [r5, #-3204]
	strb	r2, [r5, #-3198]
	strb	r3, [r6, #44]
	strb	r2, [r4, #149]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss.constprop.166
	cmp	r0, #0
	beq	.L13173
	ldr	r1, .L13253+4
	str	r0, [r4, #88]
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss.constprop.166
	cmp	r0, #0
	beq	.L13173
	ldr	r1, .L13253+8
	str	r0, [r4, #92]
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss.constprop.166
	subs	r3, r0, #0
	beq	.L13173
	str	r3, [r4, #168]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r8, r0
	str	r0, [r4, #172]
	beq	.L13177
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L13176
	mov	r2, #8
	mov	r1, #208
	bl	kmem_cache_alloc_trace
.L13176:
	str	r0, [r8]
	ldr	r2, [r4, #172]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L13177
	mov	r1, #8
	movw	r3, #:lower16:rndis_response_complete
	movt	r3, #:upper16:rndis_response_complete
	str	r1, [r2, #4]
	ldr	r0, [r4, #172]
	ldrb	r1, [r5, #-3186]	@ zero_extendqisi2
	ldrb	r2, [r5, #-3174]	@ zero_extendqisi2
	str	r4, [r0, #32]
	ldr	r0, [r4, #172]
	strb	r1, [r5, #-3150]
	strb	r2, [r5, #-3138]
	strb	r1, [r5, #-3114]
	str	r3, [r0, #28]
	ldr	r1, [r4, #20]
	ldrb	r3, [r5, #-3162]	@ zero_extendqisi2
	ldr	r0, .L13253+12
	strb	r2, [r5, #-3102]
	ldr	r2, [r1, #24]
	strb	r3, [r5, #-3126]
	strb	r3, [r5, #-3090]
	ldr	r8, [r2]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L13180
	ldr	r3, [r8, #20]
	cmp	r3, #2
	bhi	.L13246
.L13179:
	movw	r8, #:lower16:.LANCHOR1
	movw	r1, #:lower16:rndis_open
	movt	r8, #:upper16:.LANCHOR1
	movw	r2, #:lower16:rndis_close
	ldrb	r3, [r8, #3873]	@ zero_extendqisi2
	movt	r1, #:upper16:rndis_open
	movt	r2, #:upper16:rndis_close
	str	r1, [r4, #136]
	str	r2, [r4, #140]
	cmp	r3, #0
	bne	.L13181
	movw	r10, #:lower16:.LANCHOR4
	movw	r1, #3594
	str	r4, [r8, #3920]
	movt	r10, #:upper16:.LANCHOR4
	movw	r2, #:lower16:rndis_response_available
	ldrh	r0, [r10, r1]
	movt	r2, #:upper16:rndis_response_available
	mov	r1, #1
	add	ip, r8, #3872
	strb	r1, [r8, #3873]
	strh	r1, [ip, #36]	@ movhi
	tst	r0, #4
	str	r2, [r8, #3916]
	bne	.L13247
.L13182:
	ldrh	r9, [r10, #186]
	mov	r0, #0
	str	r0, [r4, #164]
	ubfx	r9, r9, #2, #1
	cmp	r9, r0
	moveq	r3, r9
	bne	.L13248
.L13183:
	movw	r2, #3666
	rsb	r3, r3, r3, lsl #4
	ldrb	r5, [r5, #-2936]	@ zero_extendqisi2
	ldrh	r0, [r10, r2]
	mov	r1, #0
	add	r3, r8, r3, lsl #2
	add	r2, r4, #150
	str	r1, [r8, #3880]
	str	r1, [r8, #3884]
	tst	r0, #4
	str	r2, [r3, #3892]
	bne	.L13249
.L13193:
	ldr	fp, [r4, #160]
	rsb	r9, r9, r9, lsl #4
	add	r9, r8, r9, lsl #2
	cmp	fp, #0
	strb	r5, [r9, #3908]
	beq	.L13184
	ldr	r5, [r4, #156]
	cmp	r5, #0
	bne	.L13250
.L13184:
	movw	r3, #3882
	ldrh	r5, [r10, r3]
	ubfx	r5, r5, #2, #1
	cmp	r5, #0
	beq	.L13172
	ldr	r3, [r6, #24]
	ldr	r1, [r7]
	ldr	r3, [r3]
	add	r1, r1, #32
	ldr	r2, [r3, #20]
	cmp	r2, #4
	movwhi	r3, #:lower16:.LC1013
	movthi	r3, #:upper16:.LC1013
	bhi	.L13187
	movw	r0, #:lower16:.LC944
	movw	r3, #:lower16:.LC943
	movt	r0, #:upper16:.LC944
	cmp	r2, #2
	movt	r3, #:upper16:.LC943
	movls	r3, r0
.L13187:
	ldr	ip, [r4, #88]
	movw	r2, #:lower16:.LC1016
	mov	r5, #0
	ldr	r0, [r4, #168]
	movt	r2, #:upper16:.LC1016
	ldr	lr, [r4, #92]
	ldr	r4, [r0, #4]
	ldr	r0, .L13253+16
	str	r4, [sp, #8]
	ldr	lr, [lr, #4]
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L13172
.L13181:
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #3618
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, r3]
	tst	r3, #4
	bne	.L13251
.L13173:
	mvn	r5, #18
.L13175:
	ldr	r0, [r4, #16]
	bl	kfree
	ldr	r0, [r4, #8]
	bl	kfree
	ldr	r0, [r4, #12]
	bl	kfree
	ldr	r3, [r4, #172]
	cmp	r3, #0
	beq	.L13188
	ldr	r0, [r3]
	bl	kfree
	ldrd	r0, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L13188:
	ldr	r3, [r4, #168]
	movw	r1, #:lower16:.LC1010
	movt	r1, #:upper16:.LC1010
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r7]
	mov	r3, r5
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L13172:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13246:
	ldr	r0, .L13253+20
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L13180
	ldr	r3, [r8, #20]
	cmp	r3, #4
	bls	.L13179
	ldr	r0, .L13253+24
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L13179
.L13180:
	mov	r0, r4
	mvn	r5, #11
	bl	usb_free_all_descriptors
	b	.L13175
.L13177:
	mvn	r5, #11
	b	.L13175
.L13251:
	movw	r1, #:lower16:.LC1015
	add	r0, r0, #3600
	movt	r1, #:upper16:.LC1015
	mvn	r5, #18
	bl	__dynamic_pr_debug
	b	.L13175
.L13250:
	movw	r3, #3642
	ldrb	r9, [r4, #164]	@ zero_extendqisi2
	ldrh	r3, [r10, r3]
	tst	r3, #4
	bne	.L13252
.L13185:
	cmp	r9, #0
	bne	.L13196
	str	r5, [r8, #3904]
	str	fp, [r8, #3912]
	b	.L13184
.L13249:
	movw	r1, #:lower16:.LC289
	ldr	r2, .L13253+28
	movt	r1, #:upper16:.LC289
	ldr	r0, .L13253+32
	bl	__dynamic_pr_debug
	b	.L13193
.L13248:
	movw	r1, #:lower16:.LC779
	mov	r3, r0
	ldr	r2, .L13253+36
	movt	r1, #:upper16:.LC779
	str	r0, [sp]
	ldr	r0, .L13253+40
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #164]
	uxtb	r9, r3
	b	.L13183
.L13247:
	movw	r1, #:lower16:.LC1014
	ldr	r2, .L13253+44
	movt	r1, #:upper16:.LC1014
	ldr	r0, .L13253+48
	bl	__dynamic_pr_debug
	b	.L13182
.L13252:
	movw	r1, #:lower16:.LC289
	ldr	r2, .L13253+52
	movt	r1, #:upper16:.LC289
	ldr	r0, .L13253+56
	bl	__dynamic_pr_debug
	b	.L13185
.L13196:
	mov	r5, #0
	b	.L13175
.L13254:
	.align	2
.L13253:
	.word	.LANCHOR6-3188
	.word	.LANCHOR6-3176
	.word	.LANCHOR6-3164
	.word	.LANCHOR6-3080
	.word	.LANCHOR4+3864
	.word	.LANCHOR6-3036
	.word	.LANCHOR6-2992
	.word	.LANCHOR5-620
	.word	.LANCHOR4+3648
	.word	.LANCHOR5-1560
	.word	.LANCHOR4+168
	.word	.LANCHOR5-660
	.word	.LANCHOR4+3576
	.word	.LANCHOR5-644
	.word	.LANCHOR4+3624
	.fnend
	.size	rndis_bind, .-rndis_bind
	.align	2
	.global	usb_ep_autoconfig_ss
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_ep_autoconfig_ss, %function
usb_ep_autoconfig_ss:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r9, r0
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	fp, [r0, #28]
	.pad #20
	sub	sp, sp, #20
	movw	r0, #:lower16:.LC504
	ldrb	r5, [r1, #3]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC504
	str	r2, [sp, #4]
	mov	r1, fp
	bl	strcmp
	ldr	r8, [r6, #8]!
	cmp	r0, #0
	and	r5, r5, #3
	sub	r4, r8, #12
	bne	.L13256
	cmp	r5, #3
	beq	.L13356
	movw	r0, #:lower16:.LC507
	mov	r1, fp
	str	r8, [sp, #8]
	movt	r0, #:upper16:.LC507
	bl	strcmp
	cmp	r0, #0
	ldr	r3, [sp, #8]
	beq	.L13267
.L13266:
	cmp	r3, r6
	beq	.L13271
.L13265:
	movw	r3, #:lower16:.LC506
	movw	fp, #:lower16:_ctype
	movt	r3, #:upper16:.LC506
	movw	r10, #:lower16:.LANCHOR1
	movt	fp, #:upper16:_ctype
	movt	r10, #:upper16:.LANCHOR1
	str	r3, [sp, #8]
	b	.L13290
.L13274:
	ldr	r4, [r4, #12]
	cmp	r6, r4
	sub	r4, r4, #12
	beq	.L13271
.L13290:
	ldr	r2, [r4]
	cmp	r2, #0
	bne	.L13274
	ldrb	r5, [r7, #3]	@ zero_extendqisi2
	ands	r5, r5, #3
	beq	.L13274
	ldr	r8, [r4, #4]
	ldrb	r2, [r8]	@ zero_extendqisi2
	cmp	r2, #101
	bne	.L13274
	ldrb	r2, [r8, #2]	@ zero_extendqisi2
	cmp	r2, #45
	beq	.L13275
	mov	r1, #45
	mov	r0, r8
	bl	strrchr
	subs	r2, r0, #0
	beq	.L13276
	cmp	r5, #2
	beq	.L13277
	cmp	r5, #3
	ldrb	r1, [r2, #2]	@ zero_extendqisi2
	beq	.L13357
	cmp	r1, #115
	bne	.L13274
.L13280:
	ldrb	r2, [r2, #-1]	@ zero_extendqisi2
	ldrb	r1, [fp, r2]	@ zero_extendqisi2
	tst	r1, #4
	bne	.L13275
.L13292:
	ldrsb	r1, [r7, #2]
	cmp	r1, #0
	blt	.L13358
	cmp	r2, #116
	bne	.L13274
.L13275:
	ldr	r3, [sp, #4]
	sub	r8, r5, #2
	clz	r8, r8
	lsr	r8, r8, #5
	cmp	r3, #0
	movne	r2, r8
	moveq	r2, #0
	cmp	r2, #0
	bne	.L13359
	ldrh	r2, [r7, #4]	@ unaligned
	cmp	r2, #0
	beq	.L13291
.L13284:
	cmp	r5, #1
	ubfx	r1, r2, #0, #11
	beq	.L13285
	cmp	r5, #3
	bne	.L13286
.L13294:
	ldr	r3, [r9, #20]
	cmp	r3, #2
	movls	r0, #1
	movhi	r0, #0
	cmp	r1, #64
	movls	r0, #0
	cmp	r0, #0
	bne	.L13274
.L13285:
	ldrh	r0, [r4, #20]
	cmp	r0, r1
	bcc	.L13274
	ldr	r1, [r9, #20]
	cmp	r1, #2
	bhi	.L13286
	tst	r2, #7168
	bne	.L13274
.L13286:
	ldrb	r2, [r7, #2]	@ zero_extendqisi2
	and	r2, r2, #128
	strb	r2, [r7, #2]
	ldr	r0, [r4, #4]
	ldrb	r1, [r0, #2]	@ zero_extendqisi2
	ldrb	r1, [fp, r1]	@ zero_extendqisi2
	tst	r1, #4
	bne	.L13360
	ldr	r1, [r10, #3772]
	add	r1, r1, #1
	cmp	r1, #15
	str	r1, [r10, #3772]
	bhi	.L13274
	orr	r2, r2, r1
	uxtb	r2, r2
	strb	r2, [r7, #2]
.L13288:
	ldr	r3, [sp, #4]
	cmp	r3, #0
	movne	r8, #0
	cmp	r8, #0
	beq	.L13289
	ldrh	r3, [r4, #20]
	cmp	r3, #64
	movge	r3, #64
	strh	r3, [r7, #4]	@ unaligned
.L13289:
	strb	r2, [r4, #25]
.L13262:
	mov	r3, #0
	str	r3, [r4, #28]
	str	r3, [r4, #32]
	b	.L13255
.L13256:
	movw	r0, #:lower16:.LC507
	mov	r1, fp
	str	r8, [sp, #8]
	movt	r0, #:upper16:.LC507
	bl	strcmp
	cmp	r0, #0
	ldr	r3, [sp, #8]
	bne	.L13266
	cmp	r5, #3
	beq	.L13361
.L13267:
	cmp	r5, #2
	bne	.L13266
	ldrsb	r2, [r7, #2]
	cmp	r2, #0
	bge	.L13266
	cmp	r6, r8
	beq	.L13271
	movw	r8, #:lower16:.LC942
	mov	r5, r4
	movt	r8, #:upper16:.LC942
	b	.L13273
.L13362:
	ldr	r5, [r5, #12]
	cmp	r6, r5
	sub	r5, r5, #12
	beq	.L13265
.L13273:
	mov	r1, r8
	ldr	r0, [r5, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L13362
.L13272:
	cmp	r5, #0
	beq	.L13265
	ldr	r3, [r5]
	cmp	r3, #0
	bne	.L13265
	mov	r2, r7
	mov	r1, r5
	ldr	r3, [sp, #4]
	mov	r0, r9
	bl	ep_matches.part.11
	cmp	r0, #0
	bne	.L13300
	ldr	r3, [r9, #8]
	sub	r4, r3, #12
	b	.L13266
.L13357:
	cmp	r1, #115
	str	r2, [sp, #12]
	beq	.L13274
	ldr	r0, [sp, #8]
	ldr	r1, [r9, #28]
	bl	strcmp
	cmp	r0, #0
	ldr	r2, [sp, #12]
	bne	.L13279
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	cmp	r1, #105
	beq	.L13274
.L13279:
	ldrb	r2, [r2, #-1]	@ zero_extendqisi2
	ldrb	r1, [fp, r2]	@ zero_extendqisi2
	tst	r1, #4
	beq	.L13292
	ldrh	r2, [r7, #4]	@ unaligned
	cmp	r2, #0
	bne	.L13363
.L13302:
	mov	r8, r2
.L13291:
	ldrh	r2, [r4, #20]
	strh	r2, [r7, #4]	@ unaligned
	b	.L13284
.L13356:
	cmp	r6, r8
	beq	.L13271
	movw	r8, #:lower16:.LC939
	mov	r5, r4
	movt	r8, #:upper16:.LC939
	b	.L13260
.L13364:
	ldr	r5, [r5, #12]
	cmp	r6, r5
	sub	r5, r5, #12
	beq	.L13261
.L13260:
	mov	r1, r8
	ldr	r0, [r5, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L13364
	cmp	r5, #0
	beq	.L13261
	ldr	r3, [r5]
	cmp	r3, #0
	bne	.L13261
	mov	r2, r7
	mov	r1, r5
	ldr	r3, [sp, #4]
	mov	r0, r9
	bl	ep_matches.part.11
	cmp	r0, #0
	bne	.L13300
	ldr	r4, [r9, #8]
	cmp	r6, r4
	sub	r4, r4, #12
	bne	.L13261
.L13271:
	mov	r4, #0
.L13255:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13360:
	mov	r2, #10
	add	r0, r0, #2
	mov	r1, #0
	bl	simple_strtoul
	ldrb	r2, [r7, #2]	@ zero_extendqisi2
	orr	r2, r2, r0
	uxtb	r2, r2
	strb	r2, [r7, #2]
	b	.L13288
.L13276:
	mov	r0, r8
	bl	strlen
	add	r2, r8, r0
	b	.L13280
.L13359:
	ldr	r1, [r9, #20]
	cmp	r1, #4
	bls	.L13283
	ldrb	r1, [r3, #3]	@ zero_extendqisi2
	ldrh	r0, [r4, #22]
	and	r1, r1, #31
	cmp	r0, r1
	bcc	.L13274
.L13283:
	ldrh	r1, [r7, #4]	@ unaligned
	cmp	r1, #0
	movne	r8, r2
	bne	.L13286
	b	.L13302
.L13277:
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	cmp	r1, #98
	bne	.L13274
	b	.L13280
.L13361:
	cmp	r6, r8
	movwne	r8, #:lower16:.LC941
	movne	r5, r4
	movtne	r8, #:upper16:.LC941
	bne	.L13268
	b	.L13271
.L13365:
	ldr	r5, [r5, #12]
	cmp	r6, r5
	sub	r5, r5, #12
	beq	.L13265
.L13268:
	mov	r1, r8
	ldr	r0, [r5, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L13365
	b	.L13272
.L13261:
	movw	r8, #:lower16:.LC940
	mov	r5, r4
	movt	r8, #:upper16:.LC940
	b	.L13264
.L13366:
	ldr	r5, [r5, #12]
	cmp	r6, r5
	sub	r5, r5, #12
	beq	.L13265
.L13264:
	mov	r1, r8
	ldr	r0, [r5, #4]
	bl	strcmp
	cmp	r0, #0
	bne	.L13366
	b	.L13272
.L13358:
	cmp	r2, #110
	bne	.L13274
	b	.L13275
.L13363:
	ubfx	r1, r2, #0, #11
	mov	r8, #0
	b	.L13294
.L13300:
	mov	r4, r5
	b	.L13262
	.fnend
	.size	usb_ep_autoconfig_ss, .-usb_ep_autoconfig_ss
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_bind, %function
qdss_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #3906
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	mov	r5, r1
	str	lr, [sp, #20]
	ldrh	r0, [r3, r2]
	ldr	r2, [r6, #24]
	tst	r0, #4
	ldr	r7, [r2]
	bne	.L13418
.L13368:
	ldr	r3, [r7, #20]
	cmp	r3, #2
	bls	.L13419
	ldrb	r3, [r6, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L13372
	add	r1, r3, #12
	add	r2, r3, #1
	movw	r4, #:lower16:.LANCHOR6
	str	r5, [r6, r1, lsl #2]
	movt	r4, #:upper16:.LANCHOR6
	strb	r2, [r6, #44]
	strb	r3, [r5, #89]
	ldrb	ip, [r6, #44]	@ zero_extendqisi2
	strb	r3, [r4, #-2930]
	cmp	ip, #15
	bhi	.L13372
	ldr	r2, .L13422
	add	r1, ip, #12
	add	r3, ip, #1
	mov	r0, r7
	str	r5, [r6, r1, lsl #2]
	strb	r3, [r6, #44]
	add	r1, r2, #8
	strb	ip, [r5, #88]
	strb	ip, [r4, #-2918]
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L13375
	ldr	r2, .L13422+4
	sub	r1, r4, #2880
	str	r0, [r5, #108]
	str	r5, [r0]
	mov	r0, r7
	bl	usb_ep_autoconfig_ss
	cmp	r0, #0
	beq	.L13375
	sub	r1, r4, #2848
	ldr	r2, .L13422+8
	str	r0, [r5, #104]
	sub	r1, r1, #12
	str	r5, [r0]
	mov	r0, r7
	bl	usb_ep_autoconfig_ss
	subs	r3, r0, #0
	beq	.L13375
	str	r3, [r5, #100]
	ldr	r0, .L13422+12
	str	r5, [r3]
	ldrb	r1, [r4, #-2898]	@ zero_extendqisi2
	ldrb	r2, [r4, #-2878]	@ zero_extendqisi2
	ldrb	r3, [r4, #-2858]	@ zero_extendqisi2
	strb	r1, [r4, #-2846]
	strb	r2, [r4, #-2834]
	strb	r3, [r4, #-2822]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r5, #8]
	beq	.L13378
	ldr	r3, [r7, #20]
	cmp	r3, #4
	bhi	.L13420
.L13377:
	movw	r0, #:lower16:.LC528
	ldr	r1, [r7, #28]
	movt	r0, #:upper16:.LC528
	bl	strcmp
	subs	r4, r0, #0
	movne	r4, #0
	beq	.L13421
.L13367:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13420:
	ldr	r0, .L13422+16
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r5, #12]
	bne	.L13377
.L13378:
	movw	r0, #:lower16:.LC1028
	movt	r0, #:upper16:.LC1028
	bl	printk
.L13374:
	ldr	r0, .L13422+20
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	beq	.L13379
	movw	r1, #:lower16:.LC743
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC743
	bl	__dynamic_pr_debug
.L13379:
	ldr	r3, [r5, #104]
	ldr	r0, .L13422+24
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r5, #100]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r5, #108]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	beq	.L13383
	movw	r1, #:lower16:.LC744
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC744
	bl	__dynamic_pr_debug
.L13383:
	ldr	r3, [r7, #20]
	cmp	r3, #4
	bls	.L13384
	ldr	r0, [r5, #12]
	cmp	r0, #0
	beq	.L13388
	bl	kfree
	ldr	r3, [r7, #20]
.L13384:
	cmp	r3, #2
	bls	.L13387
.L13388:
	ldr	r0, [r5, #8]
	cmp	r0, #0
	beq	.L13387
	movw	r4, #65012
	bl	kfree
	movt	r4, 65535
	b	.L13367
.L13421:
	mov	r1, #1
	ldr	r0, [r5, #108]
	bl	dwc3_tx_fifo_resize_request
	b	.L13367
.L13418:
	movw	r1, #:lower16:.LC1024
	add	r0, r3, #3888
	movt	r1, #:upper16:.LC1024
	bl	__dynamic_pr_debug
	b	.L13368
.L13419:
	movw	r0, #:lower16:.LC1025
	movw	r4, #65012
	movt	r0, #:upper16:.LC1025
	movt	r4, 65535
	bl	printk
	b	.L13367
.L13375:
	movw	r0, #:lower16:.LC1027
	movt	r0, #:upper16:.LC1027
	bl	printk
	b	.L13374
.L13372:
	movw	r0, #:lower16:.LC1026
	mvn	r4, #18
	movt	r0, #:upper16:.LC1026
	bl	printk
	b	.L13367
.L13387:
	movw	r4, #65012
	movt	r4, 65535
	b	.L13367
.L13423:
	.align	2
.L13422:
	.word	.LANCHOR6-2908
	.word	.LANCHOR6-2888
	.word	.LANCHOR6-2868
	.word	.LANCHOR6-2812
	.word	.LANCHOR6-2788
	.word	.LANCHOR4-292
	.word	.LANCHOR4-268
	.fnend
	.size	qdss_bind, .-qdss_bind
	.align	2
	.global	usb_ep_autoconfig
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_ep_autoconfig, %function
usb_ep_autoconfig:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	b	usb_ep_autoconfig_ss.constprop.166
	.fnend
	.size	usb_ep_autoconfig, .-usb_ep_autoconfig
	.align	2
	.global	usb_ep_autoconfig_reset
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_ep_autoconfig_reset, %function
usb_ep_autoconfig_reset:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #8]!
	cmp	r0, r3
	sub	r3, r3, #12
	beq	.L13426
	mov	r1, #0
.L13427:
	ldr	r2, [r3, #12]
	str	r1, [r3]
	cmp	r0, r2
	sub	r3, r2, #12
	bne	.L13427
.L13426:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	str	r2, [r3, #3772]
	bx	lr
	.fnend
	.size	usb_ep_autoconfig_reset, .-usb_ep_autoconfig_reset
	.align	2
	.global	config_ep_by_speed
	.syntax unified
	.arm
	.fpu softvfp
	.type	config_ep_by_speed, %function
config_ep_by_speed:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	mov	r5, r2
	add	r0, r0, #32
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata
	cmp	r6, #0
	clz	r3, r5
	lsr	r3, r3, #5
	moveq	r3, #1
	cmp	r4, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L13436
	ldr	r3, [r4, #16]
	cmp	r3, #3
	beq	.L13432
	cmp	r3, #5
	beq	.L13481
.L13433:
	ldr	ip, [r6, #16]
	mov	r7, #0
.L13435:
	ldr	r3, [ip]
	cmp	r3, #0
	beq	.L13436
	ldrb	r2, [r3, #1]	@ zero_extendqisi2
	cmp	r2, #5
	bne	.L13438
	b	.L13437
.L13439:
	ldrb	r1, [r3, #1]	@ zero_extendqisi2
	cmp	r1, #5
	beq	.L13437
.L13438:
	ldr	r3, [ip, #4]!
	cmp	r3, #0
	bne	.L13439
.L13436:
	mvn	r0, #4
.L13429:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13437:
	cmp	ip, #0
	beq	.L13436
	ldrb	lr, [r5, #25]	@ zero_extendqisi2
	ldrb	r2, [r3, #2]	@ zero_extendqisi2
	cmp	r2, lr
	beq	.L13446
.L13440:
	ldr	r3, [ip, #4]
	add	r1, ip, #4
	cmp	r3, #0
	bne	.L13445
	b	.L13436
.L13443:
	ldr	r3, [r1, #4]!
	cmp	r3, #0
	beq	.L13436
.L13445:
	ldrb	ip, [r3, #1]	@ zero_extendqisi2
	cmp	ip, #5
	bne	.L13443
	subs	ip, r1, #0
	beq	.L13436
	ldrb	r1, [r3, #2]	@ zero_extendqisi2
	cmp	r1, lr
	bne	.L13440
.L13446:
	ldrb	r2, [r5, #24]	@ zero_extendqisi2
	mov	lr, #0
	cmp	r7, #0
	ldrh	r1, [r3, #4]	@ unaligned
	bic	r2, r2, #127
	strh	r1, [r5, #20]	@ movhi
	strb	r2, [r5, #24]
	str	r3, [r5, #28]
	str	lr, [r5, #32]
	beq	.L13447
	ldr	r2, [ip, #4]
	cmp	r2, #0
	beq	.L13436
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	cmp	r1, #48
	bne	.L13436
	str	r2, [r5, #32]
	ldr	r1, [r4, #16]
	cmp	r1, #5
	beq	.L13482
.L13447:
	mov	r0, #0
	b	.L13429
.L13481:
	ldr	r3, [r4, #20]
	cmp	r3, #4
	bhi	.L13483
.L13434:
	cmp	r3, #2
	bls	.L13433
	mov	r7, #0
	ldr	ip, [r6, #8]
	b	.L13435
.L13432:
	ldr	r3, [r4, #20]
	b	.L13434
.L13483:
	mov	r7, #1
	ldr	ip, [r6, #12]
	b	.L13435
.L13482:
	ldrb	r3, [r3, #3]	@ zero_extendqisi2
	and	r3, r3, #3
	cmp	r3, #1
	beq	.L13448
	cmp	r3, #0
	beq	.L13484
.L13450:
	ldrb	r3, [r2, #2]	@ zero_extendqisi2
	mov	r0, #0
	ldrb	r2, [r5, #24]	@ zero_extendqisi2
	add	r3, r3, #1
	bfi	r2, r3, #2, #5
	strb	r2, [r5, #24]
	b	.L13429
.L13448:
	ldrb	r1, [r2, #3]	@ zero_extendqisi2
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	bfi	r3, r1, #0, #2
	strb	r3, [r5, #24]
	b	.L13450
.L13484:
	ldrb	r3, [r2, #2]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L13485
.L13451:
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	mov	r2, #1
	mov	r0, #0
	bfi	r3, r2, #2, #5
	strb	r3, [r5, #24]
	b	.L13429
.L13485:
	ldr	r0, [r0]
	movw	r1, #:lower16:.LC1029
	movt	r1, #:upper16:.LC1029
	add	r0, r0, #32
	bl	dev_err
	b	.L13451
	.fnend
	.size	config_ep_by_speed, .-config_ep_by_speed
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_set_alt, %function
diag_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #88]
	ldr	r5, [r3, #24]
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L13489
	mov	r1, r4
	ldr	r0, [r5]
	ldr	r2, [r4, #84]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L13489
	ldr	r3, [r4, #124]
	cmp	r3, #0
	beq	.L13492
	str	r4, [r3, #20]
	ldr	r3, [r4, #88]
	str	r4, [r3]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L13497
	ldr	r3, [r4, #84]
	str	r4, [r3]
	ldr	r3, [r4, #84]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L13498
	add	r6, r4, #108
	str	r5, [r4, #128]
	mov	r0, r6
	str	r5, [r4, #132]
	str	r5, [r4, #136]
	bl	_raw_spin_lock_irqsave
	mov	r3, #1
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #112]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #124]
	ldr	r3, [r0, #12]
	cmp	r3, #0
	beq	.L13486
	mov	r2, r5
	mov	r1, r5
	ldr	r0, [r0, #16]
	blx	r3
.L13486:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13498:
	ldr	r2, [r4, #84]
	movw	r1, #:lower16:.LC1030
	mov	r3, r5
	ldr	r0, [r4, #116]
	movt	r1, #:upper16:.LC1030
	ldr	r2, [r2, #4]
	ldr	r0, [r0]
	add	r0, r0, #32
	bl	dev_err
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L13486
.L13497:
	ldr	r2, [r4, #88]
	movw	r1, #:lower16:.LC1030
	mov	r3, r5
	ldr	r0, [r4, #116]
	movt	r1, #:upper16:.LC1030
	ldr	r2, [r2, #4]
	ldr	r0, [r0]
	add	r0, r0, #32
	bl	dev_err
	b	.L13486
.L13489:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r5, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #84]
	str	r3, [r2, #28]
	b	.L13486
.L13492:
	mvn	r5, #18
	b	.L13486
	.fnend
	.size	diag_function_set_alt, .-diag_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_set_alt, %function
rmnet_smd_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #84]
	ldr	r2, [r0, #92]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13510
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L13511
	mov	r1, r4
	ldr	r0, [r6]
	ldr	r2, [r4, #88]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13512
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L13513
	mov	r1, r4
	ldr	r0, [r6]
	ldr	r2, [r4, #96]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13514
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L13515
	add	r1, r4, #392
	ldr	r0, [r4, #388]
	bl	queue_work
	b	.L13499
.L13511:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC1030
	mov	r3, r5
	ldr	r2, [r4, #92]
	movt	r1, #:upper16:.LC1030
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
.L13499:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13510:
	ldr	r2, [r4, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC1031
	movt	r1, #:upper16:.LC1031
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r4, #92]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L13499
.L13512:
	ldr	r2, [r4, #88]
	mov	r0, #0
	movw	r1, #:lower16:.LC1031
	movt	r1, #:upper16:.LC1031
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r4, #88]
.L13509:
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L13499
.L13515:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC1030
	mov	r3, r5
	ldr	r2, [r4, #96]
	movt	r1, #:upper16:.LC1030
.L13508:
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L13499
.L13513:
	movw	r1, #:lower16:.LC1030
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1030
	ldr	r2, [r4, #88]
	b	.L13509
.L13514:
	ldr	r2, [r4, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC1031
	movt	r1, #:upper16:.LC1031
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r4, #96]
	b	.L13508
	.fnend
	.size	rmnet_smd_set_alt, .-rmnet_smd_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_set_alt, %function
rmnet_sdio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #84]
	ldr	r3, [r0, #92]
	str	r0, [r3]
	ldr	r2, [r0, #92]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13536
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L13537
	ldr	r3, [r4, #88]
	mov	r1, r4
	str	r4, [r3]
	ldr	r0, [r6]
	ldr	r2, [r4, #88]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13538
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L13539
	mov	r1, r4
	ldr	r0, [r6]
	ldr	r2, [r4, #96]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13540
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L13541
	ldr	r6, [r4, #96]
	mov	r1, #32
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	bne	.L13542
.L13524:
	mvn	r3, #11
	mov	r5, r3
	str	r3, [r4, #100]
.L13527:
	movw	r0, #:lower16:.LC1033
	ldr	r1, .L13543
	movt	r0, #:upper16:.LC1033
	bl	printk
	b	.L13516
.L13537:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC1030
	mov	r3, r5
	ldr	r2, [r4, #92]
	movt	r1, #:upper16:.LC1030
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
.L13516:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13536:
	ldr	r2, [r4, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC1032
	movt	r1, #:upper16:.LC1032
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r4, #92]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L13516
.L13538:
	ldr	r2, [r4, #88]
	mov	r0, #0
	movw	r1, #:lower16:.LC1032
	movt	r1, #:upper16:.LC1032
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r4, #88]
.L13535:
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L13516
.L13541:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC1030
	mov	r3, r5
	ldr	r2, [r4, #96]
	movt	r1, #:upper16:.LC1030
.L13534:
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L13516
.L13539:
	movw	r1, #:lower16:.LC1030
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1030
	ldr	r2, [r4, #88]
	b	.L13535
.L13542:
	mov	r2, #8
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	str	r2, [r5, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5]
	beq	.L13526
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L13526
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L13524
.L13526:
	cmn	r5, #4096
	str	r5, [r4, #100]
	bhi	.L13527
	movw	r3, #:lower16:rmnet_sdio_notify_complete
	mov	r1, #8
	movt	r3, #:upper16:rmnet_sdio_notify_complete
	mov	r2, #1
	mov	r0, r4
	str	r3, [r5, #28]
	ldr	r3, [r4, #100]
	str	r4, [r3, #32]
	ldr	r3, [r4, #100]
	str	r1, [r3, #4]
	str	r2, [r4, #192]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	rmnet_sdio_start_io
.L13540:
	ldr	r2, [r4, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC1032
	movt	r1, #:upper16:.LC1032
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r4, #96]
	b	.L13534
.L13544:
	.align	2
.L13543:
	.word	.LANCHOR5-412
	.fnend
	.size	rmnet_sdio_set_alt, .-rmnet_sdio_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_set_alt, %function
audio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	ip, #3930
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR4
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	mov	r5, r1
	mov	r6, r2
	str	lr, [sp, #20]
	ldrh	r0, [r3, ip]
	ldr	r3, [r4, #20]
	tst	r0, #4
	ldr	r7, [r3, #24]
	bne	.L13558
.L13546:
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldrb	r3, [r3, #2166]	@ zero_extendqisi2
	cmp	r3, r5
	beq	.L13559
.L13552:
	mov	r5, #0
.L13545:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13559:
	cmp	r6, #0
	ldrb	r8, [r4, #152]	@ zero_extendqisi2
	beq	.L13548
	cmp	r8, #0
	bne	.L13552
	mov	r1, r4
	ldr	r0, [r7]
	ldr	r2, [r4, #104]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13560
	ldr	r3, [r4, #104]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	moveq	r3, #1
	strbeq	r3, [r4, #152]
	beq	.L13545
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC1036
	mov	r3, r5
	ldr	r2, [r4, #104]
	movt	r1, #:upper16:.LC1036
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L13545
.L13548:
	cmp	r8, #0
	moveq	r5, r6
	beq	.L13545
	ldr	r0, [r4, #104]
	mov	r5, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	strb	r6, [r4, #152]
	b	.L13545
.L13558:
	movw	r1, #:lower16:.LC1034
	mov	r3, r2
	ldr	r0, .L13561
	movt	r1, #:upper16:.LC1034
	mov	r2, r5
	bl	__dynamic_pr_debug
	b	.L13546
.L13560:
	ldr	r2, [r4, #104]
	movw	r1, #:lower16:.LC1035
	mov	r3, r5
	movt	r1, #:upper16:.LC1035
	str	r8, [r2, #28]
	ldr	r0, [r7]
	ldr	r2, [r4, #104]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L13545
.L13562:
	.align	2
.L13561:
	.word	.LANCHOR4+3912
	.fnend
	.size	audio_set_alt, .-audio_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_start_ep, %function
f_midi_start_ep:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r2
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r2]
	ldr	r3, [r1, #20]
	cmp	r2, #0
	ldr	r7, [r3, #24]
	beq	.L13564
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #4]
	blx	r3
.L13564:
	mov	r1, r5
	mov	r2, r4
	ldr	r0, [r6, #84]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13572
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r1, [r4, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	streq	r6, [r4]
	bne	.L13573
.L13563:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13572:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC1037
	mov	r3, r5
	movt	r1, #:upper16:.LC1037
	ldr	r2, [r4, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L13563
.L13573:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC1038
	mov	r3, r5
	movt	r1, #:upper16:.LC1038
	ldr	r2, [r4, #4]
	add	r0, r0, #32
	bl	dev_err
	b	.L13563
	.fnend
	.size	f_midi_start_ep, .-f_midi_start_ep
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_set_alt, %function
f_midi_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r1, r0
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #88]
	ldr	r5, [r3, #24]
	bl	f_midi_start_ep
	subs	r6, r0, #0
	beq	.L13589
.L13574:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13589:
	mov	r1, r4
	mov	r0, r4
	ldr	r2, [r4, #92]
	bl	f_midi_start_ep
	subs	r6, r0, #0
	bne	.L13574
	ldr	r2, [r4, #92]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L13576
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #92]
.L13576:
	mov	r1, r4
	ldr	r0, [r4, #84]
	bl	config_ep_by_speed
	subs	r6, r0, #0
	bne	.L13590
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L13591
	ldr	r3, [r4, #92]
	str	r4, [r3]
	ldr	r3, [r4, #340]
	cmp	r3, #0
	beq	.L13574
	movw	r7, #:lower16:f_midi_complete
	mov	r5, r6
	movt	r7, #:upper16:f_midi_complete
	b	.L13579
.L13580:
	ldr	r3, [r4, #340]
	cmp	r3, r5
	bls	.L13574
.L13579:
	ldr	r0, [r4, #92]
	add	r5, r5, #1
	ldr	r1, [r4, #336]
	bl	midi_alloc_ep_req
	cmp	r0, #0
	mov	r2, #32
	mov	r1, r0
	beq	.L13583
	str	r7, [r0, #28]
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L13580
	ldr	r0, [r4, #84]
	movw	r1, #:lower16:.LC1039
	ldr	r2, [r4, #92]
	movt	r1, #:upper16:.LC1039
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L13574
.L13583:
	mvn	r6, #11
	b	.L13574
.L13590:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC1037
	mov	r3, r6
	ldr	r2, [r4, #92]
	movt	r1, #:upper16:.LC1037
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L13574
.L13591:
	ldr	r0, [r5]
	movw	r1, #:lower16:.LC1038
	mov	r3, r6
	ldr	r2, [r4, #92]
	movt	r1, #:upper16:.LC1038
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L13574
	.fnend
	.size	f_midi_set_alt, .-f_midi_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	eth_stop, %function
eth_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r1, [r0, #576]
	cmp	r1, #0
	beq	.L13606
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
.L13601:
	add	r6, r5, #1152
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #1156]
	mov	r7, r0
	cmp	r4, #0
	beq	.L13595
	ldr	r3, [r4, #140]
	cmp	r3, #0
	beq	.L13596
	mov	r0, r4
	blx	r3
.L13596:
	ldr	r3, [r4, #88]
	ldr	r1, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r9, [r3, #28]
	ldr	r8, [r1, #28]
	ldr	r3, [r2, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #160]
	tst	r3, #4
	beq	.L13607
.L13595:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
.L13592:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13607:
	mov	r1, r4
	ldr	r2, [r4, #88]
	ldr	r0, [r5, #1164]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L13600
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r5, #1164]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L13600
	ldr	r3, [r4, #88]
	str	r9, [r3, #28]
	ldr	r3, [r4, #92]
	str	r8, [r3, #28]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	b	.L13595
.L13600:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L13592
.L13606:
	movw	r0, #:lower16:.LC101
	movw	r1, #1847
	movt	r0, #:upper16:.LC101
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC102
	movt	r0, #:upper16:.LC102
	bl	printk
	b	.L13601
	.fnend
	.size	eth_stop, .-eth_stop
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acc_function_set_alt, %function
acc_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR4
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r3, #3954
	str	r6, [sp, #8]
	movt	ip, #:upper16:.LANCHOR4
	mov	r4, r0
	str	lr, [sp, #12]
	ldr	lr, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	ldrh	r0, [ip, r3]
	ldr	r6, [lr, #24]
	tst	r0, #4
	ldr	r0, [r6]
	bne	.L13620
.L13609:
	mov	r1, r4
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13621
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L13622
	mov	r1, r4
	ldr	r0, [r6]
	ldr	r2, [r4, #96]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13623
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L13624
	ldrb	ip, [r4, #100]	@ zero_extendqisi2
	mov	r2, #1
	add	r0, r4, #1664
	mov	r3, r5
	mov	r1, #3
	orr	ip, ip, r2
	strb	ip, [r4, #100]
	bl	__wake_up
.L13608:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13622:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC1041
	mov	r3, r5
	ldr	r2, [r4, #92]
	movt	r1, #:upper16:.LC1041
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L13608
.L13621:
	ldr	r2, [r4, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC1032
	movt	r1, #:upper16:.LC1032
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r4, #92]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L13608
.L13623:
	ldr	r2, [r4, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC1032
	movt	r1, #:upper16:.LC1032
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r4, #96]
.L13619:
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L13608
.L13624:
	movw	r1, #:lower16:.LC1041
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1041
	ldr	r2, [r4, #96]
	b	.L13619
.L13620:
	mov	r5, r2
	movw	r2, #:lower16:.LC1040
	mov	r3, r1
	movt	r2, #:upper16:.LC1040
	add	r1, r0, #32
	add	r0, ip, #3936
	str	r5, [sp]
	bl	__dynamic_dev_dbg
	ldr	r0, [r6]
	b	.L13609
	.fnend
	.size	acc_function_set_alt, .-acc_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_set_alt, %function
fsg_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #88]
	ldr	r2, [r0, #100]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13625
	ldr	r3, [r4, #100]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L13635
.L13625:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13635:
	ldr	r3, [r4, #100]
	mov	r1, r4
	str	r6, [r3]
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	ldr	r2, [r4, #104]
	orr	r3, r3, #1
	strb	r3, [r4, #94]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13627
	ldr	r3, [r4, #104]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L13636
.L13627:
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r4, #94]
	b	.L13625
.L13636:
	ldr	r3, [r4, #104]
	add	r1, r4, #96
	str	r6, [r3]
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	ldr	r2, [r4, #104]
	orr	r3, r3, #2
	strb	r3, [r4, #94]
	ldr	r3, [r2, #28]
	ldrh	r3, [r3, #4]	@ unaligned
	str	r3, [r6, #108]
	bl	_clear_bit
	ldr	r2, [r4, #88]
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r5, [r3, #3964]
	str	r4, [r2, #12]
	ldr	r4, [r4, #88]
	str	r5, [r3, #3968]
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	mov	r6, r0
	cmp	r3, #4
	bgt	.L13629
	ldr	r3, [r4, #56]
	mov	r1, #4
	ldr	r2, [r4, #168]
	str	r1, [r4, #112]
	str	r3, [r4, #116]
	cmp	r2, #0
	beq	.L13629
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L13629:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	movw	r5, #32767
	b	.L13625
	.fnend
	.size	fsg_set_alt, .-fsg_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_set_alt, %function
mtp_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR4
	str	lr, [sp, #12]
	ldr	ip, [r0, #20]
	movw	r0, #3978
	ldrh	r0, [r3, r0]
	.pad #8
	sub	sp, sp, #8
	ldr	r6, [ip, #24]
	tst	r0, #4
	ldr	r0, [r6]
	bne	.L13650
.L13638:
	mov	r1, r4
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13651
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L13652
	mov	r1, r4
	ldr	r0, [r6]
	ldr	r2, [r4, #96]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13653
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L13654
	ldr	r2, .L13655
	ldr	r3, [r4, #100]
	str	r2, [r3, #28]
	ldr	r3, [r4, #100]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L13644
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L13637
.L13652:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC1041
	mov	r3, r5
	ldr	r2, [r4, #92]
	movt	r1, #:upper16:.LC1041
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
.L13637:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13651:
	ldr	r2, [r4, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC1032
	movt	r1, #:upper16:.LC1032
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r4, #92]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L13637
.L13644:
	mov	r1, #1
	add	r0, r4, #132
	mov	r2, r1
	mov	r3, r5
	str	r1, [r4, #104]
	mov	r1, #3
	bl	__wake_up
	b	.L13637
.L13653:
	ldr	r2, [r4, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC1032
	movt	r1, #:upper16:.LC1032
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r4, #96]
.L13649:
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L13637
.L13650:
	mov	lr, r2
	movw	r2, #:lower16:.LC1042
	mov	r3, r1
	movt	r2, #:upper16:.LC1042
	add	r1, r0, #32
	ldr	r0, .L13655+4
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	r0, [r6]
	b	.L13638
.L13654:
	movw	r1, #:lower16:.LC1041
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1041
	ldr	r2, [r4, #96]
	b	.L13649
.L13656:
	.align	2
.L13655:
	.word	.LANCHOR0+2500
	.word	.LANCHOR4+3960
	.fnend
	.size	mtp_function_set_alt, .-mtp_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ccid_function_set_alt, %function
ccid_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r1, #32
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r10, [r0, #84]
	ldr	r7, [r0, #100]
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L13658
	mov	r2, #4
	movw	r6, #:lower16:kmalloc_caches
	movt	r6, #:upper16:kmalloc_caches
	str	r2, [r5, #4]
	ldr	r0, [r6, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5]
	beq	.L13660
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L13660
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L13658:
	mvn	r3, #11
	str	r3, [r4, #112]
.L13685:
	movw	r0, #:lower16:.LC1011
	ldr	r1, .L13707
	movt	r0, #:upper16:.LC1011
	bl	printk
	ldr	r5, [r4, #112]
	b	.L13657
.L13660:
	cmn	r5, #4096
	str	r5, [r4, #112]
	bhi	.L13685
	movw	r3, #:lower16:ccid_notify_complete
	mov	r1, #32
	movt	r3, #:upper16:ccid_notify_complete
	str	r3, [r5, #28]
	ldr	r3, [r4, #112]
	str	r4, [r3, #32]
	ldr	r7, [r4, #108]
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L13687
	movw	r2, #522
	str	r2, [r5, #4]
	ldr	r0, [r6, #40]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5]
	beq	.L13664
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L13664
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	mvn	r5, #11
	ldr	r3, [r3, #12]
	blx	r3
	b	.L13662
.L13664:
	cmn	r5, #4096
	bhi	.L13662
	movw	r3, #:lower16:ccid_bulk_complete_out
	movw	r9, #:lower16:ccid_bulk_complete_in
	str	r4, [r5, #32]
	movt	r3, #:upper16:ccid_bulk_complete_out
	movt	r9, #:upper16:ccid_bulk_complete_in
	mov	r7, #4
	str	r3, [r5, #28]
	str	r5, [r4, #184]
.L13670:
	ldr	r8, [r4, #104]
	mov	r1, #32
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L13688
	movw	r3, #523
	mov	ip, #16
	mov	r1, #32
	movw	r2, #523
	str	r3, [r5, #4]
	ldr	r3, [r6, #40]
	subs	r0, r3, #0
	streq	ip, [r5]
	beq	.L13668
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L13668
	ldr	r3, [r8, #8]
	mov	r1, r5
	mov	r0, r8
	mvn	r5, #11
	ldr	r3, [r3, #12]
	blx	r3
	b	.L13666
.L13668:
	cmn	r5, #4096
	add	r8, r4, #92
	add	fp, r4, #192
	mov	r0, r8
	bhi	.L13666
	str	r9, [r5, #28]
	str	r4, [r5, #32]
	bl	_raw_spin_lock_irqsave
	mov	r3, r0
	mov	r2, fp
	ldr	r1, [r4, #196]
	add	r0, r5, #36
	str	r3, [sp, #4]
	bl	__list_add
	ldr	r3, [sp, #4]
	mov	r0, r8
	mov	r1, r3
	bl	_raw_spin_unlock_irqrestore
	subs	r7, r7, #1
	bne	.L13670
	mov	r1, r4
	ldr	r0, [r10]
	ldr	r2, [r4, #100]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13701
	ldr	r3, [r4, #100]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L13702
	ldr	r3, [r4, #100]
	mov	r1, r4
	str	r4, [r3]
	ldr	r0, [r10]
	ldr	r2, [r4, #104]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13703
	ldr	r3, [r4, #104]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L13704
	mov	r1, r4
	ldr	r0, [r10]
	ldr	r2, [r4, #108]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13705
	ldr	r3, [r4, #108]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	moveq	r3, #1
	streq	r3, [r4, #96]
	streq	r3, [r4, #200]
	bne	.L13706
.L13657:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13688:
	mvn	r5, #11
.L13666:
	movw	r0, #:lower16:.LC1044
	ldr	r1, .L13707
	movt	r0, #:upper16:.LC1044
	bl	printk
.L13669:
	ldr	r0, [r4, #184]
	cmp	r0, #0
	beq	.L13665
	ldr	r1, [r4, #108]
	bl	ccid_request_free.part.9
	b	.L13665
.L13687:
	mvn	r5, #11
.L13662:
	movw	r0, #:lower16:.LC1043
	ldr	r1, .L13707
	movt	r0, #:upper16:.LC1043
	bl	printk
.L13665:
	ldr	r0, [r4, #112]
	cmp	r0, #0
	beq	.L13657
	ldr	r1, [r4, #100]
	bl	ccid_request_free.part.9
	b	.L13657
.L13703:
	ldr	r2, [r4, #104]
	movw	r0, #:lower16:.LC1045
	mov	r3, r5
	movt	r0, #:upper16:.LC1045
	ldr	r1, .L13707
	str	r7, [r2, #28]
	ldr	r2, [r4, #104]
	ldr	r2, [r2, #4]
	bl	printk
.L13675:
.L13672:
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #100]
	mov	r2, #0
	str	r2, [r3]
.L13680:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #192]
	mov	r7, r0
	cmp	fp, r6
	beq	.L13681
	mov	r0, r6
	sub	r6, r6, #36
	bl	list_del
	mov	r1, r7
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #0
	beq	.L13669
	mov	r0, r6
	ldr	r1, [r4, #104]
	bl	ccid_request_free.part.9
	b	.L13680
.L13704:
	ldr	r2, [r4, #104]
	movw	r0, #:lower16:.LC1046
	mov	r3, r5
	ldr	r1, .L13707
	movt	r0, #:upper16:.LC1046
	ldr	r2, [r2, #4]
	bl	printk
	b	.L13675
.L13705:
	ldr	r2, [r4, #108]
	movw	r0, #:lower16:.LC1045
	mov	r3, r5
	movt	r0, #:upper16:.LC1045
	ldr	r1, .L13707
	str	r7, [r2, #28]
	ldr	r2, [r4, #108]
	ldr	r2, [r2, #4]
	bl	printk
.L13678:
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L13675
.L13706:
	ldr	r2, [r4, #108]
	movw	r0, #:lower16:.LC1046
	mov	r3, r5
	ldr	r1, .L13707
	movt	r0, #:upper16:.LC1046
	ldr	r2, [r2, #4]
	bl	printk
	b	.L13678
.L13681:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	b	.L13669
.L13701:
	ldr	r2, [r4, #100]
	movw	r0, #:lower16:.LC1045
	mov	r3, r5
	ldr	r1, .L13707
	movt	r0, #:upper16:.LC1045
	str	r7, [r2, #28]
	ldr	r2, [r4, #100]
	ldr	r2, [r2, #4]
	bl	printk
	b	.L13680
.L13702:
	ldr	r2, [r4, #100]
	movw	r0, #:lower16:.LC1046
	mov	r3, r5
	ldr	r1, .L13707
	movt	r0, #:upper16:.LC1046
	ldr	r2, [r2, #4]
	bl	printk
	b	.L13680
.L13708:
	.align	2
.L13707:
	.word	.LANCHOR5-392
	.fnend
	.size	ccid_function_set_alt, .-ccid_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_set_alt, %function
adb_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR4
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r3, #4002
	str	r6, [sp, #8]
	movt	ip, #:upper16:.LANCHOR4
	mov	r4, r0
	str	lr, [sp, #12]
	ldr	lr, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	ldrh	r0, [ip, r3]
	ldr	r6, [lr, #24]
	tst	r0, #4
	ldr	r0, [r6]
	bne	.L13721
.L13710:
	mov	r1, r4
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13722
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L13723
	mov	r1, r4
	ldr	r0, [r6]
	ldr	r2, [r4, #96]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13724
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L13725
	mov	r1, #1
	add	r0, r4, #128
	mov	r2, r1
	mov	r3, r5
	str	r1, [r4, #100]
	mov	r1, #3
	bl	__wake_up
.L13709:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13723:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC1041
	mov	r3, r5
	ldr	r2, [r4, #92]
	movt	r1, #:upper16:.LC1041
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L13709
.L13722:
	ldr	r2, [r4, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC1032
	movt	r1, #:upper16:.LC1032
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r4, #92]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L13709
.L13724:
	ldr	r2, [r4, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC1032
	movt	r1, #:upper16:.LC1032
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r4, #96]
.L13720:
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L13709
.L13725:
	movw	r1, #:lower16:.LC1041
	mov	r3, r5
	ldr	r0, [r6]
	movt	r1, #:upper16:.LC1041
	ldr	r2, [r4, #96]
	b	.L13720
.L13721:
	mov	r5, r2
	movw	r2, #:lower16:.LC1047
	mov	r3, r1
	movt	r2, #:upper16:.LC1047
	add	r1, r0, #32
	add	r0, ip, #3984
	str	r5, [sp]
	bl	__dynamic_dev_dbg
	ldr	r0, [r6]
	b	.L13710
	.fnend
	.size	adb_function_set_alt, .-adb_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_set_alt, %function
qdss_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	movt	r3, #:upper16:.LANCHOR4
	mov	r5, r1
	str	lr, [sp, #12]
	ldr	ip, [r0, #20]
	movw	r0, #4026
	ldrh	r0, [r3, r0]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [ip, #24]
	tst	r0, #4
	ldr	r6, [r3]
	bne	.L13746
.L13727:
	cmp	r2, #0
	bne	.L13738
	ldr	r3, [r6, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L13747
	ldrb	r3, [r4, #89]	@ zero_extendqisi2
	cmp	r3, r5
	beq	.L13748
	ldrb	r3, [r4, #88]	@ zero_extendqisi2
	cmp	r3, r5
	beq	.L13749
.L13733:
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	and	r3, r3, #7
	cmp	r3, #7
	moveq	r3, #1
	streq	r3, [r4, #92]
	beq	.L13736
	ldr	r3, [r4, #92]
	cmp	r3, #0
	bne	.L13736
.L13737:
	mov	r5, #0
.L13726:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13736:
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L13737
	add	r1, r4, #156
	ldr	r0, [r4, #196]
	mov	r5, #0
	bl	queue_work
	b	.L13726
.L13748:
	mov	r0, r6
	mov	r1, r4
	ldr	r2, [r4, #108]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L13734
	ldr	r3, [r4, #108]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L13728
	ldr	r3, [r4, #108]
	str	r4, [r3]
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r4, #192]
	b	.L13733
.L13749:
	mov	r1, r4
	mov	r0, r6
	ldr	r2, [r4, #104]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L13734
	ldr	r3, [r4, #104]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L13728
	ldr	r3, [r4, #104]
	mov	r0, r6
	mov	r1, r4
	str	r4, [r3]
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	ldr	r2, [r4, #100]
	orr	r3, r3, #2
	strb	r3, [r4, #192]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L13734
	ldr	r3, [r4, #100]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L13728
	ldr	r3, [r4, #100]
	str	r4, [r3]
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	orr	r3, r3, #4
	strb	r3, [r4, #192]
	b	.L13733
.L13746:
	movw	r1, #:lower16:.LC1048
	ldr	r0, .L13750
	str	r2, [sp, #4]
	movt	r1, #:upper16:.LC1048
	bl	__dynamic_pr_debug
	ldr	r2, [sp, #4]
	b	.L13727
.L13734:
	mvn	r5, #21
	b	.L13726
.L13747:
	movw	r0, #:lower16:.LC1049
	mvn	r5, #21
	movt	r0, #:upper16:.LC1049
	bl	printk
.L13728:
	movw	r0, #:lower16:.LC1050
	movt	r0, #:upper16:.LC1050
	bl	printk
	mov	r0, r4
	bl	qdss_eps_disable
	b	.L13726
.L13738:
	mov	r5, #0
	b	.L13728
.L13751:
	.align	2
.L13750:
	.word	.LANCHOR4+4008
	.fnend
	.size	qdss_set_alt, .-qdss_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_mux_set_alt, %function
rmnet_mux_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r1, #32
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #84]
	ldr	r6, [r0, #96]
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	bne	.L13773
.L13753:
	mvn	r3, #11
	mov	r5, r3
	str	r3, [r4, #100]
.L13752:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13773:
	mov	r2, #8
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	str	r2, [r5, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5]
	beq	.L13755
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5]
	bne	.L13755
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L13753
.L13755:
	cmn	r5, #4096
	str	r5, [r4, #100]
	bhi	.L13752
	movw	r3, #:lower16:rmnet_mux_notify_complete
	mov	r2, #8
	movt	r3, #:upper16:rmnet_mux_notify_complete
	mov	r1, r4
	str	r3, [r5, #28]
	ldr	r3, [r4, #100]
	str	r4, [r3, #32]
	ldr	r3, [r4, #100]
	str	r2, [r3, #4]
	ldr	r3, [r4, #92]
	str	r4, [r3]
	ldr	r0, [r7]
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13774
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L13775
	ldr	r3, [r4, #88]
	mov	r1, r4
	str	r4, [r3]
	ldr	r0, [r7]
	ldr	r2, [r4, #88]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13776
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L13777
	mov	r1, r4
	ldr	r0, [r7]
	ldr	r2, [r4, #96]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L13778
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L13779
	mov	r3, #1
	str	r5, [r4, #308]
	str	r3, [r4, #368]
	str	r5, [r4, #396]
	str	r5, [r4, #400]
	str	r5, [r4, #404]
	str	r5, [r4, #408]
	str	r5, [r4, #412]
	str	r5, [r4, #416]
	str	r5, [r4, #420]
	b	.L13752
.L13775:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC1030
	mov	r3, r5
	ldr	r2, [r4, #92]
	movt	r1, #:upper16:.LC1030
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L13752
.L13774:
	ldr	r2, [r4, #92]
	mov	r0, #0
	movw	r1, #:lower16:.LC1032
	movt	r1, #:upper16:.LC1032
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r0, [r7]
	ldr	r2, [r4, #92]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L13752
.L13777:
	ldr	r0, [r7]
	movw	r1, #:lower16:.LC1030
	mov	r3, r5
	ldr	r2, [r4, #88]
	movt	r1, #:upper16:.LC1030
.L13771:
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L13752
.L13776:
	ldr	r2, [r4, #88]
	mov	r0, #0
	movw	r1, #:lower16:.LC1032
	movt	r1, #:upper16:.LC1032
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r0, [r7]
	ldr	r2, [r4, #88]
	b	.L13771
.L13778:
	ldr	r2, [r4, #96]
	mov	r0, #0
	movw	r1, #:lower16:.LC1032
	movt	r1, #:upper16:.LC1032
	mov	r3, r5
	str	r0, [r2, #28]
	ldr	r0, [r7]
	ldr	r2, [r4, #96]
.L13772:
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L13752
.L13779:
	movw	r1, #:lower16:.LC1030
	mov	r3, r5
	ldr	r0, [r7]
	movt	r1, #:upper16:.LC1030
	ldr	r2, [r4, #96]
	b	.L13772
	.fnend
	.size	rmnet_mux_set_alt, .-rmnet_mux_set_alt
	.align	2
	.global	usb_add_function
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_add_function, %function
usb_add_function:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r3, #2754
	mov	r5, r0
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR4
	mov	r4, r1
	movt	r6, #:upper16:.LANCHOR4
	str	r8, [sp, #16]
	ldrh	r3, [r6, r3]
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	tst	r3, #4
	bne	.L13810
.L13781:
	ldr	r3, [r4, #40]
	cmp	r3, #0
	beq	.L13789
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L13789
	add	r8, r4, #72
	add	r2, r5, #36
	str	r5, [r4, #20]
	mov	r0, r8
	ldr	r1, [r5, #40]
	bl	__list_add
	ldr	r7, [r4, #32]
	cmp	r7, #0
	beq	.L13783
	mov	r1, r4
	mov	r0, r5
	blx	r7
	subs	r7, r0, #0
	blt	.L13811
.L13783:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L13784
.L13813:
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L13784
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L13784:
	tst	r3, #2
	bne	.L13785
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L13785
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
.L13785:
	tst	r3, #1
	bne	.L13786
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L13786
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L13786:
	cmp	r7, #0
	beq	.L13780
	movw	r3, #2778
	ldrh	r3, [r6, r3]
	tst	r3, #4
	bne	.L13812
.L13780:
	mov	r0, r7
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13789:
	movw	r3, #2778
	mvn	r7, #21
	ldrh	r3, [r6, r3]
	tst	r3, #4
	beq	.L13780
	b	.L13812
.L13811:
	mov	r0, r8
	bl	list_del
	mov	r3, #0
	str	r3, [r4, #20]
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L13784
	b	.L13813
.L13812:
	ldr	r1, [r5, #24]
	movw	r2, #:lower16:.LC960
	movt	r2, #:upper16:.LC960
	ldr	r0, .L13814
	ldr	r3, [r4]
	ldr	r1, [r1]
	stm	sp, {r4, r7}
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L13780
.L13810:
	ldr	r3, [r1]
	movw	r2, #:lower16:.LC959
	add	r0, r6, #2736
	ldr	ip, [r5]
	movt	r2, #:upper16:.LC959
	ldr	r1, [r5, #24]
	ldr	r1, [r1]
	stm	sp, {r4, ip}
	str	r5, [sp, #8]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L13781
.L13815:
	.align	2
.L13814:
	.word	.LANCHOR4+2760
	.fnend
	.size	usb_add_function, .-usb_add_function
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_bind_config, %function
conn_gadget_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC1051
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	movt	r0, #:upper16:.LC1051
	mov	r5, r1
	ldr	r1, .L13818
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC1052
	movt	r3, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC1052
	ldr	r4, [r3, #2484]
	bl	printk
	movw	r1, #:lower16:.LC1053
	movw	r2, #:lower16:conn_gadget_function_bind
	ldr	lr, [r5, #24]
	movt	r1, #:upper16:.LC1053
	movt	r2, #:upper16:conn_gadget_function_bind
	movw	ip, #:lower16:conn_gadget_function_unbind
	movw	r3, #:lower16:.LANCHOR6
	str	r1, [r4]
	movw	r1, #:lower16:conn_gadget_function_set_alt
	movt	ip, #:upper16:conn_gadget_function_unbind
	movt	r1, #:upper16:conn_gadget_function_set_alt
	movt	r3, #:upper16:.LANCHOR6
	str	r2, [r4, #32]
	movw	r2, #:lower16:conn_gadget_function_disable
	str	ip, [r4, #36]
	sub	ip, r3, #2752
	movt	r2, #:upper16:conn_gadget_function_disable
	mov	r0, r5
	str	ip, [r4, #16]
	str	r1, [r4, #40]
	sub	r1, r3, #2736
	sub	r3, r3, #2720
	str	r1, [r4, #8]
	mov	r1, r4
	str	r3, [r4, #12]
	str	r2, [r4, #48]
	str	lr, [r4, #84]
	pop	{r4, r5, r6, lr}
	b	usb_add_function
.L13819:
	.align	2
.L13818:
	.word	.LANCHOR5-368
	.fnend
	.size	conn_gadget_function_bind_config, .-conn_gadget_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_function_bind_config, %function
adb_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC1054
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC1054
	mov	r5, r1
	ldr	r4, [r3, #3596]
	bl	printk
	ldr	r3, .L13823
	movw	r2, #:lower16:.LC1055
	movw	lr, #:lower16:adb_function_bind
	movt	r2, #:upper16:.LC1055
	ldr	r0, [r5, #24]
	movw	ip, #:lower16:adb_function_unbind
	movt	lr, #:upper16:adb_function_bind
	movt	ip, #:upper16:adb_function_unbind
	str	r2, [r4]
	add	r1, r3, #8
	sub	r2, r3, #8
	str	r1, [r4, #8]
	mov	r1, r4
	str	r2, [r4, #16]
	str	r0, [r4, #84]
	ldr	r2, [r5, #24]
	mov	r0, r5
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	str	lr, [r4, #32]
	str	ip, [r4, #36]
	cmp	r2, #4
	movw	r2, #:lower16:adb_function_set_alt
	addhi	r3, r3, #24
	movt	r2, #:upper16:adb_function_set_alt
	strhi	r3, [r4, #12]
	movw	r3, #:lower16:adb_function_disable
	movt	r3, #:upper16:adb_function_disable
	str	r2, [r4, #40]
	str	r3, [r4, #48]
	pop	{r4, r5, r6, lr}
	b	usb_add_function
.L13824:
	.align	2
.L13823:
	.word	.LANCHOR6-2688
	.fnend
	.size	adb_function_bind_config, .-adb_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	accessory_function_bind_config, %function
accessory_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC1056
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC1056
	mov	r5, r1
	ldr	r4, [r3, #2488]
	bl	printk
	movw	r2, #:lower16:.LANCHOR6
	movt	r2, #:upper16:.LANCHOR6
	ldrb	r3, [r2, #-2640]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L13826
	ldr	r0, [r5, #24]
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13827
	add	r3, r3, #1
	movw	r1, #:lower16:.LANCHOR0
	uxtb	r3, r3
	movt	r1, #:upper16:.LANCHOR0
	strb	r3, [r2, #-2640]
	strb	r3, [r0, #48]
	strb	r3, [r1, #2292]
.L13826:
	ldr	r3, .L13830
	movw	r2, #:lower16:.LC1057
	movw	ip, #:lower16:acc_function_unbind
	movt	r2, #:upper16:.LC1057
	ldr	r0, [r5, #24]
	movt	ip, #:upper16:acc_function_unbind
	add	r1, r3, #24
	strd	r2, [r4]
	add	r2, r3, #8
	str	r1, [r4, #8]
	movw	r1, #:lower16:acc_function_bind
	str	r2, [r4, #16]
	movt	r1, #:upper16:acc_function_bind
	str	r0, [r4, #84]
	ldr	r2, [r5, #24]
	mov	r0, r5
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	str	r1, [r4, #32]
	mov	r1, r4
	str	ip, [r4, #36]
	cmp	r2, #4
	movw	r2, #:lower16:acc_function_set_alt
	addhi	r3, r3, #40
	movt	r2, #:upper16:acc_function_set_alt
	strhi	r3, [r4, #12]
	movw	r3, #:lower16:acc_function_disable
	movt	r3, #:upper16:acc_function_disable
	str	r2, [r4, #40]
	str	r3, [r4, #48]
	pop	{r4, r5, r6, lr}
	b	usb_add_function
.L13827:
	mvn	r0, #18
	pop	{r4, r5, r6, pc}
.L13831:
	.align	2
.L13830:
	.word	.LANCHOR6-2624
	.fnend
	.size	accessory_function_bind_config, .-accessory_function_bind_config
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mass_storage_function_bind_config, %function
mass_storage_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR6
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR6
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r2, [r3, #-2560]	@ zero_extendqisi2
	ldr	r0, [r0, #4]
	cmp	r2, #0
	ldr	r6, [r0, #96]
	bne	.L13833
	ldr	ip, [r1, #24]
	ldrb	r2, [ip, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L13837
	add	r2, r2, #1
	movw	r0, #:lower16:.LANCHOR0
	uxtb	r2, r2
	movt	r0, #:upper16:.LANCHOR0
	strb	r2, [r3, #-2560]
	strb	r2, [ip, #48]
	strb	r2, [r0, #4016]
.L13833:
	movw	r3, #:lower16:kmalloc_caches
	mov	r7, r1
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L13838
	mov	r2, #108
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	mvneq	r5, #11
	bne	.L13835
.L13832:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13838:
	mov	r4, #16
.L13835:
	movw	r2, #:lower16:.LC1058
	ldr	r1, .L13842
	movw	r5, #:lower16:fsg_bind
	movt	r2, #:upper16:.LC1058
	movw	lr, #:lower16:fsg_unbind
	movw	r3, #:lower16:fsg_setup
	movw	ip, #:lower16:fsg_set_alt
	str	r2, [r4]
	movw	r2, #:lower16:fsg_disable
	movt	r5, #:upper16:fsg_bind
	movt	lr, #:upper16:fsg_unbind
	movt	r3, #:upper16:fsg_setup
	str	r1, [r4, #4]
	movt	ip, #:upper16:fsg_set_alt
	movt	r2, #:upper16:fsg_disable
	str	r5, [r4, #32]
	mov	r0, r7
	mov	r1, r4
	str	lr, [r4, #36]
	str	ip, [r4, #40]
	str	r2, [r4, #48]
	str	r3, [r4, #52]
	str	r6, [r4, #88]
	bl	usb_add_function
	subs	r5, r0, #0
	bne	.L13841
	ldr	r3, [r4, #88]
	add	r2, r3, #336
	.syntax divided
@ 61 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #1
	bgt	.L13832
	movw	r4, #:lower16:.LANCHOR7
	movt	r4, #:upper16:.LANCHOR7
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L13832
	movw	r0, #:lower16:.LC1059
	mov	r1, #47
	movt	r0, #:upper16:.LC1059
	bl	warn_slowpath_null
	mov	r3, #1
	strb	r3, [r4]
	b	.L13832
.L13841:
	mov	r0, r4
	bl	kfree
	b	.L13832
.L13837:
	mvn	r5, #18
	b	.L13832
.L13843:
	.align	2
.L13842:
	.word	.LANCHOR6-2544
	.fnend
	.size	mass_storage_function_bind_config, .-mass_storage_function_bind_config
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_bind_config, %function
mtp_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	movw	r3, #:lower16:.LANCHOR1
	mov	r5, r0
	movw	r0, #:lower16:.LC1060
	movt	r3, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC1060
	mov	r6, r1
	ldr	r4, [r3, #2500]
	bl	printk
	movw	r2, #:lower16:.LANCHOR6
	movt	r2, #:upper16:.LANCHOR6
	ldrb	r3, [r2, #-2536]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L13845
	ldr	ip, [r5, #24]
	ldrb	r3, [ip, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13846
	add	r3, r3, #1
	movw	r0, #:lower16:.LANCHOR0
	uxtb	r3, r3
	movt	r0, #:upper16:.LANCHOR0
	strb	r3, [r2, #-2536]
	strb	r3, [ip, #48]
	strb	r3, [r0, #2472]
.L13845:
	ldr	r3, .L13852
	movw	r2, #:lower16:.LC1061
	cmp	r6, #0
	movt	r2, #:upper16:.LC1061
	ldr	r1, [r5, #24]
	str	r2, [r4]
	sub	r2, r3, #8
	str	r2, [r4, #4]
	str	r1, [r4, #84]
	beq	.L13847
	add	r2, r3, #20
	str	r2, [r4, #8]
	str	r3, [r4, #16]
	ldr	r2, [r5, #24]
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	cmp	r2, #4
	addhi	r3, r3, #40
	strhi	r3, [r4, #12]
	b	.L13849
.L13847:
	add	r2, r3, #72
	add	r1, r3, #92
	str	r1, [r4, #8]
	str	r2, [r4, #16]
	ldr	r2, [r5, #24]
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	cmp	r2, #4
	addhi	r3, r3, #112
	strhi	r3, [r4, #12]
.L13849:
	movw	r1, #:lower16:mtp_function_bind
	movw	ip, #:lower16:mtp_function_unbind
	movw	r2, #:lower16:mtp_function_set_alt
	movw	r3, #:lower16:mtp_function_disable
	movt	r1, #:upper16:mtp_function_bind
	movt	ip, #:upper16:mtp_function_unbind
	movt	r2, #:upper16:mtp_function_set_alt
	movt	r3, #:upper16:mtp_function_disable
	mov	r0, r5
	str	r1, [r4, #32]
	mov	r1, r4
	str	ip, [r4, #36]
	str	r2, [r4, #40]
	str	r3, [r4, #48]
	pop	{r4, r5, r6, lr}
	b	usb_add_function
.L13846:
	mvn	r0, #18
	pop	{r4, r5, r6, pc}
.L13853:
	.align	2
.L13852:
	.word	.LANCHOR6-2512
	.fnend
	.size	mtp_bind_config, .-mtp_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ptp_function_bind_config, %function
ptp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r1
	mov	r1, #1
	b	mtp_bind_config
	.fnend
	.size	ptp_function_bind_config, .-ptp_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mtp_function_bind_config, %function
mtp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r1
	mov	r1, #0
	b	mtp_bind_config
	.fnend
	.size	mtp_function_bind_config, .-mtp_function_bind_config
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	midi_function_bind_config, %function
midi_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0, #4]
	cmp	r6, #0
	beq	.L13857
	mvn	r3, #0
	str	r3, [r6]
	str	r3, [r6, #4]
.L13857:
	movw	r5, #:lower16:kmalloc_caches
	movt	r5, #:upper16:kmalloc_caches
	ldr	r0, [r5, #36]
	cmp	r0, #0
	beq	.L13865
	mov	r2, #344
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L13878
	ldr	r0, [r5, #24]
	cmp	r0, #0
	beq	.L13879
.L13876:
	mov	r2, #12
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L13880
.L13863:
	mov	r5, #0
	movw	r1, #:lower16:f_midi_in_tasklet
	mov	r2, r4
	movt	r1, #:upper16:f_midi_in_tasklet
	strd	r4, [r3]
	add	r0, r4, #300
	strb	r5, [r3, #8]
	str	r3, [r4, #232]
	ldr	r3, [r7, #24]
	ldr	r3, [r3]
	str	r3, [r4, #84]
	bl	tasklet_init
	mov	r0, r5
	mov	r1, #208
	bl	kstrdup
	mov	r3, #1
	mvn	ip, #0
	mov	r1, #1024
	mov	r2, #32
	str	r3, [r4, #320]
	str	r3, [r4, #324]
	str	ip, [r4, #328]
	str	r0, [r4, #332]
	mov	r0, r4
	str	r1, [r4, #336]
	str	r2, [r4, #340]
	bl	f_midi_register_card
	subs	r5, r0, #0
	blt	.L13861
	ldr	lr, .L13881
	movw	r3, #:lower16:.LC1062
	movw	ip, #:lower16:f_midi_bind
	movt	r3, #:upper16:.LC1062
	movw	r1, #:lower16:f_midi_unbind
	movw	r2, #:lower16:f_midi_set_alt
	movt	ip, #:upper16:f_midi_bind
	movt	r1, #:upper16:f_midi_unbind
	movt	r2, #:upper16:f_midi_set_alt
	stm	r4, {r3, lr}
	movw	r3, #:lower16:f_midi_disable
	mov	r0, r7
	movt	r3, #:upper16:f_midi_disable
	str	ip, [r4, #32]
	str	r1, [r4, #36]
	mov	r1, r4
	str	r2, [r4, #40]
	str	r3, [r4, #48]
	bl	usb_add_function
	subs	r5, r0, #0
	bne	.L13861
	cmp	r6, #0
	beq	.L13856
	ldr	r3, [r4, #100]
	ldr	r3, [r3]
	ldr	r3, [r3]
	str	r3, [r6]
	ldr	r3, [r4, #100]
	ldr	r3, [r3, #12]
	str	r3, [r6, #4]
	ldr	r3, [r4, #100]
	ldr	r3, [r3]
	ldr	r3, [r3]
	str	r3, [r6]
	ldr	r3, [r4, #100]
	ldr	r3, [r3, #12]
	str	r3, [r6, #4]
	b	.L13856
.L13861:
	ldr	r0, [r4, #232]
	bl	kfree
.L13860:
	mov	r0, r4
	bl	kfree
.L13856:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13865:
	ldr	r0, [r5, #24]
	mov	r4, #16
	cmp	r0, #0
	bne	.L13876
.L13879:
	mov	r3, #16
	b	.L13863
.L13880:
	mvn	r5, #11
	b	.L13860
.L13878:
	mvn	r5, #11
	b	.L13856
.L13882:
	.align	2
.L13881:
	.word	.LANCHOR6-2368
	.fnend
	.size	midi_function_bind_config, .-midi_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	qdss_function_bind_config, %function
qdss_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:.LANCHOR4
	movw	r3, #4050
	movt	r4, #:upper16:.LANCHOR4
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r4, r3]
	.pad #8
	sub	sp, sp, #8
	tst	r3, #4
	bne	.L13907
.L13884:
	movw	r3, #:lower16:.LANCHOR6
	movt	r3, #:upper16:.LANCHOR6
	ldrb	r2, [r3, #-2360]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L13885
	ldr	r1, [r6, #24]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L13888
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r1, #48]
	ldr	r1, [r6, #24]
	strb	r2, [r3, #-2924]
	strb	r2, [r3, #-2360]
	ldrb	r2, [r1, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L13888
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r3, #-2912]
	strb	r2, [r3, #-2352]
	strb	r2, [r1, #48]
.L13885:
	movw	r8, #:lower16:.LANCHOR0
	ldr	r0, .L13913
	movt	r8, #:upper16:.LANCHOR0
	mov	r7, r8
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r7, #268]!
	mov	r9, r0
	cmp	r5, r7
	sub	r5, r5, #4
	beq	.L13889
	movw	r10, #:lower16:.LC1064
	movt	r10, #:upper16:.LC1064
	b	.L13891
.L13908:
	ldr	r5, [r5, #4]
	cmp	r5, r7
	sub	r5, r5, #4
	beq	.L13889
.L13891:
	mov	r0, r10
	ldr	r1, [r5]
	bl	strcmp
	cmp	r0, #0
	bne	.L13908
	movw	r7, #:lower16:.LC1064
	sub	r4, r5, #112
	movt	r7, #:upper16:.LC1064
	str	r4, [r5, #20]
.L13897:
	mov	r1, r9
	ldr	r0, .L13913
	mov	r8, #0
	bl	_raw_spin_unlock_irqrestore
	ldr	r2, .L13913+4
	movw	r3, #:lower16:qdss_bind
	movw	lr, #:lower16:qdss_unbind
	movt	r3, #:upper16:qdss_bind
	movw	ip, #:lower16:qdss_set_alt
	ldr	r9, [r6, #24]
	movw	r1, #:lower16:qdss_disable
	mov	r0, r6
	str	r7, [r4]
	movt	lr, #:upper16:qdss_unbind
	movt	ip, #:upper16:qdss_set_alt
	add	r6, r2, #476
	movt	r1, #:upper16:qdss_disable
	add	r7, r4, #140
	str	r6, [r4, #4]
	add	r6, r4, #148
	str	r2, [r4, #8]
	str	r2, [r4, #16]
	movw	r2, #:lower16:usb_qdss_connect_work
	str	r3, [r4, #32]
	movw	r3, #:lower16:usb_qdss_disconnect_work
	movt	r2, #:upper16:usb_qdss_connect_work
	movt	r3, #:upper16:usb_qdss_disconnect_work
	str	lr, [r4, #36]
	mov	lr, #2560
	str	ip, [r4, #40]
	add	ip, r4, #176
	str	r1, [r4, #48]
	add	r1, r4, #160
	str	r9, [r4, #84]
	str	r7, [r4, #140]
	str	r7, [r4, #144]
	str	r6, [r4, #148]
	str	r6, [r4, #152]
	str	lr, [r4, #156]
	str	r1, [r4, #160]
	str	r1, [r4, #164]
	mov	r1, r4
	str	r2, [r4, #168]
	str	lr, [r4, #172]
	str	ip, [r4, #176]
	str	ip, [r4, #180]
	str	r3, [r4, #184]
	str	r8, [r4, #188]
	bl	usb_add_function
	subs	r6, r0, #0
	bne	.L13909
.L13883:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13889:
	movw	r3, #4074
	ldrh	r3, [r4, r3]
	tst	r3, #4
	bne	.L13910
.L13896:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L13898
	mov	r2, #200
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L13911
.L13892:
	mov	r1, r9
	ldr	r0, .L13913
	movw	r7, #:lower16:.LC1064
	bl	_raw_spin_unlock_irqrestore
	mov	r1, #0
	movt	r7, #:upper16:.LC1064
	mov	r3, r1
	mov	r0, r7
	mov	r2, #1
	str	r1, [sp]
	mov	r1, #10
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r4, #196]
	beq	.L13912
	ldr	r0, .L13913
	add	r5, r4, #112
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	ldr	r2, .L13913+8
	add	r0, r4, #116
	str	r7, [r4, #112]
	ldr	r1, [r8, #272]
	bl	__list_add
	b	.L13897
.L13898:
	mov	r4, #16
	b	.L13892
.L13907:
	movw	r1, #:lower16:.LC1063
	add	r0, r4, #4032
	movt	r1, #:upper16:.LC1063
	bl	__dynamic_pr_debug
	b	.L13884
.L13888:
	mvn	r6, #18
.L13887:
	movw	r0, #:lower16:.LC1068
	ldr	r1, .L13913+12
	movt	r0, #:upper16:.LC1068
	bl	printk
	b	.L13883
.L13910:
	movw	r1, #:lower16:.LC1065
	ldr	r0, .L13913+16
	movt	r1, #:upper16:.LC1065
	bl	__dynamic_pr_debug
	b	.L13896
.L13912:
	mov	r0, r4
	mvn	r6, #11
	bl	kfree
	b	.L13887
.L13909:
	movw	r0, #:lower16:.LC1067
	movt	r0, #:upper16:.LC1067
	bl	printk
	mov	r0, r4
	str	r8, [r5, #20]
	bl	kfree
	b	.L13887
.L13911:
	movw	r0, #:lower16:.LC1066
	mvn	r6, #11
	movt	r0, #:upper16:.LC1066
	bl	printk
	mov	r1, r9
	ldr	r0, .L13913
	bl	_raw_spin_unlock_irqrestore
	b	.L13887
.L13914:
	.align	2
.L13913:
	.word	.LANCHOR1+3524
	.word	.LANCHOR6-2812
	.word	.LANCHOR0+268
	.word	.LANCHOR5-332
	.word	.LANCHOR4+4056
	.fnend
	.size	qdss_function_bind_config, .-qdss_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_function_bind_config, %function
acm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r8, [r0, #4]
	.pad #4
	sub	sp, sp, #4
	ldr	r3, [r8]
	cmp	r3, #0
	ble	.L13925
	movw	r6, #:lower16:.LANCHOR6
	movw	r9, #:lower16:kmalloc_caches
	movt	r6, #:upper16:.LANCHOR6
	mov	r7, r1
	sub	r10, r6, #2256
	movt	r9, #:upper16:kmalloc_caches
	mov	r5, #0
	sub	r10, r10, #8
	b	.L13916
.L13934:
	mov	r2, #172
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L13931
.L13922:
	movw	r2, #:lower16:acm_connect
	movw	r0, #:lower16:acm_disconnect
	strb	fp, [r4, #146]
	movw	r3, #:lower16:acm_send_break
	movt	r2, #:upper16:acm_connect
	movt	r0, #:upper16:acm_disconnect
	movt	r3, #:upper16:acm_send_break
	mov	ip, #0
	movw	r1, #:lower16:.LC1069
	str	r2, [r4, #116]
	movt	r1, #:upper16:.LC1069
	mov	r2, fp
	str	r0, [r4, #120]
	mov	r0, #208
	str	r3, [r4, #124]
	str	ip, [r4, #148]
	bl	kasprintf
	cmp	r0, #0
	str	r0, [r4]
	beq	.L13932
	movw	r1, #:lower16:acm_bind
	movw	lr, #:lower16:acm_unbind
	str	r10, [r4, #4]
	movw	ip, #:lower16:acm_set_alt
	movw	r3, #:lower16:acm_setup
	movw	r2, #:lower16:acm_disable
	movt	r1, #:upper16:acm_bind
	movt	lr, #:upper16:acm_unbind
	movt	ip, #:upper16:acm_set_alt
	movt	r3, #:upper16:acm_setup
	movt	r2, #:upper16:acm_disable
	str	r1, [r4, #32]
	mov	r0, r7
	mov	r1, r4
	str	lr, [r4, #36]
	str	ip, [r4, #40]
	strd	r2, [r4, #48]
	bl	usb_add_function
	subs	fp, r0, #0
	bne	.L13933
	ldr	r3, [r8]
	add	r5, r5, #1
	cmp	r3, r5
	ble	.L13925
.L13916:
	ldrb	r3, [r6, #-2328]	@ zero_extendqisi2
	uxtb	fp, r5
	cmp	r3, #0
	bne	.L13918
	ldr	r2, [r7, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13921
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r7, #24]
	strb	r3, [r6, #-2328]
	strb	r3, [r6, #-2288]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13921
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r7, #24]
	strb	r3, [r6, #-2320]
	strb	r3, [r6, #-2276]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L13921
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r6, #-2312]
	strb	r3, [r6, #-2265]
	strb	r3, [r2, #48]
.L13918:
	ldr	r0, [r9, #8]
	cmp	r0, #0
	bne	.L13934
	mov	r4, #16
	b	.L13922
.L13925:
	mov	fp, #0
.L13915:
	mov	r0, fp
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13921:
	mvn	fp, #18
.L13920:
	movw	r0, #:lower16:.LC1070
	mov	r2, r5
	ldr	r1, .L13935
	movt	r0, #:upper16:.LC1070
	bl	printk
	b	.L13915
.L13932:
	mov	r0, r4
	mvn	fp, #11
	bl	kfree
	b	.L13920
.L13931:
	mvn	fp, #11
	b	.L13920
.L13933:
	mov	r0, r4
	bl	kfree
	b	.L13920
.L13936:
	.align	2
.L13935:
	.word	.LANCHOR5-304
	.fnend
	.size	acm_function_bind_config, .-acm_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_function_bind_config, %function
audio_source_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mvn	ip, #0
	mov	r3, #0
	strd	r6, [sp, #8]
	mov	r2, r3
	mov	r7, r1
	str	r8, [sp, #16]
	mov	r1, r3
	str	lr, [sp, #20]
	ldr	r5, [r0, #4]
	.pad #16
	sub	sp, sp, #16
	add	lr, sp, #8
	mov	r0, ip
	str	ip, [r5]
	str	ip, [r5, #4]
	str	lr, [sp]
	bl	snd_card_create
	subs	r4, r0, #0
	beq	.L13945
.L13937:
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13945:
	ldr	r3, [r7, #24]
	add	r6, sp, #12
	movw	r1, #:lower16:.LC1071
	ldr	lr, [sp, #8]
	mov	r2, r4
	movt	r1, #:upper16:.LC1071
	ldr	ip, [r3]
	mov	r3, #1
	mov	r0, lr
	add	ip, ip, #32
	str	ip, [lr, #496]
	stm	sp, {r4, r6}
	movw	r6, #:lower16:.LANCHOR6
	bl	snd_pcm_new
	subs	r4, r0, #0
	movtne	r6, #:upper16:.LANCHOR6
	bne	.L13941
	ldr	r3, [sp, #12]
	movt	r6, #:upper16:.LANCHOR6
	movw	r1, #:lower16:.LC1072
	sub	r8, r6, #2256
	movt	r1, #:upper16:.LC1072
	mov	r2, #80
	add	r0, r3, #88
	str	r4, [r3, #16]
	str	r8, [r3, #272]
	str	r3, [r6, #-2168]
	bl	strlcpy
	mov	r1, r4
	sub	r2, r6, #2096
	ldr	r0, [sp, #12]
	bl	snd_pcm_set_ops
	mov	ip, #65536
	mov	r3, r4
	ldr	r0, [sp, #12]
	mov	r2, r4
	mov	r1, #2
	str	ip, [sp]
	bl	snd_pcm_lib_preallocate_pages_for_all
	ldr	r0, [sp, #8]
	movw	r1, #:lower16:.LC1073
	mov	r2, #16
	movt	r1, #:upper16:.LC1073
	add	r0, r0, #20
	bl	strlcpy
	ldr	r0, [sp, #8]
	mov	r2, #32
	add	r1, r0, #20
	add	r0, r0, #36
	bl	strlcpy
	ldr	r0, [sp, #8]
	movw	r1, #:lower16:.LC1074
	mov	r2, #80
	movt	r1, #:upper16:.LC1074
	add	r0, r0, #68
	bl	strlcpy
	ldr	r0, [sp, #8]
	bl	snd_card_register
	subs	r4, r0, #0
	beq	.L13946
.L13939:
.L13940:
.L13941:
	ldr	r0, [r6, #-2172]
	bl	snd_card_free
	b	.L13937
.L13946:
	mov	r1, r8
	mov	r0, r7
	bl	usb_add_function
	subs	r4, r0, #0
	bne	.L13941
	ldr	r3, [sp, #12]
	ldr	r2, [r3]
	ldr	r2, [r2]
	str	r2, [r5]
	ldr	r2, [r3, #12]
	ldr	r3, [sp, #8]
	str	r2, [r5, #4]
	str	r3, [r6, #-2172]
	b	.L13937
	.fnend
	.size	audio_source_function_bind_config, .-audio_source_function_bind_config
	.align	2
	.global	usb_function_deactivate
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_function_deactivate, %function
usb_function_deactivate:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #20]
	ldr	r4, [r3, #24]
	add	r5, r4, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r1, [r4, #52]
	mov	r7, r0
	cmp	r1, #0
	bne	.L13948
	ldr	r0, [r4]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L13950
	blx	r3
	subs	r6, r0, #0
	bne	.L13949
	ldr	r1, [r4, #52]
.L13948:
	add	r1, r1, #1
	mov	r6, #0
	str	r1, [r4, #52]
.L13949:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13950:
	mvn	r6, #94
	b	.L13949
	.fnend
	.size	usb_function_deactivate, .-usb_function_deactivate
	.align	2
	.global	usb_function_activate
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_function_activate, %function
usb_function_activate:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r4, [r3, #24]
	add	r5, r4, #60
	mov	r0, r5
	bl	_raw_spin_lock
	ldr	r3, [r4, #52]
	cmp	r3, #0
	beq	.L13959
	sub	r3, r3, #1
	cmp	r3, #0
	str	r3, [r4, #52]
	bne	.L13960
	ldr	r0, [r4]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L13956
	mov	r1, #1
	blx	r3
	mov	r4, r0
	b	.L13954
.L13960:
	mov	r4, #0
.L13954:
	mov	r0, r5
	bl	_raw_spin_unlock
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13959:
	movw	r0, #:lower16:.LC585
	movw	r1, #315
	movt	r0, #:upper16:.LC585
	mvn	r4, #21
	bl	warn_slowpath_null
	b	.L13954
.L13956:
	mvn	r4, #94
	b	.L13954
	.fnend
	.size	usb_function_activate, .-usb_function_activate
	.align	2
	.global	usb_interface_id
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_interface_id, %function
usb_interface_id:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L13963
	add	ip, r3, #12
	add	r2, r3, #1
	str	r1, [r0, ip, lsl #2]
	strb	r2, [r0, #44]
.L13961:
	mov	r0, r3
	bx	lr
.L13963:
	mvn	r3, #18
	b	.L13961
	.fnend
	.size	usb_interface_id, .-usb_interface_id
	.align	2
	.global	usb_add_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_add_config, %function
usb_add_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L14128
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r2
	mov	r5, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	ldrb	r3, [r1, #20]	@ zero_extendqisi2
	ldrh	r2, [ip, #2]
	tst	r2, #4
	bne	.L14112
.L13965:
	cmp	r3, #0
	cmpne	r6, #0
	beq	.L13996
	mov	r2, r5
	ldr	r1, [r2, #36]!
	cmp	r2, r1
	sub	r0, r1, #28
	bne	.L13969
	b	.L13967
.L14113:
	ldr	r1, [r0, #28]
	cmp	r2, r1
	sub	r0, r1, #28
	beq	.L13967
.L13969:
	ldrb	r1, [r1, #-8]	@ zero_extendqisi2
	cmp	r1, r3
	bne	.L14113
	mvn	r6, #15
.L13966:
	ldr	r0, .L14128+4
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L14114
.L13964:
	mov	r0, r6
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13996:
	mvn	r6, #21
	b	.L13966
.L13967:
	add	r8, r4, #28
	str	r5, [r4, #24]
	ldr	r1, [r5, #40]
	mov	r0, r8
	mov	r7, #0
	bl	__list_add
	add	r3, r4, #36
	mov	r1, #64
	add	r0, r4, #48
	str	r3, [r4, #36]
	str	r3, [r4, #40]
	strb	r7, [r4, #44]
	bl	__memzero
	mov	r0, r4
	blx	r6
	subs	r6, r0, #0
	blt	.L14115
	ldr	r7, .L14128+8
	ldr	r1, [r5]
	ldrh	r3, [r7, #-14]
	tst	r3, #4
	bne	.L14116
.L13973:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L13977
	ldr	r2, .L14128+12
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	bne	.L14117
.L13977:
	ldr	r3, [r4, #52]
	cmp	r3, #0
	beq	.L13978
	ldr	r2, .L14128+12
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	bne	.L14118
.L13978:
	ldr	r3, [r4, #56]
	cmp	r3, #0
	beq	.L13979
	ldr	r2, .L14128+12
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	bne	.L14119
.L13979:
	ldr	r3, [r4, #60]
	cmp	r3, #0
	beq	.L13980
	ldr	r2, .L14128+12
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	bne	.L14120
.L13980:
	ldr	r3, [r4, #64]
	cmp	r3, #0
	beq	.L13981
	ldr	r2, .L14128+12
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	bne	.L14121
.L13981:
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L13982
	ldr	r2, .L14128+12
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	bne	.L14122
.L13982:
	ldr	r3, [r4, #72]
	cmp	r3, #0
	beq	.L13983
	ldr	r2, .L14128+12
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	bne	.L14123
.L13984:
	ldr	r3, [r4, #80]
	cmp	r3, #0
	beq	.L13985
	ldr	r2, .L14128+12
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	bne	.L14124
.L13986:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L13987
	ldr	r2, .L14128+12
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	bne	.L14125
.L13988:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L13989
	ldr	r2, .L14128+12
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	bne	.L14126
.L13990:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L13991
	ldr	r2, .L14128+12
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	bne	.L14127
.L13992:
	ldr	r3, [r1, #8]!
	cmp	r1, r3
	sub	r3, r3, #12
	beq	.L13995
.L13971:
	mov	r0, #0
.L13994:
	ldr	r2, [r3, #12]
	str	r0, [r3]
	cmp	r1, r2
	sub	r3, r2, #12
	bne	.L13994
.L13995:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	cmp	r6, #0
	str	r2, [r3, #3772]
	beq	.L13964
	b	.L13966
.L14123:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC1081
	add	r1, r1, #32
	movt	r2, #:upper16:.LC1081
	sub	r0, r7, #8
	mov	r3, #6
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
.L13983:
	ldr	r3, [r4, #76]
	cmp	r3, #0
	beq	.L13984
	ldr	r2, .L14128+12
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	beq	.L13984
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC1081
	add	r1, r1, #32
	movt	r2, #:upper16:.LC1081
	sub	r0, r7, #8
	mov	r3, #7
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
	b	.L13984
.L14112:
	sub	r0, ip, #16
	ldr	ip, [r1]
	movw	r2, #:lower16:.LC1079
	ldr	r1, [r5]
	movt	r2, #:upper16:.LC1079
	str	ip, [sp]
	add	r1, r1, #32
	str	r4, [sp, #4]
	bl	__dynamic_dev_dbg
	ldrb	r3, [r4, #20]	@ zero_extendqisi2
	b	.L13965
.L14114:
	ldrb	ip, [r4, #20]	@ zero_extendqisi2
	str	r6, [sp, #4]
	movw	r2, #:lower16:.LC1082
	ldr	r1, [r5]
	movt	r2, #:upper16:.LC1082
	sub	r0, r0, #32
	ldr	r3, [r4]
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L13964
.L14115:
	mov	r0, r8
	bl	list_del
	str	r7, [r4, #24]
	ldr	r1, [r5]
	ldr	r3, [r1, #8]!
	cmp	r1, r3
	sub	r3, r3, #12
	bne	.L13971
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r7, [r3, #3772]
	b	.L13966
.L14127:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC1081
	add	r1, r1, #32
	movt	r2, #:upper16:.LC1081
	sub	r0, r7, #8
	mov	r3, #14
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
.L13991:
	ldr	r3, [r4, #108]
	cmp	r3, #0
	beq	.L13992
	ldr	r2, .L14128+12
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	beq	.L13992
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC1081
	add	r1, r1, #32
	sub	r0, r7, #8
	movt	r2, #:upper16:.LC1081
	mov	r3, #15
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
	b	.L13992
.L14124:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC1081
	add	r1, r1, #32
	movt	r2, #:upper16:.LC1081
	sub	r0, r7, #8
	mov	r3, #8
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
.L13985:
	ldr	r3, [r4, #84]
	cmp	r3, #0
	beq	.L13986
	ldr	r2, .L14128+12
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	beq	.L13986
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC1081
	add	r1, r1, #32
	movt	r2, #:upper16:.LC1081
	sub	r0, r7, #8
	mov	r3, #9
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
	b	.L13986
.L14126:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC1081
	add	r1, r1, #32
	movt	r2, #:upper16:.LC1081
	sub	r0, r7, #8
	mov	r3, #12
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
.L13989:
	ldr	r3, [r4, #100]
	cmp	r3, #0
	beq	.L13990
	ldr	r2, .L14128+12
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	beq	.L13990
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC1081
	add	r1, r1, #32
	movt	r2, #:upper16:.LC1081
	sub	r0, r7, #8
	mov	r3, #13
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
	b	.L13990
.L14125:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC1081
	add	r1, r1, #32
	movt	r2, #:upper16:.LC1081
	sub	r0, r7, #8
	mov	r3, #10
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
.L13987:
	ldr	r3, [r4, #92]
	cmp	r3, #0
	beq	.L13988
	ldr	r2, .L14128+12
	ldrh	r2, [r2, #-6]
	tst	r2, #4
	beq	.L13988
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC1081
	add	r1, r1, #32
	movt	r2, #:upper16:.LC1081
	sub	r0, r7, #8
	mov	r3, #11
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
	b	.L13988
.L14116:
	ldrb	ip, [r4, #45]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC917
	movw	lr, #:lower16:.LC1075
	movt	r2, #:upper16:.LC917
	movt	lr, #:upper16:.LC1075
	ldrb	r3, [r4, #20]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1076
	add	r8, r1, #32
	movt	r0, #:upper16:.LC1076
	tst	ip, #1
	moveq	lr, r2
	tst	ip, #2
	moveq	r0, r2
	tst	ip, #4
	moveq	ip, r2
	beq	.L13976
	ldr	r1, [r1, #20]
	movw	r2, #:lower16:.LC1077
	movw	ip, #:lower16:.LC1078
	movt	r2, #:upper16:.LC1077
	movt	ip, #:upper16:.LC1078
	cmp	r1, #2
	movhi	ip, r2
.L13976:
	movw	r2, #:lower16:.LC1080
	mov	r1, r8
	stm	sp, {r4, lr}
	movt	r2, #:upper16:.LC1080
	str	r0, [sp, #8]
	ldr	r0, .L14128+16
	str	ip, [sp, #12]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
	b	.L13973
.L14117:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC1081
	add	r1, r1, #32
	movt	r2, #:upper16:.LC1081
	sub	r0, r7, #8
	mov	r3, #0
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
	b	.L13977
.L14118:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC1081
	add	r1, r1, #32
	movt	r2, #:upper16:.LC1081
	sub	r0, r7, #8
	mov	r3, #1
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
	b	.L13978
.L14119:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC1081
	add	r1, r1, #32
	movt	r2, #:upper16:.LC1081
	sub	r0, r7, #8
	mov	r3, #2
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
	b	.L13979
.L14120:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC1081
	add	r1, r1, #32
	movt	r2, #:upper16:.LC1081
	sub	r0, r7, #8
	mov	r3, #3
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
	b	.L13980
.L14121:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC1081
	add	r1, r1, #32
	movt	r2, #:upper16:.LC1081
	sub	r0, r7, #8
	mov	r3, #4
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
	b	.L13981
.L14122:
	str	r3, [sp, #4]
	ldr	ip, [r3]
	movw	r2, #:lower16:.LC1081
	add	r1, r1, #32
	movt	r2, #:upper16:.LC1081
	sub	r0, r7, #8
	mov	r3, #5
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldr	r1, [r5]
	b	.L13982
.L14129:
	.align	2
.L14128:
	.word	.LANCHOR4+4096
	.word	.LANCHOR8-4000
	.word	.LANCHOR8-4048
	.word	.LANCHOR8-4032
	.word	.LANCHOR8-4080
	.fnend
	.size	usb_add_config, .-usb_add_config
	.section	.text.unlikely
	.align	2
	.global	usb_remove_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_remove_config, %function
usb_remove_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	mov	r4, r1
	movw	r0, #:lower16:.LC1083
	ldr	r1, .L14143
	mov	r3, r4
	movt	r0, #:upper16:.LC1083
	ldr	r2, [r5, #12]
	add	r6, r5, #60
	bl	printk
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r4, #24]
	mov	r8, r0
	cmp	r7, #0
	beq	.L14142
	ldr	r3, [r5, #12]
	cmp	r3, r4
	bne	.L14135
	mov	r0, r5
	bl	reset_config
	ldr	r3, [r4, #24]
	cmp	r3, #0
	beq	.L14133
.L14135:
	add	r0, r4, #28
	bl	list_del
.L14133:
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r1, r4
	mov	r0, r5
	pop	{r4, r5, r6, r7, r8, lr}
	b	unbind_config
.L14142:
	movw	r0, #:lower16:.LC585
	mov	r1, #896
	movt	r0, #:upper16:.LC585
	bl	warn_slowpath_null
	mov	r0, r6
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r7
	pop	{r4, r5, r6, r7, r8, pc}
.L14144:
	.align	2
.L14143:
	.word	.LANCHOR5-276
	.fnend
	.size	usb_remove_config, .-usb_remove_config
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_disable, %function
android_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #8]
	ldr	r1, [r0, #20]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r0, #20]
	bne	.L14145
	mov	r4, r0
	ldr	r0, [r5]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L14147
	blx	r3
	ldr	r0, [r5]
.L14147:
	ldr	r0, [r0, #4]
	ldr	r1, [r5, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r3, [r4, #500]!
	cmp	r4, r3
	sub	r3, r3, #120
	bne	.L14155
.L14145:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14155:
	mov	r6, r3
.L14149:
	mov	r1, r6
	mov	r0, r5
	bl	usb_remove_config
	ldr	r3, [r6, #120]
	cmp	r4, r3
	sub	r6, r3, #120
	beq	.L14145
	b	.L14149
	.fnend
	.size	android_disable, .-android_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_release, %function
adb_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L14177
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r0, .L14177+4
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	___ratelimit
	cmp	r0, #0
	beq	.L14157
	movw	r0, #:lower16:.LC1084
	movt	r0, #:upper16:.LC1084
	bl	printk
.L14157:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #3596]
	ldrb	r2, [r3, #160]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L14175
.L14158:
	add	r2, r3, #116
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14175:
	movw	r3, #:lower16:.LANCHOR6
	movt	r3, #:upper16:.LANCHOR6
	ldr	r6, [r3, #-2012]
	ldr	r5, [r3, #-1996]
	cmp	r5, #0
	beq	.L14176
.L14159:
	add	r7, r5, #24
	mov	r8, #0
	mov	r0, r7
	bl	mutex_lock
	ldrb	r3, [r6, #1]	@ zero_extendqisi2
	strb	r8, [r6]
	cmp	r3, r8
	bne	.L14164
	str	r3, [r6, #4]
.L14163:
	mov	r0, r7
	bl	mutex_unlock
.L14162:
	ldr	r3, [r4, #3596]
	mov	r2, #1
	strb	r2, [r3, #161]
	b	.L14158
.L14164:
	mov	r0, r5
	bl	android_disable
	str	r8, [r6, #4]
	b	.L14163
.L14176:
	ldr	r5, [r6, #4]
	cmp	r5, #0
	bne	.L14159
	movw	r0, #:lower16:.LC1085
	ldr	r1, .L14177+8
	movt	r0, #:upper16:.LC1085
	bl	printk
	ldrb	r3, [r6, #1]	@ zero_extendqisi2
	strb	r5, [r6]
	cmp	r3, #0
	moveq	r5, r3
	str	r5, [r6, #4]
	b	.L14162
.L14178:
	.align	2
.L14177:
	.word	.LANCHOR5-256
	.word	.LANCHOR6-2040
	.word	.LANCHOR5-244
	.fnend
	.size	adb_release, .-adb_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_data_clear, %function
ffs_data_clear:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	mov	r0, #0
	add	r5, r4, #128
	strd	r6, [sp, #8]
	mov	r1, r5
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_test_and_clear_bit
	cmp	r0, #0
	bne	.L14209
.L14181:
	ldr	r3, [r4]
	cmp	r3, #0
	bne	.L14210
	ldr	r7, [r4, #208]
	cmp	r7, #0
	beq	.L14188
	ldrh	r6, [r4, #180]
	cmp	r6, #0
	beq	.L14194
	ldr	r2, [r7]
	cmp	r2, #1
	bne	.L14190
	ldr	r1, [r7, #24]
	add	r2, r7, #24
	cmp	r1, r2
	bne	.L14190
	mov	r8, r3
	mov	r5, r7
.L14191:
	ldr	r0, [r5, #44]
	cmp	r0, #0
	beq	.L14192
	bl	d_delete
	ldr	r0, [r5, #44]
	bl	dput
	str	r8, [r5, #44]
.L14192:
	subs	r6, r6, #1
	add	r5, r5, #56
	beq	.L14194
	ldr	r3, [r5]
	cmp	r3, #1
	bne	.L14190
	ldr	r2, [r5, #24]
	add	r3, r5, #24
	cmp	r2, r3
	beq	.L14191
.L14190:
	.syntax divided
@ 1521 "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1522, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L14194:
	mov	r0, r7
	bl	kfree
.L14188:
	ldr	r0, [r4, #144]
	bl	kfree
	ldr	r0, [r4, #184]
	bl	kfree
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	ldr	r0, [r4, #188]
	ldrd	r4, [sp]
	add	sp, sp, #24
	b	kfree
.L14209:
	movw	r3, #:lower16:.LANCHOR6
	movt	r3, #:upper16:.LANCHOR6
	ldr	r7, [r3, #-1960]
	ldr	r8, [r3, #-1944]
	cmp	r8, #0
	beq	.L14211
.L14182:
	add	r0, r8, #24
	bl	mutex_lock
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L14197
.L14183:
	mov	r6, #0
	strb	r6, [r7]
	str	r6, [r7, #4]
	str	r6, [r7, #8]
	ldr	r3, [r4]
	cmp	r3, r6
	beq	.L14212
	ldr	r0, [r3, #4]
	ldr	r1, [r4, #28]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r3, r4
	str	r6, [r4, #28]
	str	r6, [r3], #84
	.syntax divided
@ 99 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	bne	.L14196
	mov	r0, r4
	bl	ffs_data_put.part.74
.L14196:
	mov	r1, r5
	mov	r0, #1
	bl	_clear_bit
.L14185:
	cmp	r8, #0
	beq	.L14181
	add	r0, r8, #24
	bl	mutex_unlock
	b	.L14181
.L14197:
	mov	r0, r8
	bl	android_disable
	b	.L14183
.L14211:
	ldr	r8, [r7, #8]
	cmp	r8, #0
	bne	.L14182
	movw	r0, #:lower16:.LC1086
	ldr	r1, .L14213
	movt	r0, #:upper16:.LC1086
	bl	printk
	b	.L14183
.L14210:
	.syntax divided
@ 1394 "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1394, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L14212:
	movw	r0, #:lower16:.LC33
	movw	r1, #1475
	movt	r0, #:upper16:.LC33
	bl	warn_slowpath_null
	b	.L14185
.L14214:
	.align	2
.L14213:
	.word	.LANCHOR5-224
	.fnend
	.size	ffs_data_clear, .-ffs_data_clear
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_data_put.part.74, %function
ffs_data_put.part.74:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC1087
	ldr	r1, .L14219
	movt	r0, #:upper16:.LC1087
	bl	printk
	mov	r0, r4
	bl	ffs_data_clear
	ldr	r2, [r4, #120]
	add	r3, r4, #120
	cmp	r2, r3
	bne	.L14216
	ldr	r2, [r4, #40]
	add	r3, r4, #40
	cmp	r2, r3
	beq	.L14217
.L14216:
	.syntax divided
@ 1345 "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1346, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L14217:
	mov	r0, r4
	pop	{r4, lr}
	b	kfree
.L14220:
	.align	2
.L14219:
	.word	.LANCHOR5-196
	.fnend
	.size	ffs_data_put.part.74, .-ffs_data_put.part.74
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_fs_kill_sb, %function
ffs_fs_kill_sb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	bl	kill_litter_super
	ldr	r0, [r4, #616]
	cmp	r0, #0
	beq	.L14221
	add	r3, r0, #84
	.syntax divided
@ 99 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	beq	.L14226
.L14221:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L14226:
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	ffs_data_put.part.74
	.fnend
	.size	ffs_fs_kill_sb, .-ffs_fs_kill_sb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_free, %function
ffs_func_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	mov	r6, #0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #8]
	ldr	r4, [r0, #12]
	add	r0, r3, #24
	ldrh	r5, [r3, #180]
	bl	_raw_spin_lock_irqsave
	add	r4, r4, #28
	mov	r8, r0
.L14229:
	ldr	r3, [r4, #-28]
	cmp	r3, #0
	mov	r0, r3
	beq	.L14228
	ldr	r1, [r4, #-24]
	cmp	r1, #0
	beq	.L14228
	ldr	r3, [r3, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L14228:
	subs	r5, r5, #1
	add	r4, r4, #28
	str	r6, [r4, #-56]
	str	r6, [r4, #-52]
	bne	.L14229
	ldr	r0, [r7, #8]
	mov	r1, r8
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r7, #8]
	add	r3, r0, #84
	.syntax divided
@ 99 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	bne	.L14230
	bl	ffs_data_put.part.74
.L14230:
	ldr	r0, [r7, #12]
	bl	kfree
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	kfree
	.fnend
	.size	ffs_func_free, .-ffs_func_free
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_bind_config, %function
ffs_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r0, #4]
	ldr	r0, [r3, #28]
	ldr	r7, [r1, #24]
	ldr	r5, [r2, #4]
	cmp	r0, #0
	beq	.L14242
	mov	r2, #120
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	mvneq	r5, #11
	bne	.L14240
.L14239:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14242:
	mov	r4, #16
.L14240:
	movw	r3, #:lower16:.LC1088
	movw	r1, #:lower16:ffs_func_bind
	movt	r3, #:upper16:.LC1088
	movw	r2, #:lower16:ffs_func_set_alt
	movt	r1, #:upper16:ffs_func_bind
	movt	r2, #:upper16:ffs_func_set_alt
	str	r3, [r4, #36]
	movw	r3, #:lower16:ffs_func_unbind
	ldr	ip, [r5, #188]
	movt	r3, #:upper16:ffs_func_unbind
	movw	r0, #:lower16:ffs_func_disable
	str	r6, [r4]
	str	r1, [r4, #68]
	movw	r1, #:lower16:ffs_func_setup
	movt	r0, #:upper16:ffs_func_disable
	str	r2, [r4, #76]
	movw	r2, #:lower16:ffs_func_resume
	movt	r1, #:upper16:ffs_func_setup
	str	r3, [r4, #72]
	movw	r3, #:lower16:ffs_func_suspend
	movt	r2, #:upper16:ffs_func_resume
	movt	r3, #:upper16:ffs_func_suspend
	str	ip, [r4, #40]
	str	r0, [r4, #84]
	str	r1, [r4, #88]
	str	r3, [r4, #92]
	add	r3, r5, #84
	str	r2, [r4, #96]
	ldr	r2, [r7]
	stmib	r4, {r2, r5}
	.syntax divided
@ 45 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, r6
	add	r1, r4, #36
	bl	usb_add_function
	subs	r5, r0, #0
	beq	.L14239
	mov	r0, r4
	bl	ffs_func_free
	b	.L14239
	.fnend
	.size	ffs_function_bind_config, .-ffs_function_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_func_unbind, %function
ffs_func_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	sub	r6, r1, #36
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r1, #-28]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r4, #132]
	cmp	r3, r6
	beq	.L14261
.L14249:
	add	r5, r4, #116
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	mov	r7, r0
	add	lr, r4, #100
	ldrh	r2, [r4, #104]
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r4, #96]
	cmp	r2, #0
	beq	.L14258
	add	r1, r4, #99
	mov	r3, lr
	add	r2, r1, r2
.L14257:
	ldrb	ip, [r1, #1]!	@ zero_extendqisi2
	mov	r0, r3
	sub	r8, ip, #5
	cmp	r8, #1
	strbls	ip, [r0], #1
	movls	r3, r0
	cmp	r2, r1
	bne	.L14257
	sub	r3, r3, lr
	add	r2, r3, #1
	uxth	r3, r3
	uxth	r2, r2
.L14255:
	add	r3, r4, r3
	strh	r2, [r4, #104]	@ movhi
	mov	r0, #1
	mov	r1, #3
	mov	r2, r0
	strb	r0, [r3, #100]
	mov	r0, r5
	bl	__wake_up_locked
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	ffs_func_free
.L14261:
	ldr	r5, [r1, #-24]
	add	r0, r4, #24
	mov	r10, r1
	ldrh	fp, [r4, #180]
	mov	r9, #1
	mov	r8, #0
	ldr	r7, [r4, #208]
	bl	_raw_spin_lock_irqsave
	add	r5, r5, #28
	str	r0, [sp, #4]
	b	.L14250
.L14262:
	ldr	r3, [r3, #8]
	add	r5, r5, #28
	add	r7, r7, #56
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #-56]
	subs	fp, fp, #1
	str	r8, [r3]
	str	r8, [r7, #-16]
	beq	.L14253
.L14250:
	str	r9, [r7, #32]
	ldr	r3, [r5, #-28]
	subs	r0, r3, #0
	bne	.L14262
	subs	fp, fp, #1
	add	r5, r5, #28
	str	r3, [r7, #40]
	add	r7, r7, #56
	bne	.L14250
.L14253:
	ldr	r0, [r10, #-28]
	ldr	r1, [sp, #4]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore
	mov	r3, #0
	str	r3, [r4, #132]
	b	.L14249
.L14258:
	mov	r3, r2
	mov	r2, #1
	b	.L14255
	.fnend
	.size	ffs_func_unbind, .-ffs_func_unbind
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_epfile_release, %function
ffs_epfile_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r2, #1
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r3, [r0, #328]
	ldr	r4, [r3, #36]
	str	r2, [r3, #32]
	add	r3, r4, #88
	.syntax divided
@ 99 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r5, [r3]
	sub	r5, r5, #1
	strex	r2, r5, [r3]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r5, #0
	beq	.L14267
.L14264:
	add	r3, r4, #84
	.syntax divided
@ 99 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	bne	.L14265
	mov	r0, r4
	bl	ffs_data_put.part.74
.L14265:
	mov	r3, #0
	mov	r0, r3
	str	r3, [r6, #124]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14267:
	mov	r3, #3
	mov	r0, r4
	str	r3, [r4, #92]
	bl	ffs_data_clear
	str	r5, [r4, #92]
	str	r5, [r4, #96]
	strh	r5, [r4, #104]	@ movhi
	str	r5, [r4, #128]
	str	r5, [r4, #144]
	str	r5, [r4, #148]
	str	r5, [r4, #152]
	str	r5, [r4, #156]
	str	r5, [r4, #160]
	str	r5, [r4, #164]
	str	r5, [r4, #168]
	str	r5, [r4, #172]
	str	r5, [r4, #176]
	strh	r5, [r4, #180]	@ movhi
	str	r5, [r4, #184]
	str	r5, [r4, #188]
	str	r5, [r4, #208]
	b	.L14264
	.fnend
	.size	ffs_epfile_release, .-ffs_epfile_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_release, %function
ffs_ep0_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #124]
	add	r3, r4, #88
	.syntax divided
@ 99 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r5, [r3]
	sub	r5, r5, #1
	strex	r2, r5, [r3]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r5, #0
	beq	.L14272
.L14269:
	add	r3, r4, #84
	.syntax divided
@ 99 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #0
	bne	.L14270
	mov	r0, r4
	bl	ffs_data_put.part.74
.L14270:
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14272:
	mov	r3, #3
	mov	r0, r4
	str	r3, [r4, #92]
	bl	ffs_data_clear
	str	r5, [r4, #92]
	str	r5, [r4, #96]
	strh	r5, [r4, #104]	@ movhi
	str	r5, [r4, #128]
	str	r5, [r4, #144]
	str	r5, [r4, #148]
	str	r5, [r4, #152]
	str	r5, [r4, #156]
	str	r5, [r4, #160]
	str	r5, [r4, #164]
	str	r5, [r4, #168]
	str	r5, [r4, #172]
	str	r5, [r4, #176]
	strh	r5, [r4, #180]	@ movhi
	str	r5, [r4, #184]
	str	r5, [r4, #188]
	str	r5, [r4, #208]
	b	.L14269
	.fnend
	.size	ffs_ep0_release, .-ffs_ep0_release
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_enable, %function
ffs_function_enable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, #1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #4]
	ldr	r4, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, #0
	beq	.L14282
.L14273:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14282:
	ldr	r5, [r4, #8]
	ldr	r1, [r4, #20]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r4, #20]
	bne	.L14273
	ldr	r0, [r5]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L14275
	blx	r3
	ldr	r0, [r5]
.L14275:
	ldr	r0, [r0, #4]
	ldr	r1, [r5, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r3, [r4, #500]!
	cmp	r4, r3
	sub	r3, r3, #120
	beq	.L14273
	mov	r6, r3
.L14276:
	mov	r1, r6
	mov	r0, r5
	bl	usb_remove_config
	ldr	r3, [r6, #120]
	cmp	r4, r3
	sub	r6, r3, #120
	beq	.L14273
	b	.L14276
	.fnend
	.size	ffs_function_enable, .-ffs_function_enable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_android_function_enable, %function
adb_android_function_enable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, #1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #4]
	ldr	r4, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, #0
	beq	.L14292
.L14283:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14292:
	ldr	r5, [r4, #8]
	ldr	r1, [r4, #20]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r4, #20]
	bne	.L14283
	ldr	r0, [r5]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L14285
	blx	r3
	ldr	r0, [r5]
.L14285:
	ldr	r0, [r0, #4]
	ldr	r1, [r5, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r3, [r4, #500]!
	cmp	r4, r3
	sub	r3, r3, #120
	beq	.L14283
	mov	r6, r3
.L14286:
	mov	r1, r6
	mov	r0, r5
	bl	usb_remove_config
	ldr	r3, [r6, #120]
	cmp	r4, r3
	sub	r6, r3, #120
	beq	.L14283
	b	.L14286
	.fnend
	.size	adb_android_function_enable, .-adb_android_function_enable
	.align	2
	.global	usb_string_id
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_string_id, %function
usb_string_id:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	mov	r2, r0
	cmp	r3, #253
	bhi	.L14295
	add	r3, r3, #1
	uxtb	r3, r3
	mov	r0, r3
	strb	r3, [r2, #48]
	bx	lr
.L14295:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	usb_string_id, .-usb_string_id
	.align	2
	.global	usb_string_ids_tab
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_string_ids_tab, %function
usb_string_ids_tab:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #4]
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	cmp	r2, #0
	mov	r2, r3
	beq	.L14297
	cmp	r3, #253
	bgt	.L14298
	add	r1, r1, #8
.L14299:
	ldr	ip, [r1, #4]
	add	r3, r3, #1
	add	r1, r1, #8
	uxtb	r2, r3
	cmp	ip, #0
	strb	r2, [r1, #-16]
	beq	.L14297
	cmp	r3, #254
	bne	.L14299
.L14298:
	mvn	r3, #18
	mov	r0, r3
	bx	lr
.L14297:
	mov	r3, #0
	strb	r2, [r0, #48]
	mov	r0, r3
	bx	lr
	.fnend
	.size	usb_string_ids_tab, .-usb_string_ids_tab
	.align	2
	.global	usb_string_ids_n
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_string_ids_n, %function
usb_string_ids_n:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #254
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	bhi	.L14312
	add	r1, r3, r1
	cmp	r1, #254
	bhi	.L14312
	add	r3, r3, #1
	strb	r1, [r0, #48]
	mov	r0, r3
	bx	lr
.L14312:
	mvn	r3, #18
	mov	r0, r3
	bx	lr
	.fnend
	.size	usb_string_ids_n, .-usb_string_ids_n
	.align	2
	.global	usb_composite_probe
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_composite_probe, %function
usb_composite_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	beq	.L14318
	ldr	r3, [r0, #12]
	cmp	r1, #0
	cmpne	r3, #0
	beq	.L14318
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	lr, [r0]
	cmp	lr, #0
	beq	.L14326
.L14315:
	ldr	r3, [r0, #4]
	movw	r2, #:lower16:.LANCHOR0
	movw	r4, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR0
	movt	r4, #:upper16:.LANCHOR1
	mov	ip, r1
	movw	r1, #:lower16:composite_bind
	str	lr, [r2, #356]
	movt	r1, #:upper16:composite_bind
	cmp	r3, #0
	mov	r3, r0
	streq	lr, [r0, #4]
	ldr	lr, [r3]
	add	r0, r2, #356
	str	r3, [r4, #2476]
	str	ip, [r4, #3776]
	str	lr, [r2, #384]
	ldr	r3, [r3, #20]
	str	r3, [r2, #360]
	bl	usb_gadget_probe_driver
	cmp	r0, #0
	movne	r3, #0
	strne	r3, [r4, #2476]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L14326:
	movw	r3, #:lower16:.LC1089
	movt	r3, #:upper16:.LC1089
	mov	lr, r3
	str	r3, [r0]
	b	.L14315
.L14318:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	usb_composite_probe, .-usb_composite_probe
	.section	.devinit.text,"ax",%progbits
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_probe, %function
android_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r8, #:lower16:__stack_chk_guard
	ldr	r2, [r0, #292]
	movt	r8, #:upper16:__stack_chk_guard
	.pad #36
	sub	sp, sp, #36
	ldr	r3, [r8]
	mov	r6, r0
	cmp	r2, #0
	str	r3, [sp, #28]
	beq	.L14328
	ldr	r0, .L14392
	add	r4, r6, #8
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L14329
	movw	r2, #:lower16:.LC1090
	sub	r0, r0, #24
	movt	r2, #:upper16:.LC1090
	mov	r1, r4
	bl	__dynamic_dev_dbg
.L14329:
	mov	r0, r4
	mov	r2, #208
	mov	r1, #52
	bl	devm_kzalloc
	subs	r7, r0, #0
	bne	.L14330
	movw	r0, #:lower16:.LC1091
	ldr	r1, .L14392+4
	mvn	r5, #11
	movt	r0, #:upper16:.LC1091
	bl	printk
	b	.L14327
.L14330:
	movw	r1, #:lower16:.LC1092
	mov	r3, #1
	ldr	r0, [r6, #292]
	movt	r1, #:upper16:.LC1092
	add	r2, r7, #4
	bl	of_property_read_u32_array
	movw	r1, #:lower16:.LC1093
	mov	r2, #0
	ldr	r0, [r6, #292]
	movt	r1, #:upper16:.LC1093
	mov	r5, r2
	bl	of_find_property
	subs	r0, r0, r5
	movw	r1, #:lower16:.LC1094
	movne	r0, #1
	movt	r1, #:upper16:.LC1094
	mov	r2, r5
	strb	r0, [r7, #9]
	ldr	r0, [r6, #292]
	bl	of_find_property
	subs	r0, r0, r5
	movw	r1, #:lower16:.LC1095
	movne	r0, #1
	mov	r3, r5
	mov	r2, r5
	movt	r1, #:upper16:.LC1095
	strb	r0, [r7, #11]
	ldr	r0, [r6, #292]
	str	r5, [sp]
	bl	of_property_read_string_helper
	cmp	r0, #3
	mov	r9, r0
	ble	.L14363
	movw	r0, #:lower16:.LC1096
	ldr	r1, .L14392+4
	mvn	r5, #21
	movt	r0, #:upper16:.LC1096
	bl	printk
	b	.L14327
.L14363:
	ldr	fp, .L14392+4
	movw	r10, #:lower16:.LC1095
	movt	r10, #:upper16:.LC1095
.L14332:
	cmp	r5, r9
	bge	.L14390
	mov	ip, #0
	mov	r1, r10
	str	r5, [sp]
	mov	r3, #1
	add	r2, sp, #12
	ldr	r0, [r6, #292]
	str	ip, [sp, #12]
	bl	of_property_read_string_helper
	ldr	r1, [sp, #12]
	cmp	r1, #0
	bne	.L14333
.L14334:
	add	r5, r5, #1
	b	.L14332
.L14333:
	mov	r3, #10
	add	r4, r7, #12
	mov	r2, r3
	mla	r4, r3, r5, r4
	mov	r0, r4
	bl	strlcpy
	ldr	r0, .L14392+8
	ldrh	r3, [r0]
	tst	r3, #4
	beq	.L14334
	movw	r1, #:lower16:.LC1097
	mov	r3, r4
	movt	r1, #:upper16:.LC1097
	mov	r2, fp
	sub	r0, r0, #18
	bl	__dynamic_pr_debug
	b	.L14334
.L14390:
	str	r9, [r7, #44]
	b	.L14336
.L14328:
	ldr	r7, [r0, #88]
.L14336:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r0, [r4, #3756]
	mov	r9, r4
	cmp	r0, #0
	bne	.L14337
	movw	r1, #:lower16:.LC1098
	ldr	r2, .L14392+12
	movt	r1, #:upper16:.LC1098
	bl	__class_create
	cmn	r0, #4096
	str	r0, [r4, #3756]
	movhi	r5, r0
	bhi	.L14327
.L14337:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #40]
	cmp	r0, #0
	beq	.L14364
	mov	r2, #520
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	bne	.L14338
	ldr	r2, .L14392+4
	movw	r0, #:lower16:.LC1099
	mvn	r5, #11
	movt	r0, #:upper16:.LC1099
	mov	r1, r2
	bl	printk
	b	.L14339
.L14364:
	mov	r4, #16
.L14338:
	ldr	r1, .L14392+16
	movw	r3, #:lower16:android_work
	movw	r0, #:lower16:usb_gadget_connect_work
	movt	r3, #:upper16:android_work
	ldr	r10, [r6]
	mov	ip, #0
	add	lr, r4, #500
	mov	r5, #1
	mov	r2, #2560
	movt	r0, #:upper16:usb_gadget_connect_work
	str	r1, [r4, #4]
	add	r1, r4, #180
	str	r3, [r4, #188]
	add	r3, r4, #452
	str	r10, [r4]
	add	r10, r4, #512
	str	r5, [r4, #20]
	str	r2, [r4, #176]
	str	r1, [r4, #180]
	str	r1, [r4, #184]
	mov	r1, ip
	str	r2, [r4, #448]
	mov	r2, ip
	str	r3, [r4, #452]
	str	r3, [r4, #456]
	str	r0, [r4, #460]
	add	r0, r4, #464
	str	lr, [r4, #500]
	str	lr, [r4, #504]
	str	ip, [r4, #508]
	bl	init_timer_key
	movw	r3, #:lower16:delayed_work_timer_fn
	add	r0, r4, #448
	ldr	r2, .L14392+12
	movt	r3, #:upper16:delayed_work_timer_fn
	movw	r1, #:lower16:.LC1100
	movt	r1, #:upper16:.LC1100
	str	r3, [r4, #480]
	str	r0, [r4, #484]
	add	r0, r4, #24
	bl	__mutex_init
	mov	r0, r10
	ldr	r2, .L14392+20
	str	r7, [r4, #44]
	ldr	r1, [r9, #3236]
	bl	__list_add
	ldr	r3, [r9, #3588]
	cmp	r7, #0
	mov	r2, #0
	ldrbne	ip, [r7, #8]	@ zero_extendqisi2
	moveq	ip, r7
	mov	r1, #512
	mov	r0, r6
	add	r3, r3, r5
	str	r3, [r9, #3588]
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	mov	r5, r3
	strb	ip, [r3, #440]
	bl	platform_get_resource
	cmp	r0, #0
	beq	.L14341
	ldm	r0, {r1, r2}
	add	r6, r6, #8
	mov	r0, r6
	add	r2, r2, #1
	sub	r2, r2, r1
	bl	devm_ioremap
	cmp	r0, #0
	str	r0, [r9, #3660]
	bne	.L14343
	movw	r1, #:lower16:.LC1101
	mov	r0, r6
	movt	r1, #:upper16:.LC1101
	mvn	r5, #11
	bl	dev_err
	b	.L14344
.L14341:
	ldr	r0, .L14392+24
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L14343
	movw	r2, #:lower16:.LC1102
	add	r1, r6, #8
	sub	r0, r0, #24
	movt	r2, #:upper16:.LC1102
	bl	__dynamic_dev_dbg
.L14343:
	add	r6, sp, #17
	movw	r2, #:lower16:.LC1103
	ldrb	r3, [r5, #440]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC1103
	mov	r1, #11
	mov	r0, r6
	bl	snprintf
	mov	r3, #0
	str	r6, [sp]
	ldr	r0, [r9, #3756]
	mov	r2, r3
	mov	r1, r3
	bl	device_create
	cmn	r0, #4096
	mov	r5, r0
	str	r0, [r4, #12]
	bls	.L14346
	cmp	r0, #0
	beq	.L14348
	b	.L14350
.L14346:
	mov	r1, r4
	ldr	r6, .L14392+28
	bl	dev_set_drvdata
.L14349:
	ldr	r1, [r6], #4
	ldr	r0, [r4, #12]
	cmp	r1, #0
	beq	.L14348
	bl	device_create_file
	subs	r5, r0, #0
	beq	.L14349
	ldr	r3, [r4, #12]
	ldr	r0, [r9, #3756]
	ldr	r1, [r3, #288]
	bl	device_destroy
.L14350:
	ldr	r2, .L14392+4
	movw	r0, #:lower16:.LC1104
	movt	r0, #:upper16:.LC1104
	mov	r1, r2
	bl	printk
	b	.L14344
.L14348:
	ldr	r2, [r4, #12]
	cmn	r2, #4096
	bls	.L14353
	movw	r0, #:lower16:.LC1105
	ldr	r1, .L14392+32
	movt	r0, #:upper16:.LC1105
	bl	printk
	ldr	r5, [r4, #12]
	cmp	r5, #0
	beq	.L14354
	b	.L14355
.L14353:
	mov	r0, r2
	ldr	r1, .L14392+36
	bl	device_create_file
	subs	r5, r0, #0
	beq	.L14354
	movw	r0, #:lower16:.LC1106
	ldr	r1, .L14392+32
	movt	r0, #:upper16:.LC1106
	bl	printk
.L14355:
	movw	r0, #:lower16:.LC1107
	ldr	r1, .L14392+4
	movt	r0, #:upper16:.LC1107
	bl	printk
	b	.L14327
.L14354:
	movw	r1, #:lower16:android_bind
	ldr	r0, .L14392+40
	movt	r1, #:upper16:android_bind
	bl	usb_composite_probe
	subs	r5, r0, #0
	beq	.L14356
	ldr	r2, .L14392+4
	movw	r0, #:lower16:.LC1108
	movt	r0, #:upper16:.LC1108
	mov	r1, r2
	bl	printk
	b	.L14357
.L14356:
	cmp	r7, #0
	beq	.L14358
	ldr	r3, [r7, #4]
	cmp	r3, #0
	beq	.L14358
	mvn	r2, #0
	mov	r1, #1
	add	r0, r4, #60
	bl	pm_qos_add_request
.L14358:
	movw	r1, #:lower16:.LC1109
	mov	r2, #5
	movt	r1, #:upper16:.LC1109
	add	r0, r4, #52
	bl	strlcpy
	ldr	r0, .L14392+44
	bl	misc_register
	subs	r5, r0, #0
	beq	.L14359
	movw	r0, #:lower16:.LC1110
	mov	r1, r5
	movt	r0, #:upper16:.LC1110
	bl	printk
	movw	r0, #:lower16:.LC1111
	ldr	r1, .L14392+4
	movt	r0, #:upper16:.LC1111
	bl	printk
	b	.L14357
.L14359:
	movw	r1, #:lower16:.LC1112
	ldr	r2, .L14392+12
	movt	r1, #:upper16:.LC1112
	ldr	r0, .L14392+48
	bl	__init_waitqueue_head
	b	.L14327
.L14357:
	ldr	r6, .L14392+28
.L14360:
	ldr	r1, [r6], #4
	ldr	r0, [r4, #12]
	cmp	r1, #0
	beq	.L14391
	bl	device_remove_file
	b	.L14360
.L14391:
	ldr	r1, [r0, #288]
	ldr	r0, [r9, #3756]
	bl	device_destroy
.L14344:
	mov	r0, r10
	bl	list_del
	ldr	r3, [r9, #3588]
	mov	r0, r4
	sub	r3, r3, #1
	str	r3, [r9, #3588]
	bl	kfree
.L14339:
	ldr	r3, .L14392+20
	ldr	r2, [r9, #3232]
	cmp	r2, r3
	bne	.L14327
	ldr	r0, [r9, #3756]
	bl	class_destroy
	mov	r3, #0
	str	r3, [r9, #3756]
.L14327:
	ldr	r2, [sp, #28]
	mov	r0, r5
	ldr	r3, [r8]
	cmp	r2, r3
	beq	.L14362
	bl	__stack_chk_fail
.L14362:
	add	sp, sp, #36
	@ sp needed
	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
.L14393:
	.align	2
.L14392:
	.word	.LANCHOR8-3984
	.word	.LANCHOR5-180
	.word	.LANCHOR8-3966
	.word	.LANCHOR1+3992
	.word	.LANCHOR6-1912
	.word	.LANCHOR1+3232
	.word	.LANCHOR8-3936
	.word	.LANCHOR0+1264
	.word	.LANCHOR5-164
	.word	.LANCHOR6-1808
	.word	.LANCHOR0+1340
	.word	.LANCHOR6-1792
	.word	.LANCHOR1+2204
	.fnend
	.size	android_probe, .-android_probe
	.text
	.align	2
	.global	usb_composite_unregister
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_composite_unregister, %function
usb_composite_unregister:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2476]
	cmp	r3, r0
	beq	.L14396
	bx	lr
.L14396:
	ldr	r0, .L14397
	b	usb_gadget_unregister_driver
.L14398:
	.align	2
.L14397:
	.word	.LANCHOR0+356
	.fnend
	.size	usb_composite_unregister, .-usb_composite_unregister
	.align	2
	.global	usb_composite_setup_continue
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_composite_setup_continue, %function
usb_composite_setup_continue:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	ldr	r6, .L14424
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	ldr	r8, [r0, #4]
	ldrh	r3, [r6, #-14]
	tst	r3, #4
	bne	.L14420
.L14400:
	add	r5, r4, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #56]
	mov	r7, r0
	cmp	r3, #0
	bne	.L14401
	cmp	r4, #0
	bne	.L14421
.L14403:
	mov	r1, r7
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L14401:
	sub	r3, r3, #1
	cmp	r3, #0
	str	r3, [r4, #56]
	bne	.L14403
	ldr	r3, .L14424+4
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L14422
.L14405:
	mov	r3, #0
	mov	r2, #32
	mov	r1, r8
	str	r3, [r8, #4]
	ldr	r3, [r4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bge	.L14403
	ldr	ip, .L14424+8
	ldrh	r3, [ip, #-14]
	tst	r3, #4
	bne	.L14423
.L14406:
	ldr	ip, [r8, #4]
	mov	r3, #0
	ldr	lr, [r8, #48]
	str	r3, [r8, #44]
	cmp	lr, ip
	beq	.L14403
	movw	r0, #:lower16:.LANCHOR2
	movt	r0, #:upper16:.LANCHOR2
	ldrh	r2, [r0, #42]
	tst	r2, #4
	beq	.L14403
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC6
	add	r0, r0, #24
	movt	r2, #:upper16:.LC6
	ldr	r1, [r1, #4]
	ldr	r1, [r1]
	ldr	r1, [r1]
	str	lr, [sp]
	str	ip, [sp, #4]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14403
.L14421:
	movw	r2, #:lower16:.LC1113
	movw	r0, #:lower16:.LC585
	ldr	r3, .L14424+12
	movt	r2, #:upper16:.LC1113
	movt	r0, #:upper16:.LC585
	movw	r1, #1845
	bl	warn_slowpath_fmt
	b	.L14403
.L14420:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC21
	sub	r0, r6, #32
	movt	r2, #:upper16:.LC21
	ldr	r3, .L14424+12
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14400
.L14422:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC1114
	sub	r0, r6, #8
	movt	r2, #:upper16:.LC1114
	ldr	r3, .L14424+12
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14405
.L14423:
	ldr	r1, [r4]
	movw	r2, #:lower16:.LC991
	mov	r3, r0
	movt	r2, #:upper16:.LC991
	sub	r0, ip, #32
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14406
.L14425:
	.align	2
.L14424:
	.word	.LANCHOR8-3904
	.word	.LANCHOR8-3888
	.word	.LANCHOR8-3856
	.word	.LANCHOR5-136
	.fnend
	.size	usb_composite_setup_continue, .-usb_composite_setup_continue
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	handle_exception, %function
handle_exception:
	.fnstart
	@ args = 0, pretend = 0, frame = 128
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	add	r7, r0, #44
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	movw	r10, #:lower16:.LC1115
	str	lr, [sp, #32]
	.pad #132
	sub	sp, sp, #132
	movt	r10, #:upper16:.LC1115
	mov	r3, sp
	bic	r9, r3, #8128
	bic	r9, r9, #63
.L14433:
	movw	r8, #1284
	b	.L14428
.L14500:
	cmp	r5, #10
	bne	.L14499
.L14428:
	ldr	r4, [r9, #12]
	ldr	r0, [r4, #940]
	add	r0, r0, r8
	bl	_raw_spin_lock_irqsave
	mov	fp, r0
	mov	r2, sp
	add	r1, r4, #944
	mov	r0, r4
	bl	dequeue_signal
	mov	r5, r0
	ldr	r0, [r4, #940]
	mov	r1, fp
	add	r0, r0, r8
	bl	_raw_spin_unlock_irqrestore
	cmp	r5, #0
	bne	.L14500
	ldr	r3, [r6, #8]
	cmp	r3, #0
	beq	.L14435
	mov	r8, r5
.L14434:
	ldr	r4, [r6, #68]
	add	r4, r4, r8
	add	r8, r8, #32
	ldr	r3, [r4, #20]
	cmp	r3, #0
	beq	.L14436
	ldr	r3, [r6, #8]
	ldr	r1, [r4, #16]
	ldr	r0, [r3, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L14436:
	ldr	r3, [r4, #28]
	cmp	r3, #0
	beq	.L14437
	ldr	r3, [r6, #8]
	ldr	r1, [r4, #24]
	ldr	r0, [r3, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L14437:
	cmp	r8, #128
	bne	.L14434
	b	.L14439
.L14501:
	bl	sleep_thread
	cmp	r0, #0
	bne	.L14426
.L14439:
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #68]
	mov	r0, r7
	ldr	r4, [r3, #20]
	ldr	r1, [r3, #28]
	ldr	r2, [r3, #52]
	ldr	lr, [r3, #60]
	ldr	ip, [r3, #84]
	add	r4, r4, r1
	ldr	r1, [r3, #92]
	add	r4, r4, r2
	ldr	r2, [r3, #116]
	add	r4, r4, lr
	ldr	r3, [r3, #124]
	add	r4, r4, ip
	add	r4, r4, r1
	add	r4, r4, r2
	add	r4, r4, r3
	bl	_raw_spin_unlock_irq
	cmp	r4, #0
	mov	r0, r6
	bne	.L14501
	ldr	r3, [r6, #8]
	ldrb	r2, [r3, #94]	@ zero_extendqisi2
	tst	r2, #1
	beq	.L14441
	ldr	r0, [r3, #100]
	ldr	r1, [r0, #8]
	ldr	r1, [r1, #36]
	cmp	r1, #0
	beq	.L14441
	blx	r1
	ldr	r3, [r6, #8]
	ldrb	r2, [r3, #94]	@ zero_extendqisi2
.L14441:
	tst	r2, #2
	beq	.L14435
	ldr	r0, [r3, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L14435
	blx	r3
.L14435:
	mov	r0, r7
	mov	r8, #0
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #68]
	str	r8, [r3, #4]
	ldr	r3, [r6, #68]
	str	r8, [r3, #36]
	ldr	r3, [r6, #68]
	str	r8, [r3, #68]
	ldr	r3, [r6, #68]
	str	r8, [r3, #100]
	ldr	r3, [r6, #68]
	ldr	r9, [r6, #112]
	str	r3, [r6, #60]
	cmp	r9, #1
	str	r3, [r6, #64]
	beq	.L14443
	ldr	r3, [r6, #92]
	ldr	r4, [r6, #116]
	cmp	r3, r8
	movne	r1, r8
	movne	r0, r1
	beq	.L14452
.L14444:
	ldr	r3, [r6, #100]
	add	r5, r5, #1
	add	r3, r3, r1
	add	r1, r1, #392
	ldrb	r2, [r3, #24]	@ zero_extendqisi2
	str	r0, [r3, #28]
	str	r0, [r3, #32]
	str	r0, [r3, #36]
	bic	r2, r2, #80
	strb	r2, [r3, #24]
	ldr	r3, [r6, #92]
	cmp	r3, r5
	bhi	.L14444
.L14452:
	mov	r3, #0
	sub	r9, r9, #2
	mov	r0, r7
	str	r3, [r6, #112]
	bl	_raw_spin_unlock_irq
	cmp	r9, #5
	ldrls	pc, [pc, r9, asl #2]
	b	.L14426
.L14447:
	.word	.L14449
	.word	.L14426
	.word	.L14448
	.word	.L14426
	.word	.L14446
	.word	.L14446
.L14449:
	ldr	r1, [r6, #8]
	cmp	r1, #0
	beq	.L14453
	add	r1, r1, #96
	mov	r0, #0
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L14455
	ldr	r3, [r6, #8]
	mov	r1, #0
	ldr	r0, [r3, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
.L14455:
	ldr	r3, [r6, #56]
	cmp	r3, r4
	bne	.L14426
	ldr	r0, [r6, #4]
	cmp	r0, #0
	bne	.L14498
	ldrd	r0, [r6, #48]
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	ldr	r2, [r6, #48]
	cmp	r0, #0
	cmnne	r0, #108
	mov	r3, r0
	str	r6, [r2]
	beq	.L14426
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC89
	ldr	r2, [r6, #48]
	movt	r1, #:upper16:.LC89
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_warn
.L14426:
	add	sp, sp, #132
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14499:
	ldr	r3, [r6, #112]
	cmp	r3, #5
	bgt	.L14429
	ldr	r3, .L14504
	ldrh	r3, [r3]
	tst	r3, #4
	bne	.L14502
.L14429:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r6, #112]
	mov	r4, r0
	cmp	r3, #6
	bgt	.L14431
	ldr	r3, [r6, #56]
	mov	r1, #6
	ldr	r2, [r6, #168]
	str	r1, [r6, #112]
	str	r3, [r6, #116]
	cmp	r2, #0
	beq	.L14431
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L14431:
	mov	r1, r4
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L14433
.L14443:
	mvn	r3, #7
	mov	r0, r7
	str	r3, [r6, #112]
	bl	_raw_spin_unlock_irq
	mov	r0, r6
	bl	send_status
	mov	r0, r7
	bl	_raw_spin_lock_irq
	ldr	r3, [r6, #112]
	cmn	r3, #8
	beq	.L14503
.L14451:
	mov	r0, r7
	bl	_raw_spin_unlock_irq
	b	.L14426
.L14448:
	mov	r0, r6
	ldr	r1, [r6, #12]
	bl	do_set_interface
	ldr	r3, [r6, #12]
	cmp	r3, #0
	beq	.L14426
	ldr	r0, [r6, #4]
.L14498:
	bl	usb_composite_setup_continue
	b	.L14426
.L14446:
	mov	r1, #0
	mov	r0, r6
	bl	do_set_interface
	mov	r0, r7
	bl	_raw_spin_lock_irq
	mov	r3, #7
	mov	r0, r7
	str	r3, [r6, #112]
	bl	_raw_spin_unlock_irq
	b	.L14426
.L14502:
	ldr	r1, [r6]
	mov	r2, r10
	ldr	r0, .L14504+4
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14429
.L14503:
	str	r8, [r6, #112]
	b	.L14451
.L14453:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC87
	movw	r3, #3112
	movt	r1, #:upper16:.LC87
	ldr	r2, .L14504+8
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC88
	movw	r1, #550
	movt	r0, #:upper16:.LC88
	bl	warn_slowpath_null
	b	.L14426
.L14505:
	.align	2
.L14504:
	.word	.LANCHOR8-3846
	.word	.LANCHOR8-3864
	.word	.LANCHOR5-104
	.fnend
	.size	handle_exception, .-handle_exception
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	fsg_main_thread, %function
fsg_main_thread:
	.fnstart
	@ args = 0, pretend = 0, frame = 80
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	fp, r0
	mov	r0, #2
	str	lr, [sp, #32]
	.pad #92
	sub	sp, sp, #92
	add	r10, fp, #44
	bl	allow_signal
	mov	r0, #15
	bl	allow_signal
	mov	r0, #9
	bl	allow_signal
	mov	r0, #10
	bl	allow_signal
	bl	set_freezable
	ldr	r3, [fp, #112]
	mov	r2, sp
	mov	r1, #0
	bic	r2, r2, #8128
	bic	r2, r2, #63
	cmp	r3, #7
	str	r1, [r2, #8]
	beq	.L14507
	movw	r9, #21333
	movw	r2, #22737
	movw	r1, #21250
	movt	r2, 6687
	movt	r1, 5
	movt	r9, 17218
	str	r2, [sp, #8]
	str	r1, [sp, #12]
.L14698:
	cmp	r3, #0
	bgt	.L14508
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L14508
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	tst	r3, #32
	beq	.L14929
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r4, [fp, #60]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L14512
	b	.L14516
.L14930:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L14516
.L14512:
	mov	r0, r10
	bl	_raw_spin_unlock_irq
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	beq	.L14930
.L14510:
	ldr	r3, [fp, #112]
	cmp	r3, #7
	bne	.L14698
.L14507:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	mov	r3, #0
	mov	r0, r10
	str	r3, [fp, #168]
	bl	_raw_spin_unlock_irq
	ldr	r3, [fp, #172]
	cmp	r3, #0
	beq	.L14702
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L14702
	mov	r0, fp
	blx	r3
	cmp	r0, #0
	blt	.L14702
.L14703:
	add	r0, fp, #152
	mov	r1, #0
	bl	complete_and_exit
.L14702:
	ldr	r5, [fp, #92]
	add	r9, fp, #28
	mov	r0, r9
	ldr	r4, [fp, #100]
	bl	down_write
	cmp	r5, #0
	sub	r5, r5, #1
	beq	.L14701
	ldr	r7, .L14968+48
	mov	r6, #14848
	movw	r8, #:lower16:.LC805
	add	r4, r4, #392
	movt	r6, 2
	movt	r8, #:upper16:.LC805
.L14706:
	ldr	r0, [r4, #-392]
	cmp	r0, #0
	beq	.L14704
	ldrh	r3, [r7]
	tst	r3, #4
	bne	.L14931
.L14705:
	bl	fput
	mov	r3, #0
	str	r3, [r4, #-392]
	str	r6, [r4, #-356]
.L14704:
	sub	r5, r5, #1
	add	r4, r4, #392
	cmn	r5, #1
	bne	.L14706
.L14701:
	mov	r0, r9
	bl	up_write
	b	.L14703
.L14508:
	mov	r0, fp
	bl	handle_exception
	ldr	r3, [fp, #112]
	cmp	r3, #7
	bne	.L14698
	b	.L14507
.L14516:
	mov	r0, r10
	bl	_raw_spin_unlock_irq
	mov	r2, #31
	mov	r0, fp
	str	r2, [r4, #12]
	ldr	r1, [fp, #108]
	udiv	r3, r2, r1
	mul	r3, r1, r3
	subs	r3, r2, r3
	addne	r2, r1, #31
	mov	r1, r4
	subne	r2, r2, r3
	ldr	r3, [r4, #24]
	str	r2, [r3, #4]
	bl	start_out_transfer
	cmp	r0, #0
	bne	.L14909
	b	.L14510
.L14518:
	bl	_raw_spin_unlock_irq
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	bne	.L14510
.L14909:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	mov	r0, r10
	cmp	r3, #1
	bne	.L14518
	bl	_raw_spin_unlock_irq
	.syntax divided
@ 2858 "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r8, [fp, #8]
	cmp	r8, #0
	beq	.L14932
	ldr	r3, [r4, #24]
	ldr	r5, [r8, #88]
	ldr	r6, [r3]
	ldr	r7, [r3, #44]
	cmp	r7, #0
	bne	.L14522
	ldr	r2, [r8, #96]
	tst	r2, #1
	bne	.L14524
	ldr	r3, [r3, #48]
	cmp	r3, #31
	bne	.L14525
	ldr	r2, [r6]
	cmp	r2, r9
	bne	.L14525
	ldrb	r3, [r6, #13]	@ zero_extendqisi2
	cmp	r3, #7
	bhi	.L14539
	ldrb	r7, [r6, #12]	@ zero_extendqisi2
	bics	r7, r7, #128
	bne	.L14539
	ldrb	r0, [r6, #14]	@ zero_extendqisi2
	sub	r2, r0, #1
	cmp	r2, #15
	bhi	.L14539
	add	r1, r6, #15
	mov	r2, r0
	str	r0, [r5, #72]
	add	r0, r5, #76
	bl	memcpy
	ldrsb	r3, [r6, #12]
	mov	r0, r10
	ldr	r2, [r5, #92]
	cmp	r3, #0
	movlt	r3, #2
	movge	r3, #1
	str	r3, [r5, #120]
	ldr	r3, [r6, #8]
	cmp	r3, #0
	str	r3, [r5, #124]
	moveq	r3, #3
	streq	r3, [r5, #120]
	ldrb	r3, [r6, #13]	@ zero_extendqisi2
	cmp	r3, r2
	str	r3, [r5, #96]
	ldrcc	r2, [r5, #100]
	movcc	r1, #392
	movcs	r3, #0
	mlacc	r3, r1, r3, r2
	str	r3, [r5, #104]
	ldr	r3, [r6, #4]
	str	r3, [r5, #132]
	bl	_raw_spin_lock_irq
	mov	r3, #0
	mov	r0, r10
	str	r3, [r4, #4]
	bl	_raw_spin_unlock_irq
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [fp, #112]
	cmp	r3, #0
	ble	.L14933
.L14549:
	mov	r0, r10
	bl	_raw_spin_unlock_irq
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r4, [fp, #60]
	str	r4, [fp, #64]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L14550
	b	.L14578
.L14934:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L14578
.L14550:
	mov	r0, r10
	bl	_raw_spin_unlock_irq
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	beq	.L14934
	b	.L14510
.L14933:
	mvn	r3, #8
	str	r3, [fp, #112]
	b	.L14549
.L14929:
	mov	r0, fp
	bl	sleep_thread
	ldr	r3, [fp, #112]
	cmp	r3, #7
	bne	.L14698
	b	.L14507
.L14578:
	mov	r0, r10
	add	r8, fp, #28
	bl	_raw_spin_unlock_irq
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	mov	r0, r8
	bic	r3, r3, #12
	strb	r3, [fp, #144]
	bl	down_read
	ldrb	r2, [fp, #76]	@ zero_extendqisi2
	cmp	r2, #250
	ldrls	pc, [pc, r2, asl #2]
	b	.L14551
.L14553:
	.word	.L14577
	.word	.L14551
	.word	.L14551
	.word	.L14576
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14575
	.word	.L14551
	.word	.L14574
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14573
	.word	.L14551
	.word	.L14551
	.word	.L14572
	.word	.L14571
	.word	.L14570
	.word	.L14551
	.word	.L14551
	.word	.L14569
	.word	.L14568
	.word	.L14551
	.word	.L14551
	.word	.L14567
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14566
	.word	.L14551
	.word	.L14565
	.word	.L14551
	.word	.L14551
	.word	.L14564
	.word	.L14551
	.word	.L14563
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14562
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14561
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14560
	.word	.L14559
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14558
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14557
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14556
	.word	.L14551
	.word	.L14555
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14554
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14551
	.word	.L14552
.L14931:
	mov	r2, r8
	sub	r1, r4, #344
	ldr	r0, .L14968
	bl	__dynamic_dev_dbg
	ldr	r0, [r4, #-392]
	b	.L14705
.L14932:
	ldr	r0, [fp]
	movw	r1, #:lower16:.LC87
	movw	r3, #2859
	ldr	r2, .L14968+4
	movt	r1, #:upper16:.LC87
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC88
	movw	r1, #550
	movt	r0, #:upper16:.LC88
	bl	warn_slowpath_null
	mov	r0, r10
	bl	_raw_spin_lock_irq
	mov	r0, r10
	str	r8, [r4, #4]
	bl	_raw_spin_unlock_irq
	b	.L14510
.L14551:
	ldr	r6, .L14968+8
	mov	r5, #0
	movw	r1, #:lower16:.LC1153
	movt	r1, #:upper16:.LC1153
	str	r5, [fp, #128]
	mov	r0, r6
	bl	sprintf
	mov	r2, r5
	mvn	r3, #0
	stm	sp, {r5, r6}
	mov	r0, fp
	ldr	r1, [fp, #72]
	bl	check_command
	subs	r5, r0, #0
	beq	.L14935
.L14579:
	mov	r0, r8
	bl	up_read
	cmn	r5, #4
	beq	.L14510
.L14708:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r3, r3, #1
	bne	.L14510
	cmn	r5, #22
	beq	.L14663
	cmp	r5, #0
	ldrlt	r6, [fp, #120]
	blt	.L14664
	mov	r3, r5
.L14663:
	ldr	r6, [fp, #120]
	cmp	r6, #2
	bne	.L14664
	ldr	r2, [fp, #128]
	mov	r1, #1
	ldr	r0, [r4, #16]
	cmp	r3, r2
	movcs	r3, r2
	str	r3, [r0, #4]
	str	r1, [r4, #4]
	ldr	r6, [fp, #120]
	ldr	r2, [fp, #136]
	sub	r3, r2, r3
	str	r3, [fp, #136]
.L14664:
	cmp	r6, #1
	beq	.L14665
	cmp	r6, #0
	beq	.L14666
	cmp	r6, #2
	bne	.L14668
	ldr	r3, [fp, #124]
	cmp	r3, #0
	beq	.L14668
	ldr	r3, [fp, #8]
	cmp	r3, #0
	beq	.L14936
	ldr	r4, [fp, #60]
	ldr	r2, [fp, #136]
	ldr	r3, [r4, #16]
	cmp	r2, #0
	beq	.L14937
	ldrb	r2, [r3, #26]	@ zero_extendqisi2
	mov	r1, r4
	mov	r0, fp
	orr	r2, r2, #2
	strb	r2, [r3, #26]
	bl	start_in_transfer
	cmp	r0, #0
	bne	.L14677
	ldrb	r2, [fp, #144]	@ zero_extendqisi2
	ldr	r3, [r4, #8]
	tst	r2, #1
	str	r3, [fp, #60]
	beq	.L14510
.L14707:
	ldr	r0, [fp, #8]
	bl	halt_bulk_in_endpoint
	b	.L14673
.L14937:
	ldrb	ip, [r3, #26]	@ zero_extendqisi2
	mov	r1, r4
	mov	r0, fp
	bfi	ip, r2, #1, #1
	strb	ip, [r3, #26]
	bl	start_in_transfer
	cmp	r0, #0
	beq	.L14510
	ldr	r3, [r4, #8]
	str	r3, [fp, #60]
.L14668:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [fp, #112]
	mov	r0, r10
	cmp	r3, #0
	mvnle	r3, #7
	strle	r3, [fp, #112]
	bl	_raw_spin_unlock_irq
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #3968]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3, #3968]
	bne	.L14510
	mov	r0, fp
	bl	send_status
	subs	r4, r0, #0
	bne	.L14510
	mov	r0, r10
	bl	_raw_spin_lock_irq
	ldr	r3, [fp, #112]
	mov	r0, r10
	cmp	r3, #0
	strle	r4, [fp, #112]
	bl	_raw_spin_unlock_irq
	b	.L14510
.L14666:
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L14668
	ldr	r2, [fp, #8]
	cmp	r2, #0
	movweq	r1, #:lower16:.LC87
	movweq	r3, #2120
	ldreq	r0, [fp]
	beq	.L14917
	ldr	r0, .L14968+32
	movw	r1, #:lower16:.LC1116
	movw	r3, #:lower16:.LC852
	ldr	lr, [r2, #100]
	movt	r1, #:upper16:.LC1116
	movt	r3, #:upper16:.LC852
	ldr	r4, [r2, #104]
	ldrh	ip, [r0]
	cmp	r4, lr
	movne	r3, r1
	tst	ip, #4
	bne	.L14938
.L14672:
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
	ldr	r0, [fp, #8]
	bl	halt_bulk_in_endpoint
.L14673:
	cmp	r0, #0
	bne	.L14510
	b	.L14668
.L14665:
	ldr	r3, [fp, #136]
	cmp	r3, #0
	beq	.L14668
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	ands	r5, r3, #8
	bne	.L14939
.L14686:
	ldr	r3, [fp, #64]
	ldr	r2, [r3, #4]
	cmp	r2, #0
	bne	.L14693
.L14940:
	ldr	r3, [fp, #140]
	cmp	r3, #0
	beq	.L14668
	ldr	r6, [fp, #60]
	ldr	r2, [r6, #4]
	cmp	r2, #0
	beq	.L14710
.L14690:
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	bne	.L14510
	ldr	r3, [fp, #64]
	ldr	r2, [r3, #4]
	cmp	r2, #0
	beq	.L14940
.L14693:
	cmp	r2, #1
	bne	.L14684
	.syntax divided
@ 2060 "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r2, [r3, #8]
	str	r5, [r3, #4]
	str	r2, [fp, #64]
	ldr	r2, [r3, #24]
	ldr	r3, [r3, #12]
	ldr	r1, [r2, #48]
	cmp	r1, r3
	bcc	.L14685
	ldr	r3, [r2, #44]
	cmp	r3, #0
	beq	.L14686
.L14685:
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r3, [fp, #112]
	mov	r4, r0
	cmp	r3, #1
	bgt	.L14688
	ldr	r3, [fp, #56]
	mov	r1, #1
	ldr	r2, [fp, #168]
	str	r1, [fp, #112]
	str	r3, [fp, #116]
	cmp	r2, #0
	beq	.L14688
.L14928:
	mov	r1, #2
	mov	r0, #10
	bl	send_sig_info
.L14688:
	mov	r1, r4
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore
	b	.L14510
.L14684:
	ldr	r6, [fp, #60]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L14690
	ldr	r3, [fp, #140]
	cmp	r3, #0
	beq	.L14690
.L14710:
	cmp	r3, #16384
	mov	r1, r6
	movcc	r4, r3
	movcs	r4, #16384
	mov	r0, fp
	str	r4, [r6, #12]
	ldr	r3, [fp, #108]
	udiv	r2, r4, r3
	mls	r2, r3, r2, r4
	cmp	r2, #0
	addne	r3, r4, r3
	moveq	r3, r4
	subne	r3, r3, r2
	ldr	r2, [r6, #24]
	str	r3, [r2, #4]
	bl	start_out_transfer
	cmp	r0, #0
	beq	.L14510
	ldr	r3, [fp, #140]
	ldr	r2, [r6, #8]
	sub	r3, r3, r4
	str	r2, [fp, #60]
	str	r3, [fp, #140]
	b	.L14686
.L14554:
	ldrb	ip, [fp, #83]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC1151
	mov	r1, #1
	ldrb	r0, [fp, #82]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC1151
	mov	r3, #956
	ldrb	lr, [fp, #84]	@ zero_extendqisi2
	stm	sp, {r1, r2}
	mov	r2, #2
	mov	r1, #12
	lsl	ip, ip, #8
	orr	ip, ip, r0, lsl #16
	mov	r0, fp
	orr	ip, ip, lr
	lsl	ip, ip, #9
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L14579
	ldrb	r5, [fp, #83]	@ zero_extendqisi2
	ldrb	r2, [fp, #82]	@ zero_extendqisi2
	ldrb	r3, [fp, #84]	@ zero_extendqisi2
	lsl	r5, r5, #8
	orr	r5, r5, r2, lsl #16
	orrs	r5, r5, r3
	beq	.L14579
	ldr	r7, [fp, #104]
	ldr	r1, [fp, #78]	@ unaligned
	ldrd	r2, [r7, #16]
	rev	r1, r1
	mov	ip, r1
	mov	r1, #0
	cmp	ip, r2
	str	ip, [sp, #48]
	sbcs	r3, r1, r3
	bge	.L14915
	ldrb	r3, [fp, #85]	@ zero_extendqisi2
	and	r3, r3, #248
	cmp	r3, #248
	str	r3, [sp, #52]
	beq	.L14941
	ldr	r2, [sp, #48]
	ldr	r3, [fp, #128]
	lsr	r1, r2, #23
	lsl	r2, r2, #9
	cmp	r3, #0
	mov	r0, r3
	str	r2, [sp, #24]
	str	r1, [sp, #28]
	beq	.L14659
.L14645:
	mov	r3, sp
	str	r4, [sp, #32]
	bic	r3, r3, #8128
	str	r8, [sp, #36]
	mov	r8, r0
	bic	r3, r3, #63
	str	r3, [sp, #56]
.L14644:
	ldr	r1, [r7, #8]
	cmp	r8, #16384
	mov	r3, #0
	ldrd	r4, [sp, #24]
	movcc	r2, r8
	movcs	r2, #16384
	ldr	r0, [r7, #12]
	subs	r1, r1, r4
	str	r1, [sp, #64]
	sbc	r1, r0, r5
	str	r1, [sp, #68]
	ldrd	r0, [sp, #64]
	cmp	r2, r0
	sbcs	r1, r3, r1
	strdlt	r2, [sp, #64]
.L14646:
	ldr	r3, [sp, #24]
	ldrd	r0, [sp, #64]
	ubfx	r3, r3, #0, #12
	cmp	r3, #0
	mov	r4, r0
	beq	.L14647
	rsb	r4, r3, #4096
	cmp	r4, r0
	movcs	r4, r0
.L14647:
	ldr	r6, [fp, #60]
	b	.L14648
.L14649:
	mov	r0, fp
	bl	sleep_thread
	cmp	r0, #0
	bne	.L14902
.L14648:
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L14649
	cmp	r4, #0
	beq	.L14942
	ldr	r3, [sp, #52]
	cmp	r3, #248
	ldrd	r2, [sp, #24]
	strd	r2, [sp, #80]
	ldr	r1, [r6]
	add	r3, sp, #80
	mov	r2, r4
	ldr	r0, [r7]
	addeq	r1, r1, #16
	bl	vfs_read
	ldr	r3, [sp, #56]
	mov	r5, r0
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L14718
	cmp	r0, #0
	blt	.L14943
	cmp	r4, r0
	bls	.L14656
	ldr	r3, .L14968+12
	ldrh	r3, [r3]
	tst	r3, #4
	bne	.L14944
.L14657:
	ldr	r3, [fp, #136]
	bic	r5, r5, #508
	mov	r2, #1
	ldrd	r0, [sp, #24]
	bic	r5, r5, #3
	sub	r8, r8, r5
	sub	r3, r3, r5
	adds	r0, r0, r5
	str	r3, [fp, #136]
	ldr	r3, [r6, #16]
	adc	r1, r1, r5, asr #31
	cmp	r4, r5
	strd	r0, [sp, #24]
	str	r5, [r3, #4]
	str	r2, [r6, #4]
	bhi	.L14945
.L14658:
	cmp	r8, #0
	beq	.L14903
	mov	r1, r6
	mov	r0, fp
	bl	start_in_transfer
	cmp	r0, #0
	beq	.L14904
	ldr	r3, [r6, #8]
	str	r3, [fp, #60]
	b	.L14644
.L14555:
	ldr	r3, [fp, #82]	@ unaligned
	ldr	r2, [fp, #104]
	rev	r3, r3
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L14640
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L14640:
	mov	r1, #1
	movw	r0, #:lower16:.LC1147
	mov	r2, r1
	movt	r0, #:upper16:.LC1147
	movw	r3, #1022
	str	r1, [sp]
	mov	r1, #12
.L14924:
	str	r0, [sp, #4]
	mov	r0, fp
	bl	check_command
	subs	r5, r0, #0
	bne	.L14579
	mov	r0, fp
	bl	do_write
	mov	r5, r0
	b	.L14579
.L14556:
	ldr	r3, [fp, #82]	@ unaligned
	ldr	r2, [fp, #104]
	rev	r3, r3
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L14591
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L14591:
	mov	r1, #1
	movw	r0, #:lower16:.LC1130
	movt	r0, #:upper16:.LC1130
	movw	r3, #1022
	mov	r2, #2
	str	r1, [sp]
	mov	r1, #12
.L14921:
	str	r0, [sp, #4]
	mov	r0, fp
	bl	check_command
	subs	r5, r0, #0
	bne	.L14579
	mov	r0, fp
	bl	do_read
	mov	r5, r0
	b	.L14579
.L14573:
	ldrb	ip, [fp, #80]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1121
	mov	r2, #0
	movt	r0, #:upper16:.LC1121
	mov	r3, #16
	mov	r1, #6
	str	r2, [sp]
	mov	r2, #2
	str	r0, [sp, #4]
	mov	r0, fp
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L14579
	ldr	r3, [fp, #104]
	ldr	r6, [r4]
	cmp	r3, #0
	beq	.L14946
	ldrb	r0, [r3, #24]	@ zero_extendqisi2
	mov	r1, #2
	mov	r2, #31
	ldr	r7, .L14968+16
	movw	lr, #:lower16:.LANCHOR1
	add	ip, fp, #218
	movt	lr, #:upper16:.LANCHOR1
	tst	r0, #8
	str	lr, [sp, #32]
	movne	r0, #5
	moveq	r0, #0
	str	ip, [sp, #36]
	strb	r0, [r6]
	ldrb	r3, [r3, #24]	@ zero_extendqisi2
	mov	r0, r7
	strb	r1, [r6, #2]
	strb	r1, [r6, #3]
	mov	r1, ip
	strb	r2, [r6, #4]
	mov	r2, #16
	lsl	r3, r3, #5
	strb	r5, [r6, #5]
	strb	r5, [r6, #6]
	bic	r3, r3, #127
	strb	r3, [r6, #1]
	strb	r5, [r6, #7]
	bl	strncpy
	ldr	lr, [sp, #32]
	ldr	r0, [sp, #36]
	strb	r5, [lr, #4008]
	bl	strlen
	cmp	r0, #11
	bhi	.L14583
	ldr	r3, [fp, #96]
	cmp	r3, #0
	bne	.L14947
.L14583:
	mov	r1, #1
	add	r5, fp, #180
	str	r7, [sp]
	movw	r2, #:lower16:.LC924
	mov	r0, r5
	movt	r2, #:upper16:.LC924
	add	r3, fp, #209
	str	r1, [sp, #4]
	mov	r1, #29
	mov	r7, #36
	bl	snprintf
	ldr	r0, [fp, #180]	@ unaligned
	ldr	r1, [fp, #184]	@ unaligned
	ldr	r2, [fp, #188]	@ unaligned
	ldr	ip, [fp, #192]	@ unaligned
	str	r0, [r6, #8]	@ unaligned
	str	r1, [r6, #12]	@ unaligned
	str	r2, [r6, #16]	@ unaligned
	str	ip, [r6, #20]	@ unaligned
	ldr	r2, [fp, #204]	@ unaligned
	ldr	r0, [fp, #196]	@ unaligned
	ldr	r1, [fp, #200]	@ unaligned
	str	r0, [r6, #24]	@ unaligned
	str	r1, [r6, #28]	@ unaligned
	str	r2, [r6, #32]	@ unaligned
	ldrb	r2, [fp, #208]	@ zero_extendqisi2
	strb	r2, [r6, #36]
.L14581:
	mov	r0, r8
	mov	r5, r7
	bl	up_read
	b	.L14708
.L14574:
	ldrb	r3, [fp, #80]	@ zero_extendqisi2
	ldr	r2, [fp, #104]
	cmp	r3, #0
	moveq	r3, #256
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L14638
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L14638:
	mov	r1, #1
	movw	r0, #:lower16:.LC1145
	mov	r2, r1
	movt	r0, #:upper16:.LC1145
	mov	r3, #30
	str	r1, [sp]
	mov	r1, #6
	b	.L14924
.L14575:
	ldrb	r3, [fp, #80]	@ zero_extendqisi2
	ldr	r2, [fp, #104]
	cmp	r3, #0
	moveq	r3, #256
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L14589
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L14589:
	mov	r1, #1
	movw	r0, #:lower16:.LC1128
	movt	r0, #:upper16:.LC1128
	mov	r3, #30
	mov	r2, #2
	str	r1, [sp]
	mov	r1, #6
	b	.L14921
.L14969:
	.align	2
.L14968:
	.word	.LANCHOR4+624
	.word	.LANCHOR5-84
	.word	.LANCHOR1+4012
	.word	.LANCHOR8-3654
	.word	.LANCHOR1+3992
	.word	.LANCHOR8-3702
	.word	.LANCHOR8-3720
	.word	.LANCHOR5-12
	.word	.LANCHOR4+1290
	.word	.LANCHOR8-3774
	.word	.LANCHOR8-3808
	.word	.LANCHOR8-3798
	.word	.LANCHOR4+642
	.word	.LANCHOR8-3678
	.word	.LANCHOR8-3726
.L14576:
	ldrb	ip, [fp, #80]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1135
	mov	r1, #0
	movt	r0, #:upper16:.LC1135
	mov	r3, #16
	mov	r2, #2
	str	r1, [sp]
	mov	r1, #6
	str	r0, [sp, #4]
	mov	r0, fp
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L14579
	ldr	r3, [fp, #104]
	ldr	r6, [r4]
	cmp	r3, #0
	beq	.L14948
	ldrb	r2, [r3, #24]	@ zero_extendqisi2
	mov	r0, #0
	ldr	r7, [r3, #28]
	ldr	r1, [r3, #32]
	str	r0, [r3, #28]
	str	r0, [r3, #32]
	str	r1, [sp, #32]
	mov	r1, r2
	ubfx	r2, r2, #6, #1
	lsl	r5, r2, #7
	bfi	r1, r0, #6, #1
	strb	r1, [r3, #24]
.L14603:
	mov	r1, #18
	mov	r0, r6
	bl	__memzero
	ldr	ip, [sp, #32]
	lsr	r1, r7, #16
	lsr	r0, r7, #8
	orr	r5, r5, #112
	lsr	r3, ip, #16
	strb	r1, [r6, #2]
	ubfx	r1, ip, #8, #8
	strb	r5, [r6]
	lsr	r2, r3, #8
	strb	r0, [r6, #12]
	strb	r3, [r6, #4]
	mov	r3, #10
	strb	r2, [r6, #3]
	strb	r1, [r6, #5]
	strb	ip, [r6, #6]
	strb	r3, [r6, #7]
	strb	r7, [r6, #13]
	mov	r7, #18
	b	.L14581
.L14577:
	movw	ip, #:lower16:.LC1141
	mov	r2, #0
	movt	ip, #:upper16:.LC1141
	mov	r1, #1
	mov	r3, r2
	mov	r0, fp
	str	r2, [fp, #128]
	mov	r2, #3
	stm	sp, {r1, ip}
	mov	r1, #6
	bl	check_command
	mov	r5, r0
	b	.L14579
.L14563:
	ldrb	r1, [fp, #83]	@ zero_extendqisi2
	ldrb	r3, [fp, #84]	@ zero_extendqisi2
	ldr	r2, [fp, #104]
	orr	r3, r3, r1, lsl #8
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L14639
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L14639:
	mov	r1, #1
	movw	r0, #:lower16:.LC1146
	mov	r2, r1
	movt	r0, #:upper16:.LC1146
	movw	r3, #446
	str	r1, [sp]
	mov	r1, #10
	b	.L14924
.L14564:
	ldrb	r1, [fp, #83]	@ zero_extendqisi2
	ldrb	r3, [fp, #84]	@ zero_extendqisi2
	ldr	r2, [fp, #104]
	orr	r3, r3, r1, lsl #8
	cmp	r2, #0
	str	r3, [fp, #128]
	beq	.L14590
	ldr	r2, [r2, #40]
	lsl	r3, r3, r2
	str	r3, [fp, #128]
.L14590:
	mov	r1, #1
	movw	r0, #:lower16:.LC1129
	movt	r0, #:upper16:.LC1129
	movw	r3, #446
	mov	r2, #2
	str	r1, [sp]
	mov	r1, #10
	b	.L14921
.L14565:
	movw	ip, #:lower16:.LC1131
	mov	r1, #1
	movt	ip, #:upper16:.LC1131
	mov	r7, #8
	mov	r3, #316
	mov	r2, #2
	mov	r0, fp
	str	r7, [fp, #128]
	stm	sp, {r1, ip}
	mov	r1, #10
	bl	check_command
	subs	r5, r0, #0
	bne	.L14579
	ldrb	r2, [fp, #84]	@ zero_extendqisi2
	ldr	r0, [fp, #78]	@ unaligned
	ldr	r3, [r4]
	ldr	r1, [fp, #104]
	cmp	r2, #1
	rev	r0, r0
	bhi	.L14592
	eor	r2, r2, #1
	cmp	r0, #0
	moveq	r2, #0
	andne	r2, r2, #1
	cmp	r2, #0
	bne	.L14592
	ldr	r2, [r1, #16]
	sub	r2, r2, #1
	lsr	r0, r2, #16
	ubfx	ip, r2, #8, #8
	strb	r2, [r3, #3]
	lsr	r2, r0, #8
	strb	r2, [r3]
	strb	r0, [r3, #1]
	strb	ip, [r3, #2]
	ldr	r2, [r1, #44]
	lsr	r1, r2, #16
	ubfx	r0, r2, #8, #8
	strb	r1, [r3, #5]
	strb	r2, [r3, #7]
	lsr	r2, r1, #8
	strb	r0, [r3, #6]
	strb	r2, [r3, #4]
	b	.L14581
.L14566:
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC1134
	mov	r2, #1
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC1134
	mov	r3, #384
	mov	r0, fp
	str	r2, [sp]
	mov	r2, #2
	str	r1, [sp, #4]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L14579
	ldr	r3, [r4]
	mov	r2, #134217728
	mov	ip, #2
	ldr	r1, [fp, #104]
	mov	r7, #12
	str	r2, [r3]	@ unaligned
	ldr	r2, [r1, #16]
	lsr	r0, r2, #16
	strb	r2, [r3, #7]
	ubfx	r2, r2, #8, #8
	strb	r0, [r3, #5]
	strb	r2, [r3, #6]
	lsr	r2, r0, #8
	strb	r2, [r3, #4]
	ldr	r2, [r1, #44]
	strb	ip, [r3, #8]
	lsr	r1, r2, #16
	ubfx	r0, r2, #8, #8
	strb	r1, [r3, #9]
	strb	r0, [r3, #10]
	strb	r2, [r3, #11]
	b	.L14581
.L14567:
	movw	r0, #:lower16:.LC1127
	mov	ip, #0
	movt	r0, #:upper16:.LC1127
	mov	r3, #16
	mov	r2, #3
	mov	r1, #6
	str	ip, [sp]
	str	r0, [sp, #4]
	mov	r0, fp
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L14579
	ldr	r5, [fp, #104]
	cmp	r5, #0
	beq	.L14584
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	tst	r3, #4
	moveq	r3, #335872
	mvneq	r7, #21
	streq	r3, [r5, #28]
	beq	.L14581
	ldrb	r6, [fp, #80]	@ zero_extendqisi2
	bics	r7, r6, #1
	movne	r3, #9216
	mvnne	r7, #21
	movtne	r3, 5
	strne	r3, [r5, #28]
	bne	.L14581
	and	r1, r3, #144
	mvn	r2, r6
	cmp	r1, #16
	movne	r2, #0
	andeq	r2, r2, #1
	cmp	r2, #0
	bne	.L14949
.L14587:
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	bfi	r3, r6, #4, #1
	strb	r3, [r5, #24]
	b	.L14581
.L14568:
	movw	r0, #:lower16:.LC1136
	mov	ip, #0
	movt	r0, #:upper16:.LC1136
	mov	r3, #18
	mov	r2, #3
	mov	r1, #6
	str	ip, [sp]
	str	r0, [sp, #4]
	mov	r0, fp
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L14579
	ldr	r6, [fp, #104]
	cmp	r6, #0
	beq	.L14584
	ldrb	r2, [r6, #24]	@ zero_extendqisi2
	tst	r2, #4
	moveq	r3, #335872
	mvneq	r7, #21
	streq	r3, [r6, #28]
	beq	.L14581
	ldrb	r3, [fp, #77]	@ zero_extendqisi2
	tst	r3, #254
	bne	.L14605
	ldrb	r3, [fp, #80]	@ zero_extendqisi2
	tst	r3, #252
	bne	.L14605
	tst	r3, #1
	and	r3, r3, #2
	beq	.L14607
	cmp	r3, #0
	bne	.L14950
.L14608:
	ldr	r3, [r6]
	cmp	r3, #0
	moveq	r3, #14848
	mvneq	r7, #21
	movteq	r3, 2
	streq	r3, [r6, #28]
	b	.L14581
.L14559:
	ldr	r3, [fp, #104]
	cmp	r3, #0
	beq	.L14551
	ldrb	r3, [r3, #24]	@ zero_extendqisi2
	tst	r3, #8
	beq	.L14551
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC1132
	mov	r7, #1
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC1132
	movw	r3, #446
	mov	r2, #2
	mov	r0, fp
	str	r7, [sp]
	str	r1, [sp, #4]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L14579
	ldrb	r3, [fp, #77]	@ zero_extendqisi2
	ldr	r5, [fp, #78]	@ unaligned
	ldr	ip, [fp, #104]
	ldr	r6, [r4]
	bics	r2, r3, #2
	and	r3, r3, #2
	rev	r5, r5
	mvnne	r7, #21
	str	r3, [sp, #32]
	movne	r3, #9216
	movtne	r3, 5
	str	r2, [sp, #36]
	strne	r3, [ip, #28]
	bne	.L14581
	ldrd	r2, [ip, #16]
	mov	r1, #0
	cmp	r5, r2
	sbcs	r3, r1, r3
	movge	r3, #8448
	mvnge	r7, #21
	movtge	r3, 5
	strge	r3, [ip, #28]
	bge	.L14581
	mov	r1, #8
	mov	r0, r6
	bl	__memzero
	ldr	r3, [sp, #32]
	strb	r7, [r6]
	cmp	r3, #0
	beq	.L14596
	lsr	r3, r5, #2
	mov	r2, #75
	ldr	r1, [sp, #36]
	mov	ip, #60
	add	r3, r3, #150
	movw	lr, #4500
	mov	r7, #8
	udiv	r0, r3, r2
	strb	r1, [r6, #4]
	udiv	lr, r3, lr
	udiv	r1, r0, ip
	mls	r3, r2, r0, r3
	strb	lr, [r6, #5]
	strb	r3, [r6, #7]
	mls	r3, ip, r1, r0
	strb	r3, [r6, #6]
	b	.L14581
.L14561:
	movw	ip, #:lower16:.LC1140
	mov	r1, #0
	movt	ip, #:upper16:.LC1140
	mov	r6, #1
	mov	r3, #444
	mov	r2, #3
	str	r1, [fp, #128]
	mov	r0, fp
	mov	r1, #10
	stm	sp, {r6, ip}
	bl	check_command
	subs	r5, r0, #0
	bne	.L14579
	ldr	r2, [fp, #104]
	ldr	r0, [r2]
	str	r2, [sp, #32]
	ldrb	r5, [r2, #24]	@ zero_extendqisi2
	cmp	r0, #0
	ubfx	r5, r5, #1, #1
	moveq	r5, r6
	cmp	r5, #0
	bne	.L14581
	mov	r1, r6
	bl	vfs_fsync
	cmp	r0, #0
	beq	.L14581
	ldr	r2, [sp, #32]
	movw	r3, #3074
	mov	r7, r5
	movt	r3, 3
	str	r3, [r2, #28]
	b	.L14581
.L14562:
	movw	ip, #:lower16:.LC1142
	mov	r1, #0
	movt	ip, #:upper16:.LC1142
	mov	r6, #1
	movw	r3, #446
	mov	r2, #3
	str	r1, [fp, #128]
	mov	r0, fp
	mov	r1, #10
	stm	sp, {r6, ip}
	bl	check_command
	subs	r5, r0, #0
	bne	.L14579
	ldr	r3, [fp, #60]
	mov	r1, #0
	ldr	r7, [fp, #104]
	ldr	ip, [fp, #78]	@ unaligned
	str	r3, [sp, #32]
	ldrd	r2, [r7, #16]
	rev	ip, ip
	cmp	ip, r2
	sbcs	r3, r1, r3
	bge	.L14915
	ldrb	r3, [fp, #77]	@ zero_extendqisi2
	bics	r3, r3, #16
	movne	r3, #9216
	mvnne	r5, #21
	movtne	r3, 5
	strne	r3, [r7, #28]
	bne	.L14579
	ldrb	r1, [fp, #83]	@ zero_extendqisi2
	ldrb	r2, [fp, #84]	@ zero_extendqisi2
	orrs	lr, r2, r1, lsl #8
	beq	.L14659
	str	r3, [sp, #20]
	ldr	r0, [r7]
	ldr	r2, [r7, #40]
	ldrb	r3, [r7, #24]	@ zero_extendqisi2
	cmp	r0, #0
	sub	r1, r2, #32
	lsl	lr, lr, r2
	ubfx	r3, r3, #1, #1
	moveq	r3, #1
	str	lr, [sp, #60]
	ldr	lr, [sp, #20]
	cmp	r3, #0
	lsl	r3, ip, r2
	orr	r1, lr, ip, lsl r1
	str	r3, [sp, #16]
	str	r1, [sp, #20]
	rsb	r1, r2, #32
	ldr	lr, [sp, #20]
	orr	r1, lr, ip, lsr r1
	str	r1, [sp, #20]
	bne	.L14621
	mov	r1, r6
	bl	vfs_fsync
.L14621:
	mov	r6, #57344
	mov	r3, sp
	movt	r6, 65535
	and	r3, r3, r6
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r1, r3, #1
	bne	.L14916
	ldr	r3, [r7]
	mvn	r2, #0
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #32]
	ldr	r0, [r3, #32]
	bl	invalidate_mapping_pages
	mov	r3, sp
	and	r3, r3, r6
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r5, [r3]
	ands	r5, r5, #1
	bne	.L14916
	mov	r3, sp
	str	r4, [sp, #48]
	and	r3, r3, r6
	str	r3, [sp, #36]
	str	r8, [sp, #52]
	str	r10, [sp, #56]
	ldr	r10, [sp, #60]
	str	fp, [sp, #60]
	str	r9, [sp, #72]
	ldrd	r8, [sp, #16]
	str	r5, [sp, #76]
	ldrd	r4, [sp, #40]
	b	.L14624
.L14632:
	ldr	r3, [r7, #44]
	rsb	r3, r3, #0
	and	r6, r6, r3
.L14631:
	cmp	r6, #0
	beq	.L14951
	adds	r8, r8, r6
	sub	r10, r10, r6
	adc	r9, r9, r6, asr #31
.L14624:
	cmp	r10, #0
	beq	.L14952
	ldr	r1, [r7, #8]
	cmp	r10, #16384
	mov	r3, #0
	ldr	r0, [r7, #12]
	movcc	r2, r10
	movcs	r2, #16384
	subs	r4, r1, r8
	sbc	r5, r0, r9
	cmp	r2, r4
	sbcs	r1, r3, r5
	movlt	r4, r2
	movlt	r5, r3
	cmp	r4, #0
	beq	.L14953
	ldr	r1, [sp, #32]
	add	r3, sp, #80
	mov	r2, r4
	strd	r8, [sp, #80]
	ldr	r0, [r7]
	ldr	r1, [r1]
	bl	vfs_read
	ldr	r3, [sp, #36]
	mov	r6, r0
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L14901
	cmp	r0, #0
	blt	.L14954
	cmp	r4, r0
	bls	.L14631
	ldr	r3, .L14968+20
	ldrh	r3, [r3]
	tst	r3, #4
	beq	.L14632
	movw	r2, #:lower16:.LC1144
	mov	r3, r0
	ldr	r0, .L14968+24
	movt	r2, #:upper16:.LC1144
	add	r1, r7, #48
	str	r4, [sp]
	bl	__dynamic_dev_dbg
	b	.L14632
.L14569:
	ldrb	ip, [fp, #80]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1125
	mov	r2, #0
	movt	r0, #:upper16:.LC1125
	mov	r3, #22
	mov	r1, #6
	str	r2, [sp]
	mov	r2, #2
	str	r0, [sp, #4]
	mov	r0, fp
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L14579
.L14911:
	mov	r1, r4
	mov	r0, fp
	bl	do_mode_sense
	mov	r5, r0
	b	.L14579
.L14557:
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC1126
	mov	r2, #0
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC1126
	movw	r3, #390
	mov	r0, fp
	str	r2, [sp]
	mov	r2, #2
	str	r1, [sp, #4]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L14579
	b	.L14911
.L14558:
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC1124
	mov	r2, #0
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC1124
	movw	r3, #386
	mov	r0, fp
	str	r2, [sp]
	mov	r2, #1
	str	r1, [sp, #4]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L14579
.L14927:
	ldr	r3, [fp, #104]
	cmp	r3, #0
	beq	.L14584
.L14919:
	mov	r2, #335872
	mvn	r7, #21
	str	r2, [r3, #28]
	b	.L14581
.L14560:
	ldr	r3, [fp, #104]
	cmp	r3, #0
	beq	.L14551
	ldrb	r3, [r3, #24]	@ zero_extendqisi2
	tst	r3, #8
	beq	.L14551
	ldrb	lr, [fp, #83]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC1133
	mov	r2, #1
	ldrb	ip, [fp, #84]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC1133
	movw	r3, #962
	mov	r0, fp
	str	r2, [sp]
	mov	r2, #2
	str	r1, [sp, #4]
	mov	r1, #10
	orr	ip, ip, lr, lsl #8
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L14579
	ldrb	r2, [fp, #77]	@ zero_extendqisi2
	ldrb	r5, [fp, #82]	@ zero_extendqisi2
	ldrb	ip, [fp, #85]	@ zero_extendqisi2
	ldr	r6, [r4]
	and	r3, r2, #253
	and	r7, r2, #2
	ldr	r2, [fp, #104]
	cmp	r5, #1
	cmpls	r3, #0
	movne	r3, #9216
	movne	r5, #1
	movtne	r3, 5
	moveq	r5, #0
	lsr	ip, ip, #6
	mvnne	r7, #21
	str	r2, [sp, #32]
	strne	r3, [r2, #28]
	bne	.L14581
	cmp	ip, #2
	beq	.L14955
	mov	r1, #20
	mov	r0, r6
	bl	__memzero
	mov	r1, #1
	mov	r2, #18
	mov	r3, #22
	cmp	r7, #0
	strb	r2, [r6, #1]
	strb	r1, [r6, #2]
	strb	r1, [r6, #3]
	strb	r3, [r6, #5]
	strb	r1, [r6, #6]
	beq	.L14601
	strb	r3, [r6, #13]
	mvn	r3, #85
	mov	r2, #131072
	mov	r1, #60
	movw	lr, #4500
	str	r2, [r6, #8]	@ unaligned
	mov	r2, #75
	mov	r7, #20
	strb	r3, [r6, #14]
	ldr	r3, [sp, #32]
	ldr	r3, [r3, #16]
	strb	r5, [r6, #16]
	lsr	r3, r3, #2
	add	r3, r3, #150
	udiv	ip, r3, r2
	udiv	lr, r3, lr
	udiv	r0, ip, r1
	mls	r3, r2, ip, r3
	strb	lr, [r6, #17]
	strb	r3, [r6, #19]
	mls	r3, r1, r0, ip
	strb	r3, [r6, #18]
	b	.L14581
.L14572:
	ldrb	ip, [fp, #80]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1123
	mov	r2, #0
	movt	r0, #:upper16:.LC1123
	mov	r3, #18
	mov	r1, #6
	str	r2, [sp]
	mov	r2, #1
	str	r0, [sp, #4]
	mov	r0, fp
	str	ip, [fp, #128]
	bl	check_command
	subs	r5, r0, #0
	bne	.L14579
	b	.L14927
.L14935:
	ldr	r3, [fp, #104]
	b	.L14919
.L14936:
	ldr	r0, [fp]
	movw	r1, #:lower16:.LC87
	movw	r3, #2135
.L14917:
	movt	r1, #:upper16:.LC87
	ldr	r2, .L14968+28
	add	r0, r0, #32
	bl	dev_err
	movw	r0, #:lower16:.LC88
	movw	r1, #550
	movt	r0, #:upper16:.LC88
	bl	warn_slowpath_null
	b	.L14510
.L14958:
	ldr	r0, .L14968+32
	movw	r2, #:lower16:.LC1116
	movw	r3, #:lower16:.LC852
	ldr	ip, [r8, #100]
	movt	r2, #:upper16:.LC1116
	movt	r3, #:upper16:.LC852
	ldr	r5, [r8, #104]
	ldrh	r1, [r0]
	cmp	r5, ip
	movne	r3, r2
	tst	r1, #4
	bne	.L14956
.L14544:
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
	mov	r0, r8
	bl	halt_bulk_in_endpoint
.L14522:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	mov	r3, #0
	mov	r0, r10
	str	r3, [r4, #4]
	bl	_raw_spin_unlock_irq
	b	.L14510
.L14539:
	ldr	r0, .L14968+36
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L14957
.L14541:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	ands	r5, r3, #1
	bne	.L14958
	mov	r0, r10
	bl	_raw_spin_lock_irq
	mov	r0, r10
	str	r5, [r4, #4]
	bl	_raw_spin_unlock_irq
	b	.L14510
.L14525:
	ldr	r5, .L14968+40
	ldrh	r2, [r5, #-14]
	tst	r2, #4
	bne	.L14959
.L14527:
	ldr	r3, .L14968+44
	ldrh	r3, [r3]
	tst	r3, #4
	bne	.L14960
.L14528:
	ldr	r0, [r8, #100]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	beq	.L14529
	blx	r2
.L14530:
	cmp	r0, #0
	beq	.L14533
	cmn	r0, #11
	bne	.L14961
	mov	r0, #100
	bl	msleep_interruptible
	cmp	r0, #0
	bne	.L14533
	ldr	r0, [r8, #100]
	ldr	r2, [r0, #8]
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L14535
	blx	r3
	b	.L14530
.L14535:
	mov	r1, #1
	ldr	r3, [r2, #24]
	blx	r3
	b	.L14530
.L14961:
	ldr	r3, [r8, #84]
	movw	r1, #:lower16:.LC1119
	mov	r2, r0
	movt	r1, #:upper16:.LC1119
	add	r0, r3, #32
	bl	dev_warn
.L14533:
	add	r1, r8, #96
	mov	r0, #0
	bl	_set_bit
	b	.L14522
.L14677:
	ldrb	r2, [fp, #144]	@ zero_extendqisi2
	ldr	r3, [r4, #8]
	tst	r2, #1
	str	r3, [fp, #60]
	bne	.L14707
	b	.L14668
.L14584:
	mvn	r7, #21
	b	.L14581
.L14938:
	ldr	r1, [r2, #84]
	movw	r2, #:lower16:.LC853
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC853
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14672
.L14524:
	mov	r0, r10
	bl	_raw_spin_lock_irq
	mov	r0, r10
	str	r7, [r4, #4]
	bl	_raw_spin_unlock_irq
	b	.L14510
.L14529:
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
	b	.L14530
.L14902:
	mov	r5, r0
	ldr	r4, [sp, #32]
	ldr	r8, [sp, #36]
	b	.L14579
.L14607:
	tst	r2, #16
	bne	.L14962
	cmp	r3, #0
	beq	.L14581
	ldr	r3, [fp, #172]
	cmp	r3, #0
	beq	.L14616
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L14616
	ldr	r2, [fp, #100]
	mov	r1, r6
	mov	r0, fp
	ldr	ip, [sp, #8]
	sub	r2, r6, r2
	asr	r2, r2, #3
	mul	r2, ip, r2
	blx	r3
	subs	r5, r0, #0
	blt	.L14579
	bne	.L14581
.L14616:
	mov	r0, r8
	bl	up_read
	mov	r0, r8
	bl	down_write
	ldr	r3, [r6]
	cmp	r3, #0
	beq	.L14615
	ldr	r0, .L14968+48
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L14963
.L14617:
	ldr	r0, [r6]
	bl	fput
	mov	r3, #0
	str	r3, [r6]
.L14615:
	mov	r0, r8
	bl	up_write
	mov	r0, r8
	bl	down_read
	movw	r1, #:lower16:.LC1139
	mov	r0, fp
	movt	r1, #:upper16:.LC1139
	bl	send_message
	ldr	r3, [fp, #172]
	cmp	r3, #0
	beq	.L14581
	ldr	r3, [r3, #8]
	cmp	r3, #0
	beq	.L14581
	ldr	r2, [fp, #100]
	mov	r1, r6
	mov	r0, fp
	ldr	ip, [sp, #8]
	sub	r2, r6, r2
	asr	r2, r2, #3
	mul	r2, ip, r2
	blx	r3
	and	r5, r0, r0, asr #31
	b	.L14579
.L14948:
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	mov	r7, #9472
	str	r5, [sp, #32]
	movt	r7, 5
	orr	r3, r3, #16
	strb	r3, [fp, #144]
	b	.L14603
.L14957:
	ldrb	ip, [r6, #14]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC1120
	sub	r0, r0, #18
	ldr	r1, [r8, #84]
	movt	r2, #:upper16:.LC1120
	str	ip, [sp, #4]
	ldrb	ip, [r6, #12]	@ zero_extendqisi2
	add	r1, r1, #32
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	b	.L14541
.L14939:
	mov	r0, r10
	bl	_raw_spin_lock_irqsave
	ldr	r3, [fp, #112]
	mov	r4, r0
	cmp	r3, #1
	bgt	.L14688
	ldr	r3, [fp, #56]
	str	r6, [fp, #112]
	ldr	r2, [fp, #168]
	str	r3, [fp, #116]
	cmp	r2, #0
	bne	.L14928
	b	.L14688
.L14960:
	ldr	r1, [r8, #84]
	movw	r2, #:lower16:.LC1118
	sub	r0, r5, #8
	movt	r2, #:upper16:.LC1118
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14528
.L14959:
	ldr	ip, [r6]
	movw	r2, #:lower16:.LC1117
	sub	r0, r5, #32
	ldr	r1, [r8, #84]
	movt	r2, #:upper16:.LC1117
	str	ip, [sp]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14527
.L14943:
	ldr	r0, .L14968+52
	ldr	r4, [sp, #32]
	ldr	r8, [sp, #36]
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L14964
.L14655:
	ldr	r2, [r6, #16]
	mov	r1, #0
	mov	r3, #1
	str	r1, [r2, #4]
	str	r3, [r6, #4]
.L14709:
	ldr	r2, [sp, #24]
	mov	r1, #4352
	ldr	r0, [sp, #28]
	movt	r1, 3
	ldrb	r3, [r7, #24]	@ zero_extendqisi2
	str	r1, [r7, #28]
	lsr	r2, r2, #9
	orr	r2, r2, r0, lsl #23
	orr	r3, r3, #64
	strb	r3, [r7, #24]
	str	r2, [r7, #32]
.L14651:
	ldr	r3, [sp, #52]
	cmp	r3, #248
	beq	.L14965
.L14659:
	mvn	r5, #4
	b	.L14579
.L14941:
	ldr	r3, [sp, #48]
	lsr	r2, r3, #21
	lsl	r3, r3, #11
	str	r3, [sp, #24]
	str	r2, [sp, #28]
	mov	r2, #2352
	mov	r0, r2
	b	.L14645
.L14718:
	ldr	r4, [sp, #32]
	ldr	r8, [sp, #36]
.L14916:
	mvn	r5, #3
	b	.L14579
.L14596:
	lsr	r3, r5, #16
	mov	r7, #8
	ubfx	r1, r5, #8, #8
	lsr	r2, r3, r7
	strb	r2, [r6, #4]
	strb	r3, [r6, #5]
	strb	r1, [r6, #6]
	strb	r5, [r6, #7]
	b	.L14581
.L14901:
	strd	r8, [sp, #16]
	ldr	r8, [sp, #52]
	strd	r4, [sp, #40]
	ldr	r4, [sp, #48]
	ldrd	r10, [sp, #56]
	ldr	r9, [sp, #72]
	b	.L14916
.L14953:
	mov	r0, r8
	mov	r1, r9
	ldr	r3, [r7, #40]
	mov	r2, #8448
	add	r8, sp, #52
	ldr	r9, [sp, #72]
	strd	r0, [sp, #16]
	movt	r2, 5
	ldr	ip, [sp, #20]
	strd	r4, [sp, #40]
	str	r2, [r7, #28]
	subs	r1, r3, #32
	lsr	r2, r0, r3
	rsb	r3, r3, #32
	ldr	r4, [sp, #48]
	ldm	r8, {r8, r10, fp}
	orr	r2, r2, ip, lsl r3
	movpl	r3, ip
	ldr	r5, [sp, #76]
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r7, #24]	@ zero_extendqisi2
	str	r2, [r7, #32]
	orr	r3, r3, #64
	strb	r3, [r7, #24]
	b	.L14579
.L14952:
	strd	r8, [sp, #16]
	ldr	r8, [sp, #52]
	strd	r4, [sp, #40]
	ldr	r4, [sp, #48]
	ldrd	r10, [sp, #56]
	ldr	r9, [sp, #72]
	ldr	r5, [sp, #76]
	b	.L14579
.L14954:
	ldr	r0, .L14968+56
	strd	r8, [sp, #16]
	strd	r4, [sp, #40]
	ldr	r4, [sp, #48]
	ldr	r8, [sp, #52]
	ldrd	r10, [sp, #56]
	ldrh	r3, [r0]
	ldr	r9, [sp, #72]
	tst	r3, #4
	bne	.L14966
.L14630:
	mov	r2, #4352
	ldr	r3, [r7, #40]
	mov	r5, #0
	movt	r2, 3
	ldr	r0, [sp, #20]
	str	r2, [r7, #28]
	ldr	r2, [sp, #16]
	subs	r1, r3, #32
	lsr	r2, r2, r3
	rsb	r3, r3, #32
	orr	r2, r2, r0, lsl r3
	movpl	r3, r0
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r7, #24]	@ zero_extendqisi2
	str	r2, [r7, #32]
	orr	r3, r3, #64
	strb	r3, [r7, #24]
	b	.L14579
.L14601:
	mvn	r2, #85
	str	r7, [r6, #8]	@ unaligned
	mov	r7, #20
	strb	r3, [r6, #13]
	ldr	r3, [sp, #32]
	strb	r2, [r6, #14]
	ldr	r3, [r3, #16]
	lsr	r2, r3, #16
	ubfx	r1, r3, #8, #8
	strb	r2, [r6, #17]
	strb	r3, [r6, #19]
	lsr	r3, r2, #8
	strb	r1, [r6, #18]
	strb	r3, [r6, #16]
	b	.L14581
.L14949:
	ldr	r0, [r5]
	ubfx	r3, r3, #1, #1
	cmp	r0, #0
	moveq	r3, #1
	cmp	r3, #0
	bne	.L14587
	mov	r1, #1
	bl	vfs_fsync
	b	.L14587
.L14950:
	movw	r1, #:lower16:.LC1137
	mov	r0, fp
	movt	r1, #:upper16:.LC1137
	bl	send_message
	b	.L14608
.L14951:
	strd	r8, [sp, #16]
	ldr	r8, [sp, #52]
	strd	r4, [sp, #40]
	ldr	r4, [sp, #48]
	ldrd	r10, [sp, #56]
	ldr	r9, [sp, #72]
	b	.L14630
.L14955:
	movw	r2, #257
	mov	r1, #256
	strb	r5, [r6, #30]
	movt	r2, 5121
	movt	r1, 20
	movw	r3, #5121
	mov	r0, #65536
	str	r2, [r6, #2]	@ unaligned
	mov	r2, #40960
	movt	r3, 41472
	cmp	r7, #0
	str	r2, [r6, #6]	@ unaligned
	mov	r2, #256
	str	r0, [r6, #10]	@ unaligned
	str	r1, [r6, #14]	@ unaligned
	mov	r1, #161
	str	r1, [r6, #18]	@ unaligned
	str	r2, [r6, #22]	@ unaligned
	str	r3, [r6, #26]	@ unaligned
	strb	r5, [r6, #31]
	strb	r5, [r6, #32]
	beq	.L14599
	ldr	r3, [sp, #32]
	strb	r5, [r6, #33]
	mov	r1, #1
	mov	r2, #75
	mov	lr, #60
	movw	r0, #4500
	ldr	r3, [r3, #16]
	strb	r1, [r6, #37]
	strb	r5, [r6, #39]
	strb	r1, [r6, #40]
	strb	ip, [r6, #46]
	mov	ip, #20
	add	r3, r3, #150
	strb	ip, [r6, #38]
	sdiv	r1, r3, r2
	strb	r5, [r6, #41]
	sdiv	r0, r3, r0
	sdiv	ip, r1, lr
	mls	r3, r2, r1, r3
	strb	r0, [r6, #34]
	strb	r5, [r6, #42]
	strb	r5, [r6, #43]
	strb	r3, [r6, #36]
	strb	r5, [r6, #44]
	strb	r5, [r6, #45]
	strb	r5, [r6, #47]
	mls	r3, lr, ip, r1
	strb	r3, [r6, #35]
.L14600:
	mov	r3, #46
	mov	r2, #0
	mov	r5, #48
	strb	r2, [r6]
	strb	r3, [r6, #1]
	b	.L14579
.L14656:
	ldr	r3, [fp, #136]
	sub	r8, r8, r0
	mov	r2, #1
	ldrd	r0, [sp, #24]
	sub	r3, r3, r5
	adds	r0, r0, r5
	str	r3, [fp, #136]
	ldr	r3, [r6, #16]
	adc	r1, r1, r5, asr #31
	strd	r0, [sp, #24]
	str	r5, [r3, #4]
	str	r2, [r6, #4]
	b	.L14658
.L14946:
	ldrb	r3, [fp, #144]	@ zero_extendqisi2
	mov	r1, #36
	mov	r0, r6
	mov	r7, r1
	orr	r3, r3, #16
	strb	r3, [fp, #144]
	bl	__memzero
	mov	r2, #127
	mov	r3, #31
	strb	r2, [r6]
	strb	r3, [r6, #4]
	b	.L14581
.L14947:
	mov	r0, r7
	bl	strlen
	movw	r3, #:lower16:.LC1122
	add	r2, r7, r0
	movt	r3, #:upper16:.LC1122
	ldr	r1, [r3]
	ldrh	r3, [r3, #4]
	str	r1, [r7, r0]	@ unaligned
	strh	r3, [r2, #4]	@ unaligned
	ldr	r3, [sp, #32]
	strb	r5, [r3, #4008]
	b	.L14583
.L14956:
	ldr	r1, [r8, #84]
	movw	r2, #:lower16:.LC853
	sub	r0, r0, #18
	movt	r2, #:upper16:.LC853
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L14544
.L14965:
	ldr	r3, [sp, #48]
	movw	r1, #4500
	mov	r2, #75
	mvn	ip, #0
	mov	r5, #0
	mov	r7, #1
	add	r0, r3, #150
	ldr	r3, [r6]
	mov	r6, #60
	sdiv	r1, r0, r1
	sdiv	lr, r0, r2
	str	r1, [sp, #32]
	mov	r1, r3
	mls	r2, r2, lr, r0
	add	r0, r3, #2064
	strb	r5, [r1], #1
	str	ip, [r3, #1]	@ unaligned
	str	ip, [r1, #4]	@ unaligned
	strh	ip, [r1, #8]	@ unaligned
	sdiv	ip, lr, r6
	ldr	r1, [sp, #32]
	strb	r5, [r3, #11]
	mvn	r5, #4
	strb	r1, [r3, #12]
	mov	r1, #288
	strb	r2, [r3, #14]
	strb	r7, [r3, #15]
	mls	ip, r6, ip, lr
	strb	ip, [r3, #13]
	bl	__memzero
	b	.L14579
.L14964:
	movw	r2, #:lower16:.LC740
	mov	r3, r5
	movt	r2, #:upper16:.LC740
	add	r1, r7, #48
	sub	r0, r0, #18
	bl	__dynamic_dev_dbg
	b	.L14655
.L14966:
	movw	r2, #:lower16:.LC1143
	mov	r3, r6
	movt	r2, #:upper16:.LC1143
	add	r1, r7, #48
	sub	r0, r0, #18
	bl	__dynamic_dev_dbg
	b	.L14630
.L14599:
	ldr	r3, [sp, #32]
	movw	r2, #5121
	movt	r2, 256
	ldr	r3, [r3, #16]
	str	r2, [r6, #37]	@ unaligned
	lsr	r2, r3, #16
	str	r7, [r6, #41]	@ unaligned
	lsr	r1, r2, #8
	strb	r3, [r6, #36]
	ubfx	r3, r3, #8, #8
	strb	r7, [r6, #45]
	strb	r1, [r6, #33]
	strb	r2, [r6, #34]
	strb	r3, [r6, #35]
	strb	r7, [r6, #46]
	strb	r7, [r6, #47]
	b	.L14600
.L14942:
	add	r0, sp, #28
	ldr	r2, [sp, #24]
	mov	ip, r4
	ldm	r0, {r0, r4, r8}
	mov	r1, #8448
	movt	r1, 5
	ldrb	r3, [r7, #24]	@ zero_extendqisi2
	lsr	r2, r2, #9
	str	r1, [r7, #28]
	orr	r2, r2, r0, lsl #23
	orr	r3, r3, #64
	strb	r3, [r7, #24]
	str	r2, [r7, #32]
	ldr	r3, [r6, #16]
	mov	r2, #1
	str	ip, [r3, #4]
	str	r2, [r6, #4]
	b	.L14651
.L14904:
	ldr	r4, [sp, #32]
	ldr	r8, [sp, #36]
	b	.L14659
.L14903:
	ldr	r4, [sp, #32]
	ldr	r8, [sp, #36]
	b	.L14651
.L14945:
	ldr	r4, [sp, #32]
	ldr	r8, [sp, #36]
	b	.L14709
.L14944:
	movw	r2, #:lower16:.LC741
	mov	r3, r0
	ldr	r0, .L14970
	movt	r2, #:upper16:.LC741
	add	r1, r7, #48
	str	r4, [sp]
	bl	__dynamic_dev_dbg
	b	.L14657
.L14592:
	mov	r3, #9216
	mvn	r7, #21
	movt	r3, 5
	str	r3, [r1, #28]
	b	.L14581
.L14915:
	mov	r3, #8448
	mvn	r5, #21
	movt	r3, 5
	str	r3, [r7, #28]
	b	.L14579
.L14962:
	ldr	r0, .L14970+4
	ldrh	r3, [r0]
	tst	r3, #4
	bne	.L14967
.L14611:
	ldr	r3, [sp, #12]
	mvn	r7, #21
	str	r3, [r6, #28]
	b	.L14581
.L14605:
	mov	r3, #9216
	mvn	r7, #21
	movt	r3, 5
	str	r3, [r6, #28]
	b	.L14581
.L14967:
	movw	r2, #:lower16:.LC1138
	add	r1, r6, #48
	movt	r2, #:upper16:.LC1138
	sub	r0, r0, #18
	bl	__dynamic_dev_dbg
	b	.L14611
.L14963:
	movw	r2, #:lower16:.LC805
	add	r1, r6, #48
	movt	r2, #:upper16:.LC805
	sub	r0, r0, #18
	bl	__dynamic_dev_dbg
	b	.L14617
.L14570:
	movw	r0, #:lower16:.LC1148
	ldr	r1, .L14970+8
	movt	r0, #:upper16:.LC1148
	bl	printk
	movw	r1, #:lower16:.LC1149
	mov	r0, fp
	movt	r1, #:upper16:.LC1149
	bl	send_message
	b	.L14581
.L14571:
	movw	r0, #:lower16:.LC1148
	ldr	r1, .L14970+12
	movt	r0, #:upper16:.LC1148
	bl	printk
	movw	r1, #:lower16:.LC1150
	mov	r0, fp
	movt	r1, #:upper16:.LC1150
	bl	send_message
	b	.L14581
.L14552:
	ldrb	r7, [fp, #80]	@ zero_extendqisi2
	add	r6, fp, #235
	movw	r0, #:lower16:.LC1152
	ldr	r1, .L14970+16
	mov	r3, r6
	movt	r0, #:upper16:.LC1152
	mov	r2, r7
	str	r7, [fp, #128]
	ldr	r5, [r4]
	bl	printk
	ldr	r1, [fp, #128]
	cmp	r1, #0
	beq	.L14660
	mov	r0, r5
	bl	__memzero
.L14660:
	cmp	r7, #101
	mov	r1, r6
	movhi	r2, #101
	mov	r0, r5
	movls	r2, r7
	movhi	r7, r2
	bl	memcpy
	b	.L14581
.L14971:
	.align	2
.L14970:
	.word	.LANCHOR8-3672
	.word	.LANCHOR8-3750
	.word	.LANCHOR5-64
	.word	.LANCHOR5-48
	.word	.LANCHOR5-32
	.fnend
	.size	fsg_main_thread, .-fsg_main_thread
	.align	2
	.global	usb_diag_open
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_open, %function
usb_diag_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r5, #:lower16:.LANCHOR0
	movt	r5, #:upper16:.LANCHOR0
	strd	r6, [sp, #8]
	mov	r6, r0
	ldr	r0, .L14986
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r8, r2
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5]
	mov	r9, r0
	cmp	r5, r4
	beq	.L14973
	sub	r4, r4, #4
	b	.L14975
.L14984:
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L14973
.L14975:
	mov	r0, r6
	ldr	r1, [r4]
	bl	strcmp
	cmp	r0, #0
	bne	.L14984
	mov	r1, r9
	ldr	r0, .L14986
	bl	_raw_spin_unlock_irqrestore
.L14977:
	ldr	r0, .L14986
	str	r6, [r4]
	str	r8, [r4, #12]
	str	r7, [r4, #16]
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:.LANCHOR0
	mov	r6, r0
	ldr	r1, [r5, #4]
	add	r0, r4, #4
	movt	r2, #:upper16:.LANCHOR0
	bl	__list_add
	mov	r1, r6
	ldr	r0, .L14986
	bl	_raw_spin_unlock_irqrestore
.L14972:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L14973:
	ldr	r0, .L14986
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L14985
	mov	r2, #24
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	bne	.L14977
	mvn	r4, #11
	b	.L14972
.L14985:
	mov	r4, #16
	b	.L14977
.L14987:
	.align	2
.L14986:
	.word	.LANCHOR1+3544
	.fnend
	.size	usb_diag_open, .-usb_diag_open
	.align	2
	.global	usb_diag_close
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_close, %function
usb_diag_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	ldr	r0, .L14996
	strd	r6, [sp, #8]
	mov	r6, #0
	movw	r7, #:lower16:.LANCHOR1
	str	r8, [sp, #16]
	movt	r7, #:upper16:.LANCHOR1
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	add	r0, r4, #4
	str	r6, [r4, #12]
	str	r6, [r4, #16]
	bl	list_del
	ldr	r1, .L14996+4
	ldr	r3, [r7, #3640]
	cmp	r3, r1
	sub	r3, r3, #140
	beq	.L14990
.L14989:
	ldr	r2, [r3, #124]
	cmp	r2, r4
	beq	.L14995
	ldr	r3, [r3, #140]
	cmp	r3, r1
	sub	r3, r3, #140
	bne	.L14989
.L14990:
	mov	r0, r4
	bl	kfree
	mov	r1, r5
	ldr	r0, .L14996
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
.L14995:
	ldr	r2, [r3, #140]
	str	r6, [r3, #124]
	cmp	r2, r1
	sub	r3, r2, #140
	bne	.L14989
	b	.L14990
.L14997:
	.align	2
.L14996:
	.word	.LANCHOR1+3544
	.word	.LANCHOR1+3640
	.fnend
	.size	usb_diag_close, .-usb_diag_close
	.align	2
	.global	usb_diag_alloc_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_alloc_req, %function
usb_diag_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #20]
	.pad #12
	sub	sp, sp, #12
	cmp	r4, #0
	beq	.L15013
	add	fp, r4, #108
	mov	r5, r4
	mov	r0, fp
	mov	r10, r2
	mov	r8, r1
	bl	_raw_spin_lock_irqsave
	ldr	r7, [r5, #100]!
	str	r0, [sp, #4]
	cmp	r7, r5
	ldr	r6, [r7]
	beq	.L15000
.L15001:
	mov	r0, r7
	sub	r7, r7, #36
	bl	list_del
	ldr	r0, [r4, #88]
	mov	r1, r7
	mov	r7, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r5, r6
	ldr	r6, [r6]
	bne	.L15001
.L15000:
	mov	r7, r4
	ldr	r9, [r7, #92]!
	cmp	r9, r7
	ldr	r6, [r9]
	beq	.L15002
.L15003:
	mov	r0, r9
	sub	r9, r9, #36
	bl	list_del
	ldr	r0, [r4, #84]
	mov	r1, r9
	mov	r9, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r6
	ldr	r6, [r6]
	bne	.L15003
.L15002:
	cmp	r8, #0
	ble	.L15004
	movw	r9, #:lower16:diag_write_complete
	mov	r6, #0
	movt	r9, #:upper16:diag_write_complete
	b	.L15006
.L15027:
	str	r9, [r3, #28]
	ldr	r1, [r4, #104]
	bl	__list_add
	cmp	r8, r6
	beq	.L15004
.L15006:
	ldr	r0, [r4, #88]
	mov	r1, #32
	add	r6, r6, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r5
	add	r0, r3, #36
	bne	.L15027
.L15005:
	ldr	r8, [r4, #100]
	cmp	r8, r5
	ldr	r6, [r8]
	beq	.L15009
.L15010:
	mov	r0, r8
	sub	r8, r8, #36
	bl	list_del
	ldr	r0, [r4, #88]
	mov	r1, r8
	mov	r8, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r5, r6
	ldr	r6, [r6]
	bne	.L15010
.L15009:
	ldr	r6, [r4, #92]
	cmp	r6, r7
	ldr	r5, [r6]
	beq	.L15011
.L15012:
	mov	r0, r6
	sub	r6, r6, #36
	bl	list_del
	ldr	r0, [r4, #84]
	mov	r1, r6
	mov	r6, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r5
	ldr	r5, [r5]
	bne	.L15012
.L15011:
	mov	r0, fp
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #11
.L14998:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15004:
	cmp	r10, #0
	ble	.L15007
	movw	r8, #:lower16:diag_read_complete
	mov	r6, #0
	movt	r8, #:upper16:diag_read_complete
	b	.L15008
.L15028:
	str	r8, [r3, #28]
	ldr	r1, [r4, #96]
	bl	__list_add
	cmp	r10, r6
	beq	.L15007
.L15008:
	ldr	r0, [r4, #84]
	mov	r1, #32
	add	r6, r6, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r7
	add	r0, r3, #36
	bne	.L15028
	b	.L15005
.L15007:
	mov	r0, fp
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	b	.L14998
.L15013:
	mvn	r0, #18
	b	.L14998
	.fnend
	.size	usb_diag_alloc_req, .-usb_diag_alloc_req
	.align	2
	.global	usb_diag_read
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_read, %function
usb_diag_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #20]
	cmp	r4, #0
	beq	.L15033
	add	r8, r4, #108
	mov	r6, r1
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	mov	r10, r0
	cmp	r3, #0
	beq	.L15039
	ldr	r5, [r4, #92]
	add	r9, r4, #92
	cmp	r9, r5
	beq	.L15040
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del
	mov	r1, r10
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6]
	mov	r1, r7
	mov	r2, #32
	str	r3, [r5, #-36]
	ldr	r3, [r6, #4]
	str	r3, [r5, #-32]
	str	r6, [r5, #-4]
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L15041
.L15029:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15033:
	mvn	r0, #18
	b	.L15029
.L15039:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L15029
.L15041:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r2, r9
	ldr	r1, [r4, #96]
	mov	r0, r5
	bl	__list_add
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, .L15042
	ldr	r0, .L15042+4
	bl	___ratelimit
	cmp	r0, #0
	mvneq	r0, #4
	beq	.L15029
	ldr	r3, [r4, #116]
	movw	r1, #:lower16:.LC1155
	movt	r1, #:upper16:.LC1155
	ldr	r2, .L15042
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mvn	r0, #4
	b	.L15029
.L15040:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #116]
	movw	r1, #:lower16:.LC1154
	movt	r1, #:upper16:.LC1154
	ldr	r2, .L15042
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mvn	r0, #10
	b	.L15029
.L15043:
	.align	2
.L15042:
	.word	.LANCHOR5+4
	.word	.LANCHOR6-1756
	.fnend
	.size	usb_diag_read, .-usb_diag_read
	.align	2
	.global	usb_diag_write
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_diag_write, %function
usb_diag_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #20]
	cmp	r4, #0
	beq	.L15050
	add	r8, r4, #108
	mov	r6, r1
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #112]
	mov	r10, r0
	cmp	r3, #0
	beq	.L15055
	ldr	r5, [r4, #100]
	add	r9, r4, #100
	cmp	r9, r5
	beq	.L15056
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del
	mov	r1, r10
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6]
	mov	r1, r7
	mov	r2, #32
	str	r3, [r5, #-36]
	ldr	r3, [r6, #4]
	str	r3, [r5, #-32]
	str	r6, [r5, #-4]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L15057
	ldr	r2, [r4, #128]
	ldr	r3, [r4, #136]
	add	r2, r2, #1
	add	r3, r3, #1
	str	r2, [r4, #128]
	str	r3, [r4, #136]
.L15044:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15050:
	mvn	r0, #18
	b	.L15044
.L15055:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L15044
.L15057:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r2, r9
	ldr	r1, [r4, #104]
	mov	r0, r5
	bl	__list_add
	ldr	r1, .L15059
	ldr	r0, .L15059+4
	bl	___ratelimit
	cmp	r0, #0
	bne	.L15058
.L15049:
	mov	r0, r8
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L15044
.L15056:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #116]
	movw	r1, #:lower16:.LC1154
	movt	r1, #:upper16:.LC1154
	ldr	r2, .L15059
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	mvn	r0, #10
	b	.L15044
.L15058:
	ldr	r3, [r4, #116]
	movw	r1, #:lower16:.LC1155
	movt	r1, #:upper16:.LC1155
	ldr	r2, .L15059
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	b	.L15049
.L15060:
	.align	2
.L15059:
	.word	.LANCHOR5+20
	.word	.LANCHOR6-1732
	.fnend
	.size	usb_diag_write, .-usb_diag_write
	.align	2
	.global	diag_function_add
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_add, %function
diag_function_add:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15085
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	mov	r6, r1
	str	r8, [sp, #16]
	mov	r8, r2
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L15080
.L15062:
	movw	r5, #:lower16:.LANCHOR0
	movt	r5, #:upper16:.LANCHOR0
	ldr	r4, [r5]
	cmp	r5, r4
	sub	r4, r4, #4
	bne	.L15065
	b	.L15063
.L15081:
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L15063
.L15065:
	mov	r0, r6
	ldr	r1, [r4]
	bl	strcmp
	cmp	r0, #0
	bne	.L15081
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15082
	mov	r2, #148
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L15083
.L15067:
	movw	r3, #:lower16:.LANCHOR1
	add	r6, r5, #140
	ldr	r2, .L15085+4
	movt	r3, #:upper16:.LANCHOR1
	mov	r0, r6
	ldr	r1, [r3, #3644]
	bl	__list_add
	ldr	r3, .L15085+8
	str	r8, [r5, #120]
	movw	ip, #:lower16:diag_function_bind
	str	r4, [r5, #124]
	ldr	r2, [r7, #24]
	movt	ip, #:upper16:diag_function_bind
	movw	r1, #:lower16:diag_function_unbind
	movw	r0, #:lower16:diag_function_set_alt
	movt	r1, #:upper16:diag_function_unbind
	movt	r0, #:upper16:diag_function_set_alt
	mov	lr, #0
	str	r2, [r5, #116]
	ldr	r4, [r4]
	movw	r2, #:lower16:diag_function_disable
	movt	r2, #:upper16:diag_function_disable
	str	r3, [r5, #16]
	add	r3, r3, #40
	str	r4, [r5]
	str	r3, [r5, #8]
	add	r3, r5, #100
	str	ip, [r5, #32]
	add	ip, r5, #92
	str	r1, [r5, #36]
	mov	r1, r5
	str	r0, [r5, #40]
	mov	r0, r7
	str	r2, [r5, #48]
	str	ip, [r5, #92]
	str	ip, [r5, #96]
	str	r3, [r5, #100]
	str	r3, [r5, #104]
	str	lr, [r5, #108]
	bl	usb_add_function
	subs	r4, r0, #0
	bne	.L15084
.L15061:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15082:
	mov	r5, #16
	b	.L15067
.L15084:
	ldr	r3, [r7, #24]
	movw	r1, #:lower16:.LC1157
	movt	r1, #:upper16:.LC1157
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info
	mov	r0, r6
	bl	list_del
	mov	r0, r5
	bl	kfree
	b	.L15061
.L15080:
	ldr	r1, [r7, #24]
	movw	r2, #:lower16:.LC1156
	sub	r0, r3, #32
	movt	r2, #:upper16:.LC1156
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L15062
.L15063:
	ldr	r3, [r7, #24]
	movw	r1, #:lower16:.LC1158
	mvn	r4, #18
	movt	r1, #:upper16:.LC1158
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	dev_err
	b	.L15061
.L15083:
	mvn	r4, #11
	b	.L15061
.L15086:
	.align	2
.L15085:
	.word	.LANCHOR8-3616
	.word	.LANCHOR1+3640
	.word	.LANCHOR0+2600
	.fnend
	.size	diag_function_add, .-diag_function_add
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	diag_function_bind_config, %function
diag_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r2, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	movw	r10, #:lower16:__stack_chk_guard
	str	lr, [sp, #32]
	ldr	r3, [r2, #3232]!
	movt	r10, #:upper16:__stack_chk_guard
	ldr	r0, [r10]
	.pad #44
	sub	sp, sp, #44
	ldr	r1, [r1, #24]
	cmp	r3, r2
	sub	r5, r3, #512
	str	r0, [sp, #36]
	bne	.L15090
	b	.L15088
.L15108:
	ldr	r3, [r5, #512]
	cmp	r3, r2
	sub	r5, r3, #512
	beq	.L15088
.L15090:
	ldr	r3, [r3, #-504]
	cmp	r1, r3
	bne	.L15108
.L15088:
	mov	r2, #32
	ldr	r1, .L15111
	add	r0, sp, #4
	bl	strlcpy
	add	r0, sp, #4
	bl	strim
	cmp	r0, #0
	str	r0, [sp]
	beq	.L15096
	movw	r6, #:lower16:.LC487
	movw	r9, #:lower16:usb_diag_update_pid_and_serial_num
	movt	r6, #:upper16:.LC487
	movt	r9, #:upper16:usb_diag_update_pid_and_serial_num
	mov	r4, #0
	mvn	r8, #0
	b	.L15094
.L15109:
	ldr	r2, [r2]
	cmp	r2, #0
	moveq	r2, r9
.L15092:
	cmp	fp, #0
	beq	.L15093
	mov	r1, fp
	mov	r0, r7
	bl	diag_function_add
	subs	r8, r0, #0
	beq	.L15093
	movw	r0, #:lower16:.LC1159
	mov	r2, fp
	ldr	r1, .L15111+4
	movt	r0, #:upper16:.LC1159
	bl	printk
.L15093:
	ldr	r3, [sp]
	add	r4, r4, #1
	cmp	r3, #0
	beq	.L15087
.L15094:
	mov	r1, r6
	mov	r0, sp
	bl	strsep
	cmp	r4, #0
	mov	fp, r0
	movne	r2, #0
	bne	.L15092
	ldr	r2, [r5, #44]
	cmp	r2, #0
	bne	.L15109
	movw	r2, #:lower16:usb_diag_update_pid_and_serial_num
	movt	r2, #:upper16:usb_diag_update_pid_and_serial_num
	b	.L15092
.L15096:
	mvn	r8, #0
.L15087:
	ldr	r2, [sp, #36]
	mov	r0, r8
	ldr	r3, [r10]
	cmp	r2, r3
	bne	.L15110
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15110:
	bl	__stack_chk_fail
.L15112:
	.align	2
.L15111:
	.word	.LANCHOR1+3664
	.word	.LANCHOR5+36
	.fnend
	.size	diag_function_bind_config, .-diag_function_bind_config
	.align	2
	.global	send_sps_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	send_sps_req, %function
send_sps_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15129
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
	ldrh	r1, [r3, #-6]
	ldr	r2, [r6, #84]
	tst	r1, #4
	ldr	r7, [r2]
	bne	.L15126
.L15114:
	ldr	r3, [r4, #8]
	mov	r1, #32
	mov	r0, r4
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L15127
	movw	r0, #:lower16:.LC528
	ldr	r1, [r7, #28]
	movt	r0, #:upper16:.LC528
	bl	strcmp
	movw	r3, #:lower16:.LANCHOR1
	cmp	r0, #0
	movt	r3, #:upper16:.LANCHOR1
	moveq	r2, #32768
	ldr	r3, [r3, #4028]
	orreq	r3, r3, #1312
	bne	.L15128
.L15118:
	str	r2, [r5, #4]
	mov	r1, r5
	mov	r0, r4
	str	r3, [r5, #52]
	mov	r2, #32
	str	r5, [r6, #96]
	ldr	r3, [r4, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L15113
	movw	r0, #:lower16:.LC1162
	movt	r0, #:upper16:.LC1162
	bl	printk
	mvn	r0, #4
.L15113:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15128:
	bic	r3, r3, #65536
	mov	r2, #0
	bic	r3, r3, #96
	orr	r3, r3, #65536
	orr	r3, r3, #32
	b	.L15118
.L15126:
	movw	r1, #:lower16:.LC1160
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC1160
	bl	__dynamic_pr_debug
	b	.L15114
.L15127:
	movw	r0, #:lower16:.LC1161
	movt	r0, #:upper16:.LC1161
	bl	printk
	mvn	r0, #11
	b	.L15113
.L15130:
	.align	2
.L15129:
	.word	.LANCHOR8-3600
	.fnend
	.size	send_sps_req, .-send_sps_req
	.align	2
	.global	init_data
	.syntax unified
	.arm
	.fpu softvfp
	.type	init_data, %function
init_data:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, .L15146
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0]
	ldrh	r2, [r5, #-14]
	ldr	r3, [r3, #84]
	tst	r2, #4
	ldr	r6, [r3]
	bne	.L15143
.L15132:
	movw	r0, #:lower16:.LC528
	ldr	r1, [r6, #28]
	movt	r0, #:upper16:.LC528
	bl	strcmp
	cmp	r0, #0
	beq	.L15144
	ldr	r3, .L15146+4
	ldrh	r4, [r3, #-6]
	ubfx	r4, r4, #2, #1
	cmp	r4, #0
	bne	.L15145
.L15131:
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15144:
	mov	r0, r4
	bl	msm_ep_config
	subs	r4, r0, #0
	beq	.L15131
	movw	r0, #:lower16:.LC1164
	movt	r0, #:upper16:.LC1164
	bl	printk
	b	.L15131
.L15143:
	movw	r1, #:lower16:.LC1163
	sub	r0, r5, #32
	movt	r1, #:upper16:.LC1163
	bl	__dynamic_pr_debug
	b	.L15132
.L15145:
	movw	r1, #:lower16:.LC1165
	sub	r0, r5, #8
	movt	r1, #:upper16:.LC1165
	mov	r4, #0
	bl	__dynamic_pr_debug
	b	.L15131
.L15147:
	.align	2
.L15146:
	.word	.LANCHOR8-3568
	.word	.LANCHOR8-3552
	.fnend
	.size	init_data, .-init_data
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_connect_work, %function
usb_qdss_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	ldr	r5, .L15175
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	ldrh	r3, [r5, #-14]
	tst	r3, #4
	bne	.L15170
.L15149:
	ldr	r0, [r4, #-48]
	bl	init_data
	cmp	r0, #0
	movwne	r0, #:lower16:.LC1167
	movtne	r0, #:upper16:.LC1167
	bne	.L15169
	ldr	r3, .L15175+4
	ldr	r2, [r4, #-72]
	ldr	r9, [r4, #-48]
	ldrh	r3, [r3, #-6]
	ldr	r6, [r2]
	tst	r3, #4
	bne	.L15171
.L15151:
	mov	r2, #1
	mov	r3, #0
	ldr	r0, [r6, #28]
	mov	r1, r2
	movw	r5, #:lower16:.LANCHOR1
	bl	usb_bam_get_connection_idx
	uxtb	r7, r0
	ldr	r1, .L15175+8
	movt	r5, #:upper16:.LANCHOR1
	mov	r0, r7
	bl	usb_bam_connect
	movw	r3, #:lower16:kmalloc_caches
	mov	r8, r0
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r5, #4040]
	beq	.L15153
	mov	r2, #16
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r5, #4040]
	beq	.L15172
.L15153:
	ldr	r0, [r6, #28]
	bl	usb_bam_set_qdss_core
	ldr	r3, .L15175+12
	mov	r2, #0
	mov	r0, r7
	ldr	ip, [r5, #4040]
	add	r1, r3, #4
	stm	sp, {r2, ip}
	sub	r2, r3, #4
	bl	get_bam2bam_connection_info
	movw	r0, #:lower16:.LC528
	ldr	r1, [r6, #28]
	movt	r0, #:upper16:.LC528
	bl	strcmp
	cmp	r0, #0
	beq	.L15173
	cmp	r8, #0
	bne	.L15154
.L15156:
	ldr	r5, [r4, #-32]
	cmp	r5, #0
	beq	.L15157
	sub	r3, r4, #44
	mov	r2, r8
	ldr	r0, [r4, #-28]
	mov	r1, r8
	blx	r5
.L15157:
	ldr	r0, [r4, #-48]
	bl	send_sps_req
	cmp	r0, #0
	bne	.L15174
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L15173:
	ldr	r2, [r5, #4040]
	mov	r0, r9
	ldrb	r3, [r5, #4028]	@ zero_extendqisi2
	ldmib	r2, {r1, r2}
	bl	msm_data_fifo_config
	cmp	r8, #0
	beq	.L15156
.L15154:
	movw	r0, #:lower16:.LC1170
	movt	r0, #:upper16:.LC1170
.L15169:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk
.L15171:
	movw	r1, #:lower16:.LC1168
	sub	r0, r5, #8
	movt	r1, #:upper16:.LC1168
	bl	__dynamic_pr_debug
	b	.L15151
.L15170:
	movw	r1, #:lower16:.LC1166
	sub	r0, r5, #32
	movt	r1, #:upper16:.LC1166
	bl	__dynamic_pr_debug
	b	.L15149
.L15174:
	movw	r0, #:lower16:.LC1171
	movt	r0, #:upper16:.LC1171
	b	.L15169
.L15172:
	movw	r0, #:lower16:.LC1169
	movt	r0, #:upper16:.LC1169
	bl	printk
	b	.L15154
.L15176:
	.align	2
.L15175:
	.word	.LANCHOR8-3520
	.word	.LANCHOR8-3504
	.word	.LANCHOR1+4028
	.word	.LANCHOR1+4032
	.fnend
	.size	usb_qdss_connect_work, .-usb_qdss_connect_work
	.section	.text.unlikely
	.align	2
	.global	uninit_data
	.syntax unified
	.arm
	.fpu softvfp
	.type	uninit_data, %function
uninit_data:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	mov	r4, r0
	ldr	r3, [r4]
	movw	r0, #:lower16:.LC1172
	movt	r0, #:upper16:.LC1172
	ldr	r3, [r3, #84]
	ldr	r5, [r3]
	bl	printk
	movw	r0, #:lower16:.LC528
	movt	r0, #:upper16:.LC528
	ldr	r1, [r5, #28]
	bl	strcmp
	cmp	r0, #0
	movne	r4, #0
	bne	.L15177
	mov	r0, r4
	bl	msm_ep_unconfig
	subs	r4, r0, #0
	beq	.L15177
	movw	r0, #:lower16:.LC1173
	movt	r0, #:upper16:.LC1173
	bl	printk
.L15177:
	mov	r0, r4
	pop	{r4, r5, r6, pc}
	.fnend
	.size	uninit_data, .-uninit_data
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_disconnect_work, %function
usb_qdss_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15204
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	beq	.L15185
	movw	r1, #:lower16:.LC1174
	sub	r0, r3, #32
	movt	r1, #:upper16:.LC1174
	bl	__dynamic_pr_debug
.L15185:
	ldr	r0, [r4, #-64]
	bl	uninit_data
	cmp	r0, #0
	beq	.L15186
	movw	r0, #:lower16:.LC1175
	ldr	r1, .L15204+4
	movt	r0, #:upper16:.LC1175
	bl	printk
.L15186:
	ldr	r5, [r4, #-48]
	cmp	r5, #0
	beq	.L15184
	mov	r3, #0
	mov	r1, #1
	ldr	r0, [r4, #-44]
	mov	r2, r3
	blx	r5
	ldr	r0, .L15204+8
	ldr	r2, [r4, #-88]
	ldrh	r3, [r0, #-6]
	ldr	r4, [r2]
	tst	r3, #4
	beq	.L15189
	movw	r1, #:lower16:.LC1168
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1168
	bl	__dynamic_pr_debug
.L15189:
	mov	r2, #1
	mov	r3, #0
	ldr	r0, [r4, #28]
	mov	r1, r2
	bl	usb_bam_get_connection_idx
	movw	r3, #:lower16:.LANCHOR1
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #4040]
	bl	kfree
	uxtb	r0, r4
	bl	usb_bam_disconnect_pipe
	cmp	r0, #0
	beq	.L15184
	movw	r0, #:lower16:.LC1176
	movt	r0, #:upper16:.LC1176
	bl	printk
	movw	r0, #:lower16:.LC1177
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC1177
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L15184:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15205:
	.align	2
.L15204:
	.word	.LANCHOR8-3472
	.word	.LANCHOR5+64
	.word	.LANCHOR8-3504
	.fnend
	.size	usb_qdss_disconnect_work, .-usb_qdss_disconnect_work
	.align	2
	.global	usb_qdss_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_free_req, %function
usb_qdss_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15221
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L15219
.L15207:
	ldr	r6, [r4, #20]
	cmp	r6, #0
	beq	.L15220
	mov	r7, r6
	ldr	r5, [r7, #148]!
	cmp	r5, r7
	ldr	r4, [r5]
	beq	.L15209
.L15210:
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del
	ldr	r0, [r6, #104]
	mov	r1, r5
	mov	r5, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r4
	ldr	r4, [r4]
	bne	.L15210
.L15209:
	mov	r7, r6
	ldr	r5, [r7, #140]!
	cmp	r7, r5
	ldr	r4, [r5]
	beq	.L15206
.L15212:
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del
	ldr	r0, [r6, #100]
	mov	r1, r5
	mov	r5, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r4
	ldr	r4, [r4]
	bne	.L15212
.L15206:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15219:
	movw	r1, #:lower16:.LC1178
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC1178
	bl	__dynamic_pr_debug
	b	.L15207
.L15220:
	movw	r0, #:lower16:.LC1179
	ldrd	r4, [sp]
	movt	r0, #:upper16:.LC1179
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L15222:
	.align	2
.L15221:
	.word	.LANCHOR8-3456
	.fnend
	.size	usb_qdss_free_req, .-usb_qdss_free_req
	.align	2
	.global	usb_qdss_alloc_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_alloc_req, %function
usb_qdss_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15242
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r8, r2
	mov	r9, r0
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r3, #-14]
	ldr	r4, [r0, #20]
	tst	r2, #4
	bne	.L15238
.L15224:
	cmp	r8, #0
	cmpgt	r7, #0
	movle	r5, #1
	movgt	r5, #0
	cmp	r4, #0
	moveq	r5, #1
	cmp	r5, #0
	movweq	r6, #:lower16:qdss_ctrl_write_complete
	addeq	r10, r4, #148
	movteq	r6, #:upper16:qdss_ctrl_write_complete
	bne	.L15239
.L15225:
	ldr	r0, [r4, #104]
	mov	r1, #32
	add	r5, r5, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r10
	add	r0, r3, #36
	beq	.L15240
	str	r6, [r3, #28]
	ldr	r1, [r4, #152]
	bl	__list_add
	cmp	r7, r5
	bgt	.L15225
	movw	r6, #:lower16:qdss_ctrl_read_complete
	mov	r5, #0
	movt	r6, #:upper16:qdss_ctrl_read_complete
	add	r7, r4, #140
.L15230:
	ldr	r0, [r4, #100]
	mov	r1, #32
	add	r5, r5, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r7
	add	r0, r3, #36
	beq	.L15241
	str	r6, [r3, #28]
	ldr	r1, [r4, #144]
	bl	__list_add
	cmp	r8, r5
	bgt	.L15230
	mov	r0, #0
.L15223:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15238:
	movw	r1, #:lower16:.LC1180
	sub	r0, r3, #32
	movt	r1, #:upper16:.LC1180
	bl	__dynamic_pr_debug
	b	.L15224
.L15239:
	movw	r0, #:lower16:.LC1181
	movt	r0, #:upper16:.LC1181
	bl	printk
	mvn	r0, #18
	b	.L15223
.L15241:
	movw	r0, #:lower16:.LC1183
	movt	r0, #:upper16:.LC1183
	bl	printk
.L15228:
	mov	r0, r9
	bl	usb_qdss_free_req
	mvn	r0, #11
	b	.L15223
.L15240:
	movw	r0, #:lower16:.LC1182
	movt	r0, #:upper16:.LC1182
	bl	printk
	b	.L15228
.L15243:
	.align	2
.L15242:
	.word	.LANCHOR8-3424
	.fnend
	.size	usb_qdss_alloc_req, .-usb_qdss_alloc_req
	.align	2
	.global	usb_qdss_ctrl_read
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_ctrl_read, %function
usb_qdss_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15261
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r3, #-6]
	ldr	r4, [r0, #20]
	tst	r2, #4
	bne	.L15257
.L15245:
	cmp	r4, #0
	beq	.L15249
	add	r8, r4, #188
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #92]
	mov	r10, r0
	cmp	r3, #0
	beq	.L15258
	ldr	r5, [r4, #140]
	add	r9, r4, #140
	cmp	r9, r5
	beq	.L15259
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del
	mov	r1, r10
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6]
	mov	r1, r7
	mov	r2, #32
	str	r3, [r5, #-36]
	ldr	r3, [r6, #4]
	str	r3, [r5, #-32]
	str	r6, [r5, #-4]
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L15260
.L15244:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15257:
	movw	r1, #:lower16:.LC1184
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC1184
	bl	__dynamic_pr_debug
	b	.L15245
.L15249:
	mvn	r0, #18
	b	.L15244
.L15258:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L15244
.L15260:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r2, r9
	ldr	r1, [r4, #144]
	mov	r0, r5
	bl	__list_add
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC1186
	movt	r0, #:upper16:.LC1186
	bl	printk
	mvn	r0, #4
	b	.L15244
.L15259:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC1185
	movt	r0, #:upper16:.LC1185
	bl	printk
	mvn	r0, #10
	b	.L15244
.L15262:
	.align	2
.L15261:
	.word	.LANCHOR8-3408
	.fnend
	.size	usb_qdss_ctrl_read, .-usb_qdss_ctrl_read
	.align	2
	.global	usb_qdss_ctrl_write
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_ctrl_write, %function
usb_qdss_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15280
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r3, #-14]
	ldr	r4, [r0, #20]
	tst	r2, #4
	bne	.L15276
.L15264:
	cmp	r4, #0
	beq	.L15268
	add	r8, r4, #188
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #92]
	mov	r10, r0
	cmp	r3, #0
	beq	.L15277
	ldr	r5, [r4, #148]
	add	r9, r4, #148
	cmp	r9, r5
	beq	.L15278
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del
	mov	r1, r10
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r6]
	mov	r1, r7
	mov	r2, #32
	str	r3, [r5, #-36]
	ldr	r3, [r6, #4]
	str	r3, [r5, #-32]
	str	r6, [r5, #-4]
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L15279
.L15263:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15276:
	movw	r1, #:lower16:.LC1187
	sub	r0, r3, #32
	movt	r1, #:upper16:.LC1187
	bl	__dynamic_pr_debug
	b	.L15264
.L15268:
	mvn	r0, #18
	b	.L15263
.L15277:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #4
	b	.L15263
.L15279:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r2, r9
	ldr	r1, [r4, #152]
	mov	r0, r5
	bl	__list_add
	mov	r1, r6
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC1186
	movt	r0, #:upper16:.LC1186
	bl	printk
	mvn	r0, #4
	b	.L15263
.L15278:
	movw	r0, #:lower16:.LC1188
	movt	r0, #:upper16:.LC1188
	bl	printk
	mov	r0, r8
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore
	mvn	r0, #10
	b	.L15263
.L15281:
	.align	2
.L15280:
	.word	.LANCHOR8-3376
	.fnend
	.size	usb_qdss_ctrl_write, .-usb_qdss_ctrl_write
	.align	2
	.global	usb_qdss_open
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_open, %function
usb_qdss_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15310
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	mov	r8, r2
	str	r10, [sp, #24]
	mov	r10, r1
	str	lr, [sp, #28]
	ldrh	r2, [r3, #-6]
	.pad #8
	sub	sp, sp, #8
	tst	r2, #4
	bne	.L15302
	cmp	r8, #0
	beq	.L15303
.L15284:
	movw	r7, #:lower16:.LANCHOR0
	ldr	r0, .L15310+4
	movt	r7, #:upper16:.LANCHOR0
	mov	r5, r7
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #268]!
	mov	r9, r0
	cmp	r4, r5
	sub	r4, r4, #4
	bne	.L15288
	b	.L15286
.L15304:
	ldr	r4, [r4, #4]
	cmp	r4, r5
	sub	r4, r4, #4
	beq	.L15286
.L15288:
	mov	r0, r6
	ldr	r1, [r4]
	bl	strcmp
	cmp	r0, #0
	bne	.L15304
	ldr	r0, .L15310+8
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L15305
.L15295:
	sub	r5, r4, #112
	str	r5, [r4, #20]
.L15291:
	mov	r3, #1
	mov	r1, r9
	ldr	r0, .L15310+4
	str	r6, [r4]
	str	r8, [r4, #12]
	str	r10, [r4, #16]
	str	r3, [r4, #24]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r5, #92]
	cmp	r3, #1
	beq	.L15306
.L15282:
	mov	r0, r4
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15286:
	ldr	r0, .L15310+12
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L15307
.L15293:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L15296
	mov	r2, #200
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L15308
.L15289:
	mov	r1, r9
	ldr	r0, .L15310+4
	bl	_raw_spin_unlock_irqrestore
	mov	r0, #0
	mov	r2, #1
	mov	r3, r0
	mov	r1, #10
	str	r0, [sp]
	mov	r0, r6
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r5, #196]
	beq	.L15309
	ldr	r0, .L15310+4
	add	r4, r5, #112
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	ldr	r2, .L15310+16
	add	r0, r5, #116
	ldr	r1, [r7, #272]
	bl	__list_add
	b	.L15291
.L15296:
	mov	r5, #16
	b	.L15289
.L15306:
	add	r1, r5, #156
	ldr	r0, [r5, #196]
	bl	queue_work
	b	.L15282
.L15302:
	movw	r1, #:lower16:.LC1189
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC1189
	bl	__dynamic_pr_debug
	cmp	r8, #0
	bne	.L15284
.L15303:
	movw	r0, #:lower16:.LC1190
	mov	r4, r8
	movt	r0, #:upper16:.LC1190
	bl	printk
	b	.L15282
.L15309:
	mov	r0, r5
	mvn	r4, #11
	bl	kfree
	b	.L15282
.L15305:
	movw	r1, #:lower16:.LC1192
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1192
	bl	__dynamic_pr_debug
	b	.L15295
.L15307:
	movw	r1, #:lower16:.LC1191
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1191
	bl	__dynamic_pr_debug
	b	.L15293
.L15308:
	mov	r1, r9
	ldr	r0, .L15310+4
	mvn	r4, #11
	bl	_raw_spin_unlock_irqrestore
	b	.L15282
.L15311:
	.align	2
.L15310:
	.word	.LANCHOR8-3360
	.word	.LANCHOR1+3524
	.word	.LANCHOR8-3312
	.word	.LANCHOR8-3328
	.word	.LANCHOR0+268
	.fnend
	.size	usb_qdss_open, .-usb_qdss_open
	.align	2
	.global	usb_qdss_close
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb_qdss_close, %function
usb_qdss_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15321
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #20]
	ldrh	r1, [r3, #-14]
	ldr	r2, [r4, #84]
	tst	r1, #4
	ldr	r6, [r2]
	bne	.L15319
.L15313:
	ldr	r0, .L15321+4
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	ldr	r1, [r4, #96]
	ldr	r0, [r4, #108]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r1, [r4, #96]
	ldr	r0, [r4, #108]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r3, #0
	mov	r1, r7
	ldr	r0, .L15321+4
	str	r3, [r4, #96]
	str	r3, [r5, #24]
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC528
	ldr	r1, [r6, #28]
	movt	r0, #:upper16:.LC528
	bl	strcmp
	cmp	r0, #0
	beq	.L15320
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15320:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	msm_dwc3_restart_usb_session
.L15319:
	movw	r1, #:lower16:.LC1193
	sub	r0, r3, #32
	movt	r1, #:upper16:.LC1193
	bl	__dynamic_pr_debug
	b	.L15313
.L15322:
	.align	2
.L15321:
	.word	.LANCHOR8-3280
	.word	.LANCHOR1+3524
	.fnend
	.size	usb_qdss_close, .-usb_qdss_close
	.align	2
	.global	rmnet_smd_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_bind_config, %function
rmnet_smd_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r0, [r3, #36]
	.pad #12
	sub	sp, sp, #12
	cmp	r0, #0
	beq	.L15331
	mov	r2, #456
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L15338
.L15324:
	mov	r5, #0
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	movw	r0, #:lower16:.LC1194
	mov	r3, r5
	movt	r0, #:upper16:.LC1194
	str	r5, [sp]
	mov	r2, #1
	mov	r1, #10
	str	r4, [r6, #3316]
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #388]
	beq	.L15333
	add	r1, r4, #396
	movw	r2, #:lower16:rmnet_smd_connect_work
	str	r5, [r4, #164]
	movw	r3, #:lower16:rmnet_smd_disconnect_work
	mov	ip, #2560
	str	r5, [r4, #168]
	movt	r3, #:upper16:rmnet_smd_disconnect_work
	add	r0, r4, #412
	str	r5, [r4, #172]
	movt	r2, #:upper16:rmnet_smd_connect_work
	str	r1, [r4, #396]
	add	r9, r4, #108
	str	r1, [r4, #400]
	movw	r1, #:lower16:rmnet_control_rx_tlet
	add	r8, r4, #116
	movt	r1, #:upper16:rmnet_control_rx_tlet
	str	r5, [r4, #308]
	str	r5, [r4, #372]
	str	ip, [r4, #392]
	str	r2, [r4, #404]
	mov	r2, r4
	str	ip, [r4, #408]
	str	r0, [r4, #412]
	str	r0, [r4, #416]
	add	r0, r4, #284
	str	r3, [r4, #420]
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_control_tx_tlet
	mov	r2, r4
	movt	r1, #:upper16:rmnet_control_tx_tlet
	add	r0, r4, #264
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_data_rx_tlet
	mov	r2, r4
	movt	r1, #:upper16:rmnet_data_rx_tlet
	add	r0, r4, #348
	bl	tasklet_init
	movw	r1, #:lower16:rmnet_data_tx_tlet
	mov	r2, r4
	movt	r1, #:upper16:rmnet_data_tx_tlet
	add	r0, r4, #328
	bl	tasklet_init
	movw	r1, #:lower16:.LC1195
	ldr	r2, .L15340
	add	r0, r4, #312
	movt	r1, #:upper16:.LC1195
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC1196
	ldr	r2, .L15340
	add	r0, r4, #376
	movt	r1, #:upper16:.LC1196
	bl	__init_waitqueue_head
	ldr	r3, .L15340+4
	movw	lr, #:lower16:rmnet_smd_ch_probe
	movw	ip, #:lower16:rmnet_smd_bind
	movt	lr, #:upper16:rmnet_smd_ch_probe
	movt	ip, #:upper16:rmnet_smd_bind
	movw	r1, #:lower16:.LC1197
	movw	r2, #:lower16:.LC917
	movt	r1, #:upper16:.LC1197
	str	r5, [r4, #204]
	movw	r5, #:lower16:rmnet_smd_unbind
	str	lr, [r4, #176]
	add	lr, r3, #8
	movt	r5, #:upper16:rmnet_smd_unbind
	str	ip, [r4, #32]
	movw	ip, #:lower16:rmnet_smd_disable
	movt	r2, #:upper16:.LC917
	movt	ip, #:upper16:rmnet_smd_disable
	stm	r4, {r1, r3}
	add	r3, r3, #28
	str	lr, [r4, #16]
	movw	lr, #:lower16:rmnet_smd_set_alt
	movw	r1, #:lower16:rmnet_smd_setup
	movt	lr, #:upper16:rmnet_smd_set_alt
	mov	r0, r7
	str	r3, [r4, #8]
	add	r7, r4, #124
	add	r3, r4, #156
	str	r5, [r4, #36]
	movt	r1, #:upper16:rmnet_smd_setup
	add	r5, r4, #132
	str	lr, [r4, #40]
	add	lr, r4, #140
	str	ip, [r4, #48]
	add	ip, r4, #148
	str	r1, [r4, #52]
	mov	r1, r4
	str	r9, [r4, #108]
	str	r9, [r4, #112]
	str	r8, [r4, #116]
	str	r8, [r4, #120]
	str	r7, [r4, #124]
	str	r7, [r4, #128]
	str	r5, [r4, #132]
	str	r5, [r4, #136]
	str	lr, [r4, #140]
	str	lr, [r4, #144]
	str	ip, [r4, #148]
	str	ip, [r4, #152]
	str	r3, [r4, #156]
	str	r3, [r4, #160]
	str	r2, [r4, #196]
	bl	usb_add_function
	subs	r5, r0, #0
	bne	.L15339
	movw	r0, #:lower16:.LC1198
	mov	r1, r5
	movt	r0, #:upper16:.LC1198
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r6, #3528]
	beq	.L15323
	cmn	r0, #4096
	bhi	.L15323
	ldr	ip, .L15340+8
	movw	r0, #:lower16:.LC273
	mov	r3, r4
	movt	r0, #:upper16:.LC273
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L15330
	cmn	r0, #4096
	bls	.L15323
.L15330:
	ldr	r0, [r6, #3528]
	bl	debugfs_remove
	mov	r3, #0
	str	r3, [r6, #3528]
	b	.L15323
.L15339:
	ldr	r0, [r4, #388]
	bl	destroy_workqueue
.L15326:
	mov	r0, r4
	bl	kfree
.L15323:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L15331:
	mov	r4, #16
	b	.L15324
.L15333:
	mvn	r5, #11
	b	.L15326
.L15338:
	mvn	r5, #11
	b	.L15323
.L15341:
	.align	2
.L15340:
	.word	.LANCHOR1+4044
	.word	.LANCHOR6-1708
	.word	.LANCHOR5+92
	.fnend
	.size	rmnet_smd_bind_config, .-rmnet_smd_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_smd_function_bind_config, %function
rmnet_smd_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r1
	b	rmnet_smd_bind_config
	.fnend
	.size	rmnet_smd_function_bind_config, .-rmnet_smd_function_bind_config
	.align	2
	.global	rmnet_sdio_function_add
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_function_add, %function
rmnet_sdio_function_add:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r3, #36]
	.pad #8
	sub	sp, sp, #8
	cmp	r0, #0
	beq	.L15348
	mov	r2, #372
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L15352
.L15344:
	mov	r5, #0
	movw	r0, #:lower16:.LC1194
	mov	r3, r5
	movt	r0, #:upper16:.LC1194
	mov	r2, #1
	mov	r1, #10
	str	r5, [sp]
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #200]
	beq	.L15350
	movw	ip, #:lower16:rmnet_sdio_disconnect_work
	movw	r0, #:lower16:rmnet_sdio_control_rx_work
	str	r5, [r4, #188]
	movw	r2, #:lower16:rmnet_sdio_data_rx_work
	movt	ip, #:upper16:rmnet_sdio_disconnect_work
	str	r5, [r4, #192]
	movt	r0, #:upper16:rmnet_sdio_control_rx_work
	movt	r2, #:upper16:rmnet_sdio_data_rx_work
	str	r5, [r4, #196]
	movw	r3, #:lower16:rmnet_sdio_set_modem_cbits_w
	movw	r1, #:lower16:rmnet_open_sdio_work
	str	ip, [r4, #216]
	mov	r6, #2560
	add	lr, r4, #224
	add	ip, r4, #240
	movt	r3, #:upper16:rmnet_sdio_set_modem_cbits_w
	add	r8, r4, #208
	movt	r1, #:upper16:rmnet_open_sdio_work
	str	r6, [r4, #204]
	str	r0, [r4, #232]
	add	r0, r4, #336
	str	r2, [r4, #248]
	add	r2, r4, #256
	str	r8, [r4, #208]
	str	r8, [r4, #212]
	movw	r8, #:lower16:rmnet_sdio_bind
	str	r6, [r4, #220]
	movt	r8, #:upper16:rmnet_sdio_bind
	str	lr, [r4, #224]
	str	lr, [r4, #228]
	str	r6, [r4, #236]
	str	ip, [r4, #240]
	str	ip, [r4, #244]
	str	r6, [r4, #252]
	str	r2, [r4, #256]
	str	r2, [r4, #260]
	mov	r2, r5
	str	r1, [r4, #264]
	mov	r1, r5
	str	r6, [r4, #332]
	str	r0, [r4, #336]
	str	r0, [r4, #340]
	add	r0, r4, #268
	str	r3, [r4, #344]
	bl	init_timer_key
	ldr	r3, .L15354
	movw	r1, #:lower16:.LC1199
	movw	lr, #:lower16:rmnet_sdio_unbind
	movt	r1, #:upper16:.LC1199
	movt	lr, #:upper16:rmnet_sdio_unbind
	mov	r0, r7
	movw	r7, #:lower16:rmnet_sdio_set_alt
	movt	r7, #:upper16:rmnet_sdio_set_alt
	movw	ip, #:lower16:delayed_work_timer_fn
	stm	r4, {r1, r3}
	movw	r1, #:lower16:rmnet_sdio_setup
	movw	r2, #:lower16:rmnet_close_sdio_work
	movt	r1, #:upper16:rmnet_sdio_setup
	str	r8, [r4, #32]
	add	r8, r3, #8
	add	r3, r3, #28
	movt	ip, #:upper16:delayed_work_timer_fn
	str	lr, [r4, #36]
	movw	lr, #:lower16:rmnet_sdio_disable
	movt	r2, #:upper16:rmnet_close_sdio_work
	str	r1, [r4, #52]
	movw	r1, #:lower16:rmnet_sdio_suspend
	movt	lr, #:upper16:rmnet_sdio_disable
	movt	r1, #:upper16:rmnet_sdio_suspend
	str	r3, [r4, #8]
	add	r3, r4, #108
	str	r8, [r4, #16]
	str	r7, [r4, #40]
	add	r7, r4, #252
	str	r1, [r4, #56]
	add	r1, r4, #120
	str	r3, [r4, #108]
	str	r3, [r4, #112]
	add	r3, r4, #160
	str	lr, [r4, #48]
	add	lr, r4, #304
	str	r1, [r4, #120]
	str	r1, [r4, #124]
	add	r1, r4, #132
	str	r1, [r4, #132]
	str	r1, [r4, #136]
	add	r1, r4, #144
	str	r3, [r4, #160]
	str	r3, [r4, #164]
	add	r3, r4, #172
	str	r1, [r4, #144]
	str	r1, [r4, #148]
	mov	r1, r4
	str	r5, [r4, #152]
	str	r5, [r4, #156]
	str	r3, [r4, #172]
	str	r3, [r4, #176]
	str	r5, [r4, #180]
	str	r5, [r4, #184]
	str	ip, [r4, #284]
	str	r7, [r4, #288]
	str	r6, [r4, #300]
	str	lr, [r4, #304]
	str	lr, [r4, #308]
	str	r2, [r4, #312]
	bl	usb_add_function
	subs	r5, r0, #0
	bne	.L15353
	movw	r0, #:lower16:.LC1200
	mov	r1, r5
	movt	r0, #:upper16:.LC1200
	bl	debugfs_create_dir
	cmn	r0, #4096
	mov	r2, r0
	str	r0, [r4, #348]
	bhi	.L15343
	ldr	ip, .L15354+4
	movw	r0, #:lower16:.LC273
	mov	r3, r4
	movt	r0, #:upper16:.LC273
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
.L15343:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15353:
	ldr	r0, [r4, #200]
	bl	destroy_workqueue
.L15346:
	mov	r0, r4
	bl	kfree
	b	.L15343
.L15348:
	mov	r4, #16
	b	.L15344
.L15350:
	mvn	r5, #11
	b	.L15346
.L15352:
	mvn	r5, #11
	b	.L15343
.L15355:
	.align	2
.L15354:
	.word	.LANCHOR6-1660
	.word	.LANCHOR5+200
	.fnend
	.size	rmnet_sdio_function_add, .-rmnet_sdio_function_add
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_sdio_function_bind_config, %function
rmnet_sdio_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r1
	b	rmnet_sdio_function_add
	.fnend
	.size	rmnet_sdio_function_bind_config, .-rmnet_sdio_function_bind_config
	.align	2
	.global	frmnet_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_free_req, %function
frmnet_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	frmnet_free_req, .-frmnet_free_req
	.align	2
	.global	audio_source_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_source_bind_config, %function
audio_source_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	mvn	ip, #0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r3, #0
	mov	r7, r0
	str	r8, [sp, #16]
	mov	r2, r3
	mov	r0, ip
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	str	ip, [r1]
	add	r1, sp, #8
	str	r1, [sp]
	mov	r1, r3
	str	ip, [r5, #4]
	bl	snd_card_create
	subs	r4, r0, #0
	beq	.L15367
.L15359:
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15367:
	ldr	r3, [r7, #24]
	add	r6, sp, #12
	movw	r1, #:lower16:.LC1071
	ldr	lr, [sp, #8]
	mov	r2, r4
	movt	r1, #:upper16:.LC1071
	ldr	ip, [r3]
	mov	r3, #1
	mov	r0, lr
	add	ip, ip, #32
	str	ip, [lr, #496]
	stm	sp, {r4, r6}
	movw	r6, #:lower16:.LANCHOR6
	bl	snd_pcm_new
	subs	r4, r0, #0
	movtne	r6, #:upper16:.LANCHOR6
	bne	.L15363
	ldr	r3, [sp, #12]
	movt	r6, #:upper16:.LANCHOR6
	movw	r1, #:lower16:.LC1072
	sub	r8, r6, #2256
	movt	r1, #:upper16:.LC1072
	mov	r2, #80
	add	r0, r3, #88
	str	r4, [r3, #16]
	str	r8, [r3, #272]
	str	r3, [r6, #-2168]
	bl	strlcpy
	mov	r1, r4
	sub	r2, r6, #2096
	ldr	r0, [sp, #12]
	bl	snd_pcm_set_ops
	mov	ip, #65536
	mov	r3, r4
	ldr	r0, [sp, #12]
	mov	r2, r4
	mov	r1, #2
	str	ip, [sp]
	bl	snd_pcm_lib_preallocate_pages_for_all
	ldr	r0, [sp, #8]
	movw	r1, #:lower16:.LC1073
	mov	r2, #16
	movt	r1, #:upper16:.LC1073
	add	r0, r0, #20
	bl	strlcpy
	ldr	r0, [sp, #8]
	mov	r2, #32
	add	r1, r0, #20
	add	r0, r0, #36
	bl	strlcpy
	ldr	r0, [sp, #8]
	movw	r1, #:lower16:.LC1074
	mov	r2, #80
	movt	r1, #:upper16:.LC1074
	add	r0, r0, #68
	bl	strlcpy
	ldr	r0, [sp, #8]
	bl	snd_card_register
	subs	r4, r0, #0
	beq	.L15368
.L15361:
.L15362:
.L15363:
	ldr	r0, [r6, #-2172]
	bl	snd_card_free
	b	.L15359
.L15368:
	mov	r1, r8
	mov	r0, r7
	bl	usb_add_function
	subs	r4, r0, #0
	bne	.L15363
	ldrd	r2, [sp, #8]
	ldr	r1, [r3]
	ldr	r1, [r1]
	str	r1, [r5]
	ldr	r3, [r3, #12]
	str	r3, [r5, #4]
	str	r2, [r6, #-2172]
	b	.L15359
	.fnend
	.size	audio_source_bind_config, .-audio_source_bind_config
	.align	2
	.global	gs_alloc_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_alloc_req, %function
gs_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r6, r1
	mov	r1, r2
	str	r8, [sp, #16]
	mov	r7, r0
	str	lr, [sp, #20]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L15369
	mov	r1, r5
	mov	r0, r6
	str	r6, [r4, #4]
	bl	__kmalloc
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L15375
.L15369:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15375:
	ldr	r2, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L15369
	.fnend
	.size	gs_alloc_req, .-gs_alloc_req
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_start_io, %function
gs_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	adds	r3, r0, #44
	add	r5, r0, #32
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	fp, r0
	str	lr, [sp, #32]
	ldr	r2, [r0, #4]
	.pad #12
	sub	sp, sp, #12
	str	r3, [sp]
	ldr	r4, [r2, #92]
	beq	.L15407
	ldr	r6, [r0, #44]
	rsb	r6, r6, #8
	cmp	r6, #0
	movwgt	r8, #:lower16:gs_read_complete
	movgt	r7, #0
	movtgt	r8, #:upper16:gs_read_complete
	bgt	.L15378
	b	.L15379
.L15382:
	str	r8, [r3, #28]
	ldr	r1, [fp, #36]
	bl	__list_add
	ldr	r3, [fp, #44]
	cmp	r6, r7
	add	r3, r3, #1
	str	r3, [fp, #44]
	ble	.L15381
.L15378:
	mov	r2, #32
	mov	r1, #4096
	mov	r0, r4
	add	r7, r7, #1
	bl	gs_alloc_req
	subs	r3, r0, #0
	mov	r2, r5
	add	r0, r3, #36
	bne	.L15382
	ldr	r2, [fp, #32]
	cmp	r5, r2
	beq	.L15395
.L15381:
	ldr	r2, [fp, #4]
.L15379:
	adds	r3, fp, #88
	add	r7, fp, #76
	ldr	r8, [r2, #88]
	str	r3, [sp, #4]
	beq	.L15409
	ldr	r9, [fp, #88]
	rsb	r9, r9, #8
	cmp	r9, #0
	movwgt	r10, #:lower16:gs_write_complete
	movgt	r6, #0
	movtgt	r10, #:upper16:gs_write_complete
	bgt	.L15386
	b	.L15387
.L15390:
	str	r10, [r3, #28]
	ldr	r1, [fp, #80]
	bl	__list_add
	ldr	r3, [fp, #88]
	cmp	r9, r6
	add	r3, r3, #1
	str	r3, [fp, #88]
	ble	.L15387
.L15386:
	mov	r2, #32
	mov	r1, #4096
	mov	r0, r8
	add	r6, r6, #1
	bl	gs_alloc_req
	subs	r3, r0, #0
	mov	r2, r7
	add	r0, r3, #36
	bne	.L15390
.L15388:
	ldr	r2, [fp, #76]
	cmp	r7, r2
	beq	.L15440
.L15387:
	mov	r6, #0
	mov	r0, fp
	str	r6, [fp, #56]
	bl	gs_start_rx
	ldr	r1, [fp, #4]
	mov	r2, r0
	cmp	r1, r6
	beq	.L15396
	ldr	r0, [fp, #8]
	cmp	r0, r6
	beq	.L15396
	cmp	r2, #0
	beq	.L15441
	bl	tty_wakeup
	mov	r0, r6
.L15376:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15440:
	ldr	r3, [sp]
	ldr	r6, [fp, #32]
	cmp	r3, #0
	bne	.L15442
	cmp	r5, r6
	beq	.L15395
.L15394:
	mov	r0, r6
	sub	r7, r6, #36
	bl	list_del
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r7
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [fp, #32]
	cmp	r5, r6
	bne	.L15394
.L15395:
	mvn	r0, #11
	b	.L15376
.L15407:
	movw	r7, #:lower16:gs_read_complete
	adds	r6, r0, #44
	movt	r7, #:upper16:gs_read_complete
	b	.L15377
.L15443:
	str	r7, [r3, #28]
	ldr	r1, [fp, #36]
	bl	__list_add
	cmp	r6, #8
	beq	.L15381
.L15377:
	mov	r2, #32
	mov	r1, #4096
	mov	r0, r4
	add	r6, r6, #1
	bl	gs_alloc_req
	subs	r3, r0, #0
	mov	r2, r5
	add	r0, r3, #36
	bne	.L15443
	ldr	r2, [fp, #32]
	cmp	r5, r2
	bne	.L15381
	b	.L15395
.L15409:
	movw	r9, #:lower16:gs_write_complete
	adds	r6, fp, #88
	movt	r9, #:upper16:gs_write_complete
	b	.L15385
.L15444:
	str	r9, [r3, #28]
	ldr	r1, [fp, #80]
	bl	__list_add
	cmp	r6, #8
	beq	.L15387
.L15385:
	mov	r2, #32
	mov	r1, #4096
	mov	r0, r8
	add	r6, r6, #1
	bl	gs_alloc_req
	subs	r3, r0, #0
	mov	r2, r7
	add	r0, r3, #36
	bne	.L15444
	b	.L15388
.L15442:
	cmp	r5, r6
	beq	.L15395
.L15392:
	mov	r0, r6
	sub	r7, r6, #36
	bl	list_del
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r7
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [fp, #32]
	ldr	r3, [fp, #44]
	cmp	r5, r6
	sub	r3, r3, #1
	str	r3, [fp, #44]
	bne	.L15392
	b	.L15395
.L15441:
	ldr	r3, [sp]
	ldr	r6, [fp, #32]
	cmp	r3, #0
	bne	.L15445
	cmp	r5, r6
	beq	.L15401
.L15402:
	mov	r0, r6
	sub	r8, r6, #36
	bl	list_del
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r8
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [fp, #32]
	cmp	r5, r6
	bne	.L15402
.L15437:
	ldr	r1, [fp, #4]
.L15401:
	ldr	r3, [sp, #4]
	ldr	r4, [fp, #76]
	ldr	r5, [r1, #88]
	cmp	r3, #0
	beq	.L15438
	b	.L15446
.L15406:
	mov	r0, r4
	sub	r6, r4, #36
	bl	list_del
	ldr	r0, [r4, #-36]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r6
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r4, [fp, #76]
.L15438:
	cmp	r7, r4
	bne	.L15406
.L15404:
	mvn	r0, #4
	b	.L15376
.L15446:
	cmp	r7, r4
	beq	.L15404
.L15405:
	mov	r0, r4
	sub	r6, r4, #36
	bl	list_del
	ldr	r0, [r4, #-36]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r6
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r4, [fp, #76]
	ldr	r3, [fp, #88]
	cmp	r7, r4
	sub	r3, r3, #1
	str	r3, [fp, #88]
	bne	.L15405
	b	.L15404
.L15445:
	cmp	r5, r6
	beq	.L15401
.L15400:
	mov	r0, r6
	sub	r8, r6, #36
	bl	list_del
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r8
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [fp, #32]
	ldr	r3, [fp, #44]
	cmp	r5, r6
	sub	r3, r3, #1
	str	r3, [fp, #44]
	bne	.L15400
	b	.L15437
.L15396:
	movw	r0, #:lower16:.LC1201
	ldr	r1, .L15447
	movt	r0, #:upper16:.LC1201
	bl	printk
	mvn	r0, #4
	b	.L15376
.L15448:
	.align	2
.L15447:
	.word	.LANCHOR5+308
	.fnend
	.size	gs_start_io, .-gs_start_io
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_open, %function
gs_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	ldr	r6, .L15483
	mov	r7, r0
	str	r8, [sp, #16]
	mov	r8, r1
	str	lr, [sp, #20]
	ldr	r5, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	add	r3, r6, #20
	add	r5, r5, r5, lsl #1
	lsl	r5, r5, #3
	add	r6, r6, r5
	add	r5, r5, r3
.L15456:
	mov	r0, r6
	bl	mutex_lock
	ldr	r4, [r5]
	subs	r0, r4, #0
	beq	.L15477
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L15452
	add	r3, r3, #1
	mov	r0, r4
	mov	r5, #0
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irq
	mov	r0, r6
	bl	mutex_unlock
.L15449:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15477:
	mov	r0, r6
	mvn	r5, #18
	bl	mutex_unlock
	b	.L15449
.L15452:
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	mov	r0, r4
	cmp	r3, #0
	bne	.L15453
	mov	r3, #1
	strb	r3, [r4, #16]
	bl	_raw_spin_unlock_irq
	mov	r0, r6
	bl	mutex_unlock
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L15478
.L15455:
	str	r4, [r7, #272]
	ldr	r5, [r4, #4]
	mov	r3, #0
	mov	r2, #1
	str	r7, [r4, #8]
	str	r2, [r4, #12]
	cmp	r5, r3
	strb	r3, [r4, #16]
	beq	.L15463
	ldr	r0, .L15483+4
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L15479
.L15464:
	mov	r0, r4
	bl	gs_start_io
	ldr	r3, [r5, #116]
	cmp	r3, #0
	beq	.L15463
	mov	r0, r5
	blx	r3
.L15463:
	ldr	r0, .L15483+8
	ldrh	r5, [r0, #-6]
	ubfx	r5, r5, #2, #1
	cmp	r5, #0
	bne	.L15480
.L15461:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	b	.L15449
.L15453:
	bl	_raw_spin_unlock_irq
	mov	r0, r6
	bl	mutex_unlock
	mov	r0, #1
	bl	msleep
	b	.L15456
.L15478:
	mov	r0, r4
	bl	_raw_spin_unlock_irq
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #52]
	cmp	r0, #0
	beq	.L15481
	mov	r2, #8192
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4, #96]
	beq	.L15459
.L15458:
	mov	r2, #8192
	mov	r0, r4
	str	r2, [r4, #92]
	str	r3, [r4, #100]
	str	r3, [r4, #104]
	bl	_raw_spin_lock_irq
	b	.L15455
.L15480:
	movw	r1, #:lower16:.LC1204
	ldrb	r2, [r4, #17]	@ zero_extendqisi2
	mov	r3, r7
	movt	r1, #:upper16:.LC1204
	sub	r0, r0, #24
	str	r8, [sp]
	mov	r5, #0
	bl	__dynamic_pr_debug
	b	.L15461
.L15481:
	mov	r2, #16
	mov	r3, r2
	str	r2, [r4, #96]
	b	.L15458
.L15479:
	movw	r1, #:lower16:.LC1203
	ldrb	r2, [r4, #17]	@ zero_extendqisi2
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1203
	bl	__dynamic_pr_debug
	b	.L15464
.L15459:
	mov	r0, r4
	bl	_raw_spin_lock_irq
	ldr	r0, .L15483+12
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L15482
.L15460:
	mov	r3, #0
	mvn	r5, #11
	strb	r3, [r4, #16]
	b	.L15461
.L15482:
	movw	r1, #:lower16:.LC1202
	ldrb	r2, [r4, #17]	@ zero_extendqisi2
	mov	r3, r7
	movt	r1, #:upper16:.LC1202
	sub	r0, r0, #24
	str	r8, [sp]
	bl	__dynamic_pr_debug
	b	.L15460
.L15484:
	.align	2
.L15483:
	.word	.LANCHOR1+3332
	.word	.LANCHOR8-3232
	.word	.LANCHOR8-3216
	.word	.LANCHOR8-3264
	.fnend
	.size	gs_open, .-gs_open
	.align	2
	.global	gs_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gs_free_req, %function
gs_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	gs_free_req, .-gs_free_req
	.align	2
	.global	gserial_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_setup, %function
gserial_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 88
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:__stack_chk_guard
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r2, r1, #1
	movt	r3, #:upper16:__stack_chk_guard
	strd	r6, [sp, #8]
	cmp	r2, #7
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #100
	sub	sp, sp, #100
	str	r3, [sp, #12]
	ldr	r3, [r3]
	str	r2, [sp, #24]
	str	r0, [sp, #28]
	str	r3, [sp, #92]
	bhi	.L15505
	mov	fp, r1
	mov	r1, #0
	mov	r0, fp
	movw	r6, #:lower16:.LANCHOR1
	bl	__alloc_tty_driver
	movt	r6, #:upper16:.LANCHOR1
	cmp	r0, #0
	str	r0, [r6, #3948]
	beq	.L15506
	movw	r2, #:lower16:.LC693
	movw	r3, #:lower16:tty_std_termios
	ldr	r1, .L15526
	movt	r2, #:upper16:.LC693
	movt	r3, #:upper16:tty_std_termios
	ldrd	r4, [r3]
	mov	lr, #3
	mvn	r7, #127
	str	r2, [r0, #72]
	ldrd	r8, [r3, #32]
	movw	r2, #:lower16:.LC694
	movt	r2, #:upper16:.LC694
	movt	lr, 1
	str	r2, [r0, #76]
	strd	r8, [sp, #16]
	ldrd	r8, [r3, #8]
	str	lr, [r0, #96]
	mov	lr, #14
	strd	r4, [r0, #100]
	ldrd	r4, [r3, #16]
	ldrd	r2, [r3, #24]
	strb	r7, [sp, #37]
	strd	r8, [r0, #108]
	ldrd	r8, [sp, #16]
	strd	r4, [r0, #116]
	movw	r5, #3261
	mov	r4, #0
	str	lr, [r0, #144]
	mov	lr, #37
	strd	r2, [r0, #124]
	mov	r3, #9600
	mov	r2, #8
	str	r5, [r0, #108]
	strd	r8, [r0, #132]
	str	r3, [r0, #136]
	str	r3, [r0, #140]
	strb	lr, [sp, #38]
	strb	r4, [sp, #39]
	strb	r4, [sp, #40]
	strb	r2, [sp, #41]
	strb	r4, [sp, #42]
	strb	r4, [sp, #43]
	bl	tty_set_operations
	movw	r0, #:lower16:.LC695
	mov	r3, r4
	str	r4, [sp]
	movt	r0, #:upper16:.LC695
	mov	r2, #1
	mov	r1, #10
	bl	__alloc_workqueue_key
	cmp	r0, r4
	str	r0, [r6, #3320]
	beq	.L15507
	ldr	r3, .L15526+4
	movw	r8, #:lower16:.LC696
	movt	r8, #:upper16:.LC696
	mov	r7, r3
	mov	r10, r3
	str	r3, [sp, #16]
	b	.L15491
.L15508:
	mov	r4, r5
.L15491:
	ldr	r2, .L15526+8
	mov	r1, r8
	mov	r0, r10
	bl	__mutex_init
	add	r1, sp, #37
	mov	r0, r4
	bl	gs_port_alloc
	cmp	r0, #0
	bne	.L15490
	add	r5, r4, #1
	add	r10, r10, #24
	cmp	fp, r5
	bne	.L15508
	ldr	r0, [r6, #3948]
	str	fp, [r6, #3952]
	bl	tty_register_driver
	subs	r9, r0, #0
	bne	.L15523
	ldr	r3, [sp, #28]
	movw	fp, #:lower16:.LC698
	mov	r8, r9
	movt	fp, #:upper16:.LC698
	add	r10, r3, #32
.L15494:
	mov	r2, r10
	mov	r1, r8
	ldr	r0, [r6, #3948]
	bl	tty_register_device
	cmn	r0, #4096
	bls	.L15493
	mov	r3, r0
	mov	r2, r8
	ldr	r1, .L15526+12
	mov	r0, fp
	bl	printk
.L15493:
	cmp	r4, r8
	add	r8, r8, #1
	bne	.L15494
	movw	fp, #:lower16:.LC699
	mov	r8, #0
	movt	fp, #:upper16:.LC699
.L15498:
	mov	r2, fp
	mov	r3, r8
	ldr	r10, [r7, #20]
	mov	r1, #48
	add	r0, sp, #44
	bl	snprintf
	add	r0, sp, #44
	mov	r1, #0
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [r6, #3956]
	beq	.L15497
	cmn	r0, #4096
	bhi	.L15497
	ldr	r3, .L15526+16
	movw	r0, #:lower16:.LC700
	mov	r1, #292
	movt	r0, #:upper16:.LC700
	str	r3, [sp]
	mov	r3, r10
	bl	debugfs_create_file
	ldr	ip, .L15526+20
	movw	r0, #:lower16:.LC701
	mov	r3, r10
	movt	r0, #:upper16:.LC701
	mov	r1, #420
	ldr	r2, [r6, #3956]
	str	ip, [sp]
	bl	debugfs_create_file
.L15497:
	cmp	r4, r8
	add	r7, r7, #24
	add	r8, r8, #1
	bne	.L15498
	ldr	r0, .L15526+24
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L15524
.L15487:
	ldr	r3, [sp, #12]
	mov	r0, r9
	ldr	r2, [sp, #92]
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L15525
	add	sp, sp, #100
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15490:
	sub	r3, r4, #1
	cmp	r4, #0
	mov	r9, r0
	str	r3, [sp, #24]
	beq	.L15501
.L15502:
	ldr	r2, [sp, #16]
	ldr	r3, [sp, #24]
	ldr	r4, .L15526+4
	add	r3, r3, r3, lsl #1
	add	fp, r2, r3, lsl #3
.L15500:
	ldr	r0, [fp, #20]
	bl	kfree
	cmp	fp, r4
	sub	fp, fp, #24
	bne	.L15500
.L15501:
	ldr	r0, [r6, #3320]
	cmp	r0, #0
	beq	.L15503
	bl	destroy_workqueue
.L15503:
	ldr	r0, [r6, #3948]
	bl	put_tty_driver
	mov	r3, #0
	str	r3, [r6, #3948]
	b	.L15487
.L15507:
	ldr	r3, .L15526+4
	mvn	r9, #11
	str	r3, [sp, #16]
	b	.L15502
.L15524:
	movw	r3, #:lower16:.LC917
	cmp	r5, #1
	ldr	r2, .L15526+12
	movt	r3, #:upper16:.LC917
	movw	ip, #:lower16:.LC703
	movt	ip, #:upper16:.LC703
	moveq	ip, r3
	movw	r1, #:lower16:.LC702
	mov	r3, r5
	movt	r1, #:upper16:.LC702
	sub	r0, r0, #20
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L15487
.L15505:
	mvn	r9, #21
	b	.L15487
.L15506:
	mvn	r9, #11
	b	.L15487
.L15525:
	bl	__stack_chk_fail
.L15523:
	movw	r0, #:lower16:.LC697
	mov	r2, r9
	ldr	r1, .L15526+12
	movt	r0, #:upper16:.LC697
	bl	printk
	b	.L15502
.L15527:
	.align	2
.L15526:
	.word	.LANCHOR5-2728
	.word	.LANCHOR1+3332
	.word	.LANCHOR1+3952
	.word	.LANCHOR5-2604
	.word	.LANCHOR5-2588
	.word	.LANCHOR5-2480
	.word	.LANCHOR4-940
	.fnend
	.size	gserial_setup, .-gserial_setup
	.align	2
	.global	gserial_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_cleanup, %function
gserial_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #3948]
	cmp	r3, #0
	beq	.L15528
	b	gserial_cleanup.part.78
.L15528:
	bx	lr
	.fnend
	.size	gserial_cleanup, .-gserial_cleanup
	.align	2
	.global	gserial_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_connect, %function
gserial_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r3, #3948]
	cmp	r2, #0
	beq	.L15539
	ldr	r2, [r3, #3952]
	cmp	r1, r2
	bcs	.L15539
	ldr	r2, [r0, #88]
	add	r1, r1, r1, lsl #1
	mov	r4, r0
	add	r3, r3, r1, lsl #3
	ldr	ip, [r2, #8]
	mov	r0, r2
	ldr	r1, [r2, #28]
	ldr	r5, [r3, #3352]
	ldr	r3, [ip]
	blx	r3
	subs	r6, r0, #0
	blt	.L15530
	ldr	r3, [r4, #88]
	str	r5, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	blt	.L15548
	ldr	r3, [r4, #92]
	mov	r0, r5
	str	r5, [r3]
	bl	_raw_spin_lock_irqsave
	str	r5, [r4, #84]
	ldr	r1, [r5, #120]
	mov	r7, r0
	str	r4, [r5, #4]
	str	r1, [r4, #96]
	ldrh	r1, [r5, #124]
	strh	r1, [r4, #100]	@ movhi
	ldrb	r2, [r5, #126]	@ zero_extendqisi2
	strb	r2, [r4, #102]
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L15533
	ldr	r0, .L15550
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L15549
.L15534:
	mov	r0, r5
	bl	gs_start_io
	ldr	r3, [r4, #116]
	cmp	r3, #0
	beq	.L15536
.L15547:
	mov	r0, r4
	blx	r3
.L15536:
	mov	r1, r7
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
.L15530:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15548:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #88]
	mov	r2, #0
	str	r2, [r3]
	b	.L15530
.L15533:
	ldr	r3, [r4, #120]
	cmp	r3, #0
	bne	.L15547
	b	.L15536
.L15549:
	movw	r1, #:lower16:.LC1205
	ldrb	r2, [r5, #17]	@ zero_extendqisi2
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1205
	bl	__dynamic_pr_debug
	b	.L15534
.L15539:
	mvn	r6, #5
	b	.L15530
.L15551:
	.align	2
.L15550:
	.word	.LANCHOR8-3184
	.fnend
	.size	gserial_connect, .-gserial_connect
	.align	2
	.global	gserial_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gserial_disconnect, %function
gserial_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #84]
	cmp	r4, #0
	beq	.L15552
	mov	r5, r0
	mov	r0, r4
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	ldr	r0, [r5, #96]
	mov	r2, #0
	str	r0, [r4, #120]
	ldrh	r0, [r5, #100]
	strh	r0, [r4, #124]	@ movhi
	ldrb	r1, [r5, #102]	@ zero_extendqisi2
	str	r2, [r4, #4]
	strb	r1, [r4, #126]
	str	r2, [r5, #84]
	ldr	r3, [r4, #12]
	cmp	r3, r2
	bne	.L15554
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L15555
.L15554:
	mov	r2, #1
	add	r0, r4, #108
	mov	r3, #0
	mov	r1, r2
	bl	__wake_up
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L15555
	bl	tty_hangup
.L15555:
	mov	r1, r6
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #92]
	mov	r6, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #92]
	str	r6, [r3]
	ldr	r0, [r5, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #88]
	mov	r0, r4
	str	r6, [r3]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r8, r0
	cmp	r3, r6
	bne	.L15557
	ldrb	r6, [r4, #16]	@ zero_extendqisi2
	cmp	r6, #0
	beq	.L15573
.L15557:
	ldr	r6, [r4, #32]
	add	r9, r4, #32
	ldr	r7, [r5, #92]
	cmp	r9, r6
	beq	.L15558
.L15559:
	mov	r0, r6
	sub	r10, r6, #36
	bl	list_del
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r10
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [r4, #32]
	cmp	r9, r6
	bne	.L15559
	ldr	r7, [r5, #92]
.L15558:
	ldr	r6, [r4, #48]
	add	r9, r4, #48
	cmp	r9, r6
	beq	.L15563
.L15560:
	mov	r0, r6
	sub	r10, r6, #36
	bl	list_del
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r10
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [r4, #48]
	cmp	r9, r6
	bne	.L15560
.L15563:
	ldr	r6, [r4, #76]
	add	r7, r4, #76
	ldr	r5, [r5, #88]
	cmp	r7, r6
	beq	.L15562
.L15561:
	mov	r0, r6
	sub	r9, r6, #36
	bl	list_del
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r9
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [r4, #76]
	cmp	r7, r6
	bne	.L15561
.L15562:
	mov	r3, #0
	mov	r1, r8
	mov	r0, r4
	str	r3, [r4, #40]
	str	r3, [r4, #44]
	str	r3, [r4, #84]
	str	r3, [r4, #88]
	str	r3, [r4, #128]
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore
.L15552:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15573:
	ldr	r0, [r4, #96]
	bl	kfree
	str	r6, [r4, #96]
	b	.L15557
	.fnend
	.size	gserial_disconnect, .-gserial_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_disable, %function
acm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15581
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L15580
.L15575:
	mov	r0, r4
	bl	gserial_disconnect
	ldr	r0, [r4, #152]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #152]
	mov	r2, #0
	str	r2, [r3]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L15580:
	ldr	r1, [r4, #20]
	movw	r2, #:lower16:.LC1206
	sub	r0, r3, #24
	movt	r2, #:upper16:.LC1206
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	ldr	r1, [r1, #24]
	ldr	r1, [r1]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L15575
.L15582:
	.align	2
.L15581:
	.word	.LANCHOR8-3168
	.fnend
	.size	acm_disable, .-acm_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_set_alt, %function
acm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r2, [r0, #144]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r5, [r3, #24]
	beq	.L15613
	ldrb	r3, [r0, #145]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L15588
	ldr	r2, [r0, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L15589
	ldr	r0, .L15616
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L15614
.L15590:
	mov	r0, r4
	bl	gserial_disconnect
	ldr	r2, [r4, #88]
.L15589:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L15591
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L15591
.L15592:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L15596
	mov	r1, r4
	ldr	r0, [r5]
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15596
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
	mov	r0, r4
	bl	gserial_connect
.L15583:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15591:
	ldr	ip, .L15616+4
	ldr	r0, [r5]
	ldrh	r3, [ip, #-6]
	tst	r3, #4
	bne	.L15615
.L15593:
	mov	r1, r4
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L15596
	mov	r1, r4
	ldr	r0, [r5]
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L15596
	ldr	r2, [r4, #88]
	b	.L15592
.L15613:
	ldr	r2, [r0, #152]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L15585
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #152]
.L15585:
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L15588
	ldr	r3, [r4, #152]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	ldr	r3, [r4, #152]
	str	r4, [r3]
	b	.L15583
.L15614:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1207
	sub	r0, r0, #32
	movt	r2, #:upper16:.LC1207
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L15590
.L15596:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r5, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L15583
.L15615:
	movw	r2, #:lower16:.LC1208
	add	r1, r0, #32
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC1208
	sub	r0, ip, #24
	bl	__dynamic_dev_dbg
	ldr	r0, [r5]
	ldr	r2, [r4, #88]
	b	.L15593
.L15588:
	mvn	r5, #21
	b	.L15583
.L15617:
	.align	2
.L15616:
	.word	.LANCHOR8-3136
	.word	.LANCHOR8-3120
	.fnend
	.size	acm_set_alt, .-acm_set_alt
	.align	2
	.global	gsdio_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_free_req, %function
gsdio_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	gsdio_free_req, .-gsdio_free_req
	.align	2
	.global	gsdio_alloc_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_alloc_req, %function
gsdio_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r6, r1
	mov	r1, r2
	str	r8, [sp, #16]
	mov	r7, r0
	str	lr, [sp, #20]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L15624
	mov	r1, r5
	mov	r0, r6
	str	r6, [r4, #4]
	bl	__kmalloc
	cmp	r0, #0
	mov	r5, r0
	str	r0, [r4]
	bne	.L15620
	movw	r0, #:lower16:.LC692
	ldr	r1, .L15625
	movt	r0, #:upper16:.LC692
	bl	printk
	ldr	r3, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	mov	r4, r5
	ldr	r3, [r3, #12]
	blx	r3
.L15620:
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15624:
	movw	r0, #:lower16:.LC691
	ldr	r1, .L15625
	movt	r0, #:upper16:.LC691
	bl	printk
	b	.L15620
.L15626:
	.align	2
.L15625:
	.word	.LANCHOR5+320
	.fnend
	.size	gsdio_alloc_req, .-gsdio_alloc_req
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_alloc_requests.constprop.142, %function
gsdio_alloc_requests.constprop.142:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, r2
	str	r8, [sp, #16]
	ldr	r8, .L15646
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	ldrh	r3, [r8, #-14]
	tst	r3, #4
	bne	.L15643
.L15628:
	mov	r4, #0
.L15632:
	mov	r1, #2048
	mov	r2, #32
	mov	r0, r6
	bl	gsdio_alloc_req
	subs	r3, r0, #0
	mov	r1, r5
	add	r0, r3, #36
	beq	.L15644
	add	r4, r4, #1
	str	r7, [r3, #28]
	ldr	r2, [r5]
	bl	__list_add
	cmp	r4, #8
	bne	.L15632
.L15633:
	mov	r0, #0
.L15627:
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15644:
	ldr	r3, .L15646+4
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L15645
.L15630:
	ldr	r3, [r5]
	cmp	r5, r3
	mvneq	r0, #11
	bne	.L15633
	b	.L15627
.L15643:
	mov	ip, #2048
	mov	r0, #8
	ldr	r2, .L15646+8
	movw	r1, #:lower16:.LC1209
	mov	r3, r6
	str	r5, [sp]
	movt	r1, #:upper16:.LC1209
	stmib	sp, {r0, ip}
	sub	r0, r8, #32
	str	r7, [sp, #12]
	bl	__dynamic_pr_debug
	b	.L15628
.L15645:
	movw	r1, #:lower16:.LC690
	mov	r3, r4
	ldr	r2, .L15646+8
	sub	r0, r8, #8
	movt	r1, #:upper16:.LC690
	bl	__dynamic_pr_debug
	b	.L15630
.L15647:
	.align	2
.L15646:
	.word	.LANCHOR8-3088
	.word	.LANCHOR8-3072
	.word	.LANCHOR5+336
	.fnend
	.size	gsdio_alloc_requests.constprop.142, .-gsdio_alloc_requests.constprop.142
	.align	2
	.global	gsdio_free_requests
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_free_requests, %function
gsdio_free_requests:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1]
	cmp	r1, r4
	beq	.L15648
	mov	r5, r1
	mov	r6, r0
.L15650:
	mov	r0, r4
	sub	r7, r4, #36
	bl	list_del
	ldr	r0, [r4, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r4, [r5]
	cmp	r5, r4
	bne	.L15650
.L15648:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	gsdio_free_requests, .-gsdio_free_requests
	.set	gsmd_free_requests,gsdio_free_requests
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_notify, %function
gsmd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r1, r1, #1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r5, [r0, #72]
	cmp	r1, #3
	ldrls	pc, [pc, r1, asl #2]
	b	.L15653
.L15656:
	.word	.L15659
	.word	.L15658
	.word	.L15657
	.word	.L15655
.L15655:
	ldr	r0, [r5]
	bl	smd_tiocmget
	ands	r3, r0, #128
	movne	r1, #9
	moveq	r1, #1
	movne	r3, #8
	tst	r0, #64
	moveq	r1, r3
	tst	r0, #256
	ldr	r0, [r4, #68]
	orrne	r1, r1, #2
	str	r1, [r4, #160]
	cmp	r0, #0
	beq	.L15653
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L15653
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	bx	r3
.L15657:
	ldr	r0, .L15769
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L15756
.L15680:
	add	r1, r5, #8
	mov	r0, #0
	add	r8, r4, #4
	bl	_clear_bit
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L15757
	ldr	r7, [r3, #88]
	mov	r1, r0
	mov	r0, r8
	ldr	r6, [r3, #92]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L15682
	mov	r0, r7
	blx	r3
.L15682:
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L15683
	mov	r0, r6
	blx	r3
.L15683:
	mov	r0, r8
	bl	_raw_spin_lock
	ldr	r0, [r4, #68]
	cmp	r0, #0
	beq	.L15684
	ldr	r5, [r4, #12]
	add	r9, r4, #12
	cmp	r9, r5
	beq	.L15688
.L15685:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r10
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #12]
	cmp	r9, r5
	bne	.L15685
.L15688:
	ldr	r5, [r4, #20]
	add	r9, r4, #20
	cmp	r9, r5
	beq	.L15687
.L15686:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r10
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #20]
	cmp	r9, r5
	bne	.L15686
.L15687:
	ldr	r5, [r4, #44]
	add	r9, r4, #44
	cmp	r9, r5
	beq	.L15690
.L15689:
	mov	r0, r5
	sub	r6, r5, #36
	bl	list_del
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, r6
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #44]
	cmp	r9, r5
	bne	.L15689
.L15690:
	ldr	r0, [r4, #68]
	mov	r3, #0
	str	r3, [r4, #8]
	str	r3, [r4, #160]
.L15684:
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L15691
	ldr	r1, [r4, #160]
	blx	r3
.L15691:
	mov	r0, r8
.L15755:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock
.L15658:
	ldr	r0, .L15769+4
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L15758
.L15663:
	ldr	r10, .L15769+8
	add	r1, r5, #8
	mov	r0, #0
	bl	_set_bit
	ldrh	r3, [r10, #-14]
	tst	r3, #4
	bne	.L15759
.L15664:
	add	r9, r4, #4
	mov	r0, r9
	bl	_raw_spin_lock
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L15672
	ldr	r3, [r4, #72]
	add	r7, r4, #12
	ldr	r1, [r4, #156]
	ldr	fp, .L15769+12
	ldr	r0, [r3]
	mvn	r2, r1
	bl	smd_tiocmset_from_cb
	ldrh	r2, [fp, #-6]
	ldr	r3, [r4, #68]
	tst	r2, #4
	ldr	r8, [r3, #92]
	bne	.L15760
.L15666:
	movw	r6, #:lower16:gsmd_read_complete
	mov	r5, #0
	movt	r6, #:upper16:gsmd_read_complete
.L15673:
	mov	r1, #2048
	mov	r0, r8
	bl	gsmd_alloc_req.constprop.141
	subs	r3, r0, #0
	mov	r1, r7
	add	r0, r3, #36
	beq	.L15761
	add	r5, r5, #1
	str	r6, [r3, #28]
	ldr	r2, [r4, #12]
	bl	__list_add
	cmp	r5, #8
	bne	.L15673
.L15674:
	ldrh	r2, [fp, #-6]
	add	r6, r4, #44
	ldr	r3, [r4, #68]
	tst	r2, #4
	ldr	r8, [r3, #88]
	bne	.L15762
.L15671:
	movw	r10, #:lower16:gsmd_write_complete
	mov	r5, #0
	movt	r10, #:upper16:gsmd_write_complete
.L15678:
	mov	r1, #2048
	mov	r0, r8
	bl	gsmd_alloc_req.constprop.141
	subs	r3, r0, #0
	mov	r1, r6
	add	r0, r3, #36
	beq	.L15763
	add	r5, r5, #1
	str	r10, [r3, #28]
	ldr	r2, [r4, #44]
	bl	__list_add
	cmp	r5, #8
	bne	.L15678
.L15752:
	mov	r0, r9
	bl	_raw_spin_unlock
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gsmd_start_rx
.L15659:
	ldr	r0, .L15769+16
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L15764
.L15660:
	ldr	r0, [r5]
	bl	smd_read_avail
	cmp	r0, #0
	bne	.L15765
.L15661:
	ldr	r0, [r5]
	bl	smd_write_avail
	cmp	r0, #0
	bne	.L15766
.L15653:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15765:
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r4, #52
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3328]
	bl	queue_work
	b	.L15661
.L15766:
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r4, #28
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3328]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work
.L15761:
	ldr	r0, .L15769+20
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L15767
.L15668:
	ldr	r3, [r4, #12]
	cmp	r7, r3
	bne	.L15674
	movw	r0, #:lower16:.LC1213
	ldr	r1, .L15769+24
	movt	r0, #:upper16:.LC1213
	bl	printk
.L15672:
	mov	r0, r9
	b	.L15755
.L15763:
	ldr	r0, .L15769+20
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L15768
.L15676:
	ldr	r3, [r4, #44]
	cmp	r6, r3
	bne	.L15752
	ldr	r3, [r4, #68]
	mov	r1, r7
	ldr	r0, [r3, #92]
	bl	gsmd_free_requests
	movw	r0, #:lower16:.LC1215
	ldr	r1, .L15769+24
	movt	r0, #:upper16:.LC1215
	bl	printk
	b	.L15672
.L15757:
	mov	r1, r0
	mov	r0, r8
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L15758:
	movw	r1, #:lower16:.LC1211
	ldr	r2, .L15769+28
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1211
	bl	__dynamic_pr_debug
	b	.L15663
.L15764:
	movw	r1, #:lower16:.LC1210
	ldr	r2, .L15769+28
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1210
	bl	__dynamic_pr_debug
	b	.L15660
.L15756:
	movw	r1, #:lower16:.LC1214
	ldr	r2, .L15769+28
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1214
	bl	__dynamic_pr_debug
	b	.L15680
.L15759:
	movw	r1, #:lower16:.LC1212
	mov	r3, r4
	ldr	r2, .L15769+24
	movt	r1, #:upper16:.LC1212
	sub	r0, r10, #32
	bl	__dynamic_pr_debug
	b	.L15664
.L15762:
	mov	r1, #2048
	movw	ip, #:lower16:gsmd_write_complete
	ldr	r2, .L15769+32
	movt	ip, #:upper16:gsmd_write_complete
	mov	r3, #8
	str	r6, [sp]
	sub	r0, r10, #8
	str	r1, [sp, #8]
	movw	r1, #:lower16:.LC1209
	movt	r1, #:upper16:.LC1209
	str	r3, [sp, #4]
	mov	r3, r8
	str	ip, [sp, #12]
	bl	__dynamic_pr_debug
	b	.L15671
.L15760:
	movw	ip, #:lower16:gsmd_read_complete
	mov	r3, #2048
	ldr	r2, .L15769+32
	movt	ip, #:upper16:gsmd_read_complete
	mov	r0, #8
	str	r7, [sp]
	movw	r1, #:lower16:.LC1209
	movt	r1, #:upper16:.LC1209
	stmib	sp, {r0, r3, ip}
	mov	r3, r8
	sub	r0, r10, #8
	bl	__dynamic_pr_debug
	b	.L15666
.L15767:
	movw	r1, #:lower16:.LC690
	mov	r3, r5
	ldr	r2, .L15769+32
	movt	r1, #:upper16:.LC690
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L15668
.L15768:
	movw	r1, #:lower16:.LC690
	mov	r3, r5
	ldr	r2, .L15769+32
	movt	r1, #:upper16:.LC690
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L15676
.L15770:
	.align	2
.L15769:
	.word	.LANCHOR8-2928
	.word	.LANCHOR8-3024
	.word	.LANCHOR8-2992
	.word	.LANCHOR8-2976
	.word	.LANCHOR8-3040
	.word	.LANCHOR8-2944
	.word	.LANCHOR5+372
	.word	.LANCHOR5+360
	.word	.LANCHOR5+388
	.fnend
	.size	gsmd_notify, .-gsmd_notify
	.align	2
	.global	gsdio_alloc_requests
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_alloc_requests, %function
gsdio_alloc_requests:
	.fnstart
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	mov	r6, r2
	str	r10, [sp, #24]
	ldr	r10, .L15791
	strd	r8, [sp, #16]
	mov	r8, r3
	str	lr, [sp, #28]
	.pad #16
	sub	sp, sp, #16
	ldr	r9, [sp, #48]
	ldrh	r3, [r10, #-14]
	tst	r3, #4
	bne	.L15788
.L15772:
	cmp	r6, #0
	movgt	r4, #0
	bgt	.L15778
	b	.L15777
.L15775:
	add	r4, r4, #1
	str	r9, [r3, #28]
	ldr	r2, [r5]
	bl	__list_add
	cmp	r6, r4
	beq	.L15777
.L15778:
	mov	r1, r8
	mov	r2, #32
	mov	r0, r7
	bl	gsdio_alloc_req
	subs	r3, r0, #0
	mov	r1, r5
	add	r0, r3, #36
	bne	.L15775
	ldr	r3, .L15791+4
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L15789
.L15776:
	ldr	r3, [r5]
	cmp	r5, r3
	beq	.L15790
.L15777:
	mov	r0, #0
.L15771:
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15790:
	mvn	r0, #11
	b	.L15771
.L15788:
	movw	r1, #:lower16:.LC1209
	mov	r3, r0
	ldr	r2, .L15791+8
	movt	r1, #:upper16:.LC1209
	sub	r0, r10, #32
	stm	sp, {r5, r6, r8, r9}
	bl	__dynamic_pr_debug
	b	.L15772
.L15789:
	movw	r1, #:lower16:.LC690
	mov	r3, r4
	ldr	r2, .L15791+8
	sub	r0, r10, #8
	movt	r1, #:upper16:.LC690
	bl	__dynamic_pr_debug
	b	.L15776
.L15792:
	.align	2
.L15791:
	.word	.LANCHOR8-3088
	.word	.LANCHOR8-3072
	.word	.LANCHOR5+336
	.fnend
	.size	gsdio_alloc_requests, .-gsdio_alloc_requests
	.align	2
	.global	gsdio_start_rx
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_start_rx, %function
gsdio_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	subs	r5, r0, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #8
	sub	sp, sp, #8
	beq	.L15815
	ldr	r4, .L15821
	ldrh	r3, [r4, #-14]
	tst	r3, #4
	bne	.L15816
.L15795:
	add	r6, r5, #4
	mov	r0, r6
	bl	_raw_spin_lock_irq
	ldr	r3, [r5, #96]
	cmp	r3, #0
	beq	.L15817
	ldr	r2, [r5, #108]
	cmp	r2, #0
	beq	.L15818
	add	r8, r5, #12
	mov	r9, #2048
	ldr	r7, [r3, #92]
	b	.L15801
.L15803:
	bl	list_del
	str	r9, [r4, #-32]
	ldr	r3, [r5, #44]
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r5, #44]
	bl	_raw_spin_unlock_irq
	ldr	r3, [r7, #8]
	mov	r1, r10
	mov	r2, #32
	mov	r0, r7
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irq
	cmp	r10, #0
	bne	.L15819
	ldr	r3, [r5, #96]
	cmp	r3, #0
	beq	.L15820
.L15801:
	ldr	r4, [r5, #12]
	cmp	r8, r4
	mov	r0, r4
	sub	r10, r4, #36
	bne	.L15803
.L15798:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irq
.L15818:
	ldr	r0, .L15821+4
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L15798
	movw	r1, #:lower16:.LC1216
	ldr	r2, .L15821+8
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1216
	bl	__dynamic_pr_debug
	b	.L15798
.L15820:
	ldr	r0, .L15821+12
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L15798
	movw	r1, #:lower16:.LC234
	ldr	r2, .L15821+8
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC234
	bl	__dynamic_pr_debug
	b	.L15798
.L15817:
	ldr	r3, .L15821+16
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	beq	.L15798
	movw	r1, #:lower16:.LC234
	sub	r0, r4, #8
	ldr	r2, .L15821+8
	movt	r1, #:upper16:.LC234
	bl	__dynamic_pr_debug
	b	.L15798
.L15816:
	ldr	ip, [r5]
	movw	r1, #:lower16:.LC237
	mov	r3, r5
	movt	r1, #:upper16:.LC237
	ldr	r2, .L15821+8
	sub	r0, r4, #32
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L15795
.L15819:
	movw	r0, #:lower16:.LC107
	mov	r2, r5
	ldr	r1, .L15821+8
	movt	r0, #:upper16:.LC107
	ldr	r3, [r5]
	bl	printk
	mov	r2, r8
	mov	r0, r4
	ldr	r1, [r5, #16]
	bl	__list_add
	ldr	r3, [r5, #44]
	add	r3, r3, #1
	str	r3, [r5, #44]
	b	.L15798
.L15815:
	ldr	r1, .L15821+8
	movw	r0, #:lower16:.LC105
	movt	r0, #:upper16:.LC105
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L15822:
	.align	2
.L15821:
	.word	.LANCHOR8-2896
	.word	.LANCHOR8-2848
	.word	.LANCHOR5+408
	.word	.LANCHOR8-2832
	.word	.LANCHOR8-2880
	.fnend
	.size	gsdio_start_rx, .-gsdio_start_rx
	.align	2
	.global	gsdio_write
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_write, %function
gsdio_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r4, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #16
	sub	sp, sp, #16
	beq	.L15845
	cmp	r1, #0
	mov	r5, r1
	beq	.L15846
	ldr	r6, .L15851
	ldrh	r3, [r6, #-14]
	tst	r3, #4
	bne	.L15847
.L15827:
	ldr	r3, [r4, #108]
	cmp	r3, #0
	beq	.L15848
	ldr	r6, .L15851+4
	ldrh	r3, [r6, #-14]
	tst	r3, #4
	bne	.L15849
.L15829:
	ldr	r3, [r5, #48]
	cmp	r3, #0
	bne	.L15830
	ldr	r3, .L15851+8
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L15850
.L15831:
	mov	r3, #0
	str	r3, [r4, #8]
.L15825:
	mvn	r0, #18
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15848:
	ldr	r3, .L15851+12
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	beq	.L15825
	movw	r1, #:lower16:.LC1219
	sub	r0, r6, #8
	ldr	r2, .L15851+16
	movt	r1, #:upper16:.LC1219
	bl	__dynamic_pr_debug
	b	.L15825
.L15847:
	ldr	lr, [r4, #8]
	str	r5, [sp, #4]
	movw	r1, #:lower16:.LC1218
	ldr	ip, [r5, #48]
	movt	r1, #:upper16:.LC1218
	mov	r3, r4
	ldr	r2, .L15851+16
	sub	r0, r6, #32
	str	ip, [sp, #8]
	str	lr, [sp, #12]
	ldr	ip, [r4]
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L15827
.L15850:
	movw	r1, #:lower16:.LC1221
	sub	r0, r6, #8
	ldr	r2, .L15851+16
	movt	r1, #:upper16:.LC1221
	bl	__dynamic_pr_debug
	b	.L15831
.L15849:
	movw	r1, #:lower16:.LC1220
	mvn	r3, #18
	ldr	r2, .L15851+16
	movt	r1, #:upper16:.LC1220
	sub	r0, r6, #32
	bl	__dynamic_pr_debug
	b	.L15829
.L15830:
	add	r5, r4, #4
	mov	r0, r5
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	_raw_spin_lock_irq
	movw	r0, #:lower16:.LC1222
	mvn	r3, #18
	ldr	r1, .L15851+16
	movt	r0, #:upper16:.LC1222
	ldr	r2, [r4]
	bl	printk
	b	.L15825
.L15846:
	movw	r0, #:lower16:.LC1217
	ldr	r1, .L15851+16
	movt	r0, #:upper16:.LC1217
	ldr	r2, [r4]
	bl	printk
	b	.L15825
.L15845:
	movw	r0, #:lower16:.LC105
	ldr	r1, .L15851+16
	movt	r0, #:upper16:.LC105
	bl	printk
	b	.L15825
.L15852:
	.align	2
.L15851:
	.word	.LANCHOR8-2800
	.word	.LANCHOR8-2752
	.word	.LANCHOR8-2736
	.word	.LANCHOR8-2784
	.word	.LANCHOR5+424
	.fnend
	.size	gsdio_write, .-gsdio_write
	.align	2
	.global	gsdio_rx_push
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_rx_push, %function
gsdio_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r5, .L15891
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #28
	strd	r8, [sp, #16]
	sub	r8, r0, #8
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r5, #-14]
	.pad #20
	sub	sp, sp, #20
	tst	r3, #4
	bne	.L15884
.L15854:
	sub	r6, r4, #24
	mov	r0, r6
	bl	_raw_spin_lock_irq
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L15885
	ldr	r5, [r4, #-8]
	ldr	r3, [r3, #92]
	cmp	r5, r8
	str	r3, [sp, #12]
	beq	.L15858
	movw	r9, #:lower16:.LC358
	sub	r10, r4, #16
	movt	r9, #:upper16:.LC358
.L15857:
	ldr	r3, [r5, #8]
	cmn	r3, #108
	bne	.L15886
	ldr	r0, .L15891+4
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L15887
.L15858:
	mov	r0, r6
	bl	_raw_spin_unlock_irq
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gsdio_start_rx
.L15886:
	cmp	r3, #0
	beq	.L15860
	mov	r2, r7
	ldr	r1, .L15891+8
	mov	r0, r9
	str	r3, [sp]
	ldr	r3, [r4, #-28]
	bl	printk
.L15860:
	ldr	r3, [r4, #80]
	mov	r0, r5
	sub	fp, r5, #36
	cmp	r3, #0
	beq	.L15888
	bl	list_del
	ldr	r3, [r4, #20]
	mov	r1, fp
	mov	r0, r7
	sub	r3, r3, #1
	str	r3, [r4, #20]
	bl	gsdio_write
	ldr	r3, [r4, #68]
	mov	r2, r0
	mov	r1, r10
	mov	r0, r5
	cmp	r3, #0
	beq	.L15889
	cmp	r2, #0
	bne	.L15865
	ldr	r3, [r4, #-20]
	cmp	r3, #0
	bne	.L15865
	ldr	r2, [r4, #-16]
	bl	__list_add
	ldr	r5, [r4, #-8]
	ldr	r3, [r4, #16]
	cmp	r8, r5
	add	r3, r3, #1
	str	r3, [r4, #16]
	bne	.L15857
	b	.L15858
.L15885:
	ldr	r3, .L15891+12
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L15890
.L15883:
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq
.L15884:
	ldr	ip, [r4, #-28]
	movw	r1, #:lower16:.LC1223
	mov	r3, r7
	movt	r1, #:upper16:.LC1223
	ldr	r2, .L15891+8
	sub	r0, r5, #32
	str	ip, [sp]
	str	r8, [sp, #4]
	bl	__dynamic_pr_debug
	b	.L15854
.L15887:
	movw	r1, #:lower16:.LC1225
	ldr	r2, .L15891+8
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1225
	str	r7, [sp]
	ldr	r3, [r4, #-28]
	bl	__dynamic_pr_debug
	b	.L15858
.L15865:
	mov	r1, r8
	mov	r0, r5
	ldr	r2, [r4, #-8]
	bl	__list_add
	ldr	r3, [r4, #20]
	add	r3, r3, #1
	str	r3, [r4, #20]
	b	.L15858
.L15890:
	movw	r1, #:lower16:.LC1224
	sub	r0, r5, #8
	ldr	r2, .L15891+8
	movt	r1, #:upper16:.LC1224
	bl	__dynamic_pr_debug
	b	.L15883
.L15889:
	str	r3, [r4, #-20]
	ldr	r0, [r5, #-36]
	bl	kfree
	ldr	r0, [sp, #12]
	mov	r1, fp
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	b	.L15883
.L15888:
	movw	r0, #:lower16:.LC1226
	ldr	r1, .L15891+8
	movt	r0, #:upper16:.LC1226
	bl	printk
	mov	r0, r5
	bl	__list_del_entry
	mov	r0, r5
	sub	r1, r4, #16
	ldr	r2, [r4, #-16]
	bl	__list_add
	ldrd	r2, [r4, #16]
	add	r2, r2, #1
	sub	r3, r3, #1
	strd	r2, [r4, #16]
	b	.L15858
.L15892:
	.align	2
.L15891:
	.word	.LANCHOR8-2704
	.word	.LANCHOR8-2656
	.word	.LANCHOR5+436
	.word	.LANCHOR8-2688
	.fnend
	.size	gsdio_rx_push, .-gsdio_rx_push
	.align	2
	.global	gsdio_read_pending
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_read_pending, %function
gsdio_read_pending:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	beq	.L15904
	ldr	r3, [r0, #120]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L15906
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r5, #-6]
	tst	r3, #4
	bne	.L15905
.L15900:
	b	.L15900
.L15905:
	ldr	r6, .L15906+4
	movw	r4, #:lower16:.LC1227
	sub	r7, r5, #24
	movt	r4, #:upper16:.LC1227
.L15897:
	mvn	r3, #18
	mov	r2, r6
	mov	r1, r4
	mov	r0, r7
	bl	__dynamic_pr_debug
	ldrh	r3, [r5, #-6]
	tst	r3, #4
	bne	.L15897
	b	.L15900
.L15904:
	movw	r0, #:lower16:.LC105
	ldr	r1, .L15906+4
	movt	r0, #:upper16:.LC105
	b	printk
.L15907:
	.align	2
.L15906:
	.word	.LANCHOR8-2640
	.word	.LANCHOR5+452
	.fnend
	.size	gsdio_read_pending, .-gsdio_read_pending
	.align	2
	.global	gsdio_tx_pull
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_tx_pull, %function
gsdio_tx_pull:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	ldr	r6, .L15925
	sub	r7, r0, #8
	strd	r8, [sp, #16]
	sub	r9, r0, #60
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #8
	sub	sp, sp, #8
	ldrh	r3, [r6, #-14]
	tst	r3, #4
	bne	.L15921
.L15909:
	ldr	r3, [r4, #36]
	cmp	r3, #0
	beq	.L15922
	sub	r5, r4, #56
	mov	r0, r5
	bl	_raw_spin_lock_irq
	ldr	r8, [r4, #-8]
	cmp	r7, r8
	beq	.L15911
	ldr	r3, [r4, #48]
	cmp	r3, #0
	bne	.L15912
	ldr	r3, .L15925+4
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L15923
.L15911:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irq
.L15921:
	ldr	ip, [r4, #-60]
	movw	r1, #:lower16:.LC233
	mov	r3, r9
	movt	r1, #:upper16:.LC233
	ldr	r2, .L15925+8
	sub	r0, r6, #32
	str	ip, [sp]
	str	r7, [sp, #4]
	bl	__dynamic_pr_debug
	b	.L15909
.L15923:
	movw	r1, #:lower16:.LC1229
	sub	r0, r6, #8
	ldr	r2, .L15925+8
	movt	r1, #:upper16:.LC1229
	bl	__dynamic_pr_debug
	b	.L15911
.L15912:
	ldr	r3, [r4, #36]
	mov	r0, r8
	sub	r10, r8, #36
	ldr	r6, [r3, #88]
	bl	list_del
	ldr	r3, [r4, #16]
	mov	r0, r5
	sub	r3, r3, #1
	str	r3, [r4, #16]
	bl	_raw_spin_unlock_irq
	mov	r0, r5
	bl	_raw_spin_lock_irq
	mvn	r3, #18
	movw	r0, #:lower16:.LC1230
	ldr	r1, .L15925+8
	mov	r2, r9
	movt	r0, #:upper16:.LC1230
	str	r3, [sp]
	ldr	r3, [r4, #-60]
	bl	printk
	ldr	r3, [r4, #36]
	cmp	r3, #0
	beq	.L15924
	mov	r1, r7
	mov	r0, r8
	ldr	r2, [r4, #-8]
	bl	__list_add
	ldr	r3, [r4, #16]
	add	r3, r3, #1
	str	r3, [r4, #16]
	b	.L15911
.L15924:
	ldr	r0, [r8, #-36]
	bl	kfree
	ldr	r3, [r6, #8]
	mov	r1, r10
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L15911
.L15922:
	ldr	r1, .L15925+8
	movw	r0, #:lower16:.LC1228
	movt	r0, #:upper16:.LC1228
	bl	printk
	mov	r0, r9
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	gsdio_read_pending
.L15926:
	.align	2
.L15925:
	.word	.LANCHOR8-2608
	.word	.LANCHOR8-2592
	.word	.LANCHOR5+472
	.fnend
	.size	gsdio_tx_pull, .-gsdio_tx_pull
	.align	2
	.global	gsdio_start_io
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_start_io, %function
gsdio_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15941
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L15937
.L15928:
	add	r5, r4, #4
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #96]
	mov	r8, r0
	cmp	r3, #0
	beq	.L15938
	add	r9, r4, #12
	movw	r2, #:lower16:gsdio_read_complete
	ldr	r0, [r3, #92]
	mov	r1, r9
	movt	r2, #:upper16:gsdio_read_complete
	bl	gsdio_alloc_requests.constprop.142
	subs	r6, r0, #0
	bne	.L15939
	ldr	r3, [r4, #96]
	mov	r7, #8
	movw	r2, #:lower16:gsdio_write_complete
	movt	r2, #:upper16:gsdio_write_complete
	add	r1, r4, #52
	str	r7, [r4, #44]
	ldr	r0, [r3, #88]
	bl	gsdio_alloc_requests.constprop.142
	subs	r6, r0, #0
	bne	.L15940
	mov	r1, r8
	mov	r0, r5
	str	r7, [r4, #76]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	bl	gsdio_start_rx
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r4, #60
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3324]
	bl	queue_work
.L15927:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15937:
	movw	r1, #:lower16:.LC289
	sub	r0, r3, #32
	ldr	r2, .L15941+4
	movt	r1, #:upper16:.LC289
	bl	__dynamic_pr_debug
	b	.L15928
.L15938:
	mov	r1, r0
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	mvn	r6, #18
	b	.L15927
.L15940:
	ldr	r3, [r4, #96]
	mov	r1, r9
	ldr	r0, [r3, #92]
	bl	gsdio_free_requests
	mov	r3, #0
	mov	r1, r8
	mov	r0, r5
	str	r3, [r4, #44]
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC1232
	ldr	r1, .L15941+4
	movt	r0, #:upper16:.LC1232
	bl	printk
	b	.L15927
.L15939:
	mov	r1, r8
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	movw	r0, #:lower16:.LC1231
	ldr	r1, .L15941+4
	movt	r0, #:upper16:.LC1231
	bl	printk
	b	.L15927
.L15942:
	.align	2
.L15941:
	.word	.LANCHOR8-2560
	.word	.LANCHOR5+488
	.fnend
	.size	gsdio_start_io, .-gsdio_start_io
	.align	2
	.global	gsdio_port_free
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_port_free, %function
gsdio_port_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r2, r0
	mov	r3, #104
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r0, #:lower16:.LANCHOR1
	str	lr, [sp, #4]
	mul	r3, r3, r2
	movt	r0, #:upper16:.LANCHOR1
	add	r1, r0, r3
	ldr	r4, [r1, #24]
	cmp	r4, #0
	beq	.L15946
	add	r0, r1, #28
	bl	platform_driver_unregister
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree
.L15946:
	movw	r0, #:lower16:.LC176
	ldr	r1, .L15947
	movt	r0, #:upper16:.LC176
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk
.L15948:
	.align	2
.L15947:
	.word	.LANCHOR5+504
	.fnend
	.size	gsdio_port_free, .-gsdio_port_free
	.align	2
	.global	gsdio_ctrl_modem_status
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ctrl_modem_status, %function
gsdio_ctrl_modem_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #2850
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movt	r3, #:upper16:.LANCHOR4
	str	lr, [sp, #8]
	mov	r4, r0
	ldrh	r2, [r3, r2]
	mov	r5, r1
	.pad #12
	sub	sp, sp, #12
	tst	r2, #4
	bne	.L15972
.L15950:
	ands	r1, r4, #128
	moveq	r3, #1
	streq	r1, [r5, #172]
	beq	.L15952
	mov	r2, #8
	mov	r3, #9
	mov	r1, r2
	str	r2, [r5, #172]
.L15952:
	tst	r4, #64
	ldr	r0, [r5, #96]
	movne	r1, r3
	strne	r3, [r5, #172]
	tst	r4, #256
	orrne	r1, r1, #2
	strne	r1, [r5, #172]
	cmp	r0, #0
	beq	.L15949
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L15949
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	bx	r3
.L15949:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L15972:
	ldr	ip, [r5]
	movw	r1, #:lower16:.LC963
	add	r0, r3, #2832
	movt	r1, #:upper16:.LC963
	mov	r3, r5
	ldr	r2, .L15973
	str	ip, [sp]
	str	r4, [sp, #4]
	bl	__dynamic_pr_debug
	b	.L15950
.L15974:
	.align	2
.L15973:
	.word	.LANCHOR5-824
	.fnend
	.size	gsdio_ctrl_modem_status, .-gsdio_ctrl_modem_status
	.align	2
	.global	gsdio_ch_notify
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_ch_notify, %function
gsdio_ch_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15988
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r0
	str	lr, [sp, #8]
	mov	r4, r1
	.pad #12
	sub	sp, sp, #12
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L15986
.L15976:
	cmp	r4, #2
	movweq	r3, #:lower16:.LANCHOR1
	addeq	r1, r5, #28
	beq	.L15985
	cmp	r4, #1
	beq	.L15987
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L15987:
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r5, #60
.L15985:
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3324]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work
.L15986:
	movw	r1, #:lower16:.LC1233
	ldr	lr, [r5]
	cmp	r4, #1
	movt	r1, #:upper16:.LC1233
	movw	ip, #:lower16:.LC1234
	ldr	r2, .L15988+4
	movt	ip, #:upper16:.LC1234
	moveq	ip, r1
	movw	r1, #:lower16:.LC1235
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC1235
	mov	r3, r5
	str	lr, [sp]
	str	ip, [sp, #4]
	bl	__dynamic_pr_debug
	b	.L15976
.L15989:
	.align	2
.L15988:
	.word	.LANCHOR8-2544
	.word	.LANCHOR5+520
	.fnend
	.size	gsdio_ch_notify, .-gsdio_ch_notify
	.align	2
	.global	gsdio_port_alloc
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_port_alloc, %function
gsdio_port_alloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r9, r0
	mov	r8, r2
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r3, #8]
	.pad #8
	sub	sp, sp, #8
	cmp	r0, #0
	beq	.L15994
	mov	r2, #188
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L16000
.L15991:
	mov	r7, #0
	str	r9, [r4]
	add	r2, r4, #20
	add	r1, r4, #12
	movw	r6, #:lower16:gsdio_rx_push
	str	r7, [r4, #4]
	ldr	r3, [r5]	@ unaligned
	movw	lr, #:lower16:gsdio_tx_pull
	movw	r0, #:lower16:gsdio_ctrl_wq
	movw	ip, #:lower16:gsdio_open_work
	movt	lr, #:upper16:gsdio_tx_pull
	movt	ip, #:upper16:gsdio_open_work
	movt	r6, #:upper16:gsdio_rx_push
	movt	r0, #:upper16:gsdio_ctrl_wq
	str	r3, [r4, #100]
	ldrh	r3, [r5, #4]	@ unaligned
	strh	r3, [r4, #104]	@ movhi
	mov	r3, #2560
	ldrb	r5, [r5, #6]	@ zero_extendqisi2
	str	r1, [r4, #12]
	str	r2, [r4, #20]
	str	r1, [r4, #16]
	add	r1, r4, #64
	strd	r2, [r4, #24]
	add	r2, r4, #32
	str	r2, [r4, #32]
	str	r2, [r4, #36]
	add	r2, r4, #52
	strb	r5, [r4, #106]
	add	r5, r4, #128
	str	r6, [r4, #40]
	ldr	r6, .L16003
	str	r2, [r4, #52]
	str	r2, [r4, #56]
	add	r2, r4, #84
	str	r3, [r4, #60]
	str	r5, [r4, #128]
	str	r5, [r4, #132]
	mov	r5, #104
	str	r1, [r4, #64]
	str	r1, [r4, #68]
	mov	r1, r7
	mul	r5, r5, r9
	str	lr, [r4, #72]
	str	r3, [r4, #80]
	str	r2, [r4, #84]
	str	r2, [r4, #88]
	mov	r2, r7
	str	r0, [r4, #92]
	add	r0, r4, #140
	str	r3, [r4, #124]
	str	ip, [r4, #136]
	bl	init_timer_key
	movw	r2, #:lower16:delayed_work_timer_fn
	movw	r3, #:lower16:.LANCHOR1
	ldrh	ip, [r6, #-14]
	movt	r2, #:upper16:delayed_work_timer_fn
	movt	r3, #:upper16:.LANCHOR1
	movw	r0, #:lower16:gsdio_ch_probe
	movw	r1, #:lower16:gsdio_ch_remove
	movt	r0, #:upper16:gsdio_ch_probe
	movt	r1, #:upper16:gsdio_ch_remove
	str	r2, [r4, #156]
	add	lr, r4, #124
	add	r2, r3, r5
	tst	ip, #4
	add	r5, r2, #28
	str	lr, [r4, #160]
	str	r4, [r2, #24]
	str	r8, [r4, #120]
	strd	r0, [r2, #28]
	ldr	r3, [r8]
	str	r3, [r2, #48]
	str	r7, [r2, #56]
	bne	.L16001
.L15993:
	mov	r0, r5
	bl	platform_driver_register
	ldr	r3, .L16003+4
	ldrh	r0, [r3, #-6]
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	bne	.L16002
.L15990:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15994:
	mov	r4, #16
	b	.L15991
.L16002:
	ldr	ip, [r4]
	movw	r1, #:lower16:.LC237
	sub	r0, r6, #8
	mov	r3, r4
	movt	r1, #:upper16:.LC237
	ldr	r2, .L16003+8
	str	ip, [sp]
	bl	__dynamic_pr_debug
	mov	r0, #0
	b	.L15990
.L16001:
	ldr	ip, [r8]
	movw	r1, #:lower16:.LC1237
	mov	r3, r4
	movt	r1, #:upper16:.LC1237
	ldr	r2, .L16003+8
	sub	r0, r6, #32
	str	ip, [sp, #4]
	ldr	ip, [r4]
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L15993
.L16000:
	movw	r0, #:lower16:.LC1236
	ldr	r1, .L16003+8
	movt	r0, #:upper16:.LC1236
	bl	printk
	mvn	r0, #11
	b	.L15990
.L16004:
	.align	2
.L16003:
	.word	.LANCHOR8-2512
	.word	.LANCHOR8-2496
	.word	.LANCHOR5+536
	.fnend
	.size	gsdio_port_alloc, .-gsdio_port_alloc
	.align	2
	.global	gsdio_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_connect, %function
gsdio_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r3]
	cmp	r1, r2
	bcs	.L16021
	cmp	r0, #0
	mov	r4, r0
	beq	.L16022
	mov	r2, #104
	mla	r1, r2, r1, r3
	ldr	r5, [r1, #24]
	add	r6, r5, #4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	movw	r3, #:lower16:gsdio_ctrl_notify_modem
	mov	r1, r0
	str	r4, [r5, #96]
	movt	r3, #:upper16:gsdio_ctrl_notify_modem
	mov	r0, r6
	str	r3, [r4, #140]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L16023
	ldr	r3, [r4, #88]
	str	r5, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L16024
	ldr	r3, [r4, #92]
	str	r5, [r3]
	ldr	r3, [r5, #108]
	cmp	r3, #0
	beq	.L16005
	ldr	r0, .L16026
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L16025
.L16012:
	mov	r0, r5
	bl	gsdio_start_io
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L16005
	mov	r0, r4
	ldr	r1, [r5, #172]
	blx	r3
.L16005:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L16025:
	movw	r1, #:lower16:.LC1239
	ldr	r2, .L16026+4
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1239
	bl	__dynamic_pr_debug
	b	.L16012
.L16024:
	movw	r0, #:lower16:.LC1238
	mov	r2, r6
	ldr	r1, .L16026+4
	movt	r0, #:upper16:.LC1238
	bl	printk
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	str	r3, [r5, #96]
	ldr	r2, [r4, #88]
	str	r3, [r2]
	b	.L16005
.L16023:
	movw	r0, #:lower16:.LC1238
	mov	r2, r6
	ldr	r1, .L16026+4
	movt	r0, #:upper16:.LC1238
	bl	printk
	mov	r3, #0
	str	r3, [r5, #96]
	b	.L16005
.L16022:
	movw	r0, #:lower16:.LC177
	ldr	r1, .L16026+4
	mvn	r6, #21
	movt	r0, #:upper16:.LC177
	bl	printk
	b	.L16005
.L16021:
	movw	r0, #:lower16:.LC176
	mov	r2, r1
	ldr	r1, .L16026+4
	movt	r0, #:upper16:.LC176
	mvn	r6, #21
	bl	printk
	b	.L16005
.L16027:
	.align	2
.L16026:
	.word	.LANCHOR8-2464
	.word	.LANCHOR5+556
	.fnend
	.size	gsdio_connect, .-gsdio_connect
	.align	2
	.global	gsdio_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_disconnect, %function
gsdio_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3]
	cmp	r1, r2
	bcs	.L16044
	cmp	r0, #0
	beq	.L16045
	mov	r2, #104
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r6, #0
	mla	r1, r2, r1, r3
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r0, [r3, #3324]
	ldr	r4, [r1, #24]
	add	r1, r4, #80
	add	r8, r4, #4
	str	r6, [r4, #176]
	bl	queue_work
	mov	r0, r8
	add	r10, r4, #12
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r8
	str	r6, [r4, #96]
	str	r6, [r4, #180]
	str	r6, [r4, #184]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #92]
	str	r6, [r3]
	ldr	r0, [r5, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #88]
	mov	r0, r8
	str	r6, [r3]
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #12]
	mov	r9, r0
	ldr	r7, [r5, #92]
	cmp	r10, r6
	beq	.L16031
.L16032:
	mov	r0, r6
	sub	fp, r6, #36
	bl	list_del
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, fp
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [r4, #12]
	cmp	r10, r6
	bne	.L16032
	ldr	r7, [r5, #92]
.L16031:
	ldr	r6, [r4, #20]
	add	r10, r4, #20
	cmp	r10, r6
	beq	.L16036
.L16033:
	mov	r0, r6
	sub	fp, r6, #36
	bl	list_del
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r7, #8]
	mov	r1, fp
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [r4, #20]
	cmp	r10, r6
	bne	.L16033
.L16036:
	ldr	r6, [r4, #52]
	add	r7, r4, #52
	ldr	r5, [r5, #88]
	cmp	r7, r6
	beq	.L16035
.L16034:
	mov	r0, r6
	sub	r10, r6, #36
	bl	list_del
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, r10
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [r4, #52]
	cmp	r7, r6
	bne	.L16034
.L16035:
	mov	r3, #0
	mov	r1, r9
	mov	r0, r8
	str	r3, [r4, #8]
	str	r3, [r4, #44]
	str	r3, [r4, #48]
	str	r3, [r4, #76]
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore
.L16044:
	movw	r0, #:lower16:.LC176
	mov	r2, r1
	ldr	r1, .L16046
	movt	r0, #:upper16:.LC176
	b	printk
.L16045:
	movw	r0, #:lower16:.LC177
	ldr	r1, .L16046
	movt	r0, #:upper16:.LC177
	b	printk
.L16047:
	.align	2
.L16046:
	.word	.LANCHOR5+572
	.fnend
	.size	gsdio_disconnect, .-gsdio_disconnect
	.align	2
	.global	gsdio_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsdio_setup, %function
gsdio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L16069
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	.pad #16
	sub	sp, sp, #16
	ldrh	r2, [ip, #-6]
	tst	r2, #4
	bne	.L16064
	sub	r3, r6, #1
	cmp	r3, #1
	bhi	.L16065
.L16050:
	mov	r5, #0
	mvn	r2, #127
	mov	r1, #37
	mov	ip, #8
	movw	r0, #:lower16:.LC695
	mov	r3, r5
	str	r5, [sp]
	movt	r0, #:upper16:.LC695
	strb	r2, [sp, #9]
	mov	r2, #1
	strb	r1, [sp, #10]
	mov	r1, #10
	movw	r4, #:lower16:.LANCHOR1
	strb	r5, [sp, #11]
	movt	r4, #:upper16:.LANCHOR1
	strb	r5, [sp, #12]
	strb	ip, [sp, #13]
	strb	r5, [sp, #14]
	strb	r5, [sp, #15]
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #3324]
	beq	.L16066
	movw	r1, #:lower16:.LC1243
	ldr	r2, .L16069+4
	add	r0, r4, #4
	movt	r1, #:upper16:.LC1243
	bl	__mutex_init
	add	r1, sp, #9
	mov	r0, r5
	ldr	r2, .L16069+8
	bl	gsdio_port_alloc
	ldr	r3, [r4]
	subs	r5, r0, #0
	add	r2, r3, #1
	str	r2, [r4]
	bne	.L16053
	cmp	r6, #2
	bne	.L16054
	movw	r1, #:lower16:.LC1243
	ldr	r2, .L16069+4
	add	r0, r4, #108
	movt	r1, #:upper16:.LC1243
	bl	__mutex_init
	add	r1, sp, #9
	ldr	r2, .L16069+12
	mov	r0, #1
	bl	gsdio_port_alloc
	ldr	r3, [r4]
	cmp	r0, #0
	add	r2, r3, #1
	str	r2, [r4]
	bne	.L16067
.L16054:
	movw	r0, #:lower16:.LC1245
	mov	r1, #0
	movt	r0, #:upper16:.LC1245
	bl	debugfs_create_dir
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L16048
	ldr	ip, .L16069+16
	movw	r0, #:lower16:.LC273
	mov	r3, #0
	movt	r0, #:upper16:.LC273
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
.L16048:
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L16064:
	movw	r1, #:lower16:.LC1240
	mov	r3, r0
	ldr	r2, .L16069+20
	sub	r0, ip, #24
	movt	r1, #:upper16:.LC1240
	str	r6, [sp]
	bl	__dynamic_pr_debug
	sub	r3, r6, #1
	cmp	r3, #1
	bls	.L16050
.L16065:
	movw	r0, #:lower16:.LC1241
	mov	r2, r6
	ldr	r1, .L16069+20
	movt	r0, #:upper16:.LC1241
	mov	r3, #2
	bl	printk
	mvn	r5, #21
	b	.L16048
.L16066:
	movw	r0, #:lower16:.LC1242
	ldr	r1, .L16069+20
	mvn	r5, #11
	movt	r0, #:upper16:.LC1242
	bl	printk
	b	.L16048
.L16067:
	mov	r5, r0
.L16053:
	movw	r0, #:lower16:.LC1244
	ldr	r1, .L16069+20
	mov	r6, #0
	movt	r0, #:upper16:.LC1244
	str	r3, [r4]
	bl	printk
.L16055:
	ldr	r3, [r4]
	cmp	r3, r6
	bls	.L16068
	mov	r0, r6
	add	r6, r6, #1
	bl	gsdio_port_free
	b	.L16055
.L16068:
	ldr	r0, [r4, #3324]
	bl	destroy_workqueue
	b	.L16048
.L16070:
	.align	2
.L16069:
	.word	.LANCHOR8-2448
	.word	.LANCHOR1+4044
	.word	.LANCHOR6-1612
	.word	.LANCHOR6-1600
	.word	.LANCHOR5+604
	.word	.LANCHOR5+592
	.fnend
	.size	gsdio_setup, .-gsdio_setup
	.align	2
	.global	gsmd_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_connect, %function
gsmd_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16087
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r5, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L16082
.L16072:
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r3, [r6, #212]
	cmp	r5, r3
	bcs	.L16083
	cmp	r4, #0
	beq	.L16084
	mov	r3, #104
	mov	r7, #0
	mla	r5, r3, r5, r6
	ldr	r5, [r5, #236]
	add	r8, r5, #4
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	movw	r3, #:lower16:gsmd_notify_modem
	mov	r1, r0
	str	r4, [r5, #68]
	movt	r3, #:upper16:gsmd_notify_modem
	mov	r0, r8
	str	r3, [r4, #140]
	str	r7, [r5, #164]
	str	r7, [r5, #168]
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r8, r0, #0
	bne	.L16085
	ldr	r3, [r4, #88]
	str	r5, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r8, r0, #0
	bne	.L16086
	ldr	r3, [r4, #92]
	ldr	r4, [r6, #3328]
	str	r5, [r3]
	bl	msecs_to_jiffies
	mov	r2, r0
	add	r1, r5, #76
	mov	r0, r4
	bl	queue_delayed_work
.L16071:
	mov	r0, r8
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L16082:
	movw	r1, #:lower16:.LC1246
	sub	r0, r3, #32
	ldr	r2, .L16087+4
	movt	r1, #:upper16:.LC1246
	mov	r3, r4
	str	r5, [sp]
	bl	__dynamic_pr_debug
	b	.L16072
.L16083:
	movw	r0, #:lower16:.LC1247
	mov	r2, r5
	ldr	r1, .L16087+4
	movt	r0, #:upper16:.LC1247
	mvn	r8, #21
	bl	printk
	b	.L16071
.L16086:
	movw	r0, #:lower16:.LC389
	ldr	r1, .L16087+4
	movt	r0, #:upper16:.LC389
	ldr	r2, [r4, #92]
	bl	printk
	str	r7, [r5, #68]
	ldr	r3, [r4, #88]
	str	r7, [r3]
	b	.L16071
.L16085:
	movw	r0, #:lower16:.LC388
	ldr	r1, .L16087+4
	movt	r0, #:upper16:.LC388
	ldr	r2, [r4, #88]
	bl	printk
	str	r7, [r5, #68]
	b	.L16071
.L16084:
	movw	r0, #:lower16:.LC177
	ldr	r1, .L16087+4
	mvn	r8, #21
	movt	r0, #:upper16:.LC177
	bl	printk
	b	.L16071
.L16088:
	.align	2
.L16087:
	.word	.LANCHOR8-2416
	.word	.LANCHOR5+712
	.fnend
	.size	gsmd_connect, .-gsmd_connect
	.align	2
	.global	gsmd_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_disconnect, %function
gsmd_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16115
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r4, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r2, [r3, #-6]
	.pad #20
	sub	sp, sp, #20
	tst	r2, #4
	bne	.L16111
.L16090:
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	ldr	r3, [r7, #212]
	cmp	r4, r3
	bcs	.L16112
	cmp	r5, #0
	beq	.L16113
	mov	r3, #104
	mov	r6, #0
	mla	r4, r3, r4, r7
	ldr	r4, [r4, #236]
	add	r8, r4, #4
	add	fp, r4, #12
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r8
	str	r6, [r4, #68]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #92]
	str	r6, [r3]
	ldr	r0, [r5, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #88]
	mov	r0, r8
	str	r6, [r3]
	bl	_raw_spin_lock_irqsave
	ldr	r6, [r4, #12]
	mov	r9, r0
	ldr	r10, [r5, #92]
	cmp	r6, fp
	beq	.L16093
.L16094:
	sub	r1, r6, #36
	mov	r0, r6
	str	r1, [sp, #12]
	bl	list_del
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r10, #8]
	mov	r0, r10
	ldr	r1, [sp, #12]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [r4, #12]
	cmp	fp, r6
	bne	.L16094
	ldr	r10, [r5, #92]
.L16093:
	ldr	r6, [r4, #20]
	add	fp, r4, #20
	cmp	fp, r6
	beq	.L16098
.L16095:
	sub	r1, r6, #36
	mov	r0, r6
	str	r1, [sp, #12]
	bl	list_del
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r10, #8]
	mov	r0, r10
	ldr	r1, [sp, #12]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [r4, #20]
	cmp	fp, r6
	bne	.L16095
.L16098:
	ldr	r6, [r4, #44]
	add	r10, r4, #44
	ldr	r5, [r5, #88]
	cmp	r6, r10
	beq	.L16097
.L16096:
	mov	r0, r6
	sub	fp, r6, #36
	bl	list_del
	ldr	r0, [r6, #-36]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r1, fp
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r6, [r4, #44]
	cmp	r10, r6
	bne	.L16096
.L16097:
	mov	r5, #0
	mov	r1, r9
	mov	r0, r8
	str	r5, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	ldr	r1, [r4, #72]
	mov	r0, r5
	add	r1, r1, #8
	bl	_test_and_clear_bit
	cmp	r0, r5
	bne	.L16114
.L16100:
	ldr	r3, [r4, #72]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L16089
	ldr	r0, [r7, #3328]
	add	r1, r4, #124
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work
.L16089:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16114:
	ldr	r3, [r4, #72]
	mov	r1, r5
	mvn	r2, #0
	str	r5, [r4, #156]
	ldr	r0, [r3]
	bl	smd_tiocmset
	b	.L16100
.L16111:
	movw	r1, #:lower16:.LC1246
	sub	r0, r3, #24
	ldr	r2, .L16115+4
	movt	r1, #:upper16:.LC1246
	mov	r3, r5
	str	r4, [sp]
	bl	__dynamic_pr_debug
	b	.L16090
.L16112:
	ldr	r1, .L16115+4
	movw	r0, #:lower16:.LC176
	mov	r2, r4
	movt	r0, #:upper16:.LC176
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L16113:
	ldr	r1, .L16115+4
	movw	r0, #:lower16:.LC177
	movt	r0, #:upper16:.LC177
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L16116:
	.align	2
.L16115:
	.word	.LANCHOR8-2400
	.word	.LANCHOR5+728
	.fnend
	.size	gsmd_disconnect, .-gsmd_disconnect
	.align	2
	.global	gsmd_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_setup, %function
gsmd_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16144
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r3, #-14]
	.pad #28
	sub	sp, sp, #28
	str	r1, [sp, #8]
	tst	r3, #4
	bne	.L16138
	ldr	r3, [sp, #8]
	sub	r3, r3, #1
	cmp	r3, #1
	bhi	.L16139
.L16119:
	mov	r8, #0
	movw	r0, #:lower16:.LC1250
	mov	r3, r8
	movt	r0, #:upper16:.LC1250
	mov	r2, #1
	mov	r1, #10
	str	r8, [sp]
	bl	__alloc_workqueue_key
	movw	r10, #:lower16:.LANCHOR1
	cmp	r0, r8
	movt	r10, #:upper16:.LANCHOR1
	str	r0, [r10, #3328]
	beq	.L16140
	movw	r3, #:lower16:.LC1252
	movw	r2, #:lower16:gsmd_rx_push
	ldr	r9, .L16144+4
	add	r5, r10, #216
	movt	r3, #:upper16:.LC1252
	movt	r2, #:upper16:gsmd_rx_push
	movw	fp, #:lower16:kmalloc_caches
	movt	fp, #:upper16:kmalloc_caches
	str	r3, [sp, #12]
	str	r2, [sp, #16]
	str	r5, [sp, #20]
	b	.L16125
.L16124:
	ldr	r3, [sp, #8]
	add	r8, r8, #1
	cmp	r3, r8
	beq	.L16141
.L16125:
	ldr	r2, .L16144+8
	mov	r0, r5
	mov	r6, #0
	ldr	r1, [sp, #12]
	mov	r7, #2560
	mov	r4, #16
	bl	__mutex_init
	ldr	ip, [fp, #8]
	mov	r2, #172
	movw	r1, #32976
	ldr	r3, [r10, #212]
	cmp	ip, r6
	mov	r0, ip
	add	r3, r3, #1
	str	r3, [r10, #212]
	beq	.L16122
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L16142
.L16122:
	ldr	ip, [sp, #16]
	add	r2, r4, #12
	add	r0, r4, #20
	movw	r1, #:lower16:gsmd_tx_pull
	movw	r3, #:lower16:gsmd_connect_work
	str	r8, [r4]
	add	lr, r4, #32
	movt	r3, #:upper16:gsmd_connect_work
	str	r6, [r4, #4]
	movt	r1, #:upper16:gsmd_tx_pull
	str	r2, [r4, #12]
	str	r2, [r4, #16]
	add	r2, r4, #56
	str	r0, [r4, #20]
	str	r0, [r4, #24]
	add	r0, r4, #80
	str	r7, [r4, #28]
	str	ip, [r4, #40]
	add	ip, r4, #44
	str	lr, [r4, #32]
	str	lr, [r4, #36]
	str	ip, [r4, #44]
	str	ip, [r4, #48]
	str	r7, [r4, #52]
	str	r2, [r4, #56]
	str	r2, [r4, #60]
	mov	r2, r6
	str	r1, [r4, #64]
	mov	r1, r6
	str	r9, [r4, #72]
	add	r9, r9, #12
	str	r7, [r4, #76]
	str	r0, [r4, #80]
	str	r0, [r4, #84]
	add	r0, r4, #92
	str	r3, [r4, #88]
	bl	init_timer_key
	movw	r1, #:lower16:delayed_work_timer_fn
	movw	r0, #:lower16:gsmd_disconnect_work
	str	r7, [r4, #124]
	movt	r1, #:upper16:delayed_work_timer_fn
	movw	r2, #:lower16:gsmd_ch_probe
	movw	r3, #:lower16:gsmd_ch_remove
	movt	r0, #:upper16:gsmd_disconnect_work
	movt	r2, #:upper16:gsmd_ch_probe
	movt	r3, #:upper16:gsmd_ch_remove
	str	r1, [r4, #108]
	add	ip, r4, #76
	add	r1, r4, #128
	str	ip, [r4, #112]
	str	r1, [r4, #128]
	str	r1, [r4, #132]
	str	r0, [r4, #136]
	add	r0, r5, #24
	add	r5, r5, #104
	str	r4, [r5, #-84]
	strd	r2, [r5, #-80]
	ldr	r3, [r4, #72]
	ldr	r3, [r3, #4]
	str	r3, [r5, #-60]
	str	r6, [r5, #-52]
	bl	platform_driver_register
	ldr	r3, .L16144+12
	ldrh	r3, [r3]
	tst	r3, #4
	beq	.L16124
	ldr	r0, .L16144
	movw	r1, #:lower16:.LC1254
	mov	r3, r4
	ldr	r2, .L16144+16
	movt	r1, #:upper16:.LC1254
	str	r8, [sp]
	add	r8, r8, #1
	sub	r0, r0, #8
	bl	__dynamic_pr_debug
	ldr	r3, [sp, #8]
	cmp	r3, r8
	bne	.L16125
.L16141:
	movw	r0, #:lower16:.LC1255
	mov	r1, #0
	movt	r0, #:upper16:.LC1255
	bl	debugfs_create_dir
	cmn	r0, #4096
	mov	r2, r0
	movhi	r0, #0
	bhi	.L16117
	ldr	ip, .L16144+20
	movw	r0, #:lower16:.LC273
	mov	r3, #0
	movt	r0, #:upper16:.LC273
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	mov	r0, #0
.L16117:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16138:
	mov	r3, r0
	ldr	r0, .L16144
	mov	ip, r1
	movw	r1, #:lower16:.LC1248
	ldr	r2, .L16144+24
	movt	r1, #:upper16:.LC1248
	str	ip, [sp]
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	ldr	r3, [sp, #8]
	sub	r3, r3, #1
	cmp	r3, #1
	bls	.L16119
.L16139:
	movw	r0, #:lower16:.LC1249
	mov	r3, r4
	ldr	r1, .L16144+24
	movt	r0, #:upper16:.LC1249
	ldr	r2, [sp, #8]
	bl	printk
	mvn	r0, #21
	b	.L16117
.L16142:
	ldr	r3, [r10, #212]
	movw	r0, #:lower16:.LC1253
	mov	r2, r8
	movt	r0, #:upper16:.LC1253
	ldr	r1, .L16144+24
	sub	r3, r3, #1
	str	r3, [r10, #212]
	bl	printk
	ldr	r5, [sp, #20]
.L16123:
	ldr	r3, [r10, #212]
	cmp	r3, r4
	bls	.L16143
	ldr	r0, [r5, #20]
	cmp	r0, #0
	bne	.L16126
	bl	kfree
.L16126:
	add	r4, r4, #1
	add	r5, r5, #104
	b	.L16123
.L16140:
	movw	r0, #:lower16:.LC1251
	ldr	r1, .L16144+24
	movt	r0, #:upper16:.LC1251
	bl	printk
	mvn	r0, #11
	b	.L16117
.L16143:
	ldr	r0, [r10, #3328]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L16117
.L16145:
	.align	2
.L16144:
	.word	.LANCHOR8-2368
	.word	.LANCHOR6-1588
	.word	.LANCHOR1+4044
	.word	.LANCHOR8-2358
	.word	.LANCHOR5+756
	.word	.LANCHOR5+772
	.word	.LANCHOR5+744
	.fnend
	.size	gsmd_setup, .-gsmd_setup
	.align	2
	.global	gsmd_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_cleanup, %function
gsmd_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	gsmd_cleanup, .-gsmd_cleanup
	.align	2
	.global	gbam_data_recv_cb
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_recv_cb, %function
gbam_data_recv_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	subs	r5, r1, #0
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	.pad #20
	sub	sp, sp, #20
	beq	.L16147
	mov	r4, r0
	ldr	r0, .L16162
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L16160
.L16149:
	add	r6, r4, #8
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #12]
	mov	r7, r0
	cmp	r3, #0
	beq	.L16152
	movw	r3, #:lower16:.LANCHOR6
	ldr	r2, [r4, #44]
	movt	r3, #:upper16:.LANCHOR6
	ldr	r3, [r3, #-1564]
	cmp	r2, r3
	bhi	.L16161
	ldr	r3, [r4, #40]
	add	r2, r4, #36
	mov	r1, r0
	mov	r0, r6
	strd	r2, [r5]
	str	r5, [r3]
	ldr	r3, [r4, #44]
	str	r5, [r4, #40]
	add	r3, r3, #1
	str	r3, [r4, #44]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	gbam_write_data_tohost
.L16161:
	ldr	r3, [r4, #244]
	ldr	r0, .L16162+4
	add	r3, r3, #1
	str	r3, [r4, #244]
	bl	__printk_ratelimit
	cmp	r0, #0
	beq	.L16152
	movw	r0, #:lower16:.LC1257
	ldr	r1, .L16162+4
	movt	r0, #:upper16:.LC1257
	ldr	r2, [r4, #244]
	bl	printk
.L16152:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	dev_kfree_skb_any
.L16147:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L16160:
	ldr	r2, [r4]
	add	r3, r4, #20
	movw	r1, #:lower16:.LC1256
	ldr	ip, [r5, #80]
	movt	r1, #:upper16:.LC1256
	sub	r0, r0, #32
	strd	r2, [sp]
	mov	r3, r4
	ldr	r2, .L16162+4
	str	ip, [sp, #8]
	bl	__dynamic_pr_debug
	b	.L16149
.L16163:
	.align	2
.L16162:
	.word	.LANCHOR8-2320
	.word	.LANCHOR5+880
	.fnend
	.size	gbam_data_recv_cb, .-gbam_data_recv_cb
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_notify, %function
gbam_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	beq	.L16165
	cmp	r1, #1
	bxne	lr
	cmp	r2, #0
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r0, r2
	add	r5, r4, #4
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #16
	sub	sp, sp, #16
	bl	dev_kfree_skb_any
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	ldr	r0, .L16180
	ldr	r3, [r4, #240]
	ldrh	r2, [r0, #-6]
	sub	r3, r3, #1
	str	r3, [r4, #240]
	tst	r2, #4
	bne	.L16179
.L16168:
	mov	r1, r6
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r4, #80
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3652]
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work
.L16165:
	mov	r1, r2
	b	gbam_data_recv_cb
.L16179:
	ldr	lr, [r4]
	add	r2, r4, #20
	movw	r1, #:lower16:.LC1258
	ldr	ip, [r4, #260]
	movt	r1, #:upper16:.LC1258
	sub	r0, r0, #24
	stm	sp, {r2, ip}
	ldr	r2, .L16180+4
	str	r3, [sp, #8]
	mov	r3, r4
	str	lr, [sp, #12]
	bl	__dynamic_pr_debug
	b	.L16168
.L16181:
	.align	2
.L16180:
	.word	.LANCHOR8-2304
	.word	.LANCHOR5+900
	.fnend
	.size	gbam_notify, .-gbam_notify
	.align	2
	.global	gbam_data_write_done
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_data_write_done, %function
gbam_data_write_done:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r0, r1
	add	r5, r4, #4
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #16
	sub	sp, sp, #16
	bl	dev_kfree_skb_any
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	ldr	r0, .L16192
	ldr	r3, [r4, #240]
	ldrh	r2, [r0, #-6]
	sub	r3, r3, #1
	str	r3, [r4, #240]
	tst	r2, #4
	bne	.L16191
.L16184:
	mov	r1, r6
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR1
	add	r1, r4, #80
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3652]
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work
.L16191:
	ldr	lr, [r4]
	add	r2, r4, #20
	movw	r1, #:lower16:.LC1258
	ldr	ip, [r4, #260]
	movt	r1, #:upper16:.LC1258
	sub	r0, r0, #24
	stm	sp, {r2, ip}
	ldr	r2, .L16192+4
	str	r3, [sp, #8]
	mov	r3, r4
	str	lr, [sp, #12]
	bl	__dynamic_pr_debug
	b	.L16184
.L16193:
	.align	2
.L16192:
	.word	.LANCHOR8-2304
	.word	.LANCHOR5+900
	.fnend
	.size	gbam_data_write_done, .-gbam_data_write_done
	.align	2
	.global	gbam_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_disconnect, %function
gbam_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16235
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r9, r2
	strd	r10, [sp, #24]
	mov	r10, r1
	str	lr, [sp, #32]
	ldrh	r2, [r3, #-14]
	.pad #20
	sub	sp, sp, #20
	tst	r2, #4
	bne	.L16229
.L16195:
	cmp	r9, #5
	beq	.L16230
	sub	r3, r9, #6
	cmp	r3, #1
	bhi	.L16198
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r3, [r5, #4044]
	cmp	r10, r3
	bge	.L16231
	cmp	r4, #0
	beq	.L16204
.L16205:
	add	r3, r5, r10, lsl #2
	ldr	r6, [r3, #3860]
	str	r4, [r6, #16]
.L16207:
	add	r8, r6, #4
	mov	r7, #0
	mov	r0, r8
	add	fp, r6, #8
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, fp
	str	r1, [sp, #12]
	bl	_raw_spin_lock
	mov	r0, fp
	str	r7, [r6, #12]
	str	r7, [r5, #3648]
	bl	_raw_spin_unlock
	mov	r0, r8
	ldr	r1, [sp, #12]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #84]
	bic	r2, r9, #2
	cmp	r2, #5
	str	r7, [r3]
	ldr	r3, [r4, #88]
	str	r7, [r3]
	beq	.L16232
	cmp	r9, #6
	cmpeq	r10, #0
	beq	.L16233
.L16194:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16198:
	cmp	r4, #0
	movwne	r5, #:lower16:.LANCHOR1
	movtne	r5, #:upper16:.LANCHOR1
	bne	.L16205
.L16204:
	ldr	r1, .L16235+4
	movw	r0, #:lower16:.LC1261
	movt	r0, #:upper16:.LC1261
.L16228:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L16230:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r3, [r5, #424]
	cmp	r10, r3
	bge	.L16234
	cmp	r4, #0
	beq	.L16204
	mov	r3, #84
	mla	r3, r3, r10, r5
	ldr	r6, [r3, #428]
	mov	r0, r6
	str	r4, [r6, #16]
	bl	gbam_free_buffers
	b	.L16207
.L16232:
	ldr	r0, [r5, #3652]
	add	r1, r6, #300
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work
.L16229:
	movw	r1, #:lower16:.LC1259
	sub	r0, r3, #32
	ldr	r2, .L16235+4
	movt	r1, #:upper16:.LC1259
	mov	r3, r4
	str	r10, [sp]
	bl	__dynamic_pr_debug
	b	.L16195
.L16233:
	mov	r0, r7
	bl	usb_bam_client_ready
	cmp	r0, #0
	beq	.L16194
	movw	r0, #:lower16:.LC1262
	ldr	r1, .L16235+4
	movt	r0, #:upper16:.LC1262
	b	.L16228
.L16231:
	ldr	r1, .L16235+4
	movw	r0, #:lower16:.LC654
	mov	r2, r10
	movt	r0, #:upper16:.LC654
.L16227:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk
.L16234:
	movw	r0, #:lower16:.LC1260
	mov	r2, r10
	ldr	r1, .L16235+4
	movt	r0, #:upper16:.LC1260
	b	.L16227
.L16236:
	.align	2
.L16235:
	.word	.LANCHOR8-2272
	.word	.LANCHOR5+924
	.fnend
	.size	gbam_disconnect, .-gbam_disconnect
	.align	2
	.global	gbam_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_connect, %function
gbam_connect:
	.fnstart
	@ args = 4, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	ip, .L16275
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r7, r1
	mov	r6, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	str	r3, [sp, #8]
	ldrb	r3, [sp, #56]	@ zero_extendqisi2
	str	r3, [sp, #12]
	ldrh	r3, [ip, #-6]
	tst	r3, #4
	bne	.L16270
.L16238:
	cmp	r6, #5
	beq	.L16271
	sub	r3, r6, #6
	cmp	r3, #1
	bhi	.L16242
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r3, [r5, #4044]
	cmp	r7, r3
	bge	.L16269
	cmp	r4, #0
	beq	.L16249
.L16250:
	add	r7, r5, r7, lsl #2
	ldr	fp, [r7, #3860]
.L16252:
	ldr	r3, [r4, #84]
	ldr	ip, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [ip]
	blx	r3
	subs	r10, r0, #0
	bne	.L16272
	ldr	r3, [r4, #84]
	str	fp, [r3]
	ldr	r3, [r4, #88]
	ldr	ip, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [ip]
	blx	r3
	subs	r10, r0, #0
	bne	.L16273
	ldr	r1, [r4, #88]
	add	r7, fp, #4
	add	r8, fp, #8
	mov	r0, r7
	str	fp, [r1]
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r0, r8
	bl	_raw_spin_lock
	cmp	r6, #5
	mov	r0, r8
	str	r4, [fp, #12]
	beq	.L16274
	bl	_raw_spin_unlock
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	cmp	r6, #6
	bne	.L16248
	ldr	r3, [sp, #8]
	str	r4, [fp, #16]
	strb	r3, [fp, #128]
	ldr	r3, [sp, #12]
	strb	r3, [fp, #129]
.L16247:
	add	r1, fp, #284
	str	r6, [fp, #132]
	ldr	r0, [r5, #3652]
	bl	queue_work
.L16237:
	mov	r0, r10
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16242:
	cmp	r4, #0
	movwne	r5, #:lower16:.LANCHOR1
	movtne	r5, #:upper16:.LANCHOR1
	bne	.L16250
.L16249:
	movw	r0, #:lower16:.LC1261
	ldr	r1, .L16275+4
	mvn	r10, #18
	movt	r0, #:upper16:.LC1261
	bl	printk
	b	.L16237
.L16271:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r3, [r5, #424]
	cmp	r7, r3
	bge	.L16269
	cmp	r4, #0
	beq	.L16249
	mov	r3, #84
	mla	r7, r3, r7, r5
	ldr	fp, [r7, #428]
	b	.L16252
.L16274:
	str	r10, [fp, #240]
	str	r10, [fp, #244]
	str	r10, [fp, #248]
	str	r10, [fp, #260]
	str	r10, [fp, #264]
	str	r10, [fp, #268]
	str	r10, [fp, #272]
	str	r10, [fp, #276]
	str	r10, [fp, #280]
	bl	_raw_spin_unlock
	mov	r1, r9
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore
	b	.L16247
.L16248:
	cmp	r6, #7
	bne	.L16247
	ldr	r3, [sp, #8]
	add	r0, fp, #120
	add	r1, fp, #124
	str	r4, [fp, #16]
	strb	r3, [fp, #136]
	ldr	r3, [sp, #12]
	strd	r0, [fp, #140]
	strb	r3, [fp, #137]
	b	.L16247
.L16270:
	movw	r1, #:lower16:.LC1259
	sub	r0, ip, #24
	ldr	r2, .L16275+4
	movt	r1, #:upper16:.LC1259
	mov	r3, r4
	str	r7, [sp]
	bl	__dynamic_pr_debug
	b	.L16238
.L16273:
	movw	r0, #:lower16:.LC389
	ldr	r1, .L16275+4
	movt	r0, #:upper16:.LC389
	ldr	r2, [r4, #88]
	bl	printk
	ldr	r2, [r4, #84]
	mov	r1, #0
	str	r1, [r2]
	b	.L16237
.L16269:
	movw	r0, #:lower16:.LC176
	mov	r2, r7
	ldr	r1, .L16275+4
	movt	r0, #:upper16:.LC176
	mvn	r10, #18
	bl	printk
	b	.L16237
.L16272:
	movw	r0, #:lower16:.LC388
	ldr	r1, .L16275+4
	movt	r0, #:upper16:.LC388
	ldr	r2, [r4, #84]
	bl	printk
	b	.L16237
.L16276:
	.align	2
.L16275:
	.word	.LANCHOR8-2256
	.word	.LANCHOR5+940
	.fnend
	.size	gbam_connect, .-gbam_connect
	.align	2
	.global	gbam_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_setup, %function
gbam_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16330
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrh	r3, [r3, #-14]
	.pad #20
	sub	sp, sp, #20
	str	r1, [sp, #8]
	tst	r3, #4
	bne	.L16324
	ldr	r3, [sp, #8]
	orrs	r2, r4, r3
	beq	.L16279
.L16328:
	cmp	r3, #3
	cmpls	r4, #1
	movhi	r2, #1
	movls	r2, #0
	bhi	.L16279
	movw	r0, #:lower16:.LC1265
	mov	r3, r2
	str	r2, [sp]
	movt	r0, #:upper16:.LC1265
	mov	r1, #10
	mov	r2, #1
	movw	fp, #:lower16:.LANCHOR1
	bl	__alloc_workqueue_key
	movt	fp, #:upper16:.LANCHOR1
	cmp	r0, #0
	str	r0, [fp, #3652]
	beq	.L16282
	cmp	r4, #0
	beq	.L16284
	movw	r4, #:lower16:kmalloc_caches
	ldr	r3, [fp, #424]
	movt	r4, #:upper16:kmalloc_caches
	ldr	r0, [r4, #36]
	add	r3, r3, #1
	cmp	r0, #0
	str	r3, [fp, #424]
	beq	.L16299
	mov	r2, #348
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L16325
.L16285:
	movw	r8, #:lower16:gbam_data_write_tobam
	movw	r7, #:lower16:gbam_write_data_tohost_w
	ldr	r0, .L16330+4
	movt	r8, #:upper16:gbam_data_write_tobam
	movt	r7, #:upper16:gbam_write_data_tohost_w
	str	r4, [r4, #76]
	movw	r6, #:lower16:gbam_connect_work
	movw	lr, #:lower16:gbam_disconnect_work
	str	r8, [r4, #92]
	add	r8, r4, #28
	movw	ip, #:lower16:gbam_data_ch_probe
	movw	r1, #:lower16:gbam_data_ch_remove
	movw	r2, #:lower16:.LC364
	str	r8, [r4, #28]
	mov	r5, #0
	mov	r3, #2560
	str	r7, [r4, #108]
	add	r7, r4, #84
	movt	lr, #:upper16:gbam_disconnect_work
	str	r8, [r4, #32]
	add	r8, r4, #52
	movt	ip, #:upper16:gbam_data_ch_probe
	movt	r1, #:upper16:gbam_data_ch_remove
	movt	r2, #:upper16:.LC364
	str	r5, [r4]
	str	r7, [r4, #84]
	add	r10, r4, #288
	add	r9, r4, #304
	str	r8, [r4, #52]
	movt	r6, #:upper16:gbam_connect_work
	str	r8, [r4, #56]
	add	r8, r4, #100
	str	r7, [r4, #88]
	add	r7, r4, #36
	str	r5, [r4, #4]
	str	r8, [r4, #100]
	str	r7, [r4, #36]
	str	r7, [r4, #40]
	add	r7, r4, #60
	str	r8, [r4, #104]
	mov	r8, #8
	str	r5, [r4, #8]
	str	r5, [r4, #44]
	str	r5, [r4, #48]
	str	r7, [r4, #60]
	str	r7, [r4, #64]
	str	r5, [r4, #68]
	str	r5, [r4, #72]
	str	r3, [r4, #80]
	str	r3, [r4, #96]
	str	r3, [r4, #284]
	str	r10, [r4, #288]
	str	r10, [r4, #292]
	str	r6, [r4, #296]
	str	r3, [r4, #300]
	str	r9, [r4, #304]
	str	r9, [r4, #308]
	str	lr, [r4, #312]
	str	r8, [r4, #24]
	str	r4, [fp, #428]
	str	ip, [fp, #432]
	str	r1, [fp, #436]
	str	r2, [fp, #452]
	str	r5, [fp, #460]
	bl	platform_driver_register
	ldr	r3, .L16330+8
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L16326
.L16284:
	ldr	r3, [sp, #8]
	cmp	r3, #0
	beq	.L16288
	movw	r6, #:lower16:gbam2bam_suspend_work
	movw	r4, #:lower16:kmalloc_caches
	ldr	r9, .L16330+12
	movt	r6, #:upper16:gbam2bam_suspend_work
	movw	r8, #:lower16:gbam2bam_connect_work
	movw	r7, #:lower16:gbam2bam_disconnect_work
	movt	r4, #:upper16:kmalloc_caches
	movt	r8, #:upper16:gbam2bam_connect_work
	movt	r7, #:upper16:gbam2bam_disconnect_work
	str	r6, [sp, #12]
	mov	r5, #0
	b	.L16293
.L16291:
	ldr	r3, [sp, #8]
	add	r5, r5, #1
	cmp	r3, r5
	beq	.L16288
.L16293:
	ldr	lr, [r4, #36]
	mov	r2, #348
	movw	r1, #32976
	ldr	ip, [fp, #4044]
	mov	r3, #16
	subs	r0, lr, #0
	add	ip, ip, #1
	str	ip, [fp, #4044]
	beq	.L16289
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L16290
.L16289:
	ldr	r6, .L16330+16
	mov	r0, #0
	str	r5, [r3]
	add	lr, r3, #288
	movw	r1, #:lower16:gbam2bam_resume_work
	str	r0, [r3, #4]
	mov	r2, #2560
	add	ip, r3, #304
	str	r0, [r3, #8]
	add	r0, r3, #320
	movt	r1, #:upper16:gbam2bam_resume_work
	ldrh	r10, [r6]
	str	r3, [r3, #76]
	str	lr, [r3, #288]
	str	r0, [r3, #320]
	str	r0, [r3, #324]
	ldr	r0, [sp, #12]
	tst	r10, #4
	str	lr, [r3, #292]
	add	lr, r3, #336
	str	r2, [r3, #284]
	str	r8, [r3, #296]
	str	r2, [r3, #300]
	str	ip, [r3, #304]
	str	ip, [r3, #308]
	str	r7, [r3, #312]
	str	r2, [r3, #316]
	str	r0, [r3, #328]
	str	r2, [r3, #332]
	str	lr, [r3, #336]
	str	lr, [r3, #340]
	str	r1, [r3, #344]
	str	r3, [r9], #4
	beq	.L16291
	movw	r1, #:lower16:.LC1254
	ldr	r2, .L16330+20
	sub	r0, r6, #18
	movt	r1, #:upper16:.LC1254
	str	r5, [sp]
	add	r5, r5, #1
	bl	__dynamic_pr_debug
	ldr	r3, [sp, #8]
	cmp	r3, r5
	bne	.L16293
.L16288:
	movw	r0, #:lower16:.LC1267
	mov	r1, #0
	movt	r0, #:upper16:.LC1267
	bl	debugfs_create_dir
	cmp	r0, #0
	mov	r2, r0
	str	r0, [fp, #3552]
	beq	.L16295
	cmn	r0, #4096
	bls	.L16327
.L16295:
	mov	r0, #0
.L16277:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16299:
	mov	r4, #16
	b	.L16285
.L16326:
	ldr	r0, .L16330
	movw	r1, #:lower16:.LC1254
	mov	r3, r4
	ldr	r2, .L16330+24
	movt	r1, #:upper16:.LC1254
	str	r5, [sp]
	sub	r0, r0, #8
	bl	__dynamic_pr_debug
	b	.L16284
.L16327:
	ldr	ip, .L16330+28
	movw	r0, #:lower16:.LC273
	mov	r3, #0
	movt	r0, #:upper16:.LC273
	mov	r1, #292
	str	ip, [sp]
	bl	debugfs_create_file
	cmp	r0, #0
	beq	.L16296
	cmn	r0, #4096
	bls	.L16295
.L16296:
	ldr	r0, [fp, #3552]
	bl	debugfs_remove
	mov	r3, #0
	mov	r0, r3
	str	r3, [fp, #3552]
	b	.L16277
.L16324:
	mov	r3, r0
	ldr	r0, .L16330
	mov	ip, r1
	movw	r1, #:lower16:.LC1263
	ldr	r2, .L16330+32
	movt	r1, #:upper16:.LC1263
	str	ip, [sp]
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	ldr	r3, [sp, #8]
	orrs	r2, r4, r3
	bne	.L16328
.L16279:
	movw	r0, #:lower16:.LC1264
	ldr	r1, .L16330+32
	mov	r2, r4
	movt	r0, #:upper16:.LC1264
	ldr	r3, [sp, #8]
	bl	printk
	mvn	r0, #21
	b	.L16277
.L16290:
	ldr	r3, [fp, #4044]
	movw	r0, #:lower16:.LC1253
	mov	r2, r5
	movt	r0, #:upper16:.LC1253
	ldr	r1, .L16330+32
	sub	r3, r3, #1
	str	r3, [fp, #4044]
	bl	printk
.L16292:
	ldr	r3, [fp, #424]
	cmp	r3, #0
	ble	.L16286
	ldr	r0, [fp, #428]
	cmp	r0, #0
	beq	.L16286
	bl	kfree
	ldr	r0, .L16330+4
	bl	platform_driver_unregister
.L16286:
	ldr	r5, .L16330+12
	mov	r4, #0
.L16297:
	ldr	r3, [fp, #4044]
	cmp	r3, r4
	ble	.L16329
	ldr	r0, [r5], #4
	add	r4, r4, #1
	bl	kfree
	b	.L16297
.L16325:
	ldr	r3, [fp, #424]
	movw	r0, #:lower16:.LC1253
	mov	r2, r4
	ldr	r1, .L16330+32
	movt	r0, #:upper16:.LC1253
	sub	r3, r3, #1
	str	r3, [fp, #424]
	bl	printk
	b	.L16292
.L16282:
	movw	r0, #:lower16:.LC1266
	ldr	r1, .L16330+32
	movt	r0, #:upper16:.LC1266
	bl	printk
	mvn	r0, #11
	b	.L16277
.L16329:
	ldr	r0, [fp, #3652]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L16277
.L16331:
	.align	2
.L16330:
	.word	.LANCHOR8-2224
	.word	.LANCHOR1+432
	.word	.LANCHOR8-2208
	.word	.LANCHOR1+3860
	.word	.LANCHOR8-2190
	.word	.LANCHOR5+984
	.word	.LANCHOR5+968
	.word	.LANCHOR5+1004
	.word	.LANCHOR5+956
	.fnend
	.size	gbam_setup, .-gbam_setup
	.align	2
	.global	gbam_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_cleanup, %function
gbam_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3552]
	b	debugfs_remove_recursive
	.fnend
	.size	gbam_cleanup, .-gbam_cleanup
	.align	2
	.global	gbam_suspend
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_suspend, %function
gbam_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r2, r2, #6
	cmp	r2, #1
	bxhi	lr
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #1746
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r0, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	movw	r4, #:lower16:.LANCHOR1
	str	lr, [sp, #12]
	ldrh	r3, [r0, r3]
	movt	r4, #:upper16:.LANCHOR1
	add	r2, r4, r1, lsl #2
	ldr	r5, [r2, #3860]
	tst	r3, #4
	bne	.L16342
.L16335:
	add	r1, r5, #316
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	ldr	r0, [r4, #3652]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	queue_work
.L16342:
	mov	r3, r1
	movw	r1, #:lower16:.LC883
	ldr	r2, .L16343
	movt	r1, #:upper16:.LC883
	add	r0, r0, #1728
	bl	__dynamic_pr_debug
	b	.L16335
.L16344:
	.align	2
.L16343:
	.word	.LANCHOR5-1028
	.fnend
	.size	gbam_suspend, .-gbam_suspend
	.align	2
	.global	gbam_resume
	.syntax unified
	.arm
	.fpu softvfp
	.type	gbam_resume, %function
gbam_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r2, r2, #6
	cmp	r2, #1
	bxhi	lr
	ldr	r0, .L16355
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	str	r6, [sp, #8]
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #12]
	add	r2, r4, r1, lsl #2
	ldrh	r3, [r0, #-6]
	ldr	r5, [r2, #3860]
	tst	r3, #4
	bne	.L16354
.L16347:
	add	r1, r5, #332
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	ldr	r0, [r4, #3652]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	queue_work
.L16354:
	mov	r3, r1
	movw	r1, #:lower16:.LC636
	ldr	r2, .L16355+4
	movt	r1, #:upper16:.LC636
	sub	r0, r0, #24
	bl	__dynamic_pr_debug
	b	.L16347
.L16356:
	.align	2
.L16355:
	.word	.LANCHOR4-1824
	.word	.LANCHOR5-3296
	.fnend
	.size	gbam_resume, .-gbam_resume
	.align	2
	.global	gsmd_ctrl_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_connect, %function
gsmd_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16373
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L16371
.L16358:
	uxtb	r3, r4
	cmp	r3, #5
	bhi	.L16359
	movw	r5, #:lower16:.LANCHOR1
	mov	r2, #84
	movt	r5, #:upper16:.LANCHOR1
	mla	r3, r2, r3, r5
	ldr	r3, [r3, #512]
	cmp	r3, #0
	beq	.L16359
	cmp	r6, #0
	beq	.L16372
	mla	r4, r2, r4, r5
	ldr	r4, [r4, #512]
	add	r7, r4, #108
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:grmnet_ctrl_smd_send_cpkt_tomodem
	movw	r3, #:lower16:gsmd_ctrl_send_cbits_tomodem
	str	r6, [r4, #104]
	movt	r2, #:upper16:grmnet_ctrl_smd_send_cpkt_tomodem
	movt	r3, #:upper16:gsmd_ctrl_send_cbits_tomodem
	mov	r1, r0
	mov	r0, r7
	strd	r2, [r6, #96]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r4, #112
	mov	r2, #0
	ldr	r0, [r5, #3604]
	bl	queue_delayed_work
	mov	r0, #0
.L16357:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L16371:
	movw	r1, #:lower16:.LC1259
	sub	r0, r3, #24
	ldr	r2, .L16373+4
	movt	r1, #:upper16:.LC1259
	mov	r3, r6
	str	r4, [sp]
	bl	__dynamic_pr_debug
	b	.L16358
.L16359:
	movw	r0, #:lower16:.LC1268
	mov	r2, r4
	ldr	r1, .L16373+4
	movt	r0, #:upper16:.LC1268
	bl	printk
	mvn	r0, #18
	b	.L16357
.L16372:
	movw	r0, #:lower16:.LC1261
	ldr	r1, .L16373+4
	movt	r0, #:upper16:.LC1261
	bl	printk
	mvn	r0, #18
	b	.L16357
.L16374:
	.align	2
.L16373:
	.word	.LANCHOR8-2160
	.word	.LANCHOR5+1112
	.fnend
	.size	gsmd_ctrl_connect, .-gsmd_ctrl_connect
	.align	2
	.global	gsmd_ctrl_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_disconnect, %function
gsmd_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16398
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r3, #-14]
	.pad #8
	sub	sp, sp, #8
	tst	r2, #4
	bne	.L16394
	cmp	r4, #5
	bhi	.L16377
.L16397:
	movw	r8, #:lower16:.LANCHOR1
	mov	r3, #84
	movt	r8, #:upper16:.LANCHOR1
	mla	r3, r3, r4, r8
	ldr	r5, [r3, #512]
	cmp	r5, #0
	beq	.L16377
	cmp	r6, #0
	beq	.L16395
	add	r9, r5, #108
	add	r7, r5, #40
	mov	r0, r9
	bl	_raw_spin_lock_irqsave
	mov	r3, #0
	mov	r10, r0
	str	r3, [r5, #104]
	str	r3, [r6, #96]
	str	r3, [r6, #100]
	ldr	r4, [r5, #40]
	str	r3, [r5, #88]
	cmp	r7, r4
	beq	.L16383
.L16380:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
	ldr	r4, [r5, #40]
	cmp	r7, r4
	bne	.L16380
.L16383:
	mov	r1, r10
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore
	add	r1, r5, #8
	mov	r0, #0
	bl	_test_and_clear_bit
	cmp	r0, #0
	bne	.L16396
.L16382:
	ldr	r0, [r8, #3604]
	add	r1, r5, #160
	mov	r2, #0
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	queue_delayed_work
.L16396:
	ldr	r0, [r5]
	ldr	r1, [r5, #88]
	orr	r2, r1, #4
	mvn	r2, r2
	bl	smd_tiocmset
	b	.L16382
.L16394:
	movw	r1, #:lower16:.LC1259
	sub	r0, r3, #32
	ldr	r2, .L16398+4
	movt	r1, #:upper16:.LC1259
	mov	r3, r6
	str	r4, [sp]
	bl	__dynamic_pr_debug
	cmp	r4, #5
	bls	.L16397
.L16377:
	ldr	r1, .L16398+4
	movw	r0, #:lower16:.LC1268
	mov	r2, r4
	movt	r0, #:upper16:.LC1268
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L16395:
	ldr	r1, .L16398+4
	movw	r0, #:lower16:.LC1261
	movt	r0, #:upper16:.LC1261
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L16399:
	.align	2
.L16398:
	.word	.LANCHOR8-2128
	.word	.LANCHOR5+1132
	.fnend
	.size	gsmd_ctrl_disconnect, .-gsmd_ctrl_disconnect
	.align	2
	.global	gsmd_ctrl_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gsmd_ctrl_setup, %function
gsmd_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16435
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r5, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	str	r2, [sp, #24]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L16429
	cmp	r4, #1
	bhi	.L16430
.L16402:
	sub	r3, r5, #1
	cmp	r3, #2
	bhi	.L16431
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldrb	r2, [r3, #3616]	@ zero_extendqisi2
	str	r3, [sp, #28]
	cmp	r2, #0
	beq	.L16432
.L16405:
	add	r3, r4, r4, lsl #1
	ldr	r0, [sp, #28]
	add	r2, r2, #1
	add	r1, r3, r5
	mov	r7, r3
	cmp	r3, r1
	str	r1, [sp, #16]
	str	r3, [sp, #32]
	strb	r2, [r0, #3616]
	bcs	.L16413
	rsb	r4, r4, r4, lsl #6
	ldr	r1, .L16435+4
	movw	r3, #:lower16:grmnet_ctrl_smd_connect_w
	movt	r3, #:upper16:grmnet_ctrl_smd_connect_w
	lsl	r2, r4, #2
	movw	fp, #:lower16:kmalloc_caches
	movw	r9, #:lower16:delayed_work_timer_fn
	str	r3, [sp, #20]
	movt	fp, #:upper16:kmalloc_caches
	add	r5, r1, r2
	movt	r9, #:upper16:delayed_work_timer_fn
	mov	r10, #0
	str	r2, [sp, #36]
	b	.L16412
.L16411:
	ldr	r3, [sp, #16]
	add	r7, r7, #1
	add	r5, r5, #84
	cmp	r3, r7
	beq	.L16413
.L16412:
	ldr	ip, [fp, #32]
	mov	r6, #0
	mov	r8, #2560
	mov	r2, #208
	movw	r1, #32976
	mov	r4, #16
	add	r3, r10, #1
	cmp	ip, r6
	mov	r0, ip
	beq	.L16409
	str	r3, [sp, #12]
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	ldr	r3, [sp, #12]
	beq	.L16433
.L16409:
	mov	r10, r3
	ldr	r3, [sp, #20]
	add	ip, r4, #116
	mov	r2, r6
	mov	r1, r6
	str	r7, [r4, #100]
	add	r0, r4, #128
	str	r6, [r4, #108]
	str	r8, [r4, #112]
	str	ip, [r4, #116]
	str	ip, [r4, #120]
	str	r3, [r4, #124]
	bl	init_timer_key
	movw	r3, #:lower16:grmnet_ctrl_smd_disconnect_w
	add	r0, r4, #164
	str	r9, [r4, #144]
	movt	r3, #:upper16:grmnet_ctrl_smd_disconnect_w
	add	r2, r4, #112
	mov	r1, r6
	str	r2, [r4, #148]
	mov	r2, r6
	str	r8, [r4, #160]
	str	r0, [r4, #164]
	str	r0, [r4, #168]
	add	r0, r4, #176
	str	r3, [r4, #172]
	bl	init_timer_key
	movw	r3, #:lower16:.LANCHOR5
	add	r0, r4, #160
	ldr	r2, .L16435+8
	movt	r3, #:upper16:.LANCHOR5
	movw	r1, #:lower16:.LC1274
	str	r4, [r4, #84]
	add	r3, r3, r7, lsl #2
	movt	r1, #:upper16:.LC1274
	str	r9, [r4, #192]
	str	r0, [r4, #196]
	add	r0, r4, #12
	ldr	r3, [r3, #1172]
	str	r3, [r4, #4]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC1275
	ldr	r2, .L16435+8
	add	r0, r4, #24
	movt	r1, #:upper16:.LC1275
	bl	__init_waitqueue_head
	ldr	r0, .L16435+12
	add	r3, r4, #40
	movw	ip, #:lower16:grmnet_ctrl_smd_read_w
	movt	ip, #:upper16:grmnet_ctrl_smd_read_w
	movw	r1, #:lower16:grmnet_ctrl_smd_write_w
	movw	r2, #:lower16:grmnet_ctrl_smd_ch_probe
	str	r3, [r4, #40]
	add	lr, r4, #56
	str	r3, [r4, #44]
	movw	r3, #:lower16:grmnet_ctrl_smd_ch_remove
	movt	r1, #:upper16:grmnet_ctrl_smd_write_w
	movt	r3, #:upper16:grmnet_ctrl_smd_ch_remove
	movt	r2, #:upper16:grmnet_ctrl_smd_ch_probe
	str	r8, [r4, #52]
	str	lr, [r4, #56]
	str	ip, [r4, #64]
	add	ip, r4, #72
	str	r8, [r4, #68]
	ldrh	r8, [r0]
	str	lr, [r4, #60]
	str	ip, [r4, #72]
	str	ip, [r4, #76]
	str	r1, [r4, #80]
	tst	r8, #4
	str	r4, [r5]
	strd	r2, [r5, #4]
	ldr	r3, [r4, #4]
	str	r3, [r5, #24]
	str	r6, [r5, #32]
	beq	.L16411
	movw	r1, #:lower16:.LC1254
	mov	r3, r4
	ldr	r2, .L16435+16
	movt	r1, #:upper16:.LC1254
	sub	r0, r0, #18
	str	r7, [sp]
	bl	__dynamic_pr_debug
	b	.L16411
.L16413:
	ldr	r3, [sp, #24]
	cmp	r3, #0
	moveq	r0, r3
	beq	.L16400
	ldr	r2, [sp, #32]
	mov	r0, #0
	strb	r2, [r3]
.L16400:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16432:
	movw	r0, #:lower16:.LC1272
	mov	r3, r2
	str	r2, [sp]
	movt	r0, #:upper16:.LC1272
	mov	r1, #10
	mov	r2, #1
	bl	__alloc_workqueue_key
	ldr	r3, [sp, #28]
	cmp	r0, #0
	str	r0, [r3, #3604]
	beq	.L16406
	ldrb	r2, [r3, #3616]	@ zero_extendqisi2
	b	.L16405
.L16429:
	movw	r1, #:lower16:.LC1269
	sub	r0, r3, #24
	ldr	r2, .L16435+20
	movt	r1, #:upper16:.LC1269
	mov	r3, r5
	bl	__dynamic_pr_debug
	cmp	r4, #1
	bls	.L16402
.L16430:
	movw	r0, #:lower16:.LC1270
	mov	r2, r4
	ldr	r1, .L16435+20
	movt	r0, #:upper16:.LC1270
	bl	printk
	mvn	r0, #21
	b	.L16400
.L16433:
	movw	r0, #:lower16:.LC1253
	mov	r2, r7
	ldr	r1, .L16435+20
	movt	r0, #:upper16:.LC1253
	bl	printk
	ldr	r3, [sp, #36]
	add	r5, r3, #4
	ldr	r3, .L16435+4
	add	r5, r3, r5
.L16410:
	cmp	r4, r10
	beq	.L16434
	ldr	r0, [r5, #-4]
	cmp	r0, #0
	beq	.L16414
	bl	kfree
	mov	r0, r5
	bl	platform_driver_unregister
.L16414:
	add	r4, r4, #1
	add	r5, r5, #84
	b	.L16410
.L16434:
	ldr	r2, [sp, #28]
	ldrb	r3, [r2, #3616]	@ zero_extendqisi2
	sub	r3, r3, #1
	uxtb	r3, r3
	cmp	r3, #0
	strb	r3, [r2, #3616]
	bne	.L16417
	ldr	r0, [r2, #3604]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L16400
.L16417:
	mvn	r0, #11
	b	.L16400
.L16406:
	movw	r0, #:lower16:.LC1273
	ldr	r1, .L16435+20
	movt	r0, #:upper16:.LC1273
	bl	printk
	mvn	r0, #11
	b	.L16400
.L16431:
	movw	r0, #:lower16:.LC1271
	mov	r2, r5
	ldr	r1, .L16435+20
	movt	r0, #:upper16:.LC1271
	bl	printk
	mvn	r0, #21
	b	.L16400
.L16436:
	.align	2
.L16435:
	.word	.LANCHOR8-2112
	.word	.LANCHOR1+512
	.word	.LANCHOR1+4048
	.word	.LANCHOR8-2094
	.word	.LANCHOR5+1196
	.word	.LANCHOR5+1156
	.fnend
	.size	gsmd_ctrl_setup, .-gsmd_ctrl_setup
	.align	2
	.global	gqti_ctrl_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_connect, %function
gqti_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16450
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L16448
.L16438:
	cmp	r5, #0
	beq	.L16449
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r4, [r3, #3228]
	add	r6, r4, #52
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	movw	r2, #:lower16:grmnet_ctrl_qti_send_cpkt_tomodem
	movw	r3, #:lower16:gqti_ctrl_notify_modem
	str	r5, [r4]
	movt	r2, #:upper16:grmnet_ctrl_qti_send_cpkt_tomodem
	movt	r3, #:upper16:gqti_ctrl_notify_modem
	mov	r1, r0
	mov	r0, r6
	strd	r2, [r5, #96]
	bl	_raw_spin_unlock_irqrestore
	mov	r1, #1
	add	r0, r4, #32
	mov	r2, r1
	mov	r3, #0
	str	r1, [r4, #8]
	mov	r1, #3
	bl	__wake_up
	cmp	r4, #0
	beq	.L16443
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L16437
	ldr	r4, [r0, #108]
	cmp	r4, #0
	beq	.L16443
	blx	r4
	mov	r0, #0
.L16437:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L16443:
	mov	r0, r4
	b	.L16437
.L16448:
	movw	r1, #:lower16:.LC1276
	sub	r0, r3, #24
	ldr	r2, .L16450+4
	movt	r1, #:upper16:.LC1276
	mov	r3, r5
	bl	__dynamic_pr_debug
	b	.L16438
.L16449:
	movw	r0, #:lower16:.LC1261
	ldr	r1, .L16450+4
	movt	r0, #:upper16:.LC1261
	bl	printk
	mvn	r0, #18
	b	.L16437
.L16451:
	.align	2
.L16450:
	.word	.LANCHOR8-2064
	.word	.LANCHOR5+1224
	.fnend
	.size	gqti_ctrl_connect, .-gqti_ctrl_connect
	.align	2
	.global	gqti_ctrl_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gqti_ctrl_disconnect, %function
gqti_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L16474
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r5, [r3, #3228]
	ldrh	r3, [r2, #-14]
	tst	r3, #4
	bne	.L16472
.L16453:
	cmp	r6, #0
	beq	.L16473
	cmp	r5, #0
	beq	.L16455
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L16455
	ldr	r3, [r0, #104]
	cmp	r3, #0
	beq	.L16455
	blx	r3
.L16455:
	mov	r4, #0
	mov	r7, r5
	add	r8, r5, #52
	mov	r0, r8
	str	r4, [r5, #8]
	str	r4, [r5, #12]
	bl	_raw_spin_lock_irqsave
	str	r4, [r7], #44
	mov	r9, r0
	str	r4, [r6, #96]
	str	r4, [r6, #100]
	ldr	r4, [r5, #44]
	cmp	r7, r4
	beq	.L16456
.L16457:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del
	ldr	r0, [r4, #-8]
	bl	kfree
	mov	r0, r6
	bl	kfree
	ldr	r4, [r5, #44]
	cmp	r7, r4
	bne	.L16457
.L16456:
	mov	r0, r8
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	rmnet_ctrl_queue_notify
.L16472:
	movw	r1, #:lower16:.LC1276
	sub	r0, r2, #32
	ldr	r2, .L16474+4
	movt	r1, #:upper16:.LC1276
	mov	r3, r6
	bl	__dynamic_pr_debug
	b	.L16453
.L16473:
	movw	r0, #:lower16:.LC1261
	ldr	r1, .L16474+4
	movt	r0, #:upper16:.LC1261
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L16475:
	.align	2
.L16474:
	.word	.LANCHOR8-2032
	.word	.LANCHOR5+1244
	.fnend
	.size	gqti_ctrl_disconnect, .-gqti_ctrl_disconnect
	.align	2
	.global	ghsic_ctrl_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_connect, %function
ghsic_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16491
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L16487
.L16477:
	movw	r2, #:lower16:.LANCHOR1
	clz	r3, r6
	movt	r2, #:upper16:.LANCHOR1
	lsr	r3, r3, #5
	ldr	r1, [r2, #1016]
	cmp	r4, r1
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L16488
	mov	r3, #104
	mla	r4, r3, r4, r2
	ldr	r4, [r4, #1020]
	cmp	r4, #0
	beq	.L16489
	add	r7, r4, #4
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4, #48]
	mov	r1, r0
	cmp	r3, #0
	beq	.L16490
.L16481:
	cmp	r3, #1
	bne	.L16482
	ldr	r0, [r6, #92]
	movw	r2, #:lower16:ghsic_send_cpkt_tomodem
	movw	r3, #:lower16:ghsic_send_cbits_tomodem
	movt	r2, #:upper16:ghsic_send_cpkt_tomodem
	movt	r3, #:upper16:ghsic_send_cbits_tomodem
	str	r0, [r4, #52]
	strd	r2, [r6, #96]
.L16482:
	mov	r5, #0
	mov	r0, r7
	str	r6, [r4, #8]
	str	r5, [r4, #96]
	str	r5, [r4, #100]
	str	r5, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r4, #16
	ldr	r0, [r4, #12]
	bl	queue_work
	mov	r0, r5
.L16476:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L16490:
	movw	r3, #:lower16:ghsic_send_cbits_tomodem
	movt	r3, #:upper16:ghsic_send_cbits_tomodem
	str	r3, [r6, #140]
	ldr	r3, [r4, #48]
	b	.L16481
.L16487:
	movw	r1, #:lower16:.LC612
	sub	r0, r3, #24
	ldr	r2, .L16491+4
	movt	r1, #:upper16:.LC612
	mov	r3, r4
	bl	__dynamic_pr_debug
	b	.L16477
.L16488:
	movw	r0, #:lower16:.LC176
	mov	r2, r4
	ldr	r1, .L16491+4
	movt	r0, #:upper16:.LC176
	bl	printk
	mvn	r0, #18
	b	.L16476
.L16489:
	movw	r0, #:lower16:.LC105
	ldr	r1, .L16491+4
	movt	r0, #:upper16:.LC105
	bl	printk
	mvn	r0, #18
	b	.L16476
.L16492:
	.align	2
.L16491:
	.word	.LANCHOR8-2016
	.word	.LANCHOR5+1268
	.fnend
	.size	ghsic_ctrl_connect, .-ghsic_ctrl_connect
	.align	2
	.global	ghsic_ctrl_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_disconnect, %function
ghsic_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16507
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L16503
.L16494:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #104
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #1016]
	mla	r3, r2, r5, r3
	cmp	r5, r1
	ldr	r4, [r3, #1020]
	bhi	.L16504
	clz	r3, r4
	cmp	r6, #0
	lsr	r3, r3, #5
	moveq	r5, #1
	movne	r5, r3
	cmp	r5, #0
	bne	.L16505
	ldr	r8, [r4, #48]
	add	r7, r4, #4
	mov	r0, r7
	cmp	r8, #0
	beq	.L16506
	bl	_raw_spin_lock_irqsave
	str	r5, [r6, #96]
	str	r5, [r6, #100]
.L16498:
	mov	r3, #0
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	str	r3, [r4, #52]
	str	r3, [r4, #88]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r4, #32
	ldrd	r6, [sp, #8]
	ldr	r0, [r4, #12]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	queue_work
.L16506:
	bl	_raw_spin_lock_irqsave
	str	r8, [r6, #140]
	b	.L16498
.L16503:
	movw	r1, #:lower16:.LC612
	sub	r0, r3, #32
	ldr	r2, .L16507+4
	movt	r1, #:upper16:.LC612
	mov	r3, r5
	bl	__dynamic_pr_debug
	b	.L16494
.L16504:
	movw	r0, #:lower16:.LC176
	mov	r2, r5
	ldr	r1, .L16507+4
	movt	r0, #:upper16:.LC176
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L16505:
	movw	r0, #:lower16:.LC1261
	ldr	r1, .L16507+4
	movt	r0, #:upper16:.LC1261
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L16508:
	.align	2
.L16507:
	.word	.LANCHOR8-1984
	.word	.LANCHOR5+1288
	.fnend
	.size	ghsic_ctrl_disconnect, .-ghsic_ctrl_disconnect
	.align	2
	.global	ghsic_ctrl_set_port_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_set_port_name, %function
ghsic_ctrl_set_port_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r2, [r4, #4048]
	str	lr, [sp, #12]
	cmp	r2, #3
	bhi	.L16515
	mov	r3, r0
	add	r5, r4, #1020
	mov	r0, #104
	cmp	r3, #0
	movne	r1, r3
	mla	r2, r0, r2, r5
	add	r0, r2, #84
	mov	r2, #20
	bl	strlcpy
	ldr	r0, [r4, #4048]
	mov	r3, #104
	movw	r1, #:lower16:.LC1278
	movt	r1, #:upper16:.LC1278
	mov	r2, #20
	mla	r0, r3, r0, r5
	add	r0, r0, #84
	bl	strlcat
	ldr	r3, [r4, #4048]
	ldr	r6, [sp, #8]
	add	r3, r3, #1
	str	r3, [r4, #4048]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L16515:
	movw	r0, #:lower16:.LC1277
	ldr	r1, .L16516
	movt	r0, #:upper16:.LC1277
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L16517:
	.align	2
.L16516:
	.word	.LANCHOR5+1312
	.fnend
	.size	ghsic_ctrl_set_port_name, .-ghsic_ctrl_set_port_name
	.align	2
	.global	ghsic_ctrl_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_ctrl_setup, %function
ghsic_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r3, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	mov	fp, r1
	ldr	r2, [r8, #1016]
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	add	r1, r2, r0
	cmp	r1, #4
	str	r1, [sp, #12]
	movle	r1, #0
	movgt	r1, #1
	cmp	r0, #0
	str	r2, [sp, #28]
	moveq	r1, #1
	str	r2, [sp, #32]
	cmp	r1, #0
	bne	.L16542
	ldr	r0, .L16545
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L16543
.L16521:
	ldr	r3, [sp, #12]
	ldr	r6, [sp, #28]
	cmp	r6, r3
	bcs	.L16518
	mov	r3, #104
	movw	r2, #:lower16:ghsic_ctrl_connect_w
	movw	r1, #:lower16:gctrl_disconnect_w
	movw	r0, #:lower16:ghsic_ctrl_receive
	mul	r3, r3, r6
	movt	r2, #:upper16:ghsic_ctrl_connect_w
	movt	r1, #:upper16:gctrl_disconnect_w
	movt	r0, #:upper16:ghsic_ctrl_receive
	movw	r9, #:lower16:kmalloc_caches
	movt	r9, #:upper16:kmalloc_caches
	str	r2, [sp, #16]
	add	r5, r3, #84
	str	r1, [sp, #20]
	str	r3, [sp, #36]
	ldr	r3, .L16545+4
	str	r0, [sp, #24]
	add	r5, r3, r5
	b	.L16528
.L16526:
	ldr	r3, [sp, #12]
	add	r6, r6, #1
	add	r5, r5, #104
	cmp	r3, r6
	bls	.L16518
.L16528:
	ldr	ip, [r9, #28]
	mov	r7, #0
	mov	r2, #108
	ldr	r3, [r8, #1016]
	movw	r1, #32976
	mov	r4, #16
	cmp	ip, r7
	mov	r0, ip
	add	r3, r3, #1
	str	r3, [r8, #1016]
	beq	.L16522
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L16523
.L16522:
	mov	r3, r7
	mov	r2, #1
	str	r7, [sp]
	mov	r1, #10
	mov	r0, r5
	bl	__alloc_workqueue_key
	mov	ip, r0
	movw	r2, #:lower16:ghsic_ctrl_probe
	cmp	ip, #0
	movw	r3, #:lower16:ghsic_ctrl_remove
	movw	r1, #:lower16:ghsic_ctrl_status
	add	r10, r4, #20
	str	ip, [r4, #12]
	movt	r2, #:upper16:ghsic_ctrl_probe
	movt	r3, #:upper16:ghsic_ctrl_remove
	sub	r0, r5, #80
	mov	lr, #2560
	movt	r1, #:upper16:ghsic_ctrl_status
	add	ip, r4, #36
	beq	.L16544
	cmp	fp, #0
	str	r6, [r4]
	str	ip, [r4, #36]
	str	ip, [r4, #40]
	ldr	ip, [sp, #20]
	str	r7, [r4, #4]
	ldr	r7, [sp, #16]
	streq	r1, [r4, #76]
	str	lr, [r4, #16]
	str	r10, [r4, #20]
	str	ip, [r4, #44]
	ldr	ip, [sp, #24]
	str	r10, [r4, #24]
	str	r7, [r4, #28]
	str	lr, [r4, #32]
	str	fp, [r4, #48]
	str	r4, [r4, #56]
	str	r5, [r4, #64]
	str	ip, [r4, #72]
	str	r4, [r5, #-84]
	strd	r2, [r5, #-80]
	mov	r3, #0
	str	r5, [r5, #-60]
	str	r3, [r5, #-52]
	bl	platform_driver_register
	ldr	r0, .L16545+8
	ldrh	r3, [r0]
	tst	r3, #4
	beq	.L16526
	movw	r1, #:lower16:.LC1254
	mov	r3, r4
	ldr	r2, .L16545+12
	movt	r1, #:upper16:.LC1254
	sub	r0, r0, #18
	str	r6, [sp]
	bl	__dynamic_pr_debug
	b	.L16526
.L16544:
	movw	r0, #:lower16:.LC1279
	mov	r2, r5
	ldr	r1, .L16545+12
	movt	r0, #:upper16:.LC1279
	bl	printk
.L16523:
	ldr	r3, [r8, #1016]
	movw	r0, #:lower16:.LC1253
	mov	r2, r6
	ldr	r1, .L16545+4
	movt	r0, #:upper16:.LC1253
	ldr	ip, [sp, #36]
	sub	r3, r3, #1
	add	r4, r1, ip
	ldr	r1, .L16545+16
	str	r3, [r8, #1016]
	bl	printk
	ldr	r5, [sp, #28]
.L16527:
	ldr	r3, [r8, #1016]
	add	r6, r4, #104
	cmp	r3, r5
	bhi	.L16529
	mvn	r3, #11
	str	r3, [sp, #28]
	ldr	r3, [sp, #32]
	str	r3, [r8, #1016]
.L16518:
	ldr	r0, [sp, #28]
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16543:
	movw	r1, #:lower16:.LC1269
	ldr	r2, .L16545+16
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1269
	bl	__dynamic_pr_debug
	b	.L16521
.L16542:
	mov	r2, r3
	movw	r0, #:lower16:.LC1271
	ldr	r1, .L16545+16
	mvn	r3, #21
	movt	r0, #:upper16:.LC1271
	str	r3, [sp, #28]
	bl	printk
	b	.L16518
.L16529:
	ldr	r7, [r6, #-104]
	add	r5, r5, #1
	ldr	r0, [r7, #12]
	bl	destroy_workqueue
	mov	r0, r7
	bl	kfree
	add	r0, r4, #4
	mov	r4, r6
	bl	platform_driver_unregister
	b	.L16527
.L16546:
	.align	2
.L16545:
	.word	.LANCHOR8-1968
	.word	.LANCHOR1+1020
	.word	.LANCHOR8-1950
	.word	.LANCHOR5+1360
	.word	.LANCHOR5+1340
	.fnend
	.size	ghsic_ctrl_setup, .-ghsic_ctrl_setup
	.align	2
	.global	ghsic_data_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_disconnect, %function
ghsic_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16566
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L16563
.L16548:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #104
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #1436]
	mla	r3, r2, r6, r3
	cmp	r6, r1
	ldr	r4, [r3, #1440]
	bhi	.L16564
	clz	r0, r4
	cmp	r5, #0
	lsr	r0, r0, #5
	moveq	r5, #1
	movne	r5, r0
	cmp	r5, #0
	bne	.L16565
	mov	r0, r4
	bl	ghsic_data_free_buffers.part.46
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L16551
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #8]
	str	r5, [r3]
.L16551:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L16552
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	mov	r2, #0
	str	r2, [r3]
.L16552:
	mov	r5, #0
	add	r8, r4, #48
	mov	r0, r8
	add	r7, r4, #164
	str	r5, [r4, #4]
	add	r6, r4, #80
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r1, r7
	str	r5, [r4, #8]
	mov	r0, #2
	str	r5, [r4, #184]
	bl	_clear_bit
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	mov	r1, r7
	str	r5, [r4, #12]
	mov	r0, #1
	bl	_clear_bit
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	add	r1, r4, #104
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	ldr	r0, [r4, #84]
	ldrd	r4, [sp]
	add	sp, sp, #32
	b	queue_work
.L16563:
	movw	r1, #:lower16:.LC612
	sub	r0, r3, #24
	ldr	r2, .L16566+4
	movt	r1, #:upper16:.LC612
	mov	r3, r6
	bl	__dynamic_pr_debug
	b	.L16548
.L16564:
	movw	r0, #:lower16:.LC176
	mov	r2, r6
	ldr	r1, .L16566+4
	movt	r0, #:upper16:.LC176
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L16565:
	movw	r0, #:lower16:.LC105
	ldr	r1, .L16566+4
	movt	r0, #:upper16:.LC105
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L16567:
	.align	2
.L16566:
	.word	.LANCHOR8-1920
	.word	.LANCHOR5+1380
	.fnend
	.size	ghsic_data_disconnect, .-ghsic_data_disconnect
	.align	2
	.global	ghsic_data_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_connect, %function
ghsic_data_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16587
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L16581
.L16569:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #104
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #1436]
	mla	r3, r2, r6, r3
	cmp	r6, r1
	ldr	r4, [r3, #1440]
	bhi	.L16582
	cmp	r4, #0
	cmpne	r5, #0
	beq	.L16583
	ldr	r3, [r4, #16]
	add	r7, r4, #48
	add	r6, r4, #80
	mov	r0, r7
	cmp	r3, #0
	beq	.L16584
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #84]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #88]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR6
	movt	r3, #:upper16:.LANCHOR6
	ldr	r2, [r3, #-1552]
	ldr	r3, [r3, #-1548]
	str	r2, [r4, #20]
	str	r3, [r4, #52]
	ldr	r3, [r5, #84]
	str	r4, [r3]
	ldr	r3, [r5, #88]
	str	r4, [r3]
.L16574:
	ldr	r3, [r4, #8]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L16585
	ldr	r3, [r4, #12]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L16586
	mov	r3, #1
	mov	r0, r7
	str	r3, [r4, #4]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r7
	str	r5, [r4, #192]
	str	r5, [r4, #196]
	str	r5, [r4, #200]
	str	r5, [r4, #216]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r6
	str	r5, [r4, #188]
	str	r5, [r4, #204]
	str	r5, [r4, #208]
	str	r5, [r4, #212]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r4, #88
	ldr	r0, [r4, #84]
	bl	queue_work
.L16568:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L16584:
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #88]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #92]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR6
	movt	r3, #:upper16:.LANCHOR6
	ldr	r2, [r3, #-1560]
	ldr	r3, [r3, #-1556]
	str	r2, [r4, #20]
	str	r3, [r4, #52]
	ldr	r3, [r5, #88]
	str	r4, [r3]
	ldr	r3, [r5, #92]
	str	r4, [r3]
	b	.L16574
.L16581:
	movw	r1, #:lower16:.LC612
	sub	r0, r3, #32
	ldr	r2, .L16587+4
	movt	r1, #:upper16:.LC612
	mov	r3, r6
	bl	__dynamic_pr_debug
	b	.L16569
.L16586:
	movw	r0, #:lower16:.LC389
	ldr	r1, .L16587+4
	movt	r0, #:upper16:.LC389
	ldr	r2, [r4, #12]
	bl	printk
	ldr	r0, [r4, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L16568
.L16583:
	movw	r0, #:lower16:.LC105
	ldr	r1, .L16587+4
	mvn	r5, #18
	movt	r0, #:upper16:.LC105
	bl	printk
	b	.L16568
.L16582:
	movw	r0, #:lower16:.LC176
	mov	r2, r6
	ldr	r1, .L16587+4
	movt	r0, #:upper16:.LC176
	mvn	r5, #18
	bl	printk
	b	.L16568
.L16585:
	movw	r0, #:lower16:.LC388
	ldr	r1, .L16587+4
	movt	r0, #:upper16:.LC388
	ldr	r2, [r4, #8]
	bl	printk
	b	.L16568
.L16588:
	.align	2
.L16587:
	.word	.LANCHOR8-1888
	.word	.LANCHOR5+1404
	.fnend
	.size	ghsic_data_connect, .-ghsic_data_connect
	.align	2
	.global	ghsic_data_set_port_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_set_port_name, %function
ghsic_data_set_port_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r2, [r4, #4052]
	str	lr, [sp, #12]
	cmp	r2, #3
	bhi	.L16595
	mov	r3, r0
	add	r5, r4, #1440
	mov	r0, #104
	cmp	r3, #0
	movne	r1, r3
	mla	r2, r0, r2, r5
	add	r0, r2, #84
	mov	r2, #20
	bl	strlcpy
	ldr	r0, [r4, #4052]
	mov	r3, #104
	movw	r1, #:lower16:.LC1280
	movt	r1, #:upper16:.LC1280
	mov	r2, #20
	mla	r0, r3, r0, r5
	add	r0, r0, #84
	bl	strlcat
	ldr	r3, [r4, #4052]
	ldr	r6, [sp, #8]
	add	r3, r3, #1
	str	r3, [r4, #4052]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L16595:
	movw	r0, #:lower16:.LC1277
	ldr	r1, .L16596
	movt	r0, #:upper16:.LC1277
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L16597:
	.align	2
.L16596:
	.word	.LANCHOR5+1424
	.fnend
	.size	ghsic_data_set_port_name, .-ghsic_data_set_port_name
	.align	2
	.global	ghsic_data_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsic_data_setup, %function
ghsic_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r3, r0
	strd	r6, [sp, #8]
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r7, #1436]
	.pad #52
	sub	sp, sp, #52
	str	r1, [sp, #12]
	add	r1, r2, r0
	cmp	r1, #4
	str	r1, [sp, #8]
	movle	r1, #0
	movgt	r1, #1
	cmp	r0, #0
	str	r2, [sp, #36]
	moveq	r1, #1
	str	r2, [sp, #40]
	cmp	r1, #0
	bne	.L16621
	ldr	r0, .L16625
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L16622
.L16601:
	ldr	r3, [sp, #8]
	ldr	r4, [sp, #36]
	cmp	r4, r3
	bcs	.L16598
	movw	r2, #:lower16:kmalloc_caches
	mov	r3, #104
	movt	r2, #:upper16:kmalloc_caches
	movw	r1, #:lower16:ghsic_data_connect_w
	mul	r3, r3, r4
	movw	r0, #:lower16:ghsic_data_disconnect_w
	movw	ip, #:lower16:ghsic_data_write_tohost
	str	r2, [sp, #16]
	ldr	r2, .L16625+4
	movt	r1, #:upper16:ghsic_data_connect_w
	movt	r0, #:upper16:ghsic_data_disconnect_w
	movt	ip, #:upper16:ghsic_data_write_tohost
	str	r1, [sp, #20]
	str	r3, [sp, #44]
	add	r3, r3, #84
	add	r6, r2, r3
	str	r0, [sp, #24]
	mov	r5, r6
	mov	r6, r7
	str	ip, [sp, #28]
	b	.L16607
.L16605:
	ldr	r3, [sp, #8]
	add	r4, r4, #1
	add	r5, r5, #104
	cmp	r3, r4
	bls	.L16598
.L16607:
	ldr	r1, [sp, #16]
	mov	r8, #0
	mov	r2, #220
	ldr	r3, [r6, #1436]
	mov	r7, #16
	ldr	ip, [r1, #32]
	movw	r1, #32976
	add	r3, r3, #1
	str	r3, [r6, #1436]
	cmp	ip, r8
	mov	r0, ip
	beq	.L16602
	bl	kmem_cache_alloc_trace
	subs	r7, r0, #0
	beq	.L16623
.L16602:
	mov	r3, r8
	mov	r2, #1
	str	r8, [sp]
	mov	r1, #10
	mov	r0, r5
	bl	__alloc_workqueue_key
	mov	fp, r0
	add	r3, r7, #64
	cmp	fp, #0
	movw	ip, #:lower16:ghsic_data_write_tomdm
	movw	lr, #:lower16:ghsic_data_receive
	movw	r1, #:lower16:ghsic_data_unthrottle_tx
	str	r3, [sp, #32]
	movw	r2, #:lower16:ghsic_data_probe
	movw	r3, #:lower16:ghsic_data_remove
	str	fp, [r7, #84]
	mov	r9, #2560
	add	r10, r7, #24
	movt	ip, #:upper16:ghsic_data_write_tomdm
	movt	lr, #:upper16:ghsic_data_receive
	movt	r1, #:upper16:ghsic_data_unthrottle_tx
	movt	r2, #:upper16:ghsic_data_probe
	sub	r0, r5, #80
	movt	r3, #:upper16:ghsic_data_remove
	beq	.L16624
	str	r4, [r7]
	str	r10, [r7, #24]
	str	r10, [r7, #28]
	add	r10, r7, #32
	str	ip, [r7, #132]
	add	ip, r7, #140
	str	r10, [r7, #32]
	str	r10, [r7, #36]
	add	r10, r7, #56
	str	r8, [r7, #40]
	str	r10, [r7, #56]
	str	r10, [r7, #60]
	add	r10, r7, #64
	str	r10, [r7, #64]
	str	r10, [r7, #68]
	add	r10, r7, #92
	str	r8, [r7, #72]
	str	r8, [r7, #80]
	str	r10, [r7, #92]
	str	r10, [r7, #96]
	ldr	r10, [sp, #20]
	str	r8, [r7, #48]
	str	r8, [r7, #44]
	str	r8, [r7, #76]
	str	r9, [r7, #88]
	str	r10, [r7, #100]
	add	r10, r7, #108
	str	r9, [r7, #104]
	str	r10, [r7, #108]
	str	r10, [r7, #112]
	ldr	r10, [sp, #24]
	str	r9, [r7, #120]
	str	r9, [r7, #136]
	str	ip, [r7, #140]
	str	r10, [r7, #116]
	add	r10, r7, #124
	str	ip, [r7, #144]
	str	r10, [r7, #124]
	str	r10, [r7, #128]
	ldr	ip, [sp, #28]
	str	ip, [r7, #148]
	ldr	ip, [sp, #12]
	str	r7, [r7, #152]
	str	r5, [r7, #160]
	str	lr, [r7, #168]
	str	ip, [r7, #16]
	str	r1, [r7, #176]
	str	r7, [r5, #-84]
	strd	r2, [r5, #-80]
	str	r5, [r5, #-60]
	str	r8, [r5, #-52]
	bl	platform_driver_register
	ldr	r0, .L16625+8
	ldrh	r3, [r0]
	tst	r3, #4
	beq	.L16605
	movw	r1, #:lower16:.LC166
	ldr	r2, .L16625+12
	mov	r3, r4
	movt	r1, #:upper16:.LC166
	sub	r0, r0, #18
	bl	__dynamic_pr_debug
	b	.L16605
.L16623:
	mov	r7, r6
.L16603:
	ldr	r3, [r7, #1436]
	movw	r0, #:lower16:.LC1253
	mov	r2, r4
	ldr	r1, .L16625+4
	movt	r0, #:upper16:.LC1253
	ldr	ip, [sp, #44]
	sub	r3, r3, #1
	add	r4, r1, ip
	ldr	r1, .L16625+16
	str	r3, [r7, #1436]
	bl	printk
	ldr	r5, [sp, #36]
.L16606:
	ldr	r3, [r7, #1436]
	add	r6, r4, #104
	cmp	r5, r3
	bcc	.L16608
	mvn	r3, #11
	str	r3, [sp, #36]
	ldr	r3, [sp, #40]
	str	r3, [r7, #1436]
.L16598:
	ldr	r0, [sp, #36]
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16622:
	movw	r1, #:lower16:.LC1281
	ldr	r2, .L16625+16
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1281
	bl	__dynamic_pr_debug
	b	.L16601
.L16621:
	mov	r2, r3
	movw	r0, #:lower16:.LC1271
	ldr	r1, .L16625+16
	mvn	r3, #21
	movt	r0, #:upper16:.LC1271
	str	r3, [sp, #36]
	bl	printk
	b	.L16598
.L16624:
	mov	r3, r6
	movw	r0, #:lower16:.LC1279
	ldr	r1, .L16625+12
	mov	r6, r5
	movt	r0, #:upper16:.LC1279
	mov	r5, r7
	mov	r2, r6
	mov	r7, r3
	bl	printk
	mov	r0, r5
	bl	kfree
	b	.L16603
.L16608:
	ldr	r8, [r6, #-104]
	add	r5, r5, #1
	ldr	r0, [r8, #84]
	bl	destroy_workqueue
	mov	r0, r8
	bl	kfree
	add	r0, r4, #4
	mov	r4, r6
	bl	platform_driver_unregister
	b	.L16606
.L16626:
	.align	2
.L16625:
	.word	.LANCHOR8-1872
	.word	.LANCHOR1+1440
	.word	.LANCHOR8-1854
	.word	.LANCHOR5+1472
	.word	.LANCHOR5+1452
	.fnend
	.size	ghsic_data_setup, .-ghsic_data_setup
	.align	2
	.global	ghsuart_ctrl_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_connect, %function
ghsuart_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16643
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L16639
.L16628:
	movw	r3, #:lower16:.LANCHOR1
	clz	r5, r6
	movt	r3, #:upper16:.LANCHOR1
	lsr	r5, r5, #5
	ldr	r2, [r3, #1856]
	cmp	r4, r2
	orrhi	r5, r5, #1
	cmp	r5, #0
	bne	.L16640
	mov	r2, #84
	mla	r4, r2, r4, r3
	ldr	r4, [r4, #1860]
	cmp	r4, #0
	beq	.L16641
	add	r7, r4, #8
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	ldr	ip, [r6, #92]
	movw	r2, #:lower16:ghsuart_send_cpkt_tomodem
	movw	r3, #:lower16:ghsuart_send_cbits_tomodem
	movt	r2, #:upper16:ghsuart_send_cpkt_tomodem
	movt	r3, #:upper16:ghsuart_send_cbits_tomodem
	mov	r1, r0
	mov	r0, r7
	str	ip, [r4, #68]
	strd	r2, [r6, #96]
	str	r6, [r4, #12]
	str	r5, [r4, #96]
	str	r5, [r4, #100]
	str	r5, [r4, #104]
	bl	_raw_spin_unlock_irqrestore
	ldr	r0, [r4, #88]
	ubfx	r0, r0, #1, #1
	cmp	r0, #0
	bne	.L16642
.L16627:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L16642:
	add	r1, r4, #36
	ldr	r0, [r4, #32]
	bl	queue_work
	mov	r0, r5
	b	.L16627
.L16639:
	movw	r1, #:lower16:.LC612
	sub	r0, r3, #24
	ldr	r2, .L16643+4
	movt	r1, #:upper16:.LC612
	mov	r3, r4
	bl	__dynamic_pr_debug
	b	.L16628
.L16640:
	movw	r0, #:lower16:.LC176
	mov	r2, r4
	ldr	r1, .L16643+4
	movt	r0, #:upper16:.LC176
	bl	printk
	mvn	r0, #18
	b	.L16627
.L16641:
	movw	r0, #:lower16:.LC105
	ldr	r1, .L16643+4
	movt	r0, #:upper16:.LC105
	bl	printk
	mvn	r0, #18
	b	.L16627
.L16644:
	.align	2
.L16643:
	.word	.LANCHOR8-1824
	.word	.LANCHOR5+1496
	.fnend
	.size	ghsuart_ctrl_connect, .-ghsuart_ctrl_connect
	.align	2
	.global	ghsuart_ctrl_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_disconnect, %function
ghsuart_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16656
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L16653
.L16646:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r2, [r3, #1856]
	cmp	r4, r2
	bhi	.L16654
	mov	r2, #84
	cmp	r6, #0
	mla	r4, r2, r4, r3
	ldr	r5, [r4, #1860]
	clz	r4, r5
	lsr	r4, r4, #5
	moveq	r4, #1
	cmp	r4, #0
	bne	.L16655
	add	r7, r5, #8
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r7
	str	r4, [r6, #96]
	str	r4, [r6, #100]
	str	r4, [r5, #12]
	str	r4, [r5, #68]
	str	r4, [r5, #92]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r5, #52
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	ldr	r0, [r5, #32]
	ldrd	r4, [sp]
	add	sp, sp, #24
	b	queue_work
.L16653:
	movw	r1, #:lower16:.LC612
	sub	r0, r3, #32
	ldr	r2, .L16656+4
	movt	r1, #:upper16:.LC612
	mov	r3, r4
	bl	__dynamic_pr_debug
	b	.L16646
.L16654:
	movw	r0, #:lower16:.LC176
	mov	r2, r4
	ldr	r1, .L16656+4
	movt	r0, #:upper16:.LC176
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L16655:
	movw	r0, #:lower16:.LC1261
	ldr	r1, .L16656+4
	movt	r0, #:upper16:.LC1261
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk
.L16657:
	.align	2
.L16656:
	.word	.LANCHOR8-1792
	.word	.LANCHOR5+1520
	.fnend
	.size	ghsuart_ctrl_disconnect, .-ghsuart_ctrl_disconnect
	.align	2
	.global	ghsuart_ctrl_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_ctrl_setup, %function
ghsuart_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r3, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r8, #:lower16:.LANCHOR1
	movt	r8, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	ldr	r2, [r8, #1856]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	str	r1, [sp, #12]
	add	r9, r2, r0
	str	r2, [sp, #20]
	cmp	r9, #2
	str	r2, [sp, #24]
	movle	r1, #0
	movgt	r1, #1
	cmp	r0, #0
	moveq	r1, #1
	cmp	r1, #0
	bne	.L16680
	ldr	r0, .L16686
	ldrh	r2, [r0, #-6]
	tst	r2, #4
	bne	.L16681
.L16661:
	ldr	r7, [sp, #20]
	cmp	r7, r9
	bcs	.L16658
	mov	r3, #84
	movw	r2, #:lower16:.LC753
	movt	r2, #:upper16:.LC753
	movw	r10, #:lower16:kmalloc_caches
	mul	r3, r3, r7
	movw	fp, #:lower16:.LC1282
	movt	r10, #:upper16:kmalloc_caches
	movt	fp, #:upper16:.LC1282
	str	r2, [sp, #16]
	add	r5, r3, #4
	str	r3, [sp, #28]
	ldr	r3, .L16686+4
	add	r5, r3, r5
	b	.L16667
.L16684:
	ldrh	r3, [ip]
	tst	r3, #4
	bne	.L16682
	add	r7, r7, #1
	add	r5, r5, #84
	cmp	r9, r7
	bls	.L16658
.L16667:
	ldr	ip, [r10, #28]
	mov	r6, #0
	mov	r2, #108
	ldr	r3, [r8, #1856]
	movw	r1, #32976
	mov	r4, #16
	cmp	ip, r6
	mov	r0, ip
	add	r3, r3, #1
	str	r3, [r8, #1856]
	beq	.L16662
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L16670
.L16662:
	movw	r0, #:lower16:.LC1282
	mov	r3, r6
	str	r6, [sp]
	mov	r2, #1
	mov	r1, #10
	movt	r0, #:upper16:.LC1282
	bl	__alloc_workqueue_key
	mov	r3, r0
	ldr	r2, .L16686+8
	add	r0, r4, #20
	cmp	r3, #0
	ldr	r1, [sp, #16]
	str	r3, [r4, #32]
	beq	.L16683
	ldr	r3, [sp, #12]
	str	r7, [r4]
	str	r3, [r4, #4]
	str	r6, [r4, #8]
	str	r6, [r4, #16]
	bl	__init_waitqueue_head
	movw	r3, #:lower16:ghsuart_ctrl_connect_w
	movw	r2, #:lower16:ghsuart_ctrl_disconnect_w
	str	r4, [r4, #72]
	movt	r3, #:upper16:ghsuart_ctrl_connect_w
	movt	r2, #:upper16:ghsuart_ctrl_disconnect_w
	movw	r1, #:lower16:ghsuart_ctrl_receive
	mov	ip, #2560
	add	r0, r4, #56
	movt	r1, #:upper16:ghsuart_ctrl_receive
	str	r3, [r4, #48]
	add	r3, r4, #40
	mov	lr, #42
	str	r2, [r4, #64]
	movw	r2, #:lower16:ghsuart_ctrl_probe
	movt	r2, #:upper16:ghsuart_ctrl_probe
	str	ip, [r4, #36]
	str	r3, [r4, #40]
	str	r3, [r4, #44]
	movw	r3, #:lower16:ghsuart_ctrl_remove
	movt	r3, #:upper16:ghsuart_ctrl_remove
	str	ip, [r4, #52]
	str	r0, [r4, #56]
	str	r0, [r4, #60]
	mov	r0, r5
	str	lr, [r4, #76]
	str	r1, [r4, #84]
	str	r4, [r5, #-4]
	str	r2, [r5]
	str	r3, [r5, #4]
	str	fp, [r5, #20]
	str	r6, [r5, #28]
	bl	platform_driver_register
	cmp	r0, #0
	ldr	ip, .L16686+12
	bge	.L16684
	mov	r6, r0
.L16663:
	ldr	r3, [r8, #1856]
	movw	r0, #:lower16:.LC1253
	mov	r2, r7
	ldr	r1, .L16686+4
	movt	r0, #:upper16:.LC1253
	ldr	ip, [sp, #28]
	sub	r3, r3, #1
	add	r4, r1, ip
	ldr	r1, .L16686+16
	str	r3, [r8, #1856]
	bl	printk
	ldr	r5, [sp, #20]
.L16666:
	ldr	r3, [r8, #1856]
	add	r7, r4, #84
	cmp	r3, r5
	bls	.L16685
	ldr	r9, [r7, #-84]
	add	r5, r5, #1
	ldr	r0, [r9, #32]
	bl	destroy_workqueue
	add	r0, r4, #4
	mov	r4, r7
	bl	platform_driver_unregister
	mov	r0, r9
	bl	kfree
	b	.L16666
.L16682:
	movw	r1, #:lower16:.LC1254
	mov	r3, r4
	ldr	r2, .L16686+20
	sub	r0, ip, #18
	movt	r1, #:upper16:.LC1254
	str	r7, [sp]
	add	r7, r7, #1
	add	r5, r5, #84
	bl	__dynamic_pr_debug
	cmp	r9, r7
	bhi	.L16667
.L16658:
	ldr	r0, [sp, #20]
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16681:
	movw	r1, #:lower16:.LC1269
	ldr	r2, .L16686+16
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1269
	bl	__dynamic_pr_debug
	b	.L16661
.L16670:
	mvn	r6, #11
	b	.L16663
.L16680:
	mov	r2, r3
	movw	r0, #:lower16:.LC1271
	ldr	r1, .L16686+16
	mvn	r3, #21
	movt	r0, #:upper16:.LC1271
	str	r3, [sp, #20]
	bl	printk
	b	.L16658
.L16683:
	movw	r2, #:lower16:.LC1282
	movw	r0, #:lower16:.LC1279
	ldr	r1, .L16686+20
	movt	r2, #:upper16:.LC1282
	movt	r0, #:upper16:.LC1279
	bl	printk
	mov	r0, r4
	mvn	r6, #11
	bl	kfree
	b	.L16663
.L16685:
	ldr	r3, [sp, #24]
	str	r6, [sp, #20]
	str	r3, [r8, #1856]
	b	.L16658
.L16687:
	.align	2
.L16686:
	.word	.LANCHOR8-1776
	.word	.LANCHOR1+1860
	.word	.LANCHOR1+3972
	.word	.LANCHOR8-1758
	.word	.LANCHOR5+1544
	.word	.LANCHOR5+1564
	.fnend
	.size	ghsuart_ctrl_setup, .-ghsuart_ctrl_setup
	.align	2
	.global	event_string
	.syntax unified
	.arm
	.fpu softvfp
	.type	event_string, %function
event_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #8
	bhi	.L16690
	movw	r3, #:lower16:.LANCHOR5
	movt	r3, #:upper16:.LANCHOR5
	add	r3, r3, r0, lsl #2
	ldr	r0, [r3, #1588]
	bx	lr
.L16690:
	movw	r0, #:lower16:.LC186
	movt	r0, #:upper16:.LC186
	bx	lr
	.fnend
	.size	event_string, .-event_string
	.align	2
	.global	ghsuart_data_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_disconnect, %function
ghsuart_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16712
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L16708
.L16692:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #84
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #2028]
	mla	r3, r2, r5, r3
	cmp	r5, r1
	ldr	r4, [r3, #2032]
	bhi	.L16709
	clz	r3, r4
	cmp	r6, #0
	lsr	r3, r3, #5
	moveq	r5, #1
	movne	r5, r3
	cmp	r5, #0
	bne	.L16710
	mov	r0, r4
	bl	ghsuart_data_free_buffers.part.47
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L16695
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #8]
	str	r5, [r3]
.L16695:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L16696
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	mov	r2, #0
	str	r2, [r3]
.L16696:
	ldr	r5, [r4, #16]
	mov	r3, #0
	str	r3, [r4, #4]
	cmp	r5, r3
	beq	.L16711
.L16697:
	add	r8, r4, #72
	mov	r5, #0
	mov	r0, r8
	add	r7, r4, #184
	bl	_raw_spin_lock_irqsave
	mov	r9, r0
	mov	r1, r7
	str	r5, [r4, #8]
	mov	r0, #2
	str	r5, [r4, #192]
	add	r6, r4, #104
	bl	_clear_bit
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r8, r0
	mov	r1, r7
	str	r5, [r4, #12]
	mov	r0, #1
	bl	_clear_bit
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	add	r1, r4, #128
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	ldr	r0, [r4, #108]
	ldrd	r4, [sp]
	add	sp, sp, #32
	b	queue_work
.L16711:
	add	r7, r4, #20
	mov	r0, r7
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r7
	str	r5, [r6, #140]
	str	r5, [r4, #24]
	str	r5, [r4, #196]
	bl	_raw_spin_unlock_irqrestore
	b	.L16697
.L16708:
	movw	r1, #:lower16:.LC612
	sub	r0, r3, #24
	ldr	r2, .L16712+4
	movt	r1, #:upper16:.LC612
	mov	r3, r5
	bl	__dynamic_pr_debug
	b	.L16692
.L16709:
	movw	r0, #:lower16:.LC176
	mov	r2, r5
	ldr	r1, .L16712+4
	movt	r0, #:upper16:.LC176
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L16710:
	movw	r0, #:lower16:.LC105
	ldr	r1, .L16712+4
	movt	r0, #:upper16:.LC105
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L16713:
	.align	2
.L16712:
	.word	.LANCHOR8-1728
	.word	.LANCHOR5+1624
	.fnend
	.size	ghsuart_data_disconnect, .-ghsuart_data_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_disable, %function
frmnet_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	ldr	r8, .L16755
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #16
	sub	sp, sp, #16
	ldrh	r3, [r8, #-14]
	tst	r3, #4
	bne	.L16751
.L16715:
	ldr	r0, [r4, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, .L16755+4
	mov	r3, #0
	ldr	r2, [r4, #136]
	str	r3, [r2]
	ldrh	r2, [r0, #-6]
	str	r3, [r4, #120]
	tst	r2, #4
	bne	.L16752
.L16716:
	add	r6, r4, #132
	add	r7, r4, #144
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r5, [r4, #144]
	mov	r9, r0
	cmp	r7, r5
	beq	.L16720
.L16717:
	mov	r0, r5
	sub	r10, r5, #8
	bl	list_del
	ldr	r0, [r5, #-8]
	bl	kfree
	mov	r0, r10
	bl	kfree
	ldr	r5, [r4, #144]
	cmp	r7, r5
	bne	.L16717
.L16720:
	mov	r3, #0
	mov	r0, r6
	mov	r1, r9
	movw	r5, #:lower16:.LANCHOR1
	str	r3, [r4, #152]
	movt	r5, #:upper16:.LANCHOR1
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, .L16755+8
	ldrb	r2, [r4, #116]	@ zero_extendqisi2
	ldrh	r0, [r3, #-6]
	lsl	r3, r2, #1
	add	r1, r3, r2
	add	r1, r5, r1, lsl #3
	tst	r0, #4
	ldr	r6, [r1, #3240]
	ldr	r7, [r1, #3244]
	bne	.L16753
.L16719:
	add	r1, r3, r2
	sub	r0, r7, #3
	add	r1, r5, r1, lsl #3
	ldr	r1, [r1, #3252]
	cmp	r0, #7
	ldrls	pc, [pc, r0, asl #2]
	b	.L16723
.L16725:
	.word	.L16729
	.word	.L16728
	.word	.L16723
	.word	.L16723
	.word	.L16723
	.word	.L16727
	.word	.L16726
	.word	.L16724
.L16727:
	mov	r0, r4
	bl	ghsic_ctrl_disconnect
	ldrb	r2, [r4, #116]	@ zero_extendqisi2
	lsl	r3, r2, #1
.L16724:
	add	r3, r3, r2
	add	r5, r5, r3, lsl #3
	sub	r2, r6, #5
	ldr	r1, [r5, #3248]
	cmp	r2, #5
	ldrls	pc, [pc, r2, asl #2]
	b	.L16731
.L16733:
	.word	.L16736
	.word	.L16736
	.word	.L16736
	.word	.L16735
	.word	.L16734
	.word	.L16714
.L16714:
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L16734:
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	ghsuart_data_disconnect
.L16735:
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	ghsic_data_disconnect
.L16736:
	uxtb	r1, r1
	mov	r2, r6
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	gbam_disconnect
.L16726:
	mov	r0, r4
	bl	ghsuart_ctrl_disconnect
	ldrb	r2, [r4, #116]	@ zero_extendqisi2
	lsl	r3, r2, #1
	b	.L16724
.L16729:
	uxtb	r1, r1
	mov	r0, r4
	bl	gsmd_ctrl_disconnect
	ldrb	r2, [r4, #116]	@ zero_extendqisi2
	lsl	r3, r2, #1
	b	.L16724
.L16728:
	mov	r0, r4
	bl	gqti_ctrl_disconnect
	ldrb	r2, [r4, #116]	@ zero_extendqisi2
	lsl	r3, r2, #1
	b	.L16724
.L16753:
	sub	r1, r7, #1
	cmp	r1, #9
	movwhi	r3, #:lower16:.LC186
	movthi	r3, #:upper16:.LC186
	bhi	.L16721
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r3, r3, r1, lsl #2
	ldr	r3, [r3, #1268]
.L16721:
	sub	r0, r6, #1
	cmp	r0, #9
	movwhi	r0, #:lower16:.LC186
	movthi	r0, #:upper16:.LC186
	bhi	.L16722
	movw	r1, #:lower16:.LANCHOR3
	movt	r1, #:upper16:.LANCHOR3
	add	r1, r1, r0, lsl #2
	ldr	r0, [r1, #1268]
.L16722:
	movw	r1, #:lower16:.LC1283
	stm	sp, {r0, r4}
	sub	r0, r8, #8
	movt	r1, #:upper16:.LC1283
	str	r2, [sp, #8]
	ldr	r2, .L16755+12
	bl	__dynamic_pr_debug
	ldrb	r2, [r4, #116]	@ zero_extendqisi2
	lsl	r3, r2, #1
	b	.L16719
.L16751:
	movw	r1, #:lower16:.LC612
	ldrb	r3, [r0, #116]	@ zero_extendqisi2
	sub	r0, r8, #32
	movt	r1, #:upper16:.LC612
	ldr	r2, .L16755+16
	bl	__dynamic_pr_debug
	b	.L16715
.L16752:
	movw	r1, #:lower16:.LC612
	ldrb	r3, [r4, #116]	@ zero_extendqisi2
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC612
	ldr	r2, .L16755+20
	bl	__dynamic_pr_debug
	b	.L16716
.L16723:
	sub	r7, r7, #1
	cmp	r7, #9
	bls	.L16754
.L16741:
	movw	r2, #:lower16:.LC186
	movt	r2, #:upper16:.LC186
.L16737:
	ldr	r1, .L16755+12
	movw	r0, #:lower16:.LC637
	movt	r0, #:upper16:.LC637
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk
.L16731:
	sub	r6, r6, #1
	cmp	r6, #9
	bhi	.L16741
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r6, r3, r6, lsl #2
	ldr	r2, [r6, #1268]
	b	.L16737
.L16754:
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r7, r3, r7, lsl #2
	ldr	r2, [r7, #1268]
	b	.L16737
.L16756:
	.align	2
.L16755:
	.word	.LANCHOR8-1696
	.word	.LANCHOR4-2112
	.word	.LANCHOR8-1680
	.word	.LANCHOR5+1664
	.word	.LANCHOR5+1648
	.word	.LANCHOR5-3676
	.fnend
	.size	frmnet_disable, .-frmnet_disable
	.align	2
	.global	ghsuart_data_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_connect, %function
ghsuart_data_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16776
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L16770
.L16758:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #84
	movt	r3, #:upper16:.LANCHOR1
	ldr	r1, [r3, #2028]
	mla	r3, r2, r6, r3
	cmp	r6, r1
	ldr	r4, [r3, #2032]
	bhi	.L16771
	cmp	r4, #0
	cmpne	r5, #0
	beq	.L16772
	ldr	r3, [r4, #16]
	add	r7, r4, #72
	add	r6, r4, #104
	mov	r0, r7
	cmp	r3, #0
	beq	.L16773
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #84]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #88]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR6
	movt	r3, #:upper16:.LANCHOR6
	ldr	r2, [r3, #-1536]
	ldr	r3, [r3, #-1532]
	str	r2, [r4, #44]
	str	r3, [r4, #76]
	ldr	r3, [r5, #84]
	str	r4, [r3]
	ldr	r3, [r5, #88]
	str	r4, [r3]
.L16763:
	ldr	r3, [r4, #8]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L16774
	ldr	r3, [r4, #12]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L16775
	mov	r3, #1
	mov	r0, r7
	str	r3, [r4, #4]
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r7
	str	r5, [r4, #208]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	mov	r1, r0
	mov	r0, r6
	str	r5, [r4, #204]
	str	r5, [r4, #212]
	bl	_raw_spin_unlock_irqrestore
	add	r1, r4, #112
	ldr	r0, [r4, #108]
	bl	queue_work
.L16757:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L16773:
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #88]
	mov	r1, r0
	mov	r0, r7
	add	r8, r4, #20
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r5, #92]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore
	movw	r3, #:lower16:.LANCHOR6
	mov	r0, r8
	movt	r3, #:upper16:.LANCHOR6
	ldr	r2, [r3, #-1544]
	ldr	r3, [r3, #-1540]
	str	r2, [r4, #44]
	str	r3, [r4, #76]
	ldr	r3, [r5, #88]
	str	r4, [r3]
	ldr	r3, [r5, #92]
	str	r4, [r3]
	bl	_raw_spin_lock_irqsave
	movw	r3, #:lower16:ghsuart_send_controlbits_tomodem
	mov	r1, r0
	movt	r3, #:upper16:ghsuart_send_controlbits_tomodem
	mov	r0, r8
	str	r3, [r5, #140]
	str	r5, [r4, #24]
	bl	_raw_spin_unlock_irqrestore
	b	.L16763
.L16770:
	movw	r1, #:lower16:.LC612
	sub	r0, r3, #32
	ldr	r2, .L16776+4
	movt	r1, #:upper16:.LC612
	mov	r3, r6
	bl	__dynamic_pr_debug
	b	.L16758
.L16775:
	movw	r0, #:lower16:.LC389
	ldr	r1, .L16776+4
	movt	r0, #:upper16:.LC389
	ldr	r2, [r4, #12]
	bl	printk
	ldr	r0, [r4, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L16757
.L16772:
	movw	r0, #:lower16:.LC105
	ldr	r1, .L16776+4
	mvn	r5, #18
	movt	r0, #:upper16:.LC105
	bl	printk
	b	.L16757
.L16771:
	movw	r0, #:lower16:.LC176
	mov	r2, r6
	ldr	r1, .L16776+4
	movt	r0, #:upper16:.LC176
	mvn	r5, #18
	bl	printk
	b	.L16757
.L16774:
	movw	r0, #:lower16:.LC388
	ldr	r1, .L16776+4
	movt	r0, #:upper16:.LC388
	ldr	r2, [r4, #8]
	bl	printk
	b	.L16757
.L16777:
	.align	2
.L16776:
	.word	.LANCHOR8-1648
	.word	.LANCHOR5+1688
	.fnend
	.size	ghsuart_data_connect, .-ghsuart_data_connect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	frmnet_set_alt, %function
frmnet_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16864
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r2, [r3, #-6]
	.pad #16
	sub	sp, sp, #16
	ldr	r4, [r0, #128]
	tst	r2, #4
	bne	.L16857
.L16779:
	ldr	r2, [r5, #136]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L16780
	ldr	r0, .L16864+4
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L16858
.L16781:
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r5, #136]
.L16780:
	mov	r1, r5
	ldr	r0, [r4]
	bl	config_ep_by_speed
	subs	r7, r0, #0
	bne	.L16859
	ldr	r3, [r5, #136]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r7, r0, #0
	bne	.L16860
	ldr	r3, [r5, #136]
	str	r5, [r3]
	ldr	r2, [r5, #84]
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L16785
	ldr	r3, [r5, #88]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L16785
.L16786:
	mov	r3, #1
	mov	r6, r5
	str	r3, [r5, #120]
	ldr	r4, [r6, #144]!
	cmp	r6, r4
	beq	.L16778
.L16817:
	mov	r0, r5
	bl	frmnet_ctrl_response_available
	ldr	r4, [r4]
	cmp	r6, r4
	bne	.L16817
.L16778:
	mov	r0, r7
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L16785:
	mov	r1, r5
	ldr	r0, [r4]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L16788
	mov	r1, r5
	ldr	r0, [r4]
	ldr	r2, [r5, #88]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L16788
	ldr	r3, .L16864+8
	movw	r4, #:lower16:.LANCHOR1
	ldrb	r0, [r5, #116]	@ zero_extendqisi2
	movt	r4, #:upper16:.LANCHOR1
	ldr	r2, [r5, #128]
	ldrh	r1, [r3, #-6]
	lsl	r3, r0, #1
	ldr	r9, [r2]
	add	r2, r3, r0
	add	r2, r4, r2, lsl #3
	tst	r1, #4
	ldr	r6, [r2, #3240]
	ldr	r8, [r2, #3244]
	bne	.L16861
.L16789:
	add	r1, r3, r0
	sub	r2, r8, #3
	add	r1, r4, r1, lsl #3
	ldr	r1, [r1, #3252]
	cmp	r2, #7
	ldrls	pc, [pc, r2, asl #2]
	b	.L16792
.L16794:
	.word	.L16798
	.word	.L16797
	.word	.L16792
	.word	.L16792
	.word	.L16792
	.word	.L16796
	.word	.L16795
	.word	.L16793
.L16795:
	mov	r0, r5
	bl	ghsuart_ctrl_connect
	subs	r2, r0, #0
	bne	.L16802
.L16856:
	ldrb	r0, [r5, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
.L16793:
	add	r3, r3, r0
	add	r4, r4, r3, lsl #3
	sub	r2, r6, #5
	ldr	r4, [r4, #3248]
	cmp	r2, #5
	ldrls	pc, [pc, r2, asl #2]
	b	.L16804
.L16805:
	.word	.L16810
	.word	.L16809
	.word	.L16808
	.word	.L16807
	.word	.L16806
	.word	.L16821
.L16859:
	ldr	r2, [r5, #136]
	mov	r0, #0
	movw	r1, #:lower16:.LC1032
	movt	r1, #:upper16:.LC1032
	mov	r3, r7
	str	r0, [r2, #28]
	ldr	r0, [r4]
	ldr	r2, [r5, #136]
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err
	b	.L16778
.L16796:
	mov	r0, r5
	bl	ghsic_ctrl_connect
	subs	r2, r0, #0
	beq	.L16856
	movw	r0, #:lower16:.LC1287
	ldr	r1, .L16864+12
	mov	r7, r2
	movt	r0, #:upper16:.LC1287
	bl	printk
	b	.L16786
.L16797:
	mov	r0, r5
	bl	gqti_ctrl_connect
	subs	r2, r0, #0
	beq	.L16856
	movw	r0, #:lower16:.LC1286
	ldr	r1, .L16864+12
	mov	r7, r2
	movt	r0, #:upper16:.LC1286
	bl	printk
	b	.L16786
.L16798:
	mov	r0, r5
	bl	gsmd_ctrl_connect
	subs	r2, r0, #0
	beq	.L16856
	movw	r0, #:lower16:.LC1285
	ldr	r1, .L16864+12
	mov	r7, r2
	movt	r0, #:upper16:.LC1285
	bl	printk
	b	.L16786
.L16821:
	mov	r7, #0
	b	.L16786
.L16806:
	mov	r1, r4
	mov	r0, r5
	bl	ghsuart_data_connect
	subs	r7, r0, #0
	beq	.L16786
	movw	r0, #:lower16:.LC1292
	mov	r2, r7
	ldr	r1, .L16864+12
	movt	r0, #:upper16:.LC1292
	bl	printk
	mov	r1, r4
	mov	r0, r5
	bl	ghsuart_ctrl_disconnect
	b	.L16786
.L16807:
	mov	r1, r4
	mov	r0, r5
	bl	ghsic_data_connect
	subs	r7, r0, #0
	beq	.L16786
	movw	r0, #:lower16:.LC1291
	mov	r2, r7
	ldr	r1, .L16864+12
	movt	r0, #:upper16:.LC1291
	bl	printk
	mov	r1, r4
	mov	r0, r5
	bl	ghsic_ctrl_disconnect
	b	.L16786
.L16808:
	mov	r3, r4
	mov	r2, #0
	ldr	r0, [r9, #28]
	mov	r1, #2
	uxtb	r10, r4
	bl	usb_bam_get_connection_idx
	mov	r6, r0
	mov	r3, r4
	ldr	r0, [r9, #28]
	mov	r2, #1
	mov	r1, #2
	bl	usb_bam_get_connection_idx
	orrs	r3, r0, r6
	bmi	.L16862
	uxtb	r0, r0
	uxtb	r3, r6
	mov	r2, #7
	mov	r1, r10
	str	r0, [sp]
	mov	r0, r5
	bl	gbam_connect
	subs	r4, r0, #0
	beq	.L16786
	movw	r0, #:lower16:.LC1290
	mov	r2, r4
	ldr	r1, .L16864+12
	movt	r0, #:upper16:.LC1290
	bl	printk
	cmp	r8, #4
	bne	.L16815
	mov	r0, r5
	mov	r7, r4
	bl	gqti_ctrl_disconnect
	b	.L16786
.L16809:
	mov	r2, #0
	mov	r3, r4
	ldr	r0, [r9, #28]
	mov	r1, r2
	uxtb	r8, r4
	bl	usb_bam_get_connection_idx
	mov	r7, r0
	mov	r3, r4
	ldr	r0, [r9, #28]
	mov	r2, #1
	mov	r1, #0
	bl	usb_bam_get_connection_idx
	orrs	r3, r0, r7
	bmi	.L16811
	uxtb	r3, r7
	uxtb	r1, r0
.L16812:
	str	r1, [sp]
	mov	r2, r6
	mov	r0, r5
	mov	r1, r8
	bl	gbam_connect
	subs	r7, r0, #0
	beq	.L16786
	movw	r0, #:lower16:.LC1290
	mov	r2, r7
	ldr	r1, .L16864+12
	movt	r0, #:upper16:.LC1290
	bl	printk
	mov	r1, r8
	mov	r0, r5
	bl	gsmd_ctrl_disconnect
	b	.L16786
.L16810:
	mov	r1, #0
	uxtb	r8, r4
	mov	r3, r1
	b	.L16812
.L16857:
	ldrb	ip, [r0, #116]	@ zero_extendqisi2
	movw	r1, #:lower16:.LC152
	sub	r0, r3, #24
	movt	r1, #:upper16:.LC152
	mov	r3, r5
	ldr	r2, .L16864+16
	str	ip, [sp]
	bl	__dynamic_pr_debug
	b	.L16779
.L16858:
	movw	r1, #:lower16:.LC1284
	ldr	r2, .L16864+16
	sub	r0, r0, #32
	ldrb	r3, [r5, #116]	@ zero_extendqisi2
	movt	r1, #:upper16:.LC1284
	bl	__dynamic_pr_debug
	ldr	r2, [r5, #136]
	b	.L16781
.L16861:
	sub	r2, r8, #1
	cmp	r2, #9
	movwhi	r3, #:lower16:.LC186
	movthi	r3, #:upper16:.LC186
	bhi	.L16790
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r3, r3, r2, lsl #2
	ldr	r3, [r3, #1268]
.L16790:
	sub	r1, r6, #1
	cmp	r1, #9
	movwhi	r2, #:lower16:.LC186
	movthi	r2, #:upper16:.LC186
	bhi	.L16791
	movw	r2, #:lower16:.LANCHOR3
	movt	r2, #:upper16:.LANCHOR3
	add	r2, r2, r1, lsl #2
	ldr	r2, [r2, #1268]
.L16791:
	movw	r1, #:lower16:.LC1283
	stm	sp, {r2, r5}
	ldr	r2, .L16864+12
	movt	r1, #:upper16:.LC1283
	str	r0, [sp, #8]
	ldr	r0, .L16864+20
	bl	__dynamic_pr_debug
	ldrb	r0, [r5, #116]	@ zero_extendqisi2
	lsl	r3, r0, #1
	b	.L16789
.L16788:
	ldr	r2, [r5, #84]
	mov	r3, #0
	mvn	r7, #21
	str	r3, [r2, #28]
	ldr	r2, [r5, #88]
	str	r3, [r2, #28]
	b	.L16778
.L16860:
	ldr	r2, [r5, #136]
	movw	r0, #:lower16:.LC1046
	mov	r3, r7
	ldr	r1, .L16864+16
	movt	r0, #:upper16:.LC1046
	ldr	r2, [r2, #4]
	bl	printk
	b	.L16778
.L16862:
	movw	r0, #:lower16:.LC1289
	ldr	r1, .L16864+12
	mov	r7, #0
	movt	r0, #:upper16:.LC1289
	bl	printk
	mov	r1, r10
	mov	r0, r5
	bl	gsmd_ctrl_disconnect
	b	.L16786
.L16815:
	mov	r1, r10
	mov	r0, r5
	mov	r7, r4
	bl	gsmd_ctrl_disconnect
	b	.L16786
.L16811:
	movw	r0, #:lower16:.LC1289
	ldr	r1, .L16864+12
	mov	r7, #0
	movt	r0, #:upper16:.LC1289
	bl	printk
	mov	r1, r8
	mov	r0, r5
	bl	gsmd_ctrl_disconnect
	b	.L16786
.L16792:
	sub	r8, r8, #1
	cmp	r8, #9
	bls	.L16863
.L16822:
	movw	r2, #:lower16:.LC186
	movt	r2, #:upper16:.LC186
.L16816:
	movw	r0, #:lower16:.LC637
	ldr	r1, .L16864+12
	mvn	r7, #18
	movt	r0, #:upper16:.LC637
	bl	printk
	b	.L16786
.L16804:
	sub	r6, r6, #1
	cmp	r6, #9
	bhi	.L16822
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r6, r3, r6, lsl #2
	ldr	r2, [r6, #1268]
	b	.L16816
.L16863:
	movw	r3, #:lower16:.LANCHOR3
	movt	r3, #:upper16:.LANCHOR3
	add	r3, r3, r8, lsl #2
	ldr	r2, [r3, #1268]
	b	.L16816
.L16802:
	movw	r0, #:lower16:.LC1288
	ldr	r1, .L16864+12
	mov	r7, r2
	movt	r0, #:upper16:.LC1288
	bl	printk
	b	.L16786
.L16865:
	.align	2
.L16864:
	.word	.LANCHOR8-1632
	.word	.LANCHOR8-1600
	.word	.LANCHOR8-1584
	.word	.LANCHOR5+1728
	.word	.LANCHOR5+1712
	.word	.LANCHOR8-1608
	.fnend
	.size	frmnet_set_alt, .-frmnet_set_alt
	.align	2
	.global	ghsuart_data_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	ghsuart_data_setup, %function
ghsuart_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r3, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	movw	r9, #:lower16:.LANCHOR1
	movt	r9, #:upper16:.LANCHOR1
	strd	r10, [sp, #24]
	ldr	r2, [r9, #2028]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	str	r1, [sp, #8]
	add	r10, r2, r0
	str	r2, [sp, #20]
	cmp	r10, #4
	str	r2, [sp, #24]
	movle	r1, #0
	movgt	r1, #1
	cmp	r0, #0
	moveq	r1, #1
	cmp	r1, #0
	bne	.L16889
	ldr	r2, .L16895
	ldrh	r2, [r2, #-14]
	tst	r2, #4
	bne	.L16890
.L16869:
	ldr	r7, [sp, #20]
	cmp	r7, r10
	bge	.L16866
	mov	r3, #84
	ldr	r2, [sp, #8]
	movw	fp, #:lower16:kmalloc_caches
	movt	fp, #:upper16:kmalloc_caches
	mul	r3, r3, r7
	cmp	r2, #0
	movw	r2, #:lower16:.LC753
	add	r6, r3, #4
	str	r3, [sp, #28]
	ldr	r3, .L16895+4
	moveq	r1, #11
	movne	r1, #10
	movt	r2, #:upper16:.LC753
	str	r1, [sp, #12]
	add	r6, r3, r6
	str	r2, [sp, #16]
	b	.L16875
.L16893:
	mov	r2, #216
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L16871
.L16870:
	ldr	r3, .L16895+8
	mov	r5, #0
	mov	r2, #1
	mov	r1, #10
	str	r5, [sp]
	ldr	r8, [r3, r7, lsl #2]
	mov	r3, r5
	mov	r0, r8
	bl	__alloc_workqueue_key
	cmp	r0, r5
	str	r0, [r4, #108]
	beq	.L16891
	ldr	r2, .L16895+12
	add	r0, r4, #32
	str	r7, [r4]
	str	r5, [r4, #20]
	ldr	r1, [sp, #16]
	str	r5, [r4, #28]
	str	r5, [r4, #104]
	str	r5, [r4, #72]
	bl	__init_waitqueue_head
	movw	r0, #:lower16:ghsuart_data_write_tomdm
	movw	r3, #:lower16:ghsuart_data_disconnect_w
	ldr	r2, [sp, #8]
	movt	r0, #:upper16:ghsuart_data_write_tomdm
	movt	r3, #:upper16:ghsuart_data_disconnect_w
	movw	lr, #:lower16:ghsuart_data_connect_w
	movw	ip, #:lower16:ghsuart_data_write_tohost
	movt	lr, #:upper16:ghsuart_data_connect_w
	movw	r1, #:lower16:ghsuart_data_probe
	str	r0, [r4, #156]
	add	r0, r4, #132
	movt	ip, #:upper16:ghsuart_data_write_tohost
	str	r3, [r4, #140]
	mov	r3, #2560
	movt	r1, #:upper16:ghsuart_data_probe
	str	r2, [r4, #16]
	movw	r2, #:lower16:ghsuart_data_remove
	str	r0, [r4, #132]
	movt	r2, #:upper16:ghsuart_data_remove
	str	r0, [r4, #136]
	add	r0, r4, #148
	str	lr, [r4, #124]
	add	lr, r4, #116
	str	r3, [r4, #112]
	str	r3, [r4, #128]
	str	r3, [r4, #144]
	str	r3, [r4, #160]
	add	r3, r4, #80
	str	r0, [r4, #148]
	str	r0, [r4, #152]
	add	r0, r4, #48
	str	r0, [r4, #48]
	str	r0, [r4, #52]
	add	r0, r4, #56
	str	r3, [r4, #80]
	str	r3, [r4, #84]
	ldr	r3, [sp, #12]
	str	r0, [r4, #56]
	str	r0, [r4, #60]
	add	r0, r4, #88
	str	lr, [r4, #116]
	str	lr, [r4, #120]
	add	lr, r4, #164
	str	r5, [r4, #64]
	str	r5, [r4, #68]
	str	r0, [r4, #88]
	str	r0, [r4, #92]
	mov	r0, r6
	str	r5, [r4, #96]
	str	r5, [r4, #100]
	str	lr, [r4, #164]
	str	lr, [r4, #168]
	str	ip, [r4, #172]
	str	r4, [r4, #176]
	str	r3, [r4, #180]
	str	r4, [r6, #-4]
	stm	r6, {r1, r2}
	str	r8, [r6, #20]
	str	r5, [r6, #28]
	bl	platform_driver_register
	ldr	r3, .L16895+16
	ldrh	r3, [r3]
	tst	r3, #4
	bne	.L16892
	add	r7, r7, #1
	add	r6, r6, #84
	cmp	r10, r7
	ble	.L16866
.L16875:
	ldr	r0, [fp, #32]
	ldr	r3, [r9, #2028]
	cmp	r0, #0
	add	r3, r3, #1
	str	r3, [r9, #2028]
	bne	.L16893
	mov	r4, #16
	b	.L16870
.L16892:
	ldr	r0, .L16895
	movw	r1, #:lower16:.LC1254
	mov	r3, r4
	ldr	r2, .L16895+20
	movt	r1, #:upper16:.LC1254
	str	r7, [sp]
	add	r7, r7, #1
	add	r6, r6, #84
	sub	r0, r0, #8
	bl	__dynamic_pr_debug
	cmp	r10, r7
	bgt	.L16875
.L16866:
	ldr	r0, [sp, #20]
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16890:
	ldr	r0, .L16895
	movw	r1, #:lower16:.LC1281
	ldr	r2, .L16895+24
	movt	r1, #:upper16:.LC1281
	sub	r0, r0, #32
	bl	__dynamic_pr_debug
	b	.L16869
.L16891:
	movw	r0, #:lower16:.LC1279
	mov	r2, r8
	ldr	r1, .L16895+20
	movt	r0, #:upper16:.LC1279
	bl	printk
	mov	r0, r4
	bl	kfree
.L16871:
	ldr	r3, [r9, #2028]
	movw	r0, #:lower16:.LC1253
	mov	r2, r7
	ldr	r1, .L16895+4
	movt	r0, #:upper16:.LC1253
	ldr	ip, [sp, #28]
	sub	r3, r3, #1
	add	r4, r1, ip
	ldr	r1, .L16895+24
	str	r3, [r9, #2028]
	bl	printk
	ldr	r5, [sp, #20]
.L16874:
	ldr	r3, [r9, #2028]
	add	r6, r4, #84
	cmp	r5, r3
	bcs	.L16894
	ldr	r7, [r6, #-84]
	add	r5, r5, #1
	ldr	r0, [r7, #108]
	bl	destroy_workqueue
	mov	r0, r7
	bl	kfree
	add	r0, r4, #4
	mov	r4, r6
	bl	platform_driver_unregister
	b	.L16874
.L16889:
	mov	r2, r3
	movw	r0, #:lower16:.LC1271
	ldr	r1, .L16895+24
	mvn	r3, #21
	movt	r0, #:upper16:.LC1271
	str	r3, [sp, #20]
	bl	printk
	b	.L16866
.L16894:
	mvn	r3, #11
	str	r3, [sp, #20]
	ldr	r3, [sp, #24]
	str	r3, [r9, #2028]
	b	.L16866
.L16896:
	.align	2
.L16895:
	.word	.LANCHOR8-1552
	.word	.LANCHOR1+2032
	.word	.LANCHOR5+1768
	.word	.LANCHOR1+3972
	.word	.LANCHOR8-1542
	.word	.LANCHOR5+1776
	.word	.LANCHOR5+1748
	.fnend
	.size	ghsuart_data_setup, .-ghsuart_data_setup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rmnet_function_bind_config, %function
rmnet_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 136
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r3, #:lower16:__stack_chk_guard
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	movt	r3, #:upper16:__stack_chk_guard
	movt	r6, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	mov	r9, r1
	strd	r10, [sp, #24]
	ldr	r8, [r6, #4056]
	str	lr, [sp, #32]
	.pad #172
	sub	sp, sp, #172
	str	r3, [sp, #32]
	ldr	r3, [r3]
	cmp	r8, #0
	str	r3, [sp, #164]
	beq	.L17031
.L16898:
	ldr	r3, [r6, #4060]
	cmp	r3, #0
	ble	.L16973
	ldr	r7, .L17050
	mov	r5, #0
	ldr	r10, .L17050+4
	b	.L16963
.L16964:
	ldr	r2, [r6, #3548]
	cmp	r2, r5
	bls	.L17032
.L16965:
	movw	r2, #:lower16:.LANCHOR6
	movt	r2, #:upper16:.LANCHOR6
	ldrb	r3, [r2, #-1528]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L16967
	ldr	r1, [r9, #24]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L17033
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #-1528]
	strb	r3, [r1, #48]
.L16967:
	ldr	r4, [r7, #20]
	add	r8, r4, #132
	mov	r0, r8
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r9, #24]
	movw	r1, #:lower16:.LC1302
	mov	fp, r0
	movt	r1, #:upper16:.LC1302
	mov	r2, r5
	mov	r0, #32
	str	r3, [r4, #128]
	bl	kasprintf
	mov	r1, fp
	str	r0, [r4]
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore
	ldr	r3, [r4]
	cmp	r3, #0
	beq	.L17034
	ldr	r3, .L17050+8
	movw	r1, #:lower16:frmnet_bind
	movw	ip, #:lower16:frmnet_unbind
	movw	r2, #:lower16:frmnet_set_alt
	movt	r1, #:upper16:frmnet_bind
	movt	ip, #:upper16:frmnet_unbind
	movt	r2, #:upper16:frmnet_set_alt
	movw	lr, #:lower16:frmnet_disable
	movw	r0, #:lower16:frmnet_resume
	str	r3, [r4, #4]
	movw	r3, #:lower16:frmnet_setup
	movt	lr, #:upper16:frmnet_disable
	movt	r3, #:upper16:frmnet_setup
	str	r1, [r4, #32]
	movw	r1, #:lower16:frmnet_suspend
	str	ip, [r4, #36]
	movw	ip, #:lower16:frmnet_send_cpkt_response
	movt	r0, #:upper16:frmnet_resume
	str	r2, [r4, #40]
	movw	r2, #:lower16:frmnet_disconnect
	movt	r1, #:upper16:frmnet_suspend
	movt	ip, #:upper16:frmnet_send_cpkt_response
	movt	r2, #:upper16:frmnet_disconnect
	str	lr, [r4, #48]
	str	r3, [r4, #52]
	movw	r3, #:lower16:frmnet_connect
	movt	r3, #:upper16:frmnet_connect
	str	r1, [r4, #56]
	mov	r1, r4
	str	r0, [r4, #60]
	mov	r0, r9
	str	ip, [r4, #92]
	str	r2, [r4, #104]
	str	r3, [r4, #108]
	bl	usb_add_function
	cmp	r0, #0
	bne	.L17035
	ldr	r3, .L17050+12
	ldrh	r3, [r3]
	tst	r3, #4
	bne	.L17036
.L16971:
	ldr	r3, [r6, #4060]
	add	r5, r5, #1
	add	r7, r7, #24
	cmp	r3, r5
	ble	.L16973
.L16963:
	ldrh	r3, [r10, #-14]
	tst	r3, #4
	beq	.L16964
	movw	r1, #:lower16:.LC1299
	ldr	r2, .L17050+16
	mov	r3, r9
	ldr	r0, .L17050+20
	movt	r1, #:upper16:.LC1299
	bl	__dynamic_pr_debug
	ldr	r2, [r6, #3548]
	cmp	r2, r5
	bhi	.L16965
.L17032:
	movw	r0, #:lower16:.LC1300
	ldr	r1, .L17050+16
	mov	r3, r5
	movt	r0, #:upper16:.LC1300
	mvn	r8, #18
	bl	printk
	b	.L16966
.L17036:
	movw	r1, #:lower16:.LC1305
	ldr	r2, .L17050+16
	sub	r0, r10, #8
	movt	r1, #:upper16:.LC1305
	bl	__dynamic_pr_debug
	b	.L16971
.L16973:
.L16931:
	mov	r8, #0
.L16897:
	ldr	r3, [sp, #32]
	mov	r0, r8
	ldr	r2, [sp, #164]
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L17037
	add	sp, sp, #172
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L17031:
	mov	r3, #1
	ldr	r1, .L17050+24
	mov	r2, #50
	add	r0, sp, #64
	movw	r4, #:lower16:.LC487
	str	r3, [r6, #4056]
	movt	r4, #:upper16:.LC487
	bl	strlcpy
	add	r0, sp, #64
	bl	strim
	mov	r2, #50
	add	r1, r6, #3072
	str	r0, [sp, #56]
	add	r0, sp, #114
	bl	strlcpy
	add	r0, sp, #114
	str	r8, [sp, #40]
	bl	strim
	str	r0, [sp, #60]
	b	.L16900
.L16932:
	mov	r1, r4
	add	r0, sp, #56
	bl	strsep
	mov	r5, r0
	mov	r1, r4
	add	r0, sp, #56
	bl	strsep
	cmp	r5, #0
	cmpne	r0, #0
	mov	r7, r0
	bne	.L17038
.L16900:
	ldr	r3, [sp, #56]
	cmp	r3, #0
	bne	.L16932
	ldr	ip, .L17050+20
	ldr	r0, [r6, #3564]
	ldr	r2, [r6, #3568]
	ldrh	r3, [ip, #-6]
	tst	r3, #4
	bne	.L17039
.L16933:
	orrs	r3, r0, r2
	bne	.L16934
.L16938:
	ldr	r1, [r6, #3556]
	cmp	r1, #0
	bne	.L17040
.L16936:
	ldr	r0, [r6, #3576]
	cmp	r0, #0
	bne	.L17041
.L16940:
	ldr	r0, [r6, #3572]
	cmp	r0, #0
	bne	.L17042
.L16945:
	ldr	r0, [r6, #3584]
	cmp	r0, #0
	bne	.L17043
.L16950:
	ldr	r0, [r6, #3580]
	cmp	r0, #0
	beq	.L16898
	mov	r1, #1
	bl	ghsuart_ctrl_setup
	subs	r8, r0, #0
	blt	.L16937
	ldr	r3, [r6, #3548]
	cmp	r3, #0
	beq	.L16898
	ldr	r2, [r6, #3244]
	cmp	r2, #9
	streq	r8, [r6, #3252]
	addeq	r8, r8, #1
	cmp	r3, #1
	bls	.L16898
	ldr	r2, [r6, #3268]
	cmp	r2, #9
	streq	r8, [r6, #3276]
	addeq	r8, r8, #1
	cmp	r3, #2
	beq	.L16898
	ldr	r3, [r6, #3292]
	cmp	r3, #9
	streq	r8, [r6, #3300]
	b	.L16898
.L16934:
	mov	r1, r2
	bl	gbam_setup
	subs	r8, r0, #0
	beq	.L16938
.L16937:
	movw	r0, #:lower16:.LC1307
	ldr	r1, .L17050+28
	movt	r0, #:upper16:.LC1307
	bl	printk
	b	.L16897
.L17038:
	ldr	r3, [sp, #60]
	cmp	r3, #0
	beq	.L16901
	mov	r1, r4
	add	r0, sp, #60
	bl	strsep
	str	r0, [sp, #40]
.L16901:
	ldr	r3, [r6, #3548]
	cmp	r3, #2
	bhi	.L17044
	ldr	r0, .L17050+32
	ldrh	r2, [r0]
	tst	r2, #4
	bne	.L17045
.L16904:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L16976
	mov	r2, #160
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r2, r0, #0
	beq	.L17046
.L16905:
	ldr	r10, [r6, #3548]
	mov	r1, #0
	add	r3, r2, #144
	mov	r0, r5
	str	r1, [r2, #132]
	lsl	r1, r10, #1
	str	r3, [r2, #144]
	str	r3, [r2, #148]
	add	r3, r1, r10
	add	fp, r6, r3, lsl #3
	strb	r10, [r2, #116]
	str	r1, [sp, #36]
	str	r10, [fp, #3256]
	str	r2, [fp, #3260]
	bl	str_to_xport
	mov	r2, r0
	mov	r0, r7
	str	r2, [fp, #3244]
	str	r2, [sp, #44]
	bl	str_to_xport
	ldr	r2, [sp, #44]
	str	r0, [fp, #3240]
	sub	r1, r2, #3
	cmp	r1, #7
	ldrls	pc, [pc, r1, asl #2]
	b	.L16906
.L16908:
	.word	.L16912
	.word	.L16911
	.word	.L16906
	.word	.L16906
	.word	.L16906
	.word	.L16910
	.word	.L16909
	.word	.L16907
.L16976:
	mov	r2, #16
	b	.L16905
.L17041:
	mov	r1, #1
	bl	ghsic_data_setup
	subs	r8, r0, #0
	blt	.L16937
	ldr	r3, [r6, #3548]
	cmp	r3, #0
	beq	.L16940
	ldr	r2, [r6, #3240]
	cmp	r2, #8
	streq	r8, [r6, #3248]
	addeq	r8, r8, #1
	cmp	r3, #1
	bls	.L16940
	ldr	r2, [r6, #3264]
	cmp	r2, #8
	streq	r8, [r6, #3272]
	addeq	r8, r8, #1
	cmp	r3, #2
	beq	.L16940
	ldr	r3, [r6, #3288]
	cmp	r3, #8
	streq	r8, [r6, #3296]
	b	.L16940
.L17042:
	mov	r1, #1
	bl	ghsic_ctrl_setup
	subs	r8, r0, #0
	blt	.L16937
	ldr	r3, [r6, #3548]
	cmp	r3, #0
	beq	.L16945
	ldr	r2, [r6, #3244]
	cmp	r2, #8
	streq	r8, [r6, #3252]
	addeq	r8, r8, #1
	cmp	r3, #1
	bls	.L16945
	ldr	r2, [r6, #3268]
	cmp	r2, #8
	streq	r8, [r6, #3276]
	addeq	r8, r8, #1
	cmp	r3, #2
	beq	.L16945
	ldr	r3, [r6, #3292]
	cmp	r3, #8
	streq	r8, [r6, #3300]
	b	.L16945
.L16910:
	ldr	r2, [r6, #4048]
	cmp	r2, #3
	bhi	.L17047
	ldr	r3, .L17050+36
	mov	r0, #104
	ldr	r1, [sp, #40]
	mla	r2, r0, r2, r3
	cmp	r1, #0
	moveq	r1, r5
	add	r0, r2, #84
	mov	r2, #20
	bl	strlcpy
	ldr	r3, .L17050+36
	mov	ip, #104
	movw	r1, #:lower16:.LC1278
	ldr	r0, [r6, #4048]
	movt	r1, #:upper16:.LC1278
	mov	r2, #20
	mla	r0, ip, r0, r3
	add	r0, r0, #84
	bl	strlcat
	ldr	r3, [r6, #4048]
	add	r3, r3, #1
	str	r3, [r6, #4048]
.L16914:
	ldr	r3, [sp, #36]
	ldr	r2, [r6, #3572]
	add	r3, r3, r10
	add	r3, r6, r3, lsl #3
	add	r1, r2, #1
	ldr	r0, [r3, #3240]
	str	r1, [r6, #3572]
	str	r2, [r3, #3252]
.L16907:
	sub	r3, r0, #5
	cmp	r3, #5
	ldrls	pc, [pc, r3, asl #2]
	b	.L16918
.L16920:
	.word	.L16924
	.word	.L16923
	.word	.L16923
	.word	.L16922
	.word	.L16921
	.word	.L16919
.L16922:
	ldr	r2, [r6, #4052]
	cmp	r2, #3
	bhi	.L17048
	ldr	r5, .L17050+40
	mov	r0, #104
	ldr	r3, [sp, #40]
	mla	r2, r0, r2, r5
	cmp	r3, #0
	movne	r1, r3
	moveq	r1, r7
	add	r0, r2, #84
	mov	r2, #20
	bl	strlcpy
	ldr	r0, [r6, #4052]
	mov	r3, #104
	movw	r1, #:lower16:.LC1280
	movt	r1, #:upper16:.LC1280
	mov	r2, #20
	mla	r0, r3, r0, r5
	add	r0, r0, #84
	bl	strlcat
	ldr	r3, [r6, #4052]
	add	r3, r3, #1
	str	r3, [r6, #4052]
.L16926:
	ldr	r3, [sp, #36]
	ldr	r2, [r6, #3576]
	add	r3, r3, r10
	add	r3, r6, r3, lsl #3
	add	r1, r2, #1
	str	r1, [r6, #3576]
	str	r2, [r3, #3248]
.L16919:
	ldr	r2, [r6, #3548]
	ldr	r3, [r6, #4060]
	add	r2, r2, #1
	add	r3, r3, #1
	str	r2, [r6, #3548]
	str	r3, [r6, #4060]
	b	.L16900
.L16921:
	ldr	r3, [sp, #36]
	ldr	r2, [r6, #3584]
	add	r3, r3, r10
	add	r3, r6, r3, lsl #3
	add	r1, r2, #1
	str	r1, [r6, #3584]
	str	r2, [r3, #3248]
	b	.L16919
.L16923:
	ldr	r3, [sp, #36]
	ldr	r2, [r6, #3568]
	add	r3, r3, r10
	add	r3, r6, r3, lsl #3
	add	r1, r2, #1
	str	r1, [r6, #3568]
	str	r2, [r3, #3248]
	b	.L16919
.L16924:
	ldr	r3, [sp, #36]
	ldr	r2, [r6, #3564]
	add	r3, r3, r10
	add	r3, r6, r3, lsl #3
	add	r1, r2, #1
	str	r1, [r6, #3564]
	str	r2, [r3, #3248]
	b	.L16919
.L16909:
	ldr	r3, [sp, #36]
	ldr	r2, [r6, #3580]
	add	r3, r3, r10
	add	r3, r6, r3, lsl #3
	add	r1, r2, #1
	str	r1, [r6, #3580]
	str	r2, [r3, #3252]
	b	.L16907
.L16911:
	ldr	r3, [sp, #36]
	ldr	r2, [r6, #3560]
	add	r3, r3, r10
	add	r3, r6, r3, lsl #3
	add	r1, r2, #1
	str	r1, [r6, #3560]
	str	r2, [r3, #3252]
	b	.L16907
.L16912:
	ldr	r3, [sp, #36]
	ldr	r2, [r6, #3556]
	add	r3, r3, r10
	add	r3, r6, r3, lsl #3
	add	r1, r2, #1
	str	r1, [r6, #3556]
	str	r2, [r3, #3252]
	b	.L16907
.L17040:
	add	r2, sp, #55
	mov	r0, #0
	bl	gsmd_ctrl_setup
	subs	r8, r0, #0
	bne	.L16937
	ldr	r3, [r6, #3548]
	cmp	r3, #0
	beq	.L16936
	ldr	r1, [r6, #3260]
	ldrb	r2, [sp, #55]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L16941
	ldrb	r0, [r1, #116]	@ zero_extendqisi2
	add	r0, r2, r0
	strb	r0, [r1, #116]
.L16941:
	cmp	r3, #1
	bls	.L16936
	ldr	r1, [r6, #3284]
	cmp	r1, #0
	beq	.L16942
	ldrb	r0, [r1, #116]	@ zero_extendqisi2
	add	r0, r2, r0
	strb	r0, [r1, #116]
.L16942:
	cmp	r3, #2
	beq	.L16936
	ldr	r3, [r6, #3308]
	cmp	r3, #0
	beq	.L16936
	ldrb	r1, [r3, #116]	@ zero_extendqisi2
	add	r2, r2, r1
	strb	r2, [r3, #116]
	b	.L16936
.L17043:
	mov	r1, #1
	bl	ghsuart_data_setup
	subs	r8, r0, #0
	blt	.L16937
	ldr	r3, [r6, #3548]
	cmp	r3, #0
	beq	.L16950
	ldr	r2, [r6, #3240]
	cmp	r2, #9
	streq	r8, [r6, #3248]
	addeq	r8, r8, #1
	cmp	r3, #1
	bls	.L16950
	ldr	r2, [r6, #3264]
	cmp	r2, #9
	streq	r8, [r6, #3272]
	addeq	r8, r8, #1
	cmp	r3, #2
	beq	.L16950
	ldr	r3, [r6, #3288]
	cmp	r3, #9
	streq	r8, [r6, #3296]
	b	.L16950
.L17039:
	mov	r3, r0
	sub	r0, ip, #24
	ldr	r7, [r6, #3548]
	ldr	lr, [r6, #3576]
	movw	r1, #:lower16:.LC1298
	ldr	r5, [r6, #3556]
	movt	r1, #:upper16:.LC1298
	ldr	r4, [r6, #3572]
	ldr	ip, [r6, #3584]
	stm	sp, {r2, lr}
	ldr	r2, [r6, #3580]
	str	r7, [sp, #24]
	str	ip, [sp, #8]
	str	r5, [sp, #12]
	str	r4, [sp, #16]
	str	r2, [sp, #20]
	ldr	r2, .L17050+44
	bl	__dynamic_pr_debug
	ldr	r0, [r6, #3564]
	ldr	r2, [r6, #3568]
	b	.L16933
.L17045:
	movw	r1, #:lower16:.LC1294
	ldr	r2, .L17050+48
	sub	r0, r0, #18
	movt	r1, #:upper16:.LC1294
	stm	sp, {r5, r7}
	bl	__dynamic_pr_debug
	b	.L16904
.L17037:
	bl	__stack_chk_fail
.L17046:
	movw	r0, #:lower16:.LC1295
	ldr	r1, .L17050+48
	mvn	r8, #11
	movt	r0, #:upper16:.LC1295
	bl	printk
.L16903:
	movw	r0, #:lower16:.LC1297
	mov	r3, r7
	ldr	r1, .L17050+28
	mov	r2, r5
	movt	r0, #:upper16:.LC1297
	bl	printk
	b	.L16897
.L17034:
	movw	r0, #:lower16:.LC1303
	ldr	r1, .L17050+16
	mvn	r8, #11
	movt	r0, #:upper16:.LC1303
	bl	printk
.L16966:
	movw	r0, #:lower16:.LC1306
	mov	r2, r5
	ldr	r1, .L17050+28
	movt	r0, #:upper16:.LC1306
	bl	printk
	b	.L16897
.L16906:
	movw	r0, #:lower16:.LC1296
	ldr	r1, .L17050+48
	movt	r0, #:upper16:.LC1296
	bl	printk
.L16917:
	ldr	r4, .L17050
.L16929:
	ldr	r3, [r6, #3548]
	add	r4, r4, #24
	cmp	r3, r8
	bls	.L17049
	ldr	r0, [r4, #-4]
	add	r8, r8, #1
	bl	kfree
	b	.L16929
.L17047:
	movw	r0, #:lower16:.LC1277
	ldr	r1, .L17050+52
	movt	r0, #:upper16:.LC1277
	bl	printk
	b	.L16914
.L17048:
	movw	r0, #:lower16:.LC1277
	ldr	r1, .L17050+56
	movt	r0, #:upper16:.LC1277
	bl	printk
	b	.L16926
.L16918:
	mov	r1, r0
	movw	r0, #:lower16:.LC1296
	mov	r2, r1
	movt	r0, #:upper16:.LC1296
	ldr	r1, .L17050+48
	bl	printk
	b	.L16917
.L17049:
	mov	r3, #0
	mvn	r8, #18
	str	r3, [r6, #3548]
	str	r3, [r6, #3556]
	str	r3, [r6, #3560]
	str	r3, [r6, #3564]
	str	r3, [r6, #3572]
	str	r3, [r6, #3576]
	str	r3, [r6, #3580]
	str	r3, [r6, #3584]
	b	.L16903
.L17033:
	movw	r0, #:lower16:.LC1301
	mvn	r2, #18
	ldr	r1, .L17050+16
	movt	r0, #:upper16:.LC1301
	mov	r8, r2
	bl	printk
	b	.L16966
.L17035:
	mov	r8, r0
	movw	r0, #:lower16:.LC1304
	ldr	r1, .L17050+16
	mov	r2, r8
	movt	r0, #:upper16:.LC1304
	bl	printk
	ldr	r0, [r4]
	bl	kfree
	b	.L16966
.L17044:
	movw	r0, #:lower16:.LC1293
	mov	r2, #3
	ldr	r1, .L17050+48
	movt	r0, #:upper16:.LC1293
	mvn	r8, #21
	bl	printk
	b	.L16903
.L17051:
	.align	2
.L17050:
	.word	.LANCHOR1+3240
	.word	.LANCHOR8-1456
	.word	.LANCHOR6-1512
	.word	.LANCHOR8-1446
	.word	.LANCHOR5+1868
	.word	.LANCHOR8-1488
	.word	.LANCHOR1+3124
	.word	.LANCHOR5+1820
	.word	.LANCHOR8-1518
	.word	.LANCHOR1+1020
	.word	.LANCHOR1+1440
	.word	.LANCHOR5+1848
	.word	.LANCHOR5+1800
	.word	.LANCHOR5+1312
	.word	.LANCHOR5+1424
	.fnend
	.size	rmnet_function_bind_config, .-rmnet_function_bind_config
	.align	2
	.global	notify_control_line_state
	.syntax unified
	.arm
	.fpu softvfp
	.type	notify_control_line_state, %function
notify_control_line_state:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR1
	.save {lr}
	str	lr, [sp, #-4]!
	mov	lr, #1
	movt	ip, #:upper16:.LANCHOR1
	mov	r2, lr
	mov	r1, lr
	mov	r3, #0
	str	lr, [ip, #2200]
	ldr	lr, [sp], #4
	str	r0, [ip, #3600]
	add	r0, ip, #2192
	add	r0, r0, #12
	b	__wake_up
	.fnend
	.size	notify_control_line_state, .-notify_control_line_state
	.section	.text.unlikely
	.align	2
	.global	modem_register
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_register, %function
modem_register:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r2, r0, #0
	push	{r4, lr}
	.save {r4, lr}
	bne	.L17055
	movw	r0, #:lower16:.LC1308
	movt	r0, #:upper16:.LC1308
	bl	printk
	mvn	r0, #0
	pop	{r4, pc}
.L17055:
	movw	r3, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC1309
	movt	r3, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC1309
	str	r2, [r3, #3976]
	bl	printk
	mov	r0, #0
	pop	{r4, pc}
	.fnend
	.size	modem_register, .-modem_register
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_bind, %function
acm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	.pad #16
	sub	sp, sp, #16
	ldr	r7, [r0, #24]
	cmp	r3, #15
	bhi	.L17059
	add	r2, r3, #1
	add	r1, r3, #12
	movw	r5, #:lower16:.LANCHOR6
	mov	r6, r0
	str	r4, [r0, r1, lsl #2]
	movt	r5, #:upper16:.LANCHOR6
	strb	r2, [r0, #44]
	strb	r3, [r4, #144]
	ldrb	r2, [r0, #44]	@ zero_extendqisi2
	strb	r3, [r5, #-2294]
	strb	r3, [r5, #-2270]
	strb	r3, [r5, #-1501]
	cmp	r2, #15
	bhi	.L17059
	add	r1, r2, #12
	add	r3, r2, #1
	str	r4, [r0, r1, lsl #2]
	sub	r1, r5, #1488
	strb	r2, [r5, #-2282]
	strb	r2, [r5, #-1500]
	strb	r2, [r5, #-1492]
	strb	r3, [r0, #44]
	strb	r2, [r4, #145]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss.constprop.166
	cmp	r0, #0
	beq	.L17059
	ldr	r1, .L17119
	str	r0, [r4, #88]
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss.constprop.166
	cmp	r0, #0
	beq	.L17059
	ldr	r1, .L17119+4
	str	r0, [r4, #92]
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig_ss.constprop.166
	subs	r8, r0, #0
	beq	.L17059
	str	r8, [r4, #152]
	ldr	r3, [r8, #8]
	mov	r1, #208
	str	r7, [r8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r9, r0, #0
	beq	.L17060
	mov	r2, #10
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	str	r2, [r9, #4]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r9]
	beq	.L17062
	mov	r1, #208
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	mov	r10, r0
	str	r0, [r9]
	beq	.L17117
.L17062:
	movw	r3, #:lower16:acm_cdc_notify_complete
	str	r9, [r4, #156]
	ldrb	r1, [r5, #-1486]	@ zero_extendqisi2
	movt	r3, #:upper16:acm_cdc_notify_complete
	ldrb	r2, [r5, #-1474]	@ zero_extendqisi2
	ldr	r0, .L17119+8
	str	r3, [r9, #28]
	ldr	r3, [r4, #156]
	strb	r1, [r5, #-1350]
	strb	r2, [r5, #-1338]
	strb	r1, [r5, #-1314]
	ldrb	r1, [r5, #-1462]	@ zero_extendqisi2
	str	r4, [r3, #32]
	ldr	r3, [r4, #20]
	strb	r1, [r5, #-1326]
	ldr	r3, [r3, #24]
	strb	r2, [r5, #-1302]
	ldr	r5, [r3]
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L17066
	ldr	r3, [r5, #20]
	cmp	r3, #2
	bhi	.L17118
.L17064:
	ldr	r3, .L17119+12
	ldrh	r3, [r3, #-14]
	tst	r3, #4
	beq	.L17067
	ldr	r2, [r6, #24]
	ldr	r1, [r7]
	ldrb	r3, [r4, #146]	@ zero_extendqisi2
	ldr	r2, [r2]
	add	r1, r1, #32
	ldr	r2, [r2, #20]
	cmp	r2, #4
	movwhi	ip, #:lower16:.LC1013
	movthi	ip, #:upper16:.LC1013
	bhi	.L17068
	movw	r0, #:lower16:.LC944
	movw	ip, #:lower16:.LC943
	movt	r0, #:upper16:.LC944
	cmp	r2, #2
	movt	ip, #:upper16:.LC943
	movls	ip, r0
.L17068:
	ldr	r0, [r4, #92]
	movw	r2, #:lower16:.LC1310
	ldr	lr, [r4, #152]
	movt	r2, #:upper16:.LC1310
	ldr	r5, [lr, #4]
	ldr	lr, [r4, #88]
	str	r5, [sp, #12]
	ldr	r5, [r0, #4]
	ldr	r0, .L17119+16
	str	r5, [sp, #8]
	ldr	lr, [lr, #4]
	stm	sp, {ip, lr}
	bl	__dynamic_dev_dbg
.L17067:
	mov	r0, r4
	mov	r8, #0
	bl	modem_register
	b	.L17058
.L17059:
	mvn	r8, #18
.L17063:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L17070
	bl	kfree
.L17070:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L17071
	bl	kfree
.L17071:
	ldr	r5, [r4, #152]
	ldr	r6, [r4, #156]
	cmp	r6, #0
	beq	.L17072
	ldr	r0, [r6]
	bl	kfree
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #152]
.L17072:
	cmp	r5, #0
	movw	r1, #:lower16:.LC1311
	movne	r3, #0
	movt	r1, #:upper16:.LC1311
	strne	r3, [r5]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r7]
	mov	r3, r4
	str	r8, [sp]
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err
.L17058:
	mov	r0, r8
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L17060:
	mvn	r8, #18
	str	r9, [r4, #156]
	b	.L17063
.L17118:
	ldr	r0, .L17119+20
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L17066
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bls	.L17064
	ldr	r0, .L17119+24
	bl	usb_copy_descriptors
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L17064
.L17066:
	mov	r0, r4
	mvn	r8, #11
	bl	usb_free_all_descriptors
	b	.L17063
.L17117:
	ldr	r3, [r8, #8]
	mov	r0, r8
	mov	r1, r9
	mvn	r8, #18
	ldr	r3, [r3, #12]
	blx	r3
	str	r10, [r4, #156]
	b	.L17063
.L17120:
	.align	2
.L17119:
	.word	.LANCHOR6-1476
	.word	.LANCHOR6-1464
	.word	.LANCHOR6-1292
	.word	.LANCHOR8-1408
	.word	.LANCHOR8-1440
	.word	.LANCHOR6-1452
	.word	.LANCHOR6-1408
	.fnend
	.size	acm_bind, .-acm_bind
	.align	2
	.global	modem_unregister
	.syntax unified
	.arm
	.fpu softvfp
	.type	modem_unregister, %function
modem_unregister:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #:lower16:.LANCHOR1
	mov	r2, #1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	ip, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	mov	lr, #0
	add	r0, ip, #2192
	mov	r3, lr
	add	r0, r0, #12
	mov	r1, r2
	str	r2, [ip, #2200]
	str	lr, [ip, #3976]
	bl	__wake_up
	movw	r0, #:lower16:.LC809
	ldr	r4, [sp]
	movt	r0, #:upper16:.LC809
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk
	.fnend
	.size	modem_unregister, .-modem_unregister
	.align	2
	.global	acm_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	acm_bind_config, %function
acm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR6
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR6
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r2, [r3, #-2328]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L17124
	ldr	ip, [r0, #24]
	ldrb	r2, [ip, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L17127
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [ip, #48]
	ldr	ip, [r0, #24]
	strb	r2, [r3, #-2328]
	strb	r2, [r3, #-2288]
	ldrb	r2, [ip, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L17127
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [ip, #48]
	ldr	ip, [r0, #24]
	strb	r2, [r3, #-2320]
	strb	r2, [r3, #-2276]
	ldrb	r2, [ip, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L17127
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r3, #-2312]
	strb	r2, [r3, #-2265]
	strb	r2, [ip, #48]
.L17124:
	movw	r3, #:lower16:kmalloc_caches
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	mov	r6, r1
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L17130
	mov	r2, #172
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L17136
.L17128:
	movw	r0, #:lower16:acm_connect
	movw	r1, #:lower16:acm_disconnect
	strb	r6, [r4, #146]
	movt	r0, #:upper16:acm_connect
	movt	r1, #:upper16:acm_disconnect
	movw	r3, #:lower16:acm_send_break
	mov	ip, #0
	movt	r3, #:upper16:acm_send_break
	strd	r0, [r4, #116]
	movw	r1, #:lower16:.LC1069
	mov	r2, r6
	movt	r1, #:upper16:.LC1069
	mov	r0, #208
	str	r3, [r4, #124]
	str	ip, [r4, #148]
	bl	kasprintf
	cmp	r0, #0
	str	r0, [r4]
	beq	.L17137
	movw	r2, #:lower16:acm_bind
	ldr	lr, .L17139
	movw	r1, #:lower16:acm_unbind
	movt	r2, #:upper16:acm_bind
	movw	ip, #:lower16:acm_set_alt
	movw	r3, #:lower16:acm_setup
	movt	r1, #:upper16:acm_unbind
	movt	ip, #:upper16:acm_set_alt
	movt	r3, #:upper16:acm_setup
	str	r2, [r4, #32]
	movw	r2, #:lower16:acm_disable
	mov	r0, r5
	movt	r2, #:upper16:acm_disable
	str	lr, [r4, #4]
	str	r1, [r4, #36]
	mov	r1, r4
	str	ip, [r4, #40]
	str	r2, [r4, #48]
	str	r3, [r4, #52]
	bl	usb_add_function
	subs	r5, r0, #0
	bne	.L17138
.L17123:
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L17130:
	mov	r4, #16
	b	.L17128
.L17138:
	mov	r0, r4
	bl	kfree
	b	.L17123
.L17127:
	mvn	r5, #18
	b	.L17123
.L17137:
	mov	r0, r4
	mvn	r5, #11
	bl	kfree
	b	.L17123
.L17136:
	mvn	r5, #11
	b	.L17123
.L17140:
	.align	2
.L17139:
	.word	.LANCHOR6-2264
	.fnend
	.size	acm_bind_config, .-acm_bind_config
	.align	2
	.global	adb_req_put
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_req_put, %function
adb_req_put:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r4, r0, #88
	mov	r0, r4
	strd	r6, [sp, #8]
	mov	r7, r1
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	mov	r2, r7
	ldr	r1, [r7, #4]
	add	r0, r6, #36
	bl	__list_add
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	adb_req_put, .-adb_req_put
	.align	2
	.global	adb_req_get
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_req_get, %function
adb_req_get:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #88
	mov	r4, r1
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4]
	mov	r6, r0
	cmp	r4, r3
	moveq	r4, #0
	beq	.L17144
	mov	r0, r3
	sub	r4, r3, #36
	bl	list_del
.L17144:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	adb_req_get, .-adb_req_get
	.align	2
	.global	f_midi_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	f_midi_bind_config, %function
f_midi_bind_config:
	.fnstart
	@ args = 16, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r8, [sp, #60]
	cmp	r8, #0
	beq	.L17148
	mvn	ip, #0
	str	ip, [r8]
	str	ip, [r8, #4]
.L17148:
	ldr	ip, [sp, #48]
	cmp	ip, #16
	cmpls	r3, #16
	bhi	.L17160
	movw	r10, #:lower16:kmalloc_caches
	mov	r9, r0
	str	r1, [sp, #4]
	movt	r10, #:upper16:kmalloc_caches
	mov	r7, r3
	ldr	r0, [r10, #36]
	mov	fp, r2
	cmp	r0, #0
	beq	.L17161
	mov	r2, #344
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L17173
.L17150:
	cmp	r7, #0
	addne	r6, r5, #228
	movne	r4, #0
	bne	.L17153
	b	.L17174
.L17164:
	mov	r4, r2
.L17153:
	ldr	ip, [r10, #24]
	mov	r2, #12
	movw	r1, #32976
	mov	r3, #16
	subs	r0, ip, #0
	beq	.L17151
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L17152
.L17151:
	add	r2, r4, #1
	mov	r1, #0
	str	r5, [r3]
	cmp	r2, r7
	str	r1, [r3, #4]
	strb	r4, [r3, #8]
	str	r3, [r6, #4]!
	bne	.L17164
.L17154:
	ldr	r3, [r9, #24]
	movw	r1, #:lower16:f_midi_in_tasklet
	mov	r2, r5
	movt	r1, #:upper16:f_midi_in_tasklet
	add	r0, r5, #300
	ldr	r3, [r3]
	str	r3, [r5, #84]
	bl	tasklet_init
	mov	r1, #208
	mov	r0, fp
	bl	kstrdup
	ldr	r3, [sp, #48]
	str	r7, [r5, #320]
	str	r3, [r5, #324]
	ldr	r3, [sp, #4]
	str	r0, [r5, #332]
	mov	r0, r5
	str	r3, [r5, #328]
	ldr	r3, [sp, #52]
	str	r3, [r5, #336]
	ldr	r3, [sp, #56]
	str	r3, [r5, #340]
	bl	f_midi_register_card
	subs	r7, r0, #0
	blt	.L17156
	ldr	lr, .L17175
	movw	r3, #:lower16:.LC1062
	movw	ip, #:lower16:f_midi_bind
	movt	r3, #:upper16:.LC1062
	movw	r1, #:lower16:f_midi_unbind
	movw	r2, #:lower16:f_midi_set_alt
	movt	ip, #:upper16:f_midi_bind
	movt	r1, #:upper16:f_midi_unbind
	movt	r2, #:upper16:f_midi_set_alt
	stm	r5, {r3, lr}
	movw	r3, #:lower16:f_midi_disable
	mov	r0, r9
	movt	r3, #:upper16:f_midi_disable
	str	ip, [r5, #32]
	str	r1, [r5, #36]
	mov	r1, r5
	str	r2, [r5, #40]
	str	r3, [r5, #48]
	bl	usb_add_function
	subs	r7, r0, #0
	bne	.L17156
	cmp	r8, #0
	beq	.L17147
	ldr	r3, [r5, #100]
	ldr	r3, [r3]
	ldr	r3, [r3]
	str	r3, [r8]
	ldr	r3, [r5, #100]
	ldr	r3, [r3, #12]
	str	r3, [r8, #4]
	ldr	r3, [r5, #100]
	ldr	r3, [r3]
	ldr	r3, [r3]
	str	r3, [r8]
	ldr	r3, [r5, #100]
	ldr	r3, [r3, #12]
	str	r3, [r8, #4]
	b	.L17147
.L17152:
	sub	r4, r4, #1
	mvn	r7, #11
.L17156:
	cmn	r4, #1
	addne	r4, r4, #59
	addne	r6, r5, #232
	addne	r4, r5, r4, lsl #2
	beq	.L17159
.L17158:
	ldr	r0, [r4, #-4]!
	bl	kfree
	cmp	r6, r4
	bne	.L17158
.L17159:
	mov	r0, r5
	bl	kfree
.L17147:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L17161:
	mov	r5, #16
	b	.L17150
.L17174:
	mvn	r4, #0
	b	.L17154
.L17160:
	mvn	r7, #21
	b	.L17147
.L17173:
	mvn	r7, #11
	b	.L17147
.L17176:
	.align	2
.L17175:
	.word	.LANCHOR6-2368
	.fnend
	.size	f_midi_bind_config, .-f_midi_bind_config
	.align	2
	.global	rndis_bind_config_vendor
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_bind_config_vendor, %function
rndis_bind_config_vendor:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:__stack_chk_guard
	movt	r6, #:upper16:__stack_chk_guard
	strd	r8, [sp, #16]
	subs	r9, r1, #0
	ldr	r1, [r6]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	str	r1, [sp, #20]
	beq	.L17188
	movw	r7, #:lower16:.LANCHOR1
	mov	r10, r3
	movt	r7, #:upper16:.LANCHOR1
	mov	r8, r0
	ldrb	r3, [r7, #3932]	@ zero_extendqisi2
	mov	fp, r2
	cmp	r3, #0
	bne	.L17182
	bl	rndis_init.part.89
	subs	r5, r0, #0
	blt	.L17177
.L17182:
	movw	r5, #:lower16:.LANCHOR6
	movt	r5, #:upper16:.LANCHOR6
	ldrb	r3, [r5, #-1248]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L17181
	ldr	r2, [r8, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L17184
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r8, #24]
	strb	r3, [r5, #-3212]
	strb	r3, [r5, #-1248]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L17184
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r8, #24]
	strb	r3, [r5, #-3192]
	strb	r3, [r5, #-1240]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L17184
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r5, #-3221]
	strb	r3, [r5, #-1232]
	strb	r3, [r2, #48]
.L17181:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L17189
	mov	r2, #180
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L17198
.L17185:
	ldr	r1, [r9]	@ unaligned
	movw	r3, #:lower16:rndis_add_header
	movw	r2, #:lower16:rndis_rm_hdr
	ldr	lr, .L17201
	movt	r3, #:upper16:rndis_add_header
	movt	r2, #:upper16:rndis_rm_hdr
	mov	r0, r8
	movw	r8, #:lower16:rndis_bind
	movt	r8, #:upper16:rndis_bind
	str	r1, [r4, #150]	@ unaligned
	movw	r1, #:lower16:.LC1312
	ldrh	ip, [r9, #4]	@ unaligned
	movt	r1, #:upper16:.LC1312
	str	lr, [r4, #4]
	ldr	lr, [r5, #-2936]
	str	r3, [r4, #128]
	movw	r3, #:lower16:rndis_unbind
	ldr	r5, [r5, #-1216]
	movt	r3, #:upper16:rndis_unbind
	str	r1, [r4]
	movw	r1, #:lower16:rndis_set_alt
	movt	r1, #:upper16:rndis_set_alt
	str	r8, [r4, #32]
	str	r2, [r4, #132]
	movw	r2, #:lower16:rndis_setup
	movt	r2, #:upper16:rndis_setup
	str	r3, [r4, #36]
	movw	r3, #:lower16:rndis_disable
	movt	r3, #:upper16:rndis_disable
	str	r1, [r4, #40]
	mov	r1, #0
	str	r2, [r4, #52]
	mov	r2, #44
	str	r3, [r4, #48]
	strh	r1, [r4, #98]	@ movhi
	mov	r1, r4
	str	r2, [r4, #100]
	str	lr, [r4, #116]
	str	r5, [r4, #120]
	strh	ip, [r4, #154]	@ unaligned
	str	fp, [r4, #156]
	str	r10, [r4, #160]
	bl	usb_add_function
	subs	r5, r0, #0
	beq	.L17177
	mov	r0, r4
	bl	kfree
.L17186:
	ldrb	r3, [r7, #3932]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L17199
.L17177:
	ldr	r2, [sp, #20]
	mov	r0, r5
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L17200
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L17189:
	mov	r4, #16
	b	.L17185
.L17199:
	mov	r4, #0
	movw	r1, #:lower16:.LC640
	mov	r2, r4
	movt	r1, #:upper16:.LC640
	mov	r0, sp
	strb	r4, [r7, #3932]
	bl	sprintf
	mov	r0, sp
	mov	r1, r4
	bl	remove_proc_entry
	b	.L17177
.L17198:
	mvn	r5, #11
	b	.L17186
.L17184:
	mvn	r5, #18
	b	.L17177
.L17188:
	mvn	r5, #21
	b	.L17177
.L17200:
	bl	__stack_chk_fail
.L17202:
	.align	2
.L17201:
	.word	.LANCHOR6-1212
	.fnend
	.size	rndis_bind_config_vendor, .-rndis_bind_config_vendor
	.align	2
	.global	rndis_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_bind_config, %function
rndis_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #0
	mov	r2, r3
	b	rndis_bind_config_vendor
	.fnend
	.size	rndis_bind_config, .-rndis_bind_config
	.align	2
	.global	rndis_signal_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_signal_connect, %function
rndis_signal_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r1, #0
	strd	r6, [sp, #8]
	lsl	r6, r0, #4
	movt	r4, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	sub	r5, r6, r0
	str	r10, [sp, #24]
	add	r10, r4, #3872
	lsl	r5, r5, #2
	str	lr, [sp, #28]
	add	r3, r4, r5
	add	r8, r10, r5
	str	r1, [r3, #3888]
	ldr	r3, [r8, #4]
	cmp	r3, r1
	beq	.L17207
	movw	r3, #:lower16:kmalloc_caches
	mov	r9, r0
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, r1
	beq	.L17208
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r7, r0, #0
	beq	.L17209
	add	r3, r7, #20
.L17206:
	sub	r6, r6, r9
	mov	r9, #20
	str	r3, [r7, #8]
	add	r4, r4, r6, lsl #2
	mov	r6, #0
	add	r2, r5, #52
	str	r9, [r7, #12]
	add	r2, r10, r2
	mov	r0, r7
	str	r6, [r7, #16]
	ldr	r1, [r4, #3928]
	bl	__list_add
	ldr	r3, [r7, #8]
	mov	r2, #11
	mov	r1, #7
	movt	r2, 16385
	stm	r3, {r1, r9}
	str	r2, [r3, #8]
	str	r6, [r3, #12]
	str	r6, [r3, #16]
	ldr	r3, [r8, #44]
	ldr	r0, [r8, #48]
	blx	r3
	mov	r0, r6
.L17204:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L17208:
	mov	r3, #36
	mov	r7, #16
	b	.L17206
.L17209:
	mvn	r0, #11
	b	.L17204
.L17207:
	movw	r0, #65012
	movt	r0, 65535
	b	.L17204
	.fnend
	.size	rndis_signal_connect, .-rndis_signal_connect
	.align	2
	.global	rndis_signal_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_signal_disconnect, %function
rndis_signal_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r1, #1
	strd	r6, [sp, #8]
	lsl	r6, r0, #4
	movt	r4, #:upper16:.LANCHOR1
	strd	r8, [sp, #16]
	sub	r5, r6, r0
	str	r10, [sp, #24]
	add	r10, r4, #3872
	lsl	r5, r5, #2
	str	lr, [sp, #28]
	add	r3, r4, r5
	add	r8, r10, r5
	str	r1, [r3, #3888]
	ldr	r3, [r8, #4]
	cmp	r3, #0
	beq	.L17214
	movw	r3, #:lower16:kmalloc_caches
	mov	r9, r0
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L17215
	mov	r2, #40
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r7, r0, #0
	beq	.L17216
	add	r3, r7, #20
.L17213:
	sub	r6, r6, r9
	mov	r9, #20
	str	r3, [r7, #8]
	add	r4, r4, r6, lsl #2
	mov	r6, #0
	add	r2, r5, #52
	str	r9, [r7, #12]
	add	r2, r10, r2
	mov	r0, r7
	str	r6, [r7, #16]
	ldr	r1, [r4, #3928]
	bl	__list_add
	ldr	r3, [r7, #8]
	mov	r2, #12
	mov	r1, #7
	movt	r2, 16385
	stm	r3, {r1, r9}
	str	r2, [r3, #8]
	str	r6, [r3, #12]
	str	r6, [r3, #16]
	ldr	r3, [r8, #44]
	ldr	r0, [r8, #48]
	blx	r3
	mov	r0, r6
.L17211:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L17215:
	mov	r3, #36
	mov	r7, #16
	b	.L17213
.L17216:
	mvn	r0, #11
	b	.L17211
.L17214:
	movw	r0, #65012
	movt	r0, 65535
	b	.L17211
	.fnend
	.size	rndis_signal_disconnect, .-rndis_signal_disconnect
	.align	2
	.global	rndis_uninit
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_uninit, %function
rndis_uninit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	bxgt	lr
	rsb	r0, r0, r0, lsl #4
	movw	r2, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r2, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	lsl	r3, r0, #2
	str	r8, [sp, #16]
	mov	r1, #0
	str	lr, [sp, #20]
	add	r8, r2, r3
	ldr	r2, [r8, #3924]
	add	r6, r8, #3920
	add	r6, r6, #4
	str	r1, [r8, #3876]
	cmp	r6, r2
	ldr	r3, [r2]
	beq	.L17218
.L17220:
	ldr	r1, [r2, #16]
	cmp	r1, #0
	bne	.L17225
	b	.L17239
.L17227:
	ldr	r1, [r3, #16]
	cmp	r1, #0
	beq	.L17224
	mov	r3, r2
.L17225:
	cmp	r3, r6
	ldr	r2, [r3]
	bne	.L17227
.L17218:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L17239:
	mov	r3, r2
.L17224:
	ldr	r7, [r3, #8]
	mov	r2, #1
	str	r2, [r3, #16]
	cmp	r7, #0
	beq	.L17218
	ldr	r5, [r8, #3924]
	cmp	r5, r6
	ldr	r4, [r5]
	bne	.L17223
	b	.L17218
.L17222:
	cmp	r4, r6
	mov	r5, r4
	ldr	r4, [r4]
	beq	.L17240
.L17223:
	cmp	r5, #0
	beq	.L17222
	ldr	r3, [r5, #8]
	cmp	r7, r3
	bne	.L17222
	mov	r0, r5
	bl	list_del
	mov	r0, r5
	mov	r5, r4
	bl	kfree
	cmp	r4, r6
	ldr	r4, [r4]
	bne	.L17223
.L17240:
	ldr	r2, [r8, #3924]
	cmp	r2, r6
	ldr	r3, [r2]
	bne	.L17220
	b	.L17218
	.fnend
	.size	rndis_uninit, .-rndis_uninit
	.align	2
	.global	rndis_set_host_mac
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_host_mac, %function
rndis_set_host_mac:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	rsb	r0, r0, r0, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r3, r3, r0, lsl #2
	str	r1, [r3, #3892]
	bx	lr
	.fnend
	.size	rndis_set_host_mac, .-rndis_set_host_mac
	.align	2
	.global	rndis_msg_parser
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_msg_parser, %function
rndis_msg_parser:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	subs	r6, r1, #0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #64
	sub	sp, sp, #64
	beq	.L17257
	cmp	r0, #0
	ldr	r2, [r6]	@ unaligned
	bne	.L17255
	sub	r3, r2, #2
	cmp	r3, #6
	ldrls	pc, [pc, r3, asl #2]
	b	.L17246
.L17248:
	.word	.L17253
	.word	.L17252
	.word	.L17251
	.word	.L17250
	.word	.L17249
	.word	.L17246
	.word	.L17247
.L17249:
	ldr	r0, .L17367
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L17354
.L17273:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r2, [r5, #3924]
	add	r7, r5, #3872
	add	r10, r7, #52
	cmp	r2, r10
	ldr	r3, [r2]
	beq	.L17274
	mov	r8, #1
.L17277:
	ldr	r1, [r2, #16]
	cmp	r1, #0
	bne	.L17281
	b	.L17355
.L17283:
	ldr	r1, [r3, #16]
	cmp	r1, #0
	beq	.L17280
	mov	r3, r2
.L17281:
	cmp	r3, r10
	ldr	r2, [r3]
	bne	.L17283
.L17274:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L17356
	mov	r2, #36
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r6, r0, #0
	beq	.L17257
	add	r3, r6, #20
.L17278:
	mov	r4, #0
	mov	r8, #16
	str	r3, [r6, #8]
	add	r2, r7, #52
	mov	r0, r6
	str	r8, [r6, #12]
	str	r4, [r6, #16]
	ldr	r1, [r5, #3928]
	bl	__list_add
	ldr	r3, [r6, #8]
	mov	r1, #-2147483642
	mov	r2, #1
	stm	r3, {r1, r8}
	str	r4, [r3, #8]
	str	r2, [r3, #12]
	ldr	r3, [r5, #3916]
	ldr	r0, [r5, #3920]
	blx	r3
	mov	r0, r4
.L17242:
	add	sp, sp, #64
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L17253:
	ldr	r0, .L17367+4
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L17357
.L17254:
	movw	r5, #:lower16:.LANCHOR1
	mov	r2, #1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r3, [r5, #3900]
	str	r2, [r5, #3876]
	cmp	r3, #0
	beq	.L17255
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L17288
	mov	r2, #72
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r7, r0, #0
	beq	.L17257
	add	r3, r7, #20
.L17256:
	mov	r4, #0
	mov	r8, #52
	ldr	r2, .L17367+8
	mov	r0, r7
	str	r3, [r7, #8]
	str	r8, [r7, #12]
	str	r4, [r7, #16]
	ldr	r1, [r5, #3928]
	bl	__list_add
	ldr	r3, [r7, #8]
	mov	r1, #-2147483646
	mov	r2, #1
	stm	r3, {r1, r8}
	ldr	r1, [r6, #8]
	str	r1, [r3, #8]
	str	r4, [r3, #12]
	str	r2, [r3, #16]
	str	r4, [r3, #20]
	str	r2, [r3, #24]
	str	r4, [r3, #28]
	ldrb	r2, [r5, #3908]	@ zero_extendqisi2
	ldr	r1, [r5, #3900]
	str	r2, [r3, #32]
	ldrb	r2, [r5, #3908]	@ zero_extendqisi2
	ldr	r1, [r1, #356]
	str	r4, [r3, #44]
	str	r4, [r3, #48]
	add	r1, r1, #80
	mul	r2, r2, r1
	str	r2, [r3, #36]
	ldrb	r2, [r5, #3909]	@ zero_extendqisi2
	str	r2, [r3, #40]
	ldr	r3, [r5, #3916]
	ldr	r0, [r5, #3920]
	blx	r3
	mov	r0, r4
	b	.L17242
.L17252:
	ldr	r0, .L17367+12
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L17358
.L17258:
	movw	r5, #:lower16:.LANCHOR1
	mov	r4, #0
	movt	r5, #:upper16:.LANCHOR1
	ldr	r0, [r5, #3900]
	str	r4, [r5, #3876]
	cmp	r0, r4
	beq	.L17242
	bl	netif_carrier_off
	ldr	r3, [r5, #3900]
	ldr	r5, [r3, #576]
	cmp	r5, r4
	beq	.L17359
	mov	r0, r4
	add	r1, r5, #80
	bl	_set_bit
	mov	r0, r4
	b	.L17242
.L17251:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r3, [r5, #3900]
	cmp	r3, #0
	beq	.L17255
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L17290
	mov	r2, #156
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L17257
	add	r1, r4, #20
.L17260:
	mov	r3, #136
	mov	r8, #0
	ldr	r2, .L17367+8
	mov	r0, r4
	str	r1, [r4, #8]
	str	r3, [r4, #12]
	str	r8, [r4, #16]
	ldr	r1, [r5, #3928]
	bl	__list_add
	ldr	r7, [r4, #8]
	mov	r3, #-2147483644
	mov	r1, r4
	str	r3, [r7]
	ldr	r3, [r6, #8]
	str	r3, [r7, #8]
	ldr	r0, [r6, #12]
	bl	gen_ndis_query_resp.constprop.117
	cmp	r0, #0
	beq	.L17261
	mov	r0, #187
	mov	r3, #24
	movt	r0, 49152
	str	r3, [r7, #4]
	str	r8, [r7, #16]
	str	r8, [r7, #20]
.L17261:
	str	r0, [r7, #12]
	ldr	r3, [r5, #3916]
	ldr	r0, [r5, #3920]
	blx	r3
	mov	r0, #0
	b	.L17242
.L17355:
	mov	r3, r2
.L17280:
	ldr	r9, [r3, #8]
	str	r8, [r3, #16]
	cmp	r9, #0
	beq	.L17274
	ldr	r4, [r5, #3924]
	cmp	r4, r10
	ldr	r6, [r4]
	bne	.L17276
	b	.L17274
.L17275:
	cmp	r6, r10
	mov	r4, r6
	ldr	r6, [r6]
	beq	.L17360
.L17276:
	cmp	r4, #0
	beq	.L17275
	ldr	r3, [r4, #8]
	cmp	r9, r3
	bne	.L17275
	mov	r0, r4
	bl	list_del
	mov	r0, r4
	mov	r4, r6
	bl	kfree
	cmp	r6, r10
	ldr	r6, [r6]
	bne	.L17276
.L17360:
	ldr	r2, [r5, #3924]
	cmp	r2, r10
	ldr	r3, [r2]
	bne	.L17277
	b	.L17274
.L17356:
	mov	r3, #36
	mov	r6, #16
	b	.L17278
.L17257:
	mvn	r0, #11
	b	.L17242
.L17250:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L17292
	mov	r2, #36
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L17257
	add	r3, r4, #20
.L17262:
	movw	r5, #:lower16:.LANCHOR1
	mov	r8, #16
	str	r3, [r4, #8]
	movt	r5, #:upper16:.LANCHOR1
	mov	r3, #0
	add	r2, r5, #3920
	mov	r0, r4
	str	r8, [r4, #12]
	add	r2, r2, #4
	str	r3, [r4, #16]
	ldr	r1, [r5, #3928]
	bl	__list_add
	ldr	r7, [r4, #8]
	mov	r2, #-2147483643
	ldr	r3, [r6, #16]
	ldr	r1, [r6, #20]
	stm	r7, {r2, r8}
	ldr	r2, [r6, #8]
	str	r2, [r7, #8]
	ldr	r0, [r4, #8]
	ldr	r2, [r6, #12]
	cmp	r0, #0
	beq	.L17263
	movw	r0, #270
	movt	r0, 1
	cmp	r2, r0
	bne	.L17361
	add	r1, r6, r1
	ldr	r0, .L17367+16
	ldr	r2, [r1, #8]	@ unaligned
	ldr	r3, [r5, #3896]
	strh	r2, [r3]	@ movhi
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L17362
.L17267:
	ldr	r3, [r5, #3896]
	ldr	r0, [r5, #3900]
	ldrh	r4, [r3]
	cmp	r4, #0
	beq	.L17268
	mov	r3, #2
	str	r3, [r5, #3876]
	bl	netif_carrier_on
	ldr	r3, [r5, #3900]
	ldr	r2, [r3, #160]
	tst	r2, #1
	bne	.L17363
.L17270:
	mov	r3, #0
	str	r3, [r7, #12]
.L17272:
	ldr	r3, [r5, #3916]
	ldr	r0, [r5, #3920]
	blx	r3
	mov	r0, #0
	b	.L17242
.L17247:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L17297
	mov	r2, #36
	mov	r1, #32
	bl	kmem_cache_alloc_trace
	subs	r7, r0, #0
	beq	.L17257
	add	r3, r7, #20
.L17284:
	movw	r5, #:lower16:.LANCHOR1
	mov	r4, #0
	str	r3, [r7, #8]
	movt	r5, #:upper16:.LANCHOR1
	mov	r8, #16
	add	r2, r5, #3920
	mov	r0, r7
	add	r2, r2, #4
	str	r8, [r7, #12]
	str	r4, [r7, #16]
	ldr	r1, [r5, #3928]
	bl	__list_add
	ldr	r3, [r7, #8]
	mov	r2, #-2147483640
	stm	r3, {r2, r8}
	ldr	r2, [r6, #8]
	str	r2, [r3, #8]
	str	r4, [r3, #12]
	ldr	r3, [r5, #3916]
	ldr	r0, [r5, #3920]
	blx	r3
	mov	r0, r4
	b	.L17242
.L17290:
	mov	r1, #36
	mov	r4, #16
	b	.L17260
.L17288:
	mov	r3, #36
	mov	r7, #16
	b	.L17256
.L17361:
	movw	r1, #259
	movt	r1, 257
	cmp	r2, r1
	bne	.L17364
	ldr	r0, .L17367+20
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L17270
	movw	r1, #:lower16:.LC673
	ldr	r2, .L17367+24
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC673
	bl	__dynamic_pr_debug
	b	.L17270
.L17364:
	movw	r0, #:lower16:.LC1316
	ldr	r1, .L17367+24
	movt	r0, #:upper16:.LC1316
	bl	printk
.L17263:
	mov	r3, #187
	movt	r3, 49152
	str	r3, [r7, #12]
	b	.L17272
.L17268:
	mov	r3, #1
	str	r3, [r5, #3876]
	bl	netif_carrier_off
	ldr	r3, [r5, #3900]
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L17365
	add	r1, r1, #80
	mov	r0, r4
	bl	_set_bit
	b	.L17270
.L17297:
	mov	r3, #36
	mov	r7, #16
	b	.L17284
.L17292:
	mov	r3, #36
	mov	r4, #16
	b	.L17262
.L17354:
	movw	r1, #:lower16:.LC1317
	ldr	r2, .L17367+28
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1317
	bl	__dynamic_pr_debug
	b	.L17273
.L17357:
	movw	r1, #:lower16:.LC1313
	ldr	r2, .L17367+28
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1313
	bl	__dynamic_pr_debug
	b	.L17254
.L17358:
	movw	r1, #:lower16:.LC1314
	ldr	r2, .L17367+28
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1314
	bl	__dynamic_pr_debug
	b	.L17258
.L17246:
	ldr	r7, [r6, #4]	@ unaligned
	movw	r0, #:lower16:.LC1318
	movw	r5, #:lower16:.LC1319
	ldr	r8, .L17367
	movt	r0, #:upper16:.LC1318
	movt	r5, #:upper16:.LC1319
	ldr	r1, .L17367+28
	mov	r4, #0
	mov	r3, r7
	bl	printk
.L17285:
	cmp	r4, r7
	bcc	.L17366
.L17255:
	movw	r0, #65012
	movt	r0, 65535
	b	.L17242
.L17363:
	ldr	r4, [r3, #576]
	mov	r0, #0
	add	r1, r4, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L17270
	ldr	r0, [r4, #4]
	bl	__netif_schedule
	b	.L17270
.L17362:
	ldr	r3, [r5, #3896]
	movw	r1, #:lower16:.LC1315
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1315
	ldr	r2, .L17367+24
	ldrh	r3, [r3]
	bl	__dynamic_pr_debug
	b	.L17267
.L17359:
	movw	r0, #:lower16:.LC101
	movw	r1, #1847
	movt	r0, #:upper16:.LC101
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC102
	movt	r0, #:upper16:.LC102
	bl	printk
	mov	r0, r5
	b	.L17242
.L17365:
	movw	r0, #:lower16:.LC101
	movw	r1, #1847
	movt	r0, #:upper16:.LC101
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC102
	movt	r0, #:upper16:.LC102
	bl	printk
	b	.L17270
.L17366:
	ldr	r3, .L17367+32
	ldrh	r3, [r3]
	tst	r3, #4
	beq	.L17286
	ldrb	r3, [r6, #15]	@ zero_extendqisi2
	mov	r2, r4
	mov	r1, r5
	mov	r0, r8
	str	r3, [sp, #56]
	ldrb	r3, [r6, #14]	@ zero_extendqisi2
	str	r3, [sp, #52]
	ldrb	r3, [r6, #13]	@ zero_extendqisi2
	str	r3, [sp, #48]
	ldrb	r3, [r6, #12]	@ zero_extendqisi2
	str	r3, [sp, #44]
	ldrb	r3, [r6, #11]	@ zero_extendqisi2
	str	r3, [sp, #40]
	ldrb	r3, [r6, #10]	@ zero_extendqisi2
	str	r3, [sp, #36]
	ldrb	r3, [r6, #9]	@ zero_extendqisi2
	str	r3, [sp, #32]
	ldrb	r3, [r6, #8]	@ zero_extendqisi2
	str	r3, [sp, #28]
	ldrb	r3, [r6, #7]	@ zero_extendqisi2
	str	r3, [sp, #24]
	ldrb	r3, [r6, #6]	@ zero_extendqisi2
	str	r3, [sp, #20]
	ldrb	r3, [r6, #5]	@ zero_extendqisi2
	str	r3, [sp, #16]
	ldrb	r3, [r6, #4]	@ zero_extendqisi2
	str	r3, [sp, #12]
	ldrb	r3, [r6, #3]	@ zero_extendqisi2
	str	r3, [sp, #8]
	ldrb	r3, [r6, #2]	@ zero_extendqisi2
	str	r3, [sp, #4]
	ldrb	r3, [r6, #1]	@ zero_extendqisi2
	str	r3, [sp]
	ldrb	r3, [r6]	@ zero_extendqisi2
	bl	__dynamic_pr_debug
.L17286:
	add	r4, r4, #16
	add	r6, r6, #16
	b	.L17285
.L17368:
	.align	2
.L17367:
	.word	.LANCHOR8-1296
	.word	.LANCHOR8-1392
	.word	.LANCHOR1+3924
	.word	.LANCHOR8-1360
	.word	.LANCHOR8-1344
	.word	.LANCHOR8-1312
	.word	.LANCHOR5+1908
	.word	.LANCHOR5+1888
	.word	.LANCHOR8-1278
	.fnend
	.size	rndis_msg_parser, .-rndis_msg_parser
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_command_complete, %function
rndis_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r5, #20]
	cmp	r3, #0
	beq	.L17369
	ldr	r6, [r3, #24]
	cmp	r6, #0
	beq	.L17369
	mov	r4, r1
	ldrb	r0, [r5, #164]	@ zero_extendqisi2
	ldr	r1, [r1]
	bl	rndis_msg_parser
	subs	r2, r0, #0
	blt	.L17384
	ldr	r3, [r4]
	ldr	r2, [r3]
	cmp	r2, #2
	beq	.L17385
.L17369:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L17385:
	ldr	r0, .L17387
	ldr	r2, [r3, #20]
	ldrh	r1, [r0, #-6]
	cmp	r2, #2048
	movls	ip, #0
	movhi	ip, #1
	tst	r1, #4
	strb	ip, [r5, #124]
	bne	.L17386
.L17374:
	movw	r3, #:lower16:.LANCHOR6
	movt	r3, #:upper16:.LANCHOR6
	ldr	r3, [r3, #-1216]
	cmp	r3, #1
	movls	r3, #0
	strbls	r3, [r5, #124]
	b	.L17369
.L17384:
	ldr	r0, [r6]
	movw	r1, #:lower16:.LC1322
	ldr	ip, [r4, #4]
	movt	r1, #:upper16:.LC1322
	ldr	r3, [r4, #48]
	add	r0, r0, #32
	str	ip, [sp]
	bl	dev_err
	ldr	r3, [r4]
	ldr	r2, [r3]
	cmp	r2, #2
	bne	.L17369
	b	.L17385
.L17386:
	movw	lr, #:lower16:.LC1321
	ldr	r1, [r6]
	cmp	r2, #2048
	ldr	r4, [r3, #20]
	movt	lr, #:upper16:.LC1321
	movw	ip, #:lower16:.LC1320
	movt	ip, #:upper16:.LC1320
	movls	ip, lr
	ldr	r3, .L17387+4
	movw	r2, #:lower16:.LC1323
	sub	r0, r0, #24
	movt	r2, #:upper16:.LC1323
	add	r1, r1, #32
	stm	sp, {r4, ip}
	bl	__dynamic_dev_dbg
	b	.L17374
.L17388:
	.align	2
.L17387:
	.word	.LANCHOR8-1248
	.word	.LANCHOR5+1928
	.fnend
	.size	rndis_command_complete, .-rndis_command_complete
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_command_complete, %function
rndis_qc_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r4, r1
	str	lr, [sp, #8]
	ldr	r5, [r1, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r1, [r1]
	ldrb	r0, [r5, #144]	@ zero_extendqisi2
	bl	rndis_msg_parser
	subs	r2, r0, #0
	bge	.L17390
	ldr	ip, [r4, #4]
	movw	r0, #:lower16:.LC1324
	movt	r0, #:upper16:.LC1324
	ldr	r1, .L17399
	ldr	r3, [r4, #48]
	str	ip, [sp]
	bl	printk
.L17390:
	ldr	r3, [r4]
	ldr	r2, [r3]
	cmp	r2, #2
	beq	.L17398
.L17389:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L17398:
	ldr	r0, .L17399+4
	ldr	r3, [r3, #20]
	ldrh	r2, [r0, #-14]
	str	r3, [r5, #136]
	tst	r2, #4
	beq	.L17389
	ldr	r2, .L17399
	movw	r1, #:lower16:.LC1325
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1325
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	__dynamic_pr_debug
.L17400:
	.align	2
.L17399:
	.word	.LANCHOR5+1952
	.word	.LANCHOR8-1216
	.fnend
	.size	rndis_qc_command_complete, .-rndis_qc_command_complete
	.align	2
	.global	rndis_register
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_register, %function
rndis_register:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	beq	.L17404
	movw	r3, #:lower16:.LANCHOR1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldrb	r4, [r3, #3873]	@ zero_extendqisi2
	cmp	r4, #0
	bne	.L17403
	movw	r2, #:lower16:.LANCHOR4
	movw	ip, #3594
	str	r0, [r3, #3916]
	movt	r2, #:upper16:.LANCHOR4
	str	r1, [r3, #3920]
	mov	r1, #1
	ldrh	r0, [r2, ip]
	add	r2, r3, #3872
	strb	r1, [r3, #3873]
	strh	r1, [r2, #36]	@ movhi
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	beq	.L17401
	movw	r1, #:lower16:.LC1014
	mov	r3, r4
	ldr	r2, .L17412
	movt	r1, #:upper16:.LC1014
	ldr	r0, .L17412+4
	bl	__dynamic_pr_debug
	mov	r0, r4
	b	.L17401
.L17403:
	movw	r0, #:lower16:.LANCHOR4
	movw	r3, #3618
	movt	r0, #:upper16:.LANCHOR4
	ldrh	r3, [r0, r3]
	tst	r3, #4
	mvneq	r0, #18
	bne	.L17411
.L17401:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L17411:
	movw	r1, #:lower16:.LC1015
	add	r0, r0, #3600
	movt	r1, #:upper16:.LC1015
	bl	__dynamic_pr_debug
	mvn	r0, #18
	b	.L17401
.L17404:
	mvn	r0, #21
	bx	lr
.L17413:
	.align	2
.L17412:
	.word	.LANCHOR5-660
	.word	.LANCHOR4+3576
	.fnend
	.size	rndis_register, .-rndis_register
	.align	2
	.global	rndis_deregister
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_deregister, %function
rndis_deregister:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #1098
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r3, #:upper16:.LANCHOR4
	str	lr, [sp, #4]
	mov	r4, r0
	ldrh	r3, [r3, r2]
	tst	r3, #4
	bne	.L17421
.L17415:
	cmp	r4, #0
	bgt	.L17414
	rsb	r4, r4, r4, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r4, r3, r4, lsl #2
	mov	r3, #0
	strb	r3, [r4, #3873]
.L17414:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L17421:
	movw	r1, #:lower16:.LC289
	ldr	r2, .L17422
	movt	r1, #:upper16:.LC289
	ldr	r0, .L17422+4
	bl	__dynamic_pr_debug
	b	.L17415
.L17423:
	.align	2
.L17422:
	.word	.LANCHOR5-1296
	.word	.LANCHOR4+1080
	.fnend
	.size	rndis_deregister, .-rndis_deregister
	.align	2
	.global	rndis_set_param_dev
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_param_dev, %function
rndis_set_param_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L17434
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	mov	r6, r2
	mov	r5, r1
	str	lr, [sp, #12]
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L17433
.L17425:
	cmp	r5, #0
	beq	.L17427
	cmp	r4, #0
	bne	.L17428
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR1
	str	r4, [r3, #3744]
	str	r4, [r3, #3748]
	str	r6, [r3, #3896]
	str	r5, [r3, #3900]
.L17424:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L17433:
	movw	r1, #:lower16:.LC289
	sub	r0, r3, #24
	ldr	r2, .L17434+4
	movt	r1, #:upper16:.LC289
	bl	__dynamic_pr_debug
	b	.L17425
.L17428:
	mvn	r0, #0
	b	.L17424
.L17427:
	mvn	r0, #21
	b	.L17424
.L17435:
	.align	2
.L17434:
	.word	.LANCHOR8-1200
	.word	.LANCHOR5+1980
	.fnend
	.size	rndis_set_param_dev, .-rndis_set_param_dev
	.align	2
	.global	rndis_set_param_vendor
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_param_vendor, %function
rndis_set_param_vendor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	ip, #3642
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	mov	r5, r0
	str	lr, [sp, #12]
	ldrh	r3, [r3, ip]
	mov	r4, r2
	mov	r6, r1
	tst	r3, #4
	bne	.L17444
.L17437:
	clz	r0, r4
	cmp	r5, #0
	lsr	r0, r0, #5
	movne	r0, #1
	cmp	r0, #0
	bne	.L17439
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [r3, #3904]
	str	r4, [r3, #3912]
.L17436:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L17444:
	movw	r1, #:lower16:.LC289
	ldr	r2, .L17445
	movt	r1, #:upper16:.LC289
	ldr	r0, .L17445+4
	bl	__dynamic_pr_debug
	b	.L17437
.L17439:
	mvn	r0, #0
	b	.L17436
.L17446:
	.align	2
.L17445:
	.word	.LANCHOR5-644
	.word	.LANCHOR4+3624
	.fnend
	.size	rndis_set_param_vendor, .-rndis_set_param_vendor
	.align	2
	.global	rndis_set_param_medium
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_param_medium, %function
rndis_set_param_medium:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	movt	r3, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldrh	r1, [r3, #186]
	mov	r5, r2
	.pad #8
	sub	sp, sp, #8
	tst	r1, #4
	bne	.L17455
.L17448:
	cmp	r4, #0
	bne	.L17450
	movw	r3, #:lower16:.LANCHOR1
	mov	r0, r4
	movt	r3, #:upper16:.LANCHOR1
	str	r6, [r3, #3880]
	str	r5, [r3, #3884]
.L17447:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L17455:
	movw	r1, #:lower16:.LC779
	add	r0, r3, #168
	ldr	r2, .L17456
	movt	r1, #:upper16:.LC779
	mov	r3, r6
	str	r5, [sp]
	bl	__dynamic_pr_debug
	b	.L17448
.L17450:
	mvn	r0, #0
	b	.L17447
.L17457:
	.align	2
.L17456:
	.word	.LANCHOR5-1560
	.fnend
	.size	rndis_set_param_medium, .-rndis_set_param_medium
	.align	2
	.global	rndis_set_max_pkt_xfer
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_max_pkt_xfer, %function
rndis_set_max_pkt_xfer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #3666
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r2, [r3, r2]
	mov	r5, r1
	tst	r2, #4
	bne	.L17464
.L17459:
	rsb	r4, r4, r4, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r3, r3, r4, lsl #2
	strb	r5, [r3, #3908]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L17464:
	movw	r1, #:lower16:.LC289
	add	r0, r3, #3648
	ldr	r2, .L17465
	movt	r1, #:upper16:.LC289
	bl	__dynamic_pr_debug
	b	.L17459
.L17466:
	.align	2
.L17465:
	.word	.LANCHOR5-620
	.fnend
	.size	rndis_set_max_pkt_xfer, .-rndis_set_max_pkt_xfer
	.align	2
	.global	rndis_set_pkt_alignment_factor
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_pkt_alignment_factor, %function
rndis_set_pkt_alignment_factor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	movw	r2, #3690
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	mov	r4, r0
	str	lr, [sp, #12]
	ldrh	r3, [r3, r2]
	mov	r5, r1
	tst	r3, #4
	bne	.L17473
.L17468:
	rsb	r4, r4, r4, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	add	r3, r3, r4, lsl #2
	strb	r5, [r3, #3909]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L17473:
	movw	r1, #:lower16:.LC289
	ldr	r2, .L17474
	movt	r1, #:upper16:.LC289
	ldr	r0, .L17474+4
	bl	__dynamic_pr_debug
	b	.L17468
.L17475:
	.align	2
.L17474:
	.word	.LANCHOR5-596
	.word	.LANCHOR4+3672
	.fnend
	.size	rndis_set_pkt_alignment_factor, .-rndis_set_pkt_alignment_factor
	.align	2
	.global	rndis_add_hdr
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_add_hdr, %function
rndis_add_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L17476
	mov	r1, #44
	bl	skb_push
	mov	r1, #44
	mov	r4, r0
	bl	__memzero
	mov	r3, #0
	mov	r2, #1
	mov	r1, #36
	strb	r2, [r4]
	strb	r3, [r4, #1]
	strb	r3, [r4, #2]
	strb	r3, [r4, #3]
	ldr	r2, [r5, #80]
	str	r2, [r4, #4]	@ unaligned
	strb	r1, [r4, #8]
	strb	r3, [r4, #9]
	strb	r3, [r4, #10]
	strb	r3, [r4, #11]
	ldr	r3, [r5, #80]
	sub	r3, r3, #44
	str	r3, [r4, #12]	@ unaligned
.L17476:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_add_hdr, .-rndis_add_hdr
	.align	2
	.global	rndis_free_response
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_free_response, %function
rndis_free_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	rsb	r0, r0, r0, lsl #4
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:.LANCHOR1
	lsl	r0, r0, #2
	movt	r6, #:upper16:.LANCHOR1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	add	r3, r6, r0
	ldr	r5, [r3, #3924]
	add	r6, r3, #3920
	add	r6, r6, #4
	cmp	r5, r6
	ldr	r4, [r5]
	beq	.L17482
	mov	r7, r1
	b	.L17485
.L17484:
	cmp	r6, r4
	mov	r5, r4
	ldr	r4, [r4]
	beq	.L17482
.L17485:
	cmp	r5, #0
	beq	.L17484
	ldr	r3, [r5, #8]
	cmp	r3, r7
	bne	.L17484
	mov	r0, r5
	bl	list_del
	mov	r0, r5
	mov	r5, r4
	bl	kfree
	cmp	r6, r4
	ldr	r4, [r4]
	bne	.L17485
.L17482:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_free_response, .-rndis_free_response
	.align	2
	.global	rndis_get_next_response
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_get_next_response, %function
rndis_get_next_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	beq	.L17497
	rsb	r0, r0, r0, lsl #4
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	lsl	r0, r0, #2
	add	r3, r2, r0
	ldr	ip, [r3, #3924]
	add	r2, r3, #3920
	add	r2, r2, #4
	cmp	ip, r2
	ldr	r3, [ip]
	beq	.L17497
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	r0, [ip, #16]
	cmp	r0, #0
	bne	.L17494
	b	.L17504
.L17495:
	ldr	lr, [r3, #16]
	cmp	lr, #0
	beq	.L17493
	mov	r3, ip
.L17494:
	cmp	r2, r3
	ldr	ip, [r3]
	bne	.L17495
	mov	r0, #0
	ldr	pc, [sp], #4
.L17504:
	mov	r3, ip
.L17493:
	ldr	r2, [r3, #12]
	mov	r0, #1
	str	r0, [r3, #16]
	str	r2, [r1]
	ldr	r0, [r3, #8]
	ldr	pc, [sp], #4
.L17497:
	mov	r0, #0
	bx	lr
	.fnend
	.size	rndis_get_next_response, .-rndis_get_next_response
	.align	2
	.global	rndis_init
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_init, %function
rndis_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	movw	r4, #:lower16:.LANCHOR1
	movw	r5, #:lower16:__stack_chk_guard
	movt	r4, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	movt	r5, #:upper16:__stack_chk_guard
	ldrb	r6, [r4, #3932]	@ zero_extendqisi2
	str	lr, [sp, #16]
	.pad #36
	sub	sp, sp, #36
	ldr	r3, [r5]
	cmp	r6, #0
	str	r3, [sp, #28]
	bne	.L17523
	movw	r1, #:lower16:.LC640
	mov	r2, r6
	movt	r1, #:upper16:.LC640
	add	r0, sp, #8
	add	r7, r4, #3872
	bl	sprintf
	add	r0, sp, #8
	ldr	r3, .L17528
	mov	r2, r6
	mov	r1, #432
	str	r7, [sp]
	bl	proc_create_data
	cmp	r0, #0
	bne	.L17524
	ldr	r0, .L17528+4
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L17525
.L17508:
	ldr	r0, .L17528+8
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L17526
.L17509:
	mvn	r0, #4
.L17505:
	ldr	r2, [sp, #28]
	ldr	r3, [r5]
	cmp	r2, r3
	bne	.L17527
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L17524:
	mov	r3, r7
	mov	r2, #1
	str	r6, [r4, #3876]
	mov	r0, r6
	strh	r6, [r3], #52	@ movhi
	str	r2, [r4, #3888]
	str	r3, [r4, #3924]
	str	r3, [r4, #3928]
	strb	r2, [r4, #3932]
	b	.L17505
.L17523:
	mov	r0, #0
	b	.L17505
.L17525:
	movw	r1, #:lower16:.LC641
	ldr	r2, .L17528+12
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC641
	bl	__dynamic_pr_debug
	b	.L17508
.L17526:
	movw	r1, #:lower16:.LC642
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC642
	bl	__dynamic_pr_debug
	b	.L17509
.L17527:
	bl	__stack_chk_fail
.L17529:
	.align	2
.L17528:
	.word	.LANCHOR5-3284
	.word	.LANCHOR4-1776
	.word	.LANCHOR4-1744
	.word	.LANCHOR5-3176
	.fnend
	.size	rndis_init, .-rndis_init
	.align	2
	.global	rndis_exit
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_exit, %function
rndis_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movw	r4, #:lower16:__stack_chk_guard
	movt	r3, #:upper16:.LANCHOR1
	str	lr, [sp, #8]
	movt	r4, #:upper16:__stack_chk_guard
	ldrb	r1, [r3, #3932]	@ zero_extendqisi2
	.pad #28
	sub	sp, sp, #28
	ldr	r2, [r4]
	cmp	r1, #0
	str	r2, [sp, #20]
	bne	.L17537
.L17530:
	ldr	r2, [sp, #20]
	ldr	r3, [r4]
	cmp	r2, r3
	bne	.L17538
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L17537:
	mov	r5, #0
	movw	r1, #:lower16:.LC640
	mov	r2, r5
	movt	r1, #:upper16:.LC640
	mov	r0, sp
	strb	r5, [r3, #3932]
	bl	sprintf
	mov	r0, sp
	mov	r1, r5
	bl	remove_proc_entry
	b	.L17530
.L17538:
	bl	__stack_chk_fail
	.fnend
	.size	rndis_exit, .-rndis_exit
	.align	2
	.global	ecm_ipa_init
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_ipa_init, %function
ecm_ipa_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	ecm_ipa_init, .-ecm_ipa_init
	.align	2
	.global	ecm_qc_get_ipa_rx_cb
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_get_ipa_rx_cb, %function
ecm_qc_get_ipa_rx_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3696]
	bx	lr
	.fnend
	.size	ecm_qc_get_ipa_rx_cb, .-ecm_qc_get_ipa_rx_cb
	.align	2
	.global	ecm_qc_get_ipa_tx_cb
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_get_ipa_tx_cb, %function
ecm_qc_get_ipa_tx_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3700]
	bx	lr
	.fnend
	.size	ecm_qc_get_ipa_tx_cb, .-ecm_qc_get_ipa_tx_cb
	.align	2
	.global	ecm_qc_get_ipa_priv
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_get_ipa_priv, %function
ecm_qc_get_ipa_priv:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3716]
	bx	lr
	.fnend
	.size	ecm_qc_get_ipa_priv, .-ecm_qc_get_ipa_priv
	.align	2
	.global	fmbim_free_req
	.syntax unified
	.arm
	.fpu softvfp
	.type	fmbim_free_req, %function
fmbim_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r1, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L17543
	mov	r4, r0
	ldr	r0, [r5]
	bl	kfree
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L17543:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	fmbim_free_req, .-fmbim_free_req
	.section	.text.unlikely
	.align	2
	.global	mbim_configure_params
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_configure_params, %function
mbim_configure_params:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L17548
	movw	r0, #:lower16:.LC1326
	push	{r4, lr}
	.save {r4, lr}
	movt	r0, #:upper16:.LC1326
	mov	r1, r2
	bl	printk
	mvn	r0, #0
	pop	{r4, pc}
.L17549:
	.align	2
.L17548:
	.word	.LANCHOR5+2000
	.fnend
	.size	mbim_configure_params, .-mbim_configure_params
	.text
	.align	2
	.global	bam_data_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_disconnect, %function
bam_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L17576
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	ldrh	r2, [r3, #-14]
	tst	r2, #4
	bne	.L17571
.L17551:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #3944]
	cmp	r5, r3
	bge	.L17572
	cmp	r6, #0
	beq	.L17573
	add	r5, r4, r5, lsl #2
	ldr	r5, [r5, #3936]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L17554
	ldr	r2, [r3, #8]
	cmp	r2, #0
	beq	.L17554
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L17554
	ldr	r0, [r3, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #4]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r5, #4]
	mov	r3, #0
	ldr	r2, [r2, #8]
	str	r3, [r2]
	ldr	r2, [r5, #4]
	ldr	r2, [r2, #12]
	str	r3, [r2]
	str	r3, [r5, #4]
.L17554:
	ldr	r3, [r5, #60]
	cmp	r3, #7
	beq	.L17574
	mov	r0, #0
	bl	usb_bam_client_ready
	cmp	r0, #0
	bne	.L17575
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L17574:
	ldr	r0, [r4, #3940]
	add	r1, r5, #184
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work
.L17571:
	movw	r1, #:lower16:.LC156
	sub	r0, r3, #32
	ldr	r2, .L17576+4
	movt	r1, #:upper16:.LC156
	mov	r3, r6
	str	r5, [sp]
	bl	__dynamic_pr_debug
	b	.L17551
.L17575:
	ldr	r2, .L17576+4
	movw	r0, #:lower16:.LC655
	movt	r0, #:upper16:.LC655
	mov	r1, r2
.L17570:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L17572:
	movw	r0, #:lower16:.LC654
	mov	r2, r5
	ldr	r1, .L17576+4
	movt	r0, #:upper16:.LC654
	b	.L17570
.L17573:
	ldr	r1, .L17576+4
	movw	r0, #:lower16:.LC653
	movt	r0, #:upper16:.LC653
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk
.L17577:
	.align	2
.L17576:
	.word	.LANCHOR4-1648
	.word	.LANCHOR5-3036
	.fnend
	.size	bam_data_disconnect, .-bam_data_disconnect
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_disable, %function
mbim_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, #0
	movw	r0, #:lower16:.LC1327
	ldr	r1, .L17584
	movt	r0, #:upper16:.LC1327
	bl	printk
	mov	r0, r4
	str	r5, [r4, #88]
	strb	r5, [r4, #164]
	bl	mbim_clear_queues
	mov	r0, r4
	bl	mbim_reset_function_queue
	movw	r0, #:lower16:.LC1328
	ldrb	r3, [r4, #136]	@ zero_extendqisi2
	mov	r2, r4
	ldr	r1, .L17584+4
	movt	r0, #:upper16:.LC1328
	bl	printk
	add	r0, r4, #140
	ldrb	r1, [r4, #136]	@ zero_extendqisi2
	bl	bam_data_disconnect
	ldr	r0, [r4, #156]
	ldr	r3, [r0]
	cmp	r3, r5
	beq	.L17579
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #156]
	str	r5, [r3]
.L17579:
	mov	r3, #0
	movw	r0, #:lower16:.LC1329
	ldr	r1, .L17584
	movt	r0, #:upper16:.LC1329
	str	r3, [r4, #168]
	pop	{r4, r5, r6, lr}
	b	printk
.L17585:
	.align	2
.L17584:
	.word	.LANCHOR5+2024
	.word	.LANCHOR5+2040
	.fnend
	.size	mbim_disable, .-mbim_disable
	.text
	.align	2
	.global	bam_data_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_connect, %function
bam_data_connect:
	.fnstart
	@ args = 8, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L17603
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r4, r1
	mov	r7, r2
	strd	r8, [sp, #16]
	mov	r9, r3
	str	r10, [sp, #24]
	ldrh	r3, [ip, #-6]
	str	lr, [sp, #28]
	.pad #8
	sub	sp, sp, #8
	ldrb	r8, [sp, #40]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L17598
.L17587:
	movw	r6, #:lower16:.LANCHOR1
	movt	r6, #:upper16:.LANCHOR1
	ldr	r3, [r6, #3944]
	cmp	r3, r4
	ble	.L17599
	cmp	r5, #0
	beq	.L17600
	ldr	r3, [r5, #8]
	add	r4, r6, r4, lsl #2
	ldr	r4, [r4, #3936]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r10, r0, #0
	bne	.L17601
	ldr	r3, [r5, #8]
	str	r4, [r3]
	ldr	r3, [r5, #12]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r10, r0, #0
	bne	.L17602
	ldr	r3, [r5, #12]
	cmp	r7, #7
	str	r4, [r3]
	ldr	r3, [sp, #44]
	str	r5, [r4, #4]
	strb	r9, [r4, #52]
	strb	r8, [r4, #53]
	str	r3, [r4, #56]
	str	r7, [r4, #60]
	bne	.L17593
	add	r2, r4, #44
	add	r3, r4, #48
	strb	r9, [r4, #64]
	strb	r8, [r4, #65]
	strd	r2, [r4, #68]
.L17593:
	add	r1, r4, #168
	ldr	r0, [r6, #3940]
	bl	queue_work
.L17586:
	mov	r0, r10
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L17598:
	movw	r1, #:lower16:.LC156
	sub	r0, ip, #24
	ldr	r2, .L17603+4
	movt	r1, #:upper16:.LC156
	mov	r3, r5
	str	r4, [sp]
	bl	__dynamic_pr_debug
	b	.L17587
.L17600:
	movw	r0, #:lower16:.LC653
	ldr	r1, .L17603+4
	mvn	r10, #18
	movt	r0, #:upper16:.LC653
	bl	printk
	b	.L17586
.L17602:
	movw	r0, #:lower16:.LC389
	ldr	r1, .L17603+4
	movt	r0, #:upper16:.LC389
	ldr	r2, [r5, #12]
	bl	printk
	ldr	r3, [r5, #8]
	mov	r2, #0
	str	r2, [r3]
	b	.L17586
.L17599:
	movw	r0, #:lower16:.LC176
	mov	r2, r4
	ldr	r1, .L17603+4
	movt	r0, #:upper16:.LC176
	mvn	r10, #18
	bl	printk
	b	.L17586
.L17601:
	movw	r0, #:lower16:.LC388
	ldr	r1, .L17603+4
	movt	r0, #:upper16:.LC388
	ldr	r2, [r5, #8]
	bl	printk
	b	.L17586
.L17604:
	.align	2
.L17603:
	.word	.LANCHOR4-1680
	.word	.LANCHOR5-3056
	.fnend
	.size	bam_data_connect, .-bam_data_connect
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_set_alt, %function
mbim_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	ldrb	r5, [r0, #196]	@ zero_extendqisi2
	.pad #8
	sub	sp, sp, #8
	mov	r6, r2
	ldr	r8, [r0, #84]
	cmp	r5, r1
	bne	.L17606
	movw	r0, #:lower16:.LC1330
	ldr	r1, .L17632
	movt	r0, #:upper16:.LC1330
	bl	printk
	cmp	r6, #0
	bne	.L17607
	ldr	r3, [r4, #156]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L17608
	movw	r0, #:lower16:.LC1331
	mov	r2, r5
	ldr	r1, .L17632
	movt	r0, #:upper16:.LC1331
	bl	printk
	ldr	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
.L17608:
	mov	r1, r4
	ldr	r0, [r8]
	ldr	r2, [r4, #156]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	ldr	r3, [r4, #156]
	beq	.L17609
	mov	r2, #0
	movw	r0, #:lower16:.LC1332
	ldr	r1, .L17632
	movt	r0, #:upper16:.LC1332
	str	r2, [r3, #28]
	ldr	r2, [r4, #156]
	mov	r3, r5
	ldr	r2, [r2, #4]
	bl	printk
	b	.L17605
.L17609:
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	ldr	r2, [r4, #156]
	beq	.L17611
	movw	r0, #:lower16:.LC1046
	mov	r3, r5
	ldr	r1, .L17632
	movt	r0, #:upper16:.LC1046
	ldr	r2, [r2, #4]
	bl	printk
	b	.L17605
.L17611:
	str	r4, [r2]
	b	.L17612
.L17606:
	ldrb	r3, [r0, #197]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L17607
	movw	r0, #:lower16:.LC1333
	ldr	r1, .L17632
	movt	r0, #:upper16:.LC1333
	bl	printk
	cmp	r6, #1
	bhi	.L17607
	ldr	r3, [r4, #148]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L17613
	movw	r0, #:lower16:.LC1334
	ldr	r1, .L17632
	movt	r0, #:upper16:.LC1334
	bl	printk
	ldr	r3, .L17632+4
	mov	r2, #16384
	mov	r1, #0
	str	r1, [r4, #88]
	str	r3, [r4, #200]
	str	r2, [r4, #224]
.L17613:
	cmp	r6, #1
	bne	.L17614
	movw	r0, #:lower16:.LC1335
	ldr	r1, .L17632
	movt	r0, #:upper16:.LC1335
	bl	printk
	ldr	r3, [r4, #148]
	ldr	r7, [r3, #28]
	cmp	r7, #0
	bne	.L17615
	movw	r0, #:lower16:.LC1336
	ldr	r1, .L17632
	movt	r0, #:upper16:.LC1336
	bl	printk
	mov	r1, r4
	ldr	r0, [r8]
	ldr	r2, [r4, #148]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	ldr	r3, [r4, #148]
	beq	.L17616
	str	r7, [r3, #28]
	ldr	r2, [r4, #148]
	movw	r0, #:lower16:.LC1337
	ldr	r1, .L17632
	mov	r3, r5
	movt	r0, #:upper16:.LC1337
	ldr	r2, [r2, #4]
	bl	printk
	b	.L17605
.L17616:
	movw	r0, #:lower16:.LC1338
	ldr	r1, .L17632
	movt	r0, #:upper16:.LC1338
	ldr	r2, [r3, #28]
	bl	printk
	mov	r1, r4
	ldr	r0, [r8]
	ldr	r2, [r4, #152]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	ldr	r3, [r4, #152]
	beq	.L17617
	str	r7, [r3, #28]
	ldr	r2, [r4, #152]
	movw	r0, #:lower16:.LC1339
	ldr	r1, .L17632
	mov	r3, r5
	movt	r0, #:upper16:.LC1339
	ldr	r2, [r2, #4]
	bl	printk
	b	.L17605
.L17617:
	movw	r0, #:lower16:.LC1340
	ldr	r1, .L17632
	movt	r0, #:upper16:.LC1340
	ldr	r2, [r3, #28]
	bl	printk
	ldr	r0, .L17632+8
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L17618
	movw	r1, #:lower16:.LC1341
	sub	r0, r0, #32
	ldr	r2, .L17632
	movt	r1, #:upper16:.LC1341
	bl	__dynamic_pr_debug
.L17618:
	ldr	lr, [r4, #84]
	movw	r0, #:lower16:.LC1342
	mov	r2, r4
	ldr	ip, [r4, #132]
	movt	r0, #:upper16:.LC1342
	ldrb	r3, [r4, #136]	@ zero_extendqisi2
	ldr	r1, .L17632+12
	ldr	r5, [lr]
	cmp	ip, #7
	moveq	r7, #2
	movne	r7, #0
	bl	printk
	mov	r1, r7
	ldrb	r3, [r4, #136]	@ zero_extendqisi2
	mov	r2, #0
	ldr	r0, [r5, #28]
	bl	usb_bam_get_connection_idx
	mov	r8, r0
	mov	r1, r7
	ldrb	r3, [r4, #136]	@ zero_extendqisi2
	mov	r2, #1
	ldr	r0, [r5, #28]
	bl	usb_bam_get_connection_idx
	uxtb	ip, r0
	mov	lr, #1
	ldrb	r1, [r4, #136]	@ zero_extendqisi2
	uxtb	r3, r8
	ldr	r2, [r4, #132]
	add	r0, r4, #140
	stm	sp, {ip, lr}
	bl	bam_data_connect
	subs	r2, r0, #0
	beq	.L17620
	movw	r0, #:lower16:.LC1343
	ldr	r1, .L17632+12
	movt	r0, #:upper16:.LC1343
	bl	printk
	b	.L17614
.L17620:
	movw	r0, #:lower16:.LC1344
	ldr	r1, .L17632+12
	movt	r0, #:upper16:.LC1344
	bl	printk
	b	.L17614
.L17615:
	movw	r0, #:lower16:.LC1345
	ldr	r1, .L17632
	movt	r0, #:upper16:.LC1345
	bl	printk
.L17614:
	add	r5, r4, #204
	strb	r6, [r4, #198]
	mov	r0, r5
	bl	_raw_spin_lock
	mov	r3, #3
	mov	r0, r5
	strb	r3, [r4, #164]
	bl	_raw_spin_unlock
.L17612:
	mov	r6, #1
	movw	r0, #:lower16:.LC1346
	ldr	r1, .L17632
	mov	r5, #0
	movt	r0, #:upper16:.LC1346
	str	r6, [r4, #88]
	bl	printk
	mov	r2, r6
	mov	r3, r5
	add	r0, r4, #108
	mov	r1, #3
	bl	__wake_up
	mov	r2, r6
	add	r0, r4, #120
	mov	r3, r5
	mov	r1, #3
	bl	__wake_up
	b	.L17605
.L17607:
	movw	r0, #:lower16:.LC1347
	ldr	r1, .L17632
	mvn	r5, #21
	movt	r0, #:upper16:.LC1347
	bl	printk
.L17605:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	pop	{r4, r5, r6, r7, r8, pc}
.L17633:
	.align	2
.L17632:
	.word	.LANCHOR5+2060
	.word	.LANCHOR0+1488
	.word	.LANCHOR8-1168
	.word	.LANCHOR5+2076
	.fnend
	.size	mbim_set_alt, .-mbim_set_alt
	.text
	.align	2
	.global	bam_data_destroy
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_destroy, %function
bam_data_destroy:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR4
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movt	r3, #:upper16:.LANCHOR4
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrh	r2, [r3, #-126]
	tst	r2, #4
	bne	.L17644
.L17635:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	add	r5, r4, r5, lsl #2
	ldr	r0, [r5, #3936]
	bl	kfree
	ldr	r0, [r4, #3940]
	mov	r3, #0
	str	r3, [r5, #3936]
	cmp	r0, r3
	beq	.L17636
	bl	destroy_workqueue
.L17636:
	mov	r3, #0
	ldr	r6, [sp, #8]
	mov	r0, r3
	str	r3, [r4, #3940]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L17644:
	movw	r1, #:lower16:.LC750
	sub	r0, r3, #144
	ldr	r2, .L17645
	movt	r1, #:upper16:.LC750
	bl	__dynamic_pr_debug
	b	.L17635
.L17646:
	.align	2
.L17645:
	.word	.LANCHOR5-1928
	.fnend
	.size	bam_data_destroy, .-bam_data_destroy
	.align	2
	.global	bam_data_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_setup, %function
bam_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L17675
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	ldrh	r2, [r3, #-6]
	tst	r2, #4
	bne	.L17669
.L17648:
	cmp	r5, #1
	bne	.L17670
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r2, [r4, #3940]
	cmp	r2, #0
	beq	.L17651
	ldr	r0, .L17675+4
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L17652
.L17668:
	mov	r0, #0
.L17647:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L17651:
	movw	r0, #:lower16:.LC1350
	mov	r3, r2
	str	r2, [sp]
	movt	r0, #:upper16:.LC1350
	mov	r1, #10
	mov	r2, r5
	bl	__alloc_workqueue_key
	cmp	r0, #0
	str	r0, [r4, #3940]
	beq	.L17671
	movw	r2, #:lower16:kmalloc_caches
	ldr	r3, [r4, #3944]
	movt	r2, #:upper16:kmalloc_caches
	ldr	r0, [r2, #32]
	add	r3, r3, #1
	cmp	r0, #0
	str	r3, [r4, #3944]
	beq	.L17672
	mov	r2, #232
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r3, r0, #0
	beq	.L17673
.L17654:
	ldr	r0, .L17675+8
	mov	r5, #0
	movw	ip, #:lower16:bam2bam_data_suspend_work
	movt	ip, #:upper16:bam2bam_data_suspend_work
	movw	r1, #:lower16:bam2bam_data_connect_work
	str	r5, [r3]
	movt	r1, #:upper16:bam2bam_data_connect_work
	movw	r2, #:lower16:bam2bam_data_disconnect_work
	str	r3, [r3, #16]
	movt	r2, #:upper16:bam2bam_data_disconnect_work
	ldrh	lr, [r0, #-6]
	str	r1, [r3, #180]
	movw	r1, #:lower16:bam2bam_data_resume_work
	str	ip, [r3, #212]
	add	ip, r3, #172
	movt	r1, #:upper16:bam2bam_data_resume_work
	str	r3, [r4, #3936]
	add	r4, r3, #188
	str	ip, [r3, #172]
	tst	lr, #4
	add	lr, r3, #204
	str	ip, [r3, #176]
	add	ip, r3, #220
	str	r2, [r3, #196]
	mov	r2, #2560
	str	r2, [r3, #168]
	str	r2, [r3, #184]
	str	r4, [r3, #188]
	str	r4, [r3, #192]
	str	r2, [r3, #200]
	str	lr, [r3, #204]
	str	lr, [r3, #208]
	str	r2, [r3, #216]
	str	ip, [r3, #220]
	str	ip, [r3, #224]
	str	r1, [r3, #228]
	beq	.L17668
	movw	r1, #:lower16:.LC1254
	ldr	r2, .L17675+12
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC1254
	str	r5, [sp]
	bl	__dynamic_pr_debug
	mov	r0, r5
	b	.L17647
.L17672:
	mov	r3, #16
	b	.L17654
.L17669:
	movw	r1, #:lower16:.LC1348
	sub	r0, r3, #24
	ldr	r2, .L17675+16
	movt	r1, #:upper16:.LC1348
	mov	r3, r5
	bl	__dynamic_pr_debug
	b	.L17648
.L17652:
	movw	r1, #:lower16:.LC1349
	ldr	r2, .L17675+16
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1349
	bl	__dynamic_pr_debug
	b	.L17668
.L17673:
	ldr	ip, [r4, #3944]
	movw	r0, #:lower16:.LC1352
	mov	r2, r3
	movt	r0, #:upper16:.LC1352
	ldr	r1, .L17675+16
	mov	r5, r3
	mov	r7, r3
	add	r6, r4, #3936
	sub	ip, ip, #1
	str	ip, [r4, #3944]
	bl	printk
.L17655:
	ldr	r3, [r4, #3944]
	cmp	r5, r3
	bge	.L17674
	ldr	r0, [r6]
	add	r5, r5, #1
	bl	kfree
	str	r7, [r6], #4
	b	.L17655
.L17670:
	movw	r0, #:lower16:.LC1271
	mov	r2, r5
	ldr	r1, .L17675+16
	movt	r0, #:upper16:.LC1271
	bl	printk
	mvn	r0, #21
	b	.L17647
.L17671:
	movw	r0, #:lower16:.LC1351
	ldr	r1, .L17675+16
	movt	r0, #:upper16:.LC1351
	bl	printk
	mvn	r0, #11
	b	.L17647
.L17674:
	ldr	r0, [r4, #3940]
	bl	destroy_workqueue
	mvn	r0, #11
	b	.L17647
.L17676:
	.align	2
.L17675:
	.word	.LANCHOR8-1152
	.word	.LANCHOR8-1120
	.word	.LANCHOR8-1104
	.word	.LANCHOR5+2112
	.word	.LANCHOR5+2096
	.fnend
	.size	bam_data_setup, .-bam_data_setup
	.align	2
	.global	ecm_qc_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_bind_config, %function
ecm_qc_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	movw	r0, #:lower16:.LC506
	strd	r8, [sp, #16]
	movt	r0, #:upper16:.LC506
	mov	r9, r2
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r7, #24]
	.pad #24
	sub	sp, sp, #24
	ldr	r3, [r3]
	ldr	r4, [r3, #28]
	mov	r1, r4
	bl	strcmp
	cmp	r0, #0
	beq	.L17696
	movw	r0, #:lower16:.LC509
	mov	r1, r4
	movt	r0, #:upper16:.LC509
	bl	strcmp
	cmp	r5, #0
	cmpne	r0, #0
	beq	.L17696
	mov	r0, #1
	bl	bam_data_setup
	subs	r8, r0, #0
	bne	.L17679
	ldr	r8, .L17730
	ldrh	r3, [r8, #-14]
	tst	r3, #4
	bne	.L17722
.L17681:
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldrb	r3, [r6, #1448]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L17682
	ldr	r2, [r7, #24]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L17684
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r2, [r7, #24]
	strb	r3, [r6, #1448]
	strb	r3, [r6, #2712]
	ldrb	r3, [r2, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L17684
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #48]
	ldr	r1, [r7, #24]
	strb	r3, [r6, #1464]
	strb	r3, [r6, #2744]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L17684
	add	r3, r3, #1
	movw	r2, #:lower16:.LANCHOR6
	uxtb	r3, r3
	movt	r2, #:upper16:.LANCHOR6
	strb	r3, [r2, #-1201]
	strb	r3, [r1, #48]
	strb	r3, [r6, #1456]
.L17682:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L17697
	mov	r2, #172
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L17723
.L17685:
	mov	r0, r9
	bl	str_to_xport
	ldr	r3, .L17730+4
	str	r0, [r4, #124]
	ldrh	r3, [r3, #-6]
	tst	r3, #4
	bne	.L17724
.L17686:
	cmp	r0, #7
	add	r8, r4, #128
	beq	.L17725
	ldrb	r3, [r5, #5]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC1359
	mov	r1, #14
	ldrb	r10, [r5, #4]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC1359
	mov	r0, r8
	ldrb	r9, [r5, #3]	@ zero_extendqisi2
	ldrb	lr, [r5, #2]	@ zero_extendqisi2
	str	r3, [sp, #16]
	ldrb	ip, [r5, #1]	@ zero_extendqisi2
	ldrb	r3, [r5]	@ zero_extendqisi2
.L17721:
	stm	sp, {ip, lr}
	str	r9, [sp, #8]
	str	r10, [sp, #12]
	bl	snprintf
	ldr	lr, .L17730+8
	movw	r3, #:lower16:.LC1360
	movw	ip, #:lower16:ecm_qc_unbind
	movt	r3, #:upper16:.LC1360
	movt	ip, #:upper16:ecm_qc_unbind
	str	r8, [r6, #1460]
	movw	r1, #:lower16:ecm_qc_bind
	movw	r2, #:lower16:ecm_qc_set_alt
	movt	r1, #:upper16:ecm_qc_bind
	movt	r2, #:upper16:ecm_qc_set_alt
	stm	r4, {r3, lr}
	movw	r3, #:lower16:ecm_qc_get_alt
	mov	r0, r7
	movt	r3, #:upper16:ecm_qc_get_alt
	str	r1, [r4, #32]
	movw	r1, #:lower16:ecm_qc_setup
	str	ip, [r4, #36]
	movw	ip, #:lower16:ecm_qc_disable
	movt	r1, #:upper16:ecm_qc_setup
	movt	ip, #:upper16:ecm_qc_disable
	str	r2, [r4, #40]
	movw	r2, #:lower16:ecm_qc_suspend
	str	r3, [r4, #44]
	movw	r3, #:lower16:ecm_qc_resume
	movt	r2, #:upper16:ecm_qc_suspend
	movt	r3, #:upper16:ecm_qc_resume
	str	ip, [r4, #48]
	mov	ip, #15
	str	r1, [r4, #52]
	mov	r1, r4
	str	r2, [r4, #56]
	str	r3, [r4, #60]
	strh	ip, [r4, #98]	@ movhi
	bl	usb_add_function
	subs	r8, r0, #0
	bne	.L17726
	ldr	r3, [r4, #124]
	cmp	r3, #7
	bne	.L17677
	ldr	r0, .L17730+12
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L17727
.L17693:
	ldr	r0, .L17730+16
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	beq	.L17677
	movw	r1, #:lower16:.LC1363
	ldr	r2, .L17730+20
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC1363
	bl	__dynamic_pr_debug
	b	.L17677
.L17696:
	mvn	r8, #21
.L17677:
	mov	r0, r8
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L17697:
	mov	r4, #16
	b	.L17685
.L17725:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	add	r9, r5, #3696
	ldr	r0, [r5, #4064]
	add	r1, r9, #14
	bl	get_qc_ether_addr
	cmp	r0, #0
	beq	.L17688
	ldr	r0, .L17730+24
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L17728
.L17688:
	add	r1, r9, #8
	ldr	r0, [r5, #4068]
	bl	get_qc_ether_addr
	cmp	r0, #0
	beq	.L17689
	ldr	r0, .L17730+28
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L17729
.L17689:
	ldrb	r3, [r5, #3709]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC1359
	mov	r1, #14
	ldrb	r10, [r5, #3708]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC1359
	mov	r0, r8
	ldrb	r9, [r5, #3707]	@ zero_extendqisi2
	ldrb	lr, [r5, #3706]	@ zero_extendqisi2
	str	r3, [sp, #16]
	ldrb	ip, [r5, #3705]	@ zero_extendqisi2
	ldrb	r3, [r5, #3704]	@ zero_extendqisi2
	b	.L17721
.L17727:
	ldr	r3, .L17730+32
	movw	r1, #:lower16:.LC1362
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC1362
	ldr	r2, .L17730+20
	str	r3, [sp]
	sub	r3, r3, #6
	bl	__dynamic_pr_debug
	b	.L17693
.L17684:
	mvn	r8, #18
	b	.L17677
.L17722:
	movw	r1, #:lower16:.LC1355
	mov	r3, r9
	ldr	r2, .L17730+20
	movt	r1, #:upper16:.LC1355
	sub	r0, r8, #32
	bl	__dynamic_pr_debug
	b	.L17681
.L17724:
	movw	r1, #:lower16:.LC1356
	mov	r3, r0
	ldr	r2, .L17730+20
	sub	r0, r8, #8
	movt	r1, #:upper16:.LC1356
	bl	__dynamic_pr_debug
	ldr	r0, [r4, #124]
	b	.L17686
.L17729:
	movw	r1, #:lower16:.LC1358
	ldr	r2, .L17730+36
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC1358
	bl	__dynamic_pr_debug
	b	.L17689
.L17728:
	movw	r1, #:lower16:.LC1357
	ldr	r2, .L17730+36
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1357
	bl	__dynamic_pr_debug
	b	.L17688
.L17723:
	mvn	r8, #11
	b	.L17677
.L17726:
	movw	r0, #:lower16:.LC1361
	ldr	r1, .L17730+20
	movt	r0, #:upper16:.LC1361
	bl	printk
	mov	r3, #0
	mov	r0, r4
	str	r3, [r6, #1460]
	bl	kfree
	b	.L17677
.L17679:
	movw	r0, #:lower16:.LC1353
	mov	r2, r8
	ldr	r1, .L17730+40
	movt	r0, #:upper16:.LC1353
	bl	printk
	movw	r0, #:lower16:.LC1354
	ldr	r1, .L17730+20
	movt	r0, #:upper16:.LC1354
	bl	printk
	b	.L17677
.L17731:
	.align	2
.L17730:
	.word	.LANCHOR8-1072
	.word	.LANCHOR8-1056
	.word	.LANCHOR6-1188
	.word	.LANCHOR8-988
	.word	.LANCHOR8-964
	.word	.LANCHOR5+2156
	.word	.LANCHOR8-1024
	.word	.LANCHOR8-1012
	.word	.LANCHOR1+3710
	.word	.LANCHOR5+2176
	.word	.LANCHOR5+2136
	.fnend
	.size	ecm_qc_bind_config, .-ecm_qc_bind_config
	.section	.text.unlikely
	.align	2
	.global	mbim_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_bind_config, %function
mbim_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	mov	r7, r1
	mov	r5, r0
	movw	r4, #:lower16:.LANCHOR1
	ldr	r1, .L17743
	movw	r0, #:lower16:.LC1364
	mov	r6, r2
	movt	r0, #:upper16:.LC1364
	mov	r2, r7
	movt	r4, #:upper16:.LANCHOR1
	bl	printk
	ldr	r8, [r4, #3740]
	cmp	r8, r7
	bhi	.L17733
	movw	r0, #:lower16:.LC1365
	mov	r2, r7
	ldr	r1, .L17743
	mov	r3, r8
	movt	r0, #:upper16:.LC1365
	bl	printk
	mvn	r7, #18
	b	.L17732
.L17733:
	movw	r0, #:lower16:.LC1366
	mov	r2, r8
	ldr	r1, .L17743+4
	movt	r0, #:upper16:.LC1366
	bl	printk
	mov	r0, r8
	bl	bam_data_setup
	subs	r7, r0, #0
	beq	.L17735
	movw	r0, #:lower16:.LC1353
	mov	r2, r7
	ldr	r1, .L17743+4
	movt	r0, #:upper16:.LC1353
	bl	printk
	movw	r0, #:lower16:.LC1354
	ldr	r1, .L17743
	movt	r0, #:upper16:.LC1354
	bl	printk
	b	.L17732
.L17735:
	movw	r0, #:lower16:.LC647
	ldr	r1, .L17743+4
	mov	r2, r8
	movt	r0, #:upper16:.LC647
	bl	printk
	movw	r1, #:lower16:.LANCHOR6
	movt	r1, #:upper16:.LANCHOR6
	ldrb	r3, [r1, #-1180]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L17736
	ldr	r0, [r5, #24]
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bls	.L17737
.L17738:
	mvn	r7, #18
	b	.L17732
.L17737:
	add	r3, r3, #1
	movw	r2, #:lower16:.LANCHOR0
	uxtb	r3, r3
	movt	r2, #:upper16:.LANCHOR0
	strb	r3, [r0, #48]
	ldr	r0, [r5, #24]
	strb	r3, [r1, #-1180]
	strb	r3, [r2, #3004]
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L17738
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #-1172]
	strb	r3, [r0, #48]
	strb	r3, [r2, #3024]
	strb	r3, [r2, #3036]
.L17736:
	ldr	r4, [r4, #3732]
	cmp	r4, #0
	bne	.L17739
	movw	r0, #:lower16:.LC1367
	ldr	r1, .L17743
	mvn	r7, #11
	movt	r0, #:upper16:.LC1367
	bl	printk
	b	.L17732
.L17739:
	ldr	ip, .L17743+8
	movw	r2, #:lower16:.LC1368
	movw	r3, #:lower16:mbim_bind
	ldr	r1, [r5, #24]
	movt	r2, #:upper16:.LC1368
	movt	r3, #:upper16:mbim_bind
	movw	r7, #:lower16:.LANCHOR0
	mov	r0, r6
	movt	r7, #:upper16:.LANCHOR0
	stm	r4, {r2, ip}
	movw	r2, #:lower16:mbim_set_alt
	movw	ip, #:lower16:mbim_get_alt
	str	r3, [r4, #32]
	movw	r3, #:lower16:mbim_setup
	movt	r2, #:upper16:mbim_set_alt
	movt	r3, #:upper16:mbim_setup
	add	lr, r7, #1488
	str	r1, [r4, #84]
	movw	r1, #:lower16:mbim_unbind
	movt	ip, #:upper16:mbim_get_alt
	movt	r1, #:upper16:mbim_unbind
	str	r3, [r4, #52]
	movw	r3, #:lower16:mbim_resume
	str	r1, [r4, #36]
	movw	r1, #:lower16:mbim_disable
	movt	r3, #:upper16:mbim_resume
	str	r2, [r4, #40]
	movw	r2, #:lower16:mbim_suspend
	movt	r1, #:upper16:mbim_disable
	movt	r2, #:upper16:mbim_suspend
	str	ip, [r4, #44]
	str	r1, [r4, #48]
	mov	r1, #16384
	strd	r2, [r4, #56]
	mov	r2, #0
	str	lr, [r4, #200]
	str	r2, [r4, #88]
	str	r1, [r4, #224]
	bl	str_to_xport
	cmp	r0, #7
	str	r0, [r4, #132]
	movne	r3, #6
	strne	r3, [r4, #132]
	bne	.L17741
	mov	r3, #8192
	mov	r2, #16
	mov	r1, #1
	str	r3, [r7, #184]
	strh	r1, [r7, #188]	@ movhi
	str	r3, [r7, #196]
	strh	r2, [r7, #206]	@ movhi
.L17741:
	add	r2, r4, #208
	add	r3, r4, #216
	mov	r1, r4
	mov	r0, r5
	str	r2, [r4, #208]
	strd	r2, [r4, #212]
	str	r3, [r4, #220]
	bl	usb_add_function
	mov	r7, r0
	mov	r2, r0
	ldr	r1, .L17743
	movw	r0, #:lower16:.LC1369
	movt	r0, #:upper16:.LC1369
	bl	printk
.L17732:
	mov	r0, r7
	pop	{r4, r5, r6, r7, r8, pc}
.L17744:
	.align	2
.L17743:
	.word	.LANCHOR5+2196
	.word	.LANCHOR5+2216
	.word	.LANCHOR6-1156
	.fnend
	.size	mbim_bind_config, .-mbim_bind_config
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	mbim_function_bind_config, %function
mbim_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L17752
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L17751
.L17746:
	ldr	r0, .L17752+4
	bl	strim
	mov	r2, r0
	mov	r1, #0
	mov	r0, r4
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	mbim_bind_config
.L17751:
	ldr	r2, .L17752+4
	movw	r1, #:lower16:.LC1370
	sub	r0, r0, #20
	ldr	r3, .L17752+8
	movt	r1, #:upper16:.LC1370
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L17746
.L17753:
	.align	2
.L17752:
	.word	.LANCHOR8-940
	.word	.LANCHOR1+3176
	.word	.LANCHOR5+2232
	.fnend
	.size	mbim_function_bind_config, .-mbim_function_bind_config
	.align	2
	.global	bam_data_suspend
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_suspend, %function
bam_data_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L17761
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	add	r2, r4, r0, lsl #2
	ldrh	r3, [ip, #-14]
	ldr	r5, [r2, #3936]
	tst	r3, #4
	bne	.L17760
.L17755:
	ldr	r0, [r4, #3940]
	add	r1, r5, #200
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work
.L17760:
	ldr	r3, .L17761+4
	mov	r2, r0
	movw	r1, #:lower16:.LC652
	sub	r0, ip, #32
	movt	r1, #:upper16:.LC652
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L17755
.L17762:
	.align	2
.L17761:
	.word	.LANCHOR4-1696
	.word	.LANCHOR5-3076
	.fnend
	.size	bam_data_suspend, .-bam_data_suspend
	.align	2
	.global	bam_data_resume
	.syntax unified
	.arm
	.fpu softvfp
	.type	bam_data_resume, %function
bam_data_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L17770
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	add	r2, r4, r0, lsl #2
	ldrh	r3, [ip, #-6]
	ldr	r5, [r2, #3936]
	tst	r3, #4
	bne	.L17769
.L17764:
	ldr	r0, [r4, #3940]
	add	r1, r5, #216
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_work
.L17769:
	ldr	r3, .L17770+4
	mov	r2, r0
	movw	r1, #:lower16:.LC650
	sub	r0, ip, #24
	movt	r1, #:upper16:.LC650
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L17764
.L17771:
	.align	2
.L17770:
	.word	.LANCHOR4-1728
	.word	.LANCHOR5-3108
	.fnend
	.size	bam_data_resume, .-bam_data_resume
	.align	2
	.global	ecm_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_bind_config, %function
ecm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	movw	r0, #:lower16:.LC506
	strd	r8, [sp, #16]
	movt	r0, #:upper16:.LC506
	str	lr, [sp, #24]
	ldr	r8, [r7, #24]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r8]
	ldr	r4, [r3, #28]
	mov	r1, r4
	bl	strcmp
	cmp	r0, #0
	beq	.L17779
	movw	r0, #:lower16:.LC509
	mov	r1, r4
	movt	r0, #:upper16:.LC509
	bl	strcmp
	cmp	r0, #0
	cmpne	r5, #0
	beq	.L17779
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldrb	r3, [r6, #1616]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L17774
	ldrb	r3, [r8, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L17776
	add	r3, r3, #1
	movw	r2, #:lower16:.LANCHOR6
	uxtb	r3, r3
	movt	r2, #:upper16:.LANCHOR6
	strb	r3, [r8, #48]
	ldr	r1, [r7, #24]
	strb	r3, [r2, #-3512]
	strb	r3, [r6, #1616]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L17776
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	ldr	r1, [r7, #24]
	strb	r3, [r2, #-3480]
	strb	r3, [r6, #1632]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L17776
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	ldr	r1, [r7, #24]
	strb	r3, [r2, #-1145]
	strb	r3, [r6, #1624]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L17776
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #-3521]
	strb	r3, [r1, #48]
	strb	r3, [r6, #1640]
.L17774:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L17780
	mov	r2, #176
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L17786
.L17777:
	ldrb	r3, [r5, #5]	@ zero_extendqisi2
	add	r8, r4, #150
	movw	r2, #:lower16:.LC1359
	ldrb	lr, [r5, #3]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC1359
	mov	r0, r8
	ldrb	r1, [r5, #2]	@ zero_extendqisi2
	ldrb	r9, [r5, #4]	@ zero_extendqisi2
	str	r3, [sp, #16]
	ldrb	ip, [r5, #1]	@ zero_extendqisi2
	ldrb	r3, [r5]	@ zero_extendqisi2
	ldr	r5, .L17787
	str	ip, [sp]
	stmib	sp, {r1, lr}
	mov	r1, #14
	str	r9, [sp, #12]
	bl	snprintf
	movw	r3, #:lower16:.LC1360
	movw	r0, #:lower16:ecm_bind
	str	r8, [r6, #1628]
	movt	r3, #:upper16:.LC1360
	movw	lr, #:lower16:ecm_unbind
	movw	r1, #:lower16:ecm_set_alt
	movw	ip, #:lower16:ecm_get_alt
	movw	r2, #:lower16:ecm_disable
	stm	r4, {r3, r5}
	movw	r3, #:lower16:ecm_setup
	movt	r0, #:upper16:ecm_bind
	movt	lr, #:upper16:ecm_unbind
	movt	r1, #:upper16:ecm_set_alt
	movt	ip, #:upper16:ecm_get_alt
	movt	r2, #:upper16:ecm_disable
	movt	r3, #:upper16:ecm_setup
	str	r0, [r4, #32]
	mov	r5, #15
	mov	r0, r7
	str	lr, [r4, #36]
	str	r1, [r4, #40]
	mov	r1, r4
	str	ip, [r4, #44]
	str	r2, [r4, #48]
	str	r3, [r4, #52]
	strh	r5, [r4, #98]	@ movhi
	bl	usb_add_function
	subs	r5, r0, #0
	beq	.L17772
	mov	r3, #0
	mov	r0, r4
	str	r3, [r6, #1628]
	bl	kfree
	b	.L17772
.L17779:
	mvn	r5, #21
.L17772:
	mov	r0, r5
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L17780:
	mov	r4, #16
	b	.L17777
.L17776:
	mvn	r5, #18
	b	.L17772
.L17786:
	mvn	r5, #11
	b	.L17772
.L17788:
	.align	2
.L17787:
	.word	.LANCHOR6-1132
	.fnend
	.size	ecm_bind_config, .-ecm_bind_config
	.align	2
	.global	rndis_qc_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_bind_config, %function
rndis_qc_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:__stack_chk_guard
	movt	r6, #:upper16:__stack_chk_guard
	strd	r8, [sp, #16]
	subs	r8, r1, #0
	ldr	r3, [r6]
	str	lr, [sp, #24]
	.pad #28
	sub	sp, sp, #28
	str	r3, [sp, #20]
	beq	.L17802
	movw	r5, #:lower16:.LANCHOR1
	mov	r7, r0
	movt	r5, #:upper16:.LANCHOR1
	ldrb	r3, [r5, #3932]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L17794
	bl	rndis_init.part.89
	subs	r9, r0, #0
	blt	.L17789
.L17794:
	mov	r0, #1
	bl	bam_data_setup
	subs	r9, r0, #0
	bne	.L17810
	movw	r3, #:lower16:.LANCHOR6
	movt	r3, #:upper16:.LANCHOR6
	ldrb	r2, [r3, #-1124]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L17796
	ldr	r0, [r7, #24]
	ldrb	r2, [r0, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L17798
	add	r2, r2, #1
	movw	r1, #:lower16:.LANCHOR0
	uxtb	r2, r2
	movt	r1, #:upper16:.LANCHOR0
	strb	r2, [r0, #48]
	ldr	r0, [r7, #24]
	strb	r2, [r3, #-1124]
	strb	r2, [r1, #3732]
	ldrb	r2, [r0, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L17798
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r0, #48]
	ldr	r0, [r7, #24]
	strb	r2, [r3, #-1116]
	strb	r2, [r1, #3752]
	ldrb	r2, [r0, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L17798
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r3, #-1108]
	strb	r2, [r0, #48]
	strb	r2, [r1, #3723]
.L17796:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L17803
	mov	r2, #184
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L17811
.L17799:
	ldr	ip, [r8]	@ unaligned
	movw	r3, #:lower16:rndis_qc_add_header
	movw	r2, #:lower16:rndis_qc_rm_hdr
	ldr	r1, .L17814
	movt	r3, #:upper16:rndis_qc_add_header
	movt	r2, #:upper16:rndis_qc_rm_hdr
	mov	r0, r7
	str	ip, [r4, #122]	@ unaligned
	movw	ip, #:lower16:.LC1312
	ldrh	lr, [r8, #4]	@ unaligned
	str	r1, [r4, #4]
	movw	r1, #:lower16:rndis_qc_bind
	movt	ip, #:upper16:.LC1312
	movt	r1, #:upper16:rndis_qc_bind
	str	ip, [r4]
	movw	ip, #:lower16:rndis_qc_set_alt
	str	r1, [r4, #32]
	movw	r1, #:lower16:rndis_qc_setup
	movt	ip, #:upper16:rndis_qc_set_alt
	movt	r1, #:upper16:rndis_qc_setup
	str	r3, [r4, #104]
	movw	r3, #:lower16:rndis_qc_unbind
	movt	r3, #:upper16:rndis_qc_unbind
	str	r3, [r4, #36]
	movw	r3, #:lower16:rndis_qc_disable
	str	ip, [r4, #40]
	movw	ip, #:lower16:rndis_qc_suspend
	movt	r3, #:upper16:rndis_qc_disable
	str	r1, [r4, #52]
	movw	r1, #:lower16:rndis_qc_resume
	movt	ip, #:upper16:rndis_qc_suspend
	movt	r1, #:upper16:rndis_qc_resume
	str	r3, [r4, #48]
	mov	r3, #0
	str	ip, [r4, #56]
	mov	ip, #1
	str	r1, [r4, #60]
	mov	r1, #44
	strh	r3, [r4, #98]	@ movhi
	str	r1, [r4, #100]
	mov	r1, r4
	str	r2, [r4, #108]
	strh	lr, [r4, #126]	@ unaligned
	str	r3, [r4, #128]
	strb	ip, [r4, #132]
	str	r3, [r4, #140]
	bl	usb_add_function
	subs	r9, r0, #0
	streq	r4, [r5, #2496]
	beq	.L17789
.L17800:
	mov	r0, r4
	mov	r4, #0
	bl	kfree
	ldrb	r3, [r5, #3932]	@ zero_extendqisi2
	str	r4, [r5, #2496]
	cmp	r3, r4
	bne	.L17812
.L17789:
	ldr	r2, [sp, #20]
	mov	r0, r9
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L17813
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L17803:
	mov	r4, #16
	b	.L17799
.L17812:
	movw	r1, #:lower16:.LC640
	mov	r2, r4
	strb	r4, [r5, #3932]
	movt	r1, #:upper16:.LC640
	mov	r0, sp
	bl	sprintf
	mov	r0, sp
	mov	r1, r4
	bl	remove_proc_entry
	b	.L17789
.L17811:
	mvn	r9, #11
	b	.L17800
.L17798:
	mvn	r9, #18
	b	.L17789
.L17802:
	mvn	r9, #21
	b	.L17789
.L17813:
	bl	__stack_chk_fail
.L17810:
	movw	r0, #:lower16:.LC1353
	mov	r2, r9
	ldr	r1, .L17814+4
	movt	r0, #:upper16:.LC1353
	bl	printk
	movw	r0, #:lower16:.LC1354
	ldr	r1, .L17814+8
	movt	r0, #:upper16:.LC1354
	bl	printk
	b	.L17789
.L17815:
	.align	2
.L17814:
	.word	.LANCHOR6-1092
	.word	.LANCHOR5+2260
	.word	.LANCHOR5+2280
	.fnend
	.size	rndis_qc_bind_config, .-rndis_qc_bind_config
	.align	2
	.global	rndis_qc_bind_config_vendor
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_bind_config_vendor, %function
rndis_qc_bind_config_vendor:
	.fnstart
	@ args = 4, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	movw	r6, #:lower16:__stack_chk_guard
	movt	r6, #:upper16:__stack_chk_guard
	strd	r8, [sp, #16]
	subs	r9, r1, #0
	ldr	r1, [r6]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldrb	r7, [sp, #72]	@ zero_extendqisi2
	str	r1, [sp, #28]
	beq	.L17830
	movw	r5, #:lower16:.LANCHOR1
	mov	r10, r3
	movt	r5, #:upper16:.LANCHOR1
	mov	r8, r0
	ldrb	r3, [r5, #3932]	@ zero_extendqisi2
	mov	fp, r2
	cmp	r3, #0
	bne	.L17821
	bl	rndis_init.part.89
	subs	r3, r0, #0
	blt	.L17816
.L17821:
	mov	r0, #1
	bl	bam_data_setup
	subs	r3, r0, #0
	bne	.L17838
	movw	r3, #:lower16:.LANCHOR6
	movt	r3, #:upper16:.LANCHOR6
	ldrb	r2, [r3, #-1124]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L17823
	ldr	r0, [r8, #24]
	ldrb	r2, [r0, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L17825
	add	r2, r2, #1
	movw	r1, #:lower16:.LANCHOR0
	uxtb	r2, r2
	movt	r1, #:upper16:.LANCHOR0
	strb	r2, [r0, #48]
	ldr	r0, [r8, #24]
	strb	r2, [r3, #-1124]
	strb	r2, [r1, #3732]
	ldrb	r2, [r0, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L17825
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r0, #48]
	ldr	r0, [r8, #24]
	strb	r2, [r3, #-1116]
	strb	r2, [r1, #3752]
	ldrb	r2, [r0, #48]	@ zero_extendqisi2
	cmp	r2, #253
	bhi	.L17825
	add	r2, r2, #1
	uxtb	r2, r2
	strb	r2, [r3, #-1108]
	strb	r2, [r0, #48]
	strb	r2, [r1, #3723]
.L17823:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L17831
	mov	r2, #184
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L17839
.L17826:
	ldr	r1, [r9]	@ unaligned
	movw	r3, #:lower16:rndis_qc_add_header
	cmp	r7, #0
	ldr	r2, .L17842
	movt	r3, #:upper16:rndis_qc_add_header
	moveq	r7, #15
	mov	r0, r8
	str	r1, [r4, #122]	@ unaligned
	movw	r1, #:lower16:rndis_qc_rm_hdr
	ldrh	ip, [r9, #4]	@ unaligned
	str	r2, [r4, #4]
	movw	r2, #:lower16:.LC1312
	movt	r1, #:upper16:rndis_qc_rm_hdr
	str	r3, [r4, #104]
	movw	r3, #:lower16:rndis_qc_bind
	movt	r2, #:upper16:.LC1312
	movt	r3, #:upper16:rndis_qc_bind
	str	r2, [r4]
	movw	r2, #:lower16:rndis_qc_set_alt
	str	r3, [r4, #32]
	movw	r3, #:lower16:rndis_qc_setup
	movt	r2, #:upper16:rndis_qc_set_alt
	movt	r3, #:upper16:rndis_qc_setup
	str	r1, [r4, #108]
	movw	r1, #:lower16:rndis_qc_unbind
	movt	r1, #:upper16:rndis_qc_unbind
	str	r1, [r4, #36]
	movw	r1, #:lower16:rndis_qc_disable
	str	r2, [r4, #40]
	movw	r2, #:lower16:rndis_qc_suspend
	movt	r1, #:upper16:rndis_qc_disable
	str	r3, [r4, #52]
	movw	r3, #:lower16:rndis_qc_resume
	movt	r2, #:upper16:rndis_qc_suspend
	movt	r3, #:upper16:rndis_qc_resume
	str	r1, [r4, #48]
	mov	r1, #0
	strh	ip, [r4, #126]	@ unaligned
	strd	r2, [r4, #56]
	mov	r2, #44
	strh	r1, [r4, #98]	@ movhi
	mov	r1, r4
	str	r2, [r4, #100]
	str	fp, [r4, #128]
	strb	r7, [r4, #132]
	str	r10, [r4, #140]
	bl	usb_add_function
	subs	r3, r0, #0
	streq	r4, [r5, #2496]
	beq	.L17816
.L17827:
	mov	r0, r4
	str	r3, [sp, #4]
	mov	r4, #0
	bl	kfree
	ldrb	r2, [r5, #3932]	@ zero_extendqisi2
	str	r4, [r5, #2496]
	ldr	r3, [sp, #4]
	cmp	r2, r4
	bne	.L17840
.L17816:
	mov	r0, r3
	ldr	r2, [sp, #28]
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L17841
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L17831:
	mov	r4, #16
	b	.L17826
.L17840:
	movw	r1, #:lower16:.LC640
	mov	r2, r4
	strb	r4, [r5, #3932]
	movt	r1, #:upper16:.LC640
	add	r0, sp, #8
	bl	sprintf
	add	r0, sp, #8
	mov	r1, r4
	bl	remove_proc_entry
	ldr	r3, [sp, #4]
	b	.L17816
.L17839:
	mvn	r3, #11
	b	.L17827
.L17825:
	mvn	r3, #18
	b	.L17816
.L17830:
	mvn	r3, #21
	b	.L17816
.L17841:
	bl	__stack_chk_fail
.L17838:
	movw	r0, #:lower16:.LC1353
	mov	r2, r3
	ldr	r1, .L17842+4
	movt	r0, #:upper16:.LC1353
	str	r3, [sp, #4]
	bl	printk
	movw	r0, #:lower16:.LC1354
	ldr	r1, .L17842+8
	movt	r0, #:upper16:.LC1354
	bl	printk
	ldr	r3, [sp, #4]
	b	.L17816
.L17843:
	.align	2
.L17842:
	.word	.LANCHOR6-1092
	.word	.LANCHOR5+2260
	.word	.LANCHOR5+2280
	.fnend
	.size	rndis_qc_bind_config_vendor, .-rndis_qc_bind_config_vendor
	.align	2
	.global	gether_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_setup, %function
gether_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	ldr	r6, [r4, #3972]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	cmp	r6, #0
	bne	.L17849
	mov	r2, #1
	mov	r5, r0
	mov	r7, r1
	mov	r0, #132
	mov	r1, r2
	bl	alloc_etherdev_mqs
	subs	r8, r0, #0
	mvneq	r5, #11
	bne	.L17858
.L17844:
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L17849:
	mvn	r5, #15
	b	.L17844
.L17858:
	add	r9, r8, #1152
	movw	r2, #:lower16:eth_work
	str	r6, [r8, #1152]
	add	lr, r9, #28
	add	r3, r9, #92
	str	r8, [r8, #1160]
	movt	r2, #:upper16:eth_work
	movw	ip, #:lower16:process_rx_w
	str	r6, [r8, #1168]
	movt	ip, #:upper16:process_rx_w
	add	r1, r9, #108
	str	lr, [r8, #1180]
	add	r10, r9, #20
	str	r6, [r8, #1212]
	str	lr, [r8, #1184]
	mov	lr, #2560
	str	r6, [r8, #1216]
	add	r6, r9, #52
	str	r3, [r8, #1244]
	str	r3, [r8, #1248]
	movw	r3, #:lower16:.LC1371
	str	r2, [r8, #1252]
	movw	r2, #:lower16:.LC1372
	movt	r3, #:upper16:.LC1371
	movt	r2, #:upper16:.LC1372
	str	r10, [r8, #1172]
	str	r10, [r8, #1176]
	str	r6, [r8, #1204]
	str	r6, [r8, #1208]
	add	r6, r5, #32
	str	lr, [r8, #1240]
	str	lr, [r8, #1256]
	str	r1, [r8, #1260]
	str	r1, [r8, #1264]
	mov	r1, #16
	str	ip, [r8, #1268]
	bl	snprintf
	ldr	r1, [r8, #484]
	ldr	r0, [r4, #4072]
	bl	get_ether_addr
	cmp	r0, #0
	beq	.L17846
	movw	r2, #:lower16:.LC1373
	movw	r1, #:lower16:.LC1374
	movt	r2, #:upper16:.LC1373
	movt	r1, #:upper16:.LC1374
	mov	r0, r6
	bl	dev_warn
.L17846:
	ldr	r3, [r7]	@ unaligned
	add	r10, r9, #125
	movw	r0, #:lower16:.LC1375
	movt	r0, #:upper16:.LC1375
	str	r3, [r8, #1277]	@ unaligned
	ldrh	r3, [r7, #4]	@ unaligned
	strh	r3, [r10, #4]	@ unaligned
	bl	printk
	ldr	r3, .L17859
	mov	r0, r8
	ldr	r1, .L17859+4
	add	r2, r3, #136
	str	r3, [r8, #328]
	str	r2, [r8, #332]
	str	r6, [r8, #688]
	str	r1, [r8, #736]
	str	r5, [r8, #1164]
	bl	register_netdev
	subs	r5, r0, #0
	bge	.L17847
	ldr	r0, .L17859+8
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	beq	.L17848
	movw	r2, #:lower16:.LC1376
	mov	r1, r6
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1376
	mov	r3, r5
	bl	__dynamic_dev_dbg
.L17848:
	mov	r0, r8
	bl	free_netdev
	b	.L17844
.L17847:
	movw	r0, #:lower16:.LC1377
	ldr	r2, [r8, #484]
	movt	r0, #:upper16:.LC1377
	ldr	r1, [r8, #1160]
	bl	printk
	movw	r0, #:lower16:.LC1378
	mov	r2, r10
	ldr	r1, [r8, #1160]
	movt	r0, #:upper16:.LC1378
	bl	printk
	mov	r0, r8
	str	r9, [r4, #3972]
	bl	netif_carrier_off
	b	.L17844
.L17860:
	.align	2
.L17859:
	.word	.LANCHOR5+2308
	.word	.LANCHOR6-1084
	.word	.LANCHOR8-916
	.fnend
	.size	gether_setup, .-gether_setup
	.align	2
	.global	gether_setup_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_setup_name, %function
gether_setup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	ldr	r8, [r4, #3972]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	cmp	r8, #0
	bne	.L17866
	mov	r7, r2
	mov	r2, #1
	mov	r5, r0
	mov	r6, r1
	mov	r0, #132
	mov	r1, r2
	bl	alloc_etherdev_mqs
	subs	r9, r0, #0
	mvneq	r5, #11
	bne	.L17875
.L17861:
	mov	r0, r5
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L17866:
	mvn	r5, #15
	b	.L17861
.L17875:
	add	r10, r9, #1152
	movw	r2, #:lower16:eth_work
	str	r8, [r9, #1152]
	add	lr, r10, #20
	movt	r2, #:upper16:eth_work
	str	r9, [r9, #1160]
	movw	ip, #:lower16:process_rx_w
	mov	r3, r7
	str	r8, [r9, #1168]
	str	lr, [r9, #1172]
	movt	ip, #:upper16:process_rx_w
	add	r1, r10, #108
	str	lr, [r9, #1176]
	add	lr, r10, #28
	add	r7, r10, #52
	add	fp, r10, #92
	str	lr, [r9, #1180]
	str	lr, [r9, #1184]
	mov	lr, #2560
	str	r7, [r9, #1204]
	str	r2, [r9, #1252]
	movw	r2, #:lower16:.LC1372
	movt	r2, #:upper16:.LC1372
	str	r7, [r9, #1208]
	add	r7, r5, #32
	str	r8, [r9, #1212]
	str	r8, [r9, #1216]
	str	lr, [r9, #1240]
	str	fp, [r9, #1244]
	str	fp, [r9, #1248]
	str	lr, [r9, #1256]
	str	r1, [r9, #1260]
	str	r1, [r9, #1264]
	mov	r1, #16
	str	ip, [r9, #1268]
	bl	snprintf
	ldr	r1, [r9, #484]
	ldr	r0, [r4, #4072]
	bl	get_ether_addr
	cmp	r0, #0
	beq	.L17863
	movw	r2, #:lower16:.LC1373
	movw	r1, #:lower16:.LC1374
	movt	r2, #:upper16:.LC1373
	movt	r1, #:upper16:.LC1374
	mov	r0, r7
	bl	dev_warn
.L17863:
	ldr	r3, [r6]	@ unaligned
	add	r8, r10, #125
	movw	r0, #:lower16:.LC1375
	movt	r0, #:upper16:.LC1375
	str	r3, [r9, #1277]	@ unaligned
	ldrh	r3, [r6, #4]	@ unaligned
	strh	r3, [r8, #4]	@ unaligned
	bl	printk
	ldr	r3, .L17877
	mov	r0, r9
	ldr	r1, .L17877+4
	add	r2, r3, #136
	str	r3, [r9, #328]
	str	r2, [r9, #332]
	str	r7, [r9, #688]
	str	r1, [r9, #736]
	str	r5, [r9, #1164]
	bl	register_netdev
	subs	r5, r0, #0
	bge	.L17864
	ldr	r0, .L17877+8
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L17876
.L17865:
	mov	r0, r9
	bl	free_netdev
	b	.L17861
.L17864:
	movw	r0, #:lower16:.LC1377
	ldr	r2, [r9, #484]
	movt	r0, #:upper16:.LC1377
	ldr	r1, [r9, #1160]
	bl	printk
	movw	r0, #:lower16:.LC1378
	mov	r2, r8
	ldr	r1, [r9, #1160]
	movt	r0, #:upper16:.LC1378
	bl	printk
	mov	r0, r9
	str	r10, [r4, #3972]
	bl	netif_carrier_off
	b	.L17861
.L17876:
	movw	r2, #:lower16:.LC1376
	mov	r1, r7
	movt	r2, #:upper16:.LC1376
	mov	r3, r5
	sub	r0, r0, #20
	bl	__dynamic_dev_dbg
	b	.L17865
.L17878:
	.align	2
.L17877:
	.word	.LANCHOR5+2308
	.word	.LANCHOR6-1084
	.word	.LANCHOR8-916
	.fnend
	.size	gether_setup_name, .-gether_setup_name
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_function_bind_config, %function
rndis_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	.pad #24
	sub	sp, sp, #24
	ldr	r4, [r0, #4]
	cmp	r4, #0
	bne	.L17880
	ldr	r2, .L17888
	movw	r0, #:lower16:.LC1379
	mvn	r5, #0
	movt	r0, #:upper16:.LC1379
	mov	r1, r2
	bl	printk
	b	.L17879
.L17880:
	mov	r6, r1
	ldrb	r1, [r4, #5]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1380
	ldrb	r3, [r4]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC1380
	ldr	r2, .L17888
	str	r1, [sp, #16]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	mov	r1, r2
	str	ip, [sp, #12]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldr	r3, [r6, #24]
	movw	r2, #:lower16:.LC1312
	mov	r1, r4
	movt	r2, #:upper16:.LC1312
	ldr	r0, [r3]
	bl	gether_setup_name
	subs	r5, r0, #0
	beq	.L17882
	ldr	r2, .L17888
	movw	r0, #:lower16:.LC1381
	movt	r0, #:upper16:.LC1381
	mov	r1, r2
	bl	printk
	b	.L17879
.L17882:
	ldrb	r3, [r4, #269]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L17883
	movw	r3, #:lower16:.LANCHOR6
	mov	r1, #3
	movt	r3, #:upper16:.LANCHOR6
	mvn	ip, #31
	sub	r2, r3, #3216
	mov	r0, #480
	strb	r1, [r3, #-3222]
	movw	r1, #769
	strb	ip, [r3, #-3215]
	strh	r0, [r2, #-8]	@ movhi
	strh	r1, [r2, #2]	@ movhi
.L17883:
	ldr	r2, [r4, #8]
	mov	r0, r6
	add	r3, r4, #13
	mov	r1, r4
	add	sp, sp, #24
	@ sp needed
	pop	{r4, r5, r6, lr}
	b	rndis_bind_config_vendor
.L17879:
	mov	r0, r5
	add	sp, sp, #24
	@ sp needed
	pop	{r4, r5, r6, pc}
.L17889:
	.align	2
.L17888:
	.word	.LANCHOR5+2608
	.fnend
	.size	rndis_function_bind_config, .-rndis_function_bind_config
	.text
	.align	2
	.global	gether_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_cleanup, %function
gether_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	lr, [sp, #4]
	ldr	r3, [r4, #3972]
	cmp	r3, #0
	beq	.L17890
	ldr	r0, [r3, #8]
	bl	unregister_netdev
	ldr	r0, [r4, #3972]
	add	r0, r0, #88
	bl	flush_work
	ldr	r3, [r4, #3972]
	ldr	r0, [r3, #8]
	bl	free_netdev
	mov	r3, #0
	str	r3, [r4, #3972]
.L17890:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gether_cleanup, .-gether_cleanup
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_function_bind_config, %function
ecm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r0, #4]
	.pad #12
	sub	sp, sp, #12
	cmp	r5, #0
	beq	.L17916
	movw	r4, #:lower16:.LANCHOR1
	ldr	r3, [r1, #24]
	mov	r6, r1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r10, [r4, #3972]
	ldr	r7, [r3]
	cmp	r10, #0
	bne	.L17904
	mov	r2, #1
	mov	r0, #132
	mov	r1, r2
	bl	alloc_etherdev_mqs
	subs	r8, r0, #0
	mvneq	r7, #11
	bne	.L17917
.L17899:
	ldr	r2, .L17918
	movw	r0, #:lower16:.LC1381
	movt	r0, #:upper16:.LC1381
	mov	r1, r2
	bl	printk
.L17896:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L17904:
	mvn	r7, #15
	b	.L17899
.L17917:
	add	r9, r8, #1152
	movw	r2, #:lower16:eth_work
	str	r10, [r8, #1152]
	add	lr, r9, #28
	add	r3, r9, #92
	str	r8, [r8, #1160]
	movt	r2, #:upper16:eth_work
	movw	ip, #:lower16:process_rx_w
	str	r10, [r8, #1168]
	movt	ip, #:upper16:process_rx_w
	add	r1, r9, #108
	str	lr, [r8, #1180]
	add	fp, r9, #20
	str	r10, [r8, #1212]
	str	lr, [r8, #1184]
	mov	lr, #2560
	str	r10, [r8, #1216]
	add	r10, r9, #52
	str	r3, [r8, #1244]
	str	r3, [r8, #1248]
	movw	r3, #:lower16:.LC1383
	str	r2, [r8, #1252]
	movw	r2, #:lower16:.LC1372
	movt	r3, #:upper16:.LC1383
	movt	r2, #:upper16:.LC1372
	str	fp, [r8, #1172]
	str	fp, [r8, #1176]
	add	fp, r7, #32
	str	r10, [r8, #1204]
	str	r10, [r8, #1208]
	str	lr, [r8, #1240]
	str	lr, [r8, #1256]
	str	r1, [r8, #1260]
	str	r1, [r8, #1264]
	mov	r1, #16
	str	ip, [r8, #1268]
	bl	snprintf
	ldr	r1, [r8, #484]
	ldr	r0, [r4, #4072]
	bl	get_ether_addr
	cmp	r0, #0
	beq	.L17900
	movw	r2, #:lower16:.LC1373
	movw	r1, #:lower16:.LC1374
	movt	r2, #:upper16:.LC1373
	movt	r1, #:upper16:.LC1374
	mov	r0, fp
	bl	dev_warn
.L17900:
	ldr	r3, [r5]	@ unaligned
	add	r2, r9, #125
	movw	r0, #:lower16:.LC1375
	ldr	r10, .L17918+4
	movt	r0, #:upper16:.LC1375
	str	r2, [sp, #4]
	str	r3, [r8, #1277]	@ unaligned
	ldrh	r3, [r5, #4]	@ unaligned
	strh	r3, [r9, #129]	@ unaligned
	bl	printk
	ldr	r3, .L17918+8
	add	r2, r10, #136
	mov	r0, r8
	str	r10, [r8, #328]
	str	r2, [r8, #332]
	str	fp, [r8, #688]
	str	r3, [r8, #736]
	str	r7, [r8, #1164]
	bl	register_netdev
	subs	r7, r0, #0
	bge	.L17901
	ldr	r0, .L17918+12
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	beq	.L17902
	movw	r2, #:lower16:.LC1376
	mov	r1, fp
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1376
	mov	r3, r7
	bl	__dynamic_dev_dbg
.L17902:
	mov	r0, r8
	bl	free_netdev
	b	.L17899
.L17916:
	ldr	r2, .L17918
	movw	r0, #:lower16:.LC1382
	mvn	r7, #21
	movt	r0, #:upper16:.LC1382
	mov	r1, r2
	bl	printk
	b	.L17896
.L17901:
	movw	r0, #:lower16:.LC1377
	ldr	r2, [r8, #484]
	movt	r0, #:upper16:.LC1377
	ldr	r1, [r8, #1160]
	bl	printk
	movw	r0, #:lower16:.LC1378
	ldr	r2, [sp, #4]
	movt	r0, #:upper16:.LC1378
	ldr	r1, [r8, #1160]
	bl	printk
	mov	r0, r8
	str	r9, [r4, #3972]
	bl	netif_carrier_off
	cmp	r7, #0
	bne	.L17899
	mov	r1, r5
	mov	r0, r6
	bl	ecm_bind_config
	subs	r7, r0, #0
	beq	.L17896
	add	r2, r10, #328
	movw	r0, #:lower16:.LC1384
	mov	r1, r2
	movt	r0, #:upper16:.LC1384
	bl	printk
	bl	gether_cleanup
	b	.L17896
.L17919:
	.align	2
.L17918:
	.word	.LANCHOR5+2636
	.word	.LANCHOR5+2308
	.word	.LANCHOR6-1084
	.word	.LANCHOR8-916
	.fnend
	.size	ecm_function_bind_config, .-ecm_function_bind_config
	.align	2
	.global	gether_connect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_connect, %function
gether_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r3, #3972]
	cmp	r5, #0
	mvneq	r0, #21
	beq	.L17920
	movw	r3, #:lower16:kmalloc_caches
	mov	r4, r0
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r3, #16
	streq	r3, [r4, #144]
	beq	.L17923
	mov	r2, #44
	movw	r1, #32800
	bl	kmem_cache_alloc_trace
	cmp	r0, #0
	str	r0, [r4, #144]
	beq	.L17949
.L17923:
	ldr	r3, [r4, #88]
	str	r5, [r3]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L17925
	ldr	r3, [r4, #92]
	str	r5, [r3]
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	bne	.L17926
	ldr	r3, [r5, #12]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bls	.L17936
	ldr	r3, [r3, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L17936
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	ldr	r7, [r3, #604]
	lsl	r7, r7, #1
.L17927:
	add	r8, r5, #16
	mov	r0, r8
	bl	_raw_spin_lock
	mov	r2, r7
	add	r0, r5, #20
	ldr	r1, [r4, #88]
	bl	prealloc
	subs	r6, r0, #0
	blt	.L17928
	mov	r2, r7
	add	r0, r5, #28
	ldr	r1, [r4, #92]
	bl	prealloc
	mov	r6, r0
	mov	r0, r8
	bl	_raw_spin_unlock
	cmp	r6, #0
	bne	.L17929
	ldrb	r3, [r4, #96]	@ zero_extendqisi2
	mov	r0, r5
	strb	r3, [r5, #124]
	ldr	r3, [r4, #100]
	str	r3, [r5, #68]
	ldr	r3, [r4, #132]
	str	r3, [r5, #84]
	ldr	r3, [r4, #128]
	str	r3, [r5, #80]
	ldr	r3, [r4, #116]
	str	r3, [r5, #72]
	ldr	r3, [r4, #120]
	str	r3, [r5, #76]
	bl	_raw_spin_lock
	str	r4, [r5, #4]
	str	r6, [r5, #40]
	str	r6, [r5, #44]
	str	r6, [r5, #48]
	str	r5, [r4, #84]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #160]
	tst	r3, #1
	beq	.L17930
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L17931
.L17947:
	mov	r0, r4
	blx	r3
.L17931:
	mov	r0, r5
	bl	_raw_spin_unlock
	ldr	r0, [r5, #8]
	bl	netif_carrier_on
	ldr	r0, [r5, #8]
	ldr	r3, [r0, #160]
	tst	r3, #1
	bne	.L17950
.L17920:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L17928:
	mov	r0, r8
	bl	_raw_spin_unlock
.L17929:
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
.L17926:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	cmp	r6, #0
	blt	.L17925
.L17948:
	ldr	r0, [r5, #8]
	b	.L17920
.L17925:
	ldr	r0, [r4, #144]
	bl	kfree
.L17924:
	mov	r0, r6
	b	.L17920
.L17936:
	mov	r7, #2
	b	.L17927
.L17930:
	ldr	r3, [r4, #140]
	cmp	r3, #0
	bne	.L17947
	b	.L17931
.L17950:
	mov	r1, #32
	mov	r0, r5
	bl	rx_fill
	ldr	r2, [r5, #8]
	mov	r3, #0
	mov	r0, r3
	str	r3, [r5, #36]
	ldr	r4, [r2, #576]
	add	r1, r4, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	beq	.L17948
	ldr	r0, [r4, #4]
	bl	__netif_schedule
	ldr	r0, [r5, #8]
	b	.L17920
.L17949:
	movw	r0, #:lower16:.LC1385
	ldr	r1, .L17951
	mvn	r6, #11
	movt	r0, #:upper16:.LC1385
	bl	printk
	b	.L17924
.L17952:
	.align	2
.L17951:
	.word	.LANCHOR5+2664
	.fnend
	.size	gether_connect, .-gether_connect
	.align	2
	.global	gether_disconnect
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_disconnect, %function
gether_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #84]
	cmp	r4, #0
	beq	.L17953
	ldr	r3, [r4, #8]
	mov	r6, r0
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L17974
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
.L17965:
	ldr	r0, [r4, #8]
	add	r7, r4, #16
	add	r9, r4, #20
	bl	netif_carrier_off
	ldr	r0, [r6, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r5, [r4, #20]
	cmp	r5, r9
	beq	.L17957
	mov	r10, #0
.L17956:
	mov	r0, r5
	sub	r8, r5, #36
	bl	list_del
	mov	r0, r7
	bl	_raw_spin_unlock
	ldrb	r3, [r6, #124]	@ zero_extendqisi2
	mov	r1, r8
	cmp	r3, #0
	bne	.L17975
	ldr	r0, [r6, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r5, [r4, #20]
	cmp	r5, r9
	bne	.L17956
.L17957:
	mov	r5, #0
	ldr	r0, [r6, #144]
	add	r8, r4, #28
	bl	kfree
	mov	r0, r7
	str	r5, [r6, #144]
	bl	_raw_spin_unlock
	ldr	r3, [r6, #88]
	str	r5, [r3]
	ldr	r3, [r6, #88]
	str	r5, [r3, #28]
	ldr	r0, [r6, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L17973
.L17976:
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del
	mov	r0, r7
	bl	_raw_spin_unlock
	ldr	r0, [r6, #92]
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L17973:
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r5, [r4, #28]
	cmp	r5, r8
	bne	.L17976
	mov	r0, r7
	add	r7, r4, #64
	bl	_raw_spin_unlock
	mov	r0, r7
	add	r5, r4, #52
	bl	_raw_spin_lock
	ldr	r3, [r4, #52]
	cmp	r3, r5
	beq	.L17962
	cmp	r3, #0
	beq	.L17962
	mov	r8, #0
	mov	r9, #0
.L17963:
	ldr	r2, [r4, #60]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #60]
	ldm	r3, {r1, r2}
	strd	r8, [r3]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any
	ldr	r3, [r4, #52]
	cmp	r3, r5
	beq	.L17962
	cmp	r3, #0
	bne	.L17963
.L17962:
	mov	r0, r7
	mov	r5, #0
	bl	_raw_spin_unlock
	ldr	r3, [r6, #92]
	mov	r0, r4
	str	r5, [r3]
	ldr	r3, [r6, #92]
	str	r5, [r3, #28]
	str	r5, [r4, #68]
	str	r5, [r4, #80]
	str	r5, [r4, #84]
	bl	_raw_spin_lock
	str	r5, [r4, #4]
	mov	r0, r4
	str	r5, [r6, #84]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock
.L17975:
	ldr	r0, [r5, #-36]
	bl	kfree
	str	r10, [r5, #-36]
	ldr	r0, [r6, #88]
	mov	r1, r8
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r7
	bl	_raw_spin_lock
	ldr	r5, [r4, #20]
	cmp	r9, r5
	bne	.L17956
	b	.L17957
.L17953:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L17974:
	movw	r0, #:lower16:.LC101
	movw	r1, #1847
	movt	r0, #:upper16:.LC101
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC102
	movt	r0, #:upper16:.LC102
	bl	printk
	b	.L17965
	.fnend
	.size	gether_disconnect, .-gether_disconnect
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_disable, %function
rndis_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #168]
	ldr	r3, [r3]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	ldr	r0, .L18009
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L18006
.L17979:
	ldr	r4, [r6, #164]
	cmp	r4, #0
	bgt	.L17982
	rsb	r4, r4, r4, lsl #4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	lsl	r4, r4, #2
	mov	r1, #0
	add	r8, r3, r4
	ldr	r2, [r8, #3924]
	add	r4, r8, #3920
	add	r4, r4, #4
	str	r1, [r8, #3876]
	cmp	r4, r2
	ldr	r3, [r2]
	beq	.L17982
.L17981:
	ldr	r1, [r2, #16]
	cmp	r1, #0
	bne	.L17986
	b	.L18007
.L17988:
	ldr	r1, [r3, #16]
	cmp	r1, #0
	beq	.L17985
	mov	r3, r2
.L17986:
	cmp	r3, r4
	ldr	r2, [r3]
	bne	.L17988
.L17982:
	mov	r0, r6
	bl	gether_disconnect
	ldr	r0, [r6, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r6, #168]
	mov	r2, #0
	str	r2, [r3]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L18007:
	mov	r3, r2
.L17985:
	ldr	r9, [r3, #8]
	mov	r2, #1
	str	r2, [r3, #16]
	cmp	r9, #0
	beq	.L17982
	ldr	r5, [r8, #3924]
	cmp	r5, r4
	ldr	r7, [r5]
	bne	.L17984
	b	.L17982
.L17983:
	cmp	r7, r4
	mov	r5, r7
	ldr	r7, [r7]
	beq	.L18008
.L17984:
	cmp	r5, #0
	beq	.L17983
	ldr	r3, [r5, #8]
	cmp	r9, r3
	bne	.L17983
	mov	r0, r5
	bl	list_del
	mov	r0, r5
	mov	r5, r7
	bl	kfree
	cmp	r7, r4
	ldr	r7, [r7]
	bne	.L17984
.L18008:
	ldr	r2, [r8, #3924]
	cmp	r2, r4
	ldr	r3, [r2]
	bne	.L17981
	b	.L17982
.L18006:
	ldr	r3, [r6, #20]
	movw	r2, #:lower16:.LC1386
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1386
	ldr	r3, [r3, #24]
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L17979
.L18010:
	.align	2
.L18009:
	.word	.LANCHOR8-892
	.fnend
	.size	rndis_disable, .-rndis_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_set_alt, %function
rndis_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r5, [r3, #24]
	beq	.L18051
	ldrb	r3, [r0, #149]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L18017
	ldr	r2, [r0, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L18018
	ldr	r0, .L18057
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L18052
.L18019:
	mov	r0, r4
	bl	gether_disconnect
	ldr	r2, [r4, #88]
.L18018:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L18020
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L18020
.L18021:
	ldr	r0, .L18057+4
	mov	r3, #0
	strb	r3, [r4, #96]
	strh	r3, [r4, #98]	@ movhi
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L18053
.L18025:
	mov	r0, r4
	bl	gether_connect
	cmn	r0, #4096
	mov	r5, r0
	bhi	.L18011
	ldr	r0, .L18057+8
	add	r6, r4, #98
	ldrb	r4, [r4, #164]	@ zero_extendqisi2
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	bne	.L18054
.L18027:
	clz	r3, r5
	cmp	r4, #0
	lsr	r3, r3, #5
	movne	r3, #1
	cmp	r3, #0
	bne	.L18028
	movw	r2, #:lower16:.LANCHOR1
	mov	r0, r3
	movt	r2, #:upper16:.LANCHOR1
	str	r3, [r2, #3744]
	str	r3, [r2, #3748]
	str	r6, [r2, #3896]
	str	r5, [r2, #3900]
.L18011:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L18020:
	ldr	r3, .L18057+12
	ldr	r0, [r5]
	ldrh	r1, [r3, #-2]
	tst	r1, #4
	bne	.L18055
.L18022:
	mov	r1, r4
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L18024
	mov	r1, r4
	ldr	r0, [r5]
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L18021
.L18024:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L18011
.L18051:
	ldr	r0, [r0, #168]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L18013
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #168]
.L18013:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L18056
.L18014:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #168]
	mov	r0, #0
	str	r4, [r3]
	b	.L18011
.L18053:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1389
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1389
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L18025
.L18056:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L18017
	ldr	r0, [r4, #168]
	ldr	r1, [r0, #28]
	b	.L18014
.L18052:
	ldr	r1, [r5]
	movw	r2, #:lower16:.LC1387
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1387
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L18019
.L18055:
	movw	r2, #:lower16:.LC1388
	add	r1, r0, #32
	movt	r2, #:upper16:.LC1388
	sub	r0, r3, #20
	bl	__dynamic_dev_dbg
	ldr	r0, [r5]
	ldr	r2, [r4, #88]
	b	.L18022
.L18054:
	movw	r1, #:lower16:.LC289
	ldr	r2, .L18057+16
	sub	r0, r0, #24
	movt	r1, #:upper16:.LC289
	bl	__dynamic_pr_debug
	b	.L18027
.L18017:
	mvn	r0, #21
	b	.L18011
.L18028:
	mov	r0, #0
	b	.L18011
.L18058:
	.align	2
.L18057:
	.word	.LANCHOR8-868
	.word	.LANCHOR8-820
	.word	.LANCHOR8-1200
	.word	.LANCHOR8-844
	.word	.LANCHOR5+1980
	.fnend
	.size	rndis_set_alt, .-rndis_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_disable, %function
ecm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18074
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L18073
.L18060:
	ldr	r3, [r4, #88]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L18061
	mov	r0, r4
	bl	gether_disconnect
.L18061:
	ldr	r0, [r4, #164]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L18059
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #164]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #164]
	str	r3, [r2, #28]
.L18059:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L18073:
	ldr	r1, [r4, #20]
	sub	r0, r3, #20
	movw	r2, #:lower16:.LC1390
	movt	r2, #:upper16:.LC1390
	ldr	r3, [r1, #24]
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L18060
.L18075:
	.align	2
.L18074:
	.word	.LANCHOR8-796
	.fnend
	.size	ecm_disable, .-ecm_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_set_alt, %function
ecm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r0, [r0, #148]	@ zero_extendqisi2
	ldr	r3, [r4, #20]
	cmp	r0, r1
	ldr	r6, [r3, #24]
	beq	.L18111
	ldrb	r3, [r4, #149]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r3, r1
	bne	.L18082
	ldr	r2, [r4, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L18083
	ldr	r0, .L18116
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L18112
.L18084:
	mov	r0, r4
	bl	gether_disconnect
	ldr	r2, [r4, #88]
.L18083:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L18085
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L18085
.L18086:
	cmp	r5, #1
	bne	.L18090
	ldr	r3, [r6]
	movw	r0, #:lower16:.LC513
	movt	r0, #:upper16:.LC513
	ldr	r1, [r3, #28]
	bl	strcmp
	ldr	r3, .L18116+4
	mov	r2, #15
	adds	r0, r0, #0
	movne	r0, #1
	strh	r2, [r4, #98]	@ movhi
	ldrh	r2, [r3, #-2]
	strb	r0, [r4, #96]
	tst	r2, #4
	bne	.L18113
.L18091:
	mov	r0, r4
	bl	gether_connect
	cmn	r0, #4096
	bhi	.L18076
.L18090:
	mov	r3, #1
	mov	r0, r4
	strb	r3, [r4, #172]
	bl	ecm_do_notify
	mov	r0, #0
.L18076:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L18085:
	ldr	r3, .L18116+8
	ldr	r0, [r6]
	ldrh	r1, [r3, #-2]
	tst	r1, #4
	bne	.L18114
.L18087:
	mov	r1, r4
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L18089
	mov	r1, r4
	ldr	r0, [r6]
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L18086
.L18089:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L18076
.L18111:
	cmp	r2, #0
	bne	.L18082
	ldr	r0, [r4, #164]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L18080
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #164]
.L18080:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L18115
.L18081:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #164]
	mov	r0, #0
	str	r4, [r3]
	b	.L18076
.L18115:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L18082
	ldr	r0, [r4, #164]
	ldr	r1, [r0, #28]
	b	.L18081
.L18112:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC1391
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1391
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L18084
.L18114:
	movw	r2, #:lower16:.LC1392
	add	r1, r0, #32
	movt	r2, #:upper16:.LC1392
	sub	r0, r3, #20
	bl	__dynamic_dev_dbg
	ldr	r0, [r6]
	ldr	r2, [r4, #88]
	b	.L18087
.L18113:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC1393
	sub	r0, r3, #20
	movt	r2, #:upper16:.LC1393
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L18091
.L18082:
	mvn	r0, #21
	b	.L18076
.L18117:
	.align	2
.L18116:
	.word	.LANCHOR8-772
	.word	.LANCHOR8-724
	.word	.LANCHOR8-748
	.fnend
	.size	ecm_set_alt, .-ecm_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_disable, %function
ncm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18133
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L18132
.L18119:
	ldr	r3, [r4, #88]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L18120
	mov	r0, r4
	bl	gether_disconnect
.L18120:
	ldr	r0, [r4, #164]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L18118
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #164]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #164]
	str	r3, [r2, #28]
.L18118:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L18132:
	ldr	r1, [r4, #20]
	sub	r0, r3, #20
	movw	r2, #:lower16:.LC1394
	movt	r2, #:upper16:.LC1394
	ldr	r3, [r1, #24]
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L18119
.L18134:
	.align	2
.L18133:
	.word	.LANCHOR8-700
	.fnend
	.size	ncm_disable, .-ncm_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_set_alt, %function
ncm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r1, [r0, #148]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	r1, r5
	ldr	r6, [r3, #24]
	beq	.L18178
	ldrb	r3, [r0, #149]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r3, r5
	bne	.L18143
	cmp	r2, #0
	beq	.L18177
	ldr	r2, [r0, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	bne	.L18179
.L18144:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L18151
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L18151
.L18146:
	ldr	r3, [r6]
	movw	r0, #:lower16:.LC513
	movt	r0, #:upper16:.LC513
	ldr	r1, [r3, #28]
	bl	strcmp
	adds	r2, r0, #0
	mov	r3, #15
	movne	r2, #1
	mov	r0, r4
	strb	r2, [r4, #96]
	strh	r3, [r4, #98]	@ movhi
	bl	gether_connect
	cmn	r0, #4096
	mov	r2, r0
	bhi	.L18135
	ldrh	r3, [r4, #182]
	str	r2, [r4, #184]
	movw	r0, #:lower16:.LC1400
	movt	r0, #:upper16:.LC1400
	sub	r3, r3, #14
	str	r3, [r2, #356]
	ldr	r3, [r4, #184]
	ldr	r1, [r3, #356]
	bl	printk
.L18177:
	mov	r0, #0
.L18135:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L18178:
	cmp	r2, #0
	bne	.L18143
	ldr	r0, [r0, #164]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L18139
	ldr	r3, .L18184
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L18180
.L18140:
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #164]
.L18139:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L18181
.L18141:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #164]
	mov	r0, #0
	str	r4, [r3]
	b	.L18135
.L18151:
	ldr	r3, .L18184+4
	ldr	r0, [r6]
	ldrh	r1, [r3, #-2]
	tst	r1, #4
	bne	.L18182
.L18147:
	mov	r1, r4
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L18149
	mov	r1, r4
	ldr	r0, [r6]
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L18146
.L18149:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L18135
.L18181:
	ldr	ip, .L18184+8
	ldr	r1, [r6]
	ldrh	r3, [ip, #-2]
	tst	r3, #4
	bne	.L18183
.L18142:
	mov	r2, r0
	mov	r0, r1
	mov	r1, r4
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L18143
	ldr	r0, [r4, #164]
	ldr	r1, [r0, #28]
	b	.L18141
.L18143:
	mvn	r0, #21
	b	.L18135
.L18180:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC1395
	sub	r0, r3, #20
	movt	r2, #:upper16:.LC1395
	mov	r3, r5
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	ldr	r0, [r4, #164]
	b	.L18140
.L18182:
	movw	r2, #:lower16:.LC1399
	add	r1, r0, #32
	movt	r2, #:upper16:.LC1399
	sub	r0, r3, #20
	bl	__dynamic_dev_dbg
	ldr	r0, [r6]
	ldr	r2, [r4, #88]
	b	.L18147
.L18183:
	movw	r2, #:lower16:.LC1396
	add	r1, r1, #32
	mov	r3, r5
	sub	r0, ip, #20
	movt	r2, #:upper16:.LC1396
	bl	__dynamic_dev_dbg
	ldr	r1, [r6]
	ldr	r0, [r4, #164]
	b	.L18142
.L18179:
	ldr	r0, .L18184+12
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	beq	.L18145
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC1397
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1397
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
.L18145:
	movw	r0, #:lower16:.LC1398
	ldr	r1, .L18184+16
	movt	r0, #:upper16:.LC1398
	bl	printk
	mov	r0, r4
	bl	gether_disconnect
	movw	r3, #:lower16:.LANCHOR0
	mov	r0, #15
	ldr	r2, [r4, #88]
	movt	r3, #:upper16:.LANCHOR0
	mov	r1, #0
	ldr	ip, [r3, #36]
	mov	lr, #16384
	add	r3, r3, #48
	strh	r0, [r4, #98]	@ movhi
	movw	r0, #9014
	str	r1, [r4, #100]
	str	ip, [r4, #108]
	str	lr, [r4, #112]
	str	r3, [r4, #176]
	strb	r1, [r4, #180]
	strh	r0, [r4, #182]	@ movhi
	str	r1, [r4, #184]
	b	.L18144
.L18185:
	.align	2
.L18184:
	.word	.LANCHOR8-676
	.word	.LANCHOR8-604
	.word	.LANCHOR8-652
	.word	.LANCHOR8-628
	.word	.LANCHOR5+2680
	.fnend
	.size	ncm_set_alt, .-ncm_set_alt
	.align	2
	.global	gether_qc_get_macs
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_get_macs, %function
gether_qc_get_macs:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r1
	movt	r4, #:upper16:.LANCHOR1
	mov	r1, r0
	str	r6, [sp, #8]
	ldr	r0, [r4, #4064]
	str	lr, [sp, #12]
	bl	get_qc_ether_addr
	cmp	r0, #0
	beq	.L18187
	ldr	r0, .L18204
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	bne	.L18202
.L18187:
	mov	r1, r5
	ldr	r0, [r4, #4068]
	bl	get_qc_ether_addr
	cmp	r0, #0
	beq	.L18186
	ldr	r0, .L18204+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L18203
.L18186:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L18203:
	movw	r1, #:lower16:.LC1358
	sub	r0, r0, #20
	ldr	r2, .L18204+8
	movt	r1, #:upper16:.LC1358
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__dynamic_pr_debug
.L18202:
	movw	r1, #:lower16:.LC1357
	ldr	r2, .L18204+8
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC1357
	bl	__dynamic_pr_debug
	b	.L18187
.L18205:
	.align	2
.L18204:
	.word	.LANCHOR8-1024
	.word	.LANCHOR8-1012
	.word	.LANCHOR5+2176
	.fnend
	.size	gether_qc_get_macs, .-gether_qc_get_macs
	.align	2
	.global	gether_qc_setup_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_setup_name, %function
gether_qc_setup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r2
	mov	r2, #1
	strd	r6, [sp, #8]
	mov	r7, r1
	mov	r1, r2
	strd	r8, [sp, #16]
	mov	r8, r0
	mov	r0, #28
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	alloc_etherdev_mqs
	subs	r4, r0, #0
	beq	.L18213
	mov	r1, #0
	movw	r2, #:lower16:.LC1372
	movw	r6, #:lower16:.LANCHOR1
	mov	r3, r5
	movt	r2, #:upper16:.LC1372
	movt	r6, #:upper16:.LANCHOR1
	str	r1, [r4, #1152]
	mov	r1, #16
	str	r4, [r4, #1160]
	add	r9, r8, #32
	bl	snprintf
	ldr	r1, [r4, #484]
	ldr	r0, [r6, #4064]
	bl	get_qc_ether_addr
	cmp	r0, #0
	bne	.L18227
.L18208:
	add	r5, r4, #1168
	ldr	r0, [r6, #4068]
	add	r5, r5, #5
	mov	r1, r5
	bl	get_qc_ether_addr
	cmp	r0, #0
	bne	.L18228
.L18209:
	cmp	r7, #0
	beq	.L18210
	ldr	r3, [r5]	@ unaligned
	str	r3, [r7]	@ unaligned
	ldrh	r3, [r5, #4]	@ unaligned
	strh	r3, [r7, #4]	@ unaligned
.L18210:
	ldr	r3, .L18230
	mov	r0, r4
	add	r2, r3, #136
	str	r3, [r4, #328]
	str	r2, [r4, #332]
	bl	netif_carrier_off
	ldr	r3, .L18230+4
	mov	r0, r4
	str	r9, [r4, #688]
	str	r3, [r4, #736]
	str	r8, [r4, #1164]
	bl	register_netdev
	subs	r6, r0, #0
	bge	.L18211
	ldr	r0, .L18230+8
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L18229
.L18212:
	mov	r0, r4
	bl	free_netdev
.L18206:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L18227:
	movw	r2, #:lower16:.LC1373
	movw	r1, #:lower16:.LC1374
	movt	r2, #:upper16:.LC1373
	movt	r1, #:upper16:.LC1374
	mov	r0, r9
	bl	dev_warn
	b	.L18208
.L18228:
	movw	r2, #:lower16:.LC1401
	movw	r1, #:lower16:.LC1374
	movt	r2, #:upper16:.LC1401
	movt	r1, #:upper16:.LC1374
	mov	r0, r9
	bl	dev_warn
	b	.L18209
.L18229:
	movw	r2, #:lower16:.LC1376
	mov	r1, r9
	movt	r2, #:upper16:.LC1376
	mov	r3, r6
	sub	r0, r0, #20
	bl	__dynamic_dev_dbg
	b	.L18212
.L18213:
	mvn	r6, #11
	b	.L18206
.L18211:
	movw	r0, #:lower16:.LC1377
	ldr	r2, [r4, #484]
	movt	r0, #:upper16:.LC1377
	ldr	r1, [r4, #1160]
	bl	printk
	movw	r0, #:lower16:.LC1378
	mov	r2, r5
	ldr	r1, [r4, #1160]
	movt	r0, #:upper16:.LC1378
	bl	printk
	b	.L18206
.L18231:
	.align	2
.L18230:
	.word	.LANCHOR5+2692
	.word	.LANCHOR6-1060
	.word	.LANCHOR8-580
	.fnend
	.size	gether_qc_setup_name, .-gether_qc_setup_name
	.align	2
	.global	gether_qc_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_setup, %function
gether_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r2, #:lower16:.LC1371
	movt	r2, #:upper16:.LC1371
	b	gether_qc_setup_name
	.fnend
	.size	gether_qc_setup, .-gether_qc_setup
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_function_bind_config, %function
rndis_qc_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	.pad #24
	sub	sp, sp, #24
	ldr	r4, [r0, #4]
	cmp	r4, #0
	bne	.L18234
	ldr	r2, .L18242
	movw	r0, #:lower16:.LC1379
	mvn	r5, #21
	movt	r0, #:upper16:.LC1379
	mov	r1, r2
	bl	printk
	b	.L18233
.L18234:
	mov	r6, r1
	ldrb	r1, [r4, #5]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1380
	ldrb	r3, [r4]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC1380
	ldr	r2, .L18242
	str	r1, [sp, #16]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	mov	r1, r2
	str	ip, [sp, #12]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #1]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldr	r3, [r6, #24]
	movw	r2, #:lower16:.LC1312
	mov	r1, r4
	movt	r2, #:upper16:.LC1312
	ldr	r0, [r3]
	bl	gether_qc_setup_name
	subs	r5, r0, #0
	beq	.L18236
	ldr	r2, .L18242
	movw	r0, #:lower16:.LC1381
	movt	r0, #:upper16:.LC1381
	mov	r1, r2
	bl	printk
	b	.L18233
.L18236:
	ldrb	r3, [r4, #269]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L18237
	ldr	r1, .L18242+4
	mov	ip, #480
	movw	r3, #:lower16:.LANCHOR0
	movt	r3, #:upper16:.LANCHOR0
	mov	lr, #3
	mvn	r0, #31
	strb	lr, [r3, #3722]
	add	r2, r1, #8
	strh	ip, [r1, #4]	@ movhi
	movw	r1, #769
	strb	r0, [r3, #3729]
	strh	r1, [r2, #6]	@ movhi
.L18237:
	ldrb	r2, [r4, #12]	@ zero_extendqisi2
	mov	r0, r6
	add	r3, r4, #13
	mov	r1, r4
	str	r2, [sp]
	ldr	r2, [r4, #8]
	bl	rndis_qc_bind_config_vendor
	mov	r5, r0
.L18233:
	mov	r0, r5
	add	sp, sp, #24
	@ sp needed
	pop	{r4, r5, r6, pc}
.L18243:
	.align	2
.L18242:
	.word	.LANCHOR5+2992
	.word	.LANCHOR0+3716
	.fnend
	.size	rndis_qc_function_bind_config, .-rndis_qc_function_bind_config
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_function_bind_config, %function
ecm_qc_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r4, [r0, #4]
	.pad #12
	sub	sp, sp, #12
	cmp	r4, #0
	beq	.L18259
	ldr	r0, .L18262
	mov	r6, r1
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L18260
.L18247:
	ldr	r0, .L18262+4
	bl	strim
	mov	r1, r0
	mov	r5, r0
	movw	r0, #:lower16:.LC631
	movt	r0, #:upper16:.LC631
	bl	strcmp
	cmp	r0, #0
	beq	.L18248
	ldr	r3, [r6, #24]
	movw	r2, #:lower16:.LC1383
	mov	r1, r4
	movt	r2, #:upper16:.LC1383
	ldr	r0, [r3]
	bl	gether_qc_setup_name
	subs	r7, r0, #0
	bne	.L18261
.L18248:
	mov	r2, r5
	mov	r1, r4
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	ecm_qc_bind_config
.L18260:
	ldr	r2, .L18262+4
	movw	r1, #:lower16:.LC1402
	sub	r0, r0, #20
	ldr	r3, .L18262+8
	movt	r1, #:upper16:.LC1402
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
	b	.L18247
.L18261:
	ldr	r2, .L18262+8
	movw	r0, #:lower16:.LC1381
	movt	r0, #:upper16:.LC1381
	mov	r1, r2
	bl	printk
.L18244:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L18259:
	ldr	r2, .L18262+8
	movw	r0, #:lower16:.LC1382
	mvn	r7, #21
	movt	r0, #:upper16:.LC1382
	mov	r1, r2
	bl	printk
	b	.L18244
.L18263:
	.align	2
.L18262:
	.word	.LANCHOR8-556
	.word	.LANCHOR1+3020
	.word	.LANCHOR5+3024
	.fnend
	.size	ecm_qc_function_bind_config, .-ecm_qc_function_bind_config
	.align	2
	.global	gether_qc_cleanup_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_cleanup_name, %function
gether_qc_cleanup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, r0
	movw	r0, #:lower16:init_net
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movt	r0, #:upper16:init_net
	str	lr, [sp, #4]
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L18264
	.syntax divided
@ 17 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/irqflags.h" 1
		mrs	ip, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	movw	r2, #:lower16:__per_cpu_offset
	bic	r1, r3, #8128
	movt	r2, #:upper16:__per_cpu_offset
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
	ldr	r1, [r2, r1, lsl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, ip	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	bl	unregister_netdev
	mov	r0, r4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	free_netdev
.L18264:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gether_qc_cleanup_name, .-gether_qc_cleanup_name
	.align	2
	.global	gether_qc_connect_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_connect_name, %function
gether_qc_connect_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	movw	r0, #:lower16:init_net
	movt	r0, #:upper16:init_net
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L18270
	.syntax divided
@ 17 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/irqflags.h" 1
		mrs	r0, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	movw	r2, #:lower16:__per_cpu_offset
	bic	r1, r3, #8128
	movt	r2, #:upper16:__per_cpu_offset
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
	ldr	r1, [r2, r1, lsl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r0	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	adds	r7, r4, #1152
	beq	.L18270
	ldrb	r3, [r5, #96]	@ zero_extendqisi2
	mov	r0, r7
	strb	r3, [r4, #1172]
	ldr	r3, [r5, #100]
	str	r3, [r4, #1168]
	bl	_raw_spin_lock
	str	r5, [r4, #1156]
	str	r7, [r5, #84]
	ldr	r3, [r4, #1160]
	ldr	r3, [r3, #160]
	tst	r3, #1
	beq	.L18271
	ldr	r3, [r5, #112]
	cmp	r3, #0
	beq	.L18272
.L18289:
	mov	r0, r5
	blx	r3
.L18272:
	mov	r0, r7
	bl	_raw_spin_unlock
	cmp	r6, #0
	ldr	r0, [r4, #1160]
	bne	.L18273
.L18267:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L18271:
	ldr	r3, [r5, #116]
	cmp	r3, #0
	bne	.L18289
	b	.L18272
.L18270:
	mvn	r0, #21
	b	.L18267
.L18273:
	bl	netif_carrier_on
	ldr	r0, [r4, #1160]
	ldr	r3, [r0, #160]
	tst	r3, #1
	beq	.L18267
	ldr	r5, [r0, #576]
	mov	r0, #0
	add	r1, r5, #80
	bl	_test_and_clear_bit
	cmp	r0, #0
	bne	.L18275
.L18290:
	ldr	r0, [r4, #1160]
	b	.L18267
.L18275:
	ldr	r0, [r5, #4]
	bl	__netif_schedule
	b	.L18290
	.fnend
	.size	gether_qc_connect_name, .-gether_qc_connect_name
	.align	2
	.global	gether_qc_disconnect_name
	.syntax unified
	.arm
	.fpu softvfp
	.type	gether_qc_disconnect_name, %function
gether_qc_disconnect_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	movw	r0, #:lower16:init_net
	movt	r0, #:upper16:init_net
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_by_name
	subs	r4, r0, #0
	beq	.L18291
	.syntax divided
@ 17 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/irqflags.h" 1
		mrs	r0, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, sp
	movw	r2, #:lower16:__per_cpu_offset
	bic	r1, r3, #8128
	movt	r2, #:upper16:__per_cpu_offset
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
	ldr	r1, [r2, r1, lsl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
	.syntax divided
@ 142 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r0	@ local_irq_restore
@ 0 "" 2
	.arm
	.syntax unified
	adds	r6, r4, #1152
	beq	.L18291
	ldr	r3, [r4, #1160]
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L18301
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit
.L18296:
	ldr	r0, [r4, #1160]
	bl	netif_carrier_off
	mov	r0, r6
	bl	_raw_spin_lock
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #1156]
	str	r3, [r5, #84]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock
.L18291:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L18301:
	movw	r0, #:lower16:.LC101
	movw	r1, #1847
	movt	r0, #:upper16:.LC101
	bl	warn_slowpath_null
	movw	r0, #:lower16:.LC102
	movt	r0, #:upper16:.LC102
	bl	printk
	b	.L18296
	.fnend
	.size	gether_qc_disconnect_name, .-gether_qc_disconnect_name
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_disable, %function
ecm_qc_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L18325
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L18322
.L18303:
	ldr	r3, [r4, #88]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L18305
	ldr	r0, .L18325+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L18323
.L18306:
	add	r0, r4, #156
	bl	bam_data_disconnect.constprop.113
	ldr	r3, [r4, #124]
	cmp	r3, #7
	bne	.L18324
.L18305:
	ldr	r0, [r4, #144]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L18302
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #144]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #144]
	str	r3, [r2, #28]
.L18302:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L18324:
	movw	r1, #:lower16:.LC851
	mov	r0, r4
	movt	r1, #:upper16:.LC851
	bl	gether_qc_disconnect_name
	b	.L18305
.L18323:
	movw	r1, #:lower16:.LC1403
	ldr	r2, .L18325+8
	mov	r3, r4
	movt	r1, #:upper16:.LC1403
	sub	r0, r0, #20
	bl	__dynamic_pr_debug
	b	.L18306
.L18322:
	ldr	r1, [r4, #20]
	sub	r0, r3, #20
	movw	r2, #:lower16:.LC1390
	movt	r2, #:upper16:.LC1390
	ldr	r3, [r1, #24]
	ldr	r1, [r3]
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L18303
.L18326:
	.align	2
.L18325:
	.word	.LANCHOR8-532
	.word	.LANCHOR8-508
	.word	.LANCHOR5+3052
	.fnend
	.size	ecm_qc_disable, .-ecm_qc_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ecm_qc_set_alt, %function
ecm_qc_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r0
	mov	r5, r2
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldrb	r0, [r0, #120]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r4, #20]
	cmp	r0, r1
	ldr	r6, [r3, #24]
	beq	.L18378
	ldrb	r3, [r4, #121]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r3, r1
	bne	.L18377
	ldr	r2, [r4, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L18334
	ldr	r0, .L18386
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L18379
.L18335:
	ldr	r0, .L18386+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L18380
.L18336:
	add	r0, r4, #156
	bl	bam_data_disconnect.constprop.113
	ldr	r3, [r4, #124]
	cmp	r3, #7
	beq	.L18376
	movw	r1, #:lower16:.LC851
	mov	r0, r4
	movt	r1, #:upper16:.LC851
	bl	gether_qc_disconnect_name
.L18376:
	ldr	r2, [r4, #88]
.L18334:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L18338
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L18338
.L18339:
	cmp	r5, #1
	bne	.L18343
	ldr	r3, [r6]
	movw	r0, #:lower16:.LC513
	movt	r0, #:upper16:.LC513
	ldr	r1, [r3, #28]
	bl	strcmp
	ldr	r3, .L18386+8
	mov	r2, #15
	adds	r0, r0, #0
	movne	r0, #1
	strh	r2, [r4, #98]	@ movhi
	ldrh	r2, [r3, #-2]
	strb	r0, [r4, #96]
	tst	r2, #4
	bne	.L18381
.L18344:
	ldr	r3, [r4, #124]
	cmp	r3, #7
	beq	.L18345
	movw	r1, #:lower16:.LC851
	mov	r2, #1
	movt	r1, #:upper16:.LC851
	mov	r0, r4
	bl	gether_qc_connect_name
	cmn	r0, #4096
	bhi	.L18327
	ldr	r2, [r4, #20]
	ldr	r3, [r4, #124]
	ldr	r2, [r2, #24]
	cmp	r3, #7
	moveq	r6, #2
	movne	r6, #0
	ldr	r5, [r2]
.L18347:
	ldr	ip, [r4, #88]
	mov	r3, #0
	mov	r1, r6
	ldr	r0, [r4, #92]
	str	r2, [r4, #156]
	mov	r2, r3
	str	r4, [r4, #160]
	str	ip, [r4, #164]
	str	r0, [r4, #168]
	ldr	r0, [r5, #28]
	bl	usb_bam_get_connection_idx
	mov	r7, r0
	mov	r1, r6
	ldr	r0, [r5, #28]
	mov	r3, #0
	mov	r2, #1
	bl	usb_bam_get_connection_idx
	mov	ip, #0
	uxtb	r3, r0
	ldr	r1, [r4, #124]
	uxtb	r2, r7
	add	r0, r4, #156
	str	ip, [sp]
	bl	bam_data_connect.constprop.111
	subs	r2, r0, #0
	bne	.L18382
	ldr	r0, .L18386+12
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L18383
.L18349:
	movw	r3, #257
	mov	r0, r4
	strh	r3, [r4, #152]	@ movhi
	bl	ecm_qc_do_notify
.L18343:
	mov	r3, #1
	mov	r0, r4
	strb	r3, [r4, #152]
	bl	ecm_qc_do_notify
	mov	r0, #0
.L18327:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L18338:
	ldr	r3, .L18386+16
	ldr	r0, [r6]
	ldrh	r1, [r3, #-2]
	tst	r1, #4
	bne	.L18384
.L18340:
	mov	r1, r4
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L18342
	mov	r1, r4
	ldr	r0, [r6]
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed
	cmp	r0, #0
	beq	.L18339
.L18342:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L18327
.L18378:
	cmp	r2, #0
	bne	.L18377
	ldr	r0, [r4, #144]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L18331
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #144]
.L18331:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L18385
.L18332:
	ldr	r3, [r0, #8]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #144]
	mov	r0, #0
	str	r4, [r3]
	b	.L18327
.L18345:
	ldr	r3, [r4, #20]
	mov	r6, #2
	ldr	r2, [r3, #24]
	ldr	r5, [r2]
	b	.L18347
.L18385:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r6]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L18377
	ldr	r0, [r4, #144]
	ldr	r1, [r0, #28]
	b	.L18332
.L18379:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC1391
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1391
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L18335
.L18380:
	movw	r1, #:lower16:.LC1403
	ldr	r2, .L18386+20
	mov	r3, r4
	movt	r1, #:upper16:.LC1403
	sub	r0, r0, #20
	bl	__dynamic_pr_debug
	b	.L18336
.L18384:
	movw	r2, #:lower16:.LC1392
	add	r1, r0, #32
	movt	r2, #:upper16:.LC1392
	sub	r0, r3, #20
	bl	__dynamic_dev_dbg
	ldr	r0, [r6]
	ldr	r2, [r4, #88]
	b	.L18340
.L18381:
	ldr	r1, [r6]
	movw	r2, #:lower16:.LC1393
	sub	r0, r3, #20
	movt	r2, #:upper16:.LC1393
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L18344
.L18382:
	movw	r0, #:lower16:.LC1404
	ldr	r1, .L18386+24
	movt	r0, #:upper16:.LC1404
	bl	printk
.L18377:
	mvn	r0, #21
	b	.L18327
.L18383:
	movw	r1, #:lower16:.LC1405
	ldr	r2, .L18386+24
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC1405
	bl	__dynamic_pr_debug
	b	.L18349
.L18387:
	.align	2
.L18386:
	.word	.LANCHOR8-484
	.word	.LANCHOR8-508
	.word	.LANCHOR8-436
	.word	.LANCHOR8-412
	.word	.LANCHOR8-460
	.word	.LANCHOR5+3052
	.word	.LANCHOR5+3076
	.fnend
	.size	ecm_qc_set_alt, .-ecm_qc_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_disable, %function
rndis_qc_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #156]
	ldr	r3, [r3]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	movw	r0, #:lower16:.LC1406
	ldr	r1, .L18433
	movt	r0, #:upper16:.LC1406
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #8
	sub	sp, sp, #8
	bl	printk
	ldr	r2, [r4, #144]
	cmp	r2, #0
	ble	.L18390
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
.L18400:
	ldr	r0, .L18433+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	beq	.L18392
	ldr	r2, .L18433+8
	movw	r1, #:lower16:.LC1407
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC1407
	mov	r3, r4
	str	r2, [sp]
	bl	__dynamic_pr_debug
.L18392:
	ldr	r0, .L18433+12
	add	r5, r4, #168
	ldrh	r3, [r0, #-14]
	tst	r3, #4
	beq	.L18402
	mov	r3, #0
	movw	r1, #:lower16:.LC156
	ldr	r2, .L18433+16
	sub	r0, r0, #32
	movt	r1, #:upper16:.LC156
	str	r3, [sp]
	mov	r3, r5
	bl	__dynamic_pr_debug
.L18402:
	ldr	r3, [r7, #3944]
	cmp	r3, #0
	bgt	.L18403
	movw	r0, #:lower16:.LC654
	mov	r2, #0
	ldr	r1, .L18433+16
	movt	r0, #:upper16:.LC654
	bl	printk
.L18404:
	movw	r1, #:lower16:.LC780
	mov	r0, r4
	movt	r1, #:upper16:.LC780
	bl	gether_qc_disconnect_name
	ldr	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #156]
	mov	r2, #0
	str	r2, [r3]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L18390:
	mov	r3, #60
	movw	r7, #:lower16:.LANCHOR1
	movt	r7, #:upper16:.LANCHOR1
	mov	r1, #0
	mul	r3, r3, r2
	add	r2, r7, r3
	add	r5, r2, #3920
	add	r5, r5, #4
	str	r1, [r2, #3876]
	mov	r8, r5
.L18393:
	ldr	r3, [r8]
	ldr	r2, [r3]
.L18397:
	cmp	r3, r5
	beq	.L18400
	ldr	r1, [r3, #16]
	cmp	r1, #0
	bne	.L18398
	ldr	r10, [r3, #8]
	mov	r2, #1
	str	r2, [r3, #16]
	cmp	r10, #0
	beq	.L18400
	ldr	r6, [r8]
	ldr	r9, [r6]
.L18394:
	cmp	r5, r6
	beq	.L18393
	cmp	r6, #0
	beq	.L18395
	ldr	r3, [r6, #8]
	cmp	r10, r3
	bne	.L18395
	mov	r0, r6
	bl	list_del
	mov	r0, r6
	bl	kfree
.L18395:
	mov	r6, r9
	ldr	r9, [r9]
	b	.L18394
.L18403:
	cmp	r5, #0
	bne	.L18405
	movw	r0, #:lower16:.LC653
	ldr	r1, .L18433+16
	movt	r0, #:upper16:.LC653
	bl	printk
	b	.L18404
.L18405:
	ldr	r5, [r7, #3936]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L18406
	ldr	r2, [r3, #8]
	cmp	r2, #0
	beq	.L18406
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L18406
	ldr	r0, [r3, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #4]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r5, #4]
	mov	r3, #0
	ldr	r2, [r2, #8]
	str	r3, [r2]
	ldr	r2, [r5, #4]
	ldr	r2, [r2, #12]
	str	r3, [r2]
	str	r3, [r5, #4]
.L18406:
	ldr	r3, [r5, #60]
	cmp	r3, #7
	bne	.L18407
	add	r1, r5, #184
	ldr	r0, [r7, #3940]
	bl	queue_work
	b	.L18404
.L18407:
	mov	r0, #0
	bl	usb_bam_client_ready
	cmp	r0, #0
	beq	.L18404
	ldr	r2, .L18433+16
	movw	r0, #:lower16:.LC655
	movt	r0, #:upper16:.LC655
	mov	r1, r2
	bl	printk
	b	.L18404
.L18398:
	mov	r3, r2
	ldr	r2, [r2]
	b	.L18397
.L18434:
	.align	2
.L18433:
	.word	.LANCHOR5+3096
	.word	.LANCHOR8-388
	.word	.LANCHOR5+3116
	.word	.LANCHOR4-1648
	.word	.LANCHOR5-3036
	.fnend
	.size	rndis_qc_disable, .-rndis_qc_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	rndis_qc_set_alt, %function
rndis_qc_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r2, [r0, #120]	@ zero_extendqisi2
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r7, [r3, #24]
	beq	.L18478
	ldrb	r3, [r0, #121]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L18441
	ldr	ip, [r0, #88]
	ldr	r3, [ip]
	cmp	r3, #0
	beq	.L18442
	ldr	r0, .L18484
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L18479
.L18443:
	ldr	r0, .L18484+4
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L18480
.L18444:
	add	r0, r4, #168
	bl	bam_data_disconnect.constprop.113
	movw	r1, #:lower16:.LC780
	mov	r0, r4
	movt	r1, #:upper16:.LC780
	bl	gether_qc_disconnect_name
	ldr	ip, [r4, #88]
.L18442:
	ldr	r3, [ip, #28]
	cmp	r3, #0
	beq	.L18445
	ldr	lr, [r4, #92]
	ldr	r3, [lr, #28]
	cmp	r3, #0
	beq	.L18445
.L18446:
	ldr	r1, [r4, #20]
	mov	r5, #0
	mov	r3, r5
	mov	r2, r5
	strb	r5, [r4, #96]
	strh	r5, [r4, #98]	@ movhi
	ldr	r0, [r1, #24]
	mov	r1, r5
	ldr	r6, [r0]
	str	r0, [r4, #168]
	str	r4, [r4, #172]
	str	ip, [r4, #176]
	str	lr, [r4, #180]
	ldr	r0, [r6, #28]
	bl	usb_bam_get_connection_idx
	mov	r8, r0
	mov	r3, r5
	ldr	r0, [r6, #28]
	mov	r1, r5
	mov	r2, #1
	bl	usb_bam_get_connection_idx
	mov	ip, #2
	uxtb	r3, r0
	uxtb	r2, r8
	mov	r1, #6
	str	ip, [sp]
	add	r0, r4, #168
	bl	bam_data_connect.constprop.111
	subs	r5, r0, #0
	beq	.L18449
	movw	r0, #:lower16:.LC1404
	mov	r2, r5
	ldr	r1, .L18484+8
	movt	r0, #:upper16:.LC1404
	mvn	r5, #21
	bl	printk
	b	.L18435
.L18445:
	ldr	r3, .L18484+12
	ldr	r0, [r7]
	ldrh	r2, [r3, #-2]
	tst	r2, #4
	bne	.L18481
.L18447:
	mov	r2, ip
	mov	r1, r4
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L18448
	mov	r1, r4
	ldr	r0, [r7]
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L18448
	ldr	ip, [r4, #88]
	ldr	lr, [r4, #92]
	b	.L18446
.L18478:
	ldr	r0, [r0, #156]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L18437
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #156]
.L18437:
	ldr	r1, [r0, #28]
	cmp	r1, #0
	beq	.L18482
.L18438:
	ldr	r3, [r0, #8]
	mov	r5, #0
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #156]
	str	r4, [r3]
.L18435:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L18482:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r7]
	bl	config_ep_by_speed
	cmp	r0, #0
	bne	.L18441
	ldr	r0, [r4, #156]
	ldr	r1, [r0, #28]
	b	.L18438
.L18480:
	ldr	r2, .L18484+16
	movw	r1, #:lower16:.LC1407
	mov	r3, r4
	movt	r1, #:upper16:.LC1407
	sub	r0, r0, #20
	str	r2, [sp]
	bl	__dynamic_pr_debug
	b	.L18444
.L18479:
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC1387
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1387
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L18443
.L18481:
	movw	r2, #:lower16:.LC1388
	add	r1, r0, #32
	movt	r2, #:upper16:.LC1388
	sub	r0, r3, #20
	bl	__dynamic_dev_dbg
	ldr	r0, [r7]
	ldr	ip, [r4, #88]
	b	.L18447
.L18441:
	mvn	r5, #21
	b	.L18435
.L18448:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r5, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L18435
.L18449:
	movw	r0, #:lower16:.LC1408
	ldr	r1, .L18484+8
	movt	r0, #:upper16:.LC1408
	bl	printk
	ldr	r0, .L18484+20
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L18483
.L18450:
	movw	r1, #:lower16:.LC780
	mov	r2, #0
	movt	r1, #:upper16:.LC780
	mov	r0, r4
	bl	gether_qc_connect_name
	cmn	r0, #4096
	mov	r6, r0
	movhi	r5, r0
	bhi	.L18435
	ldr	r0, .L18484+24
	ldr	r7, [r4, #144]
	ldrh	r3, [r0, #-6]
	tst	r3, #4
	beq	.L18452
	movw	r1, #:lower16:.LC289
	sub	r0, r0, #24
	ldr	r2, .L18484+28
	movt	r1, #:upper16:.LC289
	bl	__dynamic_pr_debug
.L18452:
	uxtb	r7, r7
	clz	r3, r6
	lsr	r3, r3, #5
	cmp	r7, #0
	movne	r3, #1
	cmp	r3, #0
	bne	.L18435
	movw	r2, #:lower16:.LANCHOR1
	add	r4, r4, #98
	movt	r2, #:upper16:.LANCHOR1
	str	r3, [r2, #3744]
	str	r3, [r2, #3748]
	str	r4, [r2, #3896]
	str	r6, [r2, #3900]
	b	.L18435
.L18483:
	ldr	r1, [r7]
	movw	r2, #:lower16:.LC1409
	sub	r0, r0, #20
	movt	r2, #:upper16:.LC1409
	add	r1, r1, #32
	bl	__dynamic_dev_dbg
	b	.L18450
.L18485:
	.align	2
.L18484:
	.word	.LANCHOR8-364
	.word	.LANCHOR8-388
	.word	.LANCHOR5+3140
	.word	.LANCHOR8-340
	.word	.LANCHOR5+3116
	.word	.LANCHOR8-316
	.word	.LANCHOR8-1200
	.word	.LANCHOR5+1980
	.fnend
	.size	rndis_qc_set_alt, .-rndis_qc_set_alt
	.align	2
	.global	pcm_buffer_size
	.syntax unified
	.arm
	.fpu softvfp
	.type	pcm_buffer_size, %function
pcm_buffer_size:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r2, #:lower16:.LANCHOR4
	movw	r3, #906
	movt	r2, #:upper16:.LANCHOR4
	ldrh	r1, [r2, r3]
	ldr	r3, [r0, #380]
	tst	r1, #4
	bne	.L18495
	mov	r0, r3
	bx	lr
.L18495:
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	add	r0, r2, #888
	str	r6, [sp, #8]
	movw	r1, #:lower16:.LC822
	str	lr, [sp, #12]
	ldrb	ip, [r4, #388]	@ zero_extendqisi2
	.pad #24
	sub	sp, sp, #24
	ldr	r6, [r4, #384]
	movt	r1, #:upper16:.LC822
	ubfx	lr, ip, #3, #1
	ubfx	r5, ip, #2, #1
	ubfx	r2, ip, #1, #1
	and	ip, ip, #1
	stm	sp, {r6, ip}
	str	r2, [sp, #8]
	ldr	r2, .L18496
	str	r5, [sp, #12]
	str	lr, [sp, #16]
	bl	__dynamic_pr_debug
	ldr	r3, [r4, #380]
	mov	r0, r3
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L18497:
	.align	2
.L18496:
	.word	.LANCHOR5-1412
	.fnend
	.size	pcm_buffer_size, .-pcm_buffer_size
	.align	2
	.global	pcm_period_size
	.syntax unified
	.arm
	.fpu softvfp
	.type	pcm_period_size, %function
pcm_period_size:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #332]
	bx	lr
	.fnend
	.size	pcm_period_size, .-pcm_period_size
	.align	2
	.global	u_audio_clear
	.syntax unified
	.arm
	.fpu softvfp
	.type	u_audio_clear, %function
u_audio_clear:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	strb	r2, [r3, #2216]
	bx	lr
	.fnend
	.size	u_audio_clear, .-u_audio_clear
	.align	2
	.global	gaudio_setup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gaudio_setup, %function
gaudio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	subs	r4, r0, #0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	beq	.L18546
	movw	r6, #:lower16:.LANCHOR6
	mov	r2, #0
	movt	r6, #:upper16:.LANCHOR6
	mov	r1, #2
	ldr	r0, [r6, #-1036]
	bl	filp_open
	cmn	r0, #4096
	mov	r5, r0
	str	r0, [r4, #92]
	bhi	.L18547
	mov	r2, #0
	mov	r1, #1
	str	r4, [r4, #88]
	ldr	r0, [r6, #-1032]
	bl	filp_open
	cmn	r0, #4096
	str	r0, [r4, #120]
	bhi	.L18548
	movw	r7, #:lower16:.LANCHOR8
	movt	r7, #:upper16:.LANCHOR8
	sub	r3, r7, #292
	ldrh	r3, [r3, #-2]
	tst	r3, #4
	bne	.L18549
.L18506:
	movw	r8, #:lower16:kmalloc_caches
	ldr	r2, [r0, #124]
	mov	r3, #2
	movt	r8, #:upper16:kmalloc_caches
	mov	ip, #3
	ldr	r0, [r8, #40]
	ldr	r1, [r2]
	mov	r2, #8000
	str	r4, [r4, #116]
	cmp	r0, #0
	str	r1, [r4, #124]
	str	ip, [r4, #128]
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	str	r2, [r4, #140]
	beq	.L18522
	mov	r2, #604
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L18550
.L18507:
	mov	r0, r5
	bl	_snd_pcm_hw_params_any
	mov	r0, r5
	ldr	r1, [r4, #128]
	bl	_snd_pcm_hw_param_set.constprop.102
	mov	r0, r5
	ldr	r1, [r4, #132]
	bl	_snd_pcm_hw_param_set.constprop.103
	mov	r0, r5
	ldr	r1, [r4, #136]
	bl	_snd_pcm_hw_param_set.constprop.104
	mov	r0, r5
	ldr	r1, [r4, #140]
	bl	_snd_pcm_hw_param_set.constprop.105
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L18523
	ldr	r3, [r5, #8]
	cmp	r3, #0
	movne	r2, #32
	bne	.L18508
.L18509:
	str	r3, [r4, #128]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L18525
	ldr	r3, [r5, #40]
	cmp	r3, #0
	movne	r2, #32
	bne	.L18510
.L18511:
	str	r3, [r4, #132]
	ldr	r3, [r5, #284]
	mov	r0, r5
	str	r3, [r4, #136]
	ldr	r3, [r5, #296]
	str	r3, [r4, #140]
	bl	kfree
	ldr	r0, .L18555
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	bne	.L18551
.L18512:
	mov	r2, #0
	ldr	r0, [r6, #-1028]
	mov	r1, r2
	bl	filp_open
	cmn	r0, #4096
	str	r0, [r4, #148]
	bhi	.L18552
	ldr	r2, [r0, #124]
	mov	lr, #3
	mov	ip, #2
	ldr	r0, [r8, #40]
	mov	r1, #1
	mov	r3, #8000
	ldr	r2, [r2]
	str	r4, [r4, #144]
	cmp	r0, #0
	str	r2, [r4, #152]
	str	lr, [r4, #156]
	str	ip, [r4, #160]
	str	r1, [r4, #164]
	str	r3, [r4, #168]
	beq	.L18527
	mov	r2, #604
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r5, r0, #0
	beq	.L18553
.L18514:
	mov	r0, r5
	bl	_snd_pcm_hw_params_any
	mov	r0, r5
	ldr	r1, [r4, #156]
	bl	_snd_pcm_hw_param_set.constprop.102
	mov	r0, r5
	ldr	r1, [r4, #160]
	bl	_snd_pcm_hw_param_set.constprop.103
	mov	r0, r5
	ldr	r1, [r4, #164]
	bl	_snd_pcm_hw_param_set.constprop.104
	mov	r0, r5
	ldr	r1, [r4, #168]
	bl	_snd_pcm_hw_param_set.constprop.105
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L18528
	ldr	r3, [r5, #8]
	cmp	r3, #0
	movne	r2, #32
	bne	.L18516
.L18517:
	str	r3, [r4, #156]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L18530
	ldr	r3, [r5, #40]
	cmp	r3, #0
	movne	r2, #32
	bne	.L18518
.L18519:
	str	r3, [r4, #160]
	ldr	r3, [r5, #284]
	mov	r0, r5
	str	r3, [r4, #164]
	ldr	r3, [r5, #296]
	str	r3, [r4, #168]
	bl	kfree
	ldrh	r3, [r7, #-246]
	tst	r3, #4
	bne	.L18554
.L18520:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r0, [r3, #3980]
	cmp	r0, #0
	moveq	r5, r0
	movne	r5, #0
	streq	r4, [r3, #3980]
.L18500:
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L18522:
	mov	r5, #16
	b	.L18507
.L18527:
	mov	r5, #16
	b	.L18514
.L18549:
	movw	r1, #:lower16:.LC1412
	ldr	r2, .L18555+4
	sub	r0, r7, #312
	movt	r1, #:upper16:.LC1412
	ldr	r3, [r6, #-1032]
	bl	__dynamic_pr_debug
	ldr	r0, [r4, #120]
	b	.L18506
.L18554:
	ldr	r3, [r4, #168]
	movw	r1, #:lower16:.LC824
	movt	r1, #:upper16:.LC824
	ldr	r2, .L18555+8
	ldr	r0, .L18555+12
	str	r3, [sp, #8]
	ldr	r3, [r4, #164]
	str	r3, [sp, #4]
	ldr	r3, [r4, #160]
	str	r3, [sp]
	ldr	r3, [r4, #156]
	bl	__dynamic_pr_debug
	b	.L18520
.L18551:
	ldr	r3, [r4, #140]
	movw	r1, #:lower16:.LC816
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC816
	ldr	r2, .L18555+16
	str	r3, [sp, #8]
	ldr	r3, [r4, #136]
	str	r3, [sp, #4]
	ldr	r3, [r4, #132]
	str	r3, [sp]
	ldr	r3, [r4, #128]
	bl	__dynamic_pr_debug
	b	.L18512
.L18525:
	mov	r2, #0
.L18510:
	add	r1, r2, #31
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	sub	r3, r1, r3
	b	.L18511
.L18523:
	mov	r2, #0
.L18508:
	add	r1, r2, #31
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	sub	r3, r1, r3
	b	.L18509
.L18528:
	mov	r2, #0
.L18516:
	add	r1, r2, #31
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	sub	r3, r1, r3
	b	.L18517
.L18530:
	mov	r2, #0
.L18518:
	add	r1, r2, #31
	rsb	r2, r3, #0
	and	r3, r3, r2
	.syntax divided
@ 268 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	.arm
	.syntax unified
	sub	r3, r1, r3
	b	.L18519
.L18546:
	ldr	r2, .L18555+4
	movw	r0, #:lower16:.LC811
	mvn	r5, #18
	movt	r0, #:upper16:.LC811
	mov	r1, r2
	bl	printk
.L18502:
	movw	r0, #:lower16:.LC1416
	ldr	r1, .L18555+20
	movt	r0, #:upper16:.LC1416
	bl	printk
	b	.L18500
.L18553:
	movw	r0, #:lower16:.LC1415
	mvn	r2, #11
	ldr	r1, .L18555+4
	movt	r0, #:upper16:.LC1415
	mov	r5, r2
	bl	printk
	b	.L18502
.L18550:
	movw	r0, #:lower16:.LC1413
	mvn	r2, #11
	ldr	r1, .L18555+4
	movt	r0, #:upper16:.LC1413
	mov	r5, r2
	bl	printk
	b	.L18502
.L18552:
	movw	r0, #:lower16:.LC1414
	ldr	r1, .L18555+4
	mvn	r5, #21
	movt	r0, #:upper16:.LC1414
	ldr	r2, [r6, #-1028]
	bl	printk
	mov	r3, #0
	str	r3, [r4, #144]
	str	r3, [r4, #148]
	str	r3, [r4, #152]
	b	.L18502
.L18548:
	movw	r0, #:lower16:.LC1411
	ldr	r1, .L18555+4
	mvn	r5, #21
	movt	r0, #:upper16:.LC1411
	ldr	r2, [r6, #-1032]
	bl	printk
	mov	r3, #0
	str	r3, [r4, #120]
	b	.L18502
.L18547:
	movw	r0, #:lower16:.LC1410
	ldr	r1, .L18555+4
	movt	r0, #:upper16:.LC1410
	ldr	r2, [r6, #-1036]
	bl	printk
	mov	r3, #0
	cmp	r5, #0
	str	r3, [r4, #92]
	beq	.L18520
	b	.L18502
.L18556:
	.align	2
.L18555:
	.word	.LANCHOR8-268
	.word	.LANCHOR5+3164
	.word	.LANCHOR5+3212
	.word	.LANCHOR8-264
	.word	.LANCHOR5+3184
	.word	.LANCHOR5+3240
	.fnend
	.size	gaudio_setup, .-gaudio_setup
	.align	2
	.global	gaudio_cleanup
	.syntax unified
	.arm
	.fpu softvfp
	.type	gaudio_cleanup, %function
gaudio_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldr	r5, [r4, #3980]
	str	lr, [sp, #12]
	cmp	r5, #0
	beq	.L18557
	movw	r0, #:lower16:.LANCHOR8
	movt	r0, #:upper16:.LANCHOR8
	ldrh	r3, [r0, #-222]
	tst	r3, #4
	bne	.L18579
.L18559:
	ldr	r0, [r5, #92]
	cmp	r0, #0
	beq	.L18560
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #928]
	bl	filp_close
.L18560:
	ldr	r0, [r5, #120]
	cmp	r0, #0
	beq	.L18561
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #928]
	bl	filp_close
.L18561:
	ldr	r0, [r5, #148]
	cmp	r0, #0
	beq	.L18562
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #928]
	bl	filp_close
.L18562:
	mov	r3, #0
	str	r3, [r4, #3980]
.L18557:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L18579:
	movw	r1, #:lower16:.LC1417
	ldr	r2, .L18580
	sub	r0, r0, #240
	movt	r1, #:upper16:.LC1417
	bl	__dynamic_pr_debug
	b	.L18559
.L18581:
	.align	2
.L18580:
	.word	.LANCHOR5+3256
	.fnend
	.size	gaudio_cleanup, .-gaudio_cleanup
	.align	2
	.global	control_selector_init
	.syntax unified
	.arm
	.fpu softvfp
	.type	control_selector_init, %function
control_selector_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	movw	r4, #:lower16:.LANCHOR6
	movt	r4, #:upper16:.LANCHOR6
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	add	r8, r5, #252
	sub	r0, r4, #1024
	mov	r2, r8
	mov	r1, r8
	str	lr, [sp, #20]
	str	r8, [r5, #252]
	sub	r6, r4, #1016
	sub	r7, r4, #984
	str	r8, [r5, #256]
	bl	__list_add
	mov	r1, r8
	sub	r0, r4, #992
	ldr	r2, [r5, #252]
	bl	__list_add
	mov	r2, r6
	mov	r1, r6
	str	r6, [r4, #-1016]
	sub	r0, r4, #960
	str	r6, [r4, #-1012]
	add	r8, r5, #260
	bl	__list_add
	mov	r1, r6
	sub	r0, r4, #916
	ldr	r2, [r4, #-1016]
	bl	__list_add
	mov	r2, r7
	mov	r1, r7
	str	r7, [r4, #-984]
	sub	r0, r4, #872
	str	r7, [r4, #-980]
	sub	r6, r4, #3856
	bl	__list_add
	mov	r1, r7
	sub	r0, r4, #828
	ldr	r2, [r4, #-984]
	bl	__list_add
	movw	r2, #65472
	movw	r1, #58272
	str	r8, [r5, #260]
	movw	ip, #65520
	mov	r3, #48
	str	r8, [r5, #264]
	sub	r7, r4, #3888
	mov	r0, r6
	str	r2, [r4, #-896]
	str	r1, [r4, #-892]
	add	r6, r6, #8
	str	ip, [r4, #-888]
	str	r2, [r4, #-808]
	mov	r2, r8
	str	r1, [r4, #-804]
	mov	r1, r8
	str	r3, [r4, #-884]
	str	ip, [r4, #-800]
	str	r3, [r4, #-796]
	bl	__list_add
	mov	r1, r8
	mov	r0, r7
	ldr	r2, [r5, #260]
	add	r7, r7, #8
	bl	__list_add
	sub	r0, r4, #784
	mov	r2, r7
	str	r7, [r4, #-3880]
	mov	r1, r7
	str	r7, [r4, #-3876]
	bl	__list_add
	sub	r0, r4, #740
	mov	r2, r6
	str	r6, [r4, #-3848]
	mov	r1, r6
	str	r6, [r4, #-3844]
	bl	__list_add
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	control_selector_init, .-control_selector_init
	.align	2
	.global	audio_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_bind_config, %function
audio_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:kmalloc_caches
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	movt	r3, #:upper16:kmalloc_caches
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L18593
	mov	r2, #276
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L18614
.L18585:
	ldr	r0, .L18618
	movw	r1, #:lower16:.LC1418
	movw	r3, #:lower16:f_audio_bind
	ldr	ip, [r5, #24]
	movt	r1, #:upper16:.LC1418
	movw	r2, #:lower16:f_audio_unbind
	movt	r3, #:upper16:f_audio_bind
	movt	r2, #:upper16:f_audio_unbind
	add	lr, r4, #204
	ldr	r6, [ip]
	str	r1, [r4]
	movw	r1, #:lower16:f_audio_get_alt
	str	r0, [r4, #4]
	movw	r0, #:lower16:f_audio_set_alt
	movt	r1, #:upper16:f_audio_get_alt
	movt	r0, #:upper16:f_audio_set_alt
	str	r3, [r4, #32]
	movw	r3, #:lower16:f_audio_setup
	str	r2, [r4, #36]
	movw	r2, #:lower16:f_audio_disable
	mov	ip, #0
	movt	r3, #:upper16:f_audio_setup
	movt	r2, #:upper16:f_audio_disable
	strd	r0, [r4, #40]
	add	r1, r4, #236
	mov	r0, r4
	strd	r2, [r4, #48]
	str	r6, [r4, #84]
	str	ip, [r4, #180]
	str	lr, [r4, #204]
	str	lr, [r4, #208]
	str	ip, [r4, #212]
	str	r1, [r4, #236]
	str	r1, [r4, #240]
	bl	control_selector_init
	movw	r2, #:lower16:f_audio_playback_work
	movw	r3, #:lower16:f_audio_capture_work
	movt	r2, #:upper16:f_audio_playback_work
	mov	r1, #2560
	add	r0, r4, #192
	movt	r3, #:upper16:f_audio_capture_work
	str	r1, [r4, #188]
	str	r2, [r4, #200]
	add	r2, r4, #224
	str	r0, [r4, #192]
	str	r0, [r4, #196]
	mov	r0, r4
	str	r1, [r4, #220]
	str	r2, [r4, #224]
	str	r2, [r4, #228]
	str	r3, [r4, #232]
	bl	gaudio_setup
	subs	r6, r0, #0
	blt	.L18615
	mov	r0, r5
	mov	r1, r4
	bl	usb_add_function
	subs	r6, r0, #0
	bne	.L18616
.L18584:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L18593:
	mov	r4, #16
	b	.L18585
.L18615:
	movw	r5, #:lower16:.LANCHOR1
	movt	r5, #:upper16:.LANCHOR1
	ldr	r7, [r5, #3980]
	cmp	r7, #0
	beq	.L18588
	movw	r0, #:lower16:.LANCHOR8
	movt	r0, #:upper16:.LANCHOR8
	ldrh	r3, [r0, #-222]
	tst	r3, #4
	bne	.L18617
.L18589:
	ldr	r0, [r7, #92]
	cmp	r0, #0
	beq	.L18590
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #928]
	bl	filp_close
.L18590:
	ldr	r0, [r7, #120]
	cmp	r0, #0
	beq	.L18591
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #928]
	bl	filp_close
.L18591:
	ldr	r0, [r7, #148]
	cmp	r0, #0
	beq	.L18592
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #928]
	bl	filp_close
.L18592:
	mov	r3, #0
	str	r3, [r5, #3980]
.L18588:
	mov	r0, r4
	bl	kfree
	b	.L18584
.L18617:
	movw	r1, #:lower16:.LC1417
	ldr	r2, .L18618+4
	sub	r0, r0, #240
	movt	r1, #:upper16:.LC1417
	bl	__dynamic_pr_debug
	b	.L18589
.L18614:
	mvn	r6, #11
	b	.L18584
.L18616:
	ldr	r2, .L18618+8
	movw	r0, #:lower16:.LC1419
	mov	r3, r6
	movt	r0, #:upper16:.LC1419
	mov	r1, r2
	bl	printk
	b	.L18588
.L18619:
	.align	2
.L18618:
	.word	.LANCHOR6-696
	.word	.LANCHOR5+3256
	.word	.LANCHOR5+3280
	.fnend
	.size	audio_bind_config, .-audio_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	audio_function_bind_config, %function
audio_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r1
	b	audio_bind_config
	.fnend
	.size	audio_function_bind_config, .-audio_function_bind_config
	.align	2
	.global	conn_gadget_req_put
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_req_put, %function
conn_gadget_req_put:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r4, r0, #88
	mov	r0, r4
	strd	r6, [sp, #8]
	mov	r7, r1
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	mov	r5, r0
	mov	r2, r7
	ldr	r1, [r7, #4]
	add	r0, r6, #36
	bl	__list_add
	mov	r1, r5
	mov	r0, r4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	conn_gadget_req_put, .-conn_gadget_req_put
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_request_ep_out, %function
conn_gadget_request_ep_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #88
	strd	r8, [sp, #16]
	add	r9, r0, #128
	str	r10, [sp, #24]
	add	r10, r0, #136
	str	lr, [sp, #28]
	b	.L18624
.L18627:
	bl	list_del
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	cmp	r7, #0
	mov	r1, r7
	mov	r2, #32
	beq	.L18626
	ldr	r3, [r5, #192]
	str	r3, [r4, #-32]
	ldr	r0, [r5, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	mov	r0, r6
	blt	.L18630
	bl	_raw_spin_lock_irqsave
	mov	r7, r0
	mov	r2, r10
	ldr	r1, [r5, #140]
	mov	r0, r4
	bl	__list_add
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L18624:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5, #128]
	mov	r8, r0
	cmp	r9, r4
	mov	r0, r4
	sub	r7, r4, #36
	bne	.L18627
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
.L18626:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L18630:
	movw	r0, #:lower16:.LC964
	mov	r2, r7
	ldr	r1, .L18631
	movt	r0, #:upper16:.LC964
	bl	printk
	mov	r2, r7
	mov	r1, r9
	mov	r0, r5
	bl	conn_gadget_req_put
	b	.L18626
.L18632:
	.align	2
.L18631:
	.word	.LANCHOR5+3300
	.fnend
	.size	conn_gadget_request_ep_out, .-conn_gadget_request_ep_out
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_set_alt, %function
conn_gadget_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	mov	r4, r0
	ldr	ip, [r4, #20]
	movw	r0, #:lower16:.LC1420
	mov	r3, r2
	movt	r0, #:upper16:.LC1420
	mov	r2, r1
	ldr	r1, .L18639
	ldr	r6, [ip, #24]
	bl	printk
	mov	r1, r4
	ldr	r2, [r4, #92]
	ldr	r0, [r6]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L18633
	ldr	r3, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	bne	.L18633
	mov	r1, r4
	ldr	r0, [r6]
	ldr	r2, [r4, #96]
	bl	config_ep_by_speed
	subs	r5, r0, #0
	bne	.L18638
	ldr	r3, [r4, #96]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r1, [r3, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L18636
.L18638:
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L18633
.L18636:
	ldr	r3, [r4, #100]
	mov	r6, #1
	movw	r0, #:lower16:.LC1421
	ldr	r1, .L18639
	movt	r0, #:upper16:.LC1421
	str	r6, [r4, #100]
	str	r5, [r4, #104]
	str	r3, [r4, #212]
	bl	printk
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldr	r3, [r3, #2484]
	mov	r0, r3
	str	r5, [r3, #168]
	str	r5, [r3, #172]
	bl	conn_gadget_request_ep_out
	mov	r3, r5
	mov	r2, r6
	mov	r1, #3
	add	r0, r4, #200
	bl	__wake_up
	mov	r3, r5
	mov	r2, r6
	add	r0, r4, #144
	mov	r1, #3
	bl	__wake_up
.L18633:
	mov	r0, r5
	pop	{r4, r5, r6, pc}
.L18640:
	.align	2
.L18639:
	.word	.LANCHOR5+3328
	.fnend
	.size	conn_gadget_function_set_alt, .-conn_gadget_function_set_alt
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_open, %function
conn_gadget_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC1422
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	movt	r0, #:upper16:.LC1422
	mov	r5, r1
	bl	printk
	movw	r2, #:lower16:.LANCHOR1
	movt	r2, #:upper16:.LANCHOR1
	ldr	r3, [r2, #2484]
	cmp	r3, #0
	bne	.L18642
	movw	r0, #:lower16:.LC450
	ldr	r1, .L18649
	movt	r0, #:upper16:.LC450
	bl	printk
	mvn	r0, #18
	pop	{r4, r5, r6, pc}
.L18642:
	ldr	r0, [r3, #216]
	cmp	r0, #0
	beq	.L18644
	movw	r0, #:lower16:.LC1423
	ldr	r1, .L18649
	movt	r0, #:upper16:.LC1423
	bl	printk
	mvn	r0, #10
	pop	{r4, r5, r6, pc}
.L18644:
	mov	r4, r2
	add	r2, r3, #116
	.syntax divided
@ 61 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	ip, r1, [r2]
	teq	ip, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r1, #1
	bne	.L18645
	ldr	r3, [r4, #2484]
	str	r3, [r5, #124]
	ldr	r2, [r3, #100]
	str	r0, [r3, #104]
	cmp	r2, #0
	beq	.L18647
	movw	r0, #:lower16:.LC451
	ldr	r1, .L18649
	movt	r0, #:upper16:.LC451
	bl	printk
	ldr	r0, [r4, #2484]
	bl	conn_gadget_request_ep_out
	b	.L18647
.L18645:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC1424
	ldr	r1, .L18649
	movt	r0, #:upper16:.LC1424
	bl	printk
	mvn	r0, #15
	pop	{r4, r5, r6, pc}
.L18647:
	ldr	r3, [r4, #2484]
	mov	r0, #0
	ldr	r2, [r3, #100]
	str	r2, [r3, #212]
	pop	{r4, r5, r6, pc}
.L18650:
	.align	2
.L18649:
	.word	.LANCHOR5+3360
	.fnend
	.size	conn_gadget_open, .-conn_gadget_open
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_read, %function
conn_gadget_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r3, [r3, #2484]
	.pad #28
	sub	sp, sp, #28
	ldr	r4, [r0, #124]
	str	r2, [sp]
	cmp	r3, #0
	beq	.L18679
	ldr	r3, [r4, #192]
	mov	r5, r2
	cmp	r3, r2
	bls	.L18680
	add	r6, r4, #108
	.syntax divided
@ 61 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r6]
	add	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #1
	bne	.L18676
	mov	r3, sp
	mov	r8, r1
	bic	r7, r3, #8128
	ldrd	r2, [r4, #100]
	bic	r7, r7, #63
.L18655:
	cmp	r2, #0
	bne	.L18660
.L18674:
	cmp	r3, #0
	beq	.L18681
.L18662:
	mvn	r3, #4
	movw	r0, #:lower16:.LC1428
	ldr	r1, .L18684
	movt	r0, #:upper16:.LC1428
	str	r3, [sp]
	bl	printk
.L18664:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldr	r0, [sp]
.L18651:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L18660:
	cmp	r3, #0
	bne	.L18662
	ldr	r3, [r4, #168]
	ldr	r2, [r4, #172]
	subs	r3, r3, r2
	bne	.L18665
.L18667:
	mov	r3, #0
	movw	r0, #:lower16:.LC1429
	ldr	r1, .L18684
	movt	r0, #:upper16:.LC1429
	str	r3, [sp]
	bl	printk
.L18666:
	mov	r0, r4
	bl	conn_gadget_request_ep_out
	b	.L18664
.L18665:
	cmp	r5, r3
	mov	r1, r8
	movcs	r5, r3
	add	r0, r4, #168
	mov	r2, r5
	mov	r3, sp
	bl	__kfifo_to_user
	cmp	r5, #0
	mov	r2, r0
	beq	.L18667
	cmp	r0, #0
	blt	.L18682
	ldr	r2, [r4, #168]
	ldr	r3, [r4, #196]
	ldr	r1, [r4, #172]
	add	r3, r3, r3, lsr #31
	sub	r2, r2, r1
	cmp	r2, r3, asr #1
	bls	.L18666
	b	.L18664
.L18676:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	movw	r0, #:lower16:.LC1426
	ldr	r1, .L18684
	movt	r0, #:upper16:.LC1426
	bl	printk
	mvn	r0, #15
	b	.L18651
.L18680:
	movw	r0, #:lower16:.LC1425
	ldr	r1, .L18684
	movt	r0, #:upper16:.LC1425
	bl	printk
	mvn	r0, #21
	b	.L18651
.L18679:
	movw	r0, #:lower16:.LC450
	ldr	r1, .L18684
	movt	r0, #:upper16:.LC450
	bl	printk
	mvn	r0, #18
	b	.L18651
.L18682:
	mvn	r3, #13
	movw	r0, #:lower16:.LC1430
	ldr	r1, .L18684
	movt	r0, #:upper16:.LC1430
	str	r3, [sp]
	bl	printk
	b	.L18664
.L18681:
	movw	r0, #:lower16:.LC1427
	ldr	r1, .L18684
	movt	r0, #:upper16:.LC1427
	bl	printk
	ldrd	r2, [r4, #100]
	cmp	r2, #0
	bne	.L18655
	cmp	r3, #0
	bne	.L18674
	ldr	r0, [r7, #12]
	movw	r2, #:lower16:autoremove_wake_function
	add	r1, sp, #16
	movt	r2, #:upper16:autoremove_wake_function
	add	r9, r4, #144
	str	r3, [sp, #4]
	str	r1, [sp, #16]
	str	r0, [sp, #8]
	str	r2, [sp, #12]
	str	r1, [sp, #20]
.L18659:
	mov	r2, #1
	add	r1, sp, #4
	mov	r0, r9
	bl	prepare_to_wait
	ldr	r3, [r4, #100]
	cmp	r3, #0
	bne	.L18657
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L18657
	ldr	r3, [r7, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L18683
	mov	r0, r9
	add	r1, sp, #4
	bl	finish_wait
	mov	r2, #65024
	movw	r0, #:lower16:.LC1431
	ldr	r1, .L18684
	movt	r2, 65535
	movt	r0, #:upper16:.LC1431
	bl	printk
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mov	r0, #65024
	movt	r0, 65535
	b	.L18651
.L18657:
	add	r1, sp, #4
	mov	r0, r9
	bl	finish_wait
	ldrd	r2, [r4, #100]
	b	.L18655
.L18683:
	bl	schedule
	b	.L18659
.L18685:
	.align	2
.L18684:
	.word	.LANCHOR5+3380
	.fnend
	.size	conn_gadget_read, .-conn_gadget_read
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_bind, %function
conn_gadget_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, r9, r10, lr}
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r7, r0
	ldr	r3, [r0, #24]
	movw	r0, #:lower16:.LC1432
	.pad #8
	sub	sp, sp, #8
	movt	r0, #:upper16:.LC1432
	mov	r4, r1
	str	r3, [r1, #84]
	bl	printk
	ldrb	r3, [r7, #44]	@ zero_extendqisi2
	cmp	r3, #15
	mvnhi	r0, #18
	bhi	.L18686
	add	r1, r3, #12
	movw	r2, #:lower16:.LANCHOR8
	movt	r2, #:upper16:.LANCHOR8
	movw	r5, #:lower16:.LANCHOR6
	str	r4, [r7, r1, lsl #2]
	ldrh	r1, [r2, #-198]
	movt	r5, #:upper16:.LANCHOR6
	add	r0, r3, #1
	mov	r6, r2
	strb	r3, [r5, #-686]
	strb	r0, [r7, #44]
	ldr	r9, [r4, #84]
	tst	r1, #4
	beq	.L18688
	movw	r1, #:lower16:.LC1433
	mov	r3, r4
	ldr	r2, .L18726
	movt	r1, #:upper16:.LC1433
	sub	r0, r6, #216
	bl	__dynamic_pr_debug
.L18688:
	ldr	r1, .L18726+4
	ldr	r0, [r9]
	bl	usb_ep_autoconfig_ss.constprop.166
	subs	r8, r0, #0
	bne	.L18689
	movw	r0, #:lower16:.LC1434
	movt	r0, #:upper16:.LC1434
	bl	printk
	mvn	r0, #18
	b	.L18686
.L18689:
	ldrh	r3, [r6, #-174]
	tst	r3, #4
	beq	.L18690
	movw	r1, #:lower16:.LC1435
	ldr	r2, .L18726
	movt	r1, #:upper16:.LC1435
	ldr	r0, .L18726+8
	ldr	r3, [r8, #4]
	bl	__dynamic_pr_debug
.L18690:
	ldr	r1, .L18726+12
	str	r4, [r8]
	str	r8, [r4, #92]
	ldr	r0, [r9]
	bl	usb_ep_autoconfig_ss.constprop.166
	subs	r8, r0, #0
	bne	.L18691
	movw	r0, #:lower16:.LC1436
	movt	r0, #:upper16:.LC1436
	bl	printk
	mvn	r0, #18
	b	.L18686
.L18691:
	ldrh	r3, [r6, #-150]
	tst	r3, #4
	beq	.L18692
	movw	r1, #:lower16:.LC1437
	ldr	r2, .L18726
	movt	r1, #:upper16:.LC1437
	ldr	r0, .L18726+16
	ldr	r3, [r8, #4]
	bl	__dynamic_pr_debug
.L18692:
	movw	r6, #:lower16:conn_gadget_complete_out
	mov	r9, #4
	str	r4, [r8]
	movt	r6, #:upper16:conn_gadget_complete_out
	add	r10, r4, #128
	str	r8, [r4, #96]
.L18695:
	ldr	r0, [r4, #96]
	ldr	r1, [r4, #192]
	cmp	r1, #0
	moveq	r1, #4096
	bl	conn_gadget_request_new
	cmp	r0, #0
	beq	.L18694
	mov	r2, r0
	mov	r1, r10
	str	r6, [r0, #28]
	mov	r0, r4
	bl	conn_gadget_req_put
	subs	r9, r9, #1
	bne	.L18695
	movw	r6, #:lower16:conn_gadget_complete_in
	mov	r8, #4
	movt	r6, #:upper16:conn_gadget_complete_in
	add	r9, r4, #120
.L18697:
	ldr	r0, [r4, #92]
	ldr	r1, [r4, #192]
	cmp	r1, #0
	moveq	r1, #4096
	bl	conn_gadget_request_new
	cmp	r0, #0
	beq	.L18694
	mov	r2, r0
	mov	r1, r9
	str	r6, [r0, #28]
	mov	r0, r4
	bl	conn_gadget_req_put
	subs	r8, r8, #1
	bne	.L18697
	b	.L18724
.L18694:
	movw	r0, #:lower16:.LC1438
	ldr	r1, .L18726
	movt	r0, #:upper16:.LC1438
	bl	printk
	mvn	r0, #0
	b	.L18686
.L18724:
	ldr	r3, [r7, #24]
	ldr	r2, [r3]
	ldr	r2, [r2, #20]
	cmp	r2, #2
	bls	.L18699
	ldrb	r1, [r5, #-674]	@ zero_extendqisi2
	ldrb	r2, [r5, #-662]	@ zero_extendqisi2
	strb	r1, [r5, #-650]
	strb	r2, [r5, #-638]
.L18699:
	ldr	r2, [r3]
	ldr	r2, [r2, #20]
	cmp	r2, #4
	bls	.L18700
	ldrb	r1, [r5, #-674]	@ zero_extendqisi2
	ldrb	r2, [r5, #-662]	@ zero_extendqisi2
	strb	r1, [r5, #-626]
	strb	r2, [r5, #-614]
.L18700:
	ldr	r3, [r3]
	ldr	r2, [r3, #20]
	cmp	r2, #4
	movwhi	r1, #:lower16:.LC1013
	movthi	r1, #:upper16:.LC1013
	bhi	.L18701
	movw	r3, #:lower16:.LC944
	movw	r1, #:lower16:.LC943
	movt	r3, #:upper16:.LC944
	cmp	r2, #2
	movt	r1, #:upper16:.LC943
	movls	r1, r3
.L18701:
	movw	r0, #:lower16:.LC1439
	ldr	r2, [r4]
	ldr	ip, [r4, #96]
	movt	r0, #:upper16:.LC1439
	ldr	r3, [r4, #92]
	ldr	ip, [ip, #4]
	str	ip, [sp]
	ldr	r3, [r3, #4]
	bl	printk
	mov	r0, #0
.L18686:
	add	sp, sp, #8
	@ sp needed
	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
.L18727:
	.align	2
.L18726:
	.word	.LANCHOR5+3400
	.word	.LANCHOR6-676
	.word	.LANCHOR8-192
	.word	.LANCHOR6-664
	.word	.LANCHOR8-168
	.fnend
	.size	conn_gadget_function_bind, .-conn_gadget_function_bind
	.text
	.align	2
	.global	conn_gadget_req_get
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_req_get, %function
conn_gadget_req_get:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #88
	mov	r4, r1
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r3, [r4]
	mov	r6, r0
	cmp	r4, r3
	moveq	r4, #0
	beq	.L18729
	mov	r0, r3
	sub	r4, r3, #36
	bl	list_del
.L18729:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	conn_gadget_req_get, .-conn_gadget_req_get
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_function_unbind, %function
conn_gadget_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r0, #:lower16:.LC1440
	push	{r4, r5, lr}
	.save {r4, r5, lr}
	movt	r0, #:upper16:.LC1440
	.pad #12
	sub	sp, sp, #12
	mov	r4, r1
	bl	printk
	movw	r0, #:lower16:.LANCHOR8
	ldr	r1, [r4, #100]
	mov	ip, #0
	movt	r0, #:upper16:.LANCHOR8
	mov	r2, #1
	ldrh	r3, [r0, #-126]
	str	ip, [r4, #100]
	str	r2, [r4, #104]
	str	r1, [r4, #212]
	tst	r3, #4
	beq	.L18733
	ldr	r3, .L18747
	movw	r1, #:lower16:.LC251
	sub	r0, r0, #144
	movt	r1, #:upper16:.LC251
	str	r2, [sp]
	mov	r2, r3
	bl	__dynamic_pr_debug
.L18733:
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #200
	bl	__wake_up
	add	r5, r4, #128
	mov	r3, #0
	mov	r2, #1
	mov	r1, #3
	add	r0, r4, #144
	bl	__wake_up
.L18734:
	mov	r1, r5
	mov	r0, r4
	bl	conn_gadget_req_get
	cmp	r0, #0
	beq	.L18744
	ldr	r1, [r4, #96]
	bl	conn_gadget_request_free.part.6
	b	.L18734
.L18744:
	add	r5, r4, #136
.L18736:
	mov	r1, r5
	mov	r0, r4
	bl	conn_gadget_req_get
	cmp	r0, #0
	beq	.L18745
	ldr	r1, [r4, #96]
	bl	conn_gadget_request_free.part.6
	b	.L18736
.L18745:
	add	r5, r4, #120
.L18738:
	mov	r1, r5
	mov	r0, r4
	bl	conn_gadget_req_get
	cmp	r0, #0
	beq	.L18746
	ldr	r1, [r4, #92]
	bl	conn_gadget_request_free.part.6
	b	.L18738
.L18746:
	add	sp, sp, #12
	@ sp needed
	pop	{r4, r5, pc}
.L18748:
	.align	2
.L18747:
	.word	.LANCHOR5+3436
	.fnend
	.size	conn_gadget_function_unbind, .-conn_gadget_function_unbind
	.text
	.align	2
	.global	conn_gadget_req_move
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_req_move, %function
conn_gadget_req_move:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r5, r0, #88
	add	r4, r3, #36
	mov	r0, r5
	strd	r6, [sp, #8]
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave
	mov	r6, r0
	mov	r0, r4
	bl	__list_del_entry
	mov	r0, r4
	mov	r2, r7
	ldr	r1, [r7, #4]
	bl	__list_add
	mov	r1, r6
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore
	.fnend
	.size	conn_gadget_req_move, .-conn_gadget_req_move
	.align	2
	.global	conn_gadget_empty
	.syntax unified
	.arm
	.fpu softvfp
	.type	conn_gadget_empty, %function
conn_gadget_empty:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	add	r6, r0, #88
	mov	r0, r6
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave
	ldr	r4, [r5]
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore
	ldr	r6, [sp, #8]
	sub	r4, r4, r5
	clz	r4, r4
	lsr	r4, r4, #5
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	conn_gadget_empty, .-conn_gadget_empty
	.align	2
	.global	ncm_bind_config
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_bind_config, %function
ncm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	movw	r0, #:lower16:.LC506
	strd	r8, [sp, #16]
	movt	r0, #:upper16:.LC506
	str	lr, [sp, #24]
	ldr	r8, [r7, #24]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r8]
	ldr	r4, [r3, #28]
	mov	r1, r4
	bl	strcmp
	cmp	r0, #0
	beq	.L18760
	movw	r0, #:lower16:.LC509
	mov	r1, r4
	movt	r0, #:upper16:.LC509
	bl	strcmp
	cmp	r0, #0
	cmpne	r5, #0
	beq	.L18760
	movw	r6, #:lower16:.LANCHOR0
	movt	r6, #:upper16:.LANCHOR0
	ldrb	r3, [r6, #1576]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L18755
	ldrb	r3, [r8, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L18757
	add	r3, r3, #1
	movw	r2, #:lower16:.LANCHOR6
	uxtb	r3, r3
	movt	r2, #:upper16:.LANCHOR6
	strb	r3, [r8, #48]
	ldr	r1, [r7, #24]
	strb	r3, [r2, #-3732]
	strb	r3, [r6, #1576]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L18757
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	ldr	r1, [r7, #24]
	strb	r3, [r2, #-3712]
	strb	r3, [r2, #-3700]
	strb	r3, [r6, #1592]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L18757
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r1, #48]
	ldr	r1, [r7, #24]
	strb	r3, [r2, #-601]
	strb	r3, [r6, #1584]
	ldrb	r3, [r1, #48]	@ zero_extendqisi2
	cmp	r3, #253
	bhi	.L18757
	add	r3, r3, #1
	uxtb	r3, r3
	strb	r3, [r2, #-3741]
	strb	r3, [r1, #48]
	strb	r3, [r6, #1600]
.L18755:
	movw	r3, #:lower16:kmalloc_caches
	movt	r3, #:upper16:kmalloc_caches
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L18761
	mov	r2, #192
	movw	r1, #32976
	bl	kmem_cache_alloc_trace
	subs	r4, r0, #0
	beq	.L18767
.L18758:
	ldrb	r3, [r5, #5]	@ zero_extendqisi2
	add	r8, r4, #150
	movw	r2, #:lower16:.LC1359
	ldrb	r9, [r5, #4]	@ zero_extendqisi2
	movt	r2, #:upper16:.LC1359
	mov	r0, r8
	ldrb	lr, [r5, #3]	@ zero_extendqisi2
	ldrb	r1, [r5, #2]	@ zero_extendqisi2
	str	r3, [sp, #16]
	ldrb	ip, [r5, #1]	@ zero_extendqisi2
	ldrb	r3, [r5]	@ zero_extendqisi2
	mov	r5, #0
	str	r9, [sp, #12]
	str	ip, [sp]
	stmib	sp, {r1, lr}
	mov	r1, #14
	bl	snprintf
	movw	r2, #:lower16:ncm_bind
	ldr	r1, .L18768
	movw	ip, #:lower16:ncm_set_alt
	movt	r2, #:upper16:ncm_bind
	movt	ip, #:upper16:ncm_set_alt
	ldr	lr, .L18768+4
	mov	r0, r7
	mov	r7, #16384
	ldr	r9, [r6, #36]
	str	r2, [r4, #32]
	movw	r2, #:lower16:ncm_unbind
	movw	r3, #:lower16:.LC859
	movt	r2, #:upper16:ncm_unbind
	movt	r3, #:upper16:.LC859
	str	r8, [r6, #1588]
	str	r1, [r4, #176]
	movw	r1, #:lower16:ncm_get_alt
	str	ip, [r4, #40]
	movw	ip, #:lower16:ncm_disable
	movt	r1, #:upper16:ncm_get_alt
	movt	ip, #:upper16:ncm_disable
	stm	r4, {r3, lr}
	str	r2, [r4, #36]
	movw	r2, #:lower16:ncm_setup
	movt	r2, #:upper16:ncm_setup
	str	r1, [r4, #44]
	movw	r1, #:lower16:ncm_wrap_ntb
	str	ip, [r4, #48]
	mov	ip, #15
	movt	r1, #:upper16:ncm_wrap_ntb
	str	r2, [r4, #52]
	movw	r2, #:lower16:ncm_unwrap_ntb
	movt	r2, #:upper16:ncm_unwrap_ntb
	strh	ip, [r4, #98]	@ movhi
	movw	ip, #9014
	str	r7, [r4, #112]
	mov	r7, #1
	str	r5, [r4, #100]
	strb	r7, [r4, #104]
	str	r9, [r4, #108]
	str	r1, [r4, #128]
	mov	r1, r4
	str	r2, [r4, #132]
	strb	r5, [r4, #180]
	strh	ip, [r4, #182]	@ movhi
	str	r5, [r4, #184]
	str	r5, [r4, #188]
	bl	usb_add_function
	subs	r7, r0, #0
	beq	.L18753
	mov	r0, r4
	str	r5, [r6, #1588]
	bl	kfree
	b	.L18753
.L18760:
	mvn	r7, #21
.L18753:
	mov	r0, r7
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L18761:
	mov	r4, #16
	b	.L18758
.L18757:
	mvn	r7, #18
	b	.L18753
.L18767:
	mvn	r7, #11
	b	.L18753
.L18769:
	.align	2
.L18768:
	.word	.LANCHOR0+48
	.word	.LANCHOR6-588
	.fnend
	.size	ncm_bind_config, .-ncm_bind_config
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ncm_function_bind_config, %function
ncm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #4]
	.pad #16
	sub	sp, sp, #16
	cmp	r4, #0
	beq	.L18771
	mov	r3, #0
	mov	r2, #2
	ldr	r0, .L18781
	movw	lr, #52429
	mov	r5, r1
	movt	lr, 52428
	str	r2, [r4]	@ unaligned
	mov	r2, r3
	strb	r3, [r4, #4]
	strb	r3, [r4, #5]
	b	.L18772
.L18776:
	sub	r3, r2, r3
	add	r2, r2, #1
	add	r3, r3, #1
	cmp	r2, #256
	ldrb	ip, [r4, r3]	@ zero_extendqisi2
	eor	r1, r1, ip
	strb	r1, [r4, r3]
	beq	.L18777
.L18772:
	umull	r1, r3, lr, r2
	ldrb	r1, [r0], #1	@ zero_extendqisi2
	lsr	r3, r3, #2
	cmp	r1, #0
	add	r3, r3, r3, lsl #2
	bne	.L18776
.L18777:
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1442
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC1442
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldr	r1, .L18781+4
	str	ip, [sp, #12]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1443
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC1443
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldr	r1, .L18781+4
	str	ip, [sp, #12]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	ldr	r3, [r5, #24]
	movw	r2, #:lower16:.LC859
	mov	r1, r4
	movt	r2, #:upper16:.LC859
	ldr	r0, [r3]
	bl	gether_setup_name
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	mov	r6, r0
	movw	r0, #:lower16:.LC1444
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC1444
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldr	r1, .L18781+4
	str	ip, [sp, #12]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	str	ip, [sp, #4]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	str	ip, [sp]
	bl	printk
	cmp	r6, #0
	beq	.L18779
	ldr	r2, .L18781+4
	movw	r0, #:lower16:.LC1381
	movt	r0, #:upper16:.LC1381
	mov	r1, r2
	bl	printk
	b	.L18770
.L18771:
	ldr	r2, .L18781+4
	movw	r0, #:lower16:.LC1441
	mvn	r6, #0
	movt	r0, #:upper16:.LC1441
	mov	r1, r2
	bl	printk
.L18770:
	mov	r0, r6
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L18779:
	mov	r1, r4
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	ncm_bind_config
.L18782:
	.align	2
.L18781:
	.word	.LANCHOR1+2220
	.word	.LANCHOR5+3464
	.fnend
	.size	ncm_function_bind_config, .-ncm_function_bind_config
	.align	2
	.global	is_ncm_ready
	.syntax unified
	.arm
	.fpu softvfp
	.type	is_ncm_ready, %function
is_ncm_ready:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r1, #:lower16:.LC1312
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	movt	r1, #:upper16:.LC1312
	str	lr, [sp, #4]
	bl	strcmp
	cmp	r0, #0
	beq	.L18784
	movw	r1, #:lower16:.LC859
	mov	r0, r4
	movt	r1, #:upper16:.LC859
	bl	strcmp
	cmp	r0, #0
	movne	r0, #0
	bne	.L18785
.L18784:
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	ldrb	r0, [r3, #3752]	@ zero_extendqisi2
	cmp	r0, #0
	bne	.L18792
.L18785:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L18792:
	movw	r0, #:lower16:.LC1445
	mov	r2, r4
	ldr	r1, .L18793
	movt	r0, #:upper16:.LC1445
	bl	printk
	mov	r0, #1
	b	.L18785
.L18794:
	.align	2
.L18793:
	.word	.LANCHOR5+3492
	.fnend
	.size	is_ncm_ready, .-is_ncm_ready
	.section	.text.unlikely
	.align	2
	.global	set_ncm_device_descriptor
	.syntax unified
	.arm
	.fpu softvfp
	.type	set_ncm_device_descriptor, %function
set_ncm_device_descriptor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	ip, r0
	mov	r2, #2
	ldr	r1, .L18797
	mov	r3, #93
	str	lr, [sp, #-4]!
	.save {lr}
	mov	lr, #104
	movw	r0, #:lower16:.LC1446
	strb	r2, [ip, #4]
	movt	r0, #:upper16:.LC1446
	strb	r3, [ip, #10]
	mov	r3, r2
	movw	r2, #26717
	strb	lr, [ip, #11]
	ldr	lr, [sp], #4
	b	printk
.L18798:
	.align	2
.L18797:
	.word	.LANCHOR5+3508
	.fnend
	.size	set_ncm_device_descriptor, .-set_ncm_device_descriptor
	.text
	.align	2
	.global	set_ncm_ready
	.syntax unified
	.arm
	.fpu softvfp
	.type	set_ncm_ready, %function
set_ncm_ready:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r4, #:lower16:.LANCHOR1
	mov	r5, r0
	movt	r4, #:upper16:.LANCHOR1
	str	r6, [sp, #8]
	ldrb	r2, [r4, #3752]	@ zero_extendqisi2
	str	lr, [sp, #12]
	cmp	r2, r0
	beq	.L18800
	movw	r0, #:lower16:.LC1447
	ldr	r1, .L18803
	mov	r3, r5
	movt	r0, #:upper16:.LC1447
	bl	printk
	ldr	r0, [r4, #3728]
	strb	r5, [r4, #3752]
	bl	schedule_work
.L18800:
	cmp	r5, #0
	bne	.L18799
	movw	r2, #3852
	movw	r3, #3854
	strh	r5, [r4, r2]	@ movhi
	strh	r5, [r4, r3]	@ movhi
.L18799:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L18804:
	.align	2
.L18803:
	.word	.LANCHOR5+3536
	.fnend
	.size	set_ncm_ready, .-set_ncm_ready
	.section	.text.unlikely
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	terminal_version_store, %function
terminal_version_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, lr}
	.save {r4, r5, lr}
	movw	r1, #:lower16:.LC1448
	.pad #12
	sub	sp, sp, #12
	mov	r4, r2
	mov	r0, r2
	movt	r1, #:upper16:.LC1448
	add	r2, sp, #4
	mov	r5, r3
	bl	sscanf
	ldr	lr, [sp, #4]
	movw	r3, #:lower16:.LANCHOR1
	movw	ip, #3852
	movt	r3, #:upper16:.LANCHOR1
	movw	r0, #:lower16:.LC81
	ldr	r1, .L18809
	mov	r2, r4
	movt	r0, #:upper16:.LC81
	strh	lr, [r3, ip]	@ movhi
	bl	printk
	ldr	r0, [sp, #4]
	cmp	r0, #0
	movne	r0, #1
	bl	set_ncm_ready
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	pop	{r4, r5, pc}
.L18810:
	.align	2
.L18809:
	.word	.LANCHOR5+3552
	.fnend
	.size	terminal_version_store, .-terminal_version_store
	.text
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_setup, %function
android_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LANCHOR1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	movt	r3, #:upper16:.LANCHOR1
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r4, r3
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	stm	sp, {r0, r3}
	add	r0, r0, #32
	bl	dev_get_drvdata
	mov	r2, r4
	mov	r6, r0
	ldr	r3, [r2, #3232]!
	cmp	r3, r2
	sub	r9, r3, #512
	bne	.L18814
	b	.L18812
.L18842:
	ldr	r3, [r9, #512]
	cmp	r3, r2
	sub	r9, r3, #512
	beq	.L18812
.L18814:
	ldr	r3, [r3, #-504]
	cmp	r6, r3
	bne	.L18842
.L18812:
	ldr	r3, [r6, #4]
	movw	r2, #:lower16:composite_setup_complete
	mov	r0, #0
	movt	r2, #:upper16:composite_setup_complete
	mov	r10, r9
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	str	r0, [r3, #4]
	str	r2, [r3, #28]
	bfc	r1, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [sp]
	ldr	r3, [r3, #4]
	str	r6, [r3]
	ldr	r8, [r10, #500]!
	cmp	r10, r8
	sub	r8, r8, #120
	beq	.L18815
	mvn	fp, #94
.L18819:
	mov	r5, r8
	ldr	r4, [r5, #112]!
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L18816
.L18818:
	ldr	r0, [r4]
	mov	r2, r7
	mov	r1, r6
	ldr	r3, [r0, #48]
	cmp	r3, #0
	beq	.L18817
	blx	r3
	subs	fp, r0, #0
	bge	.L18816
.L18817:
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	bne	.L18818
.L18816:
	ldr	r8, [r8, #120]
	cmp	r10, r8
	sub	r8, r8, #120
	bne	.L18819
	ldr	r4, [r6, #12]
	adds	r4, r4, #0
	movne	r4, #1
	cmp	fp, #0
	blt	.L18821
.L18822:
	add	r5, r6, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave
	ldrb	r3, [r9, #48]	@ zero_extendqisi2
	mov	r1, r0
	cmp	r3, #0
	beq	.L18843
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	mov	r0, r5
	cmp	r3, #9
	beq	.L18844
.L18841:
	bl	_raw_spin_unlock_irqrestore
.L18811:
	mov	r0, fp
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L18843:
	mov	r3, #1
	mov	r0, r5
	strb	r3, [r9, #48]
	bl	_raw_spin_unlock_irqrestore
.L18825:
	add	r0, r9, #176
	bl	schedule_work
	b	.L18811
.L18815:
	ldr	r4, [r6, #12]
	adds	r4, r4, #0
	movne	r4, #1
.L18821:
	ldrb	r3, [r7]	@ zero_extendqisi2
	and	r3, r3, #96
	cmp	r3, #64
	bne	.L18823
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	cmp	r3, #240
	beq	.L18845
.L18823:
	mov	r1, r7
	mov	r0, r6
	bl	acc_ctrlrequest
	subs	fp, r0, #0
	bge	.L18822
	mov	r1, r7
	ldr	r0, [sp]
	bl	composite_setup
	mov	fp, r0
	b	.L18822
.L18844:
	ldr	r3, [r6, #12]
	cmp	r3, #0
	beq	.L18841
	cmp	r4, #0
	bne	.L18841
	bl	_raw_spin_unlock_irqrestore
	b	.L18825
.L18845:
	ldrb	r1, [r7, #3]	@ zero_extendqisi2
	movw	r5, #3852
	movw	r8, #3854
	ldrb	r3, [r7, #2]	@ zero_extendqisi2
	mov	r0, #1
	mov	fp, #0
	ldrh	r2, [r7, #4]	@ unaligned
	ldr	r10, [sp, #4]
	orr	r3, r3, r1, lsl #8
	strh	r2, [r10, r8]	@ movhi
	strh	r3, [r10, r5]	@ movhi
	bl	set_ncm_ready
	movw	r0, #:lower16:.LC1449
	ldrh	r3, [r10, r8]
	ldrh	r2, [r10, r5]
	movt	r0, #:upper16:.LC1449
	ldr	r1, .L18846
	bl	printk
	ldr	r3, [r6, #4]
	mov	r2, #32
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfc	r1, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r6, #4]
	str	fp, [r3, #4]
	ldr	r3, [r6]
	ldr	r1, [r6, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, fp
	bge	.L18822
	movw	r0, #:lower16:.LC1450
	ldr	r1, .L18846
	movt	r0, #:upper16:.LC1450
	bl	printk
	b	.L18822
.L18847:
	.align	2
.L18846:
	.word	.LANCHOR5+3576
	.fnend
	.size	android_setup, .-android_setup
	.align	2
	.global	schedule_usb_gadget_connect_work
	.syntax unified
	.arm
	.fpu softvfp
	.type	schedule_usb_gadget_connect_work, %function
schedule_usb_gadget_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #:lower16:.LC1451
	cmp	r0, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	r3, #:upper16:.LC1451
	mov	r4, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	stm	sp, {r3, r4}
	bne	.L18860
.L18848:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L18860:
	ldr	r2, .L18862
	mov	r5, r0
	movw	r0, #:lower16:.LC1452
	add	r6, r5, #448
	movt	r0, #:upper16:.LC1452
	mov	r1, r2
	bl	printk
	mov	r0, r6
	bl	work_busy
	cmp	r0, r4
	beq	.L18851
	add	r0, r5, #464
	bl	del_timer_sync
	cmp	r0, r4
	bne	.L18861
.L18852:
	ldr	r2, .L18862
	movw	r0, #:lower16:.LC1453
	movt	r0, #:upper16:.LC1453
	mov	r1, r2
	bl	printk
.L18851:
	ldr	r0, [r5, #12]
	mov	r2, sp
	mov	r1, #2
	add	r0, r0, #8
	bl	kobject_uevent_env
	mov	r3, #0
	mov	r0, #1
	str	r3, [r5, #496]
	bl	msecs_to_jiffies
	mov	r1, r0
	mov	r0, r6
	bl	schedule_delayed_work
	b	.L18848
.L18861:
	mov	r0, r4
	mov	r1, r6
	bl	_clear_bit
	b	.L18852
.L18863:
	.align	2
.L18862:
	.word	.LANCHOR5+3600
	.fnend
	.size	schedule_usb_gadget_connect_work, .-schedule_usb_gadget_connect_work
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	usb30en_store, %function
usb30en_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r2
	strd	r6, [sp, #8]
	mov	r7, r3
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata
	mov	r5, r0
	bl	get_host_os_type
	subs	r3, r0, #0
	beq	.L18884
	movw	r1, #:lower16:.LC452
	mov	r0, r4
	movt	r1, #:upper16:.LC452
	add	r2, sp, #4
	bl	sscanf
	cmp	r0, #1
	bne	.L18867
	ldr	r1, [r5, #8]
	cmp	r1, #0
	beq	.L18867
	movw	r4, #:lower16:.LANCHOR1
	ldr	r2, [sp, #4]
	movt	r4, #:upper16:.LANCHOR1
	ldrb	r3, [r4, #3226]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L18885
	uxtb	r2, r2
	strb	r2, [r4, #3226]
	ldr	r0, [r1]
	ldr	r3, [r0]
	ldr	r6, [r3, #20]
	cmp	r6, #0
	beq	.L18869
	mov	r1, #0
	blx	r6
	ldr	r3, [r5, #8]
	ldrb	r2, [r4, #3226]	@ zero_extendqisi2
	ldr	r0, [r3]
.L18869:
	cmp	r2, #0
	movne	r1, #5
	moveq	r1, #3
	bl	sec_set_speedlimit
	movw	r0, #:lower16:.LC1456
	ldr	r1, .L18887
	movt	r0, #:upper16:.LC1456
	bl	printk
	mov	r0, #200
	bl	msleep
	ldrb	r3, [r4, #3226]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L18886
	ldr	r3, [r5, #8]
	ldr	r0, [r3]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L18872
	mov	r1, #1
	blx	r3
.L18872:
	movw	r0, #:lower16:.LC1457
	ldr	r1, .L18887
	movt	r0, #:upper16:.LC1457
	bl	printk
.L18864:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L18886:
	mov	r0, r5
	bl	schedule_usb_gadget_connect_work
	b	.L18872
.L18885:
	movw	r0, #:lower16:.LC1455
	ldr	r1, .L18887
	mov	r2, r3
	movt	r0, #:upper16:.LC1455
	bl	printk
	b	.L18864
.L18867:
	movw	r0, #:lower16:.LC1458
	ldr	r1, .L18887
	mvn	r7, #0
	movt	r0, #:upper16:.LC1458
	bl	printk
	b	.L18864
.L18884:
	movw	r2, #:lower16:.LANCHOR1
	movw	r0, #:lower16:.LC1454
	ldr	r1, .L18887
	movt	r2, #:upper16:.LANCHOR1
	movt	r0, #:upper16:.LC1454
	strb	r3, [r2, #3226]
	bl	printk
	b	.L18864
.L18888:
	.align	2
.L18887:
	.word	.LANCHOR5+3636
	.fnend
	.size	usb30en_store, .-usb30en_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	android_enable, %function
android_enable:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	ldr	r6, [r0, #8]
	ldr	r5, [r0, #20]
	cmp	r5, #0
	beq	.L19058
	sub	r5, r5, #1
	mov	r10, r0
	cmp	r5, #0
	str	r5, [r0, #20]
	movne	r5, #0
	bne	.L18889
	mov	r7, r10
	ldr	r4, [r7, #500]!
	cmp	r7, r4
	sub	r4, r4, #120
	beq	.L18892
	ldr	r8, .L19074
	movw	r3, #:lower16:.LC1079
	movt	r3, #:upper16:.LC1079
	str	r3, [sp, #20]
.L18931:
	ldrh	r2, [r8, #2]
	ldrb	r3, [r4, #20]	@ zero_extendqisi2
	tst	r2, #4
	bne	.L19059
.L18893:
	cmp	r3, #0
	beq	.L19060
	mov	r2, r6
	ldr	r1, [r2, #36]!
	cmp	r2, r1
	sub	r0, r1, #28
	bne	.L18900
	b	.L18897
.L19061:
	ldr	r1, [r0, #28]
	cmp	r2, r1
	sub	r0, r1, #28
	beq	.L18897
.L18900:
	ldrb	r1, [r1, #-8]	@ zero_extendqisi2
	cmp	r1, r3
	bne	.L19061
	ldr	r2, .L19074+4
	ldrh	r2, [r2]
	tst	r2, #4
	beq	.L19062
	ldr	ip, [r6]
	mvn	r5, #15
.L18895:
	ldr	lr, [r4]
	movw	r2, #:lower16:.LC1082
	add	r1, ip, #32
	movt	r2, #:upper16:.LC1082
	ldr	r0, .L19074+8
	stm	sp, {r3, r5}
	mov	r3, lr
	bl	__dynamic_dev_dbg
.L18930:
	cmp	r5, #0
	blt	.L18896
.L18927:
	ldr	r4, [r4, #120]
	cmp	r7, r4
	sub	r4, r4, #120
	bne	.L18931
.L18892:
	mov	r0, r10
	bl	schedule_usb_gadget_connect_work
.L18889:
	mov	r0, r5
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L19060:
	ldr	r2, .L19074+4
	mvn	r5, #21
	ldrh	r2, [r2]
	tst	r2, #4
	bne	.L18934
.L18896:
	ldr	r2, .L19074+12
	movw	r0, #:lower16:.LC1460
	mov	r3, r5
	movt	r0, #:upper16:.LC1460
	mov	r1, r2
	bl	printk
	b	.L18889
.L18897:
	add	fp, r4, #28
	str	r6, [r4, #24]
	ldr	r1, [r6, #40]
	mov	r0, fp
	mov	r9, #0
	bl	__list_add
	add	r2, r4, #36
	mov	r1, #64
	add	r0, r4, #48
	str	r2, [r4, #36]
	str	r2, [r4, #40]
	strb	r9, [r4, #44]
	bl	__memzero
	mov	r0, r4
	bl	android_bind_config
	subs	r5, r0, #0
	blt	.L19063
	ldr	r3, .L19074+16
	ldr	ip, [r6]
	ldrh	r3, [r3]
	tst	r3, #4
	bne	.L19064
.L18904:
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L18908
	ldr	r2, .L19074+20
	ldrh	r2, [r2]
	tst	r2, #4
	bne	.L19065
.L18908:
	ldr	r3, [r4, #52]
	cmp	r3, #0
	beq	.L18909
	ldr	r2, .L19074+20
	ldrh	r2, [r2]
	tst	r2, #4
	bne	.L19066
.L18909:
	ldr	r3, [r4, #56]
	cmp	r3, #0
	beq	.L18910
	ldr	r2, .L19074+20
	ldrh	r2, [r2]
	tst	r2, #4
	bne	.L19067
.L18910:
	ldr	r3, [r4, #60]
	cmp	r3, #0
	beq	.L18911
	ldr	r2, .L19074+20
	ldrh	r2, [r2]
	tst	r2, #4
	bne	.L19068
.L18911:
	ldr	r3, [r4, #64]
	cmp	r3, #0
	beq	.L18912
	ldr	r2, .L19074+20
	ldrh	r2, [r2]
	tst	r2, #4
	bne	.L19069
.L18912:
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L18913
	ldr	r2, .L19074+20
	ldrh	r2, [r2]
	tst	r2, #4
	bne	.L19070
.L18913:
	ldr	r3, [r4, #72]
	cmp	r3, #0
	beq	.L18914
	ldr	r2, .L19074+20
	ldrh	r2, [r2]
	tst	r2, #4
	bne	.L19071
.L18915:
	ldr	r3, [r4, #80]
	cmp	r3, #0
	beq	.L18916
	ldr	r2, .L19074+20
	ldrh	r2, [r2]
	tst	r2, #4
	bne	.L19072
.L18917:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L18919
.L18920:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L18921
	ldr	r2, .L19074+20
	ldrh	r2, [r2]
	tst	r2, #4
	bne	.L19073
.L18922:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L18924
.L18925:
	mov	r0, ip
	ldr	r3, [r0, #8]!
	cmp	r0, r3
	sub	r3, r3, #12
	beq	.L18929
.L18902:
	mov	r1, #0
.L18928:
	ldr	r2, [r3, #12]
	str	r1, [r3]
	cmp	r0, r2
	sub	r3, r2, #12
	bne	.L18928
.L18929:
	movw	r3, #:lower16:.LANCHOR1
	mov	r2, #0
	movt	r3, #:upper16:.LANCHOR1
	cmp	r5, #0
	str	r2, [r3, #3772]
	beq	.L18927
	ldr	r3, .L19074+4
	ldrh	r3, [r3]
	tst	r3, #4
	beq	.L18930
	ldr	ip, [r6]
.L18933:
	ldrb	r3, [r4, #20]	@ zero_extendqisi2
	b	.L18895
.L19059:
	ldr	r1, [r6]
	str	r4, [sp, #4]
	ldr	ip, [r4]
	ldr	r0, .L19074+24
	ldr	r2, [sp, #20]
	add	r1, r1, #32
	str	ip, [sp]
	bl	__dynamic_dev_dbg
	ldrb	r3, [r4, #20]	@ zero_extendqisi2
	b	.L18893
.L19063:
	mov	r0, fp
	bl	list_del
	str	r9, [r4, #24]
	ldr	ip, [r6]
	mov	r0, ip
	ldr	r3, [r0, #8]!
	cmp	r0, r3
	sub	r3, r3, #12
	bne	.L18902
	ldr	r2, .L19074+4
	movw	r3, #:lower16:.LANCHOR1
	movt	r3, #:upper16:.LANCHOR1
	str	r9, [r3, #3772]
	ldrh	r3, [r2]
	tst	r3, #4
	bne	.L18933
	b	.L18896
.L19073:
	str	r3, [sp, #4]
	ldr	lr, [r3]
	movw	r2, #:lower16:.LC1081
	add	r1, ip, #32
	movt	r2, #:upper16:.LC1081
	ldr	r0, .L19074+28
	mov	r3, #12
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
.L18921:
	ldr	r3, [r4, #100]
	cmp	r3, #0
	beq	.L18923
	ldr	r2, .L19074+20
	ldrh	r2, [r2]
	tst	r2, #4
	beq	.L18922
	str	r3, [sp, #4]
	ldr	lr, [r3]
	movw	r2, #:lower16:.LC1081
	add	r1, ip, #32
	movt	r2, #:upper16:.LC1081
	ldr	r0, .L19074+28
	mov	r3, #13
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
.L18923:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L18924
	ldr	r2, .L19074+20
	ldrh	r2, [r2]
	tst	r2, #4
	beq	.L18925
	str	r3, [sp, #4]
	ldr	lr, [r3]
	movw	r2, #:lower16:.LC1081
	add	r1, ip, #32
	movt	r2, #:upper16:.LC1081
	ldr	r0, .L19074+28
	mov	r3, #14
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
.L18924:
	ldr	r3, [r4, #108]
	cmp	r3, #0
	beq	.L18925
	ldr	r2, .L19074+20
	ldrh	r2, [r2]
	tst	r2, #4
	beq	.L18925
	str	r3, [sp, #4]
	ldr	lr, [r3]
	movw	r2, #:lower16:.LC1081
	add	r1, ip, #32
	movt	r2, #:upper16:.LC1081
	ldr	r0, .L19074+28
	mov	r3, #15
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
	b	.L18925
.L19072:
	str	r3, [sp, #4]
	ldr	lr, [r3]
	movw	r2, #:lower16:.LC1081
	add	r1, ip, #32
	movt	r2, #:upper16:.LC1081
	ldr	r0, .L19074+28
	mov	r3, #8
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
.L18916:
	ldr	r3, [r4, #84]
	cmp	r3, #0
	beq	.L18918
	ldr	r2, .L19074+20
	ldrh	r2, [r2]
	tst	r2, #4
	beq	.L18917
	str	r3, [sp, #4]
	ldr	lr, [r3]
	movw	r2, #:lower16:.LC1081
	add	r1, ip, #32
	movt	r2, #:upper16:.LC1081
	ldr	r0, .L19074+28
	mov	r3, #9
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
.L18918:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L18919
	ldr	r2, .L19074+20
	ldrh	r2, [r2]
	tst	r2, #4
	beq	.L18920
	str	r3, [sp, #4]
	ldr	lr, [r3]
	movw	r2, #:lower16:.LC1081
	add	r1, ip, #32
	movt	r2, #:upper16:.LC1081
	ldr	r0, .L19074+28
	mov	r3, #10
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
.L18919:
	ldr	r3, [r4, #92]
	cmp	r3, #0
	beq	.L18920
	ldr	r2, .L19074+20
	ldrh	r2, [r2]
	tst	r2, #4
	beq	.L18920
	str	r3, [sp, #4]
	ldr	lr, [r3]
	movw	r2, #:lower16:.LC1081
	add	r1, ip, #32
	movt	r2, #:upper16:.LC1081
	ldr	r0, .L19074+28
	mov	r3, #11
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
	b	.L18920
.L19071:
	str	r3, [sp, #4]
	ldr	lr, [r3]
	movw	r2, #:lower16:.LC1081
	add	r1, ip, #32
	movt	r2, #:upper16:.LC1081
	ldr	r0, .L19074+28
	mov	r3, #6
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
.L18914:
	ldr	r3, [r4, #76]
	cmp	r3, #0
	beq	.L18915
	ldr	r2, .L19074+20
	ldrh	r2, [r2]
	tst	r2, #4
	beq	.L18915
	str	r3, [sp, #4]
	ldr	lr, [r3]
	movw	r2, #:lower16:.LC1081
	add	r1, ip, #32
	movt	r2, #:upper16:.LC1081
	ldr	r0, .L19074+28
	mov	r3, #7
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
	b	.L18915
.L18934:
	ldr	ip, [r6]
	b	.L18895
.L19064:
	ldrb	r9, [r4, #45]	@ zero_extendqisi2
	movw	r2, #:lower16:.LC917
	movw	lr, #:lower16:.LC1075
	movt	r2, #:upper16:.LC917
	movt	lr, #:upper16:.LC1075
	ldrb	r3, [r4, #20]	@ zero_extendqisi2
	movw	r0, #:lower16:.LC1076
	add	r1, ip, #32
	movt	r0, #:upper16:.LC1076
	tst	r9, #1
	moveq	lr, r2
	tst	r9, #2
	moveq	r0, r2
	tst	r9, #4
	moveq	ip, r2
	beq	.L18907
	ldr	r9, [ip, #20]
	movw	r2, #:lower16:.LC1078
	movw	ip, #:lower16:.LC1077
	movt	r2, #:upper16:.LC1078
	movt	ip, #:upper16:.LC1077
	cmp	r9, #2
	movls	ip, r2
.L18907:
	movw	r2, #:lower16:.LC1080
	stm	sp, {r4, lr}
	movt	r2, #:upper16:.LC1080
	str	r0, [sp, #8]
	ldr	r0, .L19074+32
	str	ip, [sp, #12]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
	b	.L18904
.L19070:
	str	r3, [sp, #4]
	ldr	lr, [r3]
	movw	r2, #:lower16:.LC1081
	add	r1, ip, #32
	movt	r2, #:upper16:.LC1081
	ldr	r0, .L19074+28
	mov	r3, #5
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
	b	.L18913
.L19065:
	str	r3, [sp, #4]
	ldr	lr, [r3]
	movw	r2, #:lower16:.LC1081
	add	r1, ip, #32
	movt	r2, #:upper16:.LC1081
	ldr	r0, .L19074+28
	mov	r3, #0
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
	b	.L18908
.L19069:
	str	r3, [sp, #4]
	ldr	lr, [r3]
	movw	r2, #:lower16:.LC1081
	add	r1, ip, #32
	movt	r2, #:upper16:.LC1081
	ldr	r0, .L19074+28
	mov	r3, #4
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
	b	.L18912
.L19068:
	str	r3, [sp, #4]
	ldr	lr, [r3]
	movw	r2, #:lower16:.LC1081
	add	r1, ip, #32
	movt	r2, #:upper16:.LC1081
	ldr	r0, .L19074+28
	mov	r3, #3
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
	b	.L18911
.L19067:
	str	r3, [sp, #4]
	ldr	lr, [r3]
	movw	r2, #:lower16:.LC1081
	add	r1, ip, #32
	movt	r2, #:upper16:.LC1081
	ldr	r0, .L19074+28
	mov	r3, #2
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
	b	.L18910
.L19066:
	str	r3, [sp, #4]
	ldr	lr, [r3]
	movw	r2, #:lower16:.LC1081
	add	r1, ip, #32
	movt	r2, #:upper16:.LC1081
	ldr	r0, .L19074+28
	mov	r3, #1
	str	lr, [sp]
	bl	__dynamic_dev_dbg
	ldr	ip, [r6]
	b	.L18909
.L19058:
	movw	r0, #:lower16:.LC1459
	mov	r1, #500
	movt	r0, #:upper16:.LC1459
	bl	warn_slowpath_null
	b	.L18889
.L19062:
	mvn	r5, #15
	b	.L18896
.L19075:
	.align	2
.L19074:
	.word	.LANCHOR4+4096
	.word	.LANCHOR8-4014
	.word	.LANCHOR8-4032
	.word	.LANCHOR5+3652
	.word	.LANCHOR8-4062
	.word	.LANCHOR8-4038
	.word	.LANCHOR4+4080
	.word	.LANCHOR8-4056
	.word	.LANCHOR8-4080
	.fnend
	.size	android_enable, .-android_enable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	enable_store, %function
enable_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r3
	strd	r6, [sp, #8]
	mov	r7, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	bl	dev_get_drvdata
	ldr	r5, [r0, #8]
	mov	r3, #0
	str	r3, [sp, #28]
	cmp	r5, r3
	mvneq	r4, #18
	bne	.L19123
.L19076:
	mov	r0, r4
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L19123:
	add	r3, r0, #24
	mov	r6, r0
	mov	r0, r3
	str	r3, [sp, #8]
	bl	mutex_lock
	movw	r1, #:lower16:.LC452
	add	r2, sp, #28
	movt	r1, #:upper16:.LC452
	mov	r0, r7
	bl	sscanf
	movw	r0, #:lower16:.LC1461
	ldrb	r2, [r6, #16]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC1461
	ldr	r1, [sp, #28]
	bl	printk
	ldr	r3, [sp, #28]
	cmp	r3, #0
	beq	.L19078
	ldrb	r3, [r6, #16]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L19124
	ldr	r1, .L19128
	ldr	r0, .L19128+4
	bl	___ratelimit
	cmp	r0, #0
	beq	.L19094
	ldrb	ip, [r6, #16]	@ zero_extendqisi2
	movw	r3, #:lower16:.LC1321
	movw	r2, #:lower16:.LC1320
	movt	r3, #:upper16:.LC1321
	movw	r0, #:lower16:.LC1472
	ldr	r1, .L19128
	movt	r2, #:upper16:.LC1320
	movt	r0, #:upper16:.LC1472
	cmp	ip, #0
	moveq	r2, r3
	bl	printk
.L19094:
	ldr	r0, [sp, #8]
	bl	mutex_unlock
	b	.L19076
.L19078:
	ldrb	r1, [r6, #16]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L19125
	ldr	r0, [r5]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L19102
	blx	r3
.L19102:
	mov	r3, #0
	strb	r3, [r6, #16]
	b	.L19094
.L19125:
	mov	r0, r6
	mov	r8, r6
	bl	android_disable
	ldr	r7, [r8, #500]!
	sub	r7, r7, #120
.L19096:
	add	r3, r7, #120
	cmp	r3, r8
	beq	.L19102
	mov	r9, r7
	ldr	r5, [r9, #112]!
	cmp	r9, r5
	sub	r5, r5, #4
	beq	.L19100
.L19097:
	ldr	r3, [r5]
	mov	r0, r3
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L19098
	blx	r3
	ldr	r5, [r5, #4]
	cmp	r9, r5
	sub	r5, r5, #4
	bne	.L19097
.L19100:
	ldr	r7, [r7, #120]
	sub	r7, r7, #120
	b	.L19096
.L19098:
	ldr	r5, [r5, #4]
	cmp	r9, r5
	sub	r5, r5, #4
	bne	.L19097
	b	.L19100
.L19124:
	movw	r3, #:lower16:.LANCHOR1
	movw	ip, #:lower16:.LC1463
	ldr	r0, .L19128+8
	movt	r3, #:upper16:.LANCHOR1
	movt	ip, #:upper16:.LC1463
	ldr	r3, [r3, #3760]
	movw	r1, #:lower16:.LC925
	mov	r2, #255
	movt	r1, #:upper16:.LC925
	str	ip, [sp, #12]
	movw	r10, #:lower16:.LANCHOR0
	movt	r10, #:upper16:.LANCHOR0
	mov	r8, r6
	strb	r3, [r5, #48]
	bl	strncpy
	movw	r1, #:lower16:.LC1462
	mov	r2, #255
	ldr	r0, .L19128+12
	movt	r1, #:upper16:.LC1462
	bl	strncpy
	movw	r3, #:lower16:.LC1464
	ldrb	r1, [r10, #140]	@ zero_extendqisi2
	movt	r3, #:upper16:.LC1464
	ldr	r2, [r10, #144]
	str	r3, [sp, #16]
	ldrh	r3, [r10, #148]
	strb	r1, [r5, #21]
	str	r2, [r5, #25]	@ unaligned
	strh	r3, [r5, #29]	@ unaligned
	ldr	r9, [r8, #500]!
	sub	r9, r9, #120
	b	.L19080
.L19087:
	mov	fp, r9
	ldr	r7, [fp, #112]!
	sub	r7, r7, #4
.L19081:
	add	r3, r7, #4
	cmp	r3, fp
	bne	.L19086
	ldr	r9, [r9, #120]
	sub	r9, r9, #120
.L19080:
	add	r3, r9, #120
	cmp	r8, r3
	bne	.L19087
	movw	r1, #:lower16:.LC925
	mov	r2, #255
	ldr	r0, .L19128+8
	movt	r1, #:upper16:.LC925
	bl	strncpy
	movw	r1, #:lower16:.LC1462
	mov	r2, #255
	ldr	r0, .L19128+12
	movt	r1, #:upper16:.LC1462
	bl	strncpy
	ldrh	ip, [r5, #29]	@ unaligned
	movw	r0, #:lower16:.LC1468
	ldrb	lr, [r10, #141]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC1468
	ldrb	r1, [r10, #142]	@ zero_extendqisi2
	ldrh	r3, [r5, #27]	@ unaligned
	ldrh	r2, [r5, #25]	@ unaligned
	strb	lr, [r5, #22]
	strb	r1, [r5, #23]
	ldr	r1, .L19128
	str	ip, [sp]
	bl	printk
	movw	r0, #:lower16:.LC1469
	ldrb	r3, [r5, #23]	@ zero_extendqisi2
	ldrb	r2, [r5, #22]	@ zero_extendqisi2
	movt	r0, #:upper16:.LC1469
	ldrb	r1, [r5, #21]	@ zero_extendqisi2
	bl	printk
	movw	r0, #:lower16:.LC1470
	ldr	r1, .L19128
	movt	r0, #:upper16:.LC1470
	bl	printk
	ldr	r5, [r6, #500]
	sub	r5, r5, #120
.L19088:
	add	r3, r5, #120
	cmp	r8, r3
	beq	.L19126
	mov	r9, r5
	ldr	r7, [r9, #112]!
	sub	r7, r7, #4
.L19089:
	add	r3, r7, #4
	cmp	r3, r9
	beq	.L19127
	ldr	r0, [r7]
	ldr	r3, [r0, #32]
	cmp	r3, #0
	beq	.L19090
	blx	r3
.L19090:
	ldr	r7, [r7, #4]
	sub	r7, r7, #4
	b	.L19089
.L19086:
	ldr	r3, [r7]
	ldr	r1, .L19128
	ldr	r0, [sp, #12]
	ldr	r2, [r3]
	bl	printk
	ldr	r3, [r7]
	ldr	r1, [sp, #16]
	ldr	r3, [r3]
	mov	r0, r3
	str	r3, [sp, #20]
	bl	strcmp
	subs	r2, r0, #0
	ldr	r3, [sp, #20]
	bne	.L19082
	movw	r0, #:lower16:.LC1465
	str	r2, [sp, #20]
	movt	r0, #:upper16:.LC1465
	bl	printk
	ldr	r2, [sp, #20]
	mov	r3, #4
	movw	r1, #:lower16:.LC1053
	movt	r1, #:upper16:.LC1053
	strb	r2, [r5, #29]
	strb	r3, [r5, #30]
	ldr	r3, [r7]
	ldr	r0, [r3]
	bl	strcmp
	cmp	r0, #0
	bne	.L19084
.L19083:
	movw	r0, #:lower16:.LC1466
	movt	r0, #:upper16:.LC1466
	bl	printk
	mov	r2, #0
	mov	r3, #12
	strb	r2, [r5, #29]
	strb	r3, [r5, #30]
.L19084:
	ldr	r7, [r7, #4]
	sub	r7, r7, #4
	b	.L19081
.L19082:
	movw	r1, #:lower16:.LC1053
	mov	r0, r3
	movt	r1, #:upper16:.LC1053
	bl	strcmp
	subs	r2, r0, #0
	str	r2, [sp, #20]
	bne	.L19084
	ldrh	r3, [r5, #29]	@ unaligned
	cmp	r3, #1024
	beq	.L19083
	movw	r0, #:lower16:.LC1467
	movt	r0, #:upper16:.LC1467
	bl	printk
	ldr	r2, [sp, #20]
	mov	r3, #8
	strb	r2, [r5, #29]
	strb	r3, [r5, #30]
	b	.L19084
.L19126:
	mov	r0, r6
	bl	android_enable
	cmp	r0, #0
	movge	r3, #1
	strbge	r3, [r6, #16]
	bge	.L19094
	ldr	r2, .L19128
	movw	r0, #:lower16:.LC1471
	movt	r0, #:upper16:.LC1471
	mov	r1, r2
	bl	printk
	mov	r3, #0
	ldr	r0, [sp, #8]
	strb	r3, [r6, #16]
	strb	r3, [r6, #48]
	bl	mutex_unlock
	b	.L19076
.L19127:
	ldr	r5, [r5, #120]
	sub	r5, r5, #120
	b	.L19088
.L19129:
	.align	2
.L19128:
	.word	.LANCHOR5+3668
	.word	.LANCHOR6-580
	.word	.LANCHOR1+2764
	.word	.LANCHOR1+2508
	.fnend
	.size	enable_store, .-enable_store
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_android_function_disable, %function
adb_android_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mov	r1, #0
	ldr	r0, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, r1
	beq	.L19132
	bx	lr
.L19132:
	b	android_enable
	.fnend
	.size	adb_android_function_disable, .-adb_android_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	adb_open, %function
adb_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L19150
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	ldr	r1, .L19150+4
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	___ratelimit
	cmp	r0, #0
	beq	.L19134
	movw	r0, #:lower16:.LC1473
	movt	r0, #:upper16:.LC1473
	bl	printk
.L19134:
	movw	r4, #:lower16:.LANCHOR1
	movt	r4, #:upper16:.LANCHOR1
	ldr	r3, [r4, #3596]
	cmp	r3, #0
	beq	.L19141
	add	r2, r3, #116
	.syntax divided
@ 61 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r5, [r2]
	add	r5, r5, #1
	strex	r1, r5, [r2]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r5, #1
	bne	.L19136
	ldr	r3, [r4, #3596]
	mov	r2, #0
	str	r3, [r6, #124]
	ldrb	r1, [r3, #161]	@ zero_extendqisi2
	str	r2, [r3, #104]
	cmp	r1, r2
	bne	.L19149
.L19138:
	mov	r2, #1
	mov	r0, #0
	strb	r2, [r3, #160]
.L19133:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L19149:
	movw	r1, #:lower16:.LANCHOR6
	strb	r2, [r3, #161]
	movt	r1, #:upper16:.LANCHOR6
	ldr	r7, [r1, #-2012]
	ldr	r6, [r1, #-1996]
	cmp	r6, #0
	strbeq	r5, [r7]
	streq	r6, [r7, #4]
	beq	.L19138
	add	r8, r6, #24
	mov	r0, r8
	bl	mutex_lock
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	strb	r5, [r7]
	str	r6, [r7, #4]
	cmp	r3, #0
	beq	.L19140
	mov	r0, r6
	bl	android_enable
.L19140:
	mov	r0, r8
	bl	mutex_unlock
	ldr	r3, [r4, #3596]
	b	.L19138
.L19136:
	.syntax divided
@ 83 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	mvn	r0, #15
	b	.L19133
.L19141:
	mvn	r0, #18
	b	.L19133
.L19151:
	.align	2
.L19150:
	.word	.LANCHOR6-556
	.word	.LANCHOR5+3684
	.fnend
	.size	adb_open, .-adb_open
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_function_disable, %function
ffs_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mov	r1, #0
	ldr	r0, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, r1
	beq	.L19154
	bx	lr
.L19154:
	b	android_enable
	.fnend
	.size	ffs_function_disable, .-ffs_function_disable
	.align	2
	.syntax unified
	.arm
	.fpu softvfp
	.type	ffs_ep0_write, %function
ffs_ep0_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #44
	sub	sp, sp, #44
	add	r7, r4, #96
	.syntax divided
@ 193 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
.L19156:
	.syntax divided
@ 170 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	lr, [r7]
	mov	ip, #0
	teq	lr, #2
	strexeq ip, r3, [r7]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	ip, #0
	bne	.L19156
	.syntax divided
@ 195 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	lr, #2
	beq	.L19223
	ldr	r3, [r0, #32]
	add	r6, r4, #4
	mov	r5, r2
	mov	r9, r1
	mov	r0, r6
	tst	r3, #2048
	beq	.L19158
	bl	mutex_trylock
	cmp	r0, #0
	beq	.L19224
.L19162:
	ldr	r3, [r4, #92]
	cmp	r3, #1
	bls	.L19159
	cmp	r3, #2
	mvnne	fp, #76
	bne	.L19161
	add	r10, r4, #116
	mov	r0, r10
	bl	_raw_spin_lock_irq
	.syntax divided
@ 193 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	mov	r3, #0
.L19208:
	.syntax divided
@ 170 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r0, [r7]
	mov	r8, #0
	teq	r0, #2
	strexeq r8, r3, [r7]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r8, #0
	bne	.L19208
	.syntax divided
@ 195 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r0, #0
	beq	.L19230
	cmp	r0, #2
	bne	.L19281
	mov	r5, r8
.L19280:
	mvn	fp, #42
.L19209:
	mov	r0, r10
	bl	_raw_spin_unlock_irq
.L19215:
	mov	r0, r5
	bl	kfree
.L19161:
	mov	r0, r6
	bl	mutex_unlock
	b	.L19155
.L19158:
	bl	mutex_lock_interruptible
	subs	fp, r0, #0
	bge	.L19162
.L19155:
	mov	r0, fp
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L19159:
	cmp	r5, #15
	bls	.L19225
	mov	r0, r9
	mov	r1, r5
	bl	ffs_prepare_buffer
	cmn	r0, #4096
	mov	r7, r0
	movhi	fp, r0
	bhi	.L19161
	ldr	r3, [r4, #92]
	cmp	r3, #0
	bne	.L19164
	movw	r0, #:lower16:.LC1474
	movt	r0, #:upper16:.LC1474
	bl	printk
	ldr	r3, [r7]	@ unaligned
	cmp	r3, #1
	beq	.L19282
.L19165:
	mvn	fp, #21
.L19167:
	mov	r0, r7
	bl	kfree
	b	.L19161
.L19281:
	ldrsb	r3, [r4, #108]
	cmp	r3, #0
	blt	.L19210
	mov	r0, r10
	bl	_raw_spin_unlock_irq
	ldrh	r3, [r4, #106]
	cmp	r3, #0
	bne	.L19283
	ldr	r0, .L19294
	ldrh	r3, [r0, #-2]
	tst	r3, #4
	mvneq	fp, #2
	beq	.L19161
	movw	r1, #:lower16:.LC731
	sub	r0, r0, #20
	movt	r1, #:upper16:.LC731
	mvn	fp, #2
	bl	__dynamic_pr_debug
	b	.L19161
.L19230:
	mov	r5, r0
	mvn	fp, #2
	b	.L19209
.L19283:
	ldr	r2, [r4]
	mov	r1, #1
	mvn	fp, #50
	ldr	r0, [r2, #4]
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #24]
	blx	r2
	str	r8, [r4, #96]
	b	.L19161
.L19224:
	mvn	fp, #10
	b	.L19155
.L19210:
	ldrh	fp, [r4, #114]
	mov	r0, r10
	cmp	fp, r5
	movcs	fp, r5
	bl	_raw_spin_unlock_irq
	mov	r1, fp
	mov	r0, r9
	bl	ffs_prepare_buffer
	cmn	r0, #4096
	mov	r5, r0
	movhi	fp, r0
	bhi	.L19161
	mov	r0, r10
	bl	_raw_spin_lock_irq
	.syntax divided
@ 193 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
.L19213:
	.syntax divided
@ 170 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r2, [r7]
	mov	r3, #0
	teq	r2, #2
	strexeq r3, r8, [r7]

@ 0 "" 2
	.arm
	.syntax unified
	cmp	r3, #0
	bne	.L19213
	.syntax divided
@ 195 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	.arm
	.syntax unified
	cmp	r2, #2
	beq	.L19280
	mov	r2, fp
	mov	r0, r4
	mov	r1, r5
	bl	__ffs_ep0_queue_wait
	mov	fp, r0
	b	.L19215
.L19225:
	mvn	fp, #21
	b	.L19161
.L19223:
	mvn	fp, #42
	b	.L19155
.L19164:
	movw	r0, #:lower16:.LC1475
	movt	r0, #:upper16:.LC1475
	bl	printk
	ldr	r3, [r7]	@ unaligned
	cmp	r3, #2
	beq	.L19284
.L19174:
	mov	r0, r7
	mvn	fp, #21
	bl	kfree
	b	.L19161
.L19282:
	ldr	r3, [r7, #4]	@ unaligned
	cmp	r5, r3
	bne	.L19165
	ldr	r3, [r7, #8]	@ unaligned
	add	r9, r7, #16
	sub	r8, r5, #16
	ldr	r10, [r7, #12]	@ unaligned
	cmp	r3, #0
	str	r3, [sp, #12]
	beq	.L19226
	movw	r3, #:lower16:__ffs_data_do_entity
	mov	r2, r8
	str	r4, [sp]
	mov	r1, r9
	movt	r3, #:upper16:__ffs_data_do_entity
	ldr	r0, [sp, #12]
	bl	ffs_do_descs
	subs	fp, r0, #0
	addge	r9, r9, fp
	subge	r8, r8, fp
	strge	fp, [sp, #24]
	blt	.L19167
.L19166:
	cmp	r10, #0
	beq	.L19168
	movw	r3, #:lower16:__ffs_data_do_entity
	mov	r2, r8
	str	r4, [sp]
	movt	r3, #:upper16:__ffs_data_do_entity
	mov	r1, r9
	mov	r0, r10
	bl	ffs_do_descs
	subs	fp, r0, #0
	blt	.L19167
	add	r1, fp, #8
	mov	r2, fp
	cmp	r8, r1
	bcc	.L19221
	ldr	r1, [r9, fp]	@ unaligned
	movw	r3, #56924
	movt	r3, 85
	cmp	r1, r3
	bne	.L19165
	add	r3, r9, r2
	ldr	r3, [r3, #4]	@ unaligned
	strd	r2, [sp, #16]
.L19171:
	ldr	r3, [sp, #20]
	sub	r8, r8, #8
	sub	r8, r8, r2
	cmp	r3, #0
	beq	.L19172
	add	r2, r2, #8
	movw	r3, #:lower16:__ffs_data_do_entity
	str	r4, [sp]
	add	r1, r9, r2
	movt	r3, #:upper16:__ffs_data_do_entity
	ldr	r0, [sp, #20]
	mov	r2, r8
	bl	ffs_do_descs
	subs	fp, r0, #0
	blt	.L19167
	cmp	r8, fp
	bne	.L19165
	ldr	r3, [sp, #16]
	str	r7, [r4, #144]
	ldr	r2, [sp, #24]
	str	r8, [r4, #160]
	str	r10, [r4, #168]
	add	r3, r3, r2
	add	r1, r8, r3
	add	r2, r3, #24
	str	r3, [r4, #152]
	ldr	r3, [sp, #12]
	str	r1, [r4, #148]
	str	r2, [r4, #156]
	str	r3, [r4, #164]
	ldr	r3, [sp, #20]
	str	r3, [r4, #172]
.L19217:
	mov	r2, #1
	mov	fp, r5
	str	r2, [r4, #92]
	b	.L19161
.L19226:
	ldr	r3, [sp, #12]
	str	r3, [sp, #24]
	b	.L19166
.L19284:
	ldr	r3, [r7, #4]	@ unaligned
	cmp	r5, r3
	bne	.L19174
	ldr	r3, [r7, #8]	@ unaligned
	ldr	r10, [r7, #12]	@ unaligned
	clz	r1, r3
	str	r3, [sp, #12]
	clz	r2, r10
	lsr	r1, r1, #5
	lsr	r2, r2, #5
	cmp	r1, r2
	bne	.L19174
	ldrh	r3, [r4, #176]
	ldr	r2, [sp, #12]
	str	r3, [sp, #20]
	cmp	r2, r3
	bcc	.L19174
	cmp	r3, #0
	bne	.L19175
	mov	r0, r7
	bl	kfree
.L19176:
	ldrh	r3, [r4, #180]
	mov	r0, #56
	movw	r1, #32976
	mul	r0, r0, r3
	str	r3, [sp, #16]
	bl	__kmalloc
	subs	r9, r0, #0
	bne	.L19285
.L19183:
	mov	r2, #3
	mvn	fp, #11
	str	r2, [r4, #92]
	b	.L19161
.L19168:
	cmp	r8, #7
	bls	.L19170
	ldr	r2, [r9]	@ unaligned
	movw	r3, #56924
	movt	r3, 85
	cmp	r2, r3
	bne	.L19165
	ldr	r3, [r9, #4]	@ unaligned
	ldr	r2, [sp, #12]
	str	r3, [sp, #20]
	orrs	r3, r2, r3
	movne	r2, r10
	strne	r10, [sp, #16]
	beq	.L19165
	b	.L19171
.L19170:
	ldr	r3, [sp, #12]
	cmp	r3, #0
	beq	.L19165
	mov	r2, r10
	mov	fp, r10
.L19221:
	sub	r8, r8, r2
	str	fp, [sp, #16]
.L19172:
	cmp	r8, #0
	bne	.L19165
	ldr	r3, [sp, #16]
	str	r7, [r4, #144]
	ldr	r2, [sp, #24]
	str	r8, [r4, #160]
	str	r10, [r4, #168]
	str	r8, [r4, #172]
	add	r3, r3, r2
	str	r3, [r4, #148]
	str	r3, [r4, #152]
	ldr	r3, [sp, #12]
	str	r3, [r4, #164]
	b	.L19217
.L19175:
	ldr	r3, [sp, #20]
	add	r8, r10, #1
	mov	r1, #208
	add	r0, r3, #2
	mul	r0, r10, r0
	add	r0, r8, r0, lsl #1
	lsl	r0, r0, #2
	bl	__kmalloc
	subs	r3, r0, #0
	bne	.L19177
	mov	r0, r7
	mvn	fp, #11
	bl	kfree
	b	.L19161
.L19285:
	movw	r3, #:lower16:.LC1476
	movw	r2, #:lower16:.LC1477
	movt	r3, #:upper16:.LC1476
	movt	r2, #:upper16:.LC1477
	mov	r8, r9
	mov	r7, #1
	str	r3, [sp, #20]
	str	r2, [sp, #24]
.L19184:
	ldr	r3, [sp, #16]
	cmp	r3, r7
	bcc	.L19286
	ldr	r2, .L19294+4
	mov	r0, r8
	str	r4, [r8, #36]
	ldr	r1, [sp, #20]
	add	r10, r9, #48
	bl	__mutex_init
	ldr	r2, .L19294+4
	add	r0, r8, #20
	ldr	r1, [sp, #24]
	bl	__init_waitqueue_head
	movw	r1, #:lower16:.LC1478
	mov	r2, r7
	movt	r1, #:upper16:.LC1478
	mov	r0, r10
	bl	sprintf
	ldr	r3, [r4, #192]
	mov	r1, r10
	ldr	r0, [r3, #60]
	str	r3, [sp, #28]
	ldr	fp, [r3, #616]
	bl	d_alloc_name
	subs	r3, r0, #0
	str	r3, [sp, #12]
	ldr	r3, [sp, #28]
	bne	.L19287
.L19185:
	sub	r7, r7, #1
	mov	r5, r9
	mov	r8, #0
.L19188:
	cmp	r7, #0
	beq	.L19288
	ldr	r3, [r5]
	cmp	r3, #1
	beq	.L19289
.L19189:
	.syntax divided
@ 1521 "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1522, 0
.popsection
@ 0 "" 2
	.arm
	.syntax unified
.L19177:
	add	r1, r3, r8, lsl #2
	mov	r2, r10
	mov	ip, r3
	mov	r0, r1
.L19178:
	subs	r2, r2, #1
	str	r0, [ip], #4
	add	r0, r0, #8
	bne	.L19178
	add	r8, r8, r10, lsl #1
	add	r0, r1, #8
	str	r2, [r1, #-4]
	sub	r9, r5, #16
	add	r8, r3, r8, lsl #2
	mov	r2, r5
	str	r0, [sp, #16]
	add	fp, r7, #16
	mov	r5, r4
.L19182:
	cmp	r9, #2
	bhi	.L19290
.L19179:
	mov	r0, r3
	bl	kfree
	b	.L19174
.L19286:
	mov	r3, #2
	mov	r0, r6
	str	r3, [r4, #92]
	str	r9, [r4, #208]
	bl	mutex_unlock
	movw	r3, #:lower16:.LANCHOR6
	movt	r3, #:upper16:.LANCHOR6
	ldr	r6, [r3, #-1944]
	cmp	r6, #0
	beq	.L19269
	add	r7, r6, #24
	ldr	r9, [r3, #-1960]
	mov	r0, r7
	bl	mutex_lock
	ldr	r3, [r4, #92]
	cmp	r3, #2
	beq	.L19196
.L19198:
	movw	r0, #:lower16:.LC33
	movw	r1, #1443
	movt	r0, #:upper16:.LC33
	mvn	fp, #76
	bl	warn_slowpath_null
.L19197:
	mov	r0, r7
	bl	mutex_unlock
	b	.L19207
.L19287:
	mov	r0, r3
	bl	new_inode
	subs	r10, r0, #0
	beq	.L19186
	add	r0, sp, #32
	add	r7, r7, #1
	bl	current_kernel_time
	bl	get_next_ino
	str	r0, [r10, #40]
	ldrh	r3, [fp, #196]
	mov	r1, r10
	ldr	ip, .L19294+8
	ldr	r0, [sp, #12]
	strh	r3, [r10]	@ movhi
	ldrd	r2, [sp, #32]
	ldr	lr, [fp, #200]
	str	lr, [r10, #4]
	ldr	lr, [fp, #204]
	str	lr, [r10, #8]
	strd	r2, [r10, #52]
	strd	r2, [r10, #60]
	strd	r2, [r10, #68]
	str	ip, [r10, #200]
	str	r8, [r10, #328]
	bl	d_instantiate
	ldr	r0, [sp, #12]
	bl	d_rehash
	cmn	r8, #44
	add	r8, r8, #56
	ldrne	r3, [sp, #12]
	strne	r3, [r8, #-12]
	b	.L19184
.L19269:
	movw	r0, #:lower16:.LANCHOR8
	movt	r0, #:upper16:.LANCHOR8
	ldrh	r3, [r0, #-102]
	tst	r3, #4
	beq	.L19229
	movw	r1, #:lower16:.LC1479
	sub	r0, r0, #120
	ldr	r2, .L19294+12
	movt	r1, #:upper16:.LC1479
	mvn	fp, #18
	bl	__dynamic_pr_debug
.L19207:
	mov	r2, #3
	str	r2, [r4, #92]
	b	.L19155
.L19229:
	mvn	fp, #18
	b	.L19207
.L19196:
	add	r8, r4, #128
	mov	r0, #1
	ldr	r10, [r6, #8]
	mov	r1, r8
	bl	_test_and_set_bit
	cmp	r0, #0
	bne	.L19198
	ldrh	r3, [r4, #176]
	cmp	r3, #254
	bls	.L19271
.L19233:
	mvn	fp, #18
	b	.L19197
.L19290:
	ldrb	r0, [fp, #1]	@ zero_extendqisi2
	sub	r9, r9, #2
	str	r10, [sp, #24]
	ldrb	r1, [fp], #2	@ zero_extendqisi2
	mov	r10, r3
	ldr	ip, [sp, #16]
	ldr	r4, [sp, #20]
	orr	r1, r1, r0, lsl #8
	strh	r1, [ip, #-8]	@ movhi
	str	r8, [ip, #-4]
.L19181:
	mov	r1, r9
	mov	r0, fp
	str	r2, [sp, #28]
	bl	strnlen
	cmp	r9, r0
	ldr	r2, [sp, #28]
	bne	.L19291
	mov	r3, r10
	b	.L19179
.L19288:
	mov	r0, r9
	bl	kfree
	b	.L19183
.L19291:
	cmp	r4, #0
	beq	.L19180
	sub	r4, r4, #1
	add	r8, r8, #8
	str	fp, [r8, #-4]
.L19180:
	ldr	r3, [sp, #12]
	add	r1, r0, #1
	mvn	r0, r0
	add	fp, fp, r1
	add	r9, r9, r0
	subs	r3, r3, #1
	str	r3, [sp, #12]
	bne	.L19181
	ldr	r1, [sp, #16]
	mov	r3, r10
	add	r8, r8, #8
	ldr	r10, [sp, #24]
	add	r1, r1, #8
	subs	r10, r10, #1
	str	r1, [sp, #16]
	ldr	r1, [sp, #12]
	strb	r1, [r8, #-8]
	str	r1, [r8, #-4]
	bne	.L19182
	mov	r4, r5
	cmp	r9, #0
	mov	r5, r2
	streq	r7, [r4, #184]
	streq	r3, [r4, #188]
	bne	.L19179
	b	.L19176
.L19289:
	ldr	r2, [r5, #24]
	add	r3, r5, #24
	cmp	r2, r3
	bne	.L19189
	ldr	r0, [r5, #44]
	cmp	r0, #0
	beq	.L19191
	bl	d_delete
	ldr	r0, [r5, #44]
	bl	dput
	str	r8, [r5, #44]
.L19191:
	sub	r7, r7, #1
	add	r5, r5, #56
	b	.L19188
.L19186:
	ldr	r0, [sp, #12]
	bl	dput
	b	.L19185
.L19271:
	ldrb	fp, [r10, #48]	@ zero_extendqisi2
	add	r3, fp, r3
	cmp	r3, #254
	bhi	.L19233
	ldr	r2, [r10]
	strb	r3, [r10, #48]
	mov	r1, #208
	ldr	r0, [r2, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r4, #28]
	bne	.L19292
	mvn	fp, #11
	b	.L19197
.L19292:
	movw	r3, #:lower16:ffs_ep0_complete
	movt	r3, #:upper16:ffs_ep0_complete
	str	r3, [r0, #28]
	ldr	r3, [r4, #28]
	str	r4, [r3, #32]
	ldr	r3, [r4, #188]
	cmp	r3, #0
	subne	r3, r3, #4
	bne	.L19201
.L19200:
	ldr	r2, [r10]
	mov	r3, r4
	str	r2, [r3], #84
	.syntax divided
@ 45 "/home/jprim/hlte/lolz_rebase/arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	.arm
	.syntax unified
	ldrb	r3, [r9, #1]	@ zero_extendqisi2
	mov	r2, #1
	strb	r2, [r9]
	stmib	r9, {r4, r6}
	cmp	r3, #0
	beq	.L19203
	mov	r0, r6
	bl	android_enable
.L19203:
	mov	r0, r7
	mov	fp, r5
	bl	mutex_unlock
	mov	r1, r8
	mov	r0, #0
	bl	_set_bit
	b	.L19155
.L19293:
	ldr	r1, [r1, #4]
	mov	r2, fp
.L19204:
	ldr	r0, [r1, #4]
	add	r2, r2, #1
	add	r1, r1, #8
	uxtb	r2, r2
	cmp	r0, #0
	bne	.L19205
.L19201:
	ldr	r1, [r3, #4]!
	cmp	r1, #0
	bne	.L19293
	b	.L19200
.L19205:
	strb	r2, [r1, #-8]
	b	.L19204
.L19295:
	.align	2
.L19294:
	.word	.LANCHOR4-628
	.word	.LANCHOR1+4076
	.word	.LANCHOR5+3696
	.word	.LANCHOR5+3804
	.fnend
	.size	ffs_ep0_write, .-ffs_ep0_write
	.global	terminal_mode_vendor_id
	.global	terminal_mode_version
	.global	diag_dload
	.global	conn_gadget_function
	.global	usb30en
	.global	speaker_output_terminal_desc
	.global	speaker_input_terminal_desc
	.global	uac1_ac_header_desc
	.global	uac1_ac_interface_desc
	.global	_rndis_qc
	.global	bam2bam_data_ports
	.global	rndis_ul_max_xfer_size_rcvd
	.global	rndis_ul_max_pkt_per_xfer_rcvd
	.global	mtp_ext_config_desc
	.global	mtp_tx_reqs
	.global	mtp_tx_req_len
	.global	mtp_rx_req_len
	.global	ghsuart_data_stats_ops
	.global	ghsuart_data_tx_intr_thld
	.global	ghsic_stats_ops
	.global	gdata_timestamp_ops
	.global	ghsic_data_tx_intr_thld
	.global	gctrl_dfile
	.global	gctrl_dent
	.global	gctrl_stats_ops
	.global	smd_ctrl_dfile
	.global	smd_ctrl_dent
	.global	gsmd_ctrl_stats_ops
	.global	online_clients
	.global	gbam_dent
	.global	gbam_stats_ops
	.global	bam2bam_ports
	.global	smd_pi
	.global	sport_info
	.global	gs_dent
	.global	debug_adb_ops
	.global	debug_rst_ops
	.global	dent_rmnet_mux
	.global	rmnet_mux_svlte_debug_stats_ops
	.global	debug_rmnet_sdio_stats_ops
	.global	sdio_rx_fctrl_dis_thld
	.global	sdio_rx_fctrl_en_thld
	.global	sdio_tx_pkt_drop_thld
	.global	dent_smd
	.global	rmnet_smd_debug_stats_ops
	.global	dent_diag
	.section	.rodata
	.align	3
	.set	.LANCHOR3,. + 0
	.set	.LANCHOR5,. + 8184
	.type	__func__.57202, %object
	.size	__func__.57202, 13
__func__.57202:
	.ascii	"ecm_qc_close\000"
	.space	3
	.type	__func__.57196, %object
	.size	__func__.57196, 12
__func__.57196:
	.ascii	"ecm_qc_open\000"
	.type	__func__.58070, %object
	.size	__func__.58070, 10
__func__.58070:
	.ascii	"ecm_close\000"
	.space	2
	.type	__func__.58064, %object
	.size	__func__.58064, 9
__func__.58064:
	.ascii	"ecm_open\000"
	.space	3
	.type	__func__.63296, %object
	.size	__func__.63296, 10
__func__.63296:
	.ascii	"ncm_close\000"
	.space	2
	.type	__func__.63290, %object
	.size	__func__.63290, 9
__func__.63290:
	.ascii	"ncm_open\000"
	.space	3
	.type	__func__.38497, %object
	.size	__func__.38497, 24
__func__.38497:
	.ascii	"usb_rmnet_mux_ctrl_open\000"
	.type	__func__.57149, %object
	.size	__func__.57149, 13
__func__.57149:
	.ascii	"ecm_qc_setup\000"
	.space	3
	.type	__func__.58196, %object
	.size	__func__.58196, 27
__func__.58196:
	.ascii	"rndis_qc_response_complete\000"
	.space	1
	.type	__func__.58188, %object
	.size	__func__.58188, 28
__func__.58188:
	.ascii	"rndis_qc_response_available\000"
	.type	__func__.61868, %object
	.size	__func__.61868, 21
__func__.61868:
	.ascii	"f_audio_buffer_alloc\000"
	.space	3
	.type	__func__.63177, %object
	.size	__func__.63177, 10
__func__.63177:
	.ascii	"ncm_setup\000"
	.space	2
	.type	__func__.63161, %object
	.size	__func__.63161, 22
__func__.63161:
	.ascii	"ncm_setdgram_complete\000"
	.space	2
	.type	__func__.64163, %object
	.size	__func__.64163, 23
__func__.64163:
	.ascii	"sua_version_info_store\000"
	.space	1
	.type	__func__.58332, %object
	.size	__func__.58332, 21
__func__.58332:
	.ascii	"rndis_qc_release_dev\000"
	.space	3
	.type	__func__.58322, %object
	.size	__func__.58322, 18
__func__.58322:
	.ascii	"rndis_qc_open_dev\000"
	.space	2
	.type	__func__.57685, %object
	.size	__func__.57685, 13
__func__.57685:
	.ascii	"mbim_release\000"
	.space	3
	.type	__func__.57677, %object
	.size	__func__.57677, 10
__func__.57677:
	.ascii	"mbim_open\000"
	.space	2
	.type	__func__.48410, %object
	.size	__func__.48410, 16
__func__.48410:
	.ascii	"gsdio_open_work\000"
	.type	__func__.64520, %object
	.size	__func__.64520, 11
__func__.64520:
	.ascii	"state_show\000"
	.space	1
	.type	__func__.64435, %object
	.size	__func__.64435, 12
__func__.64435:
	.ascii	"enable_show\000"
	.type	__func__.45755, %object
	.size	__func__.45755, 19
__func__.45755:
	.ascii	"start_out_transfer\000"
	.space	1
	.type	dirletter.46085, %object
	.size	dirletter.46085, 4
dirletter.46085:
	.byte	117
	.byte	111
	.byte	105
	.byte	110
	.type	__func__.64153, %object
	.size	__func__.64153, 22
__func__.64153:
	.ascii	"sua_version_info_show\000"
	.space	2
	.type	__func__.48617, %object
	.size	__func__.48617, 14
__func__.48617:
	.ascii	"gsmd_start_rx\000"
	.space	2
	.type	__func__.49328, %object
	.size	__func__.49328, 21
__func__.49328:
	.ascii	"gbam_stop_endless_rx\000"
	.space	3
	.type	__func__.49335, %object
	.size	__func__.49335, 21
__func__.49335:
	.ascii	"gbam_stop_endless_tx\000"
	.space	3
	.type	__func__.49314, %object
	.size	__func__.49314, 22
__func__.49314:
	.ascii	"gbam_start_endless_rx\000"
	.space	2
	.type	__func__.49321, %object
	.size	__func__.49321, 22
__func__.49321:
	.ascii	"gbam_start_endless_tx\000"
	.space	2
	.type	__func__.49442, %object
	.size	__func__.49442, 13
__func__.49442:
	.ascii	"gbam_wake_cb\000"
	.space	3
	.type	__func__.49287, %object
	.size	__func__.49287, 25
__func__.49287:
	.ascii	"gbam_endless_tx_complete\000"
	.space	3
	.type	__func__.49280, %object
	.size	__func__.49280, 25
__func__.49280:
	.ascii	"gbam_endless_rx_complete\000"
	.space	3
	.type	__func__.50988, %object
	.size	__func__.50988, 24
__func__.50988:
	.ascii	"ghsic_send_cpkt_tomodem\000"
	.type	__func__.51053, %object
	.size	__func__.51053, 18
__func__.51053:
	.ascii	"ghsic_ctrl_status\000"
	.space	2
	.type	__func__.51999, %object
	.size	__func__.51999, 26
__func__.51999:
	.ascii	"ghsuart_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.57492, %object
	.size	__func__.57492, 21
__func__.57492:
	.ascii	"mbim_ep0out_complete\000"
	.space	3
	.type	__func__.57789, %object
	.size	__func__.57789, 25
__func__.57789:
	.ascii	"bam_data_stop_endless_rx\000"
	.space	3
	.type	__func__.57796, %object
	.size	__func__.57796, 25
__func__.57796:
	.ascii	"bam_data_stop_endless_tx\000"
	.space	3
	.type	__func__.57768, %object
	.size	__func__.57768, 29
__func__.57768:
	.ascii	"bam_data_endless_tx_complete\000"
	.space	3
	.type	__func__.57761, %object
	.size	__func__.57761, 29
__func__.57761:
	.ascii	"bam_data_endless_rx_complete\000"
	.space	3
	.type	__func__.62124, %object
	.size	__func__.62124, 14
__func__.62124:
	.ascii	"f_audio_setup\000"
	.space	2
	.type	__func__.61977, %object
	.size	__func__.61977, 19
__func__.61977:
	.ascii	"audio_set_intf_req\000"
	.space	1
	.type	__func__.62008, %object
	.size	__func__.62008, 19
__func__.62008:
	.ascii	"audio_get_intf_req\000"
	.space	1
	.type	__func__.62046, %object
	.size	__func__.62046, 23
__func__.62046:
	.ascii	"audio_set_endpoint_req\000"
	.space	1
	.type	__func__.62088, %object
	.size	__func__.62088, 23
__func__.62088:
	.ascii	"audio_get_endpoint_req\000"
	.space	1
	.type	__func__.64697, %object
	.size	__func__.64697, 22
__func__.64697:
	.ascii	"android_unbind_config\000"
	.space	2
	.type	__func__.64325, %object
	.size	__func__.64325, 24
__func__.64325:
	.ascii	"android_enable_function\000"
	.type	__func__.64311, %object
	.size	__func__.64311, 21
__func__.64311:
	.ascii	"check_streaming_func\000"
	.space	3
	.type	__func__.38891, %object
	.size	__func__.38891, 31
__func__.38891:
	.ascii	"frmnet_ctrl_response_available\000"
	.space	1
	.type	__func__.38978, %object
	.size	__func__.38978, 13
__func__.38978:
	.ascii	"frmnet_setup\000"
	.space	3
	.type	__func__.38946, %object
	.size	__func__.38946, 23
__func__.38946:
	.ascii	"frmnet_notify_complete\000"
	.space	1
	.type	__func__.57564, %object
	.size	__func__.57564, 17
__func__.57564:
	.ascii	"mbim_ctrlrequest\000"
	.space	3
	.type	__func__.44860, %object
	.size	__func__.44860, 13
__func__.44860:
	.ascii	"ffs_do_descs\000"
	.space	3
	.type	__func__.38813, %object
	.size	__func__.38813, 14
__func__.38813:
	.ascii	"frmnet_unbind\000"
	.space	2
	.type	__func__.47324, %object
	.size	__func__.47324, 12
__func__.47324:
	.ascii	"gs_start_rx\000"
	.type	__func__.58750, %object
	.size	__func__.58750, 12
__func__.58750:
	.ascii	"gether_init\000"
	.type	__func__.48309, %object
	.size	__func__.48309, 21
__func__.48309:
	.ascii	"gsdio_write_complete\000"
	.space	3
	.type	__func__.48383, %object
	.size	__func__.48383, 24
__func__.48383:
	.ascii	"gsdio_ctrl_notify_modem\000"
	.type	__func__.48700, %object
	.size	__func__.48700, 20
__func__.48700:
	.ascii	"gsmd_write_complete\000"
	.type	__func__.48693, %object
	.size	__func__.48693, 19
__func__.48693:
	.ascii	"gsmd_read_complete\000"
	.space	1
	.type	__func__.52056, %object
	.size	__func__.52056, 19
__func__.52056:
	.ascii	"ghsuart_ctrl_probe\000"
	.space	1
	.type	__func__.52525, %object
	.size	__func__.52525, 19
__func__.52525:
	.ascii	"ghsuart_data_probe\000"
	.space	1
	.type	CSWTCH.1599, %object
	.size	CSWTCH.1599, 40
CSWTCH.1599:
	.word	.LC625
	.word	.LC626
	.word	.LC627
	.word	.LC628
	.word	.LC629
	.word	.LC630
	.word	.LC631
	.word	.LC632
	.word	.LC633
	.word	.LC1495
	.type	__func__.49773, %object
	.size	__func__.49773, 29
__func__.49773:
	.ascii	"gsmd_ctrl_send_cbits_tomodem\000"
	.space	3
	.type	__func__.49744, %object
	.size	__func__.49744, 24
__func__.49744:
	.ascii	"grmnet_ctrl_smd_write_w\000"
	.type	__func__.48676, %object
	.size	__func__.48676, 13
__func__.48676:
	.ascii	"gsmd_tx_pull\000"
	.space	3
	.type	__func__.48760, %object
	.size	__func__.48760, 21
__func__.48760:
	.ascii	"gsmd_disconnect_work\000"
	.space	3
	.type	__func__.64883, %object
	.size	__func__.64883, 5
__func__.64883:
	.ascii	"init\000"
	.space	3
	.type	__func__.49716, %object
	.size	__func__.49716, 23
__func__.49716:
	.ascii	"grmnet_ctrl_smd_read_w\000"
	.space	1
	.type	__func__.57502, %object
	.size	__func__.57502, 19
__func__.57502:
	.ascii	"fmbim_cmd_complete\000"
	.space	1
	.type	__func__.62868, %object
	.size	__func__.62868, 29
__func__.62868:
	.ascii	"conn_gadget_function_disable\000"
	.space	3
	.type	__func__.62773, %object
	.size	__func__.62773, 18
__func__.62773:
	.ascii	"conn_gadget_flush\000"
	.space	2
	.type	__func__.54480, %object
	.size	__func__.54480, 16
__func__.54480:
	.ascii	"mtp_ctrlrequest\000"
	.type	__func__.38222, %object
	.size	__func__.38222, 27
__func__.38222:
	.ascii	"rmnet_mux_command_complete\000"
	.space	1
	.type	CSWTCH.1600, %object
	.size	CSWTCH.1600, 12
CSWTCH.1600:
	.word	.LC1492
	.word	.LC1493
	.word	.LC1494
	.type	__func__.49790, %object
	.size	__func__.49790, 23
__func__.49790:
	.ascii	"grmnet_ctrl_smd_notify\000"
	.space	1
	.type	__func__.52067, %object
	.size	__func__.52067, 20
__func__.52067:
	.ascii	"ghsuart_ctrl_remove\000"
	.type	gsmd_ctrl_stats_ops, %object
	.size	gsmd_ctrl_stats_ops, 108
gsmd_ctrl_stats_ops:
	.space	8
	.word	gsmd_ctrl_read_stats
	.word	gsmd_ctrl_reset_stats
	.space	92
	.type	gctrl_stats_ops, %object
	.size	gctrl_stats_ops, 108
gctrl_stats_ops:
	.space	8
	.word	gctrl_read_stats
	.word	gctrl_reset_stats
	.space	92
	.type	ghsic_stats_ops, %object
	.size	ghsic_stats_ops, 108
ghsic_stats_ops:
	.space	8
	.word	ghsic_data_read_stats
	.word	ghsic_data_reset_stats
	.space	92
	.type	gdata_timestamp_ops, %object
	.size	gdata_timestamp_ops, 108
gdata_timestamp_ops:
	.space	8
	.word	show_timestamp
	.space	96
	.type	ghsuart_ctrl_stats_ops, %object
	.size	ghsuart_ctrl_stats_ops, 108
ghsuart_ctrl_stats_ops:
	.space	8
	.word	ghsuart_ctrl_read_stats
	.word	ghsuart_ctrl_reset_stats
	.space	92
	.type	ghsuart_data_stats_ops, %object
	.size	ghsuart_data_stats_ops, 108
ghsuart_data_stats_ops:
	.space	8
	.word	ghsuart_data_read_stats
	.word	ghsuart_data_reset_stats
	.space	92
	.type	debug_fdiag_ops, %object
	.size	debug_fdiag_ops, 108
debug_fdiag_ops:
	.space	8
	.word	debug_read_stats
	.word	debug_reset_stats
	.space	28
	.word	debug_open
	.space	60
	.type	__func__.37409, %object
	.size	__func__.37409, 24
__func__.37409:
	.ascii	"rmnet_sdio_data_rx_work\000"
	.type	__func__.49187, %object
	.size	__func__.49187, 23
__func__.49187:
	.ascii	"gbam_write_data_tohost\000"
	.space	1
	.type	__func__.49258, %object
	.size	__func__.49258, 19
__func__.49258:
	.ascii	"gbam_epin_complete\000"
	.space	1
	.type	__func__.51439, %object
	.size	__func__.51439, 19
__func__.51439:
	.ascii	"ghsic_data_receive\000"
	.space	1
	.type	__func__.58625, %object
	.size	__func__.58625, 15
__func__.58625:
	.ascii	"eth_start_xmit\000"
	.space	1
	.type	__func__.49816, %object
	.size	__func__.49816, 26
__func__.49816:
	.ascii	"grmnet_ctrl_smd_connect_w\000"
	.space	2
	.type	__func__.49306, %object
	.size	__func__.49306, 14
__func__.49306:
	.ascii	"gbam_start_rx\000"
	.space	2
	.type	__func__.49273, %object
	.size	__func__.49273, 20
__func__.49273:
	.ascii	"gbam_epout_complete\000"
	.type	__func__.50137, %object
	.size	__func__.50137, 17
__func__.50137:
	.ascii	"rmnet_ctrl_ioctl\000"
	.space	3
	.type	__func__.58348, %object
	.size	__func__.58348, 15
__func__.58348:
	.ascii	"rndis_qc_ioctl\000"
	.space	1
	.type	__func__.57694, %object
	.size	__func__.57694, 11
__func__.57694:
	.ascii	"mbim_ioctl\000"
	.space	1
	.type	__func__.38521, %object
	.size	__func__.38521, 24
__func__.38521:
	.ascii	"usb_rmnet_mux_ctrl_read\000"
	.type	__func__.50091, %object
	.size	__func__.50091, 16
__func__.50091:
	.ascii	"rmnet_ctrl_read\000"
	.type	__func__.53523, %object
	.size	__func__.53523, 15
__func__.53523:
	.ascii	"ccid_ctrl_read\000"
	.space	1
	.type	__func__.38545, %object
	.size	__func__.38545, 25
__func__.38545:
	.ascii	"usb_rmnet_mux_ctrl_write\000"
	.space	3
	.type	__func__.50120, %object
	.size	__func__.50120, 17
__func__.50120:
	.ascii	"rmnet_ctrl_write\000"
	.space	3
	.type	__func__.64829, %object
	.size	__func__.64829, 35
__func__.64829:
	.ascii	"usb_diag_update_pid_and_serial_num\000"
	.space	1
	.type	audio_hw_info, %object
	.size	audio_hw_info, 64
audio_hw_info:
	.word	65811
	.space	4
	.word	4
	.word	0
	.space	4
	.word	44100
	.word	44100
	.word	2
	.word	2
	.word	1048576
	.word	64
	.word	524288
	.word	2
	.word	1024
	.space	8
	.type	__func__.48641, %object
	.size	__func__.48641, 13
__func__.48641:
	.ascii	"gsmd_rx_push\000"
	.space	3
	.type	__func__.48437, %object
	.size	__func__.48437, 15
__func__.48437:
	.ascii	"gsdio_ch_probe\000"
	.space	1
	.type	__func__.48819, %object
	.size	__func__.48819, 15
__func__.48819:
	.ascii	"gsmd_ch_remove\000"
	.space	1
	.type	__func__.48805, %object
	.size	__func__.48805, 14
__func__.48805:
	.ascii	"gsmd_ch_probe\000"
	.space	2
	.type	__func__.49481, %object
	.size	__func__.49481, 19
__func__.49481:
	.ascii	"gbam_data_ch_probe\000"
	.space	1
	.type	__func__.49883, %object
	.size	__func__.49883, 26
__func__.49883:
	.ascii	"grmnet_ctrl_smd_ch_remove\000"
	.space	2
	.type	__func__.49868, %object
	.size	__func__.49868, 25
__func__.49868:
	.ascii	"grmnet_ctrl_smd_ch_probe\000"
	.space	3
	.type	__func__.51082, %object
	.size	__func__.51082, 18
__func__.51082:
	.ascii	"ghsic_ctrl_remove\000"
	.space	2
	.type	__func__.48769, %object
	.size	__func__.48769, 18
__func__.48769:
	.ascii	"gsmd_notify_modem\000"
	.space	2
	.type	__func__.48750, %object
	.size	__func__.48750, 18
__func__.48750:
	.ascii	"gsmd_connect_work\000"
	.space	2
	.type	__func__.49238, %object
	.size	__func__.49238, 22
__func__.49238:
	.ascii	"gbam_data_write_tobam\000"
	.space	2
	.type	__func__.49460, %object
	.size	__func__.49460, 21
__func__.49460:
	.ascii	"gbam2bam_resume_work\000"
	.space	3
	.type	__func__.57934, %object
	.size	__func__.57934, 25
__func__.57934:
	.ascii	"bam2bam_data_resume_work\000"
	.space	3
	.type	__func__.49451, %object
	.size	__func__.49451, 22
__func__.49451:
	.ascii	"gbam2bam_suspend_work\000"
	.space	2
	.type	__func__.57925, %object
	.size	__func__.57925, 26
__func__.57925:
	.ascii	"bam2bam_data_suspend_work\000"
	.space	2
	.type	__func__.49429, %object
	.size	__func__.49429, 22
__func__.49429:
	.ascii	"gbam2bam_connect_work\000"
	.space	2
	.type	__func__.57827, %object
	.size	__func__.57827, 26
__func__.57827:
	.ascii	"bam2bam_data_connect_work\000"
	.space	2
	.type	__func__.57775, %object
	.size	__func__.57775, 26
__func__.57775:
	.ascii	"bam_data_start_endless_rx\000"
	.space	2
	.type	__func__.57782, %object
	.size	__func__.57782, 26
__func__.57782:
	.ascii	"bam_data_start_endless_tx\000"
	.space	2
	.type	__func__.49471, %object
	.size	__func__.49471, 19
__func__.49471:
	.ascii	"gbam_peer_reset_cb\000"
	.space	1
	.type	__func__.57804, %object
	.size	__func__.57804, 23
__func__.57804:
	.ascii	"bam_data_peer_reset_cb\000"
	.space	1
	.type	__func__.58364, %object
	.size	__func__.58364, 14
__func__.58364:
	.ascii	"rndis_qc_init\000"
	.space	2
	.type	__func__.38566, %object
	.size	__func__.38566, 27
__func__.38566:
	.ascii	"rmnet_mux_ctrl_device_init\000"
	.space	1
	.type	__func__.38582, %object
	.size	__func__.38582, 20
__func__.38582:
	.ascii	"rmnet_smd_sdio_init\000"
	.type	rmnet_mux_svlte_debug_stats_ops, %object
	.size	rmnet_mux_svlte_debug_stats_ops, 108
rmnet_mux_svlte_debug_stats_ops:
	.space	8
	.word	rmnet_mux_read_stats
	.word	rmnet_mux_reset_stats
	.space	28
	.word	dbg_rmnet_mux_open
	.space	60
	.type	__func__.58369, %object
	.size	__func__.58369, 17
__func__.58369:
	.ascii	"rndis_qc_cleanup\000"
	.space	3
	.type	__func__.57722, %object
	.size	__func__.57722, 14
__func__.57722:
	.ascii	"fmbim_cleanup\000"
	.space	2
	.type	__func__.58573, %object
	.size	__func__.58573, 12
__func__.58573:
	.ascii	"tx_complete\000"
	.type	__func__.56836, %object
	.size	__func__.56836, 13
__func__.56836:
	.ascii	"rndis_rm_hdr\000"
	.space	3
	.type	CSWTCH.1601, %object
	.size	CSWTCH.1601, 12
CSWTCH.1601:
	.word	.LC1489
	.word	.LC1490
	.word	.LC1491
	.type	__func__.62945, %object
	.size	__func__.62945, 29
__func__.62945:
	.ascii	"conn_gadget_function_cleanup\000"
	.space	3
	.type	__func__.62936, %object
	.size	__func__.62936, 20
__func__.62936:
	.ascii	"conn_gadget_cleanup\000"
	.type	__func__.62941, %object
	.size	__func__.62941, 26
__func__.62941:
	.ascii	"conn_gadget_function_init\000"
	.space	2
	.type	__func__.62883, %object
	.size	__func__.62883, 18
__func__.62883:
	.ascii	"conn_gadget_setup\000"
	.space	2
	.type	__func__.62903, %object
	.size	__func__.62903, 34
__func__.62903:
	.ascii	"conn_gadget_usb_buffer_size_store\000"
	.space	2
	.type	__func__.64349, %object
	.size	__func__.64349, 20
__func__.64349:
	.ascii	"remote_wakeup_store\000"
	.type	__func__.64143, %object
	.size	__func__.64143, 27
__func__.64143:
	.ascii	"mass_storage_product_store\000"
	.space	1
	.type	__func__.64126, %object
	.size	__func__.64126, 26
__func__.64126:
	.ascii	"mass_storage_vendor_store\000"
	.space	2
	.type	__func__.63253, %object
	.size	__func__.63253, 13
__func__.63253:
	.ascii	"ncm_wrap_ntb\000"
	.space	3
	.type	__func__.63461, %object
	.size	__func__.63461, 24
__func__.63461:
	.ascii	"usb_gadget_connect_work\000"
	.type	__func__.55788, %object
	.size	__func__.55788, 16
__func__.55788:
	.ascii	"acc_ctrlrequest\000"
	.type	__func__.63338, %object
	.size	__func__.63338, 9
__func__.63338:
	.ascii	"ncm_work\000"
	.space	3
	.type	__func__.64721, %object
	.size	__func__.64721, 19
__func__.64721:
	.ascii	"android_usb_unbind\000"
	.space	1
	.type	__func__.64676, %object
	.size	__func__.64676, 11
__func__.64676:
	.ascii	"macos_show\000"
	.space	1
	.type	__func__.64666, %object
	.size	__func__.64666, 23
__func__.64666:
	.ascii	"ss_host_available_show\000"
	.space	1
	.type	__func__.64815, %object
	.size	__func__.64815, 21
__func__.64815:
	.ascii	"alloc_android_config\000"
	.space	3
	.type	__func__.64418, %object
	.size	__func__.64418, 16
__func__.64418:
	.ascii	"functions_store\000"
	.type	__func__.45634, %object
	.size	__func__.45634, 13
__func__.45634:
	.ascii	"send_message\000"
	.space	3
	.type	__func__.64709, %object
	.size	__func__.64709, 13
__func__.64709:
	.ascii	"android_bind\000"
	.space	3
	.type	__func__.64253, %object
	.size	__func__.64253, 23
__func__.64253:
	.ascii	"android_init_functions\000"
	.space	1
	.type	longname, %object
	.size	longname, 15
longname:
	.ascii	"Gadget Android\000"
	.space	1
	.type	__func__.63452, %object
	.size	__func__.63452, 13
__func__.63452:
	.ascii	"android_work\000"
	.space	3
	.type	__func__.45718, %object
	.size	__func__.45718, 18
__func__.45718:
	.ascii	"bulk_out_complete\000"
	.space	2
	.type	__func__.45710, %object
	.size	__func__.45710, 17
__func__.45710:
	.ascii	"bulk_in_complete\000"
	.space	3
	.type	__func__.54408, %object
	.size	__func__.54408, 18
__func__.54408:
	.ascii	"receive_file_work\000"
	.space	2
	.type	__func__.57671, %object
	.size	__func__.57671, 11
__func__.57671:
	.ascii	"mbim_write\000"
	.space	1
	.type	__func__.57396, %object
	.size	__func__.57396, 25
__func__.57396:
	.ascii	"fmbim_send_cpkt_response\000"
	.space	3
	.type	__func__.57384, %object
	.size	__func__.57384, 30
__func__.57384:
	.ascii	"fmbim_ctrl_response_available\000"
	.space	2
	.type	__func__.62152, %object
	.size	__func__.62152, 16
__func__.62152:
	.ascii	"f_audio_set_alt\000"
	.type	__func__.25500, %object
	.size	__func__.25500, 15
__func__.25500:
	.ascii	"composite_bind\000"
	.space	1
	.type	__func__.48374, %object
	.size	__func__.48374, 14
__func__.48374:
	.ascii	"gsdio_ctrl_wq\000"
	.space	2
	.type	__func__.38906, %object
	.size	__func__.38906, 15
__func__.38906:
	.ascii	"frmnet_connect\000"
	.space	1
	.type	__func__.62926, %object
	.size	__func__.62926, 36
__func__.62926:
	.ascii	"conn_gadget_in_max_packet_size_show\000"
	.type	__func__.62914, %object
	.size	__func__.62914, 37
__func__.62914:
	.ascii	"conn_gadget_out_max_packet_size_show\000"
	.space	3
	.type	__func__.62893, %object
	.size	__func__.62893, 33
__func__.62893:
	.ascii	"conn_gadget_usb_buffer_size_show\000"
	.space	3
	.type	__func__.63388, %object
	.size	__func__.63388, 22
__func__.63388:
	.ascii	"terminal_version_show\000"
	.space	2
	.type	__func__.37492, %object
	.size	__func__.37492, 29
__func__.37492:
	.ascii	"rmnet_sdio_set_modem_cbits_w\000"
	.space	3
	.type	__func__.50149, %object
	.size	__func__.50149, 16
__func__.50149:
	.ascii	"rmnet_ctrl_poll\000"
	.type	__func__.50996, %object
	.size	__func__.50996, 25
__func__.50996:
	.ascii	"ghsic_send_cbits_tomodem\000"
	.space	3
	.type	__func__.51010, %object
	.size	__func__.51010, 21
__func__.51010:
	.ascii	"ghsic_ctrl_connect_w\000"
	.space	3
	.type	__func__.52009, %object
	.size	__func__.52009, 27
__func__.52009:
	.ascii	"ghsuart_send_cbits_tomodem\000"
	.space	1
	.type	__func__.57892, %object
	.size	__func__.57892, 17
__func__.57892:
	.ascii	"bam_data_wake_cb\000"
	.space	3
	.type	__func__.53502, %object
	.size	__func__.53502, 15
__func__.53502:
	.ascii	"ccid_ctrl_open\000"
	.space	1
	.type	__func__.53402, %object
	.size	__func__.53402, 15
__func__.53402:
	.ascii	"ccid_bulk_open\000"
	.space	1
	.type	__func__.38913, %object
	.size	__func__.38913, 18
__func__.38913:
	.ascii	"frmnet_disconnect\000"
	.space	2
	.type	__func__.38820, %object
	.size	__func__.38820, 23
__func__.38820:
	.ascii	"frmnet_purge_responses\000"
	.space	1
	.type	__func__.38935, %object
	.size	__func__.38935, 20
__func__.38935:
	.ascii	"frmnet_cmd_complete\000"
	.type	__func__.48298, %object
	.size	__func__.48298, 20
__func__.48298:
	.ascii	"gsdio_read_complete\000"
	.type	__func__.51405, %object
	.size	__func__.51405, 25
__func__.51405:
	.ascii	"ghsic_data_unthrottle_tx\000"
	.space	3
	.type	__func__.52349, %object
	.size	__func__.52349, 25
__func__.52349:
	.ascii	"ghsuart_data_write_tomdm\000"
	.space	3
	.type	__func__.52393, %object
	.size	__func__.52393, 22
__func__.52393:
	.ascii	"ghsuart_data_start_rx\000"
	.space	2
	.type	__func__.52333, %object
	.size	__func__.52333, 26
__func__.52333:
	.ascii	"ghsuart_data_write_tohost\000"
	.space	2
	.type	__func__.37519, %object
	.size	__func__.37519, 22
__func__.37519:
	.ascii	"rmnet_close_sdio_work\000"
	.space	2
	.type	__func__.49401, %object
	.size	__func__.49401, 25
__func__.49401:
	.ascii	"gbam2bam_disconnect_work\000"
	.space	3
	.type	__func__.57813, %object
	.size	__func__.57813, 29
__func__.57813:
	.ascii	"bam2bam_data_disconnect_work\000"
	.space	3
	.type	__func__.63346, %object
	.size	__func__.63346, 18
__func__.63346:
	.ascii	"ncm_function_init\000"
	.space	2
	.type	__func__.51554, %object
	.size	__func__.51554, 21
__func__.51554:
	.ascii	"ghsic_data_connect_w\000"
	.space	3
	.type	__func__.52019, %object
	.size	__func__.52019, 23
__func__.52019:
	.ascii	"ghsuart_ctrl_connect_w\000"
	.space	1
	.type	__func__.52496, %object
	.size	__func__.52496, 23
__func__.52496:
	.ascii	"ghsuart_data_connect_w\000"
	.space	1
	.type	__func__.44555, %object
	.size	__func__.44555, 14
__func__.44555:
	.ascii	"ffs_epfile_io\000"
	.space	2
	.type	__func__.38852, %object
	.size	__func__.38852, 14
__func__.38852:
	.ascii	"frmnet_resume\000"
	.space	2
	.type	__func__.49657, %object
	.size	__func__.49657, 12
__func__.49657:
	.ascii	"gbam_resume\000"
	.type	rndis_proc_fops, %object
	.size	rndis_proc_fops, 108
rndis_proc_fops:
	.word	0
	.word	seq_lseek
	.word	seq_read
	.word	rndis_proc_write
	.space	28
	.word	rndis_proc_open
	.space	4
	.word	single_release
	.space	52
	.type	__func__.56907, %object
	.size	__func__.56907, 11
__func__.56907:
	.ascii	"rndis_init\000"
	.space	1
	.type	__func__.64279, %object
	.size	__func__.64279, 31
__func__.64279:
	.ascii	"android_bind_enabled_functions\000"
	.space	1
	.type	__func__.57707, %object
	.size	__func__.57707, 10
__func__.57707:
	.ascii	"mbim_init\000"
	.space	2
	.type	__func__.57594, %object
	.size	__func__.57594, 12
__func__.57594:
	.ascii	"mbim_resume\000"
	.type	__func__.57916, %object
	.size	__func__.57916, 16
__func__.57916:
	.ascii	"bam_data_resume\000"
	.type	__func__.57590, %object
	.size	__func__.57590, 13
__func__.57590:
	.ascii	"mbim_suspend\000"
	.space	3
	.type	__func__.57909, %object
	.size	__func__.57909, 17
__func__.57909:
	.ascii	"bam_data_suspend\000"
	.space	3
	.type	__func__.57863, %object
	.size	__func__.57863, 17
__func__.57863:
	.ascii	"bam_data_connect\000"
	.space	3
	.type	__func__.57850, %object
	.size	__func__.57850, 20
__func__.57850:
	.ascii	"bam_data_disconnect\000"
	.type	__func__.56554, %object
	.size	__func__.56554, 20
__func__.56554:
	.ascii	"gen_ndis_query_resp\000"
	.type	oid_supported_list, %object
	.size	oid_supported_list, 112
oid_supported_list:
	.word	65793
	.word	65794
	.word	65795
	.word	65796
	.word	65798
	.word	65799
	.word	65802
	.word	65803
	.word	65804
	.word	65805
	.word	65814
	.word	65806
	.word	65809
	.word	65812
	.word	66050
	.word	131329
	.word	131330
	.word	131331
	.word	131332
	.word	131333
	.word	16843009
	.word	16843010
	.word	16843011
	.word	16843013
	.word	16843012
	.word	16908545
	.word	16908546
	.word	16908547
	.type	__func__.53553, %object
	.size	__func__.53553, 22
__func__.53553:
	.ascii	"ccid_ctrl_device_init\000"
	.space	2
	.type	__func__.53566, %object
	.size	__func__.53566, 11
__func__.53566:
	.ascii	"ccid_setup\000"
	.space	1
	.type	__func__.53493, %object
	.size	__func__.53493, 22
__func__.53493:
	.ascii	"ccid_bulk_device_init\000"
	.space	2
	.type	__func__.52551, %object
	.size	__func__.52551, 33
__func__.52551:
	.ascii	"ghsuart_send_controlbits_tomodem\000"
	.space	3
	.type	__func__.52429, %object
	.size	__func__.52429, 23
__func__.52429:
	.ascii	"ghsuart_dunctrl_status\000"
	.space	1
	.type	__func__.49168, %object
	.size	__func__.49168, 20
__func__.49168:
	.ascii	"gbam_alloc_requests\000"
	.type	__func__.48592, %object
	.size	__func__.48592, 15
__func__.48592:
	.ascii	"gsmd_alloc_req\000"
	.space	1
	.type	gs_tty_ops, %object
	.size	gs_tty_ops, 124
gs_tty_ops:
	.space	12
	.word	gs_open
	.word	gs_close
	.space	8
	.word	gs_write
	.word	gs_put_char
	.word	gs_flush_chars
	.word	gs_write_room
	.word	gs_chars_in_buffer
	.space	16
	.word	gs_unthrottle
	.space	12
	.word	gs_break_ctl
	.space	16
	.word	gs_tiocmget
	.word	gs_tiocmset
	.space	16
	.type	__func__.47595, %object
	.size	__func__.47595, 14
__func__.47595:
	.ascii	"gserial_setup\000"
	.space	2
	.type	debug_adb_ops, %object
	.size	debug_adb_ops, 108
debug_adb_ops:
	.space	8
	.word	debug_read_status
	.space	32
	.word	serial_debug_open
	.space	60
	.type	debug_rst_ops, %object
	.size	debug_rst_ops, 108
debug_rst_ops:
	.space	12
	.word	debug_write_reset
	.space	28
	.word	serial_debug_open
	.space	60
	.type	__func__.47307, %object
	.size	__func__.47307, 12
__func__.47307:
	.ascii	"gs_start_tx\000"
	.type	__func__.47371, %object
	.size	__func__.47371, 18
__func__.47371:
	.ascii	"gs_write_complete\000"
	.space	2
	.type	__func__.38923, %object
	.size	__func__.38923, 26
__func__.38923:
	.ascii	"frmnet_send_cpkt_response\000"
	.space	2
	.type	__func__.50020, %object
	.size	__func__.50020, 34
__func__.50020:
	.ascii	"grmnet_ctrl_qti_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.49759, %object
	.size	__func__.49759, 34
__func__.49759:
	.ascii	"grmnet_ctrl_smd_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.47629, %object
	.size	__func__.47629, 16
__func__.47629:
	.ascii	"gserial_cleanup\000"
	.type	__func__.61919, %object
	.size	__func__.61919, 29
__func__.61919:
	.ascii	"f_audio_playback_ep_complete\000"
	.space	3
	.type	__func__.61943, %object
	.size	__func__.61943, 28
__func__.61943:
	.ascii	"f_audio_capture_ep_complete\000"
	.type	__func__.61961, %object
	.size	__func__.61961, 17
__func__.61961:
	.ascii	"f_audio_complete\000"
	.space	3
	.type	__func__.62702, %object
	.size	__func__.62702, 17
__func__.62702:
	.ascii	"conn_gadget_poll\000"
	.space	3
	.type	__func__.51592, %object
	.size	__func__.51592, 17
__func__.51592:
	.ascii	"ghsic_data_probe\000"
	.space	3
	.type	__func__.51069, %object
	.size	__func__.51069, 17
__func__.51069:
	.ascii	"ghsic_ctrl_probe\000"
	.space	3
	.type	__func__.51427, %object
	.size	__func__.51427, 24
__func__.51427:
	.ascii	"ghsic_data_write_tohost\000"
	.type	__func__.51458, %object
	.size	__func__.51458, 23
__func__.51458:
	.ascii	"ghsic_data_write_tomdm\000"
	.space	1
	.type	__func__.51508, %object
	.size	__func__.51508, 20
__func__.51508:
	.ascii	"ghsic_data_start_rx\000"
	.type	__func__.45750, %object
	.size	__func__.45750, 18
__func__.45750:
	.ascii	"start_in_transfer\000"
	.space	2
	.type	__func__.57185, %object
	.size	__func__.57185, 15
__func__.57185:
	.ascii	"ecm_qc_suspend\000"
	.space	1
	.type	__func__.57190, %object
	.size	__func__.57190, 14
__func__.57190:
	.ascii	"ecm_qc_resume\000"
	.space	2
	.type	__func__.58257, %object
	.size	__func__.58257, 17
__func__.58257:
	.ascii	"rndis_qc_suspend\000"
	.space	3
	.type	__func__.58262, %object
	.size	__func__.58262, 16
__func__.58262:
	.ascii	"rndis_qc_resume\000"
	.type	__func__.57870, %object
	.size	__func__.57870, 17
__func__.57870:
	.ascii	"bam_data_destroy\000"
	.space	3
	.type	ffs_sb_operations, %object
	.size	ffs_sb_operations, 104
ffs_sb_operations:
	.space	16
	.word	generic_delete_inode
	.space	24
	.word	simple_statfs
	.space	56
	.type	ffs_ep0_operations, %object
	.size	ffs_ep0_operations, 108
ffs_ep0_operations:
	.word	0
	.word	no_llseek
	.word	ffs_ep0_read
	.word	ffs_ep0_write
	.space	16
	.word	ffs_ep0_ioctl
	.space	8
	.word	ffs_ep0_open
	.space	4
	.word	ffs_ep0_release
	.space	52
	.type	__func__.62656, %object
	.size	__func__.62656, 24
__func__.62656:
	.ascii	"conn_gadget_complete_in\000"
	.type	__func__.62813, %object
	.size	__func__.62813, 18
__func__.62813:
	.ascii	"conn_gadget_ioctl\000"
	.space	2
	.type	__func__.62802, %object
	.size	__func__.62802, 37
__func__.62802:
	.ascii	"conn_gadget_bind_status_copy_to_user\000"
	.space	3
	.type	__func__.57630, %object
	.size	__func__.57630, 10
__func__.57630:
	.ascii	"mbim_read\000"
	.space	2
	.type	__func__.37433, %object
	.size	__func__.37433, 26
__func__.37433:
	.ascii	"rmnet_sdio_complete_epout\000"
	.space	2
	.type	__func__.56468, %object
	.size	__func__.56468, 12
__func__.56468:
	.ascii	"rndis_close\000"
	.type	__func__.56775, %object
	.size	__func__.56775, 23
__func__.56775:
	.ascii	"rndis_set_param_medium\000"
	.space	1
	.type	__func__.58275, %object
	.size	__func__.58275, 15
__func__.58275:
	.ascii	"rndis_qc_close\000"
	.space	1
	.type	__func__.57518, %object
	.size	__func__.57518, 11
__func__.57518:
	.ascii	"mbim_setup\000"
	.space	1
	.type	__func__.56462, %object
	.size	__func__.56462, 11
__func__.56462:
	.ascii	"rndis_open\000"
	.space	1
	.type	__func__.58269, %object
	.size	__func__.58269, 14
__func__.58269:
	.ascii	"rndis_qc_open\000"
	.space	2
	.type	__func__.61651, %object
	.size	__func__.61651, 20
__func__.61651:
	.ascii	"gaudio_open_streams\000"
	.type	__func__.61620, %object
	.size	__func__.61620, 24
__func__.61620:
	.ascii	"playback_prepare_params\000"
	.type	__func__.61632, %object
	.size	__func__.61632, 23
__func__.61632:
	.ascii	"capture_prepare_params\000"
	.space	1
	.type	__func__.61609, %object
	.size	__func__.61609, 16
__func__.61609:
	.ascii	"pcm_buffer_size\000"
	.type	__func__.61929, %object
	.size	__func__.61929, 21
__func__.61929:
	.ascii	"f_audio_capture_work\000"
	.space	3
	.type	__func__.61685, %object
	.size	__func__.61685, 16
__func__.61685:
	.ascii	"u_audio_capture\000"
	.type	__func__.61907, %object
	.size	__func__.61907, 22
__func__.61907:
	.ascii	"f_audio_playback_work\000"
	.space	2
	.type	__func__.61669, %object
	.size	__func__.61669, 17
__func__.61669:
	.ascii	"u_audio_playback\000"
	.space	3
	.type	f_midi_cin_length, %object
	.size	f_midi_cin_length, 16
f_midi_cin_length:
	.byte	0
	.byte	0
	.byte	2
	.byte	3
	.byte	3
	.byte	1
	.byte	2
	.byte	3
	.byte	3
	.byte	3
	.byte	3
	.byte	3
	.byte	2
	.byte	2
	.byte	3
	.byte	1
	.type	__func__.56754, %object
	.size	__func__.56754, 17
__func__.56754:
	.ascii	"rndis_deregister\000"
	.space	3
	.type	__func__.58294, %object
	.size	__func__.58294, 16
__func__.58294:
	.ascii	"rndis_qc_unbind\000"
	.type	__func__.58232, %object
	.size	__func__.58232, 15
__func__.58232:
	.ascii	"rndis_qc_setup\000"
	.space	1
	.type	__func__.58459, %object
	.size	__func__.58459, 10
__func__.58459:
	.ascii	"rx_submit\000"
	.space	2
	.type	__func__.58543, %object
	.size	__func__.58543, 13
__func__.58543:
	.ascii	"process_rx_w\000"
	.space	3
	.type	__func__.37355, %object
	.size	__func__.37355, 20
__func__.37355:
	.ascii	"rmnet_sdio_start_rx\000"
	.type	__func__.37580, %object
	.size	__func__.37580, 21
__func__.37580:
	.ascii	"rmnet_open_sdio_work\000"
	.space	3
	.type	__func__.49498, %object
	.size	__func__.49498, 20
__func__.49498:
	.ascii	"gbam_data_ch_remove\000"
	.type	__func__.52536, %object
	.size	__func__.52536, 20
__func__.52536:
	.ascii	"ghsuart_data_remove\000"
	.type	__func__.51601, %object
	.size	__func__.51601, 18
__func__.51601:
	.ascii	"ghsic_data_remove\000"
	.space	2
	.type	__func__.57433, %object
	.size	__func__.57433, 26
__func__.57433:
	.ascii	"mbim_reset_function_queue\000"
	.space	2
	.type	__func__.57478, %object
	.size	__func__.57478, 21
__func__.57478:
	.ascii	"mbim_notify_complete\000"
	.space	3
	.type	__func__.57463, %object
	.size	__func__.57463, 15
__func__.57463:
	.ascii	"mbim_do_notify\000"
	.space	1
	.type	__func__.38836, %object
	.size	__func__.38836, 15
__func__.38836:
	.ascii	"frmnet_suspend\000"
	.space	1
	.type	__func__.49648, %object
	.size	__func__.49648, 13
__func__.49648:
	.ascii	"gbam_suspend\000"
	.space	3
	.type	__func__.62751, %object
	.size	__func__.62751, 18
__func__.62751:
	.ascii	"conn_gadget_write\000"
	.space	2
	.type	__func__.45728, %object
	.size	__func__.45728, 10
__func__.45728:
	.ascii	"fsg_setup\000"
	.space	2
	.type	__func__.38370, %object
	.size	__func__.38370, 16
__func__.38370:
	.ascii	"transport_store\000"
	.type	__func__.37951, %object
	.size	__func__.37951, 24
__func__.37951:
	.ascii	"rmnet_mux_sdio_start_rx\000"
	.type	__func__.50007, %object
	.size	__func__.50007, 24
__func__.50007:
	.ascii	"rmnet_ctrl_queue_notify\000"
	.type	__func__.25464, %object
	.size	__func__.25464, 21
__func__.25464:
	.ascii	"composite_disconnect\000"
	.space	3
	.type	__func__.49414, %object
	.size	__func__.49414, 18
__func__.49414:
	.ascii	"gbam_connect_work\000"
	.space	2
	.type	__func__.49355, %object
	.size	__func__.49355, 14
__func__.49355:
	.ascii	"gbam_start_io\000"
	.space	2
	.type	__func__.53465, %object
	.size	__func__.53465, 16
__func__.53465:
	.ascii	"ccid_bulk_write\000"
	.type	__func__.48421, %object
	.size	__func__.48421, 16
__func__.48421:
	.ascii	"gsdio_ch_remove\000"
	.type	__func__.48391, %object
	.size	__func__.48391, 24
__func__.48391:
	.ascii	"gsdio_ctrl_modem_status\000"
	.type	__func__.62665, %object
	.size	__func__.62665, 25
__func__.62665:
	.ascii	"conn_gadget_complete_out\000"
	.space	3
	.type	__func__.53430, %object
	.size	__func__.53430, 15
__func__.53430:
	.ascii	"ccid_bulk_read\000"
	.space	1
	.type	__func__.25113, %object
	.size	__func__.25113, 11
__func__.25113:
	.ascii	"config_buf\000"
	.space	1
	.type	__func__.25190, %object
	.size	__func__.25190, 11
__func__.25190:
	.ascii	"set_config\000"
	.space	1
	.type	__func__.25392, %object
	.size	__func__.25392, 16
__func__.25392:
	.ascii	"composite_setup\000"
	.type	__func__.57213, %object
	.size	__func__.57213, 12
__func__.57213:
	.ascii	"ecm_qc_bind\000"
	.type	__func__.57603, %object
	.size	__func__.57603, 10
__func__.57603:
	.ascii	"mbim_bind\000"
	.space	2
	.type	__func__.53390, %object
	.size	__func__.53390, 19
__func__.53390:
	.ascii	"ccid_function_bind\000"
	.space	1
	.type	__func__.39003, %object
	.size	__func__.39003, 12
__func__.39003:
	.ascii	"frmnet_bind\000"
	.type	__func__.56745, %object
	.size	__func__.56745, 15
__func__.56745:
	.ascii	"rndis_register\000"
	.space	1
	.type	__func__.56768, %object
	.size	__func__.56768, 23
__func__.56768:
	.ascii	"rndis_set_param_vendor\000"
	.space	1
	.type	__func__.56781, %object
	.size	__func__.56781, 23
__func__.56781:
	.ascii	"rndis_set_max_pkt_xfer\000"
	.space	1
	.type	__func__.56787, %object
	.size	__func__.56787, 31
__func__.56787:
	.ascii	"rndis_set_pkt_alignment_factor\000"
	.space	1
	.type	__func__.58286, %object
	.size	__func__.58286, 14
__func__.58286:
	.ascii	"rndis_qc_bind\000"
	.space	2
	.type	__func__.61692, %object
	.size	__func__.61692, 30
__func__.61692:
	.ascii	"u_audio_get_playback_channels\000"
	.space	2
	.type	__func__.61702, %object
	.size	__func__.61702, 29
__func__.61702:
	.ascii	"u_audio_get_capture_channels\000"
	.space	3
	.type	__func__.61697, %object
	.size	__func__.61697, 26
__func__.61697:
	.ascii	"u_audio_get_playback_rate\000"
	.space	2
	.type	__func__.61707, %object
	.size	__func__.61707, 25
__func__.61707:
	.ascii	"u_audio_get_capture_rate\000"
	.space	3
	.type	__func__.62185, %object
	.size	__func__.62185, 13
__func__.62185:
	.ascii	"f_audio_bind\000"
	.space	3
	.type	__func__.37592, %object
	.size	__func__.37592, 19
__func__.37592:
	.ascii	"rmnet_sdio_set_alt\000"
	.space	1
	.type	__func__.53366, %object
	.size	__func__.53366, 22
__func__.53366:
	.ascii	"ccid_function_set_alt\000"
	.space	2
	.type	__func__.62950, %object
	.size	__func__.62950, 33
__func__.62950:
	.ascii	"conn_gadget_function_bind_config\000"
	.space	3
	.type	__func__.63877, %object
	.size	__func__.63877, 26
__func__.63877:
	.ascii	"qdss_function_bind_config\000"
	.space	2
	.type	__func__.63638, %object
	.size	__func__.63638, 25
__func__.63638:
	.ascii	"acm_function_bind_config\000"
	.space	3
	.type	__func__.25268, %object
	.size	__func__.25268, 18
__func__.25268:
	.ascii	"usb_remove_config\000"
	.space	2
	.type	__func__.53118, %object
	.size	__func__.53118, 12
__func__.53118:
	.ascii	"adb_release\000"
	.type	__func__.63597, %object
	.size	__func__.63597, 20
__func__.63597:
	.ascii	"adb_closed_callback\000"
	.type	__func__.63557, %object
	.size	__func__.63557, 27
__func__.63557:
	.ascii	"functionfs_closed_callback\000"
	.space	1
	.type	__func__.44701, %object
	.size	__func__.44701, 13
__func__.44701:
	.ascii	"ffs_data_put\000"
	.space	3
	.type	__func__.64847, %object
	.size	__func__.64847, 14
__func__.64847:
	.ascii	"android_probe\000"
	.space	2
	.type	__func__.63402, %object
	.size	__func__.63402, 26
__func__.63402:
	.ascii	"create_terminal_attribute\000"
	.space	2
	.type	__func__.25547, %object
	.size	__func__.25547, 29
__func__.25547:
	.ascii	"usb_composite_setup_continue\000"
	.space	3
	.type	__func__.46221, %object
	.size	__func__.46221, 17
__func__.46221:
	.ascii	"handle_exception\000"
	.space	3
	.type	__func__.46169, %object
	.size	__func__.46169, 17
__func__.46169:
	.ascii	"get_next_command\000"
	.space	3
	.type	__func__.45641, %object
	.size	__func__.45641, 14
__func__.45641:
	.ascii	"do_timer_stop\000"
	.space	2
	.type	__func__.45645, %object
	.size	__func__.45645, 15
__func__.45645:
	.ascii	"do_timer_reset\000"
	.space	1
	.type	__func__.45652, %object
	.size	__func__.45652, 17
__func__.45652:
	.ascii	"get_version_info\000"
	.space	3
	.type	__func__.46055, %object
	.size	__func__.46055, 13
__func__.46055:
	.ascii	"finish_reply\000"
	.space	3
	.type	__func__.26044, %object
	.size	__func__.26044, 14
__func__.26044:
	.ascii	"usb_diag_read\000"
	.space	2
	.type	__func__.26062, %object
	.size	__func__.26062, 15
__func__.26062:
	.ascii	"usb_diag_write\000"
	.space	1
	.type	__func__.63860, %object
	.size	__func__.63860, 26
__func__.63860:
	.ascii	"diag_function_bind_config\000"
	.space	2
	.type	__func__.30995, %object
	.size	__func__.30995, 25
__func__.30995:
	.ascii	"usb_qdss_disconnect_work\000"
	.space	3
	.type	rmnet_smd_debug_stats_ops, %object
	.size	rmnet_smd_debug_stats_ops, 108
rmnet_smd_debug_stats_ops:
	.space	8
	.word	rmnet_smd_debug_read_stats
	.word	rmnet_smd_debug_reset_stats
	.space	28
	.word	rmnet_smd_debug_open
	.space	60
	.type	debug_rmnet_sdio_stats_ops, %object
	.size	debug_rmnet_sdio_stats_ops, 108
debug_rmnet_sdio_stats_ops:
	.space	8
	.word	rmnet_sdio_read_stats
	.word	rmnet_sdio_reset_stats
	.space	28
	.word	debug_rmnet_sdio_open
	.space	60
	.type	__func__.47409, %object
	.size	__func__.47409, 12
__func__.47409:
	.ascii	"gs_start_io\000"
	.type	__func__.48207, %object
	.size	__func__.48207, 16
__func__.48207:
	.ascii	"gsdio_alloc_req\000"
	.type	__func__.48230, %object
	.size	__func__.48230, 21
__func__.48230:
	.ascii	"gsdio_alloc_requests\000"
	.space	3
	.type	__func__.48734, %object
	.size	__func__.48734, 12
__func__.48734:
	.ascii	"gsmd_notify\000"
	.type	__func__.48706, %object
	.size	__func__.48706, 14
__func__.48706:
	.ascii	"gsmd_start_io\000"
	.space	2
	.type	__func__.48605, %object
	.size	__func__.48605, 20
__func__.48605:
	.ascii	"gsmd_alloc_requests\000"
	.type	__func__.48241, %object
	.size	__func__.48241, 15
__func__.48241:
	.ascii	"gsdio_start_rx\000"
	.space	1
	.type	__func__.48262, %object
	.size	__func__.48262, 12
__func__.48262:
	.ascii	"gsdio_write\000"
	.type	__func__.48277, %object
	.size	__func__.48277, 14
__func__.48277:
	.ascii	"gsdio_rx_push\000"
	.space	2
	.type	__func__.48324, %object
	.size	__func__.48324, 19
__func__.48324:
	.ascii	"gsdio_read_pending\000"
	.space	1
	.type	__func__.48337, %object
	.size	__func__.48337, 14
__func__.48337:
	.ascii	"gsdio_tx_pull\000"
	.space	2
	.type	__func__.48358, %object
	.size	__func__.48358, 15
__func__.48358:
	.ascii	"gsdio_start_io\000"
	.space	1
	.type	__func__.48367, %object
	.size	__func__.48367, 16
__func__.48367:
	.ascii	"gsdio_port_free\000"
	.type	__func__.48398, %object
	.size	__func__.48398, 16
__func__.48398:
	.ascii	"gsdio_ch_notify\000"
	.type	__func__.48449, %object
	.size	__func__.48449, 17
__func__.48449:
	.ascii	"gsdio_port_alloc\000"
	.space	3
	.type	__func__.48464, %object
	.size	__func__.48464, 14
__func__.48464:
	.ascii	"gsdio_connect\000"
	.space	2
	.type	__func__.48475, %object
	.size	__func__.48475, 17
__func__.48475:
	.ascii	"gsdio_disconnect\000"
	.space	3
	.type	__func__.48533, %object
	.size	__func__.48533, 12
__func__.48533:
	.ascii	"gsdio_setup\000"
	.type	debug_gsdio_ops, %object
	.size	debug_gsdio_ops, 108
debug_gsdio_ops:
	.space	8
	.word	debug_sdio_read_stats
	.word	debug_sdio_reset_stats
	.space	28
	.word	debug_sdio_open
	.space	60
	.type	__func__.48779, %object
	.size	__func__.48779, 13
__func__.48779:
	.ascii	"gsmd_connect\000"
	.space	3
	.type	__func__.48790, %object
	.size	__func__.48790, 16
__func__.48790:
	.ascii	"gsmd_disconnect\000"
	.type	__func__.48891, %object
	.size	__func__.48891, 11
__func__.48891:
	.ascii	"gsmd_setup\000"
	.space	1
	.type	__func__.48839, %object
	.size	__func__.48839, 16
__func__.48839:
	.ascii	"gsmd_port_alloc\000"
	.type	debug_gsmd_ops, %object
	.size	debug_gsmd_ops, 108
debug_gsmd_ops:
	.space	8
	.word	debug_smd_read_stats
	.word	debug_smd_reset_stats
	.space	28
	.word	debug_smd_open
	.space	60
	.type	__func__.49206, %object
	.size	__func__.49206, 18
__func__.49206:
	.ascii	"gbam_data_recv_cb\000"
	.space	2
	.type	__func__.49221, %object
	.size	__func__.49221, 21
__func__.49221:
	.ascii	"gbam_data_write_done\000"
	.space	3
	.type	__func__.49596, %object
	.size	__func__.49596, 16
__func__.49596:
	.ascii	"gbam_disconnect\000"
	.type	__func__.49612, %object
	.size	__func__.49612, 13
__func__.49612:
	.ascii	"gbam_connect\000"
	.space	3
	.type	__func__.49623, %object
	.size	__func__.49623, 11
__func__.49623:
	.ascii	"gbam_setup\000"
	.space	1
	.type	__func__.49527, %object
	.size	__func__.49527, 16
__func__.49527:
	.ascii	"gbam_port_alloc\000"
	.type	__func__.49540, %object
	.size	__func__.49540, 20
__func__.49540:
	.ascii	"gbam2bam_port_alloc\000"
	.type	gbam_stats_ops, %object
	.size	gbam_stats_ops, 108
gbam_stats_ops:
	.space	8
	.word	gbam_read_stats
	.word	gbam_reset_stats
	.space	92
	.type	__func__.49829, %object
	.size	__func__.49829, 18
__func__.49829:
	.ascii	"gsmd_ctrl_connect\000"
	.space	2
	.type	__func__.49851, %object
	.size	__func__.49851, 21
__func__.49851:
	.ascii	"gsmd_ctrl_disconnect\000"
	.space	3
	.type	__func__.49918, %object
	.size	__func__.49918, 16
__func__.49918:
	.ascii	"gsmd_ctrl_setup\000"
	.type	ctrl_names, %object
	.size	ctrl_names, 24
ctrl_names:
	.word	.LC1731
	.word	.LC1732
	.word	.LC1733
	.word	.LC1732
	.space	8
	.type	__func__.49907, %object
	.size	__func__.49907, 27
__func__.49907:
	.ascii	"grmnet_ctrl_smd_port_alloc\000"
	.space	1
	.type	__func__.50038, %object
	.size	__func__.50038, 18
__func__.50038:
	.ascii	"gqti_ctrl_connect\000"
	.space	2
	.type	__func__.50049, %object
	.size	__func__.50049, 21
__func__.50049:
	.ascii	"gqti_ctrl_disconnect\000"
	.space	3
	.type	__func__.51023, %object
	.size	__func__.51023, 19
__func__.51023:
	.ascii	"ghsic_ctrl_connect\000"
	.space	1
	.type	__func__.51042, %object
	.size	__func__.51042, 22
__func__.51042:
	.ascii	"ghsic_ctrl_disconnect\000"
	.space	2
	.type	__func__.51109, %object
	.size	__func__.51109, 25
__func__.51109:
	.ascii	"ghsic_ctrl_set_port_name\000"
	.space	3
	.type	__func__.51118, %object
	.size	__func__.51118, 17
__func__.51118:
	.ascii	"ghsic_ctrl_setup\000"
	.space	3
	.type	__func__.51099, %object
	.size	__func__.51099, 17
__func__.51099:
	.ascii	"gctrl_port_alloc\000"
	.space	3
	.type	__func__.51629, %object
	.size	__func__.51629, 22
__func__.51629:
	.ascii	"ghsic_data_disconnect\000"
	.space	2
	.type	__func__.51646, %object
	.size	__func__.51646, 19
__func__.51646:
	.ascii	"ghsic_data_connect\000"
	.space	1
	.type	__func__.51781, %object
	.size	__func__.51781, 25
__func__.51781:
	.ascii	"ghsic_data_set_port_name\000"
	.space	3
	.type	__func__.51790, %object
	.size	__func__.51790, 17
__func__.51790:
	.ascii	"ghsic_data_setup\000"
	.space	3
	.type	__func__.51614, %object
	.size	__func__.51614, 22
__func__.51614:
	.ascii	"ghsic_data_port_alloc\000"
	.space	2
	.type	__func__.52028, %object
	.size	__func__.52028, 21
__func__.52028:
	.ascii	"ghsuart_ctrl_connect\000"
	.space	3
	.type	__func__.52046, %object
	.size	__func__.52046, 24
__func__.52046:
	.ascii	"ghsuart_ctrl_disconnect\000"
	.type	__func__.52097, %object
	.size	__func__.52097, 19
__func__.52097:
	.ascii	"ghsuart_ctrl_setup\000"
	.space	1
	.type	__func__.52084, %object
	.size	__func__.52084, 24
__func__.52084:
	.ascii	"ghsuart_ctrl_port_alloc\000"
	.type	CSWTCH.1602, %object
	.size	CSWTCH.1602, 36
CSWTCH.1602:
	.word	.LC1480
	.word	.LC1481
	.word	.LC1482
	.word	.LC1483
	.word	.LC1484
	.word	.LC1485
	.word	.LC1486
	.word	.LC1487
	.word	.LC1488
	.type	__func__.52577, %object
	.size	__func__.52577, 24
__func__.52577:
	.ascii	"ghsuart_data_disconnect\000"
	.type	__func__.38866, %object
	.size	__func__.38866, 15
__func__.38866:
	.ascii	"frmnet_disable\000"
	.space	1
	.type	__func__.38791, %object
	.size	__func__.38791, 23
__func__.38791:
	.ascii	"gport_rmnet_disconnect\000"
	.space	1
	.type	__func__.52597, %object
	.size	__func__.52597, 21
__func__.52597:
	.ascii	"ghsuart_data_connect\000"
	.space	3
	.type	__func__.38877, %object
	.size	__func__.38877, 15
__func__.38877:
	.ascii	"frmnet_set_alt\000"
	.space	1
	.type	__func__.38768, %object
	.size	__func__.38768, 20
__func__.38768:
	.ascii	"gport_rmnet_connect\000"
	.type	__func__.52679, %object
	.size	__func__.52679, 19
__func__.52679:
	.ascii	"ghsuart_data_setup\000"
	.space	1
	.type	ghsuart_data_names, %object
	.size	ghsuart_data_names, 8
ghsuart_data_names:
	.word	.LC1723
	.word	.LC1724
	.type	__func__.52560, %object
	.size	__func__.52560, 24
__func__.52560:
	.ascii	"ghsuart_data_port_alloc\000"
	.type	__func__.39038, %object
	.size	__func__.39038, 17
__func__.39038:
	.ascii	"frmnet_init_port\000"
	.space	3
	.type	__func__.63704, %object
	.size	__func__.63704, 27
__func__.63704:
	.ascii	"rmnet_function_bind_config\000"
	.space	1
	.type	__func__.38741, %object
	.size	__func__.38741, 18
__func__.38741:
	.ascii	"rmnet_gport_setup\000"
	.space	2
	.type	__func__.39017, %object
	.size	__func__.39017, 19
__func__.39017:
	.ascii	"frmnet_bind_config\000"
	.space	1
	.type	__func__.56722, %object
	.size	__func__.56722, 17
__func__.56722:
	.ascii	"rndis_msg_parser\000"
	.space	3
	.type	__func__.56634, %object
	.size	__func__.56634, 18
__func__.56634:
	.ascii	"gen_ndis_set_resp\000"
	.space	2
	.type	__func__.56412, %object
	.size	__func__.56412, 23
__func__.56412:
	.ascii	"rndis_command_complete\000"
	.space	1
	.type	__func__.58210, %object
	.size	__func__.58210, 26
__func__.58210:
	.ascii	"rndis_qc_command_complete\000"
	.space	2
	.type	__func__.56761, %object
	.size	__func__.56761, 20
__func__.56761:
	.ascii	"rndis_set_param_dev\000"
	.type	__func__.57411, %object
	.size	__func__.57411, 22
__func__.57411:
	.ascii	"mbim_configure_params\000"
	.space	2
	.type	__func__.57586, %object
	.size	__func__.57586, 13
__func__.57586:
	.ascii	"mbim_disable\000"
	.space	3
	.type	__func__.57424, %object
	.size	__func__.57424, 20
__func__.57424:
	.ascii	"mbim_bam_disconnect\000"
	.type	__func__.57574, %object
	.size	__func__.57574, 13
__func__.57574:
	.ascii	"mbim_set_alt\000"
	.space	3
	.type	__func__.57420, %object
	.size	__func__.57420, 17
__func__.57420:
	.ascii	"mbim_bam_connect\000"
	.space	3
	.type	__func__.57877, %object
	.size	__func__.57877, 15
__func__.57877:
	.ascii	"bam_data_setup\000"
	.space	1
	.type	__func__.57842, %object
	.size	__func__.57842, 24
__func__.57842:
	.ascii	"bam2bam_data_port_alloc\000"
	.type	__func__.57095, %object
	.size	__func__.57095, 17
__func__.57095:
	.ascii	"ecm_qc_bam_setup\000"
	.space	3
	.type	__func__.57228, %object
	.size	__func__.57228, 19
__func__.57228:
	.ascii	"ecm_qc_bind_config\000"
	.space	1
	.type	__func__.58845, %object
	.size	__func__.58845, 19
__func__.58845:
	.ascii	"gether_qc_get_macs\000"
	.space	1
	.type	__func__.57618, %object
	.size	__func__.57618, 17
__func__.57618:
	.ascii	"mbim_bind_config\000"
	.space	3
	.type	__func__.57405, %object
	.size	__func__.57405, 15
__func__.57405:
	.ascii	"mbim_bam_setup\000"
	.space	1
	.type	__func__.63806, %object
	.size	__func__.63806, 26
__func__.63806:
	.ascii	"mbim_function_bind_config\000"
	.space	2
	.type	__func__.58155, %object
	.size	__func__.58155, 19
__func__.58155:
	.ascii	"rndis_qc_bam_setup\000"
	.space	1
	.type	__func__.58314, %object
	.size	__func__.58314, 28
__func__.58314:
	.ascii	"rndis_qc_bind_config_vendor\000"
	.type	eth_netdev_ops, %object
	.size	eth_netdev_ops, 136
eth_netdev_ops:
	.space	8
	.word	eth_open
	.word	eth_stop
	.word	eth_start_xmit
	.space	12
	.word	eth_mac_addr
	.word	eth_validate_addr
	.space	8
	.word	ueth_change_mtu
	.space	84
	.type	ops, %object
	.size	ops, 164
ops:
	.space	8
	.word	eth_get_drvinfo
	.space	28
	.word	ethtool_op_get_link
	.space	120
	.type	__func__.63946, %object
	.size	__func__.63946, 27
__func__.63946:
	.ascii	"rndis_function_bind_config\000"
	.space	1
	.type	__func__.64062, %object
	.size	__func__.64062, 25
__func__.64062:
	.ascii	"ecm_function_bind_config\000"
	.space	3
	.type	__func__.58724, %object
	.size	__func__.58724, 15
__func__.58724:
	.ascii	"gether_connect\000"
	.space	1
	.type	__func__.63219, %object
	.size	__func__.63219, 12
__func__.63219:
	.ascii	"ncm_set_alt\000"
	.type	eth_qc_netdev_ops, %object
	.size	eth_qc_netdev_ops, 136
eth_qc_netdev_ops:
	.space	8
	.word	eth_qc_open
	.word	eth_qc_stop
	.word	eth_qc_start_xmit
	.space	12
	.word	eth_mac_addr
	.word	eth_validate_addr
	.space	8
	.word	ueth_qc_change_mtu
	.space	84
	.type	qc_ethtool_ops, %object
	.size	qc_ethtool_ops, 164
qc_ethtool_ops:
	.space	8
	.word	eth_qc_get_drvinfo
	.space	28
	.word	ethtool_op_get_link
	.space	120
	.type	__func__.63953, %object
	.size	__func__.63953, 30
__func__.63953:
	.ascii	"rndis_qc_function_bind_config\000"
	.space	2
	.type	__func__.63755, %object
	.size	__func__.63755, 28
__func__.63755:
	.ascii	"ecm_qc_function_bind_config\000"
	.type	__func__.57111, %object
	.size	__func__.57111, 22
__func__.57111:
	.ascii	"ecm_qc_bam_disconnect\000"
	.space	2
	.type	__func__.57105, %object
	.size	__func__.57105, 19
__func__.57105:
	.ascii	"ecm_qc_bam_connect\000"
	.space	1
	.type	__func__.58252, %object
	.size	__func__.58252, 17
__func__.58252:
	.ascii	"rndis_qc_disable\000"
	.space	3
	.type	__func__.58169, %object
	.size	__func__.58169, 24
__func__.58169:
	.ascii	"rndis_qc_bam_disconnect\000"
	.type	__func__.58164, %object
	.size	__func__.58164, 21
__func__.58164:
	.ascii	"rndis_qc_bam_connect\000"
	.space	3
	.type	__func__.61714, %object
	.size	__func__.61714, 20
__func__.61714:
	.ascii	"gaudio_open_snd_dev\000"
	.type	__func__.61639, %object
	.size	__func__.61639, 27
__func__.61639:
	.ascii	"playback_default_hw_params\000"
	.space	1
	.type	__func__.61645, %object
	.size	__func__.61645, 26
__func__.61645:
	.ascii	"capture_default_hw_params\000"
	.space	2
	.type	__func__.61727, %object
	.size	__func__.61727, 13
__func__.61727:
	.ascii	"gaudio_setup\000"
	.space	3
	.type	__func__.61722, %object
	.size	__func__.61722, 21
__func__.61722:
	.ascii	"gaudio_close_snd_dev\000"
	.space	3
	.type	__func__.62214, %object
	.size	__func__.62214, 18
__func__.62214:
	.ascii	"audio_bind_config\000"
	.space	2
	.type	__func__.62627, %object
	.size	__func__.62627, 27
__func__.62627:
	.ascii	"conn_gadget_request_ep_out\000"
	.space	1
	.type	__func__.62859, %object
	.size	__func__.62859, 29
__func__.62859:
	.ascii	"conn_gadget_function_set_alt\000"
	.space	3
	.type	__func__.62767, %object
	.size	__func__.62767, 17
__func__.62767:
	.ascii	"conn_gadget_open\000"
	.space	3
	.type	__func__.62716, %object
	.size	__func__.62716, 17
__func__.62716:
	.ascii	"conn_gadget_read\000"
	.space	3
	.type	__func__.62686, %object
	.size	__func__.62686, 34
__func__.62686:
	.ascii	"conn_gadget_create_bulk_endpoints\000"
	.space	2
	.type	__func__.62841, %object
	.size	__func__.62841, 28
__func__.62841:
	.ascii	"conn_gadget_function_unbind\000"
	.type	__func__.63358, %object
	.size	__func__.63358, 25
__func__.63358:
	.ascii	"ncm_function_bind_config\000"
	.space	3
	.type	__func__.63373, %object
	.size	__func__.63373, 13
__func__.63373:
	.ascii	"is_ncm_ready\000"
	.space	3
	.type	__func__.63377, %object
	.size	__func__.63377, 26
__func__.63377:
	.ascii	"set_ncm_device_descriptor\000"
	.space	2
	.type	__func__.63381, %object
	.size	__func__.63381, 14
__func__.63381:
	.ascii	"set_ncm_ready\000"
	.space	2
	.type	__func__.63396, %object
	.size	__func__.63396, 23
__func__.63396:
	.ascii	"terminal_version_store\000"
	.space	1
	.type	__func__.63410, %object
	.size	__func__.63410, 22
__func__.63410:
	.ascii	"terminal_ctrl_request\000"
	.space	2
	.type	__func__.63466, %object
	.size	__func__.63466, 33
__func__.63466:
	.ascii	"schedule_usb_gadget_connect_work\000"
	.space	3
	.type	__func__.64656, %object
	.size	__func__.64656, 14
__func__.64656:
	.ascii	"usb30en_store\000"
	.space	2
	.type	__func__.63479, %object
	.size	__func__.63479, 15
__func__.63479:
	.ascii	"android_enable\000"
	.space	1
	.type	__func__.64459, %object
	.size	__func__.64459, 13
__func__.64459:
	.ascii	"enable_store\000"
	.space	3
	.type	__func__.53111, %object
	.size	__func__.53111, 9
__func__.53111:
	.ascii	"adb_open\000"
	.space	3
	.type	ffs_epfile_operations, %object
	.size	ffs_epfile_operations, 108
ffs_epfile_operations:
	.word	0
	.word	no_llseek
	.word	ffs_epfile_read
	.word	ffs_epfile_write
	.space	16
	.word	ffs_epfile_ioctl
	.space	8
	.word	ffs_epfile_open
	.space	4
	.word	ffs_epfile_release
	.space	52
	.type	__func__.63551, %object
	.size	__func__.63551, 26
__func__.63551:
	.ascii	"functionfs_ready_callback\000"
	.space	2
	.type	__func__.44453, %object
	.size	__func__.44453, 16
__func__.44453:
	.ascii	"__ffs_ep0_stall\000"
	.type	__func__.44832, %object
	.size	__func__.44832, 12
__func__.44832:
	.ascii	"ffs_do_desc\000"
	.type	__func__.38118, %object
	.size	__func__.38118, 27
__func__.38118:
	.ascii	"rmnet_mux_smd_data_rx_tlet\000"
	.space	1
	.type	__func__.38095, %object
	.size	__func__.38095, 27
__func__.38095:
	.ascii	"rmnet_mux_smd_data_tx_tlet\000"
	.space	1
	.type	__func__.38244, %object
	.size	__func__.38244, 16
__func__.38244:
	.ascii	"rmnet_mux_setup\000"
	.type	__func__.38572, %object
	.size	__func__.38572, 28
__func__.38572:
	.ascii	"rmnet_smd_sdio_function_add\000"
	.type	__func__.31143, %object
	.size	__func__.31143, 13
__func__.31143:
	.ascii	"qdss_cleanup\000"
	.space	3
	.type	__func__.30971, %object
	.size	__func__.30971, 10
__func__.30971:
	.ascii	"qdss_bind\000"
	.space	2
	.type	__func__.30961, %object
	.size	__func__.30961, 11
__func__.30961:
	.ascii	"clear_desc\000"
	.space	1
	.type	__func__.30955, %object
	.size	__func__.30955, 10
__func__.30955:
	.ascii	"clear_eps\000"
	.space	2
	.type	__func__.30980, %object
	.size	__func__.30980, 12
__func__.30980:
	.ascii	"qdss_unbind\000"
	.type	__func__.31025, %object
	.size	__func__.31025, 13
__func__.31025:
	.ascii	"qdss_set_alt\000"
	.space	3
	.type	__func__.30986, %object
	.size	__func__.30986, 17
__func__.30986:
	.ascii	"qdss_eps_disable\000"
	.space	3
	.type	__func__.31002, %object
	.size	__func__.31002, 13
__func__.31002:
	.ascii	"qdss_disable\000"
	.space	3
	.type	__func__.31014, %object
	.size	__func__.31014, 22
__func__.31014:
	.ascii	"usb_qdss_connect_work\000"
	.space	2
	.type	__func__.30850, %object
	.size	__func__.30850, 25
__func__.30850:
	.ascii	"set_qdss_data_connection\000"
	.space	3
	.type	__func__.31037, %object
	.size	__func__.31037, 17
__func__.31037:
	.ascii	"qdss_bind_config\000"
	.space	3
	.type	__func__.53057, %object
	.size	__func__.53057, 9
__func__.53057:
	.ascii	"adb_read\000"
	.space	3
	.type	__func__.53092, %object
	.size	__func__.53092, 10
__func__.53092:
	.ascii	"adb_write\000"
	.space	2
	.type	__func__.53036, %object
	.size	__func__.53036, 26
__func__.53036:
	.ascii	"adb_create_bulk_endpoints\000"
	.space	2
	.type	__func__.53130, %object
	.size	__func__.53130, 18
__func__.53130:
	.ascii	"adb_function_bind\000"
	.space	2
	.type	__func__.53150, %object
	.size	__func__.53150, 21
__func__.53150:
	.ascii	"adb_function_set_alt\000"
	.space	3
	.type	__func__.53157, %object
	.size	__func__.53157, 21
__func__.53157:
	.ascii	"adb_function_disable\000"
	.space	3
	.type	__func__.53415, %object
	.size	__func__.53415, 18
__func__.53415:
	.ascii	"ccid_bulk_release\000"
	.space	2
	.type	__func__.53343, %object
	.size	__func__.53343, 20
__func__.53343:
	.ascii	"ccid_function_setup\000"
	.type	__func__.53559, %object
	.size	__func__.53559, 17
__func__.53559:
	.ascii	"ccid_bind_config\000"
	.space	3
	.type	__func__.54380, %object
	.size	__func__.54380, 15
__func__.54380:
	.ascii	"send_file_work\000"
	.space	1
	.type	__func__.54316, %object
	.size	__func__.54316, 9
__func__.54316:
	.ascii	"mtp_read\000"
	.space	3
	.type	__func__.54349, %object
	.size	__func__.54349, 10
__func__.54349:
	.ascii	"mtp_write\000"
	.space	2
	.type	__func__.54431, %object
	.size	__func__.54431, 15
__func__.54431:
	.ascii	"mtp_send_event\000"
	.space	1
	.type	__func__.54457, %object
	.size	__func__.54457, 10
__func__.54457:
	.ascii	"mtp_ioctl\000"
	.space	2
	.type	__func__.54277, %object
	.size	__func__.54277, 26
__func__.54277:
	.ascii	"mtp_create_bulk_endpoints\000"
	.space	2
	.type	__func__.54501, %object
	.size	__func__.54501, 18
__func__.54501:
	.ascii	"mtp_function_bind\000"
	.space	2
	.type	__func__.54528, %object
	.size	__func__.54528, 21
__func__.54528:
	.ascii	"mtp_function_set_alt\000"
	.space	3
	.type	__func__.54535, %object
	.size	__func__.54535, 21
__func__.54535:
	.ascii	"mtp_function_disable\000"
	.space	3
	.type	__func__.46072, %object
	.size	__func__.46072, 12
__func__.46072:
	.ascii	"send_status\000"
	.type	__func__.46090, %object
	.size	__func__.46090, 14
__func__.46090:
	.ascii	"check_command\000"
	.space	2
	.type	__func__.45814, %object
	.size	__func__.45814, 11
__func__.45814:
	.ascii	"do_read_cd\000"
	.space	1
	.type	__func__.45869, %object
	.size	__func__.45869, 9
__func__.45869:
	.ascii	"do_write\000"
	.space	3
	.type	__func__.45907, %object
	.size	__func__.45907, 10
__func__.45907:
	.ascii	"do_verify\000"
	.space	2
	.type	__func__.45995, %object
	.size	__func__.45995, 14
__func__.45995:
	.ascii	"do_start_stop\000"
	.space	2
	.type	__func__.45840, %object
	.size	__func__.45840, 8
__func__.45840:
	.ascii	"do_read\000"
	.type	__func__.45687, %object
	.size	__func__.45687, 13
__func__.45687:
	.ascii	"fsg_set_halt\000"
	.space	3
	.type	__func__.46029, %object
	.size	__func__.46029, 23
__func__.46029:
	.ascii	"wedge_bulk_in_endpoint\000"
	.space	1
	.type	__func__.46156, %object
	.size	__func__.46156, 13
__func__.46156:
	.ascii	"received_cbw\000"
	.space	3
	.type	__func__.46183, %object
	.size	__func__.46183, 17
__func__.46183:
	.ascii	"do_set_interface\000"
	.space	3
	.type	__func__.46310, %object
	.size	__func__.46310, 16
__func__.46310:
	.ascii	"fsg_common_init\000"
	.type	__func__.45454, %object
	.size	__func__.45454, 14
__func__.45454:
	.ascii	"fsg_lun_close\000"
	.space	2
	.type	__func__.45535, %object
	.size	__func__.45535, 16
__func__.45535:
	.ascii	"fsg_store_cdrom\000"
	.type	__func__.45502, %object
	.size	__func__.45502, 13
__func__.45502:
	.ascii	"fsg_store_ro\000"
	.space	3
	.type	__func__.45449, %object
	.size	__func__.45449, 13
__func__.45449:
	.ascii	"fsg_lun_open\000"
	.space	3
	.type	__func__.45523, %object
	.size	__func__.45523, 15
__func__.45523:
	.ascii	"fsg_store_file\000"
	.space	1
	.type	__func__.46333, %object
	.size	__func__.46333, 11
__func__.46333:
	.ascii	"fsg_unbind\000"
	.space	1
	.type	__func__.55665, %object
	.size	__func__.55665, 9
__func__.55665:
	.ascii	"acc_read\000"
	.space	3
	.type	__func__.55699, %object
	.size	__func__.55699, 10
__func__.55699:
	.ascii	"acc_write\000"
	.space	2
	.type	__func__.55530, %object
	.size	__func__.55530, 16
__func__.55530:
	.ascii	"acc_complete_in\000"
	.type	__func__.55537, %object
	.size	__func__.55537, 17
__func__.55537:
	.ascii	"acc_complete_out\000"
	.space	3
	.type	__func__.55633, %object
	.size	__func__.55633, 22
__func__.55633:
	.ascii	"create_bulk_endpoints\000"
	.space	2
	.type	__func__.55799, %object
	.size	__func__.55799, 18
__func__.55799:
	.ascii	"acc_function_bind\000"
	.space	2
	.type	__func__.55889, %object
	.size	__func__.55889, 21
__func__.55889:
	.ascii	"acc_function_set_alt\000"
	.space	3
	.type	__func__.55896, %object
	.size	__func__.55896, 21
__func__.55896:
	.ascii	"acc_function_disable\000"
	.space	3
	.type	__func__.64216, %object
	.size	__func__.64216, 24
__func__.64216:
	.ascii	"android_uasp_connect_cb\000"
	.type	__func__.63136, %object
	.size	__func__.63136, 20
__func__.63136:
	.ascii	"ncm_notify_complete\000"
	.type	__func__.63114, %object
	.size	__func__.63114, 14
__func__.63114:
	.ascii	"ncm_do_notify\000"
	.space	2
	.type	__func__.63307, %object
	.size	__func__.63307, 9
__func__.63307:
	.ascii	"ncm_bind\000"
	.space	3
	.type	__func__.63314, %object
	.size	__func__.63314, 11
__func__.63314:
	.ascii	"ncm_unbind\000"
	.space	1
	.type	__func__.63146, %object
	.size	__func__.63146, 20
__func__.63146:
	.ascii	"ncm_ep0out_complete\000"
	.type	__func__.63284, %object
	.size	__func__.63284, 12
__func__.63284:
	.ascii	"ncm_disable\000"
	.type	__func__.58861, %object
	.size	__func__.58861, 21
__func__.58861:
	.ascii	"gether_qc_setup_name\000"
	.space	3
	.type	__func__.58715, %object
	.size	__func__.58715, 18
__func__.58715:
	.ascii	"gether_setup_name\000"
	.space	2
	.type	__func__.58245, %object
	.size	__func__.58245, 17
__func__.58245:
	.ascii	"rndis_qc_set_alt\000"
	.space	3
	.type	__func__.58012, %object
	.size	__func__.58012, 20
__func__.58012:
	.ascii	"ecm_notify_complete\000"
	.type	__func__.58081, %object
	.size	__func__.58081, 9
__func__.58081:
	.ascii	"ecm_bind\000"
	.space	3
	.type	__func__.58088, %object
	.size	__func__.58088, 11
__func__.58088:
	.ascii	"ecm_unbind\000"
	.space	1
	.type	__func__.57991, %object
	.size	__func__.57991, 14
__func__.57991:
	.ascii	"ecm_do_notify\000"
	.space	2
	.type	__func__.58043, %object
	.size	__func__.58043, 12
__func__.58043:
	.ascii	"ecm_set_alt\000"
	.type	__func__.58027, %object
	.size	__func__.58027, 10
__func__.58027:
	.ascii	"ecm_setup\000"
	.space	2
	.type	__func__.58058, %object
	.size	__func__.58058, 12
__func__.58058:
	.ascii	"ecm_disable\000"
	.type	__func__.57134, %object
	.size	__func__.57134, 23
__func__.57134:
	.ascii	"ecm_qc_notify_complete\000"
	.space	1
	.type	__func__.57220, %object
	.size	__func__.57220, 14
__func__.57220:
	.ascii	"ecm_qc_unbind\000"
	.space	2
	.type	__func__.57083, %object
	.size	__func__.57083, 17
__func__.57083:
	.ascii	"ecm_qc_do_notify\000"
	.space	3
	.type	__func__.57165, %object
	.size	__func__.57165, 15
__func__.57165:
	.ascii	"ecm_qc_set_alt\000"
	.space	1
	.type	__func__.57180, %object
	.size	__func__.57180, 15
__func__.57180:
	.ascii	"ecm_qc_disable\000"
	.space	1
	.type	__func__.56890, %object
	.size	__func__.56890, 17
__func__.56890:
	.ascii	"rndis_proc_write\000"
	.space	3
	.type	__func__.56377, %object
	.size	__func__.56377, 17
__func__.56377:
	.ascii	"rndis_add_header\000"
	.space	3
	.type	__func__.56387, %object
	.size	__func__.56387, 25
__func__.56387:
	.ascii	"rndis_response_available\000"
	.space	3
	.type	__func__.56479, %object
	.size	__func__.56479, 11
__func__.56479:
	.ascii	"rndis_bind\000"
	.space	1
	.type	__func__.56446, %object
	.size	__func__.56446, 14
__func__.56446:
	.ascii	"rndis_set_alt\000"
	.space	2
	.type	__func__.56400, %object
	.size	__func__.56400, 24
__func__.56400:
	.ascii	"rndis_response_complete\000"
	.type	__func__.56433, %object
	.size	__func__.56433, 12
__func__.56433:
	.ascii	"rndis_setup\000"
	.type	__func__.56455, %object
	.size	__func__.56455, 14
__func__.56455:
	.ascii	"rndis_disable\000"
	.space	2
	.type	__func__.53901, %object
	.size	__func__.53901, 14
__func__.53901:
	.ascii	"f_midi_unbind\000"
	.space	2
	.type	__func__.53864, %object
	.size	__func__.53864, 16
__func__.53864:
	.ascii	"f_midi_complete\000"
	.type	__func__.53892, %object
	.size	__func__.53892, 15
__func__.53892:
	.ascii	"f_midi_disable\000"
	.space	1
	.type	__func__.52884, %object
	.size	__func__.52884, 24
__func__.52884:
	.ascii	"acm_notify_serial_state\000"
	.type	__func__.52924, %object
	.size	__func__.52924, 9
__func__.52924:
	.ascii	"acm_bind\000"
	.space	3
	.type	__func__.52848, %object
	.size	__func__.52848, 12
__func__.52848:
	.ascii	"acm_set_alt\000"
	.type	__func__.52812, %object
	.size	__func__.52812, 29
__func__.52812:
	.ascii	"acm_complete_set_line_coding\000"
	.space	3
	.type	__func__.52837, %object
	.size	__func__.52837, 10
__func__.52837:
	.ascii	"acm_setup\000"
	.space	2
	.type	__func__.52856, %object
	.size	__func__.52856, 12
__func__.52856:
	.ascii	"acm_disable\000"
	.type	__func__.52693, %object
	.size	__func__.52693, 18
__func__.52693:
	.ascii	"ghsuart_data_init\000"
	.space	2
	.type	__func__.52309, %object
	.size	__func__.52309, 28
__func__.52309:
	.ascii	"ghsuart_data_alloc_requests\000"
	.type	__func__.52414, %object
	.size	__func__.52414, 22
__func__.52414:
	.ascii	"ghsuart_data_start_io\000"
	.space	2
	.type	__func__.52459, %object
	.size	__func__.52459, 21
__func__.52459:
	.ascii	"ghsuart_notify_event\000"
	.space	3
	.type	__func__.52155, %object
	.size	__func__.52155, 18
__func__.52155:
	.ascii	"ghsuart_ctrl_init\000"
	.space	2
	.type	__func__.51388, %object
	.size	__func__.51388, 26
__func__.51388:
	.ascii	"ghsic_data_alloc_requests\000"
	.space	2
	.type	__func__.51533, %object
	.size	__func__.51533, 20
__func__.51533:
	.ascii	"ghsic_data_start_io\000"
	.type	__func__.50064, %object
	.size	__func__.50064, 16
__func__.50064:
	.ascii	"rmnet_ctrl_open\000"
	.type	__func__.50076, %object
	.size	__func__.50076, 19
__func__.50076:
	.ascii	"rmnet_ctrl_release\000"
	.space	1
	.type	__func__.47642, %object
	.size	__func__.47642, 16
__func__.47642:
	.ascii	"gserial_connect\000"
	.type	__func__.47424, %object
	.size	__func__.47424, 8
__func__.47424:
	.ascii	"gs_open\000"
	.type	__func__.47443, %object
	.size	__func__.47443, 9
__func__.47443:
	.ascii	"gs_close\000"
	.space	3
	.type	__func__.40927, %object
	.size	__func__.40927, 20
__func__.40927:
	.ascii	"audio_data_complete\000"
	.type	__func__.40986, %object
	.size	__func__.40986, 14
__func__.40986:
	.ascii	"audio_set_alt\000"
	.space	2
	.type	__func__.40992, %object
	.size	__func__.40992, 14
__func__.40992:
	.ascii	"audio_disable\000"
	.space	2
	.type	__func__.40955, %object
	.size	__func__.40955, 30
__func__.40955:
	.ascii	"audio_source_get_endpoint_req\000"
	.space	2
	.type	__func__.40937, %object
	.size	__func__.40937, 30
__func__.40937:
	.ascii	"audio_source_set_endpoint_req\000"
	.space	2
	.type	__func__.40976, %object
	.size	__func__.40976, 12
__func__.40976:
	.ascii	"audio_setup\000"
	.type	__func__.37255, %object
	.size	__func__.37255, 26
__func__.37255:
	.ascii	"rmnet_sdio_ctl_receive_cb\000"
	.space	2
	.type	__func__.37276, %object
	.size	__func__.37276, 24
__func__.37276:
	.ascii	"rmnet_sdio_sts_callback\000"
	.type	__func__.37339, %object
	.size	__func__.37339, 17
__func__.37339:
	.ascii	"rmnet_sdio_setup\000"
	.space	3
	.type	__func__.31849, %object
	.size	__func__.31849, 22
__func__.31849:
	.ascii	"rmnet_control_rx_tlet\000"
	.space	2
	.type	__func__.31954, %object
	.size	__func__.31954, 19
__func__.31954:
	.ascii	"rmnet_data_rx_tlet\000"
	.space	1
	.type	__func__.31929, %object
	.size	__func__.31929, 19
__func__.31929:
	.ascii	"rmnet_data_tx_tlet\000"
	.space	1
	.type	__func__.32037, %object
	.size	__func__.32037, 19
__func__.32037:
	.ascii	"rmnet_smd_ch_probe\000"
	.space	1
	.type	__func__.31894, %object
	.size	__func__.31894, 16
__func__.31894:
	.ascii	"rmnet_smd_setup\000"
	.type	__func__.31130, %object
	.size	__func__.31130, 15
__func__.31130:
	.ascii	"usb_qdss_close\000"
	.space	1
	.type	__func__.31105, %object
	.size	__func__.31105, 14
__func__.31105:
	.ascii	"usb_qdss_open\000"
	.space	2
	.type	__func__.31082, %object
	.size	__func__.31082, 20
__func__.31082:
	.ascii	"usb_qdss_ctrl_write\000"
	.type	__func__.31065, %object
	.size	__func__.31065, 19
__func__.31065:
	.ascii	"usb_qdss_ctrl_read\000"
	.space	1
	.type	__func__.30898, %object
	.size	__func__.30898, 25
__func__.30898:
	.ascii	"qdss_ctrl_write_complete\000"
	.space	3
	.type	__func__.30910, %object
	.size	__func__.30910, 24
__func__.30910:
	.ascii	"qdss_ctrl_read_complete\000"
	.type	__func__.30942, %object
	.size	__func__.30942, 19
__func__.30942:
	.ascii	"usb_qdss_alloc_req\000"
	.space	1
	.type	__func__.30922, %object
	.size	__func__.30922, 18
__func__.30922:
	.ascii	"usb_qdss_free_req\000"
	.space	2
	.type	__func__.30858, %object
	.size	__func__.30858, 10
__func__.30858:
	.ascii	"init_data\000"
	.space	2
	.type	__func__.30840, %object
	.size	__func__.30840, 13
__func__.30840:
	.ascii	"send_sps_req\000"
	.space	3
	.type	__func__.26074, %object
	.size	__func__.26074, 22
__func__.26074:
	.ascii	"diag_function_disable\000"
	.space	2
	.type	__func__.26120, %object
	.size	__func__.26120, 18
__func__.26120:
	.ascii	"diag_function_add\000"
	.space	2
	.type	__func__.25507, %object
	.size	__func__.25507, 18
__func__.25507:
	.ascii	"composite_suspend\000"
	.space	2
	.type	__func__.25522, %object
	.size	__func__.25522, 17
__func__.25522:
	.ascii	"composite_resume\000"
	.space	3
	.type	__func__.25371, %object
	.size	__func__.25371, 25
__func__.25371:
	.ascii	"composite_setup_complete\000"
	.space	3
	.type	__func__.25258, %object
	.size	__func__.25258, 14
__func__.25258:
	.ascii	"unbind_config\000"
	.space	2
	.type	__func__.25171, %object
	.size	__func__.25171, 13
__func__.25171:
	.ascii	"reset_config\000"
	.space	3
	.type	__func__.25229, %object
	.size	__func__.25229, 15
__func__.25229:
	.ascii	"usb_add_config\000"
	.space	1
	.type	__func__.25068, %object
	.size	__func__.25068, 17
__func__.25068:
	.ascii	"usb_add_function\000"
	.space	3
	.type	mirrorlink_shortname, %object
	.size	mirrorlink_shortname, 8
mirrorlink_shortname:
	.ascii	"usb_ncm\000"
	.type	conn_gadget_fops, %object
	.size	conn_gadget_fops, 108
conn_gadget_fops:
	.word	0
	.space	4
	.word	conn_gadget_read
	.word	conn_gadget_write
	.space	12
	.word	conn_gadget_poll
	.word	conn_gadget_ioctl
	.space	8
	.word	conn_gadget_open
	.word	conn_gadget_flush
	.word	conn_gadget_release
	.space	52
	.type	conn_gadget_shortname, %object
	.size	conn_gadget_shortname, 17
conn_gadget_shortname:
	.ascii	"android_ssusbcon\000"
	.space	3
	.type	__param_str_audio_capture_buf_size, %object
	.size	__param_str_audio_capture_buf_size, 31
__param_str_audio_capture_buf_size:
	.ascii	"android.audio_capture_buf_size\000"
	.space	1
	.type	__param_str_req_capture_count, %object
	.size	__param_str_req_capture_count, 26
__param_str_req_capture_count:
	.ascii	"android.req_capture_count\000"
	.space	2
	.type	__param_str_req_capture_buf_size, %object
	.size	__param_str_req_capture_buf_size, 29
__param_str_req_capture_buf_size:
	.ascii	"android.req_capture_buf_size\000"
	.space	3
	.type	__param_str_audio_playback_buf_size, %object
	.size	__param_str_audio_playback_buf_size, 32
__param_str_audio_playback_buf_size:
	.ascii	"android.audio_playback_buf_size\000"
	.type	__param_str_req_playback_count, %object
	.size	__param_str_req_playback_count, 27
__param_str_req_playback_count:
	.ascii	"android.req_playback_count\000"
	.space	1
	.type	__param_str_req_playback_buf_size, %object
	.size	__param_str_req_playback_buf_size, 30
__param_str_req_playback_buf_size:
	.ascii	"android.req_playback_buf_size\000"
	.space	2
	.type	__param_str_fn_cntl, %object
	.size	__param_str_fn_cntl, 16
__param_str_fn_cntl:
	.ascii	"android.fn_cntl\000"
	.type	__param_str_fn_cap, %object
	.size	__param_str_fn_cap, 15
__param_str_fn_cap:
	.ascii	"android.fn_cap\000"
	.space	1
	.type	__param_str_fn_play, %object
	.size	__param_str_fn_play, 16
__param_str_fn_play:
	.ascii	"android.fn_play\000"
	.type	__param_str_qc_host_addr, %object
	.size	__param_str_qc_host_addr, 21
__param_str_qc_host_addr:
	.ascii	"android.qc_host_addr\000"
	.space	3
	.type	__param_str_qc_dev_addr, %object
	.size	__param_str_qc_dev_addr, 20
__param_str_qc_dev_addr:
	.ascii	"android.qc_dev_addr\000"
	.type	__param_str_host_addr, %object
	.size	__param_str_host_addr, 18
__param_str_host_addr:
	.ascii	"android.host_addr\000"
	.space	2
	.type	__param_str_dev_addr, %object
	.size	__param_str_dev_addr, 17
__param_str_dev_addr:
	.ascii	"android.dev_addr\000"
	.space	3
	.type	__param_str_qmult, %object
	.size	__param_str_qmult, 14
__param_str_qmult:
	.ascii	"android.qmult\000"
	.space	2
	.type	rndis_qc_fops, %object
	.size	rndis_qc_fops, 108
rndis_qc_fops:
	.word	0
	.space	28
	.word	rndis_qc_ioctl
	.space	8
	.word	rndis_qc_open_dev
	.space	4
	.word	rndis_qc_release_dev
	.space	52
	.type	mbim_fops, %object
	.size	mbim_fops, 108
mbim_fops:
	.word	0
	.space	4
	.word	mbim_read
	.word	mbim_write
	.space	16
	.word	mbim_ioctl
	.space	8
	.word	mbim_open
	.space	4
	.word	mbim_release
	.space	52
	.type	__param_str_rndis_ul_max_xfer_size_rcvd, %object
	.size	__param_str_rndis_ul_max_xfer_size_rcvd, 36
__param_str_rndis_ul_max_xfer_size_rcvd:
	.ascii	"android.rndis_ul_max_xfer_size_rcvd\000"
	.type	__param_str_rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	__param_str_rndis_ul_max_pkt_per_xfer_rcvd, 39
__param_str_rndis_ul_max_pkt_per_xfer_rcvd:
	.ascii	"android.rndis_ul_max_pkt_per_xfer_rcvd\000"
	.space	1
	.type	__param_str_rndis_ul_max_pkt_per_xfer, %object
	.size	__param_str_rndis_ul_max_pkt_per_xfer, 34
__param_str_rndis_ul_max_pkt_per_xfer:
	.ascii	"android.rndis_ul_max_pkt_per_xfer\000"
	.space	2
	.type	__param_str_rndis_dl_max_pkt_per_xfer, %object
	.size	__param_str_rndis_dl_max_pkt_per_xfer, 34
__param_str_rndis_dl_max_pkt_per_xfer:
	.ascii	"android.rndis_dl_max_pkt_per_xfer\000"
	.space	2
	.type	acc_hid_table, %object
	.size	acc_hid_table, 32
acc_hid_table:
	.short	3
	.space	2
	.word	-1
	.word	-1
	.space	4
	.space	16
	.type	acc_fops, %object
	.size	acc_fops, 108
acc_fops:
	.word	0
	.space	4
	.word	acc_read
	.word	acc_write
	.space	16
	.word	acc_ioctl
	.space	8
	.word	acc_open
	.space	4
	.word	acc_release
	.space	52
	.type	mtp_fops, %object
	.size	mtp_fops, 108
mtp_fops:
	.word	0
	.space	4
	.word	mtp_read
	.word	mtp_write
	.space	16
	.word	mtp_ioctl
	.space	8
	.word	mtp_open
	.space	4
	.word	mtp_release
	.space	52
	.type	mtp_shortname, %object
	.size	mtp_shortname, 8
mtp_shortname:
	.ascii	"mtp_usb\000"
	.type	__param_str_mtp_tx_reqs, %object
	.size	__param_str_mtp_tx_reqs, 20
__param_str_mtp_tx_reqs:
	.ascii	"android.mtp_tx_reqs\000"
	.type	__param_str_mtp_tx_req_len, %object
	.size	__param_str_mtp_tx_req_len, 23
__param_str_mtp_tx_req_len:
	.ascii	"android.mtp_tx_req_len\000"
	.space	1
	.type	__param_str_mtp_rx_req_len, %object
	.size	__param_str_mtp_rx_req_len, 23
__param_str_mtp_rx_req_len:
	.ascii	"android.mtp_rx_req_len\000"
	.space	1
	.type	ccid_ctrl_fops, %object
	.size	ccid_ctrl_fops, 108
ccid_ctrl_fops:
	.word	0
	.space	4
	.word	ccid_ctrl_read
	.space	20
	.word	ccid_ctrl_ioctl
	.space	8
	.word	ccid_ctrl_open
	.space	4
	.word	ccid_ctrl_release
	.space	52
	.type	ccid_bulk_fops, %object
	.size	ccid_bulk_fops, 108
ccid_bulk_fops:
	.word	0
	.space	4
	.word	ccid_bulk_read
	.word	ccid_bulk_write
	.space	28
	.word	ccid_bulk_open
	.space	4
	.word	ccid_bulk_release
	.space	52
	.type	adb_fops, %object
	.size	adb_fops, 108
adb_fops:
	.word	0
	.space	4
	.word	adb_read
	.word	adb_write
	.space	28
	.word	adb_open
	.space	4
	.word	adb_release
	.space	52
	.type	adb_shortname, %object
	.size	adb_shortname, 12
adb_shortname:
	.ascii	"android_adb\000"
	.type	modem_fops, %object
	.size	modem_fops, 108
modem_fops:
	.word	0
	.word	no_llseek
	.word	modem_read
	.space	16
	.word	modem_poll
	.word	modem_ioctl
	.space	8
	.word	modem_open
	.space	4
	.word	modem_close
	.space	52
	.type	__param_str_ghsuart_data_tx_intr_thld, %object
	.size	__param_str_ghsuart_data_tx_intr_thld, 34
__param_str_ghsuart_data_tx_intr_thld:
	.ascii	"android.ghsuart_data_tx_intr_thld\000"
	.space	2
	.type	__param_str_ghsuart_data_rx_req_size, %object
	.size	__param_str_ghsuart_data_rx_req_size, 33
__param_str_ghsuart_data_rx_req_size:
	.ascii	"android.ghsuart_data_rx_req_size\000"
	.space	3
	.type	__param_str_ghsuart_data_serial_rx_q_size, %object
	.size	__param_str_ghsuart_data_serial_rx_q_size, 38
__param_str_ghsuart_data_serial_rx_q_size:
	.ascii	"android.ghsuart_data_serial_rx_q_size\000"
	.space	2
	.type	__param_str_ghsuart_data_serial_tx_q_size, %object
	.size	__param_str_ghsuart_data_serial_tx_q_size, 38
__param_str_ghsuart_data_serial_tx_q_size:
	.ascii	"android.ghsuart_data_serial_tx_q_size\000"
	.space	2
	.type	__param_str_ghsuart_data_rmnet_rx_q_size, %object
	.size	__param_str_ghsuart_data_rmnet_rx_q_size, 37
__param_str_ghsuart_data_rmnet_rx_q_size:
	.ascii	"android.ghsuart_data_rmnet_rx_q_size\000"
	.space	3
	.type	__param_str_ghsuart_data_rmnet_tx_q_size, %object
	.size	__param_str_ghsuart_data_rmnet_tx_q_size, 37
__param_str_ghsuart_data_rmnet_tx_q_size:
	.ascii	"android.ghsuart_data_rmnet_tx_q_size\000"
	.space	3
	.type	__param_str_record_timestamp, %object
	.size	__param_str_record_timestamp, 25
__param_str_record_timestamp:
	.ascii	"android.record_timestamp\000"
	.space	3
	.type	__param_str_ghsic_data_pend_limit_with_bridge, %object
	.size	__param_str_ghsic_data_pend_limit_with_bridge, 42
__param_str_ghsic_data_pend_limit_with_bridge:
	.ascii	"android.ghsic_data_pend_limit_with_bridge\000"
	.space	2
	.type	__param_str_ghsic_data_fctrl_dis_thld, %object
	.size	__param_str_ghsic_data_fctrl_dis_thld, 34
__param_str_ghsic_data_fctrl_dis_thld:
	.ascii	"android.ghsic_data_fctrl_dis_thld\000"
	.space	2
	.type	__param_str_ghsic_data_fctrl_en_thld, %object
	.size	__param_str_ghsic_data_fctrl_en_thld, 33
__param_str_ghsic_data_fctrl_en_thld:
	.ascii	"android.ghsic_data_fctrl_en_thld\000"
	.space	3
	.type	__param_str_ghsic_data_fctrl_support, %object
	.size	__param_str_ghsic_data_fctrl_support, 33
__param_str_ghsic_data_fctrl_support:
	.ascii	"android.ghsic_data_fctrl_support\000"
	.space	3
	.type	__param_str_ghsic_data_tx_intr_thld, %object
	.size	__param_str_ghsic_data_tx_intr_thld, 32
__param_str_ghsic_data_tx_intr_thld:
	.ascii	"android.ghsic_data_tx_intr_thld\000"
	.type	__param_str_ghsic_data_rx_req_size, %object
	.size	__param_str_ghsic_data_rx_req_size, 31
__param_str_ghsic_data_rx_req_size:
	.ascii	"android.ghsic_data_rx_req_size\000"
	.space	1
	.type	__param_str_ghsic_data_serial_rx_q_size, %object
	.size	__param_str_ghsic_data_serial_rx_q_size, 36
__param_str_ghsic_data_serial_rx_q_size:
	.ascii	"android.ghsic_data_serial_rx_q_size\000"
	.type	__param_str_ghsic_data_serial_tx_q_size, %object
	.size	__param_str_ghsic_data_serial_tx_q_size, 36
__param_str_ghsic_data_serial_tx_q_size:
	.ascii	"android.ghsic_data_serial_tx_q_size\000"
	.type	__param_str_ghsic_data_rmnet_rx_q_size, %object
	.size	__param_str_ghsic_data_rmnet_rx_q_size, 35
__param_str_ghsic_data_rmnet_rx_q_size:
	.ascii	"android.ghsic_data_rmnet_rx_q_size\000"
	.space	1
	.type	__param_str_ghsic_data_rmnet_tx_q_size, %object
	.size	__param_str_ghsic_data_rmnet_tx_q_size, 35
__param_str_ghsic_data_rmnet_tx_q_size:
	.ascii	"android.ghsic_data_rmnet_tx_q_size\000"
	.space	1
	.type	rmnet_ctrl_fops, %object
	.size	rmnet_ctrl_fops, 108
rmnet_ctrl_fops:
	.word	0
	.space	4
	.word	rmnet_ctrl_read
	.word	rmnet_ctrl_write
	.space	12
	.word	rmnet_ctrl_poll
	.word	rmnet_ctrl_ioctl
	.space	8
	.word	rmnet_ctrl_open
	.space	4
	.word	rmnet_ctrl_release
	.space	52
	.type	__param_str_dl_intr_threshold, %object
	.size	__param_str_dl_intr_threshold, 26
__param_str_dl_intr_threshold:
	.ascii	"android.dl_intr_threshold\000"
	.space	2
	.type	__param_str_bam_mux_rx_req_size, %object
	.size	__param_str_bam_mux_rx_req_size, 28
__param_str_bam_mux_rx_req_size:
	.ascii	"android.bam_mux_rx_req_size\000"
	.type	__param_str_bam_mux_rx_q_size, %object
	.size	__param_str_bam_mux_rx_q_size, 26
__param_str_bam_mux_rx_q_size:
	.ascii	"android.bam_mux_rx_q_size\000"
	.space	2
	.type	__param_str_bam_mux_tx_q_size, %object
	.size	__param_str_bam_mux_tx_q_size, 26
__param_str_bam_mux_tx_q_size:
	.ascii	"android.bam_mux_tx_q_size\000"
	.space	2
	.type	__param_str_bam_mux_rx_fctrl_dis_thld, %object
	.size	__param_str_bam_mux_rx_fctrl_dis_thld, 34
__param_str_bam_mux_rx_fctrl_dis_thld:
	.ascii	"android.bam_mux_rx_fctrl_dis_thld\000"
	.space	2
	.type	__param_str_bam_mux_rx_fctrl_support, %object
	.size	__param_str_bam_mux_rx_fctrl_support, 33
__param_str_bam_mux_rx_fctrl_support:
	.ascii	"android.bam_mux_rx_fctrl_support\000"
	.space	3
	.type	__param_str_bam_mux_rx_fctrl_en_thld, %object
	.size	__param_str_bam_mux_rx_fctrl_en_thld, 33
__param_str_bam_mux_rx_fctrl_en_thld:
	.ascii	"android.bam_mux_rx_fctrl_en_thld\000"
	.space	3
	.type	__param_str_bam_mux_tx_pkt_drop_thld, %object
	.size	__param_str_bam_mux_tx_pkt_drop_thld, 33
__param_str_bam_mux_tx_pkt_drop_thld:
	.ascii	"android.bam_mux_tx_pkt_drop_thld\000"
	.space	3
	.type	__param_str_bam_pending_limit, %object
	.size	__param_str_bam_pending_limit, 26
__param_str_bam_pending_limit:
	.ascii	"android.bam_pending_limit\000"
	.space	2
	.type	fsg_string_interface, %object
	.size	fsg_string_interface, 13
fsg_string_interface:
	.ascii	"Mass Storage\000"
	.space	3
	.type	rmnet_mux_ctrl_fops, %object
	.size	rmnet_mux_ctrl_fops, 108
rmnet_mux_ctrl_fops:
	.word	0
	.space	4
	.word	usb_rmnet_mux_ctrl_read
	.word	usb_rmnet_mux_ctrl_write
	.space	16
	.word	usb_rmnet_mux_ctrl_ioctl
	.space	8
	.word	usb_rmnet_mux_ctrl_open
	.space	4
	.word	usb_rmnet_mux_ctrl_release
	.space	52
	.type	__param_str_mux_sdio_rx_fctrl_dis_thld, %object
	.size	__param_str_mux_sdio_rx_fctrl_dis_thld, 35
__param_str_mux_sdio_rx_fctrl_dis_thld:
	.ascii	"android.mux_sdio_rx_fctrl_dis_thld\000"
	.space	1
	.type	__param_str_mux_sdio_rx_fctrl_en_thld, %object
	.size	__param_str_mux_sdio_rx_fctrl_en_thld, 34
__param_str_mux_sdio_rx_fctrl_en_thld:
	.ascii	"android.mux_sdio_rx_fctrl_en_thld\000"
	.space	2
	.type	__param_str_mux_sdio_tx_pkt_drop_thld, %object
	.size	__param_str_mux_sdio_tx_pkt_drop_thld, 34
__param_str_mux_sdio_tx_pkt_drop_thld:
	.ascii	"android.mux_sdio_tx_pkt_drop_thld\000"
	.space	2
	.type	__param_str_rmnet_mux_smd_data_ch, %object
	.size	__param_str_rmnet_mux_smd_data_ch, 30
__param_str_rmnet_mux_smd_data_ch:
	.ascii	"android.rmnet_mux_smd_data_ch\000"
	.space	2
	.type	__param_str_rmnet_mux_sdio_data_ch, %object
	.size	__param_str_rmnet_mux_sdio_data_ch, 31
__param_str_rmnet_mux_sdio_data_ch:
	.ascii	"android.rmnet_mux_sdio_data_ch\000"
	.space	1
	.type	__param_str_rmnet_mux_sdio_ctl_ch, %object
	.size	__param_str_rmnet_mux_sdio_ctl_ch, 30
__param_str_rmnet_mux_sdio_ctl_ch:
	.ascii	"android.rmnet_mux_sdio_ctl_ch\000"
	.space	2
	.type	__param_str_sdio_rx_fctrl_dis_thld, %object
	.size	__param_str_sdio_rx_fctrl_dis_thld, 31
__param_str_sdio_rx_fctrl_dis_thld:
	.ascii	"android.sdio_rx_fctrl_dis_thld\000"
	.space	1
	.type	__param_str_sdio_rx_fctrl_en_thld, %object
	.size	__param_str_sdio_rx_fctrl_en_thld, 30
__param_str_sdio_rx_fctrl_en_thld:
	.ascii	"android.sdio_rx_fctrl_en_thld\000"
	.space	2
	.type	__param_str_sdio_tx_pkt_drop_thld, %object
	.size	__param_str_sdio_tx_pkt_drop_thld, 30
__param_str_sdio_tx_pkt_drop_thld:
	.ascii	"android.sdio_tx_pkt_drop_thld\000"
	.space	2
	.type	__param_str_rmnet_sdio_data_ch, %object
	.size	__param_str_rmnet_sdio_data_ch, 27
__param_str_rmnet_sdio_data_ch:
	.ascii	"android.rmnet_sdio_data_ch\000"
	.space	1
	.type	__param_str_rmnet_sdio_ctl_ch, %object
	.size	__param_str_rmnet_sdio_ctl_ch, 26
__param_str_rmnet_sdio_ctl_ch:
	.ascii	"android.rmnet_sdio_ctl_ch\000"
	.space	2
	.type	__param_str_rmnet_data_ch, %object
	.size	__param_str_rmnet_data_ch, 22
__param_str_rmnet_data_ch:
	.ascii	"android.rmnet_data_ch\000"
	.space	2
	.type	__param_str_rmnet_ctl_ch, %object
	.size	__param_str_rmnet_ctl_ch, 21
__param_str_rmnet_ctl_ch:
	.ascii	"android.rmnet_ctl_ch\000"
	.space	3
	.type	__param_str_iSerialNumber, %object
	.size	__param_str_iSerialNumber, 22
__param_str_iSerialNumber:
	.ascii	"android.iSerialNumber\000"
	.space	2
	.type	__param_str_iProduct, %object
	.size	__param_str_iProduct, 17
__param_str_iProduct:
	.ascii	"android.iProduct\000"
	.space	3
	.type	__param_str_iManufacturer, %object
	.size	__param_str_iManufacturer, 22
__param_str_iManufacturer:
	.ascii	"android.iManufacturer\000"
	.space	2
	.type	__param_str_bcdDevice, %object
	.size	__param_str_bcdDevice, 18
__param_str_bcdDevice:
	.ascii	"android.bcdDevice\000"
	.space	2
	.type	__param_str_idProduct, %object
	.size	__param_str_idProduct, 18
__param_str_idProduct:
	.ascii	"android.idProduct\000"
	.space	2
	.type	__param_str_idVendor, %object
	.size	__param_str_idVendor, 17
__param_str_idVendor:
	.ascii	"android.idVendor\000"
	.data
	.align	3
	.set	.LANCHOR0,. + 0
	.set	.LANCHOR6,. + 8184
	.type	usb_diag_ch_list, %object
	.size	usb_diag_ch_list, 8
usb_diag_ch_list:
	.word	usb_diag_ch_list
	.word	usb_diag_ch_list
	.type	uac1_ac_header_desc, %object
	.size	uac1_ac_header_desc, 10
uac1_ac_header_desc:
	.byte	10
	.byte	36
	.byte	1
	.2byte	256
	.2byte	52
	.byte	2
	.space	2
	.space	2
	.type	ntb_parameters, %object
	.size	ntb_parameters, 28
ntb_parameters:
	.short	28
	.short	3
	.word	16384
	.short	4
	.short	0
	.short	4
	.space	2
	.word	16384
	.short	4
	.short	0
	.short	4
	.space	2
	.type	ndp16_opts, %object
	.size	ndp16_opts, 44
ndp16_opts:
	.word	1213023054
	.word	810369870
	.word	12
	.word	8
	.word	4
	.word	1
	.word	1
	.word	1
	.word	0
	.word	0
	.word	1
	.type	ndp32_opts, %object
	.size	ndp32_opts, 44
ndp32_opts:
	.word	1751999342
	.word	812475246
	.word	16
	.word	16
	.word	8
	.word	2
	.word	2
	.word	2
	.word	1
	.word	2
	.word	2
	.type	device_desc, %object
	.size	device_desc, 18
device_desc:
	.byte	18
	.byte	1
	.short	512
	.byte	0
	.space	3
	.short	6353
	.short	1
	.short	-1
	.space	3
	.byte	1
	.space	2
	.type	_rs.52001, %object
	.size	_rs.52001, 24
_rs.52001:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	mbim_ntb_parameters, %object
	.size	mbim_ntb_parameters, 28
mbim_ntb_parameters:
	.short	28
	.short	1
	.word	16384
	.short	4
	.short	0
	.short	4
	.space	2
	.word	4096
	.short	4
	.short	0
	.short	4
	.short	0
	.type	mbim_ext_config_desc, %object
	.size	mbim_ext_config_desc, 40
mbim_ext_config_desc:
	.word	40
	.short	256
	.short	4
	.byte	1
	.space	7
	.byte	0
	.byte	1
	.byte	65
	.byte	76
	.byte	84
	.byte	82
	.byte	67
	.byte	70
	.byte	71
	.space	1
	.space	14
	.type	mbim_os_string, %object
	.size	mbim_os_string, 18
mbim_os_string:
	.byte	18
	.byte	3
	.byte	77
	.byte	0
	.byte	83
	.byte	0
	.byte	70
	.byte	0
	.byte	84
	.byte	0
	.byte	49
	.byte	0
	.byte	48
	.byte	0
	.byte	48
	.byte	0
	.byte	-91
	.byte	0
	.space	2
	.type	usb_qdss_ch_list, %object
	.size	usb_qdss_ch_list, 8
usb_qdss_ch_list:
	.word	usb_qdss_ch_list
	.word	usb_qdss_ch_list
	.type	android_platform_driver, %object
	.size	android_platform_driver, 80
android_platform_driver:
	.word	android_probe
	.word	android_remove
	.space	12
	.word	.LC1098
	.space	16
	.word	usb_android_dt_match
	.space	32
	.word	android_id_table
	.type	composite_driver, %object
	.size	composite_driver, 88
composite_driver:
	.space	8
	.word	composite_unbind
	.word	composite_setup
	.word	composite_disconnect
	.word	composite_suspend
	.word	composite_resume
	.space	8
	.word	0
	.space	44
	.space	4
	.type	rmnet_ctl_ch, %object
	.size	rmnet_ctl_ch, 4
rmnet_ctl_ch:
	.word	.LC917
	.type	rmnet_data_ch, %object
	.size	rmnet_data_ch, 4
rmnet_data_ch:
	.word	.LC917
	.type	mtp_os_string, %object
	.size	mtp_os_string, 18
mtp_os_string:
	.byte	18
	.byte	3
	.byte	77
	.byte	0
	.byte	83
	.byte	0
	.byte	70
	.byte	0
	.byte	84
	.byte	0
	.byte	49
	.byte	0
	.byte	48
	.byte	0
	.byte	48
	.byte	0
	.byte	1
	.byte	0
	.space	2
	.type	mtp_ext_config_desc, %object
	.size	mtp_ext_config_desc, 40
mtp_ext_config_desc:
	.word	40
	.short	256
	.short	4
	.byte	1
	.space	7
	.byte	0
	.byte	1
	.byte	77
	.byte	84
	.byte	80
	.space	5
	.space	14
	.type	ccid_class_desc, %object
	.size	ccid_class_desc, 54
ccid_class_desc:
	.byte	54
	.byte	33
	.short	272
	.byte	0
	.byte	2
	.4byte	1
	.4byte	3580
	.4byte	3580
	.byte	0
	.4byte	9600
	.4byte	9600
	.byte	0
	.word	0
	.word	0
	.word	0
	.word	131198
	.word	512
	.byte	0
	.byte	0
	.short	0
	.byte	0
	.byte	1
	.space	2
	.type	_rs.38220, %object
	.size	_rs.38220, 24
_rs.38220:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	dl_intr_threshold, %object
	.size	dl_intr_threshold, 4
dl_intr_threshold:
	.word	20
	.type	ghsic_data_fctrl_support, %object
	.size	ghsic_data_fctrl_support, 4
ghsic_data_fctrl_support:
	.word	1
	.type	ghsic_data_fctrl_en_thld, %object
	.size	ghsic_data_fctrl_en_thld, 4
ghsic_data_fctrl_en_thld:
	.word	500
	.type	qmult, %object
	.size	qmult, 4
qmult:
	.word	10
	.type	bam_mux_rx_fctrl_support, %object
	.size	bam_mux_rx_fctrl_support, 4
bam_mux_rx_fctrl_support:
	.word	1
	.type	bam_mux_rx_fctrl_en_thld, %object
	.size	bam_mux_rx_fctrl_en_thld, 4
bam_mux_rx_fctrl_en_thld:
	.word	500
	.type	bam_mux_rx_req_size, %object
	.size	bam_mux_rx_req_size, 4
bam_mux_rx_req_size:
	.word	2048
	.type	mtp_rx_req_len, %object
	.size	mtp_rx_req_len, 4
mtp_rx_req_len:
	.word	16384
	.type	bam_pending_limit, %object
	.size	bam_pending_limit, 4
bam_pending_limit:
	.word	220
	.type	bam_mux_rx_fctrl_dis_thld, %object
	.size	bam_mux_rx_fctrl_dis_thld, 4
bam_mux_rx_fctrl_dis_thld:
	.word	300
	.type	rmnet_device, %object
	.size	rmnet_device, 36
rmnet_device:
	.word	255
	.word	.LC1728
	.word	rmnet_ctrl_fops
	.space	24
	.type	acc_device, %object
	.size	acc_device, 36
acc_device:
	.word	255
	.word	.LC1705
	.word	acc_fops
	.space	24
	.type	rndis_qc_device, %object
	.size	rndis_qc_device, 36
rndis_qc_device:
	.word	255
	.word	.LC1615
	.word	rndis_qc_fops
	.space	24
	.type	mtp_device, %object
	.size	mtp_device, 36
mtp_device:
	.word	255
	.word	mtp_shortname
	.word	mtp_fops
	.space	24
	.type	adb_device, %object
	.size	adb_device, 36
adb_device:
	.word	255
	.word	adb_shortname
	.word	adb_fops
	.space	24
	.type	rmnet_mux_ctrl_dev, %object
	.size	rmnet_mux_ctrl_dev, 36
rmnet_mux_ctrl_dev:
	.word	255
	.word	.LC1754
	.word	rmnet_mux_ctrl_fops
	.space	24
	.type	mirrorlink_device, %object
	.size	mirrorlink_device, 36
mirrorlink_device:
	.word	255
	.word	mirrorlink_shortname
	.space	28
	.type	ccid_bulk_device, %object
	.size	ccid_bulk_device, 36
ccid_bulk_device:
	.word	255
	.word	.LC1713
	.word	ccid_bulk_fops
	.space	24
	.type	ccid_ctrl_device, %object
	.size	ccid_ctrl_device, 36
ccid_ctrl_device:
	.word	255
	.word	.LC1712
	.word	ccid_ctrl_fops
	.space	24
	.type	mbim_device, %object
	.size	mbim_device, 36
mbim_device:
	.word	255
	.word	.LC1639
	.word	mbim_fops
	.space	24
	.type	ops.54006, %object
	.size	ops.54006, 12
ops.54006:
	.word	f_midi_snd_free
	.space	8
	.type	gmidi_in_ops, %object
	.size	gmidi_in_ops, 16
gmidi_in_ops:
	.word	f_midi_in_open
	.word	f_midi_in_close
	.word	f_midi_in_trigger
	.space	4
	.type	gmidi_out_ops, %object
	.size	gmidi_out_ops, 16
gmidi_out_ops:
	.word	f_midi_out_open
	.word	f_midi_out_close
	.word	f_midi_out_trigger
	.space	4
	.type	conn_gadget_device, %object
	.size	conn_gadget_device, 36
conn_gadget_device:
	.word	255
	.word	conn_gadget_shortname
	.word	conn_gadget_fops
	.space	24
	.type	strings_dev, %object
	.size	strings_dev, 32
strings_dev:
	.space	4
	.word	manufacturer_string
	.space	4
	.word	product_string
	.space	4
	.word	serial_string
	.space	8
	.type	last_vote.63430, %object
	.size	last_vote.63430, 4
last_vote.63430:
	.word	-1
	.type	acc_hid_ll_driver, %object
	.size	acc_hid_ll_driver, 28
acc_hid_ll_driver:
	.word	acc_hid_start
	.word	acc_hid_stop
	.word	acc_hid_open
	.word	acc_hid_close
	.space	8
	.word	acc_hid_parse
	.type	ffs_fs_type, %object
	.size	ffs_fs_type, 36
ffs_fs_type:
	.word	.LC1749
	.space	4
	.word	ffs_fs_mount
	.space	8
	.word	ffs_fs_kill_sb
	.word	0
	.space	8
	.type	req_capture_buf_size, %object
	.size	req_capture_buf_size, 4
req_capture_buf_size:
	.word	32
	.type	audio_playback_buf_size, %object
	.size	audio_playback_buf_size, 4
audio_playback_buf_size:
	.word	8192
	.type	req_playback_count, %object
	.size	req_playback_count, 4
req_playback_count:
	.word	48
	.type	req_playback_buf_size, %object
	.size	req_playback_buf_size, 4
req_playback_buf_size:
	.word	32
	.type	dev_attr_suspended, %object
	.size	dev_attr_suspended, 16
dev_attr_suspended:
	.word	.LC1767
	.short	292
	.space	2
	.word	composite_show_suspended
	.word	0
	.type	_rs.52351, %object
	.size	_rs.52351, 24
_rs.52351:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	ghsuart_data_rx_req_size, %object
	.size	ghsuart_data_rx_req_size, 4
ghsuart_data_rx_req_size:
	.word	2048
	.type	_rs.52403, %object
	.size	_rs.52403, 24
_rs.52403:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	ghsuart_data_tx_intr_thld, %object
	.size	ghsuart_data_tx_intr_thld, 4
ghsuart_data_tx_intr_thld:
	.word	1
	.type	audio_capture_buf_size, %object
	.size	audio_capture_buf_size, 4
audio_capture_buf_size:
	.word	8192
	.type	android_usb_attributes, %object
	.size	android_usb_attributes, 76
android_usb_attributes:
	.word	dev_attr_idVendor
	.word	dev_attr_idProduct
	.word	dev_attr_bcdDevice
	.word	dev_attr_bDeviceClass
	.word	dev_attr_bDeviceSubClass
	.word	dev_attr_bDeviceProtocol
	.word	dev_attr_iManufacturer
	.word	dev_attr_iProduct
	.word	dev_attr_iSerial
	.word	dev_attr_functions
	.word	dev_attr_enable
	.word	dev_attr_pm_qos
	.word	dev_attr_state
	.word	dev_attr_bcdUSB
	.word	dev_attr_usb30en
	.word	dev_attr_ss_host_available
	.word	dev_attr_macos
	.word	dev_attr_remote_wakeup
	.word	0
	.type	android_usb_driver, %object
	.size	android_usb_driver, 44
android_usb_driver:
	.word	.LC1098
	.space	8
	.word	device_desc
	.word	dev_strings
	.word	5
	.space	4
	.word	android_usb_unbind
	.space	12
	.type	ghsic_data_tx_intr_thld, %object
	.size	ghsic_data_tx_intr_thld, 4
ghsic_data_tx_intr_thld:
	.word	20
	.type	ghsic_data_fctrl_dis_thld, %object
	.size	ghsic_data_fctrl_dis_thld, 4
ghsic_data_fctrl_dis_thld:
	.word	300
	.type	_rs.51463, %object
	.size	_rs.51463, 24
_rs.51463:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	ghsic_data_pend_limit_with_bridge, %object
	.size	ghsic_data_pend_limit_with_bridge, 4
ghsic_data_pend_limit_with_bridge:
	.word	500
	.type	ghsic_data_rx_req_size, %object
	.size	ghsic_data_rx_req_size, 4
ghsic_data_rx_req_size:
	.word	2048
	.type	_rs.51521, %object
	.size	_rs.51521, 24
_rs.51521:
	.word	0
	.word	1500
	.word	10
	.space	12
	.type	ecm_qc_string_defs, %object
	.size	ecm_qc_string_defs, 32
ecm_qc_string_defs:
	.space	4
	.word	.LC1627
	.space	4
	.word	0
	.space	4
	.word	.LC1628
	.space	8
	.type	sdio_rx_fctrl_en_thld, %object
	.size	sdio_rx_fctrl_en_thld, 4
sdio_rx_fctrl_en_thld:
	.word	1000
	.type	mux_sdio_rx_fctrl_en_thld, %object
	.size	mux_sdio_rx_fctrl_en_thld, 4
mux_sdio_rx_fctrl_en_thld:
	.word	1000
	.type	mbim_ndp16_opts, %object
	.size	mbim_ndp16_opts, 44
mbim_ndp16_opts:
	.word	1213023054
	.word	810369870
	.word	12
	.word	8
	.word	4
	.word	1
	.word	1
	.word	1
	.word	0
	.word	0
	.word	1
	.type	mbim_ndp32_opts, %object
	.size	mbim_ndp32_opts, 44
mbim_ndp32_opts:
	.word	1751999342
	.word	812475246
	.word	16
	.word	16
	.word	8
	.word	2
	.word	2
	.word	2
	.word	1
	.word	2
	.word	2
	.type	ncm_string_defs, %object
	.size	ncm_string_defs, 40
ncm_string_defs:
	.space	4
	.word	.LC1554
	.space	4
	.word	0
	.space	4
	.word	.LC1555
	.space	4
	.word	.LC1556
	.space	8
	.type	ecm_string_defs, %object
	.size	ecm_string_defs, 40
ecm_string_defs:
	.space	4
	.word	.LC1627
	.space	4
	.word	0
	.space	4
	.word	.LC1628
	.space	4
	.word	.LC1629
	.space	8
	.type	mtp_tx_req_len, %object
	.size	mtp_tx_req_len, 4
mtp_tx_req_len:
	.word	16384
	.type	bam_mux_rx_q_size, %object
	.size	bam_mux_rx_q_size, 4
bam_mux_rx_q_size:
	.word	16
	.type	bam_mux_tx_q_size, %object
	.size	bam_mux_tx_q_size, 4
bam_mux_tx_q_size:
	.word	200
	.type	acc_hid_driver, %object
	.size	acc_hid_driver, 132
acc_hid_driver:
	.word	.LC1704
	.word	acc_hid_table
	.space	12
	.word	acc_hid_probe
	.space	108
	.type	dev_attr_cdrom, %object
	.size	dev_attr_cdrom, 16
dev_attr_cdrom:
	.word	.LC1744
	.short	420
	.space	2
	.word	fsg_show_cdrom
	.word	fsg_store_cdrom
	.type	dev_attr_nofua, %object
	.size	dev_attr_nofua, 16
dev_attr_nofua:
	.word	.LC1746
	.short	420
	.space	2
	.word	fsg_show_nofua
	.word	fsg_store_nofua
	.type	dev_attr_ro, %object
	.size	dev_attr_ro, 16
dev_attr_ro:
	.word	.LC1747
	.short	420
	.space	2
	.word	fsg_show_ro
	.word	fsg_store_ro
	.type	dev_attr_file, %object
	.size	dev_attr_file, 16
dev_attr_file:
	.word	.LC1745
	.short	420
	.space	2
	.word	fsg_show_file
	.word	fsg_store_file
	.type	rmnet_smd_interface_desc, %object
	.size	rmnet_smd_interface_desc, 9
rmnet_smd_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_smd_fs_in_desc, %object
	.size	rmnet_smd_fs_in_desc, 9
rmnet_smd_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_smd_fs_out_desc, %object
	.size	rmnet_smd_fs_out_desc, 9
rmnet_smd_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_smd_fs_notify_desc, %object
	.size	rmnet_smd_fs_notify_desc, 9
rmnet_smd_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_smd_hs_in_desc, %object
	.size	rmnet_smd_hs_in_desc, 9
rmnet_smd_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_smd_hs_out_desc, %object
	.size	rmnet_smd_hs_out_desc, 9
rmnet_smd_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_smd_hs_notify_desc, %object
	.size	rmnet_smd_hs_notify_desc, 9
rmnet_smd_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rmnet_sdio_interface_desc, %object
	.size	rmnet_sdio_interface_desc, 9
rmnet_sdio_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_sdio_fs_in_desc, %object
	.size	rmnet_sdio_fs_in_desc, 9
rmnet_sdio_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_sdio_fs_out_desc, %object
	.size	rmnet_sdio_fs_out_desc, 9
rmnet_sdio_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_sdio_fs_notify_desc, %object
	.size	rmnet_sdio_fs_notify_desc, 9
rmnet_sdio_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_sdio_hs_in_desc, %object
	.size	rmnet_sdio_hs_in_desc, 9
rmnet_sdio_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_sdio_hs_out_desc, %object
	.size	rmnet_sdio_hs_out_desc, 9
rmnet_sdio_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_sdio_hs_notify_desc, %object
	.size	rmnet_sdio_hs_notify_desc, 9
rmnet_sdio_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rmnet_mux_interface_desc, %object
	.size	rmnet_mux_interface_desc, 9
rmnet_mux_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_mux_fs_in_desc, %object
	.size	rmnet_mux_fs_in_desc, 9
rmnet_mux_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_mux_fs_out_desc, %object
	.size	rmnet_mux_fs_out_desc, 9
rmnet_mux_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_mux_fs_notify_desc, %object
	.size	rmnet_mux_fs_notify_desc, 9
rmnet_mux_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_mux_hs_in_desc, %object
	.size	rmnet_mux_hs_in_desc, 9
rmnet_mux_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_mux_hs_out_desc, %object
	.size	rmnet_mux_hs_out_desc, 9
rmnet_mux_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_mux_hs_notify_desc, %object
	.size	rmnet_mux_hs_notify_desc, 9
rmnet_mux_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	input_terminal_desc, %object
	.size	input_terminal_desc, 12
input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	1
	.short	513
	.byte	0
	.space	1
	.short	3
	.space	2
	.type	as_type_i_desc, %object
	.size	as_type_i_desc, 11
as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.space	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	audio_source_ac_interface_desc, %object
	.size	audio_source_ac_interface_desc, 9
audio_source_ac_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	0
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	as_interface_alt_0_desc, %object
	.size	as_interface_alt_0_desc, 9
as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	as_interface_alt_1_desc, %object
	.size	as_interface_alt_1_desc, 9
as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	fs_as_in_ep_desc, %object
	.size	fs_as_in_ep_desc, 9
fs_as_in_ep_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	13
	.short	256
	.byte	1
	.space	2
	.space	3
	.type	hs_as_in_ep_desc, %object
	.size	hs_as_in_ep_desc, 9
hs_as_in_ep_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	13
	.short	256
	.byte	4
	.space	2
	.space	3
	.type	adb_interface_desc, %object
	.size	adb_interface_desc, 9
adb_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	2
	.byte	-1
	.byte	66
	.byte	1
	.space	1
	.space	3
	.type	adb_fullspeed_in_desc, %object
	.size	adb_fullspeed_in_desc, 9
adb_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	adb_fullspeed_out_desc, %object
	.size	adb_fullspeed_out_desc, 9
adb_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	adb_highspeed_in_desc, %object
	.size	adb_highspeed_in_desc, 9
adb_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	adb_highspeed_out_desc, %object
	.size	adb_highspeed_out_desc, 9
adb_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	adb_superspeed_in_desc, %object
	.size	adb_superspeed_in_desc, 9
adb_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	adb_superspeed_out_desc, %object
	.size	adb_superspeed_out_desc, 9
adb_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acc_interface_desc, %object
	.size	acc_interface_desc, 9
acc_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	2
	.byte	-1
	.byte	-1
	.byte	0
	.space	1
	.space	3
	.type	acc_fullspeed_in_desc, %object
	.size	acc_fullspeed_in_desc, 9
acc_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	acc_fullspeed_out_desc, %object
	.size	acc_fullspeed_out_desc, 9
acc_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	acc_highspeed_in_desc, %object
	.size	acc_highspeed_in_desc, 9
acc_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acc_highspeed_out_desc, %object
	.size	acc_highspeed_out_desc, 9
acc_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acc_superspeed_in_desc, %object
	.size	acc_superspeed_in_desc, 9
acc_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acc_superspeed_out_desc, %object
	.size	acc_superspeed_out_desc, 9
acc_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ccid_fs_descs, %object
	.size	ccid_fs_descs, 24
ccid_fs_descs:
	.word	ccid_interface_desc
	.word	ccid_class_desc
	.word	ccid_fs_notify_desc
	.word	ccid_fs_in_desc
	.word	ccid_fs_out_desc
	.word	0
	.type	ccid_hs_descs, %object
	.size	ccid_hs_descs, 24
ccid_hs_descs:
	.word	ccid_interface_desc
	.word	ccid_class_desc
	.word	ccid_hs_notify_desc
	.word	ccid_hs_in_desc
	.word	ccid_hs_out_desc
	.word	0
	.type	rmnet_mux_strings, %object
	.size	rmnet_mux_strings, 8
rmnet_mux_strings:
	.word	rmnet_mux_string_table
	.word	0
	.type	rmnet_mux_fs_function, %object
	.size	rmnet_mux_fs_function, 20
rmnet_mux_fs_function:
	.word	rmnet_mux_interface_desc
	.word	rmnet_mux_fs_notify_desc
	.word	rmnet_mux_fs_in_desc
	.word	rmnet_mux_fs_out_desc
	.word	0
	.type	rmnet_mux_hs_function, %object
	.size	rmnet_mux_hs_function, 20
rmnet_mux_hs_function:
	.word	rmnet_mux_interface_desc
	.word	rmnet_mux_hs_notify_desc
	.word	rmnet_mux_hs_in_desc
	.word	rmnet_mux_hs_out_desc
	.word	0
	.type	mtp_interface_desc, %object
	.size	mtp_interface_desc, 9
mtp_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	3
	.byte	-1
	.byte	-1
	.byte	0
	.space	1
	.space	3
	.type	mtp_fullspeed_in_desc, %object
	.size	mtp_fullspeed_in_desc, 9
mtp_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	mtp_fullspeed_out_desc, %object
	.size	mtp_fullspeed_out_desc, 9
mtp_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	mtp_intr_desc, %object
	.size	mtp_intr_desc, 9
mtp_intr_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	28
	.byte	6
	.space	2
	.space	3
	.type	mtp_tx_reqs, %object
	.size	mtp_tx_reqs, 4
mtp_tx_reqs:
	.word	8
	.type	mtp_highspeed_in_desc, %object
	.size	mtp_highspeed_in_desc, 9
mtp_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	mtp_highspeed_out_desc, %object
	.size	mtp_highspeed_out_desc, 9
mtp_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	mtp_superspeed_in_desc, %object
	.size	mtp_superspeed_in_desc, 9
mtp_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	mtp_superspeed_out_desc, %object
	.size	mtp_superspeed_out_desc, 9
mtp_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	intf_desc, %object
	.size	intf_desc, 9
intf_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	-1
	.byte	16
	.byte	1
	.space	1
	.space	3
	.type	fs_bulk_in_desc, %object
	.size	fs_bulk_in_desc, 9
fs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.byte	0
	.space	2
	.space	3
	.type	fs_bulk_out_desc, %object
	.size	fs_bulk_out_desc, 9
fs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.byte	0
	.space	2
	.space	3
	.type	fs_diag_desc, %object
	.size	fs_diag_desc, 16
fs_diag_desc:
	.word	intf_desc
	.word	fs_bulk_in_desc
	.word	fs_bulk_out_desc
	.word	0
	.type	hs_bulk_in_desc, %object
	.size	hs_bulk_in_desc, 9
hs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.byte	0
	.space	2
	.space	3
	.type	hs_bulk_out_desc, %object
	.size	hs_bulk_out_desc, 9
hs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.byte	0
	.space	2
	.space	3
	.type	hs_diag_desc, %object
	.size	hs_diag_desc, 16
hs_diag_desc:
	.word	intf_desc
	.word	hs_bulk_in_desc
	.word	hs_bulk_out_desc
	.word	0
	.type	ss_bulk_in_desc, %object
	.size	ss_bulk_in_desc, 9
ss_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_bulk_out_desc, %object
	.size	ss_bulk_out_desc, 9
ss_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_diag_desc, %object
	.size	ss_diag_desc, 24
ss_diag_desc:
	.word	intf_desc
	.word	ss_bulk_in_desc
	.word	ss_bulk_in_comp_desc
	.word	ss_bulk_out_desc
	.word	ss_bulk_out_comp_desc
	.word	0
	.type	ecm_qc_control_intf, %object
	.size	ecm_qc_control_intf, 9
ecm_qc_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_union_desc, %object
	.size	ecm_qc_union_desc, 5
ecm_qc_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ecm_qc_data_nop_intf, %object
	.size	ecm_qc_data_nop_intf, 9
ecm_qc_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_data_intf, %object
	.size	ecm_qc_data_intf, 9
ecm_qc_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_fs_in_desc, %object
	.size	ecm_qc_fs_in_desc, 9
ecm_qc_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	ecm_qc_fs_out_desc, %object
	.size	ecm_qc_fs_out_desc, 9
ecm_qc_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	ecm_qc_fs_notify_desc, %object
	.size	ecm_qc_fs_notify_desc, 9
ecm_qc_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	ecm_qc_fs_function, %object
	.size	ecm_qc_fs_function, 40
ecm_qc_fs_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_fs_notify_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_fs_in_desc
	.word	ecm_qc_fs_out_desc
	.word	0
	.type	ecm_qc_hs_in_desc, %object
	.size	ecm_qc_hs_in_desc, 9
ecm_qc_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ecm_qc_hs_out_desc, %object
	.size	ecm_qc_hs_out_desc, 9
ecm_qc_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ecm_qc_hs_notify_desc, %object
	.size	ecm_qc_hs_notify_desc, 9
ecm_qc_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ecm_qc_hs_function, %object
	.size	ecm_qc_hs_function, 40
ecm_qc_hs_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_hs_notify_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_hs_in_desc
	.word	ecm_qc_hs_out_desc
	.word	0
	.type	ecm_qc_ss_in_desc, %object
	.size	ecm_qc_ss_in_desc, 9
ecm_qc_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ecm_qc_ss_out_desc, %object
	.size	ecm_qc_ss_out_desc, 9
ecm_qc_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ecm_qc_ss_notify_desc, %object
	.size	ecm_qc_ss_notify_desc, 9
ecm_qc_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ecm_qc_ss_function, %object
	.size	ecm_qc_ss_function, 52
ecm_qc_ss_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_ss_notify_desc
	.word	ecm_qc_ss_notify_comp_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_ss_in_desc
	.word	ecm_qc_ss_in_comp_desc
	.word	ecm_qc_ss_out_desc
	.word	ecm_qc_ss_out_comp_desc
	.word	0
	.type	mbim_iad_desc, %object
	.size	mbim_iad_desc, 8
mbim_iad_desc:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	14
	.byte	0
	.space	1
	.type	mbim_control_intf, %object
	.size	mbim_control_intf, 9
mbim_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	14
	.byte	0
	.space	1
	.space	3
	.type	mbim_union_desc, %object
	.size	mbim_union_desc, 5
mbim_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	mbim_data_nop_intf, %object
	.size	mbim_data_nop_intf, 9
mbim_data_nop_intf:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	2
	.space	1
	.space	3
	.type	mbim_data_intf, %object
	.size	mbim_data_intf, 9
mbim_data_intf:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	2
	.space	1
	.space	3
	.type	fs_mbim_in_desc, %object
	.size	fs_mbim_in_desc, 9
fs_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_mbim_out_desc, %object
	.size	fs_mbim_out_desc, 9
fs_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_mbim_notify_desc, %object
	.size	fs_mbim_notify_desc, 9
fs_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	32
	.space	2
	.space	3
	.type	mbb_desc, %object
	.size	mbb_desc, 12
mbb_desc:
	.byte	12
	.byte	36
	.byte	27
	.2byte	256
	.2byte	4096
	.byte	32
	.byte	-128
	.2byte	4064
	.byte	32
	.type	mbim_fs_function, %object
	.size	mbim_fs_function, 48
mbim_fs_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	fs_mbim_notify_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	fs_mbim_in_desc
	.word	fs_mbim_out_desc
	.word	0
	.type	hs_mbim_in_desc, %object
	.size	hs_mbim_in_desc, 9
hs_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_mbim_out_desc, %object
	.size	hs_mbim_out_desc, 9
hs_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_mbim_notify_desc, %object
	.size	hs_mbim_notify_desc, 9
hs_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	9
	.space	2
	.space	3
	.type	mbim_hs_function, %object
	.size	mbim_hs_function, 48
mbim_hs_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	hs_mbim_notify_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	hs_mbim_in_desc
	.word	hs_mbim_out_desc
	.word	0
	.type	ss_mbim_in_desc, %object
	.size	ss_mbim_in_desc, 9
ss_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_mbim_out_desc, %object
	.size	ss_mbim_out_desc, 9
ss_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_mbim_notify_desc, %object
	.size	ss_mbim_notify_desc, 9
ss_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	9
	.space	2
	.space	3
	.type	mbim_ss_function, %object
	.size	mbim_ss_function, 60
mbim_ss_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	ss_mbim_notify_desc
	.word	ss_mbim_notify_comp_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	ss_mbim_in_desc
	.word	ss_mbim_in_comp_desc
	.word	ss_mbim_out_desc
	.word	ss_mbim_out_comp_desc
	.word	0
	.type	ccid_interface_desc, %object
	.size	ccid_interface_desc, 9
ccid_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	11
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ccid_fs_notify_desc, %object
	.size	ccid_fs_notify_desc, 9
ccid_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	4
	.byte	32
	.space	2
	.space	3
	.type	ccid_fs_in_desc, %object
	.size	ccid_fs_in_desc, 9
ccid_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	ccid_fs_out_desc, %object
	.size	ccid_fs_out_desc, 9
ccid_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	ccid_hs_in_desc, %object
	.size	ccid_hs_in_desc, 9
ccid_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ccid_hs_out_desc, %object
	.size	ccid_hs_out_desc, 9
ccid_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ccid_hs_notify_desc, %object
	.size	ccid_hs_notify_desc, 9
ccid_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	4
	.byte	9
	.space	2
	.space	3
	.type	midi_string_defs, %object
	.size	midi_string_defs, 16
midi_string_defs:
	.space	4
	.word	.LC1710
	.space	8
	.type	midi_ac_interface_desc, %object
	.size	midi_ac_interface_desc, 9
midi_ac_interface_desc:
	.byte	9
	.byte	4
	.space	3
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	midi_ms_interface_desc, %object
	.size	midi_ms_interface_desc, 9
midi_ms_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	1
	.byte	3
	.space	2
	.space	3
	.type	midi_ac_header_desc, %object
	.size	midi_ac_header_desc, 9
midi_ac_header_desc:
	.byte	9
	.byte	36
	.byte	1
	.2byte	256
	.2byte	9
	.byte	1
	.space	1
	.space	3
	.type	midi_bulk_in_desc, %object
	.size	midi_bulk_in_desc, 9
midi_bulk_in_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	midi_bulk_out_desc, %object
	.size	midi_bulk_out_desc, 9
midi_bulk_out_desc:
	.byte	9
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	midi_ms_header_desc, %object
	.size	midi_ms_header_desc, 7
midi_ms_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.2byte	256
	.space	2
	.space	1
	.type	midi_ms_in_desc, %object
	.size	midi_ms_in_desc, 20
midi_ms_in_desc:
	.space	1
	.byte	37
	.byte	1
	.space	17
	.type	midi_ms_out_desc, %object
	.size	midi_ms_out_desc, 20
midi_ms_out_desc:
	.space	1
	.byte	37
	.byte	1
	.space	17
	.type	rmnet_interface_desc, %object
	.size	rmnet_interface_desc, 9
rmnet_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-32
	.byte	0
	.space	1
	.space	3
	.type	rmnet_fs_in_desc, %object
	.size	rmnet_fs_in_desc, 9
rmnet_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_fs_out_desc, %object
	.size	rmnet_fs_out_desc, 9
rmnet_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_fs_notify_desc, %object
	.size	rmnet_fs_notify_desc, 9
rmnet_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_fs_function, %object
	.size	rmnet_fs_function, 20
rmnet_fs_function:
	.word	rmnet_interface_desc
	.word	rmnet_fs_notify_desc
	.word	rmnet_fs_in_desc
	.word	rmnet_fs_out_desc
	.word	0
	.type	rmnet_hs_in_desc, %object
	.size	rmnet_hs_in_desc, 9
rmnet_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_hs_out_desc, %object
	.size	rmnet_hs_out_desc, 9
rmnet_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_hs_notify_desc, %object
	.size	rmnet_hs_notify_desc, 9
rmnet_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rmnet_hs_function, %object
	.size	rmnet_hs_function, 20
rmnet_hs_function:
	.word	rmnet_interface_desc
	.word	rmnet_hs_notify_desc
	.word	rmnet_hs_in_desc
	.word	rmnet_hs_out_desc
	.word	0
	.type	rmnet_ss_in_desc, %object
	.size	rmnet_ss_in_desc, 9
rmnet_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rmnet_ss_out_desc, %object
	.size	rmnet_ss_out_desc, 9
rmnet_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rmnet_ss_notify_desc, %object
	.size	rmnet_ss_notify_desc, 9
rmnet_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rmnet_ss_function, %object
	.size	rmnet_ss_function, 32
rmnet_ss_function:
	.word	rmnet_interface_desc
	.word	rmnet_ss_notify_desc
	.word	rmnet_ss_notify_comp_desc
	.word	rmnet_ss_in_desc
	.word	rmnet_ss_in_comp_desc
	.word	rmnet_ss_out_desc
	.word	rmnet_ss_out_comp_desc
	.word	0
	.type	rndis_qc_iad_descriptor, %object
	.size	rndis_qc_iad_descriptor, 8
rndis_qc_iad_descriptor:
	.byte	8
	.byte	11
	.byte	0
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	rndis_qc_control_intf, %object
	.size	rndis_qc_control_intf, 9
rndis_qc_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	-1
	.space	1
	.space	3
	.type	rndis_qc_union_desc, %object
	.size	rndis_qc_union_desc, 5
rndis_qc_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	rndis_qc_data_intf, %object
	.size	rndis_qc_data_intf, 9
rndis_qc_data_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	rndis_qc_fs_in_desc, %object
	.size	rndis_qc_fs_in_desc, 9
rndis_qc_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	rndis_qc_fs_out_desc, %object
	.size	rndis_qc_fs_out_desc, 9
rndis_qc_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	rndis_qc_fs_notify_desc, %object
	.size	rndis_qc_fs_notify_desc, 9
rndis_qc_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	eth_qc_fs_function, %object
	.size	eth_qc_fs_function, 44
eth_qc_fs_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_fs_notify_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_fs_in_desc
	.word	rndis_qc_fs_out_desc
	.word	0
	.type	rndis_qc_hs_in_desc, %object
	.size	rndis_qc_hs_in_desc, 9
rndis_qc_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rndis_qc_hs_out_desc, %object
	.size	rndis_qc_hs_out_desc, 9
rndis_qc_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rndis_qc_hs_notify_desc, %object
	.size	rndis_qc_hs_notify_desc, 9
rndis_qc_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	eth_qc_hs_function, %object
	.size	eth_qc_hs_function, 44
eth_qc_hs_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_hs_notify_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_hs_in_desc
	.word	rndis_qc_hs_out_desc
	.word	0
	.type	rndis_qc_ss_in_desc, %object
	.size	rndis_qc_ss_in_desc, 9
rndis_qc_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rndis_qc_ss_out_desc, %object
	.size	rndis_qc_ss_out_desc, 9
rndis_qc_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rndis_qc_ss_notify_desc, %object
	.size	rndis_qc_ss_notify_desc, 9
rndis_qc_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	eth_qc_ss_function, %object
	.size	eth_qc_ss_function, 56
eth_qc_ss_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_ss_notify_desc
	.word	rndis_qc_ss_intr_comp_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_ss_in_desc
	.word	rndis_qc_ss_bulk_comp_desc
	.word	rndis_qc_ss_out_desc
	.word	rndis_qc_ss_bulk_comp_desc
	.word	0
	.type	fsg_intf_desc, %object
	.size	fsg_intf_desc, 9
fsg_intf_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	8
	.byte	6
	.byte	80
	.byte	0
	.space	3
	.type	fsg_fs_bulk_in_desc, %object
	.size	fsg_fs_bulk_in_desc, 9
fsg_fs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fsg_fs_bulk_out_desc, %object
	.size	fsg_fs_bulk_out_desc, 9
fsg_fs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fsg_hs_bulk_in_desc, %object
	.size	fsg_hs_bulk_in_desc, 9
fsg_hs_bulk_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	fsg_hs_bulk_out_desc, %object
	.size	fsg_hs_bulk_out_desc, 9
fsg_hs_bulk_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.byte	1
	.space	2
	.space	3
	.type	fsg_ss_bulk_in_desc, %object
	.size	fsg_ss_bulk_in_desc, 9
fsg_ss_bulk_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	fsg_ss_bulk_in_comp_desc, %object
	.size	fsg_ss_bulk_in_comp_desc, 6
fsg_ss_bulk_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	fsg_ss_bulk_out_desc, %object
	.size	fsg_ss_bulk_out_desc, 9
fsg_ss_bulk_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	fsg_ss_bulk_out_comp_desc, %object
	.size	fsg_ss_bulk_out_comp_desc, 6
fsg_ss_bulk_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	fsg_fs_function, %object
	.size	fsg_fs_function, 16
fsg_fs_function:
	.word	fsg_intf_desc
	.word	fsg_fs_bulk_in_desc
	.word	fsg_fs_bulk_out_desc
	.word	0
	.type	fsg_hs_function, %object
	.size	fsg_hs_function, 16
fsg_hs_function:
	.word	fsg_intf_desc
	.word	fsg_hs_bulk_in_desc
	.word	fsg_hs_bulk_out_desc
	.word	0
	.type	fsg_ss_function, %object
	.size	fsg_ss_function, 24
fsg_ss_function:
	.word	fsg_intf_desc
	.word	fsg_ss_bulk_in_desc
	.word	fsg_ss_bulk_in_comp_desc
	.word	fsg_ss_bulk_out_desc
	.word	fsg_ss_bulk_out_comp_desc
	.word	0
	.type	speaker_input_terminal_desc, %object
	.size	speaker_input_terminal_desc, 12
speaker_input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	3
	.short	257
	.byte	4
	.space	1
	.short	3
	.space	2
	.type	speaker_as_type_i_desc, %object
	.size	speaker_as_type_i_desc, 11
speaker_as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.space	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	microphone_input_terminal_desc, %object
	.size	microphone_input_terminal_desc, 12
microphone_input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	1
	.short	513
	.byte	2
	.byte	1
	.short	3
	.space	2
	.type	microphone_as_type_i_desc, %object
	.size	microphone_as_type_i_desc, 11
microphone_as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.byte	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	uac1_ac_interface_desc, %object
	.size	uac1_ac_interface_desc, 9
uac1_ac_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	0
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	microphone_as_interface_alt_0_desc, %object
	.size	microphone_as_interface_alt_0_desc, 9
microphone_as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	microphone_as_interface_alt_1_desc, %object
	.size	microphone_as_interface_alt_1_desc, 9
microphone_as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	speaker_as_interface_alt_0_desc, %object
	.size	speaker_as_interface_alt_0_desc, 9
speaker_as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	speaker_as_interface_alt_1_desc, %object
	.size	speaker_as_interface_alt_1_desc, 9
speaker_as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	microphone_as_ep_in_desc, %object
	.size	microphone_as_ep_in_desc, 9
microphone_as_ep_in_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	5
	.short	32
	.byte	4
	.space	2
	.space	3
	.type	speaker_as_ep_out_desc, %object
	.size	speaker_as_ep_out_desc, 9
speaker_as_ep_out_desc:
	.byte	9
	.byte	5
	.byte	0
	.byte	9
	.short	32
	.byte	4
	.space	2
	.space	3
	.type	microphone_as_iso_in, %object
	.size	microphone_as_iso_in, 32
microphone_as_iso_in:
	.word	microphone_as_iso_in
	.word	microphone_as_iso_in
	.space	12
	.word	.LC1583
	.byte	1
	.space	3
	.word	microphone_as_iso_in_desc
	.type	speaker_as_iso_out, %object
	.size	speaker_as_iso_out, 32
speaker_as_iso_out:
	.word	speaker_as_iso_out
	.word	speaker_as_iso_out
	.space	12
	.word	.LC1585
	.byte	1
	.space	3
	.word	speaker_as_iso_out_desc
	.type	f_audio_desc, %object
	.size	f_audio_desc, 76
f_audio_desc:
	.word	uac1_ac_interface_desc
	.word	uac1_ac_header_desc
	.word	microphone_input_terminal_desc
	.word	microphone_output_terminal_desc
	.word	speaker_input_terminal_desc
	.word	speaker_output_terminal_desc
	.word	microphone_as_interface_alt_0_desc
	.word	microphone_as_interface_alt_1_desc
	.word	microphone_as_header_desc
	.word	microphone_as_type_i_desc
	.word	microphone_as_ep_in_desc
	.word	microphone_as_iso_in_desc
	.word	speaker_as_interface_alt_0_desc
	.word	speaker_as_interface_alt_1_desc
	.word	speaker_as_header_desc
	.word	speaker_as_type_i_desc
	.word	speaker_as_ep_out_desc
	.word	speaker_as_iso_out_desc
	.word	0
	.type	ncm_iad_desc, %object
	.size	ncm_iad_desc, 8
ncm_iad_desc:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	13
	.byte	0
	.space	1
	.type	ncm_control_intf, %object
	.size	ncm_control_intf, 9
ncm_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	13
	.byte	0
	.space	1
	.space	3
	.type	ncm_union_desc, %object
	.size	ncm_union_desc, 5
ncm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ncm_data_nop_intf, %object
	.size	ncm_data_nop_intf, 9
ncm_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	1
	.space	1
	.space	3
	.type	ncm_data_intf, %object
	.size	ncm_data_intf, 9
ncm_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	1
	.space	1
	.space	3
	.type	fs_ncm_in_desc, %object
	.size	fs_ncm_in_desc, 9
fs_ncm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_ncm_out_desc, %object
	.size	fs_ncm_out_desc, 9
fs_ncm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_ncm_notify_desc, %object
	.size	fs_ncm_notify_desc, 9
fs_ncm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	hs_ncm_in_desc, %object
	.size	hs_ncm_in_desc, 9
hs_ncm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ncm_out_desc, %object
	.size	hs_ncm_out_desc, 9
hs_ncm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ncm_notify_desc, %object
	.size	hs_ncm_notify_desc, 9
hs_ncm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ncm_fs_function, %object
	.size	ncm_fs_function, 48
ncm_fs_function:
	.word	ncm_iad_desc
	.word	ncm_control_intf
	.word	ncm_header_desc
	.word	ncm_union_desc
	.word	necm_desc
	.word	ncm_desc
	.word	fs_ncm_notify_desc
	.word	ncm_data_nop_intf
	.word	ncm_data_intf
	.word	fs_ncm_in_desc
	.word	fs_ncm_out_desc
	.word	0
	.type	ncm_hs_function, %object
	.size	ncm_hs_function, 48
ncm_hs_function:
	.word	ncm_iad_desc
	.word	ncm_control_intf
	.word	ncm_header_desc
	.word	ncm_union_desc
	.word	necm_desc
	.word	ncm_desc
	.word	hs_ncm_notify_desc
	.word	ncm_data_nop_intf
	.word	ncm_data_intf
	.word	hs_ncm_in_desc
	.word	hs_ncm_out_desc
	.word	0
	.type	ecm_iad_descriptor, %object
	.size	ecm_iad_descriptor, 8
ecm_iad_descriptor:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	ecm_control_intf, %object
	.size	ecm_control_intf, 9
ecm_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.space	3
	.type	ecm_union_desc, %object
	.size	ecm_union_desc, 5
ecm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ecm_data_nop_intf, %object
	.size	ecm_data_nop_intf, 9
ecm_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_data_intf, %object
	.size	ecm_data_intf, 9
ecm_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	fs_ecm_in_desc, %object
	.size	fs_ecm_in_desc, 9
fs_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_ecm_out_desc, %object
	.size	fs_ecm_out_desc, 9
fs_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_ecm_notify_desc, %object
	.size	fs_ecm_notify_desc, 9
fs_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	hs_ecm_in_desc, %object
	.size	hs_ecm_in_desc, 9
hs_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ecm_out_desc, %object
	.size	hs_ecm_out_desc, 9
hs_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ecm_notify_desc, %object
	.size	hs_ecm_notify_desc, 9
hs_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ss_ecm_in_desc, %object
	.size	ss_ecm_in_desc, 9
ss_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_ecm_out_desc, %object
	.size	ss_ecm_out_desc, 9
ss_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_ecm_notify_desc, %object
	.size	ss_ecm_notify_desc, 9
ss_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ecm_fs_function, %object
	.size	ecm_fs_function, 44
ecm_fs_function:
	.word	ecm_iad_descriptor
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	fs_ecm_notify_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	fs_ecm_in_desc
	.word	fs_ecm_out_desc
	.word	0
	.type	ecm_hs_function, %object
	.size	ecm_hs_function, 44
ecm_hs_function:
	.word	ecm_iad_descriptor
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	hs_ecm_notify_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	hs_ecm_in_desc
	.word	hs_ecm_out_desc
	.word	0
	.type	ecm_ss_function, %object
	.size	ecm_ss_function, 52
ecm_ss_function:
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	ss_ecm_notify_desc
	.word	ss_ecm_intr_comp_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	ss_ecm_in_desc
	.word	ss_ecm_bulk_comp_desc
	.word	ss_ecm_out_desc
	.word	ss_ecm_bulk_comp_desc
	.word	0
	.type	rndis_iad_descriptor, %object
	.size	rndis_iad_descriptor, 8
rndis_iad_descriptor:
	.byte	8
	.byte	11
	.byte	0
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	rndis_control_intf, %object
	.size	rndis_control_intf, 9
rndis_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	-1
	.space	1
	.space	3
	.type	rndis_union_desc, %object
	.size	rndis_union_desc, 5
rndis_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	rndis_data_intf, %object
	.size	rndis_data_intf, 9
rndis_data_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	fs_in_desc, %object
	.size	fs_in_desc, 9
fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_out_desc, %object
	.size	fs_out_desc, 9
fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_notify_desc, %object
	.size	fs_notify_desc, 9
fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	hs_in_desc, %object
	.size	hs_in_desc, 9
hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_out_desc, %object
	.size	hs_out_desc, 9
hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_notify_desc, %object
	.size	hs_notify_desc, 9
hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	ss_in_desc, %object
	.size	ss_in_desc, 9
ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_out_desc, %object
	.size	ss_out_desc, 9
ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_notify_desc, %object
	.size	ss_notify_desc, 9
ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	eth_fs_function, %object
	.size	eth_fs_function, 44
eth_fs_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	fs_notify_desc
	.word	rndis_data_intf
	.word	fs_in_desc
	.word	fs_out_desc
	.word	0
	.type	eth_hs_function, %object
	.size	eth_hs_function, 44
eth_hs_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	hs_notify_desc
	.word	rndis_data_intf
	.word	hs_in_desc
	.word	hs_out_desc
	.word	0
	.type	eth_ss_function, %object
	.size	eth_ss_function, 56
eth_ss_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	ss_notify_desc
	.word	ss_intr_comp_desc
	.word	rndis_data_intf
	.word	ss_in_desc
	.word	ss_bulk_comp_desc
	.word	ss_out_desc
	.word	ss_bulk_comp_desc
	.word	0
	.type	rndis_ul_max_pkt_per_xfer, %object
	.size	rndis_ul_max_pkt_per_xfer, 4
rndis_ul_max_pkt_per_xfer:
	.word	3
	.type	qdss_data_intf_desc, %object
	.size	qdss_data_intf_desc, 9
qdss_data_intf_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	1
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	qdss_ctrl_intf_desc, %object
	.size	qdss_ctrl_intf_desc, 9
qdss_ctrl_intf_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	2
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	qdss_data_ep_comp_desc, %object
	.size	qdss_data_ep_comp_desc, 6
qdss_data_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	1
	.byte	0
	.short	0
	.space	2
	.type	qdss_ss_data_desc, %object
	.size	qdss_ss_data_desc, 9
qdss_ss_data_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_ctrl_in_ep_comp_desc, %object
	.size	qdss_ctrl_in_ep_comp_desc, 6
qdss_ctrl_in_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	0
	.byte	0
	.short	0
	.space	2
	.type	qdss_ss_ctrl_in_desc, %object
	.size	qdss_ss_ctrl_in_desc, 9
qdss_ss_ctrl_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_ctrl_out_ep_comp_desc, %object
	.size	qdss_ctrl_out_ep_comp_desc, 6
qdss_ctrl_out_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	0
	.byte	0
	.short	0
	.space	2
	.type	qdss_ss_ctrl_out_desc, %object
	.size	qdss_ss_ctrl_out_desc, 9
qdss_ss_ctrl_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_hs_data_desc, %object
	.size	qdss_hs_data_desc, 9
qdss_hs_data_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	qdss_hs_ctrl_in_desc, %object
	.size	qdss_hs_ctrl_in_desc, 9
qdss_hs_ctrl_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	qdss_hs_ctrl_out_desc, %object
	.size	qdss_hs_ctrl_out_desc, 9
qdss_hs_ctrl_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	qdss_hs_desc, %object
	.size	qdss_hs_desc, 24
qdss_hs_desc:
	.word	qdss_data_intf_desc
	.word	qdss_hs_data_desc
	.word	qdss_ctrl_intf_desc
	.word	qdss_hs_ctrl_in_desc
	.word	qdss_hs_ctrl_out_desc
	.word	0
	.type	qdss_ss_desc, %object
	.size	qdss_ss_desc, 36
qdss_ss_desc:
	.word	qdss_data_intf_desc
	.word	qdss_ss_data_desc
	.word	qdss_data_ep_comp_desc
	.word	qdss_ctrl_intf_desc
	.word	qdss_ss_ctrl_in_desc
	.word	qdss_ctrl_in_ep_comp_desc
	.word	qdss_ss_ctrl_out_desc
	.word	qdss_ctrl_out_ep_comp_desc
	.word	0
	.type	fs_conn_gadget_descs, %object
	.size	fs_conn_gadget_descs, 16
fs_conn_gadget_descs:
	.word	conn_gadget_interface_desc
	.word	conn_gadget_fullspeed_in_desc
	.word	conn_gadget_fullspeed_out_desc
	.word	0
	.type	hs_conn_gadget_descs, %object
	.size	hs_conn_gadget_descs, 16
hs_conn_gadget_descs:
	.word	conn_gadget_interface_desc
	.word	conn_gadget_highspeed_in_desc
	.word	conn_gadget_highspeed_out_desc
	.word	0
	.type	ss_conn_gadget_descs, %object
	.size	ss_conn_gadget_descs, 24
ss_conn_gadget_descs:
	.word	conn_gadget_interface_desc
	.word	conn_gadget_superspeed_in_desc
	.word	conn_gadget_superspeed_bulk_comp_desc
	.word	conn_gadget_superspeed_out_desc
	.word	conn_gadget_superspeed_bulk_comp_desc
	.word	0
	.type	fs_adb_descs, %object
	.size	fs_adb_descs, 16
fs_adb_descs:
	.word	adb_interface_desc
	.word	adb_fullspeed_in_desc
	.word	adb_fullspeed_out_desc
	.word	0
	.type	hs_adb_descs, %object
	.size	hs_adb_descs, 16
hs_adb_descs:
	.word	adb_interface_desc
	.word	adb_highspeed_in_desc
	.word	adb_highspeed_out_desc
	.word	0
	.type	ss_adb_descs, %object
	.size	ss_adb_descs, 24
ss_adb_descs:
	.word	adb_interface_desc
	.word	adb_superspeed_in_desc
	.word	adb_superspeed_in_comp_desc
	.word	adb_superspeed_out_desc
	.word	adb_superspeed_out_comp_desc
	.word	0
	.type	acc_string_defs, %object
	.size	acc_string_defs, 16
acc_string_defs:
	.space	4
	.word	.LC1706
	.space	8
	.type	acc_strings, %object
	.size	acc_strings, 8
acc_strings:
	.word	acc_string_table
	.word	0
	.type	fs_acc_descs, %object
	.size	fs_acc_descs, 16
fs_acc_descs:
	.word	acc_interface_desc
	.word	acc_fullspeed_in_desc
	.word	acc_fullspeed_out_desc
	.word	0
	.type	hs_acc_descs, %object
	.size	hs_acc_descs, 16
hs_acc_descs:
	.word	acc_interface_desc
	.word	acc_highspeed_in_desc
	.word	acc_highspeed_out_desc
	.word	0
	.type	ss_acc_descs, %object
	.size	ss_acc_descs, 24
ss_acc_descs:
	.word	acc_interface_desc
	.word	acc_superspeed_in_desc
	.word	acc_superspeed_in_comp_desc
	.word	acc_superspeed_out_desc
	.word	acc_superspeed_out_comp_desc
	.word	0
	.type	fsg_strings, %object
	.size	fsg_strings, 16
fsg_strings:
	.byte	0
	.space	3
	.word	fsg_string_interface
	.space	8
	.type	fsg_strings_array, %object
	.size	fsg_strings_array, 8
fsg_strings_array:
	.word	fsg_stringtab
	.word	0
	.type	mtp_string_defs, %object
	.size	mtp_string_defs, 16
mtp_string_defs:
	.space	4
	.word	.LC1708
	.space	8
	.type	mtp_strings, %object
	.size	mtp_strings, 8
mtp_strings:
	.word	mtp_string_table
	.word	0
	.type	fs_ptp_descs, %object
	.size	fs_ptp_descs, 20
fs_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_fullspeed_in_desc
	.word	mtp_fullspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	hs_ptp_descs, %object
	.size	hs_ptp_descs, 20
hs_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_highspeed_in_desc
	.word	mtp_highspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	ss_ptp_descs, %object
	.size	ss_ptp_descs, 32
ss_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_superspeed_in_desc
	.word	mtp_superspeed_in_comp_desc
	.word	mtp_superspeed_out_desc
	.word	mtp_superspeed_out_comp_desc
	.word	mtp_intr_desc
	.word	mtp_superspeed_intr_comp_desc
	.word	0
	.type	fs_mtp_descs, %object
	.size	fs_mtp_descs, 20
fs_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_fullspeed_in_desc
	.word	mtp_fullspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	hs_mtp_descs, %object
	.size	hs_mtp_descs, 20
hs_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_highspeed_in_desc
	.word	mtp_highspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	ss_mtp_descs, %object
	.size	ss_mtp_descs, 32
ss_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_superspeed_in_desc
	.word	mtp_superspeed_in_comp_desc
	.word	mtp_superspeed_out_desc
	.word	mtp_superspeed_out_comp_desc
	.word	mtp_intr_desc
	.word	mtp_superspeed_intr_comp_desc
	.word	0
	.type	midi_strings, %object
	.size	midi_strings, 8
midi_strings:
	.word	midi_stringtab
	.word	0
	.type	qdss_string_defs, %object
	.size	qdss_string_defs, 24
qdss_string_defs:
	.space	4
	.word	.LC1763
	.space	4
	.word	.LC1764
	.space	8
	.type	qdss_strings, %object
	.size	qdss_strings, 8
qdss_strings:
	.word	qdss_string_table
	.word	0
	.type	acm_string_defs, %object
	.size	acm_string_defs, 32
acm_string_defs:
	.space	4
	.word	.LC1716
	.space	4
	.word	.LC1717
	.space	4
	.word	.LC1718
	.space	8
	.type	acm_control_interface_desc, %object
	.size	acm_control_interface_desc, 9
acm_control_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	1
	.space	1
	.space	3
	.type	acm_data_interface_desc, %object
	.size	acm_data_interface_desc, 9
acm_data_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	acm_iad_descriptor, %object
	.size	acm_iad_descriptor, 8
acm_iad_descriptor:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	2
	.byte	1
	.space	1
	.type	acm_strings, %object
	.size	acm_strings, 8
acm_strings:
	.word	acm_string_table
	.word	0
	.type	_audio_dev, %object
	.size	_audio_dev, 160
_audio_dev:
	.word	.LC1073
	.space	4
	.word	hs_audio_desc
	.space	4
	.word	fs_audio_desc
	.space	12
	.word	audio_bind
	.word	audio_unbind
	.word	audio_set_alt
	.space	4
	.word	audio_disable
	.word	audio_setup
	.space	28
	.space	12
	.word	_audio_dev+96
	.word	_audio_dev+96
	.space	4
	.word	0
	.space	48
	.type	audio_playback_ops, %object
	.size	audio_playback_ops, 56
audio_playback_ops:
	.word	audio_pcm_open
	.word	audio_pcm_close
	.word	snd_pcm_lib_ioctl
	.word	audio_pcm_hw_params
	.word	audio_pcm_hw_free
	.word	audio_pcm_prepare
	.word	audio_pcm_playback_trigger
	.word	audio_pcm_pointer
	.space	12
	.word	audio_pcm_mmap
	.space	8
	.type	rl.53116, %object
	.size	rl.53116, 24
rl.53116:
	.word	0
	.word	3000
	.word	1
	.space	12
	.type	adb_function, %object
	.size	adb_function, 52
adb_function:
	.word	.LC1055
	.space	20
	.word	adb_function_init
	.word	adb_function_cleanup
	.word	adb_android_function_enable
	.word	adb_android_function_disable
	.word	adb_function_bind_config
	.space	8
	.type	ffs_function, %object
	.size	ffs_function, 52
ffs_function:
	.word	.LC488
	.space	12
	.word	ffs_function_attributes
	.space	4
	.word	ffs_function_init
	.word	ffs_function_cleanup
	.word	ffs_function_enable
	.word	ffs_function_disable
	.word	ffs_function_bind_config
	.space	8
	.type	supported_functions, %object
	.size	supported_functions, 104
supported_functions:
	.word	ffs_function
	.word	mbim_function
	.word	ecm_qc_function
	.word	audio_function
	.word	rmnet_smd_function
	.word	rmnet_sdio_function
	.word	rmnet_smd_sdio_function
	.word	rmnet_function
	.word	diag_function
	.word	qdss_function
	.word	adb_function
	.word	midi_function
	.word	ccid_function
	.word	acm_function
	.word	mtp_function
	.word	ptp_function
	.word	rndis_function
	.word	rndis_qc_function
	.word	ecm_function
	.word	ncm_function
	.word	mass_storage_function
	.word	accessory_function
	.word	conn_gadget_function
	.word	audio_source_function
	.word	uasp_function
	.word	0
	.type	dev_attr_terminal_version, %object
	.size	dev_attr_terminal_version, 16
dev_attr_terminal_version:
	.word	.LC1552
	.short	420
	.space	2
	.word	terminal_version_show
	.word	terminal_version_store
	.type	modem_device, %object
	.size	modem_device, 36
modem_device:
	.word	123
	.word	.LC1719
	.word	modem_fops
	.space	24
	.type	rl.26039, %object
	.size	rl.26039, 24
rl.26039:
	.word	0
	.word	3000
	.word	1
	.space	12
	.type	rl.26057, %object
	.size	rl.26057, 24
rl.26057:
	.word	0
	.word	3000
	.word	1
	.space	12
	.type	rmnet_smd_strings, %object
	.size	rmnet_smd_strings, 8
rmnet_smd_strings:
	.word	rmnet_smd_string_table
	.word	0
	.type	rmnet_smd_fs_function, %object
	.size	rmnet_smd_fs_function, 20
rmnet_smd_fs_function:
	.word	rmnet_smd_interface_desc
	.word	rmnet_smd_fs_notify_desc
	.word	rmnet_smd_fs_in_desc
	.word	rmnet_smd_fs_out_desc
	.word	0
	.type	rmnet_smd_hs_function, %object
	.size	rmnet_smd_hs_function, 20
rmnet_smd_hs_function:
	.word	rmnet_smd_interface_desc
	.word	rmnet_smd_hs_notify_desc
	.word	rmnet_smd_hs_in_desc
	.word	rmnet_smd_hs_out_desc
	.word	0
	.type	rmnet_sdio_strings, %object
	.size	rmnet_sdio_strings, 8
rmnet_sdio_strings:
	.word	rmnet_sdio_string_table
	.word	0
	.type	rmnet_sdio_fs_function, %object
	.size	rmnet_sdio_fs_function, 20
rmnet_sdio_fs_function:
	.word	rmnet_sdio_interface_desc
	.word	rmnet_sdio_fs_notify_desc
	.word	rmnet_sdio_fs_in_desc
	.word	rmnet_sdio_fs_out_desc
	.word	0
	.type	rmnet_sdio_hs_function, %object
	.size	rmnet_sdio_hs_function, 20
rmnet_sdio_hs_function:
	.word	rmnet_sdio_interface_desc
	.word	rmnet_sdio_hs_notify_desc
	.word	rmnet_sdio_hs_in_desc
	.word	rmnet_sdio_hs_out_desc
	.word	0
	.type	sport_info, %object
	.size	sport_info, 24
sport_info:
	.word	.LC1742
	.space	4
	.word	9
	.word	.LC1743
	.space	4
	.word	10
	.type	smd_pi, %object
	.size	smd_pi, 24
smd_pi:
	.space	4
	.word	.LC1736
	.space	4
	.space	4
	.word	.LC1737
	.space	4
	.type	bam_mux_tx_pkt_drop_thld, %object
	.size	bam_mux_tx_pkt_drop_thld, 4
bam_mux_tx_pkt_drop_thld:
	.word	1000
	.type	ghsic_data_serial_tx_q_size, %object
	.size	ghsic_data_serial_tx_q_size, 4
ghsic_data_serial_tx_q_size:
	.word	20
	.type	ghsic_data_serial_rx_q_size, %object
	.size	ghsic_data_serial_rx_q_size, 4
ghsic_data_serial_rx_q_size:
	.word	10
	.type	ghsic_data_rmnet_tx_q_size, %object
	.size	ghsic_data_rmnet_tx_q_size, 4
ghsic_data_rmnet_tx_q_size:
	.word	300
	.type	ghsic_data_rmnet_rx_q_size, %object
	.size	ghsic_data_rmnet_rx_q_size, 4
ghsic_data_rmnet_rx_q_size:
	.word	50
	.type	ghsuart_data_serial_tx_q_size, %object
	.size	ghsuart_data_serial_tx_q_size, 4
ghsuart_data_serial_tx_q_size:
	.word	5
	.type	ghsuart_data_serial_rx_q_size, %object
	.size	ghsuart_data_serial_rx_q_size, 4
ghsuart_data_serial_rx_q_size:
	.word	5
	.type	ghsuart_data_rmnet_tx_q_size, %object
	.size	ghsuart_data_rmnet_tx_q_size, 4
ghsuart_data_rmnet_tx_q_size:
	.word	20
	.type	ghsuart_data_rmnet_rx_q_size, %object
	.size	ghsuart_data_rmnet_rx_q_size, 4
ghsuart_data_rmnet_rx_q_size:
	.word	10
	.type	rmnet_string_defs, %object
	.size	rmnet_string_defs, 16
rmnet_string_defs:
	.space	4
	.word	.LC1752
	.space	8
	.type	rmnet_strings, %object
	.size	rmnet_strings, 8
rmnet_strings:
	.word	rmnet_string_table
	.word	0
	.type	acm_union_desc, %object
	.size	acm_union_desc, 5
acm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	acm_call_mgmt_descriptor, %object
	.size	acm_call_mgmt_descriptor, 5
acm_call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.space	1
	.space	3
	.type	acm_fs_in_desc, %object
	.size	acm_fs_in_desc, 9
acm_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	acm_fs_out_desc, %object
	.size	acm_fs_out_desc, 9
acm_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	acm_fs_notify_desc, %object
	.size	acm_fs_notify_desc, 9
acm_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	10
	.byte	32
	.space	2
	.space	3
	.type	acm_hs_function, %object
	.size	acm_hs_function, 44
acm_hs_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_hs_notify_desc
	.word	acm_data_interface_desc
	.word	acm_hs_in_desc
	.word	acm_hs_out_desc
	.word	0
	.type	acm_ss_function, %object
	.size	acm_ss_function, 56
acm_ss_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_hs_notify_desc
	.word	acm_ss_bulk_comp_desc
	.word	acm_data_interface_desc
	.word	acm_ss_in_desc
	.word	acm_ss_bulk_comp_desc
	.word	acm_ss_out_desc
	.word	acm_ss_bulk_comp_desc
	.word	0
	.type	acm_hs_in_desc, %object
	.size	acm_hs_in_desc, 9
acm_hs_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acm_hs_out_desc, %object
	.size	acm_hs_out_desc, 9
acm_hs_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acm_hs_notify_desc, %object
	.size	acm_hs_notify_desc, 9
acm_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	10
	.byte	9
	.space	2
	.space	3
	.type	acm_ss_in_desc, %object
	.size	acm_ss_in_desc, 9
acm_ss_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acm_ss_out_desc, %object
	.size	acm_ss_out_desc, 9
acm_ss_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acm_fs_function, %object
	.size	acm_fs_function, 44
acm_fs_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_fs_notify_desc
	.word	acm_data_interface_desc
	.word	acm_fs_in_desc
	.word	acm_fs_out_desc
	.word	0
	.type	rndis_string_defs, %object
	.size	rndis_string_defs, 32
rndis_string_defs:
	.space	4
	.word	.LC1623
	.space	4
	.word	.LC1624
	.space	4
	.word	.LC1625
	.space	8
	.type	rndis_dl_max_pkt_per_xfer, %object
	.size	rndis_dl_max_pkt_per_xfer, 4
rndis_dl_max_pkt_per_xfer:
	.word	3
	.type	rndis_strings, %object
	.size	rndis_strings, 8
rndis_strings:
	.word	rndis_string_table
	.word	0
	.type	ecm_qc_desc, %object
	.size	ecm_qc_desc, 13
ecm_qc_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	1514
	.short	0
	.byte	0
	.space	3
	.type	ecm_qc_strings, %object
	.size	ecm_qc_strings, 8
ecm_qc_strings:
	.word	ecm_qc_string_table
	.word	0
	.type	mbim_string_defs, %object
	.size	mbim_string_defs, 24
mbim_string_defs:
	.space	4
	.word	.LC1681
	.space	4
	.word	.LC1682
	.space	8
	.type	mbim_strings, %object
	.size	mbim_strings, 8
mbim_strings:
	.word	mbim_string_table
	.word	0
	.type	ecm_desc, %object
	.size	ecm_desc, 13
ecm_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	1514
	.short	0
	.byte	0
	.space	3
	.type	ecm_strings, %object
	.size	ecm_strings, 8
ecm_strings:
	.word	ecm_string_table
	.word	0
	.type	rndis_qc_string_defs, %object
	.size	rndis_qc_string_defs, 32
rndis_qc_string_defs:
	.space	4
	.word	.LC1623
	.space	4
	.word	.LC1624
	.space	4
	.word	.LC1625
	.space	8
	.type	rndis_qc_strings, %object
	.size	rndis_qc_strings, 8
rndis_qc_strings:
	.word	rndis_qc_string_table
	.word	0
	.type	gadget_type, %object
	.size	gadget_type, 24
gadget_type:
	.word	.LC1611
	.space	20
	.type	qc_gadget_type, %object
	.size	qc_gadget_type, 24
qc_gadget_type:
	.word	.LC1611
	.space	20
	.type	fn_cntl, %object
	.size	fn_cntl, 4
fn_cntl:
	.word	.LC1605
	.type	fn_play, %object
	.size	fn_play, 4
fn_play:
	.word	.LC1607
	.type	fn_cap, %object
	.size	fn_cap, 4
fn_cap:
	.word	.LC1606
	.type	microphone_fu_controls, %object
	.size	microphone_fu_controls, 32
microphone_fu_controls:
	.word	microphone_fu_controls
	.word	microphone_fu_controls
	.space	12
	.word	.LC1587
	.space	8
	.type	speaker_fu_controls, %object
	.size	speaker_fu_controls, 32
speaker_fu_controls:
	.word	speaker_fu_controls
	.word	speaker_fu_controls
	.space	12
	.word	.LC1590
	.space	8
	.type	microphone_mute_control, %object
	.size	microphone_mute_control, 44
microphone_mute_control:
	.word	microphone_mute_control
	.word	microphone_mute_control
	.word	.LC1589
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	microphone_volume_control, %object
	.size	microphone_volume_control, 44
microphone_volume_control:
	.word	microphone_volume_control
	.word	microphone_volume_control
	.word	.LC1588
	.byte	2
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_mute_control, %object
	.size	speaker_mute_control, 44
speaker_mute_control:
	.word	speaker_mute_control
	.word	speaker_mute_control
	.word	.LC1592
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_volume_control, %object
	.size	speaker_volume_control, 44
speaker_volume_control:
	.word	speaker_volume_control
	.word	speaker_volume_control
	.word	.LC1591
	.byte	2
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	microphone_sample_freq_control, %object
	.size	microphone_sample_freq_control, 44
microphone_sample_freq_control:
	.word	microphone_sample_freq_control
	.word	microphone_sample_freq_control
	.word	.LC1584
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_sample_freq_control, %object
	.size	speaker_sample_freq_control, 44
speaker_sample_freq_control:
	.word	speaker_sample_freq_control
	.word	speaker_sample_freq_control
	.word	.LC1586
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	audio_strings, %object
	.size	audio_strings, 8
audio_strings:
	.word	audio_stringtab_dev
	.word	0
	.type	conn_gadget_interface_desc, %object
	.size	conn_gadget_interface_desc, 9
conn_gadget_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	2
	.byte	-1
	.byte	64
	.byte	1
	.space	1
	.space	3
	.type	conn_gadget_fullspeed_in_desc, %object
	.size	conn_gadget_fullspeed_in_desc, 9
conn_gadget_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	conn_gadget_fullspeed_out_desc, %object
	.size	conn_gadget_fullspeed_out_desc, 9
conn_gadget_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	conn_gadget_highspeed_in_desc, %object
	.size	conn_gadget_highspeed_in_desc, 9
conn_gadget_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	conn_gadget_highspeed_out_desc, %object
	.size	conn_gadget_highspeed_out_desc, 9
conn_gadget_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	conn_gadget_superspeed_in_desc, %object
	.size	conn_gadget_superspeed_in_desc, 9
conn_gadget_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	conn_gadget_superspeed_out_desc, %object
	.size	conn_gadget_superspeed_out_desc, 9
conn_gadget_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	necm_desc, %object
	.size	necm_desc, 13
necm_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	9014
	.short	0
	.byte	0
	.space	3
	.type	ncm_strings, %object
	.size	ncm_strings, 8
ncm_strings:
	.word	ncm_string_table
	.word	0
	.type	rl.64448, %object
	.size	rl.64448, 24
rl.64448:
	.word	0
	.word	3000
	.word	1
	.space	12
	.type	rl.53109, %object
	.size	rl.53109, 24
rl.53109:
	.word	0
	.word	3000
	.word	1
	.space	12
	.type	usb_android_dt_match, %object
	.size	usb_android_dt_match, 392
usb_android_dt_match:
	.space	64
	.ascii	"qcom,android-usb\000"
	.space	111
	.space	4
	.space	196
	.type	dev_attr_remote_wakeup, %object
	.size	dev_attr_remote_wakeup, 16
dev_attr_remote_wakeup:
	.word	.LC1500
	.short	420
	.space	2
	.word	remote_wakeup_show
	.word	remote_wakeup_store
	.type	dev_attr_state, %object
	.size	dev_attr_state, 16
dev_attr_state:
	.word	.LC1501
	.short	292
	.space	2
	.word	state_show
	.word	0
	.type	dev_attr_pm_qos, %object
	.size	dev_attr_pm_qos, 16
dev_attr_pm_qos:
	.word	.LC1502
	.short	420
	.space	2
	.word	pm_qos_show
	.word	pm_qos_store
	.type	dev_attr_enable, %object
	.size	dev_attr_enable, 16
dev_attr_enable:
	.word	.LC1503
	.short	420
	.space	2
	.word	enable_show
	.word	enable_store
	.type	dev_attr_functions, %object
	.size	dev_attr_functions, 16
dev_attr_functions:
	.word	.LC1504
	.short	420
	.space	2
	.word	functions_show
	.word	functions_store
	.type	dev_attr_macos, %object
	.size	dev_attr_macos, 16
dev_attr_macos:
	.word	.LC1505
	.short	420
	.space	2
	.word	macos_show
	.word	0
	.type	dev_attr_ss_host_available, %object
	.size	dev_attr_ss_host_available, 16
dev_attr_ss_host_available:
	.word	.LC1506
	.short	420
	.space	2
	.word	ss_host_available_show
	.word	0
	.type	dev_attr_usb30en, %object
	.size	dev_attr_usb30en, 16
dev_attr_usb30en:
	.word	.LC1507
	.short	420
	.space	2
	.word	usb30en_show
	.word	usb30en_store
	.type	dev_attr_bcdUSB, %object
	.size	dev_attr_bcdUSB, 16
dev_attr_bcdUSB:
	.word	.LC1508
	.short	420
	.space	2
	.word	bcdUSB_show
	.word	0
	.type	dev_attr_iSerial, %object
	.size	dev_attr_iSerial, 16
dev_attr_iSerial:
	.word	.LC1509
	.short	420
	.space	2
	.word	iSerial_show
	.word	iSerial_store
	.type	dev_attr_iProduct, %object
	.size	dev_attr_iProduct, 16
dev_attr_iProduct:
	.word	.LC1510
	.short	420
	.space	2
	.word	iProduct_show
	.word	iProduct_store
	.type	dev_attr_iManufacturer, %object
	.size	dev_attr_iManufacturer, 16
dev_attr_iManufacturer:
	.word	.LC1511
	.short	420
	.space	2
	.word	iManufacturer_show
	.word	iManufacturer_store
	.type	dev_attr_bDeviceProtocol, %object
	.size	dev_attr_bDeviceProtocol, 16
dev_attr_bDeviceProtocol:
	.word	.LC1512
	.short	420
	.space	2
	.word	bDeviceProtocol_show
	.word	bDeviceProtocol_store
	.type	dev_attr_bDeviceSubClass, %object
	.size	dev_attr_bDeviceSubClass, 16
dev_attr_bDeviceSubClass:
	.word	.LC1513
	.short	420
	.space	2
	.word	bDeviceSubClass_show
	.word	bDeviceSubClass_store
	.type	dev_attr_bDeviceClass, %object
	.size	dev_attr_bDeviceClass, 16
dev_attr_bDeviceClass:
	.word	.LC1514
	.short	420
	.space	2
	.word	bDeviceClass_show
	.word	bDeviceClass_store
	.type	dev_attr_bcdDevice, %object
	.size	dev_attr_bcdDevice, 16
dev_attr_bcdDevice:
	.word	.LC1515
	.short	420
	.space	2
	.word	bcdDevice_show
	.word	bcdDevice_store
	.type	dev_attr_idProduct, %object
	.size	dev_attr_idProduct, 16
dev_attr_idProduct:
	.word	.LC1516
	.short	420
	.space	2
	.word	idProduct_show
	.word	idProduct_store
	.type	dev_attr_idVendor, %object
	.size	dev_attr_idVendor, 16
dev_attr_idVendor:
	.word	.LC1517
	.short	420
	.space	2
	.word	idVendor_show
	.word	idVendor_store
	.type	uasp_function, %object
	.size	uasp_function, 52
uasp_function:
	.word	.LC1521
	.space	20
	.word	uasp_function_init
	.word	uasp_function_cleanup
	.space	8
	.word	uasp_function_bind_config
	.space	8
	.type	audio_source_function, %object
	.size	audio_source_function, 52
audio_source_function:
	.word	.LC1073
	.space	12
	.word	audio_source_function_attributes
	.space	4
	.word	audio_source_function_init
	.word	audio_source_function_cleanup
	.space	8
	.word	audio_source_function_bind_config
	.word	audio_source_function_unbind_config
	.space	4
	.type	audio_source_function_attributes, %object
	.size	audio_source_function_attributes, 8
audio_source_function_attributes:
	.word	dev_attr_pcm
	.word	0
	.type	dev_attr_pcm, %object
	.size	dev_attr_pcm, 16
dev_attr_pcm:
	.word	.LC1523
	.short	420
	.space	2
	.word	audio_source_pcm_show
	.word	0
	.type	accessory_function, %object
	.size	accessory_function, 52
accessory_function:
	.word	.LC1057
	.space	20
	.word	accessory_function_init
	.word	accessory_function_cleanup
	.space	8
	.word	accessory_function_bind_config
	.space	4
	.word	accessory_function_ctrlrequest
	.type	mass_storage_function, %object
	.size	mass_storage_function, 52
mass_storage_function:
	.word	.LC1524
	.space	12
	.word	mass_storage_function_attributes
	.space	4
	.word	mass_storage_function_init
	.word	mass_storage_function_cleanup
	.space	8
	.word	mass_storage_function_bind_config
	.space	8
	.type	mass_storage_function_attributes, %object
	.size	mass_storage_function_attributes, 20
mass_storage_function_attributes:
	.word	dev_attr_inquiry_string
	.word	dev_attr_vendor_string
	.word	dev_attr_product_string
	.word	dev_attr_sua_version_info
	.word	0
	.type	dev_attr_sua_version_info, %object
	.size	dev_attr_sua_version_info, 16
dev_attr_sua_version_info:
	.word	.LC1525
	.short	420
	.space	2
	.word	sua_version_info_show
	.word	sua_version_info_store
	.type	dev_attr_product_string, %object
	.size	dev_attr_product_string, 16
dev_attr_product_string:
	.word	.LC1526
	.short	420
	.space	2
	.word	mass_storage_product_show
	.word	mass_storage_product_store
	.type	dev_attr_vendor_string, %object
	.size	dev_attr_vendor_string, 16
dev_attr_vendor_string:
	.word	.LC1527
	.short	420
	.space	2
	.word	mass_storage_vendor_show
	.word	mass_storage_vendor_store
	.type	dev_attr_inquiry_string, %object
	.size	dev_attr_inquiry_string, 16
dev_attr_inquiry_string:
	.word	.LC1528
	.short	420
	.space	2
	.word	mass_storage_inquiry_show
	.word	mass_storage_inquiry_store
	.type	ecm_function, %object
	.size	ecm_function, 52
ecm_function:
	.word	.LC1383
	.space	12
	.word	ecm_function_attributes
	.space	4
	.word	ecm_function_init
	.word	ecm_function_cleanup
	.space	8
	.word	ecm_function_bind_config
	.word	ecm_function_unbind_config
	.space	4
	.type	rndis_qc_function, %object
	.size	rndis_qc_function, 52
rndis_qc_function:
	.word	.LC1529
	.space	12
	.word	rndis_function_attributes
	.space	4
	.word	rndis_qc_function_init
	.word	rndis_qc_function_cleanup
	.space	8
	.word	rndis_qc_function_bind_config
	.word	rndis_qc_function_unbind_config
	.space	4
	.type	rndis_function, %object
	.size	rndis_function, 52
rndis_function:
	.word	.LC1312
	.space	12
	.word	rndis_function_attributes
	.space	4
	.word	rndis_function_init
	.word	rndis_function_cleanup
	.space	8
	.word	rndis_function_bind_config
	.word	rndis_function_unbind_config
	.space	4
	.type	rndis_function_attributes, %object
	.size	rndis_function_attributes, 24
rndis_function_attributes:
	.word	dev_attr_manufacturer
	.word	dev_attr_wceis
	.word	dev_attr_ethaddr
	.word	dev_attr_vendorID
	.word	dev_attr_max_pkt_per_xfer
	.word	0
	.type	dev_attr_max_pkt_per_xfer, %object
	.size	dev_attr_max_pkt_per_xfer, 16
dev_attr_max_pkt_per_xfer:
	.word	.LC1530
	.short	420
	.space	2
	.word	rndis_max_pkt_per_xfer_show
	.word	rndis_max_pkt_per_xfer_store
	.type	dev_attr_vendorID, %object
	.size	dev_attr_vendorID, 16
dev_attr_vendorID:
	.word	.LC1531
	.short	420
	.space	2
	.word	rndis_vendorID_show
	.word	rndis_vendorID_store
	.type	dev_attr_ethaddr, %object
	.size	dev_attr_ethaddr, 16
dev_attr_ethaddr:
	.word	.LC1532
	.short	420
	.space	2
	.word	rndis_ethaddr_show
	.word	rndis_ethaddr_store
	.type	dev_attr_wceis, %object
	.size	dev_attr_wceis, 16
dev_attr_wceis:
	.word	.LC1533
	.short	420
	.space	2
	.word	rndis_wceis_show
	.word	rndis_wceis_store
	.type	dev_attr_manufacturer, %object
	.size	dev_attr_manufacturer, 16
dev_attr_manufacturer:
	.word	.LC1534
	.short	420
	.space	2
	.word	rndis_manufacturer_show
	.word	rndis_manufacturer_store
	.type	ptp_function, %object
	.size	ptp_function, 52
ptp_function:
	.word	.LC1535
	.space	20
	.word	ptp_function_init
	.word	ptp_function_cleanup
	.space	8
	.word	ptp_function_bind_config
	.space	4
	.word	mtp_function_ctrlrequest
	.type	mtp_function, %object
	.size	mtp_function, 52
mtp_function:
	.word	.LC1061
	.space	20
	.word	mtp_function_init
	.word	mtp_function_cleanup
	.space	8
	.word	mtp_function_bind_config
	.space	4
	.word	mtp_function_ctrlrequest
	.type	ccid_function, %object
	.size	ccid_function, 52
ccid_function:
	.word	.LC958
	.space	20
	.word	ccid_function_init
	.word	ccid_function_cleanup
	.space	8
	.word	ccid_function_bind_config
	.space	8
	.type	qdss_function, %object
	.size	qdss_function, 52
qdss_function:
	.word	.LC1064
	.space	20
	.word	qdss_function_init
	.word	qdss_function_cleanup
	.space	8
	.word	qdss_function_bind_config
	.space	8
	.type	diag_function, %object
	.size	diag_function, 52
diag_function:
	.word	.LC1536
	.space	12
	.word	diag_function_attributes
	.space	4
	.word	diag_function_init
	.word	diag_function_cleanup
	.space	8
	.word	diag_function_bind_config
	.space	8
	.type	diag_function_attributes, %object
	.size	diag_function_attributes, 8
diag_function_attributes:
	.word	dev_attr_clients
	.word	0
	.type	dev_attr_clients, %object
	.size	dev_attr_clients, 16
dev_attr_clients:
	.word	.LC1537
	.short	128
	.space	2
	.word	0
	.word	clients_store
	.type	audio_function, %object
	.size	audio_function, 52
audio_function:
	.word	.LC1418
	.space	36
	.word	audio_function_bind_config
	.space	8
	.type	mbim_function, %object
	.size	mbim_function, 52
mbim_function:
	.word	.LC1368
	.space	12
	.word	mbim_function_attributes
	.space	4
	.word	mbim_function_init
	.word	mbim_function_cleanup
	.space	8
	.word	mbim_function_bind_config
	.space	4
	.word	mbim_function_ctrlrequest
	.type	mbim_function_attributes, %object
	.size	mbim_function_attributes, 8
mbim_function_attributes:
	.word	dev_attr_mbim_transports
	.word	0
	.type	dev_attr_mbim_transports, %object
	.size	dev_attr_mbim_transports, 16
dev_attr_mbim_transports:
	.word	.LC1538
	.short	420
	.space	2
	.word	mbim_transports_show
	.word	mbim_transports_store
	.type	ecm_qc_function, %object
	.size	ecm_qc_function, 52
ecm_qc_function:
	.word	.LC1540
	.space	12
	.word	ecm_function_attributes
	.space	4
	.word	ecm_function_init
	.word	ecm_function_cleanup
	.space	8
	.word	ecm_qc_function_bind_config
	.word	ecm_qc_function_unbind_config
	.space	4
	.type	ecm_function_attributes, %object
	.size	ecm_function_attributes, 12
ecm_function_attributes:
	.word	dev_attr_ecm_transports
	.word	dev_attr_ecm_ethaddr
	.word	0
	.type	dev_attr_ecm_transports, %object
	.size	dev_attr_ecm_transports, 16
dev_attr_ecm_transports:
	.word	.LC1541
	.short	420
	.space	2
	.word	ecm_transports_show
	.word	ecm_transports_store
	.type	dev_attr_ecm_ethaddr, %object
	.size	dev_attr_ecm_ethaddr, 16
dev_attr_ecm_ethaddr:
	.word	.LC1542
	.short	420
	.space	2
	.word	ecm_ethaddr_show
	.word	ecm_ethaddr_store
	.type	rmnet_function, %object
	.size	rmnet_function, 52
rmnet_function:
	.word	.LC1197
	.space	12
	.word	rmnet_function_attributes
	.space	8
	.word	rmnet_function_cleanup
	.space	8
	.word	rmnet_function_bind_config
	.space	8
	.type	rmnet_function_attributes, %object
	.size	rmnet_function_attributes, 12
rmnet_function_attributes:
	.word	dev_attr_rmnet_transports
	.word	dev_attr_rmnet_xport_names
	.word	0
	.type	dev_attr_rmnet_xport_names, %object
	.size	dev_attr_rmnet_xport_names, 16
dev_attr_rmnet_xport_names:
	.word	.LC1544
	.short	420
	.space	2
	.word	rmnet_xport_names_show
	.word	rmnet_xport_names_store
	.type	dev_attr_rmnet_transports, %object
	.size	dev_attr_rmnet_transports, 16
dev_attr_rmnet_transports:
	.word	.LC1545
	.short	420
	.space	2
	.word	rmnet_transports_show
	.word	rmnet_transports_store
	.type	rmnet_smd_sdio_function, %object
	.size	rmnet_smd_sdio_function, 52
rmnet_smd_sdio_function:
	.word	.LC962
	.space	12
	.word	rmnet_smd_sdio_attributes
	.space	4
	.word	rmnet_smd_sdio_function_init
	.word	rmnet_smd_sdio_function_cleanup
	.space	8
	.word	rmnet_smd_sdio_bind_config
	.space	8
	.type	rmnet_smd_sdio_attributes, %object
	.size	rmnet_smd_sdio_attributes, 8
rmnet_smd_sdio_attributes:
	.word	dev_attr_transport
	.word	0
	.type	rmnet_sdio_function, %object
	.size	rmnet_sdio_function, 52
rmnet_sdio_function:
	.word	.LC1199
	.space	36
	.word	rmnet_sdio_function_bind_config
	.space	8
	.type	rmnet_smd_function, %object
	.size	rmnet_smd_function, 52
rmnet_smd_function:
	.word	.LC1546
	.space	36
	.word	rmnet_smd_function_bind_config
	.space	8
	.type	acm_function, %object
	.size	acm_function, 52
acm_function:
	.word	.LC1464
	.space	12
	.word	acm_function_attributes
	.space	4
	.word	acm_function_init
	.word	acm_function_cleanup
	.space	8
	.word	acm_function_bind_config
	.space	8
	.type	acm_function_attributes, %object
	.size	acm_function_attributes, 8
acm_function_attributes:
	.word	dev_attr_instances
	.word	0
	.type	dev_attr_instances, %object
	.size	dev_attr_instances, 16
dev_attr_instances:
	.word	.LC1547
	.short	420
	.space	2
	.word	acm_instances_show
	.word	acm_instances_store
	.type	midi_function, %object
	.size	midi_function, 52
midi_function:
	.word	.LC1548
	.space	12
	.word	midi_function_attributes
	.space	4
	.word	midi_function_init
	.word	midi_function_cleanup
	.space	8
	.word	midi_function_bind_config
	.space	8
	.type	midi_function_attributes, %object
	.size	midi_function_attributes, 8
midi_function_attributes:
	.word	dev_attr_alsa
	.word	0
	.type	dev_attr_alsa, %object
	.size	dev_attr_alsa, 16
dev_attr_alsa:
	.word	.LC1549
	.short	292
	.space	2
	.word	midi_alsa_show
	.word	0
	.type	ffs_function_attributes, %object
	.size	ffs_function_attributes, 8
ffs_function_attributes:
	.word	dev_attr_aliases
	.word	0
	.type	dev_attr_aliases, %object
	.size	dev_attr_aliases, 16
dev_attr_aliases:
	.word	.LC1551
	.short	420
	.space	2
	.word	ffs_aliases_show
	.word	ffs_aliases_store
	.type	dev_strings, %object
	.size	dev_strings, 8
dev_strings:
	.word	stringtab_dev
	.word	0
	.type	stringtab_dev, %object
	.size	stringtab_dev, 8
stringtab_dev:
	.short	1033
	.space	2
	.word	strings_dev
	.type	ncm_function, %object
	.size	ncm_function, 52
ncm_function:
	.word	.LC859
	.space	20
	.word	ncm_function_init
	.word	ncm_function_cleanup
	.space	8
	.word	ncm_function_bind_config
	.word	ncm_function_unbind_config
	.space	4
	.type	ncm_string_table, %object
	.size	ncm_string_table, 8
ncm_string_table:
	.short	1033
	.space	2
	.word	ncm_string_defs
	.type	ncm_desc, %object
	.size	ncm_desc, 6
ncm_desc:
	.byte	6
	.byte	36
	.byte	26
	.2byte	256
	.byte	9
	.space	2
	.type	ncm_header_desc, %object
	.size	ncm_header_desc, 5
ncm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	conn_gadget_function, %object
	.size	conn_gadget_function, 52
conn_gadget_function:
	.word	.LC1053
	.space	12
	.word	conn_gadget_function_attributes
	.space	4
	.word	conn_gadget_function_init
	.word	conn_gadget_function_cleanup
	.space	8
	.word	conn_gadget_function_bind_config
	.space	8
	.type	conn_gadget_function_attributes, %object
	.size	conn_gadget_function_attributes, 16
conn_gadget_function_attributes:
	.word	dev_attr_usb_buffer_size
	.word	dev_attr_out_max_packet_size
	.word	dev_attr_in_max_packet_size
	.word	0
	.type	dev_attr_in_max_packet_size, %object
	.size	dev_attr_in_max_packet_size, 16
dev_attr_in_max_packet_size:
	.word	.LC1557
	.short	420
	.space	2
	.word	conn_gadget_in_max_packet_size_show
	.word	conn_gadget_in_max_packet_size_store
	.type	dev_attr_out_max_packet_size, %object
	.size	dev_attr_out_max_packet_size, 16
dev_attr_out_max_packet_size:
	.word	.LC1558
	.short	420
	.space	2
	.word	conn_gadget_out_max_packet_size_show
	.word	conn_gadget_out_max_packet_size_store
	.type	dev_attr_usb_buffer_size, %object
	.size	dev_attr_usb_buffer_size, 16
dev_attr_usb_buffer_size:
	.word	.LC1559
	.short	420
	.space	2
	.word	conn_gadget_usb_buffer_size_show
	.word	conn_gadget_usb_buffer_size_store
	.type	conn_gadget_superspeed_bulk_comp_desc, %object
	.size	conn_gadget_superspeed_bulk_comp_desc, 6
conn_gadget_superspeed_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	___modver_attr, %object
	.size	___modver_attr, 36
___modver_attr:
	.word	.LC1565
	.short	292
	.space	2
	.word	__modver_version_show
	.space	16
	.word	.LC954
	.word	.LC1566
	.type	audio_stringtab_dev, %object
	.size	audio_stringtab_dev, 8
audio_stringtab_dev:
	.short	1033
	.space	2
	.word	audio_string_defs
	.type	microphone_as_iso_in_desc, %object
	.size	microphone_as_iso_in_desc, 7
microphone_as_iso_in_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	microphone_as_header_desc, %object
	.size	microphone_as_header_desc, 7
microphone_as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	2
	.byte	1
	.2byte	1
	.space	1
	.type	speaker_as_iso_out_desc, %object
	.size	speaker_as_iso_out_desc, 7
speaker_as_iso_out_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	speaker_as_header_desc, %object
	.size	speaker_as_header_desc, 7
speaker_as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	3
	.byte	1
	.2byte	1
	.space	1
	.type	microphone_output_terminal_desc, %object
	.size	microphone_output_terminal_desc, 9
microphone_output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	2
	.short	257
	.byte	1
	.byte	1
	.space	1
	.space	3
	.type	speaker_output_terminal_desc, %object
	.size	speaker_output_terminal_desc, 9
speaker_output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	4
	.short	769
	.byte	3
	.byte	3
	.space	1
	.space	3
	.type	req_capture_count, %object
	.size	req_capture_count, 4
req_capture_count:
	.word	48
	.type	rndis_qc_string_table, %object
	.size	rndis_qc_string_table, 8
rndis_qc_string_table:
	.short	1033
	.space	2
	.word	rndis_qc_string_defs
	.type	rndis_qc_ss_bulk_comp_desc, %object
	.size	rndis_qc_ss_bulk_comp_desc, 6
rndis_qc_ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rndis_qc_ss_intr_comp_desc, %object
	.size	rndis_qc_ss_intr_comp_desc, 6
rndis_qc_ss_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	rndis_qc_acm_descriptor, %object
	.size	rndis_qc_acm_descriptor, 4
rndis_qc_acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	0
	.type	rndis_qc_call_mgmt_descriptor, %object
	.size	rndis_qc_call_mgmt_descriptor, 5
rndis_qc_call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.byte	1
	.space	3
	.type	rndis_qc_header_desc, %object
	.size	rndis_qc_header_desc, 5
rndis_qc_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	ecm_string_table, %object
	.size	ecm_string_table, 8
ecm_string_table:
	.short	1033
	.space	2
	.word	ecm_string_defs
	.type	ss_ecm_bulk_comp_desc, %object
	.size	ss_ecm_bulk_comp_desc, 6
ss_ecm_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_ecm_intr_comp_desc, %object
	.size	ss_ecm_intr_comp_desc, 6
ss_ecm_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	16
	.space	2
	.type	ecm_header_desc, %object
	.size	ecm_header_desc, 5
ecm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	mbim_string_table, %object
	.size	mbim_string_table, 8
mbim_string_table:
	.short	1033
	.space	2
	.word	mbim_string_defs
	.type	ss_mbim_out_comp_desc, %object
	.size	ss_mbim_out_comp_desc, 6
ss_mbim_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_mbim_in_comp_desc, %object
	.size	ss_mbim_in_comp_desc, 6
ss_mbim_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_mbim_notify_comp_desc, %object
	.size	ss_mbim_notify_comp_desc, 6
ss_mbim_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	64
	.space	2
	.type	ext_mbb_desc, %object
	.size	ext_mbb_desc, 8
ext_mbb_desc:
	.byte	8
	.byte	36
	.byte	28
	.2byte	256
	.byte	64
	.short	1500
	.type	mbim_header_desc, %object
	.size	mbim_header_desc, 5
mbim_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	ecm_qc_string_table, %object
	.size	ecm_qc_string_table, 8
ecm_qc_string_table:
	.short	1033
	.space	2
	.word	ecm_qc_string_defs
	.type	ecm_qc_ss_out_comp_desc, %object
	.size	ecm_qc_ss_out_comp_desc, 6
ecm_qc_ss_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ecm_qc_ss_in_comp_desc, %object
	.size	ecm_qc_ss_in_comp_desc, 6
ecm_qc_ss_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ecm_qc_ss_notify_comp_desc, %object
	.size	ecm_qc_ss_notify_comp_desc, 6
ecm_qc_ss_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	16
	.space	2
	.type	ecm_qc_header_desc, %object
	.size	ecm_qc_header_desc, 5
ecm_qc_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	rndis_string_table, %object
	.size	rndis_string_table, 8
rndis_string_table:
	.short	1033
	.space	2
	.word	rndis_string_defs
	.type	ss_bulk_comp_desc, %object
	.size	ss_bulk_comp_desc, 6
ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_intr_comp_desc, %object
	.size	ss_intr_comp_desc, 6
ss_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	rndis_acm_descriptor, %object
	.size	rndis_acm_descriptor, 4
rndis_acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	0
	.type	call_mgmt_descriptor, %object
	.size	call_mgmt_descriptor, 5
call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.byte	1
	.space	3
	.type	header_desc, %object
	.size	header_desc, 5
header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	acc_string_table, %object
	.size	acc_string_table, 8
acc_string_table:
	.short	1033
	.space	2
	.word	acc_string_defs
	.type	acc_superspeed_out_comp_desc, %object
	.size	acc_superspeed_out_comp_desc, 6
acc_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acc_superspeed_in_comp_desc, %object
	.size	acc_superspeed_in_comp_desc, 6
acc_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	mtp_string_table, %object
	.size	mtp_string_table, 8
mtp_string_table:
	.short	1033
	.space	2
	.word	mtp_string_defs
	.type	mtp_superspeed_intr_comp_desc, %object
	.size	mtp_superspeed_intr_comp_desc, 6
mtp_superspeed_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	28
	.space	2
	.type	mtp_superspeed_out_comp_desc, %object
	.size	mtp_superspeed_out_comp_desc, 6
mtp_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.byte	2
	.space	3
	.space	2
	.type	mtp_superspeed_in_comp_desc, %object
	.size	mtp_superspeed_in_comp_desc, 6
mtp_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.byte	2
	.space	3
	.space	2
	.type	ptp_interface_desc, %object
	.size	ptp_interface_desc, 9
ptp_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	3
	.byte	6
	.byte	1
	.byte	1
	.space	1
	.space	3
	.type	midi_stringtab, %object
	.size	midi_stringtab, 8
midi_stringtab:
	.short	1033
	.space	2
	.word	midi_string_defs
	.type	adb_superspeed_out_comp_desc, %object
	.size	adb_superspeed_out_comp_desc, 6
adb_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	adb_superspeed_in_comp_desc, %object
	.size	adb_superspeed_in_comp_desc, 6
adb_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acm_string_table, %object
	.size	acm_string_table, 8
acm_string_table:
	.short	1033
	.space	2
	.word	acm_string_defs
	.type	acm_ss_bulk_comp_desc, %object
	.size	acm_ss_bulk_comp_desc, 6
acm_ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acm_descriptor, %object
	.size	acm_descriptor, 4
acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	2
	.type	acm_header_desc, %object
	.size	acm_header_desc, 5
acm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	fsg_stringtab, %object
	.size	fsg_stringtab, 8
fsg_stringtab:
	.short	1033
	.space	2
	.word	fsg_strings
	.type	fs_audio_desc, %object
	.size	fs_audio_desc, 48
fs_audio_desc:
	.word	audio_source_ac_interface_desc
	.word	audio_source_ac_header_desc
	.word	input_terminal_desc
	.word	output_terminal_desc
	.word	feature_unit_desc
	.word	as_interface_alt_0_desc
	.word	as_interface_alt_1_desc
	.word	as_header_desc
	.word	as_type_i_desc
	.word	fs_as_in_ep_desc
	.word	as_iso_in_desc
	.word	0
	.type	hs_audio_desc, %object
	.size	hs_audio_desc, 48
hs_audio_desc:
	.word	audio_source_ac_interface_desc
	.word	audio_source_ac_header_desc
	.word	input_terminal_desc
	.word	output_terminal_desc
	.word	feature_unit_desc
	.word	as_interface_alt_0_desc
	.word	as_interface_alt_1_desc
	.word	as_header_desc
	.word	as_type_i_desc
	.word	hs_as_in_ep_desc
	.word	as_iso_in_desc
	.word	0
	.type	as_iso_in_desc, %object
	.size	as_iso_in_desc, 7
as_iso_in_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	as_header_desc, %object
	.size	as_header_desc, 7
as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	output_terminal_desc, %object
	.size	output_terminal_desc, 9
output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	3
	.short	257
	.byte	2
	.byte	2
	.space	1
	.space	3
	.type	feature_unit_desc, %object
	.size	feature_unit_desc, 9
feature_unit_desc:
	.byte	9
	.byte	36
	.byte	6
	.byte	2
	.byte	1
	.byte	2
	.space	3
	.space	3
	.type	audio_source_ac_header_desc, %object
	.size	audio_source_ac_header_desc, 10
audio_source_ac_header_desc:
	.byte	10
	.byte	36
	.byte	1
	.2byte	256
	.2byte	40
	.byte	2
	.byte	0
	.byte	1
	.space	2
	.type	rmnet_string_table, %object
	.size	rmnet_string_table, 8
rmnet_string_table:
	.short	1033
	.space	2
	.word	rmnet_string_defs
	.type	rmnet_ss_out_comp_desc, %object
	.size	rmnet_ss_out_comp_desc, 6
rmnet_ss_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rmnet_ss_in_comp_desc, %object
	.size	rmnet_ss_in_comp_desc, 6
rmnet_ss_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rmnet_ss_notify_comp_desc, %object
	.size	rmnet_ss_notify_comp_desc, 6
rmnet_ss_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	dev_attr_transport, %object
	.size	dev_attr_transport, 16
dev_attr_transport:
	.word	.LC1755
	.short	420
	.space	2
	.word	0
	.word	transport_store
	.type	rmnet_mux_string_table, %object
	.size	rmnet_mux_string_table, 8
rmnet_mux_string_table:
	.short	1033
	.space	2
	.word	rmnet_mux_string_defs
	.type	rmnet_mux_string_defs, %object
	.size	rmnet_mux_string_defs, 16
rmnet_mux_string_defs:
	.space	4
	.word	.LC1752
	.space	8
	.type	mux_sdio_rx_fctrl_dis_thld, %object
	.size	mux_sdio_rx_fctrl_dis_thld, 4
mux_sdio_rx_fctrl_dis_thld:
	.word	500
	.type	mux_sdio_tx_pkt_drop_thld, %object
	.size	mux_sdio_tx_pkt_drop_thld, 4
mux_sdio_tx_pkt_drop_thld:
	.word	1000
	.type	rmnet_sdio_string_table, %object
	.size	rmnet_sdio_string_table, 8
rmnet_sdio_string_table:
	.short	1033
	.space	2
	.word	rmnet_sdio_string_defs
	.type	rmnet_sdio_string_defs, %object
	.size	rmnet_sdio_string_defs, 16
rmnet_sdio_string_defs:
	.space	4
	.word	.LC1760
	.space	8
	.type	sdio_rx_fctrl_dis_thld, %object
	.size	sdio_rx_fctrl_dis_thld, 4
sdio_rx_fctrl_dis_thld:
	.word	500
	.type	sdio_tx_pkt_drop_thld, %object
	.size	sdio_tx_pkt_drop_thld, 4
sdio_tx_pkt_drop_thld:
	.word	1000
	.type	rmnet_smd_string_table, %object
	.size	rmnet_smd_string_table, 8
rmnet_smd_string_table:
	.short	1033
	.space	2
	.word	rmnet_smd_string_defs
	.type	rmnet_smd_string_defs, %object
	.size	rmnet_smd_string_defs, 16
rmnet_smd_string_defs:
	.space	4
	.word	.LC1760
	.space	8
	.type	qdss_string_table, %object
	.size	qdss_string_table, 8
qdss_string_table:
	.short	1033
	.space	2
	.word	qdss_string_defs
	.type	ss_bulk_out_comp_desc, %object
	.size	ss_bulk_out_comp_desc, 6
ss_bulk_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_bulk_in_comp_desc, %object
	.size	ss_bulk_in_comp_desc, 6
ss_bulk_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.bss
	.align	2
	.set	.LANCHOR1,. + 0
	.type	n_sdio_ports, %object
	.size	n_sdio_ports, 4
n_sdio_ports:
	.space	4
	.type	sdio_ports, %object
	.size	sdio_ports, 208
sdio_ports:
	.space	208
	.type	n_smd_ports, %object
	.size	n_smd_ports, 4
n_smd_ports:
	.space	4
	.type	smd_ports, %object
	.size	smd_ports, 208
smd_ports:
	.space	208
	.type	n_bam_ports, %object
	.size	n_bam_ports, 4
n_bam_ports:
	.space	4
	.type	bam_ports, %object
	.size	bam_ports, 84
bam_ports:
	.space	84
	.type	ctrl_smd_ports, %object
	.size	ctrl_smd_ports, 504
ctrl_smd_ports:
	.space	504
	.type	no_ctrl_ports, %object
	.size	no_ctrl_ports, 4
no_ctrl_ports:
	.space	4
	.type	gctrl_ports, %object
	.size	gctrl_ports, 416
gctrl_ports:
	.space	416
	.type	no_data_ports, %object
	.size	no_data_ports, 4
no_data_ports:
	.space	4
	.type	gdata_ports, %object
	.size	gdata_ports, 416
gdata_ports:
	.space	416
	.type	num_ctrl_ports, %object
	.size	num_ctrl_ports, 4
num_ctrl_ports:
	.space	4
	.type	ghsuart_ctrl_ports, %object
	.size	ghsuart_ctrl_ports, 168
ghsuart_ctrl_ports:
	.space	168
	.type	num_data_ports, %object
	.size	num_data_ports, 4
num_data_ports:
	.space	4
	.type	ghsuart_data_ports, %object
	.size	ghsuart_data_ports, 168
ghsuart_data_ports:
	.space	168
	.type	read_state, %object
	.size	read_state, 4
read_state:
	.space	4
	.type	modem_wait_q, %object
	.size	modem_wait_q, 12
modem_wait_q:
	.space	12
	.type	audio_reinit, %object
	.size	audio_reinit, 1
audio_reinit:
	.space	1
	.space	3
	.type	serial_string, %object
	.size	serial_string, 256
serial_string:
	.space	256
	.type	composite, %object
	.size	composite, 4
composite:
	.space	4
	.type	rmux_dev, %object
	.size	rmux_dev, 4
rmux_dev:
	.space	4
	.type	_conn_gadget_dev, %object
	.size	_conn_gadget_dev, 4
_conn_gadget_dev:
	.space	4
	.type	_acc_dev, %object
	.size	_acc_dev, 4
_acc_dev:
	.space	4
	.type	rndis_lock, %object
	.size	rndis_lock, 4
rndis_lock:
	.space	4
	.type	_rndis_qc, %object
	.size	_rndis_qc, 4
_rndis_qc:
	.space	4
	.type	_mtp_dev, %object
	.size	_mtp_dev, 4
_mtp_dev:
	.space	4
	.type	_mbim_dev, %object
	.size	_mbim_dev, 4
_mbim_dev:
	.space	4
	.type	product_string, %object
	.size	product_string, 256
product_string:
	.space	256
	.type	manufacturer_string, %object
	.size	manufacturer_string, 256
manufacturer_string:
	.space	256
	.type	ecm_transports, %object
	.size	ecm_transports, 50
ecm_transports:
	.space	50
	.space	2
	.type	rmnet_xport_names, %object
	.size	rmnet_xport_names, 50
rmnet_xport_names:
	.space	50
	.space	2
	.type	rmnet_transports, %object
	.size	rmnet_transports, 50
rmnet_transports:
	.space	50
	.space	2
	.type	mbim_transports, %object
	.size	mbim_transports, 50
mbim_transports:
	.space	50
	.type	usb30en, %object
	.size	usb30en, 1
usb30en:
	.space	1
	.space	1
	.type	ctrl_port, %object
	.size	ctrl_port, 4
ctrl_port:
	.space	4
	.type	android_dev_list, %object
	.size	android_dev_list, 8
android_dev_list:
	.space	8
	.type	rmnet_ports, %object
	.size	rmnet_ports, 72
rmnet_ports:
	.space	72
	.type	uether_wq, %object
	.size	uether_wq, 4
uether_wq:
	.space	4
	.type	rmnet_smd, %object
	.size	rmnet_smd, 4
rmnet_smd:
	.space	4
	.type	gserial_wq, %object
	.size	gserial_wq, 4
gserial_wq:
	.space	4
	.type	gsdio_wq, %object
	.size	gsdio_wq, 4
gsdio_wq:
	.space	4
	.type	gsmd_wq, %object
	.size	gsmd_wq, 4
gsmd_wq:
	.space	4
	.type	__key.47537, %object
	.size	__key.47537, 0
__key.47537:
	.type	__key.47538, %object
	.size	__key.47538, 0
__key.47538:
	.type	ports, %object
	.size	ports, 192
ports:
	.space	192
	.type	d_lock, %object
	.size	d_lock, 4
d_lock:
	.space	4
	.type	dent_smd, %object
	.size	dent_smd, 4
dent_smd:
	.space	4
	.type	ghsuart_ctrl_dent, %object
	.size	ghsuart_ctrl_dent, 4
ghsuart_ctrl_dent:
	.space	4
	.type	ghsuart_data_dent, %object
	.size	ghsuart_data_dent, 4
ghsuart_data_dent:
	.space	4
	.type	dent_diag, %object
	.size	dent_diag, 4
dent_diag:
	.space	4
	.type	ch_lock, %object
	.size	ch_lock, 4
ch_lock:
	.space	4
	.type	nr_rmnet_ports, %object
	.size	nr_rmnet_ports, 4
nr_rmnet_ports:
	.space	4
	.type	gbam_dent, %object
	.size	gbam_dent, 4
gbam_dent:
	.space	4
	.type	no_ctrl_smd_ports, %object
	.size	no_ctrl_smd_ports, 4
no_ctrl_smd_ports:
	.space	4
	.type	no_ctrl_qti_ports, %object
	.size	no_ctrl_qti_ports, 4
no_ctrl_qti_ports:
	.space	4
	.type	no_data_bam_ports, %object
	.size	no_data_bam_ports, 4
no_data_bam_ports:
	.space	4
	.type	no_data_bam2bam_ports, %object
	.size	no_data_bam2bam_ports, 4
no_data_bam2bam_ports:
	.space	4
	.type	no_ctrl_hsic_ports, %object
	.size	no_ctrl_hsic_ports, 4
no_ctrl_hsic_ports:
	.space	4
	.type	no_data_hsic_ports, %object
	.size	no_data_hsic_ports, 4
no_data_hsic_ports:
	.space	4
	.type	no_ctrl_hsuart_ports, %object
	.size	no_ctrl_hsuart_ports, 4
no_ctrl_hsuart_ports:
	.space	4
	.type	no_data_hsuart_ports, %object
	.size	no_data_hsuart_ports, 4
no_data_hsuart_ports:
	.space	4
	.type	android_dev_count, %object
	.size	android_dev_count, 4
android_dev_count:
	.space	4
	.type	_ccid_dev, %object
	.size	_ccid_dev, 4
_ccid_dev:
	.space	4
	.type	_adb_dev, %object
	.size	_adb_dev, 4
_adb_dev:
	.space	4
	.type	control_line_state, %object
	.size	control_line_state, 4
control_line_state:
	.space	4
	.type	grmnet_ctrl_wq, %object
	.size	grmnet_ctrl_wq, 4
grmnet_ctrl_wq:
	.space	4
	.type	smd_ctrl_dent, %object
	.size	smd_ctrl_dent, 4
smd_ctrl_dent:
	.space	4
	.type	smd_ctrl_dfile, %object
	.size	smd_ctrl_dfile, 4
smd_ctrl_dfile:
	.space	4
	.type	online_clients, %object
	.size	online_clients, 1
online_clients:
	.space	1
	.space	3
	.type	gctrl_dent, %object
	.size	gctrl_dent, 4
gctrl_dent:
	.space	4
	.type	gctrl_dfile, %object
	.size	gctrl_dfile, 4
gctrl_dfile:
	.space	4
	.type	gdata_dent, %object
	.size	gdata_dent, 4
gdata_dent:
	.space	4
	.type	gdata_dfile_stats, %object
	.size	gdata_dfile_stats, 4
gdata_dfile_stats:
	.space	4
	.type	gdata_dfile_tstamp, %object
	.size	gdata_dfile_tstamp, 4
gdata_dfile_tstamp:
	.space	4
	.type	diag_dev_list, %object
	.size	diag_dev_list, 8
diag_dev_list:
	.space	8
	.type	n_tx_req_queued, %object
	.size	n_tx_req_queued, 4
n_tx_req_queued:
	.space	4
	.type	gbam_wq, %object
	.size	gbam_wq, 4
gbam_wq:
	.space	4
	.type	retry_cnt.38340, %object
	.size	retry_cnt.38340, 4
retry_cnt.38340:
	.space	4
	.type	diag_dload, %object
	.size	diag_dload, 4
diag_dload:
	.space	4
	.type	diag_clients, %object
	.size	diag_clients, 32
diag_clients:
	.space	32
	.type	ipa_params, %object
	.size	ipa_params, 28
ipa_params:
	.space	28
	.type	__key.50162, %object
	.size	__key.50162, 0
__key.50162:
	.type	__key.55909, %object
	.size	__key.55909, 0
__key.55909:
	.type	__key.55910, %object
	.size	__key.55910, 0
__key.55910:
	.type	__key.54549, %object
	.size	__key.54549, 0
__key.54549:
	.type	__key.54550, %object
	.size	__key.54550, 0
__key.54550:
	.type	__key.54551, %object
	.size	__key.54551, 0
__key.54551:
	.type	__key.53169, %object
	.size	__key.53169, 0
__key.53169:
	.type	__key.53170, %object
	.size	__key.53170, 0
__key.53170:
	.type	__key.38437, %object
	.size	__key.38437, 0
__key.38437:
	.type	__key.38565, %object
	.size	__key.38565, 0
__key.38565:
	.type	dent_rmnet_mux, %object
	.size	dent_rmnet_mux, 4
dent_rmnet_mux:
	.space	4
	.type	_ncm_dev, %object
	.size	_ncm_dev, 4
_ncm_dev:
	.space	4
	.type	mbim_ports, %object
	.size	mbim_ports, 8
mbim_ports:
	.space	8
	.type	nr_mbim_ports, %object
	.size	nr_mbim_ports, 4
nr_mbim_ports:
	.space	4
	.type	rndis_ul_max_xfer_size_rcvd, %object
	.size	rndis_ul_max_xfer_size_rcvd, 4
rndis_ul_max_xfer_size_rcvd:
	.space	4
	.type	rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	rndis_ul_max_pkt_per_xfer_rcvd, 4
rndis_ul_max_pkt_per_xfer_rcvd:
	.space	4
	.type	__key.62880, %object
	.size	__key.62880, 0
__key.62880:
	.type	__key.62881, %object
	.size	__key.62881, 0
__key.62881:
	.type	__key.62882, %object
	.size	__key.62882, 0
__key.62882:
	.type	ncm_connect, %object
	.size	ncm_connect, 1
ncm_connect:
	.space	1
	.space	3
	.type	android_class, %object
	.size	android_class, 4
android_class:
	.space	4
	.type	__key.45635, %object
	.size	__key.45635, 0
__key.45635:
	.type	composite_string_index, %object
	.size	composite_string_index, 4
composite_string_index:
	.space	4
	.type	next_state.63446, %object
	.size	next_state.63446, 4
next_state.63446:
	.space	4
	.type	last_uevent.63445, %object
	.size	last_uevent.63445, 4
last_uevent.63445:
	.space	4
	.type	epnum, %object
	.size	epnum, 4
epnum:
	.space	4
	.type	composite_gadget_bind, %object
	.size	composite_gadget_bind, 4
composite_gadget_bind:
	.space	4
	.type	idVendor, %object
	.size	idVendor, 2
idVendor:
	.space	2
	.type	idProduct, %object
	.size	idProduct, 2
idProduct:
	.space	2
	.type	bcdDevice, %object
	.size	bcdDevice, 2
bcdDevice:
	.space	2
	.space	2
	.type	iManufacturer, %object
	.size	iManufacturer, 4
iManufacturer:
	.space	4
	.type	composite_manufacturer, %object
	.size	composite_manufacturer, 50
composite_manufacturer:
	.space	50
	.space	2
	.type	iProduct, %object
	.size	iProduct, 4
iProduct:
	.space	4
	.type	iSerialNumber, %object
	.size	iSerialNumber, 4
iSerialNumber:
	.space	4
	.type	terminal_mode_version, %object
	.size	terminal_mode_version, 2
terminal_mode_version:
	.space	2
	.type	terminal_mode_vendor_id, %object
	.size	terminal_mode_vendor_id, 2
terminal_mode_vendor_id:
	.space	2
	.type	record_timestamp, %object
	.size	record_timestamp, 4
record_timestamp:
	.space	4
	.type	bam2bam_ports, %object
	.size	bam2bam_ports, 12
bam2bam_ports:
	.space	12
	.type	rndis_per_dev_params, %object
	.size	rndis_per_dev_params, 60
rndis_per_dev_params:
	.space	60
	.type	rndis_initialized, %object
	.size	rndis_initialized, 1
rndis_initialized:
	.space	1
	.space	3
	.type	__key.57710, %object
	.size	__key.57710, 0
__key.57710:
	.type	__key.57711, %object
	.size	__key.57711, 0
__key.57711:
	.type	bam2bam_data_ports, %object
	.size	bam2bam_data_ports, 4
bam2bam_data_ports:
	.space	4
	.type	bam_data_wq, %object
	.size	bam_data_wq, 4
bam_data_wq:
	.space	4
	.type	n_bam2bam_data_ports, %object
	.size	n_bam2bam_data_ports, 4
n_bam2bam_data_ports:
	.space	4
	.type	__key.53552, %object
	.size	__key.53552, 0
__key.53552:
	.type	__key.53491, %object
	.size	__key.53491, 0
__key.53491:
	.type	__key.53492, %object
	.size	__key.53492, 0
__key.53492:
	.type	gs_tty_driver, %object
	.size	gs_tty_driver, 4
gs_tty_driver:
	.space	4
	.type	__key.47591, %object
	.size	__key.47591, 0
__key.47591:
	.type	n_ports, %object
	.size	n_ports, 4
n_ports:
	.space	4
	.type	gs_dent, %object
	.size	gs_dent, 4
gs_dent:
	.space	4
	.type	prev_len.47300, %object
	.size	prev_len.47300, 4
prev_len.47300:
	.space	4
	.type	write_error_after_csw_sent, %object
	.size	write_error_after_csw_sent, 4
write_error_after_csw_sent:
	.space	4
	.type	csw_hack_sent, %object
	.size	csw_hack_sent, 4
csw_hack_sent:
	.space	4
	.type	__key.44709, %object
	.size	__key.44709, 0
__key.44709:
	.type	__key.44711, %object
	.size	__key.44711, 0
__key.44711:
	.type	__key.8269, %object
	.size	__key.8269, 0
__key.8269:
	.type	the_dev, %object
	.size	the_dev, 4
the_dev:
	.space	4
	.type	acm_data, %object
	.size	acm_data, 4
acm_data:
	.space	4
	.type	the_card, %object
	.size	the_card, 4
the_card:
	.space	4
	.type	retry_cnt.37579, %object
	.size	retry_cnt.37579, 4
retry_cnt.37579:
	.space	4
	.type	rmnet_mux_smd_data_ch, %object
	.size	rmnet_mux_smd_data_ch, 4
rmnet_mux_smd_data_ch:
	.space	4
	.type	__key.46295, %object
	.size	__key.46295, 0
__key.46295:
	.type	__key.46304, %object
	.size	__key.46304, 0
__key.46304:
	.type	__key.64854, %object
	.size	__key.64854, 0
__key.64854:
	.type	__key.64859, %object
	.size	__key.64859, 0
__key.64859:
	.type	__key.52755, %object
	.size	__key.52755, 0
__key.52755:
	.type	new_product_name.45917, %object
	.size	new_product_name.45917, 17
new_product_name.45917:
	.space	17
	.space	3
	.type	unknown.46111, %object
	.size	unknown.46111, 16
unknown.46111:
	.space	16
	.type	bam_info, %object
	.size	bam_info, 16
bam_info:
	.space	16
	.type	__key.32157, %object
	.size	__key.32157, 0
__key.32157:
	.type	__key.32158, %object
	.size	__key.32158, 0
__key.32158:
	.type	__key.48534, %object
	.size	__key.48534, 0
__key.48534:
	.type	__key.48892, %object
	.size	__key.48892, 0
__key.48892:
	.type	n_bam2bam_ports, %object
	.size	n_bam2bam_ports, 4
n_bam2bam_ports:
	.space	4
	.type	__key.49902, %object
	.size	__key.49902, 0
__key.49902:
	.type	__key.49903, %object
	.size	__key.49903, 0
__key.49903:
	.type	port_num.51108, %object
	.size	port_num.51108, 4
port_num.51108:
	.space	4
	.type	port_num.51780, %object
	.size	port_num.51780, 4
port_num.51780:
	.space	4
	.type	rmnet_initialized.63702, %object
	.size	rmnet_initialized.63702, 4
rmnet_initialized.63702:
	.space	4
	.type	ports.63703, %object
	.size	ports.63703, 4
ports.63703:
	.space	4
	.type	qc_dev_addr, %object
	.size	qc_dev_addr, 4
qc_dev_addr:
	.space	4
	.type	qc_host_addr, %object
	.size	qc_host_addr, 4
qc_host_addr:
	.space	4
	.type	dev_addr, %object
	.size	dev_addr, 4
dev_addr:
	.space	4
	.type	__key.44746, %object
	.size	__key.44746, 0
__key.44746:
	.type	__key.44747, %object
	.size	__key.44747, 0
__key.44747:
	.type	audio_string_defs, %object
	.size	audio_string_defs, 8
audio_string_defs:
	.space	8
	.type	host_addr, %object
	.size	host_addr, 4
host_addr:
	.space	4
	.type	dbg_data, %object
	.size	dbg_data, 4104
dbg_data:
	.space	4104
	.type	rmnet_mux_sdio_data_ch, %object
	.size	rmnet_mux_sdio_data_ch, 4
rmnet_mux_sdio_data_ch:
	.space	4
	.type	rmnet_mux_sdio_ctl_ch, %object
	.size	rmnet_mux_sdio_ctl_ch, 4
rmnet_mux_sdio_ctl_ch:
	.space	4
	.type	rmnet_sdio_data_ch, %object
	.size	rmnet_sdio_data_ch, 4
rmnet_sdio_data_ch:
	.space	4
	.type	rmnet_sdio_ctl_ch, %object
	.size	rmnet_sdio_ctl_ch, 4
rmnet_sdio_ctl_ch:
	.space	4
	.type	debug_buffer, %object
	.size	debug_buffer, 4096
debug_buffer:
	.space	4096
	.section	.data.unlikely,"aw"
	.set	.LANCHOR7,. + 0
	.type	__warned.11075, %object
	.size	__warned.11075, 1
__warned.11075:
	.space	1
	.section	.devinit.rodata,"a"
	.align	2
	.type	android_id_table, %object
	.size	android_id_table, 48
android_id_table:
	.ascii	"android_usb\000"
	.space	8
	.space	4
	.ascii	"android_usb_hsic\000"
	.space	3
	.space	4
	.section	.exitcall.exit,"aw"
	.align	2
	.type	__exitcall_cleanup, %object
	.size	__exitcall_cleanup, 4
__exitcall_cleanup:
	.word	cleanup
	.type	__exitcall_gether_exit, %object
	.size	__exitcall_gether_exit, 4
__exitcall_gether_exit:
	.word	gether_exit
	.type	__exitcall_ghsuart_data_exit, %object
	.size	__exitcall_ghsuart_data_exit, 4
__exitcall_ghsuart_data_exit:
	.word	ghsuart_data_exit
	.type	__exitcall_ghsuart_ctrl_exit, %object
	.size	__exitcall_ghsuart_ctrl_exit, 4
__exitcall_ghsuart_ctrl_exit:
	.word	ghsuart_ctrl_exit
	.type	__exitcall_ghsic_data_exit, %object
	.size	__exitcall_ghsic_data_exit, 4
__exitcall_ghsic_data_exit:
	.word	ghsic_data_exit
	.type	__exitcall_gctrl_exit, %object
	.size	__exitcall_gctrl_exit, 4
__exitcall_gctrl_exit:
	.word	gctrl_exit
	.type	__exitcall_gqti_ctrl_cleanup, %object
	.size	__exitcall_gqti_ctrl_cleanup, 4
__exitcall_gqti_ctrl_cleanup:
	.word	gqti_ctrl_cleanup
	.type	__exitcall_gsmd_ctrl_exit, %object
	.size	__exitcall_gsmd_ctrl_exit, 4
__exitcall_gsmd_ctrl_exit:
	.word	gsmd_ctrl_exit
	.section	.initcall6.init,"aw"
	.align	2
	.type	__initcall_init6, %object
	.size	__initcall_init6, 4
__initcall_init6:
	.word	init
	.type	__initcall_gether_init6, %object
	.size	__initcall_gether_init6, 4
__initcall_gether_init6:
	.word	gether_init
	.type	__initcall_ghsuart_data_init6, %object
	.size	__initcall_ghsuart_data_init6, 4
__initcall_ghsuart_data_init6:
	.word	ghsuart_data_init
	.type	__initcall_ghsuart_ctrl_init6, %object
	.size	__initcall_ghsuart_ctrl_init6, 4
__initcall_ghsuart_ctrl_init6:
	.word	ghsuart_ctrl_init
	.type	__initcall_ghsic_data_init6, %object
	.size	__initcall_ghsic_data_init6, 4
__initcall_ghsic_data_init6:
	.word	ghsic_data_init
	.type	__initcall_gctrl_init6, %object
	.size	__initcall_gctrl_init6, 4
__initcall_gctrl_init6:
	.word	gctrl_init
	.type	__initcall_gqti_ctrl_init6, %object
	.size	__initcall_gqti_ctrl_init6, 4
__initcall_gqti_ctrl_init6:
	.word	gqti_ctrl_init
	.type	__initcall_gsmd_ctrl_init6, %object
	.size	__initcall_gsmd_ctrl_init6, 4
__initcall_gsmd_ctrl_init6:
	.word	gsmd_ctrl_init
	.section	.rodata.str1.4,"aMS",%progbits,1
	.align	2
.LC0:
	.ascii	"rmnet notify ep error %d\012\000"
	.space	2
.LC1:
	.ascii	"rmnet notify ep enqueue error %d\012\000"
	.space	2
.LC2:
	.ascii	"rmnet notifyep error %d\012\000"
	.space	3
.LC3:
	.ascii	"rmnet notify ep enq error %d\012\000"
	.space	2
.LC4:
	.ascii	"rmnet_mux notifyep error %d\012\000"
	.space	3
.LC5:
	.ascii	"reset config\012\000"
	.space	2
.LC6:
	.ascii	"setup complete --> %d, %d/%d\012\000"
	.space	2
.LC7:
	.ascii	"resume\012\000"
.LC8:
	.ascii	"suspend\012\000"
	.space	3
.LC9:
	.ascii	"diag_function_disable\012\000"
	.space	1
.LC10:
	.ascii	"acm ttyGS%d completion, err %d\012\000"
.LC11:
	.ascii	"acm ttyGS%d short resp, len %d\012\000"
.LC12:
	.ascii	"disable\012\000"
	.space	3
.LC13:
	.ascii	"RNDIS %s response error %d, %d/%d\012\000"
	.space	1
.LC14:
	.ascii	"notify/1 --> %d\012\000"
	.space	3
.LC15:
	.ascii	"notify/0 --> %d\012\000"
	.space	3
.LC16:
	.ascii	"true\000"
	.space	3
.LC17:
	.ascii	"false\000"
	.space	2
.LC18:
	.ascii	"notify connect %s\012\000"
	.space	1
.LC19:
	.ascii	"notify speed %d\012\000"
	.space	3
.LC20:
	.ascii	"notify --> %d\012\000"
	.space	1
.LC21:
	.ascii	"%s\012\000"
.LC22:
	.ascii	"event %02x --> %d\012\000"
	.space	1
.LC23:
	.ascii	"packet filter %02x\012\000"
.LC24:
	.ascii	"invalid control req%02x.%02x v%04x i%04x l%d\012\000"
	.space	2
.LC25:
	.ascii	"ecm req%02x.%02x v%04x i%04x l%d\012\000"
	.space	2
.LC26:
	.ascii	"ecm req %02x.%02x response err %d\012\000"
	.space	1
.LC27:
	.ascii	"Bad control-OUT transfer\012\000"
	.space	2
.LC28:
	.ascii	"Got wrong INPUT SIZE (%d) from host\012\000"
	.space	3
.LC29:
	.ascii	"rmnet control SDIO write failed\012\000"
	.space	3
.LC30:
	.ascii	"ctrl resp queue empty %02x.%02x v%04x i%04x l%d\012"
	.ascii	"\000"
	.space	3
.LC31:
	.ascii	"rmnet_mux ep0 enqueue err %d\012\000"
	.space	2
.LC32:
	.ascii	"rmnet data rx enqueue err %d\012\000"
	.space	2
.LC33:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_f"
	.ascii	"s.c\000"
	.space	1
.LC34:
	.ascii	"<3>%s: device is already opened\012\000"
	.space	3
.LC35:
	.ascii	"<3>%s: ecm req %02x.%02x response err %d\012\000"
	.space	2
.LC36:
	.ascii	"<3>%s: %s(): cdev or config is NULL.\012\000"
	.space	2
.LC37:
	.ascii	"<6>%s: RNDIS %s response error %d, %d/%d\012\000"
	.space	2
.LC38:
	.ascii	"<6>%s: notify/0 --> %d\012\000"
.LC39:
	.ascii	"<3>%s: Failed to allocate playback_copy_buf\000"
.LC40:
	.ascii	"<3>%s: Failed to allocate playback_copy_buf buffer\000"
	.space	1
.LC41:
	.ascii	"<6>conn_gadget_release\012\000"
.LC42:
	.ascii	"<6>list_for_each...\012\000"
	.space	3
.LC43:
	.ascii	"NCM16 selected\012\000"
.LC44:
	.ascii	"NCM32 selected\012\000"
.LC45:
	.ascii	"non-CRC mode selected\012\000"
	.space	1
.LC46:
	.ascii	"CRC mode selected\012\000"
	.space	1
.LC47:
	.ascii	"<3>usb:%s * Host asked current MaxDatagramSize, sen"
	.ascii	"ding %d *\012\000"
	.space	2
.LC48:
	.ascii	"ncm req%02x.%02x v%04x i%04x l%d\012\000"
	.space	2
.LC49:
	.ascii	"ncm req %02x.%02x response err %d\012\000"
	.space	1
.LC50:
	.ascii	"<3>usb:%s * Bad control-OUT transfer *\012\000"
.LC51:
	.ascii	"<3>usb:%s * Got wrong MTU SIZE (%d) from host *\012"
	.ascii	"\000"
	.space	3
.LC52:
	.ascii	"<3>usb:%s * MTU SIZE is larger than NTB SIZE (%d) f"
	.ascii	"rom host * \012\000"
.LC53:
	.ascii	"<3>************************************************"
	.ascii	"*\012\000"
	.space	2
.LC54:
	.ascii	"<3>usb:%s * Set MTU SIZE %d *\012\000"
	.space	1
.LC55:
	.ascii	"<3>acc_complete_set_string, err %d\012\000"
.LC56:
	.ascii	"<3>unknown accessory string index %d\012\000"
	.space	2
.LC57:
	.ascii	"<6>acc_release\012\000"
.LC58:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_a"
	.ascii	"ccessory.c\000"
	.space	2
.LC59:
	.ascii	"<6>acc_open\012\000"
	.space	3
.LC60:
	.ascii	"<7>usb: %s buf=%s[%d], %s\012\000"
	.space	1
.LC61:
	.ascii	"<6>%s: Close rndis QC file\000"
	.space	1
.LC62:
	.ascii	"<3>%s: rndis_qc_dev not present\012\000"
	.space	3
.LC63:
	.ascii	"<6>%s: Open rndis QC driver\012\000"
	.space	3
.LC64:
	.ascii	"<3>%s: rndis_qc_dev not created yet\012\000"
	.space	3
.LC65:
	.ascii	"<3>%s: Already opened\012\000"
	.space	1
.LC66:
	.ascii	"<6>%s: rndis QC file opened\012\000"
	.space	3
.LC67:
	.ascii	"<6>mtp_release\012\000"
.LC68:
	.ascii	"<6>mtp_open\012\000"
	.space	3
.LC69:
	.ascii	"<3>CCID notify ep error %d\012\000"
.LC70:
	.ascii	"<6>%s: Close mbim file\000"
	.space	1
.LC71:
	.ascii	"<6>%s: Open mbim driver\012\000"
	.space	3
.LC72:
	.ascii	"<3>%s: mbim_dev not created yet\012\000"
	.space	3
.LC73:
	.ascii	"<6>%s: Lock mbim_dev->open_excl for open\012\000"
	.space	2
.LC74:
	.ascii	"<3>%s: USB cable not connected\012\000"
.LC75:
	.ascii	"<6>%s: Exit, mbim file opened\012\000"
	.space	1
.LC76:
	.ascii	"<3>%s: port:%pK port#%d unable to open sdio ch:%s\012"
	.ascii	"\000"
	.space	1
.LC77:
	.ascii	"%d\012\000"
.LC78:
	.ascii	"CONFIGURED\000"
	.space	1
.LC79:
	.ascii	"DISCONNECTED\000"
	.space	3
.LC80:
	.ascii	"CONNECTED\000"
	.space	2
.LC81:
	.ascii	"<7>usb: %s buf=%s\012\000"
	.space	1
.LC82:
	.ascii	"<7>usb: %s dev->enabled=%d\012\000"
.LC83:
	.ascii	"%s\000"
	.space	1
.LC84:
	.ascii	"%04x\012\000"
	.space	2
.LC85:
	.ascii	"%d %d\012\000"
	.space	1
.LC86:
	.ascii	"%02x:%02x:%02x:%02x:%02x:%02x\012\000"
	.space	1
.LC87:
	.ascii	"common->fsg is NULL in %s at %u\012\000"
	.space	3
.LC88:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_m"
	.ascii	"ass_storage.c\000"
	.space	3
.LC89:
	.ascii	"error in submission: %s --> %d\012\000"
.LC90:
	.ascii	"failed to override string ID\012\000"
	.space	2
.LC91:
	.ascii	"rmnet %s response error %d, %d/%d\012\000"
	.space	1
.LC92:
	.ascii	"rmnet_mux %s response error %d, %d/%d\012\000"
	.space	1
.LC93:
	.ascii	"%01x\012\000"
	.space	2
.LC94:
	.ascii	"%u\012\000"
.LC95:
	.ascii	", H%c=%u\000"
	.space	3
.LC96:
	.ascii	"%s is buggy! Expected length %d but we got %d\012\000"
	.space	1
.LC97:
	.ascii	"using LUN %d from CBW, not LUN %d from CDB\012\000"
.LC98:
	.ascii	"unsupported LUN %d\012\000"
.LC99:
	.ascii	"%s\015\012\000"
	.space	3
.LC100:
	.ascii	"<7>usb: %s version %s\012\000"
	.space	1
.LC101:
	.ascii	"/home/jprim/hlte/lolz_rebase/include/linux/netdevic"
	.ascii	"e.h\000"
	.space	1
.LC102:
	.ascii	"<6>netif_stop_queue() cannot be called before regis"
	.ascii	"ter_netdev()\012\000"
	.space	3
.LC103:
	.ascii	"qdss_ctrl_read_complete\012\000"
	.space	3
.LC104:
	.ascii	"qdss_ctrl_write_complete\012\000"
	.space	2
.LC105:
	.ascii	"<3>%s: port is null\012\000"
	.space	3
.LC106:
	.ascii	"%s: USB disconnected\012\000"
	.space	2
.LC107:
	.ascii	"<3>%s: usb ep out queue failedport:%pK, port#%d\012"
	.ascii	"\000"
	.space	3
.LC108:
	.ascii	"<3>%s: port->port_usb is NULL\000"
	.space	2
.LC109:
	.ascii	"%s: dequeue\012\000"
	.space	3
.LC110:
	.ascii	"<3>%s: error dequeuing transfer, %d\012\000"
	.space	3
.LC111:
	.ascii	"%s: enqueue\012\000"
	.space	3
.LC112:
	.ascii	"<3>%s: error enqueuing transfer, %d\012\000"
	.space	3
.LC113:
	.ascii	"%s: woken up by peer\012\000"
	.space	2
.LC114:
	.ascii	"%s status: %d\012\000"
	.space	1
.LC115:
	.ascii	"Close rmnet control file\000"
	.space	3
.LC116:
	.ascii	"Open rmnet_ctrl_qti device file\012\000"
	.space	3
.LC117:
	.ascii	"Already opened\012\000"
.LC118:
	.ascii	"<3>%s: Invalid portno#%d\012\000"
	.space	2
.LC119:
	.ascii	"%s: ctrl_pkt:%d bytes\012\000"
	.space	1
.LC120:
	.ascii	"%s - input control lines: dcd%c dsr%c break%c ring%"
	.ascii	"c framing%c parity%c overrun%c\012\000"
	.space	1
.LC121:
	.ascii	"<3>%s: write error:%d\012\000"
	.space	1
.LC122:
	.ascii	"<3>%s: Bad control-OUT transfer\012\000"
	.space	3
.LC123:
	.ascii	"<3>%s: Illegal INPUT SIZE (%d) from host\012\000"
	.space	2
.LC124:
	.ascii	"<3>%s: Illegal NTB length %d\012\000"
	.space	2
.LC125:
	.ascii	"%s: Set NTB INPUT SIZE %d\012\000"
	.space	1
.LC126:
	.ascii	"<3>%s: %s: Failed\012\000"
	.space	1
.LC127:
	.ascii	"%s: %s: dequeue\012\000"
	.space	3
.LC128:
	.ascii	"<3>%s: %s: error dequeuing transfer, %d\012\000"
	.space	3
.LC129:
	.ascii	"%s: %s: status: %d\012\000"
.LC130:
	.ascii	"%s: USB_DIR_OUT | USB_TYPE_CLASS | USB_RECIP_INTERF"
	.ascii	"ACE\000"
	.space	1
.LC131:
	.ascii	"%s: bRequest 0x%x, w_value 0x%04x, len %d, entity %"
	.ascii	"d\012\000"
	.space	2
.LC132:
	.ascii	"%s: USB_DIR_IN | USB_TYPE_CLASS | USB_RECIP_INTERFA"
	.ascii	"CE\000"
	.space	2
.LC133:
	.ascii	"%s: USB_DIR_OUT | USB_TYPE_CLASS | USB_RECIP_ENDPOI"
	.ascii	"NT\000"
	.space	2
.LC134:
	.ascii	"%s: bRequest 0x%x, w_value 0x%04x, len %d, endp %d,"
	.ascii	" epnum %d\012\000"
	.space	2
.LC135:
	.ascii	"<3>%s: Unknown command\000"
	.space	1
.LC136:
	.ascii	"%s: USB_DIR_IN | USB_TYPE_CLASS | USB_RECIP_ENDPOIN"
	.ascii	"T\000"
	.space	3
.LC137:
	.ascii	"%s: bRequest 0x%x, w_value 0x%04x, len %d, ep %d\012"
	.ascii	"\000"
	.space	2
.LC138:
	.ascii	"<3>%s: Unknown control request %02x.%02x v%04x i%04"
	.ascii	"x l%d\012\000"
	.space	2
.LC139:
	.ascii	"%s: audio req %02x.%02x v%04x i%04x l%d\012\000"
	.space	3
.LC140:
	.ascii	"<3>%s: audio response failed on err %d\012\000"
.LC141:
	.ascii	"<3>%s: STALL\012\000"
	.space	2
.LC142:
	.ascii	"%s: setting streaming_enabled to false.\012\000"
	.space	3
.LC143:
	.ascii	"<3>%s: %s is enabled in other device\012\000"
	.space	2
.LC144:
	.ascii	"<3>%s: Failed to alloc f_holder\012\000"
	.space	3
.LC145:
	.ascii	"%s: func:%s is enabled.\012\000"
	.space	3
.LC146:
	.ascii	"%s: set streaming_enabled to true\012\000"
	.space	1
.LC147:
	.ascii	"ccid_bulk_release\012\000"
	.space	1
.LC148:
	.ascii	"qdss_eps_disable\012\000"
	.space	2
.LC149:
	.ascii	"%s:dev:%pK portno#%d\012\000"
	.space	2
.LC150:
	.ascii	"%s: Invalid notify_count=%lu to decrement\012\000"
	.space	1
.LC151:
	.ascii	"ep enqueue error %d\012\000"
	.space	3
.LC152:
	.ascii	"%s:dev:%pK port#%d\012\000"
.LC153:
	.ascii	"%s: usb cable is not connected\012\000"
.LC154:
	.ascii	"<3>ctrl resp queue empty  req%02x.%02x v%04x i%04x "
	.ascii	"l%d\012\000"
.LC155:
	.ascii	"rmnet ep0 enqueue err %d\012\000"
	.space	2
.LC156:
	.ascii	"%s: dev:%pK port#%d\012\000"
	.space	3
.LC157:
	.ascii	"<3>rmnet notify ep error %d\012\000"
	.space	3
.LC158:
	.ascii	"<3>%s: Invalid notify_count=%lu to decrement\012\000"
	.space	2
.LC159:
	.ascii	"%s: %02x.%02x v%04x i%04x l%u\000"
	.space	2
.LC160:
	.ascii	"<3>%s: response queue error: %d\000"
.LC161:
	.ascii	"entity DESCRIPTOR(%02lx); ret = %d\012\000"
.LC162:
	.ascii	"entity INTERFACE(%02x); ret = %d\012\000"
	.space	2
.LC163:
	.ascii	"entity STRING(%02x); ret = %d\012\000"
	.space	1
.LC164:
	.ascii	"entity ENDPOINT(%02x); ret = %d\012\000"
	.space	3
.LC165:
	.ascii	"%s returns %d\012\000"
	.space	1
.LC166:
	.ascii	"%s: portno:%d\012\000"
	.space	1
.LC167:
	.ascii	"queue\000"
	.space	2
.LC168:
	.ascii	"%s: %s %s err %d\012\000"
	.space	2
.LC169:
	.ascii	"uether\000"
	.space	1
.LC170:
	.ascii	"<3>%s: %s: Unable to create workqueue: uether\012\000"
	.space	1
.LC171:
	.ascii	"Probe called for device: %s\012\000"
	.space	3
.LC172:
	.ascii	"qmi resp empty  req%02x.%02x v%04x i%04x l%d\012\000"
	.space	2
.LC173:
	.ascii	"%s: ep:%pK port:%pK\012\000"
	.space	3
.LC174:
	.ascii	"<4>%s: port:%pK port#%d unexpected %s status %d\012"
	.ascii	"\000"
	.space	3
.LC175:
	.ascii	"%s: %s shutdown\012\000"
	.space	3
.LC176:
	.ascii	"<3>%s: invalid portno#%d\012\000"
	.space	2
.LC177:
	.ascii	"<3>%s: gser is null\012\000"
	.space	3
.LC178:
	.ascii	"%s: port:%pK port#%d ctrl_bits:%08x\012\000"
	.space	3
.LC179:
	.ascii	"<3>%s: port:%pK port#%d sdio not connected\012\000"
.LC180:
	.ascii	"%s: name:%s\012\000"
	.space	3
.LC181:
	.ascii	"%s: name:%s num_data_ports= %d\012\000"
.LC182:
	.ascii	"<3>%s: invalid port: %d\012\000"
	.space	3
.LC183:
	.ascii	"qdss_disable\012\000"
	.space	2
.LC184:
	.ascii	"smd_control_ch_opened: %lu\012smd_data_ch_opened: %"
	.ascii	"lu\012usb online : %d\012dpkts_from_modem: %lu\012d"
	.ascii	"pkts_to_host: %lu\012pending_dpkts_to_host: %lu\012"
	.ascii	"dpkts_from_host: %lu\012dpkts_to_modem: %lu\012pend"
	.ascii	"ing_dpkts_to_modem: %lu\012cpkts_from_modem: %lu\012"
	.ascii	"cpkts_to_host: %lu\012pending_cpkts_to_host: %lu\012"
	.ascii	"cpkts_from_host: %lu\012cpkts_to_modem: %lu\012pend"
	.ascii	"ing_cpkts_to_modem: %lu\012smd_read_avail_ctrl: %d\012"
	.ascii	"smd_write_avail_ctrl: %d\012smd_read_avail_data: %d"
	.ascii	"\012smd_write_avail_data: %d\012\000"
.LC185:
	.ascii	"-*-DATA-*-\012dpkts_tohost:%lu epInPool:%u tx_size:"
	.ascii	"%u drp_cnt:%lu\012dpkts_tomodem:%lu epOutPool:%u rx"
	.ascii	"_size:%u pending:%u\012-*-QMI-*-\012cpkts_tomodem:%"
	.ascii	"lu  qmi_req_q:%u cbits:%d\012cpkts_tolaptop:%lu qmi"
	.ascii	"_resp_q:%u notify_cnt:%d\012-*-MISC-*-\012data_ch_s"
	.ascii	"tatus: %lu ctrl_ch_status: %lu\012\000"
	.space	2
.LC186:
	.ascii	"UNDEFINED\000"
	.space	2
.LC187:
	.ascii	"dpkts_tomsm:  %lu\012dpkts_tomdm: %lu\012cpkts_tomd"
	.ascii	"m: %lu\012dpkts_tolaptop: %lu\012cpkts_tolaptop:  %"
	.ascii	"lu\012cbits_to_modem: %lu\012tx skb size:     %u\012"
	.ascii	"rx_skb_size:     %u\012dpkts_pending_at_dmux: %u\012"
	.ascii	"tx drp cnt: %lu\012cpkts_drp_cnt: %lu\012cpkt_tx_ql"
	.ascii	"en: %lu\012cpkt_rx_qlen_to_modem: %lu\012xport: %s\012"
	.ascii	"ctr_ch_opened:\011%d\012\000"
.LC188:
	.ascii	"<3>usb: tty or gser is NULL !!\012\000"
.LC189:
	.ascii	"nbytes_from_host: %lu\012\000"
	.space	1
.LC190:
	.ascii	"nbytes_to_tty: %lu\012\000"
.LC191:
	.ascii	"nbytes_with_usb_OUT_txr: %lu\012\000"
	.space	2
.LC192:
	.ascii	"nbytes_from_tty: %lu\012\000"
	.space	2
.LC193:
	.ascii	"nbytes_to_host: %lu\012\000"
	.space	3
.LC194:
	.ascii	"nbytes_with_usb_IN_txr: %lu\012\000"
	.space	3
.LC195:
	.ascii	"tty_flags: %lu\012\000"
.LC196:
	.ascii	"DTR_status: %d\012\000"
.LC197:
	.ascii	"###PORT:%d port:%pK###\012nbytes_tolaptop: %lu\012n"
	.ascii	"bytes_tomodem:  %lu\012cbits_to_modem:  %u\012cbits"
	.ascii	"_to_laptop: %u\012read_pool_len:   %lu\012read_queu"
	.ascii	"e_len:  %lu\012write_pool_len:  %lu\012n_read:     "
	.ascii	"     %u\012sdio_open:       %d\012sdio_probe:      "
	.ascii	"%d\012\000"
	.space	3
.LC198:
	.ascii	"###PORT:%d###\012nbytes_tolaptop: %lu\012nbytes_tom"
	.ascii	"odem:  %lu\012cbits_to_modem:  %u\012cbits_to_lapto"
	.ascii	"p: %u\012n_read: %u\012smd_read_avail: %d\012smd_wr"
	.ascii	"ite_avail: %d\012CH_OPENED: %d\012CH_READY: %d\012\000"
	.space	2
.LC199:
	.ascii	"#PORT:%d port:%pK data_ch:%pK#\012dpkts_to_usbhost:"
	.ascii	" %lu\012dpkts_to_modem:  %lu\012dpkts_pwith_bam: %u"
	.ascii	"\012to_usbhost_dcnt:  %u\012tomodem__dcnt:  %u\012r"
	.ascii	"x_flow_control_disable_count: %u\012rx_flow_control"
	.ascii	"_enable_count: %u\012rx_flow_control_triggered: %u\012"
	.ascii	"max_num_pkts_pending_with_bam: %u\012tx_buf_len:\011"
	.ascii	" %u\012rx_buf_len:\011 %u\012data_ch_open:   %d\012"
	.ascii	"data_ch_ready:  %d\012\000"
.LC200:
	.ascii	"HIGH\000"
	.space	3
.LC201:
	.ascii	"LOW\000"
.LC202:
	.ascii	"#PORT:%d port:%pK ctrl_ch:%pK#\012to_usbhost: %lu\012"
	.ascii	"to_modem:   %lu\012DTR:        %s\012ch_open:    %d"
	.ascii	"\012ch_ready:   %d\012read_avail: %d\012write_avail"
	.ascii	":%d\012\000"
	.space	1
.LC203:
	.ascii	"\012Name:        %s\012#PORT:%d port: %pK\012to_usb"
	.ascii	"host:    %lu\012to_modem:      %lu\012cpkt_drp_cnt:"
	.ascii	"  %lu\012DTR:           %s\012ch_open:       %d\012"
	.ascii	"ch_ready:      %d\012\000"
.LC204:
	.ascii	"\012Name:           %s\012#PORT:%d port#:   %pK\012"
	.ascii	"data_ch_open:\011   %d\012data_ch_ready:    %d\012\012"
	.ascii	"******UL INFO*****\012\012dpkts_to_modem:   %lu\012"
	.ascii	"tomodem_drp_cnt:  %u\012rx_buf_len:       %u\012tx "
	.ascii	"thld cnt       %u\012tx unthld cnt     %u\012TX_THR"
	.ascii	"OTTLED      %d\012\000"
.LC205:
	.ascii	"\012******DL INFO******\012\012dpkts_to_usbhost: %l"
	.ascii	"u\012tx_buf_len:\011   %u\012rx thld cnt\011   %u\012"
	.ascii	"rx unthld cnt\011   %u\012uthld pnd skbs    %u\012R"
	.ascii	"X_THROTTLED\011   %d\012\000"
	.space	3
.LC206:
	.ascii	"#PORT:%d port: %pK\012to_usbhost:    %lu\012to_mode"
	.ascii	"m:      %lu\012cpkt_drp_cnt:  %lu\012DTR:          "
	.ascii	" %s\012\000"
	.space	1
.LC207:
	.ascii	"\012Name:           %s\012#PORT:%d port#:   %pK\012"
	.ascii	"data_ch_open:\011   %d\012data_ch_ready:    %d\012d"
	.ascii	"ata_ch_connected: %d\012\012******UL INFO*****\012\012"
	.ascii	"dpkts_to_modem:   %lu\012tomodem_drp_cnt:  %u\012rx"
	.ascii	"_buf_len:       %u\012TX_THROTTLED      %d\012\000"
.LC208:
	.ascii	"\012******DL INFO******\012\012dpkts_to_usbhost: %l"
	.ascii	"u\012tx_buf_len:\011   %u\012RX_THROTTLED\011   %d\012"
	.ascii	"\000"
	.space	2
.LC209:
	.ascii	"---Name: %s---\012endpoints: %s, %s\012dpkts_tolapt"
	.ascii	"op: %lu\012dpkts_tomodem:  %lu\012pkts_tolaptop_pen"
	.ascii	"ding: %u\012\000"
.LC210:
	.ascii	"&port->close_wait\000"
	.space	2
.LC211:
	.ascii	"&port->drain_wait\000"
	.space	2
.LC212:
	.ascii	"qdss_cleanup\012\000"
	.space	2
.LC213:
	.ascii	"<3>%s: grmnet is null\012\000"
	.space	1
.LC214:
	.ascii	"%s: ctrl_tomodem:%d ctrl_bits:%d setbits:%d clearbi"
	.ascii	"ts:%d\012\000"
	.space	2
.LC215:
	.ascii	"rmnet command error %d\012\000"
.LC216:
	.ascii	"rmnet control smd write failed\012\000"
.LC217:
	.ascii	"rmnet QMI pool is empty\012\000"
	.space	3
.LC218:
	.ascii	"RMNET %s response error %d, %d/%d\012\000"
	.space	1
.LC219:
	.ascii	"rmnet data smd write failed\012\000"
	.space	3
.LC220:
	.ascii	"rmnet SMD data channel full\012\000"
	.space	3
.LC221:
	.ascii	"rmnet SMD data write failed\012\000"
	.space	3
.LC222:
	.ascii	"rmnet control smd channel full\012\000"
.LC223:
	.ascii	"<3>%s: smd_write failed err:%d\012\000"
.LC224:
	.ascii	"rmnet_mux SMD data channel full\012\000"
	.space	3
.LC225:
	.ascii	"rmnet_mux SMD data write failed\012\000"
	.space	3
.LC226:
	.ascii	"RMNET_MUX %s response error %d, %d/%d\012\000"
	.space	1
.LC227:
	.ascii	"rmnet_mux data smd write failed\012\000"
	.space	3
.LC228:
	.ascii	"rmnet data tx ep error %d\012\000"
	.space	1
.LC229:
	.ascii	"rmnet_mux data tx ep error %d\012\000"
	.space	1
.LC230:
	.ascii	"rmnet data Tx buffers full\012\000"
.LC231:
	.ascii	"rmnet tx data enqueue err %d\012\000"
	.space	2
.LC232:
	.ascii	"rmnet QMI Tx buffers full\012\000"
	.space	1
.LC233:
	.ascii	"%s: port:%pK port#%d pool:%pK\012\000"
	.space	1
.LC234:
	.ascii	"%s: usb is disconnected\012\000"
	.space	3
.LC235:
	.ascii	"<3>%s: usb ep out queue failedport:%pK, port#%d err"
	.ascii	":%d\012\000"
.LC236:
	.ascii	"rmnet_mux data Tx buffers full\012\000"
.LC237:
	.ascii	"%s: port:%pK port#%d\012\000"
	.space	2
.LC238:
	.ascii	"<3>%s: %s(): Failed to register androidplatform dri"
	.ascii	"ver\012\000"
.LC239:
	.ascii	"Unable to open control smd channel: %d\012\000"
.LC240:
	.ascii	"pdrv %s register failed %d\012\000"
.LC241:
	.ascii	"Unable to open data smd channel\012\000"
	.space	3
.LC242:
	.ascii	"<3>%s:smd read_avail failure:%d or channel closed c"
	.ascii	"h=%pK\000"
	.space	3
.LC243:
	.ascii	"<3>%s: SMD sending incorrect pkt\012\000"
	.space	2
.LC244:
	.ascii	"<3>%s: smd read failure %d\012\000"
.LC245:
	.ascii	"<3>%s: mbim dev is null\012\000"
	.space	3
.LC246:
	.ascii	"<3>%s: mbim command error %d\012\000"
	.space	2
.LC247:
	.ascii	"<3>%s: Unable to allocate ctrl pkt\012\000"
.LC248:
	.ascii	"%s: Add to cpkt_req_q packet with len = %d\012\000"
.LC249:
	.ascii	"%s: Wake up read queue\000"
	.space	1
.LC250:
	.ascii	"<3>conn_gadget_function_disable cdev %pK\012\000"
	.space	2
.LC251:
	.ascii	"%s: %s: error %d\012\000"
	.space	2
.LC252:
	.ascii	"%s: %s disabled\012\000"
	.space	3
.LC253:
	.ascii	"<6>conn_gadget_flush\012\000"
	.space	2
.LC254:
	.ascii	"<3>%s() _conn_gadget_dev is invalid\012\000"
	.space	3
.LC255:
	.ascii	"acc_function_disable\012\000"
	.space	2
.LC256:
	.ascii	"acc_complete_out set disconnected\000"
	.space	2
.LC257:
	.ascii	"vendor request: %d index: %d value: %d length: %d\012"
	.ascii	"\000"
	.space	1
.LC258:
	.ascii	"class request: %d index: %d value: %d length: %d\012"
	.ascii	"\000"
	.space	2
.LC259:
	.ascii	"MTP_REQ_CANCEL\012\000"
.LC260:
	.ascii	"MTP_REQ_GET_DEVICE_STATUS\012\000"
	.space	1
.LC261:
	.ascii	"%s: response queue error\012\000"
	.space	2
.LC262:
	.ascii	"mtp_function_disable\012\000"
	.space	2
.LC263:
	.ascii	"ccid req%02x.%02x v%04x i%04x l%d\012\000"
	.space	1
.LC264:
	.ascii	"<3>ccid ep0 enqueue err %d\012\000"
.LC265:
	.ascii	"adb_function_disable cdev %pK\012\000"
	.space	1
.LC266:
	.ascii	"rmnet_mux command error %d\012\000"
.LC267:
	.ascii	"unable to allocate memory for ctrl req\012\000"
.LC268:
	.ascii	"<3>%s: ctrl pkts dropped: cpkts_drp_cnt: %lu\012\000"
	.space	2
.LC269:
	.ascii	"acm ttyGS%d req%02x.%02x v%04x i%04x l%d\012\000"
	.space	2
.LC270:
	.ascii	"acm response on ttyGS%d, err %d\012\000"
	.space	3
.LC271:
	.ascii	"%s: EVENT_(%s)\012\000"
.LC272:
	.ascii	"usb_rmnet_ctrl_smd\000"
	.space	1
.LC273:
	.ascii	"status\000"
	.space	1
.LC274:
	.ascii	"ghsic_ctrl_xport\000"
	.space	3
.LC275:
	.ascii	"ghsic_data_xport\000"
	.space	3
.LC276:
	.ascii	"timestamp\000"
	.space	2
.LC277:
	.ascii	"ghsuart_ctrl_xport\000"
	.space	1
.LC278:
	.ascii	"mode debugfs file is not available\012\000"
.LC279:
	.ascii	"ghsuart_data_xport\000"
	.space	1
.LC280:
	.ascii	"mode debugfs file is not available\000"
	.space	1
.LC281:
	.ascii	"usb_diag\000"
	.space	3
.LC282:
	.ascii	"<6>%s: sdio data ch not open\012\000"
	.space	2
.LC283:
	.ascii	"rmnet SDIO data write failed\012\000"
	.space	2
.LC284:
	.ascii	"<3>%s: usb epIn failed with %d\012\000"
.LC285:
	.ascii	"<3>%s: data tx ep error %d\012\000"
.LC286:
	.ascii	"%s: p:%pK#%d skb_len:%d\012\000"
	.space	3
.LC287:
	.ascii	"%s: req->length:%d header_len:%u\012skb->len:%d skb"
	.ascii	"->data_len:%d\012\000"
	.space	1
.LC288:
	.ascii	"rmnet_mux SDIO data write failed\012\000"
	.space	2
.LC289:
	.ascii	"%s:\012\000"
	.space	3
.LC290:
	.ascii	"%s: SMD port not ready - rescheduling:%s err:%d\012"
	.ascii	"\000"
	.space	3
.LC291:
	.ascii	"<3>%s: unable to open smd port:%s err:%d\012\000"
	.space	2
.LC292:
	.ascii	"Unable to open SDIO DATA channel\012\000"
	.space	2
.LC293:
	.ascii	"<3>%s: rx queue failed %d\012\000"
	.space	1
.LC294:
	.ascii	"<3>%s: %s response error %d, %d/%d\012\000"
.LC295:
	.ascii	"<3>%s: data rx enqueue err %d\012\000"
	.space	1
.LC296:
	.ascii	"%s: Received command %d\000"
.LC297:
	.ascii	"<3>copying to user space failed\000"
.LC298:
	.ascii	"%s: Sent line_state: %d\000"
.LC299:
	.ascii	"<3>wrong parameter\000"
	.space	1
.LC300:
	.ascii	"<6>%s: Received command %d\012\000"
.LC301:
	.ascii	"<3>%s: copying to user space failed\000"
.LC302:
	.ascii	"<6>%s: Sent max packets per xfer %d\000"
.LC303:
	.ascii	"%s: Sent max packet size %d\000"
.LC304:
	.ascii	"<3>%s: Unsupported IOCTL\000"
	.space	3
.LC305:
	.ascii	"<6>%s: Sent NTB size %d\000"
.LC306:
	.ascii	"<6>%s: Sent NTB datagrams count %d\000"
	.space	1
.LC307:
	.ascii	"<3>%s: wrong parameter\000"
	.space	1
.LC308:
	.ascii	"%s: USB cable not connected\012\000"
	.space	3
.LC309:
	.ascii	"<3>%s: cpkt size:%d > buf size:%d\012\000"
	.space	1
.LC310:
	.ascii	"%s: Enter(%d)\012\000"
	.space	1
.LC311:
	.ascii	"<3>Buffer size is too big %d, should be at most %d\012"
	.ascii	"\000"
.LC312:
	.ascii	"<3>Previous reading is not finished yet\012\000"
	.space	3
.LC313:
	.ascii	"%s: Requests list is empty. Wait.\012\000"
	.space	1
.LC314:
	.ascii	"Waiting failed\012\000"
.LC315:
	.ascii	"<3>cpkt size too big:%d > buf size:%d\012\000"
	.space	1
.LC316:
	.ascii	"%s: cpkt size:%d\012\000"
	.space	2
.LC317:
	.ascii	"<3>copy_to_user failed: err %d\012\000"
.LC318:
	.ascii	"%s: copied %d bytes to user\012\000"
	.space	3
.LC319:
	.ascii	"acc_read(%d)\012\000"
	.space	2
.LC320:
	.ascii	"acc_read disconnected\000"
	.space	2
.LC321:
	.ascii	"acc_read: waiting for online\012\000"
	.space	2
.LC322:
	.ascii	"rx %pK queue\012\000"
	.space	2
.LC323:
	.ascii	"acc_read: cancelling failed %d\000"
	.space	1
.LC324:
	.ascii	"rx %pK %d\012\000"
	.space	1
.LC325:
	.ascii	"acc_read returning %d\012\000"
	.space	1
.LC326:
	.ascii	"mtp_read(%d)\012\000"
	.space	2
.LC327:
	.ascii	"mtp_read: waiting for online state\012\000"
.LC328:
	.ascii	"mtp_read returning %d\012\000"
	.space	1
.LC329:
	.ascii	"adb_read(%d)\012\000"
	.space	2
.LC330:
	.ascii	"adb_read: waiting for online state\012\000"
.LC331:
	.ascii	"adb_read: failed to queue req %pK (%d)\012\000"
.LC332:
	.ascii	"adb_read returning %d\012\000"
	.space	1
.LC333:
	.ascii	"<3>ccid notify ep enqueue error %d\012\000"
.LC334:
	.ascii	"<3>%s: zero length ctrl pkt\012\000"
	.space	3
.LC335:
	.ascii	"<3>%s: max_pkt_size:%d given_pkt_size:%d\012\000"
	.space	2
.LC336:
	.ascii	"<3>%s: cannot allocate rmnet_mux ctrl pkt\012\000"
	.space	1
.LC337:
	.ascii	"<3>%s: copy_from_user failed err:%d\012\000"
	.space	3
.LC338:
	.ascii	"rmnet_mux notify ep enqueue error %d\012\000"
	.space	2
.LC339:
	.ascii	"%s: Enter(%d)\000"
	.space	2
.LC340:
	.ascii	"zero length ctrl pkt\012\000"
	.space	2
.LC341:
	.ascii	"given pkt size too big:%d > max_pkt_size:%d\012\000"
	.space	3
.LC342:
	.ascii	"<3>Previous writing not finished yet\012\000"
	.space	2
.LC343:
	.ascii	"USB cable not connected\012\000"
	.space	3
.LC344:
	.ascii	"<3>failed to allocate ctrl pkt\012\000"
.LC345:
	.ascii	"<3>copy_from_user failed err:%d\012\000"
	.space	3
.LC346:
	.ascii	"<3>failed to send ctrl packet. error=%d\012\000"
	.space	3
.LC347:
	.ascii	"<3>send_cpkt_response callback is NULL\012\000"
.LC348:
	.ascii	"%s: Exit(%d)\000"
	.space	3
.LC349:
	.ascii	"g_ether\000"
.LC350:
	.ascii	"29-May-2008\000"
.LC351:
	.ascii	"g_qc_ether\000"
	.space	1
.LC352:
	.ascii	"%s: %s: unable to update PID and serial_no\012\000"
.LC353:
	.ascii	"%s: %s: dload:%pK pid:%x serial_num:%s\012\000"
.LC354:
	.ascii	"<3>usb_ep_queue failed ret: %d\012\000"
.LC355:
	.ascii	"%s,\000"
.LC356:
	.ascii	"%s: port:%pK port#%d\000"
	.space	3
.LC357:
	.ascii	"%s: req status shutdown portno#%d port:%pK\012\000"
.LC358:
	.ascii	"<4>%s: port:%pK port#%d Unexpected Rx Status:%d\012"
	.ascii	"\000"
	.space	3
.LC359:
	.ascii	"<3>%s: smd write failed err:%d\012\000"
.LC360:
	.ascii	"<4>ttyGS%d: unexpected RX status %d\012\000"
	.space	3
.LC361:
	.ascii	"<4>ttyGS%d: RX not scheduled?\012\000"
	.space	1
.LC362:
	.ascii	"<6>%s: name:%s is not found\012\000"
	.space	3
.LC363:
	.ascii	"%s: sdio_ch_name:%s dev_name:%s\012\000"
	.space	3
.LC364:
	.ascii	"bam_dmux_ch_8\000"
	.space	2
.LC365:
	.ascii	"%s: port:%pK d:%pK tom:%lu pbam:%u pno:%d\012\000"
	.space	1
.LC366:
	.ascii	"%s: write error:%d\012\000"
.LC367:
	.ascii	"%s: resume work started\012\000"
	.space	3
.LC368:
	.ascii	"%s: %s: resume work started\012\000"
	.space	3
.LC369:
	.ascii	"%s: suspend work started\012\000"
	.space	2
.LC370:
	.ascii	"%s: %s: suspend work started\012\000"
	.space	2
.LC371:
	.ascii	"<3>%s: usb_bam_connect (src) failed: err:%d\012\000"
	.space	3
.LC372:
	.ascii	"<3>%s: usb_bam_connect (dst) failed: err:%d\012\000"
	.space	3
.LC373:
	.ascii	"<3>%s:teth_bridge_init() failed\012\000"
	.space	3
.LC374:
	.ascii	"%s: usb cable is disconnected, exiting\012\000"
.LC375:
	.ascii	"<3>%s: out of memory\012\000"
	.space	2
.LC376:
	.ascii	"<3>%s: usb_bam_client_ready failed: err:%d\012\000"
.LC377:
	.ascii	"%s: done\012\000"
	.space	2
.LC378:
	.ascii	"%s: %s: Connect workqueue started\000"
	.space	2
.LC379:
	.ascii	"<3>%s: %s:teth_bridge_init() failed\012\000"
	.space	3
.LC380:
	.ascii	"<3>%s: %s: usb_bam_connect_ipa failed: err:%d\012\000"
	.space	1
.LC381:
	.ascii	"<3>%s: %s:teth_bridge_connect() failed\012\000"
.LC382:
	.ascii	"<3>%s: port_usb is NULL\000"
.LC383:
	.ascii	"<3>%s: port_usb->out (bulk out ep) is NULL\000"
	.space	1
.LC384:
	.ascii	"%s: %s: enqueue\012\000"
	.space	3
.LC385:
	.ascii	"<3>%s: %s: usb_bam_client_ready failed: err:%d\012\000"
.LC386:
	.ascii	"%s: %s: Connect workqueue done\000"
	.space	1
.LC387:
	.ascii	"%s: reset by peer\012\000"
	.space	1
.LC388:
	.ascii	"<3>%s: usb_ep_enable failed eptype:IN ep:%pK\000"
	.space	3
.LC389:
	.ascii	"<3>%s: usb_ep_enable failed eptype:OUT ep:%pK\000"
	.space	2
.LC390:
	.ascii	"<3>%s: BAM reset failed %d\012\000"
.LC391:
	.ascii	"%s: %s: reset by peer\012\000"
	.space	1
.LC392:
	.ascii	"<3>%s: %s: BAM reset failed %d\012\000"
.LC393:
	.ascii	"<3>Failed to allocate rmnet control device\012\000"
.LC394:
	.ascii	"&port->read_wq\000"
	.space	1
.LC395:
	.ascii	"<3>rmnet control driver failed to register\000"
	.space	1
.LC396:
	.ascii	"&dev->read_wq\000"
	.space	2
.LC397:
	.ascii	"&dev->write_wq\000"
	.space	1
.LC398:
	.ascii	"<3>USB accessory gadget driver failed to initialize"
	.ascii	"\012\000"
	.space	3
.LC399:
	.ascii	"<6>%s: initialize rndis QC instance\012\000"
	.space	3
.LC400:
	.ascii	"<3>%s: rndis QC driver failed to register\000"
	.space	2
.LC401:
	.ascii	"&dev->intr_wq\000"
	.space	2
.LC402:
	.ascii	"f_mtp\000"
	.space	2
.LC403:
	.ascii	"<3>mtp gadget driver failed to initialize\012\000"
	.space	1
.LC404:
	.ascii	"<3>adb gadget driver failed to initialize\012\000"
	.space	1
.LC405:
	.ascii	"k_rmnet_mux_work\000"
	.space	3
.LC406:
	.ascii	"&smd_dev->smd_data.wait\000"
.LC407:
	.ascii	"&ctrl_dev->tx_wait_q\000"
	.space	3
.LC408:
	.ascii	"usb_rmnet_mux\000"
	.space	2
.LC409:
	.ascii	"<3>%s: failed to register misc device\012\000"
	.space	1
.LC410:
	.ascii	"%s: rmnet_mux_ctrl_device_init failed, err:%d\012\000"
	.space	1
.LC411:
	.ascii	"<6>%s: rndis QC cleanup\000"
.LC412:
	.ascii	"<6>%s: Enter\000"
	.space	3
.LC413:
	.ascii	"gmidi_transmit: midi_alloc_ep_request failed\012\000"
	.space	2
.LC414:
	.ascii	"snd_card_create() failed\012\000"
	.space	2
.LC415:
	.ascii	"snd_device_new() failed: error %d\012\000"
	.space	1
.LC418:
	.ascii	"MIDI\000"
	.space	3
.LC419:
	.ascii	"snd_rawmidi_new() failed: error %d\012\000"
.LC420:
	.ascii	"snd_card_register() failed\012\000"
.LC416:
	.ascii	"MIDI Gadget\000"
.LC417:
	.ascii	"f_midi\000"
	.space	1
.LC421:
	.ascii	"<3>usb:%s tx queue err %d\012\000"
	.space	1
.LC422:
	.ascii	"<3>invalid rndis pkt: skblen:%u hdr_len:%u\000"
	.space	1
.LC423:
	.ascii	"<3>invalid rndis message: %d/%d/%d/%d, len:%d\012\000"
	.space	1
.LC424:
	.ascii	"<3>%s:skb clone failed\012\000"
.LC425:
	.ascii	"y\000"
	.space	2
.LC426:
	.ascii	"n\000"
	.space	2
.LC427:
	.ascii	"?\000"
	.space	2
.LC428:
	.ascii	"connected\000"
	.space	2
.LC429:
	.ascii	"disconnected\000"
	.space	3
.LC430:
	.ascii	"Config Nr. %d\012used      : %s\012state     : %s\012"
	.ascii	"medium    : 0x%08X\012speed     : %d\012cable     :"
	.ascii	" %s\012vendor ID : 0x%08X\012vendor    : %s\012ul-m"
	.ascii	"ax-xfer-size:%d max-xfer-size-rcvd: %d\012ul-max-pk"
	.ascii	"ts-per-xfer:%d max-pkts-per-xfer-rcvd:%d\012\000"
	.space	3
.LC431:
	.ascii	"<3>acc_complete_set_hid_report_desc, err %d\012\000"
	.space	3
.LC432:
	.ascii	"unable to open backing file: %s\012\000"
	.space	3
.LC433:
	.ascii	"invalid file type: %s\012\000"
	.space	1
.LC434:
	.ascii	"file not readable: %s\012\000"
	.space	1
.LC435:
	.ascii	"unable to find file size: %s\012\000"
	.space	2
.LC436:
	.ascii	"file too big: %s\012\000"
	.space	2
.LC437:
	.ascii	"using only first %d blocks\012\000"
.LC438:
	.ascii	"file too small: %s\012\000"
.LC439:
	.ascii	"open backing file: %s\012\000"
	.space	1
.LC440:
	.ascii	"<3>%s(#) call conn_gadget_cleanup\012\000"
	.space	1
.LC441:
	.ascii	"<6>conn_gadget_cleanup\012\000"
.LC442:
	.ascii	"<3>%s() _conn_gadget_dev is not allocated\012\000"
	.space	1
.LC443:
	.ascii	"<3>%s(#) call conn_gadget_setup\012\000"
	.space	3
.LC444:
	.ascii	"<6>conn_gadget_setup\012\000"
	.space	2
.LC445:
	.ascii	"<3>alloc conn_gadget_dev F\012\000"
.LC446:
	.ascii	"&dev->ioctl_wq\000"
	.space	1
.LC447:
	.ascii	"<3>%s: error rd_queue vmalloc\012\000"
	.space	1
.LC448:
	.ascii	"<3>%s: misc_register f %d\012\000"
	.space	1
.LC449:
	.ascii	"<3>%s() conn_gadget gadget driver failed to initial"
	.ascii	"ize\012\000"
.LC450:
	.ascii	"<3>%s() _conn_gadget_dev is NULL\012\000"
	.space	2
.LC451:
	.ascii	"<3>%s() _conn_gaddget_dev onlined\012\000"
	.space	1
.LC452:
	.ascii	"%d\000"
	.space	1
.LC453:
	.ascii	"<3>%s() rd_queue_buf vmalloc f\012\000"
.LC454:
	.ascii	"enabling\000"
	.space	3
.LC455:
	.ascii	"disabling\000"
	.space	2
.LC456:
	.ascii	"%s: android_usb: %s remote wakeup\012\000"
	.space	1
.LC457:
	.ascii	"<7>%s: product %s\000"
	.space	2
.LC458:
	.ascii	"<7>%s: vendor %s\000"
	.space	3
.LC459:
	.ascii	"%28s\000"
	.space	3
.LC460:
	.ascii	"%04x\000"
	.space	3
.LC461:
	.ascii	"%255s\000"
	.space	2
.LC462:
	.ascii	"Wrong NTH SIGN, skblen %d\012\000"
	.space	1
.LC463:
	.ascii	"HEAD:\000"
	.space	2
.LC464:
	.ascii	"<6>\000"
.LC465:
	.ascii	"Wrong NTB headersize\012\000"
	.space	2
.LC466:
	.ascii	"OUT size exceeded\012\000"
	.space	1
.LC467:
	.ascii	"Bad index: %x\012\000"
	.space	1
.LC468:
	.ascii	"Wrong NDP SIGN\012\000"
.LC469:
	.ascii	"Bad NDP length: %x\012\000"
.LC470:
	.ascii	"Bad dgram length: %x\012\000"
	.space	2
.LC471:
	.ascii	"Bad CRC\012\000"
	.space	3
.LC472:
	.ascii	"<3>usb: force short packet %d  \012\000"
	.space	3
.LC473:
	.ascii	"<3>Dropped skb \012\000"
	.space	3
.LC474:
	.ascii	"<3>usb:%s final Expanding the buffer %d \012\000"
	.space	2
.LC475:
	.ascii	"<6>%s: %s: speaker_status: %d, speaker_check_count "
	.ascii	"%d\012\000"
	.space	1
.LC476:
	.ascii	"%s setup response queue error\012\000"
	.space	1
.LC477:
	.ascii	"ACCESSORY=START\000"
.LC478:
	.ascii	"NCM_DEVICE=START\000"
	.space	3
.LC479:
	.ascii	"NCM_DEVICE=RELEASE\000"
	.space	1
.LC480:
	.ascii	"<7>usb: %s ncm_connect=%d\012\000"
	.space	1
.LC481:
	.ascii	"<7>usb: %s\012\000"
.LC482:
	.ascii	"<3>usb: %s superspeed available \012\000"
	.space	2
.LC483:
	.ascii	"<3>usb: %s ss_host_available(%d), windowsos(%d)\012"
	.ascii	"\000"
	.space	3
.LC484:
	.ascii	"<3>usb: %s gadget not available \012\000"
	.space	2
.LC485:
	.ascii	":\000"
	.space	2
.LC486:
	.ascii	"<3>%s: %s(): Failed to alloc memory for android con"
	.ascii	"f\012\000"
	.space	2
.LC487:
	.ascii	",\000"
	.space	2
.LC488:
	.ascii	"ffs\000"
.LC489:
	.ascii	"<3>%s: android_usb: Cannot enable ffs (%d)\000"
	.space	1
.LC490:
	.ascii	"<3>%s: android_usb: Cannot enable '%s' (%d)\000"
.LC491:
	.ascii	"%s called\012\000"
	.space	1
.LC492:
	.ascii	"<6>%s (%s)\012\000"
.LC493:
	.ascii	"SWITCH_NAME=USB_MESSAGE\000"
.LC494:
	.ascii	"SWITCH_STATE=%s\000"
.LC495:
	.ascii	"usb_msg\000"
.LC496:
	.ascii	"Send cd eject message to daemon\012\000"
	.space	3
.LC497:
	.ascii	"<7>usb: %s disconnect\012\000"
	.space	1
.LC498:
	.ascii	"f_%s\000"
	.space	3
.LC499:
	.ascii	"<3>%s: %s: Failed to create dev %s\000"
	.space	1
.LC500:
	.ascii	"<3>%s: %s: Failed to init %s\000"
	.space	3
.LC501:
	.ascii	"<3>%s: %s: Failed to create function %s attributes\000"
	.space	1
.LC502:
	.ascii	"Android\000"
.LC503:
	.ascii	"0123456789ABCDEF\000"
	.space	3
.LC504:
	.ascii	"net2280\000"
.LC505:
	.ascii	"dummy_udc\000"
	.space	2
.LC506:
	.ascii	"pxa25x_udc\000"
	.space	1
.LC507:
	.ascii	"goku_udc\000"
	.space	3
.LC508:
	.ascii	"omap_udc\000"
	.space	3
.LC509:
	.ascii	"pxa27x_udc\000"
	.space	1
.LC510:
	.ascii	"s3c2410_udc\000"
.LC511:
	.ascii	"at91_udc\000"
	.space	3
.LC512:
	.ascii	"imx_udc\000"
.LC513:
	.ascii	"musb-hdrc\000"
	.space	2
.LC514:
	.ascii	"atmel_usba_udc\000"
	.space	1
.LC515:
	.ascii	"fsl-usb2-udc\000"
	.space	3
.LC516:
	.ascii	"amd5536udc\000"
	.space	1
.LC517:
	.ascii	"m66592_udc\000"
	.space	1
.LC518:
	.ascii	"fsl_qe_udc\000"
	.space	1
.LC519:
	.ascii	"ci13xxx_pci\000"
.LC520:
	.ascii	"langwell_udc\000"
	.space	3
.LC521:
	.ascii	"r8a66597_udc\000"
	.space	3
.LC522:
	.ascii	"s3c-hsotg\000"
	.space	2
.LC523:
	.ascii	"pch_udc\000"
.LC524:
	.ascii	"ci13xxx_msm\000"
.LC525:
	.ascii	"renesas_usbhs_udc\000"
	.space	2
.LC526:
	.ascii	"s3c-hsudc\000"
	.space	2
.LC527:
	.ascii	"net2272\000"
.LC528:
	.ascii	"dwc3-gadget\000"
.LC529:
	.ascii	"msm72k_udc\000"
	.space	1
.LC530:
	.ascii	"ci13xxx_msm_hsic\000"
	.space	3
.LC531:
	.ascii	"<4>%s: %s: controller '%s' not recognized\012\000"
	.space	1
.LC532:
	.ascii	"USB_STATE=DISCONNECTED\000"
	.space	1
.LC533:
	.ascii	"USB_STATE=CONNECTED\000"
.LC534:
	.ascii	"USB_STATE=CONFIGURED\000"
	.space	3
.LC535:
	.ascii	"USB_STATE=SUSPENDED\000"
.LC536:
	.ascii	"USB_STATE=RESUMED\000"
	.space	2
.LC537:
	.ascii	"USB_CONNECTION=CONNECTED\000"
	.space	3
.LC538:
	.ascii	"low\000"
.LC539:
	.ascii	"<6>%s: %s: did not send uevent (%d %d %pK)\012\000"
.LC540:
	.ascii	"<6>%s: %s: sent missed DISCONNECT event\012\000"
	.space	3
.LC541:
	.ascii	"<6>%s: %s: sent uevent %s\012\000"
	.space	1
.LC542:
	.ascii	"<3>acc_complete_send_hid_event, err %d\012\000"
.LC543:
	.ascii	"<3>can't add hid device: %d\012\000"
	.space	3
.LC544:
	.ascii	"<3>can't add HID device %pK\012\000"
	.space	3
.LC545:
	.ascii	"read-only status change prevented\012\000"
	.space	1
.LC546:
	.ascii	"read-only status set to %d\012\000"
.LC547:
	.ascii	"cdrom status change prevented\012\000"
	.space	1
.LC548:
	.ascii	"cdrom status set to %d\012\000"
.LC549:
	.ascii	"%s --> %d, %u/%u\012\000"
	.space	2
.LC550:
	.ascii	"receive_file_work(%lld)\012\000"
	.space	3
.LC551:
	.ascii	"%s- count(%lld) not multiple of mtu(%d)\012\000"
	.space	3
.LC552:
	.ascii	"vfs_write %d\012\000"
	.space	2
.LC553:
	.ascii	"got short packet\012\000"
	.space	2
.LC554:
	.ascii	"receive_file_work returning %d\012\000"
.LC555:
	.ascii	"<6>unloading\012\000"
	.space	2
.LC556:
	.ascii	"<6>file system registered\012\000"
	.space	1
.LC557:
	.ascii	"<3>failed registering file system (%d)\012\000"
.LC558:
	.ascii	"<3>%s: Received NULL mbim pointer\012\000"
	.space	1
.LC559:
	.ascii	"<3>%s: given pkt size too big:%d > max_pkt_size:%d\012"
	.ascii	"\000"
.LC560:
	.ascii	"<3>%s: Previous writing not finished yet\012\000"
	.space	2
.LC561:
	.ascii	"<3>%s: failed to allocate ctrl pkt\012\000"
.LC562:
	.ascii	"%s: dev:%pK port_num#%d\012\000"
	.space	3
.LC563:
	.ascii	"<3>%s: dev:%pK is not connected\012\000"
	.space	3
.LC564:
	.ascii	"<3>%s: dev:%pK state=%d, recover!!\012\000"
.LC565:
	.ascii	"%s: dev:%pK portno#%d\012\000"
	.space	1
.LC566:
	.ascii	"<3>%s: dev:%pK is not online\012\000"
	.space	2
.LC567:
	.ascii	"<3>%s: dev:%pK req is NULL\012\000"
.LC568:
	.ascii	"<3>%s: dev:%pK req->buf is NULL\012\000"
	.space	3
.LC569:
	.ascii	"%s: delay ep_queue: notifications queue is busy[%d]"
	.ascii	"\000"
.LC570:
	.ascii	"<3>%s: ep enqueue error %d\012\000"
.LC571:
	.ascii	"%s: Successful Exit\000"
.LC572:
	.ascii	"%s: intf %d, alt %d\012\000"
	.space	3
.LC573:
	.ascii	"<3>%s: Failed to enable capture ep\000"
	.space	1
.LC574:
	.ascii	"<3>%s: request allocation failed\012\000"
	.space	2
.LC575:
	.ascii	"<3>%s: request buffer allocation failed\012\000"
	.space	3
.LC576:
	.ascii	"<3>%s: Failed to queue %s req: err %d\012\000"
	.space	1
.LC577:
	.ascii	"<3>%s: Failed to enable playback ep\000"
.LC578:
	.ascii	"<3>%s: Failed to queue %s queue req: err %d\012\000"
	.space	3
.LC579:
	.ascii	"%s: Allocated %d requests\012\000"
	.space	1
.LC580:
	.ascii	"<3>%s: Schedule playback_work\000"
	.space	2
.LC581:
	.ascii	"<3>%s: playback_buf is empty. Stop.\000"
.LC582:
	.ascii	"<3>%s: Interface %d. Do nothing. Return %d\012\000"
.LC583:
	.ascii	"unbind function '%s'/%pK\012\000"
	.space	2
.LC584:
	.ascii	"unbind config '%s'/%pK\012\000"
.LC585:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/com"
	.ascii	"posite.c\000"
.LC586:
	.ascii	"<7>usb: %s idVendor=0x%x, idProduct=0x%x\012\000"
	.space	2
.LC587:
	.ascii	"<7>usb: %s bcdDevice=0x%x\012\000"
	.space	1
.LC588:
	.ascii	"%s %s with %s\000"
	.space	2
.LC589:
	.ascii	"<7>usb: %s composite_manufacturer=%s\012\000"
	.space	2
.LC590:
	.ascii	"userspace failed to provide iSerialNumber\012\000"
	.space	1
.LC591:
	.ascii	"%s ready\012\000"
	.space	2
.LC592:
	.ascii	"<3>Physical address or size of buf is NULL\000"
	.space	1
.LC593:
	.ascii	"<3>%s: Invalid grmnet:%pK\012\000"
	.space	1
.LC594:
	.ascii	"major %x minor %x vendor %x\012\000"
	.space	3
.LC595:
	.ascii	"<7>usb: %s terminal_mode %s\012\000"
	.space	3
.LC596:
	.ascii	"%s: cbits_to_modem:%d\012\000"
	.space	1
.LC597:
	.ascii	"audio_disable\012\000"
	.space	1
.LC598:
	.ascii	"<3>%s on a NULL device\012\000"
.LC599:
	.ascii	"%s sets POLLIN for rmnet_ctrl_qti_port\012\000"
.LC600:
	.ascii	"%s: ctrl_tomodem:%d\012\000"
	.space	3
.LC601:
	.ascii	"%s: port:%pK\012\000"
	.space	2
.LC602:
	.ascii	"<3>%s: ctrl bridge open failed :%d\012\000"
.LC603:
	.ascii	"%s: %s: woken up by peer\012\000"
	.space	2
.LC604:
	.ascii	"<3>%s: FAILED: d_port == NULL\000"
	.space	2
.LC605:
	.ascii	"<3>%s: FAILED: d_port->cdev == NULL\000"
.LC606:
	.ascii	"<3>%s: FAILED: d_port->cdev->gadget == NULL\000"
.LC607:
	.ascii	"%s: ctrl device is already opened\012\000"
	.space	1
.LC608:
	.ascii	"ccid_bulk_open\012\000"
.LC609:
	.ascii	"%s: bulk device is already opened\012\000"
	.space	1
.LC610:
	.ascii	"%s: nothing to do\012\000"
	.space	1
.LC611:
	.ascii	"<3>%s: rmnet notify ep enqueue error %d\012\000"
	.space	3
.LC612:
	.ascii	"%s: port#%d\012\000"
	.space	3
.LC613:
	.ascii	"<3>%s: rmnet dev is null\012\000"
	.space	2
.LC614:
	.ascii	"%s: port num =%d unthrottled\012\000"
	.space	2
.LC615:
	.ascii	"%s: port:%pK tom:%lu pno:%d\012\000"
	.space	3
.LC616:
	.ascii	"<3>%s: rx queue failed\012\000"
.LC617:
	.ascii	"<3>%s: usb epIn failed\012\000"
.LC618:
	.ascii	"<6>%s: setting notify count to zero\012\000"
	.space	3
.LC619:
	.ascii	"<3>%s: usb_bam_disconnect_ipa failed: err:%d\012\000"
	.space	2
.LC620:
	.ascii	"usb: %s - usb_ncm misc driver fail \012\000"
	.space	3
.LC621:
	.ascii	"<3>%s: unable open bridge ch:%d err:%d\012\000"
.LC622:
	.ascii	"<3>%s: smux close timedout\012\000"
.LC623:
	.ascii	"<3> %s smux_open failed\012\000"
	.space	3
.LC624:
	.ascii	"<3>%s: unable to open smux ch:%d err:%d\012\000"
	.space	3
.LC625:
	.ascii	"TTY\000"
.LC626:
	.ascii	"SDIO\000"
	.space	3
.LC627:
	.ascii	"SMD\000"
.LC628:
	.ascii	"QTI\000"
.LC629:
	.ascii	"BAM\000"
.LC630:
	.ascii	"BAM2BAM\000"
.LC631:
	.ascii	"BAM2BAM_IPA\000"
.LC632:
	.ascii	"HSIC\000"
	.space	3
.LC633:
	.ascii	"HSUART\000"
	.space	1
.LC634:
	.ascii	"%s: len %d, buffer_len %d, read %d\012\000"
.LC635:
	.ascii	"%s: data xport: %s dev: %pK portno: %d\012\000"
.LC636:
	.ascii	"%s: resumed port %d\012\000"
	.space	3
.LC637:
	.ascii	"<3>%s: Un-supported transport: %s\012\000"
	.space	1
.LC638:
	.ascii	"MessageLength:%d DataLength:%d\012\000"
.LC639:
	.ascii	"<3>RNDIS header is NULL.\012\000"
	.space	2
.LC640:
	.ascii	"driver/rndis-%03d\000"
	.space	2
.LC641:
	.ascii	"%s: remove entries\000"
	.space	1
.LC642:
	.ascii	"\012\000"
	.space	2
.LC643:
	.ascii	"<3>%s: %s: %s failed\012\000"
	.space	2
.LC644:
	.ascii	"<6>%s: initialize %d instances\012\000"
.LC645:
	.ascii	"<3>%s: Failed to allocate mbim dev\012\000"
.LC646:
	.ascii	"<3>%s: mbim driver failed to register\000"
	.space	2
.LC647:
	.ascii	"<6>%s: Initialized %d ports\012\000"
	.space	3
.LC648:
	.ascii	"<3>%s: Failed\000"
	.space	2
.LC649:
	.ascii	"<6>%s: mbim resumed\012\000"
	.space	3
.LC650:
	.ascii	"%s: %s: resumed port %d\012\000"
	.space	3
.LC651:
	.ascii	"<6>%s: mbim suspended\012\000"
	.space	1
.LC652:
	.ascii	"%s: %s: suspended port %d\012\000"
	.space	1
.LC653:
	.ascii	"<3>%s: data port is null\012\000"
	.space	2
.LC654:
	.ascii	"<3>%s: invalid bam2bam portno#%d\012\000"
	.space	2
.LC655:
	.ascii	"<3>%s: %s: usb_bam_client_ready failed\012\000"
.LC656:
	.ascii	"%s: OID_GEN_SUPPORTED_LIST\012\000"
.LC657:
	.ascii	"%s: OID_GEN_HARDWARE_STATUS\012\000"
	.space	3
.LC658:
	.ascii	"%s: OID_GEN_MEDIA_SUPPORTED\012\000"
	.space	3
.LC659:
	.ascii	"%s: OID_GEN_MEDIA_IN_USE\012\000"
	.space	2
.LC660:
	.ascii	"%s: OID_GEN_MAXIMUM_FRAME_SIZE\012\000"
.LC661:
	.ascii	"%s: OID_GEN_TRANSMIT_BLOCK_SIZE\012\000"
	.space	3
.LC662:
	.ascii	"%s: OID_GEN_RECEIVE_BLOCK_SIZE\012\000"
.LC663:
	.ascii	"%s: OID_GEN_VENDOR_ID\012\000"
	.space	1
.LC664:
	.ascii	"%s: OID_GEN_VENDOR_DESCRIPTION\012\000"
.LC665:
	.ascii	"%s: OID_GEN_VENDOR_DRIVER_VERSION\012\000"
	.space	1
.LC666:
	.ascii	"%s: OID_GEN_CURRENT_PACKET_FILTER\012\000"
	.space	1
.LC667:
	.ascii	"%s: OID_GEN_MAXIMUM_TOTAL_SIZE\012\000"
.LC668:
	.ascii	"%s: OID_GEN_PHYSICAL_MEDIUM\012\000"
	.space	3
.LC669:
	.ascii	"%s: OID_GEN_MAC_OPTIONS\012\000"
	.space	3
.LC670:
	.ascii	"%s: OID_GEN_RCV_NO_BUFFER\012\000"
	.space	1
.LC671:
	.ascii	"%s: OID_802_3_PERMANENT_ADDRESS\012\000"
	.space	3
.LC672:
	.ascii	"%s: OID_802_3_CURRENT_ADDRESS\012\000"
	.space	1
.LC673:
	.ascii	"%s: OID_802_3_MULTICAST_LIST\012\000"
	.space	2
.LC674:
	.ascii	"%s: OID_802_3_MAXIMUM_LIST_SIZE\012\000"
	.space	3
.LC675:
	.ascii	"%s: OID_802_3_MAC_OPTIONS\012\000"
	.space	1
.LC676:
	.ascii	"%s: OID_802_3_RCV_ERROR_ALIGNMENT\012\000"
	.space	1
.LC677:
	.ascii	"%s: OID_802_3_XMIT_ONE_COLLISION\012\000"
	.space	2
.LC678:
	.ascii	"%s: OID_802_3_XMIT_MORE_COLLISIONS\012\000"
.LC679:
	.ascii	"<4>%s: query unknown OID 0x%08X\012\000"
	.space	3
.LC680:
	.ascii	"%c is not valid\012\000"
	.space	3
.LC681:
	.ascii	"&bulk_dev->read_wq\000"
	.space	1
.LC682:
	.ascii	"&bulk_dev->write_wq\000"
.LC683:
	.ascii	"<3>%s: ccid_ctrl_device_init failed, err:%d\012\000"
	.space	3
.LC684:
	.ascii	"<3>%s: ccid_bulk_device_init failed, err:%d\012\000"
	.space	3
.LC685:
	.ascii	"<3>ccid gadget driver failed to initialize\012\000"
.LC686:
	.ascii	"acm ttyGS%d serial state %04x\012\000"
	.space	1
.LC687:
	.ascii	"<7>acm ttyGS%d serial state %04x\012\000"
	.space	2
.LC688:
	.ascii	"acm ttyGS%d can't notify serial state, %d\012\000"
	.space	1
.LC689:
	.ascii	"%s: ep:%pK head:%pK num:%d cb:%pK\000"
	.space	2
.LC690:
	.ascii	"%s: req allocated:%d\012\000"
	.space	2
.LC691:
	.ascii	"<3>%s: usb alloc request failed\012\000"
	.space	3
.LC692:
	.ascii	"<3>%s: request buf allocation failed\012\000"
	.space	2
.LC693:
	.ascii	"g_serial\000"
	.space	3
.LC694:
	.ascii	"ttyGS\000"
	.space	2
.LC695:
	.ascii	"k_gserial\000"
	.space	2
.LC696:
	.ascii	"&ports[i].lock\000"
	.space	1
.LC697:
	.ascii	"<3>%s: cannot register, err %d\012\000"
.LC698:
	.ascii	"<4>%s: no classdev for port %d, err %ld\012\000"
	.space	3
.LC699:
	.ascii	"usb_serial%d\000"
	.space	3
.LC700:
	.ascii	"readstatus\000"
	.space	1
.LC701:
	.ascii	"reset\000"
	.space	2
.LC702:
	.ascii	"%s: registered %d ttyGS* device%s\012\000"
	.space	1
.LC703:
	.ascii	"s\000"
	.space	2
.LC704:
	.ascii	"<3>%s: %s err %d\012\000"
	.space	2
.LC705:
	.ascii	"<4>%s: unexpected %s status %d\012\000"
.LC706:
	.ascii	"<3>'=' missing in %s\012\000"
	.space	2
.LC707:
	.ascii	"<3>%s: invalid value: %s\012\000"
	.space	2
.LC708:
	.ascii	"rmode\000"
	.space	2
.LC709:
	.ascii	"fmode\000"
	.space	2
.LC710:
	.ascii	"mode\000"
	.space	3
.LC711:
	.ascii	"uid\000"
.LC712:
	.ascii	"gid\000"
.LC713:
	.ascii	"<3>%s: invalid option\012\000"
	.space	1
.LC714:
	.ascii	"bRequest 0x%x, w_value 0x%04x, len %d, endpoint %d\012"
	.ascii	"\000"
.LC715:
	.ascii	"audio req%02x.%02x v%04x i%04x l%d\012\000"
.LC716:
	.ascii	"<3>audio response on err %d\012\000"
	.space	3
.LC717:
	.ascii	"<3>%s: Invalid grmnet/buf, grmnet:%pK buf:%pK\012\000"
	.space	1
.LC718:
	.ascii	"<3>given pkt size too big:%d > max_pkt_size:%d\012\000"
.LC719:
	.ascii	"<3>rmnet file handler %pK is not open\000"
	.space	2
.LC720:
	.ascii	"unable to allocate memory for QMI req\012\000"
	.space	1
.LC721:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/u_s"
	.ascii	"erial.c\000"
	.space	1
.LC722:
	.ascii	"%s: cleaned up ttyGS* support\012\000"
	.space	1
.LC723:
	.ascii	"%s: audio_playback_buf_size %d - copy_buf->actual %"
	.ascii	"d, req->actual %d\000"
	.space	3
.LC724:
	.ascii	"<3>%s: Failed to queue %s req: err - %d\012\000"
	.space	3
.LC725:
	.ascii	"%s: copy_buf == 0\000"
	.space	2
.LC726:
	.ascii	"%s: Copy %d bytes\000"
	.space	2
.LC727:
	.ascii	"<3>%s: Failed completion: status %d\000"
.LC728:
	.ascii	"reset interface\012\000"
	.space	3
.LC729:
	.ascii	"can't allocate request for %s\012\000"
	.space	1
.LC730:
	.ascii	"<3>%s() _conn_gadget_dev is offlined\012\000"
	.space	2
.LC731:
	.ascii	"bogus ep0 stall!\012\000"
	.space	2
.LC732:
	.ascii	"acc_complete_in set disconnected\000"
	.space	3
.LC733:
	.ascii	"%s: name:%s no_data_ports= %d\012\000"
	.space	1
.LC734:
	.ascii	"audio_data_complete req->status %d req->actual %d\012"
	.ascii	"\000"
	.space	1
.LC735:
	.ascii	"sending phase-error status\012\000"
.LC736:
	.ascii	"sending command-failure status\012\000"
.LC737:
	.ascii	"write %u @ %llu beyond end %llu\012\000"
	.space	3
.LC738:
	.ascii	"error in file write: %d\012\000"
	.space	3
.LC739:
	.ascii	"partial file write: %d/%u\012\000"
	.space	1
.LC740:
	.ascii	"error in file read: %d\012\000"
.LC741:
	.ascii	"partial file read: %d/%u\012\000"
	.space	2
.LC742:
	.ascii	"qdss_unbind\012\000"
	.space	3
.LC743:
	.ascii	"clear_eps\012\000"
	.space	1
.LC744:
	.ascii	"clear_desc\012\000"
.LC745:
	.ascii	"%s: ecm suspended\012\000"
	.space	1
.LC746:
	.ascii	"%s: ecm resumed\012\000"
	.space	3
.LC747:
	.ascii	"%s: %s: rndis suspended\012\000"
	.space	3
.LC748:
	.ascii	"%s: %s: rndis resumed\012\000"
	.space	1
.LC749:
	.ascii	"ecm unbind\012\000"
.LC750:
	.ascii	"%s: bam_data_destroy: Freeing ports\012\000"
	.space	3
.LC751:
	.ascii	"&ffs->mutex\000"
.LC752:
	.ascii	"&ffs->ev.waitq\000"
	.space	1
.LC753:
	.ascii	"&x->wait\000"
	.space	3
.LC754:
	.ascii	"ep0\000"
.LC755:
	.ascii	"<3>%s() req->status f %d\012\000"
	.space	2
.LC756:
	.ascii	"<3>%s() cmd is not proper ioctl type %c\012\000"
	.space	3
.LC757:
	.ascii	"<3>%s() cmd is not proper ioctl number %d\012\000"
	.space	1
.LC758:
	.ascii	"<3>%s() cmd has no buffer\012\000"
	.space	1
.LC759:
	.ascii	"<3>%s() cmd has invalid direction\012\000"
	.space	1
.LC760:
	.ascii	"<3>%s() SUPPORT_LIST copy_to_user f %d\012\000"
.LC761:
	.ascii	"<3>%s() close called\012\000"
	.space	2
.LC762:
	.ascii	"<3>%s() copy_to_user f %d\012\000"
	.space	1
.LC763:
	.ascii	"<3>%s() WAIT_NOTIFY copy_to_user f %d\012\000"
	.space	1
.LC764:
	.ascii	"<3>%s() GET_STATUS copy_to_user f %d\012\000"
	.space	2
.LC765:
	.ascii	"<3>%s: Buffer size is too big %d, should be at most"
	.ascii	" %d\012\000"
.LC766:
	.ascii	"<3>%s: Previous reading is not finished yet\012\000"
	.space	3
.LC767:
	.ascii	"<3>%s: USB cable not connected. Wait.\012\000"
	.space	1
.LC768:
	.ascii	"%s: Received request packet\012\000"
	.space	3
.LC769:
	.ascii	"<3>%s: cpkt size too big:%d > buf size:%d\012\000"
	.space	1
.LC770:
	.ascii	"<3>%s: copy_to_user failed: err %d\012\000"
.LC771:
	.ascii	"<3>%s: Waiting failed\012\000"
	.space	1
.LC772:
	.ascii	"acc_write(%d)\012\000"
	.space	1
.LC773:
	.ascii	"acc_write disconnected or not online\000"
	.space	3
.LC774:
	.ascii	"acc_write dev->error\012\000"
	.space	2
.LC775:
	.ascii	"acc_write: xfer error %d\012\000"
	.space	2
.LC776:
	.ascii	"acc_write returning %d\012\000"
.LC777:
	.ascii	"rmnet_mux data rx enqueue err %d\012\000"
	.space	2
.LC778:
	.ascii	"<3>%s: kevent %d may have been dropped\012\000"
.LC779:
	.ascii	"%s: %u %u\012\000"
	.space	1
.LC780:
	.ascii	"rndis0\000"
	.space	1
.LC781:
	.ascii	"<6>%s: usb cable is not connected\012\000"
	.space	1
.LC782:
	.ascii	"%s: USB_CDC_RESET_FUNCTION\000"
	.space	1
.LC783:
	.ascii	"%s: USB_CDC_SEND_ENCAPSULATED_COMMAND\000"
	.space	2
.LC784:
	.ascii	"%s: w_length > req->length: %d > %d\000"
.LC785:
	.ascii	"%s: USB_CDC_GET_ENCAPSULATED_RESPONSE\000"
	.space	2
.LC786:
	.ascii	"<3>%s: w_length > 0: %d\000"
.LC787:
	.ascii	"%s: req%02x.%02x v%04x i%04x l%d\012\000"
	.space	2
.LC788:
	.ascii	"<3>%s: ctrl resp queue empty\012\000"
	.space	2
.LC789:
	.ascii	"%s: copied encapsulated_response %d bytes\000"
	.space	2
.LC790:
	.ascii	"%s: USB_CDC_GET_NTB_PARAMETERS\000"
	.space	1
.LC791:
	.ascii	"%s: USB_CDC_GET_NTB_INPUT_SIZE\000"
	.space	1
.LC792:
	.ascii	"%s: Reply to host INPUT SIZE %d\012\000"
	.space	3
.LC793:
	.ascii	"%s: USB_CDC_SET_NTB_INPUT_SIZE\000"
	.space	1
.LC794:
	.ascii	"<3>%s: wrong NTB length %d\000"
	.space	1
.LC795:
	.ascii	"%s: USB_CDC_GET_NTB_FORMAT\000"
	.space	1
.LC796:
	.ascii	"%s: NTB FORMAT: sending %d\012\000"
.LC797:
	.ascii	"%s: USB_CDC_SET_NTB_FORMAT\000"
	.space	1
.LC798:
	.ascii	"%s: NCM16 selected\012\000"
.LC799:
	.ascii	"%s: NCM32 selected\012\000"
.LC800:
	.ascii	"<3>%s: invalid control req: %02x.%02x v%04x i%04x l"
	.ascii	"%d\012\000"
	.space	1
.LC801:
	.ascii	"%s: control request: %02x.%02x v%04x i%04x l%d\012\000"
.LC802:
	.ascii	"<3>%s: queueing req failed: %02x.%02x, err %d\012\000"
	.space	1
.LC803:
	.ascii	"<3>%s: ctrl req err %d: %02x.%02x v%04x i%04x l%d\012"
	.ascii	"\000"
	.space	1
.LC804:
	.ascii	"eject attempt prevented\012\000"
	.space	3
.LC805:
	.ascii	"close backing file\012\000"
.LC806:
	.ascii	"ncm unbind\012\000"
.LC807:
	.ascii	"gs_close: ttyGS%d (%pK,%pK) ...\012\000"
	.space	3
.LC808:
	.ascii	"gs_close: ttyGS%d (%pK,%pK) done!\012\000"
	.space	1
.LC809:
	.ascii	"<6>DUN is unregisterd\012\000"
	.space	1
.LC810:
	.ascii	"unbind\012\000"
.LC811:
	.ascii	"<3>%s: %s: Card is NULL\000"
.LC812:
	.ascii	"%s: Initialize hw params\000"
	.space	3
.LC813:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_DROP failed: %d\012\000"
.LC814:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_HW_PARAMS failed: %d\012\000"
	.space	3
.LC815:
	.ascii	"<3>%s: Preparing playback failed: %d\012\000"
	.space	2
.LC816:
	.ascii	"%s: playback params: access %x, format %x, channels"
	.ascii	" %d, rate %d\012\000"
	.space	3
.LC817:
	.ascii	"<3>%s: Setting playback params failed: err %d\000"
	.space	2
.LC818:
	.ascii	"%s: Initialized playback params\000"
.LC819:
	.ascii	"<3>%s: Failed to allocate hw params\000"
.LC820:
	.ascii	"<3>%s: Preparing capture failed: %d\012\000"
	.space	3
.LC821:
	.ascii	"<3>%s: Failed to allocate sw params\000"
.LC822:
	.ascii	"%s: buffer_bytes = (%d,%d) omin=%d omax=%d int=%d e"
	.ascii	"mpty=%d\012\000"
.LC823:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_SW_PARAMS failed: %d\012\000"
	.space	3
.LC824:
	.ascii	"%s: capture params: access %x, format %x, channels "
	.ascii	"%d, rate %d\012\000"
.LC825:
	.ascii	"<3>%s: Setting capture params failed: err %d\000"
	.space	3
.LC826:
	.ascii	"<6>%s: Initialized capture params\000"
	.space	2
.LC827:
	.ascii	"<3>%s: %s: buffer alloc failed\012\000"
.LC828:
	.ascii	"<3>%s: Failed to init audio streams: err %d\000"
.LC829:
	.ascii	"<3>%s: copying failed\000"
	.space	2
.LC830:
	.ascii	"%s: frames = %d, count = %d\000"
.LC831:
	.ascii	"<3>%s: Capture error: %d\012\000"
	.space	2
.LC832:
	.ascii	"%s: Queue capture packet: size %d\000"
	.space	2
.LC833:
	.ascii	"<3>%s: playback_buf is empty\000"
	.space	3
.LC834:
	.ascii	"%s: play_buf->actual = %d\000"
	.space	2
.LC835:
	.ascii	"<3>%s: Buffer is empty, no data to play\000"
.LC836:
	.ascii	"<3>%s: Failed to init audio streams\000"
.LC837:
	.ascii	"<3>%s: SND failure - runtime->frame_bits == 0\000"
	.space	2
.LC838:
	.ascii	"%s: runtime->frame_bits = %d, count = %d, frames = "
	.ascii	"%d\000"
	.space	2
.LC839:
	.ascii	"<3>%s: snd_pcm_lib_write failed with err %d\012\000"
	.space	3
.LC840:
	.ascii	"%s: Done. Sent %d frames\000"
	.space	3
.LC841:
	.ascii	"%s complete --> %d, %d/%d\012\000"
	.space	1
.LC842:
	.ascii	"kill %s:  resubmit %d bytes --> %d\012\000"
.LC843:
	.ascii	"adb_write(%d)\012\000"
	.space	1
.LC844:
	.ascii	"adb_write dev->error\012\000"
	.space	2
.LC845:
	.ascii	"adb_write: xfer error %d\012\000"
	.space	2
.LC846:
	.ascii	"adb_write returning %d\012\000"
.LC847:
	.ascii	"%s: rndis_qc_unbind: free\000"
	.space	2
.LC848:
	.ascii	"rndis req%02x.%02x v%04x i%04x l%d\012\000"
.LC849:
	.ascii	"<3>%s: rndis response on err %d\012\000"
	.space	3
.LC850:
	.ascii	"rndis response on err %d\012\000"
	.space	2
.LC851:
	.ascii	"ecm0\000"
	.space	3
.LC852:
	.ascii	"bulk-in\000"
.LC853:
	.ascii	"%s set halt\012\000"
	.space	3
.LC854:
	.ascii	"usb_ep_set_halt -> %d\012\000"
	.space	1
.LC855:
	.ascii	"%s: %s: size: %d\000"
	.space	3
.LC856:
	.ascii	"<3>usb: %s  drop incase of NCM rx length %d\012\000"
	.space	3
.LC857:
	.ascii	"<3>usb: %s  Dont drop incase of NCM rx length %d\012"
	.ascii	"\000"
	.space	2
.LC858:
	.ascii	"<3>usb: %s Drop rx length %d\012\000"
	.space	2
.LC859:
	.ascii	"ncm\000"
.LC860:
	.ascii	"<3>%s: USB not connected\012\000"
	.space	2
.LC861:
	.ascii	"<6>%s: usb rmnet sdio channels are open retry_cnt:%"
	.ascii	"d\012\000"
	.space	2
.LC862:
	.ascii	"%s: usb rmnet sdio open retry_cnt:%d\012\000"
	.space	2
.LC863:
	.ascii	"Unable to open control SDIO channel\012\000"
	.space	3
.LC864:
	.ascii	"Unable to open DATA SDIO channel\012\000"
	.space	2
.LC865:
	.ascii	"send_file_work(%lld %lld)\012\000"
	.space	1
.LC866:
	.ascii	"send_file_work: xfer error %d\012\000"
	.space	1
.LC867:
	.ascii	"send_file_work returning %d\012\000"
	.space	3
.LC868:
	.ascii	"<3>%s:Unable to close smux channel: %d\012\000"
.LC869:
	.ascii	"%s: Queue empty packet for QBI\000"
	.space	1
.LC870:
	.ascii	"%s: %s: Wake up read queue\000"
	.space	1
.LC871:
	.ascii	"%s: notify_count = %d\000"
	.space	2
.LC872:
	.ascii	"<6>%s: ESHUTDOWN/ECONNRESET, connection gone\000"
	.space	3
.LC873:
	.ascii	"<3>%s: Unknown event %02x --> %d\012\000"
	.space	2
.LC874:
	.ascii	"%s: notify_state: %d\000"
	.space	3
.LC875:
	.ascii	"<3>%s: Pending notifications in MBIM_NOTIFY_NONE\012"
	.ascii	"\000"
	.space	2
.LC876:
	.ascii	"%s: No pending notifications\012\000"
	.space	2
.LC877:
	.ascii	"%s: Notification %02x sent\012\000"
.LC878:
	.ascii	"%s: notify_response_avaliable: done\000"
.LC879:
	.ascii	"<3>%s: Queue notify request failed, err: %d\000"
.LC880:
	.ascii	"%s: queue request: notify_count = %d\000"
	.space	3
.LC881:
	.ascii	"<3>%s: usb_ep_queue failed, err: %d\000"
.LC882:
	.ascii	"%s: %s: Exit\012\000"
	.space	2
.LC883:
	.ascii	"%s: suspended port %d\012\000"
	.space	1
.LC884:
	.ascii	"mtp_write(%d)\012\000"
	.space	1
.LC885:
	.ascii	"mtp_write dev->error\012\000"
	.space	2
.LC886:
	.ascii	"mtp_write: xfer error %d\012\000"
	.space	2
.LC887:
	.ascii	"mtp_write returning %d\012\000"
.LC888:
	.ascii	"<3>%s() conn_gadget_lock(write_excl) f\012\000"
.LC889:
	.ascii	"<3>%s() conn_gadget_write dev->error\012\000"
	.space	2
.LC890:
	.ascii	"<3>%s: copy_from_user failed\012\000"
	.space	2
.LC891:
	.ascii	"<3>%s() xfer error %d\012\000"
	.space	1
.LC892:
	.ascii	"%s: %s: req_put\012\000"
	.space	3
.LC893:
	.ascii	"<3>%s: wait_event_interruptible(wrwq,reqget) failed"
	.ascii	" %d\012\000"
.LC894:
	.ascii	"bulk reset request\012\000"
.LC895:
	.ascii	"<3>%s: usb cable is not connected\012\000"
	.space	1
.LC896:
	.ascii	"<3>%s: given_xport:%s cur_xport:%s doing nothing\012"
	.ascii	"\000"
	.space	2
.LC897:
	.ascii	"usb_rmnet_mux: TransportRequested: %s\012\000"
	.space	1
.LC898:
	.ascii	"%s: undefined xport, do nothing\012\000"
	.space	3
.LC899:
	.ascii	"%s: USB not connected\012\000"
	.space	1
.LC900:
	.ascii	"<3>%s: undefined transport\012\000"
.LC901:
	.ascii	"%s: Queue empty packet for QTI\000"
	.space	1
.LC902:
	.ascii	"<3>%s: rmnet ctrl file handler %pK is not open\000"
	.space	1
.LC903:
	.ascii	"delayed status mismatch..resetting\012\000"
.LC904:
	.ascii	"<3>%s: unable open bam ch:%d err:%d\012\000"
	.space	3
.LC905:
	.ascii	"<3>%s: rx req allocation failed\012\000"
	.space	3
.LC906:
	.ascii	"<3>%s: tx req allocation failed\012\000"
	.space	3
.LC907:
	.ascii	"<1>DUN : DTR %d\012\000"
	.space	3
.LC908:
	.ascii	"<6>modem_ioctl: Unknown ioctl cmd(0x%x).\012\000"
	.space	2
.LC909:
	.ascii	"lun%d\000"
	.space	2
.LC910:
	.ascii	"Linux\000"
	.space	2
.LC911:
	.ascii	"File-Stor Gadget\000"
	.space	3
.LC912:
	.ascii	"File-CD Gadget\000"
	.space	1
.LC913:
	.ascii	"file-storage\000"
	.space	3
.LC914:
	.ascii	"(error)\000"
.LC915:
	.ascii	"(no medium)\000"
.LC916:
	.ascii	"removable \000"
	.space	1
.LC917:
	.ascii	"\000"
	.space	3
.LC918:
	.ascii	"read only \000"
	.space	1
.LC919:
	.ascii	"lun\000"
.LC920:
	.ascii	"&common->filesem\000"
	.space	3
.LC921:
	.ascii	"failed to register LUN%d: %d\012\000"
	.space	2
.LC922:
	.ascii	"no file given for LUN%d\012\000"
	.space	3
.LC923:
	.ascii	"controller '%s' not recognized\012\000"
.LC924:
	.ascii	"%-8s%-16s%04x\000"
	.space	2
.LC925:
	.ascii	"SAMSUNG\000"
.LC926:
	.ascii	"&common->fsg_wait\000"
	.space	2
.LC927:
	.ascii	"Mass Storage Function, version: 2009/09/11\012\000"
.LC928:
	.ascii	"Number of LUNs=%d\012\000"
	.space	1
.LC929:
	.ascii	"LUN: %s%s%sfile: %s\012\000"
	.space	3
.LC930:
	.ascii	"CD-ROM \000"
.LC931:
	.ascii	"I/O thread pid: %d\012\000"
.LC932:
	.ascii	"ccid_bulk_write(%d)\012\000"
	.space	3
.LC933:
	.ascii	"<3>%s: max_buffer_size:%d given_pkt_size:%d\012\000"
	.space	3
.LC934:
	.ascii	"<3> %s dev->error\012\000"
	.space	1
.LC935:
	.ascii	"ccid_bulk_write: xfer error %d\012\000"
.LC936:
	.ascii	"ccid_bulk_write returning %d\012\000"
	.space	2
.LC937:
	.ascii	"mtp_send_event(%d)\012\000"
.LC938:
	.ascii	"ioctl returning %d\012\000"
.LC939:
	.ascii	"ep-e\000"
	.space	3
.LC940:
	.ascii	"ep-f\000"
	.space	3
.LC941:
	.ascii	"ep3-bulk\000"
	.space	3
.LC942:
	.ascii	"ep2-bulk\000"
	.space	3
.LC943:
	.ascii	"dual\000"
	.space	3
.LC944:
	.ascii	"full\000"
	.space	3
.LC945:
	.ascii	"adb_function_bind dev: %pK\012\000"
.LC946:
	.ascii	"create_bulk_endpoints dev: %pK\012\000"
.LC947:
	.ascii	"usb_ep_autoconfig for ep_in failed\012\000"
.LC948:
	.ascii	"usb_ep_autoconfig for ep_in got %s\012\000"
.LC949:
	.ascii	"usb_ep_autoconfig for ep_out failed\012\000"
	.space	3
.LC950:
	.ascii	"usb_ep_autoconfig for adb ep_out got %s\012\000"
	.space	3
.LC951:
	.ascii	"<3>adb_bind() could not allocate requests\012\000"
	.space	1
.LC952:
	.ascii	"%s speed %s: IN/%s, OUT/%s\012\000"
.LC953:
	.ascii	"acc_function_bind dev: %pK\012\000"
.LC954:
	.ascii	"android\000"
.LC955:
	.ascii	"usb_ep_autoconfig for ep_out got %s\012\000"
	.space	3
.LC956:
	.ascii	"<3>acc_bind() could not allocate requests\012\000"
	.space	1
.LC957:
	.ascii	"ccid_bind_config\012\000"
	.space	2
.LC958:
	.ascii	"ccid\000"
	.space	3
.LC959:
	.ascii	"adding '%s'/%pK to config '%s'/%pK\012\000"
.LC960:
	.ascii	"adding '%s'/%pK --> %d\012\000"
.LC961:
	.ascii	"rmnet_smd_sdio_function_add\012\000"
	.space	3
.LC962:
	.ascii	"rmnet_smd_sdio\000"
	.space	1
.LC963:
	.ascii	"%s: port:%pK port#%d event:%08x\012\000"
	.space	3
.LC964:
	.ascii	"<3>%s() failed to queue req %pK (%d)\012\000"
	.space	2
.LC965:
	.ascii	"ccid_bulk_read(%d)\012\000"
.LC966:
	.ascii	"<3>%s bulk_dev_error\012\000"
	.space	2
.LC967:
	.ascii	"<3>%s usb ep queue failed\012\000"
	.space	1
.LC968:
	.ascii	"ccid_bulk_read returning %d\012\000"
	.space	3
.LC969:
	.ascii	"mtp_function_bind dev: %pK\012\000"
.LC970:
	.ascii	"usb_ep_autoconfig for mtp ep_out got %s\012\000"
	.space	3
.LC971:
	.ascii	"usb_ep_autoconfig for ep_intr failed\012\000"
	.space	2
.LC972:
	.ascii	"usb_ep_autoconfig for mtp ep_intr got %s\012\000"
	.space	2
.LC973:
	.ascii	"<3>mtp_bind() could not allocate requests\012\000"
	.space	1
.LC974:
	.ascii	"Config SS device in SS\012\000"
.LC975:
	.ascii	"Config SS device in HS\012\000"
.LC976:
	.ascii	"Config HS device with LPM(L1)\012\000"
	.space	1
.LC977:
	.ascii	"<7>usb: GET_DES\012\000"
	.space	3
.LC978:
	.ascii	"<7>usb: %s failed to change configuration\012\000"
	.space	1
.LC979:
	.ascii	"already in the same config with value %d\012\000"
	.space	2
.LC980:
	.ascii	"%s config #%d: %s\012\000"
	.space	1
.LC981:
	.ascii	"battery\000"
.LC982:
	.ascii	"<3>%s(): No SS desc for function:%s\012\000"
	.space	3
.LC983:
	.ascii	"<3>%s: fail to get %s psy\012\000"
	.space	1
.LC984:
	.ascii	"interface %d (%s/%pK) alt 0 --> %d\012\000"
.LC985:
	.ascii	"%s: interface %d (%s) requested delayed status\012\000"
.LC986:
	.ascii	"delayed_status count %d\012\000"
	.space	3
.LC987:
	.ascii	"<7>usb: SET_CON\012\000"
	.space	3
.LC988:
	.ascii	"<6>%s sec_qcom_usb_rdrv = %d, disable\012\000"
	.space	1
.LC989:
	.ascii	"<6>Redriver OFF in Mac OS\012\000"
	.space	1
.LC990:
	.ascii	"func_suspend() returned error %d\012\000"
	.space	2
.LC991:
	.ascii	"ep_queue --> %d\012\000"
	.space	3
.LC992:
	.ascii	"%s: Delayed status not supported for w_length != 0\000"
	.space	1
.LC993:
	.ascii	"unconfigured\000"
	.space	3
.LC994:
	.ascii	"CDC Ethernet: %s speed IN/%s OUT/%s NOTIFY/%s\012\000"
	.space	1
.LC995:
	.ascii	"<3>%s: %s: can't bind, err %d\012\000"
	.space	1
.LC996:
	.ascii	"<3>%s: usb epin autoconfig failed\012\000"
	.space	1
.LC997:
	.ascii	"<6>%s: usb epin autoconfig succeeded\012\000"
	.space	2
.LC998:
	.ascii	"<3>%s: usb epout autoconfig failed\012\000"
.LC999:
	.ascii	"<6>%s: usb epout autoconfig succeeded\012\000"
	.space	1
.LC1000:
	.ascii	"<3>%s: usb notify ep autoconfig failed\012\000"
.LC1001:
	.ascii	"<6>%s: usb notify ep autoconfig succeeded\012\000"
	.space	1
.LC1002:
	.ascii	"<6>%s: allocated notify ep request & request buffer"
	.ascii	"\012\000"
	.space	3
.LC1003:
	.ascii	"<6>%s: failed to allocate notify request\012\000"
	.space	2
.LC1004:
	.ascii	"%s: MBIM in configuration %d\000"
	.space	3
.LC1005:
	.ascii	"<6>%s: mbim(%d): %s speed IN/%s OUT/%s NOTIFY/%s\012"
	.ascii	"\000"
	.space	2
.LC1006:
	.ascii	"<3>%s: %s failed to bind, err %d\012\000"
	.space	2
.LC1007:
	.ascii	"<3>%s: unable to allocate ifc id, err:%d\000"
	.space	3
.LC1008:
	.ascii	"<3>%s: usb epnotify autoconfig failed\012\000"
	.space	1
.LC1009:
	.ascii	"%s: CCID %s Speed, IN:%s OUT:%s\012\000"
	.space	3
.LC1010:
	.ascii	"%s: can't bind, err %d\012\000"
.LC1011:
	.ascii	"<3>%s: unable to allocate memory for notify req\012"
	.ascii	"\000"
	.space	3
.LC1012:
	.ascii	"<6>%s: RmNet(%d) %s Speed, IN:%s OUT:%s\012\000"
	.space	3
.LC1013:
	.ascii	"super\000"
	.space	2
.LC1014:
	.ascii	"%s: configNr = %d\012\000"
	.space	1
.LC1015:
	.ascii	"failed\012\000"
.LC1016:
	.ascii	"RNDIS: %s speed IN/%s OUT/%s NOTIFY/%s\012\000"
.LC1017:
	.ascii	"unable to autoconfigure all endpoints\012\000"
	.space	1
.LC1018:
	.ascii	"%s: Return %d\000"
	.space	2
.LC1019:
	.ascii	"<3>%s: %s: failed to allocate desc interface\000"
	.space	3
.LC1020:
	.ascii	"<3>%s: %s: failed to allocate alt interface\000"
.LC1021:
	.ascii	"<3>%s: %s: failed to autoconfig in endpoint\000"
.LC1022:
	.ascii	"<3>%s: %s: failed to autoconfig out endpoint\000"
	.space	3
.LC1023:
	.ascii	"CDC Network: %s speed IN/%s OUT/%s NOTIFY/%s\012\000"
	.space	2
.LC1024:
	.ascii	"qdss_bind\012\000"
	.space	1
.LC1025:
	.ascii	"<3>qdss_bind: full-speed is not supported\012\000"
	.space	1
.LC1026:
	.ascii	"<3>interface allocation error\012\000"
	.space	1
.LC1027:
	.ascii	"<3>ep_autoconfig error\012\000"
.LC1028:
	.ascii	"<3>usb_copy_descriptors error\012\000"
	.space	1
.LC1029:
	.ascii	"ep0 bMaxBurst must be 0\012\000"
	.space	3
.LC1030:
	.ascii	"can't enable %s, result %d\012\000"
.LC1031:
	.ascii	"config_ep_by_speed failed for ep %s, result %d\012\000"
.LC1032:
	.ascii	"config_ep_by_speed failes for ep %s, result %d\012\000"
.LC1033:
	.ascii	"<3>%s: unable to allocate memory for notify ep\012\000"
.LC1034:
	.ascii	"audio_set_alt intf %d, alt %d\012\000"
	.space	1
.LC1035:
	.ascii	"config_ep fail ep %s, result %d\012\000"
	.space	3
.LC1036:
	.ascii	"failedto enable ep%s, result %d\012\000"
	.space	3
.LC1037:
	.ascii	"can't configure %s: %d\012\000"
.LC1038:
	.ascii	"can't start %s: %d\012\000"
.LC1039:
	.ascii	"%s queue req: %d\012\000"
	.space	2
.LC1040:
	.ascii	"acc_function_set_alt intf: %d alt: %d\012\000"
	.space	1
.LC1041:
	.ascii	"failed to enable ep %s, result %d\012\000"
	.space	1
.LC1042:
	.ascii	"mtp_function_set_alt intf: %d alt: %d\012\000"
	.space	1
.LC1043:
	.ascii	"<3>%s: unable to allocate memory for out req\012\000"
	.space	2
.LC1044:
	.ascii	"<3>%s: unable to allocate memory for in req\012\000"
	.space	3
.LC1045:
	.ascii	"<3>%s: config_ep_by_speed failed for ep#%s, err#%d\012"
	.ascii	"\000"
.LC1046:
	.ascii	"<3>%s: usb ep#%s enable failed, err#%d\012\000"
.LC1047:
	.ascii	"adb_function_set_alt intf: %d alt: %d\012\000"
	.space	1
.LC1048:
	.ascii	"qdss_set_alt\012\000"
	.space	2
.LC1049:
	.ascii	"<3>qdss_st_alt: qdss supportes HS or SS only\012\000"
	.space	2
.LC1050:
	.ascii	"<3>qdss_set_alt failed\012\000"
.LC1051:
	.ascii	"<3>%s(#) call conn_gadget_bind_config\012\000"
	.space	1
.LC1052:
	.ascii	"<6>conn_gadget_bind_config\012\000"
.LC1053:
	.ascii	"conn_gadget\000"
.LC1054:
	.ascii	"<6>adb_bind_config\012\000"
.LC1055:
	.ascii	"adb\000"
.LC1056:
	.ascii	"<6>acc_bind_config\012\000"
.LC1057:
	.ascii	"accessory\000"
	.space	2
.LC1058:
	.ascii	"Mass Storage Function\000"
	.space	2
.LC1059:
	.ascii	"/home/jprim/hlte/lolz_rebase/include/linux/kref.h\000"
	.space	2
.LC1060:
	.ascii	"<6>mtp_bind_config\012\000"
.LC1061:
	.ascii	"mtp\000"
.LC1062:
	.ascii	"gmidi function\000"
	.space	1
.LC1063:
	.ascii	"qdss_bind_config\012\000"
	.space	2
.LC1064:
	.ascii	"qdss\000"
	.space	3
.LC1065:
	.ascii	"qdss_bind_config allocating channel\012\000"
	.space	3
.LC1066:
	.ascii	"<3>qdss_bind_config: allocating channel failed\012\000"
.LC1067:
	.ascii	"<3>qdss usb_add_function failed\012\000"
	.space	3
.LC1068:
	.ascii	"<3>%s: qdss: Cannot open channel qdss\000"
	.space	2
.LC1069:
	.ascii	"acm%u\000"
	.space	2
.LC1070:
	.ascii	"<3>%s: Could not bind acm%u config\012\000"
.LC1071:
	.ascii	"USB audio source\000"
	.space	3
.LC1072:
	.ascii	"USB gadget audio\000"
	.space	3
.LC1073:
	.ascii	"audio_source\000"
	.space	3
.LC1074:
	.ascii	"USB accessory audio source\000"
	.space	1
.LC1075:
	.ascii	" super\000"
	.space	1
.LC1076:
	.ascii	" high\000"
	.space	2
.LC1077:
	.ascii	" full\000"
	.space	2
.LC1078:
	.ascii	" full/low\000"
	.space	2
.LC1079:
	.ascii	"adding config #%u '%s'/%pK\012\000"
.LC1080:
	.ascii	"cfg %d/%pK speeds:%s%s%s\012\000"
	.space	2
.LC1081:
	.ascii	"  interface %d = %s/%pK\012\000"
	.space	3
.LC1082:
	.ascii	"added config '%s'/%u --> %d\012\000"
	.space	3
.LC1083:
	.ascii	"<7>usb: %s cdev->config=%pK, config=%pK\012\000"
	.space	3
.LC1084:
	.ascii	"<6>adb_release\012\000"
.LC1085:
	.ascii	"<3>%s: adb_closed_callback: data->dev is NULL\000"
	.space	2
.LC1086:
	.ascii	"<3>%s: adb_closed_callback: config->dev is NULL\000"
.LC1087:
	.ascii	"<6>%s(): freeing\012\000"
	.space	2
.LC1088:
	.ascii	"Function FS Gadget\000"
	.space	1
.LC1089:
	.ascii	"composite\000"
	.space	2
.LC1090:
	.ascii	"device tree enabled\012\000"
	.space	3
.LC1091:
	.ascii	"<3>%s: unable to allocate platform data\012\000"
	.space	3
.LC1092:
	.ascii	"qcom,android-usb-swfi-latency\000"
	.space	2
.LC1093:
	.ascii	"qcom,android-usb-cdrom\000"
	.space	1
.LC1094:
	.ascii	"qcom,android-usb-internal-ums\000"
	.space	2
.LC1095:
	.ascii	"qcom,streaming-func\000"
.LC1096:
	.ascii	"<3>%s: Invalid number of functions used.\012\000"
	.space	2
.LC1097:
	.ascii	"%s: name of streaming function:%s\012\000"
	.space	1
.LC1098:
	.ascii	"android_usb\000"
.LC1099:
	.ascii	"<3>%s: %s(): Failed to alloc memory for android_dev"
	.ascii	"\012\000"
	.space	3
.LC1100:
	.ascii	"&android_dev->mutex\000"
.LC1101:
	.ascii	"ioremap failed\012\000"
.LC1102:
	.ascii	"failed to get mem resource\012\000"
.LC1103:
	.ascii	"android%d\000"
	.space	2
.LC1104:
	.ascii	"<3>%s: %s(): android_create_device failed\012\000"
	.space	1
.LC1105:
	.ascii	"<7>usb: %s error pdev(%pK)\012\000"
.LC1106:
	.ascii	"<7>usb: %s failed to create attr\012\000"
	.space	2
.LC1107:
	.ascii	"<3>usb: %s To create terminal_atttrr is failed\012\000"
.LC1108:
	.ascii	"<3>%s: %s(): Failed to register android composite d"
	.ascii	"river\012\000"
	.space	2
.LC1109:
	.ascii	"high\000"
	.space	3
.LC1110:
	.ascii	"<3>DUN register is failed, ret = %d\012\000"
	.space	3
.LC1111:
	.ascii	"<3>usb: %s modem misc register is failed\012\000"
	.space	2
.LC1112:
	.ascii	"&modem_wait_q\000"
	.space	2
.LC1113:
	.ascii	"%s: Unexpected call\012\000"
	.space	3
.LC1114:
	.ascii	"%s: Completing delayed status\012\000"
	.space	1
.LC1115:
	.ascii	"Main thread exiting on signal\012\000"
	.space	1
.LC1116:
	.ascii	"bulk-out\000"
	.space	3
.LC1117:
	.ascii	"invalid CBW: len %u sig 0x%x\012\000"
	.space	2
.LC1118:
	.ascii	"bulk-in set wedge\012\000"
	.space	1
.LC1119:
	.ascii	"usb_ep_set_wedge -> %d\012\000"
.LC1120:
	.ascii	"non-meaningful CBW: lun = %u, flags = 0x%x, cmdlen "
	.ascii	"%u\012\000"
	.space	1
.LC1121:
	.ascii	"INQUIRY\000"
.LC1122:
	.ascii	" Card\000"
	.space	2
.LC1123:
	.ascii	"MODE SELECT(6)\000"
	.space	1
.LC1124:
	.ascii	"MODE SELECT(10)\000"
.LC1125:
	.ascii	"MODE SENSE(6)\000"
	.space	2
.LC1126:
	.ascii	"MODE SENSE(10)\000"
	.space	1
.LC1127:
	.ascii	"PREVENT-ALLOW MEDIUM REMOVAL\000"
	.space	3
.LC1128:
	.ascii	"READ(6)\000"
.LC1129:
	.ascii	"READ(10)\000"
	.space	3
.LC1130:
	.ascii	"READ(12)\000"
	.space	3
.LC1131:
	.ascii	"READ CAPACITY\000"
	.space	2
.LC1132:
	.ascii	"READ HEADER\000"
.LC1133:
	.ascii	"READ TOC\000"
	.space	3
.LC1134:
	.ascii	"READ FORMAT CAPACITIES\000"
	.space	1
.LC1135:
	.ascii	"REQUEST SENSE\000"
	.space	2
.LC1136:
	.ascii	"START-STOP UNIT\000"
.LC1137:
	.ascii	"Load AT\000"
.LC1138:
	.ascii	"unload attempt prevented\012\000"
	.space	2
.LC1139:
	.ascii	"Load User\000"
	.space	2
.LC1140:
	.ascii	"SYNCHRONIZE CACHE\000"
	.space	2
.LC1141:
	.ascii	"TEST UNIT READY\000"
.LC1142:
	.ascii	"VERIFY\000"
	.space	1
.LC1143:
	.ascii	"error in file verify: %d\012\000"
	.space	2
.LC1144:
	.ascii	"partial file verify: %d/%u\012\000"
.LC1145:
	.ascii	"WRITE(6)\000"
	.space	3
.LC1146:
	.ascii	"WRITE(10)\000"
	.space	2
.LC1147:
	.ascii	"WRITE(12)\000"
	.space	2
.LC1148:
	.ascii	"<6>%s called\012\000"
	.space	2
.LC1149:
	.ascii	"time stop\000"
	.space	2
.LC1150:
	.ascii	"time reset\000"
	.space	1
.LC1151:
	.ascii	"READ CD\000"
.LC1152:
	.ascii	"usb: %s : common->version_string[%d]=%s\015\012\000"
	.space	2
.LC1153:
	.ascii	"Unknown x%02x\000"
	.space	2
.LC1154:
	.ascii	"%s: no requests available\012\000"
	.space	1
.LC1155:
	.ascii	"%s: cannot queue read request\012\000"
	.space	1
.LC1156:
	.ascii	"diag_function_add\012\000"
	.space	1
.LC1157:
	.ascii	"usb_add_function failed\012\000"
	.space	3
.LC1158:
	.ascii	"unable to get diag usb channel\012\000"
.LC1159:
	.ascii	"<3>%s: diag: Cannot open channel '%s'\000"
	.space	2
.LC1160:
	.ascii	"send_sps_req\012\000"
	.space	2
.LC1161:
	.ascii	"<3>usb_ep_alloc_request failed\012\000"
.LC1162:
	.ascii	"<3>send_sps_req: usb_ep_queue error\012\000"
	.space	3
.LC1163:
	.ascii	"init_data\012\000"
	.space	1
.LC1164:
	.ascii	"<3>msm_ep_config failed\012\000"
	.space	3
.LC1165:
	.ascii	"QDSS is used with non DWC3 core\012\000"
	.space	3
.LC1166:
	.ascii	"usb_qdss_connect_work\012\000"
	.space	1
.LC1167:
	.ascii	"<3>init_data error\000"
	.space	1
.LC1168:
	.ascii	"set_qdss_data_connection\012\000"
	.space	2
.LC1169:
	.ascii	"<3>qdss_data_connection: memory alloc failed\012\000"
	.space	2
.LC1170:
	.ascii	"<3>set_qdss_data_connection error\000"
	.space	2
.LC1171:
	.ascii	"<3>send_sps_req error\012\000"
	.space	1
.LC1172:
	.ascii	"<3>uninit_data\012\000"
.LC1173:
	.ascii	"<3>msm_ep_unconfig failed\012\000"
	.space	1
.LC1174:
	.ascii	"usb_qdss_disconnect_work\012\000"
	.space	2
.LC1175:
	.ascii	"<3>%s: uninit_data error\012\000"
	.space	2
.LC1176:
	.ascii	"<3>usb_bam_disconnection error\012\000"
.LC1177:
	.ascii	"<3>qdss_disconnect error\000"
	.space	3
.LC1178:
	.ascii	"usb_qdss_free_req\012\000"
	.space	1
.LC1179:
	.ascii	"<3>usb_qdss_free_req: qdss ctx is NULL\012\000"
.LC1180:
	.ascii	"usb_qdss_alloc_req\012\000"
.LC1181:
	.ascii	"<3>usb_qdss_alloc_req: missing params\012\000"
	.space	1
.LC1182:
	.ascii	"<3>usb_qdss_alloc_req: ctrl_in allocation err\012\000"
	.space	1
.LC1183:
	.ascii	"<3>usb_qdss_alloc_req:ctrl_out allocation err\012\000"
	.space	1
.LC1184:
	.ascii	"usb_qdss_ctrl_read\012\000"
.LC1185:
	.ascii	"<3>error: usb_qdss_ctrl_read list is empty\012\000"
.LC1186:
	.ascii	"<3>qdss usb_ep_queue failed\012\000"
	.space	3
.LC1187:
	.ascii	"usb_qdss_ctrl_write\012\000"
	.space	3
.LC1188:
	.ascii	"<3>error: usb_qdss_ctrl_write list is empty\012\000"
	.space	3
.LC1189:
	.ascii	"usb_qdss_open\012\000"
	.space	1
.LC1190:
	.ascii	"<3>usb_qdss_open: notification func is missing\012\000"
.LC1191:
	.ascii	"usb_qdss_open: allocation qdss ctx\012\000"
.LC1192:
	.ascii	"usb_qdss_open: qdss ctx found\012\000"
	.space	1
.LC1193:
	.ascii	"usb_qdss_close\012\000"
.LC1194:
	.ascii	"k_rmnet_work\000"
	.space	3
.LC1195:
	.ascii	"&dev->smd_ctl.wait\000"
	.space	1
.LC1196:
	.ascii	"&dev->smd_data.wait\000"
.LC1197:
	.ascii	"rmnet\000"
	.space	2
.LC1198:
	.ascii	"usb_rmnet_smd\000"
	.space	2
.LC1199:
	.ascii	"rmnet_sdio\000"
	.space	1
.LC1200:
	.ascii	"usb_rmnet_sdio\000"
	.space	1
.LC1201:
	.ascii	"<3>usb:[%s] port_usb or port_tty is NULL!! started("
	.ascii	"%d)\012\000"
.LC1202:
	.ascii	"gs_open: ttyGS%d (%pK,%pK) no buffer\012\000"
	.space	2
.LC1203:
	.ascii	"gs_open: start ttyGS%d\012\000"
.LC1204:
	.ascii	"gs_open: ttyGS%d (%pK,%pK)\012\000"
.LC1205:
	.ascii	"gserial_connect: start ttyGS%d\012\000"
.LC1206:
	.ascii	"acm ttyGS%d deactivated\012\000"
	.space	3
.LC1207:
	.ascii	"reset acm ttyGS%d\012\000"
	.space	1
.LC1208:
	.ascii	"activate acm ttyGS%d\012\000"
	.space	2
.LC1209:
	.ascii	"%s: ep:%pK head:%pK num:%d size:%d cb:%pK\000"
	.space	2
.LC1210:
	.ascii	"%s: Event data\012\000"
.LC1211:
	.ascii	"%s: Event Open\012\000"
.LC1212:
	.ascii	"%s: port: %pK\012\000"
	.space	1
.LC1213:
	.ascii	"<3>%s: unable to allocate out requests\012\000"
.LC1214:
	.ascii	"%s: Event Close\012\000"
	.space	3
.LC1215:
	.ascii	"<3>%s: unable to allocate IN requests\012\000"
	.space	1
.LC1216:
	.ascii	"%s: sdio is not open\012\000"
	.space	2
.LC1217:
	.ascii	"<3>%s: usb request is null port#%d\012\000"
.LC1218:
	.ascii	"%s: port:%pK port#%d req:%pK actual:%d n_read:%d\012"
	.ascii	"\000"
	.space	2
.LC1219:
	.ascii	"%s: SDIO IO is not supported\012\000"
	.space	2
.LC1220:
	.ascii	"%s: sdio_write_avail:%d\000"
.LC1221:
	.ascii	"%s: req->actual is already zero,update bytes read\012"
	.ascii	"\000"
	.space	1
.LC1222:
	.ascii	"<3>%s: port#%d sdio write failed err:%d\000"
.LC1223:
	.ascii	"%s: port:%pK port#%d read_queue:%pK\000"
.LC1224:
	.ascii	"%s: usb cable is disconencted\012\000"
	.space	1
.LC1225:
	.ascii	"%s: req status shutdown portno#%d port:%pK\000"
	.space	1
.LC1226:
	.ascii	"<3>%s: sio channel is not open\012\000"
.LC1227:
	.ascii	"%s: flushed out %d bytes\012\000"
	.space	2
.LC1228:
	.ascii	"<3>%s: usb disconnected\012\000"
	.space	3
.LC1229:
	.ascii	"%s: SDIO channel is not open\012\000"
	.space	2
.LC1230:
	.ascii	"<3>%s: port:%pK port#%d sdio read failed err:%d\000"
.LC1231:
	.ascii	"<3>%s: unable to allocate out reqs\012\000"
.LC1232:
	.ascii	"<3>%s: unable to allocate in reqs\012\000"
	.space	1
.LC1233:
	.ascii	"READ AVAIL\000"
	.space	1
.LC1234:
	.ascii	"WRITE_AVAIL\000"
.LC1235:
	.ascii	"%s: port:%pK port#%d event:%s\012\000"
	.space	1
.LC1236:
	.ascii	"<3>%s: port allocation failed\012\000"
	.space	1
.LC1237:
	.ascii	"%s: port:%pK port#%d sdio_name: %s\012\000"
.LC1238:
	.ascii	"<3>%s: failed to enable in ep w/ err:%d\012\000"
	.space	3
.LC1239:
	.ascii	"%s: sdio is already open, start io\012\000"
.LC1240:
	.ascii	"%s: gadget:(%pK) count:%d\012\000"
	.space	1
.LC1241:
	.ascii	"<3>%s: invalid number of ports count:%d max_ports:%"
	.ascii	"d\012\000"
	.space	2
.LC1242:
	.ascii	"<3>%s: unable to create workqueue gsdio_wq\012\000"
.LC1243:
	.ascii	"&sdio_ports[i].lock\000"
.LC1244:
	.ascii	"<3>%s: sdio logical port allocation failed\012\000"
.LC1245:
	.ascii	"usb_gsdio\000"
	.space	2
.LC1246:
	.ascii	"%s: gserial:%pK portno:%u\012\000"
	.space	1
.LC1247:
	.ascii	"<3>%s: Invalid port no#%d\000"
	.space	2
.LC1248:
	.ascii	"%s: g:%pK count: %d\012\000"
	.space	3
.LC1249:
	.ascii	"<3>%s: Invalid num of ports count:%d gadget:%pK\012"
	.ascii	"\000"
	.space	3
.LC1250:
	.ascii	"k_gsmd\000"
	.space	1
.LC1251:
	.ascii	"<3>%s: Unable to create workqueue gsmd_wq\012\000"
	.space	1
.LC1252:
	.ascii	"&smd_ports[i].lock\000"
	.space	1
.LC1253:
	.ascii	"<3>%s: Unable to alloc port:%d\012\000"
.LC1254:
	.ascii	"%s: port:%pK portno:%d\012\000"
.LC1255:
	.ascii	"usb_gsmd\000"
	.space	3
.LC1256:
	.ascii	"%s: p:%pK#%d d:%pK skb_len:%d\012\000"
	.space	1
.LC1257:
	.ascii	"<3>%s: tx pkt dropped: tx_drop_cnt:%u\012\000"
	.space	1
.LC1258:
	.ascii	"%s: port:%pK d:%pK tom:%lu pbam:%u, pno:%d\012\000"
.LC1259:
	.ascii	"%s: grmnet:%pK port#%d\012\000"
.LC1260:
	.ascii	"<3>%s: invalid bam portno#%d\012\000"
	.space	2
.LC1261:
	.ascii	"<3>%s: grmnet port is null\012\000"
.LC1262:
	.ascii	"<3>%s: usb_bam_client_ready failed\012\000"
.LC1263:
	.ascii	"%s: requested BAM ports:%d and BAM2BAM ports:%d\012"
	.ascii	"\000"
	.space	3
.LC1264:
	.ascii	"<3>%s: Invalid num of ports count:%d,%d\012\000"
	.space	3
.LC1265:
	.ascii	"k_gbam\000"
	.space	1
.LC1266:
	.ascii	"<3>%s: Unable to create workqueue gbam_wq\012\000"
	.space	1
.LC1267:
	.ascii	"usb_rmnet\000"
	.space	2
.LC1268:
	.ascii	"<3>%s: Invalid port_num#%d\012\000"
.LC1269:
	.ascii	"%s: requested ports:%d\012\000"
.LC1270:
	.ascii	"<3>%s: Invalid client:%d\012\000"
	.space	2
.LC1271:
	.ascii	"<3>%s: Invalid num of ports count:%d\012\000"
	.space	2
.LC1272:
	.ascii	"gsmd_ctrl\000"
	.space	2
.LC1273:
	.ascii	"<3>%s: Unable to create workqueue grmnet_ctrl\012\000"
	.space	1
.LC1274:
	.ascii	"&c->wait\000"
	.space	3
.LC1275:
	.ascii	"&c->smd_wait_q\000"
	.space	1
.LC1276:
	.ascii	"%s: grmnet:%pK\012\000"
.LC1277:
	.ascii	"<3>%s: setting xport name for invalid port num %d\012"
	.ascii	"\000"
	.space	1
.LC1278:
	.ascii	"_ctrl\000"
	.space	2
.LC1279:
	.ascii	"<3>%s: Unable to create workqueue:%s\012\000"
	.space	2
.LC1280:
	.ascii	"_data\000"
	.space	2
.LC1281:
	.ascii	"%s: count: %d\012\000"
	.space	1
.LC1282:
	.ascii	"SMUX_RMNET_CTL_HSUART\000"
	.space	2
.LC1283:
	.ascii	"%s: ctrl xport: %s data xport: %s dev: %pK portno: "
	.ascii	"%d\012\000"
	.space	1
.LC1284:
	.ascii	"%s: reset port:%d\012\000"
	.space	1
.LC1285:
	.ascii	"<3>%s: gsmd_ctrl_connect failed: err:%d\012\000"
	.space	3
.LC1286:
	.ascii	"<3>%s: gqti_ctrl_connect failed: err:%d\012\000"
	.space	3
.LC1287:
	.ascii	"<3>%s: ghsic_ctrl_connect failed: err:%d\012\000"
	.space	2
.LC1288:
	.ascii	"<3>%s: ghsuart_ctrl_connect failed: err:%d\012\000"
.LC1289:
	.ascii	"<3>%s: usb_bam_get_connection_idx failed\012\000"
	.space	2
.LC1290:
	.ascii	"<3>%s: gbam_connect failed: err:%d\012\000"
.LC1291:
	.ascii	"<3>%s: ghsic_data_connect failed: err:%d\012\000"
	.space	2
.LC1292:
	.ascii	"<3>%s: ghsuart_data_connect failed: err:%d\012\000"
.LC1293:
	.ascii	"<3>%s: Max-%d instances supported\012\000"
	.space	1
.LC1294:
	.ascii	"%s: port#:%d, ctrl port: %s data port: %s\012\000"
	.space	1
.LC1295:
	.ascii	"<3>%s: Unable to allocate rmnet device\012\000"
.LC1296:
	.ascii	"<3>%s: Un-supported transport: %u\012\000"
	.space	1
.LC1297:
	.ascii	"<3>%s: rmnet: Cannot open ctrl port:'%s' data port:"
	.ascii	"'%s'\012\000"
	.space	3
.LC1298:
	.ascii	"%s: bam ports: %u bam2bam ports: %u data hsic ports"
	.ascii	": %u data hsuart ports: %u smd ports: %u ctrl hsic "
	.ascii	"ports: %u ctrl hsuart ports: %u nr_rmnet_ports: %u\012"
	.ascii	"\000"
	.space	2
.LC1299:
	.ascii	"%s: usb config:%pK\012\000"
.LC1300:
	.ascii	"<3>%s: supporting ports#%u port_id:%u\000"
	.space	2
.LC1301:
	.ascii	"<3>%s: failed to get string id, err:%d\012\000"
.LC1302:
	.ascii	"rmnet%d\000"
.LC1303:
	.ascii	"<3>%s: cannot allocate memory for name\012\000"
.LC1304:
	.ascii	"<3>%s: usb add function failed: %d\012\000"
.LC1305:
	.ascii	"%s: complete\012\000"
	.space	2
.LC1306:
	.ascii	"<3>%s: Could not bind rmnet%u config\012\000"
	.space	2
.LC1307:
	.ascii	"<3>%s: rmnet: Cannot setup transports\000"
	.space	2
.LC1308:
	.ascii	"<6>DUN register failed. data is null.\012\000"
	.space	1
.LC1309:
	.ascii	"<6>DUN is registerd\012\000"
	.space	3
.LC1310:
	.ascii	"acm ttyGS%d: %s speed IN/%s OUT/%s NOTIFY/%s\012\000"
	.space	2
.LC1311:
	.ascii	"%s/%pK: can't bind, err %d\012\000"
.LC1312:
	.ascii	"rndis\000"
	.space	2
.LC1313:
	.ascii	"%s: REMOTE_NDIS_INITIALIZE_MSG\012\000"
.LC1314:
	.ascii	"%s: REMOTE_NDIS_HALT_MSG\012\000"
	.space	2
.LC1315:
	.ascii	"%s: OID_GEN_CURRENT_PACKET_FILTER %08x\012\000"
.LC1316:
	.ascii	"<4>%s: set unknown OID 0x%08X, size %d\012\000"
.LC1317:
	.ascii	"%s: REMOTE_NDIS_RESET_MSG\012\000"
	.space	1
.LC1318:
	.ascii	"<4>%s: unknown RNDIS message 0x%08X len %d\012\000"
.LC1319:
	.ascii	"%03d:  %02x %02x %02x %02x %02x %02x %02x %02x %02x"
	.ascii	" %02x %02x %02x %02x %02x %02x %02x\012\000"
.LC1320:
	.ascii	"enabled\000"
.LC1321:
	.ascii	"disabled\000"
	.space	3
.LC1322:
	.ascii	"RNDIS command error %d, %d/%d\012\000"
	.space	1
.LC1323:
	.ascii	"%s: MaxTransferSize: %d : Multi_pkt_txr: %s\012\000"
	.space	3
.LC1324:
	.ascii	"<3>%s: RNDIS command error %d, %d/%d\012\000"
	.space	2
.LC1325:
	.ascii	"%s: MaxTransferSize: %d\012\000"
	.space	3
.LC1326:
	.ascii	"<3>%s: %s: teth_bridge_set_aggr_params failed\012\000"
	.space	1
.LC1327:
	.ascii	"<6>%s: SET DEVICE OFFLINE\000"
	.space	2
.LC1328:
	.ascii	"<6>%s: dev:%pK port:%d. Do nothing.\012\000"
	.space	3
.LC1329:
	.ascii	"<6>%s: mbim deactivated\012\000"
	.space	3
.LC1330:
	.ascii	"<6>%s: CONTROL_INTERFACE\000"
	.space	3
.LC1331:
	.ascii	"<6>%s: reset mbim control %d\012\000"
	.space	2
.LC1332:
	.ascii	"<3>%s: Failed configuring notify ep %s: err %d\012\000"
.LC1333:
	.ascii	"<6>%s: DATA_INTERFACE\000"
	.space	2
.LC1334:
	.ascii	"<6>%s: reset mbim\012\000"
	.space	1
.LC1335:
	.ascii	"<6>%s: Alt set 1, initialize ports\000"
	.space	1
.LC1336:
	.ascii	"<6>%s: Choose endpoints\000"
.LC1337:
	.ascii	"<3>%s: IN ep %s failed: %d\012\000"
.LC1338:
	.ascii	"<6>%s: Set mbim port in_desc = 0x%pK\012\000"
	.space	2
.LC1339:
	.ascii	"<3>%s: OUT ep %s failed: %d\012\000"
	.space	3
.LC1340:
	.ascii	"<6>%s: Set mbim port out_desc = 0x%pK\012\000"
	.space	1
.LC1341:
	.ascii	"%s: Activate mbim\012\000"
	.space	1
.LC1342:
	.ascii	"<6>%s: dev:%pK portno:%d\012\000"
	.space	2
.LC1343:
	.ascii	"<3>%s: bam_data_setup failed: err:%d\012\000"
	.space	2
.LC1344:
	.ascii	"<6>%s: mbim bam connected\012\000"
	.space	1
.LC1345:
	.ascii	"<6>%s: PORTS already SET\000"
	.space	3
.LC1346:
	.ascii	"<6>%s: SET DEVICE ONLINE\000"
	.space	3
.LC1347:
	.ascii	"<3>%s: ERROR: Illegal Interface\000"
.LC1348:
	.ascii	"%s: requested %d BAM2BAM ports\000"
	.space	1
.LC1349:
	.ascii	"%s: bam_data is already setup\000"
	.space	2
.LC1350:
	.ascii	"k_bam_data\000"
	.space	1
.LC1351:
	.ascii	"<3>%s: Failed to create workqueue\012\000"
	.space	1
.LC1352:
	.ascii	"<3>%s: Failed to alloc port:%d\012\000"
.LC1353:
	.ascii	"<3>%s: bam_data_setup failed err: %d\012\000"
	.space	2
.LC1354:
	.ascii	"<3>%s: bam setup failed\000"
.LC1355:
	.ascii	"%s: data transport type is %s\000"
	.space	2
.LC1356:
	.ascii	"%s: set xport = %d\000"
	.space	1
.LC1357:
	.ascii	"%s: using random dev_mac ethernet address\012\000"
	.space	1
.LC1358:
	.ascii	"%s: using random host_mac ethernet address\012\000"
.LC1359:
	.ascii	"%02X%02X%02X%02X%02X%02X\000"
	.space	3
.LC1360:
	.ascii	"cdc_ethernet\000"
	.space	3
.LC1361:
	.ascii	"<3>%s: failed to add function\000"
	.space	2
.LC1362:
	.ascii	"%s: setting ecm_ipa, host_ethaddr=%pM, device_ethad"
	.ascii	"dr=%pM\000"
	.space	2
.LC1363:
	.ascii	"%s: ecm_ipa successful created\000"
	.space	1
.LC1364:
	.ascii	"<6>%s: port number %u\000"
	.space	2
.LC1365:
	.ascii	"<3>%s: Can not add port %u. Max ports = %d\000"
	.space	1
.LC1366:
	.ascii	"<6>%s: no_ports:%d\012\000"
.LC1367:
	.ascii	"<6>%s: mbim struct not allocated\000"
	.space	3
.LC1368:
	.ascii	"usb_mbim\000"
	.space	3
.LC1369:
	.ascii	"<6>%s: Exit status %d\000"
	.space	2
.LC1370:
	.ascii	"%s: %s: mbim transport is %s\000"
	.space	3
.LC1371:
	.ascii	"usb\000"
.LC1372:
	.ascii	"%s%%d\000"
	.space	2
.LC1373:
	.ascii	"self\000"
	.space	3
.LC1374:
	.ascii	"using random %s ethernet address\012\000"
	.space	2
.LC1375:
	.ascii	"<7>usb: set unique host mac\012\000"
	.space	3
.LC1376:
	.ascii	"register_netdev failed, %d\012\000"
.LC1377:
	.ascii	"<6>%s: MAC %pM\012\000"
.LC1378:
	.ascii	"<6>%s: HOST MAC %pM\012\000"
	.space	3
.LC1379:
	.ascii	"<3>%s: %s: rndis_pdata\012\000"
.LC1380:
	.ascii	"<6>%s: %s MAC: %02X:%02X:%02X:%02X:%02X:%02X\012\000"
	.space	2
.LC1381:
	.ascii	"<3>%s: %s: gether_setup failed\012\000"
.LC1382:
	.ascii	"<3>%s: %s: ecm_pdata\012\000"
	.space	2
.LC1383:
	.ascii	"ecm\000"
.LC1384:
	.ascii	"<3>%s: %s: ecm_bind_config failed\012\000"
	.space	1
.LC1385:
	.ascii	"<3>%s: RNDIS header memory allocation failed.\012\000"
	.space	1
.LC1386:
	.ascii	"rndis deactivated\012\000"
	.space	1
.LC1387:
	.ascii	"reset rndis\012\000"
	.space	3
.LC1388:
	.ascii	"init rndis\012\000"
.LC1389:
	.ascii	"RNDIS RX/TX early activation ... \012\000"
	.space	1
.LC1390:
	.ascii	"ecm deactivated\012\000"
	.space	3
.LC1391:
	.ascii	"reset ecm\012\000"
	.space	1
.LC1392:
	.ascii	"init ecm\012\000"
	.space	2
.LC1393:
	.ascii	"activate ecm\012\000"
	.space	2
.LC1394:
	.ascii	"ncm deactivated\012\000"
	.space	3
.LC1395:
	.ascii	"reset ncm control %d\012\000"
	.space	2
.LC1396:
	.ascii	"init ncm ctrl %d\012\000"
	.space	2
.LC1397:
	.ascii	"reset ncm\012\000"
	.space	1
.LC1398:
	.ascii	"<7>usb: %s gather_disconnect\012\000"
	.space	2
.LC1399:
	.ascii	"init ncm\012\000"
	.space	2
.LC1400:
	.ascii	"<3>activate ncm setting MTU size (%d)\012\000"
	.space	1
.LC1401:
	.ascii	"host\000"
	.space	3
.LC1402:
	.ascii	"%s: %s: ecm_transport is %s\000"
.LC1403:
	.ascii	"%s: dev:%pK. Disconnect BAM.\012\000"
	.space	2
.LC1404:
	.ascii	"<3>%s: bam_data_connect failed: err:%d\012\000"
.LC1405:
	.ascii	"%s: ecm bam connected\012\000"
	.space	1
.LC1406:
	.ascii	"<6>%s: rndis deactivated\012\000"
	.space	2
.LC1407:
	.ascii	"%s: dev:%pK. %s Disconnect BAM.\012\000"
	.space	3
.LC1408:
	.ascii	"<6>%s: rndis bam connected\012\000"
.LC1409:
	.ascii	"RNDIS RX/TX early activation ...\012\000"
	.space	2
.LC1410:
	.ascii	"<3>%s: unable to open sound control device file: %s"
	.ascii	"\012\000"
	.space	3
.LC1411:
	.ascii	"<3>%s: No such PCM playback device: %s\012\000"
.LC1412:
	.ascii	"%s: Initialized PCM playback device: %s\012\000"
	.space	3
.LC1413:
	.ascii	"<3>%s: Setting playback HW params failed: err %d\000"
	.space	3
.LC1414:
	.ascii	"<3>%s: No such PCM capture device: %s\012\000"
	.space	1
.LC1415:
	.ascii	"<3>%s: Setting capture HW params failed: err %d\000"
.LC1416:
	.ascii	"<3>%s: Failed to open snd devices\012\000"
	.space	1
.LC1417:
	.ascii	"%s: Enter\000"
	.space	2
.LC1418:
	.ascii	"audio\000"
	.space	2
.LC1419:
	.ascii	"<3>%s: %s: Failed to add usb audio function, err = "
	.ascii	"%d\000"
	.space	2
.LC1420:
	.ascii	"<3>%s: intf: %d alt: %d\012\000"
	.space	3
.LC1421:
	.ascii	"<3>%s() kfifo_reset\012\000"
	.space	3
.LC1422:
	.ascii	"<6>conn_gadget_open\012\000"
	.space	3
.LC1423:
	.ascii	"<3>%s() handle closing now. open again\012\000"
.LC1424:
	.ascii	"<3>%s() conn_gadget_lock(open_excl) f\012\000"
	.space	1
.LC1425:
	.ascii	"<3>%s() count is too large (%d)\012\000"
	.space	3
.LC1426:
	.ascii	"<3>%s() conn_gadget_lock(read_excl) f\012\000"
	.space	1
.LC1427:
	.ascii	"<3>%s() waiting for online state\012\000"
	.space	2
.LC1428:
	.ascii	"<3>%s() dev->error has value\012\000"
	.space	2
.LC1429:
	.ascii	"<3>%s() zero queue\012\000"
.LC1430:
	.ascii	"<3>%s() kfifo_to_user f %d\012\000"
.LC1431:
	.ascii	"<3>%s() wait_event_interruptible f %d\012\000"
	.space	1
.LC1432:
	.ascii	"<3>conn_gadget_function_bind dev: %pK\012\000"
	.space	1
.LC1433:
	.ascii	"%s: create_bulk_endpoints dev: %pK\012\000"
.LC1434:
	.ascii	"<3>usb_ep_autoconfig for ep_in failed\012\000"
	.space	1
.LC1435:
	.ascii	"%s: usb_ep_autoconfig for ep_in got %s\012\000"
.LC1436:
	.ascii	"<3>usb_ep_autoconfig for ep_out failed\012\000"
.LC1437:
	.ascii	"%s: usb_ep_autoconfig for conn_gadget ep_out got %s"
	.ascii	"\012\000"
	.space	3
.LC1438:
	.ascii	"<3>%s() conn_gadget_bind() could not allocate reque"
	.ascii	"sts\012\000"
.LC1439:
	.ascii	"<3>%s speed %s: IN/%s, OUT/%s\012\000"
	.space	1
.LC1440:
	.ascii	"<3>conn_gadget_function_unbind\012\000"
.LC1441:
	.ascii	"<3>%s: %s: ncm_pdata\012\000"
	.space	2
.LC1442:
	.ascii	"<7>usb: %s MAC:%02X:%02X:%02X:%02X:%02X:%02X\012\000"
	.space	2
.LC1443:
	.ascii	"<7>usb: %s before MAC:%02X:%02X:%02X:%02X:%02X:%02X"
	.ascii	"\012\000"
	.space	3
.LC1444:
	.ascii	"<7>usb: %s after MAC:%02X:%02X:%02X:%02X:%02X:%02X\012"
	.ascii	"\000"
.LC1445:
	.ascii	"<7>usb: %s ncm ready (%s)\012\000"
	.space	1
.LC1446:
	.ascii	"<7>usb: %s idProduct=0x%x, DeviceClass=0x%x\012\000"
	.space	3
.LC1447:
	.ascii	"<7>usb: %s old status=%d, new status=%d\012\000"
	.space	3
.LC1448:
	.ascii	"%x\000"
	.space	1
.LC1449:
	.ascii	"<7>usb: %s ver=0x%x vendor_id=0x%x\012\000"
.LC1450:
	.ascii	"<7>usb: %s failed usb_ep_queue\012\000"
.LC1451:
	.ascii	"USB_CONNECTION=READY\000"
	.space	3
.LC1452:
	.ascii	"<6>%s: %s\012\000"
	.space	1
.LC1453:
	.ascii	"<6>%s: %s  canceling the work\012\000"
	.space	1
.LC1454:
	.ascii	"<3>usb: %s MAC host is always disabled \012\000"
	.space	3
.LC1455:
	.ascii	"<6>usb: %s ignore!! usb30en(%d), value(%d)\012\000"
.LC1456:
	.ascii	"<7>usb: %s B4 disconectng gadget\012\000"
	.space	2
.LC1457:
	.ascii	"<7>usb: %s after usb_gadget_connect\012\000"
	.space	3
.LC1458:
	.ascii	"<3>usb: %s Failed to set the usb30_en value\012\000"
	.space	3
.LC1459:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/and"
	.ascii	"roid.c\000"
	.space	2
.LC1460:
	.ascii	"<3>%s: %s: usb_add_config failed : err: %d\012\000"
.LC1461:
	.ascii	"<6>usb: enabled: %d, dev->enabled: %d\012\000"
	.space	1
.LC1462:
	.ascii	"SAMSUNG_Android\000"
.LC1463:
	.ascii	"<7>usb: %s f_holder->f:%s\012\000"
	.space	1
.LC1464:
	.ascii	"acm\000"
.LC1465:
	.ascii	"<7>usb: acm is enabled. (bcdDevice=0x400)\012\000"
	.space	1
.LC1466:
	.ascii	"<7>usb: conn_gadget + kies (bcdDevice=0xC00)\012\000"
	.space	2
.LC1467:
	.ascii	"<7>usb: conn_gadget only (bcdDevice=0x800)\012\000"
.LC1468:
	.ascii	"<7>usb: %s vendor=%x,product=%x,bcdDevice=%x\000"
	.space	3
.LC1469:
	.ascii	"<7>,Class=%x,SubClass=%x,Protocol=%x\012\000"
	.space	2
.LC1470:
	.ascii	"<7>usb: %s next cmd : usb_add_config\012\000"
	.space	2
.LC1471:
	.ascii	"<3>%s: %s: android_enable failed\012\000"
	.space	2
.LC1472:
	.ascii	"<3>%s: android_usb: already %s\012\000"
.LC1473:
	.ascii	"<6>adb_open\012\000"
	.space	3
.LC1474:
	.ascii	"<6>read descriptors\012\000"
	.space	3
.LC1475:
	.ascii	"<6>read strings\012\000"
	.space	3
.LC1476:
	.ascii	"&epfile->mutex\000"
	.space	1
.LC1477:
	.ascii	"&epfile->wait\000"
	.space	2
.LC1478:
	.ascii	"ep%u\000"
	.space	3
.LC1479:
	.ascii	"%s: start adbd only in ADB composition\012\000"
.LC1480:
	.ascii	"SMUX_CONNECTED\000"
	.space	1
.LC1481:
	.ascii	"SMUX_DISCONNECTED\000"
	.space	2
.LC1482:
	.ascii	"SMUX_READ_DONE\000"
	.space	1
.LC1483:
	.ascii	"SMUX_READ_FAIL\000"
	.space	1
.LC1484:
	.ascii	"SMUX_WRITE_DONE\000"
.LC1485:
	.ascii	"SMUX_WRITE_FAIL\000"
.LC1486:
	.ascii	"SMUX_TIOCM_UPDATE\000"
	.space	2
.LC1487:
	.ascii	"SMUX_LOW_WM_HIT\000"
.LC1488:
	.ascii	"SMUX_HIGH_WM_HIT\000"
	.space	3
.LC1489:
	.ascii	"RNDIS_UNINITIALIZED\000"
.LC1490:
	.ascii	"RNDIS_INITIALIZED\000"
	.space	2
.LC1491:
	.ascii	"RNDIS_DATA_INITIALIZED\000"
	.space	1
.LC1492:
	.ascii	"DATA\000"
	.space	3
.LC1493:
	.ascii	"OPEN\000"
	.space	3
.LC1494:
	.ascii	"CLOSE\000"
	.space	2
.LC1495:
	.ascii	"NONE\000"
	.space	3
.LC1496:
	.ascii	"name of streaming function:%s\012\000"
	.space	1
.LC1497:
	.ascii	"%s: dload:%pK pid:%x serial_num:%s\012\000"
.LC1498:
	.ascii	"%s: unable to update PID and serial_no\012\000"
.LC1499:
	.ascii	"setting streaming_enabled to false.\012\000"
	.space	3
.LC1500:
	.ascii	"remote_wakeup\000"
	.space	2
.LC1501:
	.ascii	"state\000"
	.space	2
.LC1502:
	.ascii	"pm_qos\000"
	.space	1
.LC1503:
	.ascii	"enable\000"
	.space	1
.LC1504:
	.ascii	"functions\000"
	.space	2
.LC1505:
	.ascii	"macos\000"
	.space	2
.LC1506:
	.ascii	"ss_host_available\000"
	.space	2
.LC1507:
	.ascii	"usb30en\000"
.LC1508:
	.ascii	"bcdUSB\000"
	.space	1
.LC1509:
	.ascii	"iSerial\000"
.LC1510:
	.ascii	"iProduct\000"
	.space	3
.LC1511:
	.ascii	"iManufacturer\000"
	.space	2
.LC1512:
	.ascii	"bDeviceProtocol\000"
.LC1513:
	.ascii	"bDeviceSubClass\000"
.LC1514:
	.ascii	"bDeviceClass\000"
	.space	3
.LC1515:
	.ascii	"bcdDevice\000"
	.space	2
.LC1516:
	.ascii	"idProduct\000"
	.space	2
.LC1517:
	.ascii	"idVendor\000"
	.space	3
.LC1518:
	.ascii	"android_usb: %s remote wakeup\012\000"
	.space	1
.LC1519:
	.ascii	"func:%s is enabled.\012\000"
	.space	3
.LC1520:
	.ascii	"set streaming_enabled to true\012\000"
	.space	1
.LC1521:
	.ascii	"uasp\000"
	.space	3
.LC1522:
	.ascii	"UASP %s\012\000"
	.space	3
.LC1523:
	.ascii	"pcm\000"
.LC1524:
	.ascii	"mass_storage\000"
	.space	3
.LC1525:
	.ascii	"sua_version_info\000"
	.space	3
.LC1526:
	.ascii	"product_string\000"
	.space	1
.LC1527:
	.ascii	"vendor_string\000"
	.space	2
.LC1528:
	.ascii	"inquiry_string\000"
	.space	1
.LC1529:
	.ascii	"rndis_qc\000"
	.space	3
.LC1530:
	.ascii	"max_pkt_per_xfer\000"
	.space	3
.LC1531:
	.ascii	"vendorID\000"
	.space	3
.LC1532:
	.ascii	"ethaddr\000"
.LC1533:
	.ascii	"wceis\000"
	.space	2
.LC1534:
	.ascii	"manufacturer\000"
	.space	3
.LC1535:
	.ascii	"ptp\000"
.LC1536:
	.ascii	"diag\000"
	.space	3
.LC1537:
	.ascii	"clients\000"
.LC1538:
	.ascii	"mbim_transports\000"
.LC1539:
	.ascii	"%s: mbim transport is %s\000"
	.space	3
.LC1540:
	.ascii	"ecm_qc\000"
	.space	1
.LC1541:
	.ascii	"ecm_transports\000"
	.space	1
.LC1542:
	.ascii	"ecm_ethaddr\000"
.LC1543:
	.ascii	"%s: ecm_transport is %s\000"
.LC1544:
	.ascii	"transport_names\000"
.LC1545:
	.ascii	"transports\000"
	.space	1
.LC1546:
	.ascii	"rmnet_smd\000"
	.space	2
.LC1547:
	.ascii	"instances\000"
	.space	2
.LC1548:
	.ascii	"midi\000"
	.space	3
.LC1549:
	.ascii	"alsa\000"
	.space	3
.LC1550:
	.ascii	"start adbd only in ADB composition\012\000"
.LC1551:
	.ascii	"aliases\000"
.LC1552:
	.ascii	"terminal_version\000"
	.space	3
.LC1553:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_n"
	.ascii	"cm.c\000"
.LC1554:
	.ascii	"CDC Network Control Model (NCM)\000"
.LC1555:
	.ascii	"CDC Network Data\000"
	.space	3
.LC1556:
	.ascii	"CDC NCM\000"
.LC1557:
	.ascii	"in_max_packet_size\000"
	.space	1
.LC1558:
	.ascii	"out_max_packet_size\000"
.LC1559:
	.ascii	"usb_buffer_size\000"
.LC1560:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_c"
	.ascii	"onn_gadget.c\000"
.LC1561:
	.ascii	"%s disabled\012\000"
	.space	3
.LC1562:
	.ascii	"%s: error %d\012\000"
	.space	2
.LC1563:
	.ascii	"%s: req_put\012\000"
	.space	3
.LC1564:
	.ascii	"usb_ep_autoconfig for conn_gadget ep_out got %s\012"
	.ascii	"\000"
	.space	3
.LC1565:
	.ascii	"version\000"
.LC1566:
	.ascii	"1.0\000"
.LC1567:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_u"
	.ascii	"ac1.c\000"
	.space	3
.LC1568:
	.ascii	"Allocated %d requests\012\000"
	.space	1
.LC1569:
	.ascii	"intf %d, alt %d\012\000"
	.space	3
.LC1570:
	.ascii	"audio req %02x.%02x v%04x i%04x l%d\012\000"
	.space	3
.LC1571:
	.ascii	"USB_DIR_IN | USB_TYPE_CLASS | USB_RECIP_ENDPOINT\000"
	.space	3
.LC1572:
	.ascii	"USB_DIR_OUT | USB_TYPE_CLASS | USB_RECIP_ENDPOINT\000"
	.space	2
.LC1573:
	.ascii	"USB_DIR_IN | USB_TYPE_CLASS | USB_RECIP_INTERFACE\000"
	.space	2
.LC1574:
	.ascii	"USB_DIR_OUT | USB_TYPE_CLASS | USB_RECIP_INTERFACE\000"
	.space	1
.LC1575:
	.ascii	"bRequest 0x%x, w_value 0x%04x, len %d, ep %d\012\000"
	.space	2
.LC1576:
	.ascii	"bRequest 0x%x, w_value 0x%04x, len %d, endp %d, epn"
	.ascii	"um %d\012\000"
	.space	2
.LC1577:
	.ascii	"bRequest 0x%x, w_value 0x%04x, len %d, entity %d\012"
	.ascii	"\000"
	.space	2
.LC1578:
	.ascii	"Copy %d bytes\000"
	.space	2
.LC1579:
	.ascii	"copy_buf == 0\000"
	.space	2
.LC1580:
	.ascii	"Queue capture packet: size %d\000"
	.space	2
.LC1581:
	.ascii	"audio_playback_buf_size %d - copy_buf->actual %d, r"
	.ascii	"eq->actual %d\000"
	.space	3
.LC1582:
	.ascii	"play_buf->actual = %d\000"
	.space	2
.LC1583:
	.ascii	"Microphone Iso-IN Endpoint Control\000"
	.space	1
.LC1584:
	.ascii	"Microphone Sampling Frequency Control\000"
	.space	2
.LC1585:
	.ascii	"Speaker Iso-out Endpoint Control\000"
	.space	3
.LC1586:
	.ascii	"Speaker Sampling Frequency Control\000"
	.space	1
.LC1587:
	.ascii	"Microphone Feature Unit Controls\000"
	.space	3
.LC1588:
	.ascii	"Microphone Volume Control\000"
	.space	2
.LC1589:
	.ascii	"Microphone Mute Control\000"
.LC1590:
	.ascii	"Speaker Function Unit Controls\000"
	.space	1
.LC1591:
	.ascii	"Speaker Volume Control\000"
	.space	1
.LC1592:
	.ascii	"Speaker Mute Control\000"
	.space	3
.LC1593:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/u_u"
	.ascii	"ac1.c\000"
	.space	3
.LC1594:
	.ascii	"Enter\000"
	.space	2
.LC1595:
	.ascii	"Initialized PCM playback device: %s\012\000"
	.space	3
.LC1596:
	.ascii	"Return %d\000"
	.space	2
.LC1597:
	.ascii	"frames = %d, count = %d\000"
.LC1598:
	.ascii	"Done. Sent %d frames\000"
	.space	3
.LC1599:
	.ascii	"runtime->frame_bits = %d, count = %d, frames = %d\000"
	.space	2
.LC1600:
	.ascii	"Initialized playback params\000"
.LC1601:
	.ascii	"Initialize hw params\000"
	.space	3
.LC1602:
	.ascii	"capture params: access %x, format %x, channels %d, "
	.ascii	"rate %d\012\000"
.LC1603:
	.ascii	"playback params: access %x, format %x, channels %d,"
	.ascii	" rate %d\012\000"
	.space	3
.LC1604:
	.ascii	"buffer_bytes = (%d,%d) omin=%d omax=%d int=%d empty"
	.ascii	"=%d\012\000"
.LC1605:
	.ascii	"/dev/snd/controlC0\000"
	.space	1
.LC1606:
	.ascii	"/dev/snd/pcmC0D6c\000"
	.space	2
.LC1607:
	.ascii	"/dev/snd/pcmC0D5p\000"
	.space	2
.LC1608:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/u_q"
	.ascii	"c_ether.c\000"
	.space	3
.LC1609:
	.ascii	"using random host_mac ethernet address\012\000"
.LC1610:
	.ascii	"using random dev_mac ethernet address\012\000"
	.space	1
.LC1611:
	.ascii	"gadget\000"
	.space	1
.LC1612:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/u_e"
	.ascii	"ther.c\000"
	.space	2
.LC1613:
	.ascii	"req->length:%d header_len:%u\012skb->len:%d skb->da"
	.ascii	"ta_len:%d\012\000"
	.space	1
.LC1614:
	.ascii	"%s: size: %d\000"
	.space	3
.LC1615:
	.ascii	"android_rndis_qc\000"
	.space	3
.LC1616:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_q"
	.ascii	"c_rndis.c\000"
	.space	3
.LC1617:
	.ascii	"Sent max packet size %d\000"
.LC1618:
	.ascii	"rndis_qc_unbind: free\000"
	.space	2
.LC1619:
	.ascii	"%s: rndis resumed\012\000"
	.space	1
.LC1620:
	.ascii	"%s: rndis suspended\012\000"
	.space	3
.LC1621:
	.ascii	"MaxTransferSize: %d\012\000"
	.space	3
.LC1622:
	.ascii	"dev:%pK. %s Disconnect BAM.\012\000"
	.space	3
.LC1623:
	.ascii	"RNDIS Communications Control\000"
	.space	3
.LC1624:
	.ascii	"RNDIS Ethernet Data\000"
.LC1625:
	.ascii	"RNDIS\000"
	.space	2
.LC1626:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_e"
	.ascii	"cm.c\000"
.LC1627:
	.ascii	"CDC Ethernet Control Model (ECM)\000"
	.space	3
.LC1628:
	.ascii	"CDC Ethernet Data\000"
	.space	2
.LC1629:
	.ascii	"CDC ECM\000"
.LC1630:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/u_b"
	.ascii	"am_data.c\000"
	.space	3
.LC1631:
	.ascii	"bam_data is already setup\000"
	.space	2
.LC1632:
	.ascii	"requested %d BAM2BAM ports\000"
	.space	1
.LC1633:
	.ascii	"bam_data_destroy: Freeing ports\012\000"
	.space	3
.LC1634:
	.ascii	"dev:%pK port#%d\012\000"
	.space	3
.LC1635:
	.ascii	"port:%pK portno:%d\012\000"
.LC1636:
	.ascii	"%s: Connect workqueue done\000"
	.space	1
.LC1637:
	.ascii	"%s: Connect workqueue started\000"
	.space	2
.LC1638:
	.ascii	"%s: status: %d\012\000"
.LC1639:
	.ascii	"android_mbim\000"
	.space	3
.LC1640:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_m"
	.ascii	"bim.c\000"
	.space	3
.LC1641:
	.ascii	"Received command %d\000"
.LC1642:
	.ascii	"Exit(%d)\000"
	.space	3
.LC1643:
	.ascii	"Enter(%d)\000"
	.space	2
.LC1644:
	.ascii	"copied %d bytes to user\012\000"
	.space	3
.LC1645:
	.ascii	"cpkt size:%d\012\000"
	.space	2
.LC1646:
	.ascii	"Received request packet\012\000"
	.space	3
.LC1647:
	.ascii	"Requests list is empty. Wait.\012\000"
	.space	1
.LC1648:
	.ascii	"Enter(%d)\012\000"
	.space	1
.LC1649:
	.ascii	"MBIM in configuration %d\000"
	.space	3
.LC1650:
	.ascii	"Activate mbim\012\000"
	.space	1
.LC1651:
	.ascii	"%02x.%02x v%04x i%04x l%u\000"
	.space	2
.LC1652:
	.ascii	"control request: %02x.%02x v%04x i%04x l%d\012\000"
.LC1653:
	.ascii	"USB_CDC_SET_NTB_FORMAT\000"
	.space	1
.LC1654:
	.ascii	"NTB FORMAT: sending %d\012\000"
.LC1655:
	.ascii	"USB_CDC_GET_NTB_FORMAT\000"
	.space	1
.LC1656:
	.ascii	"USB_CDC_SET_NTB_INPUT_SIZE\000"
	.space	1
.LC1657:
	.ascii	"Reply to host INPUT SIZE %d\012\000"
	.space	3
.LC1658:
	.ascii	"USB_CDC_GET_NTB_INPUT_SIZE\000"
	.space	1
.LC1659:
	.ascii	"USB_CDC_GET_NTB_PARAMETERS\000"
	.space	1
.LC1660:
	.ascii	"copied encapsulated_response %d bytes\000"
	.space	2
.LC1661:
	.ascii	"req%02x.%02x v%04x i%04x l%d\012\000"
	.space	2
.LC1662:
	.ascii	"USB_CDC_GET_ENCAPSULATED_RESPONSE\000"
	.space	2
.LC1663:
	.ascii	"w_length > req->length: %d > %d\000"
.LC1664:
	.ascii	"USB_CDC_SEND_ENCAPSULATED_COMMAND\000"
	.space	2
.LC1665:
	.ascii	"USB_CDC_RESET_FUNCTION\000"
	.space	1
.LC1666:
	.ascii	"Wake up read queue\000"
	.space	1
.LC1667:
	.ascii	"Add to cpkt_req_q packet with len = %d\012\000"
.LC1668:
	.ascii	"Set NTB INPUT SIZE %d\012\000"
	.space	1
.LC1669:
	.ascii	"%s: Exit\012\000"
	.space	2
.LC1670:
	.ascii	"notify_count = %d\000"
	.space	2
.LC1671:
	.ascii	"queue request: notify_count = %d\000"
	.space	3
.LC1672:
	.ascii	"notify_response_avaliable: done\000"
.LC1673:
	.ascii	"Notification %02x sent\012\000"
.LC1674:
	.ascii	"No pending notifications\012\000"
	.space	2
.LC1675:
	.ascii	"notify_state: %d\000"
	.space	3
.LC1676:
	.ascii	"Queue empty packet for QBI\000"
	.space	1
.LC1677:
	.ascii	"dev:%pK port_num#%d\012\000"
	.space	3
.LC1678:
	.ascii	"Successful Exit\000"
.LC1679:
	.ascii	"delay ep_queue: notifications queue is busy[%d]\000"
.LC1680:
	.ascii	"dev:%pK portno#%d\012\000"
	.space	1
.LC1681:
	.ascii	"MBIM Control\000"
	.space	3
.LC1682:
	.ascii	"MBIM Data\000"
	.space	2
.LC1683:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_q"
	.ascii	"c_ecm.c\000"
	.space	1
.LC1684:
	.ascii	"ecm_ipa successful created\000"
	.space	1
.LC1685:
	.ascii	"setting ecm_ipa, host_ethaddr=%pM, device_ethaddr=%"
	.ascii	"pM\000"
	.space	2
.LC1686:
	.ascii	"set xport = %d\000"
	.space	1
.LC1687:
	.ascii	"data transport type is %s\000"
	.space	2
.LC1688:
	.ascii	"ecm resumed\012\000"
	.space	3
.LC1689:
	.ascii	"ecm suspended\012\000"
	.space	1
.LC1690:
	.ascii	"dev:%pK. Disconnect BAM.\012\000"
	.space	2
.LC1691:
	.ascii	"ecm bam connected\012\000"
	.space	1
.LC1692:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/rnd"
	.ascii	"is.c\000"
.LC1693:
	.ascii	"%s: REMOTE_NDIS_KEEPALIVE_MSG\012\000"
	.space	1
.LC1694:
	.ascii	"%03d: %08x %08x %08x %08x\012\000"
	.space	1
.LC1695:
	.ascii	"set OID %08x value, len %d:\012\000"
	.space	3
.LC1696:
	.ascii	"%s: OID_GEN_RCV_ERROR\012\000"
	.space	1
.LC1697:
	.ascii	"%s: OID_GEN_XMIT_ERROR\012\000"
.LC1698:
	.ascii	"%s: OID_GEN_RCV_OK\012\000"
.LC1699:
	.ascii	"%s: OID_GEN_XMIT_OK\012\000"
	.space	3
.LC1700:
	.ascii	"%s: OID_GEN_MEDIA_CONNECT_STATUS\012\000"
	.space	2
.LC1701:
	.ascii	"%s: OID_GEN_LINK_SPEED\012\000"
.LC1702:
	.ascii	"query OID %08x value, len %d:\012\000"
	.space	1
.LC1703:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_r"
	.ascii	"ndis.c\000"
	.space	2
.LC1704:
	.ascii	"USB accessory\000"
	.space	2
.LC1705:
	.ascii	"usb_accessory\000"
	.space	2
.LC1706:
	.ascii	"Android Accessory Interface\000"
.LC1707:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_m"
	.ascii	"tp.c\000"
.LC1708:
	.ascii	"MTP\000"
.LC1709:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_m"
	.ascii	"idi.c\000"
	.space	3
.LC1710:
	.ascii	"MIDI function\000"
	.space	2
.LC1711:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_c"
	.ascii	"cid.c\000"
	.space	3
.LC1712:
	.ascii	"ccid_ctrl\000"
	.space	2
.LC1713:
	.ascii	"ccid_bulk\000"
	.space	2
.LC1714:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_a"
	.ascii	"db.c\000"
.LC1715:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_a"
	.ascii	"cm.c\000"
.LC1716:
	.ascii	"CDC Abstract Control Model (ACM)\000"
	.space	3
.LC1717:
	.ascii	"CDC ACM Data\000"
	.space	3
.LC1718:
	.ascii	"CDC Serial\000"
	.space	1
.LC1719:
	.ascii	"dun\000"
.LC1720:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/u_d"
	.ascii	"ata_hsuart.c\000"
.LC1721:
	.ascii	"%s: event type: %s \000"
.LC1722:
	.ascii	"%s: ep:%s head:%pK num:%d cb:%pK\000"
	.space	3
.LC1723:
	.ascii	"SMUX_DUN_DATA_HSUART\000"
	.space	3
.LC1724:
	.ascii	"SMUX_RMNET_DATA_HSUART\000"
	.space	1
.LC1725:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/u_c"
	.ascii	"trl_hsuart.c\000"
.LC1726:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/u_d"
	.ascii	"ata_hsic.c\000"
	.space	2
.LC1727:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/u_c"
	.ascii	"trl_hsic.c\000"
	.space	2
.LC1728:
	.ascii	"rmnet_ctrl\000"
	.space	1
.LC1729:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/u_r"
	.ascii	"mnet_ctrl_qti.c\000"
	.space	1
.LC1730:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/u_r"
	.ascii	"mnet_ctrl_smd.c\000"
	.space	1
.LC1731:
	.ascii	"DATA40_CNTL\000"
.LC1732:
	.ascii	"DATA39_CNTL\000"
.LC1733:
	.ascii	"DATA38_CNTL\000"
.LC1734:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/u_b"
	.ascii	"am.c\000"
.LC1735:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/u_s"
	.ascii	"md.c\000"
.LC1736:
	.ascii	"DS\000"
	.space	1
.LC1737:
	.ascii	"UNUSED\000"
	.space	1
.LC1738:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/u_s"
	.ascii	"dio.c\000"
	.space	3
.LC1739:
	.ascii	"%s: USB is already open, start io\012\000"
	.space	1
.LC1740:
	.ascii	"%s: SDIO data:%s ctrl:%d are open\012\000"
	.space	1
.LC1741:
	.ascii	"%s: read_avail:%d port:%pK port#%d\012\000"
.LC1742:
	.ascii	"SDIO_DUN\000"
	.space	3
.LC1743:
	.ascii	"SDIO_NMEA\000"
	.space	2
.LC1744:
	.ascii	"cdrom\000"
	.space	2
.LC1745:
	.ascii	"file\000"
	.space	3
.LC1746:
	.ascii	"nofua\000"
	.space	2
.LC1747:
	.ascii	"ro\000"
	.space	1
.LC1748:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/sto"
	.ascii	"rage_common.c\000"
	.space	3
.LC1749:
	.ascii	"functionfs\000"
	.space	1
.LC1750:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_a"
	.ascii	"udio_source.c\000"
	.space	3
.LC1751:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_r"
	.ascii	"mnet.c\000"
	.space	2
.LC1752:
	.ascii	"RmNet\000"
	.space	2
.LC1753:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_r"
	.ascii	"mnet_smd_sdio.c\000"
	.space	1
.LC1754:
	.ascii	"rmnet_mux_ctrl\000"
	.space	1
.LC1755:
	.ascii	"transport\000"
	.space	2
.LC1756:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_r"
	.ascii	"mnet_sdio.c\000"
	.space	1
.LC1757:
	.ascii	"rmnet_sdio_sts_callback: id: %d\012\000"
	.space	3
.LC1758:
	.ascii	"unable to allocate memory for QMI resp\012\000"
.LC1759:
	.ascii	"USB disconnected\012\000"
	.space	2
.LC1760:
	.ascii	"QMI RmNet\000"
	.space	2
.LC1761:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_r"
	.ascii	"mnet_smd.c\000"
	.space	2
.LC1762:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_q"
	.ascii	"dss.c\000"
	.space	3
.LC1763:
	.ascii	"QDSS DATA\000"
	.space	2
.LC1764:
	.ascii	"QDSS CTRL\000"
	.space	2
.LC1765:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/u_q"
	.ascii	"dss.c\000"
	.space	3
.LC1766:
	.ascii	"/home/jprim/hlte/lolz_rebase/drivers/usb/gadget/f_d"
	.ascii	"iag.c\000"
	.space	3
.LC1767:
	.ascii	"suspended\000"
	.space	2
.LC1768:
	.ascii	"HNP on another port\012\000"
	.space	3
.LC1769:
	.ascii	"HNP available\012\000"
	.section	__modver,"a"
	.align	2
	.type	__modver_attr, %object
	.size	__modver_attr, 4
__modver_attr:
	.word	___modver_attr
	.section	__param,"a"
	.align	2
	.type	__param_audio_capture_buf_size, %object
	.size	__param_audio_capture_buf_size, 16
__param_audio_capture_buf_size:
	.word	__param_str_audio_capture_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	audio_capture_buf_size
	.type	__param_req_capture_count, %object
	.size	__param_req_capture_count, 16
__param_req_capture_count:
	.word	__param_str_req_capture_count
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_capture_count
	.type	__param_req_capture_buf_size, %object
	.size	__param_req_capture_buf_size, 16
__param_req_capture_buf_size:
	.word	__param_str_req_capture_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_capture_buf_size
	.type	__param_audio_playback_buf_size, %object
	.size	__param_audio_playback_buf_size, 16
__param_audio_playback_buf_size:
	.word	__param_str_audio_playback_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	audio_playback_buf_size
	.type	__param_req_playback_count, %object
	.size	__param_req_playback_count, 16
__param_req_playback_count:
	.word	__param_str_req_playback_count
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_playback_count
	.type	__param_req_playback_buf_size, %object
	.size	__param_req_playback_buf_size, 16
__param_req_playback_buf_size:
	.word	__param_str_req_playback_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_playback_buf_size
	.type	__param_fn_cntl, %object
	.size	__param_fn_cntl, 16
__param_fn_cntl:
	.word	__param_str_fn_cntl
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_cntl
	.type	__param_fn_cap, %object
	.size	__param_fn_cap, 16
__param_fn_cap:
	.word	__param_str_fn_cap
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_cap
	.type	__param_fn_play, %object
	.size	__param_fn_play, 16
__param_fn_play:
	.word	__param_str_fn_play
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_play
	.type	__param_qc_host_addr, %object
	.size	__param_qc_host_addr, 16
__param_qc_host_addr:
	.word	__param_str_qc_host_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	qc_host_addr
	.type	__param_qc_dev_addr, %object
	.size	__param_qc_dev_addr, 16
__param_qc_dev_addr:
	.word	__param_str_qc_dev_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	qc_dev_addr
	.type	__param_host_addr, %object
	.size	__param_host_addr, 16
__param_host_addr:
	.word	__param_str_host_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	host_addr
	.type	__param_dev_addr, %object
	.size	__param_dev_addr, 16
__param_dev_addr:
	.word	__param_str_dev_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	dev_addr
	.type	__param_qmult, %object
	.size	__param_qmult, 16
__param_qmult:
	.word	__param_str_qmult
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	qmult
	.type	__param_rndis_ul_max_xfer_size_rcvd, %object
	.size	__param_rndis_ul_max_xfer_size_rcvd, 16
__param_rndis_ul_max_xfer_size_rcvd:
	.word	__param_str_rndis_ul_max_xfer_size_rcvd
	.word	param_ops_int
	.short	292
	.short	-1
	.word	rndis_ul_max_xfer_size_rcvd
	.type	__param_rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	__param_rndis_ul_max_pkt_per_xfer_rcvd, 16
__param_rndis_ul_max_pkt_per_xfer_rcvd:
	.word	__param_str_rndis_ul_max_pkt_per_xfer_rcvd
	.word	param_ops_int
	.short	292
	.short	-1
	.word	rndis_ul_max_pkt_per_xfer_rcvd
	.type	__param_rndis_ul_max_pkt_per_xfer, %object
	.size	__param_rndis_ul_max_pkt_per_xfer, 16
__param_rndis_ul_max_pkt_per_xfer:
	.word	__param_str_rndis_ul_max_pkt_per_xfer
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	rndis_ul_max_pkt_per_xfer
	.type	__param_rndis_dl_max_pkt_per_xfer, %object
	.size	__param_rndis_dl_max_pkt_per_xfer, 16
__param_rndis_dl_max_pkt_per_xfer:
	.word	__param_str_rndis_dl_max_pkt_per_xfer
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	rndis_dl_max_pkt_per_xfer
	.type	__param_mtp_tx_reqs, %object
	.size	__param_mtp_tx_reqs, 16
__param_mtp_tx_reqs:
	.word	__param_str_mtp_tx_reqs
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_tx_reqs
	.type	__param_mtp_tx_req_len, %object
	.size	__param_mtp_tx_req_len, 16
__param_mtp_tx_req_len:
	.word	__param_str_mtp_tx_req_len
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_tx_req_len
	.type	__param_mtp_rx_req_len, %object
	.size	__param_mtp_rx_req_len, 16
__param_mtp_rx_req_len:
	.word	__param_str_mtp_rx_req_len
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_rx_req_len
	.type	__param_ghsuart_data_tx_intr_thld, %object
	.size	__param_ghsuart_data_tx_intr_thld, 16
__param_ghsuart_data_tx_intr_thld:
	.word	__param_str_ghsuart_data_tx_intr_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_tx_intr_thld
	.type	__param_ghsuart_data_rx_req_size, %object
	.size	__param_ghsuart_data_rx_req_size, 16
__param_ghsuart_data_rx_req_size:
	.word	__param_str_ghsuart_data_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rx_req_size
	.type	__param_ghsuart_data_serial_rx_q_size, %object
	.size	__param_ghsuart_data_serial_rx_q_size, 16
__param_ghsuart_data_serial_rx_q_size:
	.word	__param_str_ghsuart_data_serial_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_serial_rx_q_size
	.type	__param_ghsuart_data_serial_tx_q_size, %object
	.size	__param_ghsuart_data_serial_tx_q_size, 16
__param_ghsuart_data_serial_tx_q_size:
	.word	__param_str_ghsuart_data_serial_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_serial_tx_q_size
	.type	__param_ghsuart_data_rmnet_rx_q_size, %object
	.size	__param_ghsuart_data_rmnet_rx_q_size, 16
__param_ghsuart_data_rmnet_rx_q_size:
	.word	__param_str_ghsuart_data_rmnet_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rmnet_rx_q_size
	.type	__param_ghsuart_data_rmnet_tx_q_size, %object
	.size	__param_ghsuart_data_rmnet_tx_q_size, 16
__param_ghsuart_data_rmnet_tx_q_size:
	.word	__param_str_ghsuart_data_rmnet_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rmnet_tx_q_size
	.type	__param_record_timestamp, %object
	.size	__param_record_timestamp, 16
__param_record_timestamp:
	.word	__param_str_record_timestamp
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	record_timestamp
	.type	__param_ghsic_data_pend_limit_with_bridge, %object
	.size	__param_ghsic_data_pend_limit_with_bridge, 16
__param_ghsic_data_pend_limit_with_bridge:
	.word	__param_str_ghsic_data_pend_limit_with_bridge
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_pend_limit_with_bridge
	.type	__param_ghsic_data_fctrl_dis_thld, %object
	.size	__param_ghsic_data_fctrl_dis_thld, 16
__param_ghsic_data_fctrl_dis_thld:
	.word	__param_str_ghsic_data_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_dis_thld
	.type	__param_ghsic_data_fctrl_en_thld, %object
	.size	__param_ghsic_data_fctrl_en_thld, 16
__param_ghsic_data_fctrl_en_thld:
	.word	__param_str_ghsic_data_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_en_thld
	.type	__param_ghsic_data_fctrl_support, %object
	.size	__param_ghsic_data_fctrl_support, 16
__param_ghsic_data_fctrl_support:
	.word	__param_str_ghsic_data_fctrl_support
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_support
	.type	__param_ghsic_data_tx_intr_thld, %object
	.size	__param_ghsic_data_tx_intr_thld, 16
__param_ghsic_data_tx_intr_thld:
	.word	__param_str_ghsic_data_tx_intr_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_tx_intr_thld
	.type	__param_ghsic_data_rx_req_size, %object
	.size	__param_ghsic_data_rx_req_size, 16
__param_ghsic_data_rx_req_size:
	.word	__param_str_ghsic_data_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rx_req_size
	.type	__param_ghsic_data_serial_rx_q_size, %object
	.size	__param_ghsic_data_serial_rx_q_size, 16
__param_ghsic_data_serial_rx_q_size:
	.word	__param_str_ghsic_data_serial_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_serial_rx_q_size
	.type	__param_ghsic_data_serial_tx_q_size, %object
	.size	__param_ghsic_data_serial_tx_q_size, 16
__param_ghsic_data_serial_tx_q_size:
	.word	__param_str_ghsic_data_serial_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_serial_tx_q_size
	.type	__param_ghsic_data_rmnet_rx_q_size, %object
	.size	__param_ghsic_data_rmnet_rx_q_size, 16
__param_ghsic_data_rmnet_rx_q_size:
	.word	__param_str_ghsic_data_rmnet_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rmnet_rx_q_size
	.type	__param_ghsic_data_rmnet_tx_q_size, %object
	.size	__param_ghsic_data_rmnet_tx_q_size, 16
__param_ghsic_data_rmnet_tx_q_size:
	.word	__param_str_ghsic_data_rmnet_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rmnet_tx_q_size
	.type	__param_dl_intr_threshold, %object
	.size	__param_dl_intr_threshold, 16
__param_dl_intr_threshold:
	.word	__param_str_dl_intr_threshold
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	dl_intr_threshold
	.type	__param_bam_mux_rx_req_size, %object
	.size	__param_bam_mux_rx_req_size, 16
__param_bam_mux_rx_req_size:
	.word	__param_str_bam_mux_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_req_size
	.type	__param_bam_mux_rx_q_size, %object
	.size	__param_bam_mux_rx_q_size, 16
__param_bam_mux_rx_q_size:
	.word	__param_str_bam_mux_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_q_size
	.type	__param_bam_mux_tx_q_size, %object
	.size	__param_bam_mux_tx_q_size, 16
__param_bam_mux_tx_q_size:
	.word	__param_str_bam_mux_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_tx_q_size
	.type	__param_bam_mux_rx_fctrl_dis_thld, %object
	.size	__param_bam_mux_rx_fctrl_dis_thld, 16
__param_bam_mux_rx_fctrl_dis_thld:
	.word	__param_str_bam_mux_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_dis_thld
	.type	__param_bam_mux_rx_fctrl_support, %object
	.size	__param_bam_mux_rx_fctrl_support, 16
__param_bam_mux_rx_fctrl_support:
	.word	__param_str_bam_mux_rx_fctrl_support
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_support
	.type	__param_bam_mux_rx_fctrl_en_thld, %object
	.size	__param_bam_mux_rx_fctrl_en_thld, 16
__param_bam_mux_rx_fctrl_en_thld:
	.word	__param_str_bam_mux_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_en_thld
	.type	__param_bam_mux_tx_pkt_drop_thld, %object
	.size	__param_bam_mux_tx_pkt_drop_thld, 16
__param_bam_mux_tx_pkt_drop_thld:
	.word	__param_str_bam_mux_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_tx_pkt_drop_thld
	.type	__param_bam_pending_limit, %object
	.size	__param_bam_pending_limit, 16
__param_bam_pending_limit:
	.word	__param_str_bam_pending_limit
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_pending_limit
	.type	__param_mux_sdio_rx_fctrl_dis_thld, %object
	.size	__param_mux_sdio_rx_fctrl_dis_thld, 16
__param_mux_sdio_rx_fctrl_dis_thld:
	.word	__param_str_mux_sdio_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_rx_fctrl_dis_thld
	.type	__param_mux_sdio_rx_fctrl_en_thld, %object
	.size	__param_mux_sdio_rx_fctrl_en_thld, 16
__param_mux_sdio_rx_fctrl_en_thld:
	.word	__param_str_mux_sdio_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_rx_fctrl_en_thld
	.type	__param_mux_sdio_tx_pkt_drop_thld, %object
	.size	__param_mux_sdio_tx_pkt_drop_thld, 16
__param_mux_sdio_tx_pkt_drop_thld:
	.word	__param_str_mux_sdio_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_tx_pkt_drop_thld
	.type	__param_rmnet_mux_smd_data_ch, %object
	.size	__param_rmnet_mux_smd_data_ch, 16
__param_rmnet_mux_smd_data_ch:
	.word	__param_str_rmnet_mux_smd_data_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_mux_smd_data_ch
	.type	__param_rmnet_mux_sdio_data_ch, %object
	.size	__param_rmnet_mux_sdio_data_ch, 16
__param_rmnet_mux_sdio_data_ch:
	.word	__param_str_rmnet_mux_sdio_data_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_mux_sdio_data_ch
	.type	__param_rmnet_mux_sdio_ctl_ch, %object
	.size	__param_rmnet_mux_sdio_ctl_ch, 16
__param_rmnet_mux_sdio_ctl_ch:
	.word	__param_str_rmnet_mux_sdio_ctl_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_mux_sdio_ctl_ch
	.type	__param_sdio_rx_fctrl_dis_thld, %object
	.size	__param_sdio_rx_fctrl_dis_thld, 16
__param_sdio_rx_fctrl_dis_thld:
	.word	__param_str_sdio_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_rx_fctrl_dis_thld
	.type	__param_sdio_rx_fctrl_en_thld, %object
	.size	__param_sdio_rx_fctrl_en_thld, 16
__param_sdio_rx_fctrl_en_thld:
	.word	__param_str_sdio_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_rx_fctrl_en_thld
	.type	__param_sdio_tx_pkt_drop_thld, %object
	.size	__param_sdio_tx_pkt_drop_thld, 16
__param_sdio_tx_pkt_drop_thld:
	.word	__param_str_sdio_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_tx_pkt_drop_thld
	.type	__param_rmnet_sdio_data_ch, %object
	.size	__param_rmnet_sdio_data_ch, 16
__param_rmnet_sdio_data_ch:
	.word	__param_str_rmnet_sdio_data_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_sdio_data_ch
	.type	__param_rmnet_sdio_ctl_ch, %object
	.size	__param_rmnet_sdio_ctl_ch, 16
__param_rmnet_sdio_ctl_ch:
	.word	__param_str_rmnet_sdio_ctl_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_sdio_ctl_ch
	.type	__param_rmnet_data_ch, %object
	.size	__param_rmnet_data_ch, 16
__param_rmnet_data_ch:
	.word	__param_str_rmnet_data_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_data_ch
	.type	__param_rmnet_ctl_ch, %object
	.size	__param_rmnet_ctl_ch, 16
__param_rmnet_ctl_ch:
	.word	__param_str_rmnet_ctl_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_ctl_ch
	.type	__param_iSerialNumber, %object
	.size	__param_iSerialNumber, 16
__param_iSerialNumber:
	.word	__param_str_iSerialNumber
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iSerialNumber
	.type	__param_iProduct, %object
	.size	__param_iProduct, 16
__param_iProduct:
	.word	__param_str_iProduct
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iProduct
	.type	__param_iManufacturer, %object
	.size	__param_iManufacturer, 16
__param_iManufacturer:
	.word	__param_str_iManufacturer
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iManufacturer
	.type	__param_bcdDevice, %object
	.size	__param_bcdDevice, 16
__param_bcdDevice:
	.word	__param_str_bcdDevice
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	bcdDevice
	.type	__param_idProduct, %object
	.size	__param_idProduct, 16
__param_idProduct:
	.word	__param_str_idProduct
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	idProduct
	.type	__param_idVendor, %object
	.size	__param_idVendor, 16
__param_idVendor:
	.word	__param_str_idVendor
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	idVendor
	.section	__verbose,"aw"
	.align	3
	.set	.LANCHOR2,. + 0
	.set	.LANCHOR4,. + 8184
	.set	.LANCHOR8,. + 16368
	.type	descriptor.25170, %object
	.size	descriptor.25170, 24
descriptor.25170:
	.word	.LC954
	.word	__func__.25171
	.word	.LC585
	.word	.LC5
	.byte	109
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25370, %object
	.size	descriptor.25370, 24
descriptor.25370:
	.word	.LC954
	.word	__func__.25371
	.word	.LC585
	.word	.LC6
	.byte	134
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25521, %object
	.size	descriptor.25521, 24
descriptor.25521:
	.word	.LC954
	.word	__func__.25522
	.word	.LC585
	.word	.LC7
	.byte	197
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25506, %object
	.size	descriptor.25506, 24
descriptor.25506:
	.word	.LC954
	.word	__func__.25507
	.word	.LC585
	.word	.LC8
	.byte	172
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.26073, %object
	.size	descriptor.26073, 24
descriptor.26073:
	.word	.LC954
	.word	__func__.26074
	.word	.LC1766
	.word	.LC9
	.byte	27
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52811, %object
	.size	descriptor.52811, 24
descriptor.52811:
	.word	.LC954
	.word	__func__.52812
	.word	.LC1715
	.word	.LC10
	.byte	204
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52813, %object
	.size	descriptor.52813, 24
descriptor.52813:
	.word	.LC954
	.word	__func__.52812
	.word	.LC1715
	.word	.LC11
	.byte	211
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53891, %object
	.size	descriptor.53891, 24
descriptor.53891:
	.word	.LC954
	.word	__func__.53892
	.word	.LC1709
	.word	.LC12
	.byte	138
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56399, %object
	.size	descriptor.56399, 24
descriptor.56399:
	.word	.LC954
	.word	__func__.56400
	.word	.LC1703
	.word	.LC13
	.byte	3
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56402, %object
	.size	descriptor.56402, 24
descriptor.56402:
	.word	.LC954
	.word	__func__.56400
	.word	.LC1703
	.word	.LC14
	.byte	17
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56386, %object
	.size	descriptor.56386, 24
descriptor.56386:
	.word	.LC954
	.word	__func__.56387
	.word	.LC1703
	.word	.LC15
	.byte	231
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57082, %object
	.size	descriptor.57082, 24
descriptor.57082:
	.word	.LC954
	.word	__func__.57083
	.word	.LC1683
	.word	.LC18
	.byte	144
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57086, %object
	.size	descriptor.57086, 24
descriptor.57086:
	.word	.LC954
	.word	__func__.57083
	.word	.LC1683
	.word	.LC19
	.byte	159
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57087, %object
	.size	descriptor.57087, 24
descriptor.57087:
	.word	.LC954
	.word	__func__.57083
	.word	.LC1683
	.word	.LC20
	.byte	170
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57201, %object
	.size	descriptor.57201, 24
descriptor.57201:
	.word	.LC954
	.word	__func__.57202
	.word	.LC1683
	.word	.LC21
	.byte	10
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57195, %object
	.size	descriptor.57195, 24
descriptor.57195:
	.word	.LC954
	.word	__func__.57196
	.word	.LC1683
	.word	.LC21
	.byte	0
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57133, %object
	.size	descriptor.57133, 24
descriptor.57133:
	.word	.LC954
	.word	__func__.57134
	.word	.LC1683
	.word	.LC22
	.byte	24
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58026, %object
	.size	descriptor.58026, 24
descriptor.58026:
	.word	.LC954
	.word	__func__.58027
	.word	.LC1626
	.word	.LC23
	.byte	230
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58031, %object
	.size	descriptor.58031, 24
descriptor.58031:
	.word	.LC954
	.word	__func__.58027
	.word	.LC1626
	.word	.LC25
	.byte	3
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58030, %object
	.size	descriptor.58030, 24
descriptor.58030:
	.word	.LC954
	.word	__func__.58027
	.word	.LC1626
	.word	.LC24
	.byte	252
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57990, %object
	.size	descriptor.57990, 24
descriptor.57990:
	.word	.LC954
	.word	__func__.57991
	.word	.LC1626
	.word	.LC18
	.byte	145
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57994, %object
	.size	descriptor.57994, 24
descriptor.57994:
	.word	.LC954
	.word	__func__.57991
	.word	.LC1626
	.word	.LC19
	.byte	160
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57995, %object
	.size	descriptor.57995, 24
descriptor.57995:
	.word	.LC954
	.word	__func__.57991
	.word	.LC1626
	.word	.LC20
	.byte	171
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58069, %object
	.size	descriptor.58069, 24
descriptor.58069:
	.word	.LC954
	.word	__func__.58070
	.word	.LC1626
	.word	.LC21
	.byte	159
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58063, %object
	.size	descriptor.58063, 24
descriptor.58063:
	.word	.LC954
	.word	__func__.58064
	.word	.LC1626
	.word	.LC21
	.byte	149
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58011, %object
	.size	descriptor.58011, 24
descriptor.58011:
	.word	.LC954
	.word	__func__.58012
	.word	.LC1626
	.word	.LC22
	.byte	202
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63145, %object
	.size	descriptor.63145, 24
descriptor.63145:
	.word	.LC954
	.word	__func__.63146
	.word	.LC1553
	.word	.LC27
	.byte	100
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63148, %object
	.size	descriptor.63148, 24
descriptor.63148:
	.word	.LC954
	.word	__func__.63146
	.word	.LC1553
	.word	.LC28
	.byte	107
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63113, %object
	.size	descriptor.63113, 24
descriptor.63113:
	.word	.LC954
	.word	__func__.63114
	.word	.LC1553
	.word	.LC18
	.byte	8
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63117, %object
	.size	descriptor.63117, 24
descriptor.63117:
	.word	.LC954
	.word	__func__.63114
	.word	.LC1553
	.word	.LC19
	.byte	23
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63118, %object
	.size	descriptor.63118, 24
descriptor.63118:
	.word	.LC954
	.word	__func__.63114
	.word	.LC1553
	.word	.LC20
	.byte	41
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63295, %object
	.size	descriptor.63295, 24
descriptor.63295:
	.word	.LC954
	.word	__func__.63296
	.word	.LC1553
	.word	.LC21
	.byte	30
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63289, %object
	.size	descriptor.63289, 24
descriptor.63289:
	.word	.LC954
	.word	__func__.63290
	.word	.LC1553
	.word	.LC21
	.byte	18
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63135, %object
	.size	descriptor.63135, 24
descriptor.63135:
	.word	.LC954
	.word	__func__.63136
	.word	.LC1553
	.word	.LC22
	.byte	82
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38243, %object
	.size	descriptor.38243, 24
descriptor.38243:
	.word	.LC954
	.word	__func__.38244
	.word	.LC1753
	.word	.LC30
	.byte	90
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38252, %object
	.size	descriptor.38252, 24
descriptor.38252:
	.word	.LC954
	.word	__func__.38244
	.word	.LC1753
	.word	.LC24
	.byte	135
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57148, %object
	.size	descriptor.57148, 24
descriptor.57148:
	.word	.LC954
	.word	__func__.57149
	.word	.LC1683
	.word	.LC23
	.byte	53
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57153, %object
	.size	descriptor.57153, 24
descriptor.57153:
	.word	.LC954
	.word	__func__.57149
	.word	.LC1683
	.word	.LC25
	.byte	82
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57152, %object
	.size	descriptor.57152, 24
descriptor.57152:
	.word	.LC954
	.word	__func__.57149
	.word	.LC1683
	.word	.LC24
	.byte	75
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58202, %object
	.size	descriptor.58202, 24
descriptor.58202:
	.word	.LC954
	.word	__func__.58196
	.word	.LC1616
	.word	.LC14
	.byte	62
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63176, %object
	.size	descriptor.63176, 24
descriptor.63176:
	.word	.LC954
	.word	__func__.63177
	.word	.LC1553
	.word	.LC23
	.byte	187
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63189, %object
	.size	descriptor.63189, 24
descriptor.63189:
	.word	.LC954
	.word	__func__.63177
	.word	.LC1553
	.word	.LC43
	.byte	7
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63192, %object
	.size	descriptor.63192, 24
descriptor.63192:
	.word	.LC954
	.word	__func__.63177
	.word	.LC1553
	.word	.LC44
	.byte	11
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63200, %object
	.size	descriptor.63200, 24
descriptor.63200:
	.word	.LC954
	.word	__func__.63177
	.word	.LC1553
	.word	.LC45
	.byte	44
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63203, %object
	.size	descriptor.63203, 24
descriptor.63203:
	.word	.LC954
	.word	__func__.63177
	.word	.LC1553
	.word	.LC46
	.byte	49
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63208, %object
	.size	descriptor.63208, 24
descriptor.63208:
	.word	.LC954
	.word	__func__.63177
	.word	.LC1553
	.word	.LC24
	.byte	96
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63209, %object
	.size	descriptor.63209, 24
descriptor.63209:
	.word	.LC954
	.word	__func__.63177
	.word	.LC1553
	.word	.LC48
	.byte	103
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46089, %object
	.size	descriptor.46089, 24
descriptor.46089:
	.word	.LC954
	.word	__func__.46090
	.word	.LC88
	.word	.LC96
	.byte	41
	.byte	9
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46091, %object
	.size	descriptor.46091, 24
descriptor.46091:
	.word	.LC954
	.word	__func__.46090
	.word	.LC88
	.word	.LC97
	.byte	52
	.byte	9
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46092, %object
	.size	descriptor.46092, 24
descriptor.46092:
	.word	.LC954
	.word	__func__.46090
	.word	.LC88
	.word	.LC98
	.byte	71
	.byte	9
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30909, %object
	.size	descriptor.30909, 24
descriptor.30909:
	.word	.LC954
	.word	__func__.30910
	.word	.LC1762
	.word	.LC103
	.byte	209
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30897, %object
	.size	descriptor.30897, 24
descriptor.30897:
	.word	.LC954
	.word	__func__.30898
	.word	.LC1762
	.word	.LC104
	.byte	175
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48621, %object
	.size	descriptor.48621, 24
descriptor.48621:
	.word	.LC954
	.word	__func__.48617
	.word	.LC1735
	.word	.LC106
	.byte	181
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49329, %object
	.size	descriptor.49329, 24
descriptor.49329:
	.word	.LC954
	.word	__func__.49328
	.word	.LC1734
	.word	.LC109
	.byte	97
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49336, %object
	.size	descriptor.49336, 24
descriptor.49336:
	.word	.LC954
	.word	__func__.49335
	.word	.LC1734
	.word	.LC109
	.byte	117
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49315, %object
	.size	descriptor.49315, 24
descriptor.49315:
	.word	.LC954
	.word	__func__.49314
	.word	.LC1734
	.word	.LC111
	.byte	59
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49322, %object
	.size	descriptor.49322, 24
descriptor.49322:
	.word	.LC954
	.word	__func__.49321
	.word	.LC1734
	.word	.LC111
	.byte	78
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49441, %object
	.size	descriptor.49441, 24
descriptor.49441:
	.word	.LC954
	.word	__func__.49442
	.word	.LC1734
	.word	.LC113
	.byte	169
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49286, %object
	.size	descriptor.49286, 24
descriptor.49286:
	.word	.LC954
	.word	__func__.49287
	.word	.LC1734
	.word	.LC114
	.byte	244
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49279, %object
	.size	descriptor.49279, 24
descriptor.49279:
	.word	.LC954
	.word	__func__.49280
	.word	.LC1734
	.word	.LC114
	.byte	237
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50075, %object
	.size	descriptor.50075, 24
descriptor.50075:
	.word	.LC954
	.word	__func__.50076
	.word	.LC1729
	.word	.LC115
	.byte	230
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50063, %object
	.size	descriptor.50063, 24
descriptor.50063:
	.word	.LC954
	.word	__func__.50064
	.word	.LC1729
	.word	.LC116
	.byte	209
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50065, %object
	.size	descriptor.50065, 24
descriptor.50065:
	.word	.LC954
	.word	__func__.50064
	.word	.LC1729
	.word	.LC117
	.byte	212
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50989, %object
	.size	descriptor.50989, 24
descriptor.50989:
	.word	.LC954
	.word	__func__.50988
	.word	.LC1727
	.word	.LC119
	.byte	130
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51052, %object
	.size	descriptor.51052, 24
descriptor.51052:
	.word	.LC954
	.word	__func__.51053
	.word	.LC1727
	.word	.LC120
	.byte	70
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52000, %object
	.size	descriptor.52000, 24
descriptor.52000:
	.word	.LC954
	.word	__func__.51999
	.word	.LC1725
	.word	.LC119
	.byte	183
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57494, %object
	.size	descriptor.57494, 24
descriptor.57494:
	.word	.LC954
	.word	__func__.57492
	.word	.LC1640
	.word	.LC1668
	.byte	233
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57788, %object
	.size	descriptor.57788, 24
descriptor.57788:
	.word	.LC954
	.word	__func__.57789
	.word	.LC1630
	.word	.LC109
	.byte	128
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57795, %object
	.size	descriptor.57795, 24
descriptor.57795:
	.word	.LC954
	.word	__func__.57796
	.word	.LC1630
	.word	.LC109
	.byte	142
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57767, %object
	.size	descriptor.57767, 24
descriptor.57767:
	.word	.LC954
	.word	__func__.57768
	.word	.LC1630
	.word	.LC1638
	.byte	89
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57760, %object
	.size	descriptor.57760, 24
descriptor.57760:
	.word	.LC954
	.word	__func__.57761
	.word	.LC1630
	.word	.LC1638
	.byte	81
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62123, %object
	.size	descriptor.62123, 24
descriptor.62123:
	.word	.LC954
	.word	__func__.62124
	.word	.LC1567
	.word	.LC1574
	.byte	74
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61976, %object
	.size	descriptor.61976, 24
descriptor.61976:
	.word	.LC954
	.word	__func__.61977
	.word	.LC1567
	.word	.LC1577
	.byte	137
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62127, %object
	.size	descriptor.62127, 24
descriptor.62127:
	.word	.LC954
	.word	__func__.62124
	.word	.LC1567
	.word	.LC1573
	.byte	79
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62007, %object
	.size	descriptor.62007, 24
descriptor.62007:
	.word	.LC954
	.word	__func__.62008
	.word	.LC1567
	.word	.LC1577
	.byte	174
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62129, %object
	.size	descriptor.62129, 24
descriptor.62129:
	.word	.LC954
	.word	__func__.62124
	.word	.LC1567
	.word	.LC1572
	.byte	84
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62045, %object
	.size	descriptor.62045, 24
descriptor.62045:
	.word	.LC954
	.word	__func__.62046
	.word	.LC1567
	.word	.LC1576
	.byte	228
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62131, %object
	.size	descriptor.62131, 24
descriptor.62131:
	.word	.LC954
	.word	__func__.62124
	.word	.LC1567
	.word	.LC1571
	.byte	89
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62087, %object
	.size	descriptor.62087, 24
descriptor.62087:
	.word	.LC954
	.word	__func__.62088
	.word	.LC1567
	.word	.LC1575
	.byte	26
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62133, %object
	.size	descriptor.62133, 24
descriptor.62133:
	.word	.LC954
	.word	__func__.62124
	.word	.LC1567
	.word	.LC1570
	.byte	104
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.64696, %object
	.size	descriptor.64696, 24
descriptor.64696:
	.word	.LC954
	.word	__func__.64697
	.word	.LC1459
	.word	.LC1499
	.byte	91
	.byte	13
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.64326, %object
	.size	descriptor.64326, 24
descriptor.64326:
	.word	.LC954
	.word	__func__.64325
	.word	.LC1459
	.word	.LC1519
	.byte	222
	.byte	10
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.64310, %object
	.size	descriptor.64310, 24
descriptor.64310:
	.word	.LC954
	.word	__func__.64311
	.word	.LC1459
	.word	.LC1520
	.byte	188
	.byte	10
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53414, %object
	.size	descriptor.53414, 24
descriptor.53414:
	.word	.LC954
	.word	__func__.53415
	.word	.LC1711
	.word	.LC147
	.byte	91
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30985, %object
	.size	descriptor.30985, 24
descriptor.30985:
	.word	.LC954
	.word	__func__.30986
	.word	.LC1762
	.word	.LC148
	.byte	175
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38890, %object
	.size	descriptor.38890, 24
descriptor.38890:
	.word	.LC954
	.word	__func__.38891
	.word	.LC1751
	.word	.LC149
	.byte	243
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38898, %object
	.size	descriptor.38898, 24
descriptor.38898:
	.word	.LC954
	.word	__func__.38891
	.word	.LC1751
	.word	.LC150
	.byte	17
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38901, %object
	.size	descriptor.38901, 24
descriptor.38901:
	.word	.LC954
	.word	__func__.38891
	.word	.LC1751
	.word	.LC151
	.byte	27
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38977, %object
	.size	descriptor.38977, 24
descriptor.38977:
	.word	.LC954
	.word	__func__.38978
	.word	.LC1751
	.word	.LC152
	.byte	222
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38979, %object
	.size	descriptor.38979, 24
descriptor.38979:
	.word	.LC954
	.word	__func__.38978
	.word	.LC1751
	.word	.LC153
	.byte	225
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38993, %object
	.size	descriptor.38993, 24
descriptor.38993:
	.word	.LC954
	.word	__func__.38978
	.word	.LC1751
	.word	.LC24
	.byte	27
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38945, %object
	.size	descriptor.38945, 24
descriptor.38945:
	.word	.LC954
	.word	__func__.38946
	.word	.LC1751
	.word	.LC156
	.byte	153
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38958, %object
	.size	descriptor.38958, 24
descriptor.38958:
	.word	.LC954
	.word	__func__.38946
	.word	.LC1751
	.word	.LC150
	.byte	179
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38964, %object
	.size	descriptor.38964, 24
descriptor.38964:
	.word	.LC954
	.word	__func__.38946
	.word	.LC1751
	.word	.LC151
	.byte	204
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57563, %object
	.size	descriptor.57563, 24
descriptor.57563:
	.word	.LC954
	.word	__func__.57564
	.word	.LC1640
	.word	.LC1651
	.byte	253
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.44859, %object
	.size	descriptor.44859, 24
descriptor.44859:
	.word	.LC954
	.word	__func__.44860
	.word	.LC33
	.word	.LC161
	.byte	38
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.44831, %object
	.size	descriptor.44831, 24
descriptor.44831:
	.word	.LC954
	.word	__func__.44832
	.word	.LC33
	.word	.LC162
	.byte	210
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.44833, %object
	.size	descriptor.44833, 24
descriptor.44833:
	.word	.LC954
	.word	__func__.44832
	.word	.LC33
	.word	.LC163
	.byte	212
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.44837, %object
	.size	descriptor.44837, 24
descriptor.44837:
	.word	.LC954
	.word	__func__.44832
	.word	.LC33
	.word	.LC164
	.byte	222
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.44841, %object
	.size	descriptor.44841, 24
descriptor.44841:
	.word	.LC954
	.word	__func__.44832
	.word	.LC33
	.word	.LC163
	.byte	237
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.44861, %object
	.size	descriptor.44861, 24
descriptor.44861:
	.word	.LC954
	.word	__func__.44860
	.word	.LC33
	.word	.LC165
	.byte	47
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38812, %object
	.size	descriptor.38812, 24
descriptor.38812:
	.word	.LC954
	.word	__func__.38813
	.word	.LC1751
	.word	.LC166
	.byte	73
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47323, %object
	.size	descriptor.47323, 24
descriptor.47323:
	.word	.LC954
	.word	__func__.47324
	.word	.LC721
	.word	.LC168
	.byte	1
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.32036, %object
	.size	descriptor.32036, 24
descriptor.32036:
	.word	.LC954
	.word	__func__.32037
	.word	.LC1761
	.word	.LC171
	.byte	170
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.37338, %object
	.size	descriptor.37338, 24
descriptor.37338:
	.word	.LC954
	.word	__func__.37339
	.word	.LC1756
	.word	.LC24
	.byte	91
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48308, %object
	.size	descriptor.48308, 24
descriptor.48308:
	.word	.LC954
	.word	__func__.48309
	.word	.LC1738
	.word	.LC173
	.byte	159
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48317, %object
	.size	descriptor.48317, 24
descriptor.48317:
	.word	.LC954
	.word	__func__.48309
	.word	.LC1738
	.word	.LC175
	.byte	182
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48384, %object
	.size	descriptor.48384, 24
descriptor.48384:
	.word	.LC954
	.word	__func__.48383
	.word	.LC1738
	.word	.LC178
	.byte	158
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48699, %object
	.size	descriptor.48699, 24
descriptor.48699:
	.word	.LC954
	.word	__func__.48700
	.word	.LC1735
	.word	.LC173
	.byte	133
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48692, %object
	.size	descriptor.48692, 24
descriptor.48692:
	.word	.LC954
	.word	__func__.48693
	.word	.LC1735
	.word	.LC173
	.byte	107
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52055, %object
	.size	descriptor.52055, 24
descriptor.52055:
	.word	.LC954
	.word	__func__.52056
	.word	.LC1725
	.word	.LC180
	.byte	89
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52524, %object
	.size	descriptor.52524, 24
descriptor.52524:
	.word	.LC954
	.word	__func__.52525
	.word	.LC1720
	.word	.LC181
	.byte	156
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31001, %object
	.size	descriptor.31001, 24
descriptor.31001:
	.word	.LC954
	.word	__func__.31002
	.word	.LC1762
	.word	.LC183
	.byte	222
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31142, %object
	.size	descriptor.31142, 24
descriptor.31142:
	.word	.LC954
	.word	__func__.31143
	.word	.LC1762
	.word	.LC212
	.byte	79
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49774, %object
	.size	descriptor.49774, 24
descriptor.49774:
	.word	.LC954
	.word	__func__.49773
	.word	.LC1730
	.word	.LC214
	.byte	47
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31953, %object
	.size	descriptor.31953, 24
descriptor.31953:
	.word	.LC954
	.word	__func__.31954
	.word	.LC1761
	.word	.LC220
	.byte	200
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31848, %object
	.size	descriptor.31848, 24
descriptor.31848:
	.word	.LC954
	.word	__func__.31849
	.word	.LC1761
	.word	.LC222
	.byte	194
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38117, %object
	.size	descriptor.38117, 24
descriptor.38117:
	.word	.LC954
	.word	__func__.38118
	.word	.LC1753
	.word	.LC224
	.byte	236
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31893, %object
	.size	descriptor.31893, 24
descriptor.31893:
	.word	.LC954
	.word	__func__.31894
	.word	.LC1761
	.word	.LC24
	.byte	95
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31928, %object
	.size	descriptor.31928, 24
descriptor.31928:
	.word	.LC954
	.word	__func__.31929
	.word	.LC1761
	.word	.LC230
	.byte	159
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48675, %object
	.size	descriptor.48675, 24
descriptor.48675:
	.word	.LC954
	.word	__func__.48676
	.word	.LC1735
	.word	.LC233
	.byte	48
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48677, %object
	.size	descriptor.48677, 24
descriptor.48677:
	.word	.LC954
	.word	__func__.48676
	.word	.LC1735
	.word	.LC234
	.byte	53
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38094, %object
	.size	descriptor.38094, 24
descriptor.38094:
	.word	.LC954
	.word	__func__.38095
	.word	.LC1753
	.word	.LC236
	.byte	193
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48759, %object
	.size	descriptor.48759, 24
descriptor.48759:
	.word	.LC954
	.word	__func__.48760
	.word	.LC1735
	.word	.LC237
	.byte	89
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57503, %object
	.size	descriptor.57503, 24
descriptor.57503:
	.word	.LC954
	.word	__func__.57502
	.word	.LC1640
	.word	.LC1634
	.byte	7
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57504, %object
	.size	descriptor.57504, 24
descriptor.57504:
	.word	.LC954
	.word	__func__.57502
	.word	.LC1640
	.word	.LC1667
	.byte	15
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57505, %object
	.size	descriptor.57505, 24
descriptor.57505:
	.word	.LC954
	.word	__func__.57502
	.word	.LC1640
	.word	.LC1666
	.byte	24
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62867, %object
	.size	descriptor.62867, 24
descriptor.62867:
	.word	.LC954
	.word	__func__.62868
	.word	.LC1560
	.word	.LC1562
	.byte	239
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62869, %object
	.size	descriptor.62869, 24
descriptor.62869:
	.word	.LC954
	.word	__func__.62868
	.word	.LC1560
	.word	.LC1561
	.byte	250
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55895, %object
	.size	descriptor.55895, 24
descriptor.55895:
	.word	.LC954
	.word	__func__.55896
	.word	.LC58
	.word	.LC255
	.byte	163
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55536, %object
	.size	descriptor.55536, 24
descriptor.55536:
	.word	.LC954
	.word	__func__.55537
	.word	.LC58
	.word	.LC256
	.byte	68
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54479, %object
	.size	descriptor.54479, 24
descriptor.54479:
	.word	.LC954
	.word	__func__.54480
	.word	.LC1707
	.word	.LC257
	.byte	124
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54481, %object
	.size	descriptor.54481, 24
descriptor.54481:
	.word	.LC954
	.word	__func__.54480
	.word	.LC1707
	.word	.LC258
	.byte	135
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54482, %object
	.size	descriptor.54482, 24
descriptor.54482:
	.word	.LC954
	.word	__func__.54480
	.word	.LC1707
	.word	.LC259
	.byte	139
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54487, %object
	.size	descriptor.54487, 24
descriptor.54487:
	.word	.LC954
	.word	__func__.54480
	.word	.LC1707
	.word	.LC260
	.byte	160
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54534, %object
	.size	descriptor.54534, 24
descriptor.54534:
	.word	.LC954
	.word	__func__.54535
	.word	.LC1707
	.word	.LC262
	.byte	50
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53342, %object
	.size	descriptor.53342, 24
descriptor.53342:
	.word	.LC954
	.word	__func__.53343
	.word	.LC1711
	.word	.LC24
	.byte	78
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53344, %object
	.size	descriptor.53344, 24
descriptor.53344:
	.word	.LC954
	.word	__func__.53343
	.word	.LC1711
	.word	.LC263
	.byte	85
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53156, %object
	.size	descriptor.53156, 24
descriptor.53156:
	.word	.LC954
	.word	__func__.53157
	.word	.LC1714
	.word	.LC265
	.byte	131
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52836, %object
	.size	descriptor.52836, 24
descriptor.52836:
	.word	.LC954
	.word	__func__.52837
	.word	.LC1715
	.word	.LC269
	.byte	57
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49789, %object
	.size	descriptor.49789, 24
descriptor.49789:
	.word	.LC954
	.word	__func__.49790
	.word	.LC1730
	.word	.LC271
	.byte	73
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52066, %object
	.size	descriptor.52066, 24
descriptor.52066:
	.word	.LC954
	.word	__func__.52067
	.word	.LC1725
	.word	.LC180
	.byte	109
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52154, %object
	.size	descriptor.52154, 24
descriptor.52154:
	.word	.LC954
	.word	__func__.52155
	.word	.LC1725
	.word	.LC278
	.byte	74
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52692, %object
	.size	descriptor.52692, 24
descriptor.52692:
	.word	.LC954
	.word	__func__.52693
	.word	.LC1720
	.word	.LC280
	.byte	124
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51438, %object
	.size	descriptor.51438, 24
descriptor.51438:
	.word	.LC954
	.word	__func__.51439
	.word	.LC1726
	.word	.LC286
	.byte	14
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58624, %object
	.size	descriptor.58624, 24
descriptor.58624:
	.word	.LC954
	.word	__func__.58625
	.word	.LC1612
	.word	.LC1613
	.byte	15
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49815, %object
	.size	descriptor.49815, 24
descriptor.49815:
	.word	.LC954
	.word	__func__.49816
	.word	.LC1730
	.word	.LC289
	.byte	122
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49817, %object
	.size	descriptor.49817, 24
descriptor.49817:
	.word	.LC954
	.word	__func__.49816
	.word	.LC1730
	.word	.LC290
	.byte	137
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50136, %object
	.size	descriptor.50136, 24
descriptor.50136:
	.word	.LC954
	.word	__func__.50137
	.word	.LC1729
	.word	.LC296
	.byte	136
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50139, %object
	.size	descriptor.50139, 24
descriptor.50139:
	.word	.LC954
	.word	__func__.50137
	.word	.LC1729
	.word	.LC298
	.byte	150
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58353, %object
	.size	descriptor.58353, 24
descriptor.58353:
	.word	.LC954
	.word	__func__.58348
	.word	.LC1616
	.word	.LC1617
	.byte	197
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57693, %object
	.size	descriptor.57693, 24
descriptor.57693:
	.word	.LC954
	.word	__func__.57694
	.word	.LC1640
	.word	.LC1641
	.byte	162
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38520, %object
	.size	descriptor.38520, 24
descriptor.38520:
	.word	.LC954
	.word	__func__.38521
	.word	.LC1753
	.word	.LC308
	.byte	41
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50090, %object
	.size	descriptor.50090, 24
descriptor.50090:
	.word	.LC954
	.word	__func__.50091
	.word	.LC1729
	.word	.LC310
	.byte	249
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50096, %object
	.size	descriptor.50096, 24
descriptor.50096:
	.word	.LC954
	.word	__func__.50091
	.word	.LC1729
	.word	.LC313
	.byte	13
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50103, %object
	.size	descriptor.50103, 24
descriptor.50103:
	.word	.LC954
	.word	__func__.50091
	.word	.LC1729
	.word	.LC314
	.byte	17
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50107, %object
	.size	descriptor.50107, 24
descriptor.50107:
	.word	.LC954
	.word	__func__.50091
	.word	.LC1729
	.word	.LC316
	.byte	36
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50108, %object
	.size	descriptor.50108, 24
descriptor.50108:
	.word	.LC954
	.word	__func__.50091
	.word	.LC1729
	.word	.LC318
	.byte	46
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55664, %object
	.size	descriptor.55664, 24
descriptor.55664:
	.word	.LC954
	.word	__func__.55665
	.word	.LC58
	.word	.LC319
	.byte	94
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55666, %object
	.size	descriptor.55666, 24
descriptor.55666:
	.word	.LC954
	.word	__func__.55665
	.word	.LC58
	.word	.LC320
	.byte	97
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55667, %object
	.size	descriptor.55667, 24
descriptor.55667:
	.word	.LC954
	.word	__func__.55665
	.word	.LC58
	.word	.LC321
	.byte	105
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55677, %object
	.size	descriptor.55677, 24
descriptor.55677:
	.word	.LC954
	.word	__func__.55665
	.word	.LC58
	.word	.LC322
	.byte	128
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55684, %object
	.size	descriptor.55684, 24
descriptor.55684:
	.word	.LC954
	.word	__func__.55665
	.word	.LC58
	.word	.LC323
	.byte	139
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55685, %object
	.size	descriptor.55685, 24
descriptor.55685:
	.word	.LC954
	.word	__func__.55665
	.word	.LC58
	.word	.LC324
	.byte	151
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55686, %object
	.size	descriptor.55686, 24
descriptor.55686:
	.word	.LC954
	.word	__func__.55665
	.word	.LC58
	.word	.LC325
	.byte	160
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54315, %object
	.size	descriptor.54315, 24
descriptor.54315:
	.word	.LC954
	.word	__func__.54316
	.word	.LC1707
	.word	.LC326
	.byte	52
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54317, %object
	.size	descriptor.54317, 24
descriptor.54317:
	.word	.LC954
	.word	__func__.54316
	.word	.LC1707
	.word	.LC327
	.byte	60
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54326, %object
	.size	descriptor.54326, 24
descriptor.54326:
	.word	.LC954
	.word	__func__.54316
	.word	.LC1707
	.word	.LC322
	.byte	87
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54333, %object
	.size	descriptor.54333, 24
descriptor.54333:
	.word	.LC954
	.word	__func__.54316
	.word	.LC1707
	.word	.LC324
	.byte	112
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54334, %object
	.size	descriptor.54334, 24
descriptor.54334:
	.word	.LC954
	.word	__func__.54316
	.word	.LC1707
	.word	.LC328
	.byte	128
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53522, %object
	.size	descriptor.53522, 24
descriptor.53522:
	.word	.LC954
	.word	__func__.53523
	.word	.LC1711
	.word	.LC308
	.byte	83
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53530, %object
	.size	descriptor.53530, 24
descriptor.53530:
	.word	.LC954
	.word	__func__.53523
	.word	.LC1711
	.word	.LC308
	.byte	96
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53056, %object
	.size	descriptor.53056, 24
descriptor.53056:
	.word	.LC954
	.word	__func__.53057
	.word	.LC1714
	.word	.LC329
	.byte	64
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53058, %object
	.size	descriptor.53058, 24
descriptor.53058:
	.word	.LC954
	.word	__func__.53057
	.word	.LC1714
	.word	.LC330
	.byte	76
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53070, %object
	.size	descriptor.53070, 24
descriptor.53070:
	.word	.LC954
	.word	__func__.53057
	.word	.LC1714
	.word	.LC331
	.byte	97
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53071, %object
	.size	descriptor.53071, 24
descriptor.53071:
	.word	.LC954
	.word	__func__.53057
	.word	.LC1714
	.word	.LC322
	.byte	102
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53078, %object
	.size	descriptor.53078, 24
descriptor.53078:
	.word	.LC954
	.word	__func__.53057
	.word	.LC1714
	.word	.LC324
	.byte	120
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53079, %object
	.size	descriptor.53079, 24
descriptor.53079:
	.word	.LC954
	.word	__func__.53057
	.word	.LC1714
	.word	.LC332
	.byte	133
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38544, %object
	.size	descriptor.38544, 24
descriptor.38544:
	.word	.LC954
	.word	__func__.38545
	.word	.LC1753
	.word	.LC308
	.byte	95
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50119, %object
	.size	descriptor.50119, 24
descriptor.50119:
	.word	.LC954
	.word	__func__.50120
	.word	.LC1729
	.word	.LC339
	.byte	64
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50121, %object
	.size	descriptor.50121, 24
descriptor.50121:
	.word	.LC954
	.word	__func__.50120
	.word	.LC1729
	.word	.LC340
	.byte	67
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50122, %object
	.size	descriptor.50122, 24
descriptor.50122:
	.word	.LC954
	.word	__func__.50120
	.word	.LC1729
	.word	.LC341
	.byte	73
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50123, %object
	.size	descriptor.50123, 24
descriptor.50123:
	.word	.LC954
	.word	__func__.50120
	.word	.LC1729
	.word	.LC343
	.byte	83
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50127, %object
	.size	descriptor.50127, 24
descriptor.50127:
	.word	.LC954
	.word	__func__.50120
	.word	.LC1729
	.word	.LC348
	.byte	125
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.64828, %object
	.size	descriptor.64828, 24
descriptor.64828:
	.word	.LC954
	.word	__func__.64829
	.word	.LC1459
	.word	.LC1498
	.byte	156
	.byte	14
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.64830, %object
	.size	descriptor.64830, 24
descriptor.64830:
	.word	.LC954
	.word	__func__.64829
	.word	.LC1459
	.word	.LC1497
	.byte	161
	.byte	14
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48640, %object
	.size	descriptor.48640, 24
descriptor.48640:
	.word	.LC954
	.word	__func__.48641
	.word	.LC1735
	.word	.LC356
	.byte	216
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48647, %object
	.size	descriptor.48647, 24
descriptor.48647:
	.word	.LC954
	.word	__func__.48641
	.word	.LC1735
	.word	.LC357
	.byte	230
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48436, %object
	.size	descriptor.48436, 24
descriptor.48436:
	.word	.LC954
	.word	__func__.48437
	.word	.LC1738
	.word	.LC180
	.byte	68
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48438, %object
	.size	descriptor.48438, 24
descriptor.48438:
	.word	.LC954
	.word	__func__.48437
	.word	.LC1738
	.word	.LC363
	.byte	75
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48818, %object
	.size	descriptor.48818, 24
descriptor.48818:
	.word	.LC954
	.word	__func__.48819
	.word	.LC1735
	.word	.LC180
	.byte	18
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48804, %object
	.size	descriptor.48804, 24
descriptor.48804:
	.word	.LC954
	.word	__func__.48805
	.word	.LC1735
	.word	.LC180
	.byte	249
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49480, %object
	.size	descriptor.49480, 24
descriptor.49480:
	.word	.LC954
	.word	__func__.49481
	.word	.LC1734
	.word	.LC180
	.byte	23
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49882, %object
	.size	descriptor.49882, 24
descriptor.49882:
	.word	.LC954
	.word	__func__.49883
	.word	.LC1730
	.word	.LC180
	.byte	41
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49867, %object
	.size	descriptor.49867, 24
descriptor.49867:
	.word	.LC954
	.word	__func__.49868
	.word	.LC1730
	.word	.LC180
	.byte	8
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51081, %object
	.size	descriptor.51081, 24
descriptor.51081:
	.word	.LC954
	.word	__func__.51082
	.word	.LC1727
	.word	.LC180
	.byte	126
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48749, %object
	.size	descriptor.48749, 24
descriptor.48749:
	.word	.LC954
	.word	__func__.48750
	.word	.LC1735
	.word	.LC237
	.byte	60
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48751, %object
	.size	descriptor.48751, 24
descriptor.48751:
	.word	.LC954
	.word	__func__.48750
	.word	.LC1735
	.word	.LC290
	.byte	71
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49237, %object
	.size	descriptor.49237, 24
descriptor.49237:
	.word	.LC954
	.word	__func__.49238
	.word	.LC1734
	.word	.LC365
	.byte	88
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49242, %object
	.size	descriptor.49242, 24
descriptor.49242:
	.word	.LC954
	.word	__func__.49238
	.word	.LC1734
	.word	.LC366
	.byte	94
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49459, %object
	.size	descriptor.49459, 24
descriptor.49459:
	.word	.LC954
	.word	__func__.49460
	.word	.LC1734
	.word	.LC367
	.byte	193
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57933, %object
	.size	descriptor.57933, 24
descriptor.57933:
	.word	.LC954
	.word	__func__.57934
	.word	.LC1630
	.word	.LC367
	.byte	116
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49450, %object
	.size	descriptor.49450, 24
descriptor.49450:
	.word	.LC954
	.word	__func__.49451
	.word	.LC1734
	.word	.LC369
	.byte	179
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57924, %object
	.size	descriptor.57924, 24
descriptor.57924:
	.word	.LC954
	.word	__func__.57925
	.word	.LC1630
	.word	.LC369
	.byte	100
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49433, %object
	.size	descriptor.49433, 24
descriptor.49433:
	.word	.LC954
	.word	__func__.49429
	.word	.LC1734
	.word	.LC374
	.byte	104
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49434, %object
	.size	descriptor.49434, 24
descriptor.49434:
	.word	.LC954
	.word	__func__.49429
	.word	.LC1734
	.word	.LC377
	.byte	157
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57826, %object
	.size	descriptor.57826, 24
descriptor.57826:
	.word	.LC954
	.word	__func__.57827
	.word	.LC1630
	.word	.LC1637
	.byte	207
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57774, %object
	.size	descriptor.57774, 24
descriptor.57774:
	.word	.LC954
	.word	__func__.57775
	.word	.LC1630
	.word	.LC111
	.byte	100
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57781, %object
	.size	descriptor.57781, 24
descriptor.57781:
	.word	.LC954
	.word	__func__.57782
	.word	.LC1630
	.word	.LC111
	.byte	114
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57828, %object
	.size	descriptor.57828, 24
descriptor.57828:
	.word	.LC954
	.word	__func__.57827
	.word	.LC1630
	.word	.LC1636
	.byte	81
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49470, %object
	.size	descriptor.49470, 24
descriptor.49470:
	.word	.LC954
	.word	__func__.49471
	.word	.LC1734
	.word	.LC387
	.byte	214
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57803, %object
	.size	descriptor.57803, 24
descriptor.57803:
	.word	.LC954
	.word	__func__.57804
	.word	.LC1630
	.word	.LC387
	.byte	156
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38581, %object
	.size	descriptor.38581, 24
descriptor.38581:
	.word	.LC954
	.word	__func__.38582
	.word	.LC1753
	.word	.LC410
	.byte	239
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45448, %object
	.size	descriptor.45448, 24
descriptor.45448:
	.word	.LC954
	.word	__func__.45449
	.word	.LC1748
	.word	.LC439
	.byte	221
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.64348, %object
	.size	descriptor.64348, 24
descriptor.64348:
	.word	.LC954
	.word	__func__.64349
	.word	.LC1459
	.word	.LC1518
	.byte	14
	.byte	11
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45633, %object
	.size	descriptor.45633, 24
descriptor.45633:
	.word	.LC954
	.word	__func__.45634
	.word	.LC88
	.word	.LC491
	.byte	219
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45637, %object
	.size	descriptor.45637, 24
descriptor.45637:
	.word	.LC954
	.word	__func__.45634
	.word	.LC88
	.word	.LC496
	.byte	240
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45501, %object
	.size	descriptor.45501, 24
descriptor.45501:
	.word	.LC954
	.word	__func__.45502
	.word	.LC1748
	.word	.LC545
	.byte	130
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45503, %object
	.size	descriptor.45503, 24
descriptor.45503:
	.word	.LC954
	.word	__func__.45502
	.word	.LC1748
	.word	.LC546
	.byte	135
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45534, %object
	.size	descriptor.45534, 24
descriptor.45534:
	.word	.LC954
	.word	__func__.45535
	.word	.LC1748
	.word	.LC547
	.byte	221
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45536, %object
	.size	descriptor.45536, 24
descriptor.45536:
	.word	.LC954
	.word	__func__.45535
	.word	.LC1748
	.word	.LC548
	.byte	225
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45717, %object
	.size	descriptor.45717, 24
descriptor.45717:
	.word	.LC954
	.word	__func__.45718
	.word	.LC88
	.word	.LC549
	.byte	172
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45709, %object
	.size	descriptor.45709, 24
descriptor.45709:
	.word	.LC954
	.word	__func__.45710
	.word	.LC88
	.word	.LC549
	.byte	151
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54407, %object
	.size	descriptor.54407, 24
descriptor.54407:
	.word	.LC954
	.word	__func__.54408
	.word	.LC1707
	.word	.LC550
	.byte	100
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54409, %object
	.size	descriptor.54409, 24
descriptor.54409:
	.word	.LC954
	.word	__func__.54408
	.word	.LC1707
	.word	.LC551
	.byte	103
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54411, %object
	.size	descriptor.54411, 24
descriptor.54411:
	.word	.LC954
	.word	__func__.54408
	.word	.LC1707
	.word	.LC324
	.byte	125
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54412, %object
	.size	descriptor.54412, 24
descriptor.54412:
	.word	.LC954
	.word	__func__.54408
	.word	.LC1707
	.word	.LC552
	.byte	128
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54419, %object
	.size	descriptor.54419, 24
descriptor.54419:
	.word	.LC954
	.word	__func__.54408
	.word	.LC1707
	.word	.LC553
	.byte	166
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54422, %object
	.size	descriptor.54422, 24
descriptor.54422:
	.word	.LC954
	.word	__func__.54408
	.word	.LC1707
	.word	.LC554
	.byte	175
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57670, %object
	.size	descriptor.57670, 24
descriptor.57670:
	.word	.LC954
	.word	__func__.57671
	.word	.LC1640
	.word	.LC1643
	.byte	66
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57397, %object
	.size	descriptor.57397, 24
descriptor.57397:
	.word	.LC954
	.word	__func__.57396
	.word	.LC1640
	.word	.LC1677
	.byte	186
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57383, %object
	.size	descriptor.57383, 24
descriptor.57383:
	.word	.LC954
	.word	__func__.57384
	.word	.LC1640
	.word	.LC1680
	.byte	125
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57388, %object
	.size	descriptor.57388, 24
descriptor.57388:
	.word	.LC954
	.word	__func__.57384
	.word	.LC1640
	.word	.LC1679
	.byte	149
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57389, %object
	.size	descriptor.57389, 24
descriptor.57389:
	.word	.LC954
	.word	__func__.57384
	.word	.LC1640
	.word	.LC1678
	.byte	171
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57672, %object
	.size	descriptor.57672, 24
descriptor.57672:
	.word	.LC954
	.word	__func__.57671
	.word	.LC1640
	.word	.LC1642
	.byte	114
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62151, %object
	.size	descriptor.62151, 24
descriptor.62151:
	.word	.LC954
	.word	__func__.62152
	.word	.LC1567
	.word	.LC1569
	.byte	139
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62165, %object
	.size	descriptor.62165, 24
descriptor.62165:
	.word	.LC954
	.word	__func__.62152
	.word	.LC1567
	.word	.LC1568
	.byte	227
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25257, %object
	.size	descriptor.25257, 24
descriptor.25257:
	.word	.LC954
	.word	__func__.25258
	.word	.LC585
	.word	.LC583
	.byte	97
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25262, %object
	.size	descriptor.25262, 24
descriptor.25262:
	.word	.LC954
	.word	__func__.25258
	.word	.LC585
	.word	.LC584
	.byte	103
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.37491, %object
	.size	descriptor.37491, 24
descriptor.37491:
	.word	.LC954
	.word	__func__.37492
	.word	.LC1756
	.word	.LC596
	.byte	221
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.40991, %object
	.size	descriptor.40991, 24
descriptor.40991:
	.word	.LC954
	.word	__func__.40992
	.word	.LC1750
	.word	.LC597
	.byte	69
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50153, %object
	.size	descriptor.50153, 24
descriptor.50153:
	.word	.LC954
	.word	__func__.50149
	.word	.LC1729
	.word	.LC599
	.byte	178
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50997, %object
	.size	descriptor.50997, 24
descriptor.50997:
	.word	.LC954
	.word	__func__.50996
	.word	.LC1727
	.word	.LC600
	.byte	163
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51009, %object
	.size	descriptor.51009, 24
descriptor.51009:
	.word	.LC954
	.word	__func__.51010
	.word	.LC1727
	.word	.LC601
	.byte	181
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52010, %object
	.size	descriptor.52010, 24
descriptor.52010:
	.word	.LC954
	.word	__func__.52009
	.word	.LC1725
	.word	.LC600
	.byte	222
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57891, %object
	.size	descriptor.57891, 24
descriptor.57891:
	.word	.LC954
	.word	__func__.57892
	.word	.LC1630
	.word	.LC113
	.byte	27
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53501, %object
	.size	descriptor.53501, 24
descriptor.53501:
	.word	.LC954
	.word	__func__.53502
	.word	.LC1711
	.word	.LC308
	.byte	49
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53503, %object
	.size	descriptor.53503, 24
descriptor.53503:
	.word	.LC954
	.word	__func__.53502
	.word	.LC1711
	.word	.LC607
	.byte	53
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53401, %object
	.size	descriptor.53401, 24
descriptor.53401:
	.word	.LC954
	.word	__func__.53402
	.word	.LC1711
	.word	.LC608
	.byte	66
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53403, %object
	.size	descriptor.53403, 24
descriptor.53403:
	.word	.LC954
	.word	__func__.53402
	.word	.LC1711
	.word	.LC308
	.byte	68
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53404, %object
	.size	descriptor.53404, 24
descriptor.53404:
	.word	.LC954
	.word	__func__.53402
	.word	.LC1711
	.word	.LC609
	.byte	73
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38914, %object
	.size	descriptor.38914, 24
descriptor.38914:
	.word	.LC954
	.word	__func__.38913
	.word	.LC1751
	.word	.LC610
	.byte	61
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38819, %object
	.size	descriptor.38819, 24
descriptor.38819:
	.word	.LC954
	.word	__func__.38820
	.word	.LC1751
	.word	.LC612
	.byte	91
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38936, %object
	.size	descriptor.38936, 24
descriptor.38936:
	.word	.LC954
	.word	__func__.38935
	.word	.LC1751
	.word	.LC156
	.byte	136
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48297, %object
	.size	descriptor.48297, 24
descriptor.48297:
	.word	.LC954
	.word	__func__.48298
	.word	.LC1738
	.word	.LC173
	.byte	138
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51404, %object
	.size	descriptor.51404, 24
descriptor.51404:
	.word	.LC954
	.word	__func__.51405
	.word	.LC1726
	.word	.LC614
	.byte	185
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52348, %object
	.size	descriptor.52348, 24
descriptor.52348:
	.word	.LC954
	.word	__func__.52349
	.word	.LC1720
	.word	.LC615
	.byte	248
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52392, %object
	.size	descriptor.52392, 24
descriptor.52392:
	.word	.LC954
	.word	__func__.52393
	.word	.LC1720
	.word	.LC601
	.byte	92
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.37518, %object
	.size	descriptor.37518, 24
descriptor.37518:
	.word	.LC954
	.word	__func__.37519
	.word	.LC1756
	.word	.LC289
	.byte	23
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51553, %object
	.size	descriptor.51553, 24
descriptor.51553:
	.word	.LC954
	.word	__func__.51554
	.word	.LC1726
	.word	.LC601
	.byte	18
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52018, %object
	.size	descriptor.52018, 24
descriptor.52018:
	.word	.LC954
	.word	__func__.52019
	.word	.LC1725
	.word	.LC601
	.byte	236
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52495, %object
	.size	descriptor.52495, 24
descriptor.52495:
	.word	.LC954
	.word	__func__.52496
	.word	.LC1720
	.word	.LC601
	.byte	85
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.44554, %object
	.size	descriptor.44554, 24
descriptor.44554:
	.word	.LC954
	.word	__func__.44555
	.word	.LC33
	.word	.LC634
	.byte	5
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38851, %object
	.size	descriptor.38851, 24
descriptor.38851:
	.word	.LC954
	.word	__func__.38852
	.word	.LC1751
	.word	.LC635
	.byte	146
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49656, %object
	.size	descriptor.49656, 24
descriptor.49656:
	.word	.LC954
	.word	__func__.49657
	.word	.LC1734
	.word	.LC636
	.byte	45
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56376, %object
	.size	descriptor.56376, 24
descriptor.56376:
	.word	.LC954
	.word	__func__.56377
	.word	.LC1703
	.word	.LC638
	.byte	190
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56906, %object
	.size	descriptor.56906, 24
descriptor.56906:
	.word	.LC954
	.word	__func__.56907
	.word	.LC1692
	.word	.LC641
	.byte	235
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56911, %object
	.size	descriptor.56911, 24
descriptor.56911:
	.word	.LC954
	.word	__func__.56907
	.word	.LC1692
	.word	.LC642
	.byte	240
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57915, %object
	.size	descriptor.57915, 24
descriptor.57915:
	.word	.LC954
	.word	__func__.57916
	.word	.LC1630
	.word	.LC636
	.byte	89
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57908, %object
	.size	descriptor.57908, 24
descriptor.57908:
	.word	.LC954
	.word	__func__.57909
	.word	.LC1630
	.word	.LC883
	.byte	75
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57862, %object
	.size	descriptor.57862, 24
descriptor.57862:
	.word	.LC954
	.word	__func__.57863
	.word	.LC1630
	.word	.LC1634
	.byte	166
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57849, %object
	.size	descriptor.57849, 24
descriptor.57849:
	.word	.LC954
	.word	__func__.57850
	.word	.LC1630
	.word	.LC1634
	.byte	121
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56560, %object
	.size	descriptor.56560, 24
descriptor.56560:
	.word	.LC954
	.word	__func__.56554
	.word	.LC1692
	.word	.LC656
	.byte	214
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56566, %object
	.size	descriptor.56566, 24
descriptor.56566:
	.word	.LC954
	.word	__func__.56554
	.word	.LC1692
	.word	.LC657
	.byte	224
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56568, %object
	.size	descriptor.56568, 24
descriptor.56568:
	.word	.LC954
	.word	__func__.56554
	.word	.LC1692
	.word	.LC658
	.byte	237
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56570, %object
	.size	descriptor.56570, 24
descriptor.56570:
	.word	.LC954
	.word	__func__.56554
	.word	.LC1692
	.word	.LC659
	.byte	244
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56572, %object
	.size	descriptor.56572, 24
descriptor.56572:
	.word	.LC954
	.word	__func__.56554
	.word	.LC1692
	.word	.LC660
	.byte	252
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56576, %object
	.size	descriptor.56576, 24
descriptor.56576:
	.word	.LC954
	.word	__func__.56554
	.word	.LC1692
	.word	.LC661
	.byte	19
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56578, %object
	.size	descriptor.56578, 24
descriptor.56578:
	.word	.LC954
	.word	__func__.56554
	.word	.LC1692
	.word	.LC662
	.byte	29
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56580, %object
	.size	descriptor.56580, 24
descriptor.56580:
	.word	.LC954
	.word	__func__.56554
	.word	.LC1692
	.word	.LC663
	.byte	39
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56582, %object
	.size	descriptor.56582, 24
descriptor.56582:
	.word	.LC954
	.word	__func__.56554
	.word	.LC1692
	.word	.LC664
	.byte	47
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56584, %object
	.size	descriptor.56584, 24
descriptor.56584:
	.word	.LC954
	.word	__func__.56554
	.word	.LC1692
	.word	.LC665
	.byte	61
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56586, %object
	.size	descriptor.56586, 24
descriptor.56586:
	.word	.LC954
	.word	__func__.56554
	.word	.LC1692
	.word	.LC666
	.byte	69
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56588, %object
	.size	descriptor.56588, 24
descriptor.56588:
	.word	.LC954
	.word	__func__.56554
	.word	.LC1692
	.word	.LC667
	.byte	76
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56592, %object
	.size	descriptor.56592, 24
descriptor.56592:
	.word	.LC954
	.word	__func__.56554
	.word	.LC1692
	.word	.LC668
	.byte	91
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56594, %object
	.size	descriptor.56594, 24
descriptor.56594:
	.word	.LC954
	.word	__func__.56554
	.word	.LC1692
	.word	.LC669
	.byte	101
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56604, %object
	.size	descriptor.56604, 24
descriptor.56604:
	.word	.LC954
	.word	__func__.56554
	.word	.LC1692
	.word	.LC670
	.byte	154
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56606, %object
	.size	descriptor.56606, 24
descriptor.56606:
	.word	.LC954
	.word	__func__.56554
	.word	.LC1692
	.word	.LC671
	.byte	165
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56608, %object
	.size	descriptor.56608, 24
descriptor.56608:
	.word	.LC954
	.word	__func__.56554
	.word	.LC1692
	.word	.LC672
	.byte	177
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56610, %object
	.size	descriptor.56610, 24
descriptor.56610:
	.word	.LC954
	.word	__func__.56554
	.word	.LC1692
	.word	.LC673
	.byte	189
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56612, %object
	.size	descriptor.56612, 24
descriptor.56612:
	.word	.LC954
	.word	__func__.56554
	.word	.LC1692
	.word	.LC674
	.byte	197
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56614, %object
	.size	descriptor.56614, 24
descriptor.56614:
	.word	.LC954
	.word	__func__.56554
	.word	.LC1692
	.word	.LC675
	.byte	204
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56616, %object
	.size	descriptor.56616, 24
descriptor.56616:
	.word	.LC954
	.word	__func__.56554
	.word	.LC1692
	.word	.LC676
	.byte	213
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56618, %object
	.size	descriptor.56618, 24
descriptor.56618:
	.word	.LC954
	.word	__func__.56554
	.word	.LC1692
	.word	.LC677
	.byte	222
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56620, %object
	.size	descriptor.56620, 24
descriptor.56620:
	.word	.LC954
	.word	__func__.56554
	.word	.LC1692
	.word	.LC678
	.byte	229
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56889, %object
	.size	descriptor.56889, 24
descriptor.56889:
	.word	.LC954
	.word	__func__.56890
	.word	.LC1692
	.word	.LC680
	.byte	187
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52883, %object
	.size	descriptor.52883, 24
descriptor.52883:
	.word	.LC954
	.word	__func__.52884
	.word	.LC1715
	.word	.LC686
	.byte	218
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52428, %object
	.size	descriptor.52428, 24
descriptor.52428:
	.word	.LC954
	.word	__func__.52429
	.word	.LC1720
	.word	.LC120
	.byte	201
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52553, %object
	.size	descriptor.52553, 24
descriptor.52553:
	.word	.LC954
	.word	__func__.52551
	.word	.LC1720
	.word	.LC600
	.byte	11
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49167, %object
	.size	descriptor.49167, 24
descriptor.49167:
	.word	.LC954
	.word	__func__.49168
	.word	.LC1734
	.word	.LC689
	.byte	173
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49169, %object
	.size	descriptor.49169, 24
descriptor.49169:
	.word	.LC954
	.word	__func__.49168
	.word	.LC1734
	.word	.LC690
	.byte	178
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47603, %object
	.size	descriptor.47603, 24
descriptor.47603:
	.word	.LC954
	.word	__func__.47595
	.word	.LC721
	.word	.LC702
	.byte	138
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47308, %object
	.size	descriptor.47308, 24
descriptor.47308:
	.word	.LC954
	.word	__func__.47307
	.word	.LC721
	.word	.LC168
	.byte	193
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.40936, %object
	.size	descriptor.40936, 24
descriptor.40936:
	.word	.LC954
	.word	__func__.40937
	.word	.LC1750
	.word	.LC714
	.byte	200
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.40954, %object
	.size	descriptor.40954, 24
descriptor.40954:
	.word	.LC954
	.word	__func__.40955
	.word	.LC1750
	.word	.LC714
	.byte	227
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.40975, %object
	.size	descriptor.40975, 24
descriptor.40975:
	.word	.LC954
	.word	__func__.40976
	.word	.LC1750
	.word	.LC715
	.byte	20
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38924, %object
	.size	descriptor.38924, 24
descriptor.38924:
	.word	.LC954
	.word	__func__.38923
	.word	.LC1751
	.word	.LC156
	.byte	108
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50021, %object
	.size	descriptor.50021, 24
descriptor.50021:
	.word	.LC954
	.word	__func__.50020
	.word	.LC1729
	.word	.LC248
	.byte	107
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50025, %object
	.size	descriptor.50025, 24
descriptor.50025:
	.word	.LC954
	.word	__func__.50020
	.word	.LC1729
	.word	.LC249
	.byte	122
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47628, %object
	.size	descriptor.47628, 24
descriptor.47628:
	.word	.LC954
	.word	__func__.47629
	.word	.LC721
	.word	.LC722
	.byte	209
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61918, %object
	.size	descriptor.61918, 24
descriptor.61918:
	.word	.LC954
	.word	__func__.61919
	.word	.LC1567
	.word	.LC1581
	.byte	11
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61942, %object
	.size	descriptor.61942, 24
descriptor.61942:
	.word	.LC954
	.word	__func__.61943
	.word	.LC1567
	.word	.LC1579
	.byte	66
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61950, %object
	.size	descriptor.61950, 24
descriptor.61950:
	.word	.LC954
	.word	__func__.61943
	.word	.LC1567
	.word	.LC1578
	.byte	80
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46182, %object
	.size	descriptor.46182, 24
descriptor.46182:
	.word	.LC954
	.word	__func__.46183
	.word	.LC88
	.word	.LC728
	.byte	72
	.byte	11
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.44452, %object
	.size	descriptor.44452, 24
descriptor.44452:
	.word	.LC954
	.word	__func__.44453
	.word	.LC33
	.word	.LC731
	.byte	150
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55529, %object
	.size	descriptor.55529, 24
descriptor.55529:
	.word	.LC954
	.word	__func__.55530
	.word	.LC58
	.word	.LC732
	.byte	53
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51591, %object
	.size	descriptor.51591, 24
descriptor.51591:
	.word	.LC954
	.word	__func__.51592
	.word	.LC1726
	.word	.LC733
	.byte	97
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51068, %object
	.size	descriptor.51068, 24
descriptor.51068:
	.word	.LC954
	.word	__func__.51069
	.word	.LC1727
	.word	.LC180
	.byte	98
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.40926, %object
	.size	descriptor.40926, 24
descriptor.40926:
	.word	.LC954
	.word	__func__.40927
	.word	.LC1750
	.word	.LC734
	.byte	176
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51457, %object
	.size	descriptor.51457, 24
descriptor.51457:
	.word	.LC954
	.word	__func__.51458
	.word	.LC1726
	.word	.LC615
	.byte	58
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51507, %object
	.size	descriptor.51507, 24
descriptor.51507:
	.word	.LC954
	.word	__func__.51508
	.word	.LC1726
	.word	.LC601
	.byte	165
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46071, %object
	.size	descriptor.46071, 24
descriptor.46071:
	.word	.LC954
	.word	__func__.46072
	.word	.LC88
	.word	.LC735
	.byte	187
	.byte	8
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46073, %object
	.size	descriptor.46073, 24
descriptor.46073:
	.word	.LC954
	.word	__func__.46072
	.word	.LC88
	.word	.LC736
	.byte	191
	.byte	8
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45868, %object
	.size	descriptor.45868, 24
descriptor.45868:
	.word	.LC954
	.word	__func__.45869
	.word	.LC88
	.word	.LC738
	.byte	127
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45870, %object
	.size	descriptor.45870, 24
descriptor.45870:
	.word	.LC954
	.word	__func__.45869
	.word	.LC88
	.word	.LC739
	.byte	131
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45839, %object
	.size	descriptor.45839, 24
descriptor.45839:
	.word	.LC954
	.word	__func__.45840
	.word	.LC88
	.word	.LC740
	.byte	161
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45841, %object
	.size	descriptor.45841, 24
descriptor.45841:
	.word	.LC954
	.word	__func__.45840
	.word	.LC88
	.word	.LC741
	.byte	165
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30979, %object
	.size	descriptor.30979, 24
descriptor.30979:
	.word	.LC954
	.word	__func__.30980
	.word	.LC1762
	.word	.LC742
	.byte	160
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30954, %object
	.size	descriptor.30954, 24
descriptor.30954:
	.word	.LC954
	.word	__func__.30955
	.word	.LC1762
	.word	.LC743
	.byte	41
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30960, %object
	.size	descriptor.30960, 24
descriptor.30960:
	.word	.LC954
	.word	__func__.30961
	.word	.LC1762
	.word	.LC744
	.byte	53
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57184, %object
	.size	descriptor.57184, 24
descriptor.57184:
	.word	.LC954
	.word	__func__.57185
	.word	.LC1683
	.word	.LC1689
	.byte	221
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57189, %object
	.size	descriptor.57189, 24
descriptor.57189:
	.word	.LC954
	.word	__func__.57190
	.word	.LC1683
	.word	.LC1688
	.byte	228
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58256, %object
	.size	descriptor.58256, 24
descriptor.58256:
	.word	.LC954
	.word	__func__.58257
	.word	.LC1616
	.word	.LC1620
	.byte	6
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58261, %object
	.size	descriptor.58261, 24
descriptor.58261:
	.word	.LC954
	.word	__func__.58262
	.word	.LC1616
	.word	.LC1619
	.byte	13
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57219, %object
	.size	descriptor.57219, 24
descriptor.57219:
	.word	.LC954
	.word	__func__.57220
	.word	.LC1683
	.word	.LC749
	.byte	169
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57869, %object
	.size	descriptor.57869, 24
descriptor.57869:
	.word	.LC954
	.word	__func__.57870
	.word	.LC1630
	.word	.LC1633
	.byte	225
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62655, %object
	.size	descriptor.62655, 24
descriptor.62655:
	.word	.LC954
	.word	__func__.62656
	.word	.LC1560
	.word	.LC1562
	.byte	88
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57629, %object
	.size	descriptor.57629, 24
descriptor.57629:
	.word	.LC954
	.word	__func__.57630
	.word	.LC1640
	.word	.LC1648
	.byte	235
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57643, %object
	.size	descriptor.57643, 24
descriptor.57643:
	.word	.LC954
	.word	__func__.57630
	.word	.LC1640
	.word	.LC1647
	.byte	16
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57650, %object
	.size	descriptor.57650, 24
descriptor.57650:
	.word	.LC954
	.word	__func__.57630
	.word	.LC1640
	.word	.LC1646
	.byte	25
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57659, %object
	.size	descriptor.57659, 24
descriptor.57659:
	.word	.LC954
	.word	__func__.57630
	.word	.LC1640
	.word	.LC1645
	.byte	39
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57660, %object
	.size	descriptor.57660, 24
descriptor.57660:
	.word	.LC954
	.word	__func__.57630
	.word	.LC1640
	.word	.LC1644
	.byte	50
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55698, %object
	.size	descriptor.55698, 24
descriptor.55698:
	.word	.LC954
	.word	__func__.55699
	.word	.LC58
	.word	.LC772
	.byte	172
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55701, %object
	.size	descriptor.55701, 24
descriptor.55701:
	.word	.LC954
	.word	__func__.55699
	.word	.LC58
	.word	.LC774
	.byte	181
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55700, %object
	.size	descriptor.55700, 24
descriptor.55700:
	.word	.LC954
	.word	__func__.55699
	.word	.LC58
	.word	.LC773
	.byte	175
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55709, %object
	.size	descriptor.55709, 24
descriptor.55709:
	.word	.LC954
	.word	__func__.55699
	.word	.LC58
	.word	.LC775
	.byte	214
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55712, %object
	.size	descriptor.55712, 24
descriptor.55712:
	.word	.LC954
	.word	__func__.55699
	.word	.LC58
	.word	.LC776
	.byte	229
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56467, %object
	.size	descriptor.56467, 24
descriptor.56467:
	.word	.LC954
	.word	__func__.56468
	.word	.LC1703
	.word	.LC21
	.byte	248
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56774, %object
	.size	descriptor.56774, 24
descriptor.56774:
	.word	.LC954
	.word	__func__.56775
	.word	.LC1692
	.word	.LC779
	.byte	203
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58274, %object
	.size	descriptor.58274, 24
descriptor.58274:
	.word	.LC954
	.word	__func__.58275
	.word	.LC1616
	.word	.LC21
	.byte	43
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57520, %object
	.size	descriptor.57520, 24
descriptor.57520:
	.word	.LC954
	.word	__func__.57518
	.word	.LC1640
	.word	.LC1665
	.byte	56
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57523, %object
	.size	descriptor.57523, 24
descriptor.57523:
	.word	.LC954
	.word	__func__.57518
	.word	.LC1640
	.word	.LC1664
	.byte	65
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57524, %object
	.size	descriptor.57524, 24
descriptor.57524:
	.word	.LC954
	.word	__func__.57518
	.word	.LC1640
	.word	.LC1663
	.byte	69
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57526, %object
	.size	descriptor.57526, 24
descriptor.57526:
	.word	.LC954
	.word	__func__.57518
	.word	.LC1640
	.word	.LC1662
	.byte	79
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57527, %object
	.size	descriptor.57527, 24
descriptor.57527:
	.word	.LC954
	.word	__func__.57518
	.word	.LC1640
	.word	.LC1661
	.byte	88
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57533, %object
	.size	descriptor.57533, 24
descriptor.57533:
	.word	.LC954
	.word	__func__.57518
	.word	.LC1640
	.word	.LC1660
	.byte	107
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57535, %object
	.size	descriptor.57535, 24
descriptor.57535:
	.word	.LC954
	.word	__func__.57518
	.word	.LC1640
	.word	.LC1659
	.byte	114
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57537, %object
	.size	descriptor.57537, 24
descriptor.57537:
	.word	.LC954
	.word	__func__.57518
	.word	.LC1640
	.word	.LC1658
	.byte	127
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57538, %object
	.size	descriptor.57538, 24
descriptor.57538:
	.word	.LC954
	.word	__func__.57518
	.word	.LC1640
	.word	.LC1657
	.byte	135
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57540, %object
	.size	descriptor.57540, 24
descriptor.57540:
	.word	.LC954
	.word	__func__.57518
	.word	.LC1640
	.word	.LC1656
	.byte	141
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57543, %object
	.size	descriptor.57543, 24
descriptor.57543:
	.word	.LC954
	.word	__func__.57518
	.word	.LC1640
	.word	.LC1655
	.byte	163
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57544, %object
	.size	descriptor.57544, 24
descriptor.57544:
	.word	.LC954
	.word	__func__.57518
	.word	.LC1640
	.word	.LC1654
	.byte	171
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57546, %object
	.size	descriptor.57546, 24
descriptor.57546:
	.word	.LC954
	.word	__func__.57518
	.word	.LC1640
	.word	.LC1653
	.byte	178
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57548, %object
	.size	descriptor.57548, 24
descriptor.57548:
	.word	.LC954
	.word	__func__.57518
	.word	.LC1640
	.word	.LC43
	.byte	185
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57551, %object
	.size	descriptor.57551, 24
descriptor.57551:
	.word	.LC954
	.word	__func__.57518
	.word	.LC1640
	.word	.LC44
	.byte	189
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57554, %object
	.size	descriptor.57554, 24
descriptor.57554:
	.word	.LC954
	.word	__func__.57518
	.word	.LC1640
	.word	.LC1652
	.byte	212
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45522, %object
	.size	descriptor.45522, 24
descriptor.45522:
	.word	.LC954
	.word	__func__.45523
	.word	.LC1748
	.word	.LC804
	.byte	176
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45453, %object
	.size	descriptor.45453, 24
descriptor.45453:
	.word	.LC954
	.word	__func__.45454
	.word	.LC1748
	.word	.LC805
	.byte	233
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63313, %object
	.size	descriptor.63313, 24
descriptor.63313:
	.word	.LC954
	.word	__func__.63314
	.word	.LC1553
	.word	.LC806
	.byte	154
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58087, %object
	.size	descriptor.58087, 24
descriptor.58087:
	.word	.LC954
	.word	__func__.58088
	.word	.LC1626
	.word	.LC749
	.byte	35
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56461, %object
	.size	descriptor.56461, 24
descriptor.56461:
	.word	.LC954
	.word	__func__.56462
	.word	.LC1703
	.word	.LC21
	.byte	237
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58268, %object
	.size	descriptor.58268, 24
descriptor.58268:
	.word	.LC954
	.word	__func__.58269
	.word	.LC1616
	.word	.LC21
	.byte	32
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47442, %object
	.size	descriptor.47442, 24
descriptor.47442:
	.word	.LC954
	.word	__func__.47443
	.word	.LC721
	.word	.LC807
	.byte	143
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47450, %object
	.size	descriptor.47450, 24
descriptor.47450:
	.word	.LC954
	.word	__func__.47443
	.word	.LC721
	.word	.LC808
	.byte	182
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53900, %object
	.size	descriptor.53900, 24
descriptor.53900:
	.word	.LC954
	.word	__func__.53901
	.word	.LC1709
	.word	.LC810
	.byte	154
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61652, %object
	.size	descriptor.61652, 24
descriptor.61652:
	.word	.LC954
	.word	__func__.61651
	.word	.LC1593
	.word	.LC1601
	.byte	143
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61621, %object
	.size	descriptor.61621, 24
descriptor.61621:
	.word	.LC954
	.word	__func__.61620
	.word	.LC1593
	.word	.LC1603
	.byte	200
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61653, %object
	.size	descriptor.61653, 24
descriptor.61653:
	.word	.LC954
	.word	__func__.61651
	.word	.LC1593
	.word	.LC1600
	.byte	153
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61608, %object
	.size	descriptor.61608, 24
descriptor.61608:
	.word	.LC954
	.word	__func__.61609
	.word	.LC1593
	.word	.LC1604
	.byte	129
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61633, %object
	.size	descriptor.61633, 24
descriptor.61633:
	.word	.LC954
	.word	__func__.61632
	.word	.LC1593
	.word	.LC1602
	.byte	39
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61687, %object
	.size	descriptor.61687, 24
descriptor.61687:
	.word	.LC954
	.word	__func__.61685
	.word	.LC1593
	.word	.LC1597
	.byte	19
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61930, %object
	.size	descriptor.61930, 24
descriptor.61930:
	.word	.LC954
	.word	__func__.61929
	.word	.LC1567
	.word	.LC1580
	.byte	51
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61910, %object
	.size	descriptor.61910, 24
descriptor.61910:
	.word	.LC954
	.word	__func__.61907
	.word	.LC1567
	.word	.LC1582
	.byte	245
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61671, %object
	.size	descriptor.61671, 24
descriptor.61671:
	.word	.LC954
	.word	__func__.61669
	.word	.LC1593
	.word	.LC1599
	.byte	220
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61672, %object
	.size	descriptor.61672, 24
descriptor.61672:
	.word	.LC954
	.word	__func__.61669
	.word	.LC1593
	.word	.LC1598
	.byte	232
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53863, %object
	.size	descriptor.53863, 24
descriptor.53863:
	.word	.LC954
	.word	__func__.53864
	.word	.LC1709
	.word	.LC841
	.byte	39
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56753, %object
	.size	descriptor.56753, 24
descriptor.56753:
	.word	.LC954
	.word	__func__.56754
	.word	.LC1692
	.word	.LC289
	.byte	166
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53091, %object
	.size	descriptor.53091, 24
descriptor.53091:
	.word	.LC954
	.word	__func__.53092
	.word	.LC1714
	.word	.LC843
	.byte	147
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53093, %object
	.size	descriptor.53093, 24
descriptor.53093:
	.word	.LC954
	.word	__func__.53092
	.word	.LC1714
	.word	.LC844
	.byte	154
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53101, %object
	.size	descriptor.53101, 24
descriptor.53101:
	.word	.LC954
	.word	__func__.53092
	.word	.LC1714
	.word	.LC845
	.byte	183
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53104, %object
	.size	descriptor.53104, 24
descriptor.53104:
	.word	.LC954
	.word	__func__.53092
	.word	.LC1714
	.word	.LC846
	.byte	204
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58293, %object
	.size	descriptor.58293, 24
descriptor.58293:
	.word	.LC954
	.word	__func__.58294
	.word	.LC1616
	.word	.LC1618
	.byte	221
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58231, %object
	.size	descriptor.58231, 24
descriptor.58231:
	.word	.LC954
	.word	__func__.58232
	.word	.LC1616
	.word	.LC848
	.byte	149
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56432, %object
	.size	descriptor.56432, 24
descriptor.56432:
	.word	.LC954
	.word	__func__.56433
	.word	.LC1703
	.word	.LC848
	.byte	121
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45686, %object
	.size	descriptor.45686, 24
descriptor.45686:
	.word	.LC954
	.word	__func__.45687
	.word	.LC88
	.word	.LC853
	.byte	83
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58458, %object
	.size	descriptor.58458, 24
descriptor.58458:
	.word	.LC954
	.word	__func__.58459
	.word	.LC1612
	.word	.LC1614
	.byte	245
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.37581, %object
	.size	descriptor.37581, 24
descriptor.37581:
	.word	.LC954
	.word	__func__.37580
	.word	.LC1756
	.word	.LC862
	.byte	211
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49497, %object
	.size	descriptor.49497, 24
descriptor.49497:
	.word	.LC954
	.word	__func__.49498
	.word	.LC1734
	.word	.LC180
	.byte	58
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54379, %object
	.size	descriptor.54379, 24
descriptor.54379:
	.word	.LC954
	.word	__func__.54380
	.word	.LC1707
	.word	.LC865
	.byte	249
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54388, %object
	.size	descriptor.54388, 24
descriptor.54388:
	.word	.LC954
	.word	__func__.54380
	.word	.LC1707
	.word	.LC866
	.byte	54
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54391, %object
	.size	descriptor.54391, 24
descriptor.54391:
	.word	.LC954
	.word	__func__.54380
	.word	.LC1707
	.word	.LC867
	.byte	70
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52535, %object
	.size	descriptor.52535, 24
descriptor.52535:
	.word	.LC954
	.word	__func__.52536
	.word	.LC1720
	.word	.LC180
	.byte	183
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51600, %object
	.size	descriptor.51600, 24
descriptor.51600:
	.word	.LC954
	.word	__func__.51601
	.word	.LC1726
	.word	.LC180
	.byte	123
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57432, %object
	.size	descriptor.57432, 24
descriptor.57432:
	.word	.LC954
	.word	__func__.57433
	.word	.LC1640
	.word	.LC1676
	.byte	52
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57434, %object
	.size	descriptor.57434, 24
descriptor.57434:
	.word	.LC954
	.word	__func__.57433
	.word	.LC1640
	.word	.LC249
	.byte	66
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57477, %object
	.size	descriptor.57477, 24
descriptor.57477:
	.word	.LC954
	.word	__func__.57478
	.word	.LC1640
	.word	.LC1670
	.byte	171
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57462, %object
	.size	descriptor.57462, 24
descriptor.57462:
	.word	.LC954
	.word	__func__.57463
	.word	.LC1640
	.word	.LC1675
	.byte	105
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57465, %object
	.size	descriptor.57465, 24
descriptor.57465:
	.word	.LC954
	.word	__func__.57463
	.word	.LC1640
	.word	.LC1674
	.byte	118
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57467, %object
	.size	descriptor.57467, 24
descriptor.57467:
	.word	.LC954
	.word	__func__.57463
	.word	.LC1640
	.word	.LC1673
	.byte	123
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57468, %object
	.size	descriptor.57468, 24
descriptor.57468:
	.word	.LC954
	.word	__func__.57463
	.word	.LC1640
	.word	.LC1672
	.byte	126
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57469, %object
	.size	descriptor.57469, 24
descriptor.57469:
	.word	.LC954
	.word	__func__.57463
	.word	.LC1640
	.word	.LC1671
	.byte	151
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57483, %object
	.size	descriptor.57483, 24
descriptor.57483:
	.word	.LC954
	.word	__func__.57478
	.word	.LC1640
	.word	.LC1669
	.byte	194
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38835, %object
	.size	descriptor.38835, 24
descriptor.38835:
	.word	.LC954
	.word	__func__.38836
	.word	.LC1751
	.word	.LC635
	.byte	113
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49647, %object
	.size	descriptor.49647, 24
descriptor.49647:
	.word	.LC954
	.word	__func__.49648
	.word	.LC1734
	.word	.LC883
	.byte	28
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54348, %object
	.size	descriptor.54348, 24
descriptor.54348:
	.word	.LC954
	.word	__func__.54349
	.word	.LC1707
	.word	.LC884
	.byte	142
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54350, %object
	.size	descriptor.54350, 24
descriptor.54350:
	.word	.LC954
	.word	__func__.54349
	.word	.LC1707
	.word	.LC885
	.byte	170
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54358, %object
	.size	descriptor.54358, 24
descriptor.54358:
	.word	.LC954
	.word	__func__.54349
	.word	.LC1707
	.word	.LC886
	.byte	197
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54361, %object
	.size	descriptor.54361, 24
descriptor.54361:
	.word	.LC954
	.word	__func__.54349
	.word	.LC1707
	.word	.LC887
	.byte	219
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62759, %object
	.size	descriptor.62759, 24
descriptor.62759:
	.word	.LC954
	.word	__func__.62751
	.word	.LC1560
	.word	.LC1562
	.byte	115
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62762, %object
	.size	descriptor.62762, 24
descriptor.62762:
	.word	.LC954
	.word	__func__.62751
	.word	.LC1560
	.word	.LC1563
	.byte	130
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45731, %object
	.size	descriptor.45731, 24
descriptor.45731:
	.word	.LC954
	.word	__func__.45728
	.word	.LC88
	.word	.LC894
	.byte	216
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38371, %object
	.size	descriptor.38371, 24
descriptor.38371:
	.word	.LC954
	.word	__func__.38370
	.word	.LC1753
	.word	.LC897
	.byte	191
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38413, %object
	.size	descriptor.38413, 24
descriptor.38413:
	.word	.LC954
	.word	__func__.38370
	.word	.LC1753
	.word	.LC898
	.byte	14
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.37950, %object
	.size	descriptor.37950, 24
descriptor.37950:
	.word	.LC954
	.word	__func__.37951
	.word	.LC1753
	.word	.LC899
	.byte	125
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50006, %object
	.size	descriptor.50006, 24
descriptor.50006:
	.word	.LC954
	.word	__func__.50007
	.word	.LC1729
	.word	.LC901
	.byte	61
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50011, %object
	.size	descriptor.50011, 24
descriptor.50011:
	.word	.LC954
	.word	__func__.50007
	.word	.LC1729
	.word	.LC249
	.byte	81
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49354, %object
	.size	descriptor.49354, 24
descriptor.49354:
	.word	.LC954
	.word	__func__.49355
	.word	.LC1734
	.word	.LC601
	.byte	151
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49415, %object
	.size	descriptor.49415, 24
descriptor.49415:
	.word	.LC954
	.word	__func__.49414
	.word	.LC1734
	.word	.LC377
	.byte	35
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46332, %object
	.size	descriptor.46332, 24
descriptor.46332:
	.word	.LC954
	.word	__func__.46333
	.word	.LC88
	.word	.LC810
	.byte	243
	.byte	13
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46309, %object
	.size	descriptor.46309, 24
descriptor.46309:
	.word	.LC954
	.word	__func__.46310
	.word	.LC88
	.word	.LC931
	.byte	177
	.byte	13
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53464, %object
	.size	descriptor.53464, 24
descriptor.53464:
	.word	.LC954
	.word	__func__.53465
	.word	.LC1711
	.word	.LC932
	.byte	196
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53466, %object
	.size	descriptor.53466, 24
descriptor.53466:
	.word	.LC954
	.word	__func__.53465
	.word	.LC1711
	.word	.LC308
	.byte	199
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53474, %object
	.size	descriptor.53474, 24
descriptor.53474:
	.word	.LC954
	.word	__func__.53465
	.word	.LC1711
	.word	.LC308
	.byte	232
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53475, %object
	.size	descriptor.53475, 24
descriptor.53475:
	.word	.LC954
	.word	__func__.53465
	.word	.LC1711
	.word	.LC935
	.byte	244
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53479, %object
	.size	descriptor.53479, 24
descriptor.53479:
	.word	.LC954
	.word	__func__.53465
	.word	.LC1711
	.word	.LC308
	.byte	252
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53483, %object
	.size	descriptor.53483, 24
descriptor.53483:
	.word	.LC954
	.word	__func__.53465
	.word	.LC1711
	.word	.LC936
	.byte	6
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54430, %object
	.size	descriptor.54430, 24
descriptor.54430:
	.word	.LC954
	.word	__func__.54431
	.word	.LC1707
	.word	.LC937
	.byte	187
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54456, %object
	.size	descriptor.54456, 24
descriptor.54456:
	.word	.LC954
	.word	__func__.54457
	.word	.LC1707
	.word	.LC938
	.byte	55
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53129, %object
	.size	descriptor.53129, 24
descriptor.53129:
	.word	.LC954
	.word	__func__.53130
	.word	.LC1714
	.word	.LC945
	.byte	29
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53035, %object
	.size	descriptor.53035, 24
descriptor.53035:
	.word	.LC954
	.word	__func__.53036
	.word	.LC1714
	.word	.LC946
	.byte	14
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53037, %object
	.size	descriptor.53037, 24
descriptor.53037:
	.word	.LC954
	.word	__func__.53036
	.word	.LC1714
	.word	.LC947
	.byte	18
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53038, %object
	.size	descriptor.53038, 24
descriptor.53038:
	.word	.LC954
	.word	__func__.53036
	.word	.LC1714
	.word	.LC948
	.byte	21
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53039, %object
	.size	descriptor.53039, 24
descriptor.53039:
	.word	.LC954
	.word	__func__.53036
	.word	.LC1714
	.word	.LC949
	.byte	27
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53040, %object
	.size	descriptor.53040, 24
descriptor.53040:
	.word	.LC954
	.word	__func__.53036
	.word	.LC1714
	.word	.LC950
	.byte	30
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53131, %object
	.size	descriptor.53131, 24
descriptor.53131:
	.word	.LC954
	.word	__func__.53130
	.word	.LC1714
	.word	.LC952
	.byte	60
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55798, %object
	.size	descriptor.55798, 24
descriptor.55798:
	.word	.LC954
	.word	__func__.55799
	.word	.LC58
	.word	.LC953
	.byte	187
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55632, %object
	.size	descriptor.55632, 24
descriptor.55632:
	.word	.LC954
	.word	__func__.55633
	.word	.LC58
	.word	.LC946
	.byte	30
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55634, %object
	.size	descriptor.55634, 24
descriptor.55634:
	.word	.LC954
	.word	__func__.55633
	.word	.LC58
	.word	.LC947
	.byte	34
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55635, %object
	.size	descriptor.55635, 24
descriptor.55635:
	.word	.LC954
	.word	__func__.55633
	.word	.LC58
	.word	.LC948
	.byte	37
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55636, %object
	.size	descriptor.55636, 24
descriptor.55636:
	.word	.LC954
	.word	__func__.55633
	.word	.LC58
	.word	.LC949
	.byte	43
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55637, %object
	.size	descriptor.55637, 24
descriptor.55637:
	.word	.LC954
	.word	__func__.55633
	.word	.LC58
	.word	.LC955
	.byte	46
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55638, %object
	.size	descriptor.55638, 24
descriptor.55638:
	.word	.LC954
	.word	__func__.55633
	.word	.LC58
	.word	.LC949
	.byte	52
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55639, %object
	.size	descriptor.55639, 24
descriptor.55639:
	.word	.LC954
	.word	__func__.55633
	.word	.LC58
	.word	.LC955
	.byte	55
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55800, %object
	.size	descriptor.55800, 24
descriptor.55800:
	.word	.LC954
	.word	__func__.55799
	.word	.LC58
	.word	.LC952
	.byte	225
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53558, %object
	.size	descriptor.53558, 24
descriptor.53558:
	.word	.LC954
	.word	__func__.53559
	.word	.LC1711
	.word	.LC957
	.byte	176
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25067, %object
	.size	descriptor.25067, 24
descriptor.25067:
	.word	.LC954
	.word	__func__.25068
	.word	.LC585
	.word	.LC959
	.byte	225
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25070, %object
	.size	descriptor.25070, 24
descriptor.25070:
	.word	.LC954
	.word	__func__.25068
	.word	.LC585
	.word	.LC960
	.byte	2
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38571, %object
	.size	descriptor.38571, 24
descriptor.38571:
	.word	.LC954
	.word	__func__.38572
	.word	.LC1753
	.word	.LC961
	.byte	196
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48420, %object
	.size	descriptor.48420, 24
descriptor.48420:
	.word	.LC954
	.word	__func__.48421
	.word	.LC1738
	.word	.LC180
	.byte	18
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48390, %object
	.size	descriptor.48390, 24
descriptor.48390:
	.word	.LC954
	.word	__func__.48391
	.word	.LC1738
	.word	.LC963
	.byte	182
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62664, %object
	.size	descriptor.62664, 24
descriptor.62664:
	.word	.LC954
	.word	__func__.62665
	.word	.LC1560
	.word	.LC1562
	.byte	109
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53429, %object
	.size	descriptor.53429, 24
descriptor.53429:
	.word	.LC954
	.word	__func__.53430
	.word	.LC1711
	.word	.LC965
	.byte	106
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53436, %object
	.size	descriptor.53436, 24
descriptor.53436:
	.word	.LC954
	.word	__func__.53430
	.word	.LC1711
	.word	.LC308
	.byte	123
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53446, %object
	.size	descriptor.53446, 24
descriptor.53446:
	.word	.LC954
	.word	__func__.53430
	.word	.LC1711
	.word	.LC308
	.byte	152
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53450, %object
	.size	descriptor.53450, 24
descriptor.53450:
	.word	.LC954
	.word	__func__.53430
	.word	.LC1711
	.word	.LC308
	.byte	173
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53451, %object
	.size	descriptor.53451, 24
descriptor.53451:
	.word	.LC954
	.word	__func__.53430
	.word	.LC1711
	.word	.LC968
	.byte	182
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54500, %object
	.size	descriptor.54500, 24
descriptor.54500:
	.word	.LC954
	.word	__func__.54501
	.word	.LC1707
	.word	.LC969
	.byte	197
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54276, %object
	.size	descriptor.54276, 24
descriptor.54276:
	.word	.LC954
	.word	__func__.54277
	.word	.LC1707
	.word	.LC946
	.byte	212
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54278, %object
	.size	descriptor.54278, 24
descriptor.54278:
	.word	.LC954
	.word	__func__.54277
	.word	.LC1707
	.word	.LC947
	.byte	216
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54279, %object
	.size	descriptor.54279, 24
descriptor.54279:
	.word	.LC954
	.word	__func__.54277
	.word	.LC1707
	.word	.LC948
	.byte	219
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54280, %object
	.size	descriptor.54280, 24
descriptor.54280:
	.word	.LC954
	.word	__func__.54277
	.word	.LC1707
	.word	.LC949
	.byte	225
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54281, %object
	.size	descriptor.54281, 24
descriptor.54281:
	.word	.LC954
	.word	__func__.54277
	.word	.LC1707
	.word	.LC970
	.byte	228
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54282, %object
	.size	descriptor.54282, 24
descriptor.54282:
	.word	.LC954
	.word	__func__.54277
	.word	.LC1707
	.word	.LC971
	.byte	234
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54283, %object
	.size	descriptor.54283, 24
descriptor.54283:
	.word	.LC954
	.word	__func__.54277
	.word	.LC1707
	.word	.LC972
	.byte	237
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54502, %object
	.size	descriptor.54502, 24
descriptor.54502:
	.word	.LC954
	.word	__func__.54501
	.word	.LC1707
	.word	.LC952
	.byte	229
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25391, %object
	.size	descriptor.25391, 24
descriptor.25391:
	.word	.LC954
	.word	__func__.25392
	.word	.LC585
	.word	.LC974
	.byte	192
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25393, %object
	.size	descriptor.25393, 24
descriptor.25393:
	.word	.LC954
	.word	__func__.25392
	.word	.LC585
	.word	.LC975
	.byte	195
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25394, %object
	.size	descriptor.25394, 24
descriptor.25394:
	.word	.LC954
	.word	__func__.25392
	.word	.LC585
	.word	.LC976
	.byte	199
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25189, %object
	.size	descriptor.25189, 24
descriptor.25189:
	.word	.LC954
	.word	__func__.25190
	.word	.LC585
	.word	.LC979
	.byte	136
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25215, %object
	.size	descriptor.25215, 24
descriptor.25215:
	.word	.LC954
	.word	__func__.25190
	.word	.LC585
	.word	.LC984
	.byte	234
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25216, %object
	.size	descriptor.25216, 24
descriptor.25216:
	.word	.LC954
	.word	__func__.25190
	.word	.LC585
	.word	.LC985
	.byte	243
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25217, %object
	.size	descriptor.25217, 24
descriptor.25217:
	.word	.LC954
	.word	__func__.25190
	.word	.LC585
	.word	.LC986
	.byte	246
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25429, %object
	.size	descriptor.25429, 24
descriptor.25429:
	.word	.LC954
	.word	__func__.25392
	.word	.LC585
	.word	.LC985
	.byte	77
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25430, %object
	.size	descriptor.25430, 24
descriptor.25430:
	.word	.LC954
	.word	__func__.25392
	.word	.LC585
	.word	.LC986
	.byte	80
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25453, %object
	.size	descriptor.25453, 24
descriptor.25453:
	.word	.LC954
	.word	__func__.25392
	.word	.LC585
	.word	.LC985
	.byte	198
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25454, %object
	.size	descriptor.25454, 24
descriptor.25454:
	.word	.LC954
	.word	__func__.25392
	.word	.LC585
	.word	.LC986
	.byte	201
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25456, %object
	.size	descriptor.25456, 24
descriptor.25456:
	.word	.LC954
	.word	__func__.25392
	.word	.LC585
	.word	.LC991
	.byte	213
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57212, %object
	.size	descriptor.57212, 24
descriptor.57212:
	.word	.LC954
	.word	__func__.57213
	.word	.LC1683
	.word	.LC994
	.byte	134
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57605, %object
	.size	descriptor.57605, 24
descriptor.57605:
	.word	.LC954
	.word	__func__.57603
	.word	.LC1640
	.word	.LC1649
	.byte	74
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53393, %object
	.size	descriptor.53393, 24
descriptor.53393:
	.word	.LC954
	.word	__func__.53390
	.word	.LC1711
	.word	.LC1009
	.byte	46
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56744, %object
	.size	descriptor.56744, 24
descriptor.56744:
	.word	.LC954
	.word	__func__.56745
	.word	.LC1692
	.word	.LC1014
	.byte	155
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56749, %object
	.size	descriptor.56749, 24
descriptor.56749:
	.word	.LC954
	.word	__func__.56745
	.word	.LC1692
	.word	.LC1015
	.byte	159
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56767, %object
	.size	descriptor.56767, 24
descriptor.56767:
	.word	.LC954
	.word	__func__.56768
	.word	.LC1692
	.word	.LC289
	.byte	191
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56780, %object
	.size	descriptor.56780, 24
descriptor.56780:
	.word	.LC954
	.word	__func__.56781
	.word	.LC1692
	.word	.LC289
	.byte	214
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56786, %object
	.size	descriptor.56786, 24
descriptor.56786:
	.word	.LC954
	.word	__func__.56787
	.word	.LC1692
	.word	.LC289
	.byte	221
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58285, %object
	.size	descriptor.58285, 24
descriptor.58285:
	.word	.LC954
	.word	__func__.58286
	.word	.LC1616
	.word	.LC1016
	.byte	186
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61691, %object
	.size	descriptor.61691, 24
descriptor.61691:
	.word	.LC954
	.word	__func__.61692
	.word	.LC1593
	.word	.LC1596
	.byte	35
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61701, %object
	.size	descriptor.61701, 24
descriptor.61701:
	.word	.LC954
	.word	__func__.61702
	.word	.LC1593
	.word	.LC1596
	.byte	47
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61696, %object
	.size	descriptor.61696, 24
descriptor.61696:
	.word	.LC954
	.word	__func__.61697
	.word	.LC1593
	.word	.LC1596
	.byte	41
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61706, %object
	.size	descriptor.61706, 24
descriptor.61706:
	.word	.LC954
	.word	__func__.61707
	.word	.LC1593
	.word	.LC1596
	.byte	53
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63306, %object
	.size	descriptor.63306, 24
descriptor.63306:
	.word	.LC954
	.word	__func__.63307
	.word	.LC1553
	.word	.LC1023
	.byte	126
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58080, %object
	.size	descriptor.58080, 24
descriptor.58080:
	.word	.LC954
	.word	__func__.58081
	.word	.LC1626
	.word	.LC994
	.byte	8
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56478, %object
	.size	descriptor.56478, 24
descriptor.56478:
	.word	.LC954
	.word	__func__.56479
	.word	.LC1703
	.word	.LC1016
	.byte	109
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30970, %object
	.size	descriptor.30970, 24
descriptor.30970:
	.word	.LC954
	.word	__func__.30971
	.word	.LC1762
	.word	.LC1024
	.byte	69
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.40985, %object
	.size	descriptor.40985, 24
descriptor.40985:
	.word	.LC954
	.word	__func__.40986
	.word	.LC1750
	.word	.LC1034
	.byte	39
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.55888, %object
	.size	descriptor.55888, 24
descriptor.55888:
	.word	.LC954
	.word	__func__.55889
	.word	.LC58
	.word	.LC1040
	.byte	119
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.54527, %object
	.size	descriptor.54527, 24
descriptor.54527:
	.word	.LC954
	.word	__func__.54528
	.word	.LC1707
	.word	.LC1042
	.byte	0
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.53149, %object
	.size	descriptor.53149, 24
descriptor.53149:
	.word	.LC954
	.word	__func__.53150
	.word	.LC1714
	.word	.LC1047
	.byte	88
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31024, %object
	.size	descriptor.31024, 24
descriptor.31024:
	.word	.LC954
	.word	__func__.31025
	.word	.LC1762
	.word	.LC1048
	.byte	20
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31036, %object
	.size	descriptor.31036, 24
descriptor.31036:
	.word	.LC954
	.word	__func__.31037
	.word	.LC1762
	.word	.LC1063
	.byte	86
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31048, %object
	.size	descriptor.31048, 24
descriptor.31048:
	.word	.LC954
	.word	__func__.31037
	.word	.LC1762
	.word	.LC1065
	.byte	111
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25228, %object
	.size	descriptor.25228, 24
descriptor.25228:
	.word	.LC954
	.word	__func__.25229
	.word	.LC585
	.word	.LC1079
	.byte	28
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25242, %object
	.size	descriptor.25242, 24
descriptor.25242:
	.word	.LC954
	.word	__func__.25229
	.word	.LC585
	.word	.LC1080
	.byte	63
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25245, %object
	.size	descriptor.25245, 24
descriptor.25245:
	.word	.LC954
	.word	__func__.25229
	.word	.LC585
	.word	.LC1081
	.byte	71
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25249, %object
	.size	descriptor.25249, 24
descriptor.25249:
	.word	.LC954
	.word	__func__.25229
	.word	.LC585
	.word	.LC1082
	.byte	83
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.64846, %object
	.size	descriptor.64846, 24
descriptor.64846:
	.word	.LC954
	.word	__func__.64847
	.word	.LC1459
	.word	.LC1090
	.byte	196
	.byte	14
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.64850, %object
	.size	descriptor.64850, 24
descriptor.64850:
	.word	.LC954
	.word	__func__.64847
	.word	.LC1459
	.word	.LC1496
	.byte	233
	.byte	14
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.64861, %object
	.size	descriptor.64861, 24
descriptor.64861:
	.word	.LC954
	.word	__func__.64847
	.word	.LC1459
	.word	.LC1102
	.byte	30
	.byte	15
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25546, %object
	.size	descriptor.25546, 24
descriptor.25546:
	.word	.LC954
	.word	__func__.25547
	.word	.LC585
	.word	.LC21
	.byte	49
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25553, %object
	.size	descriptor.25553, 24
descriptor.25553:
	.word	.LC954
	.word	__func__.25547
	.word	.LC585
	.word	.LC1114
	.byte	56
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25554, %object
	.size	descriptor.25554, 24
descriptor.25554:
	.word	.LC954
	.word	__func__.25547
	.word	.LC585
	.word	.LC991
	.byte	60
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46220, %object
	.size	descriptor.46220, 24
descriptor.46220:
	.word	.LC954
	.word	__func__.46221
	.word	.LC88
	.word	.LC1115
	.byte	211
	.byte	11
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46155, %object
	.size	descriptor.46155, 24
descriptor.46155:
	.word	.LC954
	.word	__func__.46156
	.word	.LC88
	.word	.LC1117
	.byte	201
	.byte	10
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46028, %object
	.size	descriptor.46028, 24
descriptor.46028:
	.word	.LC954
	.word	__func__.46029
	.word	.LC88
	.word	.LC1118
	.byte	237
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.46157, %object
	.size	descriptor.46157, 24
descriptor.46157:
	.word	.LC954
	.word	__func__.46156
	.word	.LC88
	.word	.LC1120
	.byte	224
	.byte	10
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45994, %object
	.size	descriptor.45994, 24
descriptor.45994:
	.word	.LC954
	.word	__func__.45995
	.word	.LC88
	.word	.LC1138
	.byte	124
	.byte	7
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45906, %object
	.size	descriptor.45906, 24
descriptor.45906:
	.word	.LC954
	.word	__func__.45907
	.word	.LC88
	.word	.LC1143
	.byte	45
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45908, %object
	.size	descriptor.45908, 24
descriptor.45908:
	.word	.LC954
	.word	__func__.45907
	.word	.LC88
	.word	.LC1144
	.byte	49
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45813, %object
	.size	descriptor.45813, 24
descriptor.45813:
	.word	.LC954
	.word	__func__.45814
	.word	.LC88
	.word	.LC740
	.byte	16
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.45815, %object
	.size	descriptor.45815, 24
descriptor.45815:
	.word	.LC954
	.word	__func__.45814
	.word	.LC88
	.word	.LC741
	.byte	20
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.26119, %object
	.size	descriptor.26119, 24
descriptor.26119:
	.word	.LC954
	.word	__func__.26120
	.word	.LC1766
	.word	.LC1156
	.byte	202
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30839, %object
	.size	descriptor.30839, 24
descriptor.30839:
	.word	.LC954
	.word	__func__.30840
	.word	.LC1765
	.word	.LC1160
	.byte	35
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30857, %object
	.size	descriptor.30857, 24
descriptor.30857:
	.word	.LC954
	.word	__func__.30858
	.word	.LC1765
	.word	.LC1163
	.byte	115
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30859, %object
	.size	descriptor.30859, 24
descriptor.30859:
	.word	.LC954
	.word	__func__.30858
	.word	.LC1765
	.word	.LC1165
	.byte	122
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31013, %object
	.size	descriptor.31013, 24
descriptor.31013:
	.word	.LC954
	.word	__func__.31014
	.word	.LC1762
	.word	.LC1166
	.byte	244
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30849, %object
	.size	descriptor.30849, 24
descriptor.30849:
	.word	.LC954
	.word	__func__.30850
	.word	.LC1765
	.word	.LC1168
	.byte	68
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30994, %object
	.size	descriptor.30994, 24
descriptor.30994:
	.word	.LC954
	.word	__func__.30995
	.word	.LC1762
	.word	.LC1174
	.byte	198
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30921, %object
	.size	descriptor.30921, 24
descriptor.30921:
	.word	.LC954
	.word	__func__.30922
	.word	.LC1762
	.word	.LC1178
	.byte	229
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.30941, %object
	.size	descriptor.30941, 24
descriptor.30941:
	.word	.LC954
	.word	__func__.30942
	.word	.LC1762
	.word	.LC1180
	.byte	2
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31064, %object
	.size	descriptor.31064, 24
descriptor.31064:
	.word	.LC954
	.word	__func__.31065
	.word	.LC1762
	.word	.LC1184
	.byte	164
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31081, %object
	.size	descriptor.31081, 24
descriptor.31081:
	.word	.LC954
	.word	__func__.31082
	.word	.LC1762
	.word	.LC1187
	.byte	209
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31104, %object
	.size	descriptor.31104, 24
descriptor.31104:
	.word	.LC954
	.word	__func__.31105
	.word	.LC1762
	.word	.LC1189
	.byte	0
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31116, %object
	.size	descriptor.31116, 24
descriptor.31116:
	.word	.LC954
	.word	__func__.31105
	.word	.LC1762
	.word	.LC1191
	.byte	17
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31120, %object
	.size	descriptor.31120, 24
descriptor.31120:
	.word	.LC954
	.word	__func__.31105
	.word	.LC1762
	.word	.LC1192
	.byte	33
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.31129, %object
	.size	descriptor.31129, 24
descriptor.31129:
	.word	.LC954
	.word	__func__.31130
	.word	.LC1762
	.word	.LC1193
	.byte	58
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47423, %object
	.size	descriptor.47423, 24
descriptor.47423:
	.word	.LC954
	.word	__func__.47424
	.word	.LC721
	.word	.LC1202
	.byte	78
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47427, %object
	.size	descriptor.47427, 24
descriptor.47427:
	.word	.LC954
	.word	__func__.47424
	.word	.LC721
	.word	.LC1203
	.byte	100
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47428, %object
	.size	descriptor.47428, 24
descriptor.47428:
	.word	.LC954
	.word	__func__.47424
	.word	.LC721
	.word	.LC1204
	.byte	107
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.47641, %object
	.size	descriptor.47641, 24
descriptor.47641:
	.word	.LC954
	.word	__func__.47642
	.word	.LC721
	.word	.LC1205
	.byte	16
	.byte	6
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52855, %object
	.size	descriptor.52855, 24
descriptor.52855:
	.word	.LC954
	.word	__func__.52856
	.word	.LC1715
	.word	.LC1206
	.byte	136
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52847, %object
	.size	descriptor.52847, 24
descriptor.52847:
	.word	.LC954
	.word	__func__.52848
	.word	.LC1715
	.word	.LC1207
	.byte	92
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52849, %object
	.size	descriptor.52849, 24
descriptor.52849:
	.word	.LC954
	.word	__func__.52848
	.word	.LC1715
	.word	.LC1208
	.byte	100
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48229, %object
	.size	descriptor.48229, 24
descriptor.48229:
	.word	.LC954
	.word	__func__.48230
	.word	.LC1738
	.word	.LC1209
	.byte	157
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48231, %object
	.size	descriptor.48231, 24
descriptor.48231:
	.word	.LC954
	.word	__func__.48230
	.word	.LC1738
	.word	.LC690
	.byte	162
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48733, %object
	.size	descriptor.48733, 24
descriptor.48733:
	.word	.LC954
	.word	__func__.48734
	.word	.LC1735
	.word	.LC1210
	.byte	25
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48737, %object
	.size	descriptor.48737, 24
descriptor.48737:
	.word	.LC954
	.word	__func__.48734
	.word	.LC1735
	.word	.LC1211
	.byte	32
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48705, %object
	.size	descriptor.48705, 24
descriptor.48705:
	.word	.LC954
	.word	__func__.48706
	.word	.LC1735
	.word	.LC1212
	.byte	164
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48604, %object
	.size	descriptor.48604, 24
descriptor.48604:
	.word	.LC954
	.word	__func__.48605
	.word	.LC1735
	.word	.LC1209
	.byte	151
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48606, %object
	.size	descriptor.48606, 24
descriptor.48606:
	.word	.LC954
	.word	__func__.48605
	.word	.LC1735
	.word	.LC690
	.byte	156
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48739, %object
	.size	descriptor.48739, 24
descriptor.48739:
	.word	.LC954
	.word	__func__.48734
	.word	.LC1735
	.word	.LC1214
	.byte	37
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48242, %object
	.size	descriptor.48242, 24
descriptor.48242:
	.word	.LC954
	.word	__func__.48241
	.word	.LC1738
	.word	.LC237
	.byte	183
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48243, %object
	.size	descriptor.48243, 24
descriptor.48243:
	.word	.LC954
	.word	__func__.48241
	.word	.LC1738
	.word	.LC234
	.byte	188
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48245, %object
	.size	descriptor.48245, 24
descriptor.48245:
	.word	.LC954
	.word	__func__.48241
	.word	.LC1738
	.word	.LC1216
	.byte	193
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48250, %object
	.size	descriptor.48250, 24
descriptor.48250:
	.word	.LC954
	.word	__func__.48241
	.word	.LC1738
	.word	.LC234
	.byte	222
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48263, %object
	.size	descriptor.48263, 24
descriptor.48263:
	.word	.LC954
	.word	__func__.48262
	.word	.LC1738
	.word	.LC1218
	.byte	253
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48264, %object
	.size	descriptor.48264, 24
descriptor.48264:
	.word	.LC954
	.word	__func__.48262
	.word	.LC1738
	.word	.LC1219
	.byte	0
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48265, %object
	.size	descriptor.48265, 24
descriptor.48265:
	.word	.LC954
	.word	__func__.48262
	.word	.LC1738
	.word	.LC1220
	.byte	6
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48266, %object
	.size	descriptor.48266, 24
descriptor.48266:
	.word	.LC954
	.word	__func__.48262
	.word	.LC1738
	.word	.LC1221
	.byte	13
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48276, %object
	.size	descriptor.48276, 24
descriptor.48276:
	.word	.LC954
	.word	__func__.48277
	.word	.LC1738
	.word	.LC1223
	.byte	57
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48278, %object
	.size	descriptor.48278, 24
descriptor.48278:
	.word	.LC954
	.word	__func__.48277
	.word	.LC1738
	.word	.LC1224
	.byte	62
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48283, %object
	.size	descriptor.48283, 24
descriptor.48283:
	.word	.LC954
	.word	__func__.48277
	.word	.LC1738
	.word	.LC1225
	.byte	77
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48325, %object
	.size	descriptor.48325, 24
descriptor.48325:
	.word	.LC954
	.word	__func__.48324
	.word	.LC1738
	.word	.LC1227
	.byte	212
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48336, %object
	.size	descriptor.48336, 24
descriptor.48336:
	.word	.LC954
	.word	__func__.48337
	.word	.LC1738
	.word	.LC233
	.byte	222
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48346, %object
	.size	descriptor.48346, 24
descriptor.48346:
	.word	.LC954
	.word	__func__.48337
	.word	.LC1738
	.word	.LC1229
	.byte	247
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48357, %object
	.size	descriptor.48357, 24
descriptor.48357:
	.word	.LC954
	.word	__func__.48358
	.word	.LC1738
	.word	.LC289
	.byte	57
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48397, %object
	.size	descriptor.48397, 24
descriptor.48397:
	.word	.LC954
	.word	__func__.48398
	.word	.LC1738
	.word	.LC1235
	.byte	204
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48455, %object
	.size	descriptor.48455, 24
descriptor.48455:
	.word	.LC954
	.word	__func__.48449
	.word	.LC1738
	.word	.LC1237
	.byte	135
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48456, %object
	.size	descriptor.48456, 24
descriptor.48456:
	.word	.LC954
	.word	__func__.48449
	.word	.LC1738
	.word	.LC237
	.byte	139
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48468, %object
	.size	descriptor.48468, 24
descriptor.48468:
	.word	.LC954
	.word	__func__.48464
	.word	.LC1738
	.word	.LC1239
	.byte	188
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48532, %object
	.size	descriptor.48532, 24
descriptor.48532:
	.word	.LC954
	.word	__func__.48533
	.word	.LC1738
	.word	.LC1240
	.byte	91
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48778, %object
	.size	descriptor.48778, 24
descriptor.48778:
	.word	.LC954
	.word	__func__.48779
	.word	.LC1735
	.word	.LC1246
	.byte	148
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48789, %object
	.size	descriptor.48789, 24
descriptor.48789:
	.word	.LC954
	.word	__func__.48790
	.word	.LC1735
	.word	.LC1246
	.byte	198
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48890, %object
	.size	descriptor.48890, 24
descriptor.48890:
	.word	.LC954
	.word	__func__.48891
	.word	.LC1735
	.word	.LC1248
	.byte	181
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48838, %object
	.size	descriptor.48838, 24
descriptor.48838:
	.word	.LC954
	.word	__func__.48839
	.word	.LC1735
	.word	.LC1254
	.byte	77
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49205, %object
	.size	descriptor.49205, 24
descriptor.49205:
	.word	.LC954
	.word	__func__.49206
	.word	.LC1734
	.word	.LC1256
	.byte	11
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49220, %object
	.size	descriptor.49220, 24
descriptor.49220:
	.word	.LC954
	.word	__func__.49221
	.word	.LC1734
	.word	.LC1258
	.byte	53
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49595, %object
	.size	descriptor.49595, 24
descriptor.49595:
	.word	.LC954
	.word	__func__.49596
	.word	.LC1734
	.word	.LC1259
	.byte	65
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49611, %object
	.size	descriptor.49611, 24
descriptor.49611:
	.word	.LC954
	.word	__func__.49612
	.word	.LC1734
	.word	.LC1259
	.byte	133
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49622, %object
	.size	descriptor.49622, 24
descriptor.49622:
	.word	.LC954
	.word	__func__.49623
	.word	.LC1734
	.word	.LC1263
	.byte	218
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49526, %object
	.size	descriptor.49526, 24
descriptor.49526:
	.word	.LC954
	.word	__func__.49527
	.word	.LC1734
	.word	.LC1254
	.byte	151
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49539, %object
	.size	descriptor.49539, 24
descriptor.49539:
	.word	.LC954
	.word	__func__.49540
	.word	.LC1734
	.word	.LC1254
	.byte	181
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49828, %object
	.size	descriptor.49828, 24
descriptor.49828:
	.word	.LC954
	.word	__func__.49829
	.word	.LC1730
	.word	.LC1259
	.byte	161
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49850, %object
	.size	descriptor.49850, 24
descriptor.49850:
	.word	.LC954
	.word	__func__.49851
	.word	.LC1730
	.word	.LC1259
	.byte	217
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49917, %object
	.size	descriptor.49917, 24
descriptor.49917:
	.word	.LC954
	.word	__func__.49918
	.word	.LC1730
	.word	.LC1269
	.byte	121
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.49906, %object
	.size	descriptor.49906, 24
descriptor.49906:
	.word	.LC954
	.word	__func__.49907
	.word	.LC1730
	.word	.LC1254
	.byte	110
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50037, %object
	.size	descriptor.50037, 24
descriptor.50037:
	.word	.LC954
	.word	__func__.50038
	.word	.LC1729
	.word	.LC1276
	.byte	144
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.50048, %object
	.size	descriptor.50048, 24
descriptor.50048:
	.word	.LC954
	.word	__func__.50049
	.word	.LC1729
	.word	.LC1276
	.byte	174
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51022, %object
	.size	descriptor.51022, 24
descriptor.51022:
	.word	.LC954
	.word	__func__.51023
	.word	.LC1727
	.word	.LC612
	.byte	221
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51041, %object
	.size	descriptor.51041, 24
descriptor.51041:
	.word	.LC954
	.word	__func__.51042
	.word	.LC1727
	.word	.LC612
	.byte	22
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51119, %object
	.size	descriptor.51119, 24
descriptor.51119:
	.word	.LC954
	.word	__func__.51118
	.word	.LC1727
	.word	.LC1269
	.byte	5
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51103, %object
	.size	descriptor.51103, 24
descriptor.51103:
	.word	.LC954
	.word	__func__.51099
	.word	.LC1727
	.word	.LC1254
	.byte	218
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51628, %object
	.size	descriptor.51628, 24
descriptor.51628:
	.word	.LC954
	.word	__func__.51629
	.word	.LC1726
	.word	.LC612
	.byte	226
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51645, %object
	.size	descriptor.51645, 24
descriptor.51645:
	.word	.LC954
	.word	__func__.51646
	.word	.LC1726
	.word	.LC612
	.byte	21
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51791, %object
	.size	descriptor.51791, 24
descriptor.51791:
	.word	.LC954
	.word	__func__.51790
	.word	.LC1726
	.word	.LC1281
	.byte	133
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51621, %object
	.size	descriptor.51621, 24
descriptor.51621:
	.word	.LC954
	.word	__func__.51614
	.word	.LC1726
	.word	.LC166
	.byte	216
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52027, %object
	.size	descriptor.52027, 24
descriptor.52027:
	.word	.LC954
	.word	__func__.52028
	.word	.LC1725
	.word	.LC612
	.byte	6
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52045, %object
	.size	descriptor.52045, 24
descriptor.52045:
	.word	.LC954
	.word	__func__.52046
	.word	.LC1725
	.word	.LC612
	.byte	57
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52098, %object
	.size	descriptor.52098, 24
descriptor.52098:
	.word	.LC954
	.word	__func__.52097
	.word	.LC1725
	.word	.LC1269
	.byte	204
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52088, %object
	.size	descriptor.52088, 24
descriptor.52088:
	.word	.LC954
	.word	__func__.52084
	.word	.LC1725
	.word	.LC1254
	.byte	186
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52576, %object
	.size	descriptor.52576, 24
descriptor.52576:
	.word	.LC954
	.word	__func__.52577
	.word	.LC1720
	.word	.LC612
	.byte	78
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38865, %object
	.size	descriptor.38865, 24
descriptor.38865:
	.word	.LC954
	.word	__func__.38866
	.word	.LC1751
	.word	.LC612
	.byte	172
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38790, %object
	.size	descriptor.38790, 24
descriptor.38790:
	.word	.LC954
	.word	__func__.38791
	.word	.LC1751
	.word	.LC1283
	.byte	21
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52596, %object
	.size	descriptor.52596, 24
descriptor.52596:
	.word	.LC954
	.word	__func__.52597
	.word	.LC1720
	.word	.LC612
	.byte	137
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38876, %object
	.size	descriptor.38876, 24
descriptor.38876:
	.word	.LC954
	.word	__func__.38877
	.word	.LC1751
	.word	.LC152
	.byte	192
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38878, %object
	.size	descriptor.38878, 24
descriptor.38878:
	.word	.LC954
	.word	__func__.38877
	.word	.LC1751
	.word	.LC1284
	.byte	195
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38767, %object
	.size	descriptor.38767, 24
descriptor.38767:
	.word	.LC954
	.word	__func__.38768
	.word	.LC1751
	.word	.LC1283
	.byte	149
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52680, %object
	.size	descriptor.52680, 24
descriptor.52680:
	.word	.LC954
	.word	__func__.52679
	.word	.LC1720
	.word	.LC1281
	.byte	94
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52568, %object
	.size	descriptor.52568, 24
descriptor.52568:
	.word	.LC954
	.word	__func__.52560
	.word	.LC1720
	.word	.LC1254
	.byte	67
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.39039, %object
	.size	descriptor.39039, 24
descriptor.39039:
	.word	.LC954
	.word	__func__.39038
	.word	.LC1751
	.word	.LC1294
	.byte	4
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.38740, %object
	.size	descriptor.38740, 24
descriptor.38740:
	.word	.LC954
	.word	__func__.38741
	.word	.LC1751
	.word	.LC1298
	.byte	60
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.39016, %object
	.size	descriptor.39016, 24
descriptor.39016:
	.word	.LC954
	.word	__func__.39017
	.word	.LC1751
	.word	.LC1299
	.byte	171
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.39021, %object
	.size	descriptor.39021, 24
descriptor.39021:
	.word	.LC954
	.word	__func__.39017
	.word	.LC1751
	.word	.LC1305
	.byte	221
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52923, %object
	.size	descriptor.52923, 24
descriptor.52923:
	.word	.LC954
	.word	__func__.52924
	.word	.LC1715
	.word	.LC1310
	.byte	132
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56721, %object
	.size	descriptor.56721, 24
descriptor.56721:
	.word	.LC954
	.word	__func__.56722
	.word	.LC1692
	.word	.LC1313
	.byte	70
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56724, %object
	.size	descriptor.56724, 24
descriptor.56724:
	.word	.LC954
	.word	__func__.56722
	.word	.LC1692
	.word	.LC1314
	.byte	77
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56640, %object
	.size	descriptor.56640, 24
descriptor.56640:
	.word	.LC954
	.word	__func__.56634
	.word	.LC1692
	.word	.LC1315
	.byte	27
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56643, %object
	.size	descriptor.56643, 24
descriptor.56643:
	.word	.LC954
	.word	__func__.56634
	.word	.LC1692
	.word	.LC673
	.byte	48
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56728, %object
	.size	descriptor.56728, 24
descriptor.56728:
	.word	.LC954
	.word	__func__.56722
	.word	.LC1692
	.word	.LC1317
	.byte	95
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56733, %object
	.size	descriptor.56733, 24
descriptor.56733:
	.word	.LC954
	.word	__func__.56722
	.word	.LC1692
	.word	.LC1319
	.byte	132
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56411, %object
	.size	descriptor.56411, 24
descriptor.56411:
	.word	.LC954
	.word	__func__.56412
	.word	.LC1703
	.word	.LC1323
	.byte	52
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58211, %object
	.size	descriptor.58211, 24
descriptor.58211:
	.word	.LC954
	.word	__func__.58210
	.word	.LC1616
	.word	.LC1621
	.byte	85
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56760, %object
	.size	descriptor.56760, 24
descriptor.56760:
	.word	.LC954
	.word	__func__.56761
	.word	.LC1692
	.word	.LC289
	.byte	174
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57576, %object
	.size	descriptor.57576, 24
descriptor.57576:
	.word	.LC954
	.word	__func__.57574
	.word	.LC1640
	.word	.LC1650
	.byte	116
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57876, %object
	.size	descriptor.57876, 24
descriptor.57876:
	.word	.LC954
	.word	__func__.57877
	.word	.LC1630
	.word	.LC1632
	.byte	239
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57878, %object
	.size	descriptor.57878, 24
descriptor.57878:
	.word	.LC954
	.word	__func__.57877
	.word	.LC1630
	.word	.LC1631
	.byte	247
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57841, %object
	.size	descriptor.57841, 24
descriptor.57841:
	.word	.LC954
	.word	__func__.57842
	.word	.LC1630
	.word	.LC1635
	.byte	111
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57229, %object
	.size	descriptor.57229, 24
descriptor.57229:
	.word	.LC954
	.word	__func__.57228
	.word	.LC1683
	.word	.LC1687
	.byte	219
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57230, %object
	.size	descriptor.57230, 24
descriptor.57230:
	.word	.LC954
	.word	__func__.57228
	.word	.LC1683
	.word	.LC1686
	.byte	252
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58844, %object
	.size	descriptor.58844, 24
descriptor.58844:
	.word	.LC954
	.word	__func__.58845
	.word	.LC1608
	.word	.LC1610
	.byte	241
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58846, %object
	.size	descriptor.58846, 24
descriptor.58846:
	.word	.LC954
	.word	__func__.58845
	.word	.LC1608
	.word	.LC1609
	.byte	243
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57231, %object
	.size	descriptor.57231, 24
descriptor.57231:
	.word	.LC954
	.word	__func__.57228
	.word	.LC1683
	.word	.LC1685
	.byte	41
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57232, %object
	.size	descriptor.57232, 24
descriptor.57232:
	.word	.LC954
	.word	__func__.57228
	.word	.LC1683
	.word	.LC1684
	.byte	48
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63805, %object
	.size	descriptor.63805, 24
descriptor.63805:
	.word	.LC954
	.word	__func__.63806
	.word	.LC1459
	.word	.LC1539
	.byte	224
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58714, %object
	.size	descriptor.58714, 24
descriptor.58714:
	.word	.LC954
	.word	__func__.58715
	.word	.LC1612
	.word	.LC1376
	.byte	76
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56454, %object
	.size	descriptor.56454, 24
descriptor.56454:
	.word	.LC954
	.word	__func__.56455
	.word	.LC1703
	.word	.LC1386
	.byte	214
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56445, %object
	.size	descriptor.56445, 24
descriptor.56445:
	.word	.LC954
	.word	__func__.56446
	.word	.LC1703
	.word	.LC1387
	.byte	158
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56447, %object
	.size	descriptor.56447, 24
descriptor.56447:
	.word	.LC954
	.word	__func__.56446
	.word	.LC1703
	.word	.LC1388
	.byte	163
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56448, %object
	.size	descriptor.56448, 24
descriptor.56448:
	.word	.LC954
	.word	__func__.56446
	.word	.LC1703
	.word	.LC1389
	.byte	191
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58057, %object
	.size	descriptor.58057, 24
descriptor.58057:
	.word	.LC954
	.word	__func__.58058
	.word	.LC1626
	.word	.LC1390
	.byte	113
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58042, %object
	.size	descriptor.58042, 24
descriptor.58042:
	.word	.LC954
	.word	__func__.58043
	.word	.LC1626
	.word	.LC1391
	.byte	46
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58044, %object
	.size	descriptor.58044, 24
descriptor.58044:
	.word	.LC954
	.word	__func__.58043
	.word	.LC1626
	.word	.LC1392
	.byte	52
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58046, %object
	.size	descriptor.58046, 24
descriptor.58046:
	.word	.LC954
	.word	__func__.58043
	.word	.LC1626
	.word	.LC1393
	.byte	75
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63283, %object
	.size	descriptor.63283, 24
descriptor.63283:
	.word	.LC954
	.word	__func__.63284
	.word	.LC1553
	.word	.LC1394
	.byte	238
	.byte	4
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63218, %object
	.size	descriptor.63218, 24
descriptor.63218:
	.word	.LC954
	.word	__func__.63219
	.word	.LC1553
	.word	.LC1395
	.byte	129
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63220, %object
	.size	descriptor.63220, 24
descriptor.63220:
	.word	.LC954
	.word	__func__.63219
	.word	.LC1553
	.word	.LC1396
	.byte	134
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63221, %object
	.size	descriptor.63221, 24
descriptor.63221:
	.word	.LC954
	.word	__func__.63219
	.word	.LC1553
	.word	.LC1397
	.byte	150
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63223, %object
	.size	descriptor.63223, 24
descriptor.63223:
	.word	.LC954
	.word	__func__.63219
	.word	.LC1553
	.word	.LC1399
	.byte	168
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58860, %object
	.size	descriptor.58860, 24
descriptor.58860:
	.word	.LC954
	.word	__func__.58861
	.word	.LC1608
	.word	.LC1376
	.byte	62
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63756, %object
	.size	descriptor.63756, 24
descriptor.63756:
	.word	.LC954
	.word	__func__.63755
	.word	.LC1459
	.word	.LC1543
	.byte	119
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57179, %object
	.size	descriptor.57179, 24
descriptor.57179:
	.word	.LC954
	.word	__func__.57180
	.word	.LC1683
	.word	.LC1390
	.byte	204
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57110, %object
	.size	descriptor.57110, 24
descriptor.57110:
	.word	.LC954
	.word	__func__.57111
	.word	.LC1683
	.word	.LC1690
	.byte	238
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57164, %object
	.size	descriptor.57164, 24
descriptor.57164:
	.word	.LC954
	.word	__func__.57165
	.word	.LC1683
	.word	.LC1391
	.byte	125
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57166, %object
	.size	descriptor.57166, 24
descriptor.57166:
	.word	.LC954
	.word	__func__.57165
	.word	.LC1683
	.word	.LC1392
	.byte	137
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57168, %object
	.size	descriptor.57168, 24
descriptor.57168:
	.word	.LC954
	.word	__func__.57165
	.word	.LC1683
	.word	.LC1393
	.byte	160
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.57106, %object
	.size	descriptor.57106, 24
descriptor.57106:
	.word	.LC954
	.word	__func__.57105
	.word	.LC1683
	.word	.LC1691
	.byte	227
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58168, %object
	.size	descriptor.58168, 24
descriptor.58168:
	.word	.LC954
	.word	__func__.58169
	.word	.LC1616
	.word	.LC1622
	.byte	203
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58244, %object
	.size	descriptor.58244, 24
descriptor.58244:
	.word	.LC954
	.word	__func__.58245
	.word	.LC1616
	.word	.LC1387
	.byte	187
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58246, %object
	.size	descriptor.58246, 24
descriptor.58246:
	.word	.LC954
	.word	__func__.58245
	.word	.LC1616
	.word	.LC1388
	.byte	197
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.58247, %object
	.size	descriptor.58247, 24
descriptor.58247:
	.word	.LC954
	.word	__func__.58245
	.word	.LC1616
	.word	.LC1409
	.byte	228
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61716, %object
	.size	descriptor.61716, 24
descriptor.61716:
	.word	.LC954
	.word	__func__.61714
	.word	.LC1593
	.word	.LC1595
	.byte	92
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61638, %object
	.size	descriptor.61638, 24
descriptor.61638:
	.word	.LC954
	.word	__func__.61639
	.word	.LC1593
	.word	.LC1603
	.byte	85
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61644, %object
	.size	descriptor.61644, 24
descriptor.61644:
	.word	.LC954
	.word	__func__.61645
	.word	.LC1593
	.word	.LC1602
	.byte	128
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.61721, %object
	.size	descriptor.61721, 24
descriptor.61721:
	.word	.LC954
	.word	__func__.61722
	.word	.LC1593
	.word	.LC1594
	.byte	132
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62685, %object
	.size	descriptor.62685, 24
descriptor.62685:
	.word	.LC954
	.word	__func__.62686
	.word	.LC1560
	.word	.LC946
	.byte	150
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62687, %object
	.size	descriptor.62687, 24
descriptor.62687:
	.word	.LC954
	.word	__func__.62686
	.word	.LC1560
	.word	.LC948
	.byte	157
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62688, %object
	.size	descriptor.62688, 24
descriptor.62688:
	.word	.LC954
	.word	__func__.62686
	.word	.LC1560
	.word	.LC1564
	.byte	166
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.62840, %object
	.size	descriptor.62840, 24
descriptor.62840:
	.word	.LC954
	.word	__func__.62841
	.word	.LC1560
	.word	.LC1562
	.byte	145
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.63550, %object
	.size	descriptor.63550, 24
descriptor.63550:
	.word	.LC954
	.word	__func__.63551
	.word	.LC1459
	.word	.LC1550
	.byte	158
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.64215, %object
	.size	descriptor.64215, 24
descriptor.64215:
	.word	.LC954
	.word	__func__.64216
	.word	.LC1459
	.word	.LC1522
	.byte	229
	.byte	9
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56730, %object
	.size	descriptor.56730, 24
descriptor.56730:
	.word	.LC954
	.word	__func__.56722
	.word	.LC1692
	.word	.LC1693
	.byte	103
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56635, %object
	.size	descriptor.56635, 24
descriptor.56635:
	.word	.LC954
	.word	__func__.56634
	.word	.LC1692
	.word	.LC1694
	.byte	11
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56633, %object
	.size	descriptor.56633, 24
descriptor.56633:
	.word	.LC954
	.word	__func__.56634
	.word	.LC1692
	.word	.LC1695
	.byte	5
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56602, %object
	.size	descriptor.56602, 24
descriptor.56602:
	.word	.LC954
	.word	__func__.56554
	.word	.LC1692
	.word	.LC1696
	.byte	145
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56600, %object
	.size	descriptor.56600, 24
descriptor.56600:
	.word	.LC954
	.word	__func__.56554
	.word	.LC1692
	.word	.LC1697
	.byte	135
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56598, %object
	.size	descriptor.56598, 24
descriptor.56598:
	.word	.LC954
	.word	__func__.56554
	.word	.LC1692
	.word	.LC1698
	.byte	124
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56596, %object
	.size	descriptor.56596, 24
descriptor.56596:
	.word	.LC954
	.word	__func__.56554
	.word	.LC1692
	.word	.LC1699
	.byte	113
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56590, %object
	.size	descriptor.56590, 24
descriptor.56590:
	.word	.LC954
	.word	__func__.56554
	.word	.LC1692
	.word	.LC1700
	.byte	84
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56574, %object
	.size	descriptor.56574, 24
descriptor.56574:
	.word	.LC954
	.word	__func__.56554
	.word	.LC1692
	.word	.LC1701
	.byte	7
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56555, %object
	.size	descriptor.56555, 24
descriptor.56555:
	.word	.LC954
	.word	__func__.56554
	.word	.LC1692
	.word	.LC1694
	.byte	197
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.56553, %object
	.size	descriptor.56553, 24
descriptor.56553:
	.word	.LC954
	.word	__func__.56554
	.word	.LC1692
	.word	.LC1702
	.byte	191
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52458, %object
	.size	descriptor.52458, 24
descriptor.52458:
	.word	.LC954
	.word	__func__.52459
	.word	.LC1720
	.word	.LC1721
	.byte	250
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52413, %object
	.size	descriptor.52413, 24
descriptor.52413:
	.word	.LC954
	.word	__func__.52414
	.word	.LC1720
	.word	.LC601
	.byte	145
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.52308, %object
	.size	descriptor.52308, 24
descriptor.52308:
	.word	.LC954
	.word	__func__.52309
	.word	.LC1720
	.word	.LC1722
	.byte	157
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51532, %object
	.size	descriptor.51532, 24
descriptor.51532:
	.word	.LC954
	.word	__func__.51533
	.word	.LC1726
	.word	.LC601
	.byte	222
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51389, %object
	.size	descriptor.51389, 24
descriptor.51389:
	.word	.LC954
	.word	__func__.51388
	.word	.LC1726
	.word	.LC690
	.byte	159
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.51387, %object
	.size	descriptor.51387, 24
descriptor.51387:
	.word	.LC954
	.word	__func__.51388
	.word	.LC1726
	.word	.LC1722
	.byte	154
	.byte	0
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48412, %object
	.size	descriptor.48412, 24
descriptor.48412:
	.word	.LC954
	.word	__func__.48410
	.word	.LC1738
	.word	.LC1739
	.byte	2
	.byte	3
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48411, %object
	.size	descriptor.48411, 24
descriptor.48411:
	.word	.LC954
	.word	__func__.48410
	.word	.LC1738
	.word	.LC1740
	.byte	247
	.byte	2
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.48348, %object
	.size	descriptor.48348, 24
descriptor.48348:
	.word	.LC954
	.word	__func__.48337
	.word	.LC1738
	.word	.LC1741
	.byte	255
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.37275, %object
	.size	descriptor.37275, 24
descriptor.37275:
	.word	.LC954
	.word	__func__.37276
	.word	.LC1756
	.word	.LC1757
	.byte	170
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.37257, %object
	.size	descriptor.37257, 24
descriptor.37257:
	.word	.LC954
	.word	__func__.37255
	.word	.LC1756
	.word	.LC1758
	.byte	144
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.37256, %object
	.size	descriptor.37256, 24
descriptor.37256:
	.word	.LC954
	.word	__func__.37255
	.word	.LC1756
	.word	.LC1759
	.byte	138
	.byte	1
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25422, %object
	.size	descriptor.25422, 24
descriptor.25422:
	.word	.LC954
	.word	__func__.25392
	.word	.LC585
	.word	.LC1768
	.byte	8
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.type	descriptor.25421, %object
	.size	descriptor.25421, 24
descriptor.25421:
	.word	.LC954
	.word	__func__.25392
	.word	.LC585
	.word	.LC1769
	.byte	6
	.byte	5
	.byte	0
	.byte	0
	.space	4
	.ident	"GCC: (GNU Toolchain for the A-profile Architecture 8.2-2018.11 (arm-rel-8.26)) 8.2.1 20180802"
	.section	.note.GNU-stack,"",%progbits
